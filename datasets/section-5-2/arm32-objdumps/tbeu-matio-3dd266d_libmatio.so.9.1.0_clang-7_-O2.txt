
../repos/tbeu-matio-3dd266d/src/.libs/libmatio.so.9.1.0:     file format elf32-littlearm


Disassembly of section .init:

00001778 <_init>:
    1778:	push	{r3, lr}
    177c:	bl	1a60 <call_weak_fn>
    1780:	pop	{r3, pc}

Disassembly of section .plt:

00001784 <.plt>:
    1784:	push	{lr}		; (str lr, [sp, #-4]!)
    1788:	ldr	lr, [pc, #4]	; 1794 <.plt+0x10>
    178c:	add	lr, pc, lr
    1790:	ldr	pc, [lr, #8]!
    1794:	.word	0x0006886c

00001798 <calloc@plt>:
    1798:	add	ip, pc, #0, 12
    179c:	add	ip, ip, #104, 20	; 0x68000
    17a0:	ldr	pc, [ip, #2156]!	; 0x86c

000017a4 <Mat_VarReadNext@plt>:
    17a4:	add	ip, pc, #0, 12
    17a8:	add	ip, ip, #104, 20	; 0x68000
    17ac:	ldr	pc, [ip, #2148]!	; 0x864

000017b0 <strcmp@plt>:
    17b0:	add	ip, pc, #0, 12
    17b4:	add	ip, ip, #104, 20	; 0x68000
    17b8:	ldr	pc, [ip, #2140]!	; 0x85c

000017bc <__cxa_finalize@plt>:
    17bc:	add	ip, pc, #0, 12
    17c0:	add	ip, ip, #104, 20	; 0x68000
    17c4:	ldr	pc, [ip, #2132]!	; 0x854

000017c8 <Mat_Open@plt>:
    17c8:	add	ip, pc, #0, 12
    17cc:	add	ip, ip, #104, 20	; 0x68000
    17d0:	ldr	pc, [ip, #2124]!	; 0x84c

000017d4 <printf@plt>:
    17d4:	add	ip, pc, #0, 12
    17d8:	add	ip, ip, #104, 20	; 0x68000
    17dc:	ldr	pc, [ip, #2116]!	; 0x844

000017e0 <fopen@plt>:
    17e0:	add	ip, pc, #0, 12
    17e4:	add	ip, ip, #104, 20	; 0x68000
    17e8:	ldr	pc, [ip, #2108]!	; 0x83c

000017ec <inflate@plt>:
    17ec:	add	ip, pc, #0, 12
    17f0:	add	ip, ip, #104, 20	; 0x68000
    17f4:	ldr	pc, [ip, #2100]!	; 0x834

000017f8 <fflush@plt>:
    17f8:	add	ip, pc, #0, 12
    17fc:	add	ip, ip, #104, 20	; 0x68000
    1800:	ldr	pc, [ip, #2092]!	; 0x82c

00001804 <free@plt>:
    1804:	add	ip, pc, #0, 12
    1808:	add	ip, ip, #104, 20	; 0x68000
    180c:	ldr	pc, [ip, #2084]!	; 0x824

00001810 <Mat_Warning@plt>:
    1810:	add	ip, pc, #0, 12
    1814:	add	ip, ip, #104, 20	; 0x68000
    1818:	ldr	pc, [ip, #2076]!	; 0x81c

0000181c <memcpy@plt>:
    181c:	add	ip, pc, #0, 12
    1820:	add	ip, ip, #104, 20	; 0x68000
    1824:	ldr	pc, [ip, #2068]!	; 0x814

00001828 <Mat_VarWrite@plt>:
    1828:	add	ip, pc, #0, 12
    182c:	add	ip, ip, #104, 20	; 0x68000
    1830:	ldr	pc, [ip, #2060]!	; 0x80c

00001834 <time@plt>:
    1834:	add	ip, pc, #0, 12
    1838:	add	ip, ip, #104, 20	; 0x68000
    183c:	ldr	pc, [ip, #2052]!	; 0x804

00001840 <ftell@plt>:
    1840:	add	ip, pc, #0, 12
    1844:	add	ip, ip, #104, 20	; 0x68000
    1848:	ldr	pc, [ip, #2044]!	; 0x7fc

0000184c <fwrite_unlocked@plt>:
    184c:	add	ip, pc, #0, 12
    1850:	add	ip, ip, #104, 20	; 0x68000
    1854:	ldr	pc, [ip, #2036]!	; 0x7f4

00001858 <ctime@plt>:
    1858:	add	ip, pc, #0, 12
    185c:	add	ip, ip, #104, 20	; 0x68000
    1860:	ldr	pc, [ip, #2028]!	; 0x7ec

00001864 <strdup@plt>:
    1864:	add	ip, pc, #0, 12
    1868:	add	ip, ip, #104, 20	; 0x68000
    186c:	ldr	pc, [ip, #2020]!	; 0x7e4

00001870 <realloc@plt>:
    1870:	add	ip, pc, #0, 12
    1874:	add	ip, ip, #104, 20	; 0x68000
    1878:	ldr	pc, [ip, #2012]!	; 0x7dc

0000187c <Mat_VarReadInfo@plt>:
    187c:	add	ip, pc, #0, 12
    1880:	add	ip, ip, #104, 20	; 0x68000
    1884:	ldr	pc, [ip, #2004]!	; 0x7d4

00001888 <zError@plt>:
    1888:	add	ip, pc, #0, 12
    188c:	add	ip, ip, #104, 20	; 0x68000
    1890:	ldr	pc, [ip, #1996]!	; 0x7cc

00001894 <deflate@plt>:
    1894:	add	ip, pc, #0, 12
    1898:	add	ip, ip, #104, 20	; 0x68000
    189c:	ldr	pc, [ip, #1988]!	; 0x7c4

000018a0 <Mat_VarCalloc@plt>:
    18a0:	add	ip, pc, #0, 12
    18a4:	add	ip, ip, #104, 20	; 0x68000
    18a8:	ldr	pc, [ip, #1980]!	; 0x7bc

000018ac <fwrite@plt>:
    18ac:	add	ip, pc, #0, 12
    18b0:	add	ip, ip, #104, 20	; 0x68000
    18b4:	ldr	pc, [ip, #1972]!	; 0x7b4

000018b8 <fread@plt>:
    18b8:	add	ip, pc, #0, 12
    18bc:	add	ip, ip, #104, 20	; 0x68000
    18c0:	ldr	pc, [ip, #1964]!	; 0x7ac

000018c4 <puts@plt>:
    18c4:	add	ip, pc, #0, 12
    18c8:	add	ip, ip, #104, 20	; 0x68000
    18cc:	ldr	pc, [ip, #1956]!	; 0x7a4

000018d0 <malloc@plt>:
    18d0:	add	ip, pc, #0, 12
    18d4:	add	ip, ip, #104, 20	; 0x68000
    18d8:	ldr	pc, [ip, #1948]!	; 0x79c

000018dc <deflateInit_@plt>:
    18dc:	add	ip, pc, #0, 12
    18e0:	add	ip, ip, #104, 20	; 0x68000
    18e4:	ldr	pc, [ip, #1940]!	; 0x794

000018e8 <mktemp@plt>:
    18e8:	add	ip, pc, #0, 12
    18ec:	add	ip, ip, #104, 20	; 0x68000
    18f0:	ldr	pc, [ip, #1932]!	; 0x78c

000018f4 <__gmon_start__@plt>:
    18f4:	add	ip, pc, #0, 12
    18f8:	add	ip, ip, #104, 20	; 0x68000
    18fc:	ldr	pc, [ip, #1924]!	; 0x784

00001900 <exit@plt>:
    1900:	add	ip, pc, #0, 12
    1904:	add	ip, ip, #104, 20	; 0x68000
    1908:	ldr	pc, [ip, #1916]!	; 0x77c

0000190c <feof@plt>:
    190c:	add	ip, pc, #0, 12
    1910:	add	ip, ip, #104, 20	; 0x68000
    1914:	ldr	pc, [ip, #1908]!	; 0x774

00001918 <Mat_VarFree@plt>:
    1918:	add	ip, pc, #0, 12
    191c:	add	ip, ip, #104, 20	; 0x68000
    1920:	ldr	pc, [ip, #1900]!	; 0x76c

00001924 <Mat_SizeOf@plt>:
    1924:	add	ip, pc, #0, 12
    1928:	add	ip, ip, #104, 20	; 0x68000
    192c:	ldr	pc, [ip, #1892]!	; 0x764

00001930 <Mat_GetDir@plt>:
    1930:	add	ip, pc, #0, 12
    1934:	add	ip, ip, #104, 20	; 0x68000
    1938:	ldr	pc, [ip, #1884]!	; 0x75c

0000193c <inflateEnd@plt>:
    193c:	add	ip, pc, #0, 12
    1940:	add	ip, ip, #104, 20	; 0x68000
    1944:	ldr	pc, [ip, #1876]!	; 0x754

00001948 <inflateCopy@plt>:
    1948:	add	ip, pc, #0, 12
    194c:	add	ip, ip, #104, 20	; 0x68000
    1950:	ldr	pc, [ip, #1868]!	; 0x74c

00001954 <strlen@plt>:
    1954:	add	ip, pc, #0, 12
    1958:	add	ip, ip, #104, 20	; 0x68000
    195c:	ldr	pc, [ip, #1860]!	; 0x744

00001960 <fprintf@plt>:
    1960:	add	ip, pc, #0, 12
    1964:	add	ip, ip, #104, 20	; 0x68000
    1968:	ldr	pc, [ip, #1852]!	; 0x73c

0000196c <Mat_VarPrint@plt>:
    196c:	add	ip, pc, #0, 12
    1970:	add	ip, ip, #104, 20	; 0x68000
    1974:	ldr	pc, [ip, #1844]!	; 0x734

00001978 <snprintf@plt>:
    1978:	add	ip, pc, #0, 12
    197c:	add	ip, ip, #104, 20	; 0x68000
    1980:	ldr	pc, [ip, #1836]!	; 0x72c

00001984 <Mat_Rewind@plt>:
    1984:	add	ip, pc, #0, 12
    1988:	add	ip, ip, #104, 20	; 0x68000
    198c:	ldr	pc, [ip, #1828]!	; 0x724

00001990 <memset@plt>:
    1990:	add	ip, pc, #0, 12
    1994:	add	ip, ip, #104, 20	; 0x68000
    1998:	ldr	pc, [ip, #1820]!	; 0x71c

0000199c <putchar@plt>:
    199c:	add	ip, pc, #0, 12
    19a0:	add	ip, ip, #104, 20	; 0x68000
    19a4:	ldr	pc, [ip, #1812]!	; 0x714

000019a8 <Mat_Close@plt>:
    19a8:	add	ip, pc, #0, 12
    19ac:	add	ip, ip, #104, 20	; 0x68000
    19b0:	ldr	pc, [ip, #1804]!	; 0x70c

000019b4 <Mat_Critical@plt>:
    19b4:	add	ip, pc, #0, 12
    19b8:	add	ip, ip, #104, 20	; 0x68000
    19bc:	ldr	pc, [ip, #1796]!	; 0x704

000019c0 <deflateEnd@plt>:
    19c0:	add	ip, pc, #0, 12
    19c4:	add	ip, ip, #104, 20	; 0x68000
    19c8:	ldr	pc, [ip, #1788]!	; 0x6fc

000019cc <fclose@plt>:
    19cc:	add	ip, pc, #0, 12
    19d0:	add	ip, ip, #104, 20	; 0x68000
    19d4:	ldr	pc, [ip, #1780]!	; 0x6f4

000019d8 <inflateInit_@plt>:
    19d8:	add	ip, pc, #0, 12
    19dc:	add	ip, ip, #104, 20	; 0x68000
    19e0:	ldr	pc, [ip, #1772]!	; 0x6ec

000019e4 <fputc@plt>:
    19e4:	add	ip, pc, #0, 12
    19e8:	add	ip, ip, #104, 20	; 0x68000
    19ec:	ldr	pc, [ip, #1764]!	; 0x6e4

000019f0 <remove@plt>:
    19f0:	add	ip, pc, #0, 12
    19f4:	add	ip, ip, #104, 20	; 0x68000
    19f8:	ldr	pc, [ip, #1756]!	; 0x6dc

000019fc <vsnprintf@plt>:
    19fc:	add	ip, pc, #0, 12
    1a00:	add	ip, ip, #104, 20	; 0x68000
    1a04:	ldr	pc, [ip, #1748]!	; 0x6d4

00001a08 <Mat_SizeOfClass@plt>:
    1a08:	add	ip, pc, #0, 12
    1a0c:	add	ip, ip, #104, 20	; 0x68000
    1a10:	ldr	pc, [ip, #1740]!	; 0x6cc

00001a14 <fread_unlocked@plt>:
    1a14:	add	ip, pc, #0, 12
    1a18:	add	ip, ip, #104, 20	; 0x68000
    1a1c:	ldr	pc, [ip, #1732]!	; 0x6c4

00001a20 <Mat_VarGetSize@plt>:
    1a20:	add	ip, pc, #0, 12
    1a24:	add	ip, ip, #104, 20	; 0x68000
    1a28:	ldr	pc, [ip, #1724]!	; 0x6bc

00001a2c <fseek@plt>:
    1a2c:	add	ip, pc, #0, 12
    1a30:	add	ip, ip, #104, 20	; 0x68000
    1a34:	ldr	pc, [ip, #1716]!	; 0x6b4

00001a38 <abort@plt>:
    1a38:	add	ip, pc, #0, 12
    1a3c:	add	ip, ip, #104, 20	; 0x68000
    1a40:	ldr	pc, [ip, #1708]!	; 0x6ac

00001a44 <Mat_VarDuplicate@plt>:
    1a44:	add	ip, pc, #0, 12
    1a48:	add	ip, ip, #104, 20	; 0x68000
    1a4c:	ldr	pc, [ip, #1700]!	; 0x6a4

00001a50 <Mat_VarReadNextInfo@plt>:
    1a50:	add	ip, pc, #0, 12
    1a54:	add	ip, ip, #104, 20	; 0x68000
    1a58:	ldr	pc, [ip, #1692]!	; 0x69c

Disassembly of section .text:

00001a60 <call_weak_fn>:
    1a60:	ldr	r3, [pc, #20]	; 1a7c <call_weak_fn+0x1c>
    1a64:	ldr	r2, [pc, #20]	; 1a80 <call_weak_fn+0x20>
    1a68:	add	r3, pc, r3
    1a6c:	ldr	r2, [r3, r2]
    1a70:	cmp	r2, #0
    1a74:	bxeq	lr
    1a78:	b	18f4 <__gmon_start__@plt>
    1a7c:	.word	0x00068590
    1a80:	.word	0x00000104

00001a84 <deregister_tm_clones>:
    1a84:	ldr	r0, [pc, #44]	; 1ab8 <deregister_tm_clones+0x34>
    1a88:	ldr	r3, [pc, #44]	; 1abc <deregister_tm_clones+0x38>
    1a8c:	add	r0, pc, r0
    1a90:	add	r3, pc, r3
    1a94:	cmp	r3, r0
    1a98:	ldr	r3, [pc, #32]	; 1ac0 <deregister_tm_clones+0x3c>
    1a9c:	add	r3, pc, r3
    1aa0:	bxeq	lr
    1aa4:	ldr	r2, [pc, #24]	; 1ac4 <deregister_tm_clones+0x40>
    1aa8:	ldr	r3, [r3, r2]
    1aac:	cmp	r3, #0
    1ab0:	bxeq	lr
    1ab4:	bx	r3
    1ab8:	.word	0x00068680
    1abc:	.word	0x0006867c
    1ac0:	.word	0x0006855c
    1ac4:	.word	0x000000fc

00001ac8 <register_tm_clones>:
    1ac8:	ldr	r0, [pc, #56]	; 1b08 <register_tm_clones+0x40>
    1acc:	ldr	r3, [pc, #56]	; 1b0c <register_tm_clones+0x44>
    1ad0:	add	r0, pc, r0
    1ad4:	add	r3, pc, r3
    1ad8:	sub	r1, r3, r0
    1adc:	ldr	r3, [pc, #44]	; 1b10 <register_tm_clones+0x48>
    1ae0:	asr	r1, r1, #2
    1ae4:	add	r3, pc, r3
    1ae8:	add	r1, r1, r1, lsr #31
    1aec:	asrs	r1, r1, #1
    1af0:	bxeq	lr
    1af4:	ldr	r2, [pc, #24]	; 1b14 <register_tm_clones+0x4c>
    1af8:	ldr	r3, [r3, r2]
    1afc:	cmp	r3, #0
    1b00:	bxeq	lr
    1b04:	bx	r3
    1b08:	.word	0x0006863c
    1b0c:	.word	0x00068638
    1b10:	.word	0x00068514
    1b14:	.word	0x0000010c

00001b18 <__do_global_dtors_aux>:
    1b18:	ldr	r3, [pc, #76]	; 1b6c <__do_global_dtors_aux+0x54>
    1b1c:	ldr	r2, [pc, #76]	; 1b70 <__do_global_dtors_aux+0x58>
    1b20:	add	r3, pc, r3
    1b24:	add	r2, pc, r2
    1b28:	ldrb	r3, [r3]
    1b2c:	cmp	r3, #0
    1b30:	bxne	lr
    1b34:	ldr	r3, [pc, #56]	; 1b74 <__do_global_dtors_aux+0x5c>
    1b38:	push	{r4, lr}
    1b3c:	ldr	r3, [r2, r3]
    1b40:	cmp	r3, #0
    1b44:	beq	1b54 <__do_global_dtors_aux+0x3c>
    1b48:	ldr	r3, [pc, #40]	; 1b78 <__do_global_dtors_aux+0x60>
    1b4c:	ldr	r0, [pc, r3]
    1b50:	bl	17bc <__cxa_finalize@plt>
    1b54:	bl	1a84 <deregister_tm_clones>
    1b58:	ldr	r3, [pc, #28]	; 1b7c <__do_global_dtors_aux+0x64>
    1b5c:	mov	r2, #1
    1b60:	add	r3, pc, r3
    1b64:	strb	r2, [r3]
    1b68:	pop	{r4, pc}
    1b6c:	.word	0x000685ec
    1b70:	.word	0x000684d4
    1b74:	.word	0x000000f8
    1b78:	.word	0x000685bc
    1b7c:	.word	0x000685ac

00001b80 <frame_dummy>:
    1b80:	b	1ac8 <register_tm_clones>

00001b84 <Mat_int64Swap>:
    1b84:	push	{r4, r5, fp, lr}
    1b88:	add	fp, sp, #8
    1b8c:	ldrd	r2, [r0]
    1b90:	mov	ip, #65280	; 0xff00
    1b94:	lsr	r1, r3, #24
    1b98:	and	lr, ip, r3, lsr #8
    1b9c:	orr	r1, r1, r3, lsl #24
    1ba0:	and	r3, r3, #65280	; 0xff00
    1ba4:	orr	r1, r1, r3, lsl #8
    1ba8:	lsl	r3, r2, #8
    1bac:	uxtb16	r3, r3
    1bb0:	orr	r4, r1, lr
    1bb4:	and	r1, ip, r2, lsr #8
    1bb8:	orr	r3, r3, r2, lsl #24
    1bbc:	orr	r1, r3, r1
    1bc0:	orr	r5, r1, r2, lsr #24
    1bc4:	strd	r4, [r0]
    1bc8:	mov	r0, r4
    1bcc:	mov	r1, r5
    1bd0:	pop	{r4, r5, fp, pc}

00001bd4 <Mat_uint64Swap>:
    1bd4:	ldrd	r2, [r0]
    1bd8:	rev	r1, r2
    1bdc:	rev	r2, r3
    1be0:	str	r2, [r0]
    1be4:	str	r1, [r0, #4]
    1be8:	mov	r0, r2
    1bec:	bx	lr

00001bf0 <Mat_int32Swap>:
    1bf0:	ldr	r1, [r0]
    1bf4:	rev	r1, r1
    1bf8:	str	r1, [r0]
    1bfc:	mov	r0, r1
    1c00:	bx	lr

00001c04 <Mat_uint32Swap>:
    1c04:	ldr	r1, [r0]
    1c08:	rev	r1, r1
    1c0c:	str	r1, [r0]
    1c10:	mov	r0, r1
    1c14:	bx	lr

00001c18 <Mat_int16Swap>:
    1c18:	ldrh	r1, [r0]
    1c1c:	rev16	r2, r1
    1c20:	strh	r2, [r0]
    1c24:	revsh	r0, r1
    1c28:	bx	lr

00001c2c <Mat_uint16Swap>:
    1c2c:	ldrh	r1, [r0]
    1c30:	rev16	r2, r1
    1c34:	strh	r2, [r0]
    1c38:	rev	r0, r1
    1c3c:	lsr	r0, r0, #16
    1c40:	bx	lr

00001c44 <Mat_floatSwap>:
    1c44:	ldr	r1, [r0]
    1c48:	uxtb	r2, r1
    1c4c:	and	r3, r1, #-16777216	; 0xff000000
    1c50:	eor	r2, r2, r1, lsr #24
    1c54:	eor	r3, r3, r2, lsl #24
    1c58:	eor	ip, r2, r3, lsr #24
    1c5c:	and	r2, r1, #16711680	; 0xff0000
    1c60:	eor	r1, r1, r1, lsr #8
    1c64:	and	r1, r1, #65280	; 0xff00
    1c68:	eor	r2, r2, r1, lsl #8
    1c6c:	orr	r3, r2, r3
    1c70:	eor	r1, r1, r2, lsr #8
    1c74:	orr	r3, r3, ip
    1c78:	orr	r1, r3, r1
    1c7c:	vmov	s0, r1
    1c80:	str	r1, [r0]
    1c84:	bx	lr

00001c88 <Mat_doubleSwap>:
    1c88:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    1c8c:	add	fp, sp, #24
    1c90:	ldr	r4, [r0]
    1c94:	ldr	r3, [r0, #4]
    1c98:	uxtb	r1, r4
    1c9c:	lsr	r5, r4, #24
    1ca0:	mov	r2, r4
    1ca4:	eor	r6, r3, r3, lsr #24
    1ca8:	eor	ip, r1, r3, lsr #24
    1cac:	and	r1, r3, #-16777216	; 0xff000000
    1cb0:	orr	r5, r5, r3, lsl #8
    1cb4:	bfc	r2, #0, #16
    1cb8:	lsl	r6, r6, #24
    1cbc:	eor	lr, r1, ip, lsl #24
    1cc0:	eor	r1, r4, r3, lsr #8
    1cc4:	eor	r5, r5, r4
    1cc8:	eor	ip, ip, lr, lsr #24
    1ccc:	orr	r6, r6, r5, lsr #8
    1cd0:	and	r1, r1, #65280	; 0xff00
    1cd4:	orr	r2, r2, ip
    1cd8:	eor	r6, r6, r3
    1cdc:	orr	r1, r2, r1
    1ce0:	and	r7, r6, #65280	; 0xff00
    1ce4:	eor	r2, r3, r1, lsl #8
    1ce8:	orr	r7, r7, lr
    1cec:	eor	r1, r1, r2, lsr #8
    1cf0:	and	r2, r2, #16711680	; 0xff0000
    1cf4:	orr	r2, r7, r2
    1cf8:	lsr	r7, r4, #8
    1cfc:	and	r1, r1, #65280	; 0xff00
    1d00:	orr	r7, r7, r3, lsl #24
    1d04:	orr	r1, ip, r1
    1d08:	eor	r7, r7, r4
    1d0c:	eor	r4, r3, r3, lsr #8
    1d10:	lsl	r4, r4, #8
    1d14:	orr	r4, r4, r7, lsr #24
    1d18:	eor	r3, r4, r3
    1d1c:	uxtb	r4, r3
    1d20:	orr	r9, r4, r2
    1d24:	eor	r2, r7, r3, lsl #24
    1d28:	and	r2, r2, #-16777216	; 0xff000000
    1d2c:	orr	r1, r2, r1
    1d30:	eor	r2, r5, r6, lsl #8
    1d34:	and	r2, r2, #16711680	; 0xff0000
    1d38:	orr	r8, r1, r2
    1d3c:	vmov	d0, r8, r9
    1d40:	strd	r8, [r0]
    1d44:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00001d48 <strdup_vprintf>:
    1d48:	push	{r4, r5, r6, sl, fp, lr}
    1d4c:	add	fp, sp, #16
    1d50:	sub	sp, sp, #8
    1d54:	str	r1, [sp, #4]
    1d58:	mov	r4, r0
    1d5c:	mov	r0, #0
    1d60:	mov	r1, #0
    1d64:	ldr	r3, [sp, #4]
    1d68:	mov	r2, r4
    1d6c:	str	r3, [sp]
    1d70:	bl	19fc <vsnprintf@plt>
    1d74:	mov	r6, r0
    1d78:	add	r0, r0, #2
    1d7c:	bl	18d0 <malloc@plt>
    1d80:	mov	r5, r0
    1d84:	cmp	r0, #0
    1d88:	beq	1da0 <strdup_vprintf+0x58>
    1d8c:	ldr	r3, [sp, #4]
    1d90:	add	r1, r6, #1
    1d94:	mov	r0, r5
    1d98:	mov	r2, r4
    1d9c:	bl	19fc <vsnprintf@plt>
    1da0:	mov	r0, r5
    1da4:	sub	sp, fp, #16
    1da8:	pop	{r4, r5, r6, sl, fp, pc}

00001dac <strdup_printf>:
    1dac:	sub	sp, sp, #12
    1db0:	push	{fp, lr}
    1db4:	mov	fp, sp
    1db8:	sub	sp, sp, #4
    1dbc:	add	ip, fp, #8
    1dc0:	stm	ip, {r1, r2, r3}
    1dc4:	add	r1, fp, #8
    1dc8:	str	r1, [sp]
    1dcc:	bl	1d48 <strdup_vprintf>
    1dd0:	mov	sp, fp
    1dd4:	pop	{fp, lr}
    1dd8:	add	sp, sp, #12
    1ddc:	bx	lr

00001de0 <Mat_SetVerbose>:
    1de0:	ldr	r2, [pc, #24]	; 1e00 <Mat_SetVerbose+0x20>
    1de4:	add	r2, pc, r2
    1de8:	str	r1, [r2]
    1dec:	ldr	r1, [pc, #16]	; 1e04 <Mat_SetVerbose+0x24>
    1df0:	add	r1, pc, r1
    1df4:	str	r0, [r1]
    1df8:	mov	r0, #0
    1dfc:	bx	lr
    1e00:	.word	0x00068330
    1e04:	.word	0x00068320

00001e08 <Mat_SetDebug>:
    1e08:	ldr	r1, [pc, #12]	; 1e1c <Mat_SetDebug+0x14>
    1e0c:	add	r1, pc, r1
    1e10:	str	r0, [r1]
    1e14:	mov	r0, #0
    1e18:	bx	lr
    1e1c:	.word	0x0006830c

00001e20 <Mat_Message>:
    1e20:	sub	sp, sp, #12
    1e24:	push	{r4, sl, fp, lr}
    1e28:	add	fp, sp, #8
    1e2c:	sub	sp, sp, #4
    1e30:	add	ip, fp, #8
    1e34:	stm	ip, {r1, r2, r3}
    1e38:	ldr	r1, [pc, #88]	; 1e98 <Mat_Message+0x78>
    1e3c:	ldr	r1, [pc, r1]
    1e40:	cmp	r1, #0
    1e44:	bne	1e84 <Mat_Message+0x64>
    1e48:	ldr	r1, [pc, #76]	; 1e9c <Mat_Message+0x7c>
    1e4c:	ldr	r1, [pc, r1]
    1e50:	cmp	r1, #0
    1e54:	beq	1e84 <Mat_Message+0x64>
    1e58:	add	r1, fp, #8
    1e5c:	str	r1, [sp]
    1e60:	bl	1d48 <strdup_vprintf>
    1e64:	ldr	r2, [pc, #52]	; 1ea0 <Mat_Message+0x80>
    1e68:	mov	r4, r0
    1e6c:	mov	r0, #8
    1e70:	mov	r1, r4
    1e74:	ldr	r2, [pc, r2]
    1e78:	blx	r2
    1e7c:	mov	r0, r4
    1e80:	bl	1804 <free@plt>
    1e84:	mov	r0, #0
    1e88:	sub	sp, fp, #8
    1e8c:	pop	{r4, sl, fp, lr}
    1e90:	add	sp, sp, #12
    1e94:	bx	lr
    1e98:	.word	0x000682d8
    1e9c:	.word	0x000682d0
    1ea0:	.word	0x000682a8

00001ea4 <mat_log>:
    1ea4:	push	{r4, r5, fp, lr}
    1ea8:	add	fp, sp, #8
    1eac:	mov	r4, r0
    1eb0:	ldr	r0, [pc, #56]	; 1ef0 <mat_log+0x4c>
    1eb4:	ldr	r0, [pc, r0]
    1eb8:	cmp	r0, #0
    1ebc:	popeq	{r4, r5, fp, pc}
    1ec0:	mov	r0, r1
    1ec4:	mov	r1, r2
    1ec8:	bl	1d48 <strdup_vprintf>
    1ecc:	ldr	r2, [pc, #32]	; 1ef4 <mat_log+0x50>
    1ed0:	mov	r5, r0
    1ed4:	mov	r0, r4
    1ed8:	mov	r1, r5
    1edc:	ldr	r2, [pc, r2]
    1ee0:	blx	r2
    1ee4:	mov	r0, r5
    1ee8:	pop	{r4, r5, fp, lr}
    1eec:	b	1804 <free@plt>
    1ef0:	.word	0x00068268
    1ef4:	.word	0x00068240

00001ef8 <Mat_DebugMessage>:
    1ef8:	sub	sp, sp, #8
    1efc:	push	{r4, sl, fp, lr}
    1f00:	add	fp, sp, #8
    1f04:	sub	sp, sp, #8
    1f08:	str	r3, [fp, #12]
    1f0c:	str	r2, [fp, #8]
    1f10:	ldr	r2, [pc, #116]	; 1f8c <Mat_DebugMessage+0x94>
    1f14:	ldr	r2, [pc, r2]
    1f18:	cmp	r2, #0
    1f1c:	bne	1f78 <Mat_DebugMessage+0x80>
    1f20:	ldr	r2, [pc, #104]	; 1f90 <Mat_DebugMessage+0x98>
    1f24:	ldr	r2, [pc, r2]
    1f28:	cmp	r2, r0
    1f2c:	blt	1f78 <Mat_DebugMessage+0x80>
    1f30:	add	r0, fp, #8
    1f34:	str	r0, [sp, #4]
    1f38:	ldr	r0, [pc, #84]	; 1f94 <Mat_DebugMessage+0x9c>
    1f3c:	ldr	r0, [pc, r0]
    1f40:	cmp	r0, #0
    1f44:	beq	1f78 <Mat_DebugMessage+0x80>
    1f48:	ldr	r2, [sp, #4]
    1f4c:	mov	r0, r1
    1f50:	mov	r1, r2
    1f54:	bl	1d48 <strdup_vprintf>
    1f58:	ldr	r2, [pc, #56]	; 1f98 <Mat_DebugMessage+0xa0>
    1f5c:	mov	r4, r0
    1f60:	mov	r0, #16
    1f64:	mov	r1, r4
    1f68:	ldr	r2, [pc, r2]
    1f6c:	blx	r2
    1f70:	mov	r0, r4
    1f74:	bl	1804 <free@plt>
    1f78:	mov	r0, #0
    1f7c:	sub	sp, fp, #8
    1f80:	pop	{r4, sl, fp, lr}
    1f84:	add	sp, sp, #8
    1f88:	bx	lr
    1f8c:	.word	0x00068200
    1f90:	.word	0x000681f4
    1f94:	.word	0x000681e0
    1f98:	.word	0x000681b4

00001f9c <Mat_VerbMessage>:
    1f9c:	sub	sp, sp, #8
    1fa0:	push	{r4, sl, fp, lr}
    1fa4:	add	fp, sp, #8
    1fa8:	sub	sp, sp, #8
    1fac:	str	r3, [fp, #12]
    1fb0:	str	r2, [fp, #8]
    1fb4:	ldr	r2, [pc, #116]	; 2030 <Mat_VerbMessage+0x94>
    1fb8:	ldr	r2, [pc, r2]
    1fbc:	cmp	r2, #0
    1fc0:	bne	201c <Mat_VerbMessage+0x80>
    1fc4:	ldr	r2, [pc, #104]	; 2034 <Mat_VerbMessage+0x98>
    1fc8:	ldr	r2, [pc, r2]
    1fcc:	cmp	r2, r0
    1fd0:	blt	201c <Mat_VerbMessage+0x80>
    1fd4:	add	r0, fp, #8
    1fd8:	str	r0, [sp, #4]
    1fdc:	ldr	r0, [pc, #84]	; 2038 <Mat_VerbMessage+0x9c>
    1fe0:	ldr	r0, [pc, r0]
    1fe4:	cmp	r0, #0
    1fe8:	beq	201c <Mat_VerbMessage+0x80>
    1fec:	ldr	r2, [sp, #4]
    1ff0:	mov	r0, r1
    1ff4:	mov	r1, r2
    1ff8:	bl	1d48 <strdup_vprintf>
    1ffc:	ldr	r2, [pc, #56]	; 203c <Mat_VerbMessage+0xa0>
    2000:	mov	r4, r0
    2004:	mov	r0, #8
    2008:	mov	r1, r4
    200c:	ldr	r2, [pc, r2]
    2010:	blx	r2
    2014:	mov	r0, r4
    2018:	bl	1804 <free@plt>
    201c:	mov	r0, #0
    2020:	sub	sp, fp, #8
    2024:	pop	{r4, sl, fp, lr}
    2028:	add	sp, sp, #8
    202c:	bx	lr
    2030:	.word	0x0006815c
    2034:	.word	0x00068148
    2038:	.word	0x0006813c
    203c:	.word	0x00068110

00002040 <Mat_Critical>:
    2040:	sub	sp, sp, #12
    2044:	push	{r4, sl, fp, lr}
    2048:	add	fp, sp, #8
    204c:	sub	sp, sp, #4
    2050:	add	ip, fp, #8
    2054:	stm	ip, {r1, r2, r3}
    2058:	add	r1, fp, #8
    205c:	str	r1, [sp]
    2060:	ldr	r1, [pc, #64]	; 20a8 <Mat_Critical+0x68>
    2064:	ldr	r1, [pc, r1]
    2068:	cmp	r1, #0
    206c:	beq	2098 <Mat_Critical+0x58>
    2070:	ldr	r1, [sp]
    2074:	bl	1d48 <strdup_vprintf>
    2078:	ldr	r2, [pc, #44]	; 20ac <Mat_Critical+0x6c>
    207c:	mov	r4, r0
    2080:	mov	r0, #2
    2084:	mov	r1, r4
    2088:	ldr	r2, [pc, r2]
    208c:	blx	r2
    2090:	mov	r0, r4
    2094:	bl	1804 <free@plt>
    2098:	sub	sp, fp, #8
    209c:	pop	{r4, sl, fp, lr}
    20a0:	add	sp, sp, #12
    20a4:	bx	lr
    20a8:	.word	0x000680b8
    20ac:	.word	0x00068094

000020b0 <Mat_Error>:
    20b0:	sub	sp, sp, #12
    20b4:	push	{fp, lr}
    20b8:	mov	fp, sp
    20bc:	sub	sp, sp, #4
    20c0:	mov	ip, r0
    20c4:	add	r0, fp, #8
    20c8:	stm	r0, {r1, r2, r3}
    20cc:	add	r2, fp, #8
    20d0:	mov	r0, #1
    20d4:	mov	r1, ip
    20d8:	str	r2, [sp]
    20dc:	bl	1ea4 <mat_log>
    20e0:	bl	1a38 <abort@plt>

000020e4 <Mat_Help>:
    20e4:	push	{fp, lr}
    20e8:	mov	fp, sp
    20ec:	mov	r1, r0
    20f0:	ldr	r0, [r0]
    20f4:	cmp	r0, #0
    20f8:	beq	2110 <Mat_Help+0x2c>
    20fc:	add	r4, r1, #4
    2100:	bl	18c4 <puts@plt>
    2104:	ldr	r0, [r4], #4
    2108:	cmp	r0, #0
    210c:	bne	2100 <Mat_Help+0x1c>
    2110:	mov	r0, #0
    2114:	bl	1900 <exit@plt>

00002118 <Mat_LogClose>:
    2118:	ldr	r0, [pc, #16]	; 2130 <Mat_LogClose+0x18>
    211c:	mov	r1, #0
    2120:	add	r0, pc, r0
    2124:	str	r1, [r0]
    2128:	mov	r0, #1
    212c:	bx	lr
    2130:	.word	0x00067ffc

00002134 <Mat_LogInit>:
    2134:	ldr	r0, [pc, #48]	; 216c <Mat_LogInit+0x38>
    2138:	mov	r1, #0
    213c:	add	r0, pc, r0
    2140:	str	r1, [r0]
    2144:	ldr	r0, [pc, #36]	; 2170 <Mat_LogInit+0x3c>
    2148:	ldr	r2, [pc, #36]	; 2174 <Mat_LogInit+0x40>
    214c:	add	r0, pc, r0
    2150:	add	r2, pc, r2
    2154:	str	r2, [r0]
    2158:	ldr	r0, [pc, #24]	; 2178 <Mat_LogInit+0x44>
    215c:	add	r0, pc, r0
    2160:	str	r1, [r0]
    2164:	mov	r0, #0
    2168:	bx	lr
    216c:	.word	0x00067fd4
    2170:	.word	0x00067fd0
    2174:	.word	0x00000024
    2178:	.word	0x00067fb8

0000217c <mat_logfunc>:
    217c:	push	{r4, sl, fp, lr}
    2180:	add	fp, sp, #8
    2184:	ldr	r2, [pc, #344]	; 22e4 <mat_logfunc+0x168>
    2188:	mov	r3, r1
    218c:	and	r1, r0, #2
    2190:	ldr	r2, [pc, r2]
    2194:	cmp	r2, #0
    2198:	beq	21bc <mat_logfunc+0x40>
    219c:	cmp	r1, #0
    21a0:	beq	21dc <mat_logfunc+0x60>
    21a4:	ldr	r4, [pc, #316]	; 22e8 <mat_logfunc+0x16c>
    21a8:	ldr	r4, [pc, r4]
    21ac:	ldr	r0, [r4]
    21b0:	ldr	r1, [pc, #308]	; 22ec <mat_logfunc+0x170>
    21b4:	add	r1, pc, r1
    21b8:	b	2258 <mat_logfunc+0xdc>
    21bc:	cmp	r1, #0
    21c0:	beq	220c <mat_logfunc+0x90>
    21c4:	ldr	r4, [pc, #324]	; 2310 <mat_logfunc+0x194>
    21c8:	ldr	r4, [pc, r4]
    21cc:	ldr	r0, [r4]
    21d0:	ldr	r1, [pc, #316]	; 2314 <mat_logfunc+0x198>
    21d4:	add	r1, pc, r1
    21d8:	b	228c <mat_logfunc+0x110>
    21dc:	tst	r0, #1
    21e0:	bne	22a0 <mat_logfunc+0x124>
    21e4:	tst	r0, #4
    21e8:	bne	2244 <mat_logfunc+0xc8>
    21ec:	tst	r0, #16
    21f0:	beq	2224 <mat_logfunc+0xa8>
    21f4:	ldr	r4, [pc, #260]	; 2300 <mat_logfunc+0x184>
    21f8:	ldr	r4, [pc, r4]
    21fc:	ldr	r0, [r4]
    2200:	ldr	r1, [pc, #252]	; 2304 <mat_logfunc+0x188>
    2204:	add	r1, pc, r1
    2208:	b	2258 <mat_logfunc+0xdc>
    220c:	tst	r0, #1
    2210:	bne	22bc <mat_logfunc+0x140>
    2214:	tst	r0, #4
    2218:	bne	2260 <mat_logfunc+0xe4>
    221c:	tst	r0, #16
    2220:	bne	2278 <mat_logfunc+0xfc>
    2224:	tst	r0, #8
    2228:	popeq	{r4, sl, fp, pc}
    222c:	ldr	r4, [pc, #212]	; 2308 <mat_logfunc+0x18c>
    2230:	ldr	r4, [pc, r4]
    2234:	ldr	r0, [r4]
    2238:	ldr	r1, [pc, #204]	; 230c <mat_logfunc+0x190>
    223c:	add	r1, pc, r1
    2240:	b	228c <mat_logfunc+0x110>
    2244:	ldr	r4, [pc, #172]	; 22f8 <mat_logfunc+0x17c>
    2248:	ldr	r4, [pc, r4]
    224c:	ldr	r0, [r4]
    2250:	ldr	r1, [pc, #164]	; 22fc <mat_logfunc+0x180>
    2254:	add	r1, pc, r1
    2258:	bl	1960 <fprintf@plt>
    225c:	b	2294 <mat_logfunc+0x118>
    2260:	ldr	r4, [pc, #184]	; 2320 <mat_logfunc+0x1a4>
    2264:	ldr	r4, [pc, r4]
    2268:	ldr	r0, [r4]
    226c:	ldr	r1, [pc, #176]	; 2324 <mat_logfunc+0x1a8>
    2270:	add	r1, pc, r1
    2274:	b	228c <mat_logfunc+0x110>
    2278:	ldr	r4, [pc, #168]	; 2328 <mat_logfunc+0x1ac>
    227c:	ldr	r4, [pc, r4]
    2280:	ldr	r0, [r4]
    2284:	ldr	r1, [pc, #160]	; 232c <mat_logfunc+0x1b0>
    2288:	add	r1, pc, r1
    228c:	mov	r2, r3
    2290:	bl	1960 <fprintf@plt>
    2294:	ldr	r0, [r4]
    2298:	pop	{r4, sl, fp, lr}
    229c:	b	17f8 <fflush@plt>
    22a0:	ldr	r4, [pc, #72]	; 22f0 <mat_logfunc+0x174>
    22a4:	ldr	r4, [pc, r4]
    22a8:	ldr	r0, [r4]
    22ac:	ldr	r1, [pc, #64]	; 22f4 <mat_logfunc+0x178>
    22b0:	add	r1, pc, r1
    22b4:	bl	1960 <fprintf@plt>
    22b8:	b	22d8 <mat_logfunc+0x15c>
    22bc:	ldr	r4, [pc, #84]	; 2318 <mat_logfunc+0x19c>
    22c0:	mov	r2, r3
    22c4:	ldr	r4, [pc, r4]
    22c8:	ldr	r0, [r4]
    22cc:	ldr	r1, [pc, #72]	; 231c <mat_logfunc+0x1a0>
    22d0:	add	r1, pc, r1
    22d4:	bl	1960 <fprintf@plt>
    22d8:	ldr	r0, [r4]
    22dc:	bl	17f8 <fflush@plt>
    22e0:	bl	1a38 <abort@plt>
    22e4:	.word	0x00067f90
    22e8:	.word	0x00067f50
    22ec:	.word	0x00056484
    22f0:	.word	0x00067e54
    22f4:	.word	0x00056388
    22f8:	.word	0x00067eb0
    22fc:	.word	0x000563f0
    2300:	.word	0x00067f00
    2304:	.word	0x0005644c
    2308:	.word	0x00067ed0
    230c:	.word	0x0005643a
    2310:	.word	0x00067f30
    2314:	.word	0x00056488
    2318:	.word	0x00067e34
    231c:	.word	0x0005638c
    2320:	.word	0x00067e94
    2324:	.word	0x000563f6
    2328:	.word	0x00067e7c
    232c:	.word	0x000563e8

00002330 <Mat_LogInitFunc>:
    2330:	ldr	r2, [pc, #52]	; 236c <Mat_LogInitFunc+0x3c>
    2334:	add	r2, pc, r2
    2338:	str	r0, [r2]
    233c:	ldr	r0, [pc, #44]	; 2370 <Mat_LogInitFunc+0x40>
    2340:	add	r0, pc, r0
    2344:	str	r1, [r0]
    2348:	mov	r1, #0
    234c:	ldr	r0, [pc, #32]	; 2374 <Mat_LogInitFunc+0x44>
    2350:	add	r0, pc, r0
    2354:	str	r1, [r0]
    2358:	ldr	r0, [pc, #24]	; 2378 <Mat_LogInitFunc+0x48>
    235c:	add	r0, pc, r0
    2360:	str	r1, [r0]
    2364:	mov	r0, #0
    2368:	bx	lr
    236c:	.word	0x00067dec
    2370:	.word	0x00067ddc
    2374:	.word	0x00067dc0
    2378:	.word	0x00067db8

0000237c <Mat_Warning>:
    237c:	sub	sp, sp, #12
    2380:	push	{r4, sl, fp, lr}
    2384:	add	fp, sp, #8
    2388:	sub	sp, sp, #4
    238c:	add	ip, fp, #8
    2390:	stm	ip, {r1, r2, r3}
    2394:	add	r1, fp, #8
    2398:	str	r1, [sp]
    239c:	ldr	r1, [pc, #64]	; 23e4 <Mat_Warning+0x68>
    23a0:	ldr	r1, [pc, r1]
    23a4:	cmp	r1, #0
    23a8:	beq	23d4 <Mat_Warning+0x58>
    23ac:	ldr	r1, [sp]
    23b0:	bl	1d48 <strdup_vprintf>
    23b4:	ldr	r2, [pc, #44]	; 23e8 <Mat_Warning+0x6c>
    23b8:	mov	r4, r0
    23bc:	mov	r0, #4
    23c0:	mov	r1, r4
    23c4:	ldr	r2, [pc, r2]
    23c8:	blx	r2
    23cc:	mov	r0, r4
    23d0:	bl	1804 <free@plt>
    23d4:	sub	sp, fp, #8
    23d8:	pop	{r4, sl, fp, lr}
    23dc:	add	sp, sp, #12
    23e0:	bx	lr
    23e4:	.word	0x00067d7c
    23e8:	.word	0x00067d58

000023ec <Mat_SizeOf>:
    23ec:	sub	r0, r0, #1
    23f0:	cmp	r0, #17
    23f4:	ldrls	r1, [pc, #12]	; 2408 <Mat_SizeOf+0x1c>
    23f8:	movhi	r0, #0
    23fc:	addls	r1, pc, r1
    2400:	ldrls	r0, [r1, r0, lsl #2]
    2404:	bx	lr
    2408:	.word	0x0005628c

0000240c <InflateSkip>:
    240c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2410:	add	fp, sp, #28
    2414:	sub	sp, sp, #4
    2418:	sub	sp, sp, #1024	; 0x400
    241c:	cmp	r2, #1
    2420:	blt	24b8 <InflateSkip+0xac>
    2424:	mov	r8, r0
    2428:	ldr	r0, [r1, #4]
    242c:	cmp	r2, #512	; 0x200
    2430:	mov	r6, r2
    2434:	mov	r4, r2
    2438:	mov	r5, r1
    243c:	mov	r9, #0
    2440:	movge	r6, #512	; 0x200
    2444:	cmp	r0, #0
    2448:	bne	2470 <InflateSkip+0x64>
    244c:	add	r0, sp, #512	; 0x200
    2450:	mov	r1, #1
    2454:	mov	r2, r6
    2458:	str	r0, [r5]
    245c:	ldr	r3, [r8]
    2460:	bl	18b8 <fread@plt>
    2464:	ldr	r1, [r5, #4]
    2468:	add	r9, r1, r0
    246c:	str	r9, [r5, #4]
    2470:	mov	sl, sp
    2474:	mov	r0, r5
    2478:	mov	r1, #3
    247c:	str	sl, [r5, #12]
    2480:	str	r6, [r5, #16]
    2484:	bl	17ec <inflate@plt>
    2488:	cmp	r0, #0
    248c:	beq	24c0 <InflateSkip+0xb4>
    2490:	cmp	r0, #1
    2494:	beq	25a8 <InflateSkip+0x19c>
    2498:	cmp	r0, #2
    249c:	mvneq	r0, #2
    24a0:	bl	1888 <zError@plt>
    24a4:	mov	r1, r0
    24a8:	ldr	r0, [pc, #260]	; 25b4 <InflateSkip+0x1a8>
    24ac:	add	r0, pc, r0
    24b0:	bl	19b4 <Mat_Critical@plt>
    24b4:	b	25a8 <InflateSkip+0x19c>
    24b8:	mov	r9, #0
    24bc:	b	25a8 <InflateSkip+0x19c>
    24c0:	ldr	r0, [r5, #16]
    24c4:	cmp	r0, #0
    24c8:	beq	24e0 <InflateSkip+0xd4>
    24cc:	mov	r7, r6
    24d0:	mov	r6, #0
    24d4:	cmp	r6, r4
    24d8:	blt	24fc <InflateSkip+0xf0>
    24dc:	b	257c <InflateSkip+0x170>
    24e0:	sub	r7, r4, r6
    24e4:	str	sl, [r5, #12]
    24e8:	cmp	r7, #512	; 0x200
    24ec:	movge	r7, #512	; 0x200
    24f0:	str	r7, [r5, #16]
    24f4:	cmp	r6, r4
    24f8:	bge	257c <InflateSkip+0x170>
    24fc:	ldr	r0, [r5, #4]
    2500:	cmp	r0, #0
    2504:	bne	2530 <InflateSkip+0x124>
    2508:	add	r0, sp, #512	; 0x200
    250c:	mov	r1, #1
    2510:	mov	r2, r7
    2514:	str	r0, [r5]
    2518:	ldr	r3, [r8]
    251c:	bl	18b8 <fread@plt>
    2520:	ldr	r1, [r5, #4]
    2524:	add	r0, r1, r0
    2528:	add	r9, r0, r9
    252c:	str	r0, [r5, #4]
    2530:	mov	r0, r5
    2534:	mov	r1, #3
    2538:	bl	17ec <inflate@plt>
    253c:	cmp	r0, #0
    2540:	bne	2558 <InflateSkip+0x14c>
    2544:	ldr	r0, [r5, #16]
    2548:	cmp	r0, #0
    254c:	bne	24f4 <InflateSkip+0xe8>
    2550:	add	r6, r6, r7
    2554:	b	24e0 <InflateSkip+0xd4>
    2558:	cmp	r0, #1
    255c:	beq	257c <InflateSkip+0x170>
    2560:	cmp	r0, #2
    2564:	mvneq	r0, #2
    2568:	bl	1888 <zError@plt>
    256c:	mov	r1, r0
    2570:	ldr	r0, [pc, #64]	; 25b8 <InflateSkip+0x1ac>
    2574:	add	r0, pc, r0
    2578:	bl	19b4 <Mat_Critical@plt>
    257c:	ldr	r1, [r5, #4]
    2580:	cmp	r1, #0
    2584:	beq	25a8 <InflateSkip+0x19c>
    2588:	ldr	r0, [r8]
    258c:	rsb	r1, r1, #0
    2590:	mov	r2, #1
    2594:	bl	1a2c <fseek@plt>
    2598:	ldr	r0, [r5, #4]
    259c:	mov	r1, #0
    25a0:	str	r1, [r5, #4]
    25a4:	sub	r9, r9, r0
    25a8:	mov	r0, r9
    25ac:	sub	sp, fp, #28
    25b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25b4:	.word	0x00056224
    25b8:	.word	0x0005615c

000025bc <InflateSkip2>:
    25bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25c0:	add	fp, sp, #28
    25c4:	sub	sp, sp, #68	; 0x44
    25c8:	mov	r8, r0
    25cc:	ldr	r0, [r1, #52]	; 0x34
    25d0:	mov	r5, r1
    25d4:	mov	r7, r2
    25d8:	mov	r9, #0
    25dc:	ldr	r0, [r0, #12]
    25e0:	ldr	r1, [r0, #4]
    25e4:	cmp	r1, #0
    25e8:	bne	2618 <InflateSkip2+0x5c>
    25ec:	add	r1, sp, #36	; 0x24
    25f0:	mov	r2, #1
    25f4:	stm	r0, {r1, r2}
    25f8:	mov	r0, r1
    25fc:	mov	r1, #1
    2600:	mov	r2, #1
    2604:	ldr	r3, [r8]
    2608:	bl	18b8 <fread@plt>
    260c:	mov	r9, r0
    2610:	ldr	r0, [r5, #52]	; 0x34
    2614:	ldr	r0, [r0, #12]
    2618:	add	r4, sp, #4
    261c:	mov	r1, #1
    2620:	str	r4, [r0, #12]
    2624:	str	r1, [r0, #16]
    2628:	mov	r1, #0
    262c:	bl	17ec <inflate@plt>
    2630:	cmp	r0, #0
    2634:	beq	2668 <InflateSkip2+0xac>
    2638:	ldr	r5, [r5, #36]	; 0x24
    263c:	cmp	r0, #2
    2640:	mvneq	r0, #2
    2644:	bl	1888 <zError@plt>
    2648:	mov	r2, r0
    264c:	ldr	r0, [pc, #272]	; 2764 <InflateSkip2+0x1a8>
    2650:	mov	r1, r5
    2654:	add	r0, pc, r0
    2658:	bl	19b4 <Mat_Critical@plt>
    265c:	mov	r0, r9
    2660:	sub	sp, fp, #28
    2664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2668:	ldr	r0, [r5, #52]	; 0x34
    266c:	ldr	r1, [r0, #12]
    2670:	ldr	r2, [r1, #16]
    2674:	mov	r3, r1
    2678:	cmp	r2, #0
    267c:	moveq	r2, #1
    2680:	streq	r4, [r1, #12]
    2684:	streq	r2, [r1, #16]
    2688:	ldr	r4, [r3, #4]!
    268c:	cmp	r4, #0
    2690:	mov	r2, r4
    2694:	movwne	r2, #1
    2698:	cmp	r7, #1
    269c:	blt	2730 <InflateSkip2+0x174>
    26a0:	mov	r6, #0
    26a4:	add	sl, sp, #36	; 0x24
    26a8:	tst	r2, #1
    26ac:	bne	26dc <InflateSkip2+0x120>
    26b0:	mov	r0, #1
    26b4:	mov	r2, #1
    26b8:	str	r0, [r3]
    26bc:	str	sl, [r1]
    26c0:	mov	r0, sl
    26c4:	mov	r1, #1
    26c8:	ldr	r3, [r8]
    26cc:	bl	18b8 <fread@plt>
    26d0:	add	r9, r0, r9
    26d4:	ldr	r0, [r5, #52]	; 0x34
    26d8:	add	r6, r6, #1
    26dc:	ldr	r0, [r0, #12]
    26e0:	mov	r1, #0
    26e4:	bl	17ec <inflate@plt>
    26e8:	cmp	r0, #0
    26ec:	bne	2638 <InflateSkip2+0x7c>
    26f0:	ldr	r0, [r5, #52]	; 0x34
    26f4:	ldr	r1, [r0, #12]
    26f8:	ldr	r2, [r1, #16]
    26fc:	cmp	r2, #0
    2700:	bne	2714 <InflateSkip2+0x158>
    2704:	add	r2, sp, #4
    2708:	str	r2, [r1, #12]
    270c:	mov	r2, #1
    2710:	str	r2, [r1, #16]
    2714:	mov	r3, r1
    2718:	ldr	r4, [r3, #4]!
    271c:	cmp	r4, #0
    2720:	mov	r2, r4
    2724:	movwne	r2, #1
    2728:	cmp	r6, r7
    272c:	blt	26a8 <InflateSkip2+0xec>
    2730:	cmp	r2, #0
    2734:	beq	265c <InflateSkip2+0xa0>
    2738:	ldr	r0, [r8]
    273c:	rsb	r1, r4, #0
    2740:	mov	r2, #1
    2744:	bl	1a2c <fseek@plt>
    2748:	ldr	r0, [r5, #52]	; 0x34
    274c:	mov	r2, #0
    2750:	ldr	r0, [r0, #12]
    2754:	ldr	r1, [r0, #4]
    2758:	str	r2, [r0, #4]
    275c:	sub	r9, r9, r1
    2760:	b	265c <InflateSkip2+0xa0>
    2764:	.word	0x0005609d

00002768 <InflateSkipData>:
    2768:	push	{r4, r5, fp, lr}
    276c:	add	fp, sp, #8
    2770:	mov	r4, r3
    2774:	mov	r3, r0
    2778:	mov	r0, #0
    277c:	cmp	r3, #0
    2780:	cmpne	r1, #0
    2784:	bne	278c <InflateSkipData+0x24>
    2788:	pop	{r4, r5, fp, pc}
    278c:	cmp	r4, #1
    2790:	blt	2788 <InflateSkipData+0x20>
    2794:	sub	r2, r2, #1
    2798:	cmp	r2, #12
    279c:	bhi	2788 <InflateSkipData+0x20>
    27a0:	uxth	ip, r2
    27a4:	movw	lr, #6527	; 0x197f
    27a8:	mov	r5, #1
    27ac:	tst	r5, lr, lsr ip
    27b0:	popeq	{r4, r5, fp, pc}
    27b4:	ldr	r0, [pc, #24]	; 27d4 <InflateSkipData+0x6c>
    27b8:	add	r0, pc, r0
    27bc:	ldr	r0, [r0, r2, lsl #2]
    27c0:	mul	r2, r0, r4
    27c4:	mov	r0, r3
    27c8:	bl	240c <InflateSkip>
    27cc:	mov	r0, r4
    27d0:	pop	{r4, r5, fp, pc}
    27d4:	.word	0x00056170

000027d8 <InflateVarTag>:
    27d8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    27dc:	add	fp, sp, #24
    27e0:	sub	sp, sp, #32
    27e4:	cmp	r2, #0
    27e8:	beq	2878 <InflateVarTag+0xa0>
    27ec:	mov	r8, r0
    27f0:	ldr	r0, [r1, #52]	; 0x34
    27f4:	mov	r5, r1
    27f8:	mov	r7, r2
    27fc:	mov	r4, #0
    2800:	ldr	r0, [r0, #12]
    2804:	ldr	r1, [r0, #4]
    2808:	cmp	r1, #0
    280c:	bne	283c <InflateVarTag+0x64>
    2810:	mov	r1, sp
    2814:	mov	r2, #1
    2818:	stm	r0, {r1, r2}
    281c:	mov	r0, r1
    2820:	mov	r1, #1
    2824:	mov	r2, #1
    2828:	ldr	r3, [r8]
    282c:	bl	18b8 <fread@plt>
    2830:	mov	r4, r0
    2834:	ldr	r0, [r5, #52]	; 0x34
    2838:	ldr	r0, [r0, #12]
    283c:	mov	r1, #8
    2840:	str	r7, [r0, #12]
    2844:	str	r1, [r0, #16]
    2848:	mov	r1, #0
    284c:	bl	17ec <inflate@plt>
    2850:	cmp	r0, #0
    2854:	beq	2880 <InflateVarTag+0xa8>
    2858:	cmp	r0, #2
    285c:	mvneq	r0, #2
    2860:	bl	1888 <zError@plt>
    2864:	mov	r1, r0
    2868:	ldr	r0, [pc, #184]	; 2928 <InflateVarTag+0x150>
    286c:	add	r0, pc, r0
    2870:	bl	19b4 <Mat_Critical@plt>
    2874:	b	291c <InflateVarTag+0x144>
    2878:	mov	r4, #0
    287c:	b	291c <InflateVarTag+0x144>
    2880:	mov	r9, #1
    2884:	mov	r7, sp
    2888:	mov	r6, #1
    288c:	ldr	r0, [r5, #52]	; 0x34
    2890:	ldr	r0, [r0, #12]
    2894:	ldr	r2, [r0, #16]
    2898:	ldr	r1, [r0, #4]
    289c:	cmp	r2, #0
    28a0:	beq	28ec <InflateVarTag+0x114>
    28a4:	cmp	r6, #1
    28a8:	cmpeq	r1, #0
    28ac:	bne	28ec <InflateVarTag+0x114>
    28b0:	stm	r0, {r7, r9}
    28b4:	mov	r0, r7
    28b8:	mov	r1, #1
    28bc:	mov	r2, #1
    28c0:	ldr	r3, [r8]
    28c4:	bl	18b8 <fread@plt>
    28c8:	mov	r6, r0
    28cc:	add	r4, r0, r4
    28d0:	ldr	r0, [r5, #52]	; 0x34
    28d4:	mov	r1, #0
    28d8:	ldr	r0, [r0, #12]
    28dc:	bl	17ec <inflate@plt>
    28e0:	cmp	r0, #0
    28e4:	beq	288c <InflateVarTag+0xb4>
    28e8:	b	2858 <InflateVarTag+0x80>
    28ec:	cmp	r1, #0
    28f0:	beq	291c <InflateVarTag+0x144>
    28f4:	ldr	r0, [r8]
    28f8:	rsb	r1, r1, #0
    28fc:	mov	r2, #1
    2900:	bl	1a2c <fseek@plt>
    2904:	ldr	r0, [r5, #52]	; 0x34
    2908:	mov	r2, #0
    290c:	ldr	r0, [r0, #12]
    2910:	ldr	r1, [r0, #4]
    2914:	str	r2, [r0, #4]
    2918:	sub	r4, r4, r1
    291c:	mov	r0, r4
    2920:	sub	sp, fp, #24
    2924:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    2928:	.word	0x00055eac

0000292c <InflateArrayFlags>:
    292c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    2930:	add	fp, sp, #24
    2934:	sub	sp, sp, #32
    2938:	cmp	r2, #0
    293c:	beq	29cc <InflateArrayFlags+0xa0>
    2940:	mov	r8, r0
    2944:	ldr	r0, [r1, #52]	; 0x34
    2948:	mov	r5, r1
    294c:	mov	r7, r2
    2950:	mov	r4, #0
    2954:	ldr	r0, [r0, #12]
    2958:	ldr	r1, [r0, #4]
    295c:	cmp	r1, #0
    2960:	bne	2990 <InflateArrayFlags+0x64>
    2964:	mov	r1, sp
    2968:	mov	r2, #1
    296c:	stm	r0, {r1, r2}
    2970:	mov	r0, r1
    2974:	mov	r1, #1
    2978:	mov	r2, #1
    297c:	ldr	r3, [r8]
    2980:	bl	18b8 <fread@plt>
    2984:	mov	r4, r0
    2988:	ldr	r0, [r5, #52]	; 0x34
    298c:	ldr	r0, [r0, #12]
    2990:	mov	r1, #16
    2994:	str	r7, [r0, #12]
    2998:	str	r1, [r0, #16]
    299c:	mov	r1, #0
    29a0:	bl	17ec <inflate@plt>
    29a4:	cmp	r0, #0
    29a8:	beq	29d4 <InflateArrayFlags+0xa8>
    29ac:	cmp	r0, #2
    29b0:	mvneq	r0, #2
    29b4:	bl	1888 <zError@plt>
    29b8:	mov	r1, r0
    29bc:	ldr	r0, [pc, #184]	; 2a7c <InflateArrayFlags+0x150>
    29c0:	add	r0, pc, r0
    29c4:	bl	19b4 <Mat_Critical@plt>
    29c8:	b	2a70 <InflateArrayFlags+0x144>
    29cc:	mov	r4, #0
    29d0:	b	2a70 <InflateArrayFlags+0x144>
    29d4:	mov	r9, #1
    29d8:	mov	r7, sp
    29dc:	mov	r6, #1
    29e0:	ldr	r0, [r5, #52]	; 0x34
    29e4:	ldr	r0, [r0, #12]
    29e8:	ldr	r2, [r0, #16]
    29ec:	ldr	r1, [r0, #4]
    29f0:	cmp	r2, #0
    29f4:	beq	2a40 <InflateArrayFlags+0x114>
    29f8:	cmp	r6, #1
    29fc:	cmpeq	r1, #0
    2a00:	bne	2a40 <InflateArrayFlags+0x114>
    2a04:	stm	r0, {r7, r9}
    2a08:	mov	r0, r7
    2a0c:	mov	r1, #1
    2a10:	mov	r2, #1
    2a14:	ldr	r3, [r8]
    2a18:	bl	18b8 <fread@plt>
    2a1c:	mov	r6, r0
    2a20:	add	r4, r0, r4
    2a24:	ldr	r0, [r5, #52]	; 0x34
    2a28:	mov	r1, #0
    2a2c:	ldr	r0, [r0, #12]
    2a30:	bl	17ec <inflate@plt>
    2a34:	cmp	r0, #0
    2a38:	beq	29e0 <InflateArrayFlags+0xb4>
    2a3c:	b	29ac <InflateArrayFlags+0x80>
    2a40:	cmp	r1, #0
    2a44:	beq	2a70 <InflateArrayFlags+0x144>
    2a48:	ldr	r0, [r8]
    2a4c:	rsb	r1, r1, #0
    2a50:	mov	r2, #1
    2a54:	bl	1a2c <fseek@plt>
    2a58:	ldr	r0, [r5, #52]	; 0x34
    2a5c:	mov	r2, #0
    2a60:	ldr	r0, [r0, #12]
    2a64:	ldr	r1, [r0, #4]
    2a68:	str	r2, [r0, #4]
    2a6c:	sub	r4, r4, r1
    2a70:	mov	r0, r4
    2a74:	sub	sp, fp, #24
    2a78:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    2a7c:	.word	0x00055d7b

00002a80 <InflateRankDims>:
    2a80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a84:	add	fp, sp, #28
    2a88:	sub	sp, sp, #44	; 0x2c
    2a8c:	cmp	r2, #0
    2a90:	beq	2b24 <InflateRankDims+0xa4>
    2a94:	mov	sl, r0
    2a98:	ldr	r0, [r1, #52]	; 0x34
    2a9c:	mov	r5, r1
    2aa0:	mov	r6, r3
    2aa4:	mov	r9, r2
    2aa8:	mov	r4, #0
    2aac:	ldr	r0, [r0, #12]
    2ab0:	ldr	r1, [r0, #4]
    2ab4:	cmp	r1, #0
    2ab8:	bne	2ae8 <InflateRankDims+0x68>
    2abc:	add	r1, sp, #12
    2ac0:	mov	r2, #1
    2ac4:	stm	r0, {r1, r2}
    2ac8:	mov	r0, r1
    2acc:	mov	r1, #1
    2ad0:	mov	r2, #1
    2ad4:	ldr	r3, [sl]
    2ad8:	bl	18b8 <fread@plt>
    2adc:	mov	r4, r0
    2ae0:	ldr	r0, [r5, #52]	; 0x34
    2ae4:	ldr	r0, [r0, #12]
    2ae8:	mov	r1, #8
    2aec:	str	r9, [r0, #12]
    2af0:	str	r1, [r0, #16]
    2af4:	mov	r1, #0
    2af8:	bl	17ec <inflate@plt>
    2afc:	cmp	r0, #0
    2b00:	beq	2b2c <InflateRankDims+0xac>
    2b04:	cmp	r0, #2
    2b08:	mvneq	r0, #2
    2b0c:	bl	1888 <zError@plt>
    2b10:	mov	r1, r0
    2b14:	ldr	r0, [pc, #584]	; 2d64 <InflateRankDims+0x2e4>
    2b18:	add	r0, pc, r0
    2b1c:	bl	19b4 <Mat_Critical@plt>
    2b20:	b	2c88 <InflateRankDims+0x208>
    2b24:	mov	r4, #0
    2b28:	b	2c88 <InflateRankDims+0x208>
    2b2c:	str	r6, [sp]
    2b30:	mov	r6, #1
    2b34:	add	r8, sp, #12
    2b38:	mov	r7, #1
    2b3c:	ldr	r0, [r5, #52]	; 0x34
    2b40:	ldr	r0, [r0, #12]
    2b44:	ldr	r1, [r0, #16]
    2b48:	cmp	r1, #0
    2b4c:	beq	2ba0 <InflateRankDims+0x120>
    2b50:	cmp	r7, #1
    2b54:	ldreq	r1, [r0, #4]
    2b58:	cmpeq	r1, #0
    2b5c:	bne	2ba0 <InflateRankDims+0x120>
    2b60:	str	r8, [r0]
    2b64:	str	r6, [r0, #4]
    2b68:	mov	r0, r8
    2b6c:	mov	r1, #1
    2b70:	mov	r2, #1
    2b74:	ldr	r3, [sl]
    2b78:	bl	18b8 <fread@plt>
    2b7c:	mov	r7, r0
    2b80:	add	r4, r0, r4
    2b84:	ldr	r0, [r5, #52]	; 0x34
    2b88:	mov	r1, #0
    2b8c:	ldr	r0, [r0, #12]
    2b90:	bl	17ec <inflate@plt>
    2b94:	cmp	r0, #0
    2b98:	beq	2b3c <InflateRankDims+0xbc>
    2b9c:	b	2b04 <InflateRankDims+0x84>
    2ba0:	ldm	r9, {r0, r1}
    2ba4:	stmib	sp, {r0, r1}
    2ba8:	ldr	r1, [sl, #20]
    2bac:	cmp	r1, #0
    2bb0:	beq	2bd0 <InflateRankDims+0x150>
    2bb4:	add	r0, sp, #4
    2bb8:	add	r7, r0, #4
    2bbc:	add	r0, sp, #4
    2bc0:	bl	1bf0 <Mat_int32Swap>
    2bc4:	mov	r0, r7
    2bc8:	bl	1bf0 <Mat_int32Swap>
    2bcc:	ldrh	r0, [sp, #4]
    2bd0:	uxth	r0, r0
    2bd4:	cmp	r0, #5
    2bd8:	bne	2c7c <InflateRankDims+0x1fc>
    2bdc:	ldr	r6, [sp, #8]
    2be0:	asr	r0, r6, #31
    2be4:	add	r0, r6, r0, lsr #29
    2be8:	bic	r0, r0, #7
    2bec:	subs	r0, r6, r0
    2bf0:	rsb	r0, r0, #8
    2bf4:	addne	r6, r6, r0
    2bf8:	ldr	r0, [r5, #52]	; 0x34
    2bfc:	ldr	r0, [r0, #12]
    2c00:	ldr	r1, [r0, #4]
    2c04:	cmp	r1, #0
    2c08:	bne	2c38 <InflateRankDims+0x1b8>
    2c0c:	mov	r1, #1
    2c10:	str	r8, [r0]
    2c14:	mov	r2, #1
    2c18:	str	r1, [r0, #4]
    2c1c:	mov	r0, r8
    2c20:	mov	r1, #1
    2c24:	ldr	r3, [sl]
    2c28:	bl	18b8 <fread@plt>
    2c2c:	add	r4, r0, r4
    2c30:	ldr	r0, [r5, #52]	; 0x34
    2c34:	ldr	r0, [r0, #12]
    2c38:	ldr	r2, [sp]
    2c3c:	add	r1, r6, #2
    2c40:	str	r6, [r0, #16]
    2c44:	lsl	r1, r1, #2
    2c48:	cmp	r1, r2
    2c4c:	bls	2c94 <InflateRankDims+0x214>
    2c50:	mov	r0, r6
    2c54:	mov	r1, #4
    2c58:	bl	1798 <calloc@plt>
    2c5c:	mov	r1, r0
    2c60:	ldr	r0, [fp, #8]
    2c64:	cmp	r1, #0
    2c68:	str	r1, [r0]
    2c6c:	beq	2d4c <InflateRankDims+0x2cc>
    2c70:	ldr	r0, [r5, #52]	; 0x34
    2c74:	ldr	r0, [r0, #12]
    2c78:	b	2c98 <InflateRankDims+0x218>
    2c7c:	ldr	r0, [pc, #220]	; 2d60 <InflateRankDims+0x2e0>
    2c80:	add	r0, pc, r0
    2c84:	bl	19b4 <Mat_Critical@plt>
    2c88:	mov	r0, r4
    2c8c:	sub	sp, fp, #28
    2c90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c94:	add	r1, r9, #8
    2c98:	str	r1, [r0, #12]
    2c9c:	mov	r1, #0
    2ca0:	bl	17ec <inflate@plt>
    2ca4:	cmp	r0, #0
    2ca8:	bne	2b04 <InflateRankDims+0x84>
    2cac:	mov	r6, #1
    2cb0:	mov	r7, #1
    2cb4:	ldr	r0, [r5, #52]	; 0x34
    2cb8:	ldr	r0, [r0, #12]
    2cbc:	ldr	r2, [r0, #16]
    2cc0:	ldr	r1, [r0, #4]
    2cc4:	cmp	r2, #0
    2cc8:	beq	2d18 <InflateRankDims+0x298>
    2ccc:	cmp	r7, #1
    2cd0:	cmpeq	r1, #0
    2cd4:	bne	2d18 <InflateRankDims+0x298>
    2cd8:	str	r8, [r0]
    2cdc:	str	r6, [r0, #4]
    2ce0:	mov	r0, r8
    2ce4:	mov	r1, #1
    2ce8:	mov	r2, #1
    2cec:	ldr	r3, [sl]
    2cf0:	bl	18b8 <fread@plt>
    2cf4:	mov	r7, r0
    2cf8:	add	r4, r0, r4
    2cfc:	ldr	r0, [r5, #52]	; 0x34
    2d00:	mov	r1, #0
    2d04:	ldr	r0, [r0, #12]
    2d08:	bl	17ec <inflate@plt>
    2d0c:	cmp	r0, #0
    2d10:	beq	2cb4 <InflateRankDims+0x234>
    2d14:	b	2b04 <InflateRankDims+0x84>
    2d18:	cmp	r1, #0
    2d1c:	beq	2c88 <InflateRankDims+0x208>
    2d20:	ldr	r0, [sl]
    2d24:	rsb	r1, r1, #0
    2d28:	mov	r2, #1
    2d2c:	bl	1a2c <fseek@plt>
    2d30:	ldr	r0, [r5, #52]	; 0x34
    2d34:	mov	r2, #0
    2d38:	ldr	r0, [r0, #12]
    2d3c:	ldr	r1, [r0, #4]
    2d40:	str	r2, [r0, #4]
    2d44:	sub	r4, r4, r1
    2d48:	b	2c88 <InflateRankDims+0x208>
    2d4c:	mov	r0, #0
    2d50:	str	r0, [r9, #4]
    2d54:	ldr	r0, [pc, #12]	; 2d68 <InflateRankDims+0x2e8>
    2d58:	add	r0, pc, r0
    2d5c:	b	2c84 <InflateRankDims+0x204>
    2d60:	.word	0x00055b07
    2d64:	.word	0x00055c4a
    2d68:	.word	0x00055a6d

00002d6c <InflateVarNameTag>:
    2d6c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    2d70:	add	fp, sp, #24
    2d74:	sub	sp, sp, #32
    2d78:	cmp	r2, #0
    2d7c:	beq	2e0c <InflateVarNameTag+0xa0>
    2d80:	mov	r8, r0
    2d84:	ldr	r0, [r1, #52]	; 0x34
    2d88:	mov	r5, r1
    2d8c:	mov	r7, r2
    2d90:	mov	r4, #0
    2d94:	ldr	r0, [r0, #12]
    2d98:	ldr	r1, [r0, #4]
    2d9c:	cmp	r1, #0
    2da0:	bne	2dd0 <InflateVarNameTag+0x64>
    2da4:	mov	r1, sp
    2da8:	mov	r2, #1
    2dac:	stm	r0, {r1, r2}
    2db0:	mov	r0, r1
    2db4:	mov	r1, #1
    2db8:	mov	r2, #1
    2dbc:	ldr	r3, [r8]
    2dc0:	bl	18b8 <fread@plt>
    2dc4:	mov	r4, r0
    2dc8:	ldr	r0, [r5, #52]	; 0x34
    2dcc:	ldr	r0, [r0, #12]
    2dd0:	mov	r1, #8
    2dd4:	str	r7, [r0, #12]
    2dd8:	str	r1, [r0, #16]
    2ddc:	mov	r1, #0
    2de0:	bl	17ec <inflate@plt>
    2de4:	cmp	r0, #0
    2de8:	beq	2e14 <InflateVarNameTag+0xa8>
    2dec:	cmp	r0, #2
    2df0:	mvneq	r0, #2
    2df4:	bl	1888 <zError@plt>
    2df8:	mov	r1, r0
    2dfc:	ldr	r0, [pc, #184]	; 2ebc <InflateVarNameTag+0x150>
    2e00:	add	r0, pc, r0
    2e04:	bl	19b4 <Mat_Critical@plt>
    2e08:	b	2eb0 <InflateVarNameTag+0x144>
    2e0c:	mov	r4, #0
    2e10:	b	2eb0 <InflateVarNameTag+0x144>
    2e14:	mov	r9, #1
    2e18:	mov	r7, sp
    2e1c:	mov	r6, #1
    2e20:	ldr	r0, [r5, #52]	; 0x34
    2e24:	ldr	r0, [r0, #12]
    2e28:	ldr	r2, [r0, #16]
    2e2c:	ldr	r1, [r0, #4]
    2e30:	cmp	r2, #0
    2e34:	beq	2e80 <InflateVarNameTag+0x114>
    2e38:	cmp	r6, #1
    2e3c:	cmpeq	r1, #0
    2e40:	bne	2e80 <InflateVarNameTag+0x114>
    2e44:	stm	r0, {r7, r9}
    2e48:	mov	r0, r7
    2e4c:	mov	r1, #1
    2e50:	mov	r2, #1
    2e54:	ldr	r3, [r8]
    2e58:	bl	18b8 <fread@plt>
    2e5c:	mov	r6, r0
    2e60:	add	r4, r0, r4
    2e64:	ldr	r0, [r5, #52]	; 0x34
    2e68:	mov	r1, #0
    2e6c:	ldr	r0, [r0, #12]
    2e70:	bl	17ec <inflate@plt>
    2e74:	cmp	r0, #0
    2e78:	beq	2e20 <InflateVarNameTag+0xb4>
    2e7c:	b	2dec <InflateVarNameTag+0x80>
    2e80:	cmp	r1, #0
    2e84:	beq	2eb0 <InflateVarNameTag+0x144>
    2e88:	ldr	r0, [r8]
    2e8c:	rsb	r1, r1, #0
    2e90:	mov	r2, #1
    2e94:	bl	1a2c <fseek@plt>
    2e98:	ldr	r0, [r5, #52]	; 0x34
    2e9c:	mov	r2, #0
    2ea0:	ldr	r0, [r0, #12]
    2ea4:	ldr	r1, [r0, #4]
    2ea8:	str	r2, [r0, #4]
    2eac:	sub	r4, r4, r1
    2eb0:	mov	r0, r4
    2eb4:	sub	sp, fp, #24
    2eb8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    2ebc:	.word	0x000559e6

00002ec0 <InflateVarName>:
    2ec0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    2ec4:	add	fp, sp, #24
    2ec8:	sub	sp, sp, #32
    2ecc:	cmp	r2, #0
    2ed0:	beq	2f60 <InflateVarName+0xa0>
    2ed4:	mov	r9, r0
    2ed8:	ldr	r0, [r1, #52]	; 0x34
    2edc:	mov	r5, r1
    2ee0:	mov	r8, r3
    2ee4:	mov	r7, r2
    2ee8:	mov	r4, #0
    2eec:	ldr	r0, [r0, #12]
    2ef0:	ldr	r1, [r0, #4]
    2ef4:	cmp	r1, #0
    2ef8:	bne	2f28 <InflateVarName+0x68>
    2efc:	mov	r1, sp
    2f00:	mov	r2, #1
    2f04:	stm	r0, {r1, r2}
    2f08:	mov	r0, r1
    2f0c:	mov	r1, #1
    2f10:	mov	r2, #1
    2f14:	ldr	r3, [r9]
    2f18:	bl	18b8 <fread@plt>
    2f1c:	mov	r4, r0
    2f20:	ldr	r0, [r5, #52]	; 0x34
    2f24:	ldr	r0, [r0, #12]
    2f28:	mov	r1, #0
    2f2c:	str	r7, [r0, #12]
    2f30:	str	r8, [r0, #16]
    2f34:	bl	17ec <inflate@plt>
    2f38:	cmp	r0, #0
    2f3c:	beq	2f68 <InflateVarName+0xa8>
    2f40:	cmp	r0, #2
    2f44:	mvneq	r0, #2
    2f48:	bl	1888 <zError@plt>
    2f4c:	mov	r1, r0
    2f50:	ldr	r0, [pc, #184]	; 3010 <InflateVarName+0x150>
    2f54:	add	r0, pc, r0
    2f58:	bl	19b4 <Mat_Critical@plt>
    2f5c:	b	3004 <InflateVarName+0x144>
    2f60:	mov	r4, #0
    2f64:	b	3004 <InflateVarName+0x144>
    2f68:	mov	r8, #1
    2f6c:	mov	r7, sp
    2f70:	mov	r6, #1
    2f74:	ldr	r0, [r5, #52]	; 0x34
    2f78:	ldr	r0, [r0, #12]
    2f7c:	ldr	r2, [r0, #16]
    2f80:	ldr	r1, [r0, #4]
    2f84:	cmp	r2, #0
    2f88:	beq	2fd4 <InflateVarName+0x114>
    2f8c:	cmp	r6, #1
    2f90:	cmpeq	r1, #0
    2f94:	bne	2fd4 <InflateVarName+0x114>
    2f98:	stm	r0, {r7, r8}
    2f9c:	mov	r0, r7
    2fa0:	mov	r1, #1
    2fa4:	mov	r2, #1
    2fa8:	ldr	r3, [r9]
    2fac:	bl	18b8 <fread@plt>
    2fb0:	mov	r6, r0
    2fb4:	add	r4, r0, r4
    2fb8:	ldr	r0, [r5, #52]	; 0x34
    2fbc:	mov	r1, #0
    2fc0:	ldr	r0, [r0, #12]
    2fc4:	bl	17ec <inflate@plt>
    2fc8:	cmp	r0, #0
    2fcc:	beq	2f74 <InflateVarName+0xb4>
    2fd0:	b	2f40 <InflateVarName+0x80>
    2fd4:	cmp	r1, #0
    2fd8:	beq	3004 <InflateVarName+0x144>
    2fdc:	ldr	r0, [r9]
    2fe0:	rsb	r1, r1, #0
    2fe4:	mov	r2, #1
    2fe8:	bl	1a2c <fseek@plt>
    2fec:	ldr	r0, [r5, #52]	; 0x34
    2ff0:	mov	r2, #0
    2ff4:	ldr	r0, [r0, #12]
    2ff8:	ldr	r1, [r0, #4]
    2ffc:	str	r2, [r0, #4]
    3000:	sub	r4, r4, r1
    3004:	mov	r0, r4
    3008:	sub	sp, fp, #24
    300c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3010:	.word	0x000558b9

00003014 <InflateDataTag>:
    3014:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3018:	add	fp, sp, #24
    301c:	sub	sp, sp, #32
    3020:	cmp	r2, #0
    3024:	beq	314c <InflateDataTag+0x138>
    3028:	mov	r8, r0
    302c:	ldr	r0, [r1, #52]	; 0x34
    3030:	mov	r5, r1
    3034:	mov	r7, r2
    3038:	mov	r4, #0
    303c:	ldr	r0, [r0, #12]
    3040:	ldr	r1, [r0, #4]
    3044:	cmp	r1, #0
    3048:	bne	3078 <InflateDataTag+0x64>
    304c:	mov	r1, sp
    3050:	mov	r2, #1
    3054:	stm	r0, {r1, r2}
    3058:	mov	r0, r1
    305c:	mov	r1, #1
    3060:	mov	r2, #1
    3064:	ldr	r3, [r8]
    3068:	bl	18b8 <fread@plt>
    306c:	mov	r4, r0
    3070:	ldr	r0, [r5, #52]	; 0x34
    3074:	ldr	r0, [r0, #12]
    3078:	mov	r1, #8
    307c:	str	r7, [r0, #12]
    3080:	str	r1, [r0, #16]
    3084:	mov	r1, #0
    3088:	bl	17ec <inflate@plt>
    308c:	cmp	r0, #1
    3090:	beq	3178 <InflateDataTag+0x164>
    3094:	cmp	r0, #0
    3098:	bne	3154 <InflateDataTag+0x140>
    309c:	mov	r9, #1
    30a0:	mov	r7, sp
    30a4:	mov	r6, #1
    30a8:	ldr	r0, [r5, #52]	; 0x34
    30ac:	ldr	r0, [r0, #12]
    30b0:	ldr	r1, [r0, #16]
    30b4:	cmp	r1, #0
    30b8:	beq	3114 <InflateDataTag+0x100>
    30bc:	cmp	r6, #1
    30c0:	ldreq	r1, [r0, #4]
    30c4:	cmpeq	r1, #0
    30c8:	bne	3114 <InflateDataTag+0x100>
    30cc:	stm	r0, {r7, r9}
    30d0:	mov	r0, r7
    30d4:	mov	r1, #1
    30d8:	mov	r2, #1
    30dc:	ldr	r3, [r8]
    30e0:	bl	18b8 <fread@plt>
    30e4:	mov	r6, r0
    30e8:	add	r4, r0, r4
    30ec:	ldr	r0, [r5, #52]	; 0x34
    30f0:	mov	r1, #0
    30f4:	ldr	r0, [r0, #12]
    30f8:	bl	17ec <inflate@plt>
    30fc:	cmp	r0, #0
    3100:	beq	30a8 <InflateDataTag+0x94>
    3104:	cmp	r0, #1
    3108:	bne	3154 <InflateDataTag+0x140>
    310c:	ldr	r0, [r5, #52]	; 0x34
    3110:	ldr	r0, [r0, #12]
    3114:	ldr	r1, [r0, #4]
    3118:	cmp	r1, #0
    311c:	beq	3178 <InflateDataTag+0x164>
    3120:	ldr	r0, [r8]
    3124:	rsb	r1, r1, #0
    3128:	mov	r2, #1
    312c:	bl	1a2c <fseek@plt>
    3130:	ldr	r0, [r5, #52]	; 0x34
    3134:	mov	r2, #0
    3138:	ldr	r0, [r0, #12]
    313c:	ldr	r1, [r0, #4]
    3140:	str	r2, [r0, #4]
    3144:	sub	r4, r4, r1
    3148:	b	3178 <InflateDataTag+0x164>
    314c:	mov	r4, #0
    3150:	b	3178 <InflateDataTag+0x164>
    3154:	ldr	r5, [r5, #36]	; 0x24
    3158:	cmp	r0, #2
    315c:	mvneq	r0, #2
    3160:	bl	1888 <zError@plt>
    3164:	mov	r2, r0
    3168:	ldr	r0, [pc, #20]	; 3184 <InflateDataTag+0x170>
    316c:	mov	r1, r5
    3170:	add	r0, pc, r0
    3174:	bl	19b4 <Mat_Critical@plt>
    3178:	mov	r0, r4
    317c:	sub	sp, fp, #24
    3180:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3184:	.word	0x000556c1

00003188 <InflateDataType>:
    3188:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    318c:	add	fp, sp, #24
    3190:	sub	sp, sp, #32
    3194:	cmp	r2, #0
    3198:	beq	3218 <InflateDataType+0x90>
    319c:	mov	r8, r0
    31a0:	ldr	r0, [r1, #4]
    31a4:	mov	r7, r2
    31a8:	mov	r5, r1
    31ac:	mov	r4, #0
    31b0:	cmp	r0, #0
    31b4:	bne	31d8 <InflateDataType+0x50>
    31b8:	mov	r0, sp
    31bc:	mov	r1, #1
    31c0:	mov	r2, #1
    31c4:	stm	r5, {r0, r1}
    31c8:	mov	r1, #1
    31cc:	ldr	r3, [r8]
    31d0:	bl	18b8 <fread@plt>
    31d4:	mov	r4, r0
    31d8:	mov	r0, #4
    31dc:	str	r7, [r5, #12]
    31e0:	mov	r1, #0
    31e4:	str	r0, [r5, #16]
    31e8:	mov	r0, r5
    31ec:	bl	17ec <inflate@plt>
    31f0:	cmp	r0, #0
    31f4:	beq	3220 <InflateDataType+0x98>
    31f8:	cmp	r0, #2
    31fc:	mvneq	r0, #2
    3200:	bl	1888 <zError@plt>
    3204:	mov	r1, r0
    3208:	ldr	r0, [pc, #164]	; 32b4 <InflateDataType+0x12c>
    320c:	add	r0, pc, r0
    3210:	bl	19b4 <Mat_Critical@plt>
    3214:	b	32a8 <InflateDataType+0x120>
    3218:	mov	r4, #0
    321c:	b	32a8 <InflateDataType+0x120>
    3220:	mov	r9, #1
    3224:	mov	r7, sp
    3228:	mov	r6, #1
    322c:	ldr	r0, [r5, #16]
    3230:	ldr	r1, [r5, #4]
    3234:	cmp	r0, #0
    3238:	beq	3280 <InflateDataType+0xf8>
    323c:	cmp	r6, #1
    3240:	cmpeq	r1, #0
    3244:	bne	3280 <InflateDataType+0xf8>
    3248:	stm	r5, {r7, r9}
    324c:	mov	r0, r7
    3250:	mov	r1, #1
    3254:	mov	r2, #1
    3258:	ldr	r3, [r8]
    325c:	bl	18b8 <fread@plt>
    3260:	mov	r6, r0
    3264:	add	r4, r0, r4
    3268:	mov	r0, r5
    326c:	mov	r1, #0
    3270:	bl	17ec <inflate@plt>
    3274:	cmp	r0, #0
    3278:	beq	322c <InflateDataType+0xa4>
    327c:	b	31f8 <InflateDataType+0x70>
    3280:	cmp	r1, #0
    3284:	beq	32a8 <InflateDataType+0x120>
    3288:	ldr	r0, [r8]
    328c:	rsb	r1, r1, #0
    3290:	mov	r2, #1
    3294:	bl	1a2c <fseek@plt>
    3298:	ldr	r0, [r5, #4]
    329c:	mov	r1, #0
    32a0:	str	r1, [r5, #4]
    32a4:	sub	r4, r4, r0
    32a8:	mov	r0, r4
    32ac:	sub	sp, fp, #24
    32b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    32b4:	.word	0x0005564e

000032b8 <InflateData>:
    32b8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    32bc:	add	fp, sp, #24
    32c0:	sub	sp, sp, #8
    32c4:	sub	sp, sp, #1024	; 0x400
    32c8:	cmp	r2, #0
    32cc:	mov	r4, #0
    32d0:	movne	r7, r3
    32d4:	cmpne	r3, #0
    32d8:	bne	32e8 <InflateData+0x30>
    32dc:	mov	r0, r4
    32e0:	sub	sp, fp, #24
    32e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    32e8:	mov	r8, r0
    32ec:	ldr	r0, [r1, #4]
    32f0:	mov	r6, r2
    32f4:	mov	r5, r1
    32f8:	mov	r4, #0
    32fc:	cmp	r0, #0
    3300:	bne	3330 <InflateData+0x78>
    3304:	ldr	r3, [r8]
    3308:	add	r9, sp, #4
    330c:	cmp	r7, #1024	; 0x400
    3310:	mov	r2, r7
    3314:	mov	r1, #1
    3318:	movcs	r2, #1024	; 0x400
    331c:	mov	r0, r9
    3320:	bl	18b8 <fread@plt>
    3324:	mov	r4, r0
    3328:	str	r9, [r5]
    332c:	str	r0, [r5, #4]
    3330:	mov	r0, r5
    3334:	mov	r1, #3
    3338:	str	r6, [r5, #12]
    333c:	str	r7, [r5, #16]
    3340:	bl	17ec <inflate@plt>
    3344:	cmp	r0, #1
    3348:	beq	32dc <InflateData+0x24>
    334c:	cmp	r0, #0
    3350:	bne	33d4 <InflateData+0x11c>
    3354:	ldr	r0, [r5, #16]
    3358:	cmp	r0, #0
    335c:	beq	3418 <InflateData+0x160>
    3360:	add	r6, sp, #4
    3364:	ldr	r1, [r5, #4]
    3368:	cmp	r1, #0
    336c:	bne	3424 <InflateData+0x16c>
    3370:	add	r0, r4, #1024	; 0x400
    3374:	mov	r2, #1024	; 0x400
    3378:	cmp	r0, r7
    337c:	bcc	3390 <InflateData+0xd8>
    3380:	add	r0, r4, #1
    3384:	sub	r2, r7, r4
    3388:	cmp	r0, r7
    338c:	movwhi	r2, #1
    3390:	ldr	r3, [r8]
    3394:	mov	r0, r6
    3398:	mov	r1, #1
    339c:	bl	18b8 <fread@plt>
    33a0:	str	r6, [r5]
    33a4:	str	r0, [r5, #4]
    33a8:	add	r4, r0, r4
    33ac:	mov	r0, r5
    33b0:	mov	r1, #3
    33b4:	bl	17ec <inflate@plt>
    33b8:	cmn	r0, #5
    33bc:	cmpne	r0, #0
    33c0:	bne	33f4 <InflateData+0x13c>
    33c4:	ldr	r0, [r5, #16]
    33c8:	cmp	r0, #0
    33cc:	bne	3364 <InflateData+0xac>
    33d0:	b	3418 <InflateData+0x160>
    33d4:	cmp	r0, #2
    33d8:	mvneq	r0, #2
    33dc:	bl	1888 <zError@plt>
    33e0:	mov	r1, r0
    33e4:	ldr	r0, [pc, #96]	; 344c <InflateData+0x194>
    33e8:	add	r0, pc, r0
    33ec:	bl	19b4 <Mat_Critical@plt>
    33f0:	b	32dc <InflateData+0x24>
    33f4:	cmp	r0, #1
    33f8:	beq	3418 <InflateData+0x160>
    33fc:	cmp	r0, #2
    3400:	mvneq	r0, #2
    3404:	bl	1888 <zError@plt>
    3408:	mov	r1, r0
    340c:	ldr	r0, [pc, #52]	; 3448 <InflateData+0x190>
    3410:	add	r0, pc, r0
    3414:	bl	19b4 <Mat_Critical@plt>
    3418:	ldr	r1, [r5, #4]
    341c:	cmp	r1, #0
    3420:	beq	32dc <InflateData+0x24>
    3424:	ldr	r0, [r8]
    3428:	rsb	r1, r1, #0
    342c:	mov	r2, #1
    3430:	bl	1a2c <fseek@plt>
    3434:	ldr	r0, [r5, #4]
    3438:	mov	r1, #0
    343c:	str	r1, [r5, #4]
    3440:	sub	r4, r4, r0
    3444:	b	32dc <InflateData+0x24>
    3448:	.word	0x0005546f
    344c:	.word	0x00055497

00003450 <InflateFieldNameLength>:
    3450:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3454:	add	fp, sp, #24
    3458:	sub	sp, sp, #32
    345c:	cmp	r2, #0
    3460:	beq	34f0 <InflateFieldNameLength+0xa0>
    3464:	mov	r8, r0
    3468:	ldr	r0, [r1, #52]	; 0x34
    346c:	mov	r5, r1
    3470:	mov	r7, r2
    3474:	mov	r4, #0
    3478:	ldr	r0, [r0, #12]
    347c:	ldr	r1, [r0, #4]
    3480:	cmp	r1, #0
    3484:	bne	34b4 <InflateFieldNameLength+0x64>
    3488:	mov	r1, sp
    348c:	mov	r2, #1
    3490:	stm	r0, {r1, r2}
    3494:	mov	r0, r1
    3498:	mov	r1, #1
    349c:	mov	r2, #1
    34a0:	ldr	r3, [r8]
    34a4:	bl	18b8 <fread@plt>
    34a8:	mov	r4, r0
    34ac:	ldr	r0, [r5, #52]	; 0x34
    34b0:	ldr	r0, [r0, #12]
    34b4:	mov	r1, #8
    34b8:	str	r7, [r0, #12]
    34bc:	str	r1, [r0, #16]
    34c0:	mov	r1, #0
    34c4:	bl	17ec <inflate@plt>
    34c8:	cmp	r0, #0
    34cc:	beq	34f8 <InflateFieldNameLength+0xa8>
    34d0:	cmp	r0, #2
    34d4:	mvneq	r0, #2
    34d8:	bl	1888 <zError@plt>
    34dc:	mov	r1, r0
    34e0:	ldr	r0, [pc, #184]	; 35a0 <InflateFieldNameLength+0x150>
    34e4:	add	r0, pc, r0
    34e8:	bl	19b4 <Mat_Critical@plt>
    34ec:	b	3594 <InflateFieldNameLength+0x144>
    34f0:	mov	r4, #0
    34f4:	b	3594 <InflateFieldNameLength+0x144>
    34f8:	mov	r9, #1
    34fc:	mov	r7, sp
    3500:	mov	r6, #1
    3504:	ldr	r0, [r5, #52]	; 0x34
    3508:	ldr	r0, [r0, #12]
    350c:	ldr	r2, [r0, #16]
    3510:	ldr	r1, [r0, #4]
    3514:	cmp	r2, #0
    3518:	beq	3564 <InflateFieldNameLength+0x114>
    351c:	cmp	r6, #1
    3520:	cmpeq	r1, #0
    3524:	bne	3564 <InflateFieldNameLength+0x114>
    3528:	stm	r0, {r7, r9}
    352c:	mov	r0, r7
    3530:	mov	r1, #1
    3534:	mov	r2, #1
    3538:	ldr	r3, [r8]
    353c:	bl	18b8 <fread@plt>
    3540:	mov	r6, r0
    3544:	add	r4, r0, r4
    3548:	ldr	r0, [r5, #52]	; 0x34
    354c:	mov	r1, #0
    3550:	ldr	r0, [r0, #12]
    3554:	bl	17ec <inflate@plt>
    3558:	cmp	r0, #0
    355c:	beq	3504 <InflateFieldNameLength+0xb4>
    3560:	b	34d0 <InflateFieldNameLength+0x80>
    3564:	cmp	r1, #0
    3568:	beq	3594 <InflateFieldNameLength+0x144>
    356c:	ldr	r0, [r8]
    3570:	rsb	r1, r1, #0
    3574:	mov	r2, #1
    3578:	bl	1a2c <fseek@plt>
    357c:	ldr	r0, [r5, #52]	; 0x34
    3580:	mov	r2, #0
    3584:	ldr	r0, [r0, #12]
    3588:	ldr	r1, [r0, #4]
    358c:	str	r2, [r0, #4]
    3590:	sub	r4, r4, r1
    3594:	mov	r0, r4
    3598:	sub	sp, fp, #24
    359c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    35a0:	.word	0x000553bc

000035a4 <InflateFieldNamesTag>:
    35a4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    35a8:	add	fp, sp, #24
    35ac:	sub	sp, sp, #32
    35b0:	cmp	r2, #0
    35b4:	beq	3644 <InflateFieldNamesTag+0xa0>
    35b8:	mov	r8, r0
    35bc:	ldr	r0, [r1, #52]	; 0x34
    35c0:	mov	r5, r1
    35c4:	mov	r7, r2
    35c8:	mov	r4, #0
    35cc:	ldr	r0, [r0, #12]
    35d0:	ldr	r1, [r0, #4]
    35d4:	cmp	r1, #0
    35d8:	bne	3608 <InflateFieldNamesTag+0x64>
    35dc:	mov	r1, sp
    35e0:	mov	r2, #1
    35e4:	stm	r0, {r1, r2}
    35e8:	mov	r0, r1
    35ec:	mov	r1, #1
    35f0:	mov	r2, #1
    35f4:	ldr	r3, [r8]
    35f8:	bl	18b8 <fread@plt>
    35fc:	mov	r4, r0
    3600:	ldr	r0, [r5, #52]	; 0x34
    3604:	ldr	r0, [r0, #12]
    3608:	mov	r1, #8
    360c:	str	r7, [r0, #12]
    3610:	str	r1, [r0, #16]
    3614:	mov	r1, #0
    3618:	bl	17ec <inflate@plt>
    361c:	cmp	r0, #0
    3620:	beq	364c <InflateFieldNamesTag+0xa8>
    3624:	cmp	r0, #2
    3628:	mvneq	r0, #2
    362c:	bl	1888 <zError@plt>
    3630:	mov	r1, r0
    3634:	ldr	r0, [pc, #184]	; 36f4 <InflateFieldNamesTag+0x150>
    3638:	add	r0, pc, r0
    363c:	bl	19b4 <Mat_Critical@plt>
    3640:	b	36e8 <InflateFieldNamesTag+0x144>
    3644:	mov	r4, #0
    3648:	b	36e8 <InflateFieldNamesTag+0x144>
    364c:	mov	r9, #1
    3650:	mov	r7, sp
    3654:	mov	r6, #1
    3658:	ldr	r0, [r5, #52]	; 0x34
    365c:	ldr	r0, [r0, #12]
    3660:	ldr	r2, [r0, #16]
    3664:	ldr	r1, [r0, #4]
    3668:	cmp	r2, #0
    366c:	beq	36b8 <InflateFieldNamesTag+0x114>
    3670:	cmp	r6, #1
    3674:	cmpeq	r1, #0
    3678:	bne	36b8 <InflateFieldNamesTag+0x114>
    367c:	stm	r0, {r7, r9}
    3680:	mov	r0, r7
    3684:	mov	r1, #1
    3688:	mov	r2, #1
    368c:	ldr	r3, [r8]
    3690:	bl	18b8 <fread@plt>
    3694:	mov	r6, r0
    3698:	add	r4, r0, r4
    369c:	ldr	r0, [r5, #52]	; 0x34
    36a0:	mov	r1, #0
    36a4:	ldr	r0, [r0, #12]
    36a8:	bl	17ec <inflate@plt>
    36ac:	cmp	r0, #0
    36b0:	beq	3658 <InflateFieldNamesTag+0xb4>
    36b4:	b	3624 <InflateFieldNamesTag+0x80>
    36b8:	cmp	r1, #0
    36bc:	beq	36e8 <InflateFieldNamesTag+0x144>
    36c0:	ldr	r0, [r8]
    36c4:	rsb	r1, r1, #0
    36c8:	mov	r2, #1
    36cc:	bl	1a2c <fseek@plt>
    36d0:	ldr	r0, [r5, #52]	; 0x34
    36d4:	mov	r2, #0
    36d8:	ldr	r0, [r0, #12]
    36dc:	ldr	r1, [r0, #4]
    36e0:	str	r2, [r0, #4]
    36e4:	sub	r4, r4, r1
    36e8:	mov	r0, r4
    36ec:	sub	sp, fp, #24
    36f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    36f4:	.word	0x00055294

000036f8 <InflateFieldNames>:
    36f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36fc:	add	fp, sp, #28
    3700:	sub	sp, sp, #36	; 0x24
    3704:	cmp	r2, #0
    3708:	beq	37a4 <InflateFieldNames+0xac>
    370c:	mov	r9, r0
    3710:	ldr	r0, [r1, #52]	; 0x34
    3714:	mov	r5, r1
    3718:	ldr	sl, [fp, #12]
    371c:	ldr	r6, [fp, #8]
    3720:	mov	r8, r3
    3724:	mov	r7, r2
    3728:	mov	r4, #0
    372c:	ldr	r0, [r0, #12]
    3730:	ldr	r1, [r0, #4]
    3734:	cmp	r1, #0
    3738:	bne	3768 <InflateFieldNames+0x70>
    373c:	add	r1, sp, #4
    3740:	mov	r2, #1
    3744:	stm	r0, {r1, r2}
    3748:	mov	r0, r1
    374c:	mov	r1, #1
    3750:	mov	r2, #1
    3754:	ldr	r3, [r9]
    3758:	bl	18b8 <fread@plt>
    375c:	mov	r4, r0
    3760:	ldr	r0, [r5, #52]	; 0x34
    3764:	ldr	r0, [r0, #12]
    3768:	mla	r1, r6, r8, sl
    376c:	str	r7, [r0, #12]
    3770:	str	r1, [r0, #16]
    3774:	mov	r1, #0
    3778:	bl	17ec <inflate@plt>
    377c:	cmp	r0, #0
    3780:	beq	37ac <InflateFieldNames+0xb4>
    3784:	cmp	r0, #2
    3788:	mvneq	r0, #2
    378c:	bl	1888 <zError@plt>
    3790:	mov	r1, r0
    3794:	ldr	r0, [pc, #184]	; 3854 <InflateFieldNames+0x15c>
    3798:	add	r0, pc, r0
    379c:	bl	19b4 <Mat_Critical@plt>
    37a0:	b	3848 <InflateFieldNames+0x150>
    37a4:	mov	r4, #0
    37a8:	b	3848 <InflateFieldNames+0x150>
    37ac:	mov	r8, #1
    37b0:	add	r7, sp, #4
    37b4:	mov	r6, #1
    37b8:	ldr	r0, [r5, #52]	; 0x34
    37bc:	ldr	r0, [r0, #12]
    37c0:	ldr	r2, [r0, #16]
    37c4:	ldr	r1, [r0, #4]
    37c8:	cmp	r2, #0
    37cc:	beq	3818 <InflateFieldNames+0x120>
    37d0:	cmp	r6, #1
    37d4:	cmpeq	r1, #0
    37d8:	bne	3818 <InflateFieldNames+0x120>
    37dc:	stm	r0, {r7, r8}
    37e0:	mov	r0, r7
    37e4:	mov	r1, #1
    37e8:	mov	r2, #1
    37ec:	ldr	r3, [r9]
    37f0:	bl	18b8 <fread@plt>
    37f4:	mov	r6, r0
    37f8:	add	r4, r0, r4
    37fc:	ldr	r0, [r5, #52]	; 0x34
    3800:	mov	r1, #0
    3804:	ldr	r0, [r0, #12]
    3808:	bl	17ec <inflate@plt>
    380c:	cmp	r0, #0
    3810:	beq	37b8 <InflateFieldNames+0xc0>
    3814:	b	3784 <InflateFieldNames+0x8c>
    3818:	cmp	r1, #0
    381c:	beq	3848 <InflateFieldNames+0x150>
    3820:	ldr	r0, [r9]
    3824:	rsb	r1, r1, #0
    3828:	mov	r2, #1
    382c:	bl	1a2c <fseek@plt>
    3830:	ldr	r0, [r5, #52]	; 0x34
    3834:	mov	r2, #0
    3838:	ldr	r0, [r0, #12]
    383c:	ldr	r1, [r0, #4]
    3840:	str	r2, [r0, #4]
    3844:	sub	r4, r4, r1
    3848:	mov	r0, r4
    384c:	sub	sp, fp, #28
    3850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3854:	.word	0x0005515e

00003858 <ReadDoubleData>:
    3858:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    385c:	add	fp, sp, #28
    3860:	sub	sp, sp, #4
    3864:	vpush	{d8-d9}
    3868:	sub	sp, sp, #2128	; 0x850
    386c:	cmp	r0, #0
    3870:	mov	r4, #0
    3874:	str	r0, [sp, #20]
    3878:	movne	r9, r1
    387c:	cmpne	r1, #0
    3880:	bne	3898 <ReadDoubleData+0x40>
    3884:	mov	r0, r4
    3888:	sub	sp, fp, #48	; 0x30
    388c:	vpop	{d8-d9}
    3890:	add	sp, sp, #4
    3894:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3898:	ldr	r0, [sp, #20]
    389c:	ldr	r0, [r0]
    38a0:	cmp	r0, #0
    38a4:	beq	3884 <ReadDoubleData+0x2c>
    38a8:	mov	r0, r2
    38ac:	mov	r6, r3
    38b0:	mov	r5, r2
    38b4:	bl	1924 <Mat_SizeOf@plt>
    38b8:	str	r0, [sp, #16]
    38bc:	sub	r0, r5, #1
    38c0:	cmp	r0, #12
    38c4:	bhi	3884 <ReadDoubleData+0x2c>
    38c8:	add	r1, pc, #4
    38cc:	ldr	r0, [r1, r0, lsl #2]
    38d0:	add	pc, r1, r0
    38d4:	.word	0x00000034
    38d8:	.word	0x000000dc
    38dc:	.word	0x00000184
    38e0:	.word	0x000001ec
    38e4:	.word	0x00000254
    38e8:	.word	0x000002bc
    38ec:	.word	0x00000324
    38f0:	.word	0xffffffb0
    38f4:	.word	0x00000388
    38f8:	.word	0xffffffb0
    38fc:	.word	0xffffffb0
    3900:	.word	0x000003d0
    3904:	.word	0x00000434
    3908:	cmp	r6, #256	; 0x100
    390c:	bgt	3d6c <ReadDoubleData+0x514>
    3910:	ldr	r0, [sp, #20]
    3914:	ldr	r1, [sp, #16]
    3918:	add	r4, sp, #72	; 0x48
    391c:	mov	r2, r6
    3920:	ldr	r3, [r0]
    3924:	mov	r0, r4
    3928:	bl	18b8 <fread@plt>
    392c:	mov	sl, r0
    3930:	cmp	r6, #1
    3934:	blt	4b58 <ReadDoubleData+0x1300>
    3938:	mov	r0, #0
    393c:	beq	3980 <ReadDoubleData+0x128>
    3940:	bic	r0, r6, #1
    3944:	add	r1, sp, #48	; 0x30
    3948:	mov	r3, r9
    394c:	mov	r2, r0
    3950:	ldrh	r7, [r4], #2
    3954:	subs	r2, r2, #2
    3958:	strh	r7, [sp, #48]	; 0x30
    395c:	vld1.16	{d16[0]}, [r1 :16]
    3960:	vmovl.s8	q8, d16
    3964:	vmovl.s16	q0, d16
    3968:	vcvt.f64.s32	d17, s1
    396c:	vcvt.f64.s32	d16, s0
    3970:	vst1.64	{d16-d17}, [r3]!
    3974:	bne	3950 <ReadDoubleData+0xf8>
    3978:	cmp	r0, r6
    397c:	beq	4b58 <ReadDoubleData+0x1300>
    3980:	add	r3, sp, #72	; 0x48
    3984:	sub	r1, r6, r0
    3988:	add	r2, r9, r0, lsl #3
    398c:	add	r0, r3, r0
    3990:	ldrsb	r3, [r0], #1
    3994:	subs	r1, r1, #1
    3998:	vmov	s0, r3
    399c:	vcvt.f64.s32	d16, s0
    39a0:	vstr	d16, [r2]
    39a4:	add	r2, r2, #8
    39a8:	bne	3990 <ReadDoubleData+0x138>
    39ac:	b	4b58 <ReadDoubleData+0x1300>
    39b0:	cmp	r6, #256	; 0x100
    39b4:	bgt	3ed8 <ReadDoubleData+0x680>
    39b8:	ldr	r0, [sp, #20]
    39bc:	ldr	r1, [sp, #16]
    39c0:	add	r4, sp, #72	; 0x48
    39c4:	mov	r2, r6
    39c8:	ldr	r3, [r0]
    39cc:	mov	r0, r4
    39d0:	bl	18b8 <fread@plt>
    39d4:	mov	sl, r0
    39d8:	cmp	r6, #1
    39dc:	blt	4b58 <ReadDoubleData+0x1300>
    39e0:	mov	r0, #0
    39e4:	beq	3a28 <ReadDoubleData+0x1d0>
    39e8:	bic	r0, r6, #1
    39ec:	add	r1, sp, #60	; 0x3c
    39f0:	mov	r3, r9
    39f4:	mov	r2, r0
    39f8:	ldrh	r7, [r4], #2
    39fc:	subs	r2, r2, #2
    3a00:	strh	r7, [sp, #60]	; 0x3c
    3a04:	vld1.16	{d16[0]}, [r1 :16]
    3a08:	vmovl.u8	q8, d16
    3a0c:	vmovl.u16	q0, d16
    3a10:	vcvt.f64.u32	d17, s1
    3a14:	vcvt.f64.u32	d16, s0
    3a18:	vst1.64	{d16-d17}, [r3]!
    3a1c:	bne	39f8 <ReadDoubleData+0x1a0>
    3a20:	cmp	r0, r6
    3a24:	beq	4b58 <ReadDoubleData+0x1300>
    3a28:	add	r3, sp, #72	; 0x48
    3a2c:	sub	r1, r6, r0
    3a30:	add	r2, r9, r0, lsl #3
    3a34:	add	r0, r3, r0
    3a38:	ldrb	r3, [r0], #1
    3a3c:	subs	r1, r1, #1
    3a40:	vmov	s0, r3
    3a44:	vcvt.f64.u32	d16, s0
    3a48:	vstr	d16, [r2]
    3a4c:	add	r2, r2, #8
    3a50:	bne	3a38 <ReadDoubleData+0x1e0>
    3a54:	b	4b58 <ReadDoubleData+0x1300>
    3a58:	ldr	r0, [sp, #20]
    3a5c:	ldr	r0, [r0, #20]
    3a60:	cmp	r0, #0
    3a64:	beq	4040 <ReadDoubleData+0x7e8>
    3a68:	cmp	r6, #256	; 0x100
    3a6c:	bgt	44bc <ReadDoubleData+0xc64>
    3a70:	ldr	r0, [sp, #20]
    3a74:	ldr	r1, [sp, #16]
    3a78:	add	r4, sp, #72	; 0x48
    3a7c:	mov	r2, r6
    3a80:	ldr	r3, [r0]
    3a84:	mov	r0, r4
    3a88:	bl	18b8 <fread@plt>
    3a8c:	mov	sl, r0
    3a90:	cmp	r6, #1
    3a94:	blt	4b58 <ReadDoubleData+0x1300>
    3a98:	mov	r0, r4
    3a9c:	bl	1c18 <Mat_int16Swap>
    3aa0:	vmov	s0, r0
    3aa4:	subs	r6, r6, #1
    3aa8:	add	r4, r4, #2
    3aac:	vcvt.f64.s32	d16, s0
    3ab0:	vstr	d16, [r9]
    3ab4:	add	r9, r9, #8
    3ab8:	bne	3a98 <ReadDoubleData+0x240>
    3abc:	b	4b58 <ReadDoubleData+0x1300>
    3ac0:	ldr	r0, [sp, #20]
    3ac4:	ldr	r0, [r0, #20]
    3ac8:	cmp	r0, #0
    3acc:	beq	40e4 <ReadDoubleData+0x88c>
    3ad0:	cmp	r6, #256	; 0x100
    3ad4:	bgt	45b0 <ReadDoubleData+0xd58>
    3ad8:	ldr	r0, [sp, #20]
    3adc:	ldr	r1, [sp, #16]
    3ae0:	add	r4, sp, #72	; 0x48
    3ae4:	mov	r2, r6
    3ae8:	ldr	r3, [r0]
    3aec:	mov	r0, r4
    3af0:	bl	18b8 <fread@plt>
    3af4:	mov	sl, r0
    3af8:	cmp	r6, #1
    3afc:	blt	4b58 <ReadDoubleData+0x1300>
    3b00:	mov	r0, r4
    3b04:	bl	1c2c <Mat_uint16Swap>
    3b08:	vmov	s0, r0
    3b0c:	subs	r6, r6, #1
    3b10:	add	r4, r4, #2
    3b14:	vcvt.f64.u32	d16, s0
    3b18:	vstr	d16, [r9]
    3b1c:	add	r9, r9, #8
    3b20:	bne	3b00 <ReadDoubleData+0x2a8>
    3b24:	b	4b58 <ReadDoubleData+0x1300>
    3b28:	ldr	r0, [sp, #20]
    3b2c:	ldr	r0, [r0, #20]
    3b30:	cmp	r0, #0
    3b34:	beq	4188 <ReadDoubleData+0x930>
    3b38:	cmp	r6, #256	; 0x100
    3b3c:	bgt	46a4 <ReadDoubleData+0xe4c>
    3b40:	ldr	r0, [sp, #20]
    3b44:	ldr	r1, [sp, #16]
    3b48:	add	r4, sp, #72	; 0x48
    3b4c:	mov	r2, r6
    3b50:	ldr	r3, [r0]
    3b54:	mov	r0, r4
    3b58:	bl	18b8 <fread@plt>
    3b5c:	mov	sl, r0
    3b60:	cmp	r6, #1
    3b64:	blt	4b58 <ReadDoubleData+0x1300>
    3b68:	mov	r0, r4
    3b6c:	bl	1bf0 <Mat_int32Swap>
    3b70:	vmov	s0, r0
    3b74:	subs	r6, r6, #1
    3b78:	add	r4, r4, #4
    3b7c:	vcvt.f64.s32	d16, s0
    3b80:	vstr	d16, [r9]
    3b84:	add	r9, r9, #8
    3b88:	bne	3b68 <ReadDoubleData+0x310>
    3b8c:	b	4b58 <ReadDoubleData+0x1300>
    3b90:	ldr	r0, [sp, #20]
    3b94:	ldr	r0, [r0, #20]
    3b98:	cmp	r0, #0
    3b9c:	beq	421c <ReadDoubleData+0x9c4>
    3ba0:	cmp	r6, #256	; 0x100
    3ba4:	bgt	4798 <ReadDoubleData+0xf40>
    3ba8:	ldr	r0, [sp, #20]
    3bac:	ldr	r1, [sp, #16]
    3bb0:	add	r4, sp, #72	; 0x48
    3bb4:	mov	r2, r6
    3bb8:	ldr	r3, [r0]
    3bbc:	mov	r0, r4
    3bc0:	bl	18b8 <fread@plt>
    3bc4:	mov	sl, r0
    3bc8:	cmp	r6, #1
    3bcc:	blt	4b58 <ReadDoubleData+0x1300>
    3bd0:	mov	r0, r4
    3bd4:	bl	1c04 <Mat_uint32Swap>
    3bd8:	vmov	s0, r0
    3bdc:	subs	r6, r6, #1
    3be0:	add	r4, r4, #4
    3be4:	vcvt.f64.u32	d16, s0
    3be8:	vstr	d16, [r9]
    3bec:	add	r9, r9, #8
    3bf0:	bne	3bd0 <ReadDoubleData+0x378>
    3bf4:	b	4b58 <ReadDoubleData+0x1300>
    3bf8:	ldr	r0, [sp, #20]
    3bfc:	ldr	r0, [r0, #20]
    3c00:	cmp	r0, #0
    3c04:	beq	42b0 <ReadDoubleData+0xa58>
    3c08:	cmp	r6, #256	; 0x100
    3c0c:	bgt	488c <ReadDoubleData+0x1034>
    3c10:	ldr	r0, [sp, #20]
    3c14:	ldr	r1, [sp, #16]
    3c18:	add	r4, sp, #72	; 0x48
    3c1c:	mov	r2, r6
    3c20:	ldr	r3, [r0]
    3c24:	mov	r0, r4
    3c28:	bl	18b8 <fread@plt>
    3c2c:	mov	sl, r0
    3c30:	cmp	r6, #1
    3c34:	blt	4b58 <ReadDoubleData+0x1300>
    3c38:	mov	r0, r4
    3c3c:	bl	1c44 <Mat_floatSwap>
    3c40:	vcvt.f64.f32	d16, s0
    3c44:	subs	r6, r6, #1
    3c48:	add	r4, r4, #4
    3c4c:	vstr	d16, [r9]
    3c50:	add	r9, r9, #8
    3c54:	bne	3c38 <ReadDoubleData+0x3e0>
    3c58:	b	4b58 <ReadDoubleData+0x1300>
    3c5c:	ldr	r4, [sp, #20]
    3c60:	ldr	r1, [sp, #16]
    3c64:	mov	r0, r9
    3c68:	mov	r2, r6
    3c6c:	ldr	r3, [r4]
    3c70:	bl	18b8 <fread@plt>
    3c74:	mov	sl, r0
    3c78:	ldr	r0, [r4, #20]
    3c7c:	cmp	r0, #0
    3c80:	beq	4b58 <ReadDoubleData+0x1300>
    3c84:	cmp	r6, #1
    3c88:	blt	4b58 <ReadDoubleData+0x1300>
    3c8c:	mov	r0, r9
    3c90:	bl	1c88 <Mat_doubleSwap>
    3c94:	subs	r6, r6, #1
    3c98:	add	r9, r9, #8
    3c9c:	bne	3c8c <ReadDoubleData+0x434>
    3ca0:	b	4b58 <ReadDoubleData+0x1300>
    3ca4:	ldr	r0, [sp, #20]
    3ca8:	ldr	r0, [r0, #20]
    3cac:	cmp	r0, #0
    3cb0:	beq	4344 <ReadDoubleData+0xaec>
    3cb4:	cmp	r6, #256	; 0x100
    3cb8:	bgt	4978 <ReadDoubleData+0x1120>
    3cbc:	ldr	r0, [sp, #20]
    3cc0:	ldr	r1, [sp, #16]
    3cc4:	add	r4, sp, #72	; 0x48
    3cc8:	mov	r2, r6
    3ccc:	ldr	r3, [r0]
    3cd0:	mov	r0, r4
    3cd4:	bl	18b8 <fread@plt>
    3cd8:	mov	sl, r0
    3cdc:	cmp	r6, #1
    3ce0:	blt	4b58 <ReadDoubleData+0x1300>
    3ce4:	mov	r0, r4
    3ce8:	bl	1b84 <Mat_int64Swap>
    3cec:	bl	582ac <__aeabi_l2d>
    3cf0:	strd	r0, [r9]
    3cf4:	subs	r6, r6, #1
    3cf8:	add	r9, r9, #8
    3cfc:	add	r4, r4, #8
    3d00:	bne	3ce4 <ReadDoubleData+0x48c>
    3d04:	b	4b58 <ReadDoubleData+0x1300>
    3d08:	ldr	r0, [sp, #20]
    3d0c:	ldr	r0, [r0, #20]
    3d10:	cmp	r0, #0
    3d14:	beq	4400 <ReadDoubleData+0xba8>
    3d18:	cmp	r6, #256	; 0x100
    3d1c:	bgt	4a68 <ReadDoubleData+0x1210>
    3d20:	ldr	r0, [sp, #20]
    3d24:	ldr	r1, [sp, #16]
    3d28:	add	r4, sp, #72	; 0x48
    3d2c:	mov	r2, r6
    3d30:	ldr	r3, [r0]
    3d34:	mov	r0, r4
    3d38:	bl	18b8 <fread@plt>
    3d3c:	mov	sl, r0
    3d40:	cmp	r6, #1
    3d44:	blt	4b58 <ReadDoubleData+0x1300>
    3d48:	mov	r0, r4
    3d4c:	bl	1bd4 <Mat_uint64Swap>
    3d50:	bl	58298 <__aeabi_ul2d>
    3d54:	strd	r0, [r9]
    3d58:	subs	r6, r6, #1
    3d5c:	add	r9, r9, #8
    3d60:	add	r4, r4, #8
    3d64:	bne	3d48 <ReadDoubleData+0x4f0>
    3d68:	b	4b58 <ReadDoubleData+0x1300>
    3d6c:	sub	r1, r6, #256	; 0x100
    3d70:	str	r6, [sp, #4]
    3d74:	add	r0, r9, #2048	; 0x800
    3d78:	mov	r2, #256	; 0x100
    3d7c:	add	r4, sp, #72	; 0x48
    3d80:	add	r6, sp, #56	; 0x38
    3d84:	mov	sl, r9
    3d88:	mov	r8, #0
    3d8c:	str	r9, [sp]
    3d90:	str	r1, [sp, #12]
    3d94:	mov	r1, #0
    3d98:	mov	r7, r0
    3d9c:	ldr	r0, [sp, #20]
    3da0:	mov	r5, r1
    3da4:	ldr	r1, [sp, #16]
    3da8:	mov	r9, r2
    3dac:	mov	r2, #256	; 0x100
    3db0:	ldr	r3, [r0]
    3db4:	mov	r0, r4
    3db8:	bl	18b8 <fread@plt>
    3dbc:	mov	r1, sl
    3dc0:	mov	r2, #0
    3dc4:	add	r3, r4, r2
    3dc8:	add	r2, r2, #2
    3dcc:	ldrh	r3, [r3]
    3dd0:	cmp	r2, #256	; 0x100
    3dd4:	strh	r3, [sp, #56]	; 0x38
    3dd8:	vld1.16	{d16[0]}, [r6 :16]
    3ddc:	vmovl.s8	q8, d16
    3de0:	vmovl.s16	q0, d16
    3de4:	vcvt.f64.s32	d17, s1
    3de8:	vcvt.f64.s32	d16, s0
    3dec:	vst1.64	{d16-d17}, [r1]!
    3df0:	bne	3dc4 <ReadDoubleData+0x56c>
    3df4:	ldr	r3, [sp, #12]
    3df8:	add	r1, r5, #256	; 0x100
    3dfc:	add	r8, r0, r8
    3e00:	add	sl, sl, #2048	; 0x800
    3e04:	add	r0, r7, #2048	; 0x800
    3e08:	add	r2, r9, #256	; 0x100
    3e0c:	cmp	r1, r3
    3e10:	blt	3d98 <ReadDoubleData+0x540>
    3e14:	ldr	r0, [sp, #4]
    3e18:	cmp	r1, r0
    3e1c:	bge	4b64 <ReadDoubleData+0x130c>
    3e20:	sub	r6, r0, r1
    3e24:	ldr	r0, [sp, #20]
    3e28:	ldr	r1, [sp, #16]
    3e2c:	add	r4, sp, #72	; 0x48
    3e30:	mov	r2, r6
    3e34:	ldr	r3, [r0]
    3e38:	mov	r0, r4
    3e3c:	bl	18b8 <fread@plt>
    3e40:	mov	sl, r8
    3e44:	cmp	r6, #1
    3e48:	add	sl, r0, r8
    3e4c:	blt	4b58 <ReadDoubleData+0x1300>
    3e50:	mov	r0, #0
    3e54:	beq	3e9c <ReadDoubleData+0x644>
    3e58:	ldr	r0, [sp, #12]
    3e5c:	add	r2, sp, #52	; 0x34
    3e60:	sub	r0, r0, r5
    3e64:	bic	r1, r0, #1
    3e68:	bic	r0, r6, #1
    3e6c:	ldrh	r3, [r4], #2
    3e70:	subs	r1, r1, #2
    3e74:	strh	r3, [sp, #52]	; 0x34
    3e78:	vld1.16	{d16[0]}, [r2 :16]
    3e7c:	vmovl.s8	q8, d16
    3e80:	vmovl.s16	q0, d16
    3e84:	vcvt.f64.s32	d17, s1
    3e88:	vcvt.f64.s32	d16, s0
    3e8c:	vst1.64	{d16-d17}, [r7]!
    3e90:	bne	3e6c <ReadDoubleData+0x614>
    3e94:	cmp	r6, r0
    3e98:	beq	4b58 <ReadDoubleData+0x1300>
    3e9c:	ldr	r3, [sp]
    3ea0:	add	r2, r0, r9
    3ea4:	add	r1, sp, #72	; 0x48
    3ea8:	add	r1, r1, r0
    3eac:	add	r2, r3, r2, lsl #3
    3eb0:	ldr	r3, [sp, #12]
    3eb4:	sub	r3, r3, r5
    3eb8:	sub	r0, r3, r0
    3ebc:	ldrsb	r3, [r1], #1
    3ec0:	subs	r0, r0, #1
    3ec4:	vmov	s0, r3
    3ec8:	vcvt.f64.s32	d16, s0
    3ecc:	vstmia	r2!, {d16}
    3ed0:	bne	3ebc <ReadDoubleData+0x664>
    3ed4:	b	4b58 <ReadDoubleData+0x1300>
    3ed8:	sub	r1, r6, #256	; 0x100
    3edc:	str	r6, [sp, #4]
    3ee0:	add	r0, r9, #2048	; 0x800
    3ee4:	mov	r2, #256	; 0x100
    3ee8:	add	r4, sp, #72	; 0x48
    3eec:	add	r6, sp, #68	; 0x44
    3ef0:	mov	r5, r9
    3ef4:	mov	sl, #0
    3ef8:	str	r9, [sp]
    3efc:	str	r1, [sp, #12]
    3f00:	mov	r1, #0
    3f04:	mov	r7, r0
    3f08:	ldr	r0, [sp, #20]
    3f0c:	mov	r8, r1
    3f10:	ldr	r1, [sp, #16]
    3f14:	mov	r9, r2
    3f18:	mov	r2, #256	; 0x100
    3f1c:	ldr	r3, [r0]
    3f20:	mov	r0, r4
    3f24:	bl	18b8 <fread@plt>
    3f28:	mov	r1, r5
    3f2c:	mov	r2, #0
    3f30:	add	r3, r4, r2
    3f34:	add	r2, r2, #2
    3f38:	ldrh	r3, [r3]
    3f3c:	cmp	r2, #256	; 0x100
    3f40:	strh	r3, [sp, #68]	; 0x44
    3f44:	vld1.16	{d16[0]}, [r6 :16]
    3f48:	vmovl.u8	q8, d16
    3f4c:	vmovl.u16	q0, d16
    3f50:	vcvt.f64.u32	d17, s1
    3f54:	vcvt.f64.u32	d16, s0
    3f58:	vst1.64	{d16-d17}, [r1]!
    3f5c:	bne	3f30 <ReadDoubleData+0x6d8>
    3f60:	ldr	r3, [sp, #12]
    3f64:	add	r1, r8, #256	; 0x100
    3f68:	add	sl, r0, sl
    3f6c:	add	r5, r5, #2048	; 0x800
    3f70:	add	r0, r7, #2048	; 0x800
    3f74:	add	r2, r9, #256	; 0x100
    3f78:	cmp	r1, r3
    3f7c:	blt	3f04 <ReadDoubleData+0x6ac>
    3f80:	ldr	r0, [sp, #4]
    3f84:	cmp	r1, r0
    3f88:	bge	4b58 <ReadDoubleData+0x1300>
    3f8c:	sub	r5, r0, r1
    3f90:	ldr	r0, [sp, #20]
    3f94:	ldr	r1, [sp, #16]
    3f98:	add	r4, sp, #72	; 0x48
    3f9c:	mov	r2, r5
    3fa0:	ldr	r3, [r0]
    3fa4:	mov	r0, r4
    3fa8:	bl	18b8 <fread@plt>
    3fac:	add	sl, r0, sl
    3fb0:	cmp	r5, #1
    3fb4:	blt	4b58 <ReadDoubleData+0x1300>
    3fb8:	mov	r0, #0
    3fbc:	beq	4004 <ReadDoubleData+0x7ac>
    3fc0:	ldr	r0, [sp, #12]
    3fc4:	add	r2, sp, #64	; 0x40
    3fc8:	sub	r0, r0, r8
    3fcc:	bic	r1, r0, #1
    3fd0:	bic	r0, r5, #1
    3fd4:	ldrh	r3, [r4], #2
    3fd8:	subs	r1, r1, #2
    3fdc:	strh	r3, [sp, #64]	; 0x40
    3fe0:	vld1.16	{d16[0]}, [r2 :16]
    3fe4:	vmovl.u8	q8, d16
    3fe8:	vmovl.u16	q0, d16
    3fec:	vcvt.f64.u32	d17, s1
    3ff0:	vcvt.f64.u32	d16, s0
    3ff4:	vst1.64	{d16-d17}, [r7]!
    3ff8:	bne	3fd4 <ReadDoubleData+0x77c>
    3ffc:	cmp	r5, r0
    4000:	beq	4b58 <ReadDoubleData+0x1300>
    4004:	ldr	r3, [sp]
    4008:	add	r2, r0, r9
    400c:	add	r1, sp, #72	; 0x48
    4010:	add	r1, r1, r0
    4014:	add	r2, r3, r2, lsl #3
    4018:	ldr	r3, [sp, #12]
    401c:	sub	r3, r3, r8
    4020:	sub	r0, r3, r0
    4024:	ldrb	r3, [r1], #1
    4028:	subs	r0, r0, #1
    402c:	vmov	s0, r3
    4030:	vcvt.f64.u32	d16, s0
    4034:	vstmia	r2!, {d16}
    4038:	bne	4024 <ReadDoubleData+0x7cc>
    403c:	b	4b58 <ReadDoubleData+0x1300>
    4040:	cmp	r6, #256	; 0x100
    4044:	bgt	4b6c <ReadDoubleData+0x1314>
    4048:	ldr	r0, [sp, #20]
    404c:	ldr	r1, [sp, #16]
    4050:	add	r4, sp, #72	; 0x48
    4054:	mov	r2, r6
    4058:	ldr	r3, [r0]
    405c:	mov	r0, r4
    4060:	bl	18b8 <fread@plt>
    4064:	mov	sl, r0
    4068:	cmp	r6, #1
    406c:	blt	4b58 <ReadDoubleData+0x1300>
    4070:	mov	r0, #0
    4074:	beq	40b4 <ReadDoubleData+0x85c>
    4078:	bic	r0, r6, #1
    407c:	add	r1, sp, #24
    4080:	mov	r3, r9
    4084:	mov	r2, r0
    4088:	ldr	r7, [r4], #4
    408c:	subs	r2, r2, #2
    4090:	str	r7, [sp, #24]
    4094:	vld1.32	{d16[0]}, [r1 :32]
    4098:	vmovl.s16	q0, d16
    409c:	vcvt.f64.s32	d17, s1
    40a0:	vcvt.f64.s32	d16, s0
    40a4:	vst1.64	{d16-d17}, [r3]!
    40a8:	bne	4088 <ReadDoubleData+0x830>
    40ac:	cmp	r0, r6
    40b0:	beq	4b58 <ReadDoubleData+0x1300>
    40b4:	add	r3, sp, #72	; 0x48
    40b8:	sub	r1, r6, r0
    40bc:	add	r2, r9, r0, lsl #3
    40c0:	add	r0, r3, r0, lsl #1
    40c4:	ldrsh	r3, [r0], #2
    40c8:	subs	r1, r1, #1
    40cc:	vmov	s0, r3
    40d0:	vcvt.f64.s32	d16, s0
    40d4:	vstr	d16, [r2]
    40d8:	add	r2, r2, #8
    40dc:	bne	40c4 <ReadDoubleData+0x86c>
    40e0:	b	4b58 <ReadDoubleData+0x1300>
    40e4:	cmp	r6, #256	; 0x100
    40e8:	bgt	4cc8 <ReadDoubleData+0x1470>
    40ec:	ldr	r0, [sp, #20]
    40f0:	ldr	r1, [sp, #16]
    40f4:	add	r4, sp, #72	; 0x48
    40f8:	mov	r2, r6
    40fc:	ldr	r3, [r0]
    4100:	mov	r0, r4
    4104:	bl	18b8 <fread@plt>
    4108:	mov	sl, r0
    410c:	cmp	r6, #1
    4110:	blt	4b58 <ReadDoubleData+0x1300>
    4114:	mov	r0, #0
    4118:	beq	4158 <ReadDoubleData+0x900>
    411c:	bic	r0, r6, #1
    4120:	add	r1, sp, #36	; 0x24
    4124:	mov	r3, r9
    4128:	mov	r2, r0
    412c:	ldr	r7, [r4], #4
    4130:	subs	r2, r2, #2
    4134:	str	r7, [sp, #36]	; 0x24
    4138:	vld1.32	{d16[0]}, [r1 :32]
    413c:	vmovl.u16	q0, d16
    4140:	vcvt.f64.u32	d17, s1
    4144:	vcvt.f64.u32	d16, s0
    4148:	vst1.64	{d16-d17}, [r3]!
    414c:	bne	412c <ReadDoubleData+0x8d4>
    4150:	cmp	r0, r6
    4154:	beq	4b58 <ReadDoubleData+0x1300>
    4158:	add	r3, sp, #72	; 0x48
    415c:	sub	r1, r6, r0
    4160:	add	r2, r9, r0, lsl #3
    4164:	add	r0, r3, r0, lsl #1
    4168:	ldrh	r3, [r0], #2
    416c:	subs	r1, r1, #1
    4170:	vmov	s0, r3
    4174:	vcvt.f64.u32	d16, s0
    4178:	vstr	d16, [r2]
    417c:	add	r2, r2, #8
    4180:	bne	4168 <ReadDoubleData+0x910>
    4184:	b	4b58 <ReadDoubleData+0x1300>
    4188:	cmp	r6, #256	; 0x100
    418c:	bgt	4e24 <ReadDoubleData+0x15cc>
    4190:	ldr	r0, [sp, #20]
    4194:	ldr	r1, [sp, #16]
    4198:	add	r4, sp, #72	; 0x48
    419c:	mov	r2, r6
    41a0:	ldr	r3, [r0]
    41a4:	mov	r0, r4
    41a8:	bl	18b8 <fread@plt>
    41ac:	mov	sl, r0
    41b0:	cmp	r6, #1
    41b4:	blt	4b58 <ReadDoubleData+0x1300>
    41b8:	mov	r0, #0
    41bc:	beq	41ec <ReadDoubleData+0x994>
    41c0:	bic	r0, r6, #1
    41c4:	mov	r2, r9
    41c8:	mov	r1, r0
    41cc:	vld1.32	{d0}, [r4]!
    41d0:	subs	r1, r1, #2
    41d4:	vcvt.f64.s32	d17, s1
    41d8:	vcvt.f64.s32	d16, s0
    41dc:	vst1.64	{d16-d17}, [r2]!
    41e0:	bne	41cc <ReadDoubleData+0x974>
    41e4:	cmp	r0, r6
    41e8:	beq	4b58 <ReadDoubleData+0x1300>
    41ec:	add	r3, sp, #72	; 0x48
    41f0:	sub	r1, r6, r0
    41f4:	add	r2, r9, r0, lsl #3
    41f8:	add	r0, r3, r0, lsl #2
    41fc:	ldr	r3, [r0], #4
    4200:	subs	r1, r1, #1
    4204:	vmov	s0, r3
    4208:	vcvt.f64.s32	d16, s0
    420c:	vstr	d16, [r2]
    4210:	add	r2, r2, #8
    4214:	bne	41fc <ReadDoubleData+0x9a4>
    4218:	b	4b58 <ReadDoubleData+0x1300>
    421c:	cmp	r6, #256	; 0x100
    4220:	bgt	4f60 <ReadDoubleData+0x1708>
    4224:	ldr	r0, [sp, #20]
    4228:	ldr	r1, [sp, #16]
    422c:	add	r4, sp, #72	; 0x48
    4230:	mov	r2, r6
    4234:	ldr	r3, [r0]
    4238:	mov	r0, r4
    423c:	bl	18b8 <fread@plt>
    4240:	mov	sl, r0
    4244:	cmp	r6, #1
    4248:	blt	4b58 <ReadDoubleData+0x1300>
    424c:	mov	r0, #0
    4250:	beq	4280 <ReadDoubleData+0xa28>
    4254:	bic	r0, r6, #1
    4258:	mov	r2, r9
    425c:	mov	r1, r0
    4260:	vld1.32	{d0}, [r4]!
    4264:	subs	r1, r1, #2
    4268:	vcvt.f64.u32	d17, s1
    426c:	vcvt.f64.u32	d16, s0
    4270:	vst1.64	{d16-d17}, [r2]!
    4274:	bne	4260 <ReadDoubleData+0xa08>
    4278:	cmp	r0, r6
    427c:	beq	4b58 <ReadDoubleData+0x1300>
    4280:	add	r3, sp, #72	; 0x48
    4284:	sub	r1, r6, r0
    4288:	add	r2, r9, r0, lsl #3
    428c:	add	r0, r3, r0, lsl #2
    4290:	ldr	r3, [r0], #4
    4294:	subs	r1, r1, #1
    4298:	vmov	s0, r3
    429c:	vcvt.f64.u32	d16, s0
    42a0:	vstr	d16, [r2]
    42a4:	add	r2, r2, #8
    42a8:	bne	4290 <ReadDoubleData+0xa38>
    42ac:	b	4b58 <ReadDoubleData+0x1300>
    42b0:	cmp	r6, #256	; 0x100
    42b4:	bgt	509c <ReadDoubleData+0x1844>
    42b8:	ldr	r0, [sp, #20]
    42bc:	ldr	r1, [sp, #16]
    42c0:	add	r4, sp, #72	; 0x48
    42c4:	mov	r2, r6
    42c8:	ldr	r3, [r0]
    42cc:	mov	r0, r4
    42d0:	bl	18b8 <fread@plt>
    42d4:	mov	sl, r0
    42d8:	cmp	r6, #1
    42dc:	blt	4b58 <ReadDoubleData+0x1300>
    42e0:	mov	r0, #0
    42e4:	beq	4314 <ReadDoubleData+0xabc>
    42e8:	bic	r0, r6, #1
    42ec:	mov	r2, r9
    42f0:	mov	r1, r0
    42f4:	vld1.32	{d0}, [r4]!
    42f8:	subs	r1, r1, #2
    42fc:	vcvt.f64.f32	d17, s1
    4300:	vcvt.f64.f32	d16, s0
    4304:	vst1.64	{d16-d17}, [r2]!
    4308:	bne	42f4 <ReadDoubleData+0xa9c>
    430c:	cmp	r0, r6
    4310:	beq	4b58 <ReadDoubleData+0x1300>
    4314:	add	r3, sp, #72	; 0x48
    4318:	sub	r1, r6, r0
    431c:	add	r2, r9, r0, lsl #3
    4320:	add	r0, r3, r0, lsl #2
    4324:	vldr	s0, [r0]
    4328:	subs	r1, r1, #1
    432c:	add	r0, r0, #4
    4330:	vcvt.f64.f32	d16, s0
    4334:	vstr	d16, [r2]
    4338:	add	r2, r2, #8
    433c:	bne	4324 <ReadDoubleData+0xacc>
    4340:	b	4b58 <ReadDoubleData+0x1300>
    4344:	cmp	r6, #256	; 0x100
    4348:	bgt	51d8 <ReadDoubleData+0x1980>
    434c:	ldr	r0, [sp, #20]
    4350:	ldr	r1, [sp, #16]
    4354:	add	r4, sp, #72	; 0x48
    4358:	mov	r2, r6
    435c:	ldr	r3, [r0]
    4360:	mov	r0, r4
    4364:	bl	18b8 <fread@plt>
    4368:	mov	sl, r0
    436c:	cmp	r6, #1
    4370:	blt	4b58 <ReadDoubleData+0x1300>
    4374:	mov	r5, #0
    4378:	beq	43d0 <ReadDoubleData+0xb78>
    437c:	bic	r5, r6, #1
    4380:	mov	r8, r6
    4384:	mov	r7, r9
    4388:	mov	r6, r5
    438c:	vld1.64	{d8-d9}, [r4]!
    4390:	vmov.32	r0, d9[0]
    4394:	vmov.32	r1, d9[1]
    4398:	bl	582ac <__aeabi_l2d>
    439c:	vmov.32	r2, d8[0]
    43a0:	vmov.32	r3, d8[1]
    43a4:	vmov	d9, r0, r1
    43a8:	mov	r0, r2
    43ac:	mov	r1, r3
    43b0:	bl	582ac <__aeabi_l2d>
    43b4:	vmov	d8, r0, r1
    43b8:	subs	r6, r6, #2
    43bc:	vst1.64	{d8-d9}, [r7]!
    43c0:	bne	438c <ReadDoubleData+0xb34>
    43c4:	mov	r6, r8
    43c8:	cmp	r5, r8
    43cc:	beq	4b58 <ReadDoubleData+0x1300>
    43d0:	add	r0, sp, #72	; 0x48
    43d4:	sub	r4, r6, r5
    43d8:	add	r6, r9, r5, lsl #3
    43dc:	add	r5, r0, r5, lsl #3
    43e0:	ldrd	r0, [r5]
    43e4:	bl	582ac <__aeabi_l2d>
    43e8:	strd	r0, [r6]
    43ec:	subs	r4, r4, #1
    43f0:	add	r6, r6, #8
    43f4:	add	r5, r5, #8
    43f8:	bne	43e0 <ReadDoubleData+0xb88>
    43fc:	b	4b58 <ReadDoubleData+0x1300>
    4400:	cmp	r6, #256	; 0x100
    4404:	bgt	536c <ReadDoubleData+0x1b14>
    4408:	ldr	r0, [sp, #20]
    440c:	ldr	r1, [sp, #16]
    4410:	add	r4, sp, #72	; 0x48
    4414:	mov	r2, r6
    4418:	ldr	r3, [r0]
    441c:	mov	r0, r4
    4420:	bl	18b8 <fread@plt>
    4424:	mov	sl, r0
    4428:	cmp	r6, #1
    442c:	blt	4b58 <ReadDoubleData+0x1300>
    4430:	mov	r5, #0
    4434:	beq	448c <ReadDoubleData+0xc34>
    4438:	bic	r5, r6, #1
    443c:	mov	r8, r6
    4440:	mov	r7, r9
    4444:	mov	r6, r5
    4448:	vld1.64	{d8-d9}, [r4]!
    444c:	vmov.32	r0, d9[0]
    4450:	vmov.32	r1, d9[1]
    4454:	bl	58298 <__aeabi_ul2d>
    4458:	vmov.32	r2, d8[0]
    445c:	vmov.32	r3, d8[1]
    4460:	vmov	d9, r0, r1
    4464:	mov	r0, r2
    4468:	mov	r1, r3
    446c:	bl	58298 <__aeabi_ul2d>
    4470:	vmov	d8, r0, r1
    4474:	subs	r6, r6, #2
    4478:	vst1.64	{d8-d9}, [r7]!
    447c:	bne	4448 <ReadDoubleData+0xbf0>
    4480:	mov	r6, r8
    4484:	cmp	r5, r8
    4488:	beq	4b58 <ReadDoubleData+0x1300>
    448c:	add	r0, sp, #72	; 0x48
    4490:	sub	r4, r6, r5
    4494:	add	r6, r9, r5, lsl #3
    4498:	add	r5, r0, r5, lsl #3
    449c:	ldrd	r0, [r5]
    44a0:	bl	58298 <__aeabi_ul2d>
    44a4:	strd	r0, [r6]
    44a8:	subs	r4, r4, #1
    44ac:	add	r6, r6, #8
    44b0:	add	r5, r5, #8
    44b4:	bne	449c <ReadDoubleData+0xc44>
    44b8:	b	4b58 <ReadDoubleData+0x1300>
    44bc:	sub	r0, r6, #256	; 0x100
    44c0:	add	r1, r9, #2048	; 0x800
    44c4:	add	r4, sp, #72	; 0x48
    44c8:	mov	r5, #0
    44cc:	str	r6, [sp, #4]
    44d0:	str	r0, [sp, #8]
    44d4:	mov	r0, #0
    44d8:	str	r0, [sp, #12]
    44dc:	ldr	r0, [sp, #20]
    44e0:	mov	r8, r1
    44e4:	ldr	r1, [sp, #16]
    44e8:	mov	r2, #256	; 0x100
    44ec:	ldr	r3, [r0]
    44f0:	mov	r0, r4
    44f4:	bl	18b8 <fread@plt>
    44f8:	mov	r7, r0
    44fc:	mov	sl, r9
    4500:	mov	r6, r9
    4504:	mov	r9, #0
    4508:	add	r0, r4, r9
    450c:	bl	1c18 <Mat_int16Swap>
    4510:	vmov	s0, r0
    4514:	add	r9, r9, #2
    4518:	vcvt.f64.s32	d16, s0
    451c:	cmp	r9, #512	; 0x200
    4520:	vstmia	r6!, {d16}
    4524:	bne	4508 <ReadDoubleData+0xcb0>
    4528:	ldr	r6, [sp, #12]
    452c:	ldr	r2, [sp, #8]
    4530:	mov	r9, sl
    4534:	add	r5, r7, r5
    4538:	add	r1, r8, #2048	; 0x800
    453c:	add	r9, sl, #2048	; 0x800
    4540:	add	r0, r6, #256	; 0x100
    4544:	cmp	r0, r2
    4548:	blt	44d8 <ReadDoubleData+0xc80>
    454c:	ldr	r1, [sp, #4]
    4550:	cmp	r0, r1
    4554:	bge	4b54 <ReadDoubleData+0x12fc>
    4558:	sub	r7, r1, r0
    455c:	ldr	r0, [sp, #20]
    4560:	ldr	r1, [sp, #16]
    4564:	add	r4, sp, #72	; 0x48
    4568:	mov	r2, r7
    456c:	ldr	r3, [r0]
    4570:	mov	r0, r4
    4574:	bl	18b8 <fread@plt>
    4578:	add	r5, r0, r5
    457c:	cmp	r7, #1
    4580:	blt	4b54 <ReadDoubleData+0x12fc>
    4584:	ldr	r0, [sp, #8]
    4588:	sub	r6, r0, r6
    458c:	mov	r0, r4
    4590:	bl	1c18 <Mat_int16Swap>
    4594:	vmov	s0, r0
    4598:	subs	r6, r6, #1
    459c:	add	r4, r4, #2
    45a0:	vcvt.f64.s32	d16, s0
    45a4:	vstmia	r8!, {d16}
    45a8:	bne	458c <ReadDoubleData+0xd34>
    45ac:	b	4b54 <ReadDoubleData+0x12fc>
    45b0:	sub	r0, r6, #256	; 0x100
    45b4:	add	r1, r9, #2048	; 0x800
    45b8:	add	r4, sp, #72	; 0x48
    45bc:	mov	r5, #0
    45c0:	str	r6, [sp, #4]
    45c4:	str	r0, [sp, #8]
    45c8:	mov	r0, #0
    45cc:	str	r0, [sp, #12]
    45d0:	ldr	r0, [sp, #20]
    45d4:	mov	r8, r1
    45d8:	ldr	r1, [sp, #16]
    45dc:	mov	r2, #256	; 0x100
    45e0:	ldr	r3, [r0]
    45e4:	mov	r0, r4
    45e8:	bl	18b8 <fread@plt>
    45ec:	mov	r7, r0
    45f0:	mov	sl, r9
    45f4:	mov	r6, r9
    45f8:	mov	r9, #0
    45fc:	add	r0, r4, r9
    4600:	bl	1c2c <Mat_uint16Swap>
    4604:	vmov	s0, r0
    4608:	add	r9, r9, #2
    460c:	vcvt.f64.u32	d16, s0
    4610:	cmp	r9, #512	; 0x200
    4614:	vstmia	r6!, {d16}
    4618:	bne	45fc <ReadDoubleData+0xda4>
    461c:	ldr	r6, [sp, #12]
    4620:	ldr	r2, [sp, #8]
    4624:	mov	r9, sl
    4628:	add	r5, r7, r5
    462c:	add	r1, r8, #2048	; 0x800
    4630:	add	r9, sl, #2048	; 0x800
    4634:	add	r0, r6, #256	; 0x100
    4638:	cmp	r0, r2
    463c:	blt	45cc <ReadDoubleData+0xd74>
    4640:	ldr	r1, [sp, #4]
    4644:	cmp	r0, r1
    4648:	bge	4b54 <ReadDoubleData+0x12fc>
    464c:	sub	r7, r1, r0
    4650:	ldr	r0, [sp, #20]
    4654:	ldr	r1, [sp, #16]
    4658:	add	r4, sp, #72	; 0x48
    465c:	mov	r2, r7
    4660:	ldr	r3, [r0]
    4664:	mov	r0, r4
    4668:	bl	18b8 <fread@plt>
    466c:	add	r5, r0, r5
    4670:	cmp	r7, #1
    4674:	blt	4b54 <ReadDoubleData+0x12fc>
    4678:	ldr	r0, [sp, #8]
    467c:	sub	r6, r0, r6
    4680:	mov	r0, r4
    4684:	bl	1c2c <Mat_uint16Swap>
    4688:	vmov	s0, r0
    468c:	subs	r6, r6, #1
    4690:	add	r4, r4, #2
    4694:	vcvt.f64.u32	d16, s0
    4698:	vstmia	r8!, {d16}
    469c:	bne	4680 <ReadDoubleData+0xe28>
    46a0:	b	4b54 <ReadDoubleData+0x12fc>
    46a4:	sub	r0, r6, #256	; 0x100
    46a8:	add	r1, r9, #2048	; 0x800
    46ac:	add	r4, sp, #72	; 0x48
    46b0:	mov	r5, #0
    46b4:	str	r6, [sp, #4]
    46b8:	str	r0, [sp, #8]
    46bc:	mov	r0, #0
    46c0:	str	r0, [sp, #12]
    46c4:	ldr	r0, [sp, #20]
    46c8:	mov	r8, r1
    46cc:	ldr	r1, [sp, #16]
    46d0:	mov	r2, #256	; 0x100
    46d4:	ldr	r3, [r0]
    46d8:	mov	r0, r4
    46dc:	bl	18b8 <fread@plt>
    46e0:	mov	r7, r0
    46e4:	mov	sl, r9
    46e8:	mov	r6, r9
    46ec:	mov	r9, #0
    46f0:	add	r0, r4, r9
    46f4:	bl	1bf0 <Mat_int32Swap>
    46f8:	vmov	s0, r0
    46fc:	add	r9, r9, #4
    4700:	vcvt.f64.s32	d16, s0
    4704:	cmp	r9, #1024	; 0x400
    4708:	vstmia	r6!, {d16}
    470c:	bne	46f0 <ReadDoubleData+0xe98>
    4710:	ldr	r6, [sp, #12]
    4714:	ldr	r2, [sp, #8]
    4718:	mov	r9, sl
    471c:	add	r5, r7, r5
    4720:	add	r1, r8, #2048	; 0x800
    4724:	add	r9, sl, #2048	; 0x800
    4728:	add	r0, r6, #256	; 0x100
    472c:	cmp	r0, r2
    4730:	blt	46c0 <ReadDoubleData+0xe68>
    4734:	ldr	r1, [sp, #4]
    4738:	cmp	r0, r1
    473c:	bge	4b54 <ReadDoubleData+0x12fc>
    4740:	sub	r7, r1, r0
    4744:	ldr	r0, [sp, #20]
    4748:	ldr	r1, [sp, #16]
    474c:	add	r4, sp, #72	; 0x48
    4750:	mov	r2, r7
    4754:	ldr	r3, [r0]
    4758:	mov	r0, r4
    475c:	bl	18b8 <fread@plt>
    4760:	add	r5, r0, r5
    4764:	cmp	r7, #1
    4768:	blt	4b54 <ReadDoubleData+0x12fc>
    476c:	ldr	r0, [sp, #8]
    4770:	sub	r6, r0, r6
    4774:	mov	r0, r4
    4778:	bl	1bf0 <Mat_int32Swap>
    477c:	vmov	s0, r0
    4780:	subs	r6, r6, #1
    4784:	add	r4, r4, #4
    4788:	vcvt.f64.s32	d16, s0
    478c:	vstmia	r8!, {d16}
    4790:	bne	4774 <ReadDoubleData+0xf1c>
    4794:	b	4b54 <ReadDoubleData+0x12fc>
    4798:	sub	r0, r6, #256	; 0x100
    479c:	add	r1, r9, #2048	; 0x800
    47a0:	add	r4, sp, #72	; 0x48
    47a4:	mov	r5, #0
    47a8:	str	r6, [sp, #4]
    47ac:	str	r0, [sp, #8]
    47b0:	mov	r0, #0
    47b4:	str	r0, [sp, #12]
    47b8:	ldr	r0, [sp, #20]
    47bc:	mov	r8, r1
    47c0:	ldr	r1, [sp, #16]
    47c4:	mov	r2, #256	; 0x100
    47c8:	ldr	r3, [r0]
    47cc:	mov	r0, r4
    47d0:	bl	18b8 <fread@plt>
    47d4:	mov	r7, r0
    47d8:	mov	sl, r9
    47dc:	mov	r6, r9
    47e0:	mov	r9, #0
    47e4:	add	r0, r4, r9
    47e8:	bl	1c04 <Mat_uint32Swap>
    47ec:	vmov	s0, r0
    47f0:	add	r9, r9, #4
    47f4:	vcvt.f64.u32	d16, s0
    47f8:	cmp	r9, #1024	; 0x400
    47fc:	vstmia	r6!, {d16}
    4800:	bne	47e4 <ReadDoubleData+0xf8c>
    4804:	ldr	r6, [sp, #12]
    4808:	ldr	r2, [sp, #8]
    480c:	mov	r9, sl
    4810:	add	r5, r7, r5
    4814:	add	r1, r8, #2048	; 0x800
    4818:	add	r9, sl, #2048	; 0x800
    481c:	add	r0, r6, #256	; 0x100
    4820:	cmp	r0, r2
    4824:	blt	47b4 <ReadDoubleData+0xf5c>
    4828:	ldr	r1, [sp, #4]
    482c:	cmp	r0, r1
    4830:	bge	4b54 <ReadDoubleData+0x12fc>
    4834:	sub	r7, r1, r0
    4838:	ldr	r0, [sp, #20]
    483c:	ldr	r1, [sp, #16]
    4840:	add	r4, sp, #72	; 0x48
    4844:	mov	r2, r7
    4848:	ldr	r3, [r0]
    484c:	mov	r0, r4
    4850:	bl	18b8 <fread@plt>
    4854:	add	r5, r0, r5
    4858:	cmp	r7, #1
    485c:	blt	4b54 <ReadDoubleData+0x12fc>
    4860:	ldr	r0, [sp, #8]
    4864:	sub	r6, r0, r6
    4868:	mov	r0, r4
    486c:	bl	1c04 <Mat_uint32Swap>
    4870:	vmov	s0, r0
    4874:	subs	r6, r6, #1
    4878:	add	r4, r4, #4
    487c:	vcvt.f64.u32	d16, s0
    4880:	vstmia	r8!, {d16}
    4884:	bne	4868 <ReadDoubleData+0x1010>
    4888:	b	4b54 <ReadDoubleData+0x12fc>
    488c:	sub	r0, r6, #256	; 0x100
    4890:	add	r1, r9, #2048	; 0x800
    4894:	add	r4, sp, #72	; 0x48
    4898:	mov	r5, #0
    489c:	str	r6, [sp, #4]
    48a0:	str	r0, [sp, #8]
    48a4:	mov	r0, #0
    48a8:	str	r0, [sp, #12]
    48ac:	ldr	r0, [sp, #20]
    48b0:	mov	r8, r1
    48b4:	ldr	r1, [sp, #16]
    48b8:	mov	r2, #256	; 0x100
    48bc:	ldr	r3, [r0]
    48c0:	mov	r0, r4
    48c4:	bl	18b8 <fread@plt>
    48c8:	mov	r7, r0
    48cc:	mov	sl, r9
    48d0:	mov	r6, r9
    48d4:	mov	r9, #0
    48d8:	add	r0, r4, r9
    48dc:	bl	1c44 <Mat_floatSwap>
    48e0:	vcvt.f64.f32	d16, s0
    48e4:	add	r9, r9, #4
    48e8:	vstmia	r6!, {d16}
    48ec:	cmp	r9, #1024	; 0x400
    48f0:	bne	48d8 <ReadDoubleData+0x1080>
    48f4:	ldr	r6, [sp, #12]
    48f8:	ldr	r2, [sp, #8]
    48fc:	mov	r9, sl
    4900:	add	r5, r7, r5
    4904:	add	r1, r8, #2048	; 0x800
    4908:	add	r9, sl, #2048	; 0x800
    490c:	add	r0, r6, #256	; 0x100
    4910:	cmp	r0, r2
    4914:	blt	48a8 <ReadDoubleData+0x1050>
    4918:	ldr	r1, [sp, #4]
    491c:	cmp	r0, r1
    4920:	bge	4b54 <ReadDoubleData+0x12fc>
    4924:	sub	r7, r1, r0
    4928:	ldr	r0, [sp, #20]
    492c:	ldr	r1, [sp, #16]
    4930:	add	r4, sp, #72	; 0x48
    4934:	mov	r2, r7
    4938:	ldr	r3, [r0]
    493c:	mov	r0, r4
    4940:	bl	18b8 <fread@plt>
    4944:	add	r5, r0, r5
    4948:	cmp	r7, #1
    494c:	blt	4b54 <ReadDoubleData+0x12fc>
    4950:	ldr	r0, [sp, #8]
    4954:	sub	r6, r0, r6
    4958:	mov	r0, r4
    495c:	bl	1c44 <Mat_floatSwap>
    4960:	vcvt.f64.f32	d16, s0
    4964:	subs	r6, r6, #1
    4968:	add	r4, r4, #4
    496c:	vstmia	r8!, {d16}
    4970:	bne	4958 <ReadDoubleData+0x1100>
    4974:	b	4b54 <ReadDoubleData+0x12fc>
    4978:	sub	r0, r6, #256	; 0x100
    497c:	mov	sl, r9
    4980:	add	r1, r9, #2048	; 0x800
    4984:	add	r4, sp, #72	; 0x48
    4988:	mov	r5, #0
    498c:	str	r6, [sp, #4]
    4990:	str	r0, [sp, #8]
    4994:	mov	r0, #0
    4998:	str	r0, [sp, #12]
    499c:	ldr	r0, [sp, #20]
    49a0:	mov	r8, r1
    49a4:	ldr	r1, [sp, #16]
    49a8:	mov	r2, #256	; 0x100
    49ac:	ldr	r3, [r0]
    49b0:	mov	r0, r4
    49b4:	bl	18b8 <fread@plt>
    49b8:	mov	r7, r0
    49bc:	mov	r6, #0
    49c0:	add	r0, r4, r6
    49c4:	bl	1b84 <Mat_int64Swap>
    49c8:	bl	582ac <__aeabi_l2d>
    49cc:	mov	r2, sl
    49d0:	str	r0, [r2, r6]!
    49d4:	add	r6, r6, #8
    49d8:	cmp	r6, #2048	; 0x800
    49dc:	str	r1, [r2, #4]
    49e0:	bne	49c0 <ReadDoubleData+0x1168>
    49e4:	ldr	r6, [sp, #12]
    49e8:	ldr	r2, [sp, #8]
    49ec:	add	r5, r7, r5
    49f0:	add	sl, sl, #2048	; 0x800
    49f4:	add	r1, r8, #2048	; 0x800
    49f8:	add	r0, r6, #256	; 0x100
    49fc:	cmp	r0, r2
    4a00:	blt	4998 <ReadDoubleData+0x1140>
    4a04:	ldr	r1, [sp, #4]
    4a08:	cmp	r0, r1
    4a0c:	bge	4b54 <ReadDoubleData+0x12fc>
    4a10:	sub	r7, r1, r0
    4a14:	ldr	r0, [sp, #20]
    4a18:	ldr	r1, [sp, #16]
    4a1c:	add	r4, sp, #72	; 0x48
    4a20:	mov	r2, r7
    4a24:	ldr	r3, [r0]
    4a28:	mov	r0, r4
    4a2c:	bl	18b8 <fread@plt>
    4a30:	add	r5, r0, r5
    4a34:	cmp	r7, #1
    4a38:	blt	4b54 <ReadDoubleData+0x12fc>
    4a3c:	ldr	r0, [sp, #8]
    4a40:	sub	r6, r0, r6
    4a44:	mov	r0, r4
    4a48:	bl	1b84 <Mat_int64Swap>
    4a4c:	bl	582ac <__aeabi_l2d>
    4a50:	strd	r0, [r8]
    4a54:	add	r8, r8, #8
    4a58:	subs	r6, r6, #1
    4a5c:	add	r4, r4, #8
    4a60:	bne	4a44 <ReadDoubleData+0x11ec>
    4a64:	b	4b54 <ReadDoubleData+0x12fc>
    4a68:	sub	r0, r6, #256	; 0x100
    4a6c:	mov	sl, r9
    4a70:	add	r1, r9, #2048	; 0x800
    4a74:	add	r4, sp, #72	; 0x48
    4a78:	mov	r5, #0
    4a7c:	str	r6, [sp, #4]
    4a80:	str	r0, [sp, #8]
    4a84:	mov	r0, #0
    4a88:	str	r0, [sp, #12]
    4a8c:	ldr	r0, [sp, #20]
    4a90:	mov	r8, r1
    4a94:	ldr	r1, [sp, #16]
    4a98:	mov	r2, #256	; 0x100
    4a9c:	ldr	r3, [r0]
    4aa0:	mov	r0, r4
    4aa4:	bl	18b8 <fread@plt>
    4aa8:	mov	r7, r0
    4aac:	mov	r6, #0
    4ab0:	add	r0, r4, r6
    4ab4:	bl	1bd4 <Mat_uint64Swap>
    4ab8:	bl	58298 <__aeabi_ul2d>
    4abc:	mov	r2, sl
    4ac0:	str	r0, [r2, r6]!
    4ac4:	add	r6, r6, #8
    4ac8:	cmp	r6, #2048	; 0x800
    4acc:	str	r1, [r2, #4]
    4ad0:	bne	4ab0 <ReadDoubleData+0x1258>
    4ad4:	ldr	r6, [sp, #12]
    4ad8:	ldr	r2, [sp, #8]
    4adc:	add	r5, r7, r5
    4ae0:	add	sl, sl, #2048	; 0x800
    4ae4:	add	r1, r8, #2048	; 0x800
    4ae8:	add	r0, r6, #256	; 0x100
    4aec:	cmp	r0, r2
    4af0:	blt	4a88 <ReadDoubleData+0x1230>
    4af4:	ldr	r1, [sp, #4]
    4af8:	cmp	r0, r1
    4afc:	bge	4b54 <ReadDoubleData+0x12fc>
    4b00:	sub	r7, r1, r0
    4b04:	ldr	r0, [sp, #20]
    4b08:	ldr	r1, [sp, #16]
    4b0c:	add	r4, sp, #72	; 0x48
    4b10:	mov	r2, r7
    4b14:	ldr	r3, [r0]
    4b18:	mov	r0, r4
    4b1c:	bl	18b8 <fread@plt>
    4b20:	add	r5, r0, r5
    4b24:	cmp	r7, #1
    4b28:	blt	4b54 <ReadDoubleData+0x12fc>
    4b2c:	ldr	r0, [sp, #8]
    4b30:	sub	r6, r0, r6
    4b34:	mov	r0, r4
    4b38:	bl	1bd4 <Mat_uint64Swap>
    4b3c:	bl	58298 <__aeabi_ul2d>
    4b40:	strd	r0, [r8]
    4b44:	add	r8, r8, #8
    4b48:	subs	r6, r6, #1
    4b4c:	add	r4, r4, #8
    4b50:	bne	4b34 <ReadDoubleData+0x12dc>
    4b54:	mov	sl, r5
    4b58:	ldr	r0, [sp, #16]
    4b5c:	mul	r4, sl, r0
    4b60:	b	3884 <ReadDoubleData+0x2c>
    4b64:	mov	sl, r8
    4b68:	b	4b58 <ReadDoubleData+0x1300>
    4b6c:	sub	r1, r6, #256	; 0x100
    4b70:	str	r6, [sp, #4]
    4b74:	add	r0, r9, #2048	; 0x800
    4b78:	mov	r2, #256	; 0x100
    4b7c:	add	r4, sp, #72	; 0x48
    4b80:	add	r6, sp, #32
    4b84:	mov	r7, r9
    4b88:	mov	sl, #0
    4b8c:	str	r9, [sp]
    4b90:	str	r1, [sp, #12]
    4b94:	mov	r1, #0
    4b98:	mov	r5, r0
    4b9c:	ldr	r0, [sp, #20]
    4ba0:	mov	r9, r1
    4ba4:	ldr	r1, [sp, #16]
    4ba8:	mov	r8, r2
    4bac:	mov	r2, #256	; 0x100
    4bb0:	ldr	r3, [r0]
    4bb4:	mov	r0, r4
    4bb8:	bl	18b8 <fread@plt>
    4bbc:	mov	r1, r7
    4bc0:	mov	r2, #0
    4bc4:	ldr	r3, [r4, r2]
    4bc8:	add	r2, r2, #4
    4bcc:	cmp	r2, #512	; 0x200
    4bd0:	str	r3, [sp, #32]
    4bd4:	vld1.32	{d16[0]}, [r6 :32]
    4bd8:	vmovl.s16	q0, d16
    4bdc:	vcvt.f64.s32	d17, s1
    4be0:	vcvt.f64.s32	d16, s0
    4be4:	vst1.64	{d16-d17}, [r1]!
    4be8:	bne	4bc4 <ReadDoubleData+0x136c>
    4bec:	ldr	r3, [sp, #12]
    4bf0:	add	r1, r9, #256	; 0x100
    4bf4:	add	sl, r0, sl
    4bf8:	add	r7, r7, #2048	; 0x800
    4bfc:	add	r0, r5, #2048	; 0x800
    4c00:	add	r2, r8, #256	; 0x100
    4c04:	cmp	r1, r3
    4c08:	blt	4b98 <ReadDoubleData+0x1340>
    4c0c:	ldr	r0, [sp, #4]
    4c10:	cmp	r1, r0
    4c14:	bge	4b58 <ReadDoubleData+0x1300>
    4c18:	sub	r6, r0, r1
    4c1c:	ldr	r0, [sp, #20]
    4c20:	ldr	r1, [sp, #16]
    4c24:	add	r4, sp, #72	; 0x48
    4c28:	mov	r2, r6
    4c2c:	ldr	r3, [r0]
    4c30:	mov	r0, r4
    4c34:	bl	18b8 <fread@plt>
    4c38:	add	sl, r0, sl
    4c3c:	cmp	r6, #1
    4c40:	blt	4b58 <ReadDoubleData+0x1300>
    4c44:	mov	r0, #0
    4c48:	beq	4c8c <ReadDoubleData+0x1434>
    4c4c:	ldr	r0, [sp, #12]
    4c50:	add	r2, sp, #28
    4c54:	sub	r0, r0, r9
    4c58:	bic	r1, r0, #1
    4c5c:	bic	r0, r6, #1
    4c60:	ldr	r3, [r4], #4
    4c64:	subs	r1, r1, #2
    4c68:	str	r3, [sp, #28]
    4c6c:	vld1.32	{d16[0]}, [r2 :32]
    4c70:	vmovl.s16	q0, d16
    4c74:	vcvt.f64.s32	d17, s1
    4c78:	vcvt.f64.s32	d16, s0
    4c7c:	vst1.64	{d16-d17}, [r5]!
    4c80:	bne	4c60 <ReadDoubleData+0x1408>
    4c84:	cmp	r6, r0
    4c88:	beq	4b58 <ReadDoubleData+0x1300>
    4c8c:	ldr	r3, [sp]
    4c90:	add	r2, r0, r8
    4c94:	add	r1, sp, #72	; 0x48
    4c98:	add	r1, r1, r0, lsl #1
    4c9c:	add	r2, r3, r2, lsl #3
    4ca0:	ldr	r3, [sp, #12]
    4ca4:	sub	r3, r3, r9
    4ca8:	sub	r0, r3, r0
    4cac:	ldrsh	r3, [r1], #2
    4cb0:	subs	r0, r0, #1
    4cb4:	vmov	s0, r3
    4cb8:	vcvt.f64.s32	d16, s0
    4cbc:	vstmia	r2!, {d16}
    4cc0:	bne	4cac <ReadDoubleData+0x1454>
    4cc4:	b	4b58 <ReadDoubleData+0x1300>
    4cc8:	sub	r1, r6, #256	; 0x100
    4ccc:	str	r6, [sp, #4]
    4cd0:	add	r0, r9, #2048	; 0x800
    4cd4:	mov	r2, #256	; 0x100
    4cd8:	add	r4, sp, #72	; 0x48
    4cdc:	add	r6, sp, #44	; 0x2c
    4ce0:	mov	r7, r9
    4ce4:	mov	sl, #0
    4ce8:	str	r9, [sp]
    4cec:	str	r1, [sp, #12]
    4cf0:	mov	r1, #0
    4cf4:	mov	r5, r0
    4cf8:	ldr	r0, [sp, #20]
    4cfc:	mov	r9, r1
    4d00:	ldr	r1, [sp, #16]
    4d04:	mov	r8, r2
    4d08:	mov	r2, #256	; 0x100
    4d0c:	ldr	r3, [r0]
    4d10:	mov	r0, r4
    4d14:	bl	18b8 <fread@plt>
    4d18:	mov	r1, r7
    4d1c:	mov	r2, #0
    4d20:	ldr	r3, [r4, r2]
    4d24:	add	r2, r2, #4
    4d28:	cmp	r2, #512	; 0x200
    4d2c:	str	r3, [sp, #44]	; 0x2c
    4d30:	vld1.32	{d16[0]}, [r6 :32]
    4d34:	vmovl.u16	q0, d16
    4d38:	vcvt.f64.u32	d17, s1
    4d3c:	vcvt.f64.u32	d16, s0
    4d40:	vst1.64	{d16-d17}, [r1]!
    4d44:	bne	4d20 <ReadDoubleData+0x14c8>
    4d48:	ldr	r3, [sp, #12]
    4d4c:	add	r1, r9, #256	; 0x100
    4d50:	add	sl, r0, sl
    4d54:	add	r7, r7, #2048	; 0x800
    4d58:	add	r0, r5, #2048	; 0x800
    4d5c:	add	r2, r8, #256	; 0x100
    4d60:	cmp	r1, r3
    4d64:	blt	4cf4 <ReadDoubleData+0x149c>
    4d68:	ldr	r0, [sp, #4]
    4d6c:	cmp	r1, r0
    4d70:	bge	4b58 <ReadDoubleData+0x1300>
    4d74:	sub	r6, r0, r1
    4d78:	ldr	r0, [sp, #20]
    4d7c:	ldr	r1, [sp, #16]
    4d80:	add	r4, sp, #72	; 0x48
    4d84:	mov	r2, r6
    4d88:	ldr	r3, [r0]
    4d8c:	mov	r0, r4
    4d90:	bl	18b8 <fread@plt>
    4d94:	add	sl, r0, sl
    4d98:	cmp	r6, #1
    4d9c:	blt	4b58 <ReadDoubleData+0x1300>
    4da0:	mov	r0, #0
    4da4:	beq	4de8 <ReadDoubleData+0x1590>
    4da8:	ldr	r0, [sp, #12]
    4dac:	add	r2, sp, #40	; 0x28
    4db0:	sub	r0, r0, r9
    4db4:	bic	r1, r0, #1
    4db8:	bic	r0, r6, #1
    4dbc:	ldr	r3, [r4], #4
    4dc0:	subs	r1, r1, #2
    4dc4:	str	r3, [sp, #40]	; 0x28
    4dc8:	vld1.32	{d16[0]}, [r2 :32]
    4dcc:	vmovl.u16	q0, d16
    4dd0:	vcvt.f64.u32	d17, s1
    4dd4:	vcvt.f64.u32	d16, s0
    4dd8:	vst1.64	{d16-d17}, [r5]!
    4ddc:	bne	4dbc <ReadDoubleData+0x1564>
    4de0:	cmp	r6, r0
    4de4:	beq	4b58 <ReadDoubleData+0x1300>
    4de8:	ldr	r3, [sp]
    4dec:	add	r2, r0, r8
    4df0:	add	r1, sp, #72	; 0x48
    4df4:	add	r1, r1, r0, lsl #1
    4df8:	add	r2, r3, r2, lsl #3
    4dfc:	ldr	r3, [sp, #12]
    4e00:	sub	r3, r3, r9
    4e04:	sub	r0, r3, r0
    4e08:	ldrh	r3, [r1], #2
    4e0c:	subs	r0, r0, #1
    4e10:	vmov	s0, r3
    4e14:	vcvt.f64.u32	d16, s0
    4e18:	vstmia	r2!, {d16}
    4e1c:	bne	4e08 <ReadDoubleData+0x15b0>
    4e20:	b	4b58 <ReadDoubleData+0x1300>
    4e24:	sub	r1, r6, #256	; 0x100
    4e28:	mov	r8, r6
    4e2c:	add	r0, r9, #2048	; 0x800
    4e30:	mov	r2, #256	; 0x100
    4e34:	add	r4, sp, #72	; 0x48
    4e38:	mov	r6, r9
    4e3c:	mov	sl, #0
    4e40:	str	r9, [sp]
    4e44:	str	r1, [sp, #12]
    4e48:	mov	r1, #0
    4e4c:	mov	r5, r0
    4e50:	ldr	r0, [sp, #20]
    4e54:	mov	r9, r1
    4e58:	ldr	r1, [sp, #16]
    4e5c:	mov	r7, r2
    4e60:	mov	r2, #256	; 0x100
    4e64:	ldr	r3, [r0]
    4e68:	mov	r0, r4
    4e6c:	bl	18b8 <fread@plt>
    4e70:	mov	r1, r6
    4e74:	mov	r2, #0
    4e78:	add	r3, r4, r2
    4e7c:	add	r2, r2, #8
    4e80:	vldr	d0, [r3]
    4e84:	cmp	r2, #1024	; 0x400
    4e88:	vcvt.f64.s32	d17, s1
    4e8c:	vcvt.f64.s32	d16, s0
    4e90:	vst1.64	{d16-d17}, [r1]!
    4e94:	bne	4e78 <ReadDoubleData+0x1620>
    4e98:	ldr	r3, [sp, #12]
    4e9c:	add	r1, r9, #256	; 0x100
    4ea0:	add	sl, r0, sl
    4ea4:	add	r6, r6, #2048	; 0x800
    4ea8:	add	r0, r5, #2048	; 0x800
    4eac:	add	r2, r7, #256	; 0x100
    4eb0:	cmp	r1, r3
    4eb4:	blt	4e4c <ReadDoubleData+0x15f4>
    4eb8:	cmp	r1, r8
    4ebc:	bge	4b58 <ReadDoubleData+0x1300>
    4ec0:	ldr	r0, [sp, #20]
    4ec4:	sub	r8, r8, r1
    4ec8:	ldr	r1, [sp, #16]
    4ecc:	add	r4, sp, #72	; 0x48
    4ed0:	mov	r2, r8
    4ed4:	ldr	r3, [r0]
    4ed8:	mov	r0, r4
    4edc:	bl	18b8 <fread@plt>
    4ee0:	add	sl, r0, sl
    4ee4:	cmp	r8, #1
    4ee8:	blt	4b58 <ReadDoubleData+0x1300>
    4eec:	mov	r0, #0
    4ef0:	beq	4f24 <ReadDoubleData+0x16cc>
    4ef4:	ldr	r0, [sp, #12]
    4ef8:	sub	r0, r0, r9
    4efc:	bic	r1, r0, #1
    4f00:	bic	r0, r8, #1
    4f04:	vld1.32	{d0}, [r4]!
    4f08:	subs	r1, r1, #2
    4f0c:	vcvt.f64.s32	d17, s1
    4f10:	vcvt.f64.s32	d16, s0
    4f14:	vst1.64	{d16-d17}, [r5]!
    4f18:	bne	4f04 <ReadDoubleData+0x16ac>
    4f1c:	cmp	r8, r0
    4f20:	beq	4b58 <ReadDoubleData+0x1300>
    4f24:	ldr	r3, [sp]
    4f28:	add	r2, r0, r7
    4f2c:	add	r1, sp, #72	; 0x48
    4f30:	add	r1, r1, r0, lsl #2
    4f34:	add	r2, r3, r2, lsl #3
    4f38:	ldr	r3, [sp, #12]
    4f3c:	sub	r3, r3, r9
    4f40:	sub	r0, r3, r0
    4f44:	ldr	r3, [r1], #4
    4f48:	subs	r0, r0, #1
    4f4c:	vmov	s0, r3
    4f50:	vcvt.f64.s32	d16, s0
    4f54:	vstmia	r2!, {d16}
    4f58:	bne	4f44 <ReadDoubleData+0x16ec>
    4f5c:	b	4b58 <ReadDoubleData+0x1300>
    4f60:	sub	r1, r6, #256	; 0x100
    4f64:	mov	r8, r6
    4f68:	add	r0, r9, #2048	; 0x800
    4f6c:	mov	r2, #256	; 0x100
    4f70:	add	r4, sp, #72	; 0x48
    4f74:	mov	r6, r9
    4f78:	mov	sl, #0
    4f7c:	str	r9, [sp]
    4f80:	str	r1, [sp, #12]
    4f84:	mov	r1, #0
    4f88:	mov	r5, r0
    4f8c:	ldr	r0, [sp, #20]
    4f90:	mov	r9, r1
    4f94:	ldr	r1, [sp, #16]
    4f98:	mov	r7, r2
    4f9c:	mov	r2, #256	; 0x100
    4fa0:	ldr	r3, [r0]
    4fa4:	mov	r0, r4
    4fa8:	bl	18b8 <fread@plt>
    4fac:	mov	r1, r6
    4fb0:	mov	r2, #0
    4fb4:	add	r3, r4, r2
    4fb8:	add	r2, r2, #8
    4fbc:	vldr	d0, [r3]
    4fc0:	cmp	r2, #1024	; 0x400
    4fc4:	vcvt.f64.u32	d17, s1
    4fc8:	vcvt.f64.u32	d16, s0
    4fcc:	vst1.64	{d16-d17}, [r1]!
    4fd0:	bne	4fb4 <ReadDoubleData+0x175c>
    4fd4:	ldr	r3, [sp, #12]
    4fd8:	add	r1, r9, #256	; 0x100
    4fdc:	add	sl, r0, sl
    4fe0:	add	r6, r6, #2048	; 0x800
    4fe4:	add	r0, r5, #2048	; 0x800
    4fe8:	add	r2, r7, #256	; 0x100
    4fec:	cmp	r1, r3
    4ff0:	blt	4f88 <ReadDoubleData+0x1730>
    4ff4:	cmp	r1, r8
    4ff8:	bge	4b58 <ReadDoubleData+0x1300>
    4ffc:	ldr	r0, [sp, #20]
    5000:	sub	r8, r8, r1
    5004:	ldr	r1, [sp, #16]
    5008:	add	r4, sp, #72	; 0x48
    500c:	mov	r2, r8
    5010:	ldr	r3, [r0]
    5014:	mov	r0, r4
    5018:	bl	18b8 <fread@plt>
    501c:	add	sl, r0, sl
    5020:	cmp	r8, #1
    5024:	blt	4b58 <ReadDoubleData+0x1300>
    5028:	mov	r0, #0
    502c:	beq	5060 <ReadDoubleData+0x1808>
    5030:	ldr	r0, [sp, #12]
    5034:	sub	r0, r0, r9
    5038:	bic	r1, r0, #1
    503c:	bic	r0, r8, #1
    5040:	vld1.32	{d0}, [r4]!
    5044:	subs	r1, r1, #2
    5048:	vcvt.f64.u32	d17, s1
    504c:	vcvt.f64.u32	d16, s0
    5050:	vst1.64	{d16-d17}, [r5]!
    5054:	bne	5040 <ReadDoubleData+0x17e8>
    5058:	cmp	r8, r0
    505c:	beq	4b58 <ReadDoubleData+0x1300>
    5060:	ldr	r3, [sp]
    5064:	add	r2, r0, r7
    5068:	add	r1, sp, #72	; 0x48
    506c:	add	r1, r1, r0, lsl #2
    5070:	add	r2, r3, r2, lsl #3
    5074:	ldr	r3, [sp, #12]
    5078:	sub	r3, r3, r9
    507c:	sub	r0, r3, r0
    5080:	ldr	r3, [r1], #4
    5084:	subs	r0, r0, #1
    5088:	vmov	s0, r3
    508c:	vcvt.f64.u32	d16, s0
    5090:	vstmia	r2!, {d16}
    5094:	bne	5080 <ReadDoubleData+0x1828>
    5098:	b	4b58 <ReadDoubleData+0x1300>
    509c:	sub	r1, r6, #256	; 0x100
    50a0:	mov	r8, r6
    50a4:	add	r0, r9, #2048	; 0x800
    50a8:	mov	r2, #256	; 0x100
    50ac:	add	r4, sp, #72	; 0x48
    50b0:	mov	r6, r9
    50b4:	mov	sl, #0
    50b8:	str	r9, [sp]
    50bc:	str	r1, [sp, #12]
    50c0:	mov	r1, #0
    50c4:	mov	r5, r0
    50c8:	ldr	r0, [sp, #20]
    50cc:	mov	r9, r1
    50d0:	ldr	r1, [sp, #16]
    50d4:	mov	r7, r2
    50d8:	mov	r2, #256	; 0x100
    50dc:	ldr	r3, [r0]
    50e0:	mov	r0, r4
    50e4:	bl	18b8 <fread@plt>
    50e8:	mov	r1, r6
    50ec:	mov	r2, #0
    50f0:	add	r3, r4, r2
    50f4:	add	r2, r2, #8
    50f8:	vldr	d0, [r3]
    50fc:	cmp	r2, #1024	; 0x400
    5100:	vcvt.f64.f32	d17, s1
    5104:	vcvt.f64.f32	d16, s0
    5108:	vst1.64	{d16-d17}, [r1]!
    510c:	bne	50f0 <ReadDoubleData+0x1898>
    5110:	ldr	r3, [sp, #12]
    5114:	add	r1, r9, #256	; 0x100
    5118:	add	sl, r0, sl
    511c:	add	r6, r6, #2048	; 0x800
    5120:	add	r0, r5, #2048	; 0x800
    5124:	add	r2, r7, #256	; 0x100
    5128:	cmp	r1, r3
    512c:	blt	50c4 <ReadDoubleData+0x186c>
    5130:	cmp	r1, r8
    5134:	bge	4b58 <ReadDoubleData+0x1300>
    5138:	ldr	r0, [sp, #20]
    513c:	sub	r8, r8, r1
    5140:	ldr	r1, [sp, #16]
    5144:	add	r4, sp, #72	; 0x48
    5148:	mov	r2, r8
    514c:	ldr	r3, [r0]
    5150:	mov	r0, r4
    5154:	bl	18b8 <fread@plt>
    5158:	add	sl, r0, sl
    515c:	cmp	r8, #1
    5160:	blt	4b58 <ReadDoubleData+0x1300>
    5164:	mov	r0, #0
    5168:	beq	519c <ReadDoubleData+0x1944>
    516c:	ldr	r0, [sp, #12]
    5170:	sub	r0, r0, r9
    5174:	bic	r1, r0, #1
    5178:	bic	r0, r8, #1
    517c:	vld1.32	{d0}, [r4]!
    5180:	subs	r1, r1, #2
    5184:	vcvt.f64.f32	d17, s1
    5188:	vcvt.f64.f32	d16, s0
    518c:	vst1.64	{d16-d17}, [r5]!
    5190:	bne	517c <ReadDoubleData+0x1924>
    5194:	cmp	r8, r0
    5198:	beq	4b58 <ReadDoubleData+0x1300>
    519c:	ldr	r3, [sp]
    51a0:	add	r2, r0, r7
    51a4:	add	r1, sp, #72	; 0x48
    51a8:	add	r1, r1, r0, lsl #2
    51ac:	add	r2, r3, r2, lsl #3
    51b0:	ldr	r3, [sp, #12]
    51b4:	sub	r3, r3, r9
    51b8:	sub	r0, r3, r0
    51bc:	vldr	s0, [r1]
    51c0:	subs	r0, r0, #1
    51c4:	add	r1, r1, #4
    51c8:	vcvt.f64.f32	d16, s0
    51cc:	vstmia	r2!, {d16}
    51d0:	bne	51bc <ReadDoubleData+0x1964>
    51d4:	b	4b58 <ReadDoubleData+0x1300>
    51d8:	sub	r1, r6, #256	; 0x100
    51dc:	str	r6, [sp, #4]
    51e0:	add	r0, r9, #2048	; 0x800
    51e4:	mov	r2, #256	; 0x100
    51e8:	add	r4, sp, #72	; 0x48
    51ec:	mov	r6, r9
    51f0:	mov	sl, #0
    51f4:	str	r9, [sp]
    51f8:	str	r1, [sp, #8]
    51fc:	mov	r1, #0
    5200:	mov	r9, r0
    5204:	ldr	r0, [sp, #20]
    5208:	mov	r8, r1
    520c:	ldr	r1, [sp, #16]
    5210:	str	r2, [sp, #12]
    5214:	mov	r2, #256	; 0x100
    5218:	ldr	r3, [r0]
    521c:	mov	r0, r4
    5220:	bl	18b8 <fread@plt>
    5224:	mov	r5, r0
    5228:	mov	r7, #0
    522c:	add	r0, r4, r7
    5230:	vld1.64	{d8-d9}, [r0]
    5234:	vmov.32	r0, d9[0]
    5238:	vmov.32	r1, d9[1]
    523c:	bl	582ac <__aeabi_l2d>
    5240:	vmov.32	r2, d8[0]
    5244:	vmov.32	r3, d8[1]
    5248:	vmov	d9, r0, r1
    524c:	mov	r0, r2
    5250:	mov	r1, r3
    5254:	bl	582ac <__aeabi_l2d>
    5258:	vmov	d8, r0, r1
    525c:	add	r0, r6, r7
    5260:	add	r7, r7, #16
    5264:	cmp	r7, #2048	; 0x800
    5268:	vst1.64	{d8-d9}, [r0]
    526c:	bne	522c <ReadDoubleData+0x19d4>
    5270:	ldr	r1, [sp, #12]
    5274:	ldr	r3, [sp, #8]
    5278:	add	sl, r5, sl
    527c:	add	r6, r6, #2048	; 0x800
    5280:	add	r0, r9, #2048	; 0x800
    5284:	add	r2, r1, #256	; 0x100
    5288:	add	r1, r8, #256	; 0x100
    528c:	cmp	r1, r3
    5290:	blt	5200 <ReadDoubleData+0x19a8>
    5294:	mov	r7, r8
    5298:	ldr	r8, [sp, #4]
    529c:	cmp	r1, r8
    52a0:	bge	4b58 <ReadDoubleData+0x1300>
    52a4:	ldr	r0, [sp, #20]
    52a8:	sub	r8, r8, r1
    52ac:	ldr	r1, [sp, #16]
    52b0:	add	r4, sp, #72	; 0x48
    52b4:	mov	r2, r8
    52b8:	ldr	r3, [r0]
    52bc:	mov	r0, r4
    52c0:	bl	18b8 <fread@plt>
    52c4:	add	sl, r0, sl
    52c8:	cmp	r8, #1
    52cc:	blt	4b58 <ReadDoubleData+0x1300>
    52d0:	mov	r5, #0
    52d4:	beq	5328 <ReadDoubleData+0x1ad0>
    52d8:	ldr	r0, [sp, #8]
    52dc:	bic	r5, r8, #1
    52e0:	sub	r0, r0, r7
    52e4:	bic	r6, r0, #1
    52e8:	vld1.64	{d8-d9}, [r4]!
    52ec:	vmov.32	r0, d9[0]
    52f0:	vmov.32	r1, d9[1]
    52f4:	bl	582ac <__aeabi_l2d>
    52f8:	vmov.32	r2, d8[0]
    52fc:	vmov.32	r3, d8[1]
    5300:	vmov	d9, r0, r1
    5304:	mov	r0, r2
    5308:	mov	r1, r3
    530c:	bl	582ac <__aeabi_l2d>
    5310:	vmov	d8, r0, r1
    5314:	subs	r6, r6, #2
    5318:	vst1.64	{d8-d9}, [r9]!
    531c:	bne	52e8 <ReadDoubleData+0x1a90>
    5320:	cmp	r8, r5
    5324:	beq	4b58 <ReadDoubleData+0x1300>
    5328:	add	r0, sp, #72	; 0x48
    532c:	ldr	r1, [sp]
    5330:	add	r4, r0, r5, lsl #3
    5334:	ldr	r0, [sp, #12]
    5338:	add	r0, r5, r0
    533c:	add	r6, r1, r0, lsl #3
    5340:	ldr	r0, [sp, #8]
    5344:	sub	r0, r0, r7
    5348:	sub	r5, r0, r5
    534c:	ldrd	r0, [r4]
    5350:	bl	582ac <__aeabi_l2d>
    5354:	strd	r0, [r6]
    5358:	add	r6, r6, #8
    535c:	subs	r5, r5, #1
    5360:	add	r4, r4, #8
    5364:	bne	534c <ReadDoubleData+0x1af4>
    5368:	b	4b58 <ReadDoubleData+0x1300>
    536c:	sub	r1, r6, #256	; 0x100
    5370:	str	r6, [sp, #4]
    5374:	add	r0, r9, #2048	; 0x800
    5378:	mov	r2, #256	; 0x100
    537c:	add	r4, sp, #72	; 0x48
    5380:	mov	r6, r9
    5384:	mov	sl, #0
    5388:	str	r9, [sp]
    538c:	str	r1, [sp, #8]
    5390:	mov	r1, #0
    5394:	mov	r9, r0
    5398:	ldr	r0, [sp, #20]
    539c:	mov	r8, r1
    53a0:	ldr	r1, [sp, #16]
    53a4:	str	r2, [sp, #12]
    53a8:	mov	r2, #256	; 0x100
    53ac:	ldr	r3, [r0]
    53b0:	mov	r0, r4
    53b4:	bl	18b8 <fread@plt>
    53b8:	mov	r5, r0
    53bc:	mov	r7, #0
    53c0:	add	r0, r4, r7
    53c4:	vld1.64	{d8-d9}, [r0]
    53c8:	vmov.32	r0, d9[0]
    53cc:	vmov.32	r1, d9[1]
    53d0:	bl	58298 <__aeabi_ul2d>
    53d4:	vmov.32	r2, d8[0]
    53d8:	vmov.32	r3, d8[1]
    53dc:	vmov	d9, r0, r1
    53e0:	mov	r0, r2
    53e4:	mov	r1, r3
    53e8:	bl	58298 <__aeabi_ul2d>
    53ec:	vmov	d8, r0, r1
    53f0:	add	r0, r6, r7
    53f4:	add	r7, r7, #16
    53f8:	cmp	r7, #2048	; 0x800
    53fc:	vst1.64	{d8-d9}, [r0]
    5400:	bne	53c0 <ReadDoubleData+0x1b68>
    5404:	ldr	r1, [sp, #12]
    5408:	ldr	r3, [sp, #8]
    540c:	add	sl, r5, sl
    5410:	add	r6, r6, #2048	; 0x800
    5414:	add	r0, r9, #2048	; 0x800
    5418:	add	r2, r1, #256	; 0x100
    541c:	add	r1, r8, #256	; 0x100
    5420:	cmp	r1, r3
    5424:	blt	5394 <ReadDoubleData+0x1b3c>
    5428:	mov	r7, r8
    542c:	ldr	r8, [sp, #4]
    5430:	cmp	r1, r8
    5434:	bge	4b58 <ReadDoubleData+0x1300>
    5438:	ldr	r0, [sp, #20]
    543c:	sub	r8, r8, r1
    5440:	ldr	r1, [sp, #16]
    5444:	add	r4, sp, #72	; 0x48
    5448:	mov	r2, r8
    544c:	ldr	r3, [r0]
    5450:	mov	r0, r4
    5454:	bl	18b8 <fread@plt>
    5458:	add	sl, r0, sl
    545c:	cmp	r8, #1
    5460:	blt	4b58 <ReadDoubleData+0x1300>
    5464:	mov	r5, #0
    5468:	beq	54bc <ReadDoubleData+0x1c64>
    546c:	ldr	r0, [sp, #8]
    5470:	bic	r5, r8, #1
    5474:	sub	r0, r0, r7
    5478:	bic	r6, r0, #1
    547c:	vld1.64	{d8-d9}, [r4]!
    5480:	vmov.32	r0, d9[0]
    5484:	vmov.32	r1, d9[1]
    5488:	bl	58298 <__aeabi_ul2d>
    548c:	vmov.32	r2, d8[0]
    5490:	vmov.32	r3, d8[1]
    5494:	vmov	d9, r0, r1
    5498:	mov	r0, r2
    549c:	mov	r1, r3
    54a0:	bl	58298 <__aeabi_ul2d>
    54a4:	vmov	d8, r0, r1
    54a8:	subs	r6, r6, #2
    54ac:	vst1.64	{d8-d9}, [r9]!
    54b0:	bne	547c <ReadDoubleData+0x1c24>
    54b4:	cmp	r8, r5
    54b8:	beq	4b58 <ReadDoubleData+0x1300>
    54bc:	add	r0, sp, #72	; 0x48
    54c0:	ldr	r1, [sp]
    54c4:	add	r4, r0, r5, lsl #3
    54c8:	ldr	r0, [sp, #12]
    54cc:	add	r0, r5, r0
    54d0:	add	r6, r1, r0, lsl #3
    54d4:	ldr	r0, [sp, #8]
    54d8:	sub	r0, r0, r7
    54dc:	sub	r5, r0, r5
    54e0:	ldrd	r0, [r4]
    54e4:	bl	58298 <__aeabi_ul2d>
    54e8:	strd	r0, [r6]
    54ec:	add	r6, r6, #8
    54f0:	subs	r5, r5, #1
    54f4:	add	r4, r4, #8
    54f8:	bne	54e0 <ReadDoubleData+0x1c88>
    54fc:	b	4b58 <ReadDoubleData+0x1300>

00005500 <ReadCompressedDoubleData>:
    5500:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5504:	add	fp, sp, #28
    5508:	sub	sp, sp, #4
    550c:	vpush	{d8-d9}
    5510:	sub	sp, sp, #1056	; 0x420
    5514:	str	r0, [sp, #20]
    5518:	mov	r0, r3
    551c:	mov	r5, r3
    5520:	mov	r9, r2
    5524:	str	r1, [sp, #16]
    5528:	bl	1924 <Mat_SizeOf@plt>
    552c:	mov	r2, r0
    5530:	sub	r0, r5, #1
    5534:	mov	sl, #0
    5538:	cmp	r0, #12
    553c:	bhi	6bf4 <ReadCompressedDoubleData+0x16f4>
    5540:	add	r1, pc, #8
    5544:	ldr	r6, [fp, #8]
    5548:	ldr	r0, [r1, r0, lsl #2]
    554c:	add	pc, r1, r0
    5550:	.word	0x00000034
    5554:	.word	0x000000d0
    5558:	.word	0x0000016c
    555c:	.word	0x000001d0
    5560:	.word	0x00000234
    5564:	.word	0x00000298
    5568:	.word	0x000002fc
    556c:	.word	0x000016a4
    5570:	.word	0x0000035c
    5574:	.word	0x000016a4
    5578:	.word	0x000016a4
    557c:	.word	0x000003a0
    5580:	.word	0x00000400
    5584:	cmp	r6, #1024	; 0x400
    5588:	bgt	59b0 <ReadCompressedDoubleData+0x4b0>
    558c:	ldr	r0, [sp, #20]
    5590:	ldr	r1, [sp, #16]
    5594:	mul	sl, r2, r6
    5598:	add	r5, sp, #24
    559c:	mov	r2, r5
    55a0:	mov	r3, sl
    55a4:	bl	32b8 <InflateData>
    55a8:	cmp	r6, #1
    55ac:	blt	6bf4 <ReadCompressedDoubleData+0x16f4>
    55b0:	mov	r0, #0
    55b4:	beq	55f0 <ReadCompressedDoubleData+0xf0>
    55b8:	bic	r0, r6, #1
    55bc:	mov	r2, r9
    55c0:	mov	r1, r0
    55c4:	vld1.16	{d16[0]}, [r5 :16]
    55c8:	subs	r1, r1, #2
    55cc:	add	r5, r5, #2
    55d0:	vmovl.s8	q8, d16
    55d4:	vmovl.s16	q0, d16
    55d8:	vcvt.f64.s32	d17, s1
    55dc:	vcvt.f64.s32	d16, s0
    55e0:	vst1.64	{d16-d17}, [r2]!
    55e4:	bne	55c4 <ReadCompressedDoubleData+0xc4>
    55e8:	cmp	r0, r6
    55ec:	beq	6bf4 <ReadCompressedDoubleData+0x16f4>
    55f0:	add	r3, sp, #24
    55f4:	sub	r1, r6, r0
    55f8:	add	r2, r9, r0, lsl #3
    55fc:	add	r0, r3, r0
    5600:	ldrsb	r3, [r0], #1
    5604:	subs	r1, r1, #1
    5608:	vmov	s0, r3
    560c:	vcvt.f64.s32	d16, s0
    5610:	vstr	d16, [r2]
    5614:	add	r2, r2, #8
    5618:	bne	5600 <ReadCompressedDoubleData+0x100>
    561c:	b	6bf4 <ReadCompressedDoubleData+0x16f4>
    5620:	cmp	r6, #1024	; 0x400
    5624:	bgt	5aec <ReadCompressedDoubleData+0x5ec>
    5628:	ldr	r0, [sp, #20]
    562c:	ldr	r1, [sp, #16]
    5630:	mul	sl, r2, r6
    5634:	add	r5, sp, #24
    5638:	mov	r2, r5
    563c:	mov	r3, sl
    5640:	bl	32b8 <InflateData>
    5644:	cmp	r6, #1
    5648:	blt	6bf4 <ReadCompressedDoubleData+0x16f4>
    564c:	mov	r0, #0
    5650:	beq	568c <ReadCompressedDoubleData+0x18c>
    5654:	bic	r0, r6, #1
    5658:	mov	r2, r9
    565c:	mov	r1, r0
    5660:	vld1.16	{d16[0]}, [r5 :16]
    5664:	subs	r1, r1, #2
    5668:	add	r5, r5, #2
    566c:	vmovl.u8	q8, d16
    5670:	vmovl.u16	q0, d16
    5674:	vcvt.f64.u32	d17, s1
    5678:	vcvt.f64.u32	d16, s0
    567c:	vst1.64	{d16-d17}, [r2]!
    5680:	bne	5660 <ReadCompressedDoubleData+0x160>
    5684:	cmp	r0, r6
    5688:	beq	6bf4 <ReadCompressedDoubleData+0x16f4>
    568c:	add	r3, sp, #24
    5690:	sub	r1, r6, r0
    5694:	add	r2, r9, r0, lsl #3
    5698:	add	r0, r3, r0
    569c:	ldrb	r3, [r0], #1
    56a0:	subs	r1, r1, #1
    56a4:	vmov	s0, r3
    56a8:	vcvt.f64.u32	d16, s0
    56ac:	vstr	d16, [r2]
    56b0:	add	r2, r2, #8
    56b4:	bne	569c <ReadCompressedDoubleData+0x19c>
    56b8:	b	6bf4 <ReadCompressedDoubleData+0x16f4>
    56bc:	ldr	r0, [sp, #20]
    56c0:	ldr	r0, [r0, #20]
    56c4:	cmp	r0, #0
    56c8:	beq	5c28 <ReadCompressedDoubleData+0x728>
    56cc:	cmp	r6, #512	; 0x200
    56d0:	bgt	6068 <ReadCompressedDoubleData+0xb68>
    56d4:	ldr	r0, [sp, #20]
    56d8:	ldr	r1, [sp, #16]
    56dc:	mul	sl, r2, r6
    56e0:	add	r5, sp, #24
    56e4:	mov	r2, r5
    56e8:	mov	r3, sl
    56ec:	bl	32b8 <InflateData>
    56f0:	cmp	r6, #1
    56f4:	blt	6bf4 <ReadCompressedDoubleData+0x16f4>
    56f8:	mov	r0, r5
    56fc:	bl	1c18 <Mat_int16Swap>
    5700:	vmov	s0, r0
    5704:	subs	r6, r6, #1
    5708:	add	r5, r5, #2
    570c:	vcvt.f64.s32	d16, s0
    5710:	vstr	d16, [r9]
    5714:	add	r9, r9, #8
    5718:	bne	56f8 <ReadCompressedDoubleData+0x1f8>
    571c:	b	6bf4 <ReadCompressedDoubleData+0x16f4>
    5720:	ldr	r0, [sp, #20]
    5724:	ldr	r0, [r0, #20]
    5728:	cmp	r0, #0
    572c:	beq	5cc0 <ReadCompressedDoubleData+0x7c0>
    5730:	cmp	r6, #512	; 0x200
    5734:	bgt	613c <ReadCompressedDoubleData+0xc3c>
    5738:	ldr	r0, [sp, #20]
    573c:	ldr	r1, [sp, #16]
    5740:	mul	sl, r2, r6
    5744:	add	r5, sp, #24
    5748:	mov	r2, r5
    574c:	mov	r3, sl
    5750:	bl	32b8 <InflateData>
    5754:	cmp	r6, #1
    5758:	blt	6bf4 <ReadCompressedDoubleData+0x16f4>
    575c:	mov	r0, r5
    5760:	bl	1c2c <Mat_uint16Swap>
    5764:	vmov	s0, r0
    5768:	subs	r6, r6, #1
    576c:	add	r5, r5, #2
    5770:	vcvt.f64.u32	d16, s0
    5774:	vstr	d16, [r9]
    5778:	add	r9, r9, #8
    577c:	bne	575c <ReadCompressedDoubleData+0x25c>
    5780:	b	6bf4 <ReadCompressedDoubleData+0x16f4>
    5784:	ldr	r0, [sp, #20]
    5788:	ldr	r0, [r0, #20]
    578c:	cmp	r0, #0
    5790:	beq	5d58 <ReadCompressedDoubleData+0x858>
    5794:	cmp	r6, #256	; 0x100
    5798:	bgt	6210 <ReadCompressedDoubleData+0xd10>
    579c:	ldr	r0, [sp, #20]
    57a0:	ldr	r1, [sp, #16]
    57a4:	mul	sl, r2, r6
    57a8:	add	r5, sp, #24
    57ac:	mov	r2, r5
    57b0:	mov	r3, sl
    57b4:	bl	32b8 <InflateData>
    57b8:	cmp	r6, #1
    57bc:	blt	6bf4 <ReadCompressedDoubleData+0x16f4>
    57c0:	mov	r0, r5
    57c4:	bl	1bf0 <Mat_int32Swap>
    57c8:	vmov	s0, r0
    57cc:	subs	r6, r6, #1
    57d0:	add	r5, r5, #4
    57d4:	vcvt.f64.s32	d16, s0
    57d8:	vstr	d16, [r9]
    57dc:	add	r9, r9, #8
    57e0:	bne	57c0 <ReadCompressedDoubleData+0x2c0>
    57e4:	b	6bf4 <ReadCompressedDoubleData+0x16f4>
    57e8:	ldr	r0, [sp, #20]
    57ec:	ldr	r0, [r0, #20]
    57f0:	cmp	r0, #0
    57f4:	beq	5de8 <ReadCompressedDoubleData+0x8e8>
    57f8:	cmp	r6, #256	; 0x100
    57fc:	bgt	62e4 <ReadCompressedDoubleData+0xde4>
    5800:	ldr	r0, [sp, #20]
    5804:	ldr	r1, [sp, #16]
    5808:	mul	sl, r2, r6
    580c:	add	r5, sp, #24
    5810:	mov	r2, r5
    5814:	mov	r3, sl
    5818:	bl	32b8 <InflateData>
    581c:	cmp	r6, #1
    5820:	blt	6bf4 <ReadCompressedDoubleData+0x16f4>
    5824:	mov	r0, r5
    5828:	bl	1c04 <Mat_uint32Swap>
    582c:	vmov	s0, r0
    5830:	subs	r6, r6, #1
    5834:	add	r5, r5, #4
    5838:	vcvt.f64.u32	d16, s0
    583c:	vstr	d16, [r9]
    5840:	add	r9, r9, #8
    5844:	bne	5824 <ReadCompressedDoubleData+0x324>
    5848:	b	6bf4 <ReadCompressedDoubleData+0x16f4>
    584c:	ldr	r0, [sp, #20]
    5850:	ldr	r0, [r0, #20]
    5854:	cmp	r0, #0
    5858:	beq	5e78 <ReadCompressedDoubleData+0x978>
    585c:	cmp	r6, #256	; 0x100
    5860:	bgt	63b8 <ReadCompressedDoubleData+0xeb8>
    5864:	ldr	r0, [sp, #20]
    5868:	ldr	r1, [sp, #16]
    586c:	mul	sl, r2, r6
    5870:	add	r5, sp, #24
    5874:	mov	r2, r5
    5878:	mov	r3, sl
    587c:	bl	32b8 <InflateData>
    5880:	cmp	r6, #1
    5884:	blt	6bf4 <ReadCompressedDoubleData+0x16f4>
    5888:	mov	r0, r5
    588c:	bl	1c44 <Mat_floatSwap>
    5890:	vcvt.f64.f32	d16, s0
    5894:	subs	r6, r6, #1
    5898:	add	r5, r5, #4
    589c:	vstr	d16, [r9]
    58a0:	add	r9, r9, #8
    58a4:	bne	5888 <ReadCompressedDoubleData+0x388>
    58a8:	b	6bf4 <ReadCompressedDoubleData+0x16f4>
    58ac:	ldr	r0, [sp, #20]
    58b0:	ldr	r1, [sp, #16]
    58b4:	mul	sl, r2, r6
    58b8:	mov	r2, r9
    58bc:	mov	r3, sl
    58c0:	ldr	r4, [r0, #20]
    58c4:	bl	32b8 <InflateData>
    58c8:	cmp	r4, #0
    58cc:	beq	6bf4 <ReadCompressedDoubleData+0x16f4>
    58d0:	cmp	r6, #1
    58d4:	blt	6bf4 <ReadCompressedDoubleData+0x16f4>
    58d8:	mov	r0, r9
    58dc:	bl	1c88 <Mat_doubleSwap>
    58e0:	subs	r6, r6, #1
    58e4:	add	r9, r9, #8
    58e8:	bne	58d8 <ReadCompressedDoubleData+0x3d8>
    58ec:	b	6bf4 <ReadCompressedDoubleData+0x16f4>
    58f0:	ldr	r0, [sp, #20]
    58f4:	ldr	r0, [r0, #20]
    58f8:	cmp	r0, #0
    58fc:	beq	5f08 <ReadCompressedDoubleData+0xa08>
    5900:	cmp	r6, #128	; 0x80
    5904:	bgt	6484 <ReadCompressedDoubleData+0xf84>
    5908:	ldr	r0, [sp, #20]
    590c:	ldr	r1, [sp, #16]
    5910:	mul	sl, r2, r6
    5914:	add	r5, sp, #24
    5918:	mov	r2, r5
    591c:	mov	r3, sl
    5920:	bl	32b8 <InflateData>
    5924:	cmp	r6, #1
    5928:	blt	6bf4 <ReadCompressedDoubleData+0x16f4>
    592c:	mov	r0, r5
    5930:	bl	1b84 <Mat_int64Swap>
    5934:	bl	582ac <__aeabi_l2d>
    5938:	strd	r0, [r9]
    593c:	add	r5, r5, #8
    5940:	subs	r6, r6, #1
    5944:	add	r9, r9, #8
    5948:	bne	592c <ReadCompressedDoubleData+0x42c>
    594c:	b	6bf4 <ReadCompressedDoubleData+0x16f4>
    5950:	ldr	r0, [sp, #20]
    5954:	ldr	r0, [r0, #20]
    5958:	cmp	r0, #0
    595c:	beq	5fb8 <ReadCompressedDoubleData+0xab8>
    5960:	cmp	r6, #128	; 0x80
    5964:	bgt	654c <ReadCompressedDoubleData+0x104c>
    5968:	ldr	r0, [sp, #20]
    596c:	ldr	r1, [sp, #16]
    5970:	mul	sl, r2, r6
    5974:	add	r5, sp, #24
    5978:	mov	r2, r5
    597c:	mov	r3, sl
    5980:	bl	32b8 <InflateData>
    5984:	cmp	r6, #1
    5988:	blt	6bf4 <ReadCompressedDoubleData+0x16f4>
    598c:	mov	r0, r5
    5990:	bl	1bd4 <Mat_uint64Swap>
    5994:	bl	58298 <__aeabi_ul2d>
    5998:	strd	r0, [r9]
    599c:	add	r5, r5, #8
    59a0:	subs	r6, r6, #1
    59a4:	add	r9, r9, #8
    59a8:	bne	598c <ReadCompressedDoubleData+0x48c>
    59ac:	b	6bf4 <ReadCompressedDoubleData+0x16f4>
    59b0:	sub	r1, r6, #1024	; 0x400
    59b4:	add	r0, r9, #8192	; 0x2000
    59b8:	str	r2, [sp, #8]
    59bc:	lsl	r5, r2, #10
    59c0:	mov	r2, #1024	; 0x400
    59c4:	add	r6, sp, #24
    59c8:	mov	r4, r9
    59cc:	str	r1, [sp, #12]
    59d0:	mov	r1, #0
    59d4:	mov	r8, r1
    59d8:	mov	r7, r0
    59dc:	ldr	r0, [sp, #20]
    59e0:	ldr	r1, [sp, #16]
    59e4:	mov	sl, r2
    59e8:	mov	r2, r6
    59ec:	mov	r3, r5
    59f0:	bl	32b8 <InflateData>
    59f4:	mov	r0, r4
    59f8:	mov	r1, #0
    59fc:	add	r2, r6, r1
    5a00:	add	r1, r1, #2
    5a04:	vld1.16	{d16[0]}, [r2 :16]
    5a08:	cmp	r1, #1024	; 0x400
    5a0c:	vmovl.s8	q8, d16
    5a10:	vmovl.s16	q0, d16
    5a14:	vcvt.f64.s32	d17, s1
    5a18:	vcvt.f64.s32	d16, s0
    5a1c:	vst1.64	{d16-d17}, [r0]!
    5a20:	bne	59fc <ReadCompressedDoubleData+0x4fc>
    5a24:	ldr	r3, [sp, #12]
    5a28:	add	r1, r8, #1024	; 0x400
    5a2c:	add	r4, r4, #8192	; 0x2000
    5a30:	add	r0, r7, #8192	; 0x2000
    5a34:	add	r2, sl, #1024	; 0x400
    5a38:	cmp	r1, r3
    5a3c:	blt	59d4 <ReadCompressedDoubleData+0x4d4>
    5a40:	ldr	r0, [fp, #8]
    5a44:	add	r5, sp, #24
    5a48:	mov	r2, r5
    5a4c:	sub	r4, r0, r1
    5a50:	ldr	r0, [sp, #8]
    5a54:	ldr	r1, [sp, #16]
    5a58:	mul	r3, r4, r0
    5a5c:	ldr	r0, [sp, #20]
    5a60:	mov	r6, r3
    5a64:	bl	32b8 <InflateData>
    5a68:	cmp	r4, #1
    5a6c:	blt	6bf0 <ReadCompressedDoubleData+0x16f0>
    5a70:	mov	r0, #0
    5a74:	beq	5ab4 <ReadCompressedDoubleData+0x5b4>
    5a78:	ldr	r0, [sp, #12]
    5a7c:	sub	r0, r0, r8
    5a80:	bic	r1, r0, #1
    5a84:	bic	r0, r4, #1
    5a88:	vld1.16	{d16[0]}, [r5 :16]
    5a8c:	subs	r1, r1, #2
    5a90:	add	r5, r5, #2
    5a94:	vmovl.s8	q8, d16
    5a98:	vmovl.s16	q0, d16
    5a9c:	vcvt.f64.s32	d17, s1
    5aa0:	vcvt.f64.s32	d16, s0
    5aa4:	vst1.64	{d16-d17}, [r7]!
    5aa8:	bne	5a88 <ReadCompressedDoubleData+0x588>
    5aac:	cmp	r4, r0
    5ab0:	beq	6bf0 <ReadCompressedDoubleData+0x16f0>
    5ab4:	ldr	r3, [sp, #12]
    5ab8:	add	r1, sp, #24
    5abc:	add	r2, r0, sl
    5ac0:	add	r1, r1, r0
    5ac4:	add	r2, r9, r2, lsl #3
    5ac8:	sub	r3, r3, r8
    5acc:	sub	r0, r3, r0
    5ad0:	ldrsb	r3, [r1], #1
    5ad4:	subs	r0, r0, #1
    5ad8:	vmov	s0, r3
    5adc:	vcvt.f64.s32	d16, s0
    5ae0:	vstmia	r2!, {d16}
    5ae4:	bne	5ad0 <ReadCompressedDoubleData+0x5d0>
    5ae8:	b	6bf0 <ReadCompressedDoubleData+0x16f0>
    5aec:	sub	r1, r6, #1024	; 0x400
    5af0:	add	r0, r9, #8192	; 0x2000
    5af4:	str	r2, [sp, #8]
    5af8:	lsl	r5, r2, #10
    5afc:	mov	r2, #1024	; 0x400
    5b00:	add	r6, sp, #24
    5b04:	mov	r4, r9
    5b08:	str	r1, [sp, #12]
    5b0c:	mov	r1, #0
    5b10:	mov	r8, r1
    5b14:	mov	r7, r0
    5b18:	ldr	r0, [sp, #20]
    5b1c:	ldr	r1, [sp, #16]
    5b20:	mov	sl, r2
    5b24:	mov	r2, r6
    5b28:	mov	r3, r5
    5b2c:	bl	32b8 <InflateData>
    5b30:	mov	r0, r4
    5b34:	mov	r1, #0
    5b38:	add	r2, r6, r1
    5b3c:	add	r1, r1, #2
    5b40:	vld1.16	{d16[0]}, [r2 :16]
    5b44:	cmp	r1, #1024	; 0x400
    5b48:	vmovl.u8	q8, d16
    5b4c:	vmovl.u16	q0, d16
    5b50:	vcvt.f64.u32	d17, s1
    5b54:	vcvt.f64.u32	d16, s0
    5b58:	vst1.64	{d16-d17}, [r0]!
    5b5c:	bne	5b38 <ReadCompressedDoubleData+0x638>
    5b60:	ldr	r3, [sp, #12]
    5b64:	add	r1, r8, #1024	; 0x400
    5b68:	add	r4, r4, #8192	; 0x2000
    5b6c:	add	r0, r7, #8192	; 0x2000
    5b70:	add	r2, sl, #1024	; 0x400
    5b74:	cmp	r1, r3
    5b78:	blt	5b10 <ReadCompressedDoubleData+0x610>
    5b7c:	ldr	r0, [fp, #8]
    5b80:	add	r5, sp, #24
    5b84:	mov	r2, r5
    5b88:	sub	r4, r0, r1
    5b8c:	ldr	r0, [sp, #8]
    5b90:	ldr	r1, [sp, #16]
    5b94:	mul	r3, r4, r0
    5b98:	ldr	r0, [sp, #20]
    5b9c:	mov	r6, r3
    5ba0:	bl	32b8 <InflateData>
    5ba4:	cmp	r4, #1
    5ba8:	blt	6bf0 <ReadCompressedDoubleData+0x16f0>
    5bac:	mov	r0, #0
    5bb0:	beq	5bf0 <ReadCompressedDoubleData+0x6f0>
    5bb4:	ldr	r0, [sp, #12]
    5bb8:	sub	r0, r0, r8
    5bbc:	bic	r1, r0, #1
    5bc0:	bic	r0, r4, #1
    5bc4:	vld1.16	{d16[0]}, [r5 :16]
    5bc8:	subs	r1, r1, #2
    5bcc:	add	r5, r5, #2
    5bd0:	vmovl.u8	q8, d16
    5bd4:	vmovl.u16	q0, d16
    5bd8:	vcvt.f64.u32	d17, s1
    5bdc:	vcvt.f64.u32	d16, s0
    5be0:	vst1.64	{d16-d17}, [r7]!
    5be4:	bne	5bc4 <ReadCompressedDoubleData+0x6c4>
    5be8:	cmp	r4, r0
    5bec:	beq	6bf0 <ReadCompressedDoubleData+0x16f0>
    5bf0:	ldr	r3, [sp, #12]
    5bf4:	add	r1, sp, #24
    5bf8:	add	r2, r0, sl
    5bfc:	add	r1, r1, r0
    5c00:	add	r2, r9, r2, lsl #3
    5c04:	sub	r3, r3, r8
    5c08:	sub	r0, r3, r0
    5c0c:	ldrb	r3, [r1], #1
    5c10:	subs	r0, r0, #1
    5c14:	vmov	s0, r3
    5c18:	vcvt.f64.u32	d16, s0
    5c1c:	vstmia	r2!, {d16}
    5c20:	bne	5c0c <ReadCompressedDoubleData+0x70c>
    5c24:	b	6bf0 <ReadCompressedDoubleData+0x16f0>
    5c28:	cmp	r6, #512	; 0x200
    5c2c:	bgt	6614 <ReadCompressedDoubleData+0x1114>
    5c30:	ldr	r0, [sp, #20]
    5c34:	ldr	r1, [sp, #16]
    5c38:	mul	sl, r2, r6
    5c3c:	add	r5, sp, #24
    5c40:	mov	r2, r5
    5c44:	mov	r3, sl
    5c48:	bl	32b8 <InflateData>
    5c4c:	cmp	r6, #1
    5c50:	blt	6bf4 <ReadCompressedDoubleData+0x16f4>
    5c54:	mov	r0, #0
    5c58:	beq	5c90 <ReadCompressedDoubleData+0x790>
    5c5c:	bic	r0, r6, #1
    5c60:	mov	r2, r9
    5c64:	mov	r1, r0
    5c68:	vld1.32	{d16[0]}, [r5 :32]
    5c6c:	subs	r1, r1, #2
    5c70:	add	r5, r5, #4
    5c74:	vmovl.s16	q0, d16
    5c78:	vcvt.f64.s32	d17, s1
    5c7c:	vcvt.f64.s32	d16, s0
    5c80:	vst1.64	{d16-d17}, [r2]!
    5c84:	bne	5c68 <ReadCompressedDoubleData+0x768>
    5c88:	cmp	r0, r6
    5c8c:	beq	6bf4 <ReadCompressedDoubleData+0x16f4>
    5c90:	add	r3, sp, #24
    5c94:	sub	r1, r6, r0
    5c98:	add	r2, r9, r0, lsl #3
    5c9c:	add	r0, r3, r0, lsl #1
    5ca0:	ldrsh	r3, [r0], #2
    5ca4:	subs	r1, r1, #1
    5ca8:	vmov	s0, r3
    5cac:	vcvt.f64.s32	d16, s0
    5cb0:	vstr	d16, [r2]
    5cb4:	add	r2, r2, #8
    5cb8:	bne	5ca0 <ReadCompressedDoubleData+0x7a0>
    5cbc:	b	6bf4 <ReadCompressedDoubleData+0x16f4>
    5cc0:	cmp	r6, #512	; 0x200
    5cc4:	bgt	6748 <ReadCompressedDoubleData+0x1248>
    5cc8:	ldr	r0, [sp, #20]
    5ccc:	ldr	r1, [sp, #16]
    5cd0:	mul	sl, r2, r6
    5cd4:	add	r5, sp, #24
    5cd8:	mov	r2, r5
    5cdc:	mov	r3, sl
    5ce0:	bl	32b8 <InflateData>
    5ce4:	cmp	r6, #1
    5ce8:	blt	6bf4 <ReadCompressedDoubleData+0x16f4>
    5cec:	mov	r0, #0
    5cf0:	beq	5d28 <ReadCompressedDoubleData+0x828>
    5cf4:	bic	r0, r6, #1
    5cf8:	mov	r2, r9
    5cfc:	mov	r1, r0
    5d00:	vld1.32	{d16[0]}, [r5 :32]
    5d04:	subs	r1, r1, #2
    5d08:	add	r5, r5, #4
    5d0c:	vmovl.u16	q0, d16
    5d10:	vcvt.f64.u32	d17, s1
    5d14:	vcvt.f64.u32	d16, s0
    5d18:	vst1.64	{d16-d17}, [r2]!
    5d1c:	bne	5d00 <ReadCompressedDoubleData+0x800>
    5d20:	cmp	r0, r6
    5d24:	beq	6bf4 <ReadCompressedDoubleData+0x16f4>
    5d28:	add	r3, sp, #24
    5d2c:	sub	r1, r6, r0
    5d30:	add	r2, r9, r0, lsl #3
    5d34:	add	r0, r3, r0, lsl #1
    5d38:	ldrh	r3, [r0], #2
    5d3c:	subs	r1, r1, #1
    5d40:	vmov	s0, r3
    5d44:	vcvt.f64.u32	d16, s0
    5d48:	vstr	d16, [r2]
    5d4c:	add	r2, r2, #8
    5d50:	bne	5d38 <ReadCompressedDoubleData+0x838>
    5d54:	b	6bf4 <ReadCompressedDoubleData+0x16f4>
    5d58:	cmp	r6, #256	; 0x100
    5d5c:	bgt	687c <ReadCompressedDoubleData+0x137c>
    5d60:	ldr	r0, [sp, #20]
    5d64:	ldr	r1, [sp, #16]
    5d68:	mul	sl, r2, r6
    5d6c:	add	r5, sp, #24
    5d70:	mov	r2, r5
    5d74:	mov	r3, sl
    5d78:	bl	32b8 <InflateData>
    5d7c:	cmp	r6, #1
    5d80:	blt	6bf4 <ReadCompressedDoubleData+0x16f4>
    5d84:	mov	r0, #0
    5d88:	beq	5db8 <ReadCompressedDoubleData+0x8b8>
    5d8c:	bic	r0, r6, #1
    5d90:	mov	r2, r9
    5d94:	mov	r1, r0
    5d98:	vld1.32	{d0}, [r5 :64]!
    5d9c:	subs	r1, r1, #2
    5da0:	vcvt.f64.s32	d17, s1
    5da4:	vcvt.f64.s32	d16, s0
    5da8:	vst1.64	{d16-d17}, [r2]!
    5dac:	bne	5d98 <ReadCompressedDoubleData+0x898>
    5db0:	cmp	r0, r6
    5db4:	beq	6bf4 <ReadCompressedDoubleData+0x16f4>
    5db8:	add	r3, sp, #24
    5dbc:	sub	r1, r6, r0
    5dc0:	add	r2, r9, r0, lsl #3
    5dc4:	add	r0, r3, r0, lsl #2
    5dc8:	ldr	r3, [r0], #4
    5dcc:	subs	r1, r1, #1
    5dd0:	vmov	s0, r3
    5dd4:	vcvt.f64.s32	d16, s0
    5dd8:	vstr	d16, [r2]
    5ddc:	add	r2, r2, #8
    5de0:	bne	5dc8 <ReadCompressedDoubleData+0x8c8>
    5de4:	b	6bf4 <ReadCompressedDoubleData+0x16f4>
    5de8:	cmp	r6, #256	; 0x100
    5dec:	bgt	69a4 <ReadCompressedDoubleData+0x14a4>
    5df0:	ldr	r0, [sp, #20]
    5df4:	ldr	r1, [sp, #16]
    5df8:	mul	sl, r2, r6
    5dfc:	add	r5, sp, #24
    5e00:	mov	r2, r5
    5e04:	mov	r3, sl
    5e08:	bl	32b8 <InflateData>
    5e0c:	cmp	r6, #1
    5e10:	blt	6bf4 <ReadCompressedDoubleData+0x16f4>
    5e14:	mov	r0, #0
    5e18:	beq	5e48 <ReadCompressedDoubleData+0x948>
    5e1c:	bic	r0, r6, #1
    5e20:	mov	r2, r9
    5e24:	mov	r1, r0
    5e28:	vld1.32	{d0}, [r5 :64]!
    5e2c:	subs	r1, r1, #2
    5e30:	vcvt.f64.u32	d17, s1
    5e34:	vcvt.f64.u32	d16, s0
    5e38:	vst1.64	{d16-d17}, [r2]!
    5e3c:	bne	5e28 <ReadCompressedDoubleData+0x928>
    5e40:	cmp	r0, r6
    5e44:	beq	6bf4 <ReadCompressedDoubleData+0x16f4>
    5e48:	add	r3, sp, #24
    5e4c:	sub	r1, r6, r0
    5e50:	add	r2, r9, r0, lsl #3
    5e54:	add	r0, r3, r0, lsl #2
    5e58:	ldr	r3, [r0], #4
    5e5c:	subs	r1, r1, #1
    5e60:	vmov	s0, r3
    5e64:	vcvt.f64.u32	d16, s0
    5e68:	vstr	d16, [r2]
    5e6c:	add	r2, r2, #8
    5e70:	bne	5e58 <ReadCompressedDoubleData+0x958>
    5e74:	b	6bf4 <ReadCompressedDoubleData+0x16f4>
    5e78:	cmp	r6, #256	; 0x100
    5e7c:	bgt	6acc <ReadCompressedDoubleData+0x15cc>
    5e80:	ldr	r0, [sp, #20]
    5e84:	ldr	r1, [sp, #16]
    5e88:	mul	sl, r2, r6
    5e8c:	add	r5, sp, #24
    5e90:	mov	r2, r5
    5e94:	mov	r3, sl
    5e98:	bl	32b8 <InflateData>
    5e9c:	cmp	r6, #1
    5ea0:	blt	6bf4 <ReadCompressedDoubleData+0x16f4>
    5ea4:	mov	r0, #0
    5ea8:	beq	5ed8 <ReadCompressedDoubleData+0x9d8>
    5eac:	bic	r0, r6, #1
    5eb0:	mov	r2, r9
    5eb4:	mov	r1, r0
    5eb8:	vld1.32	{d0}, [r5 :64]!
    5ebc:	subs	r1, r1, #2
    5ec0:	vcvt.f64.f32	d17, s1
    5ec4:	vcvt.f64.f32	d16, s0
    5ec8:	vst1.64	{d16-d17}, [r2]!
    5ecc:	bne	5eb8 <ReadCompressedDoubleData+0x9b8>
    5ed0:	cmp	r0, r6
    5ed4:	beq	6bf4 <ReadCompressedDoubleData+0x16f4>
    5ed8:	add	r3, sp, #24
    5edc:	sub	r1, r6, r0
    5ee0:	add	r2, r9, r0, lsl #3
    5ee4:	add	r0, r3, r0, lsl #2
    5ee8:	vldr	s0, [r0]
    5eec:	subs	r1, r1, #1
    5ef0:	add	r0, r0, #4
    5ef4:	vcvt.f64.f32	d16, s0
    5ef8:	vstr	d16, [r2]
    5efc:	add	r2, r2, #8
    5f00:	bne	5ee8 <ReadCompressedDoubleData+0x9e8>
    5f04:	b	6bf4 <ReadCompressedDoubleData+0x16f4>
    5f08:	cmp	r6, #128	; 0x80
    5f0c:	bgt	6c08 <ReadCompressedDoubleData+0x1708>
    5f10:	ldr	r0, [sp, #20]
    5f14:	ldr	r1, [sp, #16]
    5f18:	mul	sl, r2, r6
    5f1c:	add	r5, sp, #24
    5f20:	mov	r2, r5
    5f24:	mov	r3, sl
    5f28:	bl	32b8 <InflateData>
    5f2c:	cmp	r6, #1
    5f30:	blt	6bf4 <ReadCompressedDoubleData+0x16f4>
    5f34:	mov	r8, #0
    5f38:	beq	5f88 <ReadCompressedDoubleData+0xa88>
    5f3c:	bic	r8, r6, #1
    5f40:	mov	r7, r9
    5f44:	mov	r4, r8
    5f48:	vld1.64	{d8-d9}, [r5]!
    5f4c:	vmov.32	r0, d9[0]
    5f50:	vmov.32	r1, d9[1]
    5f54:	bl	582ac <__aeabi_l2d>
    5f58:	vmov.32	r2, d8[0]
    5f5c:	vmov.32	r3, d8[1]
    5f60:	vmov	d9, r0, r1
    5f64:	mov	r0, r2
    5f68:	mov	r1, r3
    5f6c:	bl	582ac <__aeabi_l2d>
    5f70:	vmov	d8, r0, r1
    5f74:	subs	r4, r4, #2
    5f78:	vst1.64	{d8-d9}, [r7]!
    5f7c:	bne	5f48 <ReadCompressedDoubleData+0xa48>
    5f80:	cmp	r8, r6
    5f84:	beq	6bf4 <ReadCompressedDoubleData+0x16f4>
    5f88:	add	r0, sp, #24
    5f8c:	sub	r5, r6, r8
    5f90:	add	r6, r9, r8, lsl #3
    5f94:	add	r4, r0, r8, lsl #3
    5f98:	ldrd	r0, [r4]
    5f9c:	bl	582ac <__aeabi_l2d>
    5fa0:	strd	r0, [r6]
    5fa4:	add	r4, r4, #8
    5fa8:	subs	r5, r5, #1
    5fac:	add	r6, r6, #8
    5fb0:	bne	5f98 <ReadCompressedDoubleData+0xa98>
    5fb4:	b	6bf4 <ReadCompressedDoubleData+0x16f4>
    5fb8:	cmp	r6, #128	; 0x80
    5fbc:	bgt	6d90 <ReadCompressedDoubleData+0x1890>
    5fc0:	ldr	r0, [sp, #20]
    5fc4:	ldr	r1, [sp, #16]
    5fc8:	mul	sl, r2, r6
    5fcc:	add	r5, sp, #24
    5fd0:	mov	r2, r5
    5fd4:	mov	r3, sl
    5fd8:	bl	32b8 <InflateData>
    5fdc:	cmp	r6, #1
    5fe0:	blt	6bf4 <ReadCompressedDoubleData+0x16f4>
    5fe4:	mov	r8, #0
    5fe8:	beq	6038 <ReadCompressedDoubleData+0xb38>
    5fec:	bic	r8, r6, #1
    5ff0:	mov	r7, r9
    5ff4:	mov	r4, r8
    5ff8:	vld1.64	{d8-d9}, [r5]!
    5ffc:	vmov.32	r0, d9[0]
    6000:	vmov.32	r1, d9[1]
    6004:	bl	58298 <__aeabi_ul2d>
    6008:	vmov.32	r2, d8[0]
    600c:	vmov.32	r3, d8[1]
    6010:	vmov	d9, r0, r1
    6014:	mov	r0, r2
    6018:	mov	r1, r3
    601c:	bl	58298 <__aeabi_ul2d>
    6020:	vmov	d8, r0, r1
    6024:	subs	r4, r4, #2
    6028:	vst1.64	{d8-d9}, [r7]!
    602c:	bne	5ff8 <ReadCompressedDoubleData+0xaf8>
    6030:	cmp	r8, r6
    6034:	beq	6bf4 <ReadCompressedDoubleData+0x16f4>
    6038:	add	r0, sp, #24
    603c:	sub	r5, r6, r8
    6040:	add	r6, r9, r8, lsl #3
    6044:	add	r4, r0, r8, lsl #3
    6048:	ldrd	r0, [r4]
    604c:	bl	58298 <__aeabi_ul2d>
    6050:	strd	r0, [r6]
    6054:	add	r4, r4, #8
    6058:	subs	r5, r5, #1
    605c:	add	r6, r6, #8
    6060:	bne	6048 <ReadCompressedDoubleData+0xb48>
    6064:	b	6bf4 <ReadCompressedDoubleData+0x16f4>
    6068:	sub	r1, r6, #512	; 0x200
    606c:	add	r0, r9, #4096	; 0x1000
    6070:	lsl	sl, r2, #9
    6074:	add	r6, sp, #24
    6078:	str	r2, [sp, #8]
    607c:	str	r1, [sp, #12]
    6080:	mov	r1, #0
    6084:	mov	r5, r1
    6088:	mov	r7, r0
    608c:	ldr	r0, [sp, #20]
    6090:	ldr	r1, [sp, #16]
    6094:	mov	r2, r6
    6098:	mov	r3, sl
    609c:	bl	32b8 <InflateData>
    60a0:	mov	r4, r9
    60a4:	mov	r8, #0
    60a8:	add	r0, r6, r8
    60ac:	bl	1c18 <Mat_int16Swap>
    60b0:	vmov	s0, r0
    60b4:	add	r8, r8, #2
    60b8:	vcvt.f64.s32	d16, s0
    60bc:	cmp	r8, #1024	; 0x400
    60c0:	vstmia	r4!, {d16}
    60c4:	bne	60a8 <ReadCompressedDoubleData+0xba8>
    60c8:	ldr	r2, [sp, #12]
    60cc:	add	r1, r5, #512	; 0x200
    60d0:	add	r9, r9, #4096	; 0x1000
    60d4:	add	r0, r7, #4096	; 0x1000
    60d8:	cmp	r1, r2
    60dc:	blt	6084 <ReadCompressedDoubleData+0xb84>
    60e0:	ldr	r0, [fp, #8]
    60e4:	add	r4, sp, #24
    60e8:	mov	r2, r4
    60ec:	sub	r6, r0, r1
    60f0:	ldr	r0, [sp, #8]
    60f4:	ldr	r1, [sp, #16]
    60f8:	mul	sl, r6, r0
    60fc:	ldr	r0, [sp, #20]
    6100:	mov	r3, sl
    6104:	bl	32b8 <InflateData>
    6108:	cmp	r6, #1
    610c:	blt	6bf4 <ReadCompressedDoubleData+0x16f4>
    6110:	ldr	r0, [sp, #12]
    6114:	sub	r5, r0, r5
    6118:	mov	r0, r4
    611c:	bl	1c18 <Mat_int16Swap>
    6120:	vmov	s0, r0
    6124:	subs	r5, r5, #1
    6128:	add	r4, r4, #2
    612c:	vcvt.f64.s32	d16, s0
    6130:	vstmia	r7!, {d16}
    6134:	bne	6118 <ReadCompressedDoubleData+0xc18>
    6138:	b	6bf4 <ReadCompressedDoubleData+0x16f4>
    613c:	sub	r1, r6, #512	; 0x200
    6140:	add	r0, r9, #4096	; 0x1000
    6144:	lsl	sl, r2, #9
    6148:	add	r6, sp, #24
    614c:	str	r2, [sp, #8]
    6150:	str	r1, [sp, #12]
    6154:	mov	r1, #0
    6158:	mov	r5, r1
    615c:	mov	r7, r0
    6160:	ldr	r0, [sp, #20]
    6164:	ldr	r1, [sp, #16]
    6168:	mov	r2, r6
    616c:	mov	r3, sl
    6170:	bl	32b8 <InflateData>
    6174:	mov	r4, r9
    6178:	mov	r8, #0
    617c:	add	r0, r6, r8
    6180:	bl	1c2c <Mat_uint16Swap>
    6184:	vmov	s0, r0
    6188:	add	r8, r8, #2
    618c:	vcvt.f64.u32	d16, s0
    6190:	cmp	r8, #1024	; 0x400
    6194:	vstmia	r4!, {d16}
    6198:	bne	617c <ReadCompressedDoubleData+0xc7c>
    619c:	ldr	r2, [sp, #12]
    61a0:	add	r1, r5, #512	; 0x200
    61a4:	add	r9, r9, #4096	; 0x1000
    61a8:	add	r0, r7, #4096	; 0x1000
    61ac:	cmp	r1, r2
    61b0:	blt	6158 <ReadCompressedDoubleData+0xc58>
    61b4:	ldr	r0, [fp, #8]
    61b8:	add	r4, sp, #24
    61bc:	mov	r2, r4
    61c0:	sub	r6, r0, r1
    61c4:	ldr	r0, [sp, #8]
    61c8:	ldr	r1, [sp, #16]
    61cc:	mul	sl, r6, r0
    61d0:	ldr	r0, [sp, #20]
    61d4:	mov	r3, sl
    61d8:	bl	32b8 <InflateData>
    61dc:	cmp	r6, #1
    61e0:	blt	6bf4 <ReadCompressedDoubleData+0x16f4>
    61e4:	ldr	r0, [sp, #12]
    61e8:	sub	r5, r0, r5
    61ec:	mov	r0, r4
    61f0:	bl	1c2c <Mat_uint16Swap>
    61f4:	vmov	s0, r0
    61f8:	subs	r5, r5, #1
    61fc:	add	r4, r4, #2
    6200:	vcvt.f64.u32	d16, s0
    6204:	vstmia	r7!, {d16}
    6208:	bne	61ec <ReadCompressedDoubleData+0xcec>
    620c:	b	6bf4 <ReadCompressedDoubleData+0x16f4>
    6210:	sub	r1, r6, #256	; 0x100
    6214:	add	r0, r9, #2048	; 0x800
    6218:	lsl	sl, r2, #8
    621c:	add	r6, sp, #24
    6220:	str	r2, [sp, #8]
    6224:	str	r1, [sp, #12]
    6228:	mov	r1, #0
    622c:	mov	r5, r1
    6230:	mov	r7, r0
    6234:	ldr	r0, [sp, #20]
    6238:	ldr	r1, [sp, #16]
    623c:	mov	r2, r6
    6240:	mov	r3, sl
    6244:	bl	32b8 <InflateData>
    6248:	mov	r4, r9
    624c:	mov	r8, #0
    6250:	add	r0, r6, r8
    6254:	bl	1bf0 <Mat_int32Swap>
    6258:	vmov	s0, r0
    625c:	add	r8, r8, #4
    6260:	vcvt.f64.s32	d16, s0
    6264:	cmp	r8, #1024	; 0x400
    6268:	vstmia	r4!, {d16}
    626c:	bne	6250 <ReadCompressedDoubleData+0xd50>
    6270:	ldr	r2, [sp, #12]
    6274:	add	r1, r5, #256	; 0x100
    6278:	add	r9, r9, #2048	; 0x800
    627c:	add	r0, r7, #2048	; 0x800
    6280:	cmp	r1, r2
    6284:	blt	622c <ReadCompressedDoubleData+0xd2c>
    6288:	ldr	r0, [fp, #8]
    628c:	add	r4, sp, #24
    6290:	mov	r2, r4
    6294:	sub	r6, r0, r1
    6298:	ldr	r0, [sp, #8]
    629c:	ldr	r1, [sp, #16]
    62a0:	mul	sl, r6, r0
    62a4:	ldr	r0, [sp, #20]
    62a8:	mov	r3, sl
    62ac:	bl	32b8 <InflateData>
    62b0:	cmp	r6, #1
    62b4:	blt	6bf4 <ReadCompressedDoubleData+0x16f4>
    62b8:	ldr	r0, [sp, #12]
    62bc:	sub	r5, r0, r5
    62c0:	mov	r0, r4
    62c4:	bl	1bf0 <Mat_int32Swap>
    62c8:	vmov	s0, r0
    62cc:	subs	r5, r5, #1
    62d0:	add	r4, r4, #4
    62d4:	vcvt.f64.s32	d16, s0
    62d8:	vstmia	r7!, {d16}
    62dc:	bne	62c0 <ReadCompressedDoubleData+0xdc0>
    62e0:	b	6bf4 <ReadCompressedDoubleData+0x16f4>
    62e4:	sub	r1, r6, #256	; 0x100
    62e8:	add	r0, r9, #2048	; 0x800
    62ec:	lsl	sl, r2, #8
    62f0:	add	r6, sp, #24
    62f4:	str	r2, [sp, #8]
    62f8:	str	r1, [sp, #12]
    62fc:	mov	r1, #0
    6300:	mov	r5, r1
    6304:	mov	r7, r0
    6308:	ldr	r0, [sp, #20]
    630c:	ldr	r1, [sp, #16]
    6310:	mov	r2, r6
    6314:	mov	r3, sl
    6318:	bl	32b8 <InflateData>
    631c:	mov	r4, r9
    6320:	mov	r8, #0
    6324:	add	r0, r6, r8
    6328:	bl	1c04 <Mat_uint32Swap>
    632c:	vmov	s0, r0
    6330:	add	r8, r8, #4
    6334:	vcvt.f64.u32	d16, s0
    6338:	cmp	r8, #1024	; 0x400
    633c:	vstmia	r4!, {d16}
    6340:	bne	6324 <ReadCompressedDoubleData+0xe24>
    6344:	ldr	r2, [sp, #12]
    6348:	add	r1, r5, #256	; 0x100
    634c:	add	r9, r9, #2048	; 0x800
    6350:	add	r0, r7, #2048	; 0x800
    6354:	cmp	r1, r2
    6358:	blt	6300 <ReadCompressedDoubleData+0xe00>
    635c:	ldr	r0, [fp, #8]
    6360:	add	r4, sp, #24
    6364:	mov	r2, r4
    6368:	sub	r6, r0, r1
    636c:	ldr	r0, [sp, #8]
    6370:	ldr	r1, [sp, #16]
    6374:	mul	sl, r6, r0
    6378:	ldr	r0, [sp, #20]
    637c:	mov	r3, sl
    6380:	bl	32b8 <InflateData>
    6384:	cmp	r6, #1
    6388:	blt	6bf4 <ReadCompressedDoubleData+0x16f4>
    638c:	ldr	r0, [sp, #12]
    6390:	sub	r5, r0, r5
    6394:	mov	r0, r4
    6398:	bl	1c04 <Mat_uint32Swap>
    639c:	vmov	s0, r0
    63a0:	subs	r5, r5, #1
    63a4:	add	r4, r4, #4
    63a8:	vcvt.f64.u32	d16, s0
    63ac:	vstmia	r7!, {d16}
    63b0:	bne	6394 <ReadCompressedDoubleData+0xe94>
    63b4:	b	6bf4 <ReadCompressedDoubleData+0x16f4>
    63b8:	sub	r1, r6, #256	; 0x100
    63bc:	add	r0, r9, #2048	; 0x800
    63c0:	lsl	sl, r2, #8
    63c4:	add	r6, sp, #24
    63c8:	str	r2, [sp, #8]
    63cc:	str	r1, [sp, #12]
    63d0:	mov	r1, #0
    63d4:	mov	r5, r1
    63d8:	mov	r7, r0
    63dc:	ldr	r0, [sp, #20]
    63e0:	ldr	r1, [sp, #16]
    63e4:	mov	r2, r6
    63e8:	mov	r3, sl
    63ec:	bl	32b8 <InflateData>
    63f0:	mov	r4, r9
    63f4:	mov	r8, #0
    63f8:	add	r0, r6, r8
    63fc:	bl	1c44 <Mat_floatSwap>
    6400:	vcvt.f64.f32	d16, s0
    6404:	add	r8, r8, #4
    6408:	vstmia	r4!, {d16}
    640c:	cmp	r8, #1024	; 0x400
    6410:	bne	63f8 <ReadCompressedDoubleData+0xef8>
    6414:	ldr	r2, [sp, #12]
    6418:	add	r1, r5, #256	; 0x100
    641c:	add	r9, r9, #2048	; 0x800
    6420:	add	r0, r7, #2048	; 0x800
    6424:	cmp	r1, r2
    6428:	blt	63d4 <ReadCompressedDoubleData+0xed4>
    642c:	ldr	r0, [fp, #8]
    6430:	add	r4, sp, #24
    6434:	mov	r2, r4
    6438:	sub	r6, r0, r1
    643c:	ldr	r0, [sp, #8]
    6440:	ldr	r1, [sp, #16]
    6444:	mul	sl, r6, r0
    6448:	ldr	r0, [sp, #20]
    644c:	mov	r3, sl
    6450:	bl	32b8 <InflateData>
    6454:	cmp	r6, #1
    6458:	blt	6bf4 <ReadCompressedDoubleData+0x16f4>
    645c:	ldr	r0, [sp, #12]
    6460:	sub	r5, r0, r5
    6464:	mov	r0, r4
    6468:	bl	1c44 <Mat_floatSwap>
    646c:	vcvt.f64.f32	d16, s0
    6470:	subs	r5, r5, #1
    6474:	add	r4, r4, #4
    6478:	vstmia	r7!, {d16}
    647c:	bne	6464 <ReadCompressedDoubleData+0xf64>
    6480:	b	6bf4 <ReadCompressedDoubleData+0x16f4>
    6484:	sub	r8, r6, #128	; 0x80
    6488:	add	r0, r9, #1024	; 0x400
    648c:	lsl	sl, r2, #7
    6490:	mov	r1, #0
    6494:	add	r6, sp, #24
    6498:	str	r2, [sp, #8]
    649c:	mov	r5, r1
    64a0:	mov	r7, r0
    64a4:	ldr	r0, [sp, #20]
    64a8:	ldr	r1, [sp, #16]
    64ac:	mov	r2, r6
    64b0:	mov	r3, sl
    64b4:	bl	32b8 <InflateData>
    64b8:	mov	r4, #0
    64bc:	add	r0, r6, r4
    64c0:	bl	1b84 <Mat_int64Swap>
    64c4:	bl	582ac <__aeabi_l2d>
    64c8:	mov	r2, r9
    64cc:	str	r0, [r2, r4]!
    64d0:	add	r4, r4, #8
    64d4:	cmp	r4, #1024	; 0x400
    64d8:	str	r1, [r2, #4]
    64dc:	bne	64bc <ReadCompressedDoubleData+0xfbc>
    64e0:	add	r1, r5, #128	; 0x80
    64e4:	add	r9, r9, #1024	; 0x400
    64e8:	add	r0, r7, #1024	; 0x400
    64ec:	cmp	r1, r8
    64f0:	blt	649c <ReadCompressedDoubleData+0xf9c>
    64f4:	ldr	r0, [fp, #8]
    64f8:	add	r4, sp, #24
    64fc:	mov	r2, r4
    6500:	sub	r6, r0, r1
    6504:	ldr	r0, [sp, #8]
    6508:	ldr	r1, [sp, #16]
    650c:	mul	sl, r6, r0
    6510:	ldr	r0, [sp, #20]
    6514:	mov	r3, sl
    6518:	bl	32b8 <InflateData>
    651c:	cmp	r6, #1
    6520:	blt	6bf4 <ReadCompressedDoubleData+0x16f4>
    6524:	sub	r5, r8, r5
    6528:	mov	r0, r4
    652c:	bl	1b84 <Mat_int64Swap>
    6530:	bl	582ac <__aeabi_l2d>
    6534:	strd	r0, [r7]
    6538:	add	r7, r7, #8
    653c:	add	r4, r4, #8
    6540:	subs	r5, r5, #1
    6544:	bne	6528 <ReadCompressedDoubleData+0x1028>
    6548:	b	6bf4 <ReadCompressedDoubleData+0x16f4>
    654c:	sub	r8, r6, #128	; 0x80
    6550:	add	r0, r9, #1024	; 0x400
    6554:	lsl	sl, r2, #7
    6558:	mov	r1, #0
    655c:	add	r6, sp, #24
    6560:	str	r2, [sp, #8]
    6564:	mov	r5, r1
    6568:	mov	r7, r0
    656c:	ldr	r0, [sp, #20]
    6570:	ldr	r1, [sp, #16]
    6574:	mov	r2, r6
    6578:	mov	r3, sl
    657c:	bl	32b8 <InflateData>
    6580:	mov	r4, #0
    6584:	add	r0, r6, r4
    6588:	bl	1bd4 <Mat_uint64Swap>
    658c:	bl	58298 <__aeabi_ul2d>
    6590:	mov	r2, r9
    6594:	str	r0, [r2, r4]!
    6598:	add	r4, r4, #8
    659c:	cmp	r4, #1024	; 0x400
    65a0:	str	r1, [r2, #4]
    65a4:	bne	6584 <ReadCompressedDoubleData+0x1084>
    65a8:	add	r1, r5, #128	; 0x80
    65ac:	add	r9, r9, #1024	; 0x400
    65b0:	add	r0, r7, #1024	; 0x400
    65b4:	cmp	r1, r8
    65b8:	blt	6564 <ReadCompressedDoubleData+0x1064>
    65bc:	ldr	r0, [fp, #8]
    65c0:	add	r4, sp, #24
    65c4:	mov	r2, r4
    65c8:	sub	r6, r0, r1
    65cc:	ldr	r0, [sp, #8]
    65d0:	ldr	r1, [sp, #16]
    65d4:	mul	sl, r6, r0
    65d8:	ldr	r0, [sp, #20]
    65dc:	mov	r3, sl
    65e0:	bl	32b8 <InflateData>
    65e4:	cmp	r6, #1
    65e8:	blt	6bf4 <ReadCompressedDoubleData+0x16f4>
    65ec:	sub	r5, r8, r5
    65f0:	mov	r0, r4
    65f4:	bl	1bd4 <Mat_uint64Swap>
    65f8:	bl	58298 <__aeabi_ul2d>
    65fc:	strd	r0, [r7]
    6600:	add	r7, r7, #8
    6604:	add	r4, r4, #8
    6608:	subs	r5, r5, #1
    660c:	bne	65f0 <ReadCompressedDoubleData+0x10f0>
    6610:	b	6bf4 <ReadCompressedDoubleData+0x16f4>
    6614:	sub	r1, r6, #512	; 0x200
    6618:	add	r0, r9, #4096	; 0x1000
    661c:	str	r2, [sp, #8]
    6620:	lsl	r5, r2, #9
    6624:	mov	r2, #512	; 0x200
    6628:	add	r6, sp, #24
    662c:	mov	r4, r9
    6630:	str	r1, [sp, #12]
    6634:	mov	r1, #0
    6638:	mov	sl, r1
    663c:	mov	r8, r0
    6640:	ldr	r0, [sp, #20]
    6644:	ldr	r1, [sp, #16]
    6648:	mov	r7, r2
    664c:	mov	r2, r6
    6650:	mov	r3, r5
    6654:	bl	32b8 <InflateData>
    6658:	mov	r0, r4
    665c:	mov	r1, #0
    6660:	add	r2, r6, r1
    6664:	add	r1, r1, #4
    6668:	vld1.32	{d16[0]}, [r2 :32]
    666c:	cmp	r1, #1024	; 0x400
    6670:	vmovl.s16	q0, d16
    6674:	vcvt.f64.s32	d17, s1
    6678:	vcvt.f64.s32	d16, s0
    667c:	vst1.64	{d16-d17}, [r0]!
    6680:	bne	6660 <ReadCompressedDoubleData+0x1160>
    6684:	ldr	r3, [sp, #12]
    6688:	add	r1, sl, #512	; 0x200
    668c:	add	r4, r4, #4096	; 0x1000
    6690:	add	r0, r8, #4096	; 0x1000
    6694:	add	r2, r7, #512	; 0x200
    6698:	cmp	r1, r3
    669c:	blt	6638 <ReadCompressedDoubleData+0x1138>
    66a0:	ldr	r0, [fp, #8]
    66a4:	add	r5, sp, #24
    66a8:	mov	r2, r5
    66ac:	sub	r4, r0, r1
    66b0:	ldr	r0, [sp, #8]
    66b4:	ldr	r1, [sp, #16]
    66b8:	mul	r3, r4, r0
    66bc:	ldr	r0, [sp, #20]
    66c0:	mov	r6, r3
    66c4:	bl	32b8 <InflateData>
    66c8:	cmp	r4, #1
    66cc:	blt	6bf0 <ReadCompressedDoubleData+0x16f0>
    66d0:	mov	r0, #0
    66d4:	beq	6710 <ReadCompressedDoubleData+0x1210>
    66d8:	ldr	r0, [sp, #12]
    66dc:	sub	r0, r0, sl
    66e0:	bic	r1, r0, #1
    66e4:	bic	r0, r4, #1
    66e8:	vld1.32	{d16[0]}, [r5 :32]
    66ec:	subs	r1, r1, #2
    66f0:	add	r5, r5, #4
    66f4:	vmovl.s16	q0, d16
    66f8:	vcvt.f64.s32	d17, s1
    66fc:	vcvt.f64.s32	d16, s0
    6700:	vst1.64	{d16-d17}, [r8]!
    6704:	bne	66e8 <ReadCompressedDoubleData+0x11e8>
    6708:	cmp	r4, r0
    670c:	beq	6bf0 <ReadCompressedDoubleData+0x16f0>
    6710:	ldr	r3, [sp, #12]
    6714:	add	r1, sp, #24
    6718:	add	r2, r0, r7
    671c:	add	r1, r1, r0, lsl #1
    6720:	add	r2, r9, r2, lsl #3
    6724:	sub	r3, r3, sl
    6728:	sub	r0, r3, r0
    672c:	ldrsh	r3, [r1], #2
    6730:	subs	r0, r0, #1
    6734:	vmov	s0, r3
    6738:	vcvt.f64.s32	d16, s0
    673c:	vstmia	r2!, {d16}
    6740:	bne	672c <ReadCompressedDoubleData+0x122c>
    6744:	b	6bf0 <ReadCompressedDoubleData+0x16f0>
    6748:	sub	r1, r6, #512	; 0x200
    674c:	add	r0, r9, #4096	; 0x1000
    6750:	str	r2, [sp, #8]
    6754:	lsl	r5, r2, #9
    6758:	mov	r2, #512	; 0x200
    675c:	add	r6, sp, #24
    6760:	mov	r4, r9
    6764:	str	r1, [sp, #12]
    6768:	mov	r1, #0
    676c:	mov	sl, r1
    6770:	mov	r8, r0
    6774:	ldr	r0, [sp, #20]
    6778:	ldr	r1, [sp, #16]
    677c:	mov	r7, r2
    6780:	mov	r2, r6
    6784:	mov	r3, r5
    6788:	bl	32b8 <InflateData>
    678c:	mov	r0, r4
    6790:	mov	r1, #0
    6794:	add	r2, r6, r1
    6798:	add	r1, r1, #4
    679c:	vld1.32	{d16[0]}, [r2 :32]
    67a0:	cmp	r1, #1024	; 0x400
    67a4:	vmovl.u16	q0, d16
    67a8:	vcvt.f64.u32	d17, s1
    67ac:	vcvt.f64.u32	d16, s0
    67b0:	vst1.64	{d16-d17}, [r0]!
    67b4:	bne	6794 <ReadCompressedDoubleData+0x1294>
    67b8:	ldr	r3, [sp, #12]
    67bc:	add	r1, sl, #512	; 0x200
    67c0:	add	r4, r4, #4096	; 0x1000
    67c4:	add	r0, r8, #4096	; 0x1000
    67c8:	add	r2, r7, #512	; 0x200
    67cc:	cmp	r1, r3
    67d0:	blt	676c <ReadCompressedDoubleData+0x126c>
    67d4:	ldr	r0, [fp, #8]
    67d8:	add	r5, sp, #24
    67dc:	mov	r2, r5
    67e0:	sub	r4, r0, r1
    67e4:	ldr	r0, [sp, #8]
    67e8:	ldr	r1, [sp, #16]
    67ec:	mul	r3, r4, r0
    67f0:	ldr	r0, [sp, #20]
    67f4:	mov	r6, r3
    67f8:	bl	32b8 <InflateData>
    67fc:	cmp	r4, #1
    6800:	blt	6bf0 <ReadCompressedDoubleData+0x16f0>
    6804:	mov	r0, #0
    6808:	beq	6844 <ReadCompressedDoubleData+0x1344>
    680c:	ldr	r0, [sp, #12]
    6810:	sub	r0, r0, sl
    6814:	bic	r1, r0, #1
    6818:	bic	r0, r4, #1
    681c:	vld1.32	{d16[0]}, [r5 :32]
    6820:	subs	r1, r1, #2
    6824:	add	r5, r5, #4
    6828:	vmovl.u16	q0, d16
    682c:	vcvt.f64.u32	d17, s1
    6830:	vcvt.f64.u32	d16, s0
    6834:	vst1.64	{d16-d17}, [r8]!
    6838:	bne	681c <ReadCompressedDoubleData+0x131c>
    683c:	cmp	r4, r0
    6840:	beq	6bf0 <ReadCompressedDoubleData+0x16f0>
    6844:	ldr	r3, [sp, #12]
    6848:	add	r1, sp, #24
    684c:	add	r2, r0, r7
    6850:	add	r1, r1, r0, lsl #1
    6854:	add	r2, r9, r2, lsl #3
    6858:	sub	r3, r3, sl
    685c:	sub	r0, r3, r0
    6860:	ldrh	r3, [r1], #2
    6864:	subs	r0, r0, #1
    6868:	vmov	s0, r3
    686c:	vcvt.f64.u32	d16, s0
    6870:	vstmia	r2!, {d16}
    6874:	bne	6860 <ReadCompressedDoubleData+0x1360>
    6878:	b	6bf0 <ReadCompressedDoubleData+0x16f0>
    687c:	sub	r1, r6, #256	; 0x100
    6880:	add	r0, r9, #2048	; 0x800
    6884:	str	r2, [sp, #8]
    6888:	lsl	r5, r2, #8
    688c:	mov	r2, #256	; 0x100
    6890:	add	r6, sp, #24
    6894:	mov	r4, r9
    6898:	str	r1, [sp, #12]
    689c:	mov	r1, #0
    68a0:	mov	sl, r1
    68a4:	mov	r8, r0
    68a8:	ldr	r0, [sp, #20]
    68ac:	ldr	r1, [sp, #16]
    68b0:	mov	r7, r2
    68b4:	mov	r2, r6
    68b8:	mov	r3, r5
    68bc:	bl	32b8 <InflateData>
    68c0:	mov	r0, r4
    68c4:	mov	r1, #0
    68c8:	add	r2, r6, r1
    68cc:	add	r1, r1, #8
    68d0:	vldr	d0, [r2]
    68d4:	cmp	r1, #1024	; 0x400
    68d8:	vcvt.f64.s32	d17, s1
    68dc:	vcvt.f64.s32	d16, s0
    68e0:	vst1.64	{d16-d17}, [r0]!
    68e4:	bne	68c8 <ReadCompressedDoubleData+0x13c8>
    68e8:	ldr	r3, [sp, #12]
    68ec:	add	r1, sl, #256	; 0x100
    68f0:	add	r4, r4, #2048	; 0x800
    68f4:	add	r0, r8, #2048	; 0x800
    68f8:	add	r2, r7, #256	; 0x100
    68fc:	cmp	r1, r3
    6900:	blt	68a0 <ReadCompressedDoubleData+0x13a0>
    6904:	ldr	r0, [fp, #8]
    6908:	add	r5, sp, #24
    690c:	mov	r2, r5
    6910:	sub	r4, r0, r1
    6914:	ldr	r0, [sp, #8]
    6918:	ldr	r1, [sp, #16]
    691c:	mul	r3, r4, r0
    6920:	ldr	r0, [sp, #20]
    6924:	mov	r6, r3
    6928:	bl	32b8 <InflateData>
    692c:	cmp	r4, #1
    6930:	blt	6bf0 <ReadCompressedDoubleData+0x16f0>
    6934:	mov	r0, #0
    6938:	beq	696c <ReadCompressedDoubleData+0x146c>
    693c:	ldr	r0, [sp, #12]
    6940:	sub	r0, r0, sl
    6944:	bic	r1, r0, #1
    6948:	bic	r0, r4, #1
    694c:	vld1.32	{d0}, [r5 :64]!
    6950:	subs	r1, r1, #2
    6954:	vcvt.f64.s32	d17, s1
    6958:	vcvt.f64.s32	d16, s0
    695c:	vst1.64	{d16-d17}, [r8]!
    6960:	bne	694c <ReadCompressedDoubleData+0x144c>
    6964:	cmp	r4, r0
    6968:	beq	6bf0 <ReadCompressedDoubleData+0x16f0>
    696c:	ldr	r3, [sp, #12]
    6970:	add	r1, sp, #24
    6974:	add	r2, r0, r7
    6978:	add	r1, r1, r0, lsl #2
    697c:	add	r2, r9, r2, lsl #3
    6980:	sub	r3, r3, sl
    6984:	sub	r0, r3, r0
    6988:	ldr	r3, [r1], #4
    698c:	subs	r0, r0, #1
    6990:	vmov	s0, r3
    6994:	vcvt.f64.s32	d16, s0
    6998:	vstmia	r2!, {d16}
    699c:	bne	6988 <ReadCompressedDoubleData+0x1488>
    69a0:	b	6bf0 <ReadCompressedDoubleData+0x16f0>
    69a4:	sub	r1, r6, #256	; 0x100
    69a8:	add	r0, r9, #2048	; 0x800
    69ac:	str	r2, [sp, #8]
    69b0:	lsl	r5, r2, #8
    69b4:	mov	r2, #256	; 0x100
    69b8:	add	r6, sp, #24
    69bc:	mov	r4, r9
    69c0:	str	r1, [sp, #12]
    69c4:	mov	r1, #0
    69c8:	mov	sl, r1
    69cc:	mov	r8, r0
    69d0:	ldr	r0, [sp, #20]
    69d4:	ldr	r1, [sp, #16]
    69d8:	mov	r7, r2
    69dc:	mov	r2, r6
    69e0:	mov	r3, r5
    69e4:	bl	32b8 <InflateData>
    69e8:	mov	r0, r4
    69ec:	mov	r1, #0
    69f0:	add	r2, r6, r1
    69f4:	add	r1, r1, #8
    69f8:	vldr	d0, [r2]
    69fc:	cmp	r1, #1024	; 0x400
    6a00:	vcvt.f64.u32	d17, s1
    6a04:	vcvt.f64.u32	d16, s0
    6a08:	vst1.64	{d16-d17}, [r0]!
    6a0c:	bne	69f0 <ReadCompressedDoubleData+0x14f0>
    6a10:	ldr	r3, [sp, #12]
    6a14:	add	r1, sl, #256	; 0x100
    6a18:	add	r4, r4, #2048	; 0x800
    6a1c:	add	r0, r8, #2048	; 0x800
    6a20:	add	r2, r7, #256	; 0x100
    6a24:	cmp	r1, r3
    6a28:	blt	69c8 <ReadCompressedDoubleData+0x14c8>
    6a2c:	ldr	r0, [fp, #8]
    6a30:	add	r5, sp, #24
    6a34:	mov	r2, r5
    6a38:	sub	r4, r0, r1
    6a3c:	ldr	r0, [sp, #8]
    6a40:	ldr	r1, [sp, #16]
    6a44:	mul	r3, r4, r0
    6a48:	ldr	r0, [sp, #20]
    6a4c:	mov	r6, r3
    6a50:	bl	32b8 <InflateData>
    6a54:	cmp	r4, #1
    6a58:	blt	6bf0 <ReadCompressedDoubleData+0x16f0>
    6a5c:	mov	r0, #0
    6a60:	beq	6a94 <ReadCompressedDoubleData+0x1594>
    6a64:	ldr	r0, [sp, #12]
    6a68:	sub	r0, r0, sl
    6a6c:	bic	r1, r0, #1
    6a70:	bic	r0, r4, #1
    6a74:	vld1.32	{d0}, [r5 :64]!
    6a78:	subs	r1, r1, #2
    6a7c:	vcvt.f64.u32	d17, s1
    6a80:	vcvt.f64.u32	d16, s0
    6a84:	vst1.64	{d16-d17}, [r8]!
    6a88:	bne	6a74 <ReadCompressedDoubleData+0x1574>
    6a8c:	cmp	r4, r0
    6a90:	beq	6bf0 <ReadCompressedDoubleData+0x16f0>
    6a94:	ldr	r3, [sp, #12]
    6a98:	add	r1, sp, #24
    6a9c:	add	r2, r0, r7
    6aa0:	add	r1, r1, r0, lsl #2
    6aa4:	add	r2, r9, r2, lsl #3
    6aa8:	sub	r3, r3, sl
    6aac:	sub	r0, r3, r0
    6ab0:	ldr	r3, [r1], #4
    6ab4:	subs	r0, r0, #1
    6ab8:	vmov	s0, r3
    6abc:	vcvt.f64.u32	d16, s0
    6ac0:	vstmia	r2!, {d16}
    6ac4:	bne	6ab0 <ReadCompressedDoubleData+0x15b0>
    6ac8:	b	6bf0 <ReadCompressedDoubleData+0x16f0>
    6acc:	sub	r1, r6, #256	; 0x100
    6ad0:	add	r0, r9, #2048	; 0x800
    6ad4:	str	r2, [sp, #8]
    6ad8:	lsl	r5, r2, #8
    6adc:	mov	r2, #256	; 0x100
    6ae0:	add	r6, sp, #24
    6ae4:	mov	r4, r9
    6ae8:	str	r1, [sp, #12]
    6aec:	mov	r1, #0
    6af0:	mov	sl, r1
    6af4:	mov	r8, r0
    6af8:	ldr	r0, [sp, #20]
    6afc:	ldr	r1, [sp, #16]
    6b00:	mov	r7, r2
    6b04:	mov	r2, r6
    6b08:	mov	r3, r5
    6b0c:	bl	32b8 <InflateData>
    6b10:	mov	r0, r4
    6b14:	mov	r1, #0
    6b18:	add	r2, r6, r1
    6b1c:	add	r1, r1, #8
    6b20:	vldr	d0, [r2]
    6b24:	cmp	r1, #1024	; 0x400
    6b28:	vcvt.f64.f32	d17, s1
    6b2c:	vcvt.f64.f32	d16, s0
    6b30:	vst1.64	{d16-d17}, [r0]!
    6b34:	bne	6b18 <ReadCompressedDoubleData+0x1618>
    6b38:	ldr	r3, [sp, #12]
    6b3c:	add	r1, sl, #256	; 0x100
    6b40:	add	r4, r4, #2048	; 0x800
    6b44:	add	r0, r8, #2048	; 0x800
    6b48:	add	r2, r7, #256	; 0x100
    6b4c:	cmp	r1, r3
    6b50:	blt	6af0 <ReadCompressedDoubleData+0x15f0>
    6b54:	ldr	r0, [fp, #8]
    6b58:	add	r5, sp, #24
    6b5c:	mov	r2, r5
    6b60:	sub	r4, r0, r1
    6b64:	ldr	r0, [sp, #8]
    6b68:	ldr	r1, [sp, #16]
    6b6c:	mul	r3, r4, r0
    6b70:	ldr	r0, [sp, #20]
    6b74:	mov	r6, r3
    6b78:	bl	32b8 <InflateData>
    6b7c:	cmp	r4, #1
    6b80:	blt	6bf0 <ReadCompressedDoubleData+0x16f0>
    6b84:	mov	r0, #0
    6b88:	beq	6bbc <ReadCompressedDoubleData+0x16bc>
    6b8c:	ldr	r0, [sp, #12]
    6b90:	sub	r0, r0, sl
    6b94:	bic	r1, r0, #1
    6b98:	bic	r0, r4, #1
    6b9c:	vld1.32	{d0}, [r5 :64]!
    6ba0:	subs	r1, r1, #2
    6ba4:	vcvt.f64.f32	d17, s1
    6ba8:	vcvt.f64.f32	d16, s0
    6bac:	vst1.64	{d16-d17}, [r8]!
    6bb0:	bne	6b9c <ReadCompressedDoubleData+0x169c>
    6bb4:	cmp	r4, r0
    6bb8:	beq	6bf0 <ReadCompressedDoubleData+0x16f0>
    6bbc:	ldr	r3, [sp, #12]
    6bc0:	add	r1, sp, #24
    6bc4:	add	r2, r0, r7
    6bc8:	add	r1, r1, r0, lsl #2
    6bcc:	add	r2, r9, r2, lsl #3
    6bd0:	sub	r3, r3, sl
    6bd4:	sub	r0, r3, r0
    6bd8:	vldr	s0, [r1]
    6bdc:	subs	r0, r0, #1
    6be0:	add	r1, r1, #4
    6be4:	vcvt.f64.f32	d16, s0
    6be8:	vstmia	r2!, {d16}
    6bec:	bne	6bd8 <ReadCompressedDoubleData+0x16d8>
    6bf0:	mov	sl, r6
    6bf4:	mov	r0, sl
    6bf8:	sub	sp, fp, #48	; 0x30
    6bfc:	vpop	{d8-d9}
    6c00:	add	sp, sp, #4
    6c04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6c08:	lsl	r1, r2, #7
    6c0c:	str	r2, [sp, #8]
    6c10:	add	r0, r9, #1024	; 0x400
    6c14:	mov	r2, #128	; 0x80
    6c18:	add	r5, sp, #24
    6c1c:	mov	r7, r9
    6c20:	str	r1, [sp, #4]
    6c24:	sub	r1, r6, #128	; 0x80
    6c28:	str	r1, [sp, #12]
    6c2c:	mov	r1, #0
    6c30:	mov	sl, r1
    6c34:	mov	r6, r0
    6c38:	ldr	r0, [sp, #20]
    6c3c:	ldr	r1, [sp, #16]
    6c40:	ldr	r3, [sp, #4]
    6c44:	mov	r8, r2
    6c48:	mov	r2, r5
    6c4c:	bl	32b8 <InflateData>
    6c50:	mov	r4, #0
    6c54:	add	r0, r5, r4
    6c58:	vld1.64	{d8-d9}, [r0]
    6c5c:	vmov.32	r0, d9[0]
    6c60:	vmov.32	r1, d9[1]
    6c64:	bl	582ac <__aeabi_l2d>
    6c68:	vmov.32	r2, d8[0]
    6c6c:	vmov.32	r3, d8[1]
    6c70:	vmov	d9, r0, r1
    6c74:	mov	r0, r2
    6c78:	mov	r1, r3
    6c7c:	bl	582ac <__aeabi_l2d>
    6c80:	vmov	d8, r0, r1
    6c84:	add	r0, r7, r4
    6c88:	add	r4, r4, #16
    6c8c:	cmp	r4, #1024	; 0x400
    6c90:	vst1.64	{d8-d9}, [r0]
    6c94:	bne	6c54 <ReadCompressedDoubleData+0x1754>
    6c98:	ldr	r3, [sp, #12]
    6c9c:	add	r1, sl, #128	; 0x80
    6ca0:	add	r7, r7, #1024	; 0x400
    6ca4:	add	r0, r6, #1024	; 0x400
    6ca8:	add	r2, r8, #128	; 0x80
    6cac:	cmp	r1, r3
    6cb0:	blt	6c30 <ReadCompressedDoubleData+0x1730>
    6cb4:	ldr	r0, [fp, #8]
    6cb8:	add	r5, sp, #24
    6cbc:	mov	r4, sl
    6cc0:	mov	r2, r5
    6cc4:	sub	r7, r0, r1
    6cc8:	ldr	r0, [sp, #8]
    6ccc:	ldr	r1, [sp, #16]
    6cd0:	mul	r3, r7, r0
    6cd4:	ldr	r0, [sp, #20]
    6cd8:	str	r3, [sp, #20]
    6cdc:	bl	32b8 <InflateData>
    6ce0:	cmp	r7, #1
    6ce4:	blt	6f14 <ReadCompressedDoubleData+0x1a14>
    6ce8:	mov	r2, #0
    6cec:	beq	6d50 <ReadCompressedDoubleData+0x1850>
    6cf0:	ldr	r0, [sp, #12]
    6cf4:	mov	r1, r7
    6cf8:	sub	r0, r0, r4
    6cfc:	bic	r4, r0, #1
    6d00:	bic	r0, r1, #1
    6d04:	str	r0, [sp, #16]
    6d08:	vld1.64	{d8-d9}, [r5]!
    6d0c:	vmov.32	r0, d9[0]
    6d10:	vmov.32	r1, d9[1]
    6d14:	bl	582ac <__aeabi_l2d>
    6d18:	vmov.32	r2, d8[0]
    6d1c:	vmov.32	r3, d8[1]
    6d20:	vmov	d9, r0, r1
    6d24:	mov	r0, r2
    6d28:	mov	r1, r3
    6d2c:	bl	582ac <__aeabi_l2d>
    6d30:	vmov	d8, r0, r1
    6d34:	subs	r4, r4, #2
    6d38:	vst1.64	{d8-d9}, [r6]!
    6d3c:	bne	6d08 <ReadCompressedDoubleData+0x1808>
    6d40:	ldr	r2, [sp, #16]
    6d44:	mov	r4, sl
    6d48:	cmp	r7, r2
    6d4c:	beq	6f14 <ReadCompressedDoubleData+0x1a14>
    6d50:	add	r0, sp, #24
    6d54:	mov	r1, r4
    6d58:	add	r4, r0, r2, lsl #3
    6d5c:	add	r0, r2, r8
    6d60:	add	r5, r9, r0, lsl #3
    6d64:	ldr	r0, [sp, #12]
    6d68:	sub	r0, r0, r1
    6d6c:	sub	r6, r0, r2
    6d70:	ldrd	r0, [r4]
    6d74:	bl	582ac <__aeabi_l2d>
    6d78:	strd	r0, [r5]
    6d7c:	add	r5, r5, #8
    6d80:	add	r4, r4, #8
    6d84:	subs	r6, r6, #1
    6d88:	bne	6d70 <ReadCompressedDoubleData+0x1870>
    6d8c:	b	6f14 <ReadCompressedDoubleData+0x1a14>
    6d90:	lsl	r1, r2, #7
    6d94:	str	r2, [sp, #8]
    6d98:	add	r0, r9, #1024	; 0x400
    6d9c:	mov	r2, #128	; 0x80
    6da0:	add	r5, sp, #24
    6da4:	mov	r7, r9
    6da8:	str	r1, [sp, #4]
    6dac:	sub	r1, r6, #128	; 0x80
    6db0:	str	r1, [sp, #12]
    6db4:	mov	r1, #0
    6db8:	mov	sl, r1
    6dbc:	mov	r6, r0
    6dc0:	ldr	r0, [sp, #20]
    6dc4:	ldr	r1, [sp, #16]
    6dc8:	ldr	r3, [sp, #4]
    6dcc:	mov	r8, r2
    6dd0:	mov	r2, r5
    6dd4:	bl	32b8 <InflateData>
    6dd8:	mov	r4, #0
    6ddc:	add	r0, r5, r4
    6de0:	vld1.64	{d8-d9}, [r0]
    6de4:	vmov.32	r0, d9[0]
    6de8:	vmov.32	r1, d9[1]
    6dec:	bl	58298 <__aeabi_ul2d>
    6df0:	vmov.32	r2, d8[0]
    6df4:	vmov.32	r3, d8[1]
    6df8:	vmov	d9, r0, r1
    6dfc:	mov	r0, r2
    6e00:	mov	r1, r3
    6e04:	bl	58298 <__aeabi_ul2d>
    6e08:	vmov	d8, r0, r1
    6e0c:	add	r0, r7, r4
    6e10:	add	r4, r4, #16
    6e14:	cmp	r4, #1024	; 0x400
    6e18:	vst1.64	{d8-d9}, [r0]
    6e1c:	bne	6ddc <ReadCompressedDoubleData+0x18dc>
    6e20:	ldr	r3, [sp, #12]
    6e24:	add	r1, sl, #128	; 0x80
    6e28:	add	r7, r7, #1024	; 0x400
    6e2c:	add	r0, r6, #1024	; 0x400
    6e30:	add	r2, r8, #128	; 0x80
    6e34:	cmp	r1, r3
    6e38:	blt	6db8 <ReadCompressedDoubleData+0x18b8>
    6e3c:	ldr	r0, [fp, #8]
    6e40:	add	r5, sp, #24
    6e44:	mov	r4, sl
    6e48:	mov	r2, r5
    6e4c:	sub	r7, r0, r1
    6e50:	ldr	r0, [sp, #8]
    6e54:	ldr	r1, [sp, #16]
    6e58:	mul	r3, r7, r0
    6e5c:	ldr	r0, [sp, #20]
    6e60:	str	r3, [sp, #20]
    6e64:	bl	32b8 <InflateData>
    6e68:	cmp	r7, #1
    6e6c:	blt	6f14 <ReadCompressedDoubleData+0x1a14>
    6e70:	mov	r2, #0
    6e74:	beq	6ed8 <ReadCompressedDoubleData+0x19d8>
    6e78:	ldr	r0, [sp, #12]
    6e7c:	mov	r1, r7
    6e80:	sub	r0, r0, r4
    6e84:	bic	r4, r0, #1
    6e88:	bic	r0, r1, #1
    6e8c:	str	r0, [sp, #16]
    6e90:	vld1.64	{d8-d9}, [r5]!
    6e94:	vmov.32	r0, d9[0]
    6e98:	vmov.32	r1, d9[1]
    6e9c:	bl	58298 <__aeabi_ul2d>
    6ea0:	vmov.32	r2, d8[0]
    6ea4:	vmov.32	r3, d8[1]
    6ea8:	vmov	d9, r0, r1
    6eac:	mov	r0, r2
    6eb0:	mov	r1, r3
    6eb4:	bl	58298 <__aeabi_ul2d>
    6eb8:	vmov	d8, r0, r1
    6ebc:	subs	r4, r4, #2
    6ec0:	vst1.64	{d8-d9}, [r6]!
    6ec4:	bne	6e90 <ReadCompressedDoubleData+0x1990>
    6ec8:	ldr	r2, [sp, #16]
    6ecc:	mov	r4, sl
    6ed0:	cmp	r7, r2
    6ed4:	beq	6f14 <ReadCompressedDoubleData+0x1a14>
    6ed8:	add	r0, sp, #24
    6edc:	mov	r1, r4
    6ee0:	add	r4, r0, r2, lsl #3
    6ee4:	add	r0, r2, r8
    6ee8:	add	r5, r9, r0, lsl #3
    6eec:	ldr	r0, [sp, #12]
    6ef0:	sub	r0, r0, r1
    6ef4:	sub	r6, r0, r2
    6ef8:	ldrd	r0, [r4]
    6efc:	bl	58298 <__aeabi_ul2d>
    6f00:	strd	r0, [r5]
    6f04:	add	r5, r5, #8
    6f08:	add	r4, r4, #8
    6f0c:	subs	r6, r6, #1
    6f10:	bne	6ef8 <ReadCompressedDoubleData+0x19f8>
    6f14:	ldr	sl, [sp, #20]
    6f18:	b	6bf4 <ReadCompressedDoubleData+0x16f4>

00006f1c <ReadSingleData>:
    6f1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f20:	add	fp, sp, #28
    6f24:	sub	sp, sp, #4
    6f28:	vpush	{d8-d9}
    6f2c:	sub	sp, sp, #2128	; 0x850
    6f30:	mov	r4, r0
    6f34:	mov	r0, #0
    6f38:	cmp	r4, #0
    6f3c:	beq	8e38 <ReadSingleData+0x1f1c>
    6f40:	cmp	r1, #0
    6f44:	mov	r6, r1
    6f48:	ldrne	r1, [r4]
    6f4c:	cmpne	r1, #0
    6f50:	beq	8e38 <ReadSingleData+0x1f1c>
    6f54:	mov	r0, r2
    6f58:	mov	r8, r3
    6f5c:	mov	r5, r2
    6f60:	bl	1924 <Mat_SizeOf@plt>
    6f64:	mov	ip, r0
    6f68:	sub	r0, r5, #1
    6f6c:	mov	r9, #0
    6f70:	str	r4, [sp, #28]
    6f74:	cmp	r0, #11
    6f78:	bhi	8a84 <ReadSingleData+0x1b68>
    6f7c:	add	r1, pc, #4
    6f80:	ldr	r0, [r1, r0, lsl #2]
    6f84:	add	pc, r1, r0
    6f88:	.word	0x00000030
    6f8c:	.word	0x000000dc
    6f90:	.word	0x00000188
    6f94:	.word	0x000001ec
    6f98:	.word	0x00000250
    6f9c:	.word	0x000002b4
    6fa0:	.word	0x00000318
    6fa4:	.word	0x00001afc
    6fa8:	.word	0x00000374
    6fac:	.word	0x00001afc
    6fb0:	.word	0x00001afc
    6fb4:	.word	0x000003d4
    6fb8:	cmp	r8, #256	; 0x100
    6fbc:	bgt	73c8 <ReadSingleData+0x4ac>
    6fc0:	ldr	r3, [r4]
    6fc4:	add	r4, sp, #72	; 0x48
    6fc8:	mov	r1, ip
    6fcc:	mov	r2, r8
    6fd0:	mov	r5, ip
    6fd4:	mov	r0, r4
    6fd8:	bl	18b8 <fread@plt>
    6fdc:	mov	r9, r0
    6fe0:	cmp	r8, #1
    6fe4:	blt	8ae4 <ReadSingleData+0x1bc8>
    6fe8:	mov	r0, #0
    6fec:	cmp	r8, #4
    6ff0:	mov	ip, r5
    6ff4:	bcc	7034 <ReadSingleData+0x118>
    6ff8:	bic	r0, r8, #3
    6ffc:	add	r1, sp, #48	; 0x30
    7000:	mov	r3, r6
    7004:	mov	r2, r0
    7008:	ldr	r7, [r4], #4
    700c:	subs	r2, r2, #4
    7010:	str	r7, [sp, #48]	; 0x30
    7014:	vld1.32	{d16[0]}, [r1 :32]
    7018:	vmovl.s8	q8, d16
    701c:	vmovl.s16	q8, d16
    7020:	vcvt.f32.s32	q8, q8
    7024:	vst1.32	{d16-d17}, [r3]!
    7028:	bne	7008 <ReadSingleData+0xec>
    702c:	cmp	r0, r8
    7030:	beq	8e34 <ReadSingleData+0x1f18>
    7034:	add	r3, sp, #72	; 0x48
    7038:	sub	r1, r8, r0
    703c:	add	r2, r6, r0, lsl #2
    7040:	add	r0, r3, r0
    7044:	ldrsb	r3, [r0], #1
    7048:	subs	r1, r1, #1
    704c:	vmov	s0, r3
    7050:	vcvt.f32.s32	s0, s0
    7054:	vstr	s0, [r2]
    7058:	add	r2, r2, #4
    705c:	bne	7044 <ReadSingleData+0x128>
    7060:	b	8e34 <ReadSingleData+0x1f18>
    7064:	cmp	r8, #256	; 0x100
    7068:	bgt	752c <ReadSingleData+0x610>
    706c:	ldr	r3, [r4]
    7070:	add	r4, sp, #72	; 0x48
    7074:	mov	r1, ip
    7078:	mov	r2, r8
    707c:	mov	r5, ip
    7080:	mov	r0, r4
    7084:	bl	18b8 <fread@plt>
    7088:	mov	r9, r0
    708c:	cmp	r8, #1
    7090:	blt	8ae4 <ReadSingleData+0x1bc8>
    7094:	mov	r0, #0
    7098:	cmp	r8, #4
    709c:	mov	ip, r5
    70a0:	bcc	70e0 <ReadSingleData+0x1c4>
    70a4:	bic	r0, r8, #3
    70a8:	add	r1, sp, #60	; 0x3c
    70ac:	mov	r3, r6
    70b0:	mov	r2, r0
    70b4:	ldr	r7, [r4], #4
    70b8:	subs	r2, r2, #4
    70bc:	str	r7, [sp, #60]	; 0x3c
    70c0:	vld1.32	{d16[0]}, [r1 :32]
    70c4:	vmovl.u8	q8, d16
    70c8:	vmovl.u16	q8, d16
    70cc:	vcvt.f32.u32	q8, q8
    70d0:	vst1.32	{d16-d17}, [r3]!
    70d4:	bne	70b4 <ReadSingleData+0x198>
    70d8:	cmp	r0, r8
    70dc:	beq	8e34 <ReadSingleData+0x1f18>
    70e0:	add	r3, sp, #72	; 0x48
    70e4:	sub	r1, r8, r0
    70e8:	add	r2, r6, r0, lsl #2
    70ec:	add	r0, r3, r0
    70f0:	ldrb	r3, [r0], #1
    70f4:	subs	r1, r1, #1
    70f8:	vmov	s0, r3
    70fc:	vcvt.f32.u32	s0, s0
    7100:	vstr	s0, [r2]
    7104:	add	r2, r2, #4
    7108:	bne	70f0 <ReadSingleData+0x1d4>
    710c:	b	8e34 <ReadSingleData+0x1f18>
    7110:	ldr	r0, [r4, #20]
    7114:	cmp	r0, #0
    7118:	beq	7690 <ReadSingleData+0x774>
    711c:	cmp	r8, #256	; 0x100
    7120:	bgt	7a6c <ReadSingleData+0xb50>
    7124:	ldr	r3, [r4]
    7128:	add	r4, sp, #72	; 0x48
    712c:	mov	r1, ip
    7130:	mov	r2, r8
    7134:	mov	r5, ip
    7138:	mov	r0, r4
    713c:	bl	18b8 <fread@plt>
    7140:	mov	r9, r0
    7144:	cmp	r8, #1
    7148:	blt	8ae4 <ReadSingleData+0x1bc8>
    714c:	mov	r0, r4
    7150:	bl	1c18 <Mat_int16Swap>
    7154:	vmov	s0, r0
    7158:	subs	r8, r8, #1
    715c:	add	r4, r4, #2
    7160:	vcvt.f32.s32	s0, s0
    7164:	vstr	s0, [r6]
    7168:	add	r6, r6, #4
    716c:	bne	714c <ReadSingleData+0x230>
    7170:	b	8ae4 <ReadSingleData+0x1bc8>
    7174:	ldr	r0, [r4, #20]
    7178:	cmp	r0, #0
    717c:	beq	772c <ReadSingleData+0x810>
    7180:	cmp	r8, #256	; 0x100
    7184:	bgt	7b5c <ReadSingleData+0xc40>
    7188:	ldr	r3, [r4]
    718c:	add	r4, sp, #72	; 0x48
    7190:	mov	r1, ip
    7194:	mov	r2, r8
    7198:	mov	r5, ip
    719c:	mov	r0, r4
    71a0:	bl	18b8 <fread@plt>
    71a4:	mov	r9, r0
    71a8:	cmp	r8, #1
    71ac:	blt	8ae4 <ReadSingleData+0x1bc8>
    71b0:	mov	r0, r4
    71b4:	bl	1c2c <Mat_uint16Swap>
    71b8:	vmov	s0, r0
    71bc:	subs	r8, r8, #1
    71c0:	add	r4, r4, #2
    71c4:	vcvt.f32.u32	s0, s0
    71c8:	vstr	s0, [r6]
    71cc:	add	r6, r6, #4
    71d0:	bne	71b0 <ReadSingleData+0x294>
    71d4:	b	8ae4 <ReadSingleData+0x1bc8>
    71d8:	ldr	r0, [r4, #20]
    71dc:	cmp	r0, #0
    71e0:	beq	77c8 <ReadSingleData+0x8ac>
    71e4:	cmp	r8, #256	; 0x100
    71e8:	bgt	7c4c <ReadSingleData+0xd30>
    71ec:	ldr	r3, [r4]
    71f0:	add	r4, sp, #72	; 0x48
    71f4:	mov	r1, ip
    71f8:	mov	r2, r8
    71fc:	mov	r5, ip
    7200:	mov	r0, r4
    7204:	bl	18b8 <fread@plt>
    7208:	mov	r9, r0
    720c:	cmp	r8, #1
    7210:	blt	8ae4 <ReadSingleData+0x1bc8>
    7214:	mov	r0, r4
    7218:	bl	1bf0 <Mat_int32Swap>
    721c:	vmov	s0, r0
    7220:	subs	r8, r8, #1
    7224:	add	r4, r4, #4
    7228:	vcvt.f32.s32	s0, s0
    722c:	vstr	s0, [r6]
    7230:	add	r6, r6, #4
    7234:	bne	7214 <ReadSingleData+0x2f8>
    7238:	b	8ae4 <ReadSingleData+0x1bc8>
    723c:	ldr	r0, [r4, #20]
    7240:	cmp	r0, #0
    7244:	beq	7860 <ReadSingleData+0x944>
    7248:	cmp	r8, #256	; 0x100
    724c:	bgt	7d3c <ReadSingleData+0xe20>
    7250:	ldr	r3, [r4]
    7254:	add	r4, sp, #72	; 0x48
    7258:	mov	r1, ip
    725c:	mov	r2, r8
    7260:	mov	r5, ip
    7264:	mov	r0, r4
    7268:	bl	18b8 <fread@plt>
    726c:	mov	r9, r0
    7270:	cmp	r8, #1
    7274:	blt	8ae4 <ReadSingleData+0x1bc8>
    7278:	mov	r0, r4
    727c:	bl	1c04 <Mat_uint32Swap>
    7280:	vmov	s0, r0
    7284:	subs	r8, r8, #1
    7288:	add	r4, r4, #4
    728c:	vcvt.f32.u32	s0, s0
    7290:	vstr	s0, [r6]
    7294:	add	r6, r6, #4
    7298:	bne	7278 <ReadSingleData+0x35c>
    729c:	b	8ae4 <ReadSingleData+0x1bc8>
    72a0:	ldr	r0, [r4, #20]
    72a4:	cmp	r0, #0
    72a8:	beq	78f8 <ReadSingleData+0x9dc>
    72ac:	cmp	r8, #256	; 0x100
    72b0:	bgt	7e2c <ReadSingleData+0xf10>
    72b4:	ldr	r3, [r4]
    72b8:	add	r4, sp, #72	; 0x48
    72bc:	mov	r1, ip
    72c0:	mov	r2, r8
    72c4:	mov	r5, ip
    72c8:	mov	r0, r4
    72cc:	bl	18b8 <fread@plt>
    72d0:	mov	r9, r0
    72d4:	cmp	r8, #1
    72d8:	blt	8ae4 <ReadSingleData+0x1bc8>
    72dc:	mov	r0, r4
    72e0:	bl	1c44 <Mat_floatSwap>
    72e4:	vstr	s0, [r6]
    72e8:	subs	r8, r8, #1
    72ec:	add	r6, r6, #4
    72f0:	add	r4, r4, #4
    72f4:	bne	72dc <ReadSingleData+0x3c0>
    72f8:	b	8ae4 <ReadSingleData+0x1bc8>
    72fc:	ldr	r0, [r4, #20]
    7300:	cmp	r0, #0
    7304:	beq	7934 <ReadSingleData+0xa18>
    7308:	cmp	r8, #256	; 0x100
    730c:	bgt	7f0c <ReadSingleData+0xff0>
    7310:	ldr	r3, [r4]
    7314:	add	r4, sp, #72	; 0x48
    7318:	mov	r1, ip
    731c:	mov	r2, r8
    7320:	mov	r5, ip
    7324:	mov	r0, r4
    7328:	bl	18b8 <fread@plt>
    732c:	mov	r9, r0
    7330:	cmp	r8, #1
    7334:	blt	8ae4 <ReadSingleData+0x1bc8>
    7338:	mov	r0, r4
    733c:	bl	1c88 <Mat_doubleSwap>
    7340:	vcvt.f32.f64	s0, d0
    7344:	subs	r8, r8, #1
    7348:	add	r4, r4, #8
    734c:	vstr	s0, [r6]
    7350:	add	r6, r6, #4
    7354:	bne	7338 <ReadSingleData+0x41c>
    7358:	b	8ae4 <ReadSingleData+0x1bc8>
    735c:	ldr	r0, [r4, #20]
    7360:	cmp	r0, #0
    7364:	beq	79d4 <ReadSingleData+0xab8>
    7368:	cmp	r8, #256	; 0x100
    736c:	bgt	8008 <ReadSingleData+0x10ec>
    7370:	ldr	r3, [r4]
    7374:	add	r7, sp, #72	; 0x48
    7378:	mov	r1, ip
    737c:	mov	r2, r8
    7380:	mov	sl, ip
    7384:	mov	r0, r7
    7388:	bl	18b8 <fread@plt>
    738c:	mov	r9, r0
    7390:	cmp	r8, #1
    7394:	blt	89b8 <ReadSingleData+0x1a9c>
    7398:	str	r5, [sp, #8]
    739c:	mov	r4, r8
    73a0:	mov	r5, r6
    73a4:	mov	r0, r7
    73a8:	bl	1b84 <Mat_int64Swap>
    73ac:	bl	584e0 <__aeabi_l2f>
    73b0:	str	r0, [r5], #4
    73b4:	subs	r4, r4, #1
    73b8:	add	r7, r7, #8
    73bc:	bne	73a4 <ReadSingleData+0x488>
    73c0:	mov	ip, sl
    73c4:	b	8a7c <ReadSingleData+0x1b60>
    73c8:	sub	r1, r8, #256	; 0x100
    73cc:	add	r0, r6, #1024	; 0x400
    73d0:	mov	r2, #256	; 0x100
    73d4:	add	r7, sp, #72	; 0x48
    73d8:	add	r4, sp, #56	; 0x38
    73dc:	mov	r5, r6
    73e0:	mov	r9, #0
    73e4:	str	ip, [sp, #24]
    73e8:	str	r8, [sp, #12]
    73ec:	str	r6, [sp, #4]
    73f0:	str	r1, [sp, #20]
    73f4:	mov	r1, #0
    73f8:	mov	r6, r0
    73fc:	ldr	r0, [sp, #28]
    7400:	mov	sl, r1
    7404:	ldr	r1, [sp, #24]
    7408:	mov	r8, r2
    740c:	mov	r2, #256	; 0x100
    7410:	ldr	r3, [r0]
    7414:	mov	r0, r7
    7418:	bl	18b8 <fread@plt>
    741c:	mov	r1, r5
    7420:	mov	r2, #0
    7424:	ldr	r3, [r7, r2]
    7428:	add	r2, r2, #4
    742c:	cmp	r2, #256	; 0x100
    7430:	str	r3, [sp, #56]	; 0x38
    7434:	vld1.32	{d16[0]}, [r4 :32]
    7438:	vmovl.s8	q8, d16
    743c:	vmovl.s16	q8, d16
    7440:	vcvt.f32.s32	q8, q8
    7444:	vst1.32	{d16-d17}, [r1]!
    7448:	bne	7424 <ReadSingleData+0x508>
    744c:	ldr	r3, [sp, #20]
    7450:	add	r1, sl, #256	; 0x100
    7454:	add	r9, r0, r9
    7458:	add	r5, r5, #1024	; 0x400
    745c:	add	r0, r6, #1024	; 0x400
    7460:	add	r2, r8, #256	; 0x100
    7464:	cmp	r1, r3
    7468:	blt	73f8 <ReadSingleData+0x4dc>
    746c:	ldr	r0, [sp, #12]
    7470:	cmp	r1, r0
    7474:	bge	8e30 <ReadSingleData+0x1f14>
    7478:	sub	r7, r0, r1
    747c:	ldr	r0, [sp, #28]
    7480:	ldr	r1, [sp, #24]
    7484:	add	r4, sp, #72	; 0x48
    7488:	mov	r2, r7
    748c:	ldr	r3, [r0]
    7490:	mov	r0, r4
    7494:	bl	18b8 <fread@plt>
    7498:	add	r9, r0, r9
    749c:	cmp	r7, #1
    74a0:	blt	8e30 <ReadSingleData+0x1f14>
    74a4:	mov	r0, #0
    74a8:	cmp	r7, #4
    74ac:	bcc	74f0 <ReadSingleData+0x5d4>
    74b0:	ldr	r0, [sp, #20]
    74b4:	add	r2, sp, #52	; 0x34
    74b8:	sub	r0, r0, sl
    74bc:	bic	r1, r0, #3
    74c0:	bic	r0, r7, #3
    74c4:	ldr	r3, [r4], #4
    74c8:	subs	r1, r1, #4
    74cc:	str	r3, [sp, #52]	; 0x34
    74d0:	vld1.32	{d16[0]}, [r2 :32]
    74d4:	vmovl.s8	q8, d16
    74d8:	vmovl.s16	q8, d16
    74dc:	vcvt.f32.s32	q8, q8
    74e0:	vst1.32	{d16-d17}, [r6]!
    74e4:	bne	74c4 <ReadSingleData+0x5a8>
    74e8:	cmp	r7, r0
    74ec:	beq	8e30 <ReadSingleData+0x1f14>
    74f0:	ldr	r3, [sp, #4]
    74f4:	add	r2, r0, r8
    74f8:	add	r1, sp, #72	; 0x48
    74fc:	add	r1, r1, r0
    7500:	add	r2, r3, r2, lsl #2
    7504:	ldr	r3, [sp, #20]
    7508:	sub	r3, r3, sl
    750c:	sub	r0, r3, r0
    7510:	ldrsb	r3, [r1], #1
    7514:	subs	r0, r0, #1
    7518:	vmov	s0, r3
    751c:	vcvt.f32.s32	s0, s0
    7520:	vstmia	r2!, {s0}
    7524:	bne	7510 <ReadSingleData+0x5f4>
    7528:	b	8e30 <ReadSingleData+0x1f14>
    752c:	sub	r1, r8, #256	; 0x100
    7530:	add	r0, r6, #1024	; 0x400
    7534:	mov	r3, #0
    7538:	mov	r2, #256	; 0x100
    753c:	add	r7, sp, #72	; 0x48
    7540:	add	r5, sp, #68	; 0x44
    7544:	mov	r9, #0
    7548:	str	ip, [sp, #24]
    754c:	str	r8, [sp, #12]
    7550:	str	r6, [sp, #4]
    7554:	str	r1, [sp, #20]
    7558:	mov	r4, r0
    755c:	ldr	r0, [sp, #28]
    7560:	mov	sl, r3
    7564:	ldr	r1, [sp, #24]
    7568:	mov	r8, r2
    756c:	mov	r2, #256	; 0x100
    7570:	ldr	r3, [r0]
    7574:	mov	r0, r7
    7578:	bl	18b8 <fread@plt>
    757c:	mov	r1, r6
    7580:	mov	r2, #0
    7584:	ldr	r3, [r7, r2]
    7588:	add	r2, r2, #4
    758c:	cmp	r2, #256	; 0x100
    7590:	str	r3, [sp, #68]	; 0x44
    7594:	vld1.32	{d16[0]}, [r5 :32]
    7598:	vmovl.u8	q8, d16
    759c:	vmovl.u16	q8, d16
    75a0:	vcvt.f32.u32	q8, q8
    75a4:	vst1.32	{d16-d17}, [r1]!
    75a8:	bne	7584 <ReadSingleData+0x668>
    75ac:	ldr	r1, [sp, #20]
    75b0:	add	r3, sl, #256	; 0x100
    75b4:	add	r9, r0, r9
    75b8:	add	r6, r6, #1024	; 0x400
    75bc:	add	r0, r4, #1024	; 0x400
    75c0:	add	r2, r8, #256	; 0x100
    75c4:	cmp	r3, r1
    75c8:	blt	7558 <ReadSingleData+0x63c>
    75cc:	ldr	r0, [sp, #12]
    75d0:	cmp	r3, r0
    75d4:	bge	8e30 <ReadSingleData+0x1f14>
    75d8:	sub	r6, r0, r3
    75dc:	ldr	r0, [sp, #28]
    75e0:	ldr	r1, [sp, #24]
    75e4:	add	r7, sp, #72	; 0x48
    75e8:	mov	r2, r6
    75ec:	ldr	r3, [r0]
    75f0:	mov	r0, r7
    75f4:	mov	r5, r1
    75f8:	bl	18b8 <fread@plt>
    75fc:	add	r9, r0, r9
    7600:	cmp	r6, #1
    7604:	blt	8ae4 <ReadSingleData+0x1bc8>
    7608:	mov	r0, #0
    760c:	cmp	r6, #4
    7610:	bcc	7654 <ReadSingleData+0x738>
    7614:	ldr	r0, [sp, #20]
    7618:	add	r2, sp, #64	; 0x40
    761c:	sub	r0, r0, sl
    7620:	bic	r1, r0, #3
    7624:	bic	r0, r6, #3
    7628:	ldr	r3, [r7], #4
    762c:	subs	r1, r1, #4
    7630:	str	r3, [sp, #64]	; 0x40
    7634:	vld1.32	{d16[0]}, [r2 :32]
    7638:	vmovl.u8	q8, d16
    763c:	vmovl.u16	q8, d16
    7640:	vcvt.f32.u32	q8, q8
    7644:	vst1.32	{d16-d17}, [r4]!
    7648:	bne	7628 <ReadSingleData+0x70c>
    764c:	cmp	r6, r0
    7650:	beq	8ae4 <ReadSingleData+0x1bc8>
    7654:	ldr	r3, [sp, #4]
    7658:	add	r2, r0, r8
    765c:	add	r1, sp, #72	; 0x48
    7660:	add	r1, r1, r0
    7664:	add	r2, r3, r2, lsl #2
    7668:	ldr	r3, [sp, #20]
    766c:	sub	r3, r3, sl
    7670:	sub	r0, r3, r0
    7674:	ldrb	r3, [r1], #1
    7678:	subs	r0, r0, #1
    767c:	vmov	s0, r3
    7680:	vcvt.f32.u32	s0, s0
    7684:	vstmia	r2!, {s0}
    7688:	bne	7674 <ReadSingleData+0x758>
    768c:	b	8ae4 <ReadSingleData+0x1bc8>
    7690:	cmp	r8, #256	; 0x100
    7694:	bgt	8104 <ReadSingleData+0x11e8>
    7698:	ldr	r3, [r4]
    769c:	add	r4, sp, #72	; 0x48
    76a0:	mov	r1, ip
    76a4:	mov	r2, r8
    76a8:	mov	r5, ip
    76ac:	mov	r0, r4
    76b0:	bl	18b8 <fread@plt>
    76b4:	mov	r9, r0
    76b8:	cmp	r8, #1
    76bc:	blt	8ae4 <ReadSingleData+0x1bc8>
    76c0:	mov	r0, #0
    76c4:	cmp	r8, #4
    76c8:	mov	ip, r5
    76cc:	bcc	76fc <ReadSingleData+0x7e0>
    76d0:	bic	r0, r8, #3
    76d4:	mov	r2, r6
    76d8:	mov	r1, r0
    76dc:	vld1.16	{d16}, [r4]!
    76e0:	subs	r1, r1, #4
    76e4:	vmovl.s16	q8, d16
    76e8:	vcvt.f32.s32	q8, q8
    76ec:	vst1.32	{d16-d17}, [r2]!
    76f0:	bne	76dc <ReadSingleData+0x7c0>
    76f4:	cmp	r0, r8
    76f8:	beq	8e34 <ReadSingleData+0x1f18>
    76fc:	add	r3, sp, #72	; 0x48
    7700:	sub	r1, r8, r0
    7704:	add	r2, r6, r0, lsl #2
    7708:	add	r0, r3, r0, lsl #1
    770c:	ldrsh	r3, [r0], #2
    7710:	subs	r1, r1, #1
    7714:	vmov	s0, r3
    7718:	vcvt.f32.s32	s0, s0
    771c:	vstr	s0, [r2]
    7720:	add	r2, r2, #4
    7724:	bne	770c <ReadSingleData+0x7f0>
    7728:	b	8e34 <ReadSingleData+0x1f18>
    772c:	cmp	r8, #256	; 0x100
    7730:	bgt	8260 <ReadSingleData+0x1344>
    7734:	ldr	r3, [r4]
    7738:	add	r4, sp, #72	; 0x48
    773c:	mov	r1, ip
    7740:	mov	r2, r8
    7744:	mov	r5, ip
    7748:	mov	r0, r4
    774c:	bl	18b8 <fread@plt>
    7750:	mov	r9, r0
    7754:	cmp	r8, #1
    7758:	blt	8ae4 <ReadSingleData+0x1bc8>
    775c:	mov	r0, #0
    7760:	cmp	r8, #4
    7764:	mov	ip, r5
    7768:	bcc	7798 <ReadSingleData+0x87c>
    776c:	bic	r0, r8, #3
    7770:	mov	r2, r6
    7774:	mov	r1, r0
    7778:	vld1.16	{d16}, [r4]!
    777c:	subs	r1, r1, #4
    7780:	vmovl.u16	q8, d16
    7784:	vcvt.f32.u32	q8, q8
    7788:	vst1.32	{d16-d17}, [r2]!
    778c:	bne	7778 <ReadSingleData+0x85c>
    7790:	cmp	r0, r8
    7794:	beq	8e34 <ReadSingleData+0x1f18>
    7798:	add	r3, sp, #72	; 0x48
    779c:	sub	r1, r8, r0
    77a0:	add	r2, r6, r0, lsl #2
    77a4:	add	r0, r3, r0, lsl #1
    77a8:	ldrh	r3, [r0], #2
    77ac:	subs	r1, r1, #1
    77b0:	vmov	s0, r3
    77b4:	vcvt.f32.u32	s0, s0
    77b8:	vstr	s0, [r2]
    77bc:	add	r2, r2, #4
    77c0:	bne	77a8 <ReadSingleData+0x88c>
    77c4:	b	8e34 <ReadSingleData+0x1f18>
    77c8:	cmp	r8, #256	; 0x100
    77cc:	bgt	83bc <ReadSingleData+0x14a0>
    77d0:	ldr	r3, [r4]
    77d4:	add	r4, sp, #72	; 0x48
    77d8:	mov	r1, ip
    77dc:	mov	r2, r8
    77e0:	mov	r5, ip
    77e4:	mov	r0, r4
    77e8:	bl	18b8 <fread@plt>
    77ec:	mov	r9, r0
    77f0:	cmp	r8, #1
    77f4:	blt	8ae4 <ReadSingleData+0x1bc8>
    77f8:	mov	r0, #0
    77fc:	cmp	r8, #4
    7800:	mov	ip, r5
    7804:	bcc	7830 <ReadSingleData+0x914>
    7808:	bic	r0, r8, #3
    780c:	mov	r2, r6
    7810:	mov	r1, r0
    7814:	vld1.32	{d16-d17}, [r4]!
    7818:	subs	r1, r1, #4
    781c:	vcvt.f32.s32	q8, q8
    7820:	vst1.32	{d16-d17}, [r2]!
    7824:	bne	7814 <ReadSingleData+0x8f8>
    7828:	cmp	r0, r8
    782c:	beq	8e34 <ReadSingleData+0x1f18>
    7830:	add	r3, sp, #72	; 0x48
    7834:	sub	r1, r8, r0
    7838:	add	r2, r6, r0, lsl #2
    783c:	add	r0, r3, r0, lsl #2
    7840:	ldr	r3, [r0], #4
    7844:	subs	r1, r1, #1
    7848:	vmov	s0, r3
    784c:	vcvt.f32.s32	s0, s0
    7850:	vstr	s0, [r2]
    7854:	add	r2, r2, #4
    7858:	bne	7840 <ReadSingleData+0x924>
    785c:	b	8e34 <ReadSingleData+0x1f18>
    7860:	cmp	r8, #256	; 0x100
    7864:	bgt	84fc <ReadSingleData+0x15e0>
    7868:	ldr	r3, [r4]
    786c:	add	r4, sp, #72	; 0x48
    7870:	mov	r1, ip
    7874:	mov	r2, r8
    7878:	mov	r5, ip
    787c:	mov	r0, r4
    7880:	bl	18b8 <fread@plt>
    7884:	mov	r9, r0
    7888:	cmp	r8, #1
    788c:	blt	8ae4 <ReadSingleData+0x1bc8>
    7890:	mov	r0, #0
    7894:	cmp	r8, #4
    7898:	mov	ip, r5
    789c:	bcc	78c8 <ReadSingleData+0x9ac>
    78a0:	bic	r0, r8, #3
    78a4:	mov	r2, r6
    78a8:	mov	r1, r0
    78ac:	vld1.32	{d16-d17}, [r4]!
    78b0:	subs	r1, r1, #4
    78b4:	vcvt.f32.u32	q8, q8
    78b8:	vst1.32	{d16-d17}, [r2]!
    78bc:	bne	78ac <ReadSingleData+0x990>
    78c0:	cmp	r0, r8
    78c4:	beq	8e34 <ReadSingleData+0x1f18>
    78c8:	add	r3, sp, #72	; 0x48
    78cc:	sub	r1, r8, r0
    78d0:	add	r2, r6, r0, lsl #2
    78d4:	add	r0, r3, r0, lsl #2
    78d8:	ldr	r3, [r0], #4
    78dc:	subs	r1, r1, #1
    78e0:	vmov	s0, r3
    78e4:	vcvt.f32.u32	s0, s0
    78e8:	vstr	s0, [r2]
    78ec:	add	r2, r2, #4
    78f0:	bne	78d8 <ReadSingleData+0x9bc>
    78f4:	b	8e34 <ReadSingleData+0x1f18>
    78f8:	cmp	r8, #256	; 0x100
    78fc:	bgt	863c <ReadSingleData+0x1720>
    7900:	ldr	r3, [r4]
    7904:	add	r0, sp, #72	; 0x48
    7908:	mov	r1, ip
    790c:	mov	r2, r8
    7910:	mov	r4, ip
    7914:	bl	18b8 <fread@plt>
    7918:	mov	r9, r0
    791c:	cmp	r8, #1
    7920:	blt	86e8 <ReadSingleData+0x17cc>
    7924:	lsl	r2, r8, #2
    7928:	add	r1, sp, #72	; 0x48
    792c:	mov	r0, r6
    7930:	b	86e4 <ReadSingleData+0x17c8>
    7934:	cmp	r8, #256	; 0x100
    7938:	str	r6, [sp, #4]
    793c:	bgt	86f0 <ReadSingleData+0x17d4>
    7940:	ldr	r3, [r4]
    7944:	add	r4, sp, #72	; 0x48
    7948:	mov	r1, ip
    794c:	mov	r2, r8
    7950:	mov	r5, ip
    7954:	mov	r0, r4
    7958:	bl	18b8 <fread@plt>
    795c:	mov	r9, r0
    7960:	cmp	r8, #1
    7964:	blt	8ae4 <ReadSingleData+0x1bc8>
    7968:	ldr	r3, [sp, #4]
    796c:	mov	r0, #0
    7970:	mov	ip, r5
    7974:	beq	79a4 <ReadSingleData+0xa88>
    7978:	bic	r0, r8, #1
    797c:	mov	r2, r3
    7980:	mov	r1, r0
    7984:	vld1.64	{d16-d17}, [r4]!
    7988:	subs	r1, r1, #2
    798c:	vcvt.f32.f64	s1, d17
    7990:	vcvt.f32.f64	s0, d16
    7994:	vst1.32	{d0}, [r2]!
    7998:	bne	7984 <ReadSingleData+0xa68>
    799c:	cmp	r0, r8
    79a0:	beq	8e34 <ReadSingleData+0x1f18>
    79a4:	add	r2, r3, r0, lsl #2
    79a8:	add	r3, sp, #72	; 0x48
    79ac:	sub	r1, r8, r0
    79b0:	add	r0, r3, r0, lsl #3
    79b4:	vldr	d16, [r0]
    79b8:	subs	r1, r1, #1
    79bc:	add	r0, r0, #8
    79c0:	vcvt.f32.f64	s0, d16
    79c4:	vstr	s0, [r2]
    79c8:	add	r2, r2, #4
    79cc:	bne	79b4 <ReadSingleData+0xa98>
    79d0:	b	8e34 <ReadSingleData+0x1f18>
    79d4:	cmp	r8, #256	; 0x100
    79d8:	str	ip, [sp, #24]
    79dc:	bgt	883c <ReadSingleData+0x1920>
    79e0:	ldr	r3, [r4]
    79e4:	add	r7, sp, #72	; 0x48
    79e8:	mov	r1, ip
    79ec:	mov	r2, r8
    79f0:	mov	r0, r7
    79f4:	bl	18b8 <fread@plt>
    79f8:	mov	r9, r0
    79fc:	cmp	r8, #1
    7a00:	blt	8a20 <ReadSingleData+0x1b04>
    7a04:	mov	r4, #0
    7a08:	str	r5, [sp, #8]
    7a0c:	beq	89e8 <ReadSingleData+0x1acc>
    7a10:	bic	r4, r8, #1
    7a14:	mov	sl, r8
    7a18:	mov	r8, r6
    7a1c:	mov	r5, r4
    7a20:	vld1.64	{d8-d9}, [r7]!
    7a24:	vmov.32	r0, d9[0]
    7a28:	vmov.32	r1, d9[1]
    7a2c:	bl	584e0 <__aeabi_l2f>
    7a30:	vmov.32	r2, d8[0]
    7a34:	vmov.32	r1, d8[1]
    7a38:	vmov	s17, r0
    7a3c:	mov	r0, r2
    7a40:	bl	584e0 <__aeabi_l2f>
    7a44:	vmov	s16, r0
    7a48:	subs	r5, r5, #2
    7a4c:	vst1.32	{d8}, [r6]!
    7a50:	bne	7a20 <ReadSingleData+0xb04>
    7a54:	mov	r6, r8
    7a58:	cmp	r4, sl
    7a5c:	mov	r8, sl
    7a60:	bne	89e8 <ReadSingleData+0x1acc>
    7a64:	ldr	ip, [sp, #24]
    7a68:	b	8a7c <ReadSingleData+0x1b60>
    7a6c:	sub	r0, r8, #256	; 0x100
    7a70:	add	r1, r6, #1024	; 0x400
    7a74:	add	r7, sp, #72	; 0x48
    7a78:	mov	r9, #0
    7a7c:	str	ip, [sp, #24]
    7a80:	str	r8, [sp, #12]
    7a84:	str	r0, [sp, #16]
    7a88:	mov	r0, #0
    7a8c:	mov	sl, r1
    7a90:	ldr	r3, [r4]
    7a94:	ldr	r1, [sp, #24]
    7a98:	str	r0, [sp, #20]
    7a9c:	mov	r0, r7
    7aa0:	mov	r2, #256	; 0x100
    7aa4:	bl	18b8 <fread@plt>
    7aa8:	mov	r4, r0
    7aac:	mov	r8, r6
    7ab0:	mov	r5, #0
    7ab4:	add	r0, r7, r5
    7ab8:	bl	1c18 <Mat_int16Swap>
    7abc:	vmov	s0, r0
    7ac0:	add	r5, r5, #2
    7ac4:	vcvt.f32.s32	s0, s0
    7ac8:	cmp	r5, #512	; 0x200
    7acc:	vstmia	r6!, {s0}
    7ad0:	bne	7ab4 <ReadSingleData+0xb98>
    7ad4:	ldr	r5, [sp, #20]
    7ad8:	ldr	r2, [sp, #16]
    7adc:	add	r9, r4, r9
    7ae0:	ldr	r4, [sp, #28]
    7ae4:	mov	r6, r8
    7ae8:	add	r1, sl, #1024	; 0x400
    7aec:	add	r6, r8, #1024	; 0x400
    7af0:	add	r0, r5, #256	; 0x100
    7af4:	cmp	r0, r2
    7af8:	blt	7a8c <ReadSingleData+0xb70>
    7afc:	ldr	r1, [sp, #12]
    7b00:	cmp	r0, r1
    7b04:	bge	8e30 <ReadSingleData+0x1f14>
    7b08:	sub	r6, r1, r0
    7b0c:	ldr	r3, [r4]
    7b10:	ldr	r1, [sp, #24]
    7b14:	add	r4, sp, #72	; 0x48
    7b18:	mov	r0, r4
    7b1c:	mov	r2, r6
    7b20:	bl	18b8 <fread@plt>
    7b24:	add	r9, r0, r9
    7b28:	cmp	r6, #1
    7b2c:	blt	8e30 <ReadSingleData+0x1f14>
    7b30:	ldr	r0, [sp, #16]
    7b34:	sub	r6, r0, r5
    7b38:	mov	r0, r4
    7b3c:	bl	1c18 <Mat_int16Swap>
    7b40:	vmov	s0, r0
    7b44:	subs	r6, r6, #1
    7b48:	add	r4, r4, #2
    7b4c:	vcvt.f32.s32	s0, s0
    7b50:	vstmia	sl!, {s0}
    7b54:	bne	7b38 <ReadSingleData+0xc1c>
    7b58:	b	8e30 <ReadSingleData+0x1f14>
    7b5c:	sub	r0, r8, #256	; 0x100
    7b60:	add	r1, r6, #1024	; 0x400
    7b64:	add	r7, sp, #72	; 0x48
    7b68:	mov	r9, #0
    7b6c:	str	ip, [sp, #24]
    7b70:	str	r8, [sp, #12]
    7b74:	str	r0, [sp, #16]
    7b78:	mov	r0, #0
    7b7c:	mov	sl, r1
    7b80:	ldr	r3, [r4]
    7b84:	ldr	r1, [sp, #24]
    7b88:	str	r0, [sp, #20]
    7b8c:	mov	r0, r7
    7b90:	mov	r2, #256	; 0x100
    7b94:	bl	18b8 <fread@plt>
    7b98:	mov	r4, r0
    7b9c:	mov	r8, r6
    7ba0:	mov	r5, #0
    7ba4:	add	r0, r7, r5
    7ba8:	bl	1c2c <Mat_uint16Swap>
    7bac:	vmov	s0, r0
    7bb0:	add	r5, r5, #2
    7bb4:	vcvt.f32.u32	s0, s0
    7bb8:	cmp	r5, #512	; 0x200
    7bbc:	vstmia	r6!, {s0}
    7bc0:	bne	7ba4 <ReadSingleData+0xc88>
    7bc4:	ldr	r5, [sp, #20]
    7bc8:	ldr	r2, [sp, #16]
    7bcc:	add	r9, r4, r9
    7bd0:	ldr	r4, [sp, #28]
    7bd4:	mov	r6, r8
    7bd8:	add	r1, sl, #1024	; 0x400
    7bdc:	add	r6, r8, #1024	; 0x400
    7be0:	add	r0, r5, #256	; 0x100
    7be4:	cmp	r0, r2
    7be8:	blt	7b7c <ReadSingleData+0xc60>
    7bec:	ldr	r1, [sp, #12]
    7bf0:	cmp	r0, r1
    7bf4:	bge	8e30 <ReadSingleData+0x1f14>
    7bf8:	sub	r6, r1, r0
    7bfc:	ldr	r3, [r4]
    7c00:	ldr	r1, [sp, #24]
    7c04:	add	r4, sp, #72	; 0x48
    7c08:	mov	r0, r4
    7c0c:	mov	r2, r6
    7c10:	bl	18b8 <fread@plt>
    7c14:	add	r9, r0, r9
    7c18:	cmp	r6, #1
    7c1c:	blt	8e30 <ReadSingleData+0x1f14>
    7c20:	ldr	r0, [sp, #16]
    7c24:	sub	r6, r0, r5
    7c28:	mov	r0, r4
    7c2c:	bl	1c2c <Mat_uint16Swap>
    7c30:	vmov	s0, r0
    7c34:	subs	r6, r6, #1
    7c38:	add	r4, r4, #2
    7c3c:	vcvt.f32.u32	s0, s0
    7c40:	vstmia	sl!, {s0}
    7c44:	bne	7c28 <ReadSingleData+0xd0c>
    7c48:	b	8e30 <ReadSingleData+0x1f14>
    7c4c:	sub	r0, r8, #256	; 0x100
    7c50:	add	r1, r6, #1024	; 0x400
    7c54:	add	r7, sp, #72	; 0x48
    7c58:	mov	r9, #0
    7c5c:	str	ip, [sp, #24]
    7c60:	str	r8, [sp, #12]
    7c64:	str	r0, [sp, #20]
    7c68:	mov	r0, #0
    7c6c:	mov	r5, r1
    7c70:	ldr	r3, [r4]
    7c74:	ldr	r1, [sp, #24]
    7c78:	mov	sl, r0
    7c7c:	mov	r0, r7
    7c80:	mov	r2, #256	; 0x100
    7c84:	bl	18b8 <fread@plt>
    7c88:	mov	r8, r6
    7c8c:	mov	r4, r0
    7c90:	mov	r6, #0
    7c94:	add	r0, r7, r6
    7c98:	bl	1bf0 <Mat_int32Swap>
    7c9c:	vmov	s0, r0
    7ca0:	add	r1, r8, r6
    7ca4:	add	r6, r6, #4
    7ca8:	vcvt.f32.s32	s0, s0
    7cac:	cmp	r6, #1024	; 0x400
    7cb0:	vstr	s0, [r1]
    7cb4:	bne	7c94 <ReadSingleData+0xd78>
    7cb8:	ldr	r2, [sp, #20]
    7cbc:	add	r9, r4, r9
    7cc0:	ldr	r4, [sp, #28]
    7cc4:	add	r8, r8, #1024	; 0x400
    7cc8:	add	r0, sl, #256	; 0x100
    7ccc:	add	r1, r5, #1024	; 0x400
    7cd0:	mov	r6, r8
    7cd4:	cmp	r0, r2
    7cd8:	blt	7c6c <ReadSingleData+0xd50>
    7cdc:	ldr	r1, [sp, #12]
    7ce0:	cmp	r0, r1
    7ce4:	bge	8e30 <ReadSingleData+0x1f14>
    7ce8:	sub	r6, r1, r0
    7cec:	ldr	r3, [r4]
    7cf0:	ldr	r1, [sp, #24]
    7cf4:	add	r4, sp, #72	; 0x48
    7cf8:	mov	r0, r4
    7cfc:	mov	r2, r6
    7d00:	bl	18b8 <fread@plt>
    7d04:	add	r9, r0, r9
    7d08:	cmp	r6, #1
    7d0c:	blt	8e30 <ReadSingleData+0x1f14>
    7d10:	ldr	r0, [sp, #20]
    7d14:	sub	r6, r0, sl
    7d18:	mov	r0, r4
    7d1c:	bl	1bf0 <Mat_int32Swap>
    7d20:	vmov	s0, r0
    7d24:	subs	r6, r6, #1
    7d28:	add	r4, r4, #4
    7d2c:	vcvt.f32.s32	s0, s0
    7d30:	vstmia	r5!, {s0}
    7d34:	bne	7d18 <ReadSingleData+0xdfc>
    7d38:	b	8e30 <ReadSingleData+0x1f14>
    7d3c:	sub	r0, r8, #256	; 0x100
    7d40:	add	r1, r6, #1024	; 0x400
    7d44:	add	r7, sp, #72	; 0x48
    7d48:	mov	r9, #0
    7d4c:	str	ip, [sp, #24]
    7d50:	str	r8, [sp, #12]
    7d54:	str	r0, [sp, #20]
    7d58:	mov	r0, #0
    7d5c:	mov	r5, r1
    7d60:	ldr	r3, [r4]
    7d64:	ldr	r1, [sp, #24]
    7d68:	mov	sl, r0
    7d6c:	mov	r0, r7
    7d70:	mov	r2, #256	; 0x100
    7d74:	bl	18b8 <fread@plt>
    7d78:	mov	r8, r6
    7d7c:	mov	r4, r0
    7d80:	mov	r6, #0
    7d84:	add	r0, r7, r6
    7d88:	bl	1c04 <Mat_uint32Swap>
    7d8c:	vmov	s0, r0
    7d90:	add	r1, r8, r6
    7d94:	add	r6, r6, #4
    7d98:	vcvt.f32.u32	s0, s0
    7d9c:	cmp	r6, #1024	; 0x400
    7da0:	vstr	s0, [r1]
    7da4:	bne	7d84 <ReadSingleData+0xe68>
    7da8:	ldr	r2, [sp, #20]
    7dac:	add	r9, r4, r9
    7db0:	ldr	r4, [sp, #28]
    7db4:	add	r8, r8, #1024	; 0x400
    7db8:	add	r0, sl, #256	; 0x100
    7dbc:	add	r1, r5, #1024	; 0x400
    7dc0:	mov	r6, r8
    7dc4:	cmp	r0, r2
    7dc8:	blt	7d5c <ReadSingleData+0xe40>
    7dcc:	ldr	r1, [sp, #12]
    7dd0:	cmp	r0, r1
    7dd4:	bge	8e30 <ReadSingleData+0x1f14>
    7dd8:	sub	r6, r1, r0
    7ddc:	ldr	r3, [r4]
    7de0:	ldr	r1, [sp, #24]
    7de4:	add	r4, sp, #72	; 0x48
    7de8:	mov	r0, r4
    7dec:	mov	r2, r6
    7df0:	bl	18b8 <fread@plt>
    7df4:	add	r9, r0, r9
    7df8:	cmp	r6, #1
    7dfc:	blt	8e30 <ReadSingleData+0x1f14>
    7e00:	ldr	r0, [sp, #20]
    7e04:	sub	r6, r0, sl
    7e08:	mov	r0, r4
    7e0c:	bl	1c04 <Mat_uint32Swap>
    7e10:	vmov	s0, r0
    7e14:	subs	r6, r6, #1
    7e18:	add	r4, r4, #4
    7e1c:	vcvt.f32.u32	s0, s0
    7e20:	vstmia	r5!, {s0}
    7e24:	bne	7e08 <ReadSingleData+0xeec>
    7e28:	b	8e30 <ReadSingleData+0x1f14>
    7e2c:	sub	r0, r8, #256	; 0x100
    7e30:	add	r1, r6, #1024	; 0x400
    7e34:	add	r7, sp, #72	; 0x48
    7e38:	mov	r9, #0
    7e3c:	str	ip, [sp, #24]
    7e40:	str	r8, [sp, #12]
    7e44:	str	r0, [sp, #20]
    7e48:	mov	r0, #0
    7e4c:	mov	r5, r1
    7e50:	ldr	r3, [r4]
    7e54:	ldr	r1, [sp, #24]
    7e58:	mov	sl, r0
    7e5c:	mov	r0, r7
    7e60:	mov	r2, #256	; 0x100
    7e64:	bl	18b8 <fread@plt>
    7e68:	mov	r8, r6
    7e6c:	mov	r4, r0
    7e70:	mov	r6, #0
    7e74:	add	r0, r7, r6
    7e78:	bl	1c44 <Mat_floatSwap>
    7e7c:	add	r0, r8, r6
    7e80:	add	r6, r6, #4
    7e84:	cmp	r6, #1024	; 0x400
    7e88:	vstr	s0, [r0]
    7e8c:	bne	7e74 <ReadSingleData+0xf58>
    7e90:	ldr	r2, [sp, #20]
    7e94:	add	r9, r4, r9
    7e98:	ldr	r4, [sp, #28]
    7e9c:	add	r8, r8, #1024	; 0x400
    7ea0:	add	r0, sl, #256	; 0x100
    7ea4:	add	r1, r5, #1024	; 0x400
    7ea8:	mov	r6, r8
    7eac:	cmp	r0, r2
    7eb0:	blt	7e4c <ReadSingleData+0xf30>
    7eb4:	ldr	r1, [sp, #12]
    7eb8:	cmp	r0, r1
    7ebc:	bge	8e30 <ReadSingleData+0x1f14>
    7ec0:	sub	r6, r1, r0
    7ec4:	ldr	r3, [r4]
    7ec8:	ldr	r1, [sp, #24]
    7ecc:	add	r4, sp, #72	; 0x48
    7ed0:	mov	r0, r4
    7ed4:	mov	r2, r6
    7ed8:	bl	18b8 <fread@plt>
    7edc:	add	r9, r0, r9
    7ee0:	cmp	r6, #1
    7ee4:	blt	8e30 <ReadSingleData+0x1f14>
    7ee8:	ldr	r0, [sp, #20]
    7eec:	sub	r6, r0, sl
    7ef0:	mov	r0, r4
    7ef4:	bl	1c44 <Mat_floatSwap>
    7ef8:	vstmia	r5!, {s0}
    7efc:	subs	r6, r6, #1
    7f00:	add	r4, r4, #4
    7f04:	bne	7ef0 <ReadSingleData+0xfd4>
    7f08:	b	8e30 <ReadSingleData+0x1f14>
    7f0c:	sub	r0, r8, #256	; 0x100
    7f10:	add	r1, r6, #1024	; 0x400
    7f14:	mov	r9, #0
    7f18:	str	r8, [sp, #12]
    7f1c:	str	ip, [sp, #24]
    7f20:	str	r0, [sp, #16]
    7f24:	mov	r0, #0
    7f28:	ldr	r3, [r4]
    7f2c:	add	r7, sp, #72	; 0x48
    7f30:	str	r0, [sp, #20]
    7f34:	mov	r5, r1
    7f38:	mov	r1, ip
    7f3c:	mov	r2, #256	; 0x100
    7f40:	mov	r0, r7
    7f44:	bl	18b8 <fread@plt>
    7f48:	mov	sl, r6
    7f4c:	mov	r4, r0
    7f50:	mov	r6, #0
    7f54:	mov	r0, r7
    7f58:	add	r8, sl, r6
    7f5c:	bl	1c88 <Mat_doubleSwap>
    7f60:	add	r6, r6, #4
    7f64:	vcvt.f32.f64	s0, d0
    7f68:	add	r7, r7, #8
    7f6c:	cmp	r6, #1024	; 0x400
    7f70:	vstr	s0, [r8]
    7f74:	bne	7f54 <ReadSingleData+0x1038>
    7f78:	ldr	r7, [sp, #20]
    7f7c:	ldr	r2, [sp, #16]
    7f80:	add	r9, r4, r9
    7f84:	ldr	ip, [sp, #24]
    7f88:	ldr	r4, [sp, #28]
    7f8c:	add	sl, sl, #1024	; 0x400
    7f90:	add	r1, r5, #1024	; 0x400
    7f94:	mov	r6, sl
    7f98:	add	r0, r7, #256	; 0x100
    7f9c:	cmp	r0, r2
    7fa0:	blt	7f28 <ReadSingleData+0x100c>
    7fa4:	ldr	r1, [sp, #12]
    7fa8:	cmp	r0, r1
    7fac:	bge	8e34 <ReadSingleData+0x1f18>
    7fb0:	ldr	r3, [r4]
    7fb4:	sub	r6, r1, r0
    7fb8:	add	r4, sp, #72	; 0x48
    7fbc:	mov	r1, ip
    7fc0:	mov	r8, ip
    7fc4:	mov	r0, r4
    7fc8:	mov	r2, r6
    7fcc:	bl	18b8 <fread@plt>
    7fd0:	add	r9, r0, r9
    7fd4:	cmp	r6, #1
    7fd8:	blt	8000 <ReadSingleData+0x10e4>
    7fdc:	ldr	r0, [sp, #16]
    7fe0:	sub	r6, r0, r7
    7fe4:	mov	r0, r4
    7fe8:	bl	1c88 <Mat_doubleSwap>
    7fec:	vcvt.f32.f64	s0, d0
    7ff0:	subs	r6, r6, #1
    7ff4:	add	r4, r4, #8
    7ff8:	vstmia	r5!, {s0}
    7ffc:	bne	7fe4 <ReadSingleData+0x10c8>
    8000:	mov	ip, r8
    8004:	b	8e34 <ReadSingleData+0x1f18>
    8008:	sub	r0, r8, #256	; 0x100
    800c:	add	r1, r6, #1024	; 0x400
    8010:	mov	r9, #0
    8014:	str	r5, [sp, #8]
    8018:	str	ip, [sp, #24]
    801c:	str	r8, [sp, #12]
    8020:	str	r6, [sp, #4]
    8024:	str	r0, [sp, #20]
    8028:	mov	r0, #0
    802c:	mov	r5, r0
    8030:	ldr	r0, [sp, #28]
    8034:	mov	r4, r1
    8038:	ldr	r1, [sp, #24]
    803c:	add	sl, sp, #72	; 0x48
    8040:	mov	r2, #256	; 0x100
    8044:	mov	r8, r9
    8048:	ldr	r3, [r0]
    804c:	mov	r0, sl
    8050:	bl	18b8 <fread@plt>
    8054:	mov	r7, r0
    8058:	mov	r9, #0
    805c:	mov	r0, sl
    8060:	bl	1b84 <Mat_int64Swap>
    8064:	bl	584e0 <__aeabi_l2f>
    8068:	str	r0, [r6, r9]
    806c:	add	r9, r9, #4
    8070:	add	sl, sl, #8
    8074:	cmp	r9, #1024	; 0x400
    8078:	bne	805c <ReadSingleData+0x1140>
    807c:	ldr	r2, [sp, #20]
    8080:	mov	r9, r8
    8084:	add	r0, r5, #256	; 0x100
    8088:	add	r6, r6, #1024	; 0x400
    808c:	add	r1, r4, #1024	; 0x400
    8090:	add	r9, r7, r8
    8094:	cmp	r0, r2
    8098:	blt	802c <ReadSingleData+0x1110>
    809c:	ldr	r8, [sp, #12]
    80a0:	cmp	r0, r8
    80a4:	bge	89ac <ReadSingleData+0x1a90>
    80a8:	sub	r8, r8, r0
    80ac:	ldr	r0, [sp, #28]
    80b0:	ldr	r1, [sp, #24]
    80b4:	add	r7, sp, #72	; 0x48
    80b8:	mov	r2, r8
    80bc:	ldr	r3, [r0]
    80c0:	mov	r0, r7
    80c4:	bl	18b8 <fread@plt>
    80c8:	ldr	r6, [sp, #4]
    80cc:	add	r9, r0, r9
    80d0:	cmp	r8, #1
    80d4:	blt	80fc <ReadSingleData+0x11e0>
    80d8:	ldr	r0, [sp, #20]
    80dc:	sub	r5, r0, r5
    80e0:	mov	r0, r7
    80e4:	bl	1b84 <Mat_int64Swap>
    80e8:	bl	584e0 <__aeabi_l2f>
    80ec:	str	r0, [r4], #4
    80f0:	subs	r5, r5, #1
    80f4:	add	r7, r7, #8
    80f8:	bne	80e0 <ReadSingleData+0x11c4>
    80fc:	ldr	ip, [sp, #24]
    8100:	b	8a78 <ReadSingleData+0x1b5c>
    8104:	sub	r1, r8, #256	; 0x100
    8108:	add	r0, r6, #1024	; 0x400
    810c:	mov	r2, #256	; 0x100
    8110:	add	r7, sp, #72	; 0x48
    8114:	add	r4, sp, #32
    8118:	mov	sl, r6
    811c:	mov	r9, #0
    8120:	str	ip, [sp, #24]
    8124:	str	r8, [sp, #12]
    8128:	str	r6, [sp, #4]
    812c:	str	r1, [sp, #20]
    8130:	mov	r1, #0
    8134:	mov	r5, r0
    8138:	ldr	r0, [sp, #28]
    813c:	mov	r6, r1
    8140:	ldr	r1, [sp, #24]
    8144:	mov	r8, r2
    8148:	mov	r2, #256	; 0x100
    814c:	ldr	r3, [r0]
    8150:	mov	r0, r7
    8154:	bl	18b8 <fread@plt>
    8158:	mov	r1, sl
    815c:	mov	r2, #0
    8160:	ldr	r3, [r7, r2]
    8164:	str	r3, [sp, #32]
    8168:	add	r3, r7, r2
    816c:	add	r2, r2, #8
    8170:	ldr	r3, [r3, #4]
    8174:	cmp	r2, #512	; 0x200
    8178:	str	r3, [sp, #36]	; 0x24
    817c:	vld1.16	{d16}, [r4 :64]
    8180:	vmovl.s16	q8, d16
    8184:	vcvt.f32.s32	q8, q8
    8188:	vst1.32	{d16-d17}, [r1]!
    818c:	bne	8160 <ReadSingleData+0x1244>
    8190:	ldr	r3, [sp, #20]
    8194:	add	r1, r6, #256	; 0x100
    8198:	add	r9, r0, r9
    819c:	add	sl, sl, #1024	; 0x400
    81a0:	add	r0, r5, #1024	; 0x400
    81a4:	add	r2, r8, #256	; 0x100
    81a8:	cmp	r1, r3
    81ac:	blt	8134 <ReadSingleData+0x1218>
    81b0:	ldr	r0, [sp, #12]
    81b4:	cmp	r1, r0
    81b8:	bge	8e30 <ReadSingleData+0x1f14>
    81bc:	sub	r4, r0, r1
    81c0:	ldr	r0, [sp, #28]
    81c4:	ldr	r1, [sp, #24]
    81c8:	add	r7, sp, #72	; 0x48
    81cc:	mov	r2, r4
    81d0:	ldr	r3, [r0]
    81d4:	mov	r0, r7
    81d8:	bl	18b8 <fread@plt>
    81dc:	add	r9, r0, r9
    81e0:	cmp	r4, #1
    81e4:	blt	8e30 <ReadSingleData+0x1f14>
    81e8:	mov	r0, #0
    81ec:	cmp	r4, #4
    81f0:	bcc	8224 <ReadSingleData+0x1308>
    81f4:	ldr	r0, [sp, #20]
    81f8:	sub	r0, r0, r6
    81fc:	bic	r1, r0, #3
    8200:	bic	r0, r4, #3
    8204:	vld1.16	{d16}, [r7]!
    8208:	subs	r1, r1, #4
    820c:	vmovl.s16	q8, d16
    8210:	vcvt.f32.s32	q8, q8
    8214:	vst1.32	{d16-d17}, [r5]!
    8218:	bne	8204 <ReadSingleData+0x12e8>
    821c:	cmp	r4, r0
    8220:	beq	8e30 <ReadSingleData+0x1f14>
    8224:	ldr	r3, [sp, #4]
    8228:	add	r2, r0, r8
    822c:	add	r1, sp, #72	; 0x48
    8230:	add	r1, r1, r0, lsl #1
    8234:	add	r2, r3, r2, lsl #2
    8238:	ldr	r3, [sp, #20]
    823c:	sub	r3, r3, r6
    8240:	sub	r0, r3, r0
    8244:	ldrsh	r3, [r1], #2
    8248:	subs	r0, r0, #1
    824c:	vmov	s0, r3
    8250:	vcvt.f32.s32	s0, s0
    8254:	vstmia	r2!, {s0}
    8258:	bne	8244 <ReadSingleData+0x1328>
    825c:	b	8e30 <ReadSingleData+0x1f14>
    8260:	sub	r1, r8, #256	; 0x100
    8264:	add	r0, r6, #1024	; 0x400
    8268:	mov	r2, #256	; 0x100
    826c:	add	r7, sp, #72	; 0x48
    8270:	add	r4, sp, #40	; 0x28
    8274:	mov	sl, r6
    8278:	mov	r9, #0
    827c:	str	ip, [sp, #24]
    8280:	str	r8, [sp, #12]
    8284:	str	r6, [sp, #4]
    8288:	str	r1, [sp, #20]
    828c:	mov	r1, #0
    8290:	mov	r5, r0
    8294:	ldr	r0, [sp, #28]
    8298:	mov	r6, r1
    829c:	ldr	r1, [sp, #24]
    82a0:	mov	r8, r2
    82a4:	mov	r2, #256	; 0x100
    82a8:	ldr	r3, [r0]
    82ac:	mov	r0, r7
    82b0:	bl	18b8 <fread@plt>
    82b4:	mov	r1, sl
    82b8:	mov	r2, #0
    82bc:	ldr	r3, [r7, r2]
    82c0:	str	r3, [sp, #40]	; 0x28
    82c4:	add	r3, r7, r2
    82c8:	add	r2, r2, #8
    82cc:	ldr	r3, [r3, #4]
    82d0:	cmp	r2, #512	; 0x200
    82d4:	str	r3, [sp, #44]	; 0x2c
    82d8:	vld1.16	{d16}, [r4 :64]
    82dc:	vmovl.u16	q8, d16
    82e0:	vcvt.f32.u32	q8, q8
    82e4:	vst1.32	{d16-d17}, [r1]!
    82e8:	bne	82bc <ReadSingleData+0x13a0>
    82ec:	ldr	r3, [sp, #20]
    82f0:	add	r1, r6, #256	; 0x100
    82f4:	add	r9, r0, r9
    82f8:	add	sl, sl, #1024	; 0x400
    82fc:	add	r0, r5, #1024	; 0x400
    8300:	add	r2, r8, #256	; 0x100
    8304:	cmp	r1, r3
    8308:	blt	8290 <ReadSingleData+0x1374>
    830c:	ldr	r0, [sp, #12]
    8310:	cmp	r1, r0
    8314:	bge	8e30 <ReadSingleData+0x1f14>
    8318:	sub	r4, r0, r1
    831c:	ldr	r0, [sp, #28]
    8320:	ldr	r1, [sp, #24]
    8324:	add	r7, sp, #72	; 0x48
    8328:	mov	r2, r4
    832c:	ldr	r3, [r0]
    8330:	mov	r0, r7
    8334:	bl	18b8 <fread@plt>
    8338:	add	r9, r0, r9
    833c:	cmp	r4, #1
    8340:	blt	8e30 <ReadSingleData+0x1f14>
    8344:	mov	r0, #0
    8348:	cmp	r4, #4
    834c:	bcc	8380 <ReadSingleData+0x1464>
    8350:	ldr	r0, [sp, #20]
    8354:	sub	r0, r0, r6
    8358:	bic	r1, r0, #3
    835c:	bic	r0, r4, #3
    8360:	vld1.16	{d16}, [r7]!
    8364:	subs	r1, r1, #4
    8368:	vmovl.u16	q8, d16
    836c:	vcvt.f32.u32	q8, q8
    8370:	vst1.32	{d16-d17}, [r5]!
    8374:	bne	8360 <ReadSingleData+0x1444>
    8378:	cmp	r4, r0
    837c:	beq	8e30 <ReadSingleData+0x1f14>
    8380:	ldr	r3, [sp, #4]
    8384:	add	r2, r0, r8
    8388:	add	r1, sp, #72	; 0x48
    838c:	add	r1, r1, r0, lsl #1
    8390:	add	r2, r3, r2, lsl #2
    8394:	ldr	r3, [sp, #20]
    8398:	sub	r3, r3, r6
    839c:	sub	r0, r3, r0
    83a0:	ldrh	r3, [r1], #2
    83a4:	subs	r0, r0, #1
    83a8:	vmov	s0, r3
    83ac:	vcvt.f32.u32	s0, s0
    83b0:	vstmia	r2!, {s0}
    83b4:	bne	83a0 <ReadSingleData+0x1484>
    83b8:	b	8e30 <ReadSingleData+0x1f14>
    83bc:	sub	r1, r8, #256	; 0x100
    83c0:	mov	sl, ip
    83c4:	add	r0, r6, #1024	; 0x400
    83c8:	mov	r3, #0
    83cc:	mov	r2, #256	; 0x100
    83d0:	add	r7, sp, #72	; 0x48
    83d4:	mov	r9, #0
    83d8:	str	r8, [sp, #12]
    83dc:	str	r6, [sp, #4]
    83e0:	str	r1, [sp, #20]
    83e4:	mov	r4, r0
    83e8:	ldr	r0, [sp, #28]
    83ec:	mov	r8, r3
    83f0:	mov	r5, r2
    83f4:	mov	r1, sl
    83f8:	mov	r2, #256	; 0x100
    83fc:	ldr	r3, [r0]
    8400:	mov	r0, r7
    8404:	bl	18b8 <fread@plt>
    8408:	mov	r1, #0
    840c:	add	r2, r7, r1
    8410:	vld1.32	{d16-d17}, [r2]
    8414:	add	r2, r6, r1
    8418:	add	r1, r1, #16
    841c:	cmp	r1, #1024	; 0x400
    8420:	vcvt.f32.s32	q8, q8
    8424:	vst1.32	{d16-d17}, [r2]
    8428:	bne	840c <ReadSingleData+0x14f0>
    842c:	ldr	r1, [sp, #20]
    8430:	add	r3, r8, #256	; 0x100
    8434:	add	r9, r0, r9
    8438:	add	r6, r6, #1024	; 0x400
    843c:	add	r0, r4, #1024	; 0x400
    8440:	add	r2, r5, #256	; 0x100
    8444:	cmp	r3, r1
    8448:	blt	83e4 <ReadSingleData+0x14c8>
    844c:	ldr	r0, [sp, #12]
    8450:	cmp	r3, r0
    8454:	bge	89a4 <ReadSingleData+0x1a88>
    8458:	sub	r6, r0, r3
    845c:	ldr	r0, [sp, #28]
    8460:	add	r7, sp, #72	; 0x48
    8464:	mov	r1, sl
    8468:	str	sl, [sp, #24]
    846c:	mov	r2, r6
    8470:	ldr	r3, [r0]
    8474:	mov	r0, r7
    8478:	bl	18b8 <fread@plt>
    847c:	add	r9, r0, r9
    8480:	cmp	r6, #1
    8484:	blt	8e30 <ReadSingleData+0x1f14>
    8488:	mov	r0, #0
    848c:	cmp	r6, #4
    8490:	bcc	84c0 <ReadSingleData+0x15a4>
    8494:	ldr	r0, [sp, #20]
    8498:	sub	r0, r0, r8
    849c:	bic	r1, r0, #3
    84a0:	bic	r0, r6, #3
    84a4:	vld1.32	{d16-d17}, [r7]!
    84a8:	subs	r1, r1, #4
    84ac:	vcvt.f32.s32	q8, q8
    84b0:	vst1.32	{d16-d17}, [r4]!
    84b4:	bne	84a4 <ReadSingleData+0x1588>
    84b8:	cmp	r6, r0
    84bc:	beq	8e30 <ReadSingleData+0x1f14>
    84c0:	ldr	r3, [sp, #4]
    84c4:	add	r2, r0, r5
    84c8:	add	r1, sp, #72	; 0x48
    84cc:	add	r1, r1, r0, lsl #2
    84d0:	add	r2, r3, r2, lsl #2
    84d4:	ldr	r3, [sp, #20]
    84d8:	sub	r3, r3, r8
    84dc:	sub	r0, r3, r0
    84e0:	ldr	r3, [r1], #4
    84e4:	subs	r0, r0, #1
    84e8:	vmov	s0, r3
    84ec:	vcvt.f32.s32	s0, s0
    84f0:	vstmia	r2!, {s0}
    84f4:	bne	84e0 <ReadSingleData+0x15c4>
    84f8:	b	8e30 <ReadSingleData+0x1f14>
    84fc:	sub	r1, r8, #256	; 0x100
    8500:	mov	sl, ip
    8504:	add	r0, r6, #1024	; 0x400
    8508:	mov	r3, #0
    850c:	mov	r2, #256	; 0x100
    8510:	add	r7, sp, #72	; 0x48
    8514:	mov	r9, #0
    8518:	str	r8, [sp, #12]
    851c:	str	r6, [sp, #4]
    8520:	str	r1, [sp, #20]
    8524:	mov	r4, r0
    8528:	ldr	r0, [sp, #28]
    852c:	mov	r8, r3
    8530:	mov	r5, r2
    8534:	mov	r1, sl
    8538:	mov	r2, #256	; 0x100
    853c:	ldr	r3, [r0]
    8540:	mov	r0, r7
    8544:	bl	18b8 <fread@plt>
    8548:	mov	r1, #0
    854c:	add	r2, r7, r1
    8550:	vld1.32	{d16-d17}, [r2]
    8554:	add	r2, r6, r1
    8558:	add	r1, r1, #16
    855c:	cmp	r1, #1024	; 0x400
    8560:	vcvt.f32.u32	q8, q8
    8564:	vst1.32	{d16-d17}, [r2]
    8568:	bne	854c <ReadSingleData+0x1630>
    856c:	ldr	r1, [sp, #20]
    8570:	add	r3, r8, #256	; 0x100
    8574:	add	r9, r0, r9
    8578:	add	r6, r6, #1024	; 0x400
    857c:	add	r0, r4, #1024	; 0x400
    8580:	add	r2, r5, #256	; 0x100
    8584:	cmp	r3, r1
    8588:	blt	8524 <ReadSingleData+0x1608>
    858c:	ldr	r0, [sp, #12]
    8590:	cmp	r3, r0
    8594:	bge	89a4 <ReadSingleData+0x1a88>
    8598:	sub	r6, r0, r3
    859c:	ldr	r0, [sp, #28]
    85a0:	add	r7, sp, #72	; 0x48
    85a4:	mov	r1, sl
    85a8:	str	sl, [sp, #24]
    85ac:	mov	r2, r6
    85b0:	ldr	r3, [r0]
    85b4:	mov	r0, r7
    85b8:	bl	18b8 <fread@plt>
    85bc:	add	r9, r0, r9
    85c0:	cmp	r6, #1
    85c4:	blt	8e30 <ReadSingleData+0x1f14>
    85c8:	mov	r0, #0
    85cc:	cmp	r6, #4
    85d0:	bcc	8600 <ReadSingleData+0x16e4>
    85d4:	ldr	r0, [sp, #20]
    85d8:	sub	r0, r0, r8
    85dc:	bic	r1, r0, #3
    85e0:	bic	r0, r6, #3
    85e4:	vld1.32	{d16-d17}, [r7]!
    85e8:	subs	r1, r1, #4
    85ec:	vcvt.f32.u32	q8, q8
    85f0:	vst1.32	{d16-d17}, [r4]!
    85f4:	bne	85e4 <ReadSingleData+0x16c8>
    85f8:	cmp	r6, r0
    85fc:	beq	8e30 <ReadSingleData+0x1f14>
    8600:	ldr	r3, [sp, #4]
    8604:	add	r2, r0, r5
    8608:	add	r1, sp, #72	; 0x48
    860c:	add	r1, r1, r0, lsl #2
    8610:	add	r2, r3, r2, lsl #2
    8614:	ldr	r3, [sp, #20]
    8618:	sub	r3, r3, r8
    861c:	sub	r0, r3, r0
    8620:	ldr	r3, [r1], #4
    8624:	subs	r0, r0, #1
    8628:	vmov	s0, r3
    862c:	vcvt.f32.u32	s0, s0
    8630:	vstmia	r2!, {s0}
    8634:	bne	8620 <ReadSingleData+0x1704>
    8638:	b	8e30 <ReadSingleData+0x1f14>
    863c:	sub	r0, r8, #256	; 0x100
    8640:	lsl	r7, r8, #2
    8644:	str	r8, [sp, #12]
    8648:	mov	r5, #0
    864c:	add	sl, sp, #72	; 0x48
    8650:	mov	r9, #0
    8654:	mov	r8, r4
    8658:	str	ip, [sp, #24]
    865c:	str	r0, [sp, #20]
    8660:	ldr	r3, [r8]
    8664:	ldr	r1, [sp, #24]
    8668:	mov	r0, sl
    866c:	mov	r2, #256	; 0x100
    8670:	bl	18b8 <fread@plt>
    8674:	mov	r4, r0
    8678:	add	r0, r6, r5, lsl #2
    867c:	mov	r1, sl
    8680:	mov	r2, #1024	; 0x400
    8684:	bl	181c <memcpy@plt>
    8688:	ldr	r0, [sp, #20]
    868c:	add	r5, r5, #256	; 0x100
    8690:	add	r9, r4, r9
    8694:	sub	r7, r7, #1024	; 0x400
    8698:	cmp	r5, r0
    869c:	blt	8660 <ReadSingleData+0x1744>
    86a0:	ldr	r0, [sp, #12]
    86a4:	ldr	r4, [sp, #24]
    86a8:	cmp	r5, r0
    86ac:	bge	86e8 <ReadSingleData+0x17cc>
    86b0:	sub	r8, r0, r5
    86b4:	ldr	r0, [sp, #28]
    86b8:	mov	r1, r4
    86bc:	mov	r2, r8
    86c0:	ldr	r3, [r0]
    86c4:	add	r0, sp, #72	; 0x48
    86c8:	bl	18b8 <fread@plt>
    86cc:	add	r9, r0, r9
    86d0:	cmp	r8, #1
    86d4:	blt	86e8 <ReadSingleData+0x17cc>
    86d8:	add	r0, r6, r5, lsl #2
    86dc:	add	r1, sp, #72	; 0x48
    86e0:	mov	r2, r7
    86e4:	bl	181c <memcpy@plt>
    86e8:	mov	ip, r4
    86ec:	b	8e34 <ReadSingleData+0x1f18>
    86f0:	ldr	r5, [sp, #4]
    86f4:	sub	r1, r8, #256	; 0x100
    86f8:	str	r8, [sp, #12]
    86fc:	mov	r6, ip
    8700:	mov	r2, #256	; 0x100
    8704:	add	r8, sp, #72	; 0x48
    8708:	mov	r9, #0
    870c:	str	r1, [sp, #20]
    8710:	mov	r1, #0
    8714:	add	r0, r5, #1024	; 0x400
    8718:	mov	r4, r0
    871c:	ldr	r0, [sp, #28]
    8720:	mov	sl, r1
    8724:	mov	r7, r2
    8728:	mov	r1, r6
    872c:	mov	r2, #256	; 0x100
    8730:	ldr	r3, [r0]
    8734:	mov	r0, r8
    8738:	bl	18b8 <fread@plt>
    873c:	mov	r1, #0
    8740:	mov	r2, r8
    8744:	vld1.64	{d16-d17}, [r2]!
    8748:	add	r3, r5, r1
    874c:	add	r1, r1, #8
    8750:	cmp	r1, #1024	; 0x400
    8754:	vcvt.f32.f64	s1, d17
    8758:	vcvt.f32.f64	s0, d16
    875c:	vstr	d0, [r3]
    8760:	bne	8744 <ReadSingleData+0x1828>
    8764:	ldr	r3, [sp, #20]
    8768:	add	r1, sl, #256	; 0x100
    876c:	add	r9, r0, r9
    8770:	add	r5, r5, #1024	; 0x400
    8774:	add	r0, r4, #1024	; 0x400
    8778:	add	r2, r7, #256	; 0x100
    877c:	cmp	r1, r3
    8780:	blt	8718 <ReadSingleData+0x17fc>
    8784:	ldr	r0, [sp, #12]
    8788:	cmp	r1, r0
    878c:	bge	89c8 <ReadSingleData+0x1aac>
    8790:	sub	r8, r0, r1
    8794:	ldr	r0, [sp, #28]
    8798:	mov	r5, r9
    879c:	add	r9, sp, #72	; 0x48
    87a0:	mov	r1, r6
    87a4:	mov	r2, r8
    87a8:	ldr	r3, [r0]
    87ac:	mov	r0, r9
    87b0:	bl	18b8 <fread@plt>
    87b4:	add	r5, r0, r5
    87b8:	cmp	r8, #1
    87bc:	blt	8830 <ReadSingleData+0x1914>
    87c0:	mov	r0, #0
    87c4:	beq	87f8 <ReadSingleData+0x18dc>
    87c8:	ldr	r0, [sp, #20]
    87cc:	sub	r0, r0, sl
    87d0:	bic	r1, r0, #1
    87d4:	bic	r0, r8, #1
    87d8:	vld1.64	{d16-d17}, [r9]!
    87dc:	subs	r1, r1, #2
    87e0:	vcvt.f32.f64	s1, d17
    87e4:	vcvt.f32.f64	s0, d16
    87e8:	vst1.32	{d0}, [r4]!
    87ec:	bne	87d8 <ReadSingleData+0x18bc>
    87f0:	cmp	r8, r0
    87f4:	beq	8830 <ReadSingleData+0x1914>
    87f8:	ldr	r3, [sp, #4]
    87fc:	add	r2, r0, r7
    8800:	add	r1, sp, #72	; 0x48
    8804:	add	r1, r1, r0, lsl #3
    8808:	add	r2, r3, r2, lsl #2
    880c:	ldr	r3, [sp, #20]
    8810:	sub	r3, r3, sl
    8814:	sub	r0, r3, r0
    8818:	vldr	d16, [r1]
    881c:	subs	r0, r0, #1
    8820:	add	r1, r1, #8
    8824:	vcvt.f32.f64	s0, d16
    8828:	vstmia	r2!, {s0}
    882c:	bne	8818 <ReadSingleData+0x18fc>
    8830:	mov	ip, r6
    8834:	mov	r9, r5
    8838:	b	8e34 <ReadSingleData+0x1f18>
    883c:	sub	r1, r8, #256	; 0x100
    8840:	str	r5, [sp, #8]
    8844:	add	r0, r6, #1024	; 0x400
    8848:	mov	r2, #256	; 0x100
    884c:	mov	r5, r6
    8850:	mov	r9, #0
    8854:	str	r8, [sp, #12]
    8858:	str	r6, [sp, #4]
    885c:	str	r1, [sp, #16]
    8860:	mov	r1, #0
    8864:	mov	sl, r1
    8868:	ldr	r3, [r4]
    886c:	ldr	r1, [sp, #24]
    8870:	add	r4, sp, #72	; 0x48
    8874:	str	r2, [sp, #20]
    8878:	mov	r8, r0
    887c:	mov	r2, #256	; 0x100
    8880:	mov	r0, r4
    8884:	bl	18b8 <fread@plt>
    8888:	mov	r7, r0
    888c:	mov	r6, #0
    8890:	vld1.64	{d8-d9}, [r4]!
    8894:	vmov.32	r0, d9[0]
    8898:	vmov.32	r1, d9[1]
    889c:	bl	584e0 <__aeabi_l2f>
    88a0:	vmov.32	r2, d8[0]
    88a4:	vmov.32	r1, d8[1]
    88a8:	vmov	s17, r0
    88ac:	mov	r0, r2
    88b0:	bl	584e0 <__aeabi_l2f>
    88b4:	vmov	s16, r0
    88b8:	add	r0, r5, r6
    88bc:	add	r6, r6, #8
    88c0:	cmp	r6, #1024	; 0x400
    88c4:	vstr	d8, [r0]
    88c8:	bne	8890 <ReadSingleData+0x1974>
    88cc:	ldr	r1, [sp, #20]
    88d0:	ldr	r3, [sp, #16]
    88d4:	ldr	r4, [sp, #28]
    88d8:	add	r9, r7, r9
    88dc:	add	r5, r5, #1024	; 0x400
    88e0:	add	r0, r8, #1024	; 0x400
    88e4:	add	r2, r1, #256	; 0x100
    88e8:	add	r1, sl, #256	; 0x100
    88ec:	cmp	r1, r3
    88f0:	blt	8864 <ReadSingleData+0x1948>
    88f4:	ldr	r0, [sp, #12]
    88f8:	ldr	r5, [sp, #8]
    88fc:	cmp	r1, r0
    8900:	bge	89d0 <ReadSingleData+0x1ab4>
    8904:	sub	r2, r0, r1
    8908:	ldr	r3, [r4]
    890c:	ldr	r1, [sp, #24]
    8910:	add	r7, sp, #72	; 0x48
    8914:	mov	r6, sl
    8918:	mov	r0, r7
    891c:	str	r2, [sp]
    8920:	bl	18b8 <fread@plt>
    8924:	add	r9, r0, r9
    8928:	ldr	r0, [sp]
    892c:	cmp	r0, #1
    8930:	blt	8e48 <ReadSingleData+0x1f2c>
    8934:	mov	r5, #0
    8938:	beq	8a30 <ReadSingleData+0x1b14>
    893c:	ldr	r0, [sp, #16]
    8940:	sub	r0, r0, r6
    8944:	bic	r6, r0, #1
    8948:	ldr	r0, [sp]
    894c:	bic	r5, r0, #1
    8950:	vld1.64	{d8-d9}, [r7]!
    8954:	vmov.32	r0, d9[0]
    8958:	vmov.32	r1, d9[1]
    895c:	bl	584e0 <__aeabi_l2f>
    8960:	vmov.32	r2, d8[0]
    8964:	vmov.32	r1, d8[1]
    8968:	vmov	s17, r0
    896c:	mov	r0, r2
    8970:	bl	584e0 <__aeabi_l2f>
    8974:	vmov	s16, r0
    8978:	subs	r6, r6, #2
    897c:	vst1.32	{d8}, [r8]!
    8980:	bne	8950 <ReadSingleData+0x1a34>
    8984:	ldr	r0, [sp]
    8988:	mov	r6, sl
    898c:	cmp	r0, r5
    8990:	bne	8a30 <ReadSingleData+0x1b14>
    8994:	ldr	ip, [sp, #24]
    8998:	ldr	r6, [sp, #4]
    899c:	ldr	r8, [sp, #12]
    89a0:	b	8a80 <ReadSingleData+0x1b64>
    89a4:	mov	ip, sl
    89a8:	b	8e34 <ReadSingleData+0x1f18>
    89ac:	ldr	ip, [sp, #24]
    89b0:	ldr	r6, [sp, #4]
    89b4:	b	8a7c <ReadSingleData+0x1b60>
    89b8:	mov	ip, sl
    89bc:	cmp	r5, #13
    89c0:	beq	8a8c <ReadSingleData+0x1b70>
    89c4:	b	8e34 <ReadSingleData+0x1f18>
    89c8:	mov	ip, r6
    89cc:	b	8e34 <ReadSingleData+0x1f18>
    89d0:	ldr	ip, [sp, #24]
    89d4:	ldr	r6, [sp, #4]
    89d8:	mov	r8, r0
    89dc:	cmp	r5, #13
    89e0:	beq	8a8c <ReadSingleData+0x1b70>
    89e4:	b	8e34 <ReadSingleData+0x1f18>
    89e8:	add	r0, sp, #72	; 0x48
    89ec:	mov	r7, r6
    89f0:	sub	r5, r8, r4
    89f4:	add	r6, r6, r4, lsl #2
    89f8:	add	r4, r0, r4, lsl #3
    89fc:	ldrd	r0, [r4]
    8a00:	bl	584e0 <__aeabi_l2f>
    8a04:	str	r0, [r6], #4
    8a08:	subs	r5, r5, #1
    8a0c:	add	r4, r4, #8
    8a10:	bne	89fc <ReadSingleData+0x1ae0>
    8a14:	ldr	ip, [sp, #24]
    8a18:	mov	r6, r7
    8a1c:	b	8a7c <ReadSingleData+0x1b60>
    8a20:	ldr	ip, [sp, #24]
    8a24:	cmp	r5, #13
    8a28:	beq	8a8c <ReadSingleData+0x1b70>
    8a2c:	b	8e34 <ReadSingleData+0x1f18>
    8a30:	add	r0, sp, #72	; 0x48
    8a34:	ldr	r1, [sp, #4]
    8a38:	mov	r2, r6
    8a3c:	add	r4, r0, r5, lsl #3
    8a40:	ldr	r0, [sp, #20]
    8a44:	add	r0, r5, r0
    8a48:	add	r6, r1, r0, lsl #2
    8a4c:	ldr	r0, [sp, #16]
    8a50:	sub	r0, r0, r2
    8a54:	sub	r5, r0, r5
    8a58:	ldrd	r0, [r4]
    8a5c:	bl	584e0 <__aeabi_l2f>
    8a60:	str	r0, [r6], #4
    8a64:	subs	r5, r5, #1
    8a68:	add	r4, r4, #8
    8a6c:	bne	8a58 <ReadSingleData+0x1b3c>
    8a70:	ldr	ip, [sp, #24]
    8a74:	ldr	r6, [sp, #4]
    8a78:	ldr	r8, [sp, #12]
    8a7c:	ldr	r4, [sp, #28]
    8a80:	ldr	r5, [sp, #8]
    8a84:	cmp	r5, #13
    8a88:	bne	8e34 <ReadSingleData+0x1f18>
    8a8c:	ldr	r0, [r4, #20]
    8a90:	cmp	r0, #0
    8a94:	beq	8aec <ReadSingleData+0x1bd0>
    8a98:	cmp	r8, #256	; 0x100
    8a9c:	bgt	8bbc <ReadSingleData+0x1ca0>
    8aa0:	ldr	r3, [r4]
    8aa4:	add	r4, sp, #72	; 0x48
    8aa8:	mov	r1, ip
    8aac:	mov	r2, r8
    8ab0:	mov	r5, ip
    8ab4:	mov	r0, r4
    8ab8:	bl	18b8 <fread@plt>
    8abc:	add	r9, r0, r9
    8ac0:	cmp	r8, #1
    8ac4:	blt	8ae4 <ReadSingleData+0x1bc8>
    8ac8:	mov	r0, r4
    8acc:	bl	1bd4 <Mat_uint64Swap>
    8ad0:	bl	584d0 <__aeabi_ul2f>
    8ad4:	str	r0, [r6], #4
    8ad8:	subs	r8, r8, #1
    8adc:	add	r4, r4, #8
    8ae0:	bne	8ac8 <ReadSingleData+0x1bac>
    8ae4:	mov	ip, r5
    8ae8:	b	8e34 <ReadSingleData+0x1f18>
    8aec:	cmp	r8, #256	; 0x100
    8af0:	bgt	8ca0 <ReadSingleData+0x1d84>
    8af4:	ldr	r3, [r4]
    8af8:	add	r4, sp, #72	; 0x48
    8afc:	mov	r1, ip
    8b00:	mov	r2, r8
    8b04:	mov	r7, ip
    8b08:	mov	r0, r4
    8b0c:	bl	18b8 <fread@plt>
    8b10:	add	r9, r0, r9
    8b14:	cmp	r8, #1
    8b18:	blt	8bb4 <ReadSingleData+0x1c98>
    8b1c:	mov	r5, #0
    8b20:	mov	ip, r7
    8b24:	beq	8b88 <ReadSingleData+0x1c6c>
    8b28:	bic	r5, r8, #1
    8b2c:	mov	r7, r6
    8b30:	mov	sl, r8
    8b34:	str	ip, [sp, #24]
    8b38:	mov	r6, r5
    8b3c:	mov	r8, r7
    8b40:	vld1.64	{d8-d9}, [r4]!
    8b44:	vmov.32	r0, d9[0]
    8b48:	vmov.32	r1, d9[1]
    8b4c:	bl	584d0 <__aeabi_ul2f>
    8b50:	vmov.32	r2, d8[0]
    8b54:	vmov.32	r1, d8[1]
    8b58:	vmov	s17, r0
    8b5c:	mov	r0, r2
    8b60:	bl	584d0 <__aeabi_ul2f>
    8b64:	vmov	s16, r0
    8b68:	subs	r6, r6, #2
    8b6c:	vst1.32	{d8}, [r7]!
    8b70:	bne	8b40 <ReadSingleData+0x1c24>
    8b74:	ldr	ip, [sp, #24]
    8b78:	mov	r6, r8
    8b7c:	cmp	r5, sl
    8b80:	mov	r8, sl
    8b84:	beq	8e34 <ReadSingleData+0x1f18>
    8b88:	add	r0, sp, #72	; 0x48
    8b8c:	mov	r7, ip
    8b90:	sub	r4, r8, r5
    8b94:	add	r6, r6, r5, lsl #2
    8b98:	add	r5, r0, r5, lsl #3
    8b9c:	ldrd	r0, [r5]
    8ba0:	bl	584d0 <__aeabi_ul2f>
    8ba4:	str	r0, [r6], #4
    8ba8:	subs	r4, r4, #1
    8bac:	add	r5, r5, #8
    8bb0:	bne	8b9c <ReadSingleData+0x1c80>
    8bb4:	mov	ip, r7
    8bb8:	b	8e34 <ReadSingleData+0x1f18>
    8bbc:	sub	r0, r8, #256	; 0x100
    8bc0:	add	r1, r6, #1024	; 0x400
    8bc4:	str	ip, [sp, #24]
    8bc8:	str	r8, [sp, #12]
    8bcc:	str	r0, [sp, #20]
    8bd0:	mov	r0, #0
    8bd4:	mov	r5, r1
    8bd8:	ldr	r3, [r4]
    8bdc:	ldr	r1, [sp, #24]
    8be0:	add	r4, sp, #72	; 0x48
    8be4:	mov	r8, r0
    8be8:	mov	r2, #256	; 0x100
    8bec:	mov	r0, r4
    8bf0:	bl	18b8 <fread@plt>
    8bf4:	mov	sl, r6
    8bf8:	mov	r7, r0
    8bfc:	mov	r6, #0
    8c00:	mov	r0, r4
    8c04:	bl	1bd4 <Mat_uint64Swap>
    8c08:	bl	584d0 <__aeabi_ul2f>
    8c0c:	str	r0, [sl, r6]
    8c10:	add	r6, r6, #4
    8c14:	add	r4, r4, #8
    8c18:	cmp	r6, #1024	; 0x400
    8c1c:	bne	8c00 <ReadSingleData+0x1ce4>
    8c20:	ldr	r2, [sp, #20]
    8c24:	ldr	r4, [sp, #28]
    8c28:	add	sl, sl, #1024	; 0x400
    8c2c:	add	r0, r8, #256	; 0x100
    8c30:	add	r9, r7, r9
    8c34:	add	r1, r5, #1024	; 0x400
    8c38:	mov	r6, sl
    8c3c:	cmp	r0, r2
    8c40:	blt	8bd4 <ReadSingleData+0x1cb8>
    8c44:	ldr	r1, [sp, #12]
    8c48:	cmp	r0, r1
    8c4c:	bge	8e30 <ReadSingleData+0x1f14>
    8c50:	sub	r6, r1, r0
    8c54:	ldr	r3, [r4]
    8c58:	ldr	r1, [sp, #24]
    8c5c:	add	r4, sp, #72	; 0x48
    8c60:	mov	r0, r4
    8c64:	mov	r2, r6
    8c68:	bl	18b8 <fread@plt>
    8c6c:	add	r9, r0, r9
    8c70:	cmp	r6, #1
    8c74:	blt	8e30 <ReadSingleData+0x1f14>
    8c78:	ldr	r0, [sp, #20]
    8c7c:	sub	r6, r0, r8
    8c80:	mov	r0, r4
    8c84:	bl	1bd4 <Mat_uint64Swap>
    8c88:	bl	584d0 <__aeabi_ul2f>
    8c8c:	str	r0, [r5], #4
    8c90:	subs	r6, r6, #1
    8c94:	add	r4, r4, #8
    8c98:	bne	8c80 <ReadSingleData+0x1d64>
    8c9c:	b	8e30 <ReadSingleData+0x1f14>
    8ca0:	sub	r1, r8, #256	; 0x100
    8ca4:	add	r0, r6, #1024	; 0x400
    8ca8:	mov	r3, #0
    8cac:	mov	r2, #256	; 0x100
    8cb0:	mov	r5, r6
    8cb4:	str	r8, [sp, #12]
    8cb8:	str	r6, [sp, #4]
    8cbc:	str	r1, [sp, #8]
    8cc0:	str	r3, [sp, #16]
    8cc4:	ldr	r3, [r4]
    8cc8:	add	r4, sp, #72	; 0x48
    8ccc:	str	r2, [sp, #20]
    8cd0:	mov	sl, r0
    8cd4:	mov	r1, ip
    8cd8:	mov	r2, #256	; 0x100
    8cdc:	mov	r8, ip
    8ce0:	mov	r0, r4
    8ce4:	bl	18b8 <fread@plt>
    8ce8:	mov	r7, r0
    8cec:	mov	r6, #0
    8cf0:	vld1.64	{d8-d9}, [r4]!
    8cf4:	vmov.32	r0, d9[0]
    8cf8:	vmov.32	r1, d9[1]
    8cfc:	bl	584d0 <__aeabi_ul2f>
    8d00:	vmov.32	r2, d8[0]
    8d04:	vmov.32	r1, d8[1]
    8d08:	vmov	s17, r0
    8d0c:	mov	r0, r2
    8d10:	bl	584d0 <__aeabi_ul2f>
    8d14:	vmov	s16, r0
    8d18:	add	r0, r5, r6
    8d1c:	add	r6, r6, #8
    8d20:	cmp	r6, #1024	; 0x400
    8d24:	vstr	d8, [r0]
    8d28:	bne	8cf0 <ReadSingleData+0x1dd4>
    8d2c:	ldr	r1, [sp, #20]
    8d30:	ldr	r6, [sp, #16]
    8d34:	ldr	r4, [sp, #28]
    8d38:	add	r9, r7, r9
    8d3c:	add	r5, r5, #1024	; 0x400
    8d40:	add	r0, sl, #1024	; 0x400
    8d44:	mov	ip, r8
    8d48:	add	r2, r1, #256	; 0x100
    8d4c:	ldr	r1, [sp, #8]
    8d50:	add	r3, r6, #256	; 0x100
    8d54:	cmp	r3, r1
    8d58:	blt	8cc0 <ReadSingleData+0x1da4>
    8d5c:	ldr	r0, [sp, #12]
    8d60:	cmp	r3, r0
    8d64:	bge	8e34 <ReadSingleData+0x1f18>
    8d68:	mov	r2, r4
    8d6c:	sub	r4, r0, r3
    8d70:	add	r7, sp, #72	; 0x48
    8d74:	mov	r1, ip
    8d78:	str	ip, [sp, #24]
    8d7c:	ldr	r3, [r2]
    8d80:	mov	r0, r7
    8d84:	mov	r2, r4
    8d88:	bl	18b8 <fread@plt>
    8d8c:	add	r9, r0, r9
    8d90:	cmp	r4, #1
    8d94:	blt	8e30 <ReadSingleData+0x1f14>
    8d98:	mov	r5, #0
    8d9c:	beq	8df0 <ReadSingleData+0x1ed4>
    8da0:	ldr	r0, [sp, #8]
    8da4:	bic	r5, r4, #1
    8da8:	sub	r0, r0, r6
    8dac:	bic	r6, r0, #1
    8db0:	vld1.64	{d8-d9}, [r7]!
    8db4:	vmov.32	r0, d9[0]
    8db8:	vmov.32	r1, d9[1]
    8dbc:	bl	584d0 <__aeabi_ul2f>
    8dc0:	vmov.32	r2, d8[0]
    8dc4:	vmov.32	r1, d8[1]
    8dc8:	vmov	s17, r0
    8dcc:	mov	r0, r2
    8dd0:	bl	584d0 <__aeabi_ul2f>
    8dd4:	vmov	s16, r0
    8dd8:	subs	r6, r6, #2
    8ddc:	vst1.32	{d8}, [sl]!
    8de0:	bne	8db0 <ReadSingleData+0x1e94>
    8de4:	ldr	r6, [sp, #16]
    8de8:	cmp	r4, r5
    8dec:	beq	8e30 <ReadSingleData+0x1f14>
    8df0:	add	r0, sp, #72	; 0x48
    8df4:	ldr	r1, [sp, #4]
    8df8:	mov	r2, r6
    8dfc:	add	r4, r0, r5, lsl #3
    8e00:	ldr	r0, [sp, #20]
    8e04:	add	r0, r5, r0
    8e08:	add	r6, r1, r0, lsl #2
    8e0c:	ldr	r0, [sp, #8]
    8e10:	sub	r0, r0, r2
    8e14:	sub	r5, r0, r5
    8e18:	ldrd	r0, [r4]
    8e1c:	bl	584d0 <__aeabi_ul2f>
    8e20:	str	r0, [r6], #4
    8e24:	subs	r5, r5, #1
    8e28:	add	r4, r4, #8
    8e2c:	bne	8e18 <ReadSingleData+0x1efc>
    8e30:	ldr	ip, [sp, #24]
    8e34:	mul	r0, r9, ip
    8e38:	sub	sp, fp, #48	; 0x30
    8e3c:	vpop	{d8-d9}
    8e40:	add	sp, sp, #4
    8e44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8e48:	ldr	ip, [sp, #24]
    8e4c:	ldr	r6, [sp, #4]
    8e50:	ldr	r8, [sp, #12]
    8e54:	cmp	r5, #13
    8e58:	beq	8a8c <ReadSingleData+0x1b70>
    8e5c:	b	8e34 <ReadSingleData+0x1f18>

00008e60 <ReadCompressedSingleData>:
    8e60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e64:	add	fp, sp, #28
    8e68:	sub	sp, sp, #12
    8e6c:	mov	r7, r0
    8e70:	mov	r0, #0
    8e74:	cmp	r1, #0
    8e78:	beq	8e8c <ReadCompressedSingleData+0x2c>
    8e7c:	cmp	r7, #0
    8e80:	movne	r5, r2
    8e84:	cmpne	r2, #0
    8e88:	bne	8e94 <ReadCompressedSingleData+0x34>
    8e8c:	sub	sp, fp, #28
    8e90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8e94:	ldr	sl, [fp, #8]
    8e98:	mov	r0, r3
    8e9c:	mov	r4, r3
    8ea0:	mov	r6, r1
    8ea4:	bl	1924 <Mat_SizeOf@plt>
    8ea8:	mov	r9, r0
    8eac:	sub	r0, r4, #1
    8eb0:	cmp	r0, #12
    8eb4:	bhi	93f8 <ReadCompressedSingleData+0x598>
    8eb8:	add	r1, pc, #4
    8ebc:	ldr	r0, [r1, r0, lsl #2]
    8ec0:	add	pc, r1, r0
    8ec4:	.word	0x00000034
    8ec8:	.word	0x00000078
    8ecc:	.word	0x000000bc
    8ed0:	.word	0x00000110
    8ed4:	.word	0x00000164
    8ed8:	.word	0x000001b8
    8edc:	.word	0x0000020c
    8ee0:	.word	0x00000534
    8ee4:	.word	0x00000258
    8ee8:	.word	0x00000534
    8eec:	.word	0x00000534
    8ef0:	.word	0x000002a8
    8ef4:	.word	0x000002f4
    8ef8:	cmp	sl, #1
    8efc:	blt	93f8 <ReadCompressedSingleData+0x598>
    8f00:	mov	r8, sp
    8f04:	mov	r4, sl
    8f08:	mov	r0, r7
    8f0c:	mov	r1, r6
    8f10:	mov	r2, r8
    8f14:	mov	r3, r9
    8f18:	bl	32b8 <InflateData>
    8f1c:	ldrsb	r0, [sp]
    8f20:	subs	r4, r4, #1
    8f24:	vmov	s0, r0
    8f28:	vcvt.f32.s32	s0, s0
    8f2c:	vstr	s0, [r5]
    8f30:	add	r5, r5, #4
    8f34:	bne	8f08 <ReadCompressedSingleData+0xa8>
    8f38:	b	93f8 <ReadCompressedSingleData+0x598>
    8f3c:	cmp	sl, #1
    8f40:	blt	93f8 <ReadCompressedSingleData+0x598>
    8f44:	mov	r8, sp
    8f48:	mov	r4, sl
    8f4c:	mov	r0, r7
    8f50:	mov	r1, r6
    8f54:	mov	r2, r8
    8f58:	mov	r3, r9
    8f5c:	bl	32b8 <InflateData>
    8f60:	ldrb	r0, [sp]
    8f64:	subs	r4, r4, #1
    8f68:	vmov	s0, r0
    8f6c:	vcvt.f32.u32	s0, s0
    8f70:	vstr	s0, [r5]
    8f74:	add	r5, r5, #4
    8f78:	bne	8f4c <ReadCompressedSingleData+0xec>
    8f7c:	b	93f8 <ReadCompressedSingleData+0x598>
    8f80:	ldr	r0, [r7, #20]
    8f84:	cmp	r0, #0
    8f88:	beq	9204 <ReadCompressedSingleData+0x3a4>
    8f8c:	cmp	sl, #1
    8f90:	blt	93f8 <ReadCompressedSingleData+0x598>
    8f94:	mov	r8, sp
    8f98:	mov	r4, sl
    8f9c:	mov	r0, r7
    8fa0:	mov	r1, r6
    8fa4:	mov	r2, r8
    8fa8:	mov	r3, r9
    8fac:	bl	32b8 <InflateData>
    8fb0:	mov	r0, r8
    8fb4:	bl	1c18 <Mat_int16Swap>
    8fb8:	vmov	s0, r0
    8fbc:	subs	r4, r4, #1
    8fc0:	vcvt.f32.s32	s0, s0
    8fc4:	vstr	s0, [r5]
    8fc8:	add	r5, r5, #4
    8fcc:	bne	8f9c <ReadCompressedSingleData+0x13c>
    8fd0:	b	93f8 <ReadCompressedSingleData+0x598>
    8fd4:	ldr	r0, [r7, #20]
    8fd8:	cmp	r0, #0
    8fdc:	beq	9248 <ReadCompressedSingleData+0x3e8>
    8fe0:	cmp	sl, #1
    8fe4:	blt	93f8 <ReadCompressedSingleData+0x598>
    8fe8:	mov	r8, sp
    8fec:	mov	r4, sl
    8ff0:	mov	r0, r7
    8ff4:	mov	r1, r6
    8ff8:	mov	r2, r8
    8ffc:	mov	r3, r9
    9000:	bl	32b8 <InflateData>
    9004:	mov	r0, r8
    9008:	bl	1c2c <Mat_uint16Swap>
    900c:	vmov	s0, r0
    9010:	subs	r4, r4, #1
    9014:	vcvt.f32.u32	s0, s0
    9018:	vstr	s0, [r5]
    901c:	add	r5, r5, #4
    9020:	bne	8ff0 <ReadCompressedSingleData+0x190>
    9024:	b	93f8 <ReadCompressedSingleData+0x598>
    9028:	ldr	r0, [r7, #20]
    902c:	cmp	r0, #0
    9030:	beq	928c <ReadCompressedSingleData+0x42c>
    9034:	cmp	sl, #1
    9038:	blt	93f8 <ReadCompressedSingleData+0x598>
    903c:	mov	r8, sp
    9040:	mov	r4, sl
    9044:	mov	r0, r7
    9048:	mov	r1, r6
    904c:	mov	r2, r8
    9050:	mov	r3, r9
    9054:	bl	32b8 <InflateData>
    9058:	mov	r0, r8
    905c:	bl	1bf0 <Mat_int32Swap>
    9060:	vmov	s0, r0
    9064:	subs	r4, r4, #1
    9068:	vcvt.f32.s32	s0, s0
    906c:	vstr	s0, [r5]
    9070:	add	r5, r5, #4
    9074:	bne	9044 <ReadCompressedSingleData+0x1e4>
    9078:	b	93f8 <ReadCompressedSingleData+0x598>
    907c:	ldr	r0, [r7, #20]
    9080:	cmp	r0, #0
    9084:	beq	92cc <ReadCompressedSingleData+0x46c>
    9088:	cmp	sl, #1
    908c:	blt	93f8 <ReadCompressedSingleData+0x598>
    9090:	mov	r8, sp
    9094:	mov	r4, sl
    9098:	mov	r0, r7
    909c:	mov	r1, r6
    90a0:	mov	r2, r8
    90a4:	mov	r3, r9
    90a8:	bl	32b8 <InflateData>
    90ac:	mov	r0, r8
    90b0:	bl	1c04 <Mat_uint32Swap>
    90b4:	vmov	s0, r0
    90b8:	subs	r4, r4, #1
    90bc:	vcvt.f32.u32	s0, s0
    90c0:	vstr	s0, [r5]
    90c4:	add	r5, r5, #4
    90c8:	bne	9098 <ReadCompressedSingleData+0x238>
    90cc:	b	93f8 <ReadCompressedSingleData+0x598>
    90d0:	ldr	r0, [r7, #20]
    90d4:	cmp	r0, #0
    90d8:	beq	930c <ReadCompressedSingleData+0x4ac>
    90dc:	cmp	sl, #1
    90e0:	blt	93f8 <ReadCompressedSingleData+0x598>
    90e4:	mov	r8, sp
    90e8:	mov	r4, sl
    90ec:	mov	r0, r7
    90f0:	mov	r1, r6
    90f4:	mov	r2, r8
    90f8:	mov	r3, r9
    90fc:	bl	32b8 <InflateData>
    9100:	mov	r0, r8
    9104:	bl	1c44 <Mat_floatSwap>
    9108:	vstr	s0, [r5]
    910c:	subs	r4, r4, #1
    9110:	add	r5, r5, #4
    9114:	bne	90ec <ReadCompressedSingleData+0x28c>
    9118:	b	93f8 <ReadCompressedSingleData+0x598>
    911c:	ldr	r0, [r7, #20]
    9120:	cmp	r0, #0
    9124:	beq	9344 <ReadCompressedSingleData+0x4e4>
    9128:	cmp	sl, #1
    912c:	blt	93f8 <ReadCompressedSingleData+0x598>
    9130:	mov	r8, sp
    9134:	mov	r4, sl
    9138:	mov	r0, r7
    913c:	mov	r1, r6
    9140:	mov	r2, r8
    9144:	mov	r3, r9
    9148:	bl	32b8 <InflateData>
    914c:	mov	r0, r8
    9150:	bl	1c88 <Mat_doubleSwap>
    9154:	vcvt.f32.f64	s0, d0
    9158:	subs	r4, r4, #1
    915c:	vstr	s0, [r5]
    9160:	add	r5, r5, #4
    9164:	bne	9138 <ReadCompressedSingleData+0x2d8>
    9168:	b	93f8 <ReadCompressedSingleData+0x598>
    916c:	ldr	r0, [r7, #20]
    9170:	cmp	r0, #0
    9174:	beq	9384 <ReadCompressedSingleData+0x524>
    9178:	cmp	sl, #1
    917c:	blt	93f8 <ReadCompressedSingleData+0x598>
    9180:	mov	r8, sp
    9184:	mov	r4, sl
    9188:	mov	r0, r7
    918c:	mov	r1, r6
    9190:	mov	r2, r8
    9194:	mov	r3, r9
    9198:	bl	32b8 <InflateData>
    919c:	mov	r0, r8
    91a0:	bl	1b84 <Mat_int64Swap>
    91a4:	bl	584e0 <__aeabi_l2f>
    91a8:	str	r0, [r5], #4
    91ac:	subs	r4, r4, #1
    91b0:	bne	9188 <ReadCompressedSingleData+0x328>
    91b4:	b	93f8 <ReadCompressedSingleData+0x598>
    91b8:	ldr	r0, [r7, #20]
    91bc:	cmp	r0, #0
    91c0:	beq	93c0 <ReadCompressedSingleData+0x560>
    91c4:	cmp	sl, #1
    91c8:	blt	93f8 <ReadCompressedSingleData+0x598>
    91cc:	mov	r8, sp
    91d0:	mov	r4, sl
    91d4:	mov	r0, r7
    91d8:	mov	r1, r6
    91dc:	mov	r2, r8
    91e0:	mov	r3, r9
    91e4:	bl	32b8 <InflateData>
    91e8:	mov	r0, r8
    91ec:	bl	1bd4 <Mat_uint64Swap>
    91f0:	bl	584d0 <__aeabi_ul2f>
    91f4:	str	r0, [r5], #4
    91f8:	subs	r4, r4, #1
    91fc:	bne	91d4 <ReadCompressedSingleData+0x374>
    9200:	b	93f8 <ReadCompressedSingleData+0x598>
    9204:	cmp	sl, #1
    9208:	blt	93f8 <ReadCompressedSingleData+0x598>
    920c:	mov	r8, sp
    9210:	mov	r4, sl
    9214:	mov	r0, r7
    9218:	mov	r1, r6
    921c:	mov	r2, r8
    9220:	mov	r3, r9
    9224:	bl	32b8 <InflateData>
    9228:	ldrsh	r0, [sp]
    922c:	subs	r4, r4, #1
    9230:	vmov	s0, r0
    9234:	vcvt.f32.s32	s0, s0
    9238:	vstr	s0, [r5]
    923c:	add	r5, r5, #4
    9240:	bne	9214 <ReadCompressedSingleData+0x3b4>
    9244:	b	93f8 <ReadCompressedSingleData+0x598>
    9248:	cmp	sl, #1
    924c:	blt	93f8 <ReadCompressedSingleData+0x598>
    9250:	mov	r8, sp
    9254:	mov	r4, sl
    9258:	mov	r0, r7
    925c:	mov	r1, r6
    9260:	mov	r2, r8
    9264:	mov	r3, r9
    9268:	bl	32b8 <InflateData>
    926c:	ldrh	r0, [sp]
    9270:	subs	r4, r4, #1
    9274:	vmov	s0, r0
    9278:	vcvt.f32.u32	s0, s0
    927c:	vstr	s0, [r5]
    9280:	add	r5, r5, #4
    9284:	bne	9258 <ReadCompressedSingleData+0x3f8>
    9288:	b	93f8 <ReadCompressedSingleData+0x598>
    928c:	cmp	sl, #1
    9290:	blt	93f8 <ReadCompressedSingleData+0x598>
    9294:	mov	r8, sp
    9298:	mov	r4, sl
    929c:	mov	r0, r7
    92a0:	mov	r1, r6
    92a4:	mov	r2, r8
    92a8:	mov	r3, r9
    92ac:	bl	32b8 <InflateData>
    92b0:	vldr	s0, [sp]
    92b4:	subs	r4, r4, #1
    92b8:	vcvt.f32.s32	s0, s0
    92bc:	vstr	s0, [r5]
    92c0:	add	r5, r5, #4
    92c4:	bne	929c <ReadCompressedSingleData+0x43c>
    92c8:	b	93f8 <ReadCompressedSingleData+0x598>
    92cc:	cmp	sl, #1
    92d0:	blt	93f8 <ReadCompressedSingleData+0x598>
    92d4:	mov	r8, sp
    92d8:	mov	r4, sl
    92dc:	mov	r0, r7
    92e0:	mov	r1, r6
    92e4:	mov	r2, r8
    92e8:	mov	r3, r9
    92ec:	bl	32b8 <InflateData>
    92f0:	vldr	s0, [sp]
    92f4:	subs	r4, r4, #1
    92f8:	vcvt.f32.u32	s0, s0
    92fc:	vstr	s0, [r5]
    9300:	add	r5, r5, #4
    9304:	bne	92dc <ReadCompressedSingleData+0x47c>
    9308:	b	93f8 <ReadCompressedSingleData+0x598>
    930c:	cmp	sl, #1
    9310:	blt	93f8 <ReadCompressedSingleData+0x598>
    9314:	mov	r8, sp
    9318:	mov	r4, sl
    931c:	mov	r0, r7
    9320:	mov	r1, r6
    9324:	mov	r2, r8
    9328:	mov	r3, r9
    932c:	bl	32b8 <InflateData>
    9330:	ldr	r0, [sp]
    9334:	subs	r4, r4, #1
    9338:	str	r0, [r5], #4
    933c:	bne	931c <ReadCompressedSingleData+0x4bc>
    9340:	b	93f8 <ReadCompressedSingleData+0x598>
    9344:	cmp	sl, #1
    9348:	blt	93f8 <ReadCompressedSingleData+0x598>
    934c:	mov	r8, sp
    9350:	mov	r4, sl
    9354:	mov	r0, r7
    9358:	mov	r1, r6
    935c:	mov	r2, r8
    9360:	mov	r3, r9
    9364:	bl	32b8 <InflateData>
    9368:	vldr	d16, [sp]
    936c:	subs	r4, r4, #1
    9370:	vcvt.f32.f64	s0, d16
    9374:	vstr	s0, [r5]
    9378:	add	r5, r5, #4
    937c:	bne	9354 <ReadCompressedSingleData+0x4f4>
    9380:	b	93f8 <ReadCompressedSingleData+0x598>
    9384:	cmp	sl, #1
    9388:	blt	93f8 <ReadCompressedSingleData+0x598>
    938c:	mov	r8, sp
    9390:	mov	r4, sl
    9394:	mov	r0, r7
    9398:	mov	r1, r6
    939c:	mov	r2, r8
    93a0:	mov	r3, r9
    93a4:	bl	32b8 <InflateData>
    93a8:	ldm	sp, {r0, r1}
    93ac:	bl	584e0 <__aeabi_l2f>
    93b0:	str	r0, [r5], #4
    93b4:	subs	r4, r4, #1
    93b8:	bne	9394 <ReadCompressedSingleData+0x534>
    93bc:	b	93f8 <ReadCompressedSingleData+0x598>
    93c0:	cmp	sl, #1
    93c4:	blt	93f8 <ReadCompressedSingleData+0x598>
    93c8:	mov	r8, sp
    93cc:	mov	r4, sl
    93d0:	mov	r0, r7
    93d4:	mov	r1, r6
    93d8:	mov	r2, r8
    93dc:	mov	r3, r9
    93e0:	bl	32b8 <InflateData>
    93e4:	ldm	sp, {r0, r1}
    93e8:	bl	584d0 <__aeabi_ul2f>
    93ec:	str	r0, [r5], #4
    93f0:	subs	r4, r4, #1
    93f4:	bne	93d0 <ReadCompressedSingleData+0x570>
    93f8:	mul	r0, r9, sl
    93fc:	sub	sp, fp, #28
    9400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00009404 <ReadInt64Data>:
    9404:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9408:	add	fp, sp, #28
    940c:	sub	sp, sp, #124	; 0x7c
    9410:	sub	sp, sp, #2048	; 0x800
    9414:	mov	r4, r0
    9418:	mov	r0, #0
    941c:	cmp	r4, #0
    9420:	beq	9438 <ReadInt64Data+0x34>
    9424:	cmp	r1, #0
    9428:	mov	sl, r1
    942c:	ldrne	r1, [r4]
    9430:	cmpne	r1, #0
    9434:	bne	9440 <ReadInt64Data+0x3c>
    9438:	sub	sp, fp, #28
    943c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9440:	mov	r0, r2
    9444:	mov	r7, r3
    9448:	mov	r8, r2
    944c:	bl	1924 <Mat_SizeOf@plt>
    9450:	mov	r6, r0
    9454:	sub	r0, r8, #1
    9458:	mov	r9, #0
    945c:	str	r4, [sp, #20]
    9460:	cmp	r0, #11
    9464:	str	r6, [sp, #16]
    9468:	bhi	adf4 <ReadInt64Data+0x19f0>
    946c:	add	r1, pc, #4
    9470:	ldr	r0, [r1, r0, lsl #2]
    9474:	add	pc, r1, r0
    9478:	.word	0x00000030
    947c:	.word	0x000000d4
    9480:	.word	0x00000180
    9484:	.word	0x000001dc
    9488:	.word	0x00000238
    948c:	.word	0x00000294
    9490:	.word	0x000002f0
    9494:	.word	0x0000197c
    9498:	.word	0x00000350
    949c:	.word	0x0000197c
    94a0:	.word	0x0000197c
    94a4:	.word	0x000003b0
    94a8:	cmp	r7, #256	; 0x100
    94ac:	bgt	9888 <ReadInt64Data+0x484>
    94b0:	ldr	r3, [r4]
    94b4:	add	r4, sp, #120	; 0x78
    94b8:	mov	r1, r6
    94bc:	mov	r2, r7
    94c0:	mov	r0, r4
    94c4:	bl	18b8 <fread@plt>
    94c8:	mov	r9, r0
    94cc:	cmp	r7, #1
    94d0:	blt	b010 <ReadInt64Data+0x1c0c>
    94d4:	mov	r0, #0
    94d8:	beq	9520 <ReadInt64Data+0x11c>
    94dc:	bic	r0, r7, #1
    94e0:	mov	r5, r7
    94e4:	add	r1, sp, #96	; 0x60
    94e8:	mov	r3, sl
    94ec:	mov	r2, r0
    94f0:	ldrh	r7, [r4], #2
    94f4:	subs	r2, r2, #2
    94f8:	strh	r7, [sp, #96]	; 0x60
    94fc:	vld1.16	{d16[0]}, [r1 :16]
    9500:	vmovl.s8	q8, d16
    9504:	vmovl.s16	q8, d16
    9508:	vmovl.s32	q8, d16
    950c:	vst1.64	{d16-d17}, [r3]!
    9510:	bne	94f0 <ReadInt64Data+0xec>
    9514:	mov	r7, r5
    9518:	cmp	r0, r5
    951c:	beq	b010 <ReadInt64Data+0x1c0c>
    9520:	add	r3, sp, #120	; 0x78
    9524:	sub	r1, r7, r0
    9528:	add	r2, sl, r0, lsl #3
    952c:	add	r0, r3, r0
    9530:	ldrsb	r4, [r0], #1
    9534:	subs	r1, r1, #1
    9538:	asr	r5, r4, #31
    953c:	strd	r4, [r2]
    9540:	add	r2, r2, #8
    9544:	bne	9530 <ReadInt64Data+0x12c>
    9548:	b	b010 <ReadInt64Data+0x1c0c>
    954c:	cmp	r7, #256	; 0x100
    9550:	bgt	99f4 <ReadInt64Data+0x5f0>
    9554:	ldr	r3, [r4]
    9558:	add	r4, sp, #120	; 0x78
    955c:	mov	r1, r6
    9560:	mov	r2, r7
    9564:	mov	r0, r4
    9568:	bl	18b8 <fread@plt>
    956c:	mov	r9, r0
    9570:	cmp	r7, #1
    9574:	blt	b010 <ReadInt64Data+0x1c0c>
    9578:	mov	r1, #0
    957c:	mov	r0, #0
    9580:	beq	95cc <ReadInt64Data+0x1c8>
    9584:	bic	r0, r7, #1
    9588:	mov	r5, r7
    958c:	add	r2, sp, #108	; 0x6c
    9590:	mov	r7, sl
    9594:	mov	r3, r0
    9598:	ldrh	r6, [r4], #2
    959c:	subs	r3, r3, #2
    95a0:	strh	r6, [sp, #108]	; 0x6c
    95a4:	vld1.16	{d16[0]}, [r2 :16]
    95a8:	vmovl.u8	q8, d16
    95ac:	vmovl.u16	q8, d16
    95b0:	vmovl.u32	q8, d16
    95b4:	vst1.64	{d16-d17}, [r7]!
    95b8:	bne	9598 <ReadInt64Data+0x194>
    95bc:	ldr	r6, [sp, #16]
    95c0:	mov	r7, r5
    95c4:	cmp	r0, r5
    95c8:	beq	b010 <ReadInt64Data+0x1c0c>
    95cc:	sub	r2, r7, r0
    95d0:	add	r7, sp, #120	; 0x78
    95d4:	add	r3, sl, r0, lsl #3
    95d8:	add	r0, r7, r0
    95dc:	ldrb	r4, [r0], #1
    95e0:	subs	r2, r2, #1
    95e4:	str	r4, [r3]
    95e8:	str	r1, [r3, #4]
    95ec:	add	r3, r3, #8
    95f0:	bne	95dc <ReadInt64Data+0x1d8>
    95f4:	b	b010 <ReadInt64Data+0x1c0c>
    95f8:	ldr	r0, [r4, #20]
    95fc:	cmp	r0, #0
    9600:	beq	9b68 <ReadInt64Data+0x764>
    9604:	cmp	r7, #256	; 0x100
    9608:	bgt	9ee8 <ReadInt64Data+0xae4>
    960c:	ldr	r3, [r4]
    9610:	add	r4, sp, #120	; 0x78
    9614:	mov	r1, r6
    9618:	mov	r2, r7
    961c:	mov	r0, r4
    9620:	bl	18b8 <fread@plt>
    9624:	mov	r9, r0
    9628:	cmp	r7, #1
    962c:	blt	b010 <ReadInt64Data+0x1c0c>
    9630:	mov	r0, r4
    9634:	bl	1c18 <Mat_int16Swap>
    9638:	asr	r1, r0, #31
    963c:	subs	r7, r7, #1
    9640:	add	r4, r4, #2
    9644:	strd	r0, [sl]
    9648:	add	sl, sl, #8
    964c:	bne	9630 <ReadInt64Data+0x22c>
    9650:	b	b010 <ReadInt64Data+0x1c0c>
    9654:	ldr	r0, [r4, #20]
    9658:	cmp	r0, #0
    965c:	beq	9c08 <ReadInt64Data+0x804>
    9660:	cmp	r7, #256	; 0x100
    9664:	bgt	9fd4 <ReadInt64Data+0xbd0>
    9668:	ldr	r3, [r4]
    966c:	add	r4, sp, #120	; 0x78
    9670:	mov	r1, r6
    9674:	mov	r2, r7
    9678:	mov	r0, r4
    967c:	bl	18b8 <fread@plt>
    9680:	mov	r9, r0
    9684:	cmp	r7, #1
    9688:	blt	b010 <ReadInt64Data+0x1c0c>
    968c:	mov	r5, #0
    9690:	mov	r0, r4
    9694:	bl	1c2c <Mat_uint16Swap>
    9698:	stm	sl, {r0, r5}
    969c:	subs	r7, r7, #1
    96a0:	add	sl, sl, #8
    96a4:	add	r4, r4, #2
    96a8:	bne	9690 <ReadInt64Data+0x28c>
    96ac:	b	b010 <ReadInt64Data+0x1c0c>
    96b0:	ldr	r0, [r4, #20]
    96b4:	cmp	r0, #0
    96b8:	beq	9cb0 <ReadInt64Data+0x8ac>
    96bc:	cmp	r7, #256	; 0x100
    96c0:	bgt	a0c8 <ReadInt64Data+0xcc4>
    96c4:	ldr	r3, [r4]
    96c8:	add	r4, sp, #120	; 0x78
    96cc:	mov	r1, r6
    96d0:	mov	r2, r7
    96d4:	mov	r0, r4
    96d8:	bl	18b8 <fread@plt>
    96dc:	mov	r9, r0
    96e0:	cmp	r7, #1
    96e4:	blt	b010 <ReadInt64Data+0x1c0c>
    96e8:	mov	r0, r4
    96ec:	bl	1bf0 <Mat_int32Swap>
    96f0:	asr	r1, r0, #31
    96f4:	subs	r7, r7, #1
    96f8:	add	r4, r4, #4
    96fc:	strd	r0, [sl]
    9700:	add	sl, sl, #8
    9704:	bne	96e8 <ReadInt64Data+0x2e4>
    9708:	b	b010 <ReadInt64Data+0x1c0c>
    970c:	ldr	r0, [r4, #20]
    9710:	cmp	r0, #0
    9714:	beq	9d5c <ReadInt64Data+0x958>
    9718:	cmp	r7, #256	; 0x100
    971c:	bgt	a1b4 <ReadInt64Data+0xdb0>
    9720:	ldr	r3, [r4]
    9724:	add	r4, sp, #120	; 0x78
    9728:	mov	r1, r6
    972c:	mov	r2, r7
    9730:	mov	r0, r4
    9734:	bl	18b8 <fread@plt>
    9738:	mov	r9, r0
    973c:	cmp	r7, #1
    9740:	blt	b010 <ReadInt64Data+0x1c0c>
    9744:	mov	r5, #0
    9748:	mov	r0, r4
    974c:	bl	1c04 <Mat_uint32Swap>
    9750:	stm	sl, {r0, r5}
    9754:	subs	r7, r7, #1
    9758:	add	sl, sl, #8
    975c:	add	r4, r4, #4
    9760:	bne	9748 <ReadInt64Data+0x344>
    9764:	b	b010 <ReadInt64Data+0x1c0c>
    9768:	ldr	r0, [r4, #20]
    976c:	cmp	r0, #0
    9770:	beq	9e0c <ReadInt64Data+0xa08>
    9774:	cmp	r7, #256	; 0x100
    9778:	bgt	a2a8 <ReadInt64Data+0xea4>
    977c:	ldr	r3, [r4]
    9780:	add	r4, sp, #120	; 0x78
    9784:	mov	r1, r6
    9788:	mov	r2, r7
    978c:	mov	r0, r4
    9790:	bl	18b8 <fread@plt>
    9794:	mov	r9, r0
    9798:	cmp	r7, #1
    979c:	blt	b010 <ReadInt64Data+0x1c0c>
    97a0:	mov	r0, r4
    97a4:	bl	1c44 <Mat_floatSwap>
    97a8:	vmov	r0, s0
    97ac:	bl	5855c <__aeabi_f2lz>
    97b0:	strd	r0, [sl]
    97b4:	subs	r7, r7, #1
    97b8:	add	sl, sl, #8
    97bc:	add	r4, r4, #4
    97c0:	bne	97a0 <ReadInt64Data+0x39c>
    97c4:	b	b010 <ReadInt64Data+0x1c0c>
    97c8:	ldr	r0, [r4, #20]
    97cc:	cmp	r0, #0
    97d0:	beq	9e54 <ReadInt64Data+0xa50>
    97d4:	cmp	r7, #256	; 0x100
    97d8:	bgt	a39c <ReadInt64Data+0xf98>
    97dc:	ldr	r3, [r4]
    97e0:	add	r4, sp, #120	; 0x78
    97e4:	mov	r1, r6
    97e8:	mov	r2, r7
    97ec:	mov	r0, r4
    97f0:	bl	18b8 <fread@plt>
    97f4:	mov	r9, r0
    97f8:	cmp	r7, #1
    97fc:	blt	b010 <ReadInt64Data+0x1c0c>
    9800:	mov	r0, r4
    9804:	bl	1c88 <Mat_doubleSwap>
    9808:	vmov	r0, r1, d0
    980c:	bl	58588 <__aeabi_d2lz>
    9810:	strd	r0, [sl]
    9814:	subs	r7, r7, #1
    9818:	add	sl, sl, #8
    981c:	add	r4, r4, #8
    9820:	bne	9800 <ReadInt64Data+0x3fc>
    9824:	b	b010 <ReadInt64Data+0x1c0c>
    9828:	ldr	r0, [r4, #20]
    982c:	cmp	r0, #0
    9830:	beq	9ea4 <ReadInt64Data+0xaa0>
    9834:	cmp	r7, #256	; 0x100
    9838:	bgt	a490 <ReadInt64Data+0x108c>
    983c:	ldr	r3, [r4]
    9840:	add	r4, sp, #120	; 0x78
    9844:	mov	r1, r6
    9848:	mov	r2, r7
    984c:	mov	r0, r4
    9850:	bl	18b8 <fread@plt>
    9854:	mov	r9, r0
    9858:	cmp	r7, #1
    985c:	blt	add8 <ReadInt64Data+0x19d4>
    9860:	mov	r5, r7
    9864:	mov	r6, sl
    9868:	mov	r0, r4
    986c:	bl	1b84 <Mat_int64Swap>
    9870:	strd	r0, [r6]
    9874:	subs	r5, r5, #1
    9878:	add	r6, r6, #8
    987c:	add	r4, r4, #8
    9880:	bne	9868 <ReadInt64Data+0x464>
    9884:	b	add4 <ReadInt64Data+0x19d0>
    9888:	sub	r1, r7, #256	; 0x100
    988c:	str	r7, [sp, #4]
    9890:	add	r0, sl, #2048	; 0x800
    9894:	mov	r2, #256	; 0x100
    9898:	add	r4, sp, #120	; 0x78
    989c:	add	r7, sp, #104	; 0x68
    98a0:	mov	r9, sl
    98a4:	mov	r6, #0
    98a8:	str	r1, [sp, #8]
    98ac:	mov	r1, #0
    98b0:	mov	r8, r0
    98b4:	ldr	r0, [sp, #20]
    98b8:	str	r1, [sp, #12]
    98bc:	ldr	r1, [sp, #16]
    98c0:	mov	r5, r2
    98c4:	mov	r2, #256	; 0x100
    98c8:	ldr	r3, [r0]
    98cc:	mov	r0, r4
    98d0:	bl	18b8 <fread@plt>
    98d4:	mov	r1, r9
    98d8:	mov	r2, #0
    98dc:	add	r3, r4, r2
    98e0:	add	r2, r2, #2
    98e4:	ldrh	r3, [r3]
    98e8:	cmp	r2, #256	; 0x100
    98ec:	strh	r3, [sp, #104]	; 0x68
    98f0:	vld1.16	{d16[0]}, [r7 :16]
    98f4:	vmovl.s8	q8, d16
    98f8:	vmovl.s16	q8, d16
    98fc:	vmovl.s32	q8, d16
    9900:	vst1.64	{d16-d17}, [r1]!
    9904:	bne	98dc <ReadInt64Data+0x4d8>
    9908:	mov	r1, r5
    990c:	ldr	r3, [sp, #8]
    9910:	add	r6, r0, r6
    9914:	add	r9, r9, #2048	; 0x800
    9918:	add	r0, r8, #2048	; 0x800
    991c:	add	r2, r5, #256	; 0x100
    9920:	ldr	r1, [sp, #12]
    9924:	add	r1, r1, #256	; 0x100
    9928:	cmp	r1, r3
    992c:	blt	98b0 <ReadInt64Data+0x4ac>
    9930:	ldr	r0, [sp, #4]
    9934:	cmp	r1, r0
    9938:	bge	a864 <ReadInt64Data+0x1460>
    993c:	sub	r4, r0, r1
    9940:	ldr	r0, [sp, #20]
    9944:	ldr	r1, [sp, #16]
    9948:	add	r7, sp, #120	; 0x78
    994c:	mov	r2, r4
    9950:	ldr	r3, [r0]
    9954:	mov	r0, r7
    9958:	bl	18b8 <fread@plt>
    995c:	mov	r9, r6
    9960:	cmp	r4, #1
    9964:	add	r9, r0, r6
    9968:	blt	a868 <ReadInt64Data+0x1464>
    996c:	ldr	r6, [sp, #16]
    9970:	ldr	ip, [sp, #12]
    9974:	mov	r0, #0
    9978:	beq	99bc <ReadInt64Data+0x5b8>
    997c:	ldr	r0, [sp, #8]
    9980:	add	r2, sp, #100	; 0x64
    9984:	sub	r0, r0, ip
    9988:	bic	r1, r0, #1
    998c:	bic	r0, r4, #1
    9990:	ldrh	r3, [r7], #2
    9994:	subs	r1, r1, #2
    9998:	strh	r3, [sp, #100]	; 0x64
    999c:	vld1.16	{d16[0]}, [r2 :16]
    99a0:	vmovl.s8	q8, d16
    99a4:	vmovl.s16	q8, d16
    99a8:	vmovl.s32	q8, d16
    99ac:	vst1.64	{d16-d17}, [r8]!
    99b0:	bne	9990 <ReadInt64Data+0x58c>
    99b4:	cmp	r4, r0
    99b8:	beq	b010 <ReadInt64Data+0x1c0c>
    99bc:	ldr	r3, [sp, #8]
    99c0:	add	r1, sp, #120	; 0x78
    99c4:	add	r2, r0, r5
    99c8:	add	r1, r1, r0
    99cc:	add	r2, sl, r2, lsl #3
    99d0:	sub	r3, r3, ip
    99d4:	sub	r0, r3, r0
    99d8:	ldrsb	r4, [r1], #1
    99dc:	subs	r0, r0, #1
    99e0:	asr	r5, r4, #31
    99e4:	strd	r4, [r2]
    99e8:	add	r2, r2, #8
    99ec:	bne	99d8 <ReadInt64Data+0x5d4>
    99f0:	b	b010 <ReadInt64Data+0x1c0c>
    99f4:	sub	r1, r7, #256	; 0x100
    99f8:	add	r0, sl, #2048	; 0x800
    99fc:	mov	r2, #256	; 0x100
    9a00:	add	r4, sp, #120	; 0x78
    9a04:	add	r5, sp, #116	; 0x74
    9a08:	mov	r9, sl
    9a0c:	mov	r6, #0
    9a10:	str	r7, [sp, #4]
    9a14:	str	r1, [sp, #8]
    9a18:	mov	r1, #0
    9a1c:	mov	r7, r0
    9a20:	ldr	r0, [sp, #20]
    9a24:	str	r1, [sp, #12]
    9a28:	ldr	r1, [sp, #16]
    9a2c:	mov	r8, r2
    9a30:	mov	r2, #256	; 0x100
    9a34:	ldr	r3, [r0]
    9a38:	mov	r0, r4
    9a3c:	bl	18b8 <fread@plt>
    9a40:	mov	r1, r9
    9a44:	mov	r2, #0
    9a48:	add	r3, r4, r2
    9a4c:	add	r2, r2, #2
    9a50:	ldrh	r3, [r3]
    9a54:	cmp	r2, #256	; 0x100
    9a58:	strh	r3, [sp, #116]	; 0x74
    9a5c:	vld1.16	{d16[0]}, [r5 :16]
    9a60:	vmovl.u8	q8, d16
    9a64:	vmovl.u16	q8, d16
    9a68:	vmovl.u32	q8, d16
    9a6c:	vst1.64	{d16-d17}, [r1]!
    9a70:	bne	9a48 <ReadInt64Data+0x644>
    9a74:	mov	r1, r8
    9a78:	ldr	r3, [sp, #8]
    9a7c:	add	r6, r0, r6
    9a80:	add	r9, r9, #2048	; 0x800
    9a84:	add	r0, r7, #2048	; 0x800
    9a88:	add	r2, r8, #256	; 0x100
    9a8c:	ldr	r1, [sp, #12]
    9a90:	add	r1, r1, #256	; 0x100
    9a94:	cmp	r1, r3
    9a98:	blt	9a1c <ReadInt64Data+0x618>
    9a9c:	ldr	r0, [sp, #4]
    9aa0:	cmp	r1, r0
    9aa4:	bge	a864 <ReadInt64Data+0x1460>
    9aa8:	sub	r5, r0, r1
    9aac:	ldr	r0, [sp, #20]
    9ab0:	ldr	r1, [sp, #16]
    9ab4:	add	r4, sp, #120	; 0x78
    9ab8:	mov	r2, r5
    9abc:	ldr	r3, [r0]
    9ac0:	mov	r0, r4
    9ac4:	bl	18b8 <fread@plt>
    9ac8:	mov	r9, r6
    9acc:	cmp	r5, #1
    9ad0:	add	r9, r0, r6
    9ad4:	blt	a868 <ReadInt64Data+0x1464>
    9ad8:	ldr	r6, [sp, #16]
    9adc:	ldr	ip, [sp, #12]
    9ae0:	mov	r1, #0
    9ae4:	mov	r0, #0
    9ae8:	beq	9b30 <ReadInt64Data+0x72c>
    9aec:	ldr	r0, [sp, #8]
    9af0:	add	r3, sp, #112	; 0x70
    9af4:	sub	r0, r0, ip
    9af8:	bic	r2, r0, #1
    9afc:	bic	r0, r5, #1
    9b00:	ldrh	r6, [r4], #2
    9b04:	subs	r2, r2, #2
    9b08:	strh	r6, [sp, #112]	; 0x70
    9b0c:	vld1.16	{d16[0]}, [r3 :16]
    9b10:	vmovl.u8	q8, d16
    9b14:	vmovl.u16	q8, d16
    9b18:	vmovl.u32	q8, d16
    9b1c:	vst1.64	{d16-d17}, [r7]!
    9b20:	bne	9b00 <ReadInt64Data+0x6fc>
    9b24:	ldr	r6, [sp, #16]
    9b28:	cmp	r5, r0
    9b2c:	beq	b010 <ReadInt64Data+0x1c0c>
    9b30:	ldr	r7, [sp, #8]
    9b34:	add	r2, sp, #120	; 0x78
    9b38:	add	r3, r0, r8
    9b3c:	add	r2, r2, r0
    9b40:	add	r3, sl, r3, lsl #3
    9b44:	sub	r7, r7, ip
    9b48:	sub	r0, r7, r0
    9b4c:	ldrb	r4, [r2], #1
    9b50:	subs	r0, r0, #1
    9b54:	str	r4, [r3]
    9b58:	str	r1, [r3, #4]
    9b5c:	add	r3, r3, #8
    9b60:	bne	9b4c <ReadInt64Data+0x748>
    9b64:	b	b010 <ReadInt64Data+0x1c0c>
    9b68:	cmp	r7, #256	; 0x100
    9b6c:	bgt	a59c <ReadInt64Data+0x1198>
    9b70:	ldr	r3, [r4]
    9b74:	add	r4, sp, #120	; 0x78
    9b78:	mov	r1, r6
    9b7c:	mov	r2, r7
    9b80:	mov	r0, r4
    9b84:	bl	18b8 <fread@plt>
    9b88:	mov	r9, r0
    9b8c:	cmp	r7, #1
    9b90:	blt	b010 <ReadInt64Data+0x1c0c>
    9b94:	mov	r0, #0
    9b98:	beq	9bdc <ReadInt64Data+0x7d8>
    9b9c:	bic	r0, r7, #1
    9ba0:	mov	r5, r7
    9ba4:	add	r1, sp, #72	; 0x48
    9ba8:	mov	r3, sl
    9bac:	mov	r2, r0
    9bb0:	ldr	r7, [r4], #4
    9bb4:	subs	r2, r2, #2
    9bb8:	str	r7, [sp, #72]	; 0x48
    9bbc:	vld1.32	{d16[0]}, [r1 :32]
    9bc0:	vmovl.s16	q8, d16
    9bc4:	vmovl.s32	q8, d16
    9bc8:	vst1.64	{d16-d17}, [r3]!
    9bcc:	bne	9bb0 <ReadInt64Data+0x7ac>
    9bd0:	mov	r7, r5
    9bd4:	cmp	r0, r5
    9bd8:	beq	b010 <ReadInt64Data+0x1c0c>
    9bdc:	add	r3, sp, #120	; 0x78
    9be0:	sub	r1, r7, r0
    9be4:	add	r2, sl, r0, lsl #3
    9be8:	add	r0, r3, r0, lsl #1
    9bec:	ldrsh	r4, [r0], #2
    9bf0:	subs	r1, r1, #1
    9bf4:	asr	r5, r4, #31
    9bf8:	strd	r4, [r2]
    9bfc:	add	r2, r2, #8
    9c00:	bne	9bec <ReadInt64Data+0x7e8>
    9c04:	b	b010 <ReadInt64Data+0x1c0c>
    9c08:	cmp	r7, #256	; 0x100
    9c0c:	bgt	a6fc <ReadInt64Data+0x12f8>
    9c10:	ldr	r3, [r4]
    9c14:	add	r4, sp, #120	; 0x78
    9c18:	mov	r1, r6
    9c1c:	mov	r2, r7
    9c20:	mov	r0, r4
    9c24:	bl	18b8 <fread@plt>
    9c28:	mov	r9, r0
    9c2c:	cmp	r7, #1
    9c30:	blt	b010 <ReadInt64Data+0x1c0c>
    9c34:	mov	r1, #0
    9c38:	mov	r0, #0
    9c3c:	beq	9c84 <ReadInt64Data+0x880>
    9c40:	bic	r0, r7, #1
    9c44:	mov	r5, r7
    9c48:	add	r2, sp, #84	; 0x54
    9c4c:	mov	r7, sl
    9c50:	mov	r3, r0
    9c54:	ldr	r6, [r4], #4
    9c58:	subs	r3, r3, #2
    9c5c:	str	r6, [sp, #84]	; 0x54
    9c60:	vld1.32	{d16[0]}, [r2 :32]
    9c64:	vmovl.u16	q8, d16
    9c68:	vmovl.u32	q8, d16
    9c6c:	vst1.64	{d16-d17}, [r7]!
    9c70:	bne	9c54 <ReadInt64Data+0x850>
    9c74:	ldr	r6, [sp, #16]
    9c78:	mov	r7, r5
    9c7c:	cmp	r0, r5
    9c80:	beq	b010 <ReadInt64Data+0x1c0c>
    9c84:	sub	r2, r7, r0
    9c88:	add	r7, sp, #120	; 0x78
    9c8c:	add	r3, sl, r0, lsl #3
    9c90:	add	r0, r7, r0, lsl #1
    9c94:	ldrh	r4, [r0], #2
    9c98:	subs	r2, r2, #1
    9c9c:	str	r4, [r3]
    9ca0:	str	r1, [r3, #4]
    9ca4:	add	r3, r3, #8
    9ca8:	bne	9c94 <ReadInt64Data+0x890>
    9cac:	b	b010 <ReadInt64Data+0x1c0c>
    9cb0:	cmp	r7, #256	; 0x100
    9cb4:	bgt	a870 <ReadInt64Data+0x146c>
    9cb8:	ldr	r3, [r4]
    9cbc:	add	r4, sp, #120	; 0x78
    9cc0:	mov	r1, r6
    9cc4:	mov	r2, r7
    9cc8:	mov	r0, r4
    9ccc:	bl	18b8 <fread@plt>
    9cd0:	mov	r9, r0
    9cd4:	cmp	r7, #1
    9cd8:	blt	b010 <ReadInt64Data+0x1c0c>
    9cdc:	mov	r0, #0
    9ce0:	beq	9d30 <ReadInt64Data+0x92c>
    9ce4:	bic	r0, r7, #1
    9ce8:	mov	r5, r7
    9cec:	add	r1, sp, #24
    9cf0:	mov	r3, sl
    9cf4:	mov	r2, r0
    9cf8:	ldr	r7, [r4]
    9cfc:	ldr	r6, [r4, #4]
    9d00:	subs	r2, r2, #2
    9d04:	add	r4, r4, #8
    9d08:	str	r6, [sp, #28]
    9d0c:	str	r7, [sp, #24]
    9d10:	vld1.32	{d16}, [r1 :64]
    9d14:	vmovl.s32	q8, d16
    9d18:	vst1.64	{d16-d17}, [r3]!
    9d1c:	bne	9cf8 <ReadInt64Data+0x8f4>
    9d20:	ldr	r6, [sp, #16]
    9d24:	mov	r7, r5
    9d28:	cmp	r0, r5
    9d2c:	beq	b010 <ReadInt64Data+0x1c0c>
    9d30:	add	r3, sp, #120	; 0x78
    9d34:	sub	r1, r7, r0
    9d38:	add	r2, sl, r0, lsl #3
    9d3c:	add	r0, r3, r0, lsl #2
    9d40:	ldr	r4, [r0], #4
    9d44:	subs	r1, r1, #1
    9d48:	asr	r5, r4, #31
    9d4c:	strd	r4, [r2]
    9d50:	add	r2, r2, #8
    9d54:	bne	9d40 <ReadInt64Data+0x93c>
    9d58:	b	b010 <ReadInt64Data+0x1c0c>
    9d5c:	cmp	r7, #256	; 0x100
    9d60:	bgt	a9dc <ReadInt64Data+0x15d8>
    9d64:	ldr	r3, [r4]
    9d68:	add	r4, sp, #120	; 0x78
    9d6c:	mov	r1, r6
    9d70:	mov	r2, r7
    9d74:	mov	r0, r4
    9d78:	bl	18b8 <fread@plt>
    9d7c:	mov	r9, r0
    9d80:	cmp	r7, #1
    9d84:	blt	b010 <ReadInt64Data+0x1c0c>
    9d88:	mov	r1, #0
    9d8c:	mov	r0, #0
    9d90:	beq	9de0 <ReadInt64Data+0x9dc>
    9d94:	bic	r0, r7, #1
    9d98:	mov	ip, r7
    9d9c:	add	r2, sp, #48	; 0x30
    9da0:	mov	r7, sl
    9da4:	mov	r3, r0
    9da8:	ldr	r6, [r4]
    9dac:	ldr	r5, [r4, #4]
    9db0:	subs	r3, r3, #2
    9db4:	add	r4, r4, #8
    9db8:	str	r5, [sp, #52]	; 0x34
    9dbc:	str	r6, [sp, #48]	; 0x30
    9dc0:	vld1.32	{d16}, [r2 :64]
    9dc4:	vmovl.u32	q8, d16
    9dc8:	vst1.64	{d16-d17}, [r7]!
    9dcc:	bne	9da8 <ReadInt64Data+0x9a4>
    9dd0:	ldr	r6, [sp, #16]
    9dd4:	mov	r7, ip
    9dd8:	cmp	r0, ip
    9ddc:	beq	b010 <ReadInt64Data+0x1c0c>
    9de0:	sub	r2, r7, r0
    9de4:	add	r7, sp, #120	; 0x78
    9de8:	add	r3, sl, r0, lsl #3
    9dec:	add	r0, r7, r0, lsl #2
    9df0:	ldr	r4, [r0], #4
    9df4:	subs	r2, r2, #1
    9df8:	str	r4, [r3]
    9dfc:	str	r1, [r3, #4]
    9e00:	add	r3, r3, #8
    9e04:	bne	9df0 <ReadInt64Data+0x9ec>
    9e08:	b	b010 <ReadInt64Data+0x1c0c>
    9e0c:	cmp	r7, #256	; 0x100
    9e10:	bgt	ab50 <ReadInt64Data+0x174c>
    9e14:	ldr	r3, [r4]
    9e18:	add	r4, sp, #120	; 0x78
    9e1c:	mov	r1, r6
    9e20:	mov	r2, r7
    9e24:	mov	r0, r4
    9e28:	bl	18b8 <fread@plt>
    9e2c:	mov	r9, r0
    9e30:	cmp	r7, #1
    9e34:	blt	b010 <ReadInt64Data+0x1c0c>
    9e38:	ldr	r0, [r4], #4
    9e3c:	bl	5855c <__aeabi_f2lz>
    9e40:	strd	r0, [sl]
    9e44:	subs	r7, r7, #1
    9e48:	add	sl, sl, #8
    9e4c:	bne	9e38 <ReadInt64Data+0xa34>
    9e50:	b	b010 <ReadInt64Data+0x1c0c>
    9e54:	cmp	r7, #256	; 0x100
    9e58:	bgt	ac2c <ReadInt64Data+0x1828>
    9e5c:	ldr	r3, [r4]
    9e60:	add	r4, sp, #120	; 0x78
    9e64:	mov	r1, r6
    9e68:	mov	r2, r7
    9e6c:	mov	r0, r4
    9e70:	bl	18b8 <fread@plt>
    9e74:	mov	r9, r0
    9e78:	cmp	r7, #1
    9e7c:	blt	b010 <ReadInt64Data+0x1c0c>
    9e80:	vldr	d16, [r4]
    9e84:	vmov	r0, r1, d16
    9e88:	bl	58588 <__aeabi_d2lz>
    9e8c:	strd	r0, [sl]
    9e90:	subs	r7, r7, #1
    9e94:	add	sl, sl, #8
    9e98:	add	r4, r4, #8
    9e9c:	bne	9e80 <ReadInt64Data+0xa7c>
    9ea0:	b	b010 <ReadInt64Data+0x1c0c>
    9ea4:	cmp	r7, #256	; 0x100
    9ea8:	bgt	ad1c <ReadInt64Data+0x1918>
    9eac:	ldr	r3, [r4]
    9eb0:	add	r0, sp, #120	; 0x78
    9eb4:	mov	r1, r6
    9eb8:	mov	r2, r7
    9ebc:	bl	18b8 <fread@plt>
    9ec0:	mov	r9, r0
    9ec4:	cmp	r7, #1
    9ec8:	blt	adf4 <ReadInt64Data+0x19f0>
    9ecc:	lsl	r2, r7, #3
    9ed0:	add	r1, sp, #120	; 0x78
    9ed4:	mov	r0, sl
    9ed8:	bl	181c <memcpy@plt>
    9edc:	cmp	r8, #13
    9ee0:	beq	adfc <ReadInt64Data+0x19f8>
    9ee4:	b	b010 <ReadInt64Data+0x1c0c>
    9ee8:	sub	r0, r7, #256	; 0x100
    9eec:	add	r1, sl, #2048	; 0x800
    9ef0:	mov	r9, #0
    9ef4:	str	r7, [sp, #4]
    9ef8:	str	r0, [sp, #12]
    9efc:	mov	r0, #0
    9f00:	ldr	r3, [r4]
    9f04:	add	r4, sp, #120	; 0x78
    9f08:	mov	r8, r0
    9f0c:	mov	r5, r1
    9f10:	mov	r1, r6
    9f14:	mov	r2, #256	; 0x100
    9f18:	mov	r0, r4
    9f1c:	bl	18b8 <fread@plt>
    9f20:	mov	r7, r0
    9f24:	mov	r6, #0
    9f28:	mov	r0, r4
    9f2c:	bl	1c18 <Mat_int16Swap>
    9f30:	mov	r1, sl
    9f34:	add	r4, r4, #2
    9f38:	str	r0, [r1, r6]!
    9f3c:	add	r6, r6, #8
    9f40:	asr	r0, r0, #31
    9f44:	cmp	r6, #2048	; 0x800
    9f48:	str	r0, [r1, #4]
    9f4c:	bne	9f28 <ReadInt64Data+0xb24>
    9f50:	ldr	r2, [sp, #12]
    9f54:	ldr	r6, [sp, #16]
    9f58:	ldr	r4, [sp, #20]
    9f5c:	add	r0, r8, #256	; 0x100
    9f60:	add	r9, r7, r9
    9f64:	add	sl, sl, #2048	; 0x800
    9f68:	add	r1, r5, #2048	; 0x800
    9f6c:	cmp	r0, r2
    9f70:	blt	9f00 <ReadInt64Data+0xafc>
    9f74:	ldr	r2, [sp, #4]
    9f78:	cmp	r0, r2
    9f7c:	bge	b010 <ReadInt64Data+0x1c0c>
    9f80:	ldr	r3, [r4]
    9f84:	mov	r1, r6
    9f88:	sub	r6, r2, r0
    9f8c:	add	r4, sp, #120	; 0x78
    9f90:	mov	r0, r4
    9f94:	mov	r2, r6
    9f98:	bl	18b8 <fread@plt>
    9f9c:	add	r9, r0, r9
    9fa0:	cmp	r6, #1
    9fa4:	blt	a868 <ReadInt64Data+0x1464>
    9fa8:	ldr	r0, [sp, #12]
    9fac:	sub	r6, r0, r8
    9fb0:	mov	r0, r4
    9fb4:	bl	1c18 <Mat_int16Swap>
    9fb8:	asr	r1, r0, #31
    9fbc:	subs	r6, r6, #1
    9fc0:	add	r4, r4, #2
    9fc4:	strd	r0, [r5]
    9fc8:	add	r5, r5, #8
    9fcc:	bne	9fb0 <ReadInt64Data+0xbac>
    9fd0:	b	a868 <ReadInt64Data+0x1464>
    9fd4:	sub	r1, r7, #256	; 0x100
    9fd8:	add	r0, sl, #2048	; 0x800
    9fdc:	mov	r9, #0
    9fe0:	mov	r2, #0
    9fe4:	mov	r8, #0
    9fe8:	str	r7, [sp, #4]
    9fec:	str	r1, [sp, #8]
    9ff0:	ldr	r3, [r4]
    9ff4:	add	r4, sp, #120	; 0x78
    9ff8:	str	r2, [sp, #12]
    9ffc:	mov	r5, r0
    a000:	mov	r1, r6
    a004:	mov	r2, #256	; 0x100
    a008:	mov	r0, r4
    a00c:	bl	18b8 <fread@plt>
    a010:	mov	r7, r0
    a014:	mov	r6, #0
    a018:	mov	r0, r4
    a01c:	bl	1c2c <Mat_uint16Swap>
    a020:	mov	r1, sl
    a024:	add	r4, r4, #2
    a028:	str	r0, [r1, r6]!
    a02c:	add	r6, r6, #8
    a030:	cmp	r6, #2048	; 0x800
    a034:	str	r9, [r1, #4]
    a038:	bne	a018 <ReadInt64Data+0xc14>
    a03c:	add	r8, r7, r8
    a040:	ldr	r7, [sp, #12]
    a044:	ldr	r1, [sp, #8]
    a048:	ldr	r6, [sp, #16]
    a04c:	ldr	r4, [sp, #20]
    a050:	add	sl, sl, #2048	; 0x800
    a054:	add	r0, r5, #2048	; 0x800
    a058:	add	r2, r7, #256	; 0x100
    a05c:	cmp	r2, r1
    a060:	blt	9ff0 <ReadInt64Data+0xbec>
    a064:	ldr	r0, [sp, #4]
    a068:	cmp	r2, r0
    a06c:	bge	a594 <ReadInt64Data+0x1190>
    a070:	ldr	r3, [r4]
    a074:	mov	r1, r6
    a078:	sub	r6, r0, r2
    a07c:	add	r4, sp, #120	; 0x78
    a080:	mov	r0, r4
    a084:	mov	r2, r6
    a088:	bl	18b8 <fread@plt>
    a08c:	mov	r9, r8
    a090:	cmp	r6, #1
    a094:	add	r9, r0, r8
    a098:	blt	a868 <ReadInt64Data+0x1464>
    a09c:	ldr	r0, [sp, #8]
    a0a0:	sub	r6, r0, r7
    a0a4:	mov	r7, #0
    a0a8:	mov	r0, r4
    a0ac:	bl	1c2c <Mat_uint16Swap>
    a0b0:	stm	r5, {r0, r7}
    a0b4:	add	r5, r5, #8
    a0b8:	subs	r6, r6, #1
    a0bc:	add	r4, r4, #2
    a0c0:	bne	a0a8 <ReadInt64Data+0xca4>
    a0c4:	b	a868 <ReadInt64Data+0x1464>
    a0c8:	sub	r0, r7, #256	; 0x100
    a0cc:	add	r1, sl, #2048	; 0x800
    a0d0:	mov	r9, #0
    a0d4:	str	r7, [sp, #4]
    a0d8:	str	r0, [sp, #12]
    a0dc:	mov	r0, #0
    a0e0:	ldr	r3, [r4]
    a0e4:	add	r4, sp, #120	; 0x78
    a0e8:	mov	r8, r0
    a0ec:	mov	r5, r1
    a0f0:	mov	r1, r6
    a0f4:	mov	r2, #256	; 0x100
    a0f8:	mov	r0, r4
    a0fc:	bl	18b8 <fread@plt>
    a100:	mov	r7, r0
    a104:	mov	r6, #0
    a108:	mov	r0, r4
    a10c:	bl	1bf0 <Mat_int32Swap>
    a110:	mov	r1, sl
    a114:	add	r4, r4, #4
    a118:	str	r0, [r1, r6]!
    a11c:	add	r6, r6, #8
    a120:	asr	r0, r0, #31
    a124:	cmp	r6, #2048	; 0x800
    a128:	str	r0, [r1, #4]
    a12c:	bne	a108 <ReadInt64Data+0xd04>
    a130:	ldr	r2, [sp, #12]
    a134:	ldr	r6, [sp, #16]
    a138:	ldr	r4, [sp, #20]
    a13c:	add	r0, r8, #256	; 0x100
    a140:	add	r9, r7, r9
    a144:	add	sl, sl, #2048	; 0x800
    a148:	add	r1, r5, #2048	; 0x800
    a14c:	cmp	r0, r2
    a150:	blt	a0e0 <ReadInt64Data+0xcdc>
    a154:	ldr	r2, [sp, #4]
    a158:	cmp	r0, r2
    a15c:	bge	b010 <ReadInt64Data+0x1c0c>
    a160:	ldr	r3, [r4]
    a164:	mov	r1, r6
    a168:	sub	r6, r2, r0
    a16c:	add	r4, sp, #120	; 0x78
    a170:	mov	r0, r4
    a174:	mov	r2, r6
    a178:	bl	18b8 <fread@plt>
    a17c:	add	r9, r0, r9
    a180:	cmp	r6, #1
    a184:	blt	a868 <ReadInt64Data+0x1464>
    a188:	ldr	r0, [sp, #12]
    a18c:	sub	r6, r0, r8
    a190:	mov	r0, r4
    a194:	bl	1bf0 <Mat_int32Swap>
    a198:	asr	r1, r0, #31
    a19c:	subs	r6, r6, #1
    a1a0:	add	r4, r4, #4
    a1a4:	strd	r0, [r5]
    a1a8:	add	r5, r5, #8
    a1ac:	bne	a190 <ReadInt64Data+0xd8c>
    a1b0:	b	a868 <ReadInt64Data+0x1464>
    a1b4:	sub	r1, r7, #256	; 0x100
    a1b8:	add	r0, sl, #2048	; 0x800
    a1bc:	mov	r9, #0
    a1c0:	mov	r2, #0
    a1c4:	mov	r8, #0
    a1c8:	str	r7, [sp, #4]
    a1cc:	str	r1, [sp, #8]
    a1d0:	ldr	r3, [r4]
    a1d4:	add	r4, sp, #120	; 0x78
    a1d8:	str	r2, [sp, #12]
    a1dc:	mov	r5, r0
    a1e0:	mov	r1, r6
    a1e4:	mov	r2, #256	; 0x100
    a1e8:	mov	r0, r4
    a1ec:	bl	18b8 <fread@plt>
    a1f0:	mov	r7, r0
    a1f4:	mov	r6, #0
    a1f8:	mov	r0, r4
    a1fc:	bl	1c04 <Mat_uint32Swap>
    a200:	mov	r1, sl
    a204:	add	r4, r4, #4
    a208:	str	r0, [r1, r6]!
    a20c:	add	r6, r6, #8
    a210:	cmp	r6, #2048	; 0x800
    a214:	str	r9, [r1, #4]
    a218:	bne	a1f8 <ReadInt64Data+0xdf4>
    a21c:	add	r8, r7, r8
    a220:	ldr	r7, [sp, #12]
    a224:	ldr	r1, [sp, #8]
    a228:	ldr	r6, [sp, #16]
    a22c:	ldr	r4, [sp, #20]
    a230:	add	sl, sl, #2048	; 0x800
    a234:	add	r0, r5, #2048	; 0x800
    a238:	add	r2, r7, #256	; 0x100
    a23c:	cmp	r2, r1
    a240:	blt	a1d0 <ReadInt64Data+0xdcc>
    a244:	ldr	r0, [sp, #4]
    a248:	cmp	r2, r0
    a24c:	bge	a594 <ReadInt64Data+0x1190>
    a250:	ldr	r3, [r4]
    a254:	mov	r1, r6
    a258:	sub	r6, r0, r2
    a25c:	add	r4, sp, #120	; 0x78
    a260:	mov	r0, r4
    a264:	mov	r2, r6
    a268:	bl	18b8 <fread@plt>
    a26c:	mov	r9, r8
    a270:	cmp	r6, #1
    a274:	add	r9, r0, r8
    a278:	blt	a868 <ReadInt64Data+0x1464>
    a27c:	ldr	r0, [sp, #8]
    a280:	sub	r6, r0, r7
    a284:	mov	r7, #0
    a288:	mov	r0, r4
    a28c:	bl	1c04 <Mat_uint32Swap>
    a290:	stm	r5, {r0, r7}
    a294:	add	r5, r5, #8
    a298:	subs	r6, r6, #1
    a29c:	add	r4, r4, #4
    a2a0:	bne	a288 <ReadInt64Data+0xe84>
    a2a4:	b	a868 <ReadInt64Data+0x1464>
    a2a8:	sub	r0, r7, #256	; 0x100
    a2ac:	add	r1, sl, #2048	; 0x800
    a2b0:	mov	r9, #0
    a2b4:	str	r7, [sp, #4]
    a2b8:	str	r0, [sp, #12]
    a2bc:	mov	r0, #0
    a2c0:	ldr	r3, [r4]
    a2c4:	add	r7, sp, #120	; 0x78
    a2c8:	mov	r8, r0
    a2cc:	mov	r5, r1
    a2d0:	mov	r1, r6
    a2d4:	mov	r2, #256	; 0x100
    a2d8:	mov	r0, r7
    a2dc:	bl	18b8 <fread@plt>
    a2e0:	mov	r4, r0
    a2e4:	mov	r6, #0
    a2e8:	mov	r0, r7
    a2ec:	bl	1c44 <Mat_floatSwap>
    a2f0:	vmov	r0, s0
    a2f4:	bl	5855c <__aeabi_f2lz>
    a2f8:	mov	r2, sl
    a2fc:	add	r7, r7, #4
    a300:	str	r0, [r2, r6]!
    a304:	add	r6, r6, #8
    a308:	cmp	r6, #2048	; 0x800
    a30c:	str	r1, [r2, #4]
    a310:	bne	a2e8 <ReadInt64Data+0xee4>
    a314:	ldr	r2, [sp, #12]
    a318:	add	r9, r4, r9
    a31c:	ldr	r6, [sp, #16]
    a320:	ldr	r4, [sp, #20]
    a324:	add	r0, r8, #256	; 0x100
    a328:	add	sl, sl, #2048	; 0x800
    a32c:	add	r1, r5, #2048	; 0x800
    a330:	cmp	r0, r2
    a334:	blt	a2c0 <ReadInt64Data+0xebc>
    a338:	ldr	r2, [sp, #4]
    a33c:	cmp	r0, r2
    a340:	bge	b010 <ReadInt64Data+0x1c0c>
    a344:	ldr	r3, [r4]
    a348:	mov	r1, r6
    a34c:	sub	r6, r2, r0
    a350:	add	r4, sp, #120	; 0x78
    a354:	mov	r0, r4
    a358:	mov	r2, r6
    a35c:	bl	18b8 <fread@plt>
    a360:	add	r9, r0, r9
    a364:	cmp	r6, #1
    a368:	blt	a868 <ReadInt64Data+0x1464>
    a36c:	ldr	r0, [sp, #12]
    a370:	sub	r6, r0, r8
    a374:	mov	r0, r4
    a378:	bl	1c44 <Mat_floatSwap>
    a37c:	vmov	r0, s0
    a380:	bl	5855c <__aeabi_f2lz>
    a384:	strd	r0, [r5]
    a388:	add	r5, r5, #8
    a38c:	subs	r6, r6, #1
    a390:	add	r4, r4, #4
    a394:	bne	a374 <ReadInt64Data+0xf70>
    a398:	b	a868 <ReadInt64Data+0x1464>
    a39c:	sub	r0, r7, #256	; 0x100
    a3a0:	add	r1, sl, #2048	; 0x800
    a3a4:	add	r4, sp, #120	; 0x78
    a3a8:	mov	r9, #0
    a3ac:	str	r7, [sp, #4]
    a3b0:	str	r0, [sp, #12]
    a3b4:	mov	r0, #0
    a3b8:	mov	r8, r0
    a3bc:	ldr	r0, [sp, #20]
    a3c0:	mov	r5, r1
    a3c4:	mov	r1, r6
    a3c8:	mov	r2, #256	; 0x100
    a3cc:	ldr	r3, [r0]
    a3d0:	mov	r0, r4
    a3d4:	bl	18b8 <fread@plt>
    a3d8:	mov	r7, r0
    a3dc:	mov	r6, #0
    a3e0:	add	r0, r4, r6
    a3e4:	bl	1c88 <Mat_doubleSwap>
    a3e8:	vmov	r0, r1, d0
    a3ec:	bl	58588 <__aeabi_d2lz>
    a3f0:	mov	r2, sl
    a3f4:	str	r0, [r2, r6]!
    a3f8:	add	r6, r6, #8
    a3fc:	cmp	r6, #2048	; 0x800
    a400:	str	r1, [r2, #4]
    a404:	bne	a3e0 <ReadInt64Data+0xfdc>
    a408:	ldr	r2, [sp, #12]
    a40c:	ldr	r6, [sp, #16]
    a410:	add	r0, r8, #256	; 0x100
    a414:	add	r9, r7, r9
    a418:	add	sl, sl, #2048	; 0x800
    a41c:	add	r1, r5, #2048	; 0x800
    a420:	cmp	r0, r2
    a424:	blt	a3b8 <ReadInt64Data+0xfb4>
    a428:	ldr	r2, [sp, #4]
    a42c:	cmp	r0, r2
    a430:	bge	b010 <ReadInt64Data+0x1c0c>
    a434:	mov	r1, r6
    a438:	sub	r6, r2, r0
    a43c:	ldr	r0, [sp, #20]
    a440:	add	r4, sp, #120	; 0x78
    a444:	mov	r2, r6
    a448:	ldr	r3, [r0]
    a44c:	mov	r0, r4
    a450:	bl	18b8 <fread@plt>
    a454:	add	r9, r0, r9
    a458:	cmp	r6, #1
    a45c:	blt	a868 <ReadInt64Data+0x1464>
    a460:	ldr	r0, [sp, #12]
    a464:	sub	r6, r0, r8
    a468:	mov	r0, r4
    a46c:	bl	1c88 <Mat_doubleSwap>
    a470:	vmov	r0, r1, d0
    a474:	bl	58588 <__aeabi_d2lz>
    a478:	strd	r0, [r5]
    a47c:	add	r5, r5, #8
    a480:	subs	r6, r6, #1
    a484:	add	r4, r4, #8
    a488:	bne	a468 <ReadInt64Data+0x1064>
    a48c:	b	a868 <ReadInt64Data+0x1464>
    a490:	sub	r0, r7, #256	; 0x100
    a494:	add	r1, sl, #2048	; 0x800
    a498:	add	r4, sp, #120	; 0x78
    a49c:	mov	r6, sl
    a4a0:	mov	r9, #0
    a4a4:	str	r8, [sp]
    a4a8:	str	r7, [sp, #4]
    a4ac:	str	r0, [sp, #8]
    a4b0:	mov	r0, #0
    a4b4:	str	r0, [sp, #12]
    a4b8:	ldr	r0, [sp, #20]
    a4bc:	mov	r5, r1
    a4c0:	ldr	r1, [sp, #16]
    a4c4:	mov	r2, #256	; 0x100
    a4c8:	mov	r8, r9
    a4cc:	ldr	r3, [r0]
    a4d0:	mov	r0, r4
    a4d4:	bl	18b8 <fread@plt>
    a4d8:	mov	r7, r0
    a4dc:	mov	r9, #0
    a4e0:	add	r0, r4, r9
    a4e4:	bl	1b84 <Mat_int64Swap>
    a4e8:	mov	r2, r6
    a4ec:	str	r0, [r2, r9]!
    a4f0:	add	r9, r9, #8
    a4f4:	cmp	r9, #2048	; 0x800
    a4f8:	str	r1, [r2, #4]
    a4fc:	bne	a4e0 <ReadInt64Data+0x10dc>
    a500:	ldr	r0, [sp, #12]
    a504:	ldr	r2, [sp, #8]
    a508:	mov	r9, r8
    a50c:	add	r6, r6, #2048	; 0x800
    a510:	add	r1, r5, #2048	; 0x800
    a514:	add	r9, r7, r8
    a518:	add	r0, r0, #256	; 0x100
    a51c:	cmp	r0, r2
    a520:	blt	a4b4 <ReadInt64Data+0x10b0>
    a524:	ldr	r7, [sp, #4]
    a528:	cmp	r0, r7
    a52c:	bge	ade8 <ReadInt64Data+0x19e4>
    a530:	sub	r7, r7, r0
    a534:	ldr	r0, [sp, #20]
    a538:	ldr	r6, [sp, #16]
    a53c:	add	r4, sp, #120	; 0x78
    a540:	mov	r2, r7
    a544:	ldr	r3, [r0]
    a548:	mov	r0, r4
    a54c:	mov	r1, r6
    a550:	bl	18b8 <fread@plt>
    a554:	ldr	r8, [sp]
    a558:	add	r9, r0, r9
    a55c:	cmp	r7, #1
    a560:	blt	adcc <ReadInt64Data+0x19c8>
    a564:	ldr	r0, [sp, #8]
    a568:	ldr	r1, [sp, #12]
    a56c:	sub	r6, r0, r1
    a570:	mov	r0, r4
    a574:	bl	1b84 <Mat_int64Swap>
    a578:	strd	r0, [r5]
    a57c:	add	r5, r5, #8
    a580:	subs	r6, r6, #1
    a584:	add	r4, r4, #8
    a588:	bne	a570 <ReadInt64Data+0x116c>
    a58c:	ldr	r6, [sp, #16]
    a590:	b	adcc <ReadInt64Data+0x19c8>
    a594:	mov	r9, r8
    a598:	b	b010 <ReadInt64Data+0x1c0c>
    a59c:	sub	r1, r7, #256	; 0x100
    a5a0:	add	r0, sl, #2048	; 0x800
    a5a4:	mov	r2, #256	; 0x100
    a5a8:	add	r4, sp, #120	; 0x78
    a5ac:	add	r9, sp, #80	; 0x50
    a5b0:	mov	r5, sl
    a5b4:	mov	r6, #0
    a5b8:	str	r7, [sp, #4]
    a5bc:	str	r1, [sp, #8]
    a5c0:	mov	r1, #0
    a5c4:	mov	r8, r0
    a5c8:	ldr	r0, [sp, #20]
    a5cc:	str	r1, [sp, #12]
    a5d0:	ldr	r1, [sp, #16]
    a5d4:	mov	r7, r2
    a5d8:	mov	r2, #256	; 0x100
    a5dc:	ldr	r3, [r0]
    a5e0:	mov	r0, r4
    a5e4:	bl	18b8 <fread@plt>
    a5e8:	mov	r1, r5
    a5ec:	mov	r2, #0
    a5f0:	ldr	r3, [r4, r2]
    a5f4:	add	r2, r2, #4
    a5f8:	cmp	r2, #512	; 0x200
    a5fc:	str	r3, [sp, #80]	; 0x50
    a600:	vld1.32	{d16[0]}, [r9 :32]
    a604:	vmovl.s16	q8, d16
    a608:	vmovl.s32	q8, d16
    a60c:	vst1.64	{d16-d17}, [r1]!
    a610:	bne	a5f0 <ReadInt64Data+0x11ec>
    a614:	mov	r1, r7
    a618:	ldr	r3, [sp, #8]
    a61c:	add	r6, r0, r6
    a620:	add	r5, r5, #2048	; 0x800
    a624:	add	r0, r8, #2048	; 0x800
    a628:	add	r2, r7, #256	; 0x100
    a62c:	ldr	r1, [sp, #12]
    a630:	add	r1, r1, #256	; 0x100
    a634:	cmp	r1, r3
    a638:	blt	a5c4 <ReadInt64Data+0x11c0>
    a63c:	ldr	r0, [sp, #4]
    a640:	cmp	r1, r0
    a644:	bge	a864 <ReadInt64Data+0x1460>
    a648:	sub	r5, r0, r1
    a64c:	ldr	r0, [sp, #20]
    a650:	ldr	r1, [sp, #16]
    a654:	add	r4, sp, #120	; 0x78
    a658:	mov	r2, r5
    a65c:	ldr	r3, [r0]
    a660:	mov	r0, r4
    a664:	bl	18b8 <fread@plt>
    a668:	mov	r9, r6
    a66c:	cmp	r5, #1
    a670:	add	r9, r0, r6
    a674:	blt	a868 <ReadInt64Data+0x1464>
    a678:	ldr	r6, [sp, #16]
    a67c:	ldr	ip, [sp, #12]
    a680:	mov	r0, #0
    a684:	beq	a6c4 <ReadInt64Data+0x12c0>
    a688:	ldr	r0, [sp, #8]
    a68c:	add	r2, sp, #76	; 0x4c
    a690:	sub	r0, r0, ip
    a694:	bic	r1, r0, #1
    a698:	bic	r0, r5, #1
    a69c:	ldr	r3, [r4], #4
    a6a0:	subs	r1, r1, #2
    a6a4:	str	r3, [sp, #76]	; 0x4c
    a6a8:	vld1.32	{d16[0]}, [r2 :32]
    a6ac:	vmovl.s16	q8, d16
    a6b0:	vmovl.s32	q8, d16
    a6b4:	vst1.64	{d16-d17}, [r8]!
    a6b8:	bne	a69c <ReadInt64Data+0x1298>
    a6bc:	cmp	r5, r0
    a6c0:	beq	b010 <ReadInt64Data+0x1c0c>
    a6c4:	ldr	r3, [sp, #8]
    a6c8:	add	r1, sp, #120	; 0x78
    a6cc:	add	r2, r0, r7
    a6d0:	add	r1, r1, r0, lsl #1
    a6d4:	add	r2, sl, r2, lsl #3
    a6d8:	sub	r3, r3, ip
    a6dc:	sub	r0, r3, r0
    a6e0:	ldrsh	r4, [r1], #2
    a6e4:	subs	r0, r0, #1
    a6e8:	asr	r5, r4, #31
    a6ec:	strd	r4, [r2]
    a6f0:	add	r2, r2, #8
    a6f4:	bne	a6e0 <ReadInt64Data+0x12dc>
    a6f8:	b	b010 <ReadInt64Data+0x1c0c>
    a6fc:	sub	r1, r7, #256	; 0x100
    a700:	add	r0, sl, #2048	; 0x800
    a704:	mov	r2, #256	; 0x100
    a708:	add	r4, sp, #120	; 0x78
    a70c:	add	r9, sp, #92	; 0x5c
    a710:	mov	r5, sl
    a714:	mov	r6, #0
    a718:	str	r7, [sp, #4]
    a71c:	str	r1, [sp, #8]
    a720:	mov	r1, #0
    a724:	mov	r8, r0
    a728:	ldr	r0, [sp, #20]
    a72c:	str	r1, [sp, #12]
    a730:	ldr	r1, [sp, #16]
    a734:	mov	r7, r2
    a738:	mov	r2, #256	; 0x100
    a73c:	ldr	r3, [r0]
    a740:	mov	r0, r4
    a744:	bl	18b8 <fread@plt>
    a748:	mov	r1, r5
    a74c:	mov	r2, #0
    a750:	ldr	r3, [r4, r2]
    a754:	add	r2, r2, #4
    a758:	cmp	r2, #512	; 0x200
    a75c:	str	r3, [sp, #92]	; 0x5c
    a760:	vld1.32	{d16[0]}, [r9 :32]
    a764:	vmovl.u16	q8, d16
    a768:	vmovl.u32	q8, d16
    a76c:	vst1.64	{d16-d17}, [r1]!
    a770:	bne	a750 <ReadInt64Data+0x134c>
    a774:	mov	r1, r7
    a778:	ldr	r3, [sp, #8]
    a77c:	add	r6, r0, r6
    a780:	add	r5, r5, #2048	; 0x800
    a784:	add	r0, r8, #2048	; 0x800
    a788:	add	r2, r7, #256	; 0x100
    a78c:	ldr	r1, [sp, #12]
    a790:	add	r1, r1, #256	; 0x100
    a794:	cmp	r1, r3
    a798:	blt	a724 <ReadInt64Data+0x1320>
    a79c:	ldr	r0, [sp, #4]
    a7a0:	cmp	r1, r0
    a7a4:	bge	a864 <ReadInt64Data+0x1460>
    a7a8:	sub	r5, r0, r1
    a7ac:	ldr	r0, [sp, #20]
    a7b0:	ldr	r1, [sp, #16]
    a7b4:	add	r4, sp, #120	; 0x78
    a7b8:	mov	r2, r5
    a7bc:	ldr	r3, [r0]
    a7c0:	mov	r0, r4
    a7c4:	bl	18b8 <fread@plt>
    a7c8:	mov	r9, r6
    a7cc:	cmp	r5, #1
    a7d0:	add	r9, r0, r6
    a7d4:	blt	a868 <ReadInt64Data+0x1464>
    a7d8:	ldr	r6, [sp, #16]
    a7dc:	ldr	ip, [sp, #12]
    a7e0:	mov	r1, #0
    a7e4:	mov	r0, #0
    a7e8:	beq	a82c <ReadInt64Data+0x1428>
    a7ec:	ldr	r0, [sp, #8]
    a7f0:	add	r3, sp, #88	; 0x58
    a7f4:	sub	r0, r0, ip
    a7f8:	bic	r2, r0, #1
    a7fc:	bic	r0, r5, #1
    a800:	ldr	r6, [r4], #4
    a804:	subs	r2, r2, #2
    a808:	str	r6, [sp, #88]	; 0x58
    a80c:	vld1.32	{d16[0]}, [r3 :32]
    a810:	vmovl.u16	q8, d16
    a814:	vmovl.u32	q8, d16
    a818:	vst1.64	{d16-d17}, [r8]!
    a81c:	bne	a800 <ReadInt64Data+0x13fc>
    a820:	ldr	r6, [sp, #16]
    a824:	cmp	r5, r0
    a828:	beq	b010 <ReadInt64Data+0x1c0c>
    a82c:	add	r3, r0, r7
    a830:	ldr	r7, [sp, #8]
    a834:	add	r2, sp, #120	; 0x78
    a838:	add	r2, r2, r0, lsl #1
    a83c:	add	r3, sl, r3, lsl #3
    a840:	sub	r7, r7, ip
    a844:	sub	r0, r7, r0
    a848:	ldrh	r4, [r2], #2
    a84c:	subs	r0, r0, #1
    a850:	str	r4, [r3]
    a854:	str	r1, [r3, #4]
    a858:	add	r3, r3, #8
    a85c:	bne	a848 <ReadInt64Data+0x1444>
    a860:	b	b010 <ReadInt64Data+0x1c0c>
    a864:	mov	r9, r6
    a868:	ldr	r6, [sp, #16]
    a86c:	b	b010 <ReadInt64Data+0x1c0c>
    a870:	sub	r1, r7, #256	; 0x100
    a874:	str	r7, [sp, #4]
    a878:	add	r0, sl, #2048	; 0x800
    a87c:	mov	r2, #256	; 0x100
    a880:	add	r4, sp, #120	; 0x78
    a884:	add	r7, sp, #40	; 0x28
    a888:	mov	r8, sl
    a88c:	mov	r9, #0
    a890:	str	r1, [sp]
    a894:	mov	r1, #0
    a898:	mov	r5, r0
    a89c:	ldr	r0, [sp, #20]
    a8a0:	str	r1, [sp, #12]
    a8a4:	str	r2, [sp, #8]
    a8a8:	mov	r1, r6
    a8ac:	mov	r2, #256	; 0x100
    a8b0:	ldr	r3, [r0]
    a8b4:	mov	r0, r4
    a8b8:	bl	18b8 <fread@plt>
    a8bc:	mov	r1, r8
    a8c0:	mov	r2, #0
    a8c4:	ldr	r3, [r4, r2]
    a8c8:	str	r3, [sp, #40]	; 0x28
    a8cc:	add	r3, r4, r2
    a8d0:	add	r2, r2, #8
    a8d4:	ldr	r3, [r3, #4]
    a8d8:	cmp	r2, #1024	; 0x400
    a8dc:	str	r3, [sp, #44]	; 0x2c
    a8e0:	vld1.32	{d16}, [r7 :64]
    a8e4:	vmovl.s32	q8, d16
    a8e8:	vst1.64	{d16-d17}, [r1]!
    a8ec:	bne	a8c4 <ReadInt64Data+0x14c0>
    a8f0:	ldr	r1, [sp, #8]
    a8f4:	ldr	r3, [sp]
    a8f8:	add	r9, r0, r9
    a8fc:	add	r8, r8, #2048	; 0x800
    a900:	add	r0, r5, #2048	; 0x800
    a904:	add	r2, r1, #256	; 0x100
    a908:	ldr	r1, [sp, #12]
    a90c:	add	r1, r1, #256	; 0x100
    a910:	cmp	r1, r3
    a914:	blt	a898 <ReadInt64Data+0x1494>
    a918:	ldr	r0, [sp, #4]
    a91c:	cmp	r1, r0
    a920:	bge	b010 <ReadInt64Data+0x1c0c>
    a924:	sub	r4, r0, r1
    a928:	ldr	r0, [sp, #20]
    a92c:	add	r7, sp, #120	; 0x78
    a930:	mov	r1, r6
    a934:	mov	r2, r4
    a938:	ldr	r3, [r0]
    a93c:	mov	r0, r7
    a940:	bl	18b8 <fread@plt>
    a944:	add	r9, r0, r9
    a948:	cmp	r4, #1
    a94c:	blt	b010 <ReadInt64Data+0x1c0c>
    a950:	ldr	ip, [sp, #12]
    a954:	mov	r0, #0
    a958:	beq	a9a0 <ReadInt64Data+0x159c>
    a95c:	ldr	r0, [sp]
    a960:	add	r2, sp, #32
    a964:	sub	r0, r0, ip
    a968:	bic	r1, r0, #1
    a96c:	bic	r0, r4, #1
    a970:	ldm	r7, {r3, r6}
    a974:	subs	r1, r1, #2
    a978:	add	r7, r7, #8
    a97c:	str	r6, [sp, #36]	; 0x24
    a980:	str	r3, [sp, #32]
    a984:	vld1.32	{d16}, [r2 :64]
    a988:	vmovl.s32	q8, d16
    a98c:	vst1.64	{d16-d17}, [r5]!
    a990:	bne	a970 <ReadInt64Data+0x156c>
    a994:	ldr	r6, [sp, #16]
    a998:	cmp	r4, r0
    a99c:	beq	b010 <ReadInt64Data+0x1c0c>
    a9a0:	ldr	r2, [sp, #8]
    a9a4:	ldr	r3, [sp]
    a9a8:	add	r1, sp, #120	; 0x78
    a9ac:	add	r1, r1, r0, lsl #2
    a9b0:	add	r2, r0, r2
    a9b4:	sub	r3, r3, ip
    a9b8:	add	r2, sl, r2, lsl #3
    a9bc:	sub	r0, r3, r0
    a9c0:	ldr	r4, [r1], #4
    a9c4:	subs	r0, r0, #1
    a9c8:	asr	r5, r4, #31
    a9cc:	strd	r4, [r2]
    a9d0:	add	r2, r2, #8
    a9d4:	bne	a9c0 <ReadInt64Data+0x15bc>
    a9d8:	b	b010 <ReadInt64Data+0x1c0c>
    a9dc:	sub	r1, r7, #256	; 0x100
    a9e0:	str	r7, [sp, #4]
    a9e4:	add	r0, sl, #2048	; 0x800
    a9e8:	mov	r2, #256	; 0x100
    a9ec:	add	r4, sp, #120	; 0x78
    a9f0:	add	r7, sp, #64	; 0x40
    a9f4:	mov	r8, sl
    a9f8:	mov	r9, #0
    a9fc:	str	r1, [sp]
    aa00:	mov	r1, #0
    aa04:	mov	r5, r0
    aa08:	ldr	r0, [sp, #20]
    aa0c:	str	r1, [sp, #12]
    aa10:	str	r2, [sp, #8]
    aa14:	mov	r1, r6
    aa18:	mov	r2, #256	; 0x100
    aa1c:	ldr	r3, [r0]
    aa20:	mov	r0, r4
    aa24:	bl	18b8 <fread@plt>
    aa28:	mov	r1, r8
    aa2c:	mov	r2, #0
    aa30:	ldr	r3, [r4, r2]
    aa34:	str	r3, [sp, #64]	; 0x40
    aa38:	add	r3, r4, r2
    aa3c:	add	r2, r2, #8
    aa40:	ldr	r3, [r3, #4]
    aa44:	cmp	r2, #1024	; 0x400
    aa48:	str	r3, [sp, #68]	; 0x44
    aa4c:	vld1.32	{d16}, [r7 :64]
    aa50:	vmovl.u32	q8, d16
    aa54:	vst1.64	{d16-d17}, [r1]!
    aa58:	bne	aa30 <ReadInt64Data+0x162c>
    aa5c:	ldr	r1, [sp, #8]
    aa60:	ldr	r3, [sp]
    aa64:	add	r9, r0, r9
    aa68:	add	r8, r8, #2048	; 0x800
    aa6c:	add	r0, r5, #2048	; 0x800
    aa70:	add	r2, r1, #256	; 0x100
    aa74:	ldr	r1, [sp, #12]
    aa78:	add	r1, r1, #256	; 0x100
    aa7c:	cmp	r1, r3
    aa80:	blt	aa04 <ReadInt64Data+0x1600>
    aa84:	ldr	r0, [sp, #4]
    aa88:	cmp	r1, r0
    aa8c:	bge	b010 <ReadInt64Data+0x1c0c>
    aa90:	sub	r4, r0, r1
    aa94:	ldr	r0, [sp, #20]
    aa98:	add	r7, sp, #120	; 0x78
    aa9c:	mov	r1, r6
    aaa0:	mov	r2, r4
    aaa4:	ldr	r3, [r0]
    aaa8:	mov	r0, r7
    aaac:	bl	18b8 <fread@plt>
    aab0:	add	r9, r0, r9
    aab4:	cmp	r4, #1
    aab8:	blt	b010 <ReadInt64Data+0x1c0c>
    aabc:	ldr	lr, [sp, #12]
    aac0:	mov	r1, #0
    aac4:	mov	ip, #0
    aac8:	beq	ab14 <ReadInt64Data+0x1710>
    aacc:	ldr	r0, [sp]
    aad0:	bic	ip, r4, #1
    aad4:	add	r3, sp, #56	; 0x38
    aad8:	sub	r0, r0, lr
    aadc:	bic	r2, r0, #1
    aae0:	ldr	r6, [r7]
    aae4:	ldr	r0, [r7, #4]
    aae8:	subs	r2, r2, #2
    aaec:	add	r7, r7, #8
    aaf0:	str	r0, [sp, #60]	; 0x3c
    aaf4:	str	r6, [sp, #56]	; 0x38
    aaf8:	vld1.32	{d16}, [r3 :64]
    aafc:	vmovl.u32	q8, d16
    ab00:	vst1.64	{d16-d17}, [r5]!
    ab04:	bne	aae0 <ReadInt64Data+0x16dc>
    ab08:	ldr	r6, [sp, #16]
    ab0c:	cmp	r4, ip
    ab10:	beq	b010 <ReadInt64Data+0x1c0c>
    ab14:	add	r0, sp, #120	; 0x78
    ab18:	add	r2, r0, ip, lsl #2
    ab1c:	ldr	r0, [sp, #8]
    ab20:	add	r0, ip, r0
    ab24:	add	r3, sl, r0, lsl #3
    ab28:	ldr	r0, [sp]
    ab2c:	sub	r0, r0, lr
    ab30:	sub	r0, r0, ip
    ab34:	ldr	r4, [r2], #4
    ab38:	subs	r0, r0, #1
    ab3c:	str	r4, [r3]
    ab40:	str	r1, [r3, #4]
    ab44:	add	r3, r3, #8
    ab48:	bne	ab34 <ReadInt64Data+0x1730>
    ab4c:	b	b010 <ReadInt64Data+0x1c0c>
    ab50:	sub	r0, r7, #256	; 0x100
    ab54:	add	r1, sl, #2048	; 0x800
    ab58:	mov	r9, #0
    ab5c:	str	r7, [sp, #4]
    ab60:	str	r0, [sp, #12]
    ab64:	mov	r0, #0
    ab68:	ldr	r3, [r4]
    ab6c:	add	r4, sp, #120	; 0x78
    ab70:	mov	r8, r0
    ab74:	mov	r5, r1
    ab78:	mov	r1, r6
    ab7c:	mov	r2, #256	; 0x100
    ab80:	mov	r0, r4
    ab84:	bl	18b8 <fread@plt>
    ab88:	mov	r7, r0
    ab8c:	mov	r6, #0
    ab90:	ldr	r0, [r4], #4
    ab94:	bl	5855c <__aeabi_f2lz>
    ab98:	mov	r2, sl
    ab9c:	str	r0, [r2, r6]!
    aba0:	add	r6, r6, #8
    aba4:	cmp	r6, #2048	; 0x800
    aba8:	str	r1, [r2, #4]
    abac:	bne	ab90 <ReadInt64Data+0x178c>
    abb0:	ldr	r2, [sp, #12]
    abb4:	ldr	r6, [sp, #16]
    abb8:	ldr	r4, [sp, #20]
    abbc:	add	r0, r8, #256	; 0x100
    abc0:	add	r9, r7, r9
    abc4:	add	sl, sl, #2048	; 0x800
    abc8:	add	r1, r5, #2048	; 0x800
    abcc:	cmp	r0, r2
    abd0:	blt	ab68 <ReadInt64Data+0x1764>
    abd4:	ldr	r2, [sp, #4]
    abd8:	cmp	r0, r2
    abdc:	bge	b010 <ReadInt64Data+0x1c0c>
    abe0:	ldr	r3, [r4]
    abe4:	mov	r1, r6
    abe8:	sub	r6, r2, r0
    abec:	add	r4, sp, #120	; 0x78
    abf0:	mov	r0, r4
    abf4:	mov	r2, r6
    abf8:	bl	18b8 <fread@plt>
    abfc:	add	r9, r0, r9
    ac00:	cmp	r6, #1
    ac04:	blt	a868 <ReadInt64Data+0x1464>
    ac08:	ldr	r0, [sp, #12]
    ac0c:	sub	r6, r0, r8
    ac10:	ldr	r0, [r4], #4
    ac14:	bl	5855c <__aeabi_f2lz>
    ac18:	strd	r0, [r5]
    ac1c:	add	r5, r5, #8
    ac20:	subs	r6, r6, #1
    ac24:	bne	ac10 <ReadInt64Data+0x180c>
    ac28:	b	a868 <ReadInt64Data+0x1464>
    ac2c:	sub	r0, r7, #256	; 0x100
    ac30:	add	r1, sl, #2048	; 0x800
    ac34:	add	r4, sp, #120	; 0x78
    ac38:	mov	r9, #0
    ac3c:	str	r7, [sp, #4]
    ac40:	str	r0, [sp, #12]
    ac44:	mov	r0, #0
    ac48:	mov	r8, r0
    ac4c:	ldr	r0, [sp, #20]
    ac50:	mov	r5, r1
    ac54:	mov	r1, r6
    ac58:	mov	r2, #256	; 0x100
    ac5c:	ldr	r3, [r0]
    ac60:	mov	r0, r4
    ac64:	bl	18b8 <fread@plt>
    ac68:	mov	r7, r0
    ac6c:	mov	r6, #0
    ac70:	add	r0, r4, r6
    ac74:	vldr	d16, [r0]
    ac78:	vmov	r0, r1, d16
    ac7c:	bl	58588 <__aeabi_d2lz>
    ac80:	mov	r2, sl
    ac84:	str	r0, [r2, r6]!
    ac88:	add	r6, r6, #8
    ac8c:	cmp	r6, #2048	; 0x800
    ac90:	str	r1, [r2, #4]
    ac94:	bne	ac70 <ReadInt64Data+0x186c>
    ac98:	ldr	r2, [sp, #12]
    ac9c:	ldr	r6, [sp, #16]
    aca0:	add	r0, r8, #256	; 0x100
    aca4:	add	r9, r7, r9
    aca8:	add	sl, sl, #2048	; 0x800
    acac:	add	r1, r5, #2048	; 0x800
    acb0:	cmp	r0, r2
    acb4:	blt	ac48 <ReadInt64Data+0x1844>
    acb8:	ldr	r2, [sp, #4]
    acbc:	cmp	r0, r2
    acc0:	bge	b010 <ReadInt64Data+0x1c0c>
    acc4:	mov	r1, r6
    acc8:	sub	r6, r2, r0
    accc:	ldr	r0, [sp, #20]
    acd0:	add	r4, sp, #120	; 0x78
    acd4:	mov	r2, r6
    acd8:	ldr	r3, [r0]
    acdc:	mov	r0, r4
    ace0:	bl	18b8 <fread@plt>
    ace4:	add	r9, r0, r9
    ace8:	cmp	r6, #1
    acec:	blt	a868 <ReadInt64Data+0x1464>
    acf0:	ldr	r0, [sp, #12]
    acf4:	sub	r6, r0, r8
    acf8:	vldr	d16, [r4]
    acfc:	vmov	r0, r1, d16
    ad00:	bl	58588 <__aeabi_d2lz>
    ad04:	strd	r0, [r5]
    ad08:	add	r5, r5, #8
    ad0c:	subs	r6, r6, #1
    ad10:	add	r4, r4, #8
    ad14:	bne	acf8 <ReadInt64Data+0x18f4>
    ad18:	b	a868 <ReadInt64Data+0x1464>
    ad1c:	sub	r0, r7, #256	; 0x100
    ad20:	lsl	r4, r7, #3
    ad24:	mov	r5, #0
    ad28:	mov	r9, #0
    ad2c:	str	r8, [sp]
    ad30:	str	r7, [sp, #4]
    ad34:	str	r0, [sp, #12]
    ad38:	ldr	r0, [sp, #20]
    ad3c:	add	r8, sp, #120	; 0x78
    ad40:	mov	r1, r6
    ad44:	mov	r2, #256	; 0x100
    ad48:	ldr	r3, [r0]
    ad4c:	mov	r0, r8
    ad50:	bl	18b8 <fread@plt>
    ad54:	mov	r7, r0
    ad58:	add	r0, sl, r5, lsl #3
    ad5c:	mov	r1, r8
    ad60:	mov	r2, #2048	; 0x800
    ad64:	bl	181c <memcpy@plt>
    ad68:	ldr	r0, [sp, #12]
    ad6c:	add	r5, r5, #256	; 0x100
    ad70:	add	r9, r7, r9
    ad74:	sub	r4, r4, #2048	; 0x800
    ad78:	cmp	r5, r0
    ad7c:	blt	ad38 <ReadInt64Data+0x1934>
    ad80:	ldr	r7, [sp, #4]
    ad84:	ldr	r8, [sp]
    ad88:	cmp	r5, r7
    ad8c:	bge	add4 <ReadInt64Data+0x19d0>
    ad90:	ldr	r0, [sp, #20]
    ad94:	ldr	r6, [sp, #16]
    ad98:	sub	r7, r7, r5
    ad9c:	mov	r2, r7
    ada0:	ldr	r3, [r0]
    ada4:	add	r0, sp, #120	; 0x78
    ada8:	mov	r1, r6
    adac:	bl	18b8 <fread@plt>
    adb0:	add	r9, r0, r9
    adb4:	cmp	r7, #1
    adb8:	blt	adcc <ReadInt64Data+0x19c8>
    adbc:	add	r0, sl, r5, lsl #3
    adc0:	add	r1, sp, #120	; 0x78
    adc4:	mov	r2, r4
    adc8:	bl	181c <memcpy@plt>
    adcc:	ldr	r7, [sp, #4]
    add0:	b	add8 <ReadInt64Data+0x19d4>
    add4:	ldr	r6, [sp, #16]
    add8:	ldr	r4, [sp, #20]
    addc:	cmp	r8, #13
    ade0:	beq	adfc <ReadInt64Data+0x19f8>
    ade4:	b	b010 <ReadInt64Data+0x1c0c>
    ade8:	ldr	r6, [sp, #16]
    adec:	ldr	r4, [sp, #20]
    adf0:	ldr	r8, [sp]
    adf4:	cmp	r8, #13
    adf8:	bne	b010 <ReadInt64Data+0x1c0c>
    adfc:	ldr	r0, [r4, #20]
    ae00:	cmp	r0, #0
    ae04:	beq	ae54 <ReadInt64Data+0x1a50>
    ae08:	cmp	r7, #256	; 0x100
    ae0c:	bgt	ae8c <ReadInt64Data+0x1a88>
    ae10:	ldr	r3, [r4]
    ae14:	add	r4, sp, #120	; 0x78
    ae18:	mov	r1, r6
    ae1c:	mov	r2, r7
    ae20:	mov	r0, r4
    ae24:	bl	18b8 <fread@plt>
    ae28:	add	r9, r0, r9
    ae2c:	cmp	r7, #1
    ae30:	blt	b010 <ReadInt64Data+0x1c0c>
    ae34:	mov	r0, r4
    ae38:	bl	1bd4 <Mat_uint64Swap>
    ae3c:	strd	r0, [sl]
    ae40:	subs	r7, r7, #1
    ae44:	add	sl, sl, #8
    ae48:	add	r4, r4, #8
    ae4c:	bne	ae34 <ReadInt64Data+0x1a30>
    ae50:	b	b010 <ReadInt64Data+0x1c0c>
    ae54:	cmp	r7, #256	; 0x100
    ae58:	bgt	af6c <ReadInt64Data+0x1b68>
    ae5c:	ldr	r3, [r4]
    ae60:	add	r0, sp, #120	; 0x78
    ae64:	mov	r1, r6
    ae68:	mov	r2, r7
    ae6c:	bl	18b8 <fread@plt>
    ae70:	add	r9, r0, r9
    ae74:	cmp	r7, #1
    ae78:	blt	b010 <ReadInt64Data+0x1c0c>
    ae7c:	lsl	r2, r7, #3
    ae80:	add	r1, sp, #120	; 0x78
    ae84:	mov	r0, sl
    ae88:	b	b00c <ReadInt64Data+0x1c08>
    ae8c:	sub	r0, r7, #256	; 0x100
    ae90:	add	r1, sl, #2048	; 0x800
    ae94:	add	r4, sp, #120	; 0x78
    ae98:	str	r7, [sp, #4]
    ae9c:	str	r0, [sp, #12]
    aea0:	mov	r0, #0
    aea4:	mov	r8, r0
    aea8:	ldr	r0, [sp, #20]
    aeac:	mov	r5, r1
    aeb0:	mov	r1, r6
    aeb4:	mov	r2, #256	; 0x100
    aeb8:	ldr	r3, [r0]
    aebc:	mov	r0, r4
    aec0:	bl	18b8 <fread@plt>
    aec4:	mov	r7, r0
    aec8:	mov	r6, #0
    aecc:	add	r0, r4, r6
    aed0:	bl	1bd4 <Mat_uint64Swap>
    aed4:	mov	r2, sl
    aed8:	str	r0, [r2, r6]!
    aedc:	add	r6, r6, #8
    aee0:	cmp	r6, #2048	; 0x800
    aee4:	str	r1, [r2, #4]
    aee8:	bne	aecc <ReadInt64Data+0x1ac8>
    aeec:	ldr	r2, [sp, #12]
    aef0:	ldr	r6, [sp, #16]
    aef4:	add	r0, r8, #256	; 0x100
    aef8:	add	r9, r7, r9
    aefc:	add	sl, sl, #2048	; 0x800
    af00:	add	r1, r5, #2048	; 0x800
    af04:	cmp	r0, r2
    af08:	blt	aea4 <ReadInt64Data+0x1aa0>
    af0c:	ldr	r2, [sp, #4]
    af10:	cmp	r0, r2
    af14:	bge	b010 <ReadInt64Data+0x1c0c>
    af18:	mov	r1, r6
    af1c:	sub	r6, r2, r0
    af20:	ldr	r0, [sp, #20]
    af24:	add	r4, sp, #120	; 0x78
    af28:	mov	r2, r6
    af2c:	ldr	r3, [r0]
    af30:	mov	r0, r4
    af34:	bl	18b8 <fread@plt>
    af38:	add	r9, r0, r9
    af3c:	cmp	r6, #1
    af40:	blt	a868 <ReadInt64Data+0x1464>
    af44:	ldr	r0, [sp, #12]
    af48:	sub	r6, r0, r8
    af4c:	mov	r0, r4
    af50:	bl	1bd4 <Mat_uint64Swap>
    af54:	strd	r0, [r5]
    af58:	add	r5, r5, #8
    af5c:	subs	r6, r6, #1
    af60:	add	r4, r4, #8
    af64:	bne	af4c <ReadInt64Data+0x1b48>
    af68:	b	a868 <ReadInt64Data+0x1464>
    af6c:	sub	r0, r7, #256	; 0x100
    af70:	lsl	r4, r7, #3
    af74:	mov	r5, #0
    af78:	add	r8, sp, #120	; 0x78
    af7c:	str	r7, [sp, #4]
    af80:	str	r0, [sp, #12]
    af84:	ldr	r0, [sp, #20]
    af88:	mov	r1, r6
    af8c:	mov	r2, #256	; 0x100
    af90:	ldr	r3, [r0]
    af94:	mov	r0, r8
    af98:	bl	18b8 <fread@plt>
    af9c:	mov	r7, r0
    afa0:	add	r0, sl, r5, lsl #3
    afa4:	mov	r1, r8
    afa8:	mov	r2, #2048	; 0x800
    afac:	bl	181c <memcpy@plt>
    afb0:	ldr	r0, [sp, #12]
    afb4:	add	r5, r5, #256	; 0x100
    afb8:	add	r9, r7, r9
    afbc:	sub	r4, r4, #2048	; 0x800
    afc0:	cmp	r5, r0
    afc4:	blt	af84 <ReadInt64Data+0x1b80>
    afc8:	ldr	r0, [sp, #4]
    afcc:	cmp	r5, r0
    afd0:	bge	a868 <ReadInt64Data+0x1464>
    afd4:	sub	r7, r0, r5
    afd8:	ldr	r0, [sp, #20]
    afdc:	ldr	r6, [sp, #16]
    afe0:	mov	r2, r7
    afe4:	ldr	r3, [r0]
    afe8:	add	r0, sp, #120	; 0x78
    afec:	mov	r1, r6
    aff0:	bl	18b8 <fread@plt>
    aff4:	add	r9, r0, r9
    aff8:	cmp	r7, #1
    affc:	blt	b010 <ReadInt64Data+0x1c0c>
    b000:	add	r0, sl, r5, lsl #3
    b004:	add	r1, sp, #120	; 0x78
    b008:	mov	r2, r4
    b00c:	bl	181c <memcpy@plt>
    b010:	mul	r0, r9, r6
    b014:	sub	sp, fp, #28
    b018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000b01c <ReadCompressedInt64Data>:
    b01c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b020:	add	fp, sp, #28
    b024:	sub	sp, sp, #12
    b028:	mov	r7, r0
    b02c:	mov	r0, #0
    b030:	cmp	r1, #0
    b034:	beq	b048 <ReadCompressedInt64Data+0x2c>
    b038:	cmp	r7, #0
    b03c:	movne	r5, r2
    b040:	cmpne	r2, #0
    b044:	bne	b050 <ReadCompressedInt64Data+0x34>
    b048:	sub	sp, fp, #28
    b04c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b050:	ldr	sl, [fp, #8]
    b054:	mov	r0, r3
    b058:	mov	r4, r3
    b05c:	mov	r6, r1
    b060:	bl	1924 <Mat_SizeOf@plt>
    b064:	mov	r9, r0
    b068:	sub	r0, r4, #1
    b06c:	cmp	r0, #12
    b070:	bhi	b4b4 <ReadCompressedInt64Data+0x498>
    b074:	add	r1, pc, #4
    b078:	ldr	r0, [r1, r0, lsl #2]
    b07c:	add	pc, r1, r0
    b080:	.word	0x00000034
    b084:	.word	0x00000074
    b088:	.word	0x000000b4
    b08c:	.word	0x00000104
    b090:	.word	0x00000154
    b094:	.word	0x000001a4
    b098:	.word	0x000001f4
    b09c:	.word	0x00000434
    b0a0:	.word	0x00000248
    b0a4:	.word	0x00000434
    b0a8:	.word	0x00000434
    b0ac:	.word	0x0000029c
    b0b0:	.word	0x000002e8
    b0b4:	cmp	sl, #1
    b0b8:	blt	b4b4 <ReadCompressedInt64Data+0x498>
    b0bc:	mov	r8, sp
    b0c0:	mov	r4, sl
    b0c4:	mov	r0, r7
    b0c8:	mov	r1, r6
    b0cc:	mov	r2, r8
    b0d0:	mov	r3, r9
    b0d4:	bl	32b8 <InflateData>
    b0d8:	ldrsb	r0, [sp]
    b0dc:	subs	r4, r4, #1
    b0e0:	asr	r1, r0, #31
    b0e4:	strd	r0, [r5]
    b0e8:	add	r5, r5, #8
    b0ec:	bne	b0c4 <ReadCompressedInt64Data+0xa8>
    b0f0:	b	b4b4 <ReadCompressedInt64Data+0x498>
    b0f4:	cmp	sl, #1
    b0f8:	blt	b4b0 <ReadCompressedInt64Data+0x494>
    b0fc:	ldr	r4, [fp, #8]
    b100:	mov	r8, sp
    b104:	mov	sl, #0
    b108:	mov	r0, r7
    b10c:	mov	r1, r6
    b110:	mov	r2, r8
    b114:	mov	r3, r9
    b118:	bl	32b8 <InflateData>
    b11c:	ldrb	r0, [sp]
    b120:	subs	r4, r4, #1
    b124:	stm	r5, {r0, sl}
    b128:	add	r5, r5, #8
    b12c:	bne	b108 <ReadCompressedInt64Data+0xec>
    b130:	b	b4b0 <ReadCompressedInt64Data+0x494>
    b134:	ldr	r0, [r7, #20]
    b138:	cmp	r0, #0
    b13c:	beq	b3b4 <ReadCompressedInt64Data+0x398>
    b140:	cmp	sl, #1
    b144:	blt	b4b4 <ReadCompressedInt64Data+0x498>
    b148:	mov	r8, sp
    b14c:	mov	r4, sl
    b150:	mov	r0, r7
    b154:	mov	r1, r6
    b158:	mov	r2, r8
    b15c:	mov	r3, r9
    b160:	bl	32b8 <InflateData>
    b164:	mov	r0, r8
    b168:	bl	1c18 <Mat_int16Swap>
    b16c:	asr	r1, r0, #31
    b170:	subs	r4, r4, #1
    b174:	strd	r0, [r5]
    b178:	add	r5, r5, #8
    b17c:	bne	b150 <ReadCompressedInt64Data+0x134>
    b180:	b	b4b4 <ReadCompressedInt64Data+0x498>
    b184:	ldr	r0, [r7, #20]
    b188:	cmp	r0, #0
    b18c:	beq	b3f4 <ReadCompressedInt64Data+0x3d8>
    b190:	cmp	sl, #1
    b194:	blt	b4b0 <ReadCompressedInt64Data+0x494>
    b198:	ldr	r4, [fp, #8]
    b19c:	mov	r8, sp
    b1a0:	mov	sl, #0
    b1a4:	mov	r0, r7
    b1a8:	mov	r1, r6
    b1ac:	mov	r2, r8
    b1b0:	mov	r3, r9
    b1b4:	bl	32b8 <InflateData>
    b1b8:	mov	r0, r8
    b1bc:	bl	1c2c <Mat_uint16Swap>
    b1c0:	stm	r5, {r0, sl}
    b1c4:	subs	r4, r4, #1
    b1c8:	add	r5, r5, #8
    b1cc:	bne	b1a4 <ReadCompressedInt64Data+0x188>
    b1d0:	b	b4b0 <ReadCompressedInt64Data+0x494>
    b1d4:	ldr	r0, [r7, #20]
    b1d8:	cmp	r0, #0
    b1dc:	beq	b434 <ReadCompressedInt64Data+0x418>
    b1e0:	cmp	sl, #1
    b1e4:	blt	b4b4 <ReadCompressedInt64Data+0x498>
    b1e8:	mov	r8, sp
    b1ec:	mov	r4, sl
    b1f0:	mov	r0, r7
    b1f4:	mov	r1, r6
    b1f8:	mov	r2, r8
    b1fc:	mov	r3, r9
    b200:	bl	32b8 <InflateData>
    b204:	mov	r0, r8
    b208:	bl	1bf0 <Mat_int32Swap>
    b20c:	asr	r1, r0, #31
    b210:	subs	r4, r4, #1
    b214:	strd	r0, [r5]
    b218:	add	r5, r5, #8
    b21c:	bne	b1f0 <ReadCompressedInt64Data+0x1d4>
    b220:	b	b4b4 <ReadCompressedInt64Data+0x498>
    b224:	ldr	r0, [r7, #20]
    b228:	cmp	r0, #0
    b22c:	beq	b474 <ReadCompressedInt64Data+0x458>
    b230:	cmp	sl, #1
    b234:	blt	b4b0 <ReadCompressedInt64Data+0x494>
    b238:	ldr	sl, [fp, #8]
    b23c:	mov	r8, sp
    b240:	mov	r4, #0
    b244:	mov	r0, r7
    b248:	mov	r1, r6
    b24c:	mov	r2, r8
    b250:	mov	r3, r9
    b254:	bl	32b8 <InflateData>
    b258:	mov	r0, r8
    b25c:	bl	1c04 <Mat_uint32Swap>
    b260:	stm	r5, {r0, r4}
    b264:	subs	sl, sl, #1
    b268:	add	r5, r5, #8
    b26c:	bne	b244 <ReadCompressedInt64Data+0x228>
    b270:	b	b4b0 <ReadCompressedInt64Data+0x494>
    b274:	ldr	r0, [r7, #20]
    b278:	cmp	r0, #0
    b27c:	beq	b4c0 <ReadCompressedInt64Data+0x4a4>
    b280:	cmp	sl, #1
    b284:	blt	b4b4 <ReadCompressedInt64Data+0x498>
    b288:	mov	r8, sp
    b28c:	mov	r4, sl
    b290:	mov	r0, r7
    b294:	mov	r1, r6
    b298:	mov	r2, r8
    b29c:	mov	r3, r9
    b2a0:	bl	32b8 <InflateData>
    b2a4:	mov	r0, r8
    b2a8:	bl	1c44 <Mat_floatSwap>
    b2ac:	vmov	r0, s0
    b2b0:	bl	5855c <__aeabi_f2lz>
    b2b4:	strd	r0, [r5]
    b2b8:	subs	r4, r4, #1
    b2bc:	add	r5, r5, #8
    b2c0:	bne	b290 <ReadCompressedInt64Data+0x274>
    b2c4:	b	b4b4 <ReadCompressedInt64Data+0x498>
    b2c8:	ldr	r0, [r7, #20]
    b2cc:	cmp	r0, #0
    b2d0:	beq	b500 <ReadCompressedInt64Data+0x4e4>
    b2d4:	cmp	sl, #1
    b2d8:	blt	b4b4 <ReadCompressedInt64Data+0x498>
    b2dc:	mov	r8, sp
    b2e0:	mov	r4, sl
    b2e4:	mov	r0, r7
    b2e8:	mov	r1, r6
    b2ec:	mov	r2, r8
    b2f0:	mov	r3, r9
    b2f4:	bl	32b8 <InflateData>
    b2f8:	mov	r0, r8
    b2fc:	bl	1c88 <Mat_doubleSwap>
    b300:	vmov	r0, r1, d0
    b304:	bl	58588 <__aeabi_d2lz>
    b308:	strd	r0, [r5]
    b30c:	subs	r4, r4, #1
    b310:	add	r5, r5, #8
    b314:	bne	b2e4 <ReadCompressedInt64Data+0x2c8>
    b318:	b	b4b4 <ReadCompressedInt64Data+0x498>
    b31c:	ldr	r0, [r7, #20]
    b320:	cmp	r0, #0
    b324:	beq	b544 <ReadCompressedInt64Data+0x528>
    b328:	cmp	sl, #1
    b32c:	blt	b4b4 <ReadCompressedInt64Data+0x498>
    b330:	mov	r8, sp
    b334:	mov	r4, sl
    b338:	mov	r0, r7
    b33c:	mov	r1, r6
    b340:	mov	r2, r8
    b344:	mov	r3, r9
    b348:	bl	32b8 <InflateData>
    b34c:	mov	r0, r8
    b350:	bl	1b84 <Mat_int64Swap>
    b354:	strd	r0, [r5]
    b358:	subs	r4, r4, #1
    b35c:	add	r5, r5, #8
    b360:	bne	b338 <ReadCompressedInt64Data+0x31c>
    b364:	b	b4b4 <ReadCompressedInt64Data+0x498>
    b368:	ldr	r0, [r7, #20]
    b36c:	cmp	r0, #0
    b370:	beq	b580 <ReadCompressedInt64Data+0x564>
    b374:	cmp	sl, #1
    b378:	blt	b4b4 <ReadCompressedInt64Data+0x498>
    b37c:	mov	r8, sp
    b380:	mov	r4, sl
    b384:	mov	r0, r7
    b388:	mov	r1, r6
    b38c:	mov	r2, r8
    b390:	mov	r3, r9
    b394:	bl	32b8 <InflateData>
    b398:	mov	r0, r8
    b39c:	bl	1bd4 <Mat_uint64Swap>
    b3a0:	strd	r0, [r5]
    b3a4:	subs	r4, r4, #1
    b3a8:	add	r5, r5, #8
    b3ac:	bne	b384 <ReadCompressedInt64Data+0x368>
    b3b0:	b	b4b4 <ReadCompressedInt64Data+0x498>
    b3b4:	cmp	sl, #1
    b3b8:	blt	b4b4 <ReadCompressedInt64Data+0x498>
    b3bc:	mov	r8, sp
    b3c0:	mov	r4, sl
    b3c4:	mov	r0, r7
    b3c8:	mov	r1, r6
    b3cc:	mov	r2, r8
    b3d0:	mov	r3, r9
    b3d4:	bl	32b8 <InflateData>
    b3d8:	ldrsh	r0, [sp]
    b3dc:	subs	r4, r4, #1
    b3e0:	asr	r1, r0, #31
    b3e4:	strd	r0, [r5]
    b3e8:	add	r5, r5, #8
    b3ec:	bne	b3c4 <ReadCompressedInt64Data+0x3a8>
    b3f0:	b	b4b4 <ReadCompressedInt64Data+0x498>
    b3f4:	cmp	sl, #1
    b3f8:	blt	b4b0 <ReadCompressedInt64Data+0x494>
    b3fc:	ldr	r4, [fp, #8]
    b400:	mov	r8, sp
    b404:	mov	sl, #0
    b408:	mov	r0, r7
    b40c:	mov	r1, r6
    b410:	mov	r2, r8
    b414:	mov	r3, r9
    b418:	bl	32b8 <InflateData>
    b41c:	ldrh	r0, [sp]
    b420:	subs	r4, r4, #1
    b424:	stm	r5, {r0, sl}
    b428:	add	r5, r5, #8
    b42c:	bne	b408 <ReadCompressedInt64Data+0x3ec>
    b430:	b	b4b0 <ReadCompressedInt64Data+0x494>
    b434:	cmp	sl, #1
    b438:	blt	b4b4 <ReadCompressedInt64Data+0x498>
    b43c:	mov	r8, sp
    b440:	mov	r4, sl
    b444:	mov	r0, r7
    b448:	mov	r1, r6
    b44c:	mov	r2, r8
    b450:	mov	r3, r9
    b454:	bl	32b8 <InflateData>
    b458:	ldr	r0, [sp]
    b45c:	subs	r4, r4, #1
    b460:	asr	r1, r0, #31
    b464:	strd	r0, [r5]
    b468:	add	r5, r5, #8
    b46c:	bne	b444 <ReadCompressedInt64Data+0x428>
    b470:	b	b4b4 <ReadCompressedInt64Data+0x498>
    b474:	cmp	sl, #1
    b478:	blt	b4b0 <ReadCompressedInt64Data+0x494>
    b47c:	ldr	r4, [fp, #8]
    b480:	mov	r8, sp
    b484:	mov	sl, #0
    b488:	mov	r0, r7
    b48c:	mov	r1, r6
    b490:	mov	r2, r8
    b494:	mov	r3, r9
    b498:	bl	32b8 <InflateData>
    b49c:	ldr	r0, [sp]
    b4a0:	subs	r4, r4, #1
    b4a4:	stm	r5, {r0, sl}
    b4a8:	add	r5, r5, #8
    b4ac:	bne	b488 <ReadCompressedInt64Data+0x46c>
    b4b0:	ldr	sl, [fp, #8]
    b4b4:	mul	r0, r9, sl
    b4b8:	sub	sp, fp, #28
    b4bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b4c0:	cmp	sl, #1
    b4c4:	blt	b4b4 <ReadCompressedInt64Data+0x498>
    b4c8:	mov	r8, sp
    b4cc:	mov	r4, sl
    b4d0:	mov	r0, r7
    b4d4:	mov	r1, r6
    b4d8:	mov	r2, r8
    b4dc:	mov	r3, r9
    b4e0:	bl	32b8 <InflateData>
    b4e4:	ldr	r0, [sp]
    b4e8:	bl	5855c <__aeabi_f2lz>
    b4ec:	strd	r0, [r5]
    b4f0:	subs	r4, r4, #1
    b4f4:	add	r5, r5, #8
    b4f8:	bne	b4d0 <ReadCompressedInt64Data+0x4b4>
    b4fc:	b	b4b4 <ReadCompressedInt64Data+0x498>
    b500:	cmp	sl, #1
    b504:	blt	b4b4 <ReadCompressedInt64Data+0x498>
    b508:	mov	r8, sp
    b50c:	mov	r4, sl
    b510:	mov	r0, r7
    b514:	mov	r1, r6
    b518:	mov	r2, r8
    b51c:	mov	r3, r9
    b520:	bl	32b8 <InflateData>
    b524:	vldr	d16, [sp]
    b528:	vmov	r0, r1, d16
    b52c:	bl	58588 <__aeabi_d2lz>
    b530:	strd	r0, [r5]
    b534:	subs	r4, r4, #1
    b538:	add	r5, r5, #8
    b53c:	bne	b510 <ReadCompressedInt64Data+0x4f4>
    b540:	b	b4b4 <ReadCompressedInt64Data+0x498>
    b544:	cmp	sl, #1
    b548:	blt	b4b4 <ReadCompressedInt64Data+0x498>
    b54c:	mov	r8, sp
    b550:	mov	r4, sl
    b554:	mov	r0, r7
    b558:	mov	r1, r6
    b55c:	mov	r2, r8
    b560:	mov	r3, r9
    b564:	bl	32b8 <InflateData>
    b568:	ldm	sp, {r0, r1}
    b56c:	subs	r4, r4, #1
    b570:	strd	r0, [r5]
    b574:	add	r5, r5, #8
    b578:	bne	b554 <ReadCompressedInt64Data+0x538>
    b57c:	b	b4b4 <ReadCompressedInt64Data+0x498>
    b580:	cmp	sl, #1
    b584:	blt	b4b4 <ReadCompressedInt64Data+0x498>
    b588:	mov	r8, sp
    b58c:	mov	r4, sl
    b590:	mov	r0, r7
    b594:	mov	r1, r6
    b598:	mov	r2, r8
    b59c:	mov	r3, r9
    b5a0:	bl	32b8 <InflateData>
    b5a4:	ldm	sp, {r0, r1}
    b5a8:	subs	r4, r4, #1
    b5ac:	strd	r0, [r5]
    b5b0:	add	r5, r5, #8
    b5b4:	bne	b590 <ReadCompressedInt64Data+0x574>
    b5b8:	b	b4b4 <ReadCompressedInt64Data+0x498>

0000b5bc <ReadUInt64Data>:
    b5bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b5c0:	add	fp, sp, #28
    b5c4:	sub	sp, sp, #124	; 0x7c
    b5c8:	sub	sp, sp, #2048	; 0x800
    b5cc:	mov	r4, r0
    b5d0:	mov	r0, #0
    b5d4:	cmp	r4, #0
    b5d8:	beq	b5f0 <ReadUInt64Data+0x34>
    b5dc:	cmp	r1, #0
    b5e0:	mov	sl, r1
    b5e4:	ldrne	r1, [r4]
    b5e8:	cmpne	r1, #0
    b5ec:	bne	b5f8 <ReadUInt64Data+0x3c>
    b5f0:	sub	sp, fp, #28
    b5f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b5f8:	mov	r0, r2
    b5fc:	mov	r7, r3
    b600:	mov	r8, r2
    b604:	bl	1924 <Mat_SizeOf@plt>
    b608:	mov	r6, r0
    b60c:	sub	r0, r8, #1
    b610:	mov	r9, #0
    b614:	str	r4, [sp, #20]
    b618:	cmp	r0, #11
    b61c:	str	r6, [sp, #16]
    b620:	bhi	cfac <ReadUInt64Data+0x19f0>
    b624:	add	r1, pc, #4
    b628:	ldr	r0, [r1, r0, lsl #2]
    b62c:	add	pc, r1, r0
    b630:	.word	0x00000030
    b634:	.word	0x000000d4
    b638:	.word	0x00000180
    b63c:	.word	0x000001dc
    b640:	.word	0x00000238
    b644:	.word	0x00000294
    b648:	.word	0x000002f0
    b64c:	.word	0x0000197c
    b650:	.word	0x00000350
    b654:	.word	0x0000197c
    b658:	.word	0x0000197c
    b65c:	.word	0x000003b0
    b660:	cmp	r7, #256	; 0x100
    b664:	bgt	ba40 <ReadUInt64Data+0x484>
    b668:	ldr	r3, [r4]
    b66c:	add	r4, sp, #120	; 0x78
    b670:	mov	r1, r6
    b674:	mov	r2, r7
    b678:	mov	r0, r4
    b67c:	bl	18b8 <fread@plt>
    b680:	mov	r9, r0
    b684:	cmp	r7, #1
    b688:	blt	d1c8 <ReadUInt64Data+0x1c0c>
    b68c:	mov	r0, #0
    b690:	beq	b6d8 <ReadUInt64Data+0x11c>
    b694:	bic	r0, r7, #1
    b698:	mov	r5, r7
    b69c:	add	r1, sp, #96	; 0x60
    b6a0:	mov	r3, sl
    b6a4:	mov	r2, r0
    b6a8:	ldrh	r7, [r4], #2
    b6ac:	subs	r2, r2, #2
    b6b0:	strh	r7, [sp, #96]	; 0x60
    b6b4:	vld1.16	{d16[0]}, [r1 :16]
    b6b8:	vmovl.s8	q8, d16
    b6bc:	vmovl.s16	q8, d16
    b6c0:	vmovl.s32	q8, d16
    b6c4:	vst1.64	{d16-d17}, [r3]!
    b6c8:	bne	b6a8 <ReadUInt64Data+0xec>
    b6cc:	mov	r7, r5
    b6d0:	cmp	r0, r5
    b6d4:	beq	d1c8 <ReadUInt64Data+0x1c0c>
    b6d8:	add	r3, sp, #120	; 0x78
    b6dc:	sub	r1, r7, r0
    b6e0:	add	r2, sl, r0, lsl #3
    b6e4:	add	r0, r3, r0
    b6e8:	ldrsb	r4, [r0], #1
    b6ec:	subs	r1, r1, #1
    b6f0:	asr	r5, r4, #31
    b6f4:	strd	r4, [r2]
    b6f8:	add	r2, r2, #8
    b6fc:	bne	b6e8 <ReadUInt64Data+0x12c>
    b700:	b	d1c8 <ReadUInt64Data+0x1c0c>
    b704:	cmp	r7, #256	; 0x100
    b708:	bgt	bbac <ReadUInt64Data+0x5f0>
    b70c:	ldr	r3, [r4]
    b710:	add	r4, sp, #120	; 0x78
    b714:	mov	r1, r6
    b718:	mov	r2, r7
    b71c:	mov	r0, r4
    b720:	bl	18b8 <fread@plt>
    b724:	mov	r9, r0
    b728:	cmp	r7, #1
    b72c:	blt	d1c8 <ReadUInt64Data+0x1c0c>
    b730:	mov	r1, #0
    b734:	mov	r0, #0
    b738:	beq	b784 <ReadUInt64Data+0x1c8>
    b73c:	bic	r0, r7, #1
    b740:	mov	r5, r7
    b744:	add	r2, sp, #108	; 0x6c
    b748:	mov	r7, sl
    b74c:	mov	r3, r0
    b750:	ldrh	r6, [r4], #2
    b754:	subs	r3, r3, #2
    b758:	strh	r6, [sp, #108]	; 0x6c
    b75c:	vld1.16	{d16[0]}, [r2 :16]
    b760:	vmovl.u8	q8, d16
    b764:	vmovl.u16	q8, d16
    b768:	vmovl.u32	q8, d16
    b76c:	vst1.64	{d16-d17}, [r7]!
    b770:	bne	b750 <ReadUInt64Data+0x194>
    b774:	ldr	r6, [sp, #16]
    b778:	mov	r7, r5
    b77c:	cmp	r0, r5
    b780:	beq	d1c8 <ReadUInt64Data+0x1c0c>
    b784:	sub	r2, r7, r0
    b788:	add	r7, sp, #120	; 0x78
    b78c:	add	r3, sl, r0, lsl #3
    b790:	add	r0, r7, r0
    b794:	ldrb	r4, [r0], #1
    b798:	subs	r2, r2, #1
    b79c:	str	r4, [r3]
    b7a0:	str	r1, [r3, #4]
    b7a4:	add	r3, r3, #8
    b7a8:	bne	b794 <ReadUInt64Data+0x1d8>
    b7ac:	b	d1c8 <ReadUInt64Data+0x1c0c>
    b7b0:	ldr	r0, [r4, #20]
    b7b4:	cmp	r0, #0
    b7b8:	beq	bd20 <ReadUInt64Data+0x764>
    b7bc:	cmp	r7, #256	; 0x100
    b7c0:	bgt	c0a0 <ReadUInt64Data+0xae4>
    b7c4:	ldr	r3, [r4]
    b7c8:	add	r4, sp, #120	; 0x78
    b7cc:	mov	r1, r6
    b7d0:	mov	r2, r7
    b7d4:	mov	r0, r4
    b7d8:	bl	18b8 <fread@plt>
    b7dc:	mov	r9, r0
    b7e0:	cmp	r7, #1
    b7e4:	blt	d1c8 <ReadUInt64Data+0x1c0c>
    b7e8:	mov	r0, r4
    b7ec:	bl	1c18 <Mat_int16Swap>
    b7f0:	asr	r1, r0, #31
    b7f4:	subs	r7, r7, #1
    b7f8:	add	r4, r4, #2
    b7fc:	strd	r0, [sl]
    b800:	add	sl, sl, #8
    b804:	bne	b7e8 <ReadUInt64Data+0x22c>
    b808:	b	d1c8 <ReadUInt64Data+0x1c0c>
    b80c:	ldr	r0, [r4, #20]
    b810:	cmp	r0, #0
    b814:	beq	bdc0 <ReadUInt64Data+0x804>
    b818:	cmp	r7, #256	; 0x100
    b81c:	bgt	c18c <ReadUInt64Data+0xbd0>
    b820:	ldr	r3, [r4]
    b824:	add	r4, sp, #120	; 0x78
    b828:	mov	r1, r6
    b82c:	mov	r2, r7
    b830:	mov	r0, r4
    b834:	bl	18b8 <fread@plt>
    b838:	mov	r9, r0
    b83c:	cmp	r7, #1
    b840:	blt	d1c8 <ReadUInt64Data+0x1c0c>
    b844:	mov	r5, #0
    b848:	mov	r0, r4
    b84c:	bl	1c2c <Mat_uint16Swap>
    b850:	stm	sl, {r0, r5}
    b854:	subs	r7, r7, #1
    b858:	add	sl, sl, #8
    b85c:	add	r4, r4, #2
    b860:	bne	b848 <ReadUInt64Data+0x28c>
    b864:	b	d1c8 <ReadUInt64Data+0x1c0c>
    b868:	ldr	r0, [r4, #20]
    b86c:	cmp	r0, #0
    b870:	beq	be68 <ReadUInt64Data+0x8ac>
    b874:	cmp	r7, #256	; 0x100
    b878:	bgt	c280 <ReadUInt64Data+0xcc4>
    b87c:	ldr	r3, [r4]
    b880:	add	r4, sp, #120	; 0x78
    b884:	mov	r1, r6
    b888:	mov	r2, r7
    b88c:	mov	r0, r4
    b890:	bl	18b8 <fread@plt>
    b894:	mov	r9, r0
    b898:	cmp	r7, #1
    b89c:	blt	d1c8 <ReadUInt64Data+0x1c0c>
    b8a0:	mov	r0, r4
    b8a4:	bl	1bf0 <Mat_int32Swap>
    b8a8:	asr	r1, r0, #31
    b8ac:	subs	r7, r7, #1
    b8b0:	add	r4, r4, #4
    b8b4:	strd	r0, [sl]
    b8b8:	add	sl, sl, #8
    b8bc:	bne	b8a0 <ReadUInt64Data+0x2e4>
    b8c0:	b	d1c8 <ReadUInt64Data+0x1c0c>
    b8c4:	ldr	r0, [r4, #20]
    b8c8:	cmp	r0, #0
    b8cc:	beq	bf14 <ReadUInt64Data+0x958>
    b8d0:	cmp	r7, #256	; 0x100
    b8d4:	bgt	c36c <ReadUInt64Data+0xdb0>
    b8d8:	ldr	r3, [r4]
    b8dc:	add	r4, sp, #120	; 0x78
    b8e0:	mov	r1, r6
    b8e4:	mov	r2, r7
    b8e8:	mov	r0, r4
    b8ec:	bl	18b8 <fread@plt>
    b8f0:	mov	r9, r0
    b8f4:	cmp	r7, #1
    b8f8:	blt	d1c8 <ReadUInt64Data+0x1c0c>
    b8fc:	mov	r5, #0
    b900:	mov	r0, r4
    b904:	bl	1c04 <Mat_uint32Swap>
    b908:	stm	sl, {r0, r5}
    b90c:	subs	r7, r7, #1
    b910:	add	sl, sl, #8
    b914:	add	r4, r4, #4
    b918:	bne	b900 <ReadUInt64Data+0x344>
    b91c:	b	d1c8 <ReadUInt64Data+0x1c0c>
    b920:	ldr	r0, [r4, #20]
    b924:	cmp	r0, #0
    b928:	beq	bfc4 <ReadUInt64Data+0xa08>
    b92c:	cmp	r7, #256	; 0x100
    b930:	bgt	c460 <ReadUInt64Data+0xea4>
    b934:	ldr	r3, [r4]
    b938:	add	r4, sp, #120	; 0x78
    b93c:	mov	r1, r6
    b940:	mov	r2, r7
    b944:	mov	r0, r4
    b948:	bl	18b8 <fread@plt>
    b94c:	mov	r9, r0
    b950:	cmp	r7, #1
    b954:	blt	d1c8 <ReadUInt64Data+0x1c0c>
    b958:	mov	r0, r4
    b95c:	bl	1c44 <Mat_floatSwap>
    b960:	vmov	r0, s0
    b964:	bl	585b8 <__aeabi_f2ulz>
    b968:	strd	r0, [sl]
    b96c:	subs	r7, r7, #1
    b970:	add	sl, sl, #8
    b974:	add	r4, r4, #4
    b978:	bne	b958 <ReadUInt64Data+0x39c>
    b97c:	b	d1c8 <ReadUInt64Data+0x1c0c>
    b980:	ldr	r0, [r4, #20]
    b984:	cmp	r0, #0
    b988:	beq	c00c <ReadUInt64Data+0xa50>
    b98c:	cmp	r7, #256	; 0x100
    b990:	bgt	c554 <ReadUInt64Data+0xf98>
    b994:	ldr	r3, [r4]
    b998:	add	r4, sp, #120	; 0x78
    b99c:	mov	r1, r6
    b9a0:	mov	r2, r7
    b9a4:	mov	r0, r4
    b9a8:	bl	18b8 <fread@plt>
    b9ac:	mov	r9, r0
    b9b0:	cmp	r7, #1
    b9b4:	blt	d1c8 <ReadUInt64Data+0x1c0c>
    b9b8:	mov	r0, r4
    b9bc:	bl	1c88 <Mat_doubleSwap>
    b9c0:	vmov	r0, r1, d0
    b9c4:	bl	585f8 <__aeabi_d2ulz>
    b9c8:	strd	r0, [sl]
    b9cc:	subs	r7, r7, #1
    b9d0:	add	sl, sl, #8
    b9d4:	add	r4, r4, #8
    b9d8:	bne	b9b8 <ReadUInt64Data+0x3fc>
    b9dc:	b	d1c8 <ReadUInt64Data+0x1c0c>
    b9e0:	ldr	r0, [r4, #20]
    b9e4:	cmp	r0, #0
    b9e8:	beq	c05c <ReadUInt64Data+0xaa0>
    b9ec:	cmp	r7, #256	; 0x100
    b9f0:	bgt	c648 <ReadUInt64Data+0x108c>
    b9f4:	ldr	r3, [r4]
    b9f8:	add	r4, sp, #120	; 0x78
    b9fc:	mov	r1, r6
    ba00:	mov	r2, r7
    ba04:	mov	r0, r4
    ba08:	bl	18b8 <fread@plt>
    ba0c:	mov	r9, r0
    ba10:	cmp	r7, #1
    ba14:	blt	cf90 <ReadUInt64Data+0x19d4>
    ba18:	mov	r5, r7
    ba1c:	mov	r6, sl
    ba20:	mov	r0, r4
    ba24:	bl	1b84 <Mat_int64Swap>
    ba28:	strd	r0, [r6]
    ba2c:	subs	r5, r5, #1
    ba30:	add	r6, r6, #8
    ba34:	add	r4, r4, #8
    ba38:	bne	ba20 <ReadUInt64Data+0x464>
    ba3c:	b	cf8c <ReadUInt64Data+0x19d0>
    ba40:	sub	r1, r7, #256	; 0x100
    ba44:	str	r7, [sp, #4]
    ba48:	add	r0, sl, #2048	; 0x800
    ba4c:	mov	r2, #256	; 0x100
    ba50:	add	r4, sp, #120	; 0x78
    ba54:	add	r7, sp, #104	; 0x68
    ba58:	mov	r9, sl
    ba5c:	mov	r6, #0
    ba60:	str	r1, [sp, #8]
    ba64:	mov	r1, #0
    ba68:	mov	r8, r0
    ba6c:	ldr	r0, [sp, #20]
    ba70:	str	r1, [sp, #12]
    ba74:	ldr	r1, [sp, #16]
    ba78:	mov	r5, r2
    ba7c:	mov	r2, #256	; 0x100
    ba80:	ldr	r3, [r0]
    ba84:	mov	r0, r4
    ba88:	bl	18b8 <fread@plt>
    ba8c:	mov	r1, r9
    ba90:	mov	r2, #0
    ba94:	add	r3, r4, r2
    ba98:	add	r2, r2, #2
    ba9c:	ldrh	r3, [r3]
    baa0:	cmp	r2, #256	; 0x100
    baa4:	strh	r3, [sp, #104]	; 0x68
    baa8:	vld1.16	{d16[0]}, [r7 :16]
    baac:	vmovl.s8	q8, d16
    bab0:	vmovl.s16	q8, d16
    bab4:	vmovl.s32	q8, d16
    bab8:	vst1.64	{d16-d17}, [r1]!
    babc:	bne	ba94 <ReadUInt64Data+0x4d8>
    bac0:	mov	r1, r5
    bac4:	ldr	r3, [sp, #8]
    bac8:	add	r6, r0, r6
    bacc:	add	r9, r9, #2048	; 0x800
    bad0:	add	r0, r8, #2048	; 0x800
    bad4:	add	r2, r5, #256	; 0x100
    bad8:	ldr	r1, [sp, #12]
    badc:	add	r1, r1, #256	; 0x100
    bae0:	cmp	r1, r3
    bae4:	blt	ba68 <ReadUInt64Data+0x4ac>
    bae8:	ldr	r0, [sp, #4]
    baec:	cmp	r1, r0
    baf0:	bge	ca1c <ReadUInt64Data+0x1460>
    baf4:	sub	r4, r0, r1
    baf8:	ldr	r0, [sp, #20]
    bafc:	ldr	r1, [sp, #16]
    bb00:	add	r7, sp, #120	; 0x78
    bb04:	mov	r2, r4
    bb08:	ldr	r3, [r0]
    bb0c:	mov	r0, r7
    bb10:	bl	18b8 <fread@plt>
    bb14:	mov	r9, r6
    bb18:	cmp	r4, #1
    bb1c:	add	r9, r0, r6
    bb20:	blt	ca20 <ReadUInt64Data+0x1464>
    bb24:	ldr	r6, [sp, #16]
    bb28:	ldr	ip, [sp, #12]
    bb2c:	mov	r0, #0
    bb30:	beq	bb74 <ReadUInt64Data+0x5b8>
    bb34:	ldr	r0, [sp, #8]
    bb38:	add	r2, sp, #100	; 0x64
    bb3c:	sub	r0, r0, ip
    bb40:	bic	r1, r0, #1
    bb44:	bic	r0, r4, #1
    bb48:	ldrh	r3, [r7], #2
    bb4c:	subs	r1, r1, #2
    bb50:	strh	r3, [sp, #100]	; 0x64
    bb54:	vld1.16	{d16[0]}, [r2 :16]
    bb58:	vmovl.s8	q8, d16
    bb5c:	vmovl.s16	q8, d16
    bb60:	vmovl.s32	q8, d16
    bb64:	vst1.64	{d16-d17}, [r8]!
    bb68:	bne	bb48 <ReadUInt64Data+0x58c>
    bb6c:	cmp	r4, r0
    bb70:	beq	d1c8 <ReadUInt64Data+0x1c0c>
    bb74:	ldr	r3, [sp, #8]
    bb78:	add	r1, sp, #120	; 0x78
    bb7c:	add	r2, r0, r5
    bb80:	add	r1, r1, r0
    bb84:	add	r2, sl, r2, lsl #3
    bb88:	sub	r3, r3, ip
    bb8c:	sub	r0, r3, r0
    bb90:	ldrsb	r4, [r1], #1
    bb94:	subs	r0, r0, #1
    bb98:	asr	r5, r4, #31
    bb9c:	strd	r4, [r2]
    bba0:	add	r2, r2, #8
    bba4:	bne	bb90 <ReadUInt64Data+0x5d4>
    bba8:	b	d1c8 <ReadUInt64Data+0x1c0c>
    bbac:	sub	r1, r7, #256	; 0x100
    bbb0:	add	r0, sl, #2048	; 0x800
    bbb4:	mov	r2, #256	; 0x100
    bbb8:	add	r4, sp, #120	; 0x78
    bbbc:	add	r5, sp, #116	; 0x74
    bbc0:	mov	r9, sl
    bbc4:	mov	r6, #0
    bbc8:	str	r7, [sp, #4]
    bbcc:	str	r1, [sp, #8]
    bbd0:	mov	r1, #0
    bbd4:	mov	r7, r0
    bbd8:	ldr	r0, [sp, #20]
    bbdc:	str	r1, [sp, #12]
    bbe0:	ldr	r1, [sp, #16]
    bbe4:	mov	r8, r2
    bbe8:	mov	r2, #256	; 0x100
    bbec:	ldr	r3, [r0]
    bbf0:	mov	r0, r4
    bbf4:	bl	18b8 <fread@plt>
    bbf8:	mov	r1, r9
    bbfc:	mov	r2, #0
    bc00:	add	r3, r4, r2
    bc04:	add	r2, r2, #2
    bc08:	ldrh	r3, [r3]
    bc0c:	cmp	r2, #256	; 0x100
    bc10:	strh	r3, [sp, #116]	; 0x74
    bc14:	vld1.16	{d16[0]}, [r5 :16]
    bc18:	vmovl.u8	q8, d16
    bc1c:	vmovl.u16	q8, d16
    bc20:	vmovl.u32	q8, d16
    bc24:	vst1.64	{d16-d17}, [r1]!
    bc28:	bne	bc00 <ReadUInt64Data+0x644>
    bc2c:	mov	r1, r8
    bc30:	ldr	r3, [sp, #8]
    bc34:	add	r6, r0, r6
    bc38:	add	r9, r9, #2048	; 0x800
    bc3c:	add	r0, r7, #2048	; 0x800
    bc40:	add	r2, r8, #256	; 0x100
    bc44:	ldr	r1, [sp, #12]
    bc48:	add	r1, r1, #256	; 0x100
    bc4c:	cmp	r1, r3
    bc50:	blt	bbd4 <ReadUInt64Data+0x618>
    bc54:	ldr	r0, [sp, #4]
    bc58:	cmp	r1, r0
    bc5c:	bge	ca1c <ReadUInt64Data+0x1460>
    bc60:	sub	r5, r0, r1
    bc64:	ldr	r0, [sp, #20]
    bc68:	ldr	r1, [sp, #16]
    bc6c:	add	r4, sp, #120	; 0x78
    bc70:	mov	r2, r5
    bc74:	ldr	r3, [r0]
    bc78:	mov	r0, r4
    bc7c:	bl	18b8 <fread@plt>
    bc80:	mov	r9, r6
    bc84:	cmp	r5, #1
    bc88:	add	r9, r0, r6
    bc8c:	blt	ca20 <ReadUInt64Data+0x1464>
    bc90:	ldr	r6, [sp, #16]
    bc94:	ldr	ip, [sp, #12]
    bc98:	mov	r1, #0
    bc9c:	mov	r0, #0
    bca0:	beq	bce8 <ReadUInt64Data+0x72c>
    bca4:	ldr	r0, [sp, #8]
    bca8:	add	r3, sp, #112	; 0x70
    bcac:	sub	r0, r0, ip
    bcb0:	bic	r2, r0, #1
    bcb4:	bic	r0, r5, #1
    bcb8:	ldrh	r6, [r4], #2
    bcbc:	subs	r2, r2, #2
    bcc0:	strh	r6, [sp, #112]	; 0x70
    bcc4:	vld1.16	{d16[0]}, [r3 :16]
    bcc8:	vmovl.u8	q8, d16
    bccc:	vmovl.u16	q8, d16
    bcd0:	vmovl.u32	q8, d16
    bcd4:	vst1.64	{d16-d17}, [r7]!
    bcd8:	bne	bcb8 <ReadUInt64Data+0x6fc>
    bcdc:	ldr	r6, [sp, #16]
    bce0:	cmp	r5, r0
    bce4:	beq	d1c8 <ReadUInt64Data+0x1c0c>
    bce8:	ldr	r7, [sp, #8]
    bcec:	add	r2, sp, #120	; 0x78
    bcf0:	add	r3, r0, r8
    bcf4:	add	r2, r2, r0
    bcf8:	add	r3, sl, r3, lsl #3
    bcfc:	sub	r7, r7, ip
    bd00:	sub	r0, r7, r0
    bd04:	ldrb	r4, [r2], #1
    bd08:	subs	r0, r0, #1
    bd0c:	str	r4, [r3]
    bd10:	str	r1, [r3, #4]
    bd14:	add	r3, r3, #8
    bd18:	bne	bd04 <ReadUInt64Data+0x748>
    bd1c:	b	d1c8 <ReadUInt64Data+0x1c0c>
    bd20:	cmp	r7, #256	; 0x100
    bd24:	bgt	c754 <ReadUInt64Data+0x1198>
    bd28:	ldr	r3, [r4]
    bd2c:	add	r4, sp, #120	; 0x78
    bd30:	mov	r1, r6
    bd34:	mov	r2, r7
    bd38:	mov	r0, r4
    bd3c:	bl	18b8 <fread@plt>
    bd40:	mov	r9, r0
    bd44:	cmp	r7, #1
    bd48:	blt	d1c8 <ReadUInt64Data+0x1c0c>
    bd4c:	mov	r0, #0
    bd50:	beq	bd94 <ReadUInt64Data+0x7d8>
    bd54:	bic	r0, r7, #1
    bd58:	mov	r5, r7
    bd5c:	add	r1, sp, #72	; 0x48
    bd60:	mov	r3, sl
    bd64:	mov	r2, r0
    bd68:	ldr	r7, [r4], #4
    bd6c:	subs	r2, r2, #2
    bd70:	str	r7, [sp, #72]	; 0x48
    bd74:	vld1.32	{d16[0]}, [r1 :32]
    bd78:	vmovl.s16	q8, d16
    bd7c:	vmovl.s32	q8, d16
    bd80:	vst1.64	{d16-d17}, [r3]!
    bd84:	bne	bd68 <ReadUInt64Data+0x7ac>
    bd88:	mov	r7, r5
    bd8c:	cmp	r0, r5
    bd90:	beq	d1c8 <ReadUInt64Data+0x1c0c>
    bd94:	add	r3, sp, #120	; 0x78
    bd98:	sub	r1, r7, r0
    bd9c:	add	r2, sl, r0, lsl #3
    bda0:	add	r0, r3, r0, lsl #1
    bda4:	ldrsh	r4, [r0], #2
    bda8:	subs	r1, r1, #1
    bdac:	asr	r5, r4, #31
    bdb0:	strd	r4, [r2]
    bdb4:	add	r2, r2, #8
    bdb8:	bne	bda4 <ReadUInt64Data+0x7e8>
    bdbc:	b	d1c8 <ReadUInt64Data+0x1c0c>
    bdc0:	cmp	r7, #256	; 0x100
    bdc4:	bgt	c8b4 <ReadUInt64Data+0x12f8>
    bdc8:	ldr	r3, [r4]
    bdcc:	add	r4, sp, #120	; 0x78
    bdd0:	mov	r1, r6
    bdd4:	mov	r2, r7
    bdd8:	mov	r0, r4
    bddc:	bl	18b8 <fread@plt>
    bde0:	mov	r9, r0
    bde4:	cmp	r7, #1
    bde8:	blt	d1c8 <ReadUInt64Data+0x1c0c>
    bdec:	mov	r1, #0
    bdf0:	mov	r0, #0
    bdf4:	beq	be3c <ReadUInt64Data+0x880>
    bdf8:	bic	r0, r7, #1
    bdfc:	mov	r5, r7
    be00:	add	r2, sp, #84	; 0x54
    be04:	mov	r7, sl
    be08:	mov	r3, r0
    be0c:	ldr	r6, [r4], #4
    be10:	subs	r3, r3, #2
    be14:	str	r6, [sp, #84]	; 0x54
    be18:	vld1.32	{d16[0]}, [r2 :32]
    be1c:	vmovl.u16	q8, d16
    be20:	vmovl.u32	q8, d16
    be24:	vst1.64	{d16-d17}, [r7]!
    be28:	bne	be0c <ReadUInt64Data+0x850>
    be2c:	ldr	r6, [sp, #16]
    be30:	mov	r7, r5
    be34:	cmp	r0, r5
    be38:	beq	d1c8 <ReadUInt64Data+0x1c0c>
    be3c:	sub	r2, r7, r0
    be40:	add	r7, sp, #120	; 0x78
    be44:	add	r3, sl, r0, lsl #3
    be48:	add	r0, r7, r0, lsl #1
    be4c:	ldrh	r4, [r0], #2
    be50:	subs	r2, r2, #1
    be54:	str	r4, [r3]
    be58:	str	r1, [r3, #4]
    be5c:	add	r3, r3, #8
    be60:	bne	be4c <ReadUInt64Data+0x890>
    be64:	b	d1c8 <ReadUInt64Data+0x1c0c>
    be68:	cmp	r7, #256	; 0x100
    be6c:	bgt	ca28 <ReadUInt64Data+0x146c>
    be70:	ldr	r3, [r4]
    be74:	add	r4, sp, #120	; 0x78
    be78:	mov	r1, r6
    be7c:	mov	r2, r7
    be80:	mov	r0, r4
    be84:	bl	18b8 <fread@plt>
    be88:	mov	r9, r0
    be8c:	cmp	r7, #1
    be90:	blt	d1c8 <ReadUInt64Data+0x1c0c>
    be94:	mov	r0, #0
    be98:	beq	bee8 <ReadUInt64Data+0x92c>
    be9c:	bic	r0, r7, #1
    bea0:	mov	r5, r7
    bea4:	add	r1, sp, #24
    bea8:	mov	r3, sl
    beac:	mov	r2, r0
    beb0:	ldr	r7, [r4]
    beb4:	ldr	r6, [r4, #4]
    beb8:	subs	r2, r2, #2
    bebc:	add	r4, r4, #8
    bec0:	str	r6, [sp, #28]
    bec4:	str	r7, [sp, #24]
    bec8:	vld1.32	{d16}, [r1 :64]
    becc:	vmovl.s32	q8, d16
    bed0:	vst1.64	{d16-d17}, [r3]!
    bed4:	bne	beb0 <ReadUInt64Data+0x8f4>
    bed8:	ldr	r6, [sp, #16]
    bedc:	mov	r7, r5
    bee0:	cmp	r0, r5
    bee4:	beq	d1c8 <ReadUInt64Data+0x1c0c>
    bee8:	add	r3, sp, #120	; 0x78
    beec:	sub	r1, r7, r0
    bef0:	add	r2, sl, r0, lsl #3
    bef4:	add	r0, r3, r0, lsl #2
    bef8:	ldr	r4, [r0], #4
    befc:	subs	r1, r1, #1
    bf00:	asr	r5, r4, #31
    bf04:	strd	r4, [r2]
    bf08:	add	r2, r2, #8
    bf0c:	bne	bef8 <ReadUInt64Data+0x93c>
    bf10:	b	d1c8 <ReadUInt64Data+0x1c0c>
    bf14:	cmp	r7, #256	; 0x100
    bf18:	bgt	cb94 <ReadUInt64Data+0x15d8>
    bf1c:	ldr	r3, [r4]
    bf20:	add	r4, sp, #120	; 0x78
    bf24:	mov	r1, r6
    bf28:	mov	r2, r7
    bf2c:	mov	r0, r4
    bf30:	bl	18b8 <fread@plt>
    bf34:	mov	r9, r0
    bf38:	cmp	r7, #1
    bf3c:	blt	d1c8 <ReadUInt64Data+0x1c0c>
    bf40:	mov	r1, #0
    bf44:	mov	r0, #0
    bf48:	beq	bf98 <ReadUInt64Data+0x9dc>
    bf4c:	bic	r0, r7, #1
    bf50:	mov	ip, r7
    bf54:	add	r2, sp, #48	; 0x30
    bf58:	mov	r7, sl
    bf5c:	mov	r3, r0
    bf60:	ldr	r6, [r4]
    bf64:	ldr	r5, [r4, #4]
    bf68:	subs	r3, r3, #2
    bf6c:	add	r4, r4, #8
    bf70:	str	r5, [sp, #52]	; 0x34
    bf74:	str	r6, [sp, #48]	; 0x30
    bf78:	vld1.32	{d16}, [r2 :64]
    bf7c:	vmovl.u32	q8, d16
    bf80:	vst1.64	{d16-d17}, [r7]!
    bf84:	bne	bf60 <ReadUInt64Data+0x9a4>
    bf88:	ldr	r6, [sp, #16]
    bf8c:	mov	r7, ip
    bf90:	cmp	r0, ip
    bf94:	beq	d1c8 <ReadUInt64Data+0x1c0c>
    bf98:	sub	r2, r7, r0
    bf9c:	add	r7, sp, #120	; 0x78
    bfa0:	add	r3, sl, r0, lsl #3
    bfa4:	add	r0, r7, r0, lsl #2
    bfa8:	ldr	r4, [r0], #4
    bfac:	subs	r2, r2, #1
    bfb0:	str	r4, [r3]
    bfb4:	str	r1, [r3, #4]
    bfb8:	add	r3, r3, #8
    bfbc:	bne	bfa8 <ReadUInt64Data+0x9ec>
    bfc0:	b	d1c8 <ReadUInt64Data+0x1c0c>
    bfc4:	cmp	r7, #256	; 0x100
    bfc8:	bgt	cd08 <ReadUInt64Data+0x174c>
    bfcc:	ldr	r3, [r4]
    bfd0:	add	r4, sp, #120	; 0x78
    bfd4:	mov	r1, r6
    bfd8:	mov	r2, r7
    bfdc:	mov	r0, r4
    bfe0:	bl	18b8 <fread@plt>
    bfe4:	mov	r9, r0
    bfe8:	cmp	r7, #1
    bfec:	blt	d1c8 <ReadUInt64Data+0x1c0c>
    bff0:	ldr	r0, [r4], #4
    bff4:	bl	585b8 <__aeabi_f2ulz>
    bff8:	strd	r0, [sl]
    bffc:	subs	r7, r7, #1
    c000:	add	sl, sl, #8
    c004:	bne	bff0 <ReadUInt64Data+0xa34>
    c008:	b	d1c8 <ReadUInt64Data+0x1c0c>
    c00c:	cmp	r7, #256	; 0x100
    c010:	bgt	cde4 <ReadUInt64Data+0x1828>
    c014:	ldr	r3, [r4]
    c018:	add	r4, sp, #120	; 0x78
    c01c:	mov	r1, r6
    c020:	mov	r2, r7
    c024:	mov	r0, r4
    c028:	bl	18b8 <fread@plt>
    c02c:	mov	r9, r0
    c030:	cmp	r7, #1
    c034:	blt	d1c8 <ReadUInt64Data+0x1c0c>
    c038:	vldr	d16, [r4]
    c03c:	vmov	r0, r1, d16
    c040:	bl	585f8 <__aeabi_d2ulz>
    c044:	strd	r0, [sl]
    c048:	subs	r7, r7, #1
    c04c:	add	sl, sl, #8
    c050:	add	r4, r4, #8
    c054:	bne	c038 <ReadUInt64Data+0xa7c>
    c058:	b	d1c8 <ReadUInt64Data+0x1c0c>
    c05c:	cmp	r7, #256	; 0x100
    c060:	bgt	ced4 <ReadUInt64Data+0x1918>
    c064:	ldr	r3, [r4]
    c068:	add	r0, sp, #120	; 0x78
    c06c:	mov	r1, r6
    c070:	mov	r2, r7
    c074:	bl	18b8 <fread@plt>
    c078:	mov	r9, r0
    c07c:	cmp	r7, #1
    c080:	blt	cfac <ReadUInt64Data+0x19f0>
    c084:	lsl	r2, r7, #3
    c088:	add	r1, sp, #120	; 0x78
    c08c:	mov	r0, sl
    c090:	bl	181c <memcpy@plt>
    c094:	cmp	r8, #13
    c098:	beq	cfb4 <ReadUInt64Data+0x19f8>
    c09c:	b	d1c8 <ReadUInt64Data+0x1c0c>
    c0a0:	sub	r0, r7, #256	; 0x100
    c0a4:	add	r1, sl, #2048	; 0x800
    c0a8:	mov	r9, #0
    c0ac:	str	r7, [sp, #4]
    c0b0:	str	r0, [sp, #12]
    c0b4:	mov	r0, #0
    c0b8:	ldr	r3, [r4]
    c0bc:	add	r4, sp, #120	; 0x78
    c0c0:	mov	r8, r0
    c0c4:	mov	r5, r1
    c0c8:	mov	r1, r6
    c0cc:	mov	r2, #256	; 0x100
    c0d0:	mov	r0, r4
    c0d4:	bl	18b8 <fread@plt>
    c0d8:	mov	r7, r0
    c0dc:	mov	r6, #0
    c0e0:	mov	r0, r4
    c0e4:	bl	1c18 <Mat_int16Swap>
    c0e8:	mov	r1, sl
    c0ec:	add	r4, r4, #2
    c0f0:	str	r0, [r1, r6]!
    c0f4:	add	r6, r6, #8
    c0f8:	asr	r0, r0, #31
    c0fc:	cmp	r6, #2048	; 0x800
    c100:	str	r0, [r1, #4]
    c104:	bne	c0e0 <ReadUInt64Data+0xb24>
    c108:	ldr	r2, [sp, #12]
    c10c:	ldr	r6, [sp, #16]
    c110:	ldr	r4, [sp, #20]
    c114:	add	r0, r8, #256	; 0x100
    c118:	add	r9, r7, r9
    c11c:	add	sl, sl, #2048	; 0x800
    c120:	add	r1, r5, #2048	; 0x800
    c124:	cmp	r0, r2
    c128:	blt	c0b8 <ReadUInt64Data+0xafc>
    c12c:	ldr	r2, [sp, #4]
    c130:	cmp	r0, r2
    c134:	bge	d1c8 <ReadUInt64Data+0x1c0c>
    c138:	ldr	r3, [r4]
    c13c:	mov	r1, r6
    c140:	sub	r6, r2, r0
    c144:	add	r4, sp, #120	; 0x78
    c148:	mov	r0, r4
    c14c:	mov	r2, r6
    c150:	bl	18b8 <fread@plt>
    c154:	add	r9, r0, r9
    c158:	cmp	r6, #1
    c15c:	blt	ca20 <ReadUInt64Data+0x1464>
    c160:	ldr	r0, [sp, #12]
    c164:	sub	r6, r0, r8
    c168:	mov	r0, r4
    c16c:	bl	1c18 <Mat_int16Swap>
    c170:	asr	r1, r0, #31
    c174:	subs	r6, r6, #1
    c178:	add	r4, r4, #2
    c17c:	strd	r0, [r5]
    c180:	add	r5, r5, #8
    c184:	bne	c168 <ReadUInt64Data+0xbac>
    c188:	b	ca20 <ReadUInt64Data+0x1464>
    c18c:	sub	r1, r7, #256	; 0x100
    c190:	add	r0, sl, #2048	; 0x800
    c194:	mov	r9, #0
    c198:	mov	r2, #0
    c19c:	mov	r8, #0
    c1a0:	str	r7, [sp, #4]
    c1a4:	str	r1, [sp, #8]
    c1a8:	ldr	r3, [r4]
    c1ac:	add	r4, sp, #120	; 0x78
    c1b0:	str	r2, [sp, #12]
    c1b4:	mov	r5, r0
    c1b8:	mov	r1, r6
    c1bc:	mov	r2, #256	; 0x100
    c1c0:	mov	r0, r4
    c1c4:	bl	18b8 <fread@plt>
    c1c8:	mov	r7, r0
    c1cc:	mov	r6, #0
    c1d0:	mov	r0, r4
    c1d4:	bl	1c2c <Mat_uint16Swap>
    c1d8:	mov	r1, sl
    c1dc:	add	r4, r4, #2
    c1e0:	str	r0, [r1, r6]!
    c1e4:	add	r6, r6, #8
    c1e8:	cmp	r6, #2048	; 0x800
    c1ec:	str	r9, [r1, #4]
    c1f0:	bne	c1d0 <ReadUInt64Data+0xc14>
    c1f4:	add	r8, r7, r8
    c1f8:	ldr	r7, [sp, #12]
    c1fc:	ldr	r1, [sp, #8]
    c200:	ldr	r6, [sp, #16]
    c204:	ldr	r4, [sp, #20]
    c208:	add	sl, sl, #2048	; 0x800
    c20c:	add	r0, r5, #2048	; 0x800
    c210:	add	r2, r7, #256	; 0x100
    c214:	cmp	r2, r1
    c218:	blt	c1a8 <ReadUInt64Data+0xbec>
    c21c:	ldr	r0, [sp, #4]
    c220:	cmp	r2, r0
    c224:	bge	c74c <ReadUInt64Data+0x1190>
    c228:	ldr	r3, [r4]
    c22c:	mov	r1, r6
    c230:	sub	r6, r0, r2
    c234:	add	r4, sp, #120	; 0x78
    c238:	mov	r0, r4
    c23c:	mov	r2, r6
    c240:	bl	18b8 <fread@plt>
    c244:	mov	r9, r8
    c248:	cmp	r6, #1
    c24c:	add	r9, r0, r8
    c250:	blt	ca20 <ReadUInt64Data+0x1464>
    c254:	ldr	r0, [sp, #8]
    c258:	sub	r6, r0, r7
    c25c:	mov	r7, #0
    c260:	mov	r0, r4
    c264:	bl	1c2c <Mat_uint16Swap>
    c268:	stm	r5, {r0, r7}
    c26c:	add	r5, r5, #8
    c270:	subs	r6, r6, #1
    c274:	add	r4, r4, #2
    c278:	bne	c260 <ReadUInt64Data+0xca4>
    c27c:	b	ca20 <ReadUInt64Data+0x1464>
    c280:	sub	r0, r7, #256	; 0x100
    c284:	add	r1, sl, #2048	; 0x800
    c288:	mov	r9, #0
    c28c:	str	r7, [sp, #4]
    c290:	str	r0, [sp, #12]
    c294:	mov	r0, #0
    c298:	ldr	r3, [r4]
    c29c:	add	r4, sp, #120	; 0x78
    c2a0:	mov	r8, r0
    c2a4:	mov	r5, r1
    c2a8:	mov	r1, r6
    c2ac:	mov	r2, #256	; 0x100
    c2b0:	mov	r0, r4
    c2b4:	bl	18b8 <fread@plt>
    c2b8:	mov	r7, r0
    c2bc:	mov	r6, #0
    c2c0:	mov	r0, r4
    c2c4:	bl	1bf0 <Mat_int32Swap>
    c2c8:	mov	r1, sl
    c2cc:	add	r4, r4, #4
    c2d0:	str	r0, [r1, r6]!
    c2d4:	add	r6, r6, #8
    c2d8:	asr	r0, r0, #31
    c2dc:	cmp	r6, #2048	; 0x800
    c2e0:	str	r0, [r1, #4]
    c2e4:	bne	c2c0 <ReadUInt64Data+0xd04>
    c2e8:	ldr	r2, [sp, #12]
    c2ec:	ldr	r6, [sp, #16]
    c2f0:	ldr	r4, [sp, #20]
    c2f4:	add	r0, r8, #256	; 0x100
    c2f8:	add	r9, r7, r9
    c2fc:	add	sl, sl, #2048	; 0x800
    c300:	add	r1, r5, #2048	; 0x800
    c304:	cmp	r0, r2
    c308:	blt	c298 <ReadUInt64Data+0xcdc>
    c30c:	ldr	r2, [sp, #4]
    c310:	cmp	r0, r2
    c314:	bge	d1c8 <ReadUInt64Data+0x1c0c>
    c318:	ldr	r3, [r4]
    c31c:	mov	r1, r6
    c320:	sub	r6, r2, r0
    c324:	add	r4, sp, #120	; 0x78
    c328:	mov	r0, r4
    c32c:	mov	r2, r6
    c330:	bl	18b8 <fread@plt>
    c334:	add	r9, r0, r9
    c338:	cmp	r6, #1
    c33c:	blt	ca20 <ReadUInt64Data+0x1464>
    c340:	ldr	r0, [sp, #12]
    c344:	sub	r6, r0, r8
    c348:	mov	r0, r4
    c34c:	bl	1bf0 <Mat_int32Swap>
    c350:	asr	r1, r0, #31
    c354:	subs	r6, r6, #1
    c358:	add	r4, r4, #4
    c35c:	strd	r0, [r5]
    c360:	add	r5, r5, #8
    c364:	bne	c348 <ReadUInt64Data+0xd8c>
    c368:	b	ca20 <ReadUInt64Data+0x1464>
    c36c:	sub	r1, r7, #256	; 0x100
    c370:	add	r0, sl, #2048	; 0x800
    c374:	mov	r9, #0
    c378:	mov	r2, #0
    c37c:	mov	r8, #0
    c380:	str	r7, [sp, #4]
    c384:	str	r1, [sp, #8]
    c388:	ldr	r3, [r4]
    c38c:	add	r4, sp, #120	; 0x78
    c390:	str	r2, [sp, #12]
    c394:	mov	r5, r0
    c398:	mov	r1, r6
    c39c:	mov	r2, #256	; 0x100
    c3a0:	mov	r0, r4
    c3a4:	bl	18b8 <fread@plt>
    c3a8:	mov	r7, r0
    c3ac:	mov	r6, #0
    c3b0:	mov	r0, r4
    c3b4:	bl	1c04 <Mat_uint32Swap>
    c3b8:	mov	r1, sl
    c3bc:	add	r4, r4, #4
    c3c0:	str	r0, [r1, r6]!
    c3c4:	add	r6, r6, #8
    c3c8:	cmp	r6, #2048	; 0x800
    c3cc:	str	r9, [r1, #4]
    c3d0:	bne	c3b0 <ReadUInt64Data+0xdf4>
    c3d4:	add	r8, r7, r8
    c3d8:	ldr	r7, [sp, #12]
    c3dc:	ldr	r1, [sp, #8]
    c3e0:	ldr	r6, [sp, #16]
    c3e4:	ldr	r4, [sp, #20]
    c3e8:	add	sl, sl, #2048	; 0x800
    c3ec:	add	r0, r5, #2048	; 0x800
    c3f0:	add	r2, r7, #256	; 0x100
    c3f4:	cmp	r2, r1
    c3f8:	blt	c388 <ReadUInt64Data+0xdcc>
    c3fc:	ldr	r0, [sp, #4]
    c400:	cmp	r2, r0
    c404:	bge	c74c <ReadUInt64Data+0x1190>
    c408:	ldr	r3, [r4]
    c40c:	mov	r1, r6
    c410:	sub	r6, r0, r2
    c414:	add	r4, sp, #120	; 0x78
    c418:	mov	r0, r4
    c41c:	mov	r2, r6
    c420:	bl	18b8 <fread@plt>
    c424:	mov	r9, r8
    c428:	cmp	r6, #1
    c42c:	add	r9, r0, r8
    c430:	blt	ca20 <ReadUInt64Data+0x1464>
    c434:	ldr	r0, [sp, #8]
    c438:	sub	r6, r0, r7
    c43c:	mov	r7, #0
    c440:	mov	r0, r4
    c444:	bl	1c04 <Mat_uint32Swap>
    c448:	stm	r5, {r0, r7}
    c44c:	add	r5, r5, #8
    c450:	subs	r6, r6, #1
    c454:	add	r4, r4, #4
    c458:	bne	c440 <ReadUInt64Data+0xe84>
    c45c:	b	ca20 <ReadUInt64Data+0x1464>
    c460:	sub	r0, r7, #256	; 0x100
    c464:	add	r1, sl, #2048	; 0x800
    c468:	mov	r9, #0
    c46c:	str	r7, [sp, #4]
    c470:	str	r0, [sp, #12]
    c474:	mov	r0, #0
    c478:	ldr	r3, [r4]
    c47c:	add	r7, sp, #120	; 0x78
    c480:	mov	r8, r0
    c484:	mov	r5, r1
    c488:	mov	r1, r6
    c48c:	mov	r2, #256	; 0x100
    c490:	mov	r0, r7
    c494:	bl	18b8 <fread@plt>
    c498:	mov	r4, r0
    c49c:	mov	r6, #0
    c4a0:	mov	r0, r7
    c4a4:	bl	1c44 <Mat_floatSwap>
    c4a8:	vmov	r0, s0
    c4ac:	bl	585b8 <__aeabi_f2ulz>
    c4b0:	mov	r2, sl
    c4b4:	add	r7, r7, #4
    c4b8:	str	r0, [r2, r6]!
    c4bc:	add	r6, r6, #8
    c4c0:	cmp	r6, #2048	; 0x800
    c4c4:	str	r1, [r2, #4]
    c4c8:	bne	c4a0 <ReadUInt64Data+0xee4>
    c4cc:	ldr	r2, [sp, #12]
    c4d0:	add	r9, r4, r9
    c4d4:	ldr	r6, [sp, #16]
    c4d8:	ldr	r4, [sp, #20]
    c4dc:	add	r0, r8, #256	; 0x100
    c4e0:	add	sl, sl, #2048	; 0x800
    c4e4:	add	r1, r5, #2048	; 0x800
    c4e8:	cmp	r0, r2
    c4ec:	blt	c478 <ReadUInt64Data+0xebc>
    c4f0:	ldr	r2, [sp, #4]
    c4f4:	cmp	r0, r2
    c4f8:	bge	d1c8 <ReadUInt64Data+0x1c0c>
    c4fc:	ldr	r3, [r4]
    c500:	mov	r1, r6
    c504:	sub	r6, r2, r0
    c508:	add	r4, sp, #120	; 0x78
    c50c:	mov	r0, r4
    c510:	mov	r2, r6
    c514:	bl	18b8 <fread@plt>
    c518:	add	r9, r0, r9
    c51c:	cmp	r6, #1
    c520:	blt	ca20 <ReadUInt64Data+0x1464>
    c524:	ldr	r0, [sp, #12]
    c528:	sub	r6, r0, r8
    c52c:	mov	r0, r4
    c530:	bl	1c44 <Mat_floatSwap>
    c534:	vmov	r0, s0
    c538:	bl	585b8 <__aeabi_f2ulz>
    c53c:	strd	r0, [r5]
    c540:	add	r5, r5, #8
    c544:	subs	r6, r6, #1
    c548:	add	r4, r4, #4
    c54c:	bne	c52c <ReadUInt64Data+0xf70>
    c550:	b	ca20 <ReadUInt64Data+0x1464>
    c554:	sub	r0, r7, #256	; 0x100
    c558:	add	r1, sl, #2048	; 0x800
    c55c:	add	r4, sp, #120	; 0x78
    c560:	mov	r9, #0
    c564:	str	r7, [sp, #4]
    c568:	str	r0, [sp, #12]
    c56c:	mov	r0, #0
    c570:	mov	r8, r0
    c574:	ldr	r0, [sp, #20]
    c578:	mov	r5, r1
    c57c:	mov	r1, r6
    c580:	mov	r2, #256	; 0x100
    c584:	ldr	r3, [r0]
    c588:	mov	r0, r4
    c58c:	bl	18b8 <fread@plt>
    c590:	mov	r7, r0
    c594:	mov	r6, #0
    c598:	add	r0, r4, r6
    c59c:	bl	1c88 <Mat_doubleSwap>
    c5a0:	vmov	r0, r1, d0
    c5a4:	bl	585f8 <__aeabi_d2ulz>
    c5a8:	mov	r2, sl
    c5ac:	str	r0, [r2, r6]!
    c5b0:	add	r6, r6, #8
    c5b4:	cmp	r6, #2048	; 0x800
    c5b8:	str	r1, [r2, #4]
    c5bc:	bne	c598 <ReadUInt64Data+0xfdc>
    c5c0:	ldr	r2, [sp, #12]
    c5c4:	ldr	r6, [sp, #16]
    c5c8:	add	r0, r8, #256	; 0x100
    c5cc:	add	r9, r7, r9
    c5d0:	add	sl, sl, #2048	; 0x800
    c5d4:	add	r1, r5, #2048	; 0x800
    c5d8:	cmp	r0, r2
    c5dc:	blt	c570 <ReadUInt64Data+0xfb4>
    c5e0:	ldr	r2, [sp, #4]
    c5e4:	cmp	r0, r2
    c5e8:	bge	d1c8 <ReadUInt64Data+0x1c0c>
    c5ec:	mov	r1, r6
    c5f0:	sub	r6, r2, r0
    c5f4:	ldr	r0, [sp, #20]
    c5f8:	add	r4, sp, #120	; 0x78
    c5fc:	mov	r2, r6
    c600:	ldr	r3, [r0]
    c604:	mov	r0, r4
    c608:	bl	18b8 <fread@plt>
    c60c:	add	r9, r0, r9
    c610:	cmp	r6, #1
    c614:	blt	ca20 <ReadUInt64Data+0x1464>
    c618:	ldr	r0, [sp, #12]
    c61c:	sub	r6, r0, r8
    c620:	mov	r0, r4
    c624:	bl	1c88 <Mat_doubleSwap>
    c628:	vmov	r0, r1, d0
    c62c:	bl	585f8 <__aeabi_d2ulz>
    c630:	strd	r0, [r5]
    c634:	add	r5, r5, #8
    c638:	subs	r6, r6, #1
    c63c:	add	r4, r4, #8
    c640:	bne	c620 <ReadUInt64Data+0x1064>
    c644:	b	ca20 <ReadUInt64Data+0x1464>
    c648:	sub	r0, r7, #256	; 0x100
    c64c:	add	r1, sl, #2048	; 0x800
    c650:	add	r4, sp, #120	; 0x78
    c654:	mov	r6, sl
    c658:	mov	r9, #0
    c65c:	str	r8, [sp]
    c660:	str	r7, [sp, #4]
    c664:	str	r0, [sp, #8]
    c668:	mov	r0, #0
    c66c:	str	r0, [sp, #12]
    c670:	ldr	r0, [sp, #20]
    c674:	mov	r5, r1
    c678:	ldr	r1, [sp, #16]
    c67c:	mov	r2, #256	; 0x100
    c680:	mov	r8, r9
    c684:	ldr	r3, [r0]
    c688:	mov	r0, r4
    c68c:	bl	18b8 <fread@plt>
    c690:	mov	r7, r0
    c694:	mov	r9, #0
    c698:	add	r0, r4, r9
    c69c:	bl	1b84 <Mat_int64Swap>
    c6a0:	mov	r2, r6
    c6a4:	str	r0, [r2, r9]!
    c6a8:	add	r9, r9, #8
    c6ac:	cmp	r9, #2048	; 0x800
    c6b0:	str	r1, [r2, #4]
    c6b4:	bne	c698 <ReadUInt64Data+0x10dc>
    c6b8:	ldr	r0, [sp, #12]
    c6bc:	ldr	r2, [sp, #8]
    c6c0:	mov	r9, r8
    c6c4:	add	r6, r6, #2048	; 0x800
    c6c8:	add	r1, r5, #2048	; 0x800
    c6cc:	add	r9, r7, r8
    c6d0:	add	r0, r0, #256	; 0x100
    c6d4:	cmp	r0, r2
    c6d8:	blt	c66c <ReadUInt64Data+0x10b0>
    c6dc:	ldr	r7, [sp, #4]
    c6e0:	cmp	r0, r7
    c6e4:	bge	cfa0 <ReadUInt64Data+0x19e4>
    c6e8:	sub	r7, r7, r0
    c6ec:	ldr	r0, [sp, #20]
    c6f0:	ldr	r6, [sp, #16]
    c6f4:	add	r4, sp, #120	; 0x78
    c6f8:	mov	r2, r7
    c6fc:	ldr	r3, [r0]
    c700:	mov	r0, r4
    c704:	mov	r1, r6
    c708:	bl	18b8 <fread@plt>
    c70c:	ldr	r8, [sp]
    c710:	add	r9, r0, r9
    c714:	cmp	r7, #1
    c718:	blt	cf84 <ReadUInt64Data+0x19c8>
    c71c:	ldr	r0, [sp, #8]
    c720:	ldr	r1, [sp, #12]
    c724:	sub	r6, r0, r1
    c728:	mov	r0, r4
    c72c:	bl	1b84 <Mat_int64Swap>
    c730:	strd	r0, [r5]
    c734:	add	r5, r5, #8
    c738:	subs	r6, r6, #1
    c73c:	add	r4, r4, #8
    c740:	bne	c728 <ReadUInt64Data+0x116c>
    c744:	ldr	r6, [sp, #16]
    c748:	b	cf84 <ReadUInt64Data+0x19c8>
    c74c:	mov	r9, r8
    c750:	b	d1c8 <ReadUInt64Data+0x1c0c>
    c754:	sub	r1, r7, #256	; 0x100
    c758:	add	r0, sl, #2048	; 0x800
    c75c:	mov	r2, #256	; 0x100
    c760:	add	r4, sp, #120	; 0x78
    c764:	add	r9, sp, #80	; 0x50
    c768:	mov	r5, sl
    c76c:	mov	r6, #0
    c770:	str	r7, [sp, #4]
    c774:	str	r1, [sp, #8]
    c778:	mov	r1, #0
    c77c:	mov	r8, r0
    c780:	ldr	r0, [sp, #20]
    c784:	str	r1, [sp, #12]
    c788:	ldr	r1, [sp, #16]
    c78c:	mov	r7, r2
    c790:	mov	r2, #256	; 0x100
    c794:	ldr	r3, [r0]
    c798:	mov	r0, r4
    c79c:	bl	18b8 <fread@plt>
    c7a0:	mov	r1, r5
    c7a4:	mov	r2, #0
    c7a8:	ldr	r3, [r4, r2]
    c7ac:	add	r2, r2, #4
    c7b0:	cmp	r2, #512	; 0x200
    c7b4:	str	r3, [sp, #80]	; 0x50
    c7b8:	vld1.32	{d16[0]}, [r9 :32]
    c7bc:	vmovl.s16	q8, d16
    c7c0:	vmovl.s32	q8, d16
    c7c4:	vst1.64	{d16-d17}, [r1]!
    c7c8:	bne	c7a8 <ReadUInt64Data+0x11ec>
    c7cc:	mov	r1, r7
    c7d0:	ldr	r3, [sp, #8]
    c7d4:	add	r6, r0, r6
    c7d8:	add	r5, r5, #2048	; 0x800
    c7dc:	add	r0, r8, #2048	; 0x800
    c7e0:	add	r2, r7, #256	; 0x100
    c7e4:	ldr	r1, [sp, #12]
    c7e8:	add	r1, r1, #256	; 0x100
    c7ec:	cmp	r1, r3
    c7f0:	blt	c77c <ReadUInt64Data+0x11c0>
    c7f4:	ldr	r0, [sp, #4]
    c7f8:	cmp	r1, r0
    c7fc:	bge	ca1c <ReadUInt64Data+0x1460>
    c800:	sub	r5, r0, r1
    c804:	ldr	r0, [sp, #20]
    c808:	ldr	r1, [sp, #16]
    c80c:	add	r4, sp, #120	; 0x78
    c810:	mov	r2, r5
    c814:	ldr	r3, [r0]
    c818:	mov	r0, r4
    c81c:	bl	18b8 <fread@plt>
    c820:	mov	r9, r6
    c824:	cmp	r5, #1
    c828:	add	r9, r0, r6
    c82c:	blt	ca20 <ReadUInt64Data+0x1464>
    c830:	ldr	r6, [sp, #16]
    c834:	ldr	ip, [sp, #12]
    c838:	mov	r0, #0
    c83c:	beq	c87c <ReadUInt64Data+0x12c0>
    c840:	ldr	r0, [sp, #8]
    c844:	add	r2, sp, #76	; 0x4c
    c848:	sub	r0, r0, ip
    c84c:	bic	r1, r0, #1
    c850:	bic	r0, r5, #1
    c854:	ldr	r3, [r4], #4
    c858:	subs	r1, r1, #2
    c85c:	str	r3, [sp, #76]	; 0x4c
    c860:	vld1.32	{d16[0]}, [r2 :32]
    c864:	vmovl.s16	q8, d16
    c868:	vmovl.s32	q8, d16
    c86c:	vst1.64	{d16-d17}, [r8]!
    c870:	bne	c854 <ReadUInt64Data+0x1298>
    c874:	cmp	r5, r0
    c878:	beq	d1c8 <ReadUInt64Data+0x1c0c>
    c87c:	ldr	r3, [sp, #8]
    c880:	add	r1, sp, #120	; 0x78
    c884:	add	r2, r0, r7
    c888:	add	r1, r1, r0, lsl #1
    c88c:	add	r2, sl, r2, lsl #3
    c890:	sub	r3, r3, ip
    c894:	sub	r0, r3, r0
    c898:	ldrsh	r4, [r1], #2
    c89c:	subs	r0, r0, #1
    c8a0:	asr	r5, r4, #31
    c8a4:	strd	r4, [r2]
    c8a8:	add	r2, r2, #8
    c8ac:	bne	c898 <ReadUInt64Data+0x12dc>
    c8b0:	b	d1c8 <ReadUInt64Data+0x1c0c>
    c8b4:	sub	r1, r7, #256	; 0x100
    c8b8:	add	r0, sl, #2048	; 0x800
    c8bc:	mov	r2, #256	; 0x100
    c8c0:	add	r4, sp, #120	; 0x78
    c8c4:	add	r9, sp, #92	; 0x5c
    c8c8:	mov	r5, sl
    c8cc:	mov	r6, #0
    c8d0:	str	r7, [sp, #4]
    c8d4:	str	r1, [sp, #8]
    c8d8:	mov	r1, #0
    c8dc:	mov	r8, r0
    c8e0:	ldr	r0, [sp, #20]
    c8e4:	str	r1, [sp, #12]
    c8e8:	ldr	r1, [sp, #16]
    c8ec:	mov	r7, r2
    c8f0:	mov	r2, #256	; 0x100
    c8f4:	ldr	r3, [r0]
    c8f8:	mov	r0, r4
    c8fc:	bl	18b8 <fread@plt>
    c900:	mov	r1, r5
    c904:	mov	r2, #0
    c908:	ldr	r3, [r4, r2]
    c90c:	add	r2, r2, #4
    c910:	cmp	r2, #512	; 0x200
    c914:	str	r3, [sp, #92]	; 0x5c
    c918:	vld1.32	{d16[0]}, [r9 :32]
    c91c:	vmovl.u16	q8, d16
    c920:	vmovl.u32	q8, d16
    c924:	vst1.64	{d16-d17}, [r1]!
    c928:	bne	c908 <ReadUInt64Data+0x134c>
    c92c:	mov	r1, r7
    c930:	ldr	r3, [sp, #8]
    c934:	add	r6, r0, r6
    c938:	add	r5, r5, #2048	; 0x800
    c93c:	add	r0, r8, #2048	; 0x800
    c940:	add	r2, r7, #256	; 0x100
    c944:	ldr	r1, [sp, #12]
    c948:	add	r1, r1, #256	; 0x100
    c94c:	cmp	r1, r3
    c950:	blt	c8dc <ReadUInt64Data+0x1320>
    c954:	ldr	r0, [sp, #4]
    c958:	cmp	r1, r0
    c95c:	bge	ca1c <ReadUInt64Data+0x1460>
    c960:	sub	r5, r0, r1
    c964:	ldr	r0, [sp, #20]
    c968:	ldr	r1, [sp, #16]
    c96c:	add	r4, sp, #120	; 0x78
    c970:	mov	r2, r5
    c974:	ldr	r3, [r0]
    c978:	mov	r0, r4
    c97c:	bl	18b8 <fread@plt>
    c980:	mov	r9, r6
    c984:	cmp	r5, #1
    c988:	add	r9, r0, r6
    c98c:	blt	ca20 <ReadUInt64Data+0x1464>
    c990:	ldr	r6, [sp, #16]
    c994:	ldr	ip, [sp, #12]
    c998:	mov	r1, #0
    c99c:	mov	r0, #0
    c9a0:	beq	c9e4 <ReadUInt64Data+0x1428>
    c9a4:	ldr	r0, [sp, #8]
    c9a8:	add	r3, sp, #88	; 0x58
    c9ac:	sub	r0, r0, ip
    c9b0:	bic	r2, r0, #1
    c9b4:	bic	r0, r5, #1
    c9b8:	ldr	r6, [r4], #4
    c9bc:	subs	r2, r2, #2
    c9c0:	str	r6, [sp, #88]	; 0x58
    c9c4:	vld1.32	{d16[0]}, [r3 :32]
    c9c8:	vmovl.u16	q8, d16
    c9cc:	vmovl.u32	q8, d16
    c9d0:	vst1.64	{d16-d17}, [r8]!
    c9d4:	bne	c9b8 <ReadUInt64Data+0x13fc>
    c9d8:	ldr	r6, [sp, #16]
    c9dc:	cmp	r5, r0
    c9e0:	beq	d1c8 <ReadUInt64Data+0x1c0c>
    c9e4:	add	r3, r0, r7
    c9e8:	ldr	r7, [sp, #8]
    c9ec:	add	r2, sp, #120	; 0x78
    c9f0:	add	r2, r2, r0, lsl #1
    c9f4:	add	r3, sl, r3, lsl #3
    c9f8:	sub	r7, r7, ip
    c9fc:	sub	r0, r7, r0
    ca00:	ldrh	r4, [r2], #2
    ca04:	subs	r0, r0, #1
    ca08:	str	r4, [r3]
    ca0c:	str	r1, [r3, #4]
    ca10:	add	r3, r3, #8
    ca14:	bne	ca00 <ReadUInt64Data+0x1444>
    ca18:	b	d1c8 <ReadUInt64Data+0x1c0c>
    ca1c:	mov	r9, r6
    ca20:	ldr	r6, [sp, #16]
    ca24:	b	d1c8 <ReadUInt64Data+0x1c0c>
    ca28:	sub	r1, r7, #256	; 0x100
    ca2c:	str	r7, [sp, #4]
    ca30:	add	r0, sl, #2048	; 0x800
    ca34:	mov	r2, #256	; 0x100
    ca38:	add	r4, sp, #120	; 0x78
    ca3c:	add	r7, sp, #40	; 0x28
    ca40:	mov	r8, sl
    ca44:	mov	r9, #0
    ca48:	str	r1, [sp]
    ca4c:	mov	r1, #0
    ca50:	mov	r5, r0
    ca54:	ldr	r0, [sp, #20]
    ca58:	str	r1, [sp, #12]
    ca5c:	str	r2, [sp, #8]
    ca60:	mov	r1, r6
    ca64:	mov	r2, #256	; 0x100
    ca68:	ldr	r3, [r0]
    ca6c:	mov	r0, r4
    ca70:	bl	18b8 <fread@plt>
    ca74:	mov	r1, r8
    ca78:	mov	r2, #0
    ca7c:	ldr	r3, [r4, r2]
    ca80:	str	r3, [sp, #40]	; 0x28
    ca84:	add	r3, r4, r2
    ca88:	add	r2, r2, #8
    ca8c:	ldr	r3, [r3, #4]
    ca90:	cmp	r2, #1024	; 0x400
    ca94:	str	r3, [sp, #44]	; 0x2c
    ca98:	vld1.32	{d16}, [r7 :64]
    ca9c:	vmovl.s32	q8, d16
    caa0:	vst1.64	{d16-d17}, [r1]!
    caa4:	bne	ca7c <ReadUInt64Data+0x14c0>
    caa8:	ldr	r1, [sp, #8]
    caac:	ldr	r3, [sp]
    cab0:	add	r9, r0, r9
    cab4:	add	r8, r8, #2048	; 0x800
    cab8:	add	r0, r5, #2048	; 0x800
    cabc:	add	r2, r1, #256	; 0x100
    cac0:	ldr	r1, [sp, #12]
    cac4:	add	r1, r1, #256	; 0x100
    cac8:	cmp	r1, r3
    cacc:	blt	ca50 <ReadUInt64Data+0x1494>
    cad0:	ldr	r0, [sp, #4]
    cad4:	cmp	r1, r0
    cad8:	bge	d1c8 <ReadUInt64Data+0x1c0c>
    cadc:	sub	r4, r0, r1
    cae0:	ldr	r0, [sp, #20]
    cae4:	add	r7, sp, #120	; 0x78
    cae8:	mov	r1, r6
    caec:	mov	r2, r4
    caf0:	ldr	r3, [r0]
    caf4:	mov	r0, r7
    caf8:	bl	18b8 <fread@plt>
    cafc:	add	r9, r0, r9
    cb00:	cmp	r4, #1
    cb04:	blt	d1c8 <ReadUInt64Data+0x1c0c>
    cb08:	ldr	ip, [sp, #12]
    cb0c:	mov	r0, #0
    cb10:	beq	cb58 <ReadUInt64Data+0x159c>
    cb14:	ldr	r0, [sp]
    cb18:	add	r2, sp, #32
    cb1c:	sub	r0, r0, ip
    cb20:	bic	r1, r0, #1
    cb24:	bic	r0, r4, #1
    cb28:	ldm	r7, {r3, r6}
    cb2c:	subs	r1, r1, #2
    cb30:	add	r7, r7, #8
    cb34:	str	r6, [sp, #36]	; 0x24
    cb38:	str	r3, [sp, #32]
    cb3c:	vld1.32	{d16}, [r2 :64]
    cb40:	vmovl.s32	q8, d16
    cb44:	vst1.64	{d16-d17}, [r5]!
    cb48:	bne	cb28 <ReadUInt64Data+0x156c>
    cb4c:	ldr	r6, [sp, #16]
    cb50:	cmp	r4, r0
    cb54:	beq	d1c8 <ReadUInt64Data+0x1c0c>
    cb58:	ldr	r2, [sp, #8]
    cb5c:	ldr	r3, [sp]
    cb60:	add	r1, sp, #120	; 0x78
    cb64:	add	r1, r1, r0, lsl #2
    cb68:	add	r2, r0, r2
    cb6c:	sub	r3, r3, ip
    cb70:	add	r2, sl, r2, lsl #3
    cb74:	sub	r0, r3, r0
    cb78:	ldr	r4, [r1], #4
    cb7c:	subs	r0, r0, #1
    cb80:	asr	r5, r4, #31
    cb84:	strd	r4, [r2]
    cb88:	add	r2, r2, #8
    cb8c:	bne	cb78 <ReadUInt64Data+0x15bc>
    cb90:	b	d1c8 <ReadUInt64Data+0x1c0c>
    cb94:	sub	r1, r7, #256	; 0x100
    cb98:	str	r7, [sp, #4]
    cb9c:	add	r0, sl, #2048	; 0x800
    cba0:	mov	r2, #256	; 0x100
    cba4:	add	r4, sp, #120	; 0x78
    cba8:	add	r7, sp, #64	; 0x40
    cbac:	mov	r8, sl
    cbb0:	mov	r9, #0
    cbb4:	str	r1, [sp]
    cbb8:	mov	r1, #0
    cbbc:	mov	r5, r0
    cbc0:	ldr	r0, [sp, #20]
    cbc4:	str	r1, [sp, #12]
    cbc8:	str	r2, [sp, #8]
    cbcc:	mov	r1, r6
    cbd0:	mov	r2, #256	; 0x100
    cbd4:	ldr	r3, [r0]
    cbd8:	mov	r0, r4
    cbdc:	bl	18b8 <fread@plt>
    cbe0:	mov	r1, r8
    cbe4:	mov	r2, #0
    cbe8:	ldr	r3, [r4, r2]
    cbec:	str	r3, [sp, #64]	; 0x40
    cbf0:	add	r3, r4, r2
    cbf4:	add	r2, r2, #8
    cbf8:	ldr	r3, [r3, #4]
    cbfc:	cmp	r2, #1024	; 0x400
    cc00:	str	r3, [sp, #68]	; 0x44
    cc04:	vld1.32	{d16}, [r7 :64]
    cc08:	vmovl.u32	q8, d16
    cc0c:	vst1.64	{d16-d17}, [r1]!
    cc10:	bne	cbe8 <ReadUInt64Data+0x162c>
    cc14:	ldr	r1, [sp, #8]
    cc18:	ldr	r3, [sp]
    cc1c:	add	r9, r0, r9
    cc20:	add	r8, r8, #2048	; 0x800
    cc24:	add	r0, r5, #2048	; 0x800
    cc28:	add	r2, r1, #256	; 0x100
    cc2c:	ldr	r1, [sp, #12]
    cc30:	add	r1, r1, #256	; 0x100
    cc34:	cmp	r1, r3
    cc38:	blt	cbbc <ReadUInt64Data+0x1600>
    cc3c:	ldr	r0, [sp, #4]
    cc40:	cmp	r1, r0
    cc44:	bge	d1c8 <ReadUInt64Data+0x1c0c>
    cc48:	sub	r4, r0, r1
    cc4c:	ldr	r0, [sp, #20]
    cc50:	add	r7, sp, #120	; 0x78
    cc54:	mov	r1, r6
    cc58:	mov	r2, r4
    cc5c:	ldr	r3, [r0]
    cc60:	mov	r0, r7
    cc64:	bl	18b8 <fread@plt>
    cc68:	add	r9, r0, r9
    cc6c:	cmp	r4, #1
    cc70:	blt	d1c8 <ReadUInt64Data+0x1c0c>
    cc74:	ldr	lr, [sp, #12]
    cc78:	mov	r1, #0
    cc7c:	mov	ip, #0
    cc80:	beq	cccc <ReadUInt64Data+0x1710>
    cc84:	ldr	r0, [sp]
    cc88:	bic	ip, r4, #1
    cc8c:	add	r3, sp, #56	; 0x38
    cc90:	sub	r0, r0, lr
    cc94:	bic	r2, r0, #1
    cc98:	ldr	r6, [r7]
    cc9c:	ldr	r0, [r7, #4]
    cca0:	subs	r2, r2, #2
    cca4:	add	r7, r7, #8
    cca8:	str	r0, [sp, #60]	; 0x3c
    ccac:	str	r6, [sp, #56]	; 0x38
    ccb0:	vld1.32	{d16}, [r3 :64]
    ccb4:	vmovl.u32	q8, d16
    ccb8:	vst1.64	{d16-d17}, [r5]!
    ccbc:	bne	cc98 <ReadUInt64Data+0x16dc>
    ccc0:	ldr	r6, [sp, #16]
    ccc4:	cmp	r4, ip
    ccc8:	beq	d1c8 <ReadUInt64Data+0x1c0c>
    cccc:	add	r0, sp, #120	; 0x78
    ccd0:	add	r2, r0, ip, lsl #2
    ccd4:	ldr	r0, [sp, #8]
    ccd8:	add	r0, ip, r0
    ccdc:	add	r3, sl, r0, lsl #3
    cce0:	ldr	r0, [sp]
    cce4:	sub	r0, r0, lr
    cce8:	sub	r0, r0, ip
    ccec:	ldr	r4, [r2], #4
    ccf0:	subs	r0, r0, #1
    ccf4:	str	r4, [r3]
    ccf8:	str	r1, [r3, #4]
    ccfc:	add	r3, r3, #8
    cd00:	bne	ccec <ReadUInt64Data+0x1730>
    cd04:	b	d1c8 <ReadUInt64Data+0x1c0c>
    cd08:	sub	r0, r7, #256	; 0x100
    cd0c:	add	r1, sl, #2048	; 0x800
    cd10:	mov	r9, #0
    cd14:	str	r7, [sp, #4]
    cd18:	str	r0, [sp, #12]
    cd1c:	mov	r0, #0
    cd20:	ldr	r3, [r4]
    cd24:	add	r4, sp, #120	; 0x78
    cd28:	mov	r8, r0
    cd2c:	mov	r5, r1
    cd30:	mov	r1, r6
    cd34:	mov	r2, #256	; 0x100
    cd38:	mov	r0, r4
    cd3c:	bl	18b8 <fread@plt>
    cd40:	mov	r7, r0
    cd44:	mov	r6, #0
    cd48:	ldr	r0, [r4], #4
    cd4c:	bl	585b8 <__aeabi_f2ulz>
    cd50:	mov	r2, sl
    cd54:	str	r0, [r2, r6]!
    cd58:	add	r6, r6, #8
    cd5c:	cmp	r6, #2048	; 0x800
    cd60:	str	r1, [r2, #4]
    cd64:	bne	cd48 <ReadUInt64Data+0x178c>
    cd68:	ldr	r2, [sp, #12]
    cd6c:	ldr	r6, [sp, #16]
    cd70:	ldr	r4, [sp, #20]
    cd74:	add	r0, r8, #256	; 0x100
    cd78:	add	r9, r7, r9
    cd7c:	add	sl, sl, #2048	; 0x800
    cd80:	add	r1, r5, #2048	; 0x800
    cd84:	cmp	r0, r2
    cd88:	blt	cd20 <ReadUInt64Data+0x1764>
    cd8c:	ldr	r2, [sp, #4]
    cd90:	cmp	r0, r2
    cd94:	bge	d1c8 <ReadUInt64Data+0x1c0c>
    cd98:	ldr	r3, [r4]
    cd9c:	mov	r1, r6
    cda0:	sub	r6, r2, r0
    cda4:	add	r4, sp, #120	; 0x78
    cda8:	mov	r0, r4
    cdac:	mov	r2, r6
    cdb0:	bl	18b8 <fread@plt>
    cdb4:	add	r9, r0, r9
    cdb8:	cmp	r6, #1
    cdbc:	blt	ca20 <ReadUInt64Data+0x1464>
    cdc0:	ldr	r0, [sp, #12]
    cdc4:	sub	r6, r0, r8
    cdc8:	ldr	r0, [r4], #4
    cdcc:	bl	585b8 <__aeabi_f2ulz>
    cdd0:	strd	r0, [r5]
    cdd4:	add	r5, r5, #8
    cdd8:	subs	r6, r6, #1
    cddc:	bne	cdc8 <ReadUInt64Data+0x180c>
    cde0:	b	ca20 <ReadUInt64Data+0x1464>
    cde4:	sub	r0, r7, #256	; 0x100
    cde8:	add	r1, sl, #2048	; 0x800
    cdec:	add	r4, sp, #120	; 0x78
    cdf0:	mov	r9, #0
    cdf4:	str	r7, [sp, #4]
    cdf8:	str	r0, [sp, #12]
    cdfc:	mov	r0, #0
    ce00:	mov	r8, r0
    ce04:	ldr	r0, [sp, #20]
    ce08:	mov	r5, r1
    ce0c:	mov	r1, r6
    ce10:	mov	r2, #256	; 0x100
    ce14:	ldr	r3, [r0]
    ce18:	mov	r0, r4
    ce1c:	bl	18b8 <fread@plt>
    ce20:	mov	r7, r0
    ce24:	mov	r6, #0
    ce28:	add	r0, r4, r6
    ce2c:	vldr	d16, [r0]
    ce30:	vmov	r0, r1, d16
    ce34:	bl	585f8 <__aeabi_d2ulz>
    ce38:	mov	r2, sl
    ce3c:	str	r0, [r2, r6]!
    ce40:	add	r6, r6, #8
    ce44:	cmp	r6, #2048	; 0x800
    ce48:	str	r1, [r2, #4]
    ce4c:	bne	ce28 <ReadUInt64Data+0x186c>
    ce50:	ldr	r2, [sp, #12]
    ce54:	ldr	r6, [sp, #16]
    ce58:	add	r0, r8, #256	; 0x100
    ce5c:	add	r9, r7, r9
    ce60:	add	sl, sl, #2048	; 0x800
    ce64:	add	r1, r5, #2048	; 0x800
    ce68:	cmp	r0, r2
    ce6c:	blt	ce00 <ReadUInt64Data+0x1844>
    ce70:	ldr	r2, [sp, #4]
    ce74:	cmp	r0, r2
    ce78:	bge	d1c8 <ReadUInt64Data+0x1c0c>
    ce7c:	mov	r1, r6
    ce80:	sub	r6, r2, r0
    ce84:	ldr	r0, [sp, #20]
    ce88:	add	r4, sp, #120	; 0x78
    ce8c:	mov	r2, r6
    ce90:	ldr	r3, [r0]
    ce94:	mov	r0, r4
    ce98:	bl	18b8 <fread@plt>
    ce9c:	add	r9, r0, r9
    cea0:	cmp	r6, #1
    cea4:	blt	ca20 <ReadUInt64Data+0x1464>
    cea8:	ldr	r0, [sp, #12]
    ceac:	sub	r6, r0, r8
    ceb0:	vldr	d16, [r4]
    ceb4:	vmov	r0, r1, d16
    ceb8:	bl	585f8 <__aeabi_d2ulz>
    cebc:	strd	r0, [r5]
    cec0:	add	r5, r5, #8
    cec4:	subs	r6, r6, #1
    cec8:	add	r4, r4, #8
    cecc:	bne	ceb0 <ReadUInt64Data+0x18f4>
    ced0:	b	ca20 <ReadUInt64Data+0x1464>
    ced4:	sub	r0, r7, #256	; 0x100
    ced8:	lsl	r4, r7, #3
    cedc:	mov	r5, #0
    cee0:	mov	r9, #0
    cee4:	str	r8, [sp]
    cee8:	str	r7, [sp, #4]
    ceec:	str	r0, [sp, #12]
    cef0:	ldr	r0, [sp, #20]
    cef4:	add	r8, sp, #120	; 0x78
    cef8:	mov	r1, r6
    cefc:	mov	r2, #256	; 0x100
    cf00:	ldr	r3, [r0]
    cf04:	mov	r0, r8
    cf08:	bl	18b8 <fread@plt>
    cf0c:	mov	r7, r0
    cf10:	add	r0, sl, r5, lsl #3
    cf14:	mov	r1, r8
    cf18:	mov	r2, #2048	; 0x800
    cf1c:	bl	181c <memcpy@plt>
    cf20:	ldr	r0, [sp, #12]
    cf24:	add	r5, r5, #256	; 0x100
    cf28:	add	r9, r7, r9
    cf2c:	sub	r4, r4, #2048	; 0x800
    cf30:	cmp	r5, r0
    cf34:	blt	cef0 <ReadUInt64Data+0x1934>
    cf38:	ldr	r7, [sp, #4]
    cf3c:	ldr	r8, [sp]
    cf40:	cmp	r5, r7
    cf44:	bge	cf8c <ReadUInt64Data+0x19d0>
    cf48:	ldr	r0, [sp, #20]
    cf4c:	ldr	r6, [sp, #16]
    cf50:	sub	r7, r7, r5
    cf54:	mov	r2, r7
    cf58:	ldr	r3, [r0]
    cf5c:	add	r0, sp, #120	; 0x78
    cf60:	mov	r1, r6
    cf64:	bl	18b8 <fread@plt>
    cf68:	add	r9, r0, r9
    cf6c:	cmp	r7, #1
    cf70:	blt	cf84 <ReadUInt64Data+0x19c8>
    cf74:	add	r0, sl, r5, lsl #3
    cf78:	add	r1, sp, #120	; 0x78
    cf7c:	mov	r2, r4
    cf80:	bl	181c <memcpy@plt>
    cf84:	ldr	r7, [sp, #4]
    cf88:	b	cf90 <ReadUInt64Data+0x19d4>
    cf8c:	ldr	r6, [sp, #16]
    cf90:	ldr	r4, [sp, #20]
    cf94:	cmp	r8, #13
    cf98:	beq	cfb4 <ReadUInt64Data+0x19f8>
    cf9c:	b	d1c8 <ReadUInt64Data+0x1c0c>
    cfa0:	ldr	r6, [sp, #16]
    cfa4:	ldr	r4, [sp, #20]
    cfa8:	ldr	r8, [sp]
    cfac:	cmp	r8, #13
    cfb0:	bne	d1c8 <ReadUInt64Data+0x1c0c>
    cfb4:	ldr	r0, [r4, #20]
    cfb8:	cmp	r0, #0
    cfbc:	beq	d00c <ReadUInt64Data+0x1a50>
    cfc0:	cmp	r7, #256	; 0x100
    cfc4:	bgt	d044 <ReadUInt64Data+0x1a88>
    cfc8:	ldr	r3, [r4]
    cfcc:	add	r4, sp, #120	; 0x78
    cfd0:	mov	r1, r6
    cfd4:	mov	r2, r7
    cfd8:	mov	r0, r4
    cfdc:	bl	18b8 <fread@plt>
    cfe0:	add	r9, r0, r9
    cfe4:	cmp	r7, #1
    cfe8:	blt	d1c8 <ReadUInt64Data+0x1c0c>
    cfec:	mov	r0, r4
    cff0:	bl	1bd4 <Mat_uint64Swap>
    cff4:	strd	r0, [sl]
    cff8:	subs	r7, r7, #1
    cffc:	add	sl, sl, #8
    d000:	add	r4, r4, #8
    d004:	bne	cfec <ReadUInt64Data+0x1a30>
    d008:	b	d1c8 <ReadUInt64Data+0x1c0c>
    d00c:	cmp	r7, #256	; 0x100
    d010:	bgt	d124 <ReadUInt64Data+0x1b68>
    d014:	ldr	r3, [r4]
    d018:	add	r0, sp, #120	; 0x78
    d01c:	mov	r1, r6
    d020:	mov	r2, r7
    d024:	bl	18b8 <fread@plt>
    d028:	add	r9, r0, r9
    d02c:	cmp	r7, #1
    d030:	blt	d1c8 <ReadUInt64Data+0x1c0c>
    d034:	lsl	r2, r7, #3
    d038:	add	r1, sp, #120	; 0x78
    d03c:	mov	r0, sl
    d040:	b	d1c4 <ReadUInt64Data+0x1c08>
    d044:	sub	r0, r7, #256	; 0x100
    d048:	add	r1, sl, #2048	; 0x800
    d04c:	add	r4, sp, #120	; 0x78
    d050:	str	r7, [sp, #4]
    d054:	str	r0, [sp, #12]
    d058:	mov	r0, #0
    d05c:	mov	r8, r0
    d060:	ldr	r0, [sp, #20]
    d064:	mov	r5, r1
    d068:	mov	r1, r6
    d06c:	mov	r2, #256	; 0x100
    d070:	ldr	r3, [r0]
    d074:	mov	r0, r4
    d078:	bl	18b8 <fread@plt>
    d07c:	mov	r7, r0
    d080:	mov	r6, #0
    d084:	add	r0, r4, r6
    d088:	bl	1bd4 <Mat_uint64Swap>
    d08c:	mov	r2, sl
    d090:	str	r0, [r2, r6]!
    d094:	add	r6, r6, #8
    d098:	cmp	r6, #2048	; 0x800
    d09c:	str	r1, [r2, #4]
    d0a0:	bne	d084 <ReadUInt64Data+0x1ac8>
    d0a4:	ldr	r2, [sp, #12]
    d0a8:	ldr	r6, [sp, #16]
    d0ac:	add	r0, r8, #256	; 0x100
    d0b0:	add	r9, r7, r9
    d0b4:	add	sl, sl, #2048	; 0x800
    d0b8:	add	r1, r5, #2048	; 0x800
    d0bc:	cmp	r0, r2
    d0c0:	blt	d05c <ReadUInt64Data+0x1aa0>
    d0c4:	ldr	r2, [sp, #4]
    d0c8:	cmp	r0, r2
    d0cc:	bge	d1c8 <ReadUInt64Data+0x1c0c>
    d0d0:	mov	r1, r6
    d0d4:	sub	r6, r2, r0
    d0d8:	ldr	r0, [sp, #20]
    d0dc:	add	r4, sp, #120	; 0x78
    d0e0:	mov	r2, r6
    d0e4:	ldr	r3, [r0]
    d0e8:	mov	r0, r4
    d0ec:	bl	18b8 <fread@plt>
    d0f0:	add	r9, r0, r9
    d0f4:	cmp	r6, #1
    d0f8:	blt	ca20 <ReadUInt64Data+0x1464>
    d0fc:	ldr	r0, [sp, #12]
    d100:	sub	r6, r0, r8
    d104:	mov	r0, r4
    d108:	bl	1bd4 <Mat_uint64Swap>
    d10c:	strd	r0, [r5]
    d110:	add	r5, r5, #8
    d114:	subs	r6, r6, #1
    d118:	add	r4, r4, #8
    d11c:	bne	d104 <ReadUInt64Data+0x1b48>
    d120:	b	ca20 <ReadUInt64Data+0x1464>
    d124:	sub	r0, r7, #256	; 0x100
    d128:	lsl	r4, r7, #3
    d12c:	mov	r5, #0
    d130:	add	r8, sp, #120	; 0x78
    d134:	str	r7, [sp, #4]
    d138:	str	r0, [sp, #12]
    d13c:	ldr	r0, [sp, #20]
    d140:	mov	r1, r6
    d144:	mov	r2, #256	; 0x100
    d148:	ldr	r3, [r0]
    d14c:	mov	r0, r8
    d150:	bl	18b8 <fread@plt>
    d154:	mov	r7, r0
    d158:	add	r0, sl, r5, lsl #3
    d15c:	mov	r1, r8
    d160:	mov	r2, #2048	; 0x800
    d164:	bl	181c <memcpy@plt>
    d168:	ldr	r0, [sp, #12]
    d16c:	add	r5, r5, #256	; 0x100
    d170:	add	r9, r7, r9
    d174:	sub	r4, r4, #2048	; 0x800
    d178:	cmp	r5, r0
    d17c:	blt	d13c <ReadUInt64Data+0x1b80>
    d180:	ldr	r0, [sp, #4]
    d184:	cmp	r5, r0
    d188:	bge	ca20 <ReadUInt64Data+0x1464>
    d18c:	sub	r7, r0, r5
    d190:	ldr	r0, [sp, #20]
    d194:	ldr	r6, [sp, #16]
    d198:	mov	r2, r7
    d19c:	ldr	r3, [r0]
    d1a0:	add	r0, sp, #120	; 0x78
    d1a4:	mov	r1, r6
    d1a8:	bl	18b8 <fread@plt>
    d1ac:	add	r9, r0, r9
    d1b0:	cmp	r7, #1
    d1b4:	blt	d1c8 <ReadUInt64Data+0x1c0c>
    d1b8:	add	r0, sl, r5, lsl #3
    d1bc:	add	r1, sp, #120	; 0x78
    d1c0:	mov	r2, r4
    d1c4:	bl	181c <memcpy@plt>
    d1c8:	mul	r0, r9, r6
    d1cc:	sub	sp, fp, #28
    d1d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d1d4 <ReadCompressedUInt64Data>:
    d1d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d1d8:	add	fp, sp, #28
    d1dc:	sub	sp, sp, #12
    d1e0:	mov	r7, r0
    d1e4:	mov	r0, #0
    d1e8:	cmp	r1, #0
    d1ec:	beq	d200 <ReadCompressedUInt64Data+0x2c>
    d1f0:	cmp	r7, #0
    d1f4:	movne	r5, r2
    d1f8:	cmpne	r2, #0
    d1fc:	bne	d208 <ReadCompressedUInt64Data+0x34>
    d200:	sub	sp, fp, #28
    d204:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d208:	ldr	sl, [fp, #8]
    d20c:	mov	r0, r3
    d210:	mov	r4, r3
    d214:	mov	r6, r1
    d218:	bl	1924 <Mat_SizeOf@plt>
    d21c:	mov	r9, r0
    d220:	sub	r0, r4, #1
    d224:	cmp	r0, #12
    d228:	bhi	d66c <ReadCompressedUInt64Data+0x498>
    d22c:	add	r1, pc, #4
    d230:	ldr	r0, [r1, r0, lsl #2]
    d234:	add	pc, r1, r0
    d238:	.word	0x00000034
    d23c:	.word	0x00000074
    d240:	.word	0x000000b4
    d244:	.word	0x00000104
    d248:	.word	0x00000154
    d24c:	.word	0x000001a4
    d250:	.word	0x000001f4
    d254:	.word	0x00000434
    d258:	.word	0x00000248
    d25c:	.word	0x00000434
    d260:	.word	0x00000434
    d264:	.word	0x0000029c
    d268:	.word	0x000002e8
    d26c:	cmp	sl, #1
    d270:	blt	d66c <ReadCompressedUInt64Data+0x498>
    d274:	mov	r8, sp
    d278:	mov	r4, sl
    d27c:	mov	r0, r7
    d280:	mov	r1, r6
    d284:	mov	r2, r8
    d288:	mov	r3, r9
    d28c:	bl	32b8 <InflateData>
    d290:	ldrsb	r0, [sp]
    d294:	subs	r4, r4, #1
    d298:	asr	r1, r0, #31
    d29c:	strd	r0, [r5]
    d2a0:	add	r5, r5, #8
    d2a4:	bne	d27c <ReadCompressedUInt64Data+0xa8>
    d2a8:	b	d66c <ReadCompressedUInt64Data+0x498>
    d2ac:	cmp	sl, #1
    d2b0:	blt	d668 <ReadCompressedUInt64Data+0x494>
    d2b4:	ldr	r4, [fp, #8]
    d2b8:	mov	r8, sp
    d2bc:	mov	sl, #0
    d2c0:	mov	r0, r7
    d2c4:	mov	r1, r6
    d2c8:	mov	r2, r8
    d2cc:	mov	r3, r9
    d2d0:	bl	32b8 <InflateData>
    d2d4:	ldrb	r0, [sp]
    d2d8:	subs	r4, r4, #1
    d2dc:	stm	r5, {r0, sl}
    d2e0:	add	r5, r5, #8
    d2e4:	bne	d2c0 <ReadCompressedUInt64Data+0xec>
    d2e8:	b	d668 <ReadCompressedUInt64Data+0x494>
    d2ec:	ldr	r0, [r7, #20]
    d2f0:	cmp	r0, #0
    d2f4:	beq	d56c <ReadCompressedUInt64Data+0x398>
    d2f8:	cmp	sl, #1
    d2fc:	blt	d66c <ReadCompressedUInt64Data+0x498>
    d300:	mov	r8, sp
    d304:	mov	r4, sl
    d308:	mov	r0, r7
    d30c:	mov	r1, r6
    d310:	mov	r2, r8
    d314:	mov	r3, r9
    d318:	bl	32b8 <InflateData>
    d31c:	mov	r0, r8
    d320:	bl	1c18 <Mat_int16Swap>
    d324:	asr	r1, r0, #31
    d328:	subs	r4, r4, #1
    d32c:	strd	r0, [r5]
    d330:	add	r5, r5, #8
    d334:	bne	d308 <ReadCompressedUInt64Data+0x134>
    d338:	b	d66c <ReadCompressedUInt64Data+0x498>
    d33c:	ldr	r0, [r7, #20]
    d340:	cmp	r0, #0
    d344:	beq	d5ac <ReadCompressedUInt64Data+0x3d8>
    d348:	cmp	sl, #1
    d34c:	blt	d668 <ReadCompressedUInt64Data+0x494>
    d350:	ldr	r4, [fp, #8]
    d354:	mov	r8, sp
    d358:	mov	sl, #0
    d35c:	mov	r0, r7
    d360:	mov	r1, r6
    d364:	mov	r2, r8
    d368:	mov	r3, r9
    d36c:	bl	32b8 <InflateData>
    d370:	mov	r0, r8
    d374:	bl	1c2c <Mat_uint16Swap>
    d378:	stm	r5, {r0, sl}
    d37c:	subs	r4, r4, #1
    d380:	add	r5, r5, #8
    d384:	bne	d35c <ReadCompressedUInt64Data+0x188>
    d388:	b	d668 <ReadCompressedUInt64Data+0x494>
    d38c:	ldr	r0, [r7, #20]
    d390:	cmp	r0, #0
    d394:	beq	d5ec <ReadCompressedUInt64Data+0x418>
    d398:	cmp	sl, #1
    d39c:	blt	d66c <ReadCompressedUInt64Data+0x498>
    d3a0:	mov	r8, sp
    d3a4:	mov	r4, sl
    d3a8:	mov	r0, r7
    d3ac:	mov	r1, r6
    d3b0:	mov	r2, r8
    d3b4:	mov	r3, r9
    d3b8:	bl	32b8 <InflateData>
    d3bc:	mov	r0, r8
    d3c0:	bl	1bf0 <Mat_int32Swap>
    d3c4:	asr	r1, r0, #31
    d3c8:	subs	r4, r4, #1
    d3cc:	strd	r0, [r5]
    d3d0:	add	r5, r5, #8
    d3d4:	bne	d3a8 <ReadCompressedUInt64Data+0x1d4>
    d3d8:	b	d66c <ReadCompressedUInt64Data+0x498>
    d3dc:	ldr	r0, [r7, #20]
    d3e0:	cmp	r0, #0
    d3e4:	beq	d62c <ReadCompressedUInt64Data+0x458>
    d3e8:	cmp	sl, #1
    d3ec:	blt	d668 <ReadCompressedUInt64Data+0x494>
    d3f0:	ldr	sl, [fp, #8]
    d3f4:	mov	r8, sp
    d3f8:	mov	r4, #0
    d3fc:	mov	r0, r7
    d400:	mov	r1, r6
    d404:	mov	r2, r8
    d408:	mov	r3, r9
    d40c:	bl	32b8 <InflateData>
    d410:	mov	r0, r8
    d414:	bl	1c04 <Mat_uint32Swap>
    d418:	stm	r5, {r0, r4}
    d41c:	subs	sl, sl, #1
    d420:	add	r5, r5, #8
    d424:	bne	d3fc <ReadCompressedUInt64Data+0x228>
    d428:	b	d668 <ReadCompressedUInt64Data+0x494>
    d42c:	ldr	r0, [r7, #20]
    d430:	cmp	r0, #0
    d434:	beq	d678 <ReadCompressedUInt64Data+0x4a4>
    d438:	cmp	sl, #1
    d43c:	blt	d66c <ReadCompressedUInt64Data+0x498>
    d440:	mov	r8, sp
    d444:	mov	r4, sl
    d448:	mov	r0, r7
    d44c:	mov	r1, r6
    d450:	mov	r2, r8
    d454:	mov	r3, r9
    d458:	bl	32b8 <InflateData>
    d45c:	mov	r0, r8
    d460:	bl	1c44 <Mat_floatSwap>
    d464:	vmov	r0, s0
    d468:	bl	585b8 <__aeabi_f2ulz>
    d46c:	strd	r0, [r5]
    d470:	subs	r4, r4, #1
    d474:	add	r5, r5, #8
    d478:	bne	d448 <ReadCompressedUInt64Data+0x274>
    d47c:	b	d66c <ReadCompressedUInt64Data+0x498>
    d480:	ldr	r0, [r7, #20]
    d484:	cmp	r0, #0
    d488:	beq	d6b8 <ReadCompressedUInt64Data+0x4e4>
    d48c:	cmp	sl, #1
    d490:	blt	d66c <ReadCompressedUInt64Data+0x498>
    d494:	mov	r8, sp
    d498:	mov	r4, sl
    d49c:	mov	r0, r7
    d4a0:	mov	r1, r6
    d4a4:	mov	r2, r8
    d4a8:	mov	r3, r9
    d4ac:	bl	32b8 <InflateData>
    d4b0:	mov	r0, r8
    d4b4:	bl	1c88 <Mat_doubleSwap>
    d4b8:	vmov	r0, r1, d0
    d4bc:	bl	585f8 <__aeabi_d2ulz>
    d4c0:	strd	r0, [r5]
    d4c4:	subs	r4, r4, #1
    d4c8:	add	r5, r5, #8
    d4cc:	bne	d49c <ReadCompressedUInt64Data+0x2c8>
    d4d0:	b	d66c <ReadCompressedUInt64Data+0x498>
    d4d4:	ldr	r0, [r7, #20]
    d4d8:	cmp	r0, #0
    d4dc:	beq	d6fc <ReadCompressedUInt64Data+0x528>
    d4e0:	cmp	sl, #1
    d4e4:	blt	d66c <ReadCompressedUInt64Data+0x498>
    d4e8:	mov	r8, sp
    d4ec:	mov	r4, sl
    d4f0:	mov	r0, r7
    d4f4:	mov	r1, r6
    d4f8:	mov	r2, r8
    d4fc:	mov	r3, r9
    d500:	bl	32b8 <InflateData>
    d504:	mov	r0, r8
    d508:	bl	1b84 <Mat_int64Swap>
    d50c:	strd	r0, [r5]
    d510:	subs	r4, r4, #1
    d514:	add	r5, r5, #8
    d518:	bne	d4f0 <ReadCompressedUInt64Data+0x31c>
    d51c:	b	d66c <ReadCompressedUInt64Data+0x498>
    d520:	ldr	r0, [r7, #20]
    d524:	cmp	r0, #0
    d528:	beq	d738 <ReadCompressedUInt64Data+0x564>
    d52c:	cmp	sl, #1
    d530:	blt	d66c <ReadCompressedUInt64Data+0x498>
    d534:	mov	r8, sp
    d538:	mov	r4, sl
    d53c:	mov	r0, r7
    d540:	mov	r1, r6
    d544:	mov	r2, r8
    d548:	mov	r3, r9
    d54c:	bl	32b8 <InflateData>
    d550:	mov	r0, r8
    d554:	bl	1bd4 <Mat_uint64Swap>
    d558:	strd	r0, [r5]
    d55c:	subs	r4, r4, #1
    d560:	add	r5, r5, #8
    d564:	bne	d53c <ReadCompressedUInt64Data+0x368>
    d568:	b	d66c <ReadCompressedUInt64Data+0x498>
    d56c:	cmp	sl, #1
    d570:	blt	d66c <ReadCompressedUInt64Data+0x498>
    d574:	mov	r8, sp
    d578:	mov	r4, sl
    d57c:	mov	r0, r7
    d580:	mov	r1, r6
    d584:	mov	r2, r8
    d588:	mov	r3, r9
    d58c:	bl	32b8 <InflateData>
    d590:	ldrsh	r0, [sp]
    d594:	subs	r4, r4, #1
    d598:	asr	r1, r0, #31
    d59c:	strd	r0, [r5]
    d5a0:	add	r5, r5, #8
    d5a4:	bne	d57c <ReadCompressedUInt64Data+0x3a8>
    d5a8:	b	d66c <ReadCompressedUInt64Data+0x498>
    d5ac:	cmp	sl, #1
    d5b0:	blt	d668 <ReadCompressedUInt64Data+0x494>
    d5b4:	ldr	r4, [fp, #8]
    d5b8:	mov	r8, sp
    d5bc:	mov	sl, #0
    d5c0:	mov	r0, r7
    d5c4:	mov	r1, r6
    d5c8:	mov	r2, r8
    d5cc:	mov	r3, r9
    d5d0:	bl	32b8 <InflateData>
    d5d4:	ldrh	r0, [sp]
    d5d8:	subs	r4, r4, #1
    d5dc:	stm	r5, {r0, sl}
    d5e0:	add	r5, r5, #8
    d5e4:	bne	d5c0 <ReadCompressedUInt64Data+0x3ec>
    d5e8:	b	d668 <ReadCompressedUInt64Data+0x494>
    d5ec:	cmp	sl, #1
    d5f0:	blt	d66c <ReadCompressedUInt64Data+0x498>
    d5f4:	mov	r8, sp
    d5f8:	mov	r4, sl
    d5fc:	mov	r0, r7
    d600:	mov	r1, r6
    d604:	mov	r2, r8
    d608:	mov	r3, r9
    d60c:	bl	32b8 <InflateData>
    d610:	ldr	r0, [sp]
    d614:	subs	r4, r4, #1
    d618:	asr	r1, r0, #31
    d61c:	strd	r0, [r5]
    d620:	add	r5, r5, #8
    d624:	bne	d5fc <ReadCompressedUInt64Data+0x428>
    d628:	b	d66c <ReadCompressedUInt64Data+0x498>
    d62c:	cmp	sl, #1
    d630:	blt	d668 <ReadCompressedUInt64Data+0x494>
    d634:	ldr	r4, [fp, #8]
    d638:	mov	r8, sp
    d63c:	mov	sl, #0
    d640:	mov	r0, r7
    d644:	mov	r1, r6
    d648:	mov	r2, r8
    d64c:	mov	r3, r9
    d650:	bl	32b8 <InflateData>
    d654:	ldr	r0, [sp]
    d658:	subs	r4, r4, #1
    d65c:	stm	r5, {r0, sl}
    d660:	add	r5, r5, #8
    d664:	bne	d640 <ReadCompressedUInt64Data+0x46c>
    d668:	ldr	sl, [fp, #8]
    d66c:	mul	r0, r9, sl
    d670:	sub	sp, fp, #28
    d674:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d678:	cmp	sl, #1
    d67c:	blt	d66c <ReadCompressedUInt64Data+0x498>
    d680:	mov	r8, sp
    d684:	mov	r4, sl
    d688:	mov	r0, r7
    d68c:	mov	r1, r6
    d690:	mov	r2, r8
    d694:	mov	r3, r9
    d698:	bl	32b8 <InflateData>
    d69c:	ldr	r0, [sp]
    d6a0:	bl	585b8 <__aeabi_f2ulz>
    d6a4:	strd	r0, [r5]
    d6a8:	subs	r4, r4, #1
    d6ac:	add	r5, r5, #8
    d6b0:	bne	d688 <ReadCompressedUInt64Data+0x4b4>
    d6b4:	b	d66c <ReadCompressedUInt64Data+0x498>
    d6b8:	cmp	sl, #1
    d6bc:	blt	d66c <ReadCompressedUInt64Data+0x498>
    d6c0:	mov	r8, sp
    d6c4:	mov	r4, sl
    d6c8:	mov	r0, r7
    d6cc:	mov	r1, r6
    d6d0:	mov	r2, r8
    d6d4:	mov	r3, r9
    d6d8:	bl	32b8 <InflateData>
    d6dc:	vldr	d16, [sp]
    d6e0:	vmov	r0, r1, d16
    d6e4:	bl	585f8 <__aeabi_d2ulz>
    d6e8:	strd	r0, [r5]
    d6ec:	subs	r4, r4, #1
    d6f0:	add	r5, r5, #8
    d6f4:	bne	d6c8 <ReadCompressedUInt64Data+0x4f4>
    d6f8:	b	d66c <ReadCompressedUInt64Data+0x498>
    d6fc:	cmp	sl, #1
    d700:	blt	d66c <ReadCompressedUInt64Data+0x498>
    d704:	mov	r8, sp
    d708:	mov	r4, sl
    d70c:	mov	r0, r7
    d710:	mov	r1, r6
    d714:	mov	r2, r8
    d718:	mov	r3, r9
    d71c:	bl	32b8 <InflateData>
    d720:	ldm	sp, {r0, r1}
    d724:	subs	r4, r4, #1
    d728:	strd	r0, [r5]
    d72c:	add	r5, r5, #8
    d730:	bne	d70c <ReadCompressedUInt64Data+0x538>
    d734:	b	d66c <ReadCompressedUInt64Data+0x498>
    d738:	cmp	sl, #1
    d73c:	blt	d66c <ReadCompressedUInt64Data+0x498>
    d740:	mov	r8, sp
    d744:	mov	r4, sl
    d748:	mov	r0, r7
    d74c:	mov	r1, r6
    d750:	mov	r2, r8
    d754:	mov	r3, r9
    d758:	bl	32b8 <InflateData>
    d75c:	ldm	sp, {r0, r1}
    d760:	subs	r4, r4, #1
    d764:	strd	r0, [r5]
    d768:	add	r5, r5, #8
    d76c:	bne	d748 <ReadCompressedUInt64Data+0x574>
    d770:	b	d66c <ReadCompressedUInt64Data+0x498>

0000d774 <ReadInt32Data>:
    d774:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d778:	add	fp, sp, #28
    d77c:	sub	sp, sp, #100	; 0x64
    d780:	sub	sp, sp, #2048	; 0x800
    d784:	mov	r4, r0
    d788:	mov	r0, #0
    d78c:	cmp	r4, #0
    d790:	beq	d7a8 <ReadInt32Data+0x34>
    d794:	cmp	r1, #0
    d798:	mov	sl, r1
    d79c:	ldrne	r1, [r4]
    d7a0:	cmpne	r1, #0
    d7a4:	bne	d7b0 <ReadInt32Data+0x3c>
    d7a8:	sub	sp, fp, #28
    d7ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d7b0:	mov	r0, r2
    d7b4:	mov	r8, r3
    d7b8:	mov	r5, r2
    d7bc:	bl	1924 <Mat_SizeOf@plt>
    d7c0:	mov	r9, r0
    d7c4:	sub	r0, r5, #1
    d7c8:	mov	r6, #0
    d7cc:	str	r4, [sp, #20]
    d7d0:	cmp	r0, #11
    d7d4:	bhi	f018 <ReadInt32Data+0x18a4>
    d7d8:	add	r1, pc, #4
    d7dc:	ldr	r0, [r1, r0, lsl #2]
    d7e0:	add	pc, r1, r0
    d7e4:	.word	0x00000030
    d7e8:	.word	0x000000c4
    d7ec:	.word	0x00000158
    d7f0:	.word	0x000001ac
    d7f4:	.word	0x00000200
    d7f8:	.word	0x00000254
    d7fc:	.word	0x000002a8
    d800:	.word	0x00001834
    d804:	.word	0x00000304
    d808:	.word	0x00001834
    d80c:	.word	0x00001834
    d810:	.word	0x00000360
    d814:	cmp	r8, #256	; 0x100
    d818:	bgt	dba4 <ReadInt32Data+0x430>
    d81c:	ldr	r3, [r4]
    d820:	add	r4, sp, #96	; 0x60
    d824:	mov	r1, r9
    d828:	mov	r2, r8
    d82c:	mov	r0, r4
    d830:	bl	18b8 <fread@plt>
    d834:	mov	r6, r0
    d838:	cmp	r8, #1
    d83c:	blt	f320 <ReadInt32Data+0x1bac>
    d840:	mov	r0, #0
    d844:	cmp	r8, #4
    d848:	bcc	d884 <ReadInt32Data+0x110>
    d84c:	bic	r0, r8, #3
    d850:	add	r1, sp, #72	; 0x48
    d854:	mov	r3, sl
    d858:	mov	r2, r0
    d85c:	ldr	r7, [r4], #4
    d860:	subs	r2, r2, #4
    d864:	str	r7, [sp, #72]	; 0x48
    d868:	vld1.32	{d16[0]}, [r1 :32]
    d86c:	vmovl.s8	q8, d16
    d870:	vmovl.s16	q8, d16
    d874:	vst1.32	{d16-d17}, [r3]!
    d878:	bne	d85c <ReadInt32Data+0xe8>
    d87c:	cmp	r0, r8
    d880:	beq	f320 <ReadInt32Data+0x1bac>
    d884:	add	r3, sp, #96	; 0x60
    d888:	sub	r1, r8, r0
    d88c:	add	r2, sl, r0, lsl #2
    d890:	add	r0, r3, r0
    d894:	ldrsb	r3, [r0], #1
    d898:	subs	r1, r1, #1
    d89c:	str	r3, [r2], #4
    d8a0:	bne	d894 <ReadInt32Data+0x120>
    d8a4:	b	f320 <ReadInt32Data+0x1bac>
    d8a8:	cmp	r8, #256	; 0x100
    d8ac:	bgt	dd00 <ReadInt32Data+0x58c>
    d8b0:	ldr	r3, [r4]
    d8b4:	add	r4, sp, #96	; 0x60
    d8b8:	mov	r1, r9
    d8bc:	mov	r2, r8
    d8c0:	mov	r0, r4
    d8c4:	bl	18b8 <fread@plt>
    d8c8:	mov	r6, r0
    d8cc:	cmp	r8, #1
    d8d0:	blt	f320 <ReadInt32Data+0x1bac>
    d8d4:	mov	r0, #0
    d8d8:	cmp	r8, #4
    d8dc:	bcc	d918 <ReadInt32Data+0x1a4>
    d8e0:	bic	r0, r8, #3
    d8e4:	add	r1, sp, #84	; 0x54
    d8e8:	mov	r3, sl
    d8ec:	mov	r2, r0
    d8f0:	ldr	r7, [r4], #4
    d8f4:	subs	r2, r2, #4
    d8f8:	str	r7, [sp, #84]	; 0x54
    d8fc:	vld1.32	{d16[0]}, [r1 :32]
    d900:	vmovl.u8	q8, d16
    d904:	vmovl.u16	q8, d16
    d908:	vst1.32	{d16-d17}, [r3]!
    d90c:	bne	d8f0 <ReadInt32Data+0x17c>
    d910:	cmp	r0, r8
    d914:	beq	f320 <ReadInt32Data+0x1bac>
    d918:	add	r3, sp, #96	; 0x60
    d91c:	sub	r1, r8, r0
    d920:	add	r2, sl, r0, lsl #2
    d924:	add	r0, r3, r0
    d928:	ldrb	r3, [r0], #1
    d92c:	subs	r1, r1, #1
    d930:	str	r3, [r2], #4
    d934:	bne	d928 <ReadInt32Data+0x1b4>
    d938:	b	f320 <ReadInt32Data+0x1bac>
    d93c:	ldr	r0, [r4, #20]
    d940:	cmp	r0, #0
    d944:	beq	de5c <ReadInt32Data+0x6e8>
    d948:	cmp	r8, #256	; 0x100
    d94c:	bgt	e1fc <ReadInt32Data+0xa88>
    d950:	ldr	r3, [r4]
    d954:	add	r4, sp, #96	; 0x60
    d958:	mov	r1, r9
    d95c:	mov	r2, r8
    d960:	mov	r0, r4
    d964:	bl	18b8 <fread@plt>
    d968:	mov	r6, r0
    d96c:	cmp	r8, #1
    d970:	blt	f320 <ReadInt32Data+0x1bac>
    d974:	mov	r0, r4
    d978:	bl	1c18 <Mat_int16Swap>
    d97c:	str	r0, [sl], #4
    d980:	subs	r8, r8, #1
    d984:	add	r4, r4, #2
    d988:	bne	d974 <ReadInt32Data+0x200>
    d98c:	b	f320 <ReadInt32Data+0x1bac>
    d990:	ldr	r0, [r4, #20]
    d994:	cmp	r0, #0
    d998:	beq	df00 <ReadInt32Data+0x78c>
    d99c:	cmp	r8, #256	; 0x100
    d9a0:	bgt	e2dc <ReadInt32Data+0xb68>
    d9a4:	ldr	r3, [r4]
    d9a8:	add	r4, sp, #96	; 0x60
    d9ac:	mov	r1, r9
    d9b0:	mov	r2, r8
    d9b4:	mov	r0, r4
    d9b8:	bl	18b8 <fread@plt>
    d9bc:	mov	r6, r0
    d9c0:	cmp	r8, #1
    d9c4:	blt	f320 <ReadInt32Data+0x1bac>
    d9c8:	mov	r0, r4
    d9cc:	bl	1c2c <Mat_uint16Swap>
    d9d0:	str	r0, [sl], #4
    d9d4:	subs	r8, r8, #1
    d9d8:	add	r4, r4, #2
    d9dc:	bne	d9c8 <ReadInt32Data+0x254>
    d9e0:	b	f320 <ReadInt32Data+0x1bac>
    d9e4:	ldr	r0, [r4, #20]
    d9e8:	cmp	r0, #0
    d9ec:	beq	dfa4 <ReadInt32Data+0x830>
    d9f0:	cmp	r8, #256	; 0x100
    d9f4:	bgt	e3bc <ReadInt32Data+0xc48>
    d9f8:	ldr	r3, [r4]
    d9fc:	add	r4, sp, #96	; 0x60
    da00:	mov	r1, r9
    da04:	mov	r2, r8
    da08:	mov	r0, r4
    da0c:	bl	18b8 <fread@plt>
    da10:	mov	r6, r0
    da14:	cmp	r8, #1
    da18:	blt	f320 <ReadInt32Data+0x1bac>
    da1c:	mov	r0, r4
    da20:	bl	1bf0 <Mat_int32Swap>
    da24:	str	r0, [sl], #4
    da28:	subs	r8, r8, #1
    da2c:	add	r4, r4, #4
    da30:	bne	da1c <ReadInt32Data+0x2a8>
    da34:	b	f320 <ReadInt32Data+0x1bac>
    da38:	ldr	r0, [r4, #20]
    da3c:	cmp	r0, #0
    da40:	beq	e010 <ReadInt32Data+0x89c>
    da44:	cmp	r8, #256	; 0x100
    da48:	bgt	e49c <ReadInt32Data+0xd28>
    da4c:	ldr	r3, [r4]
    da50:	add	r4, sp, #96	; 0x60
    da54:	mov	r1, r9
    da58:	mov	r2, r8
    da5c:	mov	r0, r4
    da60:	bl	18b8 <fread@plt>
    da64:	mov	r6, r0
    da68:	cmp	r8, #1
    da6c:	blt	f320 <ReadInt32Data+0x1bac>
    da70:	mov	r0, r4
    da74:	bl	1c04 <Mat_uint32Swap>
    da78:	str	r0, [sl], #4
    da7c:	subs	r8, r8, #1
    da80:	add	r4, r4, #4
    da84:	bne	da70 <ReadInt32Data+0x2fc>
    da88:	b	f320 <ReadInt32Data+0x1bac>
    da8c:	ldr	r0, [r4, #20]
    da90:	cmp	r0, #0
    da94:	beq	e04c <ReadInt32Data+0x8d8>
    da98:	cmp	r8, #256	; 0x100
    da9c:	bgt	e57c <ReadInt32Data+0xe08>
    daa0:	ldr	r3, [r4]
    daa4:	add	r4, sp, #96	; 0x60
    daa8:	mov	r1, r9
    daac:	mov	r2, r8
    dab0:	mov	r0, r4
    dab4:	bl	18b8 <fread@plt>
    dab8:	mov	r6, r0
    dabc:	cmp	r8, #1
    dac0:	blt	f320 <ReadInt32Data+0x1bac>
    dac4:	mov	r0, r4
    dac8:	bl	1c44 <Mat_floatSwap>
    dacc:	vcvt.s32.f32	s0, s0
    dad0:	subs	r8, r8, #1
    dad4:	add	r4, r4, #4
    dad8:	vmov	r0, s0
    dadc:	str	r0, [sl], #4
    dae0:	bne	dac4 <ReadInt32Data+0x350>
    dae4:	b	f320 <ReadInt32Data+0x1bac>
    dae8:	ldr	r0, [r4, #20]
    daec:	cmp	r0, #0
    daf0:	beq	e0dc <ReadInt32Data+0x968>
    daf4:	cmp	r8, #256	; 0x100
    daf8:	bgt	e66c <ReadInt32Data+0xef8>
    dafc:	ldr	r3, [r4]
    db00:	add	r4, sp, #96	; 0x60
    db04:	mov	r1, r9
    db08:	mov	r2, r8
    db0c:	mov	r0, r4
    db10:	bl	18b8 <fread@plt>
    db14:	mov	r6, r0
    db18:	cmp	r8, #1
    db1c:	blt	f320 <ReadInt32Data+0x1bac>
    db20:	mov	r0, r4
    db24:	bl	1c88 <Mat_doubleSwap>
    db28:	vcvt.s32.f64	s0, d0
    db2c:	subs	r8, r8, #1
    db30:	add	r4, r4, #8
    db34:	vmov	r0, s0
    db38:	str	r0, [sl], #4
    db3c:	bne	db20 <ReadInt32Data+0x3ac>
    db40:	b	f320 <ReadInt32Data+0x1bac>
    db44:	ldr	r0, [r4, #20]
    db48:	cmp	r0, #0
    db4c:	beq	e17c <ReadInt32Data+0xa08>
    db50:	cmp	r8, #256	; 0x100
    db54:	bgt	e760 <ReadInt32Data+0xfec>
    db58:	ldr	r3, [r4]
    db5c:	add	r7, sp, #96	; 0x60
    db60:	mov	r1, r9
    db64:	mov	r2, r8
    db68:	mov	r0, r7
    db6c:	bl	18b8 <fread@plt>
    db70:	mov	r6, r0
    db74:	cmp	r8, #1
    db78:	blt	f018 <ReadInt32Data+0x18a4>
    db7c:	str	r5, [sp]
    db80:	mov	r4, r8
    db84:	mov	r5, sl
    db88:	mov	r0, r7
    db8c:	bl	1b84 <Mat_int64Swap>
    db90:	str	r0, [r5], #4
    db94:	subs	r4, r4, #1
    db98:	add	r7, r7, #8
    db9c:	bne	db88 <ReadInt32Data+0x414>
    dba0:	b	f010 <ReadInt32Data+0x189c>
    dba4:	sub	r1, r8, #256	; 0x100
    dba8:	str	r8, [sp, #4]
    dbac:	add	r0, sl, #1024	; 0x400
    dbb0:	mov	r2, #256	; 0x100
    dbb4:	add	r7, sp, #96	; 0x60
    dbb8:	add	r4, sp, #80	; 0x50
    dbbc:	mov	r6, sl
    dbc0:	mov	r8, #0
    dbc4:	str	r9, [sp, #16]
    dbc8:	str	r1, [sp, #8]
    dbcc:	mov	r1, #0
    dbd0:	mov	r9, r0
    dbd4:	ldr	r0, [sp, #20]
    dbd8:	str	r1, [sp, #12]
    dbdc:	ldr	r1, [sp, #16]
    dbe0:	mov	r5, r2
    dbe4:	mov	r2, #256	; 0x100
    dbe8:	ldr	r3, [r0]
    dbec:	mov	r0, r7
    dbf0:	bl	18b8 <fread@plt>
    dbf4:	mov	r1, r6
    dbf8:	mov	r2, #0
    dbfc:	ldr	r3, [r7, r2]
    dc00:	add	r2, r2, #4
    dc04:	cmp	r2, #256	; 0x100
    dc08:	str	r3, [sp, #80]	; 0x50
    dc0c:	vld1.32	{d16[0]}, [r4 :32]
    dc10:	vmovl.s8	q8, d16
    dc14:	vmovl.s16	q8, d16
    dc18:	vst1.32	{d16-d17}, [r1]!
    dc1c:	bne	dbfc <ReadInt32Data+0x488>
    dc20:	mov	r1, r5
    dc24:	ldr	r3, [sp, #8]
    dc28:	add	r8, r0, r8
    dc2c:	add	r6, r6, #1024	; 0x400
    dc30:	add	r0, r9, #1024	; 0x400
    dc34:	add	r2, r5, #256	; 0x100
    dc38:	ldr	r1, [sp, #12]
    dc3c:	add	r1, r1, #256	; 0x100
    dc40:	cmp	r1, r3
    dc44:	blt	dbd0 <ReadInt32Data+0x45c>
    dc48:	ldr	r0, [sp, #4]
    dc4c:	cmp	r1, r0
    dc50:	bge	f318 <ReadInt32Data+0x1ba4>
    dc54:	sub	r7, r0, r1
    dc58:	ldr	r0, [sp, #20]
    dc5c:	ldr	r1, [sp, #16]
    dc60:	add	r4, sp, #96	; 0x60
    dc64:	mov	r2, r7
    dc68:	ldr	r3, [r0]
    dc6c:	mov	r0, r4
    dc70:	bl	18b8 <fread@plt>
    dc74:	mov	r6, r8
    dc78:	cmp	r7, #1
    dc7c:	add	r6, r0, r8
    dc80:	blt	f310 <ReadInt32Data+0x1b9c>
    dc84:	ldr	ip, [sp, #12]
    dc88:	mov	r0, #0
    dc8c:	cmp	r7, #4
    dc90:	bcc	dcd0 <ReadInt32Data+0x55c>
    dc94:	ldr	r0, [sp, #8]
    dc98:	add	r2, sp, #76	; 0x4c
    dc9c:	sub	r0, r0, ip
    dca0:	bic	r1, r0, #3
    dca4:	bic	r0, r7, #3
    dca8:	ldr	r3, [r4], #4
    dcac:	subs	r1, r1, #4
    dcb0:	str	r3, [sp, #76]	; 0x4c
    dcb4:	vld1.32	{d16[0]}, [r2 :32]
    dcb8:	vmovl.s8	q8, d16
    dcbc:	vmovl.s16	q8, d16
    dcc0:	vst1.32	{d16-d17}, [r9]!
    dcc4:	bne	dca8 <ReadInt32Data+0x534>
    dcc8:	cmp	r7, r0
    dccc:	beq	f310 <ReadInt32Data+0x1b9c>
    dcd0:	ldr	r3, [sp, #8]
    dcd4:	add	r1, sp, #96	; 0x60
    dcd8:	add	r2, r0, r5
    dcdc:	add	r1, r1, r0
    dce0:	add	r2, sl, r2, lsl #2
    dce4:	sub	r3, r3, ip
    dce8:	sub	r0, r3, r0
    dcec:	ldrsb	r3, [r1], #1
    dcf0:	subs	r0, r0, #1
    dcf4:	str	r3, [r2], #4
    dcf8:	bne	dcec <ReadInt32Data+0x578>
    dcfc:	b	f310 <ReadInt32Data+0x1b9c>
    dd00:	sub	r1, r8, #256	; 0x100
    dd04:	str	r8, [sp, #4]
    dd08:	add	r0, sl, #1024	; 0x400
    dd0c:	mov	r2, #256	; 0x100
    dd10:	add	r7, sp, #96	; 0x60
    dd14:	add	r5, sp, #92	; 0x5c
    dd18:	mov	r6, sl
    dd1c:	mov	r8, #0
    dd20:	str	r9, [sp, #16]
    dd24:	str	r1, [sp, #8]
    dd28:	mov	r1, #0
    dd2c:	mov	r4, r0
    dd30:	ldr	r0, [sp, #20]
    dd34:	str	r1, [sp, #12]
    dd38:	ldr	r1, [sp, #16]
    dd3c:	mov	r9, r2
    dd40:	mov	r2, #256	; 0x100
    dd44:	ldr	r3, [r0]
    dd48:	mov	r0, r7
    dd4c:	bl	18b8 <fread@plt>
    dd50:	mov	r1, r6
    dd54:	mov	r2, #0
    dd58:	ldr	r3, [r7, r2]
    dd5c:	add	r2, r2, #4
    dd60:	cmp	r2, #256	; 0x100
    dd64:	str	r3, [sp, #92]	; 0x5c
    dd68:	vld1.32	{d16[0]}, [r5 :32]
    dd6c:	vmovl.u8	q8, d16
    dd70:	vmovl.u16	q8, d16
    dd74:	vst1.32	{d16-d17}, [r1]!
    dd78:	bne	dd58 <ReadInt32Data+0x5e4>
    dd7c:	mov	r1, r9
    dd80:	ldr	r3, [sp, #8]
    dd84:	add	r8, r0, r8
    dd88:	add	r6, r6, #1024	; 0x400
    dd8c:	add	r0, r4, #1024	; 0x400
    dd90:	add	r2, r9, #256	; 0x100
    dd94:	ldr	r1, [sp, #12]
    dd98:	add	r1, r1, #256	; 0x100
    dd9c:	cmp	r1, r3
    dda0:	blt	dd2c <ReadInt32Data+0x5b8>
    dda4:	ldr	r0, [sp, #4]
    dda8:	cmp	r1, r0
    ddac:	bge	f318 <ReadInt32Data+0x1ba4>
    ddb0:	sub	r5, r0, r1
    ddb4:	ldr	r0, [sp, #20]
    ddb8:	ldr	r1, [sp, #16]
    ddbc:	add	r7, sp, #96	; 0x60
    ddc0:	mov	r2, r5
    ddc4:	ldr	r3, [r0]
    ddc8:	mov	r0, r7
    ddcc:	bl	18b8 <fread@plt>
    ddd0:	mov	r6, r8
    ddd4:	cmp	r5, #1
    ddd8:	add	r6, r0, r8
    dddc:	blt	f310 <ReadInt32Data+0x1b9c>
    dde0:	ldr	ip, [sp, #12]
    dde4:	mov	r0, #0
    dde8:	cmp	r5, #4
    ddec:	bcc	de2c <ReadInt32Data+0x6b8>
    ddf0:	ldr	r0, [sp, #8]
    ddf4:	add	r2, sp, #88	; 0x58
    ddf8:	sub	r0, r0, ip
    ddfc:	bic	r1, r0, #3
    de00:	bic	r0, r5, #3
    de04:	ldr	r3, [r7], #4
    de08:	subs	r1, r1, #4
    de0c:	str	r3, [sp, #88]	; 0x58
    de10:	vld1.32	{d16[0]}, [r2 :32]
    de14:	vmovl.u8	q8, d16
    de18:	vmovl.u16	q8, d16
    de1c:	vst1.32	{d16-d17}, [r4]!
    de20:	bne	de04 <ReadInt32Data+0x690>
    de24:	cmp	r5, r0
    de28:	beq	f310 <ReadInt32Data+0x1b9c>
    de2c:	ldr	r3, [sp, #8]
    de30:	add	r1, sp, #96	; 0x60
    de34:	add	r2, r0, r9
    de38:	add	r1, r1, r0
    de3c:	add	r2, sl, r2, lsl #2
    de40:	sub	r3, r3, ip
    de44:	sub	r0, r3, r0
    de48:	ldrb	r3, [r1], #1
    de4c:	subs	r0, r0, #1
    de50:	str	r3, [r2], #4
    de54:	bne	de48 <ReadInt32Data+0x6d4>
    de58:	b	f310 <ReadInt32Data+0x1b9c>
    de5c:	cmp	r8, #256	; 0x100
    de60:	bgt	e850 <ReadInt32Data+0x10dc>
    de64:	ldr	r3, [r4]
    de68:	add	r4, sp, #96	; 0x60
    de6c:	mov	r1, r9
    de70:	mov	r2, r8
    de74:	mov	r0, r4
    de78:	bl	18b8 <fread@plt>
    de7c:	mov	r6, r0
    de80:	cmp	r8, #1
    de84:	blt	f320 <ReadInt32Data+0x1bac>
    de88:	mov	r0, #0
    de8c:	cmp	r8, #4
    de90:	bcc	dedc <ReadInt32Data+0x768>
    de94:	bic	r0, r8, #3
    de98:	mov	r5, r6
    de9c:	add	r1, sp, #24
    dea0:	mov	r3, sl
    dea4:	mov	r2, r0
    dea8:	ldr	r7, [r4]
    deac:	ldr	r6, [r4, #4]
    deb0:	subs	r2, r2, #4
    deb4:	add	r4, r4, #8
    deb8:	str	r6, [sp, #28]
    debc:	str	r7, [sp, #24]
    dec0:	vld1.16	{d16}, [r1 :64]
    dec4:	vmovl.s16	q8, d16
    dec8:	vst1.32	{d16-d17}, [r3]!
    decc:	bne	dea8 <ReadInt32Data+0x734>
    ded0:	cmp	r0, r8
    ded4:	mov	r6, r5
    ded8:	beq	f320 <ReadInt32Data+0x1bac>
    dedc:	add	r3, sp, #96	; 0x60
    dee0:	sub	r1, r8, r0
    dee4:	add	r2, sl, r0, lsl #2
    dee8:	add	r0, r3, r0, lsl #1
    deec:	ldrsh	r3, [r0], #2
    def0:	subs	r1, r1, #1
    def4:	str	r3, [r2], #4
    def8:	bne	deec <ReadInt32Data+0x778>
    defc:	b	f320 <ReadInt32Data+0x1bac>
    df00:	cmp	r8, #256	; 0x100
    df04:	bgt	e9c4 <ReadInt32Data+0x1250>
    df08:	ldr	r3, [r4]
    df0c:	add	r4, sp, #96	; 0x60
    df10:	mov	r1, r9
    df14:	mov	r2, r8
    df18:	mov	r0, r4
    df1c:	bl	18b8 <fread@plt>
    df20:	mov	r6, r0
    df24:	cmp	r8, #1
    df28:	blt	f320 <ReadInt32Data+0x1bac>
    df2c:	mov	r0, #0
    df30:	cmp	r8, #4
    df34:	bcc	df80 <ReadInt32Data+0x80c>
    df38:	bic	r0, r8, #3
    df3c:	mov	r5, r6
    df40:	add	r1, sp, #48	; 0x30
    df44:	mov	r3, sl
    df48:	mov	r2, r0
    df4c:	ldr	r7, [r4]
    df50:	ldr	r6, [r4, #4]
    df54:	subs	r2, r2, #4
    df58:	add	r4, r4, #8
    df5c:	str	r6, [sp, #52]	; 0x34
    df60:	str	r7, [sp, #48]	; 0x30
    df64:	vld1.16	{d16}, [r1 :64]
    df68:	vmovl.u16	q8, d16
    df6c:	vst1.32	{d16-d17}, [r3]!
    df70:	bne	df4c <ReadInt32Data+0x7d8>
    df74:	cmp	r0, r8
    df78:	mov	r6, r5
    df7c:	beq	f320 <ReadInt32Data+0x1bac>
    df80:	add	r3, sp, #96	; 0x60
    df84:	sub	r1, r8, r0
    df88:	add	r2, sl, r0, lsl #2
    df8c:	add	r0, r3, r0, lsl #1
    df90:	ldrh	r3, [r0], #2
    df94:	subs	r1, r1, #1
    df98:	str	r3, [r2], #4
    df9c:	bne	df90 <ReadInt32Data+0x81c>
    dfa0:	b	f320 <ReadInt32Data+0x1bac>
    dfa4:	cmp	r8, #256	; 0x100
    dfa8:	ble	e018 <ReadInt32Data+0x8a4>
    dfac:	sub	r0, r8, #256	; 0x100
    dfb0:	lsl	r7, r8, #2
    dfb4:	str	r8, [sp, #4]
    dfb8:	mov	r5, #0
    dfbc:	add	r8, sp, #96	; 0x60
    dfc0:	mov	r6, #0
    dfc4:	str	r0, [sp, #16]
    dfc8:	ldr	r3, [r4]
    dfcc:	mov	r0, r8
    dfd0:	mov	r1, r9
    dfd4:	mov	r2, #256	; 0x100
    dfd8:	bl	18b8 <fread@plt>
    dfdc:	mov	r4, r0
    dfe0:	add	r0, sl, r5, lsl #2
    dfe4:	mov	r1, r8
    dfe8:	mov	r2, #1024	; 0x400
    dfec:	bl	181c <memcpy@plt>
    dff0:	ldr	r0, [sp, #16]
    dff4:	add	r6, r4, r6
    dff8:	ldr	r4, [sp, #20]
    dffc:	add	r5, r5, #256	; 0x100
    e000:	sub	r7, r7, #1024	; 0x400
    e004:	cmp	r5, r0
    e008:	blt	dfc8 <ReadInt32Data+0x854>
    e00c:	b	eb98 <ReadInt32Data+0x1424>
    e010:	cmp	r8, #256	; 0x100
    e014:	bgt	eb38 <ReadInt32Data+0x13c4>
    e018:	ldr	r3, [r4]
    e01c:	add	r0, sp, #96	; 0x60
    e020:	mov	r1, r9
    e024:	mov	r2, r8
    e028:	bl	18b8 <fread@plt>
    e02c:	mov	r6, r0
    e030:	cmp	r8, #1
    e034:	blt	f320 <ReadInt32Data+0x1bac>
    e038:	lsl	r2, r8, #2
    e03c:	add	r1, sp, #96	; 0x60
    e040:	mov	r0, sl
    e044:	bl	181c <memcpy@plt>
    e048:	b	f320 <ReadInt32Data+0x1bac>
    e04c:	cmp	r8, #256	; 0x100
    e050:	bgt	ebe0 <ReadInt32Data+0x146c>
    e054:	ldr	r3, [r4]
    e058:	add	r4, sp, #96	; 0x60
    e05c:	mov	r1, r9
    e060:	mov	r2, r8
    e064:	mov	r0, r4
    e068:	bl	18b8 <fread@plt>
    e06c:	mov	r6, r0
    e070:	cmp	r8, #1
    e074:	blt	f320 <ReadInt32Data+0x1bac>
    e078:	mov	r0, #0
    e07c:	cmp	r8, #4
    e080:	bcc	e0ac <ReadInt32Data+0x938>
    e084:	bic	r0, r8, #3
    e088:	mov	r2, sl
    e08c:	mov	r1, r0
    e090:	vld1.32	{d16-d17}, [r4]!
    e094:	subs	r1, r1, #4
    e098:	vcvt.s32.f32	q8, q8
    e09c:	vst1.32	{d16-d17}, [r2]!
    e0a0:	bne	e090 <ReadInt32Data+0x91c>
    e0a4:	cmp	r0, r8
    e0a8:	beq	f320 <ReadInt32Data+0x1bac>
    e0ac:	add	r3, sp, #96	; 0x60
    e0b0:	sub	r1, r8, r0
    e0b4:	add	r2, sl, r0, lsl #2
    e0b8:	add	r0, r3, r0, lsl #2
    e0bc:	vldr	s0, [r0]
    e0c0:	subs	r1, r1, #1
    e0c4:	add	r0, r0, #4
    e0c8:	vcvt.s32.f32	s0, s0
    e0cc:	vmov	r3, s0
    e0d0:	str	r3, [r2], #4
    e0d4:	bne	e0bc <ReadInt32Data+0x948>
    e0d8:	b	f320 <ReadInt32Data+0x1bac>
    e0dc:	cmp	r8, #256	; 0x100
    e0e0:	bgt	ed24 <ReadInt32Data+0x15b0>
    e0e4:	ldr	r3, [r4]
    e0e8:	add	r4, sp, #96	; 0x60
    e0ec:	mov	r1, r9
    e0f0:	mov	r2, r8
    e0f4:	mov	r0, r4
    e0f8:	bl	18b8 <fread@plt>
    e0fc:	mov	r6, r0
    e100:	cmp	r8, #1
    e104:	blt	f320 <ReadInt32Data+0x1bac>
    e108:	mov	r0, #0
    e10c:	beq	e14c <ReadInt32Data+0x9d8>
    e110:	bic	r0, r8, #1
    e114:	mov	r2, sl
    e118:	mov	r1, r0
    e11c:	vld1.64	{d16-d17}, [r4]!
    e120:	subs	r1, r1, #2
    e124:	vcvt.s32.f64	s0, d16
    e128:	vcvt.s32.f64	s2, d17
    e12c:	vmov	r3, s0
    e130:	vmov.32	d16[0], r3
    e134:	vmov	r3, s2
    e138:	vmov.32	d16[1], r3
    e13c:	vst1.32	{d16}, [r2]!
    e140:	bne	e11c <ReadInt32Data+0x9a8>
    e144:	cmp	r0, r8
    e148:	beq	f320 <ReadInt32Data+0x1bac>
    e14c:	add	r3, sp, #96	; 0x60
    e150:	sub	r1, r8, r0
    e154:	add	r2, sl, r0, lsl #2
    e158:	add	r0, r3, r0, lsl #3
    e15c:	vldr	d16, [r0]
    e160:	subs	r1, r1, #1
    e164:	add	r0, r0, #8
    e168:	vcvt.s32.f64	s0, d16
    e16c:	vmov	r3, s0
    e170:	str	r3, [r2], #4
    e174:	bne	e15c <ReadInt32Data+0x9e8>
    e178:	b	f320 <ReadInt32Data+0x1bac>
    e17c:	cmp	r8, #256	; 0x100
    e180:	bgt	ee8c <ReadInt32Data+0x1718>
    e184:	ldr	r3, [r4]
    e188:	add	r7, sp, #96	; 0x60
    e18c:	mov	r1, r9
    e190:	mov	r2, r8
    e194:	mov	r0, r7
    e198:	bl	18b8 <fread@plt>
    e19c:	mov	r6, r0
    e1a0:	cmp	r8, #1
    e1a4:	blt	f018 <ReadInt32Data+0x18a4>
    e1a8:	mov	r0, #0
    e1ac:	beq	e1d8 <ReadInt32Data+0xa64>
    e1b0:	bic	r0, r8, #1
    e1b4:	mov	r2, sl
    e1b8:	mov	r1, r0
    e1bc:	vld1.64	{d16-d17}, [r7]!
    e1c0:	subs	r1, r1, #2
    e1c4:	vmovn.i64	d16, q8
    e1c8:	vst1.32	{d16}, [r2]!
    e1cc:	bne	e1bc <ReadInt32Data+0xa48>
    e1d0:	cmp	r0, r8
    e1d4:	beq	f018 <ReadInt32Data+0x18a4>
    e1d8:	add	r3, sp, #96	; 0x60
    e1dc:	sub	r1, r8, r0
    e1e0:	add	r2, sl, r0, lsl #2
    e1e4:	add	r0, r3, r0, lsl #3
    e1e8:	ldr	r3, [r0], #8
    e1ec:	subs	r1, r1, #1
    e1f0:	str	r3, [r2], #4
    e1f4:	bne	e1e8 <ReadInt32Data+0xa74>
    e1f8:	b	f018 <ReadInt32Data+0x18a4>
    e1fc:	sub	r0, r8, #256	; 0x100
    e200:	add	r1, sl, #1024	; 0x400
    e204:	add	r7, sp, #96	; 0x60
    e208:	mov	r6, #0
    e20c:	str	r9, [sp, #16]
    e210:	str	r8, [sp, #4]
    e214:	str	r0, [sp, #12]
    e218:	mov	r0, #0
    e21c:	mov	r5, r1
    e220:	ldr	r3, [r4]
    e224:	ldr	r1, [sp, #16]
    e228:	mov	r9, r0
    e22c:	mov	r0, r7
    e230:	mov	r2, #256	; 0x100
    e234:	mov	r8, r6
    e238:	bl	18b8 <fread@plt>
    e23c:	mov	r4, r0
    e240:	mov	r6, #0
    e244:	add	r0, r7, r6
    e248:	bl	1c18 <Mat_int16Swap>
    e24c:	str	r0, [sl, r6, lsl #1]
    e250:	add	r6, r6, #2
    e254:	cmp	r6, #512	; 0x200
    e258:	bne	e244 <ReadInt32Data+0xad0>
    e25c:	mov	r6, r8
    e260:	ldr	r2, [sp, #12]
    e264:	add	r0, r9, #256	; 0x100
    e268:	add	sl, sl, #1024	; 0x400
    e26c:	add	r1, r5, #1024	; 0x400
    e270:	add	r6, r4, r8
    e274:	ldr	r4, [sp, #20]
    e278:	cmp	r0, r2
    e27c:	blt	e21c <ReadInt32Data+0xaa8>
    e280:	ldr	r1, [sp, #4]
    e284:	cmp	r0, r1
    e288:	bge	f310 <ReadInt32Data+0x1b9c>
    e28c:	sub	r7, r1, r0
    e290:	ldr	r3, [r4]
    e294:	ldr	r1, [sp, #16]
    e298:	add	r4, sp, #96	; 0x60
    e29c:	mov	r0, r4
    e2a0:	mov	r2, r7
    e2a4:	bl	18b8 <fread@plt>
    e2a8:	add	r6, r0, r6
    e2ac:	cmp	r7, #1
    e2b0:	blt	f310 <ReadInt32Data+0x1b9c>
    e2b4:	ldr	r0, [sp, #12]
    e2b8:	mov	r7, r6
    e2bc:	sub	r6, r0, r9
    e2c0:	mov	r0, r4
    e2c4:	bl	1c18 <Mat_int16Swap>
    e2c8:	str	r0, [r5], #4
    e2cc:	subs	r6, r6, #1
    e2d0:	add	r4, r4, #2
    e2d4:	bne	e2c0 <ReadInt32Data+0xb4c>
    e2d8:	b	f1d0 <ReadInt32Data+0x1a5c>
    e2dc:	sub	r0, r8, #256	; 0x100
    e2e0:	add	r1, sl, #1024	; 0x400
    e2e4:	add	r7, sp, #96	; 0x60
    e2e8:	mov	r6, #0
    e2ec:	str	r9, [sp, #16]
    e2f0:	str	r8, [sp, #4]
    e2f4:	str	r0, [sp, #12]
    e2f8:	mov	r0, #0
    e2fc:	mov	r5, r1
    e300:	ldr	r3, [r4]
    e304:	ldr	r1, [sp, #16]
    e308:	mov	r9, r0
    e30c:	mov	r0, r7
    e310:	mov	r2, #256	; 0x100
    e314:	mov	r8, r6
    e318:	bl	18b8 <fread@plt>
    e31c:	mov	r4, r0
    e320:	mov	r6, #0
    e324:	add	r0, r7, r6
    e328:	bl	1c2c <Mat_uint16Swap>
    e32c:	str	r0, [sl, r6, lsl #1]
    e330:	add	r6, r6, #2
    e334:	cmp	r6, #512	; 0x200
    e338:	bne	e324 <ReadInt32Data+0xbb0>
    e33c:	mov	r6, r8
    e340:	ldr	r2, [sp, #12]
    e344:	add	r0, r9, #256	; 0x100
    e348:	add	sl, sl, #1024	; 0x400
    e34c:	add	r1, r5, #1024	; 0x400
    e350:	add	r6, r4, r8
    e354:	ldr	r4, [sp, #20]
    e358:	cmp	r0, r2
    e35c:	blt	e2fc <ReadInt32Data+0xb88>
    e360:	ldr	r1, [sp, #4]
    e364:	cmp	r0, r1
    e368:	bge	f310 <ReadInt32Data+0x1b9c>
    e36c:	sub	r7, r1, r0
    e370:	ldr	r3, [r4]
    e374:	ldr	r1, [sp, #16]
    e378:	add	r4, sp, #96	; 0x60
    e37c:	mov	r0, r4
    e380:	mov	r2, r7
    e384:	bl	18b8 <fread@plt>
    e388:	add	r6, r0, r6
    e38c:	cmp	r7, #1
    e390:	blt	f310 <ReadInt32Data+0x1b9c>
    e394:	ldr	r0, [sp, #12]
    e398:	mov	r7, r6
    e39c:	sub	r6, r0, r9
    e3a0:	mov	r0, r4
    e3a4:	bl	1c2c <Mat_uint16Swap>
    e3a8:	str	r0, [r5], #4
    e3ac:	subs	r6, r6, #1
    e3b0:	add	r4, r4, #2
    e3b4:	bne	e3a0 <ReadInt32Data+0xc2c>
    e3b8:	b	f1d0 <ReadInt32Data+0x1a5c>
    e3bc:	sub	r0, r8, #256	; 0x100
    e3c0:	add	r1, sl, #1024	; 0x400
    e3c4:	add	r7, sp, #96	; 0x60
    e3c8:	mov	r6, #0
    e3cc:	str	r9, [sp, #16]
    e3d0:	str	r8, [sp, #4]
    e3d4:	str	r0, [sp, #12]
    e3d8:	mov	r0, #0
    e3dc:	mov	r5, r1
    e3e0:	ldr	r3, [r4]
    e3e4:	ldr	r1, [sp, #16]
    e3e8:	mov	r9, r0
    e3ec:	mov	r0, r7
    e3f0:	mov	r2, #256	; 0x100
    e3f4:	mov	r8, r6
    e3f8:	bl	18b8 <fread@plt>
    e3fc:	mov	r4, r0
    e400:	mov	r6, #0
    e404:	add	r0, r7, r6
    e408:	bl	1bf0 <Mat_int32Swap>
    e40c:	str	r0, [sl, r6]
    e410:	add	r6, r6, #4
    e414:	cmp	r6, #1024	; 0x400
    e418:	bne	e404 <ReadInt32Data+0xc90>
    e41c:	mov	r6, r8
    e420:	ldr	r2, [sp, #12]
    e424:	add	r0, r9, #256	; 0x100
    e428:	add	sl, sl, #1024	; 0x400
    e42c:	add	r1, r5, #1024	; 0x400
    e430:	add	r6, r4, r8
    e434:	ldr	r4, [sp, #20]
    e438:	cmp	r0, r2
    e43c:	blt	e3dc <ReadInt32Data+0xc68>
    e440:	ldr	r1, [sp, #4]
    e444:	cmp	r0, r1
    e448:	bge	f310 <ReadInt32Data+0x1b9c>
    e44c:	sub	r7, r1, r0
    e450:	ldr	r3, [r4]
    e454:	ldr	r1, [sp, #16]
    e458:	add	r4, sp, #96	; 0x60
    e45c:	mov	r0, r4
    e460:	mov	r2, r7
    e464:	bl	18b8 <fread@plt>
    e468:	add	r6, r0, r6
    e46c:	cmp	r7, #1
    e470:	blt	f310 <ReadInt32Data+0x1b9c>
    e474:	ldr	r0, [sp, #12]
    e478:	mov	r7, r6
    e47c:	sub	r6, r0, r9
    e480:	mov	r0, r4
    e484:	bl	1bf0 <Mat_int32Swap>
    e488:	str	r0, [r5], #4
    e48c:	subs	r6, r6, #1
    e490:	add	r4, r4, #4
    e494:	bne	e480 <ReadInt32Data+0xd0c>
    e498:	b	f1d0 <ReadInt32Data+0x1a5c>
    e49c:	sub	r0, r8, #256	; 0x100
    e4a0:	add	r1, sl, #1024	; 0x400
    e4a4:	add	r7, sp, #96	; 0x60
    e4a8:	mov	r6, #0
    e4ac:	str	r9, [sp, #16]
    e4b0:	str	r8, [sp, #4]
    e4b4:	str	r0, [sp, #12]
    e4b8:	mov	r0, #0
    e4bc:	mov	r5, r1
    e4c0:	ldr	r3, [r4]
    e4c4:	ldr	r1, [sp, #16]
    e4c8:	mov	r9, r0
    e4cc:	mov	r0, r7
    e4d0:	mov	r2, #256	; 0x100
    e4d4:	mov	r8, r6
    e4d8:	bl	18b8 <fread@plt>
    e4dc:	mov	r4, r0
    e4e0:	mov	r6, #0
    e4e4:	add	r0, r7, r6
    e4e8:	bl	1c04 <Mat_uint32Swap>
    e4ec:	str	r0, [sl, r6]
    e4f0:	add	r6, r6, #4
    e4f4:	cmp	r6, #1024	; 0x400
    e4f8:	bne	e4e4 <ReadInt32Data+0xd70>
    e4fc:	mov	r6, r8
    e500:	ldr	r2, [sp, #12]
    e504:	add	r0, r9, #256	; 0x100
    e508:	add	sl, sl, #1024	; 0x400
    e50c:	add	r1, r5, #1024	; 0x400
    e510:	add	r6, r4, r8
    e514:	ldr	r4, [sp, #20]
    e518:	cmp	r0, r2
    e51c:	blt	e4bc <ReadInt32Data+0xd48>
    e520:	ldr	r1, [sp, #4]
    e524:	cmp	r0, r1
    e528:	bge	f310 <ReadInt32Data+0x1b9c>
    e52c:	sub	r7, r1, r0
    e530:	ldr	r3, [r4]
    e534:	ldr	r1, [sp, #16]
    e538:	add	r4, sp, #96	; 0x60
    e53c:	mov	r0, r4
    e540:	mov	r2, r7
    e544:	bl	18b8 <fread@plt>
    e548:	add	r6, r0, r6
    e54c:	cmp	r7, #1
    e550:	blt	f310 <ReadInt32Data+0x1b9c>
    e554:	ldr	r0, [sp, #12]
    e558:	mov	r7, r6
    e55c:	sub	r6, r0, r9
    e560:	mov	r0, r4
    e564:	bl	1c04 <Mat_uint32Swap>
    e568:	str	r0, [r5], #4
    e56c:	subs	r6, r6, #1
    e570:	add	r4, r4, #4
    e574:	bne	e560 <ReadInt32Data+0xdec>
    e578:	b	f1d0 <ReadInt32Data+0x1a5c>
    e57c:	sub	r0, r8, #256	; 0x100
    e580:	add	r1, sl, #1024	; 0x400
    e584:	add	r7, sp, #96	; 0x60
    e588:	mov	r6, #0
    e58c:	str	r9, [sp, #16]
    e590:	str	r8, [sp, #4]
    e594:	str	r0, [sp, #12]
    e598:	mov	r0, #0
    e59c:	mov	r5, r1
    e5a0:	ldr	r3, [r4]
    e5a4:	ldr	r1, [sp, #16]
    e5a8:	mov	r9, r0
    e5ac:	mov	r0, r7
    e5b0:	mov	r2, #256	; 0x100
    e5b4:	mov	r8, r6
    e5b8:	bl	18b8 <fread@plt>
    e5bc:	mov	r4, r0
    e5c0:	mov	r6, #0
    e5c4:	add	r0, r7, r6
    e5c8:	bl	1c44 <Mat_floatSwap>
    e5cc:	vcvt.s32.f32	s0, s0
    e5d0:	vmov	r0, s0
    e5d4:	str	r0, [sl, r6]
    e5d8:	add	r6, r6, #4
    e5dc:	cmp	r6, #1024	; 0x400
    e5e0:	bne	e5c4 <ReadInt32Data+0xe50>
    e5e4:	mov	r6, r8
    e5e8:	ldr	r2, [sp, #12]
    e5ec:	add	r0, r9, #256	; 0x100
    e5f0:	add	sl, sl, #1024	; 0x400
    e5f4:	add	r1, r5, #1024	; 0x400
    e5f8:	add	r6, r4, r8
    e5fc:	ldr	r4, [sp, #20]
    e600:	cmp	r0, r2
    e604:	blt	e59c <ReadInt32Data+0xe28>
    e608:	ldr	r1, [sp, #4]
    e60c:	cmp	r0, r1
    e610:	bge	f310 <ReadInt32Data+0x1b9c>
    e614:	mov	r7, r6
    e618:	sub	r6, r1, r0
    e61c:	ldr	r3, [r4]
    e620:	ldr	r1, [sp, #16]
    e624:	add	r4, sp, #96	; 0x60
    e628:	mov	r0, r4
    e62c:	mov	r2, r6
    e630:	bl	18b8 <fread@plt>
    e634:	add	r7, r0, r7
    e638:	cmp	r6, #1
    e63c:	blt	f1d0 <ReadInt32Data+0x1a5c>
    e640:	ldr	r0, [sp, #12]
    e644:	sub	r6, r0, r9
    e648:	mov	r0, r4
    e64c:	bl	1c44 <Mat_floatSwap>
    e650:	vcvt.s32.f32	s0, s0
    e654:	subs	r6, r6, #1
    e658:	add	r4, r4, #4
    e65c:	vmov	r0, s0
    e660:	str	r0, [r5], #4
    e664:	bne	e648 <ReadInt32Data+0xed4>
    e668:	b	f1d0 <ReadInt32Data+0x1a5c>
    e66c:	sub	r0, r8, #256	; 0x100
    e670:	add	r1, sl, #1024	; 0x400
    e674:	mov	r6, #0
    e678:	str	r9, [sp, #16]
    e67c:	str	r8, [sp, #4]
    e680:	str	r0, [sp, #12]
    e684:	mov	r0, #0
    e688:	mov	r5, r1
    e68c:	ldr	r3, [r4]
    e690:	ldr	r1, [sp, #16]
    e694:	add	r4, sp, #96	; 0x60
    e698:	mov	r9, r0
    e69c:	mov	r2, #256	; 0x100
    e6a0:	mov	r8, r6
    e6a4:	mov	r0, r4
    e6a8:	bl	18b8 <fread@plt>
    e6ac:	mov	r7, r0
    e6b0:	mov	r6, #0
    e6b4:	mov	r0, r4
    e6b8:	bl	1c88 <Mat_doubleSwap>
    e6bc:	vcvt.s32.f64	s0, d0
    e6c0:	add	r4, r4, #8
    e6c4:	vmov	r0, s0
    e6c8:	str	r0, [sl, r6, lsl #2]
    e6cc:	add	r6, r6, #1
    e6d0:	cmp	r6, #256	; 0x100
    e6d4:	bne	e6b4 <ReadInt32Data+0xf40>
    e6d8:	ldr	r2, [sp, #12]
    e6dc:	ldr	r4, [sp, #20]
    e6e0:	mov	r6, r8
    e6e4:	add	r0, r9, #256	; 0x100
    e6e8:	add	sl, sl, #1024	; 0x400
    e6ec:	add	r1, r5, #1024	; 0x400
    e6f0:	add	r6, r7, r8
    e6f4:	cmp	r0, r2
    e6f8:	blt	e688 <ReadInt32Data+0xf14>
    e6fc:	ldr	r1, [sp, #4]
    e700:	cmp	r0, r1
    e704:	bge	f310 <ReadInt32Data+0x1b9c>
    e708:	mov	r7, r6
    e70c:	sub	r6, r1, r0
    e710:	ldr	r3, [r4]
    e714:	ldr	r1, [sp, #16]
    e718:	add	r4, sp, #96	; 0x60
    e71c:	mov	r0, r4
    e720:	mov	r2, r6
    e724:	bl	18b8 <fread@plt>
    e728:	add	r7, r0, r7
    e72c:	cmp	r6, #1
    e730:	blt	f1d0 <ReadInt32Data+0x1a5c>
    e734:	ldr	r0, [sp, #12]
    e738:	sub	r6, r0, r9
    e73c:	mov	r0, r4
    e740:	bl	1c88 <Mat_doubleSwap>
    e744:	vcvt.s32.f64	s0, d0
    e748:	subs	r6, r6, #1
    e74c:	add	r4, r4, #8
    e750:	vmov	r0, s0
    e754:	str	r0, [r5], #4
    e758:	bne	e73c <ReadInt32Data+0xfc8>
    e75c:	b	f1d0 <ReadInt32Data+0x1a5c>
    e760:	sub	r0, r8, #256	; 0x100
    e764:	str	r9, [sp, #16]
    e768:	add	r1, sl, #1024	; 0x400
    e76c:	mov	r6, sl
    e770:	mov	r9, #0
    e774:	str	r5, [sp]
    e778:	str	r8, [sp, #4]
    e77c:	str	r0, [sp, #8]
    e780:	mov	r0, #0
    e784:	mov	r5, r1
    e788:	ldr	r3, [r4]
    e78c:	ldr	r1, [sp, #16]
    e790:	add	r7, sp, #96	; 0x60
    e794:	str	r0, [sp, #12]
    e798:	mov	r2, #256	; 0x100
    e79c:	mov	r0, r7
    e7a0:	bl	18b8 <fread@plt>
    e7a4:	mov	r8, r0
    e7a8:	mov	r4, #0
    e7ac:	mov	r0, r7
    e7b0:	bl	1b84 <Mat_int64Swap>
    e7b4:	str	r0, [r6, r4, lsl #2]
    e7b8:	add	r4, r4, #1
    e7bc:	add	r7, r7, #8
    e7c0:	cmp	r4, #256	; 0x100
    e7c4:	bne	e7ac <ReadInt32Data+0x1038>
    e7c8:	ldr	r0, [sp, #12]
    e7cc:	ldr	r2, [sp, #8]
    e7d0:	ldr	r4, [sp, #20]
    e7d4:	add	r9, r8, r9
    e7d8:	add	r6, r6, #1024	; 0x400
    e7dc:	add	r1, r5, #1024	; 0x400
    e7e0:	add	r0, r0, #256	; 0x100
    e7e4:	cmp	r0, r2
    e7e8:	blt	e784 <ReadInt32Data+0x1010>
    e7ec:	ldr	r8, [sp, #4]
    e7f0:	cmp	r0, r8
    e7f4:	bge	efd8 <ReadInt32Data+0x1864>
    e7f8:	mov	r1, r4
    e7fc:	sub	r4, r8, r0
    e800:	add	r7, sp, #96	; 0x60
    e804:	ldr	r3, [r1]
    e808:	ldr	r1, [sp, #16]
    e80c:	mov	r0, r7
    e810:	mov	r2, r4
    e814:	bl	18b8 <fread@plt>
    e818:	mov	r6, r9
    e81c:	cmp	r4, #1
    e820:	add	r6, r0, r9
    e824:	blt	efc4 <ReadInt32Data+0x1850>
    e828:	ldr	r0, [sp, #8]
    e82c:	ldr	r1, [sp, #12]
    e830:	sub	r4, r0, r1
    e834:	mov	r0, r7
    e838:	bl	1b84 <Mat_int64Swap>
    e83c:	str	r0, [r5], #4
    e840:	subs	r4, r4, #1
    e844:	add	r7, r7, #8
    e848:	bne	e834 <ReadInt32Data+0x10c0>
    e84c:	b	efc4 <ReadInt32Data+0x1850>
    e850:	sub	r1, r8, #256	; 0x100
    e854:	add	r0, sl, #1024	; 0x400
    e858:	mov	r2, #256	; 0x100
    e85c:	add	r7, sp, #96	; 0x60
    e860:	add	r5, sp, #40	; 0x28
    e864:	mov	r6, sl
    e868:	mov	r4, #0
    e86c:	str	r9, [sp, #16]
    e870:	str	r8, [sp, #4]
    e874:	str	r1, [sp, #8]
    e878:	mov	r1, #0
    e87c:	mov	r9, r0
    e880:	ldr	r0, [sp, #20]
    e884:	str	r1, [sp, #12]
    e888:	ldr	r1, [sp, #16]
    e88c:	mov	r8, r2
    e890:	mov	r2, #256	; 0x100
    e894:	ldr	r3, [r0]
    e898:	mov	r0, r7
    e89c:	bl	18b8 <fread@plt>
    e8a0:	mov	r1, r6
    e8a4:	mov	r2, #0
    e8a8:	ldr	r3, [r7, r2]
    e8ac:	str	r3, [sp, #40]	; 0x28
    e8b0:	add	r3, r7, r2
    e8b4:	add	r2, r2, #8
    e8b8:	ldr	r3, [r3, #4]
    e8bc:	cmp	r2, #512	; 0x200
    e8c0:	str	r3, [sp, #44]	; 0x2c
    e8c4:	vld1.16	{d16}, [r5 :64]
    e8c8:	vmovl.s16	q8, d16
    e8cc:	vst1.32	{d16-d17}, [r1]!
    e8d0:	bne	e8a8 <ReadInt32Data+0x1134>
    e8d4:	mov	r1, r8
    e8d8:	ldr	r3, [sp, #8]
    e8dc:	add	r4, r0, r4
    e8e0:	add	r6, r6, #1024	; 0x400
    e8e4:	add	r0, r9, #1024	; 0x400
    e8e8:	add	r2, r8, #256	; 0x100
    e8ec:	ldr	r1, [sp, #12]
    e8f0:	add	r1, r1, #256	; 0x100
    e8f4:	cmp	r1, r3
    e8f8:	blt	e87c <ReadInt32Data+0x1108>
    e8fc:	ldr	r0, [sp, #4]
    e900:	cmp	r1, r0
    e904:	bge	efcc <ReadInt32Data+0x1858>
    e908:	sub	r5, r0, r1
    e90c:	ldr	r0, [sp, #20]
    e910:	ldr	r1, [sp, #16]
    e914:	add	r7, sp, #96	; 0x60
    e918:	mov	r2, r5
    e91c:	ldr	r3, [r0]
    e920:	mov	r0, r7
    e924:	bl	18b8 <fread@plt>
    e928:	mov	r6, r4
    e92c:	cmp	r5, #1
    e930:	add	r6, r0, r4
    e934:	blt	f310 <ReadInt32Data+0x1b9c>
    e938:	ldr	r4, [sp, #12]
    e93c:	mov	r0, #0
    e940:	cmp	r5, #4
    e944:	bcc	e994 <ReadInt32Data+0x1220>
    e948:	ldr	r0, [sp, #8]
    e94c:	mov	ip, r6
    e950:	add	r2, sp, #32
    e954:	sub	r0, r0, r4
    e958:	bic	r1, r0, #3
    e95c:	bic	r0, r5, #3
    e960:	ldr	r3, [r7]
    e964:	ldr	r6, [r7, #4]
    e968:	subs	r1, r1, #4
    e96c:	add	r7, r7, #8
    e970:	str	r6, [sp, #36]	; 0x24
    e974:	str	r3, [sp, #32]
    e978:	vld1.16	{d16}, [r2 :64]
    e97c:	vmovl.s16	q8, d16
    e980:	vst1.32	{d16-d17}, [r9]!
    e984:	bne	e960 <ReadInt32Data+0x11ec>
    e988:	cmp	r5, r0
    e98c:	mov	r6, ip
    e990:	beq	f310 <ReadInt32Data+0x1b9c>
    e994:	ldr	r3, [sp, #8]
    e998:	add	r1, sp, #96	; 0x60
    e99c:	add	r2, r0, r8
    e9a0:	add	r1, r1, r0, lsl #1
    e9a4:	add	r2, sl, r2, lsl #2
    e9a8:	sub	r3, r3, r4
    e9ac:	sub	r0, r3, r0
    e9b0:	ldrsh	r3, [r1], #2
    e9b4:	subs	r0, r0, #1
    e9b8:	str	r3, [r2], #4
    e9bc:	bne	e9b0 <ReadInt32Data+0x123c>
    e9c0:	b	f310 <ReadInt32Data+0x1b9c>
    e9c4:	sub	r1, r8, #256	; 0x100
    e9c8:	add	r0, sl, #1024	; 0x400
    e9cc:	mov	r2, #256	; 0x100
    e9d0:	add	r7, sp, #96	; 0x60
    e9d4:	add	r5, sp, #64	; 0x40
    e9d8:	mov	r6, sl
    e9dc:	mov	r4, #0
    e9e0:	str	r9, [sp, #16]
    e9e4:	str	r8, [sp, #4]
    e9e8:	str	r1, [sp, #8]
    e9ec:	mov	r1, #0
    e9f0:	mov	r9, r0
    e9f4:	ldr	r0, [sp, #20]
    e9f8:	str	r1, [sp, #12]
    e9fc:	ldr	r1, [sp, #16]
    ea00:	mov	r8, r2
    ea04:	mov	r2, #256	; 0x100
    ea08:	ldr	r3, [r0]
    ea0c:	mov	r0, r7
    ea10:	bl	18b8 <fread@plt>
    ea14:	mov	r1, r6
    ea18:	mov	r2, #0
    ea1c:	ldr	r3, [r7, r2]
    ea20:	str	r3, [sp, #64]	; 0x40
    ea24:	add	r3, r7, r2
    ea28:	add	r2, r2, #8
    ea2c:	ldr	r3, [r3, #4]
    ea30:	cmp	r2, #512	; 0x200
    ea34:	str	r3, [sp, #68]	; 0x44
    ea38:	vld1.16	{d16}, [r5 :64]
    ea3c:	vmovl.u16	q8, d16
    ea40:	vst1.32	{d16-d17}, [r1]!
    ea44:	bne	ea1c <ReadInt32Data+0x12a8>
    ea48:	mov	r1, r8
    ea4c:	ldr	r3, [sp, #8]
    ea50:	add	r4, r0, r4
    ea54:	add	r6, r6, #1024	; 0x400
    ea58:	add	r0, r9, #1024	; 0x400
    ea5c:	add	r2, r8, #256	; 0x100
    ea60:	ldr	r1, [sp, #12]
    ea64:	add	r1, r1, #256	; 0x100
    ea68:	cmp	r1, r3
    ea6c:	blt	e9f0 <ReadInt32Data+0x127c>
    ea70:	ldr	r0, [sp, #4]
    ea74:	cmp	r1, r0
    ea78:	bge	efcc <ReadInt32Data+0x1858>
    ea7c:	sub	r5, r0, r1
    ea80:	ldr	r0, [sp, #20]
    ea84:	ldr	r1, [sp, #16]
    ea88:	add	r7, sp, #96	; 0x60
    ea8c:	mov	r2, r5
    ea90:	ldr	r3, [r0]
    ea94:	mov	r0, r7
    ea98:	bl	18b8 <fread@plt>
    ea9c:	mov	r6, r4
    eaa0:	cmp	r5, #1
    eaa4:	add	r6, r0, r4
    eaa8:	blt	f310 <ReadInt32Data+0x1b9c>
    eaac:	ldr	r4, [sp, #12]
    eab0:	mov	r0, #0
    eab4:	cmp	r5, #4
    eab8:	bcc	eb08 <ReadInt32Data+0x1394>
    eabc:	ldr	r0, [sp, #8]
    eac0:	mov	ip, r6
    eac4:	add	r2, sp, #56	; 0x38
    eac8:	sub	r0, r0, r4
    eacc:	bic	r1, r0, #3
    ead0:	bic	r0, r5, #3
    ead4:	ldr	r3, [r7]
    ead8:	ldr	r6, [r7, #4]
    eadc:	subs	r1, r1, #4
    eae0:	add	r7, r7, #8
    eae4:	str	r6, [sp, #60]	; 0x3c
    eae8:	str	r3, [sp, #56]	; 0x38
    eaec:	vld1.16	{d16}, [r2 :64]
    eaf0:	vmovl.u16	q8, d16
    eaf4:	vst1.32	{d16-d17}, [r9]!
    eaf8:	bne	ead4 <ReadInt32Data+0x1360>
    eafc:	cmp	r5, r0
    eb00:	mov	r6, ip
    eb04:	beq	f310 <ReadInt32Data+0x1b9c>
    eb08:	ldr	r3, [sp, #8]
    eb0c:	add	r1, sp, #96	; 0x60
    eb10:	add	r2, r0, r8
    eb14:	add	r1, r1, r0, lsl #1
    eb18:	add	r2, sl, r2, lsl #2
    eb1c:	sub	r3, r3, r4
    eb20:	sub	r0, r3, r0
    eb24:	ldrh	r3, [r1], #2
    eb28:	subs	r0, r0, #1
    eb2c:	str	r3, [r2], #4
    eb30:	bne	eb24 <ReadInt32Data+0x13b0>
    eb34:	b	f310 <ReadInt32Data+0x1b9c>
    eb38:	sub	r0, r8, #256	; 0x100
    eb3c:	lsl	r7, r8, #2
    eb40:	str	r8, [sp, #4]
    eb44:	mov	r5, #0
    eb48:	add	r8, sp, #96	; 0x60
    eb4c:	mov	r6, #0
    eb50:	str	r0, [sp, #16]
    eb54:	ldr	r3, [r4]
    eb58:	mov	r0, r8
    eb5c:	mov	r1, r9
    eb60:	mov	r2, #256	; 0x100
    eb64:	bl	18b8 <fread@plt>
    eb68:	mov	r4, r0
    eb6c:	add	r0, sl, r5, lsl #2
    eb70:	mov	r1, r8
    eb74:	mov	r2, #1024	; 0x400
    eb78:	bl	181c <memcpy@plt>
    eb7c:	ldr	r0, [sp, #16]
    eb80:	add	r6, r4, r6
    eb84:	ldr	r4, [sp, #20]
    eb88:	add	r5, r5, #256	; 0x100
    eb8c:	sub	r7, r7, #1024	; 0x400
    eb90:	cmp	r5, r0
    eb94:	blt	eb54 <ReadInt32Data+0x13e0>
    eb98:	ldr	r0, [sp, #4]
    eb9c:	cmp	r5, r0
    eba0:	bge	f320 <ReadInt32Data+0x1bac>
    eba4:	mov	r1, r4
    eba8:	sub	r4, r0, r5
    ebac:	add	r0, sp, #96	; 0x60
    ebb0:	ldr	r3, [r1]
    ebb4:	mov	r1, r9
    ebb8:	mov	r2, r4
    ebbc:	bl	18b8 <fread@plt>
    ebc0:	add	r6, r0, r6
    ebc4:	cmp	r4, #1
    ebc8:	blt	f320 <ReadInt32Data+0x1bac>
    ebcc:	add	r0, sl, r5, lsl #2
    ebd0:	add	r1, sp, #96	; 0x60
    ebd4:	mov	r2, r7
    ebd8:	bl	181c <memcpy@plt>
    ebdc:	b	f320 <ReadInt32Data+0x1bac>
    ebe0:	sub	r1, r8, #256	; 0x100
    ebe4:	str	r8, [sp, #4]
    ebe8:	add	r0, sl, #1024	; 0x400
    ebec:	mov	r2, #256	; 0x100
    ebf0:	add	r7, sp, #96	; 0x60
    ebf4:	mov	r6, sl
    ebf8:	mov	r8, #0
    ebfc:	str	r9, [sp, #16]
    ec00:	str	r1, [sp, #12]
    ec04:	mov	r1, #0
    ec08:	mov	r5, r0
    ec0c:	ldr	r0, [sp, #20]
    ec10:	mov	r9, r1
    ec14:	ldr	r1, [sp, #16]
    ec18:	mov	r4, r2
    ec1c:	mov	r2, #256	; 0x100
    ec20:	ldr	r3, [r0]
    ec24:	mov	r0, r7
    ec28:	bl	18b8 <fread@plt>
    ec2c:	mov	r1, #0
    ec30:	add	r2, r7, r1
    ec34:	vld1.32	{d16-d17}, [r2]
    ec38:	add	r2, r6, r1
    ec3c:	add	r1, r1, #16
    ec40:	cmp	r1, #1024	; 0x400
    ec44:	vcvt.s32.f32	q8, q8
    ec48:	vst1.32	{d16-d17}, [r2]
    ec4c:	bne	ec30 <ReadInt32Data+0x14bc>
    ec50:	ldr	r3, [sp, #12]
    ec54:	add	r1, r9, #256	; 0x100
    ec58:	add	r8, r0, r8
    ec5c:	add	r6, r6, #1024	; 0x400
    ec60:	add	r0, r5, #1024	; 0x400
    ec64:	add	r2, r4, #256	; 0x100
    ec68:	cmp	r1, r3
    ec6c:	blt	ec08 <ReadInt32Data+0x1494>
    ec70:	ldr	r0, [sp, #4]
    ec74:	cmp	r1, r0
    ec78:	bge	f318 <ReadInt32Data+0x1ba4>
    ec7c:	sub	r6, r0, r1
    ec80:	ldr	r0, [sp, #20]
    ec84:	ldr	r1, [sp, #16]
    ec88:	add	r7, sp, #96	; 0x60
    ec8c:	mov	r2, r6
    ec90:	ldr	r3, [r0]
    ec94:	mov	r0, r7
    ec98:	bl	18b8 <fread@plt>
    ec9c:	mov	r2, r6
    eca0:	mov	r6, r8
    eca4:	add	r6, r0, r8
    eca8:	cmp	r2, #1
    ecac:	blt	f310 <ReadInt32Data+0x1b9c>
    ecb0:	mov	r0, #0
    ecb4:	cmp	r2, #4
    ecb8:	bcc	ece8 <ReadInt32Data+0x1574>
    ecbc:	ldr	r0, [sp, #12]
    ecc0:	sub	r0, r0, r9
    ecc4:	bic	r1, r0, #3
    ecc8:	bic	r0, r2, #3
    eccc:	vld1.32	{d16-d17}, [r7]!
    ecd0:	subs	r1, r1, #4
    ecd4:	vcvt.s32.f32	q8, q8
    ecd8:	vst1.32	{d16-d17}, [r5]!
    ecdc:	bne	eccc <ReadInt32Data+0x1558>
    ece0:	cmp	r2, r0
    ece4:	beq	f310 <ReadInt32Data+0x1b9c>
    ece8:	ldr	r3, [sp, #12]
    ecec:	add	r1, sp, #96	; 0x60
    ecf0:	add	r2, r0, r4
    ecf4:	add	r1, r1, r0, lsl #2
    ecf8:	add	r2, sl, r2, lsl #2
    ecfc:	sub	r3, r3, r9
    ed00:	sub	r0, r3, r0
    ed04:	vldr	s0, [r1]
    ed08:	subs	r0, r0, #1
    ed0c:	add	r1, r1, #4
    ed10:	vcvt.s32.f32	s0, s0
    ed14:	vmov	r3, s0
    ed18:	str	r3, [r2], #4
    ed1c:	bne	ed04 <ReadInt32Data+0x1590>
    ed20:	b	f310 <ReadInt32Data+0x1b9c>
    ed24:	sub	r1, r8, #256	; 0x100
    ed28:	str	r9, [sp, #16]
    ed2c:	add	r0, sl, #1024	; 0x400
    ed30:	mov	r2, #256	; 0x100
    ed34:	mov	r6, sl
    ed38:	mov	r9, #0
    ed3c:	str	r8, [sp, #4]
    ed40:	str	r1, [sp, #12]
    ed44:	mov	r1, #0
    ed48:	mov	r8, r1
    ed4c:	ldr	r3, [r4]
    ed50:	ldr	r1, [sp, #16]
    ed54:	add	r4, sp, #96	; 0x60
    ed58:	mov	r7, r2
    ed5c:	mov	r5, r0
    ed60:	mov	r2, #256	; 0x100
    ed64:	mov	r0, r4
    ed68:	bl	18b8 <fread@plt>
    ed6c:	mov	r1, #0
    ed70:	mov	r2, r4
    ed74:	vld1.64	{d16-d17}, [r2]!
    ed78:	vcvt.s32.f64	s0, d16
    ed7c:	vmov	r3, s0
    ed80:	vcvt.s32.f64	s0, d17
    ed84:	vmov.32	d16[0], r3
    ed88:	add	r3, r6, r1
    ed8c:	vmov	r4, s0
    ed90:	add	r1, r1, #8
    ed94:	vmov.32	d16[1], r4
    ed98:	cmp	r1, #1024	; 0x400
    ed9c:	vstr	d16, [r3]
    eda0:	bne	ed74 <ReadInt32Data+0x1600>
    eda4:	ldr	r3, [sp, #12]
    eda8:	ldr	r4, [sp, #20]
    edac:	add	r1, r8, #256	; 0x100
    edb0:	add	r9, r0, r9
    edb4:	add	r6, r6, #1024	; 0x400
    edb8:	add	r0, r5, #1024	; 0x400
    edbc:	add	r2, r7, #256	; 0x100
    edc0:	cmp	r1, r3
    edc4:	blt	ed48 <ReadInt32Data+0x15d4>
    edc8:	ldr	r0, [sp, #4]
    edcc:	cmp	r1, r0
    edd0:	bge	efe8 <ReadInt32Data+0x1874>
    edd4:	sub	r6, r0, r1
    edd8:	ldr	r3, [r4]
    eddc:	ldr	r1, [sp, #16]
    ede0:	add	r4, sp, #96	; 0x60
    ede4:	mov	r0, r4
    ede8:	mov	r2, r6
    edec:	bl	18b8 <fread@plt>
    edf0:	mov	r3, r6
    edf4:	mov	r6, r9
    edf8:	add	r6, r0, r9
    edfc:	cmp	r3, #1
    ee00:	blt	f310 <ReadInt32Data+0x1b9c>
    ee04:	ldr	r9, [sp, #16]
    ee08:	mov	r0, #0
    ee0c:	beq	ee50 <ReadInt32Data+0x16dc>
    ee10:	ldr	r0, [sp, #12]
    ee14:	sub	r0, r0, r8
    ee18:	bic	r1, r0, #1
    ee1c:	bic	r0, r3, #1
    ee20:	vld1.64	{d16-d17}, [r4]!
    ee24:	subs	r1, r1, #2
    ee28:	vcvt.s32.f64	s0, d16
    ee2c:	vcvt.s32.f64	s2, d17
    ee30:	vmov	r2, s0
    ee34:	vmov.32	d16[0], r2
    ee38:	vmov	r2, s2
    ee3c:	vmov.32	d16[1], r2
    ee40:	vst1.32	{d16}, [r5]!
    ee44:	bne	ee20 <ReadInt32Data+0x16ac>
    ee48:	cmp	r3, r0
    ee4c:	beq	f320 <ReadInt32Data+0x1bac>
    ee50:	ldr	r3, [sp, #12]
    ee54:	add	r1, sp, #96	; 0x60
    ee58:	add	r2, r0, r7
    ee5c:	add	r1, r1, r0, lsl #3
    ee60:	add	r2, sl, r2, lsl #2
    ee64:	sub	r3, r3, r8
    ee68:	sub	r0, r3, r0
    ee6c:	vldr	d16, [r1]
    ee70:	subs	r0, r0, #1
    ee74:	add	r1, r1, #8
    ee78:	vcvt.s32.f64	s0, d16
    ee7c:	vmov	r3, s0
    ee80:	str	r3, [r2], #4
    ee84:	bne	ee6c <ReadInt32Data+0x16f8>
    ee88:	b	f320 <ReadInt32Data+0x1bac>
    ee8c:	sub	r1, r8, #256	; 0x100
    ee90:	str	r5, [sp]
    ee94:	str	r8, [sp, #4]
    ee98:	add	r0, sl, #1024	; 0x400
    ee9c:	mov	r2, #256	; 0x100
    eea0:	add	r5, sp, #96	; 0x60
    eea4:	mov	r6, sl
    eea8:	mov	r8, #0
    eeac:	str	r9, [sp, #16]
    eeb0:	str	r1, [sp, #12]
    eeb4:	mov	r1, #0
    eeb8:	mov	r4, r0
    eebc:	ldr	r0, [sp, #20]
    eec0:	mov	r9, r1
    eec4:	ldr	r1, [sp, #16]
    eec8:	mov	r7, r2
    eecc:	mov	r2, #256	; 0x100
    eed0:	ldr	r3, [r0]
    eed4:	mov	r0, r5
    eed8:	bl	18b8 <fread@plt>
    eedc:	mov	r1, #0
    eee0:	mov	r2, r5
    eee4:	vld1.64	{d16-d17}, [r2]!
    eee8:	add	r3, r6, r1
    eeec:	add	r1, r1, #8
    eef0:	cmp	r1, #1024	; 0x400
    eef4:	vmovn.i64	d16, q8
    eef8:	vstr	d16, [r3]
    eefc:	bne	eee4 <ReadInt32Data+0x1770>
    ef00:	ldr	r3, [sp, #12]
    ef04:	add	r1, r9, #256	; 0x100
    ef08:	add	r8, r0, r8
    ef0c:	add	r6, r6, #1024	; 0x400
    ef10:	add	r0, r4, #1024	; 0x400
    ef14:	add	r2, r7, #256	; 0x100
    ef18:	cmp	r1, r3
    ef1c:	blt	eeb8 <ReadInt32Data+0x1744>
    ef20:	ldr	r0, [sp, #4]
    ef24:	cmp	r1, r0
    ef28:	bge	eff8 <ReadInt32Data+0x1884>
    ef2c:	sub	r6, r0, r1
    ef30:	ldr	r0, [sp, #20]
    ef34:	ldr	r1, [sp, #16]
    ef38:	add	r5, sp, #96	; 0x60
    ef3c:	mov	r2, r6
    ef40:	ldr	r3, [r0]
    ef44:	mov	r0, r5
    ef48:	bl	18b8 <fread@plt>
    ef4c:	mov	r2, r6
    ef50:	mov	r6, r8
    ef54:	add	r6, r0, r8
    ef58:	cmp	r2, #1
    ef5c:	blt	f008 <ReadInt32Data+0x1894>
    ef60:	ldr	r8, [sp, #4]
    ef64:	mov	r0, #0
    ef68:	beq	ef98 <ReadInt32Data+0x1824>
    ef6c:	ldr	r0, [sp, #12]
    ef70:	sub	r0, r0, r9
    ef74:	bic	r1, r0, #1
    ef78:	bic	r0, r2, #1
    ef7c:	vld1.64	{d16-d17}, [r5]!
    ef80:	subs	r1, r1, #2
    ef84:	vmovn.i64	d16, q8
    ef88:	vst1.32	{d16}, [r4]!
    ef8c:	bne	ef7c <ReadInt32Data+0x1808>
    ef90:	cmp	r2, r0
    ef94:	beq	efc4 <ReadInt32Data+0x1850>
    ef98:	ldr	r3, [sp, #12]
    ef9c:	add	r1, sp, #96	; 0x60
    efa0:	add	r2, r0, r7
    efa4:	add	r1, r1, r0, lsl #3
    efa8:	add	r2, sl, r2, lsl #2
    efac:	sub	r3, r3, r9
    efb0:	sub	r0, r3, r0
    efb4:	ldr	r3, [r1], #8
    efb8:	subs	r0, r0, #1
    efbc:	str	r3, [r2], #4
    efc0:	bne	efb4 <ReadInt32Data+0x1840>
    efc4:	ldr	r9, [sp, #16]
    efc8:	b	f010 <ReadInt32Data+0x189c>
    efcc:	ldr	r9, [sp, #16]
    efd0:	mov	r6, r4
    efd4:	b	f320 <ReadInt32Data+0x1bac>
    efd8:	ldr	r0, [sp, #16]
    efdc:	mov	r6, r9
    efe0:	mov	r9, r0
    efe4:	b	f014 <ReadInt32Data+0x18a0>
    efe8:	ldr	r0, [sp, #16]
    efec:	mov	r6, r9
    eff0:	mov	r9, r0
    eff4:	b	f320 <ReadInt32Data+0x1bac>
    eff8:	ldr	r9, [sp, #16]
    effc:	mov	r6, r8
    f000:	mov	r8, r0
    f004:	b	f010 <ReadInt32Data+0x189c>
    f008:	ldr	r9, [sp, #16]
    f00c:	ldr	r8, [sp, #4]
    f010:	ldr	r4, [sp, #20]
    f014:	ldr	r5, [sp]
    f018:	cmp	r5, #13
    f01c:	bne	f320 <ReadInt32Data+0x1bac>
    f020:	ldr	r0, [r4, #20]
    f024:	cmp	r0, #0
    f028:	beq	f074 <ReadInt32Data+0x1900>
    f02c:	cmp	r8, #256	; 0x100
    f030:	bgt	f0f4 <ReadInt32Data+0x1980>
    f034:	ldr	r3, [r4]
    f038:	add	r4, sp, #96	; 0x60
    f03c:	mov	r1, r9
    f040:	mov	r2, r8
    f044:	mov	r0, r4
    f048:	bl	18b8 <fread@plt>
    f04c:	add	r6, r0, r6
    f050:	cmp	r8, #1
    f054:	blt	f320 <ReadInt32Data+0x1bac>
    f058:	mov	r0, r4
    f05c:	bl	1bd4 <Mat_uint64Swap>
    f060:	str	r0, [sl], #4
    f064:	subs	r8, r8, #1
    f068:	add	r4, r4, #8
    f06c:	bne	f058 <ReadInt32Data+0x18e4>
    f070:	b	f320 <ReadInt32Data+0x1bac>
    f074:	cmp	r8, #256	; 0x100
    f078:	bgt	f1dc <ReadInt32Data+0x1a68>
    f07c:	ldr	r3, [r4]
    f080:	add	r4, sp, #96	; 0x60
    f084:	mov	r1, r9
    f088:	mov	r2, r8
    f08c:	mov	r0, r4
    f090:	bl	18b8 <fread@plt>
    f094:	add	r6, r0, r6
    f098:	cmp	r8, #1
    f09c:	blt	f320 <ReadInt32Data+0x1bac>
    f0a0:	mov	r0, #0
    f0a4:	beq	f0d0 <ReadInt32Data+0x195c>
    f0a8:	bic	r0, r8, #1
    f0ac:	mov	r2, sl
    f0b0:	mov	r1, r0
    f0b4:	vld1.64	{d16-d17}, [r4]!
    f0b8:	subs	r1, r1, #2
    f0bc:	vmovn.i64	d16, q8
    f0c0:	vst1.32	{d16}, [r2]!
    f0c4:	bne	f0b4 <ReadInt32Data+0x1940>
    f0c8:	cmp	r0, r8
    f0cc:	beq	f320 <ReadInt32Data+0x1bac>
    f0d0:	add	r3, sp, #96	; 0x60
    f0d4:	sub	r1, r8, r0
    f0d8:	add	r2, sl, r0, lsl #2
    f0dc:	add	r0, r3, r0, lsl #3
    f0e0:	ldr	r3, [r0], #8
    f0e4:	subs	r1, r1, #1
    f0e8:	str	r3, [r2], #4
    f0ec:	bne	f0e0 <ReadInt32Data+0x196c>
    f0f0:	b	f320 <ReadInt32Data+0x1bac>
    f0f4:	sub	r0, r8, #256	; 0x100
    f0f8:	add	r1, sl, #1024	; 0x400
    f0fc:	str	r9, [sp, #16]
    f100:	str	r8, [sp, #4]
    f104:	str	r0, [sp, #12]
    f108:	mov	r0, #0
    f10c:	mov	r5, r1
    f110:	ldr	r3, [r4]
    f114:	ldr	r1, [sp, #16]
    f118:	add	r4, sp, #96	; 0x60
    f11c:	mov	r9, r0
    f120:	mov	r2, #256	; 0x100
    f124:	mov	r8, r6
    f128:	mov	r0, r4
    f12c:	bl	18b8 <fread@plt>
    f130:	mov	r7, r0
    f134:	mov	r6, #0
    f138:	mov	r0, r4
    f13c:	bl	1bd4 <Mat_uint64Swap>
    f140:	str	r0, [sl, r6, lsl #2]
    f144:	add	r6, r6, #1
    f148:	add	r4, r4, #8
    f14c:	cmp	r6, #256	; 0x100
    f150:	bne	f138 <ReadInt32Data+0x19c4>
    f154:	ldr	r2, [sp, #12]
    f158:	ldr	r4, [sp, #20]
    f15c:	mov	r6, r8
    f160:	add	r0, r9, #256	; 0x100
    f164:	add	sl, sl, #1024	; 0x400
    f168:	add	r1, r5, #1024	; 0x400
    f16c:	add	r6, r7, r8
    f170:	cmp	r0, r2
    f174:	blt	f10c <ReadInt32Data+0x1998>
    f178:	ldr	r1, [sp, #4]
    f17c:	cmp	r0, r1
    f180:	bge	f310 <ReadInt32Data+0x1b9c>
    f184:	mov	r7, r6
    f188:	sub	r6, r1, r0
    f18c:	ldr	r3, [r4]
    f190:	ldr	r1, [sp, #16]
    f194:	add	r4, sp, #96	; 0x60
    f198:	mov	r0, r4
    f19c:	mov	r2, r6
    f1a0:	bl	18b8 <fread@plt>
    f1a4:	add	r7, r0, r7
    f1a8:	cmp	r6, #1
    f1ac:	blt	f1d0 <ReadInt32Data+0x1a5c>
    f1b0:	ldr	r0, [sp, #12]
    f1b4:	sub	r6, r0, r9
    f1b8:	mov	r0, r4
    f1bc:	bl	1bd4 <Mat_uint64Swap>
    f1c0:	str	r0, [r5], #4
    f1c4:	subs	r6, r6, #1
    f1c8:	add	r4, r4, #8
    f1cc:	bne	f1b8 <ReadInt32Data+0x1a44>
    f1d0:	ldr	r9, [sp, #16]
    f1d4:	mov	r6, r7
    f1d8:	b	f320 <ReadInt32Data+0x1bac>
    f1dc:	mov	r1, r8
    f1e0:	mov	r8, r6
    f1e4:	str	r9, [sp, #16]
    f1e8:	add	r0, sl, #1024	; 0x400
    f1ec:	mov	r2, #256	; 0x100
    f1f0:	add	r9, sp, #96	; 0x60
    f1f4:	mov	r6, sl
    f1f8:	str	r1, [sp, #4]
    f1fc:	sub	r1, r1, #256	; 0x100
    f200:	str	r1, [sp, #12]
    f204:	mov	r1, #0
    f208:	mov	r4, r0
    f20c:	ldr	r0, [sp, #20]
    f210:	mov	r7, r1
    f214:	ldr	r1, [sp, #16]
    f218:	mov	r5, r2
    f21c:	mov	r2, #256	; 0x100
    f220:	ldr	r3, [r0]
    f224:	mov	r0, r9
    f228:	bl	18b8 <fread@plt>
    f22c:	mov	r1, #0
    f230:	mov	r2, r9
    f234:	vld1.64	{d16-d17}, [r2]!
    f238:	add	r3, r6, r1
    f23c:	add	r1, r1, #8
    f240:	cmp	r1, #1024	; 0x400
    f244:	vmovn.i64	d16, q8
    f248:	vstr	d16, [r3]
    f24c:	bne	f234 <ReadInt32Data+0x1ac0>
    f250:	ldr	r3, [sp, #12]
    f254:	add	r1, r7, #256	; 0x100
    f258:	add	r8, r0, r8
    f25c:	add	r6, r6, #1024	; 0x400
    f260:	add	r0, r4, #1024	; 0x400
    f264:	add	r2, r5, #256	; 0x100
    f268:	cmp	r1, r3
    f26c:	blt	f208 <ReadInt32Data+0x1a94>
    f270:	ldr	r0, [sp, #4]
    f274:	cmp	r1, r0
    f278:	bge	f318 <ReadInt32Data+0x1ba4>
    f27c:	sub	r6, r0, r1
    f280:	ldr	r0, [sp, #20]
    f284:	ldr	r1, [sp, #16]
    f288:	add	r9, sp, #96	; 0x60
    f28c:	mov	r2, r6
    f290:	ldr	r3, [r0]
    f294:	mov	r0, r9
    f298:	bl	18b8 <fread@plt>
    f29c:	mov	r2, r6
    f2a0:	mov	r6, r8
    f2a4:	add	r6, r0, r8
    f2a8:	cmp	r2, #1
    f2ac:	blt	f310 <ReadInt32Data+0x1b9c>
    f2b0:	mov	r0, #0
    f2b4:	beq	f2e4 <ReadInt32Data+0x1b70>
    f2b8:	ldr	r0, [sp, #12]
    f2bc:	sub	r0, r0, r7
    f2c0:	bic	r1, r0, #1
    f2c4:	bic	r0, r2, #1
    f2c8:	vld1.64	{d16-d17}, [r9]!
    f2cc:	subs	r1, r1, #2
    f2d0:	vmovn.i64	d16, q8
    f2d4:	vst1.32	{d16}, [r4]!
    f2d8:	bne	f2c8 <ReadInt32Data+0x1b54>
    f2dc:	cmp	r2, r0
    f2e0:	beq	f310 <ReadInt32Data+0x1b9c>
    f2e4:	ldr	r3, [sp, #12]
    f2e8:	add	r1, sp, #96	; 0x60
    f2ec:	add	r2, r0, r5
    f2f0:	add	r1, r1, r0, lsl #3
    f2f4:	add	r2, sl, r2, lsl #2
    f2f8:	sub	r3, r3, r7
    f2fc:	sub	r0, r3, r0
    f300:	ldr	r3, [r1], #8
    f304:	subs	r0, r0, #1
    f308:	str	r3, [r2], #4
    f30c:	bne	f300 <ReadInt32Data+0x1b8c>
    f310:	ldr	r9, [sp, #16]
    f314:	b	f320 <ReadInt32Data+0x1bac>
    f318:	ldr	r9, [sp, #16]
    f31c:	mov	r6, r8
    f320:	mul	r0, r6, r9
    f324:	sub	sp, fp, #28
    f328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f32c <ReadCompressedInt32Data>:
    f32c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f330:	add	fp, sp, #28
    f334:	sub	sp, sp, #12
    f338:	mov	r7, r0
    f33c:	mov	r0, #0
    f340:	cmp	r1, #0
    f344:	beq	f358 <ReadCompressedInt32Data+0x2c>
    f348:	cmp	r7, #0
    f34c:	movne	r5, r2
    f350:	cmpne	r2, #0
    f354:	bne	f360 <ReadCompressedInt32Data+0x34>
    f358:	sub	sp, fp, #28
    f35c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f360:	ldr	sl, [fp, #8]
    f364:	mov	r0, r3
    f368:	mov	r4, r3
    f36c:	mov	r6, r1
    f370:	bl	1924 <Mat_SizeOf@plt>
    f374:	mov	r9, r0
    f378:	sub	r0, r4, #1
    f37c:	cmp	r0, #12
    f380:	bhi	f850 <ReadCompressedInt32Data+0x524>
    f384:	add	r1, pc, #4
    f388:	ldr	r0, [r1, r0, lsl #2]
    f38c:	add	pc, r1, r0
    f390:	.word	0x00000034
    f394:	.word	0x0000006c
    f398:	.word	0x000000a4
    f39c:	.word	0x000000ec
    f3a0:	.word	0x00000134
    f3a4:	.word	0x0000017c
    f3a8:	.word	0x000001c4
    f3ac:	.word	0x000004c0
    f3b0:	.word	0x00000214
    f3b4:	.word	0x000004c0
    f3b8:	.word	0x000004c0
    f3bc:	.word	0x00000264
    f3c0:	.word	0x000002ac
    f3c4:	cmp	sl, #1
    f3c8:	blt	f850 <ReadCompressedInt32Data+0x524>
    f3cc:	mov	r8, sp
    f3d0:	mov	r4, sl
    f3d4:	mov	r0, r7
    f3d8:	mov	r1, r6
    f3dc:	mov	r2, r8
    f3e0:	mov	r3, r9
    f3e4:	bl	32b8 <InflateData>
    f3e8:	ldrsb	r0, [sp]
    f3ec:	subs	r4, r4, #1
    f3f0:	str	r0, [r5], #4
    f3f4:	bne	f3d4 <ReadCompressedInt32Data+0xa8>
    f3f8:	b	f850 <ReadCompressedInt32Data+0x524>
    f3fc:	cmp	sl, #1
    f400:	blt	f850 <ReadCompressedInt32Data+0x524>
    f404:	mov	r8, sp
    f408:	mov	r4, sl
    f40c:	mov	r0, r7
    f410:	mov	r1, r6
    f414:	mov	r2, r8
    f418:	mov	r3, r9
    f41c:	bl	32b8 <InflateData>
    f420:	ldrb	r0, [sp]
    f424:	subs	r4, r4, #1
    f428:	str	r0, [r5], #4
    f42c:	bne	f40c <ReadCompressedInt32Data+0xe0>
    f430:	b	f850 <ReadCompressedInt32Data+0x524>
    f434:	ldr	r0, [r7, #20]
    f438:	cmp	r0, #0
    f43c:	beq	f684 <ReadCompressedInt32Data+0x358>
    f440:	cmp	sl, #1
    f444:	blt	f850 <ReadCompressedInt32Data+0x524>
    f448:	mov	r8, sp
    f44c:	mov	r4, sl
    f450:	mov	r0, r7
    f454:	mov	r1, r6
    f458:	mov	r2, r8
    f45c:	mov	r3, r9
    f460:	bl	32b8 <InflateData>
    f464:	mov	r0, r8
    f468:	bl	1c18 <Mat_int16Swap>
    f46c:	str	r0, [r5], #4
    f470:	subs	r4, r4, #1
    f474:	bne	f450 <ReadCompressedInt32Data+0x124>
    f478:	b	f850 <ReadCompressedInt32Data+0x524>
    f47c:	ldr	r0, [r7, #20]
    f480:	cmp	r0, #0
    f484:	beq	f6bc <ReadCompressedInt32Data+0x390>
    f488:	cmp	sl, #1
    f48c:	blt	f850 <ReadCompressedInt32Data+0x524>
    f490:	mov	r8, sp
    f494:	mov	r4, sl
    f498:	mov	r0, r7
    f49c:	mov	r1, r6
    f4a0:	mov	r2, r8
    f4a4:	mov	r3, r9
    f4a8:	bl	32b8 <InflateData>
    f4ac:	mov	r0, r8
    f4b0:	bl	1c2c <Mat_uint16Swap>
    f4b4:	str	r0, [r5], #4
    f4b8:	subs	r4, r4, #1
    f4bc:	bne	f498 <ReadCompressedInt32Data+0x16c>
    f4c0:	b	f850 <ReadCompressedInt32Data+0x524>
    f4c4:	ldr	r0, [r7, #20]
    f4c8:	cmp	r0, #0
    f4cc:	beq	f6f4 <ReadCompressedInt32Data+0x3c8>
    f4d0:	cmp	sl, #1
    f4d4:	blt	f850 <ReadCompressedInt32Data+0x524>
    f4d8:	mov	r8, sp
    f4dc:	mov	r4, sl
    f4e0:	mov	r0, r7
    f4e4:	mov	r1, r6
    f4e8:	mov	r2, r8
    f4ec:	mov	r3, r9
    f4f0:	bl	32b8 <InflateData>
    f4f4:	mov	r0, r8
    f4f8:	bl	1bf0 <Mat_int32Swap>
    f4fc:	str	r0, [r5], #4
    f500:	subs	r4, r4, #1
    f504:	bne	f4e0 <ReadCompressedInt32Data+0x1b4>
    f508:	b	f850 <ReadCompressedInt32Data+0x524>
    f50c:	ldr	r0, [r7, #20]
    f510:	cmp	r0, #0
    f514:	beq	f72c <ReadCompressedInt32Data+0x400>
    f518:	cmp	sl, #1
    f51c:	blt	f850 <ReadCompressedInt32Data+0x524>
    f520:	mov	r8, sp
    f524:	mov	r4, sl
    f528:	mov	r0, r7
    f52c:	mov	r1, r6
    f530:	mov	r2, r8
    f534:	mov	r3, r9
    f538:	bl	32b8 <InflateData>
    f53c:	mov	r0, r8
    f540:	bl	1c04 <Mat_uint32Swap>
    f544:	str	r0, [r5], #4
    f548:	subs	r4, r4, #1
    f54c:	bne	f528 <ReadCompressedInt32Data+0x1fc>
    f550:	b	f850 <ReadCompressedInt32Data+0x524>
    f554:	ldr	r0, [r7, #20]
    f558:	cmp	r0, #0
    f55c:	beq	f764 <ReadCompressedInt32Data+0x438>
    f560:	cmp	sl, #1
    f564:	blt	f850 <ReadCompressedInt32Data+0x524>
    f568:	mov	r8, sp
    f56c:	mov	r4, sl
    f570:	mov	r0, r7
    f574:	mov	r1, r6
    f578:	mov	r2, r8
    f57c:	mov	r3, r9
    f580:	bl	32b8 <InflateData>
    f584:	mov	r0, r8
    f588:	bl	1c44 <Mat_floatSwap>
    f58c:	vcvt.s32.f32	s0, s0
    f590:	subs	r4, r4, #1
    f594:	vmov	r0, s0
    f598:	str	r0, [r5], #4
    f59c:	bne	f570 <ReadCompressedInt32Data+0x244>
    f5a0:	b	f850 <ReadCompressedInt32Data+0x524>
    f5a4:	ldr	r0, [r7, #20]
    f5a8:	cmp	r0, #0
    f5ac:	beq	f7a4 <ReadCompressedInt32Data+0x478>
    f5b0:	cmp	sl, #1
    f5b4:	blt	f850 <ReadCompressedInt32Data+0x524>
    f5b8:	mov	r8, sp
    f5bc:	mov	r4, sl
    f5c0:	mov	r0, r7
    f5c4:	mov	r1, r6
    f5c8:	mov	r2, r8
    f5cc:	mov	r3, r9
    f5d0:	bl	32b8 <InflateData>
    f5d4:	mov	r0, r8
    f5d8:	bl	1c88 <Mat_doubleSwap>
    f5dc:	vcvt.s32.f64	s0, d0
    f5e0:	subs	r4, r4, #1
    f5e4:	vmov	r0, s0
    f5e8:	str	r0, [r5], #4
    f5ec:	bne	f5c0 <ReadCompressedInt32Data+0x294>
    f5f0:	b	f850 <ReadCompressedInt32Data+0x524>
    f5f4:	ldr	r0, [r7, #20]
    f5f8:	cmp	r0, #0
    f5fc:	beq	f7e4 <ReadCompressedInt32Data+0x4b8>
    f600:	cmp	sl, #1
    f604:	blt	f850 <ReadCompressedInt32Data+0x524>
    f608:	mov	r8, sp
    f60c:	mov	r4, sl
    f610:	mov	r0, r7
    f614:	mov	r1, r6
    f618:	mov	r2, r8
    f61c:	mov	r3, r9
    f620:	bl	32b8 <InflateData>
    f624:	mov	r0, r8
    f628:	bl	1b84 <Mat_int64Swap>
    f62c:	str	r0, [r5], #4
    f630:	subs	r4, r4, #1
    f634:	bne	f610 <ReadCompressedInt32Data+0x2e4>
    f638:	b	f850 <ReadCompressedInt32Data+0x524>
    f63c:	ldr	r0, [r7, #20]
    f640:	cmp	r0, #0
    f644:	beq	f81c <ReadCompressedInt32Data+0x4f0>
    f648:	cmp	sl, #1
    f64c:	blt	f850 <ReadCompressedInt32Data+0x524>
    f650:	mov	r8, sp
    f654:	mov	r4, sl
    f658:	mov	r0, r7
    f65c:	mov	r1, r6
    f660:	mov	r2, r8
    f664:	mov	r3, r9
    f668:	bl	32b8 <InflateData>
    f66c:	mov	r0, r8
    f670:	bl	1bd4 <Mat_uint64Swap>
    f674:	str	r0, [r5], #4
    f678:	subs	r4, r4, #1
    f67c:	bne	f658 <ReadCompressedInt32Data+0x32c>
    f680:	b	f850 <ReadCompressedInt32Data+0x524>
    f684:	cmp	sl, #1
    f688:	blt	f850 <ReadCompressedInt32Data+0x524>
    f68c:	mov	r8, sp
    f690:	mov	r4, sl
    f694:	mov	r0, r7
    f698:	mov	r1, r6
    f69c:	mov	r2, r8
    f6a0:	mov	r3, r9
    f6a4:	bl	32b8 <InflateData>
    f6a8:	ldrsh	r0, [sp]
    f6ac:	subs	r4, r4, #1
    f6b0:	str	r0, [r5], #4
    f6b4:	bne	f694 <ReadCompressedInt32Data+0x368>
    f6b8:	b	f850 <ReadCompressedInt32Data+0x524>
    f6bc:	cmp	sl, #1
    f6c0:	blt	f850 <ReadCompressedInt32Data+0x524>
    f6c4:	mov	r8, sp
    f6c8:	mov	r4, sl
    f6cc:	mov	r0, r7
    f6d0:	mov	r1, r6
    f6d4:	mov	r2, r8
    f6d8:	mov	r3, r9
    f6dc:	bl	32b8 <InflateData>
    f6e0:	ldrh	r0, [sp]
    f6e4:	subs	r4, r4, #1
    f6e8:	str	r0, [r5], #4
    f6ec:	bne	f6cc <ReadCompressedInt32Data+0x3a0>
    f6f0:	b	f850 <ReadCompressedInt32Data+0x524>
    f6f4:	cmp	sl, #1
    f6f8:	blt	f850 <ReadCompressedInt32Data+0x524>
    f6fc:	mov	r8, sp
    f700:	mov	r4, sl
    f704:	mov	r0, r7
    f708:	mov	r1, r6
    f70c:	mov	r2, r8
    f710:	mov	r3, r9
    f714:	bl	32b8 <InflateData>
    f718:	ldr	r0, [sp]
    f71c:	subs	r4, r4, #1
    f720:	str	r0, [r5], #4
    f724:	bne	f704 <ReadCompressedInt32Data+0x3d8>
    f728:	b	f850 <ReadCompressedInt32Data+0x524>
    f72c:	cmp	sl, #1
    f730:	blt	f850 <ReadCompressedInt32Data+0x524>
    f734:	mov	r8, sp
    f738:	mov	r4, sl
    f73c:	mov	r0, r7
    f740:	mov	r1, r6
    f744:	mov	r2, r8
    f748:	mov	r3, r9
    f74c:	bl	32b8 <InflateData>
    f750:	ldr	r0, [sp]
    f754:	subs	r4, r4, #1
    f758:	str	r0, [r5], #4
    f75c:	bne	f73c <ReadCompressedInt32Data+0x410>
    f760:	b	f850 <ReadCompressedInt32Data+0x524>
    f764:	cmp	sl, #1
    f768:	blt	f850 <ReadCompressedInt32Data+0x524>
    f76c:	mov	r8, sp
    f770:	mov	r4, sl
    f774:	mov	r0, r7
    f778:	mov	r1, r6
    f77c:	mov	r2, r8
    f780:	mov	r3, r9
    f784:	bl	32b8 <InflateData>
    f788:	vldr	s0, [sp]
    f78c:	subs	r4, r4, #1
    f790:	vcvt.s32.f32	s0, s0
    f794:	vmov	r0, s0
    f798:	str	r0, [r5], #4
    f79c:	bne	f774 <ReadCompressedInt32Data+0x448>
    f7a0:	b	f850 <ReadCompressedInt32Data+0x524>
    f7a4:	cmp	sl, #1
    f7a8:	blt	f850 <ReadCompressedInt32Data+0x524>
    f7ac:	mov	r8, sp
    f7b0:	mov	r4, sl
    f7b4:	mov	r0, r7
    f7b8:	mov	r1, r6
    f7bc:	mov	r2, r8
    f7c0:	mov	r3, r9
    f7c4:	bl	32b8 <InflateData>
    f7c8:	vldr	d16, [sp]
    f7cc:	subs	r4, r4, #1
    f7d0:	vcvt.s32.f64	s0, d16
    f7d4:	vmov	r0, s0
    f7d8:	str	r0, [r5], #4
    f7dc:	bne	f7b4 <ReadCompressedInt32Data+0x488>
    f7e0:	b	f850 <ReadCompressedInt32Data+0x524>
    f7e4:	cmp	sl, #1
    f7e8:	blt	f850 <ReadCompressedInt32Data+0x524>
    f7ec:	mov	r8, sp
    f7f0:	mov	r4, sl
    f7f4:	mov	r0, r7
    f7f8:	mov	r1, r6
    f7fc:	mov	r2, r8
    f800:	mov	r3, r9
    f804:	bl	32b8 <InflateData>
    f808:	ldr	r0, [sp]
    f80c:	subs	r4, r4, #1
    f810:	str	r0, [r5], #4
    f814:	bne	f7f4 <ReadCompressedInt32Data+0x4c8>
    f818:	b	f850 <ReadCompressedInt32Data+0x524>
    f81c:	cmp	sl, #1
    f820:	blt	f850 <ReadCompressedInt32Data+0x524>
    f824:	mov	r8, sp
    f828:	mov	r4, sl
    f82c:	mov	r0, r7
    f830:	mov	r1, r6
    f834:	mov	r2, r8
    f838:	mov	r3, r9
    f83c:	bl	32b8 <InflateData>
    f840:	ldr	r0, [sp]
    f844:	subs	r4, r4, #1
    f848:	str	r0, [r5], #4
    f84c:	bne	f82c <ReadCompressedInt32Data+0x500>
    f850:	mul	r0, r9, sl
    f854:	sub	sp, fp, #28
    f858:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f85c <ReadUInt32Data>:
    f85c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f860:	add	fp, sp, #28
    f864:	sub	sp, sp, #100	; 0x64
    f868:	sub	sp, sp, #2048	; 0x800
    f86c:	mov	r4, r0
    f870:	mov	r0, #0
    f874:	cmp	r4, #0
    f878:	beq	f890 <ReadUInt32Data+0x34>
    f87c:	cmp	r1, #0
    f880:	mov	sl, r1
    f884:	ldrne	r1, [r4]
    f888:	cmpne	r1, #0
    f88c:	bne	f898 <ReadUInt32Data+0x3c>
    f890:	sub	sp, fp, #28
    f894:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f898:	mov	r0, r2
    f89c:	mov	r8, r3
    f8a0:	mov	r5, r2
    f8a4:	bl	1924 <Mat_SizeOf@plt>
    f8a8:	mov	r9, r0
    f8ac:	sub	r0, r5, #1
    f8b0:	mov	r6, #0
    f8b4:	str	r4, [sp, #20]
    f8b8:	cmp	r0, #11
    f8bc:	bhi	11100 <ReadUInt32Data+0x18a4>
    f8c0:	add	r1, pc, #4
    f8c4:	ldr	r0, [r1, r0, lsl #2]
    f8c8:	add	pc, r1, r0
    f8cc:	.word	0x00000030
    f8d0:	.word	0x000000c4
    f8d4:	.word	0x00000158
    f8d8:	.word	0x000001ac
    f8dc:	.word	0x00000200
    f8e0:	.word	0x00000254
    f8e4:	.word	0x000002a8
    f8e8:	.word	0x00001834
    f8ec:	.word	0x00000304
    f8f0:	.word	0x00001834
    f8f4:	.word	0x00001834
    f8f8:	.word	0x00000360
    f8fc:	cmp	r8, #256	; 0x100
    f900:	bgt	fc8c <ReadUInt32Data+0x430>
    f904:	ldr	r3, [r4]
    f908:	add	r4, sp, #96	; 0x60
    f90c:	mov	r1, r9
    f910:	mov	r2, r8
    f914:	mov	r0, r4
    f918:	bl	18b8 <fread@plt>
    f91c:	mov	r6, r0
    f920:	cmp	r8, #1
    f924:	blt	11408 <ReadUInt32Data+0x1bac>
    f928:	mov	r0, #0
    f92c:	cmp	r8, #4
    f930:	bcc	f96c <ReadUInt32Data+0x110>
    f934:	bic	r0, r8, #3
    f938:	add	r1, sp, #72	; 0x48
    f93c:	mov	r3, sl
    f940:	mov	r2, r0
    f944:	ldr	r7, [r4], #4
    f948:	subs	r2, r2, #4
    f94c:	str	r7, [sp, #72]	; 0x48
    f950:	vld1.32	{d16[0]}, [r1 :32]
    f954:	vmovl.s8	q8, d16
    f958:	vmovl.s16	q8, d16
    f95c:	vst1.32	{d16-d17}, [r3]!
    f960:	bne	f944 <ReadUInt32Data+0xe8>
    f964:	cmp	r0, r8
    f968:	beq	11408 <ReadUInt32Data+0x1bac>
    f96c:	add	r3, sp, #96	; 0x60
    f970:	sub	r1, r8, r0
    f974:	add	r2, sl, r0, lsl #2
    f978:	add	r0, r3, r0
    f97c:	ldrsb	r3, [r0], #1
    f980:	subs	r1, r1, #1
    f984:	str	r3, [r2], #4
    f988:	bne	f97c <ReadUInt32Data+0x120>
    f98c:	b	11408 <ReadUInt32Data+0x1bac>
    f990:	cmp	r8, #256	; 0x100
    f994:	bgt	fde8 <ReadUInt32Data+0x58c>
    f998:	ldr	r3, [r4]
    f99c:	add	r4, sp, #96	; 0x60
    f9a0:	mov	r1, r9
    f9a4:	mov	r2, r8
    f9a8:	mov	r0, r4
    f9ac:	bl	18b8 <fread@plt>
    f9b0:	mov	r6, r0
    f9b4:	cmp	r8, #1
    f9b8:	blt	11408 <ReadUInt32Data+0x1bac>
    f9bc:	mov	r0, #0
    f9c0:	cmp	r8, #4
    f9c4:	bcc	fa00 <ReadUInt32Data+0x1a4>
    f9c8:	bic	r0, r8, #3
    f9cc:	add	r1, sp, #84	; 0x54
    f9d0:	mov	r3, sl
    f9d4:	mov	r2, r0
    f9d8:	ldr	r7, [r4], #4
    f9dc:	subs	r2, r2, #4
    f9e0:	str	r7, [sp, #84]	; 0x54
    f9e4:	vld1.32	{d16[0]}, [r1 :32]
    f9e8:	vmovl.u8	q8, d16
    f9ec:	vmovl.u16	q8, d16
    f9f0:	vst1.32	{d16-d17}, [r3]!
    f9f4:	bne	f9d8 <ReadUInt32Data+0x17c>
    f9f8:	cmp	r0, r8
    f9fc:	beq	11408 <ReadUInt32Data+0x1bac>
    fa00:	add	r3, sp, #96	; 0x60
    fa04:	sub	r1, r8, r0
    fa08:	add	r2, sl, r0, lsl #2
    fa0c:	add	r0, r3, r0
    fa10:	ldrb	r3, [r0], #1
    fa14:	subs	r1, r1, #1
    fa18:	str	r3, [r2], #4
    fa1c:	bne	fa10 <ReadUInt32Data+0x1b4>
    fa20:	b	11408 <ReadUInt32Data+0x1bac>
    fa24:	ldr	r0, [r4, #20]
    fa28:	cmp	r0, #0
    fa2c:	beq	ff44 <ReadUInt32Data+0x6e8>
    fa30:	cmp	r8, #256	; 0x100
    fa34:	bgt	102e4 <ReadUInt32Data+0xa88>
    fa38:	ldr	r3, [r4]
    fa3c:	add	r4, sp, #96	; 0x60
    fa40:	mov	r1, r9
    fa44:	mov	r2, r8
    fa48:	mov	r0, r4
    fa4c:	bl	18b8 <fread@plt>
    fa50:	mov	r6, r0
    fa54:	cmp	r8, #1
    fa58:	blt	11408 <ReadUInt32Data+0x1bac>
    fa5c:	mov	r0, r4
    fa60:	bl	1c18 <Mat_int16Swap>
    fa64:	str	r0, [sl], #4
    fa68:	subs	r8, r8, #1
    fa6c:	add	r4, r4, #2
    fa70:	bne	fa5c <ReadUInt32Data+0x200>
    fa74:	b	11408 <ReadUInt32Data+0x1bac>
    fa78:	ldr	r0, [r4, #20]
    fa7c:	cmp	r0, #0
    fa80:	beq	ffe8 <ReadUInt32Data+0x78c>
    fa84:	cmp	r8, #256	; 0x100
    fa88:	bgt	103c4 <ReadUInt32Data+0xb68>
    fa8c:	ldr	r3, [r4]
    fa90:	add	r4, sp, #96	; 0x60
    fa94:	mov	r1, r9
    fa98:	mov	r2, r8
    fa9c:	mov	r0, r4
    faa0:	bl	18b8 <fread@plt>
    faa4:	mov	r6, r0
    faa8:	cmp	r8, #1
    faac:	blt	11408 <ReadUInt32Data+0x1bac>
    fab0:	mov	r0, r4
    fab4:	bl	1c2c <Mat_uint16Swap>
    fab8:	str	r0, [sl], #4
    fabc:	subs	r8, r8, #1
    fac0:	add	r4, r4, #2
    fac4:	bne	fab0 <ReadUInt32Data+0x254>
    fac8:	b	11408 <ReadUInt32Data+0x1bac>
    facc:	ldr	r0, [r4, #20]
    fad0:	cmp	r0, #0
    fad4:	beq	1008c <ReadUInt32Data+0x830>
    fad8:	cmp	r8, #256	; 0x100
    fadc:	bgt	104a4 <ReadUInt32Data+0xc48>
    fae0:	ldr	r3, [r4]
    fae4:	add	r4, sp, #96	; 0x60
    fae8:	mov	r1, r9
    faec:	mov	r2, r8
    faf0:	mov	r0, r4
    faf4:	bl	18b8 <fread@plt>
    faf8:	mov	r6, r0
    fafc:	cmp	r8, #1
    fb00:	blt	11408 <ReadUInt32Data+0x1bac>
    fb04:	mov	r0, r4
    fb08:	bl	1bf0 <Mat_int32Swap>
    fb0c:	str	r0, [sl], #4
    fb10:	subs	r8, r8, #1
    fb14:	add	r4, r4, #4
    fb18:	bne	fb04 <ReadUInt32Data+0x2a8>
    fb1c:	b	11408 <ReadUInt32Data+0x1bac>
    fb20:	ldr	r0, [r4, #20]
    fb24:	cmp	r0, #0
    fb28:	beq	100f8 <ReadUInt32Data+0x89c>
    fb2c:	cmp	r8, #256	; 0x100
    fb30:	bgt	10584 <ReadUInt32Data+0xd28>
    fb34:	ldr	r3, [r4]
    fb38:	add	r4, sp, #96	; 0x60
    fb3c:	mov	r1, r9
    fb40:	mov	r2, r8
    fb44:	mov	r0, r4
    fb48:	bl	18b8 <fread@plt>
    fb4c:	mov	r6, r0
    fb50:	cmp	r8, #1
    fb54:	blt	11408 <ReadUInt32Data+0x1bac>
    fb58:	mov	r0, r4
    fb5c:	bl	1c04 <Mat_uint32Swap>
    fb60:	str	r0, [sl], #4
    fb64:	subs	r8, r8, #1
    fb68:	add	r4, r4, #4
    fb6c:	bne	fb58 <ReadUInt32Data+0x2fc>
    fb70:	b	11408 <ReadUInt32Data+0x1bac>
    fb74:	ldr	r0, [r4, #20]
    fb78:	cmp	r0, #0
    fb7c:	beq	10134 <ReadUInt32Data+0x8d8>
    fb80:	cmp	r8, #256	; 0x100
    fb84:	bgt	10664 <ReadUInt32Data+0xe08>
    fb88:	ldr	r3, [r4]
    fb8c:	add	r4, sp, #96	; 0x60
    fb90:	mov	r1, r9
    fb94:	mov	r2, r8
    fb98:	mov	r0, r4
    fb9c:	bl	18b8 <fread@plt>
    fba0:	mov	r6, r0
    fba4:	cmp	r8, #1
    fba8:	blt	11408 <ReadUInt32Data+0x1bac>
    fbac:	mov	r0, r4
    fbb0:	bl	1c44 <Mat_floatSwap>
    fbb4:	vcvt.u32.f32	s0, s0
    fbb8:	subs	r8, r8, #1
    fbbc:	add	r4, r4, #4
    fbc0:	vmov	r0, s0
    fbc4:	str	r0, [sl], #4
    fbc8:	bne	fbac <ReadUInt32Data+0x350>
    fbcc:	b	11408 <ReadUInt32Data+0x1bac>
    fbd0:	ldr	r0, [r4, #20]
    fbd4:	cmp	r0, #0
    fbd8:	beq	101c4 <ReadUInt32Data+0x968>
    fbdc:	cmp	r8, #256	; 0x100
    fbe0:	bgt	10754 <ReadUInt32Data+0xef8>
    fbe4:	ldr	r3, [r4]
    fbe8:	add	r4, sp, #96	; 0x60
    fbec:	mov	r1, r9
    fbf0:	mov	r2, r8
    fbf4:	mov	r0, r4
    fbf8:	bl	18b8 <fread@plt>
    fbfc:	mov	r6, r0
    fc00:	cmp	r8, #1
    fc04:	blt	11408 <ReadUInt32Data+0x1bac>
    fc08:	mov	r0, r4
    fc0c:	bl	1c88 <Mat_doubleSwap>
    fc10:	vcvt.u32.f64	s0, d0
    fc14:	subs	r8, r8, #1
    fc18:	add	r4, r4, #8
    fc1c:	vmov	r0, s0
    fc20:	str	r0, [sl], #4
    fc24:	bne	fc08 <ReadUInt32Data+0x3ac>
    fc28:	b	11408 <ReadUInt32Data+0x1bac>
    fc2c:	ldr	r0, [r4, #20]
    fc30:	cmp	r0, #0
    fc34:	beq	10264 <ReadUInt32Data+0xa08>
    fc38:	cmp	r8, #256	; 0x100
    fc3c:	bgt	10848 <ReadUInt32Data+0xfec>
    fc40:	ldr	r3, [r4]
    fc44:	add	r7, sp, #96	; 0x60
    fc48:	mov	r1, r9
    fc4c:	mov	r2, r8
    fc50:	mov	r0, r7
    fc54:	bl	18b8 <fread@plt>
    fc58:	mov	r6, r0
    fc5c:	cmp	r8, #1
    fc60:	blt	11100 <ReadUInt32Data+0x18a4>
    fc64:	str	r5, [sp]
    fc68:	mov	r4, r8
    fc6c:	mov	r5, sl
    fc70:	mov	r0, r7
    fc74:	bl	1b84 <Mat_int64Swap>
    fc78:	str	r0, [r5], #4
    fc7c:	subs	r4, r4, #1
    fc80:	add	r7, r7, #8
    fc84:	bne	fc70 <ReadUInt32Data+0x414>
    fc88:	b	110f8 <ReadUInt32Data+0x189c>
    fc8c:	sub	r1, r8, #256	; 0x100
    fc90:	str	r8, [sp, #4]
    fc94:	add	r0, sl, #1024	; 0x400
    fc98:	mov	r2, #256	; 0x100
    fc9c:	add	r7, sp, #96	; 0x60
    fca0:	add	r4, sp, #80	; 0x50
    fca4:	mov	r6, sl
    fca8:	mov	r8, #0
    fcac:	str	r9, [sp, #16]
    fcb0:	str	r1, [sp, #8]
    fcb4:	mov	r1, #0
    fcb8:	mov	r9, r0
    fcbc:	ldr	r0, [sp, #20]
    fcc0:	str	r1, [sp, #12]
    fcc4:	ldr	r1, [sp, #16]
    fcc8:	mov	r5, r2
    fccc:	mov	r2, #256	; 0x100
    fcd0:	ldr	r3, [r0]
    fcd4:	mov	r0, r7
    fcd8:	bl	18b8 <fread@plt>
    fcdc:	mov	r1, r6
    fce0:	mov	r2, #0
    fce4:	ldr	r3, [r7, r2]
    fce8:	add	r2, r2, #4
    fcec:	cmp	r2, #256	; 0x100
    fcf0:	str	r3, [sp, #80]	; 0x50
    fcf4:	vld1.32	{d16[0]}, [r4 :32]
    fcf8:	vmovl.s8	q8, d16
    fcfc:	vmovl.s16	q8, d16
    fd00:	vst1.32	{d16-d17}, [r1]!
    fd04:	bne	fce4 <ReadUInt32Data+0x488>
    fd08:	mov	r1, r5
    fd0c:	ldr	r3, [sp, #8]
    fd10:	add	r8, r0, r8
    fd14:	add	r6, r6, #1024	; 0x400
    fd18:	add	r0, r9, #1024	; 0x400
    fd1c:	add	r2, r5, #256	; 0x100
    fd20:	ldr	r1, [sp, #12]
    fd24:	add	r1, r1, #256	; 0x100
    fd28:	cmp	r1, r3
    fd2c:	blt	fcb8 <ReadUInt32Data+0x45c>
    fd30:	ldr	r0, [sp, #4]
    fd34:	cmp	r1, r0
    fd38:	bge	11400 <ReadUInt32Data+0x1ba4>
    fd3c:	sub	r7, r0, r1
    fd40:	ldr	r0, [sp, #20]
    fd44:	ldr	r1, [sp, #16]
    fd48:	add	r4, sp, #96	; 0x60
    fd4c:	mov	r2, r7
    fd50:	ldr	r3, [r0]
    fd54:	mov	r0, r4
    fd58:	bl	18b8 <fread@plt>
    fd5c:	mov	r6, r8
    fd60:	cmp	r7, #1
    fd64:	add	r6, r0, r8
    fd68:	blt	113f8 <ReadUInt32Data+0x1b9c>
    fd6c:	ldr	ip, [sp, #12]
    fd70:	mov	r0, #0
    fd74:	cmp	r7, #4
    fd78:	bcc	fdb8 <ReadUInt32Data+0x55c>
    fd7c:	ldr	r0, [sp, #8]
    fd80:	add	r2, sp, #76	; 0x4c
    fd84:	sub	r0, r0, ip
    fd88:	bic	r1, r0, #3
    fd8c:	bic	r0, r7, #3
    fd90:	ldr	r3, [r4], #4
    fd94:	subs	r1, r1, #4
    fd98:	str	r3, [sp, #76]	; 0x4c
    fd9c:	vld1.32	{d16[0]}, [r2 :32]
    fda0:	vmovl.s8	q8, d16
    fda4:	vmovl.s16	q8, d16
    fda8:	vst1.32	{d16-d17}, [r9]!
    fdac:	bne	fd90 <ReadUInt32Data+0x534>
    fdb0:	cmp	r7, r0
    fdb4:	beq	113f8 <ReadUInt32Data+0x1b9c>
    fdb8:	ldr	r3, [sp, #8]
    fdbc:	add	r1, sp, #96	; 0x60
    fdc0:	add	r2, r0, r5
    fdc4:	add	r1, r1, r0
    fdc8:	add	r2, sl, r2, lsl #2
    fdcc:	sub	r3, r3, ip
    fdd0:	sub	r0, r3, r0
    fdd4:	ldrsb	r3, [r1], #1
    fdd8:	subs	r0, r0, #1
    fddc:	str	r3, [r2], #4
    fde0:	bne	fdd4 <ReadUInt32Data+0x578>
    fde4:	b	113f8 <ReadUInt32Data+0x1b9c>
    fde8:	sub	r1, r8, #256	; 0x100
    fdec:	str	r8, [sp, #4]
    fdf0:	add	r0, sl, #1024	; 0x400
    fdf4:	mov	r2, #256	; 0x100
    fdf8:	add	r7, sp, #96	; 0x60
    fdfc:	add	r5, sp, #92	; 0x5c
    fe00:	mov	r6, sl
    fe04:	mov	r8, #0
    fe08:	str	r9, [sp, #16]
    fe0c:	str	r1, [sp, #8]
    fe10:	mov	r1, #0
    fe14:	mov	r4, r0
    fe18:	ldr	r0, [sp, #20]
    fe1c:	str	r1, [sp, #12]
    fe20:	ldr	r1, [sp, #16]
    fe24:	mov	r9, r2
    fe28:	mov	r2, #256	; 0x100
    fe2c:	ldr	r3, [r0]
    fe30:	mov	r0, r7
    fe34:	bl	18b8 <fread@plt>
    fe38:	mov	r1, r6
    fe3c:	mov	r2, #0
    fe40:	ldr	r3, [r7, r2]
    fe44:	add	r2, r2, #4
    fe48:	cmp	r2, #256	; 0x100
    fe4c:	str	r3, [sp, #92]	; 0x5c
    fe50:	vld1.32	{d16[0]}, [r5 :32]
    fe54:	vmovl.u8	q8, d16
    fe58:	vmovl.u16	q8, d16
    fe5c:	vst1.32	{d16-d17}, [r1]!
    fe60:	bne	fe40 <ReadUInt32Data+0x5e4>
    fe64:	mov	r1, r9
    fe68:	ldr	r3, [sp, #8]
    fe6c:	add	r8, r0, r8
    fe70:	add	r6, r6, #1024	; 0x400
    fe74:	add	r0, r4, #1024	; 0x400
    fe78:	add	r2, r9, #256	; 0x100
    fe7c:	ldr	r1, [sp, #12]
    fe80:	add	r1, r1, #256	; 0x100
    fe84:	cmp	r1, r3
    fe88:	blt	fe14 <ReadUInt32Data+0x5b8>
    fe8c:	ldr	r0, [sp, #4]
    fe90:	cmp	r1, r0
    fe94:	bge	11400 <ReadUInt32Data+0x1ba4>
    fe98:	sub	r5, r0, r1
    fe9c:	ldr	r0, [sp, #20]
    fea0:	ldr	r1, [sp, #16]
    fea4:	add	r7, sp, #96	; 0x60
    fea8:	mov	r2, r5
    feac:	ldr	r3, [r0]
    feb0:	mov	r0, r7
    feb4:	bl	18b8 <fread@plt>
    feb8:	mov	r6, r8
    febc:	cmp	r5, #1
    fec0:	add	r6, r0, r8
    fec4:	blt	113f8 <ReadUInt32Data+0x1b9c>
    fec8:	ldr	ip, [sp, #12]
    fecc:	mov	r0, #0
    fed0:	cmp	r5, #4
    fed4:	bcc	ff14 <ReadUInt32Data+0x6b8>
    fed8:	ldr	r0, [sp, #8]
    fedc:	add	r2, sp, #88	; 0x58
    fee0:	sub	r0, r0, ip
    fee4:	bic	r1, r0, #3
    fee8:	bic	r0, r5, #3
    feec:	ldr	r3, [r7], #4
    fef0:	subs	r1, r1, #4
    fef4:	str	r3, [sp, #88]	; 0x58
    fef8:	vld1.32	{d16[0]}, [r2 :32]
    fefc:	vmovl.u8	q8, d16
    ff00:	vmovl.u16	q8, d16
    ff04:	vst1.32	{d16-d17}, [r4]!
    ff08:	bne	feec <ReadUInt32Data+0x690>
    ff0c:	cmp	r5, r0
    ff10:	beq	113f8 <ReadUInt32Data+0x1b9c>
    ff14:	ldr	r3, [sp, #8]
    ff18:	add	r1, sp, #96	; 0x60
    ff1c:	add	r2, r0, r9
    ff20:	add	r1, r1, r0
    ff24:	add	r2, sl, r2, lsl #2
    ff28:	sub	r3, r3, ip
    ff2c:	sub	r0, r3, r0
    ff30:	ldrb	r3, [r1], #1
    ff34:	subs	r0, r0, #1
    ff38:	str	r3, [r2], #4
    ff3c:	bne	ff30 <ReadUInt32Data+0x6d4>
    ff40:	b	113f8 <ReadUInt32Data+0x1b9c>
    ff44:	cmp	r8, #256	; 0x100
    ff48:	bgt	10938 <ReadUInt32Data+0x10dc>
    ff4c:	ldr	r3, [r4]
    ff50:	add	r4, sp, #96	; 0x60
    ff54:	mov	r1, r9
    ff58:	mov	r2, r8
    ff5c:	mov	r0, r4
    ff60:	bl	18b8 <fread@plt>
    ff64:	mov	r6, r0
    ff68:	cmp	r8, #1
    ff6c:	blt	11408 <ReadUInt32Data+0x1bac>
    ff70:	mov	r0, #0
    ff74:	cmp	r8, #4
    ff78:	bcc	ffc4 <ReadUInt32Data+0x768>
    ff7c:	bic	r0, r8, #3
    ff80:	mov	r5, r6
    ff84:	add	r1, sp, #24
    ff88:	mov	r3, sl
    ff8c:	mov	r2, r0
    ff90:	ldr	r7, [r4]
    ff94:	ldr	r6, [r4, #4]
    ff98:	subs	r2, r2, #4
    ff9c:	add	r4, r4, #8
    ffa0:	str	r6, [sp, #28]
    ffa4:	str	r7, [sp, #24]
    ffa8:	vld1.16	{d16}, [r1 :64]
    ffac:	vmovl.s16	q8, d16
    ffb0:	vst1.32	{d16-d17}, [r3]!
    ffb4:	bne	ff90 <ReadUInt32Data+0x734>
    ffb8:	cmp	r0, r8
    ffbc:	mov	r6, r5
    ffc0:	beq	11408 <ReadUInt32Data+0x1bac>
    ffc4:	add	r3, sp, #96	; 0x60
    ffc8:	sub	r1, r8, r0
    ffcc:	add	r2, sl, r0, lsl #2
    ffd0:	add	r0, r3, r0, lsl #1
    ffd4:	ldrsh	r3, [r0], #2
    ffd8:	subs	r1, r1, #1
    ffdc:	str	r3, [r2], #4
    ffe0:	bne	ffd4 <ReadUInt32Data+0x778>
    ffe4:	b	11408 <ReadUInt32Data+0x1bac>
    ffe8:	cmp	r8, #256	; 0x100
    ffec:	bgt	10aac <ReadUInt32Data+0x1250>
    fff0:	ldr	r3, [r4]
    fff4:	add	r4, sp, #96	; 0x60
    fff8:	mov	r1, r9
    fffc:	mov	r2, r8
   10000:	mov	r0, r4
   10004:	bl	18b8 <fread@plt>
   10008:	mov	r6, r0
   1000c:	cmp	r8, #1
   10010:	blt	11408 <ReadUInt32Data+0x1bac>
   10014:	mov	r0, #0
   10018:	cmp	r8, #4
   1001c:	bcc	10068 <ReadUInt32Data+0x80c>
   10020:	bic	r0, r8, #3
   10024:	mov	r5, r6
   10028:	add	r1, sp, #48	; 0x30
   1002c:	mov	r3, sl
   10030:	mov	r2, r0
   10034:	ldr	r7, [r4]
   10038:	ldr	r6, [r4, #4]
   1003c:	subs	r2, r2, #4
   10040:	add	r4, r4, #8
   10044:	str	r6, [sp, #52]	; 0x34
   10048:	str	r7, [sp, #48]	; 0x30
   1004c:	vld1.16	{d16}, [r1 :64]
   10050:	vmovl.u16	q8, d16
   10054:	vst1.32	{d16-d17}, [r3]!
   10058:	bne	10034 <ReadUInt32Data+0x7d8>
   1005c:	cmp	r0, r8
   10060:	mov	r6, r5
   10064:	beq	11408 <ReadUInt32Data+0x1bac>
   10068:	add	r3, sp, #96	; 0x60
   1006c:	sub	r1, r8, r0
   10070:	add	r2, sl, r0, lsl #2
   10074:	add	r0, r3, r0, lsl #1
   10078:	ldrh	r3, [r0], #2
   1007c:	subs	r1, r1, #1
   10080:	str	r3, [r2], #4
   10084:	bne	10078 <ReadUInt32Data+0x81c>
   10088:	b	11408 <ReadUInt32Data+0x1bac>
   1008c:	cmp	r8, #256	; 0x100
   10090:	ble	10100 <ReadUInt32Data+0x8a4>
   10094:	sub	r0, r8, #256	; 0x100
   10098:	lsl	r7, r8, #2
   1009c:	str	r8, [sp, #4]
   100a0:	mov	r5, #0
   100a4:	add	r8, sp, #96	; 0x60
   100a8:	mov	r6, #0
   100ac:	str	r0, [sp, #16]
   100b0:	ldr	r3, [r4]
   100b4:	mov	r0, r8
   100b8:	mov	r1, r9
   100bc:	mov	r2, #256	; 0x100
   100c0:	bl	18b8 <fread@plt>
   100c4:	mov	r4, r0
   100c8:	add	r0, sl, r5, lsl #2
   100cc:	mov	r1, r8
   100d0:	mov	r2, #1024	; 0x400
   100d4:	bl	181c <memcpy@plt>
   100d8:	ldr	r0, [sp, #16]
   100dc:	add	r6, r4, r6
   100e0:	ldr	r4, [sp, #20]
   100e4:	add	r5, r5, #256	; 0x100
   100e8:	sub	r7, r7, #1024	; 0x400
   100ec:	cmp	r5, r0
   100f0:	blt	100b0 <ReadUInt32Data+0x854>
   100f4:	b	10c80 <ReadUInt32Data+0x1424>
   100f8:	cmp	r8, #256	; 0x100
   100fc:	bgt	10c20 <ReadUInt32Data+0x13c4>
   10100:	ldr	r3, [r4]
   10104:	add	r0, sp, #96	; 0x60
   10108:	mov	r1, r9
   1010c:	mov	r2, r8
   10110:	bl	18b8 <fread@plt>
   10114:	mov	r6, r0
   10118:	cmp	r8, #1
   1011c:	blt	11408 <ReadUInt32Data+0x1bac>
   10120:	lsl	r2, r8, #2
   10124:	add	r1, sp, #96	; 0x60
   10128:	mov	r0, sl
   1012c:	bl	181c <memcpy@plt>
   10130:	b	11408 <ReadUInt32Data+0x1bac>
   10134:	cmp	r8, #256	; 0x100
   10138:	bgt	10cc8 <ReadUInt32Data+0x146c>
   1013c:	ldr	r3, [r4]
   10140:	add	r4, sp, #96	; 0x60
   10144:	mov	r1, r9
   10148:	mov	r2, r8
   1014c:	mov	r0, r4
   10150:	bl	18b8 <fread@plt>
   10154:	mov	r6, r0
   10158:	cmp	r8, #1
   1015c:	blt	11408 <ReadUInt32Data+0x1bac>
   10160:	mov	r0, #0
   10164:	cmp	r8, #4
   10168:	bcc	10194 <ReadUInt32Data+0x938>
   1016c:	bic	r0, r8, #3
   10170:	mov	r2, sl
   10174:	mov	r1, r0
   10178:	vld1.32	{d16-d17}, [r4]!
   1017c:	subs	r1, r1, #4
   10180:	vcvt.u32.f32	q8, q8
   10184:	vst1.32	{d16-d17}, [r2]!
   10188:	bne	10178 <ReadUInt32Data+0x91c>
   1018c:	cmp	r0, r8
   10190:	beq	11408 <ReadUInt32Data+0x1bac>
   10194:	add	r3, sp, #96	; 0x60
   10198:	sub	r1, r8, r0
   1019c:	add	r2, sl, r0, lsl #2
   101a0:	add	r0, r3, r0, lsl #2
   101a4:	vldr	s0, [r0]
   101a8:	subs	r1, r1, #1
   101ac:	add	r0, r0, #4
   101b0:	vcvt.u32.f32	s0, s0
   101b4:	vmov	r3, s0
   101b8:	str	r3, [r2], #4
   101bc:	bne	101a4 <ReadUInt32Data+0x948>
   101c0:	b	11408 <ReadUInt32Data+0x1bac>
   101c4:	cmp	r8, #256	; 0x100
   101c8:	bgt	10e0c <ReadUInt32Data+0x15b0>
   101cc:	ldr	r3, [r4]
   101d0:	add	r4, sp, #96	; 0x60
   101d4:	mov	r1, r9
   101d8:	mov	r2, r8
   101dc:	mov	r0, r4
   101e0:	bl	18b8 <fread@plt>
   101e4:	mov	r6, r0
   101e8:	cmp	r8, #1
   101ec:	blt	11408 <ReadUInt32Data+0x1bac>
   101f0:	mov	r0, #0
   101f4:	beq	10234 <ReadUInt32Data+0x9d8>
   101f8:	bic	r0, r8, #1
   101fc:	mov	r2, sl
   10200:	mov	r1, r0
   10204:	vld1.64	{d16-d17}, [r4]!
   10208:	subs	r1, r1, #2
   1020c:	vcvt.u32.f64	s0, d16
   10210:	vcvt.u32.f64	s2, d17
   10214:	vmov	r3, s0
   10218:	vmov.32	d16[0], r3
   1021c:	vmov	r3, s2
   10220:	vmov.32	d16[1], r3
   10224:	vst1.32	{d16}, [r2]!
   10228:	bne	10204 <ReadUInt32Data+0x9a8>
   1022c:	cmp	r0, r8
   10230:	beq	11408 <ReadUInt32Data+0x1bac>
   10234:	add	r3, sp, #96	; 0x60
   10238:	sub	r1, r8, r0
   1023c:	add	r2, sl, r0, lsl #2
   10240:	add	r0, r3, r0, lsl #3
   10244:	vldr	d16, [r0]
   10248:	subs	r1, r1, #1
   1024c:	add	r0, r0, #8
   10250:	vcvt.u32.f64	s0, d16
   10254:	vmov	r3, s0
   10258:	str	r3, [r2], #4
   1025c:	bne	10244 <ReadUInt32Data+0x9e8>
   10260:	b	11408 <ReadUInt32Data+0x1bac>
   10264:	cmp	r8, #256	; 0x100
   10268:	bgt	10f74 <ReadUInt32Data+0x1718>
   1026c:	ldr	r3, [r4]
   10270:	add	r7, sp, #96	; 0x60
   10274:	mov	r1, r9
   10278:	mov	r2, r8
   1027c:	mov	r0, r7
   10280:	bl	18b8 <fread@plt>
   10284:	mov	r6, r0
   10288:	cmp	r8, #1
   1028c:	blt	11100 <ReadUInt32Data+0x18a4>
   10290:	mov	r0, #0
   10294:	beq	102c0 <ReadUInt32Data+0xa64>
   10298:	bic	r0, r8, #1
   1029c:	mov	r2, sl
   102a0:	mov	r1, r0
   102a4:	vld1.64	{d16-d17}, [r7]!
   102a8:	subs	r1, r1, #2
   102ac:	vmovn.i64	d16, q8
   102b0:	vst1.32	{d16}, [r2]!
   102b4:	bne	102a4 <ReadUInt32Data+0xa48>
   102b8:	cmp	r0, r8
   102bc:	beq	11100 <ReadUInt32Data+0x18a4>
   102c0:	add	r3, sp, #96	; 0x60
   102c4:	sub	r1, r8, r0
   102c8:	add	r2, sl, r0, lsl #2
   102cc:	add	r0, r3, r0, lsl #3
   102d0:	ldr	r3, [r0], #8
   102d4:	subs	r1, r1, #1
   102d8:	str	r3, [r2], #4
   102dc:	bne	102d0 <ReadUInt32Data+0xa74>
   102e0:	b	11100 <ReadUInt32Data+0x18a4>
   102e4:	sub	r0, r8, #256	; 0x100
   102e8:	add	r1, sl, #1024	; 0x400
   102ec:	add	r7, sp, #96	; 0x60
   102f0:	mov	r6, #0
   102f4:	str	r9, [sp, #16]
   102f8:	str	r8, [sp, #4]
   102fc:	str	r0, [sp, #12]
   10300:	mov	r0, #0
   10304:	mov	r5, r1
   10308:	ldr	r3, [r4]
   1030c:	ldr	r1, [sp, #16]
   10310:	mov	r9, r0
   10314:	mov	r0, r7
   10318:	mov	r2, #256	; 0x100
   1031c:	mov	r8, r6
   10320:	bl	18b8 <fread@plt>
   10324:	mov	r4, r0
   10328:	mov	r6, #0
   1032c:	add	r0, r7, r6
   10330:	bl	1c18 <Mat_int16Swap>
   10334:	str	r0, [sl, r6, lsl #1]
   10338:	add	r6, r6, #2
   1033c:	cmp	r6, #512	; 0x200
   10340:	bne	1032c <ReadUInt32Data+0xad0>
   10344:	mov	r6, r8
   10348:	ldr	r2, [sp, #12]
   1034c:	add	r0, r9, #256	; 0x100
   10350:	add	sl, sl, #1024	; 0x400
   10354:	add	r1, r5, #1024	; 0x400
   10358:	add	r6, r4, r8
   1035c:	ldr	r4, [sp, #20]
   10360:	cmp	r0, r2
   10364:	blt	10304 <ReadUInt32Data+0xaa8>
   10368:	ldr	r1, [sp, #4]
   1036c:	cmp	r0, r1
   10370:	bge	113f8 <ReadUInt32Data+0x1b9c>
   10374:	sub	r7, r1, r0
   10378:	ldr	r3, [r4]
   1037c:	ldr	r1, [sp, #16]
   10380:	add	r4, sp, #96	; 0x60
   10384:	mov	r0, r4
   10388:	mov	r2, r7
   1038c:	bl	18b8 <fread@plt>
   10390:	add	r6, r0, r6
   10394:	cmp	r7, #1
   10398:	blt	113f8 <ReadUInt32Data+0x1b9c>
   1039c:	ldr	r0, [sp, #12]
   103a0:	mov	r7, r6
   103a4:	sub	r6, r0, r9
   103a8:	mov	r0, r4
   103ac:	bl	1c18 <Mat_int16Swap>
   103b0:	str	r0, [r5], #4
   103b4:	subs	r6, r6, #1
   103b8:	add	r4, r4, #2
   103bc:	bne	103a8 <ReadUInt32Data+0xb4c>
   103c0:	b	112b8 <ReadUInt32Data+0x1a5c>
   103c4:	sub	r0, r8, #256	; 0x100
   103c8:	add	r1, sl, #1024	; 0x400
   103cc:	add	r7, sp, #96	; 0x60
   103d0:	mov	r6, #0
   103d4:	str	r9, [sp, #16]
   103d8:	str	r8, [sp, #4]
   103dc:	str	r0, [sp, #12]
   103e0:	mov	r0, #0
   103e4:	mov	r5, r1
   103e8:	ldr	r3, [r4]
   103ec:	ldr	r1, [sp, #16]
   103f0:	mov	r9, r0
   103f4:	mov	r0, r7
   103f8:	mov	r2, #256	; 0x100
   103fc:	mov	r8, r6
   10400:	bl	18b8 <fread@plt>
   10404:	mov	r4, r0
   10408:	mov	r6, #0
   1040c:	add	r0, r7, r6
   10410:	bl	1c2c <Mat_uint16Swap>
   10414:	str	r0, [sl, r6, lsl #1]
   10418:	add	r6, r6, #2
   1041c:	cmp	r6, #512	; 0x200
   10420:	bne	1040c <ReadUInt32Data+0xbb0>
   10424:	mov	r6, r8
   10428:	ldr	r2, [sp, #12]
   1042c:	add	r0, r9, #256	; 0x100
   10430:	add	sl, sl, #1024	; 0x400
   10434:	add	r1, r5, #1024	; 0x400
   10438:	add	r6, r4, r8
   1043c:	ldr	r4, [sp, #20]
   10440:	cmp	r0, r2
   10444:	blt	103e4 <ReadUInt32Data+0xb88>
   10448:	ldr	r1, [sp, #4]
   1044c:	cmp	r0, r1
   10450:	bge	113f8 <ReadUInt32Data+0x1b9c>
   10454:	sub	r7, r1, r0
   10458:	ldr	r3, [r4]
   1045c:	ldr	r1, [sp, #16]
   10460:	add	r4, sp, #96	; 0x60
   10464:	mov	r0, r4
   10468:	mov	r2, r7
   1046c:	bl	18b8 <fread@plt>
   10470:	add	r6, r0, r6
   10474:	cmp	r7, #1
   10478:	blt	113f8 <ReadUInt32Data+0x1b9c>
   1047c:	ldr	r0, [sp, #12]
   10480:	mov	r7, r6
   10484:	sub	r6, r0, r9
   10488:	mov	r0, r4
   1048c:	bl	1c2c <Mat_uint16Swap>
   10490:	str	r0, [r5], #4
   10494:	subs	r6, r6, #1
   10498:	add	r4, r4, #2
   1049c:	bne	10488 <ReadUInt32Data+0xc2c>
   104a0:	b	112b8 <ReadUInt32Data+0x1a5c>
   104a4:	sub	r0, r8, #256	; 0x100
   104a8:	add	r1, sl, #1024	; 0x400
   104ac:	add	r7, sp, #96	; 0x60
   104b0:	mov	r6, #0
   104b4:	str	r9, [sp, #16]
   104b8:	str	r8, [sp, #4]
   104bc:	str	r0, [sp, #12]
   104c0:	mov	r0, #0
   104c4:	mov	r5, r1
   104c8:	ldr	r3, [r4]
   104cc:	ldr	r1, [sp, #16]
   104d0:	mov	r9, r0
   104d4:	mov	r0, r7
   104d8:	mov	r2, #256	; 0x100
   104dc:	mov	r8, r6
   104e0:	bl	18b8 <fread@plt>
   104e4:	mov	r4, r0
   104e8:	mov	r6, #0
   104ec:	add	r0, r7, r6
   104f0:	bl	1bf0 <Mat_int32Swap>
   104f4:	str	r0, [sl, r6]
   104f8:	add	r6, r6, #4
   104fc:	cmp	r6, #1024	; 0x400
   10500:	bne	104ec <ReadUInt32Data+0xc90>
   10504:	mov	r6, r8
   10508:	ldr	r2, [sp, #12]
   1050c:	add	r0, r9, #256	; 0x100
   10510:	add	sl, sl, #1024	; 0x400
   10514:	add	r1, r5, #1024	; 0x400
   10518:	add	r6, r4, r8
   1051c:	ldr	r4, [sp, #20]
   10520:	cmp	r0, r2
   10524:	blt	104c4 <ReadUInt32Data+0xc68>
   10528:	ldr	r1, [sp, #4]
   1052c:	cmp	r0, r1
   10530:	bge	113f8 <ReadUInt32Data+0x1b9c>
   10534:	sub	r7, r1, r0
   10538:	ldr	r3, [r4]
   1053c:	ldr	r1, [sp, #16]
   10540:	add	r4, sp, #96	; 0x60
   10544:	mov	r0, r4
   10548:	mov	r2, r7
   1054c:	bl	18b8 <fread@plt>
   10550:	add	r6, r0, r6
   10554:	cmp	r7, #1
   10558:	blt	113f8 <ReadUInt32Data+0x1b9c>
   1055c:	ldr	r0, [sp, #12]
   10560:	mov	r7, r6
   10564:	sub	r6, r0, r9
   10568:	mov	r0, r4
   1056c:	bl	1bf0 <Mat_int32Swap>
   10570:	str	r0, [r5], #4
   10574:	subs	r6, r6, #1
   10578:	add	r4, r4, #4
   1057c:	bne	10568 <ReadUInt32Data+0xd0c>
   10580:	b	112b8 <ReadUInt32Data+0x1a5c>
   10584:	sub	r0, r8, #256	; 0x100
   10588:	add	r1, sl, #1024	; 0x400
   1058c:	add	r7, sp, #96	; 0x60
   10590:	mov	r6, #0
   10594:	str	r9, [sp, #16]
   10598:	str	r8, [sp, #4]
   1059c:	str	r0, [sp, #12]
   105a0:	mov	r0, #0
   105a4:	mov	r5, r1
   105a8:	ldr	r3, [r4]
   105ac:	ldr	r1, [sp, #16]
   105b0:	mov	r9, r0
   105b4:	mov	r0, r7
   105b8:	mov	r2, #256	; 0x100
   105bc:	mov	r8, r6
   105c0:	bl	18b8 <fread@plt>
   105c4:	mov	r4, r0
   105c8:	mov	r6, #0
   105cc:	add	r0, r7, r6
   105d0:	bl	1c04 <Mat_uint32Swap>
   105d4:	str	r0, [sl, r6]
   105d8:	add	r6, r6, #4
   105dc:	cmp	r6, #1024	; 0x400
   105e0:	bne	105cc <ReadUInt32Data+0xd70>
   105e4:	mov	r6, r8
   105e8:	ldr	r2, [sp, #12]
   105ec:	add	r0, r9, #256	; 0x100
   105f0:	add	sl, sl, #1024	; 0x400
   105f4:	add	r1, r5, #1024	; 0x400
   105f8:	add	r6, r4, r8
   105fc:	ldr	r4, [sp, #20]
   10600:	cmp	r0, r2
   10604:	blt	105a4 <ReadUInt32Data+0xd48>
   10608:	ldr	r1, [sp, #4]
   1060c:	cmp	r0, r1
   10610:	bge	113f8 <ReadUInt32Data+0x1b9c>
   10614:	sub	r7, r1, r0
   10618:	ldr	r3, [r4]
   1061c:	ldr	r1, [sp, #16]
   10620:	add	r4, sp, #96	; 0x60
   10624:	mov	r0, r4
   10628:	mov	r2, r7
   1062c:	bl	18b8 <fread@plt>
   10630:	add	r6, r0, r6
   10634:	cmp	r7, #1
   10638:	blt	113f8 <ReadUInt32Data+0x1b9c>
   1063c:	ldr	r0, [sp, #12]
   10640:	mov	r7, r6
   10644:	sub	r6, r0, r9
   10648:	mov	r0, r4
   1064c:	bl	1c04 <Mat_uint32Swap>
   10650:	str	r0, [r5], #4
   10654:	subs	r6, r6, #1
   10658:	add	r4, r4, #4
   1065c:	bne	10648 <ReadUInt32Data+0xdec>
   10660:	b	112b8 <ReadUInt32Data+0x1a5c>
   10664:	sub	r0, r8, #256	; 0x100
   10668:	add	r1, sl, #1024	; 0x400
   1066c:	add	r7, sp, #96	; 0x60
   10670:	mov	r6, #0
   10674:	str	r9, [sp, #16]
   10678:	str	r8, [sp, #4]
   1067c:	str	r0, [sp, #12]
   10680:	mov	r0, #0
   10684:	mov	r5, r1
   10688:	ldr	r3, [r4]
   1068c:	ldr	r1, [sp, #16]
   10690:	mov	r9, r0
   10694:	mov	r0, r7
   10698:	mov	r2, #256	; 0x100
   1069c:	mov	r8, r6
   106a0:	bl	18b8 <fread@plt>
   106a4:	mov	r4, r0
   106a8:	mov	r6, #0
   106ac:	add	r0, r7, r6
   106b0:	bl	1c44 <Mat_floatSwap>
   106b4:	vcvt.u32.f32	s0, s0
   106b8:	vmov	r0, s0
   106bc:	str	r0, [sl, r6]
   106c0:	add	r6, r6, #4
   106c4:	cmp	r6, #1024	; 0x400
   106c8:	bne	106ac <ReadUInt32Data+0xe50>
   106cc:	mov	r6, r8
   106d0:	ldr	r2, [sp, #12]
   106d4:	add	r0, r9, #256	; 0x100
   106d8:	add	sl, sl, #1024	; 0x400
   106dc:	add	r1, r5, #1024	; 0x400
   106e0:	add	r6, r4, r8
   106e4:	ldr	r4, [sp, #20]
   106e8:	cmp	r0, r2
   106ec:	blt	10684 <ReadUInt32Data+0xe28>
   106f0:	ldr	r1, [sp, #4]
   106f4:	cmp	r0, r1
   106f8:	bge	113f8 <ReadUInt32Data+0x1b9c>
   106fc:	mov	r7, r6
   10700:	sub	r6, r1, r0
   10704:	ldr	r3, [r4]
   10708:	ldr	r1, [sp, #16]
   1070c:	add	r4, sp, #96	; 0x60
   10710:	mov	r0, r4
   10714:	mov	r2, r6
   10718:	bl	18b8 <fread@plt>
   1071c:	add	r7, r0, r7
   10720:	cmp	r6, #1
   10724:	blt	112b8 <ReadUInt32Data+0x1a5c>
   10728:	ldr	r0, [sp, #12]
   1072c:	sub	r6, r0, r9
   10730:	mov	r0, r4
   10734:	bl	1c44 <Mat_floatSwap>
   10738:	vcvt.u32.f32	s0, s0
   1073c:	subs	r6, r6, #1
   10740:	add	r4, r4, #4
   10744:	vmov	r0, s0
   10748:	str	r0, [r5], #4
   1074c:	bne	10730 <ReadUInt32Data+0xed4>
   10750:	b	112b8 <ReadUInt32Data+0x1a5c>
   10754:	sub	r0, r8, #256	; 0x100
   10758:	add	r1, sl, #1024	; 0x400
   1075c:	mov	r6, #0
   10760:	str	r9, [sp, #16]
   10764:	str	r8, [sp, #4]
   10768:	str	r0, [sp, #12]
   1076c:	mov	r0, #0
   10770:	mov	r5, r1
   10774:	ldr	r3, [r4]
   10778:	ldr	r1, [sp, #16]
   1077c:	add	r4, sp, #96	; 0x60
   10780:	mov	r9, r0
   10784:	mov	r2, #256	; 0x100
   10788:	mov	r8, r6
   1078c:	mov	r0, r4
   10790:	bl	18b8 <fread@plt>
   10794:	mov	r7, r0
   10798:	mov	r6, #0
   1079c:	mov	r0, r4
   107a0:	bl	1c88 <Mat_doubleSwap>
   107a4:	vcvt.u32.f64	s0, d0
   107a8:	add	r4, r4, #8
   107ac:	vmov	r0, s0
   107b0:	str	r0, [sl, r6, lsl #2]
   107b4:	add	r6, r6, #1
   107b8:	cmp	r6, #256	; 0x100
   107bc:	bne	1079c <ReadUInt32Data+0xf40>
   107c0:	ldr	r2, [sp, #12]
   107c4:	ldr	r4, [sp, #20]
   107c8:	mov	r6, r8
   107cc:	add	r0, r9, #256	; 0x100
   107d0:	add	sl, sl, #1024	; 0x400
   107d4:	add	r1, r5, #1024	; 0x400
   107d8:	add	r6, r7, r8
   107dc:	cmp	r0, r2
   107e0:	blt	10770 <ReadUInt32Data+0xf14>
   107e4:	ldr	r1, [sp, #4]
   107e8:	cmp	r0, r1
   107ec:	bge	113f8 <ReadUInt32Data+0x1b9c>
   107f0:	mov	r7, r6
   107f4:	sub	r6, r1, r0
   107f8:	ldr	r3, [r4]
   107fc:	ldr	r1, [sp, #16]
   10800:	add	r4, sp, #96	; 0x60
   10804:	mov	r0, r4
   10808:	mov	r2, r6
   1080c:	bl	18b8 <fread@plt>
   10810:	add	r7, r0, r7
   10814:	cmp	r6, #1
   10818:	blt	112b8 <ReadUInt32Data+0x1a5c>
   1081c:	ldr	r0, [sp, #12]
   10820:	sub	r6, r0, r9
   10824:	mov	r0, r4
   10828:	bl	1c88 <Mat_doubleSwap>
   1082c:	vcvt.u32.f64	s0, d0
   10830:	subs	r6, r6, #1
   10834:	add	r4, r4, #8
   10838:	vmov	r0, s0
   1083c:	str	r0, [r5], #4
   10840:	bne	10824 <ReadUInt32Data+0xfc8>
   10844:	b	112b8 <ReadUInt32Data+0x1a5c>
   10848:	sub	r0, r8, #256	; 0x100
   1084c:	str	r9, [sp, #16]
   10850:	add	r1, sl, #1024	; 0x400
   10854:	mov	r6, sl
   10858:	mov	r9, #0
   1085c:	str	r5, [sp]
   10860:	str	r8, [sp, #4]
   10864:	str	r0, [sp, #8]
   10868:	mov	r0, #0
   1086c:	mov	r5, r1
   10870:	ldr	r3, [r4]
   10874:	ldr	r1, [sp, #16]
   10878:	add	r7, sp, #96	; 0x60
   1087c:	str	r0, [sp, #12]
   10880:	mov	r2, #256	; 0x100
   10884:	mov	r0, r7
   10888:	bl	18b8 <fread@plt>
   1088c:	mov	r8, r0
   10890:	mov	r4, #0
   10894:	mov	r0, r7
   10898:	bl	1b84 <Mat_int64Swap>
   1089c:	str	r0, [r6, r4, lsl #2]
   108a0:	add	r4, r4, #1
   108a4:	add	r7, r7, #8
   108a8:	cmp	r4, #256	; 0x100
   108ac:	bne	10894 <ReadUInt32Data+0x1038>
   108b0:	ldr	r0, [sp, #12]
   108b4:	ldr	r2, [sp, #8]
   108b8:	ldr	r4, [sp, #20]
   108bc:	add	r9, r8, r9
   108c0:	add	r6, r6, #1024	; 0x400
   108c4:	add	r1, r5, #1024	; 0x400
   108c8:	add	r0, r0, #256	; 0x100
   108cc:	cmp	r0, r2
   108d0:	blt	1086c <ReadUInt32Data+0x1010>
   108d4:	ldr	r8, [sp, #4]
   108d8:	cmp	r0, r8
   108dc:	bge	110c0 <ReadUInt32Data+0x1864>
   108e0:	mov	r1, r4
   108e4:	sub	r4, r8, r0
   108e8:	add	r7, sp, #96	; 0x60
   108ec:	ldr	r3, [r1]
   108f0:	ldr	r1, [sp, #16]
   108f4:	mov	r0, r7
   108f8:	mov	r2, r4
   108fc:	bl	18b8 <fread@plt>
   10900:	mov	r6, r9
   10904:	cmp	r4, #1
   10908:	add	r6, r0, r9
   1090c:	blt	110ac <ReadUInt32Data+0x1850>
   10910:	ldr	r0, [sp, #8]
   10914:	ldr	r1, [sp, #12]
   10918:	sub	r4, r0, r1
   1091c:	mov	r0, r7
   10920:	bl	1b84 <Mat_int64Swap>
   10924:	str	r0, [r5], #4
   10928:	subs	r4, r4, #1
   1092c:	add	r7, r7, #8
   10930:	bne	1091c <ReadUInt32Data+0x10c0>
   10934:	b	110ac <ReadUInt32Data+0x1850>
   10938:	sub	r1, r8, #256	; 0x100
   1093c:	add	r0, sl, #1024	; 0x400
   10940:	mov	r2, #256	; 0x100
   10944:	add	r7, sp, #96	; 0x60
   10948:	add	r5, sp, #40	; 0x28
   1094c:	mov	r6, sl
   10950:	mov	r4, #0
   10954:	str	r9, [sp, #16]
   10958:	str	r8, [sp, #4]
   1095c:	str	r1, [sp, #8]
   10960:	mov	r1, #0
   10964:	mov	r9, r0
   10968:	ldr	r0, [sp, #20]
   1096c:	str	r1, [sp, #12]
   10970:	ldr	r1, [sp, #16]
   10974:	mov	r8, r2
   10978:	mov	r2, #256	; 0x100
   1097c:	ldr	r3, [r0]
   10980:	mov	r0, r7
   10984:	bl	18b8 <fread@plt>
   10988:	mov	r1, r6
   1098c:	mov	r2, #0
   10990:	ldr	r3, [r7, r2]
   10994:	str	r3, [sp, #40]	; 0x28
   10998:	add	r3, r7, r2
   1099c:	add	r2, r2, #8
   109a0:	ldr	r3, [r3, #4]
   109a4:	cmp	r2, #512	; 0x200
   109a8:	str	r3, [sp, #44]	; 0x2c
   109ac:	vld1.16	{d16}, [r5 :64]
   109b0:	vmovl.s16	q8, d16
   109b4:	vst1.32	{d16-d17}, [r1]!
   109b8:	bne	10990 <ReadUInt32Data+0x1134>
   109bc:	mov	r1, r8
   109c0:	ldr	r3, [sp, #8]
   109c4:	add	r4, r0, r4
   109c8:	add	r6, r6, #1024	; 0x400
   109cc:	add	r0, r9, #1024	; 0x400
   109d0:	add	r2, r8, #256	; 0x100
   109d4:	ldr	r1, [sp, #12]
   109d8:	add	r1, r1, #256	; 0x100
   109dc:	cmp	r1, r3
   109e0:	blt	10964 <ReadUInt32Data+0x1108>
   109e4:	ldr	r0, [sp, #4]
   109e8:	cmp	r1, r0
   109ec:	bge	110b4 <ReadUInt32Data+0x1858>
   109f0:	sub	r5, r0, r1
   109f4:	ldr	r0, [sp, #20]
   109f8:	ldr	r1, [sp, #16]
   109fc:	add	r7, sp, #96	; 0x60
   10a00:	mov	r2, r5
   10a04:	ldr	r3, [r0]
   10a08:	mov	r0, r7
   10a0c:	bl	18b8 <fread@plt>
   10a10:	mov	r6, r4
   10a14:	cmp	r5, #1
   10a18:	add	r6, r0, r4
   10a1c:	blt	113f8 <ReadUInt32Data+0x1b9c>
   10a20:	ldr	r4, [sp, #12]
   10a24:	mov	r0, #0
   10a28:	cmp	r5, #4
   10a2c:	bcc	10a7c <ReadUInt32Data+0x1220>
   10a30:	ldr	r0, [sp, #8]
   10a34:	mov	ip, r6
   10a38:	add	r2, sp, #32
   10a3c:	sub	r0, r0, r4
   10a40:	bic	r1, r0, #3
   10a44:	bic	r0, r5, #3
   10a48:	ldr	r3, [r7]
   10a4c:	ldr	r6, [r7, #4]
   10a50:	subs	r1, r1, #4
   10a54:	add	r7, r7, #8
   10a58:	str	r6, [sp, #36]	; 0x24
   10a5c:	str	r3, [sp, #32]
   10a60:	vld1.16	{d16}, [r2 :64]
   10a64:	vmovl.s16	q8, d16
   10a68:	vst1.32	{d16-d17}, [r9]!
   10a6c:	bne	10a48 <ReadUInt32Data+0x11ec>
   10a70:	cmp	r5, r0
   10a74:	mov	r6, ip
   10a78:	beq	113f8 <ReadUInt32Data+0x1b9c>
   10a7c:	ldr	r3, [sp, #8]
   10a80:	add	r1, sp, #96	; 0x60
   10a84:	add	r2, r0, r8
   10a88:	add	r1, r1, r0, lsl #1
   10a8c:	add	r2, sl, r2, lsl #2
   10a90:	sub	r3, r3, r4
   10a94:	sub	r0, r3, r0
   10a98:	ldrsh	r3, [r1], #2
   10a9c:	subs	r0, r0, #1
   10aa0:	str	r3, [r2], #4
   10aa4:	bne	10a98 <ReadUInt32Data+0x123c>
   10aa8:	b	113f8 <ReadUInt32Data+0x1b9c>
   10aac:	sub	r1, r8, #256	; 0x100
   10ab0:	add	r0, sl, #1024	; 0x400
   10ab4:	mov	r2, #256	; 0x100
   10ab8:	add	r7, sp, #96	; 0x60
   10abc:	add	r5, sp, #64	; 0x40
   10ac0:	mov	r6, sl
   10ac4:	mov	r4, #0
   10ac8:	str	r9, [sp, #16]
   10acc:	str	r8, [sp, #4]
   10ad0:	str	r1, [sp, #8]
   10ad4:	mov	r1, #0
   10ad8:	mov	r9, r0
   10adc:	ldr	r0, [sp, #20]
   10ae0:	str	r1, [sp, #12]
   10ae4:	ldr	r1, [sp, #16]
   10ae8:	mov	r8, r2
   10aec:	mov	r2, #256	; 0x100
   10af0:	ldr	r3, [r0]
   10af4:	mov	r0, r7
   10af8:	bl	18b8 <fread@plt>
   10afc:	mov	r1, r6
   10b00:	mov	r2, #0
   10b04:	ldr	r3, [r7, r2]
   10b08:	str	r3, [sp, #64]	; 0x40
   10b0c:	add	r3, r7, r2
   10b10:	add	r2, r2, #8
   10b14:	ldr	r3, [r3, #4]
   10b18:	cmp	r2, #512	; 0x200
   10b1c:	str	r3, [sp, #68]	; 0x44
   10b20:	vld1.16	{d16}, [r5 :64]
   10b24:	vmovl.u16	q8, d16
   10b28:	vst1.32	{d16-d17}, [r1]!
   10b2c:	bne	10b04 <ReadUInt32Data+0x12a8>
   10b30:	mov	r1, r8
   10b34:	ldr	r3, [sp, #8]
   10b38:	add	r4, r0, r4
   10b3c:	add	r6, r6, #1024	; 0x400
   10b40:	add	r0, r9, #1024	; 0x400
   10b44:	add	r2, r8, #256	; 0x100
   10b48:	ldr	r1, [sp, #12]
   10b4c:	add	r1, r1, #256	; 0x100
   10b50:	cmp	r1, r3
   10b54:	blt	10ad8 <ReadUInt32Data+0x127c>
   10b58:	ldr	r0, [sp, #4]
   10b5c:	cmp	r1, r0
   10b60:	bge	110b4 <ReadUInt32Data+0x1858>
   10b64:	sub	r5, r0, r1
   10b68:	ldr	r0, [sp, #20]
   10b6c:	ldr	r1, [sp, #16]
   10b70:	add	r7, sp, #96	; 0x60
   10b74:	mov	r2, r5
   10b78:	ldr	r3, [r0]
   10b7c:	mov	r0, r7
   10b80:	bl	18b8 <fread@plt>
   10b84:	mov	r6, r4
   10b88:	cmp	r5, #1
   10b8c:	add	r6, r0, r4
   10b90:	blt	113f8 <ReadUInt32Data+0x1b9c>
   10b94:	ldr	r4, [sp, #12]
   10b98:	mov	r0, #0
   10b9c:	cmp	r5, #4
   10ba0:	bcc	10bf0 <ReadUInt32Data+0x1394>
   10ba4:	ldr	r0, [sp, #8]
   10ba8:	mov	ip, r6
   10bac:	add	r2, sp, #56	; 0x38
   10bb0:	sub	r0, r0, r4
   10bb4:	bic	r1, r0, #3
   10bb8:	bic	r0, r5, #3
   10bbc:	ldr	r3, [r7]
   10bc0:	ldr	r6, [r7, #4]
   10bc4:	subs	r1, r1, #4
   10bc8:	add	r7, r7, #8
   10bcc:	str	r6, [sp, #60]	; 0x3c
   10bd0:	str	r3, [sp, #56]	; 0x38
   10bd4:	vld1.16	{d16}, [r2 :64]
   10bd8:	vmovl.u16	q8, d16
   10bdc:	vst1.32	{d16-d17}, [r9]!
   10be0:	bne	10bbc <ReadUInt32Data+0x1360>
   10be4:	cmp	r5, r0
   10be8:	mov	r6, ip
   10bec:	beq	113f8 <ReadUInt32Data+0x1b9c>
   10bf0:	ldr	r3, [sp, #8]
   10bf4:	add	r1, sp, #96	; 0x60
   10bf8:	add	r2, r0, r8
   10bfc:	add	r1, r1, r0, lsl #1
   10c00:	add	r2, sl, r2, lsl #2
   10c04:	sub	r3, r3, r4
   10c08:	sub	r0, r3, r0
   10c0c:	ldrh	r3, [r1], #2
   10c10:	subs	r0, r0, #1
   10c14:	str	r3, [r2], #4
   10c18:	bne	10c0c <ReadUInt32Data+0x13b0>
   10c1c:	b	113f8 <ReadUInt32Data+0x1b9c>
   10c20:	sub	r0, r8, #256	; 0x100
   10c24:	lsl	r7, r8, #2
   10c28:	str	r8, [sp, #4]
   10c2c:	mov	r5, #0
   10c30:	add	r8, sp, #96	; 0x60
   10c34:	mov	r6, #0
   10c38:	str	r0, [sp, #16]
   10c3c:	ldr	r3, [r4]
   10c40:	mov	r0, r8
   10c44:	mov	r1, r9
   10c48:	mov	r2, #256	; 0x100
   10c4c:	bl	18b8 <fread@plt>
   10c50:	mov	r4, r0
   10c54:	add	r0, sl, r5, lsl #2
   10c58:	mov	r1, r8
   10c5c:	mov	r2, #1024	; 0x400
   10c60:	bl	181c <memcpy@plt>
   10c64:	ldr	r0, [sp, #16]
   10c68:	add	r6, r4, r6
   10c6c:	ldr	r4, [sp, #20]
   10c70:	add	r5, r5, #256	; 0x100
   10c74:	sub	r7, r7, #1024	; 0x400
   10c78:	cmp	r5, r0
   10c7c:	blt	10c3c <ReadUInt32Data+0x13e0>
   10c80:	ldr	r0, [sp, #4]
   10c84:	cmp	r5, r0
   10c88:	bge	11408 <ReadUInt32Data+0x1bac>
   10c8c:	mov	r1, r4
   10c90:	sub	r4, r0, r5
   10c94:	add	r0, sp, #96	; 0x60
   10c98:	ldr	r3, [r1]
   10c9c:	mov	r1, r9
   10ca0:	mov	r2, r4
   10ca4:	bl	18b8 <fread@plt>
   10ca8:	add	r6, r0, r6
   10cac:	cmp	r4, #1
   10cb0:	blt	11408 <ReadUInt32Data+0x1bac>
   10cb4:	add	r0, sl, r5, lsl #2
   10cb8:	add	r1, sp, #96	; 0x60
   10cbc:	mov	r2, r7
   10cc0:	bl	181c <memcpy@plt>
   10cc4:	b	11408 <ReadUInt32Data+0x1bac>
   10cc8:	sub	r1, r8, #256	; 0x100
   10ccc:	str	r8, [sp, #4]
   10cd0:	add	r0, sl, #1024	; 0x400
   10cd4:	mov	r2, #256	; 0x100
   10cd8:	add	r7, sp, #96	; 0x60
   10cdc:	mov	r6, sl
   10ce0:	mov	r8, #0
   10ce4:	str	r9, [sp, #16]
   10ce8:	str	r1, [sp, #12]
   10cec:	mov	r1, #0
   10cf0:	mov	r5, r0
   10cf4:	ldr	r0, [sp, #20]
   10cf8:	mov	r9, r1
   10cfc:	ldr	r1, [sp, #16]
   10d00:	mov	r4, r2
   10d04:	mov	r2, #256	; 0x100
   10d08:	ldr	r3, [r0]
   10d0c:	mov	r0, r7
   10d10:	bl	18b8 <fread@plt>
   10d14:	mov	r1, #0
   10d18:	add	r2, r7, r1
   10d1c:	vld1.32	{d16-d17}, [r2]
   10d20:	add	r2, r6, r1
   10d24:	add	r1, r1, #16
   10d28:	cmp	r1, #1024	; 0x400
   10d2c:	vcvt.u32.f32	q8, q8
   10d30:	vst1.32	{d16-d17}, [r2]
   10d34:	bne	10d18 <ReadUInt32Data+0x14bc>
   10d38:	ldr	r3, [sp, #12]
   10d3c:	add	r1, r9, #256	; 0x100
   10d40:	add	r8, r0, r8
   10d44:	add	r6, r6, #1024	; 0x400
   10d48:	add	r0, r5, #1024	; 0x400
   10d4c:	add	r2, r4, #256	; 0x100
   10d50:	cmp	r1, r3
   10d54:	blt	10cf0 <ReadUInt32Data+0x1494>
   10d58:	ldr	r0, [sp, #4]
   10d5c:	cmp	r1, r0
   10d60:	bge	11400 <ReadUInt32Data+0x1ba4>
   10d64:	sub	r6, r0, r1
   10d68:	ldr	r0, [sp, #20]
   10d6c:	ldr	r1, [sp, #16]
   10d70:	add	r7, sp, #96	; 0x60
   10d74:	mov	r2, r6
   10d78:	ldr	r3, [r0]
   10d7c:	mov	r0, r7
   10d80:	bl	18b8 <fread@plt>
   10d84:	mov	r2, r6
   10d88:	mov	r6, r8
   10d8c:	add	r6, r0, r8
   10d90:	cmp	r2, #1
   10d94:	blt	113f8 <ReadUInt32Data+0x1b9c>
   10d98:	mov	r0, #0
   10d9c:	cmp	r2, #4
   10da0:	bcc	10dd0 <ReadUInt32Data+0x1574>
   10da4:	ldr	r0, [sp, #12]
   10da8:	sub	r0, r0, r9
   10dac:	bic	r1, r0, #3
   10db0:	bic	r0, r2, #3
   10db4:	vld1.32	{d16-d17}, [r7]!
   10db8:	subs	r1, r1, #4
   10dbc:	vcvt.u32.f32	q8, q8
   10dc0:	vst1.32	{d16-d17}, [r5]!
   10dc4:	bne	10db4 <ReadUInt32Data+0x1558>
   10dc8:	cmp	r2, r0
   10dcc:	beq	113f8 <ReadUInt32Data+0x1b9c>
   10dd0:	ldr	r3, [sp, #12]
   10dd4:	add	r1, sp, #96	; 0x60
   10dd8:	add	r2, r0, r4
   10ddc:	add	r1, r1, r0, lsl #2
   10de0:	add	r2, sl, r2, lsl #2
   10de4:	sub	r3, r3, r9
   10de8:	sub	r0, r3, r0
   10dec:	vldr	s0, [r1]
   10df0:	subs	r0, r0, #1
   10df4:	add	r1, r1, #4
   10df8:	vcvt.u32.f32	s0, s0
   10dfc:	vmov	r3, s0
   10e00:	str	r3, [r2], #4
   10e04:	bne	10dec <ReadUInt32Data+0x1590>
   10e08:	b	113f8 <ReadUInt32Data+0x1b9c>
   10e0c:	sub	r1, r8, #256	; 0x100
   10e10:	str	r9, [sp, #16]
   10e14:	add	r0, sl, #1024	; 0x400
   10e18:	mov	r2, #256	; 0x100
   10e1c:	mov	r6, sl
   10e20:	mov	r9, #0
   10e24:	str	r8, [sp, #4]
   10e28:	str	r1, [sp, #12]
   10e2c:	mov	r1, #0
   10e30:	mov	r8, r1
   10e34:	ldr	r3, [r4]
   10e38:	ldr	r1, [sp, #16]
   10e3c:	add	r4, sp, #96	; 0x60
   10e40:	mov	r7, r2
   10e44:	mov	r5, r0
   10e48:	mov	r2, #256	; 0x100
   10e4c:	mov	r0, r4
   10e50:	bl	18b8 <fread@plt>
   10e54:	mov	r1, #0
   10e58:	mov	r2, r4
   10e5c:	vld1.64	{d16-d17}, [r2]!
   10e60:	vcvt.u32.f64	s0, d16
   10e64:	vmov	r3, s0
   10e68:	vcvt.u32.f64	s0, d17
   10e6c:	vmov.32	d16[0], r3
   10e70:	add	r3, r6, r1
   10e74:	vmov	r4, s0
   10e78:	add	r1, r1, #8
   10e7c:	vmov.32	d16[1], r4
   10e80:	cmp	r1, #1024	; 0x400
   10e84:	vstr	d16, [r3]
   10e88:	bne	10e5c <ReadUInt32Data+0x1600>
   10e8c:	ldr	r3, [sp, #12]
   10e90:	ldr	r4, [sp, #20]
   10e94:	add	r1, r8, #256	; 0x100
   10e98:	add	r9, r0, r9
   10e9c:	add	r6, r6, #1024	; 0x400
   10ea0:	add	r0, r5, #1024	; 0x400
   10ea4:	add	r2, r7, #256	; 0x100
   10ea8:	cmp	r1, r3
   10eac:	blt	10e30 <ReadUInt32Data+0x15d4>
   10eb0:	ldr	r0, [sp, #4]
   10eb4:	cmp	r1, r0
   10eb8:	bge	110d0 <ReadUInt32Data+0x1874>
   10ebc:	sub	r6, r0, r1
   10ec0:	ldr	r3, [r4]
   10ec4:	ldr	r1, [sp, #16]
   10ec8:	add	r4, sp, #96	; 0x60
   10ecc:	mov	r0, r4
   10ed0:	mov	r2, r6
   10ed4:	bl	18b8 <fread@plt>
   10ed8:	mov	r3, r6
   10edc:	mov	r6, r9
   10ee0:	add	r6, r0, r9
   10ee4:	cmp	r3, #1
   10ee8:	blt	113f8 <ReadUInt32Data+0x1b9c>
   10eec:	ldr	r9, [sp, #16]
   10ef0:	mov	r0, #0
   10ef4:	beq	10f38 <ReadUInt32Data+0x16dc>
   10ef8:	ldr	r0, [sp, #12]
   10efc:	sub	r0, r0, r8
   10f00:	bic	r1, r0, #1
   10f04:	bic	r0, r3, #1
   10f08:	vld1.64	{d16-d17}, [r4]!
   10f0c:	subs	r1, r1, #2
   10f10:	vcvt.u32.f64	s0, d16
   10f14:	vcvt.u32.f64	s2, d17
   10f18:	vmov	r2, s0
   10f1c:	vmov.32	d16[0], r2
   10f20:	vmov	r2, s2
   10f24:	vmov.32	d16[1], r2
   10f28:	vst1.32	{d16}, [r5]!
   10f2c:	bne	10f08 <ReadUInt32Data+0x16ac>
   10f30:	cmp	r3, r0
   10f34:	beq	11408 <ReadUInt32Data+0x1bac>
   10f38:	ldr	r3, [sp, #12]
   10f3c:	add	r1, sp, #96	; 0x60
   10f40:	add	r2, r0, r7
   10f44:	add	r1, r1, r0, lsl #3
   10f48:	add	r2, sl, r2, lsl #2
   10f4c:	sub	r3, r3, r8
   10f50:	sub	r0, r3, r0
   10f54:	vldr	d16, [r1]
   10f58:	subs	r0, r0, #1
   10f5c:	add	r1, r1, #8
   10f60:	vcvt.u32.f64	s0, d16
   10f64:	vmov	r3, s0
   10f68:	str	r3, [r2], #4
   10f6c:	bne	10f54 <ReadUInt32Data+0x16f8>
   10f70:	b	11408 <ReadUInt32Data+0x1bac>
   10f74:	sub	r1, r8, #256	; 0x100
   10f78:	str	r5, [sp]
   10f7c:	str	r8, [sp, #4]
   10f80:	add	r0, sl, #1024	; 0x400
   10f84:	mov	r2, #256	; 0x100
   10f88:	add	r5, sp, #96	; 0x60
   10f8c:	mov	r6, sl
   10f90:	mov	r8, #0
   10f94:	str	r9, [sp, #16]
   10f98:	str	r1, [sp, #12]
   10f9c:	mov	r1, #0
   10fa0:	mov	r4, r0
   10fa4:	ldr	r0, [sp, #20]
   10fa8:	mov	r9, r1
   10fac:	ldr	r1, [sp, #16]
   10fb0:	mov	r7, r2
   10fb4:	mov	r2, #256	; 0x100
   10fb8:	ldr	r3, [r0]
   10fbc:	mov	r0, r5
   10fc0:	bl	18b8 <fread@plt>
   10fc4:	mov	r1, #0
   10fc8:	mov	r2, r5
   10fcc:	vld1.64	{d16-d17}, [r2]!
   10fd0:	add	r3, r6, r1
   10fd4:	add	r1, r1, #8
   10fd8:	cmp	r1, #1024	; 0x400
   10fdc:	vmovn.i64	d16, q8
   10fe0:	vstr	d16, [r3]
   10fe4:	bne	10fcc <ReadUInt32Data+0x1770>
   10fe8:	ldr	r3, [sp, #12]
   10fec:	add	r1, r9, #256	; 0x100
   10ff0:	add	r8, r0, r8
   10ff4:	add	r6, r6, #1024	; 0x400
   10ff8:	add	r0, r4, #1024	; 0x400
   10ffc:	add	r2, r7, #256	; 0x100
   11000:	cmp	r1, r3
   11004:	blt	10fa0 <ReadUInt32Data+0x1744>
   11008:	ldr	r0, [sp, #4]
   1100c:	cmp	r1, r0
   11010:	bge	110e0 <ReadUInt32Data+0x1884>
   11014:	sub	r6, r0, r1
   11018:	ldr	r0, [sp, #20]
   1101c:	ldr	r1, [sp, #16]
   11020:	add	r5, sp, #96	; 0x60
   11024:	mov	r2, r6
   11028:	ldr	r3, [r0]
   1102c:	mov	r0, r5
   11030:	bl	18b8 <fread@plt>
   11034:	mov	r2, r6
   11038:	mov	r6, r8
   1103c:	add	r6, r0, r8
   11040:	cmp	r2, #1
   11044:	blt	110f0 <ReadUInt32Data+0x1894>
   11048:	ldr	r8, [sp, #4]
   1104c:	mov	r0, #0
   11050:	beq	11080 <ReadUInt32Data+0x1824>
   11054:	ldr	r0, [sp, #12]
   11058:	sub	r0, r0, r9
   1105c:	bic	r1, r0, #1
   11060:	bic	r0, r2, #1
   11064:	vld1.64	{d16-d17}, [r5]!
   11068:	subs	r1, r1, #2
   1106c:	vmovn.i64	d16, q8
   11070:	vst1.32	{d16}, [r4]!
   11074:	bne	11064 <ReadUInt32Data+0x1808>
   11078:	cmp	r2, r0
   1107c:	beq	110ac <ReadUInt32Data+0x1850>
   11080:	ldr	r3, [sp, #12]
   11084:	add	r1, sp, #96	; 0x60
   11088:	add	r2, r0, r7
   1108c:	add	r1, r1, r0, lsl #3
   11090:	add	r2, sl, r2, lsl #2
   11094:	sub	r3, r3, r9
   11098:	sub	r0, r3, r0
   1109c:	ldr	r3, [r1], #8
   110a0:	subs	r0, r0, #1
   110a4:	str	r3, [r2], #4
   110a8:	bne	1109c <ReadUInt32Data+0x1840>
   110ac:	ldr	r9, [sp, #16]
   110b0:	b	110f8 <ReadUInt32Data+0x189c>
   110b4:	ldr	r9, [sp, #16]
   110b8:	mov	r6, r4
   110bc:	b	11408 <ReadUInt32Data+0x1bac>
   110c0:	ldr	r0, [sp, #16]
   110c4:	mov	r6, r9
   110c8:	mov	r9, r0
   110cc:	b	110fc <ReadUInt32Data+0x18a0>
   110d0:	ldr	r0, [sp, #16]
   110d4:	mov	r6, r9
   110d8:	mov	r9, r0
   110dc:	b	11408 <ReadUInt32Data+0x1bac>
   110e0:	ldr	r9, [sp, #16]
   110e4:	mov	r6, r8
   110e8:	mov	r8, r0
   110ec:	b	110f8 <ReadUInt32Data+0x189c>
   110f0:	ldr	r9, [sp, #16]
   110f4:	ldr	r8, [sp, #4]
   110f8:	ldr	r4, [sp, #20]
   110fc:	ldr	r5, [sp]
   11100:	cmp	r5, #13
   11104:	bne	11408 <ReadUInt32Data+0x1bac>
   11108:	ldr	r0, [r4, #20]
   1110c:	cmp	r0, #0
   11110:	beq	1115c <ReadUInt32Data+0x1900>
   11114:	cmp	r8, #256	; 0x100
   11118:	bgt	111dc <ReadUInt32Data+0x1980>
   1111c:	ldr	r3, [r4]
   11120:	add	r4, sp, #96	; 0x60
   11124:	mov	r1, r9
   11128:	mov	r2, r8
   1112c:	mov	r0, r4
   11130:	bl	18b8 <fread@plt>
   11134:	add	r6, r0, r6
   11138:	cmp	r8, #1
   1113c:	blt	11408 <ReadUInt32Data+0x1bac>
   11140:	mov	r0, r4
   11144:	bl	1bd4 <Mat_uint64Swap>
   11148:	str	r0, [sl], #4
   1114c:	subs	r8, r8, #1
   11150:	add	r4, r4, #8
   11154:	bne	11140 <ReadUInt32Data+0x18e4>
   11158:	b	11408 <ReadUInt32Data+0x1bac>
   1115c:	cmp	r8, #256	; 0x100
   11160:	bgt	112c4 <ReadUInt32Data+0x1a68>
   11164:	ldr	r3, [r4]
   11168:	add	r4, sp, #96	; 0x60
   1116c:	mov	r1, r9
   11170:	mov	r2, r8
   11174:	mov	r0, r4
   11178:	bl	18b8 <fread@plt>
   1117c:	add	r6, r0, r6
   11180:	cmp	r8, #1
   11184:	blt	11408 <ReadUInt32Data+0x1bac>
   11188:	mov	r0, #0
   1118c:	beq	111b8 <ReadUInt32Data+0x195c>
   11190:	bic	r0, r8, #1
   11194:	mov	r2, sl
   11198:	mov	r1, r0
   1119c:	vld1.64	{d16-d17}, [r4]!
   111a0:	subs	r1, r1, #2
   111a4:	vmovn.i64	d16, q8
   111a8:	vst1.32	{d16}, [r2]!
   111ac:	bne	1119c <ReadUInt32Data+0x1940>
   111b0:	cmp	r0, r8
   111b4:	beq	11408 <ReadUInt32Data+0x1bac>
   111b8:	add	r3, sp, #96	; 0x60
   111bc:	sub	r1, r8, r0
   111c0:	add	r2, sl, r0, lsl #2
   111c4:	add	r0, r3, r0, lsl #3
   111c8:	ldr	r3, [r0], #8
   111cc:	subs	r1, r1, #1
   111d0:	str	r3, [r2], #4
   111d4:	bne	111c8 <ReadUInt32Data+0x196c>
   111d8:	b	11408 <ReadUInt32Data+0x1bac>
   111dc:	sub	r0, r8, #256	; 0x100
   111e0:	add	r1, sl, #1024	; 0x400
   111e4:	str	r9, [sp, #16]
   111e8:	str	r8, [sp, #4]
   111ec:	str	r0, [sp, #12]
   111f0:	mov	r0, #0
   111f4:	mov	r5, r1
   111f8:	ldr	r3, [r4]
   111fc:	ldr	r1, [sp, #16]
   11200:	add	r4, sp, #96	; 0x60
   11204:	mov	r9, r0
   11208:	mov	r2, #256	; 0x100
   1120c:	mov	r8, r6
   11210:	mov	r0, r4
   11214:	bl	18b8 <fread@plt>
   11218:	mov	r7, r0
   1121c:	mov	r6, #0
   11220:	mov	r0, r4
   11224:	bl	1bd4 <Mat_uint64Swap>
   11228:	str	r0, [sl, r6, lsl #2]
   1122c:	add	r6, r6, #1
   11230:	add	r4, r4, #8
   11234:	cmp	r6, #256	; 0x100
   11238:	bne	11220 <ReadUInt32Data+0x19c4>
   1123c:	ldr	r2, [sp, #12]
   11240:	ldr	r4, [sp, #20]
   11244:	mov	r6, r8
   11248:	add	r0, r9, #256	; 0x100
   1124c:	add	sl, sl, #1024	; 0x400
   11250:	add	r1, r5, #1024	; 0x400
   11254:	add	r6, r7, r8
   11258:	cmp	r0, r2
   1125c:	blt	111f4 <ReadUInt32Data+0x1998>
   11260:	ldr	r1, [sp, #4]
   11264:	cmp	r0, r1
   11268:	bge	113f8 <ReadUInt32Data+0x1b9c>
   1126c:	mov	r7, r6
   11270:	sub	r6, r1, r0
   11274:	ldr	r3, [r4]
   11278:	ldr	r1, [sp, #16]
   1127c:	add	r4, sp, #96	; 0x60
   11280:	mov	r0, r4
   11284:	mov	r2, r6
   11288:	bl	18b8 <fread@plt>
   1128c:	add	r7, r0, r7
   11290:	cmp	r6, #1
   11294:	blt	112b8 <ReadUInt32Data+0x1a5c>
   11298:	ldr	r0, [sp, #12]
   1129c:	sub	r6, r0, r9
   112a0:	mov	r0, r4
   112a4:	bl	1bd4 <Mat_uint64Swap>
   112a8:	str	r0, [r5], #4
   112ac:	subs	r6, r6, #1
   112b0:	add	r4, r4, #8
   112b4:	bne	112a0 <ReadUInt32Data+0x1a44>
   112b8:	ldr	r9, [sp, #16]
   112bc:	mov	r6, r7
   112c0:	b	11408 <ReadUInt32Data+0x1bac>
   112c4:	mov	r1, r8
   112c8:	mov	r8, r6
   112cc:	str	r9, [sp, #16]
   112d0:	add	r0, sl, #1024	; 0x400
   112d4:	mov	r2, #256	; 0x100
   112d8:	add	r9, sp, #96	; 0x60
   112dc:	mov	r6, sl
   112e0:	str	r1, [sp, #4]
   112e4:	sub	r1, r1, #256	; 0x100
   112e8:	str	r1, [sp, #12]
   112ec:	mov	r1, #0
   112f0:	mov	r4, r0
   112f4:	ldr	r0, [sp, #20]
   112f8:	mov	r7, r1
   112fc:	ldr	r1, [sp, #16]
   11300:	mov	r5, r2
   11304:	mov	r2, #256	; 0x100
   11308:	ldr	r3, [r0]
   1130c:	mov	r0, r9
   11310:	bl	18b8 <fread@plt>
   11314:	mov	r1, #0
   11318:	mov	r2, r9
   1131c:	vld1.64	{d16-d17}, [r2]!
   11320:	add	r3, r6, r1
   11324:	add	r1, r1, #8
   11328:	cmp	r1, #1024	; 0x400
   1132c:	vmovn.i64	d16, q8
   11330:	vstr	d16, [r3]
   11334:	bne	1131c <ReadUInt32Data+0x1ac0>
   11338:	ldr	r3, [sp, #12]
   1133c:	add	r1, r7, #256	; 0x100
   11340:	add	r8, r0, r8
   11344:	add	r6, r6, #1024	; 0x400
   11348:	add	r0, r4, #1024	; 0x400
   1134c:	add	r2, r5, #256	; 0x100
   11350:	cmp	r1, r3
   11354:	blt	112f0 <ReadUInt32Data+0x1a94>
   11358:	ldr	r0, [sp, #4]
   1135c:	cmp	r1, r0
   11360:	bge	11400 <ReadUInt32Data+0x1ba4>
   11364:	sub	r6, r0, r1
   11368:	ldr	r0, [sp, #20]
   1136c:	ldr	r1, [sp, #16]
   11370:	add	r9, sp, #96	; 0x60
   11374:	mov	r2, r6
   11378:	ldr	r3, [r0]
   1137c:	mov	r0, r9
   11380:	bl	18b8 <fread@plt>
   11384:	mov	r2, r6
   11388:	mov	r6, r8
   1138c:	add	r6, r0, r8
   11390:	cmp	r2, #1
   11394:	blt	113f8 <ReadUInt32Data+0x1b9c>
   11398:	mov	r0, #0
   1139c:	beq	113cc <ReadUInt32Data+0x1b70>
   113a0:	ldr	r0, [sp, #12]
   113a4:	sub	r0, r0, r7
   113a8:	bic	r1, r0, #1
   113ac:	bic	r0, r2, #1
   113b0:	vld1.64	{d16-d17}, [r9]!
   113b4:	subs	r1, r1, #2
   113b8:	vmovn.i64	d16, q8
   113bc:	vst1.32	{d16}, [r4]!
   113c0:	bne	113b0 <ReadUInt32Data+0x1b54>
   113c4:	cmp	r2, r0
   113c8:	beq	113f8 <ReadUInt32Data+0x1b9c>
   113cc:	ldr	r3, [sp, #12]
   113d0:	add	r1, sp, #96	; 0x60
   113d4:	add	r2, r0, r5
   113d8:	add	r1, r1, r0, lsl #3
   113dc:	add	r2, sl, r2, lsl #2
   113e0:	sub	r3, r3, r7
   113e4:	sub	r0, r3, r0
   113e8:	ldr	r3, [r1], #8
   113ec:	subs	r0, r0, #1
   113f0:	str	r3, [r2], #4
   113f4:	bne	113e8 <ReadUInt32Data+0x1b8c>
   113f8:	ldr	r9, [sp, #16]
   113fc:	b	11408 <ReadUInt32Data+0x1bac>
   11400:	ldr	r9, [sp, #16]
   11404:	mov	r6, r8
   11408:	mul	r0, r6, r9
   1140c:	sub	sp, fp, #28
   11410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011414 <ReadCompressedUInt32Data>:
   11414:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11418:	add	fp, sp, #28
   1141c:	sub	sp, sp, #12
   11420:	mov	r7, r0
   11424:	mov	r0, #0
   11428:	cmp	r1, #0
   1142c:	beq	11440 <ReadCompressedUInt32Data+0x2c>
   11430:	cmp	r7, #0
   11434:	movne	r5, r2
   11438:	cmpne	r2, #0
   1143c:	bne	11448 <ReadCompressedUInt32Data+0x34>
   11440:	sub	sp, fp, #28
   11444:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11448:	ldr	sl, [fp, #8]
   1144c:	mov	r0, r3
   11450:	mov	r4, r3
   11454:	mov	r6, r1
   11458:	bl	1924 <Mat_SizeOf@plt>
   1145c:	mov	r9, r0
   11460:	sub	r0, r4, #1
   11464:	cmp	r0, #12
   11468:	bhi	11938 <ReadCompressedUInt32Data+0x524>
   1146c:	add	r1, pc, #4
   11470:	ldr	r0, [r1, r0, lsl #2]
   11474:	add	pc, r1, r0
   11478:	.word	0x00000034
   1147c:	.word	0x0000006c
   11480:	.word	0x000000a4
   11484:	.word	0x000000ec
   11488:	.word	0x00000134
   1148c:	.word	0x0000017c
   11490:	.word	0x000001c4
   11494:	.word	0x000004c0
   11498:	.word	0x00000214
   1149c:	.word	0x000004c0
   114a0:	.word	0x000004c0
   114a4:	.word	0x00000264
   114a8:	.word	0x000002ac
   114ac:	cmp	sl, #1
   114b0:	blt	11938 <ReadCompressedUInt32Data+0x524>
   114b4:	mov	r8, sp
   114b8:	mov	r4, sl
   114bc:	mov	r0, r7
   114c0:	mov	r1, r6
   114c4:	mov	r2, r8
   114c8:	mov	r3, r9
   114cc:	bl	32b8 <InflateData>
   114d0:	ldrsb	r0, [sp]
   114d4:	subs	r4, r4, #1
   114d8:	str	r0, [r5], #4
   114dc:	bne	114bc <ReadCompressedUInt32Data+0xa8>
   114e0:	b	11938 <ReadCompressedUInt32Data+0x524>
   114e4:	cmp	sl, #1
   114e8:	blt	11938 <ReadCompressedUInt32Data+0x524>
   114ec:	mov	r8, sp
   114f0:	mov	r4, sl
   114f4:	mov	r0, r7
   114f8:	mov	r1, r6
   114fc:	mov	r2, r8
   11500:	mov	r3, r9
   11504:	bl	32b8 <InflateData>
   11508:	ldrb	r0, [sp]
   1150c:	subs	r4, r4, #1
   11510:	str	r0, [r5], #4
   11514:	bne	114f4 <ReadCompressedUInt32Data+0xe0>
   11518:	b	11938 <ReadCompressedUInt32Data+0x524>
   1151c:	ldr	r0, [r7, #20]
   11520:	cmp	r0, #0
   11524:	beq	1176c <ReadCompressedUInt32Data+0x358>
   11528:	cmp	sl, #1
   1152c:	blt	11938 <ReadCompressedUInt32Data+0x524>
   11530:	mov	r8, sp
   11534:	mov	r4, sl
   11538:	mov	r0, r7
   1153c:	mov	r1, r6
   11540:	mov	r2, r8
   11544:	mov	r3, r9
   11548:	bl	32b8 <InflateData>
   1154c:	mov	r0, r8
   11550:	bl	1c18 <Mat_int16Swap>
   11554:	str	r0, [r5], #4
   11558:	subs	r4, r4, #1
   1155c:	bne	11538 <ReadCompressedUInt32Data+0x124>
   11560:	b	11938 <ReadCompressedUInt32Data+0x524>
   11564:	ldr	r0, [r7, #20]
   11568:	cmp	r0, #0
   1156c:	beq	117a4 <ReadCompressedUInt32Data+0x390>
   11570:	cmp	sl, #1
   11574:	blt	11938 <ReadCompressedUInt32Data+0x524>
   11578:	mov	r8, sp
   1157c:	mov	r4, sl
   11580:	mov	r0, r7
   11584:	mov	r1, r6
   11588:	mov	r2, r8
   1158c:	mov	r3, r9
   11590:	bl	32b8 <InflateData>
   11594:	mov	r0, r8
   11598:	bl	1c2c <Mat_uint16Swap>
   1159c:	str	r0, [r5], #4
   115a0:	subs	r4, r4, #1
   115a4:	bne	11580 <ReadCompressedUInt32Data+0x16c>
   115a8:	b	11938 <ReadCompressedUInt32Data+0x524>
   115ac:	ldr	r0, [r7, #20]
   115b0:	cmp	r0, #0
   115b4:	beq	117dc <ReadCompressedUInt32Data+0x3c8>
   115b8:	cmp	sl, #1
   115bc:	blt	11938 <ReadCompressedUInt32Data+0x524>
   115c0:	mov	r8, sp
   115c4:	mov	r4, sl
   115c8:	mov	r0, r7
   115cc:	mov	r1, r6
   115d0:	mov	r2, r8
   115d4:	mov	r3, r9
   115d8:	bl	32b8 <InflateData>
   115dc:	mov	r0, r8
   115e0:	bl	1bf0 <Mat_int32Swap>
   115e4:	str	r0, [r5], #4
   115e8:	subs	r4, r4, #1
   115ec:	bne	115c8 <ReadCompressedUInt32Data+0x1b4>
   115f0:	b	11938 <ReadCompressedUInt32Data+0x524>
   115f4:	ldr	r0, [r7, #20]
   115f8:	cmp	r0, #0
   115fc:	beq	11814 <ReadCompressedUInt32Data+0x400>
   11600:	cmp	sl, #1
   11604:	blt	11938 <ReadCompressedUInt32Data+0x524>
   11608:	mov	r8, sp
   1160c:	mov	r4, sl
   11610:	mov	r0, r7
   11614:	mov	r1, r6
   11618:	mov	r2, r8
   1161c:	mov	r3, r9
   11620:	bl	32b8 <InflateData>
   11624:	mov	r0, r8
   11628:	bl	1c04 <Mat_uint32Swap>
   1162c:	str	r0, [r5], #4
   11630:	subs	r4, r4, #1
   11634:	bne	11610 <ReadCompressedUInt32Data+0x1fc>
   11638:	b	11938 <ReadCompressedUInt32Data+0x524>
   1163c:	ldr	r0, [r7, #20]
   11640:	cmp	r0, #0
   11644:	beq	1184c <ReadCompressedUInt32Data+0x438>
   11648:	cmp	sl, #1
   1164c:	blt	11938 <ReadCompressedUInt32Data+0x524>
   11650:	mov	r8, sp
   11654:	mov	r4, sl
   11658:	mov	r0, r7
   1165c:	mov	r1, r6
   11660:	mov	r2, r8
   11664:	mov	r3, r9
   11668:	bl	32b8 <InflateData>
   1166c:	mov	r0, r8
   11670:	bl	1c44 <Mat_floatSwap>
   11674:	vcvt.u32.f32	s0, s0
   11678:	subs	r4, r4, #1
   1167c:	vmov	r0, s0
   11680:	str	r0, [r5], #4
   11684:	bne	11658 <ReadCompressedUInt32Data+0x244>
   11688:	b	11938 <ReadCompressedUInt32Data+0x524>
   1168c:	ldr	r0, [r7, #20]
   11690:	cmp	r0, #0
   11694:	beq	1188c <ReadCompressedUInt32Data+0x478>
   11698:	cmp	sl, #1
   1169c:	blt	11938 <ReadCompressedUInt32Data+0x524>
   116a0:	mov	r8, sp
   116a4:	mov	r4, sl
   116a8:	mov	r0, r7
   116ac:	mov	r1, r6
   116b0:	mov	r2, r8
   116b4:	mov	r3, r9
   116b8:	bl	32b8 <InflateData>
   116bc:	mov	r0, r8
   116c0:	bl	1c88 <Mat_doubleSwap>
   116c4:	vcvt.u32.f64	s0, d0
   116c8:	subs	r4, r4, #1
   116cc:	vmov	r0, s0
   116d0:	str	r0, [r5], #4
   116d4:	bne	116a8 <ReadCompressedUInt32Data+0x294>
   116d8:	b	11938 <ReadCompressedUInt32Data+0x524>
   116dc:	ldr	r0, [r7, #20]
   116e0:	cmp	r0, #0
   116e4:	beq	118cc <ReadCompressedUInt32Data+0x4b8>
   116e8:	cmp	sl, #1
   116ec:	blt	11938 <ReadCompressedUInt32Data+0x524>
   116f0:	mov	r8, sp
   116f4:	mov	r4, sl
   116f8:	mov	r0, r7
   116fc:	mov	r1, r6
   11700:	mov	r2, r8
   11704:	mov	r3, r9
   11708:	bl	32b8 <InflateData>
   1170c:	mov	r0, r8
   11710:	bl	1b84 <Mat_int64Swap>
   11714:	str	r0, [r5], #4
   11718:	subs	r4, r4, #1
   1171c:	bne	116f8 <ReadCompressedUInt32Data+0x2e4>
   11720:	b	11938 <ReadCompressedUInt32Data+0x524>
   11724:	ldr	r0, [r7, #20]
   11728:	cmp	r0, #0
   1172c:	beq	11904 <ReadCompressedUInt32Data+0x4f0>
   11730:	cmp	sl, #1
   11734:	blt	11938 <ReadCompressedUInt32Data+0x524>
   11738:	mov	r8, sp
   1173c:	mov	r4, sl
   11740:	mov	r0, r7
   11744:	mov	r1, r6
   11748:	mov	r2, r8
   1174c:	mov	r3, r9
   11750:	bl	32b8 <InflateData>
   11754:	mov	r0, r8
   11758:	bl	1bd4 <Mat_uint64Swap>
   1175c:	str	r0, [r5], #4
   11760:	subs	r4, r4, #1
   11764:	bne	11740 <ReadCompressedUInt32Data+0x32c>
   11768:	b	11938 <ReadCompressedUInt32Data+0x524>
   1176c:	cmp	sl, #1
   11770:	blt	11938 <ReadCompressedUInt32Data+0x524>
   11774:	mov	r8, sp
   11778:	mov	r4, sl
   1177c:	mov	r0, r7
   11780:	mov	r1, r6
   11784:	mov	r2, r8
   11788:	mov	r3, r9
   1178c:	bl	32b8 <InflateData>
   11790:	ldrsh	r0, [sp]
   11794:	subs	r4, r4, #1
   11798:	str	r0, [r5], #4
   1179c:	bne	1177c <ReadCompressedUInt32Data+0x368>
   117a0:	b	11938 <ReadCompressedUInt32Data+0x524>
   117a4:	cmp	sl, #1
   117a8:	blt	11938 <ReadCompressedUInt32Data+0x524>
   117ac:	mov	r8, sp
   117b0:	mov	r4, sl
   117b4:	mov	r0, r7
   117b8:	mov	r1, r6
   117bc:	mov	r2, r8
   117c0:	mov	r3, r9
   117c4:	bl	32b8 <InflateData>
   117c8:	ldrh	r0, [sp]
   117cc:	subs	r4, r4, #1
   117d0:	str	r0, [r5], #4
   117d4:	bne	117b4 <ReadCompressedUInt32Data+0x3a0>
   117d8:	b	11938 <ReadCompressedUInt32Data+0x524>
   117dc:	cmp	sl, #1
   117e0:	blt	11938 <ReadCompressedUInt32Data+0x524>
   117e4:	mov	r8, sp
   117e8:	mov	r4, sl
   117ec:	mov	r0, r7
   117f0:	mov	r1, r6
   117f4:	mov	r2, r8
   117f8:	mov	r3, r9
   117fc:	bl	32b8 <InflateData>
   11800:	ldr	r0, [sp]
   11804:	subs	r4, r4, #1
   11808:	str	r0, [r5], #4
   1180c:	bne	117ec <ReadCompressedUInt32Data+0x3d8>
   11810:	b	11938 <ReadCompressedUInt32Data+0x524>
   11814:	cmp	sl, #1
   11818:	blt	11938 <ReadCompressedUInt32Data+0x524>
   1181c:	mov	r8, sp
   11820:	mov	r4, sl
   11824:	mov	r0, r7
   11828:	mov	r1, r6
   1182c:	mov	r2, r8
   11830:	mov	r3, r9
   11834:	bl	32b8 <InflateData>
   11838:	ldr	r0, [sp]
   1183c:	subs	r4, r4, #1
   11840:	str	r0, [r5], #4
   11844:	bne	11824 <ReadCompressedUInt32Data+0x410>
   11848:	b	11938 <ReadCompressedUInt32Data+0x524>
   1184c:	cmp	sl, #1
   11850:	blt	11938 <ReadCompressedUInt32Data+0x524>
   11854:	mov	r8, sp
   11858:	mov	r4, sl
   1185c:	mov	r0, r7
   11860:	mov	r1, r6
   11864:	mov	r2, r8
   11868:	mov	r3, r9
   1186c:	bl	32b8 <InflateData>
   11870:	vldr	s0, [sp]
   11874:	subs	r4, r4, #1
   11878:	vcvt.u32.f32	s0, s0
   1187c:	vmov	r0, s0
   11880:	str	r0, [r5], #4
   11884:	bne	1185c <ReadCompressedUInt32Data+0x448>
   11888:	b	11938 <ReadCompressedUInt32Data+0x524>
   1188c:	cmp	sl, #1
   11890:	blt	11938 <ReadCompressedUInt32Data+0x524>
   11894:	mov	r8, sp
   11898:	mov	r4, sl
   1189c:	mov	r0, r7
   118a0:	mov	r1, r6
   118a4:	mov	r2, r8
   118a8:	mov	r3, r9
   118ac:	bl	32b8 <InflateData>
   118b0:	vldr	d16, [sp]
   118b4:	subs	r4, r4, #1
   118b8:	vcvt.u32.f64	s0, d16
   118bc:	vmov	r0, s0
   118c0:	str	r0, [r5], #4
   118c4:	bne	1189c <ReadCompressedUInt32Data+0x488>
   118c8:	b	11938 <ReadCompressedUInt32Data+0x524>
   118cc:	cmp	sl, #1
   118d0:	blt	11938 <ReadCompressedUInt32Data+0x524>
   118d4:	mov	r8, sp
   118d8:	mov	r4, sl
   118dc:	mov	r0, r7
   118e0:	mov	r1, r6
   118e4:	mov	r2, r8
   118e8:	mov	r3, r9
   118ec:	bl	32b8 <InflateData>
   118f0:	ldr	r0, [sp]
   118f4:	subs	r4, r4, #1
   118f8:	str	r0, [r5], #4
   118fc:	bne	118dc <ReadCompressedUInt32Data+0x4c8>
   11900:	b	11938 <ReadCompressedUInt32Data+0x524>
   11904:	cmp	sl, #1
   11908:	blt	11938 <ReadCompressedUInt32Data+0x524>
   1190c:	mov	r8, sp
   11910:	mov	r4, sl
   11914:	mov	r0, r7
   11918:	mov	r1, r6
   1191c:	mov	r2, r8
   11920:	mov	r3, r9
   11924:	bl	32b8 <InflateData>
   11928:	ldr	r0, [sp]
   1192c:	subs	r4, r4, #1
   11930:	str	r0, [r5], #4
   11934:	bne	11914 <ReadCompressedUInt32Data+0x500>
   11938:	mul	r0, r9, sl
   1193c:	sub	sp, fp, #28
   11940:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011944 <ReadInt16Data>:
   11944:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11948:	add	fp, sp, #28
   1194c:	sub	sp, sp, #84	; 0x54
   11950:	sub	sp, sp, #2048	; 0x800
   11954:	mov	r9, r0
   11958:	mov	r0, #0
   1195c:	cmp	r9, #0
   11960:	beq	11978 <ReadInt16Data+0x34>
   11964:	cmp	r1, #0
   11968:	mov	r5, r1
   1196c:	ldrne	r1, [r9]
   11970:	cmpne	r1, #0
   11974:	bne	11980 <ReadInt16Data+0x3c>
   11978:	sub	sp, fp, #28
   1197c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11980:	mov	r0, r2
   11984:	mov	r7, r3
   11988:	mov	r8, r2
   1198c:	bl	1924 <Mat_SizeOf@plt>
   11990:	mov	r6, r0
   11994:	sub	r0, r8, #1
   11998:	mov	sl, #0
   1199c:	str	r9, [sp, #28]
   119a0:	cmp	r0, #11
   119a4:	str	r6, [sp, #24]
   119a8:	bhi	130b4 <ReadInt16Data+0x1770>
   119ac:	add	r1, pc, #4
   119b0:	ldr	r0, [r1, r0, lsl #2]
   119b4:	add	pc, r1, r0
   119b8:	.word	0x00000030
   119bc:	.word	0x000000d8
   119c0:	.word	0x00000180
   119c4:	.word	0x000001d4
   119c8:	.word	0x00000228
   119cc:	.word	0x0000027c
   119d0:	.word	0x000002d0
   119d4:	.word	0x000016fc
   119d8:	.word	0x0000032c
   119dc:	.word	0x000016fc
   119e0:	.word	0x000016fc
   119e4:	.word	0x00000388
   119e8:	cmp	r7, #256	; 0x100
   119ec:	bgt	11da8 <ReadInt16Data+0x464>
   119f0:	ldr	r3, [r9]
   119f4:	add	r4, sp, #80	; 0x50
   119f8:	mov	r1, r6
   119fc:	mov	r2, r7
   11a00:	mov	r0, r4
   11a04:	bl	18b8 <fread@plt>
   11a08:	mov	sl, r0
   11a0c:	cmp	r7, #1
   11a10:	blt	13270 <ReadInt16Data+0x192c>
   11a14:	mov	r0, #0
   11a18:	cmp	r7, #8
   11a1c:	bcc	11a6c <ReadInt16Data+0x128>
   11a20:	bic	r0, r7, #7
   11a24:	mov	ip, r7
   11a28:	add	r1, sp, #32
   11a2c:	mov	r3, r5
   11a30:	mov	r2, r0
   11a34:	ldr	r7, [r4]
   11a38:	ldr	r6, [r4, #4]
   11a3c:	subs	r2, r2, #8
   11a40:	add	r4, r4, #8
   11a44:	str	r6, [sp, #36]	; 0x24
   11a48:	str	r7, [sp, #32]
   11a4c:	vld1.8	{d16}, [r1 :64]
   11a50:	vmovl.s8	q8, d16
   11a54:	vst1.16	{d16-d17}, [r3]!
   11a58:	bne	11a34 <ReadInt16Data+0xf0>
   11a5c:	ldr	r6, [sp, #24]
   11a60:	mov	r7, ip
   11a64:	cmp	r0, ip
   11a68:	beq	13270 <ReadInt16Data+0x192c>
   11a6c:	add	r3, sp, #80	; 0x50
   11a70:	sub	r1, r7, r0
   11a74:	add	r2, r5, r0, lsl #1
   11a78:	add	r0, r3, r0
   11a7c:	ldrsb	r3, [r0], #1
   11a80:	subs	r1, r1, #1
   11a84:	strh	r3, [r2], #2
   11a88:	bne	11a7c <ReadInt16Data+0x138>
   11a8c:	b	13270 <ReadInt16Data+0x192c>
   11a90:	cmp	r7, #256	; 0x100
   11a94:	bgt	11f14 <ReadInt16Data+0x5d0>
   11a98:	ldr	r3, [r9]
   11a9c:	add	r4, sp, #80	; 0x50
   11aa0:	mov	r1, r6
   11aa4:	mov	r2, r7
   11aa8:	mov	r0, r4
   11aac:	bl	18b8 <fread@plt>
   11ab0:	mov	sl, r0
   11ab4:	cmp	r7, #1
   11ab8:	blt	13270 <ReadInt16Data+0x192c>
   11abc:	mov	r0, #0
   11ac0:	cmp	r7, #8
   11ac4:	bcc	11b14 <ReadInt16Data+0x1d0>
   11ac8:	bic	r0, r7, #7
   11acc:	mov	ip, r7
   11ad0:	add	r1, sp, #56	; 0x38
   11ad4:	mov	r3, r5
   11ad8:	mov	r2, r0
   11adc:	ldr	r7, [r4]
   11ae0:	ldr	r6, [r4, #4]
   11ae4:	subs	r2, r2, #8
   11ae8:	add	r4, r4, #8
   11aec:	str	r6, [sp, #60]	; 0x3c
   11af0:	str	r7, [sp, #56]	; 0x38
   11af4:	vld1.8	{d16}, [r1 :64]
   11af8:	vmovl.u8	q8, d16
   11afc:	vst1.16	{d16-d17}, [r3]!
   11b00:	bne	11adc <ReadInt16Data+0x198>
   11b04:	ldr	r6, [sp, #24]
   11b08:	mov	r7, ip
   11b0c:	cmp	r0, ip
   11b10:	beq	13270 <ReadInt16Data+0x192c>
   11b14:	add	r3, sp, #80	; 0x50
   11b18:	sub	r1, r7, r0
   11b1c:	add	r2, r5, r0, lsl #1
   11b20:	add	r0, r3, r0
   11b24:	ldrb	r3, [r0], #1
   11b28:	subs	r1, r1, #1
   11b2c:	strh	r3, [r2], #2
   11b30:	bne	11b24 <ReadInt16Data+0x1e0>
   11b34:	b	13270 <ReadInt16Data+0x192c>
   11b38:	ldr	r0, [r9, #20]
   11b3c:	cmp	r0, #0
   11b40:	beq	1207c <ReadInt16Data+0x738>
   11b44:	cmp	r7, #256	; 0x100
   11b48:	bgt	12394 <ReadInt16Data+0xa50>
   11b4c:	ldr	r3, [r9]
   11b50:	add	r4, sp, #80	; 0x50
   11b54:	mov	r1, r6
   11b58:	mov	r2, r7
   11b5c:	mov	r0, r4
   11b60:	bl	18b8 <fread@plt>
   11b64:	mov	sl, r0
   11b68:	cmp	r7, #1
   11b6c:	blt	13270 <ReadInt16Data+0x192c>
   11b70:	mov	r0, r4
   11b74:	bl	1c18 <Mat_int16Swap>
   11b78:	strh	r0, [r5], #2
   11b7c:	subs	r7, r7, #1
   11b80:	add	r4, r4, #2
   11b84:	bne	11b70 <ReadInt16Data+0x22c>
   11b88:	b	13270 <ReadInt16Data+0x192c>
   11b8c:	ldr	r0, [r9, #20]
   11b90:	cmp	r0, #0
   11b94:	beq	120ec <ReadInt16Data+0x7a8>
   11b98:	cmp	r7, #256	; 0x100
   11b9c:	bgt	12474 <ReadInt16Data+0xb30>
   11ba0:	ldr	r3, [r9]
   11ba4:	add	r4, sp, #80	; 0x50
   11ba8:	mov	r1, r6
   11bac:	mov	r2, r7
   11bb0:	mov	r0, r4
   11bb4:	bl	18b8 <fread@plt>
   11bb8:	mov	sl, r0
   11bbc:	cmp	r7, #1
   11bc0:	blt	13270 <ReadInt16Data+0x192c>
   11bc4:	mov	r0, r4
   11bc8:	bl	1c2c <Mat_uint16Swap>
   11bcc:	strh	r0, [r5], #2
   11bd0:	subs	r7, r7, #1
   11bd4:	add	r4, r4, #2
   11bd8:	bne	11bc4 <ReadInt16Data+0x280>
   11bdc:	b	13270 <ReadInt16Data+0x192c>
   11be0:	ldr	r0, [r9, #20]
   11be4:	cmp	r0, #0
   11be8:	beq	12128 <ReadInt16Data+0x7e4>
   11bec:	cmp	r7, #256	; 0x100
   11bf0:	bgt	12554 <ReadInt16Data+0xc10>
   11bf4:	ldr	r3, [r9]
   11bf8:	add	r4, sp, #80	; 0x50
   11bfc:	mov	r1, r6
   11c00:	mov	r2, r7
   11c04:	mov	r0, r4
   11c08:	bl	18b8 <fread@plt>
   11c0c:	mov	sl, r0
   11c10:	cmp	r7, #1
   11c14:	blt	13270 <ReadInt16Data+0x192c>
   11c18:	mov	r0, r4
   11c1c:	bl	1bf0 <Mat_int32Swap>
   11c20:	strh	r0, [r5], #2
   11c24:	subs	r7, r7, #1
   11c28:	add	r4, r4, #4
   11c2c:	bne	11c18 <ReadInt16Data+0x2d4>
   11c30:	b	13270 <ReadInt16Data+0x192c>
   11c34:	ldr	r0, [r9, #20]
   11c38:	cmp	r0, #0
   11c3c:	beq	121ac <ReadInt16Data+0x868>
   11c40:	cmp	r7, #256	; 0x100
   11c44:	bgt	12634 <ReadInt16Data+0xcf0>
   11c48:	ldr	r3, [r9]
   11c4c:	add	r4, sp, #80	; 0x50
   11c50:	mov	r1, r6
   11c54:	mov	r2, r7
   11c58:	mov	r0, r4
   11c5c:	bl	18b8 <fread@plt>
   11c60:	mov	sl, r0
   11c64:	cmp	r7, #1
   11c68:	blt	13270 <ReadInt16Data+0x192c>
   11c6c:	mov	r0, r4
   11c70:	bl	1c04 <Mat_uint32Swap>
   11c74:	strh	r0, [r5], #2
   11c78:	subs	r7, r7, #1
   11c7c:	add	r4, r4, #4
   11c80:	bne	11c6c <ReadInt16Data+0x328>
   11c84:	b	13270 <ReadInt16Data+0x192c>
   11c88:	ldr	r0, [r9, #20]
   11c8c:	cmp	r0, #0
   11c90:	beq	12230 <ReadInt16Data+0x8ec>
   11c94:	cmp	r7, #256	; 0x100
   11c98:	bgt	12714 <ReadInt16Data+0xdd0>
   11c9c:	ldr	r3, [r9]
   11ca0:	add	r4, sp, #80	; 0x50
   11ca4:	mov	r1, r6
   11ca8:	mov	r2, r7
   11cac:	mov	r0, r4
   11cb0:	bl	18b8 <fread@plt>
   11cb4:	mov	sl, r0
   11cb8:	cmp	r7, #1
   11cbc:	blt	13270 <ReadInt16Data+0x192c>
   11cc0:	mov	r0, r4
   11cc4:	bl	1c44 <Mat_floatSwap>
   11cc8:	vcvt.s32.f32	s0, s0
   11ccc:	subs	r7, r7, #1
   11cd0:	add	r4, r4, #4
   11cd4:	vmov	r0, s0
   11cd8:	strh	r0, [r5], #2
   11cdc:	bne	11cc0 <ReadInt16Data+0x37c>
   11ce0:	b	13270 <ReadInt16Data+0x192c>
   11ce4:	ldr	r0, [r9, #20]
   11ce8:	cmp	r0, #0
   11cec:	beq	122c4 <ReadInt16Data+0x980>
   11cf0:	cmp	r7, #256	; 0x100
   11cf4:	bgt	12808 <ReadInt16Data+0xec4>
   11cf8:	ldr	r3, [r9]
   11cfc:	add	r4, sp, #80	; 0x50
   11d00:	mov	r1, r6
   11d04:	mov	r2, r7
   11d08:	mov	r0, r4
   11d0c:	bl	18b8 <fread@plt>
   11d10:	mov	sl, r0
   11d14:	cmp	r7, #1
   11d18:	blt	13270 <ReadInt16Data+0x192c>
   11d1c:	mov	r0, r4
   11d20:	bl	1c88 <Mat_doubleSwap>
   11d24:	vcvt.s32.f64	s0, d0
   11d28:	subs	r7, r7, #1
   11d2c:	add	r4, r4, #8
   11d30:	vmov	r0, s0
   11d34:	strh	r0, [r5], #2
   11d38:	bne	11d1c <ReadInt16Data+0x3d8>
   11d3c:	b	13270 <ReadInt16Data+0x192c>
   11d40:	ldr	r0, [r9, #20]
   11d44:	cmp	r0, #0
   11d48:	beq	12310 <ReadInt16Data+0x9cc>
   11d4c:	cmp	r7, #256	; 0x100
   11d50:	bgt	128fc <ReadInt16Data+0xfb8>
   11d54:	ldr	r3, [r9]
   11d58:	add	r4, sp, #80	; 0x50
   11d5c:	mov	r1, r6
   11d60:	mov	r2, r7
   11d64:	mov	r0, r4
   11d68:	bl	18b8 <fread@plt>
   11d6c:	mov	sl, r0
   11d70:	cmp	r7, #1
   11d74:	blt	130b4 <ReadInt16Data+0x1770>
   11d78:	str	r8, [sp, #4]
   11d7c:	mov	r8, r7
   11d80:	mov	r6, r5
   11d84:	mov	r0, r4
   11d88:	bl	1b84 <Mat_int64Swap>
   11d8c:	strh	r0, [r6], #2
   11d90:	subs	r7, r7, #1
   11d94:	add	r4, r4, #8
   11d98:	bne	11d84 <ReadInt16Data+0x440>
   11d9c:	mov	r7, r8
   11da0:	ldr	r6, [sp, #24]
   11da4:	b	13094 <ReadInt16Data+0x1750>
   11da8:	sub	r1, r7, #256	; 0x100
   11dac:	str	r7, [sp, #12]
   11db0:	add	r0, r5, #512	; 0x200
   11db4:	mov	r2, #256	; 0x100
   11db8:	add	r4, sp, #80	; 0x50
   11dbc:	add	r6, sp, #48	; 0x30
   11dc0:	mov	r7, r5
   11dc4:	mov	sl, #0
   11dc8:	str	r5, [sp, #8]
   11dcc:	str	r1, [sp, #20]
   11dd0:	mov	r1, #0
   11dd4:	mov	r9, r0
   11dd8:	ldr	r0, [sp, #28]
   11ddc:	mov	r5, r1
   11de0:	ldr	r1, [sp, #24]
   11de4:	mov	r8, r2
   11de8:	mov	r2, #256	; 0x100
   11dec:	ldr	r3, [r0]
   11df0:	mov	r0, r4
   11df4:	bl	18b8 <fread@plt>
   11df8:	mov	r1, r7
   11dfc:	mov	r2, #0
   11e00:	ldr	r3, [r4, r2]
   11e04:	str	r3, [sp, #48]	; 0x30
   11e08:	add	r3, r4, r2
   11e0c:	add	r2, r2, #8
   11e10:	ldr	r3, [r3, #4]
   11e14:	cmp	r2, #256	; 0x100
   11e18:	str	r3, [sp, #52]	; 0x34
   11e1c:	vld1.8	{d16}, [r6 :64]
   11e20:	vmovl.s8	q8, d16
   11e24:	vst1.16	{d16-d17}, [r1]!
   11e28:	bne	11e00 <ReadInt16Data+0x4bc>
   11e2c:	ldr	r3, [sp, #20]
   11e30:	mov	r1, r5
   11e34:	add	sl, r0, sl
   11e38:	add	r7, r7, #512	; 0x200
   11e3c:	add	r0, r9, #512	; 0x200
   11e40:	add	r2, r8, #256	; 0x100
   11e44:	add	r1, r5, #256	; 0x100
   11e48:	cmp	r1, r3
   11e4c:	blt	11dd4 <ReadInt16Data+0x490>
   11e50:	ldr	r0, [sp, #12]
   11e54:	cmp	r1, r0
   11e58:	bge	1326c <ReadInt16Data+0x1928>
   11e5c:	sub	r4, r0, r1
   11e60:	ldr	r0, [sp, #28]
   11e64:	ldr	r6, [sp, #24]
   11e68:	add	r7, sp, #80	; 0x50
   11e6c:	mov	r2, r4
   11e70:	ldr	r3, [r0]
   11e74:	mov	r0, r7
   11e78:	mov	r1, r6
   11e7c:	bl	18b8 <fread@plt>
   11e80:	add	sl, r0, sl
   11e84:	cmp	r4, #1
   11e88:	blt	13270 <ReadInt16Data+0x192c>
   11e8c:	mov	r0, #0
   11e90:	cmp	r4, #8
   11e94:	bcc	11ee0 <ReadInt16Data+0x59c>
   11e98:	ldr	r0, [sp, #20]
   11e9c:	add	r2, sp, #40	; 0x28
   11ea0:	sub	r0, r0, r5
   11ea4:	bic	r1, r0, #7
   11ea8:	bic	r0, r4, #7
   11eac:	ldr	r3, [r7]
   11eb0:	ldr	r6, [r7, #4]
   11eb4:	subs	r1, r1, #8
   11eb8:	add	r7, r7, #8
   11ebc:	str	r6, [sp, #44]	; 0x2c
   11ec0:	str	r3, [sp, #40]	; 0x28
   11ec4:	vld1.8	{d16}, [r2 :64]
   11ec8:	vmovl.s8	q8, d16
   11ecc:	vst1.16	{d16-d17}, [r9]!
   11ed0:	bne	11eac <ReadInt16Data+0x568>
   11ed4:	ldr	r6, [sp, #24]
   11ed8:	cmp	r4, r0
   11edc:	beq	13270 <ReadInt16Data+0x192c>
   11ee0:	ldr	r3, [sp, #8]
   11ee4:	add	r2, r0, r8
   11ee8:	add	r1, sp, #80	; 0x50
   11eec:	add	r1, r1, r0
   11ef0:	add	r2, r3, r2, lsl #1
   11ef4:	ldr	r3, [sp, #20]
   11ef8:	sub	r3, r3, r5
   11efc:	sub	r0, r3, r0
   11f00:	ldrsb	r3, [r1], #1
   11f04:	subs	r0, r0, #1
   11f08:	strh	r3, [r2], #2
   11f0c:	bne	11f00 <ReadInt16Data+0x5bc>
   11f10:	b	13270 <ReadInt16Data+0x192c>
   11f14:	sub	r1, r7, #256	; 0x100
   11f18:	add	r0, r5, #512	; 0x200
   11f1c:	mov	r2, #256	; 0x100
   11f20:	add	r4, sp, #80	; 0x50
   11f24:	add	r8, sp, #72	; 0x48
   11f28:	mov	r6, r5
   11f2c:	mov	sl, #0
   11f30:	str	r7, [sp, #12]
   11f34:	str	r5, [sp, #8]
   11f38:	str	r1, [sp, #20]
   11f3c:	mov	r1, #0
   11f40:	mov	r7, r0
   11f44:	ldr	r0, [sp, #28]
   11f48:	mov	r5, r1
   11f4c:	ldr	r1, [sp, #24]
   11f50:	mov	r9, r2
   11f54:	mov	r2, #256	; 0x100
   11f58:	ldr	r3, [r0]
   11f5c:	mov	r0, r4
   11f60:	bl	18b8 <fread@plt>
   11f64:	mov	r1, r6
   11f68:	mov	r2, #0
   11f6c:	ldr	r3, [r4, r2]
   11f70:	str	r3, [sp, #72]	; 0x48
   11f74:	add	r3, r4, r2
   11f78:	add	r2, r2, #8
   11f7c:	ldr	r3, [r3, #4]
   11f80:	cmp	r2, #256	; 0x100
   11f84:	str	r3, [sp, #76]	; 0x4c
   11f88:	vld1.8	{d16}, [r8 :64]
   11f8c:	vmovl.u8	q8, d16
   11f90:	vst1.16	{d16-d17}, [r1]!
   11f94:	bne	11f6c <ReadInt16Data+0x628>
   11f98:	ldr	r3, [sp, #20]
   11f9c:	add	r1, r5, #256	; 0x100
   11fa0:	add	sl, r0, sl
   11fa4:	add	r6, r6, #512	; 0x200
   11fa8:	add	r0, r7, #512	; 0x200
   11fac:	add	r2, r9, #256	; 0x100
   11fb0:	cmp	r1, r3
   11fb4:	blt	11f40 <ReadInt16Data+0x5fc>
   11fb8:	ldr	r0, [sp, #12]
   11fbc:	cmp	r1, r0
   11fc0:	bge	1326c <ReadInt16Data+0x1928>
   11fc4:	sub	r8, r0, r1
   11fc8:	ldr	r0, [sp, #28]
   11fcc:	ldr	r6, [sp, #24]
   11fd0:	add	r4, sp, #80	; 0x50
   11fd4:	mov	r2, r8
   11fd8:	ldr	r3, [r0]
   11fdc:	mov	r0, r4
   11fe0:	mov	r1, r6
   11fe4:	bl	18b8 <fread@plt>
   11fe8:	add	sl, r0, sl
   11fec:	cmp	r8, #1
   11ff0:	blt	13270 <ReadInt16Data+0x192c>
   11ff4:	mov	r0, #0
   11ff8:	cmp	r8, #8
   11ffc:	bcc	12048 <ReadInt16Data+0x704>
   12000:	ldr	r0, [sp, #20]
   12004:	add	r2, sp, #64	; 0x40
   12008:	sub	r0, r0, r5
   1200c:	bic	r1, r0, #7
   12010:	bic	r0, r8, #7
   12014:	ldr	r3, [r4]
   12018:	ldr	r6, [r4, #4]
   1201c:	subs	r1, r1, #8
   12020:	add	r4, r4, #8
   12024:	str	r6, [sp, #68]	; 0x44
   12028:	str	r3, [sp, #64]	; 0x40
   1202c:	vld1.8	{d16}, [r2 :64]
   12030:	vmovl.u8	q8, d16
   12034:	vst1.16	{d16-d17}, [r7]!
   12038:	bne	12014 <ReadInt16Data+0x6d0>
   1203c:	ldr	r6, [sp, #24]
   12040:	cmp	r8, r0
   12044:	beq	13270 <ReadInt16Data+0x192c>
   12048:	ldr	r3, [sp, #8]
   1204c:	add	r2, r0, r9
   12050:	add	r1, sp, #80	; 0x50
   12054:	add	r1, r1, r0
   12058:	add	r2, r3, r2, lsl #1
   1205c:	ldr	r3, [sp, #20]
   12060:	sub	r3, r3, r5
   12064:	sub	r0, r3, r0
   12068:	ldrb	r3, [r1], #1
   1206c:	subs	r0, r0, #1
   12070:	strh	r3, [r2], #2
   12074:	bne	12068 <ReadInt16Data+0x724>
   12078:	b	13270 <ReadInt16Data+0x192c>
   1207c:	cmp	r7, #256	; 0x100
   12080:	ble	120f4 <ReadInt16Data+0x7b0>
   12084:	mov	r6, r9
   12088:	mov	r9, r5
   1208c:	sub	r0, r7, #256	; 0x100
   12090:	lsl	r4, r7, #1
   12094:	mov	r5, #0
   12098:	add	r8, sp, #80	; 0x50
   1209c:	mov	sl, #0
   120a0:	str	r7, [sp, #12]
   120a4:	str	r0, [sp, #20]
   120a8:	ldr	r3, [r6]
   120ac:	ldr	r1, [sp, #24]
   120b0:	mov	r0, r8
   120b4:	mov	r2, #256	; 0x100
   120b8:	bl	18b8 <fread@plt>
   120bc:	mov	r7, r0
   120c0:	add	r0, r9, r5, lsl #1
   120c4:	mov	r1, r8
   120c8:	mov	r2, #512	; 0x200
   120cc:	bl	181c <memcpy@plt>
   120d0:	ldr	r0, [sp, #20]
   120d4:	add	r5, r5, #256	; 0x100
   120d8:	add	sl, r7, sl
   120dc:	sub	r4, r4, #512	; 0x200
   120e0:	cmp	r5, r0
   120e4:	blt	120a8 <ReadInt16Data+0x764>
   120e8:	b	12a6c <ReadInt16Data+0x1128>
   120ec:	cmp	r7, #256	; 0x100
   120f0:	bgt	12a08 <ReadInt16Data+0x10c4>
   120f4:	ldr	r3, [r9]
   120f8:	add	r0, sp, #80	; 0x50
   120fc:	mov	r1, r6
   12100:	mov	r2, r7
   12104:	bl	18b8 <fread@plt>
   12108:	mov	sl, r0
   1210c:	cmp	r7, #1
   12110:	blt	13270 <ReadInt16Data+0x192c>
   12114:	lsl	r2, r7, #1
   12118:	add	r1, sp, #80	; 0x50
   1211c:	mov	r0, r5
   12120:	bl	181c <memcpy@plt>
   12124:	b	13270 <ReadInt16Data+0x192c>
   12128:	cmp	r7, #256	; 0x100
   1212c:	bgt	12ab8 <ReadInt16Data+0x1174>
   12130:	ldr	r3, [r9]
   12134:	add	r4, sp, #80	; 0x50
   12138:	mov	r1, r6
   1213c:	mov	r2, r7
   12140:	mov	r0, r4
   12144:	bl	18b8 <fread@plt>
   12148:	mov	sl, r0
   1214c:	cmp	r7, #1
   12150:	blt	13270 <ReadInt16Data+0x192c>
   12154:	mov	r0, #0
   12158:	cmp	r7, #4
   1215c:	bcc	12188 <ReadInt16Data+0x844>
   12160:	bic	r0, r7, #3
   12164:	mov	r2, r5
   12168:	mov	r1, r0
   1216c:	vld1.32	{d16-d17}, [r4]!
   12170:	subs	r1, r1, #4
   12174:	vmovn.i32	d16, q8
   12178:	vst1.16	{d16}, [r2]!
   1217c:	bne	1216c <ReadInt16Data+0x828>
   12180:	cmp	r0, r7
   12184:	beq	13270 <ReadInt16Data+0x192c>
   12188:	add	r3, sp, #80	; 0x50
   1218c:	sub	r1, r7, r0
   12190:	add	r2, r5, r0, lsl #1
   12194:	add	r0, r3, r0, lsl #2
   12198:	ldr	r3, [r0], #4
   1219c:	subs	r1, r1, #1
   121a0:	strh	r3, [r2], #2
   121a4:	bne	12198 <ReadInt16Data+0x854>
   121a8:	b	13270 <ReadInt16Data+0x192c>
   121ac:	cmp	r7, #256	; 0x100
   121b0:	bgt	12be8 <ReadInt16Data+0x12a4>
   121b4:	ldr	r3, [r9]
   121b8:	add	r4, sp, #80	; 0x50
   121bc:	mov	r1, r6
   121c0:	mov	r2, r7
   121c4:	mov	r0, r4
   121c8:	bl	18b8 <fread@plt>
   121cc:	mov	sl, r0
   121d0:	cmp	r7, #1
   121d4:	blt	13270 <ReadInt16Data+0x192c>
   121d8:	mov	r0, #0
   121dc:	cmp	r7, #4
   121e0:	bcc	1220c <ReadInt16Data+0x8c8>
   121e4:	bic	r0, r7, #3
   121e8:	mov	r2, r5
   121ec:	mov	r1, r0
   121f0:	vld1.32	{d16-d17}, [r4]!
   121f4:	subs	r1, r1, #4
   121f8:	vmovn.i32	d16, q8
   121fc:	vst1.16	{d16}, [r2]!
   12200:	bne	121f0 <ReadInt16Data+0x8ac>
   12204:	cmp	r0, r7
   12208:	beq	13270 <ReadInt16Data+0x192c>
   1220c:	add	r3, sp, #80	; 0x50
   12210:	sub	r1, r7, r0
   12214:	add	r2, r5, r0, lsl #1
   12218:	add	r0, r3, r0, lsl #2
   1221c:	ldr	r3, [r0], #4
   12220:	subs	r1, r1, #1
   12224:	strh	r3, [r2], #2
   12228:	bne	1221c <ReadInt16Data+0x8d8>
   1222c:	b	13270 <ReadInt16Data+0x192c>
   12230:	cmp	r7, #256	; 0x100
   12234:	bgt	12d18 <ReadInt16Data+0x13d4>
   12238:	ldr	r3, [r9]
   1223c:	add	r4, sp, #80	; 0x50
   12240:	mov	r1, r6
   12244:	mov	r2, r7
   12248:	mov	r0, r4
   1224c:	bl	18b8 <fread@plt>
   12250:	mov	sl, r0
   12254:	cmp	r7, #1
   12258:	blt	13270 <ReadInt16Data+0x192c>
   1225c:	mov	r0, #0
   12260:	cmp	r7, #4
   12264:	bcc	12294 <ReadInt16Data+0x950>
   12268:	bic	r0, r7, #3
   1226c:	mov	r2, r5
   12270:	mov	r1, r0
   12274:	vld1.32	{d16-d17}, [r4]!
   12278:	subs	r1, r1, #4
   1227c:	vcvt.s32.f32	q8, q8
   12280:	vmovn.i32	d16, q8
   12284:	vst1.16	{d16}, [r2]!
   12288:	bne	12274 <ReadInt16Data+0x930>
   1228c:	cmp	r0, r7
   12290:	beq	13270 <ReadInt16Data+0x192c>
   12294:	add	r3, sp, #80	; 0x50
   12298:	sub	r1, r7, r0
   1229c:	add	r2, r5, r0, lsl #1
   122a0:	add	r0, r3, r0, lsl #2
   122a4:	vldr	s0, [r0]
   122a8:	subs	r1, r1, #1
   122ac:	add	r0, r0, #4
   122b0:	vcvt.s32.f32	s0, s0
   122b4:	vmov	r3, s0
   122b8:	strh	r3, [r2], #2
   122bc:	bne	122a4 <ReadInt16Data+0x960>
   122c0:	b	13270 <ReadInt16Data+0x192c>
   122c4:	cmp	r7, #256	; 0x100
   122c8:	bgt	12e5c <ReadInt16Data+0x1518>
   122cc:	ldr	r3, [r9]
   122d0:	add	r4, sp, #80	; 0x50
   122d4:	mov	r1, r6
   122d8:	mov	r2, r7
   122dc:	mov	r0, r4
   122e0:	bl	18b8 <fread@plt>
   122e4:	mov	sl, r0
   122e8:	cmp	r7, #1
   122ec:	blt	13270 <ReadInt16Data+0x192c>
   122f0:	vldr	d16, [r4]
   122f4:	subs	r7, r7, #1
   122f8:	add	r4, r4, #8
   122fc:	vcvt.s32.f64	s0, d16
   12300:	vmov	r0, s0
   12304:	strh	r0, [r5], #2
   12308:	bne	122f0 <ReadInt16Data+0x9ac>
   1230c:	b	13270 <ReadInt16Data+0x192c>
   12310:	cmp	r7, #256	; 0x100
   12314:	bgt	12f38 <ReadInt16Data+0x15f4>
   12318:	ldr	r3, [r9]
   1231c:	add	r4, sp, #80	; 0x50
   12320:	mov	r1, r6
   12324:	mov	r2, r7
   12328:	mov	r0, r4
   1232c:	bl	18b8 <fread@plt>
   12330:	mov	sl, r0
   12334:	cmp	r7, #1
   12338:	blt	130b4 <ReadInt16Data+0x1770>
   1233c:	mov	r0, #0
   12340:	beq	12370 <ReadInt16Data+0xa2c>
   12344:	bic	r0, r7, #1
   12348:	mov	r2, r5
   1234c:	mov	r1, r0
   12350:	vld1.64	{d16-d17}, [r4]!
   12354:	subs	r1, r1, #2
   12358:	vmovn.i64	d16, q8
   1235c:	vuzp.16	d16, d17
   12360:	vst1.32	{d16[0]}, [r2]!
   12364:	bne	12350 <ReadInt16Data+0xa0c>
   12368:	cmp	r0, r7
   1236c:	beq	130b4 <ReadInt16Data+0x1770>
   12370:	add	r3, sp, #80	; 0x50
   12374:	sub	r1, r7, r0
   12378:	add	r2, r5, r0, lsl #1
   1237c:	add	r0, r3, r0, lsl #3
   12380:	ldrh	r3, [r0], #8
   12384:	subs	r1, r1, #1
   12388:	strh	r3, [r2], #2
   1238c:	bne	12380 <ReadInt16Data+0xa3c>
   12390:	b	130b4 <ReadInt16Data+0x1770>
   12394:	sub	r0, r7, #256	; 0x100
   12398:	mov	r8, r5
   1239c:	add	r1, r5, #512	; 0x200
   123a0:	add	r4, sp, #80	; 0x50
   123a4:	mov	sl, #0
   123a8:	str	r7, [sp, #12]
   123ac:	str	r0, [sp, #20]
   123b0:	mov	r0, #0
   123b4:	mov	r9, r0
   123b8:	ldr	r0, [sp, #28]
   123bc:	mov	r5, r1
   123c0:	mov	r1, r6
   123c4:	mov	r2, #256	; 0x100
   123c8:	ldr	r3, [r0]
   123cc:	mov	r0, r4
   123d0:	bl	18b8 <fread@plt>
   123d4:	mov	r7, r0
   123d8:	mov	r6, #0
   123dc:	add	r0, r4, r6
   123e0:	bl	1c18 <Mat_int16Swap>
   123e4:	add	r1, r8, r6
   123e8:	add	r6, r6, #2
   123ec:	cmp	r6, #512	; 0x200
   123f0:	strh	r0, [r1]
   123f4:	bne	123dc <ReadInt16Data+0xa98>
   123f8:	ldr	r2, [sp, #20]
   123fc:	ldr	r6, [sp, #24]
   12400:	add	r0, r9, #256	; 0x100
   12404:	add	sl, r7, sl
   12408:	add	r8, r8, #512	; 0x200
   1240c:	add	r1, r5, #512	; 0x200
   12410:	cmp	r0, r2
   12414:	blt	123b4 <ReadInt16Data+0xa70>
   12418:	ldr	r2, [sp, #12]
   1241c:	cmp	r0, r2
   12420:	bge	13270 <ReadInt16Data+0x192c>
   12424:	mov	r1, r6
   12428:	sub	r6, r2, r0
   1242c:	ldr	r0, [sp, #28]
   12430:	add	r4, sp, #80	; 0x50
   12434:	mov	r2, r6
   12438:	ldr	r3, [r0]
   1243c:	mov	r0, r4
   12440:	bl	18b8 <fread@plt>
   12444:	add	sl, r0, sl
   12448:	cmp	r6, #1
   1244c:	blt	1326c <ReadInt16Data+0x1928>
   12450:	ldr	r0, [sp, #20]
   12454:	sub	r6, r0, r9
   12458:	mov	r0, r4
   1245c:	bl	1c18 <Mat_int16Swap>
   12460:	strh	r0, [r5], #2
   12464:	subs	r6, r6, #1
   12468:	add	r4, r4, #2
   1246c:	bne	12458 <ReadInt16Data+0xb14>
   12470:	b	1326c <ReadInt16Data+0x1928>
   12474:	sub	r0, r7, #256	; 0x100
   12478:	mov	r8, r5
   1247c:	add	r1, r5, #512	; 0x200
   12480:	add	r4, sp, #80	; 0x50
   12484:	mov	sl, #0
   12488:	str	r7, [sp, #12]
   1248c:	str	r0, [sp, #20]
   12490:	mov	r0, #0
   12494:	mov	r9, r0
   12498:	ldr	r0, [sp, #28]
   1249c:	mov	r5, r1
   124a0:	mov	r1, r6
   124a4:	mov	r2, #256	; 0x100
   124a8:	ldr	r3, [r0]
   124ac:	mov	r0, r4
   124b0:	bl	18b8 <fread@plt>
   124b4:	mov	r7, r0
   124b8:	mov	r6, #0
   124bc:	add	r0, r4, r6
   124c0:	bl	1c2c <Mat_uint16Swap>
   124c4:	add	r1, r8, r6
   124c8:	add	r6, r6, #2
   124cc:	cmp	r6, #512	; 0x200
   124d0:	strh	r0, [r1]
   124d4:	bne	124bc <ReadInt16Data+0xb78>
   124d8:	ldr	r2, [sp, #20]
   124dc:	ldr	r6, [sp, #24]
   124e0:	add	r0, r9, #256	; 0x100
   124e4:	add	sl, r7, sl
   124e8:	add	r8, r8, #512	; 0x200
   124ec:	add	r1, r5, #512	; 0x200
   124f0:	cmp	r0, r2
   124f4:	blt	12494 <ReadInt16Data+0xb50>
   124f8:	ldr	r2, [sp, #12]
   124fc:	cmp	r0, r2
   12500:	bge	13270 <ReadInt16Data+0x192c>
   12504:	mov	r1, r6
   12508:	sub	r6, r2, r0
   1250c:	ldr	r0, [sp, #28]
   12510:	add	r4, sp, #80	; 0x50
   12514:	mov	r2, r6
   12518:	ldr	r3, [r0]
   1251c:	mov	r0, r4
   12520:	bl	18b8 <fread@plt>
   12524:	add	sl, r0, sl
   12528:	cmp	r6, #1
   1252c:	blt	1326c <ReadInt16Data+0x1928>
   12530:	ldr	r0, [sp, #20]
   12534:	sub	r6, r0, r9
   12538:	mov	r0, r4
   1253c:	bl	1c2c <Mat_uint16Swap>
   12540:	strh	r0, [r5], #2
   12544:	subs	r6, r6, #1
   12548:	add	r4, r4, #2
   1254c:	bne	12538 <ReadInt16Data+0xbf4>
   12550:	b	1326c <ReadInt16Data+0x1928>
   12554:	sub	r0, r7, #256	; 0x100
   12558:	add	r1, r5, #512	; 0x200
   1255c:	mov	sl, #0
   12560:	str	r7, [sp, #12]
   12564:	str	r0, [sp, #16]
   12568:	mov	r0, #0
   1256c:	ldr	r3, [r9]
   12570:	add	r7, sp, #80	; 0x50
   12574:	str	r0, [sp, #20]
   12578:	mov	r8, r1
   1257c:	mov	r1, r6
   12580:	mov	r2, #256	; 0x100
   12584:	mov	r0, r7
   12588:	bl	18b8 <fread@plt>
   1258c:	mov	r4, r0
   12590:	mov	r6, #0
   12594:	mov	r0, r7
   12598:	add	r9, r5, r6
   1259c:	bl	1bf0 <Mat_int32Swap>
   125a0:	add	r6, r6, #2
   125a4:	add	r7, r7, #4
   125a8:	strh	r0, [r9]
   125ac:	cmp	r6, #512	; 0x200
   125b0:	bne	12594 <ReadInt16Data+0xc50>
   125b4:	ldr	r7, [sp, #20]
   125b8:	ldr	r2, [sp, #16]
   125bc:	ldr	r6, [sp, #24]
   125c0:	ldr	r9, [sp, #28]
   125c4:	add	sl, r4, sl
   125c8:	add	r5, r5, #512	; 0x200
   125cc:	add	r1, r8, #512	; 0x200
   125d0:	add	r0, r7, #256	; 0x100
   125d4:	cmp	r0, r2
   125d8:	blt	1256c <ReadInt16Data+0xc28>
   125dc:	ldr	r2, [sp, #12]
   125e0:	cmp	r0, r2
   125e4:	bge	13270 <ReadInt16Data+0x192c>
   125e8:	ldr	r3, [r9]
   125ec:	mov	r1, r6
   125f0:	sub	r6, r2, r0
   125f4:	add	r4, sp, #80	; 0x50
   125f8:	mov	r0, r4
   125fc:	mov	r2, r6
   12600:	bl	18b8 <fread@plt>
   12604:	add	sl, r0, sl
   12608:	cmp	r6, #1
   1260c:	blt	1326c <ReadInt16Data+0x1928>
   12610:	ldr	r0, [sp, #16]
   12614:	sub	r6, r0, r7
   12618:	mov	r0, r4
   1261c:	bl	1bf0 <Mat_int32Swap>
   12620:	strh	r0, [r8], #2
   12624:	subs	r6, r6, #1
   12628:	add	r4, r4, #4
   1262c:	bne	12618 <ReadInt16Data+0xcd4>
   12630:	b	1326c <ReadInt16Data+0x1928>
   12634:	sub	r0, r7, #256	; 0x100
   12638:	add	r1, r5, #512	; 0x200
   1263c:	mov	sl, #0
   12640:	str	r7, [sp, #12]
   12644:	str	r0, [sp, #16]
   12648:	mov	r0, #0
   1264c:	ldr	r3, [r9]
   12650:	add	r7, sp, #80	; 0x50
   12654:	str	r0, [sp, #20]
   12658:	mov	r8, r1
   1265c:	mov	r1, r6
   12660:	mov	r2, #256	; 0x100
   12664:	mov	r0, r7
   12668:	bl	18b8 <fread@plt>
   1266c:	mov	r4, r0
   12670:	mov	r6, #0
   12674:	mov	r0, r7
   12678:	add	r9, r5, r6
   1267c:	bl	1c04 <Mat_uint32Swap>
   12680:	add	r6, r6, #2
   12684:	add	r7, r7, #4
   12688:	strh	r0, [r9]
   1268c:	cmp	r6, #512	; 0x200
   12690:	bne	12674 <ReadInt16Data+0xd30>
   12694:	ldr	r7, [sp, #20]
   12698:	ldr	r2, [sp, #16]
   1269c:	ldr	r6, [sp, #24]
   126a0:	ldr	r9, [sp, #28]
   126a4:	add	sl, r4, sl
   126a8:	add	r5, r5, #512	; 0x200
   126ac:	add	r1, r8, #512	; 0x200
   126b0:	add	r0, r7, #256	; 0x100
   126b4:	cmp	r0, r2
   126b8:	blt	1264c <ReadInt16Data+0xd08>
   126bc:	ldr	r2, [sp, #12]
   126c0:	cmp	r0, r2
   126c4:	bge	13270 <ReadInt16Data+0x192c>
   126c8:	ldr	r3, [r9]
   126cc:	mov	r1, r6
   126d0:	sub	r6, r2, r0
   126d4:	add	r4, sp, #80	; 0x50
   126d8:	mov	r0, r4
   126dc:	mov	r2, r6
   126e0:	bl	18b8 <fread@plt>
   126e4:	add	sl, r0, sl
   126e8:	cmp	r6, #1
   126ec:	blt	1326c <ReadInt16Data+0x1928>
   126f0:	ldr	r0, [sp, #16]
   126f4:	sub	r6, r0, r7
   126f8:	mov	r0, r4
   126fc:	bl	1c04 <Mat_uint32Swap>
   12700:	strh	r0, [r8], #2
   12704:	subs	r6, r6, #1
   12708:	add	r4, r4, #4
   1270c:	bne	126f8 <ReadInt16Data+0xdb4>
   12710:	b	1326c <ReadInt16Data+0x1928>
   12714:	sub	r0, r7, #256	; 0x100
   12718:	mov	r8, r5
   1271c:	add	r1, r5, #512	; 0x200
   12720:	mov	sl, #0
   12724:	str	r7, [sp, #12]
   12728:	str	r0, [sp, #20]
   1272c:	mov	r0, #0
   12730:	mov	r9, r0
   12734:	ldr	r0, [sp, #28]
   12738:	add	r7, sp, #80	; 0x50
   1273c:	mov	r5, r1
   12740:	mov	r1, r6
   12744:	mov	r2, #256	; 0x100
   12748:	ldr	r3, [r0]
   1274c:	mov	r0, r7
   12750:	bl	18b8 <fread@plt>
   12754:	mov	r4, r0
   12758:	mov	r6, #0
   1275c:	mov	r0, r7
   12760:	bl	1c44 <Mat_floatSwap>
   12764:	vcvt.s32.f32	s0, s0
   12768:	add	r0, r8, r6
   1276c:	add	r6, r6, #2
   12770:	add	r7, r7, #4
   12774:	vmov	r1, s0
   12778:	cmp	r6, #512	; 0x200
   1277c:	strh	r1, [r0]
   12780:	bne	1275c <ReadInt16Data+0xe18>
   12784:	ldr	r2, [sp, #20]
   12788:	ldr	r6, [sp, #24]
   1278c:	add	r0, r9, #256	; 0x100
   12790:	add	sl, r4, sl
   12794:	add	r8, r8, #512	; 0x200
   12798:	add	r1, r5, #512	; 0x200
   1279c:	cmp	r0, r2
   127a0:	blt	12730 <ReadInt16Data+0xdec>
   127a4:	ldr	r2, [sp, #12]
   127a8:	cmp	r0, r2
   127ac:	bge	13270 <ReadInt16Data+0x192c>
   127b0:	mov	r1, r6
   127b4:	sub	r6, r2, r0
   127b8:	ldr	r0, [sp, #28]
   127bc:	add	r4, sp, #80	; 0x50
   127c0:	mov	r2, r6
   127c4:	ldr	r3, [r0]
   127c8:	mov	r0, r4
   127cc:	bl	18b8 <fread@plt>
   127d0:	add	sl, r0, sl
   127d4:	cmp	r6, #1
   127d8:	blt	1326c <ReadInt16Data+0x1928>
   127dc:	ldr	r0, [sp, #20]
   127e0:	sub	r6, r0, r9
   127e4:	mov	r0, r4
   127e8:	bl	1c44 <Mat_floatSwap>
   127ec:	vcvt.s32.f32	s0, s0
   127f0:	subs	r6, r6, #1
   127f4:	add	r4, r4, #4
   127f8:	vmov	r0, s0
   127fc:	strh	r0, [r5], #2
   12800:	bne	127e4 <ReadInt16Data+0xea0>
   12804:	b	1326c <ReadInt16Data+0x1928>
   12808:	sub	r0, r7, #256	; 0x100
   1280c:	mov	r8, r5
   12810:	add	r1, r5, #512	; 0x200
   12814:	mov	sl, #0
   12818:	str	r7, [sp, #12]
   1281c:	str	r0, [sp, #20]
   12820:	mov	r0, #0
   12824:	mov	r9, r0
   12828:	ldr	r0, [sp, #28]
   1282c:	add	r7, sp, #80	; 0x50
   12830:	mov	r5, r1
   12834:	mov	r1, r6
   12838:	mov	r2, #256	; 0x100
   1283c:	ldr	r3, [r0]
   12840:	mov	r0, r7
   12844:	bl	18b8 <fread@plt>
   12848:	mov	r4, r0
   1284c:	mov	r6, #0
   12850:	mov	r0, r7
   12854:	bl	1c88 <Mat_doubleSwap>
   12858:	vcvt.s32.f64	s0, d0
   1285c:	add	r0, r8, r6
   12860:	add	r6, r6, #2
   12864:	add	r7, r7, #8
   12868:	vmov	r1, s0
   1286c:	cmp	r6, #512	; 0x200
   12870:	strh	r1, [r0]
   12874:	bne	12850 <ReadInt16Data+0xf0c>
   12878:	ldr	r2, [sp, #20]
   1287c:	ldr	r6, [sp, #24]
   12880:	add	r0, r9, #256	; 0x100
   12884:	add	sl, r4, sl
   12888:	add	r8, r8, #512	; 0x200
   1288c:	add	r1, r5, #512	; 0x200
   12890:	cmp	r0, r2
   12894:	blt	12824 <ReadInt16Data+0xee0>
   12898:	ldr	r2, [sp, #12]
   1289c:	cmp	r0, r2
   128a0:	bge	13270 <ReadInt16Data+0x192c>
   128a4:	mov	r1, r6
   128a8:	sub	r6, r2, r0
   128ac:	ldr	r0, [sp, #28]
   128b0:	add	r4, sp, #80	; 0x50
   128b4:	mov	r2, r6
   128b8:	ldr	r3, [r0]
   128bc:	mov	r0, r4
   128c0:	bl	18b8 <fread@plt>
   128c4:	add	sl, r0, sl
   128c8:	cmp	r6, #1
   128cc:	blt	1326c <ReadInt16Data+0x1928>
   128d0:	ldr	r0, [sp, #20]
   128d4:	sub	r6, r0, r9
   128d8:	mov	r0, r4
   128dc:	bl	1c88 <Mat_doubleSwap>
   128e0:	vcvt.s32.f64	s0, d0
   128e4:	subs	r6, r6, #1
   128e8:	add	r4, r4, #8
   128ec:	vmov	r0, s0
   128f0:	strh	r0, [r5], #2
   128f4:	bne	128d8 <ReadInt16Data+0xf94>
   128f8:	b	1326c <ReadInt16Data+0x1928>
   128fc:	sub	r0, r7, #256	; 0x100
   12900:	add	r1, r5, #512	; 0x200
   12904:	mov	r6, r5
   12908:	mov	sl, #0
   1290c:	str	r8, [sp, #4]
   12910:	str	r7, [sp, #12]
   12914:	str	r5, [sp, #8]
   12918:	str	r0, [sp, #16]
   1291c:	mov	r0, #0
   12920:	mov	r5, r1
   12924:	ldr	r3, [r9]
   12928:	ldr	r1, [sp, #24]
   1292c:	add	r4, sp, #80	; 0x50
   12930:	str	r0, [sp, #20]
   12934:	mov	r2, #256	; 0x100
   12938:	mov	r7, sl
   1293c:	mov	r0, r4
   12940:	bl	18b8 <fread@plt>
   12944:	mov	r8, r0
   12948:	mov	r9, #0
   1294c:	mov	r0, r4
   12950:	add	sl, r6, r9
   12954:	bl	1b84 <Mat_int64Swap>
   12958:	add	r9, r9, #2
   1295c:	add	r4, r4, #8
   12960:	strh	r0, [sl]
   12964:	cmp	r9, #512	; 0x200
   12968:	bne	1294c <ReadInt16Data+0x1008>
   1296c:	ldr	r0, [sp, #20]
   12970:	ldr	r2, [sp, #16]
   12974:	ldr	r9, [sp, #28]
   12978:	mov	sl, r7
   1297c:	add	r6, r6, #512	; 0x200
   12980:	add	r1, r5, #512	; 0x200
   12984:	add	sl, r8, r7
   12988:	add	r0, r0, #256	; 0x100
   1298c:	cmp	r0, r2
   12990:	blt	12920 <ReadInt16Data+0xfdc>
   12994:	ldr	r7, [sp, #12]
   12998:	cmp	r0, r7
   1299c:	bge	1308c <ReadInt16Data+0x1748>
   129a0:	ldr	r6, [sp, #24]
   129a4:	ldr	r3, [r9]
   129a8:	sub	r8, r7, r0
   129ac:	add	r4, sp, #80	; 0x50
   129b0:	mov	r0, r4
   129b4:	mov	r2, r8
   129b8:	mov	r1, r6
   129bc:	bl	18b8 <fread@plt>
   129c0:	add	sl, r0, sl
   129c4:	cmp	r8, #1
   129c8:	blt	13090 <ReadInt16Data+0x174c>
   129cc:	ldr	r0, [sp, #16]
   129d0:	ldr	r1, [sp, #20]
   129d4:	ldr	r8, [sp, #4]
   129d8:	sub	r6, r0, r1
   129dc:	mov	r0, r4
   129e0:	bl	1b84 <Mat_int64Swap>
   129e4:	strh	r0, [r5], #2
   129e8:	subs	r6, r6, #1
   129ec:	add	r4, r4, #8
   129f0:	bne	129dc <ReadInt16Data+0x1098>
   129f4:	ldr	r6, [sp, #24]
   129f8:	ldr	r5, [sp, #8]
   129fc:	cmp	r8, #13
   12a00:	beq	130bc <ReadInt16Data+0x1778>
   12a04:	b	13270 <ReadInt16Data+0x192c>
   12a08:	mov	r6, r9
   12a0c:	mov	r9, r5
   12a10:	sub	r0, r7, #256	; 0x100
   12a14:	lsl	r4, r7, #1
   12a18:	mov	r5, #0
   12a1c:	add	r8, sp, #80	; 0x50
   12a20:	mov	sl, #0
   12a24:	str	r7, [sp, #12]
   12a28:	str	r0, [sp, #20]
   12a2c:	ldr	r3, [r6]
   12a30:	ldr	r1, [sp, #24]
   12a34:	mov	r0, r8
   12a38:	mov	r2, #256	; 0x100
   12a3c:	bl	18b8 <fread@plt>
   12a40:	mov	r7, r0
   12a44:	add	r0, r9, r5, lsl #1
   12a48:	mov	r1, r8
   12a4c:	mov	r2, #512	; 0x200
   12a50:	bl	181c <memcpy@plt>
   12a54:	ldr	r0, [sp, #20]
   12a58:	add	r5, r5, #256	; 0x100
   12a5c:	add	sl, r7, sl
   12a60:	sub	r4, r4, #512	; 0x200
   12a64:	cmp	r5, r0
   12a68:	blt	12a2c <ReadInt16Data+0x10e8>
   12a6c:	ldr	r0, [sp, #12]
   12a70:	cmp	r5, r0
   12a74:	bge	1326c <ReadInt16Data+0x1928>
   12a78:	sub	r7, r0, r5
   12a7c:	ldr	r0, [sp, #28]
   12a80:	ldr	r6, [sp, #24]
   12a84:	mov	r2, r7
   12a88:	ldr	r3, [r0]
   12a8c:	add	r0, sp, #80	; 0x50
   12a90:	mov	r1, r6
   12a94:	bl	18b8 <fread@plt>
   12a98:	add	sl, r0, sl
   12a9c:	cmp	r7, #1
   12aa0:	blt	13270 <ReadInt16Data+0x192c>
   12aa4:	add	r0, r9, r5, lsl #1
   12aa8:	add	r1, sp, #80	; 0x50
   12aac:	mov	r2, r4
   12ab0:	bl	181c <memcpy@plt>
   12ab4:	b	13270 <ReadInt16Data+0x192c>
   12ab8:	sub	r1, r7, #256	; 0x100
   12abc:	add	r0, r5, #512	; 0x200
   12ac0:	mov	r2, #256	; 0x100
   12ac4:	add	r8, sp, #80	; 0x50
   12ac8:	mov	sl, #0
   12acc:	str	r7, [sp, #12]
   12ad0:	str	r5, [sp, #8]
   12ad4:	str	r1, [sp, #20]
   12ad8:	mov	r1, #0
   12adc:	mov	r9, r0
   12ae0:	ldr	r0, [sp, #28]
   12ae4:	mov	r4, r1
   12ae8:	mov	r7, r2
   12aec:	mov	r1, r6
   12af0:	mov	r2, #256	; 0x100
   12af4:	ldr	r3, [r0]
   12af8:	mov	r0, r8
   12afc:	bl	18b8 <fread@plt>
   12b00:	mov	r1, #0
   12b04:	mov	r2, r8
   12b08:	vld1.32	{d16-d17}, [r2]!
   12b0c:	add	r3, r5, r1
   12b10:	add	r1, r1, #8
   12b14:	cmp	r1, #512	; 0x200
   12b18:	vmovn.i32	d16, q8
   12b1c:	vst1.16	{d16}, [r3]
   12b20:	bne	12b08 <ReadInt16Data+0x11c4>
   12b24:	ldr	r3, [sp, #20]
   12b28:	add	r1, r4, #256	; 0x100
   12b2c:	add	sl, r0, sl
   12b30:	add	r5, r5, #512	; 0x200
   12b34:	add	r0, r9, #512	; 0x200
   12b38:	add	r2, r7, #256	; 0x100
   12b3c:	cmp	r1, r3
   12b40:	blt	12adc <ReadInt16Data+0x1198>
   12b44:	ldr	r0, [sp, #12]
   12b48:	cmp	r1, r0
   12b4c:	bge	13270 <ReadInt16Data+0x192c>
   12b50:	sub	r8, r0, r1
   12b54:	ldr	r0, [sp, #28]
   12b58:	add	r5, sp, #80	; 0x50
   12b5c:	mov	r1, r6
   12b60:	mov	r2, r8
   12b64:	ldr	r3, [r0]
   12b68:	mov	r0, r5
   12b6c:	bl	18b8 <fread@plt>
   12b70:	add	sl, r0, sl
   12b74:	cmp	r8, #1
   12b78:	blt	13270 <ReadInt16Data+0x192c>
   12b7c:	mov	r0, #0
   12b80:	cmp	r8, #4
   12b84:	bcc	12bb4 <ReadInt16Data+0x1270>
   12b88:	ldr	r0, [sp, #20]
   12b8c:	sub	r0, r0, r4
   12b90:	bic	r1, r0, #3
   12b94:	bic	r0, r8, #3
   12b98:	vld1.32	{d16-d17}, [r5]!
   12b9c:	subs	r1, r1, #4
   12ba0:	vmovn.i32	d16, q8
   12ba4:	vst1.16	{d16}, [r9]!
   12ba8:	bne	12b98 <ReadInt16Data+0x1254>
   12bac:	cmp	r8, r0
   12bb0:	beq	13270 <ReadInt16Data+0x192c>
   12bb4:	ldr	r3, [sp, #8]
   12bb8:	add	r2, r0, r7
   12bbc:	add	r1, sp, #80	; 0x50
   12bc0:	add	r1, r1, r0, lsl #2
   12bc4:	add	r2, r3, r2, lsl #1
   12bc8:	ldr	r3, [sp, #20]
   12bcc:	sub	r3, r3, r4
   12bd0:	sub	r0, r3, r0
   12bd4:	ldr	r3, [r1], #4
   12bd8:	subs	r0, r0, #1
   12bdc:	strh	r3, [r2], #2
   12be0:	bne	12bd4 <ReadInt16Data+0x1290>
   12be4:	b	13270 <ReadInt16Data+0x192c>
   12be8:	sub	r1, r7, #256	; 0x100
   12bec:	add	r0, r5, #512	; 0x200
   12bf0:	mov	r2, #256	; 0x100
   12bf4:	add	r8, sp, #80	; 0x50
   12bf8:	mov	sl, #0
   12bfc:	str	r7, [sp, #12]
   12c00:	str	r5, [sp, #8]
   12c04:	str	r1, [sp, #20]
   12c08:	mov	r1, #0
   12c0c:	mov	r9, r0
   12c10:	ldr	r0, [sp, #28]
   12c14:	mov	r4, r1
   12c18:	mov	r7, r2
   12c1c:	mov	r1, r6
   12c20:	mov	r2, #256	; 0x100
   12c24:	ldr	r3, [r0]
   12c28:	mov	r0, r8
   12c2c:	bl	18b8 <fread@plt>
   12c30:	mov	r1, #0
   12c34:	mov	r2, r8
   12c38:	vld1.32	{d16-d17}, [r2]!
   12c3c:	add	r3, r5, r1
   12c40:	add	r1, r1, #8
   12c44:	cmp	r1, #512	; 0x200
   12c48:	vmovn.i32	d16, q8
   12c4c:	vst1.16	{d16}, [r3]
   12c50:	bne	12c38 <ReadInt16Data+0x12f4>
   12c54:	ldr	r3, [sp, #20]
   12c58:	add	r1, r4, #256	; 0x100
   12c5c:	add	sl, r0, sl
   12c60:	add	r5, r5, #512	; 0x200
   12c64:	add	r0, r9, #512	; 0x200
   12c68:	add	r2, r7, #256	; 0x100
   12c6c:	cmp	r1, r3
   12c70:	blt	12c0c <ReadInt16Data+0x12c8>
   12c74:	ldr	r0, [sp, #12]
   12c78:	cmp	r1, r0
   12c7c:	bge	13270 <ReadInt16Data+0x192c>
   12c80:	sub	r8, r0, r1
   12c84:	ldr	r0, [sp, #28]
   12c88:	add	r5, sp, #80	; 0x50
   12c8c:	mov	r1, r6
   12c90:	mov	r2, r8
   12c94:	ldr	r3, [r0]
   12c98:	mov	r0, r5
   12c9c:	bl	18b8 <fread@plt>
   12ca0:	add	sl, r0, sl
   12ca4:	cmp	r8, #1
   12ca8:	blt	13270 <ReadInt16Data+0x192c>
   12cac:	mov	r0, #0
   12cb0:	cmp	r8, #4
   12cb4:	bcc	12ce4 <ReadInt16Data+0x13a0>
   12cb8:	ldr	r0, [sp, #20]
   12cbc:	sub	r0, r0, r4
   12cc0:	bic	r1, r0, #3
   12cc4:	bic	r0, r8, #3
   12cc8:	vld1.32	{d16-d17}, [r5]!
   12ccc:	subs	r1, r1, #4
   12cd0:	vmovn.i32	d16, q8
   12cd4:	vst1.16	{d16}, [r9]!
   12cd8:	bne	12cc8 <ReadInt16Data+0x1384>
   12cdc:	cmp	r8, r0
   12ce0:	beq	13270 <ReadInt16Data+0x192c>
   12ce4:	ldr	r3, [sp, #8]
   12ce8:	add	r2, r0, r7
   12cec:	add	r1, sp, #80	; 0x50
   12cf0:	add	r1, r1, r0, lsl #2
   12cf4:	add	r2, r3, r2, lsl #1
   12cf8:	ldr	r3, [sp, #20]
   12cfc:	sub	r3, r3, r4
   12d00:	sub	r0, r3, r0
   12d04:	ldr	r3, [r1], #4
   12d08:	subs	r0, r0, #1
   12d0c:	strh	r3, [r2], #2
   12d10:	bne	12d04 <ReadInt16Data+0x13c0>
   12d14:	b	13270 <ReadInt16Data+0x192c>
   12d18:	sub	r1, r7, #256	; 0x100
   12d1c:	add	r0, r5, #512	; 0x200
   12d20:	mov	r2, #256	; 0x100
   12d24:	add	r8, sp, #80	; 0x50
   12d28:	mov	sl, #0
   12d2c:	str	r7, [sp, #12]
   12d30:	str	r5, [sp, #8]
   12d34:	str	r1, [sp, #20]
   12d38:	mov	r1, #0
   12d3c:	mov	r9, r0
   12d40:	ldr	r0, [sp, #28]
   12d44:	mov	r4, r1
   12d48:	mov	r7, r2
   12d4c:	mov	r1, r6
   12d50:	mov	r2, #256	; 0x100
   12d54:	ldr	r3, [r0]
   12d58:	mov	r0, r8
   12d5c:	bl	18b8 <fread@plt>
   12d60:	mov	r1, #0
   12d64:	mov	r2, r8
   12d68:	vld1.32	{d16-d17}, [r2]!
   12d6c:	add	r3, r5, r1
   12d70:	add	r1, r1, #8
   12d74:	cmp	r1, #512	; 0x200
   12d78:	vcvt.s32.f32	q8, q8
   12d7c:	vmovn.i32	d16, q8
   12d80:	vst1.16	{d16}, [r3]
   12d84:	bne	12d68 <ReadInt16Data+0x1424>
   12d88:	ldr	r3, [sp, #20]
   12d8c:	add	r1, r4, #256	; 0x100
   12d90:	add	sl, r0, sl
   12d94:	add	r5, r5, #512	; 0x200
   12d98:	add	r0, r9, #512	; 0x200
   12d9c:	add	r2, r7, #256	; 0x100
   12da0:	cmp	r1, r3
   12da4:	blt	12d3c <ReadInt16Data+0x13f8>
   12da8:	ldr	r0, [sp, #12]
   12dac:	cmp	r1, r0
   12db0:	bge	13270 <ReadInt16Data+0x192c>
   12db4:	sub	r8, r0, r1
   12db8:	ldr	r0, [sp, #28]
   12dbc:	add	r5, sp, #80	; 0x50
   12dc0:	mov	r1, r6
   12dc4:	mov	r2, r8
   12dc8:	ldr	r3, [r0]
   12dcc:	mov	r0, r5
   12dd0:	bl	18b8 <fread@plt>
   12dd4:	add	sl, r0, sl
   12dd8:	cmp	r8, #1
   12ddc:	blt	13270 <ReadInt16Data+0x192c>
   12de0:	mov	r0, #0
   12de4:	cmp	r8, #4
   12de8:	bcc	12e1c <ReadInt16Data+0x14d8>
   12dec:	ldr	r0, [sp, #20]
   12df0:	sub	r0, r0, r4
   12df4:	bic	r1, r0, #3
   12df8:	bic	r0, r8, #3
   12dfc:	vld1.32	{d16-d17}, [r5]!
   12e00:	subs	r1, r1, #4
   12e04:	vcvt.s32.f32	q8, q8
   12e08:	vmovn.i32	d16, q8
   12e0c:	vst1.16	{d16}, [r9]!
   12e10:	bne	12dfc <ReadInt16Data+0x14b8>
   12e14:	cmp	r8, r0
   12e18:	beq	13270 <ReadInt16Data+0x192c>
   12e1c:	ldr	r3, [sp, #8]
   12e20:	add	r2, r0, r7
   12e24:	add	r1, sp, #80	; 0x50
   12e28:	add	r1, r1, r0, lsl #2
   12e2c:	add	r2, r3, r2, lsl #1
   12e30:	ldr	r3, [sp, #20]
   12e34:	sub	r3, r3, r4
   12e38:	sub	r0, r3, r0
   12e3c:	vldr	s0, [r1]
   12e40:	subs	r0, r0, #1
   12e44:	add	r1, r1, #4
   12e48:	vcvt.s32.f32	s0, s0
   12e4c:	vmov	r3, s0
   12e50:	strh	r3, [r2], #2
   12e54:	bne	12e3c <ReadInt16Data+0x14f8>
   12e58:	b	13270 <ReadInt16Data+0x192c>
   12e5c:	add	r1, r5, #512	; 0x200
   12e60:	sub	r8, r7, #256	; 0x100
   12e64:	mov	r0, #0
   12e68:	add	r4, sp, #80	; 0x50
   12e6c:	mov	sl, #0
   12e70:	str	r7, [sp, #12]
   12e74:	mov	r9, r0
   12e78:	ldr	r0, [sp, #28]
   12e7c:	mov	r7, r1
   12e80:	mov	r1, r6
   12e84:	mov	r2, #256	; 0x100
   12e88:	ldr	r3, [r0]
   12e8c:	mov	r0, r4
   12e90:	bl	18b8 <fread@plt>
   12e94:	mov	r1, #0
   12e98:	mov	r2, r4
   12e9c:	vldr	d16, [r2]
   12ea0:	add	r3, r5, r1
   12ea4:	add	r1, r1, #2
   12ea8:	add	r2, r2, #8
   12eac:	cmp	r1, #512	; 0x200
   12eb0:	vcvt.s32.f64	s0, d16
   12eb4:	vmov	r6, s0
   12eb8:	strh	r6, [r3]
   12ebc:	bne	12e9c <ReadInt16Data+0x1558>
   12ec0:	ldr	r6, [sp, #24]
   12ec4:	add	sl, r0, sl
   12ec8:	add	r0, r9, #256	; 0x100
   12ecc:	add	r5, r5, #512	; 0x200
   12ed0:	add	r1, r7, #512	; 0x200
   12ed4:	cmp	r0, r8
   12ed8:	blt	12e74 <ReadInt16Data+0x1530>
   12edc:	ldr	r2, [sp, #12]
   12ee0:	cmp	r0, r2
   12ee4:	bge	13270 <ReadInt16Data+0x192c>
   12ee8:	mov	r1, r6
   12eec:	sub	r6, r2, r0
   12ef0:	ldr	r0, [sp, #28]
   12ef4:	add	r4, sp, #80	; 0x50
   12ef8:	mov	r2, r6
   12efc:	ldr	r3, [r0]
   12f00:	mov	r0, r4
   12f04:	bl	18b8 <fread@plt>
   12f08:	add	sl, r0, sl
   12f0c:	cmp	r6, #1
   12f10:	blt	1326c <ReadInt16Data+0x1928>
   12f14:	sub	r0, r8, r9
   12f18:	vldr	d16, [r4]
   12f1c:	subs	r0, r0, #1
   12f20:	add	r4, r4, #8
   12f24:	vcvt.s32.f64	s0, d16
   12f28:	vmov	r1, s0
   12f2c:	strh	r1, [r7], #2
   12f30:	bne	12f18 <ReadInt16Data+0x15d4>
   12f34:	b	1326c <ReadInt16Data+0x1928>
   12f38:	sub	r1, r7, #256	; 0x100
   12f3c:	str	r8, [sp, #4]
   12f40:	add	r0, r5, #512	; 0x200
   12f44:	mov	r2, #256	; 0x100
   12f48:	add	r8, sp, #80	; 0x50
   12f4c:	mov	sl, #0
   12f50:	str	r7, [sp, #12]
   12f54:	str	r5, [sp, #8]
   12f58:	str	r1, [sp, #20]
   12f5c:	mov	r1, #0
   12f60:	mov	r7, r0
   12f64:	ldr	r0, [sp, #28]
   12f68:	mov	r9, r1
   12f6c:	mov	r4, r2
   12f70:	mov	r1, r6
   12f74:	mov	r2, #256	; 0x100
   12f78:	ldr	r3, [r0]
   12f7c:	mov	r0, r8
   12f80:	bl	18b8 <fread@plt>
   12f84:	mov	r1, #0
   12f88:	mov	r2, r8
   12f8c:	vld1.64	{d16-d17}, [r2]!
   12f90:	add	r3, r5, r1
   12f94:	add	r1, r1, #4
   12f98:	cmp	r1, #512	; 0x200
   12f9c:	vmovn.i64	d16, q8
   12fa0:	vuzp.16	d16, d17
   12fa4:	vst1.32	{d16[0]}, [r3]
   12fa8:	bne	12f8c <ReadInt16Data+0x1648>
   12fac:	ldr	r3, [sp, #20]
   12fb0:	add	r1, r9, #256	; 0x100
   12fb4:	add	sl, r0, sl
   12fb8:	add	r5, r5, #512	; 0x200
   12fbc:	add	r0, r7, #512	; 0x200
   12fc0:	add	r2, r4, #256	; 0x100
   12fc4:	cmp	r1, r3
   12fc8:	blt	12f60 <ReadInt16Data+0x161c>
   12fcc:	ldr	r0, [sp, #12]
   12fd0:	cmp	r1, r0
   12fd4:	bge	130a4 <ReadInt16Data+0x1760>
   12fd8:	sub	r8, r0, r1
   12fdc:	ldr	r0, [sp, #28]
   12fe0:	add	r5, sp, #80	; 0x50
   12fe4:	mov	r1, r6
   12fe8:	mov	r2, r8
   12fec:	ldr	r3, [r0]
   12ff0:	mov	r0, r5
   12ff4:	bl	18b8 <fread@plt>
   12ff8:	mov	r2, r8
   12ffc:	cmp	r8, #1
   13000:	ldr	r8, [sp, #4]
   13004:	add	sl, r0, sl
   13008:	blt	13074 <ReadInt16Data+0x1730>
   1300c:	mov	r0, #0
   13010:	beq	13044 <ReadInt16Data+0x1700>
   13014:	ldr	r0, [sp, #20]
   13018:	sub	r0, r0, r9
   1301c:	bic	r1, r0, #1
   13020:	bic	r0, r2, #1
   13024:	vld1.64	{d16-d17}, [r5]!
   13028:	subs	r1, r1, #2
   1302c:	vmovn.i64	d16, q8
   13030:	vuzp.16	d16, d17
   13034:	vst1.32	{d16[0]}, [r7]!
   13038:	bne	13024 <ReadInt16Data+0x16e0>
   1303c:	cmp	r2, r0
   13040:	beq	13074 <ReadInt16Data+0x1730>
   13044:	ldr	r3, [sp, #8]
   13048:	add	r2, r0, r4
   1304c:	add	r1, sp, #80	; 0x50
   13050:	add	r1, r1, r0, lsl #3
   13054:	add	r2, r3, r2, lsl #1
   13058:	ldr	r3, [sp, #20]
   1305c:	sub	r3, r3, r9
   13060:	sub	r0, r3, r0
   13064:	ldrh	r3, [r1], #8
   13068:	subs	r0, r0, #1
   1306c:	strh	r3, [r2], #2
   13070:	bne	13064 <ReadInt16Data+0x1720>
   13074:	ldr	r5, [sp, #8]
   13078:	ldr	r7, [sp, #12]
   1307c:	ldr	r9, [sp, #28]
   13080:	cmp	r8, #13
   13084:	beq	130bc <ReadInt16Data+0x1778>
   13088:	b	13270 <ReadInt16Data+0x192c>
   1308c:	ldr	r6, [sp, #24]
   13090:	ldr	r5, [sp, #8]
   13094:	ldr	r8, [sp, #4]
   13098:	cmp	r8, #13
   1309c:	beq	130bc <ReadInt16Data+0x1778>
   130a0:	b	13270 <ReadInt16Data+0x192c>
   130a4:	ldr	r5, [sp, #8]
   130a8:	ldr	r9, [sp, #28]
   130ac:	ldr	r8, [sp, #4]
   130b0:	mov	r7, r0
   130b4:	cmp	r8, #13
   130b8:	bne	13270 <ReadInt16Data+0x192c>
   130bc:	ldr	r0, [r9, #20]
   130c0:	cmp	r0, #0
   130c4:	beq	13110 <ReadInt16Data+0x17cc>
   130c8:	cmp	r7, #256	; 0x100
   130cc:	bgt	13194 <ReadInt16Data+0x1850>
   130d0:	ldr	r3, [r9]
   130d4:	add	r4, sp, #80	; 0x50
   130d8:	mov	r1, r6
   130dc:	mov	r2, r7
   130e0:	mov	r0, r4
   130e4:	bl	18b8 <fread@plt>
   130e8:	add	sl, r0, sl
   130ec:	cmp	r7, #1
   130f0:	blt	13270 <ReadInt16Data+0x192c>
   130f4:	mov	r0, r4
   130f8:	bl	1bd4 <Mat_uint64Swap>
   130fc:	strh	r0, [r5], #2
   13100:	subs	r7, r7, #1
   13104:	add	r4, r4, #8
   13108:	bne	130f4 <ReadInt16Data+0x17b0>
   1310c:	b	13270 <ReadInt16Data+0x192c>
   13110:	cmp	r7, #256	; 0x100
   13114:	bgt	1327c <ReadInt16Data+0x1938>
   13118:	ldr	r3, [r9]
   1311c:	add	r4, sp, #80	; 0x50
   13120:	mov	r1, r6
   13124:	mov	r2, r7
   13128:	mov	r0, r4
   1312c:	bl	18b8 <fread@plt>
   13130:	add	sl, r0, sl
   13134:	cmp	r7, #1
   13138:	blt	13270 <ReadInt16Data+0x192c>
   1313c:	mov	r0, #0
   13140:	beq	13170 <ReadInt16Data+0x182c>
   13144:	bic	r0, r7, #1
   13148:	mov	r2, r5
   1314c:	mov	r1, r0
   13150:	vld1.64	{d16-d17}, [r4]!
   13154:	subs	r1, r1, #2
   13158:	vmovn.i64	d16, q8
   1315c:	vuzp.16	d16, d17
   13160:	vst1.32	{d16[0]}, [r2]!
   13164:	bne	13150 <ReadInt16Data+0x180c>
   13168:	cmp	r0, r7
   1316c:	beq	13270 <ReadInt16Data+0x192c>
   13170:	add	r3, sp, #80	; 0x50
   13174:	sub	r1, r7, r0
   13178:	add	r2, r5, r0, lsl #1
   1317c:	add	r0, r3, r0, lsl #3
   13180:	ldrh	r3, [r0], #8
   13184:	subs	r1, r1, #1
   13188:	strh	r3, [r2], #2
   1318c:	bne	13180 <ReadInt16Data+0x183c>
   13190:	b	13270 <ReadInt16Data+0x192c>
   13194:	sub	r0, r7, #256	; 0x100
   13198:	add	r1, r5, #512	; 0x200
   1319c:	str	r7, [sp, #12]
   131a0:	str	r0, [sp, #16]
   131a4:	mov	r0, #0
   131a8:	ldr	r3, [r9]
   131ac:	add	r7, sp, #80	; 0x50
   131b0:	str	r0, [sp, #20]
   131b4:	mov	r8, r1
   131b8:	mov	r1, r6
   131bc:	mov	r2, #256	; 0x100
   131c0:	mov	r0, r7
   131c4:	bl	18b8 <fread@plt>
   131c8:	mov	r4, r0
   131cc:	mov	r6, #0
   131d0:	mov	r0, r7
   131d4:	add	r9, r5, r6
   131d8:	bl	1bd4 <Mat_uint64Swap>
   131dc:	add	r6, r6, #2
   131e0:	add	r7, r7, #8
   131e4:	strh	r0, [r9]
   131e8:	cmp	r6, #512	; 0x200
   131ec:	bne	131d0 <ReadInt16Data+0x188c>
   131f0:	ldr	r7, [sp, #20]
   131f4:	ldr	r2, [sp, #16]
   131f8:	ldr	r6, [sp, #24]
   131fc:	ldr	r9, [sp, #28]
   13200:	add	sl, r4, sl
   13204:	add	r5, r5, #512	; 0x200
   13208:	add	r1, r8, #512	; 0x200
   1320c:	add	r0, r7, #256	; 0x100
   13210:	cmp	r0, r2
   13214:	blt	131a8 <ReadInt16Data+0x1864>
   13218:	ldr	r2, [sp, #12]
   1321c:	cmp	r0, r2
   13220:	bge	13270 <ReadInt16Data+0x192c>
   13224:	ldr	r3, [r9]
   13228:	mov	r1, r6
   1322c:	sub	r6, r2, r0
   13230:	add	r4, sp, #80	; 0x50
   13234:	mov	r0, r4
   13238:	mov	r2, r6
   1323c:	bl	18b8 <fread@plt>
   13240:	add	sl, r0, sl
   13244:	cmp	r6, #1
   13248:	blt	1326c <ReadInt16Data+0x1928>
   1324c:	ldr	r0, [sp, #16]
   13250:	sub	r6, r0, r7
   13254:	mov	r0, r4
   13258:	bl	1bd4 <Mat_uint64Swap>
   1325c:	strh	r0, [r8], #2
   13260:	subs	r6, r6, #1
   13264:	add	r4, r4, #8
   13268:	bne	13254 <ReadInt16Data+0x1910>
   1326c:	ldr	r6, [sp, #24]
   13270:	mul	r0, sl, r6
   13274:	sub	sp, fp, #28
   13278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1327c:	sub	r1, r7, #256	; 0x100
   13280:	add	r0, r5, #512	; 0x200
   13284:	mov	r2, #256	; 0x100
   13288:	add	r8, sp, #80	; 0x50
   1328c:	str	r7, [sp, #12]
   13290:	str	r5, [sp, #8]
   13294:	str	r1, [sp, #20]
   13298:	mov	r1, #0
   1329c:	mov	r9, r0
   132a0:	ldr	r0, [sp, #28]
   132a4:	mov	r4, r1
   132a8:	mov	r7, r2
   132ac:	mov	r1, r6
   132b0:	mov	r2, #256	; 0x100
   132b4:	ldr	r3, [r0]
   132b8:	mov	r0, r8
   132bc:	bl	18b8 <fread@plt>
   132c0:	mov	r1, #0
   132c4:	mov	r2, r8
   132c8:	vld1.64	{d16-d17}, [r2]!
   132cc:	add	r3, r5, r1
   132d0:	add	r1, r1, #4
   132d4:	cmp	r1, #512	; 0x200
   132d8:	vmovn.i64	d16, q8
   132dc:	vuzp.16	d16, d17
   132e0:	vst1.32	{d16[0]}, [r3]
   132e4:	bne	132c8 <ReadInt16Data+0x1984>
   132e8:	ldr	r3, [sp, #20]
   132ec:	add	r1, r4, #256	; 0x100
   132f0:	add	sl, r0, sl
   132f4:	add	r5, r5, #512	; 0x200
   132f8:	add	r0, r9, #512	; 0x200
   132fc:	add	r2, r7, #256	; 0x100
   13300:	cmp	r1, r3
   13304:	blt	1329c <ReadInt16Data+0x1958>
   13308:	ldr	r0, [sp, #12]
   1330c:	cmp	r1, r0
   13310:	bge	13270 <ReadInt16Data+0x192c>
   13314:	sub	r8, r0, r1
   13318:	ldr	r0, [sp, #28]
   1331c:	add	r5, sp, #80	; 0x50
   13320:	mov	r1, r6
   13324:	mov	r2, r8
   13328:	ldr	r3, [r0]
   1332c:	mov	r0, r5
   13330:	bl	18b8 <fread@plt>
   13334:	add	sl, r0, sl
   13338:	cmp	r8, #1
   1333c:	blt	13270 <ReadInt16Data+0x192c>
   13340:	mov	r0, #0
   13344:	beq	13378 <ReadInt16Data+0x1a34>
   13348:	ldr	r0, [sp, #20]
   1334c:	sub	r0, r0, r4
   13350:	bic	r1, r0, #1
   13354:	bic	r0, r8, #1
   13358:	vld1.64	{d16-d17}, [r5]!
   1335c:	subs	r1, r1, #2
   13360:	vmovn.i64	d16, q8
   13364:	vuzp.16	d16, d17
   13368:	vst1.32	{d16[0]}, [r9]!
   1336c:	bne	13358 <ReadInt16Data+0x1a14>
   13370:	cmp	r8, r0
   13374:	beq	13270 <ReadInt16Data+0x192c>
   13378:	ldr	r3, [sp, #8]
   1337c:	add	r2, r0, r7
   13380:	add	r1, sp, #80	; 0x50
   13384:	add	r1, r1, r0, lsl #3
   13388:	add	r2, r3, r2, lsl #1
   1338c:	ldr	r3, [sp, #20]
   13390:	sub	r3, r3, r4
   13394:	sub	r0, r3, r0
   13398:	ldrh	r3, [r1], #8
   1339c:	subs	r0, r0, #1
   133a0:	strh	r3, [r2], #2
   133a4:	bne	13398 <ReadInt16Data+0x1a54>
   133a8:	b	13270 <ReadInt16Data+0x192c>

000133ac <ReadCompressedInt16Data>:
   133ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133b0:	add	fp, sp, #28
   133b4:	sub	sp, sp, #12
   133b8:	mov	r7, r0
   133bc:	mov	r0, #0
   133c0:	cmp	r1, #0
   133c4:	beq	133d8 <ReadCompressedInt16Data+0x2c>
   133c8:	cmp	r7, #0
   133cc:	movne	r5, r2
   133d0:	cmpne	r2, #0
   133d4:	bne	133e0 <ReadCompressedInt16Data+0x34>
   133d8:	sub	sp, fp, #28
   133dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133e0:	ldr	sl, [fp, #8]
   133e4:	mov	r0, r3
   133e8:	mov	r4, r3
   133ec:	mov	r6, r1
   133f0:	bl	1924 <Mat_SizeOf@plt>
   133f4:	mov	r9, r0
   133f8:	sub	r0, r4, #1
   133fc:	cmp	r0, #12
   13400:	bhi	138d0 <ReadCompressedInt16Data+0x524>
   13404:	add	r1, pc, #4
   13408:	ldr	r0, [r1, r0, lsl #2]
   1340c:	add	pc, r1, r0
   13410:	.word	0x00000034
   13414:	.word	0x0000006c
   13418:	.word	0x000000a4
   1341c:	.word	0x000000ec
   13420:	.word	0x00000134
   13424:	.word	0x0000017c
   13428:	.word	0x000001c4
   1342c:	.word	0x000004c0
   13430:	.word	0x00000214
   13434:	.word	0x000004c0
   13438:	.word	0x000004c0
   1343c:	.word	0x00000264
   13440:	.word	0x000002ac
   13444:	cmp	sl, #1
   13448:	blt	138d0 <ReadCompressedInt16Data+0x524>
   1344c:	mov	r8, sp
   13450:	mov	r4, sl
   13454:	mov	r0, r7
   13458:	mov	r1, r6
   1345c:	mov	r2, r8
   13460:	mov	r3, r9
   13464:	bl	32b8 <InflateData>
   13468:	ldrsb	r0, [sp]
   1346c:	subs	r4, r4, #1
   13470:	strh	r0, [r5], #2
   13474:	bne	13454 <ReadCompressedInt16Data+0xa8>
   13478:	b	138d0 <ReadCompressedInt16Data+0x524>
   1347c:	cmp	sl, #1
   13480:	blt	138d0 <ReadCompressedInt16Data+0x524>
   13484:	mov	r8, sp
   13488:	mov	r4, sl
   1348c:	mov	r0, r7
   13490:	mov	r1, r6
   13494:	mov	r2, r8
   13498:	mov	r3, r9
   1349c:	bl	32b8 <InflateData>
   134a0:	ldrb	r0, [sp]
   134a4:	subs	r4, r4, #1
   134a8:	strh	r0, [r5], #2
   134ac:	bne	1348c <ReadCompressedInt16Data+0xe0>
   134b0:	b	138d0 <ReadCompressedInt16Data+0x524>
   134b4:	ldr	r0, [r7, #20]
   134b8:	cmp	r0, #0
   134bc:	beq	13704 <ReadCompressedInt16Data+0x358>
   134c0:	cmp	sl, #1
   134c4:	blt	138d0 <ReadCompressedInt16Data+0x524>
   134c8:	mov	r8, sp
   134cc:	mov	r4, sl
   134d0:	mov	r0, r7
   134d4:	mov	r1, r6
   134d8:	mov	r2, r8
   134dc:	mov	r3, r9
   134e0:	bl	32b8 <InflateData>
   134e4:	mov	r0, r8
   134e8:	bl	1c18 <Mat_int16Swap>
   134ec:	strh	r0, [r5], #2
   134f0:	subs	r4, r4, #1
   134f4:	bne	134d0 <ReadCompressedInt16Data+0x124>
   134f8:	b	138d0 <ReadCompressedInt16Data+0x524>
   134fc:	ldr	r0, [r7, #20]
   13500:	cmp	r0, #0
   13504:	beq	1373c <ReadCompressedInt16Data+0x390>
   13508:	cmp	sl, #1
   1350c:	blt	138d0 <ReadCompressedInt16Data+0x524>
   13510:	mov	r8, sp
   13514:	mov	r4, sl
   13518:	mov	r0, r7
   1351c:	mov	r1, r6
   13520:	mov	r2, r8
   13524:	mov	r3, r9
   13528:	bl	32b8 <InflateData>
   1352c:	mov	r0, r8
   13530:	bl	1c2c <Mat_uint16Swap>
   13534:	strh	r0, [r5], #2
   13538:	subs	r4, r4, #1
   1353c:	bne	13518 <ReadCompressedInt16Data+0x16c>
   13540:	b	138d0 <ReadCompressedInt16Data+0x524>
   13544:	ldr	r0, [r7, #20]
   13548:	cmp	r0, #0
   1354c:	beq	13774 <ReadCompressedInt16Data+0x3c8>
   13550:	cmp	sl, #1
   13554:	blt	138d0 <ReadCompressedInt16Data+0x524>
   13558:	mov	r8, sp
   1355c:	mov	r4, sl
   13560:	mov	r0, r7
   13564:	mov	r1, r6
   13568:	mov	r2, r8
   1356c:	mov	r3, r9
   13570:	bl	32b8 <InflateData>
   13574:	mov	r0, r8
   13578:	bl	1bf0 <Mat_int32Swap>
   1357c:	strh	r0, [r5], #2
   13580:	subs	r4, r4, #1
   13584:	bne	13560 <ReadCompressedInt16Data+0x1b4>
   13588:	b	138d0 <ReadCompressedInt16Data+0x524>
   1358c:	ldr	r0, [r7, #20]
   13590:	cmp	r0, #0
   13594:	beq	137ac <ReadCompressedInt16Data+0x400>
   13598:	cmp	sl, #1
   1359c:	blt	138d0 <ReadCompressedInt16Data+0x524>
   135a0:	mov	r8, sp
   135a4:	mov	r4, sl
   135a8:	mov	r0, r7
   135ac:	mov	r1, r6
   135b0:	mov	r2, r8
   135b4:	mov	r3, r9
   135b8:	bl	32b8 <InflateData>
   135bc:	mov	r0, r8
   135c0:	bl	1c04 <Mat_uint32Swap>
   135c4:	strh	r0, [r5], #2
   135c8:	subs	r4, r4, #1
   135cc:	bne	135a8 <ReadCompressedInt16Data+0x1fc>
   135d0:	b	138d0 <ReadCompressedInt16Data+0x524>
   135d4:	ldr	r0, [r7, #20]
   135d8:	cmp	r0, #0
   135dc:	beq	137e4 <ReadCompressedInt16Data+0x438>
   135e0:	cmp	sl, #1
   135e4:	blt	138d0 <ReadCompressedInt16Data+0x524>
   135e8:	mov	r8, sp
   135ec:	mov	r4, sl
   135f0:	mov	r0, r7
   135f4:	mov	r1, r6
   135f8:	mov	r2, r8
   135fc:	mov	r3, r9
   13600:	bl	32b8 <InflateData>
   13604:	mov	r0, r8
   13608:	bl	1c44 <Mat_floatSwap>
   1360c:	vcvt.s32.f32	s0, s0
   13610:	subs	r4, r4, #1
   13614:	vmov	r0, s0
   13618:	strh	r0, [r5], #2
   1361c:	bne	135f0 <ReadCompressedInt16Data+0x244>
   13620:	b	138d0 <ReadCompressedInt16Data+0x524>
   13624:	ldr	r0, [r7, #20]
   13628:	cmp	r0, #0
   1362c:	beq	13824 <ReadCompressedInt16Data+0x478>
   13630:	cmp	sl, #1
   13634:	blt	138d0 <ReadCompressedInt16Data+0x524>
   13638:	mov	r8, sp
   1363c:	mov	r4, sl
   13640:	mov	r0, r7
   13644:	mov	r1, r6
   13648:	mov	r2, r8
   1364c:	mov	r3, r9
   13650:	bl	32b8 <InflateData>
   13654:	mov	r0, r8
   13658:	bl	1c88 <Mat_doubleSwap>
   1365c:	vcvt.s32.f64	s0, d0
   13660:	subs	r4, r4, #1
   13664:	vmov	r0, s0
   13668:	strh	r0, [r5], #2
   1366c:	bne	13640 <ReadCompressedInt16Data+0x294>
   13670:	b	138d0 <ReadCompressedInt16Data+0x524>
   13674:	ldr	r0, [r7, #20]
   13678:	cmp	r0, #0
   1367c:	beq	13864 <ReadCompressedInt16Data+0x4b8>
   13680:	cmp	sl, #1
   13684:	blt	138d0 <ReadCompressedInt16Data+0x524>
   13688:	mov	r8, sp
   1368c:	mov	r4, sl
   13690:	mov	r0, r7
   13694:	mov	r1, r6
   13698:	mov	r2, r8
   1369c:	mov	r3, r9
   136a0:	bl	32b8 <InflateData>
   136a4:	mov	r0, r8
   136a8:	bl	1b84 <Mat_int64Swap>
   136ac:	strh	r0, [r5], #2
   136b0:	subs	r4, r4, #1
   136b4:	bne	13690 <ReadCompressedInt16Data+0x2e4>
   136b8:	b	138d0 <ReadCompressedInt16Data+0x524>
   136bc:	ldr	r0, [r7, #20]
   136c0:	cmp	r0, #0
   136c4:	beq	1389c <ReadCompressedInt16Data+0x4f0>
   136c8:	cmp	sl, #1
   136cc:	blt	138d0 <ReadCompressedInt16Data+0x524>
   136d0:	mov	r8, sp
   136d4:	mov	r4, sl
   136d8:	mov	r0, r7
   136dc:	mov	r1, r6
   136e0:	mov	r2, r8
   136e4:	mov	r3, r9
   136e8:	bl	32b8 <InflateData>
   136ec:	mov	r0, r8
   136f0:	bl	1bd4 <Mat_uint64Swap>
   136f4:	strh	r0, [r5], #2
   136f8:	subs	r4, r4, #1
   136fc:	bne	136d8 <ReadCompressedInt16Data+0x32c>
   13700:	b	138d0 <ReadCompressedInt16Data+0x524>
   13704:	cmp	sl, #1
   13708:	blt	138d0 <ReadCompressedInt16Data+0x524>
   1370c:	mov	r8, sp
   13710:	mov	r4, sl
   13714:	mov	r0, r7
   13718:	mov	r1, r6
   1371c:	mov	r2, r8
   13720:	mov	r3, r9
   13724:	bl	32b8 <InflateData>
   13728:	ldrh	r0, [sp]
   1372c:	subs	r4, r4, #1
   13730:	strh	r0, [r5], #2
   13734:	bne	13714 <ReadCompressedInt16Data+0x368>
   13738:	b	138d0 <ReadCompressedInt16Data+0x524>
   1373c:	cmp	sl, #1
   13740:	blt	138d0 <ReadCompressedInt16Data+0x524>
   13744:	mov	r8, sp
   13748:	mov	r4, sl
   1374c:	mov	r0, r7
   13750:	mov	r1, r6
   13754:	mov	r2, r8
   13758:	mov	r3, r9
   1375c:	bl	32b8 <InflateData>
   13760:	ldrh	r0, [sp]
   13764:	subs	r4, r4, #1
   13768:	strh	r0, [r5], #2
   1376c:	bne	1374c <ReadCompressedInt16Data+0x3a0>
   13770:	b	138d0 <ReadCompressedInt16Data+0x524>
   13774:	cmp	sl, #1
   13778:	blt	138d0 <ReadCompressedInt16Data+0x524>
   1377c:	mov	r8, sp
   13780:	mov	r4, sl
   13784:	mov	r0, r7
   13788:	mov	r1, r6
   1378c:	mov	r2, r8
   13790:	mov	r3, r9
   13794:	bl	32b8 <InflateData>
   13798:	ldr	r0, [sp]
   1379c:	subs	r4, r4, #1
   137a0:	strh	r0, [r5], #2
   137a4:	bne	13784 <ReadCompressedInt16Data+0x3d8>
   137a8:	b	138d0 <ReadCompressedInt16Data+0x524>
   137ac:	cmp	sl, #1
   137b0:	blt	138d0 <ReadCompressedInt16Data+0x524>
   137b4:	mov	r8, sp
   137b8:	mov	r4, sl
   137bc:	mov	r0, r7
   137c0:	mov	r1, r6
   137c4:	mov	r2, r8
   137c8:	mov	r3, r9
   137cc:	bl	32b8 <InflateData>
   137d0:	ldr	r0, [sp]
   137d4:	subs	r4, r4, #1
   137d8:	strh	r0, [r5], #2
   137dc:	bne	137bc <ReadCompressedInt16Data+0x410>
   137e0:	b	138d0 <ReadCompressedInt16Data+0x524>
   137e4:	cmp	sl, #1
   137e8:	blt	138d0 <ReadCompressedInt16Data+0x524>
   137ec:	mov	r8, sp
   137f0:	mov	r4, sl
   137f4:	mov	r0, r7
   137f8:	mov	r1, r6
   137fc:	mov	r2, r8
   13800:	mov	r3, r9
   13804:	bl	32b8 <InflateData>
   13808:	vldr	s0, [sp]
   1380c:	subs	r4, r4, #1
   13810:	vcvt.s32.f32	s0, s0
   13814:	vmov	r0, s0
   13818:	strh	r0, [r5], #2
   1381c:	bne	137f4 <ReadCompressedInt16Data+0x448>
   13820:	b	138d0 <ReadCompressedInt16Data+0x524>
   13824:	cmp	sl, #1
   13828:	blt	138d0 <ReadCompressedInt16Data+0x524>
   1382c:	mov	r8, sp
   13830:	mov	r4, sl
   13834:	mov	r0, r7
   13838:	mov	r1, r6
   1383c:	mov	r2, r8
   13840:	mov	r3, r9
   13844:	bl	32b8 <InflateData>
   13848:	vldr	d16, [sp]
   1384c:	subs	r4, r4, #1
   13850:	vcvt.s32.f64	s0, d16
   13854:	vmov	r0, s0
   13858:	strh	r0, [r5], #2
   1385c:	bne	13834 <ReadCompressedInt16Data+0x488>
   13860:	b	138d0 <ReadCompressedInt16Data+0x524>
   13864:	cmp	sl, #1
   13868:	blt	138d0 <ReadCompressedInt16Data+0x524>
   1386c:	mov	r8, sp
   13870:	mov	r4, sl
   13874:	mov	r0, r7
   13878:	mov	r1, r6
   1387c:	mov	r2, r8
   13880:	mov	r3, r9
   13884:	bl	32b8 <InflateData>
   13888:	ldrh	r0, [sp]
   1388c:	subs	r4, r4, #1
   13890:	strh	r0, [r5], #2
   13894:	bne	13874 <ReadCompressedInt16Data+0x4c8>
   13898:	b	138d0 <ReadCompressedInt16Data+0x524>
   1389c:	cmp	sl, #1
   138a0:	blt	138d0 <ReadCompressedInt16Data+0x524>
   138a4:	mov	r8, sp
   138a8:	mov	r4, sl
   138ac:	mov	r0, r7
   138b0:	mov	r1, r6
   138b4:	mov	r2, r8
   138b8:	mov	r3, r9
   138bc:	bl	32b8 <InflateData>
   138c0:	ldrh	r0, [sp]
   138c4:	subs	r4, r4, #1
   138c8:	strh	r0, [r5], #2
   138cc:	bne	138ac <ReadCompressedInt16Data+0x500>
   138d0:	mul	r0, r9, sl
   138d4:	sub	sp, fp, #28
   138d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000138dc <ReadUInt16Data>:
   138dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138e0:	add	fp, sp, #28
   138e4:	sub	sp, sp, #84	; 0x54
   138e8:	sub	sp, sp, #2048	; 0x800
   138ec:	mov	r9, r0
   138f0:	mov	r0, #0
   138f4:	cmp	r9, #0
   138f8:	beq	13910 <ReadUInt16Data+0x34>
   138fc:	cmp	r1, #0
   13900:	mov	r5, r1
   13904:	ldrne	r1, [r9]
   13908:	cmpne	r1, #0
   1390c:	bne	13918 <ReadUInt16Data+0x3c>
   13910:	sub	sp, fp, #28
   13914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13918:	mov	r0, r2
   1391c:	mov	r7, r3
   13920:	mov	r8, r2
   13924:	bl	1924 <Mat_SizeOf@plt>
   13928:	mov	r6, r0
   1392c:	sub	r0, r8, #1
   13930:	mov	sl, #0
   13934:	str	r9, [sp, #28]
   13938:	cmp	r0, #11
   1393c:	str	r6, [sp, #24]
   13940:	bhi	1504c <ReadUInt16Data+0x1770>
   13944:	add	r1, pc, #4
   13948:	ldr	r0, [r1, r0, lsl #2]
   1394c:	add	pc, r1, r0
   13950:	.word	0x00000030
   13954:	.word	0x000000d8
   13958:	.word	0x00000180
   1395c:	.word	0x000001d4
   13960:	.word	0x00000228
   13964:	.word	0x0000027c
   13968:	.word	0x000002d0
   1396c:	.word	0x000016fc
   13970:	.word	0x0000032c
   13974:	.word	0x000016fc
   13978:	.word	0x000016fc
   1397c:	.word	0x00000388
   13980:	cmp	r7, #256	; 0x100
   13984:	bgt	13d40 <ReadUInt16Data+0x464>
   13988:	ldr	r3, [r9]
   1398c:	add	r4, sp, #80	; 0x50
   13990:	mov	r1, r6
   13994:	mov	r2, r7
   13998:	mov	r0, r4
   1399c:	bl	18b8 <fread@plt>
   139a0:	mov	sl, r0
   139a4:	cmp	r7, #1
   139a8:	blt	15208 <ReadUInt16Data+0x192c>
   139ac:	mov	r0, #0
   139b0:	cmp	r7, #8
   139b4:	bcc	13a04 <ReadUInt16Data+0x128>
   139b8:	bic	r0, r7, #7
   139bc:	mov	ip, r7
   139c0:	add	r1, sp, #32
   139c4:	mov	r3, r5
   139c8:	mov	r2, r0
   139cc:	ldr	r7, [r4]
   139d0:	ldr	r6, [r4, #4]
   139d4:	subs	r2, r2, #8
   139d8:	add	r4, r4, #8
   139dc:	str	r6, [sp, #36]	; 0x24
   139e0:	str	r7, [sp, #32]
   139e4:	vld1.8	{d16}, [r1 :64]
   139e8:	vmovl.s8	q8, d16
   139ec:	vst1.16	{d16-d17}, [r3]!
   139f0:	bne	139cc <ReadUInt16Data+0xf0>
   139f4:	ldr	r6, [sp, #24]
   139f8:	mov	r7, ip
   139fc:	cmp	r0, ip
   13a00:	beq	15208 <ReadUInt16Data+0x192c>
   13a04:	add	r3, sp, #80	; 0x50
   13a08:	sub	r1, r7, r0
   13a0c:	add	r2, r5, r0, lsl #1
   13a10:	add	r0, r3, r0
   13a14:	ldrsb	r3, [r0], #1
   13a18:	subs	r1, r1, #1
   13a1c:	strh	r3, [r2], #2
   13a20:	bne	13a14 <ReadUInt16Data+0x138>
   13a24:	b	15208 <ReadUInt16Data+0x192c>
   13a28:	cmp	r7, #256	; 0x100
   13a2c:	bgt	13eac <ReadUInt16Data+0x5d0>
   13a30:	ldr	r3, [r9]
   13a34:	add	r4, sp, #80	; 0x50
   13a38:	mov	r1, r6
   13a3c:	mov	r2, r7
   13a40:	mov	r0, r4
   13a44:	bl	18b8 <fread@plt>
   13a48:	mov	sl, r0
   13a4c:	cmp	r7, #1
   13a50:	blt	15208 <ReadUInt16Data+0x192c>
   13a54:	mov	r0, #0
   13a58:	cmp	r7, #8
   13a5c:	bcc	13aac <ReadUInt16Data+0x1d0>
   13a60:	bic	r0, r7, #7
   13a64:	mov	ip, r7
   13a68:	add	r1, sp, #56	; 0x38
   13a6c:	mov	r3, r5
   13a70:	mov	r2, r0
   13a74:	ldr	r7, [r4]
   13a78:	ldr	r6, [r4, #4]
   13a7c:	subs	r2, r2, #8
   13a80:	add	r4, r4, #8
   13a84:	str	r6, [sp, #60]	; 0x3c
   13a88:	str	r7, [sp, #56]	; 0x38
   13a8c:	vld1.8	{d16}, [r1 :64]
   13a90:	vmovl.u8	q8, d16
   13a94:	vst1.16	{d16-d17}, [r3]!
   13a98:	bne	13a74 <ReadUInt16Data+0x198>
   13a9c:	ldr	r6, [sp, #24]
   13aa0:	mov	r7, ip
   13aa4:	cmp	r0, ip
   13aa8:	beq	15208 <ReadUInt16Data+0x192c>
   13aac:	add	r3, sp, #80	; 0x50
   13ab0:	sub	r1, r7, r0
   13ab4:	add	r2, r5, r0, lsl #1
   13ab8:	add	r0, r3, r0
   13abc:	ldrb	r3, [r0], #1
   13ac0:	subs	r1, r1, #1
   13ac4:	strh	r3, [r2], #2
   13ac8:	bne	13abc <ReadUInt16Data+0x1e0>
   13acc:	b	15208 <ReadUInt16Data+0x192c>
   13ad0:	ldr	r0, [r9, #20]
   13ad4:	cmp	r0, #0
   13ad8:	beq	14014 <ReadUInt16Data+0x738>
   13adc:	cmp	r7, #256	; 0x100
   13ae0:	bgt	1432c <ReadUInt16Data+0xa50>
   13ae4:	ldr	r3, [r9]
   13ae8:	add	r4, sp, #80	; 0x50
   13aec:	mov	r1, r6
   13af0:	mov	r2, r7
   13af4:	mov	r0, r4
   13af8:	bl	18b8 <fread@plt>
   13afc:	mov	sl, r0
   13b00:	cmp	r7, #1
   13b04:	blt	15208 <ReadUInt16Data+0x192c>
   13b08:	mov	r0, r4
   13b0c:	bl	1c18 <Mat_int16Swap>
   13b10:	strh	r0, [r5], #2
   13b14:	subs	r7, r7, #1
   13b18:	add	r4, r4, #2
   13b1c:	bne	13b08 <ReadUInt16Data+0x22c>
   13b20:	b	15208 <ReadUInt16Data+0x192c>
   13b24:	ldr	r0, [r9, #20]
   13b28:	cmp	r0, #0
   13b2c:	beq	14084 <ReadUInt16Data+0x7a8>
   13b30:	cmp	r7, #256	; 0x100
   13b34:	bgt	1440c <ReadUInt16Data+0xb30>
   13b38:	ldr	r3, [r9]
   13b3c:	add	r4, sp, #80	; 0x50
   13b40:	mov	r1, r6
   13b44:	mov	r2, r7
   13b48:	mov	r0, r4
   13b4c:	bl	18b8 <fread@plt>
   13b50:	mov	sl, r0
   13b54:	cmp	r7, #1
   13b58:	blt	15208 <ReadUInt16Data+0x192c>
   13b5c:	mov	r0, r4
   13b60:	bl	1c2c <Mat_uint16Swap>
   13b64:	strh	r0, [r5], #2
   13b68:	subs	r7, r7, #1
   13b6c:	add	r4, r4, #2
   13b70:	bne	13b5c <ReadUInt16Data+0x280>
   13b74:	b	15208 <ReadUInt16Data+0x192c>
   13b78:	ldr	r0, [r9, #20]
   13b7c:	cmp	r0, #0
   13b80:	beq	140c0 <ReadUInt16Data+0x7e4>
   13b84:	cmp	r7, #256	; 0x100
   13b88:	bgt	144ec <ReadUInt16Data+0xc10>
   13b8c:	ldr	r3, [r9]
   13b90:	add	r4, sp, #80	; 0x50
   13b94:	mov	r1, r6
   13b98:	mov	r2, r7
   13b9c:	mov	r0, r4
   13ba0:	bl	18b8 <fread@plt>
   13ba4:	mov	sl, r0
   13ba8:	cmp	r7, #1
   13bac:	blt	15208 <ReadUInt16Data+0x192c>
   13bb0:	mov	r0, r4
   13bb4:	bl	1bf0 <Mat_int32Swap>
   13bb8:	strh	r0, [r5], #2
   13bbc:	subs	r7, r7, #1
   13bc0:	add	r4, r4, #4
   13bc4:	bne	13bb0 <ReadUInt16Data+0x2d4>
   13bc8:	b	15208 <ReadUInt16Data+0x192c>
   13bcc:	ldr	r0, [r9, #20]
   13bd0:	cmp	r0, #0
   13bd4:	beq	14144 <ReadUInt16Data+0x868>
   13bd8:	cmp	r7, #256	; 0x100
   13bdc:	bgt	145cc <ReadUInt16Data+0xcf0>
   13be0:	ldr	r3, [r9]
   13be4:	add	r4, sp, #80	; 0x50
   13be8:	mov	r1, r6
   13bec:	mov	r2, r7
   13bf0:	mov	r0, r4
   13bf4:	bl	18b8 <fread@plt>
   13bf8:	mov	sl, r0
   13bfc:	cmp	r7, #1
   13c00:	blt	15208 <ReadUInt16Data+0x192c>
   13c04:	mov	r0, r4
   13c08:	bl	1c04 <Mat_uint32Swap>
   13c0c:	strh	r0, [r5], #2
   13c10:	subs	r7, r7, #1
   13c14:	add	r4, r4, #4
   13c18:	bne	13c04 <ReadUInt16Data+0x328>
   13c1c:	b	15208 <ReadUInt16Data+0x192c>
   13c20:	ldr	r0, [r9, #20]
   13c24:	cmp	r0, #0
   13c28:	beq	141c8 <ReadUInt16Data+0x8ec>
   13c2c:	cmp	r7, #256	; 0x100
   13c30:	bgt	146ac <ReadUInt16Data+0xdd0>
   13c34:	ldr	r3, [r9]
   13c38:	add	r4, sp, #80	; 0x50
   13c3c:	mov	r1, r6
   13c40:	mov	r2, r7
   13c44:	mov	r0, r4
   13c48:	bl	18b8 <fread@plt>
   13c4c:	mov	sl, r0
   13c50:	cmp	r7, #1
   13c54:	blt	15208 <ReadUInt16Data+0x192c>
   13c58:	mov	r0, r4
   13c5c:	bl	1c44 <Mat_floatSwap>
   13c60:	vcvt.u32.f32	s0, s0
   13c64:	subs	r7, r7, #1
   13c68:	add	r4, r4, #4
   13c6c:	vmov	r0, s0
   13c70:	strh	r0, [r5], #2
   13c74:	bne	13c58 <ReadUInt16Data+0x37c>
   13c78:	b	15208 <ReadUInt16Data+0x192c>
   13c7c:	ldr	r0, [r9, #20]
   13c80:	cmp	r0, #0
   13c84:	beq	1425c <ReadUInt16Data+0x980>
   13c88:	cmp	r7, #256	; 0x100
   13c8c:	bgt	147a0 <ReadUInt16Data+0xec4>
   13c90:	ldr	r3, [r9]
   13c94:	add	r4, sp, #80	; 0x50
   13c98:	mov	r1, r6
   13c9c:	mov	r2, r7
   13ca0:	mov	r0, r4
   13ca4:	bl	18b8 <fread@plt>
   13ca8:	mov	sl, r0
   13cac:	cmp	r7, #1
   13cb0:	blt	15208 <ReadUInt16Data+0x192c>
   13cb4:	mov	r0, r4
   13cb8:	bl	1c88 <Mat_doubleSwap>
   13cbc:	vcvt.u32.f64	s0, d0
   13cc0:	subs	r7, r7, #1
   13cc4:	add	r4, r4, #8
   13cc8:	vmov	r0, s0
   13ccc:	strh	r0, [r5], #2
   13cd0:	bne	13cb4 <ReadUInt16Data+0x3d8>
   13cd4:	b	15208 <ReadUInt16Data+0x192c>
   13cd8:	ldr	r0, [r9, #20]
   13cdc:	cmp	r0, #0
   13ce0:	beq	142a8 <ReadUInt16Data+0x9cc>
   13ce4:	cmp	r7, #256	; 0x100
   13ce8:	bgt	14894 <ReadUInt16Data+0xfb8>
   13cec:	ldr	r3, [r9]
   13cf0:	add	r4, sp, #80	; 0x50
   13cf4:	mov	r1, r6
   13cf8:	mov	r2, r7
   13cfc:	mov	r0, r4
   13d00:	bl	18b8 <fread@plt>
   13d04:	mov	sl, r0
   13d08:	cmp	r7, #1
   13d0c:	blt	1504c <ReadUInt16Data+0x1770>
   13d10:	str	r8, [sp, #4]
   13d14:	mov	r8, r7
   13d18:	mov	r6, r5
   13d1c:	mov	r0, r4
   13d20:	bl	1b84 <Mat_int64Swap>
   13d24:	strh	r0, [r6], #2
   13d28:	subs	r7, r7, #1
   13d2c:	add	r4, r4, #8
   13d30:	bne	13d1c <ReadUInt16Data+0x440>
   13d34:	mov	r7, r8
   13d38:	ldr	r6, [sp, #24]
   13d3c:	b	1502c <ReadUInt16Data+0x1750>
   13d40:	sub	r1, r7, #256	; 0x100
   13d44:	str	r7, [sp, #12]
   13d48:	add	r0, r5, #512	; 0x200
   13d4c:	mov	r2, #256	; 0x100
   13d50:	add	r4, sp, #80	; 0x50
   13d54:	add	r6, sp, #48	; 0x30
   13d58:	mov	r7, r5
   13d5c:	mov	sl, #0
   13d60:	str	r5, [sp, #8]
   13d64:	str	r1, [sp, #20]
   13d68:	mov	r1, #0
   13d6c:	mov	r9, r0
   13d70:	ldr	r0, [sp, #28]
   13d74:	mov	r5, r1
   13d78:	ldr	r1, [sp, #24]
   13d7c:	mov	r8, r2
   13d80:	mov	r2, #256	; 0x100
   13d84:	ldr	r3, [r0]
   13d88:	mov	r0, r4
   13d8c:	bl	18b8 <fread@plt>
   13d90:	mov	r1, r7
   13d94:	mov	r2, #0
   13d98:	ldr	r3, [r4, r2]
   13d9c:	str	r3, [sp, #48]	; 0x30
   13da0:	add	r3, r4, r2
   13da4:	add	r2, r2, #8
   13da8:	ldr	r3, [r3, #4]
   13dac:	cmp	r2, #256	; 0x100
   13db0:	str	r3, [sp, #52]	; 0x34
   13db4:	vld1.8	{d16}, [r6 :64]
   13db8:	vmovl.s8	q8, d16
   13dbc:	vst1.16	{d16-d17}, [r1]!
   13dc0:	bne	13d98 <ReadUInt16Data+0x4bc>
   13dc4:	ldr	r3, [sp, #20]
   13dc8:	mov	r1, r5
   13dcc:	add	sl, r0, sl
   13dd0:	add	r7, r7, #512	; 0x200
   13dd4:	add	r0, r9, #512	; 0x200
   13dd8:	add	r2, r8, #256	; 0x100
   13ddc:	add	r1, r5, #256	; 0x100
   13de0:	cmp	r1, r3
   13de4:	blt	13d6c <ReadUInt16Data+0x490>
   13de8:	ldr	r0, [sp, #12]
   13dec:	cmp	r1, r0
   13df0:	bge	15204 <ReadUInt16Data+0x1928>
   13df4:	sub	r4, r0, r1
   13df8:	ldr	r0, [sp, #28]
   13dfc:	ldr	r6, [sp, #24]
   13e00:	add	r7, sp, #80	; 0x50
   13e04:	mov	r2, r4
   13e08:	ldr	r3, [r0]
   13e0c:	mov	r0, r7
   13e10:	mov	r1, r6
   13e14:	bl	18b8 <fread@plt>
   13e18:	add	sl, r0, sl
   13e1c:	cmp	r4, #1
   13e20:	blt	15208 <ReadUInt16Data+0x192c>
   13e24:	mov	r0, #0
   13e28:	cmp	r4, #8
   13e2c:	bcc	13e78 <ReadUInt16Data+0x59c>
   13e30:	ldr	r0, [sp, #20]
   13e34:	add	r2, sp, #40	; 0x28
   13e38:	sub	r0, r0, r5
   13e3c:	bic	r1, r0, #7
   13e40:	bic	r0, r4, #7
   13e44:	ldr	r3, [r7]
   13e48:	ldr	r6, [r7, #4]
   13e4c:	subs	r1, r1, #8
   13e50:	add	r7, r7, #8
   13e54:	str	r6, [sp, #44]	; 0x2c
   13e58:	str	r3, [sp, #40]	; 0x28
   13e5c:	vld1.8	{d16}, [r2 :64]
   13e60:	vmovl.s8	q8, d16
   13e64:	vst1.16	{d16-d17}, [r9]!
   13e68:	bne	13e44 <ReadUInt16Data+0x568>
   13e6c:	ldr	r6, [sp, #24]
   13e70:	cmp	r4, r0
   13e74:	beq	15208 <ReadUInt16Data+0x192c>
   13e78:	ldr	r3, [sp, #8]
   13e7c:	add	r2, r0, r8
   13e80:	add	r1, sp, #80	; 0x50
   13e84:	add	r1, r1, r0
   13e88:	add	r2, r3, r2, lsl #1
   13e8c:	ldr	r3, [sp, #20]
   13e90:	sub	r3, r3, r5
   13e94:	sub	r0, r3, r0
   13e98:	ldrsb	r3, [r1], #1
   13e9c:	subs	r0, r0, #1
   13ea0:	strh	r3, [r2], #2
   13ea4:	bne	13e98 <ReadUInt16Data+0x5bc>
   13ea8:	b	15208 <ReadUInt16Data+0x192c>
   13eac:	sub	r1, r7, #256	; 0x100
   13eb0:	add	r0, r5, #512	; 0x200
   13eb4:	mov	r2, #256	; 0x100
   13eb8:	add	r4, sp, #80	; 0x50
   13ebc:	add	r8, sp, #72	; 0x48
   13ec0:	mov	r6, r5
   13ec4:	mov	sl, #0
   13ec8:	str	r7, [sp, #12]
   13ecc:	str	r5, [sp, #8]
   13ed0:	str	r1, [sp, #20]
   13ed4:	mov	r1, #0
   13ed8:	mov	r7, r0
   13edc:	ldr	r0, [sp, #28]
   13ee0:	mov	r5, r1
   13ee4:	ldr	r1, [sp, #24]
   13ee8:	mov	r9, r2
   13eec:	mov	r2, #256	; 0x100
   13ef0:	ldr	r3, [r0]
   13ef4:	mov	r0, r4
   13ef8:	bl	18b8 <fread@plt>
   13efc:	mov	r1, r6
   13f00:	mov	r2, #0
   13f04:	ldr	r3, [r4, r2]
   13f08:	str	r3, [sp, #72]	; 0x48
   13f0c:	add	r3, r4, r2
   13f10:	add	r2, r2, #8
   13f14:	ldr	r3, [r3, #4]
   13f18:	cmp	r2, #256	; 0x100
   13f1c:	str	r3, [sp, #76]	; 0x4c
   13f20:	vld1.8	{d16}, [r8 :64]
   13f24:	vmovl.u8	q8, d16
   13f28:	vst1.16	{d16-d17}, [r1]!
   13f2c:	bne	13f04 <ReadUInt16Data+0x628>
   13f30:	ldr	r3, [sp, #20]
   13f34:	add	r1, r5, #256	; 0x100
   13f38:	add	sl, r0, sl
   13f3c:	add	r6, r6, #512	; 0x200
   13f40:	add	r0, r7, #512	; 0x200
   13f44:	add	r2, r9, #256	; 0x100
   13f48:	cmp	r1, r3
   13f4c:	blt	13ed8 <ReadUInt16Data+0x5fc>
   13f50:	ldr	r0, [sp, #12]
   13f54:	cmp	r1, r0
   13f58:	bge	15204 <ReadUInt16Data+0x1928>
   13f5c:	sub	r8, r0, r1
   13f60:	ldr	r0, [sp, #28]
   13f64:	ldr	r6, [sp, #24]
   13f68:	add	r4, sp, #80	; 0x50
   13f6c:	mov	r2, r8
   13f70:	ldr	r3, [r0]
   13f74:	mov	r0, r4
   13f78:	mov	r1, r6
   13f7c:	bl	18b8 <fread@plt>
   13f80:	add	sl, r0, sl
   13f84:	cmp	r8, #1
   13f88:	blt	15208 <ReadUInt16Data+0x192c>
   13f8c:	mov	r0, #0
   13f90:	cmp	r8, #8
   13f94:	bcc	13fe0 <ReadUInt16Data+0x704>
   13f98:	ldr	r0, [sp, #20]
   13f9c:	add	r2, sp, #64	; 0x40
   13fa0:	sub	r0, r0, r5
   13fa4:	bic	r1, r0, #7
   13fa8:	bic	r0, r8, #7
   13fac:	ldr	r3, [r4]
   13fb0:	ldr	r6, [r4, #4]
   13fb4:	subs	r1, r1, #8
   13fb8:	add	r4, r4, #8
   13fbc:	str	r6, [sp, #68]	; 0x44
   13fc0:	str	r3, [sp, #64]	; 0x40
   13fc4:	vld1.8	{d16}, [r2 :64]
   13fc8:	vmovl.u8	q8, d16
   13fcc:	vst1.16	{d16-d17}, [r7]!
   13fd0:	bne	13fac <ReadUInt16Data+0x6d0>
   13fd4:	ldr	r6, [sp, #24]
   13fd8:	cmp	r8, r0
   13fdc:	beq	15208 <ReadUInt16Data+0x192c>
   13fe0:	ldr	r3, [sp, #8]
   13fe4:	add	r2, r0, r9
   13fe8:	add	r1, sp, #80	; 0x50
   13fec:	add	r1, r1, r0
   13ff0:	add	r2, r3, r2, lsl #1
   13ff4:	ldr	r3, [sp, #20]
   13ff8:	sub	r3, r3, r5
   13ffc:	sub	r0, r3, r0
   14000:	ldrb	r3, [r1], #1
   14004:	subs	r0, r0, #1
   14008:	strh	r3, [r2], #2
   1400c:	bne	14000 <ReadUInt16Data+0x724>
   14010:	b	15208 <ReadUInt16Data+0x192c>
   14014:	cmp	r7, #256	; 0x100
   14018:	ble	1408c <ReadUInt16Data+0x7b0>
   1401c:	mov	r6, r9
   14020:	mov	r9, r5
   14024:	sub	r0, r7, #256	; 0x100
   14028:	lsl	r4, r7, #1
   1402c:	mov	r5, #0
   14030:	add	r8, sp, #80	; 0x50
   14034:	mov	sl, #0
   14038:	str	r7, [sp, #12]
   1403c:	str	r0, [sp, #20]
   14040:	ldr	r3, [r6]
   14044:	ldr	r1, [sp, #24]
   14048:	mov	r0, r8
   1404c:	mov	r2, #256	; 0x100
   14050:	bl	18b8 <fread@plt>
   14054:	mov	r7, r0
   14058:	add	r0, r9, r5, lsl #1
   1405c:	mov	r1, r8
   14060:	mov	r2, #512	; 0x200
   14064:	bl	181c <memcpy@plt>
   14068:	ldr	r0, [sp, #20]
   1406c:	add	r5, r5, #256	; 0x100
   14070:	add	sl, r7, sl
   14074:	sub	r4, r4, #512	; 0x200
   14078:	cmp	r5, r0
   1407c:	blt	14040 <ReadUInt16Data+0x764>
   14080:	b	14a04 <ReadUInt16Data+0x1128>
   14084:	cmp	r7, #256	; 0x100
   14088:	bgt	149a0 <ReadUInt16Data+0x10c4>
   1408c:	ldr	r3, [r9]
   14090:	add	r0, sp, #80	; 0x50
   14094:	mov	r1, r6
   14098:	mov	r2, r7
   1409c:	bl	18b8 <fread@plt>
   140a0:	mov	sl, r0
   140a4:	cmp	r7, #1
   140a8:	blt	15208 <ReadUInt16Data+0x192c>
   140ac:	lsl	r2, r7, #1
   140b0:	add	r1, sp, #80	; 0x50
   140b4:	mov	r0, r5
   140b8:	bl	181c <memcpy@plt>
   140bc:	b	15208 <ReadUInt16Data+0x192c>
   140c0:	cmp	r7, #256	; 0x100
   140c4:	bgt	14a50 <ReadUInt16Data+0x1174>
   140c8:	ldr	r3, [r9]
   140cc:	add	r4, sp, #80	; 0x50
   140d0:	mov	r1, r6
   140d4:	mov	r2, r7
   140d8:	mov	r0, r4
   140dc:	bl	18b8 <fread@plt>
   140e0:	mov	sl, r0
   140e4:	cmp	r7, #1
   140e8:	blt	15208 <ReadUInt16Data+0x192c>
   140ec:	mov	r0, #0
   140f0:	cmp	r7, #4
   140f4:	bcc	14120 <ReadUInt16Data+0x844>
   140f8:	bic	r0, r7, #3
   140fc:	mov	r2, r5
   14100:	mov	r1, r0
   14104:	vld1.32	{d16-d17}, [r4]!
   14108:	subs	r1, r1, #4
   1410c:	vmovn.i32	d16, q8
   14110:	vst1.16	{d16}, [r2]!
   14114:	bne	14104 <ReadUInt16Data+0x828>
   14118:	cmp	r0, r7
   1411c:	beq	15208 <ReadUInt16Data+0x192c>
   14120:	add	r3, sp, #80	; 0x50
   14124:	sub	r1, r7, r0
   14128:	add	r2, r5, r0, lsl #1
   1412c:	add	r0, r3, r0, lsl #2
   14130:	ldr	r3, [r0], #4
   14134:	subs	r1, r1, #1
   14138:	strh	r3, [r2], #2
   1413c:	bne	14130 <ReadUInt16Data+0x854>
   14140:	b	15208 <ReadUInt16Data+0x192c>
   14144:	cmp	r7, #256	; 0x100
   14148:	bgt	14b80 <ReadUInt16Data+0x12a4>
   1414c:	ldr	r3, [r9]
   14150:	add	r4, sp, #80	; 0x50
   14154:	mov	r1, r6
   14158:	mov	r2, r7
   1415c:	mov	r0, r4
   14160:	bl	18b8 <fread@plt>
   14164:	mov	sl, r0
   14168:	cmp	r7, #1
   1416c:	blt	15208 <ReadUInt16Data+0x192c>
   14170:	mov	r0, #0
   14174:	cmp	r7, #4
   14178:	bcc	141a4 <ReadUInt16Data+0x8c8>
   1417c:	bic	r0, r7, #3
   14180:	mov	r2, r5
   14184:	mov	r1, r0
   14188:	vld1.32	{d16-d17}, [r4]!
   1418c:	subs	r1, r1, #4
   14190:	vmovn.i32	d16, q8
   14194:	vst1.16	{d16}, [r2]!
   14198:	bne	14188 <ReadUInt16Data+0x8ac>
   1419c:	cmp	r0, r7
   141a0:	beq	15208 <ReadUInt16Data+0x192c>
   141a4:	add	r3, sp, #80	; 0x50
   141a8:	sub	r1, r7, r0
   141ac:	add	r2, r5, r0, lsl #1
   141b0:	add	r0, r3, r0, lsl #2
   141b4:	ldr	r3, [r0], #4
   141b8:	subs	r1, r1, #1
   141bc:	strh	r3, [r2], #2
   141c0:	bne	141b4 <ReadUInt16Data+0x8d8>
   141c4:	b	15208 <ReadUInt16Data+0x192c>
   141c8:	cmp	r7, #256	; 0x100
   141cc:	bgt	14cb0 <ReadUInt16Data+0x13d4>
   141d0:	ldr	r3, [r9]
   141d4:	add	r4, sp, #80	; 0x50
   141d8:	mov	r1, r6
   141dc:	mov	r2, r7
   141e0:	mov	r0, r4
   141e4:	bl	18b8 <fread@plt>
   141e8:	mov	sl, r0
   141ec:	cmp	r7, #1
   141f0:	blt	15208 <ReadUInt16Data+0x192c>
   141f4:	mov	r0, #0
   141f8:	cmp	r7, #4
   141fc:	bcc	1422c <ReadUInt16Data+0x950>
   14200:	bic	r0, r7, #3
   14204:	mov	r2, r5
   14208:	mov	r1, r0
   1420c:	vld1.32	{d16-d17}, [r4]!
   14210:	subs	r1, r1, #4
   14214:	vcvt.u32.f32	q8, q8
   14218:	vmovn.i32	d16, q8
   1421c:	vst1.16	{d16}, [r2]!
   14220:	bne	1420c <ReadUInt16Data+0x930>
   14224:	cmp	r0, r7
   14228:	beq	15208 <ReadUInt16Data+0x192c>
   1422c:	add	r3, sp, #80	; 0x50
   14230:	sub	r1, r7, r0
   14234:	add	r2, r5, r0, lsl #1
   14238:	add	r0, r3, r0, lsl #2
   1423c:	vldr	s0, [r0]
   14240:	subs	r1, r1, #1
   14244:	add	r0, r0, #4
   14248:	vcvt.u32.f32	s0, s0
   1424c:	vmov	r3, s0
   14250:	strh	r3, [r2], #2
   14254:	bne	1423c <ReadUInt16Data+0x960>
   14258:	b	15208 <ReadUInt16Data+0x192c>
   1425c:	cmp	r7, #256	; 0x100
   14260:	bgt	14df4 <ReadUInt16Data+0x1518>
   14264:	ldr	r3, [r9]
   14268:	add	r4, sp, #80	; 0x50
   1426c:	mov	r1, r6
   14270:	mov	r2, r7
   14274:	mov	r0, r4
   14278:	bl	18b8 <fread@plt>
   1427c:	mov	sl, r0
   14280:	cmp	r7, #1
   14284:	blt	15208 <ReadUInt16Data+0x192c>
   14288:	vldr	d16, [r4]
   1428c:	subs	r7, r7, #1
   14290:	add	r4, r4, #8
   14294:	vcvt.u32.f64	s0, d16
   14298:	vmov	r0, s0
   1429c:	strh	r0, [r5], #2
   142a0:	bne	14288 <ReadUInt16Data+0x9ac>
   142a4:	b	15208 <ReadUInt16Data+0x192c>
   142a8:	cmp	r7, #256	; 0x100
   142ac:	bgt	14ed0 <ReadUInt16Data+0x15f4>
   142b0:	ldr	r3, [r9]
   142b4:	add	r4, sp, #80	; 0x50
   142b8:	mov	r1, r6
   142bc:	mov	r2, r7
   142c0:	mov	r0, r4
   142c4:	bl	18b8 <fread@plt>
   142c8:	mov	sl, r0
   142cc:	cmp	r7, #1
   142d0:	blt	1504c <ReadUInt16Data+0x1770>
   142d4:	mov	r0, #0
   142d8:	beq	14308 <ReadUInt16Data+0xa2c>
   142dc:	bic	r0, r7, #1
   142e0:	mov	r2, r5
   142e4:	mov	r1, r0
   142e8:	vld1.64	{d16-d17}, [r4]!
   142ec:	subs	r1, r1, #2
   142f0:	vmovn.i64	d16, q8
   142f4:	vuzp.16	d16, d17
   142f8:	vst1.32	{d16[0]}, [r2]!
   142fc:	bne	142e8 <ReadUInt16Data+0xa0c>
   14300:	cmp	r0, r7
   14304:	beq	1504c <ReadUInt16Data+0x1770>
   14308:	add	r3, sp, #80	; 0x50
   1430c:	sub	r1, r7, r0
   14310:	add	r2, r5, r0, lsl #1
   14314:	add	r0, r3, r0, lsl #3
   14318:	ldrh	r3, [r0], #8
   1431c:	subs	r1, r1, #1
   14320:	strh	r3, [r2], #2
   14324:	bne	14318 <ReadUInt16Data+0xa3c>
   14328:	b	1504c <ReadUInt16Data+0x1770>
   1432c:	sub	r0, r7, #256	; 0x100
   14330:	mov	r8, r5
   14334:	add	r1, r5, #512	; 0x200
   14338:	add	r4, sp, #80	; 0x50
   1433c:	mov	sl, #0
   14340:	str	r7, [sp, #12]
   14344:	str	r0, [sp, #20]
   14348:	mov	r0, #0
   1434c:	mov	r9, r0
   14350:	ldr	r0, [sp, #28]
   14354:	mov	r5, r1
   14358:	mov	r1, r6
   1435c:	mov	r2, #256	; 0x100
   14360:	ldr	r3, [r0]
   14364:	mov	r0, r4
   14368:	bl	18b8 <fread@plt>
   1436c:	mov	r7, r0
   14370:	mov	r6, #0
   14374:	add	r0, r4, r6
   14378:	bl	1c18 <Mat_int16Swap>
   1437c:	add	r1, r8, r6
   14380:	add	r6, r6, #2
   14384:	cmp	r6, #512	; 0x200
   14388:	strh	r0, [r1]
   1438c:	bne	14374 <ReadUInt16Data+0xa98>
   14390:	ldr	r2, [sp, #20]
   14394:	ldr	r6, [sp, #24]
   14398:	add	r0, r9, #256	; 0x100
   1439c:	add	sl, r7, sl
   143a0:	add	r8, r8, #512	; 0x200
   143a4:	add	r1, r5, #512	; 0x200
   143a8:	cmp	r0, r2
   143ac:	blt	1434c <ReadUInt16Data+0xa70>
   143b0:	ldr	r2, [sp, #12]
   143b4:	cmp	r0, r2
   143b8:	bge	15208 <ReadUInt16Data+0x192c>
   143bc:	mov	r1, r6
   143c0:	sub	r6, r2, r0
   143c4:	ldr	r0, [sp, #28]
   143c8:	add	r4, sp, #80	; 0x50
   143cc:	mov	r2, r6
   143d0:	ldr	r3, [r0]
   143d4:	mov	r0, r4
   143d8:	bl	18b8 <fread@plt>
   143dc:	add	sl, r0, sl
   143e0:	cmp	r6, #1
   143e4:	blt	15204 <ReadUInt16Data+0x1928>
   143e8:	ldr	r0, [sp, #20]
   143ec:	sub	r6, r0, r9
   143f0:	mov	r0, r4
   143f4:	bl	1c18 <Mat_int16Swap>
   143f8:	strh	r0, [r5], #2
   143fc:	subs	r6, r6, #1
   14400:	add	r4, r4, #2
   14404:	bne	143f0 <ReadUInt16Data+0xb14>
   14408:	b	15204 <ReadUInt16Data+0x1928>
   1440c:	sub	r0, r7, #256	; 0x100
   14410:	mov	r8, r5
   14414:	add	r1, r5, #512	; 0x200
   14418:	add	r4, sp, #80	; 0x50
   1441c:	mov	sl, #0
   14420:	str	r7, [sp, #12]
   14424:	str	r0, [sp, #20]
   14428:	mov	r0, #0
   1442c:	mov	r9, r0
   14430:	ldr	r0, [sp, #28]
   14434:	mov	r5, r1
   14438:	mov	r1, r6
   1443c:	mov	r2, #256	; 0x100
   14440:	ldr	r3, [r0]
   14444:	mov	r0, r4
   14448:	bl	18b8 <fread@plt>
   1444c:	mov	r7, r0
   14450:	mov	r6, #0
   14454:	add	r0, r4, r6
   14458:	bl	1c2c <Mat_uint16Swap>
   1445c:	add	r1, r8, r6
   14460:	add	r6, r6, #2
   14464:	cmp	r6, #512	; 0x200
   14468:	strh	r0, [r1]
   1446c:	bne	14454 <ReadUInt16Data+0xb78>
   14470:	ldr	r2, [sp, #20]
   14474:	ldr	r6, [sp, #24]
   14478:	add	r0, r9, #256	; 0x100
   1447c:	add	sl, r7, sl
   14480:	add	r8, r8, #512	; 0x200
   14484:	add	r1, r5, #512	; 0x200
   14488:	cmp	r0, r2
   1448c:	blt	1442c <ReadUInt16Data+0xb50>
   14490:	ldr	r2, [sp, #12]
   14494:	cmp	r0, r2
   14498:	bge	15208 <ReadUInt16Data+0x192c>
   1449c:	mov	r1, r6
   144a0:	sub	r6, r2, r0
   144a4:	ldr	r0, [sp, #28]
   144a8:	add	r4, sp, #80	; 0x50
   144ac:	mov	r2, r6
   144b0:	ldr	r3, [r0]
   144b4:	mov	r0, r4
   144b8:	bl	18b8 <fread@plt>
   144bc:	add	sl, r0, sl
   144c0:	cmp	r6, #1
   144c4:	blt	15204 <ReadUInt16Data+0x1928>
   144c8:	ldr	r0, [sp, #20]
   144cc:	sub	r6, r0, r9
   144d0:	mov	r0, r4
   144d4:	bl	1c2c <Mat_uint16Swap>
   144d8:	strh	r0, [r5], #2
   144dc:	subs	r6, r6, #1
   144e0:	add	r4, r4, #2
   144e4:	bne	144d0 <ReadUInt16Data+0xbf4>
   144e8:	b	15204 <ReadUInt16Data+0x1928>
   144ec:	sub	r0, r7, #256	; 0x100
   144f0:	add	r1, r5, #512	; 0x200
   144f4:	mov	sl, #0
   144f8:	str	r7, [sp, #12]
   144fc:	str	r0, [sp, #16]
   14500:	mov	r0, #0
   14504:	ldr	r3, [r9]
   14508:	add	r7, sp, #80	; 0x50
   1450c:	str	r0, [sp, #20]
   14510:	mov	r8, r1
   14514:	mov	r1, r6
   14518:	mov	r2, #256	; 0x100
   1451c:	mov	r0, r7
   14520:	bl	18b8 <fread@plt>
   14524:	mov	r4, r0
   14528:	mov	r6, #0
   1452c:	mov	r0, r7
   14530:	add	r9, r5, r6
   14534:	bl	1bf0 <Mat_int32Swap>
   14538:	add	r6, r6, #2
   1453c:	add	r7, r7, #4
   14540:	strh	r0, [r9]
   14544:	cmp	r6, #512	; 0x200
   14548:	bne	1452c <ReadUInt16Data+0xc50>
   1454c:	ldr	r7, [sp, #20]
   14550:	ldr	r2, [sp, #16]
   14554:	ldr	r6, [sp, #24]
   14558:	ldr	r9, [sp, #28]
   1455c:	add	sl, r4, sl
   14560:	add	r5, r5, #512	; 0x200
   14564:	add	r1, r8, #512	; 0x200
   14568:	add	r0, r7, #256	; 0x100
   1456c:	cmp	r0, r2
   14570:	blt	14504 <ReadUInt16Data+0xc28>
   14574:	ldr	r2, [sp, #12]
   14578:	cmp	r0, r2
   1457c:	bge	15208 <ReadUInt16Data+0x192c>
   14580:	ldr	r3, [r9]
   14584:	mov	r1, r6
   14588:	sub	r6, r2, r0
   1458c:	add	r4, sp, #80	; 0x50
   14590:	mov	r0, r4
   14594:	mov	r2, r6
   14598:	bl	18b8 <fread@plt>
   1459c:	add	sl, r0, sl
   145a0:	cmp	r6, #1
   145a4:	blt	15204 <ReadUInt16Data+0x1928>
   145a8:	ldr	r0, [sp, #16]
   145ac:	sub	r6, r0, r7
   145b0:	mov	r0, r4
   145b4:	bl	1bf0 <Mat_int32Swap>
   145b8:	strh	r0, [r8], #2
   145bc:	subs	r6, r6, #1
   145c0:	add	r4, r4, #4
   145c4:	bne	145b0 <ReadUInt16Data+0xcd4>
   145c8:	b	15204 <ReadUInt16Data+0x1928>
   145cc:	sub	r0, r7, #256	; 0x100
   145d0:	add	r1, r5, #512	; 0x200
   145d4:	mov	sl, #0
   145d8:	str	r7, [sp, #12]
   145dc:	str	r0, [sp, #16]
   145e0:	mov	r0, #0
   145e4:	ldr	r3, [r9]
   145e8:	add	r7, sp, #80	; 0x50
   145ec:	str	r0, [sp, #20]
   145f0:	mov	r8, r1
   145f4:	mov	r1, r6
   145f8:	mov	r2, #256	; 0x100
   145fc:	mov	r0, r7
   14600:	bl	18b8 <fread@plt>
   14604:	mov	r4, r0
   14608:	mov	r6, #0
   1460c:	mov	r0, r7
   14610:	add	r9, r5, r6
   14614:	bl	1c04 <Mat_uint32Swap>
   14618:	add	r6, r6, #2
   1461c:	add	r7, r7, #4
   14620:	strh	r0, [r9]
   14624:	cmp	r6, #512	; 0x200
   14628:	bne	1460c <ReadUInt16Data+0xd30>
   1462c:	ldr	r7, [sp, #20]
   14630:	ldr	r2, [sp, #16]
   14634:	ldr	r6, [sp, #24]
   14638:	ldr	r9, [sp, #28]
   1463c:	add	sl, r4, sl
   14640:	add	r5, r5, #512	; 0x200
   14644:	add	r1, r8, #512	; 0x200
   14648:	add	r0, r7, #256	; 0x100
   1464c:	cmp	r0, r2
   14650:	blt	145e4 <ReadUInt16Data+0xd08>
   14654:	ldr	r2, [sp, #12]
   14658:	cmp	r0, r2
   1465c:	bge	15208 <ReadUInt16Data+0x192c>
   14660:	ldr	r3, [r9]
   14664:	mov	r1, r6
   14668:	sub	r6, r2, r0
   1466c:	add	r4, sp, #80	; 0x50
   14670:	mov	r0, r4
   14674:	mov	r2, r6
   14678:	bl	18b8 <fread@plt>
   1467c:	add	sl, r0, sl
   14680:	cmp	r6, #1
   14684:	blt	15204 <ReadUInt16Data+0x1928>
   14688:	ldr	r0, [sp, #16]
   1468c:	sub	r6, r0, r7
   14690:	mov	r0, r4
   14694:	bl	1c04 <Mat_uint32Swap>
   14698:	strh	r0, [r8], #2
   1469c:	subs	r6, r6, #1
   146a0:	add	r4, r4, #4
   146a4:	bne	14690 <ReadUInt16Data+0xdb4>
   146a8:	b	15204 <ReadUInt16Data+0x1928>
   146ac:	sub	r0, r7, #256	; 0x100
   146b0:	mov	r8, r5
   146b4:	add	r1, r5, #512	; 0x200
   146b8:	mov	sl, #0
   146bc:	str	r7, [sp, #12]
   146c0:	str	r0, [sp, #20]
   146c4:	mov	r0, #0
   146c8:	mov	r9, r0
   146cc:	ldr	r0, [sp, #28]
   146d0:	add	r7, sp, #80	; 0x50
   146d4:	mov	r5, r1
   146d8:	mov	r1, r6
   146dc:	mov	r2, #256	; 0x100
   146e0:	ldr	r3, [r0]
   146e4:	mov	r0, r7
   146e8:	bl	18b8 <fread@plt>
   146ec:	mov	r4, r0
   146f0:	mov	r6, #0
   146f4:	mov	r0, r7
   146f8:	bl	1c44 <Mat_floatSwap>
   146fc:	vcvt.u32.f32	s0, s0
   14700:	add	r0, r8, r6
   14704:	add	r6, r6, #2
   14708:	add	r7, r7, #4
   1470c:	vmov	r1, s0
   14710:	cmp	r6, #512	; 0x200
   14714:	strh	r1, [r0]
   14718:	bne	146f4 <ReadUInt16Data+0xe18>
   1471c:	ldr	r2, [sp, #20]
   14720:	ldr	r6, [sp, #24]
   14724:	add	r0, r9, #256	; 0x100
   14728:	add	sl, r4, sl
   1472c:	add	r8, r8, #512	; 0x200
   14730:	add	r1, r5, #512	; 0x200
   14734:	cmp	r0, r2
   14738:	blt	146c8 <ReadUInt16Data+0xdec>
   1473c:	ldr	r2, [sp, #12]
   14740:	cmp	r0, r2
   14744:	bge	15208 <ReadUInt16Data+0x192c>
   14748:	mov	r1, r6
   1474c:	sub	r6, r2, r0
   14750:	ldr	r0, [sp, #28]
   14754:	add	r4, sp, #80	; 0x50
   14758:	mov	r2, r6
   1475c:	ldr	r3, [r0]
   14760:	mov	r0, r4
   14764:	bl	18b8 <fread@plt>
   14768:	add	sl, r0, sl
   1476c:	cmp	r6, #1
   14770:	blt	15204 <ReadUInt16Data+0x1928>
   14774:	ldr	r0, [sp, #20]
   14778:	sub	r6, r0, r9
   1477c:	mov	r0, r4
   14780:	bl	1c44 <Mat_floatSwap>
   14784:	vcvt.u32.f32	s0, s0
   14788:	subs	r6, r6, #1
   1478c:	add	r4, r4, #4
   14790:	vmov	r0, s0
   14794:	strh	r0, [r5], #2
   14798:	bne	1477c <ReadUInt16Data+0xea0>
   1479c:	b	15204 <ReadUInt16Data+0x1928>
   147a0:	sub	r0, r7, #256	; 0x100
   147a4:	mov	r8, r5
   147a8:	add	r1, r5, #512	; 0x200
   147ac:	mov	sl, #0
   147b0:	str	r7, [sp, #12]
   147b4:	str	r0, [sp, #20]
   147b8:	mov	r0, #0
   147bc:	mov	r9, r0
   147c0:	ldr	r0, [sp, #28]
   147c4:	add	r7, sp, #80	; 0x50
   147c8:	mov	r5, r1
   147cc:	mov	r1, r6
   147d0:	mov	r2, #256	; 0x100
   147d4:	ldr	r3, [r0]
   147d8:	mov	r0, r7
   147dc:	bl	18b8 <fread@plt>
   147e0:	mov	r4, r0
   147e4:	mov	r6, #0
   147e8:	mov	r0, r7
   147ec:	bl	1c88 <Mat_doubleSwap>
   147f0:	vcvt.u32.f64	s0, d0
   147f4:	add	r0, r8, r6
   147f8:	add	r6, r6, #2
   147fc:	add	r7, r7, #8
   14800:	vmov	r1, s0
   14804:	cmp	r6, #512	; 0x200
   14808:	strh	r1, [r0]
   1480c:	bne	147e8 <ReadUInt16Data+0xf0c>
   14810:	ldr	r2, [sp, #20]
   14814:	ldr	r6, [sp, #24]
   14818:	add	r0, r9, #256	; 0x100
   1481c:	add	sl, r4, sl
   14820:	add	r8, r8, #512	; 0x200
   14824:	add	r1, r5, #512	; 0x200
   14828:	cmp	r0, r2
   1482c:	blt	147bc <ReadUInt16Data+0xee0>
   14830:	ldr	r2, [sp, #12]
   14834:	cmp	r0, r2
   14838:	bge	15208 <ReadUInt16Data+0x192c>
   1483c:	mov	r1, r6
   14840:	sub	r6, r2, r0
   14844:	ldr	r0, [sp, #28]
   14848:	add	r4, sp, #80	; 0x50
   1484c:	mov	r2, r6
   14850:	ldr	r3, [r0]
   14854:	mov	r0, r4
   14858:	bl	18b8 <fread@plt>
   1485c:	add	sl, r0, sl
   14860:	cmp	r6, #1
   14864:	blt	15204 <ReadUInt16Data+0x1928>
   14868:	ldr	r0, [sp, #20]
   1486c:	sub	r6, r0, r9
   14870:	mov	r0, r4
   14874:	bl	1c88 <Mat_doubleSwap>
   14878:	vcvt.u32.f64	s0, d0
   1487c:	subs	r6, r6, #1
   14880:	add	r4, r4, #8
   14884:	vmov	r0, s0
   14888:	strh	r0, [r5], #2
   1488c:	bne	14870 <ReadUInt16Data+0xf94>
   14890:	b	15204 <ReadUInt16Data+0x1928>
   14894:	sub	r0, r7, #256	; 0x100
   14898:	add	r1, r5, #512	; 0x200
   1489c:	mov	r6, r5
   148a0:	mov	sl, #0
   148a4:	str	r8, [sp, #4]
   148a8:	str	r7, [sp, #12]
   148ac:	str	r5, [sp, #8]
   148b0:	str	r0, [sp, #16]
   148b4:	mov	r0, #0
   148b8:	mov	r5, r1
   148bc:	ldr	r3, [r9]
   148c0:	ldr	r1, [sp, #24]
   148c4:	add	r4, sp, #80	; 0x50
   148c8:	str	r0, [sp, #20]
   148cc:	mov	r2, #256	; 0x100
   148d0:	mov	r7, sl
   148d4:	mov	r0, r4
   148d8:	bl	18b8 <fread@plt>
   148dc:	mov	r8, r0
   148e0:	mov	r9, #0
   148e4:	mov	r0, r4
   148e8:	add	sl, r6, r9
   148ec:	bl	1b84 <Mat_int64Swap>
   148f0:	add	r9, r9, #2
   148f4:	add	r4, r4, #8
   148f8:	strh	r0, [sl]
   148fc:	cmp	r9, #512	; 0x200
   14900:	bne	148e4 <ReadUInt16Data+0x1008>
   14904:	ldr	r0, [sp, #20]
   14908:	ldr	r2, [sp, #16]
   1490c:	ldr	r9, [sp, #28]
   14910:	mov	sl, r7
   14914:	add	r6, r6, #512	; 0x200
   14918:	add	r1, r5, #512	; 0x200
   1491c:	add	sl, r8, r7
   14920:	add	r0, r0, #256	; 0x100
   14924:	cmp	r0, r2
   14928:	blt	148b8 <ReadUInt16Data+0xfdc>
   1492c:	ldr	r7, [sp, #12]
   14930:	cmp	r0, r7
   14934:	bge	15024 <ReadUInt16Data+0x1748>
   14938:	ldr	r6, [sp, #24]
   1493c:	ldr	r3, [r9]
   14940:	sub	r8, r7, r0
   14944:	add	r4, sp, #80	; 0x50
   14948:	mov	r0, r4
   1494c:	mov	r2, r8
   14950:	mov	r1, r6
   14954:	bl	18b8 <fread@plt>
   14958:	add	sl, r0, sl
   1495c:	cmp	r8, #1
   14960:	blt	15028 <ReadUInt16Data+0x174c>
   14964:	ldr	r0, [sp, #16]
   14968:	ldr	r1, [sp, #20]
   1496c:	ldr	r8, [sp, #4]
   14970:	sub	r6, r0, r1
   14974:	mov	r0, r4
   14978:	bl	1b84 <Mat_int64Swap>
   1497c:	strh	r0, [r5], #2
   14980:	subs	r6, r6, #1
   14984:	add	r4, r4, #8
   14988:	bne	14974 <ReadUInt16Data+0x1098>
   1498c:	ldr	r6, [sp, #24]
   14990:	ldr	r5, [sp, #8]
   14994:	cmp	r8, #13
   14998:	beq	15054 <ReadUInt16Data+0x1778>
   1499c:	b	15208 <ReadUInt16Data+0x192c>
   149a0:	mov	r6, r9
   149a4:	mov	r9, r5
   149a8:	sub	r0, r7, #256	; 0x100
   149ac:	lsl	r4, r7, #1
   149b0:	mov	r5, #0
   149b4:	add	r8, sp, #80	; 0x50
   149b8:	mov	sl, #0
   149bc:	str	r7, [sp, #12]
   149c0:	str	r0, [sp, #20]
   149c4:	ldr	r3, [r6]
   149c8:	ldr	r1, [sp, #24]
   149cc:	mov	r0, r8
   149d0:	mov	r2, #256	; 0x100
   149d4:	bl	18b8 <fread@plt>
   149d8:	mov	r7, r0
   149dc:	add	r0, r9, r5, lsl #1
   149e0:	mov	r1, r8
   149e4:	mov	r2, #512	; 0x200
   149e8:	bl	181c <memcpy@plt>
   149ec:	ldr	r0, [sp, #20]
   149f0:	add	r5, r5, #256	; 0x100
   149f4:	add	sl, r7, sl
   149f8:	sub	r4, r4, #512	; 0x200
   149fc:	cmp	r5, r0
   14a00:	blt	149c4 <ReadUInt16Data+0x10e8>
   14a04:	ldr	r0, [sp, #12]
   14a08:	cmp	r5, r0
   14a0c:	bge	15204 <ReadUInt16Data+0x1928>
   14a10:	sub	r7, r0, r5
   14a14:	ldr	r0, [sp, #28]
   14a18:	ldr	r6, [sp, #24]
   14a1c:	mov	r2, r7
   14a20:	ldr	r3, [r0]
   14a24:	add	r0, sp, #80	; 0x50
   14a28:	mov	r1, r6
   14a2c:	bl	18b8 <fread@plt>
   14a30:	add	sl, r0, sl
   14a34:	cmp	r7, #1
   14a38:	blt	15208 <ReadUInt16Data+0x192c>
   14a3c:	add	r0, r9, r5, lsl #1
   14a40:	add	r1, sp, #80	; 0x50
   14a44:	mov	r2, r4
   14a48:	bl	181c <memcpy@plt>
   14a4c:	b	15208 <ReadUInt16Data+0x192c>
   14a50:	sub	r1, r7, #256	; 0x100
   14a54:	add	r0, r5, #512	; 0x200
   14a58:	mov	r2, #256	; 0x100
   14a5c:	add	r8, sp, #80	; 0x50
   14a60:	mov	sl, #0
   14a64:	str	r7, [sp, #12]
   14a68:	str	r5, [sp, #8]
   14a6c:	str	r1, [sp, #20]
   14a70:	mov	r1, #0
   14a74:	mov	r9, r0
   14a78:	ldr	r0, [sp, #28]
   14a7c:	mov	r4, r1
   14a80:	mov	r7, r2
   14a84:	mov	r1, r6
   14a88:	mov	r2, #256	; 0x100
   14a8c:	ldr	r3, [r0]
   14a90:	mov	r0, r8
   14a94:	bl	18b8 <fread@plt>
   14a98:	mov	r1, #0
   14a9c:	mov	r2, r8
   14aa0:	vld1.32	{d16-d17}, [r2]!
   14aa4:	add	r3, r5, r1
   14aa8:	add	r1, r1, #8
   14aac:	cmp	r1, #512	; 0x200
   14ab0:	vmovn.i32	d16, q8
   14ab4:	vst1.16	{d16}, [r3]
   14ab8:	bne	14aa0 <ReadUInt16Data+0x11c4>
   14abc:	ldr	r3, [sp, #20]
   14ac0:	add	r1, r4, #256	; 0x100
   14ac4:	add	sl, r0, sl
   14ac8:	add	r5, r5, #512	; 0x200
   14acc:	add	r0, r9, #512	; 0x200
   14ad0:	add	r2, r7, #256	; 0x100
   14ad4:	cmp	r1, r3
   14ad8:	blt	14a74 <ReadUInt16Data+0x1198>
   14adc:	ldr	r0, [sp, #12]
   14ae0:	cmp	r1, r0
   14ae4:	bge	15208 <ReadUInt16Data+0x192c>
   14ae8:	sub	r8, r0, r1
   14aec:	ldr	r0, [sp, #28]
   14af0:	add	r5, sp, #80	; 0x50
   14af4:	mov	r1, r6
   14af8:	mov	r2, r8
   14afc:	ldr	r3, [r0]
   14b00:	mov	r0, r5
   14b04:	bl	18b8 <fread@plt>
   14b08:	add	sl, r0, sl
   14b0c:	cmp	r8, #1
   14b10:	blt	15208 <ReadUInt16Data+0x192c>
   14b14:	mov	r0, #0
   14b18:	cmp	r8, #4
   14b1c:	bcc	14b4c <ReadUInt16Data+0x1270>
   14b20:	ldr	r0, [sp, #20]
   14b24:	sub	r0, r0, r4
   14b28:	bic	r1, r0, #3
   14b2c:	bic	r0, r8, #3
   14b30:	vld1.32	{d16-d17}, [r5]!
   14b34:	subs	r1, r1, #4
   14b38:	vmovn.i32	d16, q8
   14b3c:	vst1.16	{d16}, [r9]!
   14b40:	bne	14b30 <ReadUInt16Data+0x1254>
   14b44:	cmp	r8, r0
   14b48:	beq	15208 <ReadUInt16Data+0x192c>
   14b4c:	ldr	r3, [sp, #8]
   14b50:	add	r2, r0, r7
   14b54:	add	r1, sp, #80	; 0x50
   14b58:	add	r1, r1, r0, lsl #2
   14b5c:	add	r2, r3, r2, lsl #1
   14b60:	ldr	r3, [sp, #20]
   14b64:	sub	r3, r3, r4
   14b68:	sub	r0, r3, r0
   14b6c:	ldr	r3, [r1], #4
   14b70:	subs	r0, r0, #1
   14b74:	strh	r3, [r2], #2
   14b78:	bne	14b6c <ReadUInt16Data+0x1290>
   14b7c:	b	15208 <ReadUInt16Data+0x192c>
   14b80:	sub	r1, r7, #256	; 0x100
   14b84:	add	r0, r5, #512	; 0x200
   14b88:	mov	r2, #256	; 0x100
   14b8c:	add	r8, sp, #80	; 0x50
   14b90:	mov	sl, #0
   14b94:	str	r7, [sp, #12]
   14b98:	str	r5, [sp, #8]
   14b9c:	str	r1, [sp, #20]
   14ba0:	mov	r1, #0
   14ba4:	mov	r9, r0
   14ba8:	ldr	r0, [sp, #28]
   14bac:	mov	r4, r1
   14bb0:	mov	r7, r2
   14bb4:	mov	r1, r6
   14bb8:	mov	r2, #256	; 0x100
   14bbc:	ldr	r3, [r0]
   14bc0:	mov	r0, r8
   14bc4:	bl	18b8 <fread@plt>
   14bc8:	mov	r1, #0
   14bcc:	mov	r2, r8
   14bd0:	vld1.32	{d16-d17}, [r2]!
   14bd4:	add	r3, r5, r1
   14bd8:	add	r1, r1, #8
   14bdc:	cmp	r1, #512	; 0x200
   14be0:	vmovn.i32	d16, q8
   14be4:	vst1.16	{d16}, [r3]
   14be8:	bne	14bd0 <ReadUInt16Data+0x12f4>
   14bec:	ldr	r3, [sp, #20]
   14bf0:	add	r1, r4, #256	; 0x100
   14bf4:	add	sl, r0, sl
   14bf8:	add	r5, r5, #512	; 0x200
   14bfc:	add	r0, r9, #512	; 0x200
   14c00:	add	r2, r7, #256	; 0x100
   14c04:	cmp	r1, r3
   14c08:	blt	14ba4 <ReadUInt16Data+0x12c8>
   14c0c:	ldr	r0, [sp, #12]
   14c10:	cmp	r1, r0
   14c14:	bge	15208 <ReadUInt16Data+0x192c>
   14c18:	sub	r8, r0, r1
   14c1c:	ldr	r0, [sp, #28]
   14c20:	add	r5, sp, #80	; 0x50
   14c24:	mov	r1, r6
   14c28:	mov	r2, r8
   14c2c:	ldr	r3, [r0]
   14c30:	mov	r0, r5
   14c34:	bl	18b8 <fread@plt>
   14c38:	add	sl, r0, sl
   14c3c:	cmp	r8, #1
   14c40:	blt	15208 <ReadUInt16Data+0x192c>
   14c44:	mov	r0, #0
   14c48:	cmp	r8, #4
   14c4c:	bcc	14c7c <ReadUInt16Data+0x13a0>
   14c50:	ldr	r0, [sp, #20]
   14c54:	sub	r0, r0, r4
   14c58:	bic	r1, r0, #3
   14c5c:	bic	r0, r8, #3
   14c60:	vld1.32	{d16-d17}, [r5]!
   14c64:	subs	r1, r1, #4
   14c68:	vmovn.i32	d16, q8
   14c6c:	vst1.16	{d16}, [r9]!
   14c70:	bne	14c60 <ReadUInt16Data+0x1384>
   14c74:	cmp	r8, r0
   14c78:	beq	15208 <ReadUInt16Data+0x192c>
   14c7c:	ldr	r3, [sp, #8]
   14c80:	add	r2, r0, r7
   14c84:	add	r1, sp, #80	; 0x50
   14c88:	add	r1, r1, r0, lsl #2
   14c8c:	add	r2, r3, r2, lsl #1
   14c90:	ldr	r3, [sp, #20]
   14c94:	sub	r3, r3, r4
   14c98:	sub	r0, r3, r0
   14c9c:	ldr	r3, [r1], #4
   14ca0:	subs	r0, r0, #1
   14ca4:	strh	r3, [r2], #2
   14ca8:	bne	14c9c <ReadUInt16Data+0x13c0>
   14cac:	b	15208 <ReadUInt16Data+0x192c>
   14cb0:	sub	r1, r7, #256	; 0x100
   14cb4:	add	r0, r5, #512	; 0x200
   14cb8:	mov	r2, #256	; 0x100
   14cbc:	add	r8, sp, #80	; 0x50
   14cc0:	mov	sl, #0
   14cc4:	str	r7, [sp, #12]
   14cc8:	str	r5, [sp, #8]
   14ccc:	str	r1, [sp, #20]
   14cd0:	mov	r1, #0
   14cd4:	mov	r9, r0
   14cd8:	ldr	r0, [sp, #28]
   14cdc:	mov	r4, r1
   14ce0:	mov	r7, r2
   14ce4:	mov	r1, r6
   14ce8:	mov	r2, #256	; 0x100
   14cec:	ldr	r3, [r0]
   14cf0:	mov	r0, r8
   14cf4:	bl	18b8 <fread@plt>
   14cf8:	mov	r1, #0
   14cfc:	mov	r2, r8
   14d00:	vld1.32	{d16-d17}, [r2]!
   14d04:	add	r3, r5, r1
   14d08:	add	r1, r1, #8
   14d0c:	cmp	r1, #512	; 0x200
   14d10:	vcvt.u32.f32	q8, q8
   14d14:	vmovn.i32	d16, q8
   14d18:	vst1.16	{d16}, [r3]
   14d1c:	bne	14d00 <ReadUInt16Data+0x1424>
   14d20:	ldr	r3, [sp, #20]
   14d24:	add	r1, r4, #256	; 0x100
   14d28:	add	sl, r0, sl
   14d2c:	add	r5, r5, #512	; 0x200
   14d30:	add	r0, r9, #512	; 0x200
   14d34:	add	r2, r7, #256	; 0x100
   14d38:	cmp	r1, r3
   14d3c:	blt	14cd4 <ReadUInt16Data+0x13f8>
   14d40:	ldr	r0, [sp, #12]
   14d44:	cmp	r1, r0
   14d48:	bge	15208 <ReadUInt16Data+0x192c>
   14d4c:	sub	r8, r0, r1
   14d50:	ldr	r0, [sp, #28]
   14d54:	add	r5, sp, #80	; 0x50
   14d58:	mov	r1, r6
   14d5c:	mov	r2, r8
   14d60:	ldr	r3, [r0]
   14d64:	mov	r0, r5
   14d68:	bl	18b8 <fread@plt>
   14d6c:	add	sl, r0, sl
   14d70:	cmp	r8, #1
   14d74:	blt	15208 <ReadUInt16Data+0x192c>
   14d78:	mov	r0, #0
   14d7c:	cmp	r8, #4
   14d80:	bcc	14db4 <ReadUInt16Data+0x14d8>
   14d84:	ldr	r0, [sp, #20]
   14d88:	sub	r0, r0, r4
   14d8c:	bic	r1, r0, #3
   14d90:	bic	r0, r8, #3
   14d94:	vld1.32	{d16-d17}, [r5]!
   14d98:	subs	r1, r1, #4
   14d9c:	vcvt.u32.f32	q8, q8
   14da0:	vmovn.i32	d16, q8
   14da4:	vst1.16	{d16}, [r9]!
   14da8:	bne	14d94 <ReadUInt16Data+0x14b8>
   14dac:	cmp	r8, r0
   14db0:	beq	15208 <ReadUInt16Data+0x192c>
   14db4:	ldr	r3, [sp, #8]
   14db8:	add	r2, r0, r7
   14dbc:	add	r1, sp, #80	; 0x50
   14dc0:	add	r1, r1, r0, lsl #2
   14dc4:	add	r2, r3, r2, lsl #1
   14dc8:	ldr	r3, [sp, #20]
   14dcc:	sub	r3, r3, r4
   14dd0:	sub	r0, r3, r0
   14dd4:	vldr	s0, [r1]
   14dd8:	subs	r0, r0, #1
   14ddc:	add	r1, r1, #4
   14de0:	vcvt.u32.f32	s0, s0
   14de4:	vmov	r3, s0
   14de8:	strh	r3, [r2], #2
   14dec:	bne	14dd4 <ReadUInt16Data+0x14f8>
   14df0:	b	15208 <ReadUInt16Data+0x192c>
   14df4:	add	r1, r5, #512	; 0x200
   14df8:	sub	r8, r7, #256	; 0x100
   14dfc:	mov	r0, #0
   14e00:	add	r4, sp, #80	; 0x50
   14e04:	mov	sl, #0
   14e08:	str	r7, [sp, #12]
   14e0c:	mov	r9, r0
   14e10:	ldr	r0, [sp, #28]
   14e14:	mov	r7, r1
   14e18:	mov	r1, r6
   14e1c:	mov	r2, #256	; 0x100
   14e20:	ldr	r3, [r0]
   14e24:	mov	r0, r4
   14e28:	bl	18b8 <fread@plt>
   14e2c:	mov	r1, #0
   14e30:	mov	r2, r4
   14e34:	vldr	d16, [r2]
   14e38:	add	r3, r5, r1
   14e3c:	add	r1, r1, #2
   14e40:	add	r2, r2, #8
   14e44:	cmp	r1, #512	; 0x200
   14e48:	vcvt.u32.f64	s0, d16
   14e4c:	vmov	r6, s0
   14e50:	strh	r6, [r3]
   14e54:	bne	14e34 <ReadUInt16Data+0x1558>
   14e58:	ldr	r6, [sp, #24]
   14e5c:	add	sl, r0, sl
   14e60:	add	r0, r9, #256	; 0x100
   14e64:	add	r5, r5, #512	; 0x200
   14e68:	add	r1, r7, #512	; 0x200
   14e6c:	cmp	r0, r8
   14e70:	blt	14e0c <ReadUInt16Data+0x1530>
   14e74:	ldr	r2, [sp, #12]
   14e78:	cmp	r0, r2
   14e7c:	bge	15208 <ReadUInt16Data+0x192c>
   14e80:	mov	r1, r6
   14e84:	sub	r6, r2, r0
   14e88:	ldr	r0, [sp, #28]
   14e8c:	add	r4, sp, #80	; 0x50
   14e90:	mov	r2, r6
   14e94:	ldr	r3, [r0]
   14e98:	mov	r0, r4
   14e9c:	bl	18b8 <fread@plt>
   14ea0:	add	sl, r0, sl
   14ea4:	cmp	r6, #1
   14ea8:	blt	15204 <ReadUInt16Data+0x1928>
   14eac:	sub	r0, r8, r9
   14eb0:	vldr	d16, [r4]
   14eb4:	subs	r0, r0, #1
   14eb8:	add	r4, r4, #8
   14ebc:	vcvt.u32.f64	s0, d16
   14ec0:	vmov	r1, s0
   14ec4:	strh	r1, [r7], #2
   14ec8:	bne	14eb0 <ReadUInt16Data+0x15d4>
   14ecc:	b	15204 <ReadUInt16Data+0x1928>
   14ed0:	sub	r1, r7, #256	; 0x100
   14ed4:	str	r8, [sp, #4]
   14ed8:	add	r0, r5, #512	; 0x200
   14edc:	mov	r2, #256	; 0x100
   14ee0:	add	r8, sp, #80	; 0x50
   14ee4:	mov	sl, #0
   14ee8:	str	r7, [sp, #12]
   14eec:	str	r5, [sp, #8]
   14ef0:	str	r1, [sp, #20]
   14ef4:	mov	r1, #0
   14ef8:	mov	r7, r0
   14efc:	ldr	r0, [sp, #28]
   14f00:	mov	r9, r1
   14f04:	mov	r4, r2
   14f08:	mov	r1, r6
   14f0c:	mov	r2, #256	; 0x100
   14f10:	ldr	r3, [r0]
   14f14:	mov	r0, r8
   14f18:	bl	18b8 <fread@plt>
   14f1c:	mov	r1, #0
   14f20:	mov	r2, r8
   14f24:	vld1.64	{d16-d17}, [r2]!
   14f28:	add	r3, r5, r1
   14f2c:	add	r1, r1, #4
   14f30:	cmp	r1, #512	; 0x200
   14f34:	vmovn.i64	d16, q8
   14f38:	vuzp.16	d16, d17
   14f3c:	vst1.32	{d16[0]}, [r3]
   14f40:	bne	14f24 <ReadUInt16Data+0x1648>
   14f44:	ldr	r3, [sp, #20]
   14f48:	add	r1, r9, #256	; 0x100
   14f4c:	add	sl, r0, sl
   14f50:	add	r5, r5, #512	; 0x200
   14f54:	add	r0, r7, #512	; 0x200
   14f58:	add	r2, r4, #256	; 0x100
   14f5c:	cmp	r1, r3
   14f60:	blt	14ef8 <ReadUInt16Data+0x161c>
   14f64:	ldr	r0, [sp, #12]
   14f68:	cmp	r1, r0
   14f6c:	bge	1503c <ReadUInt16Data+0x1760>
   14f70:	sub	r8, r0, r1
   14f74:	ldr	r0, [sp, #28]
   14f78:	add	r5, sp, #80	; 0x50
   14f7c:	mov	r1, r6
   14f80:	mov	r2, r8
   14f84:	ldr	r3, [r0]
   14f88:	mov	r0, r5
   14f8c:	bl	18b8 <fread@plt>
   14f90:	mov	r2, r8
   14f94:	cmp	r8, #1
   14f98:	ldr	r8, [sp, #4]
   14f9c:	add	sl, r0, sl
   14fa0:	blt	1500c <ReadUInt16Data+0x1730>
   14fa4:	mov	r0, #0
   14fa8:	beq	14fdc <ReadUInt16Data+0x1700>
   14fac:	ldr	r0, [sp, #20]
   14fb0:	sub	r0, r0, r9
   14fb4:	bic	r1, r0, #1
   14fb8:	bic	r0, r2, #1
   14fbc:	vld1.64	{d16-d17}, [r5]!
   14fc0:	subs	r1, r1, #2
   14fc4:	vmovn.i64	d16, q8
   14fc8:	vuzp.16	d16, d17
   14fcc:	vst1.32	{d16[0]}, [r7]!
   14fd0:	bne	14fbc <ReadUInt16Data+0x16e0>
   14fd4:	cmp	r2, r0
   14fd8:	beq	1500c <ReadUInt16Data+0x1730>
   14fdc:	ldr	r3, [sp, #8]
   14fe0:	add	r2, r0, r4
   14fe4:	add	r1, sp, #80	; 0x50
   14fe8:	add	r1, r1, r0, lsl #3
   14fec:	add	r2, r3, r2, lsl #1
   14ff0:	ldr	r3, [sp, #20]
   14ff4:	sub	r3, r3, r9
   14ff8:	sub	r0, r3, r0
   14ffc:	ldrh	r3, [r1], #8
   15000:	subs	r0, r0, #1
   15004:	strh	r3, [r2], #2
   15008:	bne	14ffc <ReadUInt16Data+0x1720>
   1500c:	ldr	r5, [sp, #8]
   15010:	ldr	r7, [sp, #12]
   15014:	ldr	r9, [sp, #28]
   15018:	cmp	r8, #13
   1501c:	beq	15054 <ReadUInt16Data+0x1778>
   15020:	b	15208 <ReadUInt16Data+0x192c>
   15024:	ldr	r6, [sp, #24]
   15028:	ldr	r5, [sp, #8]
   1502c:	ldr	r8, [sp, #4]
   15030:	cmp	r8, #13
   15034:	beq	15054 <ReadUInt16Data+0x1778>
   15038:	b	15208 <ReadUInt16Data+0x192c>
   1503c:	ldr	r5, [sp, #8]
   15040:	ldr	r9, [sp, #28]
   15044:	ldr	r8, [sp, #4]
   15048:	mov	r7, r0
   1504c:	cmp	r8, #13
   15050:	bne	15208 <ReadUInt16Data+0x192c>
   15054:	ldr	r0, [r9, #20]
   15058:	cmp	r0, #0
   1505c:	beq	150a8 <ReadUInt16Data+0x17cc>
   15060:	cmp	r7, #256	; 0x100
   15064:	bgt	1512c <ReadUInt16Data+0x1850>
   15068:	ldr	r3, [r9]
   1506c:	add	r4, sp, #80	; 0x50
   15070:	mov	r1, r6
   15074:	mov	r2, r7
   15078:	mov	r0, r4
   1507c:	bl	18b8 <fread@plt>
   15080:	add	sl, r0, sl
   15084:	cmp	r7, #1
   15088:	blt	15208 <ReadUInt16Data+0x192c>
   1508c:	mov	r0, r4
   15090:	bl	1bd4 <Mat_uint64Swap>
   15094:	strh	r0, [r5], #2
   15098:	subs	r7, r7, #1
   1509c:	add	r4, r4, #8
   150a0:	bne	1508c <ReadUInt16Data+0x17b0>
   150a4:	b	15208 <ReadUInt16Data+0x192c>
   150a8:	cmp	r7, #256	; 0x100
   150ac:	bgt	15214 <ReadUInt16Data+0x1938>
   150b0:	ldr	r3, [r9]
   150b4:	add	r4, sp, #80	; 0x50
   150b8:	mov	r1, r6
   150bc:	mov	r2, r7
   150c0:	mov	r0, r4
   150c4:	bl	18b8 <fread@plt>
   150c8:	add	sl, r0, sl
   150cc:	cmp	r7, #1
   150d0:	blt	15208 <ReadUInt16Data+0x192c>
   150d4:	mov	r0, #0
   150d8:	beq	15108 <ReadUInt16Data+0x182c>
   150dc:	bic	r0, r7, #1
   150e0:	mov	r2, r5
   150e4:	mov	r1, r0
   150e8:	vld1.64	{d16-d17}, [r4]!
   150ec:	subs	r1, r1, #2
   150f0:	vmovn.i64	d16, q8
   150f4:	vuzp.16	d16, d17
   150f8:	vst1.32	{d16[0]}, [r2]!
   150fc:	bne	150e8 <ReadUInt16Data+0x180c>
   15100:	cmp	r0, r7
   15104:	beq	15208 <ReadUInt16Data+0x192c>
   15108:	add	r3, sp, #80	; 0x50
   1510c:	sub	r1, r7, r0
   15110:	add	r2, r5, r0, lsl #1
   15114:	add	r0, r3, r0, lsl #3
   15118:	ldrh	r3, [r0], #8
   1511c:	subs	r1, r1, #1
   15120:	strh	r3, [r2], #2
   15124:	bne	15118 <ReadUInt16Data+0x183c>
   15128:	b	15208 <ReadUInt16Data+0x192c>
   1512c:	sub	r0, r7, #256	; 0x100
   15130:	add	r1, r5, #512	; 0x200
   15134:	str	r7, [sp, #12]
   15138:	str	r0, [sp, #16]
   1513c:	mov	r0, #0
   15140:	ldr	r3, [r9]
   15144:	add	r7, sp, #80	; 0x50
   15148:	str	r0, [sp, #20]
   1514c:	mov	r8, r1
   15150:	mov	r1, r6
   15154:	mov	r2, #256	; 0x100
   15158:	mov	r0, r7
   1515c:	bl	18b8 <fread@plt>
   15160:	mov	r4, r0
   15164:	mov	r6, #0
   15168:	mov	r0, r7
   1516c:	add	r9, r5, r6
   15170:	bl	1bd4 <Mat_uint64Swap>
   15174:	add	r6, r6, #2
   15178:	add	r7, r7, #8
   1517c:	strh	r0, [r9]
   15180:	cmp	r6, #512	; 0x200
   15184:	bne	15168 <ReadUInt16Data+0x188c>
   15188:	ldr	r7, [sp, #20]
   1518c:	ldr	r2, [sp, #16]
   15190:	ldr	r6, [sp, #24]
   15194:	ldr	r9, [sp, #28]
   15198:	add	sl, r4, sl
   1519c:	add	r5, r5, #512	; 0x200
   151a0:	add	r1, r8, #512	; 0x200
   151a4:	add	r0, r7, #256	; 0x100
   151a8:	cmp	r0, r2
   151ac:	blt	15140 <ReadUInt16Data+0x1864>
   151b0:	ldr	r2, [sp, #12]
   151b4:	cmp	r0, r2
   151b8:	bge	15208 <ReadUInt16Data+0x192c>
   151bc:	ldr	r3, [r9]
   151c0:	mov	r1, r6
   151c4:	sub	r6, r2, r0
   151c8:	add	r4, sp, #80	; 0x50
   151cc:	mov	r0, r4
   151d0:	mov	r2, r6
   151d4:	bl	18b8 <fread@plt>
   151d8:	add	sl, r0, sl
   151dc:	cmp	r6, #1
   151e0:	blt	15204 <ReadUInt16Data+0x1928>
   151e4:	ldr	r0, [sp, #16]
   151e8:	sub	r6, r0, r7
   151ec:	mov	r0, r4
   151f0:	bl	1bd4 <Mat_uint64Swap>
   151f4:	strh	r0, [r8], #2
   151f8:	subs	r6, r6, #1
   151fc:	add	r4, r4, #8
   15200:	bne	151ec <ReadUInt16Data+0x1910>
   15204:	ldr	r6, [sp, #24]
   15208:	mul	r0, sl, r6
   1520c:	sub	sp, fp, #28
   15210:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15214:	sub	r1, r7, #256	; 0x100
   15218:	add	r0, r5, #512	; 0x200
   1521c:	mov	r2, #256	; 0x100
   15220:	add	r8, sp, #80	; 0x50
   15224:	str	r7, [sp, #12]
   15228:	str	r5, [sp, #8]
   1522c:	str	r1, [sp, #20]
   15230:	mov	r1, #0
   15234:	mov	r9, r0
   15238:	ldr	r0, [sp, #28]
   1523c:	mov	r4, r1
   15240:	mov	r7, r2
   15244:	mov	r1, r6
   15248:	mov	r2, #256	; 0x100
   1524c:	ldr	r3, [r0]
   15250:	mov	r0, r8
   15254:	bl	18b8 <fread@plt>
   15258:	mov	r1, #0
   1525c:	mov	r2, r8
   15260:	vld1.64	{d16-d17}, [r2]!
   15264:	add	r3, r5, r1
   15268:	add	r1, r1, #4
   1526c:	cmp	r1, #512	; 0x200
   15270:	vmovn.i64	d16, q8
   15274:	vuzp.16	d16, d17
   15278:	vst1.32	{d16[0]}, [r3]
   1527c:	bne	15260 <ReadUInt16Data+0x1984>
   15280:	ldr	r3, [sp, #20]
   15284:	add	r1, r4, #256	; 0x100
   15288:	add	sl, r0, sl
   1528c:	add	r5, r5, #512	; 0x200
   15290:	add	r0, r9, #512	; 0x200
   15294:	add	r2, r7, #256	; 0x100
   15298:	cmp	r1, r3
   1529c:	blt	15234 <ReadUInt16Data+0x1958>
   152a0:	ldr	r0, [sp, #12]
   152a4:	cmp	r1, r0
   152a8:	bge	15208 <ReadUInt16Data+0x192c>
   152ac:	sub	r8, r0, r1
   152b0:	ldr	r0, [sp, #28]
   152b4:	add	r5, sp, #80	; 0x50
   152b8:	mov	r1, r6
   152bc:	mov	r2, r8
   152c0:	ldr	r3, [r0]
   152c4:	mov	r0, r5
   152c8:	bl	18b8 <fread@plt>
   152cc:	add	sl, r0, sl
   152d0:	cmp	r8, #1
   152d4:	blt	15208 <ReadUInt16Data+0x192c>
   152d8:	mov	r0, #0
   152dc:	beq	15310 <ReadUInt16Data+0x1a34>
   152e0:	ldr	r0, [sp, #20]
   152e4:	sub	r0, r0, r4
   152e8:	bic	r1, r0, #1
   152ec:	bic	r0, r8, #1
   152f0:	vld1.64	{d16-d17}, [r5]!
   152f4:	subs	r1, r1, #2
   152f8:	vmovn.i64	d16, q8
   152fc:	vuzp.16	d16, d17
   15300:	vst1.32	{d16[0]}, [r9]!
   15304:	bne	152f0 <ReadUInt16Data+0x1a14>
   15308:	cmp	r8, r0
   1530c:	beq	15208 <ReadUInt16Data+0x192c>
   15310:	ldr	r3, [sp, #8]
   15314:	add	r2, r0, r7
   15318:	add	r1, sp, #80	; 0x50
   1531c:	add	r1, r1, r0, lsl #3
   15320:	add	r2, r3, r2, lsl #1
   15324:	ldr	r3, [sp, #20]
   15328:	sub	r3, r3, r4
   1532c:	sub	r0, r3, r0
   15330:	ldrh	r3, [r1], #8
   15334:	subs	r0, r0, #1
   15338:	strh	r3, [r2], #2
   1533c:	bne	15330 <ReadUInt16Data+0x1a54>
   15340:	b	15208 <ReadUInt16Data+0x192c>

00015344 <ReadCompressedUInt16Data>:
   15344:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15348:	add	fp, sp, #28
   1534c:	sub	sp, sp, #12
   15350:	mov	r7, r0
   15354:	mov	r0, #0
   15358:	cmp	r1, #0
   1535c:	beq	15370 <ReadCompressedUInt16Data+0x2c>
   15360:	cmp	r7, #0
   15364:	movne	r5, r2
   15368:	cmpne	r2, #0
   1536c:	bne	15378 <ReadCompressedUInt16Data+0x34>
   15370:	sub	sp, fp, #28
   15374:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15378:	ldr	sl, [fp, #8]
   1537c:	mov	r0, r3
   15380:	mov	r4, r3
   15384:	mov	r6, r1
   15388:	bl	1924 <Mat_SizeOf@plt>
   1538c:	mov	r9, r0
   15390:	sub	r0, r4, #1
   15394:	cmp	r0, #12
   15398:	bhi	15868 <ReadCompressedUInt16Data+0x524>
   1539c:	add	r1, pc, #4
   153a0:	ldr	r0, [r1, r0, lsl #2]
   153a4:	add	pc, r1, r0
   153a8:	.word	0x00000034
   153ac:	.word	0x0000006c
   153b0:	.word	0x000000a4
   153b4:	.word	0x000000ec
   153b8:	.word	0x00000134
   153bc:	.word	0x0000017c
   153c0:	.word	0x000001c4
   153c4:	.word	0x000004c0
   153c8:	.word	0x00000214
   153cc:	.word	0x000004c0
   153d0:	.word	0x000004c0
   153d4:	.word	0x00000264
   153d8:	.word	0x000002ac
   153dc:	cmp	sl, #1
   153e0:	blt	15868 <ReadCompressedUInt16Data+0x524>
   153e4:	mov	r8, sp
   153e8:	mov	r4, sl
   153ec:	mov	r0, r7
   153f0:	mov	r1, r6
   153f4:	mov	r2, r8
   153f8:	mov	r3, r9
   153fc:	bl	32b8 <InflateData>
   15400:	ldrsb	r0, [sp]
   15404:	subs	r4, r4, #1
   15408:	strh	r0, [r5], #2
   1540c:	bne	153ec <ReadCompressedUInt16Data+0xa8>
   15410:	b	15868 <ReadCompressedUInt16Data+0x524>
   15414:	cmp	sl, #1
   15418:	blt	15868 <ReadCompressedUInt16Data+0x524>
   1541c:	mov	r8, sp
   15420:	mov	r4, sl
   15424:	mov	r0, r7
   15428:	mov	r1, r6
   1542c:	mov	r2, r8
   15430:	mov	r3, r9
   15434:	bl	32b8 <InflateData>
   15438:	ldrb	r0, [sp]
   1543c:	subs	r4, r4, #1
   15440:	strh	r0, [r5], #2
   15444:	bne	15424 <ReadCompressedUInt16Data+0xe0>
   15448:	b	15868 <ReadCompressedUInt16Data+0x524>
   1544c:	ldr	r0, [r7, #20]
   15450:	cmp	r0, #0
   15454:	beq	1569c <ReadCompressedUInt16Data+0x358>
   15458:	cmp	sl, #1
   1545c:	blt	15868 <ReadCompressedUInt16Data+0x524>
   15460:	mov	r8, sp
   15464:	mov	r4, sl
   15468:	mov	r0, r7
   1546c:	mov	r1, r6
   15470:	mov	r2, r8
   15474:	mov	r3, r9
   15478:	bl	32b8 <InflateData>
   1547c:	mov	r0, r8
   15480:	bl	1c18 <Mat_int16Swap>
   15484:	strh	r0, [r5], #2
   15488:	subs	r4, r4, #1
   1548c:	bne	15468 <ReadCompressedUInt16Data+0x124>
   15490:	b	15868 <ReadCompressedUInt16Data+0x524>
   15494:	ldr	r0, [r7, #20]
   15498:	cmp	r0, #0
   1549c:	beq	156d4 <ReadCompressedUInt16Data+0x390>
   154a0:	cmp	sl, #1
   154a4:	blt	15868 <ReadCompressedUInt16Data+0x524>
   154a8:	mov	r8, sp
   154ac:	mov	r4, sl
   154b0:	mov	r0, r7
   154b4:	mov	r1, r6
   154b8:	mov	r2, r8
   154bc:	mov	r3, r9
   154c0:	bl	32b8 <InflateData>
   154c4:	mov	r0, r8
   154c8:	bl	1c2c <Mat_uint16Swap>
   154cc:	strh	r0, [r5], #2
   154d0:	subs	r4, r4, #1
   154d4:	bne	154b0 <ReadCompressedUInt16Data+0x16c>
   154d8:	b	15868 <ReadCompressedUInt16Data+0x524>
   154dc:	ldr	r0, [r7, #20]
   154e0:	cmp	r0, #0
   154e4:	beq	1570c <ReadCompressedUInt16Data+0x3c8>
   154e8:	cmp	sl, #1
   154ec:	blt	15868 <ReadCompressedUInt16Data+0x524>
   154f0:	mov	r8, sp
   154f4:	mov	r4, sl
   154f8:	mov	r0, r7
   154fc:	mov	r1, r6
   15500:	mov	r2, r8
   15504:	mov	r3, r9
   15508:	bl	32b8 <InflateData>
   1550c:	mov	r0, r8
   15510:	bl	1bf0 <Mat_int32Swap>
   15514:	strh	r0, [r5], #2
   15518:	subs	r4, r4, #1
   1551c:	bne	154f8 <ReadCompressedUInt16Data+0x1b4>
   15520:	b	15868 <ReadCompressedUInt16Data+0x524>
   15524:	ldr	r0, [r7, #20]
   15528:	cmp	r0, #0
   1552c:	beq	15744 <ReadCompressedUInt16Data+0x400>
   15530:	cmp	sl, #1
   15534:	blt	15868 <ReadCompressedUInt16Data+0x524>
   15538:	mov	r8, sp
   1553c:	mov	r4, sl
   15540:	mov	r0, r7
   15544:	mov	r1, r6
   15548:	mov	r2, r8
   1554c:	mov	r3, r9
   15550:	bl	32b8 <InflateData>
   15554:	mov	r0, r8
   15558:	bl	1c04 <Mat_uint32Swap>
   1555c:	strh	r0, [r5], #2
   15560:	subs	r4, r4, #1
   15564:	bne	15540 <ReadCompressedUInt16Data+0x1fc>
   15568:	b	15868 <ReadCompressedUInt16Data+0x524>
   1556c:	ldr	r0, [r7, #20]
   15570:	cmp	r0, #0
   15574:	beq	1577c <ReadCompressedUInt16Data+0x438>
   15578:	cmp	sl, #1
   1557c:	blt	15868 <ReadCompressedUInt16Data+0x524>
   15580:	mov	r8, sp
   15584:	mov	r4, sl
   15588:	mov	r0, r7
   1558c:	mov	r1, r6
   15590:	mov	r2, r8
   15594:	mov	r3, r9
   15598:	bl	32b8 <InflateData>
   1559c:	mov	r0, r8
   155a0:	bl	1c44 <Mat_floatSwap>
   155a4:	vcvt.u32.f32	s0, s0
   155a8:	subs	r4, r4, #1
   155ac:	vmov	r0, s0
   155b0:	strh	r0, [r5], #2
   155b4:	bne	15588 <ReadCompressedUInt16Data+0x244>
   155b8:	b	15868 <ReadCompressedUInt16Data+0x524>
   155bc:	ldr	r0, [r7, #20]
   155c0:	cmp	r0, #0
   155c4:	beq	157bc <ReadCompressedUInt16Data+0x478>
   155c8:	cmp	sl, #1
   155cc:	blt	15868 <ReadCompressedUInt16Data+0x524>
   155d0:	mov	r8, sp
   155d4:	mov	r4, sl
   155d8:	mov	r0, r7
   155dc:	mov	r1, r6
   155e0:	mov	r2, r8
   155e4:	mov	r3, r9
   155e8:	bl	32b8 <InflateData>
   155ec:	mov	r0, r8
   155f0:	bl	1c88 <Mat_doubleSwap>
   155f4:	vcvt.u32.f64	s0, d0
   155f8:	subs	r4, r4, #1
   155fc:	vmov	r0, s0
   15600:	strh	r0, [r5], #2
   15604:	bne	155d8 <ReadCompressedUInt16Data+0x294>
   15608:	b	15868 <ReadCompressedUInt16Data+0x524>
   1560c:	ldr	r0, [r7, #20]
   15610:	cmp	r0, #0
   15614:	beq	157fc <ReadCompressedUInt16Data+0x4b8>
   15618:	cmp	sl, #1
   1561c:	blt	15868 <ReadCompressedUInt16Data+0x524>
   15620:	mov	r8, sp
   15624:	mov	r4, sl
   15628:	mov	r0, r7
   1562c:	mov	r1, r6
   15630:	mov	r2, r8
   15634:	mov	r3, r9
   15638:	bl	32b8 <InflateData>
   1563c:	mov	r0, r8
   15640:	bl	1b84 <Mat_int64Swap>
   15644:	strh	r0, [r5], #2
   15648:	subs	r4, r4, #1
   1564c:	bne	15628 <ReadCompressedUInt16Data+0x2e4>
   15650:	b	15868 <ReadCompressedUInt16Data+0x524>
   15654:	ldr	r0, [r7, #20]
   15658:	cmp	r0, #0
   1565c:	beq	15834 <ReadCompressedUInt16Data+0x4f0>
   15660:	cmp	sl, #1
   15664:	blt	15868 <ReadCompressedUInt16Data+0x524>
   15668:	mov	r8, sp
   1566c:	mov	r4, sl
   15670:	mov	r0, r7
   15674:	mov	r1, r6
   15678:	mov	r2, r8
   1567c:	mov	r3, r9
   15680:	bl	32b8 <InflateData>
   15684:	mov	r0, r8
   15688:	bl	1bd4 <Mat_uint64Swap>
   1568c:	strh	r0, [r5], #2
   15690:	subs	r4, r4, #1
   15694:	bne	15670 <ReadCompressedUInt16Data+0x32c>
   15698:	b	15868 <ReadCompressedUInt16Data+0x524>
   1569c:	cmp	sl, #1
   156a0:	blt	15868 <ReadCompressedUInt16Data+0x524>
   156a4:	mov	r8, sp
   156a8:	mov	r4, sl
   156ac:	mov	r0, r7
   156b0:	mov	r1, r6
   156b4:	mov	r2, r8
   156b8:	mov	r3, r9
   156bc:	bl	32b8 <InflateData>
   156c0:	ldrh	r0, [sp]
   156c4:	subs	r4, r4, #1
   156c8:	strh	r0, [r5], #2
   156cc:	bne	156ac <ReadCompressedUInt16Data+0x368>
   156d0:	b	15868 <ReadCompressedUInt16Data+0x524>
   156d4:	cmp	sl, #1
   156d8:	blt	15868 <ReadCompressedUInt16Data+0x524>
   156dc:	mov	r8, sp
   156e0:	mov	r4, sl
   156e4:	mov	r0, r7
   156e8:	mov	r1, r6
   156ec:	mov	r2, r8
   156f0:	mov	r3, r9
   156f4:	bl	32b8 <InflateData>
   156f8:	ldrh	r0, [sp]
   156fc:	subs	r4, r4, #1
   15700:	strh	r0, [r5], #2
   15704:	bne	156e4 <ReadCompressedUInt16Data+0x3a0>
   15708:	b	15868 <ReadCompressedUInt16Data+0x524>
   1570c:	cmp	sl, #1
   15710:	blt	15868 <ReadCompressedUInt16Data+0x524>
   15714:	mov	r8, sp
   15718:	mov	r4, sl
   1571c:	mov	r0, r7
   15720:	mov	r1, r6
   15724:	mov	r2, r8
   15728:	mov	r3, r9
   1572c:	bl	32b8 <InflateData>
   15730:	ldr	r0, [sp]
   15734:	subs	r4, r4, #1
   15738:	strh	r0, [r5], #2
   1573c:	bne	1571c <ReadCompressedUInt16Data+0x3d8>
   15740:	b	15868 <ReadCompressedUInt16Data+0x524>
   15744:	cmp	sl, #1
   15748:	blt	15868 <ReadCompressedUInt16Data+0x524>
   1574c:	mov	r8, sp
   15750:	mov	r4, sl
   15754:	mov	r0, r7
   15758:	mov	r1, r6
   1575c:	mov	r2, r8
   15760:	mov	r3, r9
   15764:	bl	32b8 <InflateData>
   15768:	ldr	r0, [sp]
   1576c:	subs	r4, r4, #1
   15770:	strh	r0, [r5], #2
   15774:	bne	15754 <ReadCompressedUInt16Data+0x410>
   15778:	b	15868 <ReadCompressedUInt16Data+0x524>
   1577c:	cmp	sl, #1
   15780:	blt	15868 <ReadCompressedUInt16Data+0x524>
   15784:	mov	r8, sp
   15788:	mov	r4, sl
   1578c:	mov	r0, r7
   15790:	mov	r1, r6
   15794:	mov	r2, r8
   15798:	mov	r3, r9
   1579c:	bl	32b8 <InflateData>
   157a0:	vldr	s0, [sp]
   157a4:	subs	r4, r4, #1
   157a8:	vcvt.u32.f32	s0, s0
   157ac:	vmov	r0, s0
   157b0:	strh	r0, [r5], #2
   157b4:	bne	1578c <ReadCompressedUInt16Data+0x448>
   157b8:	b	15868 <ReadCompressedUInt16Data+0x524>
   157bc:	cmp	sl, #1
   157c0:	blt	15868 <ReadCompressedUInt16Data+0x524>
   157c4:	mov	r8, sp
   157c8:	mov	r4, sl
   157cc:	mov	r0, r7
   157d0:	mov	r1, r6
   157d4:	mov	r2, r8
   157d8:	mov	r3, r9
   157dc:	bl	32b8 <InflateData>
   157e0:	vldr	d16, [sp]
   157e4:	subs	r4, r4, #1
   157e8:	vcvt.u32.f64	s0, d16
   157ec:	vmov	r0, s0
   157f0:	strh	r0, [r5], #2
   157f4:	bne	157cc <ReadCompressedUInt16Data+0x488>
   157f8:	b	15868 <ReadCompressedUInt16Data+0x524>
   157fc:	cmp	sl, #1
   15800:	blt	15868 <ReadCompressedUInt16Data+0x524>
   15804:	mov	r8, sp
   15808:	mov	r4, sl
   1580c:	mov	r0, r7
   15810:	mov	r1, r6
   15814:	mov	r2, r8
   15818:	mov	r3, r9
   1581c:	bl	32b8 <InflateData>
   15820:	ldrh	r0, [sp]
   15824:	subs	r4, r4, #1
   15828:	strh	r0, [r5], #2
   1582c:	bne	1580c <ReadCompressedUInt16Data+0x4c8>
   15830:	b	15868 <ReadCompressedUInt16Data+0x524>
   15834:	cmp	sl, #1
   15838:	blt	15868 <ReadCompressedUInt16Data+0x524>
   1583c:	mov	r8, sp
   15840:	mov	r4, sl
   15844:	mov	r0, r7
   15848:	mov	r1, r6
   1584c:	mov	r2, r8
   15850:	mov	r3, r9
   15854:	bl	32b8 <InflateData>
   15858:	ldrh	r0, [sp]
   1585c:	subs	r4, r4, #1
   15860:	strh	r0, [r5], #2
   15864:	bne	15844 <ReadCompressedUInt16Data+0x500>
   15868:	mul	r0, r9, sl
   1586c:	sub	sp, fp, #28
   15870:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015874 <ReadInt8Data>:
   15874:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15878:	add	fp, sp, #28
   1587c:	sub	sp, sp, #28
   15880:	sub	sp, sp, #2048	; 0x800
   15884:	mov	r6, r0
   15888:	mov	r0, #0
   1588c:	cmp	r6, #0
   15890:	beq	158a8 <ReadInt8Data+0x34>
   15894:	cmp	r1, #0
   15898:	mov	sl, r1
   1589c:	ldrne	r1, [r6]
   158a0:	cmpne	r1, #0
   158a4:	bne	158b0 <ReadInt8Data+0x3c>
   158a8:	sub	sp, fp, #28
   158ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158b0:	mov	r0, r2
   158b4:	mov	r8, r3
   158b8:	mov	r4, r2
   158bc:	bl	1924 <Mat_SizeOf@plt>
   158c0:	str	r0, [sp, #20]
   158c4:	sub	r0, r4, #1
   158c8:	mov	r5, #0
   158cc:	cmp	r0, #11
   158d0:	bhi	16e7c <ReadInt8Data+0x1608>
   158d4:	add	r1, pc, #4
   158d8:	ldr	r0, [r1, r0, lsl #2]
   158dc:	add	pc, r1, r0
   158e0:	.word	0x00000030
   158e4:	.word	0x00000098
   158e8:	.word	0x000000d4
   158ec:	.word	0x00000128
   158f0:	.word	0x0000017c
   158f4:	.word	0x000001d0
   158f8:	.word	0x00000224
   158fc:	.word	0x0000159c
   15900:	.word	0x00000280
   15904:	.word	0x0000159c
   15908:	.word	0x0000159c
   1590c:	.word	0x000002dc
   15910:	cmp	r8, #256	; 0x100
   15914:	ble	15980 <ReadInt8Data+0x10c>
   15918:	ldr	r5, [sp, #20]
   1591c:	sub	r0, r8, #256	; 0x100
   15920:	str	r8, [sp, #8]
   15924:	mov	r9, r6
   15928:	mov	r7, #0
   1592c:	add	r8, sp, #24
   15930:	mov	r6, #0
   15934:	str	r0, [sp, #16]
   15938:	ldr	r3, [r9]
   1593c:	mov	r0, r8
   15940:	mov	r1, r5
   15944:	mov	r2, #256	; 0x100
   15948:	bl	18b8 <fread@plt>
   1594c:	mov	r4, r0
   15950:	add	r0, sl, r7
   15954:	mov	r1, r8
   15958:	mov	r2, #256	; 0x100
   1595c:	bl	181c <memcpy@plt>
   15960:	ldr	r0, [sp, #16]
   15964:	add	r7, r7, #256	; 0x100
   15968:	add	r6, r4, r6
   1596c:	cmp	r7, r0
   15970:	blt	15938 <ReadInt8Data+0xc4>
   15974:	b	15c88 <ReadInt8Data+0x414>
   15978:	cmp	r8, #256	; 0x100
   1597c:	bgt	15c2c <ReadInt8Data+0x3b8>
   15980:	ldr	r3, [r6]
   15984:	ldr	r1, [sp, #20]
   15988:	add	r0, sp, #24
   1598c:	mov	r2, r8
   15990:	bl	18b8 <fread@plt>
   15994:	mov	r5, r0
   15998:	cmp	r8, #1
   1599c:	blt	1716c <ReadInt8Data+0x18f8>
   159a0:	add	r1, sp, #24
   159a4:	mov	r0, sl
   159a8:	mov	r2, r8
   159ac:	bl	181c <memcpy@plt>
   159b0:	b	1716c <ReadInt8Data+0x18f8>
   159b4:	ldr	r0, [r6, #20]
   159b8:	cmp	r0, #0
   159bc:	beq	15cd0 <ReadInt8Data+0x45c>
   159c0:	cmp	r8, #256	; 0x100
   159c4:	bgt	1605c <ReadInt8Data+0x7e8>
   159c8:	ldr	r3, [r6]
   159cc:	ldr	r1, [sp, #20]
   159d0:	add	r4, sp, #24
   159d4:	mov	r2, r8
   159d8:	mov	r0, r4
   159dc:	bl	18b8 <fread@plt>
   159e0:	mov	r5, r0
   159e4:	cmp	r8, #1
   159e8:	blt	1716c <ReadInt8Data+0x18f8>
   159ec:	mov	r0, r4
   159f0:	bl	1c18 <Mat_int16Swap>
   159f4:	strb	r0, [sl], #1
   159f8:	subs	r8, r8, #1
   159fc:	add	r4, r4, #2
   15a00:	bne	159ec <ReadInt8Data+0x178>
   15a04:	b	1716c <ReadInt8Data+0x18f8>
   15a08:	ldr	r0, [r6, #20]
   15a0c:	cmp	r0, #0
   15a10:	beq	15d54 <ReadInt8Data+0x4e0>
   15a14:	cmp	r8, #256	; 0x100
   15a18:	bgt	1613c <ReadInt8Data+0x8c8>
   15a1c:	ldr	r3, [r6]
   15a20:	ldr	r1, [sp, #20]
   15a24:	add	r4, sp, #24
   15a28:	mov	r2, r8
   15a2c:	mov	r0, r4
   15a30:	bl	18b8 <fread@plt>
   15a34:	mov	r5, r0
   15a38:	cmp	r8, #1
   15a3c:	blt	1716c <ReadInt8Data+0x18f8>
   15a40:	mov	r0, r4
   15a44:	bl	1c2c <Mat_uint16Swap>
   15a48:	strb	r0, [sl], #1
   15a4c:	subs	r8, r8, #1
   15a50:	add	r4, r4, #2
   15a54:	bne	15a40 <ReadInt8Data+0x1cc>
   15a58:	b	1716c <ReadInt8Data+0x18f8>
   15a5c:	ldr	r0, [r6, #20]
   15a60:	cmp	r0, #0
   15a64:	beq	15dd8 <ReadInt8Data+0x564>
   15a68:	cmp	r8, #256	; 0x100
   15a6c:	bgt	1621c <ReadInt8Data+0x9a8>
   15a70:	ldr	r3, [r6]
   15a74:	ldr	r1, [sp, #20]
   15a78:	add	r4, sp, #24
   15a7c:	mov	r2, r8
   15a80:	mov	r0, r4
   15a84:	bl	18b8 <fread@plt>
   15a88:	mov	r5, r0
   15a8c:	cmp	r8, #1
   15a90:	blt	1716c <ReadInt8Data+0x18f8>
   15a94:	mov	r0, r4
   15a98:	bl	1bf0 <Mat_int32Swap>
   15a9c:	strb	r0, [sl], #1
   15aa0:	subs	r8, r8, #1
   15aa4:	add	r4, r4, #4
   15aa8:	bne	15a94 <ReadInt8Data+0x220>
   15aac:	b	1716c <ReadInt8Data+0x18f8>
   15ab0:	ldr	r0, [r6, #20]
   15ab4:	cmp	r0, #0
   15ab8:	beq	15e60 <ReadInt8Data+0x5ec>
   15abc:	cmp	r8, #256	; 0x100
   15ac0:	bgt	162fc <ReadInt8Data+0xa88>
   15ac4:	ldr	r3, [r6]
   15ac8:	ldr	r1, [sp, #20]
   15acc:	add	r4, sp, #24
   15ad0:	mov	r2, r8
   15ad4:	mov	r0, r4
   15ad8:	bl	18b8 <fread@plt>
   15adc:	mov	r5, r0
   15ae0:	cmp	r8, #1
   15ae4:	blt	1716c <ReadInt8Data+0x18f8>
   15ae8:	mov	r0, r4
   15aec:	bl	1c04 <Mat_uint32Swap>
   15af0:	strb	r0, [sl], #1
   15af4:	subs	r8, r8, #1
   15af8:	add	r4, r4, #4
   15afc:	bne	15ae8 <ReadInt8Data+0x274>
   15b00:	b	1716c <ReadInt8Data+0x18f8>
   15b04:	ldr	r0, [r6, #20]
   15b08:	cmp	r0, #0
   15b0c:	beq	15ee8 <ReadInt8Data+0x674>
   15b10:	cmp	r8, #256	; 0x100
   15b14:	bgt	163dc <ReadInt8Data+0xb68>
   15b18:	ldr	r3, [r6]
   15b1c:	ldr	r1, [sp, #20]
   15b20:	add	r4, sp, #24
   15b24:	mov	r2, r8
   15b28:	mov	r0, r4
   15b2c:	bl	18b8 <fread@plt>
   15b30:	mov	r5, r0
   15b34:	cmp	r8, #1
   15b38:	blt	1716c <ReadInt8Data+0x18f8>
   15b3c:	mov	r0, r4
   15b40:	bl	1c44 <Mat_floatSwap>
   15b44:	vcvt.s32.f32	s0, s0
   15b48:	subs	r8, r8, #1
   15b4c:	add	r4, r4, #4
   15b50:	vmov	r0, s0
   15b54:	strb	r0, [sl], #1
   15b58:	bne	15b3c <ReadInt8Data+0x2c8>
   15b5c:	b	1716c <ReadInt8Data+0x18f8>
   15b60:	ldr	r0, [r6, #20]
   15b64:	cmp	r0, #0
   15b68:	beq	15f80 <ReadInt8Data+0x70c>
   15b6c:	cmp	r8, #256	; 0x100
   15b70:	bgt	164cc <ReadInt8Data+0xc58>
   15b74:	ldr	r3, [r6]
   15b78:	ldr	r1, [sp, #20]
   15b7c:	add	r4, sp, #24
   15b80:	mov	r2, r8
   15b84:	mov	r0, r4
   15b88:	bl	18b8 <fread@plt>
   15b8c:	mov	r5, r0
   15b90:	cmp	r8, #1
   15b94:	blt	1716c <ReadInt8Data+0x18f8>
   15b98:	mov	r0, r4
   15b9c:	bl	1c88 <Mat_doubleSwap>
   15ba0:	vcvt.s32.f64	s0, d0
   15ba4:	subs	r8, r8, #1
   15ba8:	add	r4, r4, #8
   15bac:	vmov	r0, s0
   15bb0:	strb	r0, [sl], #1
   15bb4:	bne	15b98 <ReadInt8Data+0x324>
   15bb8:	b	1716c <ReadInt8Data+0x18f8>
   15bbc:	ldr	r0, [r6, #20]
   15bc0:	cmp	r0, #0
   15bc4:	beq	15fcc <ReadInt8Data+0x758>
   15bc8:	cmp	r8, #256	; 0x100
   15bcc:	bgt	165c0 <ReadInt8Data+0xd4c>
   15bd0:	ldr	r3, [r6]
   15bd4:	ldr	r1, [sp, #20]
   15bd8:	add	r7, sp, #24
   15bdc:	mov	r2, r8
   15be0:	mov	r0, r7
   15be4:	bl	18b8 <fread@plt>
   15be8:	mov	r5, r0
   15bec:	cmp	r8, #1
   15bf0:	blt	16e7c <ReadInt8Data+0x1608>
   15bf4:	str	r4, [sp, #4]
   15bf8:	mov	r9, r6
   15bfc:	mov	r6, r5
   15c00:	mov	r4, r8
   15c04:	mov	r5, sl
   15c08:	mov	r0, r7
   15c0c:	bl	1b84 <Mat_int64Swap>
   15c10:	strb	r0, [r5], #1
   15c14:	subs	r4, r4, #1
   15c18:	add	r7, r7, #8
   15c1c:	bne	15c08 <ReadInt8Data+0x394>
   15c20:	mov	r5, r6
   15c24:	mov	r6, r9
   15c28:	b	16e78 <ReadInt8Data+0x1604>
   15c2c:	ldr	r5, [sp, #20]
   15c30:	sub	r0, r8, #256	; 0x100
   15c34:	str	r8, [sp, #8]
   15c38:	mov	r9, r6
   15c3c:	mov	r7, #0
   15c40:	add	r8, sp, #24
   15c44:	mov	r6, #0
   15c48:	str	r0, [sp, #16]
   15c4c:	ldr	r3, [r9]
   15c50:	mov	r0, r8
   15c54:	mov	r1, r5
   15c58:	mov	r2, #256	; 0x100
   15c5c:	bl	18b8 <fread@plt>
   15c60:	mov	r4, r0
   15c64:	add	r0, sl, r7
   15c68:	mov	r1, r8
   15c6c:	mov	r2, #256	; 0x100
   15c70:	bl	181c <memcpy@plt>
   15c74:	ldr	r0, [sp, #16]
   15c78:	add	r7, r7, #256	; 0x100
   15c7c:	add	r6, r4, r6
   15c80:	cmp	r7, r0
   15c84:	blt	15c4c <ReadInt8Data+0x3d8>
   15c88:	ldr	r0, [sp, #8]
   15c8c:	cmp	r7, r0
   15c90:	bge	16d10 <ReadInt8Data+0x149c>
   15c94:	ldr	r3, [r9]
   15c98:	sub	r4, r0, r7
   15c9c:	add	r0, sp, #24
   15ca0:	mov	r1, r5
   15ca4:	mov	r2, r4
   15ca8:	bl	18b8 <fread@plt>
   15cac:	mov	r5, r6
   15cb0:	cmp	r4, #1
   15cb4:	add	r5, r0, r6
   15cb8:	blt	1716c <ReadInt8Data+0x18f8>
   15cbc:	add	r0, sl, r7
   15cc0:	add	r1, sp, #24
   15cc4:	mov	r2, r4
   15cc8:	bl	181c <memcpy@plt>
   15ccc:	b	1716c <ReadInt8Data+0x18f8>
   15cd0:	cmp	r8, #256	; 0x100
   15cd4:	bgt	166b4 <ReadInt8Data+0xe40>
   15cd8:	ldr	r3, [r6]
   15cdc:	ldr	r1, [sp, #20]
   15ce0:	add	r4, sp, #24
   15ce4:	mov	r2, r8
   15ce8:	mov	r0, r4
   15cec:	bl	18b8 <fread@plt>
   15cf0:	mov	r5, r0
   15cf4:	cmp	r8, #1
   15cf8:	blt	1716c <ReadInt8Data+0x18f8>
   15cfc:	mov	r0, #0
   15d00:	cmp	r8, #8
   15d04:	bcc	15d30 <ReadInt8Data+0x4bc>
   15d08:	bic	r0, r8, #7
   15d0c:	mov	r2, sl
   15d10:	mov	r1, r0
   15d14:	vld1.16	{d16-d17}, [r4]!
   15d18:	subs	r1, r1, #8
   15d1c:	vmovn.i16	d16, q8
   15d20:	vst1.8	{d16}, [r2]!
   15d24:	bne	15d14 <ReadInt8Data+0x4a0>
   15d28:	cmp	r0, r8
   15d2c:	beq	1716c <ReadInt8Data+0x18f8>
   15d30:	add	r3, sp, #24
   15d34:	sub	r1, r8, r0
   15d38:	add	r2, sl, r0
   15d3c:	add	r0, r3, r0, lsl #1
   15d40:	ldrb	r3, [r0], #2
   15d44:	subs	r1, r1, #1
   15d48:	strb	r3, [r2], #1
   15d4c:	bne	15d40 <ReadInt8Data+0x4cc>
   15d50:	b	1716c <ReadInt8Data+0x18f8>
   15d54:	cmp	r8, #256	; 0x100
   15d58:	bgt	167c4 <ReadInt8Data+0xf50>
   15d5c:	ldr	r3, [r6]
   15d60:	ldr	r1, [sp, #20]
   15d64:	add	r4, sp, #24
   15d68:	mov	r2, r8
   15d6c:	mov	r0, r4
   15d70:	bl	18b8 <fread@plt>
   15d74:	mov	r5, r0
   15d78:	cmp	r8, #1
   15d7c:	blt	1716c <ReadInt8Data+0x18f8>
   15d80:	mov	r0, #0
   15d84:	cmp	r8, #8
   15d88:	bcc	15db4 <ReadInt8Data+0x540>
   15d8c:	bic	r0, r8, #7
   15d90:	mov	r2, sl
   15d94:	mov	r1, r0
   15d98:	vld1.16	{d16-d17}, [r4]!
   15d9c:	subs	r1, r1, #8
   15da0:	vmovn.i16	d16, q8
   15da4:	vst1.8	{d16}, [r2]!
   15da8:	bne	15d98 <ReadInt8Data+0x524>
   15dac:	cmp	r0, r8
   15db0:	beq	1716c <ReadInt8Data+0x18f8>
   15db4:	add	r3, sp, #24
   15db8:	sub	r1, r8, r0
   15dbc:	add	r2, sl, r0
   15dc0:	add	r0, r3, r0, lsl #1
   15dc4:	ldrb	r3, [r0], #2
   15dc8:	subs	r1, r1, #1
   15dcc:	strb	r3, [r2], #1
   15dd0:	bne	15dc4 <ReadInt8Data+0x550>
   15dd4:	b	1716c <ReadInt8Data+0x18f8>
   15dd8:	cmp	r8, #256	; 0x100
   15ddc:	bgt	168d4 <ReadInt8Data+0x1060>
   15de0:	ldr	r3, [r6]
   15de4:	ldr	r1, [sp, #20]
   15de8:	add	r4, sp, #24
   15dec:	mov	r2, r8
   15df0:	mov	r0, r4
   15df4:	bl	18b8 <fread@plt>
   15df8:	mov	r5, r0
   15dfc:	cmp	r8, #1
   15e00:	blt	1716c <ReadInt8Data+0x18f8>
   15e04:	mov	r0, #0
   15e08:	cmp	r8, #4
   15e0c:	bcc	15e3c <ReadInt8Data+0x5c8>
   15e10:	bic	r0, r8, #3
   15e14:	mov	r2, sl
   15e18:	mov	r1, r0
   15e1c:	vld1.32	{d16-d17}, [r4]!
   15e20:	subs	r1, r1, #4
   15e24:	vmovn.i32	d16, q8
   15e28:	vuzp.8	d16, d17
   15e2c:	vst1.32	{d16[0]}, [r2]!
   15e30:	bne	15e1c <ReadInt8Data+0x5a8>
   15e34:	cmp	r0, r8
   15e38:	beq	1716c <ReadInt8Data+0x18f8>
   15e3c:	add	r3, sp, #24
   15e40:	sub	r1, r8, r0
   15e44:	add	r2, sl, r0
   15e48:	add	r0, r3, r0, lsl #2
   15e4c:	ldr	r3, [r0], #4
   15e50:	subs	r1, r1, #1
   15e54:	strb	r3, [r2], #1
   15e58:	bne	15e4c <ReadInt8Data+0x5d8>
   15e5c:	b	1716c <ReadInt8Data+0x18f8>
   15e60:	cmp	r8, #256	; 0x100
   15e64:	bgt	169ec <ReadInt8Data+0x1178>
   15e68:	ldr	r3, [r6]
   15e6c:	ldr	r1, [sp, #20]
   15e70:	add	r4, sp, #24
   15e74:	mov	r2, r8
   15e78:	mov	r0, r4
   15e7c:	bl	18b8 <fread@plt>
   15e80:	mov	r5, r0
   15e84:	cmp	r8, #1
   15e88:	blt	1716c <ReadInt8Data+0x18f8>
   15e8c:	mov	r0, #0
   15e90:	cmp	r8, #4
   15e94:	bcc	15ec4 <ReadInt8Data+0x650>
   15e98:	bic	r0, r8, #3
   15e9c:	mov	r2, sl
   15ea0:	mov	r1, r0
   15ea4:	vld1.32	{d16-d17}, [r4]!
   15ea8:	subs	r1, r1, #4
   15eac:	vmovn.i32	d16, q8
   15eb0:	vuzp.8	d16, d17
   15eb4:	vst1.32	{d16[0]}, [r2]!
   15eb8:	bne	15ea4 <ReadInt8Data+0x630>
   15ebc:	cmp	r0, r8
   15ec0:	beq	1716c <ReadInt8Data+0x18f8>
   15ec4:	add	r3, sp, #24
   15ec8:	sub	r1, r8, r0
   15ecc:	add	r2, sl, r0
   15ed0:	add	r0, r3, r0, lsl #2
   15ed4:	ldr	r3, [r0], #4
   15ed8:	subs	r1, r1, #1
   15edc:	strb	r3, [r2], #1
   15ee0:	bne	15ed4 <ReadInt8Data+0x660>
   15ee4:	b	1716c <ReadInt8Data+0x18f8>
   15ee8:	cmp	r8, #256	; 0x100
   15eec:	bgt	16b04 <ReadInt8Data+0x1290>
   15ef0:	ldr	r3, [r6]
   15ef4:	ldr	r1, [sp, #20]
   15ef8:	add	r4, sp, #24
   15efc:	mov	r2, r8
   15f00:	mov	r0, r4
   15f04:	bl	18b8 <fread@plt>
   15f08:	mov	r5, r0
   15f0c:	cmp	r8, #1
   15f10:	blt	1716c <ReadInt8Data+0x18f8>
   15f14:	mov	r0, #0
   15f18:	cmp	r8, #4
   15f1c:	bcc	15f50 <ReadInt8Data+0x6dc>
   15f20:	bic	r0, r8, #3
   15f24:	mov	r2, sl
   15f28:	mov	r1, r0
   15f2c:	vld1.32	{d16-d17}, [r4]!
   15f30:	subs	r1, r1, #4
   15f34:	vcvt.s32.f32	q8, q8
   15f38:	vmovn.i32	d16, q8
   15f3c:	vuzp.8	d16, d17
   15f40:	vst1.32	{d16[0]}, [r2]!
   15f44:	bne	15f2c <ReadInt8Data+0x6b8>
   15f48:	cmp	r0, r8
   15f4c:	beq	1716c <ReadInt8Data+0x18f8>
   15f50:	add	r3, sp, #24
   15f54:	sub	r1, r8, r0
   15f58:	add	r2, sl, r0
   15f5c:	add	r0, r3, r0, lsl #2
   15f60:	vldr	s0, [r0]
   15f64:	subs	r1, r1, #1
   15f68:	add	r0, r0, #4
   15f6c:	vcvt.s32.f32	s0, s0
   15f70:	vmov	r3, s0
   15f74:	strb	r3, [r2], #1
   15f78:	bne	15f60 <ReadInt8Data+0x6ec>
   15f7c:	b	1716c <ReadInt8Data+0x18f8>
   15f80:	cmp	r8, #256	; 0x100
   15f84:	bgt	16c30 <ReadInt8Data+0x13bc>
   15f88:	ldr	r3, [r6]
   15f8c:	ldr	r1, [sp, #20]
   15f90:	add	r4, sp, #24
   15f94:	mov	r2, r8
   15f98:	mov	r0, r4
   15f9c:	bl	18b8 <fread@plt>
   15fa0:	mov	r5, r0
   15fa4:	cmp	r8, #1
   15fa8:	blt	1716c <ReadInt8Data+0x18f8>
   15fac:	vldr	d16, [r4]
   15fb0:	subs	r8, r8, #1
   15fb4:	add	r4, r4, #8
   15fb8:	vcvt.s32.f64	s0, d16
   15fbc:	vmov	r0, s0
   15fc0:	strb	r0, [sl], #1
   15fc4:	bne	15fac <ReadInt8Data+0x738>
   15fc8:	b	1716c <ReadInt8Data+0x18f8>
   15fcc:	cmp	r8, #256	; 0x100
   15fd0:	bgt	16d18 <ReadInt8Data+0x14a4>
   15fd4:	ldr	r3, [r6]
   15fd8:	ldr	r1, [sp, #20]
   15fdc:	add	r7, sp, #24
   15fe0:	mov	r2, r8
   15fe4:	mov	r0, r7
   15fe8:	bl	18b8 <fread@plt>
   15fec:	mov	r5, r0
   15ff0:	cmp	r8, #1
   15ff4:	blt	16e7c <ReadInt8Data+0x1608>
   15ff8:	mov	r0, #0
   15ffc:	beq	16038 <ReadInt8Data+0x7c4>
   16000:	bic	r0, r8, #1
   16004:	mov	r2, sl
   16008:	mov	r1, r0
   1600c:	vld1.64	{d16-d17}, [r7]!
   16010:	subs	r1, r1, #2
   16014:	vmovn.i64	d16, q8
   16018:	vmov.32	r3, d16[1]
   1601c:	strb	r3, [r2, #1]
   16020:	vmov.32	r3, d16[0]
   16024:	strb	r3, [r2]
   16028:	add	r2, r2, #2
   1602c:	bne	1600c <ReadInt8Data+0x798>
   16030:	cmp	r0, r8
   16034:	beq	16e7c <ReadInt8Data+0x1608>
   16038:	add	r3, sp, #24
   1603c:	sub	r1, r8, r0
   16040:	add	r2, sl, r0
   16044:	add	r0, r3, r0, lsl #3
   16048:	ldrb	r3, [r0], #8
   1604c:	subs	r1, r1, #1
   16050:	strb	r3, [r2], #1
   16054:	bne	16048 <ReadInt8Data+0x7d4>
   16058:	b	16e7c <ReadInt8Data+0x1608>
   1605c:	str	r6, [sp, #16]
   16060:	sub	r0, r8, #256	; 0x100
   16064:	mov	r7, #0
   16068:	mov	r6, sl
   1606c:	mov	r5, #0
   16070:	str	r8, [sp, #8]
   16074:	str	r0, [sp, #12]
   16078:	ldr	r0, [sp, #16]
   1607c:	ldr	r1, [sp, #20]
   16080:	add	r4, sp, #24
   16084:	mov	r2, #256	; 0x100
   16088:	mov	r8, r5
   1608c:	mov	r9, r7
   16090:	ldr	r3, [r0]
   16094:	mov	r0, r4
   16098:	bl	18b8 <fread@plt>
   1609c:	mov	r7, r0
   160a0:	mov	r5, #0
   160a4:	mov	r0, r4
   160a8:	bl	1c18 <Mat_int16Swap>
   160ac:	strb	r0, [r6, r5]
   160b0:	add	r5, r5, #1
   160b4:	add	r4, r4, #2
   160b8:	cmp	r5, #256	; 0x100
   160bc:	bne	160a4 <ReadInt8Data+0x830>
   160c0:	ldr	r0, [sp, #12]
   160c4:	mov	r5, r8
   160c8:	add	r6, r6, #256	; 0x100
   160cc:	add	r5, r7, r8
   160d0:	add	r7, r9, #256	; 0x100
   160d4:	cmp	r7, r0
   160d8:	blt	16078 <ReadInt8Data+0x804>
   160dc:	ldr	r0, [sp, #8]
   160e0:	cmp	r7, r0
   160e4:	bge	1716c <ReadInt8Data+0x18f8>
   160e8:	sub	r8, r0, r7
   160ec:	ldr	r0, [sp, #16]
   160f0:	ldr	r1, [sp, #20]
   160f4:	add	r4, sp, #24
   160f8:	mov	r2, r8
   160fc:	ldr	r3, [r0]
   16100:	mov	r0, r4
   16104:	bl	18b8 <fread@plt>
   16108:	add	r5, r0, r5
   1610c:	cmp	r8, #1
   16110:	blt	1716c <ReadInt8Data+0x18f8>
   16114:	ldr	r0, [sp, #12]
   16118:	sub	r6, r0, r9
   1611c:	mov	r0, r4
   16120:	bl	1c18 <Mat_int16Swap>
   16124:	strb	r0, [sl, r7]
   16128:	add	sl, sl, #1
   1612c:	subs	r6, r6, #1
   16130:	add	r4, r4, #2
   16134:	bne	1611c <ReadInt8Data+0x8a8>
   16138:	b	1716c <ReadInt8Data+0x18f8>
   1613c:	str	r6, [sp, #16]
   16140:	sub	r0, r8, #256	; 0x100
   16144:	mov	r7, #0
   16148:	mov	r6, sl
   1614c:	mov	r5, #0
   16150:	str	r8, [sp, #8]
   16154:	str	r0, [sp, #12]
   16158:	ldr	r0, [sp, #16]
   1615c:	ldr	r1, [sp, #20]
   16160:	add	r4, sp, #24
   16164:	mov	r2, #256	; 0x100
   16168:	mov	r8, r5
   1616c:	mov	r9, r7
   16170:	ldr	r3, [r0]
   16174:	mov	r0, r4
   16178:	bl	18b8 <fread@plt>
   1617c:	mov	r7, r0
   16180:	mov	r5, #0
   16184:	mov	r0, r4
   16188:	bl	1c2c <Mat_uint16Swap>
   1618c:	strb	r0, [r6, r5]
   16190:	add	r5, r5, #1
   16194:	add	r4, r4, #2
   16198:	cmp	r5, #256	; 0x100
   1619c:	bne	16184 <ReadInt8Data+0x910>
   161a0:	ldr	r0, [sp, #12]
   161a4:	mov	r5, r8
   161a8:	add	r6, r6, #256	; 0x100
   161ac:	add	r5, r7, r8
   161b0:	add	r7, r9, #256	; 0x100
   161b4:	cmp	r7, r0
   161b8:	blt	16158 <ReadInt8Data+0x8e4>
   161bc:	ldr	r0, [sp, #8]
   161c0:	cmp	r7, r0
   161c4:	bge	1716c <ReadInt8Data+0x18f8>
   161c8:	sub	r8, r0, r7
   161cc:	ldr	r0, [sp, #16]
   161d0:	ldr	r1, [sp, #20]
   161d4:	add	r4, sp, #24
   161d8:	mov	r2, r8
   161dc:	ldr	r3, [r0]
   161e0:	mov	r0, r4
   161e4:	bl	18b8 <fread@plt>
   161e8:	add	r5, r0, r5
   161ec:	cmp	r8, #1
   161f0:	blt	1716c <ReadInt8Data+0x18f8>
   161f4:	ldr	r0, [sp, #12]
   161f8:	sub	r6, r0, r9
   161fc:	mov	r0, r4
   16200:	bl	1c2c <Mat_uint16Swap>
   16204:	strb	r0, [sl, r7]
   16208:	add	sl, sl, #1
   1620c:	subs	r6, r6, #1
   16210:	add	r4, r4, #2
   16214:	bne	161fc <ReadInt8Data+0x988>
   16218:	b	1716c <ReadInt8Data+0x18f8>
   1621c:	str	r6, [sp, #16]
   16220:	sub	r0, r8, #256	; 0x100
   16224:	mov	r7, #0
   16228:	mov	r6, sl
   1622c:	mov	r5, #0
   16230:	str	r8, [sp, #8]
   16234:	str	r0, [sp, #12]
   16238:	ldr	r0, [sp, #16]
   1623c:	ldr	r1, [sp, #20]
   16240:	add	r4, sp, #24
   16244:	mov	r2, #256	; 0x100
   16248:	mov	r8, r5
   1624c:	mov	r9, r7
   16250:	ldr	r3, [r0]
   16254:	mov	r0, r4
   16258:	bl	18b8 <fread@plt>
   1625c:	mov	r7, r0
   16260:	mov	r5, #0
   16264:	mov	r0, r4
   16268:	bl	1bf0 <Mat_int32Swap>
   1626c:	strb	r0, [r6, r5]
   16270:	add	r5, r5, #1
   16274:	add	r4, r4, #4
   16278:	cmp	r5, #256	; 0x100
   1627c:	bne	16264 <ReadInt8Data+0x9f0>
   16280:	ldr	r0, [sp, #12]
   16284:	mov	r5, r8
   16288:	add	r6, r6, #256	; 0x100
   1628c:	add	r5, r7, r8
   16290:	add	r7, r9, #256	; 0x100
   16294:	cmp	r7, r0
   16298:	blt	16238 <ReadInt8Data+0x9c4>
   1629c:	ldr	r0, [sp, #8]
   162a0:	cmp	r7, r0
   162a4:	bge	1716c <ReadInt8Data+0x18f8>
   162a8:	sub	r8, r0, r7
   162ac:	ldr	r0, [sp, #16]
   162b0:	ldr	r1, [sp, #20]
   162b4:	add	r4, sp, #24
   162b8:	mov	r2, r8
   162bc:	ldr	r3, [r0]
   162c0:	mov	r0, r4
   162c4:	bl	18b8 <fread@plt>
   162c8:	add	r5, r0, r5
   162cc:	cmp	r8, #1
   162d0:	blt	1716c <ReadInt8Data+0x18f8>
   162d4:	ldr	r0, [sp, #12]
   162d8:	sub	r6, r0, r9
   162dc:	mov	r0, r4
   162e0:	bl	1bf0 <Mat_int32Swap>
   162e4:	strb	r0, [sl, r7]
   162e8:	add	sl, sl, #1
   162ec:	subs	r6, r6, #1
   162f0:	add	r4, r4, #4
   162f4:	bne	162dc <ReadInt8Data+0xa68>
   162f8:	b	1716c <ReadInt8Data+0x18f8>
   162fc:	str	r6, [sp, #16]
   16300:	sub	r0, r8, #256	; 0x100
   16304:	mov	r7, #0
   16308:	mov	r6, sl
   1630c:	mov	r5, #0
   16310:	str	r8, [sp, #8]
   16314:	str	r0, [sp, #12]
   16318:	ldr	r0, [sp, #16]
   1631c:	ldr	r1, [sp, #20]
   16320:	add	r4, sp, #24
   16324:	mov	r2, #256	; 0x100
   16328:	mov	r8, r5
   1632c:	mov	r9, r7
   16330:	ldr	r3, [r0]
   16334:	mov	r0, r4
   16338:	bl	18b8 <fread@plt>
   1633c:	mov	r7, r0
   16340:	mov	r5, #0
   16344:	mov	r0, r4
   16348:	bl	1c04 <Mat_uint32Swap>
   1634c:	strb	r0, [r6, r5]
   16350:	add	r5, r5, #1
   16354:	add	r4, r4, #4
   16358:	cmp	r5, #256	; 0x100
   1635c:	bne	16344 <ReadInt8Data+0xad0>
   16360:	ldr	r0, [sp, #12]
   16364:	mov	r5, r8
   16368:	add	r6, r6, #256	; 0x100
   1636c:	add	r5, r7, r8
   16370:	add	r7, r9, #256	; 0x100
   16374:	cmp	r7, r0
   16378:	blt	16318 <ReadInt8Data+0xaa4>
   1637c:	ldr	r0, [sp, #8]
   16380:	cmp	r7, r0
   16384:	bge	1716c <ReadInt8Data+0x18f8>
   16388:	sub	r8, r0, r7
   1638c:	ldr	r0, [sp, #16]
   16390:	ldr	r1, [sp, #20]
   16394:	add	r4, sp, #24
   16398:	mov	r2, r8
   1639c:	ldr	r3, [r0]
   163a0:	mov	r0, r4
   163a4:	bl	18b8 <fread@plt>
   163a8:	add	r5, r0, r5
   163ac:	cmp	r8, #1
   163b0:	blt	1716c <ReadInt8Data+0x18f8>
   163b4:	ldr	r0, [sp, #12]
   163b8:	sub	r6, r0, r9
   163bc:	mov	r0, r4
   163c0:	bl	1c04 <Mat_uint32Swap>
   163c4:	strb	r0, [sl, r7]
   163c8:	add	sl, sl, #1
   163cc:	subs	r6, r6, #1
   163d0:	add	r4, r4, #4
   163d4:	bne	163bc <ReadInt8Data+0xb48>
   163d8:	b	1716c <ReadInt8Data+0x18f8>
   163dc:	str	r6, [sp, #16]
   163e0:	sub	r0, r8, #256	; 0x100
   163e4:	mov	r7, #0
   163e8:	mov	r6, sl
   163ec:	mov	r5, #0
   163f0:	str	r8, [sp, #8]
   163f4:	str	r0, [sp, #12]
   163f8:	ldr	r0, [sp, #16]
   163fc:	ldr	r1, [sp, #20]
   16400:	add	r4, sp, #24
   16404:	mov	r2, #256	; 0x100
   16408:	mov	r8, r5
   1640c:	mov	r9, r7
   16410:	ldr	r3, [r0]
   16414:	mov	r0, r4
   16418:	bl	18b8 <fread@plt>
   1641c:	mov	r7, r0
   16420:	mov	r5, #0
   16424:	mov	r0, r4
   16428:	bl	1c44 <Mat_floatSwap>
   1642c:	vcvt.s32.f32	s0, s0
   16430:	add	r4, r4, #4
   16434:	vmov	r0, s0
   16438:	strb	r0, [r6, r5]
   1643c:	add	r5, r5, #1
   16440:	cmp	r5, #256	; 0x100
   16444:	bne	16424 <ReadInt8Data+0xbb0>
   16448:	ldr	r0, [sp, #12]
   1644c:	mov	r5, r8
   16450:	add	r6, r6, #256	; 0x100
   16454:	add	r5, r7, r8
   16458:	add	r7, r9, #256	; 0x100
   1645c:	cmp	r7, r0
   16460:	blt	163f8 <ReadInt8Data+0xb84>
   16464:	ldr	r0, [sp, #8]
   16468:	cmp	r7, r0
   1646c:	bge	1716c <ReadInt8Data+0x18f8>
   16470:	sub	r8, r0, r7
   16474:	ldr	r0, [sp, #16]
   16478:	ldr	r1, [sp, #20]
   1647c:	add	r4, sp, #24
   16480:	mov	r2, r8
   16484:	ldr	r3, [r0]
   16488:	mov	r0, r4
   1648c:	bl	18b8 <fread@plt>
   16490:	add	r5, r0, r5
   16494:	cmp	r8, #1
   16498:	blt	1716c <ReadInt8Data+0x18f8>
   1649c:	ldr	r0, [sp, #12]
   164a0:	sub	r6, r0, r9
   164a4:	mov	r0, r4
   164a8:	bl	1c44 <Mat_floatSwap>
   164ac:	vcvt.s32.f32	s0, s0
   164b0:	subs	r6, r6, #1
   164b4:	add	r4, r4, #4
   164b8:	vmov	r0, s0
   164bc:	strb	r0, [sl, r7]
   164c0:	add	sl, sl, #1
   164c4:	bne	164a4 <ReadInt8Data+0xc30>
   164c8:	b	1716c <ReadInt8Data+0x18f8>
   164cc:	str	r6, [sp, #16]
   164d0:	sub	r0, r8, #256	; 0x100
   164d4:	mov	r9, #0
   164d8:	mov	r6, sl
   164dc:	mov	r5, #0
   164e0:	str	r8, [sp, #8]
   164e4:	str	r0, [sp, #12]
   164e8:	ldr	r0, [sp, #16]
   164ec:	ldr	r1, [sp, #20]
   164f0:	add	r4, sp, #24
   164f4:	mov	r2, #256	; 0x100
   164f8:	mov	r8, r5
   164fc:	ldr	r3, [r0]
   16500:	mov	r0, r4
   16504:	bl	18b8 <fread@plt>
   16508:	mov	r7, r0
   1650c:	mov	r5, #0
   16510:	mov	r0, r4
   16514:	bl	1c88 <Mat_doubleSwap>
   16518:	vcvt.s32.f64	s0, d0
   1651c:	add	r4, r4, #8
   16520:	vmov	r0, s0
   16524:	strb	r0, [r6, r5]
   16528:	add	r5, r5, #1
   1652c:	cmp	r5, #256	; 0x100
   16530:	bne	16510 <ReadInt8Data+0xc9c>
   16534:	ldr	r0, [sp, #12]
   16538:	mov	r5, r8
   1653c:	mov	r1, r9
   16540:	add	r9, r9, #256	; 0x100
   16544:	add	r6, r6, #256	; 0x100
   16548:	add	r5, r7, r8
   1654c:	cmp	r9, r0
   16550:	blt	164e8 <ReadInt8Data+0xc74>
   16554:	ldr	r0, [sp, #8]
   16558:	cmp	r9, r0
   1655c:	bge	1716c <ReadInt8Data+0x18f8>
   16560:	sub	r7, r0, r9
   16564:	ldr	r0, [sp, #16]
   16568:	mov	r6, r1
   1656c:	ldr	r1, [sp, #20]
   16570:	add	r4, sp, #24
   16574:	mov	r2, r7
   16578:	ldr	r3, [r0]
   1657c:	mov	r0, r4
   16580:	bl	18b8 <fread@plt>
   16584:	add	r5, r0, r5
   16588:	cmp	r7, #1
   1658c:	blt	1716c <ReadInt8Data+0x18f8>
   16590:	ldr	r0, [sp, #12]
   16594:	sub	r6, r0, r6
   16598:	mov	r0, r4
   1659c:	bl	1c88 <Mat_doubleSwap>
   165a0:	vcvt.s32.f64	s0, d0
   165a4:	subs	r6, r6, #1
   165a8:	add	r4, r4, #8
   165ac:	vmov	r0, s0
   165b0:	strb	r0, [sl, r9]
   165b4:	add	sl, sl, #1
   165b8:	bne	16598 <ReadInt8Data+0xd24>
   165bc:	b	1716c <ReadInt8Data+0x18f8>
   165c0:	str	r6, [sp, #16]
   165c4:	stmib	sp, {r4, r8}
   165c8:	sub	r0, r8, #256	; 0x100
   165cc:	mov	r4, #0
   165d0:	mov	r6, sl
   165d4:	mov	r5, #0
   165d8:	str	r0, [sp, #12]
   165dc:	ldr	r0, [sp, #16]
   165e0:	ldr	r1, [sp, #20]
   165e4:	mov	r9, r4
   165e8:	add	r4, sp, #24
   165ec:	mov	r2, #256	; 0x100
   165f0:	mov	r8, r5
   165f4:	ldr	r3, [r0]
   165f8:	mov	r0, r4
   165fc:	bl	18b8 <fread@plt>
   16600:	mov	r7, r0
   16604:	mov	r5, #0
   16608:	mov	r0, r4
   1660c:	bl	1b84 <Mat_int64Swap>
   16610:	strb	r0, [r6, r5]
   16614:	add	r5, r5, #1
   16618:	add	r4, r4, #8
   1661c:	cmp	r5, #256	; 0x100
   16620:	bne	16608 <ReadInt8Data+0xd94>
   16624:	ldr	r0, [sp, #12]
   16628:	mov	r5, r8
   1662c:	add	r4, r9, #256	; 0x100
   16630:	add	r6, r6, #256	; 0x100
   16634:	add	r5, r7, r8
   16638:	cmp	r4, r0
   1663c:	blt	165dc <ReadInt8Data+0xd68>
   16640:	ldr	r8, [sp, #8]
   16644:	cmp	r4, r8
   16648:	bge	16e60 <ReadInt8Data+0x15ec>
   1664c:	ldr	r6, [sp, #16]
   16650:	ldr	r1, [sp, #20]
   16654:	sub	r8, r8, r4
   16658:	add	r7, sp, #24
   1665c:	mov	r0, r7
   16660:	mov	r2, r8
   16664:	ldr	r3, [r6]
   16668:	bl	18b8 <fread@plt>
   1666c:	add	r5, r0, r5
   16670:	cmp	r8, #1
   16674:	blt	16e74 <ReadInt8Data+0x1600>
   16678:	ldr	r0, [sp, #12]
   1667c:	mov	r8, r5
   16680:	mov	r5, sl
   16684:	sub	r6, r0, r9
   16688:	mov	r0, r7
   1668c:	bl	1b84 <Mat_int64Swap>
   16690:	strb	r0, [r5, r4]
   16694:	add	r5, r5, #1
   16698:	subs	r6, r6, #1
   1669c:	add	r7, r7, #8
   166a0:	bne	16688 <ReadInt8Data+0xe14>
   166a4:	mov	r5, r8
   166a8:	ldr	r8, [sp, #8]
   166ac:	ldr	r6, [sp, #16]
   166b0:	b	16e78 <ReadInt8Data+0x1604>
   166b4:	sub	r0, r8, #256	; 0x100
   166b8:	add	r1, sl, #256	; 0x100
   166bc:	add	r4, sp, #24
   166c0:	mov	r5, #0
   166c4:	str	r0, [sp, #16]
   166c8:	mov	r0, #0
   166cc:	mov	r9, r1
   166d0:	ldr	r3, [r6]
   166d4:	ldr	r1, [sp, #20]
   166d8:	mov	r7, r0
   166dc:	mov	r0, r4
   166e0:	mov	r2, #256	; 0x100
   166e4:	bl	18b8 <fread@plt>
   166e8:	mov	r1, r4
   166ec:	mov	r2, #0
   166f0:	vld1.16	{d16-d17}, [r1]!
   166f4:	add	r3, sl, r2
   166f8:	add	r2, r2, #8
   166fc:	cmp	r2, #256	; 0x100
   16700:	vmovn.i16	d16, q8
   16704:	vst1.8	{d16}, [r3]
   16708:	bne	166f0 <ReadInt8Data+0xe7c>
   1670c:	ldr	r2, [sp, #16]
   16710:	add	r5, r0, r5
   16714:	add	r0, r7, #256	; 0x100
   16718:	add	sl, sl, #256	; 0x100
   1671c:	add	r1, r9, #256	; 0x100
   16720:	cmp	r0, r2
   16724:	blt	166cc <ReadInt8Data+0xe58>
   16728:	cmp	r0, r8
   1672c:	bge	1716c <ReadInt8Data+0x18f8>
   16730:	mov	r1, r6
   16734:	sub	r6, r8, r0
   16738:	add	r4, sp, #24
   1673c:	ldr	r3, [r1]
   16740:	ldr	r1, [sp, #20]
   16744:	mov	r0, r4
   16748:	mov	r2, r6
   1674c:	bl	18b8 <fread@plt>
   16750:	add	r5, r0, r5
   16754:	cmp	r6, #1
   16758:	blt	1716c <ReadInt8Data+0x18f8>
   1675c:	mov	r0, #0
   16760:	cmp	r6, #8
   16764:	bcc	16798 <ReadInt8Data+0xf24>
   16768:	ldr	r0, [sp, #16]
   1676c:	mov	r2, r9
   16770:	sub	r0, r0, r7
   16774:	bic	r1, r0, #7
   16778:	bic	r0, r6, #7
   1677c:	vld1.16	{d16-d17}, [r4]!
   16780:	subs	r1, r1, #8
   16784:	vmovn.i16	d16, q8
   16788:	vst1.8	{d16}, [r2]!
   1678c:	bne	1677c <ReadInt8Data+0xf08>
   16790:	cmp	r6, r0
   16794:	beq	1716c <ReadInt8Data+0x18f8>
   16798:	ldr	r3, [sp, #16]
   1679c:	add	r2, sp, #24
   167a0:	add	r1, r9, r0
   167a4:	add	r2, r2, r0, lsl #1
   167a8:	sub	r3, r3, r7
   167ac:	sub	r0, r3, r0
   167b0:	ldrb	r3, [r2], #2
   167b4:	subs	r0, r0, #1
   167b8:	strb	r3, [r1], #1
   167bc:	bne	167b0 <ReadInt8Data+0xf3c>
   167c0:	b	1716c <ReadInt8Data+0x18f8>
   167c4:	sub	r0, r8, #256	; 0x100
   167c8:	add	r1, sl, #256	; 0x100
   167cc:	add	r4, sp, #24
   167d0:	mov	r5, #0
   167d4:	str	r0, [sp, #16]
   167d8:	mov	r0, #0
   167dc:	mov	r9, r1
   167e0:	ldr	r3, [r6]
   167e4:	ldr	r1, [sp, #20]
   167e8:	mov	r7, r0
   167ec:	mov	r0, r4
   167f0:	mov	r2, #256	; 0x100
   167f4:	bl	18b8 <fread@plt>
   167f8:	mov	r1, r4
   167fc:	mov	r2, #0
   16800:	vld1.16	{d16-d17}, [r1]!
   16804:	add	r3, sl, r2
   16808:	add	r2, r2, #8
   1680c:	cmp	r2, #256	; 0x100
   16810:	vmovn.i16	d16, q8
   16814:	vst1.8	{d16}, [r3]
   16818:	bne	16800 <ReadInt8Data+0xf8c>
   1681c:	ldr	r2, [sp, #16]
   16820:	add	r5, r0, r5
   16824:	add	r0, r7, #256	; 0x100
   16828:	add	sl, sl, #256	; 0x100
   1682c:	add	r1, r9, #256	; 0x100
   16830:	cmp	r0, r2
   16834:	blt	167dc <ReadInt8Data+0xf68>
   16838:	cmp	r0, r8
   1683c:	bge	1716c <ReadInt8Data+0x18f8>
   16840:	mov	r1, r6
   16844:	sub	r6, r8, r0
   16848:	add	r4, sp, #24
   1684c:	ldr	r3, [r1]
   16850:	ldr	r1, [sp, #20]
   16854:	mov	r0, r4
   16858:	mov	r2, r6
   1685c:	bl	18b8 <fread@plt>
   16860:	add	r5, r0, r5
   16864:	cmp	r6, #1
   16868:	blt	1716c <ReadInt8Data+0x18f8>
   1686c:	mov	r0, #0
   16870:	cmp	r6, #8
   16874:	bcc	168a8 <ReadInt8Data+0x1034>
   16878:	ldr	r0, [sp, #16]
   1687c:	mov	r2, r9
   16880:	sub	r0, r0, r7
   16884:	bic	r1, r0, #7
   16888:	bic	r0, r6, #7
   1688c:	vld1.16	{d16-d17}, [r4]!
   16890:	subs	r1, r1, #8
   16894:	vmovn.i16	d16, q8
   16898:	vst1.8	{d16}, [r2]!
   1689c:	bne	1688c <ReadInt8Data+0x1018>
   168a0:	cmp	r6, r0
   168a4:	beq	1716c <ReadInt8Data+0x18f8>
   168a8:	ldr	r3, [sp, #16]
   168ac:	add	r2, sp, #24
   168b0:	add	r1, r9, r0
   168b4:	add	r2, r2, r0, lsl #1
   168b8:	sub	r3, r3, r7
   168bc:	sub	r0, r3, r0
   168c0:	ldrb	r3, [r2], #2
   168c4:	subs	r0, r0, #1
   168c8:	strb	r3, [r1], #1
   168cc:	bne	168c0 <ReadInt8Data+0x104c>
   168d0:	b	1716c <ReadInt8Data+0x18f8>
   168d4:	sub	r0, r8, #256	; 0x100
   168d8:	add	r1, sl, #256	; 0x100
   168dc:	add	r4, sp, #24
   168e0:	mov	r5, #0
   168e4:	str	r0, [sp, #16]
   168e8:	mov	r0, #0
   168ec:	mov	r9, r1
   168f0:	ldr	r3, [r6]
   168f4:	ldr	r1, [sp, #20]
   168f8:	mov	r7, r0
   168fc:	mov	r0, r4
   16900:	mov	r2, #256	; 0x100
   16904:	bl	18b8 <fread@plt>
   16908:	mov	r1, r4
   1690c:	mov	r2, #0
   16910:	vld1.32	{d16-d17}, [r1]!
   16914:	add	r3, sl, r2
   16918:	add	r2, r2, #4
   1691c:	cmp	r2, #256	; 0x100
   16920:	vmovn.i32	d16, q8
   16924:	vuzp.8	d16, d17
   16928:	vst1.32	{d16[0]}, [r3]
   1692c:	bne	16910 <ReadInt8Data+0x109c>
   16930:	ldr	r2, [sp, #16]
   16934:	add	r5, r0, r5
   16938:	add	r0, r7, #256	; 0x100
   1693c:	add	sl, sl, #256	; 0x100
   16940:	add	r1, r9, #256	; 0x100
   16944:	cmp	r0, r2
   16948:	blt	168ec <ReadInt8Data+0x1078>
   1694c:	cmp	r0, r8
   16950:	bge	1716c <ReadInt8Data+0x18f8>
   16954:	mov	r1, r6
   16958:	sub	r6, r8, r0
   1695c:	add	r4, sp, #24
   16960:	ldr	r3, [r1]
   16964:	ldr	r1, [sp, #20]
   16968:	mov	r0, r4
   1696c:	mov	r2, r6
   16970:	bl	18b8 <fread@plt>
   16974:	add	r5, r0, r5
   16978:	cmp	r6, #1
   1697c:	blt	1716c <ReadInt8Data+0x18f8>
   16980:	mov	r0, #0
   16984:	cmp	r6, #4
   16988:	bcc	169c0 <ReadInt8Data+0x114c>
   1698c:	ldr	r0, [sp, #16]
   16990:	mov	r2, r9
   16994:	sub	r0, r0, r7
   16998:	bic	r1, r0, #3
   1699c:	bic	r0, r6, #3
   169a0:	vld1.32	{d16-d17}, [r4]!
   169a4:	subs	r1, r1, #4
   169a8:	vmovn.i32	d16, q8
   169ac:	vuzp.8	d16, d17
   169b0:	vst1.32	{d16[0]}, [r2]!
   169b4:	bne	169a0 <ReadInt8Data+0x112c>
   169b8:	cmp	r6, r0
   169bc:	beq	1716c <ReadInt8Data+0x18f8>
   169c0:	ldr	r3, [sp, #16]
   169c4:	add	r2, sp, #24
   169c8:	add	r1, r9, r0
   169cc:	add	r2, r2, r0, lsl #2
   169d0:	sub	r3, r3, r7
   169d4:	sub	r0, r3, r0
   169d8:	ldr	r3, [r2], #4
   169dc:	subs	r0, r0, #1
   169e0:	strb	r3, [r1], #1
   169e4:	bne	169d8 <ReadInt8Data+0x1164>
   169e8:	b	1716c <ReadInt8Data+0x18f8>
   169ec:	sub	r0, r8, #256	; 0x100
   169f0:	add	r1, sl, #256	; 0x100
   169f4:	add	r4, sp, #24
   169f8:	mov	r5, #0
   169fc:	str	r0, [sp, #16]
   16a00:	mov	r0, #0
   16a04:	mov	r9, r1
   16a08:	ldr	r3, [r6]
   16a0c:	ldr	r1, [sp, #20]
   16a10:	mov	r7, r0
   16a14:	mov	r0, r4
   16a18:	mov	r2, #256	; 0x100
   16a1c:	bl	18b8 <fread@plt>
   16a20:	mov	r1, r4
   16a24:	mov	r2, #0
   16a28:	vld1.32	{d16-d17}, [r1]!
   16a2c:	add	r3, sl, r2
   16a30:	add	r2, r2, #4
   16a34:	cmp	r2, #256	; 0x100
   16a38:	vmovn.i32	d16, q8
   16a3c:	vuzp.8	d16, d17
   16a40:	vst1.32	{d16[0]}, [r3]
   16a44:	bne	16a28 <ReadInt8Data+0x11b4>
   16a48:	ldr	r2, [sp, #16]
   16a4c:	add	r5, r0, r5
   16a50:	add	r0, r7, #256	; 0x100
   16a54:	add	sl, sl, #256	; 0x100
   16a58:	add	r1, r9, #256	; 0x100
   16a5c:	cmp	r0, r2
   16a60:	blt	16a04 <ReadInt8Data+0x1190>
   16a64:	cmp	r0, r8
   16a68:	bge	1716c <ReadInt8Data+0x18f8>
   16a6c:	mov	r1, r6
   16a70:	sub	r6, r8, r0
   16a74:	add	r4, sp, #24
   16a78:	ldr	r3, [r1]
   16a7c:	ldr	r1, [sp, #20]
   16a80:	mov	r0, r4
   16a84:	mov	r2, r6
   16a88:	bl	18b8 <fread@plt>
   16a8c:	add	r5, r0, r5
   16a90:	cmp	r6, #1
   16a94:	blt	1716c <ReadInt8Data+0x18f8>
   16a98:	mov	r0, #0
   16a9c:	cmp	r6, #4
   16aa0:	bcc	16ad8 <ReadInt8Data+0x1264>
   16aa4:	ldr	r0, [sp, #16]
   16aa8:	mov	r2, r9
   16aac:	sub	r0, r0, r7
   16ab0:	bic	r1, r0, #3
   16ab4:	bic	r0, r6, #3
   16ab8:	vld1.32	{d16-d17}, [r4]!
   16abc:	subs	r1, r1, #4
   16ac0:	vmovn.i32	d16, q8
   16ac4:	vuzp.8	d16, d17
   16ac8:	vst1.32	{d16[0]}, [r2]!
   16acc:	bne	16ab8 <ReadInt8Data+0x1244>
   16ad0:	cmp	r6, r0
   16ad4:	beq	1716c <ReadInt8Data+0x18f8>
   16ad8:	ldr	r3, [sp, #16]
   16adc:	add	r2, sp, #24
   16ae0:	add	r1, r9, r0
   16ae4:	add	r2, r2, r0, lsl #2
   16ae8:	sub	r3, r3, r7
   16aec:	sub	r0, r3, r0
   16af0:	ldr	r3, [r2], #4
   16af4:	subs	r0, r0, #1
   16af8:	strb	r3, [r1], #1
   16afc:	bne	16af0 <ReadInt8Data+0x127c>
   16b00:	b	1716c <ReadInt8Data+0x18f8>
   16b04:	sub	r0, r8, #256	; 0x100
   16b08:	add	r1, sl, #256	; 0x100
   16b0c:	add	r4, sp, #24
   16b10:	mov	r5, #0
   16b14:	str	r0, [sp, #16]
   16b18:	mov	r0, #0
   16b1c:	mov	r9, r1
   16b20:	ldr	r3, [r6]
   16b24:	ldr	r1, [sp, #20]
   16b28:	mov	r7, r0
   16b2c:	mov	r0, r4
   16b30:	mov	r2, #256	; 0x100
   16b34:	bl	18b8 <fread@plt>
   16b38:	mov	r1, r4
   16b3c:	mov	r2, #0
   16b40:	vld1.32	{d16-d17}, [r1]!
   16b44:	add	r3, sl, r2
   16b48:	add	r2, r2, #4
   16b4c:	cmp	r2, #256	; 0x100
   16b50:	vcvt.s32.f32	q8, q8
   16b54:	vmovn.i32	d16, q8
   16b58:	vuzp.8	d16, d17
   16b5c:	vst1.32	{d16[0]}, [r3]
   16b60:	bne	16b40 <ReadInt8Data+0x12cc>
   16b64:	ldr	r2, [sp, #16]
   16b68:	add	r5, r0, r5
   16b6c:	add	r0, r7, #256	; 0x100
   16b70:	add	sl, sl, #256	; 0x100
   16b74:	add	r1, r9, #256	; 0x100
   16b78:	cmp	r0, r2
   16b7c:	blt	16b1c <ReadInt8Data+0x12a8>
   16b80:	cmp	r0, r8
   16b84:	bge	1716c <ReadInt8Data+0x18f8>
   16b88:	mov	r1, r6
   16b8c:	sub	r6, r8, r0
   16b90:	add	r4, sp, #24
   16b94:	ldr	r3, [r1]
   16b98:	ldr	r1, [sp, #20]
   16b9c:	mov	r0, r4
   16ba0:	mov	r2, r6
   16ba4:	bl	18b8 <fread@plt>
   16ba8:	add	r5, r0, r5
   16bac:	cmp	r6, #1
   16bb0:	blt	1716c <ReadInt8Data+0x18f8>
   16bb4:	mov	r0, #0
   16bb8:	cmp	r6, #4
   16bbc:	bcc	16bf8 <ReadInt8Data+0x1384>
   16bc0:	ldr	r0, [sp, #16]
   16bc4:	mov	r2, r9
   16bc8:	sub	r0, r0, r7
   16bcc:	bic	r1, r0, #3
   16bd0:	bic	r0, r6, #3
   16bd4:	vld1.32	{d16-d17}, [r4]!
   16bd8:	subs	r1, r1, #4
   16bdc:	vcvt.s32.f32	q8, q8
   16be0:	vmovn.i32	d16, q8
   16be4:	vuzp.8	d16, d17
   16be8:	vst1.32	{d16[0]}, [r2]!
   16bec:	bne	16bd4 <ReadInt8Data+0x1360>
   16bf0:	cmp	r6, r0
   16bf4:	beq	1716c <ReadInt8Data+0x18f8>
   16bf8:	ldr	r3, [sp, #16]
   16bfc:	add	r2, sp, #24
   16c00:	add	r1, r9, r0
   16c04:	add	r2, r2, r0, lsl #2
   16c08:	sub	r3, r3, r7
   16c0c:	sub	r0, r3, r0
   16c10:	vldr	s0, [r2]
   16c14:	subs	r0, r0, #1
   16c18:	add	r2, r2, #4
   16c1c:	vcvt.s32.f32	s0, s0
   16c20:	vmov	r3, s0
   16c24:	strb	r3, [r1], #1
   16c28:	bne	16c10 <ReadInt8Data+0x139c>
   16c2c:	b	1716c <ReadInt8Data+0x18f8>
   16c30:	ldr	r5, [sp, #20]
   16c34:	str	r6, [sp, #16]
   16c38:	sub	r0, r8, #256	; 0x100
   16c3c:	str	r8, [sp, #8]
   16c40:	mov	r8, #0
   16c44:	add	r9, sp, #24
   16c48:	mov	r4, sl
   16c4c:	mov	r6, #0
   16c50:	str	r0, [sp, #12]
   16c54:	ldr	r0, [sp, #16]
   16c58:	mov	r1, r5
   16c5c:	mov	r2, #256	; 0x100
   16c60:	mov	r7, r8
   16c64:	ldr	r3, [r0]
   16c68:	mov	r0, r9
   16c6c:	bl	18b8 <fread@plt>
   16c70:	mov	r1, r9
   16c74:	mov	r2, #0
   16c78:	vldr	d16, [r1]
   16c7c:	add	r1, r1, #8
   16c80:	vcvt.s32.f64	s0, d16
   16c84:	vmov	r3, s0
   16c88:	strb	r3, [r4, r2]
   16c8c:	add	r2, r2, #1
   16c90:	cmp	r2, #256	; 0x100
   16c94:	bne	16c78 <ReadInt8Data+0x1404>
   16c98:	add	r6, r0, r6
   16c9c:	ldr	r0, [sp, #12]
   16ca0:	add	r8, r7, #256	; 0x100
   16ca4:	add	r4, r4, #256	; 0x100
   16ca8:	cmp	r8, r0
   16cac:	blt	16c54 <ReadInt8Data+0x13e0>
   16cb0:	ldr	r0, [sp, #8]
   16cb4:	cmp	r8, r0
   16cb8:	bge	16d10 <ReadInt8Data+0x149c>
   16cbc:	sub	r9, r0, r8
   16cc0:	ldr	r0, [sp, #16]
   16cc4:	add	r4, sp, #24
   16cc8:	mov	r1, r5
   16ccc:	mov	r2, r9
   16cd0:	ldr	r3, [r0]
   16cd4:	mov	r0, r4
   16cd8:	bl	18b8 <fread@plt>
   16cdc:	add	r6, r0, r6
   16ce0:	cmp	r9, #1
   16ce4:	blt	16d10 <ReadInt8Data+0x149c>
   16ce8:	ldr	r0, [sp, #12]
   16cec:	sub	r0, r0, r7
   16cf0:	vldr	d16, [r4]
   16cf4:	subs	r0, r0, #1
   16cf8:	add	r4, r4, #8
   16cfc:	vcvt.s32.f64	s0, d16
   16d00:	vmov	r1, s0
   16d04:	strb	r1, [sl, r8]
   16d08:	add	sl, sl, #1
   16d0c:	bne	16cf0 <ReadInt8Data+0x147c>
   16d10:	mov	r5, r6
   16d14:	b	1716c <ReadInt8Data+0x18f8>
   16d18:	sub	r0, r8, #256	; 0x100
   16d1c:	str	r8, [sp, #8]
   16d20:	add	r1, sl, #256	; 0x100
   16d24:	mov	r5, sl
   16d28:	mov	r8, #0
   16d2c:	str	r4, [sp, #4]
   16d30:	str	r0, [sp, #16]
   16d34:	mov	r0, #0
   16d38:	mov	r9, r1
   16d3c:	ldr	r3, [r6]
   16d40:	ldr	r1, [sp, #20]
   16d44:	mov	r4, r6
   16d48:	add	r6, sp, #24
   16d4c:	mov	r7, r0
   16d50:	mov	r2, #256	; 0x100
   16d54:	mov	r0, r6
   16d58:	bl	18b8 <fread@plt>
   16d5c:	mov	r1, r6
   16d60:	mov	r2, #0
   16d64:	vld1.64	{d16-d17}, [r1]!
   16d68:	mov	r6, r5
   16d6c:	vmovn.i64	d16, q8
   16d70:	vmov.32	r3, d16[0]
   16d74:	strb	r3, [r6, r2]!
   16d78:	add	r2, r2, #2
   16d7c:	vmov.32	r3, d16[1]
   16d80:	cmp	r2, #256	; 0x100
   16d84:	strb	r3, [r6, #1]
   16d88:	bne	16d64 <ReadInt8Data+0x14f0>
   16d8c:	ldr	r2, [sp, #16]
   16d90:	add	r8, r0, r8
   16d94:	add	r0, r7, #256	; 0x100
   16d98:	add	r5, r5, #256	; 0x100
   16d9c:	add	r1, r9, #256	; 0x100
   16da0:	mov	r6, r4
   16da4:	cmp	r0, r2
   16da8:	blt	16d38 <ReadInt8Data+0x14c4>
   16dac:	ldr	r1, [sp, #8]
   16db0:	cmp	r0, r1
   16db4:	bge	16e68 <ReadInt8Data+0x15f4>
   16db8:	sub	r5, r1, r0
   16dbc:	ldr	r3, [r6]
   16dc0:	ldr	r1, [sp, #20]
   16dc4:	add	r4, sp, #24
   16dc8:	mov	r0, r4
   16dcc:	mov	r2, r5
   16dd0:	bl	18b8 <fread@plt>
   16dd4:	mov	ip, r5
   16dd8:	mov	r5, r8
   16ddc:	add	r5, r0, r8
   16de0:	cmp	ip, #1
   16de4:	blt	16e74 <ReadInt8Data+0x1600>
   16de8:	ldr	r8, [sp, #8]
   16dec:	mov	r0, #0
   16df0:	beq	16e34 <ReadInt8Data+0x15c0>
   16df4:	ldr	r0, [sp, #16]
   16df8:	mov	r2, r9
   16dfc:	sub	r0, r0, r7
   16e00:	bic	r1, r0, #1
   16e04:	bic	r0, ip, #1
   16e08:	vld1.64	{d16-d17}, [r4]!
   16e0c:	subs	r1, r1, #2
   16e10:	vmovn.i64	d16, q8
   16e14:	vmov.32	r3, d16[1]
   16e18:	strb	r3, [r2, #1]
   16e1c:	vmov.32	r3, d16[0]
   16e20:	strb	r3, [r2]
   16e24:	add	r2, r2, #2
   16e28:	bne	16e08 <ReadInt8Data+0x1594>
   16e2c:	cmp	ip, r0
   16e30:	beq	16e78 <ReadInt8Data+0x1604>
   16e34:	ldr	r3, [sp, #16]
   16e38:	add	r2, sp, #24
   16e3c:	add	r1, r9, r0
   16e40:	add	r2, r2, r0, lsl #3
   16e44:	sub	r3, r3, r7
   16e48:	sub	r0, r3, r0
   16e4c:	ldrb	r3, [r2], #8
   16e50:	subs	r0, r0, #1
   16e54:	strb	r3, [r1], #1
   16e58:	bne	16e4c <ReadInt8Data+0x15d8>
   16e5c:	b	16e78 <ReadInt8Data+0x1604>
   16e60:	ldr	r6, [sp, #16]
   16e64:	b	16e78 <ReadInt8Data+0x1604>
   16e68:	mov	r5, r8
   16e6c:	mov	r8, r1
   16e70:	b	16e78 <ReadInt8Data+0x1604>
   16e74:	ldr	r8, [sp, #8]
   16e78:	ldr	r4, [sp, #4]
   16e7c:	cmp	r4, #13
   16e80:	bne	1716c <ReadInt8Data+0x18f8>
   16e84:	ldr	r0, [r6, #20]
   16e88:	cmp	r0, #0
   16e8c:	beq	16ed8 <ReadInt8Data+0x1664>
   16e90:	cmp	r8, #256	; 0x100
   16e94:	bgt	16f68 <ReadInt8Data+0x16f4>
   16e98:	ldr	r3, [r6]
   16e9c:	ldr	r1, [sp, #20]
   16ea0:	add	r4, sp, #24
   16ea4:	mov	r2, r8
   16ea8:	mov	r0, r4
   16eac:	bl	18b8 <fread@plt>
   16eb0:	add	r5, r0, r5
   16eb4:	cmp	r8, #1
   16eb8:	blt	1716c <ReadInt8Data+0x18f8>
   16ebc:	mov	r0, r4
   16ec0:	bl	1bd4 <Mat_uint64Swap>
   16ec4:	strb	r0, [sl], #1
   16ec8:	subs	r8, r8, #1
   16ecc:	add	r4, r4, #8
   16ed0:	bne	16ebc <ReadInt8Data+0x1648>
   16ed4:	b	1716c <ReadInt8Data+0x18f8>
   16ed8:	cmp	r8, #256	; 0x100
   16edc:	bgt	17044 <ReadInt8Data+0x17d0>
   16ee0:	ldr	r3, [r6]
   16ee4:	ldr	r1, [sp, #20]
   16ee8:	add	r4, sp, #24
   16eec:	mov	r2, r8
   16ef0:	mov	r0, r4
   16ef4:	bl	18b8 <fread@plt>
   16ef8:	add	r5, r0, r5
   16efc:	cmp	r8, #1
   16f00:	blt	1716c <ReadInt8Data+0x18f8>
   16f04:	mov	r0, #0
   16f08:	beq	16f44 <ReadInt8Data+0x16d0>
   16f0c:	bic	r0, r8, #1
   16f10:	mov	r2, sl
   16f14:	mov	r1, r0
   16f18:	vld1.64	{d16-d17}, [r4]!
   16f1c:	subs	r1, r1, #2
   16f20:	vmovn.i64	d16, q8
   16f24:	vmov.32	r3, d16[1]
   16f28:	strb	r3, [r2, #1]
   16f2c:	vmov.32	r3, d16[0]
   16f30:	strb	r3, [r2]
   16f34:	add	r2, r2, #2
   16f38:	bne	16f18 <ReadInt8Data+0x16a4>
   16f3c:	cmp	r0, r8
   16f40:	beq	1716c <ReadInt8Data+0x18f8>
   16f44:	add	r3, sp, #24
   16f48:	sub	r1, r8, r0
   16f4c:	add	r2, sl, r0
   16f50:	add	r0, r3, r0, lsl #3
   16f54:	ldrb	r3, [r0], #8
   16f58:	subs	r1, r1, #1
   16f5c:	strb	r3, [r2], #1
   16f60:	bne	16f54 <ReadInt8Data+0x16e0>
   16f64:	b	1716c <ReadInt8Data+0x18f8>
   16f68:	str	r6, [sp, #16]
   16f6c:	sub	r0, r8, #256	; 0x100
   16f70:	mov	r7, #0
   16f74:	mov	r6, sl
   16f78:	str	r8, [sp, #8]
   16f7c:	str	r0, [sp, #12]
   16f80:	ldr	r0, [sp, #16]
   16f84:	ldr	r1, [sp, #20]
   16f88:	add	r4, sp, #24
   16f8c:	mov	r2, #256	; 0x100
   16f90:	mov	r8, r5
   16f94:	mov	r9, r7
   16f98:	ldr	r3, [r0]
   16f9c:	mov	r0, r4
   16fa0:	bl	18b8 <fread@plt>
   16fa4:	mov	r7, r0
   16fa8:	mov	r5, #0
   16fac:	mov	r0, r4
   16fb0:	bl	1bd4 <Mat_uint64Swap>
   16fb4:	strb	r0, [r6, r5]
   16fb8:	add	r5, r5, #1
   16fbc:	add	r4, r4, #8
   16fc0:	cmp	r5, #256	; 0x100
   16fc4:	bne	16fac <ReadInt8Data+0x1738>
   16fc8:	ldr	r0, [sp, #12]
   16fcc:	mov	r5, r8
   16fd0:	add	r6, r6, #256	; 0x100
   16fd4:	add	r5, r7, r8
   16fd8:	add	r7, r9, #256	; 0x100
   16fdc:	cmp	r7, r0
   16fe0:	blt	16f80 <ReadInt8Data+0x170c>
   16fe4:	ldr	r0, [sp, #8]
   16fe8:	cmp	r7, r0
   16fec:	bge	1716c <ReadInt8Data+0x18f8>
   16ff0:	sub	r8, r0, r7
   16ff4:	ldr	r0, [sp, #16]
   16ff8:	ldr	r1, [sp, #20]
   16ffc:	add	r4, sp, #24
   17000:	mov	r2, r8
   17004:	ldr	r3, [r0]
   17008:	mov	r0, r4
   1700c:	bl	18b8 <fread@plt>
   17010:	add	r5, r0, r5
   17014:	cmp	r8, #1
   17018:	blt	1716c <ReadInt8Data+0x18f8>
   1701c:	ldr	r0, [sp, #12]
   17020:	sub	r6, r0, r9
   17024:	mov	r0, r4
   17028:	bl	1bd4 <Mat_uint64Swap>
   1702c:	strb	r0, [sl, r7]
   17030:	add	sl, sl, #1
   17034:	subs	r6, r6, #1
   17038:	add	r4, r4, #8
   1703c:	bne	17024 <ReadInt8Data+0x17b0>
   17040:	b	1716c <ReadInt8Data+0x18f8>
   17044:	sub	r0, r8, #256	; 0x100
   17048:	add	r1, sl, #256	; 0x100
   1704c:	str	r0, [sp, #16]
   17050:	mov	r0, #0
   17054:	mov	r9, r1
   17058:	ldr	r3, [r6]
   1705c:	ldr	r1, [sp, #20]
   17060:	mov	r4, r6
   17064:	add	r6, sp, #24
   17068:	mov	r7, r0
   1706c:	mov	r2, #256	; 0x100
   17070:	mov	r0, r6
   17074:	bl	18b8 <fread@plt>
   17078:	mov	r1, r6
   1707c:	mov	r2, #0
   17080:	vld1.64	{d16-d17}, [r1]!
   17084:	mov	r6, sl
   17088:	vmovn.i64	d16, q8
   1708c:	vmov.32	r3, d16[0]
   17090:	strb	r3, [r6, r2]!
   17094:	add	r2, r2, #2
   17098:	vmov.32	r3, d16[1]
   1709c:	cmp	r2, #256	; 0x100
   170a0:	strb	r3, [r6, #1]
   170a4:	bne	17080 <ReadInt8Data+0x180c>
   170a8:	ldr	r2, [sp, #16]
   170ac:	add	r5, r0, r5
   170b0:	add	r0, r7, #256	; 0x100
   170b4:	add	sl, sl, #256	; 0x100
   170b8:	add	r1, r9, #256	; 0x100
   170bc:	mov	r6, r4
   170c0:	cmp	r0, r2
   170c4:	blt	17054 <ReadInt8Data+0x17e0>
   170c8:	cmp	r0, r8
   170cc:	bge	1716c <ReadInt8Data+0x18f8>
   170d0:	mov	r1, r6
   170d4:	sub	r6, r8, r0
   170d8:	add	r4, sp, #24
   170dc:	ldr	r3, [r1]
   170e0:	ldr	r1, [sp, #20]
   170e4:	mov	r0, r4
   170e8:	mov	r2, r6
   170ec:	bl	18b8 <fread@plt>
   170f0:	add	r5, r0, r5
   170f4:	cmp	r6, #1
   170f8:	blt	1716c <ReadInt8Data+0x18f8>
   170fc:	mov	r0, #0
   17100:	beq	17144 <ReadInt8Data+0x18d0>
   17104:	ldr	r0, [sp, #16]
   17108:	mov	r2, r9
   1710c:	sub	r0, r0, r7
   17110:	bic	r1, r0, #1
   17114:	bic	r0, r6, #1
   17118:	vld1.64	{d16-d17}, [r4]!
   1711c:	subs	r1, r1, #2
   17120:	vmovn.i64	d16, q8
   17124:	vmov.32	r3, d16[1]
   17128:	strb	r3, [r2, #1]
   1712c:	vmov.32	r3, d16[0]
   17130:	strb	r3, [r2]
   17134:	add	r2, r2, #2
   17138:	bne	17118 <ReadInt8Data+0x18a4>
   1713c:	cmp	r6, r0
   17140:	beq	1716c <ReadInt8Data+0x18f8>
   17144:	ldr	r3, [sp, #16]
   17148:	add	r2, sp, #24
   1714c:	add	r1, r9, r0
   17150:	add	r2, r2, r0, lsl #3
   17154:	sub	r3, r3, r7
   17158:	sub	r0, r3, r0
   1715c:	ldrb	r3, [r2], #8
   17160:	subs	r0, r0, #1
   17164:	strb	r3, [r1], #1
   17168:	bne	1715c <ReadInt8Data+0x18e8>
   1716c:	ldr	r0, [sp, #20]
   17170:	mul	r0, r5, r0
   17174:	sub	sp, fp, #28
   17178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001717c <ReadCompressedInt8Data>:
   1717c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17180:	add	fp, sp, #28
   17184:	sub	sp, sp, #12
   17188:	mov	r7, r0
   1718c:	mov	r0, #0
   17190:	cmp	r1, #0
   17194:	beq	171a8 <ReadCompressedInt8Data+0x2c>
   17198:	cmp	r7, #0
   1719c:	movne	r5, r2
   171a0:	cmpne	r2, #0
   171a4:	bne	171b0 <ReadCompressedInt8Data+0x34>
   171a8:	sub	sp, fp, #28
   171ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171b0:	ldr	sl, [fp, #8]
   171b4:	mov	r0, r3
   171b8:	mov	r4, r3
   171bc:	mov	r6, r1
   171c0:	bl	1924 <Mat_SizeOf@plt>
   171c4:	mov	r9, r0
   171c8:	sub	r0, r4, #1
   171cc:	cmp	r0, #12
   171d0:	bhi	176a0 <ReadCompressedInt8Data+0x524>
   171d4:	add	r1, pc, #4
   171d8:	ldr	r0, [r1, r0, lsl #2]
   171dc:	add	pc, r1, r0
   171e0:	.word	0x00000034
   171e4:	.word	0x0000006c
   171e8:	.word	0x000000a4
   171ec:	.word	0x000000ec
   171f0:	.word	0x00000134
   171f4:	.word	0x0000017c
   171f8:	.word	0x000001c4
   171fc:	.word	0x000004c0
   17200:	.word	0x00000214
   17204:	.word	0x000004c0
   17208:	.word	0x000004c0
   1720c:	.word	0x00000264
   17210:	.word	0x000002ac
   17214:	cmp	sl, #1
   17218:	blt	176a0 <ReadCompressedInt8Data+0x524>
   1721c:	mov	r8, sp
   17220:	mov	r4, sl
   17224:	mov	r0, r7
   17228:	mov	r1, r6
   1722c:	mov	r2, r8
   17230:	mov	r3, r9
   17234:	bl	32b8 <InflateData>
   17238:	ldrb	r0, [sp]
   1723c:	subs	r4, r4, #1
   17240:	strb	r0, [r5], #1
   17244:	bne	17224 <ReadCompressedInt8Data+0xa8>
   17248:	b	176a0 <ReadCompressedInt8Data+0x524>
   1724c:	cmp	sl, #1
   17250:	blt	176a0 <ReadCompressedInt8Data+0x524>
   17254:	mov	r8, sp
   17258:	mov	r4, sl
   1725c:	mov	r0, r7
   17260:	mov	r1, r6
   17264:	mov	r2, r8
   17268:	mov	r3, r9
   1726c:	bl	32b8 <InflateData>
   17270:	ldrb	r0, [sp]
   17274:	subs	r4, r4, #1
   17278:	strb	r0, [r5], #1
   1727c:	bne	1725c <ReadCompressedInt8Data+0xe0>
   17280:	b	176a0 <ReadCompressedInt8Data+0x524>
   17284:	ldr	r0, [r7, #20]
   17288:	cmp	r0, #0
   1728c:	beq	174d4 <ReadCompressedInt8Data+0x358>
   17290:	cmp	sl, #1
   17294:	blt	176a0 <ReadCompressedInt8Data+0x524>
   17298:	mov	r8, sp
   1729c:	mov	r4, sl
   172a0:	mov	r0, r7
   172a4:	mov	r1, r6
   172a8:	mov	r2, r8
   172ac:	mov	r3, r9
   172b0:	bl	32b8 <InflateData>
   172b4:	mov	r0, r8
   172b8:	bl	1c18 <Mat_int16Swap>
   172bc:	strb	r0, [r5], #1
   172c0:	subs	r4, r4, #1
   172c4:	bne	172a0 <ReadCompressedInt8Data+0x124>
   172c8:	b	176a0 <ReadCompressedInt8Data+0x524>
   172cc:	ldr	r0, [r7, #20]
   172d0:	cmp	r0, #0
   172d4:	beq	1750c <ReadCompressedInt8Data+0x390>
   172d8:	cmp	sl, #1
   172dc:	blt	176a0 <ReadCompressedInt8Data+0x524>
   172e0:	mov	r8, sp
   172e4:	mov	r4, sl
   172e8:	mov	r0, r7
   172ec:	mov	r1, r6
   172f0:	mov	r2, r8
   172f4:	mov	r3, r9
   172f8:	bl	32b8 <InflateData>
   172fc:	mov	r0, r8
   17300:	bl	1c2c <Mat_uint16Swap>
   17304:	strb	r0, [r5], #1
   17308:	subs	r4, r4, #1
   1730c:	bne	172e8 <ReadCompressedInt8Data+0x16c>
   17310:	b	176a0 <ReadCompressedInt8Data+0x524>
   17314:	ldr	r0, [r7, #20]
   17318:	cmp	r0, #0
   1731c:	beq	17544 <ReadCompressedInt8Data+0x3c8>
   17320:	cmp	sl, #1
   17324:	blt	176a0 <ReadCompressedInt8Data+0x524>
   17328:	mov	r8, sp
   1732c:	mov	r4, sl
   17330:	mov	r0, r7
   17334:	mov	r1, r6
   17338:	mov	r2, r8
   1733c:	mov	r3, r9
   17340:	bl	32b8 <InflateData>
   17344:	mov	r0, r8
   17348:	bl	1bf0 <Mat_int32Swap>
   1734c:	strb	r0, [r5], #1
   17350:	subs	r4, r4, #1
   17354:	bne	17330 <ReadCompressedInt8Data+0x1b4>
   17358:	b	176a0 <ReadCompressedInt8Data+0x524>
   1735c:	ldr	r0, [r7, #20]
   17360:	cmp	r0, #0
   17364:	beq	1757c <ReadCompressedInt8Data+0x400>
   17368:	cmp	sl, #1
   1736c:	blt	176a0 <ReadCompressedInt8Data+0x524>
   17370:	mov	r8, sp
   17374:	mov	r4, sl
   17378:	mov	r0, r7
   1737c:	mov	r1, r6
   17380:	mov	r2, r8
   17384:	mov	r3, r9
   17388:	bl	32b8 <InflateData>
   1738c:	mov	r0, r8
   17390:	bl	1c04 <Mat_uint32Swap>
   17394:	strb	r0, [r5], #1
   17398:	subs	r4, r4, #1
   1739c:	bne	17378 <ReadCompressedInt8Data+0x1fc>
   173a0:	b	176a0 <ReadCompressedInt8Data+0x524>
   173a4:	ldr	r0, [r7, #20]
   173a8:	cmp	r0, #0
   173ac:	beq	175b4 <ReadCompressedInt8Data+0x438>
   173b0:	cmp	sl, #1
   173b4:	blt	176a0 <ReadCompressedInt8Data+0x524>
   173b8:	mov	r8, sp
   173bc:	mov	r4, sl
   173c0:	mov	r0, r7
   173c4:	mov	r1, r6
   173c8:	mov	r2, r8
   173cc:	mov	r3, r9
   173d0:	bl	32b8 <InflateData>
   173d4:	mov	r0, r8
   173d8:	bl	1c44 <Mat_floatSwap>
   173dc:	vcvt.s32.f32	s0, s0
   173e0:	subs	r4, r4, #1
   173e4:	vmov	r0, s0
   173e8:	strb	r0, [r5], #1
   173ec:	bne	173c0 <ReadCompressedInt8Data+0x244>
   173f0:	b	176a0 <ReadCompressedInt8Data+0x524>
   173f4:	ldr	r0, [r7, #20]
   173f8:	cmp	r0, #0
   173fc:	beq	175f4 <ReadCompressedInt8Data+0x478>
   17400:	cmp	sl, #1
   17404:	blt	176a0 <ReadCompressedInt8Data+0x524>
   17408:	mov	r8, sp
   1740c:	mov	r4, sl
   17410:	mov	r0, r7
   17414:	mov	r1, r6
   17418:	mov	r2, r8
   1741c:	mov	r3, r9
   17420:	bl	32b8 <InflateData>
   17424:	mov	r0, r8
   17428:	bl	1c88 <Mat_doubleSwap>
   1742c:	vcvt.s32.f64	s0, d0
   17430:	subs	r4, r4, #1
   17434:	vmov	r0, s0
   17438:	strb	r0, [r5], #1
   1743c:	bne	17410 <ReadCompressedInt8Data+0x294>
   17440:	b	176a0 <ReadCompressedInt8Data+0x524>
   17444:	ldr	r0, [r7, #20]
   17448:	cmp	r0, #0
   1744c:	beq	17634 <ReadCompressedInt8Data+0x4b8>
   17450:	cmp	sl, #1
   17454:	blt	176a0 <ReadCompressedInt8Data+0x524>
   17458:	mov	r8, sp
   1745c:	mov	r4, sl
   17460:	mov	r0, r7
   17464:	mov	r1, r6
   17468:	mov	r2, r8
   1746c:	mov	r3, r9
   17470:	bl	32b8 <InflateData>
   17474:	mov	r0, r8
   17478:	bl	1b84 <Mat_int64Swap>
   1747c:	strb	r0, [r5], #1
   17480:	subs	r4, r4, #1
   17484:	bne	17460 <ReadCompressedInt8Data+0x2e4>
   17488:	b	176a0 <ReadCompressedInt8Data+0x524>
   1748c:	ldr	r0, [r7, #20]
   17490:	cmp	r0, #0
   17494:	beq	1766c <ReadCompressedInt8Data+0x4f0>
   17498:	cmp	sl, #1
   1749c:	blt	176a0 <ReadCompressedInt8Data+0x524>
   174a0:	mov	r8, sp
   174a4:	mov	r4, sl
   174a8:	mov	r0, r7
   174ac:	mov	r1, r6
   174b0:	mov	r2, r8
   174b4:	mov	r3, r9
   174b8:	bl	32b8 <InflateData>
   174bc:	mov	r0, r8
   174c0:	bl	1bd4 <Mat_uint64Swap>
   174c4:	strb	r0, [r5], #1
   174c8:	subs	r4, r4, #1
   174cc:	bne	174a8 <ReadCompressedInt8Data+0x32c>
   174d0:	b	176a0 <ReadCompressedInt8Data+0x524>
   174d4:	cmp	sl, #1
   174d8:	blt	176a0 <ReadCompressedInt8Data+0x524>
   174dc:	mov	r8, sp
   174e0:	mov	r4, sl
   174e4:	mov	r0, r7
   174e8:	mov	r1, r6
   174ec:	mov	r2, r8
   174f0:	mov	r3, r9
   174f4:	bl	32b8 <InflateData>
   174f8:	ldrb	r0, [sp]
   174fc:	subs	r4, r4, #1
   17500:	strb	r0, [r5], #1
   17504:	bne	174e4 <ReadCompressedInt8Data+0x368>
   17508:	b	176a0 <ReadCompressedInt8Data+0x524>
   1750c:	cmp	sl, #1
   17510:	blt	176a0 <ReadCompressedInt8Data+0x524>
   17514:	mov	r8, sp
   17518:	mov	r4, sl
   1751c:	mov	r0, r7
   17520:	mov	r1, r6
   17524:	mov	r2, r8
   17528:	mov	r3, r9
   1752c:	bl	32b8 <InflateData>
   17530:	ldrb	r0, [sp]
   17534:	subs	r4, r4, #1
   17538:	strb	r0, [r5], #1
   1753c:	bne	1751c <ReadCompressedInt8Data+0x3a0>
   17540:	b	176a0 <ReadCompressedInt8Data+0x524>
   17544:	cmp	sl, #1
   17548:	blt	176a0 <ReadCompressedInt8Data+0x524>
   1754c:	mov	r8, sp
   17550:	mov	r4, sl
   17554:	mov	r0, r7
   17558:	mov	r1, r6
   1755c:	mov	r2, r8
   17560:	mov	r3, r9
   17564:	bl	32b8 <InflateData>
   17568:	ldr	r0, [sp]
   1756c:	subs	r4, r4, #1
   17570:	strb	r0, [r5], #1
   17574:	bne	17554 <ReadCompressedInt8Data+0x3d8>
   17578:	b	176a0 <ReadCompressedInt8Data+0x524>
   1757c:	cmp	sl, #1
   17580:	blt	176a0 <ReadCompressedInt8Data+0x524>
   17584:	mov	r8, sp
   17588:	mov	r4, sl
   1758c:	mov	r0, r7
   17590:	mov	r1, r6
   17594:	mov	r2, r8
   17598:	mov	r3, r9
   1759c:	bl	32b8 <InflateData>
   175a0:	ldr	r0, [sp]
   175a4:	subs	r4, r4, #1
   175a8:	strb	r0, [r5], #1
   175ac:	bne	1758c <ReadCompressedInt8Data+0x410>
   175b0:	b	176a0 <ReadCompressedInt8Data+0x524>
   175b4:	cmp	sl, #1
   175b8:	blt	176a0 <ReadCompressedInt8Data+0x524>
   175bc:	mov	r8, sp
   175c0:	mov	r4, sl
   175c4:	mov	r0, r7
   175c8:	mov	r1, r6
   175cc:	mov	r2, r8
   175d0:	mov	r3, r9
   175d4:	bl	32b8 <InflateData>
   175d8:	vldr	s0, [sp]
   175dc:	subs	r4, r4, #1
   175e0:	vcvt.s32.f32	s0, s0
   175e4:	vmov	r0, s0
   175e8:	strb	r0, [r5], #1
   175ec:	bne	175c4 <ReadCompressedInt8Data+0x448>
   175f0:	b	176a0 <ReadCompressedInt8Data+0x524>
   175f4:	cmp	sl, #1
   175f8:	blt	176a0 <ReadCompressedInt8Data+0x524>
   175fc:	mov	r8, sp
   17600:	mov	r4, sl
   17604:	mov	r0, r7
   17608:	mov	r1, r6
   1760c:	mov	r2, r8
   17610:	mov	r3, r9
   17614:	bl	32b8 <InflateData>
   17618:	vldr	d16, [sp]
   1761c:	subs	r4, r4, #1
   17620:	vcvt.s32.f64	s0, d16
   17624:	vmov	r0, s0
   17628:	strb	r0, [r5], #1
   1762c:	bne	17604 <ReadCompressedInt8Data+0x488>
   17630:	b	176a0 <ReadCompressedInt8Data+0x524>
   17634:	cmp	sl, #1
   17638:	blt	176a0 <ReadCompressedInt8Data+0x524>
   1763c:	mov	r8, sp
   17640:	mov	r4, sl
   17644:	mov	r0, r7
   17648:	mov	r1, r6
   1764c:	mov	r2, r8
   17650:	mov	r3, r9
   17654:	bl	32b8 <InflateData>
   17658:	ldrb	r0, [sp]
   1765c:	subs	r4, r4, #1
   17660:	strb	r0, [r5], #1
   17664:	bne	17644 <ReadCompressedInt8Data+0x4c8>
   17668:	b	176a0 <ReadCompressedInt8Data+0x524>
   1766c:	cmp	sl, #1
   17670:	blt	176a0 <ReadCompressedInt8Data+0x524>
   17674:	mov	r8, sp
   17678:	mov	r4, sl
   1767c:	mov	r0, r7
   17680:	mov	r1, r6
   17684:	mov	r2, r8
   17688:	mov	r3, r9
   1768c:	bl	32b8 <InflateData>
   17690:	ldrb	r0, [sp]
   17694:	subs	r4, r4, #1
   17698:	strb	r0, [r5], #1
   1769c:	bne	1767c <ReadCompressedInt8Data+0x500>
   176a0:	mul	r0, r9, sl
   176a4:	sub	sp, fp, #28
   176a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000176ac <ReadUInt8Data>:
   176ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176b0:	add	fp, sp, #28
   176b4:	sub	sp, sp, #28
   176b8:	sub	sp, sp, #2048	; 0x800
   176bc:	mov	r6, r0
   176c0:	mov	r0, #0
   176c4:	cmp	r6, #0
   176c8:	beq	176e0 <ReadUInt8Data+0x34>
   176cc:	cmp	r1, #0
   176d0:	mov	sl, r1
   176d4:	ldrne	r1, [r6]
   176d8:	cmpne	r1, #0
   176dc:	bne	176e8 <ReadUInt8Data+0x3c>
   176e0:	sub	sp, fp, #28
   176e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176e8:	mov	r0, r2
   176ec:	mov	r8, r3
   176f0:	mov	r4, r2
   176f4:	bl	1924 <Mat_SizeOf@plt>
   176f8:	str	r0, [sp, #20]
   176fc:	sub	r0, r4, #1
   17700:	mov	r5, #0
   17704:	cmp	r0, #11
   17708:	bhi	18cb4 <ReadUInt8Data+0x1608>
   1770c:	add	r1, pc, #4
   17710:	ldr	r0, [r1, r0, lsl #2]
   17714:	add	pc, r1, r0
   17718:	.word	0x00000030
   1771c:	.word	0x00000098
   17720:	.word	0x000000d4
   17724:	.word	0x00000128
   17728:	.word	0x0000017c
   1772c:	.word	0x000001d0
   17730:	.word	0x00000224
   17734:	.word	0x0000159c
   17738:	.word	0x00000280
   1773c:	.word	0x0000159c
   17740:	.word	0x0000159c
   17744:	.word	0x000002dc
   17748:	cmp	r8, #256	; 0x100
   1774c:	ble	177b8 <ReadUInt8Data+0x10c>
   17750:	ldr	r5, [sp, #20]
   17754:	sub	r0, r8, #256	; 0x100
   17758:	str	r8, [sp, #8]
   1775c:	mov	r9, r6
   17760:	mov	r7, #0
   17764:	add	r8, sp, #24
   17768:	mov	r6, #0
   1776c:	str	r0, [sp, #16]
   17770:	ldr	r3, [r9]
   17774:	mov	r0, r8
   17778:	mov	r1, r5
   1777c:	mov	r2, #256	; 0x100
   17780:	bl	18b8 <fread@plt>
   17784:	mov	r4, r0
   17788:	add	r0, sl, r7
   1778c:	mov	r1, r8
   17790:	mov	r2, #256	; 0x100
   17794:	bl	181c <memcpy@plt>
   17798:	ldr	r0, [sp, #16]
   1779c:	add	r7, r7, #256	; 0x100
   177a0:	add	r6, r4, r6
   177a4:	cmp	r7, r0
   177a8:	blt	17770 <ReadUInt8Data+0xc4>
   177ac:	b	17ac0 <ReadUInt8Data+0x414>
   177b0:	cmp	r8, #256	; 0x100
   177b4:	bgt	17a64 <ReadUInt8Data+0x3b8>
   177b8:	ldr	r3, [r6]
   177bc:	ldr	r1, [sp, #20]
   177c0:	add	r0, sp, #24
   177c4:	mov	r2, r8
   177c8:	bl	18b8 <fread@plt>
   177cc:	mov	r5, r0
   177d0:	cmp	r8, #1
   177d4:	blt	18fa4 <ReadUInt8Data+0x18f8>
   177d8:	add	r1, sp, #24
   177dc:	mov	r0, sl
   177e0:	mov	r2, r8
   177e4:	bl	181c <memcpy@plt>
   177e8:	b	18fa4 <ReadUInt8Data+0x18f8>
   177ec:	ldr	r0, [r6, #20]
   177f0:	cmp	r0, #0
   177f4:	beq	17b08 <ReadUInt8Data+0x45c>
   177f8:	cmp	r8, #256	; 0x100
   177fc:	bgt	17e94 <ReadUInt8Data+0x7e8>
   17800:	ldr	r3, [r6]
   17804:	ldr	r1, [sp, #20]
   17808:	add	r4, sp, #24
   1780c:	mov	r2, r8
   17810:	mov	r0, r4
   17814:	bl	18b8 <fread@plt>
   17818:	mov	r5, r0
   1781c:	cmp	r8, #1
   17820:	blt	18fa4 <ReadUInt8Data+0x18f8>
   17824:	mov	r0, r4
   17828:	bl	1c18 <Mat_int16Swap>
   1782c:	strb	r0, [sl], #1
   17830:	subs	r8, r8, #1
   17834:	add	r4, r4, #2
   17838:	bne	17824 <ReadUInt8Data+0x178>
   1783c:	b	18fa4 <ReadUInt8Data+0x18f8>
   17840:	ldr	r0, [r6, #20]
   17844:	cmp	r0, #0
   17848:	beq	17b8c <ReadUInt8Data+0x4e0>
   1784c:	cmp	r8, #256	; 0x100
   17850:	bgt	17f74 <ReadUInt8Data+0x8c8>
   17854:	ldr	r3, [r6]
   17858:	ldr	r1, [sp, #20]
   1785c:	add	r4, sp, #24
   17860:	mov	r2, r8
   17864:	mov	r0, r4
   17868:	bl	18b8 <fread@plt>
   1786c:	mov	r5, r0
   17870:	cmp	r8, #1
   17874:	blt	18fa4 <ReadUInt8Data+0x18f8>
   17878:	mov	r0, r4
   1787c:	bl	1c2c <Mat_uint16Swap>
   17880:	strb	r0, [sl], #1
   17884:	subs	r8, r8, #1
   17888:	add	r4, r4, #2
   1788c:	bne	17878 <ReadUInt8Data+0x1cc>
   17890:	b	18fa4 <ReadUInt8Data+0x18f8>
   17894:	ldr	r0, [r6, #20]
   17898:	cmp	r0, #0
   1789c:	beq	17c10 <ReadUInt8Data+0x564>
   178a0:	cmp	r8, #256	; 0x100
   178a4:	bgt	18054 <ReadUInt8Data+0x9a8>
   178a8:	ldr	r3, [r6]
   178ac:	ldr	r1, [sp, #20]
   178b0:	add	r4, sp, #24
   178b4:	mov	r2, r8
   178b8:	mov	r0, r4
   178bc:	bl	18b8 <fread@plt>
   178c0:	mov	r5, r0
   178c4:	cmp	r8, #1
   178c8:	blt	18fa4 <ReadUInt8Data+0x18f8>
   178cc:	mov	r0, r4
   178d0:	bl	1bf0 <Mat_int32Swap>
   178d4:	strb	r0, [sl], #1
   178d8:	subs	r8, r8, #1
   178dc:	add	r4, r4, #4
   178e0:	bne	178cc <ReadUInt8Data+0x220>
   178e4:	b	18fa4 <ReadUInt8Data+0x18f8>
   178e8:	ldr	r0, [r6, #20]
   178ec:	cmp	r0, #0
   178f0:	beq	17c98 <ReadUInt8Data+0x5ec>
   178f4:	cmp	r8, #256	; 0x100
   178f8:	bgt	18134 <ReadUInt8Data+0xa88>
   178fc:	ldr	r3, [r6]
   17900:	ldr	r1, [sp, #20]
   17904:	add	r4, sp, #24
   17908:	mov	r2, r8
   1790c:	mov	r0, r4
   17910:	bl	18b8 <fread@plt>
   17914:	mov	r5, r0
   17918:	cmp	r8, #1
   1791c:	blt	18fa4 <ReadUInt8Data+0x18f8>
   17920:	mov	r0, r4
   17924:	bl	1c04 <Mat_uint32Swap>
   17928:	strb	r0, [sl], #1
   1792c:	subs	r8, r8, #1
   17930:	add	r4, r4, #4
   17934:	bne	17920 <ReadUInt8Data+0x274>
   17938:	b	18fa4 <ReadUInt8Data+0x18f8>
   1793c:	ldr	r0, [r6, #20]
   17940:	cmp	r0, #0
   17944:	beq	17d20 <ReadUInt8Data+0x674>
   17948:	cmp	r8, #256	; 0x100
   1794c:	bgt	18214 <ReadUInt8Data+0xb68>
   17950:	ldr	r3, [r6]
   17954:	ldr	r1, [sp, #20]
   17958:	add	r4, sp, #24
   1795c:	mov	r2, r8
   17960:	mov	r0, r4
   17964:	bl	18b8 <fread@plt>
   17968:	mov	r5, r0
   1796c:	cmp	r8, #1
   17970:	blt	18fa4 <ReadUInt8Data+0x18f8>
   17974:	mov	r0, r4
   17978:	bl	1c44 <Mat_floatSwap>
   1797c:	vcvt.u32.f32	s0, s0
   17980:	subs	r8, r8, #1
   17984:	add	r4, r4, #4
   17988:	vmov	r0, s0
   1798c:	strb	r0, [sl], #1
   17990:	bne	17974 <ReadUInt8Data+0x2c8>
   17994:	b	18fa4 <ReadUInt8Data+0x18f8>
   17998:	ldr	r0, [r6, #20]
   1799c:	cmp	r0, #0
   179a0:	beq	17db8 <ReadUInt8Data+0x70c>
   179a4:	cmp	r8, #256	; 0x100
   179a8:	bgt	18304 <ReadUInt8Data+0xc58>
   179ac:	ldr	r3, [r6]
   179b0:	ldr	r1, [sp, #20]
   179b4:	add	r4, sp, #24
   179b8:	mov	r2, r8
   179bc:	mov	r0, r4
   179c0:	bl	18b8 <fread@plt>
   179c4:	mov	r5, r0
   179c8:	cmp	r8, #1
   179cc:	blt	18fa4 <ReadUInt8Data+0x18f8>
   179d0:	mov	r0, r4
   179d4:	bl	1c88 <Mat_doubleSwap>
   179d8:	vcvt.u32.f64	s0, d0
   179dc:	subs	r8, r8, #1
   179e0:	add	r4, r4, #8
   179e4:	vmov	r0, s0
   179e8:	strb	r0, [sl], #1
   179ec:	bne	179d0 <ReadUInt8Data+0x324>
   179f0:	b	18fa4 <ReadUInt8Data+0x18f8>
   179f4:	ldr	r0, [r6, #20]
   179f8:	cmp	r0, #0
   179fc:	beq	17e04 <ReadUInt8Data+0x758>
   17a00:	cmp	r8, #256	; 0x100
   17a04:	bgt	183f8 <ReadUInt8Data+0xd4c>
   17a08:	ldr	r3, [r6]
   17a0c:	ldr	r1, [sp, #20]
   17a10:	add	r7, sp, #24
   17a14:	mov	r2, r8
   17a18:	mov	r0, r7
   17a1c:	bl	18b8 <fread@plt>
   17a20:	mov	r5, r0
   17a24:	cmp	r8, #1
   17a28:	blt	18cb4 <ReadUInt8Data+0x1608>
   17a2c:	str	r4, [sp, #4]
   17a30:	mov	r9, r6
   17a34:	mov	r6, r5
   17a38:	mov	r4, r8
   17a3c:	mov	r5, sl
   17a40:	mov	r0, r7
   17a44:	bl	1b84 <Mat_int64Swap>
   17a48:	strb	r0, [r5], #1
   17a4c:	subs	r4, r4, #1
   17a50:	add	r7, r7, #8
   17a54:	bne	17a40 <ReadUInt8Data+0x394>
   17a58:	mov	r5, r6
   17a5c:	mov	r6, r9
   17a60:	b	18cb0 <ReadUInt8Data+0x1604>
   17a64:	ldr	r5, [sp, #20]
   17a68:	sub	r0, r8, #256	; 0x100
   17a6c:	str	r8, [sp, #8]
   17a70:	mov	r9, r6
   17a74:	mov	r7, #0
   17a78:	add	r8, sp, #24
   17a7c:	mov	r6, #0
   17a80:	str	r0, [sp, #16]
   17a84:	ldr	r3, [r9]
   17a88:	mov	r0, r8
   17a8c:	mov	r1, r5
   17a90:	mov	r2, #256	; 0x100
   17a94:	bl	18b8 <fread@plt>
   17a98:	mov	r4, r0
   17a9c:	add	r0, sl, r7
   17aa0:	mov	r1, r8
   17aa4:	mov	r2, #256	; 0x100
   17aa8:	bl	181c <memcpy@plt>
   17aac:	ldr	r0, [sp, #16]
   17ab0:	add	r7, r7, #256	; 0x100
   17ab4:	add	r6, r4, r6
   17ab8:	cmp	r7, r0
   17abc:	blt	17a84 <ReadUInt8Data+0x3d8>
   17ac0:	ldr	r0, [sp, #8]
   17ac4:	cmp	r7, r0
   17ac8:	bge	18b48 <ReadUInt8Data+0x149c>
   17acc:	ldr	r3, [r9]
   17ad0:	sub	r4, r0, r7
   17ad4:	add	r0, sp, #24
   17ad8:	mov	r1, r5
   17adc:	mov	r2, r4
   17ae0:	bl	18b8 <fread@plt>
   17ae4:	mov	r5, r6
   17ae8:	cmp	r4, #1
   17aec:	add	r5, r0, r6
   17af0:	blt	18fa4 <ReadUInt8Data+0x18f8>
   17af4:	add	r0, sl, r7
   17af8:	add	r1, sp, #24
   17afc:	mov	r2, r4
   17b00:	bl	181c <memcpy@plt>
   17b04:	b	18fa4 <ReadUInt8Data+0x18f8>
   17b08:	cmp	r8, #256	; 0x100
   17b0c:	bgt	184ec <ReadUInt8Data+0xe40>
   17b10:	ldr	r3, [r6]
   17b14:	ldr	r1, [sp, #20]
   17b18:	add	r4, sp, #24
   17b1c:	mov	r2, r8
   17b20:	mov	r0, r4
   17b24:	bl	18b8 <fread@plt>
   17b28:	mov	r5, r0
   17b2c:	cmp	r8, #1
   17b30:	blt	18fa4 <ReadUInt8Data+0x18f8>
   17b34:	mov	r0, #0
   17b38:	cmp	r8, #8
   17b3c:	bcc	17b68 <ReadUInt8Data+0x4bc>
   17b40:	bic	r0, r8, #7
   17b44:	mov	r2, sl
   17b48:	mov	r1, r0
   17b4c:	vld1.16	{d16-d17}, [r4]!
   17b50:	subs	r1, r1, #8
   17b54:	vmovn.i16	d16, q8
   17b58:	vst1.8	{d16}, [r2]!
   17b5c:	bne	17b4c <ReadUInt8Data+0x4a0>
   17b60:	cmp	r0, r8
   17b64:	beq	18fa4 <ReadUInt8Data+0x18f8>
   17b68:	add	r3, sp, #24
   17b6c:	sub	r1, r8, r0
   17b70:	add	r2, sl, r0
   17b74:	add	r0, r3, r0, lsl #1
   17b78:	ldrb	r3, [r0], #2
   17b7c:	subs	r1, r1, #1
   17b80:	strb	r3, [r2], #1
   17b84:	bne	17b78 <ReadUInt8Data+0x4cc>
   17b88:	b	18fa4 <ReadUInt8Data+0x18f8>
   17b8c:	cmp	r8, #256	; 0x100
   17b90:	bgt	185fc <ReadUInt8Data+0xf50>
   17b94:	ldr	r3, [r6]
   17b98:	ldr	r1, [sp, #20]
   17b9c:	add	r4, sp, #24
   17ba0:	mov	r2, r8
   17ba4:	mov	r0, r4
   17ba8:	bl	18b8 <fread@plt>
   17bac:	mov	r5, r0
   17bb0:	cmp	r8, #1
   17bb4:	blt	18fa4 <ReadUInt8Data+0x18f8>
   17bb8:	mov	r0, #0
   17bbc:	cmp	r8, #8
   17bc0:	bcc	17bec <ReadUInt8Data+0x540>
   17bc4:	bic	r0, r8, #7
   17bc8:	mov	r2, sl
   17bcc:	mov	r1, r0
   17bd0:	vld1.16	{d16-d17}, [r4]!
   17bd4:	subs	r1, r1, #8
   17bd8:	vmovn.i16	d16, q8
   17bdc:	vst1.8	{d16}, [r2]!
   17be0:	bne	17bd0 <ReadUInt8Data+0x524>
   17be4:	cmp	r0, r8
   17be8:	beq	18fa4 <ReadUInt8Data+0x18f8>
   17bec:	add	r3, sp, #24
   17bf0:	sub	r1, r8, r0
   17bf4:	add	r2, sl, r0
   17bf8:	add	r0, r3, r0, lsl #1
   17bfc:	ldrb	r3, [r0], #2
   17c00:	subs	r1, r1, #1
   17c04:	strb	r3, [r2], #1
   17c08:	bne	17bfc <ReadUInt8Data+0x550>
   17c0c:	b	18fa4 <ReadUInt8Data+0x18f8>
   17c10:	cmp	r8, #256	; 0x100
   17c14:	bgt	1870c <ReadUInt8Data+0x1060>
   17c18:	ldr	r3, [r6]
   17c1c:	ldr	r1, [sp, #20]
   17c20:	add	r4, sp, #24
   17c24:	mov	r2, r8
   17c28:	mov	r0, r4
   17c2c:	bl	18b8 <fread@plt>
   17c30:	mov	r5, r0
   17c34:	cmp	r8, #1
   17c38:	blt	18fa4 <ReadUInt8Data+0x18f8>
   17c3c:	mov	r0, #0
   17c40:	cmp	r8, #4
   17c44:	bcc	17c74 <ReadUInt8Data+0x5c8>
   17c48:	bic	r0, r8, #3
   17c4c:	mov	r2, sl
   17c50:	mov	r1, r0
   17c54:	vld1.32	{d16-d17}, [r4]!
   17c58:	subs	r1, r1, #4
   17c5c:	vmovn.i32	d16, q8
   17c60:	vuzp.8	d16, d17
   17c64:	vst1.32	{d16[0]}, [r2]!
   17c68:	bne	17c54 <ReadUInt8Data+0x5a8>
   17c6c:	cmp	r0, r8
   17c70:	beq	18fa4 <ReadUInt8Data+0x18f8>
   17c74:	add	r3, sp, #24
   17c78:	sub	r1, r8, r0
   17c7c:	add	r2, sl, r0
   17c80:	add	r0, r3, r0, lsl #2
   17c84:	ldr	r3, [r0], #4
   17c88:	subs	r1, r1, #1
   17c8c:	strb	r3, [r2], #1
   17c90:	bne	17c84 <ReadUInt8Data+0x5d8>
   17c94:	b	18fa4 <ReadUInt8Data+0x18f8>
   17c98:	cmp	r8, #256	; 0x100
   17c9c:	bgt	18824 <ReadUInt8Data+0x1178>
   17ca0:	ldr	r3, [r6]
   17ca4:	ldr	r1, [sp, #20]
   17ca8:	add	r4, sp, #24
   17cac:	mov	r2, r8
   17cb0:	mov	r0, r4
   17cb4:	bl	18b8 <fread@plt>
   17cb8:	mov	r5, r0
   17cbc:	cmp	r8, #1
   17cc0:	blt	18fa4 <ReadUInt8Data+0x18f8>
   17cc4:	mov	r0, #0
   17cc8:	cmp	r8, #4
   17ccc:	bcc	17cfc <ReadUInt8Data+0x650>
   17cd0:	bic	r0, r8, #3
   17cd4:	mov	r2, sl
   17cd8:	mov	r1, r0
   17cdc:	vld1.32	{d16-d17}, [r4]!
   17ce0:	subs	r1, r1, #4
   17ce4:	vmovn.i32	d16, q8
   17ce8:	vuzp.8	d16, d17
   17cec:	vst1.32	{d16[0]}, [r2]!
   17cf0:	bne	17cdc <ReadUInt8Data+0x630>
   17cf4:	cmp	r0, r8
   17cf8:	beq	18fa4 <ReadUInt8Data+0x18f8>
   17cfc:	add	r3, sp, #24
   17d00:	sub	r1, r8, r0
   17d04:	add	r2, sl, r0
   17d08:	add	r0, r3, r0, lsl #2
   17d0c:	ldr	r3, [r0], #4
   17d10:	subs	r1, r1, #1
   17d14:	strb	r3, [r2], #1
   17d18:	bne	17d0c <ReadUInt8Data+0x660>
   17d1c:	b	18fa4 <ReadUInt8Data+0x18f8>
   17d20:	cmp	r8, #256	; 0x100
   17d24:	bgt	1893c <ReadUInt8Data+0x1290>
   17d28:	ldr	r3, [r6]
   17d2c:	ldr	r1, [sp, #20]
   17d30:	add	r4, sp, #24
   17d34:	mov	r2, r8
   17d38:	mov	r0, r4
   17d3c:	bl	18b8 <fread@plt>
   17d40:	mov	r5, r0
   17d44:	cmp	r8, #1
   17d48:	blt	18fa4 <ReadUInt8Data+0x18f8>
   17d4c:	mov	r0, #0
   17d50:	cmp	r8, #4
   17d54:	bcc	17d88 <ReadUInt8Data+0x6dc>
   17d58:	bic	r0, r8, #3
   17d5c:	mov	r2, sl
   17d60:	mov	r1, r0
   17d64:	vld1.32	{d16-d17}, [r4]!
   17d68:	subs	r1, r1, #4
   17d6c:	vcvt.s32.f32	q8, q8
   17d70:	vmovn.i32	d16, q8
   17d74:	vuzp.8	d16, d17
   17d78:	vst1.32	{d16[0]}, [r2]!
   17d7c:	bne	17d64 <ReadUInt8Data+0x6b8>
   17d80:	cmp	r0, r8
   17d84:	beq	18fa4 <ReadUInt8Data+0x18f8>
   17d88:	add	r3, sp, #24
   17d8c:	sub	r1, r8, r0
   17d90:	add	r2, sl, r0
   17d94:	add	r0, r3, r0, lsl #2
   17d98:	vldr	s0, [r0]
   17d9c:	subs	r1, r1, #1
   17da0:	add	r0, r0, #4
   17da4:	vcvt.u32.f32	s0, s0
   17da8:	vmov	r3, s0
   17dac:	strb	r3, [r2], #1
   17db0:	bne	17d98 <ReadUInt8Data+0x6ec>
   17db4:	b	18fa4 <ReadUInt8Data+0x18f8>
   17db8:	cmp	r8, #256	; 0x100
   17dbc:	bgt	18a68 <ReadUInt8Data+0x13bc>
   17dc0:	ldr	r3, [r6]
   17dc4:	ldr	r1, [sp, #20]
   17dc8:	add	r4, sp, #24
   17dcc:	mov	r2, r8
   17dd0:	mov	r0, r4
   17dd4:	bl	18b8 <fread@plt>
   17dd8:	mov	r5, r0
   17ddc:	cmp	r8, #1
   17de0:	blt	18fa4 <ReadUInt8Data+0x18f8>
   17de4:	vldr	d16, [r4]
   17de8:	subs	r8, r8, #1
   17dec:	add	r4, r4, #8
   17df0:	vcvt.u32.f64	s0, d16
   17df4:	vmov	r0, s0
   17df8:	strb	r0, [sl], #1
   17dfc:	bne	17de4 <ReadUInt8Data+0x738>
   17e00:	b	18fa4 <ReadUInt8Data+0x18f8>
   17e04:	cmp	r8, #256	; 0x100
   17e08:	bgt	18b50 <ReadUInt8Data+0x14a4>
   17e0c:	ldr	r3, [r6]
   17e10:	ldr	r1, [sp, #20]
   17e14:	add	r7, sp, #24
   17e18:	mov	r2, r8
   17e1c:	mov	r0, r7
   17e20:	bl	18b8 <fread@plt>
   17e24:	mov	r5, r0
   17e28:	cmp	r8, #1
   17e2c:	blt	18cb4 <ReadUInt8Data+0x1608>
   17e30:	mov	r0, #0
   17e34:	beq	17e70 <ReadUInt8Data+0x7c4>
   17e38:	bic	r0, r8, #1
   17e3c:	mov	r2, sl
   17e40:	mov	r1, r0
   17e44:	vld1.64	{d16-d17}, [r7]!
   17e48:	subs	r1, r1, #2
   17e4c:	vmovn.i64	d16, q8
   17e50:	vmov.32	r3, d16[1]
   17e54:	strb	r3, [r2, #1]
   17e58:	vmov.32	r3, d16[0]
   17e5c:	strb	r3, [r2]
   17e60:	add	r2, r2, #2
   17e64:	bne	17e44 <ReadUInt8Data+0x798>
   17e68:	cmp	r0, r8
   17e6c:	beq	18cb4 <ReadUInt8Data+0x1608>
   17e70:	add	r3, sp, #24
   17e74:	sub	r1, r8, r0
   17e78:	add	r2, sl, r0
   17e7c:	add	r0, r3, r0, lsl #3
   17e80:	ldrb	r3, [r0], #8
   17e84:	subs	r1, r1, #1
   17e88:	strb	r3, [r2], #1
   17e8c:	bne	17e80 <ReadUInt8Data+0x7d4>
   17e90:	b	18cb4 <ReadUInt8Data+0x1608>
   17e94:	str	r6, [sp, #16]
   17e98:	sub	r0, r8, #256	; 0x100
   17e9c:	mov	r7, #0
   17ea0:	mov	r6, sl
   17ea4:	mov	r5, #0
   17ea8:	str	r8, [sp, #8]
   17eac:	str	r0, [sp, #12]
   17eb0:	ldr	r0, [sp, #16]
   17eb4:	ldr	r1, [sp, #20]
   17eb8:	add	r4, sp, #24
   17ebc:	mov	r2, #256	; 0x100
   17ec0:	mov	r8, r5
   17ec4:	mov	r9, r7
   17ec8:	ldr	r3, [r0]
   17ecc:	mov	r0, r4
   17ed0:	bl	18b8 <fread@plt>
   17ed4:	mov	r7, r0
   17ed8:	mov	r5, #0
   17edc:	mov	r0, r4
   17ee0:	bl	1c18 <Mat_int16Swap>
   17ee4:	strb	r0, [r6, r5]
   17ee8:	add	r5, r5, #1
   17eec:	add	r4, r4, #2
   17ef0:	cmp	r5, #256	; 0x100
   17ef4:	bne	17edc <ReadUInt8Data+0x830>
   17ef8:	ldr	r0, [sp, #12]
   17efc:	mov	r5, r8
   17f00:	add	r6, r6, #256	; 0x100
   17f04:	add	r5, r7, r8
   17f08:	add	r7, r9, #256	; 0x100
   17f0c:	cmp	r7, r0
   17f10:	blt	17eb0 <ReadUInt8Data+0x804>
   17f14:	ldr	r0, [sp, #8]
   17f18:	cmp	r7, r0
   17f1c:	bge	18fa4 <ReadUInt8Data+0x18f8>
   17f20:	sub	r8, r0, r7
   17f24:	ldr	r0, [sp, #16]
   17f28:	ldr	r1, [sp, #20]
   17f2c:	add	r4, sp, #24
   17f30:	mov	r2, r8
   17f34:	ldr	r3, [r0]
   17f38:	mov	r0, r4
   17f3c:	bl	18b8 <fread@plt>
   17f40:	add	r5, r0, r5
   17f44:	cmp	r8, #1
   17f48:	blt	18fa4 <ReadUInt8Data+0x18f8>
   17f4c:	ldr	r0, [sp, #12]
   17f50:	sub	r6, r0, r9
   17f54:	mov	r0, r4
   17f58:	bl	1c18 <Mat_int16Swap>
   17f5c:	strb	r0, [sl, r7]
   17f60:	add	sl, sl, #1
   17f64:	subs	r6, r6, #1
   17f68:	add	r4, r4, #2
   17f6c:	bne	17f54 <ReadUInt8Data+0x8a8>
   17f70:	b	18fa4 <ReadUInt8Data+0x18f8>
   17f74:	str	r6, [sp, #16]
   17f78:	sub	r0, r8, #256	; 0x100
   17f7c:	mov	r7, #0
   17f80:	mov	r6, sl
   17f84:	mov	r5, #0
   17f88:	str	r8, [sp, #8]
   17f8c:	str	r0, [sp, #12]
   17f90:	ldr	r0, [sp, #16]
   17f94:	ldr	r1, [sp, #20]
   17f98:	add	r4, sp, #24
   17f9c:	mov	r2, #256	; 0x100
   17fa0:	mov	r8, r5
   17fa4:	mov	r9, r7
   17fa8:	ldr	r3, [r0]
   17fac:	mov	r0, r4
   17fb0:	bl	18b8 <fread@plt>
   17fb4:	mov	r7, r0
   17fb8:	mov	r5, #0
   17fbc:	mov	r0, r4
   17fc0:	bl	1c2c <Mat_uint16Swap>
   17fc4:	strb	r0, [r6, r5]
   17fc8:	add	r5, r5, #1
   17fcc:	add	r4, r4, #2
   17fd0:	cmp	r5, #256	; 0x100
   17fd4:	bne	17fbc <ReadUInt8Data+0x910>
   17fd8:	ldr	r0, [sp, #12]
   17fdc:	mov	r5, r8
   17fe0:	add	r6, r6, #256	; 0x100
   17fe4:	add	r5, r7, r8
   17fe8:	add	r7, r9, #256	; 0x100
   17fec:	cmp	r7, r0
   17ff0:	blt	17f90 <ReadUInt8Data+0x8e4>
   17ff4:	ldr	r0, [sp, #8]
   17ff8:	cmp	r7, r0
   17ffc:	bge	18fa4 <ReadUInt8Data+0x18f8>
   18000:	sub	r8, r0, r7
   18004:	ldr	r0, [sp, #16]
   18008:	ldr	r1, [sp, #20]
   1800c:	add	r4, sp, #24
   18010:	mov	r2, r8
   18014:	ldr	r3, [r0]
   18018:	mov	r0, r4
   1801c:	bl	18b8 <fread@plt>
   18020:	add	r5, r0, r5
   18024:	cmp	r8, #1
   18028:	blt	18fa4 <ReadUInt8Data+0x18f8>
   1802c:	ldr	r0, [sp, #12]
   18030:	sub	r6, r0, r9
   18034:	mov	r0, r4
   18038:	bl	1c2c <Mat_uint16Swap>
   1803c:	strb	r0, [sl, r7]
   18040:	add	sl, sl, #1
   18044:	subs	r6, r6, #1
   18048:	add	r4, r4, #2
   1804c:	bne	18034 <ReadUInt8Data+0x988>
   18050:	b	18fa4 <ReadUInt8Data+0x18f8>
   18054:	str	r6, [sp, #16]
   18058:	sub	r0, r8, #256	; 0x100
   1805c:	mov	r7, #0
   18060:	mov	r6, sl
   18064:	mov	r5, #0
   18068:	str	r8, [sp, #8]
   1806c:	str	r0, [sp, #12]
   18070:	ldr	r0, [sp, #16]
   18074:	ldr	r1, [sp, #20]
   18078:	add	r4, sp, #24
   1807c:	mov	r2, #256	; 0x100
   18080:	mov	r8, r5
   18084:	mov	r9, r7
   18088:	ldr	r3, [r0]
   1808c:	mov	r0, r4
   18090:	bl	18b8 <fread@plt>
   18094:	mov	r7, r0
   18098:	mov	r5, #0
   1809c:	mov	r0, r4
   180a0:	bl	1bf0 <Mat_int32Swap>
   180a4:	strb	r0, [r6, r5]
   180a8:	add	r5, r5, #1
   180ac:	add	r4, r4, #4
   180b0:	cmp	r5, #256	; 0x100
   180b4:	bne	1809c <ReadUInt8Data+0x9f0>
   180b8:	ldr	r0, [sp, #12]
   180bc:	mov	r5, r8
   180c0:	add	r6, r6, #256	; 0x100
   180c4:	add	r5, r7, r8
   180c8:	add	r7, r9, #256	; 0x100
   180cc:	cmp	r7, r0
   180d0:	blt	18070 <ReadUInt8Data+0x9c4>
   180d4:	ldr	r0, [sp, #8]
   180d8:	cmp	r7, r0
   180dc:	bge	18fa4 <ReadUInt8Data+0x18f8>
   180e0:	sub	r8, r0, r7
   180e4:	ldr	r0, [sp, #16]
   180e8:	ldr	r1, [sp, #20]
   180ec:	add	r4, sp, #24
   180f0:	mov	r2, r8
   180f4:	ldr	r3, [r0]
   180f8:	mov	r0, r4
   180fc:	bl	18b8 <fread@plt>
   18100:	add	r5, r0, r5
   18104:	cmp	r8, #1
   18108:	blt	18fa4 <ReadUInt8Data+0x18f8>
   1810c:	ldr	r0, [sp, #12]
   18110:	sub	r6, r0, r9
   18114:	mov	r0, r4
   18118:	bl	1bf0 <Mat_int32Swap>
   1811c:	strb	r0, [sl, r7]
   18120:	add	sl, sl, #1
   18124:	subs	r6, r6, #1
   18128:	add	r4, r4, #4
   1812c:	bne	18114 <ReadUInt8Data+0xa68>
   18130:	b	18fa4 <ReadUInt8Data+0x18f8>
   18134:	str	r6, [sp, #16]
   18138:	sub	r0, r8, #256	; 0x100
   1813c:	mov	r7, #0
   18140:	mov	r6, sl
   18144:	mov	r5, #0
   18148:	str	r8, [sp, #8]
   1814c:	str	r0, [sp, #12]
   18150:	ldr	r0, [sp, #16]
   18154:	ldr	r1, [sp, #20]
   18158:	add	r4, sp, #24
   1815c:	mov	r2, #256	; 0x100
   18160:	mov	r8, r5
   18164:	mov	r9, r7
   18168:	ldr	r3, [r0]
   1816c:	mov	r0, r4
   18170:	bl	18b8 <fread@plt>
   18174:	mov	r7, r0
   18178:	mov	r5, #0
   1817c:	mov	r0, r4
   18180:	bl	1c04 <Mat_uint32Swap>
   18184:	strb	r0, [r6, r5]
   18188:	add	r5, r5, #1
   1818c:	add	r4, r4, #4
   18190:	cmp	r5, #256	; 0x100
   18194:	bne	1817c <ReadUInt8Data+0xad0>
   18198:	ldr	r0, [sp, #12]
   1819c:	mov	r5, r8
   181a0:	add	r6, r6, #256	; 0x100
   181a4:	add	r5, r7, r8
   181a8:	add	r7, r9, #256	; 0x100
   181ac:	cmp	r7, r0
   181b0:	blt	18150 <ReadUInt8Data+0xaa4>
   181b4:	ldr	r0, [sp, #8]
   181b8:	cmp	r7, r0
   181bc:	bge	18fa4 <ReadUInt8Data+0x18f8>
   181c0:	sub	r8, r0, r7
   181c4:	ldr	r0, [sp, #16]
   181c8:	ldr	r1, [sp, #20]
   181cc:	add	r4, sp, #24
   181d0:	mov	r2, r8
   181d4:	ldr	r3, [r0]
   181d8:	mov	r0, r4
   181dc:	bl	18b8 <fread@plt>
   181e0:	add	r5, r0, r5
   181e4:	cmp	r8, #1
   181e8:	blt	18fa4 <ReadUInt8Data+0x18f8>
   181ec:	ldr	r0, [sp, #12]
   181f0:	sub	r6, r0, r9
   181f4:	mov	r0, r4
   181f8:	bl	1c04 <Mat_uint32Swap>
   181fc:	strb	r0, [sl, r7]
   18200:	add	sl, sl, #1
   18204:	subs	r6, r6, #1
   18208:	add	r4, r4, #4
   1820c:	bne	181f4 <ReadUInt8Data+0xb48>
   18210:	b	18fa4 <ReadUInt8Data+0x18f8>
   18214:	str	r6, [sp, #16]
   18218:	sub	r0, r8, #256	; 0x100
   1821c:	mov	r7, #0
   18220:	mov	r6, sl
   18224:	mov	r5, #0
   18228:	str	r8, [sp, #8]
   1822c:	str	r0, [sp, #12]
   18230:	ldr	r0, [sp, #16]
   18234:	ldr	r1, [sp, #20]
   18238:	add	r4, sp, #24
   1823c:	mov	r2, #256	; 0x100
   18240:	mov	r8, r5
   18244:	mov	r9, r7
   18248:	ldr	r3, [r0]
   1824c:	mov	r0, r4
   18250:	bl	18b8 <fread@plt>
   18254:	mov	r7, r0
   18258:	mov	r5, #0
   1825c:	mov	r0, r4
   18260:	bl	1c44 <Mat_floatSwap>
   18264:	vcvt.u32.f32	s0, s0
   18268:	add	r4, r4, #4
   1826c:	vmov	r0, s0
   18270:	strb	r0, [r6, r5]
   18274:	add	r5, r5, #1
   18278:	cmp	r5, #256	; 0x100
   1827c:	bne	1825c <ReadUInt8Data+0xbb0>
   18280:	ldr	r0, [sp, #12]
   18284:	mov	r5, r8
   18288:	add	r6, r6, #256	; 0x100
   1828c:	add	r5, r7, r8
   18290:	add	r7, r9, #256	; 0x100
   18294:	cmp	r7, r0
   18298:	blt	18230 <ReadUInt8Data+0xb84>
   1829c:	ldr	r0, [sp, #8]
   182a0:	cmp	r7, r0
   182a4:	bge	18fa4 <ReadUInt8Data+0x18f8>
   182a8:	sub	r8, r0, r7
   182ac:	ldr	r0, [sp, #16]
   182b0:	ldr	r1, [sp, #20]
   182b4:	add	r4, sp, #24
   182b8:	mov	r2, r8
   182bc:	ldr	r3, [r0]
   182c0:	mov	r0, r4
   182c4:	bl	18b8 <fread@plt>
   182c8:	add	r5, r0, r5
   182cc:	cmp	r8, #1
   182d0:	blt	18fa4 <ReadUInt8Data+0x18f8>
   182d4:	ldr	r0, [sp, #12]
   182d8:	sub	r6, r0, r9
   182dc:	mov	r0, r4
   182e0:	bl	1c44 <Mat_floatSwap>
   182e4:	vcvt.u32.f32	s0, s0
   182e8:	subs	r6, r6, #1
   182ec:	add	r4, r4, #4
   182f0:	vmov	r0, s0
   182f4:	strb	r0, [sl, r7]
   182f8:	add	sl, sl, #1
   182fc:	bne	182dc <ReadUInt8Data+0xc30>
   18300:	b	18fa4 <ReadUInt8Data+0x18f8>
   18304:	str	r6, [sp, #16]
   18308:	sub	r0, r8, #256	; 0x100
   1830c:	mov	r9, #0
   18310:	mov	r6, sl
   18314:	mov	r5, #0
   18318:	str	r8, [sp, #8]
   1831c:	str	r0, [sp, #12]
   18320:	ldr	r0, [sp, #16]
   18324:	ldr	r1, [sp, #20]
   18328:	add	r4, sp, #24
   1832c:	mov	r2, #256	; 0x100
   18330:	mov	r8, r5
   18334:	ldr	r3, [r0]
   18338:	mov	r0, r4
   1833c:	bl	18b8 <fread@plt>
   18340:	mov	r7, r0
   18344:	mov	r5, #0
   18348:	mov	r0, r4
   1834c:	bl	1c88 <Mat_doubleSwap>
   18350:	vcvt.u32.f64	s0, d0
   18354:	add	r4, r4, #8
   18358:	vmov	r0, s0
   1835c:	strb	r0, [r6, r5]
   18360:	add	r5, r5, #1
   18364:	cmp	r5, #256	; 0x100
   18368:	bne	18348 <ReadUInt8Data+0xc9c>
   1836c:	ldr	r0, [sp, #12]
   18370:	mov	r5, r8
   18374:	mov	r1, r9
   18378:	add	r9, r9, #256	; 0x100
   1837c:	add	r6, r6, #256	; 0x100
   18380:	add	r5, r7, r8
   18384:	cmp	r9, r0
   18388:	blt	18320 <ReadUInt8Data+0xc74>
   1838c:	ldr	r0, [sp, #8]
   18390:	cmp	r9, r0
   18394:	bge	18fa4 <ReadUInt8Data+0x18f8>
   18398:	sub	r7, r0, r9
   1839c:	ldr	r0, [sp, #16]
   183a0:	mov	r6, r1
   183a4:	ldr	r1, [sp, #20]
   183a8:	add	r4, sp, #24
   183ac:	mov	r2, r7
   183b0:	ldr	r3, [r0]
   183b4:	mov	r0, r4
   183b8:	bl	18b8 <fread@plt>
   183bc:	add	r5, r0, r5
   183c0:	cmp	r7, #1
   183c4:	blt	18fa4 <ReadUInt8Data+0x18f8>
   183c8:	ldr	r0, [sp, #12]
   183cc:	sub	r6, r0, r6
   183d0:	mov	r0, r4
   183d4:	bl	1c88 <Mat_doubleSwap>
   183d8:	vcvt.u32.f64	s0, d0
   183dc:	subs	r6, r6, #1
   183e0:	add	r4, r4, #8
   183e4:	vmov	r0, s0
   183e8:	strb	r0, [sl, r9]
   183ec:	add	sl, sl, #1
   183f0:	bne	183d0 <ReadUInt8Data+0xd24>
   183f4:	b	18fa4 <ReadUInt8Data+0x18f8>
   183f8:	str	r6, [sp, #16]
   183fc:	stmib	sp, {r4, r8}
   18400:	sub	r0, r8, #256	; 0x100
   18404:	mov	r4, #0
   18408:	mov	r6, sl
   1840c:	mov	r5, #0
   18410:	str	r0, [sp, #12]
   18414:	ldr	r0, [sp, #16]
   18418:	ldr	r1, [sp, #20]
   1841c:	mov	r9, r4
   18420:	add	r4, sp, #24
   18424:	mov	r2, #256	; 0x100
   18428:	mov	r8, r5
   1842c:	ldr	r3, [r0]
   18430:	mov	r0, r4
   18434:	bl	18b8 <fread@plt>
   18438:	mov	r7, r0
   1843c:	mov	r5, #0
   18440:	mov	r0, r4
   18444:	bl	1b84 <Mat_int64Swap>
   18448:	strb	r0, [r6, r5]
   1844c:	add	r5, r5, #1
   18450:	add	r4, r4, #8
   18454:	cmp	r5, #256	; 0x100
   18458:	bne	18440 <ReadUInt8Data+0xd94>
   1845c:	ldr	r0, [sp, #12]
   18460:	mov	r5, r8
   18464:	add	r4, r9, #256	; 0x100
   18468:	add	r6, r6, #256	; 0x100
   1846c:	add	r5, r7, r8
   18470:	cmp	r4, r0
   18474:	blt	18414 <ReadUInt8Data+0xd68>
   18478:	ldr	r8, [sp, #8]
   1847c:	cmp	r4, r8
   18480:	bge	18c98 <ReadUInt8Data+0x15ec>
   18484:	ldr	r6, [sp, #16]
   18488:	ldr	r1, [sp, #20]
   1848c:	sub	r8, r8, r4
   18490:	add	r7, sp, #24
   18494:	mov	r0, r7
   18498:	mov	r2, r8
   1849c:	ldr	r3, [r6]
   184a0:	bl	18b8 <fread@plt>
   184a4:	add	r5, r0, r5
   184a8:	cmp	r8, #1
   184ac:	blt	18cac <ReadUInt8Data+0x1600>
   184b0:	ldr	r0, [sp, #12]
   184b4:	mov	r8, r5
   184b8:	mov	r5, sl
   184bc:	sub	r6, r0, r9
   184c0:	mov	r0, r7
   184c4:	bl	1b84 <Mat_int64Swap>
   184c8:	strb	r0, [r5, r4]
   184cc:	add	r5, r5, #1
   184d0:	subs	r6, r6, #1
   184d4:	add	r7, r7, #8
   184d8:	bne	184c0 <ReadUInt8Data+0xe14>
   184dc:	mov	r5, r8
   184e0:	ldr	r8, [sp, #8]
   184e4:	ldr	r6, [sp, #16]
   184e8:	b	18cb0 <ReadUInt8Data+0x1604>
   184ec:	sub	r0, r8, #256	; 0x100
   184f0:	add	r1, sl, #256	; 0x100
   184f4:	add	r4, sp, #24
   184f8:	mov	r5, #0
   184fc:	str	r0, [sp, #16]
   18500:	mov	r0, #0
   18504:	mov	r9, r1
   18508:	ldr	r3, [r6]
   1850c:	ldr	r1, [sp, #20]
   18510:	mov	r7, r0
   18514:	mov	r0, r4
   18518:	mov	r2, #256	; 0x100
   1851c:	bl	18b8 <fread@plt>
   18520:	mov	r1, r4
   18524:	mov	r2, #0
   18528:	vld1.16	{d16-d17}, [r1]!
   1852c:	add	r3, sl, r2
   18530:	add	r2, r2, #8
   18534:	cmp	r2, #256	; 0x100
   18538:	vmovn.i16	d16, q8
   1853c:	vst1.8	{d16}, [r3]
   18540:	bne	18528 <ReadUInt8Data+0xe7c>
   18544:	ldr	r2, [sp, #16]
   18548:	add	r5, r0, r5
   1854c:	add	r0, r7, #256	; 0x100
   18550:	add	sl, sl, #256	; 0x100
   18554:	add	r1, r9, #256	; 0x100
   18558:	cmp	r0, r2
   1855c:	blt	18504 <ReadUInt8Data+0xe58>
   18560:	cmp	r0, r8
   18564:	bge	18fa4 <ReadUInt8Data+0x18f8>
   18568:	mov	r1, r6
   1856c:	sub	r6, r8, r0
   18570:	add	r4, sp, #24
   18574:	ldr	r3, [r1]
   18578:	ldr	r1, [sp, #20]
   1857c:	mov	r0, r4
   18580:	mov	r2, r6
   18584:	bl	18b8 <fread@plt>
   18588:	add	r5, r0, r5
   1858c:	cmp	r6, #1
   18590:	blt	18fa4 <ReadUInt8Data+0x18f8>
   18594:	mov	r0, #0
   18598:	cmp	r6, #8
   1859c:	bcc	185d0 <ReadUInt8Data+0xf24>
   185a0:	ldr	r0, [sp, #16]
   185a4:	mov	r2, r9
   185a8:	sub	r0, r0, r7
   185ac:	bic	r1, r0, #7
   185b0:	bic	r0, r6, #7
   185b4:	vld1.16	{d16-d17}, [r4]!
   185b8:	subs	r1, r1, #8
   185bc:	vmovn.i16	d16, q8
   185c0:	vst1.8	{d16}, [r2]!
   185c4:	bne	185b4 <ReadUInt8Data+0xf08>
   185c8:	cmp	r6, r0
   185cc:	beq	18fa4 <ReadUInt8Data+0x18f8>
   185d0:	ldr	r3, [sp, #16]
   185d4:	add	r2, sp, #24
   185d8:	add	r1, r9, r0
   185dc:	add	r2, r2, r0, lsl #1
   185e0:	sub	r3, r3, r7
   185e4:	sub	r0, r3, r0
   185e8:	ldrb	r3, [r2], #2
   185ec:	subs	r0, r0, #1
   185f0:	strb	r3, [r1], #1
   185f4:	bne	185e8 <ReadUInt8Data+0xf3c>
   185f8:	b	18fa4 <ReadUInt8Data+0x18f8>
   185fc:	sub	r0, r8, #256	; 0x100
   18600:	add	r1, sl, #256	; 0x100
   18604:	add	r4, sp, #24
   18608:	mov	r5, #0
   1860c:	str	r0, [sp, #16]
   18610:	mov	r0, #0
   18614:	mov	r9, r1
   18618:	ldr	r3, [r6]
   1861c:	ldr	r1, [sp, #20]
   18620:	mov	r7, r0
   18624:	mov	r0, r4
   18628:	mov	r2, #256	; 0x100
   1862c:	bl	18b8 <fread@plt>
   18630:	mov	r1, r4
   18634:	mov	r2, #0
   18638:	vld1.16	{d16-d17}, [r1]!
   1863c:	add	r3, sl, r2
   18640:	add	r2, r2, #8
   18644:	cmp	r2, #256	; 0x100
   18648:	vmovn.i16	d16, q8
   1864c:	vst1.8	{d16}, [r3]
   18650:	bne	18638 <ReadUInt8Data+0xf8c>
   18654:	ldr	r2, [sp, #16]
   18658:	add	r5, r0, r5
   1865c:	add	r0, r7, #256	; 0x100
   18660:	add	sl, sl, #256	; 0x100
   18664:	add	r1, r9, #256	; 0x100
   18668:	cmp	r0, r2
   1866c:	blt	18614 <ReadUInt8Data+0xf68>
   18670:	cmp	r0, r8
   18674:	bge	18fa4 <ReadUInt8Data+0x18f8>
   18678:	mov	r1, r6
   1867c:	sub	r6, r8, r0
   18680:	add	r4, sp, #24
   18684:	ldr	r3, [r1]
   18688:	ldr	r1, [sp, #20]
   1868c:	mov	r0, r4
   18690:	mov	r2, r6
   18694:	bl	18b8 <fread@plt>
   18698:	add	r5, r0, r5
   1869c:	cmp	r6, #1
   186a0:	blt	18fa4 <ReadUInt8Data+0x18f8>
   186a4:	mov	r0, #0
   186a8:	cmp	r6, #8
   186ac:	bcc	186e0 <ReadUInt8Data+0x1034>
   186b0:	ldr	r0, [sp, #16]
   186b4:	mov	r2, r9
   186b8:	sub	r0, r0, r7
   186bc:	bic	r1, r0, #7
   186c0:	bic	r0, r6, #7
   186c4:	vld1.16	{d16-d17}, [r4]!
   186c8:	subs	r1, r1, #8
   186cc:	vmovn.i16	d16, q8
   186d0:	vst1.8	{d16}, [r2]!
   186d4:	bne	186c4 <ReadUInt8Data+0x1018>
   186d8:	cmp	r6, r0
   186dc:	beq	18fa4 <ReadUInt8Data+0x18f8>
   186e0:	ldr	r3, [sp, #16]
   186e4:	add	r2, sp, #24
   186e8:	add	r1, r9, r0
   186ec:	add	r2, r2, r0, lsl #1
   186f0:	sub	r3, r3, r7
   186f4:	sub	r0, r3, r0
   186f8:	ldrb	r3, [r2], #2
   186fc:	subs	r0, r0, #1
   18700:	strb	r3, [r1], #1
   18704:	bne	186f8 <ReadUInt8Data+0x104c>
   18708:	b	18fa4 <ReadUInt8Data+0x18f8>
   1870c:	sub	r0, r8, #256	; 0x100
   18710:	add	r1, sl, #256	; 0x100
   18714:	add	r4, sp, #24
   18718:	mov	r5, #0
   1871c:	str	r0, [sp, #16]
   18720:	mov	r0, #0
   18724:	mov	r9, r1
   18728:	ldr	r3, [r6]
   1872c:	ldr	r1, [sp, #20]
   18730:	mov	r7, r0
   18734:	mov	r0, r4
   18738:	mov	r2, #256	; 0x100
   1873c:	bl	18b8 <fread@plt>
   18740:	mov	r1, r4
   18744:	mov	r2, #0
   18748:	vld1.32	{d16-d17}, [r1]!
   1874c:	add	r3, sl, r2
   18750:	add	r2, r2, #4
   18754:	cmp	r2, #256	; 0x100
   18758:	vmovn.i32	d16, q8
   1875c:	vuzp.8	d16, d17
   18760:	vst1.32	{d16[0]}, [r3]
   18764:	bne	18748 <ReadUInt8Data+0x109c>
   18768:	ldr	r2, [sp, #16]
   1876c:	add	r5, r0, r5
   18770:	add	r0, r7, #256	; 0x100
   18774:	add	sl, sl, #256	; 0x100
   18778:	add	r1, r9, #256	; 0x100
   1877c:	cmp	r0, r2
   18780:	blt	18724 <ReadUInt8Data+0x1078>
   18784:	cmp	r0, r8
   18788:	bge	18fa4 <ReadUInt8Data+0x18f8>
   1878c:	mov	r1, r6
   18790:	sub	r6, r8, r0
   18794:	add	r4, sp, #24
   18798:	ldr	r3, [r1]
   1879c:	ldr	r1, [sp, #20]
   187a0:	mov	r0, r4
   187a4:	mov	r2, r6
   187a8:	bl	18b8 <fread@plt>
   187ac:	add	r5, r0, r5
   187b0:	cmp	r6, #1
   187b4:	blt	18fa4 <ReadUInt8Data+0x18f8>
   187b8:	mov	r0, #0
   187bc:	cmp	r6, #4
   187c0:	bcc	187f8 <ReadUInt8Data+0x114c>
   187c4:	ldr	r0, [sp, #16]
   187c8:	mov	r2, r9
   187cc:	sub	r0, r0, r7
   187d0:	bic	r1, r0, #3
   187d4:	bic	r0, r6, #3
   187d8:	vld1.32	{d16-d17}, [r4]!
   187dc:	subs	r1, r1, #4
   187e0:	vmovn.i32	d16, q8
   187e4:	vuzp.8	d16, d17
   187e8:	vst1.32	{d16[0]}, [r2]!
   187ec:	bne	187d8 <ReadUInt8Data+0x112c>
   187f0:	cmp	r6, r0
   187f4:	beq	18fa4 <ReadUInt8Data+0x18f8>
   187f8:	ldr	r3, [sp, #16]
   187fc:	add	r2, sp, #24
   18800:	add	r1, r9, r0
   18804:	add	r2, r2, r0, lsl #2
   18808:	sub	r3, r3, r7
   1880c:	sub	r0, r3, r0
   18810:	ldr	r3, [r2], #4
   18814:	subs	r0, r0, #1
   18818:	strb	r3, [r1], #1
   1881c:	bne	18810 <ReadUInt8Data+0x1164>
   18820:	b	18fa4 <ReadUInt8Data+0x18f8>
   18824:	sub	r0, r8, #256	; 0x100
   18828:	add	r1, sl, #256	; 0x100
   1882c:	add	r4, sp, #24
   18830:	mov	r5, #0
   18834:	str	r0, [sp, #16]
   18838:	mov	r0, #0
   1883c:	mov	r9, r1
   18840:	ldr	r3, [r6]
   18844:	ldr	r1, [sp, #20]
   18848:	mov	r7, r0
   1884c:	mov	r0, r4
   18850:	mov	r2, #256	; 0x100
   18854:	bl	18b8 <fread@plt>
   18858:	mov	r1, r4
   1885c:	mov	r2, #0
   18860:	vld1.32	{d16-d17}, [r1]!
   18864:	add	r3, sl, r2
   18868:	add	r2, r2, #4
   1886c:	cmp	r2, #256	; 0x100
   18870:	vmovn.i32	d16, q8
   18874:	vuzp.8	d16, d17
   18878:	vst1.32	{d16[0]}, [r3]
   1887c:	bne	18860 <ReadUInt8Data+0x11b4>
   18880:	ldr	r2, [sp, #16]
   18884:	add	r5, r0, r5
   18888:	add	r0, r7, #256	; 0x100
   1888c:	add	sl, sl, #256	; 0x100
   18890:	add	r1, r9, #256	; 0x100
   18894:	cmp	r0, r2
   18898:	blt	1883c <ReadUInt8Data+0x1190>
   1889c:	cmp	r0, r8
   188a0:	bge	18fa4 <ReadUInt8Data+0x18f8>
   188a4:	mov	r1, r6
   188a8:	sub	r6, r8, r0
   188ac:	add	r4, sp, #24
   188b0:	ldr	r3, [r1]
   188b4:	ldr	r1, [sp, #20]
   188b8:	mov	r0, r4
   188bc:	mov	r2, r6
   188c0:	bl	18b8 <fread@plt>
   188c4:	add	r5, r0, r5
   188c8:	cmp	r6, #1
   188cc:	blt	18fa4 <ReadUInt8Data+0x18f8>
   188d0:	mov	r0, #0
   188d4:	cmp	r6, #4
   188d8:	bcc	18910 <ReadUInt8Data+0x1264>
   188dc:	ldr	r0, [sp, #16]
   188e0:	mov	r2, r9
   188e4:	sub	r0, r0, r7
   188e8:	bic	r1, r0, #3
   188ec:	bic	r0, r6, #3
   188f0:	vld1.32	{d16-d17}, [r4]!
   188f4:	subs	r1, r1, #4
   188f8:	vmovn.i32	d16, q8
   188fc:	vuzp.8	d16, d17
   18900:	vst1.32	{d16[0]}, [r2]!
   18904:	bne	188f0 <ReadUInt8Data+0x1244>
   18908:	cmp	r6, r0
   1890c:	beq	18fa4 <ReadUInt8Data+0x18f8>
   18910:	ldr	r3, [sp, #16]
   18914:	add	r2, sp, #24
   18918:	add	r1, r9, r0
   1891c:	add	r2, r2, r0, lsl #2
   18920:	sub	r3, r3, r7
   18924:	sub	r0, r3, r0
   18928:	ldr	r3, [r2], #4
   1892c:	subs	r0, r0, #1
   18930:	strb	r3, [r1], #1
   18934:	bne	18928 <ReadUInt8Data+0x127c>
   18938:	b	18fa4 <ReadUInt8Data+0x18f8>
   1893c:	sub	r0, r8, #256	; 0x100
   18940:	add	r1, sl, #256	; 0x100
   18944:	add	r4, sp, #24
   18948:	mov	r5, #0
   1894c:	str	r0, [sp, #16]
   18950:	mov	r0, #0
   18954:	mov	r9, r1
   18958:	ldr	r3, [r6]
   1895c:	ldr	r1, [sp, #20]
   18960:	mov	r7, r0
   18964:	mov	r0, r4
   18968:	mov	r2, #256	; 0x100
   1896c:	bl	18b8 <fread@plt>
   18970:	mov	r1, r4
   18974:	mov	r2, #0
   18978:	vld1.32	{d16-d17}, [r1]!
   1897c:	add	r3, sl, r2
   18980:	add	r2, r2, #4
   18984:	cmp	r2, #256	; 0x100
   18988:	vcvt.s32.f32	q8, q8
   1898c:	vmovn.i32	d16, q8
   18990:	vuzp.8	d16, d17
   18994:	vst1.32	{d16[0]}, [r3]
   18998:	bne	18978 <ReadUInt8Data+0x12cc>
   1899c:	ldr	r2, [sp, #16]
   189a0:	add	r5, r0, r5
   189a4:	add	r0, r7, #256	; 0x100
   189a8:	add	sl, sl, #256	; 0x100
   189ac:	add	r1, r9, #256	; 0x100
   189b0:	cmp	r0, r2
   189b4:	blt	18954 <ReadUInt8Data+0x12a8>
   189b8:	cmp	r0, r8
   189bc:	bge	18fa4 <ReadUInt8Data+0x18f8>
   189c0:	mov	r1, r6
   189c4:	sub	r6, r8, r0
   189c8:	add	r4, sp, #24
   189cc:	ldr	r3, [r1]
   189d0:	ldr	r1, [sp, #20]
   189d4:	mov	r0, r4
   189d8:	mov	r2, r6
   189dc:	bl	18b8 <fread@plt>
   189e0:	add	r5, r0, r5
   189e4:	cmp	r6, #1
   189e8:	blt	18fa4 <ReadUInt8Data+0x18f8>
   189ec:	mov	r0, #0
   189f0:	cmp	r6, #4
   189f4:	bcc	18a30 <ReadUInt8Data+0x1384>
   189f8:	ldr	r0, [sp, #16]
   189fc:	mov	r2, r9
   18a00:	sub	r0, r0, r7
   18a04:	bic	r1, r0, #3
   18a08:	bic	r0, r6, #3
   18a0c:	vld1.32	{d16-d17}, [r4]!
   18a10:	subs	r1, r1, #4
   18a14:	vcvt.s32.f32	q8, q8
   18a18:	vmovn.i32	d16, q8
   18a1c:	vuzp.8	d16, d17
   18a20:	vst1.32	{d16[0]}, [r2]!
   18a24:	bne	18a0c <ReadUInt8Data+0x1360>
   18a28:	cmp	r6, r0
   18a2c:	beq	18fa4 <ReadUInt8Data+0x18f8>
   18a30:	ldr	r3, [sp, #16]
   18a34:	add	r2, sp, #24
   18a38:	add	r1, r9, r0
   18a3c:	add	r2, r2, r0, lsl #2
   18a40:	sub	r3, r3, r7
   18a44:	sub	r0, r3, r0
   18a48:	vldr	s0, [r2]
   18a4c:	subs	r0, r0, #1
   18a50:	add	r2, r2, #4
   18a54:	vcvt.u32.f32	s0, s0
   18a58:	vmov	r3, s0
   18a5c:	strb	r3, [r1], #1
   18a60:	bne	18a48 <ReadUInt8Data+0x139c>
   18a64:	b	18fa4 <ReadUInt8Data+0x18f8>
   18a68:	ldr	r5, [sp, #20]
   18a6c:	str	r6, [sp, #16]
   18a70:	sub	r0, r8, #256	; 0x100
   18a74:	str	r8, [sp, #8]
   18a78:	mov	r8, #0
   18a7c:	add	r9, sp, #24
   18a80:	mov	r4, sl
   18a84:	mov	r6, #0
   18a88:	str	r0, [sp, #12]
   18a8c:	ldr	r0, [sp, #16]
   18a90:	mov	r1, r5
   18a94:	mov	r2, #256	; 0x100
   18a98:	mov	r7, r8
   18a9c:	ldr	r3, [r0]
   18aa0:	mov	r0, r9
   18aa4:	bl	18b8 <fread@plt>
   18aa8:	mov	r1, r9
   18aac:	mov	r2, #0
   18ab0:	vldr	d16, [r1]
   18ab4:	add	r1, r1, #8
   18ab8:	vcvt.u32.f64	s0, d16
   18abc:	vmov	r3, s0
   18ac0:	strb	r3, [r4, r2]
   18ac4:	add	r2, r2, #1
   18ac8:	cmp	r2, #256	; 0x100
   18acc:	bne	18ab0 <ReadUInt8Data+0x1404>
   18ad0:	add	r6, r0, r6
   18ad4:	ldr	r0, [sp, #12]
   18ad8:	add	r8, r7, #256	; 0x100
   18adc:	add	r4, r4, #256	; 0x100
   18ae0:	cmp	r8, r0
   18ae4:	blt	18a8c <ReadUInt8Data+0x13e0>
   18ae8:	ldr	r0, [sp, #8]
   18aec:	cmp	r8, r0
   18af0:	bge	18b48 <ReadUInt8Data+0x149c>
   18af4:	sub	r9, r0, r8
   18af8:	ldr	r0, [sp, #16]
   18afc:	add	r4, sp, #24
   18b00:	mov	r1, r5
   18b04:	mov	r2, r9
   18b08:	ldr	r3, [r0]
   18b0c:	mov	r0, r4
   18b10:	bl	18b8 <fread@plt>
   18b14:	add	r6, r0, r6
   18b18:	cmp	r9, #1
   18b1c:	blt	18b48 <ReadUInt8Data+0x149c>
   18b20:	ldr	r0, [sp, #12]
   18b24:	sub	r0, r0, r7
   18b28:	vldr	d16, [r4]
   18b2c:	subs	r0, r0, #1
   18b30:	add	r4, r4, #8
   18b34:	vcvt.u32.f64	s0, d16
   18b38:	vmov	r1, s0
   18b3c:	strb	r1, [sl, r8]
   18b40:	add	sl, sl, #1
   18b44:	bne	18b28 <ReadUInt8Data+0x147c>
   18b48:	mov	r5, r6
   18b4c:	b	18fa4 <ReadUInt8Data+0x18f8>
   18b50:	sub	r0, r8, #256	; 0x100
   18b54:	str	r8, [sp, #8]
   18b58:	add	r1, sl, #256	; 0x100
   18b5c:	mov	r5, sl
   18b60:	mov	r8, #0
   18b64:	str	r4, [sp, #4]
   18b68:	str	r0, [sp, #16]
   18b6c:	mov	r0, #0
   18b70:	mov	r9, r1
   18b74:	ldr	r3, [r6]
   18b78:	ldr	r1, [sp, #20]
   18b7c:	mov	r4, r6
   18b80:	add	r6, sp, #24
   18b84:	mov	r7, r0
   18b88:	mov	r2, #256	; 0x100
   18b8c:	mov	r0, r6
   18b90:	bl	18b8 <fread@plt>
   18b94:	mov	r1, r6
   18b98:	mov	r2, #0
   18b9c:	vld1.64	{d16-d17}, [r1]!
   18ba0:	mov	r6, r5
   18ba4:	vmovn.i64	d16, q8
   18ba8:	vmov.32	r3, d16[0]
   18bac:	strb	r3, [r6, r2]!
   18bb0:	add	r2, r2, #2
   18bb4:	vmov.32	r3, d16[1]
   18bb8:	cmp	r2, #256	; 0x100
   18bbc:	strb	r3, [r6, #1]
   18bc0:	bne	18b9c <ReadUInt8Data+0x14f0>
   18bc4:	ldr	r2, [sp, #16]
   18bc8:	add	r8, r0, r8
   18bcc:	add	r0, r7, #256	; 0x100
   18bd0:	add	r5, r5, #256	; 0x100
   18bd4:	add	r1, r9, #256	; 0x100
   18bd8:	mov	r6, r4
   18bdc:	cmp	r0, r2
   18be0:	blt	18b70 <ReadUInt8Data+0x14c4>
   18be4:	ldr	r1, [sp, #8]
   18be8:	cmp	r0, r1
   18bec:	bge	18ca0 <ReadUInt8Data+0x15f4>
   18bf0:	sub	r5, r1, r0
   18bf4:	ldr	r3, [r6]
   18bf8:	ldr	r1, [sp, #20]
   18bfc:	add	r4, sp, #24
   18c00:	mov	r0, r4
   18c04:	mov	r2, r5
   18c08:	bl	18b8 <fread@plt>
   18c0c:	mov	ip, r5
   18c10:	mov	r5, r8
   18c14:	add	r5, r0, r8
   18c18:	cmp	ip, #1
   18c1c:	blt	18cac <ReadUInt8Data+0x1600>
   18c20:	ldr	r8, [sp, #8]
   18c24:	mov	r0, #0
   18c28:	beq	18c6c <ReadUInt8Data+0x15c0>
   18c2c:	ldr	r0, [sp, #16]
   18c30:	mov	r2, r9
   18c34:	sub	r0, r0, r7
   18c38:	bic	r1, r0, #1
   18c3c:	bic	r0, ip, #1
   18c40:	vld1.64	{d16-d17}, [r4]!
   18c44:	subs	r1, r1, #2
   18c48:	vmovn.i64	d16, q8
   18c4c:	vmov.32	r3, d16[1]
   18c50:	strb	r3, [r2, #1]
   18c54:	vmov.32	r3, d16[0]
   18c58:	strb	r3, [r2]
   18c5c:	add	r2, r2, #2
   18c60:	bne	18c40 <ReadUInt8Data+0x1594>
   18c64:	cmp	ip, r0
   18c68:	beq	18cb0 <ReadUInt8Data+0x1604>
   18c6c:	ldr	r3, [sp, #16]
   18c70:	add	r2, sp, #24
   18c74:	add	r1, r9, r0
   18c78:	add	r2, r2, r0, lsl #3
   18c7c:	sub	r3, r3, r7
   18c80:	sub	r0, r3, r0
   18c84:	ldrb	r3, [r2], #8
   18c88:	subs	r0, r0, #1
   18c8c:	strb	r3, [r1], #1
   18c90:	bne	18c84 <ReadUInt8Data+0x15d8>
   18c94:	b	18cb0 <ReadUInt8Data+0x1604>
   18c98:	ldr	r6, [sp, #16]
   18c9c:	b	18cb0 <ReadUInt8Data+0x1604>
   18ca0:	mov	r5, r8
   18ca4:	mov	r8, r1
   18ca8:	b	18cb0 <ReadUInt8Data+0x1604>
   18cac:	ldr	r8, [sp, #8]
   18cb0:	ldr	r4, [sp, #4]
   18cb4:	cmp	r4, #13
   18cb8:	bne	18fa4 <ReadUInt8Data+0x18f8>
   18cbc:	ldr	r0, [r6, #20]
   18cc0:	cmp	r0, #0
   18cc4:	beq	18d10 <ReadUInt8Data+0x1664>
   18cc8:	cmp	r8, #256	; 0x100
   18ccc:	bgt	18da0 <ReadUInt8Data+0x16f4>
   18cd0:	ldr	r3, [r6]
   18cd4:	ldr	r1, [sp, #20]
   18cd8:	add	r4, sp, #24
   18cdc:	mov	r2, r8
   18ce0:	mov	r0, r4
   18ce4:	bl	18b8 <fread@plt>
   18ce8:	add	r5, r0, r5
   18cec:	cmp	r8, #1
   18cf0:	blt	18fa4 <ReadUInt8Data+0x18f8>
   18cf4:	mov	r0, r4
   18cf8:	bl	1bd4 <Mat_uint64Swap>
   18cfc:	strb	r0, [sl], #1
   18d00:	subs	r8, r8, #1
   18d04:	add	r4, r4, #8
   18d08:	bne	18cf4 <ReadUInt8Data+0x1648>
   18d0c:	b	18fa4 <ReadUInt8Data+0x18f8>
   18d10:	cmp	r8, #256	; 0x100
   18d14:	bgt	18e7c <ReadUInt8Data+0x17d0>
   18d18:	ldr	r3, [r6]
   18d1c:	ldr	r1, [sp, #20]
   18d20:	add	r4, sp, #24
   18d24:	mov	r2, r8
   18d28:	mov	r0, r4
   18d2c:	bl	18b8 <fread@plt>
   18d30:	add	r5, r0, r5
   18d34:	cmp	r8, #1
   18d38:	blt	18fa4 <ReadUInt8Data+0x18f8>
   18d3c:	mov	r0, #0
   18d40:	beq	18d7c <ReadUInt8Data+0x16d0>
   18d44:	bic	r0, r8, #1
   18d48:	mov	r2, sl
   18d4c:	mov	r1, r0
   18d50:	vld1.64	{d16-d17}, [r4]!
   18d54:	subs	r1, r1, #2
   18d58:	vmovn.i64	d16, q8
   18d5c:	vmov.32	r3, d16[1]
   18d60:	strb	r3, [r2, #1]
   18d64:	vmov.32	r3, d16[0]
   18d68:	strb	r3, [r2]
   18d6c:	add	r2, r2, #2
   18d70:	bne	18d50 <ReadUInt8Data+0x16a4>
   18d74:	cmp	r0, r8
   18d78:	beq	18fa4 <ReadUInt8Data+0x18f8>
   18d7c:	add	r3, sp, #24
   18d80:	sub	r1, r8, r0
   18d84:	add	r2, sl, r0
   18d88:	add	r0, r3, r0, lsl #3
   18d8c:	ldrb	r3, [r0], #8
   18d90:	subs	r1, r1, #1
   18d94:	strb	r3, [r2], #1
   18d98:	bne	18d8c <ReadUInt8Data+0x16e0>
   18d9c:	b	18fa4 <ReadUInt8Data+0x18f8>
   18da0:	str	r6, [sp, #16]
   18da4:	sub	r0, r8, #256	; 0x100
   18da8:	mov	r7, #0
   18dac:	mov	r6, sl
   18db0:	str	r8, [sp, #8]
   18db4:	str	r0, [sp, #12]
   18db8:	ldr	r0, [sp, #16]
   18dbc:	ldr	r1, [sp, #20]
   18dc0:	add	r4, sp, #24
   18dc4:	mov	r2, #256	; 0x100
   18dc8:	mov	r8, r5
   18dcc:	mov	r9, r7
   18dd0:	ldr	r3, [r0]
   18dd4:	mov	r0, r4
   18dd8:	bl	18b8 <fread@plt>
   18ddc:	mov	r7, r0
   18de0:	mov	r5, #0
   18de4:	mov	r0, r4
   18de8:	bl	1bd4 <Mat_uint64Swap>
   18dec:	strb	r0, [r6, r5]
   18df0:	add	r5, r5, #1
   18df4:	add	r4, r4, #8
   18df8:	cmp	r5, #256	; 0x100
   18dfc:	bne	18de4 <ReadUInt8Data+0x1738>
   18e00:	ldr	r0, [sp, #12]
   18e04:	mov	r5, r8
   18e08:	add	r6, r6, #256	; 0x100
   18e0c:	add	r5, r7, r8
   18e10:	add	r7, r9, #256	; 0x100
   18e14:	cmp	r7, r0
   18e18:	blt	18db8 <ReadUInt8Data+0x170c>
   18e1c:	ldr	r0, [sp, #8]
   18e20:	cmp	r7, r0
   18e24:	bge	18fa4 <ReadUInt8Data+0x18f8>
   18e28:	sub	r8, r0, r7
   18e2c:	ldr	r0, [sp, #16]
   18e30:	ldr	r1, [sp, #20]
   18e34:	add	r4, sp, #24
   18e38:	mov	r2, r8
   18e3c:	ldr	r3, [r0]
   18e40:	mov	r0, r4
   18e44:	bl	18b8 <fread@plt>
   18e48:	add	r5, r0, r5
   18e4c:	cmp	r8, #1
   18e50:	blt	18fa4 <ReadUInt8Data+0x18f8>
   18e54:	ldr	r0, [sp, #12]
   18e58:	sub	r6, r0, r9
   18e5c:	mov	r0, r4
   18e60:	bl	1bd4 <Mat_uint64Swap>
   18e64:	strb	r0, [sl, r7]
   18e68:	add	sl, sl, #1
   18e6c:	subs	r6, r6, #1
   18e70:	add	r4, r4, #8
   18e74:	bne	18e5c <ReadUInt8Data+0x17b0>
   18e78:	b	18fa4 <ReadUInt8Data+0x18f8>
   18e7c:	sub	r0, r8, #256	; 0x100
   18e80:	add	r1, sl, #256	; 0x100
   18e84:	str	r0, [sp, #16]
   18e88:	mov	r0, #0
   18e8c:	mov	r9, r1
   18e90:	ldr	r3, [r6]
   18e94:	ldr	r1, [sp, #20]
   18e98:	mov	r4, r6
   18e9c:	add	r6, sp, #24
   18ea0:	mov	r7, r0
   18ea4:	mov	r2, #256	; 0x100
   18ea8:	mov	r0, r6
   18eac:	bl	18b8 <fread@plt>
   18eb0:	mov	r1, r6
   18eb4:	mov	r2, #0
   18eb8:	vld1.64	{d16-d17}, [r1]!
   18ebc:	mov	r6, sl
   18ec0:	vmovn.i64	d16, q8
   18ec4:	vmov.32	r3, d16[0]
   18ec8:	strb	r3, [r6, r2]!
   18ecc:	add	r2, r2, #2
   18ed0:	vmov.32	r3, d16[1]
   18ed4:	cmp	r2, #256	; 0x100
   18ed8:	strb	r3, [r6, #1]
   18edc:	bne	18eb8 <ReadUInt8Data+0x180c>
   18ee0:	ldr	r2, [sp, #16]
   18ee4:	add	r5, r0, r5
   18ee8:	add	r0, r7, #256	; 0x100
   18eec:	add	sl, sl, #256	; 0x100
   18ef0:	add	r1, r9, #256	; 0x100
   18ef4:	mov	r6, r4
   18ef8:	cmp	r0, r2
   18efc:	blt	18e8c <ReadUInt8Data+0x17e0>
   18f00:	cmp	r0, r8
   18f04:	bge	18fa4 <ReadUInt8Data+0x18f8>
   18f08:	mov	r1, r6
   18f0c:	sub	r6, r8, r0
   18f10:	add	r4, sp, #24
   18f14:	ldr	r3, [r1]
   18f18:	ldr	r1, [sp, #20]
   18f1c:	mov	r0, r4
   18f20:	mov	r2, r6
   18f24:	bl	18b8 <fread@plt>
   18f28:	add	r5, r0, r5
   18f2c:	cmp	r6, #1
   18f30:	blt	18fa4 <ReadUInt8Data+0x18f8>
   18f34:	mov	r0, #0
   18f38:	beq	18f7c <ReadUInt8Data+0x18d0>
   18f3c:	ldr	r0, [sp, #16]
   18f40:	mov	r2, r9
   18f44:	sub	r0, r0, r7
   18f48:	bic	r1, r0, #1
   18f4c:	bic	r0, r6, #1
   18f50:	vld1.64	{d16-d17}, [r4]!
   18f54:	subs	r1, r1, #2
   18f58:	vmovn.i64	d16, q8
   18f5c:	vmov.32	r3, d16[1]
   18f60:	strb	r3, [r2, #1]
   18f64:	vmov.32	r3, d16[0]
   18f68:	strb	r3, [r2]
   18f6c:	add	r2, r2, #2
   18f70:	bne	18f50 <ReadUInt8Data+0x18a4>
   18f74:	cmp	r6, r0
   18f78:	beq	18fa4 <ReadUInt8Data+0x18f8>
   18f7c:	ldr	r3, [sp, #16]
   18f80:	add	r2, sp, #24
   18f84:	add	r1, r9, r0
   18f88:	add	r2, r2, r0, lsl #3
   18f8c:	sub	r3, r3, r7
   18f90:	sub	r0, r3, r0
   18f94:	ldrb	r3, [r2], #8
   18f98:	subs	r0, r0, #1
   18f9c:	strb	r3, [r1], #1
   18fa0:	bne	18f94 <ReadUInt8Data+0x18e8>
   18fa4:	ldr	r0, [sp, #20]
   18fa8:	mul	r0, r5, r0
   18fac:	sub	sp, fp, #28
   18fb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018fb4 <ReadCompressedUInt8Data>:
   18fb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fb8:	add	fp, sp, #28
   18fbc:	sub	sp, sp, #12
   18fc0:	mov	r7, r0
   18fc4:	mov	r0, #0
   18fc8:	cmp	r1, #0
   18fcc:	beq	18fe0 <ReadCompressedUInt8Data+0x2c>
   18fd0:	cmp	r7, #0
   18fd4:	movne	r5, r2
   18fd8:	cmpne	r2, #0
   18fdc:	bne	18fe8 <ReadCompressedUInt8Data+0x34>
   18fe0:	sub	sp, fp, #28
   18fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fe8:	ldr	sl, [fp, #8]
   18fec:	mov	r0, r3
   18ff0:	mov	r4, r3
   18ff4:	mov	r6, r1
   18ff8:	bl	1924 <Mat_SizeOf@plt>
   18ffc:	mov	r9, r0
   19000:	sub	r0, r4, #1
   19004:	cmp	r0, #12
   19008:	bhi	194d8 <ReadCompressedUInt8Data+0x524>
   1900c:	add	r1, pc, #4
   19010:	ldr	r0, [r1, r0, lsl #2]
   19014:	add	pc, r1, r0
   19018:	.word	0x00000034
   1901c:	.word	0x0000006c
   19020:	.word	0x000000a4
   19024:	.word	0x000000ec
   19028:	.word	0x00000134
   1902c:	.word	0x0000017c
   19030:	.word	0x000001c4
   19034:	.word	0x000004c0
   19038:	.word	0x00000214
   1903c:	.word	0x000004c0
   19040:	.word	0x000004c0
   19044:	.word	0x00000264
   19048:	.word	0x000002ac
   1904c:	cmp	sl, #1
   19050:	blt	194d8 <ReadCompressedUInt8Data+0x524>
   19054:	mov	r8, sp
   19058:	mov	r4, sl
   1905c:	mov	r0, r7
   19060:	mov	r1, r6
   19064:	mov	r2, r8
   19068:	mov	r3, r9
   1906c:	bl	32b8 <InflateData>
   19070:	ldrb	r0, [sp]
   19074:	subs	r4, r4, #1
   19078:	strb	r0, [r5], #1
   1907c:	bne	1905c <ReadCompressedUInt8Data+0xa8>
   19080:	b	194d8 <ReadCompressedUInt8Data+0x524>
   19084:	cmp	sl, #1
   19088:	blt	194d8 <ReadCompressedUInt8Data+0x524>
   1908c:	mov	r8, sp
   19090:	mov	r4, sl
   19094:	mov	r0, r7
   19098:	mov	r1, r6
   1909c:	mov	r2, r8
   190a0:	mov	r3, r9
   190a4:	bl	32b8 <InflateData>
   190a8:	ldrb	r0, [sp]
   190ac:	subs	r4, r4, #1
   190b0:	strb	r0, [r5], #1
   190b4:	bne	19094 <ReadCompressedUInt8Data+0xe0>
   190b8:	b	194d8 <ReadCompressedUInt8Data+0x524>
   190bc:	ldr	r0, [r7, #20]
   190c0:	cmp	r0, #0
   190c4:	beq	1930c <ReadCompressedUInt8Data+0x358>
   190c8:	cmp	sl, #1
   190cc:	blt	194d8 <ReadCompressedUInt8Data+0x524>
   190d0:	mov	r8, sp
   190d4:	mov	r4, sl
   190d8:	mov	r0, r7
   190dc:	mov	r1, r6
   190e0:	mov	r2, r8
   190e4:	mov	r3, r9
   190e8:	bl	32b8 <InflateData>
   190ec:	mov	r0, r8
   190f0:	bl	1c18 <Mat_int16Swap>
   190f4:	strb	r0, [r5], #1
   190f8:	subs	r4, r4, #1
   190fc:	bne	190d8 <ReadCompressedUInt8Data+0x124>
   19100:	b	194d8 <ReadCompressedUInt8Data+0x524>
   19104:	ldr	r0, [r7, #20]
   19108:	cmp	r0, #0
   1910c:	beq	19344 <ReadCompressedUInt8Data+0x390>
   19110:	cmp	sl, #1
   19114:	blt	194d8 <ReadCompressedUInt8Data+0x524>
   19118:	mov	r8, sp
   1911c:	mov	r4, sl
   19120:	mov	r0, r7
   19124:	mov	r1, r6
   19128:	mov	r2, r8
   1912c:	mov	r3, r9
   19130:	bl	32b8 <InflateData>
   19134:	mov	r0, r8
   19138:	bl	1c2c <Mat_uint16Swap>
   1913c:	strb	r0, [r5], #1
   19140:	subs	r4, r4, #1
   19144:	bne	19120 <ReadCompressedUInt8Data+0x16c>
   19148:	b	194d8 <ReadCompressedUInt8Data+0x524>
   1914c:	ldr	r0, [r7, #20]
   19150:	cmp	r0, #0
   19154:	beq	1937c <ReadCompressedUInt8Data+0x3c8>
   19158:	cmp	sl, #1
   1915c:	blt	194d8 <ReadCompressedUInt8Data+0x524>
   19160:	mov	r8, sp
   19164:	mov	r4, sl
   19168:	mov	r0, r7
   1916c:	mov	r1, r6
   19170:	mov	r2, r8
   19174:	mov	r3, r9
   19178:	bl	32b8 <InflateData>
   1917c:	mov	r0, r8
   19180:	bl	1bf0 <Mat_int32Swap>
   19184:	strb	r0, [r5], #1
   19188:	subs	r4, r4, #1
   1918c:	bne	19168 <ReadCompressedUInt8Data+0x1b4>
   19190:	b	194d8 <ReadCompressedUInt8Data+0x524>
   19194:	ldr	r0, [r7, #20]
   19198:	cmp	r0, #0
   1919c:	beq	193b4 <ReadCompressedUInt8Data+0x400>
   191a0:	cmp	sl, #1
   191a4:	blt	194d8 <ReadCompressedUInt8Data+0x524>
   191a8:	mov	r8, sp
   191ac:	mov	r4, sl
   191b0:	mov	r0, r7
   191b4:	mov	r1, r6
   191b8:	mov	r2, r8
   191bc:	mov	r3, r9
   191c0:	bl	32b8 <InflateData>
   191c4:	mov	r0, r8
   191c8:	bl	1c04 <Mat_uint32Swap>
   191cc:	strb	r0, [r5], #1
   191d0:	subs	r4, r4, #1
   191d4:	bne	191b0 <ReadCompressedUInt8Data+0x1fc>
   191d8:	b	194d8 <ReadCompressedUInt8Data+0x524>
   191dc:	ldr	r0, [r7, #20]
   191e0:	cmp	r0, #0
   191e4:	beq	193ec <ReadCompressedUInt8Data+0x438>
   191e8:	cmp	sl, #1
   191ec:	blt	194d8 <ReadCompressedUInt8Data+0x524>
   191f0:	mov	r8, sp
   191f4:	mov	r4, sl
   191f8:	mov	r0, r7
   191fc:	mov	r1, r6
   19200:	mov	r2, r8
   19204:	mov	r3, r9
   19208:	bl	32b8 <InflateData>
   1920c:	mov	r0, r8
   19210:	bl	1c44 <Mat_floatSwap>
   19214:	vcvt.u32.f32	s0, s0
   19218:	subs	r4, r4, #1
   1921c:	vmov	r0, s0
   19220:	strb	r0, [r5], #1
   19224:	bne	191f8 <ReadCompressedUInt8Data+0x244>
   19228:	b	194d8 <ReadCompressedUInt8Data+0x524>
   1922c:	ldr	r0, [r7, #20]
   19230:	cmp	r0, #0
   19234:	beq	1942c <ReadCompressedUInt8Data+0x478>
   19238:	cmp	sl, #1
   1923c:	blt	194d8 <ReadCompressedUInt8Data+0x524>
   19240:	mov	r8, sp
   19244:	mov	r4, sl
   19248:	mov	r0, r7
   1924c:	mov	r1, r6
   19250:	mov	r2, r8
   19254:	mov	r3, r9
   19258:	bl	32b8 <InflateData>
   1925c:	mov	r0, r8
   19260:	bl	1c88 <Mat_doubleSwap>
   19264:	vcvt.u32.f64	s0, d0
   19268:	subs	r4, r4, #1
   1926c:	vmov	r0, s0
   19270:	strb	r0, [r5], #1
   19274:	bne	19248 <ReadCompressedUInt8Data+0x294>
   19278:	b	194d8 <ReadCompressedUInt8Data+0x524>
   1927c:	ldr	r0, [r7, #20]
   19280:	cmp	r0, #0
   19284:	beq	1946c <ReadCompressedUInt8Data+0x4b8>
   19288:	cmp	sl, #1
   1928c:	blt	194d8 <ReadCompressedUInt8Data+0x524>
   19290:	mov	r8, sp
   19294:	mov	r4, sl
   19298:	mov	r0, r7
   1929c:	mov	r1, r6
   192a0:	mov	r2, r8
   192a4:	mov	r3, r9
   192a8:	bl	32b8 <InflateData>
   192ac:	mov	r0, r8
   192b0:	bl	1b84 <Mat_int64Swap>
   192b4:	strb	r0, [r5], #1
   192b8:	subs	r4, r4, #1
   192bc:	bne	19298 <ReadCompressedUInt8Data+0x2e4>
   192c0:	b	194d8 <ReadCompressedUInt8Data+0x524>
   192c4:	ldr	r0, [r7, #20]
   192c8:	cmp	r0, #0
   192cc:	beq	194a4 <ReadCompressedUInt8Data+0x4f0>
   192d0:	cmp	sl, #1
   192d4:	blt	194d8 <ReadCompressedUInt8Data+0x524>
   192d8:	mov	r8, sp
   192dc:	mov	r4, sl
   192e0:	mov	r0, r7
   192e4:	mov	r1, r6
   192e8:	mov	r2, r8
   192ec:	mov	r3, r9
   192f0:	bl	32b8 <InflateData>
   192f4:	mov	r0, r8
   192f8:	bl	1bd4 <Mat_uint64Swap>
   192fc:	strb	r0, [r5], #1
   19300:	subs	r4, r4, #1
   19304:	bne	192e0 <ReadCompressedUInt8Data+0x32c>
   19308:	b	194d8 <ReadCompressedUInt8Data+0x524>
   1930c:	cmp	sl, #1
   19310:	blt	194d8 <ReadCompressedUInt8Data+0x524>
   19314:	mov	r8, sp
   19318:	mov	r4, sl
   1931c:	mov	r0, r7
   19320:	mov	r1, r6
   19324:	mov	r2, r8
   19328:	mov	r3, r9
   1932c:	bl	32b8 <InflateData>
   19330:	ldrb	r0, [sp]
   19334:	subs	r4, r4, #1
   19338:	strb	r0, [r5], #1
   1933c:	bne	1931c <ReadCompressedUInt8Data+0x368>
   19340:	b	194d8 <ReadCompressedUInt8Data+0x524>
   19344:	cmp	sl, #1
   19348:	blt	194d8 <ReadCompressedUInt8Data+0x524>
   1934c:	mov	r8, sp
   19350:	mov	r4, sl
   19354:	mov	r0, r7
   19358:	mov	r1, r6
   1935c:	mov	r2, r8
   19360:	mov	r3, r9
   19364:	bl	32b8 <InflateData>
   19368:	ldrb	r0, [sp]
   1936c:	subs	r4, r4, #1
   19370:	strb	r0, [r5], #1
   19374:	bne	19354 <ReadCompressedUInt8Data+0x3a0>
   19378:	b	194d8 <ReadCompressedUInt8Data+0x524>
   1937c:	cmp	sl, #1
   19380:	blt	194d8 <ReadCompressedUInt8Data+0x524>
   19384:	mov	r8, sp
   19388:	mov	r4, sl
   1938c:	mov	r0, r7
   19390:	mov	r1, r6
   19394:	mov	r2, r8
   19398:	mov	r3, r9
   1939c:	bl	32b8 <InflateData>
   193a0:	ldr	r0, [sp]
   193a4:	subs	r4, r4, #1
   193a8:	strb	r0, [r5], #1
   193ac:	bne	1938c <ReadCompressedUInt8Data+0x3d8>
   193b0:	b	194d8 <ReadCompressedUInt8Data+0x524>
   193b4:	cmp	sl, #1
   193b8:	blt	194d8 <ReadCompressedUInt8Data+0x524>
   193bc:	mov	r8, sp
   193c0:	mov	r4, sl
   193c4:	mov	r0, r7
   193c8:	mov	r1, r6
   193cc:	mov	r2, r8
   193d0:	mov	r3, r9
   193d4:	bl	32b8 <InflateData>
   193d8:	ldr	r0, [sp]
   193dc:	subs	r4, r4, #1
   193e0:	strb	r0, [r5], #1
   193e4:	bne	193c4 <ReadCompressedUInt8Data+0x410>
   193e8:	b	194d8 <ReadCompressedUInt8Data+0x524>
   193ec:	cmp	sl, #1
   193f0:	blt	194d8 <ReadCompressedUInt8Data+0x524>
   193f4:	mov	r8, sp
   193f8:	mov	r4, sl
   193fc:	mov	r0, r7
   19400:	mov	r1, r6
   19404:	mov	r2, r8
   19408:	mov	r3, r9
   1940c:	bl	32b8 <InflateData>
   19410:	vldr	s0, [sp]
   19414:	subs	r4, r4, #1
   19418:	vcvt.u32.f32	s0, s0
   1941c:	vmov	r0, s0
   19420:	strb	r0, [r5], #1
   19424:	bne	193fc <ReadCompressedUInt8Data+0x448>
   19428:	b	194d8 <ReadCompressedUInt8Data+0x524>
   1942c:	cmp	sl, #1
   19430:	blt	194d8 <ReadCompressedUInt8Data+0x524>
   19434:	mov	r8, sp
   19438:	mov	r4, sl
   1943c:	mov	r0, r7
   19440:	mov	r1, r6
   19444:	mov	r2, r8
   19448:	mov	r3, r9
   1944c:	bl	32b8 <InflateData>
   19450:	vldr	d16, [sp]
   19454:	subs	r4, r4, #1
   19458:	vcvt.u32.f64	s0, d16
   1945c:	vmov	r0, s0
   19460:	strb	r0, [r5], #1
   19464:	bne	1943c <ReadCompressedUInt8Data+0x488>
   19468:	b	194d8 <ReadCompressedUInt8Data+0x524>
   1946c:	cmp	sl, #1
   19470:	blt	194d8 <ReadCompressedUInt8Data+0x524>
   19474:	mov	r8, sp
   19478:	mov	r4, sl
   1947c:	mov	r0, r7
   19480:	mov	r1, r6
   19484:	mov	r2, r8
   19488:	mov	r3, r9
   1948c:	bl	32b8 <InflateData>
   19490:	ldrb	r0, [sp]
   19494:	subs	r4, r4, #1
   19498:	strb	r0, [r5], #1
   1949c:	bne	1947c <ReadCompressedUInt8Data+0x4c8>
   194a0:	b	194d8 <ReadCompressedUInt8Data+0x524>
   194a4:	cmp	sl, #1
   194a8:	blt	194d8 <ReadCompressedUInt8Data+0x524>
   194ac:	mov	r8, sp
   194b0:	mov	r4, sl
   194b4:	mov	r0, r7
   194b8:	mov	r1, r6
   194bc:	mov	r2, r8
   194c0:	mov	r3, r9
   194c4:	bl	32b8 <InflateData>
   194c8:	ldrb	r0, [sp]
   194cc:	subs	r4, r4, #1
   194d0:	strb	r0, [r5], #1
   194d4:	bne	194b4 <ReadCompressedUInt8Data+0x500>
   194d8:	mul	r0, r9, sl
   194dc:	sub	sp, fp, #28
   194e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000194e4 <ReadCompressedCharData>:
   194e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   194e8:	add	fp, sp, #24
   194ec:	cmp	r0, #0
   194f0:	mov	r9, #0
   194f4:	movne	r5, r2
   194f8:	cmpne	r2, #0
   194fc:	bne	19508 <ReadCompressedCharData+0x24>
   19500:	mov	r0, r9
   19504:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19508:	mov	r6, r0
   1950c:	ldr	r0, [r0]
   19510:	cmp	r0, #0
   19514:	beq	19500 <ReadCompressedCharData+0x1c>
   19518:	ldr	r4, [fp, #8]
   1951c:	mov	r0, r3
   19520:	mov	r7, r3
   19524:	mov	r8, r1
   19528:	bl	1924 <Mat_SizeOf@plt>
   1952c:	mov	r9, r0
   19530:	sub	r0, r7, #2
   19534:	cmp	r0, #15
   19538:	bhi	195ec <ReadCompressedCharData+0x108>
   1953c:	add	r1, pc, #4
   19540:	ldr	r0, [r1, r0, lsl #2]
   19544:	add	pc, r1, r0
   19548:	.word	0x00000040
   1954c:	.word	0x000000a4
   19550:	.word	0x00000060
   19554:	.word	0x000000a4
   19558:	.word	0x000000a4
   1955c:	.word	0x000000a4
   19560:	.word	0x000000a4
   19564:	.word	0x000000a4
   19568:	.word	0x000000a4
   1956c:	.word	0x000000a4
   19570:	.word	0x000000a4
   19574:	.word	0x000000a4
   19578:	.word	0x000000a4
   1957c:	.word	0x000000a4
   19580:	.word	0x00000040
   19584:	.word	0x00000060
   19588:	mul	r9, r9, r4
   1958c:	mov	r0, r6
   19590:	mov	r1, r8
   19594:	mov	r2, r5
   19598:	mov	r3, r9
   1959c:	bl	32b8 <InflateData>
   195a0:	mov	r0, r9
   195a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   195a8:	mul	r9, r9, r4
   195ac:	mov	r0, r6
   195b0:	mov	r1, r8
   195b4:	mov	r2, r5
   195b8:	mov	r3, r9
   195bc:	bl	32b8 <InflateData>
   195c0:	ldr	r0, [r6, #20]
   195c4:	cmp	r0, #0
   195c8:	beq	19500 <ReadCompressedCharData+0x1c>
   195cc:	cmp	r4, #1
   195d0:	blt	19500 <ReadCompressedCharData+0x1c>
   195d4:	mov	r0, r5
   195d8:	bl	1c2c <Mat_uint16Swap>
   195dc:	add	r5, r5, #2
   195e0:	subs	r4, r4, #1
   195e4:	bne	195d4 <ReadCompressedCharData+0xf0>
   195e8:	b	19500 <ReadCompressedCharData+0x1c>
   195ec:	ldr	r0, [pc, #20]	; 19608 <ReadCompressedCharData+0x124>
   195f0:	mov	r1, r7
   195f4:	add	r0, pc, r0
   195f8:	bl	1810 <Mat_Warning@plt>
   195fc:	mul	r9, r9, r4
   19600:	mov	r0, r9
   19604:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19608:	.word	0x0003f368

0001960c <ReadCharData>:
   1960c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19610:	add	fp, sp, #24
   19614:	sub	sp, sp, #8
   19618:	cmp	r0, #0
   1961c:	mov	r4, #0
   19620:	movne	r6, r1
   19624:	cmpne	r1, #0
   19628:	bne	19638 <ReadCharData+0x2c>
   1962c:	mov	r0, r4
   19630:	sub	sp, fp, #24
   19634:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19638:	mov	r7, r0
   1963c:	ldr	r0, [r0]
   19640:	cmp	r0, #0
   19644:	beq	1962c <ReadCharData+0x20>
   19648:	mov	r0, r2
   1964c:	mov	r5, r3
   19650:	mov	r9, r2
   19654:	bl	1924 <Mat_SizeOf@plt>
   19658:	mov	r8, r0
   1965c:	sub	r0, r9, #2
   19660:	cmp	r0, #15
   19664:	bhi	1971c <ReadCharData+0x110>
   19668:	add	r1, pc, #4
   1966c:	ldr	r0, [r1, r0, lsl #2]
   19670:	add	pc, r1, r0
   19674:	.word	0x00000040
   19678:	.word	0x000000a8
   1967c:	.word	0x0000005c
   19680:	.word	0x000000a8
   19684:	.word	0x000000a8
   19688:	.word	0x000000a8
   1968c:	.word	0x000000a8
   19690:	.word	0x000000a8
   19694:	.word	0x000000a8
   19698:	.word	0x000000a8
   1969c:	.word	0x000000a8
   196a0:	.word	0x000000a8
   196a4:	.word	0x000000a8
   196a8:	.word	0x000000a8
   196ac:	.word	0x00000040
   196b0:	.word	0x0000005c
   196b4:	ldr	r3, [r7]
   196b8:	mov	r0, r6
   196bc:	mov	r1, r8
   196c0:	mov	r2, r5
   196c4:	sub	sp, fp, #24
   196c8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   196cc:	b	18b8 <fread@plt>
   196d0:	ldr	r0, [r7, #20]
   196d4:	mov	r4, #0
   196d8:	cmp	r0, #0
   196dc:	beq	19730 <ReadCharData+0x124>
   196e0:	cmp	r5, #1
   196e4:	blt	1962c <ReadCharData+0x20>
   196e8:	add	r9, sp, #6
   196ec:	ldr	r3, [r7]
   196f0:	mov	r0, r9
   196f4:	mov	r1, r8
   196f8:	mov	r2, #1
   196fc:	bl	18b8 <fread@plt>
   19700:	add	r4, r0, r4
   19704:	mov	r0, r9
   19708:	bl	1c2c <Mat_uint16Swap>
   1970c:	strb	r0, [r6], #1
   19710:	subs	r5, r5, #1
   19714:	bne	196ec <ReadCharData+0xe0>
   19718:	b	1962c <ReadCharData+0x20>
   1971c:	ldr	r0, [pc, #68]	; 19768 <ReadCharData+0x15c>
   19720:	mov	r1, r9
   19724:	add	r0, pc, r0
   19728:	bl	1810 <Mat_Warning@plt>
   1972c:	b	1962c <ReadCharData+0x20>
   19730:	cmp	r5, #1
   19734:	blt	1962c <ReadCharData+0x20>
   19738:	add	r9, sp, #6
   1973c:	ldr	r3, [r7]
   19740:	mov	r0, r9
   19744:	mov	r1, r8
   19748:	mov	r2, #1
   1974c:	bl	18b8 <fread@plt>
   19750:	add	r4, r0, r4
   19754:	ldrb	r0, [sp, #6]
   19758:	subs	r5, r5, #1
   1975c:	strb	r0, [r6], #1
   19760:	bne	1973c <ReadCharData+0x130>
   19764:	b	1962c <ReadCharData+0x20>
   19768:	.word	0x0003f283

0001976c <ReadDataSlabN>:
   1976c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19770:	add	fp, sp, #28
   19774:	sub	sp, sp, #164	; 0xa4
   19778:	sub	r4, fp, #72	; 0x48
   1977c:	vmov.i32	q8, #0	; 0x00000000
   19780:	mov	r6, #36	; 0x24
   19784:	mov	r8, r2
   19788:	mov	r2, #0
   1978c:	add	r5, sp, #80	; 0x50
   19790:	mov	r7, r4
   19794:	str	r2, [fp, #-40]	; 0xffffffd8
   19798:	str	r2, [sp, #112]	; 0x70
   1979c:	str	r2, [sp, #72]	; 0x48
   197a0:	vst1.64	{d16-d17}, [r7], r6
   197a4:	str	r2, [r7]
   197a8:	add	r7, r4, #16
   197ac:	add	r4, sp, #40	; 0x28
   197b0:	vst1.64	{d16-d17}, [r7]
   197b4:	add	r7, r5, #16
   197b8:	vst1.64	{d16-d17}, [r7]
   197bc:	mov	r7, r5
   197c0:	vst1.64	{d16-d17}, [r7], r6
   197c4:	str	r2, [r7]
   197c8:	add	r7, r4, #16
   197cc:	vst1.64	{d16-d17}, [r7]
   197d0:	mov	r7, r4
   197d4:	vst1.64	{d16-d17}, [r7], r6
   197d8:	str	r2, [r7]
   197dc:	mov	r7, r0
   197e0:	mvn	r0, #0
   197e4:	cmp	r7, #0
   197e8:	cmpne	r1, #0
   197ec:	bne	197f8 <ReadDataSlabN+0x8c>
   197f0:	sub	sp, fp, #28
   197f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197f8:	ldr	r2, [fp, #8]
   197fc:	cmp	r2, #10
   19800:	bgt	197f0 <ReadDataSlabN+0x84>
   19804:	ldr	r2, [fp, #24]
   19808:	cmp	r2, #0
   1980c:	ldrne	r2, [fp, #20]
   19810:	cmpne	r2, #0
   19814:	beq	197f0 <ReadDataSlabN+0x84>
   19818:	ldr	r2, [fp, #16]
   1981c:	cmp	r2, #0
   19820:	addne	r2, sp, #24
   19824:	stmne	r2, {r1, r3, r7}
   19828:	ldrne	r1, [r7]
   1982c:	cmpne	r1, #0
   19830:	beq	197f0 <ReadDataSlabN+0x84>
   19834:	ldr	r0, [sp, #28]
   19838:	bl	1924 <Mat_SizeOf@plt>
   1983c:	sub	r2, r8, #6
   19840:	cmp	r2, #9
   19844:	bhi	1d728 <ReadDataSlabN+0x3fbc>
   19848:	add	r1, pc, #16
   1984c:	ldr	ip, [fp, #12]
   19850:	add	r6, sp, #40	; 0x28
   19854:	str	r0, [sp, #36]	; 0x24
   19858:	ldr	r2, [r1, r2, lsl #2]
   1985c:	add	pc, r1, r2
   19860:	.word	0x00000028
   19864:	.word	0x000003f0
   19868:	.word	0x00000584
   1986c:	.word	0x00000718
   19870:	.word	0x000008ac
   19874:	.word	0x00000a40
   19878:	.word	0x00000bd4
   1987c:	.word	0x00000d68
   19880:	.word	0x00000efc
   19884:	.word	0x00001090
   19888:	ldr	r0, [fp, #20]
   1988c:	ldr	sl, [fp, #24]
   19890:	mov	r8, #0
   19894:	ldr	r0, [r0]
   19898:	sub	r0, r0, #1
   1989c:	str	r0, [fp, #-72]	; 0xffffffb8
   198a0:	ldr	r5, [ip]
   198a4:	str	r5, [sp, #40]	; 0x28
   198a8:	ldr	r0, [sl]
   198ac:	str	r0, [sp, #12]
   198b0:	ldr	r0, [fp, #8]
   198b4:	cmp	r0, #2
   198b8:	blt	19a18 <ReadDataSlabN+0x2ac>
   198bc:	mov	r1, #0
   198c0:	sub	r0, ip, #4
   198c4:	sub	lr, ip, #12
   198c8:	mov	r3, #1
   198cc:	mvn	r9, #15
   198d0:	mov	r4, r5
   198d4:	mov	r8, #0
   198d8:	sub	r2, fp, #72	; 0x48
   198dc:	str	r1, [sp, #20]
   198e0:	ldr	r1, [fp, #20]
   198e4:	mov	sl, r5
   198e8:	ldr	r5, [sp, #20]
   198ec:	ldr	r1, [r1, r3, lsl #2]
   198f0:	str	r4, [r6, r3, lsl #2]
   198f4:	add	r5, r5, #1
   198f8:	cmp	r5, #4
   198fc:	str	r5, [sp, #20]
   19900:	sub	r7, r1, #1
   19904:	str	r7, [r2, r3, lsl #2]
   19908:	ldr	r1, [ip, r3, lsl #2]
   1990c:	str	r1, [sp, #16]
   19910:	bcs	1991c <ReadDataSlabN+0x1b0>
   19914:	mov	r2, r3
   19918:	b	199b4 <ReadDataSlabN+0x248>
   1991c:	vmov.i32	q9, #1	; 0x00000001
   19920:	vmov.i32	q10, #1	; 0x00000001
   19924:	vmov.i32	q8, #1	; 0x00000001
   19928:	bic	r6, r5, #3
   1992c:	vmov.32	d23[1], r1
   19930:	bic	ip, r3, #3
   19934:	mov	r1, lr
   19938:	vmov.32	d18[0], r4
   1993c:	vmov.32	d20[0], r7
   19940:	sub	r2, r3, r6
   19944:	vorr	d16, d18, d18
   19948:	vmov.i32	q9, #1	; 0x00000001
   1994c:	vorr	d18, d20, d20
   19950:	vld1.32	{d20-d21}, [r1], r9
   19954:	subs	ip, ip, #4
   19958:	vrev64.32	q12, q10
   1995c:	vext.8	q12, q12, q12, #8
   19960:	vext.8	q11, q11, q12, #12
   19964:	vmul.i32	q9, q9, q12
   19968:	vmul.i32	q8, q11, q8
   1996c:	vorr	q11, q12, q12
   19970:	bne	19950 <ReadDataSlabN+0x1e4>
   19974:	vext.8	q11, q9, q8, #8
   19978:	vext.8	q12, q8, q8, #8
   1997c:	cmp	r5, r6
   19980:	vmul.i32	q0, q9, q11
   19984:	vmul.i32	q1, q8, q12
   19988:	vmul.i32	q8, q0, d0[1]
   1998c:	vmul.i32	q9, q1, d2[1]
   19990:	vmov.32	r7, d16[0]
   19994:	vmov.32	r4, d18[0]
   19998:	bne	199a8 <ReadDataSlabN+0x23c>
   1999c:	ldr	ip, [fp, #12]
   199a0:	add	r6, sp, #40	; 0x28
   199a4:	b	199c8 <ReadDataSlabN+0x25c>
   199a8:	ldr	ip, [fp, #12]
   199ac:	vmov.32	r1, d20[0]
   199b0:	add	r6, sp, #40	; 0x28
   199b4:	mul	r4, r1, r4
   199b8:	ldr	r1, [r0, r2, lsl #2]
   199bc:	subs	r2, r2, #1
   199c0:	mul	r7, r7, r1
   199c4:	bne	199b4 <ReadDataSlabN+0x248>
   199c8:	ldr	r1, [fp, #16]
   199cc:	sub	r2, fp, #72	; 0x48
   199d0:	str	r4, [r6, r3, lsl #2]
   199d4:	mov	r5, r6
   199d8:	ldr	r6, [sp, #12]
   199dc:	add	lr, lr, #4
   199e0:	str	r7, [r2, r3, lsl #2]
   199e4:	ldr	r1, [r1, r3, lsl #2]
   199e8:	mla	r8, r1, sl, r8
   199ec:	ldr	sl, [fp, #24]
   199f0:	ldr	r1, [sl, r3, lsl #2]
   199f4:	add	r3, r3, #1
   199f8:	mul	r6, r1, r6
   199fc:	ldr	r1, [fp, #8]
   19a00:	str	r6, [sp, #12]
   19a04:	mov	r6, r5
   19a08:	mov	r5, r4
   19a0c:	ldr	r4, [sp, #16]
   19a10:	cmp	r3, r1
   19a14:	bne	198e0 <ReadDataSlabN+0x174>
   19a18:	ldr	r0, [sp, #36]	; 0x24
   19a1c:	mov	r2, #1
   19a20:	mul	r1, r8, r0
   19a24:	ldr	r0, [sp, #32]
   19a28:	ldr	r0, [r0]
   19a2c:	bl	1a2c <fseek@plt>
   19a30:	ldr	r0, [fp, #20]
   19a34:	ldr	r0, [r0]
   19a38:	cmp	r0, #1
   19a3c:	bne	1aa84 <ReadDataSlabN+0x1318>
   19a40:	ldr	r0, [sp, #12]
   19a44:	sub	r1, fp, #72	; 0x48
   19a48:	add	r2, sp, #80	; 0x50
   19a4c:	cmp	r0, #1
   19a50:	blt	1d728 <ReadDataSlabN+0x3fbc>
   19a54:	ldr	r0, [fp, #16]
   19a58:	add	r7, r0, #4
   19a5c:	add	r0, sl, #4
   19a60:	orr	sl, r2, #4
   19a64:	str	r0, [sp, #20]
   19a68:	orr	r0, r1, #4
   19a6c:	str	r7, [sp, #16]
   19a70:	str	r0, [sp, #4]
   19a74:	mov	r0, #0
   19a78:	str	r0, [sp, #8]
   19a7c:	ldr	r5, [fp, #16]
   19a80:	ldr	r0, [r5]
   19a84:	cmp	r0, #0
   19a88:	beq	19ab8 <ReadDataSlabN+0x34c>
   19a8c:	ldr	r7, [sp, #36]	; 0x24
   19a90:	ldr	r4, [sp, #32]
   19a94:	mov	r2, #1
   19a98:	mul	r1, r0, r7
   19a9c:	ldr	r0, [r4]
   19aa0:	bl	1a2c <fseek@plt>
   19aa4:	ldr	r0, [r5]
   19aa8:	ldr	r2, [sp, #28]
   19aac:	add	r8, r0, r8
   19ab0:	ldr	r0, [sp, #24]
   19ab4:	b	19ac0 <ReadDataSlabN+0x354>
   19ab8:	add	r7, sp, #24
   19abc:	ldm	r7, {r0, r2, r4, r7}
   19ac0:	ldr	r1, [sp, #8]
   19ac4:	add	r1, r0, r1, lsl #3
   19ac8:	ldr	r0, [fp, #24]
   19acc:	ldr	r3, [r0]
   19ad0:	mov	r9, r0
   19ad4:	mov	r0, r4
   19ad8:	bl	3858 <ReadDoubleData>
   19adc:	ldr	r0, [fp, #12]
   19ae0:	ldr	r5, [r5]
   19ae4:	ldr	r1, [r9]
   19ae8:	mov	r2, #1
   19aec:	ldr	r6, [r0]
   19af0:	sub	r0, r6, r5
   19af4:	sub	r0, r0, r1
   19af8:	mul	r1, r0, r7
   19afc:	ldr	r0, [r4]
   19b00:	bl	1a2c <fseek@plt>
   19b04:	add	r0, r6, r8
   19b08:	sub	r8, r0, r5
   19b0c:	ldr	r0, [fp, #8]
   19b10:	cmp	r0, #2
   19b14:	blt	19c28 <ReadDataSlabN+0x4bc>
   19b18:	ldr	r7, [sp, #16]
   19b1c:	mov	r0, #0
   19b20:	add	r3, sp, #40	; 0x28
   19b24:	mov	r5, r0
   19b28:	ldr	r0, [sl, r0, lsl #2]
   19b2c:	ldr	r1, [sp, #20]
   19b30:	add	r0, r0, #1
   19b34:	str	r0, [sl, r5, lsl #2]
   19b38:	ldr	r1, [r1, r5, lsl #2]
   19b3c:	sdiv	r2, r0, r1
   19b40:	mls	r0, r2, r1, r0
   19b44:	cmp	r0, #0
   19b48:	bne	19c04 <ReadDataSlabN+0x498>
   19b4c:	mov	r0, #0
   19b50:	str	r0, [sl, r5, lsl #2]
   19b54:	add	r0, r3, r5, lsl #2
   19b58:	ldr	r6, [r0, #4]
   19b5c:	sdiv	r0, r8, r6
   19b60:	mls	r9, r0, r6, r8
   19b64:	cmp	r9, #0
   19b68:	beq	19bb0 <ReadDataSlabN+0x444>
   19b6c:	ldr	r4, [r3, r5, lsl #2]
   19b70:	ldr	r0, [r7, r5, lsl #2]
   19b74:	sub	r1, r6, r9
   19b78:	mov	r2, #1
   19b7c:	mla	r0, r0, r4, r1
   19b80:	ldr	r1, [sp, #36]	; 0x24
   19b84:	mul	r1, r0, r1
   19b88:	ldr	r0, [sp, #32]
   19b8c:	ldr	r0, [r0]
   19b90:	bl	1a2c <fseek@plt>
   19b94:	ldr	r7, [sp, #16]
   19b98:	add	r1, r6, r8
   19b9c:	add	r3, sp, #40	; 0x28
   19ba0:	sub	r1, r1, r9
   19ba4:	ldr	r0, [r7, r5, lsl #2]
   19ba8:	mla	r8, r0, r4, r1
   19bac:	b	19bec <ReadDataSlabN+0x480>
   19bb0:	ldr	r0, [r7, r5, lsl #2]
   19bb4:	cmp	r0, #0
   19bb8:	beq	19bec <ReadDataSlabN+0x480>
   19bbc:	ldr	r1, [sp, #36]	; 0x24
   19bc0:	ldr	r4, [r3, r5, lsl #2]
   19bc4:	mov	r2, #1
   19bc8:	mul	r0, r0, r1
   19bcc:	mul	r1, r0, r4
   19bd0:	ldr	r0, [sp, #32]
   19bd4:	ldr	r0, [r0]
   19bd8:	bl	1a2c <fseek@plt>
   19bdc:	ldr	r7, [sp, #16]
   19be0:	add	r3, sp, #40	; 0x28
   19be4:	ldr	r0, [r7, r5, lsl #2]
   19be8:	mla	r8, r0, r4, r8
   19bec:	ldr	r2, [fp, #8]
   19bf0:	add	r1, r5, #2
   19bf4:	add	r0, r5, #1
   19bf8:	cmp	r1, r2
   19bfc:	blt	19b24 <ReadDataSlabN+0x3b8>
   19c00:	b	19c28 <ReadDataSlabN+0x4bc>
   19c04:	ldr	r0, [sp, #4]
   19c08:	mov	r2, #1
   19c0c:	ldr	r4, [r0, r5, lsl #2]
   19c10:	ldr	r0, [sp, #36]	; 0x24
   19c14:	mul	r1, r4, r0
   19c18:	ldr	r0, [sp, #32]
   19c1c:	ldr	r0, [r0]
   19c20:	bl	1a2c <fseek@plt>
   19c24:	add	r8, r4, r8
   19c28:	ldr	r0, [fp, #24]
   19c2c:	ldr	r2, [sp, #8]
   19c30:	ldr	r1, [sp, #12]
   19c34:	ldr	r0, [r0]
   19c38:	add	r2, r0, r2
   19c3c:	mov	r0, #0
   19c40:	cmp	r2, r1
   19c44:	str	r2, [sp, #8]
   19c48:	blt	19a7c <ReadDataSlabN+0x310>
   19c4c:	b	197f0 <ReadDataSlabN+0x84>
   19c50:	ldr	r0, [fp, #20]
   19c54:	mov	sl, #0
   19c58:	ldr	r0, [r0]
   19c5c:	sub	r0, r0, #1
   19c60:	str	r0, [fp, #-72]	; 0xffffffb8
   19c64:	ldr	r0, [fp, #24]
   19c68:	ldr	r1, [ip]
   19c6c:	str	r1, [sp, #40]	; 0x28
   19c70:	ldr	r0, [r0]
   19c74:	str	r0, [sp, #12]
   19c78:	ldr	r0, [fp, #8]
   19c7c:	cmp	r0, #2
   19c80:	blt	1ad0c <ReadDataSlabN+0x15a0>
   19c84:	sub	r0, ip, #4
   19c88:	sub	r9, ip, #12
   19c8c:	mov	r3, #1
   19c90:	mov	r5, #0
   19c94:	mvn	lr, #15
   19c98:	mov	r7, r1
   19c9c:	mov	sl, #0
   19ca0:	sub	r4, fp, #72	; 0x48
   19ca4:	str	r1, [sp, #16]
   19ca8:	ldr	r1, [fp, #20]
   19cac:	add	r5, r5, #1
   19cb0:	cmp	r5, #4
   19cb4:	str	r5, [sp, #20]
   19cb8:	ldr	r1, [r1, r3, lsl #2]
   19cbc:	str	r7, [r6, r3, lsl #2]
   19cc0:	sub	r1, r1, #1
   19cc4:	str	r1, [r4, r3, lsl #2]
   19cc8:	ldr	r4, [ip, r3, lsl #2]
   19ccc:	bcs	19ce0 <ReadDataSlabN+0x574>
   19cd0:	mov	r8, r4
   19cd4:	mov	r5, r4
   19cd8:	mov	r2, r3
   19cdc:	b	19d7c <ReadDataSlabN+0x610>
   19ce0:	vmov.i32	q9, #1	; 0x00000001
   19ce4:	vmov.i32	q10, #1	; 0x00000001
   19ce8:	vmov.i32	q8, #1	; 0x00000001
   19cec:	bic	r6, r5, #3
   19cf0:	bic	ip, r3, #3
   19cf4:	vmov.32	d23[1], r4
   19cf8:	vmov.32	d18[0], r7
   19cfc:	vmov.32	d20[0], r1
   19d00:	sub	r2, r3, r6
   19d04:	mov	r1, r9
   19d08:	vorr	d16, d18, d18
   19d0c:	vmov.i32	q9, #1	; 0x00000001
   19d10:	vorr	d18, d20, d20
   19d14:	vld1.32	{d20-d21}, [r1], lr
   19d18:	subs	ip, ip, #4
   19d1c:	vrev64.32	q12, q10
   19d20:	vext.8	q12, q12, q12, #8
   19d24:	vext.8	q11, q11, q12, #12
   19d28:	vmul.i32	q9, q9, q12
   19d2c:	vmul.i32	q8, q11, q8
   19d30:	vorr	q11, q12, q12
   19d34:	bne	19d14 <ReadDataSlabN+0x5a8>
   19d38:	vext.8	q11, q9, q8, #8
   19d3c:	vext.8	q12, q8, q8, #8
   19d40:	mov	r8, r4
   19d44:	cmp	r5, r6
   19d48:	vmul.i32	q0, q9, q11
   19d4c:	vmul.i32	q1, q8, q12
   19d50:	vmul.i32	q8, q0, d0[1]
   19d54:	vmul.i32	q9, q1, d2[1]
   19d58:	vmov.32	r1, d16[0]
   19d5c:	vmov.32	r7, d18[0]
   19d60:	bne	19d70 <ReadDataSlabN+0x604>
   19d64:	ldr	ip, [fp, #12]
   19d68:	add	r6, sp, #40	; 0x28
   19d6c:	b	19d90 <ReadDataSlabN+0x624>
   19d70:	ldr	ip, [fp, #12]
   19d74:	vmov.32	r5, d20[0]
   19d78:	add	r6, sp, #40	; 0x28
   19d7c:	mul	r7, r5, r7
   19d80:	ldr	r5, [r0, r2, lsl #2]
   19d84:	subs	r2, r2, #1
   19d88:	mul	r1, r1, r5
   19d8c:	bne	19d7c <ReadDataSlabN+0x610>
   19d90:	sub	r4, fp, #72	; 0x48
   19d94:	str	r7, [r6, r3, lsl #2]
   19d98:	ldr	r2, [sp, #16]
   19d9c:	ldr	r5, [sp, #20]
   19da0:	add	r9, r9, #4
   19da4:	str	r1, [r4, r3, lsl #2]
   19da8:	ldr	r1, [fp, #16]
   19dac:	ldr	r1, [r1, r3, lsl #2]
   19db0:	mla	sl, r1, r2, sl
   19db4:	ldr	r1, [fp, #24]
   19db8:	ldr	r2, [sp, #12]
   19dbc:	ldr	r1, [r1, r3, lsl #2]
   19dc0:	add	r3, r3, #1
   19dc4:	mul	r2, r1, r2
   19dc8:	ldr	r1, [fp, #8]
   19dcc:	str	r2, [sp, #12]
   19dd0:	cmp	r3, r1
   19dd4:	mov	r1, r7
   19dd8:	mov	r7, r8
   19ddc:	bne	19ca4 <ReadDataSlabN+0x538>
   19de0:	b	1ad10 <ReadDataSlabN+0x15a4>
   19de4:	ldr	r0, [fp, #20]
   19de8:	mov	sl, #0
   19dec:	ldr	r0, [r0]
   19df0:	sub	r0, r0, #1
   19df4:	str	r0, [fp, #-72]	; 0xffffffb8
   19df8:	ldr	r0, [fp, #24]
   19dfc:	ldr	r1, [ip]
   19e00:	str	r1, [sp, #40]	; 0x28
   19e04:	ldr	r0, [r0]
   19e08:	str	r0, [sp, #12]
   19e0c:	ldr	r0, [fp, #8]
   19e10:	cmp	r0, #2
   19e14:	blt	1af3c <ReadDataSlabN+0x17d0>
   19e18:	sub	r0, ip, #4
   19e1c:	sub	r9, ip, #12
   19e20:	mov	r3, #1
   19e24:	mov	r5, #0
   19e28:	mvn	lr, #15
   19e2c:	mov	r7, r1
   19e30:	mov	sl, #0
   19e34:	sub	r4, fp, #72	; 0x48
   19e38:	str	r1, [sp, #16]
   19e3c:	ldr	r1, [fp, #20]
   19e40:	add	r5, r5, #1
   19e44:	cmp	r5, #4
   19e48:	str	r5, [sp, #20]
   19e4c:	ldr	r1, [r1, r3, lsl #2]
   19e50:	str	r7, [r6, r3, lsl #2]
   19e54:	sub	r1, r1, #1
   19e58:	str	r1, [r4, r3, lsl #2]
   19e5c:	ldr	r4, [ip, r3, lsl #2]
   19e60:	bcs	19e74 <ReadDataSlabN+0x708>
   19e64:	mov	r8, r4
   19e68:	mov	r5, r4
   19e6c:	mov	r2, r3
   19e70:	b	19f10 <ReadDataSlabN+0x7a4>
   19e74:	vmov.i32	q9, #1	; 0x00000001
   19e78:	vmov.i32	q10, #1	; 0x00000001
   19e7c:	vmov.i32	q8, #1	; 0x00000001
   19e80:	bic	r6, r5, #3
   19e84:	bic	ip, r3, #3
   19e88:	vmov.32	d23[1], r4
   19e8c:	vmov.32	d18[0], r7
   19e90:	vmov.32	d20[0], r1
   19e94:	sub	r2, r3, r6
   19e98:	mov	r1, r9
   19e9c:	vorr	d16, d18, d18
   19ea0:	vmov.i32	q9, #1	; 0x00000001
   19ea4:	vorr	d18, d20, d20
   19ea8:	vld1.32	{d20-d21}, [r1], lr
   19eac:	subs	ip, ip, #4
   19eb0:	vrev64.32	q12, q10
   19eb4:	vext.8	q12, q12, q12, #8
   19eb8:	vext.8	q11, q11, q12, #12
   19ebc:	vmul.i32	q9, q9, q12
   19ec0:	vmul.i32	q8, q11, q8
   19ec4:	vorr	q11, q12, q12
   19ec8:	bne	19ea8 <ReadDataSlabN+0x73c>
   19ecc:	vext.8	q11, q9, q8, #8
   19ed0:	vext.8	q12, q8, q8, #8
   19ed4:	mov	r8, r4
   19ed8:	cmp	r5, r6
   19edc:	vmul.i32	q0, q9, q11
   19ee0:	vmul.i32	q1, q8, q12
   19ee4:	vmul.i32	q8, q0, d0[1]
   19ee8:	vmul.i32	q9, q1, d2[1]
   19eec:	vmov.32	r1, d16[0]
   19ef0:	vmov.32	r7, d18[0]
   19ef4:	bne	19f04 <ReadDataSlabN+0x798>
   19ef8:	ldr	ip, [fp, #12]
   19efc:	add	r6, sp, #40	; 0x28
   19f00:	b	19f24 <ReadDataSlabN+0x7b8>
   19f04:	ldr	ip, [fp, #12]
   19f08:	vmov.32	r5, d20[0]
   19f0c:	add	r6, sp, #40	; 0x28
   19f10:	mul	r7, r5, r7
   19f14:	ldr	r5, [r0, r2, lsl #2]
   19f18:	subs	r2, r2, #1
   19f1c:	mul	r1, r1, r5
   19f20:	bne	19f10 <ReadDataSlabN+0x7a4>
   19f24:	sub	r4, fp, #72	; 0x48
   19f28:	str	r7, [r6, r3, lsl #2]
   19f2c:	ldr	r2, [sp, #16]
   19f30:	ldr	r5, [sp, #20]
   19f34:	add	r9, r9, #4
   19f38:	str	r1, [r4, r3, lsl #2]
   19f3c:	ldr	r1, [fp, #16]
   19f40:	ldr	r1, [r1, r3, lsl #2]
   19f44:	mla	sl, r1, r2, sl
   19f48:	ldr	r1, [fp, #24]
   19f4c:	ldr	r2, [sp, #12]
   19f50:	ldr	r1, [r1, r3, lsl #2]
   19f54:	add	r3, r3, #1
   19f58:	mul	r2, r1, r2
   19f5c:	ldr	r1, [fp, #8]
   19f60:	str	r2, [sp, #12]
   19f64:	cmp	r3, r1
   19f68:	mov	r1, r7
   19f6c:	mov	r7, r8
   19f70:	bne	19e38 <ReadDataSlabN+0x6cc>
   19f74:	b	1af40 <ReadDataSlabN+0x17d4>
   19f78:	ldr	r0, [fp, #20]
   19f7c:	mov	sl, #0
   19f80:	ldr	r0, [r0]
   19f84:	sub	r0, r0, #1
   19f88:	str	r0, [fp, #-72]	; 0xffffffb8
   19f8c:	ldr	r0, [fp, #24]
   19f90:	ldr	r1, [ip]
   19f94:	str	r1, [sp, #40]	; 0x28
   19f98:	ldr	r0, [r0]
   19f9c:	str	r0, [sp, #12]
   19fa0:	ldr	r0, [fp, #8]
   19fa4:	cmp	r0, #2
   19fa8:	blt	1b164 <ReadDataSlabN+0x19f8>
   19fac:	sub	r0, ip, #4
   19fb0:	sub	r9, ip, #12
   19fb4:	mov	r3, #1
   19fb8:	mov	r5, #0
   19fbc:	mvn	lr, #15
   19fc0:	mov	r7, r1
   19fc4:	mov	sl, #0
   19fc8:	sub	r4, fp, #72	; 0x48
   19fcc:	str	r1, [sp, #16]
   19fd0:	ldr	r1, [fp, #20]
   19fd4:	add	r5, r5, #1
   19fd8:	cmp	r5, #4
   19fdc:	str	r5, [sp, #20]
   19fe0:	ldr	r1, [r1, r3, lsl #2]
   19fe4:	str	r7, [r6, r3, lsl #2]
   19fe8:	sub	r1, r1, #1
   19fec:	str	r1, [r4, r3, lsl #2]
   19ff0:	ldr	r4, [ip, r3, lsl #2]
   19ff4:	bcs	1a008 <ReadDataSlabN+0x89c>
   19ff8:	mov	r8, r4
   19ffc:	mov	r5, r4
   1a000:	mov	r2, r3
   1a004:	b	1a0a4 <ReadDataSlabN+0x938>
   1a008:	vmov.i32	q9, #1	; 0x00000001
   1a00c:	vmov.i32	q10, #1	; 0x00000001
   1a010:	vmov.i32	q8, #1	; 0x00000001
   1a014:	bic	r6, r5, #3
   1a018:	bic	ip, r3, #3
   1a01c:	vmov.32	d23[1], r4
   1a020:	vmov.32	d18[0], r7
   1a024:	vmov.32	d20[0], r1
   1a028:	sub	r2, r3, r6
   1a02c:	mov	r1, r9
   1a030:	vorr	d16, d18, d18
   1a034:	vmov.i32	q9, #1	; 0x00000001
   1a038:	vorr	d18, d20, d20
   1a03c:	vld1.32	{d20-d21}, [r1], lr
   1a040:	subs	ip, ip, #4
   1a044:	vrev64.32	q12, q10
   1a048:	vext.8	q12, q12, q12, #8
   1a04c:	vext.8	q11, q11, q12, #12
   1a050:	vmul.i32	q9, q9, q12
   1a054:	vmul.i32	q8, q11, q8
   1a058:	vorr	q11, q12, q12
   1a05c:	bne	1a03c <ReadDataSlabN+0x8d0>
   1a060:	vext.8	q11, q9, q8, #8
   1a064:	vext.8	q12, q8, q8, #8
   1a068:	mov	r8, r4
   1a06c:	cmp	r5, r6
   1a070:	vmul.i32	q0, q9, q11
   1a074:	vmul.i32	q1, q8, q12
   1a078:	vmul.i32	q8, q0, d0[1]
   1a07c:	vmul.i32	q9, q1, d2[1]
   1a080:	vmov.32	r1, d16[0]
   1a084:	vmov.32	r7, d18[0]
   1a088:	bne	1a098 <ReadDataSlabN+0x92c>
   1a08c:	ldr	ip, [fp, #12]
   1a090:	add	r6, sp, #40	; 0x28
   1a094:	b	1a0b8 <ReadDataSlabN+0x94c>
   1a098:	ldr	ip, [fp, #12]
   1a09c:	vmov.32	r5, d20[0]
   1a0a0:	add	r6, sp, #40	; 0x28
   1a0a4:	mul	r7, r5, r7
   1a0a8:	ldr	r5, [r0, r2, lsl #2]
   1a0ac:	subs	r2, r2, #1
   1a0b0:	mul	r1, r1, r5
   1a0b4:	bne	1a0a4 <ReadDataSlabN+0x938>
   1a0b8:	sub	r4, fp, #72	; 0x48
   1a0bc:	str	r7, [r6, r3, lsl #2]
   1a0c0:	ldr	r2, [sp, #16]
   1a0c4:	ldr	r5, [sp, #20]
   1a0c8:	add	r9, r9, #4
   1a0cc:	str	r1, [r4, r3, lsl #2]
   1a0d0:	ldr	r1, [fp, #16]
   1a0d4:	ldr	r1, [r1, r3, lsl #2]
   1a0d8:	mla	sl, r1, r2, sl
   1a0dc:	ldr	r1, [fp, #24]
   1a0e0:	ldr	r2, [sp, #12]
   1a0e4:	ldr	r1, [r1, r3, lsl #2]
   1a0e8:	add	r3, r3, #1
   1a0ec:	mul	r2, r1, r2
   1a0f0:	ldr	r1, [fp, #8]
   1a0f4:	str	r2, [sp, #12]
   1a0f8:	cmp	r3, r1
   1a0fc:	mov	r1, r7
   1a100:	mov	r7, r8
   1a104:	bne	19fcc <ReadDataSlabN+0x860>
   1a108:	b	1b168 <ReadDataSlabN+0x19fc>
   1a10c:	ldr	r0, [fp, #20]
   1a110:	mov	sl, #0
   1a114:	ldr	r0, [r0]
   1a118:	sub	r0, r0, #1
   1a11c:	str	r0, [fp, #-72]	; 0xffffffb8
   1a120:	ldr	r0, [fp, #24]
   1a124:	ldr	r1, [ip]
   1a128:	str	r1, [sp, #40]	; 0x28
   1a12c:	ldr	r0, [r0]
   1a130:	str	r0, [sp, #12]
   1a134:	ldr	r0, [fp, #8]
   1a138:	cmp	r0, #2
   1a13c:	blt	1b38c <ReadDataSlabN+0x1c20>
   1a140:	sub	r0, ip, #4
   1a144:	sub	r9, ip, #12
   1a148:	mov	r3, #1
   1a14c:	mov	r5, #0
   1a150:	mvn	lr, #15
   1a154:	mov	r7, r1
   1a158:	mov	sl, #0
   1a15c:	sub	r4, fp, #72	; 0x48
   1a160:	str	r1, [sp, #16]
   1a164:	ldr	r1, [fp, #20]
   1a168:	add	r5, r5, #1
   1a16c:	cmp	r5, #4
   1a170:	str	r5, [sp, #20]
   1a174:	ldr	r1, [r1, r3, lsl #2]
   1a178:	str	r7, [r6, r3, lsl #2]
   1a17c:	sub	r1, r1, #1
   1a180:	str	r1, [r4, r3, lsl #2]
   1a184:	ldr	r4, [ip, r3, lsl #2]
   1a188:	bcs	1a19c <ReadDataSlabN+0xa30>
   1a18c:	mov	r8, r4
   1a190:	mov	r5, r4
   1a194:	mov	r2, r3
   1a198:	b	1a238 <ReadDataSlabN+0xacc>
   1a19c:	vmov.i32	q9, #1	; 0x00000001
   1a1a0:	vmov.i32	q10, #1	; 0x00000001
   1a1a4:	vmov.i32	q8, #1	; 0x00000001
   1a1a8:	bic	r6, r5, #3
   1a1ac:	bic	ip, r3, #3
   1a1b0:	vmov.32	d23[1], r4
   1a1b4:	vmov.32	d18[0], r7
   1a1b8:	vmov.32	d20[0], r1
   1a1bc:	sub	r2, r3, r6
   1a1c0:	mov	r1, r9
   1a1c4:	vorr	d16, d18, d18
   1a1c8:	vmov.i32	q9, #1	; 0x00000001
   1a1cc:	vorr	d18, d20, d20
   1a1d0:	vld1.32	{d20-d21}, [r1], lr
   1a1d4:	subs	ip, ip, #4
   1a1d8:	vrev64.32	q12, q10
   1a1dc:	vext.8	q12, q12, q12, #8
   1a1e0:	vext.8	q11, q11, q12, #12
   1a1e4:	vmul.i32	q9, q9, q12
   1a1e8:	vmul.i32	q8, q11, q8
   1a1ec:	vorr	q11, q12, q12
   1a1f0:	bne	1a1d0 <ReadDataSlabN+0xa64>
   1a1f4:	vext.8	q11, q9, q8, #8
   1a1f8:	vext.8	q12, q8, q8, #8
   1a1fc:	mov	r8, r4
   1a200:	cmp	r5, r6
   1a204:	vmul.i32	q0, q9, q11
   1a208:	vmul.i32	q1, q8, q12
   1a20c:	vmul.i32	q8, q0, d0[1]
   1a210:	vmul.i32	q9, q1, d2[1]
   1a214:	vmov.32	r1, d16[0]
   1a218:	vmov.32	r7, d18[0]
   1a21c:	bne	1a22c <ReadDataSlabN+0xac0>
   1a220:	ldr	ip, [fp, #12]
   1a224:	add	r6, sp, #40	; 0x28
   1a228:	b	1a24c <ReadDataSlabN+0xae0>
   1a22c:	ldr	ip, [fp, #12]
   1a230:	vmov.32	r5, d20[0]
   1a234:	add	r6, sp, #40	; 0x28
   1a238:	mul	r7, r5, r7
   1a23c:	ldr	r5, [r0, r2, lsl #2]
   1a240:	subs	r2, r2, #1
   1a244:	mul	r1, r1, r5
   1a248:	bne	1a238 <ReadDataSlabN+0xacc>
   1a24c:	sub	r4, fp, #72	; 0x48
   1a250:	str	r7, [r6, r3, lsl #2]
   1a254:	ldr	r2, [sp, #16]
   1a258:	ldr	r5, [sp, #20]
   1a25c:	add	r9, r9, #4
   1a260:	str	r1, [r4, r3, lsl #2]
   1a264:	ldr	r1, [fp, #16]
   1a268:	ldr	r1, [r1, r3, lsl #2]
   1a26c:	mla	sl, r1, r2, sl
   1a270:	ldr	r1, [fp, #24]
   1a274:	ldr	r2, [sp, #12]
   1a278:	ldr	r1, [r1, r3, lsl #2]
   1a27c:	add	r3, r3, #1
   1a280:	mul	r2, r1, r2
   1a284:	ldr	r1, [fp, #8]
   1a288:	str	r2, [sp, #12]
   1a28c:	cmp	r3, r1
   1a290:	mov	r1, r7
   1a294:	mov	r7, r8
   1a298:	bne	1a160 <ReadDataSlabN+0x9f4>
   1a29c:	b	1b390 <ReadDataSlabN+0x1c24>
   1a2a0:	ldr	r0, [fp, #20]
   1a2a4:	mov	sl, #0
   1a2a8:	ldr	r0, [r0]
   1a2ac:	sub	r0, r0, #1
   1a2b0:	str	r0, [fp, #-72]	; 0xffffffb8
   1a2b4:	ldr	r0, [fp, #24]
   1a2b8:	ldr	r1, [ip]
   1a2bc:	str	r1, [sp, #40]	; 0x28
   1a2c0:	ldr	r0, [r0]
   1a2c4:	str	r0, [sp, #12]
   1a2c8:	ldr	r0, [fp, #8]
   1a2cc:	cmp	r0, #2
   1a2d0:	blt	1b5b4 <ReadDataSlabN+0x1e48>
   1a2d4:	sub	r0, ip, #4
   1a2d8:	sub	r9, ip, #12
   1a2dc:	mov	r3, #1
   1a2e0:	mov	r5, #0
   1a2e4:	mvn	lr, #15
   1a2e8:	mov	r7, r1
   1a2ec:	mov	sl, #0
   1a2f0:	sub	r4, fp, #72	; 0x48
   1a2f4:	str	r1, [sp, #16]
   1a2f8:	ldr	r1, [fp, #20]
   1a2fc:	add	r5, r5, #1
   1a300:	cmp	r5, #4
   1a304:	str	r5, [sp, #20]
   1a308:	ldr	r1, [r1, r3, lsl #2]
   1a30c:	str	r7, [r6, r3, lsl #2]
   1a310:	sub	r1, r1, #1
   1a314:	str	r1, [r4, r3, lsl #2]
   1a318:	ldr	r4, [ip, r3, lsl #2]
   1a31c:	bcs	1a330 <ReadDataSlabN+0xbc4>
   1a320:	mov	r8, r4
   1a324:	mov	r5, r4
   1a328:	mov	r2, r3
   1a32c:	b	1a3cc <ReadDataSlabN+0xc60>
   1a330:	vmov.i32	q9, #1	; 0x00000001
   1a334:	vmov.i32	q10, #1	; 0x00000001
   1a338:	vmov.i32	q8, #1	; 0x00000001
   1a33c:	bic	r6, r5, #3
   1a340:	bic	ip, r3, #3
   1a344:	vmov.32	d23[1], r4
   1a348:	vmov.32	d18[0], r7
   1a34c:	vmov.32	d20[0], r1
   1a350:	sub	r2, r3, r6
   1a354:	mov	r1, r9
   1a358:	vorr	d16, d18, d18
   1a35c:	vmov.i32	q9, #1	; 0x00000001
   1a360:	vorr	d18, d20, d20
   1a364:	vld1.32	{d20-d21}, [r1], lr
   1a368:	subs	ip, ip, #4
   1a36c:	vrev64.32	q12, q10
   1a370:	vext.8	q12, q12, q12, #8
   1a374:	vext.8	q11, q11, q12, #12
   1a378:	vmul.i32	q9, q9, q12
   1a37c:	vmul.i32	q8, q11, q8
   1a380:	vorr	q11, q12, q12
   1a384:	bne	1a364 <ReadDataSlabN+0xbf8>
   1a388:	vext.8	q11, q9, q8, #8
   1a38c:	vext.8	q12, q8, q8, #8
   1a390:	mov	r8, r4
   1a394:	cmp	r5, r6
   1a398:	vmul.i32	q0, q9, q11
   1a39c:	vmul.i32	q1, q8, q12
   1a3a0:	vmul.i32	q8, q0, d0[1]
   1a3a4:	vmul.i32	q9, q1, d2[1]
   1a3a8:	vmov.32	r1, d16[0]
   1a3ac:	vmov.32	r7, d18[0]
   1a3b0:	bne	1a3c0 <ReadDataSlabN+0xc54>
   1a3b4:	ldr	ip, [fp, #12]
   1a3b8:	add	r6, sp, #40	; 0x28
   1a3bc:	b	1a3e0 <ReadDataSlabN+0xc74>
   1a3c0:	ldr	ip, [fp, #12]
   1a3c4:	vmov.32	r5, d20[0]
   1a3c8:	add	r6, sp, #40	; 0x28
   1a3cc:	mul	r7, r5, r7
   1a3d0:	ldr	r5, [r0, r2, lsl #2]
   1a3d4:	subs	r2, r2, #1
   1a3d8:	mul	r1, r1, r5
   1a3dc:	bne	1a3cc <ReadDataSlabN+0xc60>
   1a3e0:	sub	r4, fp, #72	; 0x48
   1a3e4:	str	r7, [r6, r3, lsl #2]
   1a3e8:	ldr	r2, [sp, #16]
   1a3ec:	ldr	r5, [sp, #20]
   1a3f0:	add	r9, r9, #4
   1a3f4:	str	r1, [r4, r3, lsl #2]
   1a3f8:	ldr	r1, [fp, #16]
   1a3fc:	ldr	r1, [r1, r3, lsl #2]
   1a400:	mla	sl, r1, r2, sl
   1a404:	ldr	r1, [fp, #24]
   1a408:	ldr	r2, [sp, #12]
   1a40c:	ldr	r1, [r1, r3, lsl #2]
   1a410:	add	r3, r3, #1
   1a414:	mul	r2, r1, r2
   1a418:	ldr	r1, [fp, #8]
   1a41c:	str	r2, [sp, #12]
   1a420:	cmp	r3, r1
   1a424:	mov	r1, r7
   1a428:	mov	r7, r8
   1a42c:	bne	1a2f4 <ReadDataSlabN+0xb88>
   1a430:	b	1b5b8 <ReadDataSlabN+0x1e4c>
   1a434:	ldr	r0, [fp, #20]
   1a438:	mov	sl, #0
   1a43c:	ldr	r0, [r0]
   1a440:	sub	r0, r0, #1
   1a444:	str	r0, [fp, #-72]	; 0xffffffb8
   1a448:	ldr	r0, [fp, #24]
   1a44c:	ldr	r1, [ip]
   1a450:	str	r1, [sp, #40]	; 0x28
   1a454:	ldr	r0, [r0]
   1a458:	str	r0, [sp, #12]
   1a45c:	ldr	r0, [fp, #8]
   1a460:	cmp	r0, #2
   1a464:	blt	1b7dc <ReadDataSlabN+0x2070>
   1a468:	sub	r0, ip, #4
   1a46c:	sub	r9, ip, #12
   1a470:	mov	r3, #1
   1a474:	mov	r5, #0
   1a478:	mvn	lr, #15
   1a47c:	mov	r7, r1
   1a480:	mov	sl, #0
   1a484:	sub	r4, fp, #72	; 0x48
   1a488:	str	r1, [sp, #16]
   1a48c:	ldr	r1, [fp, #20]
   1a490:	add	r5, r5, #1
   1a494:	cmp	r5, #4
   1a498:	str	r5, [sp, #20]
   1a49c:	ldr	r1, [r1, r3, lsl #2]
   1a4a0:	str	r7, [r6, r3, lsl #2]
   1a4a4:	sub	r1, r1, #1
   1a4a8:	str	r1, [r4, r3, lsl #2]
   1a4ac:	ldr	r4, [ip, r3, lsl #2]
   1a4b0:	bcs	1a4c4 <ReadDataSlabN+0xd58>
   1a4b4:	mov	r8, r4
   1a4b8:	mov	r5, r4
   1a4bc:	mov	r2, r3
   1a4c0:	b	1a560 <ReadDataSlabN+0xdf4>
   1a4c4:	vmov.i32	q9, #1	; 0x00000001
   1a4c8:	vmov.i32	q10, #1	; 0x00000001
   1a4cc:	vmov.i32	q8, #1	; 0x00000001
   1a4d0:	bic	r6, r5, #3
   1a4d4:	bic	ip, r3, #3
   1a4d8:	vmov.32	d23[1], r4
   1a4dc:	vmov.32	d18[0], r7
   1a4e0:	vmov.32	d20[0], r1
   1a4e4:	sub	r2, r3, r6
   1a4e8:	mov	r1, r9
   1a4ec:	vorr	d16, d18, d18
   1a4f0:	vmov.i32	q9, #1	; 0x00000001
   1a4f4:	vorr	d18, d20, d20
   1a4f8:	vld1.32	{d20-d21}, [r1], lr
   1a4fc:	subs	ip, ip, #4
   1a500:	vrev64.32	q12, q10
   1a504:	vext.8	q12, q12, q12, #8
   1a508:	vext.8	q11, q11, q12, #12
   1a50c:	vmul.i32	q9, q9, q12
   1a510:	vmul.i32	q8, q11, q8
   1a514:	vorr	q11, q12, q12
   1a518:	bne	1a4f8 <ReadDataSlabN+0xd8c>
   1a51c:	vext.8	q11, q9, q8, #8
   1a520:	vext.8	q12, q8, q8, #8
   1a524:	mov	r8, r4
   1a528:	cmp	r5, r6
   1a52c:	vmul.i32	q0, q9, q11
   1a530:	vmul.i32	q1, q8, q12
   1a534:	vmul.i32	q8, q0, d0[1]
   1a538:	vmul.i32	q9, q1, d2[1]
   1a53c:	vmov.32	r1, d16[0]
   1a540:	vmov.32	r7, d18[0]
   1a544:	bne	1a554 <ReadDataSlabN+0xde8>
   1a548:	ldr	ip, [fp, #12]
   1a54c:	add	r6, sp, #40	; 0x28
   1a550:	b	1a574 <ReadDataSlabN+0xe08>
   1a554:	ldr	ip, [fp, #12]
   1a558:	vmov.32	r5, d20[0]
   1a55c:	add	r6, sp, #40	; 0x28
   1a560:	mul	r7, r5, r7
   1a564:	ldr	r5, [r0, r2, lsl #2]
   1a568:	subs	r2, r2, #1
   1a56c:	mul	r1, r1, r5
   1a570:	bne	1a560 <ReadDataSlabN+0xdf4>
   1a574:	sub	r4, fp, #72	; 0x48
   1a578:	str	r7, [r6, r3, lsl #2]
   1a57c:	ldr	r2, [sp, #16]
   1a580:	ldr	r5, [sp, #20]
   1a584:	add	r9, r9, #4
   1a588:	str	r1, [r4, r3, lsl #2]
   1a58c:	ldr	r1, [fp, #16]
   1a590:	ldr	r1, [r1, r3, lsl #2]
   1a594:	mla	sl, r1, r2, sl
   1a598:	ldr	r1, [fp, #24]
   1a59c:	ldr	r2, [sp, #12]
   1a5a0:	ldr	r1, [r1, r3, lsl #2]
   1a5a4:	add	r3, r3, #1
   1a5a8:	mul	r2, r1, r2
   1a5ac:	ldr	r1, [fp, #8]
   1a5b0:	str	r2, [sp, #12]
   1a5b4:	cmp	r3, r1
   1a5b8:	mov	r1, r7
   1a5bc:	mov	r7, r8
   1a5c0:	bne	1a488 <ReadDataSlabN+0xd1c>
   1a5c4:	b	1b7e0 <ReadDataSlabN+0x2074>
   1a5c8:	ldr	r0, [fp, #20]
   1a5cc:	mov	sl, #0
   1a5d0:	ldr	r0, [r0]
   1a5d4:	sub	r0, r0, #1
   1a5d8:	str	r0, [fp, #-72]	; 0xffffffb8
   1a5dc:	ldr	r0, [fp, #24]
   1a5e0:	ldr	r1, [ip]
   1a5e4:	str	r1, [sp, #40]	; 0x28
   1a5e8:	ldr	r0, [r0]
   1a5ec:	str	r0, [sp, #12]
   1a5f0:	ldr	r0, [fp, #8]
   1a5f4:	cmp	r0, #2
   1a5f8:	blt	1ba04 <ReadDataSlabN+0x2298>
   1a5fc:	sub	r0, ip, #4
   1a600:	sub	r9, ip, #12
   1a604:	mov	r3, #1
   1a608:	mov	r5, #0
   1a60c:	mvn	lr, #15
   1a610:	mov	r7, r1
   1a614:	mov	sl, #0
   1a618:	sub	r4, fp, #72	; 0x48
   1a61c:	str	r1, [sp, #16]
   1a620:	ldr	r1, [fp, #20]
   1a624:	add	r5, r5, #1
   1a628:	cmp	r5, #4
   1a62c:	str	r5, [sp, #20]
   1a630:	ldr	r1, [r1, r3, lsl #2]
   1a634:	str	r7, [r6, r3, lsl #2]
   1a638:	sub	r1, r1, #1
   1a63c:	str	r1, [r4, r3, lsl #2]
   1a640:	ldr	r4, [ip, r3, lsl #2]
   1a644:	bcs	1a658 <ReadDataSlabN+0xeec>
   1a648:	mov	r8, r4
   1a64c:	mov	r5, r4
   1a650:	mov	r2, r3
   1a654:	b	1a6f4 <ReadDataSlabN+0xf88>
   1a658:	vmov.i32	q9, #1	; 0x00000001
   1a65c:	vmov.i32	q10, #1	; 0x00000001
   1a660:	vmov.i32	q8, #1	; 0x00000001
   1a664:	bic	r6, r5, #3
   1a668:	bic	ip, r3, #3
   1a66c:	vmov.32	d23[1], r4
   1a670:	vmov.32	d18[0], r7
   1a674:	vmov.32	d20[0], r1
   1a678:	sub	r2, r3, r6
   1a67c:	mov	r1, r9
   1a680:	vorr	d16, d18, d18
   1a684:	vmov.i32	q9, #1	; 0x00000001
   1a688:	vorr	d18, d20, d20
   1a68c:	vld1.32	{d20-d21}, [r1], lr
   1a690:	subs	ip, ip, #4
   1a694:	vrev64.32	q12, q10
   1a698:	vext.8	q12, q12, q12, #8
   1a69c:	vext.8	q11, q11, q12, #12
   1a6a0:	vmul.i32	q9, q9, q12
   1a6a4:	vmul.i32	q8, q11, q8
   1a6a8:	vorr	q11, q12, q12
   1a6ac:	bne	1a68c <ReadDataSlabN+0xf20>
   1a6b0:	vext.8	q11, q9, q8, #8
   1a6b4:	vext.8	q12, q8, q8, #8
   1a6b8:	mov	r8, r4
   1a6bc:	cmp	r5, r6
   1a6c0:	vmul.i32	q0, q9, q11
   1a6c4:	vmul.i32	q1, q8, q12
   1a6c8:	vmul.i32	q8, q0, d0[1]
   1a6cc:	vmul.i32	q9, q1, d2[1]
   1a6d0:	vmov.32	r1, d16[0]
   1a6d4:	vmov.32	r7, d18[0]
   1a6d8:	bne	1a6e8 <ReadDataSlabN+0xf7c>
   1a6dc:	ldr	ip, [fp, #12]
   1a6e0:	add	r6, sp, #40	; 0x28
   1a6e4:	b	1a708 <ReadDataSlabN+0xf9c>
   1a6e8:	ldr	ip, [fp, #12]
   1a6ec:	vmov.32	r5, d20[0]
   1a6f0:	add	r6, sp, #40	; 0x28
   1a6f4:	mul	r7, r5, r7
   1a6f8:	ldr	r5, [r0, r2, lsl #2]
   1a6fc:	subs	r2, r2, #1
   1a700:	mul	r1, r1, r5
   1a704:	bne	1a6f4 <ReadDataSlabN+0xf88>
   1a708:	sub	r4, fp, #72	; 0x48
   1a70c:	str	r7, [r6, r3, lsl #2]
   1a710:	ldr	r2, [sp, #16]
   1a714:	ldr	r5, [sp, #20]
   1a718:	add	r9, r9, #4
   1a71c:	str	r1, [r4, r3, lsl #2]
   1a720:	ldr	r1, [fp, #16]
   1a724:	ldr	r1, [r1, r3, lsl #2]
   1a728:	mla	sl, r1, r2, sl
   1a72c:	ldr	r1, [fp, #24]
   1a730:	ldr	r2, [sp, #12]
   1a734:	ldr	r1, [r1, r3, lsl #2]
   1a738:	add	r3, r3, #1
   1a73c:	mul	r2, r1, r2
   1a740:	ldr	r1, [fp, #8]
   1a744:	str	r2, [sp, #12]
   1a748:	cmp	r3, r1
   1a74c:	mov	r1, r7
   1a750:	mov	r7, r8
   1a754:	bne	1a61c <ReadDataSlabN+0xeb0>
   1a758:	b	1ba08 <ReadDataSlabN+0x229c>
   1a75c:	ldr	r0, [fp, #20]
   1a760:	mov	sl, #0
   1a764:	ldr	r0, [r0]
   1a768:	sub	r0, r0, #1
   1a76c:	str	r0, [fp, #-72]	; 0xffffffb8
   1a770:	ldr	r0, [fp, #24]
   1a774:	ldr	r1, [ip]
   1a778:	str	r1, [sp, #40]	; 0x28
   1a77c:	ldr	r0, [r0]
   1a780:	str	r0, [sp, #12]
   1a784:	ldr	r0, [fp, #8]
   1a788:	cmp	r0, #2
   1a78c:	blt	1bc2c <ReadDataSlabN+0x24c0>
   1a790:	sub	r0, ip, #4
   1a794:	sub	r9, ip, #12
   1a798:	mov	r3, #1
   1a79c:	mov	r5, #0
   1a7a0:	mvn	lr, #15
   1a7a4:	mov	r7, r1
   1a7a8:	mov	sl, #0
   1a7ac:	sub	r4, fp, #72	; 0x48
   1a7b0:	str	r1, [sp, #16]
   1a7b4:	ldr	r1, [fp, #20]
   1a7b8:	add	r5, r5, #1
   1a7bc:	cmp	r5, #4
   1a7c0:	str	r5, [sp, #20]
   1a7c4:	ldr	r1, [r1, r3, lsl #2]
   1a7c8:	str	r7, [r6, r3, lsl #2]
   1a7cc:	sub	r1, r1, #1
   1a7d0:	str	r1, [r4, r3, lsl #2]
   1a7d4:	ldr	r4, [ip, r3, lsl #2]
   1a7d8:	bcs	1a7ec <ReadDataSlabN+0x1080>
   1a7dc:	mov	r8, r4
   1a7e0:	mov	r5, r4
   1a7e4:	mov	r2, r3
   1a7e8:	b	1a888 <ReadDataSlabN+0x111c>
   1a7ec:	vmov.i32	q9, #1	; 0x00000001
   1a7f0:	vmov.i32	q10, #1	; 0x00000001
   1a7f4:	vmov.i32	q8, #1	; 0x00000001
   1a7f8:	bic	r6, r5, #3
   1a7fc:	bic	ip, r3, #3
   1a800:	vmov.32	d23[1], r4
   1a804:	vmov.32	d18[0], r7
   1a808:	vmov.32	d20[0], r1
   1a80c:	sub	r2, r3, r6
   1a810:	mov	r1, r9
   1a814:	vorr	d16, d18, d18
   1a818:	vmov.i32	q9, #1	; 0x00000001
   1a81c:	vorr	d18, d20, d20
   1a820:	vld1.32	{d20-d21}, [r1], lr
   1a824:	subs	ip, ip, #4
   1a828:	vrev64.32	q12, q10
   1a82c:	vext.8	q12, q12, q12, #8
   1a830:	vext.8	q11, q11, q12, #12
   1a834:	vmul.i32	q9, q9, q12
   1a838:	vmul.i32	q8, q11, q8
   1a83c:	vorr	q11, q12, q12
   1a840:	bne	1a820 <ReadDataSlabN+0x10b4>
   1a844:	vext.8	q11, q9, q8, #8
   1a848:	vext.8	q12, q8, q8, #8
   1a84c:	mov	r8, r4
   1a850:	cmp	r5, r6
   1a854:	vmul.i32	q0, q9, q11
   1a858:	vmul.i32	q1, q8, q12
   1a85c:	vmul.i32	q8, q0, d0[1]
   1a860:	vmul.i32	q9, q1, d2[1]
   1a864:	vmov.32	r1, d16[0]
   1a868:	vmov.32	r7, d18[0]
   1a86c:	bne	1a87c <ReadDataSlabN+0x1110>
   1a870:	ldr	ip, [fp, #12]
   1a874:	add	r6, sp, #40	; 0x28
   1a878:	b	1a89c <ReadDataSlabN+0x1130>
   1a87c:	ldr	ip, [fp, #12]
   1a880:	vmov.32	r5, d20[0]
   1a884:	add	r6, sp, #40	; 0x28
   1a888:	mul	r7, r5, r7
   1a88c:	ldr	r5, [r0, r2, lsl #2]
   1a890:	subs	r2, r2, #1
   1a894:	mul	r1, r1, r5
   1a898:	bne	1a888 <ReadDataSlabN+0x111c>
   1a89c:	sub	r4, fp, #72	; 0x48
   1a8a0:	str	r7, [r6, r3, lsl #2]
   1a8a4:	ldr	r2, [sp, #16]
   1a8a8:	ldr	r5, [sp, #20]
   1a8ac:	add	r9, r9, #4
   1a8b0:	str	r1, [r4, r3, lsl #2]
   1a8b4:	ldr	r1, [fp, #16]
   1a8b8:	ldr	r1, [r1, r3, lsl #2]
   1a8bc:	mla	sl, r1, r2, sl
   1a8c0:	ldr	r1, [fp, #24]
   1a8c4:	ldr	r2, [sp, #12]
   1a8c8:	ldr	r1, [r1, r3, lsl #2]
   1a8cc:	add	r3, r3, #1
   1a8d0:	mul	r2, r1, r2
   1a8d4:	ldr	r1, [fp, #8]
   1a8d8:	str	r2, [sp, #12]
   1a8dc:	cmp	r3, r1
   1a8e0:	mov	r1, r7
   1a8e4:	mov	r7, r8
   1a8e8:	bne	1a7b0 <ReadDataSlabN+0x1044>
   1a8ec:	b	1bc30 <ReadDataSlabN+0x24c4>
   1a8f0:	ldr	r0, [fp, #20]
   1a8f4:	mov	sl, #0
   1a8f8:	ldr	r0, [r0]
   1a8fc:	sub	r0, r0, #1
   1a900:	str	r0, [fp, #-72]	; 0xffffffb8
   1a904:	ldr	r0, [fp, #24]
   1a908:	ldr	r1, [ip]
   1a90c:	str	r1, [sp, #40]	; 0x28
   1a910:	ldr	r0, [r0]
   1a914:	str	r0, [sp, #12]
   1a918:	ldr	r0, [fp, #8]
   1a91c:	cmp	r0, #2
   1a920:	blt	1be54 <ReadDataSlabN+0x26e8>
   1a924:	sub	r0, ip, #4
   1a928:	sub	r9, ip, #12
   1a92c:	mov	r3, #1
   1a930:	mov	r5, #0
   1a934:	mvn	lr, #15
   1a938:	mov	r7, r1
   1a93c:	mov	sl, #0
   1a940:	sub	r4, fp, #72	; 0x48
   1a944:	str	r1, [sp, #16]
   1a948:	ldr	r1, [fp, #20]
   1a94c:	add	r5, r5, #1
   1a950:	cmp	r5, #4
   1a954:	str	r5, [sp, #20]
   1a958:	ldr	r1, [r1, r3, lsl #2]
   1a95c:	str	r7, [r6, r3, lsl #2]
   1a960:	sub	r1, r1, #1
   1a964:	str	r1, [r4, r3, lsl #2]
   1a968:	ldr	r4, [ip, r3, lsl #2]
   1a96c:	bcs	1a980 <ReadDataSlabN+0x1214>
   1a970:	mov	r8, r4
   1a974:	mov	r5, r4
   1a978:	mov	r2, r3
   1a97c:	b	1aa1c <ReadDataSlabN+0x12b0>
   1a980:	vmov.i32	q9, #1	; 0x00000001
   1a984:	vmov.i32	q10, #1	; 0x00000001
   1a988:	vmov.i32	q8, #1	; 0x00000001
   1a98c:	bic	r6, r5, #3
   1a990:	bic	ip, r3, #3
   1a994:	vmov.32	d23[1], r4
   1a998:	vmov.32	d18[0], r7
   1a99c:	vmov.32	d20[0], r1
   1a9a0:	sub	r2, r3, r6
   1a9a4:	mov	r1, r9
   1a9a8:	vorr	d16, d18, d18
   1a9ac:	vmov.i32	q9, #1	; 0x00000001
   1a9b0:	vorr	d18, d20, d20
   1a9b4:	vld1.32	{d20-d21}, [r1], lr
   1a9b8:	subs	ip, ip, #4
   1a9bc:	vrev64.32	q12, q10
   1a9c0:	vext.8	q12, q12, q12, #8
   1a9c4:	vext.8	q11, q11, q12, #12
   1a9c8:	vmul.i32	q9, q9, q12
   1a9cc:	vmul.i32	q8, q11, q8
   1a9d0:	vorr	q11, q12, q12
   1a9d4:	bne	1a9b4 <ReadDataSlabN+0x1248>
   1a9d8:	vext.8	q11, q9, q8, #8
   1a9dc:	vext.8	q12, q8, q8, #8
   1a9e0:	mov	r8, r4
   1a9e4:	cmp	r5, r6
   1a9e8:	vmul.i32	q0, q9, q11
   1a9ec:	vmul.i32	q1, q8, q12
   1a9f0:	vmul.i32	q8, q0, d0[1]
   1a9f4:	vmul.i32	q9, q1, d2[1]
   1a9f8:	vmov.32	r1, d16[0]
   1a9fc:	vmov.32	r7, d18[0]
   1aa00:	bne	1aa10 <ReadDataSlabN+0x12a4>
   1aa04:	ldr	ip, [fp, #12]
   1aa08:	add	r6, sp, #40	; 0x28
   1aa0c:	b	1aa30 <ReadDataSlabN+0x12c4>
   1aa10:	ldr	ip, [fp, #12]
   1aa14:	vmov.32	r5, d20[0]
   1aa18:	add	r6, sp, #40	; 0x28
   1aa1c:	mul	r7, r5, r7
   1aa20:	ldr	r5, [r0, r2, lsl #2]
   1aa24:	subs	r2, r2, #1
   1aa28:	mul	r1, r1, r5
   1aa2c:	bne	1aa1c <ReadDataSlabN+0x12b0>
   1aa30:	sub	r4, fp, #72	; 0x48
   1aa34:	str	r7, [r6, r3, lsl #2]
   1aa38:	ldr	r2, [sp, #16]
   1aa3c:	ldr	r5, [sp, #20]
   1aa40:	add	r9, r9, #4
   1aa44:	str	r1, [r4, r3, lsl #2]
   1aa48:	ldr	r1, [fp, #16]
   1aa4c:	ldr	r1, [r1, r3, lsl #2]
   1aa50:	mla	sl, r1, r2, sl
   1aa54:	ldr	r1, [fp, #24]
   1aa58:	ldr	r2, [sp, #12]
   1aa5c:	ldr	r1, [r1, r3, lsl #2]
   1aa60:	add	r3, r3, #1
   1aa64:	mul	r2, r1, r2
   1aa68:	ldr	r1, [fp, #8]
   1aa6c:	str	r2, [sp, #12]
   1aa70:	cmp	r3, r1
   1aa74:	mov	r1, r7
   1aa78:	mov	r7, r8
   1aa7c:	bne	1a944 <ReadDataSlabN+0x11d8>
   1aa80:	b	1be58 <ReadDataSlabN+0x26ec>
   1aa84:	ldr	r0, [sp, #12]
   1aa88:	sub	r1, fp, #72	; 0x48
   1aa8c:	add	r2, sp, #80	; 0x50
   1aa90:	cmp	r0, #1
   1aa94:	blt	1d728 <ReadDataSlabN+0x3fbc>
   1aa98:	ldr	r0, [fp, #16]
   1aa9c:	orr	ip, r2, #4
   1aaa0:	mov	r5, #0
   1aaa4:	str	ip, [sp, #16]
   1aaa8:	add	r9, r0, #4
   1aaac:	add	r0, sl, #4
   1aab0:	str	r0, [sp, #20]
   1aab4:	orr	r0, r1, #4
   1aab8:	str	r9, [sp, #4]
   1aabc:	str	r0, [sp]
   1aac0:	ldr	r4, [fp, #16]
   1aac4:	ldr	r0, [r4]
   1aac8:	cmp	r0, #0
   1aacc:	beq	1aafc <ReadDataSlabN+0x1390>
   1aad0:	ldr	sl, [sp, #36]	; 0x24
   1aad4:	ldr	r6, [sp, #32]
   1aad8:	mov	r2, #1
   1aadc:	mul	r1, r0, sl
   1aae0:	ldr	r0, [r6]
   1aae4:	bl	1a2c <fseek@plt>
   1aae8:	ldr	r0, [r4]
   1aaec:	ldr	r2, [sp, #24]
   1aaf0:	ldr	r7, [fp, #24]
   1aaf4:	add	r8, r0, r8
   1aaf8:	b	1ab10 <ReadDataSlabN+0x13a4>
   1aafc:	ldr	r2, [sp, #24]
   1ab00:	ldr	r6, [sp, #32]
   1ab04:	ldr	r7, [fp, #24]
   1ab08:	ldr	sl, [sp, #36]	; 0x24
   1ab0c:	mov	r0, #0
   1ab10:	ldr	r1, [r7]
   1ab14:	ldr	r3, [fp, #12]
   1ab18:	ldr	r4, [sp, #28]
   1ab1c:	str	r5, [sp, #8]
   1ab20:	cmp	r1, #0
   1ab24:	ble	1aba0 <ReadDataSlabN+0x1434>
   1ab28:	ldr	r9, [fp, #20]
   1ab2c:	mov	sl, r7
   1ab30:	add	r5, r2, r5, lsl #3
   1ab34:	mov	r7, #0
   1ab38:	mov	r0, r6
   1ab3c:	mov	r1, r5
   1ab40:	mov	r2, r4
   1ab44:	mov	r3, #1
   1ab48:	bl	3858 <ReadDoubleData>
   1ab4c:	ldr	r0, [r9]
   1ab50:	ldr	r1, [sp, #36]	; 0x24
   1ab54:	mov	r2, #1
   1ab58:	sub	r0, r0, #1
   1ab5c:	mul	r1, r0, r1
   1ab60:	ldr	r0, [r6]
   1ab64:	bl	1a2c <fseek@plt>
   1ab68:	ldr	r2, [r9]
   1ab6c:	ldr	r1, [sl]
   1ab70:	add	r7, r7, #1
   1ab74:	add	r5, r5, #8
   1ab78:	add	r8, r2, r8
   1ab7c:	cmp	r7, r1
   1ab80:	blt	1ab38 <ReadDataSlabN+0x13cc>
   1ab84:	ldr	r0, [fp, #16]
   1ab88:	mov	r7, sl
   1ab8c:	ldr	sl, [sp, #36]	; 0x24
   1ab90:	ldr	r3, [fp, #12]
   1ab94:	ldr	r9, [sp, #4]
   1ab98:	ldr	r0, [r0]
   1ab9c:	b	1aba8 <ReadDataSlabN+0x143c>
   1aba0:	ldr	r2, [fp, #20]
   1aba4:	ldr	r2, [r2]
   1aba8:	ldr	r3, [r3]
   1abac:	mls	r1, r2, r1, r3
   1abb0:	mov	r2, #1
   1abb4:	sub	r5, r1, r0
   1abb8:	ldr	r0, [r6]
   1abbc:	mul	r1, r5, sl
   1abc0:	bl	1a2c <fseek@plt>
   1abc4:	ldr	r0, [fp, #8]
   1abc8:	add	r8, r5, r8
   1abcc:	cmp	r0, #2
   1abd0:	blt	1acec <ReadDataSlabN+0x1580>
   1abd4:	ldr	ip, [sp, #16]
   1abd8:	mov	r0, #0
   1abdc:	add	r3, sp, #40	; 0x28
   1abe0:	mov	r5, r0
   1abe4:	ldr	r0, [ip, r0, lsl #2]
   1abe8:	ldr	r1, [sp, #20]
   1abec:	add	r0, r0, #1
   1abf0:	str	r0, [ip, r5, lsl #2]
   1abf4:	ldr	r1, [r1, r5, lsl #2]
   1abf8:	sdiv	r2, r0, r1
   1abfc:	mls	r0, r2, r1, r0
   1ac00:	cmp	r0, #0
   1ac04:	bne	1acd0 <ReadDataSlabN+0x1564>
   1ac08:	mov	r0, #0
   1ac0c:	str	r0, [ip, r5, lsl #2]
   1ac10:	add	r0, r3, r5, lsl #2
   1ac14:	ldr	r6, [r0, #4]
   1ac18:	sdiv	r0, r8, r6
   1ac1c:	mls	r7, r0, r6, r8
   1ac20:	cmp	r7, #0
   1ac24:	beq	1ac74 <ReadDataSlabN+0x1508>
   1ac28:	ldr	sl, [r3, r5, lsl #2]
   1ac2c:	ldr	r0, [r9, r5, lsl #2]
   1ac30:	sub	r1, r6, r7
   1ac34:	ldr	r4, [sp, #32]
   1ac38:	mov	r2, #1
   1ac3c:	mla	r0, r0, sl, r1
   1ac40:	ldr	r1, [sp, #36]	; 0x24
   1ac44:	mul	r1, r0, r1
   1ac48:	ldr	r0, [r4]
   1ac4c:	bl	1a2c <fseek@plt>
   1ac50:	ldr	r0, [r9, r5, lsl #2]
   1ac54:	add	r1, r6, r8
   1ac58:	ldr	ip, [sp, #16]
   1ac5c:	add	r3, sp, #40	; 0x28
   1ac60:	mov	r6, r4
   1ac64:	sub	r1, r1, r7
   1ac68:	mla	r8, r0, sl, r1
   1ac6c:	ldr	sl, [sp, #36]	; 0x24
   1ac70:	b	1acb4 <ReadDataSlabN+0x1548>
   1ac74:	ldr	r0, [r9, r5, lsl #2]
   1ac78:	cmp	r0, #0
   1ac7c:	beq	1acb0 <ReadDataSlabN+0x1544>
   1ac80:	ldr	r4, [r3, r5, lsl #2]
   1ac84:	ldr	r6, [sp, #32]
   1ac88:	mul	r0, r0, sl
   1ac8c:	mov	r2, #1
   1ac90:	mul	r1, r0, r4
   1ac94:	ldr	r0, [r6]
   1ac98:	bl	1a2c <fseek@plt>
   1ac9c:	ldr	r0, [r9, r5, lsl #2]
   1aca0:	ldr	ip, [sp, #16]
   1aca4:	add	r3, sp, #40	; 0x28
   1aca8:	mla	r8, r0, r4, r8
   1acac:	b	1acb4 <ReadDataSlabN+0x1548>
   1acb0:	ldr	r6, [sp, #32]
   1acb4:	ldr	r2, [fp, #8]
   1acb8:	ldr	r7, [fp, #24]
   1acbc:	add	r1, r5, #2
   1acc0:	add	r0, r5, #1
   1acc4:	cmp	r1, r2
   1acc8:	blt	1abe0 <ReadDataSlabN+0x1474>
   1accc:	b	1acec <ReadDataSlabN+0x1580>
   1acd0:	ldr	r0, [sp]
   1acd4:	mov	r2, #1
   1acd8:	ldr	r4, [r0, r5, lsl #2]
   1acdc:	ldr	r0, [r6]
   1ace0:	mul	r1, r4, sl
   1ace4:	bl	1a2c <fseek@plt>
   1ace8:	add	r8, r4, r8
   1acec:	ldr	r0, [r7]
   1acf0:	ldr	r5, [sp, #8]
   1acf4:	ldr	r1, [sp, #12]
   1acf8:	add	r5, r0, r5
   1acfc:	mov	r0, #0
   1ad00:	cmp	r5, r1
   1ad04:	blt	1aac0 <ReadDataSlabN+0x1354>
   1ad08:	b	197f0 <ReadDataSlabN+0x84>
   1ad0c:	sub	r4, fp, #72	; 0x48
   1ad10:	ldr	r0, [sp, #36]	; 0x24
   1ad14:	mov	r2, #1
   1ad18:	mul	r1, sl, r0
   1ad1c:	ldr	r0, [sp, #32]
   1ad20:	ldr	r0, [r0]
   1ad24:	bl	1a2c <fseek@plt>
   1ad28:	ldr	r0, [fp, #20]
   1ad2c:	ldr	r0, [r0]
   1ad30:	cmp	r0, #1
   1ad34:	bne	1c07c <ReadDataSlabN+0x2910>
   1ad38:	ldr	r0, [sp, #12]
   1ad3c:	ldr	r1, [fp, #16]
   1ad40:	cmp	r0, #1
   1ad44:	ldr	r0, [fp, #24]
   1ad48:	blt	1d728 <ReadDataSlabN+0x3fbc>
   1ad4c:	add	r0, r0, #4
   1ad50:	add	r1, r1, #4
   1ad54:	mov	r5, #0
   1ad58:	str	r0, [sp, #20]
   1ad5c:	add	r0, sp, #80	; 0x50
   1ad60:	str	r1, [sp, #8]
   1ad64:	orr	r7, r0, #4
   1ad68:	orr	r0, r4, #4
   1ad6c:	mov	r4, r1
   1ad70:	str	r0, [sp, #4]
   1ad74:	ldr	r6, [fp, #16]
   1ad78:	ldr	r0, [r6]
   1ad7c:	cmp	r0, #0
   1ad80:	beq	1adac <ReadDataSlabN+0x1640>
   1ad84:	ldr	r9, [sp, #36]	; 0x24
   1ad88:	ldr	r4, [sp, #32]
   1ad8c:	mov	r2, #1
   1ad90:	mul	r1, r0, r9
   1ad94:	ldr	r0, [r4]
   1ad98:	bl	1a2c <fseek@plt>
   1ad9c:	ldr	r0, [r6]
   1ada0:	ldr	r2, [sp, #28]
   1ada4:	add	sl, r0, sl
   1ada8:	b	1adb4 <ReadDataSlabN+0x1648>
   1adac:	add	r9, sp, #28
   1adb0:	ldm	r9, {r2, r4, r9}
   1adb4:	ldr	r0, [sp, #24]
   1adb8:	str	r5, [sp, #16]
   1adbc:	add	r1, r0, r5, lsl #2
   1adc0:	ldr	r0, [fp, #24]
   1adc4:	ldr	r3, [r0]
   1adc8:	mov	r5, r0
   1adcc:	mov	r0, r4
   1add0:	bl	6f1c <ReadSingleData>
   1add4:	ldr	r0, [fp, #12]
   1add8:	ldr	r8, [r6]
   1addc:	ldr	r1, [r5]
   1ade0:	mov	r2, #1
   1ade4:	ldr	r6, [r0]
   1ade8:	sub	r0, r6, r8
   1adec:	sub	r0, r0, r1
   1adf0:	mul	r1, r0, r9
   1adf4:	ldr	r0, [r4]
   1adf8:	bl	1a2c <fseek@plt>
   1adfc:	add	r0, r6, sl
   1ae00:	sub	sl, r0, r8
   1ae04:	ldr	r0, [fp, #8]
   1ae08:	cmp	r0, #2
   1ae0c:	blt	1af18 <ReadDataSlabN+0x17ac>
   1ae10:	ldr	r4, [sp, #8]
   1ae14:	mov	r0, #0
   1ae18:	add	r3, sp, #40	; 0x28
   1ae1c:	mov	r8, r0
   1ae20:	ldr	r0, [r7, r0, lsl #2]
   1ae24:	ldr	r1, [sp, #20]
   1ae28:	add	r0, r0, #1
   1ae2c:	str	r0, [r7, r8, lsl #2]
   1ae30:	ldr	r1, [r1, r8, lsl #2]
   1ae34:	sdiv	r2, r0, r1
   1ae38:	mls	r0, r2, r1, r0
   1ae3c:	cmp	r0, #0
   1ae40:	bne	1aef4 <ReadDataSlabN+0x1788>
   1ae44:	mov	r0, #0
   1ae48:	str	r0, [r7, r8, lsl #2]
   1ae4c:	add	r0, r3, r8, lsl #2
   1ae50:	ldr	r6, [r0, #4]
   1ae54:	sdiv	r0, sl, r6
   1ae58:	mls	r9, r0, r6, sl
   1ae5c:	cmp	r9, #0
   1ae60:	beq	1aea4 <ReadDataSlabN+0x1738>
   1ae64:	ldr	r5, [r3, r8, lsl #2]
   1ae68:	ldr	r0, [r4, r8, lsl #2]
   1ae6c:	sub	r1, r6, r9
   1ae70:	mov	r2, #1
   1ae74:	mla	r0, r0, r5, r1
   1ae78:	ldr	r1, [sp, #36]	; 0x24
   1ae7c:	mul	r1, r0, r1
   1ae80:	ldr	r0, [sp, #32]
   1ae84:	ldr	r0, [r0]
   1ae88:	bl	1a2c <fseek@plt>
   1ae8c:	ldr	r0, [r4, r8, lsl #2]
   1ae90:	add	r1, r6, sl
   1ae94:	add	r3, sp, #40	; 0x28
   1ae98:	sub	r1, r1, r9
   1ae9c:	mla	sl, r0, r5, r1
   1aea0:	b	1aedc <ReadDataSlabN+0x1770>
   1aea4:	ldr	r0, [r4, r8, lsl #2]
   1aea8:	cmp	r0, #0
   1aeac:	beq	1aedc <ReadDataSlabN+0x1770>
   1aeb0:	ldr	r1, [sp, #36]	; 0x24
   1aeb4:	ldr	r5, [r3, r8, lsl #2]
   1aeb8:	mov	r2, #1
   1aebc:	mul	r0, r0, r1
   1aec0:	mul	r1, r0, r5
   1aec4:	ldr	r0, [sp, #32]
   1aec8:	ldr	r0, [r0]
   1aecc:	bl	1a2c <fseek@plt>
   1aed0:	ldr	r0, [r4, r8, lsl #2]
   1aed4:	add	r3, sp, #40	; 0x28
   1aed8:	mla	sl, r0, r5, sl
   1aedc:	ldr	r2, [fp, #8]
   1aee0:	add	r1, r8, #2
   1aee4:	add	r0, r8, #1
   1aee8:	cmp	r1, r2
   1aeec:	blt	1ae1c <ReadDataSlabN+0x16b0>
   1aef0:	b	1af18 <ReadDataSlabN+0x17ac>
   1aef4:	ldr	r0, [sp, #4]
   1aef8:	mov	r2, #1
   1aefc:	ldr	r5, [r0, r8, lsl #2]
   1af00:	ldr	r0, [sp, #36]	; 0x24
   1af04:	mul	r1, r5, r0
   1af08:	ldr	r0, [sp, #32]
   1af0c:	ldr	r0, [r0]
   1af10:	bl	1a2c <fseek@plt>
   1af14:	add	sl, r5, sl
   1af18:	ldr	r0, [fp, #24]
   1af1c:	ldr	r5, [sp, #16]
   1af20:	ldr	r1, [sp, #12]
   1af24:	ldr	r0, [r0]
   1af28:	add	r5, r0, r5
   1af2c:	mov	r0, #0
   1af30:	cmp	r5, r1
   1af34:	blt	1ad74 <ReadDataSlabN+0x1608>
   1af38:	b	197f0 <ReadDataSlabN+0x84>
   1af3c:	sub	r4, fp, #72	; 0x48
   1af40:	ldr	r0, [sp, #36]	; 0x24
   1af44:	mov	r2, #1
   1af48:	mul	r1, sl, r0
   1af4c:	ldr	r0, [sp, #32]
   1af50:	ldr	r0, [r0]
   1af54:	bl	1a2c <fseek@plt>
   1af58:	ldr	r0, [fp, #20]
   1af5c:	ldr	r0, [r0]
   1af60:	cmp	r0, #1
   1af64:	bne	1c304 <ReadDataSlabN+0x2b98>
   1af68:	ldr	r0, [sp, #12]
   1af6c:	ldr	r1, [fp, #16]
   1af70:	cmp	r0, #1
   1af74:	ldr	r0, [fp, #24]
   1af78:	blt	1d728 <ReadDataSlabN+0x3fbc>
   1af7c:	add	r0, r0, #4
   1af80:	mov	r2, r4
   1af84:	add	r4, r1, #4
   1af88:	mov	r5, #0
   1af8c:	str	r0, [sp, #20]
   1af90:	add	r0, sp, #80	; 0x50
   1af94:	orr	r7, r0, #4
   1af98:	orr	r0, r2, #4
   1af9c:	str	r0, [sp, #8]
   1afa0:	ldr	r6, [fp, #16]
   1afa4:	ldr	r0, [r6]
   1afa8:	cmp	r0, #0
   1afac:	beq	1afd4 <ReadDataSlabN+0x1868>
   1afb0:	ldr	r1, [sp, #36]	; 0x24
   1afb4:	ldr	r9, [sp, #32]
   1afb8:	mov	r2, #1
   1afbc:	mul	r1, r0, r1
   1afc0:	ldr	r0, [r9]
   1afc4:	bl	1a2c <fseek@plt>
   1afc8:	ldr	r0, [r6]
   1afcc:	add	sl, r0, sl
   1afd0:	b	1afd8 <ReadDataSlabN+0x186c>
   1afd4:	ldr	r9, [sp, #32]
   1afd8:	ldr	r0, [sp, #24]
   1afdc:	ldr	r2, [sp, #28]
   1afe0:	str	r5, [sp, #16]
   1afe4:	add	r1, r0, r5
   1afe8:	ldr	r0, [fp, #24]
   1afec:	ldr	r3, [r0]
   1aff0:	mov	r5, r0
   1aff4:	mov	r0, r9
   1aff8:	bl	15874 <ReadInt8Data>
   1affc:	ldr	r0, [fp, #12]
   1b000:	ldr	r8, [r6]
   1b004:	ldr	r1, [r5]
   1b008:	mov	r2, #1
   1b00c:	ldr	r6, [r0]
   1b010:	sub	r0, r6, r8
   1b014:	sub	r0, r0, r1
   1b018:	ldr	r1, [sp, #36]	; 0x24
   1b01c:	mul	r1, r0, r1
   1b020:	ldr	r0, [r9]
   1b024:	bl	1a2c <fseek@plt>
   1b028:	add	r0, r6, sl
   1b02c:	sub	sl, r0, r8
   1b030:	ldr	r0, [fp, #8]
   1b034:	cmp	r0, #2
   1b038:	blt	1b140 <ReadDataSlabN+0x19d4>
   1b03c:	mov	r0, #0
   1b040:	add	r3, sp, #40	; 0x28
   1b044:	mov	r8, r0
   1b048:	ldr	r0, [r7, r0, lsl #2]
   1b04c:	ldr	r1, [sp, #20]
   1b050:	add	r0, r0, #1
   1b054:	str	r0, [r7, r8, lsl #2]
   1b058:	ldr	r1, [r1, r8, lsl #2]
   1b05c:	sdiv	r2, r0, r1
   1b060:	mls	r0, r2, r1, r0
   1b064:	cmp	r0, #0
   1b068:	bne	1b11c <ReadDataSlabN+0x19b0>
   1b06c:	mov	r0, #0
   1b070:	str	r0, [r7, r8, lsl #2]
   1b074:	add	r0, r3, r8, lsl #2
   1b078:	ldr	r6, [r0, #4]
   1b07c:	sdiv	r0, sl, r6
   1b080:	mls	r9, r0, r6, sl
   1b084:	cmp	r9, #0
   1b088:	beq	1b0cc <ReadDataSlabN+0x1960>
   1b08c:	ldr	r5, [r3, r8, lsl #2]
   1b090:	ldr	r0, [r4, r8, lsl #2]
   1b094:	sub	r1, r6, r9
   1b098:	mov	r2, #1
   1b09c:	mla	r0, r0, r5, r1
   1b0a0:	ldr	r1, [sp, #36]	; 0x24
   1b0a4:	mul	r1, r0, r1
   1b0a8:	ldr	r0, [sp, #32]
   1b0ac:	ldr	r0, [r0]
   1b0b0:	bl	1a2c <fseek@plt>
   1b0b4:	ldr	r0, [r4, r8, lsl #2]
   1b0b8:	add	r1, r6, sl
   1b0bc:	add	r3, sp, #40	; 0x28
   1b0c0:	sub	r1, r1, r9
   1b0c4:	mla	sl, r0, r5, r1
   1b0c8:	b	1b104 <ReadDataSlabN+0x1998>
   1b0cc:	ldr	r0, [r4, r8, lsl #2]
   1b0d0:	cmp	r0, #0
   1b0d4:	beq	1b104 <ReadDataSlabN+0x1998>
   1b0d8:	ldr	r1, [sp, #36]	; 0x24
   1b0dc:	ldr	r5, [r3, r8, lsl #2]
   1b0e0:	mov	r2, #1
   1b0e4:	mul	r0, r0, r1
   1b0e8:	mul	r1, r0, r5
   1b0ec:	ldr	r0, [sp, #32]
   1b0f0:	ldr	r0, [r0]
   1b0f4:	bl	1a2c <fseek@plt>
   1b0f8:	ldr	r0, [r4, r8, lsl #2]
   1b0fc:	add	r3, sp, #40	; 0x28
   1b100:	mla	sl, r0, r5, sl
   1b104:	ldr	r2, [fp, #8]
   1b108:	add	r1, r8, #2
   1b10c:	add	r0, r8, #1
   1b110:	cmp	r1, r2
   1b114:	blt	1b044 <ReadDataSlabN+0x18d8>
   1b118:	b	1b140 <ReadDataSlabN+0x19d4>
   1b11c:	ldr	r0, [sp, #8]
   1b120:	mov	r2, #1
   1b124:	ldr	r5, [r0, r8, lsl #2]
   1b128:	ldr	r0, [sp, #36]	; 0x24
   1b12c:	mul	r1, r5, r0
   1b130:	ldr	r0, [sp, #32]
   1b134:	ldr	r0, [r0]
   1b138:	bl	1a2c <fseek@plt>
   1b13c:	add	sl, r5, sl
   1b140:	ldr	r0, [fp, #24]
   1b144:	ldr	r5, [sp, #16]
   1b148:	ldr	r1, [sp, #12]
   1b14c:	ldr	r0, [r0]
   1b150:	add	r5, r0, r5
   1b154:	mov	r0, #0
   1b158:	cmp	r5, r1
   1b15c:	blt	1afa0 <ReadDataSlabN+0x1834>
   1b160:	b	197f0 <ReadDataSlabN+0x84>
   1b164:	sub	r4, fp, #72	; 0x48
   1b168:	ldr	r0, [sp, #36]	; 0x24
   1b16c:	mov	r2, #1
   1b170:	mul	r1, sl, r0
   1b174:	ldr	r0, [sp, #32]
   1b178:	ldr	r0, [r0]
   1b17c:	bl	1a2c <fseek@plt>
   1b180:	ldr	r0, [fp, #20]
   1b184:	ldr	r0, [r0]
   1b188:	cmp	r0, #1
   1b18c:	bne	1c57c <ReadDataSlabN+0x2e10>
   1b190:	ldr	r0, [sp, #12]
   1b194:	ldr	r1, [fp, #16]
   1b198:	cmp	r0, #1
   1b19c:	ldr	r0, [fp, #24]
   1b1a0:	blt	1d728 <ReadDataSlabN+0x3fbc>
   1b1a4:	add	r0, r0, #4
   1b1a8:	mov	r2, r4
   1b1ac:	add	r4, r1, #4
   1b1b0:	mov	r5, #0
   1b1b4:	str	r0, [sp, #20]
   1b1b8:	add	r0, sp, #80	; 0x50
   1b1bc:	orr	r7, r0, #4
   1b1c0:	orr	r0, r2, #4
   1b1c4:	str	r0, [sp, #8]
   1b1c8:	ldr	r6, [fp, #16]
   1b1cc:	ldr	r0, [r6]
   1b1d0:	cmp	r0, #0
   1b1d4:	beq	1b1fc <ReadDataSlabN+0x1a90>
   1b1d8:	ldr	r1, [sp, #36]	; 0x24
   1b1dc:	ldr	r9, [sp, #32]
   1b1e0:	mov	r2, #1
   1b1e4:	mul	r1, r0, r1
   1b1e8:	ldr	r0, [r9]
   1b1ec:	bl	1a2c <fseek@plt>
   1b1f0:	ldr	r0, [r6]
   1b1f4:	add	sl, r0, sl
   1b1f8:	b	1b200 <ReadDataSlabN+0x1a94>
   1b1fc:	ldr	r9, [sp, #32]
   1b200:	ldr	r0, [sp, #24]
   1b204:	ldr	r2, [sp, #28]
   1b208:	str	r5, [sp, #16]
   1b20c:	add	r1, r0, r5
   1b210:	ldr	r0, [fp, #24]
   1b214:	ldr	r3, [r0]
   1b218:	mov	r5, r0
   1b21c:	mov	r0, r9
   1b220:	bl	176ac <ReadUInt8Data>
   1b224:	ldr	r0, [fp, #12]
   1b228:	ldr	r8, [r6]
   1b22c:	ldr	r1, [r5]
   1b230:	mov	r2, #1
   1b234:	ldr	r6, [r0]
   1b238:	sub	r0, r6, r8
   1b23c:	sub	r0, r0, r1
   1b240:	ldr	r1, [sp, #36]	; 0x24
   1b244:	mul	r1, r0, r1
   1b248:	ldr	r0, [r9]
   1b24c:	bl	1a2c <fseek@plt>
   1b250:	add	r0, r6, sl
   1b254:	sub	sl, r0, r8
   1b258:	ldr	r0, [fp, #8]
   1b25c:	cmp	r0, #2
   1b260:	blt	1b368 <ReadDataSlabN+0x1bfc>
   1b264:	mov	r0, #0
   1b268:	add	r3, sp, #40	; 0x28
   1b26c:	mov	r8, r0
   1b270:	ldr	r0, [r7, r0, lsl #2]
   1b274:	ldr	r1, [sp, #20]
   1b278:	add	r0, r0, #1
   1b27c:	str	r0, [r7, r8, lsl #2]
   1b280:	ldr	r1, [r1, r8, lsl #2]
   1b284:	sdiv	r2, r0, r1
   1b288:	mls	r0, r2, r1, r0
   1b28c:	cmp	r0, #0
   1b290:	bne	1b344 <ReadDataSlabN+0x1bd8>
   1b294:	mov	r0, #0
   1b298:	str	r0, [r7, r8, lsl #2]
   1b29c:	add	r0, r3, r8, lsl #2
   1b2a0:	ldr	r6, [r0, #4]
   1b2a4:	sdiv	r0, sl, r6
   1b2a8:	mls	r9, r0, r6, sl
   1b2ac:	cmp	r9, #0
   1b2b0:	beq	1b2f4 <ReadDataSlabN+0x1b88>
   1b2b4:	ldr	r5, [r3, r8, lsl #2]
   1b2b8:	ldr	r0, [r4, r8, lsl #2]
   1b2bc:	sub	r1, r6, r9
   1b2c0:	mov	r2, #1
   1b2c4:	mla	r0, r0, r5, r1
   1b2c8:	ldr	r1, [sp, #36]	; 0x24
   1b2cc:	mul	r1, r0, r1
   1b2d0:	ldr	r0, [sp, #32]
   1b2d4:	ldr	r0, [r0]
   1b2d8:	bl	1a2c <fseek@plt>
   1b2dc:	ldr	r0, [r4, r8, lsl #2]
   1b2e0:	add	r1, r6, sl
   1b2e4:	add	r3, sp, #40	; 0x28
   1b2e8:	sub	r1, r1, r9
   1b2ec:	mla	sl, r0, r5, r1
   1b2f0:	b	1b32c <ReadDataSlabN+0x1bc0>
   1b2f4:	ldr	r0, [r4, r8, lsl #2]
   1b2f8:	cmp	r0, #0
   1b2fc:	beq	1b32c <ReadDataSlabN+0x1bc0>
   1b300:	ldr	r1, [sp, #36]	; 0x24
   1b304:	ldr	r5, [r3, r8, lsl #2]
   1b308:	mov	r2, #1
   1b30c:	mul	r0, r0, r1
   1b310:	mul	r1, r0, r5
   1b314:	ldr	r0, [sp, #32]
   1b318:	ldr	r0, [r0]
   1b31c:	bl	1a2c <fseek@plt>
   1b320:	ldr	r0, [r4, r8, lsl #2]
   1b324:	add	r3, sp, #40	; 0x28
   1b328:	mla	sl, r0, r5, sl
   1b32c:	ldr	r2, [fp, #8]
   1b330:	add	r1, r8, #2
   1b334:	add	r0, r8, #1
   1b338:	cmp	r1, r2
   1b33c:	blt	1b26c <ReadDataSlabN+0x1b00>
   1b340:	b	1b368 <ReadDataSlabN+0x1bfc>
   1b344:	ldr	r0, [sp, #8]
   1b348:	mov	r2, #1
   1b34c:	ldr	r5, [r0, r8, lsl #2]
   1b350:	ldr	r0, [sp, #36]	; 0x24
   1b354:	mul	r1, r5, r0
   1b358:	ldr	r0, [sp, #32]
   1b35c:	ldr	r0, [r0]
   1b360:	bl	1a2c <fseek@plt>
   1b364:	add	sl, r5, sl
   1b368:	ldr	r0, [fp, #24]
   1b36c:	ldr	r5, [sp, #16]
   1b370:	ldr	r1, [sp, #12]
   1b374:	ldr	r0, [r0]
   1b378:	add	r5, r0, r5
   1b37c:	mov	r0, #0
   1b380:	cmp	r5, r1
   1b384:	blt	1b1c8 <ReadDataSlabN+0x1a5c>
   1b388:	b	197f0 <ReadDataSlabN+0x84>
   1b38c:	sub	r4, fp, #72	; 0x48
   1b390:	ldr	r0, [sp, #36]	; 0x24
   1b394:	mov	r2, #1
   1b398:	mul	r1, sl, r0
   1b39c:	ldr	r0, [sp, #32]
   1b3a0:	ldr	r0, [r0]
   1b3a4:	bl	1a2c <fseek@plt>
   1b3a8:	ldr	r0, [fp, #20]
   1b3ac:	ldr	r0, [r0]
   1b3b0:	cmp	r0, #1
   1b3b4:	bne	1c7f4 <ReadDataSlabN+0x3088>
   1b3b8:	ldr	r0, [sp, #12]
   1b3bc:	ldr	r1, [fp, #16]
   1b3c0:	cmp	r0, #1
   1b3c4:	ldr	r0, [fp, #24]
   1b3c8:	blt	1d728 <ReadDataSlabN+0x3fbc>
   1b3cc:	add	r0, r0, #4
   1b3d0:	mov	r2, r4
   1b3d4:	add	r4, r1, #4
   1b3d8:	mov	r5, #0
   1b3dc:	str	r0, [sp, #20]
   1b3e0:	add	r0, sp, #80	; 0x50
   1b3e4:	orr	r7, r0, #4
   1b3e8:	orr	r0, r2, #4
   1b3ec:	str	r0, [sp, #8]
   1b3f0:	ldr	r6, [fp, #16]
   1b3f4:	ldr	r0, [r6]
   1b3f8:	cmp	r0, #0
   1b3fc:	beq	1b424 <ReadDataSlabN+0x1cb8>
   1b400:	ldr	r1, [sp, #36]	; 0x24
   1b404:	ldr	r9, [sp, #32]
   1b408:	mov	r2, #1
   1b40c:	mul	r1, r0, r1
   1b410:	ldr	r0, [r9]
   1b414:	bl	1a2c <fseek@plt>
   1b418:	ldr	r0, [r6]
   1b41c:	add	sl, r0, sl
   1b420:	b	1b428 <ReadDataSlabN+0x1cbc>
   1b424:	ldr	r9, [sp, #32]
   1b428:	ldr	r0, [sp, #24]
   1b42c:	ldr	r2, [sp, #28]
   1b430:	str	r5, [sp, #16]
   1b434:	add	r1, r0, r5, lsl #1
   1b438:	ldr	r0, [fp, #24]
   1b43c:	ldr	r3, [r0]
   1b440:	mov	r5, r0
   1b444:	mov	r0, r9
   1b448:	bl	11944 <ReadInt16Data>
   1b44c:	ldr	r0, [fp, #12]
   1b450:	ldr	r8, [r6]
   1b454:	ldr	r1, [r5]
   1b458:	mov	r2, #1
   1b45c:	ldr	r6, [r0]
   1b460:	sub	r0, r6, r8
   1b464:	sub	r0, r0, r1
   1b468:	ldr	r1, [sp, #36]	; 0x24
   1b46c:	mul	r1, r0, r1
   1b470:	ldr	r0, [r9]
   1b474:	bl	1a2c <fseek@plt>
   1b478:	add	r0, r6, sl
   1b47c:	sub	sl, r0, r8
   1b480:	ldr	r0, [fp, #8]
   1b484:	cmp	r0, #2
   1b488:	blt	1b590 <ReadDataSlabN+0x1e24>
   1b48c:	mov	r0, #0
   1b490:	add	r3, sp, #40	; 0x28
   1b494:	mov	r8, r0
   1b498:	ldr	r0, [r7, r0, lsl #2]
   1b49c:	ldr	r1, [sp, #20]
   1b4a0:	add	r0, r0, #1
   1b4a4:	str	r0, [r7, r8, lsl #2]
   1b4a8:	ldr	r1, [r1, r8, lsl #2]
   1b4ac:	sdiv	r2, r0, r1
   1b4b0:	mls	r0, r2, r1, r0
   1b4b4:	cmp	r0, #0
   1b4b8:	bne	1b56c <ReadDataSlabN+0x1e00>
   1b4bc:	mov	r0, #0
   1b4c0:	str	r0, [r7, r8, lsl #2]
   1b4c4:	add	r0, r3, r8, lsl #2
   1b4c8:	ldr	r6, [r0, #4]
   1b4cc:	sdiv	r0, sl, r6
   1b4d0:	mls	r9, r0, r6, sl
   1b4d4:	cmp	r9, #0
   1b4d8:	beq	1b51c <ReadDataSlabN+0x1db0>
   1b4dc:	ldr	r5, [r3, r8, lsl #2]
   1b4e0:	ldr	r0, [r4, r8, lsl #2]
   1b4e4:	sub	r1, r6, r9
   1b4e8:	mov	r2, #1
   1b4ec:	mla	r0, r0, r5, r1
   1b4f0:	ldr	r1, [sp, #36]	; 0x24
   1b4f4:	mul	r1, r0, r1
   1b4f8:	ldr	r0, [sp, #32]
   1b4fc:	ldr	r0, [r0]
   1b500:	bl	1a2c <fseek@plt>
   1b504:	ldr	r0, [r4, r8, lsl #2]
   1b508:	add	r1, r6, sl
   1b50c:	add	r3, sp, #40	; 0x28
   1b510:	sub	r1, r1, r9
   1b514:	mla	sl, r0, r5, r1
   1b518:	b	1b554 <ReadDataSlabN+0x1de8>
   1b51c:	ldr	r0, [r4, r8, lsl #2]
   1b520:	cmp	r0, #0
   1b524:	beq	1b554 <ReadDataSlabN+0x1de8>
   1b528:	ldr	r1, [sp, #36]	; 0x24
   1b52c:	ldr	r5, [r3, r8, lsl #2]
   1b530:	mov	r2, #1
   1b534:	mul	r0, r0, r1
   1b538:	mul	r1, r0, r5
   1b53c:	ldr	r0, [sp, #32]
   1b540:	ldr	r0, [r0]
   1b544:	bl	1a2c <fseek@plt>
   1b548:	ldr	r0, [r4, r8, lsl #2]
   1b54c:	add	r3, sp, #40	; 0x28
   1b550:	mla	sl, r0, r5, sl
   1b554:	ldr	r2, [fp, #8]
   1b558:	add	r1, r8, #2
   1b55c:	add	r0, r8, #1
   1b560:	cmp	r1, r2
   1b564:	blt	1b494 <ReadDataSlabN+0x1d28>
   1b568:	b	1b590 <ReadDataSlabN+0x1e24>
   1b56c:	ldr	r0, [sp, #8]
   1b570:	mov	r2, #1
   1b574:	ldr	r5, [r0, r8, lsl #2]
   1b578:	ldr	r0, [sp, #36]	; 0x24
   1b57c:	mul	r1, r5, r0
   1b580:	ldr	r0, [sp, #32]
   1b584:	ldr	r0, [r0]
   1b588:	bl	1a2c <fseek@plt>
   1b58c:	add	sl, r5, sl
   1b590:	ldr	r0, [fp, #24]
   1b594:	ldr	r5, [sp, #16]
   1b598:	ldr	r1, [sp, #12]
   1b59c:	ldr	r0, [r0]
   1b5a0:	add	r5, r0, r5
   1b5a4:	mov	r0, #0
   1b5a8:	cmp	r5, r1
   1b5ac:	blt	1b3f0 <ReadDataSlabN+0x1c84>
   1b5b0:	b	197f0 <ReadDataSlabN+0x84>
   1b5b4:	sub	r4, fp, #72	; 0x48
   1b5b8:	ldr	r0, [sp, #36]	; 0x24
   1b5bc:	mov	r2, #1
   1b5c0:	mul	r1, sl, r0
   1b5c4:	ldr	r0, [sp, #32]
   1b5c8:	ldr	r0, [r0]
   1b5cc:	bl	1a2c <fseek@plt>
   1b5d0:	ldr	r0, [fp, #20]
   1b5d4:	ldr	r0, [r0]
   1b5d8:	cmp	r0, #1
   1b5dc:	bne	1ca7c <ReadDataSlabN+0x3310>
   1b5e0:	ldr	r0, [sp, #12]
   1b5e4:	ldr	r1, [fp, #16]
   1b5e8:	cmp	r0, #1
   1b5ec:	ldr	r0, [fp, #24]
   1b5f0:	blt	1d728 <ReadDataSlabN+0x3fbc>
   1b5f4:	add	r0, r0, #4
   1b5f8:	mov	r2, r4
   1b5fc:	add	r4, r1, #4
   1b600:	mov	r5, #0
   1b604:	str	r0, [sp, #20]
   1b608:	add	r0, sp, #80	; 0x50
   1b60c:	orr	r7, r0, #4
   1b610:	orr	r0, r2, #4
   1b614:	str	r0, [sp, #8]
   1b618:	ldr	r6, [fp, #16]
   1b61c:	ldr	r0, [r6]
   1b620:	cmp	r0, #0
   1b624:	beq	1b64c <ReadDataSlabN+0x1ee0>
   1b628:	ldr	r1, [sp, #36]	; 0x24
   1b62c:	ldr	r9, [sp, #32]
   1b630:	mov	r2, #1
   1b634:	mul	r1, r0, r1
   1b638:	ldr	r0, [r9]
   1b63c:	bl	1a2c <fseek@plt>
   1b640:	ldr	r0, [r6]
   1b644:	add	sl, r0, sl
   1b648:	b	1b650 <ReadDataSlabN+0x1ee4>
   1b64c:	ldr	r9, [sp, #32]
   1b650:	ldr	r0, [sp, #24]
   1b654:	ldr	r2, [sp, #28]
   1b658:	str	r5, [sp, #16]
   1b65c:	add	r1, r0, r5, lsl #1
   1b660:	ldr	r0, [fp, #24]
   1b664:	ldr	r3, [r0]
   1b668:	mov	r5, r0
   1b66c:	mov	r0, r9
   1b670:	bl	138dc <ReadUInt16Data>
   1b674:	ldr	r0, [fp, #12]
   1b678:	ldr	r8, [r6]
   1b67c:	ldr	r1, [r5]
   1b680:	mov	r2, #1
   1b684:	ldr	r6, [r0]
   1b688:	sub	r0, r6, r8
   1b68c:	sub	r0, r0, r1
   1b690:	ldr	r1, [sp, #36]	; 0x24
   1b694:	mul	r1, r0, r1
   1b698:	ldr	r0, [r9]
   1b69c:	bl	1a2c <fseek@plt>
   1b6a0:	add	r0, r6, sl
   1b6a4:	sub	sl, r0, r8
   1b6a8:	ldr	r0, [fp, #8]
   1b6ac:	cmp	r0, #2
   1b6b0:	blt	1b7b8 <ReadDataSlabN+0x204c>
   1b6b4:	mov	r0, #0
   1b6b8:	add	r3, sp, #40	; 0x28
   1b6bc:	mov	r8, r0
   1b6c0:	ldr	r0, [r7, r0, lsl #2]
   1b6c4:	ldr	r1, [sp, #20]
   1b6c8:	add	r0, r0, #1
   1b6cc:	str	r0, [r7, r8, lsl #2]
   1b6d0:	ldr	r1, [r1, r8, lsl #2]
   1b6d4:	sdiv	r2, r0, r1
   1b6d8:	mls	r0, r2, r1, r0
   1b6dc:	cmp	r0, #0
   1b6e0:	bne	1b794 <ReadDataSlabN+0x2028>
   1b6e4:	mov	r0, #0
   1b6e8:	str	r0, [r7, r8, lsl #2]
   1b6ec:	add	r0, r3, r8, lsl #2
   1b6f0:	ldr	r6, [r0, #4]
   1b6f4:	sdiv	r0, sl, r6
   1b6f8:	mls	r9, r0, r6, sl
   1b6fc:	cmp	r9, #0
   1b700:	beq	1b744 <ReadDataSlabN+0x1fd8>
   1b704:	ldr	r5, [r3, r8, lsl #2]
   1b708:	ldr	r0, [r4, r8, lsl #2]
   1b70c:	sub	r1, r6, r9
   1b710:	mov	r2, #1
   1b714:	mla	r0, r0, r5, r1
   1b718:	ldr	r1, [sp, #36]	; 0x24
   1b71c:	mul	r1, r0, r1
   1b720:	ldr	r0, [sp, #32]
   1b724:	ldr	r0, [r0]
   1b728:	bl	1a2c <fseek@plt>
   1b72c:	ldr	r0, [r4, r8, lsl #2]
   1b730:	add	r1, r6, sl
   1b734:	add	r3, sp, #40	; 0x28
   1b738:	sub	r1, r1, r9
   1b73c:	mla	sl, r0, r5, r1
   1b740:	b	1b77c <ReadDataSlabN+0x2010>
   1b744:	ldr	r0, [r4, r8, lsl #2]
   1b748:	cmp	r0, #0
   1b74c:	beq	1b77c <ReadDataSlabN+0x2010>
   1b750:	ldr	r1, [sp, #36]	; 0x24
   1b754:	ldr	r5, [r3, r8, lsl #2]
   1b758:	mov	r2, #1
   1b75c:	mul	r0, r0, r1
   1b760:	mul	r1, r0, r5
   1b764:	ldr	r0, [sp, #32]
   1b768:	ldr	r0, [r0]
   1b76c:	bl	1a2c <fseek@plt>
   1b770:	ldr	r0, [r4, r8, lsl #2]
   1b774:	add	r3, sp, #40	; 0x28
   1b778:	mla	sl, r0, r5, sl
   1b77c:	ldr	r2, [fp, #8]
   1b780:	add	r1, r8, #2
   1b784:	add	r0, r8, #1
   1b788:	cmp	r1, r2
   1b78c:	blt	1b6bc <ReadDataSlabN+0x1f50>
   1b790:	b	1b7b8 <ReadDataSlabN+0x204c>
   1b794:	ldr	r0, [sp, #8]
   1b798:	mov	r2, #1
   1b79c:	ldr	r5, [r0, r8, lsl #2]
   1b7a0:	ldr	r0, [sp, #36]	; 0x24
   1b7a4:	mul	r1, r5, r0
   1b7a8:	ldr	r0, [sp, #32]
   1b7ac:	ldr	r0, [r0]
   1b7b0:	bl	1a2c <fseek@plt>
   1b7b4:	add	sl, r5, sl
   1b7b8:	ldr	r0, [fp, #24]
   1b7bc:	ldr	r5, [sp, #16]
   1b7c0:	ldr	r1, [sp, #12]
   1b7c4:	ldr	r0, [r0]
   1b7c8:	add	r5, r0, r5
   1b7cc:	mov	r0, #0
   1b7d0:	cmp	r5, r1
   1b7d4:	blt	1b618 <ReadDataSlabN+0x1eac>
   1b7d8:	b	197f0 <ReadDataSlabN+0x84>
   1b7dc:	sub	r4, fp, #72	; 0x48
   1b7e0:	ldr	r0, [sp, #36]	; 0x24
   1b7e4:	mov	r2, #1
   1b7e8:	mul	r1, sl, r0
   1b7ec:	ldr	r0, [sp, #32]
   1b7f0:	ldr	r0, [r0]
   1b7f4:	bl	1a2c <fseek@plt>
   1b7f8:	ldr	r0, [fp, #20]
   1b7fc:	ldr	r0, [r0]
   1b800:	cmp	r0, #1
   1b804:	bne	1cd04 <ReadDataSlabN+0x3598>
   1b808:	ldr	r0, [sp, #12]
   1b80c:	ldr	r1, [fp, #16]
   1b810:	cmp	r0, #1
   1b814:	ldr	r0, [fp, #24]
   1b818:	blt	1d728 <ReadDataSlabN+0x3fbc>
   1b81c:	add	r0, r0, #4
   1b820:	mov	r2, r4
   1b824:	add	r4, r1, #4
   1b828:	mov	r5, #0
   1b82c:	str	r0, [sp, #20]
   1b830:	add	r0, sp, #80	; 0x50
   1b834:	orr	r7, r0, #4
   1b838:	orr	r0, r2, #4
   1b83c:	str	r0, [sp, #8]
   1b840:	ldr	r6, [fp, #16]
   1b844:	ldr	r0, [r6]
   1b848:	cmp	r0, #0
   1b84c:	beq	1b874 <ReadDataSlabN+0x2108>
   1b850:	ldr	r1, [sp, #36]	; 0x24
   1b854:	ldr	r9, [sp, #32]
   1b858:	mov	r2, #1
   1b85c:	mul	r1, r0, r1
   1b860:	ldr	r0, [r9]
   1b864:	bl	1a2c <fseek@plt>
   1b868:	ldr	r0, [r6]
   1b86c:	add	sl, r0, sl
   1b870:	b	1b878 <ReadDataSlabN+0x210c>
   1b874:	ldr	r9, [sp, #32]
   1b878:	ldr	r0, [sp, #24]
   1b87c:	ldr	r2, [sp, #28]
   1b880:	str	r5, [sp, #16]
   1b884:	add	r1, r0, r5, lsl #2
   1b888:	ldr	r0, [fp, #24]
   1b88c:	ldr	r3, [r0]
   1b890:	mov	r5, r0
   1b894:	mov	r0, r9
   1b898:	bl	d774 <ReadInt32Data>
   1b89c:	ldr	r0, [fp, #12]
   1b8a0:	ldr	r8, [r6]
   1b8a4:	ldr	r1, [r5]
   1b8a8:	mov	r2, #1
   1b8ac:	ldr	r6, [r0]
   1b8b0:	sub	r0, r6, r8
   1b8b4:	sub	r0, r0, r1
   1b8b8:	ldr	r1, [sp, #36]	; 0x24
   1b8bc:	mul	r1, r0, r1
   1b8c0:	ldr	r0, [r9]
   1b8c4:	bl	1a2c <fseek@plt>
   1b8c8:	add	r0, r6, sl
   1b8cc:	sub	sl, r0, r8
   1b8d0:	ldr	r0, [fp, #8]
   1b8d4:	cmp	r0, #2
   1b8d8:	blt	1b9e0 <ReadDataSlabN+0x2274>
   1b8dc:	mov	r0, #0
   1b8e0:	add	r3, sp, #40	; 0x28
   1b8e4:	mov	r8, r0
   1b8e8:	ldr	r0, [r7, r0, lsl #2]
   1b8ec:	ldr	r1, [sp, #20]
   1b8f0:	add	r0, r0, #1
   1b8f4:	str	r0, [r7, r8, lsl #2]
   1b8f8:	ldr	r1, [r1, r8, lsl #2]
   1b8fc:	sdiv	r2, r0, r1
   1b900:	mls	r0, r2, r1, r0
   1b904:	cmp	r0, #0
   1b908:	bne	1b9bc <ReadDataSlabN+0x2250>
   1b90c:	mov	r0, #0
   1b910:	str	r0, [r7, r8, lsl #2]
   1b914:	add	r0, r3, r8, lsl #2
   1b918:	ldr	r6, [r0, #4]
   1b91c:	sdiv	r0, sl, r6
   1b920:	mls	r9, r0, r6, sl
   1b924:	cmp	r9, #0
   1b928:	beq	1b96c <ReadDataSlabN+0x2200>
   1b92c:	ldr	r5, [r3, r8, lsl #2]
   1b930:	ldr	r0, [r4, r8, lsl #2]
   1b934:	sub	r1, r6, r9
   1b938:	mov	r2, #1
   1b93c:	mla	r0, r0, r5, r1
   1b940:	ldr	r1, [sp, #36]	; 0x24
   1b944:	mul	r1, r0, r1
   1b948:	ldr	r0, [sp, #32]
   1b94c:	ldr	r0, [r0]
   1b950:	bl	1a2c <fseek@plt>
   1b954:	ldr	r0, [r4, r8, lsl #2]
   1b958:	add	r1, r6, sl
   1b95c:	add	r3, sp, #40	; 0x28
   1b960:	sub	r1, r1, r9
   1b964:	mla	sl, r0, r5, r1
   1b968:	b	1b9a4 <ReadDataSlabN+0x2238>
   1b96c:	ldr	r0, [r4, r8, lsl #2]
   1b970:	cmp	r0, #0
   1b974:	beq	1b9a4 <ReadDataSlabN+0x2238>
   1b978:	ldr	r1, [sp, #36]	; 0x24
   1b97c:	ldr	r5, [r3, r8, lsl #2]
   1b980:	mov	r2, #1
   1b984:	mul	r0, r0, r1
   1b988:	mul	r1, r0, r5
   1b98c:	ldr	r0, [sp, #32]
   1b990:	ldr	r0, [r0]
   1b994:	bl	1a2c <fseek@plt>
   1b998:	ldr	r0, [r4, r8, lsl #2]
   1b99c:	add	r3, sp, #40	; 0x28
   1b9a0:	mla	sl, r0, r5, sl
   1b9a4:	ldr	r2, [fp, #8]
   1b9a8:	add	r1, r8, #2
   1b9ac:	add	r0, r8, #1
   1b9b0:	cmp	r1, r2
   1b9b4:	blt	1b8e4 <ReadDataSlabN+0x2178>
   1b9b8:	b	1b9e0 <ReadDataSlabN+0x2274>
   1b9bc:	ldr	r0, [sp, #8]
   1b9c0:	mov	r2, #1
   1b9c4:	ldr	r5, [r0, r8, lsl #2]
   1b9c8:	ldr	r0, [sp, #36]	; 0x24
   1b9cc:	mul	r1, r5, r0
   1b9d0:	ldr	r0, [sp, #32]
   1b9d4:	ldr	r0, [r0]
   1b9d8:	bl	1a2c <fseek@plt>
   1b9dc:	add	sl, r5, sl
   1b9e0:	ldr	r0, [fp, #24]
   1b9e4:	ldr	r5, [sp, #16]
   1b9e8:	ldr	r1, [sp, #12]
   1b9ec:	ldr	r0, [r0]
   1b9f0:	add	r5, r0, r5
   1b9f4:	mov	r0, #0
   1b9f8:	cmp	r5, r1
   1b9fc:	blt	1b840 <ReadDataSlabN+0x20d4>
   1ba00:	b	197f0 <ReadDataSlabN+0x84>
   1ba04:	sub	r4, fp, #72	; 0x48
   1ba08:	ldr	r0, [sp, #36]	; 0x24
   1ba0c:	mov	r2, #1
   1ba10:	mul	r1, sl, r0
   1ba14:	ldr	r0, [sp, #32]
   1ba18:	ldr	r0, [r0]
   1ba1c:	bl	1a2c <fseek@plt>
   1ba20:	ldr	r0, [fp, #20]
   1ba24:	ldr	r0, [r0]
   1ba28:	cmp	r0, #1
   1ba2c:	bne	1cf8c <ReadDataSlabN+0x3820>
   1ba30:	ldr	r0, [sp, #12]
   1ba34:	ldr	r1, [fp, #16]
   1ba38:	cmp	r0, #1
   1ba3c:	ldr	r0, [fp, #24]
   1ba40:	blt	1d728 <ReadDataSlabN+0x3fbc>
   1ba44:	add	r0, r0, #4
   1ba48:	mov	r2, r4
   1ba4c:	add	r4, r1, #4
   1ba50:	mov	r5, #0
   1ba54:	str	r0, [sp, #20]
   1ba58:	add	r0, sp, #80	; 0x50
   1ba5c:	orr	r7, r0, #4
   1ba60:	orr	r0, r2, #4
   1ba64:	str	r0, [sp, #8]
   1ba68:	ldr	r6, [fp, #16]
   1ba6c:	ldr	r0, [r6]
   1ba70:	cmp	r0, #0
   1ba74:	beq	1ba9c <ReadDataSlabN+0x2330>
   1ba78:	ldr	r1, [sp, #36]	; 0x24
   1ba7c:	ldr	r9, [sp, #32]
   1ba80:	mov	r2, #1
   1ba84:	mul	r1, r0, r1
   1ba88:	ldr	r0, [r9]
   1ba8c:	bl	1a2c <fseek@plt>
   1ba90:	ldr	r0, [r6]
   1ba94:	add	sl, r0, sl
   1ba98:	b	1baa0 <ReadDataSlabN+0x2334>
   1ba9c:	ldr	r9, [sp, #32]
   1baa0:	ldr	r0, [sp, #24]
   1baa4:	ldr	r2, [sp, #28]
   1baa8:	str	r5, [sp, #16]
   1baac:	add	r1, r0, r5, lsl #2
   1bab0:	ldr	r0, [fp, #24]
   1bab4:	ldr	r3, [r0]
   1bab8:	mov	r5, r0
   1babc:	mov	r0, r9
   1bac0:	bl	f85c <ReadUInt32Data>
   1bac4:	ldr	r0, [fp, #12]
   1bac8:	ldr	r8, [r6]
   1bacc:	ldr	r1, [r5]
   1bad0:	mov	r2, #1
   1bad4:	ldr	r6, [r0]
   1bad8:	sub	r0, r6, r8
   1badc:	sub	r0, r0, r1
   1bae0:	ldr	r1, [sp, #36]	; 0x24
   1bae4:	mul	r1, r0, r1
   1bae8:	ldr	r0, [r9]
   1baec:	bl	1a2c <fseek@plt>
   1baf0:	add	r0, r6, sl
   1baf4:	sub	sl, r0, r8
   1baf8:	ldr	r0, [fp, #8]
   1bafc:	cmp	r0, #2
   1bb00:	blt	1bc08 <ReadDataSlabN+0x249c>
   1bb04:	mov	r0, #0
   1bb08:	add	r3, sp, #40	; 0x28
   1bb0c:	mov	r8, r0
   1bb10:	ldr	r0, [r7, r0, lsl #2]
   1bb14:	ldr	r1, [sp, #20]
   1bb18:	add	r0, r0, #1
   1bb1c:	str	r0, [r7, r8, lsl #2]
   1bb20:	ldr	r1, [r1, r8, lsl #2]
   1bb24:	sdiv	r2, r0, r1
   1bb28:	mls	r0, r2, r1, r0
   1bb2c:	cmp	r0, #0
   1bb30:	bne	1bbe4 <ReadDataSlabN+0x2478>
   1bb34:	mov	r0, #0
   1bb38:	str	r0, [r7, r8, lsl #2]
   1bb3c:	add	r0, r3, r8, lsl #2
   1bb40:	ldr	r6, [r0, #4]
   1bb44:	sdiv	r0, sl, r6
   1bb48:	mls	r9, r0, r6, sl
   1bb4c:	cmp	r9, #0
   1bb50:	beq	1bb94 <ReadDataSlabN+0x2428>
   1bb54:	ldr	r5, [r3, r8, lsl #2]
   1bb58:	ldr	r0, [r4, r8, lsl #2]
   1bb5c:	sub	r1, r6, r9
   1bb60:	mov	r2, #1
   1bb64:	mla	r0, r0, r5, r1
   1bb68:	ldr	r1, [sp, #36]	; 0x24
   1bb6c:	mul	r1, r0, r1
   1bb70:	ldr	r0, [sp, #32]
   1bb74:	ldr	r0, [r0]
   1bb78:	bl	1a2c <fseek@plt>
   1bb7c:	ldr	r0, [r4, r8, lsl #2]
   1bb80:	add	r1, r6, sl
   1bb84:	add	r3, sp, #40	; 0x28
   1bb88:	sub	r1, r1, r9
   1bb8c:	mla	sl, r0, r5, r1
   1bb90:	b	1bbcc <ReadDataSlabN+0x2460>
   1bb94:	ldr	r0, [r4, r8, lsl #2]
   1bb98:	cmp	r0, #0
   1bb9c:	beq	1bbcc <ReadDataSlabN+0x2460>
   1bba0:	ldr	r1, [sp, #36]	; 0x24
   1bba4:	ldr	r5, [r3, r8, lsl #2]
   1bba8:	mov	r2, #1
   1bbac:	mul	r0, r0, r1
   1bbb0:	mul	r1, r0, r5
   1bbb4:	ldr	r0, [sp, #32]
   1bbb8:	ldr	r0, [r0]
   1bbbc:	bl	1a2c <fseek@plt>
   1bbc0:	ldr	r0, [r4, r8, lsl #2]
   1bbc4:	add	r3, sp, #40	; 0x28
   1bbc8:	mla	sl, r0, r5, sl
   1bbcc:	ldr	r2, [fp, #8]
   1bbd0:	add	r1, r8, #2
   1bbd4:	add	r0, r8, #1
   1bbd8:	cmp	r1, r2
   1bbdc:	blt	1bb0c <ReadDataSlabN+0x23a0>
   1bbe0:	b	1bc08 <ReadDataSlabN+0x249c>
   1bbe4:	ldr	r0, [sp, #8]
   1bbe8:	mov	r2, #1
   1bbec:	ldr	r5, [r0, r8, lsl #2]
   1bbf0:	ldr	r0, [sp, #36]	; 0x24
   1bbf4:	mul	r1, r5, r0
   1bbf8:	ldr	r0, [sp, #32]
   1bbfc:	ldr	r0, [r0]
   1bc00:	bl	1a2c <fseek@plt>
   1bc04:	add	sl, r5, sl
   1bc08:	ldr	r0, [fp, #24]
   1bc0c:	ldr	r5, [sp, #16]
   1bc10:	ldr	r1, [sp, #12]
   1bc14:	ldr	r0, [r0]
   1bc18:	add	r5, r0, r5
   1bc1c:	mov	r0, #0
   1bc20:	cmp	r5, r1
   1bc24:	blt	1ba68 <ReadDataSlabN+0x22fc>
   1bc28:	b	197f0 <ReadDataSlabN+0x84>
   1bc2c:	sub	r4, fp, #72	; 0x48
   1bc30:	ldr	r0, [sp, #36]	; 0x24
   1bc34:	mov	r2, #1
   1bc38:	mul	r1, sl, r0
   1bc3c:	ldr	r0, [sp, #32]
   1bc40:	ldr	r0, [r0]
   1bc44:	bl	1a2c <fseek@plt>
   1bc48:	ldr	r0, [fp, #20]
   1bc4c:	ldr	r0, [r0]
   1bc50:	cmp	r0, #1
   1bc54:	bne	1d214 <ReadDataSlabN+0x3aa8>
   1bc58:	ldr	r0, [sp, #12]
   1bc5c:	ldr	r1, [fp, #16]
   1bc60:	cmp	r0, #1
   1bc64:	ldr	r0, [fp, #24]
   1bc68:	blt	1d728 <ReadDataSlabN+0x3fbc>
   1bc6c:	add	r0, r0, #4
   1bc70:	mov	r2, r4
   1bc74:	add	r4, r1, #4
   1bc78:	mov	r5, #0
   1bc7c:	str	r0, [sp, #20]
   1bc80:	add	r0, sp, #80	; 0x50
   1bc84:	orr	r7, r0, #4
   1bc88:	orr	r0, r2, #4
   1bc8c:	str	r0, [sp, #8]
   1bc90:	ldr	r6, [fp, #16]
   1bc94:	ldr	r0, [r6]
   1bc98:	cmp	r0, #0
   1bc9c:	beq	1bcc4 <ReadDataSlabN+0x2558>
   1bca0:	ldr	r1, [sp, #36]	; 0x24
   1bca4:	ldr	r9, [sp, #32]
   1bca8:	mov	r2, #1
   1bcac:	mul	r1, r0, r1
   1bcb0:	ldr	r0, [r9]
   1bcb4:	bl	1a2c <fseek@plt>
   1bcb8:	ldr	r0, [r6]
   1bcbc:	add	sl, r0, sl
   1bcc0:	b	1bcc8 <ReadDataSlabN+0x255c>
   1bcc4:	ldr	r9, [sp, #32]
   1bcc8:	ldr	r0, [sp, #24]
   1bccc:	ldr	r2, [sp, #28]
   1bcd0:	str	r5, [sp, #16]
   1bcd4:	add	r1, r0, r5, lsl #3
   1bcd8:	ldr	r0, [fp, #24]
   1bcdc:	ldr	r3, [r0]
   1bce0:	mov	r5, r0
   1bce4:	mov	r0, r9
   1bce8:	bl	9404 <ReadInt64Data>
   1bcec:	ldr	r0, [fp, #12]
   1bcf0:	ldr	r8, [r6]
   1bcf4:	ldr	r1, [r5]
   1bcf8:	mov	r2, #1
   1bcfc:	ldr	r6, [r0]
   1bd00:	sub	r0, r6, r8
   1bd04:	sub	r0, r0, r1
   1bd08:	ldr	r1, [sp, #36]	; 0x24
   1bd0c:	mul	r1, r0, r1
   1bd10:	ldr	r0, [r9]
   1bd14:	bl	1a2c <fseek@plt>
   1bd18:	add	r0, r6, sl
   1bd1c:	sub	sl, r0, r8
   1bd20:	ldr	r0, [fp, #8]
   1bd24:	cmp	r0, #2
   1bd28:	blt	1be30 <ReadDataSlabN+0x26c4>
   1bd2c:	mov	r0, #0
   1bd30:	add	r3, sp, #40	; 0x28
   1bd34:	mov	r8, r0
   1bd38:	ldr	r0, [r7, r0, lsl #2]
   1bd3c:	ldr	r1, [sp, #20]
   1bd40:	add	r0, r0, #1
   1bd44:	str	r0, [r7, r8, lsl #2]
   1bd48:	ldr	r1, [r1, r8, lsl #2]
   1bd4c:	sdiv	r2, r0, r1
   1bd50:	mls	r0, r2, r1, r0
   1bd54:	cmp	r0, #0
   1bd58:	bne	1be0c <ReadDataSlabN+0x26a0>
   1bd5c:	mov	r0, #0
   1bd60:	str	r0, [r7, r8, lsl #2]
   1bd64:	add	r0, r3, r8, lsl #2
   1bd68:	ldr	r6, [r0, #4]
   1bd6c:	sdiv	r0, sl, r6
   1bd70:	mls	r9, r0, r6, sl
   1bd74:	cmp	r9, #0
   1bd78:	beq	1bdbc <ReadDataSlabN+0x2650>
   1bd7c:	ldr	r5, [r3, r8, lsl #2]
   1bd80:	ldr	r0, [r4, r8, lsl #2]
   1bd84:	sub	r1, r6, r9
   1bd88:	mov	r2, #1
   1bd8c:	mla	r0, r0, r5, r1
   1bd90:	ldr	r1, [sp, #36]	; 0x24
   1bd94:	mul	r1, r0, r1
   1bd98:	ldr	r0, [sp, #32]
   1bd9c:	ldr	r0, [r0]
   1bda0:	bl	1a2c <fseek@plt>
   1bda4:	ldr	r0, [r4, r8, lsl #2]
   1bda8:	add	r1, r6, sl
   1bdac:	add	r3, sp, #40	; 0x28
   1bdb0:	sub	r1, r1, r9
   1bdb4:	mla	sl, r0, r5, r1
   1bdb8:	b	1bdf4 <ReadDataSlabN+0x2688>
   1bdbc:	ldr	r0, [r4, r8, lsl #2]
   1bdc0:	cmp	r0, #0
   1bdc4:	beq	1bdf4 <ReadDataSlabN+0x2688>
   1bdc8:	ldr	r1, [sp, #36]	; 0x24
   1bdcc:	ldr	r5, [r3, r8, lsl #2]
   1bdd0:	mov	r2, #1
   1bdd4:	mul	r0, r0, r1
   1bdd8:	mul	r1, r0, r5
   1bddc:	ldr	r0, [sp, #32]
   1bde0:	ldr	r0, [r0]
   1bde4:	bl	1a2c <fseek@plt>
   1bde8:	ldr	r0, [r4, r8, lsl #2]
   1bdec:	add	r3, sp, #40	; 0x28
   1bdf0:	mla	sl, r0, r5, sl
   1bdf4:	ldr	r2, [fp, #8]
   1bdf8:	add	r1, r8, #2
   1bdfc:	add	r0, r8, #1
   1be00:	cmp	r1, r2
   1be04:	blt	1bd34 <ReadDataSlabN+0x25c8>
   1be08:	b	1be30 <ReadDataSlabN+0x26c4>
   1be0c:	ldr	r0, [sp, #8]
   1be10:	mov	r2, #1
   1be14:	ldr	r5, [r0, r8, lsl #2]
   1be18:	ldr	r0, [sp, #36]	; 0x24
   1be1c:	mul	r1, r5, r0
   1be20:	ldr	r0, [sp, #32]
   1be24:	ldr	r0, [r0]
   1be28:	bl	1a2c <fseek@plt>
   1be2c:	add	sl, r5, sl
   1be30:	ldr	r0, [fp, #24]
   1be34:	ldr	r5, [sp, #16]
   1be38:	ldr	r1, [sp, #12]
   1be3c:	ldr	r0, [r0]
   1be40:	add	r5, r0, r5
   1be44:	mov	r0, #0
   1be48:	cmp	r5, r1
   1be4c:	blt	1bc90 <ReadDataSlabN+0x2524>
   1be50:	b	197f0 <ReadDataSlabN+0x84>
   1be54:	sub	r4, fp, #72	; 0x48
   1be58:	ldr	r0, [sp, #36]	; 0x24
   1be5c:	mov	r2, #1
   1be60:	mul	r1, sl, r0
   1be64:	ldr	r0, [sp, #32]
   1be68:	ldr	r0, [r0]
   1be6c:	bl	1a2c <fseek@plt>
   1be70:	ldr	r0, [fp, #20]
   1be74:	ldr	r0, [r0]
   1be78:	cmp	r0, #1
   1be7c:	bne	1d4a0 <ReadDataSlabN+0x3d34>
   1be80:	ldr	r0, [sp, #12]
   1be84:	ldr	r1, [fp, #16]
   1be88:	cmp	r0, #1
   1be8c:	ldr	r0, [fp, #24]
   1be90:	blt	1d728 <ReadDataSlabN+0x3fbc>
   1be94:	add	r0, r0, #4
   1be98:	mov	r2, r4
   1be9c:	add	r4, r1, #4
   1bea0:	mov	r5, #0
   1bea4:	str	r0, [sp, #20]
   1bea8:	add	r0, sp, #80	; 0x50
   1beac:	orr	r7, r0, #4
   1beb0:	orr	r0, r2, #4
   1beb4:	str	r0, [sp, #8]
   1beb8:	ldr	r6, [fp, #16]
   1bebc:	ldr	r0, [r6]
   1bec0:	cmp	r0, #0
   1bec4:	beq	1beec <ReadDataSlabN+0x2780>
   1bec8:	ldr	r1, [sp, #36]	; 0x24
   1becc:	ldr	r9, [sp, #32]
   1bed0:	mov	r2, #1
   1bed4:	mul	r1, r0, r1
   1bed8:	ldr	r0, [r9]
   1bedc:	bl	1a2c <fseek@plt>
   1bee0:	ldr	r0, [r6]
   1bee4:	add	sl, r0, sl
   1bee8:	b	1bef0 <ReadDataSlabN+0x2784>
   1beec:	ldr	r9, [sp, #32]
   1bef0:	ldr	r0, [sp, #24]
   1bef4:	ldr	r2, [sp, #28]
   1bef8:	str	r5, [sp, #16]
   1befc:	add	r1, r0, r5, lsl #3
   1bf00:	ldr	r0, [fp, #24]
   1bf04:	ldr	r3, [r0]
   1bf08:	mov	r5, r0
   1bf0c:	mov	r0, r9
   1bf10:	bl	b5bc <ReadUInt64Data>
   1bf14:	ldr	r0, [fp, #12]
   1bf18:	ldr	r8, [r6]
   1bf1c:	ldr	r1, [r5]
   1bf20:	mov	r2, #1
   1bf24:	ldr	r6, [r0]
   1bf28:	sub	r0, r6, r8
   1bf2c:	sub	r0, r0, r1
   1bf30:	ldr	r1, [sp, #36]	; 0x24
   1bf34:	mul	r1, r0, r1
   1bf38:	ldr	r0, [r9]
   1bf3c:	bl	1a2c <fseek@plt>
   1bf40:	add	r0, r6, sl
   1bf44:	sub	sl, r0, r8
   1bf48:	ldr	r0, [fp, #8]
   1bf4c:	cmp	r0, #2
   1bf50:	blt	1c058 <ReadDataSlabN+0x28ec>
   1bf54:	mov	r0, #0
   1bf58:	add	r3, sp, #40	; 0x28
   1bf5c:	mov	r8, r0
   1bf60:	ldr	r0, [r7, r0, lsl #2]
   1bf64:	ldr	r1, [sp, #20]
   1bf68:	add	r0, r0, #1
   1bf6c:	str	r0, [r7, r8, lsl #2]
   1bf70:	ldr	r1, [r1, r8, lsl #2]
   1bf74:	sdiv	r2, r0, r1
   1bf78:	mls	r0, r2, r1, r0
   1bf7c:	cmp	r0, #0
   1bf80:	bne	1c034 <ReadDataSlabN+0x28c8>
   1bf84:	mov	r0, #0
   1bf88:	str	r0, [r7, r8, lsl #2]
   1bf8c:	add	r0, r3, r8, lsl #2
   1bf90:	ldr	r6, [r0, #4]
   1bf94:	sdiv	r0, sl, r6
   1bf98:	mls	r9, r0, r6, sl
   1bf9c:	cmp	r9, #0
   1bfa0:	beq	1bfe4 <ReadDataSlabN+0x2878>
   1bfa4:	ldr	r5, [r3, r8, lsl #2]
   1bfa8:	ldr	r0, [r4, r8, lsl #2]
   1bfac:	sub	r1, r6, r9
   1bfb0:	mov	r2, #1
   1bfb4:	mla	r0, r0, r5, r1
   1bfb8:	ldr	r1, [sp, #36]	; 0x24
   1bfbc:	mul	r1, r0, r1
   1bfc0:	ldr	r0, [sp, #32]
   1bfc4:	ldr	r0, [r0]
   1bfc8:	bl	1a2c <fseek@plt>
   1bfcc:	ldr	r0, [r4, r8, lsl #2]
   1bfd0:	add	r1, r6, sl
   1bfd4:	add	r3, sp, #40	; 0x28
   1bfd8:	sub	r1, r1, r9
   1bfdc:	mla	sl, r0, r5, r1
   1bfe0:	b	1c01c <ReadDataSlabN+0x28b0>
   1bfe4:	ldr	r0, [r4, r8, lsl #2]
   1bfe8:	cmp	r0, #0
   1bfec:	beq	1c01c <ReadDataSlabN+0x28b0>
   1bff0:	ldr	r1, [sp, #36]	; 0x24
   1bff4:	ldr	r5, [r3, r8, lsl #2]
   1bff8:	mov	r2, #1
   1bffc:	mul	r0, r0, r1
   1c000:	mul	r1, r0, r5
   1c004:	ldr	r0, [sp, #32]
   1c008:	ldr	r0, [r0]
   1c00c:	bl	1a2c <fseek@plt>
   1c010:	ldr	r0, [r4, r8, lsl #2]
   1c014:	add	r3, sp, #40	; 0x28
   1c018:	mla	sl, r0, r5, sl
   1c01c:	ldr	r2, [fp, #8]
   1c020:	add	r1, r8, #2
   1c024:	add	r0, r8, #1
   1c028:	cmp	r1, r2
   1c02c:	blt	1bf5c <ReadDataSlabN+0x27f0>
   1c030:	b	1c058 <ReadDataSlabN+0x28ec>
   1c034:	ldr	r0, [sp, #8]
   1c038:	mov	r2, #1
   1c03c:	ldr	r5, [r0, r8, lsl #2]
   1c040:	ldr	r0, [sp, #36]	; 0x24
   1c044:	mul	r1, r5, r0
   1c048:	ldr	r0, [sp, #32]
   1c04c:	ldr	r0, [r0]
   1c050:	bl	1a2c <fseek@plt>
   1c054:	add	sl, r5, sl
   1c058:	ldr	r0, [fp, #24]
   1c05c:	ldr	r5, [sp, #16]
   1c060:	ldr	r1, [sp, #12]
   1c064:	ldr	r0, [r0]
   1c068:	add	r5, r0, r5
   1c06c:	mov	r0, #0
   1c070:	cmp	r5, r1
   1c074:	blt	1beb8 <ReadDataSlabN+0x274c>
   1c078:	b	197f0 <ReadDataSlabN+0x84>
   1c07c:	ldr	r0, [sp, #12]
   1c080:	ldr	r1, [fp, #16]
   1c084:	cmp	r0, #1
   1c088:	ldr	r0, [fp, #24]
   1c08c:	blt	1d728 <ReadDataSlabN+0x3fbc>
   1c090:	add	r0, r0, #4
   1c094:	add	r8, r1, #4
   1c098:	mov	r5, #0
   1c09c:	str	r0, [sp, #20]
   1c0a0:	add	r0, sp, #80	; 0x50
   1c0a4:	str	r8, [sp, #4]
   1c0a8:	orr	r9, r0, #4
   1c0ac:	orr	r0, r4, #4
   1c0b0:	str	r0, [sp]
   1c0b4:	str	r9, [sp, #16]
   1c0b8:	ldr	r4, [fp, #16]
   1c0bc:	ldr	r0, [r4]
   1c0c0:	cmp	r0, #0
   1c0c4:	beq	1c0f0 <ReadDataSlabN+0x2984>
   1c0c8:	ldr	r1, [sp, #36]	; 0x24
   1c0cc:	ldr	r6, [sp, #32]
   1c0d0:	mov	r2, #1
   1c0d4:	mul	r1, r0, r1
   1c0d8:	ldr	r0, [r6]
   1c0dc:	bl	1a2c <fseek@plt>
   1c0e0:	ldr	r0, [r4]
   1c0e4:	mov	r4, r6
   1c0e8:	add	sl, r0, sl
   1c0ec:	b	1c0f8 <ReadDataSlabN+0x298c>
   1c0f0:	ldr	r4, [sp, #32]
   1c0f4:	mov	r0, #0
   1c0f8:	ldr	r7, [fp, #24]
   1c0fc:	ldr	r3, [fp, #12]
   1c100:	ldr	r2, [sp, #28]
   1c104:	str	r5, [sp, #8]
   1c108:	ldr	r1, [r7]
   1c10c:	cmp	r1, #0
   1c110:	ble	1c194 <ReadDataSlabN+0x2a28>
   1c114:	ldr	r0, [sp, #24]
   1c118:	ldr	r8, [sp, #36]	; 0x24
   1c11c:	ldr	r7, [fp, #20]
   1c120:	mov	r9, #0
   1c124:	add	r5, r0, r5, lsl #2
   1c128:	mov	r0, r4
   1c12c:	mov	r1, r5
   1c130:	mov	r3, #1
   1c134:	mov	r6, r2
   1c138:	bl	6f1c <ReadSingleData>
   1c13c:	ldr	r0, [r7]
   1c140:	mov	r2, #1
   1c144:	sub	r0, r0, #1
   1c148:	mul	r1, r0, r8
   1c14c:	ldr	r0, [r4]
   1c150:	bl	1a2c <fseek@plt>
   1c154:	ldr	r0, [fp, #24]
   1c158:	mov	r2, r6
   1c15c:	ldr	r6, [r7]
   1c160:	add	r9, r9, #1
   1c164:	add	r5, r5, #4
   1c168:	ldr	r1, [r0]
   1c16c:	add	sl, r6, sl
   1c170:	cmp	r9, r1
   1c174:	blt	1c128 <ReadDataSlabN+0x29bc>
   1c178:	ldr	r0, [fp, #16]
   1c17c:	ldr	r3, [fp, #12]
   1c180:	ldr	r8, [sp, #4]
   1c184:	ldr	r9, [sp, #16]
   1c188:	ldr	r7, [fp, #24]
   1c18c:	ldr	r0, [r0]
   1c190:	b	1c19c <ReadDataSlabN+0x2a30>
   1c194:	ldr	r2, [fp, #20]
   1c198:	ldr	r6, [r2]
   1c19c:	ldr	r3, [r3]
   1c1a0:	mov	r2, #1
   1c1a4:	mls	r1, r6, r1, r3
   1c1a8:	sub	r5, r1, r0
   1c1ac:	ldr	r0, [sp, #36]	; 0x24
   1c1b0:	mul	r1, r5, r0
   1c1b4:	ldr	r0, [r4]
   1c1b8:	bl	1a2c <fseek@plt>
   1c1bc:	ldr	r0, [fp, #8]
   1c1c0:	add	sl, r5, sl
   1c1c4:	cmp	r0, #2
   1c1c8:	blt	1c2e4 <ReadDataSlabN+0x2b78>
   1c1cc:	mov	r0, #0
   1c1d0:	add	r3, sp, #40	; 0x28
   1c1d4:	mov	r5, r0
   1c1d8:	ldr	r0, [r9, r0, lsl #2]
   1c1dc:	ldr	r1, [sp, #20]
   1c1e0:	add	r0, r0, #1
   1c1e4:	str	r0, [r9, r5, lsl #2]
   1c1e8:	ldr	r1, [r1, r5, lsl #2]
   1c1ec:	sdiv	r2, r0, r1
   1c1f0:	mls	r0, r2, r1, r0
   1c1f4:	cmp	r0, #0
   1c1f8:	bne	1c2c0 <ReadDataSlabN+0x2b54>
   1c1fc:	mov	r0, #0
   1c200:	str	r0, [r9, r5, lsl #2]
   1c204:	add	r0, r3, r5, lsl #2
   1c208:	ldr	r6, [r0, #4]
   1c20c:	sdiv	r0, sl, r6
   1c210:	mls	r7, r0, r6, sl
   1c214:	cmp	r7, #0
   1c218:	beq	1c260 <ReadDataSlabN+0x2af4>
   1c21c:	ldr	r9, [r3, r5, lsl #2]
   1c220:	ldr	r0, [r8, r5, lsl #2]
   1c224:	sub	r1, r6, r7
   1c228:	ldr	r4, [sp, #32]
   1c22c:	mov	r2, #1
   1c230:	mla	r0, r0, r9, r1
   1c234:	ldr	r1, [sp, #36]	; 0x24
   1c238:	mul	r1, r0, r1
   1c23c:	ldr	r0, [r4]
   1c240:	bl	1a2c <fseek@plt>
   1c244:	ldr	r0, [r8, r5, lsl #2]
   1c248:	add	r1, r6, sl
   1c24c:	add	r3, sp, #40	; 0x28
   1c250:	sub	r1, r1, r7
   1c254:	mla	sl, r0, r9, r1
   1c258:	ldr	r9, [sp, #16]
   1c25c:	b	1c2a4 <ReadDataSlabN+0x2b38>
   1c260:	ldr	r0, [r8, r5, lsl #2]
   1c264:	cmp	r0, #0
   1c268:	beq	1c2a0 <ReadDataSlabN+0x2b34>
   1c26c:	ldr	r1, [sp, #36]	; 0x24
   1c270:	ldr	r4, [r3, r5, lsl #2]
   1c274:	ldr	r6, [sp, #32]
   1c278:	mov	r2, #1
   1c27c:	mul	r0, r0, r1
   1c280:	mul	r1, r0, r4
   1c284:	ldr	r0, [r6]
   1c288:	bl	1a2c <fseek@plt>
   1c28c:	ldr	r0, [r8, r5, lsl #2]
   1c290:	add	r3, sp, #40	; 0x28
   1c294:	mla	sl, r0, r4, sl
   1c298:	mov	r4, r6
   1c29c:	b	1c2a4 <ReadDataSlabN+0x2b38>
   1c2a0:	ldr	r4, [sp, #32]
   1c2a4:	ldr	r2, [fp, #8]
   1c2a8:	ldr	r7, [fp, #24]
   1c2ac:	add	r1, r5, #2
   1c2b0:	add	r0, r5, #1
   1c2b4:	cmp	r1, r2
   1c2b8:	blt	1c1d4 <ReadDataSlabN+0x2a68>
   1c2bc:	b	1c2e4 <ReadDataSlabN+0x2b78>
   1c2c0:	ldr	r0, [sp]
   1c2c4:	mov	r2, r4
   1c2c8:	ldr	r4, [r0, r5, lsl #2]
   1c2cc:	ldr	r0, [sp, #36]	; 0x24
   1c2d0:	mul	r1, r4, r0
   1c2d4:	ldr	r0, [r2]
   1c2d8:	mov	r2, #1
   1c2dc:	bl	1a2c <fseek@plt>
   1c2e0:	add	sl, r4, sl
   1c2e4:	ldr	r0, [r7]
   1c2e8:	ldr	r5, [sp, #8]
   1c2ec:	ldr	r1, [sp, #12]
   1c2f0:	add	r5, r0, r5
   1c2f4:	mov	r0, #0
   1c2f8:	cmp	r5, r1
   1c2fc:	blt	1c0b8 <ReadDataSlabN+0x294c>
   1c300:	b	197f0 <ReadDataSlabN+0x84>
   1c304:	ldr	r0, [sp, #12]
   1c308:	ldr	r1, [fp, #16]
   1c30c:	cmp	r0, #1
   1c310:	ldr	r0, [fp, #24]
   1c314:	blt	1d728 <ReadDataSlabN+0x3fbc>
   1c318:	add	r0, r0, #4
   1c31c:	add	r9, r1, #4
   1c320:	mov	r6, #0
   1c324:	str	r0, [sp, #20]
   1c328:	add	r0, sp, #80	; 0x50
   1c32c:	str	r9, [sp, #4]
   1c330:	orr	ip, r0, #4
   1c334:	orr	r0, r4, #4
   1c338:	str	r0, [sp]
   1c33c:	str	ip, [sp, #16]
   1c340:	ldr	r5, [fp, #16]
   1c344:	ldr	r0, [r5]
   1c348:	cmp	r0, #0
   1c34c:	beq	1c374 <ReadDataSlabN+0x2c08>
   1c350:	ldr	r1, [sp, #36]	; 0x24
   1c354:	ldr	r4, [sp, #32]
   1c358:	mov	r2, #1
   1c35c:	mul	r1, r0, r1
   1c360:	ldr	r0, [r4]
   1c364:	bl	1a2c <fseek@plt>
   1c368:	ldr	r0, [r5]
   1c36c:	add	sl, r0, sl
   1c370:	b	1c37c <ReadDataSlabN+0x2c10>
   1c374:	ldr	r4, [sp, #32]
   1c378:	mov	r0, #0
   1c37c:	ldr	r7, [fp, #24]
   1c380:	ldr	r3, [fp, #12]
   1c384:	str	r6, [sp, #8]
   1c388:	ldr	r1, [r7]
   1c38c:	cmp	r1, #0
   1c390:	ble	1c40c <ReadDataSlabN+0x2ca0>
   1c394:	ldr	r0, [sp, #24]
   1c398:	ldr	r5, [sp, #28]
   1c39c:	ldr	r9, [sp, #36]	; 0x24
   1c3a0:	ldr	r8, [fp, #20]
   1c3a4:	add	r7, r0, r6
   1c3a8:	mov	r6, #0
   1c3ac:	add	r1, r7, r6
   1c3b0:	mov	r0, r4
   1c3b4:	mov	r2, r5
   1c3b8:	mov	r3, #1
   1c3bc:	bl	15874 <ReadInt8Data>
   1c3c0:	ldr	r0, [r8]
   1c3c4:	mov	r2, #1
   1c3c8:	sub	r0, r0, #1
   1c3cc:	mul	r1, r0, r9
   1c3d0:	ldr	r0, [r4]
   1c3d4:	bl	1a2c <fseek@plt>
   1c3d8:	ldr	r0, [fp, #24]
   1c3dc:	ldr	r2, [r8]
   1c3e0:	add	r6, r6, #1
   1c3e4:	ldr	r1, [r0]
   1c3e8:	add	sl, r2, sl
   1c3ec:	cmp	r6, r1
   1c3f0:	blt	1c3ac <ReadDataSlabN+0x2c40>
   1c3f4:	ldr	r0, [fp, #16]
   1c3f8:	ldr	r7, [fp, #24]
   1c3fc:	ldr	r3, [fp, #12]
   1c400:	ldr	r9, [sp, #4]
   1c404:	ldr	r0, [r0]
   1c408:	b	1c414 <ReadDataSlabN+0x2ca8>
   1c40c:	ldr	r2, [fp, #20]
   1c410:	ldr	r2, [r2]
   1c414:	ldr	r3, [r3]
   1c418:	mls	r1, r2, r1, r3
   1c41c:	mov	r2, #1
   1c420:	sub	r6, r1, r0
   1c424:	ldr	r0, [sp, #36]	; 0x24
   1c428:	mul	r1, r6, r0
   1c42c:	ldr	r0, [r4]
   1c430:	bl	1a2c <fseek@plt>
   1c434:	ldr	r0, [fp, #8]
   1c438:	add	sl, r6, sl
   1c43c:	cmp	r0, #2
   1c440:	blt	1c55c <ReadDataSlabN+0x2df0>
   1c444:	ldr	ip, [sp, #16]
   1c448:	mov	r0, #0
   1c44c:	add	r3, sp, #40	; 0x28
   1c450:	mov	r8, r0
   1c454:	ldr	r0, [ip, r0, lsl #2]
   1c458:	ldr	r1, [sp, #20]
   1c45c:	add	r0, r0, #1
   1c460:	str	r0, [ip, r8, lsl #2]
   1c464:	ldr	r1, [r1, r8, lsl #2]
   1c468:	sdiv	r2, r0, r1
   1c46c:	mls	r0, r2, r1, r0
   1c470:	cmp	r0, #0
   1c474:	bne	1c53c <ReadDataSlabN+0x2dd0>
   1c478:	mov	r0, #0
   1c47c:	str	r0, [ip, r8, lsl #2]
   1c480:	add	r0, r3, r8, lsl #2
   1c484:	ldr	r6, [r0, #4]
   1c488:	sdiv	r0, sl, r6
   1c48c:	mls	r7, r0, r6, sl
   1c490:	cmp	r7, #0
   1c494:	beq	1c4dc <ReadDataSlabN+0x2d70>
   1c498:	ldr	r5, [r3, r8, lsl #2]
   1c49c:	ldr	r0, [r9, r8, lsl #2]
   1c4a0:	sub	r1, r6, r7
   1c4a4:	ldr	r4, [sp, #32]
   1c4a8:	mov	r2, #1
   1c4ac:	mla	r0, r0, r5, r1
   1c4b0:	ldr	r1, [sp, #36]	; 0x24
   1c4b4:	mul	r1, r0, r1
   1c4b8:	ldr	r0, [r4]
   1c4bc:	bl	1a2c <fseek@plt>
   1c4c0:	ldr	r0, [r9, r8, lsl #2]
   1c4c4:	ldr	ip, [sp, #16]
   1c4c8:	add	r1, r6, sl
   1c4cc:	add	r3, sp, #40	; 0x28
   1c4d0:	sub	r1, r1, r7
   1c4d4:	mla	sl, r0, r5, r1
   1c4d8:	b	1c520 <ReadDataSlabN+0x2db4>
   1c4dc:	ldr	r0, [r9, r8, lsl #2]
   1c4e0:	cmp	r0, #0
   1c4e4:	beq	1c51c <ReadDataSlabN+0x2db0>
   1c4e8:	ldr	r1, [sp, #36]	; 0x24
   1c4ec:	ldr	r5, [r3, r8, lsl #2]
   1c4f0:	ldr	r4, [sp, #32]
   1c4f4:	mov	r2, #1
   1c4f8:	mul	r0, r0, r1
   1c4fc:	mul	r1, r0, r5
   1c500:	ldr	r0, [r4]
   1c504:	bl	1a2c <fseek@plt>
   1c508:	ldr	r0, [r9, r8, lsl #2]
   1c50c:	ldr	ip, [sp, #16]
   1c510:	add	r3, sp, #40	; 0x28
   1c514:	mla	sl, r0, r5, sl
   1c518:	b	1c520 <ReadDataSlabN+0x2db4>
   1c51c:	ldr	r4, [sp, #32]
   1c520:	ldr	r2, [fp, #8]
   1c524:	ldr	r7, [fp, #24]
   1c528:	add	r1, r8, #2
   1c52c:	add	r0, r8, #1
   1c530:	cmp	r1, r2
   1c534:	blt	1c450 <ReadDataSlabN+0x2ce4>
   1c538:	b	1c55c <ReadDataSlabN+0x2df0>
   1c53c:	ldr	r0, [sp]
   1c540:	mov	r2, #1
   1c544:	ldr	r5, [r0, r8, lsl #2]
   1c548:	ldr	r0, [sp, #36]	; 0x24
   1c54c:	mul	r1, r5, r0
   1c550:	ldr	r0, [r4]
   1c554:	bl	1a2c <fseek@plt>
   1c558:	add	sl, r5, sl
   1c55c:	ldr	r0, [r7]
   1c560:	ldr	r6, [sp, #8]
   1c564:	ldr	r1, [sp, #12]
   1c568:	add	r6, r0, r6
   1c56c:	mov	r0, #0
   1c570:	cmp	r6, r1
   1c574:	blt	1c340 <ReadDataSlabN+0x2bd4>
   1c578:	b	197f0 <ReadDataSlabN+0x84>
   1c57c:	ldr	r0, [sp, #12]
   1c580:	ldr	r1, [fp, #16]
   1c584:	cmp	r0, #1
   1c588:	ldr	r0, [fp, #24]
   1c58c:	blt	1d728 <ReadDataSlabN+0x3fbc>
   1c590:	add	r0, r0, #4
   1c594:	add	r9, r1, #4
   1c598:	mov	r6, #0
   1c59c:	str	r0, [sp, #20]
   1c5a0:	add	r0, sp, #80	; 0x50
   1c5a4:	str	r9, [sp, #4]
   1c5a8:	orr	ip, r0, #4
   1c5ac:	orr	r0, r4, #4
   1c5b0:	str	r0, [sp]
   1c5b4:	str	ip, [sp, #16]
   1c5b8:	ldr	r5, [fp, #16]
   1c5bc:	ldr	r0, [r5]
   1c5c0:	cmp	r0, #0
   1c5c4:	beq	1c5ec <ReadDataSlabN+0x2e80>
   1c5c8:	ldr	r1, [sp, #36]	; 0x24
   1c5cc:	ldr	r4, [sp, #32]
   1c5d0:	mov	r2, #1
   1c5d4:	mul	r1, r0, r1
   1c5d8:	ldr	r0, [r4]
   1c5dc:	bl	1a2c <fseek@plt>
   1c5e0:	ldr	r0, [r5]
   1c5e4:	add	sl, r0, sl
   1c5e8:	b	1c5f4 <ReadDataSlabN+0x2e88>
   1c5ec:	ldr	r4, [sp, #32]
   1c5f0:	mov	r0, #0
   1c5f4:	ldr	r7, [fp, #24]
   1c5f8:	ldr	r3, [fp, #12]
   1c5fc:	str	r6, [sp, #8]
   1c600:	ldr	r1, [r7]
   1c604:	cmp	r1, #0
   1c608:	ble	1c684 <ReadDataSlabN+0x2f18>
   1c60c:	ldr	r0, [sp, #24]
   1c610:	ldr	r5, [sp, #28]
   1c614:	ldr	r9, [sp, #36]	; 0x24
   1c618:	ldr	r8, [fp, #20]
   1c61c:	add	r7, r0, r6
   1c620:	mov	r6, #0
   1c624:	add	r1, r7, r6
   1c628:	mov	r0, r4
   1c62c:	mov	r2, r5
   1c630:	mov	r3, #1
   1c634:	bl	176ac <ReadUInt8Data>
   1c638:	ldr	r0, [r8]
   1c63c:	mov	r2, #1
   1c640:	sub	r0, r0, #1
   1c644:	mul	r1, r0, r9
   1c648:	ldr	r0, [r4]
   1c64c:	bl	1a2c <fseek@plt>
   1c650:	ldr	r0, [fp, #24]
   1c654:	ldr	r2, [r8]
   1c658:	add	r6, r6, #1
   1c65c:	ldr	r1, [r0]
   1c660:	add	sl, r2, sl
   1c664:	cmp	r6, r1
   1c668:	blt	1c624 <ReadDataSlabN+0x2eb8>
   1c66c:	ldr	r0, [fp, #16]
   1c670:	ldr	r7, [fp, #24]
   1c674:	ldr	r3, [fp, #12]
   1c678:	ldr	r9, [sp, #4]
   1c67c:	ldr	r0, [r0]
   1c680:	b	1c68c <ReadDataSlabN+0x2f20>
   1c684:	ldr	r2, [fp, #20]
   1c688:	ldr	r2, [r2]
   1c68c:	ldr	r3, [r3]
   1c690:	mls	r1, r2, r1, r3
   1c694:	mov	r2, #1
   1c698:	sub	r6, r1, r0
   1c69c:	ldr	r0, [sp, #36]	; 0x24
   1c6a0:	mul	r1, r6, r0
   1c6a4:	ldr	r0, [r4]
   1c6a8:	bl	1a2c <fseek@plt>
   1c6ac:	ldr	r0, [fp, #8]
   1c6b0:	add	sl, r6, sl
   1c6b4:	cmp	r0, #2
   1c6b8:	blt	1c7d4 <ReadDataSlabN+0x3068>
   1c6bc:	ldr	ip, [sp, #16]
   1c6c0:	mov	r0, #0
   1c6c4:	add	r3, sp, #40	; 0x28
   1c6c8:	mov	r8, r0
   1c6cc:	ldr	r0, [ip, r0, lsl #2]
   1c6d0:	ldr	r1, [sp, #20]
   1c6d4:	add	r0, r0, #1
   1c6d8:	str	r0, [ip, r8, lsl #2]
   1c6dc:	ldr	r1, [r1, r8, lsl #2]
   1c6e0:	sdiv	r2, r0, r1
   1c6e4:	mls	r0, r2, r1, r0
   1c6e8:	cmp	r0, #0
   1c6ec:	bne	1c7b4 <ReadDataSlabN+0x3048>
   1c6f0:	mov	r0, #0
   1c6f4:	str	r0, [ip, r8, lsl #2]
   1c6f8:	add	r0, r3, r8, lsl #2
   1c6fc:	ldr	r6, [r0, #4]
   1c700:	sdiv	r0, sl, r6
   1c704:	mls	r7, r0, r6, sl
   1c708:	cmp	r7, #0
   1c70c:	beq	1c754 <ReadDataSlabN+0x2fe8>
   1c710:	ldr	r5, [r3, r8, lsl #2]
   1c714:	ldr	r0, [r9, r8, lsl #2]
   1c718:	sub	r1, r6, r7
   1c71c:	ldr	r4, [sp, #32]
   1c720:	mov	r2, #1
   1c724:	mla	r0, r0, r5, r1
   1c728:	ldr	r1, [sp, #36]	; 0x24
   1c72c:	mul	r1, r0, r1
   1c730:	ldr	r0, [r4]
   1c734:	bl	1a2c <fseek@plt>
   1c738:	ldr	r0, [r9, r8, lsl #2]
   1c73c:	ldr	ip, [sp, #16]
   1c740:	add	r1, r6, sl
   1c744:	add	r3, sp, #40	; 0x28
   1c748:	sub	r1, r1, r7
   1c74c:	mla	sl, r0, r5, r1
   1c750:	b	1c798 <ReadDataSlabN+0x302c>
   1c754:	ldr	r0, [r9, r8, lsl #2]
   1c758:	cmp	r0, #0
   1c75c:	beq	1c794 <ReadDataSlabN+0x3028>
   1c760:	ldr	r1, [sp, #36]	; 0x24
   1c764:	ldr	r5, [r3, r8, lsl #2]
   1c768:	ldr	r4, [sp, #32]
   1c76c:	mov	r2, #1
   1c770:	mul	r0, r0, r1
   1c774:	mul	r1, r0, r5
   1c778:	ldr	r0, [r4]
   1c77c:	bl	1a2c <fseek@plt>
   1c780:	ldr	r0, [r9, r8, lsl #2]
   1c784:	ldr	ip, [sp, #16]
   1c788:	add	r3, sp, #40	; 0x28
   1c78c:	mla	sl, r0, r5, sl
   1c790:	b	1c798 <ReadDataSlabN+0x302c>
   1c794:	ldr	r4, [sp, #32]
   1c798:	ldr	r2, [fp, #8]
   1c79c:	ldr	r7, [fp, #24]
   1c7a0:	add	r1, r8, #2
   1c7a4:	add	r0, r8, #1
   1c7a8:	cmp	r1, r2
   1c7ac:	blt	1c6c8 <ReadDataSlabN+0x2f5c>
   1c7b0:	b	1c7d4 <ReadDataSlabN+0x3068>
   1c7b4:	ldr	r0, [sp]
   1c7b8:	mov	r2, #1
   1c7bc:	ldr	r5, [r0, r8, lsl #2]
   1c7c0:	ldr	r0, [sp, #36]	; 0x24
   1c7c4:	mul	r1, r5, r0
   1c7c8:	ldr	r0, [r4]
   1c7cc:	bl	1a2c <fseek@plt>
   1c7d0:	add	sl, r5, sl
   1c7d4:	ldr	r0, [r7]
   1c7d8:	ldr	r6, [sp, #8]
   1c7dc:	ldr	r1, [sp, #12]
   1c7e0:	add	r6, r0, r6
   1c7e4:	mov	r0, #0
   1c7e8:	cmp	r6, r1
   1c7ec:	blt	1c5b8 <ReadDataSlabN+0x2e4c>
   1c7f0:	b	197f0 <ReadDataSlabN+0x84>
   1c7f4:	ldr	r0, [sp, #12]
   1c7f8:	ldr	r1, [fp, #16]
   1c7fc:	cmp	r0, #1
   1c800:	ldr	r0, [fp, #24]
   1c804:	blt	1d728 <ReadDataSlabN+0x3fbc>
   1c808:	add	r0, r0, #4
   1c80c:	add	r8, r1, #4
   1c810:	mov	r5, #0
   1c814:	str	r0, [sp, #20]
   1c818:	add	r0, sp, #80	; 0x50
   1c81c:	str	r8, [sp, #4]
   1c820:	orr	r9, r0, #4
   1c824:	orr	r0, r4, #4
   1c828:	str	r0, [sp]
   1c82c:	str	r9, [sp, #16]
   1c830:	ldr	r4, [fp, #16]
   1c834:	ldr	r0, [r4]
   1c838:	cmp	r0, #0
   1c83c:	beq	1c868 <ReadDataSlabN+0x30fc>
   1c840:	ldr	r1, [sp, #36]	; 0x24
   1c844:	ldr	r6, [sp, #32]
   1c848:	mov	r2, #1
   1c84c:	mul	r1, r0, r1
   1c850:	ldr	r0, [r6]
   1c854:	bl	1a2c <fseek@plt>
   1c858:	ldr	r0, [r4]
   1c85c:	mov	r4, r6
   1c860:	add	sl, r0, sl
   1c864:	b	1c870 <ReadDataSlabN+0x3104>
   1c868:	ldr	r4, [sp, #32]
   1c86c:	mov	r0, #0
   1c870:	ldr	r7, [fp, #24]
   1c874:	ldr	r3, [fp, #12]
   1c878:	ldr	r2, [sp, #28]
   1c87c:	str	r5, [sp, #8]
   1c880:	ldr	r1, [r7]
   1c884:	cmp	r1, #0
   1c888:	ble	1c90c <ReadDataSlabN+0x31a0>
   1c88c:	ldr	r0, [sp, #24]
   1c890:	ldr	r8, [sp, #36]	; 0x24
   1c894:	ldr	r7, [fp, #20]
   1c898:	mov	r9, #0
   1c89c:	add	r5, r0, r5, lsl #1
   1c8a0:	mov	r0, r4
   1c8a4:	mov	r1, r5
   1c8a8:	mov	r3, #1
   1c8ac:	mov	r6, r2
   1c8b0:	bl	11944 <ReadInt16Data>
   1c8b4:	ldr	r0, [r7]
   1c8b8:	mov	r2, #1
   1c8bc:	sub	r0, r0, #1
   1c8c0:	mul	r1, r0, r8
   1c8c4:	ldr	r0, [r4]
   1c8c8:	bl	1a2c <fseek@plt>
   1c8cc:	ldr	r0, [fp, #24]
   1c8d0:	mov	r2, r6
   1c8d4:	ldr	r6, [r7]
   1c8d8:	add	r9, r9, #1
   1c8dc:	add	r5, r5, #2
   1c8e0:	ldr	r1, [r0]
   1c8e4:	add	sl, r6, sl
   1c8e8:	cmp	r9, r1
   1c8ec:	blt	1c8a0 <ReadDataSlabN+0x3134>
   1c8f0:	ldr	r0, [fp, #16]
   1c8f4:	ldr	r3, [fp, #12]
   1c8f8:	ldr	r8, [sp, #4]
   1c8fc:	ldr	r9, [sp, #16]
   1c900:	ldr	r7, [fp, #24]
   1c904:	ldr	r0, [r0]
   1c908:	b	1c914 <ReadDataSlabN+0x31a8>
   1c90c:	ldr	r2, [fp, #20]
   1c910:	ldr	r6, [r2]
   1c914:	ldr	r3, [r3]
   1c918:	mov	r2, #1
   1c91c:	mls	r1, r6, r1, r3
   1c920:	sub	r5, r1, r0
   1c924:	ldr	r0, [sp, #36]	; 0x24
   1c928:	mul	r1, r5, r0
   1c92c:	ldr	r0, [r4]
   1c930:	bl	1a2c <fseek@plt>
   1c934:	ldr	r0, [fp, #8]
   1c938:	add	sl, r5, sl
   1c93c:	cmp	r0, #2
   1c940:	blt	1ca5c <ReadDataSlabN+0x32f0>
   1c944:	mov	r0, #0
   1c948:	add	r3, sp, #40	; 0x28
   1c94c:	mov	r5, r0
   1c950:	ldr	r0, [r9, r0, lsl #2]
   1c954:	ldr	r1, [sp, #20]
   1c958:	add	r0, r0, #1
   1c95c:	str	r0, [r9, r5, lsl #2]
   1c960:	ldr	r1, [r1, r5, lsl #2]
   1c964:	sdiv	r2, r0, r1
   1c968:	mls	r0, r2, r1, r0
   1c96c:	cmp	r0, #0
   1c970:	bne	1ca38 <ReadDataSlabN+0x32cc>
   1c974:	mov	r0, #0
   1c978:	str	r0, [r9, r5, lsl #2]
   1c97c:	add	r0, r3, r5, lsl #2
   1c980:	ldr	r6, [r0, #4]
   1c984:	sdiv	r0, sl, r6
   1c988:	mls	r7, r0, r6, sl
   1c98c:	cmp	r7, #0
   1c990:	beq	1c9d8 <ReadDataSlabN+0x326c>
   1c994:	ldr	r9, [r3, r5, lsl #2]
   1c998:	ldr	r0, [r8, r5, lsl #2]
   1c99c:	sub	r1, r6, r7
   1c9a0:	ldr	r4, [sp, #32]
   1c9a4:	mov	r2, #1
   1c9a8:	mla	r0, r0, r9, r1
   1c9ac:	ldr	r1, [sp, #36]	; 0x24
   1c9b0:	mul	r1, r0, r1
   1c9b4:	ldr	r0, [r4]
   1c9b8:	bl	1a2c <fseek@plt>
   1c9bc:	ldr	r0, [r8, r5, lsl #2]
   1c9c0:	add	r1, r6, sl
   1c9c4:	add	r3, sp, #40	; 0x28
   1c9c8:	sub	r1, r1, r7
   1c9cc:	mla	sl, r0, r9, r1
   1c9d0:	ldr	r9, [sp, #16]
   1c9d4:	b	1ca1c <ReadDataSlabN+0x32b0>
   1c9d8:	ldr	r0, [r8, r5, lsl #2]
   1c9dc:	cmp	r0, #0
   1c9e0:	beq	1ca18 <ReadDataSlabN+0x32ac>
   1c9e4:	ldr	r1, [sp, #36]	; 0x24
   1c9e8:	ldr	r4, [r3, r5, lsl #2]
   1c9ec:	ldr	r6, [sp, #32]
   1c9f0:	mov	r2, #1
   1c9f4:	mul	r0, r0, r1
   1c9f8:	mul	r1, r0, r4
   1c9fc:	ldr	r0, [r6]
   1ca00:	bl	1a2c <fseek@plt>
   1ca04:	ldr	r0, [r8, r5, lsl #2]
   1ca08:	add	r3, sp, #40	; 0x28
   1ca0c:	mla	sl, r0, r4, sl
   1ca10:	mov	r4, r6
   1ca14:	b	1ca1c <ReadDataSlabN+0x32b0>
   1ca18:	ldr	r4, [sp, #32]
   1ca1c:	ldr	r2, [fp, #8]
   1ca20:	ldr	r7, [fp, #24]
   1ca24:	add	r1, r5, #2
   1ca28:	add	r0, r5, #1
   1ca2c:	cmp	r1, r2
   1ca30:	blt	1c94c <ReadDataSlabN+0x31e0>
   1ca34:	b	1ca5c <ReadDataSlabN+0x32f0>
   1ca38:	ldr	r0, [sp]
   1ca3c:	mov	r2, r4
   1ca40:	ldr	r4, [r0, r5, lsl #2]
   1ca44:	ldr	r0, [sp, #36]	; 0x24
   1ca48:	mul	r1, r4, r0
   1ca4c:	ldr	r0, [r2]
   1ca50:	mov	r2, #1
   1ca54:	bl	1a2c <fseek@plt>
   1ca58:	add	sl, r4, sl
   1ca5c:	ldr	r0, [r7]
   1ca60:	ldr	r5, [sp, #8]
   1ca64:	ldr	r1, [sp, #12]
   1ca68:	add	r5, r0, r5
   1ca6c:	mov	r0, #0
   1ca70:	cmp	r5, r1
   1ca74:	blt	1c830 <ReadDataSlabN+0x30c4>
   1ca78:	b	197f0 <ReadDataSlabN+0x84>
   1ca7c:	ldr	r0, [sp, #12]
   1ca80:	ldr	r1, [fp, #16]
   1ca84:	cmp	r0, #1
   1ca88:	ldr	r0, [fp, #24]
   1ca8c:	blt	1d728 <ReadDataSlabN+0x3fbc>
   1ca90:	add	r0, r0, #4
   1ca94:	add	r8, r1, #4
   1ca98:	mov	r5, #0
   1ca9c:	str	r0, [sp, #20]
   1caa0:	add	r0, sp, #80	; 0x50
   1caa4:	str	r8, [sp, #4]
   1caa8:	orr	r9, r0, #4
   1caac:	orr	r0, r4, #4
   1cab0:	str	r0, [sp]
   1cab4:	str	r9, [sp, #16]
   1cab8:	ldr	r4, [fp, #16]
   1cabc:	ldr	r0, [r4]
   1cac0:	cmp	r0, #0
   1cac4:	beq	1caf0 <ReadDataSlabN+0x3384>
   1cac8:	ldr	r1, [sp, #36]	; 0x24
   1cacc:	ldr	r6, [sp, #32]
   1cad0:	mov	r2, #1
   1cad4:	mul	r1, r0, r1
   1cad8:	ldr	r0, [r6]
   1cadc:	bl	1a2c <fseek@plt>
   1cae0:	ldr	r0, [r4]
   1cae4:	mov	r4, r6
   1cae8:	add	sl, r0, sl
   1caec:	b	1caf8 <ReadDataSlabN+0x338c>
   1caf0:	ldr	r4, [sp, #32]
   1caf4:	mov	r0, #0
   1caf8:	ldr	r7, [fp, #24]
   1cafc:	ldr	r3, [fp, #12]
   1cb00:	ldr	r2, [sp, #28]
   1cb04:	str	r5, [sp, #8]
   1cb08:	ldr	r1, [r7]
   1cb0c:	cmp	r1, #0
   1cb10:	ble	1cb94 <ReadDataSlabN+0x3428>
   1cb14:	ldr	r0, [sp, #24]
   1cb18:	ldr	r8, [sp, #36]	; 0x24
   1cb1c:	ldr	r7, [fp, #20]
   1cb20:	mov	r9, #0
   1cb24:	add	r5, r0, r5, lsl #1
   1cb28:	mov	r0, r4
   1cb2c:	mov	r1, r5
   1cb30:	mov	r3, #1
   1cb34:	mov	r6, r2
   1cb38:	bl	138dc <ReadUInt16Data>
   1cb3c:	ldr	r0, [r7]
   1cb40:	mov	r2, #1
   1cb44:	sub	r0, r0, #1
   1cb48:	mul	r1, r0, r8
   1cb4c:	ldr	r0, [r4]
   1cb50:	bl	1a2c <fseek@plt>
   1cb54:	ldr	r0, [fp, #24]
   1cb58:	mov	r2, r6
   1cb5c:	ldr	r6, [r7]
   1cb60:	add	r9, r9, #1
   1cb64:	add	r5, r5, #2
   1cb68:	ldr	r1, [r0]
   1cb6c:	add	sl, r6, sl
   1cb70:	cmp	r9, r1
   1cb74:	blt	1cb28 <ReadDataSlabN+0x33bc>
   1cb78:	ldr	r0, [fp, #16]
   1cb7c:	ldr	r3, [fp, #12]
   1cb80:	ldr	r8, [sp, #4]
   1cb84:	ldr	r9, [sp, #16]
   1cb88:	ldr	r7, [fp, #24]
   1cb8c:	ldr	r0, [r0]
   1cb90:	b	1cb9c <ReadDataSlabN+0x3430>
   1cb94:	ldr	r2, [fp, #20]
   1cb98:	ldr	r6, [r2]
   1cb9c:	ldr	r3, [r3]
   1cba0:	mov	r2, #1
   1cba4:	mls	r1, r6, r1, r3
   1cba8:	sub	r5, r1, r0
   1cbac:	ldr	r0, [sp, #36]	; 0x24
   1cbb0:	mul	r1, r5, r0
   1cbb4:	ldr	r0, [r4]
   1cbb8:	bl	1a2c <fseek@plt>
   1cbbc:	ldr	r0, [fp, #8]
   1cbc0:	add	sl, r5, sl
   1cbc4:	cmp	r0, #2
   1cbc8:	blt	1cce4 <ReadDataSlabN+0x3578>
   1cbcc:	mov	r0, #0
   1cbd0:	add	r3, sp, #40	; 0x28
   1cbd4:	mov	r5, r0
   1cbd8:	ldr	r0, [r9, r0, lsl #2]
   1cbdc:	ldr	r1, [sp, #20]
   1cbe0:	add	r0, r0, #1
   1cbe4:	str	r0, [r9, r5, lsl #2]
   1cbe8:	ldr	r1, [r1, r5, lsl #2]
   1cbec:	sdiv	r2, r0, r1
   1cbf0:	mls	r0, r2, r1, r0
   1cbf4:	cmp	r0, #0
   1cbf8:	bne	1ccc0 <ReadDataSlabN+0x3554>
   1cbfc:	mov	r0, #0
   1cc00:	str	r0, [r9, r5, lsl #2]
   1cc04:	add	r0, r3, r5, lsl #2
   1cc08:	ldr	r6, [r0, #4]
   1cc0c:	sdiv	r0, sl, r6
   1cc10:	mls	r7, r0, r6, sl
   1cc14:	cmp	r7, #0
   1cc18:	beq	1cc60 <ReadDataSlabN+0x34f4>
   1cc1c:	ldr	r9, [r3, r5, lsl #2]
   1cc20:	ldr	r0, [r8, r5, lsl #2]
   1cc24:	sub	r1, r6, r7
   1cc28:	ldr	r4, [sp, #32]
   1cc2c:	mov	r2, #1
   1cc30:	mla	r0, r0, r9, r1
   1cc34:	ldr	r1, [sp, #36]	; 0x24
   1cc38:	mul	r1, r0, r1
   1cc3c:	ldr	r0, [r4]
   1cc40:	bl	1a2c <fseek@plt>
   1cc44:	ldr	r0, [r8, r5, lsl #2]
   1cc48:	add	r1, r6, sl
   1cc4c:	add	r3, sp, #40	; 0x28
   1cc50:	sub	r1, r1, r7
   1cc54:	mla	sl, r0, r9, r1
   1cc58:	ldr	r9, [sp, #16]
   1cc5c:	b	1cca4 <ReadDataSlabN+0x3538>
   1cc60:	ldr	r0, [r8, r5, lsl #2]
   1cc64:	cmp	r0, #0
   1cc68:	beq	1cca0 <ReadDataSlabN+0x3534>
   1cc6c:	ldr	r1, [sp, #36]	; 0x24
   1cc70:	ldr	r4, [r3, r5, lsl #2]
   1cc74:	ldr	r6, [sp, #32]
   1cc78:	mov	r2, #1
   1cc7c:	mul	r0, r0, r1
   1cc80:	mul	r1, r0, r4
   1cc84:	ldr	r0, [r6]
   1cc88:	bl	1a2c <fseek@plt>
   1cc8c:	ldr	r0, [r8, r5, lsl #2]
   1cc90:	add	r3, sp, #40	; 0x28
   1cc94:	mla	sl, r0, r4, sl
   1cc98:	mov	r4, r6
   1cc9c:	b	1cca4 <ReadDataSlabN+0x3538>
   1cca0:	ldr	r4, [sp, #32]
   1cca4:	ldr	r2, [fp, #8]
   1cca8:	ldr	r7, [fp, #24]
   1ccac:	add	r1, r5, #2
   1ccb0:	add	r0, r5, #1
   1ccb4:	cmp	r1, r2
   1ccb8:	blt	1cbd4 <ReadDataSlabN+0x3468>
   1ccbc:	b	1cce4 <ReadDataSlabN+0x3578>
   1ccc0:	ldr	r0, [sp]
   1ccc4:	mov	r2, r4
   1ccc8:	ldr	r4, [r0, r5, lsl #2]
   1cccc:	ldr	r0, [sp, #36]	; 0x24
   1ccd0:	mul	r1, r4, r0
   1ccd4:	ldr	r0, [r2]
   1ccd8:	mov	r2, #1
   1ccdc:	bl	1a2c <fseek@plt>
   1cce0:	add	sl, r4, sl
   1cce4:	ldr	r0, [r7]
   1cce8:	ldr	r5, [sp, #8]
   1ccec:	ldr	r1, [sp, #12]
   1ccf0:	add	r5, r0, r5
   1ccf4:	mov	r0, #0
   1ccf8:	cmp	r5, r1
   1ccfc:	blt	1cab8 <ReadDataSlabN+0x334c>
   1cd00:	b	197f0 <ReadDataSlabN+0x84>
   1cd04:	ldr	r0, [sp, #12]
   1cd08:	ldr	r1, [fp, #16]
   1cd0c:	cmp	r0, #1
   1cd10:	ldr	r0, [fp, #24]
   1cd14:	blt	1d728 <ReadDataSlabN+0x3fbc>
   1cd18:	add	r0, r0, #4
   1cd1c:	add	r8, r1, #4
   1cd20:	mov	r5, #0
   1cd24:	str	r0, [sp, #20]
   1cd28:	add	r0, sp, #80	; 0x50
   1cd2c:	str	r8, [sp, #4]
   1cd30:	orr	r9, r0, #4
   1cd34:	orr	r0, r4, #4
   1cd38:	str	r0, [sp]
   1cd3c:	str	r9, [sp, #16]
   1cd40:	ldr	r4, [fp, #16]
   1cd44:	ldr	r0, [r4]
   1cd48:	cmp	r0, #0
   1cd4c:	beq	1cd78 <ReadDataSlabN+0x360c>
   1cd50:	ldr	r1, [sp, #36]	; 0x24
   1cd54:	ldr	r6, [sp, #32]
   1cd58:	mov	r2, #1
   1cd5c:	mul	r1, r0, r1
   1cd60:	ldr	r0, [r6]
   1cd64:	bl	1a2c <fseek@plt>
   1cd68:	ldr	r0, [r4]
   1cd6c:	mov	r4, r6
   1cd70:	add	sl, r0, sl
   1cd74:	b	1cd80 <ReadDataSlabN+0x3614>
   1cd78:	ldr	r4, [sp, #32]
   1cd7c:	mov	r0, #0
   1cd80:	ldr	r7, [fp, #24]
   1cd84:	ldr	r3, [fp, #12]
   1cd88:	ldr	r2, [sp, #28]
   1cd8c:	str	r5, [sp, #8]
   1cd90:	ldr	r1, [r7]
   1cd94:	cmp	r1, #0
   1cd98:	ble	1ce1c <ReadDataSlabN+0x36b0>
   1cd9c:	ldr	r0, [sp, #24]
   1cda0:	ldr	r8, [sp, #36]	; 0x24
   1cda4:	ldr	r7, [fp, #20]
   1cda8:	mov	r9, #0
   1cdac:	add	r5, r0, r5, lsl #2
   1cdb0:	mov	r0, r4
   1cdb4:	mov	r1, r5
   1cdb8:	mov	r3, #1
   1cdbc:	mov	r6, r2
   1cdc0:	bl	d774 <ReadInt32Data>
   1cdc4:	ldr	r0, [r7]
   1cdc8:	mov	r2, #1
   1cdcc:	sub	r0, r0, #1
   1cdd0:	mul	r1, r0, r8
   1cdd4:	ldr	r0, [r4]
   1cdd8:	bl	1a2c <fseek@plt>
   1cddc:	ldr	r0, [fp, #24]
   1cde0:	mov	r2, r6
   1cde4:	ldr	r6, [r7]
   1cde8:	add	r9, r9, #1
   1cdec:	add	r5, r5, #4
   1cdf0:	ldr	r1, [r0]
   1cdf4:	add	sl, r6, sl
   1cdf8:	cmp	r9, r1
   1cdfc:	blt	1cdb0 <ReadDataSlabN+0x3644>
   1ce00:	ldr	r0, [fp, #16]
   1ce04:	ldr	r3, [fp, #12]
   1ce08:	ldr	r8, [sp, #4]
   1ce0c:	ldr	r9, [sp, #16]
   1ce10:	ldr	r7, [fp, #24]
   1ce14:	ldr	r0, [r0]
   1ce18:	b	1ce24 <ReadDataSlabN+0x36b8>
   1ce1c:	ldr	r2, [fp, #20]
   1ce20:	ldr	r6, [r2]
   1ce24:	ldr	r3, [r3]
   1ce28:	mov	r2, #1
   1ce2c:	mls	r1, r6, r1, r3
   1ce30:	sub	r5, r1, r0
   1ce34:	ldr	r0, [sp, #36]	; 0x24
   1ce38:	mul	r1, r5, r0
   1ce3c:	ldr	r0, [r4]
   1ce40:	bl	1a2c <fseek@plt>
   1ce44:	ldr	r0, [fp, #8]
   1ce48:	add	sl, r5, sl
   1ce4c:	cmp	r0, #2
   1ce50:	blt	1cf6c <ReadDataSlabN+0x3800>
   1ce54:	mov	r0, #0
   1ce58:	add	r3, sp, #40	; 0x28
   1ce5c:	mov	r5, r0
   1ce60:	ldr	r0, [r9, r0, lsl #2]
   1ce64:	ldr	r1, [sp, #20]
   1ce68:	add	r0, r0, #1
   1ce6c:	str	r0, [r9, r5, lsl #2]
   1ce70:	ldr	r1, [r1, r5, lsl #2]
   1ce74:	sdiv	r2, r0, r1
   1ce78:	mls	r0, r2, r1, r0
   1ce7c:	cmp	r0, #0
   1ce80:	bne	1cf48 <ReadDataSlabN+0x37dc>
   1ce84:	mov	r0, #0
   1ce88:	str	r0, [r9, r5, lsl #2]
   1ce8c:	add	r0, r3, r5, lsl #2
   1ce90:	ldr	r6, [r0, #4]
   1ce94:	sdiv	r0, sl, r6
   1ce98:	mls	r7, r0, r6, sl
   1ce9c:	cmp	r7, #0
   1cea0:	beq	1cee8 <ReadDataSlabN+0x377c>
   1cea4:	ldr	r9, [r3, r5, lsl #2]
   1cea8:	ldr	r0, [r8, r5, lsl #2]
   1ceac:	sub	r1, r6, r7
   1ceb0:	ldr	r4, [sp, #32]
   1ceb4:	mov	r2, #1
   1ceb8:	mla	r0, r0, r9, r1
   1cebc:	ldr	r1, [sp, #36]	; 0x24
   1cec0:	mul	r1, r0, r1
   1cec4:	ldr	r0, [r4]
   1cec8:	bl	1a2c <fseek@plt>
   1cecc:	ldr	r0, [r8, r5, lsl #2]
   1ced0:	add	r1, r6, sl
   1ced4:	add	r3, sp, #40	; 0x28
   1ced8:	sub	r1, r1, r7
   1cedc:	mla	sl, r0, r9, r1
   1cee0:	ldr	r9, [sp, #16]
   1cee4:	b	1cf2c <ReadDataSlabN+0x37c0>
   1cee8:	ldr	r0, [r8, r5, lsl #2]
   1ceec:	cmp	r0, #0
   1cef0:	beq	1cf28 <ReadDataSlabN+0x37bc>
   1cef4:	ldr	r1, [sp, #36]	; 0x24
   1cef8:	ldr	r4, [r3, r5, lsl #2]
   1cefc:	ldr	r6, [sp, #32]
   1cf00:	mov	r2, #1
   1cf04:	mul	r0, r0, r1
   1cf08:	mul	r1, r0, r4
   1cf0c:	ldr	r0, [r6]
   1cf10:	bl	1a2c <fseek@plt>
   1cf14:	ldr	r0, [r8, r5, lsl #2]
   1cf18:	add	r3, sp, #40	; 0x28
   1cf1c:	mla	sl, r0, r4, sl
   1cf20:	mov	r4, r6
   1cf24:	b	1cf2c <ReadDataSlabN+0x37c0>
   1cf28:	ldr	r4, [sp, #32]
   1cf2c:	ldr	r2, [fp, #8]
   1cf30:	ldr	r7, [fp, #24]
   1cf34:	add	r1, r5, #2
   1cf38:	add	r0, r5, #1
   1cf3c:	cmp	r1, r2
   1cf40:	blt	1ce5c <ReadDataSlabN+0x36f0>
   1cf44:	b	1cf6c <ReadDataSlabN+0x3800>
   1cf48:	ldr	r0, [sp]
   1cf4c:	mov	r2, r4
   1cf50:	ldr	r4, [r0, r5, lsl #2]
   1cf54:	ldr	r0, [sp, #36]	; 0x24
   1cf58:	mul	r1, r4, r0
   1cf5c:	ldr	r0, [r2]
   1cf60:	mov	r2, #1
   1cf64:	bl	1a2c <fseek@plt>
   1cf68:	add	sl, r4, sl
   1cf6c:	ldr	r0, [r7]
   1cf70:	ldr	r5, [sp, #8]
   1cf74:	ldr	r1, [sp, #12]
   1cf78:	add	r5, r0, r5
   1cf7c:	mov	r0, #0
   1cf80:	cmp	r5, r1
   1cf84:	blt	1cd40 <ReadDataSlabN+0x35d4>
   1cf88:	b	197f0 <ReadDataSlabN+0x84>
   1cf8c:	ldr	r0, [sp, #12]
   1cf90:	ldr	r1, [fp, #16]
   1cf94:	cmp	r0, #1
   1cf98:	ldr	r0, [fp, #24]
   1cf9c:	blt	1d728 <ReadDataSlabN+0x3fbc>
   1cfa0:	add	r0, r0, #4
   1cfa4:	add	r8, r1, #4
   1cfa8:	mov	r5, #0
   1cfac:	str	r0, [sp, #20]
   1cfb0:	add	r0, sp, #80	; 0x50
   1cfb4:	str	r8, [sp, #4]
   1cfb8:	orr	r9, r0, #4
   1cfbc:	orr	r0, r4, #4
   1cfc0:	str	r0, [sp]
   1cfc4:	str	r9, [sp, #16]
   1cfc8:	ldr	r4, [fp, #16]
   1cfcc:	ldr	r0, [r4]
   1cfd0:	cmp	r0, #0
   1cfd4:	beq	1d000 <ReadDataSlabN+0x3894>
   1cfd8:	ldr	r1, [sp, #36]	; 0x24
   1cfdc:	ldr	r6, [sp, #32]
   1cfe0:	mov	r2, #1
   1cfe4:	mul	r1, r0, r1
   1cfe8:	ldr	r0, [r6]
   1cfec:	bl	1a2c <fseek@plt>
   1cff0:	ldr	r0, [r4]
   1cff4:	mov	r4, r6
   1cff8:	add	sl, r0, sl
   1cffc:	b	1d008 <ReadDataSlabN+0x389c>
   1d000:	ldr	r4, [sp, #32]
   1d004:	mov	r0, #0
   1d008:	ldr	r7, [fp, #24]
   1d00c:	ldr	r3, [fp, #12]
   1d010:	ldr	r2, [sp, #28]
   1d014:	str	r5, [sp, #8]
   1d018:	ldr	r1, [r7]
   1d01c:	cmp	r1, #0
   1d020:	ble	1d0a4 <ReadDataSlabN+0x3938>
   1d024:	ldr	r0, [sp, #24]
   1d028:	ldr	r8, [sp, #36]	; 0x24
   1d02c:	ldr	r7, [fp, #20]
   1d030:	mov	r9, #0
   1d034:	add	r5, r0, r5, lsl #2
   1d038:	mov	r0, r4
   1d03c:	mov	r1, r5
   1d040:	mov	r3, #1
   1d044:	mov	r6, r2
   1d048:	bl	f85c <ReadUInt32Data>
   1d04c:	ldr	r0, [r7]
   1d050:	mov	r2, #1
   1d054:	sub	r0, r0, #1
   1d058:	mul	r1, r0, r8
   1d05c:	ldr	r0, [r4]
   1d060:	bl	1a2c <fseek@plt>
   1d064:	ldr	r0, [fp, #24]
   1d068:	mov	r2, r6
   1d06c:	ldr	r6, [r7]
   1d070:	add	r9, r9, #1
   1d074:	add	r5, r5, #4
   1d078:	ldr	r1, [r0]
   1d07c:	add	sl, r6, sl
   1d080:	cmp	r9, r1
   1d084:	blt	1d038 <ReadDataSlabN+0x38cc>
   1d088:	ldr	r0, [fp, #16]
   1d08c:	ldr	r3, [fp, #12]
   1d090:	ldr	r8, [sp, #4]
   1d094:	ldr	r9, [sp, #16]
   1d098:	ldr	r7, [fp, #24]
   1d09c:	ldr	r0, [r0]
   1d0a0:	b	1d0ac <ReadDataSlabN+0x3940>
   1d0a4:	ldr	r2, [fp, #20]
   1d0a8:	ldr	r6, [r2]
   1d0ac:	ldr	r3, [r3]
   1d0b0:	mov	r2, #1
   1d0b4:	mls	r1, r6, r1, r3
   1d0b8:	sub	r5, r1, r0
   1d0bc:	ldr	r0, [sp, #36]	; 0x24
   1d0c0:	mul	r1, r5, r0
   1d0c4:	ldr	r0, [r4]
   1d0c8:	bl	1a2c <fseek@plt>
   1d0cc:	ldr	r0, [fp, #8]
   1d0d0:	add	sl, r5, sl
   1d0d4:	cmp	r0, #2
   1d0d8:	blt	1d1f4 <ReadDataSlabN+0x3a88>
   1d0dc:	mov	r0, #0
   1d0e0:	add	r3, sp, #40	; 0x28
   1d0e4:	mov	r5, r0
   1d0e8:	ldr	r0, [r9, r0, lsl #2]
   1d0ec:	ldr	r1, [sp, #20]
   1d0f0:	add	r0, r0, #1
   1d0f4:	str	r0, [r9, r5, lsl #2]
   1d0f8:	ldr	r1, [r1, r5, lsl #2]
   1d0fc:	sdiv	r2, r0, r1
   1d100:	mls	r0, r2, r1, r0
   1d104:	cmp	r0, #0
   1d108:	bne	1d1d0 <ReadDataSlabN+0x3a64>
   1d10c:	mov	r0, #0
   1d110:	str	r0, [r9, r5, lsl #2]
   1d114:	add	r0, r3, r5, lsl #2
   1d118:	ldr	r6, [r0, #4]
   1d11c:	sdiv	r0, sl, r6
   1d120:	mls	r7, r0, r6, sl
   1d124:	cmp	r7, #0
   1d128:	beq	1d170 <ReadDataSlabN+0x3a04>
   1d12c:	ldr	r9, [r3, r5, lsl #2]
   1d130:	ldr	r0, [r8, r5, lsl #2]
   1d134:	sub	r1, r6, r7
   1d138:	ldr	r4, [sp, #32]
   1d13c:	mov	r2, #1
   1d140:	mla	r0, r0, r9, r1
   1d144:	ldr	r1, [sp, #36]	; 0x24
   1d148:	mul	r1, r0, r1
   1d14c:	ldr	r0, [r4]
   1d150:	bl	1a2c <fseek@plt>
   1d154:	ldr	r0, [r8, r5, lsl #2]
   1d158:	add	r1, r6, sl
   1d15c:	add	r3, sp, #40	; 0x28
   1d160:	sub	r1, r1, r7
   1d164:	mla	sl, r0, r9, r1
   1d168:	ldr	r9, [sp, #16]
   1d16c:	b	1d1b4 <ReadDataSlabN+0x3a48>
   1d170:	ldr	r0, [r8, r5, lsl #2]
   1d174:	cmp	r0, #0
   1d178:	beq	1d1b0 <ReadDataSlabN+0x3a44>
   1d17c:	ldr	r1, [sp, #36]	; 0x24
   1d180:	ldr	r4, [r3, r5, lsl #2]
   1d184:	ldr	r6, [sp, #32]
   1d188:	mov	r2, #1
   1d18c:	mul	r0, r0, r1
   1d190:	mul	r1, r0, r4
   1d194:	ldr	r0, [r6]
   1d198:	bl	1a2c <fseek@plt>
   1d19c:	ldr	r0, [r8, r5, lsl #2]
   1d1a0:	add	r3, sp, #40	; 0x28
   1d1a4:	mla	sl, r0, r4, sl
   1d1a8:	mov	r4, r6
   1d1ac:	b	1d1b4 <ReadDataSlabN+0x3a48>
   1d1b0:	ldr	r4, [sp, #32]
   1d1b4:	ldr	r2, [fp, #8]
   1d1b8:	ldr	r7, [fp, #24]
   1d1bc:	add	r1, r5, #2
   1d1c0:	add	r0, r5, #1
   1d1c4:	cmp	r1, r2
   1d1c8:	blt	1d0e4 <ReadDataSlabN+0x3978>
   1d1cc:	b	1d1f4 <ReadDataSlabN+0x3a88>
   1d1d0:	ldr	r0, [sp]
   1d1d4:	mov	r2, r4
   1d1d8:	ldr	r4, [r0, r5, lsl #2]
   1d1dc:	ldr	r0, [sp, #36]	; 0x24
   1d1e0:	mul	r1, r4, r0
   1d1e4:	ldr	r0, [r2]
   1d1e8:	mov	r2, #1
   1d1ec:	bl	1a2c <fseek@plt>
   1d1f0:	add	sl, r4, sl
   1d1f4:	ldr	r0, [r7]
   1d1f8:	ldr	r5, [sp, #8]
   1d1fc:	ldr	r1, [sp, #12]
   1d200:	add	r5, r0, r5
   1d204:	mov	r0, #0
   1d208:	cmp	r5, r1
   1d20c:	blt	1cfc8 <ReadDataSlabN+0x385c>
   1d210:	b	197f0 <ReadDataSlabN+0x84>
   1d214:	ldr	r0, [sp, #12]
   1d218:	ldr	r1, [fp, #16]
   1d21c:	cmp	r0, #1
   1d220:	ldr	r0, [fp, #24]
   1d224:	blt	1d728 <ReadDataSlabN+0x3fbc>
   1d228:	add	r0, r0, #4
   1d22c:	add	r8, r1, #4
   1d230:	mov	r5, #0
   1d234:	str	r0, [sp, #20]
   1d238:	add	r0, sp, #80	; 0x50
   1d23c:	str	r8, [sp, #4]
   1d240:	orr	r9, r0, #4
   1d244:	orr	r0, r4, #4
   1d248:	str	r0, [sp]
   1d24c:	str	r9, [sp, #16]
   1d250:	ldr	r4, [fp, #16]
   1d254:	ldr	r0, [r4]
   1d258:	cmp	r0, #0
   1d25c:	beq	1d28c <ReadDataSlabN+0x3b20>
   1d260:	ldr	r1, [sp, #36]	; 0x24
   1d264:	ldr	r6, [sp, #32]
   1d268:	mov	r2, #1
   1d26c:	mul	r1, r0, r1
   1d270:	ldr	r0, [r6]
   1d274:	bl	1a2c <fseek@plt>
   1d278:	ldr	r0, [r4]
   1d27c:	ldr	r2, [sp, #28]
   1d280:	mov	r4, r6
   1d284:	add	sl, r0, sl
   1d288:	b	1d298 <ReadDataSlabN+0x3b2c>
   1d28c:	ldr	r2, [sp, #28]
   1d290:	ldr	r4, [sp, #32]
   1d294:	mov	r0, #0
   1d298:	ldr	r7, [fp, #24]
   1d29c:	ldr	r3, [fp, #12]
   1d2a0:	str	r5, [sp, #8]
   1d2a4:	ldr	r1, [r7]
   1d2a8:	cmp	r1, #0
   1d2ac:	ble	1d330 <ReadDataSlabN+0x3bc4>
   1d2b0:	ldr	r0, [sp, #24]
   1d2b4:	ldr	r8, [sp, #36]	; 0x24
   1d2b8:	ldr	r7, [fp, #20]
   1d2bc:	mov	r9, #0
   1d2c0:	add	r5, r0, r5, lsl #3
   1d2c4:	mov	r0, r4
   1d2c8:	mov	r1, r5
   1d2cc:	mov	r3, #1
   1d2d0:	mov	r6, r2
   1d2d4:	bl	9404 <ReadInt64Data>
   1d2d8:	ldr	r0, [r7]
   1d2dc:	mov	r2, #1
   1d2e0:	sub	r0, r0, #1
   1d2e4:	mul	r1, r0, r8
   1d2e8:	ldr	r0, [r4]
   1d2ec:	bl	1a2c <fseek@plt>
   1d2f0:	ldr	r0, [fp, #24]
   1d2f4:	mov	r2, r6
   1d2f8:	ldr	r6, [r7]
   1d2fc:	add	r9, r9, #1
   1d300:	add	r5, r5, #8
   1d304:	ldr	r1, [r0]
   1d308:	add	sl, r6, sl
   1d30c:	cmp	r9, r1
   1d310:	blt	1d2c4 <ReadDataSlabN+0x3b58>
   1d314:	ldr	r0, [fp, #16]
   1d318:	ldr	r3, [fp, #12]
   1d31c:	ldr	r8, [sp, #4]
   1d320:	ldr	r9, [sp, #16]
   1d324:	ldr	r7, [fp, #24]
   1d328:	ldr	r0, [r0]
   1d32c:	b	1d338 <ReadDataSlabN+0x3bcc>
   1d330:	ldr	r2, [fp, #20]
   1d334:	ldr	r6, [r2]
   1d338:	ldr	r3, [r3]
   1d33c:	mov	r2, #1
   1d340:	mls	r1, r6, r1, r3
   1d344:	sub	r5, r1, r0
   1d348:	ldr	r0, [sp, #36]	; 0x24
   1d34c:	mul	r1, r5, r0
   1d350:	ldr	r0, [r4]
   1d354:	bl	1a2c <fseek@plt>
   1d358:	ldr	r0, [fp, #8]
   1d35c:	add	sl, r5, sl
   1d360:	cmp	r0, #2
   1d364:	blt	1d480 <ReadDataSlabN+0x3d14>
   1d368:	mov	r0, #0
   1d36c:	add	r3, sp, #40	; 0x28
   1d370:	mov	r5, r0
   1d374:	ldr	r0, [r9, r0, lsl #2]
   1d378:	ldr	r1, [sp, #20]
   1d37c:	add	r0, r0, #1
   1d380:	str	r0, [r9, r5, lsl #2]
   1d384:	ldr	r1, [r1, r5, lsl #2]
   1d388:	sdiv	r2, r0, r1
   1d38c:	mls	r0, r2, r1, r0
   1d390:	cmp	r0, #0
   1d394:	bne	1d45c <ReadDataSlabN+0x3cf0>
   1d398:	mov	r0, #0
   1d39c:	str	r0, [r9, r5, lsl #2]
   1d3a0:	add	r0, r3, r5, lsl #2
   1d3a4:	ldr	r6, [r0, #4]
   1d3a8:	sdiv	r0, sl, r6
   1d3ac:	mls	r7, r0, r6, sl
   1d3b0:	cmp	r7, #0
   1d3b4:	beq	1d3fc <ReadDataSlabN+0x3c90>
   1d3b8:	ldr	r9, [r3, r5, lsl #2]
   1d3bc:	ldr	r0, [r8, r5, lsl #2]
   1d3c0:	sub	r1, r6, r7
   1d3c4:	ldr	r4, [sp, #32]
   1d3c8:	mov	r2, #1
   1d3cc:	mla	r0, r0, r9, r1
   1d3d0:	ldr	r1, [sp, #36]	; 0x24
   1d3d4:	mul	r1, r0, r1
   1d3d8:	ldr	r0, [r4]
   1d3dc:	bl	1a2c <fseek@plt>
   1d3e0:	ldr	r0, [r8, r5, lsl #2]
   1d3e4:	add	r1, r6, sl
   1d3e8:	add	r3, sp, #40	; 0x28
   1d3ec:	sub	r1, r1, r7
   1d3f0:	mla	sl, r0, r9, r1
   1d3f4:	ldr	r9, [sp, #16]
   1d3f8:	b	1d440 <ReadDataSlabN+0x3cd4>
   1d3fc:	ldr	r0, [r8, r5, lsl #2]
   1d400:	cmp	r0, #0
   1d404:	beq	1d43c <ReadDataSlabN+0x3cd0>
   1d408:	ldr	r1, [sp, #36]	; 0x24
   1d40c:	ldr	r4, [r3, r5, lsl #2]
   1d410:	ldr	r6, [sp, #32]
   1d414:	mov	r2, #1
   1d418:	mul	r0, r0, r1
   1d41c:	mul	r1, r0, r4
   1d420:	ldr	r0, [r6]
   1d424:	bl	1a2c <fseek@plt>
   1d428:	ldr	r0, [r8, r5, lsl #2]
   1d42c:	add	r3, sp, #40	; 0x28
   1d430:	mla	sl, r0, r4, sl
   1d434:	mov	r4, r6
   1d438:	b	1d440 <ReadDataSlabN+0x3cd4>
   1d43c:	ldr	r4, [sp, #32]
   1d440:	ldr	r2, [fp, #8]
   1d444:	ldr	r7, [fp, #24]
   1d448:	add	r1, r5, #2
   1d44c:	add	r0, r5, #1
   1d450:	cmp	r1, r2
   1d454:	blt	1d370 <ReadDataSlabN+0x3c04>
   1d458:	b	1d480 <ReadDataSlabN+0x3d14>
   1d45c:	ldr	r0, [sp]
   1d460:	mov	r2, r4
   1d464:	ldr	r4, [r0, r5, lsl #2]
   1d468:	ldr	r0, [sp, #36]	; 0x24
   1d46c:	mul	r1, r4, r0
   1d470:	ldr	r0, [r2]
   1d474:	mov	r2, #1
   1d478:	bl	1a2c <fseek@plt>
   1d47c:	add	sl, r4, sl
   1d480:	ldr	r0, [r7]
   1d484:	ldr	r5, [sp, #8]
   1d488:	ldr	r1, [sp, #12]
   1d48c:	add	r5, r0, r5
   1d490:	mov	r0, #0
   1d494:	cmp	r5, r1
   1d498:	blt	1d250 <ReadDataSlabN+0x3ae4>
   1d49c:	b	197f0 <ReadDataSlabN+0x84>
   1d4a0:	ldr	r0, [sp, #12]
   1d4a4:	ldr	r1, [fp, #16]
   1d4a8:	cmp	r0, #1
   1d4ac:	ldr	r0, [fp, #24]
   1d4b0:	blt	1d728 <ReadDataSlabN+0x3fbc>
   1d4b4:	add	r0, r0, #4
   1d4b8:	add	r8, r1, #4
   1d4bc:	mov	r5, #0
   1d4c0:	str	r0, [sp, #20]
   1d4c4:	add	r0, sp, #80	; 0x50
   1d4c8:	str	r8, [sp, #4]
   1d4cc:	orr	r9, r0, #4
   1d4d0:	orr	r0, r4, #4
   1d4d4:	str	r0, [sp]
   1d4d8:	str	r9, [sp, #16]
   1d4dc:	ldr	r4, [fp, #16]
   1d4e0:	ldr	r0, [r4]
   1d4e4:	cmp	r0, #0
   1d4e8:	beq	1d514 <ReadDataSlabN+0x3da8>
   1d4ec:	ldr	r1, [sp, #36]	; 0x24
   1d4f0:	ldr	r6, [sp, #32]
   1d4f4:	mov	r2, #1
   1d4f8:	mul	r1, r0, r1
   1d4fc:	ldr	r0, [r6]
   1d500:	bl	1a2c <fseek@plt>
   1d504:	ldr	r0, [r4]
   1d508:	mov	r4, r6
   1d50c:	add	sl, r0, sl
   1d510:	b	1d51c <ReadDataSlabN+0x3db0>
   1d514:	ldr	r4, [sp, #32]
   1d518:	mov	r0, #0
   1d51c:	ldr	r7, [fp, #24]
   1d520:	ldr	r3, [fp, #12]
   1d524:	ldr	r2, [sp, #28]
   1d528:	str	r5, [sp, #8]
   1d52c:	ldr	r1, [r7]
   1d530:	cmp	r1, #0
   1d534:	ble	1d5b8 <ReadDataSlabN+0x3e4c>
   1d538:	ldr	r0, [sp, #24]
   1d53c:	ldr	r8, [sp, #36]	; 0x24
   1d540:	ldr	r7, [fp, #20]
   1d544:	mov	r9, #0
   1d548:	add	r5, r0, r5, lsl #3
   1d54c:	mov	r0, r4
   1d550:	mov	r1, r5
   1d554:	mov	r3, #1
   1d558:	mov	r6, r2
   1d55c:	bl	b5bc <ReadUInt64Data>
   1d560:	ldr	r0, [r7]
   1d564:	mov	r2, #1
   1d568:	sub	r0, r0, #1
   1d56c:	mul	r1, r0, r8
   1d570:	ldr	r0, [r4]
   1d574:	bl	1a2c <fseek@plt>
   1d578:	ldr	r0, [fp, #24]
   1d57c:	mov	r2, r6
   1d580:	ldr	r6, [r7]
   1d584:	add	r9, r9, #1
   1d588:	add	r5, r5, #8
   1d58c:	ldr	r1, [r0]
   1d590:	add	sl, r6, sl
   1d594:	cmp	r9, r1
   1d598:	blt	1d54c <ReadDataSlabN+0x3de0>
   1d59c:	ldr	r0, [fp, #16]
   1d5a0:	ldr	r3, [fp, #12]
   1d5a4:	ldr	r8, [sp, #4]
   1d5a8:	ldr	r9, [sp, #16]
   1d5ac:	ldr	r7, [fp, #24]
   1d5b0:	ldr	r0, [r0]
   1d5b4:	b	1d5c0 <ReadDataSlabN+0x3e54>
   1d5b8:	ldr	r2, [fp, #20]
   1d5bc:	ldr	r6, [r2]
   1d5c0:	ldr	r3, [r3]
   1d5c4:	mov	r2, #1
   1d5c8:	mls	r1, r6, r1, r3
   1d5cc:	sub	r5, r1, r0
   1d5d0:	ldr	r0, [sp, #36]	; 0x24
   1d5d4:	mul	r1, r5, r0
   1d5d8:	ldr	r0, [r4]
   1d5dc:	bl	1a2c <fseek@plt>
   1d5e0:	ldr	r0, [fp, #8]
   1d5e4:	add	sl, r5, sl
   1d5e8:	cmp	r0, #2
   1d5ec:	blt	1d708 <ReadDataSlabN+0x3f9c>
   1d5f0:	mov	r0, #0
   1d5f4:	add	r3, sp, #40	; 0x28
   1d5f8:	mov	r5, r0
   1d5fc:	ldr	r0, [r9, r0, lsl #2]
   1d600:	ldr	r1, [sp, #20]
   1d604:	add	r0, r0, #1
   1d608:	str	r0, [r9, r5, lsl #2]
   1d60c:	ldr	r1, [r1, r5, lsl #2]
   1d610:	sdiv	r2, r0, r1
   1d614:	mls	r0, r2, r1, r0
   1d618:	cmp	r0, #0
   1d61c:	bne	1d6e4 <ReadDataSlabN+0x3f78>
   1d620:	mov	r0, #0
   1d624:	str	r0, [r9, r5, lsl #2]
   1d628:	add	r0, r3, r5, lsl #2
   1d62c:	ldr	r6, [r0, #4]
   1d630:	sdiv	r0, sl, r6
   1d634:	mls	r7, r0, r6, sl
   1d638:	cmp	r7, #0
   1d63c:	beq	1d684 <ReadDataSlabN+0x3f18>
   1d640:	ldr	r9, [r3, r5, lsl #2]
   1d644:	ldr	r0, [r8, r5, lsl #2]
   1d648:	sub	r1, r6, r7
   1d64c:	ldr	r4, [sp, #32]
   1d650:	mov	r2, #1
   1d654:	mla	r0, r0, r9, r1
   1d658:	ldr	r1, [sp, #36]	; 0x24
   1d65c:	mul	r1, r0, r1
   1d660:	ldr	r0, [r4]
   1d664:	bl	1a2c <fseek@plt>
   1d668:	ldr	r0, [r8, r5, lsl #2]
   1d66c:	add	r1, r6, sl
   1d670:	add	r3, sp, #40	; 0x28
   1d674:	sub	r1, r1, r7
   1d678:	mla	sl, r0, r9, r1
   1d67c:	ldr	r9, [sp, #16]
   1d680:	b	1d6c8 <ReadDataSlabN+0x3f5c>
   1d684:	ldr	r0, [r8, r5, lsl #2]
   1d688:	cmp	r0, #0
   1d68c:	beq	1d6c4 <ReadDataSlabN+0x3f58>
   1d690:	ldr	r1, [sp, #36]	; 0x24
   1d694:	ldr	r4, [r3, r5, lsl #2]
   1d698:	ldr	r6, [sp, #32]
   1d69c:	mov	r2, #1
   1d6a0:	mul	r0, r0, r1
   1d6a4:	mul	r1, r0, r4
   1d6a8:	ldr	r0, [r6]
   1d6ac:	bl	1a2c <fseek@plt>
   1d6b0:	ldr	r0, [r8, r5, lsl #2]
   1d6b4:	add	r3, sp, #40	; 0x28
   1d6b8:	mla	sl, r0, r4, sl
   1d6bc:	mov	r4, r6
   1d6c0:	b	1d6c8 <ReadDataSlabN+0x3f5c>
   1d6c4:	ldr	r4, [sp, #32]
   1d6c8:	ldr	r2, [fp, #8]
   1d6cc:	ldr	r7, [fp, #24]
   1d6d0:	add	r1, r5, #2
   1d6d4:	add	r0, r5, #1
   1d6d8:	cmp	r1, r2
   1d6dc:	blt	1d5f8 <ReadDataSlabN+0x3e8c>
   1d6e0:	b	1d708 <ReadDataSlabN+0x3f9c>
   1d6e4:	ldr	r0, [sp]
   1d6e8:	mov	r2, r4
   1d6ec:	ldr	r4, [r0, r5, lsl #2]
   1d6f0:	ldr	r0, [sp, #36]	; 0x24
   1d6f4:	mul	r1, r4, r0
   1d6f8:	ldr	r0, [r2]
   1d6fc:	mov	r2, #1
   1d700:	bl	1a2c <fseek@plt>
   1d704:	add	sl, r4, sl
   1d708:	ldr	r0, [r7]
   1d70c:	ldr	r5, [sp, #8]
   1d710:	ldr	r1, [sp, #12]
   1d714:	add	r5, r0, r5
   1d718:	mov	r0, #0
   1d71c:	cmp	r5, r1
   1d720:	blt	1d4dc <ReadDataSlabN+0x3d70>
   1d724:	b	197f0 <ReadDataSlabN+0x84>
   1d728:	mov	r0, #0
   1d72c:	sub	sp, fp, #28
   1d730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001d734 <ReadCompressedDataSlabN>:
   1d734:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d738:	add	fp, sp, #28
   1d73c:	sub	sp, sp, #228	; 0xe4
   1d740:	sub	r5, fp, #72	; 0x48
   1d744:	mov	r6, r0
   1d748:	mov	r7, r2
   1d74c:	vmov.i32	q8, #0	; 0x00000000
   1d750:	mov	r0, #36	; 0x24
   1d754:	mov	r8, r3
   1d758:	mov	r3, #0
   1d75c:	mov	r2, r5
   1d760:	cmp	r6, #0
   1d764:	str	r3, [fp, #-40]	; 0xffffffd8
   1d768:	str	r3, [fp, #-80]	; 0xffffffb0
   1d76c:	str	r3, [sp, #136]	; 0x88
   1d770:	str	r3, [sp, #96]	; 0x60
   1d774:	vst1.64	{d16-d17}, [r2], r0
   1d778:	cmpne	r7, #0
   1d77c:	str	r3, [r2]
   1d780:	add	r2, r5, #16
   1d784:	sub	r5, fp, #112	; 0x70
   1d788:	vst1.64	{d16-d17}, [r2]
   1d78c:	add	r2, r5, #16
   1d790:	vst1.64	{d16-d17}, [r2]
   1d794:	mov	r2, r5
   1d798:	add	r5, sp, #104	; 0x68
   1d79c:	vst1.64	{d16-d17}, [r2], r0
   1d7a0:	str	r3, [r2]
   1d7a4:	add	r2, r5, #16
   1d7a8:	vst1.64	{d16-d17}, [r2]
   1d7ac:	mov	r2, r5
   1d7b0:	vst1.64	{d16-d17}, [r2], r0
   1d7b4:	add	r0, sp, #48	; 0x30
   1d7b8:	str	r3, [r2]
   1d7bc:	add	r2, r0, #32
   1d7c0:	vst1.64	{d16-d17}, [r2]
   1d7c4:	add	r2, r0, #16
   1d7c8:	vst1.64	{d16-d17}, [r2]
   1d7cc:	mov	r2, #52	; 0x34
   1d7d0:	vst1.64	{d16-d17}, [r0], r2
   1d7d4:	str	r3, [r0]
   1d7d8:	mov	r0, #1
   1d7dc:	bne	1d7e8 <ReadCompressedDataSlabN+0xb4>
   1d7e0:	sub	sp, fp, #28
   1d7e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d7e8:	ldr	r2, [fp, #12]
   1d7ec:	cmp	r2, #10
   1d7f0:	bgt	1d7e0 <ReadCompressedDataSlabN+0xac>
   1d7f4:	ldr	r2, [fp, #28]
   1d7f8:	cmp	r2, #0
   1d7fc:	ldrne	r5, [fp, #24]
   1d800:	cmpne	r5, #0
   1d804:	beq	1d7e0 <ReadCompressedDataSlabN+0xac>
   1d808:	ldr	r2, [fp, #20]
   1d80c:	cmp	r2, #0
   1d810:	ldrne	r2, [r6]
   1d814:	cmpne	r2, #0
   1d818:	beq	1d7e0 <ReadCompressedDataSlabN+0xac>
   1d81c:	add	r0, sp, #48	; 0x30
   1d820:	str	r6, [sp, #44]	; 0x2c
   1d824:	str	r7, [sp, #36]	; 0x24
   1d828:	bl	1948 <inflateCopy@plt>
   1d82c:	sub	r0, r8, #6
   1d830:	add	ip, sp, #104	; 0x68
   1d834:	cmp	r0, #9
   1d838:	bhi	21d30 <ReadCompressedDataSlabN+0x45fc>
   1d83c:	add	r1, pc, #8
   1d840:	ldr	r2, [fp, #16]
   1d844:	ldr	r0, [r1, r0, lsl #2]
   1d848:	add	pc, r1, r0
   1d84c:	.word	0x00000028
   1d850:	.word	0x00000194
   1d854:	.word	0x00000310
   1d858:	.word	0x000006dc
   1d85c:	.word	0x00000aa8
   1d860:	.word	0x00000c28
   1d864:	.word	0x00000da8
   1d868:	.word	0x00000f28
   1d86c:	.word	0x000010a8
   1d870:	.word	0x00001228
   1d874:	ldr	r0, [r5]
   1d878:	sub	r0, r0, #1
   1d87c:	str	r0, [fp, #-72]	; 0xffffffb8
   1d880:	ldr	r0, [fp, #28]
   1d884:	ldr	lr, [r2]
   1d888:	str	lr, [sp, #104]	; 0x68
   1d88c:	ldr	r7, [r0]
   1d890:	ldr	r0, [fp, #12]
   1d894:	cmp	r0, #2
   1d898:	blt	1ebf4 <ReadCompressedDataSlabN+0x14c0>
   1d89c:	sub	r4, r2, #4
   1d8a0:	sub	sl, r2, #12
   1d8a4:	mov	r3, #1
   1d8a8:	mov	r0, #0
   1d8ac:	sub	r2, fp, #72	; 0x48
   1d8b0:	mvn	r9, #15
   1d8b4:	mov	r6, lr
   1d8b8:	mov	r8, #0
   1d8bc:	ldr	r1, [fp, #24]
   1d8c0:	add	r0, r0, #1
   1d8c4:	cmp	r0, #4
   1d8c8:	ldr	r1, [r1, r3, lsl #2]
   1d8cc:	str	r6, [ip, r3, lsl #2]
   1d8d0:	sub	r1, r1, #1
   1d8d4:	str	r1, [r2, r3, lsl #2]
   1d8d8:	ldr	r2, [fp, #16]
   1d8dc:	ldr	r5, [r2, r3, lsl #2]
   1d8e0:	str	r5, [sp, #40]	; 0x28
   1d8e4:	bcs	1d8f0 <ReadCompressedDataSlabN+0x1bc>
   1d8e8:	mov	r2, r3
   1d8ec:	b	1d988 <ReadCompressedDataSlabN+0x254>
   1d8f0:	vmov.i32	q9, #1	; 0x00000001
   1d8f4:	vmov.i32	q10, #1	; 0x00000001
   1d8f8:	vmov.i32	q8, #1	; 0x00000001
   1d8fc:	bic	ip, r3, #3
   1d900:	vmov.32	d23[1], r5
   1d904:	vmov.32	d18[0], r6
   1d908:	vmov.32	d20[0], r1
   1d90c:	bic	r1, r0, #3
   1d910:	vorr	d16, d18, d18
   1d914:	vmov.i32	q9, #1	; 0x00000001
   1d918:	str	r1, [sp, #32]
   1d91c:	sub	r2, r3, r1
   1d920:	mov	r1, sl
   1d924:	vorr	d18, d20, d20
   1d928:	vld1.32	{d20-d21}, [r1], r9
   1d92c:	subs	ip, ip, #4
   1d930:	vrev64.32	q12, q10
   1d934:	vext.8	q12, q12, q12, #8
   1d938:	vext.8	q11, q11, q12, #12
   1d93c:	vmul.i32	q9, q9, q12
   1d940:	vmul.i32	q8, q11, q8
   1d944:	vorr	q11, q12, q12
   1d948:	bne	1d928 <ReadCompressedDataSlabN+0x1f4>
   1d94c:	ldr	r5, [sp, #32]
   1d950:	vext.8	q11, q9, q8, #8
   1d954:	vext.8	q12, q8, q8, #8
   1d958:	vmul.i32	q0, q9, q11
   1d95c:	vmul.i32	q1, q8, q12
   1d960:	vmul.i32	q8, q0, d0[1]
   1d964:	vmul.i32	q9, q1, d2[1]
   1d968:	vmov.32	r1, d16[0]
   1d96c:	vmov.32	r6, d18[0]
   1d970:	cmp	r0, r5
   1d974:	bne	1d980 <ReadCompressedDataSlabN+0x24c>
   1d978:	add	ip, sp, #104	; 0x68
   1d97c:	b	1d99c <ReadCompressedDataSlabN+0x268>
   1d980:	vmov.32	r5, d20[0]
   1d984:	add	ip, sp, #104	; 0x68
   1d988:	mul	r6, r5, r6
   1d98c:	ldr	r5, [r4, r2, lsl #2]
   1d990:	subs	r2, r2, #1
   1d994:	mul	r1, r1, r5
   1d998:	bne	1d988 <ReadCompressedDataSlabN+0x254>
   1d99c:	sub	r2, fp, #72	; 0x48
   1d9a0:	str	r6, [ip, r3, lsl #2]
   1d9a4:	add	sl, sl, #4
   1d9a8:	str	r1, [r2, r3, lsl #2]
   1d9ac:	ldr	r1, [fp, #20]
   1d9b0:	ldr	r1, [r1, r3, lsl #2]
   1d9b4:	mla	r8, r1, lr, r8
   1d9b8:	ldr	r1, [fp, #28]
   1d9bc:	mov	lr, r6
   1d9c0:	ldr	r6, [sp, #40]	; 0x28
   1d9c4:	ldr	r1, [r1, r3, lsl #2]
   1d9c8:	add	r3, r3, #1
   1d9cc:	mul	r7, r1, r7
   1d9d0:	ldr	r1, [fp, #12]
   1d9d4:	cmp	r3, r1
   1d9d8:	bne	1d8bc <ReadCompressedDataSlabN+0x188>
   1d9dc:	b	1ebf8 <ReadCompressedDataSlabN+0x14c4>
   1d9e0:	ldr	r0, [r5]
   1d9e4:	sub	r0, r0, #1
   1d9e8:	str	r0, [fp, #-72]	; 0xffffffb8
   1d9ec:	ldr	r0, [fp, #28]
   1d9f0:	ldr	r8, [r2]
   1d9f4:	str	r8, [sp, #104]	; 0x68
   1d9f8:	ldr	r0, [r0]
   1d9fc:	str	r0, [sp, #28]
   1da00:	ldr	r0, [fp, #12]
   1da04:	cmp	r0, #2
   1da08:	blt	1ee4c <ReadCompressedDataSlabN+0x1718>
   1da0c:	sub	r4, r2, #4
   1da10:	sub	sl, r2, #12
   1da14:	mov	r3, #1
   1da18:	mov	lr, #0
   1da1c:	mvn	r7, #15
   1da20:	mov	r6, r8
   1da24:	mov	r9, #0
   1da28:	sub	r5, fp, #72	; 0x48
   1da2c:	ldr	r1, [fp, #24]
   1da30:	ldr	r2, [fp, #16]
   1da34:	add	lr, lr, #1
   1da38:	cmp	lr, #4
   1da3c:	ldr	r1, [r1, r3, lsl #2]
   1da40:	str	r6, [ip, r3, lsl #2]
   1da44:	sub	r1, r1, #1
   1da48:	str	r1, [r5, r3, lsl #2]
   1da4c:	ldr	r5, [r2, r3, lsl #2]
   1da50:	bcs	1da60 <ReadCompressedDataSlabN+0x32c>
   1da54:	mov	r0, r5
   1da58:	mov	r2, r3
   1da5c:	b	1dafc <ReadCompressedDataSlabN+0x3c8>
   1da60:	vmov.i32	q9, #1	; 0x00000001
   1da64:	vmov.i32	q10, #1	; 0x00000001
   1da68:	vmov.i32	q8, #1	; 0x00000001
   1da6c:	bic	r0, lr, #3
   1da70:	bic	ip, r3, #3
   1da74:	vmov.32	d23[1], r5
   1da78:	vmov.32	d18[0], r6
   1da7c:	vmov.32	d20[0], r1
   1da80:	sub	r2, r3, r0
   1da84:	mov	r1, sl
   1da88:	str	r0, [sp, #40]	; 0x28
   1da8c:	vorr	d16, d18, d18
   1da90:	vmov.i32	q9, #1	; 0x00000001
   1da94:	vorr	d18, d20, d20
   1da98:	vld1.32	{d20-d21}, [r1], r7
   1da9c:	subs	ip, ip, #4
   1daa0:	vrev64.32	q12, q10
   1daa4:	vext.8	q12, q12, q12, #8
   1daa8:	vext.8	q11, q11, q12, #12
   1daac:	vmul.i32	q9, q9, q12
   1dab0:	vmul.i32	q8, q11, q8
   1dab4:	vorr	q11, q12, q12
   1dab8:	bne	1da98 <ReadCompressedDataSlabN+0x364>
   1dabc:	mov	r0, r5
   1dac0:	ldr	r5, [sp, #40]	; 0x28
   1dac4:	vext.8	q11, q9, q8, #8
   1dac8:	vext.8	q12, q8, q8, #8
   1dacc:	vmul.i32	q0, q9, q11
   1dad0:	vmul.i32	q1, q8, q12
   1dad4:	vmul.i32	q8, q0, d0[1]
   1dad8:	vmul.i32	q9, q1, d2[1]
   1dadc:	vmov.32	r1, d16[0]
   1dae0:	vmov.32	r6, d18[0]
   1dae4:	cmp	lr, r5
   1dae8:	bne	1daf4 <ReadCompressedDataSlabN+0x3c0>
   1daec:	add	ip, sp, #104	; 0x68
   1daf0:	b	1db10 <ReadCompressedDataSlabN+0x3dc>
   1daf4:	vmov.32	r5, d20[0]
   1daf8:	add	ip, sp, #104	; 0x68
   1dafc:	mul	r6, r5, r6
   1db00:	ldr	r5, [r4, r2, lsl #2]
   1db04:	subs	r2, r2, #1
   1db08:	mul	r1, r1, r5
   1db0c:	bne	1dafc <ReadCompressedDataSlabN+0x3c8>
   1db10:	sub	r5, fp, #72	; 0x48
   1db14:	str	r6, [ip, r3, lsl #2]
   1db18:	ldr	r2, [sp, #28]
   1db1c:	add	sl, sl, #4
   1db20:	str	r1, [r5, r3, lsl #2]
   1db24:	ldr	r1, [fp, #20]
   1db28:	ldr	r1, [r1, r3, lsl #2]
   1db2c:	mla	r9, r1, r8, r9
   1db30:	ldr	r1, [fp, #28]
   1db34:	mov	r8, r6
   1db38:	mov	r6, r0
   1db3c:	ldr	r1, [r1, r3, lsl #2]
   1db40:	add	r3, r3, #1
   1db44:	mul	r2, r1, r2
   1db48:	ldr	r1, [fp, #12]
   1db4c:	str	r2, [sp, #28]
   1db50:	cmp	r3, r1
   1db54:	bne	1da2c <ReadCompressedDataSlabN+0x2f8>
   1db58:	b	1ee50 <ReadCompressedDataSlabN+0x171c>
   1db5c:	ldr	r0, [r5]
   1db60:	mov	r7, #0
   1db64:	sub	r0, r0, #1
   1db68:	str	r0, [fp, #-72]	; 0xffffffb8
   1db6c:	ldr	r0, [fp, #28]
   1db70:	ldr	r8, [r2]
   1db74:	str	r8, [sp, #104]	; 0x68
   1db78:	ldr	r0, [r0]
   1db7c:	str	r0, [sp, #24]
   1db80:	ldr	r0, [fp, #12]
   1db84:	cmp	r0, #2
   1db88:	blt	1dcd8 <ReadCompressedDataSlabN+0x5a4>
   1db8c:	sub	r4, r2, #4
   1db90:	sub	sl, r2, #12
   1db94:	mov	r3, #1
   1db98:	mov	lr, #0
   1db9c:	sub	r2, fp, #72	; 0x48
   1dba0:	mvn	r9, #15
   1dba4:	mov	r6, r8
   1dba8:	mov	r7, #0
   1dbac:	ldr	r1, [fp, #24]
   1dbb0:	add	lr, lr, #1
   1dbb4:	cmp	lr, #4
   1dbb8:	ldr	r1, [r1, r3, lsl #2]
   1dbbc:	str	r6, [ip, r3, lsl #2]
   1dbc0:	sub	r1, r1, #1
   1dbc4:	str	r1, [r2, r3, lsl #2]
   1dbc8:	ldr	r2, [fp, #16]
   1dbcc:	ldr	r5, [r2, r3, lsl #2]
   1dbd0:	bcs	1dbe0 <ReadCompressedDataSlabN+0x4ac>
   1dbd4:	mov	r0, r5
   1dbd8:	mov	r2, r3
   1dbdc:	b	1dc7c <ReadCompressedDataSlabN+0x548>
   1dbe0:	vmov.i32	q9, #1	; 0x00000001
   1dbe4:	vmov.i32	q10, #1	; 0x00000001
   1dbe8:	vmov.i32	q8, #1	; 0x00000001
   1dbec:	bic	r0, lr, #3
   1dbf0:	bic	ip, r3, #3
   1dbf4:	vmov.32	d23[1], r5
   1dbf8:	vmov.32	d18[0], r6
   1dbfc:	vmov.32	d20[0], r1
   1dc00:	sub	r2, r3, r0
   1dc04:	mov	r1, sl
   1dc08:	str	r0, [sp, #40]	; 0x28
   1dc0c:	vorr	d16, d18, d18
   1dc10:	vmov.i32	q9, #1	; 0x00000001
   1dc14:	vorr	d18, d20, d20
   1dc18:	vld1.32	{d20-d21}, [r1], r9
   1dc1c:	subs	ip, ip, #4
   1dc20:	vrev64.32	q12, q10
   1dc24:	vext.8	q12, q12, q12, #8
   1dc28:	vext.8	q11, q11, q12, #12
   1dc2c:	vmul.i32	q9, q9, q12
   1dc30:	vmul.i32	q8, q11, q8
   1dc34:	vorr	q11, q12, q12
   1dc38:	bne	1dc18 <ReadCompressedDataSlabN+0x4e4>
   1dc3c:	mov	r0, r5
   1dc40:	ldr	r5, [sp, #40]	; 0x28
   1dc44:	vext.8	q11, q9, q8, #8
   1dc48:	vext.8	q12, q8, q8, #8
   1dc4c:	vmul.i32	q0, q9, q11
   1dc50:	vmul.i32	q1, q8, q12
   1dc54:	vmul.i32	q8, q0, d0[1]
   1dc58:	vmul.i32	q9, q1, d2[1]
   1dc5c:	vmov.32	r1, d16[0]
   1dc60:	vmov.32	r6, d18[0]
   1dc64:	cmp	lr, r5
   1dc68:	bne	1dc74 <ReadCompressedDataSlabN+0x540>
   1dc6c:	add	ip, sp, #104	; 0x68
   1dc70:	b	1dc90 <ReadCompressedDataSlabN+0x55c>
   1dc74:	vmov.32	r5, d20[0]
   1dc78:	add	ip, sp, #104	; 0x68
   1dc7c:	mul	r6, r5, r6
   1dc80:	ldr	r5, [r4, r2, lsl #2]
   1dc84:	subs	r2, r2, #1
   1dc88:	mul	r1, r1, r5
   1dc8c:	bne	1dc7c <ReadCompressedDataSlabN+0x548>
   1dc90:	sub	r2, fp, #72	; 0x48
   1dc94:	str	r6, [ip, r3, lsl #2]
   1dc98:	ldr	r5, [sp, #24]
   1dc9c:	add	sl, sl, #4
   1dca0:	str	r1, [r2, r3, lsl #2]
   1dca4:	ldr	r1, [fp, #20]
   1dca8:	ldr	r1, [r1, r3, lsl #2]
   1dcac:	mla	r7, r1, r8, r7
   1dcb0:	ldr	r1, [fp, #28]
   1dcb4:	mov	r8, r6
   1dcb8:	mov	r6, r0
   1dcbc:	ldr	r1, [r1, r3, lsl #2]
   1dcc0:	add	r3, r3, #1
   1dcc4:	mul	r5, r1, r5
   1dcc8:	ldr	r1, [fp, #12]
   1dccc:	str	r5, [sp, #24]
   1dcd0:	cmp	r3, r1
   1dcd4:	bne	1dbac <ReadCompressedDataSlabN+0x478>
   1dcd8:	ldr	r0, [sp, #44]	; 0x2c
   1dcdc:	ldr	r2, [fp, #8]
   1dce0:	add	r1, sp, #48	; 0x30
   1dce4:	mov	r3, r7
   1dce8:	bl	2768 <InflateSkipData>
   1dcec:	ldr	r0, [fp, #24]
   1dcf0:	ldr	r0, [r0]
   1dcf4:	cmp	r0, #1
   1dcf8:	bne	1f0a0 <ReadCompressedDataSlabN+0x196c>
   1dcfc:	ldr	r0, [sp, #24]
   1dd00:	sub	r1, fp, #72	; 0x48
   1dd04:	cmp	r0, #1
   1dd08:	blt	21d30 <ReadCompressedDataSlabN+0x45fc>
   1dd0c:	ldr	r0, [fp, #20]
   1dd10:	add	r6, r0, #4
   1dd14:	ldr	r0, [fp, #28]
   1dd18:	add	r0, r0, #4
   1dd1c:	str	r0, [sp, #40]	; 0x28
   1dd20:	sub	r0, fp, #112	; 0x70
   1dd24:	orr	r8, r0, #4
   1dd28:	orr	r0, r1, #4
   1dd2c:	add	r1, sp, #48	; 0x30
   1dd30:	str	r0, [sp, #28]
   1dd34:	mov	r0, #0
   1dd38:	str	r0, [sp, #32]
   1dd3c:	ldr	sl, [fp, #20]
   1dd40:	ldr	r3, [sl]
   1dd44:	cmp	r3, #0
   1dd48:	beq	1dd70 <ReadCompressedDataSlabN+0x63c>
   1dd4c:	ldr	r9, [sp, #44]	; 0x2c
   1dd50:	ldr	r4, [fp, #8]
   1dd54:	mov	r5, r1
   1dd58:	mov	r0, r9
   1dd5c:	mov	r2, r4
   1dd60:	bl	2768 <InflateSkipData>
   1dd64:	ldr	r0, [sl]
   1dd68:	add	r7, r0, r7
   1dd6c:	b	1dd7c <ReadCompressedDataSlabN+0x648>
   1dd70:	ldr	r9, [sp, #44]	; 0x2c
   1dd74:	ldr	r4, [fp, #8]
   1dd78:	mov	r5, r1
   1dd7c:	ldr	r0, [fp, #28]
   1dd80:	ldr	r1, [sp, #32]
   1dd84:	mov	r3, r4
   1dd88:	ldr	r0, [r0]
   1dd8c:	str	r0, [sp]
   1dd90:	ldr	r0, [sp, #36]	; 0x24
   1dd94:	add	r2, r0, r1
   1dd98:	mov	r0, r9
   1dd9c:	mov	r1, r5
   1dda0:	bl	1717c <ReadCompressedInt8Data>
   1dda4:	ldr	r1, [fp, #16]
   1dda8:	ldr	r0, [sl]
   1ddac:	mov	r2, r4
   1ddb0:	ldr	r1, [r1]
   1ddb4:	sub	r0, r1, r0
   1ddb8:	ldr	r1, [fp, #28]
   1ddbc:	ldr	r1, [r1]
   1ddc0:	sub	r3, r0, r1
   1ddc4:	mov	r0, r9
   1ddc8:	mov	r1, r5
   1ddcc:	bl	2768 <InflateSkipData>
   1ddd0:	ldr	r0, [fp, #16]
   1ddd4:	ldr	r1, [sl]
   1ddd8:	ldr	r0, [r0]
   1dddc:	add	r0, r0, r7
   1dde0:	sub	r7, r0, r1
   1dde4:	ldr	r0, [fp, #12]
   1dde8:	cmp	r0, #2
   1ddec:	blt	1df00 <ReadCompressedDataSlabN+0x7cc>
   1ddf0:	mov	r0, #0
   1ddf4:	add	r3, sp, #104	; 0x68
   1ddf8:	mov	r4, r0
   1ddfc:	ldr	r0, [r8, r0, lsl #2]
   1de00:	ldr	r1, [sp, #40]	; 0x28
   1de04:	add	r0, r0, #1
   1de08:	str	r0, [r8, r4, lsl #2]
   1de0c:	ldr	r1, [r1, r4, lsl #2]
   1de10:	sdiv	r2, r0, r1
   1de14:	mls	r0, r2, r1, r0
   1de18:	cmp	r0, #0
   1de1c:	bne	1ded8 <ReadCompressedDataSlabN+0x7a4>
   1de20:	mov	r0, #0
   1de24:	add	r5, r3, r4, lsl #2
   1de28:	str	r0, [r8, r4, lsl #2]
   1de2c:	ldr	r0, [r5, #4]
   1de30:	sdiv	r1, r7, r0
   1de34:	mls	r1, r1, r0, r7
   1de38:	cmp	r1, #0
   1de3c:	beq	1de8c <ReadCompressedDataSlabN+0x758>
   1de40:	ldr	r2, [r3, r4, lsl #2]
   1de44:	ldr	r3, [r6, r4, lsl #2]
   1de48:	sub	r0, r0, r1
   1de4c:	add	r1, sp, #48	; 0x30
   1de50:	mla	r3, r3, r2, r0
   1de54:	ldr	r2, [fp, #8]
   1de58:	mov	r0, r9
   1de5c:	bl	2768 <InflateSkipData>
   1de60:	ldr	r0, [r5, #4]
   1de64:	add	r3, sp, #104	; 0x68
   1de68:	sdiv	r2, r7, r0
   1de6c:	add	r1, r0, r7
   1de70:	mul	r0, r2, r0
   1de74:	ldr	r2, [r6, r4, lsl #2]
   1de78:	sub	r0, r0, r7
   1de7c:	add	r0, r1, r0
   1de80:	ldr	r1, [r3, r4, lsl #2]
   1de84:	mla	r7, r2, r1, r0
   1de88:	b	1dec0 <ReadCompressedDataSlabN+0x78c>
   1de8c:	ldr	r0, [r6, r4, lsl #2]
   1de90:	cmp	r0, #0
   1de94:	beq	1dec0 <ReadCompressedDataSlabN+0x78c>
   1de98:	ldr	r1, [r3, r4, lsl #2]
   1de9c:	ldr	r2, [fp, #8]
   1dea0:	mul	r3, r1, r0
   1dea4:	mov	r0, r9
   1dea8:	add	r1, sp, #48	; 0x30
   1deac:	bl	2768 <InflateSkipData>
   1deb0:	add	r3, sp, #104	; 0x68
   1deb4:	ldr	r1, [r6, r4, lsl #2]
   1deb8:	ldr	r0, [r3, r4, lsl #2]
   1debc:	mla	r7, r1, r0, r7
   1dec0:	ldr	r2, [fp, #12]
   1dec4:	add	r1, r4, #2
   1dec8:	add	r0, r4, #1
   1decc:	cmp	r1, r2
   1ded0:	blt	1ddf8 <ReadCompressedDataSlabN+0x6c4>
   1ded4:	b	1df00 <ReadCompressedDataSlabN+0x7cc>
   1ded8:	ldr	r0, [sp, #28]
   1dedc:	ldr	r4, [r0, r4, lsl #2]
   1dee0:	cmp	r4, #0
   1dee4:	beq	1df00 <ReadCompressedDataSlabN+0x7cc>
   1dee8:	ldr	r2, [fp, #8]
   1deec:	mov	r0, r9
   1def0:	add	r1, sp, #48	; 0x30
   1def4:	mov	r3, r4
   1def8:	bl	2768 <InflateSkipData>
   1defc:	add	r7, r4, r7
   1df00:	ldr	r0, [fp, #28]
   1df04:	ldr	r1, [sp, #32]
   1df08:	ldr	r0, [r0]
   1df0c:	add	r1, r0, r1
   1df10:	ldr	r0, [sp, #24]
   1df14:	str	r1, [sp, #32]
   1df18:	cmp	r1, r0
   1df1c:	add	r1, sp, #48	; 0x30
   1df20:	blt	1dd3c <ReadCompressedDataSlabN+0x608>
   1df24:	b	21d30 <ReadCompressedDataSlabN+0x45fc>
   1df28:	ldr	r0, [r5]
   1df2c:	mov	r7, #0
   1df30:	sub	r0, r0, #1
   1df34:	str	r0, [fp, #-72]	; 0xffffffb8
   1df38:	ldr	r0, [fp, #28]
   1df3c:	ldr	r8, [r2]
   1df40:	str	r8, [sp, #104]	; 0x68
   1df44:	ldr	r0, [r0]
   1df48:	str	r0, [sp, #24]
   1df4c:	ldr	r0, [fp, #12]
   1df50:	cmp	r0, #2
   1df54:	blt	1e0a4 <ReadCompressedDataSlabN+0x970>
   1df58:	sub	r4, r2, #4
   1df5c:	sub	sl, r2, #12
   1df60:	mov	r3, #1
   1df64:	mov	lr, #0
   1df68:	sub	r2, fp, #72	; 0x48
   1df6c:	mvn	r9, #15
   1df70:	mov	r6, r8
   1df74:	mov	r7, #0
   1df78:	ldr	r1, [fp, #24]
   1df7c:	add	lr, lr, #1
   1df80:	cmp	lr, #4
   1df84:	ldr	r1, [r1, r3, lsl #2]
   1df88:	str	r6, [ip, r3, lsl #2]
   1df8c:	sub	r1, r1, #1
   1df90:	str	r1, [r2, r3, lsl #2]
   1df94:	ldr	r2, [fp, #16]
   1df98:	ldr	r5, [r2, r3, lsl #2]
   1df9c:	bcs	1dfac <ReadCompressedDataSlabN+0x878>
   1dfa0:	mov	r0, r5
   1dfa4:	mov	r2, r3
   1dfa8:	b	1e048 <ReadCompressedDataSlabN+0x914>
   1dfac:	vmov.i32	q9, #1	; 0x00000001
   1dfb0:	vmov.i32	q10, #1	; 0x00000001
   1dfb4:	vmov.i32	q8, #1	; 0x00000001
   1dfb8:	bic	r0, lr, #3
   1dfbc:	bic	ip, r3, #3
   1dfc0:	vmov.32	d23[1], r5
   1dfc4:	vmov.32	d18[0], r6
   1dfc8:	vmov.32	d20[0], r1
   1dfcc:	sub	r2, r3, r0
   1dfd0:	mov	r1, sl
   1dfd4:	str	r0, [sp, #40]	; 0x28
   1dfd8:	vorr	d16, d18, d18
   1dfdc:	vmov.i32	q9, #1	; 0x00000001
   1dfe0:	vorr	d18, d20, d20
   1dfe4:	vld1.32	{d20-d21}, [r1], r9
   1dfe8:	subs	ip, ip, #4
   1dfec:	vrev64.32	q12, q10
   1dff0:	vext.8	q12, q12, q12, #8
   1dff4:	vext.8	q11, q11, q12, #12
   1dff8:	vmul.i32	q9, q9, q12
   1dffc:	vmul.i32	q8, q11, q8
   1e000:	vorr	q11, q12, q12
   1e004:	bne	1dfe4 <ReadCompressedDataSlabN+0x8b0>
   1e008:	mov	r0, r5
   1e00c:	ldr	r5, [sp, #40]	; 0x28
   1e010:	vext.8	q11, q9, q8, #8
   1e014:	vext.8	q12, q8, q8, #8
   1e018:	vmul.i32	q0, q9, q11
   1e01c:	vmul.i32	q1, q8, q12
   1e020:	vmul.i32	q8, q0, d0[1]
   1e024:	vmul.i32	q9, q1, d2[1]
   1e028:	vmov.32	r1, d16[0]
   1e02c:	vmov.32	r6, d18[0]
   1e030:	cmp	lr, r5
   1e034:	bne	1e040 <ReadCompressedDataSlabN+0x90c>
   1e038:	add	ip, sp, #104	; 0x68
   1e03c:	b	1e05c <ReadCompressedDataSlabN+0x928>
   1e040:	vmov.32	r5, d20[0]
   1e044:	add	ip, sp, #104	; 0x68
   1e048:	mul	r6, r5, r6
   1e04c:	ldr	r5, [r4, r2, lsl #2]
   1e050:	subs	r2, r2, #1
   1e054:	mul	r1, r1, r5
   1e058:	bne	1e048 <ReadCompressedDataSlabN+0x914>
   1e05c:	sub	r2, fp, #72	; 0x48
   1e060:	str	r6, [ip, r3, lsl #2]
   1e064:	ldr	r5, [sp, #24]
   1e068:	add	sl, sl, #4
   1e06c:	str	r1, [r2, r3, lsl #2]
   1e070:	ldr	r1, [fp, #20]
   1e074:	ldr	r1, [r1, r3, lsl #2]
   1e078:	mla	r7, r1, r8, r7
   1e07c:	ldr	r1, [fp, #28]
   1e080:	mov	r8, r6
   1e084:	mov	r6, r0
   1e088:	ldr	r1, [r1, r3, lsl #2]
   1e08c:	add	r3, r3, #1
   1e090:	mul	r5, r1, r5
   1e094:	ldr	r1, [fp, #12]
   1e098:	str	r5, [sp, #24]
   1e09c:	cmp	r3, r1
   1e0a0:	bne	1df78 <ReadCompressedDataSlabN+0x844>
   1e0a4:	ldr	r0, [sp, #44]	; 0x2c
   1e0a8:	ldr	r2, [fp, #8]
   1e0ac:	add	r1, sp, #48	; 0x30
   1e0b0:	mov	r3, r7
   1e0b4:	bl	2768 <InflateSkipData>
   1e0b8:	ldr	r0, [fp, #24]
   1e0bc:	ldr	r0, [r0]
   1e0c0:	cmp	r0, #1
   1e0c4:	bne	1f3cc <ReadCompressedDataSlabN+0x1c98>
   1e0c8:	ldr	r0, [sp, #24]
   1e0cc:	sub	r1, fp, #72	; 0x48
   1e0d0:	cmp	r0, #1
   1e0d4:	blt	21d30 <ReadCompressedDataSlabN+0x45fc>
   1e0d8:	ldr	r0, [fp, #20]
   1e0dc:	add	r6, r0, #4
   1e0e0:	ldr	r0, [fp, #28]
   1e0e4:	add	r0, r0, #4
   1e0e8:	str	r0, [sp, #40]	; 0x28
   1e0ec:	sub	r0, fp, #112	; 0x70
   1e0f0:	orr	r8, r0, #4
   1e0f4:	orr	r0, r1, #4
   1e0f8:	add	r1, sp, #48	; 0x30
   1e0fc:	str	r0, [sp, #28]
   1e100:	mov	r0, #0
   1e104:	str	r0, [sp, #32]
   1e108:	ldr	sl, [fp, #20]
   1e10c:	ldr	r3, [sl]
   1e110:	cmp	r3, #0
   1e114:	beq	1e13c <ReadCompressedDataSlabN+0xa08>
   1e118:	ldr	r9, [sp, #44]	; 0x2c
   1e11c:	ldr	r4, [fp, #8]
   1e120:	mov	r5, r1
   1e124:	mov	r0, r9
   1e128:	mov	r2, r4
   1e12c:	bl	2768 <InflateSkipData>
   1e130:	ldr	r0, [sl]
   1e134:	add	r7, r0, r7
   1e138:	b	1e148 <ReadCompressedDataSlabN+0xa14>
   1e13c:	ldr	r9, [sp, #44]	; 0x2c
   1e140:	ldr	r4, [fp, #8]
   1e144:	mov	r5, r1
   1e148:	ldr	r0, [fp, #28]
   1e14c:	ldr	r1, [sp, #32]
   1e150:	mov	r3, r4
   1e154:	ldr	r0, [r0]
   1e158:	str	r0, [sp]
   1e15c:	ldr	r0, [sp, #36]	; 0x24
   1e160:	add	r2, r0, r1
   1e164:	mov	r0, r9
   1e168:	mov	r1, r5
   1e16c:	bl	18fb4 <ReadCompressedUInt8Data>
   1e170:	ldr	r1, [fp, #16]
   1e174:	ldr	r0, [sl]
   1e178:	mov	r2, r4
   1e17c:	ldr	r1, [r1]
   1e180:	sub	r0, r1, r0
   1e184:	ldr	r1, [fp, #28]
   1e188:	ldr	r1, [r1]
   1e18c:	sub	r3, r0, r1
   1e190:	mov	r0, r9
   1e194:	mov	r1, r5
   1e198:	bl	2768 <InflateSkipData>
   1e19c:	ldr	r0, [fp, #16]
   1e1a0:	ldr	r1, [sl]
   1e1a4:	ldr	r0, [r0]
   1e1a8:	add	r0, r0, r7
   1e1ac:	sub	r7, r0, r1
   1e1b0:	ldr	r0, [fp, #12]
   1e1b4:	cmp	r0, #2
   1e1b8:	blt	1e2cc <ReadCompressedDataSlabN+0xb98>
   1e1bc:	mov	r0, #0
   1e1c0:	add	r3, sp, #104	; 0x68
   1e1c4:	mov	r4, r0
   1e1c8:	ldr	r0, [r8, r0, lsl #2]
   1e1cc:	ldr	r1, [sp, #40]	; 0x28
   1e1d0:	add	r0, r0, #1
   1e1d4:	str	r0, [r8, r4, lsl #2]
   1e1d8:	ldr	r1, [r1, r4, lsl #2]
   1e1dc:	sdiv	r2, r0, r1
   1e1e0:	mls	r0, r2, r1, r0
   1e1e4:	cmp	r0, #0
   1e1e8:	bne	1e2a4 <ReadCompressedDataSlabN+0xb70>
   1e1ec:	mov	r0, #0
   1e1f0:	add	r5, r3, r4, lsl #2
   1e1f4:	str	r0, [r8, r4, lsl #2]
   1e1f8:	ldr	r0, [r5, #4]
   1e1fc:	sdiv	r1, r7, r0
   1e200:	mls	r1, r1, r0, r7
   1e204:	cmp	r1, #0
   1e208:	beq	1e258 <ReadCompressedDataSlabN+0xb24>
   1e20c:	ldr	r2, [r3, r4, lsl #2]
   1e210:	ldr	r3, [r6, r4, lsl #2]
   1e214:	sub	r0, r0, r1
   1e218:	add	r1, sp, #48	; 0x30
   1e21c:	mla	r3, r3, r2, r0
   1e220:	ldr	r2, [fp, #8]
   1e224:	mov	r0, r9
   1e228:	bl	2768 <InflateSkipData>
   1e22c:	ldr	r0, [r5, #4]
   1e230:	add	r3, sp, #104	; 0x68
   1e234:	sdiv	r2, r7, r0
   1e238:	add	r1, r0, r7
   1e23c:	mul	r0, r2, r0
   1e240:	ldr	r2, [r6, r4, lsl #2]
   1e244:	sub	r0, r0, r7
   1e248:	add	r0, r1, r0
   1e24c:	ldr	r1, [r3, r4, lsl #2]
   1e250:	mla	r7, r2, r1, r0
   1e254:	b	1e28c <ReadCompressedDataSlabN+0xb58>
   1e258:	ldr	r0, [r6, r4, lsl #2]
   1e25c:	cmp	r0, #0
   1e260:	beq	1e28c <ReadCompressedDataSlabN+0xb58>
   1e264:	ldr	r1, [r3, r4, lsl #2]
   1e268:	ldr	r2, [fp, #8]
   1e26c:	mul	r3, r1, r0
   1e270:	mov	r0, r9
   1e274:	add	r1, sp, #48	; 0x30
   1e278:	bl	2768 <InflateSkipData>
   1e27c:	add	r3, sp, #104	; 0x68
   1e280:	ldr	r1, [r6, r4, lsl #2]
   1e284:	ldr	r0, [r3, r4, lsl #2]
   1e288:	mla	r7, r1, r0, r7
   1e28c:	ldr	r2, [fp, #12]
   1e290:	add	r1, r4, #2
   1e294:	add	r0, r4, #1
   1e298:	cmp	r1, r2
   1e29c:	blt	1e1c4 <ReadCompressedDataSlabN+0xa90>
   1e2a0:	b	1e2cc <ReadCompressedDataSlabN+0xb98>
   1e2a4:	ldr	r0, [sp, #28]
   1e2a8:	ldr	r4, [r0, r4, lsl #2]
   1e2ac:	cmp	r4, #0
   1e2b0:	beq	1e2cc <ReadCompressedDataSlabN+0xb98>
   1e2b4:	ldr	r2, [fp, #8]
   1e2b8:	mov	r0, r9
   1e2bc:	add	r1, sp, #48	; 0x30
   1e2c0:	mov	r3, r4
   1e2c4:	bl	2768 <InflateSkipData>
   1e2c8:	add	r7, r4, r7
   1e2cc:	ldr	r0, [fp, #28]
   1e2d0:	ldr	r1, [sp, #32]
   1e2d4:	ldr	r0, [r0]
   1e2d8:	add	r1, r0, r1
   1e2dc:	ldr	r0, [sp, #24]
   1e2e0:	str	r1, [sp, #32]
   1e2e4:	cmp	r1, r0
   1e2e8:	add	r1, sp, #48	; 0x30
   1e2ec:	blt	1e108 <ReadCompressedDataSlabN+0x9d4>
   1e2f0:	b	21d30 <ReadCompressedDataSlabN+0x45fc>
   1e2f4:	ldr	r0, [r5]
   1e2f8:	sub	r0, r0, #1
   1e2fc:	str	r0, [fp, #-72]	; 0xffffffb8
   1e300:	ldr	r0, [fp, #28]
   1e304:	ldr	r8, [r2]
   1e308:	str	r8, [sp, #104]	; 0x68
   1e30c:	ldr	r0, [r0]
   1e310:	str	r0, [sp, #28]
   1e314:	ldr	r0, [fp, #12]
   1e318:	cmp	r0, #2
   1e31c:	blt	1f6f8 <ReadCompressedDataSlabN+0x1fc4>
   1e320:	sub	r9, fp, #72	; 0x48
   1e324:	sub	r4, r2, #4
   1e328:	sub	sl, r2, #12
   1e32c:	mov	r3, #1
   1e330:	mov	r0, #0
   1e334:	mvn	r7, #15
   1e338:	mov	r6, r8
   1e33c:	mov	lr, #0
   1e340:	mov	r5, r9
   1e344:	ldr	r1, [fp, #24]
   1e348:	ldr	r2, [fp, #16]
   1e34c:	add	r0, r0, #1
   1e350:	cmp	r0, #4
   1e354:	ldr	r1, [r1, r3, lsl #2]
   1e358:	str	r6, [ip, r3, lsl #2]
   1e35c:	sub	r1, r1, #1
   1e360:	str	r1, [r5, r3, lsl #2]
   1e364:	ldr	r5, [r2, r3, lsl #2]
   1e368:	bcs	1e378 <ReadCompressedDataSlabN+0xc44>
   1e36c:	mov	r9, r5
   1e370:	mov	r2, r3
   1e374:	b	1e414 <ReadCompressedDataSlabN+0xce0>
   1e378:	vmov.i32	q9, #1	; 0x00000001
   1e37c:	vmov.i32	q10, #1	; 0x00000001
   1e380:	vmov.i32	q8, #1	; 0x00000001
   1e384:	bic	ip, r3, #3
   1e388:	vmov.32	d23[1], r5
   1e38c:	vmov.32	d18[0], r6
   1e390:	vmov.32	d20[0], r1
   1e394:	bic	r1, r0, #3
   1e398:	vorr	d16, d18, d18
   1e39c:	vmov.i32	q9, #1	; 0x00000001
   1e3a0:	str	r1, [sp, #40]	; 0x28
   1e3a4:	sub	r2, r3, r1
   1e3a8:	mov	r1, sl
   1e3ac:	vorr	d18, d20, d20
   1e3b0:	vld1.32	{d20-d21}, [r1], r7
   1e3b4:	subs	ip, ip, #4
   1e3b8:	vrev64.32	q12, q10
   1e3bc:	vext.8	q12, q12, q12, #8
   1e3c0:	vext.8	q11, q11, q12, #12
   1e3c4:	vmul.i32	q9, q9, q12
   1e3c8:	vmul.i32	q8, q11, q8
   1e3cc:	vorr	q11, q12, q12
   1e3d0:	bne	1e3b0 <ReadCompressedDataSlabN+0xc7c>
   1e3d4:	mov	r9, r5
   1e3d8:	ldr	r5, [sp, #40]	; 0x28
   1e3dc:	vext.8	q11, q9, q8, #8
   1e3e0:	vext.8	q12, q8, q8, #8
   1e3e4:	vmul.i32	q0, q9, q11
   1e3e8:	vmul.i32	q1, q8, q12
   1e3ec:	vmul.i32	q8, q0, d0[1]
   1e3f0:	vmul.i32	q9, q1, d2[1]
   1e3f4:	vmov.32	r1, d16[0]
   1e3f8:	vmov.32	r6, d18[0]
   1e3fc:	cmp	r0, r5
   1e400:	bne	1e40c <ReadCompressedDataSlabN+0xcd8>
   1e404:	add	ip, sp, #104	; 0x68
   1e408:	b	1e428 <ReadCompressedDataSlabN+0xcf4>
   1e40c:	vmov.32	r5, d20[0]
   1e410:	add	ip, sp, #104	; 0x68
   1e414:	mul	r6, r5, r6
   1e418:	ldr	r5, [r4, r2, lsl #2]
   1e41c:	subs	r2, r2, #1
   1e420:	mul	r1, r1, r5
   1e424:	bne	1e414 <ReadCompressedDataSlabN+0xce0>
   1e428:	sub	r5, fp, #72	; 0x48
   1e42c:	str	r6, [ip, r3, lsl #2]
   1e430:	ldr	r2, [sp, #28]
   1e434:	add	sl, sl, #4
   1e438:	str	r1, [r5, r3, lsl #2]
   1e43c:	ldr	r1, [fp, #20]
   1e440:	ldr	r1, [r1, r3, lsl #2]
   1e444:	mla	lr, r1, r8, lr
   1e448:	ldr	r1, [fp, #28]
   1e44c:	mov	r8, r6
   1e450:	mov	r6, r9
   1e454:	ldr	r1, [r1, r3, lsl #2]
   1e458:	add	r3, r3, #1
   1e45c:	mul	r2, r1, r2
   1e460:	ldr	r1, [fp, #12]
   1e464:	str	r2, [sp, #28]
   1e468:	cmp	r3, r1
   1e46c:	bne	1e344 <ReadCompressedDataSlabN+0xc10>
   1e470:	b	1f6fc <ReadCompressedDataSlabN+0x1fc8>
   1e474:	ldr	r0, [r5]
   1e478:	sub	r0, r0, #1
   1e47c:	str	r0, [fp, #-72]	; 0xffffffb8
   1e480:	ldr	r0, [fp, #28]
   1e484:	ldr	r8, [r2]
   1e488:	str	r8, [sp, #104]	; 0x68
   1e48c:	ldr	r0, [r0]
   1e490:	str	r0, [sp, #28]
   1e494:	ldr	r0, [fp, #12]
   1e498:	cmp	r0, #2
   1e49c:	blt	1f958 <ReadCompressedDataSlabN+0x2224>
   1e4a0:	sub	r9, fp, #72	; 0x48
   1e4a4:	sub	r4, r2, #4
   1e4a8:	sub	sl, r2, #12
   1e4ac:	mov	r3, #1
   1e4b0:	mov	r0, #0
   1e4b4:	mvn	r7, #15
   1e4b8:	mov	r6, r8
   1e4bc:	mov	lr, #0
   1e4c0:	mov	r5, r9
   1e4c4:	ldr	r1, [fp, #24]
   1e4c8:	ldr	r2, [fp, #16]
   1e4cc:	add	r0, r0, #1
   1e4d0:	cmp	r0, #4
   1e4d4:	ldr	r1, [r1, r3, lsl #2]
   1e4d8:	str	r6, [ip, r3, lsl #2]
   1e4dc:	sub	r1, r1, #1
   1e4e0:	str	r1, [r5, r3, lsl #2]
   1e4e4:	ldr	r5, [r2, r3, lsl #2]
   1e4e8:	bcs	1e4f8 <ReadCompressedDataSlabN+0xdc4>
   1e4ec:	mov	r9, r5
   1e4f0:	mov	r2, r3
   1e4f4:	b	1e594 <ReadCompressedDataSlabN+0xe60>
   1e4f8:	vmov.i32	q9, #1	; 0x00000001
   1e4fc:	vmov.i32	q10, #1	; 0x00000001
   1e500:	vmov.i32	q8, #1	; 0x00000001
   1e504:	bic	ip, r3, #3
   1e508:	vmov.32	d23[1], r5
   1e50c:	vmov.32	d18[0], r6
   1e510:	vmov.32	d20[0], r1
   1e514:	bic	r1, r0, #3
   1e518:	vorr	d16, d18, d18
   1e51c:	vmov.i32	q9, #1	; 0x00000001
   1e520:	str	r1, [sp, #40]	; 0x28
   1e524:	sub	r2, r3, r1
   1e528:	mov	r1, sl
   1e52c:	vorr	d18, d20, d20
   1e530:	vld1.32	{d20-d21}, [r1], r7
   1e534:	subs	ip, ip, #4
   1e538:	vrev64.32	q12, q10
   1e53c:	vext.8	q12, q12, q12, #8
   1e540:	vext.8	q11, q11, q12, #12
   1e544:	vmul.i32	q9, q9, q12
   1e548:	vmul.i32	q8, q11, q8
   1e54c:	vorr	q11, q12, q12
   1e550:	bne	1e530 <ReadCompressedDataSlabN+0xdfc>
   1e554:	mov	r9, r5
   1e558:	ldr	r5, [sp, #40]	; 0x28
   1e55c:	vext.8	q11, q9, q8, #8
   1e560:	vext.8	q12, q8, q8, #8
   1e564:	vmul.i32	q0, q9, q11
   1e568:	vmul.i32	q1, q8, q12
   1e56c:	vmul.i32	q8, q0, d0[1]
   1e570:	vmul.i32	q9, q1, d2[1]
   1e574:	vmov.32	r1, d16[0]
   1e578:	vmov.32	r6, d18[0]
   1e57c:	cmp	r0, r5
   1e580:	bne	1e58c <ReadCompressedDataSlabN+0xe58>
   1e584:	add	ip, sp, #104	; 0x68
   1e588:	b	1e5a8 <ReadCompressedDataSlabN+0xe74>
   1e58c:	vmov.32	r5, d20[0]
   1e590:	add	ip, sp, #104	; 0x68
   1e594:	mul	r6, r5, r6
   1e598:	ldr	r5, [r4, r2, lsl #2]
   1e59c:	subs	r2, r2, #1
   1e5a0:	mul	r1, r1, r5
   1e5a4:	bne	1e594 <ReadCompressedDataSlabN+0xe60>
   1e5a8:	sub	r5, fp, #72	; 0x48
   1e5ac:	str	r6, [ip, r3, lsl #2]
   1e5b0:	ldr	r2, [sp, #28]
   1e5b4:	add	sl, sl, #4
   1e5b8:	str	r1, [r5, r3, lsl #2]
   1e5bc:	ldr	r1, [fp, #20]
   1e5c0:	ldr	r1, [r1, r3, lsl #2]
   1e5c4:	mla	lr, r1, r8, lr
   1e5c8:	ldr	r1, [fp, #28]
   1e5cc:	mov	r8, r6
   1e5d0:	mov	r6, r9
   1e5d4:	ldr	r1, [r1, r3, lsl #2]
   1e5d8:	add	r3, r3, #1
   1e5dc:	mul	r2, r1, r2
   1e5e0:	ldr	r1, [fp, #12]
   1e5e4:	str	r2, [sp, #28]
   1e5e8:	cmp	r3, r1
   1e5ec:	bne	1e4c4 <ReadCompressedDataSlabN+0xd90>
   1e5f0:	b	1f95c <ReadCompressedDataSlabN+0x2228>
   1e5f4:	ldr	r0, [r5]
   1e5f8:	sub	r0, r0, #1
   1e5fc:	str	r0, [fp, #-72]	; 0xffffffb8
   1e600:	ldr	r0, [fp, #28]
   1e604:	ldr	r8, [r2]
   1e608:	str	r8, [sp, #104]	; 0x68
   1e60c:	ldr	r0, [r0]
   1e610:	str	r0, [sp, #28]
   1e614:	ldr	r0, [fp, #12]
   1e618:	cmp	r0, #2
   1e61c:	blt	1fbb8 <ReadCompressedDataSlabN+0x2484>
   1e620:	sub	r9, fp, #72	; 0x48
   1e624:	sub	r4, r2, #4
   1e628:	sub	sl, r2, #12
   1e62c:	mov	r3, #1
   1e630:	mov	r0, #0
   1e634:	mvn	r7, #15
   1e638:	mov	r6, r8
   1e63c:	mov	lr, #0
   1e640:	mov	r5, r9
   1e644:	ldr	r1, [fp, #24]
   1e648:	ldr	r2, [fp, #16]
   1e64c:	add	r0, r0, #1
   1e650:	cmp	r0, #4
   1e654:	ldr	r1, [r1, r3, lsl #2]
   1e658:	str	r6, [ip, r3, lsl #2]
   1e65c:	sub	r1, r1, #1
   1e660:	str	r1, [r5, r3, lsl #2]
   1e664:	ldr	r5, [r2, r3, lsl #2]
   1e668:	bcs	1e678 <ReadCompressedDataSlabN+0xf44>
   1e66c:	mov	r9, r5
   1e670:	mov	r2, r3
   1e674:	b	1e714 <ReadCompressedDataSlabN+0xfe0>
   1e678:	vmov.i32	q9, #1	; 0x00000001
   1e67c:	vmov.i32	q10, #1	; 0x00000001
   1e680:	vmov.i32	q8, #1	; 0x00000001
   1e684:	bic	ip, r3, #3
   1e688:	vmov.32	d23[1], r5
   1e68c:	vmov.32	d18[0], r6
   1e690:	vmov.32	d20[0], r1
   1e694:	bic	r1, r0, #3
   1e698:	vorr	d16, d18, d18
   1e69c:	vmov.i32	q9, #1	; 0x00000001
   1e6a0:	str	r1, [sp, #40]	; 0x28
   1e6a4:	sub	r2, r3, r1
   1e6a8:	mov	r1, sl
   1e6ac:	vorr	d18, d20, d20
   1e6b0:	vld1.32	{d20-d21}, [r1], r7
   1e6b4:	subs	ip, ip, #4
   1e6b8:	vrev64.32	q12, q10
   1e6bc:	vext.8	q12, q12, q12, #8
   1e6c0:	vext.8	q11, q11, q12, #12
   1e6c4:	vmul.i32	q9, q9, q12
   1e6c8:	vmul.i32	q8, q11, q8
   1e6cc:	vorr	q11, q12, q12
   1e6d0:	bne	1e6b0 <ReadCompressedDataSlabN+0xf7c>
   1e6d4:	mov	r9, r5
   1e6d8:	ldr	r5, [sp, #40]	; 0x28
   1e6dc:	vext.8	q11, q9, q8, #8
   1e6e0:	vext.8	q12, q8, q8, #8
   1e6e4:	vmul.i32	q0, q9, q11
   1e6e8:	vmul.i32	q1, q8, q12
   1e6ec:	vmul.i32	q8, q0, d0[1]
   1e6f0:	vmul.i32	q9, q1, d2[1]
   1e6f4:	vmov.32	r1, d16[0]
   1e6f8:	vmov.32	r6, d18[0]
   1e6fc:	cmp	r0, r5
   1e700:	bne	1e70c <ReadCompressedDataSlabN+0xfd8>
   1e704:	add	ip, sp, #104	; 0x68
   1e708:	b	1e728 <ReadCompressedDataSlabN+0xff4>
   1e70c:	vmov.32	r5, d20[0]
   1e710:	add	ip, sp, #104	; 0x68
   1e714:	mul	r6, r5, r6
   1e718:	ldr	r5, [r4, r2, lsl #2]
   1e71c:	subs	r2, r2, #1
   1e720:	mul	r1, r1, r5
   1e724:	bne	1e714 <ReadCompressedDataSlabN+0xfe0>
   1e728:	sub	r5, fp, #72	; 0x48
   1e72c:	str	r6, [ip, r3, lsl #2]
   1e730:	ldr	r2, [sp, #28]
   1e734:	add	sl, sl, #4
   1e738:	str	r1, [r5, r3, lsl #2]
   1e73c:	ldr	r1, [fp, #20]
   1e740:	ldr	r1, [r1, r3, lsl #2]
   1e744:	mla	lr, r1, r8, lr
   1e748:	ldr	r1, [fp, #28]
   1e74c:	mov	r8, r6
   1e750:	mov	r6, r9
   1e754:	ldr	r1, [r1, r3, lsl #2]
   1e758:	add	r3, r3, #1
   1e75c:	mul	r2, r1, r2
   1e760:	ldr	r1, [fp, #12]
   1e764:	str	r2, [sp, #28]
   1e768:	cmp	r3, r1
   1e76c:	bne	1e644 <ReadCompressedDataSlabN+0xf10>
   1e770:	b	1fbbc <ReadCompressedDataSlabN+0x2488>
   1e774:	ldr	r0, [r5]
   1e778:	sub	r0, r0, #1
   1e77c:	str	r0, [fp, #-72]	; 0xffffffb8
   1e780:	ldr	r0, [fp, #28]
   1e784:	ldr	r8, [r2]
   1e788:	str	r8, [sp, #104]	; 0x68
   1e78c:	ldr	r0, [r0]
   1e790:	str	r0, [sp, #28]
   1e794:	ldr	r0, [fp, #12]
   1e798:	cmp	r0, #2
   1e79c:	blt	1fe18 <ReadCompressedDataSlabN+0x26e4>
   1e7a0:	sub	r9, fp, #72	; 0x48
   1e7a4:	sub	r4, r2, #4
   1e7a8:	sub	sl, r2, #12
   1e7ac:	mov	r3, #1
   1e7b0:	mov	r0, #0
   1e7b4:	mvn	r7, #15
   1e7b8:	mov	r6, r8
   1e7bc:	mov	lr, #0
   1e7c0:	mov	r5, r9
   1e7c4:	ldr	r1, [fp, #24]
   1e7c8:	ldr	r2, [fp, #16]
   1e7cc:	add	r0, r0, #1
   1e7d0:	cmp	r0, #4
   1e7d4:	ldr	r1, [r1, r3, lsl #2]
   1e7d8:	str	r6, [ip, r3, lsl #2]
   1e7dc:	sub	r1, r1, #1
   1e7e0:	str	r1, [r5, r3, lsl #2]
   1e7e4:	ldr	r5, [r2, r3, lsl #2]
   1e7e8:	bcs	1e7f8 <ReadCompressedDataSlabN+0x10c4>
   1e7ec:	mov	r9, r5
   1e7f0:	mov	r2, r3
   1e7f4:	b	1e894 <ReadCompressedDataSlabN+0x1160>
   1e7f8:	vmov.i32	q9, #1	; 0x00000001
   1e7fc:	vmov.i32	q10, #1	; 0x00000001
   1e800:	vmov.i32	q8, #1	; 0x00000001
   1e804:	bic	ip, r3, #3
   1e808:	vmov.32	d23[1], r5
   1e80c:	vmov.32	d18[0], r6
   1e810:	vmov.32	d20[0], r1
   1e814:	bic	r1, r0, #3
   1e818:	vorr	d16, d18, d18
   1e81c:	vmov.i32	q9, #1	; 0x00000001
   1e820:	str	r1, [sp, #40]	; 0x28
   1e824:	sub	r2, r3, r1
   1e828:	mov	r1, sl
   1e82c:	vorr	d18, d20, d20
   1e830:	vld1.32	{d20-d21}, [r1], r7
   1e834:	subs	ip, ip, #4
   1e838:	vrev64.32	q12, q10
   1e83c:	vext.8	q12, q12, q12, #8
   1e840:	vext.8	q11, q11, q12, #12
   1e844:	vmul.i32	q9, q9, q12
   1e848:	vmul.i32	q8, q11, q8
   1e84c:	vorr	q11, q12, q12
   1e850:	bne	1e830 <ReadCompressedDataSlabN+0x10fc>
   1e854:	mov	r9, r5
   1e858:	ldr	r5, [sp, #40]	; 0x28
   1e85c:	vext.8	q11, q9, q8, #8
   1e860:	vext.8	q12, q8, q8, #8
   1e864:	vmul.i32	q0, q9, q11
   1e868:	vmul.i32	q1, q8, q12
   1e86c:	vmul.i32	q8, q0, d0[1]
   1e870:	vmul.i32	q9, q1, d2[1]
   1e874:	vmov.32	r1, d16[0]
   1e878:	vmov.32	r6, d18[0]
   1e87c:	cmp	r0, r5
   1e880:	bne	1e88c <ReadCompressedDataSlabN+0x1158>
   1e884:	add	ip, sp, #104	; 0x68
   1e888:	b	1e8a8 <ReadCompressedDataSlabN+0x1174>
   1e88c:	vmov.32	r5, d20[0]
   1e890:	add	ip, sp, #104	; 0x68
   1e894:	mul	r6, r5, r6
   1e898:	ldr	r5, [r4, r2, lsl #2]
   1e89c:	subs	r2, r2, #1
   1e8a0:	mul	r1, r1, r5
   1e8a4:	bne	1e894 <ReadCompressedDataSlabN+0x1160>
   1e8a8:	sub	r5, fp, #72	; 0x48
   1e8ac:	str	r6, [ip, r3, lsl #2]
   1e8b0:	ldr	r2, [sp, #28]
   1e8b4:	add	sl, sl, #4
   1e8b8:	str	r1, [r5, r3, lsl #2]
   1e8bc:	ldr	r1, [fp, #20]
   1e8c0:	ldr	r1, [r1, r3, lsl #2]
   1e8c4:	mla	lr, r1, r8, lr
   1e8c8:	ldr	r1, [fp, #28]
   1e8cc:	mov	r8, r6
   1e8d0:	mov	r6, r9
   1e8d4:	ldr	r1, [r1, r3, lsl #2]
   1e8d8:	add	r3, r3, #1
   1e8dc:	mul	r2, r1, r2
   1e8e0:	ldr	r1, [fp, #12]
   1e8e4:	str	r2, [sp, #28]
   1e8e8:	cmp	r3, r1
   1e8ec:	bne	1e7c4 <ReadCompressedDataSlabN+0x1090>
   1e8f0:	b	1fe1c <ReadCompressedDataSlabN+0x26e8>
   1e8f4:	ldr	r0, [r5]
   1e8f8:	sub	r0, r0, #1
   1e8fc:	str	r0, [fp, #-72]	; 0xffffffb8
   1e900:	ldr	r0, [fp, #28]
   1e904:	ldr	r8, [r2]
   1e908:	str	r8, [sp, #104]	; 0x68
   1e90c:	ldr	r0, [r0]
   1e910:	str	r0, [sp, #24]
   1e914:	ldr	r0, [fp, #12]
   1e918:	cmp	r0, #2
   1e91c:	blt	20078 <ReadCompressedDataSlabN+0x2944>
   1e920:	sub	r9, fp, #72	; 0x48
   1e924:	sub	r4, r2, #4
   1e928:	sub	sl, r2, #12
   1e92c:	mov	r3, #1
   1e930:	mov	r0, #0
   1e934:	mvn	r7, #15
   1e938:	mov	r6, r8
   1e93c:	mov	lr, #0
   1e940:	mov	r5, r9
   1e944:	ldr	r1, [fp, #24]
   1e948:	ldr	r2, [fp, #16]
   1e94c:	add	r0, r0, #1
   1e950:	cmp	r0, #4
   1e954:	ldr	r1, [r1, r3, lsl #2]
   1e958:	str	r6, [ip, r3, lsl #2]
   1e95c:	sub	r1, r1, #1
   1e960:	str	r1, [r5, r3, lsl #2]
   1e964:	ldr	r5, [r2, r3, lsl #2]
   1e968:	bcs	1e978 <ReadCompressedDataSlabN+0x1244>
   1e96c:	mov	r9, r5
   1e970:	mov	r2, r3
   1e974:	b	1ea14 <ReadCompressedDataSlabN+0x12e0>
   1e978:	vmov.i32	q9, #1	; 0x00000001
   1e97c:	vmov.i32	q10, #1	; 0x00000001
   1e980:	vmov.i32	q8, #1	; 0x00000001
   1e984:	bic	ip, r3, #3
   1e988:	vmov.32	d23[1], r5
   1e98c:	vmov.32	d18[0], r6
   1e990:	vmov.32	d20[0], r1
   1e994:	bic	r1, r0, #3
   1e998:	vorr	d16, d18, d18
   1e99c:	vmov.i32	q9, #1	; 0x00000001
   1e9a0:	str	r1, [sp, #40]	; 0x28
   1e9a4:	sub	r2, r3, r1
   1e9a8:	mov	r1, sl
   1e9ac:	vorr	d18, d20, d20
   1e9b0:	vld1.32	{d20-d21}, [r1], r7
   1e9b4:	subs	ip, ip, #4
   1e9b8:	vrev64.32	q12, q10
   1e9bc:	vext.8	q12, q12, q12, #8
   1e9c0:	vext.8	q11, q11, q12, #12
   1e9c4:	vmul.i32	q9, q9, q12
   1e9c8:	vmul.i32	q8, q11, q8
   1e9cc:	vorr	q11, q12, q12
   1e9d0:	bne	1e9b0 <ReadCompressedDataSlabN+0x127c>
   1e9d4:	mov	r9, r5
   1e9d8:	ldr	r5, [sp, #40]	; 0x28
   1e9dc:	vext.8	q11, q9, q8, #8
   1e9e0:	vext.8	q12, q8, q8, #8
   1e9e4:	vmul.i32	q0, q9, q11
   1e9e8:	vmul.i32	q1, q8, q12
   1e9ec:	vmul.i32	q8, q0, d0[1]
   1e9f0:	vmul.i32	q9, q1, d2[1]
   1e9f4:	vmov.32	r1, d16[0]
   1e9f8:	vmov.32	r6, d18[0]
   1e9fc:	cmp	r0, r5
   1ea00:	bne	1ea0c <ReadCompressedDataSlabN+0x12d8>
   1ea04:	add	ip, sp, #104	; 0x68
   1ea08:	b	1ea28 <ReadCompressedDataSlabN+0x12f4>
   1ea0c:	vmov.32	r5, d20[0]
   1ea10:	add	ip, sp, #104	; 0x68
   1ea14:	mul	r6, r5, r6
   1ea18:	ldr	r5, [r4, r2, lsl #2]
   1ea1c:	subs	r2, r2, #1
   1ea20:	mul	r1, r1, r5
   1ea24:	bne	1ea14 <ReadCompressedDataSlabN+0x12e0>
   1ea28:	sub	r5, fp, #72	; 0x48
   1ea2c:	str	r6, [ip, r3, lsl #2]
   1ea30:	ldr	r2, [sp, #24]
   1ea34:	add	sl, sl, #4
   1ea38:	str	r1, [r5, r3, lsl #2]
   1ea3c:	ldr	r1, [fp, #20]
   1ea40:	ldr	r1, [r1, r3, lsl #2]
   1ea44:	mla	lr, r1, r8, lr
   1ea48:	ldr	r1, [fp, #28]
   1ea4c:	mov	r8, r6
   1ea50:	mov	r6, r9
   1ea54:	ldr	r1, [r1, r3, lsl #2]
   1ea58:	add	r3, r3, #1
   1ea5c:	mul	r2, r1, r2
   1ea60:	ldr	r1, [fp, #12]
   1ea64:	str	r2, [sp, #24]
   1ea68:	cmp	r3, r1
   1ea6c:	bne	1e944 <ReadCompressedDataSlabN+0x1210>
   1ea70:	b	2007c <ReadCompressedDataSlabN+0x2948>
   1ea74:	ldr	r0, [r5]
   1ea78:	sub	r0, r0, #1
   1ea7c:	str	r0, [fp, #-72]	; 0xffffffb8
   1ea80:	ldr	r0, [fp, #28]
   1ea84:	ldr	r8, [r2]
   1ea88:	str	r8, [sp, #104]	; 0x68
   1ea8c:	ldr	r0, [r0]
   1ea90:	str	r0, [sp, #28]
   1ea94:	ldr	r0, [fp, #12]
   1ea98:	cmp	r0, #2
   1ea9c:	blt	202d8 <ReadCompressedDataSlabN+0x2ba4>
   1eaa0:	sub	r9, fp, #72	; 0x48
   1eaa4:	sub	r4, r2, #4
   1eaa8:	sub	sl, r2, #12
   1eaac:	mov	r3, #1
   1eab0:	mov	r0, #0
   1eab4:	mvn	r7, #15
   1eab8:	mov	r6, r8
   1eabc:	mov	lr, #0
   1eac0:	mov	r5, r9
   1eac4:	ldr	r1, [fp, #24]
   1eac8:	ldr	r2, [fp, #16]
   1eacc:	add	r0, r0, #1
   1ead0:	cmp	r0, #4
   1ead4:	ldr	r1, [r1, r3, lsl #2]
   1ead8:	str	r6, [ip, r3, lsl #2]
   1eadc:	sub	r1, r1, #1
   1eae0:	str	r1, [r5, r3, lsl #2]
   1eae4:	ldr	r5, [r2, r3, lsl #2]
   1eae8:	bcs	1eaf8 <ReadCompressedDataSlabN+0x13c4>
   1eaec:	mov	r9, r5
   1eaf0:	mov	r2, r3
   1eaf4:	b	1eb94 <ReadCompressedDataSlabN+0x1460>
   1eaf8:	vmov.i32	q9, #1	; 0x00000001
   1eafc:	vmov.i32	q10, #1	; 0x00000001
   1eb00:	vmov.i32	q8, #1	; 0x00000001
   1eb04:	bic	ip, r3, #3
   1eb08:	vmov.32	d23[1], r5
   1eb0c:	vmov.32	d18[0], r6
   1eb10:	vmov.32	d20[0], r1
   1eb14:	bic	r1, r0, #3
   1eb18:	vorr	d16, d18, d18
   1eb1c:	vmov.i32	q9, #1	; 0x00000001
   1eb20:	str	r1, [sp, #40]	; 0x28
   1eb24:	sub	r2, r3, r1
   1eb28:	mov	r1, sl
   1eb2c:	vorr	d18, d20, d20
   1eb30:	vld1.32	{d20-d21}, [r1], r7
   1eb34:	subs	ip, ip, #4
   1eb38:	vrev64.32	q12, q10
   1eb3c:	vext.8	q12, q12, q12, #8
   1eb40:	vext.8	q11, q11, q12, #12
   1eb44:	vmul.i32	q9, q9, q12
   1eb48:	vmul.i32	q8, q11, q8
   1eb4c:	vorr	q11, q12, q12
   1eb50:	bne	1eb30 <ReadCompressedDataSlabN+0x13fc>
   1eb54:	mov	r9, r5
   1eb58:	ldr	r5, [sp, #40]	; 0x28
   1eb5c:	vext.8	q11, q9, q8, #8
   1eb60:	vext.8	q12, q8, q8, #8
   1eb64:	vmul.i32	q0, q9, q11
   1eb68:	vmul.i32	q1, q8, q12
   1eb6c:	vmul.i32	q8, q0, d0[1]
   1eb70:	vmul.i32	q9, q1, d2[1]
   1eb74:	vmov.32	r1, d16[0]
   1eb78:	vmov.32	r6, d18[0]
   1eb7c:	cmp	r0, r5
   1eb80:	bne	1eb8c <ReadCompressedDataSlabN+0x1458>
   1eb84:	add	ip, sp, #104	; 0x68
   1eb88:	b	1eba8 <ReadCompressedDataSlabN+0x1474>
   1eb8c:	vmov.32	r5, d20[0]
   1eb90:	add	ip, sp, #104	; 0x68
   1eb94:	mul	r6, r5, r6
   1eb98:	ldr	r5, [r4, r2, lsl #2]
   1eb9c:	subs	r2, r2, #1
   1eba0:	mul	r1, r1, r5
   1eba4:	bne	1eb94 <ReadCompressedDataSlabN+0x1460>
   1eba8:	sub	r5, fp, #72	; 0x48
   1ebac:	str	r6, [ip, r3, lsl #2]
   1ebb0:	ldr	r2, [sp, #28]
   1ebb4:	add	sl, sl, #4
   1ebb8:	str	r1, [r5, r3, lsl #2]
   1ebbc:	ldr	r1, [fp, #20]
   1ebc0:	ldr	r1, [r1, r3, lsl #2]
   1ebc4:	mla	lr, r1, r8, lr
   1ebc8:	ldr	r1, [fp, #28]
   1ebcc:	mov	r8, r6
   1ebd0:	mov	r6, r9
   1ebd4:	ldr	r1, [r1, r3, lsl #2]
   1ebd8:	add	r3, r3, #1
   1ebdc:	mul	r2, r1, r2
   1ebe0:	ldr	r1, [fp, #12]
   1ebe4:	str	r2, [sp, #28]
   1ebe8:	cmp	r3, r1
   1ebec:	bne	1eac4 <ReadCompressedDataSlabN+0x1390>
   1ebf0:	b	202dc <ReadCompressedDataSlabN+0x2ba8>
   1ebf4:	mov	r8, #0
   1ebf8:	ldr	r0, [sp, #44]	; 0x2c
   1ebfc:	ldr	r2, [fp, #8]
   1ec00:	add	r1, sp, #48	; 0x30
   1ec04:	mov	r3, r8
   1ec08:	bl	2768 <InflateSkipData>
   1ec0c:	ldr	sl, [fp, #24]
   1ec10:	str	r7, [sp, #16]
   1ec14:	ldr	r0, [sl]
   1ec18:	cmp	r0, #1
   1ec1c:	bne	20538 <ReadCompressedDataSlabN+0x2e04>
   1ec20:	cmp	r7, #1
   1ec24:	sub	r1, fp, #72	; 0x48
   1ec28:	blt	21d30 <ReadCompressedDataSlabN+0x45fc>
   1ec2c:	ldr	r0, [fp, #20]
   1ec30:	mov	r6, r8
   1ec34:	add	r8, r0, #4
   1ec38:	ldr	r0, [fp, #28]
   1ec3c:	add	r0, r0, #4
   1ec40:	str	r0, [sp, #40]	; 0x28
   1ec44:	sub	r0, fp, #112	; 0x70
   1ec48:	orr	r7, r0, #4
   1ec4c:	orr	r0, r1, #4
   1ec50:	add	r1, sp, #48	; 0x30
   1ec54:	str	r0, [sp, #28]
   1ec58:	mov	r0, #0
   1ec5c:	str	r0, [sp, #32]
   1ec60:	ldr	sl, [fp, #20]
   1ec64:	ldr	r3, [sl]
   1ec68:	cmp	r3, #0
   1ec6c:	beq	1ec94 <ReadCompressedDataSlabN+0x1560>
   1ec70:	ldr	r9, [sp, #44]	; 0x2c
   1ec74:	ldr	r4, [fp, #8]
   1ec78:	mov	r5, r1
   1ec7c:	mov	r0, r9
   1ec80:	mov	r2, r4
   1ec84:	bl	2768 <InflateSkipData>
   1ec88:	ldr	r0, [sl]
   1ec8c:	add	r6, r0, r6
   1ec90:	b	1eca0 <ReadCompressedDataSlabN+0x156c>
   1ec94:	ldr	r9, [sp, #44]	; 0x2c
   1ec98:	ldr	r4, [fp, #8]
   1ec9c:	mov	r5, r1
   1eca0:	ldr	r0, [fp, #28]
   1eca4:	ldr	r1, [sp, #32]
   1eca8:	mov	r3, r4
   1ecac:	ldr	r0, [r0]
   1ecb0:	str	r0, [sp]
   1ecb4:	ldr	r0, [sp, #36]	; 0x24
   1ecb8:	add	r2, r0, r1, lsl #3
   1ecbc:	mov	r0, r9
   1ecc0:	mov	r1, r5
   1ecc4:	bl	5500 <ReadCompressedDoubleData>
   1ecc8:	ldr	r1, [fp, #16]
   1eccc:	ldr	r0, [sl]
   1ecd0:	mov	r2, r4
   1ecd4:	ldr	r1, [r1]
   1ecd8:	sub	r0, r1, r0
   1ecdc:	ldr	r1, [fp, #28]
   1ece0:	ldr	r1, [r1]
   1ece4:	sub	r3, r0, r1
   1ece8:	mov	r0, r9
   1ecec:	mov	r1, r5
   1ecf0:	bl	2768 <InflateSkipData>
   1ecf4:	ldr	r0, [fp, #16]
   1ecf8:	ldr	r1, [sl]
   1ecfc:	ldr	r0, [r0]
   1ed00:	add	r0, r0, r6
   1ed04:	sub	r6, r0, r1
   1ed08:	ldr	r0, [fp, #12]
   1ed0c:	cmp	r0, #2
   1ed10:	blt	1ee24 <ReadCompressedDataSlabN+0x16f0>
   1ed14:	mov	r0, #0
   1ed18:	add	r3, sp, #104	; 0x68
   1ed1c:	mov	r4, r0
   1ed20:	ldr	r0, [r7, r0, lsl #2]
   1ed24:	ldr	r1, [sp, #40]	; 0x28
   1ed28:	add	r0, r0, #1
   1ed2c:	str	r0, [r7, r4, lsl #2]
   1ed30:	ldr	r1, [r1, r4, lsl #2]
   1ed34:	sdiv	r2, r0, r1
   1ed38:	mls	r0, r2, r1, r0
   1ed3c:	cmp	r0, #0
   1ed40:	bne	1edfc <ReadCompressedDataSlabN+0x16c8>
   1ed44:	mov	r0, #0
   1ed48:	add	r5, r3, r4, lsl #2
   1ed4c:	str	r0, [r7, r4, lsl #2]
   1ed50:	ldr	r0, [r5, #4]
   1ed54:	sdiv	r1, r6, r0
   1ed58:	mls	r1, r1, r0, r6
   1ed5c:	cmp	r1, #0
   1ed60:	beq	1edb0 <ReadCompressedDataSlabN+0x167c>
   1ed64:	ldr	r2, [r3, r4, lsl #2]
   1ed68:	ldr	r3, [r8, r4, lsl #2]
   1ed6c:	sub	r0, r0, r1
   1ed70:	add	r1, sp, #48	; 0x30
   1ed74:	mla	r3, r3, r2, r0
   1ed78:	ldr	r2, [fp, #8]
   1ed7c:	mov	r0, r9
   1ed80:	bl	2768 <InflateSkipData>
   1ed84:	ldr	r0, [r5, #4]
   1ed88:	add	r3, sp, #104	; 0x68
   1ed8c:	sdiv	r2, r6, r0
   1ed90:	add	r1, r0, r6
   1ed94:	mul	r0, r2, r0
   1ed98:	ldr	r2, [r8, r4, lsl #2]
   1ed9c:	sub	r0, r0, r6
   1eda0:	add	r0, r1, r0
   1eda4:	ldr	r1, [r3, r4, lsl #2]
   1eda8:	mla	r6, r2, r1, r0
   1edac:	b	1ede4 <ReadCompressedDataSlabN+0x16b0>
   1edb0:	ldr	r0, [r8, r4, lsl #2]
   1edb4:	cmp	r0, #0
   1edb8:	beq	1ede4 <ReadCompressedDataSlabN+0x16b0>
   1edbc:	ldr	r1, [r3, r4, lsl #2]
   1edc0:	ldr	r2, [fp, #8]
   1edc4:	mul	r3, r1, r0
   1edc8:	mov	r0, r9
   1edcc:	add	r1, sp, #48	; 0x30
   1edd0:	bl	2768 <InflateSkipData>
   1edd4:	add	r3, sp, #104	; 0x68
   1edd8:	ldr	r1, [r8, r4, lsl #2]
   1eddc:	ldr	r0, [r3, r4, lsl #2]
   1ede0:	mla	r6, r1, r0, r6
   1ede4:	ldr	r2, [fp, #12]
   1ede8:	add	r1, r4, #2
   1edec:	add	r0, r4, #1
   1edf0:	cmp	r1, r2
   1edf4:	blt	1ed1c <ReadCompressedDataSlabN+0x15e8>
   1edf8:	b	1ee24 <ReadCompressedDataSlabN+0x16f0>
   1edfc:	ldr	r0, [sp, #28]
   1ee00:	ldr	r4, [r0, r4, lsl #2]
   1ee04:	cmp	r4, #0
   1ee08:	beq	1ee24 <ReadCompressedDataSlabN+0x16f0>
   1ee0c:	ldr	r2, [fp, #8]
   1ee10:	mov	r0, r9
   1ee14:	add	r1, sp, #48	; 0x30
   1ee18:	mov	r3, r4
   1ee1c:	bl	2768 <InflateSkipData>
   1ee20:	add	r6, r4, r6
   1ee24:	ldr	r0, [fp, #28]
   1ee28:	ldr	r1, [sp, #32]
   1ee2c:	ldr	r0, [r0]
   1ee30:	add	r1, r0, r1
   1ee34:	ldr	r0, [sp, #16]
   1ee38:	str	r1, [sp, #32]
   1ee3c:	cmp	r1, r0
   1ee40:	add	r1, sp, #48	; 0x30
   1ee44:	blt	1ec60 <ReadCompressedDataSlabN+0x152c>
   1ee48:	b	21d30 <ReadCompressedDataSlabN+0x45fc>
   1ee4c:	mov	r9, #0
   1ee50:	ldr	r0, [sp, #44]	; 0x2c
   1ee54:	ldr	r2, [fp, #8]
   1ee58:	add	r1, sp, #48	; 0x30
   1ee5c:	mov	r3, r9
   1ee60:	bl	2768 <InflateSkipData>
   1ee64:	ldr	sl, [fp, #24]
   1ee68:	ldr	r0, [sl]
   1ee6c:	cmp	r0, #1
   1ee70:	bne	20838 <ReadCompressedDataSlabN+0x3104>
   1ee74:	ldr	r0, [sp, #28]
   1ee78:	cmp	r0, #1
   1ee7c:	blt	21d30 <ReadCompressedDataSlabN+0x45fc>
   1ee80:	ldr	r0, [fp, #20]
   1ee84:	add	r1, sp, #48	; 0x30
   1ee88:	add	r6, r0, #4
   1ee8c:	ldr	r0, [fp, #28]
   1ee90:	add	r0, r0, #4
   1ee94:	str	r0, [sp, #40]	; 0x28
   1ee98:	sub	r0, fp, #112	; 0x70
   1ee9c:	orr	r8, r0, #4
   1eea0:	sub	r0, fp, #72	; 0x48
   1eea4:	orr	r0, r0, #4
   1eea8:	str	r0, [sp, #24]
   1eeac:	mov	r0, #0
   1eeb0:	str	r0, [sp, #32]
   1eeb4:	ldr	sl, [fp, #20]
   1eeb8:	ldr	r3, [sl]
   1eebc:	cmp	r3, #0
   1eec0:	beq	1eee8 <ReadCompressedDataSlabN+0x17b4>
   1eec4:	ldr	r7, [sp, #44]	; 0x2c
   1eec8:	ldr	r4, [fp, #8]
   1eecc:	mov	r5, r1
   1eed0:	mov	r0, r7
   1eed4:	mov	r2, r4
   1eed8:	bl	2768 <InflateSkipData>
   1eedc:	ldr	r0, [sl]
   1eee0:	add	r9, r0, r9
   1eee4:	b	1eef4 <ReadCompressedDataSlabN+0x17c0>
   1eee8:	ldr	r7, [sp, #44]	; 0x2c
   1eeec:	ldr	r4, [fp, #8]
   1eef0:	mov	r5, r1
   1eef4:	ldr	r0, [fp, #28]
   1eef8:	ldr	r1, [sp, #32]
   1eefc:	mov	r3, r4
   1ef00:	ldr	r0, [r0]
   1ef04:	str	r0, [sp]
   1ef08:	ldr	r0, [sp, #36]	; 0x24
   1ef0c:	add	r2, r0, r1, lsl #2
   1ef10:	mov	r0, r7
   1ef14:	mov	r1, r5
   1ef18:	bl	8e60 <ReadCompressedSingleData>
   1ef1c:	ldr	r1, [fp, #16]
   1ef20:	ldr	r0, [sl]
   1ef24:	mov	r2, r4
   1ef28:	ldr	r1, [r1]
   1ef2c:	sub	r0, r1, r0
   1ef30:	ldr	r1, [fp, #28]
   1ef34:	ldr	r1, [r1]
   1ef38:	sub	r3, r0, r1
   1ef3c:	mov	r0, r7
   1ef40:	mov	r1, r5
   1ef44:	bl	2768 <InflateSkipData>
   1ef48:	ldr	r0, [fp, #16]
   1ef4c:	ldr	r1, [sl]
   1ef50:	ldr	r0, [r0]
   1ef54:	add	r0, r0, r9
   1ef58:	sub	r9, r0, r1
   1ef5c:	ldr	r0, [fp, #12]
   1ef60:	cmp	r0, #2
   1ef64:	blt	1f078 <ReadCompressedDataSlabN+0x1944>
   1ef68:	mov	r0, #0
   1ef6c:	add	r3, sp, #104	; 0x68
   1ef70:	mov	r4, r0
   1ef74:	ldr	r0, [r8, r0, lsl #2]
   1ef78:	ldr	r1, [sp, #40]	; 0x28
   1ef7c:	add	r0, r0, #1
   1ef80:	str	r0, [r8, r4, lsl #2]
   1ef84:	ldr	r1, [r1, r4, lsl #2]
   1ef88:	sdiv	r2, r0, r1
   1ef8c:	mls	r0, r2, r1, r0
   1ef90:	cmp	r0, #0
   1ef94:	bne	1f050 <ReadCompressedDataSlabN+0x191c>
   1ef98:	mov	r0, #0
   1ef9c:	add	r5, r3, r4, lsl #2
   1efa0:	str	r0, [r8, r4, lsl #2]
   1efa4:	ldr	r0, [r5, #4]
   1efa8:	sdiv	r1, r9, r0
   1efac:	mls	r1, r1, r0, r9
   1efb0:	cmp	r1, #0
   1efb4:	beq	1f004 <ReadCompressedDataSlabN+0x18d0>
   1efb8:	ldr	r2, [r3, r4, lsl #2]
   1efbc:	ldr	r3, [r6, r4, lsl #2]
   1efc0:	sub	r0, r0, r1
   1efc4:	add	r1, sp, #48	; 0x30
   1efc8:	mla	r3, r3, r2, r0
   1efcc:	ldr	r2, [fp, #8]
   1efd0:	mov	r0, r7
   1efd4:	bl	2768 <InflateSkipData>
   1efd8:	ldr	r0, [r5, #4]
   1efdc:	add	r3, sp, #104	; 0x68
   1efe0:	sdiv	r2, r9, r0
   1efe4:	add	r1, r0, r9
   1efe8:	mul	r0, r2, r0
   1efec:	ldr	r2, [r6, r4, lsl #2]
   1eff0:	sub	r0, r0, r9
   1eff4:	add	r0, r1, r0
   1eff8:	ldr	r1, [r3, r4, lsl #2]
   1effc:	mla	r9, r2, r1, r0
   1f000:	b	1f038 <ReadCompressedDataSlabN+0x1904>
   1f004:	ldr	r0, [r6, r4, lsl #2]
   1f008:	cmp	r0, #0
   1f00c:	beq	1f038 <ReadCompressedDataSlabN+0x1904>
   1f010:	ldr	r1, [r3, r4, lsl #2]
   1f014:	ldr	r2, [fp, #8]
   1f018:	mul	r3, r1, r0
   1f01c:	mov	r0, r7
   1f020:	add	r1, sp, #48	; 0x30
   1f024:	bl	2768 <InflateSkipData>
   1f028:	add	r3, sp, #104	; 0x68
   1f02c:	ldr	r1, [r6, r4, lsl #2]
   1f030:	ldr	r0, [r3, r4, lsl #2]
   1f034:	mla	r9, r1, r0, r9
   1f038:	ldr	r2, [fp, #12]
   1f03c:	add	r1, r4, #2
   1f040:	add	r0, r4, #1
   1f044:	cmp	r1, r2
   1f048:	blt	1ef70 <ReadCompressedDataSlabN+0x183c>
   1f04c:	b	1f078 <ReadCompressedDataSlabN+0x1944>
   1f050:	ldr	r0, [sp, #24]
   1f054:	ldr	r4, [r0, r4, lsl #2]
   1f058:	cmp	r4, #0
   1f05c:	beq	1f078 <ReadCompressedDataSlabN+0x1944>
   1f060:	ldr	r2, [fp, #8]
   1f064:	mov	r0, r7
   1f068:	add	r1, sp, #48	; 0x30
   1f06c:	mov	r3, r4
   1f070:	bl	2768 <InflateSkipData>
   1f074:	add	r9, r4, r9
   1f078:	ldr	r0, [fp, #28]
   1f07c:	ldr	r1, [sp, #32]
   1f080:	ldr	r0, [r0]
   1f084:	add	r1, r0, r1
   1f088:	ldr	r0, [sp, #28]
   1f08c:	str	r1, [sp, #32]
   1f090:	cmp	r1, r0
   1f094:	add	r1, sp, #48	; 0x30
   1f098:	blt	1eeb4 <ReadCompressedDataSlabN+0x1780>
   1f09c:	b	21d30 <ReadCompressedDataSlabN+0x45fc>
   1f0a0:	ldr	r0, [sp, #24]
   1f0a4:	sub	r1, fp, #72	; 0x48
   1f0a8:	str	r7, [sp, #40]	; 0x28
   1f0ac:	cmp	r0, #1
   1f0b0:	blt	21d30 <ReadCompressedDataSlabN+0x45fc>
   1f0b4:	ldr	r0, [fp, #20]
   1f0b8:	mov	sl, #1
   1f0bc:	add	r7, sp, #48	; 0x30
   1f0c0:	add	r6, r0, #4
   1f0c4:	ldr	r0, [fp, #28]
   1f0c8:	str	r6, [sp, #16]
   1f0cc:	add	r0, r0, #4
   1f0d0:	str	r0, [sp, #28]
   1f0d4:	sub	r0, fp, #112	; 0x70
   1f0d8:	orr	r4, r0, #4
   1f0dc:	orr	r0, r1, #4
   1f0e0:	mov	r1, #0
   1f0e4:	str	r0, [sp, #4]
   1f0e8:	ldr	r0, [sp, #36]	; 0x24
   1f0ec:	str	r4, [sp, #12]
   1f0f0:	add	r0, r0, #1
   1f0f4:	str	r0, [sp, #8]
   1f0f8:	ldr	r5, [fp, #20]
   1f0fc:	str	r1, [sp, #20]
   1f100:	ldr	r3, [r5]
   1f104:	cmp	r3, #0
   1f108:	beq	1f148 <ReadCompressedDataSlabN+0x1a14>
   1f10c:	mov	r9, r5
   1f110:	ldr	r5, [sp, #44]	; 0x2c
   1f114:	ldr	r6, [fp, #8]
   1f118:	mov	r1, r7
   1f11c:	mov	r0, r5
   1f120:	mov	r2, r6
   1f124:	bl	2768 <InflateSkipData>
   1f128:	ldr	r0, [r9]
   1f12c:	ldr	r1, [sp, #40]	; 0x28
   1f130:	add	r7, sp, #48	; 0x30
   1f134:	add	r1, r0, r1
   1f138:	ldr	r0, [sp, #36]	; 0x24
   1f13c:	str	r1, [sp, #40]	; 0x28
   1f140:	ldr	r1, [fp, #28]
   1f144:	b	1f158 <ReadCompressedDataSlabN+0x1a24>
   1f148:	ldr	r0, [sp, #36]	; 0x24
   1f14c:	ldr	r5, [sp, #44]	; 0x2c
   1f150:	ldr	r1, [fp, #28]
   1f154:	ldr	r6, [fp, #8]
   1f158:	ldr	r4, [sp, #20]
   1f15c:	ldr	r8, [r1]
   1f160:	mov	r1, r7
   1f164:	mov	r3, r6
   1f168:	str	sl, [sp]
   1f16c:	add	r2, r0, r4
   1f170:	mov	r0, r5
   1f174:	bl	1717c <ReadCompressedInt8Data>
   1f178:	cmp	r8, #2
   1f17c:	blt	1f204 <ReadCompressedDataSlabN+0x1ad0>
   1f180:	ldr	r0, [sp, #8]
   1f184:	ldr	sl, [sp, #40]	; 0x28
   1f188:	mov	r6, #0
   1f18c:	add	r0, r0, r4
   1f190:	str	r0, [sp, #32]
   1f194:	ldr	r0, [fp, #24]
   1f198:	ldr	r9, [fp, #8]
   1f19c:	ldr	r7, [sp, #44]	; 0x2c
   1f1a0:	add	r8, sp, #48	; 0x30
   1f1a4:	mov	r1, r8
   1f1a8:	mov	r5, r0
   1f1ac:	ldr	r0, [r0]
   1f1b0:	mov	r2, r9
   1f1b4:	sub	r3, r0, #1
   1f1b8:	mov	r0, r7
   1f1bc:	bl	2768 <InflateSkipData>
   1f1c0:	ldr	r0, [fp, #28]
   1f1c4:	ldr	r5, [r5]
   1f1c8:	mov	r1, r8
   1f1cc:	mov	r3, r9
   1f1d0:	ldr	r4, [r0]
   1f1d4:	mov	r0, #1
   1f1d8:	str	r0, [sp]
   1f1dc:	ldr	r0, [sp, #32]
   1f1e0:	add	r2, r0, r6
   1f1e4:	mov	r0, r7
   1f1e8:	bl	1717c <ReadCompressedInt8Data>
   1f1ec:	add	r6, r6, #1
   1f1f0:	sub	r0, r4, #1
   1f1f4:	add	sl, r5, sl
   1f1f8:	cmp	r6, r0
   1f1fc:	blt	1f194 <ReadCompressedDataSlabN+0x1a60>
   1f200:	b	1f208 <ReadCompressedDataSlabN+0x1ad4>
   1f204:	ldr	sl, [sp, #40]	; 0x28
   1f208:	ldr	r2, [fp, #28]
   1f20c:	ldr	r0, [fp, #16]
   1f210:	ldr	r1, [fp, #24]
   1f214:	ldr	r9, [fp, #8]
   1f218:	ldr	r2, [r2]
   1f21c:	ldr	r0, [r0]
   1f220:	ldr	r1, [r1]
   1f224:	sub	r2, r2, #1
   1f228:	mls	r0, r2, r1, r0
   1f22c:	ldr	r1, [fp, #20]
   1f230:	mov	r2, r9
   1f234:	ldr	r1, [r1]
   1f238:	sub	r4, r0, r1
   1f23c:	ldr	r0, [sp, #44]	; 0x2c
   1f240:	add	r1, sp, #48	; 0x30
   1f244:	sub	r3, r4, #1
   1f248:	bl	2768 <InflateSkipData>
   1f24c:	ldr	r0, [fp, #12]
   1f250:	add	sl, r4, sl
   1f254:	str	sl, [sp, #40]	; 0x28
   1f258:	cmp	r0, #2
   1f25c:	blt	1f36c <ReadCompressedDataSlabN+0x1c38>
   1f260:	ldr	r6, [sp, #16]
   1f264:	ldr	r4, [sp, #12]
   1f268:	mov	r0, #0
   1f26c:	add	r3, sp, #104	; 0x68
   1f270:	add	r7, sp, #48	; 0x30
   1f274:	mov	sl, r0
   1f278:	ldr	r0, [r4, r0, lsl #2]
   1f27c:	ldr	r1, [sp, #28]
   1f280:	add	r0, r0, #1
   1f284:	str	r0, [r4, sl, lsl #2]
   1f288:	ldr	r1, [r1, sl, lsl #2]
   1f28c:	sdiv	r2, r0, r1
   1f290:	mls	r0, r2, r1, r0
   1f294:	cmp	r0, #0
   1f298:	bne	1f374 <ReadCompressedDataSlabN+0x1c40>
   1f29c:	mov	r0, #0
   1f2a0:	add	r5, r3, sl, lsl #2
   1f2a4:	ldr	r8, [sp, #40]	; 0x28
   1f2a8:	str	r0, [r4, sl, lsl #2]
   1f2ac:	ldr	r0, [r5, #4]
   1f2b0:	sdiv	r1, r8, r0
   1f2b4:	mls	r1, r1, r0, r8
   1f2b8:	cmp	r1, #0
   1f2bc:	beq	1f314 <ReadCompressedDataSlabN+0x1be0>
   1f2c0:	ldr	r2, [r3, sl, lsl #2]
   1f2c4:	ldr	r3, [r6, sl, lsl #2]
   1f2c8:	sub	r0, r0, r1
   1f2cc:	mov	r1, r7
   1f2d0:	mla	r3, r3, r2, r0
   1f2d4:	ldr	r0, [sp, #44]	; 0x2c
   1f2d8:	mov	r2, r9
   1f2dc:	bl	2768 <InflateSkipData>
   1f2e0:	ldr	r0, [r5, #4]
   1f2e4:	add	r3, sp, #104	; 0x68
   1f2e8:	add	r7, sp, #48	; 0x30
   1f2ec:	sdiv	r2, r8, r0
   1f2f0:	add	r1, r0, r8
   1f2f4:	mul	r0, r2, r0
   1f2f8:	ldr	r2, [r6, sl, lsl #2]
   1f2fc:	sub	r0, r0, r8
   1f300:	add	r0, r1, r0
   1f304:	ldr	r1, [r3, sl, lsl #2]
   1f308:	mla	r0, r2, r1, r0
   1f30c:	str	r0, [sp, #40]	; 0x28
   1f310:	b	1f354 <ReadCompressedDataSlabN+0x1c20>
   1f314:	ldr	r0, [r6, sl, lsl #2]
   1f318:	cmp	r0, #0
   1f31c:	beq	1f354 <ReadCompressedDataSlabN+0x1c20>
   1f320:	ldr	r1, [r3, sl, lsl #2]
   1f324:	mov	r2, r9
   1f328:	mul	r3, r1, r0
   1f32c:	ldr	r0, [sp, #44]	; 0x2c
   1f330:	mov	r1, r7
   1f334:	bl	2768 <InflateSkipData>
   1f338:	add	r3, sp, #104	; 0x68
   1f33c:	ldr	r1, [r6, sl, lsl #2]
   1f340:	ldr	r2, [sp, #40]	; 0x28
   1f344:	add	r7, sp, #48	; 0x30
   1f348:	ldr	r0, [r3, sl, lsl #2]
   1f34c:	mla	r2, r1, r0, r2
   1f350:	str	r2, [sp, #40]	; 0x28
   1f354:	ldr	r2, [fp, #12]
   1f358:	add	r1, sl, #2
   1f35c:	add	r0, sl, #1
   1f360:	cmp	r1, r2
   1f364:	blt	1f274 <ReadCompressedDataSlabN+0x1b40>
   1f368:	b	1f3a8 <ReadCompressedDataSlabN+0x1c74>
   1f36c:	add	r7, sp, #48	; 0x30
   1f370:	b	1f3a8 <ReadCompressedDataSlabN+0x1c74>
   1f374:	ldr	r0, [sp, #4]
   1f378:	ldr	r5, [r0, sl, lsl #2]
   1f37c:	cmp	r5, #0
   1f380:	beq	1f3a8 <ReadCompressedDataSlabN+0x1c74>
   1f384:	ldr	r0, [sp, #44]	; 0x2c
   1f388:	mov	r1, r7
   1f38c:	mov	r2, r9
   1f390:	mov	r3, r5
   1f394:	bl	2768 <InflateSkipData>
   1f398:	ldr	r0, [sp, #40]	; 0x28
   1f39c:	add	r7, sp, #48	; 0x30
   1f3a0:	add	r0, r5, r0
   1f3a4:	str	r0, [sp, #40]	; 0x28
   1f3a8:	ldr	r0, [fp, #28]
   1f3ac:	ldr	r1, [sp, #20]
   1f3b0:	mov	sl, #1
   1f3b4:	ldr	r0, [r0]
   1f3b8:	add	r1, r0, r1
   1f3bc:	ldr	r0, [sp, #24]
   1f3c0:	cmp	r1, r0
   1f3c4:	blt	1f0f8 <ReadCompressedDataSlabN+0x19c4>
   1f3c8:	b	21d30 <ReadCompressedDataSlabN+0x45fc>
   1f3cc:	ldr	r0, [sp, #24]
   1f3d0:	sub	r1, fp, #72	; 0x48
   1f3d4:	str	r7, [sp, #40]	; 0x28
   1f3d8:	cmp	r0, #1
   1f3dc:	blt	21d30 <ReadCompressedDataSlabN+0x45fc>
   1f3e0:	ldr	r0, [fp, #20]
   1f3e4:	mov	sl, #1
   1f3e8:	add	r7, sp, #48	; 0x30
   1f3ec:	add	r6, r0, #4
   1f3f0:	ldr	r0, [fp, #28]
   1f3f4:	str	r6, [sp, #16]
   1f3f8:	add	r0, r0, #4
   1f3fc:	str	r0, [sp, #28]
   1f400:	sub	r0, fp, #112	; 0x70
   1f404:	orr	r4, r0, #4
   1f408:	orr	r0, r1, #4
   1f40c:	mov	r1, #0
   1f410:	str	r0, [sp, #4]
   1f414:	ldr	r0, [sp, #36]	; 0x24
   1f418:	str	r4, [sp, #12]
   1f41c:	add	r0, r0, #1
   1f420:	str	r0, [sp, #8]
   1f424:	ldr	r5, [fp, #20]
   1f428:	str	r1, [sp, #20]
   1f42c:	ldr	r3, [r5]
   1f430:	cmp	r3, #0
   1f434:	beq	1f474 <ReadCompressedDataSlabN+0x1d40>
   1f438:	mov	r9, r5
   1f43c:	ldr	r5, [sp, #44]	; 0x2c
   1f440:	ldr	r6, [fp, #8]
   1f444:	mov	r1, r7
   1f448:	mov	r0, r5
   1f44c:	mov	r2, r6
   1f450:	bl	2768 <InflateSkipData>
   1f454:	ldr	r0, [r9]
   1f458:	ldr	r1, [sp, #40]	; 0x28
   1f45c:	add	r7, sp, #48	; 0x30
   1f460:	add	r1, r0, r1
   1f464:	ldr	r0, [sp, #36]	; 0x24
   1f468:	str	r1, [sp, #40]	; 0x28
   1f46c:	ldr	r1, [fp, #28]
   1f470:	b	1f484 <ReadCompressedDataSlabN+0x1d50>
   1f474:	ldr	r0, [sp, #36]	; 0x24
   1f478:	ldr	r5, [sp, #44]	; 0x2c
   1f47c:	ldr	r1, [fp, #28]
   1f480:	ldr	r6, [fp, #8]
   1f484:	ldr	r4, [sp, #20]
   1f488:	ldr	r8, [r1]
   1f48c:	mov	r1, r7
   1f490:	mov	r3, r6
   1f494:	str	sl, [sp]
   1f498:	add	r2, r0, r4
   1f49c:	mov	r0, r5
   1f4a0:	bl	18fb4 <ReadCompressedUInt8Data>
   1f4a4:	cmp	r8, #2
   1f4a8:	blt	1f530 <ReadCompressedDataSlabN+0x1dfc>
   1f4ac:	ldr	r0, [sp, #8]
   1f4b0:	ldr	sl, [sp, #40]	; 0x28
   1f4b4:	mov	r6, #0
   1f4b8:	add	r0, r0, r4
   1f4bc:	str	r0, [sp, #32]
   1f4c0:	ldr	r0, [fp, #24]
   1f4c4:	ldr	r9, [fp, #8]
   1f4c8:	ldr	r7, [sp, #44]	; 0x2c
   1f4cc:	add	r8, sp, #48	; 0x30
   1f4d0:	mov	r1, r8
   1f4d4:	mov	r5, r0
   1f4d8:	ldr	r0, [r0]
   1f4dc:	mov	r2, r9
   1f4e0:	sub	r3, r0, #1
   1f4e4:	mov	r0, r7
   1f4e8:	bl	2768 <InflateSkipData>
   1f4ec:	ldr	r0, [fp, #28]
   1f4f0:	ldr	r5, [r5]
   1f4f4:	mov	r1, r8
   1f4f8:	mov	r3, r9
   1f4fc:	ldr	r4, [r0]
   1f500:	mov	r0, #1
   1f504:	str	r0, [sp]
   1f508:	ldr	r0, [sp, #32]
   1f50c:	add	r2, r0, r6
   1f510:	mov	r0, r7
   1f514:	bl	18fb4 <ReadCompressedUInt8Data>
   1f518:	add	r6, r6, #1
   1f51c:	sub	r0, r4, #1
   1f520:	add	sl, r5, sl
   1f524:	cmp	r6, r0
   1f528:	blt	1f4c0 <ReadCompressedDataSlabN+0x1d8c>
   1f52c:	b	1f534 <ReadCompressedDataSlabN+0x1e00>
   1f530:	ldr	sl, [sp, #40]	; 0x28
   1f534:	ldr	r2, [fp, #28]
   1f538:	ldr	r0, [fp, #16]
   1f53c:	ldr	r1, [fp, #24]
   1f540:	ldr	r9, [fp, #8]
   1f544:	ldr	r2, [r2]
   1f548:	ldr	r0, [r0]
   1f54c:	ldr	r1, [r1]
   1f550:	sub	r2, r2, #1
   1f554:	mls	r0, r2, r1, r0
   1f558:	ldr	r1, [fp, #20]
   1f55c:	mov	r2, r9
   1f560:	ldr	r1, [r1]
   1f564:	sub	r4, r0, r1
   1f568:	ldr	r0, [sp, #44]	; 0x2c
   1f56c:	add	r1, sp, #48	; 0x30
   1f570:	sub	r3, r4, #1
   1f574:	bl	2768 <InflateSkipData>
   1f578:	ldr	r0, [fp, #12]
   1f57c:	add	sl, r4, sl
   1f580:	str	sl, [sp, #40]	; 0x28
   1f584:	cmp	r0, #2
   1f588:	blt	1f698 <ReadCompressedDataSlabN+0x1f64>
   1f58c:	ldr	r6, [sp, #16]
   1f590:	ldr	r4, [sp, #12]
   1f594:	mov	r0, #0
   1f598:	add	r3, sp, #104	; 0x68
   1f59c:	add	r7, sp, #48	; 0x30
   1f5a0:	mov	sl, r0
   1f5a4:	ldr	r0, [r4, r0, lsl #2]
   1f5a8:	ldr	r1, [sp, #28]
   1f5ac:	add	r0, r0, #1
   1f5b0:	str	r0, [r4, sl, lsl #2]
   1f5b4:	ldr	r1, [r1, sl, lsl #2]
   1f5b8:	sdiv	r2, r0, r1
   1f5bc:	mls	r0, r2, r1, r0
   1f5c0:	cmp	r0, #0
   1f5c4:	bne	1f6a0 <ReadCompressedDataSlabN+0x1f6c>
   1f5c8:	mov	r0, #0
   1f5cc:	add	r5, r3, sl, lsl #2
   1f5d0:	ldr	r8, [sp, #40]	; 0x28
   1f5d4:	str	r0, [r4, sl, lsl #2]
   1f5d8:	ldr	r0, [r5, #4]
   1f5dc:	sdiv	r1, r8, r0
   1f5e0:	mls	r1, r1, r0, r8
   1f5e4:	cmp	r1, #0
   1f5e8:	beq	1f640 <ReadCompressedDataSlabN+0x1f0c>
   1f5ec:	ldr	r2, [r3, sl, lsl #2]
   1f5f0:	ldr	r3, [r6, sl, lsl #2]
   1f5f4:	sub	r0, r0, r1
   1f5f8:	mov	r1, r7
   1f5fc:	mla	r3, r3, r2, r0
   1f600:	ldr	r0, [sp, #44]	; 0x2c
   1f604:	mov	r2, r9
   1f608:	bl	2768 <InflateSkipData>
   1f60c:	ldr	r0, [r5, #4]
   1f610:	add	r3, sp, #104	; 0x68
   1f614:	add	r7, sp, #48	; 0x30
   1f618:	sdiv	r2, r8, r0
   1f61c:	add	r1, r0, r8
   1f620:	mul	r0, r2, r0
   1f624:	ldr	r2, [r6, sl, lsl #2]
   1f628:	sub	r0, r0, r8
   1f62c:	add	r0, r1, r0
   1f630:	ldr	r1, [r3, sl, lsl #2]
   1f634:	mla	r0, r2, r1, r0
   1f638:	str	r0, [sp, #40]	; 0x28
   1f63c:	b	1f680 <ReadCompressedDataSlabN+0x1f4c>
   1f640:	ldr	r0, [r6, sl, lsl #2]
   1f644:	cmp	r0, #0
   1f648:	beq	1f680 <ReadCompressedDataSlabN+0x1f4c>
   1f64c:	ldr	r1, [r3, sl, lsl #2]
   1f650:	mov	r2, r9
   1f654:	mul	r3, r1, r0
   1f658:	ldr	r0, [sp, #44]	; 0x2c
   1f65c:	mov	r1, r7
   1f660:	bl	2768 <InflateSkipData>
   1f664:	add	r3, sp, #104	; 0x68
   1f668:	ldr	r1, [r6, sl, lsl #2]
   1f66c:	ldr	r2, [sp, #40]	; 0x28
   1f670:	add	r7, sp, #48	; 0x30
   1f674:	ldr	r0, [r3, sl, lsl #2]
   1f678:	mla	r2, r1, r0, r2
   1f67c:	str	r2, [sp, #40]	; 0x28
   1f680:	ldr	r2, [fp, #12]
   1f684:	add	r1, sl, #2
   1f688:	add	r0, sl, #1
   1f68c:	cmp	r1, r2
   1f690:	blt	1f5a0 <ReadCompressedDataSlabN+0x1e6c>
   1f694:	b	1f6d4 <ReadCompressedDataSlabN+0x1fa0>
   1f698:	add	r7, sp, #48	; 0x30
   1f69c:	b	1f6d4 <ReadCompressedDataSlabN+0x1fa0>
   1f6a0:	ldr	r0, [sp, #4]
   1f6a4:	ldr	r5, [r0, sl, lsl #2]
   1f6a8:	cmp	r5, #0
   1f6ac:	beq	1f6d4 <ReadCompressedDataSlabN+0x1fa0>
   1f6b0:	ldr	r0, [sp, #44]	; 0x2c
   1f6b4:	mov	r1, r7
   1f6b8:	mov	r2, r9
   1f6bc:	mov	r3, r5
   1f6c0:	bl	2768 <InflateSkipData>
   1f6c4:	ldr	r0, [sp, #40]	; 0x28
   1f6c8:	add	r7, sp, #48	; 0x30
   1f6cc:	add	r0, r5, r0
   1f6d0:	str	r0, [sp, #40]	; 0x28
   1f6d4:	ldr	r0, [fp, #28]
   1f6d8:	ldr	r1, [sp, #20]
   1f6dc:	mov	sl, #1
   1f6e0:	ldr	r0, [r0]
   1f6e4:	add	r1, r0, r1
   1f6e8:	ldr	r0, [sp, #24]
   1f6ec:	cmp	r1, r0
   1f6f0:	blt	1f424 <ReadCompressedDataSlabN+0x1cf0>
   1f6f4:	b	21d30 <ReadCompressedDataSlabN+0x45fc>
   1f6f8:	mov	lr, #0
   1f6fc:	ldr	r0, [sp, #44]	; 0x2c
   1f700:	ldr	r2, [fp, #8]
   1f704:	add	r1, sp, #48	; 0x30
   1f708:	mov	r3, lr
   1f70c:	mov	r9, lr
   1f710:	bl	2768 <InflateSkipData>
   1f714:	ldr	sl, [fp, #24]
   1f718:	ldr	r0, [sl]
   1f71c:	cmp	r0, #1
   1f720:	bne	20b34 <ReadCompressedDataSlabN+0x3400>
   1f724:	ldr	r0, [sp, #28]
   1f728:	cmp	r0, #1
   1f72c:	blt	21d30 <ReadCompressedDataSlabN+0x45fc>
   1f730:	ldr	r0, [fp, #20]
   1f734:	add	r1, sp, #48	; 0x30
   1f738:	add	r6, r0, #4
   1f73c:	ldr	r0, [fp, #28]
   1f740:	add	r0, r0, #4
   1f744:	str	r0, [sp, #40]	; 0x28
   1f748:	sub	r0, fp, #112	; 0x70
   1f74c:	orr	r8, r0, #4
   1f750:	sub	r0, fp, #72	; 0x48
   1f754:	orr	r0, r0, #4
   1f758:	str	r0, [sp, #20]
   1f75c:	mov	r0, #0
   1f760:	str	r0, [sp, #32]
   1f764:	ldr	sl, [fp, #20]
   1f768:	ldr	r3, [sl]
   1f76c:	cmp	r3, #0
   1f770:	beq	1f79c <ReadCompressedDataSlabN+0x2068>
   1f774:	ldr	r7, [sp, #44]	; 0x2c
   1f778:	ldr	r4, [fp, #8]
   1f77c:	mov	r5, r1
   1f780:	mov	r0, r7
   1f784:	mov	r2, r4
   1f788:	bl	2768 <InflateSkipData>
   1f78c:	ldr	r0, [sl]
   1f790:	add	r9, r0, r9
   1f794:	str	r9, [sp, #24]
   1f798:	b	1f7ac <ReadCompressedDataSlabN+0x2078>
   1f79c:	ldr	r7, [sp, #44]	; 0x2c
   1f7a0:	ldr	r4, [fp, #8]
   1f7a4:	str	r9, [sp, #24]
   1f7a8:	mov	r5, r1
   1f7ac:	ldr	r0, [fp, #28]
   1f7b0:	ldr	r1, [sp, #32]
   1f7b4:	mov	r3, r4
   1f7b8:	ldr	r0, [r0]
   1f7bc:	str	r0, [sp]
   1f7c0:	ldr	r0, [sp, #36]	; 0x24
   1f7c4:	add	r2, r0, r1, lsl #1
   1f7c8:	mov	r0, r7
   1f7cc:	mov	r1, r5
   1f7d0:	bl	133ac <ReadCompressedInt16Data>
   1f7d4:	ldr	r9, [fp, #16]
   1f7d8:	ldr	r0, [sl]
   1f7dc:	mov	r2, r4
   1f7e0:	ldr	r1, [r9]
   1f7e4:	sub	r0, r1, r0
   1f7e8:	ldr	r1, [fp, #28]
   1f7ec:	ldr	r1, [r1]
   1f7f0:	sub	r3, r0, r1
   1f7f4:	mov	r0, r7
   1f7f8:	mov	r1, r5
   1f7fc:	bl	2768 <InflateSkipData>
   1f800:	ldr	r0, [r9]
   1f804:	ldr	r1, [sp, #24]
   1f808:	add	r0, r0, r1
   1f80c:	ldr	r1, [sl]
   1f810:	sub	r9, r0, r1
   1f814:	ldr	r0, [fp, #12]
   1f818:	cmp	r0, #2
   1f81c:	blt	1f930 <ReadCompressedDataSlabN+0x21fc>
   1f820:	mov	r0, #0
   1f824:	add	r3, sp, #104	; 0x68
   1f828:	mov	r4, r0
   1f82c:	ldr	r0, [r8, r0, lsl #2]
   1f830:	ldr	r1, [sp, #40]	; 0x28
   1f834:	add	r0, r0, #1
   1f838:	str	r0, [r8, r4, lsl #2]
   1f83c:	ldr	r1, [r1, r4, lsl #2]
   1f840:	sdiv	r2, r0, r1
   1f844:	mls	r0, r2, r1, r0
   1f848:	cmp	r0, #0
   1f84c:	bne	1f908 <ReadCompressedDataSlabN+0x21d4>
   1f850:	mov	r0, #0
   1f854:	add	r5, r3, r4, lsl #2
   1f858:	str	r0, [r8, r4, lsl #2]
   1f85c:	ldr	r0, [r5, #4]
   1f860:	sdiv	r1, r9, r0
   1f864:	mls	r1, r1, r0, r9
   1f868:	cmp	r1, #0
   1f86c:	beq	1f8bc <ReadCompressedDataSlabN+0x2188>
   1f870:	ldr	r2, [r3, r4, lsl #2]
   1f874:	ldr	r3, [r6, r4, lsl #2]
   1f878:	sub	r0, r0, r1
   1f87c:	add	r1, sp, #48	; 0x30
   1f880:	mla	r3, r3, r2, r0
   1f884:	ldr	r2, [fp, #8]
   1f888:	mov	r0, r7
   1f88c:	bl	2768 <InflateSkipData>
   1f890:	ldr	r0, [r5, #4]
   1f894:	add	r3, sp, #104	; 0x68
   1f898:	sdiv	r2, r9, r0
   1f89c:	add	r1, r0, r9
   1f8a0:	mul	r0, r2, r0
   1f8a4:	ldr	r2, [r6, r4, lsl #2]
   1f8a8:	sub	r0, r0, r9
   1f8ac:	add	r0, r1, r0
   1f8b0:	ldr	r1, [r3, r4, lsl #2]
   1f8b4:	mla	r9, r2, r1, r0
   1f8b8:	b	1f8f0 <ReadCompressedDataSlabN+0x21bc>
   1f8bc:	ldr	r0, [r6, r4, lsl #2]
   1f8c0:	cmp	r0, #0
   1f8c4:	beq	1f8f0 <ReadCompressedDataSlabN+0x21bc>
   1f8c8:	ldr	r1, [r3, r4, lsl #2]
   1f8cc:	ldr	r2, [fp, #8]
   1f8d0:	mul	r3, r1, r0
   1f8d4:	mov	r0, r7
   1f8d8:	add	r1, sp, #48	; 0x30
   1f8dc:	bl	2768 <InflateSkipData>
   1f8e0:	add	r3, sp, #104	; 0x68
   1f8e4:	ldr	r1, [r6, r4, lsl #2]
   1f8e8:	ldr	r0, [r3, r4, lsl #2]
   1f8ec:	mla	r9, r1, r0, r9
   1f8f0:	ldr	r2, [fp, #12]
   1f8f4:	add	r1, r4, #2
   1f8f8:	add	r0, r4, #1
   1f8fc:	cmp	r1, r2
   1f900:	blt	1f828 <ReadCompressedDataSlabN+0x20f4>
   1f904:	b	1f930 <ReadCompressedDataSlabN+0x21fc>
   1f908:	ldr	r0, [sp, #20]
   1f90c:	ldr	r4, [r0, r4, lsl #2]
   1f910:	cmp	r4, #0
   1f914:	beq	1f930 <ReadCompressedDataSlabN+0x21fc>
   1f918:	ldr	r2, [fp, #8]
   1f91c:	mov	r0, r7
   1f920:	add	r1, sp, #48	; 0x30
   1f924:	mov	r3, r4
   1f928:	bl	2768 <InflateSkipData>
   1f92c:	add	r9, r4, r9
   1f930:	ldr	r0, [fp, #28]
   1f934:	ldr	r1, [sp, #32]
   1f938:	ldr	r0, [r0]
   1f93c:	add	r1, r0, r1
   1f940:	ldr	r0, [sp, #28]
   1f944:	str	r1, [sp, #32]
   1f948:	cmp	r1, r0
   1f94c:	add	r1, sp, #48	; 0x30
   1f950:	blt	1f764 <ReadCompressedDataSlabN+0x2030>
   1f954:	b	21d30 <ReadCompressedDataSlabN+0x45fc>
   1f958:	mov	lr, #0
   1f95c:	ldr	r0, [sp, #44]	; 0x2c
   1f960:	ldr	r2, [fp, #8]
   1f964:	add	r1, sp, #48	; 0x30
   1f968:	mov	r3, lr
   1f96c:	mov	r9, lr
   1f970:	bl	2768 <InflateSkipData>
   1f974:	ldr	sl, [fp, #24]
   1f978:	ldr	r0, [sl]
   1f97c:	cmp	r0, #1
   1f980:	bne	20e30 <ReadCompressedDataSlabN+0x36fc>
   1f984:	ldr	r0, [sp, #28]
   1f988:	cmp	r0, #1
   1f98c:	blt	21d30 <ReadCompressedDataSlabN+0x45fc>
   1f990:	ldr	r0, [fp, #20]
   1f994:	add	r1, sp, #48	; 0x30
   1f998:	add	r6, r0, #4
   1f99c:	ldr	r0, [fp, #28]
   1f9a0:	add	r0, r0, #4
   1f9a4:	str	r0, [sp, #40]	; 0x28
   1f9a8:	sub	r0, fp, #112	; 0x70
   1f9ac:	orr	r8, r0, #4
   1f9b0:	sub	r0, fp, #72	; 0x48
   1f9b4:	orr	r0, r0, #4
   1f9b8:	str	r0, [sp, #20]
   1f9bc:	mov	r0, #0
   1f9c0:	str	r0, [sp, #32]
   1f9c4:	ldr	sl, [fp, #20]
   1f9c8:	ldr	r3, [sl]
   1f9cc:	cmp	r3, #0
   1f9d0:	beq	1f9fc <ReadCompressedDataSlabN+0x22c8>
   1f9d4:	ldr	r7, [sp, #44]	; 0x2c
   1f9d8:	ldr	r4, [fp, #8]
   1f9dc:	mov	r5, r1
   1f9e0:	mov	r0, r7
   1f9e4:	mov	r2, r4
   1f9e8:	bl	2768 <InflateSkipData>
   1f9ec:	ldr	r0, [sl]
   1f9f0:	add	r9, r0, r9
   1f9f4:	str	r9, [sp, #24]
   1f9f8:	b	1fa0c <ReadCompressedDataSlabN+0x22d8>
   1f9fc:	ldr	r7, [sp, #44]	; 0x2c
   1fa00:	ldr	r4, [fp, #8]
   1fa04:	str	r9, [sp, #24]
   1fa08:	mov	r5, r1
   1fa0c:	ldr	r0, [fp, #28]
   1fa10:	ldr	r1, [sp, #32]
   1fa14:	mov	r3, r4
   1fa18:	ldr	r0, [r0]
   1fa1c:	str	r0, [sp]
   1fa20:	ldr	r0, [sp, #36]	; 0x24
   1fa24:	add	r2, r0, r1, lsl #1
   1fa28:	mov	r0, r7
   1fa2c:	mov	r1, r5
   1fa30:	bl	15344 <ReadCompressedUInt16Data>
   1fa34:	ldr	r9, [fp, #16]
   1fa38:	ldr	r0, [sl]
   1fa3c:	mov	r2, r4
   1fa40:	ldr	r1, [r9]
   1fa44:	sub	r0, r1, r0
   1fa48:	ldr	r1, [fp, #28]
   1fa4c:	ldr	r1, [r1]
   1fa50:	sub	r3, r0, r1
   1fa54:	mov	r0, r7
   1fa58:	mov	r1, r5
   1fa5c:	bl	2768 <InflateSkipData>
   1fa60:	ldr	r0, [r9]
   1fa64:	ldr	r1, [sp, #24]
   1fa68:	add	r0, r0, r1
   1fa6c:	ldr	r1, [sl]
   1fa70:	sub	r9, r0, r1
   1fa74:	ldr	r0, [fp, #12]
   1fa78:	cmp	r0, #2
   1fa7c:	blt	1fb90 <ReadCompressedDataSlabN+0x245c>
   1fa80:	mov	r0, #0
   1fa84:	add	r3, sp, #104	; 0x68
   1fa88:	mov	r4, r0
   1fa8c:	ldr	r0, [r8, r0, lsl #2]
   1fa90:	ldr	r1, [sp, #40]	; 0x28
   1fa94:	add	r0, r0, #1
   1fa98:	str	r0, [r8, r4, lsl #2]
   1fa9c:	ldr	r1, [r1, r4, lsl #2]
   1faa0:	sdiv	r2, r0, r1
   1faa4:	mls	r0, r2, r1, r0
   1faa8:	cmp	r0, #0
   1faac:	bne	1fb68 <ReadCompressedDataSlabN+0x2434>
   1fab0:	mov	r0, #0
   1fab4:	add	r5, r3, r4, lsl #2
   1fab8:	str	r0, [r8, r4, lsl #2]
   1fabc:	ldr	r0, [r5, #4]
   1fac0:	sdiv	r1, r9, r0
   1fac4:	mls	r1, r1, r0, r9
   1fac8:	cmp	r1, #0
   1facc:	beq	1fb1c <ReadCompressedDataSlabN+0x23e8>
   1fad0:	ldr	r2, [r3, r4, lsl #2]
   1fad4:	ldr	r3, [r6, r4, lsl #2]
   1fad8:	sub	r0, r0, r1
   1fadc:	add	r1, sp, #48	; 0x30
   1fae0:	mla	r3, r3, r2, r0
   1fae4:	ldr	r2, [fp, #8]
   1fae8:	mov	r0, r7
   1faec:	bl	2768 <InflateSkipData>
   1faf0:	ldr	r0, [r5, #4]
   1faf4:	add	r3, sp, #104	; 0x68
   1faf8:	sdiv	r2, r9, r0
   1fafc:	add	r1, r0, r9
   1fb00:	mul	r0, r2, r0
   1fb04:	ldr	r2, [r6, r4, lsl #2]
   1fb08:	sub	r0, r0, r9
   1fb0c:	add	r0, r1, r0
   1fb10:	ldr	r1, [r3, r4, lsl #2]
   1fb14:	mla	r9, r2, r1, r0
   1fb18:	b	1fb50 <ReadCompressedDataSlabN+0x241c>
   1fb1c:	ldr	r0, [r6, r4, lsl #2]
   1fb20:	cmp	r0, #0
   1fb24:	beq	1fb50 <ReadCompressedDataSlabN+0x241c>
   1fb28:	ldr	r1, [r3, r4, lsl #2]
   1fb2c:	ldr	r2, [fp, #8]
   1fb30:	mul	r3, r1, r0
   1fb34:	mov	r0, r7
   1fb38:	add	r1, sp, #48	; 0x30
   1fb3c:	bl	2768 <InflateSkipData>
   1fb40:	add	r3, sp, #104	; 0x68
   1fb44:	ldr	r1, [r6, r4, lsl #2]
   1fb48:	ldr	r0, [r3, r4, lsl #2]
   1fb4c:	mla	r9, r1, r0, r9
   1fb50:	ldr	r2, [fp, #12]
   1fb54:	add	r1, r4, #2
   1fb58:	add	r0, r4, #1
   1fb5c:	cmp	r1, r2
   1fb60:	blt	1fa88 <ReadCompressedDataSlabN+0x2354>
   1fb64:	b	1fb90 <ReadCompressedDataSlabN+0x245c>
   1fb68:	ldr	r0, [sp, #20]
   1fb6c:	ldr	r4, [r0, r4, lsl #2]
   1fb70:	cmp	r4, #0
   1fb74:	beq	1fb90 <ReadCompressedDataSlabN+0x245c>
   1fb78:	ldr	r2, [fp, #8]
   1fb7c:	mov	r0, r7
   1fb80:	add	r1, sp, #48	; 0x30
   1fb84:	mov	r3, r4
   1fb88:	bl	2768 <InflateSkipData>
   1fb8c:	add	r9, r4, r9
   1fb90:	ldr	r0, [fp, #28]
   1fb94:	ldr	r1, [sp, #32]
   1fb98:	ldr	r0, [r0]
   1fb9c:	add	r1, r0, r1
   1fba0:	ldr	r0, [sp, #28]
   1fba4:	str	r1, [sp, #32]
   1fba8:	cmp	r1, r0
   1fbac:	add	r1, sp, #48	; 0x30
   1fbb0:	blt	1f9c4 <ReadCompressedDataSlabN+0x2290>
   1fbb4:	b	21d30 <ReadCompressedDataSlabN+0x45fc>
   1fbb8:	mov	lr, #0
   1fbbc:	ldr	r0, [sp, #44]	; 0x2c
   1fbc0:	ldr	r2, [fp, #8]
   1fbc4:	add	r1, sp, #48	; 0x30
   1fbc8:	mov	r3, lr
   1fbcc:	mov	r9, lr
   1fbd0:	bl	2768 <InflateSkipData>
   1fbd4:	ldr	sl, [fp, #24]
   1fbd8:	ldr	r0, [sl]
   1fbdc:	cmp	r0, #1
   1fbe0:	bne	2112c <ReadCompressedDataSlabN+0x39f8>
   1fbe4:	ldr	r0, [sp, #28]
   1fbe8:	cmp	r0, #1
   1fbec:	blt	21d30 <ReadCompressedDataSlabN+0x45fc>
   1fbf0:	ldr	r0, [fp, #20]
   1fbf4:	add	r1, sp, #48	; 0x30
   1fbf8:	add	r6, r0, #4
   1fbfc:	ldr	r0, [fp, #28]
   1fc00:	add	r0, r0, #4
   1fc04:	str	r0, [sp, #40]	; 0x28
   1fc08:	sub	r0, fp, #112	; 0x70
   1fc0c:	orr	r8, r0, #4
   1fc10:	sub	r0, fp, #72	; 0x48
   1fc14:	orr	r0, r0, #4
   1fc18:	str	r0, [sp, #20]
   1fc1c:	mov	r0, #0
   1fc20:	str	r0, [sp, #32]
   1fc24:	ldr	sl, [fp, #20]
   1fc28:	ldr	r3, [sl]
   1fc2c:	cmp	r3, #0
   1fc30:	beq	1fc5c <ReadCompressedDataSlabN+0x2528>
   1fc34:	ldr	r7, [sp, #44]	; 0x2c
   1fc38:	ldr	r4, [fp, #8]
   1fc3c:	mov	r5, r1
   1fc40:	mov	r0, r7
   1fc44:	mov	r2, r4
   1fc48:	bl	2768 <InflateSkipData>
   1fc4c:	ldr	r0, [sl]
   1fc50:	add	r9, r0, r9
   1fc54:	str	r9, [sp, #24]
   1fc58:	b	1fc6c <ReadCompressedDataSlabN+0x2538>
   1fc5c:	ldr	r7, [sp, #44]	; 0x2c
   1fc60:	ldr	r4, [fp, #8]
   1fc64:	str	r9, [sp, #24]
   1fc68:	mov	r5, r1
   1fc6c:	ldr	r0, [fp, #28]
   1fc70:	ldr	r1, [sp, #32]
   1fc74:	mov	r3, r4
   1fc78:	ldr	r0, [r0]
   1fc7c:	str	r0, [sp]
   1fc80:	ldr	r0, [sp, #36]	; 0x24
   1fc84:	add	r2, r0, r1, lsl #2
   1fc88:	mov	r0, r7
   1fc8c:	mov	r1, r5
   1fc90:	bl	f32c <ReadCompressedInt32Data>
   1fc94:	ldr	r9, [fp, #16]
   1fc98:	ldr	r0, [sl]
   1fc9c:	mov	r2, r4
   1fca0:	ldr	r1, [r9]
   1fca4:	sub	r0, r1, r0
   1fca8:	ldr	r1, [fp, #28]
   1fcac:	ldr	r1, [r1]
   1fcb0:	sub	r3, r0, r1
   1fcb4:	mov	r0, r7
   1fcb8:	mov	r1, r5
   1fcbc:	bl	2768 <InflateSkipData>
   1fcc0:	ldr	r0, [r9]
   1fcc4:	ldr	r1, [sp, #24]
   1fcc8:	add	r0, r0, r1
   1fccc:	ldr	r1, [sl]
   1fcd0:	sub	r9, r0, r1
   1fcd4:	ldr	r0, [fp, #12]
   1fcd8:	cmp	r0, #2
   1fcdc:	blt	1fdf0 <ReadCompressedDataSlabN+0x26bc>
   1fce0:	mov	r0, #0
   1fce4:	add	r3, sp, #104	; 0x68
   1fce8:	mov	r4, r0
   1fcec:	ldr	r0, [r8, r0, lsl #2]
   1fcf0:	ldr	r1, [sp, #40]	; 0x28
   1fcf4:	add	r0, r0, #1
   1fcf8:	str	r0, [r8, r4, lsl #2]
   1fcfc:	ldr	r1, [r1, r4, lsl #2]
   1fd00:	sdiv	r2, r0, r1
   1fd04:	mls	r0, r2, r1, r0
   1fd08:	cmp	r0, #0
   1fd0c:	bne	1fdc8 <ReadCompressedDataSlabN+0x2694>
   1fd10:	mov	r0, #0
   1fd14:	add	r5, r3, r4, lsl #2
   1fd18:	str	r0, [r8, r4, lsl #2]
   1fd1c:	ldr	r0, [r5, #4]
   1fd20:	sdiv	r1, r9, r0
   1fd24:	mls	r1, r1, r0, r9
   1fd28:	cmp	r1, #0
   1fd2c:	beq	1fd7c <ReadCompressedDataSlabN+0x2648>
   1fd30:	ldr	r2, [r3, r4, lsl #2]
   1fd34:	ldr	r3, [r6, r4, lsl #2]
   1fd38:	sub	r0, r0, r1
   1fd3c:	add	r1, sp, #48	; 0x30
   1fd40:	mla	r3, r3, r2, r0
   1fd44:	ldr	r2, [fp, #8]
   1fd48:	mov	r0, r7
   1fd4c:	bl	2768 <InflateSkipData>
   1fd50:	ldr	r0, [r5, #4]
   1fd54:	add	r3, sp, #104	; 0x68
   1fd58:	sdiv	r2, r9, r0
   1fd5c:	add	r1, r0, r9
   1fd60:	mul	r0, r2, r0
   1fd64:	ldr	r2, [r6, r4, lsl #2]
   1fd68:	sub	r0, r0, r9
   1fd6c:	add	r0, r1, r0
   1fd70:	ldr	r1, [r3, r4, lsl #2]
   1fd74:	mla	r9, r2, r1, r0
   1fd78:	b	1fdb0 <ReadCompressedDataSlabN+0x267c>
   1fd7c:	ldr	r0, [r6, r4, lsl #2]
   1fd80:	cmp	r0, #0
   1fd84:	beq	1fdb0 <ReadCompressedDataSlabN+0x267c>
   1fd88:	ldr	r1, [r3, r4, lsl #2]
   1fd8c:	ldr	r2, [fp, #8]
   1fd90:	mul	r3, r1, r0
   1fd94:	mov	r0, r7
   1fd98:	add	r1, sp, #48	; 0x30
   1fd9c:	bl	2768 <InflateSkipData>
   1fda0:	add	r3, sp, #104	; 0x68
   1fda4:	ldr	r1, [r6, r4, lsl #2]
   1fda8:	ldr	r0, [r3, r4, lsl #2]
   1fdac:	mla	r9, r1, r0, r9
   1fdb0:	ldr	r2, [fp, #12]
   1fdb4:	add	r1, r4, #2
   1fdb8:	add	r0, r4, #1
   1fdbc:	cmp	r1, r2
   1fdc0:	blt	1fce8 <ReadCompressedDataSlabN+0x25b4>
   1fdc4:	b	1fdf0 <ReadCompressedDataSlabN+0x26bc>
   1fdc8:	ldr	r0, [sp, #20]
   1fdcc:	ldr	r4, [r0, r4, lsl #2]
   1fdd0:	cmp	r4, #0
   1fdd4:	beq	1fdf0 <ReadCompressedDataSlabN+0x26bc>
   1fdd8:	ldr	r2, [fp, #8]
   1fddc:	mov	r0, r7
   1fde0:	add	r1, sp, #48	; 0x30
   1fde4:	mov	r3, r4
   1fde8:	bl	2768 <InflateSkipData>
   1fdec:	add	r9, r4, r9
   1fdf0:	ldr	r0, [fp, #28]
   1fdf4:	ldr	r1, [sp, #32]
   1fdf8:	ldr	r0, [r0]
   1fdfc:	add	r1, r0, r1
   1fe00:	ldr	r0, [sp, #28]
   1fe04:	str	r1, [sp, #32]
   1fe08:	cmp	r1, r0
   1fe0c:	add	r1, sp, #48	; 0x30
   1fe10:	blt	1fc24 <ReadCompressedDataSlabN+0x24f0>
   1fe14:	b	21d30 <ReadCompressedDataSlabN+0x45fc>
   1fe18:	mov	lr, #0
   1fe1c:	ldr	r0, [sp, #44]	; 0x2c
   1fe20:	ldr	r2, [fp, #8]
   1fe24:	add	r1, sp, #48	; 0x30
   1fe28:	mov	r3, lr
   1fe2c:	mov	r9, lr
   1fe30:	bl	2768 <InflateSkipData>
   1fe34:	ldr	sl, [fp, #24]
   1fe38:	ldr	r0, [sl]
   1fe3c:	cmp	r0, #1
   1fe40:	bne	21428 <ReadCompressedDataSlabN+0x3cf4>
   1fe44:	ldr	r0, [sp, #28]
   1fe48:	cmp	r0, #1
   1fe4c:	blt	21d30 <ReadCompressedDataSlabN+0x45fc>
   1fe50:	ldr	r0, [fp, #20]
   1fe54:	add	r1, sp, #48	; 0x30
   1fe58:	add	r6, r0, #4
   1fe5c:	ldr	r0, [fp, #28]
   1fe60:	add	r0, r0, #4
   1fe64:	str	r0, [sp, #40]	; 0x28
   1fe68:	sub	r0, fp, #112	; 0x70
   1fe6c:	orr	r8, r0, #4
   1fe70:	sub	r0, fp, #72	; 0x48
   1fe74:	orr	r0, r0, #4
   1fe78:	str	r0, [sp, #20]
   1fe7c:	mov	r0, #0
   1fe80:	str	r0, [sp, #32]
   1fe84:	ldr	sl, [fp, #20]
   1fe88:	ldr	r3, [sl]
   1fe8c:	cmp	r3, #0
   1fe90:	beq	1febc <ReadCompressedDataSlabN+0x2788>
   1fe94:	ldr	r7, [sp, #44]	; 0x2c
   1fe98:	ldr	r4, [fp, #8]
   1fe9c:	mov	r5, r1
   1fea0:	mov	r0, r7
   1fea4:	mov	r2, r4
   1fea8:	bl	2768 <InflateSkipData>
   1feac:	ldr	r0, [sl]
   1feb0:	add	r9, r0, r9
   1feb4:	str	r9, [sp, #24]
   1feb8:	b	1fecc <ReadCompressedDataSlabN+0x2798>
   1febc:	ldr	r7, [sp, #44]	; 0x2c
   1fec0:	ldr	r4, [fp, #8]
   1fec4:	str	r9, [sp, #24]
   1fec8:	mov	r5, r1
   1fecc:	ldr	r0, [fp, #28]
   1fed0:	ldr	r1, [sp, #32]
   1fed4:	mov	r3, r4
   1fed8:	ldr	r0, [r0]
   1fedc:	str	r0, [sp]
   1fee0:	ldr	r0, [sp, #36]	; 0x24
   1fee4:	add	r2, r0, r1, lsl #2
   1fee8:	mov	r0, r7
   1feec:	mov	r1, r5
   1fef0:	bl	11414 <ReadCompressedUInt32Data>
   1fef4:	ldr	r9, [fp, #16]
   1fef8:	ldr	r0, [sl]
   1fefc:	mov	r2, r4
   1ff00:	ldr	r1, [r9]
   1ff04:	sub	r0, r1, r0
   1ff08:	ldr	r1, [fp, #28]
   1ff0c:	ldr	r1, [r1]
   1ff10:	sub	r3, r0, r1
   1ff14:	mov	r0, r7
   1ff18:	mov	r1, r5
   1ff1c:	bl	2768 <InflateSkipData>
   1ff20:	ldr	r0, [r9]
   1ff24:	ldr	r1, [sp, #24]
   1ff28:	add	r0, r0, r1
   1ff2c:	ldr	r1, [sl]
   1ff30:	sub	r9, r0, r1
   1ff34:	ldr	r0, [fp, #12]
   1ff38:	cmp	r0, #2
   1ff3c:	blt	20050 <ReadCompressedDataSlabN+0x291c>
   1ff40:	mov	r0, #0
   1ff44:	add	r3, sp, #104	; 0x68
   1ff48:	mov	r4, r0
   1ff4c:	ldr	r0, [r8, r0, lsl #2]
   1ff50:	ldr	r1, [sp, #40]	; 0x28
   1ff54:	add	r0, r0, #1
   1ff58:	str	r0, [r8, r4, lsl #2]
   1ff5c:	ldr	r1, [r1, r4, lsl #2]
   1ff60:	sdiv	r2, r0, r1
   1ff64:	mls	r0, r2, r1, r0
   1ff68:	cmp	r0, #0
   1ff6c:	bne	20028 <ReadCompressedDataSlabN+0x28f4>
   1ff70:	mov	r0, #0
   1ff74:	add	r5, r3, r4, lsl #2
   1ff78:	str	r0, [r8, r4, lsl #2]
   1ff7c:	ldr	r0, [r5, #4]
   1ff80:	sdiv	r1, r9, r0
   1ff84:	mls	r1, r1, r0, r9
   1ff88:	cmp	r1, #0
   1ff8c:	beq	1ffdc <ReadCompressedDataSlabN+0x28a8>
   1ff90:	ldr	r2, [r3, r4, lsl #2]
   1ff94:	ldr	r3, [r6, r4, lsl #2]
   1ff98:	sub	r0, r0, r1
   1ff9c:	add	r1, sp, #48	; 0x30
   1ffa0:	mla	r3, r3, r2, r0
   1ffa4:	ldr	r2, [fp, #8]
   1ffa8:	mov	r0, r7
   1ffac:	bl	2768 <InflateSkipData>
   1ffb0:	ldr	r0, [r5, #4]
   1ffb4:	add	r3, sp, #104	; 0x68
   1ffb8:	sdiv	r2, r9, r0
   1ffbc:	add	r1, r0, r9
   1ffc0:	mul	r0, r2, r0
   1ffc4:	ldr	r2, [r6, r4, lsl #2]
   1ffc8:	sub	r0, r0, r9
   1ffcc:	add	r0, r1, r0
   1ffd0:	ldr	r1, [r3, r4, lsl #2]
   1ffd4:	mla	r9, r2, r1, r0
   1ffd8:	b	20010 <ReadCompressedDataSlabN+0x28dc>
   1ffdc:	ldr	r0, [r6, r4, lsl #2]
   1ffe0:	cmp	r0, #0
   1ffe4:	beq	20010 <ReadCompressedDataSlabN+0x28dc>
   1ffe8:	ldr	r1, [r3, r4, lsl #2]
   1ffec:	ldr	r2, [fp, #8]
   1fff0:	mul	r3, r1, r0
   1fff4:	mov	r0, r7
   1fff8:	add	r1, sp, #48	; 0x30
   1fffc:	bl	2768 <InflateSkipData>
   20000:	add	r3, sp, #104	; 0x68
   20004:	ldr	r1, [r6, r4, lsl #2]
   20008:	ldr	r0, [r3, r4, lsl #2]
   2000c:	mla	r9, r1, r0, r9
   20010:	ldr	r2, [fp, #12]
   20014:	add	r1, r4, #2
   20018:	add	r0, r4, #1
   2001c:	cmp	r1, r2
   20020:	blt	1ff48 <ReadCompressedDataSlabN+0x2814>
   20024:	b	20050 <ReadCompressedDataSlabN+0x291c>
   20028:	ldr	r0, [sp, #20]
   2002c:	ldr	r4, [r0, r4, lsl #2]
   20030:	cmp	r4, #0
   20034:	beq	20050 <ReadCompressedDataSlabN+0x291c>
   20038:	ldr	r2, [fp, #8]
   2003c:	mov	r0, r7
   20040:	add	r1, sp, #48	; 0x30
   20044:	mov	r3, r4
   20048:	bl	2768 <InflateSkipData>
   2004c:	add	r9, r4, r9
   20050:	ldr	r0, [fp, #28]
   20054:	ldr	r1, [sp, #32]
   20058:	ldr	r0, [r0]
   2005c:	add	r1, r0, r1
   20060:	ldr	r0, [sp, #28]
   20064:	str	r1, [sp, #32]
   20068:	cmp	r1, r0
   2006c:	add	r1, sp, #48	; 0x30
   20070:	blt	1fe84 <ReadCompressedDataSlabN+0x2750>
   20074:	b	21d30 <ReadCompressedDataSlabN+0x45fc>
   20078:	mov	lr, #0
   2007c:	ldr	r0, [sp, #44]	; 0x2c
   20080:	ldr	r2, [fp, #8]
   20084:	add	r1, sp, #48	; 0x30
   20088:	mov	r3, lr
   2008c:	mov	r9, lr
   20090:	bl	2768 <InflateSkipData>
   20094:	ldr	sl, [fp, #24]
   20098:	ldr	r0, [sl]
   2009c:	cmp	r0, #1
   200a0:	bne	21724 <ReadCompressedDataSlabN+0x3ff0>
   200a4:	ldr	r0, [sp, #24]
   200a8:	cmp	r0, #1
   200ac:	blt	21d30 <ReadCompressedDataSlabN+0x45fc>
   200b0:	ldr	r0, [fp, #20]
   200b4:	add	r1, sp, #48	; 0x30
   200b8:	add	r6, r0, #4
   200bc:	ldr	r0, [fp, #28]
   200c0:	add	r0, r0, #4
   200c4:	str	r0, [sp, #40]	; 0x28
   200c8:	sub	r0, fp, #112	; 0x70
   200cc:	orr	r8, r0, #4
   200d0:	sub	r0, fp, #72	; 0x48
   200d4:	orr	r0, r0, #4
   200d8:	str	r0, [sp, #28]
   200dc:	mov	r0, #0
   200e0:	str	r0, [sp, #32]
   200e4:	ldr	sl, [fp, #20]
   200e8:	ldr	r3, [sl]
   200ec:	cmp	r3, #0
   200f0:	beq	2011c <ReadCompressedDataSlabN+0x29e8>
   200f4:	ldr	r7, [sp, #44]	; 0x2c
   200f8:	ldr	r4, [fp, #8]
   200fc:	mov	r5, r1
   20100:	mov	r0, r7
   20104:	mov	r2, r4
   20108:	bl	2768 <InflateSkipData>
   2010c:	ldr	r0, [sl]
   20110:	add	r9, r0, r9
   20114:	str	r9, [sp, #20]
   20118:	b	2012c <ReadCompressedDataSlabN+0x29f8>
   2011c:	ldr	r7, [sp, #44]	; 0x2c
   20120:	ldr	r4, [fp, #8]
   20124:	str	r9, [sp, #20]
   20128:	mov	r5, r1
   2012c:	ldr	r0, [fp, #28]
   20130:	ldr	r1, [sp, #32]
   20134:	mov	r3, r4
   20138:	ldr	r0, [r0]
   2013c:	str	r0, [sp]
   20140:	ldr	r0, [sp, #36]	; 0x24
   20144:	add	r2, r0, r1, lsl #3
   20148:	mov	r0, r7
   2014c:	mov	r1, r5
   20150:	bl	b01c <ReadCompressedInt64Data>
   20154:	ldr	r9, [fp, #16]
   20158:	ldr	r0, [sl]
   2015c:	mov	r2, r4
   20160:	ldr	r1, [r9]
   20164:	sub	r0, r1, r0
   20168:	ldr	r1, [fp, #28]
   2016c:	ldr	r1, [r1]
   20170:	sub	r3, r0, r1
   20174:	mov	r0, r7
   20178:	mov	r1, r5
   2017c:	bl	2768 <InflateSkipData>
   20180:	ldr	r0, [r9]
   20184:	ldr	r1, [sp, #20]
   20188:	add	r0, r0, r1
   2018c:	ldr	r1, [sl]
   20190:	sub	r9, r0, r1
   20194:	ldr	r0, [fp, #12]
   20198:	cmp	r0, #2
   2019c:	blt	202b0 <ReadCompressedDataSlabN+0x2b7c>
   201a0:	mov	r0, #0
   201a4:	add	r3, sp, #104	; 0x68
   201a8:	mov	r4, r0
   201ac:	ldr	r0, [r8, r0, lsl #2]
   201b0:	ldr	r1, [sp, #40]	; 0x28
   201b4:	add	r0, r0, #1
   201b8:	str	r0, [r8, r4, lsl #2]
   201bc:	ldr	r1, [r1, r4, lsl #2]
   201c0:	sdiv	r2, r0, r1
   201c4:	mls	r0, r2, r1, r0
   201c8:	cmp	r0, #0
   201cc:	bne	20288 <ReadCompressedDataSlabN+0x2b54>
   201d0:	mov	r0, #0
   201d4:	add	r5, r3, r4, lsl #2
   201d8:	str	r0, [r8, r4, lsl #2]
   201dc:	ldr	r0, [r5, #4]
   201e0:	sdiv	r1, r9, r0
   201e4:	mls	r1, r1, r0, r9
   201e8:	cmp	r1, #0
   201ec:	beq	2023c <ReadCompressedDataSlabN+0x2b08>
   201f0:	ldr	r2, [r3, r4, lsl #2]
   201f4:	ldr	r3, [r6, r4, lsl #2]
   201f8:	sub	r0, r0, r1
   201fc:	add	r1, sp, #48	; 0x30
   20200:	mla	r3, r3, r2, r0
   20204:	ldr	r2, [fp, #8]
   20208:	mov	r0, r7
   2020c:	bl	2768 <InflateSkipData>
   20210:	ldr	r0, [r5, #4]
   20214:	add	r3, sp, #104	; 0x68
   20218:	sdiv	r2, r9, r0
   2021c:	add	r1, r0, r9
   20220:	mul	r0, r2, r0
   20224:	ldr	r2, [r6, r4, lsl #2]
   20228:	sub	r0, r0, r9
   2022c:	add	r0, r1, r0
   20230:	ldr	r1, [r3, r4, lsl #2]
   20234:	mla	r9, r2, r1, r0
   20238:	b	20270 <ReadCompressedDataSlabN+0x2b3c>
   2023c:	ldr	r0, [r6, r4, lsl #2]
   20240:	cmp	r0, #0
   20244:	beq	20270 <ReadCompressedDataSlabN+0x2b3c>
   20248:	ldr	r1, [r3, r4, lsl #2]
   2024c:	ldr	r2, [fp, #8]
   20250:	mul	r3, r1, r0
   20254:	mov	r0, r7
   20258:	add	r1, sp, #48	; 0x30
   2025c:	bl	2768 <InflateSkipData>
   20260:	add	r3, sp, #104	; 0x68
   20264:	ldr	r1, [r6, r4, lsl #2]
   20268:	ldr	r0, [r3, r4, lsl #2]
   2026c:	mla	r9, r1, r0, r9
   20270:	ldr	r2, [fp, #12]
   20274:	add	r1, r4, #2
   20278:	add	r0, r4, #1
   2027c:	cmp	r1, r2
   20280:	blt	201a8 <ReadCompressedDataSlabN+0x2a74>
   20284:	b	202b0 <ReadCompressedDataSlabN+0x2b7c>
   20288:	ldr	r0, [sp, #28]
   2028c:	ldr	r4, [r0, r4, lsl #2]
   20290:	cmp	r4, #0
   20294:	beq	202b0 <ReadCompressedDataSlabN+0x2b7c>
   20298:	ldr	r2, [fp, #8]
   2029c:	mov	r0, r7
   202a0:	add	r1, sp, #48	; 0x30
   202a4:	mov	r3, r4
   202a8:	bl	2768 <InflateSkipData>
   202ac:	add	r9, r4, r9
   202b0:	ldr	r0, [fp, #28]
   202b4:	ldr	r1, [sp, #32]
   202b8:	ldr	r0, [r0]
   202bc:	add	r1, r0, r1
   202c0:	ldr	r0, [sp, #24]
   202c4:	str	r1, [sp, #32]
   202c8:	cmp	r1, r0
   202cc:	add	r1, sp, #48	; 0x30
   202d0:	blt	200e4 <ReadCompressedDataSlabN+0x29b0>
   202d4:	b	21d30 <ReadCompressedDataSlabN+0x45fc>
   202d8:	mov	lr, #0
   202dc:	ldr	r0, [sp, #44]	; 0x2c
   202e0:	ldr	r2, [fp, #8]
   202e4:	add	r1, sp, #48	; 0x30
   202e8:	mov	r3, lr
   202ec:	mov	r9, lr
   202f0:	bl	2768 <InflateSkipData>
   202f4:	ldr	sl, [fp, #24]
   202f8:	ldr	r0, [sl]
   202fc:	cmp	r0, #1
   20300:	bne	21a38 <ReadCompressedDataSlabN+0x4304>
   20304:	ldr	r0, [sp, #28]
   20308:	cmp	r0, #1
   2030c:	blt	21d30 <ReadCompressedDataSlabN+0x45fc>
   20310:	ldr	r0, [fp, #20]
   20314:	add	r1, sp, #48	; 0x30
   20318:	add	r6, r0, #4
   2031c:	ldr	r0, [fp, #28]
   20320:	add	r0, r0, #4
   20324:	str	r0, [sp, #40]	; 0x28
   20328:	sub	r0, fp, #112	; 0x70
   2032c:	orr	r8, r0, #4
   20330:	sub	r0, fp, #72	; 0x48
   20334:	orr	r0, r0, #4
   20338:	str	r0, [sp, #20]
   2033c:	mov	r0, #0
   20340:	str	r0, [sp, #32]
   20344:	ldr	sl, [fp, #20]
   20348:	ldr	r3, [sl]
   2034c:	cmp	r3, #0
   20350:	beq	2037c <ReadCompressedDataSlabN+0x2c48>
   20354:	ldr	r7, [sp, #44]	; 0x2c
   20358:	ldr	r4, [fp, #8]
   2035c:	mov	r5, r1
   20360:	mov	r0, r7
   20364:	mov	r2, r4
   20368:	bl	2768 <InflateSkipData>
   2036c:	ldr	r0, [sl]
   20370:	add	r9, r0, r9
   20374:	str	r9, [sp, #24]
   20378:	b	2038c <ReadCompressedDataSlabN+0x2c58>
   2037c:	ldr	r7, [sp, #44]	; 0x2c
   20380:	ldr	r4, [fp, #8]
   20384:	str	r9, [sp, #24]
   20388:	mov	r5, r1
   2038c:	ldr	r0, [fp, #28]
   20390:	ldr	r1, [sp, #32]
   20394:	mov	r3, r4
   20398:	ldr	r0, [r0]
   2039c:	str	r0, [sp]
   203a0:	ldr	r0, [sp, #36]	; 0x24
   203a4:	add	r2, r0, r1, lsl #3
   203a8:	mov	r0, r7
   203ac:	mov	r1, r5
   203b0:	bl	d1d4 <ReadCompressedUInt64Data>
   203b4:	ldr	r9, [fp, #16]
   203b8:	ldr	r0, [sl]
   203bc:	mov	r2, r4
   203c0:	ldr	r1, [r9]
   203c4:	sub	r0, r1, r0
   203c8:	ldr	r1, [fp, #28]
   203cc:	ldr	r1, [r1]
   203d0:	sub	r3, r0, r1
   203d4:	mov	r0, r7
   203d8:	mov	r1, r5
   203dc:	bl	2768 <InflateSkipData>
   203e0:	ldr	r0, [r9]
   203e4:	ldr	r1, [sp, #24]
   203e8:	add	r0, r0, r1
   203ec:	ldr	r1, [sl]
   203f0:	sub	r9, r0, r1
   203f4:	ldr	r0, [fp, #12]
   203f8:	cmp	r0, #2
   203fc:	blt	20510 <ReadCompressedDataSlabN+0x2ddc>
   20400:	mov	r0, #0
   20404:	add	r3, sp, #104	; 0x68
   20408:	mov	r4, r0
   2040c:	ldr	r0, [r8, r0, lsl #2]
   20410:	ldr	r1, [sp, #40]	; 0x28
   20414:	add	r0, r0, #1
   20418:	str	r0, [r8, r4, lsl #2]
   2041c:	ldr	r1, [r1, r4, lsl #2]
   20420:	sdiv	r2, r0, r1
   20424:	mls	r0, r2, r1, r0
   20428:	cmp	r0, #0
   2042c:	bne	204e8 <ReadCompressedDataSlabN+0x2db4>
   20430:	mov	r0, #0
   20434:	add	r5, r3, r4, lsl #2
   20438:	str	r0, [r8, r4, lsl #2]
   2043c:	ldr	r0, [r5, #4]
   20440:	sdiv	r1, r9, r0
   20444:	mls	r1, r1, r0, r9
   20448:	cmp	r1, #0
   2044c:	beq	2049c <ReadCompressedDataSlabN+0x2d68>
   20450:	ldr	r2, [r3, r4, lsl #2]
   20454:	ldr	r3, [r6, r4, lsl #2]
   20458:	sub	r0, r0, r1
   2045c:	add	r1, sp, #48	; 0x30
   20460:	mla	r3, r3, r2, r0
   20464:	ldr	r2, [fp, #8]
   20468:	mov	r0, r7
   2046c:	bl	2768 <InflateSkipData>
   20470:	ldr	r0, [r5, #4]
   20474:	add	r3, sp, #104	; 0x68
   20478:	sdiv	r2, r9, r0
   2047c:	add	r1, r0, r9
   20480:	mul	r0, r2, r0
   20484:	ldr	r2, [r6, r4, lsl #2]
   20488:	sub	r0, r0, r9
   2048c:	add	r0, r1, r0
   20490:	ldr	r1, [r3, r4, lsl #2]
   20494:	mla	r9, r2, r1, r0
   20498:	b	204d0 <ReadCompressedDataSlabN+0x2d9c>
   2049c:	ldr	r0, [r6, r4, lsl #2]
   204a0:	cmp	r0, #0
   204a4:	beq	204d0 <ReadCompressedDataSlabN+0x2d9c>
   204a8:	ldr	r1, [r3, r4, lsl #2]
   204ac:	ldr	r2, [fp, #8]
   204b0:	mul	r3, r1, r0
   204b4:	mov	r0, r7
   204b8:	add	r1, sp, #48	; 0x30
   204bc:	bl	2768 <InflateSkipData>
   204c0:	add	r3, sp, #104	; 0x68
   204c4:	ldr	r1, [r6, r4, lsl #2]
   204c8:	ldr	r0, [r3, r4, lsl #2]
   204cc:	mla	r9, r1, r0, r9
   204d0:	ldr	r2, [fp, #12]
   204d4:	add	r1, r4, #2
   204d8:	add	r0, r4, #1
   204dc:	cmp	r1, r2
   204e0:	blt	20408 <ReadCompressedDataSlabN+0x2cd4>
   204e4:	b	20510 <ReadCompressedDataSlabN+0x2ddc>
   204e8:	ldr	r0, [sp, #20]
   204ec:	ldr	r4, [r0, r4, lsl #2]
   204f0:	cmp	r4, #0
   204f4:	beq	20510 <ReadCompressedDataSlabN+0x2ddc>
   204f8:	ldr	r2, [fp, #8]
   204fc:	mov	r0, r7
   20500:	add	r1, sp, #48	; 0x30
   20504:	mov	r3, r4
   20508:	bl	2768 <InflateSkipData>
   2050c:	add	r9, r4, r9
   20510:	ldr	r0, [fp, #28]
   20514:	ldr	r1, [sp, #32]
   20518:	ldr	r0, [r0]
   2051c:	add	r1, r0, r1
   20520:	ldr	r0, [sp, #28]
   20524:	str	r1, [sp, #32]
   20528:	cmp	r1, r0
   2052c:	add	r1, sp, #48	; 0x30
   20530:	blt	20344 <ReadCompressedDataSlabN+0x2c10>
   20534:	b	21d30 <ReadCompressedDataSlabN+0x45fc>
   20538:	cmp	r7, #1
   2053c:	sub	r1, fp, #72	; 0x48
   20540:	blt	21d30 <ReadCompressedDataSlabN+0x45fc>
   20544:	ldr	r0, [fp, #20]
   20548:	mov	r9, #1
   2054c:	add	ip, r0, #4
   20550:	ldr	r0, [fp, #28]
   20554:	str	ip, [sp, #32]
   20558:	add	r0, r0, #4
   2055c:	str	r0, [sp, #40]	; 0x28
   20560:	sub	r0, fp, #112	; 0x70
   20564:	orr	r4, r0, #4
   20568:	orr	r0, r1, #4
   2056c:	str	r0, [sp, #8]
   20570:	ldr	r0, [sp, #36]	; 0x24
   20574:	str	r4, [sp, #28]
   20578:	add	r0, r0, #8
   2057c:	str	r0, [sp, #12]
   20580:	mov	r0, #0
   20584:	str	r0, [sp, #20]
   20588:	ldr	r5, [fp, #20]
   2058c:	str	r8, [sp, #24]
   20590:	ldr	r3, [r5]
   20594:	cmp	r3, #0
   20598:	beq	205d8 <ReadCompressedDataSlabN+0x2ea4>
   2059c:	ldr	r4, [sp, #44]	; 0x2c
   205a0:	ldr	r8, [fp, #8]
   205a4:	mov	r7, r5
   205a8:	add	r5, sp, #48	; 0x30
   205ac:	mov	r1, r5
   205b0:	mov	r0, r4
   205b4:	mov	r2, r8
   205b8:	bl	2768 <InflateSkipData>
   205bc:	ldr	r0, [r7]
   205c0:	ldr	r1, [sp, #24]
   205c4:	ldr	sl, [fp, #28]
   205c8:	add	r1, r0, r1
   205cc:	ldr	r0, [sp, #36]	; 0x24
   205d0:	str	r1, [sp, #24]
   205d4:	b	205ec <ReadCompressedDataSlabN+0x2eb8>
   205d8:	ldr	r0, [sp, #36]	; 0x24
   205dc:	ldr	r4, [sp, #44]	; 0x2c
   205e0:	ldr	sl, [fp, #28]
   205e4:	ldr	r8, [fp, #8]
   205e8:	add	r5, sp, #48	; 0x30
   205ec:	ldr	r6, [sp, #20]
   205f0:	ldr	r7, [sl]
   205f4:	mov	r1, r5
   205f8:	mov	r3, r8
   205fc:	str	r9, [sp]
   20600:	add	r2, r0, r6, lsl #3
   20604:	mov	r0, r4
   20608:	bl	5500 <ReadCompressedDoubleData>
   2060c:	cmp	r7, #2
   20610:	blt	20698 <ReadCompressedDataSlabN+0x2f64>
   20614:	ldr	r0, [sp, #12]
   20618:	ldr	r8, [sp, #24]
   2061c:	ldr	r1, [fp, #24]
   20620:	mov	r9, #0
   20624:	add	r6, r0, r6, lsl #3
   20628:	ldr	r0, [r1]
   2062c:	ldr	r4, [fp, #8]
   20630:	ldr	r7, [sp, #44]	; 0x2c
   20634:	add	r1, sp, #48	; 0x30
   20638:	sub	r3, r0, #1
   2063c:	mov	r0, r7
   20640:	mov	r2, r4
   20644:	bl	2768 <InflateSkipData>
   20648:	ldr	r0, [fp, #24]
   2064c:	ldr	r5, [sl]
   20650:	add	r1, sp, #48	; 0x30
   20654:	mov	r2, r6
   20658:	mov	r3, r4
   2065c:	ldr	sl, [r0]
   20660:	mov	r0, #1
   20664:	str	r0, [sp]
   20668:	mov	r0, r7
   2066c:	bl	5500 <ReadCompressedDoubleData>
   20670:	add	r8, sl, r8
   20674:	ldr	sl, [fp, #24]
   20678:	add	r9, r9, #1
   2067c:	sub	r0, r5, #1
   20680:	add	r6, r6, #8
   20684:	cmp	r9, r0
   20688:	mov	r1, sl
   2068c:	ldr	sl, [fp, #28]
   20690:	blt	20628 <ReadCompressedDataSlabN+0x2ef4>
   20694:	b	206a0 <ReadCompressedDataSlabN+0x2f6c>
   20698:	ldr	r8, [sp, #24]
   2069c:	ldr	r1, [fp, #24]
   206a0:	ldr	r0, [fp, #16]
   206a4:	ldr	r2, [sl]
   206a8:	ldr	r1, [r1]
   206ac:	ldr	r9, [sp, #44]	; 0x2c
   206b0:	ldr	r0, [r0]
   206b4:	sub	r2, r2, #1
   206b8:	mls	r0, r2, r1, r0
   206bc:	ldr	r1, [fp, #20]
   206c0:	ldr	r2, [fp, #8]
   206c4:	ldr	r1, [r1]
   206c8:	sub	r5, r0, r1
   206cc:	mov	r0, r9
   206d0:	add	r1, sp, #48	; 0x30
   206d4:	sub	r3, r5, #1
   206d8:	bl	2768 <InflateSkipData>
   206dc:	ldr	r0, [fp, #12]
   206e0:	add	r8, r5, r8
   206e4:	cmp	r0, #2
   206e8:	blt	20814 <ReadCompressedDataSlabN+0x30e0>
   206ec:	ldr	ip, [sp, #32]
   206f0:	ldr	r4, [sp, #28]
   206f4:	mov	r0, #0
   206f8:	add	r3, sp, #104	; 0x68
   206fc:	mov	r6, r0
   20700:	ldr	r0, [r4, r0, lsl #2]
   20704:	ldr	r1, [sp, #40]	; 0x28
   20708:	add	r0, r0, #1
   2070c:	str	r0, [r4, r6, lsl #2]
   20710:	ldr	r1, [r1, r6, lsl #2]
   20714:	sdiv	r2, r0, r1
   20718:	mls	r0, r2, r1, r0
   2071c:	cmp	r0, #0
   20720:	bne	207ec <ReadCompressedDataSlabN+0x30b8>
   20724:	mov	r0, #0
   20728:	add	r5, r3, r6, lsl #2
   2072c:	str	r0, [r4, r6, lsl #2]
   20730:	ldr	r0, [r5, #4]
   20734:	sdiv	r1, r8, r0
   20738:	mls	r1, r1, r0, r8
   2073c:	cmp	r1, #0
   20740:	beq	20798 <ReadCompressedDataSlabN+0x3064>
   20744:	ldr	r2, [r3, r6, lsl #2]
   20748:	ldr	r3, [ip, r6, lsl #2]
   2074c:	sub	r0, r0, r1
   20750:	add	r1, sp, #48	; 0x30
   20754:	mla	r3, r3, r2, r0
   20758:	ldr	r2, [fp, #8]
   2075c:	mov	r0, r9
   20760:	bl	2768 <InflateSkipData>
   20764:	ldr	r0, [r5, #4]
   20768:	ldr	ip, [sp, #32]
   2076c:	add	r3, sp, #104	; 0x68
   20770:	ldr	r4, [sp, #28]
   20774:	sdiv	r2, r8, r0
   20778:	add	r1, r0, r8
   2077c:	mul	r0, r2, r0
   20780:	ldr	r2, [ip, r6, lsl #2]
   20784:	sub	r0, r0, r8
   20788:	add	r0, r1, r0
   2078c:	ldr	r1, [r3, r6, lsl #2]
   20790:	mla	r8, r2, r1, r0
   20794:	b	207d4 <ReadCompressedDataSlabN+0x30a0>
   20798:	ldr	r0, [ip, r6, lsl #2]
   2079c:	cmp	r0, #0
   207a0:	beq	207d4 <ReadCompressedDataSlabN+0x30a0>
   207a4:	ldr	r1, [r3, r6, lsl #2]
   207a8:	ldr	r2, [fp, #8]
   207ac:	mul	r3, r1, r0
   207b0:	mov	r0, r9
   207b4:	add	r1, sp, #48	; 0x30
   207b8:	bl	2768 <InflateSkipData>
   207bc:	ldr	ip, [sp, #32]
   207c0:	add	r3, sp, #104	; 0x68
   207c4:	ldr	r4, [sp, #28]
   207c8:	ldr	r0, [r3, r6, lsl #2]
   207cc:	ldr	r1, [ip, r6, lsl #2]
   207d0:	mla	r8, r1, r0, r8
   207d4:	ldr	r2, [fp, #12]
   207d8:	add	r1, r6, #2
   207dc:	add	r0, r6, #1
   207e0:	cmp	r1, r2
   207e4:	blt	206fc <ReadCompressedDataSlabN+0x2fc8>
   207e8:	b	20814 <ReadCompressedDataSlabN+0x30e0>
   207ec:	ldr	r0, [sp, #8]
   207f0:	ldr	r6, [r0, r6, lsl #2]
   207f4:	cmp	r6, #0
   207f8:	beq	20814 <ReadCompressedDataSlabN+0x30e0>
   207fc:	ldr	r2, [fp, #8]
   20800:	mov	r0, r9
   20804:	add	r1, sp, #48	; 0x30
   20808:	mov	r3, r6
   2080c:	bl	2768 <InflateSkipData>
   20810:	add	r8, r6, r8
   20814:	ldr	r0, [sl]
   20818:	ldr	r1, [sp, #20]
   2081c:	mov	r9, #1
   20820:	add	r1, r0, r1
   20824:	ldr	r0, [sp, #16]
   20828:	str	r1, [sp, #20]
   2082c:	cmp	r1, r0
   20830:	blt	20588 <ReadCompressedDataSlabN+0x2e54>
   20834:	b	21d30 <ReadCompressedDataSlabN+0x45fc>
   20838:	ldr	r0, [sp, #28]
   2083c:	cmp	r0, #1
   20840:	blt	21d30 <ReadCompressedDataSlabN+0x45fc>
   20844:	ldr	r0, [fp, #20]
   20848:	mov	r2, #1
   2084c:	add	r1, sp, #48	; 0x30
   20850:	add	r8, r0, #4
   20854:	ldr	r0, [fp, #28]
   20858:	str	r8, [sp, #16]
   2085c:	add	r0, r0, #4
   20860:	str	r0, [sp, #40]	; 0x28
   20864:	sub	r0, fp, #112	; 0x70
   20868:	orr	r4, r0, #4
   2086c:	sub	r0, fp, #72	; 0x48
   20870:	orr	r0, r0, #4
   20874:	str	r4, [sp, #32]
   20878:	str	r0, [sp, #8]
   2087c:	ldr	r0, [sp, #36]	; 0x24
   20880:	add	r0, r0, #4
   20884:	str	r0, [sp, #12]
   20888:	mov	r0, #0
   2088c:	str	r0, [sp, #24]
   20890:	ldr	r5, [fp, #20]
   20894:	ldr	r3, [r5]
   20898:	cmp	r3, #0
   2089c:	beq	208d8 <ReadCompressedDataSlabN+0x31a4>
   208a0:	mov	r7, r5
   208a4:	ldr	r5, [sp, #44]	; 0x2c
   208a8:	ldr	r6, [fp, #8]
   208ac:	mov	r4, r1
   208b0:	mov	r0, r5
   208b4:	mov	r2, r6
   208b8:	bl	2768 <InflateSkipData>
   208bc:	ldr	r0, [r7]
   208c0:	ldr	sl, [fp, #28]
   208c4:	mov	r3, r6
   208c8:	mov	r2, #1
   208cc:	add	r9, r0, r9
   208d0:	ldr	r0, [sp, #36]	; 0x24
   208d4:	b	208f0 <ReadCompressedDataSlabN+0x31bc>
   208d8:	ldr	r6, [fp, #8]
   208dc:	ldr	r0, [sp, #36]	; 0x24
   208e0:	ldr	r5, [sp, #44]	; 0x2c
   208e4:	ldr	sl, [fp, #28]
   208e8:	mov	r4, r1
   208ec:	mov	r3, r6
   208f0:	ldr	r6, [sp, #24]
   208f4:	ldr	r8, [sl]
   208f8:	str	r2, [sp]
   208fc:	mov	r1, r4
   20900:	str	r9, [sp, #20]
   20904:	add	r2, r0, r6, lsl #2
   20908:	mov	r0, r5
   2090c:	bl	8e60 <ReadCompressedSingleData>
   20910:	cmp	r8, #2
   20914:	blt	2099c <ReadCompressedDataSlabN+0x3268>
   20918:	ldr	r0, [sp, #12]
   2091c:	ldr	r9, [sp, #20]
   20920:	ldr	r1, [fp, #24]
   20924:	mov	r5, #0
   20928:	add	r6, r0, r6, lsl #2
   2092c:	ldr	r0, [r1]
   20930:	ldr	r7, [fp, #8]
   20934:	ldr	r8, [sp, #44]	; 0x2c
   20938:	add	r1, sp, #48	; 0x30
   2093c:	sub	r3, r0, #1
   20940:	mov	r0, r8
   20944:	mov	r2, r7
   20948:	bl	2768 <InflateSkipData>
   2094c:	ldr	r0, [fp, #24]
   20950:	ldr	r4, [sl]
   20954:	add	r1, sp, #48	; 0x30
   20958:	mov	r2, r6
   2095c:	mov	r3, r7
   20960:	ldr	sl, [r0]
   20964:	mov	r0, #1
   20968:	str	r0, [sp]
   2096c:	mov	r0, r8
   20970:	bl	8e60 <ReadCompressedSingleData>
   20974:	add	r9, sl, r9
   20978:	ldr	sl, [fp, #24]
   2097c:	add	r5, r5, #1
   20980:	sub	r0, r4, #1
   20984:	add	r6, r6, #4
   20988:	cmp	r5, r0
   2098c:	mov	r1, sl
   20990:	ldr	sl, [fp, #28]
   20994:	blt	2092c <ReadCompressedDataSlabN+0x31f8>
   20998:	b	209a4 <ReadCompressedDataSlabN+0x3270>
   2099c:	ldr	r9, [sp, #20]
   209a0:	ldr	r1, [fp, #24]
   209a4:	ldr	r0, [fp, #16]
   209a8:	ldr	r2, [sl]
   209ac:	ldr	r1, [r1]
   209b0:	ldr	r0, [r0]
   209b4:	sub	r2, r2, #1
   209b8:	mls	r0, r2, r1, r0
   209bc:	ldr	r1, [fp, #20]
   209c0:	ldr	r2, [fp, #8]
   209c4:	ldr	r1, [r1]
   209c8:	sub	r4, r0, r1
   209cc:	ldr	r0, [sp, #44]	; 0x2c
   209d0:	add	r1, sp, #48	; 0x30
   209d4:	sub	r3, r4, #1
   209d8:	bl	2768 <InflateSkipData>
   209dc:	ldr	r0, [fp, #12]
   209e0:	add	r9, r4, r9
   209e4:	cmp	r0, #2
   209e8:	blt	20b0c <ReadCompressedDataSlabN+0x33d8>
   209ec:	ldr	r8, [sp, #16]
   209f0:	ldr	r4, [sp, #32]
   209f4:	mov	r0, #0
   209f8:	add	r3, sp, #104	; 0x68
   209fc:	mov	r6, r0
   20a00:	ldr	r0, [r4, r0, lsl #2]
   20a04:	ldr	r1, [sp, #40]	; 0x28
   20a08:	add	r0, r0, #1
   20a0c:	str	r0, [r4, r6, lsl #2]
   20a10:	ldr	r1, [r1, r6, lsl #2]
   20a14:	sdiv	r2, r0, r1
   20a18:	mls	r0, r2, r1, r0
   20a1c:	cmp	r0, #0
   20a20:	bne	20ae4 <ReadCompressedDataSlabN+0x33b0>
   20a24:	mov	r0, #0
   20a28:	add	r5, r3, r6, lsl #2
   20a2c:	str	r0, [r4, r6, lsl #2]
   20a30:	ldr	r0, [r5, #4]
   20a34:	sdiv	r1, r9, r0
   20a38:	mls	r1, r1, r0, r9
   20a3c:	cmp	r1, #0
   20a40:	beq	20a94 <ReadCompressedDataSlabN+0x3360>
   20a44:	ldr	r2, [r3, r6, lsl #2]
   20a48:	ldr	r3, [r8, r6, lsl #2]
   20a4c:	sub	r0, r0, r1
   20a50:	add	r1, sp, #48	; 0x30
   20a54:	mla	r3, r3, r2, r0
   20a58:	ldr	r0, [sp, #44]	; 0x2c
   20a5c:	ldr	r2, [fp, #8]
   20a60:	bl	2768 <InflateSkipData>
   20a64:	ldr	r0, [r5, #4]
   20a68:	add	r3, sp, #104	; 0x68
   20a6c:	ldr	r4, [sp, #32]
   20a70:	sdiv	r2, r9, r0
   20a74:	add	r1, r0, r9
   20a78:	mul	r0, r2, r0
   20a7c:	ldr	r2, [r8, r6, lsl #2]
   20a80:	sub	r0, r0, r9
   20a84:	add	r0, r1, r0
   20a88:	ldr	r1, [r3, r6, lsl #2]
   20a8c:	mla	r9, r2, r1, r0
   20a90:	b	20acc <ReadCompressedDataSlabN+0x3398>
   20a94:	ldr	r0, [r8, r6, lsl #2]
   20a98:	cmp	r0, #0
   20a9c:	beq	20acc <ReadCompressedDataSlabN+0x3398>
   20aa0:	ldr	r1, [r3, r6, lsl #2]
   20aa4:	ldr	r2, [fp, #8]
   20aa8:	mul	r3, r1, r0
   20aac:	ldr	r0, [sp, #44]	; 0x2c
   20ab0:	add	r1, sp, #48	; 0x30
   20ab4:	bl	2768 <InflateSkipData>
   20ab8:	add	r3, sp, #104	; 0x68
   20abc:	ldr	r1, [r8, r6, lsl #2]
   20ac0:	ldr	r4, [sp, #32]
   20ac4:	ldr	r0, [r3, r6, lsl #2]
   20ac8:	mla	r9, r1, r0, r9
   20acc:	ldr	r2, [fp, #12]
   20ad0:	add	r1, r6, #2
   20ad4:	add	r0, r6, #1
   20ad8:	cmp	r1, r2
   20adc:	blt	209fc <ReadCompressedDataSlabN+0x32c8>
   20ae0:	b	20b0c <ReadCompressedDataSlabN+0x33d8>
   20ae4:	ldr	r0, [sp, #8]
   20ae8:	ldr	r6, [r0, r6, lsl #2]
   20aec:	cmp	r6, #0
   20af0:	beq	20b0c <ReadCompressedDataSlabN+0x33d8>
   20af4:	ldr	r0, [sp, #44]	; 0x2c
   20af8:	ldr	r2, [fp, #8]
   20afc:	add	r1, sp, #48	; 0x30
   20b00:	mov	r3, r6
   20b04:	bl	2768 <InflateSkipData>
   20b08:	add	r9, r6, r9
   20b0c:	ldr	r0, [sl]
   20b10:	ldr	r1, [sp, #24]
   20b14:	mov	r2, #1
   20b18:	add	r1, r0, r1
   20b1c:	ldr	r0, [sp, #28]
   20b20:	str	r1, [sp, #24]
   20b24:	cmp	r1, r0
   20b28:	add	r1, sp, #48	; 0x30
   20b2c:	blt	20890 <ReadCompressedDataSlabN+0x315c>
   20b30:	b	21d30 <ReadCompressedDataSlabN+0x45fc>
   20b34:	ldr	r0, [sp, #28]
   20b38:	cmp	r0, #1
   20b3c:	blt	21d30 <ReadCompressedDataSlabN+0x45fc>
   20b40:	ldr	r0, [fp, #20]
   20b44:	mov	r2, #1
   20b48:	add	r1, sp, #48	; 0x30
   20b4c:	add	r8, r0, #4
   20b50:	ldr	r0, [fp, #28]
   20b54:	str	r8, [sp, #16]
   20b58:	add	r0, r0, #4
   20b5c:	str	r0, [sp, #40]	; 0x28
   20b60:	sub	r0, fp, #112	; 0x70
   20b64:	orr	r4, r0, #4
   20b68:	sub	r0, fp, #72	; 0x48
   20b6c:	orr	r0, r0, #4
   20b70:	str	r4, [sp, #32]
   20b74:	str	r0, [sp, #8]
   20b78:	ldr	r0, [sp, #36]	; 0x24
   20b7c:	add	r0, r0, #2
   20b80:	str	r0, [sp, #12]
   20b84:	mov	r0, #0
   20b88:	str	r0, [sp, #20]
   20b8c:	ldr	r5, [fp, #20]
   20b90:	ldr	r3, [r5]
   20b94:	cmp	r3, #0
   20b98:	beq	20bd4 <ReadCompressedDataSlabN+0x34a0>
   20b9c:	mov	r7, r5
   20ba0:	ldr	r5, [sp, #44]	; 0x2c
   20ba4:	ldr	r6, [fp, #8]
   20ba8:	mov	r4, r1
   20bac:	mov	r0, r5
   20bb0:	mov	r2, r6
   20bb4:	bl	2768 <InflateSkipData>
   20bb8:	ldr	r0, [r7]
   20bbc:	ldr	sl, [fp, #28]
   20bc0:	mov	r3, r6
   20bc4:	mov	r2, #1
   20bc8:	add	r9, r0, r9
   20bcc:	ldr	r0, [sp, #36]	; 0x24
   20bd0:	b	20bec <ReadCompressedDataSlabN+0x34b8>
   20bd4:	ldr	r6, [fp, #8]
   20bd8:	ldr	r0, [sp, #36]	; 0x24
   20bdc:	ldr	r5, [sp, #44]	; 0x2c
   20be0:	ldr	sl, [fp, #28]
   20be4:	mov	r4, r1
   20be8:	mov	r3, r6
   20bec:	ldr	r6, [sp, #20]
   20bf0:	ldr	r8, [sl]
   20bf4:	str	r2, [sp]
   20bf8:	mov	r1, r4
   20bfc:	str	r9, [sp, #24]
   20c00:	add	r2, r0, r6, lsl #1
   20c04:	mov	r0, r5
   20c08:	bl	133ac <ReadCompressedInt16Data>
   20c0c:	cmp	r8, #2
   20c10:	blt	20c98 <ReadCompressedDataSlabN+0x3564>
   20c14:	ldr	r0, [sp, #12]
   20c18:	ldr	r9, [sp, #24]
   20c1c:	ldr	r1, [fp, #24]
   20c20:	mov	r5, #0
   20c24:	add	r6, r0, r6, lsl #1
   20c28:	ldr	r0, [r1]
   20c2c:	ldr	r7, [fp, #8]
   20c30:	ldr	r8, [sp, #44]	; 0x2c
   20c34:	add	r1, sp, #48	; 0x30
   20c38:	sub	r3, r0, #1
   20c3c:	mov	r0, r8
   20c40:	mov	r2, r7
   20c44:	bl	2768 <InflateSkipData>
   20c48:	ldr	r0, [fp, #24]
   20c4c:	ldr	r4, [sl]
   20c50:	add	r1, sp, #48	; 0x30
   20c54:	mov	r2, r6
   20c58:	mov	r3, r7
   20c5c:	ldr	sl, [r0]
   20c60:	mov	r0, #1
   20c64:	str	r0, [sp]
   20c68:	mov	r0, r8
   20c6c:	bl	133ac <ReadCompressedInt16Data>
   20c70:	add	r9, sl, r9
   20c74:	ldr	sl, [fp, #24]
   20c78:	add	r5, r5, #1
   20c7c:	sub	r0, r4, #1
   20c80:	add	r6, r6, #2
   20c84:	cmp	r5, r0
   20c88:	mov	r1, sl
   20c8c:	ldr	sl, [fp, #28]
   20c90:	blt	20c28 <ReadCompressedDataSlabN+0x34f4>
   20c94:	b	20ca0 <ReadCompressedDataSlabN+0x356c>
   20c98:	ldr	r9, [sp, #24]
   20c9c:	ldr	r1, [fp, #24]
   20ca0:	ldr	r0, [fp, #16]
   20ca4:	ldr	r2, [sl]
   20ca8:	ldr	r1, [r1]
   20cac:	ldr	r0, [r0]
   20cb0:	sub	r2, r2, #1
   20cb4:	mls	r0, r2, r1, r0
   20cb8:	ldr	r1, [fp, #20]
   20cbc:	ldr	r2, [fp, #8]
   20cc0:	ldr	r1, [r1]
   20cc4:	sub	r4, r0, r1
   20cc8:	ldr	r0, [sp, #44]	; 0x2c
   20ccc:	add	r1, sp, #48	; 0x30
   20cd0:	sub	r3, r4, #1
   20cd4:	bl	2768 <InflateSkipData>
   20cd8:	ldr	r0, [fp, #12]
   20cdc:	add	r9, r4, r9
   20ce0:	cmp	r0, #2
   20ce4:	blt	20e08 <ReadCompressedDataSlabN+0x36d4>
   20ce8:	ldr	r8, [sp, #16]
   20cec:	ldr	r4, [sp, #32]
   20cf0:	mov	r0, #0
   20cf4:	add	r3, sp, #104	; 0x68
   20cf8:	mov	r6, r0
   20cfc:	ldr	r0, [r4, r0, lsl #2]
   20d00:	ldr	r1, [sp, #40]	; 0x28
   20d04:	add	r0, r0, #1
   20d08:	str	r0, [r4, r6, lsl #2]
   20d0c:	ldr	r1, [r1, r6, lsl #2]
   20d10:	sdiv	r2, r0, r1
   20d14:	mls	r0, r2, r1, r0
   20d18:	cmp	r0, #0
   20d1c:	bne	20de0 <ReadCompressedDataSlabN+0x36ac>
   20d20:	mov	r0, #0
   20d24:	add	r5, r3, r6, lsl #2
   20d28:	str	r0, [r4, r6, lsl #2]
   20d2c:	ldr	r0, [r5, #4]
   20d30:	sdiv	r1, r9, r0
   20d34:	mls	r1, r1, r0, r9
   20d38:	cmp	r1, #0
   20d3c:	beq	20d90 <ReadCompressedDataSlabN+0x365c>
   20d40:	ldr	r2, [r3, r6, lsl #2]
   20d44:	ldr	r3, [r8, r6, lsl #2]
   20d48:	sub	r0, r0, r1
   20d4c:	add	r1, sp, #48	; 0x30
   20d50:	mla	r3, r3, r2, r0
   20d54:	ldr	r0, [sp, #44]	; 0x2c
   20d58:	ldr	r2, [fp, #8]
   20d5c:	bl	2768 <InflateSkipData>
   20d60:	ldr	r0, [r5, #4]
   20d64:	add	r3, sp, #104	; 0x68
   20d68:	ldr	r4, [sp, #32]
   20d6c:	sdiv	r2, r9, r0
   20d70:	add	r1, r0, r9
   20d74:	mul	r0, r2, r0
   20d78:	ldr	r2, [r8, r6, lsl #2]
   20d7c:	sub	r0, r0, r9
   20d80:	add	r0, r1, r0
   20d84:	ldr	r1, [r3, r6, lsl #2]
   20d88:	mla	r9, r2, r1, r0
   20d8c:	b	20dc8 <ReadCompressedDataSlabN+0x3694>
   20d90:	ldr	r0, [r8, r6, lsl #2]
   20d94:	cmp	r0, #0
   20d98:	beq	20dc8 <ReadCompressedDataSlabN+0x3694>
   20d9c:	ldr	r1, [r3, r6, lsl #2]
   20da0:	ldr	r2, [fp, #8]
   20da4:	mul	r3, r1, r0
   20da8:	ldr	r0, [sp, #44]	; 0x2c
   20dac:	add	r1, sp, #48	; 0x30
   20db0:	bl	2768 <InflateSkipData>
   20db4:	add	r3, sp, #104	; 0x68
   20db8:	ldr	r1, [r8, r6, lsl #2]
   20dbc:	ldr	r4, [sp, #32]
   20dc0:	ldr	r0, [r3, r6, lsl #2]
   20dc4:	mla	r9, r1, r0, r9
   20dc8:	ldr	r2, [fp, #12]
   20dcc:	add	r1, r6, #2
   20dd0:	add	r0, r6, #1
   20dd4:	cmp	r1, r2
   20dd8:	blt	20cf8 <ReadCompressedDataSlabN+0x35c4>
   20ddc:	b	20e08 <ReadCompressedDataSlabN+0x36d4>
   20de0:	ldr	r0, [sp, #8]
   20de4:	ldr	r6, [r0, r6, lsl #2]
   20de8:	cmp	r6, #0
   20dec:	beq	20e08 <ReadCompressedDataSlabN+0x36d4>
   20df0:	ldr	r0, [sp, #44]	; 0x2c
   20df4:	ldr	r2, [fp, #8]
   20df8:	add	r1, sp, #48	; 0x30
   20dfc:	mov	r3, r6
   20e00:	bl	2768 <InflateSkipData>
   20e04:	add	r9, r6, r9
   20e08:	ldr	r0, [sl]
   20e0c:	ldr	r1, [sp, #20]
   20e10:	mov	r2, #1
   20e14:	add	r1, r0, r1
   20e18:	ldr	r0, [sp, #28]
   20e1c:	str	r1, [sp, #20]
   20e20:	cmp	r1, r0
   20e24:	add	r1, sp, #48	; 0x30
   20e28:	blt	20b8c <ReadCompressedDataSlabN+0x3458>
   20e2c:	b	21d30 <ReadCompressedDataSlabN+0x45fc>
   20e30:	ldr	r0, [sp, #28]
   20e34:	cmp	r0, #1
   20e38:	blt	21d30 <ReadCompressedDataSlabN+0x45fc>
   20e3c:	ldr	r0, [fp, #20]
   20e40:	mov	r2, #1
   20e44:	add	r1, sp, #48	; 0x30
   20e48:	add	r8, r0, #4
   20e4c:	ldr	r0, [fp, #28]
   20e50:	str	r8, [sp, #16]
   20e54:	add	r0, r0, #4
   20e58:	str	r0, [sp, #40]	; 0x28
   20e5c:	sub	r0, fp, #112	; 0x70
   20e60:	orr	r4, r0, #4
   20e64:	sub	r0, fp, #72	; 0x48
   20e68:	orr	r0, r0, #4
   20e6c:	str	r4, [sp, #32]
   20e70:	str	r0, [sp, #8]
   20e74:	ldr	r0, [sp, #36]	; 0x24
   20e78:	add	r0, r0, #2
   20e7c:	str	r0, [sp, #12]
   20e80:	mov	r0, #0
   20e84:	str	r0, [sp, #20]
   20e88:	ldr	r5, [fp, #20]
   20e8c:	ldr	r3, [r5]
   20e90:	cmp	r3, #0
   20e94:	beq	20ed0 <ReadCompressedDataSlabN+0x379c>
   20e98:	mov	r7, r5
   20e9c:	ldr	r5, [sp, #44]	; 0x2c
   20ea0:	ldr	r6, [fp, #8]
   20ea4:	mov	r4, r1
   20ea8:	mov	r0, r5
   20eac:	mov	r2, r6
   20eb0:	bl	2768 <InflateSkipData>
   20eb4:	ldr	r0, [r7]
   20eb8:	ldr	sl, [fp, #28]
   20ebc:	mov	r3, r6
   20ec0:	mov	r2, #1
   20ec4:	add	r9, r0, r9
   20ec8:	ldr	r0, [sp, #36]	; 0x24
   20ecc:	b	20ee8 <ReadCompressedDataSlabN+0x37b4>
   20ed0:	ldr	r6, [fp, #8]
   20ed4:	ldr	r0, [sp, #36]	; 0x24
   20ed8:	ldr	r5, [sp, #44]	; 0x2c
   20edc:	ldr	sl, [fp, #28]
   20ee0:	mov	r4, r1
   20ee4:	mov	r3, r6
   20ee8:	ldr	r6, [sp, #20]
   20eec:	ldr	r8, [sl]
   20ef0:	str	r2, [sp]
   20ef4:	mov	r1, r4
   20ef8:	str	r9, [sp, #24]
   20efc:	add	r2, r0, r6, lsl #1
   20f00:	mov	r0, r5
   20f04:	bl	15344 <ReadCompressedUInt16Data>
   20f08:	cmp	r8, #2
   20f0c:	blt	20f94 <ReadCompressedDataSlabN+0x3860>
   20f10:	ldr	r0, [sp, #12]
   20f14:	ldr	r9, [sp, #24]
   20f18:	ldr	r1, [fp, #24]
   20f1c:	mov	r5, #0
   20f20:	add	r6, r0, r6, lsl #1
   20f24:	ldr	r0, [r1]
   20f28:	ldr	r7, [fp, #8]
   20f2c:	ldr	r8, [sp, #44]	; 0x2c
   20f30:	add	r1, sp, #48	; 0x30
   20f34:	sub	r3, r0, #1
   20f38:	mov	r0, r8
   20f3c:	mov	r2, r7
   20f40:	bl	2768 <InflateSkipData>
   20f44:	ldr	r0, [fp, #24]
   20f48:	ldr	r4, [sl]
   20f4c:	add	r1, sp, #48	; 0x30
   20f50:	mov	r2, r6
   20f54:	mov	r3, r7
   20f58:	ldr	sl, [r0]
   20f5c:	mov	r0, #1
   20f60:	str	r0, [sp]
   20f64:	mov	r0, r8
   20f68:	bl	15344 <ReadCompressedUInt16Data>
   20f6c:	add	r9, sl, r9
   20f70:	ldr	sl, [fp, #24]
   20f74:	add	r5, r5, #1
   20f78:	sub	r0, r4, #1
   20f7c:	add	r6, r6, #2
   20f80:	cmp	r5, r0
   20f84:	mov	r1, sl
   20f88:	ldr	sl, [fp, #28]
   20f8c:	blt	20f24 <ReadCompressedDataSlabN+0x37f0>
   20f90:	b	20f9c <ReadCompressedDataSlabN+0x3868>
   20f94:	ldr	r9, [sp, #24]
   20f98:	ldr	r1, [fp, #24]
   20f9c:	ldr	r0, [fp, #16]
   20fa0:	ldr	r2, [sl]
   20fa4:	ldr	r1, [r1]
   20fa8:	ldr	r0, [r0]
   20fac:	sub	r2, r2, #1
   20fb0:	mls	r0, r2, r1, r0
   20fb4:	ldr	r1, [fp, #20]
   20fb8:	ldr	r2, [fp, #8]
   20fbc:	ldr	r1, [r1]
   20fc0:	sub	r4, r0, r1
   20fc4:	ldr	r0, [sp, #44]	; 0x2c
   20fc8:	add	r1, sp, #48	; 0x30
   20fcc:	sub	r3, r4, #1
   20fd0:	bl	2768 <InflateSkipData>
   20fd4:	ldr	r0, [fp, #12]
   20fd8:	add	r9, r4, r9
   20fdc:	cmp	r0, #2
   20fe0:	blt	21104 <ReadCompressedDataSlabN+0x39d0>
   20fe4:	ldr	r8, [sp, #16]
   20fe8:	ldr	r4, [sp, #32]
   20fec:	mov	r0, #0
   20ff0:	add	r3, sp, #104	; 0x68
   20ff4:	mov	r6, r0
   20ff8:	ldr	r0, [r4, r0, lsl #2]
   20ffc:	ldr	r1, [sp, #40]	; 0x28
   21000:	add	r0, r0, #1
   21004:	str	r0, [r4, r6, lsl #2]
   21008:	ldr	r1, [r1, r6, lsl #2]
   2100c:	sdiv	r2, r0, r1
   21010:	mls	r0, r2, r1, r0
   21014:	cmp	r0, #0
   21018:	bne	210dc <ReadCompressedDataSlabN+0x39a8>
   2101c:	mov	r0, #0
   21020:	add	r5, r3, r6, lsl #2
   21024:	str	r0, [r4, r6, lsl #2]
   21028:	ldr	r0, [r5, #4]
   2102c:	sdiv	r1, r9, r0
   21030:	mls	r1, r1, r0, r9
   21034:	cmp	r1, #0
   21038:	beq	2108c <ReadCompressedDataSlabN+0x3958>
   2103c:	ldr	r2, [r3, r6, lsl #2]
   21040:	ldr	r3, [r8, r6, lsl #2]
   21044:	sub	r0, r0, r1
   21048:	add	r1, sp, #48	; 0x30
   2104c:	mla	r3, r3, r2, r0
   21050:	ldr	r0, [sp, #44]	; 0x2c
   21054:	ldr	r2, [fp, #8]
   21058:	bl	2768 <InflateSkipData>
   2105c:	ldr	r0, [r5, #4]
   21060:	add	r3, sp, #104	; 0x68
   21064:	ldr	r4, [sp, #32]
   21068:	sdiv	r2, r9, r0
   2106c:	add	r1, r0, r9
   21070:	mul	r0, r2, r0
   21074:	ldr	r2, [r8, r6, lsl #2]
   21078:	sub	r0, r0, r9
   2107c:	add	r0, r1, r0
   21080:	ldr	r1, [r3, r6, lsl #2]
   21084:	mla	r9, r2, r1, r0
   21088:	b	210c4 <ReadCompressedDataSlabN+0x3990>
   2108c:	ldr	r0, [r8, r6, lsl #2]
   21090:	cmp	r0, #0
   21094:	beq	210c4 <ReadCompressedDataSlabN+0x3990>
   21098:	ldr	r1, [r3, r6, lsl #2]
   2109c:	ldr	r2, [fp, #8]
   210a0:	mul	r3, r1, r0
   210a4:	ldr	r0, [sp, #44]	; 0x2c
   210a8:	add	r1, sp, #48	; 0x30
   210ac:	bl	2768 <InflateSkipData>
   210b0:	add	r3, sp, #104	; 0x68
   210b4:	ldr	r1, [r8, r6, lsl #2]
   210b8:	ldr	r4, [sp, #32]
   210bc:	ldr	r0, [r3, r6, lsl #2]
   210c0:	mla	r9, r1, r0, r9
   210c4:	ldr	r2, [fp, #12]
   210c8:	add	r1, r6, #2
   210cc:	add	r0, r6, #1
   210d0:	cmp	r1, r2
   210d4:	blt	20ff4 <ReadCompressedDataSlabN+0x38c0>
   210d8:	b	21104 <ReadCompressedDataSlabN+0x39d0>
   210dc:	ldr	r0, [sp, #8]
   210e0:	ldr	r6, [r0, r6, lsl #2]
   210e4:	cmp	r6, #0
   210e8:	beq	21104 <ReadCompressedDataSlabN+0x39d0>
   210ec:	ldr	r0, [sp, #44]	; 0x2c
   210f0:	ldr	r2, [fp, #8]
   210f4:	add	r1, sp, #48	; 0x30
   210f8:	mov	r3, r6
   210fc:	bl	2768 <InflateSkipData>
   21100:	add	r9, r6, r9
   21104:	ldr	r0, [sl]
   21108:	ldr	r1, [sp, #20]
   2110c:	mov	r2, #1
   21110:	add	r1, r0, r1
   21114:	ldr	r0, [sp, #28]
   21118:	str	r1, [sp, #20]
   2111c:	cmp	r1, r0
   21120:	add	r1, sp, #48	; 0x30
   21124:	blt	20e88 <ReadCompressedDataSlabN+0x3754>
   21128:	b	21d30 <ReadCompressedDataSlabN+0x45fc>
   2112c:	ldr	r0, [sp, #28]
   21130:	cmp	r0, #1
   21134:	blt	21d30 <ReadCompressedDataSlabN+0x45fc>
   21138:	ldr	r0, [fp, #20]
   2113c:	mov	r2, #1
   21140:	add	r1, sp, #48	; 0x30
   21144:	add	r8, r0, #4
   21148:	ldr	r0, [fp, #28]
   2114c:	str	r8, [sp, #16]
   21150:	add	r0, r0, #4
   21154:	str	r0, [sp, #40]	; 0x28
   21158:	sub	r0, fp, #112	; 0x70
   2115c:	orr	r4, r0, #4
   21160:	sub	r0, fp, #72	; 0x48
   21164:	orr	r0, r0, #4
   21168:	str	r4, [sp, #32]
   2116c:	str	r0, [sp, #8]
   21170:	ldr	r0, [sp, #36]	; 0x24
   21174:	add	r0, r0, #4
   21178:	str	r0, [sp, #12]
   2117c:	mov	r0, #0
   21180:	str	r0, [sp, #20]
   21184:	ldr	r5, [fp, #20]
   21188:	ldr	r3, [r5]
   2118c:	cmp	r3, #0
   21190:	beq	211cc <ReadCompressedDataSlabN+0x3a98>
   21194:	mov	r7, r5
   21198:	ldr	r5, [sp, #44]	; 0x2c
   2119c:	ldr	r6, [fp, #8]
   211a0:	mov	r4, r1
   211a4:	mov	r0, r5
   211a8:	mov	r2, r6
   211ac:	bl	2768 <InflateSkipData>
   211b0:	ldr	r0, [r7]
   211b4:	ldr	sl, [fp, #28]
   211b8:	mov	r3, r6
   211bc:	mov	r2, #1
   211c0:	add	r9, r0, r9
   211c4:	ldr	r0, [sp, #36]	; 0x24
   211c8:	b	211e4 <ReadCompressedDataSlabN+0x3ab0>
   211cc:	ldr	r6, [fp, #8]
   211d0:	ldr	r0, [sp, #36]	; 0x24
   211d4:	ldr	r5, [sp, #44]	; 0x2c
   211d8:	ldr	sl, [fp, #28]
   211dc:	mov	r4, r1
   211e0:	mov	r3, r6
   211e4:	ldr	r6, [sp, #20]
   211e8:	ldr	r8, [sl]
   211ec:	str	r2, [sp]
   211f0:	mov	r1, r4
   211f4:	str	r9, [sp, #24]
   211f8:	add	r2, r0, r6, lsl #2
   211fc:	mov	r0, r5
   21200:	bl	f32c <ReadCompressedInt32Data>
   21204:	cmp	r8, #2
   21208:	blt	21290 <ReadCompressedDataSlabN+0x3b5c>
   2120c:	ldr	r0, [sp, #12]
   21210:	ldr	r9, [sp, #24]
   21214:	ldr	r1, [fp, #24]
   21218:	mov	r5, #0
   2121c:	add	r6, r0, r6, lsl #2
   21220:	ldr	r0, [r1]
   21224:	ldr	r7, [fp, #8]
   21228:	ldr	r8, [sp, #44]	; 0x2c
   2122c:	add	r1, sp, #48	; 0x30
   21230:	sub	r3, r0, #1
   21234:	mov	r0, r8
   21238:	mov	r2, r7
   2123c:	bl	2768 <InflateSkipData>
   21240:	ldr	r0, [fp, #24]
   21244:	ldr	r4, [sl]
   21248:	add	r1, sp, #48	; 0x30
   2124c:	mov	r2, r6
   21250:	mov	r3, r7
   21254:	ldr	sl, [r0]
   21258:	mov	r0, #1
   2125c:	str	r0, [sp]
   21260:	mov	r0, r8
   21264:	bl	f32c <ReadCompressedInt32Data>
   21268:	add	r9, sl, r9
   2126c:	ldr	sl, [fp, #24]
   21270:	add	r5, r5, #1
   21274:	sub	r0, r4, #1
   21278:	add	r6, r6, #4
   2127c:	cmp	r5, r0
   21280:	mov	r1, sl
   21284:	ldr	sl, [fp, #28]
   21288:	blt	21220 <ReadCompressedDataSlabN+0x3aec>
   2128c:	b	21298 <ReadCompressedDataSlabN+0x3b64>
   21290:	ldr	r9, [sp, #24]
   21294:	ldr	r1, [fp, #24]
   21298:	ldr	r0, [fp, #16]
   2129c:	ldr	r2, [sl]
   212a0:	ldr	r1, [r1]
   212a4:	ldr	r0, [r0]
   212a8:	sub	r2, r2, #1
   212ac:	mls	r0, r2, r1, r0
   212b0:	ldr	r1, [fp, #20]
   212b4:	ldr	r2, [fp, #8]
   212b8:	ldr	r1, [r1]
   212bc:	sub	r4, r0, r1
   212c0:	ldr	r0, [sp, #44]	; 0x2c
   212c4:	add	r1, sp, #48	; 0x30
   212c8:	sub	r3, r4, #1
   212cc:	bl	2768 <InflateSkipData>
   212d0:	ldr	r0, [fp, #12]
   212d4:	add	r9, r4, r9
   212d8:	cmp	r0, #2
   212dc:	blt	21400 <ReadCompressedDataSlabN+0x3ccc>
   212e0:	ldr	r8, [sp, #16]
   212e4:	ldr	r4, [sp, #32]
   212e8:	mov	r0, #0
   212ec:	add	r3, sp, #104	; 0x68
   212f0:	mov	r6, r0
   212f4:	ldr	r0, [r4, r0, lsl #2]
   212f8:	ldr	r1, [sp, #40]	; 0x28
   212fc:	add	r0, r0, #1
   21300:	str	r0, [r4, r6, lsl #2]
   21304:	ldr	r1, [r1, r6, lsl #2]
   21308:	sdiv	r2, r0, r1
   2130c:	mls	r0, r2, r1, r0
   21310:	cmp	r0, #0
   21314:	bne	213d8 <ReadCompressedDataSlabN+0x3ca4>
   21318:	mov	r0, #0
   2131c:	add	r5, r3, r6, lsl #2
   21320:	str	r0, [r4, r6, lsl #2]
   21324:	ldr	r0, [r5, #4]
   21328:	sdiv	r1, r9, r0
   2132c:	mls	r1, r1, r0, r9
   21330:	cmp	r1, #0
   21334:	beq	21388 <ReadCompressedDataSlabN+0x3c54>
   21338:	ldr	r2, [r3, r6, lsl #2]
   2133c:	ldr	r3, [r8, r6, lsl #2]
   21340:	sub	r0, r0, r1
   21344:	add	r1, sp, #48	; 0x30
   21348:	mla	r3, r3, r2, r0
   2134c:	ldr	r0, [sp, #44]	; 0x2c
   21350:	ldr	r2, [fp, #8]
   21354:	bl	2768 <InflateSkipData>
   21358:	ldr	r0, [r5, #4]
   2135c:	add	r3, sp, #104	; 0x68
   21360:	ldr	r4, [sp, #32]
   21364:	sdiv	r2, r9, r0
   21368:	add	r1, r0, r9
   2136c:	mul	r0, r2, r0
   21370:	ldr	r2, [r8, r6, lsl #2]
   21374:	sub	r0, r0, r9
   21378:	add	r0, r1, r0
   2137c:	ldr	r1, [r3, r6, lsl #2]
   21380:	mla	r9, r2, r1, r0
   21384:	b	213c0 <ReadCompressedDataSlabN+0x3c8c>
   21388:	ldr	r0, [r8, r6, lsl #2]
   2138c:	cmp	r0, #0
   21390:	beq	213c0 <ReadCompressedDataSlabN+0x3c8c>
   21394:	ldr	r1, [r3, r6, lsl #2]
   21398:	ldr	r2, [fp, #8]
   2139c:	mul	r3, r1, r0
   213a0:	ldr	r0, [sp, #44]	; 0x2c
   213a4:	add	r1, sp, #48	; 0x30
   213a8:	bl	2768 <InflateSkipData>
   213ac:	add	r3, sp, #104	; 0x68
   213b0:	ldr	r1, [r8, r6, lsl #2]
   213b4:	ldr	r4, [sp, #32]
   213b8:	ldr	r0, [r3, r6, lsl #2]
   213bc:	mla	r9, r1, r0, r9
   213c0:	ldr	r2, [fp, #12]
   213c4:	add	r1, r6, #2
   213c8:	add	r0, r6, #1
   213cc:	cmp	r1, r2
   213d0:	blt	212f0 <ReadCompressedDataSlabN+0x3bbc>
   213d4:	b	21400 <ReadCompressedDataSlabN+0x3ccc>
   213d8:	ldr	r0, [sp, #8]
   213dc:	ldr	r6, [r0, r6, lsl #2]
   213e0:	cmp	r6, #0
   213e4:	beq	21400 <ReadCompressedDataSlabN+0x3ccc>
   213e8:	ldr	r0, [sp, #44]	; 0x2c
   213ec:	ldr	r2, [fp, #8]
   213f0:	add	r1, sp, #48	; 0x30
   213f4:	mov	r3, r6
   213f8:	bl	2768 <InflateSkipData>
   213fc:	add	r9, r6, r9
   21400:	ldr	r0, [sl]
   21404:	ldr	r1, [sp, #20]
   21408:	mov	r2, #1
   2140c:	add	r1, r0, r1
   21410:	ldr	r0, [sp, #28]
   21414:	str	r1, [sp, #20]
   21418:	cmp	r1, r0
   2141c:	add	r1, sp, #48	; 0x30
   21420:	blt	21184 <ReadCompressedDataSlabN+0x3a50>
   21424:	b	21d30 <ReadCompressedDataSlabN+0x45fc>
   21428:	ldr	r0, [sp, #28]
   2142c:	cmp	r0, #1
   21430:	blt	21d30 <ReadCompressedDataSlabN+0x45fc>
   21434:	ldr	r0, [fp, #20]
   21438:	mov	r2, #1
   2143c:	add	r1, sp, #48	; 0x30
   21440:	add	r8, r0, #4
   21444:	ldr	r0, [fp, #28]
   21448:	str	r8, [sp, #16]
   2144c:	add	r0, r0, #4
   21450:	str	r0, [sp, #40]	; 0x28
   21454:	sub	r0, fp, #112	; 0x70
   21458:	orr	r4, r0, #4
   2145c:	sub	r0, fp, #72	; 0x48
   21460:	orr	r0, r0, #4
   21464:	str	r4, [sp, #32]
   21468:	str	r0, [sp, #8]
   2146c:	ldr	r0, [sp, #36]	; 0x24
   21470:	add	r0, r0, #4
   21474:	str	r0, [sp, #12]
   21478:	mov	r0, #0
   2147c:	str	r0, [sp, #20]
   21480:	ldr	r5, [fp, #20]
   21484:	ldr	r3, [r5]
   21488:	cmp	r3, #0
   2148c:	beq	214c8 <ReadCompressedDataSlabN+0x3d94>
   21490:	mov	r7, r5
   21494:	ldr	r5, [sp, #44]	; 0x2c
   21498:	ldr	r6, [fp, #8]
   2149c:	mov	r4, r1
   214a0:	mov	r0, r5
   214a4:	mov	r2, r6
   214a8:	bl	2768 <InflateSkipData>
   214ac:	ldr	r0, [r7]
   214b0:	ldr	sl, [fp, #28]
   214b4:	mov	r3, r6
   214b8:	mov	r2, #1
   214bc:	add	r9, r0, r9
   214c0:	ldr	r0, [sp, #36]	; 0x24
   214c4:	b	214e0 <ReadCompressedDataSlabN+0x3dac>
   214c8:	ldr	r6, [fp, #8]
   214cc:	ldr	r0, [sp, #36]	; 0x24
   214d0:	ldr	r5, [sp, #44]	; 0x2c
   214d4:	ldr	sl, [fp, #28]
   214d8:	mov	r4, r1
   214dc:	mov	r3, r6
   214e0:	ldr	r6, [sp, #20]
   214e4:	ldr	r8, [sl]
   214e8:	str	r2, [sp]
   214ec:	mov	r1, r4
   214f0:	str	r9, [sp, #24]
   214f4:	add	r2, r0, r6, lsl #2
   214f8:	mov	r0, r5
   214fc:	bl	11414 <ReadCompressedUInt32Data>
   21500:	cmp	r8, #2
   21504:	blt	2158c <ReadCompressedDataSlabN+0x3e58>
   21508:	ldr	r0, [sp, #12]
   2150c:	ldr	r9, [sp, #24]
   21510:	ldr	r1, [fp, #24]
   21514:	mov	r5, #0
   21518:	add	r6, r0, r6, lsl #2
   2151c:	ldr	r0, [r1]
   21520:	ldr	r7, [fp, #8]
   21524:	ldr	r8, [sp, #44]	; 0x2c
   21528:	add	r1, sp, #48	; 0x30
   2152c:	sub	r3, r0, #1
   21530:	mov	r0, r8
   21534:	mov	r2, r7
   21538:	bl	2768 <InflateSkipData>
   2153c:	ldr	r0, [fp, #24]
   21540:	ldr	r4, [sl]
   21544:	add	r1, sp, #48	; 0x30
   21548:	mov	r2, r6
   2154c:	mov	r3, r7
   21550:	ldr	sl, [r0]
   21554:	mov	r0, #1
   21558:	str	r0, [sp]
   2155c:	mov	r0, r8
   21560:	bl	11414 <ReadCompressedUInt32Data>
   21564:	add	r9, sl, r9
   21568:	ldr	sl, [fp, #24]
   2156c:	add	r5, r5, #1
   21570:	sub	r0, r4, #1
   21574:	add	r6, r6, #4
   21578:	cmp	r5, r0
   2157c:	mov	r1, sl
   21580:	ldr	sl, [fp, #28]
   21584:	blt	2151c <ReadCompressedDataSlabN+0x3de8>
   21588:	b	21594 <ReadCompressedDataSlabN+0x3e60>
   2158c:	ldr	r9, [sp, #24]
   21590:	ldr	r1, [fp, #24]
   21594:	ldr	r0, [fp, #16]
   21598:	ldr	r2, [sl]
   2159c:	ldr	r1, [r1]
   215a0:	ldr	r0, [r0]
   215a4:	sub	r2, r2, #1
   215a8:	mls	r0, r2, r1, r0
   215ac:	ldr	r1, [fp, #20]
   215b0:	ldr	r2, [fp, #8]
   215b4:	ldr	r1, [r1]
   215b8:	sub	r4, r0, r1
   215bc:	ldr	r0, [sp, #44]	; 0x2c
   215c0:	add	r1, sp, #48	; 0x30
   215c4:	sub	r3, r4, #1
   215c8:	bl	2768 <InflateSkipData>
   215cc:	ldr	r0, [fp, #12]
   215d0:	add	r9, r4, r9
   215d4:	cmp	r0, #2
   215d8:	blt	216fc <ReadCompressedDataSlabN+0x3fc8>
   215dc:	ldr	r8, [sp, #16]
   215e0:	ldr	r4, [sp, #32]
   215e4:	mov	r0, #0
   215e8:	add	r3, sp, #104	; 0x68
   215ec:	mov	r6, r0
   215f0:	ldr	r0, [r4, r0, lsl #2]
   215f4:	ldr	r1, [sp, #40]	; 0x28
   215f8:	add	r0, r0, #1
   215fc:	str	r0, [r4, r6, lsl #2]
   21600:	ldr	r1, [r1, r6, lsl #2]
   21604:	sdiv	r2, r0, r1
   21608:	mls	r0, r2, r1, r0
   2160c:	cmp	r0, #0
   21610:	bne	216d4 <ReadCompressedDataSlabN+0x3fa0>
   21614:	mov	r0, #0
   21618:	add	r5, r3, r6, lsl #2
   2161c:	str	r0, [r4, r6, lsl #2]
   21620:	ldr	r0, [r5, #4]
   21624:	sdiv	r1, r9, r0
   21628:	mls	r1, r1, r0, r9
   2162c:	cmp	r1, #0
   21630:	beq	21684 <ReadCompressedDataSlabN+0x3f50>
   21634:	ldr	r2, [r3, r6, lsl #2]
   21638:	ldr	r3, [r8, r6, lsl #2]
   2163c:	sub	r0, r0, r1
   21640:	add	r1, sp, #48	; 0x30
   21644:	mla	r3, r3, r2, r0
   21648:	ldr	r0, [sp, #44]	; 0x2c
   2164c:	ldr	r2, [fp, #8]
   21650:	bl	2768 <InflateSkipData>
   21654:	ldr	r0, [r5, #4]
   21658:	add	r3, sp, #104	; 0x68
   2165c:	ldr	r4, [sp, #32]
   21660:	sdiv	r2, r9, r0
   21664:	add	r1, r0, r9
   21668:	mul	r0, r2, r0
   2166c:	ldr	r2, [r8, r6, lsl #2]
   21670:	sub	r0, r0, r9
   21674:	add	r0, r1, r0
   21678:	ldr	r1, [r3, r6, lsl #2]
   2167c:	mla	r9, r2, r1, r0
   21680:	b	216bc <ReadCompressedDataSlabN+0x3f88>
   21684:	ldr	r0, [r8, r6, lsl #2]
   21688:	cmp	r0, #0
   2168c:	beq	216bc <ReadCompressedDataSlabN+0x3f88>
   21690:	ldr	r1, [r3, r6, lsl #2]
   21694:	ldr	r2, [fp, #8]
   21698:	mul	r3, r1, r0
   2169c:	ldr	r0, [sp, #44]	; 0x2c
   216a0:	add	r1, sp, #48	; 0x30
   216a4:	bl	2768 <InflateSkipData>
   216a8:	add	r3, sp, #104	; 0x68
   216ac:	ldr	r1, [r8, r6, lsl #2]
   216b0:	ldr	r4, [sp, #32]
   216b4:	ldr	r0, [r3, r6, lsl #2]
   216b8:	mla	r9, r1, r0, r9
   216bc:	ldr	r2, [fp, #12]
   216c0:	add	r1, r6, #2
   216c4:	add	r0, r6, #1
   216c8:	cmp	r1, r2
   216cc:	blt	215ec <ReadCompressedDataSlabN+0x3eb8>
   216d0:	b	216fc <ReadCompressedDataSlabN+0x3fc8>
   216d4:	ldr	r0, [sp, #8]
   216d8:	ldr	r6, [r0, r6, lsl #2]
   216dc:	cmp	r6, #0
   216e0:	beq	216fc <ReadCompressedDataSlabN+0x3fc8>
   216e4:	ldr	r0, [sp, #44]	; 0x2c
   216e8:	ldr	r2, [fp, #8]
   216ec:	add	r1, sp, #48	; 0x30
   216f0:	mov	r3, r6
   216f4:	bl	2768 <InflateSkipData>
   216f8:	add	r9, r6, r9
   216fc:	ldr	r0, [sl]
   21700:	ldr	r1, [sp, #20]
   21704:	mov	r2, #1
   21708:	add	r1, r0, r1
   2170c:	ldr	r0, [sp, #28]
   21710:	str	r1, [sp, #20]
   21714:	cmp	r1, r0
   21718:	add	r1, sp, #48	; 0x30
   2171c:	blt	21480 <ReadCompressedDataSlabN+0x3d4c>
   21720:	b	21d30 <ReadCompressedDataSlabN+0x45fc>
   21724:	ldr	r0, [sp, #24]
   21728:	cmp	r0, #1
   2172c:	blt	21d30 <ReadCompressedDataSlabN+0x45fc>
   21730:	ldr	r0, [fp, #20]
   21734:	mov	r8, #1
   21738:	add	r4, sp, #48	; 0x30
   2173c:	add	r0, r0, #4
   21740:	str	r0, [sp, #12]
   21744:	ldr	r0, [fp, #28]
   21748:	add	r0, r0, #4
   2174c:	str	r0, [sp, #32]
   21750:	sub	r0, fp, #112	; 0x70
   21754:	orr	r0, r0, #4
   21758:	str	r0, [sp, #28]
   2175c:	sub	r0, fp, #72	; 0x48
   21760:	orr	r0, r0, #4
   21764:	str	r0, [sp, #4]
   21768:	ldr	r0, [sp, #36]	; 0x24
   2176c:	add	r0, r0, #8
   21770:	str	r0, [sp, #8]
   21774:	mov	r0, #0
   21778:	str	r0, [sp, #16]
   2177c:	ldr	r5, [fp, #20]
   21780:	ldr	r3, [r5]
   21784:	cmp	r3, #0
   21788:	beq	217c8 <ReadCompressedDataSlabN+0x4094>
   2178c:	mov	sl, r5
   21790:	ldr	r7, [sp, #44]	; 0x2c
   21794:	ldr	r5, [fp, #8]
   21798:	mov	r1, r4
   2179c:	mov	r6, r9
   217a0:	mov	r0, r7
   217a4:	mov	r2, r5
   217a8:	bl	2768 <InflateSkipData>
   217ac:	ldr	r1, [sl]
   217b0:	ldr	sl, [fp, #28]
   217b4:	mov	r0, r7
   217b8:	add	r6, r1, r9
   217bc:	ldr	r1, [sp, #36]	; 0x24
   217c0:	str	r6, [sp, #20]
   217c4:	b	217dc <ReadCompressedDataSlabN+0x40a8>
   217c8:	ldr	r1, [sp, #36]	; 0x24
   217cc:	ldr	r0, [sp, #44]	; 0x2c
   217d0:	ldr	sl, [fp, #28]
   217d4:	ldr	r5, [fp, #8]
   217d8:	str	r9, [sp, #20]
   217dc:	ldr	r6, [sp, #16]
   217e0:	ldr	r7, [sl]
   217e4:	mov	r3, r5
   217e8:	str	r8, [sp]
   217ec:	add	r2, r1, r6, lsl #3
   217f0:	mov	r1, r4
   217f4:	bl	b01c <ReadCompressedInt64Data>
   217f8:	cmp	r7, #2
   217fc:	blt	21890 <ReadCompressedDataSlabN+0x415c>
   21800:	ldr	r0, [sp, #8]
   21804:	ldr	r9, [sp, #20]
   21808:	ldr	r1, [fp, #24]
   2180c:	mov	r5, #0
   21810:	add	r6, r0, r6, lsl #3
   21814:	ldr	r0, [r1]
   21818:	ldr	r7, [fp, #8]
   2181c:	ldr	r8, [sp, #44]	; 0x2c
   21820:	add	r4, sp, #48	; 0x30
   21824:	mov	r1, r4
   21828:	sub	r3, r0, #1
   2182c:	mov	r0, r8
   21830:	mov	r2, r7
   21834:	bl	2768 <InflateSkipData>
   21838:	ldr	r0, [sl]
   2183c:	mov	r1, r4
   21840:	mov	r2, r6
   21844:	mov	r3, r7
   21848:	str	r0, [sp, #40]	; 0x28
   2184c:	ldr	r0, [fp, #24]
   21850:	ldr	sl, [r0]
   21854:	mov	r0, #1
   21858:	str	r0, [sp]
   2185c:	mov	r0, r8
   21860:	bl	b01c <ReadCompressedInt64Data>
   21864:	add	r9, sl, r9
   21868:	ldr	sl, [fp, #24]
   2186c:	ldr	r0, [sp, #40]	; 0x28
   21870:	add	r5, r5, #1
   21874:	add	r6, r6, #8
   21878:	mov	r1, sl
   2187c:	ldr	sl, [fp, #28]
   21880:	sub	r0, r0, #1
   21884:	cmp	r5, r0
   21888:	blt	21814 <ReadCompressedDataSlabN+0x40e0>
   2188c:	b	21898 <ReadCompressedDataSlabN+0x4164>
   21890:	ldr	r9, [sp, #20]
   21894:	ldr	r1, [fp, #24]
   21898:	ldr	r0, [fp, #16]
   2189c:	ldr	r2, [sl]
   218a0:	ldr	r1, [r1]
   218a4:	ldr	r5, [fp, #8]
   218a8:	ldr	r0, [r0]
   218ac:	sub	r2, r2, #1
   218b0:	mls	r0, r2, r1, r0
   218b4:	ldr	r1, [fp, #20]
   218b8:	mov	r2, r5
   218bc:	ldr	r1, [r1]
   218c0:	sub	r4, r0, r1
   218c4:	ldr	r0, [sp, #44]	; 0x2c
   218c8:	add	r1, sp, #48	; 0x30
   218cc:	sub	r3, r4, #1
   218d0:	bl	2768 <InflateSkipData>
   218d4:	ldr	r0, [fp, #12]
   218d8:	add	r9, r4, r9
   218dc:	cmp	r0, #2
   218e0:	blt	21a10 <ReadCompressedDataSlabN+0x42dc>
   218e4:	ldr	r8, [sp, #12]
   218e8:	ldr	r4, [sp, #28]
   218ec:	mov	ip, r5
   218f0:	mov	r0, #0
   218f4:	add	r3, sp, #104	; 0x68
   218f8:	mov	r6, r0
   218fc:	ldr	r0, [r4, r0, lsl #2]
   21900:	ldr	r1, [sp, #32]
   21904:	add	r0, r0, #1
   21908:	str	r0, [r4, r6, lsl #2]
   2190c:	ldr	r1, [r1, r6, lsl #2]
   21910:	sdiv	r2, r0, r1
   21914:	mls	r0, r2, r1, r0
   21918:	cmp	r0, #0
   2191c:	bne	219e8 <ReadCompressedDataSlabN+0x42b4>
   21920:	mov	r0, #0
   21924:	add	r5, r3, r6, lsl #2
   21928:	str	r0, [r4, r6, lsl #2]
   2192c:	ldr	r0, [r5, #4]
   21930:	sdiv	r1, r9, r0
   21934:	mls	r1, r1, r0, r9
   21938:	cmp	r1, #0
   2193c:	beq	21994 <ReadCompressedDataSlabN+0x4260>
   21940:	ldr	r2, [r3, r6, lsl #2]
   21944:	ldr	r3, [r8, r6, lsl #2]
   21948:	sub	r0, r0, r1
   2194c:	add	r1, sp, #48	; 0x30
   21950:	mla	r3, r3, r2, r0
   21954:	ldr	r0, [sp, #44]	; 0x2c
   21958:	mov	r2, ip
   2195c:	bl	2768 <InflateSkipData>
   21960:	ldr	r0, [r5, #4]
   21964:	add	r3, sp, #104	; 0x68
   21968:	ldr	ip, [fp, #8]
   2196c:	ldr	r4, [sp, #28]
   21970:	sdiv	r2, r9, r0
   21974:	add	r1, r0, r9
   21978:	mul	r0, r2, r0
   2197c:	ldr	r2, [r8, r6, lsl #2]
   21980:	sub	r0, r0, r9
   21984:	add	r0, r1, r0
   21988:	ldr	r1, [r3, r6, lsl #2]
   2198c:	mla	r9, r2, r1, r0
   21990:	b	219d0 <ReadCompressedDataSlabN+0x429c>
   21994:	ldr	r0, [r8, r6, lsl #2]
   21998:	cmp	r0, #0
   2199c:	beq	219d0 <ReadCompressedDataSlabN+0x429c>
   219a0:	ldr	r1, [r3, r6, lsl #2]
   219a4:	mov	r2, ip
   219a8:	mul	r3, r1, r0
   219ac:	ldr	r0, [sp, #44]	; 0x2c
   219b0:	add	r1, sp, #48	; 0x30
   219b4:	bl	2768 <InflateSkipData>
   219b8:	add	r3, sp, #104	; 0x68
   219bc:	ldr	r1, [r8, r6, lsl #2]
   219c0:	ldr	ip, [fp, #8]
   219c4:	ldr	r4, [sp, #28]
   219c8:	ldr	r0, [r3, r6, lsl #2]
   219cc:	mla	r9, r1, r0, r9
   219d0:	ldr	r2, [fp, #12]
   219d4:	add	r1, r6, #2
   219d8:	add	r0, r6, #1
   219dc:	cmp	r1, r2
   219e0:	blt	218f8 <ReadCompressedDataSlabN+0x41c4>
   219e4:	b	21a10 <ReadCompressedDataSlabN+0x42dc>
   219e8:	ldr	r0, [sp, #4]
   219ec:	ldr	r6, [r0, r6, lsl #2]
   219f0:	cmp	r6, #0
   219f4:	beq	21a10 <ReadCompressedDataSlabN+0x42dc>
   219f8:	ldr	r0, [sp, #44]	; 0x2c
   219fc:	add	r1, sp, #48	; 0x30
   21a00:	mov	r2, ip
   21a04:	mov	r3, r6
   21a08:	bl	2768 <InflateSkipData>
   21a0c:	add	r9, r6, r9
   21a10:	ldr	r0, [sl]
   21a14:	ldr	r1, [sp, #16]
   21a18:	mov	r8, #1
   21a1c:	add	r4, sp, #48	; 0x30
   21a20:	add	r1, r0, r1
   21a24:	ldr	r0, [sp, #24]
   21a28:	str	r1, [sp, #16]
   21a2c:	cmp	r1, r0
   21a30:	blt	2177c <ReadCompressedDataSlabN+0x4048>
   21a34:	b	21d30 <ReadCompressedDataSlabN+0x45fc>
   21a38:	ldr	r0, [sp, #28]
   21a3c:	cmp	r0, #1
   21a40:	blt	21d30 <ReadCompressedDataSlabN+0x45fc>
   21a44:	ldr	r0, [fp, #20]
   21a48:	mov	r2, #1
   21a4c:	add	r1, sp, #48	; 0x30
   21a50:	add	r8, r0, #4
   21a54:	ldr	r0, [fp, #28]
   21a58:	str	r8, [sp, #16]
   21a5c:	add	r0, r0, #4
   21a60:	str	r0, [sp, #40]	; 0x28
   21a64:	sub	r0, fp, #112	; 0x70
   21a68:	orr	r4, r0, #4
   21a6c:	sub	r0, fp, #72	; 0x48
   21a70:	orr	r0, r0, #4
   21a74:	str	r4, [sp, #32]
   21a78:	str	r0, [sp, #8]
   21a7c:	ldr	r0, [sp, #36]	; 0x24
   21a80:	add	r0, r0, #8
   21a84:	str	r0, [sp, #12]
   21a88:	mov	r0, #0
   21a8c:	str	r0, [sp, #20]
   21a90:	ldr	r5, [fp, #20]
   21a94:	ldr	r3, [r5]
   21a98:	cmp	r3, #0
   21a9c:	beq	21ad8 <ReadCompressedDataSlabN+0x43a4>
   21aa0:	mov	r7, r5
   21aa4:	ldr	r5, [sp, #44]	; 0x2c
   21aa8:	ldr	r6, [fp, #8]
   21aac:	mov	r4, r1
   21ab0:	mov	r0, r5
   21ab4:	mov	r2, r6
   21ab8:	bl	2768 <InflateSkipData>
   21abc:	ldr	r0, [r7]
   21ac0:	ldr	sl, [fp, #28]
   21ac4:	mov	r3, r6
   21ac8:	mov	r2, #1
   21acc:	add	r9, r0, r9
   21ad0:	ldr	r0, [sp, #36]	; 0x24
   21ad4:	b	21af0 <ReadCompressedDataSlabN+0x43bc>
   21ad8:	ldr	r6, [fp, #8]
   21adc:	ldr	r0, [sp, #36]	; 0x24
   21ae0:	ldr	r5, [sp, #44]	; 0x2c
   21ae4:	ldr	sl, [fp, #28]
   21ae8:	mov	r4, r1
   21aec:	mov	r3, r6
   21af0:	ldr	r6, [sp, #20]
   21af4:	ldr	r8, [sl]
   21af8:	str	r2, [sp]
   21afc:	mov	r1, r4
   21b00:	str	r9, [sp, #24]
   21b04:	add	r2, r0, r6, lsl #3
   21b08:	mov	r0, r5
   21b0c:	bl	d1d4 <ReadCompressedUInt64Data>
   21b10:	cmp	r8, #2
   21b14:	blt	21b9c <ReadCompressedDataSlabN+0x4468>
   21b18:	ldr	r0, [sp, #12]
   21b1c:	ldr	r9, [sp, #24]
   21b20:	ldr	r1, [fp, #24]
   21b24:	mov	r5, #0
   21b28:	add	r6, r0, r6, lsl #3
   21b2c:	ldr	r0, [r1]
   21b30:	ldr	r7, [fp, #8]
   21b34:	ldr	r8, [sp, #44]	; 0x2c
   21b38:	add	r1, sp, #48	; 0x30
   21b3c:	sub	r3, r0, #1
   21b40:	mov	r0, r8
   21b44:	mov	r2, r7
   21b48:	bl	2768 <InflateSkipData>
   21b4c:	ldr	r0, [fp, #24]
   21b50:	ldr	r4, [sl]
   21b54:	add	r1, sp, #48	; 0x30
   21b58:	mov	r2, r6
   21b5c:	mov	r3, r7
   21b60:	ldr	sl, [r0]
   21b64:	mov	r0, #1
   21b68:	str	r0, [sp]
   21b6c:	mov	r0, r8
   21b70:	bl	d1d4 <ReadCompressedUInt64Data>
   21b74:	add	r9, sl, r9
   21b78:	ldr	sl, [fp, #24]
   21b7c:	add	r5, r5, #1
   21b80:	sub	r0, r4, #1
   21b84:	add	r6, r6, #8
   21b88:	cmp	r5, r0
   21b8c:	mov	r1, sl
   21b90:	ldr	sl, [fp, #28]
   21b94:	blt	21b2c <ReadCompressedDataSlabN+0x43f8>
   21b98:	b	21ba4 <ReadCompressedDataSlabN+0x4470>
   21b9c:	ldr	r9, [sp, #24]
   21ba0:	ldr	r1, [fp, #24]
   21ba4:	ldr	r0, [fp, #16]
   21ba8:	ldr	r2, [sl]
   21bac:	ldr	r1, [r1]
   21bb0:	ldr	r0, [r0]
   21bb4:	sub	r2, r2, #1
   21bb8:	mls	r0, r2, r1, r0
   21bbc:	ldr	r1, [fp, #20]
   21bc0:	ldr	r2, [fp, #8]
   21bc4:	ldr	r1, [r1]
   21bc8:	sub	r4, r0, r1
   21bcc:	ldr	r0, [sp, #44]	; 0x2c
   21bd0:	add	r1, sp, #48	; 0x30
   21bd4:	sub	r3, r4, #1
   21bd8:	bl	2768 <InflateSkipData>
   21bdc:	ldr	r0, [fp, #12]
   21be0:	add	r9, r4, r9
   21be4:	cmp	r0, #2
   21be8:	blt	21d0c <ReadCompressedDataSlabN+0x45d8>
   21bec:	ldr	r8, [sp, #16]
   21bf0:	ldr	r4, [sp, #32]
   21bf4:	mov	r0, #0
   21bf8:	add	r3, sp, #104	; 0x68
   21bfc:	mov	r6, r0
   21c00:	ldr	r0, [r4, r0, lsl #2]
   21c04:	ldr	r1, [sp, #40]	; 0x28
   21c08:	add	r0, r0, #1
   21c0c:	str	r0, [r4, r6, lsl #2]
   21c10:	ldr	r1, [r1, r6, lsl #2]
   21c14:	sdiv	r2, r0, r1
   21c18:	mls	r0, r2, r1, r0
   21c1c:	cmp	r0, #0
   21c20:	bne	21ce4 <ReadCompressedDataSlabN+0x45b0>
   21c24:	mov	r0, #0
   21c28:	add	r5, r3, r6, lsl #2
   21c2c:	str	r0, [r4, r6, lsl #2]
   21c30:	ldr	r0, [r5, #4]
   21c34:	sdiv	r1, r9, r0
   21c38:	mls	r1, r1, r0, r9
   21c3c:	cmp	r1, #0
   21c40:	beq	21c94 <ReadCompressedDataSlabN+0x4560>
   21c44:	ldr	r2, [r3, r6, lsl #2]
   21c48:	ldr	r3, [r8, r6, lsl #2]
   21c4c:	sub	r0, r0, r1
   21c50:	add	r1, sp, #48	; 0x30
   21c54:	mla	r3, r3, r2, r0
   21c58:	ldr	r0, [sp, #44]	; 0x2c
   21c5c:	ldr	r2, [fp, #8]
   21c60:	bl	2768 <InflateSkipData>
   21c64:	ldr	r0, [r5, #4]
   21c68:	add	r3, sp, #104	; 0x68
   21c6c:	ldr	r4, [sp, #32]
   21c70:	sdiv	r2, r9, r0
   21c74:	add	r1, r0, r9
   21c78:	mul	r0, r2, r0
   21c7c:	ldr	r2, [r8, r6, lsl #2]
   21c80:	sub	r0, r0, r9
   21c84:	add	r0, r1, r0
   21c88:	ldr	r1, [r3, r6, lsl #2]
   21c8c:	mla	r9, r2, r1, r0
   21c90:	b	21ccc <ReadCompressedDataSlabN+0x4598>
   21c94:	ldr	r0, [r8, r6, lsl #2]
   21c98:	cmp	r0, #0
   21c9c:	beq	21ccc <ReadCompressedDataSlabN+0x4598>
   21ca0:	ldr	r1, [r3, r6, lsl #2]
   21ca4:	ldr	r2, [fp, #8]
   21ca8:	mul	r3, r1, r0
   21cac:	ldr	r0, [sp, #44]	; 0x2c
   21cb0:	add	r1, sp, #48	; 0x30
   21cb4:	bl	2768 <InflateSkipData>
   21cb8:	add	r3, sp, #104	; 0x68
   21cbc:	ldr	r1, [r8, r6, lsl #2]
   21cc0:	ldr	r4, [sp, #32]
   21cc4:	ldr	r0, [r3, r6, lsl #2]
   21cc8:	mla	r9, r1, r0, r9
   21ccc:	ldr	r2, [fp, #12]
   21cd0:	add	r1, r6, #2
   21cd4:	add	r0, r6, #1
   21cd8:	cmp	r1, r2
   21cdc:	blt	21bfc <ReadCompressedDataSlabN+0x44c8>
   21ce0:	b	21d0c <ReadCompressedDataSlabN+0x45d8>
   21ce4:	ldr	r0, [sp, #8]
   21ce8:	ldr	r6, [r0, r6, lsl #2]
   21cec:	cmp	r6, #0
   21cf0:	beq	21d0c <ReadCompressedDataSlabN+0x45d8>
   21cf4:	ldr	r0, [sp, #44]	; 0x2c
   21cf8:	ldr	r2, [fp, #8]
   21cfc:	add	r1, sp, #48	; 0x30
   21d00:	mov	r3, r6
   21d04:	bl	2768 <InflateSkipData>
   21d08:	add	r9, r6, r9
   21d0c:	ldr	r0, [sl]
   21d10:	ldr	r1, [sp, #20]
   21d14:	mov	r2, #1
   21d18:	add	r1, r0, r1
   21d1c:	ldr	r0, [sp, #28]
   21d20:	str	r1, [sp, #20]
   21d24:	cmp	r1, r0
   21d28:	add	r1, sp, #48	; 0x30
   21d2c:	blt	21a90 <ReadCompressedDataSlabN+0x435c>
   21d30:	add	r0, sp, #48	; 0x30
   21d34:	bl	193c <inflateEnd@plt>
   21d38:	mov	r0, #0
   21d3c:	sub	sp, fp, #28
   21d40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00021d44 <ReadDataSlab1>:
   21d44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21d48:	add	fp, sp, #28
   21d4c:	sub	sp, sp, #4
   21d50:	mov	sl, r0
   21d54:	mov	r0, r3
   21d58:	mov	r8, r3
   21d5c:	mov	r4, r2
   21d60:	mov	r5, r1
   21d64:	bl	1924 <Mat_SizeOf@plt>
   21d68:	mov	r6, r0
   21d6c:	ldr	r0, [fp, #8]
   21d70:	mov	r2, #1
   21d74:	mul	r1, r6, r0
   21d78:	ldr	r0, [sl]
   21d7c:	bl	1a2c <fseek@plt>
   21d80:	sub	r0, r4, #6
   21d84:	mov	r4, #0
   21d88:	cmp	r0, #9
   21d8c:	bhi	220f0 <ReadDataSlab1+0x3ac>
   21d90:	ldr	r1, [fp, #12]
   21d94:	sub	r1, r1, #1
   21d98:	mul	r9, r6, r1
   21d9c:	ldr	r6, [fp, #16]
   21da0:	add	r1, pc, #4
   21da4:	ldr	r0, [r1, r0, lsl #2]
   21da8:	add	pc, r1, r0
   21dac:	.word	0x00000028
   21db0:	.word	0x00000078
   21db4:	.word	0x000000c8
   21db8:	.word	0x00000118
   21dbc:	.word	0x00000168
   21dc0:	.word	0x000001b8
   21dc4:	.word	0x00000208
   21dc8:	.word	0x00000258
   21dcc:	.word	0x000002a8
   21dd0:	.word	0x000002f8
   21dd4:	cmp	r9, #0
   21dd8:	beq	220fc <ReadDataSlab1+0x3b8>
   21ddc:	cmp	r6, #1
   21de0:	blt	220f0 <ReadDataSlab1+0x3ac>
   21de4:	mov	r4, #0
   21de8:	mov	r0, sl
   21dec:	mov	r1, r5
   21df0:	mov	r2, r8
   21df4:	mov	r3, #1
   21df8:	bl	3858 <ReadDoubleData>
   21dfc:	mov	r7, r0
   21e00:	ldr	r0, [sl]
   21e04:	mov	r1, r9
   21e08:	mov	r2, #1
   21e0c:	bl	1a2c <fseek@plt>
   21e10:	add	r4, r7, r4
   21e14:	subs	r6, r6, #1
   21e18:	add	r5, r5, #8
   21e1c:	bne	21de8 <ReadDataSlab1+0xa4>
   21e20:	b	220f0 <ReadDataSlab1+0x3ac>
   21e24:	cmp	r9, #0
   21e28:	beq	22118 <ReadDataSlab1+0x3d4>
   21e2c:	cmp	r6, #1
   21e30:	blt	220f0 <ReadDataSlab1+0x3ac>
   21e34:	mov	r4, #0
   21e38:	mov	r0, sl
   21e3c:	mov	r1, r5
   21e40:	mov	r2, r8
   21e44:	mov	r3, #1
   21e48:	bl	6f1c <ReadSingleData>
   21e4c:	mov	r7, r0
   21e50:	ldr	r0, [sl]
   21e54:	mov	r1, r9
   21e58:	mov	r2, #1
   21e5c:	bl	1a2c <fseek@plt>
   21e60:	add	r4, r7, r4
   21e64:	subs	r6, r6, #1
   21e68:	add	r5, r5, #4
   21e6c:	bne	21e38 <ReadDataSlab1+0xf4>
   21e70:	b	220f0 <ReadDataSlab1+0x3ac>
   21e74:	cmp	r9, #0
   21e78:	beq	22134 <ReadDataSlab1+0x3f0>
   21e7c:	cmp	r6, #1
   21e80:	blt	220f0 <ReadDataSlab1+0x3ac>
   21e84:	mov	r4, #0
   21e88:	mov	r0, sl
   21e8c:	mov	r1, r5
   21e90:	mov	r2, r8
   21e94:	mov	r3, #1
   21e98:	bl	15874 <ReadInt8Data>
   21e9c:	mov	r7, r0
   21ea0:	ldr	r0, [sl]
   21ea4:	mov	r1, r9
   21ea8:	mov	r2, #1
   21eac:	bl	1a2c <fseek@plt>
   21eb0:	add	r4, r7, r4
   21eb4:	subs	r6, r6, #1
   21eb8:	add	r5, r5, #1
   21ebc:	bne	21e88 <ReadDataSlab1+0x144>
   21ec0:	b	220f0 <ReadDataSlab1+0x3ac>
   21ec4:	cmp	r9, #0
   21ec8:	beq	22150 <ReadDataSlab1+0x40c>
   21ecc:	cmp	r6, #1
   21ed0:	blt	220f0 <ReadDataSlab1+0x3ac>
   21ed4:	mov	r4, #0
   21ed8:	mov	r0, sl
   21edc:	mov	r1, r5
   21ee0:	mov	r2, r8
   21ee4:	mov	r3, #1
   21ee8:	bl	176ac <ReadUInt8Data>
   21eec:	mov	r7, r0
   21ef0:	ldr	r0, [sl]
   21ef4:	mov	r1, r9
   21ef8:	mov	r2, #1
   21efc:	bl	1a2c <fseek@plt>
   21f00:	add	r4, r7, r4
   21f04:	subs	r6, r6, #1
   21f08:	add	r5, r5, #1
   21f0c:	bne	21ed8 <ReadDataSlab1+0x194>
   21f10:	b	220f0 <ReadDataSlab1+0x3ac>
   21f14:	cmp	r9, #0
   21f18:	beq	2216c <ReadDataSlab1+0x428>
   21f1c:	cmp	r6, #1
   21f20:	blt	220f0 <ReadDataSlab1+0x3ac>
   21f24:	mov	r4, #0
   21f28:	mov	r0, sl
   21f2c:	mov	r1, r5
   21f30:	mov	r2, r8
   21f34:	mov	r3, #1
   21f38:	bl	11944 <ReadInt16Data>
   21f3c:	mov	r7, r0
   21f40:	ldr	r0, [sl]
   21f44:	mov	r1, r9
   21f48:	mov	r2, #1
   21f4c:	bl	1a2c <fseek@plt>
   21f50:	add	r4, r7, r4
   21f54:	subs	r6, r6, #1
   21f58:	add	r5, r5, #2
   21f5c:	bne	21f28 <ReadDataSlab1+0x1e4>
   21f60:	b	220f0 <ReadDataSlab1+0x3ac>
   21f64:	cmp	r9, #0
   21f68:	beq	22188 <ReadDataSlab1+0x444>
   21f6c:	cmp	r6, #1
   21f70:	blt	220f0 <ReadDataSlab1+0x3ac>
   21f74:	mov	r4, #0
   21f78:	mov	r0, sl
   21f7c:	mov	r1, r5
   21f80:	mov	r2, r8
   21f84:	mov	r3, #1
   21f88:	bl	138dc <ReadUInt16Data>
   21f8c:	mov	r7, r0
   21f90:	ldr	r0, [sl]
   21f94:	mov	r1, r9
   21f98:	mov	r2, #1
   21f9c:	bl	1a2c <fseek@plt>
   21fa0:	add	r4, r7, r4
   21fa4:	subs	r6, r6, #1
   21fa8:	add	r5, r5, #2
   21fac:	bne	21f78 <ReadDataSlab1+0x234>
   21fb0:	b	220f0 <ReadDataSlab1+0x3ac>
   21fb4:	cmp	r9, #0
   21fb8:	beq	221a4 <ReadDataSlab1+0x460>
   21fbc:	cmp	r6, #1
   21fc0:	blt	220f0 <ReadDataSlab1+0x3ac>
   21fc4:	mov	r4, #0
   21fc8:	mov	r0, sl
   21fcc:	mov	r1, r5
   21fd0:	mov	r2, r8
   21fd4:	mov	r3, #1
   21fd8:	bl	d774 <ReadInt32Data>
   21fdc:	mov	r7, r0
   21fe0:	ldr	r0, [sl]
   21fe4:	mov	r1, r9
   21fe8:	mov	r2, #1
   21fec:	bl	1a2c <fseek@plt>
   21ff0:	add	r4, r7, r4
   21ff4:	subs	r6, r6, #1
   21ff8:	add	r5, r5, #4
   21ffc:	bne	21fc8 <ReadDataSlab1+0x284>
   22000:	b	220f0 <ReadDataSlab1+0x3ac>
   22004:	cmp	r9, #0
   22008:	beq	221c0 <ReadDataSlab1+0x47c>
   2200c:	cmp	r6, #1
   22010:	blt	220f0 <ReadDataSlab1+0x3ac>
   22014:	mov	r4, #0
   22018:	mov	r0, sl
   2201c:	mov	r1, r5
   22020:	mov	r2, r8
   22024:	mov	r3, #1
   22028:	bl	f85c <ReadUInt32Data>
   2202c:	mov	r7, r0
   22030:	ldr	r0, [sl]
   22034:	mov	r1, r9
   22038:	mov	r2, #1
   2203c:	bl	1a2c <fseek@plt>
   22040:	add	r4, r7, r4
   22044:	subs	r6, r6, #1
   22048:	add	r5, r5, #4
   2204c:	bne	22018 <ReadDataSlab1+0x2d4>
   22050:	b	220f0 <ReadDataSlab1+0x3ac>
   22054:	cmp	r9, #0
   22058:	beq	221dc <ReadDataSlab1+0x498>
   2205c:	cmp	r6, #1
   22060:	blt	220f0 <ReadDataSlab1+0x3ac>
   22064:	mov	r4, #0
   22068:	mov	r0, sl
   2206c:	mov	r1, r5
   22070:	mov	r2, r8
   22074:	mov	r3, #1
   22078:	bl	9404 <ReadInt64Data>
   2207c:	mov	r7, r0
   22080:	ldr	r0, [sl]
   22084:	mov	r1, r9
   22088:	mov	r2, #1
   2208c:	bl	1a2c <fseek@plt>
   22090:	add	r4, r7, r4
   22094:	subs	r6, r6, #1
   22098:	add	r5, r5, #8
   2209c:	bne	22068 <ReadDataSlab1+0x324>
   220a0:	b	220f0 <ReadDataSlab1+0x3ac>
   220a4:	cmp	r9, #0
   220a8:	beq	221f8 <ReadDataSlab1+0x4b4>
   220ac:	cmp	r6, #1
   220b0:	blt	220f0 <ReadDataSlab1+0x3ac>
   220b4:	mov	r4, #0
   220b8:	mov	r0, sl
   220bc:	mov	r1, r5
   220c0:	mov	r2, r8
   220c4:	mov	r3, #1
   220c8:	bl	b5bc <ReadUInt64Data>
   220cc:	mov	r7, r0
   220d0:	ldr	r0, [sl]
   220d4:	mov	r1, r9
   220d8:	mov	r2, #1
   220dc:	bl	1a2c <fseek@plt>
   220e0:	add	r4, r7, r4
   220e4:	subs	r6, r6, #1
   220e8:	add	r5, r5, #8
   220ec:	bne	220b8 <ReadDataSlab1+0x374>
   220f0:	mov	r0, r4
   220f4:	sub	sp, fp, #28
   220f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   220fc:	mov	r0, sl
   22100:	mov	r1, r5
   22104:	mov	r2, r8
   22108:	mov	r3, r6
   2210c:	sub	sp, fp, #28
   22110:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22114:	b	3858 <ReadDoubleData>
   22118:	mov	r0, sl
   2211c:	mov	r1, r5
   22120:	mov	r2, r8
   22124:	mov	r3, r6
   22128:	sub	sp, fp, #28
   2212c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22130:	b	6f1c <ReadSingleData>
   22134:	mov	r0, sl
   22138:	mov	r1, r5
   2213c:	mov	r2, r8
   22140:	mov	r3, r6
   22144:	sub	sp, fp, #28
   22148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2214c:	b	15874 <ReadInt8Data>
   22150:	mov	r0, sl
   22154:	mov	r1, r5
   22158:	mov	r2, r8
   2215c:	mov	r3, r6
   22160:	sub	sp, fp, #28
   22164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22168:	b	176ac <ReadUInt8Data>
   2216c:	mov	r0, sl
   22170:	mov	r1, r5
   22174:	mov	r2, r8
   22178:	mov	r3, r6
   2217c:	sub	sp, fp, #28
   22180:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22184:	b	11944 <ReadInt16Data>
   22188:	mov	r0, sl
   2218c:	mov	r1, r5
   22190:	mov	r2, r8
   22194:	mov	r3, r6
   22198:	sub	sp, fp, #28
   2219c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   221a0:	b	138dc <ReadUInt16Data>
   221a4:	mov	r0, sl
   221a8:	mov	r1, r5
   221ac:	mov	r2, r8
   221b0:	mov	r3, r6
   221b4:	sub	sp, fp, #28
   221b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   221bc:	b	d774 <ReadInt32Data>
   221c0:	mov	r0, sl
   221c4:	mov	r1, r5
   221c8:	mov	r2, r8
   221cc:	mov	r3, r6
   221d0:	sub	sp, fp, #28
   221d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   221d8:	b	f85c <ReadUInt32Data>
   221dc:	mov	r0, sl
   221e0:	mov	r1, r5
   221e4:	mov	r2, r8
   221e8:	mov	r3, r6
   221ec:	sub	sp, fp, #28
   221f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   221f4:	b	9404 <ReadInt64Data>
   221f8:	mov	r0, sl
   221fc:	mov	r1, r5
   22200:	mov	r2, r8
   22204:	mov	r3, r6
   22208:	sub	sp, fp, #28
   2220c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22210:	b	b5bc <ReadUInt64Data>

00022214 <ReadDataSlab2>:
   22214:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22218:	add	fp, sp, #28
   2221c:	sub	sp, sp, #20
   22220:	cmp	r0, #0
   22224:	mov	r9, #0
   22228:	movne	r5, r1
   2222c:	cmpne	r1, #0
   22230:	beq	22260 <ReadDataSlab2+0x4c>
   22234:	ldr	r4, [fp, #20]
   22238:	cmp	r4, #0
   2223c:	ldrne	r8, [fp, #16]
   22240:	cmpne	r8, #0
   22244:	beq	22260 <ReadDataSlab2+0x4c>
   22248:	mov	r6, r0
   2224c:	ldr	r0, [fp, #12]
   22250:	cmp	r0, #0
   22254:	ldrne	r0, [r6]
   22258:	cmpne	r0, #0
   2225c:	bne	2226c <ReadDataSlab2+0x58>
   22260:	mov	r0, r9
   22264:	sub	sp, fp, #28
   22268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2226c:	mov	r0, r3
   22270:	mov	sl, r3
   22274:	mov	r7, r2
   22278:	bl	1924 <Mat_SizeOf@plt>
   2227c:	str	r0, [sp, #16]
   22280:	sub	r0, r7, #6
   22284:	cmp	r0, #9
   22288:	bhi	22260 <ReadDataSlab2+0x4c>
   2228c:	add	r1, pc, #8
   22290:	ldr	r7, [fp, #8]
   22294:	ldr	r0, [r1, r0, lsl #2]
   22298:	add	pc, r1, r0
   2229c:	.word	0x00000028
   222a0:	.word	0x0000006c
   222a4:	.word	0x000000b0
   222a8:	.word	0x000000f4
   222ac:	.word	0x00000138
   222b0:	.word	0x0000017c
   222b4:	.word	0x000001c0
   222b8:	.word	0x00000204
   222bc:	.word	0x0000028c
   222c0:	.word	0x00000248
   222c4:	ldr	r2, [r8]
   222c8:	cmp	r2, #1
   222cc:	bne	2256c <ReadDataSlab2+0x358>
   222d0:	ldr	r1, [r7]
   222d4:	ldr	r0, [r4]
   222d8:	cmp	r0, r1
   222dc:	bne	225c0 <ReadDataSlab2+0x3ac>
   222e0:	ldr	r1, [r8, #4]
   222e4:	cmp	r1, #1
   222e8:	bne	225bc <ReadDataSlab2+0x3a8>
   222ec:	ldr	r1, [r4, #4]
   222f0:	mov	r2, sl
   222f4:	mul	r3, r1, r0
   222f8:	mov	r0, r6
   222fc:	mov	r1, r5
   22300:	bl	3858 <ReadDoubleData>
   22304:	b	22260 <ReadDataSlab2+0x4c>
   22308:	ldr	r2, [r8]
   2230c:	cmp	r2, #1
   22310:	bne	22574 <ReadDataSlab2+0x360>
   22314:	ldr	r1, [r7]
   22318:	ldr	r0, [r4]
   2231c:	cmp	r0, r1
   22320:	bne	226fc <ReadDataSlab2+0x4e8>
   22324:	ldr	r1, [r8, #4]
   22328:	cmp	r1, #1
   2232c:	bne	226f8 <ReadDataSlab2+0x4e4>
   22330:	ldr	r1, [r4, #4]
   22334:	mov	r2, sl
   22338:	mul	r3, r1, r0
   2233c:	mov	r0, r6
   22340:	mov	r1, r5
   22344:	bl	6f1c <ReadSingleData>
   22348:	b	22260 <ReadDataSlab2+0x4c>
   2234c:	ldr	r2, [r8]
   22350:	cmp	r2, #1
   22354:	bne	2257c <ReadDataSlab2+0x368>
   22358:	ldr	r1, [r7]
   2235c:	ldr	r0, [r4]
   22360:	cmp	r0, r1
   22364:	bne	22834 <ReadDataSlab2+0x620>
   22368:	ldr	r1, [r8, #4]
   2236c:	cmp	r1, #1
   22370:	bne	22830 <ReadDataSlab2+0x61c>
   22374:	ldr	r1, [r4, #4]
   22378:	mov	r2, sl
   2237c:	mul	r3, r1, r0
   22380:	mov	r0, r6
   22384:	mov	r1, r5
   22388:	bl	15874 <ReadInt8Data>
   2238c:	b	22260 <ReadDataSlab2+0x4c>
   22390:	ldr	r2, [r8]
   22394:	cmp	r2, #1
   22398:	bne	22584 <ReadDataSlab2+0x370>
   2239c:	ldr	r1, [r7]
   223a0:	ldr	r0, [r4]
   223a4:	cmp	r0, r1
   223a8:	bne	2296c <ReadDataSlab2+0x758>
   223ac:	ldr	r1, [r8, #4]
   223b0:	cmp	r1, #1
   223b4:	bne	22968 <ReadDataSlab2+0x754>
   223b8:	ldr	r1, [r4, #4]
   223bc:	mov	r2, sl
   223c0:	mul	r3, r1, r0
   223c4:	mov	r0, r6
   223c8:	mov	r1, r5
   223cc:	bl	176ac <ReadUInt8Data>
   223d0:	b	22260 <ReadDataSlab2+0x4c>
   223d4:	ldr	r2, [r8]
   223d8:	cmp	r2, #1
   223dc:	bne	2258c <ReadDataSlab2+0x378>
   223e0:	ldr	r1, [r7]
   223e4:	ldr	r0, [r4]
   223e8:	cmp	r0, r1
   223ec:	bne	22aa4 <ReadDataSlab2+0x890>
   223f0:	ldr	r1, [r8, #4]
   223f4:	cmp	r1, #1
   223f8:	bne	22aa0 <ReadDataSlab2+0x88c>
   223fc:	ldr	r1, [r4, #4]
   22400:	mov	r2, sl
   22404:	mul	r3, r1, r0
   22408:	mov	r0, r6
   2240c:	mov	r1, r5
   22410:	bl	11944 <ReadInt16Data>
   22414:	b	22260 <ReadDataSlab2+0x4c>
   22418:	ldr	r2, [r8]
   2241c:	cmp	r2, #1
   22420:	bne	22594 <ReadDataSlab2+0x380>
   22424:	ldr	r1, [r7]
   22428:	ldr	r0, [r4]
   2242c:	cmp	r0, r1
   22430:	bne	22bdc <ReadDataSlab2+0x9c8>
   22434:	ldr	r1, [r8, #4]
   22438:	cmp	r1, #1
   2243c:	bne	22bd8 <ReadDataSlab2+0x9c4>
   22440:	ldr	r1, [r4, #4]
   22444:	mov	r2, sl
   22448:	mul	r3, r1, r0
   2244c:	mov	r0, r6
   22450:	mov	r1, r5
   22454:	bl	138dc <ReadUInt16Data>
   22458:	b	22260 <ReadDataSlab2+0x4c>
   2245c:	ldr	r2, [r8]
   22460:	cmp	r2, #1
   22464:	bne	2259c <ReadDataSlab2+0x388>
   22468:	ldr	r1, [r7]
   2246c:	ldr	r0, [r4]
   22470:	cmp	r0, r1
   22474:	bne	22d14 <ReadDataSlab2+0xb00>
   22478:	ldr	r1, [r8, #4]
   2247c:	cmp	r1, #1
   22480:	bne	22d10 <ReadDataSlab2+0xafc>
   22484:	ldr	r1, [r4, #4]
   22488:	mov	r2, sl
   2248c:	mul	r3, r1, r0
   22490:	mov	r0, r6
   22494:	mov	r1, r5
   22498:	bl	d774 <ReadInt32Data>
   2249c:	b	22260 <ReadDataSlab2+0x4c>
   224a0:	ldr	r2, [r8]
   224a4:	cmp	r2, #1
   224a8:	bne	225a4 <ReadDataSlab2+0x390>
   224ac:	ldr	r1, [r7]
   224b0:	ldr	r0, [r4]
   224b4:	cmp	r0, r1
   224b8:	bne	22e4c <ReadDataSlab2+0xc38>
   224bc:	ldr	r1, [r8, #4]
   224c0:	cmp	r1, #1
   224c4:	bne	22e48 <ReadDataSlab2+0xc34>
   224c8:	ldr	r1, [r4, #4]
   224cc:	mov	r2, sl
   224d0:	mul	r3, r1, r0
   224d4:	mov	r0, r6
   224d8:	mov	r1, r5
   224dc:	bl	f85c <ReadUInt32Data>
   224e0:	b	22260 <ReadDataSlab2+0x4c>
   224e4:	ldr	r2, [r8]
   224e8:	cmp	r2, #1
   224ec:	bne	225ac <ReadDataSlab2+0x398>
   224f0:	ldr	r1, [r7]
   224f4:	ldr	r0, [r4]
   224f8:	cmp	r0, r1
   224fc:	bne	22f84 <ReadDataSlab2+0xd70>
   22500:	ldr	r1, [r8, #4]
   22504:	cmp	r1, #1
   22508:	bne	22f80 <ReadDataSlab2+0xd6c>
   2250c:	ldr	r1, [r4, #4]
   22510:	mov	r2, sl
   22514:	mul	r3, r1, r0
   22518:	mov	r0, r6
   2251c:	mov	r1, r5
   22520:	bl	b5bc <ReadUInt64Data>
   22524:	b	22260 <ReadDataSlab2+0x4c>
   22528:	ldr	r2, [r8]
   2252c:	cmp	r2, #1
   22530:	bne	225b4 <ReadDataSlab2+0x3a0>
   22534:	ldr	r1, [r7]
   22538:	ldr	r0, [r4]
   2253c:	cmp	r0, r1
   22540:	bne	230bc <ReadDataSlab2+0xea8>
   22544:	ldr	r1, [r8, #4]
   22548:	cmp	r1, #1
   2254c:	bne	230b8 <ReadDataSlab2+0xea4>
   22550:	ldr	r1, [r4, #4]
   22554:	mov	r2, sl
   22558:	mul	r3, r1, r0
   2255c:	mov	r0, r6
   22560:	mov	r1, r5
   22564:	bl	9404 <ReadInt64Data>
   22568:	b	22260 <ReadDataSlab2+0x4c>
   2256c:	ldr	r1, [r7]
   22570:	b	225c0 <ReadDataSlab2+0x3ac>
   22574:	ldr	r1, [r7]
   22578:	b	226fc <ReadDataSlab2+0x4e8>
   2257c:	ldr	r1, [r7]
   22580:	b	22834 <ReadDataSlab2+0x620>
   22584:	ldr	r1, [r7]
   22588:	b	2296c <ReadDataSlab2+0x758>
   2258c:	ldr	r1, [r7]
   22590:	b	22aa4 <ReadDataSlab2+0x890>
   22594:	ldr	r1, [r7]
   22598:	b	22bdc <ReadDataSlab2+0x9c8>
   2259c:	ldr	r1, [r7]
   225a0:	b	22d14 <ReadDataSlab2+0xb00>
   225a4:	ldr	r1, [r7]
   225a8:	b	22e4c <ReadDataSlab2+0xc38>
   225ac:	ldr	r1, [r7]
   225b0:	b	22f84 <ReadDataSlab2+0xd70>
   225b4:	ldr	r1, [r7]
   225b8:	b	230bc <ReadDataSlab2+0xea8>
   225bc:	mov	r1, r0
   225c0:	ldr	r0, [r6]
   225c4:	ldr	r8, [r8, #4]
   225c8:	str	r1, [sp, #8]
   225cc:	str	r2, [sp, #12]
   225d0:	bl	1840 <ftell@plt>
   225d4:	cmn	r0, #1
   225d8:	beq	231f0 <ReadDataSlab2+0xfdc>
   225dc:	ldr	r0, [fp, #12]
   225e0:	ldr	r1, [sp, #16]
   225e4:	mov	r2, #1
   225e8:	ldr	r0, [r0, #4]
   225ec:	mul	r0, r0, r1
   225f0:	ldr	r1, [r7]
   225f4:	mul	r1, r0, r1
   225f8:	ldr	r0, [r6]
   225fc:	bl	1a2c <fseek@plt>
   22600:	ldr	r0, [r4, #4]
   22604:	cmp	r0, #1
   22608:	blt	22260 <ReadDataSlab2+0x4c>
   2260c:	ldr	r0, [sp, #12]
   22610:	ldr	r1, [sp, #16]
   22614:	mov	r4, #0
   22618:	sub	r0, r0, #1
   2261c:	mul	r7, r0, r1
   22620:	mul	r0, r8, r1
   22624:	ldr	r1, [sp, #8]
   22628:	mul	r0, r0, r1
   2262c:	str	r0, [sp, #8]
   22630:	ldr	r0, [r6]
   22634:	bl	1840 <ftell@plt>
   22638:	cmn	r0, #1
   2263c:	beq	231f0 <ReadDataSlab2+0xfdc>
   22640:	mov	r9, r0
   22644:	ldr	r0, [fp, #12]
   22648:	ldr	r1, [sp, #16]
   2264c:	mov	r2, #1
   22650:	str	r4, [sp, #12]
   22654:	ldr	r0, [r0]
   22658:	mul	r1, r0, r1
   2265c:	ldr	r0, [r6]
   22660:	bl	1a2c <fseek@plt>
   22664:	ldr	r4, [fp, #20]
   22668:	ldr	r0, [r4]
   2266c:	cmp	r0, #1
   22670:	blt	226b0 <ReadDataSlab2+0x49c>
   22674:	mov	r8, #0
   22678:	mov	r0, r6
   2267c:	mov	r1, r5
   22680:	mov	r2, sl
   22684:	mov	r3, #1
   22688:	bl	3858 <ReadDoubleData>
   2268c:	ldr	r0, [r6]
   22690:	mov	r1, r7
   22694:	mov	r2, #1
   22698:	bl	1a2c <fseek@plt>
   2269c:	ldr	r0, [r4]
   226a0:	add	r8, r8, #1
   226a4:	add	r5, r5, #8
   226a8:	cmp	r8, r0
   226ac:	blt	22678 <ReadDataSlab2+0x464>
   226b0:	ldr	r0, [r6]
   226b4:	bl	1840 <ftell@plt>
   226b8:	cmn	r0, #1
   226bc:	beq	231f0 <ReadDataSlab2+0xfdc>
   226c0:	ldr	r1, [sp, #8]
   226c4:	mov	r2, #1
   226c8:	add	r1, r9, r1
   226cc:	sub	r1, r1, r0
   226d0:	ldr	r0, [r6]
   226d4:	bl	1a2c <fseek@plt>
   226d8:	mov	r0, r4
   226dc:	ldr	r4, [sp, #12]
   226e0:	mov	r9, #0
   226e4:	ldr	r0, [r0, #4]
   226e8:	add	r4, r4, #1
   226ec:	cmp	r4, r0
   226f0:	blt	22630 <ReadDataSlab2+0x41c>
   226f4:	b	22260 <ReadDataSlab2+0x4c>
   226f8:	mov	r1, r0
   226fc:	ldr	r0, [r6]
   22700:	ldr	r8, [r8, #4]
   22704:	str	r1, [sp, #8]
   22708:	str	r2, [sp, #12]
   2270c:	bl	1840 <ftell@plt>
   22710:	cmn	r0, #1
   22714:	beq	231f0 <ReadDataSlab2+0xfdc>
   22718:	ldr	r0, [fp, #12]
   2271c:	ldr	r1, [sp, #16]
   22720:	mov	r2, #1
   22724:	ldr	r0, [r0, #4]
   22728:	mul	r0, r0, r1
   2272c:	ldr	r1, [r7]
   22730:	mul	r1, r0, r1
   22734:	ldr	r0, [r6]
   22738:	bl	1a2c <fseek@plt>
   2273c:	ldr	r0, [r4, #4]
   22740:	cmp	r0, #1
   22744:	blt	22260 <ReadDataSlab2+0x4c>
   22748:	ldr	r0, [sp, #12]
   2274c:	ldr	r1, [sp, #16]
   22750:	mov	r4, #0
   22754:	sub	r0, r0, #1
   22758:	mul	r7, r0, r1
   2275c:	mul	r0, r8, r1
   22760:	ldr	r1, [sp, #8]
   22764:	mul	r0, r0, r1
   22768:	str	r0, [sp, #4]
   2276c:	ldr	r0, [r6]
   22770:	bl	1840 <ftell@plt>
   22774:	cmn	r0, #1
   22778:	beq	231f0 <ReadDataSlab2+0xfdc>
   2277c:	str	r0, [sp, #8]
   22780:	ldr	r0, [fp, #12]
   22784:	ldr	r1, [sp, #16]
   22788:	mov	r2, #1
   2278c:	str	r4, [sp, #12]
   22790:	ldr	r0, [r0]
   22794:	mul	r1, r0, r1
   22798:	ldr	r0, [r6]
   2279c:	bl	1a2c <fseek@plt>
   227a0:	ldr	r9, [fp, #20]
   227a4:	ldr	r0, [r9]
   227a8:	cmp	r0, #1
   227ac:	blt	227ec <ReadDataSlab2+0x5d8>
   227b0:	mov	r8, #0
   227b4:	mov	r0, r6
   227b8:	mov	r1, r5
   227bc:	mov	r2, sl
   227c0:	mov	r3, #1
   227c4:	bl	6f1c <ReadSingleData>
   227c8:	ldr	r0, [r6]
   227cc:	mov	r1, r7
   227d0:	mov	r2, #1
   227d4:	bl	1a2c <fseek@plt>
   227d8:	ldr	r0, [r9]
   227dc:	add	r8, r8, #1
   227e0:	add	r5, r5, #4
   227e4:	cmp	r8, r0
   227e8:	blt	227b4 <ReadDataSlab2+0x5a0>
   227ec:	ldr	r0, [r6]
   227f0:	bl	1840 <ftell@plt>
   227f4:	cmn	r0, #1
   227f8:	beq	231f0 <ReadDataSlab2+0xfdc>
   227fc:	ldmib	sp, {r1, r2}
   22800:	add	r1, r2, r1
   22804:	mov	r2, #1
   22808:	sub	r1, r1, r0
   2280c:	ldr	r0, [r6]
   22810:	bl	1a2c <fseek@plt>
   22814:	ldr	r4, [sp, #12]
   22818:	ldr	r0, [r9, #4]
   2281c:	mov	r9, #0
   22820:	add	r4, r4, #1
   22824:	cmp	r4, r0
   22828:	blt	2276c <ReadDataSlab2+0x558>
   2282c:	b	22260 <ReadDataSlab2+0x4c>
   22830:	mov	r1, r0
   22834:	ldr	r0, [r6]
   22838:	ldr	r8, [r8, #4]
   2283c:	str	r1, [sp, #8]
   22840:	str	r2, [sp, #12]
   22844:	bl	1840 <ftell@plt>
   22848:	cmn	r0, #1
   2284c:	beq	231f0 <ReadDataSlab2+0xfdc>
   22850:	ldr	r0, [fp, #12]
   22854:	ldr	r1, [sp, #16]
   22858:	mov	r2, #1
   2285c:	ldr	r0, [r0, #4]
   22860:	mul	r0, r0, r1
   22864:	ldr	r1, [r7]
   22868:	mul	r1, r0, r1
   2286c:	ldr	r0, [r6]
   22870:	bl	1a2c <fseek@plt>
   22874:	ldr	r0, [r4, #4]
   22878:	cmp	r0, #1
   2287c:	blt	22260 <ReadDataSlab2+0x4c>
   22880:	ldr	r0, [sp, #12]
   22884:	ldr	r1, [sp, #16]
   22888:	sub	r0, r0, #1
   2288c:	mul	r7, r0, r1
   22890:	mul	r0, r8, r1
   22894:	ldr	r1, [sp, #8]
   22898:	mov	r8, #0
   2289c:	mul	r0, r0, r1
   228a0:	str	r0, [sp, #8]
   228a4:	ldr	r0, [r6]
   228a8:	bl	1840 <ftell@plt>
   228ac:	cmn	r0, #1
   228b0:	beq	231f0 <ReadDataSlab2+0xfdc>
   228b4:	mov	r9, r0
   228b8:	ldr	r0, [fp, #12]
   228bc:	ldr	r1, [sp, #16]
   228c0:	mov	r2, #1
   228c4:	ldr	r0, [r0]
   228c8:	mul	r1, r0, r1
   228cc:	ldr	r0, [r6]
   228d0:	bl	1a2c <fseek@plt>
   228d4:	ldr	r4, [fp, #20]
   228d8:	ldr	r0, [r4]
   228dc:	cmp	r0, #1
   228e0:	blt	22928 <ReadDataSlab2+0x714>
   228e4:	str	r8, [sp, #12]
   228e8:	mov	r8, #0
   228ec:	add	r1, r5, r8
   228f0:	mov	r0, r6
   228f4:	mov	r2, sl
   228f8:	mov	r3, #1
   228fc:	bl	15874 <ReadInt8Data>
   22900:	ldr	r0, [r6]
   22904:	mov	r1, r7
   22908:	mov	r2, #1
   2290c:	bl	1a2c <fseek@plt>
   22910:	ldr	r0, [r4]
   22914:	add	r8, r8, #1
   22918:	cmp	r8, r0
   2291c:	blt	228ec <ReadDataSlab2+0x6d8>
   22920:	add	r5, r5, r8
   22924:	ldr	r8, [sp, #12]
   22928:	ldr	r0, [r6]
   2292c:	bl	1840 <ftell@plt>
   22930:	cmn	r0, #1
   22934:	beq	231f0 <ReadDataSlab2+0xfdc>
   22938:	ldr	r1, [sp, #8]
   2293c:	mov	r2, #1
   22940:	add	r1, r9, r1
   22944:	sub	r1, r1, r0
   22948:	ldr	r0, [r6]
   2294c:	bl	1a2c <fseek@plt>
   22950:	ldr	r0, [r4, #4]
   22954:	add	r8, r8, #1
   22958:	mov	r9, #0
   2295c:	cmp	r8, r0
   22960:	blt	228a4 <ReadDataSlab2+0x690>
   22964:	b	22260 <ReadDataSlab2+0x4c>
   22968:	mov	r1, r0
   2296c:	ldr	r0, [r6]
   22970:	ldr	r8, [r8, #4]
   22974:	str	r1, [sp, #8]
   22978:	str	r2, [sp, #12]
   2297c:	bl	1840 <ftell@plt>
   22980:	cmn	r0, #1
   22984:	beq	231f0 <ReadDataSlab2+0xfdc>
   22988:	ldr	r0, [fp, #12]
   2298c:	ldr	r1, [sp, #16]
   22990:	mov	r2, #1
   22994:	ldr	r0, [r0, #4]
   22998:	mul	r0, r0, r1
   2299c:	ldr	r1, [r7]
   229a0:	mul	r1, r0, r1
   229a4:	ldr	r0, [r6]
   229a8:	bl	1a2c <fseek@plt>
   229ac:	ldr	r0, [r4, #4]
   229b0:	cmp	r0, #1
   229b4:	blt	22260 <ReadDataSlab2+0x4c>
   229b8:	ldr	r0, [sp, #12]
   229bc:	ldr	r1, [sp, #16]
   229c0:	sub	r0, r0, #1
   229c4:	mul	r7, r0, r1
   229c8:	mul	r0, r8, r1
   229cc:	ldr	r1, [sp, #8]
   229d0:	mov	r8, #0
   229d4:	mul	r0, r0, r1
   229d8:	str	r0, [sp, #8]
   229dc:	ldr	r0, [r6]
   229e0:	bl	1840 <ftell@plt>
   229e4:	cmn	r0, #1
   229e8:	beq	231f0 <ReadDataSlab2+0xfdc>
   229ec:	mov	r9, r0
   229f0:	ldr	r0, [fp, #12]
   229f4:	ldr	r1, [sp, #16]
   229f8:	mov	r2, #1
   229fc:	ldr	r0, [r0]
   22a00:	mul	r1, r0, r1
   22a04:	ldr	r0, [r6]
   22a08:	bl	1a2c <fseek@plt>
   22a0c:	ldr	r4, [fp, #20]
   22a10:	ldr	r0, [r4]
   22a14:	cmp	r0, #1
   22a18:	blt	22a60 <ReadDataSlab2+0x84c>
   22a1c:	str	r8, [sp, #12]
   22a20:	mov	r8, #0
   22a24:	add	r1, r5, r8
   22a28:	mov	r0, r6
   22a2c:	mov	r2, sl
   22a30:	mov	r3, #1
   22a34:	bl	176ac <ReadUInt8Data>
   22a38:	ldr	r0, [r6]
   22a3c:	mov	r1, r7
   22a40:	mov	r2, #1
   22a44:	bl	1a2c <fseek@plt>
   22a48:	ldr	r0, [r4]
   22a4c:	add	r8, r8, #1
   22a50:	cmp	r8, r0
   22a54:	blt	22a24 <ReadDataSlab2+0x810>
   22a58:	add	r5, r5, r8
   22a5c:	ldr	r8, [sp, #12]
   22a60:	ldr	r0, [r6]
   22a64:	bl	1840 <ftell@plt>
   22a68:	cmn	r0, #1
   22a6c:	beq	231f0 <ReadDataSlab2+0xfdc>
   22a70:	ldr	r1, [sp, #8]
   22a74:	mov	r2, #1
   22a78:	add	r1, r9, r1
   22a7c:	sub	r1, r1, r0
   22a80:	ldr	r0, [r6]
   22a84:	bl	1a2c <fseek@plt>
   22a88:	ldr	r0, [r4, #4]
   22a8c:	add	r8, r8, #1
   22a90:	mov	r9, #0
   22a94:	cmp	r8, r0
   22a98:	blt	229dc <ReadDataSlab2+0x7c8>
   22a9c:	b	22260 <ReadDataSlab2+0x4c>
   22aa0:	mov	r1, r0
   22aa4:	ldr	r0, [r6]
   22aa8:	ldr	r8, [r8, #4]
   22aac:	str	r1, [sp, #8]
   22ab0:	str	r2, [sp, #12]
   22ab4:	bl	1840 <ftell@plt>
   22ab8:	cmn	r0, #1
   22abc:	beq	231f0 <ReadDataSlab2+0xfdc>
   22ac0:	ldr	r0, [fp, #12]
   22ac4:	ldr	r1, [sp, #16]
   22ac8:	mov	r2, #1
   22acc:	ldr	r0, [r0, #4]
   22ad0:	mul	r0, r0, r1
   22ad4:	ldr	r1, [r7]
   22ad8:	mul	r1, r0, r1
   22adc:	ldr	r0, [r6]
   22ae0:	bl	1a2c <fseek@plt>
   22ae4:	ldr	r0, [r4, #4]
   22ae8:	cmp	r0, #1
   22aec:	blt	22260 <ReadDataSlab2+0x4c>
   22af0:	ldr	r0, [sp, #12]
   22af4:	ldr	r1, [sp, #16]
   22af8:	mov	r4, #0
   22afc:	sub	r0, r0, #1
   22b00:	mul	r7, r0, r1
   22b04:	mul	r0, r8, r1
   22b08:	ldr	r1, [sp, #8]
   22b0c:	mul	r0, r0, r1
   22b10:	str	r0, [sp, #4]
   22b14:	ldr	r0, [r6]
   22b18:	bl	1840 <ftell@plt>
   22b1c:	cmn	r0, #1
   22b20:	beq	231f0 <ReadDataSlab2+0xfdc>
   22b24:	str	r0, [sp, #8]
   22b28:	ldr	r0, [fp, #12]
   22b2c:	ldr	r1, [sp, #16]
   22b30:	mov	r2, #1
   22b34:	str	r4, [sp, #12]
   22b38:	ldr	r0, [r0]
   22b3c:	mul	r1, r0, r1
   22b40:	ldr	r0, [r6]
   22b44:	bl	1a2c <fseek@plt>
   22b48:	ldr	r9, [fp, #20]
   22b4c:	ldr	r0, [r9]
   22b50:	cmp	r0, #1
   22b54:	blt	22b94 <ReadDataSlab2+0x980>
   22b58:	mov	r8, #0
   22b5c:	mov	r0, r6
   22b60:	mov	r1, r5
   22b64:	mov	r2, sl
   22b68:	mov	r3, #1
   22b6c:	bl	11944 <ReadInt16Data>
   22b70:	ldr	r0, [r6]
   22b74:	mov	r1, r7
   22b78:	mov	r2, #1
   22b7c:	bl	1a2c <fseek@plt>
   22b80:	ldr	r0, [r9]
   22b84:	add	r8, r8, #1
   22b88:	add	r5, r5, #2
   22b8c:	cmp	r8, r0
   22b90:	blt	22b5c <ReadDataSlab2+0x948>
   22b94:	ldr	r0, [r6]
   22b98:	bl	1840 <ftell@plt>
   22b9c:	cmn	r0, #1
   22ba0:	beq	231f0 <ReadDataSlab2+0xfdc>
   22ba4:	ldmib	sp, {r1, r2}
   22ba8:	add	r1, r2, r1
   22bac:	mov	r2, #1
   22bb0:	sub	r1, r1, r0
   22bb4:	ldr	r0, [r6]
   22bb8:	bl	1a2c <fseek@plt>
   22bbc:	ldr	r4, [sp, #12]
   22bc0:	ldr	r0, [r9, #4]
   22bc4:	mov	r9, #0
   22bc8:	add	r4, r4, #1
   22bcc:	cmp	r4, r0
   22bd0:	blt	22b14 <ReadDataSlab2+0x900>
   22bd4:	b	22260 <ReadDataSlab2+0x4c>
   22bd8:	mov	r1, r0
   22bdc:	ldr	r0, [r6]
   22be0:	ldr	r8, [r8, #4]
   22be4:	str	r1, [sp, #8]
   22be8:	str	r2, [sp, #12]
   22bec:	bl	1840 <ftell@plt>
   22bf0:	cmn	r0, #1
   22bf4:	beq	231f0 <ReadDataSlab2+0xfdc>
   22bf8:	ldr	r0, [fp, #12]
   22bfc:	ldr	r1, [sp, #16]
   22c00:	mov	r2, #1
   22c04:	ldr	r0, [r0, #4]
   22c08:	mul	r0, r0, r1
   22c0c:	ldr	r1, [r7]
   22c10:	mul	r1, r0, r1
   22c14:	ldr	r0, [r6]
   22c18:	bl	1a2c <fseek@plt>
   22c1c:	ldr	r0, [r4, #4]
   22c20:	cmp	r0, #1
   22c24:	blt	22260 <ReadDataSlab2+0x4c>
   22c28:	ldr	r0, [sp, #12]
   22c2c:	ldr	r1, [sp, #16]
   22c30:	mov	r4, #0
   22c34:	sub	r0, r0, #1
   22c38:	mul	r7, r0, r1
   22c3c:	mul	r0, r8, r1
   22c40:	ldr	r1, [sp, #8]
   22c44:	mul	r0, r0, r1
   22c48:	str	r0, [sp, #4]
   22c4c:	ldr	r0, [r6]
   22c50:	bl	1840 <ftell@plt>
   22c54:	cmn	r0, #1
   22c58:	beq	231f0 <ReadDataSlab2+0xfdc>
   22c5c:	str	r0, [sp, #8]
   22c60:	ldr	r0, [fp, #12]
   22c64:	ldr	r1, [sp, #16]
   22c68:	mov	r2, #1
   22c6c:	str	r4, [sp, #12]
   22c70:	ldr	r0, [r0]
   22c74:	mul	r1, r0, r1
   22c78:	ldr	r0, [r6]
   22c7c:	bl	1a2c <fseek@plt>
   22c80:	ldr	r9, [fp, #20]
   22c84:	ldr	r0, [r9]
   22c88:	cmp	r0, #1
   22c8c:	blt	22ccc <ReadDataSlab2+0xab8>
   22c90:	mov	r8, #0
   22c94:	mov	r0, r6
   22c98:	mov	r1, r5
   22c9c:	mov	r2, sl
   22ca0:	mov	r3, #1
   22ca4:	bl	138dc <ReadUInt16Data>
   22ca8:	ldr	r0, [r6]
   22cac:	mov	r1, r7
   22cb0:	mov	r2, #1
   22cb4:	bl	1a2c <fseek@plt>
   22cb8:	ldr	r0, [r9]
   22cbc:	add	r8, r8, #1
   22cc0:	add	r5, r5, #2
   22cc4:	cmp	r8, r0
   22cc8:	blt	22c94 <ReadDataSlab2+0xa80>
   22ccc:	ldr	r0, [r6]
   22cd0:	bl	1840 <ftell@plt>
   22cd4:	cmn	r0, #1
   22cd8:	beq	231f0 <ReadDataSlab2+0xfdc>
   22cdc:	ldmib	sp, {r1, r2}
   22ce0:	add	r1, r2, r1
   22ce4:	mov	r2, #1
   22ce8:	sub	r1, r1, r0
   22cec:	ldr	r0, [r6]
   22cf0:	bl	1a2c <fseek@plt>
   22cf4:	ldr	r4, [sp, #12]
   22cf8:	ldr	r0, [r9, #4]
   22cfc:	mov	r9, #0
   22d00:	add	r4, r4, #1
   22d04:	cmp	r4, r0
   22d08:	blt	22c4c <ReadDataSlab2+0xa38>
   22d0c:	b	22260 <ReadDataSlab2+0x4c>
   22d10:	mov	r1, r0
   22d14:	ldr	r0, [r6]
   22d18:	ldr	r8, [r8, #4]
   22d1c:	str	r1, [sp, #8]
   22d20:	str	r2, [sp, #12]
   22d24:	bl	1840 <ftell@plt>
   22d28:	cmn	r0, #1
   22d2c:	beq	231f0 <ReadDataSlab2+0xfdc>
   22d30:	ldr	r0, [fp, #12]
   22d34:	ldr	r1, [sp, #16]
   22d38:	mov	r2, #1
   22d3c:	ldr	r0, [r0, #4]
   22d40:	mul	r0, r0, r1
   22d44:	ldr	r1, [r7]
   22d48:	mul	r1, r0, r1
   22d4c:	ldr	r0, [r6]
   22d50:	bl	1a2c <fseek@plt>
   22d54:	ldr	r0, [r4, #4]
   22d58:	cmp	r0, #1
   22d5c:	blt	22260 <ReadDataSlab2+0x4c>
   22d60:	ldr	r0, [sp, #12]
   22d64:	ldr	r1, [sp, #16]
   22d68:	sub	r0, r0, #1
   22d6c:	mul	r7, r0, r1
   22d70:	mul	r0, r8, r1
   22d74:	ldr	r1, [sp, #8]
   22d78:	mov	r8, #0
   22d7c:	mul	r0, r0, r1
   22d80:	str	r0, [sp, #8]
   22d84:	ldr	r0, [r6]
   22d88:	bl	1840 <ftell@plt>
   22d8c:	cmn	r0, #1
   22d90:	beq	231f0 <ReadDataSlab2+0xfdc>
   22d94:	mov	r9, r0
   22d98:	ldr	r0, [fp, #12]
   22d9c:	ldr	r1, [sp, #16]
   22da0:	mov	r2, #1
   22da4:	ldr	r0, [r0]
   22da8:	mul	r1, r0, r1
   22dac:	ldr	r0, [r6]
   22db0:	bl	1a2c <fseek@plt>
   22db4:	ldr	r4, [fp, #20]
   22db8:	str	r8, [sp, #12]
   22dbc:	ldr	r0, [r4]
   22dc0:	cmp	r0, #1
   22dc4:	blt	22e04 <ReadDataSlab2+0xbf0>
   22dc8:	mov	r8, #0
   22dcc:	mov	r0, r6
   22dd0:	mov	r1, r5
   22dd4:	mov	r2, sl
   22dd8:	mov	r3, #1
   22ddc:	bl	d774 <ReadInt32Data>
   22de0:	ldr	r0, [r6]
   22de4:	mov	r1, r7
   22de8:	mov	r2, #1
   22dec:	bl	1a2c <fseek@plt>
   22df0:	ldr	r0, [r4]
   22df4:	add	r8, r8, #1
   22df8:	add	r5, r5, #4
   22dfc:	cmp	r8, r0
   22e00:	blt	22dcc <ReadDataSlab2+0xbb8>
   22e04:	ldr	r0, [r6]
   22e08:	bl	1840 <ftell@plt>
   22e0c:	cmn	r0, #1
   22e10:	beq	231f0 <ReadDataSlab2+0xfdc>
   22e14:	ldr	r1, [sp, #8]
   22e18:	mov	r2, #1
   22e1c:	add	r1, r9, r1
   22e20:	sub	r1, r1, r0
   22e24:	ldr	r0, [r6]
   22e28:	bl	1a2c <fseek@plt>
   22e2c:	ldr	r8, [sp, #12]
   22e30:	ldr	r0, [r4, #4]
   22e34:	mov	r9, #0
   22e38:	add	r8, r8, #1
   22e3c:	cmp	r8, r0
   22e40:	blt	22d84 <ReadDataSlab2+0xb70>
   22e44:	b	22260 <ReadDataSlab2+0x4c>
   22e48:	mov	r1, r0
   22e4c:	ldr	r0, [r6]
   22e50:	ldr	r8, [r8, #4]
   22e54:	str	r1, [sp, #8]
   22e58:	str	r2, [sp, #12]
   22e5c:	bl	1840 <ftell@plt>
   22e60:	cmn	r0, #1
   22e64:	beq	231f0 <ReadDataSlab2+0xfdc>
   22e68:	ldr	r0, [fp, #12]
   22e6c:	ldr	r1, [sp, #16]
   22e70:	mov	r2, #1
   22e74:	ldr	r0, [r0, #4]
   22e78:	mul	r0, r0, r1
   22e7c:	ldr	r1, [r7]
   22e80:	mul	r1, r0, r1
   22e84:	ldr	r0, [r6]
   22e88:	bl	1a2c <fseek@plt>
   22e8c:	ldr	r0, [r4, #4]
   22e90:	cmp	r0, #1
   22e94:	blt	22260 <ReadDataSlab2+0x4c>
   22e98:	ldr	r0, [sp, #12]
   22e9c:	ldr	r1, [sp, #16]
   22ea0:	mov	r4, #0
   22ea4:	sub	r0, r0, #1
   22ea8:	mul	r7, r0, r1
   22eac:	mul	r0, r8, r1
   22eb0:	ldr	r1, [sp, #8]
   22eb4:	mul	r0, r0, r1
   22eb8:	str	r0, [sp, #4]
   22ebc:	ldr	r0, [r6]
   22ec0:	bl	1840 <ftell@plt>
   22ec4:	cmn	r0, #1
   22ec8:	beq	231f0 <ReadDataSlab2+0xfdc>
   22ecc:	str	r0, [sp, #8]
   22ed0:	ldr	r0, [fp, #12]
   22ed4:	ldr	r1, [sp, #16]
   22ed8:	mov	r2, #1
   22edc:	str	r4, [sp, #12]
   22ee0:	ldr	r0, [r0]
   22ee4:	mul	r1, r0, r1
   22ee8:	ldr	r0, [r6]
   22eec:	bl	1a2c <fseek@plt>
   22ef0:	ldr	r9, [fp, #20]
   22ef4:	ldr	r0, [r9]
   22ef8:	cmp	r0, #1
   22efc:	blt	22f3c <ReadDataSlab2+0xd28>
   22f00:	mov	r8, #0
   22f04:	mov	r0, r6
   22f08:	mov	r1, r5
   22f0c:	mov	r2, sl
   22f10:	mov	r3, #1
   22f14:	bl	f85c <ReadUInt32Data>
   22f18:	ldr	r0, [r6]
   22f1c:	mov	r1, r7
   22f20:	mov	r2, #1
   22f24:	bl	1a2c <fseek@plt>
   22f28:	ldr	r0, [r9]
   22f2c:	add	r8, r8, #1
   22f30:	add	r5, r5, #4
   22f34:	cmp	r8, r0
   22f38:	blt	22f04 <ReadDataSlab2+0xcf0>
   22f3c:	ldr	r0, [r6]
   22f40:	bl	1840 <ftell@plt>
   22f44:	cmn	r0, #1
   22f48:	beq	231f0 <ReadDataSlab2+0xfdc>
   22f4c:	ldmib	sp, {r1, r2}
   22f50:	add	r1, r2, r1
   22f54:	mov	r2, #1
   22f58:	sub	r1, r1, r0
   22f5c:	ldr	r0, [r6]
   22f60:	bl	1a2c <fseek@plt>
   22f64:	ldr	r4, [sp, #12]
   22f68:	ldr	r0, [r9, #4]
   22f6c:	mov	r9, #0
   22f70:	add	r4, r4, #1
   22f74:	cmp	r4, r0
   22f78:	blt	22ebc <ReadDataSlab2+0xca8>
   22f7c:	b	22260 <ReadDataSlab2+0x4c>
   22f80:	mov	r1, r0
   22f84:	ldr	r0, [r6]
   22f88:	ldr	r8, [r8, #4]
   22f8c:	str	r1, [sp, #8]
   22f90:	str	r2, [sp, #12]
   22f94:	bl	1840 <ftell@plt>
   22f98:	cmn	r0, #1
   22f9c:	beq	231f0 <ReadDataSlab2+0xfdc>
   22fa0:	ldr	r0, [fp, #12]
   22fa4:	ldr	r1, [sp, #16]
   22fa8:	mov	r2, #1
   22fac:	ldr	r0, [r0, #4]
   22fb0:	mul	r0, r0, r1
   22fb4:	ldr	r1, [r7]
   22fb8:	mul	r1, r0, r1
   22fbc:	ldr	r0, [r6]
   22fc0:	bl	1a2c <fseek@plt>
   22fc4:	ldr	r0, [r4, #4]
   22fc8:	cmp	r0, #1
   22fcc:	blt	22260 <ReadDataSlab2+0x4c>
   22fd0:	ldr	r0, [sp, #12]
   22fd4:	ldr	r1, [sp, #16]
   22fd8:	mov	r4, #0
   22fdc:	sub	r0, r0, #1
   22fe0:	mul	r7, r0, r1
   22fe4:	mul	r0, r8, r1
   22fe8:	ldr	r1, [sp, #8]
   22fec:	mul	r0, r0, r1
   22ff0:	str	r0, [sp, #4]
   22ff4:	ldr	r0, [r6]
   22ff8:	bl	1840 <ftell@plt>
   22ffc:	cmn	r0, #1
   23000:	beq	231f0 <ReadDataSlab2+0xfdc>
   23004:	str	r0, [sp, #8]
   23008:	ldr	r0, [fp, #12]
   2300c:	ldr	r1, [sp, #16]
   23010:	mov	r2, #1
   23014:	str	r4, [sp, #12]
   23018:	ldr	r0, [r0]
   2301c:	mul	r1, r0, r1
   23020:	ldr	r0, [r6]
   23024:	bl	1a2c <fseek@plt>
   23028:	ldr	r9, [fp, #20]
   2302c:	ldr	r0, [r9]
   23030:	cmp	r0, #1
   23034:	blt	23074 <ReadDataSlab2+0xe60>
   23038:	mov	r8, #0
   2303c:	mov	r0, r6
   23040:	mov	r1, r5
   23044:	mov	r2, sl
   23048:	mov	r3, #1
   2304c:	bl	b5bc <ReadUInt64Data>
   23050:	ldr	r0, [r6]
   23054:	mov	r1, r7
   23058:	mov	r2, #1
   2305c:	bl	1a2c <fseek@plt>
   23060:	ldr	r0, [r9]
   23064:	add	r8, r8, #1
   23068:	add	r5, r5, #8
   2306c:	cmp	r8, r0
   23070:	blt	2303c <ReadDataSlab2+0xe28>
   23074:	ldr	r0, [r6]
   23078:	bl	1840 <ftell@plt>
   2307c:	cmn	r0, #1
   23080:	beq	231f0 <ReadDataSlab2+0xfdc>
   23084:	ldmib	sp, {r1, r2}
   23088:	add	r1, r2, r1
   2308c:	mov	r2, #1
   23090:	sub	r1, r1, r0
   23094:	ldr	r0, [r6]
   23098:	bl	1a2c <fseek@plt>
   2309c:	ldr	r4, [sp, #12]
   230a0:	ldr	r0, [r9, #4]
   230a4:	mov	r9, #0
   230a8:	add	r4, r4, #1
   230ac:	cmp	r4, r0
   230b0:	blt	22ff4 <ReadDataSlab2+0xde0>
   230b4:	b	22260 <ReadDataSlab2+0x4c>
   230b8:	mov	r1, r0
   230bc:	ldr	r0, [r6]
   230c0:	ldr	r8, [r8, #4]
   230c4:	str	r1, [sp, #8]
   230c8:	str	r2, [sp, #12]
   230cc:	bl	1840 <ftell@plt>
   230d0:	cmn	r0, #1
   230d4:	beq	231f0 <ReadDataSlab2+0xfdc>
   230d8:	ldr	r0, [fp, #12]
   230dc:	ldr	r1, [sp, #16]
   230e0:	mov	r2, #1
   230e4:	ldr	r0, [r0, #4]
   230e8:	mul	r0, r0, r1
   230ec:	ldr	r1, [r7]
   230f0:	mul	r1, r0, r1
   230f4:	ldr	r0, [r6]
   230f8:	bl	1a2c <fseek@plt>
   230fc:	ldr	r0, [r4, #4]
   23100:	cmp	r0, #1
   23104:	blt	22260 <ReadDataSlab2+0x4c>
   23108:	ldr	r0, [sp, #12]
   2310c:	ldr	r1, [sp, #16]
   23110:	sub	r0, r0, #1
   23114:	mul	r7, r0, r1
   23118:	mul	r0, r8, r1
   2311c:	ldr	r1, [sp, #8]
   23120:	mov	r8, #0
   23124:	mul	r0, r0, r1
   23128:	str	r0, [sp, #8]
   2312c:	ldr	r0, [r6]
   23130:	bl	1840 <ftell@plt>
   23134:	cmn	r0, #1
   23138:	beq	231f0 <ReadDataSlab2+0xfdc>
   2313c:	mov	r9, r0
   23140:	ldr	r0, [fp, #12]
   23144:	ldr	r1, [sp, #16]
   23148:	mov	r2, #1
   2314c:	ldr	r0, [r0]
   23150:	mul	r1, r0, r1
   23154:	ldr	r0, [r6]
   23158:	bl	1a2c <fseek@plt>
   2315c:	ldr	r4, [fp, #20]
   23160:	str	r8, [sp, #12]
   23164:	ldr	r0, [r4]
   23168:	cmp	r0, #1
   2316c:	blt	231ac <ReadDataSlab2+0xf98>
   23170:	mov	r8, #0
   23174:	mov	r0, r6
   23178:	mov	r1, r5
   2317c:	mov	r2, sl
   23180:	mov	r3, #1
   23184:	bl	9404 <ReadInt64Data>
   23188:	ldr	r0, [r6]
   2318c:	mov	r1, r7
   23190:	mov	r2, #1
   23194:	bl	1a2c <fseek@plt>
   23198:	ldr	r0, [r4]
   2319c:	add	r8, r8, #1
   231a0:	add	r5, r5, #8
   231a4:	cmp	r8, r0
   231a8:	blt	23174 <ReadDataSlab2+0xf60>
   231ac:	ldr	r0, [r6]
   231b0:	bl	1840 <ftell@plt>
   231b4:	cmn	r0, #1
   231b8:	beq	231f0 <ReadDataSlab2+0xfdc>
   231bc:	ldr	r1, [sp, #8]
   231c0:	mov	r2, #1
   231c4:	add	r1, r9, r1
   231c8:	sub	r1, r1, r0
   231cc:	ldr	r0, [r6]
   231d0:	bl	1a2c <fseek@plt>
   231d4:	ldr	r8, [sp, #12]
   231d8:	ldr	r0, [r4, #4]
   231dc:	mov	r9, #0
   231e0:	add	r8, r8, #1
   231e4:	cmp	r8, r0
   231e8:	blt	2312c <ReadDataSlab2+0xf18>
   231ec:	b	22260 <ReadDataSlab2+0x4c>
   231f0:	ldr	r0, [pc, #12]	; 23204 <ReadDataSlab2+0xff0>
   231f4:	add	r0, pc, r0
   231f8:	bl	19b4 <Mat_Critical@plt>
   231fc:	mvn	r9, #0
   23200:	b	22260 <ReadDataSlab2+0x4c>
   23204:	.word	0x000357f4

00023208 <ReadCompressedDataSlab1>:
   23208:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2320c:	add	fp, sp, #28
   23210:	sub	sp, sp, #68	; 0x44
   23214:	mov	r4, r2
   23218:	add	r2, sp, #8
   2321c:	mov	r6, r0
   23220:	mov	r5, r3
   23224:	vmov.i32	q8, #0	; 0x00000000
   23228:	mov	r0, #52	; 0x34
   2322c:	mov	r7, #0
   23230:	mov	r3, r2
   23234:	cmp	r6, #0
   23238:	str	r7, [sp, #56]	; 0x38
   2323c:	vst1.64	{d16-d17}, [r3], r0
   23240:	add	r0, r2, #32
   23244:	vst1.64	{d16-d17}, [r0]
   23248:	add	r0, r2, #16
   2324c:	str	r7, [r3]
   23250:	vst1.64	{d16-d17}, [r0]
   23254:	beq	237f0 <ReadCompressedDataSlab1+0x5e8>
   23258:	cmp	r4, #0
   2325c:	ldrne	r0, [r6]
   23260:	cmpne	r0, #0
   23264:	beq	237f0 <ReadCompressedDataSlab1+0x5e8>
   23268:	ldr	r9, [fp, #12]
   2326c:	ldr	r8, [fp, #8]
   23270:	add	r7, sp, #8
   23274:	mov	r0, r7
   23278:	bl	1948 <inflateCopy@plt>
   2327c:	mov	r0, r6
   23280:	mov	r1, r7
   23284:	mov	r2, r8
   23288:	mov	r3, r9
   2328c:	bl	2768 <InflateSkipData>
   23290:	sub	r0, r5, #6
   23294:	mov	r7, #0
   23298:	cmp	r0, #9
   2329c:	bhi	237e8 <ReadCompressedDataSlab1+0x5e0>
   232a0:	ldr	r1, [fp, #16]
   232a4:	mov	r9, r8
   232a8:	ldr	r8, [fp, #20]
   232ac:	sub	r1, r1, #1
   232b0:	str	r1, [sp, #4]
   232b4:	add	r1, pc, #4
   232b8:	ldr	r0, [r1, r0, lsl #2]
   232bc:	add	pc, r1, r0
   232c0:	.word	0x00000028
   232c4:	.word	0x0000008c
   232c8:	.word	0x000000f0
   232cc:	.word	0x00000154
   232d0:	.word	0x000001b8
   232d4:	.word	0x0000021c
   232d8:	.word	0x00000280
   232dc:	.word	0x000002e4
   232e0:	.word	0x00000348
   232e4:	.word	0x000003ac
   232e8:	ldr	r0, [sp, #4]
   232ec:	cmp	r0, #0
   232f0:	beq	236d0 <ReadCompressedDataSlab1+0x4c8>
   232f4:	cmp	r8, #1
   232f8:	blt	237e8 <ReadCompressedDataSlab1+0x5e0>
   232fc:	mov	r7, #0
   23300:	add	sl, sp, #8
   23304:	mov	r0, #1
   23308:	mov	r1, sl
   2330c:	mov	r2, r4
   23310:	mov	r3, r9
   23314:	str	r0, [sp]
   23318:	mov	r0, r6
   2331c:	bl	5500 <ReadCompressedDoubleData>
   23320:	ldr	r3, [sp, #4]
   23324:	mov	r5, r0
   23328:	mov	r0, r6
   2332c:	mov	r1, sl
   23330:	mov	r2, r9
   23334:	bl	2768 <InflateSkipData>
   23338:	add	r7, r5, r7
   2333c:	subs	r8, r8, #1
   23340:	add	r4, r4, #8
   23344:	bne	23304 <ReadCompressedDataSlab1+0xfc>
   23348:	b	237e8 <ReadCompressedDataSlab1+0x5e0>
   2334c:	ldr	r0, [sp, #4]
   23350:	cmp	r0, #0
   23354:	beq	236ec <ReadCompressedDataSlab1+0x4e4>
   23358:	cmp	r8, #1
   2335c:	blt	237e8 <ReadCompressedDataSlab1+0x5e0>
   23360:	mov	r7, #0
   23364:	add	sl, sp, #8
   23368:	mov	r0, #1
   2336c:	mov	r1, sl
   23370:	mov	r2, r4
   23374:	mov	r3, r9
   23378:	str	r0, [sp]
   2337c:	mov	r0, r6
   23380:	bl	8e60 <ReadCompressedSingleData>
   23384:	ldr	r3, [sp, #4]
   23388:	mov	r5, r0
   2338c:	mov	r0, r6
   23390:	mov	r1, sl
   23394:	mov	r2, r9
   23398:	bl	2768 <InflateSkipData>
   2339c:	add	r7, r5, r7
   233a0:	subs	r8, r8, #1
   233a4:	add	r4, r4, #4
   233a8:	bne	23368 <ReadCompressedDataSlab1+0x160>
   233ac:	b	237e8 <ReadCompressedDataSlab1+0x5e0>
   233b0:	ldr	r0, [sp, #4]
   233b4:	cmp	r0, #0
   233b8:	beq	23708 <ReadCompressedDataSlab1+0x500>
   233bc:	cmp	r8, #1
   233c0:	blt	237e8 <ReadCompressedDataSlab1+0x5e0>
   233c4:	mov	r7, #0
   233c8:	mov	r0, #1
   233cc:	add	sl, sp, #8
   233d0:	mov	r2, r4
   233d4:	mov	r3, r9
   233d8:	str	r0, [sp]
   233dc:	mov	r0, r6
   233e0:	mov	r1, sl
   233e4:	bl	1717c <ReadCompressedInt8Data>
   233e8:	ldr	r3, [sp, #4]
   233ec:	mov	r5, r0
   233f0:	mov	r0, r6
   233f4:	mov	r1, sl
   233f8:	mov	r2, r9
   233fc:	bl	2768 <InflateSkipData>
   23400:	add	r7, r5, r7
   23404:	subs	r8, r8, #1
   23408:	add	r4, r4, #1
   2340c:	bne	233c8 <ReadCompressedDataSlab1+0x1c0>
   23410:	b	237e8 <ReadCompressedDataSlab1+0x5e0>
   23414:	ldr	r0, [sp, #4]
   23418:	cmp	r0, #0
   2341c:	beq	23724 <ReadCompressedDataSlab1+0x51c>
   23420:	cmp	r8, #1
   23424:	blt	237e8 <ReadCompressedDataSlab1+0x5e0>
   23428:	mov	r7, #0
   2342c:	mov	r0, #1
   23430:	add	sl, sp, #8
   23434:	mov	r2, r4
   23438:	mov	r3, r9
   2343c:	str	r0, [sp]
   23440:	mov	r0, r6
   23444:	mov	r1, sl
   23448:	bl	18fb4 <ReadCompressedUInt8Data>
   2344c:	ldr	r3, [sp, #4]
   23450:	mov	r5, r0
   23454:	mov	r0, r6
   23458:	mov	r1, sl
   2345c:	mov	r2, r9
   23460:	bl	2768 <InflateSkipData>
   23464:	add	r7, r5, r7
   23468:	subs	r8, r8, #1
   2346c:	add	r4, r4, #1
   23470:	bne	2342c <ReadCompressedDataSlab1+0x224>
   23474:	b	237e8 <ReadCompressedDataSlab1+0x5e0>
   23478:	ldr	r0, [sp, #4]
   2347c:	cmp	r0, #0
   23480:	beq	23740 <ReadCompressedDataSlab1+0x538>
   23484:	cmp	r8, #1
   23488:	blt	237e8 <ReadCompressedDataSlab1+0x5e0>
   2348c:	mov	r7, #0
   23490:	add	sl, sp, #8
   23494:	mov	r0, #1
   23498:	mov	r1, sl
   2349c:	mov	r2, r4
   234a0:	mov	r3, r9
   234a4:	str	r0, [sp]
   234a8:	mov	r0, r6
   234ac:	bl	133ac <ReadCompressedInt16Data>
   234b0:	ldr	r3, [sp, #4]
   234b4:	mov	r5, r0
   234b8:	mov	r0, r6
   234bc:	mov	r1, sl
   234c0:	mov	r2, r9
   234c4:	bl	2768 <InflateSkipData>
   234c8:	add	r7, r5, r7
   234cc:	subs	r8, r8, #1
   234d0:	add	r4, r4, #2
   234d4:	bne	23494 <ReadCompressedDataSlab1+0x28c>
   234d8:	b	237e8 <ReadCompressedDataSlab1+0x5e0>
   234dc:	ldr	r0, [sp, #4]
   234e0:	cmp	r0, #0
   234e4:	beq	2375c <ReadCompressedDataSlab1+0x554>
   234e8:	cmp	r8, #1
   234ec:	blt	237e8 <ReadCompressedDataSlab1+0x5e0>
   234f0:	mov	r7, #0
   234f4:	add	sl, sp, #8
   234f8:	mov	r0, #1
   234fc:	mov	r1, sl
   23500:	mov	r2, r4
   23504:	mov	r3, r9
   23508:	str	r0, [sp]
   2350c:	mov	r0, r6
   23510:	bl	15344 <ReadCompressedUInt16Data>
   23514:	ldr	r3, [sp, #4]
   23518:	mov	r5, r0
   2351c:	mov	r0, r6
   23520:	mov	r1, sl
   23524:	mov	r2, r9
   23528:	bl	2768 <InflateSkipData>
   2352c:	add	r7, r5, r7
   23530:	subs	r8, r8, #1
   23534:	add	r4, r4, #2
   23538:	bne	234f8 <ReadCompressedDataSlab1+0x2f0>
   2353c:	b	237e8 <ReadCompressedDataSlab1+0x5e0>
   23540:	ldr	r0, [sp, #4]
   23544:	cmp	r0, #0
   23548:	beq	23778 <ReadCompressedDataSlab1+0x570>
   2354c:	cmp	r8, #1
   23550:	blt	237e8 <ReadCompressedDataSlab1+0x5e0>
   23554:	mov	r7, #0
   23558:	add	sl, sp, #8
   2355c:	mov	r0, #1
   23560:	mov	r1, sl
   23564:	mov	r2, r4
   23568:	mov	r3, r9
   2356c:	str	r0, [sp]
   23570:	mov	r0, r6
   23574:	bl	f32c <ReadCompressedInt32Data>
   23578:	ldr	r3, [sp, #4]
   2357c:	mov	r5, r0
   23580:	mov	r0, r6
   23584:	mov	r1, sl
   23588:	mov	r2, r9
   2358c:	bl	2768 <InflateSkipData>
   23590:	add	r7, r5, r7
   23594:	subs	r8, r8, #1
   23598:	add	r4, r4, #4
   2359c:	bne	2355c <ReadCompressedDataSlab1+0x354>
   235a0:	b	237e8 <ReadCompressedDataSlab1+0x5e0>
   235a4:	ldr	r0, [sp, #4]
   235a8:	cmp	r0, #0
   235ac:	beq	23794 <ReadCompressedDataSlab1+0x58c>
   235b0:	cmp	r8, #1
   235b4:	blt	237e8 <ReadCompressedDataSlab1+0x5e0>
   235b8:	mov	r7, #0
   235bc:	add	sl, sp, #8
   235c0:	mov	r0, #1
   235c4:	mov	r1, sl
   235c8:	mov	r2, r4
   235cc:	mov	r3, r9
   235d0:	str	r0, [sp]
   235d4:	mov	r0, r6
   235d8:	bl	11414 <ReadCompressedUInt32Data>
   235dc:	ldr	r3, [sp, #4]
   235e0:	mov	r5, r0
   235e4:	mov	r0, r6
   235e8:	mov	r1, sl
   235ec:	mov	r2, r9
   235f0:	bl	2768 <InflateSkipData>
   235f4:	add	r7, r5, r7
   235f8:	subs	r8, r8, #1
   235fc:	add	r4, r4, #4
   23600:	bne	235c0 <ReadCompressedDataSlab1+0x3b8>
   23604:	b	237e8 <ReadCompressedDataSlab1+0x5e0>
   23608:	ldr	r0, [sp, #4]
   2360c:	cmp	r0, #0
   23610:	beq	237b0 <ReadCompressedDataSlab1+0x5a8>
   23614:	cmp	r8, #1
   23618:	blt	237e8 <ReadCompressedDataSlab1+0x5e0>
   2361c:	mov	r7, #0
   23620:	add	sl, sp, #8
   23624:	mov	r0, #1
   23628:	mov	r1, sl
   2362c:	mov	r2, r4
   23630:	mov	r3, r9
   23634:	str	r0, [sp]
   23638:	mov	r0, r6
   2363c:	bl	b01c <ReadCompressedInt64Data>
   23640:	ldr	r3, [sp, #4]
   23644:	mov	r5, r0
   23648:	mov	r0, r6
   2364c:	mov	r1, sl
   23650:	mov	r2, r9
   23654:	bl	2768 <InflateSkipData>
   23658:	add	r7, r5, r7
   2365c:	subs	r8, r8, #1
   23660:	add	r4, r4, #8
   23664:	bne	23624 <ReadCompressedDataSlab1+0x41c>
   23668:	b	237e8 <ReadCompressedDataSlab1+0x5e0>
   2366c:	ldr	r0, [sp, #4]
   23670:	cmp	r0, #0
   23674:	beq	237cc <ReadCompressedDataSlab1+0x5c4>
   23678:	cmp	r8, #1
   2367c:	blt	237e8 <ReadCompressedDataSlab1+0x5e0>
   23680:	mov	r7, #0
   23684:	add	sl, sp, #8
   23688:	mov	r0, #1
   2368c:	mov	r1, sl
   23690:	mov	r2, r4
   23694:	mov	r3, r9
   23698:	str	r0, [sp]
   2369c:	mov	r0, r6
   236a0:	bl	d1d4 <ReadCompressedUInt64Data>
   236a4:	ldr	r3, [sp, #4]
   236a8:	mov	r5, r0
   236ac:	mov	r0, r6
   236b0:	mov	r1, sl
   236b4:	mov	r2, r9
   236b8:	bl	2768 <InflateSkipData>
   236bc:	add	r7, r5, r7
   236c0:	subs	r8, r8, #1
   236c4:	add	r4, r4, #8
   236c8:	bne	23688 <ReadCompressedDataSlab1+0x480>
   236cc:	b	237e8 <ReadCompressedDataSlab1+0x5e0>
   236d0:	add	r1, sp, #8
   236d4:	mov	r0, r6
   236d8:	mov	r2, r4
   236dc:	mov	r3, r9
   236e0:	str	r8, [sp]
   236e4:	bl	5500 <ReadCompressedDoubleData>
   236e8:	b	237e4 <ReadCompressedDataSlab1+0x5dc>
   236ec:	add	r1, sp, #8
   236f0:	mov	r0, r6
   236f4:	mov	r2, r4
   236f8:	mov	r3, r9
   236fc:	str	r8, [sp]
   23700:	bl	8e60 <ReadCompressedSingleData>
   23704:	b	237e4 <ReadCompressedDataSlab1+0x5dc>
   23708:	add	r1, sp, #8
   2370c:	mov	r0, r6
   23710:	mov	r2, r4
   23714:	mov	r3, r9
   23718:	str	r8, [sp]
   2371c:	bl	1717c <ReadCompressedInt8Data>
   23720:	b	237e4 <ReadCompressedDataSlab1+0x5dc>
   23724:	add	r1, sp, #8
   23728:	mov	r0, r6
   2372c:	mov	r2, r4
   23730:	mov	r3, r9
   23734:	str	r8, [sp]
   23738:	bl	18fb4 <ReadCompressedUInt8Data>
   2373c:	b	237e4 <ReadCompressedDataSlab1+0x5dc>
   23740:	add	r1, sp, #8
   23744:	mov	r0, r6
   23748:	mov	r2, r4
   2374c:	mov	r3, r9
   23750:	str	r8, [sp]
   23754:	bl	133ac <ReadCompressedInt16Data>
   23758:	b	237e4 <ReadCompressedDataSlab1+0x5dc>
   2375c:	add	r1, sp, #8
   23760:	mov	r0, r6
   23764:	mov	r2, r4
   23768:	mov	r3, r9
   2376c:	str	r8, [sp]
   23770:	bl	15344 <ReadCompressedUInt16Data>
   23774:	b	237e4 <ReadCompressedDataSlab1+0x5dc>
   23778:	add	r1, sp, #8
   2377c:	mov	r0, r6
   23780:	mov	r2, r4
   23784:	mov	r3, r9
   23788:	str	r8, [sp]
   2378c:	bl	f32c <ReadCompressedInt32Data>
   23790:	b	237e4 <ReadCompressedDataSlab1+0x5dc>
   23794:	add	r1, sp, #8
   23798:	mov	r0, r6
   2379c:	mov	r2, r4
   237a0:	mov	r3, r9
   237a4:	str	r8, [sp]
   237a8:	bl	11414 <ReadCompressedUInt32Data>
   237ac:	b	237e4 <ReadCompressedDataSlab1+0x5dc>
   237b0:	add	r1, sp, #8
   237b4:	mov	r0, r6
   237b8:	mov	r2, r4
   237bc:	mov	r3, r9
   237c0:	str	r8, [sp]
   237c4:	bl	b01c <ReadCompressedInt64Data>
   237c8:	b	237e4 <ReadCompressedDataSlab1+0x5dc>
   237cc:	add	r1, sp, #8
   237d0:	mov	r0, r6
   237d4:	mov	r2, r4
   237d8:	mov	r3, r9
   237dc:	str	r8, [sp]
   237e0:	bl	d1d4 <ReadCompressedUInt64Data>
   237e4:	mov	r7, r0
   237e8:	add	r0, sp, #8
   237ec:	bl	193c <inflateEnd@plt>
   237f0:	mov	r0, r7
   237f4:	sub	sp, fp, #28
   237f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000237fc <ReadCompressedDataSlab2>:
   237fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23800:	add	fp, sp, #28
   23804:	sub	sp, sp, #84	; 0x54
   23808:	mov	r4, r2
   2380c:	add	r2, sp, #24
   23810:	mov	r5, r0
   23814:	mov	r6, r3
   23818:	vmov.i32	q8, #0	; 0x00000000
   2381c:	mov	r0, #52	; 0x34
   23820:	mov	r3, r2
   23824:	cmp	r5, #0
   23828:	vst1.64	{d16-d17}, [r3], r0
   2382c:	mov	r0, #0
   23830:	cmpne	r4, #0
   23834:	str	r0, [r3]
   23838:	add	r3, r2, #32
   2383c:	add	r2, r2, #16
   23840:	str	r0, [sp, #72]	; 0x48
   23844:	vst1.64	{d16-d17}, [r3]
   23848:	vst1.64	{d16-d17}, [r2]
   2384c:	beq	25298 <ReadCompressedDataSlab2+0x1a9c>
   23850:	ldr	r7, [fp, #24]
   23854:	cmp	r7, #0
   23858:	ldrne	r0, [fp, #20]
   2385c:	cmpne	r0, #0
   23860:	beq	25298 <ReadCompressedDataSlab2+0x1a9c>
   23864:	ldr	r0, [fp, #16]
   23868:	cmp	r0, #0
   2386c:	ldrne	r0, [r5]
   23870:	cmpne	r0, #0
   23874:	beq	25298 <ReadCompressedDataSlab2+0x1a9c>
   23878:	add	r0, sp, #24
   2387c:	bl	1948 <inflateCopy@plt>
   23880:	sub	r0, r6, #6
   23884:	cmp	r0, #9
   23888:	bhi	25290 <ReadCompressedDataSlab2+0x1a94>
   2388c:	str	r5, [sp, #20]
   23890:	add	r1, pc, #16
   23894:	ldr	r2, [fp, #12]
   23898:	ldr	r8, [fp, #8]
   2389c:	mov	sl, r7
   238a0:	ldr	r0, [r1, r0, lsl #2]
   238a4:	add	pc, r1, r0
   238a8:	.word	0x00000028
   238ac:	.word	0x000000b8
   238b0:	.word	0x00000148
   238b4:	.word	0x000001d8
   238b8:	.word	0x00000268
   238bc:	.word	0x000002f8
   238c0:	.word	0x00000388
   238c4:	.word	0x00000418
   238c8:	.word	0x00000538
   238cc:	.word	0x000004a8
   238d0:	ldr	r0, [fp, #16]
   238d4:	ldr	r7, [r2]
   238d8:	ldr	r9, [fp, #20]
   238dc:	ldr	r5, [sp, #20]
   238e0:	add	r1, sp, #24
   238e4:	mov	r2, r8
   238e8:	ldr	r0, [r0, #4]
   238ec:	ldr	r6, [r9, #4]
   238f0:	mul	r3, r0, r7
   238f4:	ldr	r0, [r9]
   238f8:	str	r0, [sp, #12]
   238fc:	mov	r0, r5
   23900:	bl	2768 <InflateSkipData>
   23904:	sub	r0, r6, #1
   23908:	mul	r3, r0, r7
   2390c:	ldr	r0, [r9]
   23910:	cmp	r0, #1
   23914:	bne	23e70 <ReadCompressedDataSlab2+0x674>
   23918:	ldr	r2, [fp, #12]
   2391c:	ldr	r0, [sl]
   23920:	ldr	r1, [r2]
   23924:	cmp	r0, r1
   23928:	bne	24b3c <ReadCompressedDataSlab2+0x1340>
   2392c:	ldr	r1, [fp, #20]
   23930:	ldr	r1, [r1, #4]
   23934:	cmp	r1, #1
   23938:	bne	24b3c <ReadCompressedDataSlab2+0x1340>
   2393c:	ldr	r1, [sl, #4]
   23940:	mov	r2, r4
   23944:	mov	r3, r8
   23948:	mul	r0, r1, r0
   2394c:	add	r1, sp, #24
   23950:	str	r0, [sp]
   23954:	mov	r0, r5
   23958:	bl	5500 <ReadCompressedDoubleData>
   2395c:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   23960:	ldr	r0, [fp, #16]
   23964:	ldr	r7, [r2]
   23968:	ldr	r9, [fp, #20]
   2396c:	ldr	r5, [sp, #20]
   23970:	add	r1, sp, #24
   23974:	mov	r2, r8
   23978:	ldr	r0, [r0, #4]
   2397c:	ldr	r6, [r9, #4]
   23980:	mul	r3, r0, r7
   23984:	ldr	r0, [r9]
   23988:	str	r0, [sp, #12]
   2398c:	mov	r0, r5
   23990:	bl	2768 <InflateSkipData>
   23994:	sub	r0, r6, #1
   23998:	mul	r3, r0, r7
   2399c:	ldr	r0, [r9]
   239a0:	cmp	r0, #1
   239a4:	bne	23fb8 <ReadCompressedDataSlab2+0x7bc>
   239a8:	ldr	r2, [fp, #12]
   239ac:	ldr	r0, [sl]
   239b0:	ldr	r1, [r2]
   239b4:	cmp	r0, r1
   239b8:	bne	24bf8 <ReadCompressedDataSlab2+0x13fc>
   239bc:	ldr	r1, [fp, #20]
   239c0:	ldr	r1, [r1, #4]
   239c4:	cmp	r1, #1
   239c8:	bne	24bf8 <ReadCompressedDataSlab2+0x13fc>
   239cc:	ldr	r1, [sl, #4]
   239d0:	mov	r2, r4
   239d4:	mov	r3, r8
   239d8:	mul	r0, r1, r0
   239dc:	add	r1, sp, #24
   239e0:	str	r0, [sp]
   239e4:	mov	r0, r5
   239e8:	bl	8e60 <ReadCompressedSingleData>
   239ec:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   239f0:	ldr	r0, [fp, #16]
   239f4:	ldr	r7, [r2]
   239f8:	ldr	r9, [fp, #20]
   239fc:	ldr	r5, [sp, #20]
   23a00:	add	r1, sp, #24
   23a04:	mov	r2, r8
   23a08:	ldr	r0, [r0, #4]
   23a0c:	ldr	r6, [r9, #4]
   23a10:	mul	r3, r0, r7
   23a14:	ldr	r0, [r9]
   23a18:	str	r0, [sp, #12]
   23a1c:	mov	r0, r5
   23a20:	bl	2768 <InflateSkipData>
   23a24:	sub	r0, r6, #1
   23a28:	mul	r3, r0, r7
   23a2c:	ldr	r0, [r9]
   23a30:	cmp	r0, #1
   23a34:	bne	24100 <ReadCompressedDataSlab2+0x904>
   23a38:	ldr	r2, [fp, #12]
   23a3c:	ldr	r0, [sl]
   23a40:	ldr	r1, [r2]
   23a44:	cmp	r0, r1
   23a48:	bne	24cb4 <ReadCompressedDataSlab2+0x14b8>
   23a4c:	ldr	r1, [fp, #20]
   23a50:	ldr	r1, [r1, #4]
   23a54:	cmp	r1, #1
   23a58:	bne	24cb4 <ReadCompressedDataSlab2+0x14b8>
   23a5c:	ldr	r1, [sl, #4]
   23a60:	mov	r2, r4
   23a64:	mov	r3, r8
   23a68:	mul	r0, r1, r0
   23a6c:	add	r1, sp, #24
   23a70:	str	r0, [sp]
   23a74:	mov	r0, r5
   23a78:	bl	1717c <ReadCompressedInt8Data>
   23a7c:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   23a80:	ldr	r0, [fp, #16]
   23a84:	ldr	r7, [r2]
   23a88:	ldr	r9, [fp, #20]
   23a8c:	ldr	r5, [sp, #20]
   23a90:	add	r1, sp, #24
   23a94:	mov	r2, r8
   23a98:	ldr	r0, [r0, #4]
   23a9c:	ldr	r6, [r9, #4]
   23aa0:	mul	r3, r0, r7
   23aa4:	ldr	r0, [r9]
   23aa8:	str	r0, [sp, #12]
   23aac:	mov	r0, r5
   23ab0:	bl	2768 <InflateSkipData>
   23ab4:	sub	r0, r6, #1
   23ab8:	mul	r3, r0, r7
   23abc:	ldr	r0, [r9]
   23ac0:	cmp	r0, #1
   23ac4:	bne	2424c <ReadCompressedDataSlab2+0xa50>
   23ac8:	ldr	r2, [fp, #12]
   23acc:	ldr	r0, [sl]
   23ad0:	ldr	r1, [r2]
   23ad4:	cmp	r0, r1
   23ad8:	bne	24d70 <ReadCompressedDataSlab2+0x1574>
   23adc:	ldr	r1, [fp, #20]
   23ae0:	ldr	r1, [r1, #4]
   23ae4:	cmp	r1, #1
   23ae8:	bne	24d70 <ReadCompressedDataSlab2+0x1574>
   23aec:	ldr	r1, [sl, #4]
   23af0:	mov	r2, r4
   23af4:	mov	r3, r8
   23af8:	mul	r0, r1, r0
   23afc:	add	r1, sp, #24
   23b00:	str	r0, [sp]
   23b04:	mov	r0, r5
   23b08:	bl	18fb4 <ReadCompressedUInt8Data>
   23b0c:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   23b10:	ldr	r0, [fp, #16]
   23b14:	ldr	r7, [r2]
   23b18:	ldr	r9, [fp, #20]
   23b1c:	ldr	r5, [sp, #20]
   23b20:	add	r1, sp, #24
   23b24:	mov	r2, r8
   23b28:	ldr	r0, [r0, #4]
   23b2c:	ldr	r6, [r9, #4]
   23b30:	mul	r3, r0, r7
   23b34:	ldr	r0, [r9]
   23b38:	str	r0, [sp, #12]
   23b3c:	mov	r0, r5
   23b40:	bl	2768 <InflateSkipData>
   23b44:	sub	r0, r6, #1
   23b48:	mul	r3, r0, r7
   23b4c:	ldr	r0, [r9]
   23b50:	cmp	r0, #1
   23b54:	bne	24398 <ReadCompressedDataSlab2+0xb9c>
   23b58:	ldr	r2, [fp, #12]
   23b5c:	ldr	r0, [sl]
   23b60:	ldr	r1, [r2]
   23b64:	cmp	r0, r1
   23b68:	bne	24e2c <ReadCompressedDataSlab2+0x1630>
   23b6c:	ldr	r1, [fp, #20]
   23b70:	ldr	r1, [r1, #4]
   23b74:	cmp	r1, #1
   23b78:	bne	24e2c <ReadCompressedDataSlab2+0x1630>
   23b7c:	ldr	r1, [sl, #4]
   23b80:	mov	r2, r4
   23b84:	mov	r3, r8
   23b88:	mul	r0, r1, r0
   23b8c:	add	r1, sp, #24
   23b90:	str	r0, [sp]
   23b94:	mov	r0, r5
   23b98:	bl	133ac <ReadCompressedInt16Data>
   23b9c:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   23ba0:	ldr	r0, [fp, #16]
   23ba4:	ldr	r7, [r2]
   23ba8:	ldr	r9, [fp, #20]
   23bac:	ldr	r5, [sp, #20]
   23bb0:	add	r1, sp, #24
   23bb4:	mov	r2, r8
   23bb8:	ldr	r0, [r0, #4]
   23bbc:	ldr	r6, [r9, #4]
   23bc0:	mul	r3, r0, r7
   23bc4:	ldr	r0, [r9]
   23bc8:	str	r0, [sp, #16]
   23bcc:	mov	r0, r5
   23bd0:	bl	2768 <InflateSkipData>
   23bd4:	sub	r0, r6, #1
   23bd8:	mul	r3, r0, r7
   23bdc:	ldr	r0, [r9]
   23be0:	cmp	r0, #1
   23be4:	bne	244e0 <ReadCompressedDataSlab2+0xce4>
   23be8:	ldr	r2, [fp, #12]
   23bec:	ldr	r0, [sl]
   23bf0:	ldr	r1, [r2]
   23bf4:	cmp	r0, r1
   23bf8:	bne	24ee8 <ReadCompressedDataSlab2+0x16ec>
   23bfc:	ldr	r1, [fp, #20]
   23c00:	ldr	r1, [r1, #4]
   23c04:	cmp	r1, #1
   23c08:	bne	24ee8 <ReadCompressedDataSlab2+0x16ec>
   23c0c:	ldr	r1, [sl, #4]
   23c10:	mov	r2, r4
   23c14:	mov	r3, r8
   23c18:	mul	r0, r1, r0
   23c1c:	add	r1, sp, #24
   23c20:	str	r0, [sp]
   23c24:	mov	r0, r5
   23c28:	bl	15344 <ReadCompressedUInt16Data>
   23c2c:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   23c30:	ldr	r0, [fp, #16]
   23c34:	ldr	r7, [r2]
   23c38:	ldr	r9, [fp, #20]
   23c3c:	ldr	r5, [sp, #20]
   23c40:	add	r1, sp, #24
   23c44:	mov	r2, r8
   23c48:	ldr	r0, [r0, #4]
   23c4c:	ldr	r6, [r9, #4]
   23c50:	mul	r3, r0, r7
   23c54:	ldr	r0, [r9]
   23c58:	str	r0, [sp, #12]
   23c5c:	mov	r0, r5
   23c60:	bl	2768 <InflateSkipData>
   23c64:	sub	r0, r6, #1
   23c68:	mul	r3, r0, r7
   23c6c:	ldr	r0, [r9]
   23c70:	cmp	r0, #1
   23c74:	bne	24634 <ReadCompressedDataSlab2+0xe38>
   23c78:	ldr	r2, [fp, #12]
   23c7c:	ldr	r0, [sl]
   23c80:	ldr	r1, [r2]
   23c84:	cmp	r0, r1
   23c88:	bne	24fa4 <ReadCompressedDataSlab2+0x17a8>
   23c8c:	ldr	r1, [fp, #20]
   23c90:	ldr	r1, [r1, #4]
   23c94:	cmp	r1, #1
   23c98:	bne	24fa4 <ReadCompressedDataSlab2+0x17a8>
   23c9c:	ldr	r1, [sl, #4]
   23ca0:	mov	r2, r4
   23ca4:	mov	r3, r8
   23ca8:	mul	r0, r1, r0
   23cac:	add	r1, sp, #24
   23cb0:	str	r0, [sp]
   23cb4:	mov	r0, r5
   23cb8:	bl	f32c <ReadCompressedInt32Data>
   23cbc:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   23cc0:	ldr	r0, [fp, #16]
   23cc4:	ldr	r7, [r2]
   23cc8:	ldr	r9, [fp, #20]
   23ccc:	ldr	r5, [sp, #20]
   23cd0:	add	r1, sp, #24
   23cd4:	mov	r2, r8
   23cd8:	ldr	r0, [r0, #4]
   23cdc:	ldr	r6, [r9, #4]
   23ce0:	mul	r3, r0, r7
   23ce4:	ldr	r0, [r9]
   23ce8:	str	r0, [sp, #12]
   23cec:	mov	r0, r5
   23cf0:	bl	2768 <InflateSkipData>
   23cf4:	sub	r0, r6, #1
   23cf8:	mul	r3, r0, r7
   23cfc:	ldr	r0, [r9]
   23d00:	cmp	r0, #1
   23d04:	bne	2477c <ReadCompressedDataSlab2+0xf80>
   23d08:	ldr	r2, [fp, #12]
   23d0c:	ldr	r0, [sl]
   23d10:	ldr	r1, [r2]
   23d14:	cmp	r0, r1
   23d18:	bne	25060 <ReadCompressedDataSlab2+0x1864>
   23d1c:	ldr	r1, [fp, #20]
   23d20:	ldr	r1, [r1, #4]
   23d24:	cmp	r1, #1
   23d28:	bne	25060 <ReadCompressedDataSlab2+0x1864>
   23d2c:	ldr	r1, [sl, #4]
   23d30:	mov	r2, r4
   23d34:	mov	r3, r8
   23d38:	mul	r0, r1, r0
   23d3c:	add	r1, sp, #24
   23d40:	str	r0, [sp]
   23d44:	mov	r0, r5
   23d48:	bl	11414 <ReadCompressedUInt32Data>
   23d4c:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   23d50:	ldr	r0, [fp, #16]
   23d54:	ldr	r7, [r2]
   23d58:	ldr	r9, [fp, #20]
   23d5c:	ldr	r5, [sp, #20]
   23d60:	add	r1, sp, #24
   23d64:	mov	r2, r8
   23d68:	ldr	r0, [r0, #4]
   23d6c:	ldr	r6, [r9, #4]
   23d70:	mul	r3, r0, r7
   23d74:	ldr	r0, [r9]
   23d78:	str	r0, [sp, #12]
   23d7c:	mov	r0, r5
   23d80:	bl	2768 <InflateSkipData>
   23d84:	sub	r0, r6, #1
   23d88:	mul	r3, r0, r7
   23d8c:	ldr	r0, [r9]
   23d90:	cmp	r0, #1
   23d94:	bne	248c4 <ReadCompressedDataSlab2+0x10c8>
   23d98:	ldr	r2, [fp, #12]
   23d9c:	ldr	r0, [sl]
   23da0:	ldr	r1, [r2]
   23da4:	cmp	r0, r1
   23da8:	bne	2511c <ReadCompressedDataSlab2+0x1920>
   23dac:	ldr	r1, [fp, #20]
   23db0:	ldr	r1, [r1, #4]
   23db4:	cmp	r1, #1
   23db8:	bne	2511c <ReadCompressedDataSlab2+0x1920>
   23dbc:	ldr	r1, [sl, #4]
   23dc0:	mov	r2, r4
   23dc4:	mov	r3, r8
   23dc8:	mul	r0, r1, r0
   23dcc:	add	r1, sp, #24
   23dd0:	str	r0, [sp]
   23dd4:	mov	r0, r5
   23dd8:	bl	d1d4 <ReadCompressedUInt64Data>
   23ddc:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   23de0:	ldr	r0, [fp, #16]
   23de4:	ldr	r7, [r2]
   23de8:	ldr	r9, [fp, #20]
   23dec:	ldr	r5, [sp, #20]
   23df0:	add	r1, sp, #24
   23df4:	mov	r2, r8
   23df8:	ldr	r0, [r0, #4]
   23dfc:	ldr	r6, [r9, #4]
   23e00:	mul	r3, r0, r7
   23e04:	ldr	r0, [r9]
   23e08:	str	r0, [sp, #12]
   23e0c:	mov	r0, r5
   23e10:	bl	2768 <InflateSkipData>
   23e14:	sub	r0, r6, #1
   23e18:	mul	r3, r0, r7
   23e1c:	ldr	r0, [r9]
   23e20:	cmp	r0, #1
   23e24:	bne	24a0c <ReadCompressedDataSlab2+0x1210>
   23e28:	ldr	r2, [fp, #12]
   23e2c:	ldr	r0, [sl]
   23e30:	ldr	r1, [r2]
   23e34:	cmp	r0, r1
   23e38:	bne	251d8 <ReadCompressedDataSlab2+0x19dc>
   23e3c:	ldr	r1, [fp, #20]
   23e40:	ldr	r1, [r1, #4]
   23e44:	cmp	r1, #1
   23e48:	bne	251d8 <ReadCompressedDataSlab2+0x19dc>
   23e4c:	ldr	r1, [sl, #4]
   23e50:	mov	r2, r4
   23e54:	mov	r3, r8
   23e58:	mul	r0, r1, r0
   23e5c:	add	r1, sp, #24
   23e60:	str	r0, [sp]
   23e64:	mov	r0, r5
   23e68:	bl	b01c <ReadCompressedInt64Data>
   23e6c:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   23e70:	ldr	r0, [sl, #4]
   23e74:	ldr	r9, [fp, #16]
   23e78:	cmp	r0, #1
   23e7c:	blt	25290 <ReadCompressedDataSlab2+0x1a94>
   23e80:	ldr	r0, [sp, #12]
   23e84:	mov	r7, sl
   23e88:	mov	r1, #0
   23e8c:	add	r6, sp, #24
   23e90:	mov	sl, r3
   23e94:	str	r3, [sp, #16]
   23e98:	sub	r0, r0, #1
   23e9c:	str	r0, [sp, #12]
   23ea0:	ldr	r3, [r9]
   23ea4:	str	r1, [sp, #20]
   23ea8:	mov	r0, r5
   23eac:	mov	r1, r6
   23eb0:	mov	r2, r8
   23eb4:	bl	2768 <InflateSkipData>
   23eb8:	mov	sl, r7
   23ebc:	mov	r0, #1
   23ec0:	mov	r1, r6
   23ec4:	mov	r2, r4
   23ec8:	mov	r3, r8
   23ecc:	mov	r9, r6
   23ed0:	ldr	sl, [r7]
   23ed4:	str	r0, [sp]
   23ed8:	mov	r0, r5
   23edc:	bl	5500 <ReadCompressedDoubleData>
   23ee0:	add	r4, r4, #8
   23ee4:	cmp	sl, #2
   23ee8:	blt	23f4c <ReadCompressedDataSlab2+0x750>
   23eec:	ldr	r8, [fp, #8]
   23ef0:	ldr	r7, [sp, #12]
   23ef4:	mov	sl, #0
   23ef8:	mov	r6, r9
   23efc:	mov	r0, r5
   23f00:	mov	r1, r6
   23f04:	mov	r2, r8
   23f08:	mov	r3, r7
   23f0c:	bl	2768 <InflateSkipData>
   23f10:	ldr	r0, [fp, #24]
   23f14:	mov	r1, r6
   23f18:	mov	r2, r4
   23f1c:	mov	r3, r8
   23f20:	ldr	r9, [r0]
   23f24:	mov	r0, #1
   23f28:	str	r0, [sp]
   23f2c:	mov	r0, r5
   23f30:	bl	5500 <ReadCompressedDoubleData>
   23f34:	add	sl, sl, #1
   23f38:	sub	r0, r9, #1
   23f3c:	add	r4, r4, #8
   23f40:	cmp	sl, r0
   23f44:	blt	23efc <ReadCompressedDataSlab2+0x700>
   23f48:	b	23f54 <ReadCompressedDataSlab2+0x758>
   23f4c:	ldr	r8, [fp, #8]
   23f50:	mov	r6, r9
   23f54:	ldr	r7, [fp, #24]
   23f58:	ldr	r1, [fp, #20]
   23f5c:	ldr	r0, [fp, #12]
   23f60:	ldr	sl, [sp, #16]
   23f64:	ldr	r9, [fp, #16]
   23f68:	ldr	r2, [r7]
   23f6c:	ldr	r1, [r1]
   23f70:	ldr	r0, [r0]
   23f74:	sub	r2, r2, #1
   23f78:	add	r0, r0, sl
   23f7c:	mul	r1, r2, r1
   23f80:	mov	r2, r8
   23f84:	mvn	r1, r1
   23f88:	add	r0, r0, r1
   23f8c:	ldr	r1, [r9]
   23f90:	sub	r3, r0, r1
   23f94:	mov	r0, r5
   23f98:	mov	r1, r6
   23f9c:	bl	2768 <InflateSkipData>
   23fa0:	ldr	r1, [sp, #20]
   23fa4:	ldr	r0, [r7, #4]
   23fa8:	add	r1, r1, #1
   23fac:	cmp	r1, r0
   23fb0:	blt	23ea0 <ReadCompressedDataSlab2+0x6a4>
   23fb4:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   23fb8:	ldr	r0, [sl, #4]
   23fbc:	ldr	r9, [fp, #16]
   23fc0:	cmp	r0, #1
   23fc4:	blt	25290 <ReadCompressedDataSlab2+0x1a94>
   23fc8:	ldr	r0, [sp, #12]
   23fcc:	mov	r7, sl
   23fd0:	mov	r1, #0
   23fd4:	add	r6, sp, #24
   23fd8:	mov	sl, r3
   23fdc:	str	r3, [sp, #16]
   23fe0:	sub	r0, r0, #1
   23fe4:	str	r0, [sp, #12]
   23fe8:	ldr	r3, [r9]
   23fec:	str	r1, [sp, #20]
   23ff0:	mov	r0, r5
   23ff4:	mov	r1, r6
   23ff8:	mov	r2, r8
   23ffc:	bl	2768 <InflateSkipData>
   24000:	mov	sl, r7
   24004:	mov	r0, #1
   24008:	mov	r1, r6
   2400c:	mov	r2, r4
   24010:	mov	r3, r8
   24014:	mov	r9, r6
   24018:	ldr	sl, [r7]
   2401c:	str	r0, [sp]
   24020:	mov	r0, r5
   24024:	bl	8e60 <ReadCompressedSingleData>
   24028:	add	r4, r4, #4
   2402c:	cmp	sl, #2
   24030:	blt	24094 <ReadCompressedDataSlab2+0x898>
   24034:	ldr	r8, [fp, #8]
   24038:	ldr	r7, [sp, #12]
   2403c:	mov	sl, #0
   24040:	mov	r6, r9
   24044:	mov	r0, r5
   24048:	mov	r1, r6
   2404c:	mov	r2, r8
   24050:	mov	r3, r7
   24054:	bl	2768 <InflateSkipData>
   24058:	ldr	r0, [fp, #24]
   2405c:	mov	r1, r6
   24060:	mov	r2, r4
   24064:	mov	r3, r8
   24068:	ldr	r9, [r0]
   2406c:	mov	r0, #1
   24070:	str	r0, [sp]
   24074:	mov	r0, r5
   24078:	bl	8e60 <ReadCompressedSingleData>
   2407c:	add	sl, sl, #1
   24080:	sub	r0, r9, #1
   24084:	add	r4, r4, #4
   24088:	cmp	sl, r0
   2408c:	blt	24044 <ReadCompressedDataSlab2+0x848>
   24090:	b	2409c <ReadCompressedDataSlab2+0x8a0>
   24094:	ldr	r8, [fp, #8]
   24098:	mov	r6, r9
   2409c:	ldr	r7, [fp, #24]
   240a0:	ldr	r1, [fp, #20]
   240a4:	ldr	r0, [fp, #12]
   240a8:	ldr	sl, [sp, #16]
   240ac:	ldr	r9, [fp, #16]
   240b0:	ldr	r2, [r7]
   240b4:	ldr	r1, [r1]
   240b8:	ldr	r0, [r0]
   240bc:	sub	r2, r2, #1
   240c0:	add	r0, r0, sl
   240c4:	mul	r1, r2, r1
   240c8:	mov	r2, r8
   240cc:	mvn	r1, r1
   240d0:	add	r0, r0, r1
   240d4:	ldr	r1, [r9]
   240d8:	sub	r3, r0, r1
   240dc:	mov	r0, r5
   240e0:	mov	r1, r6
   240e4:	bl	2768 <InflateSkipData>
   240e8:	ldr	r1, [sp, #20]
   240ec:	ldr	r0, [r7, #4]
   240f0:	add	r1, r1, #1
   240f4:	cmp	r1, r0
   240f8:	blt	23fe8 <ReadCompressedDataSlab2+0x7ec>
   240fc:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   24100:	ldr	r0, [sl, #4]
   24104:	mov	r7, r8
   24108:	ldr	r8, [fp, #16]
   2410c:	cmp	r0, #1
   24110:	blt	25290 <ReadCompressedDataSlab2+0x1a94>
   24114:	ldr	r0, [sp, #12]
   24118:	mov	r1, r8
   2411c:	mov	r6, #0
   24120:	add	r9, sp, #24
   24124:	mov	r8, r3
   24128:	str	r3, [sp, #16]
   2412c:	sub	r0, r0, #1
   24130:	str	r0, [sp, #12]
   24134:	ldr	r3, [r1]
   24138:	mov	r8, r1
   2413c:	mov	r0, r5
   24140:	mov	r1, r9
   24144:	mov	r2, r7
   24148:	bl	2768 <InflateSkipData>
   2414c:	ldr	sl, [sl]
   24150:	mov	r0, #1
   24154:	mov	r1, r9
   24158:	mov	r2, r4
   2415c:	mov	r3, r7
   24160:	str	r0, [sp]
   24164:	mov	r0, r5
   24168:	bl	1717c <ReadCompressedInt8Data>
   2416c:	add	r4, r4, #1
   24170:	cmp	sl, #2
   24174:	blt	241e0 <ReadCompressedDataSlab2+0x9e4>
   24178:	str	r6, [sp, #20]
   2417c:	ldr	r8, [fp, #8]
   24180:	ldr	r6, [sp, #12]
   24184:	mov	r1, r9
   24188:	mov	sl, #0
   2418c:	mov	r7, #1
   24190:	mov	r0, r5
   24194:	mov	r2, r8
   24198:	mov	r3, r6
   2419c:	bl	2768 <InflateSkipData>
   241a0:	ldr	r0, [fp, #24]
   241a4:	add	r2, r4, sl
   241a8:	add	r1, sp, #24
   241ac:	mov	r3, r8
   241b0:	ldr	r9, [r0]
   241b4:	mov	r0, r5
   241b8:	str	r7, [sp]
   241bc:	bl	1717c <ReadCompressedInt8Data>
   241c0:	add	sl, sl, #1
   241c4:	sub	r0, r9, #1
   241c8:	add	r1, sp, #24
   241cc:	cmp	sl, r0
   241d0:	blt	24190 <ReadCompressedDataSlab2+0x994>
   241d4:	ldr	r8, [fp, #16]
   241d8:	ldr	r6, [sp, #20]
   241dc:	add	r4, r4, sl
   241e0:	mov	r3, r8
   241e4:	ldr	sl, [fp, #24]
   241e8:	ldr	r1, [fp, #20]
   241ec:	ldr	r0, [fp, #12]
   241f0:	ldr	r8, [sp, #16]
   241f4:	ldr	r7, [fp, #8]
   241f8:	add	r9, sp, #24
   241fc:	ldr	r2, [sl]
   24200:	ldr	r1, [r1]
   24204:	ldr	r0, [r0]
   24208:	sub	r2, r2, #1
   2420c:	add	r0, r0, r8
   24210:	mul	r1, r2, r1
   24214:	mov	r2, r7
   24218:	mvn	r1, r1
   2421c:	add	r0, r0, r1
   24220:	ldr	r1, [r3]
   24224:	sub	r3, r0, r1
   24228:	mov	r0, r5
   2422c:	mov	r1, r9
   24230:	bl	2768 <InflateSkipData>
   24234:	ldr	r0, [sl, #4]
   24238:	ldr	r1, [fp, #16]
   2423c:	add	r6, r6, #1
   24240:	cmp	r6, r0
   24244:	blt	24134 <ReadCompressedDataSlab2+0x938>
   24248:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   2424c:	ldr	r0, [sl, #4]
   24250:	mov	r7, r8
   24254:	ldr	r8, [fp, #16]
   24258:	cmp	r0, #1
   2425c:	blt	25290 <ReadCompressedDataSlab2+0x1a94>
   24260:	ldr	r0, [sp, #12]
   24264:	mov	r1, r8
   24268:	mov	r6, #0
   2426c:	add	r9, sp, #24
   24270:	mov	r8, r3
   24274:	str	r3, [sp, #16]
   24278:	sub	r0, r0, #1
   2427c:	str	r0, [sp, #12]
   24280:	ldr	r3, [r1]
   24284:	mov	r8, r1
   24288:	mov	r0, r5
   2428c:	mov	r1, r9
   24290:	mov	r2, r7
   24294:	bl	2768 <InflateSkipData>
   24298:	ldr	sl, [sl]
   2429c:	mov	r0, #1
   242a0:	mov	r1, r9
   242a4:	mov	r2, r4
   242a8:	mov	r3, r7
   242ac:	str	r0, [sp]
   242b0:	mov	r0, r5
   242b4:	bl	18fb4 <ReadCompressedUInt8Data>
   242b8:	add	r4, r4, #1
   242bc:	cmp	sl, #2
   242c0:	blt	2432c <ReadCompressedDataSlab2+0xb30>
   242c4:	str	r6, [sp, #20]
   242c8:	ldr	r8, [fp, #8]
   242cc:	ldr	r6, [sp, #12]
   242d0:	mov	r1, r9
   242d4:	mov	sl, #0
   242d8:	mov	r7, #1
   242dc:	mov	r0, r5
   242e0:	mov	r2, r8
   242e4:	mov	r3, r6
   242e8:	bl	2768 <InflateSkipData>
   242ec:	ldr	r0, [fp, #24]
   242f0:	add	r2, r4, sl
   242f4:	add	r1, sp, #24
   242f8:	mov	r3, r8
   242fc:	ldr	r9, [r0]
   24300:	mov	r0, r5
   24304:	str	r7, [sp]
   24308:	bl	18fb4 <ReadCompressedUInt8Data>
   2430c:	add	sl, sl, #1
   24310:	sub	r0, r9, #1
   24314:	add	r1, sp, #24
   24318:	cmp	sl, r0
   2431c:	blt	242dc <ReadCompressedDataSlab2+0xae0>
   24320:	ldr	r8, [fp, #16]
   24324:	ldr	r6, [sp, #20]
   24328:	add	r4, r4, sl
   2432c:	mov	r3, r8
   24330:	ldr	sl, [fp, #24]
   24334:	ldr	r1, [fp, #20]
   24338:	ldr	r0, [fp, #12]
   2433c:	ldr	r8, [sp, #16]
   24340:	ldr	r7, [fp, #8]
   24344:	add	r9, sp, #24
   24348:	ldr	r2, [sl]
   2434c:	ldr	r1, [r1]
   24350:	ldr	r0, [r0]
   24354:	sub	r2, r2, #1
   24358:	add	r0, r0, r8
   2435c:	mul	r1, r2, r1
   24360:	mov	r2, r7
   24364:	mvn	r1, r1
   24368:	add	r0, r0, r1
   2436c:	ldr	r1, [r3]
   24370:	sub	r3, r0, r1
   24374:	mov	r0, r5
   24378:	mov	r1, r9
   2437c:	bl	2768 <InflateSkipData>
   24380:	ldr	r0, [sl, #4]
   24384:	ldr	r1, [fp, #16]
   24388:	add	r6, r6, #1
   2438c:	cmp	r6, r0
   24390:	blt	24280 <ReadCompressedDataSlab2+0xa84>
   24394:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   24398:	ldr	r0, [sl, #4]
   2439c:	ldr	r9, [fp, #16]
   243a0:	cmp	r0, #1
   243a4:	blt	25290 <ReadCompressedDataSlab2+0x1a94>
   243a8:	ldr	r0, [sp, #12]
   243ac:	mov	r7, sl
   243b0:	mov	r1, #0
   243b4:	add	r6, sp, #24
   243b8:	mov	sl, r3
   243bc:	str	r3, [sp, #16]
   243c0:	sub	r0, r0, #1
   243c4:	str	r0, [sp, #12]
   243c8:	ldr	r3, [r9]
   243cc:	str	r1, [sp, #20]
   243d0:	mov	r0, r5
   243d4:	mov	r1, r6
   243d8:	mov	r2, r8
   243dc:	bl	2768 <InflateSkipData>
   243e0:	mov	sl, r7
   243e4:	mov	r0, #1
   243e8:	mov	r1, r6
   243ec:	mov	r2, r4
   243f0:	mov	r3, r8
   243f4:	mov	r9, r6
   243f8:	ldr	sl, [r7]
   243fc:	str	r0, [sp]
   24400:	mov	r0, r5
   24404:	bl	133ac <ReadCompressedInt16Data>
   24408:	add	r4, r4, #2
   2440c:	cmp	sl, #2
   24410:	blt	24474 <ReadCompressedDataSlab2+0xc78>
   24414:	ldr	r8, [fp, #8]
   24418:	ldr	r7, [sp, #12]
   2441c:	mov	sl, #0
   24420:	mov	r6, r9
   24424:	mov	r0, r5
   24428:	mov	r1, r6
   2442c:	mov	r2, r8
   24430:	mov	r3, r7
   24434:	bl	2768 <InflateSkipData>
   24438:	ldr	r0, [fp, #24]
   2443c:	mov	r1, r6
   24440:	mov	r2, r4
   24444:	mov	r3, r8
   24448:	ldr	r9, [r0]
   2444c:	mov	r0, #1
   24450:	str	r0, [sp]
   24454:	mov	r0, r5
   24458:	bl	133ac <ReadCompressedInt16Data>
   2445c:	add	sl, sl, #1
   24460:	sub	r0, r9, #1
   24464:	add	r4, r4, #2
   24468:	cmp	sl, r0
   2446c:	blt	24424 <ReadCompressedDataSlab2+0xc28>
   24470:	b	2447c <ReadCompressedDataSlab2+0xc80>
   24474:	ldr	r8, [fp, #8]
   24478:	mov	r6, r9
   2447c:	ldr	r7, [fp, #24]
   24480:	ldr	r1, [fp, #20]
   24484:	ldr	r0, [fp, #12]
   24488:	ldr	sl, [sp, #16]
   2448c:	ldr	r9, [fp, #16]
   24490:	ldr	r2, [r7]
   24494:	ldr	r1, [r1]
   24498:	ldr	r0, [r0]
   2449c:	sub	r2, r2, #1
   244a0:	add	r0, r0, sl
   244a4:	mul	r1, r2, r1
   244a8:	mov	r2, r8
   244ac:	mvn	r1, r1
   244b0:	add	r0, r0, r1
   244b4:	ldr	r1, [r9]
   244b8:	sub	r3, r0, r1
   244bc:	mov	r0, r5
   244c0:	mov	r1, r6
   244c4:	bl	2768 <InflateSkipData>
   244c8:	ldr	r1, [sp, #20]
   244cc:	ldr	r0, [r7, #4]
   244d0:	add	r1, r1, #1
   244d4:	cmp	r1, r0
   244d8:	blt	243c8 <ReadCompressedDataSlab2+0xbcc>
   244dc:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   244e0:	ldr	r0, [sl, #4]
   244e4:	ldr	r9, [fp, #16]
   244e8:	cmp	r0, #1
   244ec:	blt	25290 <ReadCompressedDataSlab2+0x1a94>
   244f0:	ldr	r0, [sp, #16]
   244f4:	mov	r7, sl
   244f8:	mov	r6, r5
   244fc:	mov	r1, #0
   24500:	add	r5, sp, #24
   24504:	mov	sl, r3
   24508:	str	r3, [sp, #12]
   2450c:	sub	r0, r0, #1
   24510:	str	r0, [sp, #8]
   24514:	ldr	r3, [r9]
   24518:	str	r1, [sp, #16]
   2451c:	mov	r0, r6
   24520:	mov	r1, r5
   24524:	mov	r2, r8
   24528:	bl	2768 <InflateSkipData>
   2452c:	mov	sl, r7
   24530:	mov	r0, #1
   24534:	mov	r1, r5
   24538:	mov	r2, r4
   2453c:	mov	r3, r8
   24540:	mov	r9, r5
   24544:	ldr	sl, [r7]
   24548:	str	r0, [sp]
   2454c:	mov	r0, r6
   24550:	bl	15344 <ReadCompressedUInt16Data>
   24554:	add	r4, r4, #2
   24558:	cmp	sl, #2
   2455c:	blt	245c4 <ReadCompressedDataSlab2+0xdc8>
   24560:	ldr	r8, [fp, #8]
   24564:	ldr	r7, [sp, #8]
   24568:	ldr	r6, [sp, #20]
   2456c:	mov	sl, #0
   24570:	mov	r5, r9
   24574:	mov	r0, r6
   24578:	mov	r1, r5
   2457c:	mov	r2, r8
   24580:	mov	r3, r7
   24584:	bl	2768 <InflateSkipData>
   24588:	ldr	r0, [fp, #24]
   2458c:	mov	r1, r5
   24590:	mov	r2, r4
   24594:	mov	r3, r8
   24598:	ldr	r9, [r0]
   2459c:	mov	r0, #1
   245a0:	str	r0, [sp]
   245a4:	mov	r0, r6
   245a8:	bl	15344 <ReadCompressedUInt16Data>
   245ac:	add	sl, sl, #1
   245b0:	sub	r0, r9, #1
   245b4:	add	r4, r4, #2
   245b8:	cmp	sl, r0
   245bc:	blt	24574 <ReadCompressedDataSlab2+0xd78>
   245c0:	b	245d0 <ReadCompressedDataSlab2+0xdd4>
   245c4:	ldr	r8, [fp, #8]
   245c8:	ldr	r6, [sp, #20]
   245cc:	mov	r5, r9
   245d0:	ldr	r7, [fp, #24]
   245d4:	ldr	r1, [fp, #20]
   245d8:	ldr	r0, [fp, #12]
   245dc:	ldr	sl, [sp, #12]
   245e0:	ldr	r9, [fp, #16]
   245e4:	ldr	r2, [r7]
   245e8:	ldr	r1, [r1]
   245ec:	ldr	r0, [r0]
   245f0:	sub	r2, r2, #1
   245f4:	add	r0, r0, sl
   245f8:	mul	r1, r2, r1
   245fc:	mov	r2, r8
   24600:	mvn	r1, r1
   24604:	add	r0, r0, r1
   24608:	ldr	r1, [r9]
   2460c:	sub	r3, r0, r1
   24610:	mov	r0, r6
   24614:	mov	r1, r5
   24618:	bl	2768 <InflateSkipData>
   2461c:	ldr	r1, [sp, #16]
   24620:	ldr	r0, [r7, #4]
   24624:	add	r1, r1, #1
   24628:	cmp	r1, r0
   2462c:	blt	24514 <ReadCompressedDataSlab2+0xd18>
   24630:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   24634:	ldr	r0, [sl, #4]
   24638:	ldr	r9, [fp, #16]
   2463c:	cmp	r0, #1
   24640:	blt	25290 <ReadCompressedDataSlab2+0x1a94>
   24644:	ldr	r0, [sp, #12]
   24648:	mov	r7, sl
   2464c:	mov	r1, #0
   24650:	add	r6, sp, #24
   24654:	mov	sl, r3
   24658:	str	r3, [sp, #16]
   2465c:	sub	r0, r0, #1
   24660:	str	r0, [sp, #12]
   24664:	ldr	r3, [r9]
   24668:	str	r1, [sp, #20]
   2466c:	mov	r0, r5
   24670:	mov	r1, r6
   24674:	mov	r2, r8
   24678:	bl	2768 <InflateSkipData>
   2467c:	mov	sl, r7
   24680:	mov	r0, #1
   24684:	mov	r1, r6
   24688:	mov	r2, r4
   2468c:	mov	r3, r8
   24690:	mov	r9, r6
   24694:	ldr	sl, [r7]
   24698:	str	r0, [sp]
   2469c:	mov	r0, r5
   246a0:	bl	f32c <ReadCompressedInt32Data>
   246a4:	add	r4, r4, #4
   246a8:	cmp	sl, #2
   246ac:	blt	24710 <ReadCompressedDataSlab2+0xf14>
   246b0:	ldr	r8, [fp, #8]
   246b4:	ldr	r7, [sp, #12]
   246b8:	mov	sl, #0
   246bc:	mov	r6, r9
   246c0:	mov	r0, r5
   246c4:	mov	r1, r6
   246c8:	mov	r2, r8
   246cc:	mov	r3, r7
   246d0:	bl	2768 <InflateSkipData>
   246d4:	ldr	r0, [fp, #24]
   246d8:	mov	r1, r6
   246dc:	mov	r2, r4
   246e0:	mov	r3, r8
   246e4:	ldr	r9, [r0]
   246e8:	mov	r0, #1
   246ec:	str	r0, [sp]
   246f0:	mov	r0, r5
   246f4:	bl	f32c <ReadCompressedInt32Data>
   246f8:	add	sl, sl, #1
   246fc:	sub	r0, r9, #1
   24700:	add	r4, r4, #4
   24704:	cmp	sl, r0
   24708:	blt	246c0 <ReadCompressedDataSlab2+0xec4>
   2470c:	b	24718 <ReadCompressedDataSlab2+0xf1c>
   24710:	ldr	r8, [fp, #8]
   24714:	mov	r6, r9
   24718:	ldr	r7, [fp, #24]
   2471c:	ldr	r1, [fp, #20]
   24720:	ldr	r0, [fp, #12]
   24724:	ldr	sl, [sp, #16]
   24728:	ldr	r9, [fp, #16]
   2472c:	ldr	r2, [r7]
   24730:	ldr	r1, [r1]
   24734:	ldr	r0, [r0]
   24738:	sub	r2, r2, #1
   2473c:	add	r0, r0, sl
   24740:	mul	r1, r2, r1
   24744:	mov	r2, r8
   24748:	mvn	r1, r1
   2474c:	add	r0, r0, r1
   24750:	ldr	r1, [r9]
   24754:	sub	r3, r0, r1
   24758:	mov	r0, r5
   2475c:	mov	r1, r6
   24760:	bl	2768 <InflateSkipData>
   24764:	ldr	r1, [sp, #20]
   24768:	ldr	r0, [r7, #4]
   2476c:	add	r1, r1, #1
   24770:	cmp	r1, r0
   24774:	blt	24664 <ReadCompressedDataSlab2+0xe68>
   24778:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   2477c:	ldr	r0, [sl, #4]
   24780:	ldr	r9, [fp, #16]
   24784:	cmp	r0, #1
   24788:	blt	25290 <ReadCompressedDataSlab2+0x1a94>
   2478c:	ldr	r0, [sp, #12]
   24790:	mov	r7, sl
   24794:	mov	r1, #0
   24798:	add	r6, sp, #24
   2479c:	mov	sl, r3
   247a0:	str	r3, [sp, #16]
   247a4:	sub	r0, r0, #1
   247a8:	str	r0, [sp, #12]
   247ac:	ldr	r3, [r9]
   247b0:	str	r1, [sp, #20]
   247b4:	mov	r0, r5
   247b8:	mov	r1, r6
   247bc:	mov	r2, r8
   247c0:	bl	2768 <InflateSkipData>
   247c4:	mov	sl, r7
   247c8:	mov	r0, #1
   247cc:	mov	r1, r6
   247d0:	mov	r2, r4
   247d4:	mov	r3, r8
   247d8:	mov	r9, r6
   247dc:	ldr	sl, [r7]
   247e0:	str	r0, [sp]
   247e4:	mov	r0, r5
   247e8:	bl	11414 <ReadCompressedUInt32Data>
   247ec:	add	r4, r4, #4
   247f0:	cmp	sl, #2
   247f4:	blt	24858 <ReadCompressedDataSlab2+0x105c>
   247f8:	ldr	r8, [fp, #8]
   247fc:	ldr	r7, [sp, #12]
   24800:	mov	sl, #0
   24804:	mov	r6, r9
   24808:	mov	r0, r5
   2480c:	mov	r1, r6
   24810:	mov	r2, r8
   24814:	mov	r3, r7
   24818:	bl	2768 <InflateSkipData>
   2481c:	ldr	r0, [fp, #24]
   24820:	mov	r1, r6
   24824:	mov	r2, r4
   24828:	mov	r3, r8
   2482c:	ldr	r9, [r0]
   24830:	mov	r0, #1
   24834:	str	r0, [sp]
   24838:	mov	r0, r5
   2483c:	bl	11414 <ReadCompressedUInt32Data>
   24840:	add	sl, sl, #1
   24844:	sub	r0, r9, #1
   24848:	add	r4, r4, #4
   2484c:	cmp	sl, r0
   24850:	blt	24808 <ReadCompressedDataSlab2+0x100c>
   24854:	b	24860 <ReadCompressedDataSlab2+0x1064>
   24858:	ldr	r8, [fp, #8]
   2485c:	mov	r6, r9
   24860:	ldr	r7, [fp, #24]
   24864:	ldr	r1, [fp, #20]
   24868:	ldr	r0, [fp, #12]
   2486c:	ldr	sl, [sp, #16]
   24870:	ldr	r9, [fp, #16]
   24874:	ldr	r2, [r7]
   24878:	ldr	r1, [r1]
   2487c:	ldr	r0, [r0]
   24880:	sub	r2, r2, #1
   24884:	add	r0, r0, sl
   24888:	mul	r1, r2, r1
   2488c:	mov	r2, r8
   24890:	mvn	r1, r1
   24894:	add	r0, r0, r1
   24898:	ldr	r1, [r9]
   2489c:	sub	r3, r0, r1
   248a0:	mov	r0, r5
   248a4:	mov	r1, r6
   248a8:	bl	2768 <InflateSkipData>
   248ac:	ldr	r1, [sp, #20]
   248b0:	ldr	r0, [r7, #4]
   248b4:	add	r1, r1, #1
   248b8:	cmp	r1, r0
   248bc:	blt	247ac <ReadCompressedDataSlab2+0xfb0>
   248c0:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   248c4:	ldr	r0, [sl, #4]
   248c8:	ldr	r9, [fp, #16]
   248cc:	cmp	r0, #1
   248d0:	blt	25290 <ReadCompressedDataSlab2+0x1a94>
   248d4:	ldr	r0, [sp, #12]
   248d8:	mov	r7, sl
   248dc:	mov	r1, #0
   248e0:	add	r6, sp, #24
   248e4:	mov	sl, r3
   248e8:	str	r3, [sp, #16]
   248ec:	sub	r0, r0, #1
   248f0:	str	r0, [sp, #12]
   248f4:	ldr	r3, [r9]
   248f8:	str	r1, [sp, #20]
   248fc:	mov	r0, r5
   24900:	mov	r1, r6
   24904:	mov	r2, r8
   24908:	bl	2768 <InflateSkipData>
   2490c:	mov	sl, r7
   24910:	mov	r0, #1
   24914:	mov	r1, r6
   24918:	mov	r2, r4
   2491c:	mov	r3, r8
   24920:	mov	r9, r6
   24924:	ldr	sl, [r7]
   24928:	str	r0, [sp]
   2492c:	mov	r0, r5
   24930:	bl	d1d4 <ReadCompressedUInt64Data>
   24934:	add	r4, r4, #8
   24938:	cmp	sl, #2
   2493c:	blt	249a0 <ReadCompressedDataSlab2+0x11a4>
   24940:	ldr	r8, [fp, #8]
   24944:	ldr	r7, [sp, #12]
   24948:	mov	sl, #0
   2494c:	mov	r6, r9
   24950:	mov	r0, r5
   24954:	mov	r1, r6
   24958:	mov	r2, r8
   2495c:	mov	r3, r7
   24960:	bl	2768 <InflateSkipData>
   24964:	ldr	r0, [fp, #24]
   24968:	mov	r1, r6
   2496c:	mov	r2, r4
   24970:	mov	r3, r8
   24974:	ldr	r9, [r0]
   24978:	mov	r0, #1
   2497c:	str	r0, [sp]
   24980:	mov	r0, r5
   24984:	bl	d1d4 <ReadCompressedUInt64Data>
   24988:	add	sl, sl, #1
   2498c:	sub	r0, r9, #1
   24990:	add	r4, r4, #8
   24994:	cmp	sl, r0
   24998:	blt	24950 <ReadCompressedDataSlab2+0x1154>
   2499c:	b	249a8 <ReadCompressedDataSlab2+0x11ac>
   249a0:	ldr	r8, [fp, #8]
   249a4:	mov	r6, r9
   249a8:	ldr	r7, [fp, #24]
   249ac:	ldr	r1, [fp, #20]
   249b0:	ldr	r0, [fp, #12]
   249b4:	ldr	sl, [sp, #16]
   249b8:	ldr	r9, [fp, #16]
   249bc:	ldr	r2, [r7]
   249c0:	ldr	r1, [r1]
   249c4:	ldr	r0, [r0]
   249c8:	sub	r2, r2, #1
   249cc:	add	r0, r0, sl
   249d0:	mul	r1, r2, r1
   249d4:	mov	r2, r8
   249d8:	mvn	r1, r1
   249dc:	add	r0, r0, r1
   249e0:	ldr	r1, [r9]
   249e4:	sub	r3, r0, r1
   249e8:	mov	r0, r5
   249ec:	mov	r1, r6
   249f0:	bl	2768 <InflateSkipData>
   249f4:	ldr	r1, [sp, #20]
   249f8:	ldr	r0, [r7, #4]
   249fc:	add	r1, r1, #1
   24a00:	cmp	r1, r0
   24a04:	blt	248f4 <ReadCompressedDataSlab2+0x10f8>
   24a08:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   24a0c:	ldr	r0, [sl, #4]
   24a10:	ldr	r1, [sp, #12]
   24a14:	ldr	r9, [fp, #16]
   24a18:	cmp	r0, #1
   24a1c:	blt	25290 <ReadCompressedDataSlab2+0x1a94>
   24a20:	sub	r0, r1, #1
   24a24:	mov	r7, #0
   24a28:	add	r6, sp, #24
   24a2c:	str	r3, [sp, #16]
   24a30:	str	r0, [sp, #12]
   24a34:	ldr	r3, [r9]
   24a38:	mov	r0, r5
   24a3c:	mov	r1, r6
   24a40:	mov	r2, r8
   24a44:	bl	2768 <InflateSkipData>
   24a48:	ldr	sl, [sl]
   24a4c:	mov	r0, #1
   24a50:	mov	r1, r6
   24a54:	mov	r2, r4
   24a58:	mov	r3, r8
   24a5c:	str	r0, [sp]
   24a60:	mov	r0, r5
   24a64:	bl	b01c <ReadCompressedInt64Data>
   24a68:	add	r4, r4, #8
   24a6c:	cmp	sl, #2
   24a70:	str	r7, [sp, #20]
   24a74:	blt	24ad4 <ReadCompressedDataSlab2+0x12d8>
   24a78:	ldr	r8, [fp, #8]
   24a7c:	ldr	r7, [sp, #12]
   24a80:	mov	sl, #0
   24a84:	mov	r0, r5
   24a88:	mov	r1, r6
   24a8c:	mov	r2, r8
   24a90:	mov	r3, r7
   24a94:	bl	2768 <InflateSkipData>
   24a98:	ldr	r0, [fp, #24]
   24a9c:	mov	r1, r6
   24aa0:	mov	r2, r4
   24aa4:	mov	r3, r8
   24aa8:	ldr	r9, [r0]
   24aac:	mov	r0, #1
   24ab0:	str	r0, [sp]
   24ab4:	mov	r0, r5
   24ab8:	bl	b01c <ReadCompressedInt64Data>
   24abc:	add	sl, sl, #1
   24ac0:	sub	r0, r9, #1
   24ac4:	add	r4, r4, #8
   24ac8:	cmp	sl, r0
   24acc:	blt	24a84 <ReadCompressedDataSlab2+0x1288>
   24ad0:	b	24ad8 <ReadCompressedDataSlab2+0x12dc>
   24ad4:	ldr	r8, [fp, #8]
   24ad8:	ldr	sl, [fp, #24]
   24adc:	ldr	r1, [fp, #20]
   24ae0:	ldr	r0, [fp, #12]
   24ae4:	ldr	r7, [sp, #16]
   24ae8:	ldr	r9, [fp, #16]
   24aec:	ldr	r2, [sl]
   24af0:	ldr	r1, [r1]
   24af4:	ldr	r0, [r0]
   24af8:	sub	r2, r2, #1
   24afc:	add	r0, r0, r7
   24b00:	mul	r1, r2, r1
   24b04:	mov	r2, r8
   24b08:	mvn	r1, r1
   24b0c:	add	r0, r0, r1
   24b10:	ldr	r1, [r9]
   24b14:	sub	r3, r0, r1
   24b18:	mov	r0, r5
   24b1c:	mov	r1, r6
   24b20:	bl	2768 <InflateSkipData>
   24b24:	ldr	r7, [sp, #20]
   24b28:	ldr	r0, [sl, #4]
   24b2c:	add	r7, r7, #1
   24b30:	cmp	r7, r0
   24b34:	blt	24a34 <ReadCompressedDataSlab2+0x1238>
   24b38:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   24b3c:	ldr	r0, [sl, #4]
   24b40:	str	r3, [sp, #16]
   24b44:	cmp	r0, #1
   24b48:	ldr	r0, [fp, #16]
   24b4c:	blt	25290 <ReadCompressedDataSlab2+0x1a94>
   24b50:	mov	r9, r8
   24b54:	mov	r6, r2
   24b58:	mov	r7, #0
   24b5c:	ldr	r3, [r0]
   24b60:	add	r1, sp, #24
   24b64:	mov	r0, r5
   24b68:	mov	r2, r9
   24b6c:	mov	r8, r1
   24b70:	bl	2768 <InflateSkipData>
   24b74:	ldr	r0, [sl]
   24b78:	mov	r1, r8
   24b7c:	mov	r2, r4
   24b80:	mov	r3, r9
   24b84:	str	r0, [sp]
   24b88:	mov	r0, r5
   24b8c:	bl	5500 <ReadCompressedDoubleData>
   24b90:	ldr	r0, [r6]
   24b94:	ldr	r1, [sp, #16]
   24b98:	mov	r8, r6
   24b9c:	ldr	r6, [sl]
   24ba0:	add	r0, r0, r1
   24ba4:	ldr	r1, [fp, #20]
   24ba8:	sub	r2, r6, #1
   24bac:	ldr	r1, [r1]
   24bb0:	mul	r1, r1, r2
   24bb4:	mov	r2, r9
   24bb8:	mvn	r1, r1
   24bbc:	add	r0, r0, r1
   24bc0:	ldr	r1, [fp, #16]
   24bc4:	ldr	r1, [r1]
   24bc8:	sub	r3, r0, r1
   24bcc:	mov	r0, r5
   24bd0:	add	r1, sp, #24
   24bd4:	bl	2768 <InflateSkipData>
   24bd8:	ldr	r0, [sl, #4]
   24bdc:	add	r7, r7, #1
   24be0:	add	r4, r4, r6, lsl #3
   24be4:	mov	r6, r8
   24be8:	cmp	r7, r0
   24bec:	ldr	r0, [fp, #16]
   24bf0:	blt	24b5c <ReadCompressedDataSlab2+0x1360>
   24bf4:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   24bf8:	ldr	r0, [sl, #4]
   24bfc:	str	r3, [sp, #16]
   24c00:	cmp	r0, #1
   24c04:	ldr	r0, [fp, #16]
   24c08:	blt	25290 <ReadCompressedDataSlab2+0x1a94>
   24c0c:	mov	r9, r8
   24c10:	mov	r6, r2
   24c14:	mov	r7, #0
   24c18:	ldr	r3, [r0]
   24c1c:	add	r1, sp, #24
   24c20:	mov	r0, r5
   24c24:	mov	r2, r9
   24c28:	mov	r8, r1
   24c2c:	bl	2768 <InflateSkipData>
   24c30:	ldr	r0, [sl]
   24c34:	mov	r1, r8
   24c38:	mov	r2, r4
   24c3c:	mov	r3, r9
   24c40:	str	r0, [sp]
   24c44:	mov	r0, r5
   24c48:	bl	8e60 <ReadCompressedSingleData>
   24c4c:	ldr	r0, [r6]
   24c50:	ldr	r1, [sp, #16]
   24c54:	mov	r8, r6
   24c58:	ldr	r6, [sl]
   24c5c:	add	r0, r0, r1
   24c60:	ldr	r1, [fp, #20]
   24c64:	sub	r2, r6, #1
   24c68:	ldr	r1, [r1]
   24c6c:	mul	r1, r1, r2
   24c70:	mov	r2, r9
   24c74:	mvn	r1, r1
   24c78:	add	r0, r0, r1
   24c7c:	ldr	r1, [fp, #16]
   24c80:	ldr	r1, [r1]
   24c84:	sub	r3, r0, r1
   24c88:	mov	r0, r5
   24c8c:	add	r1, sp, #24
   24c90:	bl	2768 <InflateSkipData>
   24c94:	ldr	r0, [sl, #4]
   24c98:	add	r7, r7, #1
   24c9c:	add	r4, r4, r6, lsl #2
   24ca0:	mov	r6, r8
   24ca4:	cmp	r7, r0
   24ca8:	ldr	r0, [fp, #16]
   24cac:	blt	24c18 <ReadCompressedDataSlab2+0x141c>
   24cb0:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   24cb4:	ldr	r0, [sl, #4]
   24cb8:	str	r3, [sp, #16]
   24cbc:	cmp	r0, #1
   24cc0:	ldr	r0, [fp, #16]
   24cc4:	blt	25290 <ReadCompressedDataSlab2+0x1a94>
   24cc8:	mov	r9, r8
   24ccc:	mov	r6, r2
   24cd0:	mov	r7, #0
   24cd4:	ldr	r3, [r0]
   24cd8:	add	r1, sp, #24
   24cdc:	mov	r0, r5
   24ce0:	mov	r2, r9
   24ce4:	mov	r8, r1
   24ce8:	bl	2768 <InflateSkipData>
   24cec:	ldr	r0, [sl]
   24cf0:	mov	r1, r8
   24cf4:	mov	r2, r4
   24cf8:	mov	r3, r9
   24cfc:	str	r0, [sp]
   24d00:	mov	r0, r5
   24d04:	bl	1717c <ReadCompressedInt8Data>
   24d08:	ldr	r0, [r6]
   24d0c:	ldr	r1, [sp, #16]
   24d10:	mov	r8, r6
   24d14:	ldr	r6, [sl]
   24d18:	add	r0, r0, r1
   24d1c:	ldr	r1, [fp, #20]
   24d20:	sub	r2, r6, #1
   24d24:	ldr	r1, [r1]
   24d28:	mul	r1, r1, r2
   24d2c:	mov	r2, r9
   24d30:	mvn	r1, r1
   24d34:	add	r0, r0, r1
   24d38:	ldr	r1, [fp, #16]
   24d3c:	ldr	r1, [r1]
   24d40:	sub	r3, r0, r1
   24d44:	mov	r0, r5
   24d48:	add	r1, sp, #24
   24d4c:	bl	2768 <InflateSkipData>
   24d50:	ldr	r0, [sl, #4]
   24d54:	add	r7, r7, #1
   24d58:	add	r4, r4, r6
   24d5c:	mov	r6, r8
   24d60:	cmp	r7, r0
   24d64:	ldr	r0, [fp, #16]
   24d68:	blt	24cd4 <ReadCompressedDataSlab2+0x14d8>
   24d6c:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   24d70:	ldr	r0, [sl, #4]
   24d74:	str	r3, [sp, #16]
   24d78:	cmp	r0, #1
   24d7c:	ldr	r0, [fp, #16]
   24d80:	blt	25290 <ReadCompressedDataSlab2+0x1a94>
   24d84:	mov	r9, r8
   24d88:	mov	r6, r2
   24d8c:	mov	r7, #0
   24d90:	ldr	r3, [r0]
   24d94:	add	r1, sp, #24
   24d98:	mov	r0, r5
   24d9c:	mov	r2, r9
   24da0:	mov	r8, r1
   24da4:	bl	2768 <InflateSkipData>
   24da8:	ldr	r0, [sl]
   24dac:	mov	r1, r8
   24db0:	mov	r2, r4
   24db4:	mov	r3, r9
   24db8:	str	r0, [sp]
   24dbc:	mov	r0, r5
   24dc0:	bl	18fb4 <ReadCompressedUInt8Data>
   24dc4:	ldr	r0, [r6]
   24dc8:	ldr	r1, [sp, #16]
   24dcc:	mov	r8, r6
   24dd0:	ldr	r6, [sl]
   24dd4:	add	r0, r0, r1
   24dd8:	ldr	r1, [fp, #20]
   24ddc:	sub	r2, r6, #1
   24de0:	ldr	r1, [r1]
   24de4:	mul	r1, r1, r2
   24de8:	mov	r2, r9
   24dec:	mvn	r1, r1
   24df0:	add	r0, r0, r1
   24df4:	ldr	r1, [fp, #16]
   24df8:	ldr	r1, [r1]
   24dfc:	sub	r3, r0, r1
   24e00:	mov	r0, r5
   24e04:	add	r1, sp, #24
   24e08:	bl	2768 <InflateSkipData>
   24e0c:	ldr	r0, [sl, #4]
   24e10:	add	r7, r7, #1
   24e14:	add	r4, r4, r6
   24e18:	mov	r6, r8
   24e1c:	cmp	r7, r0
   24e20:	ldr	r0, [fp, #16]
   24e24:	blt	24d90 <ReadCompressedDataSlab2+0x1594>
   24e28:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   24e2c:	ldr	r0, [sl, #4]
   24e30:	str	r3, [sp, #16]
   24e34:	cmp	r0, #1
   24e38:	ldr	r0, [fp, #16]
   24e3c:	blt	25290 <ReadCompressedDataSlab2+0x1a94>
   24e40:	mov	r9, r8
   24e44:	mov	r6, r2
   24e48:	mov	r7, #0
   24e4c:	ldr	r3, [r0]
   24e50:	add	r1, sp, #24
   24e54:	mov	r0, r5
   24e58:	mov	r2, r9
   24e5c:	mov	r8, r1
   24e60:	bl	2768 <InflateSkipData>
   24e64:	ldr	r0, [sl]
   24e68:	mov	r1, r8
   24e6c:	mov	r2, r4
   24e70:	mov	r3, r9
   24e74:	str	r0, [sp]
   24e78:	mov	r0, r5
   24e7c:	bl	133ac <ReadCompressedInt16Data>
   24e80:	ldr	r0, [r6]
   24e84:	ldr	r1, [sp, #16]
   24e88:	mov	r8, r6
   24e8c:	ldr	r6, [sl]
   24e90:	add	r0, r0, r1
   24e94:	ldr	r1, [fp, #20]
   24e98:	sub	r2, r6, #1
   24e9c:	ldr	r1, [r1]
   24ea0:	mul	r1, r1, r2
   24ea4:	mov	r2, r9
   24ea8:	mvn	r1, r1
   24eac:	add	r0, r0, r1
   24eb0:	ldr	r1, [fp, #16]
   24eb4:	ldr	r1, [r1]
   24eb8:	sub	r3, r0, r1
   24ebc:	mov	r0, r5
   24ec0:	add	r1, sp, #24
   24ec4:	bl	2768 <InflateSkipData>
   24ec8:	ldr	r0, [sl, #4]
   24ecc:	add	r7, r7, #1
   24ed0:	add	r4, r4, r6, lsl #1
   24ed4:	mov	r6, r8
   24ed8:	cmp	r7, r0
   24edc:	ldr	r0, [fp, #16]
   24ee0:	blt	24e4c <ReadCompressedDataSlab2+0x1650>
   24ee4:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   24ee8:	ldr	r0, [sl, #4]
   24eec:	str	r3, [sp, #12]
   24ef0:	cmp	r0, #1
   24ef4:	ldr	r0, [fp, #16]
   24ef8:	blt	25290 <ReadCompressedDataSlab2+0x1a94>
   24efc:	mov	r9, r8
   24f00:	mov	r6, r2
   24f04:	mov	r7, #0
   24f08:	ldr	r3, [r0]
   24f0c:	add	r1, sp, #24
   24f10:	mov	r0, r5
   24f14:	mov	r2, r9
   24f18:	mov	r8, r1
   24f1c:	bl	2768 <InflateSkipData>
   24f20:	ldr	r0, [sl]
   24f24:	mov	r1, r8
   24f28:	mov	r2, r4
   24f2c:	mov	r3, r9
   24f30:	str	r0, [sp]
   24f34:	mov	r0, r5
   24f38:	bl	15344 <ReadCompressedUInt16Data>
   24f3c:	ldr	r0, [r6]
   24f40:	ldr	r1, [sp, #12]
   24f44:	mov	r8, r6
   24f48:	ldr	r6, [sl]
   24f4c:	add	r0, r0, r1
   24f50:	ldr	r1, [fp, #20]
   24f54:	sub	r2, r6, #1
   24f58:	ldr	r1, [r1]
   24f5c:	mul	r1, r1, r2
   24f60:	mov	r2, r9
   24f64:	mvn	r1, r1
   24f68:	add	r0, r0, r1
   24f6c:	ldr	r1, [fp, #16]
   24f70:	ldr	r1, [r1]
   24f74:	sub	r3, r0, r1
   24f78:	mov	r0, r5
   24f7c:	add	r1, sp, #24
   24f80:	bl	2768 <InflateSkipData>
   24f84:	ldr	r0, [sl, #4]
   24f88:	add	r7, r7, #1
   24f8c:	add	r4, r4, r6, lsl #1
   24f90:	mov	r6, r8
   24f94:	cmp	r7, r0
   24f98:	ldr	r0, [fp, #16]
   24f9c:	blt	24f08 <ReadCompressedDataSlab2+0x170c>
   24fa0:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   24fa4:	ldr	r0, [sl, #4]
   24fa8:	str	r3, [sp, #16]
   24fac:	cmp	r0, #1
   24fb0:	ldr	r0, [fp, #16]
   24fb4:	blt	25290 <ReadCompressedDataSlab2+0x1a94>
   24fb8:	mov	r9, r8
   24fbc:	mov	r6, r2
   24fc0:	mov	r7, #0
   24fc4:	ldr	r3, [r0]
   24fc8:	add	r1, sp, #24
   24fcc:	mov	r0, r5
   24fd0:	mov	r2, r9
   24fd4:	mov	r8, r1
   24fd8:	bl	2768 <InflateSkipData>
   24fdc:	ldr	r0, [sl]
   24fe0:	mov	r1, r8
   24fe4:	mov	r2, r4
   24fe8:	mov	r3, r9
   24fec:	str	r0, [sp]
   24ff0:	mov	r0, r5
   24ff4:	bl	f32c <ReadCompressedInt32Data>
   24ff8:	ldr	r0, [r6]
   24ffc:	ldr	r1, [sp, #16]
   25000:	mov	r8, r6
   25004:	ldr	r6, [sl]
   25008:	add	r0, r0, r1
   2500c:	ldr	r1, [fp, #20]
   25010:	sub	r2, r6, #1
   25014:	ldr	r1, [r1]
   25018:	mul	r1, r1, r2
   2501c:	mov	r2, r9
   25020:	mvn	r1, r1
   25024:	add	r0, r0, r1
   25028:	ldr	r1, [fp, #16]
   2502c:	ldr	r1, [r1]
   25030:	sub	r3, r0, r1
   25034:	mov	r0, r5
   25038:	add	r1, sp, #24
   2503c:	bl	2768 <InflateSkipData>
   25040:	ldr	r0, [sl, #4]
   25044:	add	r7, r7, #1
   25048:	add	r4, r4, r6, lsl #2
   2504c:	mov	r6, r8
   25050:	cmp	r7, r0
   25054:	ldr	r0, [fp, #16]
   25058:	blt	24fc4 <ReadCompressedDataSlab2+0x17c8>
   2505c:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   25060:	ldr	r0, [sl, #4]
   25064:	str	r3, [sp, #16]
   25068:	cmp	r0, #1
   2506c:	ldr	r0, [fp, #16]
   25070:	blt	25290 <ReadCompressedDataSlab2+0x1a94>
   25074:	mov	r9, r8
   25078:	mov	r6, r2
   2507c:	mov	r7, #0
   25080:	ldr	r3, [r0]
   25084:	add	r1, sp, #24
   25088:	mov	r0, r5
   2508c:	mov	r2, r9
   25090:	mov	r8, r1
   25094:	bl	2768 <InflateSkipData>
   25098:	ldr	r0, [sl]
   2509c:	mov	r1, r8
   250a0:	mov	r2, r4
   250a4:	mov	r3, r9
   250a8:	str	r0, [sp]
   250ac:	mov	r0, r5
   250b0:	bl	11414 <ReadCompressedUInt32Data>
   250b4:	ldr	r0, [r6]
   250b8:	ldr	r1, [sp, #16]
   250bc:	mov	r8, r6
   250c0:	ldr	r6, [sl]
   250c4:	add	r0, r0, r1
   250c8:	ldr	r1, [fp, #20]
   250cc:	sub	r2, r6, #1
   250d0:	ldr	r1, [r1]
   250d4:	mul	r1, r1, r2
   250d8:	mov	r2, r9
   250dc:	mvn	r1, r1
   250e0:	add	r0, r0, r1
   250e4:	ldr	r1, [fp, #16]
   250e8:	ldr	r1, [r1]
   250ec:	sub	r3, r0, r1
   250f0:	mov	r0, r5
   250f4:	add	r1, sp, #24
   250f8:	bl	2768 <InflateSkipData>
   250fc:	ldr	r0, [sl, #4]
   25100:	add	r7, r7, #1
   25104:	add	r4, r4, r6, lsl #2
   25108:	mov	r6, r8
   2510c:	cmp	r7, r0
   25110:	ldr	r0, [fp, #16]
   25114:	blt	25080 <ReadCompressedDataSlab2+0x1884>
   25118:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   2511c:	ldr	r0, [sl, #4]
   25120:	str	r3, [sp, #16]
   25124:	cmp	r0, #1
   25128:	ldr	r0, [fp, #16]
   2512c:	blt	25290 <ReadCompressedDataSlab2+0x1a94>
   25130:	mov	r9, r8
   25134:	mov	r6, r2
   25138:	mov	r7, #0
   2513c:	ldr	r3, [r0]
   25140:	add	r1, sp, #24
   25144:	mov	r0, r5
   25148:	mov	r2, r9
   2514c:	mov	r8, r1
   25150:	bl	2768 <InflateSkipData>
   25154:	ldr	r0, [sl]
   25158:	mov	r1, r8
   2515c:	mov	r2, r4
   25160:	mov	r3, r9
   25164:	str	r0, [sp]
   25168:	mov	r0, r5
   2516c:	bl	d1d4 <ReadCompressedUInt64Data>
   25170:	ldr	r0, [r6]
   25174:	ldr	r1, [sp, #16]
   25178:	mov	r8, r6
   2517c:	ldr	r6, [sl]
   25180:	add	r0, r0, r1
   25184:	ldr	r1, [fp, #20]
   25188:	sub	r2, r6, #1
   2518c:	ldr	r1, [r1]
   25190:	mul	r1, r1, r2
   25194:	mov	r2, r9
   25198:	mvn	r1, r1
   2519c:	add	r0, r0, r1
   251a0:	ldr	r1, [fp, #16]
   251a4:	ldr	r1, [r1]
   251a8:	sub	r3, r0, r1
   251ac:	mov	r0, r5
   251b0:	add	r1, sp, #24
   251b4:	bl	2768 <InflateSkipData>
   251b8:	ldr	r0, [sl, #4]
   251bc:	add	r7, r7, #1
   251c0:	add	r4, r4, r6, lsl #3
   251c4:	mov	r6, r8
   251c8:	cmp	r7, r0
   251cc:	ldr	r0, [fp, #16]
   251d0:	blt	2513c <ReadCompressedDataSlab2+0x1940>
   251d4:	b	25290 <ReadCompressedDataSlab2+0x1a94>
   251d8:	ldr	r0, [sl, #4]
   251dc:	str	r3, [sp, #16]
   251e0:	cmp	r0, #1
   251e4:	ldr	r0, [fp, #16]
   251e8:	blt	25290 <ReadCompressedDataSlab2+0x1a94>
   251ec:	mov	r9, r8
   251f0:	mov	r6, r2
   251f4:	mov	r7, #0
   251f8:	ldr	r3, [r0]
   251fc:	add	r1, sp, #24
   25200:	mov	r0, r5
   25204:	mov	r2, r9
   25208:	mov	r8, r1
   2520c:	bl	2768 <InflateSkipData>
   25210:	ldr	r0, [sl]
   25214:	mov	r1, r8
   25218:	mov	r2, r4
   2521c:	mov	r3, r9
   25220:	str	r0, [sp]
   25224:	mov	r0, r5
   25228:	bl	b01c <ReadCompressedInt64Data>
   2522c:	ldr	r0, [r6]
   25230:	ldr	r1, [sp, #16]
   25234:	mov	r8, r6
   25238:	ldr	r6, [sl]
   2523c:	add	r0, r0, r1
   25240:	ldr	r1, [fp, #20]
   25244:	sub	r2, r6, #1
   25248:	ldr	r1, [r1]
   2524c:	mul	r1, r1, r2
   25250:	mov	r2, r9
   25254:	mvn	r1, r1
   25258:	add	r0, r0, r1
   2525c:	ldr	r1, [fp, #16]
   25260:	ldr	r1, [r1]
   25264:	sub	r3, r0, r1
   25268:	mov	r0, r5
   2526c:	add	r1, sp, #24
   25270:	bl	2768 <InflateSkipData>
   25274:	ldr	r0, [sl, #4]
   25278:	add	r7, r7, #1
   2527c:	add	r4, r4, r6, lsl #3
   25280:	mov	r6, r8
   25284:	cmp	r7, r0
   25288:	ldr	r0, [fp, #16]
   2528c:	blt	251f8 <ReadCompressedDataSlab2+0x19fc>
   25290:	add	r0, sp, #24
   25294:	bl	193c <inflateEnd@plt>
   25298:	mov	r0, #0
   2529c:	sub	sp, fp, #28
   252a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000252b0 <Mat_Create5>:
   252b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   252b4:	add	fp, sp, #24
   252b8:	sub	sp, sp, #24
   252bc:	mov	r4, #0
   252c0:	mov	r8, r1
   252c4:	mov	r6, r0
   252c8:	strh	r4, [sp, #22]
   252cc:	ldr	r1, [pc, #408]	; 2546c <Mat_Create5+0x1bc>
   252d0:	add	r1, pc, r1
   252d4:	bl	17e0 <fopen@plt>
   252d8:	cmp	r0, #0
   252dc:	beq	25460 <Mat_Create5+0x1b0>
   252e0:	mov	r5, r0
   252e4:	mov	r0, #44	; 0x2c
   252e8:	bl	18d0 <malloc@plt>
   252ec:	cmp	r0, #0
   252f0:	beq	25394 <Mat_Create5+0xe4>
   252f4:	mov	r4, r0
   252f8:	mov	r7, #0
   252fc:	mov	r0, #128	; 0x80
   25300:	str	r7, [r4, #16]
   25304:	str	r0, [r4, #28]
   25308:	mov	r0, #0
   2530c:	str	r7, [r4, #32]
   25310:	str	r7, [r4, #36]	; 0x24
   25314:	str	r7, [r4, #40]	; 0x28
   25318:	bl	1834 <time@plt>
   2531c:	str	r0, [sp, #16]
   25320:	str	r5, [r4]
   25324:	mov	r1, r6
   25328:	ldr	r0, [pc, #320]	; 25470 <Mat_Create5+0x1c0>
   2532c:	add	r0, pc, r0
   25330:	bl	1dac <strdup_printf>
   25334:	str	r0, [r4, #12]
   25338:	mov	r0, #128	; 0x80
   2533c:	mov	r9, #1
   25340:	str	r7, [r4, #20]
   25344:	str	r9, [r4, #24]
   25348:	bl	18d0 <malloc@plt>
   2534c:	mov	r7, r0
   25350:	str	r0, [r4, #4]
   25354:	mov	r0, #8
   25358:	bl	18d0 <malloc@plt>
   2535c:	mov	r6, r0
   25360:	str	r0, [r4, #8]
   25364:	mov	r0, r7
   25368:	mov	r1, #32
   2536c:	mov	r2, #128	; 0x80
   25370:	bl	1990 <memset@plt>
   25374:	cmp	r8, #0
   25378:	beq	253a4 <Mat_Create5+0xf4>
   2537c:	ldr	r2, [pc, #248]	; 2547c <Mat_Create5+0x1cc>
   25380:	mov	r0, r7
   25384:	mov	r1, #116	; 0x74
   25388:	mov	r3, r8
   2538c:	add	r2, pc, r2
   25390:	b	253dc <Mat_Create5+0x12c>
   25394:	mov	r0, r5
   25398:	bl	19cc <fclose@plt>
   2539c:	mov	r4, #0
   253a0:	b	25460 <Mat_Create5+0x1b0>
   253a4:	add	r0, sp, #16
   253a8:	bl	1858 <ctime@plt>
   253ac:	mov	r1, #15
   253b0:	mov	r2, #5
   253b4:	str	r0, [sp, #12]
   253b8:	str	r9, [sp]
   253bc:	mov	r0, r7
   253c0:	str	r1, [sp, #8]
   253c4:	str	r2, [sp, #4]
   253c8:	mov	r1, #116	; 0x74
   253cc:	ldr	r2, [pc, #160]	; 25474 <Mat_Create5+0x1c4>
   253d0:	ldr	r3, [pc, #160]	; 25478 <Mat_Create5+0x1c8>
   253d4:	add	r2, pc, r2
   253d8:	add	r3, pc, r3
   253dc:	bl	1978 <snprintf@plt>
   253e0:	cmp	r0, #116	; 0x74
   253e4:	mov	r1, #1
   253e8:	mov	r2, #116	; 0x74
   253ec:	mov	r3, r5
   253f0:	movcs	r0, #0
   253f4:	strbcs	r0, [r7, #115]	; 0x73
   253f8:	movw	r0, #8224	; 0x2020
   253fc:	movt	r0, #8224	; 0x2020
   25400:	str	r0, [r6, #4]
   25404:	str	r0, [r6]
   25408:	mov	r0, #256	; 0x100
   2540c:	str	r0, [r4, #16]
   25410:	strh	r0, [sp, #20]
   25414:	movw	r0, #19785	; 0x4d49
   25418:	strh	r0, [sp, #22]
   2541c:	mov	r0, r7
   25420:	bl	18ac <fwrite@plt>
   25424:	mov	r0, r6
   25428:	mov	r1, #1
   2542c:	mov	r2, #8
   25430:	mov	r3, r5
   25434:	bl	18ac <fwrite@plt>
   25438:	add	r0, sp, #20
   2543c:	mov	r1, #2
   25440:	mov	r2, #1
   25444:	mov	r3, r5
   25448:	bl	18ac <fwrite@plt>
   2544c:	add	r0, sp, #22
   25450:	mov	r1, #2
   25454:	mov	r2, #1
   25458:	mov	r3, r5
   2545c:	bl	18ac <fwrite@plt>
   25460:	mov	r0, r4
   25464:	sub	sp, fp, #24
   25468:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2546c:	.word	0x00033739
   25470:	.word	0x00034007
   25474:	.word	0x00033639
   25478:	.word	0x0003367d
   2547c:	.word	0x00033fa7

00025480 <Mat_VarRead5>:
   25480:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25484:	add	fp, sp, #28
   25488:	sub	sp, sp, #44	; 0x2c
   2548c:	mov	r4, r0
   25490:	mov	r0, #1
   25494:	cmp	r1, #0
   25498:	str	r0, [fp, #-32]	; 0xffffffe0
   2549c:	beq	25a04 <Mat_VarRead5+0x584>
   254a0:	ldr	r0, [r1, #4]
   254a4:	mov	r5, r1
   254a8:	cmp	r0, #0
   254ac:	beq	25a04 <Mat_VarRead5+0x584>
   254b0:	mov	r9, r5
   254b4:	ldr	r0, [r9, #52]!	; 0x34
   254b8:	ldr	r1, [r0, #16]
   254bc:	cmp	r1, #0
   254c0:	strne	r1, [r5, #40]	; 0x28
   254c4:	movne	r1, #0
   254c8:	strne	r1, [r0, #16]
   254cc:	subne	sp, fp, #28
   254d0:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   254d4:	ldr	r0, [r4]
   254d8:	bl	1840 <ftell@plt>
   254dc:	cmn	r0, #1
   254e0:	beq	25508 <Mat_VarRead5+0x88>
   254e4:	mov	sl, r0
   254e8:	sub	r1, fp, #32
   254ec:	mov	r0, r5
   254f0:	bl	53824 <SafeMulDims>
   254f4:	cmp	r0, #0
   254f8:	beq	2551c <Mat_VarRead5+0x9c>
   254fc:	ldr	r0, [pc, #3888]	; 26434 <Mat_VarRead5+0xfb4>
   25500:	add	r0, pc, r0
   25504:	b	25510 <Mat_VarRead5+0x90>
   25508:	ldr	r0, [pc, #4084]	; 26504 <Mat_VarRead5+0x1084>
   2550c:	add	r0, pc, r0
   25510:	bl	19b4 <Mat_Critical@plt>
   25514:	sub	sp, fp, #28
   25518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2551c:	ldr	r1, [r5, #16]
   25520:	cmp	r1, #16
   25524:	bhi	25670 <Mat_VarRead5+0x1f0>
   25528:	ldr	r7, [r4, #20]
   2552c:	add	r0, pc, #4
   25530:	ldr	r2, [r0, r1, lsl #2]
   25534:	add	pc, r0, r2
   25538:	.word	0x00000044
   2553c:	.word	0x00000074
   25540:	.word	0x000000c0
   25544:	.word	0x00000138
   25548:	.word	0x00000144
   2554c:	.word	0x000001e4
   25550:	.word	0x000002b4
   25554:	.word	0x000002d4
   25558:	.word	0x000002f4
   2555c:	.word	0x00000314
   25560:	.word	0x00000334
   25564:	.word	0x00000354
   25568:	.word	0x00000374
   2556c:	.word	0x00000394
   25570:	.word	0x000003b4
   25574:	.word	0x000003e8
   25578:	.word	0x000004d4
   2557c:	add	r0, pc, #908	; 0x38c
   25580:	mov	r6, r5
   25584:	vld1.64	{d16-d17}, [r0 :128]
   25588:	mov	r0, #32
   2558c:	vst1.32	{d16-d17}, [r6], r0
   25590:	mov	r0, #8
   25594:	bl	18d0 <malloc@plt>
   25598:	mov	r1, #0
   2559c:	str	r0, [r6]
   255a0:	str	r1, [r0]
   255a4:	str	r1, [r0, #4]
   255a8:	b	25944 <Mat_VarRead5+0x4c4>
   255ac:	ldr	r7, [r5, #40]	; 0x28
   255b0:	cmp	r7, #0
   255b4:	beq	25b1c <Mat_VarRead5+0x69c>
   255b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   255bc:	cmp	r0, #0
   255c0:	beq	255ec <Mat_VarRead5+0x16c>
   255c4:	mov	r6, #0
   255c8:	ldr	r1, [r7, r6, lsl #2]
   255cc:	cmp	r1, #0
   255d0:	beq	255e0 <Mat_VarRead5+0x160>
   255d4:	mov	r0, r4
   255d8:	bl	25480 <Mat_VarRead5>
   255dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   255e0:	add	r6, r6, #1
   255e4:	cmp	r6, r0
   255e8:	bcc	255c8 <Mat_VarRead5+0x148>
   255ec:	mov	r0, #21
   255f0:	str	r0, [r5, #8]
   255f4:	b	25944 <Mat_VarRead5+0x4c4>
   255f8:	mov	r0, #22
   255fc:	str	r0, [r5, #8]
   25600:	ldr	r0, [r5]
   25604:	cmp	r0, #0
   25608:	beq	25944 <Mat_VarRead5+0x4c4>
   2560c:	ldr	r0, [r5, #12]
   25610:	cmp	r0, #0
   25614:	ldrne	r0, [r5, #40]	; 0x28
   25618:	cmpne	r0, #0
   2561c:	beq	25944 <Mat_VarRead5+0x4c4>
   25620:	ldr	r0, [r5, #52]	; 0x34
   25624:	ldr	r1, [fp, #-32]	; 0xffffffe0
   25628:	ldr	r2, [r0, #4]
   2562c:	add	r0, sp, #32
   25630:	bl	53884 <SafeMul>
   25634:	ldr	r0, [sp, #32]
   25638:	cmp	r0, #0
   2563c:	beq	25944 <Mat_VarRead5+0x4c4>
   25640:	ldr	r7, [r5, #40]	; 0x28
   25644:	mov	r6, #0
   25648:	ldr	r1, [r7, r6, lsl #2]
   2564c:	cmp	r1, #0
   25650:	beq	25660 <Mat_VarRead5+0x1e0>
   25654:	mov	r0, r4
   25658:	bl	25480 <Mat_VarRead5>
   2565c:	ldr	r0, [sp, #32]
   25660:	add	r6, r6, #1
   25664:	cmp	r6, r0
   25668:	bcc	25648 <Mat_VarRead5+0x1c8>
   2566c:	b	25944 <Mat_VarRead5+0x4c4>
   25670:	ldr	r0, [pc, #4084]	; 2666c <Mat_VarRead5+0x11ec>
   25674:	add	r0, pc, r0
   25678:	b	25b28 <Mat_VarRead5+0x6a8>
   2567c:	ldr	r1, [r5, #52]	; 0x34
   25680:	ldr	r0, [r4]
   25684:	mov	r2, #0
   25688:	mov	r6, #0
   2568c:	ldr	r1, [r1]
   25690:	bl	1a2c <fseek@plt>
   25694:	ldr	r0, [r5, #48]	; 0x30
   25698:	cmp	r0, #1
   2569c:	bne	25a60 <Mat_VarRead5+0x5e0>
   256a0:	ldr	r0, [r9]
   256a4:	add	r8, sp, #32
   256a8:	mov	r2, r8
   256ac:	ldr	r1, [r0, #12]
   256b0:	mov	r0, r4
   256b4:	str	r6, [r1, #4]
   256b8:	bl	3188 <InflateDataType>
   256bc:	mov	r6, r7
   256c0:	cmp	r7, #0
   256c4:	beq	256d0 <Mat_VarRead5+0x250>
   256c8:	add	r0, sp, #32
   256cc:	bl	1c04 <Mat_uint32Swap>
   256d0:	ldr	r0, [sp, #32]
   256d4:	uxtb	r7, r0
   256d8:	cmp	r7, #25
   256dc:	movcs	r7, #0
   256e0:	cmp	r0, #65536	; 0x10000
   256e4:	bcs	25c60 <Mat_VarRead5+0x7e0>
   256e8:	ldr	r0, [r9]
   256ec:	add	r8, r8, #4
   256f0:	mov	r2, r8
   256f4:	ldr	r1, [r0, #12]
   256f8:	mov	r0, r4
   256fc:	bl	3188 <InflateDataType>
   25700:	cmp	r6, #0
   25704:	beq	25710 <Mat_VarRead5+0x290>
   25708:	mov	r0, r8
   2570c:	bl	1c04 <Mat_uint32Swap>
   25710:	ldr	r6, [sp, #36]	; 0x24
   25714:	mov	r0, #0
   25718:	b	25c68 <Mat_VarRead5+0x7e8>
   2571c:	mov	r0, #0
   25720:	str	r7, [sp, #20]
   25724:	str	r0, [sp, #28]
   25728:	mov	r0, #28
   2572c:	str	r0, [r5, #12]
   25730:	mov	r0, #28
   25734:	bl	18d0 <malloc@plt>
   25738:	cmp	r0, #0
   2573c:	str	r0, [r5, #40]	; 0x28
   25740:	beq	25b30 <Mat_VarRead5+0x6b0>
   25744:	mov	r7, r0
   25748:	ldr	r0, [r5]
   2574c:	mov	r2, #0
   25750:	mov	r6, #0
   25754:	str	r0, [r7]
   25758:	ldr	r1, [r5, #52]	; 0x34
   2575c:	ldr	r0, [r4]
   25760:	ldr	r1, [r1]
   25764:	bl	1a2c <fseek@plt>
   25768:	ldr	r0, [r5, #48]	; 0x30
   2576c:	str	r7, [sp, #24]
   25770:	cmp	r0, #1
   25774:	bne	25b40 <Mat_VarRead5+0x6c0>
   25778:	ldr	r0, [r9]
   2577c:	add	r2, sp, #32
   25780:	ldr	r1, [r0, #12]
   25784:	mov	r0, r4
   25788:	str	r6, [r1, #4]
   2578c:	bl	3188 <InflateDataType>
   25790:	ldr	r0, [r4, #20]
   25794:	cmp	r0, #0
   25798:	beq	257a4 <Mat_VarRead5+0x324>
   2579c:	add	r0, sp, #32
   257a0:	bl	1c04 <Mat_uint32Swap>
   257a4:	ldr	r0, [sp, #32]
   257a8:	mov	r1, #0
   257ac:	uxtb	r6, r0
   257b0:	cmp	r6, #25
   257b4:	movcs	r6, r1
   257b8:	cmp	r0, #65536	; 0x10000
   257bc:	bcs	25bb8 <Mat_VarRead5+0x738>
   257c0:	mov	r0, #0
   257c4:	add	r2, sp, #28
   257c8:	mov	r3, #5
   257cc:	str	r0, [sp, #16]
   257d0:	ldr	r0, [r9]
   257d4:	ldr	r1, [r0, #12]
   257d8:	mov	r0, #1
   257dc:	str	r0, [sp]
   257e0:	mov	r0, r4
   257e4:	bl	f32c <ReadCompressedInt32Data>
   257e8:	b	25bc8 <Mat_VarRead5+0x748>
   257ec:	ldr	r1, [r5, #52]	; 0x34
   257f0:	ldr	r0, [r4]
   257f4:	mov	r2, #0
   257f8:	ldr	r1, [r1]
   257fc:	bl	1a2c <fseek@plt>
   25800:	mov	r0, #8
   25804:	mov	r1, #9
   25808:	b	2593c <Mat_VarRead5+0x4bc>
   2580c:	ldr	r1, [r5, #52]	; 0x34
   25810:	ldr	r0, [r4]
   25814:	mov	r2, #0
   25818:	ldr	r1, [r1]
   2581c:	bl	1a2c <fseek@plt>
   25820:	mov	r0, #4
   25824:	mov	r1, #7
   25828:	b	2593c <Mat_VarRead5+0x4bc>
   2582c:	ldr	r1, [r5, #52]	; 0x34
   25830:	ldr	r0, [r4]
   25834:	mov	r2, #0
   25838:	ldr	r1, [r1]
   2583c:	bl	1a2c <fseek@plt>
   25840:	mov	r0, #1
   25844:	str	r0, [r5, #8]
   25848:	b	25940 <Mat_VarRead5+0x4c0>
   2584c:	ldr	r1, [r5, #52]	; 0x34
   25850:	ldr	r0, [r4]
   25854:	mov	r2, #0
   25858:	ldr	r1, [r1]
   2585c:	bl	1a2c <fseek@plt>
   25860:	mov	r0, #1
   25864:	mov	r1, #2
   25868:	b	2593c <Mat_VarRead5+0x4bc>
   2586c:	ldr	r1, [r5, #52]	; 0x34
   25870:	ldr	r0, [r4]
   25874:	mov	r2, #0
   25878:	ldr	r1, [r1]
   2587c:	bl	1a2c <fseek@plt>
   25880:	mov	r0, #2
   25884:	mov	r1, #3
   25888:	b	2593c <Mat_VarRead5+0x4bc>
   2588c:	ldr	r1, [r5, #52]	; 0x34
   25890:	ldr	r0, [r4]
   25894:	mov	r2, #0
   25898:	ldr	r1, [r1]
   2589c:	bl	1a2c <fseek@plt>
   258a0:	mov	r0, #2
   258a4:	mov	r1, #4
   258a8:	b	2593c <Mat_VarRead5+0x4bc>
   258ac:	ldr	r1, [r5, #52]	; 0x34
   258b0:	ldr	r0, [r4]
   258b4:	mov	r2, #0
   258b8:	ldr	r1, [r1]
   258bc:	bl	1a2c <fseek@plt>
   258c0:	mov	r0, #4
   258c4:	mov	r1, #5
   258c8:	b	2593c <Mat_VarRead5+0x4bc>
   258cc:	ldr	r1, [r5, #52]	; 0x34
   258d0:	ldr	r0, [r4]
   258d4:	mov	r2, #0
   258d8:	ldr	r1, [r1]
   258dc:	bl	1a2c <fseek@plt>
   258e0:	mov	r0, #4
   258e4:	mov	r1, #6
   258e8:	b	2593c <Mat_VarRead5+0x4bc>
   258ec:	ldr	r1, [r5, #52]	; 0x34
   258f0:	ldr	r0, [r4]
   258f4:	mov	r2, #0
   258f8:	ldr	r1, [r1]
   258fc:	bl	1a2c <fseek@plt>
   25900:	mov	r0, #8
   25904:	mov	r1, #12
   25908:	b	2593c <Mat_VarRead5+0x4bc>
   2590c:	nop	{0}
   25910:	.word	0x00000000
   25914:	.word	0x00000002
   25918:	.word	0x00000009
   2591c:	.word	0x00000008
   25920:	ldr	r1, [r5, #52]	; 0x34
   25924:	ldr	r0, [r4]
   25928:	mov	r2, #0
   2592c:	ldr	r1, [r1]
   25930:	bl	1a2c <fseek@plt>
   25934:	mov	r0, #8
   25938:	mov	r1, #13
   2593c:	str	r1, [r5, #8]
   25940:	str	r0, [r5, #12]
   25944:	ldr	r0, [r5, #16]
   25948:	sub	r0, r0, #6
   2594c:	cmp	r0, #9
   25950:	bhi	259f4 <Mat_VarRead5+0x574>
   25954:	ldr	r2, [r5, #12]
   25958:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2595c:	ldr	r6, [r5, #20]
   25960:	mov	r0, r5
   25964:	bl	53884 <SafeMul>
   25968:	ldr	r0, [r5]
   2596c:	cmp	r6, #0
   25970:	beq	259b4 <Mat_VarRead5+0x534>
   25974:	bl	53794 <ComplexMalloc>
   25978:	cmp	r0, #0
   2597c:	beq	259dc <Mat_VarRead5+0x55c>
   25980:	ldr	r2, [r0]
   25984:	ldr	r3, [fp, #-32]	; 0xffffffe0
   25988:	mov	r7, r0
   2598c:	mov	r0, r4
   25990:	mov	r1, r5
   25994:	bl	26d78 <Mat_VarReadNumeric5>
   25998:	ldr	r2, [r7, #4]
   2599c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   259a0:	mov	r0, r4
   259a4:	mov	r1, r5
   259a8:	bl	26d78 <Mat_VarReadNumeric5>
   259ac:	str	r7, [r5, #40]	; 0x28
   259b0:	b	259f4 <Mat_VarRead5+0x574>
   259b4:	bl	18d0 <malloc@plt>
   259b8:	cmp	r0, #0
   259bc:	str	r0, [r5, #40]	; 0x28
   259c0:	beq	259e8 <Mat_VarRead5+0x568>
   259c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   259c8:	mov	r2, r0
   259cc:	mov	r0, r4
   259d0:	mov	r1, r5
   259d4:	bl	26d78 <Mat_VarReadNumeric5>
   259d8:	b	259f4 <Mat_VarRead5+0x574>
   259dc:	ldr	r0, [pc, #4056]	; 269bc <Mat_VarRead5+0x153c>
   259e0:	add	r0, pc, r0
   259e4:	b	259f0 <Mat_VarRead5+0x570>
   259e8:	ldr	r0, [pc, #4088]	; 269e8 <Mat_VarRead5+0x1568>
   259ec:	add	r0, pc, r0
   259f0:	bl	19b4 <Mat_Critical@plt>
   259f4:	ldr	r0, [r4]
   259f8:	mov	r1, sl
   259fc:	mov	r2, #0
   25a00:	bl	1a2c <fseek@plt>
   25a04:	sub	sp, fp, #28
   25a08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25a0c:	ldr	r0, [r5]
   25a10:	cmp	r0, #0
   25a14:	ldrne	r1, [r5, #12]
   25a18:	cmpne	r1, #0
   25a1c:	beq	25944 <Mat_VarRead5+0x4c4>
   25a20:	ldr	r8, [r5, #40]	; 0x28
   25a24:	cmp	r8, #0
   25a28:	beq	25a54 <Mat_VarRead5+0x5d4>
   25a2c:	cmp	r1, r0
   25a30:	bhi	25a54 <Mat_VarRead5+0x5d4>
   25a34:	udiv	r7, r0, r1
   25a38:	mov	r6, #0
   25a3c:	ldr	r1, [r8, r6, lsl #2]
   25a40:	mov	r0, r4
   25a44:	bl	25480 <Mat_VarRead5>
   25a48:	add	r6, r6, #1
   25a4c:	cmp	r6, r7
   25a50:	bcc	25a3c <Mat_VarRead5+0x5bc>
   25a54:	mov	r0, #24
   25a58:	str	r0, [r5, #8]
   25a5c:	b	25944 <Mat_VarRead5+0x4c4>
   25a60:	ldr	r3, [r4]
   25a64:	mov	r0, #1
   25a68:	add	r8, sp, #32
   25a6c:	mov	r1, #4
   25a70:	mov	r2, #1
   25a74:	str	r0, [sp, #24]
   25a78:	mov	r0, r8
   25a7c:	bl	18b8 <fread@plt>
   25a80:	mov	r6, r7
   25a84:	cmp	r7, #0
   25a88:	beq	25a94 <Mat_VarRead5+0x614>
   25a8c:	add	r0, sp, #32
   25a90:	bl	1c04 <Mat_uint32Swap>
   25a94:	ldr	r0, [sp, #32]
   25a98:	mov	r1, #0
   25a9c:	uxtb	r7, r0
   25aa0:	cmp	r7, #25
   25aa4:	movcs	r7, r1
   25aa8:	cmp	r1, r0, lsr #16
   25aac:	bne	25ae0 <Mat_VarRead5+0x660>
   25ab0:	ldr	r3, [r4]
   25ab4:	add	r8, r8, #4
   25ab8:	mov	r1, #4
   25abc:	mov	r2, #1
   25ac0:	mov	r0, r8
   25ac4:	bl	18b8 <fread@plt>
   25ac8:	cmp	r6, #0
   25acc:	beq	25ad8 <Mat_VarRead5+0x658>
   25ad0:	mov	r0, r8
   25ad4:	bl	1c04 <Mat_uint32Swap>
   25ad8:	mov	r0, #0
   25adc:	str	r0, [sp, #24]
   25ae0:	mov	r0, #2
   25ae4:	str	r0, [r5, #8]
   25ae8:	mov	r0, #2
   25aec:	bl	1924 <Mat_SizeOf@plt>
   25af0:	str	r0, [r5, #12]
   25af4:	mov	r2, r0
   25af8:	mov	r0, r5
   25afc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   25b00:	bl	53884 <SafeMul>
   25b04:	cmp	r0, #0
   25b08:	beq	25c80 <Mat_VarRead5+0x800>
   25b0c:	ldr	r0, [pc, #4080]	; 26b04 <Mat_VarRead5+0x1684>
   25b10:	add	r0, pc, r0
   25b14:	bl	19b4 <Mat_Critical@plt>
   25b18:	b	25944 <Mat_VarRead5+0x4c4>
   25b1c:	ldr	r1, [r5, #36]	; 0x24
   25b20:	ldr	r0, [pc, #4088]	; 26b20 <Mat_VarRead5+0x16a0>
   25b24:	add	r0, pc, r0
   25b28:	bl	19b4 <Mat_Critical@plt>
   25b2c:	b	25944 <Mat_VarRead5+0x4c4>
   25b30:	ldr	r0, [pc, #4076]	; 26b24 <Mat_VarRead5+0x16a4>
   25b34:	add	r0, pc, r0
   25b38:	bl	19b4 <Mat_Critical@plt>
   25b3c:	b	25944 <Mat_VarRead5+0x4c4>
   25b40:	ldr	r3, [r4]
   25b44:	add	r0, sp, #32
   25b48:	mov	r1, #4
   25b4c:	mov	r2, #1
   25b50:	bl	18b8 <fread@plt>
   25b54:	ldr	r0, [r4, #20]
   25b58:	cmp	r0, #0
   25b5c:	beq	25b68 <Mat_VarRead5+0x6e8>
   25b60:	add	r0, sp, #32
   25b64:	bl	1c04 <Mat_uint32Swap>
   25b68:	ldr	r0, [sp, #32]
   25b6c:	mov	r1, #0
   25b70:	uxtb	r6, r0
   25b74:	cmp	r6, #25
   25b78:	movcs	r6, r1
   25b7c:	cmp	r0, #65536	; 0x10000
   25b80:	bcs	25bb8 <Mat_VarRead5+0x738>
   25b84:	ldr	r3, [r4]
   25b88:	mov	r0, #0
   25b8c:	mov	r1, #4
   25b90:	mov	r2, #1
   25b94:	str	r0, [sp, #16]
   25b98:	add	r0, sp, #28
   25b9c:	bl	18b8 <fread@plt>
   25ba0:	ldr	r0, [r4, #20]
   25ba4:	cmp	r0, #0
   25ba8:	beq	25bc8 <Mat_VarRead5+0x748>
   25bac:	add	r0, sp, #28
   25bb0:	bl	1bf0 <Mat_int32Swap>
   25bb4:	b	25bc8 <Mat_VarRead5+0x748>
   25bb8:	lsr	r0, r0, #16
   25bbc:	str	r0, [sp, #28]
   25bc0:	mov	r0, #1
   25bc4:	str	r0, [sp, #16]
   25bc8:	ldr	r0, [sp, #28]
   25bcc:	ldr	r8, [sp, #24]
   25bd0:	asr	r1, r0, #31
   25bd4:	add	r0, r0, r1, lsr #30
   25bd8:	asr	r7, r0, #2
   25bdc:	bic	r0, r0, #3
   25be0:	str	r7, [r8, #8]
   25be4:	bl	18d0 <malloc@plt>
   25be8:	cmp	r0, #0
   25bec:	str	r0, [r8, #4]
   25bf0:	beq	25d24 <Mat_VarRead5+0x8a4>
   25bf4:	mov	r2, r0
   25bf8:	ldr	r0, [r5, #48]	; 0x30
   25bfc:	cmp	r0, #1
   25c00:	beq	25d34 <Mat_VarRead5+0x8b4>
   25c04:	mov	r1, #0
   25c08:	cmp	r0, #0
   25c0c:	str	r1, [sp, #12]
   25c10:	bne	25dfc <Mat_VarRead5+0x97c>
   25c14:	mov	r1, r2
   25c18:	mov	r0, r4
   25c1c:	mov	r2, r6
   25c20:	mov	r3, r7
   25c24:	bl	d774 <ReadInt32Data>
   25c28:	ldr	r1, [sp, #16]
   25c2c:	cmp	r1, #0
   25c30:	addne	r0, r0, #4
   25c34:	asr	r1, r0, #31
   25c38:	str	r0, [sp, #12]
   25c3c:	add	r1, r0, r1, lsr #29
   25c40:	bic	r1, r1, #7
   25c44:	subs	r1, r0, r1
   25c48:	beq	25d84 <Mat_VarRead5+0x904>
   25c4c:	ldr	r0, [r4]
   25c50:	rsb	r1, r1, #8
   25c54:	mov	r2, #1
   25c58:	bl	1a2c <fseek@plt>
   25c5c:	b	25d84 <Mat_VarRead5+0x904>
   25c60:	lsr	r6, r0, #16
   25c64:	mov	r0, #1
   25c68:	str	r0, [sp, #24]
   25c6c:	mov	r0, r7
   25c70:	str	r7, [r5, #8]
   25c74:	bl	1924 <Mat_SizeOf@plt>
   25c78:	str	r0, [r5, #12]
   25c7c:	str	r6, [r5]
   25c80:	ldr	r0, [r5, #20]
   25c84:	cmp	r0, #0
   25c88:	bne	25944 <Mat_VarRead5+0x4c4>
   25c8c:	ldr	r6, [r5]
   25c90:	mov	r1, #1
   25c94:	add	r0, r6, #1
   25c98:	bl	1798 <calloc@plt>
   25c9c:	cmp	r0, #0
   25ca0:	str	r0, [r5, #40]	; 0x28
   25ca4:	beq	25f2c <Mat_VarRead5+0xaac>
   25ca8:	cmp	r6, #0
   25cac:	beq	25944 <Mat_VarRead5+0x4c4>
   25cb0:	ldr	r2, [r5, #12]
   25cb4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   25cb8:	add	r0, sp, #28
   25cbc:	bl	53884 <SafeMul>
   25cc0:	cmp	r0, #0
   25cc4:	bne	25944 <Mat_VarRead5+0x4c4>
   25cc8:	ldr	r0, [r5]
   25ccc:	ldr	r1, [sp, #28]
   25cd0:	cmp	r1, r0
   25cd4:	bhi	25944 <Mat_VarRead5+0x4c4>
   25cd8:	ldr	r0, [r5, #48]	; 0x30
   25cdc:	cmp	r0, #1
   25ce0:	beq	26310 <Mat_VarRead5+0xe90>
   25ce4:	cmp	r0, #0
   25ce8:	bne	25944 <Mat_VarRead5+0x4c4>
   25cec:	ldr	r1, [r5, #40]	; 0x28
   25cf0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   25cf4:	mov	r0, r4
   25cf8:	mov	r2, r7
   25cfc:	bl	1960c <ReadCharData>
   25d00:	ldr	r1, [sp, #24]
   25d04:	cmp	r1, #0
   25d08:	addne	r0, r0, #4
   25d0c:	asr	r1, r0, #31
   25d10:	add	r1, r0, r1, lsr #29
   25d14:	bic	r1, r1, #7
   25d18:	subs	r1, r0, r1
   25d1c:	bne	26bf4 <Mat_VarRead5+0x1774>
   25d20:	b	25944 <Mat_VarRead5+0x4c4>
   25d24:	ldr	r0, [pc, #4060]	; 26d08 <Mat_VarRead5+0x1888>
   25d28:	add	r0, pc, r0
   25d2c:	bl	19b4 <Mat_Critical@plt>
   25d30:	b	25944 <Mat_VarRead5+0x4c4>
   25d34:	ldr	r0, [r9]
   25d38:	mov	r3, r6
   25d3c:	ldr	r1, [r0, #12]
   25d40:	mov	r0, r4
   25d44:	str	r7, [sp]
   25d48:	bl	f32c <ReadCompressedInt32Data>
   25d4c:	ldr	r1, [sp, #16]
   25d50:	cmp	r1, #0
   25d54:	addne	r0, r0, #4
   25d58:	asr	r1, r0, #31
   25d5c:	str	r0, [sp, #12]
   25d60:	add	r1, r0, r1, lsr #29
   25d64:	bic	r1, r1, #7
   25d68:	subs	r0, r0, r1
   25d6c:	beq	25d84 <Mat_VarRead5+0x904>
   25d70:	ldr	r1, [r9]
   25d74:	rsb	r2, r0, #8
   25d78:	mov	r0, r4
   25d7c:	ldr	r1, [r1, #12]
   25d80:	bl	240c <InflateSkip>
   25d84:	ldr	r0, [r5, #48]	; 0x30
   25d88:	cmp	r0, #1
   25d8c:	bne	25dfc <Mat_VarRead5+0x97c>
   25d90:	ldr	r0, [r9]
   25d94:	mov	r6, #0
   25d98:	add	r2, sp, #32
   25d9c:	ldr	r1, [r0, #12]
   25da0:	mov	r0, r4
   25da4:	str	r6, [r1, #4]
   25da8:	bl	3188 <InflateDataType>
   25dac:	ldr	r0, [r4, #20]
   25db0:	cmp	r0, #0
   25db4:	beq	25dc0 <Mat_VarRead5+0x940>
   25db8:	add	r0, sp, #32
   25dbc:	bl	1c04 <Mat_uint32Swap>
   25dc0:	ldr	r0, [sp, #32]
   25dc4:	uxtb	r1, r0
   25dc8:	cmp	r1, #25
   25dcc:	movcc	r6, r1
   25dd0:	cmp	r0, #65536	; 0x10000
   25dd4:	bcs	25e74 <Mat_VarRead5+0x9f4>
   25dd8:	ldr	r0, [r9]
   25ddc:	add	r2, sp, #28
   25de0:	mov	r3, #5
   25de4:	ldr	r1, [r0, #12]
   25de8:	mov	r0, #1
   25dec:	str	r0, [sp]
   25df0:	mov	r0, r4
   25df4:	bl	f32c <ReadCompressedInt32Data>
   25df8:	b	25e84 <Mat_VarRead5+0xa04>
   25dfc:	ldr	r3, [r4]
   25e00:	add	r0, sp, #32
   25e04:	mov	r1, #4
   25e08:	mov	r2, #1
   25e0c:	bl	18b8 <fread@plt>
   25e10:	ldr	r0, [r4, #20]
   25e14:	cmp	r0, #0
   25e18:	beq	25e24 <Mat_VarRead5+0x9a4>
   25e1c:	add	r0, sp, #32
   25e20:	bl	1c04 <Mat_uint32Swap>
   25e24:	ldr	r0, [sp, #32]
   25e28:	mov	r1, #0
   25e2c:	uxtb	r6, r0
   25e30:	cmp	r6, #25
   25e34:	movcs	r6, r1
   25e38:	cmp	r0, #65536	; 0x10000
   25e3c:	bcs	25e74 <Mat_VarRead5+0x9f4>
   25e40:	ldr	r3, [r4]
   25e44:	add	r0, sp, #28
   25e48:	mov	r1, #4
   25e4c:	mov	r2, #1
   25e50:	bl	18b8 <fread@plt>
   25e54:	ldr	r0, [r4, #20]
   25e58:	cmp	r0, #0
   25e5c:	beq	25e84 <Mat_VarRead5+0xa04>
   25e60:	mov	r0, #0
   25e64:	str	r0, [sp, #16]
   25e68:	add	r0, sp, #28
   25e6c:	bl	1bf0 <Mat_int32Swap>
   25e70:	b	25e8c <Mat_VarRead5+0xa0c>
   25e74:	lsr	r0, r0, #16
   25e78:	str	r0, [sp, #28]
   25e7c:	mov	r0, #1
   25e80:	b	25e88 <Mat_VarRead5+0xa08>
   25e84:	mov	r0, #0
   25e88:	str	r0, [sp, #16]
   25e8c:	ldr	r0, [sp, #28]
   25e90:	ldr	r8, [sp, #24]
   25e94:	asr	r1, r0, #31
   25e98:	add	r0, r0, r1, lsr #30
   25e9c:	asr	r7, r0, #2
   25ea0:	bic	r0, r0, #3
   25ea4:	str	r7, [r8, #16]
   25ea8:	bl	18d0 <malloc@plt>
   25eac:	cmp	r0, #0
   25eb0:	str	r0, [r8, #12]
   25eb4:	beq	25f1c <Mat_VarRead5+0xa9c>
   25eb8:	mov	r2, r0
   25ebc:	ldr	r0, [r5, #48]	; 0x30
   25ec0:	cmp	r0, #1
   25ec4:	beq	25f3c <Mat_VarRead5+0xabc>
   25ec8:	cmp	r0, #0
   25ecc:	bne	26008 <Mat_VarRead5+0xb88>
   25ed0:	mov	r1, r2
   25ed4:	mov	r0, r4
   25ed8:	mov	r2, r6
   25edc:	mov	r3, r7
   25ee0:	bl	d774 <ReadInt32Data>
   25ee4:	ldr	r1, [sp, #16]
   25ee8:	cmp	r1, #0
   25eec:	addne	r0, r0, #4
   25ef0:	asr	r1, r0, #31
   25ef4:	str	r0, [sp, #12]
   25ef8:	add	r1, r0, r1, lsr #29
   25efc:	bic	r1, r1, #7
   25f00:	subs	r1, r0, r1
   25f04:	beq	25f8c <Mat_VarRead5+0xb0c>
   25f08:	ldr	r0, [r4]
   25f0c:	rsb	r1, r1, #8
   25f10:	mov	r2, #1
   25f14:	bl	1a2c <fseek@plt>
   25f18:	b	25f8c <Mat_VarRead5+0xb0c>
   25f1c:	ldr	r0, [pc, #3664]	; 26d74 <Mat_VarRead5+0x18f4>
   25f20:	add	r0, pc, r0
   25f24:	bl	19b4 <Mat_Critical@plt>
   25f28:	b	25944 <Mat_VarRead5+0x4c4>
   25f2c:	ldr	r0, [pc, #3636]	; 26d68 <Mat_VarRead5+0x18e8>
   25f30:	add	r0, pc, r0
   25f34:	bl	19b4 <Mat_Critical@plt>
   25f38:	b	25944 <Mat_VarRead5+0x4c4>
   25f3c:	ldr	r0, [r9]
   25f40:	mov	r3, r6
   25f44:	ldr	r1, [r0, #12]
   25f48:	mov	r0, r4
   25f4c:	str	r7, [sp]
   25f50:	bl	f32c <ReadCompressedInt32Data>
   25f54:	ldr	r1, [sp, #16]
   25f58:	cmp	r1, #0
   25f5c:	addne	r0, r0, #4
   25f60:	asr	r1, r0, #31
   25f64:	str	r0, [sp, #12]
   25f68:	add	r1, r0, r1, lsr #29
   25f6c:	bic	r1, r1, #7
   25f70:	subs	r0, r0, r1
   25f74:	beq	25f8c <Mat_VarRead5+0xb0c>
   25f78:	ldr	r1, [r9]
   25f7c:	rsb	r2, r0, #8
   25f80:	mov	r0, r4
   25f84:	ldr	r1, [r1, #12]
   25f88:	bl	240c <InflateSkip>
   25f8c:	ldr	r0, [r5, #48]	; 0x30
   25f90:	cmp	r0, #1
   25f94:	bne	26008 <Mat_VarRead5+0xb88>
   25f98:	ldr	r0, [r9]
   25f9c:	mov	r6, #0
   25fa0:	add	r2, sp, #32
   25fa4:	ldr	r1, [r0, #12]
   25fa8:	mov	r0, r4
   25fac:	str	r6, [r1, #4]
   25fb0:	bl	3188 <InflateDataType>
   25fb4:	ldr	r0, [r4, #20]
   25fb8:	cmp	r0, #0
   25fbc:	beq	25fc8 <Mat_VarRead5+0xb48>
   25fc0:	add	r0, sp, #32
   25fc4:	bl	1c04 <Mat_uint32Swap>
   25fc8:	ldr	r0, [sp, #32]
   25fcc:	uxtb	r1, r0
   25fd0:	cmp	r1, #25
   25fd4:	movcc	r6, r1
   25fd8:	cmp	r0, #65536	; 0x10000
   25fdc:	bcs	26078 <Mat_VarRead5+0xbf8>
   25fe0:	ldr	r0, [r9]
   25fe4:	add	r2, sp, #28
   25fe8:	mov	r3, #5
   25fec:	ldr	r1, [r0, #12]
   25ff0:	mov	r0, #1
   25ff4:	str	r0, [sp]
   25ff8:	mov	r0, r4
   25ffc:	bl	f32c <ReadCompressedInt32Data>
   26000:	mov	r8, #0
   26004:	b	26084 <Mat_VarRead5+0xc04>
   26008:	ldr	r3, [r4]
   2600c:	add	r0, sp, #32
   26010:	mov	r1, #4
   26014:	mov	r2, #1
   26018:	bl	18b8 <fread@plt>
   2601c:	ldr	r0, [r4, #20]
   26020:	cmp	r0, #0
   26024:	beq	26030 <Mat_VarRead5+0xbb0>
   26028:	add	r0, sp, #32
   2602c:	bl	1c04 <Mat_uint32Swap>
   26030:	ldr	r0, [sp, #32]
   26034:	mov	r8, #0
   26038:	uxtb	r6, r0
   2603c:	cmp	r6, #25
   26040:	movcs	r6, r8
   26044:	cmp	r0, #65536	; 0x10000
   26048:	bcs	26078 <Mat_VarRead5+0xbf8>
   2604c:	ldr	r3, [r4]
   26050:	add	r0, sp, #28
   26054:	mov	r1, #4
   26058:	mov	r2, #1
   2605c:	bl	18b8 <fread@plt>
   26060:	ldr	r0, [r4, #20]
   26064:	cmp	r0, #0
   26068:	beq	26084 <Mat_VarRead5+0xc04>
   2606c:	add	r0, sp, #28
   26070:	bl	1bf0 <Mat_int32Swap>
   26074:	b	26084 <Mat_VarRead5+0xc04>
   26078:	lsr	r0, r0, #16
   2607c:	mov	r8, #1
   26080:	str	r0, [sp, #28]
   26084:	ldr	r0, [r5, #28]
   26088:	mov	r7, r6
   2608c:	cmp	r0, #0
   26090:	movwne	r7, #2
   26094:	cmp	r6, #9
   26098:	movne	r7, r6
   2609c:	mov	r0, r7
   260a0:	str	r7, [r5, #8]
   260a4:	bl	1924 <Mat_SizeOf@plt>
   260a8:	cmp	r0, #0
   260ac:	beq	25944 <Mat_VarRead5+0x4c4>
   260b0:	ldr	r1, [sp, #28]
   260b4:	ldr	r6, [sp, #24]
   260b8:	str	r7, [sp, #8]
   260bc:	str	r8, [sp, #16]
   260c0:	udiv	r7, r1, r0
   260c4:	str	r7, [r6, #20]!
   260c8:	ldr	r0, [r5, #8]
   260cc:	ldr	r8, [r5, #20]
   260d0:	bl	1924 <Mat_SizeOf@plt>
   260d4:	mul	r0, r0, r7
   260d8:	cmp	r8, #0
   260dc:	beq	26174 <Mat_VarRead5+0xcf4>
   260e0:	bl	53794 <ComplexMalloc>
   260e4:	cmp	r0, #0
   260e8:	beq	26208 <Mat_VarRead5+0xd88>
   260ec:	mov	r8, r0
   260f0:	ldr	r0, [r5, #48]	; 0x30
   260f4:	str	r6, [sp, #4]
   260f8:	cmp	r0, #1
   260fc:	beq	26228 <Mat_VarRead5+0xda8>
   26100:	cmp	r0, #0
   26104:	bne	26ae0 <Mat_VarRead5+0x1660>
   26108:	ldr	r0, [r5, #8]
   2610c:	sub	r0, r0, #1
   26110:	cmp	r0, #12
   26114:	bhi	26454 <Mat_VarRead5+0xfd4>
   26118:	add	r1, pc, #4
   2611c:	ldr	r0, [r1, r0, lsl #2]
   26120:	add	pc, r1, r0
   26124:	.word	0x00000034
   26128:	.word	0x00000230
   2612c:	.word	0x0000024c
   26130:	.word	0x00000268
   26134:	.word	0x00000284
   26138:	.word	0x000002a0
   2613c:	.word	0x000002bc
   26140:	.word	0x00000330
   26144:	.word	0x000002d8
   26148:	.word	0x00000330
   2614c:	.word	0x00000330
   26150:	.word	0x000002f4
   26154:	.word	0x00000314
   26158:	ldr	r0, [sp, #4]
   2615c:	ldr	r1, [r8]
   26160:	ldr	r2, [sp, #8]
   26164:	ldr	r3, [r0]
   26168:	mov	r0, r4
   2616c:	bl	15874 <ReadInt8Data>
   26170:	b	26450 <Mat_VarRead5+0xfd0>
   26174:	bl	18d0 <malloc@plt>
   26178:	mov	r2, r0
   2617c:	ldr	r0, [sp, #24]
   26180:	cmp	r2, #0
   26184:	str	r2, [r0, #24]
   26188:	beq	26218 <Mat_VarRead5+0xd98>
   2618c:	ldr	r0, [r5, #48]	; 0x30
   26190:	cmp	r0, #1
   26194:	beq	262a0 <Mat_VarRead5+0xe20>
   26198:	cmp	r0, #0
   2619c:	bne	25944 <Mat_VarRead5+0x4c4>
   261a0:	ldr	r0, [r5, #8]
   261a4:	sub	r0, r0, #1
   261a8:	cmp	r0, #12
   261ac:	bhi	26bd0 <Mat_VarRead5+0x1750>
   261b0:	add	r1, pc, #4
   261b4:	ldr	r0, [r1, r0, lsl #2]
   261b8:	add	pc, r1, r0
   261bc:	.word	0x00000034
   261c0:	.word	0x00000930
   261c4:	.word	0x0000094c
   261c8:	.word	0x0000096c
   261cc:	.word	0x00000984
   261d0:	.word	0x0000099c
   261d4:	.word	0x000009b4
   261d8:	.word	0x00000a14
   261dc:	.word	0x000009cc
   261e0:	.word	0x00000a14
   261e4:	.word	0x00000a14
   261e8:	.word	0x000009e4
   261ec:	.word	0x000009fc
   261f0:	mov	r1, r2
   261f4:	ldr	r3, [r6]
   261f8:	ldr	r2, [sp, #8]
   261fc:	mov	r0, r4
   26200:	bl	15874 <ReadInt8Data>
   26204:	b	26bcc <Mat_VarRead5+0x174c>
   26208:	ldr	r0, [pc, #2908]	; 26d6c <Mat_VarRead5+0x18ec>
   2620c:	add	r0, pc, r0
   26210:	bl	19b4 <Mat_Critical@plt>
   26214:	b	25944 <Mat_VarRead5+0x4c4>
   26218:	ldr	r0, [pc, #2896]	; 26d70 <Mat_VarRead5+0x18f0>
   2621c:	add	r0, pc, r0
   26220:	bl	19b4 <Mat_Critical@plt>
   26224:	b	25944 <Mat_VarRead5+0x4c4>
   26228:	ldr	r0, [r5, #8]
   2622c:	sub	r0, r0, #1
   26230:	cmp	r0, #12
   26234:	bhi	266e8 <Mat_VarRead5+0x1268>
   26238:	add	r1, pc, #4
   2623c:	ldr	r0, [r1, r0, lsl #2]
   26240:	add	pc, r1, r0
   26244:	.word	0x00000034
   26248:	.word	0x00000338
   2624c:	.word	0x00000360
   26250:	.word	0x00000388
   26254:	.word	0x000003b0
   26258:	.word	0x000003d8
   2625c:	.word	0x00000400
   26260:	.word	0x000004a4
   26264:	.word	0x0000042c
   26268:	.word	0x000004a4
   2626c:	.word	0x000004a4
   26270:	.word	0x00000454
   26274:	.word	0x0000047c
   26278:	ldr	r0, [r9]
   2627c:	ldr	r2, [r8]
   26280:	ldr	r3, [sp, #8]
   26284:	ldr	r1, [r0, #12]
   26288:	ldr	r0, [sp, #4]
   2628c:	ldr	r0, [r0]
   26290:	str	r0, [sp]
   26294:	mov	r0, r4
   26298:	bl	1717c <ReadCompressedInt8Data>
   2629c:	b	266e4 <Mat_VarRead5+0x1264>
   262a0:	ldr	r0, [r5, #8]
   262a4:	sub	r0, r0, #1
   262a8:	cmp	r0, #12
   262ac:	bhi	26d2c <Mat_VarRead5+0x18ac>
   262b0:	add	r1, pc, #4
   262b4:	ldr	r0, [r1, r0, lsl #2]
   262b8:	add	pc, r1, r0
   262bc:	.word	0x00000034
   262c0:	.word	0x0000094c
   262c4:	.word	0x0000096c
   262c8:	.word	0x0000098c
   262cc:	.word	0x000009ac
   262d0:	.word	0x000009cc
   262d4:	.word	0x000009ec
   262d8:	.word	0x00000a70
   262dc:	.word	0x00000a0c
   262e0:	.word	0x00000a70
   262e4:	.word	0x00000a70
   262e8:	.word	0x00000a2c
   262ec:	.word	0x00000a50
   262f0:	ldr	r0, [r9]
   262f4:	ldr	r3, [sp, #8]
   262f8:	ldr	r1, [r0, #12]
   262fc:	ldr	r0, [r6]
   26300:	str	r0, [sp]
   26304:	mov	r0, r4
   26308:	bl	1717c <ReadCompressedInt8Data>
   2630c:	b	26d28 <Mat_VarRead5+0x18a8>
   26310:	ldr	r0, [r5, #52]	; 0x34
   26314:	ldr	r2, [r5, #40]	; 0x28
   26318:	mov	r3, r7
   2631c:	ldr	r1, [r0, #12]
   26320:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26324:	str	r0, [sp]
   26328:	mov	r0, r4
   2632c:	bl	194e4 <ReadCompressedCharData>
   26330:	ldr	r1, [sp, #24]
   26334:	cmp	r1, #0
   26338:	addne	r0, r0, #4
   2633c:	asr	r1, r0, #31
   26340:	add	r1, r0, r1, lsr #29
   26344:	bic	r1, r1, #7
   26348:	subs	r0, r0, r1
   2634c:	bne	26d50 <Mat_VarRead5+0x18d0>
   26350:	b	25944 <Mat_VarRead5+0x4c4>
   26354:	ldr	r0, [sp, #4]
   26358:	ldr	r1, [r8]
   2635c:	ldr	r2, [sp, #8]
   26360:	ldr	r3, [r0]
   26364:	mov	r0, r4
   26368:	bl	176ac <ReadUInt8Data>
   2636c:	b	26450 <Mat_VarRead5+0xfd0>
   26370:	ldr	r0, [sp, #4]
   26374:	ldr	r1, [r8]
   26378:	ldr	r2, [sp, #8]
   2637c:	ldr	r3, [r0]
   26380:	mov	r0, r4
   26384:	bl	11944 <ReadInt16Data>
   26388:	b	26450 <Mat_VarRead5+0xfd0>
   2638c:	ldr	r0, [sp, #4]
   26390:	ldr	r1, [r8]
   26394:	ldr	r2, [sp, #8]
   26398:	ldr	r3, [r0]
   2639c:	mov	r0, r4
   263a0:	bl	138dc <ReadUInt16Data>
   263a4:	b	26450 <Mat_VarRead5+0xfd0>
   263a8:	ldr	r0, [sp, #4]
   263ac:	ldr	r1, [r8]
   263b0:	ldr	r2, [sp, #8]
   263b4:	ldr	r3, [r0]
   263b8:	mov	r0, r4
   263bc:	bl	d774 <ReadInt32Data>
   263c0:	b	26450 <Mat_VarRead5+0xfd0>
   263c4:	ldr	r0, [sp, #4]
   263c8:	ldr	r1, [r8]
   263cc:	ldr	r2, [sp, #8]
   263d0:	ldr	r3, [r0]
   263d4:	mov	r0, r4
   263d8:	bl	f85c <ReadUInt32Data>
   263dc:	b	26450 <Mat_VarRead5+0xfd0>
   263e0:	ldr	r0, [sp, #4]
   263e4:	ldr	r1, [r8]
   263e8:	ldr	r2, [sp, #8]
   263ec:	ldr	r3, [r0]
   263f0:	mov	r0, r4
   263f4:	bl	6f1c <ReadSingleData>
   263f8:	b	26450 <Mat_VarRead5+0xfd0>
   263fc:	ldr	r0, [sp, #4]
   26400:	ldr	r1, [r8]
   26404:	ldr	r2, [sp, #8]
   26408:	ldr	r3, [r0]
   2640c:	mov	r0, r4
   26410:	bl	3858 <ReadDoubleData>
   26414:	b	26450 <Mat_VarRead5+0xfd0>
   26418:	ldr	r0, [sp, #4]
   2641c:	ldr	r1, [r8]
   26420:	ldr	r2, [sp, #8]
   26424:	ldr	r3, [r0]
   26428:	mov	r0, r4
   2642c:	bl	9404 <ReadInt64Data>
   26430:	b	26450 <Mat_VarRead5+0xfd0>
   26434:	.word	0x00033574
   26438:	ldr	r0, [sp, #4]
   2643c:	ldr	r1, [r8]
   26440:	ldr	r2, [sp, #8]
   26444:	ldr	r3, [r0]
   26448:	mov	r0, r4
   2644c:	bl	b5bc <ReadUInt64Data>
   26450:	str	r0, [sp, #12]
   26454:	ldr	r0, [sp, #16]
   26458:	ldr	r1, [sp, #12]
   2645c:	cmp	r0, #0
   26460:	addne	r1, r1, #4
   26464:	asr	r0, r1, #31
   26468:	add	r0, r1, r0, lsr #29
   2646c:	bic	r0, r0, #7
   26470:	subs	r1, r1, r0
   26474:	beq	26488 <Mat_VarRead5+0x1008>
   26478:	ldr	r0, [r4]
   2647c:	rsb	r1, r1, #8
   26480:	mov	r2, #1
   26484:	bl	1a2c <fseek@plt>
   26488:	ldr	r3, [r4]
   2648c:	add	r6, sp, #32
   26490:	mov	r1, #4
   26494:	mov	r2, #1
   26498:	mov	r0, r6
   2649c:	bl	18b8 <fread@plt>
   264a0:	ldr	r0, [sp, #20]
   264a4:	cmp	r0, #0
   264a8:	beq	264b4 <Mat_VarRead5+0x1034>
   264ac:	add	r0, sp, #32
   264b0:	bl	1c04 <Mat_uint32Swap>
   264b4:	ldr	r0, [sp, #32]
   264b8:	uxtb	r9, r0
   264bc:	cmp	r9, #25
   264c0:	movcs	r9, #0
   264c4:	cmp	r0, #65536	; 0x10000
   264c8:	bcs	26508 <Mat_VarRead5+0x1088>
   264cc:	ldr	r3, [r4]
   264d0:	add	r6, r6, #4
   264d4:	mov	r1, #4
   264d8:	mov	r2, #1
   264dc:	mov	r0, r6
   264e0:	bl	18b8 <fread@plt>
   264e4:	ldr	r0, [sp, #20]
   264e8:	cmp	r0, #0
   264ec:	beq	264f8 <Mat_VarRead5+0x1078>
   264f0:	mov	r0, r6
   264f4:	bl	1c04 <Mat_uint32Swap>
   264f8:	ldr	r0, [sp, #36]	; 0x24
   264fc:	mov	r6, #0
   26500:	b	26510 <Mat_VarRead5+0x1090>
   26504:	.word	0x000334dc
   26508:	lsr	r0, r0, #16
   2650c:	mov	r6, #1
   26510:	ldr	r1, [r5, #8]
   26514:	sub	r1, r1, #1
   26518:	cmp	r1, #12
   2651c:	bhi	26914 <Mat_VarRead5+0x1494>
   26520:	add	r2, pc, #4
   26524:	ldr	r1, [r2, r1, lsl #2]
   26528:	add	pc, r2, r1
   2652c:	.word	0x00000034
   26530:	.word	0x000002f0
   26534:	.word	0x0000030c
   26538:	.word	0x00000328
   2653c:	.word	0x00000344
   26540:	.word	0x00000360
   26544:	.word	0x0000037c
   26548:	.word	0x000003e8
   2654c:	.word	0x00000398
   26550:	.word	0x000003e8
   26554:	.word	0x000003e8
   26558:	.word	0x000003b4
   2655c:	.word	0x000003d0
   26560:	ldr	r0, [sp, #4]
   26564:	ldr	r1, [r8, #4]
   26568:	mov	r2, r9
   2656c:	ldr	r3, [r0]
   26570:	mov	r0, r4
   26574:	bl	15874 <ReadInt8Data>
   26578:	b	26914 <Mat_VarRead5+0x1494>
   2657c:	ldr	r0, [r9]
   26580:	ldr	r2, [r8]
   26584:	ldr	r3, [sp, #8]
   26588:	ldr	r1, [r0, #12]
   2658c:	ldr	r0, [sp, #4]
   26590:	ldr	r0, [r0]
   26594:	str	r0, [sp]
   26598:	mov	r0, r4
   2659c:	bl	18fb4 <ReadCompressedUInt8Data>
   265a0:	b	266e4 <Mat_VarRead5+0x1264>
   265a4:	ldr	r0, [r9]
   265a8:	ldr	r2, [r8]
   265ac:	ldr	r3, [sp, #8]
   265b0:	ldr	r1, [r0, #12]
   265b4:	ldr	r0, [sp, #4]
   265b8:	ldr	r0, [r0]
   265bc:	str	r0, [sp]
   265c0:	mov	r0, r4
   265c4:	bl	133ac <ReadCompressedInt16Data>
   265c8:	b	266e4 <Mat_VarRead5+0x1264>
   265cc:	ldr	r0, [r9]
   265d0:	ldr	r2, [r8]
   265d4:	ldr	r3, [sp, #8]
   265d8:	ldr	r1, [r0, #12]
   265dc:	ldr	r0, [sp, #4]
   265e0:	ldr	r0, [r0]
   265e4:	str	r0, [sp]
   265e8:	mov	r0, r4
   265ec:	bl	15344 <ReadCompressedUInt16Data>
   265f0:	b	266e4 <Mat_VarRead5+0x1264>
   265f4:	ldr	r0, [r9]
   265f8:	ldr	r2, [r8]
   265fc:	ldr	r3, [sp, #8]
   26600:	ldr	r1, [r0, #12]
   26604:	ldr	r0, [sp, #4]
   26608:	ldr	r0, [r0]
   2660c:	str	r0, [sp]
   26610:	mov	r0, r4
   26614:	bl	f32c <ReadCompressedInt32Data>
   26618:	b	266e4 <Mat_VarRead5+0x1264>
   2661c:	ldr	r0, [r9]
   26620:	ldr	r2, [r8]
   26624:	ldr	r3, [sp, #8]
   26628:	ldr	r1, [r0, #12]
   2662c:	ldr	r0, [sp, #4]
   26630:	ldr	r0, [r0]
   26634:	str	r0, [sp]
   26638:	mov	r0, r4
   2663c:	bl	11414 <ReadCompressedUInt32Data>
   26640:	b	266e4 <Mat_VarRead5+0x1264>
   26644:	ldr	r0, [r9]
   26648:	ldr	r2, [r8]
   2664c:	ldr	r3, [sp, #8]
   26650:	ldr	r1, [r0, #12]
   26654:	ldr	r0, [sp, #4]
   26658:	ldr	r0, [r0]
   2665c:	str	r0, [sp]
   26660:	mov	r0, r4
   26664:	bl	8e60 <ReadCompressedSingleData>
   26668:	b	266e4 <Mat_VarRead5+0x1264>
   2666c:	.word	0x00033553
   26670:	ldr	r0, [r9]
   26674:	ldr	r2, [r8]
   26678:	ldr	r3, [sp, #8]
   2667c:	ldr	r1, [r0, #12]
   26680:	ldr	r0, [sp, #4]
   26684:	ldr	r0, [r0]
   26688:	str	r0, [sp]
   2668c:	mov	r0, r4
   26690:	bl	5500 <ReadCompressedDoubleData>
   26694:	b	266e4 <Mat_VarRead5+0x1264>
   26698:	ldr	r0, [r9]
   2669c:	ldr	r2, [r8]
   266a0:	ldr	r3, [sp, #8]
   266a4:	ldr	r1, [r0, #12]
   266a8:	ldr	r0, [sp, #4]
   266ac:	ldr	r0, [r0]
   266b0:	str	r0, [sp]
   266b4:	mov	r0, r4
   266b8:	bl	b01c <ReadCompressedInt64Data>
   266bc:	b	266e4 <Mat_VarRead5+0x1264>
   266c0:	ldr	r0, [r9]
   266c4:	ldr	r2, [r8]
   266c8:	ldr	r3, [sp, #8]
   266cc:	ldr	r1, [r0, #12]
   266d0:	ldr	r0, [sp, #4]
   266d4:	ldr	r0, [r0]
   266d8:	str	r0, [sp]
   266dc:	mov	r0, r4
   266e0:	bl	d1d4 <ReadCompressedUInt64Data>
   266e4:	str	r0, [sp, #12]
   266e8:	ldr	r0, [sp, #16]
   266ec:	ldr	r1, [sp, #12]
   266f0:	cmp	r0, #0
   266f4:	addne	r1, r1, #4
   266f8:	asr	r0, r1, #31
   266fc:	add	r0, r1, r0, lsr #29
   26700:	bic	r0, r0, #7
   26704:	subs	r0, r1, r0
   26708:	beq	26720 <Mat_VarRead5+0x12a0>
   2670c:	ldr	r1, [r9]
   26710:	rsb	r2, r0, #8
   26714:	mov	r0, r4
   26718:	ldr	r1, [r1, #12]
   2671c:	bl	240c <InflateSkip>
   26720:	ldr	r0, [r9]
   26724:	add	r7, sp, #32
   26728:	mov	r2, r7
   2672c:	ldr	r1, [r0, #12]
   26730:	mov	r0, r4
   26734:	bl	3188 <InflateDataType>
   26738:	ldr	r0, [sp, #20]
   2673c:	cmp	r0, #0
   26740:	beq	2674c <Mat_VarRead5+0x12cc>
   26744:	add	r0, sp, #32
   26748:	bl	1c04 <Mat_uint32Swap>
   2674c:	ldr	r0, [sp, #32]
   26750:	uxtb	r6, r0
   26754:	cmp	r6, #25
   26758:	movcs	r6, #0
   2675c:	cmp	r0, #65536	; 0x10000
   26760:	bcs	2679c <Mat_VarRead5+0x131c>
   26764:	ldr	r0, [r9]
   26768:	add	r7, r7, #4
   2676c:	mov	r2, r7
   26770:	ldr	r1, [r0, #12]
   26774:	mov	r0, r4
   26778:	bl	3188 <InflateDataType>
   2677c:	ldr	r0, [sp, #20]
   26780:	cmp	r0, #0
   26784:	beq	26790 <Mat_VarRead5+0x1310>
   26788:	mov	r0, r7
   2678c:	bl	1c04 <Mat_uint32Swap>
   26790:	ldr	r0, [sp, #36]	; 0x24
   26794:	mov	r7, #0
   26798:	b	267a4 <Mat_VarRead5+0x1324>
   2679c:	lsr	r0, r0, #16
   267a0:	mov	r7, #1
   267a4:	ldr	r1, [r5, #8]
   267a8:	sub	r1, r1, #1
   267ac:	cmp	r1, #12
   267b0:	bhi	26ab0 <Mat_VarRead5+0x1630>
   267b4:	add	r2, pc, #4
   267b8:	ldr	r1, [r2, r1, lsl #2]
   267bc:	add	pc, r2, r1
   267c0:	.word	0x00000034
   267c4:	.word	0x00000184
   267c8:	.word	0x000001ac
   267cc:	.word	0x000001d4
   267d0:	.word	0x00000200
   267d4:	.word	0x0000022c
   267d8:	.word	0x00000254
   267dc:	.word	0x000002f0
   267e0:	.word	0x0000027c
   267e4:	.word	0x000002f0
   267e8:	.word	0x000002f0
   267ec:	.word	0x000002a4
   267f0:	.word	0x000002cc
   267f4:	ldr	r0, [r9]
   267f8:	ldr	r2, [r8, #4]
   267fc:	mov	r3, r6
   26800:	ldr	r1, [r0, #12]
   26804:	ldr	r0, [sp, #4]
   26808:	ldr	r0, [r0]
   2680c:	str	r0, [sp]
   26810:	mov	r0, r4
   26814:	bl	1717c <ReadCompressedInt8Data>
   26818:	b	26ab0 <Mat_VarRead5+0x1630>
   2681c:	ldr	r0, [sp, #4]
   26820:	ldr	r1, [r8, #4]
   26824:	mov	r2, r9
   26828:	ldr	r3, [r0]
   2682c:	mov	r0, r4
   26830:	bl	176ac <ReadUInt8Data>
   26834:	b	26914 <Mat_VarRead5+0x1494>
   26838:	ldr	r0, [sp, #4]
   2683c:	ldr	r1, [r8, #4]
   26840:	mov	r2, r9
   26844:	ldr	r3, [r0]
   26848:	mov	r0, r4
   2684c:	bl	11944 <ReadInt16Data>
   26850:	b	26914 <Mat_VarRead5+0x1494>
   26854:	ldr	r0, [sp, #4]
   26858:	ldr	r1, [r8, #4]
   2685c:	mov	r2, r9
   26860:	ldr	r3, [r0]
   26864:	mov	r0, r4
   26868:	bl	138dc <ReadUInt16Data>
   2686c:	b	26914 <Mat_VarRead5+0x1494>
   26870:	ldr	r0, [sp, #4]
   26874:	ldr	r1, [r8, #4]
   26878:	mov	r2, r9
   2687c:	ldr	r3, [r0]
   26880:	mov	r0, r4
   26884:	bl	d774 <ReadInt32Data>
   26888:	b	26914 <Mat_VarRead5+0x1494>
   2688c:	ldr	r0, [sp, #4]
   26890:	ldr	r1, [r8, #4]
   26894:	mov	r2, r9
   26898:	ldr	r3, [r0]
   2689c:	mov	r0, r4
   268a0:	bl	f85c <ReadUInt32Data>
   268a4:	b	26914 <Mat_VarRead5+0x1494>
   268a8:	ldr	r0, [sp, #4]
   268ac:	ldr	r1, [r8, #4]
   268b0:	mov	r2, r9
   268b4:	ldr	r3, [r0]
   268b8:	mov	r0, r4
   268bc:	bl	6f1c <ReadSingleData>
   268c0:	b	26914 <Mat_VarRead5+0x1494>
   268c4:	ldr	r0, [sp, #4]
   268c8:	ldr	r1, [r8, #4]
   268cc:	mov	r2, r9
   268d0:	ldr	r3, [r0]
   268d4:	mov	r0, r4
   268d8:	bl	3858 <ReadDoubleData>
   268dc:	b	26914 <Mat_VarRead5+0x1494>
   268e0:	ldr	r0, [sp, #4]
   268e4:	ldr	r1, [r8, #4]
   268e8:	mov	r2, r9
   268ec:	ldr	r3, [r0]
   268f0:	mov	r0, r4
   268f4:	bl	9404 <ReadInt64Data>
   268f8:	b	26914 <Mat_VarRead5+0x1494>
   268fc:	ldr	r0, [sp, #4]
   26900:	ldr	r1, [r8, #4]
   26904:	mov	r2, r9
   26908:	ldr	r3, [r0]
   2690c:	mov	r0, r4
   26910:	bl	b5bc <ReadUInt64Data>
   26914:	cmp	r6, #0
   26918:	addne	r0, r0, #4
   2691c:	asr	r1, r0, #31
   26920:	add	r1, r0, r1, lsr #29
   26924:	bic	r1, r1, #7
   26928:	subs	r1, r0, r1
   2692c:	beq	26ae0 <Mat_VarRead5+0x1660>
   26930:	ldr	r0, [r4]
   26934:	rsb	r1, r1, #8
   26938:	mov	r2, #1
   2693c:	bl	1a2c <fseek@plt>
   26940:	b	26ae0 <Mat_VarRead5+0x1660>
   26944:	ldr	r0, [r9]
   26948:	ldr	r2, [r8, #4]
   2694c:	mov	r3, r6
   26950:	ldr	r1, [r0, #12]
   26954:	ldr	r0, [sp, #4]
   26958:	ldr	r0, [r0]
   2695c:	str	r0, [sp]
   26960:	mov	r0, r4
   26964:	bl	18fb4 <ReadCompressedUInt8Data>
   26968:	b	26ab0 <Mat_VarRead5+0x1630>
   2696c:	ldr	r0, [r9]
   26970:	ldr	r2, [r8, #4]
   26974:	mov	r3, r6
   26978:	ldr	r1, [r0, #12]
   2697c:	ldr	r0, [sp, #4]
   26980:	ldr	r0, [r0]
   26984:	str	r0, [sp]
   26988:	mov	r0, r4
   2698c:	bl	133ac <ReadCompressedInt16Data>
   26990:	b	26ab0 <Mat_VarRead5+0x1630>
   26994:	ldr	r0, [r9]
   26998:	ldr	r2, [r8, #4]
   2699c:	mov	r3, r6
   269a0:	ldr	r1, [r0, #12]
   269a4:	ldr	r0, [sp, #4]
   269a8:	ldr	r0, [r0]
   269ac:	str	r0, [sp]
   269b0:	mov	r0, r4
   269b4:	bl	15344 <ReadCompressedUInt16Data>
   269b8:	b	26ab0 <Mat_VarRead5+0x1630>
   269bc:	.word	0x00033211
   269c0:	ldr	r0, [r9]
   269c4:	ldr	r2, [r8, #4]
   269c8:	mov	r3, r6
   269cc:	ldr	r1, [r0, #12]
   269d0:	ldr	r0, [sp, #4]
   269d4:	ldr	r0, [r0]
   269d8:	str	r0, [sp]
   269dc:	mov	r0, r4
   269e0:	bl	f32c <ReadCompressedInt32Data>
   269e4:	b	26ab0 <Mat_VarRead5+0x1630>
   269e8:	.word	0x000330a8
   269ec:	ldr	r0, [r9]
   269f0:	ldr	r2, [r8, #4]
   269f4:	mov	r3, r6
   269f8:	ldr	r1, [r0, #12]
   269fc:	ldr	r0, [sp, #4]
   26a00:	ldr	r0, [r0]
   26a04:	str	r0, [sp]
   26a08:	mov	r0, r4
   26a0c:	bl	11414 <ReadCompressedUInt32Data>
   26a10:	b	26ab0 <Mat_VarRead5+0x1630>
   26a14:	ldr	r0, [r9]
   26a18:	ldr	r2, [r8, #4]
   26a1c:	mov	r3, r6
   26a20:	ldr	r1, [r0, #12]
   26a24:	ldr	r0, [sp, #4]
   26a28:	ldr	r0, [r0]
   26a2c:	str	r0, [sp]
   26a30:	mov	r0, r4
   26a34:	bl	8e60 <ReadCompressedSingleData>
   26a38:	b	26ab0 <Mat_VarRead5+0x1630>
   26a3c:	ldr	r0, [r9]
   26a40:	ldr	r2, [r8, #4]
   26a44:	mov	r3, r6
   26a48:	ldr	r1, [r0, #12]
   26a4c:	ldr	r0, [sp, #4]
   26a50:	ldr	r0, [r0]
   26a54:	str	r0, [sp]
   26a58:	mov	r0, r4
   26a5c:	bl	5500 <ReadCompressedDoubleData>
   26a60:	b	26ab0 <Mat_VarRead5+0x1630>
   26a64:	ldr	r0, [r9]
   26a68:	ldr	r2, [r8, #4]
   26a6c:	mov	r3, r6
   26a70:	ldr	r1, [r0, #12]
   26a74:	ldr	r0, [sp, #4]
   26a78:	ldr	r0, [r0]
   26a7c:	str	r0, [sp]
   26a80:	mov	r0, r4
   26a84:	bl	b01c <ReadCompressedInt64Data>
   26a88:	b	26ab0 <Mat_VarRead5+0x1630>
   26a8c:	ldr	r0, [r9]
   26a90:	ldr	r2, [r8, #4]
   26a94:	mov	r3, r6
   26a98:	ldr	r1, [r0, #12]
   26a9c:	ldr	r0, [sp, #4]
   26aa0:	ldr	r0, [r0]
   26aa4:	str	r0, [sp]
   26aa8:	mov	r0, r4
   26aac:	bl	d1d4 <ReadCompressedUInt64Data>
   26ab0:	cmp	r7, #0
   26ab4:	addne	r0, r0, #4
   26ab8:	asr	r1, r0, #31
   26abc:	add	r1, r0, r1, lsr #29
   26ac0:	bic	r1, r1, #7
   26ac4:	subs	r0, r0, r1
   26ac8:	beq	26ae0 <Mat_VarRead5+0x1660>
   26acc:	ldr	r1, [r9]
   26ad0:	rsb	r2, r0, #8
   26ad4:	mov	r0, r4
   26ad8:	ldr	r1, [r1, #12]
   26adc:	bl	240c <InflateSkip>
   26ae0:	ldr	r0, [sp, #24]
   26ae4:	str	r8, [r0, #24]
   26ae8:	b	25944 <Mat_VarRead5+0x4c4>
   26aec:	mov	r1, r2
   26af0:	ldr	r3, [r6]
   26af4:	ldr	r2, [sp, #8]
   26af8:	mov	r0, r4
   26afc:	bl	176ac <ReadUInt8Data>
   26b00:	b	26bcc <Mat_VarRead5+0x174c>
   26b04:	.word	0x00032f64
   26b08:	mov	r1, r2
   26b0c:	ldr	r3, [r6]
   26b10:	ldr	r2, [sp, #8]
   26b14:	mov	r0, r4
   26b18:	bl	11944 <ReadInt16Data>
   26b1c:	b	26bcc <Mat_VarRead5+0x174c>
   26b20:	.word	0x00032f96
   26b24:	.word	0x00032fa5
   26b28:	mov	r1, r2
   26b2c:	ldr	r3, [r6]
   26b30:	ldr	r2, [sp, #8]
   26b34:	mov	r0, r4
   26b38:	bl	138dc <ReadUInt16Data>
   26b3c:	b	26bcc <Mat_VarRead5+0x174c>
   26b40:	mov	r1, r2
   26b44:	ldr	r3, [r6]
   26b48:	ldr	r2, [sp, #8]
   26b4c:	mov	r0, r4
   26b50:	bl	d774 <ReadInt32Data>
   26b54:	b	26bcc <Mat_VarRead5+0x174c>
   26b58:	mov	r1, r2
   26b5c:	ldr	r3, [r6]
   26b60:	ldr	r2, [sp, #8]
   26b64:	mov	r0, r4
   26b68:	bl	f85c <ReadUInt32Data>
   26b6c:	b	26bcc <Mat_VarRead5+0x174c>
   26b70:	mov	r1, r2
   26b74:	ldr	r3, [r6]
   26b78:	ldr	r2, [sp, #8]
   26b7c:	mov	r0, r4
   26b80:	bl	6f1c <ReadSingleData>
   26b84:	b	26bcc <Mat_VarRead5+0x174c>
   26b88:	mov	r1, r2
   26b8c:	ldr	r3, [r6]
   26b90:	ldr	r2, [sp, #8]
   26b94:	mov	r0, r4
   26b98:	bl	3858 <ReadDoubleData>
   26b9c:	b	26bcc <Mat_VarRead5+0x174c>
   26ba0:	mov	r1, r2
   26ba4:	ldr	r3, [r6]
   26ba8:	ldr	r2, [sp, #8]
   26bac:	mov	r0, r4
   26bb0:	bl	9404 <ReadInt64Data>
   26bb4:	b	26bcc <Mat_VarRead5+0x174c>
   26bb8:	mov	r1, r2
   26bbc:	ldr	r3, [r6]
   26bc0:	ldr	r2, [sp, #8]
   26bc4:	mov	r0, r4
   26bc8:	bl	b5bc <ReadUInt64Data>
   26bcc:	str	r0, [sp, #12]
   26bd0:	ldr	r0, [sp, #16]
   26bd4:	ldr	r1, [sp, #12]
   26bd8:	cmp	r0, #0
   26bdc:	addne	r1, r1, #4
   26be0:	asr	r0, r1, #31
   26be4:	add	r0, r1, r0, lsr #29
   26be8:	bic	r0, r0, #7
   26bec:	subs	r1, r1, r0
   26bf0:	beq	25944 <Mat_VarRead5+0x4c4>
   26bf4:	ldr	r0, [r4]
   26bf8:	rsb	r1, r1, #8
   26bfc:	mov	r2, #1
   26c00:	bl	1a2c <fseek@plt>
   26c04:	b	25944 <Mat_VarRead5+0x4c4>
   26c08:	ldr	r0, [r9]
   26c0c:	ldr	r3, [sp, #8]
   26c10:	ldr	r1, [r0, #12]
   26c14:	ldr	r0, [r6]
   26c18:	str	r0, [sp]
   26c1c:	mov	r0, r4
   26c20:	bl	18fb4 <ReadCompressedUInt8Data>
   26c24:	b	26d28 <Mat_VarRead5+0x18a8>
   26c28:	ldr	r0, [r9]
   26c2c:	ldr	r3, [sp, #8]
   26c30:	ldr	r1, [r0, #12]
   26c34:	ldr	r0, [r6]
   26c38:	str	r0, [sp]
   26c3c:	mov	r0, r4
   26c40:	bl	133ac <ReadCompressedInt16Data>
   26c44:	b	26d28 <Mat_VarRead5+0x18a8>
   26c48:	ldr	r0, [r9]
   26c4c:	ldr	r3, [sp, #8]
   26c50:	ldr	r1, [r0, #12]
   26c54:	ldr	r0, [r6]
   26c58:	str	r0, [sp]
   26c5c:	mov	r0, r4
   26c60:	bl	15344 <ReadCompressedUInt16Data>
   26c64:	b	26d28 <Mat_VarRead5+0x18a8>
   26c68:	ldr	r0, [r9]
   26c6c:	ldr	r3, [sp, #8]
   26c70:	ldr	r1, [r0, #12]
   26c74:	ldr	r0, [r6]
   26c78:	str	r0, [sp]
   26c7c:	mov	r0, r4
   26c80:	bl	f32c <ReadCompressedInt32Data>
   26c84:	b	26d28 <Mat_VarRead5+0x18a8>
   26c88:	ldr	r0, [r9]
   26c8c:	ldr	r3, [sp, #8]
   26c90:	ldr	r1, [r0, #12]
   26c94:	ldr	r0, [r6]
   26c98:	str	r0, [sp]
   26c9c:	mov	r0, r4
   26ca0:	bl	11414 <ReadCompressedUInt32Data>
   26ca4:	b	26d28 <Mat_VarRead5+0x18a8>
   26ca8:	ldr	r0, [r9]
   26cac:	ldr	r3, [sp, #8]
   26cb0:	ldr	r1, [r0, #12]
   26cb4:	ldr	r0, [r6]
   26cb8:	str	r0, [sp]
   26cbc:	mov	r0, r4
   26cc0:	bl	8e60 <ReadCompressedSingleData>
   26cc4:	b	26d28 <Mat_VarRead5+0x18a8>
   26cc8:	ldr	r0, [r9]
   26ccc:	ldr	r3, [sp, #8]
   26cd0:	ldr	r1, [r0, #12]
   26cd4:	ldr	r0, [r6]
   26cd8:	str	r0, [sp]
   26cdc:	mov	r0, r4
   26ce0:	bl	5500 <ReadCompressedDoubleData>
   26ce4:	b	26d28 <Mat_VarRead5+0x18a8>
   26ce8:	ldr	r0, [r9]
   26cec:	ldr	r3, [sp, #8]
   26cf0:	ldr	r1, [r0, #12]
   26cf4:	ldr	r0, [r6]
   26cf8:	str	r0, [sp]
   26cfc:	mov	r0, r4
   26d00:	bl	b01c <ReadCompressedInt64Data>
   26d04:	b	26d28 <Mat_VarRead5+0x18a8>
   26d08:	.word	0x00032de1
   26d0c:	ldr	r0, [r9]
   26d10:	ldr	r3, [sp, #8]
   26d14:	ldr	r1, [r0, #12]
   26d18:	ldr	r0, [r6]
   26d1c:	str	r0, [sp]
   26d20:	mov	r0, r4
   26d24:	bl	d1d4 <ReadCompressedUInt64Data>
   26d28:	str	r0, [sp, #12]
   26d2c:	ldr	r0, [sp, #16]
   26d30:	ldr	r1, [sp, #12]
   26d34:	cmp	r0, #0
   26d38:	addne	r1, r1, #4
   26d3c:	asr	r0, r1, #31
   26d40:	add	r0, r1, r0, lsr #29
   26d44:	bic	r0, r0, #7
   26d48:	subs	r0, r1, r0
   26d4c:	beq	25944 <Mat_VarRead5+0x4c4>
   26d50:	ldr	r1, [r9]
   26d54:	rsb	r2, r0, #8
   26d58:	mov	r0, r4
   26d5c:	ldr	r1, [r1, #12]
   26d60:	bl	240c <InflateSkip>
   26d64:	b	25944 <Mat_VarRead5+0x4c4>
   26d68:	.word	0x00032b64
   26d6c:	.word	0x00032959
   26d70:	.word	0x0003297e
   26d74:	.word	0x00032c17

00026d78 <Mat_VarReadNumeric5>:
   26d78:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   26d7c:	add	fp, sp, #24
   26d80:	sub	sp, sp, #16
   26d84:	mov	r4, r0
   26d88:	ldr	r0, [r1, #48]	; 0x30
   26d8c:	mov	r9, r3
   26d90:	mov	r8, r2
   26d94:	mov	r5, r1
   26d98:	cmp	r0, #1
   26d9c:	bne	26e08 <Mat_VarReadNumeric5+0x90>
   26da0:	ldr	r0, [r5, #52]	; 0x34
   26da4:	add	r7, sp, #8
   26da8:	mov	r6, #0
   26dac:	mov	r2, r7
   26db0:	ldr	r1, [r0, #12]
   26db4:	mov	r0, r4
   26db8:	str	r6, [r1, #4]
   26dbc:	bl	3188 <InflateDataType>
   26dc0:	ldr	r0, [r4, #20]
   26dc4:	cmp	r0, #0
   26dc8:	beq	26dd4 <Mat_VarReadNumeric5+0x5c>
   26dcc:	add	r0, sp, #8
   26dd0:	bl	1c04 <Mat_uint32Swap>
   26dd4:	ldr	r0, [sp, #8]
   26dd8:	uxtb	r1, r0
   26ddc:	cmp	r1, #25
   26de0:	movcc	r6, r1
   26de4:	cmp	r0, #65536	; 0x10000
   26de8:	bcs	26e98 <Mat_VarReadNumeric5+0x120>
   26dec:	ldr	r0, [r5, #52]	; 0x34
   26df0:	add	r7, r7, #4
   26df4:	mov	r2, r7
   26df8:	ldr	r1, [r0, #12]
   26dfc:	mov	r0, r4
   26e00:	bl	3188 <InflateDataType>
   26e04:	b	26e64 <Mat_VarReadNumeric5+0xec>
   26e08:	ldr	r3, [r4]
   26e0c:	add	r7, sp, #8
   26e10:	mov	r1, #4
   26e14:	mov	r2, #1
   26e18:	mov	r0, r7
   26e1c:	bl	18b8 <fread@plt>
   26e20:	ldr	r0, [r4, #20]
   26e24:	cmp	r0, #0
   26e28:	beq	26e34 <Mat_VarReadNumeric5+0xbc>
   26e2c:	add	r0, sp, #8
   26e30:	bl	1c04 <Mat_uint32Swap>
   26e34:	ldr	r0, [sp, #8]
   26e38:	uxtb	r6, r0
   26e3c:	cmp	r6, #25
   26e40:	movcs	r6, #0
   26e44:	cmp	r0, #65536	; 0x10000
   26e48:	bcs	26e98 <Mat_VarReadNumeric5+0x120>
   26e4c:	ldr	r3, [r4]
   26e50:	add	r7, r7, #4
   26e54:	mov	r1, #4
   26e58:	mov	r2, #1
   26e5c:	mov	r0, r7
   26e60:	bl	18b8 <fread@plt>
   26e64:	ldr	r0, [r4, #20]
   26e68:	cmp	r0, #0
   26e6c:	beq	26e78 <Mat_VarReadNumeric5+0x100>
   26e70:	mov	r0, r7
   26e74:	bl	1c04 <Mat_uint32Swap>
   26e78:	ldr	r0, [sp, #12]
   26e7c:	mov	r7, #0
   26e80:	cmp	r0, #0
   26e84:	bne	26ea0 <Mat_VarReadNumeric5+0x128>
   26e88:	mov	r0, #0
   26e8c:	str	r0, [r5]
   26e90:	sub	sp, fp, #24
   26e94:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26e98:	lsr	r0, r0, #16
   26e9c:	mov	r7, #1
   26ea0:	ldr	r1, [r5, #48]	; 0x30
   26ea4:	cmp	r1, #1
   26ea8:	beq	26f10 <Mat_VarReadNumeric5+0x198>
   26eac:	cmp	r1, #0
   26eb0:	bne	271c8 <Mat_VarReadNumeric5+0x450>
   26eb4:	ldr	r1, [r5, #16]
   26eb8:	sub	r1, r1, #6
   26ebc:	cmp	r1, #9
   26ec0:	bhi	27048 <Mat_VarReadNumeric5+0x2d0>
   26ec4:	add	r0, pc, #4
   26ec8:	ldr	r1, [r0, r1, lsl #2]
   26ecc:	add	pc, r0, r1
   26ed0:	.word	0x00000028
   26ed4:	.word	0x000000a4
   26ed8:	.word	0x000000bc
   26edc:	.word	0x000000d4
   26ee0:	.word	0x000000ec
   26ee4:	.word	0x00000104
   26ee8:	.word	0x0000011c
   26eec:	.word	0x00000134
   26ef0:	.word	0x0000014c
   26ef4:	.word	0x00000164
   26ef8:	mov	r0, r4
   26efc:	mov	r1, r8
   26f00:	mov	r2, r6
   26f04:	mov	r3, r9
   26f08:	bl	3858 <ReadDoubleData>
   26f0c:	b	27048 <Mat_VarReadNumeric5+0x2d0>
   26f10:	ldr	r1, [r5, #16]
   26f14:	sub	r1, r1, #6
   26f18:	cmp	r1, #9
   26f1c:	bhi	27198 <Mat_VarReadNumeric5+0x420>
   26f20:	add	r0, pc, #4
   26f24:	ldr	r1, [r0, r1, lsl #2]
   26f28:	add	pc, r0, r1
   26f2c:	.word	0x00000028
   26f30:	.word	0x00000150
   26f34:	.word	0x00000170
   26f38:	.word	0x00000190
   26f3c:	.word	0x000001b0
   26f40:	.word	0x000001d0
   26f44:	.word	0x000001f0
   26f48:	.word	0x00000210
   26f4c:	.word	0x00000230
   26f50:	.word	0x00000250
   26f54:	ldr	r0, [r5, #52]	; 0x34
   26f58:	mov	r2, r8
   26f5c:	mov	r3, r6
   26f60:	ldr	r1, [r0, #12]
   26f64:	mov	r0, r4
   26f68:	str	r9, [sp]
   26f6c:	bl	5500 <ReadCompressedDoubleData>
   26f70:	b	27198 <Mat_VarReadNumeric5+0x420>
   26f74:	mov	r0, r4
   26f78:	mov	r1, r8
   26f7c:	mov	r2, r6
   26f80:	mov	r3, r9
   26f84:	bl	6f1c <ReadSingleData>
   26f88:	b	27048 <Mat_VarReadNumeric5+0x2d0>
   26f8c:	mov	r0, r4
   26f90:	mov	r1, r8
   26f94:	mov	r2, r6
   26f98:	mov	r3, r9
   26f9c:	bl	15874 <ReadInt8Data>
   26fa0:	b	27048 <Mat_VarReadNumeric5+0x2d0>
   26fa4:	mov	r0, r4
   26fa8:	mov	r1, r8
   26fac:	mov	r2, r6
   26fb0:	mov	r3, r9
   26fb4:	bl	176ac <ReadUInt8Data>
   26fb8:	b	27048 <Mat_VarReadNumeric5+0x2d0>
   26fbc:	mov	r0, r4
   26fc0:	mov	r1, r8
   26fc4:	mov	r2, r6
   26fc8:	mov	r3, r9
   26fcc:	bl	11944 <ReadInt16Data>
   26fd0:	b	27048 <Mat_VarReadNumeric5+0x2d0>
   26fd4:	mov	r0, r4
   26fd8:	mov	r1, r8
   26fdc:	mov	r2, r6
   26fe0:	mov	r3, r9
   26fe4:	bl	138dc <ReadUInt16Data>
   26fe8:	b	27048 <Mat_VarReadNumeric5+0x2d0>
   26fec:	mov	r0, r4
   26ff0:	mov	r1, r8
   26ff4:	mov	r2, r6
   26ff8:	mov	r3, r9
   26ffc:	bl	d774 <ReadInt32Data>
   27000:	b	27048 <Mat_VarReadNumeric5+0x2d0>
   27004:	mov	r0, r4
   27008:	mov	r1, r8
   2700c:	mov	r2, r6
   27010:	mov	r3, r9
   27014:	bl	f85c <ReadUInt32Data>
   27018:	b	27048 <Mat_VarReadNumeric5+0x2d0>
   2701c:	mov	r0, r4
   27020:	mov	r1, r8
   27024:	mov	r2, r6
   27028:	mov	r3, r9
   2702c:	bl	9404 <ReadInt64Data>
   27030:	b	27048 <Mat_VarReadNumeric5+0x2d0>
   27034:	mov	r0, r4
   27038:	mov	r1, r8
   2703c:	mov	r2, r6
   27040:	mov	r3, r9
   27044:	bl	b5bc <ReadUInt64Data>
   27048:	cmp	r7, #0
   2704c:	addne	r0, r0, #4
   27050:	asr	r1, r0, #31
   27054:	add	r1, r0, r1, lsr #29
   27058:	bic	r1, r1, #7
   2705c:	subs	r1, r0, r1
   27060:	beq	271c8 <Mat_VarReadNumeric5+0x450>
   27064:	ldr	r0, [r4]
   27068:	rsb	r1, r1, #8
   2706c:	mov	r2, #1
   27070:	bl	1a2c <fseek@plt>
   27074:	sub	sp, fp, #24
   27078:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2707c:	ldr	r0, [r5, #52]	; 0x34
   27080:	mov	r2, r8
   27084:	mov	r3, r6
   27088:	ldr	r1, [r0, #12]
   2708c:	mov	r0, r4
   27090:	str	r9, [sp]
   27094:	bl	8e60 <ReadCompressedSingleData>
   27098:	b	27198 <Mat_VarReadNumeric5+0x420>
   2709c:	ldr	r0, [r5, #52]	; 0x34
   270a0:	mov	r2, r8
   270a4:	mov	r3, r6
   270a8:	ldr	r1, [r0, #12]
   270ac:	mov	r0, r4
   270b0:	str	r9, [sp]
   270b4:	bl	1717c <ReadCompressedInt8Data>
   270b8:	b	27198 <Mat_VarReadNumeric5+0x420>
   270bc:	ldr	r0, [r5, #52]	; 0x34
   270c0:	mov	r2, r8
   270c4:	mov	r3, r6
   270c8:	ldr	r1, [r0, #12]
   270cc:	mov	r0, r4
   270d0:	str	r9, [sp]
   270d4:	bl	18fb4 <ReadCompressedUInt8Data>
   270d8:	b	27198 <Mat_VarReadNumeric5+0x420>
   270dc:	ldr	r0, [r5, #52]	; 0x34
   270e0:	mov	r2, r8
   270e4:	mov	r3, r6
   270e8:	ldr	r1, [r0, #12]
   270ec:	mov	r0, r4
   270f0:	str	r9, [sp]
   270f4:	bl	133ac <ReadCompressedInt16Data>
   270f8:	b	27198 <Mat_VarReadNumeric5+0x420>
   270fc:	ldr	r0, [r5, #52]	; 0x34
   27100:	mov	r2, r8
   27104:	mov	r3, r6
   27108:	ldr	r1, [r0, #12]
   2710c:	mov	r0, r4
   27110:	str	r9, [sp]
   27114:	bl	15344 <ReadCompressedUInt16Data>
   27118:	b	27198 <Mat_VarReadNumeric5+0x420>
   2711c:	ldr	r0, [r5, #52]	; 0x34
   27120:	mov	r2, r8
   27124:	mov	r3, r6
   27128:	ldr	r1, [r0, #12]
   2712c:	mov	r0, r4
   27130:	str	r9, [sp]
   27134:	bl	f32c <ReadCompressedInt32Data>
   27138:	b	27198 <Mat_VarReadNumeric5+0x420>
   2713c:	ldr	r0, [r5, #52]	; 0x34
   27140:	mov	r2, r8
   27144:	mov	r3, r6
   27148:	ldr	r1, [r0, #12]
   2714c:	mov	r0, r4
   27150:	str	r9, [sp]
   27154:	bl	11414 <ReadCompressedUInt32Data>
   27158:	b	27198 <Mat_VarReadNumeric5+0x420>
   2715c:	ldr	r0, [r5, #52]	; 0x34
   27160:	mov	r2, r8
   27164:	mov	r3, r6
   27168:	ldr	r1, [r0, #12]
   2716c:	mov	r0, r4
   27170:	str	r9, [sp]
   27174:	bl	b01c <ReadCompressedInt64Data>
   27178:	b	27198 <Mat_VarReadNumeric5+0x420>
   2717c:	ldr	r0, [r5, #52]	; 0x34
   27180:	mov	r2, r8
   27184:	mov	r3, r6
   27188:	ldr	r1, [r0, #12]
   2718c:	mov	r0, r4
   27190:	str	r9, [sp]
   27194:	bl	d1d4 <ReadCompressedUInt64Data>
   27198:	cmp	r7, #0
   2719c:	addne	r0, r0, #4
   271a0:	asr	r1, r0, #31
   271a4:	add	r1, r0, r1, lsr #29
   271a8:	bic	r1, r1, #7
   271ac:	subs	r0, r0, r1
   271b0:	beq	271c8 <Mat_VarReadNumeric5+0x450>
   271b4:	ldr	r1, [r5, #52]	; 0x34
   271b8:	rsb	r2, r0, #8
   271bc:	mov	r0, r4
   271c0:	ldr	r1, [r1, #12]
   271c4:	bl	240c <InflateSkip>
   271c8:	sub	sp, fp, #24
   271cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000271d0 <Mat_VarReadData5>:
   271d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   271d4:	add	fp, sp, #28
   271d8:	sub	sp, sp, #92	; 0x5c
   271dc:	mov	r4, r1
   271e0:	ldr	r1, [r1, #52]	; 0x34
   271e4:	mov	r8, r0
   271e8:	ldr	r0, [r0]
   271ec:	str	r2, [sp, #24]
   271f0:	mov	r2, #0
   271f4:	mov	r9, r3
   271f8:	mov	r6, #0
   271fc:	ldr	r1, [r1]
   27200:	bl	1a2c <fseek@plt>
   27204:	ldr	r0, [r4, #48]	; 0x30
   27208:	ldr	sl, [fp, #12]
   2720c:	ldr	r7, [fp, #8]
   27210:	cmp	r0, #1
   27214:	beq	27290 <Mat_VarReadData5+0xc0>
   27218:	cmp	r0, #0
   2721c:	bne	27404 <Mat_VarReadData5+0x234>
   27220:	ldr	r3, [r8]
   27224:	sub	r5, fp, #36	; 0x24
   27228:	mov	r1, #4
   2722c:	mov	r2, #2
   27230:	mov	r0, r5
   27234:	bl	18b8 <fread@plt>
   27238:	ldr	r0, [r8, #20]
   2723c:	cmp	r0, #0
   27240:	beq	27254 <Mat_VarReadData5+0x84>
   27244:	mov	r0, r5
   27248:	bl	1bf0 <Mat_int32Swap>
   2724c:	add	r0, r5, #4
   27250:	bl	1bf0 <Mat_int32Swap>
   27254:	ldr	r0, [fp, #-36]	; 0xffffffdc
   27258:	uxtb	r1, r0
   2725c:	cmp	r1, #25
   27260:	movcs	r1, #0
   27264:	cmp	r0, #65536	; 0x10000
   27268:	str	r1, [r4, #8]
   2726c:	bcc	273fc <Mat_VarReadData5+0x22c>
   27270:	ldr	r0, [r8]
   27274:	mvn	r1, #3
   27278:	mov	r2, #1
   2727c:	bl	1a2c <fseek@plt>
   27280:	ldr	r0, [fp, #-36]	; 0xffffffdc
   27284:	mov	r1, #4
   27288:	add	r6, r1, r0, asr #16
   2728c:	b	27404 <Mat_VarReadData5+0x234>
   27290:	ldr	r0, [r4, #52]	; 0x34
   27294:	ldr	r6, [r0, #16]
   27298:	cmp	r6, #0
   2729c:	beq	27320 <Mat_VarReadData5+0x150>
   272a0:	ldr	r0, [r4, #20]
   272a4:	cmp	r0, #0
   272a8:	beq	27350 <Mat_VarReadData5+0x180>
   272ac:	ldr	r0, [sp, #24]
   272b0:	ldr	r5, [r4, #32]
   272b4:	ldr	r1, [r0]
   272b8:	ldr	r0, [r6]
   272bc:	ldm	r4, {ip, lr}
   272c0:	ldr	r3, [r4, #8]
   272c4:	ldr	r2, [r4, #16]
   272c8:	stm	sp, {r5, r9}
   272cc:	add	r5, sp, #8
   272d0:	stm	r5, {r7, sl, lr}
   272d4:	str	ip, [sp, #20]
   272d8:	bl	279c4 <GetDataSlab>
   272dc:	mov	r5, r0
   272e0:	cmp	r0, #0
   272e4:	bne	279ac <Mat_VarReadData5+0x7dc>
   272e8:	ldr	r0, [sp, #24]
   272ec:	mov	ip, r7
   272f0:	ldr	r7, [r4, #32]
   272f4:	ldr	r5, [r4, #4]
   272f8:	ldr	r3, [r4, #8]
   272fc:	ldr	r2, [r4, #16]
   27300:	ldr	r1, [r0, #4]
   27304:	ldr	r0, [r6, #4]
   27308:	ldr	r6, [r4]
   2730c:	stm	sp, {r7, r9, ip}
   27310:	str	sl, [sp, #12]
   27314:	str	r5, [sp, #16]
   27318:	str	r6, [sp, #20]
   2731c:	b	2737c <Mat_VarReadData5+0x1ac>
   27320:	ldr	r1, [r0, #12]
   27324:	add	r0, sp, #28
   27328:	bl	1948 <inflateCopy@plt>
   2732c:	cmp	r0, #0
   27330:	beq	27388 <Mat_VarReadData5+0x1b8>
   27334:	bl	1888 <zError@plt>
   27338:	mov	r1, r0
   2733c:	ldr	r0, [pc, #1652]	; 279b8 <Mat_VarReadData5+0x7e8>
   27340:	add	r0, pc, r0
   27344:	bl	19b4 <Mat_Critical@plt>
   27348:	mvn	r5, #0
   2734c:	b	279ac <Mat_VarReadData5+0x7dc>
   27350:	ldr	r0, [r4, #32]
   27354:	ldm	r4, {r1, r5}
   27358:	ldr	r3, [r4, #8]
   2735c:	ldr	r2, [r4, #16]
   27360:	stm	sp, {r0, r9}
   27364:	str	r1, [sp, #20]
   27368:	mov	r0, r6
   2736c:	str	r7, [sp, #8]
   27370:	str	sl, [sp, #12]
   27374:	str	r5, [sp, #16]
   27378:	ldr	r1, [sp, #24]
   2737c:	bl	279c4 <GetDataSlab>
   27380:	mov	r5, r0
   27384:	b	279ac <Mat_VarReadData5+0x7dc>
   27388:	sub	r5, fp, #36	; 0x24
   2738c:	mov	r6, #0
   27390:	add	r1, sp, #28
   27394:	mov	r0, r8
   27398:	mov	r2, r5
   2739c:	str	r6, [sp, #32]
   273a0:	bl	3188 <InflateDataType>
   273a4:	ldr	r0, [r8, #20]
   273a8:	cmp	r0, #0
   273ac:	beq	273b8 <Mat_VarReadData5+0x1e8>
   273b0:	sub	r0, fp, #36	; 0x24
   273b4:	bl	1bf0 <Mat_int32Swap>
   273b8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   273bc:	uxtb	r1, r0
   273c0:	cmp	r1, #25
   273c4:	movcs	r1, r6
   273c8:	cmp	r6, r0, lsr #16
   273cc:	str	r1, [r4, #8]
   273d0:	bne	27284 <Mat_VarReadData5+0xb4>
   273d4:	add	r5, r5, #4
   273d8:	add	r1, sp, #28
   273dc:	mov	r0, r8
   273e0:	mov	r2, r5
   273e4:	bl	3188 <InflateDataType>
   273e8:	ldr	r0, [r8, #20]
   273ec:	cmp	r0, #0
   273f0:	beq	273fc <Mat_VarReadData5+0x22c>
   273f4:	mov	r0, r5
   273f8:	bl	1bf0 <Mat_int32Swap>
   273fc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   27400:	add	r6, r0, #8
   27404:	asr	r0, r6, #31
   27408:	add	r0, r6, r0, lsr #29
   2740c:	bic	r0, r0, #7
   27410:	subs	r0, r6, r0
   27414:	rsb	r0, r0, #8
   27418:	addne	r6, r6, r0
   2741c:	ldr	r0, [r4, #4]
   27420:	cmp	r0, #2
   27424:	bne	2756c <Mat_VarReadData5+0x39c>
   27428:	ldr	r2, [sl]
   2742c:	ldr	r0, [r9]
   27430:	ldr	r1, [r7]
   27434:	mov	r5, #1
   27438:	sub	r2, r2, #1
   2743c:	mla	r0, r2, r1, r0
   27440:	add	r1, r0, #1
   27444:	ldr	r0, [r4, #32]
   27448:	ldr	r2, [r0]
   2744c:	cmp	r1, r2
   27450:	bhi	279ac <Mat_VarReadData5+0x7dc>
   27454:	ldr	r3, [sl, #4]
   27458:	ldr	r1, [r9, #4]
   2745c:	ldr	r2, [r7, #4]
   27460:	sub	r3, r3, #1
   27464:	mla	r1, r3, r2, r1
   27468:	ldr	r2, [r0, #4]
   2746c:	add	r1, r1, #1
   27470:	cmp	r1, r2
   27474:	bhi	279ac <Mat_VarReadData5+0x7dc>
   27478:	ldr	r1, [r4, #48]	; 0x30
   2747c:	cmp	r1, #1
   27480:	beq	277fc <Mat_VarReadData5+0x62c>
   27484:	cmp	r1, #0
   27488:	bne	27990 <Mat_VarReadData5+0x7c0>
   2748c:	ldr	r1, [r4, #20]
   27490:	cmp	r1, #0
   27494:	beq	27930 <Mat_VarReadData5+0x760>
   27498:	ldr	r1, [sp, #24]
   2749c:	ldr	r3, [r4, #8]
   274a0:	ldr	r2, [r4, #16]
   274a4:	ldr	r1, [r1]
   274a8:	stm	sp, {r0, r9}
   274ac:	mov	r0, r8
   274b0:	str	r7, [sp, #8]
   274b4:	str	sl, [sp, #12]
   274b8:	bl	22214 <ReadDataSlab2>
   274bc:	ldr	r0, [r4, #52]	; 0x34
   274c0:	mov	r2, #0
   274c4:	mov	r5, #0
   274c8:	ldr	r0, [r0]
   274cc:	add	r1, r0, r6
   274d0:	ldr	r0, [r8]
   274d4:	bl	1a2c <fseek@plt>
   274d8:	ldr	r3, [r8]
   274dc:	sub	r6, fp, #36	; 0x24
   274e0:	mov	r1, #4
   274e4:	mov	r2, #2
   274e8:	mov	r0, r6
   274ec:	bl	18b8 <fread@plt>
   274f0:	ldr	r0, [r8, #20]
   274f4:	cmp	r0, #0
   274f8:	beq	2750c <Mat_VarReadData5+0x33c>
   274fc:	mov	r0, r6
   27500:	bl	1bf0 <Mat_int32Swap>
   27504:	add	r0, r6, #4
   27508:	bl	1bf0 <Mat_int32Swap>
   2750c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   27510:	uxtb	r1, r0
   27514:	cmp	r1, #25
   27518:	movcc	r5, r1
   2751c:	cmp	r0, #65536	; 0x10000
   27520:	str	r5, [r4, #8]
   27524:	bcc	2753c <Mat_VarReadData5+0x36c>
   27528:	ldr	r0, [r8]
   2752c:	mvn	r1, #3
   27530:	mov	r2, #1
   27534:	bl	1a2c <fseek@plt>
   27538:	ldr	r5, [r4, #8]
   2753c:	ldr	r0, [sp, #24]
   27540:	ldr	r2, [r4, #16]
   27544:	mov	r3, r5
   27548:	ldr	r1, [r0, #4]
   2754c:	ldr	r0, [r4, #32]
   27550:	stm	sp, {r0, r9}
   27554:	ldr	r0, [fp, #8]
   27558:	str	sl, [sp, #12]
   2755c:	str	r0, [sp, #8]
   27560:	mov	r0, r8
   27564:	bl	22214 <ReadDataSlab2>
   27568:	b	27990 <Mat_VarReadData5+0x7c0>
   2756c:	ldr	r1, [r4, #48]	; 0x30
   27570:	cmp	r1, #1
   27574:	beq	27668 <Mat_VarReadData5+0x498>
   27578:	cmp	r1, #0
   2757c:	bne	27990 <Mat_VarReadData5+0x7c0>
   27580:	ldr	r1, [r4, #20]
   27584:	cmp	r1, #0
   27588:	beq	277a4 <Mat_VarReadData5+0x5d4>
   2758c:	ldr	r1, [sp, #24]
   27590:	ldr	r5, [r4, #32]
   27594:	ldr	r3, [r4, #8]
   27598:	ldr	r2, [r4, #16]
   2759c:	ldr	r1, [r1]
   275a0:	stm	sp, {r0, r5, r9}
   275a4:	mov	r0, r8
   275a8:	str	r7, [sp, #12]
   275ac:	str	sl, [sp, #16]
   275b0:	bl	1976c <ReadDataSlabN>
   275b4:	ldr	r0, [r4, #52]	; 0x34
   275b8:	mov	r2, #0
   275bc:	mov	r5, #0
   275c0:	ldr	r0, [r0]
   275c4:	add	r1, r0, r6
   275c8:	ldr	r0, [r8]
   275cc:	bl	1a2c <fseek@plt>
   275d0:	ldr	r3, [r8]
   275d4:	sub	r6, fp, #36	; 0x24
   275d8:	mov	r1, #4
   275dc:	mov	r2, #2
   275e0:	mov	r0, r6
   275e4:	bl	18b8 <fread@plt>
   275e8:	ldr	r0, [r8, #20]
   275ec:	cmp	r0, #0
   275f0:	beq	27604 <Mat_VarReadData5+0x434>
   275f4:	mov	r0, r6
   275f8:	bl	1bf0 <Mat_int32Swap>
   275fc:	add	r0, r6, #4
   27600:	bl	1bf0 <Mat_int32Swap>
   27604:	ldr	r0, [fp, #-36]	; 0xffffffdc
   27608:	uxtb	r1, r0
   2760c:	cmp	r1, #25
   27610:	movcc	r5, r1
   27614:	cmp	r0, #65536	; 0x10000
   27618:	str	r5, [r4, #8]
   2761c:	bcc	27634 <Mat_VarReadData5+0x464>
   27620:	ldr	r0, [r8]
   27624:	mvn	r1, #3
   27628:	mov	r2, #1
   2762c:	bl	1a2c <fseek@plt>
   27630:	ldr	r5, [r4, #8]
   27634:	ldr	r0, [sp, #24]
   27638:	ldr	r3, [r4, #32]
   2763c:	ldr	r2, [r4, #16]
   27640:	ldr	r1, [r0, #4]
   27644:	ldr	r0, [r4, #4]
   27648:	stm	sp, {r0, r3, r9}
   2764c:	ldr	r0, [fp, #8]
   27650:	mov	r3, r5
   27654:	str	sl, [sp, #16]
   27658:	str	r0, [sp, #12]
   2765c:	mov	r0, r8
   27660:	bl	1976c <ReadDataSlabN>
   27664:	b	27990 <Mat_VarReadData5+0x7c0>
   27668:	ldr	r1, [r4, #20]
   2766c:	cmp	r1, #0
   27670:	beq	277cc <Mat_VarReadData5+0x5fc>
   27674:	ldr	r1, [sp, #24]
   27678:	ldr	r5, [r4, #32]
   2767c:	ldr	r3, [r4, #16]
   27680:	ldr	r2, [r1]
   27684:	ldr	r1, [r4, #8]
   27688:	str	r1, [sp]
   2768c:	stmib	sp, {r0, r5, r9}
   27690:	add	r5, sp, #28
   27694:	mov	r0, r8
   27698:	str	r7, [sp, #16]
   2769c:	str	sl, [sp, #20]
   276a0:	mov	r1, r5
   276a4:	bl	1d734 <ReadCompressedDataSlabN>
   276a8:	ldr	r1, [r4, #52]	; 0x34
   276ac:	ldr	r0, [r8]
   276b0:	mov	r2, #0
   276b4:	mov	r7, #0
   276b8:	ldr	r1, [r1]
   276bc:	bl	1a2c <fseek@plt>
   276c0:	mov	r0, r5
   276c4:	bl	193c <inflateEnd@plt>
   276c8:	ldr	r0, [r4, #52]	; 0x34
   276cc:	ldr	r1, [r0, #12]
   276d0:	mov	r0, r5
   276d4:	bl	1948 <inflateCopy@plt>
   276d8:	mov	r5, r0
   276dc:	cmp	r0, #0
   276e0:	beq	276fc <Mat_VarReadData5+0x52c>
   276e4:	mov	r0, r5
   276e8:	bl	1888 <zError@plt>
   276ec:	mov	r1, r0
   276f0:	ldr	r0, [pc, #712]	; 279c0 <Mat_VarReadData5+0x7f0>
   276f4:	add	r0, pc, r0
   276f8:	bl	19b4 <Mat_Critical@plt>
   276fc:	add	sl, sp, #28
   27700:	mov	r0, r8
   27704:	mov	r2, r6
   27708:	mov	r1, sl
   2770c:	bl	240c <InflateSkip>
   27710:	sub	r2, fp, #36	; 0x24
   27714:	mov	r0, r8
   27718:	mov	r1, sl
   2771c:	str	r7, [sp, #32]
   27720:	bl	3188 <InflateDataType>
   27724:	ldr	r0, [r8, #20]
   27728:	cmp	r0, #0
   2772c:	beq	27738 <Mat_VarReadData5+0x568>
   27730:	sub	r0, fp, #36	; 0x24
   27734:	bl	1bf0 <Mat_int32Swap>
   27738:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2773c:	ldr	sl, [fp, #12]
   27740:	mov	r2, #0
   27744:	uxtb	r0, r1
   27748:	cmp	r0, #25
   2774c:	movcs	r0, r2
   27750:	cmp	r2, r1, lsr #16
   27754:	str	r0, [r4, #8]
   27758:	bne	27770 <Mat_VarReadData5+0x5a0>
   2775c:	add	r1, sp, #28
   27760:	mov	r0, r8
   27764:	mov	r2, #4
   27768:	bl	240c <InflateSkip>
   2776c:	ldr	r0, [r4, #8]
   27770:	ldr	r1, [sp, #24]
   27774:	ldr	r6, [r4, #32]
   27778:	ldr	r3, [r4, #16]
   2777c:	ldr	r2, [r1, #4]
   27780:	ldr	r1, [r4, #4]
   27784:	stm	sp, {r0, r1, r6, r9}
   27788:	ldr	r0, [fp, #8]
   2778c:	add	r1, sp, #28
   27790:	str	sl, [sp, #20]
   27794:	str	r0, [sp, #16]
   27798:	mov	r0, r8
   2779c:	bl	1d734 <ReadCompressedDataSlabN>
   277a0:	b	27980 <Mat_VarReadData5+0x7b0>
   277a4:	ldr	r1, [r4, #32]
   277a8:	ldr	r3, [r4, #8]
   277ac:	ldr	r2, [r4, #16]
   277b0:	stm	sp, {r0, r1, r9}
   277b4:	mov	r0, r8
   277b8:	str	r7, [sp, #12]
   277bc:	str	sl, [sp, #16]
   277c0:	ldr	r1, [sp, #24]
   277c4:	bl	1976c <ReadDataSlabN>
   277c8:	b	27990 <Mat_VarReadData5+0x7c0>
   277cc:	ldr	r1, [r4, #8]
   277d0:	ldr	r2, [r4, #32]
   277d4:	ldr	r3, [r4, #16]
   277d8:	str	r1, [sp]
   277dc:	stmib	sp, {r0, r2, r9}
   277e0:	add	r1, sp, #28
   277e4:	mov	r0, r8
   277e8:	str	r7, [sp, #16]
   277ec:	str	sl, [sp, #20]
   277f0:	ldr	r2, [sp, #24]
   277f4:	bl	1d734 <ReadCompressedDataSlabN>
   277f8:	b	2797c <Mat_VarReadData5+0x7ac>
   277fc:	ldr	r1, [r4, #20]
   27800:	cmp	r1, #0
   27804:	beq	27954 <Mat_VarReadData5+0x784>
   27808:	ldr	r1, [sp, #24]
   2780c:	ldr	r3, [r4, #16]
   27810:	add	r5, sp, #28
   27814:	ldr	r2, [r1]
   27818:	ldr	r1, [r4, #8]
   2781c:	str	r1, [sp]
   27820:	stmib	sp, {r0, r9}
   27824:	mov	r0, r8
   27828:	mov	r1, r5
   2782c:	str	r7, [sp, #12]
   27830:	str	sl, [sp, #16]
   27834:	bl	237fc <ReadCompressedDataSlab2>
   27838:	ldr	r1, [r4, #52]	; 0x34
   2783c:	ldr	r0, [r8]
   27840:	mov	r2, #0
   27844:	mov	r7, #0
   27848:	ldr	r1, [r1]
   2784c:	bl	1a2c <fseek@plt>
   27850:	mov	r0, r5
   27854:	bl	193c <inflateEnd@plt>
   27858:	ldr	r0, [r4, #52]	; 0x34
   2785c:	ldr	r1, [r0, #12]
   27860:	mov	r0, r5
   27864:	bl	1948 <inflateCopy@plt>
   27868:	mov	r5, r0
   2786c:	cmp	r0, #0
   27870:	beq	2788c <Mat_VarReadData5+0x6bc>
   27874:	mov	r0, r5
   27878:	bl	1888 <zError@plt>
   2787c:	mov	r1, r0
   27880:	ldr	r0, [pc, #308]	; 279bc <Mat_VarReadData5+0x7ec>
   27884:	add	r0, pc, r0
   27888:	bl	19b4 <Mat_Critical@plt>
   2788c:	add	sl, sp, #28
   27890:	mov	r0, r8
   27894:	mov	r2, r6
   27898:	mov	r1, sl
   2789c:	bl	240c <InflateSkip>
   278a0:	sub	r2, fp, #36	; 0x24
   278a4:	mov	r0, r8
   278a8:	mov	r1, sl
   278ac:	str	r7, [sp, #32]
   278b0:	bl	3188 <InflateDataType>
   278b4:	ldr	r0, [r8, #20]
   278b8:	cmp	r0, #0
   278bc:	beq	278c8 <Mat_VarReadData5+0x6f8>
   278c0:	sub	r0, fp, #36	; 0x24
   278c4:	bl	1bf0 <Mat_int32Swap>
   278c8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   278cc:	ldr	r6, [fp, #12]
   278d0:	mov	r2, #0
   278d4:	uxtb	r0, r1
   278d8:	cmp	r0, #25
   278dc:	movcs	r0, r2
   278e0:	cmp	r2, r1, lsr #16
   278e4:	str	r0, [r4, #8]
   278e8:	bne	27900 <Mat_VarReadData5+0x730>
   278ec:	add	r1, sp, #28
   278f0:	mov	r0, r8
   278f4:	mov	r2, #4
   278f8:	bl	240c <InflateSkip>
   278fc:	ldr	r0, [r4, #8]
   27900:	ldr	r1, [sp, #24]
   27904:	ldr	r3, [r4, #16]
   27908:	ldr	r2, [r1, #4]
   2790c:	ldr	r1, [r4, #32]
   27910:	stm	sp, {r0, r1, r9}
   27914:	ldr	r0, [fp, #8]
   27918:	add	r1, sp, #28
   2791c:	str	r6, [sp, #16]
   27920:	str	r0, [sp, #12]
   27924:	mov	r0, r8
   27928:	bl	237fc <ReadCompressedDataSlab2>
   2792c:	b	27980 <Mat_VarReadData5+0x7b0>
   27930:	ldr	r3, [r4, #8]
   27934:	ldr	r2, [r4, #16]
   27938:	stm	sp, {r0, r9}
   2793c:	mov	r0, r8
   27940:	str	r7, [sp, #8]
   27944:	str	sl, [sp, #12]
   27948:	ldr	r1, [sp, #24]
   2794c:	bl	22214 <ReadDataSlab2>
   27950:	b	27990 <Mat_VarReadData5+0x7c0>
   27954:	ldr	r1, [r4, #8]
   27958:	ldr	r3, [r4, #16]
   2795c:	str	r1, [sp]
   27960:	stmib	sp, {r0, r9}
   27964:	add	r1, sp, #28
   27968:	mov	r0, r8
   2796c:	str	r7, [sp, #12]
   27970:	str	sl, [sp, #16]
   27974:	ldr	r2, [sp, #24]
   27978:	bl	237fc <ReadCompressedDataSlab2>
   2797c:	mov	r5, #0
   27980:	add	r0, sp, #28
   27984:	bl	193c <inflateEnd@plt>
   27988:	cmp	r5, #0
   2798c:	bne	279ac <Mat_VarReadData5+0x7dc>
   27990:	ldr	r0, [r4, #16]
   27994:	bl	53804 <ClassType2DataType>
   27998:	str	r0, [r4, #8]
   2799c:	ldr	r0, [r4, #16]
   279a0:	bl	1a08 <Mat_SizeOfClass@plt>
   279a4:	mov	r5, #0
   279a8:	str	r0, [r4, #12]
   279ac:	mov	r0, r5
   279b0:	sub	sp, fp, #28
   279b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   279b8:	.word	0x000318df
   279bc:	.word	0x0003139b
   279c0:	.word	0x0003152b

000279c4 <GetDataSlab>:
   279c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   279c8:	add	fp, sp, #28
   279cc:	sub	sp, sp, #4
   279d0:	vpush	{d8-d9}
   279d4:	sub	sp, sp, #432	; 0x1b0
   279d8:	mov	r6, r3
   279dc:	cmp	r2, #6
   279e0:	mov	ip, r1
   279e4:	mov	lr, r0
   279e8:	cmpeq	r6, #9
   279ec:	beq	27a60 <GetDataSlab+0x9c>
   279f0:	cmp	r2, #7
   279f4:	cmpeq	r6, #7
   279f8:	beq	27a60 <GetDataSlab+0x9c>
   279fc:	cmp	r2, #10
   27a00:	cmpeq	r6, #3
   27a04:	beq	27a60 <GetDataSlab+0x9c>
   27a08:	cmp	r2, #12
   27a0c:	cmpeq	r6, #5
   27a10:	beq	27a60 <GetDataSlab+0x9c>
   27a14:	cmp	r2, #14
   27a18:	cmpeq	r6, #12
   27a1c:	beq	27a60 <GetDataSlab+0x9c>
   27a20:	cmp	r2, #8
   27a24:	cmpeq	r6, #1
   27a28:	beq	27a60 <GetDataSlab+0x9c>
   27a2c:	cmp	r2, #11
   27a30:	cmpeq	r6, #4
   27a34:	beq	27a60 <GetDataSlab+0x9c>
   27a38:	cmp	r2, #13
   27a3c:	cmpeq	r6, #6
   27a40:	beq	27a60 <GetDataSlab+0x9c>
   27a44:	cmp	r2, #15
   27a48:	cmpeq	r6, #13
   27a4c:	beq	27a60 <GetDataSlab+0x9c>
   27a50:	cmp	r2, #9
   27a54:	mov	r9, #0
   27a58:	cmpeq	r6, #2
   27a5c:	bne	27a64 <GetDataSlab+0xa0>
   27a60:	mov	r9, #1
   27a64:	add	sl, fp, #12
   27a68:	ldr	r0, [fp, #24]
   27a6c:	ldr	r5, [fp, #8]
   27a70:	ldm	sl, {r4, r8, sl}
   27a74:	str	ip, [sp, #60]	; 0x3c
   27a78:	cmp	r0, #2
   27a7c:	mov	r0, ip
   27a80:	bne	27d2c <GetDataSlab+0x368>
   27a84:	ldr	r0, [sl]
   27a88:	ldr	r7, [r4]
   27a8c:	ldr	r3, [r8]
   27a90:	mov	ip, r5
   27a94:	str	r6, [sp, #40]	; 0x28
   27a98:	ldr	r6, [ip]
   27a9c:	sub	r5, r0, #1
   27aa0:	str	r0, [sp, #56]	; 0x38
   27aa4:	mla	r0, r5, r3, r7
   27aa8:	str	r6, [sp, #44]	; 0x2c
   27aac:	add	r1, r0, #1
   27ab0:	mov	r0, #1
   27ab4:	cmp	r1, r6
   27ab8:	bhi	47ffc <GetDataSlab+0x20638>
   27abc:	str	r7, [sp, #24]
   27ac0:	str	r3, [sp, #32]
   27ac4:	mov	r3, sl
   27ac8:	ldr	r1, [sl, #4]!
   27acc:	mov	r7, r8
   27ad0:	str	lr, [sp, #48]	; 0x30
   27ad4:	ldr	r4, [r4, #4]
   27ad8:	str	r5, [sp, #20]
   27adc:	ldr	r5, [ip, #4]
   27ae0:	ldr	lr, [r7, #4]!
   27ae4:	sub	r6, r1, #1
   27ae8:	str	sl, [sp, #36]	; 0x24
   27aec:	str	r1, [sp, #52]	; 0x34
   27af0:	mla	r6, r6, lr, r4
   27af4:	str	lr, [sp, #28]
   27af8:	add	r6, r6, #1
   27afc:	cmp	r6, r5
   27b00:	bhi	47ffc <GetDataSlab+0x20638>
   27b04:	ldr	r1, [sp, #32]
   27b08:	cmp	r1, #1
   27b0c:	ldreq	r5, [sp, #56]	; 0x38
   27b10:	ldreq	r1, [sp, #44]	; 0x2c
   27b14:	cmpeq	r5, r1
   27b18:	beq	2a40c <GetDataSlab+0x2a48>
   27b1c:	str	r4, [sp, #16]
   27b20:	ldr	r4, [sp, #44]	; 0x2c
   27b24:	ldr	ip, [sp, #28]
   27b28:	sub	r2, r2, #6
   27b2c:	cmp	r2, #9
   27b30:	bhi	47ffc <GetDataSlab+0x20638>
   27b34:	add	r0, pc, #8
   27b38:	mov	lr, r7
   27b3c:	ldr	r2, [r0, r2, lsl #2]
   27b40:	add	pc, r0, r2
   27b44:	.word	0x00000028
   27b48:	.word	0x000028f4
   27b4c:	.word	0x00002ab4
   27b50:	.word	0x00002ba8
   27b54:	.word	0x00002c9c
   27b58:	.word	0x00002e58
   27b5c:	.word	0x00003014
   27b60:	.word	0x0000310c
   27b64:	.word	0x00003204
   27b68:	.word	0x000033c0
   27b6c:	ldr	r0, [sp, #40]	; 0x28
   27b70:	sub	r1, r0, #1
   27b74:	mov	r0, #1
   27b78:	cmp	r1, #11
   27b7c:	bhi	488bc <GetDataSlab+0x20ef8>
   27b80:	add	r2, pc, #20
   27b84:	ldr	r3, [sp, #48]	; 0x30
   27b88:	ldr	r5, [sp, #32]
   27b8c:	ldr	r6, [sp, #24]
   27b90:	ldr	r7, [sp, #20]
   27b94:	ldr	r1, [r2, r1, lsl #2]
   27b98:	add	pc, r2, r1
   27b9c:	.word	0x00000030
   27ba0:	.word	0x00020470
   27ba4:	.word	0x000205d0
   27ba8:	.word	0x000206d8
   27bac:	.word	0x000207e0
   27bb0:	.word	0x000208cc
   27bb4:	.word	0x000209b8
   27bb8:	.word	0x00020d20
   27bbc:	.word	0x00020aa4
   27bc0:	.word	0x00020d20
   27bc4:	.word	0x00020d20
   27bc8:	.word	0x00020bd8
   27bcc:	ldr	r0, [sp, #52]	; 0x34
   27bd0:	cmp	r0, #1
   27bd4:	blt	2a430 <GetDataSlab+0x2a6c>
   27bd8:	ldr	r2, [sp, #16]
   27bdc:	ldr	r1, [sp, #56]	; 0x38
   27be0:	mov	lr, ip
   27be4:	mul	r9, lr, r4
   27be8:	mla	r0, r2, r4, r6
   27bec:	cmp	r1, #1
   27bf0:	bic	sl, r1, #1
   27bf4:	add	ip, r3, r0
   27bf8:	str	r0, [sp, #36]	; 0x24
   27bfc:	add	r0, r1, r6
   27c00:	movwne	r7, #1
   27c04:	mov	r3, #0
   27c08:	add	r6, sp, #72	; 0x48
   27c0c:	mla	r0, r2, r4, r0
   27c10:	lsl	r4, r5, #1
   27c14:	str	r0, [sp, #40]	; 0x28
   27c18:	sub	r0, r5, #1
   27c1c:	clz	r0, r0
   27c20:	lsr	r0, r0, #5
   27c24:	and	r8, r7, r0
   27c28:	ldr	r0, [sp, #56]	; 0x38
   27c2c:	cmp	r0, #1
   27c30:	blt	27d10 <GetDataSlab+0x34c>
   27c34:	mov	r1, #0
   27c38:	cmp	r8, #0
   27c3c:	beq	27cd0 <GetDataSlab+0x30c>
   27c40:	ldr	r0, [sp, #40]	; 0x28
   27c44:	ldr	r2, [sp, #48]	; 0x30
   27c48:	ldr	r7, [sp, #32]
   27c4c:	mla	r0, r9, r3, r0
   27c50:	add	r0, r2, r0
   27c54:	ldr	r2, [sp, #60]	; 0x3c
   27c58:	cmp	r0, r2
   27c5c:	bls	27c84 <GetDataSlab+0x2c0>
   27c60:	ldr	r0, [sp, #36]	; 0x24
   27c64:	ldr	r2, [sp, #48]	; 0x30
   27c68:	mla	r0, r9, r3, r0
   27c6c:	add	r5, r2, r0
   27c70:	ldr	r0, [sp, #60]	; 0x3c
   27c74:	ldr	r2, [sp, #56]	; 0x38
   27c78:	add	r2, r0, r2, lsl #3
   27c7c:	cmp	r5, r2
   27c80:	bcc	27cd8 <GetDataSlab+0x314>
   27c84:	ldr	lr, [sp, #60]	; 0x3c
   27c88:	mov	r1, sl
   27c8c:	mov	r2, ip
   27c90:	add	r0, lr, sl, lsl #3
   27c94:	ldrh	r5, [r2], r4
   27c98:	subs	r1, r1, #2
   27c9c:	strh	r5, [sp, #72]	; 0x48
   27ca0:	vld1.16	{d16[0]}, [r6 :16]
   27ca4:	vmovl.s8	q8, d16
   27ca8:	vmovl.s16	q0, d16
   27cac:	vcvt.f64.s32	d17, s1
   27cb0:	vcvt.f64.s32	d16, s0
   27cb4:	vst1.64	{d16-d17}, [lr]!
   27cb8:	bne	27c94 <GetDataSlab+0x2d0>
   27cbc:	ldr	r1, [sp, #56]	; 0x38
   27cc0:	cmp	r1, sl
   27cc4:	mov	r1, sl
   27cc8:	bne	27cd8 <GetDataSlab+0x314>
   27ccc:	b	27d00 <GetDataSlab+0x33c>
   27cd0:	ldr	r0, [sp, #60]	; 0x3c
   27cd4:	ldr	r7, [sp, #32]
   27cd8:	ldr	r5, [sp, #56]	; 0x38
   27cdc:	mla	r2, r7, r1, ip
   27ce0:	sub	r1, r5, r1
   27ce4:	ldrsb	r5, [r2], r7
   27ce8:	subs	r1, r1, #1
   27cec:	vmov	s0, r5
   27cf0:	vcvt.f64.s32	d16, s0
   27cf4:	vstr	d16, [r0]
   27cf8:	add	r0, r0, #8
   27cfc:	bne	27ce4 <GetDataSlab+0x320>
   27d00:	ldr	r0, [sp, #60]	; 0x3c
   27d04:	ldr	r1, [sp, #56]	; 0x38
   27d08:	add	r0, r0, r1, lsl #3
   27d0c:	str	r0, [sp, #60]	; 0x3c
   27d10:	ldr	r1, [sp, #52]	; 0x34
   27d14:	add	r3, r3, #1
   27d18:	add	ip, ip, r9
   27d1c:	mov	r0, #0
   27d20:	cmp	r3, r1
   27d24:	bne	27c28 <GetDataSlab+0x264>
   27d28:	b	47ffc <GetDataSlab+0x20638>
   27d2c:	sub	r7, fp, #96	; 0x60
   27d30:	vmov.i32	q8, #0	; 0x00000000
   27d34:	mov	r0, #36	; 0x24
   27d38:	mov	r3, #0
   27d3c:	mov	r5, lr
   27d40:	sub	lr, fp, #176	; 0xb0
   27d44:	mov	r1, r7
   27d48:	str	r3, [fp, #-64]	; 0xffffffc0
   27d4c:	str	r3, [fp, #-104]	; 0xffffff98
   27d50:	str	r3, [fp, #-144]	; 0xffffff70
   27d54:	vst1.64	{d16-d17}, [r1], r0
   27d58:	str	r3, [r1]
   27d5c:	add	r1, r7, #16
   27d60:	sub	r7, fp, #136	; 0x88
   27d64:	vst1.64	{d16-d17}, [r1]
   27d68:	add	r1, r7, #16
   27d6c:	vst1.64	{d16-d17}, [r1]
   27d70:	mov	r1, r7
   27d74:	vst1.64	{d16-d17}, [r1], r0
   27d78:	str	r3, [r1]
   27d7c:	add	r1, lr, #16
   27d80:	vst1.64	{d16-d17}, [r1]
   27d84:	mov	r1, lr
   27d88:	vst1.64	{d16-d17}, [r1], r0
   27d8c:	sub	r0, r2, #6
   27d90:	cmp	r0, #9
   27d94:	str	r3, [r1]
   27d98:	bhi	281f8 <GetDataSlab+0x834>
   27d9c:	add	r1, pc, #8
   27da0:	str	r5, [sp, #48]	; 0x30
   27da4:	ldr	r0, [r1, r0, lsl #2]
   27da8:	add	pc, r1, r0
   27dac:	.word	0x00000028
   27db0:	.word	0x00000454
   27db4:	.word	0x0000087c
   27db8:	.word	0x00000be4
   27dbc:	.word	0x00000f4c
   27dc0:	.word	0x00001358
   27dc4:	.word	0x00001764
   27dc8:	.word	0x00001ad0
   27dcc:	.word	0x00001e3c
   27dd0:	.word	0x00002258
   27dd4:	sub	r1, r6, #1
   27dd8:	mov	r0, #1
   27ddc:	cmp	r1, #11
   27de0:	bhi	3d96c <GetDataSlab+0x15fa8>
   27de4:	add	r2, pc, #4
   27de8:	ldr	r1, [r2, r1, lsl #2]
   27dec:	add	pc, r2, r1
   27df0:	.word	0x00000030
   27df4:	.word	0x000032d0
   27df8:	.word	0x000036a8
   27dfc:	.word	0x00003a14
   27e00:	.word	0x00003d80
   27e04:	.word	0x000040ec
   27e08:	.word	0x00004458
   27e0c:	.word	0x00015b7c
   27e10:	.word	0x000047c4
   27e14:	.word	0x00015b7c
   27e18:	.word	0x00015b7c
   27e1c:	.word	0x00004b48
   27e20:	ldr	r0, [fp, #16]
   27e24:	mov	r7, lr
   27e28:	mov	r4, #0
   27e2c:	sub	lr, fp, #96	; 0x60
   27e30:	ldr	r9, [r0]
   27e34:	sub	r0, r9, #1
   27e38:	str	r0, [fp, #-96]	; 0xffffffa0
   27e3c:	ldr	r0, [fp, #8]
   27e40:	ldr	r0, [r0]
   27e44:	str	r0, [fp, #-176]	; 0xffffff50
   27e48:	str	r0, [sp, #36]	; 0x24
   27e4c:	ldr	r0, [fp, #24]
   27e50:	ldr	r1, [sl]
   27e54:	cmp	r0, #2
   27e58:	str	r1, [sp, #52]	; 0x34
   27e5c:	str	r1, [sp, #56]	; 0x38
   27e60:	blt	27fc4 <GetDataSlab+0x600>
   27e64:	ldr	r0, [fp, #8]
   27e68:	ldr	r3, [sp, #36]	; 0x24
   27e6c:	mov	r6, #1
   27e70:	mov	sl, #0
   27e74:	mvn	r8, #15
   27e78:	mov	r4, #0
   27e7c:	mov	r1, r0
   27e80:	sub	r0, r0, #4
   27e84:	mov	r2, r3
   27e88:	sub	ip, r1, #12
   27e8c:	ldr	r1, [sp, #52]	; 0x34
   27e90:	str	r1, [sp, #56]	; 0x38
   27e94:	ldr	r1, [fp, #16]
   27e98:	str	r2, [sp, #44]	; 0x2c
   27e9c:	mov	r5, sl
   27ea0:	add	r5, sl, #1
   27ea4:	cmp	r5, #4
   27ea8:	ldr	r1, [r1, r6, lsl #2]
   27eac:	str	r3, [r7, r6, lsl #2]
   27eb0:	sub	r2, r1, #1
   27eb4:	ldr	r1, [fp, #8]
   27eb8:	str	r2, [lr, r6, lsl #2]
   27ebc:	ldr	r1, [r1, r6, lsl #2]
   27ec0:	str	r1, [sp, #40]	; 0x28
   27ec4:	bcs	27ed0 <GetDataSlab+0x50c>
   27ec8:	mov	r7, r6
   27ecc:	b	27f5c <GetDataSlab+0x598>
   27ed0:	vmov.i32	q9, #1	; 0x00000001
   27ed4:	vmov.i32	q10, #1	; 0x00000001
   27ed8:	vmov.i32	q8, #1	; 0x00000001
   27edc:	bic	lr, r5, #3
   27ee0:	vmov.32	d23[1], r1
   27ee4:	bic	sl, r6, #3
   27ee8:	mov	r1, ip
   27eec:	vmov.32	d18[0], r3
   27ef0:	vmov.32	d20[0], r2
   27ef4:	sub	r7, r6, lr
   27ef8:	vorr	d16, d18, d18
   27efc:	vmov.i32	q9, #1	; 0x00000001
   27f00:	vorr	d18, d20, d20
   27f04:	vld1.32	{d20-d21}, [r1], r8
   27f08:	subs	sl, sl, #4
   27f0c:	vrev64.32	q12, q10
   27f10:	vext.8	q12, q12, q12, #8
   27f14:	vext.8	q11, q11, q12, #12
   27f18:	vmul.i32	q9, q9, q12
   27f1c:	vmul.i32	q8, q11, q8
   27f20:	vorr	q11, q12, q12
   27f24:	bne	27f04 <GetDataSlab+0x540>
   27f28:	vext.8	q11, q9, q8, #8
   27f2c:	vext.8	q12, q8, q8, #8
   27f30:	cmp	r5, lr
   27f34:	vmul.i32	q0, q9, q11
   27f38:	vmul.i32	q1, q8, q12
   27f3c:	vmul.i32	q8, q0, d0[1]
   27f40:	vmul.i32	q9, q1, d2[1]
   27f44:	vmov.32	r2, d16[0]
   27f48:	vmov.32	r3, d18[0]
   27f4c:	bne	27f58 <GetDataSlab+0x594>
   27f50:	mov	sl, r5
   27f54:	b	27f74 <GetDataSlab+0x5b0>
   27f58:	vmov.32	r1, d20[0]
   27f5c:	mov	sl, r5
   27f60:	mul	r3, r1, r3
   27f64:	ldr	r1, [r0, r7, lsl #2]
   27f68:	subs	r7, r7, #1
   27f6c:	mul	r2, r2, r1
   27f70:	bne	27f60 <GetDataSlab+0x59c>
   27f74:	ldr	r1, [fp, #12]
   27f78:	sub	r7, fp, #176	; 0xb0
   27f7c:	sub	lr, fp, #96	; 0x60
   27f80:	add	ip, ip, #4
   27f84:	str	r2, [lr, r6, lsl #2]
   27f88:	str	r3, [r7, r6, lsl #2]
   27f8c:	ldr	r2, [sp, #44]	; 0x2c
   27f90:	ldr	r1, [r1, r6, lsl #2]
   27f94:	mla	r4, r1, r2, r4
   27f98:	ldr	r1, [fp, #20]
   27f9c:	ldr	r2, [sp, #56]	; 0x38
   27fa0:	ldr	r1, [r1, r6, lsl #2]
   27fa4:	add	r6, r6, #1
   27fa8:	mul	r2, r1, r2
   27fac:	ldr	r1, [fp, #24]
   27fb0:	str	r2, [sp, #56]	; 0x38
   27fb4:	mov	r2, r3
   27fb8:	ldr	r3, [sp, #40]	; 0x28
   27fbc:	cmp	r6, r1
   27fc0:	bne	27e94 <GetDataSlab+0x4d0>
   27fc4:	ldr	r0, [sp, #48]	; 0x30
   27fc8:	cmp	r9, #1
   27fcc:	mov	r2, lr
   27fd0:	add	r5, r0, r4
   27fd4:	bne	3bbd0 <GetDataSlab+0x1420c>
   27fd8:	ldr	r0, [sp, #56]	; 0x38
   27fdc:	ldr	ip, [sp, #60]	; 0x3c
   27fe0:	ldr	r3, [sp, #52]	; 0x34
   27fe4:	ldr	r1, [fp, #20]
   27fe8:	cmp	r0, #1
   27fec:	ldr	r0, [fp, #12]
   27ff0:	blt	47ff8 <GetDataSlab+0x20634>
   27ff4:	add	sl, r0, #4
   27ff8:	sub	r0, fp, #136	; 0x88
   27ffc:	add	r8, r1, #4
   28000:	ldr	r9, [sp, #36]	; 0x24
   28004:	mov	lr, #0
   28008:	orr	r1, r0, #4
   2800c:	orr	r0, r2, #4
   28010:	str	r0, [sp, #28]
   28014:	bic	r0, r3, #1
   28018:	str	r0, [sp, #40]	; 0x28
   2801c:	lsl	r0, r3, #3
   28020:	str	r0, [sp, #44]	; 0x2c
   28024:	mov	r0, #0
   28028:	str	r0, [sp, #48]	; 0x30
   2802c:	cmp	r3, #1
   28030:	blt	2810c <GetDataSlab+0x748>
   28034:	ldr	r0, [fp, #12]
   28038:	ldr	r7, [r0]
   2803c:	mov	r0, #0
   28040:	beq	280dc <GetDataSlab+0x718>
   28044:	ldr	r2, [sp, #60]	; 0x3c
   28048:	ldr	r3, [sp, #44]	; 0x2c
   2804c:	ldr	r6, [sp, #48]	; 0x30
   28050:	mla	r2, r3, r6, r2
   28054:	ldr	r6, [sp, #52]	; 0x34
   28058:	add	r3, r5, r7
   2805c:	add	r9, r5, r6
   28060:	add	r6, r9, r7
   28064:	ldr	r9, [sp, #36]	; 0x24
   28068:	cmp	r2, r6
   2806c:	bcs	2808c <GetDataSlab+0x6c8>
   28070:	ldr	r2, [sp, #44]	; 0x2c
   28074:	ldr	r6, [sp, #48]	; 0x30
   28078:	mla	r6, r2, r6, r2
   2807c:	ldr	r2, [sp, #60]	; 0x3c
   28080:	add	r6, r2, r6
   28084:	cmp	r3, r6
   28088:	bcc	280dc <GetDataSlab+0x718>
   2808c:	ldr	r6, [sp, #40]	; 0x28
   28090:	str	r7, [sp, #32]
   28094:	mov	r0, ip
   28098:	add	r7, sp, #192	; 0xc0
   2809c:	ldrh	r2, [r3], #2
   280a0:	subs	r6, r6, #2
   280a4:	strh	r2, [r7]
   280a8:	vld1.16	{d16[0]}, [r7 :16]
   280ac:	vmovl.s8	q8, d16
   280b0:	vmovl.s16	q0, d16
   280b4:	vcvt.f64.s32	d17, s1
   280b8:	vcvt.f64.s32	d16, s0
   280bc:	vst1.64	{d16-d17}, [r0]!
   280c0:	bne	2809c <GetDataSlab+0x6d8>
   280c4:	ldr	r0, [sp, #52]	; 0x34
   280c8:	ldr	r2, [sp, #40]	; 0x28
   280cc:	ldr	r7, [sp, #32]
   280d0:	cmp	r0, r2
   280d4:	mov	r0, r2
   280d8:	beq	2810c <GetDataSlab+0x748>
   280dc:	ldr	r2, [sp, #52]	; 0x34
   280e0:	add	r6, ip, r0, lsl #3
   280e4:	sub	r3, r2, r0
   280e8:	add	r0, r0, r7
   280ec:	add	r0, r5, r0
   280f0:	ldrsb	r2, [r0], #1
   280f4:	subs	r3, r3, #1
   280f8:	vmov	s0, r2
   280fc:	vcvt.f64.s32	d16, s0
   28100:	vstr	d16, [r6]
   28104:	add	r6, r6, #8
   28108:	bne	280f0 <GetDataSlab+0x72c>
   2810c:	ldr	r0, [fp, #24]
   28110:	add	r5, r5, r9
   28114:	add	r4, r4, r9
   28118:	cmp	r0, #2
   2811c:	blt	281c8 <GetDataSlab+0x804>
   28120:	mov	r3, #0
   28124:	ldr	r2, [r1, r3, lsl #2]
   28128:	mov	r0, r3
   2812c:	add	r2, r2, #1
   28130:	str	r2, [r1, r3, lsl #2]
   28134:	ldr	r3, [r8, r3, lsl #2]
   28138:	sdiv	r6, r2, r3
   2813c:	mls	r2, r6, r3, r2
   28140:	cmp	r2, #0
   28144:	bne	281b8 <GetDataSlab+0x7f4>
   28148:	mov	r2, #0
   2814c:	sub	r7, fp, #176	; 0xb0
   28150:	str	r2, [r1, r0, lsl #2]
   28154:	add	r2, r7, r0, lsl #2
   28158:	ldr	r3, [r2, #4]
   2815c:	sdiv	r2, r4, r3
   28160:	mls	r6, r2, r3, r4
   28164:	cmp	r6, #0
   28168:	beq	28188 <GetDataSlab+0x7c4>
   2816c:	ldr	r2, [r7, r0, lsl #2]
   28170:	ldr	r7, [sl, r0, lsl #2]
   28174:	sub	r3, r3, r6
   28178:	mla	r2, r7, r2, r3
   2817c:	add	r4, r2, r4
   28180:	add	r5, r5, r2
   28184:	b	281a0 <GetDataSlab+0x7dc>
   28188:	ldr	r3, [sl, r0, lsl #2]
   2818c:	cmp	r3, #0
   28190:	subne	r2, fp, #176	; 0xb0
   28194:	ldrne	r2, [r2, r0, lsl #2]
   28198:	mlane	r4, r2, r3, r4
   2819c:	mlane	r5, r2, r3, r5
   281a0:	ldr	r2, [fp, #24]
   281a4:	add	r3, r0, #1
   281a8:	add	r0, r0, #2
   281ac:	cmp	r0, r2
   281b0:	blt	28124 <GetDataSlab+0x760>
   281b4:	b	281c8 <GetDataSlab+0x804>
   281b8:	ldr	r2, [sp, #28]
   281bc:	ldr	r0, [r2, r0, lsl #2]
   281c0:	add	r5, r5, r0
   281c4:	add	r4, r0, r4
   281c8:	ldr	r0, [sp, #44]	; 0x2c
   281cc:	ldr	r3, [sp, #52]	; 0x34
   281d0:	ldr	r2, [sp, #56]	; 0x38
   281d4:	add	ip, ip, r0
   281d8:	ldr	r0, [sp, #48]	; 0x30
   281dc:	add	lr, lr, r3
   281e0:	cmp	lr, r2
   281e4:	add	r0, r0, #1
   281e8:	str	r0, [sp, #48]	; 0x30
   281ec:	mov	r0, #0
   281f0:	blt	2802c <GetDataSlab+0x668>
   281f4:	b	47ffc <GetDataSlab+0x20638>
   281f8:	mov	r0, #1
   281fc:	b	47ffc <GetDataSlab+0x20638>
   28200:	sub	r1, r6, #1
   28204:	mov	r0, #1
   28208:	cmp	r1, #11
   2820c:	bhi	47a9c <GetDataSlab+0x200d8>
   28210:	add	r2, pc, #4
   28214:	ldr	r1, [r2, r1, lsl #2]
   28218:	add	pc, r2, r1
   2821c:	.word	0x00000030
   28220:	.word	0x00004ae4
   28224:	.word	0x00004ec0
   28228:	.word	0x00005234
   2822c:	.word	0x000055a8
   28230:	.word	0x0000591c
   28234:	.word	0x00005c90
   28238:	.word	0x0001f880
   2823c:	.word	0x0000603c
   28240:	.word	0x0001f880
   28244:	.word	0x0001f880
   28248:	.word	0x000063a8
   2824c:	ldr	r0, [fp, #16]
   28250:	mov	r1, sl
   28254:	ldr	r9, [fp, #8]
   28258:	mov	r3, #0
   2825c:	sub	r7, fp, #96	; 0x60
   28260:	ldr	sl, [r0]
   28264:	sub	r0, sl, #1
   28268:	str	r0, [fp, #-96]	; 0xffffffa0
   2826c:	ldr	r0, [r9]
   28270:	str	r0, [fp, #-176]	; 0xffffff50
   28274:	str	r0, [sp, #32]
   28278:	ldr	r0, [fp, #24]
   2827c:	ldr	r1, [r1]
   28280:	cmp	r0, #2
   28284:	str	r1, [sp, #40]	; 0x28
   28288:	str	r1, [sp, #52]	; 0x34
   2828c:	blt	283f0 <GetDataSlab+0xa2c>
   28290:	mov	r1, #0
   28294:	ldr	r2, [sp, #32]
   28298:	mov	r6, lr
   2829c:	sub	r0, r9, #4
   282a0:	sub	ip, r9, #12
   282a4:	mov	r5, #1
   282a8:	mvn	lr, #15
   282ac:	mov	r3, #0
   282b0:	str	r1, [sp, #56]	; 0x38
   282b4:	ldr	r1, [sp, #40]	; 0x28
   282b8:	mov	r8, r2
   282bc:	str	r1, [sp, #52]	; 0x34
   282c0:	ldr	r4, [fp, #16]
   282c4:	ldr	r1, [sp, #56]	; 0x38
   282c8:	ldr	r4, [r4, r5, lsl #2]
   282cc:	str	r2, [r6, r5, lsl #2]
   282d0:	add	r1, r1, #1
   282d4:	cmp	r1, #4
   282d8:	str	r1, [sp, #56]	; 0x38
   282dc:	sub	r4, r4, #1
   282e0:	str	r4, [r7, r5, lsl #2]
   282e4:	ldr	r7, [r9, r5, lsl #2]
   282e8:	str	r7, [sp, #44]	; 0x2c
   282ec:	bcs	282f8 <GetDataSlab+0x934>
   282f0:	mov	r6, r5
   282f4:	b	28390 <GetDataSlab+0x9cc>
   282f8:	vmov.i32	q9, #1	; 0x00000001
   282fc:	vmov.i32	q10, #1	; 0x00000001
   28300:	vmov.i32	q8, #1	; 0x00000001
   28304:	bic	r9, r5, #3
   28308:	vmov.32	d23[1], r7
   2830c:	vmov.32	d18[0], r2
   28310:	bic	r2, r1, #3
   28314:	vmov.32	d20[0], r4
   28318:	vorr	d16, d18, d18
   2831c:	vmov.i32	q9, #1	; 0x00000001
   28320:	str	r2, [sp, #36]	; 0x24
   28324:	sub	r6, r5, r2
   28328:	mov	r2, ip
   2832c:	vorr	d18, d20, d20
   28330:	vld1.32	{d20-d21}, [r2], lr
   28334:	subs	r9, r9, #4
   28338:	vrev64.32	q12, q10
   2833c:	vext.8	q12, q12, q12, #8
   28340:	vext.8	q11, q11, q12, #12
   28344:	vmul.i32	q9, q9, q12
   28348:	vmul.i32	q8, q11, q8
   2834c:	vorr	q11, q12, q12
   28350:	bne	28330 <GetDataSlab+0x96c>
   28354:	ldr	r7, [sp, #36]	; 0x24
   28358:	vext.8	q11, q9, q8, #8
   2835c:	vext.8	q12, q8, q8, #8
   28360:	vmul.i32	q0, q9, q11
   28364:	vmul.i32	q1, q8, q12
   28368:	vmul.i32	q8, q0, d0[1]
   2836c:	vmul.i32	q9, q1, d2[1]
   28370:	vmov.32	r4, d16[0]
   28374:	vmov.32	r2, d18[0]
   28378:	cmp	r1, r7
   2837c:	bne	28388 <GetDataSlab+0x9c4>
   28380:	ldr	r9, [fp, #8]
   28384:	b	283a4 <GetDataSlab+0x9e0>
   28388:	ldr	r9, [fp, #8]
   2838c:	vmov.32	r7, d20[0]
   28390:	mul	r2, r7, r2
   28394:	ldr	r7, [r0, r6, lsl #2]
   28398:	subs	r6, r6, #1
   2839c:	mul	r4, r4, r7
   283a0:	bne	28390 <GetDataSlab+0x9cc>
   283a4:	sub	r7, fp, #96	; 0x60
   283a8:	sub	r6, fp, #176	; 0xb0
   283ac:	ldr	r1, [sp, #52]	; 0x34
   283b0:	add	ip, ip, #4
   283b4:	str	r4, [r7, r5, lsl #2]
   283b8:	ldr	r4, [fp, #12]
   283bc:	str	r2, [r6, r5, lsl #2]
   283c0:	ldr	r4, [r4, r5, lsl #2]
   283c4:	mla	r3, r4, r8, r3
   283c8:	ldr	r4, [fp, #20]
   283cc:	mov	r8, r2
   283d0:	ldr	r2, [sp, #44]	; 0x2c
   283d4:	ldr	r4, [r4, r5, lsl #2]
   283d8:	add	r5, r5, #1
   283dc:	mul	r1, r4, r1
   283e0:	ldr	r4, [fp, #24]
   283e4:	str	r1, [sp, #52]	; 0x34
   283e8:	cmp	r5, r4
   283ec:	bne	282c0 <GetDataSlab+0x8fc>
   283f0:	ldr	r0, [sp, #48]	; 0x30
   283f4:	cmp	sl, #1
   283f8:	add	r8, r0, r3
   283fc:	bne	3bd7c <GetDataSlab+0x143b8>
   28400:	ldr	r0, [sp, #52]	; 0x34
   28404:	ldr	ip, [sp, #60]	; 0x3c
   28408:	ldr	lr, [sp, #40]	; 0x28
   2840c:	sub	r1, fp, #96	; 0x60
   28410:	cmp	r0, #1
   28414:	ldr	r0, [fp, #12]
   28418:	blt	47ff8 <GetDataSlab+0x20634>
   2841c:	add	sl, r0, #4
   28420:	ldr	r0, [fp, #20]
   28424:	mov	r4, ip
   28428:	mov	ip, #0
   2842c:	add	r9, r0, #4
   28430:	sub	r0, fp, #136	; 0x88
   28434:	orr	r6, r0, #4
   28438:	orr	r0, r1, #4
   2843c:	str	r0, [sp, #28]
   28440:	bic	r0, lr, #3
   28444:	str	r0, [sp, #36]	; 0x24
   28448:	lsl	r0, lr, #2
   2844c:	str	r0, [sp, #44]	; 0x2c
   28450:	mov	r0, #0
   28454:	str	r0, [sp, #56]	; 0x38
   28458:	cmp	lr, #1
   2845c:	str	r4, [sp, #48]	; 0x30
   28460:	blt	2853c <GetDataSlab+0xb78>
   28464:	ldr	r0, [fp, #12]
   28468:	mov	r2, #0
   2846c:	cmp	lr, #4
   28470:	ldr	r5, [r0]
   28474:	bcc	28510 <GetDataSlab+0xb4c>
   28478:	ldr	r0, [sp, #60]	; 0x3c
   2847c:	ldr	r1, [sp, #44]	; 0x2c
   28480:	ldr	r7, [sp, #56]	; 0x38
   28484:	mla	r7, r1, r7, r0
   28488:	ldr	r0, [sp, #40]	; 0x28
   2848c:	add	r1, r8, r5
   28490:	add	lr, r8, r0
   28494:	add	r0, lr, r5
   28498:	ldr	lr, [sp, #40]	; 0x28
   2849c:	cmp	r7, r0
   284a0:	bcs	284c8 <GetDataSlab+0xb04>
   284a4:	mov	r7, r5
   284a8:	ldr	r0, [sp, #44]	; 0x2c
   284ac:	ldr	r5, [sp, #56]	; 0x38
   284b0:	mla	r0, r0, r5, r0
   284b4:	mov	r5, r7
   284b8:	ldr	r7, [sp, #60]	; 0x3c
   284bc:	add	r0, r7, r0
   284c0:	cmp	r1, r0
   284c4:	bcc	28510 <GetDataSlab+0xb4c>
   284c8:	ldr	r2, [sp, #36]	; 0x24
   284cc:	mov	r7, r5
   284d0:	mov	r0, r4
   284d4:	add	r5, sp, #200	; 0xc8
   284d8:	ldr	r4, [r1], #4
   284dc:	subs	r2, r2, #4
   284e0:	str	r4, [sp, #200]	; 0xc8
   284e4:	vld1.32	{d16[0]}, [r5 :32]
   284e8:	vmovl.s8	q8, d16
   284ec:	vmovl.s16	q8, d16
   284f0:	vcvt.f32.s32	q8, q8
   284f4:	vst1.32	{d16-d17}, [r0]!
   284f8:	bne	284d8 <GetDataSlab+0xb14>
   284fc:	ldr	r2, [sp, #36]	; 0x24
   28500:	ldr	r4, [sp, #48]	; 0x30
   28504:	mov	r5, r7
   28508:	cmp	lr, r2
   2850c:	beq	2853c <GetDataSlab+0xb78>
   28510:	sub	r1, lr, r2
   28514:	add	r0, r4, r2, lsl #2
   28518:	add	r2, r2, r5
   2851c:	add	r2, r8, r2
   28520:	ldrsb	r4, [r2], #1
   28524:	subs	r1, r1, #1
   28528:	vmov	s0, r4
   2852c:	vcvt.f32.s32	s0, s0
   28530:	vstr	s0, [r0]
   28534:	add	r0, r0, #4
   28538:	bne	28520 <GetDataSlab+0xb5c>
   2853c:	ldr	r0, [sp, #32]
   28540:	sub	r5, fp, #176	; 0xb0
   28544:	add	r8, r8, r0
   28548:	add	r3, r3, r0
   2854c:	ldr	r0, [fp, #24]
   28550:	cmp	r0, #2
   28554:	blt	285f8 <GetDataSlab+0xc34>
   28558:	mov	r1, #0
   2855c:	mov	r0, r1
   28560:	ldr	r1, [r6, r1, lsl #2]
   28564:	add	r1, r1, #1
   28568:	str	r1, [r6, r0, lsl #2]
   2856c:	ldr	r2, [r9, r0, lsl #2]
   28570:	sdiv	r4, r1, r2
   28574:	mls	r1, r4, r2, r1
   28578:	cmp	r1, #0
   2857c:	bne	285e8 <GetDataSlab+0xc24>
   28580:	mov	r1, #0
   28584:	str	r1, [r6, r0, lsl #2]
   28588:	add	r1, r5, r0, lsl #2
   2858c:	ldr	r1, [r1, #4]
   28590:	sdiv	r2, r3, r1
   28594:	mls	r2, r2, r1, r3
   28598:	cmp	r2, #0
   2859c:	beq	285bc <GetDataSlab+0xbf8>
   285a0:	ldr	r4, [r5, r0, lsl #2]
   285a4:	ldr	r7, [sl, r0, lsl #2]
   285a8:	sub	r1, r1, r2
   285ac:	mla	r1, r7, r4, r1
   285b0:	add	r3, r1, r3
   285b4:	add	r8, r8, r1
   285b8:	b	285d0 <GetDataSlab+0xc0c>
   285bc:	ldr	r1, [sl, r0, lsl #2]
   285c0:	cmp	r1, #0
   285c4:	ldrne	r2, [r5, r0, lsl #2]
   285c8:	mlane	r3, r2, r1, r3
   285cc:	mlane	r8, r2, r1, r8
   285d0:	ldr	r2, [fp, #24]
   285d4:	add	r1, r0, #1
   285d8:	add	r0, r0, #2
   285dc:	cmp	r0, r2
   285e0:	blt	2855c <GetDataSlab+0xb98>
   285e4:	b	285f8 <GetDataSlab+0xc34>
   285e8:	ldr	r1, [sp, #28]
   285ec:	ldr	r0, [r1, r0, lsl #2]
   285f0:	add	r8, r8, r0
   285f4:	add	r3, r0, r3
   285f8:	ldr	r0, [sp, #44]	; 0x2c
   285fc:	ldr	r4, [sp, #48]	; 0x30
   28600:	ldr	r1, [sp, #52]	; 0x34
   28604:	add	ip, ip, lr
   28608:	add	r4, r4, r0
   2860c:	ldr	r0, [sp, #56]	; 0x38
   28610:	cmp	ip, r1
   28614:	add	r0, r0, #1
   28618:	str	r0, [sp, #56]	; 0x38
   2861c:	mov	r0, #0
   28620:	blt	28458 <GetDataSlab+0xa94>
   28624:	b	47ffc <GetDataSlab+0x20638>
   28628:	sub	r1, r6, #1
   2862c:	mov	r0, #1
   28630:	cmp	r1, #11
   28634:	bhi	3bf30 <GetDataSlab+0x1456c>
   28638:	add	r2, pc, #8
   2863c:	ldr	r3, [fp, #16]
   28640:	ldr	r1, [r2, r1, lsl #2]
   28644:	add	pc, r2, r1
   28648:	.word	0x00000030
   2864c:	.word	0x0000634c
   28650:	.word	0x00006664
   28654:	.word	0x00006988
   28658:	.word	0x00006cac
   2865c:	.word	0x00006fc8
   28660:	.word	0x000072e4
   28664:	.word	0x000170cc
   28668:	.word	0x00007614
   2866c:	.word	0x000170cc
   28670:	.word	0x000170cc
   28674:	.word	0x00007944
   28678:	ldr	r5, [r3]
   2867c:	ldr	r9, [fp, #8]
   28680:	ldr	r8, [fp, #12]
   28684:	mov	r4, #0
   28688:	sub	r3, fp, #176	; 0xb0
   2868c:	sub	r0, r5, #1
   28690:	str	r0, [fp, #-96]	; 0xffffffa0
   28694:	ldr	r0, [r9]
   28698:	str	r0, [fp, #-176]	; 0xffffff50
   2869c:	str	r0, [sp, #52]	; 0x34
   286a0:	ldr	r0, [fp, #24]
   286a4:	ldr	r2, [sl]
   286a8:	sub	sl, fp, #96	; 0x60
   286ac:	cmp	r0, #2
   286b0:	mov	r0, r2
   286b4:	str	r2, [sp, #56]	; 0x38
   286b8:	blt	2881c <GetDataSlab+0xe58>
   286bc:	ldr	r7, [sp, #52]	; 0x34
   286c0:	sub	r0, r9, #4
   286c4:	sub	r6, r9, #12
   286c8:	mov	ip, #1
   286cc:	mov	lr, #0
   286d0:	mov	r4, #0
   286d4:	str	r2, [sp, #56]	; 0x38
   286d8:	mov	r1, r7
   286dc:	str	r7, [sp, #44]	; 0x2c
   286e0:	mov	r1, r2
   286e4:	ldr	r1, [fp, #16]
   286e8:	add	lr, lr, #1
   286ec:	str	r6, [sp, #40]	; 0x28
   286f0:	cmp	lr, #4
   286f4:	str	lr, [sp, #36]	; 0x24
   286f8:	ldr	r1, [r1, ip, lsl #2]
   286fc:	str	r7, [r3, ip, lsl #2]
   28700:	sub	r8, r1, #1
   28704:	str	r8, [sl, ip, lsl #2]
   28708:	ldr	r1, [r9, ip, lsl #2]
   2870c:	str	r1, [sp, #32]
   28710:	bcs	2871c <GetDataSlab+0xd58>
   28714:	mov	r3, ip
   28718:	b	287b0 <GetDataSlab+0xdec>
   2871c:	vmov.i32	q9, #1	; 0x00000001
   28720:	vmov.i32	q10, #1	; 0x00000001
   28724:	vmov.i32	q8, #1	; 0x00000001
   28728:	bic	sl, lr, #3
   2872c:	vmov.32	d23[1], r1
   28730:	bic	r9, ip, #3
   28734:	mov	r1, r6
   28738:	vmov.32	d18[0], r7
   2873c:	vmov.32	d20[0], r8
   28740:	sub	r3, ip, sl
   28744:	mvn	r7, #15
   28748:	vorr	d16, d18, d18
   2874c:	vmov.i32	q9, #1	; 0x00000001
   28750:	vorr	d18, d20, d20
   28754:	vld1.32	{d20-d21}, [r1], r7
   28758:	subs	r9, r9, #4
   2875c:	vrev64.32	q12, q10
   28760:	vext.8	q12, q12, q12, #8
   28764:	vext.8	q11, q11, q12, #12
   28768:	vmul.i32	q9, q9, q12
   2876c:	vmul.i32	q8, q11, q8
   28770:	vorr	q11, q12, q12
   28774:	bne	28754 <GetDataSlab+0xd90>
   28778:	vext.8	q11, q9, q8, #8
   2877c:	vext.8	q12, q8, q8, #8
   28780:	cmp	lr, sl
   28784:	vmul.i32	q0, q9, q11
   28788:	vmul.i32	q1, q8, q12
   2878c:	vmul.i32	q8, q0, d0[1]
   28790:	vmul.i32	q9, q1, d2[1]
   28794:	vmov.32	r8, d16[0]
   28798:	vmov.32	r7, d18[0]
   2879c:	bne	287a8 <GetDataSlab+0xde4>
   287a0:	ldr	r9, [fp, #8]
   287a4:	b	287c4 <GetDataSlab+0xe00>
   287a8:	ldr	r9, [fp, #8]
   287ac:	vmov.32	r1, d20[0]
   287b0:	mul	r7, r1, r7
   287b4:	ldr	r1, [r0, r3, lsl #2]
   287b8:	subs	r3, r3, #1
   287bc:	mul	r8, r8, r1
   287c0:	bne	287b0 <GetDataSlab+0xdec>
   287c4:	sub	sl, fp, #96	; 0x60
   287c8:	sub	r3, fp, #176	; 0xb0
   287cc:	ldr	r6, [sp, #44]	; 0x2c
   287d0:	ldr	lr, [sp, #56]	; 0x38
   287d4:	str	r7, [sp, #44]	; 0x2c
   287d8:	str	r8, [sl, ip, lsl #2]
   287dc:	ldr	r8, [fp, #12]
   287e0:	str	r7, [r3, ip, lsl #2]
   287e4:	ldr	r7, [sp, #32]
   287e8:	ldr	r1, [r8, ip, lsl #2]
   287ec:	mla	r4, r1, r6, r4
   287f0:	ldr	r1, [fp, #20]
   287f4:	ldr	r6, [sp, #40]	; 0x28
   287f8:	ldr	r1, [r1, ip, lsl #2]
   287fc:	add	ip, ip, #1
   28800:	add	r6, r6, #4
   28804:	mul	lr, r1, lr
   28808:	ldr	r1, [fp, #24]
   2880c:	str	lr, [sp, #56]	; 0x38
   28810:	ldr	lr, [sp, #36]	; 0x24
   28814:	cmp	ip, r1
   28818:	bne	286e4 <GetDataSlab+0xd20>
   2881c:	ldr	r0, [sp, #48]	; 0x30
   28820:	cmp	r5, #1
   28824:	add	sl, r0, r4
   28828:	bne	3bf40 <GetDataSlab+0x1457c>
   2882c:	ldr	r0, [sp, #56]	; 0x38
   28830:	cmp	r0, #1
   28834:	blt	2a430 <GetDataSlab+0x2a6c>
   28838:	ldr	r0, [fp, #20]
   2883c:	mov	r9, r8
   28840:	mov	r8, #0
   28844:	add	ip, r0, #4
   28848:	sub	r0, fp, #136	; 0x88
   2884c:	orr	r7, r0, #4
   28850:	sub	r0, fp, #96	; 0x60
   28854:	orr	r0, r0, #4
   28858:	str	r0, [sp, #44]	; 0x2c
   2885c:	ldr	r0, [r9], #4
   28860:	str	r0, [sp, #48]	; 0x30
   28864:	ldr	r6, [sp, #48]	; 0x30
   28868:	ldr	r1, [sp, #52]	; 0x34
   2886c:	cmp	r2, #1
   28870:	add	r0, r6, r4
   28874:	add	r3, sl, r6
   28878:	blt	288b4 <GetDataSlab+0xef0>
   2887c:	ldr	r1, [sp, #60]	; 0x3c
   28880:	ldr	r6, [fp, #20]
   28884:	mov	r4, #0
   28888:	add	r1, r1, r8
   2888c:	ldrb	r2, [r3, r4]
   28890:	strb	r2, [r1, r4]
   28894:	add	r4, r4, #1
   28898:	ldr	r2, [r6]
   2889c:	cmp	r4, r2
   288a0:	blt	2888c <GetDataSlab+0xec8>
   288a4:	ldr	r1, [fp, #12]
   288a8:	ldr	r6, [r1]
   288ac:	ldr	r1, [fp, #8]
   288b0:	ldr	r1, [r1]
   288b4:	str	r1, [sp, #52]	; 0x34
   288b8:	sub	r1, r1, r6
   288bc:	str	r6, [sp, #48]	; 0x30
   288c0:	add	r4, r0, r1
   288c4:	ldr	r0, [fp, #24]
   288c8:	add	sl, r3, r1
   288cc:	cmp	r0, #2
   288d0:	blt	28978 <GetDataSlab+0xfb4>
   288d4:	mov	r1, #0
   288d8:	mov	r0, r1
   288dc:	ldr	r1, [r7, r1, lsl #2]
   288e0:	add	r1, r1, #1
   288e4:	str	r1, [r7, r0, lsl #2]
   288e8:	ldr	r6, [ip, r0, lsl #2]
   288ec:	sdiv	lr, r1, r6
   288f0:	mls	r1, lr, r6, r1
   288f4:	cmp	r1, #0
   288f8:	bne	28968 <GetDataSlab+0xfa4>
   288fc:	mov	r1, #0
   28900:	sub	r3, fp, #176	; 0xb0
   28904:	str	r1, [r7, r0, lsl #2]
   28908:	add	r1, r3, r0, lsl #2
   2890c:	ldr	r1, [r1, #4]
   28910:	sdiv	r6, r4, r1
   28914:	mls	r6, r6, r1, r4
   28918:	cmp	r6, #0
   2891c:	beq	2893c <GetDataSlab+0xf78>
   28920:	ldr	r5, [r3, r0, lsl #2]
   28924:	ldr	r3, [r9, r0, lsl #2]
   28928:	sub	r1, r1, r6
   2892c:	mla	r1, r3, r5, r1
   28930:	add	r4, r1, r4
   28934:	add	sl, sl, r1
   28938:	b	28950 <GetDataSlab+0xf8c>
   2893c:	ldr	r1, [r9, r0, lsl #2]
   28940:	cmp	r1, #0
   28944:	ldrne	r3, [r3, r0, lsl #2]
   28948:	mlane	r4, r3, r1, r4
   2894c:	mlane	sl, r3, r1, sl
   28950:	ldr	r3, [fp, #24]
   28954:	add	r1, r0, #1
   28958:	add	r0, r0, #2
   2895c:	cmp	r0, r3
   28960:	blt	288d8 <GetDataSlab+0xf14>
   28964:	b	28978 <GetDataSlab+0xfb4>
   28968:	ldr	r1, [sp, #44]	; 0x2c
   2896c:	ldr	r0, [r1, r0, lsl #2]
   28970:	add	sl, sl, r0
   28974:	add	r4, r0, r4
   28978:	ldr	r1, [sp, #56]	; 0x38
   2897c:	add	r8, r2, r8
   28980:	mov	r0, #0
   28984:	cmp	r8, r1
   28988:	blt	28864 <GetDataSlab+0xea0>
   2898c:	b	47ffc <GetDataSlab+0x20638>
   28990:	sub	r1, r6, #1
   28994:	mov	r0, #1
   28998:	cmp	r1, #11
   2899c:	bhi	3c0d8 <GetDataSlab+0x14714>
   289a0:	add	r2, pc, #8
   289a4:	ldr	r3, [fp, #16]
   289a8:	ldr	r1, [r2, r1, lsl #2]
   289ac:	add	pc, r2, r1
   289b0:	.word	0x00000030
   289b4:	.word	0x000078f4
   289b8:	.word	0x00007c0c
   289bc:	.word	0x00007f30
   289c0:	.word	0x00008254
   289c4:	.word	0x00008570
   289c8:	.word	0x0000888c
   289cc:	.word	0x00017d8c
   289d0:	.word	0x00008bbc
   289d4:	.word	0x00017d8c
   289d8:	.word	0x00017d8c
   289dc:	.word	0x00008eec
   289e0:	ldr	r5, [r3]
   289e4:	ldr	r9, [fp, #8]
   289e8:	ldr	r8, [fp, #12]
   289ec:	mov	r4, #0
   289f0:	sub	r3, fp, #176	; 0xb0
   289f4:	sub	r0, r5, #1
   289f8:	str	r0, [fp, #-96]	; 0xffffffa0
   289fc:	ldr	r0, [r9]
   28a00:	str	r0, [fp, #-176]	; 0xffffff50
   28a04:	str	r0, [sp, #52]	; 0x34
   28a08:	ldr	r0, [fp, #24]
   28a0c:	ldr	r2, [sl]
   28a10:	sub	sl, fp, #96	; 0x60
   28a14:	cmp	r0, #2
   28a18:	mov	r0, r2
   28a1c:	str	r2, [sp, #56]	; 0x38
   28a20:	blt	28b84 <GetDataSlab+0x11c0>
   28a24:	ldr	r7, [sp, #52]	; 0x34
   28a28:	sub	r0, r9, #4
   28a2c:	sub	r6, r9, #12
   28a30:	mov	ip, #1
   28a34:	mov	lr, #0
   28a38:	mov	r4, #0
   28a3c:	str	r2, [sp, #56]	; 0x38
   28a40:	mov	r1, r7
   28a44:	str	r7, [sp, #44]	; 0x2c
   28a48:	mov	r1, r2
   28a4c:	ldr	r1, [fp, #16]
   28a50:	add	lr, lr, #1
   28a54:	str	r6, [sp, #40]	; 0x28
   28a58:	cmp	lr, #4
   28a5c:	str	lr, [sp, #36]	; 0x24
   28a60:	ldr	r1, [r1, ip, lsl #2]
   28a64:	str	r7, [r3, ip, lsl #2]
   28a68:	sub	r8, r1, #1
   28a6c:	str	r8, [sl, ip, lsl #2]
   28a70:	ldr	r1, [r9, ip, lsl #2]
   28a74:	str	r1, [sp, #32]
   28a78:	bcs	28a84 <GetDataSlab+0x10c0>
   28a7c:	mov	r3, ip
   28a80:	b	28b18 <GetDataSlab+0x1154>
   28a84:	vmov.i32	q9, #1	; 0x00000001
   28a88:	vmov.i32	q10, #1	; 0x00000001
   28a8c:	vmov.i32	q8, #1	; 0x00000001
   28a90:	bic	sl, lr, #3
   28a94:	vmov.32	d23[1], r1
   28a98:	bic	r9, ip, #3
   28a9c:	mov	r1, r6
   28aa0:	vmov.32	d18[0], r7
   28aa4:	vmov.32	d20[0], r8
   28aa8:	sub	r3, ip, sl
   28aac:	mvn	r7, #15
   28ab0:	vorr	d16, d18, d18
   28ab4:	vmov.i32	q9, #1	; 0x00000001
   28ab8:	vorr	d18, d20, d20
   28abc:	vld1.32	{d20-d21}, [r1], r7
   28ac0:	subs	r9, r9, #4
   28ac4:	vrev64.32	q12, q10
   28ac8:	vext.8	q12, q12, q12, #8
   28acc:	vext.8	q11, q11, q12, #12
   28ad0:	vmul.i32	q9, q9, q12
   28ad4:	vmul.i32	q8, q11, q8
   28ad8:	vorr	q11, q12, q12
   28adc:	bne	28abc <GetDataSlab+0x10f8>
   28ae0:	vext.8	q11, q9, q8, #8
   28ae4:	vext.8	q12, q8, q8, #8
   28ae8:	cmp	lr, sl
   28aec:	vmul.i32	q0, q9, q11
   28af0:	vmul.i32	q1, q8, q12
   28af4:	vmul.i32	q8, q0, d0[1]
   28af8:	vmul.i32	q9, q1, d2[1]
   28afc:	vmov.32	r8, d16[0]
   28b00:	vmov.32	r7, d18[0]
   28b04:	bne	28b10 <GetDataSlab+0x114c>
   28b08:	ldr	r9, [fp, #8]
   28b0c:	b	28b2c <GetDataSlab+0x1168>
   28b10:	ldr	r9, [fp, #8]
   28b14:	vmov.32	r1, d20[0]
   28b18:	mul	r7, r1, r7
   28b1c:	ldr	r1, [r0, r3, lsl #2]
   28b20:	subs	r3, r3, #1
   28b24:	mul	r8, r8, r1
   28b28:	bne	28b18 <GetDataSlab+0x1154>
   28b2c:	sub	sl, fp, #96	; 0x60
   28b30:	sub	r3, fp, #176	; 0xb0
   28b34:	ldr	r6, [sp, #44]	; 0x2c
   28b38:	ldr	lr, [sp, #56]	; 0x38
   28b3c:	str	r7, [sp, #44]	; 0x2c
   28b40:	str	r8, [sl, ip, lsl #2]
   28b44:	ldr	r8, [fp, #12]
   28b48:	str	r7, [r3, ip, lsl #2]
   28b4c:	ldr	r7, [sp, #32]
   28b50:	ldr	r1, [r8, ip, lsl #2]
   28b54:	mla	r4, r1, r6, r4
   28b58:	ldr	r1, [fp, #20]
   28b5c:	ldr	r6, [sp, #40]	; 0x28
   28b60:	ldr	r1, [r1, ip, lsl #2]
   28b64:	add	ip, ip, #1
   28b68:	add	r6, r6, #4
   28b6c:	mul	lr, r1, lr
   28b70:	ldr	r1, [fp, #24]
   28b74:	str	lr, [sp, #56]	; 0x38
   28b78:	ldr	lr, [sp, #36]	; 0x24
   28b7c:	cmp	ip, r1
   28b80:	bne	28a4c <GetDataSlab+0x1088>
   28b84:	ldr	r0, [sp, #48]	; 0x30
   28b88:	cmp	r5, #1
   28b8c:	add	sl, r0, r4
   28b90:	bne	3c0e8 <GetDataSlab+0x14724>
   28b94:	ldr	r0, [sp, #56]	; 0x38
   28b98:	cmp	r0, #1
   28b9c:	blt	2a430 <GetDataSlab+0x2a6c>
   28ba0:	ldr	r0, [fp, #20]
   28ba4:	mov	r9, r8
   28ba8:	mov	r8, #0
   28bac:	add	ip, r0, #4
   28bb0:	sub	r0, fp, #136	; 0x88
   28bb4:	orr	r7, r0, #4
   28bb8:	sub	r0, fp, #96	; 0x60
   28bbc:	orr	r0, r0, #4
   28bc0:	str	r0, [sp, #44]	; 0x2c
   28bc4:	ldr	r0, [r9], #4
   28bc8:	str	r0, [sp, #48]	; 0x30
   28bcc:	ldr	r6, [sp, #48]	; 0x30
   28bd0:	ldr	r1, [sp, #52]	; 0x34
   28bd4:	cmp	r2, #1
   28bd8:	add	r0, r6, r4
   28bdc:	add	r3, sl, r6
   28be0:	blt	28c1c <GetDataSlab+0x1258>
   28be4:	ldr	r1, [sp, #60]	; 0x3c
   28be8:	ldr	r6, [fp, #20]
   28bec:	mov	r4, #0
   28bf0:	add	r1, r1, r8
   28bf4:	ldrb	r2, [r3, r4]
   28bf8:	strb	r2, [r1, r4]
   28bfc:	add	r4, r4, #1
   28c00:	ldr	r2, [r6]
   28c04:	cmp	r4, r2
   28c08:	blt	28bf4 <GetDataSlab+0x1230>
   28c0c:	ldr	r1, [fp, #12]
   28c10:	ldr	r6, [r1]
   28c14:	ldr	r1, [fp, #8]
   28c18:	ldr	r1, [r1]
   28c1c:	str	r1, [sp, #52]	; 0x34
   28c20:	sub	r1, r1, r6
   28c24:	str	r6, [sp, #48]	; 0x30
   28c28:	add	r4, r0, r1
   28c2c:	ldr	r0, [fp, #24]
   28c30:	add	sl, r3, r1
   28c34:	cmp	r0, #2
   28c38:	blt	28ce0 <GetDataSlab+0x131c>
   28c3c:	mov	r1, #0
   28c40:	mov	r0, r1
   28c44:	ldr	r1, [r7, r1, lsl #2]
   28c48:	add	r1, r1, #1
   28c4c:	str	r1, [r7, r0, lsl #2]
   28c50:	ldr	r6, [ip, r0, lsl #2]
   28c54:	sdiv	lr, r1, r6
   28c58:	mls	r1, lr, r6, r1
   28c5c:	cmp	r1, #0
   28c60:	bne	28cd0 <GetDataSlab+0x130c>
   28c64:	mov	r1, #0
   28c68:	sub	r3, fp, #176	; 0xb0
   28c6c:	str	r1, [r7, r0, lsl #2]
   28c70:	add	r1, r3, r0, lsl #2
   28c74:	ldr	r1, [r1, #4]
   28c78:	sdiv	r6, r4, r1
   28c7c:	mls	r6, r6, r1, r4
   28c80:	cmp	r6, #0
   28c84:	beq	28ca4 <GetDataSlab+0x12e0>
   28c88:	ldr	r5, [r3, r0, lsl #2]
   28c8c:	ldr	r3, [r9, r0, lsl #2]
   28c90:	sub	r1, r1, r6
   28c94:	mla	r1, r3, r5, r1
   28c98:	add	r4, r1, r4
   28c9c:	add	sl, sl, r1
   28ca0:	b	28cb8 <GetDataSlab+0x12f4>
   28ca4:	ldr	r1, [r9, r0, lsl #2]
   28ca8:	cmp	r1, #0
   28cac:	ldrne	r3, [r3, r0, lsl #2]
   28cb0:	mlane	r4, r3, r1, r4
   28cb4:	mlane	sl, r3, r1, sl
   28cb8:	ldr	r3, [fp, #24]
   28cbc:	add	r1, r0, #1
   28cc0:	add	r0, r0, #2
   28cc4:	cmp	r0, r3
   28cc8:	blt	28c40 <GetDataSlab+0x127c>
   28ccc:	b	28ce0 <GetDataSlab+0x131c>
   28cd0:	ldr	r1, [sp, #44]	; 0x2c
   28cd4:	ldr	r0, [r1, r0, lsl #2]
   28cd8:	add	sl, sl, r0
   28cdc:	add	r4, r0, r4
   28ce0:	ldr	r1, [sp, #56]	; 0x38
   28ce4:	add	r8, r2, r8
   28ce8:	mov	r0, #0
   28cec:	cmp	r8, r1
   28cf0:	blt	28bcc <GetDataSlab+0x1208>
   28cf4:	b	47ffc <GetDataSlab+0x20638>
   28cf8:	sub	r1, r6, #1
   28cfc:	mov	r0, #1
   28d00:	cmp	r1, #11
   28d04:	bhi	3c280 <GetDataSlab+0x148bc>
   28d08:	add	r2, pc, #8
   28d0c:	ldr	ip, [fp, #16]
   28d10:	ldr	r1, [r2, r1, lsl #2]
   28d14:	add	pc, r2, r1
   28d18:	.word	0x00000030
   28d1c:	.word	0x00008e9c
   28d20:	.word	0x00009258
   28d24:	.word	0x000095dc
   28d28:	.word	0x00009960
   28d2c:	.word	0x00009cb4
   28d30:	.word	0x0000a008
   28d34:	.word	0x00018a08
   28d38:	.word	0x0000a37c
   28d3c:	.word	0x00018a08
   28d40:	.word	0x00018a08
   28d44:	.word	0x0000a69c
   28d48:	ldr	r9, [ip]
   28d4c:	mov	r3, #0
   28d50:	sub	r7, fp, #176	; 0xb0
   28d54:	sub	lr, fp, #96	; 0x60
   28d58:	sub	r0, r9, #1
   28d5c:	str	r0, [fp, #-96]	; 0xffffffa0
   28d60:	ldr	r0, [fp, #8]
   28d64:	ldr	r0, [r0]
   28d68:	str	r0, [fp, #-176]	; 0xffffff50
   28d6c:	str	r0, [sp, #36]	; 0x24
   28d70:	ldr	r0, [fp, #24]
   28d74:	ldr	r1, [sl]
   28d78:	cmp	r0, #2
   28d7c:	str	r1, [sp, #32]
   28d80:	str	r1, [sp, #56]	; 0x38
   28d84:	blt	28ee4 <GetDataSlab+0x1520>
   28d88:	ldr	r0, [fp, #8]
   28d8c:	ldr	r2, [sp, #36]	; 0x24
   28d90:	mov	r6, #1
   28d94:	mvn	r8, #15
   28d98:	mov	r3, #0
   28d9c:	mov	r1, r0
   28da0:	sub	r0, r0, #4
   28da4:	mov	r4, r2
   28da8:	sub	ip, r1, #12
   28dac:	mov	r1, #0
   28db0:	str	r1, [sp, #52]	; 0x34
   28db4:	ldr	r1, [sp, #32]
   28db8:	str	r1, [sp, #56]	; 0x38
   28dbc:	ldr	r1, [fp, #16]
   28dc0:	str	r4, [sp, #44]	; 0x2c
   28dc4:	ldr	r5, [sp, #52]	; 0x34
   28dc8:	ldr	r1, [r1, r6, lsl #2]
   28dcc:	str	r2, [r7, r6, lsl #2]
   28dd0:	add	r5, r5, #1
   28dd4:	cmp	r5, #4
   28dd8:	str	r5, [sp, #52]	; 0x34
   28ddc:	sub	r4, r1, #1
   28de0:	ldr	r1, [fp, #8]
   28de4:	str	r4, [lr, r6, lsl #2]
   28de8:	ldr	r1, [r1, r6, lsl #2]
   28dec:	str	r1, [sp, #40]	; 0x28
   28df0:	bcs	28dfc <GetDataSlab+0x1438>
   28df4:	mov	r7, r6
   28df8:	b	28e84 <GetDataSlab+0x14c0>
   28dfc:	vmov.i32	q9, #1	; 0x00000001
   28e00:	vmov.i32	q10, #1	; 0x00000001
   28e04:	vmov.i32	q8, #1	; 0x00000001
   28e08:	bic	lr, r5, #3
   28e0c:	vmov.32	d23[1], r1
   28e10:	bic	sl, r6, #3
   28e14:	mov	r1, ip
   28e18:	vmov.32	d18[0], r2
   28e1c:	vmov.32	d20[0], r4
   28e20:	sub	r7, r6, lr
   28e24:	vorr	d16, d18, d18
   28e28:	vmov.i32	q9, #1	; 0x00000001
   28e2c:	vorr	d18, d20, d20
   28e30:	vld1.32	{d20-d21}, [r1], r8
   28e34:	subs	sl, sl, #4
   28e38:	vrev64.32	q12, q10
   28e3c:	vext.8	q12, q12, q12, #8
   28e40:	vext.8	q11, q11, q12, #12
   28e44:	vmul.i32	q9, q9, q12
   28e48:	vmul.i32	q8, q11, q8
   28e4c:	vorr	q11, q12, q12
   28e50:	bne	28e30 <GetDataSlab+0x146c>
   28e54:	vext.8	q11, q9, q8, #8
   28e58:	vext.8	q12, q8, q8, #8
   28e5c:	ldr	sl, [fp, #20]
   28e60:	cmp	r5, lr
   28e64:	vmul.i32	q0, q9, q11
   28e68:	vmul.i32	q1, q8, q12
   28e6c:	vmul.i32	q8, q0, d0[1]
   28e70:	vmul.i32	q9, q1, d2[1]
   28e74:	vmov.32	r4, d16[0]
   28e78:	vmov.32	r2, d18[0]
   28e7c:	beq	28e98 <GetDataSlab+0x14d4>
   28e80:	vmov.32	r1, d20[0]
   28e84:	mul	r2, r1, r2
   28e88:	ldr	r1, [r0, r7, lsl #2]
   28e8c:	subs	r7, r7, #1
   28e90:	mul	r4, r4, r1
   28e94:	bne	28e84 <GetDataSlab+0x14c0>
   28e98:	ldr	r1, [fp, #12]
   28e9c:	sub	r7, fp, #176	; 0xb0
   28ea0:	sub	lr, fp, #96	; 0x60
   28ea4:	add	ip, ip, #4
   28ea8:	str	r4, [lr, r6, lsl #2]
   28eac:	str	r2, [r7, r6, lsl #2]
   28eb0:	ldr	r4, [sp, #44]	; 0x2c
   28eb4:	ldr	r1, [r1, r6, lsl #2]
   28eb8:	mla	r3, r1, r4, r3
   28ebc:	ldr	r1, [sl, r6, lsl #2]
   28ec0:	ldr	r4, [sp, #56]	; 0x38
   28ec4:	add	r6, r6, #1
   28ec8:	mul	r4, r1, r4
   28ecc:	ldr	r1, [fp, #24]
   28ed0:	str	r4, [sp, #56]	; 0x38
   28ed4:	mov	r4, r2
   28ed8:	ldr	r2, [sp, #40]	; 0x28
   28edc:	cmp	r6, r1
   28ee0:	bne	28dbc <GetDataSlab+0x13f8>
   28ee4:	ldr	r0, [sp, #48]	; 0x30
   28ee8:	cmp	r9, #1
   28eec:	add	r5, r0, r3
   28ef0:	bne	3c290 <GetDataSlab+0x148cc>
   28ef4:	ldr	r0, [sp, #56]	; 0x38
   28ef8:	ldr	r1, [fp, #12]
   28efc:	sub	r2, fp, #96	; 0x60
   28f00:	cmp	r0, #1
   28f04:	ldr	r0, [sp, #60]	; 0x3c
   28f08:	blt	47ff8 <GetDataSlab+0x20634>
   28f0c:	add	r8, sl, #4
   28f10:	ldr	sl, [sp, #32]
   28f14:	add	r9, r1, #4
   28f18:	sub	r1, fp, #136	; 0x88
   28f1c:	str	r0, [sp, #52]	; 0x34
   28f20:	mov	r0, #0
   28f24:	mov	lr, #0
   28f28:	orr	r4, r1, #4
   28f2c:	orr	r1, r2, #4
   28f30:	str	r0, [sp, #48]	; 0x30
   28f34:	str	r1, [sp, #28]
   28f38:	bic	r1, sl, #7
   28f3c:	lsl	ip, sl, #1
   28f40:	str	r1, [sp, #40]	; 0x28
   28f44:	cmp	sl, #1
   28f48:	blt	29014 <GetDataSlab+0x1650>
   28f4c:	ldr	r0, [fp, #12]
   28f50:	cmp	sl, #8
   28f54:	ldr	r7, [r0]
   28f58:	mov	r0, #0
   28f5c:	str	r7, [sp, #44]	; 0x2c
   28f60:	bcc	28fec <GetDataSlab+0x1628>
   28f64:	ldr	r1, [sp, #60]	; 0x3c
   28f68:	ldr	r2, [sp, #48]	; 0x30
   28f6c:	mov	r6, ip
   28f70:	mla	ip, ip, r2, r1
   28f74:	add	r1, r5, sl
   28f78:	add	r2, r5, r7
   28f7c:	add	r1, r1, r7
   28f80:	ldr	r7, [sp, #60]	; 0x3c
   28f84:	cmp	ip, r1
   28f88:	bcs	28fa4 <GetDataSlab+0x15e0>
   28f8c:	ldr	r1, [sp, #48]	; 0x30
   28f90:	mov	ip, r6
   28f94:	mla	r1, r6, r1, r6
   28f98:	add	r1, r7, r1
   28f9c:	cmp	r2, r1
   28fa0:	bcc	28fec <GetDataSlab+0x1628>
   28fa4:	ldr	r0, [sp, #40]	; 0x28
   28fa8:	ldr	ip, [sp, #52]	; 0x34
   28fac:	sub	r7, fp, #208	; 0xd0
   28fb0:	ldr	r1, [r2]
   28fb4:	ldr	sl, [r2, #4]
   28fb8:	subs	r0, r0, #8
   28fbc:	add	r2, r2, #8
   28fc0:	str	sl, [fp, #-204]	; 0xffffff34
   28fc4:	str	r1, [fp, #-208]	; 0xffffff30
   28fc8:	vld1.8	{d16}, [r7 :64]
   28fcc:	vmovl.s8	q8, d16
   28fd0:	vst1.16	{d16-d17}, [ip]!
   28fd4:	bne	28fb0 <GetDataSlab+0x15ec>
   28fd8:	ldr	sl, [sp, #32]
   28fdc:	ldr	r0, [sp, #40]	; 0x28
   28fe0:	mov	ip, r6
   28fe4:	cmp	sl, r0
   28fe8:	beq	29014 <GetDataSlab+0x1650>
   28fec:	ldr	r1, [sp, #52]	; 0x34
   28ff0:	ldr	r6, [sp, #44]	; 0x2c
   28ff4:	sub	r2, sl, r0
   28ff8:	add	r1, r1, r0, lsl #1
   28ffc:	add	r0, r0, r6
   29000:	add	r0, r5, r0
   29004:	ldrsb	r6, [r0], #1
   29008:	subs	r2, r2, #1
   2900c:	strh	r6, [r1], #2
   29010:	bne	29004 <GetDataSlab+0x1640>
   29014:	ldr	r0, [sp, #36]	; 0x24
   29018:	add	r5, r5, r0
   2901c:	add	r3, r3, r0
   29020:	ldr	r0, [fp, #24]
   29024:	cmp	r0, #2
   29028:	blt	290d4 <GetDataSlab+0x1710>
   2902c:	mov	r1, #0
   29030:	mov	r0, r1
   29034:	ldr	r1, [r4, r1, lsl #2]
   29038:	add	r1, r1, #1
   2903c:	str	r1, [r4, r0, lsl #2]
   29040:	ldr	r2, [r8, r0, lsl #2]
   29044:	sdiv	r6, r1, r2
   29048:	mls	r1, r6, r2, r1
   2904c:	cmp	r1, #0
   29050:	bne	290c4 <GetDataSlab+0x1700>
   29054:	mov	r1, #0
   29058:	sub	r7, fp, #176	; 0xb0
   2905c:	str	r1, [r4, r0, lsl #2]
   29060:	add	r1, r7, r0, lsl #2
   29064:	ldr	r1, [r1, #4]
   29068:	sdiv	r2, r3, r1
   2906c:	mls	r2, r2, r1, r3
   29070:	cmp	r2, #0
   29074:	beq	29094 <GetDataSlab+0x16d0>
   29078:	ldr	r6, [r7, r0, lsl #2]
   2907c:	ldr	r7, [r9, r0, lsl #2]
   29080:	sub	r1, r1, r2
   29084:	mla	r1, r7, r6, r1
   29088:	add	r3, r1, r3
   2908c:	add	r5, r5, r1
   29090:	b	290ac <GetDataSlab+0x16e8>
   29094:	ldr	r1, [r9, r0, lsl #2]
   29098:	cmp	r1, #0
   2909c:	subne	r2, fp, #176	; 0xb0
   290a0:	ldrne	r2, [r2, r0, lsl #2]
   290a4:	mlane	r3, r2, r1, r3
   290a8:	mlane	r5, r2, r1, r5
   290ac:	ldr	r2, [fp, #24]
   290b0:	add	r1, r0, #1
   290b4:	add	r0, r0, #2
   290b8:	cmp	r0, r2
   290bc:	blt	29030 <GetDataSlab+0x166c>
   290c0:	b	290d4 <GetDataSlab+0x1710>
   290c4:	ldr	r1, [sp, #28]
   290c8:	ldr	r0, [r1, r0, lsl #2]
   290cc:	add	r5, r5, r0
   290d0:	add	r3, r0, r3
   290d4:	ldr	r0, [sp, #52]	; 0x34
   290d8:	ldr	r1, [sp, #56]	; 0x38
   290dc:	add	lr, lr, sl
   290e0:	add	r0, r0, ip
   290e4:	cmp	lr, r1
   290e8:	str	r0, [sp, #52]	; 0x34
   290ec:	ldr	r0, [sp, #48]	; 0x30
   290f0:	add	r0, r0, #1
   290f4:	str	r0, [sp, #48]	; 0x30
   290f8:	mov	r0, #0
   290fc:	blt	28f44 <GetDataSlab+0x1580>
   29100:	b	47ffc <GetDataSlab+0x20638>
   29104:	sub	r1, r6, #1
   29108:	mov	r0, #1
   2910c:	cmp	r1, #11
   29110:	bhi	3c428 <GetDataSlab+0x14a64>
   29114:	add	r2, pc, #8
   29118:	ldr	ip, [fp, #16]
   2911c:	ldr	r1, [r2, r1, lsl #2]
   29120:	add	pc, r2, r1
   29124:	.word	0x00000030
   29128:	.word	0x0000a5d0
   2912c:	.word	0x0000a98c
   29130:	.word	0x0000ad10
   29134:	.word	0x0000b094
   29138:	.word	0x0000b3e8
   2913c:	.word	0x0000b73c
   29140:	.word	0x00019600
   29144:	.word	0x0000bab0
   29148:	.word	0x00019600
   2914c:	.word	0x00019600
   29150:	.word	0x0000bdd0
   29154:	ldr	r9, [ip]
   29158:	mov	r3, #0
   2915c:	sub	r7, fp, #176	; 0xb0
   29160:	sub	lr, fp, #96	; 0x60
   29164:	sub	r0, r9, #1
   29168:	str	r0, [fp, #-96]	; 0xffffffa0
   2916c:	ldr	r0, [fp, #8]
   29170:	ldr	r0, [r0]
   29174:	str	r0, [fp, #-176]	; 0xffffff50
   29178:	str	r0, [sp, #36]	; 0x24
   2917c:	ldr	r0, [fp, #24]
   29180:	ldr	r1, [sl]
   29184:	cmp	r0, #2
   29188:	str	r1, [sp, #32]
   2918c:	str	r1, [sp, #56]	; 0x38
   29190:	blt	292f0 <GetDataSlab+0x192c>
   29194:	ldr	r0, [fp, #8]
   29198:	ldr	r2, [sp, #36]	; 0x24
   2919c:	mov	r6, #1
   291a0:	mvn	r8, #15
   291a4:	mov	r3, #0
   291a8:	mov	r1, r0
   291ac:	sub	r0, r0, #4
   291b0:	mov	r4, r2
   291b4:	sub	ip, r1, #12
   291b8:	mov	r1, #0
   291bc:	str	r1, [sp, #52]	; 0x34
   291c0:	ldr	r1, [sp, #32]
   291c4:	str	r1, [sp, #56]	; 0x38
   291c8:	ldr	r1, [fp, #16]
   291cc:	str	r4, [sp, #44]	; 0x2c
   291d0:	ldr	r5, [sp, #52]	; 0x34
   291d4:	ldr	r1, [r1, r6, lsl #2]
   291d8:	str	r2, [r7, r6, lsl #2]
   291dc:	add	r5, r5, #1
   291e0:	cmp	r5, #4
   291e4:	str	r5, [sp, #52]	; 0x34
   291e8:	sub	r4, r1, #1
   291ec:	ldr	r1, [fp, #8]
   291f0:	str	r4, [lr, r6, lsl #2]
   291f4:	ldr	r1, [r1, r6, lsl #2]
   291f8:	str	r1, [sp, #40]	; 0x28
   291fc:	bcs	29208 <GetDataSlab+0x1844>
   29200:	mov	r7, r6
   29204:	b	29290 <GetDataSlab+0x18cc>
   29208:	vmov.i32	q9, #1	; 0x00000001
   2920c:	vmov.i32	q10, #1	; 0x00000001
   29210:	vmov.i32	q8, #1	; 0x00000001
   29214:	bic	lr, r5, #3
   29218:	vmov.32	d23[1], r1
   2921c:	bic	sl, r6, #3
   29220:	mov	r1, ip
   29224:	vmov.32	d18[0], r2
   29228:	vmov.32	d20[0], r4
   2922c:	sub	r7, r6, lr
   29230:	vorr	d16, d18, d18
   29234:	vmov.i32	q9, #1	; 0x00000001
   29238:	vorr	d18, d20, d20
   2923c:	vld1.32	{d20-d21}, [r1], r8
   29240:	subs	sl, sl, #4
   29244:	vrev64.32	q12, q10
   29248:	vext.8	q12, q12, q12, #8
   2924c:	vext.8	q11, q11, q12, #12
   29250:	vmul.i32	q9, q9, q12
   29254:	vmul.i32	q8, q11, q8
   29258:	vorr	q11, q12, q12
   2925c:	bne	2923c <GetDataSlab+0x1878>
   29260:	vext.8	q11, q9, q8, #8
   29264:	vext.8	q12, q8, q8, #8
   29268:	ldr	sl, [fp, #20]
   2926c:	cmp	r5, lr
   29270:	vmul.i32	q0, q9, q11
   29274:	vmul.i32	q1, q8, q12
   29278:	vmul.i32	q8, q0, d0[1]
   2927c:	vmul.i32	q9, q1, d2[1]
   29280:	vmov.32	r4, d16[0]
   29284:	vmov.32	r2, d18[0]
   29288:	beq	292a4 <GetDataSlab+0x18e0>
   2928c:	vmov.32	r1, d20[0]
   29290:	mul	r2, r1, r2
   29294:	ldr	r1, [r0, r7, lsl #2]
   29298:	subs	r7, r7, #1
   2929c:	mul	r4, r4, r1
   292a0:	bne	29290 <GetDataSlab+0x18cc>
   292a4:	ldr	r1, [fp, #12]
   292a8:	sub	r7, fp, #176	; 0xb0
   292ac:	sub	lr, fp, #96	; 0x60
   292b0:	add	ip, ip, #4
   292b4:	str	r4, [lr, r6, lsl #2]
   292b8:	str	r2, [r7, r6, lsl #2]
   292bc:	ldr	r4, [sp, #44]	; 0x2c
   292c0:	ldr	r1, [r1, r6, lsl #2]
   292c4:	mla	r3, r1, r4, r3
   292c8:	ldr	r1, [sl, r6, lsl #2]
   292cc:	ldr	r4, [sp, #56]	; 0x38
   292d0:	add	r6, r6, #1
   292d4:	mul	r4, r1, r4
   292d8:	ldr	r1, [fp, #24]
   292dc:	str	r4, [sp, #56]	; 0x38
   292e0:	mov	r4, r2
   292e4:	ldr	r2, [sp, #40]	; 0x28
   292e8:	cmp	r6, r1
   292ec:	bne	291c8 <GetDataSlab+0x1804>
   292f0:	ldr	r0, [sp, #48]	; 0x30
   292f4:	cmp	r9, #1
   292f8:	add	r5, r0, r3
   292fc:	bne	3c438 <GetDataSlab+0x14a74>
   29300:	ldr	r0, [sp, #56]	; 0x38
   29304:	ldr	r1, [fp, #12]
   29308:	sub	r2, fp, #96	; 0x60
   2930c:	cmp	r0, #1
   29310:	ldr	r0, [sp, #60]	; 0x3c
   29314:	blt	47ff8 <GetDataSlab+0x20634>
   29318:	add	r8, sl, #4
   2931c:	ldr	sl, [sp, #32]
   29320:	add	r9, r1, #4
   29324:	sub	r1, fp, #136	; 0x88
   29328:	str	r0, [sp, #52]	; 0x34
   2932c:	mov	r0, #0
   29330:	mov	lr, #0
   29334:	orr	r4, r1, #4
   29338:	orr	r1, r2, #4
   2933c:	str	r0, [sp, #48]	; 0x30
   29340:	str	r1, [sp, #28]
   29344:	bic	r1, sl, #7
   29348:	lsl	ip, sl, #1
   2934c:	str	r1, [sp, #40]	; 0x28
   29350:	cmp	sl, #1
   29354:	blt	29420 <GetDataSlab+0x1a5c>
   29358:	ldr	r0, [fp, #12]
   2935c:	cmp	sl, #8
   29360:	ldr	r7, [r0]
   29364:	mov	r0, #0
   29368:	str	r7, [sp, #44]	; 0x2c
   2936c:	bcc	293f8 <GetDataSlab+0x1a34>
   29370:	ldr	r1, [sp, #60]	; 0x3c
   29374:	ldr	r2, [sp, #48]	; 0x30
   29378:	mov	r6, ip
   2937c:	mla	ip, ip, r2, r1
   29380:	add	r1, r5, sl
   29384:	add	r2, r5, r7
   29388:	add	r1, r1, r7
   2938c:	ldr	r7, [sp, #60]	; 0x3c
   29390:	cmp	ip, r1
   29394:	bcs	293b0 <GetDataSlab+0x19ec>
   29398:	ldr	r1, [sp, #48]	; 0x30
   2939c:	mov	ip, r6
   293a0:	mla	r1, r6, r1, r6
   293a4:	add	r1, r7, r1
   293a8:	cmp	r2, r1
   293ac:	bcc	293f8 <GetDataSlab+0x1a34>
   293b0:	ldr	r0, [sp, #40]	; 0x28
   293b4:	ldr	ip, [sp, #52]	; 0x34
   293b8:	sub	r7, fp, #192	; 0xc0
   293bc:	ldr	r1, [r2]
   293c0:	ldr	sl, [r2, #4]
   293c4:	subs	r0, r0, #8
   293c8:	add	r2, r2, #8
   293cc:	str	sl, [fp, #-188]	; 0xffffff44
   293d0:	str	r1, [fp, #-192]	; 0xffffff40
   293d4:	vld1.8	{d16}, [r7 :64]
   293d8:	vmovl.s8	q8, d16
   293dc:	vst1.16	{d16-d17}, [ip]!
   293e0:	bne	293bc <GetDataSlab+0x19f8>
   293e4:	ldr	sl, [sp, #32]
   293e8:	ldr	r0, [sp, #40]	; 0x28
   293ec:	mov	ip, r6
   293f0:	cmp	sl, r0
   293f4:	beq	29420 <GetDataSlab+0x1a5c>
   293f8:	ldr	r1, [sp, #52]	; 0x34
   293fc:	ldr	r6, [sp, #44]	; 0x2c
   29400:	sub	r2, sl, r0
   29404:	add	r1, r1, r0, lsl #1
   29408:	add	r0, r0, r6
   2940c:	add	r0, r5, r0
   29410:	ldrsb	r6, [r0], #1
   29414:	subs	r2, r2, #1
   29418:	strh	r6, [r1], #2
   2941c:	bne	29410 <GetDataSlab+0x1a4c>
   29420:	ldr	r0, [sp, #36]	; 0x24
   29424:	add	r5, r5, r0
   29428:	add	r3, r3, r0
   2942c:	ldr	r0, [fp, #24]
   29430:	cmp	r0, #2
   29434:	blt	294e0 <GetDataSlab+0x1b1c>
   29438:	mov	r1, #0
   2943c:	mov	r0, r1
   29440:	ldr	r1, [r4, r1, lsl #2]
   29444:	add	r1, r1, #1
   29448:	str	r1, [r4, r0, lsl #2]
   2944c:	ldr	r2, [r8, r0, lsl #2]
   29450:	sdiv	r6, r1, r2
   29454:	mls	r1, r6, r2, r1
   29458:	cmp	r1, #0
   2945c:	bne	294d0 <GetDataSlab+0x1b0c>
   29460:	mov	r1, #0
   29464:	sub	r7, fp, #176	; 0xb0
   29468:	str	r1, [r4, r0, lsl #2]
   2946c:	add	r1, r7, r0, lsl #2
   29470:	ldr	r1, [r1, #4]
   29474:	sdiv	r2, r3, r1
   29478:	mls	r2, r2, r1, r3
   2947c:	cmp	r2, #0
   29480:	beq	294a0 <GetDataSlab+0x1adc>
   29484:	ldr	r6, [r7, r0, lsl #2]
   29488:	ldr	r7, [r9, r0, lsl #2]
   2948c:	sub	r1, r1, r2
   29490:	mla	r1, r7, r6, r1
   29494:	add	r3, r1, r3
   29498:	add	r5, r5, r1
   2949c:	b	294b8 <GetDataSlab+0x1af4>
   294a0:	ldr	r1, [r9, r0, lsl #2]
   294a4:	cmp	r1, #0
   294a8:	subne	r2, fp, #176	; 0xb0
   294ac:	ldrne	r2, [r2, r0, lsl #2]
   294b0:	mlane	r3, r2, r1, r3
   294b4:	mlane	r5, r2, r1, r5
   294b8:	ldr	r2, [fp, #24]
   294bc:	add	r1, r0, #1
   294c0:	add	r0, r0, #2
   294c4:	cmp	r0, r2
   294c8:	blt	2943c <GetDataSlab+0x1a78>
   294cc:	b	294e0 <GetDataSlab+0x1b1c>
   294d0:	ldr	r1, [sp, #28]
   294d4:	ldr	r0, [r1, r0, lsl #2]
   294d8:	add	r5, r5, r0
   294dc:	add	r3, r0, r3
   294e0:	ldr	r0, [sp, #52]	; 0x34
   294e4:	ldr	r1, [sp, #56]	; 0x38
   294e8:	add	lr, lr, sl
   294ec:	add	r0, r0, ip
   294f0:	cmp	lr, r1
   294f4:	str	r0, [sp, #52]	; 0x34
   294f8:	ldr	r0, [sp, #48]	; 0x30
   294fc:	add	r0, r0, #1
   29500:	str	r0, [sp, #48]	; 0x30
   29504:	mov	r0, #0
   29508:	blt	29350 <GetDataSlab+0x198c>
   2950c:	b	47ffc <GetDataSlab+0x20638>
   29510:	sub	r1, r6, #1
   29514:	mov	r0, #1
   29518:	cmp	r1, #11
   2951c:	bhi	3c5d0 <GetDataSlab+0x14c0c>
   29520:	add	r2, pc, #8
   29524:	ldr	r3, [fp, #16]
   29528:	ldr	r1, [r2, r1, lsl #2]
   2952c:	add	pc, r2, r1
   29530:	.word	0x00000030
   29534:	.word	0x0000bd04
   29538:	.word	0x0000c01c
   2953c:	.word	0x0000c340
   29540:	.word	0x0000c664
   29544:	.word	0x0000c980
   29548:	.word	0x0000cc9c
   2954c:	.word	0x0001a23c
   29550:	.word	0x0000cfcc
   29554:	.word	0x0001a23c
   29558:	.word	0x0001a23c
   2955c:	.word	0x0000d310
   29560:	ldr	r5, [r3]
   29564:	ldr	r9, [fp, #8]
   29568:	ldr	r8, [fp, #12]
   2956c:	mov	r4, #0
   29570:	sub	r3, fp, #176	; 0xb0
   29574:	sub	r0, r5, #1
   29578:	str	r0, [fp, #-96]	; 0xffffffa0
   2957c:	ldr	r0, [r9]
   29580:	str	r0, [fp, #-176]	; 0xffffff50
   29584:	str	r0, [sp, #52]	; 0x34
   29588:	ldr	r0, [fp, #24]
   2958c:	ldr	r2, [sl]
   29590:	sub	sl, fp, #96	; 0x60
   29594:	cmp	r0, #2
   29598:	mov	r0, r2
   2959c:	str	r2, [sp, #56]	; 0x38
   295a0:	blt	29704 <GetDataSlab+0x1d40>
   295a4:	ldr	r7, [sp, #52]	; 0x34
   295a8:	sub	r0, r9, #4
   295ac:	sub	r6, r9, #12
   295b0:	mov	ip, #1
   295b4:	mov	lr, #0
   295b8:	mov	r4, #0
   295bc:	str	r2, [sp, #56]	; 0x38
   295c0:	mov	r1, r7
   295c4:	str	r7, [sp, #44]	; 0x2c
   295c8:	mov	r1, r2
   295cc:	ldr	r1, [fp, #16]
   295d0:	add	lr, lr, #1
   295d4:	str	r6, [sp, #40]	; 0x28
   295d8:	cmp	lr, #4
   295dc:	str	lr, [sp, #36]	; 0x24
   295e0:	ldr	r1, [r1, ip, lsl #2]
   295e4:	str	r7, [r3, ip, lsl #2]
   295e8:	sub	r8, r1, #1
   295ec:	str	r8, [sl, ip, lsl #2]
   295f0:	ldr	r1, [r9, ip, lsl #2]
   295f4:	str	r1, [sp, #32]
   295f8:	bcs	29604 <GetDataSlab+0x1c40>
   295fc:	mov	r3, ip
   29600:	b	29698 <GetDataSlab+0x1cd4>
   29604:	vmov.i32	q9, #1	; 0x00000001
   29608:	vmov.i32	q10, #1	; 0x00000001
   2960c:	vmov.i32	q8, #1	; 0x00000001
   29610:	bic	sl, lr, #3
   29614:	vmov.32	d23[1], r1
   29618:	bic	r9, ip, #3
   2961c:	mov	r1, r6
   29620:	vmov.32	d18[0], r7
   29624:	vmov.32	d20[0], r8
   29628:	sub	r3, ip, sl
   2962c:	mvn	r7, #15
   29630:	vorr	d16, d18, d18
   29634:	vmov.i32	q9, #1	; 0x00000001
   29638:	vorr	d18, d20, d20
   2963c:	vld1.32	{d20-d21}, [r1], r7
   29640:	subs	r9, r9, #4
   29644:	vrev64.32	q12, q10
   29648:	vext.8	q12, q12, q12, #8
   2964c:	vext.8	q11, q11, q12, #12
   29650:	vmul.i32	q9, q9, q12
   29654:	vmul.i32	q8, q11, q8
   29658:	vorr	q11, q12, q12
   2965c:	bne	2963c <GetDataSlab+0x1c78>
   29660:	vext.8	q11, q9, q8, #8
   29664:	vext.8	q12, q8, q8, #8
   29668:	cmp	lr, sl
   2966c:	vmul.i32	q0, q9, q11
   29670:	vmul.i32	q1, q8, q12
   29674:	vmul.i32	q8, q0, d0[1]
   29678:	vmul.i32	q9, q1, d2[1]
   2967c:	vmov.32	r8, d16[0]
   29680:	vmov.32	r7, d18[0]
   29684:	bne	29690 <GetDataSlab+0x1ccc>
   29688:	ldr	r9, [fp, #8]
   2968c:	b	296ac <GetDataSlab+0x1ce8>
   29690:	ldr	r9, [fp, #8]
   29694:	vmov.32	r1, d20[0]
   29698:	mul	r7, r1, r7
   2969c:	ldr	r1, [r0, r3, lsl #2]
   296a0:	subs	r3, r3, #1
   296a4:	mul	r8, r8, r1
   296a8:	bne	29698 <GetDataSlab+0x1cd4>
   296ac:	sub	sl, fp, #96	; 0x60
   296b0:	sub	r3, fp, #176	; 0xb0
   296b4:	ldr	r6, [sp, #44]	; 0x2c
   296b8:	ldr	lr, [sp, #56]	; 0x38
   296bc:	str	r7, [sp, #44]	; 0x2c
   296c0:	str	r8, [sl, ip, lsl #2]
   296c4:	ldr	r8, [fp, #12]
   296c8:	str	r7, [r3, ip, lsl #2]
   296cc:	ldr	r7, [sp, #32]
   296d0:	ldr	r1, [r8, ip, lsl #2]
   296d4:	mla	r4, r1, r6, r4
   296d8:	ldr	r1, [fp, #20]
   296dc:	ldr	r6, [sp, #40]	; 0x28
   296e0:	ldr	r1, [r1, ip, lsl #2]
   296e4:	add	ip, ip, #1
   296e8:	add	r6, r6, #4
   296ec:	mul	lr, r1, lr
   296f0:	ldr	r1, [fp, #24]
   296f4:	str	lr, [sp, #56]	; 0x38
   296f8:	ldr	lr, [sp, #36]	; 0x24
   296fc:	cmp	ip, r1
   29700:	bne	295cc <GetDataSlab+0x1c08>
   29704:	ldr	r0, [sp, #48]	; 0x30
   29708:	cmp	r5, #1
   2970c:	add	sl, r0, r4
   29710:	bne	3c5e0 <GetDataSlab+0x14c1c>
   29714:	ldr	r0, [sp, #56]	; 0x38
   29718:	cmp	r0, #1
   2971c:	blt	47ff8 <GetDataSlab+0x20634>
   29720:	ldr	r0, [fp, #20]
   29724:	mov	r9, r8
   29728:	mov	r8, #0
   2972c:	add	ip, r0, #4
   29730:	sub	r0, fp, #136	; 0x88
   29734:	orr	r7, r0, #4
   29738:	sub	r0, fp, #96	; 0x60
   2973c:	orr	r0, r0, #4
   29740:	str	r0, [sp, #44]	; 0x2c
   29744:	ldr	r0, [r9], #4
   29748:	str	r0, [sp, #48]	; 0x30
   2974c:	ldr	r6, [sp, #48]	; 0x30
   29750:	ldr	r1, [sp, #52]	; 0x34
   29754:	cmp	r2, #1
   29758:	add	r0, r6, r4
   2975c:	add	r3, sl, r6
   29760:	blt	297a0 <GetDataSlab+0x1ddc>
   29764:	ldr	r1, [sp, #60]	; 0x3c
   29768:	ldr	r6, [fp, #20]
   2976c:	mov	r4, #0
   29770:	add	r1, r1, r8, lsl #2
   29774:	add	r2, r3, r4
   29778:	ldrsb	r2, [r2]
   2977c:	str	r2, [r1, r4, lsl #2]
   29780:	add	r4, r4, #1
   29784:	ldr	r2, [r6]
   29788:	cmp	r4, r2
   2978c:	blt	29774 <GetDataSlab+0x1db0>
   29790:	ldr	r1, [fp, #12]
   29794:	ldr	r6, [r1]
   29798:	ldr	r1, [fp, #8]
   2979c:	ldr	r1, [r1]
   297a0:	str	r1, [sp, #52]	; 0x34
   297a4:	sub	r1, r1, r6
   297a8:	str	r6, [sp, #48]	; 0x30
   297ac:	add	r4, r0, r1
   297b0:	ldr	r0, [fp, #24]
   297b4:	add	sl, r3, r1
   297b8:	cmp	r0, #2
   297bc:	blt	29864 <GetDataSlab+0x1ea0>
   297c0:	mov	r1, #0
   297c4:	mov	r0, r1
   297c8:	ldr	r1, [r7, r1, lsl #2]
   297cc:	add	r1, r1, #1
   297d0:	str	r1, [r7, r0, lsl #2]
   297d4:	ldr	r6, [ip, r0, lsl #2]
   297d8:	sdiv	lr, r1, r6
   297dc:	mls	r1, lr, r6, r1
   297e0:	cmp	r1, #0
   297e4:	bne	29854 <GetDataSlab+0x1e90>
   297e8:	mov	r1, #0
   297ec:	sub	r3, fp, #176	; 0xb0
   297f0:	str	r1, [r7, r0, lsl #2]
   297f4:	add	r1, r3, r0, lsl #2
   297f8:	ldr	r1, [r1, #4]
   297fc:	sdiv	r6, r4, r1
   29800:	mls	r6, r6, r1, r4
   29804:	cmp	r6, #0
   29808:	beq	29828 <GetDataSlab+0x1e64>
   2980c:	ldr	r5, [r3, r0, lsl #2]
   29810:	ldr	r3, [r9, r0, lsl #2]
   29814:	sub	r1, r1, r6
   29818:	mla	r1, r3, r5, r1
   2981c:	add	r4, r1, r4
   29820:	add	sl, sl, r1
   29824:	b	2983c <GetDataSlab+0x1e78>
   29828:	ldr	r1, [r9, r0, lsl #2]
   2982c:	cmp	r1, #0
   29830:	ldrne	r3, [r3, r0, lsl #2]
   29834:	mlane	r4, r3, r1, r4
   29838:	mlane	sl, r3, r1, sl
   2983c:	ldr	r3, [fp, #24]
   29840:	add	r1, r0, #1
   29844:	add	r0, r0, #2
   29848:	cmp	r0, r3
   2984c:	blt	297c4 <GetDataSlab+0x1e00>
   29850:	b	29864 <GetDataSlab+0x1ea0>
   29854:	ldr	r1, [sp, #44]	; 0x2c
   29858:	ldr	r0, [r1, r0, lsl #2]
   2985c:	add	sl, sl, r0
   29860:	add	r4, r0, r4
   29864:	ldr	r1, [sp, #56]	; 0x38
   29868:	add	r8, r2, r8
   2986c:	mov	r0, #0
   29870:	cmp	r8, r1
   29874:	blt	2974c <GetDataSlab+0x1d88>
   29878:	b	47ffc <GetDataSlab+0x20638>
   2987c:	sub	r1, r6, #1
   29880:	mov	r0, #1
   29884:	cmp	r1, #11
   29888:	bhi	3c778 <GetDataSlab+0x14db4>
   2988c:	add	r2, pc, #8
   29890:	ldr	r3, [fp, #16]
   29894:	ldr	r1, [r2, r1, lsl #2]
   29898:	add	pc, r2, r1
   2989c:	.word	0x00000030
   298a0:	.word	0x0000d2bc
   298a4:	.word	0x0000d5d4
   298a8:	.word	0x0000d8f8
   298ac:	.word	0x0000dc1c
   298b0:	.word	0x0000df38
   298b4:	.word	0x0000e254
   298b8:	.word	0x0001aef8
   298bc:	.word	0x0000e584
   298c0:	.word	0x0001aef8
   298c4:	.word	0x0001aef8
   298c8:	.word	0x0000e8b4
   298cc:	ldr	r5, [r3]
   298d0:	ldr	r9, [fp, #8]
   298d4:	ldr	r8, [fp, #12]
   298d8:	mov	r4, #0
   298dc:	sub	r3, fp, #176	; 0xb0
   298e0:	sub	r0, r5, #1
   298e4:	str	r0, [fp, #-96]	; 0xffffffa0
   298e8:	ldr	r0, [r9]
   298ec:	str	r0, [fp, #-176]	; 0xffffff50
   298f0:	str	r0, [sp, #52]	; 0x34
   298f4:	ldr	r0, [fp, #24]
   298f8:	ldr	r2, [sl]
   298fc:	sub	sl, fp, #96	; 0x60
   29900:	cmp	r0, #2
   29904:	mov	r0, r2
   29908:	str	r2, [sp, #56]	; 0x38
   2990c:	blt	29a70 <GetDataSlab+0x20ac>
   29910:	ldr	r7, [sp, #52]	; 0x34
   29914:	sub	r0, r9, #4
   29918:	sub	r6, r9, #12
   2991c:	mov	ip, #1
   29920:	mov	lr, #0
   29924:	mov	r4, #0
   29928:	str	r2, [sp, #56]	; 0x38
   2992c:	mov	r1, r7
   29930:	str	r7, [sp, #44]	; 0x2c
   29934:	mov	r1, r2
   29938:	ldr	r1, [fp, #16]
   2993c:	add	lr, lr, #1
   29940:	str	r6, [sp, #40]	; 0x28
   29944:	cmp	lr, #4
   29948:	str	lr, [sp, #36]	; 0x24
   2994c:	ldr	r1, [r1, ip, lsl #2]
   29950:	str	r7, [r3, ip, lsl #2]
   29954:	sub	r8, r1, #1
   29958:	str	r8, [sl, ip, lsl #2]
   2995c:	ldr	r1, [r9, ip, lsl #2]
   29960:	str	r1, [sp, #32]
   29964:	bcs	29970 <GetDataSlab+0x1fac>
   29968:	mov	r3, ip
   2996c:	b	29a04 <GetDataSlab+0x2040>
   29970:	vmov.i32	q9, #1	; 0x00000001
   29974:	vmov.i32	q10, #1	; 0x00000001
   29978:	vmov.i32	q8, #1	; 0x00000001
   2997c:	bic	sl, lr, #3
   29980:	vmov.32	d23[1], r1
   29984:	bic	r9, ip, #3
   29988:	mov	r1, r6
   2998c:	vmov.32	d18[0], r7
   29990:	vmov.32	d20[0], r8
   29994:	sub	r3, ip, sl
   29998:	mvn	r7, #15
   2999c:	vorr	d16, d18, d18
   299a0:	vmov.i32	q9, #1	; 0x00000001
   299a4:	vorr	d18, d20, d20
   299a8:	vld1.32	{d20-d21}, [r1], r7
   299ac:	subs	r9, r9, #4
   299b0:	vrev64.32	q12, q10
   299b4:	vext.8	q12, q12, q12, #8
   299b8:	vext.8	q11, q11, q12, #12
   299bc:	vmul.i32	q9, q9, q12
   299c0:	vmul.i32	q8, q11, q8
   299c4:	vorr	q11, q12, q12
   299c8:	bne	299a8 <GetDataSlab+0x1fe4>
   299cc:	vext.8	q11, q9, q8, #8
   299d0:	vext.8	q12, q8, q8, #8
   299d4:	cmp	lr, sl
   299d8:	vmul.i32	q0, q9, q11
   299dc:	vmul.i32	q1, q8, q12
   299e0:	vmul.i32	q8, q0, d0[1]
   299e4:	vmul.i32	q9, q1, d2[1]
   299e8:	vmov.32	r8, d16[0]
   299ec:	vmov.32	r7, d18[0]
   299f0:	bne	299fc <GetDataSlab+0x2038>
   299f4:	ldr	r9, [fp, #8]
   299f8:	b	29a18 <GetDataSlab+0x2054>
   299fc:	ldr	r9, [fp, #8]
   29a00:	vmov.32	r1, d20[0]
   29a04:	mul	r7, r1, r7
   29a08:	ldr	r1, [r0, r3, lsl #2]
   29a0c:	subs	r3, r3, #1
   29a10:	mul	r8, r8, r1
   29a14:	bne	29a04 <GetDataSlab+0x2040>
   29a18:	sub	sl, fp, #96	; 0x60
   29a1c:	sub	r3, fp, #176	; 0xb0
   29a20:	ldr	r6, [sp, #44]	; 0x2c
   29a24:	ldr	lr, [sp, #56]	; 0x38
   29a28:	str	r7, [sp, #44]	; 0x2c
   29a2c:	str	r8, [sl, ip, lsl #2]
   29a30:	ldr	r8, [fp, #12]
   29a34:	str	r7, [r3, ip, lsl #2]
   29a38:	ldr	r7, [sp, #32]
   29a3c:	ldr	r1, [r8, ip, lsl #2]
   29a40:	mla	r4, r1, r6, r4
   29a44:	ldr	r1, [fp, #20]
   29a48:	ldr	r6, [sp, #40]	; 0x28
   29a4c:	ldr	r1, [r1, ip, lsl #2]
   29a50:	add	ip, ip, #1
   29a54:	add	r6, r6, #4
   29a58:	mul	lr, r1, lr
   29a5c:	ldr	r1, [fp, #24]
   29a60:	str	lr, [sp, #56]	; 0x38
   29a64:	ldr	lr, [sp, #36]	; 0x24
   29a68:	cmp	ip, r1
   29a6c:	bne	29938 <GetDataSlab+0x1f74>
   29a70:	ldr	r0, [sp, #48]	; 0x30
   29a74:	cmp	r5, #1
   29a78:	add	sl, r0, r4
   29a7c:	bne	3c788 <GetDataSlab+0x14dc4>
   29a80:	ldr	r0, [sp, #56]	; 0x38
   29a84:	cmp	r0, #1
   29a88:	blt	47ff8 <GetDataSlab+0x20634>
   29a8c:	ldr	r0, [fp, #20]
   29a90:	mov	r9, r8
   29a94:	mov	r8, #0
   29a98:	add	ip, r0, #4
   29a9c:	sub	r0, fp, #136	; 0x88
   29aa0:	orr	r7, r0, #4
   29aa4:	sub	r0, fp, #96	; 0x60
   29aa8:	orr	r0, r0, #4
   29aac:	str	r0, [sp, #44]	; 0x2c
   29ab0:	ldr	r0, [r9], #4
   29ab4:	str	r0, [sp, #48]	; 0x30
   29ab8:	ldr	r6, [sp, #48]	; 0x30
   29abc:	ldr	r1, [sp, #52]	; 0x34
   29ac0:	cmp	r2, #1
   29ac4:	add	r0, r6, r4
   29ac8:	add	r3, sl, r6
   29acc:	blt	29b0c <GetDataSlab+0x2148>
   29ad0:	ldr	r1, [sp, #60]	; 0x3c
   29ad4:	ldr	r6, [fp, #20]
   29ad8:	mov	r4, #0
   29adc:	add	r1, r1, r8, lsl #2
   29ae0:	add	r2, r3, r4
   29ae4:	ldrsb	r2, [r2]
   29ae8:	str	r2, [r1, r4, lsl #2]
   29aec:	add	r4, r4, #1
   29af0:	ldr	r2, [r6]
   29af4:	cmp	r4, r2
   29af8:	blt	29ae0 <GetDataSlab+0x211c>
   29afc:	ldr	r1, [fp, #12]
   29b00:	ldr	r6, [r1]
   29b04:	ldr	r1, [fp, #8]
   29b08:	ldr	r1, [r1]
   29b0c:	str	r1, [sp, #52]	; 0x34
   29b10:	sub	r1, r1, r6
   29b14:	str	r6, [sp, #48]	; 0x30
   29b18:	add	r4, r0, r1
   29b1c:	ldr	r0, [fp, #24]
   29b20:	add	sl, r3, r1
   29b24:	cmp	r0, #2
   29b28:	blt	29bd0 <GetDataSlab+0x220c>
   29b2c:	mov	r1, #0
   29b30:	mov	r0, r1
   29b34:	ldr	r1, [r7, r1, lsl #2]
   29b38:	add	r1, r1, #1
   29b3c:	str	r1, [r7, r0, lsl #2]
   29b40:	ldr	r6, [ip, r0, lsl #2]
   29b44:	sdiv	lr, r1, r6
   29b48:	mls	r1, lr, r6, r1
   29b4c:	cmp	r1, #0
   29b50:	bne	29bc0 <GetDataSlab+0x21fc>
   29b54:	mov	r1, #0
   29b58:	sub	r3, fp, #176	; 0xb0
   29b5c:	str	r1, [r7, r0, lsl #2]
   29b60:	add	r1, r3, r0, lsl #2
   29b64:	ldr	r1, [r1, #4]
   29b68:	sdiv	r6, r4, r1
   29b6c:	mls	r6, r6, r1, r4
   29b70:	cmp	r6, #0
   29b74:	beq	29b94 <GetDataSlab+0x21d0>
   29b78:	ldr	r5, [r3, r0, lsl #2]
   29b7c:	ldr	r3, [r9, r0, lsl #2]
   29b80:	sub	r1, r1, r6
   29b84:	mla	r1, r3, r5, r1
   29b88:	add	r4, r1, r4
   29b8c:	add	sl, sl, r1
   29b90:	b	29ba8 <GetDataSlab+0x21e4>
   29b94:	ldr	r1, [r9, r0, lsl #2]
   29b98:	cmp	r1, #0
   29b9c:	ldrne	r3, [r3, r0, lsl #2]
   29ba0:	mlane	r4, r3, r1, r4
   29ba4:	mlane	sl, r3, r1, sl
   29ba8:	ldr	r3, [fp, #24]
   29bac:	add	r1, r0, #1
   29bb0:	add	r0, r0, #2
   29bb4:	cmp	r0, r3
   29bb8:	blt	29b30 <GetDataSlab+0x216c>
   29bbc:	b	29bd0 <GetDataSlab+0x220c>
   29bc0:	ldr	r1, [sp, #44]	; 0x2c
   29bc4:	ldr	r0, [r1, r0, lsl #2]
   29bc8:	add	sl, sl, r0
   29bcc:	add	r4, r0, r4
   29bd0:	ldr	r1, [sp, #56]	; 0x38
   29bd4:	add	r8, r2, r8
   29bd8:	mov	r0, #0
   29bdc:	cmp	r8, r1
   29be0:	blt	29ab8 <GetDataSlab+0x20f4>
   29be4:	b	47ffc <GetDataSlab+0x20638>
   29be8:	sub	r1, r6, #1
   29bec:	mov	r0, #1
   29bf0:	cmp	r1, #11
   29bf4:	bhi	457c8 <GetDataSlab+0x1de04>
   29bf8:	add	r2, pc, #4
   29bfc:	ldr	r1, [r2, r1, lsl #2]
   29c00:	add	pc, r2, r1
   29c04:	.word	0x00000030
   29c08:	.word	0x0000e864
   29c0c:	.word	0x0000ec34
   29c10:	.word	0x0000ef90
   29c14:	.word	0x0000f2f4
   29c18:	.word	0x0000f664
   29c1c:	.word	0x0000f9d0
   29c20:	.word	0x0001bbc4
   29c24:	.word	0x0000fd10
   29c28:	.word	0x0001bbc4
   29c2c:	.word	0x0001bbc4
   29c30:	.word	0x00010058
   29c34:	ldr	r0, [fp, #16]
   29c38:	mov	r7, lr
   29c3c:	mov	r4, #0
   29c40:	sub	lr, fp, #96	; 0x60
   29c44:	ldr	r9, [r0]
   29c48:	sub	r0, r9, #1
   29c4c:	str	r0, [fp, #-96]	; 0xffffffa0
   29c50:	ldr	r0, [fp, #8]
   29c54:	ldr	r0, [r0]
   29c58:	str	r0, [fp, #-176]	; 0xffffff50
   29c5c:	str	r0, [sp, #36]	; 0x24
   29c60:	ldr	r0, [fp, #24]
   29c64:	ldr	r1, [sl]
   29c68:	cmp	r0, #2
   29c6c:	str	r1, [sp, #40]	; 0x28
   29c70:	str	r1, [sp, #56]	; 0x38
   29c74:	blt	29dd8 <GetDataSlab+0x2414>
   29c78:	ldr	r0, [fp, #8]
   29c7c:	ldr	r3, [sp, #36]	; 0x24
   29c80:	mov	r6, #1
   29c84:	mov	sl, #0
   29c88:	mvn	r8, #15
   29c8c:	mov	r4, #0
   29c90:	mov	r1, r0
   29c94:	sub	r0, r0, #4
   29c98:	mov	r2, r3
   29c9c:	sub	ip, r1, #12
   29ca0:	ldr	r1, [sp, #40]	; 0x28
   29ca4:	str	r1, [sp, #56]	; 0x38
   29ca8:	ldr	r1, [fp, #16]
   29cac:	str	r2, [sp, #52]	; 0x34
   29cb0:	mov	r5, sl
   29cb4:	add	r5, sl, #1
   29cb8:	cmp	r5, #4
   29cbc:	ldr	r1, [r1, r6, lsl #2]
   29cc0:	str	r3, [r7, r6, lsl #2]
   29cc4:	sub	r2, r1, #1
   29cc8:	ldr	r1, [fp, #8]
   29ccc:	str	r2, [lr, r6, lsl #2]
   29cd0:	ldr	r1, [r1, r6, lsl #2]
   29cd4:	str	r1, [sp, #44]	; 0x2c
   29cd8:	bcs	29ce4 <GetDataSlab+0x2320>
   29cdc:	mov	r7, r6
   29ce0:	b	29d70 <GetDataSlab+0x23ac>
   29ce4:	vmov.i32	q9, #1	; 0x00000001
   29ce8:	vmov.i32	q10, #1	; 0x00000001
   29cec:	vmov.i32	q8, #1	; 0x00000001
   29cf0:	bic	lr, r5, #3
   29cf4:	vmov.32	d23[1], r1
   29cf8:	bic	sl, r6, #3
   29cfc:	mov	r1, ip
   29d00:	vmov.32	d18[0], r3
   29d04:	vmov.32	d20[0], r2
   29d08:	sub	r7, r6, lr
   29d0c:	vorr	d16, d18, d18
   29d10:	vmov.i32	q9, #1	; 0x00000001
   29d14:	vorr	d18, d20, d20
   29d18:	vld1.32	{d20-d21}, [r1], r8
   29d1c:	subs	sl, sl, #4
   29d20:	vrev64.32	q12, q10
   29d24:	vext.8	q12, q12, q12, #8
   29d28:	vext.8	q11, q11, q12, #12
   29d2c:	vmul.i32	q9, q9, q12
   29d30:	vmul.i32	q8, q11, q8
   29d34:	vorr	q11, q12, q12
   29d38:	bne	29d18 <GetDataSlab+0x2354>
   29d3c:	vext.8	q11, q9, q8, #8
   29d40:	vext.8	q12, q8, q8, #8
   29d44:	cmp	r5, lr
   29d48:	vmul.i32	q0, q9, q11
   29d4c:	vmul.i32	q1, q8, q12
   29d50:	vmul.i32	q8, q0, d0[1]
   29d54:	vmul.i32	q9, q1, d2[1]
   29d58:	vmov.32	r2, d16[0]
   29d5c:	vmov.32	r3, d18[0]
   29d60:	bne	29d6c <GetDataSlab+0x23a8>
   29d64:	mov	sl, r5
   29d68:	b	29d88 <GetDataSlab+0x23c4>
   29d6c:	vmov.32	r1, d20[0]
   29d70:	mov	sl, r5
   29d74:	mul	r3, r1, r3
   29d78:	ldr	r1, [r0, r7, lsl #2]
   29d7c:	subs	r7, r7, #1
   29d80:	mul	r2, r2, r1
   29d84:	bne	29d74 <GetDataSlab+0x23b0>
   29d88:	ldr	r1, [fp, #12]
   29d8c:	sub	r7, fp, #176	; 0xb0
   29d90:	sub	lr, fp, #96	; 0x60
   29d94:	add	ip, ip, #4
   29d98:	str	r2, [lr, r6, lsl #2]
   29d9c:	str	r3, [r7, r6, lsl #2]
   29da0:	ldr	r2, [sp, #52]	; 0x34
   29da4:	ldr	r1, [r1, r6, lsl #2]
   29da8:	mla	r4, r1, r2, r4
   29dac:	ldr	r1, [fp, #20]
   29db0:	ldr	r2, [sp, #56]	; 0x38
   29db4:	ldr	r1, [r1, r6, lsl #2]
   29db8:	add	r6, r6, #1
   29dbc:	mul	r2, r1, r2
   29dc0:	ldr	r1, [fp, #24]
   29dc4:	str	r2, [sp, #56]	; 0x38
   29dc8:	mov	r2, r3
   29dcc:	ldr	r3, [sp, #44]	; 0x2c
   29dd0:	cmp	r6, r1
   29dd4:	bne	29ca8 <GetDataSlab+0x22e4>
   29dd8:	ldr	r0, [sp, #48]	; 0x30
   29ddc:	cmp	r9, #1
   29de0:	mov	r2, lr
   29de4:	add	r5, r0, r4
   29de8:	bne	3c920 <GetDataSlab+0x14f5c>
   29dec:	ldr	r0, [sp, #56]	; 0x38
   29df0:	ldr	r9, [sp, #60]	; 0x3c
   29df4:	ldr	ip, [sp, #40]	; 0x28
   29df8:	ldr	r1, [fp, #20]
   29dfc:	cmp	r0, #1
   29e00:	ldr	r0, [fp, #12]
   29e04:	blt	47ff8 <GetDataSlab+0x20634>
   29e08:	add	r8, r0, #4
   29e0c:	sub	r0, fp, #136	; 0x88
   29e10:	add	sl, r1, #4
   29e14:	mov	lr, #0
   29e18:	orr	r6, r0, #4
   29e1c:	orr	r0, r2, #4
   29e20:	str	r0, [sp, #28]
   29e24:	bic	r0, ip, #1
   29e28:	str	r0, [sp, #32]
   29e2c:	lsl	r0, ip, #3
   29e30:	str	r0, [sp, #48]	; 0x30
   29e34:	mov	r0, #0
   29e38:	str	r0, [sp, #52]	; 0x34
   29e3c:	cmp	ip, #1
   29e40:	blt	29f18 <GetDataSlab+0x2554>
   29e44:	ldr	r0, [fp, #12]
   29e48:	mov	r7, #0
   29e4c:	ldr	r2, [r0]
   29e50:	beq	29ef0 <GetDataSlab+0x252c>
   29e54:	str	r2, [sp, #44]	; 0x2c
   29e58:	ldr	r0, [sp, #60]	; 0x3c
   29e5c:	ldr	r1, [sp, #48]	; 0x30
   29e60:	ldr	r2, [sp, #52]	; 0x34
   29e64:	mla	ip, r1, r2, r0
   29e68:	ldr	r0, [sp, #40]	; 0x28
   29e6c:	ldr	r1, [sp, #44]	; 0x2c
   29e70:	add	r0, r5, r0
   29e74:	add	r3, r5, r1
   29e78:	add	r0, r0, r1
   29e7c:	ldr	r1, [sp, #60]	; 0x3c
   29e80:	cmp	ip, r0
   29e84:	ldr	ip, [sp, #40]	; 0x28
   29e88:	bcs	29ea8 <GetDataSlab+0x24e4>
   29e8c:	ldr	r0, [sp, #48]	; 0x30
   29e90:	ldr	r2, [sp, #52]	; 0x34
   29e94:	mla	r0, r0, r2, r0
   29e98:	ldr	r2, [sp, #44]	; 0x2c
   29e9c:	add	r0, r1, r0
   29ea0:	cmp	r3, r0
   29ea4:	bcc	29ef0 <GetDataSlab+0x252c>
   29ea8:	ldr	r7, [sp, #32]
   29eac:	mov	ip, r9
   29eb0:	add	r1, sp, #192	; 0xc0
   29eb4:	add	r2, sp, #232	; 0xe8
   29eb8:	ldrh	r0, [r3], #2
   29ebc:	subs	r7, r7, #2
   29ec0:	strh	r0, [r1, #40]	; 0x28
   29ec4:	vld1.16	{d16[0]}, [r2 :16]
   29ec8:	vmovl.s8	q8, d16
   29ecc:	vmovl.s16	q8, d16
   29ed0:	vmovl.s32	q8, d16
   29ed4:	vst1.64	{d16-d17}, [ip]!
   29ed8:	bne	29eb8 <GetDataSlab+0x24f4>
   29edc:	ldr	ip, [sp, #40]	; 0x28
   29ee0:	ldr	r7, [sp, #32]
   29ee4:	ldr	r2, [sp, #44]	; 0x2c
   29ee8:	cmp	ip, r7
   29eec:	beq	29f18 <GetDataSlab+0x2554>
   29ef0:	sub	r1, ip, r7
   29ef4:	add	r0, r9, r7, lsl #3
   29ef8:	add	r7, r7, r2
   29efc:	add	r7, r5, r7
   29f00:	ldrsb	r2, [r7], #1
   29f04:	subs	r1, r1, #1
   29f08:	asr	r3, r2, #31
   29f0c:	strd	r2, [r0]
   29f10:	add	r0, r0, #8
   29f14:	bne	29f00 <GetDataSlab+0x253c>
   29f18:	ldr	r0, [sp, #36]	; 0x24
   29f1c:	add	r5, r5, r0
   29f20:	add	r4, r4, r0
   29f24:	ldr	r0, [fp, #24]
   29f28:	cmp	r0, #2
   29f2c:	blt	29fd8 <GetDataSlab+0x2614>
   29f30:	mov	r3, #0
   29f34:	ldr	r1, [r6, r3, lsl #2]
   29f38:	mov	r0, r3
   29f3c:	add	r1, r1, #1
   29f40:	str	r1, [r6, r3, lsl #2]
   29f44:	ldr	r2, [sl, r3, lsl #2]
   29f48:	sdiv	r3, r1, r2
   29f4c:	mls	r1, r3, r2, r1
   29f50:	cmp	r1, #0
   29f54:	bne	29fc8 <GetDataSlab+0x2604>
   29f58:	mov	r1, #0
   29f5c:	sub	r2, fp, #176	; 0xb0
   29f60:	str	r1, [r6, r0, lsl #2]
   29f64:	add	r1, r2, r0, lsl #2
   29f68:	ldr	r3, [r1, #4]
   29f6c:	sdiv	r1, r4, r3
   29f70:	mls	r7, r1, r3, r4
   29f74:	cmp	r7, #0
   29f78:	beq	29f98 <GetDataSlab+0x25d4>
   29f7c:	ldr	r1, [r2, r0, lsl #2]
   29f80:	ldr	r2, [r8, r0, lsl #2]
   29f84:	sub	r3, r3, r7
   29f88:	mla	r1, r2, r1, r3
   29f8c:	add	r4, r1, r4
   29f90:	add	r5, r5, r1
   29f94:	b	29fb0 <GetDataSlab+0x25ec>
   29f98:	ldr	r3, [r8, r0, lsl #2]
   29f9c:	cmp	r3, #0
   29fa0:	subne	r1, fp, #176	; 0xb0
   29fa4:	ldrne	r1, [r1, r0, lsl #2]
   29fa8:	mlane	r4, r1, r3, r4
   29fac:	mlane	r5, r1, r3, r5
   29fb0:	ldr	r1, [fp, #24]
   29fb4:	add	r3, r0, #1
   29fb8:	add	r0, r0, #2
   29fbc:	cmp	r0, r1
   29fc0:	blt	29f34 <GetDataSlab+0x2570>
   29fc4:	b	29fd8 <GetDataSlab+0x2614>
   29fc8:	ldr	r1, [sp, #28]
   29fcc:	ldr	r0, [r1, r0, lsl #2]
   29fd0:	add	r5, r5, r0
   29fd4:	add	r4, r0, r4
   29fd8:	ldr	r0, [sp, #48]	; 0x30
   29fdc:	ldr	r1, [sp, #56]	; 0x38
   29fe0:	add	lr, lr, ip
   29fe4:	add	r9, r9, r0
   29fe8:	ldr	r0, [sp, #52]	; 0x34
   29fec:	cmp	lr, r1
   29ff0:	add	r0, r0, #1
   29ff4:	str	r0, [sp, #52]	; 0x34
   29ff8:	mov	r0, #0
   29ffc:	blt	29e3c <GetDataSlab+0x2478>
   2a000:	b	47ffc <GetDataSlab+0x20638>
   2a004:	sub	r1, r6, #1
   2a008:	mov	r0, #1
   2a00c:	cmp	r1, #11
   2a010:	bhi	4686c <GetDataSlab+0x1eea8>
   2a014:	add	r2, pc, #4
   2a018:	ldr	r1, [r2, r1, lsl #2]
   2a01c:	add	pc, r2, r1
   2a020:	.word	0x00000030
   2a024:	.word	0x00010000
   2a028:	.word	0x000103c8
   2a02c:	.word	0x00010724
   2a030:	.word	0x00010a88
   2a034:	.word	0x00010df8
   2a038:	.word	0x00011164
   2a03c:	.word	0x0001c84c
   2a040:	.word	0x000114a4
   2a044:	.word	0x0001c84c
   2a048:	.word	0x0001c84c
   2a04c:	.word	0x000117ec
   2a050:	ldr	r0, [fp, #16]
   2a054:	mov	r7, lr
   2a058:	mov	r3, #0
   2a05c:	sub	lr, fp, #96	; 0x60
   2a060:	ldr	r9, [r0]
   2a064:	sub	r0, r9, #1
   2a068:	str	r0, [fp, #-96]	; 0xffffffa0
   2a06c:	ldr	r0, [fp, #8]
   2a070:	ldr	r0, [r0]
   2a074:	str	r0, [fp, #-176]	; 0xffffff50
   2a078:	str	r0, [sp, #36]	; 0x24
   2a07c:	ldr	r0, [fp, #24]
   2a080:	ldr	r1, [sl]
   2a084:	cmp	r0, #2
   2a088:	str	r1, [sp, #40]	; 0x28
   2a08c:	str	r1, [sp, #56]	; 0x38
   2a090:	blt	2a1f4 <GetDataSlab+0x2830>
   2a094:	ldr	r0, [fp, #8]
   2a098:	ldr	r2, [sp, #36]	; 0x24
   2a09c:	mov	r6, #1
   2a0a0:	mov	sl, #0
   2a0a4:	mvn	r8, #15
   2a0a8:	mov	r3, #0
   2a0ac:	mov	r1, r0
   2a0b0:	sub	r0, r0, #4
   2a0b4:	mov	r4, r2
   2a0b8:	sub	ip, r1, #12
   2a0bc:	ldr	r1, [sp, #40]	; 0x28
   2a0c0:	str	r1, [sp, #56]	; 0x38
   2a0c4:	ldr	r1, [fp, #16]
   2a0c8:	str	r4, [sp, #52]	; 0x34
   2a0cc:	mov	r5, sl
   2a0d0:	add	r5, sl, #1
   2a0d4:	cmp	r5, #4
   2a0d8:	ldr	r1, [r1, r6, lsl #2]
   2a0dc:	str	r2, [r7, r6, lsl #2]
   2a0e0:	sub	r4, r1, #1
   2a0e4:	ldr	r1, [fp, #8]
   2a0e8:	str	r4, [lr, r6, lsl #2]
   2a0ec:	ldr	r1, [r1, r6, lsl #2]
   2a0f0:	str	r1, [sp, #44]	; 0x2c
   2a0f4:	bcs	2a100 <GetDataSlab+0x273c>
   2a0f8:	mov	r7, r6
   2a0fc:	b	2a18c <GetDataSlab+0x27c8>
   2a100:	vmov.i32	q9, #1	; 0x00000001
   2a104:	vmov.i32	q10, #1	; 0x00000001
   2a108:	vmov.i32	q8, #1	; 0x00000001
   2a10c:	bic	lr, r5, #3
   2a110:	vmov.32	d23[1], r1
   2a114:	bic	sl, r6, #3
   2a118:	mov	r1, ip
   2a11c:	vmov.32	d18[0], r2
   2a120:	vmov.32	d20[0], r4
   2a124:	sub	r7, r6, lr
   2a128:	vorr	d16, d18, d18
   2a12c:	vmov.i32	q9, #1	; 0x00000001
   2a130:	vorr	d18, d20, d20
   2a134:	vld1.32	{d20-d21}, [r1], r8
   2a138:	subs	sl, sl, #4
   2a13c:	vrev64.32	q12, q10
   2a140:	vext.8	q12, q12, q12, #8
   2a144:	vext.8	q11, q11, q12, #12
   2a148:	vmul.i32	q9, q9, q12
   2a14c:	vmul.i32	q8, q11, q8
   2a150:	vorr	q11, q12, q12
   2a154:	bne	2a134 <GetDataSlab+0x2770>
   2a158:	vext.8	q11, q9, q8, #8
   2a15c:	vext.8	q12, q8, q8, #8
   2a160:	cmp	r5, lr
   2a164:	vmul.i32	q0, q9, q11
   2a168:	vmul.i32	q1, q8, q12
   2a16c:	vmul.i32	q8, q0, d0[1]
   2a170:	vmul.i32	q9, q1, d2[1]
   2a174:	vmov.32	r4, d16[0]
   2a178:	vmov.32	r2, d18[0]
   2a17c:	bne	2a188 <GetDataSlab+0x27c4>
   2a180:	mov	sl, r5
   2a184:	b	2a1a4 <GetDataSlab+0x27e0>
   2a188:	vmov.32	r1, d20[0]
   2a18c:	mov	sl, r5
   2a190:	mul	r2, r1, r2
   2a194:	ldr	r1, [r0, r7, lsl #2]
   2a198:	subs	r7, r7, #1
   2a19c:	mul	r4, r4, r1
   2a1a0:	bne	2a190 <GetDataSlab+0x27cc>
   2a1a4:	ldr	r1, [fp, #12]
   2a1a8:	sub	r7, fp, #176	; 0xb0
   2a1ac:	sub	lr, fp, #96	; 0x60
   2a1b0:	add	ip, ip, #4
   2a1b4:	str	r4, [lr, r6, lsl #2]
   2a1b8:	str	r2, [r7, r6, lsl #2]
   2a1bc:	ldr	r4, [sp, #52]	; 0x34
   2a1c0:	ldr	r1, [r1, r6, lsl #2]
   2a1c4:	mla	r3, r1, r4, r3
   2a1c8:	ldr	r1, [fp, #20]
   2a1cc:	ldr	r4, [sp, #56]	; 0x38
   2a1d0:	ldr	r1, [r1, r6, lsl #2]
   2a1d4:	add	r6, r6, #1
   2a1d8:	mul	r4, r1, r4
   2a1dc:	ldr	r1, [fp, #24]
   2a1e0:	str	r4, [sp, #56]	; 0x38
   2a1e4:	mov	r4, r2
   2a1e8:	ldr	r2, [sp, #44]	; 0x2c
   2a1ec:	cmp	r6, r1
   2a1f0:	bne	2a0c4 <GetDataSlab+0x2700>
   2a1f4:	ldr	r0, [sp, #48]	; 0x30
   2a1f8:	cmp	r9, #1
   2a1fc:	add	lr, r0, r3
   2a200:	bne	3cac4 <GetDataSlab+0x15100>
   2a204:	ldr	r0, [sp, #56]	; 0x38
   2a208:	ldr	r8, [sp, #60]	; 0x3c
   2a20c:	ldr	ip, [sp, #40]	; 0x28
   2a210:	ldr	r2, [fp, #20]
   2a214:	sub	r1, fp, #96	; 0x60
   2a218:	cmp	r0, #1
   2a21c:	blt	47ff8 <GetDataSlab+0x20634>
   2a220:	ldr	r0, [fp, #12]
   2a224:	add	r7, r2, #4
   2a228:	mov	r9, #0
   2a22c:	add	r6, r0, #4
   2a230:	sub	r0, fp, #136	; 0x88
   2a234:	orr	sl, r0, #4
   2a238:	orr	r0, r1, #4
   2a23c:	str	r0, [sp, #32]
   2a240:	bic	r0, ip, #1
   2a244:	str	r0, [sp, #44]	; 0x2c
   2a248:	lsl	r0, ip, #3
   2a24c:	str	r0, [sp, #48]	; 0x30
   2a250:	mov	r0, #0
   2a254:	str	r0, [sp, #52]	; 0x34
   2a258:	cmp	ip, #1
   2a25c:	blt	2a320 <GetDataSlab+0x295c>
   2a260:	ldr	r0, [fp, #12]
   2a264:	ldr	r4, [r0]
   2a268:	mov	r0, #0
   2a26c:	beq	2a2f8 <GetDataSlab+0x2934>
   2a270:	ldr	r1, [sp, #60]	; 0x3c
   2a274:	ldr	r2, [sp, #48]	; 0x30
   2a278:	ldr	r5, [sp, #52]	; 0x34
   2a27c:	mla	ip, r2, r5, r1
   2a280:	ldr	r1, [sp, #40]	; 0x28
   2a284:	ldr	r5, [sp, #60]	; 0x3c
   2a288:	add	r2, lr, r4
   2a28c:	add	r1, lr, r1
   2a290:	add	r1, r1, r4
   2a294:	cmp	ip, r1
   2a298:	bcs	2a2b8 <GetDataSlab+0x28f4>
   2a29c:	ldr	r1, [sp, #48]	; 0x30
   2a2a0:	ldr	ip, [sp, #52]	; 0x34
   2a2a4:	mla	r1, r1, ip, r1
   2a2a8:	ldr	ip, [sp, #40]	; 0x28
   2a2ac:	add	r1, r5, r1
   2a2b0:	cmp	r2, r1
   2a2b4:	bcc	2a2f8 <GetDataSlab+0x2934>
   2a2b8:	ldr	r0, [sp, #44]	; 0x2c
   2a2bc:	mov	ip, r8
   2a2c0:	sub	r5, fp, #216	; 0xd8
   2a2c4:	ldrh	r1, [r2], #2
   2a2c8:	subs	r0, r0, #2
   2a2cc:	strh	r1, [fp, #-216]	; 0xffffff28
   2a2d0:	vld1.16	{d16[0]}, [r5 :16]
   2a2d4:	vmovl.s8	q8, d16
   2a2d8:	vmovl.s16	q8, d16
   2a2dc:	vmovl.s32	q8, d16
   2a2e0:	vst1.64	{d16-d17}, [ip]!
   2a2e4:	bne	2a2c4 <GetDataSlab+0x2900>
   2a2e8:	ldr	ip, [sp, #40]	; 0x28
   2a2ec:	ldr	r0, [sp, #44]	; 0x2c
   2a2f0:	cmp	ip, r0
   2a2f4:	beq	2a320 <GetDataSlab+0x295c>
   2a2f8:	sub	r2, ip, r0
   2a2fc:	add	r1, r8, r0, lsl #3
   2a300:	add	r0, r0, r4
   2a304:	add	r0, lr, r0
   2a308:	ldrsb	r4, [r0], #1
   2a30c:	subs	r2, r2, #1
   2a310:	asr	r5, r4, #31
   2a314:	strd	r4, [r1]
   2a318:	add	r1, r1, #8
   2a31c:	bne	2a308 <GetDataSlab+0x2944>
   2a320:	ldr	r0, [sp, #36]	; 0x24
   2a324:	add	lr, lr, r0
   2a328:	add	r3, r3, r0
   2a32c:	ldr	r0, [fp, #24]
   2a330:	cmp	r0, #2
   2a334:	blt	2a3e0 <GetDataSlab+0x2a1c>
   2a338:	mov	r1, #0
   2a33c:	mov	r0, r1
   2a340:	ldr	r1, [sl, r1, lsl #2]
   2a344:	add	r1, r1, #1
   2a348:	str	r1, [sl, r0, lsl #2]
   2a34c:	ldr	r2, [r7, r0, lsl #2]
   2a350:	sdiv	r5, r1, r2
   2a354:	mls	r1, r5, r2, r1
   2a358:	cmp	r1, #0
   2a35c:	bne	2a3d0 <GetDataSlab+0x2a0c>
   2a360:	mov	r1, #0
   2a364:	sub	r5, fp, #176	; 0xb0
   2a368:	str	r1, [sl, r0, lsl #2]
   2a36c:	add	r1, r5, r0, lsl #2
   2a370:	ldr	r1, [r1, #4]
   2a374:	sdiv	r2, r3, r1
   2a378:	mls	r2, r2, r1, r3
   2a37c:	cmp	r2, #0
   2a380:	beq	2a3a0 <GetDataSlab+0x29dc>
   2a384:	ldr	r5, [r5, r0, lsl #2]
   2a388:	ldr	r4, [r6, r0, lsl #2]
   2a38c:	sub	r1, r1, r2
   2a390:	mla	r1, r4, r5, r1
   2a394:	add	r3, r1, r3
   2a398:	add	lr, lr, r1
   2a39c:	b	2a3b8 <GetDataSlab+0x29f4>
   2a3a0:	ldr	r1, [r6, r0, lsl #2]
   2a3a4:	cmp	r1, #0
   2a3a8:	subne	r2, fp, #176	; 0xb0
   2a3ac:	ldrne	r2, [r2, r0, lsl #2]
   2a3b0:	mlane	r3, r2, r1, r3
   2a3b4:	mlane	lr, r2, r1, lr
   2a3b8:	ldr	r2, [fp, #24]
   2a3bc:	add	r1, r0, #1
   2a3c0:	add	r0, r0, #2
   2a3c4:	cmp	r0, r2
   2a3c8:	blt	2a33c <GetDataSlab+0x2978>
   2a3cc:	b	2a3e0 <GetDataSlab+0x2a1c>
   2a3d0:	ldr	r1, [sp, #32]
   2a3d4:	ldr	r0, [r1, r0, lsl #2]
   2a3d8:	add	lr, lr, r0
   2a3dc:	add	r3, r0, r3
   2a3e0:	ldr	r0, [sp, #48]	; 0x30
   2a3e4:	ldr	r1, [sp, #56]	; 0x38
   2a3e8:	add	r9, r9, ip
   2a3ec:	add	r8, r8, r0
   2a3f0:	ldr	r0, [sp, #52]	; 0x34
   2a3f4:	cmp	r9, r1
   2a3f8:	add	r0, r0, #1
   2a3fc:	str	r0, [sp, #52]	; 0x34
   2a400:	mov	r0, #0
   2a404:	blt	2a258 <GetDataSlab+0x2894>
   2a408:	b	47ffc <GetDataSlab+0x20638>
   2a40c:	cmp	r9, #0
   2a410:	beq	27b1c <GetDataSlab+0x158>
   2a414:	ldr	r1, [sp, #28]
   2a418:	cmp	r1, #1
   2a41c:	bne	27b1c <GetDataSlab+0x158>
   2a420:	ldr	r2, [fp, #28]
   2a424:	ldr	r0, [sp, #60]	; 0x3c
   2a428:	ldr	r1, [sp, #48]	; 0x30
   2a42c:	bl	181c <memcpy@plt>
   2a430:	mov	r0, #0
   2a434:	b	47ffc <GetDataSlab+0x20638>
   2a438:	ldr	r0, [sp, #40]	; 0x28
   2a43c:	sub	r1, r0, #1
   2a440:	mov	r0, #1
   2a444:	cmp	r1, #11
   2a448:	bhi	491fc <GetDataSlab+0x21838>
   2a44c:	add	r2, pc, #20
   2a450:	ldr	r3, [sp, #48]	; 0x30
   2a454:	ldr	r5, [sp, #32]
   2a458:	ldr	r7, [sp, #24]
   2a45c:	ldr	r6, [sp, #20]
   2a460:	ldr	r1, [r2, r1, lsl #2]
   2a464:	add	pc, r2, r1
   2a468:	.word	0x00000030
   2a46c:	.word	0x0001e5b4
   2a470:	.word	0x0001e714
   2a474:	.word	0x0001e804
   2a478:	.word	0x0001e8f4
   2a47c:	.word	0x0001e9f0
   2a480:	.word	0x0001eaec
   2a484:	.word	0x0001ed94
   2a488:	.word	0x0001eb6c
   2a48c:	.word	0x0001ed94
   2a490:	.word	0x0001ed94
   2a494:	.word	0x0001ec58
   2a498:	ldr	r0, [sp, #52]	; 0x34
   2a49c:	cmp	r0, #1
   2a4a0:	blt	2a430 <GetDataSlab+0x2a6c>
   2a4a4:	ldr	r1, [sp, #16]
   2a4a8:	mul	r8, ip, r4
   2a4ac:	mov	r6, #0
   2a4b0:	add	r9, sp, #80	; 0x50
   2a4b4:	mla	r0, r1, r4, r7
   2a4b8:	add	r2, r3, r0
   2a4bc:	ldr	r3, [sp, #56]	; 0x38
   2a4c0:	str	r0, [sp, #36]	; 0x24
   2a4c4:	add	r0, r3, r7
   2a4c8:	cmp	r3, #3
   2a4cc:	bic	sl, r3, #3
   2a4d0:	mla	r0, r1, r4, r0
   2a4d4:	mov	r1, #0
   2a4d8:	str	r0, [sp, #40]	; 0x28
   2a4dc:	sub	r0, r5, #1
   2a4e0:	movwhi	r1, #1
   2a4e4:	clz	r0, r0
   2a4e8:	lsr	r0, r0, #5
   2a4ec:	and	r0, r1, r0
   2a4f0:	lsl	r1, r5, #2
   2a4f4:	str	r0, [sp, #44]	; 0x2c
   2a4f8:	ldr	r0, [sp, #56]	; 0x38
   2a4fc:	cmp	r0, #1
   2a500:	blt	2a5dc <GetDataSlab+0x2c18>
   2a504:	ldr	r0, [sp, #44]	; 0x2c
   2a508:	ldr	ip, [sp, #60]	; 0x3c
   2a50c:	mov	r3, #0
   2a510:	cmp	r0, #0
   2a514:	beq	2a5a0 <GetDataSlab+0x2bdc>
   2a518:	ldr	r0, [sp, #40]	; 0x28
   2a51c:	ldr	r7, [sp, #48]	; 0x30
   2a520:	ldr	r4, [sp, #32]
   2a524:	mla	r0, r8, r6, r0
   2a528:	add	r0, r7, r0
   2a52c:	cmp	r0, ip
   2a530:	bls	2a558 <GetDataSlab+0x2b94>
   2a534:	ldr	r0, [sp, #36]	; 0x24
   2a538:	ldr	r7, [sp, #48]	; 0x30
   2a53c:	mla	r0, r8, r6, r0
   2a540:	add	r0, r7, r0
   2a544:	ldr	r7, [sp, #56]	; 0x38
   2a548:	add	r5, ip, r7, lsl #2
   2a54c:	cmp	r0, r5
   2a550:	mov	r0, ip
   2a554:	bcc	2a5a8 <GetDataSlab+0x2be4>
   2a558:	add	r0, ip, sl, lsl #2
   2a55c:	mov	r3, sl
   2a560:	mov	r5, r2
   2a564:	ldr	lr, [r5], r1
   2a568:	subs	r3, r3, #4
   2a56c:	str	lr, [sp, #80]	; 0x50
   2a570:	vld1.32	{d16[0]}, [r9 :32]
   2a574:	vmovl.s8	q8, d16
   2a578:	vmovl.s16	q8, d16
   2a57c:	vcvt.f32.s32	q8, q8
   2a580:	vst1.32	{d16-d17}, [ip]!
   2a584:	bne	2a564 <GetDataSlab+0x2ba0>
   2a588:	ldr	r3, [sp, #56]	; 0x38
   2a58c:	ldr	ip, [sp, #60]	; 0x3c
   2a590:	cmp	r3, sl
   2a594:	mov	r3, sl
   2a598:	bne	2a5a8 <GetDataSlab+0x2be4>
   2a59c:	b	2a5d0 <GetDataSlab+0x2c0c>
   2a5a0:	ldr	r4, [sp, #32]
   2a5a4:	mov	r0, ip
   2a5a8:	ldr	r7, [sp, #56]	; 0x38
   2a5ac:	mla	r5, r4, r3, r2
   2a5b0:	sub	r3, r7, r3
   2a5b4:	ldrsb	r7, [r5], r4
   2a5b8:	subs	r3, r3, #1
   2a5bc:	vmov	s0, r7
   2a5c0:	vcvt.f32.s32	s0, s0
   2a5c4:	vstr	s0, [r0]
   2a5c8:	add	r0, r0, #4
   2a5cc:	bne	2a5b4 <GetDataSlab+0x2bf0>
   2a5d0:	ldr	r0, [sp, #56]	; 0x38
   2a5d4:	add	ip, ip, r0, lsl #2
   2a5d8:	str	ip, [sp, #60]	; 0x3c
   2a5dc:	ldr	r3, [sp, #52]	; 0x34
   2a5e0:	add	r6, r6, #1
   2a5e4:	add	r2, r2, r8
   2a5e8:	mov	r0, #0
   2a5ec:	cmp	r6, r3
   2a5f0:	bne	2a4f8 <GetDataSlab+0x2b34>
   2a5f4:	b	47ffc <GetDataSlab+0x20638>
   2a5f8:	ldr	ip, [sp, #40]	; 0x28
   2a5fc:	mov	r0, #1
   2a600:	sub	r2, ip, #1
   2a604:	cmp	r2, #11
   2a608:	bhi	4cc50 <GetDataSlab+0x2528c>
   2a60c:	add	r7, pc, #16
   2a610:	ldr	r5, [sp, #48]	; 0x30
   2a614:	ldr	r6, [sp, #56]	; 0x38
   2a618:	ldr	r1, [sp, #52]	; 0x34
   2a61c:	ldr	r2, [r7, r2, lsl #2]
   2a620:	add	pc, r7, r2
   2a624:	.word	0x00000030
   2a628:	.word	0x0001ed2c
   2a62c:	.word	0x0001edc4
   2a630:	.word	0x0001ee60
   2a634:	.word	0x0001eefc
   2a638:	.word	0x0001ef98
   2a63c:	.word	0x0001f034
   2a640:	.word	0x00022634
   2a644:	.word	0x0001f0dc
   2a648:	.word	0x00022634
   2a64c:	.word	0x00022634
   2a650:	.word	0x0001f184
   2a654:	cmp	r1, #1
   2a658:	blt	2a430 <GetDataSlab+0x2a6c>
   2a65c:	ldr	r0, [sp, #16]
   2a660:	ldr	r1, [sp, #24]
   2a664:	ldr	r6, [sp, #28]
   2a668:	mov	r7, #0
   2a66c:	mla	r0, r0, r4, r1
   2a670:	add	r2, r5, r0
   2a674:	ldr	r0, [sp, #56]	; 0x38
   2a678:	cmp	r0, #1
   2a67c:	blt	2a6cc <GetDataSlab+0x2d08>
   2a680:	ldr	r5, [sp, #60]	; 0x3c
   2a684:	ldr	r4, [fp, #8]
   2a688:	mov	r0, #0
   2a68c:	ldr	r6, [r8]
   2a690:	mul	r6, r6, r0
   2a694:	ldrb	r6, [r2, r6]
   2a698:	strb	r6, [r5, r0]
   2a69c:	add	r0, r0, #1
   2a6a0:	ldr	r6, [r3]
   2a6a4:	cmp	r0, r6
   2a6a8:	blt	2a68c <GetDataSlab+0x2cc8>
   2a6ac:	add	r5, r5, r0
   2a6b0:	ldr	r0, [sp, #36]	; 0x24
   2a6b4:	str	r6, [sp, #56]	; 0x38
   2a6b8:	ldr	r4, [r4]
   2a6bc:	ldr	r6, [lr]
   2a6c0:	str	r5, [sp, #60]	; 0x3c
   2a6c4:	ldr	r1, [r0]
   2a6c8:	b	2a6d0 <GetDataSlab+0x2d0c>
   2a6cc:	ldr	r1, [sp, #52]	; 0x34
   2a6d0:	add	r7, r7, #1
   2a6d4:	mla	r2, r4, r6, r2
   2a6d8:	mov	r0, #0
   2a6dc:	str	r1, [sp, #52]	; 0x34
   2a6e0:	cmp	r7, r1
   2a6e4:	blt	2a674 <GetDataSlab+0x2cb0>
   2a6e8:	b	47ffc <GetDataSlab+0x20638>
   2a6ec:	ldr	ip, [sp, #40]	; 0x28
   2a6f0:	mov	r0, #1
   2a6f4:	sub	r2, ip, #1
   2a6f8:	cmp	r2, #11
   2a6fc:	bhi	4cd14 <GetDataSlab+0x25350>
   2a700:	add	r7, pc, #16
   2a704:	ldr	r5, [sp, #48]	; 0x30
   2a708:	ldr	r6, [sp, #56]	; 0x38
   2a70c:	ldr	r1, [sp, #52]	; 0x34
   2a710:	ldr	r2, [r7, r2, lsl #2]
   2a714:	add	pc, r7, r2
   2a718:	.word	0x00000030
   2a71c:	.word	0x0001f130
   2a720:	.word	0x0001f1c8
   2a724:	.word	0x0001f264
   2a728:	.word	0x0001f300
   2a72c:	.word	0x0001f39c
   2a730:	.word	0x0001f438
   2a734:	.word	0x00022604
   2a738:	.word	0x0001f4e0
   2a73c:	.word	0x00022604
   2a740:	.word	0x00022604
   2a744:	.word	0x0001f588
   2a748:	cmp	r1, #1
   2a74c:	blt	2a430 <GetDataSlab+0x2a6c>
   2a750:	ldr	r0, [sp, #16]
   2a754:	ldr	r1, [sp, #24]
   2a758:	ldr	r6, [sp, #28]
   2a75c:	mov	r7, #0
   2a760:	mla	r0, r0, r4, r1
   2a764:	add	r2, r5, r0
   2a768:	ldr	r0, [sp, #56]	; 0x38
   2a76c:	cmp	r0, #1
   2a770:	blt	2a7c0 <GetDataSlab+0x2dfc>
   2a774:	ldr	r5, [sp, #60]	; 0x3c
   2a778:	ldr	r4, [fp, #8]
   2a77c:	mov	r0, #0
   2a780:	ldr	r6, [r8]
   2a784:	mul	r6, r6, r0
   2a788:	ldrb	r6, [r2, r6]
   2a78c:	strb	r6, [r5, r0]
   2a790:	add	r0, r0, #1
   2a794:	ldr	r6, [r3]
   2a798:	cmp	r0, r6
   2a79c:	blt	2a780 <GetDataSlab+0x2dbc>
   2a7a0:	add	r5, r5, r0
   2a7a4:	ldr	r0, [sp, #36]	; 0x24
   2a7a8:	str	r6, [sp, #56]	; 0x38
   2a7ac:	ldr	r4, [r4]
   2a7b0:	ldr	r6, [lr]
   2a7b4:	str	r5, [sp, #60]	; 0x3c
   2a7b8:	ldr	r1, [r0]
   2a7bc:	b	2a7c4 <GetDataSlab+0x2e00>
   2a7c0:	ldr	r1, [sp, #52]	; 0x34
   2a7c4:	add	r7, r7, #1
   2a7c8:	mla	r2, r4, r6, r2
   2a7cc:	mov	r0, #0
   2a7d0:	str	r1, [sp, #52]	; 0x34
   2a7d4:	cmp	r7, r1
   2a7d8:	blt	2a768 <GetDataSlab+0x2da4>
   2a7dc:	b	47ffc <GetDataSlab+0x20638>
   2a7e0:	ldr	r0, [sp, #40]	; 0x28
   2a7e4:	sub	r1, r0, #1
   2a7e8:	mov	r0, #1
   2a7ec:	cmp	r1, #11
   2a7f0:	bhi	4a534 <GetDataSlab+0x22b70>
   2a7f4:	add	r2, pc, #16
   2a7f8:	ldr	r3, [sp, #48]	; 0x30
   2a7fc:	ldr	r7, [sp, #32]
   2a800:	ldr	r6, [sp, #24]
   2a804:	ldr	r1, [r2, r1, lsl #2]
   2a808:	add	pc, r2, r1
   2a80c:	.word	0x00000030
   2a810:	.word	0x0001f534
   2a814:	.word	0x0001f694
   2a818:	.word	0x0001f7c4
   2a81c:	.word	0x0001f8f4
   2a820:	.word	0x0001f9d4
   2a824:	.word	0x0001fab4
   2a828:	.word	0x0001fd28
   2a82c:	.word	0x0001fba4
   2a830:	.word	0x0001fd28
   2a834:	.word	0x0001fd28
   2a838:	.word	0x0001fc30
   2a83c:	ldr	r0, [sp, #52]	; 0x34
   2a840:	cmp	r0, #1
   2a844:	blt	2a430 <GetDataSlab+0x2a6c>
   2a848:	ldr	r1, [sp, #16]
   2a84c:	mul	sl, ip, r4
   2a850:	add	r9, sp, #152	; 0x98
   2a854:	mla	r0, r1, r4, r6
   2a858:	add	r2, r3, r0
   2a85c:	ldr	r3, [sp, #56]	; 0x38
   2a860:	str	r0, [sp, #20]
   2a864:	add	r0, r3, r6
   2a868:	cmp	r3, #7
   2a86c:	mov	r6, #0
   2a870:	mla	r0, r1, r4, r0
   2a874:	mov	r1, #0
   2a878:	str	r0, [sp, #40]	; 0x28
   2a87c:	sub	r0, r7, #1
   2a880:	movwhi	r1, #1
   2a884:	clz	r0, r0
   2a888:	lsr	r0, r0, #5
   2a88c:	and	r0, r1, r0
   2a890:	lsl	r1, r7, #3
   2a894:	str	r0, [sp, #44]	; 0x2c
   2a898:	bic	r0, r3, #7
   2a89c:	str	r0, [sp, #36]	; 0x24
   2a8a0:	ldr	r0, [sp, #56]	; 0x38
   2a8a4:	cmp	r0, #1
   2a8a8:	blt	2a980 <GetDataSlab+0x2fbc>
   2a8ac:	ldr	r0, [sp, #44]	; 0x2c
   2a8b0:	ldr	ip, [sp, #60]	; 0x3c
   2a8b4:	mov	r3, #0
   2a8b8:	cmp	r0, #0
   2a8bc:	beq	2a950 <GetDataSlab+0x2f8c>
   2a8c0:	ldr	r0, [sp, #40]	; 0x28
   2a8c4:	ldr	r7, [sp, #48]	; 0x30
   2a8c8:	ldr	r4, [sp, #32]
   2a8cc:	mla	r0, sl, r6, r0
   2a8d0:	add	r0, r7, r0
   2a8d4:	cmp	r0, ip
   2a8d8:	bls	2a900 <GetDataSlab+0x2f3c>
   2a8dc:	ldr	r0, [sp, #20]
   2a8e0:	ldr	r7, [sp, #48]	; 0x30
   2a8e4:	mla	r0, sl, r6, r0
   2a8e8:	add	r0, r7, r0
   2a8ec:	ldr	r7, [sp, #56]	; 0x38
   2a8f0:	add	r5, ip, r7, lsl #1
   2a8f4:	cmp	r0, r5
   2a8f8:	mov	r0, ip
   2a8fc:	bcc	2a958 <GetDataSlab+0x2f94>
   2a900:	ldr	r3, [sp, #36]	; 0x24
   2a904:	mov	r5, r2
   2a908:	add	r0, ip, r3, lsl #1
   2a90c:	ldr	lr, [r5]
   2a910:	ldr	r8, [r5, #4]
   2a914:	add	r5, r5, r1
   2a918:	subs	r3, r3, #8
   2a91c:	str	r8, [sp, #156]	; 0x9c
   2a920:	str	lr, [sp, #152]	; 0x98
   2a924:	vld1.8	{d16}, [r9 :64]
   2a928:	vmovl.s8	q8, d16
   2a92c:	vst1.16	{d16-d17}, [ip]!
   2a930:	bne	2a90c <GetDataSlab+0x2f48>
   2a934:	ldr	r3, [sp, #56]	; 0x38
   2a938:	ldr	r7, [sp, #36]	; 0x24
   2a93c:	ldr	ip, [sp, #60]	; 0x3c
   2a940:	cmp	r3, r7
   2a944:	mov	r3, r7
   2a948:	bne	2a958 <GetDataSlab+0x2f94>
   2a94c:	b	2a974 <GetDataSlab+0x2fb0>
   2a950:	ldr	r4, [sp, #32]
   2a954:	mov	r0, ip
   2a958:	ldr	r7, [sp, #56]	; 0x38
   2a95c:	mla	r5, r4, r3, r2
   2a960:	sub	r3, r7, r3
   2a964:	ldrsb	r7, [r5], r4
   2a968:	subs	r3, r3, #1
   2a96c:	strh	r7, [r0], #2
   2a970:	bne	2a964 <GetDataSlab+0x2fa0>
   2a974:	ldr	r0, [sp, #56]	; 0x38
   2a978:	add	ip, ip, r0, lsl #1
   2a97c:	str	ip, [sp, #60]	; 0x3c
   2a980:	ldr	r3, [sp, #52]	; 0x34
   2a984:	add	r6, r6, #1
   2a988:	add	r2, r2, sl
   2a98c:	mov	r0, #0
   2a990:	cmp	r6, r3
   2a994:	bne	2a8a0 <GetDataSlab+0x2edc>
   2a998:	b	47ffc <GetDataSlab+0x20638>
   2a99c:	ldr	r0, [sp, #40]	; 0x28
   2a9a0:	sub	r1, r0, #1
   2a9a4:	mov	r0, #1
   2a9a8:	cmp	r1, #11
   2a9ac:	bhi	4ae24 <GetDataSlab+0x23460>
   2a9b0:	add	r2, pc, #16
   2a9b4:	ldr	r3, [sp, #48]	; 0x30
   2a9b8:	ldr	r7, [sp, #32]
   2a9bc:	ldr	r6, [sp, #24]
   2a9c0:	ldr	r1, [r2, r1, lsl #2]
   2a9c4:	add	pc, r2, r1
   2a9c8:	.word	0x00000030
   2a9cc:	.word	0x0001fc68
   2a9d0:	.word	0x0001fdc8
   2a9d4:	.word	0x0001fef8
   2a9d8:	.word	0x00020028
   2a9dc:	.word	0x00020108
   2a9e0:	.word	0x000201e8
   2a9e4:	.word	0x0002045c
   2a9e8:	.word	0x000202d8
   2a9ec:	.word	0x0002045c
   2a9f0:	.word	0x0002045c
   2a9f4:	.word	0x00020364
   2a9f8:	ldr	r0, [sp, #52]	; 0x34
   2a9fc:	cmp	r0, #1
   2aa00:	blt	2a430 <GetDataSlab+0x2a6c>
   2aa04:	ldr	r1, [sp, #16]
   2aa08:	mul	sl, ip, r4
   2aa0c:	add	r9, sp, #168	; 0xa8
   2aa10:	mla	r0, r1, r4, r6
   2aa14:	add	r2, r3, r0
   2aa18:	ldr	r3, [sp, #56]	; 0x38
   2aa1c:	str	r0, [sp, #20]
   2aa20:	add	r0, r3, r6
   2aa24:	cmp	r3, #7
   2aa28:	mov	r6, #0
   2aa2c:	mla	r0, r1, r4, r0
   2aa30:	mov	r1, #0
   2aa34:	str	r0, [sp, #40]	; 0x28
   2aa38:	sub	r0, r7, #1
   2aa3c:	movwhi	r1, #1
   2aa40:	clz	r0, r0
   2aa44:	lsr	r0, r0, #5
   2aa48:	and	r0, r1, r0
   2aa4c:	lsl	r1, r7, #3
   2aa50:	str	r0, [sp, #44]	; 0x2c
   2aa54:	bic	r0, r3, #7
   2aa58:	str	r0, [sp, #36]	; 0x24
   2aa5c:	ldr	r0, [sp, #56]	; 0x38
   2aa60:	cmp	r0, #1
   2aa64:	blt	2ab3c <GetDataSlab+0x3178>
   2aa68:	ldr	r0, [sp, #44]	; 0x2c
   2aa6c:	ldr	ip, [sp, #60]	; 0x3c
   2aa70:	mov	r3, #0
   2aa74:	cmp	r0, #0
   2aa78:	beq	2ab0c <GetDataSlab+0x3148>
   2aa7c:	ldr	r0, [sp, #40]	; 0x28
   2aa80:	ldr	r7, [sp, #48]	; 0x30
   2aa84:	ldr	r4, [sp, #32]
   2aa88:	mla	r0, sl, r6, r0
   2aa8c:	add	r0, r7, r0
   2aa90:	cmp	r0, ip
   2aa94:	bls	2aabc <GetDataSlab+0x30f8>
   2aa98:	ldr	r0, [sp, #20]
   2aa9c:	ldr	r7, [sp, #48]	; 0x30
   2aaa0:	mla	r0, sl, r6, r0
   2aaa4:	add	r0, r7, r0
   2aaa8:	ldr	r7, [sp, #56]	; 0x38
   2aaac:	add	r5, ip, r7, lsl #1
   2aab0:	cmp	r0, r5
   2aab4:	mov	r0, ip
   2aab8:	bcc	2ab14 <GetDataSlab+0x3150>
   2aabc:	ldr	r3, [sp, #36]	; 0x24
   2aac0:	mov	r5, r2
   2aac4:	add	r0, ip, r3, lsl #1
   2aac8:	ldr	lr, [r5]
   2aacc:	ldr	r8, [r5, #4]
   2aad0:	add	r5, r5, r1
   2aad4:	subs	r3, r3, #8
   2aad8:	str	r8, [sp, #172]	; 0xac
   2aadc:	str	lr, [sp, #168]	; 0xa8
   2aae0:	vld1.8	{d16}, [r9 :64]
   2aae4:	vmovl.s8	q8, d16
   2aae8:	vst1.16	{d16-d17}, [ip]!
   2aaec:	bne	2aac8 <GetDataSlab+0x3104>
   2aaf0:	ldr	r3, [sp, #56]	; 0x38
   2aaf4:	ldr	r7, [sp, #36]	; 0x24
   2aaf8:	ldr	ip, [sp, #60]	; 0x3c
   2aafc:	cmp	r3, r7
   2ab00:	mov	r3, r7
   2ab04:	bne	2ab14 <GetDataSlab+0x3150>
   2ab08:	b	2ab30 <GetDataSlab+0x316c>
   2ab0c:	ldr	r4, [sp, #32]
   2ab10:	mov	r0, ip
   2ab14:	ldr	r7, [sp, #56]	; 0x38
   2ab18:	mla	r5, r4, r3, r2
   2ab1c:	sub	r3, r7, r3
   2ab20:	ldrsb	r7, [r5], r4
   2ab24:	subs	r3, r3, #1
   2ab28:	strh	r7, [r0], #2
   2ab2c:	bne	2ab20 <GetDataSlab+0x315c>
   2ab30:	ldr	r0, [sp, #56]	; 0x38
   2ab34:	add	ip, ip, r0, lsl #1
   2ab38:	str	ip, [sp, #60]	; 0x3c
   2ab3c:	ldr	r3, [sp, #52]	; 0x34
   2ab40:	add	r6, r6, #1
   2ab44:	add	r2, r2, sl
   2ab48:	mov	r0, #0
   2ab4c:	cmp	r6, r3
   2ab50:	bne	2aa5c <GetDataSlab+0x3098>
   2ab54:	b	47ffc <GetDataSlab+0x20638>
   2ab58:	ldr	r9, [sp, #40]	; 0x28
   2ab5c:	mov	r0, #1
   2ab60:	sub	r2, r9, #1
   2ab64:	cmp	r2, #11
   2ab68:	bhi	4cdd8 <GetDataSlab+0x25414>
   2ab6c:	add	r7, pc, #16
   2ab70:	ldr	r1, [sp, #48]	; 0x30
   2ab74:	ldr	r5, [sp, #56]	; 0x38
   2ab78:	ldr	r6, [sp, #52]	; 0x34
   2ab7c:	ldr	r2, [r7, r2, lsl #2]
   2ab80:	add	pc, r7, r2
   2ab84:	.word	0x00000030
   2ab88:	.word	0x0002039c
   2ab8c:	.word	0x00020438
   2ab90:	.word	0x000204dc
   2ab94:	.word	0x00020580
   2ab98:	.word	0x00020620
   2ab9c:	.word	0x000206c0
   2aba0:	.word	0x0002225c
   2aba4:	.word	0x0002076c
   2aba8:	.word	0x0002225c
   2abac:	.word	0x0002225c
   2abb0:	.word	0x00020818
   2abb4:	cmp	r6, #1
   2abb8:	blt	2a430 <GetDataSlab+0x2a6c>
   2abbc:	ldr	r0, [sp, #16]
   2abc0:	ldr	r2, [sp, #24]
   2abc4:	mov	r7, #0
   2abc8:	mla	r0, r0, r4, r2
   2abcc:	add	r2, r1, r0
   2abd0:	ldr	r0, [sp, #56]	; 0x38
   2abd4:	cmp	r0, #1
   2abd8:	blt	2ac30 <GetDataSlab+0x326c>
   2abdc:	ldr	r4, [sp, #60]	; 0x3c
   2abe0:	ldr	ip, [fp, #8]
   2abe4:	mov	r0, #0
   2abe8:	mov	r6, #0
   2abec:	ldr	r5, [r8]
   2abf0:	add	r0, r0, #4
   2abf4:	mla	r5, r5, r6, r2
   2abf8:	ldrsb	r5, [r5]
   2abfc:	str	r5, [r4, r6, lsl #2]
   2ac00:	add	r6, r6, #1
   2ac04:	ldr	r5, [r3]
   2ac08:	cmp	r6, r5
   2ac0c:	blt	2abec <GetDataSlab+0x3228>
   2ac10:	add	r4, r4, r0
   2ac14:	ldr	r0, [sp, #36]	; 0x24
   2ac18:	str	r5, [sp, #56]	; 0x38
   2ac1c:	str	r4, [sp, #60]	; 0x3c
   2ac20:	ldr	r4, [ip]
   2ac24:	ldr	ip, [lr]
   2ac28:	ldr	r1, [r0]
   2ac2c:	b	2ac34 <GetDataSlab+0x3270>
   2ac30:	ldr	r1, [sp, #52]	; 0x34
   2ac34:	add	r7, r7, #1
   2ac38:	mla	r2, r4, ip, r2
   2ac3c:	mov	r0, #0
   2ac40:	str	r1, [sp, #52]	; 0x34
   2ac44:	cmp	r7, r1
   2ac48:	blt	2abd0 <GetDataSlab+0x320c>
   2ac4c:	b	47ffc <GetDataSlab+0x20638>
   2ac50:	ldr	r9, [sp, #40]	; 0x28
   2ac54:	mov	r0, #1
   2ac58:	sub	r2, r9, #1
   2ac5c:	cmp	r2, #11
   2ac60:	bhi	4ce94 <GetDataSlab+0x254d0>
   2ac64:	add	r7, pc, #16
   2ac68:	ldr	r1, [sp, #48]	; 0x30
   2ac6c:	ldr	r5, [sp, #56]	; 0x38
   2ac70:	ldr	r6, [sp, #52]	; 0x34
   2ac74:	ldr	r2, [r7, r2, lsl #2]
   2ac78:	add	pc, r7, r2
   2ac7c:	.word	0x00000030
   2ac80:	.word	0x000207d0
   2ac84:	.word	0x0002086c
   2ac88:	.word	0x00020910
   2ac8c:	.word	0x000209b4
   2ac90:	.word	0x00020a54
   2ac94:	.word	0x00020af4
   2ac98:	.word	0x00022220
   2ac9c:	.word	0x00020ba0
   2aca0:	.word	0x00022220
   2aca4:	.word	0x00022220
   2aca8:	.word	0x00020c4c
   2acac:	cmp	r6, #1
   2acb0:	blt	2a430 <GetDataSlab+0x2a6c>
   2acb4:	ldr	r0, [sp, #16]
   2acb8:	ldr	r2, [sp, #24]
   2acbc:	mov	r7, #0
   2acc0:	mla	r0, r0, r4, r2
   2acc4:	add	r2, r1, r0
   2acc8:	ldr	r0, [sp, #56]	; 0x38
   2accc:	cmp	r0, #1
   2acd0:	blt	2ad28 <GetDataSlab+0x3364>
   2acd4:	ldr	r4, [sp, #60]	; 0x3c
   2acd8:	ldr	ip, [fp, #8]
   2acdc:	mov	r0, #0
   2ace0:	mov	r6, #0
   2ace4:	ldr	r5, [r8]
   2ace8:	add	r0, r0, #4
   2acec:	mla	r5, r5, r6, r2
   2acf0:	ldrsb	r5, [r5]
   2acf4:	str	r5, [r4, r6, lsl #2]
   2acf8:	add	r6, r6, #1
   2acfc:	ldr	r5, [r3]
   2ad00:	cmp	r6, r5
   2ad04:	blt	2ace4 <GetDataSlab+0x3320>
   2ad08:	add	r4, r4, r0
   2ad0c:	ldr	r0, [sp, #36]	; 0x24
   2ad10:	str	r5, [sp, #56]	; 0x38
   2ad14:	str	r4, [sp, #60]	; 0x3c
   2ad18:	ldr	r4, [ip]
   2ad1c:	ldr	ip, [lr]
   2ad20:	ldr	r1, [r0]
   2ad24:	b	2ad2c <GetDataSlab+0x3368>
   2ad28:	ldr	r1, [sp, #52]	; 0x34
   2ad2c:	add	r7, r7, #1
   2ad30:	mla	r2, r4, ip, r2
   2ad34:	mov	r0, #0
   2ad38:	str	r1, [sp, #52]	; 0x34
   2ad3c:	cmp	r7, r1
   2ad40:	blt	2acc8 <GetDataSlab+0x3304>
   2ad44:	b	47ffc <GetDataSlab+0x20638>
   2ad48:	ldr	r0, [sp, #40]	; 0x28
   2ad4c:	sub	r1, r0, #1
   2ad50:	mov	r0, #1
   2ad54:	cmp	r1, #11
   2ad58:	bhi	4c180 <GetDataSlab+0x247bc>
   2ad5c:	add	r2, pc, #20
   2ad60:	ldr	r3, [sp, #48]	; 0x30
   2ad64:	ldr	r5, [sp, #32]
   2ad68:	ldr	r6, [sp, #24]
   2ad6c:	ldr	r7, [sp, #20]
   2ad70:	ldr	r1, [r2, r1, lsl #2]
   2ad74:	add	pc, r2, r1
   2ad78:	.word	0x00000030
   2ad7c:	.word	0x00020c00
   2ad80:	.word	0x00020d68
   2ad84:	.word	0x00020e68
   2ad88:	.word	0x00020f7c
   2ad8c:	.word	0x00021090
   2ad90:	.word	0x000211a8
   2ad94:	.word	0x00021408
   2ad98:	.word	0x00021228
   2ad9c:	.word	0x00021408
   2ada0:	.word	0x00021408
   2ada4:	.word	0x000212b0
   2ada8:	ldr	r0, [sp, #52]	; 0x34
   2adac:	cmp	r0, #1
   2adb0:	blt	2a430 <GetDataSlab+0x2a6c>
   2adb4:	ldr	lr, [sp, #16]
   2adb8:	ldr	r1, [sp, #56]	; 0x38
   2adbc:	mul	sl, ip, r4
   2adc0:	add	r9, sp, #112	; 0x70
   2adc4:	mla	r0, lr, r4, r6
   2adc8:	cmp	r1, #1
   2adcc:	add	r2, r3, r0
   2add0:	str	r0, [sp, #12]
   2add4:	add	r0, r1, r6
   2add8:	movwne	r7, #1
   2addc:	mov	r3, #0
   2ade0:	mla	r0, lr, r4, r0
   2ade4:	lsl	r4, r5, #1
   2ade8:	str	r0, [sp, #40]	; 0x28
   2adec:	sub	r0, r5, #1
   2adf0:	clz	r0, r0
   2adf4:	lsr	r0, r0, #5
   2adf8:	and	r0, r7, r0
   2adfc:	str	r0, [sp, #44]	; 0x2c
   2ae00:	bic	r0, r1, #1
   2ae04:	str	r0, [sp, #36]	; 0x24
   2ae08:	ldr	r0, [sp, #56]	; 0x38
   2ae0c:	cmp	r0, #1
   2ae10:	blt	2aee8 <GetDataSlab+0x3524>
   2ae14:	ldr	r0, [sp, #44]	; 0x2c
   2ae18:	ldr	ip, [sp, #60]	; 0x3c
   2ae1c:	mov	r1, #0
   2ae20:	cmp	r0, #0
   2ae24:	beq	2aeb0 <GetDataSlab+0x34ec>
   2ae28:	ldr	r0, [sp, #40]	; 0x28
   2ae2c:	ldr	r7, [sp, #48]	; 0x30
   2ae30:	ldr	r6, [sp, #32]
   2ae34:	mla	r0, sl, r3, r0
   2ae38:	add	r0, r7, r0
   2ae3c:	cmp	r0, ip
   2ae40:	bls	2ae68 <GetDataSlab+0x34a4>
   2ae44:	ldr	r0, [sp, #12]
   2ae48:	ldr	r7, [sp, #48]	; 0x30
   2ae4c:	mov	r8, ip
   2ae50:	mla	r0, sl, r3, r0
   2ae54:	add	r0, r7, r0
   2ae58:	ldr	r7, [sp, #56]	; 0x38
   2ae5c:	add	r5, ip, r7, lsl #3
   2ae60:	cmp	r0, r5
   2ae64:	bcc	2aeb8 <GetDataSlab+0x34f4>
   2ae68:	ldr	r1, [sp, #36]	; 0x24
   2ae6c:	mov	r5, r2
   2ae70:	add	r8, ip, r1, lsl #3
   2ae74:	ldrh	lr, [r5], r4
   2ae78:	subs	r1, r1, #2
   2ae7c:	strh	lr, [sp, #112]	; 0x70
   2ae80:	vld1.16	{d16[0]}, [r9 :16]
   2ae84:	vmovl.s8	q8, d16
   2ae88:	vmovl.s16	q8, d16
   2ae8c:	vmovl.s32	q8, d16
   2ae90:	vst1.64	{d16-d17}, [ip]!
   2ae94:	bne	2ae74 <GetDataSlab+0x34b0>
   2ae98:	ldr	r0, [sp, #56]	; 0x38
   2ae9c:	ldr	r1, [sp, #36]	; 0x24
   2aea0:	ldr	ip, [sp, #60]	; 0x3c
   2aea4:	cmp	r0, r1
   2aea8:	bne	2aeb8 <GetDataSlab+0x34f4>
   2aeac:	b	2aedc <GetDataSlab+0x3518>
   2aeb0:	ldr	r6, [sp, #32]
   2aeb4:	mov	r8, ip
   2aeb8:	ldr	r0, [sp, #56]	; 0x38
   2aebc:	mla	r5, r6, r1, r2
   2aec0:	sub	r7, r0, r1
   2aec4:	ldrsb	r0, [r5], r6
   2aec8:	subs	r7, r7, #1
   2aecc:	asr	r1, r0, #31
   2aed0:	strd	r0, [r8]
   2aed4:	add	r8, r8, #8
   2aed8:	bne	2aec4 <GetDataSlab+0x3500>
   2aedc:	ldr	r0, [sp, #56]	; 0x38
   2aee0:	add	ip, ip, r0, lsl #3
   2aee4:	str	ip, [sp, #60]	; 0x3c
   2aee8:	ldr	r1, [sp, #52]	; 0x34
   2aeec:	add	r3, r3, #1
   2aef0:	add	r2, r2, sl
   2aef4:	mov	r0, #0
   2aef8:	cmp	r3, r1
   2aefc:	bne	2ae08 <GetDataSlab+0x3444>
   2af00:	b	47ffc <GetDataSlab+0x20638>
   2af04:	ldr	r0, [sp, #40]	; 0x28
   2af08:	sub	r1, r0, #1
   2af0c:	mov	r0, #1
   2af10:	cmp	r1, #11
   2af14:	bhi	4caec <GetDataSlab+0x25128>
   2af18:	add	r2, pc, #20
   2af1c:	ldr	r3, [sp, #48]	; 0x30
   2af20:	ldr	r5, [sp, #32]
   2af24:	ldr	r6, [sp, #24]
   2af28:	ldr	r7, [sp, #20]
   2af2c:	ldr	r1, [r2, r1, lsl #2]
   2af30:	add	pc, r2, r1
   2af34:	.word	0x00000030
   2af38:	.word	0x000213b0
   2af3c:	.word	0x00021518
   2af40:	.word	0x00021618
   2af44:	.word	0x0002172c
   2af48:	.word	0x00021840
   2af4c:	.word	0x00021958
   2af50:	.word	0x00021bb8
   2af54:	.word	0x000219d8
   2af58:	.word	0x00021bb8
   2af5c:	.word	0x00021bb8
   2af60:	.word	0x00021a60
   2af64:	ldr	r0, [sp, #52]	; 0x34
   2af68:	cmp	r0, #1
   2af6c:	blt	2a430 <GetDataSlab+0x2a6c>
   2af70:	ldr	lr, [sp, #16]
   2af74:	ldr	r1, [sp, #56]	; 0x38
   2af78:	mul	sl, ip, r4
   2af7c:	add	r9, sp, #144	; 0x90
   2af80:	mla	r0, lr, r4, r6
   2af84:	cmp	r1, #1
   2af88:	add	r2, r3, r0
   2af8c:	str	r0, [sp, #12]
   2af90:	add	r0, r1, r6
   2af94:	movwne	r7, #1
   2af98:	mov	r3, #0
   2af9c:	mla	r0, lr, r4, r0
   2afa0:	lsl	r4, r5, #1
   2afa4:	str	r0, [sp, #40]	; 0x28
   2afa8:	sub	r0, r5, #1
   2afac:	clz	r0, r0
   2afb0:	lsr	r0, r0, #5
   2afb4:	and	r0, r7, r0
   2afb8:	str	r0, [sp, #44]	; 0x2c
   2afbc:	bic	r0, r1, #1
   2afc0:	str	r0, [sp, #36]	; 0x24
   2afc4:	ldr	r0, [sp, #56]	; 0x38
   2afc8:	cmp	r0, #1
   2afcc:	blt	2b0a4 <GetDataSlab+0x36e0>
   2afd0:	ldr	r0, [sp, #44]	; 0x2c
   2afd4:	ldr	ip, [sp, #60]	; 0x3c
   2afd8:	mov	r1, #0
   2afdc:	cmp	r0, #0
   2afe0:	beq	2b06c <GetDataSlab+0x36a8>
   2afe4:	ldr	r0, [sp, #40]	; 0x28
   2afe8:	ldr	r7, [sp, #48]	; 0x30
   2afec:	ldr	r6, [sp, #32]
   2aff0:	mla	r0, sl, r3, r0
   2aff4:	add	r0, r7, r0
   2aff8:	cmp	r0, ip
   2affc:	bls	2b024 <GetDataSlab+0x3660>
   2b000:	ldr	r0, [sp, #12]
   2b004:	ldr	r7, [sp, #48]	; 0x30
   2b008:	mov	r8, ip
   2b00c:	mla	r0, sl, r3, r0
   2b010:	add	r0, r7, r0
   2b014:	ldr	r7, [sp, #56]	; 0x38
   2b018:	add	r5, ip, r7, lsl #3
   2b01c:	cmp	r0, r5
   2b020:	bcc	2b074 <GetDataSlab+0x36b0>
   2b024:	ldr	r1, [sp, #36]	; 0x24
   2b028:	mov	r5, r2
   2b02c:	add	r8, ip, r1, lsl #3
   2b030:	ldrh	lr, [r5], r4
   2b034:	subs	r1, r1, #2
   2b038:	strh	lr, [sp, #144]	; 0x90
   2b03c:	vld1.16	{d16[0]}, [r9 :16]
   2b040:	vmovl.s8	q8, d16
   2b044:	vmovl.s16	q8, d16
   2b048:	vmovl.s32	q8, d16
   2b04c:	vst1.64	{d16-d17}, [ip]!
   2b050:	bne	2b030 <GetDataSlab+0x366c>
   2b054:	ldr	r0, [sp, #56]	; 0x38
   2b058:	ldr	r1, [sp, #36]	; 0x24
   2b05c:	ldr	ip, [sp, #60]	; 0x3c
   2b060:	cmp	r0, r1
   2b064:	bne	2b074 <GetDataSlab+0x36b0>
   2b068:	b	2b098 <GetDataSlab+0x36d4>
   2b06c:	ldr	r6, [sp, #32]
   2b070:	mov	r8, ip
   2b074:	ldr	r0, [sp, #56]	; 0x38
   2b078:	mla	r5, r6, r1, r2
   2b07c:	sub	r7, r0, r1
   2b080:	ldrsb	r0, [r5], r6
   2b084:	subs	r7, r7, #1
   2b088:	asr	r1, r0, #31
   2b08c:	strd	r0, [r8]
   2b090:	add	r8, r8, #8
   2b094:	bne	2b080 <GetDataSlab+0x36bc>
   2b098:	ldr	r0, [sp, #56]	; 0x38
   2b09c:	add	ip, ip, r0, lsl #3
   2b0a0:	str	ip, [sp, #60]	; 0x3c
   2b0a4:	ldr	r1, [sp, #52]	; 0x34
   2b0a8:	add	r3, r3, #1
   2b0ac:	add	r2, r2, sl
   2b0b0:	mov	r0, #0
   2b0b4:	cmp	r3, r1
   2b0b8:	bne	2afc4 <GetDataSlab+0x3600>
   2b0bc:	b	47ffc <GetDataSlab+0x20638>
   2b0c0:	ldr	r0, [fp, #16]
   2b0c4:	mov	r7, lr
   2b0c8:	mov	r4, #0
   2b0cc:	sub	lr, fp, #96	; 0x60
   2b0d0:	ldr	r9, [r0]
   2b0d4:	sub	r0, r9, #1
   2b0d8:	str	r0, [fp, #-96]	; 0xffffffa0
   2b0dc:	ldr	r0, [fp, #8]
   2b0e0:	ldr	r0, [r0]
   2b0e4:	str	r0, [fp, #-176]	; 0xffffff50
   2b0e8:	str	r0, [sp, #32]
   2b0ec:	ldr	r0, [fp, #24]
   2b0f0:	ldr	r1, [sl]
   2b0f4:	cmp	r0, #2
   2b0f8:	str	r1, [sp, #52]	; 0x34
   2b0fc:	str	r1, [sp, #56]	; 0x38
   2b100:	blt	2b260 <GetDataSlab+0x389c>
   2b104:	ldr	r0, [fp, #8]
   2b108:	ldr	r3, [sp, #32]
   2b10c:	mov	r6, #1
   2b110:	mvn	r8, #15
   2b114:	mov	r4, #0
   2b118:	mov	r1, r0
   2b11c:	sub	r0, r0, #4
   2b120:	mov	r2, r3
   2b124:	sub	ip, r1, #12
   2b128:	mov	r1, #0
   2b12c:	str	r1, [sp, #44]	; 0x2c
   2b130:	ldr	r1, [sp, #52]	; 0x34
   2b134:	str	r1, [sp, #56]	; 0x38
   2b138:	ldr	r1, [fp, #16]
   2b13c:	str	r2, [sp, #40]	; 0x28
   2b140:	ldr	r5, [sp, #44]	; 0x2c
   2b144:	ldr	r1, [r1, r6, lsl #2]
   2b148:	str	r3, [r7, r6, lsl #2]
   2b14c:	add	r5, r5, #1
   2b150:	cmp	r5, #4
   2b154:	str	r5, [sp, #44]	; 0x2c
   2b158:	sub	r2, r1, #1
   2b15c:	ldr	r1, [fp, #8]
   2b160:	str	r2, [lr, r6, lsl #2]
   2b164:	ldr	r1, [r1, r6, lsl #2]
   2b168:	str	r1, [sp, #36]	; 0x24
   2b16c:	bcs	2b178 <GetDataSlab+0x37b4>
   2b170:	mov	r7, r6
   2b174:	b	2b200 <GetDataSlab+0x383c>
   2b178:	vmov.i32	q9, #1	; 0x00000001
   2b17c:	vmov.i32	q10, #1	; 0x00000001
   2b180:	vmov.i32	q8, #1	; 0x00000001
   2b184:	bic	lr, r5, #3
   2b188:	vmov.32	d23[1], r1
   2b18c:	bic	sl, r6, #3
   2b190:	mov	r1, ip
   2b194:	vmov.32	d18[0], r3
   2b198:	vmov.32	d20[0], r2
   2b19c:	sub	r7, r6, lr
   2b1a0:	vorr	d16, d18, d18
   2b1a4:	vmov.i32	q9, #1	; 0x00000001
   2b1a8:	vorr	d18, d20, d20
   2b1ac:	vld1.32	{d20-d21}, [r1], r8
   2b1b0:	subs	sl, sl, #4
   2b1b4:	vrev64.32	q12, q10
   2b1b8:	vext.8	q12, q12, q12, #8
   2b1bc:	vext.8	q11, q11, q12, #12
   2b1c0:	vmul.i32	q9, q9, q12
   2b1c4:	vmul.i32	q8, q11, q8
   2b1c8:	vorr	q11, q12, q12
   2b1cc:	bne	2b1ac <GetDataSlab+0x37e8>
   2b1d0:	vext.8	q11, q9, q8, #8
   2b1d4:	vext.8	q12, q8, q8, #8
   2b1d8:	ldr	sl, [fp, #20]
   2b1dc:	cmp	r5, lr
   2b1e0:	vmul.i32	q0, q9, q11
   2b1e4:	vmul.i32	q1, q8, q12
   2b1e8:	vmul.i32	q8, q0, d0[1]
   2b1ec:	vmul.i32	q9, q1, d2[1]
   2b1f0:	vmov.32	r2, d16[0]
   2b1f4:	vmov.32	r3, d18[0]
   2b1f8:	beq	2b214 <GetDataSlab+0x3850>
   2b1fc:	vmov.32	r1, d20[0]
   2b200:	mul	r3, r1, r3
   2b204:	ldr	r1, [r0, r7, lsl #2]
   2b208:	subs	r7, r7, #1
   2b20c:	mul	r2, r2, r1
   2b210:	bne	2b200 <GetDataSlab+0x383c>
   2b214:	ldr	r1, [fp, #12]
   2b218:	sub	r7, fp, #176	; 0xb0
   2b21c:	sub	lr, fp, #96	; 0x60
   2b220:	add	ip, ip, #4
   2b224:	str	r2, [lr, r6, lsl #2]
   2b228:	str	r3, [r7, r6, lsl #2]
   2b22c:	ldr	r2, [sp, #40]	; 0x28
   2b230:	ldr	r1, [r1, r6, lsl #2]
   2b234:	mla	r4, r1, r2, r4
   2b238:	ldr	r1, [sl, r6, lsl #2]
   2b23c:	ldr	r2, [sp, #56]	; 0x38
   2b240:	add	r6, r6, #1
   2b244:	mul	r2, r1, r2
   2b248:	ldr	r1, [fp, #24]
   2b24c:	str	r2, [sp, #56]	; 0x38
   2b250:	mov	r2, r3
   2b254:	ldr	r3, [sp, #36]	; 0x24
   2b258:	cmp	r6, r1
   2b25c:	bne	2b138 <GetDataSlab+0x3774>
   2b260:	ldr	r0, [sp, #48]	; 0x30
   2b264:	cmp	r9, #1
   2b268:	mov	r2, lr
   2b26c:	add	r5, r0, r4
   2b270:	bne	3cc70 <GetDataSlab+0x152ac>
   2b274:	ldr	r0, [sp, #56]	; 0x38
   2b278:	ldr	ip, [sp, #60]	; 0x3c
   2b27c:	ldr	r3, [sp, #52]	; 0x34
   2b280:	cmp	r0, #1
   2b284:	ldr	r0, [fp, #12]
   2b288:	blt	47ff8 <GetDataSlab+0x20634>
   2b28c:	mov	r1, sl
   2b290:	add	sl, r0, #4
   2b294:	sub	r0, fp, #136	; 0x88
   2b298:	lsl	r8, r3, #3
   2b29c:	mov	r9, #0
   2b2a0:	add	lr, r1, #4
   2b2a4:	orr	r1, r0, #4
   2b2a8:	orr	r0, r2, #4
   2b2ac:	str	r8, [sp, #44]	; 0x2c
   2b2b0:	str	r0, [sp, #28]
   2b2b4:	bic	r0, r3, #1
   2b2b8:	str	r0, [sp, #40]	; 0x28
   2b2bc:	mov	r0, #0
   2b2c0:	str	r0, [sp, #48]	; 0x30
   2b2c4:	ldr	r0, [fp, #12]
   2b2c8:	cmp	r3, #1
   2b2cc:	blt	2b3ac <GetDataSlab+0x39e8>
   2b2d0:	ldr	r7, [r0]
   2b2d4:	mov	r6, #0
   2b2d8:	beq	2b37c <GetDataSlab+0x39b8>
   2b2dc:	ldr	r0, [sp, #60]	; 0x3c
   2b2e0:	ldr	r3, [sp, #44]	; 0x2c
   2b2e4:	ldr	r2, [sp, #48]	; 0x30
   2b2e8:	mla	r8, r3, r2, r0
   2b2ec:	ldr	r0, [sp, #52]	; 0x34
   2b2f0:	add	r3, r5, r7
   2b2f4:	add	r0, r5, r0
   2b2f8:	add	r0, r0, r7
   2b2fc:	cmp	r8, r0
   2b300:	ldr	r8, [sp, #44]	; 0x2c
   2b304:	bcs	2b328 <GetDataSlab+0x3964>
   2b308:	ldr	r0, [sp, #48]	; 0x30
   2b30c:	mov	r2, r7
   2b310:	ldr	r7, [sp, #60]	; 0x3c
   2b314:	mla	r0, r8, r0, r8
   2b318:	add	r0, r7, r0
   2b31c:	mov	r7, r2
   2b320:	cmp	r3, r0
   2b324:	bcc	2b37c <GetDataSlab+0x39b8>
   2b328:	ldr	r6, [sp, #40]	; 0x28
   2b32c:	str	r7, [sp, #36]	; 0x24
   2b330:	mov	r8, ip
   2b334:	add	r7, sp, #192	; 0xc0
   2b338:	add	r2, sp, #196	; 0xc4
   2b33c:	ldrh	r0, [r3], #2
   2b340:	subs	r6, r6, #2
   2b344:	strh	r0, [r7, #4]
   2b348:	vld1.16	{d16[0]}, [r2 :16]
   2b34c:	vmovl.u8	q8, d16
   2b350:	vmovl.u16	q0, d16
   2b354:	vcvt.f64.u32	d17, s1
   2b358:	vcvt.f64.u32	d16, s0
   2b35c:	vst1.64	{d16-d17}, [r8]!
   2b360:	bne	2b33c <GetDataSlab+0x3978>
   2b364:	ldr	r0, [sp, #52]	; 0x34
   2b368:	ldr	r6, [sp, #40]	; 0x28
   2b36c:	ldr	r8, [sp, #44]	; 0x2c
   2b370:	ldr	r7, [sp, #36]	; 0x24
   2b374:	cmp	r0, r6
   2b378:	beq	2b3ac <GetDataSlab+0x39e8>
   2b37c:	ldr	r0, [sp, #52]	; 0x34
   2b380:	sub	r3, r0, r6
   2b384:	add	r0, ip, r6, lsl #3
   2b388:	add	r6, r6, r7
   2b38c:	add	r6, r5, r6
   2b390:	ldrb	r2, [r6], #1
   2b394:	subs	r3, r3, #1
   2b398:	vmov	s0, r2
   2b39c:	vcvt.f64.u32	d16, s0
   2b3a0:	vstr	d16, [r0]
   2b3a4:	add	r0, r0, #8
   2b3a8:	bne	2b390 <GetDataSlab+0x39cc>
   2b3ac:	ldr	r0, [sp, #32]
   2b3b0:	add	r5, r5, r0
   2b3b4:	add	r4, r4, r0
   2b3b8:	ldr	r0, [fp, #24]
   2b3bc:	cmp	r0, #2
   2b3c0:	blt	2b46c <GetDataSlab+0x3aa8>
   2b3c4:	mov	r3, #0
   2b3c8:	ldr	r2, [r1, r3, lsl #2]
   2b3cc:	mov	r0, r3
   2b3d0:	add	r2, r2, #1
   2b3d4:	str	r2, [r1, r3, lsl #2]
   2b3d8:	ldr	r3, [lr, r3, lsl #2]
   2b3dc:	sdiv	r6, r2, r3
   2b3e0:	mls	r2, r6, r3, r2
   2b3e4:	cmp	r2, #0
   2b3e8:	bne	2b45c <GetDataSlab+0x3a98>
   2b3ec:	mov	r2, #0
   2b3f0:	sub	r7, fp, #176	; 0xb0
   2b3f4:	str	r2, [r1, r0, lsl #2]
   2b3f8:	add	r2, r7, r0, lsl #2
   2b3fc:	ldr	r3, [r2, #4]
   2b400:	sdiv	r2, r4, r3
   2b404:	mls	r6, r2, r3, r4
   2b408:	cmp	r6, #0
   2b40c:	beq	2b42c <GetDataSlab+0x3a68>
   2b410:	ldr	r2, [r7, r0, lsl #2]
   2b414:	ldr	r7, [sl, r0, lsl #2]
   2b418:	sub	r3, r3, r6
   2b41c:	mla	r2, r7, r2, r3
   2b420:	add	r4, r2, r4
   2b424:	add	r5, r5, r2
   2b428:	b	2b444 <GetDataSlab+0x3a80>
   2b42c:	ldr	r3, [sl, r0, lsl #2]
   2b430:	cmp	r3, #0
   2b434:	subne	r2, fp, #176	; 0xb0
   2b438:	ldrne	r2, [r2, r0, lsl #2]
   2b43c:	mlane	r4, r2, r3, r4
   2b440:	mlane	r5, r2, r3, r5
   2b444:	ldr	r2, [fp, #24]
   2b448:	add	r3, r0, #1
   2b44c:	add	r0, r0, #2
   2b450:	cmp	r0, r2
   2b454:	blt	2b3c8 <GetDataSlab+0x3a04>
   2b458:	b	2b46c <GetDataSlab+0x3aa8>
   2b45c:	ldr	r2, [sp, #28]
   2b460:	ldr	r0, [r2, r0, lsl #2]
   2b464:	add	r5, r5, r0
   2b468:	add	r4, r0, r4
   2b46c:	ldr	r0, [sp, #48]	; 0x30
   2b470:	ldr	r3, [sp, #52]	; 0x34
   2b474:	ldr	r2, [sp, #56]	; 0x38
   2b478:	add	ip, ip, r8
   2b47c:	add	r9, r9, r3
   2b480:	add	r0, r0, #1
   2b484:	str	r0, [sp, #48]	; 0x30
   2b488:	mov	r0, #0
   2b48c:	cmp	r9, r2
   2b490:	blt	2b2c4 <GetDataSlab+0x3900>
   2b494:	b	47ffc <GetDataSlab+0x20638>
   2b498:	ldr	r0, [fp, #16]
   2b49c:	ldr	r8, [fp, #12]
   2b4a0:	mov	r2, #0
   2b4a4:	sub	r5, fp, #96	; 0x60
   2b4a8:	ldr	r0, [r0]
   2b4ac:	str	r0, [sp, #24]
   2b4b0:	sub	r0, r0, #1
   2b4b4:	str	r0, [fp, #-96]	; 0xffffffa0
   2b4b8:	ldr	r0, [fp, #8]
   2b4bc:	ldr	r0, [r0]
   2b4c0:	str	r0, [fp, #-176]	; 0xffffff50
   2b4c4:	str	r0, [sp, #40]	; 0x28
   2b4c8:	ldr	r0, [fp, #24]
   2b4cc:	ldr	r1, [sl]
   2b4d0:	cmp	r0, #2
   2b4d4:	str	r1, [sp, #44]	; 0x2c
   2b4d8:	str	r1, [sp, #52]	; 0x34
   2b4dc:	blt	2b628 <GetDataSlab+0x3c64>
   2b4e0:	ldr	r0, [fp, #8]
   2b4e4:	ldr	r3, [sp, #40]	; 0x28
   2b4e8:	ldr	r1, [sp, #44]	; 0x2c
   2b4ec:	mov	r4, #1
   2b4f0:	mov	r9, #0
   2b4f4:	mov	r2, #0
   2b4f8:	sub	r7, r0, #4
   2b4fc:	sub	ip, r0, #12
   2b500:	mvn	r0, #15
   2b504:	mov	sl, r3
   2b508:	str	r1, [sp, #52]	; 0x34
   2b50c:	ldr	r1, [fp, #16]
   2b510:	add	r9, r9, #1
   2b514:	cmp	r9, #4
   2b518:	ldr	r1, [r1, r4, lsl #2]
   2b51c:	str	r3, [lr, r4, lsl #2]
   2b520:	sub	lr, r1, #1
   2b524:	ldr	r1, [fp, #8]
   2b528:	str	lr, [r5, r4, lsl #2]
   2b52c:	ldr	r1, [r1, r4, lsl #2]
   2b530:	str	r1, [sp, #56]	; 0x38
   2b534:	bcs	2b540 <GetDataSlab+0x3b7c>
   2b538:	mov	r5, r4
   2b53c:	b	2b5c8 <GetDataSlab+0x3c04>
   2b540:	vmov.i32	q9, #1	; 0x00000001
   2b544:	vmov.i32	q10, #1	; 0x00000001
   2b548:	vmov.i32	q8, #1	; 0x00000001
   2b54c:	vmov.32	d23[1], r1
   2b550:	bic	r1, r9, #3
   2b554:	bic	r8, r4, #3
   2b558:	vmov.32	d18[0], r3
   2b55c:	vmov.32	d20[0], lr
   2b560:	sub	r5, r4, r1
   2b564:	mov	r3, ip
   2b568:	vorr	d16, d18, d18
   2b56c:	vmov.i32	q9, #1	; 0x00000001
   2b570:	vorr	d18, d20, d20
   2b574:	vld1.32	{d20-d21}, [r3], r0
   2b578:	subs	r8, r8, #4
   2b57c:	vrev64.32	q12, q10
   2b580:	vext.8	q12, q12, q12, #8
   2b584:	vext.8	q11, q11, q12, #12
   2b588:	vmul.i32	q9, q9, q12
   2b58c:	vmul.i32	q8, q11, q8
   2b590:	vorr	q11, q12, q12
   2b594:	bne	2b574 <GetDataSlab+0x3bb0>
   2b598:	vext.8	q11, q9, q8, #8
   2b59c:	vext.8	q12, q8, q8, #8
   2b5a0:	ldr	r8, [fp, #12]
   2b5a4:	cmp	r9, r1
   2b5a8:	vmul.i32	q0, q9, q11
   2b5ac:	vmul.i32	q1, q8, q12
   2b5b0:	vmul.i32	q8, q0, d0[1]
   2b5b4:	vmul.i32	q9, q1, d2[1]
   2b5b8:	vmov.32	lr, d16[0]
   2b5bc:	vmov.32	r3, d18[0]
   2b5c0:	beq	2b5dc <GetDataSlab+0x3c18>
   2b5c4:	vmov.32	r1, d20[0]
   2b5c8:	mul	r3, r1, r3
   2b5cc:	ldr	r1, [r7, r5, lsl #2]
   2b5d0:	subs	r5, r5, #1
   2b5d4:	mul	lr, lr, r1
   2b5d8:	bne	2b5c8 <GetDataSlab+0x3c04>
   2b5dc:	sub	r1, fp, #176	; 0xb0
   2b5e0:	sub	r5, fp, #96	; 0x60
   2b5e4:	ldr	r6, [sp, #52]	; 0x34
   2b5e8:	add	ip, ip, #4
   2b5ec:	str	lr, [r5, r4, lsl #2]
   2b5f0:	str	r3, [r1, r4, lsl #2]
   2b5f4:	mov	lr, r1
   2b5f8:	ldr	r1, [r8, r4, lsl #2]
   2b5fc:	mla	r2, r1, sl, r2
   2b600:	ldr	r1, [fp, #20]
   2b604:	mov	sl, r3
   2b608:	ldr	r3, [sp, #56]	; 0x38
   2b60c:	ldr	r1, [r1, r4, lsl #2]
   2b610:	add	r4, r4, #1
   2b614:	mul	r6, r1, r6
   2b618:	ldr	r1, [fp, #24]
   2b61c:	str	r6, [sp, #52]	; 0x34
   2b620:	cmp	r4, r1
   2b624:	bne	2b50c <GetDataSlab+0x3b48>
   2b628:	ldr	r0, [sp, #48]	; 0x30
   2b62c:	ldr	r1, [sp, #24]
   2b630:	add	sl, r0, r2, lsl #1
   2b634:	cmp	r1, #1
   2b638:	bne	3ce18 <GetDataSlab+0x15454>
   2b63c:	ldr	r0, [sp, #52]	; 0x34
   2b640:	ldr	r1, [sp, #44]	; 0x2c
   2b644:	cmp	r0, #1
   2b648:	blt	47ff8 <GetDataSlab+0x20634>
   2b64c:	ldr	r0, [fp, #20]
   2b650:	add	ip, sp, #184	; 0xb8
   2b654:	mov	r9, #0
   2b658:	add	r7, r0, #4
   2b65c:	sub	r0, fp, #136	; 0x88
   2b660:	orr	r6, r0, #4
   2b664:	sub	r0, fp, #96	; 0x60
   2b668:	orr	r0, r0, #4
   2b66c:	str	r0, [sp, #32]
   2b670:	lsl	r0, r1, #3
   2b674:	str	r0, [sp, #56]	; 0x38
   2b678:	bic	r0, r1, #1
   2b67c:	str	r0, [sp, #36]	; 0x24
   2b680:	ldr	r0, [r8], #4
   2b684:	str	r0, [sp, #48]	; 0x30
   2b688:	cmp	r1, #1
   2b68c:	blt	2b714 <GetDataSlab+0x3d50>
   2b690:	mov	r3, #0
   2b694:	beq	2b6dc <GetDataSlab+0x3d18>
   2b698:	ldr	r0, [sp, #48]	; 0x30
   2b69c:	ldr	r1, [sp, #36]	; 0x24
   2b6a0:	ldr	r3, [sp, #60]	; 0x3c
   2b6a4:	add	r0, sl, r0, lsl #1
   2b6a8:	ldr	r4, [r0], #4
   2b6ac:	subs	r1, r1, #2
   2b6b0:	str	r4, [sp, #184]	; 0xb8
   2b6b4:	vld1.32	{d16[0]}, [ip :32]
   2b6b8:	vmovl.s16	q0, d16
   2b6bc:	vcvt.f64.s32	d17, s1
   2b6c0:	vcvt.f64.s32	d16, s0
   2b6c4:	vst1.64	{d16-d17}, [r3]!
   2b6c8:	bne	2b6a8 <GetDataSlab+0x3ce4>
   2b6cc:	ldr	r0, [sp, #44]	; 0x2c
   2b6d0:	ldr	r3, [sp, #36]	; 0x24
   2b6d4:	cmp	r0, r3
   2b6d8:	beq	2b714 <GetDataSlab+0x3d50>
   2b6dc:	ldr	r5, [sp, #48]	; 0x30
   2b6e0:	ldr	r0, [sp, #44]	; 0x2c
   2b6e4:	ldr	r1, [sp, #60]	; 0x3c
   2b6e8:	add	r4, sl, r5, lsl #1
   2b6ec:	sub	r0, r0, r3
   2b6f0:	add	r1, r1, r3, lsl #3
   2b6f4:	add	r3, r4, r3, lsl #1
   2b6f8:	ldrsh	r4, [r3], #2
   2b6fc:	subs	r0, r0, #1
   2b700:	vmov	s0, r4
   2b704:	vcvt.f64.s32	d16, s0
   2b708:	vstr	d16, [r1]
   2b70c:	add	r1, r1, #8
   2b710:	bne	2b6f8 <GetDataSlab+0x3d34>
   2b714:	ldr	r0, [sp, #40]	; 0x28
   2b718:	sub	r5, fp, #176	; 0xb0
   2b71c:	add	sl, sl, r0, lsl #1
   2b720:	add	r2, r2, r0
   2b724:	ldr	r0, [fp, #24]
   2b728:	cmp	r0, #2
   2b72c:	blt	2b7d8 <GetDataSlab+0x3e14>
   2b730:	mov	r1, #0
   2b734:	mov	r0, r1
   2b738:	ldr	r1, [r6, r1, lsl #2]
   2b73c:	add	r1, r1, #1
   2b740:	str	r1, [r6, r0, lsl #2]
   2b744:	ldr	r3, [r7, r0, lsl #2]
   2b748:	sdiv	r4, r1, r3
   2b74c:	mls	r1, r4, r3, r1
   2b750:	cmp	r1, #0
   2b754:	bne	2b7c8 <GetDataSlab+0x3e04>
   2b758:	mov	r1, #0
   2b75c:	str	r1, [r6, r0, lsl #2]
   2b760:	add	r1, r5, r0, lsl #2
   2b764:	ldr	r1, [r1, #4]
   2b768:	sdiv	r3, r2, r1
   2b76c:	mls	r3, r3, r1, r2
   2b770:	cmp	r3, #0
   2b774:	beq	2b794 <GetDataSlab+0x3dd0>
   2b778:	ldr	r4, [r5, r0, lsl #2]
   2b77c:	ldr	lr, [r8, r0, lsl #2]
   2b780:	sub	r1, r1, r3
   2b784:	sub	r5, fp, #176	; 0xb0
   2b788:	mla	r1, lr, r4, r1
   2b78c:	add	r2, r1, r2
   2b790:	b	2b7ac <GetDataSlab+0x3de8>
   2b794:	ldr	r1, [r8, r0, lsl #2]
   2b798:	cmp	r1, #0
   2b79c:	beq	2b7b0 <GetDataSlab+0x3dec>
   2b7a0:	ldr	r3, [r5, r0, lsl #2]
   2b7a4:	mla	r2, r3, r1, r2
   2b7a8:	mul	r1, r3, r1
   2b7ac:	add	sl, sl, r1, lsl #1
   2b7b0:	ldr	r3, [fp, #24]
   2b7b4:	add	r1, r0, #1
   2b7b8:	add	r0, r0, #2
   2b7bc:	cmp	r0, r3
   2b7c0:	blt	2b734 <GetDataSlab+0x3d70>
   2b7c4:	b	2b7d8 <GetDataSlab+0x3e14>
   2b7c8:	ldr	r1, [sp, #32]
   2b7cc:	ldr	r0, [r1, r0, lsl #2]
   2b7d0:	add	sl, sl, r0, lsl #1
   2b7d4:	add	r2, r0, r2
   2b7d8:	ldr	r0, [sp, #60]	; 0x3c
   2b7dc:	ldr	r1, [sp, #56]	; 0x38
   2b7e0:	ldr	r3, [sp, #52]	; 0x34
   2b7e4:	add	r0, r0, r1
   2b7e8:	ldr	r1, [sp, #44]	; 0x2c
   2b7ec:	str	r0, [sp, #60]	; 0x3c
   2b7f0:	mov	r0, #0
   2b7f4:	add	r9, r9, r1
   2b7f8:	cmp	r9, r3
   2b7fc:	blt	2b688 <GetDataSlab+0x3cc4>
   2b800:	b	47ffc <GetDataSlab+0x20638>
   2b804:	ldr	r0, [fp, #16]
   2b808:	ldr	r8, [fp, #12]
   2b80c:	mov	r2, #0
   2b810:	sub	r5, fp, #96	; 0x60
   2b814:	ldr	r0, [r0]
   2b818:	str	r0, [sp, #24]
   2b81c:	sub	r0, r0, #1
   2b820:	str	r0, [fp, #-96]	; 0xffffffa0
   2b824:	ldr	r0, [fp, #8]
   2b828:	ldr	r0, [r0]
   2b82c:	str	r0, [fp, #-176]	; 0xffffff50
   2b830:	str	r0, [sp, #40]	; 0x28
   2b834:	ldr	r0, [fp, #24]
   2b838:	ldr	r1, [sl]
   2b83c:	cmp	r0, #2
   2b840:	str	r1, [sp, #44]	; 0x2c
   2b844:	str	r1, [sp, #52]	; 0x34
   2b848:	blt	2b994 <GetDataSlab+0x3fd0>
   2b84c:	ldr	r0, [fp, #8]
   2b850:	ldr	r3, [sp, #40]	; 0x28
   2b854:	ldr	r1, [sp, #44]	; 0x2c
   2b858:	mov	r4, #1
   2b85c:	mov	r9, #0
   2b860:	mov	r2, #0
   2b864:	sub	r7, r0, #4
   2b868:	sub	ip, r0, #12
   2b86c:	mvn	r0, #15
   2b870:	mov	sl, r3
   2b874:	str	r1, [sp, #52]	; 0x34
   2b878:	ldr	r1, [fp, #16]
   2b87c:	add	r9, r9, #1
   2b880:	cmp	r9, #4
   2b884:	ldr	r1, [r1, r4, lsl #2]
   2b888:	str	r3, [lr, r4, lsl #2]
   2b88c:	sub	lr, r1, #1
   2b890:	ldr	r1, [fp, #8]
   2b894:	str	lr, [r5, r4, lsl #2]
   2b898:	ldr	r1, [r1, r4, lsl #2]
   2b89c:	str	r1, [sp, #56]	; 0x38
   2b8a0:	bcs	2b8ac <GetDataSlab+0x3ee8>
   2b8a4:	mov	r5, r4
   2b8a8:	b	2b934 <GetDataSlab+0x3f70>
   2b8ac:	vmov.i32	q9, #1	; 0x00000001
   2b8b0:	vmov.i32	q10, #1	; 0x00000001
   2b8b4:	vmov.i32	q8, #1	; 0x00000001
   2b8b8:	vmov.32	d23[1], r1
   2b8bc:	bic	r1, r9, #3
   2b8c0:	bic	r8, r4, #3
   2b8c4:	vmov.32	d18[0], r3
   2b8c8:	vmov.32	d20[0], lr
   2b8cc:	sub	r5, r4, r1
   2b8d0:	mov	r3, ip
   2b8d4:	vorr	d16, d18, d18
   2b8d8:	vmov.i32	q9, #1	; 0x00000001
   2b8dc:	vorr	d18, d20, d20
   2b8e0:	vld1.32	{d20-d21}, [r3], r0
   2b8e4:	subs	r8, r8, #4
   2b8e8:	vrev64.32	q12, q10
   2b8ec:	vext.8	q12, q12, q12, #8
   2b8f0:	vext.8	q11, q11, q12, #12
   2b8f4:	vmul.i32	q9, q9, q12
   2b8f8:	vmul.i32	q8, q11, q8
   2b8fc:	vorr	q11, q12, q12
   2b900:	bne	2b8e0 <GetDataSlab+0x3f1c>
   2b904:	vext.8	q11, q9, q8, #8
   2b908:	vext.8	q12, q8, q8, #8
   2b90c:	ldr	r8, [fp, #12]
   2b910:	cmp	r9, r1
   2b914:	vmul.i32	q0, q9, q11
   2b918:	vmul.i32	q1, q8, q12
   2b91c:	vmul.i32	q8, q0, d0[1]
   2b920:	vmul.i32	q9, q1, d2[1]
   2b924:	vmov.32	lr, d16[0]
   2b928:	vmov.32	r3, d18[0]
   2b92c:	beq	2b948 <GetDataSlab+0x3f84>
   2b930:	vmov.32	r1, d20[0]
   2b934:	mul	r3, r1, r3
   2b938:	ldr	r1, [r7, r5, lsl #2]
   2b93c:	subs	r5, r5, #1
   2b940:	mul	lr, lr, r1
   2b944:	bne	2b934 <GetDataSlab+0x3f70>
   2b948:	sub	r1, fp, #176	; 0xb0
   2b94c:	sub	r5, fp, #96	; 0x60
   2b950:	ldr	r6, [sp, #52]	; 0x34
   2b954:	add	ip, ip, #4
   2b958:	str	lr, [r5, r4, lsl #2]
   2b95c:	str	r3, [r1, r4, lsl #2]
   2b960:	mov	lr, r1
   2b964:	ldr	r1, [r8, r4, lsl #2]
   2b968:	mla	r2, r1, sl, r2
   2b96c:	ldr	r1, [fp, #20]
   2b970:	mov	sl, r3
   2b974:	ldr	r3, [sp, #56]	; 0x38
   2b978:	ldr	r1, [r1, r4, lsl #2]
   2b97c:	add	r4, r4, #1
   2b980:	mul	r6, r1, r6
   2b984:	ldr	r1, [fp, #24]
   2b988:	str	r6, [sp, #52]	; 0x34
   2b98c:	cmp	r4, r1
   2b990:	bne	2b878 <GetDataSlab+0x3eb4>
   2b994:	ldr	r0, [sp, #48]	; 0x30
   2b998:	ldr	r1, [sp, #24]
   2b99c:	add	sl, r0, r2, lsl #1
   2b9a0:	cmp	r1, #1
   2b9a4:	bne	3cfb0 <GetDataSlab+0x155ec>
   2b9a8:	ldr	r0, [sp, #52]	; 0x34
   2b9ac:	ldr	r1, [sp, #44]	; 0x2c
   2b9b0:	cmp	r0, #1
   2b9b4:	blt	47ff8 <GetDataSlab+0x20634>
   2b9b8:	ldr	r0, [fp, #20]
   2b9bc:	add	ip, sp, #188	; 0xbc
   2b9c0:	mov	r9, #0
   2b9c4:	add	r7, r0, #4
   2b9c8:	sub	r0, fp, #136	; 0x88
   2b9cc:	orr	r6, r0, #4
   2b9d0:	sub	r0, fp, #96	; 0x60
   2b9d4:	orr	r0, r0, #4
   2b9d8:	str	r0, [sp, #32]
   2b9dc:	lsl	r0, r1, #3
   2b9e0:	str	r0, [sp, #56]	; 0x38
   2b9e4:	bic	r0, r1, #1
   2b9e8:	str	r0, [sp, #36]	; 0x24
   2b9ec:	ldr	r0, [r8], #4
   2b9f0:	str	r0, [sp, #48]	; 0x30
   2b9f4:	cmp	r1, #1
   2b9f8:	blt	2ba80 <GetDataSlab+0x40bc>
   2b9fc:	mov	r3, #0
   2ba00:	beq	2ba48 <GetDataSlab+0x4084>
   2ba04:	ldr	r0, [sp, #48]	; 0x30
   2ba08:	ldr	r1, [sp, #36]	; 0x24
   2ba0c:	ldr	r3, [sp, #60]	; 0x3c
   2ba10:	add	r0, sl, r0, lsl #1
   2ba14:	ldr	r4, [r0], #4
   2ba18:	subs	r1, r1, #2
   2ba1c:	str	r4, [sp, #188]	; 0xbc
   2ba20:	vld1.32	{d16[0]}, [ip :32]
   2ba24:	vmovl.u16	q0, d16
   2ba28:	vcvt.f64.u32	d17, s1
   2ba2c:	vcvt.f64.u32	d16, s0
   2ba30:	vst1.64	{d16-d17}, [r3]!
   2ba34:	bne	2ba14 <GetDataSlab+0x4050>
   2ba38:	ldr	r0, [sp, #44]	; 0x2c
   2ba3c:	ldr	r3, [sp, #36]	; 0x24
   2ba40:	cmp	r0, r3
   2ba44:	beq	2ba80 <GetDataSlab+0x40bc>
   2ba48:	ldr	r5, [sp, #48]	; 0x30
   2ba4c:	ldr	r0, [sp, #44]	; 0x2c
   2ba50:	ldr	r1, [sp, #60]	; 0x3c
   2ba54:	add	r4, sl, r5, lsl #1
   2ba58:	sub	r0, r0, r3
   2ba5c:	add	r1, r1, r3, lsl #3
   2ba60:	add	r3, r4, r3, lsl #1
   2ba64:	ldrh	r4, [r3], #2
   2ba68:	subs	r0, r0, #1
   2ba6c:	vmov	s0, r4
   2ba70:	vcvt.f64.u32	d16, s0
   2ba74:	vstr	d16, [r1]
   2ba78:	add	r1, r1, #8
   2ba7c:	bne	2ba64 <GetDataSlab+0x40a0>
   2ba80:	ldr	r0, [sp, #40]	; 0x28
   2ba84:	sub	r5, fp, #176	; 0xb0
   2ba88:	add	sl, sl, r0, lsl #1
   2ba8c:	add	r2, r2, r0
   2ba90:	ldr	r0, [fp, #24]
   2ba94:	cmp	r0, #2
   2ba98:	blt	2bb44 <GetDataSlab+0x4180>
   2ba9c:	mov	r1, #0
   2baa0:	mov	r0, r1
   2baa4:	ldr	r1, [r6, r1, lsl #2]
   2baa8:	add	r1, r1, #1
   2baac:	str	r1, [r6, r0, lsl #2]
   2bab0:	ldr	r3, [r7, r0, lsl #2]
   2bab4:	sdiv	r4, r1, r3
   2bab8:	mls	r1, r4, r3, r1
   2babc:	cmp	r1, #0
   2bac0:	bne	2bb34 <GetDataSlab+0x4170>
   2bac4:	mov	r1, #0
   2bac8:	str	r1, [r6, r0, lsl #2]
   2bacc:	add	r1, r5, r0, lsl #2
   2bad0:	ldr	r1, [r1, #4]
   2bad4:	sdiv	r3, r2, r1
   2bad8:	mls	r3, r3, r1, r2
   2badc:	cmp	r3, #0
   2bae0:	beq	2bb00 <GetDataSlab+0x413c>
   2bae4:	ldr	r4, [r5, r0, lsl #2]
   2bae8:	ldr	lr, [r8, r0, lsl #2]
   2baec:	sub	r1, r1, r3
   2baf0:	sub	r5, fp, #176	; 0xb0
   2baf4:	mla	r1, lr, r4, r1
   2baf8:	add	r2, r1, r2
   2bafc:	b	2bb18 <GetDataSlab+0x4154>
   2bb00:	ldr	r1, [r8, r0, lsl #2]
   2bb04:	cmp	r1, #0
   2bb08:	beq	2bb1c <GetDataSlab+0x4158>
   2bb0c:	ldr	r3, [r5, r0, lsl #2]
   2bb10:	mla	r2, r3, r1, r2
   2bb14:	mul	r1, r3, r1
   2bb18:	add	sl, sl, r1, lsl #1
   2bb1c:	ldr	r3, [fp, #24]
   2bb20:	add	r1, r0, #1
   2bb24:	add	r0, r0, #2
   2bb28:	cmp	r0, r3
   2bb2c:	blt	2baa0 <GetDataSlab+0x40dc>
   2bb30:	b	2bb44 <GetDataSlab+0x4180>
   2bb34:	ldr	r1, [sp, #32]
   2bb38:	ldr	r0, [r1, r0, lsl #2]
   2bb3c:	add	sl, sl, r0, lsl #1
   2bb40:	add	r2, r0, r2
   2bb44:	ldr	r0, [sp, #60]	; 0x3c
   2bb48:	ldr	r1, [sp, #56]	; 0x38
   2bb4c:	ldr	r3, [sp, #52]	; 0x34
   2bb50:	add	r0, r0, r1
   2bb54:	ldr	r1, [sp, #44]	; 0x2c
   2bb58:	str	r0, [sp, #60]	; 0x3c
   2bb5c:	mov	r0, #0
   2bb60:	add	r9, r9, r1
   2bb64:	cmp	r9, r3
   2bb68:	blt	2b9f4 <GetDataSlab+0x4030>
   2bb6c:	b	47ffc <GetDataSlab+0x20638>
   2bb70:	ldr	r0, [fp, #16]
   2bb74:	mov	r3, #0
   2bb78:	sub	r9, fp, #96	; 0x60
   2bb7c:	ldr	r0, [r0]
   2bb80:	str	r0, [sp, #32]
   2bb84:	sub	r0, r0, #1
   2bb88:	str	r0, [fp, #-96]	; 0xffffffa0
   2bb8c:	ldr	r0, [fp, #8]
   2bb90:	ldr	r0, [r0]
   2bb94:	str	r0, [fp, #-176]	; 0xffffff50
   2bb98:	str	r0, [sp, #36]	; 0x24
   2bb9c:	ldr	r0, [fp, #24]
   2bba0:	ldr	r1, [sl]
   2bba4:	cmp	r0, #2
   2bba8:	str	r1, [sp, #40]	; 0x28
   2bbac:	str	r1, [sp, #56]	; 0x38
   2bbb0:	blt	2bd10 <GetDataSlab+0x434c>
   2bbb4:	ldr	r0, [fp, #8]
   2bbb8:	ldr	r2, [sp, #36]	; 0x24
   2bbbc:	mov	r5, #1
   2bbc0:	mov	sl, #0
   2bbc4:	mvn	r4, #15
   2bbc8:	mov	r3, #0
   2bbcc:	sub	r1, r0, #4
   2bbd0:	sub	ip, r0, #12
   2bbd4:	ldr	r0, [sp, #40]	; 0x28
   2bbd8:	mov	r6, r2
   2bbdc:	str	r0, [sp, #56]	; 0x38
   2bbe0:	ldr	r0, [fp, #16]
   2bbe4:	mov	r7, sl
   2bbe8:	str	r6, [sp, #52]	; 0x34
   2bbec:	add	r7, sl, #1
   2bbf0:	cmp	r7, #4
   2bbf4:	ldr	r0, [r0, r5, lsl #2]
   2bbf8:	str	r2, [lr, r5, lsl #2]
   2bbfc:	sub	r8, r0, #1
   2bc00:	ldr	r0, [fp, #8]
   2bc04:	str	r8, [r9, r5, lsl #2]
   2bc08:	ldr	r0, [r0, r5, lsl #2]
   2bc0c:	str	r0, [sp, #44]	; 0x2c
   2bc10:	bcs	2bc1c <GetDataSlab+0x4258>
   2bc14:	mov	r6, r5
   2bc18:	b	2bca8 <GetDataSlab+0x42e4>
   2bc1c:	vmov.i32	q9, #1	; 0x00000001
   2bc20:	vmov.i32	q10, #1	; 0x00000001
   2bc24:	vmov.i32	q8, #1	; 0x00000001
   2bc28:	vmov.32	d23[1], r0
   2bc2c:	bic	r0, r7, #3
   2bc30:	bic	sl, r5, #3
   2bc34:	vmov.32	d18[0], r2
   2bc38:	vmov.32	d20[0], r8
   2bc3c:	sub	r6, r5, r0
   2bc40:	mov	r2, ip
   2bc44:	vorr	d16, d18, d18
   2bc48:	vmov.i32	q9, #1	; 0x00000001
   2bc4c:	vorr	d18, d20, d20
   2bc50:	vld1.32	{d20-d21}, [r2], r4
   2bc54:	subs	sl, sl, #4
   2bc58:	vrev64.32	q12, q10
   2bc5c:	vext.8	q12, q12, q12, #8
   2bc60:	vext.8	q11, q11, q12, #12
   2bc64:	vmul.i32	q9, q9, q12
   2bc68:	vmul.i32	q8, q11, q8
   2bc6c:	vorr	q11, q12, q12
   2bc70:	bne	2bc50 <GetDataSlab+0x428c>
   2bc74:	vext.8	q11, q9, q8, #8
   2bc78:	vext.8	q12, q8, q8, #8
   2bc7c:	cmp	r7, r0
   2bc80:	vmul.i32	q0, q9, q11
   2bc84:	vmul.i32	q1, q8, q12
   2bc88:	vmul.i32	q8, q0, d0[1]
   2bc8c:	vmul.i32	q9, q1, d2[1]
   2bc90:	vmov.32	r8, d16[0]
   2bc94:	vmov.32	r2, d18[0]
   2bc98:	bne	2bca4 <GetDataSlab+0x42e0>
   2bc9c:	mov	sl, r7
   2bca0:	b	2bcc0 <GetDataSlab+0x42fc>
   2bca4:	vmov.32	r0, d20[0]
   2bca8:	mov	sl, r7
   2bcac:	mul	r2, r0, r2
   2bcb0:	ldr	r0, [r1, r6, lsl #2]
   2bcb4:	subs	r6, r6, #1
   2bcb8:	mul	r8, r8, r0
   2bcbc:	bne	2bcac <GetDataSlab+0x42e8>
   2bcc0:	ldr	r0, [fp, #12]
   2bcc4:	sub	lr, fp, #176	; 0xb0
   2bcc8:	sub	r9, fp, #96	; 0x60
   2bccc:	ldr	r6, [sp, #52]	; 0x34
   2bcd0:	add	ip, ip, #4
   2bcd4:	str	r2, [lr, r5, lsl #2]
   2bcd8:	str	r8, [r9, r5, lsl #2]
   2bcdc:	ldr	r0, [r0, r5, lsl #2]
   2bce0:	mla	r3, r0, r6, r3
   2bce4:	ldr	r0, [fp, #20]
   2bce8:	ldr	r6, [sp, #56]	; 0x38
   2bcec:	ldr	r0, [r0, r5, lsl #2]
   2bcf0:	add	r5, r5, #1
   2bcf4:	mul	r6, r0, r6
   2bcf8:	ldr	r0, [fp, #24]
   2bcfc:	str	r6, [sp, #56]	; 0x38
   2bd00:	mov	r6, r2
   2bd04:	ldr	r2, [sp, #44]	; 0x2c
   2bd08:	cmp	r5, r0
   2bd0c:	bne	2bbe0 <GetDataSlab+0x421c>
   2bd10:	ldr	r0, [sp, #48]	; 0x30
   2bd14:	ldr	r6, [sp, #32]
   2bd18:	add	sl, r0, r3, lsl #2
   2bd1c:	ldr	r0, [fp, #12]
   2bd20:	cmp	r6, #1
   2bd24:	bne	3d148 <GetDataSlab+0x15784>
   2bd28:	ldr	r1, [sp, #56]	; 0x38
   2bd2c:	ldr	r2, [sp, #40]	; 0x28
   2bd30:	cmp	r1, #1
   2bd34:	sub	r1, fp, #96	; 0x60
   2bd38:	blt	47ff8 <GetDataSlab+0x20634>
   2bd3c:	add	r9, r0, #4
   2bd40:	ldr	r0, [fp, #20]
   2bd44:	mov	ip, #0
   2bd48:	mov	lr, #0
   2bd4c:	add	r8, r0, #4
   2bd50:	sub	r0, fp, #136	; 0x88
   2bd54:	orr	r5, r0, #4
   2bd58:	orr	r0, r1, #4
   2bd5c:	str	r0, [sp, #44]	; 0x2c
   2bd60:	lsl	r0, r2, #3
   2bd64:	str	r0, [sp, #52]	; 0x34
   2bd68:	bic	r0, r2, #1
   2bd6c:	str	r0, [sp, #48]	; 0x30
   2bd70:	cmp	r2, #1
   2bd74:	blt	2bdf0 <GetDataSlab+0x442c>
   2bd78:	ldr	r0, [fp, #12]
   2bd7c:	mov	r2, #0
   2bd80:	ldr	r4, [r0]
   2bd84:	beq	2bdbc <GetDataSlab+0x43f8>
   2bd88:	ldr	r1, [sp, #48]	; 0x30
   2bd8c:	ldr	r0, [sp, #60]	; 0x3c
   2bd90:	add	r2, sl, r4, lsl #2
   2bd94:	vld1.32	{d0}, [r2]!
   2bd98:	subs	r1, r1, #2
   2bd9c:	vcvt.f64.s32	d17, s1
   2bda0:	vcvt.f64.s32	d16, s0
   2bda4:	vst1.64	{d16-d17}, [r0]!
   2bda8:	bne	2bd94 <GetDataSlab+0x43d0>
   2bdac:	ldr	r0, [sp, #40]	; 0x28
   2bdb0:	ldr	r2, [sp, #48]	; 0x30
   2bdb4:	cmp	r0, r2
   2bdb8:	beq	2bdf0 <GetDataSlab+0x442c>
   2bdbc:	ldr	r0, [sp, #40]	; 0x28
   2bdc0:	sub	r1, r0, r2
   2bdc4:	ldr	r0, [sp, #60]	; 0x3c
   2bdc8:	add	r0, r0, r2, lsl #3
   2bdcc:	add	r2, r2, r4
   2bdd0:	add	r2, sl, r2, lsl #2
   2bdd4:	ldr	r7, [r2], #4
   2bdd8:	subs	r1, r1, #1
   2bddc:	vmov	s0, r7
   2bde0:	vcvt.f64.s32	d16, s0
   2bde4:	vstr	d16, [r0]
   2bde8:	add	r0, r0, #8
   2bdec:	bne	2bdd4 <GetDataSlab+0x4410>
   2bdf0:	ldr	r0, [sp, #36]	; 0x24
   2bdf4:	add	sl, sl, r0, lsl #2
   2bdf8:	add	r3, r3, r0
   2bdfc:	ldr	r0, [fp, #24]
   2be00:	cmp	r0, #2
   2be04:	blt	2beb0 <GetDataSlab+0x44ec>
   2be08:	mov	r1, #0
   2be0c:	mov	r0, r1
   2be10:	ldr	r1, [r5, r1, lsl #2]
   2be14:	add	r1, r1, #1
   2be18:	str	r1, [r5, r0, lsl #2]
   2be1c:	ldr	r2, [r8, r0, lsl #2]
   2be20:	sdiv	r7, r1, r2
   2be24:	mls	r1, r7, r2, r1
   2be28:	cmp	r1, #0
   2be2c:	bne	2bea0 <GetDataSlab+0x44dc>
   2be30:	sub	r4, fp, #176	; 0xb0
   2be34:	str	ip, [r5, r0, lsl #2]
   2be38:	add	r1, r4, r0, lsl #2
   2be3c:	ldr	r1, [r1, #4]
   2be40:	sdiv	r2, r3, r1
   2be44:	mls	r2, r2, r1, r3
   2be48:	cmp	r2, #0
   2be4c:	beq	2be68 <GetDataSlab+0x44a4>
   2be50:	ldr	r7, [r4, r0, lsl #2]
   2be54:	ldr	r6, [r9, r0, lsl #2]
   2be58:	sub	r1, r1, r2
   2be5c:	mla	r1, r6, r7, r1
   2be60:	add	r3, r1, r3
   2be64:	b	2be84 <GetDataSlab+0x44c0>
   2be68:	ldr	r1, [r9, r0, lsl #2]
   2be6c:	cmp	r1, #0
   2be70:	beq	2be88 <GetDataSlab+0x44c4>
   2be74:	sub	r2, fp, #176	; 0xb0
   2be78:	ldr	r2, [r2, r0, lsl #2]
   2be7c:	mla	r3, r2, r1, r3
   2be80:	mul	r1, r2, r1
   2be84:	add	sl, sl, r1, lsl #2
   2be88:	ldr	r2, [fp, #24]
   2be8c:	add	r1, r0, #1
   2be90:	add	r0, r0, #2
   2be94:	cmp	r0, r2
   2be98:	blt	2be0c <GetDataSlab+0x4448>
   2be9c:	b	2beb0 <GetDataSlab+0x44ec>
   2bea0:	ldr	r1, [sp, #44]	; 0x2c
   2bea4:	ldr	r0, [r1, r0, lsl #2]
   2bea8:	add	sl, sl, r0, lsl #2
   2beac:	add	r3, r0, r3
   2beb0:	ldr	r0, [sp, #60]	; 0x3c
   2beb4:	ldr	r1, [sp, #52]	; 0x34
   2beb8:	ldr	r2, [sp, #40]	; 0x28
   2bebc:	add	r0, r0, r1
   2bec0:	ldr	r1, [sp, #56]	; 0x38
   2bec4:	add	lr, lr, r2
   2bec8:	str	r0, [sp, #60]	; 0x3c
   2becc:	mov	r0, #0
   2bed0:	cmp	lr, r1
   2bed4:	blt	2bd70 <GetDataSlab+0x43ac>
   2bed8:	b	47ffc <GetDataSlab+0x20638>
   2bedc:	ldr	r0, [fp, #16]
   2bee0:	mov	r3, #0
   2bee4:	sub	r9, fp, #96	; 0x60
   2bee8:	ldr	r0, [r0]
   2beec:	str	r0, [sp, #32]
   2bef0:	sub	r0, r0, #1
   2bef4:	str	r0, [fp, #-96]	; 0xffffffa0
   2bef8:	ldr	r0, [fp, #8]
   2befc:	ldr	r0, [r0]
   2bf00:	str	r0, [fp, #-176]	; 0xffffff50
   2bf04:	str	r0, [sp, #36]	; 0x24
   2bf08:	ldr	r0, [fp, #24]
   2bf0c:	ldr	r1, [sl]
   2bf10:	cmp	r0, #2
   2bf14:	str	r1, [sp, #40]	; 0x28
   2bf18:	str	r1, [sp, #56]	; 0x38
   2bf1c:	blt	2c07c <GetDataSlab+0x46b8>
   2bf20:	ldr	r0, [fp, #8]
   2bf24:	ldr	r2, [sp, #36]	; 0x24
   2bf28:	mov	r5, #1
   2bf2c:	mov	sl, #0
   2bf30:	mvn	r4, #15
   2bf34:	mov	r3, #0
   2bf38:	sub	r1, r0, #4
   2bf3c:	sub	ip, r0, #12
   2bf40:	ldr	r0, [sp, #40]	; 0x28
   2bf44:	mov	r6, r2
   2bf48:	str	r0, [sp, #56]	; 0x38
   2bf4c:	ldr	r0, [fp, #16]
   2bf50:	mov	r7, sl
   2bf54:	str	r6, [sp, #52]	; 0x34
   2bf58:	add	r7, sl, #1
   2bf5c:	cmp	r7, #4
   2bf60:	ldr	r0, [r0, r5, lsl #2]
   2bf64:	str	r2, [lr, r5, lsl #2]
   2bf68:	sub	r8, r0, #1
   2bf6c:	ldr	r0, [fp, #8]
   2bf70:	str	r8, [r9, r5, lsl #2]
   2bf74:	ldr	r0, [r0, r5, lsl #2]
   2bf78:	str	r0, [sp, #44]	; 0x2c
   2bf7c:	bcs	2bf88 <GetDataSlab+0x45c4>
   2bf80:	mov	r6, r5
   2bf84:	b	2c014 <GetDataSlab+0x4650>
   2bf88:	vmov.i32	q9, #1	; 0x00000001
   2bf8c:	vmov.i32	q10, #1	; 0x00000001
   2bf90:	vmov.i32	q8, #1	; 0x00000001
   2bf94:	vmov.32	d23[1], r0
   2bf98:	bic	r0, r7, #3
   2bf9c:	bic	sl, r5, #3
   2bfa0:	vmov.32	d18[0], r2
   2bfa4:	vmov.32	d20[0], r8
   2bfa8:	sub	r6, r5, r0
   2bfac:	mov	r2, ip
   2bfb0:	vorr	d16, d18, d18
   2bfb4:	vmov.i32	q9, #1	; 0x00000001
   2bfb8:	vorr	d18, d20, d20
   2bfbc:	vld1.32	{d20-d21}, [r2], r4
   2bfc0:	subs	sl, sl, #4
   2bfc4:	vrev64.32	q12, q10
   2bfc8:	vext.8	q12, q12, q12, #8
   2bfcc:	vext.8	q11, q11, q12, #12
   2bfd0:	vmul.i32	q9, q9, q12
   2bfd4:	vmul.i32	q8, q11, q8
   2bfd8:	vorr	q11, q12, q12
   2bfdc:	bne	2bfbc <GetDataSlab+0x45f8>
   2bfe0:	vext.8	q11, q9, q8, #8
   2bfe4:	vext.8	q12, q8, q8, #8
   2bfe8:	cmp	r7, r0
   2bfec:	vmul.i32	q0, q9, q11
   2bff0:	vmul.i32	q1, q8, q12
   2bff4:	vmul.i32	q8, q0, d0[1]
   2bff8:	vmul.i32	q9, q1, d2[1]
   2bffc:	vmov.32	r8, d16[0]
   2c000:	vmov.32	r2, d18[0]
   2c004:	bne	2c010 <GetDataSlab+0x464c>
   2c008:	mov	sl, r7
   2c00c:	b	2c02c <GetDataSlab+0x4668>
   2c010:	vmov.32	r0, d20[0]
   2c014:	mov	sl, r7
   2c018:	mul	r2, r0, r2
   2c01c:	ldr	r0, [r1, r6, lsl #2]
   2c020:	subs	r6, r6, #1
   2c024:	mul	r8, r8, r0
   2c028:	bne	2c018 <GetDataSlab+0x4654>
   2c02c:	ldr	r0, [fp, #12]
   2c030:	sub	lr, fp, #176	; 0xb0
   2c034:	sub	r9, fp, #96	; 0x60
   2c038:	ldr	r6, [sp, #52]	; 0x34
   2c03c:	add	ip, ip, #4
   2c040:	str	r2, [lr, r5, lsl #2]
   2c044:	str	r8, [r9, r5, lsl #2]
   2c048:	ldr	r0, [r0, r5, lsl #2]
   2c04c:	mla	r3, r0, r6, r3
   2c050:	ldr	r0, [fp, #20]
   2c054:	ldr	r6, [sp, #56]	; 0x38
   2c058:	ldr	r0, [r0, r5, lsl #2]
   2c05c:	add	r5, r5, #1
   2c060:	mul	r6, r0, r6
   2c064:	ldr	r0, [fp, #24]
   2c068:	str	r6, [sp, #56]	; 0x38
   2c06c:	mov	r6, r2
   2c070:	ldr	r2, [sp, #44]	; 0x2c
   2c074:	cmp	r5, r0
   2c078:	bne	2bf4c <GetDataSlab+0x4588>
   2c07c:	ldr	r0, [sp, #48]	; 0x30
   2c080:	ldr	r6, [sp, #32]
   2c084:	add	sl, r0, r3, lsl #2
   2c088:	ldr	r0, [fp, #12]
   2c08c:	cmp	r6, #1
   2c090:	bne	3d2dc <GetDataSlab+0x15918>
   2c094:	ldr	r1, [sp, #56]	; 0x38
   2c098:	ldr	r2, [sp, #40]	; 0x28
   2c09c:	cmp	r1, #1
   2c0a0:	sub	r1, fp, #96	; 0x60
   2c0a4:	blt	47ff8 <GetDataSlab+0x20634>
   2c0a8:	add	r9, r0, #4
   2c0ac:	ldr	r0, [fp, #20]
   2c0b0:	mov	ip, #0
   2c0b4:	mov	lr, #0
   2c0b8:	add	r8, r0, #4
   2c0bc:	sub	r0, fp, #136	; 0x88
   2c0c0:	orr	r5, r0, #4
   2c0c4:	orr	r0, r1, #4
   2c0c8:	str	r0, [sp, #44]	; 0x2c
   2c0cc:	lsl	r0, r2, #3
   2c0d0:	str	r0, [sp, #52]	; 0x34
   2c0d4:	bic	r0, r2, #1
   2c0d8:	str	r0, [sp, #48]	; 0x30
   2c0dc:	cmp	r2, #1
   2c0e0:	blt	2c15c <GetDataSlab+0x4798>
   2c0e4:	ldr	r0, [fp, #12]
   2c0e8:	mov	r2, #0
   2c0ec:	ldr	r4, [r0]
   2c0f0:	beq	2c128 <GetDataSlab+0x4764>
   2c0f4:	ldr	r1, [sp, #48]	; 0x30
   2c0f8:	ldr	r0, [sp, #60]	; 0x3c
   2c0fc:	add	r2, sl, r4, lsl #2
   2c100:	vld1.32	{d0}, [r2]!
   2c104:	subs	r1, r1, #2
   2c108:	vcvt.f64.u32	d17, s1
   2c10c:	vcvt.f64.u32	d16, s0
   2c110:	vst1.64	{d16-d17}, [r0]!
   2c114:	bne	2c100 <GetDataSlab+0x473c>
   2c118:	ldr	r0, [sp, #40]	; 0x28
   2c11c:	ldr	r2, [sp, #48]	; 0x30
   2c120:	cmp	r0, r2
   2c124:	beq	2c15c <GetDataSlab+0x4798>
   2c128:	ldr	r0, [sp, #40]	; 0x28
   2c12c:	sub	r1, r0, r2
   2c130:	ldr	r0, [sp, #60]	; 0x3c
   2c134:	add	r0, r0, r2, lsl #3
   2c138:	add	r2, r2, r4
   2c13c:	add	r2, sl, r2, lsl #2
   2c140:	ldr	r7, [r2], #4
   2c144:	subs	r1, r1, #1
   2c148:	vmov	s0, r7
   2c14c:	vcvt.f64.u32	d16, s0
   2c150:	vstr	d16, [r0]
   2c154:	add	r0, r0, #8
   2c158:	bne	2c140 <GetDataSlab+0x477c>
   2c15c:	ldr	r0, [sp, #36]	; 0x24
   2c160:	add	sl, sl, r0, lsl #2
   2c164:	add	r3, r3, r0
   2c168:	ldr	r0, [fp, #24]
   2c16c:	cmp	r0, #2
   2c170:	blt	2c21c <GetDataSlab+0x4858>
   2c174:	mov	r1, #0
   2c178:	mov	r0, r1
   2c17c:	ldr	r1, [r5, r1, lsl #2]
   2c180:	add	r1, r1, #1
   2c184:	str	r1, [r5, r0, lsl #2]
   2c188:	ldr	r2, [r8, r0, lsl #2]
   2c18c:	sdiv	r7, r1, r2
   2c190:	mls	r1, r7, r2, r1
   2c194:	cmp	r1, #0
   2c198:	bne	2c20c <GetDataSlab+0x4848>
   2c19c:	sub	r4, fp, #176	; 0xb0
   2c1a0:	str	ip, [r5, r0, lsl #2]
   2c1a4:	add	r1, r4, r0, lsl #2
   2c1a8:	ldr	r1, [r1, #4]
   2c1ac:	sdiv	r2, r3, r1
   2c1b0:	mls	r2, r2, r1, r3
   2c1b4:	cmp	r2, #0
   2c1b8:	beq	2c1d4 <GetDataSlab+0x4810>
   2c1bc:	ldr	r7, [r4, r0, lsl #2]
   2c1c0:	ldr	r6, [r9, r0, lsl #2]
   2c1c4:	sub	r1, r1, r2
   2c1c8:	mla	r1, r6, r7, r1
   2c1cc:	add	r3, r1, r3
   2c1d0:	b	2c1f0 <GetDataSlab+0x482c>
   2c1d4:	ldr	r1, [r9, r0, lsl #2]
   2c1d8:	cmp	r1, #0
   2c1dc:	beq	2c1f4 <GetDataSlab+0x4830>
   2c1e0:	sub	r2, fp, #176	; 0xb0
   2c1e4:	ldr	r2, [r2, r0, lsl #2]
   2c1e8:	mla	r3, r2, r1, r3
   2c1ec:	mul	r1, r2, r1
   2c1f0:	add	sl, sl, r1, lsl #2
   2c1f4:	ldr	r2, [fp, #24]
   2c1f8:	add	r1, r0, #1
   2c1fc:	add	r0, r0, #2
   2c200:	cmp	r0, r2
   2c204:	blt	2c178 <GetDataSlab+0x47b4>
   2c208:	b	2c21c <GetDataSlab+0x4858>
   2c20c:	ldr	r1, [sp, #44]	; 0x2c
   2c210:	ldr	r0, [r1, r0, lsl #2]
   2c214:	add	sl, sl, r0, lsl #2
   2c218:	add	r3, r0, r3
   2c21c:	ldr	r0, [sp, #60]	; 0x3c
   2c220:	ldr	r1, [sp, #52]	; 0x34
   2c224:	ldr	r2, [sp, #40]	; 0x28
   2c228:	add	r0, r0, r1
   2c22c:	ldr	r1, [sp, #56]	; 0x38
   2c230:	add	lr, lr, r2
   2c234:	str	r0, [sp, #60]	; 0x3c
   2c238:	mov	r0, #0
   2c23c:	cmp	lr, r1
   2c240:	blt	2c0dc <GetDataSlab+0x4718>
   2c244:	b	47ffc <GetDataSlab+0x20638>
   2c248:	ldr	r0, [fp, #16]
   2c24c:	ldr	r9, [fp, #8]
   2c250:	mov	r2, #0
   2c254:	sub	ip, fp, #96	; 0x60
   2c258:	ldr	r0, [r0]
   2c25c:	str	r0, [sp, #28]
   2c260:	sub	r0, r0, #1
   2c264:	str	r0, [fp, #-96]	; 0xffffffa0
   2c268:	ldr	r0, [r9]
   2c26c:	str	r0, [fp, #-176]	; 0xffffff50
   2c270:	str	r0, [sp, #36]	; 0x24
   2c274:	ldr	r0, [fp, #24]
   2c278:	ldr	r1, [sl]
   2c27c:	cmp	r0, #2
   2c280:	str	r1, [sp, #52]	; 0x34
   2c284:	str	r1, [sp, #56]	; 0x38
   2c288:	blt	2c3e0 <GetDataSlab+0x4a1c>
   2c28c:	ldr	r3, [sp, #36]	; 0x24
   2c290:	mov	r5, lr
   2c294:	sub	r7, r9, #4
   2c298:	sub	lr, r9, #12
   2c29c:	mov	r4, #1
   2c2a0:	mov	r8, #0
   2c2a4:	mvn	r0, #15
   2c2a8:	mov	r2, #0
   2c2ac:	mov	r1, r3
   2c2b0:	str	r3, [sp, #44]	; 0x2c
   2c2b4:	ldr	r1, [sp, #52]	; 0x34
   2c2b8:	str	r1, [sp, #56]	; 0x38
   2c2bc:	ldr	r1, [fp, #16]
   2c2c0:	add	r8, r8, #1
   2c2c4:	cmp	r8, #4
   2c2c8:	ldr	r1, [r1, r4, lsl #2]
   2c2cc:	str	r3, [r5, r4, lsl #2]
   2c2d0:	sub	sl, r1, #1
   2c2d4:	str	sl, [ip, r4, lsl #2]
   2c2d8:	ldr	r1, [r9, r4, lsl #2]
   2c2dc:	str	r1, [sp, #40]	; 0x28
   2c2e0:	bcs	2c2ec <GetDataSlab+0x4928>
   2c2e4:	mov	r5, r4
   2c2e8:	b	2c37c <GetDataSlab+0x49b8>
   2c2ec:	vmov.i32	q9, #1	; 0x00000001
   2c2f0:	vmov.i32	q10, #1	; 0x00000001
   2c2f4:	vmov.i32	q8, #1	; 0x00000001
   2c2f8:	vmov.32	d23[1], r1
   2c2fc:	bic	r1, r8, #3
   2c300:	bic	r9, r4, #3
   2c304:	vmov.32	d18[0], r3
   2c308:	vmov.32	d20[0], sl
   2c30c:	sub	r5, r4, r1
   2c310:	mov	r3, lr
   2c314:	vorr	d16, d18, d18
   2c318:	vmov.i32	q9, #1	; 0x00000001
   2c31c:	vorr	d18, d20, d20
   2c320:	vld1.32	{d20-d21}, [r3], r0
   2c324:	subs	r9, r9, #4
   2c328:	vrev64.32	q12, q10
   2c32c:	vext.8	q12, q12, q12, #8
   2c330:	vext.8	q11, q11, q12, #12
   2c334:	vmul.i32	q9, q9, q12
   2c338:	vmul.i32	q8, q11, q8
   2c33c:	vorr	q11, q12, q12
   2c340:	bne	2c320 <GetDataSlab+0x495c>
   2c344:	vext.8	q11, q9, q8, #8
   2c348:	vext.8	q12, q8, q8, #8
   2c34c:	cmp	r8, r1
   2c350:	vmul.i32	q0, q9, q11
   2c354:	vmul.i32	q1, q8, q12
   2c358:	vmul.i32	q8, q0, d0[1]
   2c35c:	vmul.i32	q9, q1, d2[1]
   2c360:	vmov.32	sl, d16[0]
   2c364:	vmov.32	r3, d18[0]
   2c368:	bne	2c374 <GetDataSlab+0x49b0>
   2c36c:	ldr	r9, [fp, #8]
   2c370:	b	2c390 <GetDataSlab+0x49cc>
   2c374:	ldr	r9, [fp, #8]
   2c378:	vmov.32	r1, d20[0]
   2c37c:	mul	r3, r1, r3
   2c380:	ldr	r1, [r7, r5, lsl #2]
   2c384:	subs	r5, r5, #1
   2c388:	mul	sl, sl, r1
   2c38c:	bne	2c37c <GetDataSlab+0x49b8>
   2c390:	ldr	r1, [fp, #12]
   2c394:	sub	r5, fp, #176	; 0xb0
   2c398:	sub	ip, fp, #96	; 0x60
   2c39c:	ldr	r6, [sp, #44]	; 0x2c
   2c3a0:	str	r3, [sp, #44]	; 0x2c
   2c3a4:	add	lr, lr, #4
   2c3a8:	str	r3, [r5, r4, lsl #2]
   2c3ac:	str	sl, [ip, r4, lsl #2]
   2c3b0:	ldr	sl, [fp, #20]
   2c3b4:	ldr	r3, [sp, #40]	; 0x28
   2c3b8:	ldr	r1, [r1, r4, lsl #2]
   2c3bc:	mla	r2, r1, r6, r2
   2c3c0:	ldr	r1, [sl, r4, lsl #2]
   2c3c4:	ldr	r6, [sp, #56]	; 0x38
   2c3c8:	add	r4, r4, #1
   2c3cc:	mul	r6, r1, r6
   2c3d0:	ldr	r1, [fp, #24]
   2c3d4:	str	r6, [sp, #56]	; 0x38
   2c3d8:	cmp	r4, r1
   2c3dc:	bne	2c2bc <GetDataSlab+0x48f8>
   2c3e0:	ldr	r0, [sp, #48]	; 0x30
   2c3e4:	ldr	r1, [sp, #28]
   2c3e8:	add	r9, r0, r2, lsl #2
   2c3ec:	cmp	r1, #1
   2c3f0:	bne	3d470 <GetDataSlab+0x15aac>
   2c3f4:	ldr	r0, [sp, #56]	; 0x38
   2c3f8:	ldr	lr, [fp, #12]
   2c3fc:	ldr	r1, [sp, #52]	; 0x34
   2c400:	cmp	r0, #1
   2c404:	blt	47ff8 <GetDataSlab+0x20634>
   2c408:	sub	r0, fp, #136	; 0x88
   2c40c:	add	r7, sl, #4
   2c410:	mov	sl, #0
   2c414:	mov	ip, #0
   2c418:	orr	r6, r0, #4
   2c41c:	sub	r0, fp, #96	; 0x60
   2c420:	orr	r0, r0, #4
   2c424:	str	r0, [sp, #32]
   2c428:	lsl	r0, r1, #3
   2c42c:	str	r0, [sp, #48]	; 0x30
   2c430:	bic	r0, r1, #1
   2c434:	str	r0, [sp, #40]	; 0x28
   2c438:	ldr	r0, [lr], #4
   2c43c:	str	r0, [sp, #44]	; 0x2c
   2c440:	cmp	r1, #1
   2c444:	mov	r4, lr
   2c448:	blt	2c4c4 <GetDataSlab+0x4b00>
   2c44c:	mov	r3, #0
   2c450:	beq	2c48c <GetDataSlab+0x4ac8>
   2c454:	ldr	r0, [sp, #44]	; 0x2c
   2c458:	ldr	r3, [sp, #40]	; 0x28
   2c45c:	ldr	r1, [sp, #60]	; 0x3c
   2c460:	add	r0, r9, r0, lsl #2
   2c464:	vld1.32	{d0}, [r0]!
   2c468:	subs	r3, r3, #2
   2c46c:	vcvt.f64.f32	d17, s1
   2c470:	vcvt.f64.f32	d16, s0
   2c474:	vst1.64	{d16-d17}, [r1]!
   2c478:	bne	2c464 <GetDataSlab+0x4aa0>
   2c47c:	ldr	r0, [sp, #52]	; 0x34
   2c480:	ldr	r3, [sp, #40]	; 0x28
   2c484:	cmp	r0, r3
   2c488:	beq	2c4c4 <GetDataSlab+0x4b00>
   2c48c:	ldr	r5, [sp, #44]	; 0x2c
   2c490:	ldr	r0, [sp, #52]	; 0x34
   2c494:	ldr	r1, [sp, #60]	; 0x3c
   2c498:	add	r5, r9, r5, lsl #2
   2c49c:	sub	r0, r0, r3
   2c4a0:	add	r1, r1, r3, lsl #3
   2c4a4:	add	r3, r5, r3, lsl #2
   2c4a8:	vldr	s0, [r3]
   2c4ac:	subs	r0, r0, #1
   2c4b0:	add	r3, r3, #4
   2c4b4:	vcvt.f64.f32	d16, s0
   2c4b8:	vstr	d16, [r1]
   2c4bc:	add	r1, r1, #8
   2c4c0:	bne	2c4a8 <GetDataSlab+0x4ae4>
   2c4c4:	ldr	r0, [sp, #36]	; 0x24
   2c4c8:	add	r9, r9, r0, lsl #2
   2c4cc:	add	r2, r2, r0
   2c4d0:	ldr	r0, [fp, #24]
   2c4d4:	cmp	r0, #2
   2c4d8:	blt	2c588 <GetDataSlab+0x4bc4>
   2c4dc:	mov	r1, #0
   2c4e0:	mov	r0, r1
   2c4e4:	ldr	r1, [r6, r1, lsl #2]
   2c4e8:	add	r1, r1, #1
   2c4ec:	str	r1, [r6, r0, lsl #2]
   2c4f0:	ldr	r3, [r7, r0, lsl #2]
   2c4f4:	sdiv	r5, r1, r3
   2c4f8:	mls	r1, r5, r3, r1
   2c4fc:	cmp	r1, #0
   2c500:	bne	2c578 <GetDataSlab+0x4bb4>
   2c504:	sub	r5, fp, #176	; 0xb0
   2c508:	str	sl, [r6, r0, lsl #2]
   2c50c:	add	r1, r5, r0, lsl #2
   2c510:	ldr	r1, [r1, #4]
   2c514:	sdiv	r3, r2, r1
   2c518:	mls	r3, r3, r1, r2
   2c51c:	cmp	r3, #0
   2c520:	beq	2c540 <GetDataSlab+0x4b7c>
   2c524:	ldr	r5, [r5, r0, lsl #2]
   2c528:	ldr	r8, [lr, r0, lsl #2]
   2c52c:	sub	r1, r1, r3
   2c530:	mov	r4, lr
   2c534:	mla	r1, r8, r5, r1
   2c538:	add	r2, r1, r2
   2c53c:	b	2c55c <GetDataSlab+0x4b98>
   2c540:	ldr	r1, [r4, r0, lsl #2]
   2c544:	cmp	r1, #0
   2c548:	beq	2c560 <GetDataSlab+0x4b9c>
   2c54c:	sub	r3, fp, #176	; 0xb0
   2c550:	ldr	r3, [r3, r0, lsl #2]
   2c554:	mla	r2, r3, r1, r2
   2c558:	mul	r1, r3, r1
   2c55c:	add	r9, r9, r1, lsl #2
   2c560:	ldr	r3, [fp, #24]
   2c564:	add	r1, r0, #1
   2c568:	add	r0, r0, #2
   2c56c:	cmp	r0, r3
   2c570:	blt	2c4e0 <GetDataSlab+0x4b1c>
   2c574:	b	2c588 <GetDataSlab+0x4bc4>
   2c578:	ldr	r1, [sp, #32]
   2c57c:	ldr	r0, [r1, r0, lsl #2]
   2c580:	add	r9, r9, r0, lsl #2
   2c584:	add	r2, r0, r2
   2c588:	ldr	r0, [sp, #60]	; 0x3c
   2c58c:	ldr	r1, [sp, #48]	; 0x30
   2c590:	ldr	r3, [sp, #56]	; 0x38
   2c594:	add	r0, r0, r1
   2c598:	ldr	r1, [sp, #52]	; 0x34
   2c59c:	str	r0, [sp, #60]	; 0x3c
   2c5a0:	mov	r0, #0
   2c5a4:	add	ip, ip, r1
   2c5a8:	cmp	ip, r3
   2c5ac:	blt	2c440 <GetDataSlab+0x4a7c>
   2c5b0:	b	47ffc <GetDataSlab+0x20638>
   2c5b4:	ldr	r0, [fp, #16]
   2c5b8:	mov	r2, #0
   2c5bc:	sub	r6, fp, #96	; 0x60
   2c5c0:	ldr	r0, [r0]
   2c5c4:	str	r0, [sp, #28]
   2c5c8:	sub	r0, r0, #1
   2c5cc:	str	r0, [fp, #-96]	; 0xffffffa0
   2c5d0:	ldr	r0, [fp, #8]
   2c5d4:	ldr	r0, [r0]
   2c5d8:	str	r0, [fp, #-176]	; 0xffffff50
   2c5dc:	str	r0, [sp, #40]	; 0x28
   2c5e0:	ldr	r0, [fp, #24]
   2c5e4:	ldr	r1, [sl]
   2c5e8:	cmp	r0, #2
   2c5ec:	str	r1, [sp, #52]	; 0x34
   2c5f0:	str	r1, [sp, #56]	; 0x38
   2c5f4:	blt	2c740 <GetDataSlab+0x4d7c>
   2c5f8:	ldr	r0, [fp, #8]
   2c5fc:	ldr	r3, [sp, #40]	; 0x28
   2c600:	mov	r5, lr
   2c604:	mov	r4, #1
   2c608:	mov	lr, #0
   2c60c:	mvn	ip, #15
   2c610:	mov	r2, #0
   2c614:	sub	r7, r0, #4
   2c618:	sub	r9, r0, #12
   2c61c:	ldr	r0, [sp, #52]	; 0x34
   2c620:	mov	r8, r3
   2c624:	str	r0, [sp, #56]	; 0x38
   2c628:	ldr	r1, [fp, #16]
   2c62c:	add	lr, lr, #1
   2c630:	cmp	lr, #4
   2c634:	ldr	r1, [r1, r4, lsl #2]
   2c638:	str	r3, [r5, r4, lsl #2]
   2c63c:	sub	r1, r1, #1
   2c640:	str	r1, [r6, r4, lsl #2]
   2c644:	ldr	r6, [fp, #8]
   2c648:	ldr	r6, [r6, r4, lsl #2]
   2c64c:	str	r6, [sp, #44]	; 0x2c
   2c650:	bcs	2c65c <GetDataSlab+0x4c98>
   2c654:	mov	r5, r4
   2c658:	b	2c6e4 <GetDataSlab+0x4d20>
   2c65c:	vmov.i32	q9, #1	; 0x00000001
   2c660:	vmov.i32	q10, #1	; 0x00000001
   2c664:	vmov.i32	q8, #1	; 0x00000001
   2c668:	vmov.32	d23[1], r6
   2c66c:	bic	r6, lr, #3
   2c670:	bic	sl, r4, #3
   2c674:	vmov.32	d18[0], r3
   2c678:	vmov.32	d20[0], r1
   2c67c:	sub	r5, r4, r6
   2c680:	mov	r1, r9
   2c684:	vorr	d16, d18, d18
   2c688:	vmov.i32	q9, #1	; 0x00000001
   2c68c:	vorr	d18, d20, d20
   2c690:	vld1.32	{d20-d21}, [r1], ip
   2c694:	subs	sl, sl, #4
   2c698:	vrev64.32	q12, q10
   2c69c:	vext.8	q12, q12, q12, #8
   2c6a0:	vext.8	q11, q11, q12, #12
   2c6a4:	vmul.i32	q9, q9, q12
   2c6a8:	vmul.i32	q8, q11, q8
   2c6ac:	vorr	q11, q12, q12
   2c6b0:	bne	2c690 <GetDataSlab+0x4ccc>
   2c6b4:	vext.8	q11, q9, q8, #8
   2c6b8:	vext.8	q12, q8, q8, #8
   2c6bc:	ldr	sl, [fp, #20]
   2c6c0:	cmp	lr, r6
   2c6c4:	vmul.i32	q0, q9, q11
   2c6c8:	vmul.i32	q1, q8, q12
   2c6cc:	vmul.i32	q8, q0, d0[1]
   2c6d0:	vmul.i32	q9, q1, d2[1]
   2c6d4:	vmov.32	r1, d16[0]
   2c6d8:	vmov.32	r3, d18[0]
   2c6dc:	beq	2c6f8 <GetDataSlab+0x4d34>
   2c6e0:	vmov.32	r6, d20[0]
   2c6e4:	mul	r3, r6, r3
   2c6e8:	ldr	r6, [r7, r5, lsl #2]
   2c6ec:	subs	r5, r5, #1
   2c6f0:	mul	r1, r1, r6
   2c6f4:	bne	2c6e4 <GetDataSlab+0x4d20>
   2c6f8:	sub	r6, fp, #96	; 0x60
   2c6fc:	sub	r5, fp, #176	; 0xb0
   2c700:	ldr	r0, [sp, #56]	; 0x38
   2c704:	add	r9, r9, #4
   2c708:	str	r1, [r6, r4, lsl #2]
   2c70c:	ldr	r1, [fp, #12]
   2c710:	str	r3, [r5, r4, lsl #2]
   2c714:	ldr	r1, [r1, r4, lsl #2]
   2c718:	mla	r2, r1, r8, r2
   2c71c:	ldr	r1, [sl, r4, lsl #2]
   2c720:	mov	r8, r3
   2c724:	ldr	r3, [sp, #44]	; 0x2c
   2c728:	add	r4, r4, #1
   2c72c:	mul	r0, r1, r0
   2c730:	ldr	r1, [fp, #24]
   2c734:	str	r0, [sp, #56]	; 0x38
   2c738:	cmp	r4, r1
   2c73c:	bne	2c628 <GetDataSlab+0x4c64>
   2c740:	ldr	r0, [sp, #48]	; 0x30
   2c744:	ldr	r1, [sp, #28]
   2c748:	add	r9, r0, r2, lsl #3
   2c74c:	cmp	r1, #1
   2c750:	bne	3d604 <GetDataSlab+0x15c40>
   2c754:	ldr	r0, [sp, #56]	; 0x38
   2c758:	ldr	ip, [sp, #60]	; 0x3c
   2c75c:	ldr	r8, [fp, #12]
   2c760:	ldr	r1, [sp, #52]	; 0x34
   2c764:	cmp	r0, #1
   2c768:	blt	47ff8 <GetDataSlab+0x20634>
   2c76c:	ldr	r0, [r8], #4
   2c770:	add	r6, sl, #4
   2c774:	mov	r5, #0
   2c778:	mov	lr, #0
   2c77c:	str	r0, [sp, #44]	; 0x2c
   2c780:	add	r0, r1, r0
   2c784:	str	r0, [sp, #36]	; 0x24
   2c788:	sub	r0, fp, #136	; 0x88
   2c78c:	orr	r7, r0, #4
   2c790:	sub	r0, fp, #96	; 0x60
   2c794:	orr	r0, r0, #4
   2c798:	str	r0, [sp, #28]
   2c79c:	bic	r0, r1, #1
   2c7a0:	str	r0, [sp, #32]
   2c7a4:	lsl	r0, r1, #3
   2c7a8:	str	r0, [sp, #48]	; 0x30
   2c7ac:	cmp	r1, #1
   2c7b0:	blt	2c84c <GetDataSlab+0x4e88>
   2c7b4:	ldr	r0, [sp, #44]	; 0x2c
   2c7b8:	mov	r1, #0
   2c7bc:	add	r4, r9, r0, lsl #3
   2c7c0:	beq	2c824 <GetDataSlab+0x4e60>
   2c7c4:	ldr	r0, [sp, #60]	; 0x3c
   2c7c8:	ldr	r3, [sp, #48]	; 0x30
   2c7cc:	mla	r0, r3, r5, r0
   2c7d0:	ldr	r3, [sp, #36]	; 0x24
   2c7d4:	add	r3, r9, r3, lsl #3
   2c7d8:	cmp	r0, r3
   2c7dc:	bcs	2c7f8 <GetDataSlab+0x4e34>
   2c7e0:	ldr	r0, [sp, #48]	; 0x30
   2c7e4:	ldr	r3, [sp, #60]	; 0x3c
   2c7e8:	mla	r0, r0, r5, r0
   2c7ec:	add	r0, r3, r0
   2c7f0:	cmp	r0, r4
   2c7f4:	bhi	2c824 <GetDataSlab+0x4e60>
   2c7f8:	ldr	r1, [sp, #32]
   2c7fc:	mov	r3, ip
   2c800:	mov	r0, r4
   2c804:	vld1.64	{d16-d17}, [r0]!
   2c808:	subs	r1, r1, #2
   2c80c:	vst1.64	{d16-d17}, [r3]!
   2c810:	bne	2c804 <GetDataSlab+0x4e40>
   2c814:	ldr	r0, [sp, #52]	; 0x34
   2c818:	ldr	r1, [sp, #32]
   2c81c:	cmp	r0, r1
   2c820:	beq	2c84c <GetDataSlab+0x4e88>
   2c824:	ldr	r0, [sp, #52]	; 0x34
   2c828:	sub	r3, r0, r1
   2c82c:	lsl	r1, r1, #3
   2c830:	add	r0, r4, r1
   2c834:	subs	r3, r3, #1
   2c838:	vldr	d16, [r0]
   2c83c:	add	r0, ip, r1
   2c840:	add	r1, r1, #8
   2c844:	vstr	d16, [r0]
   2c848:	bne	2c830 <GetDataSlab+0x4e6c>
   2c84c:	ldr	r0, [sp, #40]	; 0x28
   2c850:	add	r9, r9, r0, lsl #3
   2c854:	add	r2, r2, r0
   2c858:	ldr	r0, [fp, #24]
   2c85c:	cmp	r0, #2
   2c860:	blt	2c910 <GetDataSlab+0x4f4c>
   2c864:	mov	r1, #0
   2c868:	mov	r0, r1
   2c86c:	ldr	r1, [r7, r1, lsl #2]
   2c870:	add	r1, r1, #1
   2c874:	str	r1, [r7, r0, lsl #2]
   2c878:	ldr	r3, [r6, r0, lsl #2]
   2c87c:	sdiv	r4, r1, r3
   2c880:	mls	r1, r4, r3, r1
   2c884:	cmp	r1, #0
   2c888:	bne	2c900 <GetDataSlab+0x4f3c>
   2c88c:	mov	r1, #0
   2c890:	sub	r4, fp, #176	; 0xb0
   2c894:	str	r1, [r7, r0, lsl #2]
   2c898:	add	r1, r4, r0, lsl #2
   2c89c:	ldr	r1, [r1, #4]
   2c8a0:	sdiv	r3, r2, r1
   2c8a4:	mls	r3, r3, r1, r2
   2c8a8:	cmp	r3, #0
   2c8ac:	beq	2c8c8 <GetDataSlab+0x4f04>
   2c8b0:	ldr	r4, [r4, r0, lsl #2]
   2c8b4:	ldr	sl, [r8, r0, lsl #2]
   2c8b8:	sub	r1, r1, r3
   2c8bc:	mla	r1, sl, r4, r1
   2c8c0:	add	r2, r1, r2
   2c8c4:	b	2c8e4 <GetDataSlab+0x4f20>
   2c8c8:	ldr	r1, [r8, r0, lsl #2]
   2c8cc:	cmp	r1, #0
   2c8d0:	beq	2c8e8 <GetDataSlab+0x4f24>
   2c8d4:	sub	r3, fp, #176	; 0xb0
   2c8d8:	ldr	r3, [r3, r0, lsl #2]
   2c8dc:	mla	r2, r3, r1, r2
   2c8e0:	mul	r1, r3, r1
   2c8e4:	add	r9, r9, r1, lsl #3
   2c8e8:	ldr	r3, [fp, #24]
   2c8ec:	add	r1, r0, #1
   2c8f0:	add	r0, r0, #2
   2c8f4:	cmp	r0, r3
   2c8f8:	blt	2c868 <GetDataSlab+0x4ea4>
   2c8fc:	b	2c910 <GetDataSlab+0x4f4c>
   2c900:	ldr	r1, [sp, #28]
   2c904:	ldr	r0, [r1, r0, lsl #2]
   2c908:	add	r9, r9, r0, lsl #3
   2c90c:	add	r2, r0, r2
   2c910:	ldr	r1, [sp, #52]	; 0x34
   2c914:	ldr	r0, [sp, #48]	; 0x30
   2c918:	ldr	r3, [sp, #56]	; 0x38
   2c91c:	add	r5, r5, #1
   2c920:	add	lr, lr, r1
   2c924:	add	ip, ip, r0
   2c928:	mov	r0, #0
   2c92c:	cmp	lr, r3
   2c930:	blt	2c7ac <GetDataSlab+0x4de8>
   2c934:	b	47ffc <GetDataSlab+0x20638>
   2c938:	ldr	r0, [fp, #16]
   2c93c:	mov	r4, #0
   2c940:	sub	r8, fp, #96	; 0x60
   2c944:	str	r6, [sp, #40]	; 0x28
   2c948:	ldr	r0, [r0]
   2c94c:	str	r0, [sp, #36]	; 0x24
   2c950:	sub	r0, r0, #1
   2c954:	str	r0, [fp, #-96]	; 0xffffffa0
   2c958:	ldr	r0, [fp, #8]
   2c95c:	ldr	r0, [r0]
   2c960:	str	r0, [fp, #-176]	; 0xffffff50
   2c964:	str	r0, [sp, #32]
   2c968:	ldr	r0, [fp, #24]
   2c96c:	ldr	r1, [sl]
   2c970:	cmp	r0, #2
   2c974:	str	r1, [sp, #24]
   2c978:	str	r1, [sp, #52]	; 0x34
   2c97c:	blt	2caec <GetDataSlab+0x5128>
   2c980:	ldr	r0, [fp, #8]
   2c984:	ldr	r2, [sp, #24]
   2c988:	mov	r7, #1
   2c98c:	mvn	r9, #15
   2c990:	mov	r4, #0
   2c994:	sub	r1, r0, #4
   2c998:	sub	sl, r0, #12
   2c99c:	mov	r0, #0
   2c9a0:	str	r2, [sp, #52]	; 0x34
   2c9a4:	str	r0, [sp, #56]	; 0x38
   2c9a8:	ldr	r0, [sp, #32]
   2c9ac:	mov	r5, r0
   2c9b0:	ldr	r2, [fp, #16]
   2c9b4:	str	r5, [sp, #44]	; 0x2c
   2c9b8:	ldr	r6, [sp, #56]	; 0x38
   2c9bc:	ldr	r2, [r2, r7, lsl #2]
   2c9c0:	str	r0, [lr, r7, lsl #2]
   2c9c4:	add	r6, r6, #1
   2c9c8:	cmp	r6, #4
   2c9cc:	str	r6, [sp, #56]	; 0x38
   2c9d0:	sub	r5, r2, #1
   2c9d4:	ldr	r2, [fp, #8]
   2c9d8:	str	r5, [r8, r7, lsl #2]
   2c9dc:	ldr	lr, [r2, r7, lsl #2]
   2c9e0:	bcs	2c9f0 <GetDataSlab+0x502c>
   2c9e4:	mov	r2, lr
   2c9e8:	mov	r3, r7
   2c9ec:	b	2ca80 <GetDataSlab+0x50bc>
   2c9f0:	vmov.i32	q9, #1	; 0x00000001
   2c9f4:	vmov.i32	q10, #1	; 0x00000001
   2c9f8:	vmov.i32	q8, #1	; 0x00000001
   2c9fc:	bic	r2, r6, #3
   2ca00:	bic	ip, r7, #3
   2ca04:	vmov.32	d23[1], lr
   2ca08:	vmov.32	d18[0], r0
   2ca0c:	vmov.32	d20[0], r5
   2ca10:	sub	r3, r7, r2
   2ca14:	mov	r0, sl
   2ca18:	vorr	d16, d18, d18
   2ca1c:	vmov.i32	q9, #1	; 0x00000001
   2ca20:	vorr	d18, d20, d20
   2ca24:	vld1.32	{d20-d21}, [r0], r9
   2ca28:	subs	ip, ip, #4
   2ca2c:	vrev64.32	q12, q10
   2ca30:	vext.8	q12, q12, q12, #8
   2ca34:	vext.8	q11, q11, q12, #12
   2ca38:	vmul.i32	q9, q9, q12
   2ca3c:	vmul.i32	q8, q11, q8
   2ca40:	vorr	q11, q12, q12
   2ca44:	bne	2ca24 <GetDataSlab+0x5060>
   2ca48:	vext.8	q11, q9, q8, #8
   2ca4c:	vext.8	q12, q8, q8, #8
   2ca50:	cmp	r6, r2
   2ca54:	vmul.i32	q0, q9, q11
   2ca58:	vmul.i32	q1, q8, q12
   2ca5c:	vmul.i32	q8, q0, d0[1]
   2ca60:	vmul.i32	q9, q1, d2[1]
   2ca64:	vmov.32	r5, d16[0]
   2ca68:	vmov.32	r0, d18[0]
   2ca6c:	bne	2ca78 <GetDataSlab+0x50b4>
   2ca70:	ldr	ip, [sp, #60]	; 0x3c
   2ca74:	b	2ca94 <GetDataSlab+0x50d0>
   2ca78:	ldr	ip, [sp, #60]	; 0x3c
   2ca7c:	vmov.32	r2, d20[0]
   2ca80:	mul	r0, r2, r0
   2ca84:	ldr	r2, [r1, r3, lsl #2]
   2ca88:	subs	r3, r3, #1
   2ca8c:	mul	r5, r5, r2
   2ca90:	bne	2ca80 <GetDataSlab+0x50bc>
   2ca94:	sub	r2, fp, #176	; 0xb0
   2ca98:	sub	r8, fp, #96	; 0x60
   2ca9c:	add	sl, sl, #4
   2caa0:	mov	r3, r2
   2caa4:	str	r0, [r2, r7, lsl #2]
   2caa8:	ldr	r2, [fp, #12]
   2caac:	str	r5, [r8, r7, lsl #2]
   2cab0:	ldr	r5, [sp, #44]	; 0x2c
   2cab4:	ldr	r2, [r2, r7, lsl #2]
   2cab8:	mla	r4, r2, r5, r4
   2cabc:	ldr	r2, [fp, #20]
   2cac0:	ldr	r5, [sp, #52]	; 0x34
   2cac4:	ldr	r2, [r2, r7, lsl #2]
   2cac8:	add	r7, r7, #1
   2cacc:	mul	r5, r2, r5
   2cad0:	ldr	r2, [fp, #24]
   2cad4:	str	r5, [sp, #52]	; 0x34
   2cad8:	mov	r5, r0
   2cadc:	mov	r0, lr
   2cae0:	mov	lr, r3
   2cae4:	cmp	r7, r2
   2cae8:	bne	2c9b0 <GetDataSlab+0x4fec>
   2caec:	ldr	r0, [sp, #48]	; 0x30
   2caf0:	ldr	r3, [sp, #36]	; 0x24
   2caf4:	add	r5, r0, r4, lsl #3
   2caf8:	cmp	r3, #1
   2cafc:	bne	3d798 <GetDataSlab+0x15dd4>
   2cb00:	ldr	r0, [sp, #52]	; 0x34
   2cb04:	ldr	r6, [sp, #40]	; 0x28
   2cb08:	ldr	sl, [sp, #24]
   2cb0c:	cmp	r0, #1
   2cb10:	ldr	r0, [fp, #20]
   2cb14:	blt	3d968 <GetDataSlab+0x15fa4>
   2cb18:	add	lr, r0, #4
   2cb1c:	sub	r0, fp, #136	; 0x88
   2cb20:	mov	r9, ip
   2cb24:	orr	r8, r0, #4
   2cb28:	sub	r0, fp, #96	; 0x60
   2cb2c:	str	lr, [sp, #12]
   2cb30:	orr	r0, r0, #4
   2cb34:	str	r0, [sp, #4]
   2cb38:	lsl	r0, sl, #3
   2cb3c:	str	r0, [sp, #28]
   2cb40:	bic	r0, sl, #1
   2cb44:	str	r0, [sp, #16]
   2cb48:	ldr	r0, [fp, #12]
   2cb4c:	ldr	r1, [r0], #4
   2cb50:	str	r1, [sp, #20]
   2cb54:	mov	r1, #0
   2cb58:	str	r0, [sp, #8]
   2cb5c:	cmp	sl, #1
   2cb60:	str	r1, [sp, #36]	; 0x24
   2cb64:	str	r5, [sp, #44]	; 0x2c
   2cb68:	str	r9, [sp, #56]	; 0x38
   2cb6c:	blt	2cc08 <GetDataSlab+0x5244>
   2cb70:	ldr	r0, [sp, #44]	; 0x2c
   2cb74:	ldr	r1, [sp, #20]
   2cb78:	add	r5, r0, r1, lsl #3
   2cb7c:	mov	r0, #0
   2cb80:	beq	2cbd8 <GetDataSlab+0x5214>
   2cb84:	ldr	r6, [sp, #16]
   2cb88:	mov	sl, r5
   2cb8c:	vld1.64	{d8-d9}, [sl]!
   2cb90:	vmov.32	r0, d9[0]
   2cb94:	vmov.32	r1, d9[1]
   2cb98:	bl	582ac <__aeabi_l2d>
   2cb9c:	vmov.32	r2, d8[0]
   2cba0:	vmov.32	r3, d8[1]
   2cba4:	vmov	d9, r0, r1
   2cba8:	mov	r0, r2
   2cbac:	mov	r1, r3
   2cbb0:	bl	582ac <__aeabi_l2d>
   2cbb4:	vmov	d8, r0, r1
   2cbb8:	subs	r6, r6, #2
   2cbbc:	vst1.64	{d8-d9}, [r9]!
   2cbc0:	bne	2cb8c <GetDataSlab+0x51c8>
   2cbc4:	ldr	sl, [sp, #24]
   2cbc8:	ldr	r0, [sp, #16]
   2cbcc:	ldr	r9, [sp, #56]	; 0x38
   2cbd0:	cmp	sl, r0
   2cbd4:	beq	2cc08 <GetDataSlab+0x5244>
   2cbd8:	sub	r6, sl, r0
   2cbdc:	lsl	r7, r0, #3
   2cbe0:	mov	r1, r5
   2cbe4:	ldr	r0, [r1, r7]!
   2cbe8:	ldr	r1, [r1, #4]
   2cbec:	bl	582ac <__aeabi_l2d>
   2cbf0:	mov	r2, r9
   2cbf4:	subs	r6, r6, #1
   2cbf8:	str	r0, [r2, r7]!
   2cbfc:	add	r7, r7, #8
   2cc00:	str	r1, [r2, #4]
   2cc04:	bne	2cbe0 <GetDataSlab+0x521c>
   2cc08:	ldr	r0, [sp, #32]
   2cc0c:	ldr	r5, [sp, #44]	; 0x2c
   2cc10:	add	r5, r5, r0, lsl #3
   2cc14:	add	r4, r4, r0
   2cc18:	ldr	r0, [fp, #24]
   2cc1c:	cmp	r0, #2
   2cc20:	blt	2ccd8 <GetDataSlab+0x5314>
   2cc24:	sub	r6, fp, #176	; 0xb0
   2cc28:	ldr	lr, [sp, #12]
   2cc2c:	mov	r1, #0
   2cc30:	mov	ip, r6
   2cc34:	ldr	r6, [sp, #8]
   2cc38:	mov	r0, r1
   2cc3c:	ldr	r1, [r8, r1, lsl #2]
   2cc40:	add	r1, r1, #1
   2cc44:	str	r1, [r8, r0, lsl #2]
   2cc48:	ldr	r2, [lr, r0, lsl #2]
   2cc4c:	sdiv	r3, r1, r2
   2cc50:	mls	r1, r3, r2, r1
   2cc54:	cmp	r1, #0
   2cc58:	bne	2ccc8 <GetDataSlab+0x5304>
   2cc5c:	mov	r1, #0
   2cc60:	str	r1, [r8, r0, lsl #2]
   2cc64:	add	r1, ip, r0, lsl #2
   2cc68:	ldr	r1, [r1, #4]
   2cc6c:	sdiv	r2, r4, r1
   2cc70:	mls	r2, r2, r1, r4
   2cc74:	cmp	r2, #0
   2cc78:	beq	2cc94 <GetDataSlab+0x52d0>
   2cc7c:	ldr	r3, [ip, r0, lsl #2]
   2cc80:	ldr	r7, [r6, r0, lsl #2]
   2cc84:	sub	r1, r1, r2
   2cc88:	mla	r1, r7, r3, r1
   2cc8c:	add	r4, r1, r4
   2cc90:	b	2ccac <GetDataSlab+0x52e8>
   2cc94:	ldr	r1, [r6, r0, lsl #2]
   2cc98:	cmp	r1, #0
   2cc9c:	beq	2ccb0 <GetDataSlab+0x52ec>
   2cca0:	ldr	r2, [ip, r0, lsl #2]
   2cca4:	mla	r4, r2, r1, r4
   2cca8:	mul	r1, r2, r1
   2ccac:	add	r5, r5, r1, lsl #3
   2ccb0:	ldr	r2, [fp, #24]
   2ccb4:	add	r1, r0, #1
   2ccb8:	add	r0, r0, #2
   2ccbc:	cmp	r0, r2
   2ccc0:	blt	2cc38 <GetDataSlab+0x5274>
   2ccc4:	b	2ccd8 <GetDataSlab+0x5314>
   2ccc8:	ldr	r1, [sp, #4]
   2cccc:	ldr	r0, [r1, r0, lsl #2]
   2ccd0:	add	r5, r5, r0, lsl #3
   2ccd4:	add	r4, r0, r4
   2ccd8:	ldr	r0, [sp, #28]
   2ccdc:	ldr	r9, [sp, #56]	; 0x38
   2cce0:	ldr	r1, [sp, #36]	; 0x24
   2cce4:	add	r9, r9, r0
   2cce8:	ldr	r0, [sp, #52]	; 0x34
   2ccec:	add	r1, r1, sl
   2ccf0:	cmp	r1, r0
   2ccf4:	blt	2cb5c <GetDataSlab+0x5198>
   2ccf8:	ldr	r6, [sp, #40]	; 0x28
   2ccfc:	b	3d968 <GetDataSlab+0x15fa4>
   2cd00:	ldr	r0, [fp, #16]
   2cd04:	mov	r1, sl
   2cd08:	ldr	r9, [fp, #8]
   2cd0c:	mov	r3, #0
   2cd10:	sub	r7, fp, #96	; 0x60
   2cd14:	ldr	sl, [r0]
   2cd18:	sub	r0, sl, #1
   2cd1c:	str	r0, [fp, #-96]	; 0xffffffa0
   2cd20:	ldr	r0, [r9]
   2cd24:	str	r0, [fp, #-176]	; 0xffffff50
   2cd28:	str	r0, [sp, #32]
   2cd2c:	ldr	r0, [fp, #24]
   2cd30:	ldr	r1, [r1]
   2cd34:	cmp	r0, #2
   2cd38:	str	r1, [sp, #40]	; 0x28
   2cd3c:	str	r1, [sp, #52]	; 0x34
   2cd40:	blt	2cea4 <GetDataSlab+0x54e0>
   2cd44:	mov	r1, #0
   2cd48:	ldr	r2, [sp, #32]
   2cd4c:	mov	r6, lr
   2cd50:	sub	r0, r9, #4
   2cd54:	sub	ip, r9, #12
   2cd58:	mov	r5, #1
   2cd5c:	mvn	lr, #15
   2cd60:	mov	r3, #0
   2cd64:	str	r1, [sp, #56]	; 0x38
   2cd68:	ldr	r1, [sp, #40]	; 0x28
   2cd6c:	mov	r8, r2
   2cd70:	str	r1, [sp, #52]	; 0x34
   2cd74:	ldr	r4, [fp, #16]
   2cd78:	ldr	r1, [sp, #56]	; 0x38
   2cd7c:	ldr	r4, [r4, r5, lsl #2]
   2cd80:	str	r2, [r6, r5, lsl #2]
   2cd84:	add	r1, r1, #1
   2cd88:	cmp	r1, #4
   2cd8c:	str	r1, [sp, #56]	; 0x38
   2cd90:	sub	r4, r4, #1
   2cd94:	str	r4, [r7, r5, lsl #2]
   2cd98:	ldr	r7, [r9, r5, lsl #2]
   2cd9c:	str	r7, [sp, #44]	; 0x2c
   2cda0:	bcs	2cdac <GetDataSlab+0x53e8>
   2cda4:	mov	r6, r5
   2cda8:	b	2ce44 <GetDataSlab+0x5480>
   2cdac:	vmov.i32	q9, #1	; 0x00000001
   2cdb0:	vmov.i32	q10, #1	; 0x00000001
   2cdb4:	vmov.i32	q8, #1	; 0x00000001
   2cdb8:	bic	r9, r5, #3
   2cdbc:	vmov.32	d23[1], r7
   2cdc0:	vmov.32	d18[0], r2
   2cdc4:	bic	r2, r1, #3
   2cdc8:	vmov.32	d20[0], r4
   2cdcc:	vorr	d16, d18, d18
   2cdd0:	vmov.i32	q9, #1	; 0x00000001
   2cdd4:	str	r2, [sp, #36]	; 0x24
   2cdd8:	sub	r6, r5, r2
   2cddc:	mov	r2, ip
   2cde0:	vorr	d18, d20, d20
   2cde4:	vld1.32	{d20-d21}, [r2], lr
   2cde8:	subs	r9, r9, #4
   2cdec:	vrev64.32	q12, q10
   2cdf0:	vext.8	q12, q12, q12, #8
   2cdf4:	vext.8	q11, q11, q12, #12
   2cdf8:	vmul.i32	q9, q9, q12
   2cdfc:	vmul.i32	q8, q11, q8
   2ce00:	vorr	q11, q12, q12
   2ce04:	bne	2cde4 <GetDataSlab+0x5420>
   2ce08:	ldr	r7, [sp, #36]	; 0x24
   2ce0c:	vext.8	q11, q9, q8, #8
   2ce10:	vext.8	q12, q8, q8, #8
   2ce14:	vmul.i32	q0, q9, q11
   2ce18:	vmul.i32	q1, q8, q12
   2ce1c:	vmul.i32	q8, q0, d0[1]
   2ce20:	vmul.i32	q9, q1, d2[1]
   2ce24:	vmov.32	r4, d16[0]
   2ce28:	vmov.32	r2, d18[0]
   2ce2c:	cmp	r1, r7
   2ce30:	bne	2ce3c <GetDataSlab+0x5478>
   2ce34:	ldr	r9, [fp, #8]
   2ce38:	b	2ce58 <GetDataSlab+0x5494>
   2ce3c:	ldr	r9, [fp, #8]
   2ce40:	vmov.32	r7, d20[0]
   2ce44:	mul	r2, r7, r2
   2ce48:	ldr	r7, [r0, r6, lsl #2]
   2ce4c:	subs	r6, r6, #1
   2ce50:	mul	r4, r4, r7
   2ce54:	bne	2ce44 <GetDataSlab+0x5480>
   2ce58:	sub	r7, fp, #96	; 0x60
   2ce5c:	sub	r6, fp, #176	; 0xb0
   2ce60:	ldr	r1, [sp, #52]	; 0x34
   2ce64:	add	ip, ip, #4
   2ce68:	str	r4, [r7, r5, lsl #2]
   2ce6c:	ldr	r4, [fp, #12]
   2ce70:	str	r2, [r6, r5, lsl #2]
   2ce74:	ldr	r4, [r4, r5, lsl #2]
   2ce78:	mla	r3, r4, r8, r3
   2ce7c:	ldr	r4, [fp, #20]
   2ce80:	mov	r8, r2
   2ce84:	ldr	r2, [sp, #44]	; 0x2c
   2ce88:	ldr	r4, [r4, r5, lsl #2]
   2ce8c:	add	r5, r5, #1
   2ce90:	mul	r1, r4, r1
   2ce94:	ldr	r4, [fp, #24]
   2ce98:	str	r1, [sp, #52]	; 0x34
   2ce9c:	cmp	r5, r4
   2cea0:	bne	2cd74 <GetDataSlab+0x53b0>
   2cea4:	ldr	r0, [sp, #48]	; 0x30
   2cea8:	cmp	sl, #1
   2ceac:	add	r8, r0, r3
   2ceb0:	bne	3dd20 <GetDataSlab+0x1635c>
   2ceb4:	ldr	r0, [sp, #52]	; 0x34
   2ceb8:	ldr	ip, [sp, #60]	; 0x3c
   2cebc:	ldr	lr, [sp, #40]	; 0x28
   2cec0:	sub	r1, fp, #96	; 0x60
   2cec4:	cmp	r0, #1
   2cec8:	ldr	r0, [fp, #12]
   2cecc:	blt	47ff8 <GetDataSlab+0x20634>
   2ced0:	add	sl, r0, #4
   2ced4:	ldr	r0, [fp, #20]
   2ced8:	mov	r4, ip
   2cedc:	mov	ip, #0
   2cee0:	add	r9, r0, #4
   2cee4:	sub	r0, fp, #136	; 0x88
   2cee8:	orr	r6, r0, #4
   2ceec:	orr	r0, r1, #4
   2cef0:	str	r0, [sp, #28]
   2cef4:	bic	r0, lr, #3
   2cef8:	str	r0, [sp, #36]	; 0x24
   2cefc:	lsl	r0, lr, #2
   2cf00:	str	r0, [sp, #44]	; 0x2c
   2cf04:	mov	r0, #0
   2cf08:	str	r0, [sp, #56]	; 0x38
   2cf0c:	cmp	lr, #1
   2cf10:	str	r4, [sp, #48]	; 0x30
   2cf14:	blt	2cff0 <GetDataSlab+0x562c>
   2cf18:	ldr	r0, [fp, #12]
   2cf1c:	mov	r2, #0
   2cf20:	cmp	lr, #4
   2cf24:	ldr	r5, [r0]
   2cf28:	bcc	2cfc4 <GetDataSlab+0x5600>
   2cf2c:	ldr	r0, [sp, #60]	; 0x3c
   2cf30:	ldr	r1, [sp, #44]	; 0x2c
   2cf34:	ldr	r7, [sp, #56]	; 0x38
   2cf38:	mla	r7, r1, r7, r0
   2cf3c:	ldr	r0, [sp, #40]	; 0x28
   2cf40:	add	r1, r8, r5
   2cf44:	add	lr, r8, r0
   2cf48:	add	r0, lr, r5
   2cf4c:	ldr	lr, [sp, #40]	; 0x28
   2cf50:	cmp	r7, r0
   2cf54:	bcs	2cf7c <GetDataSlab+0x55b8>
   2cf58:	mov	r7, r5
   2cf5c:	ldr	r0, [sp, #44]	; 0x2c
   2cf60:	ldr	r5, [sp, #56]	; 0x38
   2cf64:	mla	r0, r0, r5, r0
   2cf68:	mov	r5, r7
   2cf6c:	ldr	r7, [sp, #60]	; 0x3c
   2cf70:	add	r0, r7, r0
   2cf74:	cmp	r1, r0
   2cf78:	bcc	2cfc4 <GetDataSlab+0x5600>
   2cf7c:	ldr	r2, [sp, #36]	; 0x24
   2cf80:	mov	r7, r5
   2cf84:	mov	r0, r4
   2cf88:	add	r5, sp, #204	; 0xcc
   2cf8c:	ldr	r4, [r1], #4
   2cf90:	subs	r2, r2, #4
   2cf94:	str	r4, [sp, #204]	; 0xcc
   2cf98:	vld1.32	{d16[0]}, [r5 :32]
   2cf9c:	vmovl.u8	q8, d16
   2cfa0:	vmovl.u16	q8, d16
   2cfa4:	vcvt.f32.u32	q8, q8
   2cfa8:	vst1.32	{d16-d17}, [r0]!
   2cfac:	bne	2cf8c <GetDataSlab+0x55c8>
   2cfb0:	ldr	r2, [sp, #36]	; 0x24
   2cfb4:	ldr	r4, [sp, #48]	; 0x30
   2cfb8:	mov	r5, r7
   2cfbc:	cmp	lr, r2
   2cfc0:	beq	2cff0 <GetDataSlab+0x562c>
   2cfc4:	sub	r1, lr, r2
   2cfc8:	add	r0, r4, r2, lsl #2
   2cfcc:	add	r2, r2, r5
   2cfd0:	add	r2, r8, r2
   2cfd4:	ldrb	r4, [r2], #1
   2cfd8:	subs	r1, r1, #1
   2cfdc:	vmov	s0, r4
   2cfe0:	vcvt.f32.u32	s0, s0
   2cfe4:	vstr	s0, [r0]
   2cfe8:	add	r0, r0, #4
   2cfec:	bne	2cfd4 <GetDataSlab+0x5610>
   2cff0:	ldr	r0, [sp, #32]
   2cff4:	sub	r5, fp, #176	; 0xb0
   2cff8:	add	r8, r8, r0
   2cffc:	add	r3, r3, r0
   2d000:	ldr	r0, [fp, #24]
   2d004:	cmp	r0, #2
   2d008:	blt	2d0ac <GetDataSlab+0x56e8>
   2d00c:	mov	r1, #0
   2d010:	mov	r0, r1
   2d014:	ldr	r1, [r6, r1, lsl #2]
   2d018:	add	r1, r1, #1
   2d01c:	str	r1, [r6, r0, lsl #2]
   2d020:	ldr	r2, [r9, r0, lsl #2]
   2d024:	sdiv	r4, r1, r2
   2d028:	mls	r1, r4, r2, r1
   2d02c:	cmp	r1, #0
   2d030:	bne	2d09c <GetDataSlab+0x56d8>
   2d034:	mov	r1, #0
   2d038:	str	r1, [r6, r0, lsl #2]
   2d03c:	add	r1, r5, r0, lsl #2
   2d040:	ldr	r1, [r1, #4]
   2d044:	sdiv	r2, r3, r1
   2d048:	mls	r2, r2, r1, r3
   2d04c:	cmp	r2, #0
   2d050:	beq	2d070 <GetDataSlab+0x56ac>
   2d054:	ldr	r4, [r5, r0, lsl #2]
   2d058:	ldr	r7, [sl, r0, lsl #2]
   2d05c:	sub	r1, r1, r2
   2d060:	mla	r1, r7, r4, r1
   2d064:	add	r3, r1, r3
   2d068:	add	r8, r8, r1
   2d06c:	b	2d084 <GetDataSlab+0x56c0>
   2d070:	ldr	r1, [sl, r0, lsl #2]
   2d074:	cmp	r1, #0
   2d078:	ldrne	r2, [r5, r0, lsl #2]
   2d07c:	mlane	r3, r2, r1, r3
   2d080:	mlane	r8, r2, r1, r8
   2d084:	ldr	r2, [fp, #24]
   2d088:	add	r1, r0, #1
   2d08c:	add	r0, r0, #2
   2d090:	cmp	r0, r2
   2d094:	blt	2d010 <GetDataSlab+0x564c>
   2d098:	b	2d0ac <GetDataSlab+0x56e8>
   2d09c:	ldr	r1, [sp, #28]
   2d0a0:	ldr	r0, [r1, r0, lsl #2]
   2d0a4:	add	r8, r8, r0
   2d0a8:	add	r3, r0, r3
   2d0ac:	ldr	r0, [sp, #44]	; 0x2c
   2d0b0:	ldr	r4, [sp, #48]	; 0x30
   2d0b4:	ldr	r1, [sp, #52]	; 0x34
   2d0b8:	add	ip, ip, lr
   2d0bc:	add	r4, r4, r0
   2d0c0:	ldr	r0, [sp, #56]	; 0x38
   2d0c4:	cmp	ip, r1
   2d0c8:	add	r0, r0, #1
   2d0cc:	str	r0, [sp, #56]	; 0x38
   2d0d0:	mov	r0, #0
   2d0d4:	blt	2cf0c <GetDataSlab+0x5548>
   2d0d8:	b	47ffc <GetDataSlab+0x20638>
   2d0dc:	ldr	r0, [fp, #16]
   2d0e0:	ldr	r9, [fp, #8]
   2d0e4:	mov	r2, #0
   2d0e8:	sub	ip, fp, #96	; 0x60
   2d0ec:	ldr	r0, [r0]
   2d0f0:	str	r0, [sp, #24]
   2d0f4:	sub	r0, r0, #1
   2d0f8:	str	r0, [fp, #-96]	; 0xffffffa0
   2d0fc:	ldr	r0, [r9]
   2d100:	str	r0, [fp, #-176]	; 0xffffff50
   2d104:	str	r0, [sp, #36]	; 0x24
   2d108:	ldr	r0, [fp, #24]
   2d10c:	ldr	r1, [sl]
   2d110:	cmp	r0, #2
   2d114:	str	r1, [sp, #44]	; 0x2c
   2d118:	str	r1, [sp, #52]	; 0x34
   2d11c:	blt	2d274 <GetDataSlab+0x58b0>
   2d120:	ldr	r3, [sp, #36]	; 0x24
   2d124:	mov	r5, lr
   2d128:	sub	r7, r9, #4
   2d12c:	sub	lr, r9, #12
   2d130:	mov	r4, #1
   2d134:	mov	r8, #0
   2d138:	mvn	r0, #15
   2d13c:	mov	r2, #0
   2d140:	mov	r1, r3
   2d144:	str	r3, [sp, #56]	; 0x38
   2d148:	ldr	r1, [sp, #44]	; 0x2c
   2d14c:	str	r1, [sp, #52]	; 0x34
   2d150:	ldr	r1, [fp, #16]
   2d154:	add	r8, r8, #1
   2d158:	cmp	r8, #4
   2d15c:	ldr	r1, [r1, r4, lsl #2]
   2d160:	str	r3, [r5, r4, lsl #2]
   2d164:	sub	sl, r1, #1
   2d168:	str	sl, [ip, r4, lsl #2]
   2d16c:	ldr	r1, [r9, r4, lsl #2]
   2d170:	str	r1, [sp, #40]	; 0x28
   2d174:	bcs	2d180 <GetDataSlab+0x57bc>
   2d178:	mov	r5, r4
   2d17c:	b	2d210 <GetDataSlab+0x584c>
   2d180:	vmov.i32	q9, #1	; 0x00000001
   2d184:	vmov.i32	q10, #1	; 0x00000001
   2d188:	vmov.i32	q8, #1	; 0x00000001
   2d18c:	vmov.32	d23[1], r1
   2d190:	bic	r1, r8, #3
   2d194:	bic	r9, r4, #3
   2d198:	vmov.32	d18[0], r3
   2d19c:	vmov.32	d20[0], sl
   2d1a0:	sub	r5, r4, r1
   2d1a4:	mov	r3, lr
   2d1a8:	vorr	d16, d18, d18
   2d1ac:	vmov.i32	q9, #1	; 0x00000001
   2d1b0:	vorr	d18, d20, d20
   2d1b4:	vld1.32	{d20-d21}, [r3], r0
   2d1b8:	subs	r9, r9, #4
   2d1bc:	vrev64.32	q12, q10
   2d1c0:	vext.8	q12, q12, q12, #8
   2d1c4:	vext.8	q11, q11, q12, #12
   2d1c8:	vmul.i32	q9, q9, q12
   2d1cc:	vmul.i32	q8, q11, q8
   2d1d0:	vorr	q11, q12, q12
   2d1d4:	bne	2d1b4 <GetDataSlab+0x57f0>
   2d1d8:	vext.8	q11, q9, q8, #8
   2d1dc:	vext.8	q12, q8, q8, #8
   2d1e0:	cmp	r8, r1
   2d1e4:	vmul.i32	q0, q9, q11
   2d1e8:	vmul.i32	q1, q8, q12
   2d1ec:	vmul.i32	q8, q0, d0[1]
   2d1f0:	vmul.i32	q9, q1, d2[1]
   2d1f4:	vmov.32	sl, d16[0]
   2d1f8:	vmov.32	r3, d18[0]
   2d1fc:	bne	2d208 <GetDataSlab+0x5844>
   2d200:	ldr	r9, [fp, #8]
   2d204:	b	2d224 <GetDataSlab+0x5860>
   2d208:	ldr	r9, [fp, #8]
   2d20c:	vmov.32	r1, d20[0]
   2d210:	mul	r3, r1, r3
   2d214:	ldr	r1, [r7, r5, lsl #2]
   2d218:	subs	r5, r5, #1
   2d21c:	mul	sl, sl, r1
   2d220:	bne	2d210 <GetDataSlab+0x584c>
   2d224:	ldr	r1, [fp, #12]
   2d228:	sub	r5, fp, #176	; 0xb0
   2d22c:	sub	ip, fp, #96	; 0x60
   2d230:	ldr	r6, [sp, #56]	; 0x38
   2d234:	str	r3, [sp, #56]	; 0x38
   2d238:	add	lr, lr, #4
   2d23c:	str	r3, [r5, r4, lsl #2]
   2d240:	str	sl, [ip, r4, lsl #2]
   2d244:	ldr	sl, [fp, #20]
   2d248:	ldr	r3, [sp, #40]	; 0x28
   2d24c:	ldr	r1, [r1, r4, lsl #2]
   2d250:	mla	r2, r1, r6, r2
   2d254:	ldr	r1, [sl, r4, lsl #2]
   2d258:	ldr	r6, [sp, #52]	; 0x34
   2d25c:	add	r4, r4, #1
   2d260:	mul	r6, r1, r6
   2d264:	ldr	r1, [fp, #24]
   2d268:	str	r6, [sp, #52]	; 0x34
   2d26c:	cmp	r4, r1
   2d270:	bne	2d150 <GetDataSlab+0x578c>
   2d274:	ldr	r0, [sp, #48]	; 0x30
   2d278:	ldr	r6, [sp, #24]
   2d27c:	add	r9, r0, r2, lsl #1
   2d280:	cmp	r6, #1
   2d284:	bne	3ded4 <GetDataSlab+0x16510>
   2d288:	ldr	r0, [sp, #52]	; 0x34
   2d28c:	ldr	lr, [fp, #12]
   2d290:	ldr	r1, [sp, #44]	; 0x2c
   2d294:	cmp	r0, #1
   2d298:	blt	47ff8 <GetDataSlab+0x20634>
   2d29c:	sub	r0, fp, #136	; 0x88
   2d2a0:	add	r7, sl, #4
   2d2a4:	mov	sl, #0
   2d2a8:	mov	ip, #0
   2d2ac:	orr	r6, r0, #4
   2d2b0:	sub	r0, fp, #96	; 0x60
   2d2b4:	orr	r0, r0, #4
   2d2b8:	str	r0, [sp, #32]
   2d2bc:	lsl	r0, r1, #2
   2d2c0:	str	r0, [sp, #56]	; 0x38
   2d2c4:	bic	r0, r1, #3
   2d2c8:	str	r0, [sp, #40]	; 0x28
   2d2cc:	ldr	r0, [lr], #4
   2d2d0:	str	r0, [sp, #48]	; 0x30
   2d2d4:	cmp	r1, #1
   2d2d8:	mov	r4, lr
   2d2dc:	blt	2d360 <GetDataSlab+0x599c>
   2d2e0:	ldr	r0, [sp, #44]	; 0x2c
   2d2e4:	mov	r3, #0
   2d2e8:	cmp	r0, #4
   2d2ec:	bcc	2d328 <GetDataSlab+0x5964>
   2d2f0:	ldr	r0, [sp, #48]	; 0x30
   2d2f4:	ldr	r1, [sp, #40]	; 0x28
   2d2f8:	ldr	r3, [sp, #60]	; 0x3c
   2d2fc:	add	r0, r9, r0, lsl #1
   2d300:	vld1.16	{d16}, [r0]!
   2d304:	subs	r1, r1, #4
   2d308:	vmovl.s16	q8, d16
   2d30c:	vcvt.f32.s32	q8, q8
   2d310:	vst1.32	{d16-d17}, [r3]!
   2d314:	bne	2d300 <GetDataSlab+0x593c>
   2d318:	ldr	r0, [sp, #44]	; 0x2c
   2d31c:	ldr	r3, [sp, #40]	; 0x28
   2d320:	cmp	r0, r3
   2d324:	beq	2d360 <GetDataSlab+0x599c>
   2d328:	ldr	r5, [sp, #48]	; 0x30
   2d32c:	ldr	r0, [sp, #44]	; 0x2c
   2d330:	ldr	r1, [sp, #60]	; 0x3c
   2d334:	add	r5, r9, r5, lsl #1
   2d338:	sub	r0, r0, r3
   2d33c:	add	r1, r1, r3, lsl #2
   2d340:	add	r3, r5, r3, lsl #1
   2d344:	ldrsh	r5, [r3], #2
   2d348:	subs	r0, r0, #1
   2d34c:	vmov	s0, r5
   2d350:	vcvt.f32.s32	s0, s0
   2d354:	vstr	s0, [r1]
   2d358:	add	r1, r1, #4
   2d35c:	bne	2d344 <GetDataSlab+0x5980>
   2d360:	ldr	r0, [sp, #36]	; 0x24
   2d364:	add	r9, r9, r0, lsl #1
   2d368:	add	r2, r2, r0
   2d36c:	ldr	r0, [fp, #24]
   2d370:	cmp	r0, #2
   2d374:	blt	2d424 <GetDataSlab+0x5a60>
   2d378:	mov	r1, #0
   2d37c:	mov	r0, r1
   2d380:	ldr	r1, [r6, r1, lsl #2]
   2d384:	add	r1, r1, #1
   2d388:	str	r1, [r6, r0, lsl #2]
   2d38c:	ldr	r3, [r7, r0, lsl #2]
   2d390:	sdiv	r5, r1, r3
   2d394:	mls	r1, r5, r3, r1
   2d398:	cmp	r1, #0
   2d39c:	bne	2d414 <GetDataSlab+0x5a50>
   2d3a0:	sub	r5, fp, #176	; 0xb0
   2d3a4:	str	sl, [r6, r0, lsl #2]
   2d3a8:	add	r1, r5, r0, lsl #2
   2d3ac:	ldr	r1, [r1, #4]
   2d3b0:	sdiv	r3, r2, r1
   2d3b4:	mls	r3, r3, r1, r2
   2d3b8:	cmp	r3, #0
   2d3bc:	beq	2d3dc <GetDataSlab+0x5a18>
   2d3c0:	ldr	r5, [r5, r0, lsl #2]
   2d3c4:	ldr	r8, [lr, r0, lsl #2]
   2d3c8:	sub	r1, r1, r3
   2d3cc:	mov	r4, lr
   2d3d0:	mla	r1, r8, r5, r1
   2d3d4:	add	r2, r1, r2
   2d3d8:	b	2d3f8 <GetDataSlab+0x5a34>
   2d3dc:	ldr	r1, [r4, r0, lsl #2]
   2d3e0:	cmp	r1, #0
   2d3e4:	beq	2d3fc <GetDataSlab+0x5a38>
   2d3e8:	sub	r3, fp, #176	; 0xb0
   2d3ec:	ldr	r3, [r3, r0, lsl #2]
   2d3f0:	mla	r2, r3, r1, r2
   2d3f4:	mul	r1, r3, r1
   2d3f8:	add	r9, r9, r1, lsl #1
   2d3fc:	ldr	r3, [fp, #24]
   2d400:	add	r1, r0, #1
   2d404:	add	r0, r0, #2
   2d408:	cmp	r0, r3
   2d40c:	blt	2d37c <GetDataSlab+0x59b8>
   2d410:	b	2d424 <GetDataSlab+0x5a60>
   2d414:	ldr	r1, [sp, #32]
   2d418:	ldr	r0, [r1, r0, lsl #2]
   2d41c:	add	r9, r9, r0, lsl #1
   2d420:	add	r2, r0, r2
   2d424:	ldr	r0, [sp, #60]	; 0x3c
   2d428:	ldr	r1, [sp, #56]	; 0x38
   2d42c:	ldr	r3, [sp, #52]	; 0x34
   2d430:	add	r0, r0, r1
   2d434:	ldr	r1, [sp, #44]	; 0x2c
   2d438:	str	r0, [sp, #60]	; 0x3c
   2d43c:	mov	r0, #0
   2d440:	add	ip, ip, r1
   2d444:	cmp	ip, r3
   2d448:	blt	2d2d4 <GetDataSlab+0x5910>
   2d44c:	b	47ffc <GetDataSlab+0x20638>
   2d450:	ldr	r0, [fp, #16]
   2d454:	ldr	r9, [fp, #8]
   2d458:	mov	r2, #0
   2d45c:	sub	ip, fp, #96	; 0x60
   2d460:	ldr	r0, [r0]
   2d464:	str	r0, [sp, #24]
   2d468:	sub	r0, r0, #1
   2d46c:	str	r0, [fp, #-96]	; 0xffffffa0
   2d470:	ldr	r0, [r9]
   2d474:	str	r0, [fp, #-176]	; 0xffffff50
   2d478:	str	r0, [sp, #36]	; 0x24
   2d47c:	ldr	r0, [fp, #24]
   2d480:	ldr	r1, [sl]
   2d484:	cmp	r0, #2
   2d488:	str	r1, [sp, #44]	; 0x2c
   2d48c:	str	r1, [sp, #52]	; 0x34
   2d490:	blt	2d5e8 <GetDataSlab+0x5c24>
   2d494:	ldr	r3, [sp, #36]	; 0x24
   2d498:	mov	r5, lr
   2d49c:	sub	r7, r9, #4
   2d4a0:	sub	lr, r9, #12
   2d4a4:	mov	r4, #1
   2d4a8:	mov	r8, #0
   2d4ac:	mvn	r0, #15
   2d4b0:	mov	r2, #0
   2d4b4:	mov	r1, r3
   2d4b8:	str	r3, [sp, #56]	; 0x38
   2d4bc:	ldr	r1, [sp, #44]	; 0x2c
   2d4c0:	str	r1, [sp, #52]	; 0x34
   2d4c4:	ldr	r1, [fp, #16]
   2d4c8:	add	r8, r8, #1
   2d4cc:	cmp	r8, #4
   2d4d0:	ldr	r1, [r1, r4, lsl #2]
   2d4d4:	str	r3, [r5, r4, lsl #2]
   2d4d8:	sub	sl, r1, #1
   2d4dc:	str	sl, [ip, r4, lsl #2]
   2d4e0:	ldr	r1, [r9, r4, lsl #2]
   2d4e4:	str	r1, [sp, #40]	; 0x28
   2d4e8:	bcs	2d4f4 <GetDataSlab+0x5b30>
   2d4ec:	mov	r5, r4
   2d4f0:	b	2d584 <GetDataSlab+0x5bc0>
   2d4f4:	vmov.i32	q9, #1	; 0x00000001
   2d4f8:	vmov.i32	q10, #1	; 0x00000001
   2d4fc:	vmov.i32	q8, #1	; 0x00000001
   2d500:	vmov.32	d23[1], r1
   2d504:	bic	r1, r8, #3
   2d508:	bic	r9, r4, #3
   2d50c:	vmov.32	d18[0], r3
   2d510:	vmov.32	d20[0], sl
   2d514:	sub	r5, r4, r1
   2d518:	mov	r3, lr
   2d51c:	vorr	d16, d18, d18
   2d520:	vmov.i32	q9, #1	; 0x00000001
   2d524:	vorr	d18, d20, d20
   2d528:	vld1.32	{d20-d21}, [r3], r0
   2d52c:	subs	r9, r9, #4
   2d530:	vrev64.32	q12, q10
   2d534:	vext.8	q12, q12, q12, #8
   2d538:	vext.8	q11, q11, q12, #12
   2d53c:	vmul.i32	q9, q9, q12
   2d540:	vmul.i32	q8, q11, q8
   2d544:	vorr	q11, q12, q12
   2d548:	bne	2d528 <GetDataSlab+0x5b64>
   2d54c:	vext.8	q11, q9, q8, #8
   2d550:	vext.8	q12, q8, q8, #8
   2d554:	cmp	r8, r1
   2d558:	vmul.i32	q0, q9, q11
   2d55c:	vmul.i32	q1, q8, q12
   2d560:	vmul.i32	q8, q0, d0[1]
   2d564:	vmul.i32	q9, q1, d2[1]
   2d568:	vmov.32	sl, d16[0]
   2d56c:	vmov.32	r3, d18[0]
   2d570:	bne	2d57c <GetDataSlab+0x5bb8>
   2d574:	ldr	r9, [fp, #8]
   2d578:	b	2d598 <GetDataSlab+0x5bd4>
   2d57c:	ldr	r9, [fp, #8]
   2d580:	vmov.32	r1, d20[0]
   2d584:	mul	r3, r1, r3
   2d588:	ldr	r1, [r7, r5, lsl #2]
   2d58c:	subs	r5, r5, #1
   2d590:	mul	sl, sl, r1
   2d594:	bne	2d584 <GetDataSlab+0x5bc0>
   2d598:	ldr	r1, [fp, #12]
   2d59c:	sub	r5, fp, #176	; 0xb0
   2d5a0:	sub	ip, fp, #96	; 0x60
   2d5a4:	ldr	r6, [sp, #56]	; 0x38
   2d5a8:	str	r3, [sp, #56]	; 0x38
   2d5ac:	add	lr, lr, #4
   2d5b0:	str	r3, [r5, r4, lsl #2]
   2d5b4:	str	sl, [ip, r4, lsl #2]
   2d5b8:	ldr	sl, [fp, #20]
   2d5bc:	ldr	r3, [sp, #40]	; 0x28
   2d5c0:	ldr	r1, [r1, r4, lsl #2]
   2d5c4:	mla	r2, r1, r6, r2
   2d5c8:	ldr	r1, [sl, r4, lsl #2]
   2d5cc:	ldr	r6, [sp, #52]	; 0x34
   2d5d0:	add	r4, r4, #1
   2d5d4:	mul	r6, r1, r6
   2d5d8:	ldr	r1, [fp, #24]
   2d5dc:	str	r6, [sp, #52]	; 0x34
   2d5e0:	cmp	r4, r1
   2d5e4:	bne	2d4c4 <GetDataSlab+0x5b00>
   2d5e8:	ldr	r0, [sp, #48]	; 0x30
   2d5ec:	ldr	r6, [sp, #24]
   2d5f0:	add	r9, r0, r2, lsl #1
   2d5f4:	cmp	r6, #1
   2d5f8:	bne	3e06c <GetDataSlab+0x166a8>
   2d5fc:	ldr	r0, [sp, #52]	; 0x34
   2d600:	ldr	lr, [fp, #12]
   2d604:	ldr	r1, [sp, #44]	; 0x2c
   2d608:	cmp	r0, #1
   2d60c:	blt	47ff8 <GetDataSlab+0x20634>
   2d610:	sub	r0, fp, #136	; 0x88
   2d614:	add	r7, sl, #4
   2d618:	mov	sl, #0
   2d61c:	mov	ip, #0
   2d620:	orr	r6, r0, #4
   2d624:	sub	r0, fp, #96	; 0x60
   2d628:	orr	r0, r0, #4
   2d62c:	str	r0, [sp, #32]
   2d630:	lsl	r0, r1, #2
   2d634:	str	r0, [sp, #56]	; 0x38
   2d638:	bic	r0, r1, #3
   2d63c:	str	r0, [sp, #40]	; 0x28
   2d640:	ldr	r0, [lr], #4
   2d644:	str	r0, [sp, #48]	; 0x30
   2d648:	cmp	r1, #1
   2d64c:	mov	r4, lr
   2d650:	blt	2d6d4 <GetDataSlab+0x5d10>
   2d654:	ldr	r0, [sp, #44]	; 0x2c
   2d658:	mov	r3, #0
   2d65c:	cmp	r0, #4
   2d660:	bcc	2d69c <GetDataSlab+0x5cd8>
   2d664:	ldr	r0, [sp, #48]	; 0x30
   2d668:	ldr	r1, [sp, #40]	; 0x28
   2d66c:	ldr	r3, [sp, #60]	; 0x3c
   2d670:	add	r0, r9, r0, lsl #1
   2d674:	vld1.16	{d16}, [r0]!
   2d678:	subs	r1, r1, #4
   2d67c:	vmovl.u16	q8, d16
   2d680:	vcvt.f32.u32	q8, q8
   2d684:	vst1.32	{d16-d17}, [r3]!
   2d688:	bne	2d674 <GetDataSlab+0x5cb0>
   2d68c:	ldr	r0, [sp, #44]	; 0x2c
   2d690:	ldr	r3, [sp, #40]	; 0x28
   2d694:	cmp	r0, r3
   2d698:	beq	2d6d4 <GetDataSlab+0x5d10>
   2d69c:	ldr	r5, [sp, #48]	; 0x30
   2d6a0:	ldr	r0, [sp, #44]	; 0x2c
   2d6a4:	ldr	r1, [sp, #60]	; 0x3c
   2d6a8:	add	r5, r9, r5, lsl #1
   2d6ac:	sub	r0, r0, r3
   2d6b0:	add	r1, r1, r3, lsl #2
   2d6b4:	add	r3, r5, r3, lsl #1
   2d6b8:	ldrh	r5, [r3], #2
   2d6bc:	subs	r0, r0, #1
   2d6c0:	vmov	s0, r5
   2d6c4:	vcvt.f32.u32	s0, s0
   2d6c8:	vstr	s0, [r1]
   2d6cc:	add	r1, r1, #4
   2d6d0:	bne	2d6b8 <GetDataSlab+0x5cf4>
   2d6d4:	ldr	r0, [sp, #36]	; 0x24
   2d6d8:	add	r9, r9, r0, lsl #1
   2d6dc:	add	r2, r2, r0
   2d6e0:	ldr	r0, [fp, #24]
   2d6e4:	cmp	r0, #2
   2d6e8:	blt	2d798 <GetDataSlab+0x5dd4>
   2d6ec:	mov	r1, #0
   2d6f0:	mov	r0, r1
   2d6f4:	ldr	r1, [r6, r1, lsl #2]
   2d6f8:	add	r1, r1, #1
   2d6fc:	str	r1, [r6, r0, lsl #2]
   2d700:	ldr	r3, [r7, r0, lsl #2]
   2d704:	sdiv	r5, r1, r3
   2d708:	mls	r1, r5, r3, r1
   2d70c:	cmp	r1, #0
   2d710:	bne	2d788 <GetDataSlab+0x5dc4>
   2d714:	sub	r5, fp, #176	; 0xb0
   2d718:	str	sl, [r6, r0, lsl #2]
   2d71c:	add	r1, r5, r0, lsl #2
   2d720:	ldr	r1, [r1, #4]
   2d724:	sdiv	r3, r2, r1
   2d728:	mls	r3, r3, r1, r2
   2d72c:	cmp	r3, #0
   2d730:	beq	2d750 <GetDataSlab+0x5d8c>
   2d734:	ldr	r5, [r5, r0, lsl #2]
   2d738:	ldr	r8, [lr, r0, lsl #2]
   2d73c:	sub	r1, r1, r3
   2d740:	mov	r4, lr
   2d744:	mla	r1, r8, r5, r1
   2d748:	add	r2, r1, r2
   2d74c:	b	2d76c <GetDataSlab+0x5da8>
   2d750:	ldr	r1, [r4, r0, lsl #2]
   2d754:	cmp	r1, #0
   2d758:	beq	2d770 <GetDataSlab+0x5dac>
   2d75c:	sub	r3, fp, #176	; 0xb0
   2d760:	ldr	r3, [r3, r0, lsl #2]
   2d764:	mla	r2, r3, r1, r2
   2d768:	mul	r1, r3, r1
   2d76c:	add	r9, r9, r1, lsl #1
   2d770:	ldr	r3, [fp, #24]
   2d774:	add	r1, r0, #1
   2d778:	add	r0, r0, #2
   2d77c:	cmp	r0, r3
   2d780:	blt	2d6f0 <GetDataSlab+0x5d2c>
   2d784:	b	2d798 <GetDataSlab+0x5dd4>
   2d788:	ldr	r1, [sp, #32]
   2d78c:	ldr	r0, [r1, r0, lsl #2]
   2d790:	add	r9, r9, r0, lsl #1
   2d794:	add	r2, r0, r2
   2d798:	ldr	r0, [sp, #60]	; 0x3c
   2d79c:	ldr	r1, [sp, #56]	; 0x38
   2d7a0:	ldr	r3, [sp, #52]	; 0x34
   2d7a4:	add	r0, r0, r1
   2d7a8:	ldr	r1, [sp, #44]	; 0x2c
   2d7ac:	str	r0, [sp, #60]	; 0x3c
   2d7b0:	mov	r0, #0
   2d7b4:	add	ip, ip, r1
   2d7b8:	cmp	ip, r3
   2d7bc:	blt	2d648 <GetDataSlab+0x5c84>
   2d7c0:	b	47ffc <GetDataSlab+0x20638>
   2d7c4:	ldr	r0, [fp, #16]
   2d7c8:	mov	r3, #0
   2d7cc:	sub	r9, fp, #96	; 0x60
   2d7d0:	ldr	r0, [r0]
   2d7d4:	str	r0, [sp, #28]
   2d7d8:	sub	r0, r0, #1
   2d7dc:	str	r0, [fp, #-96]	; 0xffffffa0
   2d7e0:	ldr	r0, [fp, #8]
   2d7e4:	ldr	r0, [r0]
   2d7e8:	str	r0, [fp, #-176]	; 0xffffff50
   2d7ec:	str	r0, [sp, #36]	; 0x24
   2d7f0:	ldr	r0, [fp, #24]
   2d7f4:	ldr	r1, [sl]
   2d7f8:	cmp	r0, #2
   2d7fc:	str	r1, [sp, #52]	; 0x34
   2d800:	str	r1, [sp, #56]	; 0x38
   2d804:	blt	2d964 <GetDataSlab+0x5fa0>
   2d808:	ldr	r0, [fp, #8]
   2d80c:	ldr	r2, [sp, #36]	; 0x24
   2d810:	ldr	r6, [sp, #52]	; 0x34
   2d814:	mov	r8, #1
   2d818:	mvn	r4, #15
   2d81c:	mov	r3, #0
   2d820:	sub	r1, r0, #4
   2d824:	sub	r7, r0, #12
   2d828:	mov	r0, #0
   2d82c:	str	r6, [sp, #56]	; 0x38
   2d830:	str	r0, [sp, #44]	; 0x2c
   2d834:	mov	r0, r2
   2d838:	ldr	r6, [fp, #16]
   2d83c:	str	r0, [sp, #40]	; 0x28
   2d840:	ldr	r0, [sp, #44]	; 0x2c
   2d844:	ldr	r6, [r6, r8, lsl #2]
   2d848:	str	r2, [lr, r8, lsl #2]
   2d84c:	add	r0, r0, #1
   2d850:	cmp	r0, #4
   2d854:	str	r0, [sp, #44]	; 0x2c
   2d858:	sub	ip, r6, #1
   2d85c:	ldr	r6, [fp, #8]
   2d860:	str	ip, [r9, r8, lsl #2]
   2d864:	ldr	lr, [r6, r8, lsl #2]
   2d868:	bcs	2d878 <GetDataSlab+0x5eb4>
   2d86c:	mov	r5, lr
   2d870:	mov	r6, r8
   2d874:	b	2d900 <GetDataSlab+0x5f3c>
   2d878:	vmov.i32	q9, #1	; 0x00000001
   2d87c:	vmov.i32	q10, #1	; 0x00000001
   2d880:	vmov.i32	q8, #1	; 0x00000001
   2d884:	bic	r5, r0, #3
   2d888:	bic	sl, r8, #3
   2d88c:	vmov.32	d23[1], lr
   2d890:	vmov.32	d18[0], r2
   2d894:	vmov.32	d20[0], ip
   2d898:	sub	r6, r8, r5
   2d89c:	mov	r2, r7
   2d8a0:	vorr	d16, d18, d18
   2d8a4:	vmov.i32	q9, #1	; 0x00000001
   2d8a8:	vorr	d18, d20, d20
   2d8ac:	vld1.32	{d20-d21}, [r2], r4
   2d8b0:	subs	sl, sl, #4
   2d8b4:	vrev64.32	q12, q10
   2d8b8:	vext.8	q12, q12, q12, #8
   2d8bc:	vext.8	q11, q11, q12, #12
   2d8c0:	vmul.i32	q9, q9, q12
   2d8c4:	vmul.i32	q8, q11, q8
   2d8c8:	vorr	q11, q12, q12
   2d8cc:	bne	2d8ac <GetDataSlab+0x5ee8>
   2d8d0:	vext.8	q11, q9, q8, #8
   2d8d4:	vext.8	q12, q8, q8, #8
   2d8d8:	ldr	sl, [fp, #20]
   2d8dc:	cmp	r0, r5
   2d8e0:	vmul.i32	q0, q9, q11
   2d8e4:	vmul.i32	q1, q8, q12
   2d8e8:	vmul.i32	q8, q0, d0[1]
   2d8ec:	vmul.i32	q9, q1, d2[1]
   2d8f0:	vmov.32	ip, d16[0]
   2d8f4:	vmov.32	r2, d18[0]
   2d8f8:	beq	2d914 <GetDataSlab+0x5f50>
   2d8fc:	vmov.32	r5, d20[0]
   2d900:	mul	r2, r5, r2
   2d904:	ldr	r5, [r1, r6, lsl #2]
   2d908:	subs	r6, r6, #1
   2d90c:	mul	ip, ip, r5
   2d910:	bne	2d900 <GetDataSlab+0x5f3c>
   2d914:	ldr	r6, [fp, #12]
   2d918:	sub	r5, fp, #176	; 0xb0
   2d91c:	sub	r9, fp, #96	; 0x60
   2d920:	ldr	r0, [sp, #40]	; 0x28
   2d924:	add	r7, r7, #4
   2d928:	str	r2, [r5, r8, lsl #2]
   2d92c:	str	ip, [r9, r8, lsl #2]
   2d930:	ldr	r6, [r6, r8, lsl #2]
   2d934:	mla	r3, r6, r0, r3
   2d938:	ldr	r0, [sl, r8, lsl #2]
   2d93c:	ldr	r6, [sp, #56]	; 0x38
   2d940:	add	r8, r8, #1
   2d944:	mul	r6, r0, r6
   2d948:	ldr	r0, [fp, #24]
   2d94c:	str	r6, [sp, #56]	; 0x38
   2d950:	cmp	r8, r0
   2d954:	mov	r0, r2
   2d958:	mov	r2, lr
   2d95c:	mov	lr, r5
   2d960:	bne	2d838 <GetDataSlab+0x5e74>
   2d964:	ldr	r0, [sp, #48]	; 0x30
   2d968:	ldr	r6, [sp, #28]
   2d96c:	add	sl, r0, r3, lsl #2
   2d970:	cmp	r6, #1
   2d974:	bne	3e204 <GetDataSlab+0x16840>
   2d978:	ldr	r0, [sp, #56]	; 0x38
   2d97c:	ldr	r2, [sp, #52]	; 0x34
   2d980:	sub	r1, fp, #96	; 0x60
   2d984:	cmp	r0, #1
   2d988:	ldr	r0, [fp, #12]
   2d98c:	blt	47ff8 <GetDataSlab+0x20634>
   2d990:	add	r8, r0, #4
   2d994:	ldr	r0, [fp, #20]
   2d998:	mov	r9, #0
   2d99c:	mov	lr, #0
   2d9a0:	add	r6, r0, #4
   2d9a4:	sub	r0, fp, #136	; 0x88
   2d9a8:	orr	r5, r0, #4
   2d9ac:	orr	r0, r1, #4
   2d9b0:	str	r0, [sp, #40]	; 0x28
   2d9b4:	lsl	r0, r2, #2
   2d9b8:	str	r0, [sp, #48]	; 0x30
   2d9bc:	bic	r0, r2, #3
   2d9c0:	str	r0, [sp, #44]	; 0x2c
   2d9c4:	ldr	r4, [sp, #60]	; 0x3c
   2d9c8:	cmp	r2, #1
   2d9cc:	blt	2da4c <GetDataSlab+0x6088>
   2d9d0:	ldr	r0, [fp, #12]
   2d9d4:	ldr	r1, [sp, #52]	; 0x34
   2d9d8:	ldr	r0, [r0]
   2d9dc:	cmp	r1, #4
   2d9e0:	add	r7, sl, r0, lsl #2
   2d9e4:	mov	r0, #0
   2d9e8:	bcc	2da20 <GetDataSlab+0x605c>
   2d9ec:	ldr	r2, [sp, #44]	; 0x2c
   2d9f0:	mov	r1, r4
   2d9f4:	mov	r0, r7
   2d9f8:	vld1.32	{d16-d17}, [r0]!
   2d9fc:	subs	r2, r2, #4
   2da00:	vcvt.f32.s32	q8, q8
   2da04:	vst1.32	{d16-d17}, [r1]!
   2da08:	bne	2d9f8 <GetDataSlab+0x6034>
   2da0c:	ldr	r0, [sp, #52]	; 0x34
   2da10:	ldr	r1, [sp, #44]	; 0x2c
   2da14:	cmp	r0, r1
   2da18:	mov	r0, r1
   2da1c:	beq	2da4c <GetDataSlab+0x6088>
   2da20:	ldr	r1, [sp, #52]	; 0x34
   2da24:	sub	r2, r1, r0
   2da28:	lsl	r1, r0, #2
   2da2c:	add	r0, r7, r1
   2da30:	subs	r2, r2, #1
   2da34:	vldr	s0, [r0]
   2da38:	add	r0, r4, r1
   2da3c:	add	r1, r1, #4
   2da40:	vcvt.f32.s32	s0, s0
   2da44:	vstr	s0, [r0]
   2da48:	bne	2da2c <GetDataSlab+0x6068>
   2da4c:	ldr	r0, [sp, #36]	; 0x24
   2da50:	add	sl, sl, r0, lsl #2
   2da54:	add	r3, r3, r0
   2da58:	ldr	r0, [fp, #24]
   2da5c:	cmp	r0, #2
   2da60:	blt	2db10 <GetDataSlab+0x614c>
   2da64:	mov	r1, #0
   2da68:	mov	r0, r1
   2da6c:	ldr	r1, [r5, r1, lsl #2]
   2da70:	add	r1, r1, #1
   2da74:	str	r1, [r5, r0, lsl #2]
   2da78:	ldr	r2, [r6, r0, lsl #2]
   2da7c:	sdiv	r7, r1, r2
   2da80:	mls	r1, r7, r2, r1
   2da84:	cmp	r1, #0
   2da88:	bne	2db00 <GetDataSlab+0x613c>
   2da8c:	sub	r7, fp, #176	; 0xb0
   2da90:	str	r9, [r5, r0, lsl #2]
   2da94:	add	r1, r7, r0, lsl #2
   2da98:	ldr	r1, [r1, #4]
   2da9c:	sdiv	r2, r3, r1
   2daa0:	mls	r2, r2, r1, r3
   2daa4:	cmp	r2, #0
   2daa8:	beq	2dac8 <GetDataSlab+0x6104>
   2daac:	ldr	r7, [r7, r0, lsl #2]
   2dab0:	ldr	ip, [r8, r0, lsl #2]
   2dab4:	ldr	r4, [sp, #60]	; 0x3c
   2dab8:	sub	r1, r1, r2
   2dabc:	mla	r1, ip, r7, r1
   2dac0:	add	r3, r1, r3
   2dac4:	b	2dae4 <GetDataSlab+0x6120>
   2dac8:	ldr	r1, [r8, r0, lsl #2]
   2dacc:	cmp	r1, #0
   2dad0:	beq	2dae8 <GetDataSlab+0x6124>
   2dad4:	sub	r2, fp, #176	; 0xb0
   2dad8:	ldr	r2, [r2, r0, lsl #2]
   2dadc:	mla	r3, r2, r1, r3
   2dae0:	mul	r1, r2, r1
   2dae4:	add	sl, sl, r1, lsl #2
   2dae8:	ldr	r2, [fp, #24]
   2daec:	add	r1, r0, #1
   2daf0:	add	r0, r0, #2
   2daf4:	cmp	r0, r2
   2daf8:	blt	2da68 <GetDataSlab+0x60a4>
   2dafc:	b	2db10 <GetDataSlab+0x614c>
   2db00:	ldr	r1, [sp, #40]	; 0x28
   2db04:	ldr	r0, [r1, r0, lsl #2]
   2db08:	add	sl, sl, r0, lsl #2
   2db0c:	add	r3, r0, r3
   2db10:	ldr	r2, [sp, #52]	; 0x34
   2db14:	ldr	r0, [sp, #48]	; 0x30
   2db18:	ldr	r1, [sp, #56]	; 0x38
   2db1c:	add	lr, lr, r2
   2db20:	add	r4, r4, r0
   2db24:	mov	r0, #0
   2db28:	cmp	lr, r1
   2db2c:	str	r4, [sp, #60]	; 0x3c
   2db30:	blt	2d9c4 <GetDataSlab+0x6000>
   2db34:	b	47ffc <GetDataSlab+0x20638>
   2db38:	ldr	r0, [fp, #16]
   2db3c:	mov	r3, #0
   2db40:	sub	r9, fp, #96	; 0x60
   2db44:	ldr	r0, [r0]
   2db48:	str	r0, [sp, #28]
   2db4c:	sub	r0, r0, #1
   2db50:	str	r0, [fp, #-96]	; 0xffffffa0
   2db54:	ldr	r0, [fp, #8]
   2db58:	ldr	r0, [r0]
   2db5c:	str	r0, [fp, #-176]	; 0xffffff50
   2db60:	str	r0, [sp, #36]	; 0x24
   2db64:	ldr	r0, [fp, #24]
   2db68:	ldr	r1, [sl]
   2db6c:	cmp	r0, #2
   2db70:	str	r1, [sp, #52]	; 0x34
   2db74:	str	r1, [sp, #56]	; 0x38
   2db78:	blt	2dcd8 <GetDataSlab+0x6314>
   2db7c:	ldr	r0, [fp, #8]
   2db80:	ldr	r2, [sp, #36]	; 0x24
   2db84:	ldr	r6, [sp, #52]	; 0x34
   2db88:	mov	r8, #1
   2db8c:	mvn	r4, #15
   2db90:	mov	r3, #0
   2db94:	sub	r1, r0, #4
   2db98:	sub	r7, r0, #12
   2db9c:	mov	r0, #0
   2dba0:	str	r6, [sp, #56]	; 0x38
   2dba4:	str	r0, [sp, #44]	; 0x2c
   2dba8:	mov	r0, r2
   2dbac:	ldr	r6, [fp, #16]
   2dbb0:	str	r0, [sp, #40]	; 0x28
   2dbb4:	ldr	r0, [sp, #44]	; 0x2c
   2dbb8:	ldr	r6, [r6, r8, lsl #2]
   2dbbc:	str	r2, [lr, r8, lsl #2]
   2dbc0:	add	r0, r0, #1
   2dbc4:	cmp	r0, #4
   2dbc8:	str	r0, [sp, #44]	; 0x2c
   2dbcc:	sub	ip, r6, #1
   2dbd0:	ldr	r6, [fp, #8]
   2dbd4:	str	ip, [r9, r8, lsl #2]
   2dbd8:	ldr	lr, [r6, r8, lsl #2]
   2dbdc:	bcs	2dbec <GetDataSlab+0x6228>
   2dbe0:	mov	r5, lr
   2dbe4:	mov	r6, r8
   2dbe8:	b	2dc74 <GetDataSlab+0x62b0>
   2dbec:	vmov.i32	q9, #1	; 0x00000001
   2dbf0:	vmov.i32	q10, #1	; 0x00000001
   2dbf4:	vmov.i32	q8, #1	; 0x00000001
   2dbf8:	bic	r5, r0, #3
   2dbfc:	bic	sl, r8, #3
   2dc00:	vmov.32	d23[1], lr
   2dc04:	vmov.32	d18[0], r2
   2dc08:	vmov.32	d20[0], ip
   2dc0c:	sub	r6, r8, r5
   2dc10:	mov	r2, r7
   2dc14:	vorr	d16, d18, d18
   2dc18:	vmov.i32	q9, #1	; 0x00000001
   2dc1c:	vorr	d18, d20, d20
   2dc20:	vld1.32	{d20-d21}, [r2], r4
   2dc24:	subs	sl, sl, #4
   2dc28:	vrev64.32	q12, q10
   2dc2c:	vext.8	q12, q12, q12, #8
   2dc30:	vext.8	q11, q11, q12, #12
   2dc34:	vmul.i32	q9, q9, q12
   2dc38:	vmul.i32	q8, q11, q8
   2dc3c:	vorr	q11, q12, q12
   2dc40:	bne	2dc20 <GetDataSlab+0x625c>
   2dc44:	vext.8	q11, q9, q8, #8
   2dc48:	vext.8	q12, q8, q8, #8
   2dc4c:	ldr	sl, [fp, #20]
   2dc50:	cmp	r0, r5
   2dc54:	vmul.i32	q0, q9, q11
   2dc58:	vmul.i32	q1, q8, q12
   2dc5c:	vmul.i32	q8, q0, d0[1]
   2dc60:	vmul.i32	q9, q1, d2[1]
   2dc64:	vmov.32	ip, d16[0]
   2dc68:	vmov.32	r2, d18[0]
   2dc6c:	beq	2dc88 <GetDataSlab+0x62c4>
   2dc70:	vmov.32	r5, d20[0]
   2dc74:	mul	r2, r5, r2
   2dc78:	ldr	r5, [r1, r6, lsl #2]
   2dc7c:	subs	r6, r6, #1
   2dc80:	mul	ip, ip, r5
   2dc84:	bne	2dc74 <GetDataSlab+0x62b0>
   2dc88:	ldr	r6, [fp, #12]
   2dc8c:	sub	r5, fp, #176	; 0xb0
   2dc90:	sub	r9, fp, #96	; 0x60
   2dc94:	ldr	r0, [sp, #40]	; 0x28
   2dc98:	add	r7, r7, #4
   2dc9c:	str	r2, [r5, r8, lsl #2]
   2dca0:	str	ip, [r9, r8, lsl #2]
   2dca4:	ldr	r6, [r6, r8, lsl #2]
   2dca8:	mla	r3, r6, r0, r3
   2dcac:	ldr	r0, [sl, r8, lsl #2]
   2dcb0:	ldr	r6, [sp, #56]	; 0x38
   2dcb4:	add	r8, r8, #1
   2dcb8:	mul	r6, r0, r6
   2dcbc:	ldr	r0, [fp, #24]
   2dcc0:	str	r6, [sp, #56]	; 0x38
   2dcc4:	cmp	r8, r0
   2dcc8:	mov	r0, r2
   2dccc:	mov	r2, lr
   2dcd0:	mov	lr, r5
   2dcd4:	bne	2dbac <GetDataSlab+0x61e8>
   2dcd8:	ldr	r0, [sp, #48]	; 0x30
   2dcdc:	ldr	r6, [sp, #28]
   2dce0:	add	sl, r0, r3, lsl #2
   2dce4:	cmp	r6, #1
   2dce8:	bne	3e3a4 <GetDataSlab+0x169e0>
   2dcec:	ldr	r0, [sp, #56]	; 0x38
   2dcf0:	ldr	r2, [sp, #52]	; 0x34
   2dcf4:	sub	r1, fp, #96	; 0x60
   2dcf8:	cmp	r0, #1
   2dcfc:	ldr	r0, [fp, #12]
   2dd00:	blt	47ff8 <GetDataSlab+0x20634>
   2dd04:	add	r8, r0, #4
   2dd08:	ldr	r0, [fp, #20]
   2dd0c:	mov	r9, #0
   2dd10:	mov	lr, #0
   2dd14:	add	r6, r0, #4
   2dd18:	sub	r0, fp, #136	; 0x88
   2dd1c:	orr	r5, r0, #4
   2dd20:	orr	r0, r1, #4
   2dd24:	str	r0, [sp, #40]	; 0x28
   2dd28:	lsl	r0, r2, #2
   2dd2c:	str	r0, [sp, #48]	; 0x30
   2dd30:	bic	r0, r2, #3
   2dd34:	str	r0, [sp, #44]	; 0x2c
   2dd38:	ldr	r4, [sp, #60]	; 0x3c
   2dd3c:	cmp	r2, #1
   2dd40:	blt	2ddc0 <GetDataSlab+0x63fc>
   2dd44:	ldr	r0, [fp, #12]
   2dd48:	ldr	r1, [sp, #52]	; 0x34
   2dd4c:	ldr	r0, [r0]
   2dd50:	cmp	r1, #4
   2dd54:	add	r7, sl, r0, lsl #2
   2dd58:	mov	r0, #0
   2dd5c:	bcc	2dd94 <GetDataSlab+0x63d0>
   2dd60:	ldr	r2, [sp, #44]	; 0x2c
   2dd64:	mov	r1, r4
   2dd68:	mov	r0, r7
   2dd6c:	vld1.32	{d16-d17}, [r0]!
   2dd70:	subs	r2, r2, #4
   2dd74:	vcvt.f32.u32	q8, q8
   2dd78:	vst1.32	{d16-d17}, [r1]!
   2dd7c:	bne	2dd6c <GetDataSlab+0x63a8>
   2dd80:	ldr	r0, [sp, #52]	; 0x34
   2dd84:	ldr	r1, [sp, #44]	; 0x2c
   2dd88:	cmp	r0, r1
   2dd8c:	mov	r0, r1
   2dd90:	beq	2ddc0 <GetDataSlab+0x63fc>
   2dd94:	ldr	r1, [sp, #52]	; 0x34
   2dd98:	sub	r2, r1, r0
   2dd9c:	lsl	r1, r0, #2
   2dda0:	add	r0, r7, r1
   2dda4:	subs	r2, r2, #1
   2dda8:	vldr	s0, [r0]
   2ddac:	add	r0, r4, r1
   2ddb0:	add	r1, r1, #4
   2ddb4:	vcvt.f32.u32	s0, s0
   2ddb8:	vstr	s0, [r0]
   2ddbc:	bne	2dda0 <GetDataSlab+0x63dc>
   2ddc0:	ldr	r0, [sp, #36]	; 0x24
   2ddc4:	add	sl, sl, r0, lsl #2
   2ddc8:	add	r3, r3, r0
   2ddcc:	ldr	r0, [fp, #24]
   2ddd0:	cmp	r0, #2
   2ddd4:	blt	2de84 <GetDataSlab+0x64c0>
   2ddd8:	mov	r1, #0
   2dddc:	mov	r0, r1
   2dde0:	ldr	r1, [r5, r1, lsl #2]
   2dde4:	add	r1, r1, #1
   2dde8:	str	r1, [r5, r0, lsl #2]
   2ddec:	ldr	r2, [r6, r0, lsl #2]
   2ddf0:	sdiv	r7, r1, r2
   2ddf4:	mls	r1, r7, r2, r1
   2ddf8:	cmp	r1, #0
   2ddfc:	bne	2de74 <GetDataSlab+0x64b0>
   2de00:	sub	r7, fp, #176	; 0xb0
   2de04:	str	r9, [r5, r0, lsl #2]
   2de08:	add	r1, r7, r0, lsl #2
   2de0c:	ldr	r1, [r1, #4]
   2de10:	sdiv	r2, r3, r1
   2de14:	mls	r2, r2, r1, r3
   2de18:	cmp	r2, #0
   2de1c:	beq	2de3c <GetDataSlab+0x6478>
   2de20:	ldr	r7, [r7, r0, lsl #2]
   2de24:	ldr	ip, [r8, r0, lsl #2]
   2de28:	ldr	r4, [sp, #60]	; 0x3c
   2de2c:	sub	r1, r1, r2
   2de30:	mla	r1, ip, r7, r1
   2de34:	add	r3, r1, r3
   2de38:	b	2de58 <GetDataSlab+0x6494>
   2de3c:	ldr	r1, [r8, r0, lsl #2]
   2de40:	cmp	r1, #0
   2de44:	beq	2de5c <GetDataSlab+0x6498>
   2de48:	sub	r2, fp, #176	; 0xb0
   2de4c:	ldr	r2, [r2, r0, lsl #2]
   2de50:	mla	r3, r2, r1, r3
   2de54:	mul	r1, r2, r1
   2de58:	add	sl, sl, r1, lsl #2
   2de5c:	ldr	r2, [fp, #24]
   2de60:	add	r1, r0, #1
   2de64:	add	r0, r0, #2
   2de68:	cmp	r0, r2
   2de6c:	blt	2dddc <GetDataSlab+0x6418>
   2de70:	b	2de84 <GetDataSlab+0x64c0>
   2de74:	ldr	r1, [sp, #40]	; 0x28
   2de78:	ldr	r0, [r1, r0, lsl #2]
   2de7c:	add	sl, sl, r0, lsl #2
   2de80:	add	r3, r0, r3
   2de84:	ldr	r2, [sp, #52]	; 0x34
   2de88:	ldr	r0, [sp, #48]	; 0x30
   2de8c:	ldr	r1, [sp, #56]	; 0x38
   2de90:	add	lr, lr, r2
   2de94:	add	r4, r4, r0
   2de98:	mov	r0, #0
   2de9c:	cmp	lr, r1
   2dea0:	str	r4, [sp, #60]	; 0x3c
   2dea4:	blt	2dd38 <GetDataSlab+0x6374>
   2dea8:	b	47ffc <GetDataSlab+0x20638>
   2deac:	ldr	r0, [fp, #16]
   2deb0:	ldr	r9, [fp, #8]
   2deb4:	mov	r2, #0
   2deb8:	sub	r6, fp, #96	; 0x60
   2debc:	ldr	r0, [r0]
   2dec0:	str	r0, [sp, #28]
   2dec4:	sub	r0, r0, #1
   2dec8:	str	r0, [fp, #-96]	; 0xffffffa0
   2decc:	ldr	r0, [r9]
   2ded0:	str	r0, [fp, #-176]	; 0xffffff50
   2ded4:	str	r0, [sp, #40]	; 0x28
   2ded8:	ldr	r0, [fp, #24]
   2dedc:	ldr	sl, [sl]
   2dee0:	cmp	r0, #2
   2dee4:	str	sl, [sp, #52]	; 0x34
   2dee8:	blt	2e048 <GetDataSlab+0x6684>
   2deec:	ldr	r3, [sp, #40]	; 0x28
   2def0:	mov	r5, lr
   2def4:	sub	r7, r9, #4
   2def8:	sub	ip, r9, #12
   2defc:	mov	r4, #1
   2df00:	mov	r0, #0
   2df04:	mvn	lr, #15
   2df08:	mov	r2, #0
   2df0c:	str	sl, [sp, #52]	; 0x34
   2df10:	mov	r1, r3
   2df14:	str	r1, [sp, #56]	; 0x38
   2df18:	ldr	r1, [fp, #16]
   2df1c:	add	r0, r0, #1
   2df20:	cmp	r0, #4
   2df24:	ldr	r1, [r1, r4, lsl #2]
   2df28:	str	r3, [r5, r4, lsl #2]
   2df2c:	sub	r1, r1, #1
   2df30:	str	r1, [r6, r4, lsl #2]
   2df34:	ldr	r6, [r9, r4, lsl #2]
   2df38:	str	r6, [sp, #44]	; 0x2c
   2df3c:	bcs	2df48 <GetDataSlab+0x6584>
   2df40:	mov	r5, r4
   2df44:	b	2dfdc <GetDataSlab+0x6618>
   2df48:	vmov.i32	q9, #1	; 0x00000001
   2df4c:	vmov.i32	q10, #1	; 0x00000001
   2df50:	vmov.i32	q8, #1	; 0x00000001
   2df54:	bic	r8, r0, #3
   2df58:	bic	r9, r4, #3
   2df5c:	vmov.32	d23[1], r6
   2df60:	vmov.32	d18[0], r3
   2df64:	vmov.32	d20[0], r1
   2df68:	sub	r5, r4, r8
   2df6c:	mov	r1, ip
   2df70:	vorr	d16, d18, d18
   2df74:	vmov.i32	q9, #1	; 0x00000001
   2df78:	vorr	d18, d20, d20
   2df7c:	vld1.32	{d20-d21}, [r1], lr
   2df80:	subs	r9, r9, #4
   2df84:	vrev64.32	q12, q10
   2df88:	vext.8	q12, q12, q12, #8
   2df8c:	vext.8	q11, q11, q12, #12
   2df90:	vmul.i32	q9, q9, q12
   2df94:	vmul.i32	q8, q11, q8
   2df98:	vorr	q11, q12, q12
   2df9c:	bne	2df7c <GetDataSlab+0x65b8>
   2dfa0:	vext.8	q11, q9, q8, #8
   2dfa4:	vext.8	q12, q8, q8, #8
   2dfa8:	cmp	r0, r8
   2dfac:	vmul.i32	q0, q9, q11
   2dfb0:	vmul.i32	q1, q8, q12
   2dfb4:	vmul.i32	q8, q0, d0[1]
   2dfb8:	vmul.i32	q9, q1, d2[1]
   2dfbc:	vmov.32	r1, d16[0]
   2dfc0:	vmov.32	r3, d18[0]
   2dfc4:	bne	2dfd4 <GetDataSlab+0x6610>
   2dfc8:	ldr	r9, [fp, #8]
   2dfcc:	mov	r8, r0
   2dfd0:	b	2dff4 <GetDataSlab+0x6630>
   2dfd4:	ldr	r9, [fp, #8]
   2dfd8:	vmov.32	r6, d20[0]
   2dfdc:	mov	r8, r0
   2dfe0:	mul	r3, r6, r3
   2dfe4:	ldr	r6, [r7, r5, lsl #2]
   2dfe8:	subs	r5, r5, #1
   2dfec:	mul	r1, r1, r6
   2dff0:	bne	2dfe0 <GetDataSlab+0x661c>
   2dff4:	sub	r6, fp, #96	; 0x60
   2dff8:	sub	r5, fp, #176	; 0xb0
   2dffc:	ldr	r0, [sp, #56]	; 0x38
   2e000:	add	ip, ip, #4
   2e004:	str	r1, [r6, r4, lsl #2]
   2e008:	ldr	r1, [fp, #12]
   2e00c:	str	r3, [r5, r4, lsl #2]
   2e010:	ldr	r1, [r1, r4, lsl #2]
   2e014:	mla	r2, r1, r0, r2
   2e018:	ldr	r1, [fp, #20]
   2e01c:	ldr	r0, [sp, #52]	; 0x34
   2e020:	ldr	r1, [r1, r4, lsl #2]
   2e024:	add	r4, r4, #1
   2e028:	mul	r0, r1, r0
   2e02c:	ldr	r1, [fp, #24]
   2e030:	str	r0, [sp, #52]	; 0x34
   2e034:	mov	r0, r8
   2e038:	cmp	r4, r1
   2e03c:	mov	r1, r3
   2e040:	ldr	r3, [sp, #44]	; 0x2c
   2e044:	bne	2df14 <GetDataSlab+0x6550>
   2e048:	ldr	r0, [sp, #48]	; 0x30
   2e04c:	ldr	r3, [sp, #28]
   2e050:	add	lr, r0, r2, lsl #2
   2e054:	cmp	r3, #1
   2e058:	bne	3e544 <GetDataSlab+0x16b80>
   2e05c:	ldr	r0, [sp, #52]	; 0x34
   2e060:	ldr	ip, [sp, #60]	; 0x3c
   2e064:	ldr	r9, [fp, #12]
   2e068:	cmp	r0, #1
   2e06c:	blt	47ff8 <GetDataSlab+0x20634>
   2e070:	ldr	r0, [r9], #4
   2e074:	str	r0, [sp, #36]	; 0x24
   2e078:	add	r0, sl, r0
   2e07c:	str	r0, [sp, #32]
   2e080:	ldr	r0, [fp, #20]
   2e084:	add	r6, r0, #4
   2e088:	sub	r0, fp, #136	; 0x88
   2e08c:	orr	r7, r0, #4
   2e090:	sub	r0, fp, #96	; 0x60
   2e094:	orr	r0, r0, #4
   2e098:	str	r0, [sp, #24]
   2e09c:	bic	r0, sl, #3
   2e0a0:	str	r0, [sp, #28]
   2e0a4:	lsl	r0, sl, #2
   2e0a8:	str	r0, [sp, #44]	; 0x2c
   2e0ac:	mov	r0, #0
   2e0b0:	str	r0, [sp, #56]	; 0x38
   2e0b4:	mov	r0, #0
   2e0b8:	str	r0, [sp, #48]	; 0x30
   2e0bc:	cmp	sl, #1
   2e0c0:	mov	r5, r9
   2e0c4:	blt	2e15c <GetDataSlab+0x6798>
   2e0c8:	ldr	r0, [sp, #36]	; 0x24
   2e0cc:	mov	r1, #0
   2e0d0:	cmp	sl, #4
   2e0d4:	add	r4, lr, r0, lsl #2
   2e0d8:	bcc	2e148 <GetDataSlab+0x6784>
   2e0dc:	mov	r8, r6
   2e0e0:	ldr	r0, [sp, #60]	; 0x3c
   2e0e4:	ldr	r3, [sp, #44]	; 0x2c
   2e0e8:	ldr	r6, [sp, #56]	; 0x38
   2e0ec:	mla	r0, r3, r6, r0
   2e0f0:	ldr	r3, [sp, #32]
   2e0f4:	mov	r6, r8
   2e0f8:	add	r3, lr, r3, lsl #2
   2e0fc:	cmp	r0, r3
   2e100:	bcs	2e120 <GetDataSlab+0x675c>
   2e104:	ldr	r0, [sp, #44]	; 0x2c
   2e108:	ldr	r3, [sp, #56]	; 0x38
   2e10c:	mla	r0, r0, r3, r0
   2e110:	ldr	r3, [sp, #60]	; 0x3c
   2e114:	add	r0, r3, r0
   2e118:	cmp	r0, r4
   2e11c:	bhi	2e148 <GetDataSlab+0x6784>
   2e120:	ldr	r1, [sp, #28]
   2e124:	mov	r3, ip
   2e128:	mov	r0, r4
   2e12c:	vld1.32	{d16-d17}, [r0]!
   2e130:	subs	r1, r1, #4
   2e134:	vst1.32	{d16-d17}, [r3]!
   2e138:	bne	2e12c <GetDataSlab+0x6768>
   2e13c:	ldr	r1, [sp, #28]
   2e140:	cmp	sl, r1
   2e144:	beq	2e15c <GetDataSlab+0x6798>
   2e148:	ldr	r0, [r4, r1, lsl #2]
   2e14c:	str	r0, [ip, r1, lsl #2]
   2e150:	add	r1, r1, #1
   2e154:	cmp	sl, r1
   2e158:	bne	2e148 <GetDataSlab+0x6784>
   2e15c:	ldr	r0, [sp, #40]	; 0x28
   2e160:	add	lr, lr, r0, lsl #2
   2e164:	add	r2, r2, r0
   2e168:	ldr	r0, [fp, #24]
   2e16c:	cmp	r0, #2
   2e170:	blt	2e224 <GetDataSlab+0x6860>
   2e174:	mov	r1, #0
   2e178:	mov	r0, r1
   2e17c:	ldr	r1, [r7, r1, lsl #2]
   2e180:	add	r1, r1, #1
   2e184:	str	r1, [r7, r0, lsl #2]
   2e188:	ldr	r3, [r6, r0, lsl #2]
   2e18c:	sdiv	r4, r1, r3
   2e190:	mls	r1, r4, r3, r1
   2e194:	cmp	r1, #0
   2e198:	bne	2e214 <GetDataSlab+0x6850>
   2e19c:	mov	r1, #0
   2e1a0:	sub	r4, fp, #176	; 0xb0
   2e1a4:	str	r1, [r7, r0, lsl #2]
   2e1a8:	add	r1, r4, r0, lsl #2
   2e1ac:	ldr	r1, [r1, #4]
   2e1b0:	sdiv	r3, r2, r1
   2e1b4:	mls	r3, r3, r1, r2
   2e1b8:	cmp	r3, #0
   2e1bc:	beq	2e1dc <GetDataSlab+0x6818>
   2e1c0:	ldr	r4, [r4, r0, lsl #2]
   2e1c4:	ldr	r8, [r9, r0, lsl #2]
   2e1c8:	sub	r1, r1, r3
   2e1cc:	mov	r5, r9
   2e1d0:	mla	r1, r8, r4, r1
   2e1d4:	add	r2, r1, r2
   2e1d8:	b	2e1f8 <GetDataSlab+0x6834>
   2e1dc:	ldr	r1, [r5, r0, lsl #2]
   2e1e0:	cmp	r1, #0
   2e1e4:	beq	2e1fc <GetDataSlab+0x6838>
   2e1e8:	sub	r3, fp, #176	; 0xb0
   2e1ec:	ldr	r3, [r3, r0, lsl #2]
   2e1f0:	mla	r2, r3, r1, r2
   2e1f4:	mul	r1, r3, r1
   2e1f8:	add	lr, lr, r1, lsl #2
   2e1fc:	ldr	r3, [fp, #24]
   2e200:	add	r1, r0, #1
   2e204:	add	r0, r0, #2
   2e208:	cmp	r0, r3
   2e20c:	blt	2e178 <GetDataSlab+0x67b4>
   2e210:	b	2e224 <GetDataSlab+0x6860>
   2e214:	ldr	r1, [sp, #24]
   2e218:	ldr	r0, [r1, r0, lsl #2]
   2e21c:	add	lr, lr, r0, lsl #2
   2e220:	add	r2, r0, r2
   2e224:	ldr	r0, [sp, #44]	; 0x2c
   2e228:	ldr	r3, [sp, #48]	; 0x30
   2e22c:	ldr	r1, [sp, #52]	; 0x34
   2e230:	add	ip, ip, r0
   2e234:	ldr	r0, [sp, #56]	; 0x38
   2e238:	add	r3, r3, sl
   2e23c:	cmp	r3, r1
   2e240:	str	r3, [sp, #48]	; 0x30
   2e244:	add	r0, r0, #1
   2e248:	str	r0, [sp, #56]	; 0x38
   2e24c:	mov	r0, #0
   2e250:	blt	2e0bc <GetDataSlab+0x66f8>
   2e254:	b	47ffc <GetDataSlab+0x20638>
   2e258:	ldr	r0, [fp, #16]
   2e25c:	ldr	r9, [fp, #8]
   2e260:	mov	r2, #0
   2e264:	sub	ip, fp, #96	; 0x60
   2e268:	ldr	r0, [r0]
   2e26c:	str	r0, [sp, #28]
   2e270:	sub	r0, r0, #1
   2e274:	str	r0, [fp, #-96]	; 0xffffffa0
   2e278:	ldr	r0, [r9]
   2e27c:	str	r0, [fp, #-176]	; 0xffffff50
   2e280:	str	r0, [sp, #36]	; 0x24
   2e284:	ldr	r0, [fp, #24]
   2e288:	ldr	r1, [sl]
   2e28c:	cmp	r0, #2
   2e290:	str	r1, [sp, #52]	; 0x34
   2e294:	str	r1, [sp, #56]	; 0x38
   2e298:	blt	2e3f0 <GetDataSlab+0x6a2c>
   2e29c:	ldr	r3, [sp, #36]	; 0x24
   2e2a0:	mov	r5, lr
   2e2a4:	sub	r7, r9, #4
   2e2a8:	sub	lr, r9, #12
   2e2ac:	mov	r4, #1
   2e2b0:	mov	r8, #0
   2e2b4:	mvn	r0, #15
   2e2b8:	mov	r2, #0
   2e2bc:	mov	r1, r3
   2e2c0:	str	r3, [sp, #44]	; 0x2c
   2e2c4:	ldr	r1, [sp, #52]	; 0x34
   2e2c8:	str	r1, [sp, #56]	; 0x38
   2e2cc:	ldr	r1, [fp, #16]
   2e2d0:	add	r8, r8, #1
   2e2d4:	cmp	r8, #4
   2e2d8:	ldr	r1, [r1, r4, lsl #2]
   2e2dc:	str	r3, [r5, r4, lsl #2]
   2e2e0:	sub	sl, r1, #1
   2e2e4:	str	sl, [ip, r4, lsl #2]
   2e2e8:	ldr	r1, [r9, r4, lsl #2]
   2e2ec:	str	r1, [sp, #40]	; 0x28
   2e2f0:	bcs	2e2fc <GetDataSlab+0x6938>
   2e2f4:	mov	r5, r4
   2e2f8:	b	2e38c <GetDataSlab+0x69c8>
   2e2fc:	vmov.i32	q9, #1	; 0x00000001
   2e300:	vmov.i32	q10, #1	; 0x00000001
   2e304:	vmov.i32	q8, #1	; 0x00000001
   2e308:	vmov.32	d23[1], r1
   2e30c:	bic	r1, r8, #3
   2e310:	bic	r9, r4, #3
   2e314:	vmov.32	d18[0], r3
   2e318:	vmov.32	d20[0], sl
   2e31c:	sub	r5, r4, r1
   2e320:	mov	r3, lr
   2e324:	vorr	d16, d18, d18
   2e328:	vmov.i32	q9, #1	; 0x00000001
   2e32c:	vorr	d18, d20, d20
   2e330:	vld1.32	{d20-d21}, [r3], r0
   2e334:	subs	r9, r9, #4
   2e338:	vrev64.32	q12, q10
   2e33c:	vext.8	q12, q12, q12, #8
   2e340:	vext.8	q11, q11, q12, #12
   2e344:	vmul.i32	q9, q9, q12
   2e348:	vmul.i32	q8, q11, q8
   2e34c:	vorr	q11, q12, q12
   2e350:	bne	2e330 <GetDataSlab+0x696c>
   2e354:	vext.8	q11, q9, q8, #8
   2e358:	vext.8	q12, q8, q8, #8
   2e35c:	cmp	r8, r1
   2e360:	vmul.i32	q0, q9, q11
   2e364:	vmul.i32	q1, q8, q12
   2e368:	vmul.i32	q8, q0, d0[1]
   2e36c:	vmul.i32	q9, q1, d2[1]
   2e370:	vmov.32	sl, d16[0]
   2e374:	vmov.32	r3, d18[0]
   2e378:	bne	2e384 <GetDataSlab+0x69c0>
   2e37c:	ldr	r9, [fp, #8]
   2e380:	b	2e3a0 <GetDataSlab+0x69dc>
   2e384:	ldr	r9, [fp, #8]
   2e388:	vmov.32	r1, d20[0]
   2e38c:	mul	r3, r1, r3
   2e390:	ldr	r1, [r7, r5, lsl #2]
   2e394:	subs	r5, r5, #1
   2e398:	mul	sl, sl, r1
   2e39c:	bne	2e38c <GetDataSlab+0x69c8>
   2e3a0:	ldr	r1, [fp, #12]
   2e3a4:	sub	r5, fp, #176	; 0xb0
   2e3a8:	sub	ip, fp, #96	; 0x60
   2e3ac:	ldr	r6, [sp, #44]	; 0x2c
   2e3b0:	str	r3, [sp, #44]	; 0x2c
   2e3b4:	add	lr, lr, #4
   2e3b8:	str	r3, [r5, r4, lsl #2]
   2e3bc:	str	sl, [ip, r4, lsl #2]
   2e3c0:	ldr	sl, [fp, #20]
   2e3c4:	ldr	r3, [sp, #40]	; 0x28
   2e3c8:	ldr	r1, [r1, r4, lsl #2]
   2e3cc:	mla	r2, r1, r6, r2
   2e3d0:	ldr	r1, [sl, r4, lsl #2]
   2e3d4:	ldr	r6, [sp, #56]	; 0x38
   2e3d8:	add	r4, r4, #1
   2e3dc:	mul	r6, r1, r6
   2e3e0:	ldr	r1, [fp, #24]
   2e3e4:	str	r6, [sp, #56]	; 0x38
   2e3e8:	cmp	r4, r1
   2e3ec:	bne	2e2cc <GetDataSlab+0x6908>
   2e3f0:	ldr	r0, [sp, #48]	; 0x30
   2e3f4:	ldr	r1, [sp, #28]
   2e3f8:	add	r9, r0, r2, lsl #3
   2e3fc:	cmp	r1, #1
   2e400:	bne	3e6cc <GetDataSlab+0x16d08>
   2e404:	ldr	r0, [sp, #56]	; 0x38
   2e408:	ldr	lr, [fp, #12]
   2e40c:	ldr	r1, [sp, #52]	; 0x34
   2e410:	cmp	r0, #1
   2e414:	blt	47ff8 <GetDataSlab+0x20634>
   2e418:	sub	r0, fp, #136	; 0x88
   2e41c:	add	r7, sl, #4
   2e420:	mov	sl, #0
   2e424:	mov	ip, #0
   2e428:	orr	r6, r0, #4
   2e42c:	sub	r0, fp, #96	; 0x60
   2e430:	orr	r0, r0, #4
   2e434:	str	r0, [sp, #32]
   2e438:	lsl	r0, r1, #2
   2e43c:	str	r0, [sp, #48]	; 0x30
   2e440:	bic	r0, r1, #1
   2e444:	str	r0, [sp, #40]	; 0x28
   2e448:	ldr	r0, [lr], #4
   2e44c:	str	r0, [sp, #44]	; 0x2c
   2e450:	cmp	r1, #1
   2e454:	mov	r4, lr
   2e458:	blt	2e4d4 <GetDataSlab+0x6b10>
   2e45c:	mov	r3, #0
   2e460:	beq	2e49c <GetDataSlab+0x6ad8>
   2e464:	ldr	r0, [sp, #44]	; 0x2c
   2e468:	ldr	r3, [sp, #40]	; 0x28
   2e46c:	ldr	r1, [sp, #60]	; 0x3c
   2e470:	add	r0, r9, r0, lsl #3
   2e474:	vld1.64	{d16-d17}, [r0]!
   2e478:	subs	r3, r3, #2
   2e47c:	vcvt.f32.f64	s1, d17
   2e480:	vcvt.f32.f64	s0, d16
   2e484:	vst1.32	{d0}, [r1]!
   2e488:	bne	2e474 <GetDataSlab+0x6ab0>
   2e48c:	ldr	r0, [sp, #52]	; 0x34
   2e490:	ldr	r3, [sp, #40]	; 0x28
   2e494:	cmp	r0, r3
   2e498:	beq	2e4d4 <GetDataSlab+0x6b10>
   2e49c:	ldr	r5, [sp, #44]	; 0x2c
   2e4a0:	ldr	r0, [sp, #52]	; 0x34
   2e4a4:	ldr	r1, [sp, #60]	; 0x3c
   2e4a8:	add	r5, r9, r5, lsl #3
   2e4ac:	sub	r0, r0, r3
   2e4b0:	add	r1, r1, r3, lsl #2
   2e4b4:	add	r3, r5, r3, lsl #3
   2e4b8:	vldr	d16, [r3]
   2e4bc:	subs	r0, r0, #1
   2e4c0:	add	r3, r3, #8
   2e4c4:	vcvt.f32.f64	s0, d16
   2e4c8:	vstr	s0, [r1]
   2e4cc:	add	r1, r1, #4
   2e4d0:	bne	2e4b8 <GetDataSlab+0x6af4>
   2e4d4:	ldr	r0, [sp, #36]	; 0x24
   2e4d8:	add	r9, r9, r0, lsl #3
   2e4dc:	add	r2, r2, r0
   2e4e0:	ldr	r0, [fp, #24]
   2e4e4:	cmp	r0, #2
   2e4e8:	blt	2e598 <GetDataSlab+0x6bd4>
   2e4ec:	mov	r1, #0
   2e4f0:	mov	r0, r1
   2e4f4:	ldr	r1, [r6, r1, lsl #2]
   2e4f8:	add	r1, r1, #1
   2e4fc:	str	r1, [r6, r0, lsl #2]
   2e500:	ldr	r3, [r7, r0, lsl #2]
   2e504:	sdiv	r5, r1, r3
   2e508:	mls	r1, r5, r3, r1
   2e50c:	cmp	r1, #0
   2e510:	bne	2e588 <GetDataSlab+0x6bc4>
   2e514:	sub	r5, fp, #176	; 0xb0
   2e518:	str	sl, [r6, r0, lsl #2]
   2e51c:	add	r1, r5, r0, lsl #2
   2e520:	ldr	r1, [r1, #4]
   2e524:	sdiv	r3, r2, r1
   2e528:	mls	r3, r3, r1, r2
   2e52c:	cmp	r3, #0
   2e530:	beq	2e550 <GetDataSlab+0x6b8c>
   2e534:	ldr	r5, [r5, r0, lsl #2]
   2e538:	ldr	r8, [lr, r0, lsl #2]
   2e53c:	sub	r1, r1, r3
   2e540:	mov	r4, lr
   2e544:	mla	r1, r8, r5, r1
   2e548:	add	r2, r1, r2
   2e54c:	b	2e56c <GetDataSlab+0x6ba8>
   2e550:	ldr	r1, [r4, r0, lsl #2]
   2e554:	cmp	r1, #0
   2e558:	beq	2e570 <GetDataSlab+0x6bac>
   2e55c:	sub	r3, fp, #176	; 0xb0
   2e560:	ldr	r3, [r3, r0, lsl #2]
   2e564:	mla	r2, r3, r1, r2
   2e568:	mul	r1, r3, r1
   2e56c:	add	r9, r9, r1, lsl #3
   2e570:	ldr	r3, [fp, #24]
   2e574:	add	r1, r0, #1
   2e578:	add	r0, r0, #2
   2e57c:	cmp	r0, r3
   2e580:	blt	2e4f0 <GetDataSlab+0x6b2c>
   2e584:	b	2e598 <GetDataSlab+0x6bd4>
   2e588:	ldr	r1, [sp, #32]
   2e58c:	ldr	r0, [r1, r0, lsl #2]
   2e590:	add	r9, r9, r0, lsl #3
   2e594:	add	r2, r0, r2
   2e598:	ldr	r0, [sp, #60]	; 0x3c
   2e59c:	ldr	r1, [sp, #48]	; 0x30
   2e5a0:	ldr	r3, [sp, #56]	; 0x38
   2e5a4:	add	r0, r0, r1
   2e5a8:	ldr	r1, [sp, #52]	; 0x34
   2e5ac:	str	r0, [sp, #60]	; 0x3c
   2e5b0:	mov	r0, #0
   2e5b4:	add	ip, ip, r1
   2e5b8:	cmp	ip, r3
   2e5bc:	blt	2e450 <GetDataSlab+0x6a8c>
   2e5c0:	b	47ffc <GetDataSlab+0x20638>
   2e5c4:	ldr	r0, [fp, #16]
   2e5c8:	mov	r4, #0
   2e5cc:	sub	r8, fp, #96	; 0x60
   2e5d0:	str	r6, [sp, #40]	; 0x28
   2e5d4:	ldr	r0, [r0]
   2e5d8:	str	r0, [sp, #36]	; 0x24
   2e5dc:	sub	r0, r0, #1
   2e5e0:	str	r0, [fp, #-96]	; 0xffffffa0
   2e5e4:	ldr	r0, [fp, #8]
   2e5e8:	ldr	r0, [r0]
   2e5ec:	str	r0, [fp, #-176]	; 0xffffff50
   2e5f0:	str	r0, [sp, #32]
   2e5f4:	ldr	r0, [fp, #24]
   2e5f8:	ldr	r1, [sl]
   2e5fc:	cmp	r0, #2
   2e600:	str	r1, [sp, #24]
   2e604:	str	r1, [sp, #52]	; 0x34
   2e608:	blt	2e778 <GetDataSlab+0x6db4>
   2e60c:	ldr	r0, [fp, #8]
   2e610:	ldr	r2, [sp, #24]
   2e614:	mov	r7, #1
   2e618:	mvn	r9, #15
   2e61c:	mov	r4, #0
   2e620:	sub	r1, r0, #4
   2e624:	sub	sl, r0, #12
   2e628:	mov	r0, #0
   2e62c:	str	r2, [sp, #52]	; 0x34
   2e630:	str	r0, [sp, #56]	; 0x38
   2e634:	ldr	r0, [sp, #32]
   2e638:	mov	r5, r0
   2e63c:	ldr	r2, [fp, #16]
   2e640:	str	r5, [sp, #44]	; 0x2c
   2e644:	ldr	r6, [sp, #56]	; 0x38
   2e648:	ldr	r2, [r2, r7, lsl #2]
   2e64c:	str	r0, [lr, r7, lsl #2]
   2e650:	add	r6, r6, #1
   2e654:	cmp	r6, #4
   2e658:	str	r6, [sp, #56]	; 0x38
   2e65c:	sub	r5, r2, #1
   2e660:	ldr	r2, [fp, #8]
   2e664:	str	r5, [r8, r7, lsl #2]
   2e668:	ldr	lr, [r2, r7, lsl #2]
   2e66c:	bcs	2e67c <GetDataSlab+0x6cb8>
   2e670:	mov	r2, lr
   2e674:	mov	r3, r7
   2e678:	b	2e70c <GetDataSlab+0x6d48>
   2e67c:	vmov.i32	q9, #1	; 0x00000001
   2e680:	vmov.i32	q10, #1	; 0x00000001
   2e684:	vmov.i32	q8, #1	; 0x00000001
   2e688:	bic	r2, r6, #3
   2e68c:	bic	ip, r7, #3
   2e690:	vmov.32	d23[1], lr
   2e694:	vmov.32	d18[0], r0
   2e698:	vmov.32	d20[0], r5
   2e69c:	sub	r3, r7, r2
   2e6a0:	mov	r0, sl
   2e6a4:	vorr	d16, d18, d18
   2e6a8:	vmov.i32	q9, #1	; 0x00000001
   2e6ac:	vorr	d18, d20, d20
   2e6b0:	vld1.32	{d20-d21}, [r0], r9
   2e6b4:	subs	ip, ip, #4
   2e6b8:	vrev64.32	q12, q10
   2e6bc:	vext.8	q12, q12, q12, #8
   2e6c0:	vext.8	q11, q11, q12, #12
   2e6c4:	vmul.i32	q9, q9, q12
   2e6c8:	vmul.i32	q8, q11, q8
   2e6cc:	vorr	q11, q12, q12
   2e6d0:	bne	2e6b0 <GetDataSlab+0x6cec>
   2e6d4:	vext.8	q11, q9, q8, #8
   2e6d8:	vext.8	q12, q8, q8, #8
   2e6dc:	cmp	r6, r2
   2e6e0:	vmul.i32	q0, q9, q11
   2e6e4:	vmul.i32	q1, q8, q12
   2e6e8:	vmul.i32	q8, q0, d0[1]
   2e6ec:	vmul.i32	q9, q1, d2[1]
   2e6f0:	vmov.32	r5, d16[0]
   2e6f4:	vmov.32	r0, d18[0]
   2e6f8:	bne	2e704 <GetDataSlab+0x6d40>
   2e6fc:	ldr	ip, [sp, #60]	; 0x3c
   2e700:	b	2e720 <GetDataSlab+0x6d5c>
   2e704:	ldr	ip, [sp, #60]	; 0x3c
   2e708:	vmov.32	r2, d20[0]
   2e70c:	mul	r0, r2, r0
   2e710:	ldr	r2, [r1, r3, lsl #2]
   2e714:	subs	r3, r3, #1
   2e718:	mul	r5, r5, r2
   2e71c:	bne	2e70c <GetDataSlab+0x6d48>
   2e720:	sub	r2, fp, #176	; 0xb0
   2e724:	sub	r8, fp, #96	; 0x60
   2e728:	add	sl, sl, #4
   2e72c:	mov	r3, r2
   2e730:	str	r0, [r2, r7, lsl #2]
   2e734:	ldr	r2, [fp, #12]
   2e738:	str	r5, [r8, r7, lsl #2]
   2e73c:	ldr	r5, [sp, #44]	; 0x2c
   2e740:	ldr	r2, [r2, r7, lsl #2]
   2e744:	mla	r4, r2, r5, r4
   2e748:	ldr	r2, [fp, #20]
   2e74c:	ldr	r5, [sp, #52]	; 0x34
   2e750:	ldr	r2, [r2, r7, lsl #2]
   2e754:	add	r7, r7, #1
   2e758:	mul	r5, r2, r5
   2e75c:	ldr	r2, [fp, #24]
   2e760:	str	r5, [sp, #52]	; 0x34
   2e764:	mov	r5, r0
   2e768:	mov	r0, lr
   2e76c:	mov	lr, r3
   2e770:	cmp	r7, r2
   2e774:	bne	2e63c <GetDataSlab+0x6c78>
   2e778:	ldr	r0, [sp, #48]	; 0x30
   2e77c:	ldr	r3, [sp, #36]	; 0x24
   2e780:	add	r5, r0, r4, lsl #3
   2e784:	cmp	r3, #1
   2e788:	bne	3e860 <GetDataSlab+0x16e9c>
   2e78c:	ldr	r0, [sp, #52]	; 0x34
   2e790:	ldr	r6, [sp, #40]	; 0x28
   2e794:	ldr	sl, [sp, #24]
   2e798:	cmp	r0, #1
   2e79c:	ldr	r0, [fp, #20]
   2e7a0:	blt	47a98 <GetDataSlab+0x200d4>
   2e7a4:	add	lr, r0, #4
   2e7a8:	sub	r0, fp, #136	; 0x88
   2e7ac:	mov	r9, r6
   2e7b0:	str	ip, [sp, #56]	; 0x38
   2e7b4:	orr	r8, r0, #4
   2e7b8:	sub	r0, fp, #96	; 0x60
   2e7bc:	str	lr, [sp, #12]
   2e7c0:	orr	r0, r0, #4
   2e7c4:	str	r0, [sp, #4]
   2e7c8:	lsl	r0, sl, #2
   2e7cc:	str	r0, [sp, #28]
   2e7d0:	bic	r0, sl, #1
   2e7d4:	str	r0, [sp, #16]
   2e7d8:	ldr	r0, [fp, #12]
   2e7dc:	ldr	r1, [r0], #4
   2e7e0:	str	r1, [sp, #20]
   2e7e4:	mov	r1, #0
   2e7e8:	str	r0, [sp, #8]
   2e7ec:	cmp	sl, #1
   2e7f0:	str	r1, [sp, #36]	; 0x24
   2e7f4:	str	r5, [sp, #44]	; 0x2c
   2e7f8:	blt	2e894 <GetDataSlab+0x6ed0>
   2e7fc:	mov	r0, #0
   2e800:	beq	2e860 <GetDataSlab+0x6e9c>
   2e804:	ldr	r0, [sp, #44]	; 0x2c
   2e808:	ldr	r1, [sp, #20]
   2e80c:	ldr	sl, [sp, #16]
   2e810:	ldr	r6, [sp, #56]	; 0x38
   2e814:	add	r9, r0, r1, lsl #3
   2e818:	vld1.64	{d8-d9}, [r9]!
   2e81c:	vmov.32	r0, d9[0]
   2e820:	vmov.32	r1, d9[1]
   2e824:	bl	584e0 <__aeabi_l2f>
   2e828:	vmov.32	r2, d8[0]
   2e82c:	vmov.32	r1, d8[1]
   2e830:	vmov	s17, r0
   2e834:	mov	r0, r2
   2e838:	bl	584e0 <__aeabi_l2f>
   2e83c:	vmov	s16, r0
   2e840:	subs	sl, sl, #2
   2e844:	vst1.32	{d8}, [r6]!
   2e848:	bne	2e818 <GetDataSlab+0x6e54>
   2e84c:	ldr	sl, [sp, #24]
   2e850:	ldr	r0, [sp, #16]
   2e854:	ldr	r9, [sp, #40]	; 0x28
   2e858:	cmp	sl, r0
   2e85c:	beq	2e894 <GetDataSlab+0x6ed0>
   2e860:	ldr	r1, [sp, #56]	; 0x38
   2e864:	ldr	r2, [sp, #20]
   2e868:	sub	r6, sl, r0
   2e86c:	add	r5, r1, r0, lsl #2
   2e870:	ldr	r1, [sp, #44]	; 0x2c
   2e874:	add	r1, r1, r2, lsl #3
   2e878:	add	r7, r1, r0, lsl #3
   2e87c:	ldrd	r0, [r7]
   2e880:	bl	584e0 <__aeabi_l2f>
   2e884:	str	r0, [r5], #4
   2e888:	subs	r6, r6, #1
   2e88c:	add	r7, r7, #8
   2e890:	bne	2e87c <GetDataSlab+0x6eb8>
   2e894:	ldr	r0, [sp, #32]
   2e898:	ldr	r5, [sp, #44]	; 0x2c
   2e89c:	add	r5, r5, r0, lsl #3
   2e8a0:	add	r4, r4, r0
   2e8a4:	ldr	r0, [fp, #24]
   2e8a8:	cmp	r0, #2
   2e8ac:	blt	2e964 <GetDataSlab+0x6fa0>
   2e8b0:	sub	r6, fp, #176	; 0xb0
   2e8b4:	ldr	lr, [sp, #12]
   2e8b8:	mov	r1, #0
   2e8bc:	mov	ip, r6
   2e8c0:	ldr	r6, [sp, #8]
   2e8c4:	mov	r0, r1
   2e8c8:	ldr	r1, [r8, r1, lsl #2]
   2e8cc:	add	r1, r1, #1
   2e8d0:	str	r1, [r8, r0, lsl #2]
   2e8d4:	ldr	r2, [lr, r0, lsl #2]
   2e8d8:	sdiv	r3, r1, r2
   2e8dc:	mls	r1, r3, r2, r1
   2e8e0:	cmp	r1, #0
   2e8e4:	bne	2e954 <GetDataSlab+0x6f90>
   2e8e8:	mov	r1, #0
   2e8ec:	str	r1, [r8, r0, lsl #2]
   2e8f0:	add	r1, ip, r0, lsl #2
   2e8f4:	ldr	r1, [r1, #4]
   2e8f8:	sdiv	r2, r4, r1
   2e8fc:	mls	r2, r2, r1, r4
   2e900:	cmp	r2, #0
   2e904:	beq	2e920 <GetDataSlab+0x6f5c>
   2e908:	ldr	r3, [ip, r0, lsl #2]
   2e90c:	ldr	r7, [r6, r0, lsl #2]
   2e910:	sub	r1, r1, r2
   2e914:	mla	r1, r7, r3, r1
   2e918:	add	r4, r1, r4
   2e91c:	b	2e938 <GetDataSlab+0x6f74>
   2e920:	ldr	r1, [r6, r0, lsl #2]
   2e924:	cmp	r1, #0
   2e928:	beq	2e93c <GetDataSlab+0x6f78>
   2e92c:	ldr	r2, [ip, r0, lsl #2]
   2e930:	mla	r4, r2, r1, r4
   2e934:	mul	r1, r2, r1
   2e938:	add	r5, r5, r1, lsl #3
   2e93c:	ldr	r2, [fp, #24]
   2e940:	add	r1, r0, #1
   2e944:	add	r0, r0, #2
   2e948:	cmp	r0, r2
   2e94c:	blt	2e8c4 <GetDataSlab+0x6f00>
   2e950:	b	2e964 <GetDataSlab+0x6fa0>
   2e954:	ldr	r1, [sp, #4]
   2e958:	ldr	r0, [r1, r0, lsl #2]
   2e95c:	add	r5, r5, r0, lsl #3
   2e960:	add	r4, r0, r4
   2e964:	ldr	r0, [sp, #28]
   2e968:	ldr	r1, [sp, #56]	; 0x38
   2e96c:	add	r1, r1, r0
   2e970:	ldr	r0, [sp, #52]	; 0x34
   2e974:	str	r1, [sp, #56]	; 0x38
   2e978:	ldr	r1, [sp, #36]	; 0x24
   2e97c:	add	r1, r1, sl
   2e980:	cmp	r1, r0
   2e984:	blt	2e7ec <GetDataSlab+0x6e28>
   2e988:	mov	r0, #0
   2e98c:	mov	r6, r9
   2e990:	b	47a9c <GetDataSlab+0x200d8>
   2e994:	ldr	r5, [r3]
   2e998:	ldr	r9, [fp, #8]
   2e99c:	ldr	r8, [fp, #12]
   2e9a0:	mov	r4, #0
   2e9a4:	sub	r3, fp, #176	; 0xb0
   2e9a8:	sub	r0, r5, #1
   2e9ac:	str	r0, [fp, #-96]	; 0xffffffa0
   2e9b0:	ldr	r0, [r9]
   2e9b4:	str	r0, [fp, #-176]	; 0xffffff50
   2e9b8:	str	r0, [sp, #52]	; 0x34
   2e9bc:	ldr	r0, [fp, #24]
   2e9c0:	ldr	r2, [sl]
   2e9c4:	sub	sl, fp, #96	; 0x60
   2e9c8:	cmp	r0, #2
   2e9cc:	mov	r0, r2
   2e9d0:	str	r2, [sp, #56]	; 0x38
   2e9d4:	blt	2eb38 <GetDataSlab+0x7174>
   2e9d8:	ldr	r7, [sp, #52]	; 0x34
   2e9dc:	sub	r0, r9, #4
   2e9e0:	sub	r6, r9, #12
   2e9e4:	mov	ip, #1
   2e9e8:	mov	lr, #0
   2e9ec:	mov	r4, #0
   2e9f0:	str	r2, [sp, #56]	; 0x38
   2e9f4:	mov	r1, r7
   2e9f8:	str	r7, [sp, #44]	; 0x2c
   2e9fc:	mov	r1, r2
   2ea00:	ldr	r1, [fp, #16]
   2ea04:	add	lr, lr, #1
   2ea08:	str	r6, [sp, #40]	; 0x28
   2ea0c:	cmp	lr, #4
   2ea10:	str	lr, [sp, #36]	; 0x24
   2ea14:	ldr	r1, [r1, ip, lsl #2]
   2ea18:	str	r7, [r3, ip, lsl #2]
   2ea1c:	sub	r8, r1, #1
   2ea20:	str	r8, [sl, ip, lsl #2]
   2ea24:	ldr	r1, [r9, ip, lsl #2]
   2ea28:	str	r1, [sp, #32]
   2ea2c:	bcs	2ea38 <GetDataSlab+0x7074>
   2ea30:	mov	r3, ip
   2ea34:	b	2eacc <GetDataSlab+0x7108>
   2ea38:	vmov.i32	q9, #1	; 0x00000001
   2ea3c:	vmov.i32	q10, #1	; 0x00000001
   2ea40:	vmov.i32	q8, #1	; 0x00000001
   2ea44:	bic	sl, lr, #3
   2ea48:	vmov.32	d23[1], r1
   2ea4c:	bic	r9, ip, #3
   2ea50:	mov	r1, r6
   2ea54:	vmov.32	d18[0], r7
   2ea58:	vmov.32	d20[0], r8
   2ea5c:	sub	r3, ip, sl
   2ea60:	mvn	r7, #15
   2ea64:	vorr	d16, d18, d18
   2ea68:	vmov.i32	q9, #1	; 0x00000001
   2ea6c:	vorr	d18, d20, d20
   2ea70:	vld1.32	{d20-d21}, [r1], r7
   2ea74:	subs	r9, r9, #4
   2ea78:	vrev64.32	q12, q10
   2ea7c:	vext.8	q12, q12, q12, #8
   2ea80:	vext.8	q11, q11, q12, #12
   2ea84:	vmul.i32	q9, q9, q12
   2ea88:	vmul.i32	q8, q11, q8
   2ea8c:	vorr	q11, q12, q12
   2ea90:	bne	2ea70 <GetDataSlab+0x70ac>
   2ea94:	vext.8	q11, q9, q8, #8
   2ea98:	vext.8	q12, q8, q8, #8
   2ea9c:	cmp	lr, sl
   2eaa0:	vmul.i32	q0, q9, q11
   2eaa4:	vmul.i32	q1, q8, q12
   2eaa8:	vmul.i32	q8, q0, d0[1]
   2eaac:	vmul.i32	q9, q1, d2[1]
   2eab0:	vmov.32	r8, d16[0]
   2eab4:	vmov.32	r7, d18[0]
   2eab8:	bne	2eac4 <GetDataSlab+0x7100>
   2eabc:	ldr	r9, [fp, #8]
   2eac0:	b	2eae0 <GetDataSlab+0x711c>
   2eac4:	ldr	r9, [fp, #8]
   2eac8:	vmov.32	r1, d20[0]
   2eacc:	mul	r7, r1, r7
   2ead0:	ldr	r1, [r0, r3, lsl #2]
   2ead4:	subs	r3, r3, #1
   2ead8:	mul	r8, r8, r1
   2eadc:	bne	2eacc <GetDataSlab+0x7108>
   2eae0:	sub	sl, fp, #96	; 0x60
   2eae4:	sub	r3, fp, #176	; 0xb0
   2eae8:	ldr	r6, [sp, #44]	; 0x2c
   2eaec:	ldr	lr, [sp, #56]	; 0x38
   2eaf0:	str	r7, [sp, #44]	; 0x2c
   2eaf4:	str	r8, [sl, ip, lsl #2]
   2eaf8:	ldr	r8, [fp, #12]
   2eafc:	str	r7, [r3, ip, lsl #2]
   2eb00:	ldr	r7, [sp, #32]
   2eb04:	ldr	r1, [r8, ip, lsl #2]
   2eb08:	mla	r4, r1, r6, r4
   2eb0c:	ldr	r1, [fp, #20]
   2eb10:	ldr	r6, [sp, #40]	; 0x28
   2eb14:	ldr	r1, [r1, ip, lsl #2]
   2eb18:	add	ip, ip, #1
   2eb1c:	add	r6, r6, #4
   2eb20:	mul	lr, r1, lr
   2eb24:	ldr	r1, [fp, #24]
   2eb28:	str	lr, [sp, #56]	; 0x38
   2eb2c:	ldr	lr, [sp, #36]	; 0x24
   2eb30:	cmp	ip, r1
   2eb34:	bne	2ea00 <GetDataSlab+0x703c>
   2eb38:	ldr	r0, [sp, #48]	; 0x30
   2eb3c:	cmp	r5, #1
   2eb40:	add	sl, r0, r4
   2eb44:	bne	3ea34 <GetDataSlab+0x17070>
   2eb48:	ldr	r0, [sp, #56]	; 0x38
   2eb4c:	cmp	r0, #1
   2eb50:	blt	2a430 <GetDataSlab+0x2a6c>
   2eb54:	ldr	r0, [fp, #20]
   2eb58:	mov	r9, r8
   2eb5c:	mov	r8, #0
   2eb60:	add	ip, r0, #4
   2eb64:	sub	r0, fp, #136	; 0x88
   2eb68:	orr	r7, r0, #4
   2eb6c:	sub	r0, fp, #96	; 0x60
   2eb70:	orr	r0, r0, #4
   2eb74:	str	r0, [sp, #44]	; 0x2c
   2eb78:	ldr	r0, [r9], #4
   2eb7c:	str	r0, [sp, #48]	; 0x30
   2eb80:	ldr	r6, [sp, #48]	; 0x30
   2eb84:	ldr	r1, [sp, #52]	; 0x34
   2eb88:	cmp	r2, #1
   2eb8c:	add	r0, r6, r4
   2eb90:	add	r3, sl, r6
   2eb94:	blt	2ebd0 <GetDataSlab+0x720c>
   2eb98:	ldr	r1, [sp, #60]	; 0x3c
   2eb9c:	ldr	r6, [fp, #20]
   2eba0:	mov	r4, #0
   2eba4:	add	r1, r1, r8
   2eba8:	ldrb	r2, [r3, r4]
   2ebac:	strb	r2, [r1, r4]
   2ebb0:	add	r4, r4, #1
   2ebb4:	ldr	r2, [r6]
   2ebb8:	cmp	r4, r2
   2ebbc:	blt	2eba8 <GetDataSlab+0x71e4>
   2ebc0:	ldr	r1, [fp, #12]
   2ebc4:	ldr	r6, [r1]
   2ebc8:	ldr	r1, [fp, #8]
   2ebcc:	ldr	r1, [r1]
   2ebd0:	str	r1, [sp, #52]	; 0x34
   2ebd4:	sub	r1, r1, r6
   2ebd8:	str	r6, [sp, #48]	; 0x30
   2ebdc:	add	r4, r0, r1
   2ebe0:	ldr	r0, [fp, #24]
   2ebe4:	add	sl, r3, r1
   2ebe8:	cmp	r0, #2
   2ebec:	blt	2ec94 <GetDataSlab+0x72d0>
   2ebf0:	mov	r1, #0
   2ebf4:	mov	r0, r1
   2ebf8:	ldr	r1, [r7, r1, lsl #2]
   2ebfc:	add	r1, r1, #1
   2ec00:	str	r1, [r7, r0, lsl #2]
   2ec04:	ldr	r6, [ip, r0, lsl #2]
   2ec08:	sdiv	lr, r1, r6
   2ec0c:	mls	r1, lr, r6, r1
   2ec10:	cmp	r1, #0
   2ec14:	bne	2ec84 <GetDataSlab+0x72c0>
   2ec18:	mov	r1, #0
   2ec1c:	sub	r3, fp, #176	; 0xb0
   2ec20:	str	r1, [r7, r0, lsl #2]
   2ec24:	add	r1, r3, r0, lsl #2
   2ec28:	ldr	r1, [r1, #4]
   2ec2c:	sdiv	r6, r4, r1
   2ec30:	mls	r6, r6, r1, r4
   2ec34:	cmp	r6, #0
   2ec38:	beq	2ec58 <GetDataSlab+0x7294>
   2ec3c:	ldr	r5, [r3, r0, lsl #2]
   2ec40:	ldr	r3, [r9, r0, lsl #2]
   2ec44:	sub	r1, r1, r6
   2ec48:	mla	r1, r3, r5, r1
   2ec4c:	add	r4, r1, r4
   2ec50:	add	sl, sl, r1
   2ec54:	b	2ec6c <GetDataSlab+0x72a8>
   2ec58:	ldr	r1, [r9, r0, lsl #2]
   2ec5c:	cmp	r1, #0
   2ec60:	ldrne	r3, [r3, r0, lsl #2]
   2ec64:	mlane	r4, r3, r1, r4
   2ec68:	mlane	sl, r3, r1, sl
   2ec6c:	ldr	r3, [fp, #24]
   2ec70:	add	r1, r0, #1
   2ec74:	add	r0, r0, #2
   2ec78:	cmp	r0, r3
   2ec7c:	blt	2ebf4 <GetDataSlab+0x7230>
   2ec80:	b	2ec94 <GetDataSlab+0x72d0>
   2ec84:	ldr	r1, [sp, #44]	; 0x2c
   2ec88:	ldr	r0, [r1, r0, lsl #2]
   2ec8c:	add	sl, sl, r0
   2ec90:	add	r4, r0, r4
   2ec94:	ldr	r1, [sp, #56]	; 0x38
   2ec98:	add	r8, r2, r8
   2ec9c:	mov	r0, #0
   2eca0:	cmp	r8, r1
   2eca4:	blt	2eb80 <GetDataSlab+0x71bc>
   2eca8:	b	47ffc <GetDataSlab+0x20638>
   2ecac:	ldr	r5, [r3]
   2ecb0:	ldr	r9, [fp, #8]
   2ecb4:	ldr	r8, [fp, #12]
   2ecb8:	mov	r4, #0
   2ecbc:	sub	r3, fp, #176	; 0xb0
   2ecc0:	sub	r0, r5, #1
   2ecc4:	str	r0, [fp, #-96]	; 0xffffffa0
   2ecc8:	ldr	r0, [r9]
   2eccc:	str	r0, [fp, #-176]	; 0xffffff50
   2ecd0:	str	r0, [sp, #52]	; 0x34
   2ecd4:	ldr	r0, [fp, #24]
   2ecd8:	ldr	r2, [sl]
   2ecdc:	sub	sl, fp, #96	; 0x60
   2ece0:	cmp	r0, #2
   2ece4:	mov	r0, r2
   2ece8:	str	r2, [sp, #56]	; 0x38
   2ecec:	blt	2ee50 <GetDataSlab+0x748c>
   2ecf0:	ldr	r7, [sp, #52]	; 0x34
   2ecf4:	sub	r0, r9, #4
   2ecf8:	sub	r6, r9, #12
   2ecfc:	mov	ip, #1
   2ed00:	mov	lr, #0
   2ed04:	mov	r4, #0
   2ed08:	str	r2, [sp, #56]	; 0x38
   2ed0c:	mov	r1, r7
   2ed10:	str	r7, [sp, #44]	; 0x2c
   2ed14:	mov	r1, r2
   2ed18:	ldr	r1, [fp, #16]
   2ed1c:	add	lr, lr, #1
   2ed20:	str	r6, [sp, #40]	; 0x28
   2ed24:	cmp	lr, #4
   2ed28:	str	lr, [sp, #36]	; 0x24
   2ed2c:	ldr	r1, [r1, ip, lsl #2]
   2ed30:	str	r7, [r3, ip, lsl #2]
   2ed34:	sub	r8, r1, #1
   2ed38:	str	r8, [sl, ip, lsl #2]
   2ed3c:	ldr	r1, [r9, ip, lsl #2]
   2ed40:	str	r1, [sp, #32]
   2ed44:	bcs	2ed50 <GetDataSlab+0x738c>
   2ed48:	mov	r3, ip
   2ed4c:	b	2ede4 <GetDataSlab+0x7420>
   2ed50:	vmov.i32	q9, #1	; 0x00000001
   2ed54:	vmov.i32	q10, #1	; 0x00000001
   2ed58:	vmov.i32	q8, #1	; 0x00000001
   2ed5c:	bic	sl, lr, #3
   2ed60:	vmov.32	d23[1], r1
   2ed64:	bic	r9, ip, #3
   2ed68:	mov	r1, r6
   2ed6c:	vmov.32	d18[0], r7
   2ed70:	vmov.32	d20[0], r8
   2ed74:	sub	r3, ip, sl
   2ed78:	mvn	r7, #15
   2ed7c:	vorr	d16, d18, d18
   2ed80:	vmov.i32	q9, #1	; 0x00000001
   2ed84:	vorr	d18, d20, d20
   2ed88:	vld1.32	{d20-d21}, [r1], r7
   2ed8c:	subs	r9, r9, #4
   2ed90:	vrev64.32	q12, q10
   2ed94:	vext.8	q12, q12, q12, #8
   2ed98:	vext.8	q11, q11, q12, #12
   2ed9c:	vmul.i32	q9, q9, q12
   2eda0:	vmul.i32	q8, q11, q8
   2eda4:	vorr	q11, q12, q12
   2eda8:	bne	2ed88 <GetDataSlab+0x73c4>
   2edac:	vext.8	q11, q9, q8, #8
   2edb0:	vext.8	q12, q8, q8, #8
   2edb4:	cmp	lr, sl
   2edb8:	vmul.i32	q0, q9, q11
   2edbc:	vmul.i32	q1, q8, q12
   2edc0:	vmul.i32	q8, q0, d0[1]
   2edc4:	vmul.i32	q9, q1, d2[1]
   2edc8:	vmov.32	r8, d16[0]
   2edcc:	vmov.32	r7, d18[0]
   2edd0:	bne	2eddc <GetDataSlab+0x7418>
   2edd4:	ldr	r9, [fp, #8]
   2edd8:	b	2edf8 <GetDataSlab+0x7434>
   2eddc:	ldr	r9, [fp, #8]
   2ede0:	vmov.32	r1, d20[0]
   2ede4:	mul	r7, r1, r7
   2ede8:	ldr	r1, [r0, r3, lsl #2]
   2edec:	subs	r3, r3, #1
   2edf0:	mul	r8, r8, r1
   2edf4:	bne	2ede4 <GetDataSlab+0x7420>
   2edf8:	sub	sl, fp, #96	; 0x60
   2edfc:	sub	r3, fp, #176	; 0xb0
   2ee00:	ldr	r6, [sp, #44]	; 0x2c
   2ee04:	ldr	lr, [sp, #56]	; 0x38
   2ee08:	str	r7, [sp, #44]	; 0x2c
   2ee0c:	str	r8, [sl, ip, lsl #2]
   2ee10:	ldr	r8, [fp, #12]
   2ee14:	str	r7, [r3, ip, lsl #2]
   2ee18:	ldr	r7, [sp, #32]
   2ee1c:	ldr	r1, [r8, ip, lsl #2]
   2ee20:	mla	r4, r1, r6, r4
   2ee24:	ldr	r1, [fp, #20]
   2ee28:	ldr	r6, [sp, #40]	; 0x28
   2ee2c:	ldr	r1, [r1, ip, lsl #2]
   2ee30:	add	ip, ip, #1
   2ee34:	add	r6, r6, #4
   2ee38:	mul	lr, r1, lr
   2ee3c:	ldr	r1, [fp, #24]
   2ee40:	str	lr, [sp, #56]	; 0x38
   2ee44:	ldr	lr, [sp, #36]	; 0x24
   2ee48:	cmp	ip, r1
   2ee4c:	bne	2ed18 <GetDataSlab+0x7354>
   2ee50:	ldr	r0, [sp, #48]	; 0x30
   2ee54:	cmp	r5, #1
   2ee58:	add	sl, r0, r4, lsl #1
   2ee5c:	bne	3ebcc <GetDataSlab+0x17208>
   2ee60:	ldr	r0, [sp, #56]	; 0x38
   2ee64:	cmp	r0, #1
   2ee68:	blt	2a430 <GetDataSlab+0x2a6c>
   2ee6c:	ldr	r0, [fp, #20]
   2ee70:	mov	r9, r8
   2ee74:	mov	lr, #0
   2ee78:	add	ip, r0, #4
   2ee7c:	sub	r0, fp, #136	; 0x88
   2ee80:	orr	r7, r0, #4
   2ee84:	sub	r0, fp, #96	; 0x60
   2ee88:	orr	r0, r0, #4
   2ee8c:	str	r0, [sp, #44]	; 0x2c
   2ee90:	ldr	r0, [r9], #4
   2ee94:	str	r0, [sp, #48]	; 0x30
   2ee98:	ldr	r3, [sp, #48]	; 0x30
   2ee9c:	ldr	r1, [sp, #52]	; 0x34
   2eea0:	cmp	r2, #1
   2eea4:	add	r8, r3, r4
   2eea8:	add	r0, sl, r3, lsl #1
   2eeac:	blt	2eeec <GetDataSlab+0x7528>
   2eeb0:	ldr	r1, [sp, #60]	; 0x3c
   2eeb4:	ldr	r5, [fp, #20]
   2eeb8:	mov	r3, r0
   2eebc:	add	r4, r1, lr
   2eec0:	mov	r1, #0
   2eec4:	ldrb	r2, [r3], #2
   2eec8:	strb	r2, [r4, r1]
   2eecc:	add	r1, r1, #1
   2eed0:	ldr	r2, [r5]
   2eed4:	cmp	r1, r2
   2eed8:	blt	2eec4 <GetDataSlab+0x7500>
   2eedc:	ldr	r1, [fp, #12]
   2eee0:	ldr	r3, [r1]
   2eee4:	ldr	r1, [fp, #8]
   2eee8:	ldr	r1, [r1]
   2eeec:	str	r1, [sp, #52]	; 0x34
   2eef0:	sub	r1, r1, r3
   2eef4:	str	r3, [sp, #48]	; 0x30
   2eef8:	add	sl, r0, r1, lsl #1
   2eefc:	ldr	r0, [fp, #24]
   2ef00:	add	r4, r8, r1
   2ef04:	cmp	r0, #2
   2ef08:	blt	2efb8 <GetDataSlab+0x75f4>
   2ef0c:	mov	r1, #0
   2ef10:	mov	r8, #0
   2ef14:	mov	r0, r1
   2ef18:	ldr	r1, [r7, r1, lsl #2]
   2ef1c:	add	r1, r1, #1
   2ef20:	str	r1, [r7, r0, lsl #2]
   2ef24:	ldr	r6, [ip, r0, lsl #2]
   2ef28:	sdiv	r5, r1, r6
   2ef2c:	mls	r1, r5, r6, r1
   2ef30:	cmp	r1, #0
   2ef34:	bne	2efa8 <GetDataSlab+0x75e4>
   2ef38:	sub	r3, fp, #176	; 0xb0
   2ef3c:	str	r8, [r7, r0, lsl #2]
   2ef40:	add	r1, r3, r0, lsl #2
   2ef44:	ldr	r1, [r1, #4]
   2ef48:	sdiv	r5, r4, r1
   2ef4c:	mls	r6, r5, r1, r4
   2ef50:	cmp	r6, #0
   2ef54:	beq	2ef70 <GetDataSlab+0x75ac>
   2ef58:	ldr	r5, [r3, r0, lsl #2]
   2ef5c:	ldr	r3, [r9, r0, lsl #2]
   2ef60:	sub	r1, r1, r6
   2ef64:	mla	r1, r3, r5, r1
   2ef68:	add	r4, r1, r4
   2ef6c:	b	2ef8c <GetDataSlab+0x75c8>
   2ef70:	ldr	r1, [r9, r0, lsl #2]
   2ef74:	cmp	r1, #0
   2ef78:	beq	2ef90 <GetDataSlab+0x75cc>
   2ef7c:	sub	r3, fp, #176	; 0xb0
   2ef80:	ldr	r3, [r3, r0, lsl #2]
   2ef84:	mla	r4, r3, r1, r4
   2ef88:	mul	r1, r3, r1
   2ef8c:	add	sl, sl, r1, lsl #1
   2ef90:	ldr	r3, [fp, #24]
   2ef94:	add	r1, r0, #1
   2ef98:	add	r0, r0, #2
   2ef9c:	cmp	r0, r3
   2efa0:	blt	2ef14 <GetDataSlab+0x7550>
   2efa4:	b	2efb8 <GetDataSlab+0x75f4>
   2efa8:	ldr	r1, [sp, #44]	; 0x2c
   2efac:	ldr	r0, [r1, r0, lsl #2]
   2efb0:	add	sl, sl, r0, lsl #1
   2efb4:	add	r4, r0, r4
   2efb8:	ldr	r1, [sp, #56]	; 0x38
   2efbc:	add	lr, r2, lr
   2efc0:	mov	r0, #0
   2efc4:	cmp	lr, r1
   2efc8:	blt	2ee98 <GetDataSlab+0x74d4>
   2efcc:	b	47ffc <GetDataSlab+0x20638>
   2efd0:	ldr	r5, [r3]
   2efd4:	ldr	r9, [fp, #8]
   2efd8:	ldr	r8, [fp, #12]
   2efdc:	mov	r4, #0
   2efe0:	sub	r3, fp, #176	; 0xb0
   2efe4:	sub	r0, r5, #1
   2efe8:	str	r0, [fp, #-96]	; 0xffffffa0
   2efec:	ldr	r0, [r9]
   2eff0:	str	r0, [fp, #-176]	; 0xffffff50
   2eff4:	str	r0, [sp, #52]	; 0x34
   2eff8:	ldr	r0, [fp, #24]
   2effc:	ldr	r2, [sl]
   2f000:	sub	sl, fp, #96	; 0x60
   2f004:	cmp	r0, #2
   2f008:	mov	r0, r2
   2f00c:	str	r2, [sp, #56]	; 0x38
   2f010:	blt	2f174 <GetDataSlab+0x77b0>
   2f014:	ldr	r7, [sp, #52]	; 0x34
   2f018:	sub	r0, r9, #4
   2f01c:	sub	r6, r9, #12
   2f020:	mov	ip, #1
   2f024:	mov	lr, #0
   2f028:	mov	r4, #0
   2f02c:	str	r2, [sp, #56]	; 0x38
   2f030:	mov	r1, r7
   2f034:	str	r7, [sp, #44]	; 0x2c
   2f038:	mov	r1, r2
   2f03c:	ldr	r1, [fp, #16]
   2f040:	add	lr, lr, #1
   2f044:	str	r6, [sp, #40]	; 0x28
   2f048:	cmp	lr, #4
   2f04c:	str	lr, [sp, #36]	; 0x24
   2f050:	ldr	r1, [r1, ip, lsl #2]
   2f054:	str	r7, [r3, ip, lsl #2]
   2f058:	sub	r8, r1, #1
   2f05c:	str	r8, [sl, ip, lsl #2]
   2f060:	ldr	r1, [r9, ip, lsl #2]
   2f064:	str	r1, [sp, #32]
   2f068:	bcs	2f074 <GetDataSlab+0x76b0>
   2f06c:	mov	r3, ip
   2f070:	b	2f108 <GetDataSlab+0x7744>
   2f074:	vmov.i32	q9, #1	; 0x00000001
   2f078:	vmov.i32	q10, #1	; 0x00000001
   2f07c:	vmov.i32	q8, #1	; 0x00000001
   2f080:	bic	sl, lr, #3
   2f084:	vmov.32	d23[1], r1
   2f088:	bic	r9, ip, #3
   2f08c:	mov	r1, r6
   2f090:	vmov.32	d18[0], r7
   2f094:	vmov.32	d20[0], r8
   2f098:	sub	r3, ip, sl
   2f09c:	mvn	r7, #15
   2f0a0:	vorr	d16, d18, d18
   2f0a4:	vmov.i32	q9, #1	; 0x00000001
   2f0a8:	vorr	d18, d20, d20
   2f0ac:	vld1.32	{d20-d21}, [r1], r7
   2f0b0:	subs	r9, r9, #4
   2f0b4:	vrev64.32	q12, q10
   2f0b8:	vext.8	q12, q12, q12, #8
   2f0bc:	vext.8	q11, q11, q12, #12
   2f0c0:	vmul.i32	q9, q9, q12
   2f0c4:	vmul.i32	q8, q11, q8
   2f0c8:	vorr	q11, q12, q12
   2f0cc:	bne	2f0ac <GetDataSlab+0x76e8>
   2f0d0:	vext.8	q11, q9, q8, #8
   2f0d4:	vext.8	q12, q8, q8, #8
   2f0d8:	cmp	lr, sl
   2f0dc:	vmul.i32	q0, q9, q11
   2f0e0:	vmul.i32	q1, q8, q12
   2f0e4:	vmul.i32	q8, q0, d0[1]
   2f0e8:	vmul.i32	q9, q1, d2[1]
   2f0ec:	vmov.32	r8, d16[0]
   2f0f0:	vmov.32	r7, d18[0]
   2f0f4:	bne	2f100 <GetDataSlab+0x773c>
   2f0f8:	ldr	r9, [fp, #8]
   2f0fc:	b	2f11c <GetDataSlab+0x7758>
   2f100:	ldr	r9, [fp, #8]
   2f104:	vmov.32	r1, d20[0]
   2f108:	mul	r7, r1, r7
   2f10c:	ldr	r1, [r0, r3, lsl #2]
   2f110:	subs	r3, r3, #1
   2f114:	mul	r8, r8, r1
   2f118:	bne	2f108 <GetDataSlab+0x7744>
   2f11c:	sub	sl, fp, #96	; 0x60
   2f120:	sub	r3, fp, #176	; 0xb0
   2f124:	ldr	r6, [sp, #44]	; 0x2c
   2f128:	ldr	lr, [sp, #56]	; 0x38
   2f12c:	str	r7, [sp, #44]	; 0x2c
   2f130:	str	r8, [sl, ip, lsl #2]
   2f134:	ldr	r8, [fp, #12]
   2f138:	str	r7, [r3, ip, lsl #2]
   2f13c:	ldr	r7, [sp, #32]
   2f140:	ldr	r1, [r8, ip, lsl #2]
   2f144:	mla	r4, r1, r6, r4
   2f148:	ldr	r1, [fp, #20]
   2f14c:	ldr	r6, [sp, #40]	; 0x28
   2f150:	ldr	r1, [r1, ip, lsl #2]
   2f154:	add	ip, ip, #1
   2f158:	add	r6, r6, #4
   2f15c:	mul	lr, r1, lr
   2f160:	ldr	r1, [fp, #24]
   2f164:	str	lr, [sp, #56]	; 0x38
   2f168:	ldr	lr, [sp, #36]	; 0x24
   2f16c:	cmp	ip, r1
   2f170:	bne	2f03c <GetDataSlab+0x7678>
   2f174:	ldr	r0, [sp, #48]	; 0x30
   2f178:	cmp	r5, #1
   2f17c:	add	sl, r0, r4, lsl #1
   2f180:	bne	3ed68 <GetDataSlab+0x173a4>
   2f184:	ldr	r0, [sp, #56]	; 0x38
   2f188:	cmp	r0, #1
   2f18c:	blt	2a430 <GetDataSlab+0x2a6c>
   2f190:	ldr	r0, [fp, #20]
   2f194:	mov	r9, r8
   2f198:	mov	lr, #0
   2f19c:	add	ip, r0, #4
   2f1a0:	sub	r0, fp, #136	; 0x88
   2f1a4:	orr	r7, r0, #4
   2f1a8:	sub	r0, fp, #96	; 0x60
   2f1ac:	orr	r0, r0, #4
   2f1b0:	str	r0, [sp, #44]	; 0x2c
   2f1b4:	ldr	r0, [r9], #4
   2f1b8:	str	r0, [sp, #48]	; 0x30
   2f1bc:	ldr	r3, [sp, #48]	; 0x30
   2f1c0:	ldr	r1, [sp, #52]	; 0x34
   2f1c4:	cmp	r2, #1
   2f1c8:	add	r8, r3, r4
   2f1cc:	add	r0, sl, r3, lsl #1
   2f1d0:	blt	2f210 <GetDataSlab+0x784c>
   2f1d4:	ldr	r1, [sp, #60]	; 0x3c
   2f1d8:	ldr	r5, [fp, #20]
   2f1dc:	mov	r3, r0
   2f1e0:	add	r4, r1, lr
   2f1e4:	mov	r1, #0
   2f1e8:	ldrb	r2, [r3], #2
   2f1ec:	strb	r2, [r4, r1]
   2f1f0:	add	r1, r1, #1
   2f1f4:	ldr	r2, [r5]
   2f1f8:	cmp	r1, r2
   2f1fc:	blt	2f1e8 <GetDataSlab+0x7824>
   2f200:	ldr	r1, [fp, #12]
   2f204:	ldr	r3, [r1]
   2f208:	ldr	r1, [fp, #8]
   2f20c:	ldr	r1, [r1]
   2f210:	str	r1, [sp, #52]	; 0x34
   2f214:	sub	r1, r1, r3
   2f218:	str	r3, [sp, #48]	; 0x30
   2f21c:	add	sl, r0, r1, lsl #1
   2f220:	ldr	r0, [fp, #24]
   2f224:	add	r4, r8, r1
   2f228:	cmp	r0, #2
   2f22c:	blt	2f2dc <GetDataSlab+0x7918>
   2f230:	mov	r1, #0
   2f234:	mov	r8, #0
   2f238:	mov	r0, r1
   2f23c:	ldr	r1, [r7, r1, lsl #2]
   2f240:	add	r1, r1, #1
   2f244:	str	r1, [r7, r0, lsl #2]
   2f248:	ldr	r6, [ip, r0, lsl #2]
   2f24c:	sdiv	r5, r1, r6
   2f250:	mls	r1, r5, r6, r1
   2f254:	cmp	r1, #0
   2f258:	bne	2f2cc <GetDataSlab+0x7908>
   2f25c:	sub	r3, fp, #176	; 0xb0
   2f260:	str	r8, [r7, r0, lsl #2]
   2f264:	add	r1, r3, r0, lsl #2
   2f268:	ldr	r1, [r1, #4]
   2f26c:	sdiv	r5, r4, r1
   2f270:	mls	r6, r5, r1, r4
   2f274:	cmp	r6, #0
   2f278:	beq	2f294 <GetDataSlab+0x78d0>
   2f27c:	ldr	r5, [r3, r0, lsl #2]
   2f280:	ldr	r3, [r9, r0, lsl #2]
   2f284:	sub	r1, r1, r6
   2f288:	mla	r1, r3, r5, r1
   2f28c:	add	r4, r1, r4
   2f290:	b	2f2b0 <GetDataSlab+0x78ec>
   2f294:	ldr	r1, [r9, r0, lsl #2]
   2f298:	cmp	r1, #0
   2f29c:	beq	2f2b4 <GetDataSlab+0x78f0>
   2f2a0:	sub	r3, fp, #176	; 0xb0
   2f2a4:	ldr	r3, [r3, r0, lsl #2]
   2f2a8:	mla	r4, r3, r1, r4
   2f2ac:	mul	r1, r3, r1
   2f2b0:	add	sl, sl, r1, lsl #1
   2f2b4:	ldr	r3, [fp, #24]
   2f2b8:	add	r1, r0, #1
   2f2bc:	add	r0, r0, #2
   2f2c0:	cmp	r0, r3
   2f2c4:	blt	2f238 <GetDataSlab+0x7874>
   2f2c8:	b	2f2dc <GetDataSlab+0x7918>
   2f2cc:	ldr	r1, [sp, #44]	; 0x2c
   2f2d0:	ldr	r0, [r1, r0, lsl #2]
   2f2d4:	add	sl, sl, r0, lsl #1
   2f2d8:	add	r4, r0, r4
   2f2dc:	ldr	r1, [sp, #56]	; 0x38
   2f2e0:	add	lr, r2, lr
   2f2e4:	mov	r0, #0
   2f2e8:	cmp	lr, r1
   2f2ec:	blt	2f1bc <GetDataSlab+0x77f8>
   2f2f0:	b	47ffc <GetDataSlab+0x20638>
   2f2f4:	ldr	r5, [r3]
   2f2f8:	ldr	r9, [fp, #8]
   2f2fc:	ldr	r8, [fp, #12]
   2f300:	mov	r4, #0
   2f304:	sub	r3, fp, #176	; 0xb0
   2f308:	sub	r0, r5, #1
   2f30c:	str	r0, [fp, #-96]	; 0xffffffa0
   2f310:	ldr	r0, [r9]
   2f314:	str	r0, [fp, #-176]	; 0xffffff50
   2f318:	str	r0, [sp, #52]	; 0x34
   2f31c:	ldr	r0, [fp, #24]
   2f320:	ldr	r2, [sl]
   2f324:	sub	sl, fp, #96	; 0x60
   2f328:	cmp	r0, #2
   2f32c:	mov	r0, r2
   2f330:	str	r2, [sp, #56]	; 0x38
   2f334:	blt	2f498 <GetDataSlab+0x7ad4>
   2f338:	ldr	r7, [sp, #52]	; 0x34
   2f33c:	sub	r0, r9, #4
   2f340:	sub	r6, r9, #12
   2f344:	mov	ip, #1
   2f348:	mov	lr, #0
   2f34c:	mov	r4, #0
   2f350:	str	r2, [sp, #56]	; 0x38
   2f354:	mov	r1, r7
   2f358:	str	r7, [sp, #44]	; 0x2c
   2f35c:	mov	r1, r2
   2f360:	ldr	r1, [fp, #16]
   2f364:	add	lr, lr, #1
   2f368:	str	r6, [sp, #40]	; 0x28
   2f36c:	cmp	lr, #4
   2f370:	str	lr, [sp, #36]	; 0x24
   2f374:	ldr	r1, [r1, ip, lsl #2]
   2f378:	str	r7, [r3, ip, lsl #2]
   2f37c:	sub	r8, r1, #1
   2f380:	str	r8, [sl, ip, lsl #2]
   2f384:	ldr	r1, [r9, ip, lsl #2]
   2f388:	str	r1, [sp, #32]
   2f38c:	bcs	2f398 <GetDataSlab+0x79d4>
   2f390:	mov	r3, ip
   2f394:	b	2f42c <GetDataSlab+0x7a68>
   2f398:	vmov.i32	q9, #1	; 0x00000001
   2f39c:	vmov.i32	q10, #1	; 0x00000001
   2f3a0:	vmov.i32	q8, #1	; 0x00000001
   2f3a4:	bic	sl, lr, #3
   2f3a8:	vmov.32	d23[1], r1
   2f3ac:	bic	r9, ip, #3
   2f3b0:	mov	r1, r6
   2f3b4:	vmov.32	d18[0], r7
   2f3b8:	vmov.32	d20[0], r8
   2f3bc:	sub	r3, ip, sl
   2f3c0:	mvn	r7, #15
   2f3c4:	vorr	d16, d18, d18
   2f3c8:	vmov.i32	q9, #1	; 0x00000001
   2f3cc:	vorr	d18, d20, d20
   2f3d0:	vld1.32	{d20-d21}, [r1], r7
   2f3d4:	subs	r9, r9, #4
   2f3d8:	vrev64.32	q12, q10
   2f3dc:	vext.8	q12, q12, q12, #8
   2f3e0:	vext.8	q11, q11, q12, #12
   2f3e4:	vmul.i32	q9, q9, q12
   2f3e8:	vmul.i32	q8, q11, q8
   2f3ec:	vorr	q11, q12, q12
   2f3f0:	bne	2f3d0 <GetDataSlab+0x7a0c>
   2f3f4:	vext.8	q11, q9, q8, #8
   2f3f8:	vext.8	q12, q8, q8, #8
   2f3fc:	cmp	lr, sl
   2f400:	vmul.i32	q0, q9, q11
   2f404:	vmul.i32	q1, q8, q12
   2f408:	vmul.i32	q8, q0, d0[1]
   2f40c:	vmul.i32	q9, q1, d2[1]
   2f410:	vmov.32	r8, d16[0]
   2f414:	vmov.32	r7, d18[0]
   2f418:	bne	2f424 <GetDataSlab+0x7a60>
   2f41c:	ldr	r9, [fp, #8]
   2f420:	b	2f440 <GetDataSlab+0x7a7c>
   2f424:	ldr	r9, [fp, #8]
   2f428:	vmov.32	r1, d20[0]
   2f42c:	mul	r7, r1, r7
   2f430:	ldr	r1, [r0, r3, lsl #2]
   2f434:	subs	r3, r3, #1
   2f438:	mul	r8, r8, r1
   2f43c:	bne	2f42c <GetDataSlab+0x7a68>
   2f440:	sub	sl, fp, #96	; 0x60
   2f444:	sub	r3, fp, #176	; 0xb0
   2f448:	ldr	r6, [sp, #44]	; 0x2c
   2f44c:	ldr	lr, [sp, #56]	; 0x38
   2f450:	str	r7, [sp, #44]	; 0x2c
   2f454:	str	r8, [sl, ip, lsl #2]
   2f458:	ldr	r8, [fp, #12]
   2f45c:	str	r7, [r3, ip, lsl #2]
   2f460:	ldr	r7, [sp, #32]
   2f464:	ldr	r1, [r8, ip, lsl #2]
   2f468:	mla	r4, r1, r6, r4
   2f46c:	ldr	r1, [fp, #20]
   2f470:	ldr	r6, [sp, #40]	; 0x28
   2f474:	ldr	r1, [r1, ip, lsl #2]
   2f478:	add	ip, ip, #1
   2f47c:	add	r6, r6, #4
   2f480:	mul	lr, r1, lr
   2f484:	ldr	r1, [fp, #24]
   2f488:	str	lr, [sp, #56]	; 0x38
   2f48c:	ldr	lr, [sp, #36]	; 0x24
   2f490:	cmp	ip, r1
   2f494:	bne	2f360 <GetDataSlab+0x799c>
   2f498:	ldr	r0, [sp, #48]	; 0x30
   2f49c:	cmp	r5, #1
   2f4a0:	add	sl, r0, r4, lsl #2
   2f4a4:	bne	3ef04 <GetDataSlab+0x17540>
   2f4a8:	ldr	r0, [sp, #56]	; 0x38
   2f4ac:	cmp	r0, #1
   2f4b0:	blt	2a430 <GetDataSlab+0x2a6c>
   2f4b4:	ldr	r0, [fp, #20]
   2f4b8:	mov	r9, r8
   2f4bc:	mov	r8, #0
   2f4c0:	add	ip, r0, #4
   2f4c4:	sub	r0, fp, #136	; 0x88
   2f4c8:	orr	r7, r0, #4
   2f4cc:	sub	r0, fp, #96	; 0x60
   2f4d0:	orr	r0, r0, #4
   2f4d4:	str	r0, [sp, #44]	; 0x2c
   2f4d8:	ldr	r0, [r9], #4
   2f4dc:	str	r0, [sp, #48]	; 0x30
   2f4e0:	ldr	r6, [sp, #48]	; 0x30
   2f4e4:	ldr	r1, [sp, #52]	; 0x34
   2f4e8:	cmp	r2, #1
   2f4ec:	add	r0, r6, r4
   2f4f0:	add	r3, sl, r6, lsl #2
   2f4f4:	blt	2f530 <GetDataSlab+0x7b6c>
   2f4f8:	ldr	r1, [sp, #60]	; 0x3c
   2f4fc:	ldr	r6, [fp, #20]
   2f500:	mov	r4, #0
   2f504:	add	r1, r1, r8
   2f508:	ldr	r2, [r3, r4, lsl #2]
   2f50c:	strb	r2, [r1, r4]
   2f510:	add	r4, r4, #1
   2f514:	ldr	r2, [r6]
   2f518:	cmp	r4, r2
   2f51c:	blt	2f508 <GetDataSlab+0x7b44>
   2f520:	ldr	r1, [fp, #12]
   2f524:	ldr	r6, [r1]
   2f528:	ldr	r1, [fp, #8]
   2f52c:	ldr	r1, [r1]
   2f530:	str	r1, [sp, #52]	; 0x34
   2f534:	sub	r1, r1, r6
   2f538:	str	r6, [sp, #48]	; 0x30
   2f53c:	add	r4, r0, r1
   2f540:	ldr	r0, [fp, #24]
   2f544:	add	sl, r3, r1, lsl #2
   2f548:	cmp	r0, #2
   2f54c:	blt	2f5f8 <GetDataSlab+0x7c34>
   2f550:	mov	r1, #0
   2f554:	mov	r0, r1
   2f558:	ldr	r1, [r7, r1, lsl #2]
   2f55c:	add	r1, r1, #1
   2f560:	str	r1, [r7, r0, lsl #2]
   2f564:	ldr	r6, [ip, r0, lsl #2]
   2f568:	sdiv	lr, r1, r6
   2f56c:	mls	r1, lr, r6, r1
   2f570:	cmp	r1, #0
   2f574:	bne	2f5e8 <GetDataSlab+0x7c24>
   2f578:	mov	r1, #0
   2f57c:	sub	r3, fp, #176	; 0xb0
   2f580:	str	r1, [r7, r0, lsl #2]
   2f584:	add	r1, r3, r0, lsl #2
   2f588:	ldr	r1, [r1, #4]
   2f58c:	sdiv	r6, r4, r1
   2f590:	mls	r6, r6, r1, r4
   2f594:	cmp	r6, #0
   2f598:	beq	2f5b4 <GetDataSlab+0x7bf0>
   2f59c:	ldr	r5, [r3, r0, lsl #2]
   2f5a0:	ldr	r3, [r9, r0, lsl #2]
   2f5a4:	sub	r1, r1, r6
   2f5a8:	mla	r1, r3, r5, r1
   2f5ac:	add	r4, r1, r4
   2f5b0:	b	2f5cc <GetDataSlab+0x7c08>
   2f5b4:	ldr	r1, [r9, r0, lsl #2]
   2f5b8:	cmp	r1, #0
   2f5bc:	beq	2f5d0 <GetDataSlab+0x7c0c>
   2f5c0:	ldr	r3, [r3, r0, lsl #2]
   2f5c4:	mla	r4, r3, r1, r4
   2f5c8:	mul	r1, r3, r1
   2f5cc:	add	sl, sl, r1, lsl #2
   2f5d0:	ldr	r3, [fp, #24]
   2f5d4:	add	r1, r0, #1
   2f5d8:	add	r0, r0, #2
   2f5dc:	cmp	r0, r3
   2f5e0:	blt	2f554 <GetDataSlab+0x7b90>
   2f5e4:	b	2f5f8 <GetDataSlab+0x7c34>
   2f5e8:	ldr	r1, [sp, #44]	; 0x2c
   2f5ec:	ldr	r0, [r1, r0, lsl #2]
   2f5f0:	add	sl, sl, r0, lsl #2
   2f5f4:	add	r4, r0, r4
   2f5f8:	ldr	r1, [sp, #56]	; 0x38
   2f5fc:	add	r8, r2, r8
   2f600:	mov	r0, #0
   2f604:	cmp	r8, r1
   2f608:	blt	2f4e0 <GetDataSlab+0x7b1c>
   2f60c:	b	47ffc <GetDataSlab+0x20638>
   2f610:	ldr	r5, [r3]
   2f614:	ldr	r9, [fp, #8]
   2f618:	ldr	r8, [fp, #12]
   2f61c:	mov	r4, #0
   2f620:	sub	r3, fp, #176	; 0xb0
   2f624:	sub	r0, r5, #1
   2f628:	str	r0, [fp, #-96]	; 0xffffffa0
   2f62c:	ldr	r0, [r9]
   2f630:	str	r0, [fp, #-176]	; 0xffffff50
   2f634:	str	r0, [sp, #52]	; 0x34
   2f638:	ldr	r0, [fp, #24]
   2f63c:	ldr	r2, [sl]
   2f640:	sub	sl, fp, #96	; 0x60
   2f644:	cmp	r0, #2
   2f648:	mov	r0, r2
   2f64c:	str	r2, [sp, #56]	; 0x38
   2f650:	blt	2f7b4 <GetDataSlab+0x7df0>
   2f654:	ldr	r7, [sp, #52]	; 0x34
   2f658:	sub	r0, r9, #4
   2f65c:	sub	r6, r9, #12
   2f660:	mov	ip, #1
   2f664:	mov	lr, #0
   2f668:	mov	r4, #0
   2f66c:	str	r2, [sp, #56]	; 0x38
   2f670:	mov	r1, r7
   2f674:	str	r7, [sp, #44]	; 0x2c
   2f678:	mov	r1, r2
   2f67c:	ldr	r1, [fp, #16]
   2f680:	add	lr, lr, #1
   2f684:	str	r6, [sp, #40]	; 0x28
   2f688:	cmp	lr, #4
   2f68c:	str	lr, [sp, #36]	; 0x24
   2f690:	ldr	r1, [r1, ip, lsl #2]
   2f694:	str	r7, [r3, ip, lsl #2]
   2f698:	sub	r8, r1, #1
   2f69c:	str	r8, [sl, ip, lsl #2]
   2f6a0:	ldr	r1, [r9, ip, lsl #2]
   2f6a4:	str	r1, [sp, #32]
   2f6a8:	bcs	2f6b4 <GetDataSlab+0x7cf0>
   2f6ac:	mov	r3, ip
   2f6b0:	b	2f748 <GetDataSlab+0x7d84>
   2f6b4:	vmov.i32	q9, #1	; 0x00000001
   2f6b8:	vmov.i32	q10, #1	; 0x00000001
   2f6bc:	vmov.i32	q8, #1	; 0x00000001
   2f6c0:	bic	sl, lr, #3
   2f6c4:	vmov.32	d23[1], r1
   2f6c8:	bic	r9, ip, #3
   2f6cc:	mov	r1, r6
   2f6d0:	vmov.32	d18[0], r7
   2f6d4:	vmov.32	d20[0], r8
   2f6d8:	sub	r3, ip, sl
   2f6dc:	mvn	r7, #15
   2f6e0:	vorr	d16, d18, d18
   2f6e4:	vmov.i32	q9, #1	; 0x00000001
   2f6e8:	vorr	d18, d20, d20
   2f6ec:	vld1.32	{d20-d21}, [r1], r7
   2f6f0:	subs	r9, r9, #4
   2f6f4:	vrev64.32	q12, q10
   2f6f8:	vext.8	q12, q12, q12, #8
   2f6fc:	vext.8	q11, q11, q12, #12
   2f700:	vmul.i32	q9, q9, q12
   2f704:	vmul.i32	q8, q11, q8
   2f708:	vorr	q11, q12, q12
   2f70c:	bne	2f6ec <GetDataSlab+0x7d28>
   2f710:	vext.8	q11, q9, q8, #8
   2f714:	vext.8	q12, q8, q8, #8
   2f718:	cmp	lr, sl
   2f71c:	vmul.i32	q0, q9, q11
   2f720:	vmul.i32	q1, q8, q12
   2f724:	vmul.i32	q8, q0, d0[1]
   2f728:	vmul.i32	q9, q1, d2[1]
   2f72c:	vmov.32	r8, d16[0]
   2f730:	vmov.32	r7, d18[0]
   2f734:	bne	2f740 <GetDataSlab+0x7d7c>
   2f738:	ldr	r9, [fp, #8]
   2f73c:	b	2f75c <GetDataSlab+0x7d98>
   2f740:	ldr	r9, [fp, #8]
   2f744:	vmov.32	r1, d20[0]
   2f748:	mul	r7, r1, r7
   2f74c:	ldr	r1, [r0, r3, lsl #2]
   2f750:	subs	r3, r3, #1
   2f754:	mul	r8, r8, r1
   2f758:	bne	2f748 <GetDataSlab+0x7d84>
   2f75c:	sub	sl, fp, #96	; 0x60
   2f760:	sub	r3, fp, #176	; 0xb0
   2f764:	ldr	r6, [sp, #44]	; 0x2c
   2f768:	ldr	lr, [sp, #56]	; 0x38
   2f76c:	str	r7, [sp, #44]	; 0x2c
   2f770:	str	r8, [sl, ip, lsl #2]
   2f774:	ldr	r8, [fp, #12]
   2f778:	str	r7, [r3, ip, lsl #2]
   2f77c:	ldr	r7, [sp, #32]
   2f780:	ldr	r1, [r8, ip, lsl #2]
   2f784:	mla	r4, r1, r6, r4
   2f788:	ldr	r1, [fp, #20]
   2f78c:	ldr	r6, [sp, #40]	; 0x28
   2f790:	ldr	r1, [r1, ip, lsl #2]
   2f794:	add	ip, ip, #1
   2f798:	add	r6, r6, #4
   2f79c:	mul	lr, r1, lr
   2f7a0:	ldr	r1, [fp, #24]
   2f7a4:	str	lr, [sp, #56]	; 0x38
   2f7a8:	ldr	lr, [sp, #36]	; 0x24
   2f7ac:	cmp	ip, r1
   2f7b0:	bne	2f67c <GetDataSlab+0x7cb8>
   2f7b4:	ldr	r0, [sp, #48]	; 0x30
   2f7b8:	cmp	r5, #1
   2f7bc:	add	sl, r0, r4, lsl #2
   2f7c0:	bne	3f0a0 <GetDataSlab+0x176dc>
   2f7c4:	ldr	r0, [sp, #56]	; 0x38
   2f7c8:	cmp	r0, #1
   2f7cc:	blt	2a430 <GetDataSlab+0x2a6c>
   2f7d0:	ldr	r0, [fp, #20]
   2f7d4:	mov	r9, r8
   2f7d8:	mov	r8, #0
   2f7dc:	add	ip, r0, #4
   2f7e0:	sub	r0, fp, #136	; 0x88
   2f7e4:	orr	r7, r0, #4
   2f7e8:	sub	r0, fp, #96	; 0x60
   2f7ec:	orr	r0, r0, #4
   2f7f0:	str	r0, [sp, #44]	; 0x2c
   2f7f4:	ldr	r0, [r9], #4
   2f7f8:	str	r0, [sp, #48]	; 0x30
   2f7fc:	ldr	r6, [sp, #48]	; 0x30
   2f800:	ldr	r1, [sp, #52]	; 0x34
   2f804:	cmp	r2, #1
   2f808:	add	r0, r6, r4
   2f80c:	add	r3, sl, r6, lsl #2
   2f810:	blt	2f84c <GetDataSlab+0x7e88>
   2f814:	ldr	r1, [sp, #60]	; 0x3c
   2f818:	ldr	r6, [fp, #20]
   2f81c:	mov	r4, #0
   2f820:	add	r1, r1, r8
   2f824:	ldr	r2, [r3, r4, lsl #2]
   2f828:	strb	r2, [r1, r4]
   2f82c:	add	r4, r4, #1
   2f830:	ldr	r2, [r6]
   2f834:	cmp	r4, r2
   2f838:	blt	2f824 <GetDataSlab+0x7e60>
   2f83c:	ldr	r1, [fp, #12]
   2f840:	ldr	r6, [r1]
   2f844:	ldr	r1, [fp, #8]
   2f848:	ldr	r1, [r1]
   2f84c:	str	r1, [sp, #52]	; 0x34
   2f850:	sub	r1, r1, r6
   2f854:	str	r6, [sp, #48]	; 0x30
   2f858:	add	r4, r0, r1
   2f85c:	ldr	r0, [fp, #24]
   2f860:	add	sl, r3, r1, lsl #2
   2f864:	cmp	r0, #2
   2f868:	blt	2f914 <GetDataSlab+0x7f50>
   2f86c:	mov	r1, #0
   2f870:	mov	r0, r1
   2f874:	ldr	r1, [r7, r1, lsl #2]
   2f878:	add	r1, r1, #1
   2f87c:	str	r1, [r7, r0, lsl #2]
   2f880:	ldr	r6, [ip, r0, lsl #2]
   2f884:	sdiv	lr, r1, r6
   2f888:	mls	r1, lr, r6, r1
   2f88c:	cmp	r1, #0
   2f890:	bne	2f904 <GetDataSlab+0x7f40>
   2f894:	mov	r1, #0
   2f898:	sub	r3, fp, #176	; 0xb0
   2f89c:	str	r1, [r7, r0, lsl #2]
   2f8a0:	add	r1, r3, r0, lsl #2
   2f8a4:	ldr	r1, [r1, #4]
   2f8a8:	sdiv	r6, r4, r1
   2f8ac:	mls	r6, r6, r1, r4
   2f8b0:	cmp	r6, #0
   2f8b4:	beq	2f8d0 <GetDataSlab+0x7f0c>
   2f8b8:	ldr	r5, [r3, r0, lsl #2]
   2f8bc:	ldr	r3, [r9, r0, lsl #2]
   2f8c0:	sub	r1, r1, r6
   2f8c4:	mla	r1, r3, r5, r1
   2f8c8:	add	r4, r1, r4
   2f8cc:	b	2f8e8 <GetDataSlab+0x7f24>
   2f8d0:	ldr	r1, [r9, r0, lsl #2]
   2f8d4:	cmp	r1, #0
   2f8d8:	beq	2f8ec <GetDataSlab+0x7f28>
   2f8dc:	ldr	r3, [r3, r0, lsl #2]
   2f8e0:	mla	r4, r3, r1, r4
   2f8e4:	mul	r1, r3, r1
   2f8e8:	add	sl, sl, r1, lsl #2
   2f8ec:	ldr	r3, [fp, #24]
   2f8f0:	add	r1, r0, #1
   2f8f4:	add	r0, r0, #2
   2f8f8:	cmp	r0, r3
   2f8fc:	blt	2f870 <GetDataSlab+0x7eac>
   2f900:	b	2f914 <GetDataSlab+0x7f50>
   2f904:	ldr	r1, [sp, #44]	; 0x2c
   2f908:	ldr	r0, [r1, r0, lsl #2]
   2f90c:	add	sl, sl, r0, lsl #2
   2f910:	add	r4, r0, r4
   2f914:	ldr	r1, [sp, #56]	; 0x38
   2f918:	add	r8, r2, r8
   2f91c:	mov	r0, #0
   2f920:	cmp	r8, r1
   2f924:	blt	2f7fc <GetDataSlab+0x7e38>
   2f928:	b	47ffc <GetDataSlab+0x20638>
   2f92c:	ldr	r5, [r3]
   2f930:	ldr	r9, [fp, #8]
   2f934:	ldr	r8, [fp, #12]
   2f938:	mov	r4, #0
   2f93c:	sub	r3, fp, #176	; 0xb0
   2f940:	sub	r0, r5, #1
   2f944:	str	r0, [fp, #-96]	; 0xffffffa0
   2f948:	ldr	r0, [r9]
   2f94c:	str	r0, [fp, #-176]	; 0xffffff50
   2f950:	str	r0, [sp, #52]	; 0x34
   2f954:	ldr	r0, [fp, #24]
   2f958:	ldr	r2, [sl]
   2f95c:	sub	sl, fp, #96	; 0x60
   2f960:	cmp	r0, #2
   2f964:	mov	r0, r2
   2f968:	str	r2, [sp, #56]	; 0x38
   2f96c:	blt	2fad0 <GetDataSlab+0x810c>
   2f970:	ldr	r7, [sp, #52]	; 0x34
   2f974:	sub	r0, r9, #4
   2f978:	sub	r6, r9, #12
   2f97c:	mov	ip, #1
   2f980:	mov	lr, #0
   2f984:	mov	r4, #0
   2f988:	str	r2, [sp, #56]	; 0x38
   2f98c:	mov	r1, r7
   2f990:	str	r7, [sp, #44]	; 0x2c
   2f994:	mov	r1, r2
   2f998:	ldr	r1, [fp, #16]
   2f99c:	add	lr, lr, #1
   2f9a0:	str	r6, [sp, #40]	; 0x28
   2f9a4:	cmp	lr, #4
   2f9a8:	str	lr, [sp, #36]	; 0x24
   2f9ac:	ldr	r1, [r1, ip, lsl #2]
   2f9b0:	str	r7, [r3, ip, lsl #2]
   2f9b4:	sub	r8, r1, #1
   2f9b8:	str	r8, [sl, ip, lsl #2]
   2f9bc:	ldr	r1, [r9, ip, lsl #2]
   2f9c0:	str	r1, [sp, #32]
   2f9c4:	bcs	2f9d0 <GetDataSlab+0x800c>
   2f9c8:	mov	r3, ip
   2f9cc:	b	2fa64 <GetDataSlab+0x80a0>
   2f9d0:	vmov.i32	q9, #1	; 0x00000001
   2f9d4:	vmov.i32	q10, #1	; 0x00000001
   2f9d8:	vmov.i32	q8, #1	; 0x00000001
   2f9dc:	bic	sl, lr, #3
   2f9e0:	vmov.32	d23[1], r1
   2f9e4:	bic	r9, ip, #3
   2f9e8:	mov	r1, r6
   2f9ec:	vmov.32	d18[0], r7
   2f9f0:	vmov.32	d20[0], r8
   2f9f4:	sub	r3, ip, sl
   2f9f8:	mvn	r7, #15
   2f9fc:	vorr	d16, d18, d18
   2fa00:	vmov.i32	q9, #1	; 0x00000001
   2fa04:	vorr	d18, d20, d20
   2fa08:	vld1.32	{d20-d21}, [r1], r7
   2fa0c:	subs	r9, r9, #4
   2fa10:	vrev64.32	q12, q10
   2fa14:	vext.8	q12, q12, q12, #8
   2fa18:	vext.8	q11, q11, q12, #12
   2fa1c:	vmul.i32	q9, q9, q12
   2fa20:	vmul.i32	q8, q11, q8
   2fa24:	vorr	q11, q12, q12
   2fa28:	bne	2fa08 <GetDataSlab+0x8044>
   2fa2c:	vext.8	q11, q9, q8, #8
   2fa30:	vext.8	q12, q8, q8, #8
   2fa34:	cmp	lr, sl
   2fa38:	vmul.i32	q0, q9, q11
   2fa3c:	vmul.i32	q1, q8, q12
   2fa40:	vmul.i32	q8, q0, d0[1]
   2fa44:	vmul.i32	q9, q1, d2[1]
   2fa48:	vmov.32	r8, d16[0]
   2fa4c:	vmov.32	r7, d18[0]
   2fa50:	bne	2fa5c <GetDataSlab+0x8098>
   2fa54:	ldr	r9, [fp, #8]
   2fa58:	b	2fa78 <GetDataSlab+0x80b4>
   2fa5c:	ldr	r9, [fp, #8]
   2fa60:	vmov.32	r1, d20[0]
   2fa64:	mul	r7, r1, r7
   2fa68:	ldr	r1, [r0, r3, lsl #2]
   2fa6c:	subs	r3, r3, #1
   2fa70:	mul	r8, r8, r1
   2fa74:	bne	2fa64 <GetDataSlab+0x80a0>
   2fa78:	sub	sl, fp, #96	; 0x60
   2fa7c:	sub	r3, fp, #176	; 0xb0
   2fa80:	ldr	r6, [sp, #44]	; 0x2c
   2fa84:	ldr	lr, [sp, #56]	; 0x38
   2fa88:	str	r7, [sp, #44]	; 0x2c
   2fa8c:	str	r8, [sl, ip, lsl #2]
   2fa90:	ldr	r8, [fp, #12]
   2fa94:	str	r7, [r3, ip, lsl #2]
   2fa98:	ldr	r7, [sp, #32]
   2fa9c:	ldr	r1, [r8, ip, lsl #2]
   2faa0:	mla	r4, r1, r6, r4
   2faa4:	ldr	r1, [fp, #20]
   2faa8:	ldr	r6, [sp, #40]	; 0x28
   2faac:	ldr	r1, [r1, ip, lsl #2]
   2fab0:	add	ip, ip, #1
   2fab4:	add	r6, r6, #4
   2fab8:	mul	lr, r1, lr
   2fabc:	ldr	r1, [fp, #24]
   2fac0:	str	lr, [sp, #56]	; 0x38
   2fac4:	ldr	lr, [sp, #36]	; 0x24
   2fac8:	cmp	ip, r1
   2facc:	bne	2f998 <GetDataSlab+0x7fd4>
   2fad0:	ldr	r0, [sp, #48]	; 0x30
   2fad4:	cmp	r5, #1
   2fad8:	add	ip, r0, r4, lsl #2
   2fadc:	bne	3f23c <GetDataSlab+0x17878>
   2fae0:	ldr	r0, [sp, #56]	; 0x38
   2fae4:	cmp	r0, #1
   2fae8:	ldr	r0, [fp, #20]
   2faec:	blt	2a430 <GetDataSlab+0x2a6c>
   2faf0:	add	r9, r0, #4
   2faf4:	sub	r0, fp, #136	; 0x88
   2faf8:	mov	sl, r8
   2fafc:	mov	lr, #0
   2fb00:	orr	r7, r0, #4
   2fb04:	sub	r0, fp, #96	; 0x60
   2fb08:	orr	r0, r0, #4
   2fb0c:	str	r0, [sp, #44]	; 0x2c
   2fb10:	ldr	r0, [sl], #4
   2fb14:	str	r0, [sp, #48]	; 0x30
   2fb18:	ldr	r1, [sp, #48]	; 0x30
   2fb1c:	ldr	r0, [sp, #52]	; 0x34
   2fb20:	cmp	r2, #1
   2fb24:	add	r5, r1, r4
   2fb28:	add	r8, ip, r1, lsl #2
   2fb2c:	blt	2fb78 <GetDataSlab+0x81b4>
   2fb30:	ldr	r0, [sp, #60]	; 0x3c
   2fb34:	ldr	r6, [fp, #20]
   2fb38:	mov	r3, r8
   2fb3c:	add	r4, r0, lr
   2fb40:	mov	r0, #0
   2fb44:	vldr	s0, [r3]
   2fb48:	add	r3, r3, #4
   2fb4c:	vcvt.s32.f32	s0, s0
   2fb50:	vmov	r1, s0
   2fb54:	strb	r1, [r4, r0]
   2fb58:	add	r0, r0, #1
   2fb5c:	ldr	r2, [r6]
   2fb60:	cmp	r0, r2
   2fb64:	blt	2fb44 <GetDataSlab+0x8180>
   2fb68:	ldr	r0, [fp, #12]
   2fb6c:	ldr	r1, [r0]
   2fb70:	ldr	r0, [fp, #8]
   2fb74:	ldr	r0, [r0]
   2fb78:	str	r0, [sp, #52]	; 0x34
   2fb7c:	sub	r0, r0, r1
   2fb80:	str	r1, [sp, #48]	; 0x30
   2fb84:	add	ip, r8, r0, lsl #2
   2fb88:	add	r4, r5, r0
   2fb8c:	ldr	r0, [fp, #24]
   2fb90:	cmp	r0, #2
   2fb94:	blt	2fc44 <GetDataSlab+0x8280>
   2fb98:	mov	r6, #0
   2fb9c:	mov	r8, #0
   2fba0:	ldr	r1, [r7, r6, lsl #2]
   2fba4:	mov	r0, r6
   2fba8:	add	r1, r1, #1
   2fbac:	str	r1, [r7, r6, lsl #2]
   2fbb0:	ldr	r6, [r9, r6, lsl #2]
   2fbb4:	sdiv	r5, r1, r6
   2fbb8:	mls	r1, r5, r6, r1
   2fbbc:	cmp	r1, #0
   2fbc0:	bne	2fc34 <GetDataSlab+0x8270>
   2fbc4:	sub	r3, fp, #176	; 0xb0
   2fbc8:	str	r8, [r7, r0, lsl #2]
   2fbcc:	add	r1, r3, r0, lsl #2
   2fbd0:	ldr	r6, [r1, #4]
   2fbd4:	sdiv	r1, r4, r6
   2fbd8:	mls	r1, r1, r6, r4
   2fbdc:	cmp	r1, #0
   2fbe0:	beq	2fbfc <GetDataSlab+0x8238>
   2fbe4:	ldr	r5, [r3, r0, lsl #2]
   2fbe8:	ldr	r3, [sl, r0, lsl #2]
   2fbec:	sub	r1, r6, r1
   2fbf0:	mla	r1, r3, r5, r1
   2fbf4:	add	r4, r1, r4
   2fbf8:	b	2fc18 <GetDataSlab+0x8254>
   2fbfc:	ldr	r1, [sl, r0, lsl #2]
   2fc00:	cmp	r1, #0
   2fc04:	beq	2fc1c <GetDataSlab+0x8258>
   2fc08:	sub	r3, fp, #176	; 0xb0
   2fc0c:	ldr	r3, [r3, r0, lsl #2]
   2fc10:	mla	r4, r3, r1, r4
   2fc14:	mul	r1, r3, r1
   2fc18:	add	ip, ip, r1, lsl #2
   2fc1c:	ldr	r1, [fp, #24]
   2fc20:	add	r6, r0, #1
   2fc24:	add	r0, r0, #2
   2fc28:	cmp	r0, r1
   2fc2c:	blt	2fba0 <GetDataSlab+0x81dc>
   2fc30:	b	2fc44 <GetDataSlab+0x8280>
   2fc34:	ldr	r1, [sp, #44]	; 0x2c
   2fc38:	ldr	r0, [r1, r0, lsl #2]
   2fc3c:	add	ip, ip, r0, lsl #2
   2fc40:	add	r4, r0, r4
   2fc44:	ldr	r1, [sp, #56]	; 0x38
   2fc48:	add	lr, r2, lr
   2fc4c:	mov	r0, #0
   2fc50:	cmp	lr, r1
   2fc54:	blt	2fb18 <GetDataSlab+0x8154>
   2fc58:	b	47ffc <GetDataSlab+0x20638>
   2fc5c:	ldr	r5, [r3]
   2fc60:	ldr	r9, [fp, #8]
   2fc64:	ldr	r8, [fp, #12]
   2fc68:	mov	r4, #0
   2fc6c:	sub	r3, fp, #176	; 0xb0
   2fc70:	sub	r0, r5, #1
   2fc74:	str	r0, [fp, #-96]	; 0xffffffa0
   2fc78:	ldr	r0, [r9]
   2fc7c:	str	r0, [fp, #-176]	; 0xffffff50
   2fc80:	str	r0, [sp, #52]	; 0x34
   2fc84:	ldr	r0, [fp, #24]
   2fc88:	ldr	r2, [sl]
   2fc8c:	sub	sl, fp, #96	; 0x60
   2fc90:	cmp	r0, #2
   2fc94:	mov	r0, r2
   2fc98:	str	r2, [sp, #56]	; 0x38
   2fc9c:	blt	2fe00 <GetDataSlab+0x843c>
   2fca0:	ldr	r7, [sp, #52]	; 0x34
   2fca4:	sub	r0, r9, #4
   2fca8:	sub	r6, r9, #12
   2fcac:	mov	ip, #1
   2fcb0:	mov	lr, #0
   2fcb4:	mov	r4, #0
   2fcb8:	str	r2, [sp, #56]	; 0x38
   2fcbc:	mov	r1, r7
   2fcc0:	str	r7, [sp, #44]	; 0x2c
   2fcc4:	mov	r1, r2
   2fcc8:	ldr	r1, [fp, #16]
   2fccc:	add	lr, lr, #1
   2fcd0:	str	r6, [sp, #40]	; 0x28
   2fcd4:	cmp	lr, #4
   2fcd8:	str	lr, [sp, #36]	; 0x24
   2fcdc:	ldr	r1, [r1, ip, lsl #2]
   2fce0:	str	r7, [r3, ip, lsl #2]
   2fce4:	sub	r8, r1, #1
   2fce8:	str	r8, [sl, ip, lsl #2]
   2fcec:	ldr	r1, [r9, ip, lsl #2]
   2fcf0:	str	r1, [sp, #32]
   2fcf4:	bcs	2fd00 <GetDataSlab+0x833c>
   2fcf8:	mov	r3, ip
   2fcfc:	b	2fd94 <GetDataSlab+0x83d0>
   2fd00:	vmov.i32	q9, #1	; 0x00000001
   2fd04:	vmov.i32	q10, #1	; 0x00000001
   2fd08:	vmov.i32	q8, #1	; 0x00000001
   2fd0c:	bic	sl, lr, #3
   2fd10:	vmov.32	d23[1], r1
   2fd14:	bic	r9, ip, #3
   2fd18:	mov	r1, r6
   2fd1c:	vmov.32	d18[0], r7
   2fd20:	vmov.32	d20[0], r8
   2fd24:	sub	r3, ip, sl
   2fd28:	mvn	r7, #15
   2fd2c:	vorr	d16, d18, d18
   2fd30:	vmov.i32	q9, #1	; 0x00000001
   2fd34:	vorr	d18, d20, d20
   2fd38:	vld1.32	{d20-d21}, [r1], r7
   2fd3c:	subs	r9, r9, #4
   2fd40:	vrev64.32	q12, q10
   2fd44:	vext.8	q12, q12, q12, #8
   2fd48:	vext.8	q11, q11, q12, #12
   2fd4c:	vmul.i32	q9, q9, q12
   2fd50:	vmul.i32	q8, q11, q8
   2fd54:	vorr	q11, q12, q12
   2fd58:	bne	2fd38 <GetDataSlab+0x8374>
   2fd5c:	vext.8	q11, q9, q8, #8
   2fd60:	vext.8	q12, q8, q8, #8
   2fd64:	cmp	lr, sl
   2fd68:	vmul.i32	q0, q9, q11
   2fd6c:	vmul.i32	q1, q8, q12
   2fd70:	vmul.i32	q8, q0, d0[1]
   2fd74:	vmul.i32	q9, q1, d2[1]
   2fd78:	vmov.32	r8, d16[0]
   2fd7c:	vmov.32	r7, d18[0]
   2fd80:	bne	2fd8c <GetDataSlab+0x83c8>
   2fd84:	ldr	r9, [fp, #8]
   2fd88:	b	2fda8 <GetDataSlab+0x83e4>
   2fd8c:	ldr	r9, [fp, #8]
   2fd90:	vmov.32	r1, d20[0]
   2fd94:	mul	r7, r1, r7
   2fd98:	ldr	r1, [r0, r3, lsl #2]
   2fd9c:	subs	r3, r3, #1
   2fda0:	mul	r8, r8, r1
   2fda4:	bne	2fd94 <GetDataSlab+0x83d0>
   2fda8:	sub	sl, fp, #96	; 0x60
   2fdac:	sub	r3, fp, #176	; 0xb0
   2fdb0:	ldr	r6, [sp, #44]	; 0x2c
   2fdb4:	ldr	lr, [sp, #56]	; 0x38
   2fdb8:	str	r7, [sp, #44]	; 0x2c
   2fdbc:	str	r8, [sl, ip, lsl #2]
   2fdc0:	ldr	r8, [fp, #12]
   2fdc4:	str	r7, [r3, ip, lsl #2]
   2fdc8:	ldr	r7, [sp, #32]
   2fdcc:	ldr	r1, [r8, ip, lsl #2]
   2fdd0:	mla	r4, r1, r6, r4
   2fdd4:	ldr	r1, [fp, #20]
   2fdd8:	ldr	r6, [sp, #40]	; 0x28
   2fddc:	ldr	r1, [r1, ip, lsl #2]
   2fde0:	add	ip, ip, #1
   2fde4:	add	r6, r6, #4
   2fde8:	mul	lr, r1, lr
   2fdec:	ldr	r1, [fp, #24]
   2fdf0:	str	lr, [sp, #56]	; 0x38
   2fdf4:	ldr	lr, [sp, #36]	; 0x24
   2fdf8:	cmp	ip, r1
   2fdfc:	bne	2fcc8 <GetDataSlab+0x8304>
   2fe00:	ldr	r0, [sp, #48]	; 0x30
   2fe04:	cmp	r5, #1
   2fe08:	add	ip, r0, r4, lsl #3
   2fe0c:	bne	3f3e0 <GetDataSlab+0x17a1c>
   2fe10:	ldr	r0, [sp, #56]	; 0x38
   2fe14:	cmp	r0, #1
   2fe18:	ldr	r0, [fp, #20]
   2fe1c:	blt	2a430 <GetDataSlab+0x2a6c>
   2fe20:	add	r9, r0, #4
   2fe24:	sub	r0, fp, #136	; 0x88
   2fe28:	mov	sl, r8
   2fe2c:	mov	lr, #0
   2fe30:	orr	r7, r0, #4
   2fe34:	sub	r0, fp, #96	; 0x60
   2fe38:	orr	r0, r0, #4
   2fe3c:	str	r0, [sp, #44]	; 0x2c
   2fe40:	ldr	r0, [sl], #4
   2fe44:	str	r0, [sp, #48]	; 0x30
   2fe48:	ldr	r1, [sp, #48]	; 0x30
   2fe4c:	ldr	r0, [sp, #52]	; 0x34
   2fe50:	cmp	r2, #1
   2fe54:	add	r5, r1, r4
   2fe58:	add	r8, ip, r1, lsl #3
   2fe5c:	blt	2fea8 <GetDataSlab+0x84e4>
   2fe60:	ldr	r0, [sp, #60]	; 0x3c
   2fe64:	ldr	r6, [fp, #20]
   2fe68:	mov	r3, r8
   2fe6c:	add	r4, r0, lr
   2fe70:	mov	r0, #0
   2fe74:	vldr	d16, [r3]
   2fe78:	add	r3, r3, #8
   2fe7c:	vcvt.s32.f64	s0, d16
   2fe80:	vmov	r1, s0
   2fe84:	strb	r1, [r4, r0]
   2fe88:	add	r0, r0, #1
   2fe8c:	ldr	r2, [r6]
   2fe90:	cmp	r0, r2
   2fe94:	blt	2fe74 <GetDataSlab+0x84b0>
   2fe98:	ldr	r0, [fp, #12]
   2fe9c:	ldr	r1, [r0]
   2fea0:	ldr	r0, [fp, #8]
   2fea4:	ldr	r0, [r0]
   2fea8:	str	r0, [sp, #52]	; 0x34
   2feac:	sub	r0, r0, r1
   2feb0:	str	r1, [sp, #48]	; 0x30
   2feb4:	add	ip, r8, r0, lsl #3
   2feb8:	add	r4, r5, r0
   2febc:	ldr	r0, [fp, #24]
   2fec0:	cmp	r0, #2
   2fec4:	blt	2ff74 <GetDataSlab+0x85b0>
   2fec8:	mov	r6, #0
   2fecc:	mov	r8, #0
   2fed0:	ldr	r1, [r7, r6, lsl #2]
   2fed4:	mov	r0, r6
   2fed8:	add	r1, r1, #1
   2fedc:	str	r1, [r7, r6, lsl #2]
   2fee0:	ldr	r6, [r9, r6, lsl #2]
   2fee4:	sdiv	r5, r1, r6
   2fee8:	mls	r1, r5, r6, r1
   2feec:	cmp	r1, #0
   2fef0:	bne	2ff64 <GetDataSlab+0x85a0>
   2fef4:	sub	r3, fp, #176	; 0xb0
   2fef8:	str	r8, [r7, r0, lsl #2]
   2fefc:	add	r1, r3, r0, lsl #2
   2ff00:	ldr	r6, [r1, #4]
   2ff04:	sdiv	r1, r4, r6
   2ff08:	mls	r1, r1, r6, r4
   2ff0c:	cmp	r1, #0
   2ff10:	beq	2ff2c <GetDataSlab+0x8568>
   2ff14:	ldr	r5, [r3, r0, lsl #2]
   2ff18:	ldr	r3, [sl, r0, lsl #2]
   2ff1c:	sub	r1, r6, r1
   2ff20:	mla	r1, r3, r5, r1
   2ff24:	add	r4, r1, r4
   2ff28:	b	2ff48 <GetDataSlab+0x8584>
   2ff2c:	ldr	r1, [sl, r0, lsl #2]
   2ff30:	cmp	r1, #0
   2ff34:	beq	2ff4c <GetDataSlab+0x8588>
   2ff38:	sub	r3, fp, #176	; 0xb0
   2ff3c:	ldr	r3, [r3, r0, lsl #2]
   2ff40:	mla	r4, r3, r1, r4
   2ff44:	mul	r1, r3, r1
   2ff48:	add	ip, ip, r1, lsl #3
   2ff4c:	ldr	r1, [fp, #24]
   2ff50:	add	r6, r0, #1
   2ff54:	add	r0, r0, #2
   2ff58:	cmp	r0, r1
   2ff5c:	blt	2fed0 <GetDataSlab+0x850c>
   2ff60:	b	2ff74 <GetDataSlab+0x85b0>
   2ff64:	ldr	r1, [sp, #44]	; 0x2c
   2ff68:	ldr	r0, [r1, r0, lsl #2]
   2ff6c:	add	ip, ip, r0, lsl #3
   2ff70:	add	r4, r0, r4
   2ff74:	ldr	r1, [sp, #56]	; 0x38
   2ff78:	add	lr, r2, lr
   2ff7c:	mov	r0, #0
   2ff80:	cmp	lr, r1
   2ff84:	blt	2fe48 <GetDataSlab+0x8484>
   2ff88:	b	47ffc <GetDataSlab+0x20638>
   2ff8c:	ldr	r5, [r3]
   2ff90:	mov	r3, #0
   2ff94:	sub	r8, fp, #176	; 0xb0
   2ff98:	str	r6, [sp, #40]	; 0x28
   2ff9c:	sub	r0, r5, #1
   2ffa0:	str	r0, [fp, #-96]	; 0xffffffa0
   2ffa4:	ldr	r0, [fp, #8]
   2ffa8:	ldr	r0, [r0]
   2ffac:	str	r0, [fp, #-176]	; 0xffffff50
   2ffb0:	str	r0, [sp, #28]
   2ffb4:	ldr	r0, [fp, #24]
   2ffb8:	ldr	r1, [sl]
   2ffbc:	sub	sl, fp, #96	; 0x60
   2ffc0:	cmp	r0, #2
   2ffc4:	mov	r0, r1
   2ffc8:	str	r1, [sp, #56]	; 0x38
   2ffcc:	blt	30134 <GetDataSlab+0x8770>
   2ffd0:	ldr	r0, [fp, #8]
   2ffd4:	ldr	r6, [sp, #28]
   2ffd8:	mov	lr, #1
   2ffdc:	mvn	ip, #15
   2ffe0:	mov	r3, #0
   2ffe4:	str	r1, [sp, #56]	; 0x38
   2ffe8:	sub	r2, r0, #4
   2ffec:	sub	r4, r0, #12
   2fff0:	mov	r0, #0
   2fff4:	mov	r7, r6
   2fff8:	str	r0, [sp, #52]	; 0x34
   2fffc:	mov	r0, r1
   30000:	ldr	r0, [fp, #16]
   30004:	str	r7, [sp, #44]	; 0x2c
   30008:	str	r4, [sp, #36]	; 0x24
   3000c:	ldr	r0, [r0, lr, lsl #2]
   30010:	str	r6, [r8, lr, lsl #2]
   30014:	sub	r9, r0, #1
   30018:	ldr	r0, [fp, #8]
   3001c:	str	r9, [sl, lr, lsl #2]
   30020:	ldr	sl, [sp, #52]	; 0x34
   30024:	ldr	r0, [r0, lr, lsl #2]
   30028:	add	sl, sl, #1
   3002c:	cmp	sl, #4
   30030:	str	sl, [sp, #52]	; 0x34
   30034:	str	r0, [sp, #32]
   30038:	bcs	30048 <GetDataSlab+0x8684>
   3003c:	mov	r7, r0
   30040:	mov	r0, lr
   30044:	b	300cc <GetDataSlab+0x8708>
   30048:	vmov.i32	q9, #1	; 0x00000001
   3004c:	vmov.i32	q10, #1	; 0x00000001
   30050:	vmov.i32	q8, #1	; 0x00000001
   30054:	bic	r7, sl, #3
   30058:	vmov.32	d23[1], r0
   3005c:	bic	r8, lr, #3
   30060:	vmov.32	d18[0], r6
   30064:	vmov.32	d20[0], r9
   30068:	sub	r0, lr, r7
   3006c:	mov	r6, r4
   30070:	vorr	d16, d18, d18
   30074:	vmov.i32	q9, #1	; 0x00000001
   30078:	vorr	d18, d20, d20
   3007c:	vld1.32	{d20-d21}, [r6], ip
   30080:	subs	r8, r8, #4
   30084:	vrev64.32	q12, q10
   30088:	vext.8	q12, q12, q12, #8
   3008c:	vext.8	q11, q11, q12, #12
   30090:	vmul.i32	q9, q9, q12
   30094:	vmul.i32	q8, q11, q8
   30098:	vorr	q11, q12, q12
   3009c:	bne	3007c <GetDataSlab+0x86b8>
   300a0:	vext.8	q11, q9, q8, #8
   300a4:	vext.8	q12, q8, q8, #8
   300a8:	cmp	sl, r7
   300ac:	vmul.i32	q0, q9, q11
   300b0:	vmul.i32	q1, q8, q12
   300b4:	vmul.i32	q8, q0, d0[1]
   300b8:	vmul.i32	q9, q1, d2[1]
   300bc:	vmov.32	r9, d16[0]
   300c0:	vmov.32	r6, d18[0]
   300c4:	beq	300e0 <GetDataSlab+0x871c>
   300c8:	vmov.32	r7, d20[0]
   300cc:	mul	r6, r7, r6
   300d0:	ldr	r7, [r2, r0, lsl #2]
   300d4:	subs	r0, r0, #1
   300d8:	mul	r9, r9, r7
   300dc:	bne	300cc <GetDataSlab+0x8708>
   300e0:	ldr	r0, [fp, #12]
   300e4:	sub	r8, fp, #176	; 0xb0
   300e8:	sub	sl, fp, #96	; 0x60
   300ec:	ldr	r4, [sp, #44]	; 0x2c
   300f0:	mov	r7, r6
   300f4:	str	r6, [r8, lr, lsl #2]
   300f8:	str	r9, [sl, lr, lsl #2]
   300fc:	ldr	r6, [sp, #32]
   30100:	ldr	r0, [r0, lr, lsl #2]
   30104:	mla	r3, r0, r4, r3
   30108:	ldr	r0, [fp, #20]
   3010c:	ldr	r4, [sp, #56]	; 0x38
   30110:	ldr	r0, [r0, lr, lsl #2]
   30114:	add	lr, lr, #1
   30118:	mul	r4, r0, r4
   3011c:	ldr	r0, [fp, #24]
   30120:	str	r4, [sp, #56]	; 0x38
   30124:	ldr	r4, [sp, #36]	; 0x24
   30128:	cmp	lr, r0
   3012c:	add	r4, r4, #4
   30130:	bne	30000 <GetDataSlab+0x863c>
   30134:	ldr	r0, [sp, #48]	; 0x30
   30138:	cmp	r5, #1
   3013c:	add	sl, r0, r3, lsl #3
   30140:	bne	3f584 <GetDataSlab+0x17bc0>
   30144:	ldr	r0, [sp, #56]	; 0x38
   30148:	cmp	r0, #1
   3014c:	blt	3f708 <GetDataSlab+0x17d44>
   30150:	ldr	r8, [fp, #12]
   30154:	ldr	r0, [fp, #20]
   30158:	mov	ip, #0
   3015c:	ldr	lr, [r8], #4
   30160:	add	r9, r0, #4
   30164:	sub	r0, fp, #136	; 0x88
   30168:	orr	r2, r0, #4
   3016c:	sub	r0, fp, #96	; 0x60
   30170:	orr	r0, r0, #4
   30174:	str	r0, [sp, #52]	; 0x34
   30178:	add	r6, lr, r3
   3017c:	add	r3, sl, lr, lsl #3
   30180:	cmp	r1, #1
   30184:	blt	301c8 <GetDataSlab+0x8804>
   30188:	ldr	r0, [sp, #60]	; 0x3c
   3018c:	ldr	r7, [fp, #20]
   30190:	mov	r4, r3
   30194:	add	r5, r0, ip
   30198:	mov	r0, #0
   3019c:	ldrb	r1, [r4], #8
   301a0:	strb	r1, [r5, r0]
   301a4:	add	r0, r0, #1
   301a8:	ldr	r1, [r7]
   301ac:	cmp	r0, r1
   301b0:	blt	3019c <GetDataSlab+0x87d8>
   301b4:	ldr	r0, [fp, #12]
   301b8:	ldr	lr, [r0]
   301bc:	ldr	r0, [fp, #8]
   301c0:	ldr	r0, [r0]
   301c4:	str	r0, [sp, #28]
   301c8:	ldr	r0, [sp, #28]
   301cc:	sub	r0, r0, lr
   301d0:	add	sl, r3, r0, lsl #3
   301d4:	add	r3, r6, r0
   301d8:	ldr	r0, [fp, #24]
   301dc:	cmp	r0, #2
   301e0:	blt	30290 <GetDataSlab+0x88cc>
   301e4:	mov	r0, #0
   301e8:	mov	r5, r0
   301ec:	ldr	r0, [r2, r0, lsl #2]
   301f0:	add	r0, r0, #1
   301f4:	str	r0, [r2, r5, lsl #2]
   301f8:	ldr	r7, [r9, r5, lsl #2]
   301fc:	sdiv	r6, r0, r7
   30200:	mls	r0, r6, r7, r0
   30204:	cmp	r0, #0
   30208:	bne	30280 <GetDataSlab+0x88bc>
   3020c:	mov	r0, #0
   30210:	sub	r4, fp, #176	; 0xb0
   30214:	str	r0, [r2, r5, lsl #2]
   30218:	add	r0, r4, r5, lsl #2
   3021c:	ldr	r0, [r0, #4]
   30220:	sdiv	r6, r3, r0
   30224:	mls	r7, r6, r0, r3
   30228:	cmp	r7, #0
   3022c:	beq	30248 <GetDataSlab+0x8884>
   30230:	ldr	r6, [r4, r5, lsl #2]
   30234:	ldr	r4, [r8, r5, lsl #2]
   30238:	sub	r0, r0, r7
   3023c:	mla	r0, r4, r6, r0
   30240:	add	r3, r0, r3
   30244:	b	30264 <GetDataSlab+0x88a0>
   30248:	ldr	r0, [r8, r5, lsl #2]
   3024c:	cmp	r0, #0
   30250:	beq	30268 <GetDataSlab+0x88a4>
   30254:	sub	r4, fp, #176	; 0xb0
   30258:	ldr	r4, [r4, r5, lsl #2]
   3025c:	mla	r3, r4, r0, r3
   30260:	mul	r0, r4, r0
   30264:	add	sl, sl, r0, lsl #3
   30268:	add	r0, r5, #1
   3026c:	add	r4, r5, #2
   30270:	ldr	r5, [fp, #24]
   30274:	cmp	r4, r5
   30278:	blt	301e8 <GetDataSlab+0x8824>
   3027c:	b	30290 <GetDataSlab+0x88cc>
   30280:	ldr	r0, [sp, #52]	; 0x34
   30284:	ldr	r0, [r0, r5, lsl #2]
   30288:	add	sl, sl, r0, lsl #3
   3028c:	add	r3, r0, r3
   30290:	ldr	r0, [sp, #56]	; 0x38
   30294:	add	ip, r1, ip
   30298:	cmp	ip, r0
   3029c:	blt	30178 <GetDataSlab+0x87b4>
   302a0:	b	3f708 <GetDataSlab+0x17d44>
   302a4:	ldr	r5, [r3]
   302a8:	ldr	r9, [fp, #8]
   302ac:	ldr	r8, [fp, #12]
   302b0:	mov	r4, #0
   302b4:	sub	r3, fp, #176	; 0xb0
   302b8:	sub	r0, r5, #1
   302bc:	str	r0, [fp, #-96]	; 0xffffffa0
   302c0:	ldr	r0, [r9]
   302c4:	str	r0, [fp, #-176]	; 0xffffff50
   302c8:	str	r0, [sp, #52]	; 0x34
   302cc:	ldr	r0, [fp, #24]
   302d0:	ldr	r2, [sl]
   302d4:	sub	sl, fp, #96	; 0x60
   302d8:	cmp	r0, #2
   302dc:	mov	r0, r2
   302e0:	str	r2, [sp, #56]	; 0x38
   302e4:	blt	30448 <GetDataSlab+0x8a84>
   302e8:	ldr	r7, [sp, #52]	; 0x34
   302ec:	sub	r0, r9, #4
   302f0:	sub	r6, r9, #12
   302f4:	mov	ip, #1
   302f8:	mov	lr, #0
   302fc:	mov	r4, #0
   30300:	str	r2, [sp, #56]	; 0x38
   30304:	mov	r1, r7
   30308:	str	r7, [sp, #44]	; 0x2c
   3030c:	mov	r1, r2
   30310:	ldr	r1, [fp, #16]
   30314:	add	lr, lr, #1
   30318:	str	r6, [sp, #40]	; 0x28
   3031c:	cmp	lr, #4
   30320:	str	lr, [sp, #36]	; 0x24
   30324:	ldr	r1, [r1, ip, lsl #2]
   30328:	str	r7, [r3, ip, lsl #2]
   3032c:	sub	r8, r1, #1
   30330:	str	r8, [sl, ip, lsl #2]
   30334:	ldr	r1, [r9, ip, lsl #2]
   30338:	str	r1, [sp, #32]
   3033c:	bcs	30348 <GetDataSlab+0x8984>
   30340:	mov	r3, ip
   30344:	b	303dc <GetDataSlab+0x8a18>
   30348:	vmov.i32	q9, #1	; 0x00000001
   3034c:	vmov.i32	q10, #1	; 0x00000001
   30350:	vmov.i32	q8, #1	; 0x00000001
   30354:	bic	sl, lr, #3
   30358:	vmov.32	d23[1], r1
   3035c:	bic	r9, ip, #3
   30360:	mov	r1, r6
   30364:	vmov.32	d18[0], r7
   30368:	vmov.32	d20[0], r8
   3036c:	sub	r3, ip, sl
   30370:	mvn	r7, #15
   30374:	vorr	d16, d18, d18
   30378:	vmov.i32	q9, #1	; 0x00000001
   3037c:	vorr	d18, d20, d20
   30380:	vld1.32	{d20-d21}, [r1], r7
   30384:	subs	r9, r9, #4
   30388:	vrev64.32	q12, q10
   3038c:	vext.8	q12, q12, q12, #8
   30390:	vext.8	q11, q11, q12, #12
   30394:	vmul.i32	q9, q9, q12
   30398:	vmul.i32	q8, q11, q8
   3039c:	vorr	q11, q12, q12
   303a0:	bne	30380 <GetDataSlab+0x89bc>
   303a4:	vext.8	q11, q9, q8, #8
   303a8:	vext.8	q12, q8, q8, #8
   303ac:	cmp	lr, sl
   303b0:	vmul.i32	q0, q9, q11
   303b4:	vmul.i32	q1, q8, q12
   303b8:	vmul.i32	q8, q0, d0[1]
   303bc:	vmul.i32	q9, q1, d2[1]
   303c0:	vmov.32	r8, d16[0]
   303c4:	vmov.32	r7, d18[0]
   303c8:	bne	303d4 <GetDataSlab+0x8a10>
   303cc:	ldr	r9, [fp, #8]
   303d0:	b	303f0 <GetDataSlab+0x8a2c>
   303d4:	ldr	r9, [fp, #8]
   303d8:	vmov.32	r1, d20[0]
   303dc:	mul	r7, r1, r7
   303e0:	ldr	r1, [r0, r3, lsl #2]
   303e4:	subs	r3, r3, #1
   303e8:	mul	r8, r8, r1
   303ec:	bne	303dc <GetDataSlab+0x8a18>
   303f0:	sub	sl, fp, #96	; 0x60
   303f4:	sub	r3, fp, #176	; 0xb0
   303f8:	ldr	r6, [sp, #44]	; 0x2c
   303fc:	ldr	lr, [sp, #56]	; 0x38
   30400:	str	r7, [sp, #44]	; 0x2c
   30404:	str	r8, [sl, ip, lsl #2]
   30408:	ldr	r8, [fp, #12]
   3040c:	str	r7, [r3, ip, lsl #2]
   30410:	ldr	r7, [sp, #32]
   30414:	ldr	r1, [r8, ip, lsl #2]
   30418:	mla	r4, r1, r6, r4
   3041c:	ldr	r1, [fp, #20]
   30420:	ldr	r6, [sp, #40]	; 0x28
   30424:	ldr	r1, [r1, ip, lsl #2]
   30428:	add	ip, ip, #1
   3042c:	add	r6, r6, #4
   30430:	mul	lr, r1, lr
   30434:	ldr	r1, [fp, #24]
   30438:	str	lr, [sp, #56]	; 0x38
   3043c:	ldr	lr, [sp, #36]	; 0x24
   30440:	cmp	ip, r1
   30444:	bne	30310 <GetDataSlab+0x894c>
   30448:	ldr	r0, [sp, #48]	; 0x30
   3044c:	cmp	r5, #1
   30450:	add	sl, r0, r4
   30454:	bne	3fa5c <GetDataSlab+0x18098>
   30458:	ldr	r0, [sp, #56]	; 0x38
   3045c:	cmp	r0, #1
   30460:	blt	2a430 <GetDataSlab+0x2a6c>
   30464:	ldr	r0, [fp, #20]
   30468:	mov	r9, r8
   3046c:	mov	r8, #0
   30470:	add	ip, r0, #4
   30474:	sub	r0, fp, #136	; 0x88
   30478:	orr	r7, r0, #4
   3047c:	sub	r0, fp, #96	; 0x60
   30480:	orr	r0, r0, #4
   30484:	str	r0, [sp, #44]	; 0x2c
   30488:	ldr	r0, [r9], #4
   3048c:	str	r0, [sp, #48]	; 0x30
   30490:	ldr	r6, [sp, #48]	; 0x30
   30494:	ldr	r1, [sp, #52]	; 0x34
   30498:	cmp	r2, #1
   3049c:	add	r0, r6, r4
   304a0:	add	r3, sl, r6
   304a4:	blt	304e0 <GetDataSlab+0x8b1c>
   304a8:	ldr	r1, [sp, #60]	; 0x3c
   304ac:	ldr	r6, [fp, #20]
   304b0:	mov	r4, #0
   304b4:	add	r1, r1, r8
   304b8:	ldrb	r2, [r3, r4]
   304bc:	strb	r2, [r1, r4]
   304c0:	add	r4, r4, #1
   304c4:	ldr	r2, [r6]
   304c8:	cmp	r4, r2
   304cc:	blt	304b8 <GetDataSlab+0x8af4>
   304d0:	ldr	r1, [fp, #12]
   304d4:	ldr	r6, [r1]
   304d8:	ldr	r1, [fp, #8]
   304dc:	ldr	r1, [r1]
   304e0:	str	r1, [sp, #52]	; 0x34
   304e4:	sub	r1, r1, r6
   304e8:	str	r6, [sp, #48]	; 0x30
   304ec:	add	r4, r0, r1
   304f0:	ldr	r0, [fp, #24]
   304f4:	add	sl, r3, r1
   304f8:	cmp	r0, #2
   304fc:	blt	305a4 <GetDataSlab+0x8be0>
   30500:	mov	r1, #0
   30504:	mov	r0, r1
   30508:	ldr	r1, [r7, r1, lsl #2]
   3050c:	add	r1, r1, #1
   30510:	str	r1, [r7, r0, lsl #2]
   30514:	ldr	r6, [ip, r0, lsl #2]
   30518:	sdiv	lr, r1, r6
   3051c:	mls	r1, lr, r6, r1
   30520:	cmp	r1, #0
   30524:	bne	30594 <GetDataSlab+0x8bd0>
   30528:	mov	r1, #0
   3052c:	sub	r3, fp, #176	; 0xb0
   30530:	str	r1, [r7, r0, lsl #2]
   30534:	add	r1, r3, r0, lsl #2
   30538:	ldr	r1, [r1, #4]
   3053c:	sdiv	r6, r4, r1
   30540:	mls	r6, r6, r1, r4
   30544:	cmp	r6, #0
   30548:	beq	30568 <GetDataSlab+0x8ba4>
   3054c:	ldr	r5, [r3, r0, lsl #2]
   30550:	ldr	r3, [r9, r0, lsl #2]
   30554:	sub	r1, r1, r6
   30558:	mla	r1, r3, r5, r1
   3055c:	add	r4, r1, r4
   30560:	add	sl, sl, r1
   30564:	b	3057c <GetDataSlab+0x8bb8>
   30568:	ldr	r1, [r9, r0, lsl #2]
   3056c:	cmp	r1, #0
   30570:	ldrne	r3, [r3, r0, lsl #2]
   30574:	mlane	r4, r3, r1, r4
   30578:	mlane	sl, r3, r1, sl
   3057c:	ldr	r3, [fp, #24]
   30580:	add	r1, r0, #1
   30584:	add	r0, r0, #2
   30588:	cmp	r0, r3
   3058c:	blt	30504 <GetDataSlab+0x8b40>
   30590:	b	305a4 <GetDataSlab+0x8be0>
   30594:	ldr	r1, [sp, #44]	; 0x2c
   30598:	ldr	r0, [r1, r0, lsl #2]
   3059c:	add	sl, sl, r0
   305a0:	add	r4, r0, r4
   305a4:	ldr	r1, [sp, #56]	; 0x38
   305a8:	add	r8, r2, r8
   305ac:	mov	r0, #0
   305b0:	cmp	r8, r1
   305b4:	blt	30490 <GetDataSlab+0x8acc>
   305b8:	b	47ffc <GetDataSlab+0x20638>
   305bc:	ldr	r5, [r3]
   305c0:	ldr	r9, [fp, #8]
   305c4:	ldr	r8, [fp, #12]
   305c8:	mov	r4, #0
   305cc:	sub	r3, fp, #176	; 0xb0
   305d0:	sub	r0, r5, #1
   305d4:	str	r0, [fp, #-96]	; 0xffffffa0
   305d8:	ldr	r0, [r9]
   305dc:	str	r0, [fp, #-176]	; 0xffffff50
   305e0:	str	r0, [sp, #52]	; 0x34
   305e4:	ldr	r0, [fp, #24]
   305e8:	ldr	r2, [sl]
   305ec:	sub	sl, fp, #96	; 0x60
   305f0:	cmp	r0, #2
   305f4:	mov	r0, r2
   305f8:	str	r2, [sp, #56]	; 0x38
   305fc:	blt	30760 <GetDataSlab+0x8d9c>
   30600:	ldr	r7, [sp, #52]	; 0x34
   30604:	sub	r0, r9, #4
   30608:	sub	r6, r9, #12
   3060c:	mov	ip, #1
   30610:	mov	lr, #0
   30614:	mov	r4, #0
   30618:	str	r2, [sp, #56]	; 0x38
   3061c:	mov	r1, r7
   30620:	str	r7, [sp, #44]	; 0x2c
   30624:	mov	r1, r2
   30628:	ldr	r1, [fp, #16]
   3062c:	add	lr, lr, #1
   30630:	str	r6, [sp, #40]	; 0x28
   30634:	cmp	lr, #4
   30638:	str	lr, [sp, #36]	; 0x24
   3063c:	ldr	r1, [r1, ip, lsl #2]
   30640:	str	r7, [r3, ip, lsl #2]
   30644:	sub	r8, r1, #1
   30648:	str	r8, [sl, ip, lsl #2]
   3064c:	ldr	r1, [r9, ip, lsl #2]
   30650:	str	r1, [sp, #32]
   30654:	bcs	30660 <GetDataSlab+0x8c9c>
   30658:	mov	r3, ip
   3065c:	b	306f4 <GetDataSlab+0x8d30>
   30660:	vmov.i32	q9, #1	; 0x00000001
   30664:	vmov.i32	q10, #1	; 0x00000001
   30668:	vmov.i32	q8, #1	; 0x00000001
   3066c:	bic	sl, lr, #3
   30670:	vmov.32	d23[1], r1
   30674:	bic	r9, ip, #3
   30678:	mov	r1, r6
   3067c:	vmov.32	d18[0], r7
   30680:	vmov.32	d20[0], r8
   30684:	sub	r3, ip, sl
   30688:	mvn	r7, #15
   3068c:	vorr	d16, d18, d18
   30690:	vmov.i32	q9, #1	; 0x00000001
   30694:	vorr	d18, d20, d20
   30698:	vld1.32	{d20-d21}, [r1], r7
   3069c:	subs	r9, r9, #4
   306a0:	vrev64.32	q12, q10
   306a4:	vext.8	q12, q12, q12, #8
   306a8:	vext.8	q11, q11, q12, #12
   306ac:	vmul.i32	q9, q9, q12
   306b0:	vmul.i32	q8, q11, q8
   306b4:	vorr	q11, q12, q12
   306b8:	bne	30698 <GetDataSlab+0x8cd4>
   306bc:	vext.8	q11, q9, q8, #8
   306c0:	vext.8	q12, q8, q8, #8
   306c4:	cmp	lr, sl
   306c8:	vmul.i32	q0, q9, q11
   306cc:	vmul.i32	q1, q8, q12
   306d0:	vmul.i32	q8, q0, d0[1]
   306d4:	vmul.i32	q9, q1, d2[1]
   306d8:	vmov.32	r8, d16[0]
   306dc:	vmov.32	r7, d18[0]
   306e0:	bne	306ec <GetDataSlab+0x8d28>
   306e4:	ldr	r9, [fp, #8]
   306e8:	b	30708 <GetDataSlab+0x8d44>
   306ec:	ldr	r9, [fp, #8]
   306f0:	vmov.32	r1, d20[0]
   306f4:	mul	r7, r1, r7
   306f8:	ldr	r1, [r0, r3, lsl #2]
   306fc:	subs	r3, r3, #1
   30700:	mul	r8, r8, r1
   30704:	bne	306f4 <GetDataSlab+0x8d30>
   30708:	sub	sl, fp, #96	; 0x60
   3070c:	sub	r3, fp, #176	; 0xb0
   30710:	ldr	r6, [sp, #44]	; 0x2c
   30714:	ldr	lr, [sp, #56]	; 0x38
   30718:	str	r7, [sp, #44]	; 0x2c
   3071c:	str	r8, [sl, ip, lsl #2]
   30720:	ldr	r8, [fp, #12]
   30724:	str	r7, [r3, ip, lsl #2]
   30728:	ldr	r7, [sp, #32]
   3072c:	ldr	r1, [r8, ip, lsl #2]
   30730:	mla	r4, r1, r6, r4
   30734:	ldr	r1, [fp, #20]
   30738:	ldr	r6, [sp, #40]	; 0x28
   3073c:	ldr	r1, [r1, ip, lsl #2]
   30740:	add	ip, ip, #1
   30744:	add	r6, r6, #4
   30748:	mul	lr, r1, lr
   3074c:	ldr	r1, [fp, #24]
   30750:	str	lr, [sp, #56]	; 0x38
   30754:	ldr	lr, [sp, #36]	; 0x24
   30758:	cmp	ip, r1
   3075c:	bne	30628 <GetDataSlab+0x8c64>
   30760:	ldr	r0, [sp, #48]	; 0x30
   30764:	cmp	r5, #1
   30768:	add	sl, r0, r4, lsl #1
   3076c:	bne	3fbf4 <GetDataSlab+0x18230>
   30770:	ldr	r0, [sp, #56]	; 0x38
   30774:	cmp	r0, #1
   30778:	blt	2a430 <GetDataSlab+0x2a6c>
   3077c:	ldr	r0, [fp, #20]
   30780:	mov	r9, r8
   30784:	mov	lr, #0
   30788:	add	ip, r0, #4
   3078c:	sub	r0, fp, #136	; 0x88
   30790:	orr	r7, r0, #4
   30794:	sub	r0, fp, #96	; 0x60
   30798:	orr	r0, r0, #4
   3079c:	str	r0, [sp, #44]	; 0x2c
   307a0:	ldr	r0, [r9], #4
   307a4:	str	r0, [sp, #48]	; 0x30
   307a8:	ldr	r3, [sp, #48]	; 0x30
   307ac:	ldr	r1, [sp, #52]	; 0x34
   307b0:	cmp	r2, #1
   307b4:	add	r8, r3, r4
   307b8:	add	r0, sl, r3, lsl #1
   307bc:	blt	307fc <GetDataSlab+0x8e38>
   307c0:	ldr	r1, [sp, #60]	; 0x3c
   307c4:	ldr	r5, [fp, #20]
   307c8:	mov	r3, r0
   307cc:	add	r4, r1, lr
   307d0:	mov	r1, #0
   307d4:	ldrb	r2, [r3], #2
   307d8:	strb	r2, [r4, r1]
   307dc:	add	r1, r1, #1
   307e0:	ldr	r2, [r5]
   307e4:	cmp	r1, r2
   307e8:	blt	307d4 <GetDataSlab+0x8e10>
   307ec:	ldr	r1, [fp, #12]
   307f0:	ldr	r3, [r1]
   307f4:	ldr	r1, [fp, #8]
   307f8:	ldr	r1, [r1]
   307fc:	str	r1, [sp, #52]	; 0x34
   30800:	sub	r1, r1, r3
   30804:	str	r3, [sp, #48]	; 0x30
   30808:	add	sl, r0, r1, lsl #1
   3080c:	ldr	r0, [fp, #24]
   30810:	add	r4, r8, r1
   30814:	cmp	r0, #2
   30818:	blt	308c8 <GetDataSlab+0x8f04>
   3081c:	mov	r1, #0
   30820:	mov	r8, #0
   30824:	mov	r0, r1
   30828:	ldr	r1, [r7, r1, lsl #2]
   3082c:	add	r1, r1, #1
   30830:	str	r1, [r7, r0, lsl #2]
   30834:	ldr	r6, [ip, r0, lsl #2]
   30838:	sdiv	r5, r1, r6
   3083c:	mls	r1, r5, r6, r1
   30840:	cmp	r1, #0
   30844:	bne	308b8 <GetDataSlab+0x8ef4>
   30848:	sub	r3, fp, #176	; 0xb0
   3084c:	str	r8, [r7, r0, lsl #2]
   30850:	add	r1, r3, r0, lsl #2
   30854:	ldr	r1, [r1, #4]
   30858:	sdiv	r5, r4, r1
   3085c:	mls	r6, r5, r1, r4
   30860:	cmp	r6, #0
   30864:	beq	30880 <GetDataSlab+0x8ebc>
   30868:	ldr	r5, [r3, r0, lsl #2]
   3086c:	ldr	r3, [r9, r0, lsl #2]
   30870:	sub	r1, r1, r6
   30874:	mla	r1, r3, r5, r1
   30878:	add	r4, r1, r4
   3087c:	b	3089c <GetDataSlab+0x8ed8>
   30880:	ldr	r1, [r9, r0, lsl #2]
   30884:	cmp	r1, #0
   30888:	beq	308a0 <GetDataSlab+0x8edc>
   3088c:	sub	r3, fp, #176	; 0xb0
   30890:	ldr	r3, [r3, r0, lsl #2]
   30894:	mla	r4, r3, r1, r4
   30898:	mul	r1, r3, r1
   3089c:	add	sl, sl, r1, lsl #1
   308a0:	ldr	r3, [fp, #24]
   308a4:	add	r1, r0, #1
   308a8:	add	r0, r0, #2
   308ac:	cmp	r0, r3
   308b0:	blt	30824 <GetDataSlab+0x8e60>
   308b4:	b	308c8 <GetDataSlab+0x8f04>
   308b8:	ldr	r1, [sp, #44]	; 0x2c
   308bc:	ldr	r0, [r1, r0, lsl #2]
   308c0:	add	sl, sl, r0, lsl #1
   308c4:	add	r4, r0, r4
   308c8:	ldr	r1, [sp, #56]	; 0x38
   308cc:	add	lr, r2, lr
   308d0:	mov	r0, #0
   308d4:	cmp	lr, r1
   308d8:	blt	307a8 <GetDataSlab+0x8de4>
   308dc:	b	47ffc <GetDataSlab+0x20638>
   308e0:	ldr	r5, [r3]
   308e4:	ldr	r9, [fp, #8]
   308e8:	ldr	r8, [fp, #12]
   308ec:	mov	r4, #0
   308f0:	sub	r3, fp, #176	; 0xb0
   308f4:	sub	r0, r5, #1
   308f8:	str	r0, [fp, #-96]	; 0xffffffa0
   308fc:	ldr	r0, [r9]
   30900:	str	r0, [fp, #-176]	; 0xffffff50
   30904:	str	r0, [sp, #52]	; 0x34
   30908:	ldr	r0, [fp, #24]
   3090c:	ldr	r2, [sl]
   30910:	sub	sl, fp, #96	; 0x60
   30914:	cmp	r0, #2
   30918:	mov	r0, r2
   3091c:	str	r2, [sp, #56]	; 0x38
   30920:	blt	30a84 <GetDataSlab+0x90c0>
   30924:	ldr	r7, [sp, #52]	; 0x34
   30928:	sub	r0, r9, #4
   3092c:	sub	r6, r9, #12
   30930:	mov	ip, #1
   30934:	mov	lr, #0
   30938:	mov	r4, #0
   3093c:	str	r2, [sp, #56]	; 0x38
   30940:	mov	r1, r7
   30944:	str	r7, [sp, #44]	; 0x2c
   30948:	mov	r1, r2
   3094c:	ldr	r1, [fp, #16]
   30950:	add	lr, lr, #1
   30954:	str	r6, [sp, #40]	; 0x28
   30958:	cmp	lr, #4
   3095c:	str	lr, [sp, #36]	; 0x24
   30960:	ldr	r1, [r1, ip, lsl #2]
   30964:	str	r7, [r3, ip, lsl #2]
   30968:	sub	r8, r1, #1
   3096c:	str	r8, [sl, ip, lsl #2]
   30970:	ldr	r1, [r9, ip, lsl #2]
   30974:	str	r1, [sp, #32]
   30978:	bcs	30984 <GetDataSlab+0x8fc0>
   3097c:	mov	r3, ip
   30980:	b	30a18 <GetDataSlab+0x9054>
   30984:	vmov.i32	q9, #1	; 0x00000001
   30988:	vmov.i32	q10, #1	; 0x00000001
   3098c:	vmov.i32	q8, #1	; 0x00000001
   30990:	bic	sl, lr, #3
   30994:	vmov.32	d23[1], r1
   30998:	bic	r9, ip, #3
   3099c:	mov	r1, r6
   309a0:	vmov.32	d18[0], r7
   309a4:	vmov.32	d20[0], r8
   309a8:	sub	r3, ip, sl
   309ac:	mvn	r7, #15
   309b0:	vorr	d16, d18, d18
   309b4:	vmov.i32	q9, #1	; 0x00000001
   309b8:	vorr	d18, d20, d20
   309bc:	vld1.32	{d20-d21}, [r1], r7
   309c0:	subs	r9, r9, #4
   309c4:	vrev64.32	q12, q10
   309c8:	vext.8	q12, q12, q12, #8
   309cc:	vext.8	q11, q11, q12, #12
   309d0:	vmul.i32	q9, q9, q12
   309d4:	vmul.i32	q8, q11, q8
   309d8:	vorr	q11, q12, q12
   309dc:	bne	309bc <GetDataSlab+0x8ff8>
   309e0:	vext.8	q11, q9, q8, #8
   309e4:	vext.8	q12, q8, q8, #8
   309e8:	cmp	lr, sl
   309ec:	vmul.i32	q0, q9, q11
   309f0:	vmul.i32	q1, q8, q12
   309f4:	vmul.i32	q8, q0, d0[1]
   309f8:	vmul.i32	q9, q1, d2[1]
   309fc:	vmov.32	r8, d16[0]
   30a00:	vmov.32	r7, d18[0]
   30a04:	bne	30a10 <GetDataSlab+0x904c>
   30a08:	ldr	r9, [fp, #8]
   30a0c:	b	30a2c <GetDataSlab+0x9068>
   30a10:	ldr	r9, [fp, #8]
   30a14:	vmov.32	r1, d20[0]
   30a18:	mul	r7, r1, r7
   30a1c:	ldr	r1, [r0, r3, lsl #2]
   30a20:	subs	r3, r3, #1
   30a24:	mul	r8, r8, r1
   30a28:	bne	30a18 <GetDataSlab+0x9054>
   30a2c:	sub	sl, fp, #96	; 0x60
   30a30:	sub	r3, fp, #176	; 0xb0
   30a34:	ldr	r6, [sp, #44]	; 0x2c
   30a38:	ldr	lr, [sp, #56]	; 0x38
   30a3c:	str	r7, [sp, #44]	; 0x2c
   30a40:	str	r8, [sl, ip, lsl #2]
   30a44:	ldr	r8, [fp, #12]
   30a48:	str	r7, [r3, ip, lsl #2]
   30a4c:	ldr	r7, [sp, #32]
   30a50:	ldr	r1, [r8, ip, lsl #2]
   30a54:	mla	r4, r1, r6, r4
   30a58:	ldr	r1, [fp, #20]
   30a5c:	ldr	r6, [sp, #40]	; 0x28
   30a60:	ldr	r1, [r1, ip, lsl #2]
   30a64:	add	ip, ip, #1
   30a68:	add	r6, r6, #4
   30a6c:	mul	lr, r1, lr
   30a70:	ldr	r1, [fp, #24]
   30a74:	str	lr, [sp, #56]	; 0x38
   30a78:	ldr	lr, [sp, #36]	; 0x24
   30a7c:	cmp	ip, r1
   30a80:	bne	3094c <GetDataSlab+0x8f88>
   30a84:	ldr	r0, [sp, #48]	; 0x30
   30a88:	cmp	r5, #1
   30a8c:	add	sl, r0, r4, lsl #1
   30a90:	bne	3fd90 <GetDataSlab+0x183cc>
   30a94:	ldr	r0, [sp, #56]	; 0x38
   30a98:	cmp	r0, #1
   30a9c:	blt	2a430 <GetDataSlab+0x2a6c>
   30aa0:	ldr	r0, [fp, #20]
   30aa4:	mov	r9, r8
   30aa8:	mov	lr, #0
   30aac:	add	ip, r0, #4
   30ab0:	sub	r0, fp, #136	; 0x88
   30ab4:	orr	r7, r0, #4
   30ab8:	sub	r0, fp, #96	; 0x60
   30abc:	orr	r0, r0, #4
   30ac0:	str	r0, [sp, #44]	; 0x2c
   30ac4:	ldr	r0, [r9], #4
   30ac8:	str	r0, [sp, #48]	; 0x30
   30acc:	ldr	r3, [sp, #48]	; 0x30
   30ad0:	ldr	r1, [sp, #52]	; 0x34
   30ad4:	cmp	r2, #1
   30ad8:	add	r8, r3, r4
   30adc:	add	r0, sl, r3, lsl #1
   30ae0:	blt	30b20 <GetDataSlab+0x915c>
   30ae4:	ldr	r1, [sp, #60]	; 0x3c
   30ae8:	ldr	r5, [fp, #20]
   30aec:	mov	r3, r0
   30af0:	add	r4, r1, lr
   30af4:	mov	r1, #0
   30af8:	ldrb	r2, [r3], #2
   30afc:	strb	r2, [r4, r1]
   30b00:	add	r1, r1, #1
   30b04:	ldr	r2, [r5]
   30b08:	cmp	r1, r2
   30b0c:	blt	30af8 <GetDataSlab+0x9134>
   30b10:	ldr	r1, [fp, #12]
   30b14:	ldr	r3, [r1]
   30b18:	ldr	r1, [fp, #8]
   30b1c:	ldr	r1, [r1]
   30b20:	str	r1, [sp, #52]	; 0x34
   30b24:	sub	r1, r1, r3
   30b28:	str	r3, [sp, #48]	; 0x30
   30b2c:	add	sl, r0, r1, lsl #1
   30b30:	ldr	r0, [fp, #24]
   30b34:	add	r4, r8, r1
   30b38:	cmp	r0, #2
   30b3c:	blt	30bec <GetDataSlab+0x9228>
   30b40:	mov	r1, #0
   30b44:	mov	r8, #0
   30b48:	mov	r0, r1
   30b4c:	ldr	r1, [r7, r1, lsl #2]
   30b50:	add	r1, r1, #1
   30b54:	str	r1, [r7, r0, lsl #2]
   30b58:	ldr	r6, [ip, r0, lsl #2]
   30b5c:	sdiv	r5, r1, r6
   30b60:	mls	r1, r5, r6, r1
   30b64:	cmp	r1, #0
   30b68:	bne	30bdc <GetDataSlab+0x9218>
   30b6c:	sub	r3, fp, #176	; 0xb0
   30b70:	str	r8, [r7, r0, lsl #2]
   30b74:	add	r1, r3, r0, lsl #2
   30b78:	ldr	r1, [r1, #4]
   30b7c:	sdiv	r5, r4, r1
   30b80:	mls	r6, r5, r1, r4
   30b84:	cmp	r6, #0
   30b88:	beq	30ba4 <GetDataSlab+0x91e0>
   30b8c:	ldr	r5, [r3, r0, lsl #2]
   30b90:	ldr	r3, [r9, r0, lsl #2]
   30b94:	sub	r1, r1, r6
   30b98:	mla	r1, r3, r5, r1
   30b9c:	add	r4, r1, r4
   30ba0:	b	30bc0 <GetDataSlab+0x91fc>
   30ba4:	ldr	r1, [r9, r0, lsl #2]
   30ba8:	cmp	r1, #0
   30bac:	beq	30bc4 <GetDataSlab+0x9200>
   30bb0:	sub	r3, fp, #176	; 0xb0
   30bb4:	ldr	r3, [r3, r0, lsl #2]
   30bb8:	mla	r4, r3, r1, r4
   30bbc:	mul	r1, r3, r1
   30bc0:	add	sl, sl, r1, lsl #1
   30bc4:	ldr	r3, [fp, #24]
   30bc8:	add	r1, r0, #1
   30bcc:	add	r0, r0, #2
   30bd0:	cmp	r0, r3
   30bd4:	blt	30b48 <GetDataSlab+0x9184>
   30bd8:	b	30bec <GetDataSlab+0x9228>
   30bdc:	ldr	r1, [sp, #44]	; 0x2c
   30be0:	ldr	r0, [r1, r0, lsl #2]
   30be4:	add	sl, sl, r0, lsl #1
   30be8:	add	r4, r0, r4
   30bec:	ldr	r1, [sp, #56]	; 0x38
   30bf0:	add	lr, r2, lr
   30bf4:	mov	r0, #0
   30bf8:	cmp	lr, r1
   30bfc:	blt	30acc <GetDataSlab+0x9108>
   30c00:	b	47ffc <GetDataSlab+0x20638>
   30c04:	ldr	r5, [r3]
   30c08:	ldr	r9, [fp, #8]
   30c0c:	ldr	r8, [fp, #12]
   30c10:	mov	r4, #0
   30c14:	sub	r3, fp, #176	; 0xb0
   30c18:	sub	r0, r5, #1
   30c1c:	str	r0, [fp, #-96]	; 0xffffffa0
   30c20:	ldr	r0, [r9]
   30c24:	str	r0, [fp, #-176]	; 0xffffff50
   30c28:	str	r0, [sp, #52]	; 0x34
   30c2c:	ldr	r0, [fp, #24]
   30c30:	ldr	r2, [sl]
   30c34:	sub	sl, fp, #96	; 0x60
   30c38:	cmp	r0, #2
   30c3c:	mov	r0, r2
   30c40:	str	r2, [sp, #56]	; 0x38
   30c44:	blt	30da8 <GetDataSlab+0x93e4>
   30c48:	ldr	r7, [sp, #52]	; 0x34
   30c4c:	sub	r0, r9, #4
   30c50:	sub	r6, r9, #12
   30c54:	mov	ip, #1
   30c58:	mov	lr, #0
   30c5c:	mov	r4, #0
   30c60:	str	r2, [sp, #56]	; 0x38
   30c64:	mov	r1, r7
   30c68:	str	r7, [sp, #44]	; 0x2c
   30c6c:	mov	r1, r2
   30c70:	ldr	r1, [fp, #16]
   30c74:	add	lr, lr, #1
   30c78:	str	r6, [sp, #40]	; 0x28
   30c7c:	cmp	lr, #4
   30c80:	str	lr, [sp, #36]	; 0x24
   30c84:	ldr	r1, [r1, ip, lsl #2]
   30c88:	str	r7, [r3, ip, lsl #2]
   30c8c:	sub	r8, r1, #1
   30c90:	str	r8, [sl, ip, lsl #2]
   30c94:	ldr	r1, [r9, ip, lsl #2]
   30c98:	str	r1, [sp, #32]
   30c9c:	bcs	30ca8 <GetDataSlab+0x92e4>
   30ca0:	mov	r3, ip
   30ca4:	b	30d3c <GetDataSlab+0x9378>
   30ca8:	vmov.i32	q9, #1	; 0x00000001
   30cac:	vmov.i32	q10, #1	; 0x00000001
   30cb0:	vmov.i32	q8, #1	; 0x00000001
   30cb4:	bic	sl, lr, #3
   30cb8:	vmov.32	d23[1], r1
   30cbc:	bic	r9, ip, #3
   30cc0:	mov	r1, r6
   30cc4:	vmov.32	d18[0], r7
   30cc8:	vmov.32	d20[0], r8
   30ccc:	sub	r3, ip, sl
   30cd0:	mvn	r7, #15
   30cd4:	vorr	d16, d18, d18
   30cd8:	vmov.i32	q9, #1	; 0x00000001
   30cdc:	vorr	d18, d20, d20
   30ce0:	vld1.32	{d20-d21}, [r1], r7
   30ce4:	subs	r9, r9, #4
   30ce8:	vrev64.32	q12, q10
   30cec:	vext.8	q12, q12, q12, #8
   30cf0:	vext.8	q11, q11, q12, #12
   30cf4:	vmul.i32	q9, q9, q12
   30cf8:	vmul.i32	q8, q11, q8
   30cfc:	vorr	q11, q12, q12
   30d00:	bne	30ce0 <GetDataSlab+0x931c>
   30d04:	vext.8	q11, q9, q8, #8
   30d08:	vext.8	q12, q8, q8, #8
   30d0c:	cmp	lr, sl
   30d10:	vmul.i32	q0, q9, q11
   30d14:	vmul.i32	q1, q8, q12
   30d18:	vmul.i32	q8, q0, d0[1]
   30d1c:	vmul.i32	q9, q1, d2[1]
   30d20:	vmov.32	r8, d16[0]
   30d24:	vmov.32	r7, d18[0]
   30d28:	bne	30d34 <GetDataSlab+0x9370>
   30d2c:	ldr	r9, [fp, #8]
   30d30:	b	30d50 <GetDataSlab+0x938c>
   30d34:	ldr	r9, [fp, #8]
   30d38:	vmov.32	r1, d20[0]
   30d3c:	mul	r7, r1, r7
   30d40:	ldr	r1, [r0, r3, lsl #2]
   30d44:	subs	r3, r3, #1
   30d48:	mul	r8, r8, r1
   30d4c:	bne	30d3c <GetDataSlab+0x9378>
   30d50:	sub	sl, fp, #96	; 0x60
   30d54:	sub	r3, fp, #176	; 0xb0
   30d58:	ldr	r6, [sp, #44]	; 0x2c
   30d5c:	ldr	lr, [sp, #56]	; 0x38
   30d60:	str	r7, [sp, #44]	; 0x2c
   30d64:	str	r8, [sl, ip, lsl #2]
   30d68:	ldr	r8, [fp, #12]
   30d6c:	str	r7, [r3, ip, lsl #2]
   30d70:	ldr	r7, [sp, #32]
   30d74:	ldr	r1, [r8, ip, lsl #2]
   30d78:	mla	r4, r1, r6, r4
   30d7c:	ldr	r1, [fp, #20]
   30d80:	ldr	r6, [sp, #40]	; 0x28
   30d84:	ldr	r1, [r1, ip, lsl #2]
   30d88:	add	ip, ip, #1
   30d8c:	add	r6, r6, #4
   30d90:	mul	lr, r1, lr
   30d94:	ldr	r1, [fp, #24]
   30d98:	str	lr, [sp, #56]	; 0x38
   30d9c:	ldr	lr, [sp, #36]	; 0x24
   30da0:	cmp	ip, r1
   30da4:	bne	30c70 <GetDataSlab+0x92ac>
   30da8:	ldr	r0, [sp, #48]	; 0x30
   30dac:	cmp	r5, #1
   30db0:	add	sl, r0, r4, lsl #2
   30db4:	bne	3ff2c <GetDataSlab+0x18568>
   30db8:	ldr	r0, [sp, #56]	; 0x38
   30dbc:	cmp	r0, #1
   30dc0:	blt	2a430 <GetDataSlab+0x2a6c>
   30dc4:	ldr	r0, [fp, #20]
   30dc8:	mov	r9, r8
   30dcc:	mov	r8, #0
   30dd0:	add	ip, r0, #4
   30dd4:	sub	r0, fp, #136	; 0x88
   30dd8:	orr	r7, r0, #4
   30ddc:	sub	r0, fp, #96	; 0x60
   30de0:	orr	r0, r0, #4
   30de4:	str	r0, [sp, #44]	; 0x2c
   30de8:	ldr	r0, [r9], #4
   30dec:	str	r0, [sp, #48]	; 0x30
   30df0:	ldr	r6, [sp, #48]	; 0x30
   30df4:	ldr	r1, [sp, #52]	; 0x34
   30df8:	cmp	r2, #1
   30dfc:	add	r0, r6, r4
   30e00:	add	r3, sl, r6, lsl #2
   30e04:	blt	30e40 <GetDataSlab+0x947c>
   30e08:	ldr	r1, [sp, #60]	; 0x3c
   30e0c:	ldr	r6, [fp, #20]
   30e10:	mov	r4, #0
   30e14:	add	r1, r1, r8
   30e18:	ldr	r2, [r3, r4, lsl #2]
   30e1c:	strb	r2, [r1, r4]
   30e20:	add	r4, r4, #1
   30e24:	ldr	r2, [r6]
   30e28:	cmp	r4, r2
   30e2c:	blt	30e18 <GetDataSlab+0x9454>
   30e30:	ldr	r1, [fp, #12]
   30e34:	ldr	r6, [r1]
   30e38:	ldr	r1, [fp, #8]
   30e3c:	ldr	r1, [r1]
   30e40:	str	r1, [sp, #52]	; 0x34
   30e44:	sub	r1, r1, r6
   30e48:	str	r6, [sp, #48]	; 0x30
   30e4c:	add	r4, r0, r1
   30e50:	ldr	r0, [fp, #24]
   30e54:	add	sl, r3, r1, lsl #2
   30e58:	cmp	r0, #2
   30e5c:	blt	30f08 <GetDataSlab+0x9544>
   30e60:	mov	r1, #0
   30e64:	mov	r0, r1
   30e68:	ldr	r1, [r7, r1, lsl #2]
   30e6c:	add	r1, r1, #1
   30e70:	str	r1, [r7, r0, lsl #2]
   30e74:	ldr	r6, [ip, r0, lsl #2]
   30e78:	sdiv	lr, r1, r6
   30e7c:	mls	r1, lr, r6, r1
   30e80:	cmp	r1, #0
   30e84:	bne	30ef8 <GetDataSlab+0x9534>
   30e88:	mov	r1, #0
   30e8c:	sub	r3, fp, #176	; 0xb0
   30e90:	str	r1, [r7, r0, lsl #2]
   30e94:	add	r1, r3, r0, lsl #2
   30e98:	ldr	r1, [r1, #4]
   30e9c:	sdiv	r6, r4, r1
   30ea0:	mls	r6, r6, r1, r4
   30ea4:	cmp	r6, #0
   30ea8:	beq	30ec4 <GetDataSlab+0x9500>
   30eac:	ldr	r5, [r3, r0, lsl #2]
   30eb0:	ldr	r3, [r9, r0, lsl #2]
   30eb4:	sub	r1, r1, r6
   30eb8:	mla	r1, r3, r5, r1
   30ebc:	add	r4, r1, r4
   30ec0:	b	30edc <GetDataSlab+0x9518>
   30ec4:	ldr	r1, [r9, r0, lsl #2]
   30ec8:	cmp	r1, #0
   30ecc:	beq	30ee0 <GetDataSlab+0x951c>
   30ed0:	ldr	r3, [r3, r0, lsl #2]
   30ed4:	mla	r4, r3, r1, r4
   30ed8:	mul	r1, r3, r1
   30edc:	add	sl, sl, r1, lsl #2
   30ee0:	ldr	r3, [fp, #24]
   30ee4:	add	r1, r0, #1
   30ee8:	add	r0, r0, #2
   30eec:	cmp	r0, r3
   30ef0:	blt	30e64 <GetDataSlab+0x94a0>
   30ef4:	b	30f08 <GetDataSlab+0x9544>
   30ef8:	ldr	r1, [sp, #44]	; 0x2c
   30efc:	ldr	r0, [r1, r0, lsl #2]
   30f00:	add	sl, sl, r0, lsl #2
   30f04:	add	r4, r0, r4
   30f08:	ldr	r1, [sp, #56]	; 0x38
   30f0c:	add	r8, r2, r8
   30f10:	mov	r0, #0
   30f14:	cmp	r8, r1
   30f18:	blt	30df0 <GetDataSlab+0x942c>
   30f1c:	b	47ffc <GetDataSlab+0x20638>
   30f20:	ldr	r5, [r3]
   30f24:	ldr	r9, [fp, #8]
   30f28:	ldr	r8, [fp, #12]
   30f2c:	mov	r4, #0
   30f30:	sub	r3, fp, #176	; 0xb0
   30f34:	sub	r0, r5, #1
   30f38:	str	r0, [fp, #-96]	; 0xffffffa0
   30f3c:	ldr	r0, [r9]
   30f40:	str	r0, [fp, #-176]	; 0xffffff50
   30f44:	str	r0, [sp, #52]	; 0x34
   30f48:	ldr	r0, [fp, #24]
   30f4c:	ldr	r2, [sl]
   30f50:	sub	sl, fp, #96	; 0x60
   30f54:	cmp	r0, #2
   30f58:	mov	r0, r2
   30f5c:	str	r2, [sp, #56]	; 0x38
   30f60:	blt	310c4 <GetDataSlab+0x9700>
   30f64:	ldr	r7, [sp, #52]	; 0x34
   30f68:	sub	r0, r9, #4
   30f6c:	sub	r6, r9, #12
   30f70:	mov	ip, #1
   30f74:	mov	lr, #0
   30f78:	mov	r4, #0
   30f7c:	str	r2, [sp, #56]	; 0x38
   30f80:	mov	r1, r7
   30f84:	str	r7, [sp, #44]	; 0x2c
   30f88:	mov	r1, r2
   30f8c:	ldr	r1, [fp, #16]
   30f90:	add	lr, lr, #1
   30f94:	str	r6, [sp, #40]	; 0x28
   30f98:	cmp	lr, #4
   30f9c:	str	lr, [sp, #36]	; 0x24
   30fa0:	ldr	r1, [r1, ip, lsl #2]
   30fa4:	str	r7, [r3, ip, lsl #2]
   30fa8:	sub	r8, r1, #1
   30fac:	str	r8, [sl, ip, lsl #2]
   30fb0:	ldr	r1, [r9, ip, lsl #2]
   30fb4:	str	r1, [sp, #32]
   30fb8:	bcs	30fc4 <GetDataSlab+0x9600>
   30fbc:	mov	r3, ip
   30fc0:	b	31058 <GetDataSlab+0x9694>
   30fc4:	vmov.i32	q9, #1	; 0x00000001
   30fc8:	vmov.i32	q10, #1	; 0x00000001
   30fcc:	vmov.i32	q8, #1	; 0x00000001
   30fd0:	bic	sl, lr, #3
   30fd4:	vmov.32	d23[1], r1
   30fd8:	bic	r9, ip, #3
   30fdc:	mov	r1, r6
   30fe0:	vmov.32	d18[0], r7
   30fe4:	vmov.32	d20[0], r8
   30fe8:	sub	r3, ip, sl
   30fec:	mvn	r7, #15
   30ff0:	vorr	d16, d18, d18
   30ff4:	vmov.i32	q9, #1	; 0x00000001
   30ff8:	vorr	d18, d20, d20
   30ffc:	vld1.32	{d20-d21}, [r1], r7
   31000:	subs	r9, r9, #4
   31004:	vrev64.32	q12, q10
   31008:	vext.8	q12, q12, q12, #8
   3100c:	vext.8	q11, q11, q12, #12
   31010:	vmul.i32	q9, q9, q12
   31014:	vmul.i32	q8, q11, q8
   31018:	vorr	q11, q12, q12
   3101c:	bne	30ffc <GetDataSlab+0x9638>
   31020:	vext.8	q11, q9, q8, #8
   31024:	vext.8	q12, q8, q8, #8
   31028:	cmp	lr, sl
   3102c:	vmul.i32	q0, q9, q11
   31030:	vmul.i32	q1, q8, q12
   31034:	vmul.i32	q8, q0, d0[1]
   31038:	vmul.i32	q9, q1, d2[1]
   3103c:	vmov.32	r8, d16[0]
   31040:	vmov.32	r7, d18[0]
   31044:	bne	31050 <GetDataSlab+0x968c>
   31048:	ldr	r9, [fp, #8]
   3104c:	b	3106c <GetDataSlab+0x96a8>
   31050:	ldr	r9, [fp, #8]
   31054:	vmov.32	r1, d20[0]
   31058:	mul	r7, r1, r7
   3105c:	ldr	r1, [r0, r3, lsl #2]
   31060:	subs	r3, r3, #1
   31064:	mul	r8, r8, r1
   31068:	bne	31058 <GetDataSlab+0x9694>
   3106c:	sub	sl, fp, #96	; 0x60
   31070:	sub	r3, fp, #176	; 0xb0
   31074:	ldr	r6, [sp, #44]	; 0x2c
   31078:	ldr	lr, [sp, #56]	; 0x38
   3107c:	str	r7, [sp, #44]	; 0x2c
   31080:	str	r8, [sl, ip, lsl #2]
   31084:	ldr	r8, [fp, #12]
   31088:	str	r7, [r3, ip, lsl #2]
   3108c:	ldr	r7, [sp, #32]
   31090:	ldr	r1, [r8, ip, lsl #2]
   31094:	mla	r4, r1, r6, r4
   31098:	ldr	r1, [fp, #20]
   3109c:	ldr	r6, [sp, #40]	; 0x28
   310a0:	ldr	r1, [r1, ip, lsl #2]
   310a4:	add	ip, ip, #1
   310a8:	add	r6, r6, #4
   310ac:	mul	lr, r1, lr
   310b0:	ldr	r1, [fp, #24]
   310b4:	str	lr, [sp, #56]	; 0x38
   310b8:	ldr	lr, [sp, #36]	; 0x24
   310bc:	cmp	ip, r1
   310c0:	bne	30f8c <GetDataSlab+0x95c8>
   310c4:	ldr	r0, [sp, #48]	; 0x30
   310c8:	cmp	r5, #1
   310cc:	add	sl, r0, r4, lsl #2
   310d0:	bne	400c8 <GetDataSlab+0x18704>
   310d4:	ldr	r0, [sp, #56]	; 0x38
   310d8:	cmp	r0, #1
   310dc:	blt	2a430 <GetDataSlab+0x2a6c>
   310e0:	ldr	r0, [fp, #20]
   310e4:	mov	r9, r8
   310e8:	mov	r8, #0
   310ec:	add	ip, r0, #4
   310f0:	sub	r0, fp, #136	; 0x88
   310f4:	orr	r7, r0, #4
   310f8:	sub	r0, fp, #96	; 0x60
   310fc:	orr	r0, r0, #4
   31100:	str	r0, [sp, #44]	; 0x2c
   31104:	ldr	r0, [r9], #4
   31108:	str	r0, [sp, #48]	; 0x30
   3110c:	ldr	r6, [sp, #48]	; 0x30
   31110:	ldr	r1, [sp, #52]	; 0x34
   31114:	cmp	r2, #1
   31118:	add	r0, r6, r4
   3111c:	add	r3, sl, r6, lsl #2
   31120:	blt	3115c <GetDataSlab+0x9798>
   31124:	ldr	r1, [sp, #60]	; 0x3c
   31128:	ldr	r6, [fp, #20]
   3112c:	mov	r4, #0
   31130:	add	r1, r1, r8
   31134:	ldr	r2, [r3, r4, lsl #2]
   31138:	strb	r2, [r1, r4]
   3113c:	add	r4, r4, #1
   31140:	ldr	r2, [r6]
   31144:	cmp	r4, r2
   31148:	blt	31134 <GetDataSlab+0x9770>
   3114c:	ldr	r1, [fp, #12]
   31150:	ldr	r6, [r1]
   31154:	ldr	r1, [fp, #8]
   31158:	ldr	r1, [r1]
   3115c:	str	r1, [sp, #52]	; 0x34
   31160:	sub	r1, r1, r6
   31164:	str	r6, [sp, #48]	; 0x30
   31168:	add	r4, r0, r1
   3116c:	ldr	r0, [fp, #24]
   31170:	add	sl, r3, r1, lsl #2
   31174:	cmp	r0, #2
   31178:	blt	31224 <GetDataSlab+0x9860>
   3117c:	mov	r1, #0
   31180:	mov	r0, r1
   31184:	ldr	r1, [r7, r1, lsl #2]
   31188:	add	r1, r1, #1
   3118c:	str	r1, [r7, r0, lsl #2]
   31190:	ldr	r6, [ip, r0, lsl #2]
   31194:	sdiv	lr, r1, r6
   31198:	mls	r1, lr, r6, r1
   3119c:	cmp	r1, #0
   311a0:	bne	31214 <GetDataSlab+0x9850>
   311a4:	mov	r1, #0
   311a8:	sub	r3, fp, #176	; 0xb0
   311ac:	str	r1, [r7, r0, lsl #2]
   311b0:	add	r1, r3, r0, lsl #2
   311b4:	ldr	r1, [r1, #4]
   311b8:	sdiv	r6, r4, r1
   311bc:	mls	r6, r6, r1, r4
   311c0:	cmp	r6, #0
   311c4:	beq	311e0 <GetDataSlab+0x981c>
   311c8:	ldr	r5, [r3, r0, lsl #2]
   311cc:	ldr	r3, [r9, r0, lsl #2]
   311d0:	sub	r1, r1, r6
   311d4:	mla	r1, r3, r5, r1
   311d8:	add	r4, r1, r4
   311dc:	b	311f8 <GetDataSlab+0x9834>
   311e0:	ldr	r1, [r9, r0, lsl #2]
   311e4:	cmp	r1, #0
   311e8:	beq	311fc <GetDataSlab+0x9838>
   311ec:	ldr	r3, [r3, r0, lsl #2]
   311f0:	mla	r4, r3, r1, r4
   311f4:	mul	r1, r3, r1
   311f8:	add	sl, sl, r1, lsl #2
   311fc:	ldr	r3, [fp, #24]
   31200:	add	r1, r0, #1
   31204:	add	r0, r0, #2
   31208:	cmp	r0, r3
   3120c:	blt	31180 <GetDataSlab+0x97bc>
   31210:	b	31224 <GetDataSlab+0x9860>
   31214:	ldr	r1, [sp, #44]	; 0x2c
   31218:	ldr	r0, [r1, r0, lsl #2]
   3121c:	add	sl, sl, r0, lsl #2
   31220:	add	r4, r0, r4
   31224:	ldr	r1, [sp, #56]	; 0x38
   31228:	add	r8, r2, r8
   3122c:	mov	r0, #0
   31230:	cmp	r8, r1
   31234:	blt	3110c <GetDataSlab+0x9748>
   31238:	b	47ffc <GetDataSlab+0x20638>
   3123c:	ldr	r5, [r3]
   31240:	ldr	r9, [fp, #8]
   31244:	ldr	r8, [fp, #12]
   31248:	mov	r4, #0
   3124c:	sub	r3, fp, #176	; 0xb0
   31250:	sub	r0, r5, #1
   31254:	str	r0, [fp, #-96]	; 0xffffffa0
   31258:	ldr	r0, [r9]
   3125c:	str	r0, [fp, #-176]	; 0xffffff50
   31260:	str	r0, [sp, #52]	; 0x34
   31264:	ldr	r0, [fp, #24]
   31268:	ldr	r2, [sl]
   3126c:	sub	sl, fp, #96	; 0x60
   31270:	cmp	r0, #2
   31274:	mov	r0, r2
   31278:	str	r2, [sp, #56]	; 0x38
   3127c:	blt	313e0 <GetDataSlab+0x9a1c>
   31280:	ldr	r7, [sp, #52]	; 0x34
   31284:	sub	r0, r9, #4
   31288:	sub	r6, r9, #12
   3128c:	mov	ip, #1
   31290:	mov	lr, #0
   31294:	mov	r4, #0
   31298:	str	r2, [sp, #56]	; 0x38
   3129c:	mov	r1, r7
   312a0:	str	r7, [sp, #44]	; 0x2c
   312a4:	mov	r1, r2
   312a8:	ldr	r1, [fp, #16]
   312ac:	add	lr, lr, #1
   312b0:	str	r6, [sp, #40]	; 0x28
   312b4:	cmp	lr, #4
   312b8:	str	lr, [sp, #36]	; 0x24
   312bc:	ldr	r1, [r1, ip, lsl #2]
   312c0:	str	r7, [r3, ip, lsl #2]
   312c4:	sub	r8, r1, #1
   312c8:	str	r8, [sl, ip, lsl #2]
   312cc:	ldr	r1, [r9, ip, lsl #2]
   312d0:	str	r1, [sp, #32]
   312d4:	bcs	312e0 <GetDataSlab+0x991c>
   312d8:	mov	r3, ip
   312dc:	b	31374 <GetDataSlab+0x99b0>
   312e0:	vmov.i32	q9, #1	; 0x00000001
   312e4:	vmov.i32	q10, #1	; 0x00000001
   312e8:	vmov.i32	q8, #1	; 0x00000001
   312ec:	bic	sl, lr, #3
   312f0:	vmov.32	d23[1], r1
   312f4:	bic	r9, ip, #3
   312f8:	mov	r1, r6
   312fc:	vmov.32	d18[0], r7
   31300:	vmov.32	d20[0], r8
   31304:	sub	r3, ip, sl
   31308:	mvn	r7, #15
   3130c:	vorr	d16, d18, d18
   31310:	vmov.i32	q9, #1	; 0x00000001
   31314:	vorr	d18, d20, d20
   31318:	vld1.32	{d20-d21}, [r1], r7
   3131c:	subs	r9, r9, #4
   31320:	vrev64.32	q12, q10
   31324:	vext.8	q12, q12, q12, #8
   31328:	vext.8	q11, q11, q12, #12
   3132c:	vmul.i32	q9, q9, q12
   31330:	vmul.i32	q8, q11, q8
   31334:	vorr	q11, q12, q12
   31338:	bne	31318 <GetDataSlab+0x9954>
   3133c:	vext.8	q11, q9, q8, #8
   31340:	vext.8	q12, q8, q8, #8
   31344:	cmp	lr, sl
   31348:	vmul.i32	q0, q9, q11
   3134c:	vmul.i32	q1, q8, q12
   31350:	vmul.i32	q8, q0, d0[1]
   31354:	vmul.i32	q9, q1, d2[1]
   31358:	vmov.32	r8, d16[0]
   3135c:	vmov.32	r7, d18[0]
   31360:	bne	3136c <GetDataSlab+0x99a8>
   31364:	ldr	r9, [fp, #8]
   31368:	b	31388 <GetDataSlab+0x99c4>
   3136c:	ldr	r9, [fp, #8]
   31370:	vmov.32	r1, d20[0]
   31374:	mul	r7, r1, r7
   31378:	ldr	r1, [r0, r3, lsl #2]
   3137c:	subs	r3, r3, #1
   31380:	mul	r8, r8, r1
   31384:	bne	31374 <GetDataSlab+0x99b0>
   31388:	sub	sl, fp, #96	; 0x60
   3138c:	sub	r3, fp, #176	; 0xb0
   31390:	ldr	r6, [sp, #44]	; 0x2c
   31394:	ldr	lr, [sp, #56]	; 0x38
   31398:	str	r7, [sp, #44]	; 0x2c
   3139c:	str	r8, [sl, ip, lsl #2]
   313a0:	ldr	r8, [fp, #12]
   313a4:	str	r7, [r3, ip, lsl #2]
   313a8:	ldr	r7, [sp, #32]
   313ac:	ldr	r1, [r8, ip, lsl #2]
   313b0:	mla	r4, r1, r6, r4
   313b4:	ldr	r1, [fp, #20]
   313b8:	ldr	r6, [sp, #40]	; 0x28
   313bc:	ldr	r1, [r1, ip, lsl #2]
   313c0:	add	ip, ip, #1
   313c4:	add	r6, r6, #4
   313c8:	mul	lr, r1, lr
   313cc:	ldr	r1, [fp, #24]
   313d0:	str	lr, [sp, #56]	; 0x38
   313d4:	ldr	lr, [sp, #36]	; 0x24
   313d8:	cmp	ip, r1
   313dc:	bne	312a8 <GetDataSlab+0x98e4>
   313e0:	ldr	r0, [sp, #48]	; 0x30
   313e4:	cmp	r5, #1
   313e8:	add	ip, r0, r4, lsl #2
   313ec:	bne	40264 <GetDataSlab+0x188a0>
   313f0:	ldr	r0, [sp, #56]	; 0x38
   313f4:	cmp	r0, #1
   313f8:	ldr	r0, [fp, #20]
   313fc:	blt	2a430 <GetDataSlab+0x2a6c>
   31400:	add	r9, r0, #4
   31404:	sub	r0, fp, #136	; 0x88
   31408:	mov	sl, r8
   3140c:	mov	lr, #0
   31410:	orr	r7, r0, #4
   31414:	sub	r0, fp, #96	; 0x60
   31418:	orr	r0, r0, #4
   3141c:	str	r0, [sp, #44]	; 0x2c
   31420:	ldr	r0, [sl], #4
   31424:	str	r0, [sp, #48]	; 0x30
   31428:	ldr	r1, [sp, #48]	; 0x30
   3142c:	ldr	r0, [sp, #52]	; 0x34
   31430:	cmp	r2, #1
   31434:	add	r5, r1, r4
   31438:	add	r8, ip, r1, lsl #2
   3143c:	blt	31488 <GetDataSlab+0x9ac4>
   31440:	ldr	r0, [sp, #60]	; 0x3c
   31444:	ldr	r6, [fp, #20]
   31448:	mov	r3, r8
   3144c:	add	r4, r0, lr
   31450:	mov	r0, #0
   31454:	vldr	s0, [r3]
   31458:	add	r3, r3, #4
   3145c:	vcvt.u32.f32	s0, s0
   31460:	vmov	r1, s0
   31464:	strb	r1, [r4, r0]
   31468:	add	r0, r0, #1
   3146c:	ldr	r2, [r6]
   31470:	cmp	r0, r2
   31474:	blt	31454 <GetDataSlab+0x9a90>
   31478:	ldr	r0, [fp, #12]
   3147c:	ldr	r1, [r0]
   31480:	ldr	r0, [fp, #8]
   31484:	ldr	r0, [r0]
   31488:	str	r0, [sp, #52]	; 0x34
   3148c:	sub	r0, r0, r1
   31490:	str	r1, [sp, #48]	; 0x30
   31494:	add	ip, r8, r0, lsl #2
   31498:	add	r4, r5, r0
   3149c:	ldr	r0, [fp, #24]
   314a0:	cmp	r0, #2
   314a4:	blt	31554 <GetDataSlab+0x9b90>
   314a8:	mov	r6, #0
   314ac:	mov	r8, #0
   314b0:	ldr	r1, [r7, r6, lsl #2]
   314b4:	mov	r0, r6
   314b8:	add	r1, r1, #1
   314bc:	str	r1, [r7, r6, lsl #2]
   314c0:	ldr	r6, [r9, r6, lsl #2]
   314c4:	sdiv	r5, r1, r6
   314c8:	mls	r1, r5, r6, r1
   314cc:	cmp	r1, #0
   314d0:	bne	31544 <GetDataSlab+0x9b80>
   314d4:	sub	r3, fp, #176	; 0xb0
   314d8:	str	r8, [r7, r0, lsl #2]
   314dc:	add	r1, r3, r0, lsl #2
   314e0:	ldr	r6, [r1, #4]
   314e4:	sdiv	r1, r4, r6
   314e8:	mls	r1, r1, r6, r4
   314ec:	cmp	r1, #0
   314f0:	beq	3150c <GetDataSlab+0x9b48>
   314f4:	ldr	r5, [r3, r0, lsl #2]
   314f8:	ldr	r3, [sl, r0, lsl #2]
   314fc:	sub	r1, r6, r1
   31500:	mla	r1, r3, r5, r1
   31504:	add	r4, r1, r4
   31508:	b	31528 <GetDataSlab+0x9b64>
   3150c:	ldr	r1, [sl, r0, lsl #2]
   31510:	cmp	r1, #0
   31514:	beq	3152c <GetDataSlab+0x9b68>
   31518:	sub	r3, fp, #176	; 0xb0
   3151c:	ldr	r3, [r3, r0, lsl #2]
   31520:	mla	r4, r3, r1, r4
   31524:	mul	r1, r3, r1
   31528:	add	ip, ip, r1, lsl #2
   3152c:	ldr	r1, [fp, #24]
   31530:	add	r6, r0, #1
   31534:	add	r0, r0, #2
   31538:	cmp	r0, r1
   3153c:	blt	314b0 <GetDataSlab+0x9aec>
   31540:	b	31554 <GetDataSlab+0x9b90>
   31544:	ldr	r1, [sp, #44]	; 0x2c
   31548:	ldr	r0, [r1, r0, lsl #2]
   3154c:	add	ip, ip, r0, lsl #2
   31550:	add	r4, r0, r4
   31554:	ldr	r1, [sp, #56]	; 0x38
   31558:	add	lr, r2, lr
   3155c:	mov	r0, #0
   31560:	cmp	lr, r1
   31564:	blt	31428 <GetDataSlab+0x9a64>
   31568:	b	47ffc <GetDataSlab+0x20638>
   3156c:	ldr	r5, [r3]
   31570:	ldr	r9, [fp, #8]
   31574:	ldr	r8, [fp, #12]
   31578:	mov	r4, #0
   3157c:	sub	r3, fp, #176	; 0xb0
   31580:	sub	r0, r5, #1
   31584:	str	r0, [fp, #-96]	; 0xffffffa0
   31588:	ldr	r0, [r9]
   3158c:	str	r0, [fp, #-176]	; 0xffffff50
   31590:	str	r0, [sp, #52]	; 0x34
   31594:	ldr	r0, [fp, #24]
   31598:	ldr	r2, [sl]
   3159c:	sub	sl, fp, #96	; 0x60
   315a0:	cmp	r0, #2
   315a4:	mov	r0, r2
   315a8:	str	r2, [sp, #56]	; 0x38
   315ac:	blt	31710 <GetDataSlab+0x9d4c>
   315b0:	ldr	r7, [sp, #52]	; 0x34
   315b4:	sub	r0, r9, #4
   315b8:	sub	r6, r9, #12
   315bc:	mov	ip, #1
   315c0:	mov	lr, #0
   315c4:	mov	r4, #0
   315c8:	str	r2, [sp, #56]	; 0x38
   315cc:	mov	r1, r7
   315d0:	str	r7, [sp, #44]	; 0x2c
   315d4:	mov	r1, r2
   315d8:	ldr	r1, [fp, #16]
   315dc:	add	lr, lr, #1
   315e0:	str	r6, [sp, #40]	; 0x28
   315e4:	cmp	lr, #4
   315e8:	str	lr, [sp, #36]	; 0x24
   315ec:	ldr	r1, [r1, ip, lsl #2]
   315f0:	str	r7, [r3, ip, lsl #2]
   315f4:	sub	r8, r1, #1
   315f8:	str	r8, [sl, ip, lsl #2]
   315fc:	ldr	r1, [r9, ip, lsl #2]
   31600:	str	r1, [sp, #32]
   31604:	bcs	31610 <GetDataSlab+0x9c4c>
   31608:	mov	r3, ip
   3160c:	b	316a4 <GetDataSlab+0x9ce0>
   31610:	vmov.i32	q9, #1	; 0x00000001
   31614:	vmov.i32	q10, #1	; 0x00000001
   31618:	vmov.i32	q8, #1	; 0x00000001
   3161c:	bic	sl, lr, #3
   31620:	vmov.32	d23[1], r1
   31624:	bic	r9, ip, #3
   31628:	mov	r1, r6
   3162c:	vmov.32	d18[0], r7
   31630:	vmov.32	d20[0], r8
   31634:	sub	r3, ip, sl
   31638:	mvn	r7, #15
   3163c:	vorr	d16, d18, d18
   31640:	vmov.i32	q9, #1	; 0x00000001
   31644:	vorr	d18, d20, d20
   31648:	vld1.32	{d20-d21}, [r1], r7
   3164c:	subs	r9, r9, #4
   31650:	vrev64.32	q12, q10
   31654:	vext.8	q12, q12, q12, #8
   31658:	vext.8	q11, q11, q12, #12
   3165c:	vmul.i32	q9, q9, q12
   31660:	vmul.i32	q8, q11, q8
   31664:	vorr	q11, q12, q12
   31668:	bne	31648 <GetDataSlab+0x9c84>
   3166c:	vext.8	q11, q9, q8, #8
   31670:	vext.8	q12, q8, q8, #8
   31674:	cmp	lr, sl
   31678:	vmul.i32	q0, q9, q11
   3167c:	vmul.i32	q1, q8, q12
   31680:	vmul.i32	q8, q0, d0[1]
   31684:	vmul.i32	q9, q1, d2[1]
   31688:	vmov.32	r8, d16[0]
   3168c:	vmov.32	r7, d18[0]
   31690:	bne	3169c <GetDataSlab+0x9cd8>
   31694:	ldr	r9, [fp, #8]
   31698:	b	316b8 <GetDataSlab+0x9cf4>
   3169c:	ldr	r9, [fp, #8]
   316a0:	vmov.32	r1, d20[0]
   316a4:	mul	r7, r1, r7
   316a8:	ldr	r1, [r0, r3, lsl #2]
   316ac:	subs	r3, r3, #1
   316b0:	mul	r8, r8, r1
   316b4:	bne	316a4 <GetDataSlab+0x9ce0>
   316b8:	sub	sl, fp, #96	; 0x60
   316bc:	sub	r3, fp, #176	; 0xb0
   316c0:	ldr	r6, [sp, #44]	; 0x2c
   316c4:	ldr	lr, [sp, #56]	; 0x38
   316c8:	str	r7, [sp, #44]	; 0x2c
   316cc:	str	r8, [sl, ip, lsl #2]
   316d0:	ldr	r8, [fp, #12]
   316d4:	str	r7, [r3, ip, lsl #2]
   316d8:	ldr	r7, [sp, #32]
   316dc:	ldr	r1, [r8, ip, lsl #2]
   316e0:	mla	r4, r1, r6, r4
   316e4:	ldr	r1, [fp, #20]
   316e8:	ldr	r6, [sp, #40]	; 0x28
   316ec:	ldr	r1, [r1, ip, lsl #2]
   316f0:	add	ip, ip, #1
   316f4:	add	r6, r6, #4
   316f8:	mul	lr, r1, lr
   316fc:	ldr	r1, [fp, #24]
   31700:	str	lr, [sp, #56]	; 0x38
   31704:	ldr	lr, [sp, #36]	; 0x24
   31708:	cmp	ip, r1
   3170c:	bne	315d8 <GetDataSlab+0x9c14>
   31710:	ldr	r0, [sp, #48]	; 0x30
   31714:	cmp	r5, #1
   31718:	add	ip, r0, r4, lsl #3
   3171c:	bne	40408 <GetDataSlab+0x18a44>
   31720:	ldr	r0, [sp, #56]	; 0x38
   31724:	cmp	r0, #1
   31728:	ldr	r0, [fp, #20]
   3172c:	blt	2a430 <GetDataSlab+0x2a6c>
   31730:	add	r9, r0, #4
   31734:	sub	r0, fp, #136	; 0x88
   31738:	mov	sl, r8
   3173c:	mov	lr, #0
   31740:	orr	r7, r0, #4
   31744:	sub	r0, fp, #96	; 0x60
   31748:	orr	r0, r0, #4
   3174c:	str	r0, [sp, #44]	; 0x2c
   31750:	ldr	r0, [sl], #4
   31754:	str	r0, [sp, #48]	; 0x30
   31758:	ldr	r1, [sp, #48]	; 0x30
   3175c:	ldr	r0, [sp, #52]	; 0x34
   31760:	cmp	r2, #1
   31764:	add	r5, r1, r4
   31768:	add	r8, ip, r1, lsl #3
   3176c:	blt	317b8 <GetDataSlab+0x9df4>
   31770:	ldr	r0, [sp, #60]	; 0x3c
   31774:	ldr	r6, [fp, #20]
   31778:	mov	r3, r8
   3177c:	add	r4, r0, lr
   31780:	mov	r0, #0
   31784:	vldr	d16, [r3]
   31788:	add	r3, r3, #8
   3178c:	vcvt.u32.f64	s0, d16
   31790:	vmov	r1, s0
   31794:	strb	r1, [r4, r0]
   31798:	add	r0, r0, #1
   3179c:	ldr	r2, [r6]
   317a0:	cmp	r0, r2
   317a4:	blt	31784 <GetDataSlab+0x9dc0>
   317a8:	ldr	r0, [fp, #12]
   317ac:	ldr	r1, [r0]
   317b0:	ldr	r0, [fp, #8]
   317b4:	ldr	r0, [r0]
   317b8:	str	r0, [sp, #52]	; 0x34
   317bc:	sub	r0, r0, r1
   317c0:	str	r1, [sp, #48]	; 0x30
   317c4:	add	ip, r8, r0, lsl #3
   317c8:	add	r4, r5, r0
   317cc:	ldr	r0, [fp, #24]
   317d0:	cmp	r0, #2
   317d4:	blt	31884 <GetDataSlab+0x9ec0>
   317d8:	mov	r6, #0
   317dc:	mov	r8, #0
   317e0:	ldr	r1, [r7, r6, lsl #2]
   317e4:	mov	r0, r6
   317e8:	add	r1, r1, #1
   317ec:	str	r1, [r7, r6, lsl #2]
   317f0:	ldr	r6, [r9, r6, lsl #2]
   317f4:	sdiv	r5, r1, r6
   317f8:	mls	r1, r5, r6, r1
   317fc:	cmp	r1, #0
   31800:	bne	31874 <GetDataSlab+0x9eb0>
   31804:	sub	r3, fp, #176	; 0xb0
   31808:	str	r8, [r7, r0, lsl #2]
   3180c:	add	r1, r3, r0, lsl #2
   31810:	ldr	r6, [r1, #4]
   31814:	sdiv	r1, r4, r6
   31818:	mls	r1, r1, r6, r4
   3181c:	cmp	r1, #0
   31820:	beq	3183c <GetDataSlab+0x9e78>
   31824:	ldr	r5, [r3, r0, lsl #2]
   31828:	ldr	r3, [sl, r0, lsl #2]
   3182c:	sub	r1, r6, r1
   31830:	mla	r1, r3, r5, r1
   31834:	add	r4, r1, r4
   31838:	b	31858 <GetDataSlab+0x9e94>
   3183c:	ldr	r1, [sl, r0, lsl #2]
   31840:	cmp	r1, #0
   31844:	beq	3185c <GetDataSlab+0x9e98>
   31848:	sub	r3, fp, #176	; 0xb0
   3184c:	ldr	r3, [r3, r0, lsl #2]
   31850:	mla	r4, r3, r1, r4
   31854:	mul	r1, r3, r1
   31858:	add	ip, ip, r1, lsl #3
   3185c:	ldr	r1, [fp, #24]
   31860:	add	r6, r0, #1
   31864:	add	r0, r0, #2
   31868:	cmp	r0, r1
   3186c:	blt	317e0 <GetDataSlab+0x9e1c>
   31870:	b	31884 <GetDataSlab+0x9ec0>
   31874:	ldr	r1, [sp, #44]	; 0x2c
   31878:	ldr	r0, [r1, r0, lsl #2]
   3187c:	add	ip, ip, r0, lsl #3
   31880:	add	r4, r0, r4
   31884:	ldr	r1, [sp, #56]	; 0x38
   31888:	add	lr, r2, lr
   3188c:	mov	r0, #0
   31890:	cmp	lr, r1
   31894:	blt	31758 <GetDataSlab+0x9d94>
   31898:	b	47ffc <GetDataSlab+0x20638>
   3189c:	ldr	r5, [r3]
   318a0:	mov	r3, #0
   318a4:	sub	r8, fp, #176	; 0xb0
   318a8:	str	r6, [sp, #40]	; 0x28
   318ac:	sub	r0, r5, #1
   318b0:	str	r0, [fp, #-96]	; 0xffffffa0
   318b4:	ldr	r0, [fp, #8]
   318b8:	ldr	r0, [r0]
   318bc:	str	r0, [fp, #-176]	; 0xffffff50
   318c0:	str	r0, [sp, #28]
   318c4:	ldr	r0, [fp, #24]
   318c8:	ldr	r1, [sl]
   318cc:	sub	sl, fp, #96	; 0x60
   318d0:	cmp	r0, #2
   318d4:	mov	r0, r1
   318d8:	str	r1, [sp, #56]	; 0x38
   318dc:	blt	31a44 <GetDataSlab+0xa080>
   318e0:	ldr	r0, [fp, #8]
   318e4:	ldr	r6, [sp, #28]
   318e8:	mov	lr, #1
   318ec:	mvn	ip, #15
   318f0:	mov	r3, #0
   318f4:	str	r1, [sp, #56]	; 0x38
   318f8:	sub	r2, r0, #4
   318fc:	sub	r4, r0, #12
   31900:	mov	r0, #0
   31904:	mov	r7, r6
   31908:	str	r0, [sp, #52]	; 0x34
   3190c:	mov	r0, r1
   31910:	ldr	r0, [fp, #16]
   31914:	str	r7, [sp, #44]	; 0x2c
   31918:	str	r4, [sp, #36]	; 0x24
   3191c:	ldr	r0, [r0, lr, lsl #2]
   31920:	str	r6, [r8, lr, lsl #2]
   31924:	sub	r9, r0, #1
   31928:	ldr	r0, [fp, #8]
   3192c:	str	r9, [sl, lr, lsl #2]
   31930:	ldr	sl, [sp, #52]	; 0x34
   31934:	ldr	r0, [r0, lr, lsl #2]
   31938:	add	sl, sl, #1
   3193c:	cmp	sl, #4
   31940:	str	sl, [sp, #52]	; 0x34
   31944:	str	r0, [sp, #32]
   31948:	bcs	31958 <GetDataSlab+0x9f94>
   3194c:	mov	r7, r0
   31950:	mov	r0, lr
   31954:	b	319dc <GetDataSlab+0xa018>
   31958:	vmov.i32	q9, #1	; 0x00000001
   3195c:	vmov.i32	q10, #1	; 0x00000001
   31960:	vmov.i32	q8, #1	; 0x00000001
   31964:	bic	r7, sl, #3
   31968:	vmov.32	d23[1], r0
   3196c:	bic	r8, lr, #3
   31970:	vmov.32	d18[0], r6
   31974:	vmov.32	d20[0], r9
   31978:	sub	r0, lr, r7
   3197c:	mov	r6, r4
   31980:	vorr	d16, d18, d18
   31984:	vmov.i32	q9, #1	; 0x00000001
   31988:	vorr	d18, d20, d20
   3198c:	vld1.32	{d20-d21}, [r6], ip
   31990:	subs	r8, r8, #4
   31994:	vrev64.32	q12, q10
   31998:	vext.8	q12, q12, q12, #8
   3199c:	vext.8	q11, q11, q12, #12
   319a0:	vmul.i32	q9, q9, q12
   319a4:	vmul.i32	q8, q11, q8
   319a8:	vorr	q11, q12, q12
   319ac:	bne	3198c <GetDataSlab+0x9fc8>
   319b0:	vext.8	q11, q9, q8, #8
   319b4:	vext.8	q12, q8, q8, #8
   319b8:	cmp	sl, r7
   319bc:	vmul.i32	q0, q9, q11
   319c0:	vmul.i32	q1, q8, q12
   319c4:	vmul.i32	q8, q0, d0[1]
   319c8:	vmul.i32	q9, q1, d2[1]
   319cc:	vmov.32	r9, d16[0]
   319d0:	vmov.32	r6, d18[0]
   319d4:	beq	319f0 <GetDataSlab+0xa02c>
   319d8:	vmov.32	r7, d20[0]
   319dc:	mul	r6, r7, r6
   319e0:	ldr	r7, [r2, r0, lsl #2]
   319e4:	subs	r0, r0, #1
   319e8:	mul	r9, r9, r7
   319ec:	bne	319dc <GetDataSlab+0xa018>
   319f0:	ldr	r0, [fp, #12]
   319f4:	sub	r8, fp, #176	; 0xb0
   319f8:	sub	sl, fp, #96	; 0x60
   319fc:	ldr	r4, [sp, #44]	; 0x2c
   31a00:	mov	r7, r6
   31a04:	str	r6, [r8, lr, lsl #2]
   31a08:	str	r9, [sl, lr, lsl #2]
   31a0c:	ldr	r6, [sp, #32]
   31a10:	ldr	r0, [r0, lr, lsl #2]
   31a14:	mla	r3, r0, r4, r3
   31a18:	ldr	r0, [fp, #20]
   31a1c:	ldr	r4, [sp, #56]	; 0x38
   31a20:	ldr	r0, [r0, lr, lsl #2]
   31a24:	add	lr, lr, #1
   31a28:	mul	r4, r0, r4
   31a2c:	ldr	r0, [fp, #24]
   31a30:	str	r4, [sp, #56]	; 0x38
   31a34:	ldr	r4, [sp, #36]	; 0x24
   31a38:	cmp	lr, r0
   31a3c:	add	r4, r4, #4
   31a40:	bne	31910 <GetDataSlab+0x9f4c>
   31a44:	ldr	r0, [sp, #48]	; 0x30
   31a48:	cmp	r5, #1
   31a4c:	add	sl, r0, r3, lsl #3
   31a50:	bne	405ac <GetDataSlab+0x18be8>
   31a54:	ldr	r0, [sp, #56]	; 0x38
   31a58:	cmp	r0, #1
   31a5c:	blt	40730 <GetDataSlab+0x18d6c>
   31a60:	ldr	r8, [fp, #12]
   31a64:	ldr	r0, [fp, #20]
   31a68:	mov	ip, #0
   31a6c:	ldr	lr, [r8], #4
   31a70:	add	r9, r0, #4
   31a74:	sub	r0, fp, #136	; 0x88
   31a78:	orr	r2, r0, #4
   31a7c:	sub	r0, fp, #96	; 0x60
   31a80:	orr	r0, r0, #4
   31a84:	str	r0, [sp, #52]	; 0x34
   31a88:	add	r6, lr, r3
   31a8c:	add	r3, sl, lr, lsl #3
   31a90:	cmp	r1, #1
   31a94:	blt	31ad8 <GetDataSlab+0xa114>
   31a98:	ldr	r0, [sp, #60]	; 0x3c
   31a9c:	ldr	r7, [fp, #20]
   31aa0:	mov	r4, r3
   31aa4:	add	r5, r0, ip
   31aa8:	mov	r0, #0
   31aac:	ldrb	r1, [r4], #8
   31ab0:	strb	r1, [r5, r0]
   31ab4:	add	r0, r0, #1
   31ab8:	ldr	r1, [r7]
   31abc:	cmp	r0, r1
   31ac0:	blt	31aac <GetDataSlab+0xa0e8>
   31ac4:	ldr	r0, [fp, #12]
   31ac8:	ldr	lr, [r0]
   31acc:	ldr	r0, [fp, #8]
   31ad0:	ldr	r0, [r0]
   31ad4:	str	r0, [sp, #28]
   31ad8:	ldr	r0, [sp, #28]
   31adc:	sub	r0, r0, lr
   31ae0:	add	sl, r3, r0, lsl #3
   31ae4:	add	r3, r6, r0
   31ae8:	ldr	r0, [fp, #24]
   31aec:	cmp	r0, #2
   31af0:	blt	31ba0 <GetDataSlab+0xa1dc>
   31af4:	mov	r0, #0
   31af8:	mov	r5, r0
   31afc:	ldr	r0, [r2, r0, lsl #2]
   31b00:	add	r0, r0, #1
   31b04:	str	r0, [r2, r5, lsl #2]
   31b08:	ldr	r7, [r9, r5, lsl #2]
   31b0c:	sdiv	r6, r0, r7
   31b10:	mls	r0, r6, r7, r0
   31b14:	cmp	r0, #0
   31b18:	bne	31b90 <GetDataSlab+0xa1cc>
   31b1c:	mov	r0, #0
   31b20:	sub	r4, fp, #176	; 0xb0
   31b24:	str	r0, [r2, r5, lsl #2]
   31b28:	add	r0, r4, r5, lsl #2
   31b2c:	ldr	r0, [r0, #4]
   31b30:	sdiv	r6, r3, r0
   31b34:	mls	r7, r6, r0, r3
   31b38:	cmp	r7, #0
   31b3c:	beq	31b58 <GetDataSlab+0xa194>
   31b40:	ldr	r6, [r4, r5, lsl #2]
   31b44:	ldr	r4, [r8, r5, lsl #2]
   31b48:	sub	r0, r0, r7
   31b4c:	mla	r0, r4, r6, r0
   31b50:	add	r3, r0, r3
   31b54:	b	31b74 <GetDataSlab+0xa1b0>
   31b58:	ldr	r0, [r8, r5, lsl #2]
   31b5c:	cmp	r0, #0
   31b60:	beq	31b78 <GetDataSlab+0xa1b4>
   31b64:	sub	r4, fp, #176	; 0xb0
   31b68:	ldr	r4, [r4, r5, lsl #2]
   31b6c:	mla	r3, r4, r0, r3
   31b70:	mul	r0, r4, r0
   31b74:	add	sl, sl, r0, lsl #3
   31b78:	add	r0, r5, #1
   31b7c:	add	r4, r5, #2
   31b80:	ldr	r5, [fp, #24]
   31b84:	cmp	r4, r5
   31b88:	blt	31af8 <GetDataSlab+0xa134>
   31b8c:	b	31ba0 <GetDataSlab+0xa1dc>
   31b90:	ldr	r0, [sp, #52]	; 0x34
   31b94:	ldr	r0, [r0, r5, lsl #2]
   31b98:	add	sl, sl, r0, lsl #3
   31b9c:	add	r3, r0, r3
   31ba0:	ldr	r0, [sp, #56]	; 0x38
   31ba4:	add	ip, r1, ip
   31ba8:	cmp	ip, r0
   31bac:	blt	31a88 <GetDataSlab+0xa0c4>
   31bb0:	b	40730 <GetDataSlab+0x18d6c>
   31bb4:	ldr	r9, [ip]
   31bb8:	mov	r3, #0
   31bbc:	sub	r7, fp, #176	; 0xb0
   31bc0:	sub	lr, fp, #96	; 0x60
   31bc4:	sub	r0, r9, #1
   31bc8:	str	r0, [fp, #-96]	; 0xffffffa0
   31bcc:	ldr	r0, [fp, #8]
   31bd0:	ldr	r0, [r0]
   31bd4:	str	r0, [fp, #-176]	; 0xffffff50
   31bd8:	str	r0, [sp, #36]	; 0x24
   31bdc:	ldr	r0, [fp, #24]
   31be0:	ldr	r1, [sl]
   31be4:	cmp	r0, #2
   31be8:	str	r1, [sp, #32]
   31bec:	str	r1, [sp, #56]	; 0x38
   31bf0:	blt	31d50 <GetDataSlab+0xa38c>
   31bf4:	ldr	r0, [fp, #8]
   31bf8:	ldr	r2, [sp, #36]	; 0x24
   31bfc:	mov	r6, #1
   31c00:	mvn	r8, #15
   31c04:	mov	r3, #0
   31c08:	mov	r1, r0
   31c0c:	sub	r0, r0, #4
   31c10:	mov	r4, r2
   31c14:	sub	ip, r1, #12
   31c18:	mov	r1, #0
   31c1c:	str	r1, [sp, #52]	; 0x34
   31c20:	ldr	r1, [sp, #32]
   31c24:	str	r1, [sp, #56]	; 0x38
   31c28:	ldr	r1, [fp, #16]
   31c2c:	str	r4, [sp, #44]	; 0x2c
   31c30:	ldr	r5, [sp, #52]	; 0x34
   31c34:	ldr	r1, [r1, r6, lsl #2]
   31c38:	str	r2, [r7, r6, lsl #2]
   31c3c:	add	r5, r5, #1
   31c40:	cmp	r5, #4
   31c44:	str	r5, [sp, #52]	; 0x34
   31c48:	sub	r4, r1, #1
   31c4c:	ldr	r1, [fp, #8]
   31c50:	str	r4, [lr, r6, lsl #2]
   31c54:	ldr	r1, [r1, r6, lsl #2]
   31c58:	str	r1, [sp, #40]	; 0x28
   31c5c:	bcs	31c68 <GetDataSlab+0xa2a4>
   31c60:	mov	r7, r6
   31c64:	b	31cf0 <GetDataSlab+0xa32c>
   31c68:	vmov.i32	q9, #1	; 0x00000001
   31c6c:	vmov.i32	q10, #1	; 0x00000001
   31c70:	vmov.i32	q8, #1	; 0x00000001
   31c74:	bic	lr, r5, #3
   31c78:	vmov.32	d23[1], r1
   31c7c:	bic	sl, r6, #3
   31c80:	mov	r1, ip
   31c84:	vmov.32	d18[0], r2
   31c88:	vmov.32	d20[0], r4
   31c8c:	sub	r7, r6, lr
   31c90:	vorr	d16, d18, d18
   31c94:	vmov.i32	q9, #1	; 0x00000001
   31c98:	vorr	d18, d20, d20
   31c9c:	vld1.32	{d20-d21}, [r1], r8
   31ca0:	subs	sl, sl, #4
   31ca4:	vrev64.32	q12, q10
   31ca8:	vext.8	q12, q12, q12, #8
   31cac:	vext.8	q11, q11, q12, #12
   31cb0:	vmul.i32	q9, q9, q12
   31cb4:	vmul.i32	q8, q11, q8
   31cb8:	vorr	q11, q12, q12
   31cbc:	bne	31c9c <GetDataSlab+0xa2d8>
   31cc0:	vext.8	q11, q9, q8, #8
   31cc4:	vext.8	q12, q8, q8, #8
   31cc8:	ldr	sl, [fp, #20]
   31ccc:	cmp	r5, lr
   31cd0:	vmul.i32	q0, q9, q11
   31cd4:	vmul.i32	q1, q8, q12
   31cd8:	vmul.i32	q8, q0, d0[1]
   31cdc:	vmul.i32	q9, q1, d2[1]
   31ce0:	vmov.32	r4, d16[0]
   31ce4:	vmov.32	r2, d18[0]
   31ce8:	beq	31d04 <GetDataSlab+0xa340>
   31cec:	vmov.32	r1, d20[0]
   31cf0:	mul	r2, r1, r2
   31cf4:	ldr	r1, [r0, r7, lsl #2]
   31cf8:	subs	r7, r7, #1
   31cfc:	mul	r4, r4, r1
   31d00:	bne	31cf0 <GetDataSlab+0xa32c>
   31d04:	ldr	r1, [fp, #12]
   31d08:	sub	r7, fp, #176	; 0xb0
   31d0c:	sub	lr, fp, #96	; 0x60
   31d10:	add	ip, ip, #4
   31d14:	str	r4, [lr, r6, lsl #2]
   31d18:	str	r2, [r7, r6, lsl #2]
   31d1c:	ldr	r4, [sp, #44]	; 0x2c
   31d20:	ldr	r1, [r1, r6, lsl #2]
   31d24:	mla	r3, r1, r4, r3
   31d28:	ldr	r1, [sl, r6, lsl #2]
   31d2c:	ldr	r4, [sp, #56]	; 0x38
   31d30:	add	r6, r6, #1
   31d34:	mul	r4, r1, r4
   31d38:	ldr	r1, [fp, #24]
   31d3c:	str	r4, [sp, #56]	; 0x38
   31d40:	mov	r4, r2
   31d44:	ldr	r2, [sp, #40]	; 0x28
   31d48:	cmp	r6, r1
   31d4c:	bne	31c28 <GetDataSlab+0xa264>
   31d50:	ldr	r0, [sp, #48]	; 0x30
   31d54:	cmp	r9, #1
   31d58:	add	r5, r0, r3
   31d5c:	bne	40a84 <GetDataSlab+0x190c0>
   31d60:	ldr	r0, [sp, #56]	; 0x38
   31d64:	ldr	r1, [fp, #12]
   31d68:	sub	r2, fp, #96	; 0x60
   31d6c:	cmp	r0, #1
   31d70:	ldr	r0, [sp, #60]	; 0x3c
   31d74:	blt	47ff8 <GetDataSlab+0x20634>
   31d78:	add	r8, sl, #4
   31d7c:	ldr	sl, [sp, #32]
   31d80:	add	r9, r1, #4
   31d84:	sub	r1, fp, #136	; 0x88
   31d88:	str	r0, [sp, #52]	; 0x34
   31d8c:	mov	r0, #0
   31d90:	mov	lr, #0
   31d94:	orr	r4, r1, #4
   31d98:	orr	r1, r2, #4
   31d9c:	str	r0, [sp, #48]	; 0x30
   31da0:	str	r1, [sp, #28]
   31da4:	bic	r1, sl, #7
   31da8:	lsl	ip, sl, #1
   31dac:	str	r1, [sp, #40]	; 0x28
   31db0:	cmp	sl, #1
   31db4:	blt	31e80 <GetDataSlab+0xa4bc>
   31db8:	ldr	r0, [fp, #12]
   31dbc:	cmp	sl, #8
   31dc0:	ldr	r7, [r0]
   31dc4:	mov	r0, #0
   31dc8:	str	r7, [sp, #44]	; 0x2c
   31dcc:	bcc	31e58 <GetDataSlab+0xa494>
   31dd0:	ldr	r1, [sp, #60]	; 0x3c
   31dd4:	ldr	r2, [sp, #48]	; 0x30
   31dd8:	mov	r6, ip
   31ddc:	mla	ip, ip, r2, r1
   31de0:	add	r1, r5, sl
   31de4:	add	r2, r5, r7
   31de8:	add	r1, r1, r7
   31dec:	ldr	r7, [sp, #60]	; 0x3c
   31df0:	cmp	ip, r1
   31df4:	bcs	31e10 <GetDataSlab+0xa44c>
   31df8:	ldr	r1, [sp, #48]	; 0x30
   31dfc:	mov	ip, r6
   31e00:	mla	r1, r6, r1, r6
   31e04:	add	r1, r7, r1
   31e08:	cmp	r2, r1
   31e0c:	bcc	31e58 <GetDataSlab+0xa494>
   31e10:	ldr	r0, [sp, #40]	; 0x28
   31e14:	ldr	ip, [sp, #52]	; 0x34
   31e18:	sub	r7, fp, #200	; 0xc8
   31e1c:	ldr	r1, [r2]
   31e20:	ldr	sl, [r2, #4]
   31e24:	subs	r0, r0, #8
   31e28:	add	r2, r2, #8
   31e2c:	str	sl, [fp, #-196]	; 0xffffff3c
   31e30:	str	r1, [fp, #-200]	; 0xffffff38
   31e34:	vld1.8	{d16}, [r7 :64]
   31e38:	vmovl.u8	q8, d16
   31e3c:	vst1.16	{d16-d17}, [ip]!
   31e40:	bne	31e1c <GetDataSlab+0xa458>
   31e44:	ldr	sl, [sp, #32]
   31e48:	ldr	r0, [sp, #40]	; 0x28
   31e4c:	mov	ip, r6
   31e50:	cmp	sl, r0
   31e54:	beq	31e80 <GetDataSlab+0xa4bc>
   31e58:	ldr	r1, [sp, #52]	; 0x34
   31e5c:	ldr	r6, [sp, #44]	; 0x2c
   31e60:	sub	r2, sl, r0
   31e64:	add	r1, r1, r0, lsl #1
   31e68:	add	r0, r0, r6
   31e6c:	add	r0, r5, r0
   31e70:	ldrb	r6, [r0], #1
   31e74:	subs	r2, r2, #1
   31e78:	strh	r6, [r1], #2
   31e7c:	bne	31e70 <GetDataSlab+0xa4ac>
   31e80:	ldr	r0, [sp, #36]	; 0x24
   31e84:	add	r5, r5, r0
   31e88:	add	r3, r3, r0
   31e8c:	ldr	r0, [fp, #24]
   31e90:	cmp	r0, #2
   31e94:	blt	31f40 <GetDataSlab+0xa57c>
   31e98:	mov	r1, #0
   31e9c:	mov	r0, r1
   31ea0:	ldr	r1, [r4, r1, lsl #2]
   31ea4:	add	r1, r1, #1
   31ea8:	str	r1, [r4, r0, lsl #2]
   31eac:	ldr	r2, [r8, r0, lsl #2]
   31eb0:	sdiv	r6, r1, r2
   31eb4:	mls	r1, r6, r2, r1
   31eb8:	cmp	r1, #0
   31ebc:	bne	31f30 <GetDataSlab+0xa56c>
   31ec0:	mov	r1, #0
   31ec4:	sub	r7, fp, #176	; 0xb0
   31ec8:	str	r1, [r4, r0, lsl #2]
   31ecc:	add	r1, r7, r0, lsl #2
   31ed0:	ldr	r1, [r1, #4]
   31ed4:	sdiv	r2, r3, r1
   31ed8:	mls	r2, r2, r1, r3
   31edc:	cmp	r2, #0
   31ee0:	beq	31f00 <GetDataSlab+0xa53c>
   31ee4:	ldr	r6, [r7, r0, lsl #2]
   31ee8:	ldr	r7, [r9, r0, lsl #2]
   31eec:	sub	r1, r1, r2
   31ef0:	mla	r1, r7, r6, r1
   31ef4:	add	r3, r1, r3
   31ef8:	add	r5, r5, r1
   31efc:	b	31f18 <GetDataSlab+0xa554>
   31f00:	ldr	r1, [r9, r0, lsl #2]
   31f04:	cmp	r1, #0
   31f08:	subne	r2, fp, #176	; 0xb0
   31f0c:	ldrne	r2, [r2, r0, lsl #2]
   31f10:	mlane	r3, r2, r1, r3
   31f14:	mlane	r5, r2, r1, r5
   31f18:	ldr	r2, [fp, #24]
   31f1c:	add	r1, r0, #1
   31f20:	add	r0, r0, #2
   31f24:	cmp	r0, r2
   31f28:	blt	31e9c <GetDataSlab+0xa4d8>
   31f2c:	b	31f40 <GetDataSlab+0xa57c>
   31f30:	ldr	r1, [sp, #28]
   31f34:	ldr	r0, [r1, r0, lsl #2]
   31f38:	add	r5, r5, r0
   31f3c:	add	r3, r0, r3
   31f40:	ldr	r0, [sp, #52]	; 0x34
   31f44:	ldr	r1, [sp, #56]	; 0x38
   31f48:	add	lr, lr, sl
   31f4c:	add	r0, r0, ip
   31f50:	cmp	lr, r1
   31f54:	str	r0, [sp, #52]	; 0x34
   31f58:	ldr	r0, [sp, #48]	; 0x30
   31f5c:	add	r0, r0, #1
   31f60:	str	r0, [sp, #48]	; 0x30
   31f64:	mov	r0, #0
   31f68:	blt	31db0 <GetDataSlab+0xa3ec>
   31f6c:	b	47ffc <GetDataSlab+0x20638>
   31f70:	ldr	r0, [ip]
   31f74:	mov	r2, #0
   31f78:	sub	r5, fp, #176	; 0xb0
   31f7c:	sub	r6, fp, #96	; 0x60
   31f80:	str	r0, [sp, #24]
   31f84:	sub	r0, r0, #1
   31f88:	str	r0, [fp, #-96]	; 0xffffffa0
   31f8c:	ldr	r0, [fp, #8]
   31f90:	ldr	r0, [r0]
   31f94:	str	r0, [fp, #-176]	; 0xffffff50
   31f98:	str	r0, [sp, #40]	; 0x28
   31f9c:	ldr	r0, [fp, #24]
   31fa0:	ldr	r1, [sl]
   31fa4:	cmp	r0, #2
   31fa8:	str	r1, [sp, #44]	; 0x2c
   31fac:	str	r1, [sp, #52]	; 0x34
   31fb0:	blt	320f8 <GetDataSlab+0xa734>
   31fb4:	ldr	r0, [fp, #8]
   31fb8:	ldr	r3, [sp, #40]	; 0x28
   31fbc:	mov	r4, #1
   31fc0:	mov	lr, #0
   31fc4:	mvn	ip, #15
   31fc8:	mov	r2, #0
   31fcc:	sub	r7, r0, #4
   31fd0:	sub	r9, r0, #12
   31fd4:	ldr	r0, [sp, #44]	; 0x2c
   31fd8:	mov	r8, r3
   31fdc:	str	r0, [sp, #52]	; 0x34
   31fe0:	ldr	r1, [fp, #16]
   31fe4:	add	lr, lr, #1
   31fe8:	cmp	lr, #4
   31fec:	ldr	r1, [r1, r4, lsl #2]
   31ff0:	str	r3, [r5, r4, lsl #2]
   31ff4:	sub	r1, r1, #1
   31ff8:	str	r1, [r6, r4, lsl #2]
   31ffc:	ldr	r6, [fp, #8]
   32000:	ldr	r6, [r6, r4, lsl #2]
   32004:	str	r6, [sp, #56]	; 0x38
   32008:	bcs	32014 <GetDataSlab+0xa650>
   3200c:	mov	r5, r4
   32010:	b	3209c <GetDataSlab+0xa6d8>
   32014:	vmov.i32	q9, #1	; 0x00000001
   32018:	vmov.i32	q10, #1	; 0x00000001
   3201c:	vmov.i32	q8, #1	; 0x00000001
   32020:	vmov.32	d23[1], r6
   32024:	bic	r6, lr, #3
   32028:	bic	sl, r4, #3
   3202c:	vmov.32	d18[0], r3
   32030:	vmov.32	d20[0], r1
   32034:	sub	r5, r4, r6
   32038:	mov	r1, r9
   3203c:	vorr	d16, d18, d18
   32040:	vmov.i32	q9, #1	; 0x00000001
   32044:	vorr	d18, d20, d20
   32048:	vld1.32	{d20-d21}, [r1], ip
   3204c:	subs	sl, sl, #4
   32050:	vrev64.32	q12, q10
   32054:	vext.8	q12, q12, q12, #8
   32058:	vext.8	q11, q11, q12, #12
   3205c:	vmul.i32	q9, q9, q12
   32060:	vmul.i32	q8, q11, q8
   32064:	vorr	q11, q12, q12
   32068:	bne	32048 <GetDataSlab+0xa684>
   3206c:	vext.8	q11, q9, q8, #8
   32070:	vext.8	q12, q8, q8, #8
   32074:	ldr	sl, [fp, #20]
   32078:	cmp	lr, r6
   3207c:	vmul.i32	q0, q9, q11
   32080:	vmul.i32	q1, q8, q12
   32084:	vmul.i32	q8, q0, d0[1]
   32088:	vmul.i32	q9, q1, d2[1]
   3208c:	vmov.32	r1, d16[0]
   32090:	vmov.32	r3, d18[0]
   32094:	beq	320b0 <GetDataSlab+0xa6ec>
   32098:	vmov.32	r6, d20[0]
   3209c:	mul	r3, r6, r3
   320a0:	ldr	r6, [r7, r5, lsl #2]
   320a4:	subs	r5, r5, #1
   320a8:	mul	r1, r1, r6
   320ac:	bne	3209c <GetDataSlab+0xa6d8>
   320b0:	sub	r6, fp, #96	; 0x60
   320b4:	sub	r5, fp, #176	; 0xb0
   320b8:	ldr	r0, [sp, #52]	; 0x34
   320bc:	add	r9, r9, #4
   320c0:	str	r1, [r6, r4, lsl #2]
   320c4:	ldr	r1, [fp, #12]
   320c8:	str	r3, [r5, r4, lsl #2]
   320cc:	ldr	r1, [r1, r4, lsl #2]
   320d0:	mla	r2, r1, r8, r2
   320d4:	ldr	r1, [sl, r4, lsl #2]
   320d8:	mov	r8, r3
   320dc:	ldr	r3, [sp, #56]	; 0x38
   320e0:	add	r4, r4, #1
   320e4:	mul	r0, r1, r0
   320e8:	ldr	r1, [fp, #24]
   320ec:	str	r0, [sp, #52]	; 0x34
   320f0:	cmp	r4, r1
   320f4:	bne	31fe0 <GetDataSlab+0xa61c>
   320f8:	ldr	r0, [sp, #48]	; 0x30
   320fc:	ldr	r6, [sp, #24]
   32100:	add	r9, r0, r2, lsl #1
   32104:	cmp	r6, #1
   32108:	bne	40c1c <GetDataSlab+0x19258>
   3210c:	ldr	r0, [sp, #52]	; 0x34
   32110:	ldr	ip, [sp, #60]	; 0x3c
   32114:	ldr	r8, [fp, #12]
   32118:	ldr	r1, [sp, #44]	; 0x2c
   3211c:	cmp	r0, #1
   32120:	blt	47ff8 <GetDataSlab+0x20634>
   32124:	ldr	r0, [r8], #4
   32128:	add	r6, sl, #4
   3212c:	mov	r5, #0
   32130:	mov	lr, #0
   32134:	str	r0, [sp, #48]	; 0x30
   32138:	add	r0, r1, r0
   3213c:	str	r0, [sp, #36]	; 0x24
   32140:	sub	r0, fp, #136	; 0x88
   32144:	orr	r7, r0, #4
   32148:	sub	r0, fp, #96	; 0x60
   3214c:	orr	r0, r0, #4
   32150:	str	r0, [sp, #28]
   32154:	bic	r0, r1, #7
   32158:	str	r0, [sp, #32]
   3215c:	lsl	r0, r1, #1
   32160:	str	r0, [sp, #56]	; 0x38
   32164:	cmp	r1, #1
   32168:	blt	32208 <GetDataSlab+0xa844>
   3216c:	ldr	r0, [sp, #48]	; 0x30
   32170:	mov	r1, #0
   32174:	add	r4, r9, r0, lsl #1
   32178:	ldr	r0, [sp, #44]	; 0x2c
   3217c:	cmp	r0, #8
   32180:	bcc	321e4 <GetDataSlab+0xa820>
   32184:	ldr	r0, [sp, #60]	; 0x3c
   32188:	ldr	r3, [sp, #56]	; 0x38
   3218c:	mla	r0, r3, r5, r0
   32190:	ldr	r3, [sp, #36]	; 0x24
   32194:	add	r3, r9, r3, lsl #1
   32198:	cmp	r0, r3
   3219c:	bcs	321b8 <GetDataSlab+0xa7f4>
   321a0:	ldr	r0, [sp, #56]	; 0x38
   321a4:	ldr	r3, [sp, #60]	; 0x3c
   321a8:	mla	r0, r0, r5, r0
   321ac:	add	r0, r3, r0
   321b0:	cmp	r0, r4
   321b4:	bhi	321e4 <GetDataSlab+0xa820>
   321b8:	ldr	r1, [sp, #32]
   321bc:	mov	r3, ip
   321c0:	mov	r0, r4
   321c4:	vld1.16	{d16-d17}, [r0]!
   321c8:	subs	r1, r1, #8
   321cc:	vst1.16	{d16-d17}, [r3]!
   321d0:	bne	321c4 <GetDataSlab+0xa800>
   321d4:	ldr	r0, [sp, #44]	; 0x2c
   321d8:	ldr	r1, [sp, #32]
   321dc:	cmp	r0, r1
   321e0:	beq	32208 <GetDataSlab+0xa844>
   321e4:	ldr	r0, [sp, #44]	; 0x2c
   321e8:	mov	r3, #0
   321ec:	sub	r0, r0, r1
   321f0:	sub	r1, r3, r1, lsl #1
   321f4:	ldrh	r3, [r4, -r1]
   321f8:	subs	r0, r0, #1
   321fc:	strh	r3, [ip, -r1]
   32200:	sub	r1, r1, #2
   32204:	bne	321f4 <GetDataSlab+0xa830>
   32208:	ldr	r0, [sp, #40]	; 0x28
   3220c:	add	r9, r9, r0, lsl #1
   32210:	add	r2, r2, r0
   32214:	ldr	r0, [fp, #24]
   32218:	cmp	r0, #2
   3221c:	blt	322cc <GetDataSlab+0xa908>
   32220:	mov	r1, #0
   32224:	mov	r0, r1
   32228:	ldr	r1, [r7, r1, lsl #2]
   3222c:	add	r1, r1, #1
   32230:	str	r1, [r7, r0, lsl #2]
   32234:	ldr	r3, [r6, r0, lsl #2]
   32238:	sdiv	r4, r1, r3
   3223c:	mls	r1, r4, r3, r1
   32240:	cmp	r1, #0
   32244:	bne	322bc <GetDataSlab+0xa8f8>
   32248:	mov	r1, #0
   3224c:	sub	r4, fp, #176	; 0xb0
   32250:	str	r1, [r7, r0, lsl #2]
   32254:	add	r1, r4, r0, lsl #2
   32258:	ldr	r1, [r1, #4]
   3225c:	sdiv	r3, r2, r1
   32260:	mls	r3, r3, r1, r2
   32264:	cmp	r3, #0
   32268:	beq	32284 <GetDataSlab+0xa8c0>
   3226c:	ldr	r4, [r4, r0, lsl #2]
   32270:	ldr	sl, [r8, r0, lsl #2]
   32274:	sub	r1, r1, r3
   32278:	mla	r1, sl, r4, r1
   3227c:	add	r2, r1, r2
   32280:	b	322a0 <GetDataSlab+0xa8dc>
   32284:	ldr	r1, [r8, r0, lsl #2]
   32288:	cmp	r1, #0
   3228c:	beq	322a4 <GetDataSlab+0xa8e0>
   32290:	sub	r3, fp, #176	; 0xb0
   32294:	ldr	r3, [r3, r0, lsl #2]
   32298:	mla	r2, r3, r1, r2
   3229c:	mul	r1, r3, r1
   322a0:	add	r9, r9, r1, lsl #1
   322a4:	ldr	r3, [fp, #24]
   322a8:	add	r1, r0, #1
   322ac:	add	r0, r0, #2
   322b0:	cmp	r0, r3
   322b4:	blt	32224 <GetDataSlab+0xa860>
   322b8:	b	322cc <GetDataSlab+0xa908>
   322bc:	ldr	r1, [sp, #28]
   322c0:	ldr	r0, [r1, r0, lsl #2]
   322c4:	add	r9, r9, r0, lsl #1
   322c8:	add	r2, r0, r2
   322cc:	ldr	r1, [sp, #44]	; 0x2c
   322d0:	ldr	r0, [sp, #56]	; 0x38
   322d4:	ldr	r3, [sp, #52]	; 0x34
   322d8:	add	r5, r5, #1
   322dc:	add	lr, lr, r1
   322e0:	add	ip, ip, r0
   322e4:	mov	r0, #0
   322e8:	cmp	lr, r3
   322ec:	blt	32164 <GetDataSlab+0xa7a0>
   322f0:	b	47ffc <GetDataSlab+0x20638>
   322f4:	ldr	r0, [ip]
   322f8:	mov	r2, #0
   322fc:	sub	r5, fp, #176	; 0xb0
   32300:	sub	r6, fp, #96	; 0x60
   32304:	str	r0, [sp, #24]
   32308:	sub	r0, r0, #1
   3230c:	str	r0, [fp, #-96]	; 0xffffffa0
   32310:	ldr	r0, [fp, #8]
   32314:	ldr	r0, [r0]
   32318:	str	r0, [fp, #-176]	; 0xffffff50
   3231c:	str	r0, [sp, #40]	; 0x28
   32320:	ldr	r0, [fp, #24]
   32324:	ldr	r1, [sl]
   32328:	cmp	r0, #2
   3232c:	str	r1, [sp, #44]	; 0x2c
   32330:	str	r1, [sp, #52]	; 0x34
   32334:	blt	3247c <GetDataSlab+0xaab8>
   32338:	ldr	r0, [fp, #8]
   3233c:	ldr	r3, [sp, #40]	; 0x28
   32340:	mov	r4, #1
   32344:	mov	lr, #0
   32348:	mvn	ip, #15
   3234c:	mov	r2, #0
   32350:	sub	r7, r0, #4
   32354:	sub	r9, r0, #12
   32358:	ldr	r0, [sp, #44]	; 0x2c
   3235c:	mov	r8, r3
   32360:	str	r0, [sp, #52]	; 0x34
   32364:	ldr	r1, [fp, #16]
   32368:	add	lr, lr, #1
   3236c:	cmp	lr, #4
   32370:	ldr	r1, [r1, r4, lsl #2]
   32374:	str	r3, [r5, r4, lsl #2]
   32378:	sub	r1, r1, #1
   3237c:	str	r1, [r6, r4, lsl #2]
   32380:	ldr	r6, [fp, #8]
   32384:	ldr	r6, [r6, r4, lsl #2]
   32388:	str	r6, [sp, #56]	; 0x38
   3238c:	bcs	32398 <GetDataSlab+0xa9d4>
   32390:	mov	r5, r4
   32394:	b	32420 <GetDataSlab+0xaa5c>
   32398:	vmov.i32	q9, #1	; 0x00000001
   3239c:	vmov.i32	q10, #1	; 0x00000001
   323a0:	vmov.i32	q8, #1	; 0x00000001
   323a4:	vmov.32	d23[1], r6
   323a8:	bic	r6, lr, #3
   323ac:	bic	sl, r4, #3
   323b0:	vmov.32	d18[0], r3
   323b4:	vmov.32	d20[0], r1
   323b8:	sub	r5, r4, r6
   323bc:	mov	r1, r9
   323c0:	vorr	d16, d18, d18
   323c4:	vmov.i32	q9, #1	; 0x00000001
   323c8:	vorr	d18, d20, d20
   323cc:	vld1.32	{d20-d21}, [r1], ip
   323d0:	subs	sl, sl, #4
   323d4:	vrev64.32	q12, q10
   323d8:	vext.8	q12, q12, q12, #8
   323dc:	vext.8	q11, q11, q12, #12
   323e0:	vmul.i32	q9, q9, q12
   323e4:	vmul.i32	q8, q11, q8
   323e8:	vorr	q11, q12, q12
   323ec:	bne	323cc <GetDataSlab+0xaa08>
   323f0:	vext.8	q11, q9, q8, #8
   323f4:	vext.8	q12, q8, q8, #8
   323f8:	ldr	sl, [fp, #20]
   323fc:	cmp	lr, r6
   32400:	vmul.i32	q0, q9, q11
   32404:	vmul.i32	q1, q8, q12
   32408:	vmul.i32	q8, q0, d0[1]
   3240c:	vmul.i32	q9, q1, d2[1]
   32410:	vmov.32	r1, d16[0]
   32414:	vmov.32	r3, d18[0]
   32418:	beq	32434 <GetDataSlab+0xaa70>
   3241c:	vmov.32	r6, d20[0]
   32420:	mul	r3, r6, r3
   32424:	ldr	r6, [r7, r5, lsl #2]
   32428:	subs	r5, r5, #1
   3242c:	mul	r1, r1, r6
   32430:	bne	32420 <GetDataSlab+0xaa5c>
   32434:	sub	r6, fp, #96	; 0x60
   32438:	sub	r5, fp, #176	; 0xb0
   3243c:	ldr	r0, [sp, #52]	; 0x34
   32440:	add	r9, r9, #4
   32444:	str	r1, [r6, r4, lsl #2]
   32448:	ldr	r1, [fp, #12]
   3244c:	str	r3, [r5, r4, lsl #2]
   32450:	ldr	r1, [r1, r4, lsl #2]
   32454:	mla	r2, r1, r8, r2
   32458:	ldr	r1, [sl, r4, lsl #2]
   3245c:	mov	r8, r3
   32460:	ldr	r3, [sp, #56]	; 0x38
   32464:	add	r4, r4, #1
   32468:	mul	r0, r1, r0
   3246c:	ldr	r1, [fp, #24]
   32470:	str	r0, [sp, #52]	; 0x34
   32474:	cmp	r4, r1
   32478:	bne	32364 <GetDataSlab+0xa9a0>
   3247c:	ldr	r0, [sp, #48]	; 0x30
   32480:	ldr	r6, [sp, #24]
   32484:	add	r9, r0, r2, lsl #1
   32488:	cmp	r6, #1
   3248c:	bne	40da8 <GetDataSlab+0x193e4>
   32490:	ldr	r0, [sp, #52]	; 0x34
   32494:	ldr	ip, [sp, #60]	; 0x3c
   32498:	ldr	r8, [fp, #12]
   3249c:	ldr	r1, [sp, #44]	; 0x2c
   324a0:	cmp	r0, #1
   324a4:	blt	47ff8 <GetDataSlab+0x20634>
   324a8:	ldr	r0, [r8], #4
   324ac:	add	r6, sl, #4
   324b0:	mov	r5, #0
   324b4:	mov	lr, #0
   324b8:	str	r0, [sp, #48]	; 0x30
   324bc:	add	r0, r1, r0
   324c0:	str	r0, [sp, #36]	; 0x24
   324c4:	sub	r0, fp, #136	; 0x88
   324c8:	orr	r7, r0, #4
   324cc:	sub	r0, fp, #96	; 0x60
   324d0:	orr	r0, r0, #4
   324d4:	str	r0, [sp, #28]
   324d8:	bic	r0, r1, #7
   324dc:	str	r0, [sp, #32]
   324e0:	lsl	r0, r1, #1
   324e4:	str	r0, [sp, #56]	; 0x38
   324e8:	cmp	r1, #1
   324ec:	blt	3258c <GetDataSlab+0xabc8>
   324f0:	ldr	r0, [sp, #48]	; 0x30
   324f4:	mov	r1, #0
   324f8:	add	r4, r9, r0, lsl #1
   324fc:	ldr	r0, [sp, #44]	; 0x2c
   32500:	cmp	r0, #8
   32504:	bcc	32568 <GetDataSlab+0xaba4>
   32508:	ldr	r0, [sp, #60]	; 0x3c
   3250c:	ldr	r3, [sp, #56]	; 0x38
   32510:	mla	r0, r3, r5, r0
   32514:	ldr	r3, [sp, #36]	; 0x24
   32518:	add	r3, r9, r3, lsl #1
   3251c:	cmp	r0, r3
   32520:	bcs	3253c <GetDataSlab+0xab78>
   32524:	ldr	r0, [sp, #56]	; 0x38
   32528:	ldr	r3, [sp, #60]	; 0x3c
   3252c:	mla	r0, r0, r5, r0
   32530:	add	r0, r3, r0
   32534:	cmp	r0, r4
   32538:	bhi	32568 <GetDataSlab+0xaba4>
   3253c:	ldr	r1, [sp, #32]
   32540:	mov	r3, ip
   32544:	mov	r0, r4
   32548:	vld1.16	{d16-d17}, [r0]!
   3254c:	subs	r1, r1, #8
   32550:	vst1.16	{d16-d17}, [r3]!
   32554:	bne	32548 <GetDataSlab+0xab84>
   32558:	ldr	r0, [sp, #44]	; 0x2c
   3255c:	ldr	r1, [sp, #32]
   32560:	cmp	r0, r1
   32564:	beq	3258c <GetDataSlab+0xabc8>
   32568:	ldr	r0, [sp, #44]	; 0x2c
   3256c:	mov	r3, #0
   32570:	sub	r0, r0, r1
   32574:	sub	r1, r3, r1, lsl #1
   32578:	ldrh	r3, [r4, -r1]
   3257c:	subs	r0, r0, #1
   32580:	strh	r3, [ip, -r1]
   32584:	sub	r1, r1, #2
   32588:	bne	32578 <GetDataSlab+0xabb4>
   3258c:	ldr	r0, [sp, #40]	; 0x28
   32590:	add	r9, r9, r0, lsl #1
   32594:	add	r2, r2, r0
   32598:	ldr	r0, [fp, #24]
   3259c:	cmp	r0, #2
   325a0:	blt	32650 <GetDataSlab+0xac8c>
   325a4:	mov	r1, #0
   325a8:	mov	r0, r1
   325ac:	ldr	r1, [r7, r1, lsl #2]
   325b0:	add	r1, r1, #1
   325b4:	str	r1, [r7, r0, lsl #2]
   325b8:	ldr	r3, [r6, r0, lsl #2]
   325bc:	sdiv	r4, r1, r3
   325c0:	mls	r1, r4, r3, r1
   325c4:	cmp	r1, #0
   325c8:	bne	32640 <GetDataSlab+0xac7c>
   325cc:	mov	r1, #0
   325d0:	sub	r4, fp, #176	; 0xb0
   325d4:	str	r1, [r7, r0, lsl #2]
   325d8:	add	r1, r4, r0, lsl #2
   325dc:	ldr	r1, [r1, #4]
   325e0:	sdiv	r3, r2, r1
   325e4:	mls	r3, r3, r1, r2
   325e8:	cmp	r3, #0
   325ec:	beq	32608 <GetDataSlab+0xac44>
   325f0:	ldr	r4, [r4, r0, lsl #2]
   325f4:	ldr	sl, [r8, r0, lsl #2]
   325f8:	sub	r1, r1, r3
   325fc:	mla	r1, sl, r4, r1
   32600:	add	r2, r1, r2
   32604:	b	32624 <GetDataSlab+0xac60>
   32608:	ldr	r1, [r8, r0, lsl #2]
   3260c:	cmp	r1, #0
   32610:	beq	32628 <GetDataSlab+0xac64>
   32614:	sub	r3, fp, #176	; 0xb0
   32618:	ldr	r3, [r3, r0, lsl #2]
   3261c:	mla	r2, r3, r1, r2
   32620:	mul	r1, r3, r1
   32624:	add	r9, r9, r1, lsl #1
   32628:	ldr	r3, [fp, #24]
   3262c:	add	r1, r0, #1
   32630:	add	r0, r0, #2
   32634:	cmp	r0, r3
   32638:	blt	325a8 <GetDataSlab+0xabe4>
   3263c:	b	32650 <GetDataSlab+0xac8c>
   32640:	ldr	r1, [sp, #28]
   32644:	ldr	r0, [r1, r0, lsl #2]
   32648:	add	r9, r9, r0, lsl #1
   3264c:	add	r2, r0, r2
   32650:	ldr	r1, [sp, #44]	; 0x2c
   32654:	ldr	r0, [sp, #56]	; 0x38
   32658:	ldr	r3, [sp, #52]	; 0x34
   3265c:	add	r5, r5, #1
   32660:	add	lr, lr, r1
   32664:	add	ip, ip, r0
   32668:	mov	r0, #0
   3266c:	cmp	lr, r3
   32670:	blt	324e8 <GetDataSlab+0xab24>
   32674:	b	47ffc <GetDataSlab+0x20638>
   32678:	ldr	r0, [ip]
   3267c:	mov	r3, #0
   32680:	sub	r6, fp, #176	; 0xb0
   32684:	sub	lr, fp, #96	; 0x60
   32688:	str	r0, [sp, #28]
   3268c:	sub	r0, r0, #1
   32690:	str	r0, [fp, #-96]	; 0xffffffa0
   32694:	ldr	r0, [fp, #8]
   32698:	ldr	r0, [r0]
   3269c:	str	r0, [fp, #-176]	; 0xffffff50
   326a0:	str	r0, [sp, #36]	; 0x24
   326a4:	ldr	r0, [fp, #24]
   326a8:	ldr	r1, [sl]
   326ac:	cmp	r0, #2
   326b0:	str	r1, [sp, #52]	; 0x34
   326b4:	str	r1, [sp, #56]	; 0x38
   326b8:	blt	32808 <GetDataSlab+0xae44>
   326bc:	ldr	r0, [fp, #8]
   326c0:	ldr	r2, [sp, #36]	; 0x24
   326c4:	mov	r5, #1
   326c8:	mov	r9, #0
   326cc:	mvn	r4, #15
   326d0:	mov	r3, #0
   326d4:	sub	r7, r0, #4
   326d8:	sub	r8, r0, #12
   326dc:	mov	r0, r2
   326e0:	str	r2, [sp, #44]	; 0x2c
   326e4:	ldr	r0, [sp, #52]	; 0x34
   326e8:	str	r0, [sp, #56]	; 0x38
   326ec:	ldr	r0, [ip, r5, lsl #2]
   326f0:	str	r2, [r6, r5, lsl #2]
   326f4:	add	r9, r9, #1
   326f8:	cmp	r9, #4
   326fc:	sub	ip, r0, #1
   32700:	ldr	r0, [fp, #8]
   32704:	str	ip, [lr, r5, lsl #2]
   32708:	ldr	r0, [r0, r5, lsl #2]
   3270c:	str	r0, [sp, #40]	; 0x28
   32710:	bcs	3271c <GetDataSlab+0xad58>
   32714:	mov	r6, r5
   32718:	b	327a4 <GetDataSlab+0xade0>
   3271c:	vmov.i32	q9, #1	; 0x00000001
   32720:	vmov.i32	q10, #1	; 0x00000001
   32724:	vmov.i32	q8, #1	; 0x00000001
   32728:	vmov.32	d23[1], r0
   3272c:	bic	r0, r9, #3
   32730:	bic	sl, r5, #3
   32734:	vmov.32	d18[0], r2
   32738:	vmov.32	d20[0], ip
   3273c:	sub	r6, r5, r0
   32740:	mov	r2, r8
   32744:	vorr	d16, d18, d18
   32748:	vmov.i32	q9, #1	; 0x00000001
   3274c:	vorr	d18, d20, d20
   32750:	vld1.32	{d20-d21}, [r2], r4
   32754:	subs	sl, sl, #4
   32758:	vrev64.32	q12, q10
   3275c:	vext.8	q12, q12, q12, #8
   32760:	vext.8	q11, q11, q12, #12
   32764:	vmul.i32	q9, q9, q12
   32768:	vmul.i32	q8, q11, q8
   3276c:	vorr	q11, q12, q12
   32770:	bne	32750 <GetDataSlab+0xad8c>
   32774:	vext.8	q11, q9, q8, #8
   32778:	vext.8	q12, q8, q8, #8
   3277c:	ldr	sl, [fp, #20]
   32780:	cmp	r9, r0
   32784:	vmul.i32	q0, q9, q11
   32788:	vmul.i32	q1, q8, q12
   3278c:	vmul.i32	q8, q0, d0[1]
   32790:	vmul.i32	q9, q1, d2[1]
   32794:	vmov.32	ip, d16[0]
   32798:	vmov.32	r2, d18[0]
   3279c:	beq	327b8 <GetDataSlab+0xadf4>
   327a0:	vmov.32	r0, d20[0]
   327a4:	mul	r2, r0, r2
   327a8:	ldr	r0, [r7, r6, lsl #2]
   327ac:	subs	r6, r6, #1
   327b0:	mul	ip, ip, r0
   327b4:	bne	327a4 <GetDataSlab+0xade0>
   327b8:	ldr	r0, [fp, #12]
   327bc:	sub	r6, fp, #176	; 0xb0
   327c0:	sub	lr, fp, #96	; 0x60
   327c4:	ldr	r1, [sp, #44]	; 0x2c
   327c8:	str	r2, [sp, #44]	; 0x2c
   327cc:	add	r8, r8, #4
   327d0:	str	r2, [r6, r5, lsl #2]
   327d4:	str	ip, [lr, r5, lsl #2]
   327d8:	ldr	r2, [sp, #40]	; 0x28
   327dc:	ldr	ip, [fp, #16]
   327e0:	ldr	r0, [r0, r5, lsl #2]
   327e4:	mla	r3, r0, r1, r3
   327e8:	ldr	r0, [sl, r5, lsl #2]
   327ec:	ldr	r1, [sp, #56]	; 0x38
   327f0:	add	r5, r5, #1
   327f4:	mul	r1, r0, r1
   327f8:	ldr	r0, [fp, #24]
   327fc:	str	r1, [sp, #56]	; 0x38
   32800:	cmp	r5, r0
   32804:	bne	326ec <GetDataSlab+0xad28>
   32808:	ldr	r0, [sp, #48]	; 0x30
   3280c:	ldr	r6, [sp, #28]
   32810:	add	sl, r0, r3, lsl #2
   32814:	cmp	r6, #1
   32818:	bne	40f34 <GetDataSlab+0x19570>
   3281c:	ldr	r0, [sp, #56]	; 0x38
   32820:	ldr	r2, [sp, #52]	; 0x34
   32824:	sub	r1, fp, #96	; 0x60
   32828:	cmp	r0, #1
   3282c:	ldr	r0, [fp, #12]
   32830:	blt	47ff8 <GetDataSlab+0x20634>
   32834:	add	r8, r0, #4
   32838:	ldr	r0, [fp, #20]
   3283c:	mov	r9, #0
   32840:	mov	lr, #0
   32844:	add	r6, r0, #4
   32848:	sub	r0, fp, #136	; 0x88
   3284c:	orr	r5, r0, #4
   32850:	orr	r0, r1, #4
   32854:	str	r0, [sp, #40]	; 0x28
   32858:	lsl	r0, r2, #1
   3285c:	str	r0, [sp, #48]	; 0x30
   32860:	bic	r0, r2, #3
   32864:	str	r0, [sp, #44]	; 0x2c
   32868:	ldr	r4, [sp, #60]	; 0x3c
   3286c:	cmp	r2, #1
   32870:	blt	328e0 <GetDataSlab+0xaf1c>
   32874:	ldr	r0, [fp, #12]
   32878:	mov	r1, #0
   3287c:	ldr	r0, [r0]
   32880:	add	r7, sl, r0, lsl #2
   32884:	ldr	r0, [sp, #52]	; 0x34
   32888:	cmp	r0, #4
   3288c:	bcc	328c0 <GetDataSlab+0xaefc>
   32890:	ldr	r2, [sp, #44]	; 0x2c
   32894:	mov	r1, r4
   32898:	mov	r0, r7
   3289c:	vld1.32	{d16-d17}, [r0]!
   328a0:	subs	r2, r2, #4
   328a4:	vmovn.i32	d16, q8
   328a8:	vst1.16	{d16}, [r1]!
   328ac:	bne	3289c <GetDataSlab+0xaed8>
   328b0:	ldr	r0, [sp, #52]	; 0x34
   328b4:	ldr	r1, [sp, #44]	; 0x2c
   328b8:	cmp	r0, r1
   328bc:	beq	328e0 <GetDataSlab+0xaf1c>
   328c0:	ldr	r0, [sp, #52]	; 0x34
   328c4:	sub	r0, r0, r1
   328c8:	sub	r1, r9, r1, lsl #1
   328cc:	ldr	r2, [r7, -r1, lsl #1]
   328d0:	subs	r0, r0, #1
   328d4:	strh	r2, [r4, -r1]
   328d8:	sub	r1, r1, #2
   328dc:	bne	328cc <GetDataSlab+0xaf08>
   328e0:	ldr	r0, [sp, #36]	; 0x24
   328e4:	add	sl, sl, r0, lsl #2
   328e8:	add	r3, r3, r0
   328ec:	ldr	r0, [fp, #24]
   328f0:	cmp	r0, #2
   328f4:	blt	329a4 <GetDataSlab+0xafe0>
   328f8:	mov	r1, #0
   328fc:	mov	r0, r1
   32900:	ldr	r1, [r5, r1, lsl #2]
   32904:	add	r1, r1, #1
   32908:	str	r1, [r5, r0, lsl #2]
   3290c:	ldr	r2, [r6, r0, lsl #2]
   32910:	sdiv	r7, r1, r2
   32914:	mls	r1, r7, r2, r1
   32918:	cmp	r1, #0
   3291c:	bne	32994 <GetDataSlab+0xafd0>
   32920:	sub	r7, fp, #176	; 0xb0
   32924:	str	r9, [r5, r0, lsl #2]
   32928:	add	r1, r7, r0, lsl #2
   3292c:	ldr	r1, [r1, #4]
   32930:	sdiv	r2, r3, r1
   32934:	mls	r2, r2, r1, r3
   32938:	cmp	r2, #0
   3293c:	beq	3295c <GetDataSlab+0xaf98>
   32940:	ldr	r7, [r7, r0, lsl #2]
   32944:	ldr	ip, [r8, r0, lsl #2]
   32948:	ldr	r4, [sp, #60]	; 0x3c
   3294c:	sub	r1, r1, r2
   32950:	mla	r1, ip, r7, r1
   32954:	add	r3, r1, r3
   32958:	b	32978 <GetDataSlab+0xafb4>
   3295c:	ldr	r1, [r8, r0, lsl #2]
   32960:	cmp	r1, #0
   32964:	beq	3297c <GetDataSlab+0xafb8>
   32968:	sub	r2, fp, #176	; 0xb0
   3296c:	ldr	r2, [r2, r0, lsl #2]
   32970:	mla	r3, r2, r1, r3
   32974:	mul	r1, r2, r1
   32978:	add	sl, sl, r1, lsl #2
   3297c:	ldr	r2, [fp, #24]
   32980:	add	r1, r0, #1
   32984:	add	r0, r0, #2
   32988:	cmp	r0, r2
   3298c:	blt	328fc <GetDataSlab+0xaf38>
   32990:	b	329a4 <GetDataSlab+0xafe0>
   32994:	ldr	r1, [sp, #40]	; 0x28
   32998:	ldr	r0, [r1, r0, lsl #2]
   3299c:	add	sl, sl, r0, lsl #2
   329a0:	add	r3, r0, r3
   329a4:	ldr	r2, [sp, #52]	; 0x34
   329a8:	ldr	r0, [sp, #48]	; 0x30
   329ac:	ldr	r1, [sp, #56]	; 0x38
   329b0:	add	lr, lr, r2
   329b4:	add	r4, r4, r0
   329b8:	mov	r0, #0
   329bc:	cmp	lr, r1
   329c0:	str	r4, [sp, #60]	; 0x3c
   329c4:	blt	32868 <GetDataSlab+0xaea4>
   329c8:	b	47ffc <GetDataSlab+0x20638>
   329cc:	ldr	r0, [ip]
   329d0:	mov	r3, #0
   329d4:	sub	r6, fp, #176	; 0xb0
   329d8:	sub	lr, fp, #96	; 0x60
   329dc:	str	r0, [sp, #28]
   329e0:	sub	r0, r0, #1
   329e4:	str	r0, [fp, #-96]	; 0xffffffa0
   329e8:	ldr	r0, [fp, #8]
   329ec:	ldr	r0, [r0]
   329f0:	str	r0, [fp, #-176]	; 0xffffff50
   329f4:	str	r0, [sp, #36]	; 0x24
   329f8:	ldr	r0, [fp, #24]
   329fc:	ldr	r1, [sl]
   32a00:	cmp	r0, #2
   32a04:	str	r1, [sp, #52]	; 0x34
   32a08:	str	r1, [sp, #56]	; 0x38
   32a0c:	blt	32b5c <GetDataSlab+0xb198>
   32a10:	ldr	r0, [fp, #8]
   32a14:	ldr	r2, [sp, #36]	; 0x24
   32a18:	mov	r5, #1
   32a1c:	mov	r9, #0
   32a20:	mvn	r4, #15
   32a24:	mov	r3, #0
   32a28:	sub	r7, r0, #4
   32a2c:	sub	r8, r0, #12
   32a30:	mov	r0, r2
   32a34:	str	r2, [sp, #44]	; 0x2c
   32a38:	ldr	r0, [sp, #52]	; 0x34
   32a3c:	str	r0, [sp, #56]	; 0x38
   32a40:	ldr	r0, [ip, r5, lsl #2]
   32a44:	str	r2, [r6, r5, lsl #2]
   32a48:	add	r9, r9, #1
   32a4c:	cmp	r9, #4
   32a50:	sub	ip, r0, #1
   32a54:	ldr	r0, [fp, #8]
   32a58:	str	ip, [lr, r5, lsl #2]
   32a5c:	ldr	r0, [r0, r5, lsl #2]
   32a60:	str	r0, [sp, #40]	; 0x28
   32a64:	bcs	32a70 <GetDataSlab+0xb0ac>
   32a68:	mov	r6, r5
   32a6c:	b	32af8 <GetDataSlab+0xb134>
   32a70:	vmov.i32	q9, #1	; 0x00000001
   32a74:	vmov.i32	q10, #1	; 0x00000001
   32a78:	vmov.i32	q8, #1	; 0x00000001
   32a7c:	vmov.32	d23[1], r0
   32a80:	bic	r0, r9, #3
   32a84:	bic	sl, r5, #3
   32a88:	vmov.32	d18[0], r2
   32a8c:	vmov.32	d20[0], ip
   32a90:	sub	r6, r5, r0
   32a94:	mov	r2, r8
   32a98:	vorr	d16, d18, d18
   32a9c:	vmov.i32	q9, #1	; 0x00000001
   32aa0:	vorr	d18, d20, d20
   32aa4:	vld1.32	{d20-d21}, [r2], r4
   32aa8:	subs	sl, sl, #4
   32aac:	vrev64.32	q12, q10
   32ab0:	vext.8	q12, q12, q12, #8
   32ab4:	vext.8	q11, q11, q12, #12
   32ab8:	vmul.i32	q9, q9, q12
   32abc:	vmul.i32	q8, q11, q8
   32ac0:	vorr	q11, q12, q12
   32ac4:	bne	32aa4 <GetDataSlab+0xb0e0>
   32ac8:	vext.8	q11, q9, q8, #8
   32acc:	vext.8	q12, q8, q8, #8
   32ad0:	ldr	sl, [fp, #20]
   32ad4:	cmp	r9, r0
   32ad8:	vmul.i32	q0, q9, q11
   32adc:	vmul.i32	q1, q8, q12
   32ae0:	vmul.i32	q8, q0, d0[1]
   32ae4:	vmul.i32	q9, q1, d2[1]
   32ae8:	vmov.32	ip, d16[0]
   32aec:	vmov.32	r2, d18[0]
   32af0:	beq	32b0c <GetDataSlab+0xb148>
   32af4:	vmov.32	r0, d20[0]
   32af8:	mul	r2, r0, r2
   32afc:	ldr	r0, [r7, r6, lsl #2]
   32b00:	subs	r6, r6, #1
   32b04:	mul	ip, ip, r0
   32b08:	bne	32af8 <GetDataSlab+0xb134>
   32b0c:	ldr	r0, [fp, #12]
   32b10:	sub	r6, fp, #176	; 0xb0
   32b14:	sub	lr, fp, #96	; 0x60
   32b18:	ldr	r1, [sp, #44]	; 0x2c
   32b1c:	str	r2, [sp, #44]	; 0x2c
   32b20:	add	r8, r8, #4
   32b24:	str	r2, [r6, r5, lsl #2]
   32b28:	str	ip, [lr, r5, lsl #2]
   32b2c:	ldr	r2, [sp, #40]	; 0x28
   32b30:	ldr	ip, [fp, #16]
   32b34:	ldr	r0, [r0, r5, lsl #2]
   32b38:	mla	r3, r0, r1, r3
   32b3c:	ldr	r0, [sl, r5, lsl #2]
   32b40:	ldr	r1, [sp, #56]	; 0x38
   32b44:	add	r5, r5, #1
   32b48:	mul	r1, r0, r1
   32b4c:	ldr	r0, [fp, #24]
   32b50:	str	r1, [sp, #56]	; 0x38
   32b54:	cmp	r5, r0
   32b58:	bne	32a40 <GetDataSlab+0xb07c>
   32b5c:	ldr	r0, [sp, #48]	; 0x30
   32b60:	ldr	r6, [sp, #28]
   32b64:	add	sl, r0, r3, lsl #2
   32b68:	cmp	r6, #1
   32b6c:	bne	410c8 <GetDataSlab+0x19704>
   32b70:	ldr	r0, [sp, #56]	; 0x38
   32b74:	ldr	r2, [sp, #52]	; 0x34
   32b78:	sub	r1, fp, #96	; 0x60
   32b7c:	cmp	r0, #1
   32b80:	ldr	r0, [fp, #12]
   32b84:	blt	47ff8 <GetDataSlab+0x20634>
   32b88:	add	r8, r0, #4
   32b8c:	ldr	r0, [fp, #20]
   32b90:	mov	r9, #0
   32b94:	mov	lr, #0
   32b98:	add	r6, r0, #4
   32b9c:	sub	r0, fp, #136	; 0x88
   32ba0:	orr	r5, r0, #4
   32ba4:	orr	r0, r1, #4
   32ba8:	str	r0, [sp, #40]	; 0x28
   32bac:	lsl	r0, r2, #1
   32bb0:	str	r0, [sp, #48]	; 0x30
   32bb4:	bic	r0, r2, #3
   32bb8:	str	r0, [sp, #44]	; 0x2c
   32bbc:	ldr	r4, [sp, #60]	; 0x3c
   32bc0:	cmp	r2, #1
   32bc4:	blt	32c34 <GetDataSlab+0xb270>
   32bc8:	ldr	r0, [fp, #12]
   32bcc:	mov	r1, #0
   32bd0:	ldr	r0, [r0]
   32bd4:	add	r7, sl, r0, lsl #2
   32bd8:	ldr	r0, [sp, #52]	; 0x34
   32bdc:	cmp	r0, #4
   32be0:	bcc	32c14 <GetDataSlab+0xb250>
   32be4:	ldr	r2, [sp, #44]	; 0x2c
   32be8:	mov	r1, r4
   32bec:	mov	r0, r7
   32bf0:	vld1.32	{d16-d17}, [r0]!
   32bf4:	subs	r2, r2, #4
   32bf8:	vmovn.i32	d16, q8
   32bfc:	vst1.16	{d16}, [r1]!
   32c00:	bne	32bf0 <GetDataSlab+0xb22c>
   32c04:	ldr	r0, [sp, #52]	; 0x34
   32c08:	ldr	r1, [sp, #44]	; 0x2c
   32c0c:	cmp	r0, r1
   32c10:	beq	32c34 <GetDataSlab+0xb270>
   32c14:	ldr	r0, [sp, #52]	; 0x34
   32c18:	sub	r0, r0, r1
   32c1c:	sub	r1, r9, r1, lsl #1
   32c20:	ldr	r2, [r7, -r1, lsl #1]
   32c24:	subs	r0, r0, #1
   32c28:	strh	r2, [r4, -r1]
   32c2c:	sub	r1, r1, #2
   32c30:	bne	32c20 <GetDataSlab+0xb25c>
   32c34:	ldr	r0, [sp, #36]	; 0x24
   32c38:	add	sl, sl, r0, lsl #2
   32c3c:	add	r3, r3, r0
   32c40:	ldr	r0, [fp, #24]
   32c44:	cmp	r0, #2
   32c48:	blt	32cf8 <GetDataSlab+0xb334>
   32c4c:	mov	r1, #0
   32c50:	mov	r0, r1
   32c54:	ldr	r1, [r5, r1, lsl #2]
   32c58:	add	r1, r1, #1
   32c5c:	str	r1, [r5, r0, lsl #2]
   32c60:	ldr	r2, [r6, r0, lsl #2]
   32c64:	sdiv	r7, r1, r2
   32c68:	mls	r1, r7, r2, r1
   32c6c:	cmp	r1, #0
   32c70:	bne	32ce8 <GetDataSlab+0xb324>
   32c74:	sub	r7, fp, #176	; 0xb0
   32c78:	str	r9, [r5, r0, lsl #2]
   32c7c:	add	r1, r7, r0, lsl #2
   32c80:	ldr	r1, [r1, #4]
   32c84:	sdiv	r2, r3, r1
   32c88:	mls	r2, r2, r1, r3
   32c8c:	cmp	r2, #0
   32c90:	beq	32cb0 <GetDataSlab+0xb2ec>
   32c94:	ldr	r7, [r7, r0, lsl #2]
   32c98:	ldr	ip, [r8, r0, lsl #2]
   32c9c:	ldr	r4, [sp, #60]	; 0x3c
   32ca0:	sub	r1, r1, r2
   32ca4:	mla	r1, ip, r7, r1
   32ca8:	add	r3, r1, r3
   32cac:	b	32ccc <GetDataSlab+0xb308>
   32cb0:	ldr	r1, [r8, r0, lsl #2]
   32cb4:	cmp	r1, #0
   32cb8:	beq	32cd0 <GetDataSlab+0xb30c>
   32cbc:	sub	r2, fp, #176	; 0xb0
   32cc0:	ldr	r2, [r2, r0, lsl #2]
   32cc4:	mla	r3, r2, r1, r3
   32cc8:	mul	r1, r2, r1
   32ccc:	add	sl, sl, r1, lsl #2
   32cd0:	ldr	r2, [fp, #24]
   32cd4:	add	r1, r0, #1
   32cd8:	add	r0, r0, #2
   32cdc:	cmp	r0, r2
   32ce0:	blt	32c50 <GetDataSlab+0xb28c>
   32ce4:	b	32cf8 <GetDataSlab+0xb334>
   32ce8:	ldr	r1, [sp, #40]	; 0x28
   32cec:	ldr	r0, [r1, r0, lsl #2]
   32cf0:	add	sl, sl, r0, lsl #2
   32cf4:	add	r3, r0, r3
   32cf8:	ldr	r2, [sp, #52]	; 0x34
   32cfc:	ldr	r0, [sp, #48]	; 0x30
   32d00:	ldr	r1, [sp, #56]	; 0x38
   32d04:	add	lr, lr, r2
   32d08:	add	r4, r4, r0
   32d0c:	mov	r0, #0
   32d10:	cmp	lr, r1
   32d14:	str	r4, [sp, #60]	; 0x3c
   32d18:	blt	32bbc <GetDataSlab+0xb1f8>
   32d1c:	b	47ffc <GetDataSlab+0x20638>
   32d20:	ldr	r0, [ip]
   32d24:	ldr	r9, [fp, #8]
   32d28:	mov	r2, #0
   32d2c:	sub	r5, fp, #176	; 0xb0
   32d30:	sub	r6, fp, #96	; 0x60
   32d34:	str	r0, [sp, #24]
   32d38:	sub	r0, r0, #1
   32d3c:	str	r0, [fp, #-96]	; 0xffffffa0
   32d40:	ldr	r0, [r9]
   32d44:	str	r0, [fp, #-176]	; 0xffffff50
   32d48:	str	r0, [sp, #36]	; 0x24
   32d4c:	ldr	r0, [fp, #24]
   32d50:	ldr	r1, [sl]
   32d54:	cmp	r0, #2
   32d58:	str	r1, [sp, #44]	; 0x2c
   32d5c:	str	r1, [sp, #52]	; 0x34
   32d60:	blt	32eb8 <GetDataSlab+0xb4f4>
   32d64:	mov	r0, #0
   32d68:	ldr	r3, [sp, #36]	; 0x24
   32d6c:	sub	r7, r9, #4
   32d70:	sub	ip, r9, #12
   32d74:	mov	r4, #1
   32d78:	mvn	lr, #15
   32d7c:	mov	r2, #0
   32d80:	str	r0, [sp, #56]	; 0x38
   32d84:	ldr	r0, [sp, #44]	; 0x2c
   32d88:	mov	r8, r3
   32d8c:	str	r0, [sp, #52]	; 0x34
   32d90:	ldr	r1, [fp, #16]
   32d94:	ldr	r0, [sp, #56]	; 0x38
   32d98:	ldr	r1, [r1, r4, lsl #2]
   32d9c:	str	r3, [r5, r4, lsl #2]
   32da0:	add	r0, r0, #1
   32da4:	cmp	r0, #4
   32da8:	str	r0, [sp, #56]	; 0x38
   32dac:	sub	sl, r1, #1
   32db0:	str	sl, [r6, r4, lsl #2]
   32db4:	ldr	r1, [r9, r4, lsl #2]
   32db8:	str	r1, [sp, #40]	; 0x28
   32dbc:	bcs	32dc8 <GetDataSlab+0xb404>
   32dc0:	mov	r5, r4
   32dc4:	b	32e58 <GetDataSlab+0xb494>
   32dc8:	vmov.i32	q9, #1	; 0x00000001
   32dcc:	vmov.i32	q10, #1	; 0x00000001
   32dd0:	vmov.i32	q8, #1	; 0x00000001
   32dd4:	vmov.32	d23[1], r1
   32dd8:	bic	r1, r0, #3
   32ddc:	bic	r9, r4, #3
   32de0:	vmov.32	d18[0], r3
   32de4:	vmov.32	d20[0], sl
   32de8:	sub	r5, r4, r1
   32dec:	mov	r3, ip
   32df0:	vorr	d16, d18, d18
   32df4:	vmov.i32	q9, #1	; 0x00000001
   32df8:	vorr	d18, d20, d20
   32dfc:	vld1.32	{d20-d21}, [r3], lr
   32e00:	subs	r9, r9, #4
   32e04:	vrev64.32	q12, q10
   32e08:	vext.8	q12, q12, q12, #8
   32e0c:	vext.8	q11, q11, q12, #12
   32e10:	vmul.i32	q9, q9, q12
   32e14:	vmul.i32	q8, q11, q8
   32e18:	vorr	q11, q12, q12
   32e1c:	bne	32dfc <GetDataSlab+0xb438>
   32e20:	vext.8	q11, q9, q8, #8
   32e24:	vext.8	q12, q8, q8, #8
   32e28:	cmp	r0, r1
   32e2c:	vmul.i32	q0, q9, q11
   32e30:	vmul.i32	q1, q8, q12
   32e34:	vmul.i32	q8, q0, d0[1]
   32e38:	vmul.i32	q9, q1, d2[1]
   32e3c:	vmov.32	sl, d16[0]
   32e40:	vmov.32	r3, d18[0]
   32e44:	bne	32e50 <GetDataSlab+0xb48c>
   32e48:	ldr	r9, [fp, #8]
   32e4c:	b	32e6c <GetDataSlab+0xb4a8>
   32e50:	ldr	r9, [fp, #8]
   32e54:	vmov.32	r1, d20[0]
   32e58:	mul	r3, r1, r3
   32e5c:	ldr	r1, [r7, r5, lsl #2]
   32e60:	subs	r5, r5, #1
   32e64:	mul	sl, sl, r1
   32e68:	bne	32e58 <GetDataSlab+0xb494>
   32e6c:	ldr	r1, [fp, #12]
   32e70:	sub	r5, fp, #176	; 0xb0
   32e74:	sub	r6, fp, #96	; 0x60
   32e78:	ldr	r0, [sp, #52]	; 0x34
   32e7c:	add	ip, ip, #4
   32e80:	str	sl, [r6, r4, lsl #2]
   32e84:	str	r3, [r5, r4, lsl #2]
   32e88:	ldr	sl, [fp, #20]
   32e8c:	ldr	r1, [r1, r4, lsl #2]
   32e90:	mla	r2, r1, r8, r2
   32e94:	ldr	r1, [sl, r4, lsl #2]
   32e98:	mov	r8, r3
   32e9c:	ldr	r3, [sp, #40]	; 0x28
   32ea0:	add	r4, r4, #1
   32ea4:	mul	r0, r1, r0
   32ea8:	ldr	r1, [fp, #24]
   32eac:	str	r0, [sp, #52]	; 0x34
   32eb0:	cmp	r4, r1
   32eb4:	bne	32d90 <GetDataSlab+0xb3cc>
   32eb8:	ldr	r0, [sp, #48]	; 0x30
   32ebc:	ldr	r6, [sp, #24]
   32ec0:	add	r9, r0, r2, lsl #2
   32ec4:	cmp	r6, #1
   32ec8:	bne	4125c <GetDataSlab+0x19898>
   32ecc:	ldr	r0, [sp, #52]	; 0x34
   32ed0:	ldr	lr, [fp, #12]
   32ed4:	ldr	r1, [sp, #44]	; 0x2c
   32ed8:	cmp	r0, #1
   32edc:	blt	47ff8 <GetDataSlab+0x20634>
   32ee0:	sub	r0, fp, #136	; 0x88
   32ee4:	add	r7, sl, #4
   32ee8:	mov	sl, #0
   32eec:	mov	ip, #0
   32ef0:	orr	r6, r0, #4
   32ef4:	sub	r0, fp, #96	; 0x60
   32ef8:	orr	r0, r0, #4
   32efc:	str	r0, [sp, #32]
   32f00:	lsl	r0, r1, #1
   32f04:	str	r0, [sp, #56]	; 0x38
   32f08:	bic	r0, r1, #3
   32f0c:	str	r0, [sp, #40]	; 0x28
   32f10:	ldr	r0, [lr], #4
   32f14:	str	r0, [sp, #48]	; 0x30
   32f18:	cmp	r1, #1
   32f1c:	mov	r4, lr
   32f20:	blt	32fa4 <GetDataSlab+0xb5e0>
   32f24:	ldr	r0, [sp, #44]	; 0x2c
   32f28:	mov	r3, #0
   32f2c:	cmp	r0, #4
   32f30:	bcc	32f6c <GetDataSlab+0xb5a8>
   32f34:	ldr	r0, [sp, #48]	; 0x30
   32f38:	ldr	r1, [sp, #40]	; 0x28
   32f3c:	ldr	r3, [sp, #60]	; 0x3c
   32f40:	add	r0, r9, r0, lsl #2
   32f44:	vld1.32	{d16-d17}, [r0]!
   32f48:	subs	r1, r1, #4
   32f4c:	vcvt.s32.f32	q8, q8
   32f50:	vmovn.i32	d16, q8
   32f54:	vst1.16	{d16}, [r3]!
   32f58:	bne	32f44 <GetDataSlab+0xb580>
   32f5c:	ldr	r0, [sp, #44]	; 0x2c
   32f60:	ldr	r3, [sp, #40]	; 0x28
   32f64:	cmp	r0, r3
   32f68:	beq	32fa4 <GetDataSlab+0xb5e0>
   32f6c:	ldr	r5, [sp, #48]	; 0x30
   32f70:	ldr	r0, [sp, #44]	; 0x2c
   32f74:	ldr	r1, [sp, #60]	; 0x3c
   32f78:	add	r5, r9, r5, lsl #2
   32f7c:	sub	r0, r0, r3
   32f80:	add	r1, r1, r3, lsl #1
   32f84:	add	r3, r5, r3, lsl #2
   32f88:	vldr	s0, [r3]
   32f8c:	subs	r0, r0, #1
   32f90:	add	r3, r3, #4
   32f94:	vcvt.s32.f32	s0, s0
   32f98:	vmov	r5, s0
   32f9c:	strh	r5, [r1], #2
   32fa0:	bne	32f88 <GetDataSlab+0xb5c4>
   32fa4:	ldr	r0, [sp, #36]	; 0x24
   32fa8:	add	r9, r9, r0, lsl #2
   32fac:	add	r2, r2, r0
   32fb0:	ldr	r0, [fp, #24]
   32fb4:	cmp	r0, #2
   32fb8:	blt	33068 <GetDataSlab+0xb6a4>
   32fbc:	mov	r1, #0
   32fc0:	mov	r0, r1
   32fc4:	ldr	r1, [r6, r1, lsl #2]
   32fc8:	add	r1, r1, #1
   32fcc:	str	r1, [r6, r0, lsl #2]
   32fd0:	ldr	r3, [r7, r0, lsl #2]
   32fd4:	sdiv	r5, r1, r3
   32fd8:	mls	r1, r5, r3, r1
   32fdc:	cmp	r1, #0
   32fe0:	bne	33058 <GetDataSlab+0xb694>
   32fe4:	sub	r5, fp, #176	; 0xb0
   32fe8:	str	sl, [r6, r0, lsl #2]
   32fec:	add	r1, r5, r0, lsl #2
   32ff0:	ldr	r1, [r1, #4]
   32ff4:	sdiv	r3, r2, r1
   32ff8:	mls	r3, r3, r1, r2
   32ffc:	cmp	r3, #0
   33000:	beq	33020 <GetDataSlab+0xb65c>
   33004:	ldr	r5, [r5, r0, lsl #2]
   33008:	ldr	r8, [lr, r0, lsl #2]
   3300c:	sub	r1, r1, r3
   33010:	mov	r4, lr
   33014:	mla	r1, r8, r5, r1
   33018:	add	r2, r1, r2
   3301c:	b	3303c <GetDataSlab+0xb678>
   33020:	ldr	r1, [r4, r0, lsl #2]
   33024:	cmp	r1, #0
   33028:	beq	33040 <GetDataSlab+0xb67c>
   3302c:	sub	r3, fp, #176	; 0xb0
   33030:	ldr	r3, [r3, r0, lsl #2]
   33034:	mla	r2, r3, r1, r2
   33038:	mul	r1, r3, r1
   3303c:	add	r9, r9, r1, lsl #2
   33040:	ldr	r3, [fp, #24]
   33044:	add	r1, r0, #1
   33048:	add	r0, r0, #2
   3304c:	cmp	r0, r3
   33050:	blt	32fc0 <GetDataSlab+0xb5fc>
   33054:	b	33068 <GetDataSlab+0xb6a4>
   33058:	ldr	r1, [sp, #32]
   3305c:	ldr	r0, [r1, r0, lsl #2]
   33060:	add	r9, r9, r0, lsl #2
   33064:	add	r2, r0, r2
   33068:	ldr	r0, [sp, #60]	; 0x3c
   3306c:	ldr	r1, [sp, #56]	; 0x38
   33070:	ldr	r3, [sp, #52]	; 0x34
   33074:	add	r0, r0, r1
   33078:	ldr	r1, [sp, #44]	; 0x2c
   3307c:	str	r0, [sp, #60]	; 0x3c
   33080:	mov	r0, #0
   33084:	add	ip, ip, r1
   33088:	cmp	ip, r3
   3308c:	blt	32f18 <GetDataSlab+0xb554>
   33090:	b	47ffc <GetDataSlab+0x20638>
   33094:	ldr	r0, [ip]
   33098:	mov	r2, #0
   3309c:	sub	r4, fp, #176	; 0xb0
   330a0:	sub	r9, fp, #96	; 0x60
   330a4:	str	r0, [sp, #24]
   330a8:	sub	r0, r0, #1
   330ac:	str	r0, [fp, #-96]	; 0xffffffa0
   330b0:	ldr	r0, [fp, #8]
   330b4:	ldr	r0, [r0]
   330b8:	str	r0, [fp, #-176]	; 0xffffff50
   330bc:	str	r0, [sp, #40]	; 0x28
   330c0:	ldr	r0, [fp, #24]
   330c4:	ldr	r1, [sl]
   330c8:	cmp	r0, #2
   330cc:	str	r1, [sp, #44]	; 0x2c
   330d0:	str	r1, [sp, #52]	; 0x34
   330d4:	blt	33234 <GetDataSlab+0xb870>
   330d8:	ldr	r0, [fp, #8]
   330dc:	ldr	r3, [sp, #40]	; 0x28
   330e0:	ldr	r1, [sp, #44]	; 0x2c
   330e4:	mov	sl, #0
   330e8:	mvn	r5, #15
   330ec:	mov	r2, #0
   330f0:	sub	r7, r0, #4
   330f4:	sub	r8, r0, #12
   330f8:	mov	r0, #1
   330fc:	mov	r6, r3
   33100:	str	r1, [sp, #52]	; 0x34
   33104:	ldr	r1, [ip, r0, lsl #2]
   33108:	str	r3, [r4, r0, lsl #2]
   3310c:	str	r6, [sp, #56]	; 0x38
   33110:	mov	r6, sl
   33114:	add	r6, sl, #1
   33118:	cmp	r6, #4
   3311c:	sub	lr, r1, #1
   33120:	ldr	r1, [fp, #8]
   33124:	str	lr, [r9, r0, lsl #2]
   33128:	ldr	ip, [r1, r0, lsl #2]
   3312c:	bcs	3313c <GetDataSlab+0xb778>
   33130:	mov	r1, ip
   33134:	mov	r4, r0
   33138:	b	331c8 <GetDataSlab+0xb804>
   3313c:	vmov.i32	q9, #1	; 0x00000001
   33140:	vmov.i32	q10, #1	; 0x00000001
   33144:	vmov.i32	q8, #1	; 0x00000001
   33148:	bic	r1, r6, #3
   3314c:	bic	sl, r0, #3
   33150:	vmov.32	d23[1], ip
   33154:	vmov.32	d18[0], r3
   33158:	vmov.32	d20[0], lr
   3315c:	sub	r4, r0, r1
   33160:	mov	r3, r8
   33164:	vorr	d16, d18, d18
   33168:	vmov.i32	q9, #1	; 0x00000001
   3316c:	vorr	d18, d20, d20
   33170:	vld1.32	{d20-d21}, [r3], r5
   33174:	subs	sl, sl, #4
   33178:	vrev64.32	q12, q10
   3317c:	vext.8	q12, q12, q12, #8
   33180:	vext.8	q11, q11, q12, #12
   33184:	vmul.i32	q9, q9, q12
   33188:	vmul.i32	q8, q11, q8
   3318c:	vorr	q11, q12, q12
   33190:	bne	33170 <GetDataSlab+0xb7ac>
   33194:	vext.8	q11, q9, q8, #8
   33198:	vext.8	q12, q8, q8, #8
   3319c:	cmp	r6, r1
   331a0:	vmul.i32	q0, q9, q11
   331a4:	vmul.i32	q1, q8, q12
   331a8:	vmul.i32	q8, q0, d0[1]
   331ac:	vmul.i32	q9, q1, d2[1]
   331b0:	vmov.32	lr, d16[0]
   331b4:	vmov.32	r3, d18[0]
   331b8:	bne	331c4 <GetDataSlab+0xb800>
   331bc:	mov	sl, r6
   331c0:	b	331e0 <GetDataSlab+0xb81c>
   331c4:	vmov.32	r1, d20[0]
   331c8:	mov	sl, r6
   331cc:	mul	r3, r1, r3
   331d0:	ldr	r1, [r7, r4, lsl #2]
   331d4:	subs	r4, r4, #1
   331d8:	mul	lr, lr, r1
   331dc:	bne	331cc <GetDataSlab+0xb808>
   331e0:	ldr	r1, [fp, #12]
   331e4:	sub	r4, fp, #176	; 0xb0
   331e8:	sub	r9, fp, #96	; 0x60
   331ec:	ldr	r6, [sp, #56]	; 0x38
   331f0:	add	r8, r8, #4
   331f4:	str	r3, [r4, r0, lsl #2]
   331f8:	str	lr, [r9, r0, lsl #2]
   331fc:	ldr	r1, [r1, r0, lsl #2]
   33200:	mla	r2, r1, r6, r2
   33204:	ldr	r1, [fp, #20]
   33208:	ldr	r6, [sp, #52]	; 0x34
   3320c:	ldr	r1, [r1, r0, lsl #2]
   33210:	add	r0, r0, #1
   33214:	mul	r6, r1, r6
   33218:	ldr	r1, [fp, #24]
   3321c:	str	r6, [sp, #52]	; 0x34
   33220:	mov	r6, r3
   33224:	mov	r3, ip
   33228:	ldr	ip, [fp, #16]
   3322c:	cmp	r0, r1
   33230:	bne	33104 <GetDataSlab+0xb740>
   33234:	ldr	r0, [sp, #48]	; 0x30
   33238:	ldr	r6, [sp, #24]
   3323c:	add	r9, r0, r2, lsl #3
   33240:	cmp	r6, #1
   33244:	bne	413f4 <GetDataSlab+0x19a30>
   33248:	ldr	r0, [sp, #52]	; 0x34
   3324c:	ldr	lr, [fp, #12]
   33250:	ldr	r1, [sp, #44]	; 0x2c
   33254:	cmp	r0, #1
   33258:	ldr	r0, [fp, #20]
   3325c:	blt	47ff8 <GetDataSlab+0x20634>
   33260:	add	r8, r0, #4
   33264:	sub	r0, fp, #136	; 0x88
   33268:	mov	sl, #0
   3326c:	orr	r7, r0, #4
   33270:	sub	r0, fp, #96	; 0x60
   33274:	orr	r0, r0, #4
   33278:	str	r0, [sp, #36]	; 0x24
   3327c:	lsl	r0, r1, #1
   33280:	str	r0, [sp, #56]	; 0x38
   33284:	ldr	r0, [lr], #4
   33288:	str	r0, [sp, #48]	; 0x30
   3328c:	ldr	r4, [sp, #60]	; 0x3c
   33290:	cmp	r1, #1
   33294:	blt	332c4 <GetDataSlab+0xb900>
   33298:	ldr	r0, [sp, #48]	; 0x30
   3329c:	ldr	r3, [sp, #44]	; 0x2c
   332a0:	mov	r6, r4
   332a4:	add	r0, r9, r0, lsl #3
   332a8:	vldr	d16, [r0]
   332ac:	subs	r3, r3, #1
   332b0:	add	r0, r0, #8
   332b4:	vcvt.s32.f64	s0, d16
   332b8:	vmov	r5, s0
   332bc:	strh	r5, [r6], #2
   332c0:	bne	332a8 <GetDataSlab+0xb8e4>
   332c4:	ldr	r0, [sp, #40]	; 0x28
   332c8:	add	r9, r9, r0, lsl #3
   332cc:	add	r2, r2, r0
   332d0:	ldr	r0, [fp, #24]
   332d4:	cmp	r0, #2
   332d8:	blt	3338c <GetDataSlab+0xb9c8>
   332dc:	mov	r3, #0
   332e0:	mov	r0, r3
   332e4:	ldr	r3, [r7, r3, lsl #2]
   332e8:	add	r3, r3, #1
   332ec:	str	r3, [r7, r0, lsl #2]
   332f0:	ldr	r5, [r8, r0, lsl #2]
   332f4:	sdiv	r6, r3, r5
   332f8:	mls	r3, r6, r5, r3
   332fc:	cmp	r3, #0
   33300:	bne	3337c <GetDataSlab+0xb9b8>
   33304:	mov	r1, #0
   33308:	str	r1, [r7, r0, lsl #2]
   3330c:	sub	r1, fp, #176	; 0xb0
   33310:	add	r3, r1, r0, lsl #2
   33314:	ldr	r3, [r3, #4]
   33318:	sdiv	r5, r2, r3
   3331c:	mls	r6, r5, r3, r2
   33320:	cmp	r6, #0
   33324:	beq	33344 <GetDataSlab+0xb980>
   33328:	ldr	r5, [r1, r0, lsl #2]
   3332c:	ldr	ip, [lr, r0, lsl #2]
   33330:	ldr	r4, [sp, #60]	; 0x3c
   33334:	sub	r3, r3, r6
   33338:	mla	r3, ip, r5, r3
   3333c:	add	r2, r3, r2
   33340:	b	33360 <GetDataSlab+0xb99c>
   33344:	ldr	r3, [lr, r0, lsl #2]
   33348:	cmp	r3, #0
   3334c:	beq	33364 <GetDataSlab+0xb9a0>
   33350:	sub	r1, fp, #176	; 0xb0
   33354:	ldr	r6, [r1, r0, lsl #2]
   33358:	mla	r2, r6, r3, r2
   3335c:	mul	r3, r6, r3
   33360:	add	r9, r9, r3, lsl #3
   33364:	ldr	r6, [fp, #24]
   33368:	add	r3, r0, #1
   3336c:	add	r0, r0, #2
   33370:	cmp	r0, r6
   33374:	blt	332e0 <GetDataSlab+0xb91c>
   33378:	b	3338c <GetDataSlab+0xb9c8>
   3337c:	ldr	r1, [sp, #36]	; 0x24
   33380:	ldr	r0, [r1, r0, lsl #2]
   33384:	add	r9, r9, r0, lsl #3
   33388:	add	r2, r0, r2
   3338c:	ldr	r1, [sp, #44]	; 0x2c
   33390:	ldr	r0, [sp, #56]	; 0x38
   33394:	ldr	r3, [sp, #52]	; 0x34
   33398:	add	sl, sl, r1
   3339c:	add	r4, r4, r0
   333a0:	mov	r0, #0
   333a4:	cmp	sl, r3
   333a8:	str	r4, [sp, #60]	; 0x3c
   333ac:	blt	3328c <GetDataSlab+0xb8c8>
   333b0:	b	47ffc <GetDataSlab+0x20638>
   333b4:	ldr	r0, [ip]
   333b8:	mov	r1, #0
   333bc:	sub	lr, fp, #176	; 0xb0
   333c0:	sub	r5, fp, #96	; 0x60
   333c4:	str	r6, [sp, #40]	; 0x28
   333c8:	str	r0, [sp, #20]
   333cc:	sub	r0, r0, #1
   333d0:	str	r0, [fp, #-96]	; 0xffffffa0
   333d4:	ldr	r0, [fp, #8]
   333d8:	ldr	r0, [r0]
   333dc:	str	r0, [fp, #-176]	; 0xffffff50
   333e0:	str	r0, [sp, #36]	; 0x24
   333e4:	ldr	r0, [fp, #24]
   333e8:	ldr	r2, [sl]
   333ec:	cmp	r0, #2
   333f0:	str	r2, [sp, #44]	; 0x2c
   333f4:	str	r2, [sp, #56]	; 0x38
   333f8:	blt	33548 <GetDataSlab+0xbb84>
   333fc:	ldr	r0, [fp, #8]
   33400:	ldr	r2, [sp, #36]	; 0x24
   33404:	mov	r4, #1
   33408:	mov	r9, #0
   3340c:	mvn	r7, #15
   33410:	mov	r1, #0
   33414:	sub	r3, r0, #4
   33418:	sub	ip, r0, #12
   3341c:	ldr	r0, [sp, #44]	; 0x2c
   33420:	mov	r8, r2
   33424:	str	r0, [sp, #56]	; 0x38
   33428:	ldr	r0, [fp, #16]
   3342c:	add	r9, r9, #1
   33430:	cmp	r9, #4
   33434:	ldr	r0, [r0, r4, lsl #2]
   33438:	str	r2, [lr, r4, lsl #2]
   3343c:	sub	sl, r0, #1
   33440:	ldr	r0, [fp, #8]
   33444:	str	sl, [r5, r4, lsl #2]
   33448:	ldr	r0, [r0, r4, lsl #2]
   3344c:	str	r0, [sp, #52]	; 0x34
   33450:	bcs	3345c <GetDataSlab+0xba98>
   33454:	mov	r5, r4
   33458:	b	334ec <GetDataSlab+0xbb28>
   3345c:	vmov.i32	q9, #1	; 0x00000001
   33460:	vmov.i32	q10, #1	; 0x00000001
   33464:	vmov.i32	q8, #1	; 0x00000001
   33468:	vmov.32	d23[1], r0
   3346c:	bic	r0, r9, #3
   33470:	bic	lr, r4, #3
   33474:	vmov.32	d18[0], r2
   33478:	vmov.32	d20[0], sl
   3347c:	sub	r5, r4, r0
   33480:	mov	r2, ip
   33484:	vorr	d16, d18, d18
   33488:	vmov.i32	q9, #1	; 0x00000001
   3348c:	vorr	d18, d20, d20
   33490:	vld1.32	{d20-d21}, [r2], r7
   33494:	subs	lr, lr, #4
   33498:	vrev64.32	q12, q10
   3349c:	vext.8	q12, q12, q12, #8
   334a0:	vext.8	q11, q11, q12, #12
   334a4:	vmul.i32	q9, q9, q12
   334a8:	vmul.i32	q8, q11, q8
   334ac:	vorr	q11, q12, q12
   334b0:	bne	33490 <GetDataSlab+0xbacc>
   334b4:	vext.8	q11, q9, q8, #8
   334b8:	vext.8	q12, q8, q8, #8
   334bc:	cmp	r9, r0
   334c0:	vmul.i32	q0, q9, q11
   334c4:	vmul.i32	q1, q8, q12
   334c8:	vmul.i32	q8, q0, d0[1]
   334cc:	vmul.i32	q9, q1, d2[1]
   334d0:	vmov.32	sl, d16[0]
   334d4:	vmov.32	r2, d18[0]
   334d8:	bne	334e4 <GetDataSlab+0xbb20>
   334dc:	sub	lr, fp, #176	; 0xb0
   334e0:	b	33500 <GetDataSlab+0xbb3c>
   334e4:	vmov.32	r0, d20[0]
   334e8:	sub	lr, fp, #176	; 0xb0
   334ec:	mul	r2, r0, r2
   334f0:	ldr	r0, [r3, r5, lsl #2]
   334f4:	subs	r5, r5, #1
   334f8:	mul	sl, sl, r0
   334fc:	bne	334ec <GetDataSlab+0xbb28>
   33500:	ldr	r0, [fp, #12]
   33504:	sub	r5, fp, #96	; 0x60
   33508:	str	r2, [lr, r4, lsl #2]
   3350c:	ldr	r6, [sp, #56]	; 0x38
   33510:	add	ip, ip, #4
   33514:	str	sl, [r5, r4, lsl #2]
   33518:	ldr	sl, [fp, #20]
   3351c:	ldr	r0, [r0, r4, lsl #2]
   33520:	mla	r1, r0, r8, r1
   33524:	ldr	r0, [sl, r4, lsl #2]
   33528:	mov	r8, r2
   3352c:	ldr	r2, [sp, #52]	; 0x34
   33530:	add	r4, r4, #1
   33534:	mul	r6, r0, r6
   33538:	ldr	r0, [fp, #24]
   3353c:	str	r6, [sp, #56]	; 0x38
   33540:	cmp	r4, r0
   33544:	bne	33428 <GetDataSlab+0xba64>
   33548:	ldr	r0, [sp, #48]	; 0x30
   3354c:	ldr	r7, [sp, #20]
   33550:	add	r9, r0, r1, lsl #3
   33554:	cmp	r7, #1
   33558:	bne	41590 <GetDataSlab+0x19bcc>
   3355c:	ldr	r0, [sp, #56]	; 0x38
   33560:	ldr	ip, [sp, #60]	; 0x3c
   33564:	ldr	r8, [fp, #12]
   33568:	cmp	r0, #1
   3356c:	blt	41714 <GetDataSlab+0x19d50>
   33570:	add	lr, sl, #4
   33574:	ldr	sl, [sp, #44]	; 0x2c
   33578:	sub	r0, fp, #136	; 0x88
   3357c:	mov	r5, #0
   33580:	orr	r6, r0, #4
   33584:	sub	r0, fp, #96	; 0x60
   33588:	orr	r0, r0, #4
   3358c:	str	r0, [sp, #24]
   33590:	lsl	r0, sl, #1
   33594:	str	r0, [sp, #52]	; 0x34
   33598:	bic	r0, sl, #1
   3359c:	str	r0, [sp, #28]
   335a0:	ldr	r0, [r8], #4
   335a4:	str	r0, [sp, #32]
   335a8:	cmp	sl, #1
   335ac:	blt	33614 <GetDataSlab+0xbc50>
   335b0:	mov	r3, #0
   335b4:	beq	335ec <GetDataSlab+0xbc28>
   335b8:	ldr	r0, [sp, #32]
   335bc:	ldr	r2, [sp, #28]
   335c0:	mov	r3, ip
   335c4:	add	r0, r9, r0, lsl #3
   335c8:	vld1.64	{d16-d17}, [r0]!
   335cc:	subs	r2, r2, #2
   335d0:	vmovn.i64	d16, q8
   335d4:	vuzp.16	d16, d17
   335d8:	vst1.32	{d16[0]}, [r3]!
   335dc:	bne	335c8 <GetDataSlab+0xbc04>
   335e0:	ldr	r3, [sp, #28]
   335e4:	cmp	sl, r3
   335e8:	beq	33614 <GetDataSlab+0xbc50>
   335ec:	ldr	r4, [sp, #32]
   335f0:	sub	r0, sl, r3
   335f4:	add	r2, ip, r3, lsl #1
   335f8:	add	sl, r9, r4, lsl #3
   335fc:	add	r3, sl, r3, lsl #3
   33600:	ldr	sl, [sp, #44]	; 0x2c
   33604:	ldrh	r7, [r3], #8
   33608:	subs	r0, r0, #1
   3360c:	strh	r7, [r2], #2
   33610:	bne	33604 <GetDataSlab+0xbc40>
   33614:	ldr	r0, [sp, #36]	; 0x24
   33618:	add	r9, r9, r0, lsl #3
   3361c:	add	r1, r1, r0
   33620:	ldr	r0, [fp, #24]
   33624:	cmp	r0, #2
   33628:	blt	336d8 <GetDataSlab+0xbd14>
   3362c:	mov	r2, #0
   33630:	mov	r0, r2
   33634:	ldr	r2, [r6, r2, lsl #2]
   33638:	add	r2, r2, #1
   3363c:	str	r2, [r6, r0, lsl #2]
   33640:	ldr	r3, [lr, r0, lsl #2]
   33644:	sdiv	r7, r2, r3
   33648:	mls	r2, r7, r3, r2
   3364c:	cmp	r2, #0
   33650:	bne	336c8 <GetDataSlab+0xbd04>
   33654:	mov	r2, #0
   33658:	sub	r4, fp, #176	; 0xb0
   3365c:	str	r2, [r6, r0, lsl #2]
   33660:	add	r2, r4, r0, lsl #2
   33664:	ldr	r2, [r2, #4]
   33668:	sdiv	r3, r1, r2
   3366c:	mls	r3, r3, r2, r1
   33670:	cmp	r3, #0
   33674:	beq	33690 <GetDataSlab+0xbccc>
   33678:	ldr	r7, [r4, r0, lsl #2]
   3367c:	ldr	r4, [r8, r0, lsl #2]
   33680:	sub	r2, r2, r3
   33684:	mla	r2, r4, r7, r2
   33688:	add	r1, r2, r1
   3368c:	b	336ac <GetDataSlab+0xbce8>
   33690:	ldr	r2, [r8, r0, lsl #2]
   33694:	cmp	r2, #0
   33698:	beq	336b0 <GetDataSlab+0xbcec>
   3369c:	sub	r3, fp, #176	; 0xb0
   336a0:	ldr	r3, [r3, r0, lsl #2]
   336a4:	mla	r1, r3, r2, r1
   336a8:	mul	r2, r3, r2
   336ac:	add	r9, r9, r2, lsl #3
   336b0:	ldr	r3, [fp, #24]
   336b4:	add	r2, r0, #1
   336b8:	add	r0, r0, #2
   336bc:	cmp	r0, r3
   336c0:	blt	33630 <GetDataSlab+0xbc6c>
   336c4:	b	336d8 <GetDataSlab+0xbd14>
   336c8:	ldr	r2, [sp, #24]
   336cc:	ldr	r0, [r2, r0, lsl #2]
   336d0:	add	r9, r9, r0, lsl #3
   336d4:	add	r1, r0, r1
   336d8:	ldr	r0, [sp, #52]	; 0x34
   336dc:	add	r5, r5, sl
   336e0:	add	ip, ip, r0
   336e4:	ldr	r0, [sp, #56]	; 0x38
   336e8:	cmp	r5, r0
   336ec:	blt	335a8 <GetDataSlab+0xbbe4>
   336f0:	b	41714 <GetDataSlab+0x19d50>
   336f4:	ldr	r9, [ip]
   336f8:	mov	r3, #0
   336fc:	sub	r7, fp, #176	; 0xb0
   33700:	sub	lr, fp, #96	; 0x60
   33704:	sub	r0, r9, #1
   33708:	str	r0, [fp, #-96]	; 0xffffffa0
   3370c:	ldr	r0, [fp, #8]
   33710:	ldr	r0, [r0]
   33714:	str	r0, [fp, #-176]	; 0xffffff50
   33718:	str	r0, [sp, #36]	; 0x24
   3371c:	ldr	r0, [fp, #24]
   33720:	ldr	r1, [sl]
   33724:	cmp	r0, #2
   33728:	str	r1, [sp, #32]
   3372c:	str	r1, [sp, #56]	; 0x38
   33730:	blt	33890 <GetDataSlab+0xbecc>
   33734:	ldr	r0, [fp, #8]
   33738:	ldr	r2, [sp, #36]	; 0x24
   3373c:	mov	r6, #1
   33740:	mvn	r8, #15
   33744:	mov	r3, #0
   33748:	mov	r1, r0
   3374c:	sub	r0, r0, #4
   33750:	mov	r4, r2
   33754:	sub	ip, r1, #12
   33758:	mov	r1, #0
   3375c:	str	r1, [sp, #52]	; 0x34
   33760:	ldr	r1, [sp, #32]
   33764:	str	r1, [sp, #56]	; 0x38
   33768:	ldr	r1, [fp, #16]
   3376c:	str	r4, [sp, #44]	; 0x2c
   33770:	ldr	r5, [sp, #52]	; 0x34
   33774:	ldr	r1, [r1, r6, lsl #2]
   33778:	str	r2, [r7, r6, lsl #2]
   3377c:	add	r5, r5, #1
   33780:	cmp	r5, #4
   33784:	str	r5, [sp, #52]	; 0x34
   33788:	sub	r4, r1, #1
   3378c:	ldr	r1, [fp, #8]
   33790:	str	r4, [lr, r6, lsl #2]
   33794:	ldr	r1, [r1, r6, lsl #2]
   33798:	str	r1, [sp, #40]	; 0x28
   3379c:	bcs	337a8 <GetDataSlab+0xbde4>
   337a0:	mov	r7, r6
   337a4:	b	33830 <GetDataSlab+0xbe6c>
   337a8:	vmov.i32	q9, #1	; 0x00000001
   337ac:	vmov.i32	q10, #1	; 0x00000001
   337b0:	vmov.i32	q8, #1	; 0x00000001
   337b4:	bic	lr, r5, #3
   337b8:	vmov.32	d23[1], r1
   337bc:	bic	sl, r6, #3
   337c0:	mov	r1, ip
   337c4:	vmov.32	d18[0], r2
   337c8:	vmov.32	d20[0], r4
   337cc:	sub	r7, r6, lr
   337d0:	vorr	d16, d18, d18
   337d4:	vmov.i32	q9, #1	; 0x00000001
   337d8:	vorr	d18, d20, d20
   337dc:	vld1.32	{d20-d21}, [r1], r8
   337e0:	subs	sl, sl, #4
   337e4:	vrev64.32	q12, q10
   337e8:	vext.8	q12, q12, q12, #8
   337ec:	vext.8	q11, q11, q12, #12
   337f0:	vmul.i32	q9, q9, q12
   337f4:	vmul.i32	q8, q11, q8
   337f8:	vorr	q11, q12, q12
   337fc:	bne	337dc <GetDataSlab+0xbe18>
   33800:	vext.8	q11, q9, q8, #8
   33804:	vext.8	q12, q8, q8, #8
   33808:	ldr	sl, [fp, #20]
   3380c:	cmp	r5, lr
   33810:	vmul.i32	q0, q9, q11
   33814:	vmul.i32	q1, q8, q12
   33818:	vmul.i32	q8, q0, d0[1]
   3381c:	vmul.i32	q9, q1, d2[1]
   33820:	vmov.32	r4, d16[0]
   33824:	vmov.32	r2, d18[0]
   33828:	beq	33844 <GetDataSlab+0xbe80>
   3382c:	vmov.32	r1, d20[0]
   33830:	mul	r2, r1, r2
   33834:	ldr	r1, [r0, r7, lsl #2]
   33838:	subs	r7, r7, #1
   3383c:	mul	r4, r4, r1
   33840:	bne	33830 <GetDataSlab+0xbe6c>
   33844:	ldr	r1, [fp, #12]
   33848:	sub	r7, fp, #176	; 0xb0
   3384c:	sub	lr, fp, #96	; 0x60
   33850:	add	ip, ip, #4
   33854:	str	r4, [lr, r6, lsl #2]
   33858:	str	r2, [r7, r6, lsl #2]
   3385c:	ldr	r4, [sp, #44]	; 0x2c
   33860:	ldr	r1, [r1, r6, lsl #2]
   33864:	mla	r3, r1, r4, r3
   33868:	ldr	r1, [sl, r6, lsl #2]
   3386c:	ldr	r4, [sp, #56]	; 0x38
   33870:	add	r6, r6, #1
   33874:	mul	r4, r1, r4
   33878:	ldr	r1, [fp, #24]
   3387c:	str	r4, [sp, #56]	; 0x38
   33880:	mov	r4, r2
   33884:	ldr	r2, [sp, #40]	; 0x28
   33888:	cmp	r6, r1
   3388c:	bne	33768 <GetDataSlab+0xbda4>
   33890:	ldr	r0, [sp, #48]	; 0x30
   33894:	cmp	r9, #1
   33898:	add	r5, r0, r3
   3389c:	bne	41a88 <GetDataSlab+0x1a0c4>
   338a0:	ldr	r0, [sp, #56]	; 0x38
   338a4:	ldr	r1, [fp, #12]
   338a8:	sub	r2, fp, #96	; 0x60
   338ac:	cmp	r0, #1
   338b0:	ldr	r0, [sp, #60]	; 0x3c
   338b4:	blt	47ff8 <GetDataSlab+0x20634>
   338b8:	add	r8, sl, #4
   338bc:	ldr	sl, [sp, #32]
   338c0:	add	r9, r1, #4
   338c4:	sub	r1, fp, #136	; 0x88
   338c8:	str	r0, [sp, #52]	; 0x34
   338cc:	mov	r0, #0
   338d0:	mov	lr, #0
   338d4:	orr	r4, r1, #4
   338d8:	orr	r1, r2, #4
   338dc:	str	r0, [sp, #48]	; 0x30
   338e0:	str	r1, [sp, #28]
   338e4:	bic	r1, sl, #7
   338e8:	lsl	ip, sl, #1
   338ec:	str	r1, [sp, #40]	; 0x28
   338f0:	cmp	sl, #1
   338f4:	blt	339c0 <GetDataSlab+0xbffc>
   338f8:	ldr	r0, [fp, #12]
   338fc:	cmp	sl, #8
   33900:	ldr	r7, [r0]
   33904:	mov	r0, #0
   33908:	str	r7, [sp, #44]	; 0x2c
   3390c:	bcc	33998 <GetDataSlab+0xbfd4>
   33910:	ldr	r1, [sp, #60]	; 0x3c
   33914:	ldr	r2, [sp, #48]	; 0x30
   33918:	mov	r6, ip
   3391c:	mla	ip, ip, r2, r1
   33920:	add	r1, r5, sl
   33924:	add	r2, r5, r7
   33928:	add	r1, r1, r7
   3392c:	ldr	r7, [sp, #60]	; 0x3c
   33930:	cmp	ip, r1
   33934:	bcs	33950 <GetDataSlab+0xbf8c>
   33938:	ldr	r1, [sp, #48]	; 0x30
   3393c:	mov	ip, r6
   33940:	mla	r1, r6, r1, r6
   33944:	add	r1, r7, r1
   33948:	cmp	r2, r1
   3394c:	bcc	33998 <GetDataSlab+0xbfd4>
   33950:	ldr	r0, [sp, #40]	; 0x28
   33954:	ldr	ip, [sp, #52]	; 0x34
   33958:	sub	r7, fp, #184	; 0xb8
   3395c:	ldr	r1, [r2]
   33960:	ldr	sl, [r2, #4]
   33964:	subs	r0, r0, #8
   33968:	add	r2, r2, #8
   3396c:	str	sl, [fp, #-180]	; 0xffffff4c
   33970:	str	r1, [fp, #-184]	; 0xffffff48
   33974:	vld1.8	{d16}, [r7 :64]
   33978:	vmovl.u8	q8, d16
   3397c:	vst1.16	{d16-d17}, [ip]!
   33980:	bne	3395c <GetDataSlab+0xbf98>
   33984:	ldr	sl, [sp, #32]
   33988:	ldr	r0, [sp, #40]	; 0x28
   3398c:	mov	ip, r6
   33990:	cmp	sl, r0
   33994:	beq	339c0 <GetDataSlab+0xbffc>
   33998:	ldr	r1, [sp, #52]	; 0x34
   3399c:	ldr	r6, [sp, #44]	; 0x2c
   339a0:	sub	r2, sl, r0
   339a4:	add	r1, r1, r0, lsl #1
   339a8:	add	r0, r0, r6
   339ac:	add	r0, r5, r0
   339b0:	ldrb	r6, [r0], #1
   339b4:	subs	r2, r2, #1
   339b8:	strh	r6, [r1], #2
   339bc:	bne	339b0 <GetDataSlab+0xbfec>
   339c0:	ldr	r0, [sp, #36]	; 0x24
   339c4:	add	r5, r5, r0
   339c8:	add	r3, r3, r0
   339cc:	ldr	r0, [fp, #24]
   339d0:	cmp	r0, #2
   339d4:	blt	33a80 <GetDataSlab+0xc0bc>
   339d8:	mov	r1, #0
   339dc:	mov	r0, r1
   339e0:	ldr	r1, [r4, r1, lsl #2]
   339e4:	add	r1, r1, #1
   339e8:	str	r1, [r4, r0, lsl #2]
   339ec:	ldr	r2, [r8, r0, lsl #2]
   339f0:	sdiv	r6, r1, r2
   339f4:	mls	r1, r6, r2, r1
   339f8:	cmp	r1, #0
   339fc:	bne	33a70 <GetDataSlab+0xc0ac>
   33a00:	mov	r1, #0
   33a04:	sub	r7, fp, #176	; 0xb0
   33a08:	str	r1, [r4, r0, lsl #2]
   33a0c:	add	r1, r7, r0, lsl #2
   33a10:	ldr	r1, [r1, #4]
   33a14:	sdiv	r2, r3, r1
   33a18:	mls	r2, r2, r1, r3
   33a1c:	cmp	r2, #0
   33a20:	beq	33a40 <GetDataSlab+0xc07c>
   33a24:	ldr	r6, [r7, r0, lsl #2]
   33a28:	ldr	r7, [r9, r0, lsl #2]
   33a2c:	sub	r1, r1, r2
   33a30:	mla	r1, r7, r6, r1
   33a34:	add	r3, r1, r3
   33a38:	add	r5, r5, r1
   33a3c:	b	33a58 <GetDataSlab+0xc094>
   33a40:	ldr	r1, [r9, r0, lsl #2]
   33a44:	cmp	r1, #0
   33a48:	subne	r2, fp, #176	; 0xb0
   33a4c:	ldrne	r2, [r2, r0, lsl #2]
   33a50:	mlane	r3, r2, r1, r3
   33a54:	mlane	r5, r2, r1, r5
   33a58:	ldr	r2, [fp, #24]
   33a5c:	add	r1, r0, #1
   33a60:	add	r0, r0, #2
   33a64:	cmp	r0, r2
   33a68:	blt	339dc <GetDataSlab+0xc018>
   33a6c:	b	33a80 <GetDataSlab+0xc0bc>
   33a70:	ldr	r1, [sp, #28]
   33a74:	ldr	r0, [r1, r0, lsl #2]
   33a78:	add	r5, r5, r0
   33a7c:	add	r3, r0, r3
   33a80:	ldr	r0, [sp, #52]	; 0x34
   33a84:	ldr	r1, [sp, #56]	; 0x38
   33a88:	add	lr, lr, sl
   33a8c:	add	r0, r0, ip
   33a90:	cmp	lr, r1
   33a94:	str	r0, [sp, #52]	; 0x34
   33a98:	ldr	r0, [sp, #48]	; 0x30
   33a9c:	add	r0, r0, #1
   33aa0:	str	r0, [sp, #48]	; 0x30
   33aa4:	mov	r0, #0
   33aa8:	blt	338f0 <GetDataSlab+0xbf2c>
   33aac:	b	47ffc <GetDataSlab+0x20638>
   33ab0:	ldr	r0, [ip]
   33ab4:	mov	r2, #0
   33ab8:	sub	r5, fp, #176	; 0xb0
   33abc:	sub	r6, fp, #96	; 0x60
   33ac0:	str	r0, [sp, #24]
   33ac4:	sub	r0, r0, #1
   33ac8:	str	r0, [fp, #-96]	; 0xffffffa0
   33acc:	ldr	r0, [fp, #8]
   33ad0:	ldr	r0, [r0]
   33ad4:	str	r0, [fp, #-176]	; 0xffffff50
   33ad8:	str	r0, [sp, #40]	; 0x28
   33adc:	ldr	r0, [fp, #24]
   33ae0:	ldr	r1, [sl]
   33ae4:	cmp	r0, #2
   33ae8:	str	r1, [sp, #44]	; 0x2c
   33aec:	str	r1, [sp, #52]	; 0x34
   33af0:	blt	33c38 <GetDataSlab+0xc274>
   33af4:	ldr	r0, [fp, #8]
   33af8:	ldr	r3, [sp, #40]	; 0x28
   33afc:	mov	r4, #1
   33b00:	mov	lr, #0
   33b04:	mvn	ip, #15
   33b08:	mov	r2, #0
   33b0c:	sub	r7, r0, #4
   33b10:	sub	r9, r0, #12
   33b14:	ldr	r0, [sp, #44]	; 0x2c
   33b18:	mov	r8, r3
   33b1c:	str	r0, [sp, #52]	; 0x34
   33b20:	ldr	r1, [fp, #16]
   33b24:	add	lr, lr, #1
   33b28:	cmp	lr, #4
   33b2c:	ldr	r1, [r1, r4, lsl #2]
   33b30:	str	r3, [r5, r4, lsl #2]
   33b34:	sub	r1, r1, #1
   33b38:	str	r1, [r6, r4, lsl #2]
   33b3c:	ldr	r6, [fp, #8]
   33b40:	ldr	r6, [r6, r4, lsl #2]
   33b44:	str	r6, [sp, #56]	; 0x38
   33b48:	bcs	33b54 <GetDataSlab+0xc190>
   33b4c:	mov	r5, r4
   33b50:	b	33bdc <GetDataSlab+0xc218>
   33b54:	vmov.i32	q9, #1	; 0x00000001
   33b58:	vmov.i32	q10, #1	; 0x00000001
   33b5c:	vmov.i32	q8, #1	; 0x00000001
   33b60:	vmov.32	d23[1], r6
   33b64:	bic	r6, lr, #3
   33b68:	bic	sl, r4, #3
   33b6c:	vmov.32	d18[0], r3
   33b70:	vmov.32	d20[0], r1
   33b74:	sub	r5, r4, r6
   33b78:	mov	r1, r9
   33b7c:	vorr	d16, d18, d18
   33b80:	vmov.i32	q9, #1	; 0x00000001
   33b84:	vorr	d18, d20, d20
   33b88:	vld1.32	{d20-d21}, [r1], ip
   33b8c:	subs	sl, sl, #4
   33b90:	vrev64.32	q12, q10
   33b94:	vext.8	q12, q12, q12, #8
   33b98:	vext.8	q11, q11, q12, #12
   33b9c:	vmul.i32	q9, q9, q12
   33ba0:	vmul.i32	q8, q11, q8
   33ba4:	vorr	q11, q12, q12
   33ba8:	bne	33b88 <GetDataSlab+0xc1c4>
   33bac:	vext.8	q11, q9, q8, #8
   33bb0:	vext.8	q12, q8, q8, #8
   33bb4:	ldr	sl, [fp, #20]
   33bb8:	cmp	lr, r6
   33bbc:	vmul.i32	q0, q9, q11
   33bc0:	vmul.i32	q1, q8, q12
   33bc4:	vmul.i32	q8, q0, d0[1]
   33bc8:	vmul.i32	q9, q1, d2[1]
   33bcc:	vmov.32	r1, d16[0]
   33bd0:	vmov.32	r3, d18[0]
   33bd4:	beq	33bf0 <GetDataSlab+0xc22c>
   33bd8:	vmov.32	r6, d20[0]
   33bdc:	mul	r3, r6, r3
   33be0:	ldr	r6, [r7, r5, lsl #2]
   33be4:	subs	r5, r5, #1
   33be8:	mul	r1, r1, r6
   33bec:	bne	33bdc <GetDataSlab+0xc218>
   33bf0:	sub	r6, fp, #96	; 0x60
   33bf4:	sub	r5, fp, #176	; 0xb0
   33bf8:	ldr	r0, [sp, #52]	; 0x34
   33bfc:	add	r9, r9, #4
   33c00:	str	r1, [r6, r4, lsl #2]
   33c04:	ldr	r1, [fp, #12]
   33c08:	str	r3, [r5, r4, lsl #2]
   33c0c:	ldr	r1, [r1, r4, lsl #2]
   33c10:	mla	r2, r1, r8, r2
   33c14:	ldr	r1, [sl, r4, lsl #2]
   33c18:	mov	r8, r3
   33c1c:	ldr	r3, [sp, #56]	; 0x38
   33c20:	add	r4, r4, #1
   33c24:	mul	r0, r1, r0
   33c28:	ldr	r1, [fp, #24]
   33c2c:	str	r0, [sp, #52]	; 0x34
   33c30:	cmp	r4, r1
   33c34:	bne	33b20 <GetDataSlab+0xc15c>
   33c38:	ldr	r0, [sp, #48]	; 0x30
   33c3c:	ldr	r6, [sp, #24]
   33c40:	add	r9, r0, r2, lsl #1
   33c44:	cmp	r6, #1
   33c48:	bne	41c20 <GetDataSlab+0x1a25c>
   33c4c:	ldr	r0, [sp, #52]	; 0x34
   33c50:	ldr	ip, [sp, #60]	; 0x3c
   33c54:	ldr	r8, [fp, #12]
   33c58:	ldr	r1, [sp, #44]	; 0x2c
   33c5c:	cmp	r0, #1
   33c60:	blt	47ff8 <GetDataSlab+0x20634>
   33c64:	ldr	r0, [r8], #4
   33c68:	add	r6, sl, #4
   33c6c:	mov	r5, #0
   33c70:	mov	lr, #0
   33c74:	str	r0, [sp, #48]	; 0x30
   33c78:	add	r0, r1, r0
   33c7c:	str	r0, [sp, #36]	; 0x24
   33c80:	sub	r0, fp, #136	; 0x88
   33c84:	orr	r7, r0, #4
   33c88:	sub	r0, fp, #96	; 0x60
   33c8c:	orr	r0, r0, #4
   33c90:	str	r0, [sp, #28]
   33c94:	bic	r0, r1, #7
   33c98:	str	r0, [sp, #32]
   33c9c:	lsl	r0, r1, #1
   33ca0:	str	r0, [sp, #56]	; 0x38
   33ca4:	cmp	r1, #1
   33ca8:	blt	33d48 <GetDataSlab+0xc384>
   33cac:	ldr	r0, [sp, #48]	; 0x30
   33cb0:	mov	r1, #0
   33cb4:	add	r4, r9, r0, lsl #1
   33cb8:	ldr	r0, [sp, #44]	; 0x2c
   33cbc:	cmp	r0, #8
   33cc0:	bcc	33d24 <GetDataSlab+0xc360>
   33cc4:	ldr	r0, [sp, #60]	; 0x3c
   33cc8:	ldr	r3, [sp, #56]	; 0x38
   33ccc:	mla	r0, r3, r5, r0
   33cd0:	ldr	r3, [sp, #36]	; 0x24
   33cd4:	add	r3, r9, r3, lsl #1
   33cd8:	cmp	r0, r3
   33cdc:	bcs	33cf8 <GetDataSlab+0xc334>
   33ce0:	ldr	r0, [sp, #56]	; 0x38
   33ce4:	ldr	r3, [sp, #60]	; 0x3c
   33ce8:	mla	r0, r0, r5, r0
   33cec:	add	r0, r3, r0
   33cf0:	cmp	r0, r4
   33cf4:	bhi	33d24 <GetDataSlab+0xc360>
   33cf8:	ldr	r1, [sp, #32]
   33cfc:	mov	r3, ip
   33d00:	mov	r0, r4
   33d04:	vld1.16	{d16-d17}, [r0]!
   33d08:	subs	r1, r1, #8
   33d0c:	vst1.16	{d16-d17}, [r3]!
   33d10:	bne	33d04 <GetDataSlab+0xc340>
   33d14:	ldr	r0, [sp, #44]	; 0x2c
   33d18:	ldr	r1, [sp, #32]
   33d1c:	cmp	r0, r1
   33d20:	beq	33d48 <GetDataSlab+0xc384>
   33d24:	ldr	r0, [sp, #44]	; 0x2c
   33d28:	mov	r3, #0
   33d2c:	sub	r0, r0, r1
   33d30:	sub	r1, r3, r1, lsl #1
   33d34:	ldrh	r3, [r4, -r1]
   33d38:	subs	r0, r0, #1
   33d3c:	strh	r3, [ip, -r1]
   33d40:	sub	r1, r1, #2
   33d44:	bne	33d34 <GetDataSlab+0xc370>
   33d48:	ldr	r0, [sp, #40]	; 0x28
   33d4c:	add	r9, r9, r0, lsl #1
   33d50:	add	r2, r2, r0
   33d54:	ldr	r0, [fp, #24]
   33d58:	cmp	r0, #2
   33d5c:	blt	33e0c <GetDataSlab+0xc448>
   33d60:	mov	r1, #0
   33d64:	mov	r0, r1
   33d68:	ldr	r1, [r7, r1, lsl #2]
   33d6c:	add	r1, r1, #1
   33d70:	str	r1, [r7, r0, lsl #2]
   33d74:	ldr	r3, [r6, r0, lsl #2]
   33d78:	sdiv	r4, r1, r3
   33d7c:	mls	r1, r4, r3, r1
   33d80:	cmp	r1, #0
   33d84:	bne	33dfc <GetDataSlab+0xc438>
   33d88:	mov	r1, #0
   33d8c:	sub	r4, fp, #176	; 0xb0
   33d90:	str	r1, [r7, r0, lsl #2]
   33d94:	add	r1, r4, r0, lsl #2
   33d98:	ldr	r1, [r1, #4]
   33d9c:	sdiv	r3, r2, r1
   33da0:	mls	r3, r3, r1, r2
   33da4:	cmp	r3, #0
   33da8:	beq	33dc4 <GetDataSlab+0xc400>
   33dac:	ldr	r4, [r4, r0, lsl #2]
   33db0:	ldr	sl, [r8, r0, lsl #2]
   33db4:	sub	r1, r1, r3
   33db8:	mla	r1, sl, r4, r1
   33dbc:	add	r2, r1, r2
   33dc0:	b	33de0 <GetDataSlab+0xc41c>
   33dc4:	ldr	r1, [r8, r0, lsl #2]
   33dc8:	cmp	r1, #0
   33dcc:	beq	33de4 <GetDataSlab+0xc420>
   33dd0:	sub	r3, fp, #176	; 0xb0
   33dd4:	ldr	r3, [r3, r0, lsl #2]
   33dd8:	mla	r2, r3, r1, r2
   33ddc:	mul	r1, r3, r1
   33de0:	add	r9, r9, r1, lsl #1
   33de4:	ldr	r3, [fp, #24]
   33de8:	add	r1, r0, #1
   33dec:	add	r0, r0, #2
   33df0:	cmp	r0, r3
   33df4:	blt	33d64 <GetDataSlab+0xc3a0>
   33df8:	b	33e0c <GetDataSlab+0xc448>
   33dfc:	ldr	r1, [sp, #28]
   33e00:	ldr	r0, [r1, r0, lsl #2]
   33e04:	add	r9, r9, r0, lsl #1
   33e08:	add	r2, r0, r2
   33e0c:	ldr	r1, [sp, #44]	; 0x2c
   33e10:	ldr	r0, [sp, #56]	; 0x38
   33e14:	ldr	r3, [sp, #52]	; 0x34
   33e18:	add	r5, r5, #1
   33e1c:	add	lr, lr, r1
   33e20:	add	ip, ip, r0
   33e24:	mov	r0, #0
   33e28:	cmp	lr, r3
   33e2c:	blt	33ca4 <GetDataSlab+0xc2e0>
   33e30:	b	47ffc <GetDataSlab+0x20638>
   33e34:	ldr	r0, [ip]
   33e38:	mov	r2, #0
   33e3c:	sub	r5, fp, #176	; 0xb0
   33e40:	sub	r6, fp, #96	; 0x60
   33e44:	str	r0, [sp, #24]
   33e48:	sub	r0, r0, #1
   33e4c:	str	r0, [fp, #-96]	; 0xffffffa0
   33e50:	ldr	r0, [fp, #8]
   33e54:	ldr	r0, [r0]
   33e58:	str	r0, [fp, #-176]	; 0xffffff50
   33e5c:	str	r0, [sp, #40]	; 0x28
   33e60:	ldr	r0, [fp, #24]
   33e64:	ldr	r1, [sl]
   33e68:	cmp	r0, #2
   33e6c:	str	r1, [sp, #44]	; 0x2c
   33e70:	str	r1, [sp, #52]	; 0x34
   33e74:	blt	33fbc <GetDataSlab+0xc5f8>
   33e78:	ldr	r0, [fp, #8]
   33e7c:	ldr	r3, [sp, #40]	; 0x28
   33e80:	mov	r4, #1
   33e84:	mov	lr, #0
   33e88:	mvn	ip, #15
   33e8c:	mov	r2, #0
   33e90:	sub	r7, r0, #4
   33e94:	sub	r9, r0, #12
   33e98:	ldr	r0, [sp, #44]	; 0x2c
   33e9c:	mov	r8, r3
   33ea0:	str	r0, [sp, #52]	; 0x34
   33ea4:	ldr	r1, [fp, #16]
   33ea8:	add	lr, lr, #1
   33eac:	cmp	lr, #4
   33eb0:	ldr	r1, [r1, r4, lsl #2]
   33eb4:	str	r3, [r5, r4, lsl #2]
   33eb8:	sub	r1, r1, #1
   33ebc:	str	r1, [r6, r4, lsl #2]
   33ec0:	ldr	r6, [fp, #8]
   33ec4:	ldr	r6, [r6, r4, lsl #2]
   33ec8:	str	r6, [sp, #56]	; 0x38
   33ecc:	bcs	33ed8 <GetDataSlab+0xc514>
   33ed0:	mov	r5, r4
   33ed4:	b	33f60 <GetDataSlab+0xc59c>
   33ed8:	vmov.i32	q9, #1	; 0x00000001
   33edc:	vmov.i32	q10, #1	; 0x00000001
   33ee0:	vmov.i32	q8, #1	; 0x00000001
   33ee4:	vmov.32	d23[1], r6
   33ee8:	bic	r6, lr, #3
   33eec:	bic	sl, r4, #3
   33ef0:	vmov.32	d18[0], r3
   33ef4:	vmov.32	d20[0], r1
   33ef8:	sub	r5, r4, r6
   33efc:	mov	r1, r9
   33f00:	vorr	d16, d18, d18
   33f04:	vmov.i32	q9, #1	; 0x00000001
   33f08:	vorr	d18, d20, d20
   33f0c:	vld1.32	{d20-d21}, [r1], ip
   33f10:	subs	sl, sl, #4
   33f14:	vrev64.32	q12, q10
   33f18:	vext.8	q12, q12, q12, #8
   33f1c:	vext.8	q11, q11, q12, #12
   33f20:	vmul.i32	q9, q9, q12
   33f24:	vmul.i32	q8, q11, q8
   33f28:	vorr	q11, q12, q12
   33f2c:	bne	33f0c <GetDataSlab+0xc548>
   33f30:	vext.8	q11, q9, q8, #8
   33f34:	vext.8	q12, q8, q8, #8
   33f38:	ldr	sl, [fp, #20]
   33f3c:	cmp	lr, r6
   33f40:	vmul.i32	q0, q9, q11
   33f44:	vmul.i32	q1, q8, q12
   33f48:	vmul.i32	q8, q0, d0[1]
   33f4c:	vmul.i32	q9, q1, d2[1]
   33f50:	vmov.32	r1, d16[0]
   33f54:	vmov.32	r3, d18[0]
   33f58:	beq	33f74 <GetDataSlab+0xc5b0>
   33f5c:	vmov.32	r6, d20[0]
   33f60:	mul	r3, r6, r3
   33f64:	ldr	r6, [r7, r5, lsl #2]
   33f68:	subs	r5, r5, #1
   33f6c:	mul	r1, r1, r6
   33f70:	bne	33f60 <GetDataSlab+0xc59c>
   33f74:	sub	r6, fp, #96	; 0x60
   33f78:	sub	r5, fp, #176	; 0xb0
   33f7c:	ldr	r0, [sp, #52]	; 0x34
   33f80:	add	r9, r9, #4
   33f84:	str	r1, [r6, r4, lsl #2]
   33f88:	ldr	r1, [fp, #12]
   33f8c:	str	r3, [r5, r4, lsl #2]
   33f90:	ldr	r1, [r1, r4, lsl #2]
   33f94:	mla	r2, r1, r8, r2
   33f98:	ldr	r1, [sl, r4, lsl #2]
   33f9c:	mov	r8, r3
   33fa0:	ldr	r3, [sp, #56]	; 0x38
   33fa4:	add	r4, r4, #1
   33fa8:	mul	r0, r1, r0
   33fac:	ldr	r1, [fp, #24]
   33fb0:	str	r0, [sp, #52]	; 0x34
   33fb4:	cmp	r4, r1
   33fb8:	bne	33ea4 <GetDataSlab+0xc4e0>
   33fbc:	ldr	r0, [sp, #48]	; 0x30
   33fc0:	ldr	r6, [sp, #24]
   33fc4:	add	r9, r0, r2, lsl #1
   33fc8:	cmp	r6, #1
   33fcc:	bne	41dac <GetDataSlab+0x1a3e8>
   33fd0:	ldr	r0, [sp, #52]	; 0x34
   33fd4:	ldr	ip, [sp, #60]	; 0x3c
   33fd8:	ldr	r8, [fp, #12]
   33fdc:	ldr	r1, [sp, #44]	; 0x2c
   33fe0:	cmp	r0, #1
   33fe4:	blt	47ff8 <GetDataSlab+0x20634>
   33fe8:	ldr	r0, [r8], #4
   33fec:	add	r6, sl, #4
   33ff0:	mov	r5, #0
   33ff4:	mov	lr, #0
   33ff8:	str	r0, [sp, #48]	; 0x30
   33ffc:	add	r0, r1, r0
   34000:	str	r0, [sp, #36]	; 0x24
   34004:	sub	r0, fp, #136	; 0x88
   34008:	orr	r7, r0, #4
   3400c:	sub	r0, fp, #96	; 0x60
   34010:	orr	r0, r0, #4
   34014:	str	r0, [sp, #28]
   34018:	bic	r0, r1, #7
   3401c:	str	r0, [sp, #32]
   34020:	lsl	r0, r1, #1
   34024:	str	r0, [sp, #56]	; 0x38
   34028:	cmp	r1, #1
   3402c:	blt	340cc <GetDataSlab+0xc708>
   34030:	ldr	r0, [sp, #48]	; 0x30
   34034:	mov	r1, #0
   34038:	add	r4, r9, r0, lsl #1
   3403c:	ldr	r0, [sp, #44]	; 0x2c
   34040:	cmp	r0, #8
   34044:	bcc	340a8 <GetDataSlab+0xc6e4>
   34048:	ldr	r0, [sp, #60]	; 0x3c
   3404c:	ldr	r3, [sp, #56]	; 0x38
   34050:	mla	r0, r3, r5, r0
   34054:	ldr	r3, [sp, #36]	; 0x24
   34058:	add	r3, r9, r3, lsl #1
   3405c:	cmp	r0, r3
   34060:	bcs	3407c <GetDataSlab+0xc6b8>
   34064:	ldr	r0, [sp, #56]	; 0x38
   34068:	ldr	r3, [sp, #60]	; 0x3c
   3406c:	mla	r0, r0, r5, r0
   34070:	add	r0, r3, r0
   34074:	cmp	r0, r4
   34078:	bhi	340a8 <GetDataSlab+0xc6e4>
   3407c:	ldr	r1, [sp, #32]
   34080:	mov	r3, ip
   34084:	mov	r0, r4
   34088:	vld1.16	{d16-d17}, [r0]!
   3408c:	subs	r1, r1, #8
   34090:	vst1.16	{d16-d17}, [r3]!
   34094:	bne	34088 <GetDataSlab+0xc6c4>
   34098:	ldr	r0, [sp, #44]	; 0x2c
   3409c:	ldr	r1, [sp, #32]
   340a0:	cmp	r0, r1
   340a4:	beq	340cc <GetDataSlab+0xc708>
   340a8:	ldr	r0, [sp, #44]	; 0x2c
   340ac:	mov	r3, #0
   340b0:	sub	r0, r0, r1
   340b4:	sub	r1, r3, r1, lsl #1
   340b8:	ldrh	r3, [r4, -r1]
   340bc:	subs	r0, r0, #1
   340c0:	strh	r3, [ip, -r1]
   340c4:	sub	r1, r1, #2
   340c8:	bne	340b8 <GetDataSlab+0xc6f4>
   340cc:	ldr	r0, [sp, #40]	; 0x28
   340d0:	add	r9, r9, r0, lsl #1
   340d4:	add	r2, r2, r0
   340d8:	ldr	r0, [fp, #24]
   340dc:	cmp	r0, #2
   340e0:	blt	34190 <GetDataSlab+0xc7cc>
   340e4:	mov	r1, #0
   340e8:	mov	r0, r1
   340ec:	ldr	r1, [r7, r1, lsl #2]
   340f0:	add	r1, r1, #1
   340f4:	str	r1, [r7, r0, lsl #2]
   340f8:	ldr	r3, [r6, r0, lsl #2]
   340fc:	sdiv	r4, r1, r3
   34100:	mls	r1, r4, r3, r1
   34104:	cmp	r1, #0
   34108:	bne	34180 <GetDataSlab+0xc7bc>
   3410c:	mov	r1, #0
   34110:	sub	r4, fp, #176	; 0xb0
   34114:	str	r1, [r7, r0, lsl #2]
   34118:	add	r1, r4, r0, lsl #2
   3411c:	ldr	r1, [r1, #4]
   34120:	sdiv	r3, r2, r1
   34124:	mls	r3, r3, r1, r2
   34128:	cmp	r3, #0
   3412c:	beq	34148 <GetDataSlab+0xc784>
   34130:	ldr	r4, [r4, r0, lsl #2]
   34134:	ldr	sl, [r8, r0, lsl #2]
   34138:	sub	r1, r1, r3
   3413c:	mla	r1, sl, r4, r1
   34140:	add	r2, r1, r2
   34144:	b	34164 <GetDataSlab+0xc7a0>
   34148:	ldr	r1, [r8, r0, lsl #2]
   3414c:	cmp	r1, #0
   34150:	beq	34168 <GetDataSlab+0xc7a4>
   34154:	sub	r3, fp, #176	; 0xb0
   34158:	ldr	r3, [r3, r0, lsl #2]
   3415c:	mla	r2, r3, r1, r2
   34160:	mul	r1, r3, r1
   34164:	add	r9, r9, r1, lsl #1
   34168:	ldr	r3, [fp, #24]
   3416c:	add	r1, r0, #1
   34170:	add	r0, r0, #2
   34174:	cmp	r0, r3
   34178:	blt	340e8 <GetDataSlab+0xc724>
   3417c:	b	34190 <GetDataSlab+0xc7cc>
   34180:	ldr	r1, [sp, #28]
   34184:	ldr	r0, [r1, r0, lsl #2]
   34188:	add	r9, r9, r0, lsl #1
   3418c:	add	r2, r0, r2
   34190:	ldr	r1, [sp, #44]	; 0x2c
   34194:	ldr	r0, [sp, #56]	; 0x38
   34198:	ldr	r3, [sp, #52]	; 0x34
   3419c:	add	r5, r5, #1
   341a0:	add	lr, lr, r1
   341a4:	add	ip, ip, r0
   341a8:	mov	r0, #0
   341ac:	cmp	lr, r3
   341b0:	blt	34028 <GetDataSlab+0xc664>
   341b4:	b	47ffc <GetDataSlab+0x20638>
   341b8:	ldr	r0, [ip]
   341bc:	mov	r3, #0
   341c0:	sub	r6, fp, #176	; 0xb0
   341c4:	sub	lr, fp, #96	; 0x60
   341c8:	str	r0, [sp, #28]
   341cc:	sub	r0, r0, #1
   341d0:	str	r0, [fp, #-96]	; 0xffffffa0
   341d4:	ldr	r0, [fp, #8]
   341d8:	ldr	r0, [r0]
   341dc:	str	r0, [fp, #-176]	; 0xffffff50
   341e0:	str	r0, [sp, #36]	; 0x24
   341e4:	ldr	r0, [fp, #24]
   341e8:	ldr	r1, [sl]
   341ec:	cmp	r0, #2
   341f0:	str	r1, [sp, #52]	; 0x34
   341f4:	str	r1, [sp, #56]	; 0x38
   341f8:	blt	34348 <GetDataSlab+0xc984>
   341fc:	ldr	r0, [fp, #8]
   34200:	ldr	r2, [sp, #36]	; 0x24
   34204:	mov	r5, #1
   34208:	mov	r9, #0
   3420c:	mvn	r4, #15
   34210:	mov	r3, #0
   34214:	sub	r7, r0, #4
   34218:	sub	r8, r0, #12
   3421c:	mov	r0, r2
   34220:	str	r2, [sp, #44]	; 0x2c
   34224:	ldr	r0, [sp, #52]	; 0x34
   34228:	str	r0, [sp, #56]	; 0x38
   3422c:	ldr	r0, [ip, r5, lsl #2]
   34230:	str	r2, [r6, r5, lsl #2]
   34234:	add	r9, r9, #1
   34238:	cmp	r9, #4
   3423c:	sub	ip, r0, #1
   34240:	ldr	r0, [fp, #8]
   34244:	str	ip, [lr, r5, lsl #2]
   34248:	ldr	r0, [r0, r5, lsl #2]
   3424c:	str	r0, [sp, #40]	; 0x28
   34250:	bcs	3425c <GetDataSlab+0xc898>
   34254:	mov	r6, r5
   34258:	b	342e4 <GetDataSlab+0xc920>
   3425c:	vmov.i32	q9, #1	; 0x00000001
   34260:	vmov.i32	q10, #1	; 0x00000001
   34264:	vmov.i32	q8, #1	; 0x00000001
   34268:	vmov.32	d23[1], r0
   3426c:	bic	r0, r9, #3
   34270:	bic	sl, r5, #3
   34274:	vmov.32	d18[0], r2
   34278:	vmov.32	d20[0], ip
   3427c:	sub	r6, r5, r0
   34280:	mov	r2, r8
   34284:	vorr	d16, d18, d18
   34288:	vmov.i32	q9, #1	; 0x00000001
   3428c:	vorr	d18, d20, d20
   34290:	vld1.32	{d20-d21}, [r2], r4
   34294:	subs	sl, sl, #4
   34298:	vrev64.32	q12, q10
   3429c:	vext.8	q12, q12, q12, #8
   342a0:	vext.8	q11, q11, q12, #12
   342a4:	vmul.i32	q9, q9, q12
   342a8:	vmul.i32	q8, q11, q8
   342ac:	vorr	q11, q12, q12
   342b0:	bne	34290 <GetDataSlab+0xc8cc>
   342b4:	vext.8	q11, q9, q8, #8
   342b8:	vext.8	q12, q8, q8, #8
   342bc:	ldr	sl, [fp, #20]
   342c0:	cmp	r9, r0
   342c4:	vmul.i32	q0, q9, q11
   342c8:	vmul.i32	q1, q8, q12
   342cc:	vmul.i32	q8, q0, d0[1]
   342d0:	vmul.i32	q9, q1, d2[1]
   342d4:	vmov.32	ip, d16[0]
   342d8:	vmov.32	r2, d18[0]
   342dc:	beq	342f8 <GetDataSlab+0xc934>
   342e0:	vmov.32	r0, d20[0]
   342e4:	mul	r2, r0, r2
   342e8:	ldr	r0, [r7, r6, lsl #2]
   342ec:	subs	r6, r6, #1
   342f0:	mul	ip, ip, r0
   342f4:	bne	342e4 <GetDataSlab+0xc920>
   342f8:	ldr	r0, [fp, #12]
   342fc:	sub	r6, fp, #176	; 0xb0
   34300:	sub	lr, fp, #96	; 0x60
   34304:	ldr	r1, [sp, #44]	; 0x2c
   34308:	str	r2, [sp, #44]	; 0x2c
   3430c:	add	r8, r8, #4
   34310:	str	r2, [r6, r5, lsl #2]
   34314:	str	ip, [lr, r5, lsl #2]
   34318:	ldr	r2, [sp, #40]	; 0x28
   3431c:	ldr	ip, [fp, #16]
   34320:	ldr	r0, [r0, r5, lsl #2]
   34324:	mla	r3, r0, r1, r3
   34328:	ldr	r0, [sl, r5, lsl #2]
   3432c:	ldr	r1, [sp, #56]	; 0x38
   34330:	add	r5, r5, #1
   34334:	mul	r1, r0, r1
   34338:	ldr	r0, [fp, #24]
   3433c:	str	r1, [sp, #56]	; 0x38
   34340:	cmp	r5, r0
   34344:	bne	3422c <GetDataSlab+0xc868>
   34348:	ldr	r0, [sp, #48]	; 0x30
   3434c:	ldr	r6, [sp, #28]
   34350:	add	sl, r0, r3, lsl #2
   34354:	cmp	r6, #1
   34358:	bne	41f38 <GetDataSlab+0x1a574>
   3435c:	ldr	r0, [sp, #56]	; 0x38
   34360:	ldr	r2, [sp, #52]	; 0x34
   34364:	sub	r1, fp, #96	; 0x60
   34368:	cmp	r0, #1
   3436c:	ldr	r0, [fp, #12]
   34370:	blt	47ff8 <GetDataSlab+0x20634>
   34374:	add	r8, r0, #4
   34378:	ldr	r0, [fp, #20]
   3437c:	mov	r9, #0
   34380:	mov	lr, #0
   34384:	add	r6, r0, #4
   34388:	sub	r0, fp, #136	; 0x88
   3438c:	orr	r5, r0, #4
   34390:	orr	r0, r1, #4
   34394:	str	r0, [sp, #40]	; 0x28
   34398:	lsl	r0, r2, #1
   3439c:	str	r0, [sp, #48]	; 0x30
   343a0:	bic	r0, r2, #3
   343a4:	str	r0, [sp, #44]	; 0x2c
   343a8:	ldr	r4, [sp, #60]	; 0x3c
   343ac:	cmp	r2, #1
   343b0:	blt	34420 <GetDataSlab+0xca5c>
   343b4:	ldr	r0, [fp, #12]
   343b8:	mov	r1, #0
   343bc:	ldr	r0, [r0]
   343c0:	add	r7, sl, r0, lsl #2
   343c4:	ldr	r0, [sp, #52]	; 0x34
   343c8:	cmp	r0, #4
   343cc:	bcc	34400 <GetDataSlab+0xca3c>
   343d0:	ldr	r2, [sp, #44]	; 0x2c
   343d4:	mov	r1, r4
   343d8:	mov	r0, r7
   343dc:	vld1.32	{d16-d17}, [r0]!
   343e0:	subs	r2, r2, #4
   343e4:	vmovn.i32	d16, q8
   343e8:	vst1.16	{d16}, [r1]!
   343ec:	bne	343dc <GetDataSlab+0xca18>
   343f0:	ldr	r0, [sp, #52]	; 0x34
   343f4:	ldr	r1, [sp, #44]	; 0x2c
   343f8:	cmp	r0, r1
   343fc:	beq	34420 <GetDataSlab+0xca5c>
   34400:	ldr	r0, [sp, #52]	; 0x34
   34404:	sub	r0, r0, r1
   34408:	sub	r1, r9, r1, lsl #1
   3440c:	ldr	r2, [r7, -r1, lsl #1]
   34410:	subs	r0, r0, #1
   34414:	strh	r2, [r4, -r1]
   34418:	sub	r1, r1, #2
   3441c:	bne	3440c <GetDataSlab+0xca48>
   34420:	ldr	r0, [sp, #36]	; 0x24
   34424:	add	sl, sl, r0, lsl #2
   34428:	add	r3, r3, r0
   3442c:	ldr	r0, [fp, #24]
   34430:	cmp	r0, #2
   34434:	blt	344e4 <GetDataSlab+0xcb20>
   34438:	mov	r1, #0
   3443c:	mov	r0, r1
   34440:	ldr	r1, [r5, r1, lsl #2]
   34444:	add	r1, r1, #1
   34448:	str	r1, [r5, r0, lsl #2]
   3444c:	ldr	r2, [r6, r0, lsl #2]
   34450:	sdiv	r7, r1, r2
   34454:	mls	r1, r7, r2, r1
   34458:	cmp	r1, #0
   3445c:	bne	344d4 <GetDataSlab+0xcb10>
   34460:	sub	r7, fp, #176	; 0xb0
   34464:	str	r9, [r5, r0, lsl #2]
   34468:	add	r1, r7, r0, lsl #2
   3446c:	ldr	r1, [r1, #4]
   34470:	sdiv	r2, r3, r1
   34474:	mls	r2, r2, r1, r3
   34478:	cmp	r2, #0
   3447c:	beq	3449c <GetDataSlab+0xcad8>
   34480:	ldr	r7, [r7, r0, lsl #2]
   34484:	ldr	ip, [r8, r0, lsl #2]
   34488:	ldr	r4, [sp, #60]	; 0x3c
   3448c:	sub	r1, r1, r2
   34490:	mla	r1, ip, r7, r1
   34494:	add	r3, r1, r3
   34498:	b	344b8 <GetDataSlab+0xcaf4>
   3449c:	ldr	r1, [r8, r0, lsl #2]
   344a0:	cmp	r1, #0
   344a4:	beq	344bc <GetDataSlab+0xcaf8>
   344a8:	sub	r2, fp, #176	; 0xb0
   344ac:	ldr	r2, [r2, r0, lsl #2]
   344b0:	mla	r3, r2, r1, r3
   344b4:	mul	r1, r2, r1
   344b8:	add	sl, sl, r1, lsl #2
   344bc:	ldr	r2, [fp, #24]
   344c0:	add	r1, r0, #1
   344c4:	add	r0, r0, #2
   344c8:	cmp	r0, r2
   344cc:	blt	3443c <GetDataSlab+0xca78>
   344d0:	b	344e4 <GetDataSlab+0xcb20>
   344d4:	ldr	r1, [sp, #40]	; 0x28
   344d8:	ldr	r0, [r1, r0, lsl #2]
   344dc:	add	sl, sl, r0, lsl #2
   344e0:	add	r3, r0, r3
   344e4:	ldr	r2, [sp, #52]	; 0x34
   344e8:	ldr	r0, [sp, #48]	; 0x30
   344ec:	ldr	r1, [sp, #56]	; 0x38
   344f0:	add	lr, lr, r2
   344f4:	add	r4, r4, r0
   344f8:	mov	r0, #0
   344fc:	cmp	lr, r1
   34500:	str	r4, [sp, #60]	; 0x3c
   34504:	blt	343a8 <GetDataSlab+0xc9e4>
   34508:	b	47ffc <GetDataSlab+0x20638>
   3450c:	ldr	r0, [ip]
   34510:	mov	r3, #0
   34514:	sub	r6, fp, #176	; 0xb0
   34518:	sub	lr, fp, #96	; 0x60
   3451c:	str	r0, [sp, #28]
   34520:	sub	r0, r0, #1
   34524:	str	r0, [fp, #-96]	; 0xffffffa0
   34528:	ldr	r0, [fp, #8]
   3452c:	ldr	r0, [r0]
   34530:	str	r0, [fp, #-176]	; 0xffffff50
   34534:	str	r0, [sp, #36]	; 0x24
   34538:	ldr	r0, [fp, #24]
   3453c:	ldr	r1, [sl]
   34540:	cmp	r0, #2
   34544:	str	r1, [sp, #52]	; 0x34
   34548:	str	r1, [sp, #56]	; 0x38
   3454c:	blt	3469c <GetDataSlab+0xccd8>
   34550:	ldr	r0, [fp, #8]
   34554:	ldr	r2, [sp, #36]	; 0x24
   34558:	mov	r5, #1
   3455c:	mov	r9, #0
   34560:	mvn	r4, #15
   34564:	mov	r3, #0
   34568:	sub	r7, r0, #4
   3456c:	sub	r8, r0, #12
   34570:	mov	r0, r2
   34574:	str	r2, [sp, #44]	; 0x2c
   34578:	ldr	r0, [sp, #52]	; 0x34
   3457c:	str	r0, [sp, #56]	; 0x38
   34580:	ldr	r0, [ip, r5, lsl #2]
   34584:	str	r2, [r6, r5, lsl #2]
   34588:	add	r9, r9, #1
   3458c:	cmp	r9, #4
   34590:	sub	ip, r0, #1
   34594:	ldr	r0, [fp, #8]
   34598:	str	ip, [lr, r5, lsl #2]
   3459c:	ldr	r0, [r0, r5, lsl #2]
   345a0:	str	r0, [sp, #40]	; 0x28
   345a4:	bcs	345b0 <GetDataSlab+0xcbec>
   345a8:	mov	r6, r5
   345ac:	b	34638 <GetDataSlab+0xcc74>
   345b0:	vmov.i32	q9, #1	; 0x00000001
   345b4:	vmov.i32	q10, #1	; 0x00000001
   345b8:	vmov.i32	q8, #1	; 0x00000001
   345bc:	vmov.32	d23[1], r0
   345c0:	bic	r0, r9, #3
   345c4:	bic	sl, r5, #3
   345c8:	vmov.32	d18[0], r2
   345cc:	vmov.32	d20[0], ip
   345d0:	sub	r6, r5, r0
   345d4:	mov	r2, r8
   345d8:	vorr	d16, d18, d18
   345dc:	vmov.i32	q9, #1	; 0x00000001
   345e0:	vorr	d18, d20, d20
   345e4:	vld1.32	{d20-d21}, [r2], r4
   345e8:	subs	sl, sl, #4
   345ec:	vrev64.32	q12, q10
   345f0:	vext.8	q12, q12, q12, #8
   345f4:	vext.8	q11, q11, q12, #12
   345f8:	vmul.i32	q9, q9, q12
   345fc:	vmul.i32	q8, q11, q8
   34600:	vorr	q11, q12, q12
   34604:	bne	345e4 <GetDataSlab+0xcc20>
   34608:	vext.8	q11, q9, q8, #8
   3460c:	vext.8	q12, q8, q8, #8
   34610:	ldr	sl, [fp, #20]
   34614:	cmp	r9, r0
   34618:	vmul.i32	q0, q9, q11
   3461c:	vmul.i32	q1, q8, q12
   34620:	vmul.i32	q8, q0, d0[1]
   34624:	vmul.i32	q9, q1, d2[1]
   34628:	vmov.32	ip, d16[0]
   3462c:	vmov.32	r2, d18[0]
   34630:	beq	3464c <GetDataSlab+0xcc88>
   34634:	vmov.32	r0, d20[0]
   34638:	mul	r2, r0, r2
   3463c:	ldr	r0, [r7, r6, lsl #2]
   34640:	subs	r6, r6, #1
   34644:	mul	ip, ip, r0
   34648:	bne	34638 <GetDataSlab+0xcc74>
   3464c:	ldr	r0, [fp, #12]
   34650:	sub	r6, fp, #176	; 0xb0
   34654:	sub	lr, fp, #96	; 0x60
   34658:	ldr	r1, [sp, #44]	; 0x2c
   3465c:	str	r2, [sp, #44]	; 0x2c
   34660:	add	r8, r8, #4
   34664:	str	r2, [r6, r5, lsl #2]
   34668:	str	ip, [lr, r5, lsl #2]
   3466c:	ldr	r2, [sp, #40]	; 0x28
   34670:	ldr	ip, [fp, #16]
   34674:	ldr	r0, [r0, r5, lsl #2]
   34678:	mla	r3, r0, r1, r3
   3467c:	ldr	r0, [sl, r5, lsl #2]
   34680:	ldr	r1, [sp, #56]	; 0x38
   34684:	add	r5, r5, #1
   34688:	mul	r1, r0, r1
   3468c:	ldr	r0, [fp, #24]
   34690:	str	r1, [sp, #56]	; 0x38
   34694:	cmp	r5, r0
   34698:	bne	34580 <GetDataSlab+0xcbbc>
   3469c:	ldr	r0, [sp, #48]	; 0x30
   346a0:	ldr	r6, [sp, #28]
   346a4:	add	sl, r0, r3, lsl #2
   346a8:	cmp	r6, #1
   346ac:	bne	420cc <GetDataSlab+0x1a708>
   346b0:	ldr	r0, [sp, #56]	; 0x38
   346b4:	ldr	r2, [sp, #52]	; 0x34
   346b8:	sub	r1, fp, #96	; 0x60
   346bc:	cmp	r0, #1
   346c0:	ldr	r0, [fp, #12]
   346c4:	blt	47ff8 <GetDataSlab+0x20634>
   346c8:	add	r8, r0, #4
   346cc:	ldr	r0, [fp, #20]
   346d0:	mov	r9, #0
   346d4:	mov	lr, #0
   346d8:	add	r6, r0, #4
   346dc:	sub	r0, fp, #136	; 0x88
   346e0:	orr	r5, r0, #4
   346e4:	orr	r0, r1, #4
   346e8:	str	r0, [sp, #40]	; 0x28
   346ec:	lsl	r0, r2, #1
   346f0:	str	r0, [sp, #48]	; 0x30
   346f4:	bic	r0, r2, #3
   346f8:	str	r0, [sp, #44]	; 0x2c
   346fc:	ldr	r4, [sp, #60]	; 0x3c
   34700:	cmp	r2, #1
   34704:	blt	34774 <GetDataSlab+0xcdb0>
   34708:	ldr	r0, [fp, #12]
   3470c:	mov	r1, #0
   34710:	ldr	r0, [r0]
   34714:	add	r7, sl, r0, lsl #2
   34718:	ldr	r0, [sp, #52]	; 0x34
   3471c:	cmp	r0, #4
   34720:	bcc	34754 <GetDataSlab+0xcd90>
   34724:	ldr	r2, [sp, #44]	; 0x2c
   34728:	mov	r1, r4
   3472c:	mov	r0, r7
   34730:	vld1.32	{d16-d17}, [r0]!
   34734:	subs	r2, r2, #4
   34738:	vmovn.i32	d16, q8
   3473c:	vst1.16	{d16}, [r1]!
   34740:	bne	34730 <GetDataSlab+0xcd6c>
   34744:	ldr	r0, [sp, #52]	; 0x34
   34748:	ldr	r1, [sp, #44]	; 0x2c
   3474c:	cmp	r0, r1
   34750:	beq	34774 <GetDataSlab+0xcdb0>
   34754:	ldr	r0, [sp, #52]	; 0x34
   34758:	sub	r0, r0, r1
   3475c:	sub	r1, r9, r1, lsl #1
   34760:	ldr	r2, [r7, -r1, lsl #1]
   34764:	subs	r0, r0, #1
   34768:	strh	r2, [r4, -r1]
   3476c:	sub	r1, r1, #2
   34770:	bne	34760 <GetDataSlab+0xcd9c>
   34774:	ldr	r0, [sp, #36]	; 0x24
   34778:	add	sl, sl, r0, lsl #2
   3477c:	add	r3, r3, r0
   34780:	ldr	r0, [fp, #24]
   34784:	cmp	r0, #2
   34788:	blt	34838 <GetDataSlab+0xce74>
   3478c:	mov	r1, #0
   34790:	mov	r0, r1
   34794:	ldr	r1, [r5, r1, lsl #2]
   34798:	add	r1, r1, #1
   3479c:	str	r1, [r5, r0, lsl #2]
   347a0:	ldr	r2, [r6, r0, lsl #2]
   347a4:	sdiv	r7, r1, r2
   347a8:	mls	r1, r7, r2, r1
   347ac:	cmp	r1, #0
   347b0:	bne	34828 <GetDataSlab+0xce64>
   347b4:	sub	r7, fp, #176	; 0xb0
   347b8:	str	r9, [r5, r0, lsl #2]
   347bc:	add	r1, r7, r0, lsl #2
   347c0:	ldr	r1, [r1, #4]
   347c4:	sdiv	r2, r3, r1
   347c8:	mls	r2, r2, r1, r3
   347cc:	cmp	r2, #0
   347d0:	beq	347f0 <GetDataSlab+0xce2c>
   347d4:	ldr	r7, [r7, r0, lsl #2]
   347d8:	ldr	ip, [r8, r0, lsl #2]
   347dc:	ldr	r4, [sp, #60]	; 0x3c
   347e0:	sub	r1, r1, r2
   347e4:	mla	r1, ip, r7, r1
   347e8:	add	r3, r1, r3
   347ec:	b	3480c <GetDataSlab+0xce48>
   347f0:	ldr	r1, [r8, r0, lsl #2]
   347f4:	cmp	r1, #0
   347f8:	beq	34810 <GetDataSlab+0xce4c>
   347fc:	sub	r2, fp, #176	; 0xb0
   34800:	ldr	r2, [r2, r0, lsl #2]
   34804:	mla	r3, r2, r1, r3
   34808:	mul	r1, r2, r1
   3480c:	add	sl, sl, r1, lsl #2
   34810:	ldr	r2, [fp, #24]
   34814:	add	r1, r0, #1
   34818:	add	r0, r0, #2
   3481c:	cmp	r0, r2
   34820:	blt	34790 <GetDataSlab+0xcdcc>
   34824:	b	34838 <GetDataSlab+0xce74>
   34828:	ldr	r1, [sp, #40]	; 0x28
   3482c:	ldr	r0, [r1, r0, lsl #2]
   34830:	add	sl, sl, r0, lsl #2
   34834:	add	r3, r0, r3
   34838:	ldr	r2, [sp, #52]	; 0x34
   3483c:	ldr	r0, [sp, #48]	; 0x30
   34840:	ldr	r1, [sp, #56]	; 0x38
   34844:	add	lr, lr, r2
   34848:	add	r4, r4, r0
   3484c:	mov	r0, #0
   34850:	cmp	lr, r1
   34854:	str	r4, [sp, #60]	; 0x3c
   34858:	blt	346fc <GetDataSlab+0xcd38>
   3485c:	b	47ffc <GetDataSlab+0x20638>
   34860:	ldr	r0, [ip]
   34864:	ldr	r9, [fp, #8]
   34868:	mov	r2, #0
   3486c:	sub	r5, fp, #176	; 0xb0
   34870:	sub	r6, fp, #96	; 0x60
   34874:	str	r0, [sp, #24]
   34878:	sub	r0, r0, #1
   3487c:	str	r0, [fp, #-96]	; 0xffffffa0
   34880:	ldr	r0, [r9]
   34884:	str	r0, [fp, #-176]	; 0xffffff50
   34888:	str	r0, [sp, #36]	; 0x24
   3488c:	ldr	r0, [fp, #24]
   34890:	ldr	r1, [sl]
   34894:	cmp	r0, #2
   34898:	str	r1, [sp, #44]	; 0x2c
   3489c:	str	r1, [sp, #52]	; 0x34
   348a0:	blt	349f8 <GetDataSlab+0xd034>
   348a4:	mov	r0, #0
   348a8:	ldr	r3, [sp, #36]	; 0x24
   348ac:	sub	r7, r9, #4
   348b0:	sub	ip, r9, #12
   348b4:	mov	r4, #1
   348b8:	mvn	lr, #15
   348bc:	mov	r2, #0
   348c0:	str	r0, [sp, #56]	; 0x38
   348c4:	ldr	r0, [sp, #44]	; 0x2c
   348c8:	mov	r8, r3
   348cc:	str	r0, [sp, #52]	; 0x34
   348d0:	ldr	r1, [fp, #16]
   348d4:	ldr	r0, [sp, #56]	; 0x38
   348d8:	ldr	r1, [r1, r4, lsl #2]
   348dc:	str	r3, [r5, r4, lsl #2]
   348e0:	add	r0, r0, #1
   348e4:	cmp	r0, #4
   348e8:	str	r0, [sp, #56]	; 0x38
   348ec:	sub	sl, r1, #1
   348f0:	str	sl, [r6, r4, lsl #2]
   348f4:	ldr	r1, [r9, r4, lsl #2]
   348f8:	str	r1, [sp, #40]	; 0x28
   348fc:	bcs	34908 <GetDataSlab+0xcf44>
   34900:	mov	r5, r4
   34904:	b	34998 <GetDataSlab+0xcfd4>
   34908:	vmov.i32	q9, #1	; 0x00000001
   3490c:	vmov.i32	q10, #1	; 0x00000001
   34910:	vmov.i32	q8, #1	; 0x00000001
   34914:	vmov.32	d23[1], r1
   34918:	bic	r1, r0, #3
   3491c:	bic	r9, r4, #3
   34920:	vmov.32	d18[0], r3
   34924:	vmov.32	d20[0], sl
   34928:	sub	r5, r4, r1
   3492c:	mov	r3, ip
   34930:	vorr	d16, d18, d18
   34934:	vmov.i32	q9, #1	; 0x00000001
   34938:	vorr	d18, d20, d20
   3493c:	vld1.32	{d20-d21}, [r3], lr
   34940:	subs	r9, r9, #4
   34944:	vrev64.32	q12, q10
   34948:	vext.8	q12, q12, q12, #8
   3494c:	vext.8	q11, q11, q12, #12
   34950:	vmul.i32	q9, q9, q12
   34954:	vmul.i32	q8, q11, q8
   34958:	vorr	q11, q12, q12
   3495c:	bne	3493c <GetDataSlab+0xcf78>
   34960:	vext.8	q11, q9, q8, #8
   34964:	vext.8	q12, q8, q8, #8
   34968:	cmp	r0, r1
   3496c:	vmul.i32	q0, q9, q11
   34970:	vmul.i32	q1, q8, q12
   34974:	vmul.i32	q8, q0, d0[1]
   34978:	vmul.i32	q9, q1, d2[1]
   3497c:	vmov.32	sl, d16[0]
   34980:	vmov.32	r3, d18[0]
   34984:	bne	34990 <GetDataSlab+0xcfcc>
   34988:	ldr	r9, [fp, #8]
   3498c:	b	349ac <GetDataSlab+0xcfe8>
   34990:	ldr	r9, [fp, #8]
   34994:	vmov.32	r1, d20[0]
   34998:	mul	r3, r1, r3
   3499c:	ldr	r1, [r7, r5, lsl #2]
   349a0:	subs	r5, r5, #1
   349a4:	mul	sl, sl, r1
   349a8:	bne	34998 <GetDataSlab+0xcfd4>
   349ac:	ldr	r1, [fp, #12]
   349b0:	sub	r5, fp, #176	; 0xb0
   349b4:	sub	r6, fp, #96	; 0x60
   349b8:	ldr	r0, [sp, #52]	; 0x34
   349bc:	add	ip, ip, #4
   349c0:	str	sl, [r6, r4, lsl #2]
   349c4:	str	r3, [r5, r4, lsl #2]
   349c8:	ldr	sl, [fp, #20]
   349cc:	ldr	r1, [r1, r4, lsl #2]
   349d0:	mla	r2, r1, r8, r2
   349d4:	ldr	r1, [sl, r4, lsl #2]
   349d8:	mov	r8, r3
   349dc:	ldr	r3, [sp, #40]	; 0x28
   349e0:	add	r4, r4, #1
   349e4:	mul	r0, r1, r0
   349e8:	ldr	r1, [fp, #24]
   349ec:	str	r0, [sp, #52]	; 0x34
   349f0:	cmp	r4, r1
   349f4:	bne	348d0 <GetDataSlab+0xcf0c>
   349f8:	ldr	r0, [sp, #48]	; 0x30
   349fc:	ldr	r6, [sp, #24]
   34a00:	add	r9, r0, r2, lsl #2
   34a04:	cmp	r6, #1
   34a08:	bne	42260 <GetDataSlab+0x1a89c>
   34a0c:	ldr	r0, [sp, #52]	; 0x34
   34a10:	ldr	lr, [fp, #12]
   34a14:	ldr	r1, [sp, #44]	; 0x2c
   34a18:	cmp	r0, #1
   34a1c:	blt	47ff8 <GetDataSlab+0x20634>
   34a20:	sub	r0, fp, #136	; 0x88
   34a24:	add	r7, sl, #4
   34a28:	mov	sl, #0
   34a2c:	mov	ip, #0
   34a30:	orr	r6, r0, #4
   34a34:	sub	r0, fp, #96	; 0x60
   34a38:	orr	r0, r0, #4
   34a3c:	str	r0, [sp, #32]
   34a40:	lsl	r0, r1, #1
   34a44:	str	r0, [sp, #56]	; 0x38
   34a48:	bic	r0, r1, #3
   34a4c:	str	r0, [sp, #40]	; 0x28
   34a50:	ldr	r0, [lr], #4
   34a54:	str	r0, [sp, #48]	; 0x30
   34a58:	cmp	r1, #1
   34a5c:	mov	r4, lr
   34a60:	blt	34ae4 <GetDataSlab+0xd120>
   34a64:	ldr	r0, [sp, #44]	; 0x2c
   34a68:	mov	r3, #0
   34a6c:	cmp	r0, #4
   34a70:	bcc	34aac <GetDataSlab+0xd0e8>
   34a74:	ldr	r0, [sp, #48]	; 0x30
   34a78:	ldr	r1, [sp, #40]	; 0x28
   34a7c:	ldr	r3, [sp, #60]	; 0x3c
   34a80:	add	r0, r9, r0, lsl #2
   34a84:	vld1.32	{d16-d17}, [r0]!
   34a88:	subs	r1, r1, #4
   34a8c:	vcvt.u32.f32	q8, q8
   34a90:	vmovn.i32	d16, q8
   34a94:	vst1.16	{d16}, [r3]!
   34a98:	bne	34a84 <GetDataSlab+0xd0c0>
   34a9c:	ldr	r0, [sp, #44]	; 0x2c
   34aa0:	ldr	r3, [sp, #40]	; 0x28
   34aa4:	cmp	r0, r3
   34aa8:	beq	34ae4 <GetDataSlab+0xd120>
   34aac:	ldr	r5, [sp, #48]	; 0x30
   34ab0:	ldr	r0, [sp, #44]	; 0x2c
   34ab4:	ldr	r1, [sp, #60]	; 0x3c
   34ab8:	add	r5, r9, r5, lsl #2
   34abc:	sub	r0, r0, r3
   34ac0:	add	r1, r1, r3, lsl #1
   34ac4:	add	r3, r5, r3, lsl #2
   34ac8:	vldr	s0, [r3]
   34acc:	subs	r0, r0, #1
   34ad0:	add	r3, r3, #4
   34ad4:	vcvt.u32.f32	s0, s0
   34ad8:	vmov	r5, s0
   34adc:	strh	r5, [r1], #2
   34ae0:	bne	34ac8 <GetDataSlab+0xd104>
   34ae4:	ldr	r0, [sp, #36]	; 0x24
   34ae8:	add	r9, r9, r0, lsl #2
   34aec:	add	r2, r2, r0
   34af0:	ldr	r0, [fp, #24]
   34af4:	cmp	r0, #2
   34af8:	blt	34ba8 <GetDataSlab+0xd1e4>
   34afc:	mov	r1, #0
   34b00:	mov	r0, r1
   34b04:	ldr	r1, [r6, r1, lsl #2]
   34b08:	add	r1, r1, #1
   34b0c:	str	r1, [r6, r0, lsl #2]
   34b10:	ldr	r3, [r7, r0, lsl #2]
   34b14:	sdiv	r5, r1, r3
   34b18:	mls	r1, r5, r3, r1
   34b1c:	cmp	r1, #0
   34b20:	bne	34b98 <GetDataSlab+0xd1d4>
   34b24:	sub	r5, fp, #176	; 0xb0
   34b28:	str	sl, [r6, r0, lsl #2]
   34b2c:	add	r1, r5, r0, lsl #2
   34b30:	ldr	r1, [r1, #4]
   34b34:	sdiv	r3, r2, r1
   34b38:	mls	r3, r3, r1, r2
   34b3c:	cmp	r3, #0
   34b40:	beq	34b60 <GetDataSlab+0xd19c>
   34b44:	ldr	r5, [r5, r0, lsl #2]
   34b48:	ldr	r8, [lr, r0, lsl #2]
   34b4c:	sub	r1, r1, r3
   34b50:	mov	r4, lr
   34b54:	mla	r1, r8, r5, r1
   34b58:	add	r2, r1, r2
   34b5c:	b	34b7c <GetDataSlab+0xd1b8>
   34b60:	ldr	r1, [r4, r0, lsl #2]
   34b64:	cmp	r1, #0
   34b68:	beq	34b80 <GetDataSlab+0xd1bc>
   34b6c:	sub	r3, fp, #176	; 0xb0
   34b70:	ldr	r3, [r3, r0, lsl #2]
   34b74:	mla	r2, r3, r1, r2
   34b78:	mul	r1, r3, r1
   34b7c:	add	r9, r9, r1, lsl #2
   34b80:	ldr	r3, [fp, #24]
   34b84:	add	r1, r0, #1
   34b88:	add	r0, r0, #2
   34b8c:	cmp	r0, r3
   34b90:	blt	34b00 <GetDataSlab+0xd13c>
   34b94:	b	34ba8 <GetDataSlab+0xd1e4>
   34b98:	ldr	r1, [sp, #32]
   34b9c:	ldr	r0, [r1, r0, lsl #2]
   34ba0:	add	r9, r9, r0, lsl #2
   34ba4:	add	r2, r0, r2
   34ba8:	ldr	r0, [sp, #60]	; 0x3c
   34bac:	ldr	r1, [sp, #56]	; 0x38
   34bb0:	ldr	r3, [sp, #52]	; 0x34
   34bb4:	add	r0, r0, r1
   34bb8:	ldr	r1, [sp, #44]	; 0x2c
   34bbc:	str	r0, [sp, #60]	; 0x3c
   34bc0:	mov	r0, #0
   34bc4:	add	ip, ip, r1
   34bc8:	cmp	ip, r3
   34bcc:	blt	34a58 <GetDataSlab+0xd094>
   34bd0:	b	47ffc <GetDataSlab+0x20638>
   34bd4:	ldr	r0, [ip]
   34bd8:	mov	r2, #0
   34bdc:	sub	r4, fp, #176	; 0xb0
   34be0:	sub	r9, fp, #96	; 0x60
   34be4:	str	r0, [sp, #24]
   34be8:	sub	r0, r0, #1
   34bec:	str	r0, [fp, #-96]	; 0xffffffa0
   34bf0:	ldr	r0, [fp, #8]
   34bf4:	ldr	r0, [r0]
   34bf8:	str	r0, [fp, #-176]	; 0xffffff50
   34bfc:	str	r0, [sp, #40]	; 0x28
   34c00:	ldr	r0, [fp, #24]
   34c04:	ldr	r1, [sl]
   34c08:	cmp	r0, #2
   34c0c:	str	r1, [sp, #44]	; 0x2c
   34c10:	str	r1, [sp, #52]	; 0x34
   34c14:	blt	34d74 <GetDataSlab+0xd3b0>
   34c18:	ldr	r0, [fp, #8]
   34c1c:	ldr	r3, [sp, #40]	; 0x28
   34c20:	ldr	r1, [sp, #44]	; 0x2c
   34c24:	mov	sl, #0
   34c28:	mvn	r5, #15
   34c2c:	mov	r2, #0
   34c30:	sub	r7, r0, #4
   34c34:	sub	r8, r0, #12
   34c38:	mov	r0, #1
   34c3c:	mov	r6, r3
   34c40:	str	r1, [sp, #52]	; 0x34
   34c44:	ldr	r1, [ip, r0, lsl #2]
   34c48:	str	r3, [r4, r0, lsl #2]
   34c4c:	str	r6, [sp, #56]	; 0x38
   34c50:	mov	r6, sl
   34c54:	add	r6, sl, #1
   34c58:	cmp	r6, #4
   34c5c:	sub	lr, r1, #1
   34c60:	ldr	r1, [fp, #8]
   34c64:	str	lr, [r9, r0, lsl #2]
   34c68:	ldr	ip, [r1, r0, lsl #2]
   34c6c:	bcs	34c7c <GetDataSlab+0xd2b8>
   34c70:	mov	r1, ip
   34c74:	mov	r4, r0
   34c78:	b	34d08 <GetDataSlab+0xd344>
   34c7c:	vmov.i32	q9, #1	; 0x00000001
   34c80:	vmov.i32	q10, #1	; 0x00000001
   34c84:	vmov.i32	q8, #1	; 0x00000001
   34c88:	bic	r1, r6, #3
   34c8c:	bic	sl, r0, #3
   34c90:	vmov.32	d23[1], ip
   34c94:	vmov.32	d18[0], r3
   34c98:	vmov.32	d20[0], lr
   34c9c:	sub	r4, r0, r1
   34ca0:	mov	r3, r8
   34ca4:	vorr	d16, d18, d18
   34ca8:	vmov.i32	q9, #1	; 0x00000001
   34cac:	vorr	d18, d20, d20
   34cb0:	vld1.32	{d20-d21}, [r3], r5
   34cb4:	subs	sl, sl, #4
   34cb8:	vrev64.32	q12, q10
   34cbc:	vext.8	q12, q12, q12, #8
   34cc0:	vext.8	q11, q11, q12, #12
   34cc4:	vmul.i32	q9, q9, q12
   34cc8:	vmul.i32	q8, q11, q8
   34ccc:	vorr	q11, q12, q12
   34cd0:	bne	34cb0 <GetDataSlab+0xd2ec>
   34cd4:	vext.8	q11, q9, q8, #8
   34cd8:	vext.8	q12, q8, q8, #8
   34cdc:	cmp	r6, r1
   34ce0:	vmul.i32	q0, q9, q11
   34ce4:	vmul.i32	q1, q8, q12
   34ce8:	vmul.i32	q8, q0, d0[1]
   34cec:	vmul.i32	q9, q1, d2[1]
   34cf0:	vmov.32	lr, d16[0]
   34cf4:	vmov.32	r3, d18[0]
   34cf8:	bne	34d04 <GetDataSlab+0xd340>
   34cfc:	mov	sl, r6
   34d00:	b	34d20 <GetDataSlab+0xd35c>
   34d04:	vmov.32	r1, d20[0]
   34d08:	mov	sl, r6
   34d0c:	mul	r3, r1, r3
   34d10:	ldr	r1, [r7, r4, lsl #2]
   34d14:	subs	r4, r4, #1
   34d18:	mul	lr, lr, r1
   34d1c:	bne	34d0c <GetDataSlab+0xd348>
   34d20:	ldr	r1, [fp, #12]
   34d24:	sub	r4, fp, #176	; 0xb0
   34d28:	sub	r9, fp, #96	; 0x60
   34d2c:	ldr	r6, [sp, #56]	; 0x38
   34d30:	add	r8, r8, #4
   34d34:	str	r3, [r4, r0, lsl #2]
   34d38:	str	lr, [r9, r0, lsl #2]
   34d3c:	ldr	r1, [r1, r0, lsl #2]
   34d40:	mla	r2, r1, r6, r2
   34d44:	ldr	r1, [fp, #20]
   34d48:	ldr	r6, [sp, #52]	; 0x34
   34d4c:	ldr	r1, [r1, r0, lsl #2]
   34d50:	add	r0, r0, #1
   34d54:	mul	r6, r1, r6
   34d58:	ldr	r1, [fp, #24]
   34d5c:	str	r6, [sp, #52]	; 0x34
   34d60:	mov	r6, r3
   34d64:	mov	r3, ip
   34d68:	ldr	ip, [fp, #16]
   34d6c:	cmp	r0, r1
   34d70:	bne	34c44 <GetDataSlab+0xd280>
   34d74:	ldr	r0, [sp, #48]	; 0x30
   34d78:	ldr	r6, [sp, #24]
   34d7c:	add	r9, r0, r2, lsl #3
   34d80:	cmp	r6, #1
   34d84:	bne	423f8 <GetDataSlab+0x1aa34>
   34d88:	ldr	r0, [sp, #52]	; 0x34
   34d8c:	ldr	lr, [fp, #12]
   34d90:	ldr	r1, [sp, #44]	; 0x2c
   34d94:	cmp	r0, #1
   34d98:	ldr	r0, [fp, #20]
   34d9c:	blt	47ff8 <GetDataSlab+0x20634>
   34da0:	add	r8, r0, #4
   34da4:	sub	r0, fp, #136	; 0x88
   34da8:	mov	sl, #0
   34dac:	orr	r7, r0, #4
   34db0:	sub	r0, fp, #96	; 0x60
   34db4:	orr	r0, r0, #4
   34db8:	str	r0, [sp, #36]	; 0x24
   34dbc:	lsl	r0, r1, #1
   34dc0:	str	r0, [sp, #56]	; 0x38
   34dc4:	ldr	r0, [lr], #4
   34dc8:	str	r0, [sp, #48]	; 0x30
   34dcc:	ldr	r4, [sp, #60]	; 0x3c
   34dd0:	cmp	r1, #1
   34dd4:	blt	34e04 <GetDataSlab+0xd440>
   34dd8:	ldr	r0, [sp, #48]	; 0x30
   34ddc:	ldr	r3, [sp, #44]	; 0x2c
   34de0:	mov	r6, r4
   34de4:	add	r0, r9, r0, lsl #3
   34de8:	vldr	d16, [r0]
   34dec:	subs	r3, r3, #1
   34df0:	add	r0, r0, #8
   34df4:	vcvt.u32.f64	s0, d16
   34df8:	vmov	r5, s0
   34dfc:	strh	r5, [r6], #2
   34e00:	bne	34de8 <GetDataSlab+0xd424>
   34e04:	ldr	r0, [sp, #40]	; 0x28
   34e08:	add	r9, r9, r0, lsl #3
   34e0c:	add	r2, r2, r0
   34e10:	ldr	r0, [fp, #24]
   34e14:	cmp	r0, #2
   34e18:	blt	34ecc <GetDataSlab+0xd508>
   34e1c:	mov	r3, #0
   34e20:	mov	r0, r3
   34e24:	ldr	r3, [r7, r3, lsl #2]
   34e28:	add	r3, r3, #1
   34e2c:	str	r3, [r7, r0, lsl #2]
   34e30:	ldr	r5, [r8, r0, lsl #2]
   34e34:	sdiv	r6, r3, r5
   34e38:	mls	r3, r6, r5, r3
   34e3c:	cmp	r3, #0
   34e40:	bne	34ebc <GetDataSlab+0xd4f8>
   34e44:	mov	r1, #0
   34e48:	str	r1, [r7, r0, lsl #2]
   34e4c:	sub	r1, fp, #176	; 0xb0
   34e50:	add	r3, r1, r0, lsl #2
   34e54:	ldr	r3, [r3, #4]
   34e58:	sdiv	r5, r2, r3
   34e5c:	mls	r6, r5, r3, r2
   34e60:	cmp	r6, #0
   34e64:	beq	34e84 <GetDataSlab+0xd4c0>
   34e68:	ldr	r5, [r1, r0, lsl #2]
   34e6c:	ldr	ip, [lr, r0, lsl #2]
   34e70:	ldr	r4, [sp, #60]	; 0x3c
   34e74:	sub	r3, r3, r6
   34e78:	mla	r3, ip, r5, r3
   34e7c:	add	r2, r3, r2
   34e80:	b	34ea0 <GetDataSlab+0xd4dc>
   34e84:	ldr	r3, [lr, r0, lsl #2]
   34e88:	cmp	r3, #0
   34e8c:	beq	34ea4 <GetDataSlab+0xd4e0>
   34e90:	sub	r1, fp, #176	; 0xb0
   34e94:	ldr	r6, [r1, r0, lsl #2]
   34e98:	mla	r2, r6, r3, r2
   34e9c:	mul	r3, r6, r3
   34ea0:	add	r9, r9, r3, lsl #3
   34ea4:	ldr	r6, [fp, #24]
   34ea8:	add	r3, r0, #1
   34eac:	add	r0, r0, #2
   34eb0:	cmp	r0, r6
   34eb4:	blt	34e20 <GetDataSlab+0xd45c>
   34eb8:	b	34ecc <GetDataSlab+0xd508>
   34ebc:	ldr	r1, [sp, #36]	; 0x24
   34ec0:	ldr	r0, [r1, r0, lsl #2]
   34ec4:	add	r9, r9, r0, lsl #3
   34ec8:	add	r2, r0, r2
   34ecc:	ldr	r1, [sp, #44]	; 0x2c
   34ed0:	ldr	r0, [sp, #56]	; 0x38
   34ed4:	ldr	r3, [sp, #52]	; 0x34
   34ed8:	add	sl, sl, r1
   34edc:	add	r4, r4, r0
   34ee0:	mov	r0, #0
   34ee4:	cmp	sl, r3
   34ee8:	str	r4, [sp, #60]	; 0x3c
   34eec:	blt	34dcc <GetDataSlab+0xd408>
   34ef0:	b	47ffc <GetDataSlab+0x20638>
   34ef4:	ldr	r0, [ip]
   34ef8:	mov	r1, #0
   34efc:	sub	lr, fp, #176	; 0xb0
   34f00:	sub	r5, fp, #96	; 0x60
   34f04:	str	r6, [sp, #40]	; 0x28
   34f08:	str	r0, [sp, #20]
   34f0c:	sub	r0, r0, #1
   34f10:	str	r0, [fp, #-96]	; 0xffffffa0
   34f14:	ldr	r0, [fp, #8]
   34f18:	ldr	r0, [r0]
   34f1c:	str	r0, [fp, #-176]	; 0xffffff50
   34f20:	str	r0, [sp, #36]	; 0x24
   34f24:	ldr	r0, [fp, #24]
   34f28:	ldr	r2, [sl]
   34f2c:	cmp	r0, #2
   34f30:	str	r2, [sp, #44]	; 0x2c
   34f34:	str	r2, [sp, #56]	; 0x38
   34f38:	blt	35088 <GetDataSlab+0xd6c4>
   34f3c:	ldr	r0, [fp, #8]
   34f40:	ldr	r2, [sp, #36]	; 0x24
   34f44:	mov	r4, #1
   34f48:	mov	r9, #0
   34f4c:	mvn	r7, #15
   34f50:	mov	r1, #0
   34f54:	sub	r3, r0, #4
   34f58:	sub	ip, r0, #12
   34f5c:	ldr	r0, [sp, #44]	; 0x2c
   34f60:	mov	r8, r2
   34f64:	str	r0, [sp, #56]	; 0x38
   34f68:	ldr	r0, [fp, #16]
   34f6c:	add	r9, r9, #1
   34f70:	cmp	r9, #4
   34f74:	ldr	r0, [r0, r4, lsl #2]
   34f78:	str	r2, [lr, r4, lsl #2]
   34f7c:	sub	sl, r0, #1
   34f80:	ldr	r0, [fp, #8]
   34f84:	str	sl, [r5, r4, lsl #2]
   34f88:	ldr	r0, [r0, r4, lsl #2]
   34f8c:	str	r0, [sp, #52]	; 0x34
   34f90:	bcs	34f9c <GetDataSlab+0xd5d8>
   34f94:	mov	r5, r4
   34f98:	b	3502c <GetDataSlab+0xd668>
   34f9c:	vmov.i32	q9, #1	; 0x00000001
   34fa0:	vmov.i32	q10, #1	; 0x00000001
   34fa4:	vmov.i32	q8, #1	; 0x00000001
   34fa8:	vmov.32	d23[1], r0
   34fac:	bic	r0, r9, #3
   34fb0:	bic	lr, r4, #3
   34fb4:	vmov.32	d18[0], r2
   34fb8:	vmov.32	d20[0], sl
   34fbc:	sub	r5, r4, r0
   34fc0:	mov	r2, ip
   34fc4:	vorr	d16, d18, d18
   34fc8:	vmov.i32	q9, #1	; 0x00000001
   34fcc:	vorr	d18, d20, d20
   34fd0:	vld1.32	{d20-d21}, [r2], r7
   34fd4:	subs	lr, lr, #4
   34fd8:	vrev64.32	q12, q10
   34fdc:	vext.8	q12, q12, q12, #8
   34fe0:	vext.8	q11, q11, q12, #12
   34fe4:	vmul.i32	q9, q9, q12
   34fe8:	vmul.i32	q8, q11, q8
   34fec:	vorr	q11, q12, q12
   34ff0:	bne	34fd0 <GetDataSlab+0xd60c>
   34ff4:	vext.8	q11, q9, q8, #8
   34ff8:	vext.8	q12, q8, q8, #8
   34ffc:	cmp	r9, r0
   35000:	vmul.i32	q0, q9, q11
   35004:	vmul.i32	q1, q8, q12
   35008:	vmul.i32	q8, q0, d0[1]
   3500c:	vmul.i32	q9, q1, d2[1]
   35010:	vmov.32	sl, d16[0]
   35014:	vmov.32	r2, d18[0]
   35018:	bne	35024 <GetDataSlab+0xd660>
   3501c:	sub	lr, fp, #176	; 0xb0
   35020:	b	35040 <GetDataSlab+0xd67c>
   35024:	vmov.32	r0, d20[0]
   35028:	sub	lr, fp, #176	; 0xb0
   3502c:	mul	r2, r0, r2
   35030:	ldr	r0, [r3, r5, lsl #2]
   35034:	subs	r5, r5, #1
   35038:	mul	sl, sl, r0
   3503c:	bne	3502c <GetDataSlab+0xd668>
   35040:	ldr	r0, [fp, #12]
   35044:	sub	r5, fp, #96	; 0x60
   35048:	str	r2, [lr, r4, lsl #2]
   3504c:	ldr	r6, [sp, #56]	; 0x38
   35050:	add	ip, ip, #4
   35054:	str	sl, [r5, r4, lsl #2]
   35058:	ldr	sl, [fp, #20]
   3505c:	ldr	r0, [r0, r4, lsl #2]
   35060:	mla	r1, r0, r8, r1
   35064:	ldr	r0, [sl, r4, lsl #2]
   35068:	mov	r8, r2
   3506c:	ldr	r2, [sp, #52]	; 0x34
   35070:	add	r4, r4, #1
   35074:	mul	r6, r0, r6
   35078:	ldr	r0, [fp, #24]
   3507c:	str	r6, [sp, #56]	; 0x38
   35080:	cmp	r4, r0
   35084:	bne	34f68 <GetDataSlab+0xd5a4>
   35088:	ldr	r0, [sp, #48]	; 0x30
   3508c:	ldr	r7, [sp, #20]
   35090:	add	r9, r0, r1, lsl #3
   35094:	cmp	r7, #1
   35098:	bne	42594 <GetDataSlab+0x1abd0>
   3509c:	ldr	r0, [sp, #56]	; 0x38
   350a0:	ldr	ip, [sp, #60]	; 0x3c
   350a4:	ldr	r8, [fp, #12]
   350a8:	cmp	r0, #1
   350ac:	blt	42718 <GetDataSlab+0x1ad54>
   350b0:	add	lr, sl, #4
   350b4:	ldr	sl, [sp, #44]	; 0x2c
   350b8:	sub	r0, fp, #136	; 0x88
   350bc:	mov	r5, #0
   350c0:	orr	r6, r0, #4
   350c4:	sub	r0, fp, #96	; 0x60
   350c8:	orr	r0, r0, #4
   350cc:	str	r0, [sp, #24]
   350d0:	lsl	r0, sl, #1
   350d4:	str	r0, [sp, #52]	; 0x34
   350d8:	bic	r0, sl, #1
   350dc:	str	r0, [sp, #28]
   350e0:	ldr	r0, [r8], #4
   350e4:	str	r0, [sp, #32]
   350e8:	cmp	sl, #1
   350ec:	blt	35154 <GetDataSlab+0xd790>
   350f0:	mov	r3, #0
   350f4:	beq	3512c <GetDataSlab+0xd768>
   350f8:	ldr	r0, [sp, #32]
   350fc:	ldr	r2, [sp, #28]
   35100:	mov	r3, ip
   35104:	add	r0, r9, r0, lsl #3
   35108:	vld1.64	{d16-d17}, [r0]!
   3510c:	subs	r2, r2, #2
   35110:	vmovn.i64	d16, q8
   35114:	vuzp.16	d16, d17
   35118:	vst1.32	{d16[0]}, [r3]!
   3511c:	bne	35108 <GetDataSlab+0xd744>
   35120:	ldr	r3, [sp, #28]
   35124:	cmp	sl, r3
   35128:	beq	35154 <GetDataSlab+0xd790>
   3512c:	ldr	r4, [sp, #32]
   35130:	sub	r0, sl, r3
   35134:	add	r2, ip, r3, lsl #1
   35138:	add	sl, r9, r4, lsl #3
   3513c:	add	r3, sl, r3, lsl #3
   35140:	ldr	sl, [sp, #44]	; 0x2c
   35144:	ldrh	r7, [r3], #8
   35148:	subs	r0, r0, #1
   3514c:	strh	r7, [r2], #2
   35150:	bne	35144 <GetDataSlab+0xd780>
   35154:	ldr	r0, [sp, #36]	; 0x24
   35158:	add	r9, r9, r0, lsl #3
   3515c:	add	r1, r1, r0
   35160:	ldr	r0, [fp, #24]
   35164:	cmp	r0, #2
   35168:	blt	35218 <GetDataSlab+0xd854>
   3516c:	mov	r2, #0
   35170:	mov	r0, r2
   35174:	ldr	r2, [r6, r2, lsl #2]
   35178:	add	r2, r2, #1
   3517c:	str	r2, [r6, r0, lsl #2]
   35180:	ldr	r3, [lr, r0, lsl #2]
   35184:	sdiv	r7, r2, r3
   35188:	mls	r2, r7, r3, r2
   3518c:	cmp	r2, #0
   35190:	bne	35208 <GetDataSlab+0xd844>
   35194:	mov	r2, #0
   35198:	sub	r4, fp, #176	; 0xb0
   3519c:	str	r2, [r6, r0, lsl #2]
   351a0:	add	r2, r4, r0, lsl #2
   351a4:	ldr	r2, [r2, #4]
   351a8:	sdiv	r3, r1, r2
   351ac:	mls	r3, r3, r2, r1
   351b0:	cmp	r3, #0
   351b4:	beq	351d0 <GetDataSlab+0xd80c>
   351b8:	ldr	r7, [r4, r0, lsl #2]
   351bc:	ldr	r4, [r8, r0, lsl #2]
   351c0:	sub	r2, r2, r3
   351c4:	mla	r2, r4, r7, r2
   351c8:	add	r1, r2, r1
   351cc:	b	351ec <GetDataSlab+0xd828>
   351d0:	ldr	r2, [r8, r0, lsl #2]
   351d4:	cmp	r2, #0
   351d8:	beq	351f0 <GetDataSlab+0xd82c>
   351dc:	sub	r3, fp, #176	; 0xb0
   351e0:	ldr	r3, [r3, r0, lsl #2]
   351e4:	mla	r1, r3, r2, r1
   351e8:	mul	r2, r3, r2
   351ec:	add	r9, r9, r2, lsl #3
   351f0:	ldr	r3, [fp, #24]
   351f4:	add	r2, r0, #1
   351f8:	add	r0, r0, #2
   351fc:	cmp	r0, r3
   35200:	blt	35170 <GetDataSlab+0xd7ac>
   35204:	b	35218 <GetDataSlab+0xd854>
   35208:	ldr	r2, [sp, #24]
   3520c:	ldr	r0, [r2, r0, lsl #2]
   35210:	add	r9, r9, r0, lsl #3
   35214:	add	r1, r0, r1
   35218:	ldr	r0, [sp, #52]	; 0x34
   3521c:	add	r5, r5, sl
   35220:	add	ip, ip, r0
   35224:	ldr	r0, [sp, #56]	; 0x38
   35228:	cmp	r5, r0
   3522c:	blt	350e8 <GetDataSlab+0xd724>
   35230:	b	42718 <GetDataSlab+0x1ad54>
   35234:	ldr	r5, [r3]
   35238:	ldr	r9, [fp, #8]
   3523c:	ldr	r8, [fp, #12]
   35240:	mov	r4, #0
   35244:	sub	r3, fp, #176	; 0xb0
   35248:	sub	r0, r5, #1
   3524c:	str	r0, [fp, #-96]	; 0xffffffa0
   35250:	ldr	r0, [r9]
   35254:	str	r0, [fp, #-176]	; 0xffffff50
   35258:	str	r0, [sp, #52]	; 0x34
   3525c:	ldr	r0, [fp, #24]
   35260:	ldr	r2, [sl]
   35264:	sub	sl, fp, #96	; 0x60
   35268:	cmp	r0, #2
   3526c:	mov	r0, r2
   35270:	str	r2, [sp, #56]	; 0x38
   35274:	blt	353d8 <GetDataSlab+0xda14>
   35278:	ldr	r7, [sp, #52]	; 0x34
   3527c:	sub	r0, r9, #4
   35280:	sub	r6, r9, #12
   35284:	mov	ip, #1
   35288:	mov	lr, #0
   3528c:	mov	r4, #0
   35290:	str	r2, [sp, #56]	; 0x38
   35294:	mov	r1, r7
   35298:	str	r7, [sp, #44]	; 0x2c
   3529c:	mov	r1, r2
   352a0:	ldr	r1, [fp, #16]
   352a4:	add	lr, lr, #1
   352a8:	str	r6, [sp, #40]	; 0x28
   352ac:	cmp	lr, #4
   352b0:	str	lr, [sp, #36]	; 0x24
   352b4:	ldr	r1, [r1, ip, lsl #2]
   352b8:	str	r7, [r3, ip, lsl #2]
   352bc:	sub	r8, r1, #1
   352c0:	str	r8, [sl, ip, lsl #2]
   352c4:	ldr	r1, [r9, ip, lsl #2]
   352c8:	str	r1, [sp, #32]
   352cc:	bcs	352d8 <GetDataSlab+0xd914>
   352d0:	mov	r3, ip
   352d4:	b	3536c <GetDataSlab+0xd9a8>
   352d8:	vmov.i32	q9, #1	; 0x00000001
   352dc:	vmov.i32	q10, #1	; 0x00000001
   352e0:	vmov.i32	q8, #1	; 0x00000001
   352e4:	bic	sl, lr, #3
   352e8:	vmov.32	d23[1], r1
   352ec:	bic	r9, ip, #3
   352f0:	mov	r1, r6
   352f4:	vmov.32	d18[0], r7
   352f8:	vmov.32	d20[0], r8
   352fc:	sub	r3, ip, sl
   35300:	mvn	r7, #15
   35304:	vorr	d16, d18, d18
   35308:	vmov.i32	q9, #1	; 0x00000001
   3530c:	vorr	d18, d20, d20
   35310:	vld1.32	{d20-d21}, [r1], r7
   35314:	subs	r9, r9, #4
   35318:	vrev64.32	q12, q10
   3531c:	vext.8	q12, q12, q12, #8
   35320:	vext.8	q11, q11, q12, #12
   35324:	vmul.i32	q9, q9, q12
   35328:	vmul.i32	q8, q11, q8
   3532c:	vorr	q11, q12, q12
   35330:	bne	35310 <GetDataSlab+0xd94c>
   35334:	vext.8	q11, q9, q8, #8
   35338:	vext.8	q12, q8, q8, #8
   3533c:	cmp	lr, sl
   35340:	vmul.i32	q0, q9, q11
   35344:	vmul.i32	q1, q8, q12
   35348:	vmul.i32	q8, q0, d0[1]
   3534c:	vmul.i32	q9, q1, d2[1]
   35350:	vmov.32	r8, d16[0]
   35354:	vmov.32	r7, d18[0]
   35358:	bne	35364 <GetDataSlab+0xd9a0>
   3535c:	ldr	r9, [fp, #8]
   35360:	b	35380 <GetDataSlab+0xd9bc>
   35364:	ldr	r9, [fp, #8]
   35368:	vmov.32	r1, d20[0]
   3536c:	mul	r7, r1, r7
   35370:	ldr	r1, [r0, r3, lsl #2]
   35374:	subs	r3, r3, #1
   35378:	mul	r8, r8, r1
   3537c:	bne	3536c <GetDataSlab+0xd9a8>
   35380:	sub	sl, fp, #96	; 0x60
   35384:	sub	r3, fp, #176	; 0xb0
   35388:	ldr	r6, [sp, #44]	; 0x2c
   3538c:	ldr	lr, [sp, #56]	; 0x38
   35390:	str	r7, [sp, #44]	; 0x2c
   35394:	str	r8, [sl, ip, lsl #2]
   35398:	ldr	r8, [fp, #12]
   3539c:	str	r7, [r3, ip, lsl #2]
   353a0:	ldr	r7, [sp, #32]
   353a4:	ldr	r1, [r8, ip, lsl #2]
   353a8:	mla	r4, r1, r6, r4
   353ac:	ldr	r1, [fp, #20]
   353b0:	ldr	r6, [sp, #40]	; 0x28
   353b4:	ldr	r1, [r1, ip, lsl #2]
   353b8:	add	ip, ip, #1
   353bc:	add	r6, r6, #4
   353c0:	mul	lr, r1, lr
   353c4:	ldr	r1, [fp, #24]
   353c8:	str	lr, [sp, #56]	; 0x38
   353cc:	ldr	lr, [sp, #36]	; 0x24
   353d0:	cmp	ip, r1
   353d4:	bne	352a0 <GetDataSlab+0xd8dc>
   353d8:	ldr	r0, [sp, #48]	; 0x30
   353dc:	cmp	r5, #1
   353e0:	add	sl, r0, r4
   353e4:	bne	42a8c <GetDataSlab+0x1b0c8>
   353e8:	ldr	r0, [sp, #56]	; 0x38
   353ec:	cmp	r0, #1
   353f0:	blt	47ff8 <GetDataSlab+0x20634>
   353f4:	ldr	r0, [fp, #20]
   353f8:	mov	r9, r8
   353fc:	mov	r8, #0
   35400:	add	ip, r0, #4
   35404:	sub	r0, fp, #136	; 0x88
   35408:	orr	r7, r0, #4
   3540c:	sub	r0, fp, #96	; 0x60
   35410:	orr	r0, r0, #4
   35414:	str	r0, [sp, #44]	; 0x2c
   35418:	ldr	r0, [r9], #4
   3541c:	str	r0, [sp, #48]	; 0x30
   35420:	ldr	r6, [sp, #48]	; 0x30
   35424:	ldr	r1, [sp, #52]	; 0x34
   35428:	cmp	r2, #1
   3542c:	add	r0, r6, r4
   35430:	add	r3, sl, r6
   35434:	blt	35470 <GetDataSlab+0xdaac>
   35438:	ldr	r1, [sp, #60]	; 0x3c
   3543c:	ldr	r6, [fp, #20]
   35440:	mov	r4, #0
   35444:	add	r1, r1, r8, lsl #2
   35448:	ldrb	r2, [r3, r4]
   3544c:	str	r2, [r1, r4, lsl #2]
   35450:	add	r4, r4, #1
   35454:	ldr	r2, [r6]
   35458:	cmp	r4, r2
   3545c:	blt	35448 <GetDataSlab+0xda84>
   35460:	ldr	r1, [fp, #12]
   35464:	ldr	r6, [r1]
   35468:	ldr	r1, [fp, #8]
   3546c:	ldr	r1, [r1]
   35470:	str	r1, [sp, #52]	; 0x34
   35474:	sub	r1, r1, r6
   35478:	str	r6, [sp, #48]	; 0x30
   3547c:	add	r4, r0, r1
   35480:	ldr	r0, [fp, #24]
   35484:	add	sl, r3, r1
   35488:	cmp	r0, #2
   3548c:	blt	35534 <GetDataSlab+0xdb70>
   35490:	mov	r1, #0
   35494:	mov	r0, r1
   35498:	ldr	r1, [r7, r1, lsl #2]
   3549c:	add	r1, r1, #1
   354a0:	str	r1, [r7, r0, lsl #2]
   354a4:	ldr	r6, [ip, r0, lsl #2]
   354a8:	sdiv	lr, r1, r6
   354ac:	mls	r1, lr, r6, r1
   354b0:	cmp	r1, #0
   354b4:	bne	35524 <GetDataSlab+0xdb60>
   354b8:	mov	r1, #0
   354bc:	sub	r3, fp, #176	; 0xb0
   354c0:	str	r1, [r7, r0, lsl #2]
   354c4:	add	r1, r3, r0, lsl #2
   354c8:	ldr	r1, [r1, #4]
   354cc:	sdiv	r6, r4, r1
   354d0:	mls	r6, r6, r1, r4
   354d4:	cmp	r6, #0
   354d8:	beq	354f8 <GetDataSlab+0xdb34>
   354dc:	ldr	r5, [r3, r0, lsl #2]
   354e0:	ldr	r3, [r9, r0, lsl #2]
   354e4:	sub	r1, r1, r6
   354e8:	mla	r1, r3, r5, r1
   354ec:	add	r4, r1, r4
   354f0:	add	sl, sl, r1
   354f4:	b	3550c <GetDataSlab+0xdb48>
   354f8:	ldr	r1, [r9, r0, lsl #2]
   354fc:	cmp	r1, #0
   35500:	ldrne	r3, [r3, r0, lsl #2]
   35504:	mlane	r4, r3, r1, r4
   35508:	mlane	sl, r3, r1, sl
   3550c:	ldr	r3, [fp, #24]
   35510:	add	r1, r0, #1
   35514:	add	r0, r0, #2
   35518:	cmp	r0, r3
   3551c:	blt	35494 <GetDataSlab+0xdad0>
   35520:	b	35534 <GetDataSlab+0xdb70>
   35524:	ldr	r1, [sp, #44]	; 0x2c
   35528:	ldr	r0, [r1, r0, lsl #2]
   3552c:	add	sl, sl, r0
   35530:	add	r4, r0, r4
   35534:	ldr	r1, [sp, #56]	; 0x38
   35538:	add	r8, r2, r8
   3553c:	mov	r0, #0
   35540:	cmp	r8, r1
   35544:	blt	35420 <GetDataSlab+0xda5c>
   35548:	b	47ffc <GetDataSlab+0x20638>
   3554c:	ldr	r5, [r3]
   35550:	ldr	r9, [fp, #8]
   35554:	ldr	r8, [fp, #12]
   35558:	mov	r4, #0
   3555c:	sub	r3, fp, #176	; 0xb0
   35560:	sub	r0, r5, #1
   35564:	str	r0, [fp, #-96]	; 0xffffffa0
   35568:	ldr	r0, [r9]
   3556c:	str	r0, [fp, #-176]	; 0xffffff50
   35570:	str	r0, [sp, #52]	; 0x34
   35574:	ldr	r0, [fp, #24]
   35578:	ldr	r2, [sl]
   3557c:	sub	sl, fp, #96	; 0x60
   35580:	cmp	r0, #2
   35584:	mov	r0, r2
   35588:	str	r2, [sp, #56]	; 0x38
   3558c:	blt	356f0 <GetDataSlab+0xdd2c>
   35590:	ldr	r7, [sp, #52]	; 0x34
   35594:	sub	r0, r9, #4
   35598:	sub	r6, r9, #12
   3559c:	mov	ip, #1
   355a0:	mov	lr, #0
   355a4:	mov	r4, #0
   355a8:	str	r2, [sp, #56]	; 0x38
   355ac:	mov	r1, r7
   355b0:	str	r7, [sp, #44]	; 0x2c
   355b4:	mov	r1, r2
   355b8:	ldr	r1, [fp, #16]
   355bc:	add	lr, lr, #1
   355c0:	str	r6, [sp, #40]	; 0x28
   355c4:	cmp	lr, #4
   355c8:	str	lr, [sp, #36]	; 0x24
   355cc:	ldr	r1, [r1, ip, lsl #2]
   355d0:	str	r7, [r3, ip, lsl #2]
   355d4:	sub	r8, r1, #1
   355d8:	str	r8, [sl, ip, lsl #2]
   355dc:	ldr	r1, [r9, ip, lsl #2]
   355e0:	str	r1, [sp, #32]
   355e4:	bcs	355f0 <GetDataSlab+0xdc2c>
   355e8:	mov	r3, ip
   355ec:	b	35684 <GetDataSlab+0xdcc0>
   355f0:	vmov.i32	q9, #1	; 0x00000001
   355f4:	vmov.i32	q10, #1	; 0x00000001
   355f8:	vmov.i32	q8, #1	; 0x00000001
   355fc:	bic	sl, lr, #3
   35600:	vmov.32	d23[1], r1
   35604:	bic	r9, ip, #3
   35608:	mov	r1, r6
   3560c:	vmov.32	d18[0], r7
   35610:	vmov.32	d20[0], r8
   35614:	sub	r3, ip, sl
   35618:	mvn	r7, #15
   3561c:	vorr	d16, d18, d18
   35620:	vmov.i32	q9, #1	; 0x00000001
   35624:	vorr	d18, d20, d20
   35628:	vld1.32	{d20-d21}, [r1], r7
   3562c:	subs	r9, r9, #4
   35630:	vrev64.32	q12, q10
   35634:	vext.8	q12, q12, q12, #8
   35638:	vext.8	q11, q11, q12, #12
   3563c:	vmul.i32	q9, q9, q12
   35640:	vmul.i32	q8, q11, q8
   35644:	vorr	q11, q12, q12
   35648:	bne	35628 <GetDataSlab+0xdc64>
   3564c:	vext.8	q11, q9, q8, #8
   35650:	vext.8	q12, q8, q8, #8
   35654:	cmp	lr, sl
   35658:	vmul.i32	q0, q9, q11
   3565c:	vmul.i32	q1, q8, q12
   35660:	vmul.i32	q8, q0, d0[1]
   35664:	vmul.i32	q9, q1, d2[1]
   35668:	vmov.32	r8, d16[0]
   3566c:	vmov.32	r7, d18[0]
   35670:	bne	3567c <GetDataSlab+0xdcb8>
   35674:	ldr	r9, [fp, #8]
   35678:	b	35698 <GetDataSlab+0xdcd4>
   3567c:	ldr	r9, [fp, #8]
   35680:	vmov.32	r1, d20[0]
   35684:	mul	r7, r1, r7
   35688:	ldr	r1, [r0, r3, lsl #2]
   3568c:	subs	r3, r3, #1
   35690:	mul	r8, r8, r1
   35694:	bne	35684 <GetDataSlab+0xdcc0>
   35698:	sub	sl, fp, #96	; 0x60
   3569c:	sub	r3, fp, #176	; 0xb0
   356a0:	ldr	r6, [sp, #44]	; 0x2c
   356a4:	ldr	lr, [sp, #56]	; 0x38
   356a8:	str	r7, [sp, #44]	; 0x2c
   356ac:	str	r8, [sl, ip, lsl #2]
   356b0:	ldr	r8, [fp, #12]
   356b4:	str	r7, [r3, ip, lsl #2]
   356b8:	ldr	r7, [sp, #32]
   356bc:	ldr	r1, [r8, ip, lsl #2]
   356c0:	mla	r4, r1, r6, r4
   356c4:	ldr	r1, [fp, #20]
   356c8:	ldr	r6, [sp, #40]	; 0x28
   356cc:	ldr	r1, [r1, ip, lsl #2]
   356d0:	add	ip, ip, #1
   356d4:	add	r6, r6, #4
   356d8:	mul	lr, r1, lr
   356dc:	ldr	r1, [fp, #24]
   356e0:	str	lr, [sp, #56]	; 0x38
   356e4:	ldr	lr, [sp, #36]	; 0x24
   356e8:	cmp	ip, r1
   356ec:	bne	355b8 <GetDataSlab+0xdbf4>
   356f0:	ldr	r0, [sp, #48]	; 0x30
   356f4:	cmp	r5, #1
   356f8:	add	sl, r0, r4, lsl #1
   356fc:	bne	42c24 <GetDataSlab+0x1b260>
   35700:	ldr	r0, [sp, #56]	; 0x38
   35704:	cmp	r0, #1
   35708:	blt	47ff8 <GetDataSlab+0x20634>
   3570c:	ldr	r0, [fp, #20]
   35710:	mov	r9, r8
   35714:	mov	lr, #0
   35718:	add	ip, r0, #4
   3571c:	sub	r0, fp, #136	; 0x88
   35720:	orr	r7, r0, #4
   35724:	sub	r0, fp, #96	; 0x60
   35728:	orr	r0, r0, #4
   3572c:	str	r0, [sp, #44]	; 0x2c
   35730:	ldr	r0, [r9], #4
   35734:	str	r0, [sp, #48]	; 0x30
   35738:	ldr	r3, [sp, #48]	; 0x30
   3573c:	ldr	r1, [sp, #52]	; 0x34
   35740:	cmp	r2, #1
   35744:	add	r8, r3, r4
   35748:	add	r0, sl, r3, lsl #1
   3574c:	blt	3578c <GetDataSlab+0xddc8>
   35750:	ldr	r1, [sp, #60]	; 0x3c
   35754:	ldr	r5, [fp, #20]
   35758:	mov	r3, r0
   3575c:	add	r4, r1, lr, lsl #2
   35760:	mov	r1, #0
   35764:	ldrsh	r2, [r3], #2
   35768:	str	r2, [r4, r1, lsl #2]
   3576c:	add	r1, r1, #1
   35770:	ldr	r2, [r5]
   35774:	cmp	r1, r2
   35778:	blt	35764 <GetDataSlab+0xdda0>
   3577c:	ldr	r1, [fp, #12]
   35780:	ldr	r3, [r1]
   35784:	ldr	r1, [fp, #8]
   35788:	ldr	r1, [r1]
   3578c:	str	r1, [sp, #52]	; 0x34
   35790:	sub	r1, r1, r3
   35794:	str	r3, [sp, #48]	; 0x30
   35798:	add	sl, r0, r1, lsl #1
   3579c:	ldr	r0, [fp, #24]
   357a0:	add	r4, r8, r1
   357a4:	cmp	r0, #2
   357a8:	blt	35858 <GetDataSlab+0xde94>
   357ac:	mov	r1, #0
   357b0:	mov	r8, #0
   357b4:	mov	r0, r1
   357b8:	ldr	r1, [r7, r1, lsl #2]
   357bc:	add	r1, r1, #1
   357c0:	str	r1, [r7, r0, lsl #2]
   357c4:	ldr	r6, [ip, r0, lsl #2]
   357c8:	sdiv	r5, r1, r6
   357cc:	mls	r1, r5, r6, r1
   357d0:	cmp	r1, #0
   357d4:	bne	35848 <GetDataSlab+0xde84>
   357d8:	sub	r3, fp, #176	; 0xb0
   357dc:	str	r8, [r7, r0, lsl #2]
   357e0:	add	r1, r3, r0, lsl #2
   357e4:	ldr	r1, [r1, #4]
   357e8:	sdiv	r5, r4, r1
   357ec:	mls	r6, r5, r1, r4
   357f0:	cmp	r6, #0
   357f4:	beq	35810 <GetDataSlab+0xde4c>
   357f8:	ldr	r5, [r3, r0, lsl #2]
   357fc:	ldr	r3, [r9, r0, lsl #2]
   35800:	sub	r1, r1, r6
   35804:	mla	r1, r3, r5, r1
   35808:	add	r4, r1, r4
   3580c:	b	3582c <GetDataSlab+0xde68>
   35810:	ldr	r1, [r9, r0, lsl #2]
   35814:	cmp	r1, #0
   35818:	beq	35830 <GetDataSlab+0xde6c>
   3581c:	sub	r3, fp, #176	; 0xb0
   35820:	ldr	r3, [r3, r0, lsl #2]
   35824:	mla	r4, r3, r1, r4
   35828:	mul	r1, r3, r1
   3582c:	add	sl, sl, r1, lsl #1
   35830:	ldr	r3, [fp, #24]
   35834:	add	r1, r0, #1
   35838:	add	r0, r0, #2
   3583c:	cmp	r0, r3
   35840:	blt	357b4 <GetDataSlab+0xddf0>
   35844:	b	35858 <GetDataSlab+0xde94>
   35848:	ldr	r1, [sp, #44]	; 0x2c
   3584c:	ldr	r0, [r1, r0, lsl #2]
   35850:	add	sl, sl, r0, lsl #1
   35854:	add	r4, r0, r4
   35858:	ldr	r1, [sp, #56]	; 0x38
   3585c:	add	lr, r2, lr
   35860:	mov	r0, #0
   35864:	cmp	lr, r1
   35868:	blt	35738 <GetDataSlab+0xdd74>
   3586c:	b	47ffc <GetDataSlab+0x20638>
   35870:	ldr	r5, [r3]
   35874:	ldr	r9, [fp, #8]
   35878:	ldr	r8, [fp, #12]
   3587c:	mov	r4, #0
   35880:	sub	r3, fp, #176	; 0xb0
   35884:	sub	r0, r5, #1
   35888:	str	r0, [fp, #-96]	; 0xffffffa0
   3588c:	ldr	r0, [r9]
   35890:	str	r0, [fp, #-176]	; 0xffffff50
   35894:	str	r0, [sp, #52]	; 0x34
   35898:	ldr	r0, [fp, #24]
   3589c:	ldr	r2, [sl]
   358a0:	sub	sl, fp, #96	; 0x60
   358a4:	cmp	r0, #2
   358a8:	mov	r0, r2
   358ac:	str	r2, [sp, #56]	; 0x38
   358b0:	blt	35a14 <GetDataSlab+0xe050>
   358b4:	ldr	r7, [sp, #52]	; 0x34
   358b8:	sub	r0, r9, #4
   358bc:	sub	r6, r9, #12
   358c0:	mov	ip, #1
   358c4:	mov	lr, #0
   358c8:	mov	r4, #0
   358cc:	str	r2, [sp, #56]	; 0x38
   358d0:	mov	r1, r7
   358d4:	str	r7, [sp, #44]	; 0x2c
   358d8:	mov	r1, r2
   358dc:	ldr	r1, [fp, #16]
   358e0:	add	lr, lr, #1
   358e4:	str	r6, [sp, #40]	; 0x28
   358e8:	cmp	lr, #4
   358ec:	str	lr, [sp, #36]	; 0x24
   358f0:	ldr	r1, [r1, ip, lsl #2]
   358f4:	str	r7, [r3, ip, lsl #2]
   358f8:	sub	r8, r1, #1
   358fc:	str	r8, [sl, ip, lsl #2]
   35900:	ldr	r1, [r9, ip, lsl #2]
   35904:	str	r1, [sp, #32]
   35908:	bcs	35914 <GetDataSlab+0xdf50>
   3590c:	mov	r3, ip
   35910:	b	359a8 <GetDataSlab+0xdfe4>
   35914:	vmov.i32	q9, #1	; 0x00000001
   35918:	vmov.i32	q10, #1	; 0x00000001
   3591c:	vmov.i32	q8, #1	; 0x00000001
   35920:	bic	sl, lr, #3
   35924:	vmov.32	d23[1], r1
   35928:	bic	r9, ip, #3
   3592c:	mov	r1, r6
   35930:	vmov.32	d18[0], r7
   35934:	vmov.32	d20[0], r8
   35938:	sub	r3, ip, sl
   3593c:	mvn	r7, #15
   35940:	vorr	d16, d18, d18
   35944:	vmov.i32	q9, #1	; 0x00000001
   35948:	vorr	d18, d20, d20
   3594c:	vld1.32	{d20-d21}, [r1], r7
   35950:	subs	r9, r9, #4
   35954:	vrev64.32	q12, q10
   35958:	vext.8	q12, q12, q12, #8
   3595c:	vext.8	q11, q11, q12, #12
   35960:	vmul.i32	q9, q9, q12
   35964:	vmul.i32	q8, q11, q8
   35968:	vorr	q11, q12, q12
   3596c:	bne	3594c <GetDataSlab+0xdf88>
   35970:	vext.8	q11, q9, q8, #8
   35974:	vext.8	q12, q8, q8, #8
   35978:	cmp	lr, sl
   3597c:	vmul.i32	q0, q9, q11
   35980:	vmul.i32	q1, q8, q12
   35984:	vmul.i32	q8, q0, d0[1]
   35988:	vmul.i32	q9, q1, d2[1]
   3598c:	vmov.32	r8, d16[0]
   35990:	vmov.32	r7, d18[0]
   35994:	bne	359a0 <GetDataSlab+0xdfdc>
   35998:	ldr	r9, [fp, #8]
   3599c:	b	359bc <GetDataSlab+0xdff8>
   359a0:	ldr	r9, [fp, #8]
   359a4:	vmov.32	r1, d20[0]
   359a8:	mul	r7, r1, r7
   359ac:	ldr	r1, [r0, r3, lsl #2]
   359b0:	subs	r3, r3, #1
   359b4:	mul	r8, r8, r1
   359b8:	bne	359a8 <GetDataSlab+0xdfe4>
   359bc:	sub	sl, fp, #96	; 0x60
   359c0:	sub	r3, fp, #176	; 0xb0
   359c4:	ldr	r6, [sp, #44]	; 0x2c
   359c8:	ldr	lr, [sp, #56]	; 0x38
   359cc:	str	r7, [sp, #44]	; 0x2c
   359d0:	str	r8, [sl, ip, lsl #2]
   359d4:	ldr	r8, [fp, #12]
   359d8:	str	r7, [r3, ip, lsl #2]
   359dc:	ldr	r7, [sp, #32]
   359e0:	ldr	r1, [r8, ip, lsl #2]
   359e4:	mla	r4, r1, r6, r4
   359e8:	ldr	r1, [fp, #20]
   359ec:	ldr	r6, [sp, #40]	; 0x28
   359f0:	ldr	r1, [r1, ip, lsl #2]
   359f4:	add	ip, ip, #1
   359f8:	add	r6, r6, #4
   359fc:	mul	lr, r1, lr
   35a00:	ldr	r1, [fp, #24]
   35a04:	str	lr, [sp, #56]	; 0x38
   35a08:	ldr	lr, [sp, #36]	; 0x24
   35a0c:	cmp	ip, r1
   35a10:	bne	358dc <GetDataSlab+0xdf18>
   35a14:	ldr	r0, [sp, #48]	; 0x30
   35a18:	cmp	r5, #1
   35a1c:	add	sl, r0, r4, lsl #1
   35a20:	bne	42dc0 <GetDataSlab+0x1b3fc>
   35a24:	ldr	r0, [sp, #56]	; 0x38
   35a28:	cmp	r0, #1
   35a2c:	blt	47ff8 <GetDataSlab+0x20634>
   35a30:	ldr	r0, [fp, #20]
   35a34:	mov	r9, r8
   35a38:	mov	lr, #0
   35a3c:	add	ip, r0, #4
   35a40:	sub	r0, fp, #136	; 0x88
   35a44:	orr	r7, r0, #4
   35a48:	sub	r0, fp, #96	; 0x60
   35a4c:	orr	r0, r0, #4
   35a50:	str	r0, [sp, #44]	; 0x2c
   35a54:	ldr	r0, [r9], #4
   35a58:	str	r0, [sp, #48]	; 0x30
   35a5c:	ldr	r3, [sp, #48]	; 0x30
   35a60:	ldr	r1, [sp, #52]	; 0x34
   35a64:	cmp	r2, #1
   35a68:	add	r8, r3, r4
   35a6c:	add	r0, sl, r3, lsl #1
   35a70:	blt	35ab0 <GetDataSlab+0xe0ec>
   35a74:	ldr	r1, [sp, #60]	; 0x3c
   35a78:	ldr	r5, [fp, #20]
   35a7c:	mov	r3, r0
   35a80:	add	r4, r1, lr, lsl #2
   35a84:	mov	r1, #0
   35a88:	ldrh	r2, [r3], #2
   35a8c:	str	r2, [r4, r1, lsl #2]
   35a90:	add	r1, r1, #1
   35a94:	ldr	r2, [r5]
   35a98:	cmp	r1, r2
   35a9c:	blt	35a88 <GetDataSlab+0xe0c4>
   35aa0:	ldr	r1, [fp, #12]
   35aa4:	ldr	r3, [r1]
   35aa8:	ldr	r1, [fp, #8]
   35aac:	ldr	r1, [r1]
   35ab0:	str	r1, [sp, #52]	; 0x34
   35ab4:	sub	r1, r1, r3
   35ab8:	str	r3, [sp, #48]	; 0x30
   35abc:	add	sl, r0, r1, lsl #1
   35ac0:	ldr	r0, [fp, #24]
   35ac4:	add	r4, r8, r1
   35ac8:	cmp	r0, #2
   35acc:	blt	35b7c <GetDataSlab+0xe1b8>
   35ad0:	mov	r1, #0
   35ad4:	mov	r8, #0
   35ad8:	mov	r0, r1
   35adc:	ldr	r1, [r7, r1, lsl #2]
   35ae0:	add	r1, r1, #1
   35ae4:	str	r1, [r7, r0, lsl #2]
   35ae8:	ldr	r6, [ip, r0, lsl #2]
   35aec:	sdiv	r5, r1, r6
   35af0:	mls	r1, r5, r6, r1
   35af4:	cmp	r1, #0
   35af8:	bne	35b6c <GetDataSlab+0xe1a8>
   35afc:	sub	r3, fp, #176	; 0xb0
   35b00:	str	r8, [r7, r0, lsl #2]
   35b04:	add	r1, r3, r0, lsl #2
   35b08:	ldr	r1, [r1, #4]
   35b0c:	sdiv	r5, r4, r1
   35b10:	mls	r6, r5, r1, r4
   35b14:	cmp	r6, #0
   35b18:	beq	35b34 <GetDataSlab+0xe170>
   35b1c:	ldr	r5, [r3, r0, lsl #2]
   35b20:	ldr	r3, [r9, r0, lsl #2]
   35b24:	sub	r1, r1, r6
   35b28:	mla	r1, r3, r5, r1
   35b2c:	add	r4, r1, r4
   35b30:	b	35b50 <GetDataSlab+0xe18c>
   35b34:	ldr	r1, [r9, r0, lsl #2]
   35b38:	cmp	r1, #0
   35b3c:	beq	35b54 <GetDataSlab+0xe190>
   35b40:	sub	r3, fp, #176	; 0xb0
   35b44:	ldr	r3, [r3, r0, lsl #2]
   35b48:	mla	r4, r3, r1, r4
   35b4c:	mul	r1, r3, r1
   35b50:	add	sl, sl, r1, lsl #1
   35b54:	ldr	r3, [fp, #24]
   35b58:	add	r1, r0, #1
   35b5c:	add	r0, r0, #2
   35b60:	cmp	r0, r3
   35b64:	blt	35ad8 <GetDataSlab+0xe114>
   35b68:	b	35b7c <GetDataSlab+0xe1b8>
   35b6c:	ldr	r1, [sp, #44]	; 0x2c
   35b70:	ldr	r0, [r1, r0, lsl #2]
   35b74:	add	sl, sl, r0, lsl #1
   35b78:	add	r4, r0, r4
   35b7c:	ldr	r1, [sp, #56]	; 0x38
   35b80:	add	lr, r2, lr
   35b84:	mov	r0, #0
   35b88:	cmp	lr, r1
   35b8c:	blt	35a5c <GetDataSlab+0xe098>
   35b90:	b	47ffc <GetDataSlab+0x20638>
   35b94:	ldr	r5, [r3]
   35b98:	ldr	r9, [fp, #8]
   35b9c:	ldr	r8, [fp, #12]
   35ba0:	mov	r4, #0
   35ba4:	sub	r3, fp, #176	; 0xb0
   35ba8:	sub	r0, r5, #1
   35bac:	str	r0, [fp, #-96]	; 0xffffffa0
   35bb0:	ldr	r0, [r9]
   35bb4:	str	r0, [fp, #-176]	; 0xffffff50
   35bb8:	str	r0, [sp, #52]	; 0x34
   35bbc:	ldr	r0, [fp, #24]
   35bc0:	ldr	r2, [sl]
   35bc4:	sub	sl, fp, #96	; 0x60
   35bc8:	cmp	r0, #2
   35bcc:	mov	r0, r2
   35bd0:	str	r2, [sp, #56]	; 0x38
   35bd4:	blt	35d38 <GetDataSlab+0xe374>
   35bd8:	ldr	r7, [sp, #52]	; 0x34
   35bdc:	sub	r0, r9, #4
   35be0:	sub	r6, r9, #12
   35be4:	mov	ip, #1
   35be8:	mov	lr, #0
   35bec:	mov	r4, #0
   35bf0:	str	r2, [sp, #56]	; 0x38
   35bf4:	mov	r1, r7
   35bf8:	str	r7, [sp, #44]	; 0x2c
   35bfc:	mov	r1, r2
   35c00:	ldr	r1, [fp, #16]
   35c04:	add	lr, lr, #1
   35c08:	str	r6, [sp, #40]	; 0x28
   35c0c:	cmp	lr, #4
   35c10:	str	lr, [sp, #36]	; 0x24
   35c14:	ldr	r1, [r1, ip, lsl #2]
   35c18:	str	r7, [r3, ip, lsl #2]
   35c1c:	sub	r8, r1, #1
   35c20:	str	r8, [sl, ip, lsl #2]
   35c24:	ldr	r1, [r9, ip, lsl #2]
   35c28:	str	r1, [sp, #32]
   35c2c:	bcs	35c38 <GetDataSlab+0xe274>
   35c30:	mov	r3, ip
   35c34:	b	35ccc <GetDataSlab+0xe308>
   35c38:	vmov.i32	q9, #1	; 0x00000001
   35c3c:	vmov.i32	q10, #1	; 0x00000001
   35c40:	vmov.i32	q8, #1	; 0x00000001
   35c44:	bic	sl, lr, #3
   35c48:	vmov.32	d23[1], r1
   35c4c:	bic	r9, ip, #3
   35c50:	mov	r1, r6
   35c54:	vmov.32	d18[0], r7
   35c58:	vmov.32	d20[0], r8
   35c5c:	sub	r3, ip, sl
   35c60:	mvn	r7, #15
   35c64:	vorr	d16, d18, d18
   35c68:	vmov.i32	q9, #1	; 0x00000001
   35c6c:	vorr	d18, d20, d20
   35c70:	vld1.32	{d20-d21}, [r1], r7
   35c74:	subs	r9, r9, #4
   35c78:	vrev64.32	q12, q10
   35c7c:	vext.8	q12, q12, q12, #8
   35c80:	vext.8	q11, q11, q12, #12
   35c84:	vmul.i32	q9, q9, q12
   35c88:	vmul.i32	q8, q11, q8
   35c8c:	vorr	q11, q12, q12
   35c90:	bne	35c70 <GetDataSlab+0xe2ac>
   35c94:	vext.8	q11, q9, q8, #8
   35c98:	vext.8	q12, q8, q8, #8
   35c9c:	cmp	lr, sl
   35ca0:	vmul.i32	q0, q9, q11
   35ca4:	vmul.i32	q1, q8, q12
   35ca8:	vmul.i32	q8, q0, d0[1]
   35cac:	vmul.i32	q9, q1, d2[1]
   35cb0:	vmov.32	r8, d16[0]
   35cb4:	vmov.32	r7, d18[0]
   35cb8:	bne	35cc4 <GetDataSlab+0xe300>
   35cbc:	ldr	r9, [fp, #8]
   35cc0:	b	35ce0 <GetDataSlab+0xe31c>
   35cc4:	ldr	r9, [fp, #8]
   35cc8:	vmov.32	r1, d20[0]
   35ccc:	mul	r7, r1, r7
   35cd0:	ldr	r1, [r0, r3, lsl #2]
   35cd4:	subs	r3, r3, #1
   35cd8:	mul	r8, r8, r1
   35cdc:	bne	35ccc <GetDataSlab+0xe308>
   35ce0:	sub	sl, fp, #96	; 0x60
   35ce4:	sub	r3, fp, #176	; 0xb0
   35ce8:	ldr	r6, [sp, #44]	; 0x2c
   35cec:	ldr	lr, [sp, #56]	; 0x38
   35cf0:	str	r7, [sp, #44]	; 0x2c
   35cf4:	str	r8, [sl, ip, lsl #2]
   35cf8:	ldr	r8, [fp, #12]
   35cfc:	str	r7, [r3, ip, lsl #2]
   35d00:	ldr	r7, [sp, #32]
   35d04:	ldr	r1, [r8, ip, lsl #2]
   35d08:	mla	r4, r1, r6, r4
   35d0c:	ldr	r1, [fp, #20]
   35d10:	ldr	r6, [sp, #40]	; 0x28
   35d14:	ldr	r1, [r1, ip, lsl #2]
   35d18:	add	ip, ip, #1
   35d1c:	add	r6, r6, #4
   35d20:	mul	lr, r1, lr
   35d24:	ldr	r1, [fp, #24]
   35d28:	str	lr, [sp, #56]	; 0x38
   35d2c:	ldr	lr, [sp, #36]	; 0x24
   35d30:	cmp	ip, r1
   35d34:	bne	35c00 <GetDataSlab+0xe23c>
   35d38:	ldr	r0, [sp, #48]	; 0x30
   35d3c:	cmp	r5, #1
   35d40:	add	sl, r0, r4, lsl #2
   35d44:	bne	42f5c <GetDataSlab+0x1b598>
   35d48:	ldr	r0, [sp, #56]	; 0x38
   35d4c:	cmp	r0, #1
   35d50:	blt	47ff8 <GetDataSlab+0x20634>
   35d54:	ldr	r0, [fp, #20]
   35d58:	mov	r9, r8
   35d5c:	mov	r8, #0
   35d60:	add	ip, r0, #4
   35d64:	sub	r0, fp, #136	; 0x88
   35d68:	orr	r7, r0, #4
   35d6c:	sub	r0, fp, #96	; 0x60
   35d70:	orr	r0, r0, #4
   35d74:	str	r0, [sp, #44]	; 0x2c
   35d78:	ldr	r0, [r9], #4
   35d7c:	str	r0, [sp, #48]	; 0x30
   35d80:	ldr	r6, [sp, #48]	; 0x30
   35d84:	ldr	r1, [sp, #52]	; 0x34
   35d88:	cmp	r2, #1
   35d8c:	add	r0, r6, r4
   35d90:	add	r3, sl, r6, lsl #2
   35d94:	blt	35dd0 <GetDataSlab+0xe40c>
   35d98:	ldr	r1, [sp, #60]	; 0x3c
   35d9c:	ldr	r6, [fp, #20]
   35da0:	mov	r4, #0
   35da4:	add	r1, r1, r8, lsl #2
   35da8:	ldr	r2, [r3, r4, lsl #2]
   35dac:	str	r2, [r1, r4, lsl #2]
   35db0:	add	r4, r4, #1
   35db4:	ldr	r2, [r6]
   35db8:	cmp	r4, r2
   35dbc:	blt	35da8 <GetDataSlab+0xe3e4>
   35dc0:	ldr	r1, [fp, #12]
   35dc4:	ldr	r6, [r1]
   35dc8:	ldr	r1, [fp, #8]
   35dcc:	ldr	r1, [r1]
   35dd0:	str	r1, [sp, #52]	; 0x34
   35dd4:	sub	r1, r1, r6
   35dd8:	str	r6, [sp, #48]	; 0x30
   35ddc:	add	r4, r0, r1
   35de0:	ldr	r0, [fp, #24]
   35de4:	add	sl, r3, r1, lsl #2
   35de8:	cmp	r0, #2
   35dec:	blt	35e98 <GetDataSlab+0xe4d4>
   35df0:	mov	r1, #0
   35df4:	mov	r0, r1
   35df8:	ldr	r1, [r7, r1, lsl #2]
   35dfc:	add	r1, r1, #1
   35e00:	str	r1, [r7, r0, lsl #2]
   35e04:	ldr	r6, [ip, r0, lsl #2]
   35e08:	sdiv	lr, r1, r6
   35e0c:	mls	r1, lr, r6, r1
   35e10:	cmp	r1, #0
   35e14:	bne	35e88 <GetDataSlab+0xe4c4>
   35e18:	mov	r1, #0
   35e1c:	sub	r3, fp, #176	; 0xb0
   35e20:	str	r1, [r7, r0, lsl #2]
   35e24:	add	r1, r3, r0, lsl #2
   35e28:	ldr	r1, [r1, #4]
   35e2c:	sdiv	r6, r4, r1
   35e30:	mls	r6, r6, r1, r4
   35e34:	cmp	r6, #0
   35e38:	beq	35e54 <GetDataSlab+0xe490>
   35e3c:	ldr	r5, [r3, r0, lsl #2]
   35e40:	ldr	r3, [r9, r0, lsl #2]
   35e44:	sub	r1, r1, r6
   35e48:	mla	r1, r3, r5, r1
   35e4c:	add	r4, r1, r4
   35e50:	b	35e6c <GetDataSlab+0xe4a8>
   35e54:	ldr	r1, [r9, r0, lsl #2]
   35e58:	cmp	r1, #0
   35e5c:	beq	35e70 <GetDataSlab+0xe4ac>
   35e60:	ldr	r3, [r3, r0, lsl #2]
   35e64:	mla	r4, r3, r1, r4
   35e68:	mul	r1, r3, r1
   35e6c:	add	sl, sl, r1, lsl #2
   35e70:	ldr	r3, [fp, #24]
   35e74:	add	r1, r0, #1
   35e78:	add	r0, r0, #2
   35e7c:	cmp	r0, r3
   35e80:	blt	35df4 <GetDataSlab+0xe430>
   35e84:	b	35e98 <GetDataSlab+0xe4d4>
   35e88:	ldr	r1, [sp, #44]	; 0x2c
   35e8c:	ldr	r0, [r1, r0, lsl #2]
   35e90:	add	sl, sl, r0, lsl #2
   35e94:	add	r4, r0, r4
   35e98:	ldr	r1, [sp, #56]	; 0x38
   35e9c:	add	r8, r2, r8
   35ea0:	mov	r0, #0
   35ea4:	cmp	r8, r1
   35ea8:	blt	35d80 <GetDataSlab+0xe3bc>
   35eac:	b	47ffc <GetDataSlab+0x20638>
   35eb0:	ldr	r5, [r3]
   35eb4:	ldr	r9, [fp, #8]
   35eb8:	ldr	r8, [fp, #12]
   35ebc:	mov	r4, #0
   35ec0:	sub	r3, fp, #176	; 0xb0
   35ec4:	sub	r0, r5, #1
   35ec8:	str	r0, [fp, #-96]	; 0xffffffa0
   35ecc:	ldr	r0, [r9]
   35ed0:	str	r0, [fp, #-176]	; 0xffffff50
   35ed4:	str	r0, [sp, #52]	; 0x34
   35ed8:	ldr	r0, [fp, #24]
   35edc:	ldr	r2, [sl]
   35ee0:	sub	sl, fp, #96	; 0x60
   35ee4:	cmp	r0, #2
   35ee8:	mov	r0, r2
   35eec:	str	r2, [sp, #56]	; 0x38
   35ef0:	blt	36054 <GetDataSlab+0xe690>
   35ef4:	ldr	r7, [sp, #52]	; 0x34
   35ef8:	sub	r0, r9, #4
   35efc:	sub	r6, r9, #12
   35f00:	mov	ip, #1
   35f04:	mov	lr, #0
   35f08:	mov	r4, #0
   35f0c:	str	r2, [sp, #56]	; 0x38
   35f10:	mov	r1, r7
   35f14:	str	r7, [sp, #44]	; 0x2c
   35f18:	mov	r1, r2
   35f1c:	ldr	r1, [fp, #16]
   35f20:	add	lr, lr, #1
   35f24:	str	r6, [sp, #40]	; 0x28
   35f28:	cmp	lr, #4
   35f2c:	str	lr, [sp, #36]	; 0x24
   35f30:	ldr	r1, [r1, ip, lsl #2]
   35f34:	str	r7, [r3, ip, lsl #2]
   35f38:	sub	r8, r1, #1
   35f3c:	str	r8, [sl, ip, lsl #2]
   35f40:	ldr	r1, [r9, ip, lsl #2]
   35f44:	str	r1, [sp, #32]
   35f48:	bcs	35f54 <GetDataSlab+0xe590>
   35f4c:	mov	r3, ip
   35f50:	b	35fe8 <GetDataSlab+0xe624>
   35f54:	vmov.i32	q9, #1	; 0x00000001
   35f58:	vmov.i32	q10, #1	; 0x00000001
   35f5c:	vmov.i32	q8, #1	; 0x00000001
   35f60:	bic	sl, lr, #3
   35f64:	vmov.32	d23[1], r1
   35f68:	bic	r9, ip, #3
   35f6c:	mov	r1, r6
   35f70:	vmov.32	d18[0], r7
   35f74:	vmov.32	d20[0], r8
   35f78:	sub	r3, ip, sl
   35f7c:	mvn	r7, #15
   35f80:	vorr	d16, d18, d18
   35f84:	vmov.i32	q9, #1	; 0x00000001
   35f88:	vorr	d18, d20, d20
   35f8c:	vld1.32	{d20-d21}, [r1], r7
   35f90:	subs	r9, r9, #4
   35f94:	vrev64.32	q12, q10
   35f98:	vext.8	q12, q12, q12, #8
   35f9c:	vext.8	q11, q11, q12, #12
   35fa0:	vmul.i32	q9, q9, q12
   35fa4:	vmul.i32	q8, q11, q8
   35fa8:	vorr	q11, q12, q12
   35fac:	bne	35f8c <GetDataSlab+0xe5c8>
   35fb0:	vext.8	q11, q9, q8, #8
   35fb4:	vext.8	q12, q8, q8, #8
   35fb8:	cmp	lr, sl
   35fbc:	vmul.i32	q0, q9, q11
   35fc0:	vmul.i32	q1, q8, q12
   35fc4:	vmul.i32	q8, q0, d0[1]
   35fc8:	vmul.i32	q9, q1, d2[1]
   35fcc:	vmov.32	r8, d16[0]
   35fd0:	vmov.32	r7, d18[0]
   35fd4:	bne	35fe0 <GetDataSlab+0xe61c>
   35fd8:	ldr	r9, [fp, #8]
   35fdc:	b	35ffc <GetDataSlab+0xe638>
   35fe0:	ldr	r9, [fp, #8]
   35fe4:	vmov.32	r1, d20[0]
   35fe8:	mul	r7, r1, r7
   35fec:	ldr	r1, [r0, r3, lsl #2]
   35ff0:	subs	r3, r3, #1
   35ff4:	mul	r8, r8, r1
   35ff8:	bne	35fe8 <GetDataSlab+0xe624>
   35ffc:	sub	sl, fp, #96	; 0x60
   36000:	sub	r3, fp, #176	; 0xb0
   36004:	ldr	r6, [sp, #44]	; 0x2c
   36008:	ldr	lr, [sp, #56]	; 0x38
   3600c:	str	r7, [sp, #44]	; 0x2c
   36010:	str	r8, [sl, ip, lsl #2]
   36014:	ldr	r8, [fp, #12]
   36018:	str	r7, [r3, ip, lsl #2]
   3601c:	ldr	r7, [sp, #32]
   36020:	ldr	r1, [r8, ip, lsl #2]
   36024:	mla	r4, r1, r6, r4
   36028:	ldr	r1, [fp, #20]
   3602c:	ldr	r6, [sp, #40]	; 0x28
   36030:	ldr	r1, [r1, ip, lsl #2]
   36034:	add	ip, ip, #1
   36038:	add	r6, r6, #4
   3603c:	mul	lr, r1, lr
   36040:	ldr	r1, [fp, #24]
   36044:	str	lr, [sp, #56]	; 0x38
   36048:	ldr	lr, [sp, #36]	; 0x24
   3604c:	cmp	ip, r1
   36050:	bne	35f1c <GetDataSlab+0xe558>
   36054:	ldr	r0, [sp, #48]	; 0x30
   36058:	cmp	r5, #1
   3605c:	add	sl, r0, r4, lsl #2
   36060:	bne	430f8 <GetDataSlab+0x1b734>
   36064:	ldr	r0, [sp, #56]	; 0x38
   36068:	cmp	r0, #1
   3606c:	blt	47ff8 <GetDataSlab+0x20634>
   36070:	ldr	r0, [fp, #20]
   36074:	mov	r9, r8
   36078:	mov	r8, #0
   3607c:	add	ip, r0, #4
   36080:	sub	r0, fp, #136	; 0x88
   36084:	orr	r7, r0, #4
   36088:	sub	r0, fp, #96	; 0x60
   3608c:	orr	r0, r0, #4
   36090:	str	r0, [sp, #44]	; 0x2c
   36094:	ldr	r0, [r9], #4
   36098:	str	r0, [sp, #48]	; 0x30
   3609c:	ldr	r6, [sp, #48]	; 0x30
   360a0:	ldr	r1, [sp, #52]	; 0x34
   360a4:	cmp	r2, #1
   360a8:	add	r0, r6, r4
   360ac:	add	r3, sl, r6, lsl #2
   360b0:	blt	360ec <GetDataSlab+0xe728>
   360b4:	ldr	r1, [sp, #60]	; 0x3c
   360b8:	ldr	r6, [fp, #20]
   360bc:	mov	r4, #0
   360c0:	add	r1, r1, r8, lsl #2
   360c4:	ldr	r2, [r3, r4, lsl #2]
   360c8:	str	r2, [r1, r4, lsl #2]
   360cc:	add	r4, r4, #1
   360d0:	ldr	r2, [r6]
   360d4:	cmp	r4, r2
   360d8:	blt	360c4 <GetDataSlab+0xe700>
   360dc:	ldr	r1, [fp, #12]
   360e0:	ldr	r6, [r1]
   360e4:	ldr	r1, [fp, #8]
   360e8:	ldr	r1, [r1]
   360ec:	str	r1, [sp, #52]	; 0x34
   360f0:	sub	r1, r1, r6
   360f4:	str	r6, [sp, #48]	; 0x30
   360f8:	add	r4, r0, r1
   360fc:	ldr	r0, [fp, #24]
   36100:	add	sl, r3, r1, lsl #2
   36104:	cmp	r0, #2
   36108:	blt	361b4 <GetDataSlab+0xe7f0>
   3610c:	mov	r1, #0
   36110:	mov	r0, r1
   36114:	ldr	r1, [r7, r1, lsl #2]
   36118:	add	r1, r1, #1
   3611c:	str	r1, [r7, r0, lsl #2]
   36120:	ldr	r6, [ip, r0, lsl #2]
   36124:	sdiv	lr, r1, r6
   36128:	mls	r1, lr, r6, r1
   3612c:	cmp	r1, #0
   36130:	bne	361a4 <GetDataSlab+0xe7e0>
   36134:	mov	r1, #0
   36138:	sub	r3, fp, #176	; 0xb0
   3613c:	str	r1, [r7, r0, lsl #2]
   36140:	add	r1, r3, r0, lsl #2
   36144:	ldr	r1, [r1, #4]
   36148:	sdiv	r6, r4, r1
   3614c:	mls	r6, r6, r1, r4
   36150:	cmp	r6, #0
   36154:	beq	36170 <GetDataSlab+0xe7ac>
   36158:	ldr	r5, [r3, r0, lsl #2]
   3615c:	ldr	r3, [r9, r0, lsl #2]
   36160:	sub	r1, r1, r6
   36164:	mla	r1, r3, r5, r1
   36168:	add	r4, r1, r4
   3616c:	b	36188 <GetDataSlab+0xe7c4>
   36170:	ldr	r1, [r9, r0, lsl #2]
   36174:	cmp	r1, #0
   36178:	beq	3618c <GetDataSlab+0xe7c8>
   3617c:	ldr	r3, [r3, r0, lsl #2]
   36180:	mla	r4, r3, r1, r4
   36184:	mul	r1, r3, r1
   36188:	add	sl, sl, r1, lsl #2
   3618c:	ldr	r3, [fp, #24]
   36190:	add	r1, r0, #1
   36194:	add	r0, r0, #2
   36198:	cmp	r0, r3
   3619c:	blt	36110 <GetDataSlab+0xe74c>
   361a0:	b	361b4 <GetDataSlab+0xe7f0>
   361a4:	ldr	r1, [sp, #44]	; 0x2c
   361a8:	ldr	r0, [r1, r0, lsl #2]
   361ac:	add	sl, sl, r0, lsl #2
   361b0:	add	r4, r0, r4
   361b4:	ldr	r1, [sp, #56]	; 0x38
   361b8:	add	r8, r2, r8
   361bc:	mov	r0, #0
   361c0:	cmp	r8, r1
   361c4:	blt	3609c <GetDataSlab+0xe6d8>
   361c8:	b	47ffc <GetDataSlab+0x20638>
   361cc:	ldr	r5, [r3]
   361d0:	ldr	r9, [fp, #8]
   361d4:	ldr	r8, [fp, #12]
   361d8:	mov	r4, #0
   361dc:	sub	r3, fp, #176	; 0xb0
   361e0:	sub	r0, r5, #1
   361e4:	str	r0, [fp, #-96]	; 0xffffffa0
   361e8:	ldr	r0, [r9]
   361ec:	str	r0, [fp, #-176]	; 0xffffff50
   361f0:	str	r0, [sp, #52]	; 0x34
   361f4:	ldr	r0, [fp, #24]
   361f8:	ldr	r2, [sl]
   361fc:	sub	sl, fp, #96	; 0x60
   36200:	cmp	r0, #2
   36204:	mov	r0, r2
   36208:	str	r2, [sp, #56]	; 0x38
   3620c:	blt	36370 <GetDataSlab+0xe9ac>
   36210:	ldr	r7, [sp, #52]	; 0x34
   36214:	sub	r0, r9, #4
   36218:	sub	r6, r9, #12
   3621c:	mov	ip, #1
   36220:	mov	lr, #0
   36224:	mov	r4, #0
   36228:	str	r2, [sp, #56]	; 0x38
   3622c:	mov	r1, r7
   36230:	str	r7, [sp, #44]	; 0x2c
   36234:	mov	r1, r2
   36238:	ldr	r1, [fp, #16]
   3623c:	add	lr, lr, #1
   36240:	str	r6, [sp, #40]	; 0x28
   36244:	cmp	lr, #4
   36248:	str	lr, [sp, #36]	; 0x24
   3624c:	ldr	r1, [r1, ip, lsl #2]
   36250:	str	r7, [r3, ip, lsl #2]
   36254:	sub	r8, r1, #1
   36258:	str	r8, [sl, ip, lsl #2]
   3625c:	ldr	r1, [r9, ip, lsl #2]
   36260:	str	r1, [sp, #32]
   36264:	bcs	36270 <GetDataSlab+0xe8ac>
   36268:	mov	r3, ip
   3626c:	b	36304 <GetDataSlab+0xe940>
   36270:	vmov.i32	q9, #1	; 0x00000001
   36274:	vmov.i32	q10, #1	; 0x00000001
   36278:	vmov.i32	q8, #1	; 0x00000001
   3627c:	bic	sl, lr, #3
   36280:	vmov.32	d23[1], r1
   36284:	bic	r9, ip, #3
   36288:	mov	r1, r6
   3628c:	vmov.32	d18[0], r7
   36290:	vmov.32	d20[0], r8
   36294:	sub	r3, ip, sl
   36298:	mvn	r7, #15
   3629c:	vorr	d16, d18, d18
   362a0:	vmov.i32	q9, #1	; 0x00000001
   362a4:	vorr	d18, d20, d20
   362a8:	vld1.32	{d20-d21}, [r1], r7
   362ac:	subs	r9, r9, #4
   362b0:	vrev64.32	q12, q10
   362b4:	vext.8	q12, q12, q12, #8
   362b8:	vext.8	q11, q11, q12, #12
   362bc:	vmul.i32	q9, q9, q12
   362c0:	vmul.i32	q8, q11, q8
   362c4:	vorr	q11, q12, q12
   362c8:	bne	362a8 <GetDataSlab+0xe8e4>
   362cc:	vext.8	q11, q9, q8, #8
   362d0:	vext.8	q12, q8, q8, #8
   362d4:	cmp	lr, sl
   362d8:	vmul.i32	q0, q9, q11
   362dc:	vmul.i32	q1, q8, q12
   362e0:	vmul.i32	q8, q0, d0[1]
   362e4:	vmul.i32	q9, q1, d2[1]
   362e8:	vmov.32	r8, d16[0]
   362ec:	vmov.32	r7, d18[0]
   362f0:	bne	362fc <GetDataSlab+0xe938>
   362f4:	ldr	r9, [fp, #8]
   362f8:	b	36318 <GetDataSlab+0xe954>
   362fc:	ldr	r9, [fp, #8]
   36300:	vmov.32	r1, d20[0]
   36304:	mul	r7, r1, r7
   36308:	ldr	r1, [r0, r3, lsl #2]
   3630c:	subs	r3, r3, #1
   36310:	mul	r8, r8, r1
   36314:	bne	36304 <GetDataSlab+0xe940>
   36318:	sub	sl, fp, #96	; 0x60
   3631c:	sub	r3, fp, #176	; 0xb0
   36320:	ldr	r6, [sp, #44]	; 0x2c
   36324:	ldr	lr, [sp, #56]	; 0x38
   36328:	str	r7, [sp, #44]	; 0x2c
   3632c:	str	r8, [sl, ip, lsl #2]
   36330:	ldr	r8, [fp, #12]
   36334:	str	r7, [r3, ip, lsl #2]
   36338:	ldr	r7, [sp, #32]
   3633c:	ldr	r1, [r8, ip, lsl #2]
   36340:	mla	r4, r1, r6, r4
   36344:	ldr	r1, [fp, #20]
   36348:	ldr	r6, [sp, #40]	; 0x28
   3634c:	ldr	r1, [r1, ip, lsl #2]
   36350:	add	ip, ip, #1
   36354:	add	r6, r6, #4
   36358:	mul	lr, r1, lr
   3635c:	ldr	r1, [fp, #24]
   36360:	str	lr, [sp, #56]	; 0x38
   36364:	ldr	lr, [sp, #36]	; 0x24
   36368:	cmp	ip, r1
   3636c:	bne	36238 <GetDataSlab+0xe874>
   36370:	ldr	r0, [sp, #48]	; 0x30
   36374:	cmp	r5, #1
   36378:	add	ip, r0, r4, lsl #2
   3637c:	bne	43294 <GetDataSlab+0x1b8d0>
   36380:	ldr	r0, [sp, #56]	; 0x38
   36384:	cmp	r0, #1
   36388:	ldr	r0, [fp, #20]
   3638c:	blt	47ff8 <GetDataSlab+0x20634>
   36390:	add	r9, r0, #4
   36394:	sub	r0, fp, #136	; 0x88
   36398:	mov	sl, r8
   3639c:	mov	lr, #0
   363a0:	orr	r7, r0, #4
   363a4:	sub	r0, fp, #96	; 0x60
   363a8:	orr	r0, r0, #4
   363ac:	str	r0, [sp, #44]	; 0x2c
   363b0:	ldr	r0, [sl], #4
   363b4:	str	r0, [sp, #48]	; 0x30
   363b8:	ldr	r1, [sp, #48]	; 0x30
   363bc:	ldr	r0, [sp, #52]	; 0x34
   363c0:	cmp	r2, #1
   363c4:	add	r5, r1, r4
   363c8:	add	r8, ip, r1, lsl #2
   363cc:	blt	36418 <GetDataSlab+0xea54>
   363d0:	ldr	r0, [sp, #60]	; 0x3c
   363d4:	ldr	r6, [fp, #20]
   363d8:	mov	r3, r8
   363dc:	add	r4, r0, lr, lsl #2
   363e0:	mov	r0, #0
   363e4:	vldr	s0, [r3]
   363e8:	add	r3, r3, #4
   363ec:	vcvt.s32.f32	s0, s0
   363f0:	vmov	r1, s0
   363f4:	str	r1, [r4, r0, lsl #2]
   363f8:	add	r0, r0, #1
   363fc:	ldr	r2, [r6]
   36400:	cmp	r0, r2
   36404:	blt	363e4 <GetDataSlab+0xea20>
   36408:	ldr	r0, [fp, #12]
   3640c:	ldr	r1, [r0]
   36410:	ldr	r0, [fp, #8]
   36414:	ldr	r0, [r0]
   36418:	str	r0, [sp, #52]	; 0x34
   3641c:	sub	r0, r0, r1
   36420:	str	r1, [sp, #48]	; 0x30
   36424:	add	ip, r8, r0, lsl #2
   36428:	add	r4, r5, r0
   3642c:	ldr	r0, [fp, #24]
   36430:	cmp	r0, #2
   36434:	blt	364e4 <GetDataSlab+0xeb20>
   36438:	mov	r6, #0
   3643c:	mov	r8, #0
   36440:	ldr	r1, [r7, r6, lsl #2]
   36444:	mov	r0, r6
   36448:	add	r1, r1, #1
   3644c:	str	r1, [r7, r6, lsl #2]
   36450:	ldr	r6, [r9, r6, lsl #2]
   36454:	sdiv	r5, r1, r6
   36458:	mls	r1, r5, r6, r1
   3645c:	cmp	r1, #0
   36460:	bne	364d4 <GetDataSlab+0xeb10>
   36464:	sub	r3, fp, #176	; 0xb0
   36468:	str	r8, [r7, r0, lsl #2]
   3646c:	add	r1, r3, r0, lsl #2
   36470:	ldr	r6, [r1, #4]
   36474:	sdiv	r1, r4, r6
   36478:	mls	r1, r1, r6, r4
   3647c:	cmp	r1, #0
   36480:	beq	3649c <GetDataSlab+0xead8>
   36484:	ldr	r5, [r3, r0, lsl #2]
   36488:	ldr	r3, [sl, r0, lsl #2]
   3648c:	sub	r1, r6, r1
   36490:	mla	r1, r3, r5, r1
   36494:	add	r4, r1, r4
   36498:	b	364b8 <GetDataSlab+0xeaf4>
   3649c:	ldr	r1, [sl, r0, lsl #2]
   364a0:	cmp	r1, #0
   364a4:	beq	364bc <GetDataSlab+0xeaf8>
   364a8:	sub	r3, fp, #176	; 0xb0
   364ac:	ldr	r3, [r3, r0, lsl #2]
   364b0:	mla	r4, r3, r1, r4
   364b4:	mul	r1, r3, r1
   364b8:	add	ip, ip, r1, lsl #2
   364bc:	ldr	r1, [fp, #24]
   364c0:	add	r6, r0, #1
   364c4:	add	r0, r0, #2
   364c8:	cmp	r0, r1
   364cc:	blt	36440 <GetDataSlab+0xea7c>
   364d0:	b	364e4 <GetDataSlab+0xeb20>
   364d4:	ldr	r1, [sp, #44]	; 0x2c
   364d8:	ldr	r0, [r1, r0, lsl #2]
   364dc:	add	ip, ip, r0, lsl #2
   364e0:	add	r4, r0, r4
   364e4:	ldr	r1, [sp, #56]	; 0x38
   364e8:	add	lr, r2, lr
   364ec:	mov	r0, #0
   364f0:	cmp	lr, r1
   364f4:	blt	363b8 <GetDataSlab+0xe9f4>
   364f8:	b	47ffc <GetDataSlab+0x20638>
   364fc:	ldr	r5, [r3]
   36500:	ldr	r8, [fp, #12]
   36504:	mov	r4, #0
   36508:	sub	r3, fp, #176	; 0xb0
   3650c:	sub	r9, fp, #96	; 0x60
   36510:	sub	r0, r5, #1
   36514:	str	r0, [fp, #-96]	; 0xffffffa0
   36518:	ldr	r0, [fp, #8]
   3651c:	ldr	r0, [r0]
   36520:	str	r0, [fp, #-176]	; 0xffffff50
   36524:	str	r0, [sp, #44]	; 0x2c
   36528:	ldr	r0, [fp, #24]
   3652c:	ldr	r2, [sl]
   36530:	cmp	r0, #2
   36534:	mov	r0, r2
   36538:	str	r2, [sp, #56]	; 0x38
   3653c:	blt	366b4 <GetDataSlab+0xecf0>
   36540:	ldr	r0, [fp, #8]
   36544:	ldr	r7, [sp, #44]	; 0x2c
   36548:	mov	ip, #1
   3654c:	mvn	sl, #15
   36550:	mov	r4, #0
   36554:	str	r2, [sp, #56]	; 0x38
   36558:	mov	r1, r0
   3655c:	sub	r0, r0, #4
   36560:	mov	r6, r7
   36564:	sub	lr, r1, #12
   36568:	mov	r1, #0
   3656c:	str	r1, [sp, #52]	; 0x34
   36570:	mov	r1, r2
   36574:	ldr	r1, [fp, #16]
   36578:	ldr	r1, [r1, ip, lsl #2]
   3657c:	str	r7, [r3, ip, lsl #2]
   36580:	sub	r8, r1, #1
   36584:	ldr	r1, [fp, #8]
   36588:	str	r8, [r9, ip, lsl #2]
   3658c:	ldr	r3, [r1, ip, lsl #2]
   36590:	ldr	r1, [sp, #52]	; 0x34
   36594:	add	r1, r1, #1
   36598:	str	r3, [sp, #40]	; 0x28
   3659c:	cmp	r1, #4
   365a0:	str	r1, [sp, #52]	; 0x34
   365a4:	bcs	365b4 <GetDataSlab+0xebf0>
   365a8:	mov	r1, r3
   365ac:	mov	r3, ip
   365b0:	b	36654 <GetDataSlab+0xec90>
   365b4:	vmov.i32	q9, #1	; 0x00000001
   365b8:	vmov.i32	q10, #1	; 0x00000001
   365bc:	vmov.i32	q8, #1	; 0x00000001
   365c0:	bic	r1, r1, #3
   365c4:	vmov.32	d23[1], r3
   365c8:	bic	r9, ip, #3
   365cc:	str	r6, [sp, #32]
   365d0:	vmov.32	d18[0], r7
   365d4:	vmov.32	d20[0], r8
   365d8:	str	r1, [sp, #36]	; 0x24
   365dc:	sub	r3, ip, r1
   365e0:	mov	r1, lr
   365e4:	vorr	d16, d18, d18
   365e8:	vmov.i32	q9, #1	; 0x00000001
   365ec:	vorr	d18, d20, d20
   365f0:	vld1.32	{d20-d21}, [r1], sl
   365f4:	subs	r9, r9, #4
   365f8:	vrev64.32	q12, q10
   365fc:	vext.8	q12, q12, q12, #8
   36600:	vext.8	q11, q11, q12, #12
   36604:	vmul.i32	q9, q9, q12
   36608:	vmul.i32	q8, q11, q8
   3660c:	vorr	q11, q12, q12
   36610:	bne	365f0 <GetDataSlab+0xec2c>
   36614:	ldr	r1, [sp, #52]	; 0x34
   36618:	ldr	r6, [sp, #36]	; 0x24
   3661c:	vext.8	q11, q9, q8, #8
   36620:	vext.8	q12, q8, q8, #8
   36624:	vmul.i32	q0, q9, q11
   36628:	vmul.i32	q1, q8, q12
   3662c:	vmul.i32	q8, q0, d0[1]
   36630:	vmul.i32	q9, q1, d2[1]
   36634:	vmov.32	r8, d16[0]
   36638:	vmov.32	r7, d18[0]
   3663c:	cmp	r1, r6
   36640:	bne	3664c <GetDataSlab+0xec88>
   36644:	ldr	r6, [sp, #32]
   36648:	b	36668 <GetDataSlab+0xeca4>
   3664c:	ldr	r6, [sp, #32]
   36650:	vmov.32	r1, d20[0]
   36654:	mul	r7, r1, r7
   36658:	ldr	r1, [r0, r3, lsl #2]
   3665c:	subs	r3, r3, #1
   36660:	mul	r8, r8, r1
   36664:	bne	36654 <GetDataSlab+0xec90>
   36668:	sub	r9, fp, #96	; 0x60
   3666c:	sub	r3, fp, #176	; 0xb0
   36670:	add	lr, lr, #4
   36674:	str	r8, [r9, ip, lsl #2]
   36678:	ldr	r8, [fp, #12]
   3667c:	str	r7, [r3, ip, lsl #2]
   36680:	ldr	r1, [r8, ip, lsl #2]
   36684:	mla	r4, r1, r6, r4
   36688:	ldr	r1, [fp, #20]
   3668c:	ldr	r6, [sp, #56]	; 0x38
   36690:	ldr	r1, [r1, ip, lsl #2]
   36694:	add	ip, ip, #1
   36698:	mul	r6, r1, r6
   3669c:	ldr	r1, [fp, #24]
   366a0:	str	r6, [sp, #56]	; 0x38
   366a4:	mov	r6, r7
   366a8:	ldr	r7, [sp, #40]	; 0x28
   366ac:	cmp	ip, r1
   366b0:	bne	36574 <GetDataSlab+0xebb0>
   366b4:	ldr	r0, [sp, #48]	; 0x30
   366b8:	cmp	r5, #1
   366bc:	add	ip, r0, r4, lsl #3
   366c0:	bne	43438 <GetDataSlab+0x1ba74>
   366c4:	ldr	r0, [sp, #56]	; 0x38
   366c8:	cmp	r0, #1
   366cc:	ldr	r0, [fp, #20]
   366d0:	blt	47ff8 <GetDataSlab+0x20634>
   366d4:	add	r9, r0, #4
   366d8:	sub	r0, fp, #136	; 0x88
   366dc:	mov	sl, r8
   366e0:	mov	lr, #0
   366e4:	orr	r7, r0, #4
   366e8:	sub	r0, fp, #96	; 0x60
   366ec:	orr	r0, r0, #4
   366f0:	str	r0, [sp, #48]	; 0x30
   366f4:	ldr	r0, [sl], #4
   366f8:	str	r0, [sp, #52]	; 0x34
   366fc:	ldr	r1, [sp, #52]	; 0x34
   36700:	ldr	r0, [sp, #44]	; 0x2c
   36704:	cmp	r2, #1
   36708:	add	r5, r1, r4
   3670c:	add	r8, ip, r1, lsl #3
   36710:	blt	3675c <GetDataSlab+0xed98>
   36714:	ldr	r0, [sp, #60]	; 0x3c
   36718:	ldr	r6, [fp, #20]
   3671c:	mov	r3, r8
   36720:	add	r4, r0, lr, lsl #2
   36724:	mov	r0, #0
   36728:	vldr	d16, [r3]
   3672c:	add	r3, r3, #8
   36730:	vcvt.s32.f64	s0, d16
   36734:	vmov	r1, s0
   36738:	str	r1, [r4, r0, lsl #2]
   3673c:	add	r0, r0, #1
   36740:	ldr	r2, [r6]
   36744:	cmp	r0, r2
   36748:	blt	36728 <GetDataSlab+0xed64>
   3674c:	ldr	r0, [fp, #12]
   36750:	ldr	r1, [r0]
   36754:	ldr	r0, [fp, #8]
   36758:	ldr	r0, [r0]
   3675c:	str	r0, [sp, #44]	; 0x2c
   36760:	sub	r0, r0, r1
   36764:	str	r1, [sp, #52]	; 0x34
   36768:	add	ip, r8, r0, lsl #3
   3676c:	add	r4, r5, r0
   36770:	ldr	r0, [fp, #24]
   36774:	cmp	r0, #2
   36778:	blt	36828 <GetDataSlab+0xee64>
   3677c:	mov	r6, #0
   36780:	mov	r8, #0
   36784:	ldr	r1, [r7, r6, lsl #2]
   36788:	mov	r0, r6
   3678c:	add	r1, r1, #1
   36790:	str	r1, [r7, r6, lsl #2]
   36794:	ldr	r6, [r9, r6, lsl #2]
   36798:	sdiv	r5, r1, r6
   3679c:	mls	r1, r5, r6, r1
   367a0:	cmp	r1, #0
   367a4:	bne	36818 <GetDataSlab+0xee54>
   367a8:	sub	r3, fp, #176	; 0xb0
   367ac:	str	r8, [r7, r0, lsl #2]
   367b0:	add	r1, r3, r0, lsl #2
   367b4:	ldr	r6, [r1, #4]
   367b8:	sdiv	r1, r4, r6
   367bc:	mls	r1, r1, r6, r4
   367c0:	cmp	r1, #0
   367c4:	beq	367e0 <GetDataSlab+0xee1c>
   367c8:	ldr	r5, [r3, r0, lsl #2]
   367cc:	ldr	r3, [sl, r0, lsl #2]
   367d0:	sub	r1, r6, r1
   367d4:	mla	r1, r3, r5, r1
   367d8:	add	r4, r1, r4
   367dc:	b	367fc <GetDataSlab+0xee38>
   367e0:	ldr	r1, [sl, r0, lsl #2]
   367e4:	cmp	r1, #0
   367e8:	beq	36800 <GetDataSlab+0xee3c>
   367ec:	sub	r3, fp, #176	; 0xb0
   367f0:	ldr	r3, [r3, r0, lsl #2]
   367f4:	mla	r4, r3, r1, r4
   367f8:	mul	r1, r3, r1
   367fc:	add	ip, ip, r1, lsl #3
   36800:	ldr	r1, [fp, #24]
   36804:	add	r6, r0, #1
   36808:	add	r0, r0, #2
   3680c:	cmp	r0, r1
   36810:	blt	36784 <GetDataSlab+0xedc0>
   36814:	b	36828 <GetDataSlab+0xee64>
   36818:	ldr	r1, [sp, #48]	; 0x30
   3681c:	ldr	r0, [r1, r0, lsl #2]
   36820:	add	ip, ip, r0, lsl #3
   36824:	add	r4, r0, r4
   36828:	ldr	r1, [sp, #56]	; 0x38
   3682c:	add	lr, r2, lr
   36830:	mov	r0, #0
   36834:	cmp	lr, r1
   36838:	blt	366fc <GetDataSlab+0xed38>
   3683c:	b	47ffc <GetDataSlab+0x20638>
   36840:	ldr	r5, [r3]
   36844:	mov	r3, #0
   36848:	sub	r8, fp, #176	; 0xb0
   3684c:	str	r6, [sp, #40]	; 0x28
   36850:	sub	r0, r5, #1
   36854:	str	r0, [fp, #-96]	; 0xffffffa0
   36858:	ldr	r0, [fp, #8]
   3685c:	ldr	r0, [r0]
   36860:	str	r0, [fp, #-176]	; 0xffffff50
   36864:	str	r0, [sp, #28]
   36868:	ldr	r0, [fp, #24]
   3686c:	ldr	r1, [sl]
   36870:	sub	sl, fp, #96	; 0x60
   36874:	cmp	r0, #2
   36878:	mov	r0, r1
   3687c:	str	r1, [sp, #56]	; 0x38
   36880:	blt	369e8 <GetDataSlab+0xf024>
   36884:	ldr	r0, [fp, #8]
   36888:	ldr	r6, [sp, #28]
   3688c:	mov	lr, #1
   36890:	mvn	ip, #15
   36894:	mov	r3, #0
   36898:	str	r1, [sp, #56]	; 0x38
   3689c:	sub	r2, r0, #4
   368a0:	sub	r4, r0, #12
   368a4:	mov	r0, #0
   368a8:	mov	r7, r6
   368ac:	str	r0, [sp, #52]	; 0x34
   368b0:	mov	r0, r1
   368b4:	ldr	r0, [fp, #16]
   368b8:	str	r7, [sp, #44]	; 0x2c
   368bc:	str	r4, [sp, #36]	; 0x24
   368c0:	ldr	r0, [r0, lr, lsl #2]
   368c4:	str	r6, [r8, lr, lsl #2]
   368c8:	sub	r9, r0, #1
   368cc:	ldr	r0, [fp, #8]
   368d0:	str	r9, [sl, lr, lsl #2]
   368d4:	ldr	sl, [sp, #52]	; 0x34
   368d8:	ldr	r0, [r0, lr, lsl #2]
   368dc:	add	sl, sl, #1
   368e0:	cmp	sl, #4
   368e4:	str	sl, [sp, #52]	; 0x34
   368e8:	str	r0, [sp, #32]
   368ec:	bcs	368fc <GetDataSlab+0xef38>
   368f0:	mov	r7, r0
   368f4:	mov	r0, lr
   368f8:	b	36980 <GetDataSlab+0xefbc>
   368fc:	vmov.i32	q9, #1	; 0x00000001
   36900:	vmov.i32	q10, #1	; 0x00000001
   36904:	vmov.i32	q8, #1	; 0x00000001
   36908:	bic	r7, sl, #3
   3690c:	vmov.32	d23[1], r0
   36910:	bic	r8, lr, #3
   36914:	vmov.32	d18[0], r6
   36918:	vmov.32	d20[0], r9
   3691c:	sub	r0, lr, r7
   36920:	mov	r6, r4
   36924:	vorr	d16, d18, d18
   36928:	vmov.i32	q9, #1	; 0x00000001
   3692c:	vorr	d18, d20, d20
   36930:	vld1.32	{d20-d21}, [r6], ip
   36934:	subs	r8, r8, #4
   36938:	vrev64.32	q12, q10
   3693c:	vext.8	q12, q12, q12, #8
   36940:	vext.8	q11, q11, q12, #12
   36944:	vmul.i32	q9, q9, q12
   36948:	vmul.i32	q8, q11, q8
   3694c:	vorr	q11, q12, q12
   36950:	bne	36930 <GetDataSlab+0xef6c>
   36954:	vext.8	q11, q9, q8, #8
   36958:	vext.8	q12, q8, q8, #8
   3695c:	cmp	sl, r7
   36960:	vmul.i32	q0, q9, q11
   36964:	vmul.i32	q1, q8, q12
   36968:	vmul.i32	q8, q0, d0[1]
   3696c:	vmul.i32	q9, q1, d2[1]
   36970:	vmov.32	r9, d16[0]
   36974:	vmov.32	r6, d18[0]
   36978:	beq	36994 <GetDataSlab+0xefd0>
   3697c:	vmov.32	r7, d20[0]
   36980:	mul	r6, r7, r6
   36984:	ldr	r7, [r2, r0, lsl #2]
   36988:	subs	r0, r0, #1
   3698c:	mul	r9, r9, r7
   36990:	bne	36980 <GetDataSlab+0xefbc>
   36994:	ldr	r0, [fp, #12]
   36998:	sub	r8, fp, #176	; 0xb0
   3699c:	sub	sl, fp, #96	; 0x60
   369a0:	ldr	r4, [sp, #44]	; 0x2c
   369a4:	mov	r7, r6
   369a8:	str	r6, [r8, lr, lsl #2]
   369ac:	str	r9, [sl, lr, lsl #2]
   369b0:	ldr	r6, [sp, #32]
   369b4:	ldr	r0, [r0, lr, lsl #2]
   369b8:	mla	r3, r0, r4, r3
   369bc:	ldr	r0, [fp, #20]
   369c0:	ldr	r4, [sp, #56]	; 0x38
   369c4:	ldr	r0, [r0, lr, lsl #2]
   369c8:	add	lr, lr, #1
   369cc:	mul	r4, r0, r4
   369d0:	ldr	r0, [fp, #24]
   369d4:	str	r4, [sp, #56]	; 0x38
   369d8:	ldr	r4, [sp, #36]	; 0x24
   369dc:	cmp	lr, r0
   369e0:	add	r4, r4, #4
   369e4:	bne	368b4 <GetDataSlab+0xeef0>
   369e8:	ldr	r0, [sp, #48]	; 0x30
   369ec:	cmp	r5, #1
   369f0:	add	sl, r0, r3, lsl #3
   369f4:	bne	435dc <GetDataSlab+0x1bc18>
   369f8:	ldr	r0, [sp, #56]	; 0x38
   369fc:	cmp	r0, #1
   36a00:	blt	43760 <GetDataSlab+0x1bd9c>
   36a04:	ldr	r8, [fp, #12]
   36a08:	ldr	r0, [fp, #20]
   36a0c:	mov	ip, #0
   36a10:	ldr	lr, [r8], #4
   36a14:	add	r9, r0, #4
   36a18:	sub	r0, fp, #136	; 0x88
   36a1c:	orr	r2, r0, #4
   36a20:	sub	r0, fp, #96	; 0x60
   36a24:	orr	r0, r0, #4
   36a28:	str	r0, [sp, #52]	; 0x34
   36a2c:	add	r6, lr, r3
   36a30:	add	r3, sl, lr, lsl #3
   36a34:	cmp	r1, #1
   36a38:	blt	36a7c <GetDataSlab+0xf0b8>
   36a3c:	ldr	r0, [sp, #60]	; 0x3c
   36a40:	ldr	r7, [fp, #20]
   36a44:	mov	r4, r3
   36a48:	add	r5, r0, ip, lsl #2
   36a4c:	mov	r0, #0
   36a50:	ldr	r1, [r4], #8
   36a54:	str	r1, [r5, r0, lsl #2]
   36a58:	add	r0, r0, #1
   36a5c:	ldr	r1, [r7]
   36a60:	cmp	r0, r1
   36a64:	blt	36a50 <GetDataSlab+0xf08c>
   36a68:	ldr	r0, [fp, #12]
   36a6c:	ldr	lr, [r0]
   36a70:	ldr	r0, [fp, #8]
   36a74:	ldr	r0, [r0]
   36a78:	str	r0, [sp, #28]
   36a7c:	ldr	r0, [sp, #28]
   36a80:	sub	r0, r0, lr
   36a84:	add	sl, r3, r0, lsl #3
   36a88:	add	r3, r6, r0
   36a8c:	ldr	r0, [fp, #24]
   36a90:	cmp	r0, #2
   36a94:	blt	36b44 <GetDataSlab+0xf180>
   36a98:	mov	r0, #0
   36a9c:	mov	r5, r0
   36aa0:	ldr	r0, [r2, r0, lsl #2]
   36aa4:	add	r0, r0, #1
   36aa8:	str	r0, [r2, r5, lsl #2]
   36aac:	ldr	r7, [r9, r5, lsl #2]
   36ab0:	sdiv	r6, r0, r7
   36ab4:	mls	r0, r6, r7, r0
   36ab8:	cmp	r0, #0
   36abc:	bne	36b34 <GetDataSlab+0xf170>
   36ac0:	mov	r0, #0
   36ac4:	sub	r4, fp, #176	; 0xb0
   36ac8:	str	r0, [r2, r5, lsl #2]
   36acc:	add	r0, r4, r5, lsl #2
   36ad0:	ldr	r0, [r0, #4]
   36ad4:	sdiv	r6, r3, r0
   36ad8:	mls	r7, r6, r0, r3
   36adc:	cmp	r7, #0
   36ae0:	beq	36afc <GetDataSlab+0xf138>
   36ae4:	ldr	r6, [r4, r5, lsl #2]
   36ae8:	ldr	r4, [r8, r5, lsl #2]
   36aec:	sub	r0, r0, r7
   36af0:	mla	r0, r4, r6, r0
   36af4:	add	r3, r0, r3
   36af8:	b	36b18 <GetDataSlab+0xf154>
   36afc:	ldr	r0, [r8, r5, lsl #2]
   36b00:	cmp	r0, #0
   36b04:	beq	36b1c <GetDataSlab+0xf158>
   36b08:	sub	r4, fp, #176	; 0xb0
   36b0c:	ldr	r4, [r4, r5, lsl #2]
   36b10:	mla	r3, r4, r0, r3
   36b14:	mul	r0, r4, r0
   36b18:	add	sl, sl, r0, lsl #3
   36b1c:	add	r0, r5, #1
   36b20:	add	r4, r5, #2
   36b24:	ldr	r5, [fp, #24]
   36b28:	cmp	r4, r5
   36b2c:	blt	36a9c <GetDataSlab+0xf0d8>
   36b30:	b	36b44 <GetDataSlab+0xf180>
   36b34:	ldr	r0, [sp, #52]	; 0x34
   36b38:	ldr	r0, [r0, r5, lsl #2]
   36b3c:	add	sl, sl, r0, lsl #3
   36b40:	add	r3, r0, r3
   36b44:	ldr	r0, [sp, #56]	; 0x38
   36b48:	add	ip, r1, ip
   36b4c:	cmp	ip, r0
   36b50:	blt	36a2c <GetDataSlab+0xf068>
   36b54:	b	43760 <GetDataSlab+0x1bd9c>
   36b58:	ldr	r5, [r3]
   36b5c:	ldr	r9, [fp, #8]
   36b60:	ldr	r8, [fp, #12]
   36b64:	mov	r4, #0
   36b68:	sub	r3, fp, #176	; 0xb0
   36b6c:	sub	r0, r5, #1
   36b70:	str	r0, [fp, #-96]	; 0xffffffa0
   36b74:	ldr	r0, [r9]
   36b78:	str	r0, [fp, #-176]	; 0xffffff50
   36b7c:	str	r0, [sp, #52]	; 0x34
   36b80:	ldr	r0, [fp, #24]
   36b84:	ldr	r2, [sl]
   36b88:	sub	sl, fp, #96	; 0x60
   36b8c:	cmp	r0, #2
   36b90:	mov	r0, r2
   36b94:	str	r2, [sp, #56]	; 0x38
   36b98:	blt	36cfc <GetDataSlab+0xf338>
   36b9c:	ldr	r7, [sp, #52]	; 0x34
   36ba0:	sub	r0, r9, #4
   36ba4:	sub	r6, r9, #12
   36ba8:	mov	ip, #1
   36bac:	mov	lr, #0
   36bb0:	mov	r4, #0
   36bb4:	str	r2, [sp, #56]	; 0x38
   36bb8:	mov	r1, r7
   36bbc:	str	r7, [sp, #44]	; 0x2c
   36bc0:	mov	r1, r2
   36bc4:	ldr	r1, [fp, #16]
   36bc8:	add	lr, lr, #1
   36bcc:	str	r6, [sp, #40]	; 0x28
   36bd0:	cmp	lr, #4
   36bd4:	str	lr, [sp, #36]	; 0x24
   36bd8:	ldr	r1, [r1, ip, lsl #2]
   36bdc:	str	r7, [r3, ip, lsl #2]
   36be0:	sub	r8, r1, #1
   36be4:	str	r8, [sl, ip, lsl #2]
   36be8:	ldr	r1, [r9, ip, lsl #2]
   36bec:	str	r1, [sp, #32]
   36bf0:	bcs	36bfc <GetDataSlab+0xf238>
   36bf4:	mov	r3, ip
   36bf8:	b	36c90 <GetDataSlab+0xf2cc>
   36bfc:	vmov.i32	q9, #1	; 0x00000001
   36c00:	vmov.i32	q10, #1	; 0x00000001
   36c04:	vmov.i32	q8, #1	; 0x00000001
   36c08:	bic	sl, lr, #3
   36c0c:	vmov.32	d23[1], r1
   36c10:	bic	r9, ip, #3
   36c14:	mov	r1, r6
   36c18:	vmov.32	d18[0], r7
   36c1c:	vmov.32	d20[0], r8
   36c20:	sub	r3, ip, sl
   36c24:	mvn	r7, #15
   36c28:	vorr	d16, d18, d18
   36c2c:	vmov.i32	q9, #1	; 0x00000001
   36c30:	vorr	d18, d20, d20
   36c34:	vld1.32	{d20-d21}, [r1], r7
   36c38:	subs	r9, r9, #4
   36c3c:	vrev64.32	q12, q10
   36c40:	vext.8	q12, q12, q12, #8
   36c44:	vext.8	q11, q11, q12, #12
   36c48:	vmul.i32	q9, q9, q12
   36c4c:	vmul.i32	q8, q11, q8
   36c50:	vorr	q11, q12, q12
   36c54:	bne	36c34 <GetDataSlab+0xf270>
   36c58:	vext.8	q11, q9, q8, #8
   36c5c:	vext.8	q12, q8, q8, #8
   36c60:	cmp	lr, sl
   36c64:	vmul.i32	q0, q9, q11
   36c68:	vmul.i32	q1, q8, q12
   36c6c:	vmul.i32	q8, q0, d0[1]
   36c70:	vmul.i32	q9, q1, d2[1]
   36c74:	vmov.32	r8, d16[0]
   36c78:	vmov.32	r7, d18[0]
   36c7c:	bne	36c88 <GetDataSlab+0xf2c4>
   36c80:	ldr	r9, [fp, #8]
   36c84:	b	36ca4 <GetDataSlab+0xf2e0>
   36c88:	ldr	r9, [fp, #8]
   36c8c:	vmov.32	r1, d20[0]
   36c90:	mul	r7, r1, r7
   36c94:	ldr	r1, [r0, r3, lsl #2]
   36c98:	subs	r3, r3, #1
   36c9c:	mul	r8, r8, r1
   36ca0:	bne	36c90 <GetDataSlab+0xf2cc>
   36ca4:	sub	sl, fp, #96	; 0x60
   36ca8:	sub	r3, fp, #176	; 0xb0
   36cac:	ldr	r6, [sp, #44]	; 0x2c
   36cb0:	ldr	lr, [sp, #56]	; 0x38
   36cb4:	str	r7, [sp, #44]	; 0x2c
   36cb8:	str	r8, [sl, ip, lsl #2]
   36cbc:	ldr	r8, [fp, #12]
   36cc0:	str	r7, [r3, ip, lsl #2]
   36cc4:	ldr	r7, [sp, #32]
   36cc8:	ldr	r1, [r8, ip, lsl #2]
   36ccc:	mla	r4, r1, r6, r4
   36cd0:	ldr	r1, [fp, #20]
   36cd4:	ldr	r6, [sp, #40]	; 0x28
   36cd8:	ldr	r1, [r1, ip, lsl #2]
   36cdc:	add	ip, ip, #1
   36ce0:	add	r6, r6, #4
   36ce4:	mul	lr, r1, lr
   36ce8:	ldr	r1, [fp, #24]
   36cec:	str	lr, [sp, #56]	; 0x38
   36cf0:	ldr	lr, [sp, #36]	; 0x24
   36cf4:	cmp	ip, r1
   36cf8:	bne	36bc4 <GetDataSlab+0xf200>
   36cfc:	ldr	r0, [sp, #48]	; 0x30
   36d00:	cmp	r5, #1
   36d04:	add	sl, r0, r4
   36d08:	bne	43ab4 <GetDataSlab+0x1c0f0>
   36d0c:	ldr	r0, [sp, #56]	; 0x38
   36d10:	cmp	r0, #1
   36d14:	blt	47ff8 <GetDataSlab+0x20634>
   36d18:	ldr	r0, [fp, #20]
   36d1c:	mov	r9, r8
   36d20:	mov	r8, #0
   36d24:	add	ip, r0, #4
   36d28:	sub	r0, fp, #136	; 0x88
   36d2c:	orr	r7, r0, #4
   36d30:	sub	r0, fp, #96	; 0x60
   36d34:	orr	r0, r0, #4
   36d38:	str	r0, [sp, #44]	; 0x2c
   36d3c:	ldr	r0, [r9], #4
   36d40:	str	r0, [sp, #48]	; 0x30
   36d44:	ldr	r6, [sp, #48]	; 0x30
   36d48:	ldr	r1, [sp, #52]	; 0x34
   36d4c:	cmp	r2, #1
   36d50:	add	r0, r6, r4
   36d54:	add	r3, sl, r6
   36d58:	blt	36d94 <GetDataSlab+0xf3d0>
   36d5c:	ldr	r1, [sp, #60]	; 0x3c
   36d60:	ldr	r6, [fp, #20]
   36d64:	mov	r4, #0
   36d68:	add	r1, r1, r8, lsl #2
   36d6c:	ldrb	r2, [r3, r4]
   36d70:	str	r2, [r1, r4, lsl #2]
   36d74:	add	r4, r4, #1
   36d78:	ldr	r2, [r6]
   36d7c:	cmp	r4, r2
   36d80:	blt	36d6c <GetDataSlab+0xf3a8>
   36d84:	ldr	r1, [fp, #12]
   36d88:	ldr	r6, [r1]
   36d8c:	ldr	r1, [fp, #8]
   36d90:	ldr	r1, [r1]
   36d94:	str	r1, [sp, #52]	; 0x34
   36d98:	sub	r1, r1, r6
   36d9c:	str	r6, [sp, #48]	; 0x30
   36da0:	add	r4, r0, r1
   36da4:	ldr	r0, [fp, #24]
   36da8:	add	sl, r3, r1
   36dac:	cmp	r0, #2
   36db0:	blt	36e58 <GetDataSlab+0xf494>
   36db4:	mov	r1, #0
   36db8:	mov	r0, r1
   36dbc:	ldr	r1, [r7, r1, lsl #2]
   36dc0:	add	r1, r1, #1
   36dc4:	str	r1, [r7, r0, lsl #2]
   36dc8:	ldr	r6, [ip, r0, lsl #2]
   36dcc:	sdiv	lr, r1, r6
   36dd0:	mls	r1, lr, r6, r1
   36dd4:	cmp	r1, #0
   36dd8:	bne	36e48 <GetDataSlab+0xf484>
   36ddc:	mov	r1, #0
   36de0:	sub	r3, fp, #176	; 0xb0
   36de4:	str	r1, [r7, r0, lsl #2]
   36de8:	add	r1, r3, r0, lsl #2
   36dec:	ldr	r1, [r1, #4]
   36df0:	sdiv	r6, r4, r1
   36df4:	mls	r6, r6, r1, r4
   36df8:	cmp	r6, #0
   36dfc:	beq	36e1c <GetDataSlab+0xf458>
   36e00:	ldr	r5, [r3, r0, lsl #2]
   36e04:	ldr	r3, [r9, r0, lsl #2]
   36e08:	sub	r1, r1, r6
   36e0c:	mla	r1, r3, r5, r1
   36e10:	add	r4, r1, r4
   36e14:	add	sl, sl, r1
   36e18:	b	36e30 <GetDataSlab+0xf46c>
   36e1c:	ldr	r1, [r9, r0, lsl #2]
   36e20:	cmp	r1, #0
   36e24:	ldrne	r3, [r3, r0, lsl #2]
   36e28:	mlane	r4, r3, r1, r4
   36e2c:	mlane	sl, r3, r1, sl
   36e30:	ldr	r3, [fp, #24]
   36e34:	add	r1, r0, #1
   36e38:	add	r0, r0, #2
   36e3c:	cmp	r0, r3
   36e40:	blt	36db8 <GetDataSlab+0xf3f4>
   36e44:	b	36e58 <GetDataSlab+0xf494>
   36e48:	ldr	r1, [sp, #44]	; 0x2c
   36e4c:	ldr	r0, [r1, r0, lsl #2]
   36e50:	add	sl, sl, r0
   36e54:	add	r4, r0, r4
   36e58:	ldr	r1, [sp, #56]	; 0x38
   36e5c:	add	r8, r2, r8
   36e60:	mov	r0, #0
   36e64:	cmp	r8, r1
   36e68:	blt	36d44 <GetDataSlab+0xf380>
   36e6c:	b	47ffc <GetDataSlab+0x20638>
   36e70:	ldr	r5, [r3]
   36e74:	ldr	r9, [fp, #8]
   36e78:	ldr	r8, [fp, #12]
   36e7c:	mov	r4, #0
   36e80:	sub	r3, fp, #176	; 0xb0
   36e84:	sub	r0, r5, #1
   36e88:	str	r0, [fp, #-96]	; 0xffffffa0
   36e8c:	ldr	r0, [r9]
   36e90:	str	r0, [fp, #-176]	; 0xffffff50
   36e94:	str	r0, [sp, #52]	; 0x34
   36e98:	ldr	r0, [fp, #24]
   36e9c:	ldr	r2, [sl]
   36ea0:	sub	sl, fp, #96	; 0x60
   36ea4:	cmp	r0, #2
   36ea8:	mov	r0, r2
   36eac:	str	r2, [sp, #56]	; 0x38
   36eb0:	blt	37014 <GetDataSlab+0xf650>
   36eb4:	ldr	r7, [sp, #52]	; 0x34
   36eb8:	sub	r0, r9, #4
   36ebc:	sub	r6, r9, #12
   36ec0:	mov	ip, #1
   36ec4:	mov	lr, #0
   36ec8:	mov	r4, #0
   36ecc:	str	r2, [sp, #56]	; 0x38
   36ed0:	mov	r1, r7
   36ed4:	str	r7, [sp, #44]	; 0x2c
   36ed8:	mov	r1, r2
   36edc:	ldr	r1, [fp, #16]
   36ee0:	add	lr, lr, #1
   36ee4:	str	r6, [sp, #40]	; 0x28
   36ee8:	cmp	lr, #4
   36eec:	str	lr, [sp, #36]	; 0x24
   36ef0:	ldr	r1, [r1, ip, lsl #2]
   36ef4:	str	r7, [r3, ip, lsl #2]
   36ef8:	sub	r8, r1, #1
   36efc:	str	r8, [sl, ip, lsl #2]
   36f00:	ldr	r1, [r9, ip, lsl #2]
   36f04:	str	r1, [sp, #32]
   36f08:	bcs	36f14 <GetDataSlab+0xf550>
   36f0c:	mov	r3, ip
   36f10:	b	36fa8 <GetDataSlab+0xf5e4>
   36f14:	vmov.i32	q9, #1	; 0x00000001
   36f18:	vmov.i32	q10, #1	; 0x00000001
   36f1c:	vmov.i32	q8, #1	; 0x00000001
   36f20:	bic	sl, lr, #3
   36f24:	vmov.32	d23[1], r1
   36f28:	bic	r9, ip, #3
   36f2c:	mov	r1, r6
   36f30:	vmov.32	d18[0], r7
   36f34:	vmov.32	d20[0], r8
   36f38:	sub	r3, ip, sl
   36f3c:	mvn	r7, #15
   36f40:	vorr	d16, d18, d18
   36f44:	vmov.i32	q9, #1	; 0x00000001
   36f48:	vorr	d18, d20, d20
   36f4c:	vld1.32	{d20-d21}, [r1], r7
   36f50:	subs	r9, r9, #4
   36f54:	vrev64.32	q12, q10
   36f58:	vext.8	q12, q12, q12, #8
   36f5c:	vext.8	q11, q11, q12, #12
   36f60:	vmul.i32	q9, q9, q12
   36f64:	vmul.i32	q8, q11, q8
   36f68:	vorr	q11, q12, q12
   36f6c:	bne	36f4c <GetDataSlab+0xf588>
   36f70:	vext.8	q11, q9, q8, #8
   36f74:	vext.8	q12, q8, q8, #8
   36f78:	cmp	lr, sl
   36f7c:	vmul.i32	q0, q9, q11
   36f80:	vmul.i32	q1, q8, q12
   36f84:	vmul.i32	q8, q0, d0[1]
   36f88:	vmul.i32	q9, q1, d2[1]
   36f8c:	vmov.32	r8, d16[0]
   36f90:	vmov.32	r7, d18[0]
   36f94:	bne	36fa0 <GetDataSlab+0xf5dc>
   36f98:	ldr	r9, [fp, #8]
   36f9c:	b	36fbc <GetDataSlab+0xf5f8>
   36fa0:	ldr	r9, [fp, #8]
   36fa4:	vmov.32	r1, d20[0]
   36fa8:	mul	r7, r1, r7
   36fac:	ldr	r1, [r0, r3, lsl #2]
   36fb0:	subs	r3, r3, #1
   36fb4:	mul	r8, r8, r1
   36fb8:	bne	36fa8 <GetDataSlab+0xf5e4>
   36fbc:	sub	sl, fp, #96	; 0x60
   36fc0:	sub	r3, fp, #176	; 0xb0
   36fc4:	ldr	r6, [sp, #44]	; 0x2c
   36fc8:	ldr	lr, [sp, #56]	; 0x38
   36fcc:	str	r7, [sp, #44]	; 0x2c
   36fd0:	str	r8, [sl, ip, lsl #2]
   36fd4:	ldr	r8, [fp, #12]
   36fd8:	str	r7, [r3, ip, lsl #2]
   36fdc:	ldr	r7, [sp, #32]
   36fe0:	ldr	r1, [r8, ip, lsl #2]
   36fe4:	mla	r4, r1, r6, r4
   36fe8:	ldr	r1, [fp, #20]
   36fec:	ldr	r6, [sp, #40]	; 0x28
   36ff0:	ldr	r1, [r1, ip, lsl #2]
   36ff4:	add	ip, ip, #1
   36ff8:	add	r6, r6, #4
   36ffc:	mul	lr, r1, lr
   37000:	ldr	r1, [fp, #24]
   37004:	str	lr, [sp, #56]	; 0x38
   37008:	ldr	lr, [sp, #36]	; 0x24
   3700c:	cmp	ip, r1
   37010:	bne	36edc <GetDataSlab+0xf518>
   37014:	ldr	r0, [sp, #48]	; 0x30
   37018:	cmp	r5, #1
   3701c:	add	sl, r0, r4, lsl #1
   37020:	bne	43c4c <GetDataSlab+0x1c288>
   37024:	ldr	r0, [sp, #56]	; 0x38
   37028:	cmp	r0, #1
   3702c:	blt	47ff8 <GetDataSlab+0x20634>
   37030:	ldr	r0, [fp, #20]
   37034:	mov	r9, r8
   37038:	mov	lr, #0
   3703c:	add	ip, r0, #4
   37040:	sub	r0, fp, #136	; 0x88
   37044:	orr	r7, r0, #4
   37048:	sub	r0, fp, #96	; 0x60
   3704c:	orr	r0, r0, #4
   37050:	str	r0, [sp, #44]	; 0x2c
   37054:	ldr	r0, [r9], #4
   37058:	str	r0, [sp, #48]	; 0x30
   3705c:	ldr	r3, [sp, #48]	; 0x30
   37060:	ldr	r1, [sp, #52]	; 0x34
   37064:	cmp	r2, #1
   37068:	add	r8, r3, r4
   3706c:	add	r0, sl, r3, lsl #1
   37070:	blt	370b0 <GetDataSlab+0xf6ec>
   37074:	ldr	r1, [sp, #60]	; 0x3c
   37078:	ldr	r5, [fp, #20]
   3707c:	mov	r3, r0
   37080:	add	r4, r1, lr, lsl #2
   37084:	mov	r1, #0
   37088:	ldrsh	r2, [r3], #2
   3708c:	str	r2, [r4, r1, lsl #2]
   37090:	add	r1, r1, #1
   37094:	ldr	r2, [r5]
   37098:	cmp	r1, r2
   3709c:	blt	37088 <GetDataSlab+0xf6c4>
   370a0:	ldr	r1, [fp, #12]
   370a4:	ldr	r3, [r1]
   370a8:	ldr	r1, [fp, #8]
   370ac:	ldr	r1, [r1]
   370b0:	str	r1, [sp, #52]	; 0x34
   370b4:	sub	r1, r1, r3
   370b8:	str	r3, [sp, #48]	; 0x30
   370bc:	add	sl, r0, r1, lsl #1
   370c0:	ldr	r0, [fp, #24]
   370c4:	add	r4, r8, r1
   370c8:	cmp	r0, #2
   370cc:	blt	3717c <GetDataSlab+0xf7b8>
   370d0:	mov	r1, #0
   370d4:	mov	r8, #0
   370d8:	mov	r0, r1
   370dc:	ldr	r1, [r7, r1, lsl #2]
   370e0:	add	r1, r1, #1
   370e4:	str	r1, [r7, r0, lsl #2]
   370e8:	ldr	r6, [ip, r0, lsl #2]
   370ec:	sdiv	r5, r1, r6
   370f0:	mls	r1, r5, r6, r1
   370f4:	cmp	r1, #0
   370f8:	bne	3716c <GetDataSlab+0xf7a8>
   370fc:	sub	r3, fp, #176	; 0xb0
   37100:	str	r8, [r7, r0, lsl #2]
   37104:	add	r1, r3, r0, lsl #2
   37108:	ldr	r1, [r1, #4]
   3710c:	sdiv	r5, r4, r1
   37110:	mls	r6, r5, r1, r4
   37114:	cmp	r6, #0
   37118:	beq	37134 <GetDataSlab+0xf770>
   3711c:	ldr	r5, [r3, r0, lsl #2]
   37120:	ldr	r3, [r9, r0, lsl #2]
   37124:	sub	r1, r1, r6
   37128:	mla	r1, r3, r5, r1
   3712c:	add	r4, r1, r4
   37130:	b	37150 <GetDataSlab+0xf78c>
   37134:	ldr	r1, [r9, r0, lsl #2]
   37138:	cmp	r1, #0
   3713c:	beq	37154 <GetDataSlab+0xf790>
   37140:	sub	r3, fp, #176	; 0xb0
   37144:	ldr	r3, [r3, r0, lsl #2]
   37148:	mla	r4, r3, r1, r4
   3714c:	mul	r1, r3, r1
   37150:	add	sl, sl, r1, lsl #1
   37154:	ldr	r3, [fp, #24]
   37158:	add	r1, r0, #1
   3715c:	add	r0, r0, #2
   37160:	cmp	r0, r3
   37164:	blt	370d8 <GetDataSlab+0xf714>
   37168:	b	3717c <GetDataSlab+0xf7b8>
   3716c:	ldr	r1, [sp, #44]	; 0x2c
   37170:	ldr	r0, [r1, r0, lsl #2]
   37174:	add	sl, sl, r0, lsl #1
   37178:	add	r4, r0, r4
   3717c:	ldr	r1, [sp, #56]	; 0x38
   37180:	add	lr, r2, lr
   37184:	mov	r0, #0
   37188:	cmp	lr, r1
   3718c:	blt	3705c <GetDataSlab+0xf698>
   37190:	b	47ffc <GetDataSlab+0x20638>
   37194:	ldr	r5, [r3]
   37198:	ldr	r9, [fp, #8]
   3719c:	ldr	r8, [fp, #12]
   371a0:	mov	r4, #0
   371a4:	sub	r3, fp, #176	; 0xb0
   371a8:	sub	r0, r5, #1
   371ac:	str	r0, [fp, #-96]	; 0xffffffa0
   371b0:	ldr	r0, [r9]
   371b4:	str	r0, [fp, #-176]	; 0xffffff50
   371b8:	str	r0, [sp, #52]	; 0x34
   371bc:	ldr	r0, [fp, #24]
   371c0:	ldr	r2, [sl]
   371c4:	sub	sl, fp, #96	; 0x60
   371c8:	cmp	r0, #2
   371cc:	mov	r0, r2
   371d0:	str	r2, [sp, #56]	; 0x38
   371d4:	blt	37338 <GetDataSlab+0xf974>
   371d8:	ldr	r7, [sp, #52]	; 0x34
   371dc:	sub	r0, r9, #4
   371e0:	sub	r6, r9, #12
   371e4:	mov	ip, #1
   371e8:	mov	lr, #0
   371ec:	mov	r4, #0
   371f0:	str	r2, [sp, #56]	; 0x38
   371f4:	mov	r1, r7
   371f8:	str	r7, [sp, #44]	; 0x2c
   371fc:	mov	r1, r2
   37200:	ldr	r1, [fp, #16]
   37204:	add	lr, lr, #1
   37208:	str	r6, [sp, #40]	; 0x28
   3720c:	cmp	lr, #4
   37210:	str	lr, [sp, #36]	; 0x24
   37214:	ldr	r1, [r1, ip, lsl #2]
   37218:	str	r7, [r3, ip, lsl #2]
   3721c:	sub	r8, r1, #1
   37220:	str	r8, [sl, ip, lsl #2]
   37224:	ldr	r1, [r9, ip, lsl #2]
   37228:	str	r1, [sp, #32]
   3722c:	bcs	37238 <GetDataSlab+0xf874>
   37230:	mov	r3, ip
   37234:	b	372cc <GetDataSlab+0xf908>
   37238:	vmov.i32	q9, #1	; 0x00000001
   3723c:	vmov.i32	q10, #1	; 0x00000001
   37240:	vmov.i32	q8, #1	; 0x00000001
   37244:	bic	sl, lr, #3
   37248:	vmov.32	d23[1], r1
   3724c:	bic	r9, ip, #3
   37250:	mov	r1, r6
   37254:	vmov.32	d18[0], r7
   37258:	vmov.32	d20[0], r8
   3725c:	sub	r3, ip, sl
   37260:	mvn	r7, #15
   37264:	vorr	d16, d18, d18
   37268:	vmov.i32	q9, #1	; 0x00000001
   3726c:	vorr	d18, d20, d20
   37270:	vld1.32	{d20-d21}, [r1], r7
   37274:	subs	r9, r9, #4
   37278:	vrev64.32	q12, q10
   3727c:	vext.8	q12, q12, q12, #8
   37280:	vext.8	q11, q11, q12, #12
   37284:	vmul.i32	q9, q9, q12
   37288:	vmul.i32	q8, q11, q8
   3728c:	vorr	q11, q12, q12
   37290:	bne	37270 <GetDataSlab+0xf8ac>
   37294:	vext.8	q11, q9, q8, #8
   37298:	vext.8	q12, q8, q8, #8
   3729c:	cmp	lr, sl
   372a0:	vmul.i32	q0, q9, q11
   372a4:	vmul.i32	q1, q8, q12
   372a8:	vmul.i32	q8, q0, d0[1]
   372ac:	vmul.i32	q9, q1, d2[1]
   372b0:	vmov.32	r8, d16[0]
   372b4:	vmov.32	r7, d18[0]
   372b8:	bne	372c4 <GetDataSlab+0xf900>
   372bc:	ldr	r9, [fp, #8]
   372c0:	b	372e0 <GetDataSlab+0xf91c>
   372c4:	ldr	r9, [fp, #8]
   372c8:	vmov.32	r1, d20[0]
   372cc:	mul	r7, r1, r7
   372d0:	ldr	r1, [r0, r3, lsl #2]
   372d4:	subs	r3, r3, #1
   372d8:	mul	r8, r8, r1
   372dc:	bne	372cc <GetDataSlab+0xf908>
   372e0:	sub	sl, fp, #96	; 0x60
   372e4:	sub	r3, fp, #176	; 0xb0
   372e8:	ldr	r6, [sp, #44]	; 0x2c
   372ec:	ldr	lr, [sp, #56]	; 0x38
   372f0:	str	r7, [sp, #44]	; 0x2c
   372f4:	str	r8, [sl, ip, lsl #2]
   372f8:	ldr	r8, [fp, #12]
   372fc:	str	r7, [r3, ip, lsl #2]
   37300:	ldr	r7, [sp, #32]
   37304:	ldr	r1, [r8, ip, lsl #2]
   37308:	mla	r4, r1, r6, r4
   3730c:	ldr	r1, [fp, #20]
   37310:	ldr	r6, [sp, #40]	; 0x28
   37314:	ldr	r1, [r1, ip, lsl #2]
   37318:	add	ip, ip, #1
   3731c:	add	r6, r6, #4
   37320:	mul	lr, r1, lr
   37324:	ldr	r1, [fp, #24]
   37328:	str	lr, [sp, #56]	; 0x38
   3732c:	ldr	lr, [sp, #36]	; 0x24
   37330:	cmp	ip, r1
   37334:	bne	37200 <GetDataSlab+0xf83c>
   37338:	ldr	r0, [sp, #48]	; 0x30
   3733c:	cmp	r5, #1
   37340:	add	sl, r0, r4, lsl #1
   37344:	bne	43de8 <GetDataSlab+0x1c424>
   37348:	ldr	r0, [sp, #56]	; 0x38
   3734c:	cmp	r0, #1
   37350:	blt	47ff8 <GetDataSlab+0x20634>
   37354:	ldr	r0, [fp, #20]
   37358:	mov	r9, r8
   3735c:	mov	lr, #0
   37360:	add	ip, r0, #4
   37364:	sub	r0, fp, #136	; 0x88
   37368:	orr	r7, r0, #4
   3736c:	sub	r0, fp, #96	; 0x60
   37370:	orr	r0, r0, #4
   37374:	str	r0, [sp, #44]	; 0x2c
   37378:	ldr	r0, [r9], #4
   3737c:	str	r0, [sp, #48]	; 0x30
   37380:	ldr	r3, [sp, #48]	; 0x30
   37384:	ldr	r1, [sp, #52]	; 0x34
   37388:	cmp	r2, #1
   3738c:	add	r8, r3, r4
   37390:	add	r0, sl, r3, lsl #1
   37394:	blt	373d4 <GetDataSlab+0xfa10>
   37398:	ldr	r1, [sp, #60]	; 0x3c
   3739c:	ldr	r5, [fp, #20]
   373a0:	mov	r3, r0
   373a4:	add	r4, r1, lr, lsl #2
   373a8:	mov	r1, #0
   373ac:	ldrh	r2, [r3], #2
   373b0:	str	r2, [r4, r1, lsl #2]
   373b4:	add	r1, r1, #1
   373b8:	ldr	r2, [r5]
   373bc:	cmp	r1, r2
   373c0:	blt	373ac <GetDataSlab+0xf9e8>
   373c4:	ldr	r1, [fp, #12]
   373c8:	ldr	r3, [r1]
   373cc:	ldr	r1, [fp, #8]
   373d0:	ldr	r1, [r1]
   373d4:	str	r1, [sp, #52]	; 0x34
   373d8:	sub	r1, r1, r3
   373dc:	str	r3, [sp, #48]	; 0x30
   373e0:	add	sl, r0, r1, lsl #1
   373e4:	ldr	r0, [fp, #24]
   373e8:	add	r4, r8, r1
   373ec:	cmp	r0, #2
   373f0:	blt	374a0 <GetDataSlab+0xfadc>
   373f4:	mov	r1, #0
   373f8:	mov	r8, #0
   373fc:	mov	r0, r1
   37400:	ldr	r1, [r7, r1, lsl #2]
   37404:	add	r1, r1, #1
   37408:	str	r1, [r7, r0, lsl #2]
   3740c:	ldr	r6, [ip, r0, lsl #2]
   37410:	sdiv	r5, r1, r6
   37414:	mls	r1, r5, r6, r1
   37418:	cmp	r1, #0
   3741c:	bne	37490 <GetDataSlab+0xfacc>
   37420:	sub	r3, fp, #176	; 0xb0
   37424:	str	r8, [r7, r0, lsl #2]
   37428:	add	r1, r3, r0, lsl #2
   3742c:	ldr	r1, [r1, #4]
   37430:	sdiv	r5, r4, r1
   37434:	mls	r6, r5, r1, r4
   37438:	cmp	r6, #0
   3743c:	beq	37458 <GetDataSlab+0xfa94>
   37440:	ldr	r5, [r3, r0, lsl #2]
   37444:	ldr	r3, [r9, r0, lsl #2]
   37448:	sub	r1, r1, r6
   3744c:	mla	r1, r3, r5, r1
   37450:	add	r4, r1, r4
   37454:	b	37474 <GetDataSlab+0xfab0>
   37458:	ldr	r1, [r9, r0, lsl #2]
   3745c:	cmp	r1, #0
   37460:	beq	37478 <GetDataSlab+0xfab4>
   37464:	sub	r3, fp, #176	; 0xb0
   37468:	ldr	r3, [r3, r0, lsl #2]
   3746c:	mla	r4, r3, r1, r4
   37470:	mul	r1, r3, r1
   37474:	add	sl, sl, r1, lsl #1
   37478:	ldr	r3, [fp, #24]
   3747c:	add	r1, r0, #1
   37480:	add	r0, r0, #2
   37484:	cmp	r0, r3
   37488:	blt	373fc <GetDataSlab+0xfa38>
   3748c:	b	374a0 <GetDataSlab+0xfadc>
   37490:	ldr	r1, [sp, #44]	; 0x2c
   37494:	ldr	r0, [r1, r0, lsl #2]
   37498:	add	sl, sl, r0, lsl #1
   3749c:	add	r4, r0, r4
   374a0:	ldr	r1, [sp, #56]	; 0x38
   374a4:	add	lr, r2, lr
   374a8:	mov	r0, #0
   374ac:	cmp	lr, r1
   374b0:	blt	37380 <GetDataSlab+0xf9bc>
   374b4:	b	47ffc <GetDataSlab+0x20638>
   374b8:	ldr	r5, [r3]
   374bc:	ldr	r9, [fp, #8]
   374c0:	ldr	r8, [fp, #12]
   374c4:	mov	r4, #0
   374c8:	sub	r3, fp, #176	; 0xb0
   374cc:	sub	r0, r5, #1
   374d0:	str	r0, [fp, #-96]	; 0xffffffa0
   374d4:	ldr	r0, [r9]
   374d8:	str	r0, [fp, #-176]	; 0xffffff50
   374dc:	str	r0, [sp, #52]	; 0x34
   374e0:	ldr	r0, [fp, #24]
   374e4:	ldr	r2, [sl]
   374e8:	sub	sl, fp, #96	; 0x60
   374ec:	cmp	r0, #2
   374f0:	mov	r0, r2
   374f4:	str	r2, [sp, #56]	; 0x38
   374f8:	blt	3765c <GetDataSlab+0xfc98>
   374fc:	ldr	r7, [sp, #52]	; 0x34
   37500:	sub	r0, r9, #4
   37504:	sub	r6, r9, #12
   37508:	mov	ip, #1
   3750c:	mov	lr, #0
   37510:	mov	r4, #0
   37514:	str	r2, [sp, #56]	; 0x38
   37518:	mov	r1, r7
   3751c:	str	r7, [sp, #44]	; 0x2c
   37520:	mov	r1, r2
   37524:	ldr	r1, [fp, #16]
   37528:	add	lr, lr, #1
   3752c:	str	r6, [sp, #40]	; 0x28
   37530:	cmp	lr, #4
   37534:	str	lr, [sp, #36]	; 0x24
   37538:	ldr	r1, [r1, ip, lsl #2]
   3753c:	str	r7, [r3, ip, lsl #2]
   37540:	sub	r8, r1, #1
   37544:	str	r8, [sl, ip, lsl #2]
   37548:	ldr	r1, [r9, ip, lsl #2]
   3754c:	str	r1, [sp, #32]
   37550:	bcs	3755c <GetDataSlab+0xfb98>
   37554:	mov	r3, ip
   37558:	b	375f0 <GetDataSlab+0xfc2c>
   3755c:	vmov.i32	q9, #1	; 0x00000001
   37560:	vmov.i32	q10, #1	; 0x00000001
   37564:	vmov.i32	q8, #1	; 0x00000001
   37568:	bic	sl, lr, #3
   3756c:	vmov.32	d23[1], r1
   37570:	bic	r9, ip, #3
   37574:	mov	r1, r6
   37578:	vmov.32	d18[0], r7
   3757c:	vmov.32	d20[0], r8
   37580:	sub	r3, ip, sl
   37584:	mvn	r7, #15
   37588:	vorr	d16, d18, d18
   3758c:	vmov.i32	q9, #1	; 0x00000001
   37590:	vorr	d18, d20, d20
   37594:	vld1.32	{d20-d21}, [r1], r7
   37598:	subs	r9, r9, #4
   3759c:	vrev64.32	q12, q10
   375a0:	vext.8	q12, q12, q12, #8
   375a4:	vext.8	q11, q11, q12, #12
   375a8:	vmul.i32	q9, q9, q12
   375ac:	vmul.i32	q8, q11, q8
   375b0:	vorr	q11, q12, q12
   375b4:	bne	37594 <GetDataSlab+0xfbd0>
   375b8:	vext.8	q11, q9, q8, #8
   375bc:	vext.8	q12, q8, q8, #8
   375c0:	cmp	lr, sl
   375c4:	vmul.i32	q0, q9, q11
   375c8:	vmul.i32	q1, q8, q12
   375cc:	vmul.i32	q8, q0, d0[1]
   375d0:	vmul.i32	q9, q1, d2[1]
   375d4:	vmov.32	r8, d16[0]
   375d8:	vmov.32	r7, d18[0]
   375dc:	bne	375e8 <GetDataSlab+0xfc24>
   375e0:	ldr	r9, [fp, #8]
   375e4:	b	37604 <GetDataSlab+0xfc40>
   375e8:	ldr	r9, [fp, #8]
   375ec:	vmov.32	r1, d20[0]
   375f0:	mul	r7, r1, r7
   375f4:	ldr	r1, [r0, r3, lsl #2]
   375f8:	subs	r3, r3, #1
   375fc:	mul	r8, r8, r1
   37600:	bne	375f0 <GetDataSlab+0xfc2c>
   37604:	sub	sl, fp, #96	; 0x60
   37608:	sub	r3, fp, #176	; 0xb0
   3760c:	ldr	r6, [sp, #44]	; 0x2c
   37610:	ldr	lr, [sp, #56]	; 0x38
   37614:	str	r7, [sp, #44]	; 0x2c
   37618:	str	r8, [sl, ip, lsl #2]
   3761c:	ldr	r8, [fp, #12]
   37620:	str	r7, [r3, ip, lsl #2]
   37624:	ldr	r7, [sp, #32]
   37628:	ldr	r1, [r8, ip, lsl #2]
   3762c:	mla	r4, r1, r6, r4
   37630:	ldr	r1, [fp, #20]
   37634:	ldr	r6, [sp, #40]	; 0x28
   37638:	ldr	r1, [r1, ip, lsl #2]
   3763c:	add	ip, ip, #1
   37640:	add	r6, r6, #4
   37644:	mul	lr, r1, lr
   37648:	ldr	r1, [fp, #24]
   3764c:	str	lr, [sp, #56]	; 0x38
   37650:	ldr	lr, [sp, #36]	; 0x24
   37654:	cmp	ip, r1
   37658:	bne	37524 <GetDataSlab+0xfb60>
   3765c:	ldr	r0, [sp, #48]	; 0x30
   37660:	cmp	r5, #1
   37664:	add	sl, r0, r4, lsl #2
   37668:	bne	43f84 <GetDataSlab+0x1c5c0>
   3766c:	ldr	r0, [sp, #56]	; 0x38
   37670:	cmp	r0, #1
   37674:	blt	47ff8 <GetDataSlab+0x20634>
   37678:	ldr	r0, [fp, #20]
   3767c:	mov	r9, r8
   37680:	mov	r8, #0
   37684:	add	ip, r0, #4
   37688:	sub	r0, fp, #136	; 0x88
   3768c:	orr	r7, r0, #4
   37690:	sub	r0, fp, #96	; 0x60
   37694:	orr	r0, r0, #4
   37698:	str	r0, [sp, #44]	; 0x2c
   3769c:	ldr	r0, [r9], #4
   376a0:	str	r0, [sp, #48]	; 0x30
   376a4:	ldr	r6, [sp, #48]	; 0x30
   376a8:	ldr	r1, [sp, #52]	; 0x34
   376ac:	cmp	r2, #1
   376b0:	add	r0, r6, r4
   376b4:	add	r3, sl, r6, lsl #2
   376b8:	blt	376f4 <GetDataSlab+0xfd30>
   376bc:	ldr	r1, [sp, #60]	; 0x3c
   376c0:	ldr	r6, [fp, #20]
   376c4:	mov	r4, #0
   376c8:	add	r1, r1, r8, lsl #2
   376cc:	ldr	r2, [r3, r4, lsl #2]
   376d0:	str	r2, [r1, r4, lsl #2]
   376d4:	add	r4, r4, #1
   376d8:	ldr	r2, [r6]
   376dc:	cmp	r4, r2
   376e0:	blt	376cc <GetDataSlab+0xfd08>
   376e4:	ldr	r1, [fp, #12]
   376e8:	ldr	r6, [r1]
   376ec:	ldr	r1, [fp, #8]
   376f0:	ldr	r1, [r1]
   376f4:	str	r1, [sp, #52]	; 0x34
   376f8:	sub	r1, r1, r6
   376fc:	str	r6, [sp, #48]	; 0x30
   37700:	add	r4, r0, r1
   37704:	ldr	r0, [fp, #24]
   37708:	add	sl, r3, r1, lsl #2
   3770c:	cmp	r0, #2
   37710:	blt	377bc <GetDataSlab+0xfdf8>
   37714:	mov	r1, #0
   37718:	mov	r0, r1
   3771c:	ldr	r1, [r7, r1, lsl #2]
   37720:	add	r1, r1, #1
   37724:	str	r1, [r7, r0, lsl #2]
   37728:	ldr	r6, [ip, r0, lsl #2]
   3772c:	sdiv	lr, r1, r6
   37730:	mls	r1, lr, r6, r1
   37734:	cmp	r1, #0
   37738:	bne	377ac <GetDataSlab+0xfde8>
   3773c:	mov	r1, #0
   37740:	sub	r3, fp, #176	; 0xb0
   37744:	str	r1, [r7, r0, lsl #2]
   37748:	add	r1, r3, r0, lsl #2
   3774c:	ldr	r1, [r1, #4]
   37750:	sdiv	r6, r4, r1
   37754:	mls	r6, r6, r1, r4
   37758:	cmp	r6, #0
   3775c:	beq	37778 <GetDataSlab+0xfdb4>
   37760:	ldr	r5, [r3, r0, lsl #2]
   37764:	ldr	r3, [r9, r0, lsl #2]
   37768:	sub	r1, r1, r6
   3776c:	mla	r1, r3, r5, r1
   37770:	add	r4, r1, r4
   37774:	b	37790 <GetDataSlab+0xfdcc>
   37778:	ldr	r1, [r9, r0, lsl #2]
   3777c:	cmp	r1, #0
   37780:	beq	37794 <GetDataSlab+0xfdd0>
   37784:	ldr	r3, [r3, r0, lsl #2]
   37788:	mla	r4, r3, r1, r4
   3778c:	mul	r1, r3, r1
   37790:	add	sl, sl, r1, lsl #2
   37794:	ldr	r3, [fp, #24]
   37798:	add	r1, r0, #1
   3779c:	add	r0, r0, #2
   377a0:	cmp	r0, r3
   377a4:	blt	37718 <GetDataSlab+0xfd54>
   377a8:	b	377bc <GetDataSlab+0xfdf8>
   377ac:	ldr	r1, [sp, #44]	; 0x2c
   377b0:	ldr	r0, [r1, r0, lsl #2]
   377b4:	add	sl, sl, r0, lsl #2
   377b8:	add	r4, r0, r4
   377bc:	ldr	r1, [sp, #56]	; 0x38
   377c0:	add	r8, r2, r8
   377c4:	mov	r0, #0
   377c8:	cmp	r8, r1
   377cc:	blt	376a4 <GetDataSlab+0xfce0>
   377d0:	b	47ffc <GetDataSlab+0x20638>
   377d4:	ldr	r5, [r3]
   377d8:	ldr	r9, [fp, #8]
   377dc:	ldr	r8, [fp, #12]
   377e0:	mov	r4, #0
   377e4:	sub	r3, fp, #176	; 0xb0
   377e8:	sub	r0, r5, #1
   377ec:	str	r0, [fp, #-96]	; 0xffffffa0
   377f0:	ldr	r0, [r9]
   377f4:	str	r0, [fp, #-176]	; 0xffffff50
   377f8:	str	r0, [sp, #52]	; 0x34
   377fc:	ldr	r0, [fp, #24]
   37800:	ldr	r2, [sl]
   37804:	sub	sl, fp, #96	; 0x60
   37808:	cmp	r0, #2
   3780c:	mov	r0, r2
   37810:	str	r2, [sp, #56]	; 0x38
   37814:	blt	37978 <GetDataSlab+0xffb4>
   37818:	ldr	r7, [sp, #52]	; 0x34
   3781c:	sub	r0, r9, #4
   37820:	sub	r6, r9, #12
   37824:	mov	ip, #1
   37828:	mov	lr, #0
   3782c:	mov	r4, #0
   37830:	str	r2, [sp, #56]	; 0x38
   37834:	mov	r1, r7
   37838:	str	r7, [sp, #44]	; 0x2c
   3783c:	mov	r1, r2
   37840:	ldr	r1, [fp, #16]
   37844:	add	lr, lr, #1
   37848:	str	r6, [sp, #40]	; 0x28
   3784c:	cmp	lr, #4
   37850:	str	lr, [sp, #36]	; 0x24
   37854:	ldr	r1, [r1, ip, lsl #2]
   37858:	str	r7, [r3, ip, lsl #2]
   3785c:	sub	r8, r1, #1
   37860:	str	r8, [sl, ip, lsl #2]
   37864:	ldr	r1, [r9, ip, lsl #2]
   37868:	str	r1, [sp, #32]
   3786c:	bcs	37878 <GetDataSlab+0xfeb4>
   37870:	mov	r3, ip
   37874:	b	3790c <GetDataSlab+0xff48>
   37878:	vmov.i32	q9, #1	; 0x00000001
   3787c:	vmov.i32	q10, #1	; 0x00000001
   37880:	vmov.i32	q8, #1	; 0x00000001
   37884:	bic	sl, lr, #3
   37888:	vmov.32	d23[1], r1
   3788c:	bic	r9, ip, #3
   37890:	mov	r1, r6
   37894:	vmov.32	d18[0], r7
   37898:	vmov.32	d20[0], r8
   3789c:	sub	r3, ip, sl
   378a0:	mvn	r7, #15
   378a4:	vorr	d16, d18, d18
   378a8:	vmov.i32	q9, #1	; 0x00000001
   378ac:	vorr	d18, d20, d20
   378b0:	vld1.32	{d20-d21}, [r1], r7
   378b4:	subs	r9, r9, #4
   378b8:	vrev64.32	q12, q10
   378bc:	vext.8	q12, q12, q12, #8
   378c0:	vext.8	q11, q11, q12, #12
   378c4:	vmul.i32	q9, q9, q12
   378c8:	vmul.i32	q8, q11, q8
   378cc:	vorr	q11, q12, q12
   378d0:	bne	378b0 <GetDataSlab+0xfeec>
   378d4:	vext.8	q11, q9, q8, #8
   378d8:	vext.8	q12, q8, q8, #8
   378dc:	cmp	lr, sl
   378e0:	vmul.i32	q0, q9, q11
   378e4:	vmul.i32	q1, q8, q12
   378e8:	vmul.i32	q8, q0, d0[1]
   378ec:	vmul.i32	q9, q1, d2[1]
   378f0:	vmov.32	r8, d16[0]
   378f4:	vmov.32	r7, d18[0]
   378f8:	bne	37904 <GetDataSlab+0xff40>
   378fc:	ldr	r9, [fp, #8]
   37900:	b	37920 <GetDataSlab+0xff5c>
   37904:	ldr	r9, [fp, #8]
   37908:	vmov.32	r1, d20[0]
   3790c:	mul	r7, r1, r7
   37910:	ldr	r1, [r0, r3, lsl #2]
   37914:	subs	r3, r3, #1
   37918:	mul	r8, r8, r1
   3791c:	bne	3790c <GetDataSlab+0xff48>
   37920:	sub	sl, fp, #96	; 0x60
   37924:	sub	r3, fp, #176	; 0xb0
   37928:	ldr	r6, [sp, #44]	; 0x2c
   3792c:	ldr	lr, [sp, #56]	; 0x38
   37930:	str	r7, [sp, #44]	; 0x2c
   37934:	str	r8, [sl, ip, lsl #2]
   37938:	ldr	r8, [fp, #12]
   3793c:	str	r7, [r3, ip, lsl #2]
   37940:	ldr	r7, [sp, #32]
   37944:	ldr	r1, [r8, ip, lsl #2]
   37948:	mla	r4, r1, r6, r4
   3794c:	ldr	r1, [fp, #20]
   37950:	ldr	r6, [sp, #40]	; 0x28
   37954:	ldr	r1, [r1, ip, lsl #2]
   37958:	add	ip, ip, #1
   3795c:	add	r6, r6, #4
   37960:	mul	lr, r1, lr
   37964:	ldr	r1, [fp, #24]
   37968:	str	lr, [sp, #56]	; 0x38
   3796c:	ldr	lr, [sp, #36]	; 0x24
   37970:	cmp	ip, r1
   37974:	bne	37840 <GetDataSlab+0xfe7c>
   37978:	ldr	r0, [sp, #48]	; 0x30
   3797c:	cmp	r5, #1
   37980:	add	sl, r0, r4, lsl #2
   37984:	bne	44120 <GetDataSlab+0x1c75c>
   37988:	ldr	r0, [sp, #56]	; 0x38
   3798c:	cmp	r0, #1
   37990:	blt	47ff8 <GetDataSlab+0x20634>
   37994:	ldr	r0, [fp, #20]
   37998:	mov	r9, r8
   3799c:	mov	r8, #0
   379a0:	add	ip, r0, #4
   379a4:	sub	r0, fp, #136	; 0x88
   379a8:	orr	r7, r0, #4
   379ac:	sub	r0, fp, #96	; 0x60
   379b0:	orr	r0, r0, #4
   379b4:	str	r0, [sp, #44]	; 0x2c
   379b8:	ldr	r0, [r9], #4
   379bc:	str	r0, [sp, #48]	; 0x30
   379c0:	ldr	r6, [sp, #48]	; 0x30
   379c4:	ldr	r1, [sp, #52]	; 0x34
   379c8:	cmp	r2, #1
   379cc:	add	r0, r6, r4
   379d0:	add	r3, sl, r6, lsl #2
   379d4:	blt	37a10 <GetDataSlab+0x1004c>
   379d8:	ldr	r1, [sp, #60]	; 0x3c
   379dc:	ldr	r6, [fp, #20]
   379e0:	mov	r4, #0
   379e4:	add	r1, r1, r8, lsl #2
   379e8:	ldr	r2, [r3, r4, lsl #2]
   379ec:	str	r2, [r1, r4, lsl #2]
   379f0:	add	r4, r4, #1
   379f4:	ldr	r2, [r6]
   379f8:	cmp	r4, r2
   379fc:	blt	379e8 <GetDataSlab+0x10024>
   37a00:	ldr	r1, [fp, #12]
   37a04:	ldr	r6, [r1]
   37a08:	ldr	r1, [fp, #8]
   37a0c:	ldr	r1, [r1]
   37a10:	str	r1, [sp, #52]	; 0x34
   37a14:	sub	r1, r1, r6
   37a18:	str	r6, [sp, #48]	; 0x30
   37a1c:	add	r4, r0, r1
   37a20:	ldr	r0, [fp, #24]
   37a24:	add	sl, r3, r1, lsl #2
   37a28:	cmp	r0, #2
   37a2c:	blt	37ad8 <GetDataSlab+0x10114>
   37a30:	mov	r1, #0
   37a34:	mov	r0, r1
   37a38:	ldr	r1, [r7, r1, lsl #2]
   37a3c:	add	r1, r1, #1
   37a40:	str	r1, [r7, r0, lsl #2]
   37a44:	ldr	r6, [ip, r0, lsl #2]
   37a48:	sdiv	lr, r1, r6
   37a4c:	mls	r1, lr, r6, r1
   37a50:	cmp	r1, #0
   37a54:	bne	37ac8 <GetDataSlab+0x10104>
   37a58:	mov	r1, #0
   37a5c:	sub	r3, fp, #176	; 0xb0
   37a60:	str	r1, [r7, r0, lsl #2]
   37a64:	add	r1, r3, r0, lsl #2
   37a68:	ldr	r1, [r1, #4]
   37a6c:	sdiv	r6, r4, r1
   37a70:	mls	r6, r6, r1, r4
   37a74:	cmp	r6, #0
   37a78:	beq	37a94 <GetDataSlab+0x100d0>
   37a7c:	ldr	r5, [r3, r0, lsl #2]
   37a80:	ldr	r3, [r9, r0, lsl #2]
   37a84:	sub	r1, r1, r6
   37a88:	mla	r1, r3, r5, r1
   37a8c:	add	r4, r1, r4
   37a90:	b	37aac <GetDataSlab+0x100e8>
   37a94:	ldr	r1, [r9, r0, lsl #2]
   37a98:	cmp	r1, #0
   37a9c:	beq	37ab0 <GetDataSlab+0x100ec>
   37aa0:	ldr	r3, [r3, r0, lsl #2]
   37aa4:	mla	r4, r3, r1, r4
   37aa8:	mul	r1, r3, r1
   37aac:	add	sl, sl, r1, lsl #2
   37ab0:	ldr	r3, [fp, #24]
   37ab4:	add	r1, r0, #1
   37ab8:	add	r0, r0, #2
   37abc:	cmp	r0, r3
   37ac0:	blt	37a34 <GetDataSlab+0x10070>
   37ac4:	b	37ad8 <GetDataSlab+0x10114>
   37ac8:	ldr	r1, [sp, #44]	; 0x2c
   37acc:	ldr	r0, [r1, r0, lsl #2]
   37ad0:	add	sl, sl, r0, lsl #2
   37ad4:	add	r4, r0, r4
   37ad8:	ldr	r1, [sp, #56]	; 0x38
   37adc:	add	r8, r2, r8
   37ae0:	mov	r0, #0
   37ae4:	cmp	r8, r1
   37ae8:	blt	379c0 <GetDataSlab+0xfffc>
   37aec:	b	47ffc <GetDataSlab+0x20638>
   37af0:	ldr	r5, [r3]
   37af4:	ldr	r9, [fp, #8]
   37af8:	ldr	r8, [fp, #12]
   37afc:	mov	r4, #0
   37b00:	sub	r3, fp, #176	; 0xb0
   37b04:	sub	r0, r5, #1
   37b08:	str	r0, [fp, #-96]	; 0xffffffa0
   37b0c:	ldr	r0, [r9]
   37b10:	str	r0, [fp, #-176]	; 0xffffff50
   37b14:	str	r0, [sp, #52]	; 0x34
   37b18:	ldr	r0, [fp, #24]
   37b1c:	ldr	r2, [sl]
   37b20:	sub	sl, fp, #96	; 0x60
   37b24:	cmp	r0, #2
   37b28:	mov	r0, r2
   37b2c:	str	r2, [sp, #56]	; 0x38
   37b30:	blt	37c94 <GetDataSlab+0x102d0>
   37b34:	ldr	r7, [sp, #52]	; 0x34
   37b38:	sub	r0, r9, #4
   37b3c:	sub	r6, r9, #12
   37b40:	mov	ip, #1
   37b44:	mov	lr, #0
   37b48:	mov	r4, #0
   37b4c:	str	r2, [sp, #56]	; 0x38
   37b50:	mov	r1, r7
   37b54:	str	r7, [sp, #44]	; 0x2c
   37b58:	mov	r1, r2
   37b5c:	ldr	r1, [fp, #16]
   37b60:	add	lr, lr, #1
   37b64:	str	r6, [sp, #40]	; 0x28
   37b68:	cmp	lr, #4
   37b6c:	str	lr, [sp, #36]	; 0x24
   37b70:	ldr	r1, [r1, ip, lsl #2]
   37b74:	str	r7, [r3, ip, lsl #2]
   37b78:	sub	r8, r1, #1
   37b7c:	str	r8, [sl, ip, lsl #2]
   37b80:	ldr	r1, [r9, ip, lsl #2]
   37b84:	str	r1, [sp, #32]
   37b88:	bcs	37b94 <GetDataSlab+0x101d0>
   37b8c:	mov	r3, ip
   37b90:	b	37c28 <GetDataSlab+0x10264>
   37b94:	vmov.i32	q9, #1	; 0x00000001
   37b98:	vmov.i32	q10, #1	; 0x00000001
   37b9c:	vmov.i32	q8, #1	; 0x00000001
   37ba0:	bic	sl, lr, #3
   37ba4:	vmov.32	d23[1], r1
   37ba8:	bic	r9, ip, #3
   37bac:	mov	r1, r6
   37bb0:	vmov.32	d18[0], r7
   37bb4:	vmov.32	d20[0], r8
   37bb8:	sub	r3, ip, sl
   37bbc:	mvn	r7, #15
   37bc0:	vorr	d16, d18, d18
   37bc4:	vmov.i32	q9, #1	; 0x00000001
   37bc8:	vorr	d18, d20, d20
   37bcc:	vld1.32	{d20-d21}, [r1], r7
   37bd0:	subs	r9, r9, #4
   37bd4:	vrev64.32	q12, q10
   37bd8:	vext.8	q12, q12, q12, #8
   37bdc:	vext.8	q11, q11, q12, #12
   37be0:	vmul.i32	q9, q9, q12
   37be4:	vmul.i32	q8, q11, q8
   37be8:	vorr	q11, q12, q12
   37bec:	bne	37bcc <GetDataSlab+0x10208>
   37bf0:	vext.8	q11, q9, q8, #8
   37bf4:	vext.8	q12, q8, q8, #8
   37bf8:	cmp	lr, sl
   37bfc:	vmul.i32	q0, q9, q11
   37c00:	vmul.i32	q1, q8, q12
   37c04:	vmul.i32	q8, q0, d0[1]
   37c08:	vmul.i32	q9, q1, d2[1]
   37c0c:	vmov.32	r8, d16[0]
   37c10:	vmov.32	r7, d18[0]
   37c14:	bne	37c20 <GetDataSlab+0x1025c>
   37c18:	ldr	r9, [fp, #8]
   37c1c:	b	37c3c <GetDataSlab+0x10278>
   37c20:	ldr	r9, [fp, #8]
   37c24:	vmov.32	r1, d20[0]
   37c28:	mul	r7, r1, r7
   37c2c:	ldr	r1, [r0, r3, lsl #2]
   37c30:	subs	r3, r3, #1
   37c34:	mul	r8, r8, r1
   37c38:	bne	37c28 <GetDataSlab+0x10264>
   37c3c:	sub	sl, fp, #96	; 0x60
   37c40:	sub	r3, fp, #176	; 0xb0
   37c44:	ldr	r6, [sp, #44]	; 0x2c
   37c48:	ldr	lr, [sp, #56]	; 0x38
   37c4c:	str	r7, [sp, #44]	; 0x2c
   37c50:	str	r8, [sl, ip, lsl #2]
   37c54:	ldr	r8, [fp, #12]
   37c58:	str	r7, [r3, ip, lsl #2]
   37c5c:	ldr	r7, [sp, #32]
   37c60:	ldr	r1, [r8, ip, lsl #2]
   37c64:	mla	r4, r1, r6, r4
   37c68:	ldr	r1, [fp, #20]
   37c6c:	ldr	r6, [sp, #40]	; 0x28
   37c70:	ldr	r1, [r1, ip, lsl #2]
   37c74:	add	ip, ip, #1
   37c78:	add	r6, r6, #4
   37c7c:	mul	lr, r1, lr
   37c80:	ldr	r1, [fp, #24]
   37c84:	str	lr, [sp, #56]	; 0x38
   37c88:	ldr	lr, [sp, #36]	; 0x24
   37c8c:	cmp	ip, r1
   37c90:	bne	37b5c <GetDataSlab+0x10198>
   37c94:	ldr	r0, [sp, #48]	; 0x30
   37c98:	cmp	r5, #1
   37c9c:	add	ip, r0, r4, lsl #2
   37ca0:	bne	442bc <GetDataSlab+0x1c8f8>
   37ca4:	ldr	r0, [sp, #56]	; 0x38
   37ca8:	cmp	r0, #1
   37cac:	ldr	r0, [fp, #20]
   37cb0:	blt	47ff8 <GetDataSlab+0x20634>
   37cb4:	add	r9, r0, #4
   37cb8:	sub	r0, fp, #136	; 0x88
   37cbc:	mov	sl, r8
   37cc0:	mov	lr, #0
   37cc4:	orr	r7, r0, #4
   37cc8:	sub	r0, fp, #96	; 0x60
   37ccc:	orr	r0, r0, #4
   37cd0:	str	r0, [sp, #44]	; 0x2c
   37cd4:	ldr	r0, [sl], #4
   37cd8:	str	r0, [sp, #48]	; 0x30
   37cdc:	ldr	r1, [sp, #48]	; 0x30
   37ce0:	ldr	r0, [sp, #52]	; 0x34
   37ce4:	cmp	r2, #1
   37ce8:	add	r5, r1, r4
   37cec:	add	r8, ip, r1, lsl #2
   37cf0:	blt	37d3c <GetDataSlab+0x10378>
   37cf4:	ldr	r0, [sp, #60]	; 0x3c
   37cf8:	ldr	r6, [fp, #20]
   37cfc:	mov	r3, r8
   37d00:	add	r4, r0, lr, lsl #2
   37d04:	mov	r0, #0
   37d08:	vldr	s0, [r3]
   37d0c:	add	r3, r3, #4
   37d10:	vcvt.u32.f32	s0, s0
   37d14:	vmov	r1, s0
   37d18:	str	r1, [r4, r0, lsl #2]
   37d1c:	add	r0, r0, #1
   37d20:	ldr	r2, [r6]
   37d24:	cmp	r0, r2
   37d28:	blt	37d08 <GetDataSlab+0x10344>
   37d2c:	ldr	r0, [fp, #12]
   37d30:	ldr	r1, [r0]
   37d34:	ldr	r0, [fp, #8]
   37d38:	ldr	r0, [r0]
   37d3c:	str	r0, [sp, #52]	; 0x34
   37d40:	sub	r0, r0, r1
   37d44:	str	r1, [sp, #48]	; 0x30
   37d48:	add	ip, r8, r0, lsl #2
   37d4c:	add	r4, r5, r0
   37d50:	ldr	r0, [fp, #24]
   37d54:	cmp	r0, #2
   37d58:	blt	37e08 <GetDataSlab+0x10444>
   37d5c:	mov	r6, #0
   37d60:	mov	r8, #0
   37d64:	ldr	r1, [r7, r6, lsl #2]
   37d68:	mov	r0, r6
   37d6c:	add	r1, r1, #1
   37d70:	str	r1, [r7, r6, lsl #2]
   37d74:	ldr	r6, [r9, r6, lsl #2]
   37d78:	sdiv	r5, r1, r6
   37d7c:	mls	r1, r5, r6, r1
   37d80:	cmp	r1, #0
   37d84:	bne	37df8 <GetDataSlab+0x10434>
   37d88:	sub	r3, fp, #176	; 0xb0
   37d8c:	str	r8, [r7, r0, lsl #2]
   37d90:	add	r1, r3, r0, lsl #2
   37d94:	ldr	r6, [r1, #4]
   37d98:	sdiv	r1, r4, r6
   37d9c:	mls	r1, r1, r6, r4
   37da0:	cmp	r1, #0
   37da4:	beq	37dc0 <GetDataSlab+0x103fc>
   37da8:	ldr	r5, [r3, r0, lsl #2]
   37dac:	ldr	r3, [sl, r0, lsl #2]
   37db0:	sub	r1, r6, r1
   37db4:	mla	r1, r3, r5, r1
   37db8:	add	r4, r1, r4
   37dbc:	b	37ddc <GetDataSlab+0x10418>
   37dc0:	ldr	r1, [sl, r0, lsl #2]
   37dc4:	cmp	r1, #0
   37dc8:	beq	37de0 <GetDataSlab+0x1041c>
   37dcc:	sub	r3, fp, #176	; 0xb0
   37dd0:	ldr	r3, [r3, r0, lsl #2]
   37dd4:	mla	r4, r3, r1, r4
   37dd8:	mul	r1, r3, r1
   37ddc:	add	ip, ip, r1, lsl #2
   37de0:	ldr	r1, [fp, #24]
   37de4:	add	r6, r0, #1
   37de8:	add	r0, r0, #2
   37dec:	cmp	r0, r1
   37df0:	blt	37d64 <GetDataSlab+0x103a0>
   37df4:	b	37e08 <GetDataSlab+0x10444>
   37df8:	ldr	r1, [sp, #44]	; 0x2c
   37dfc:	ldr	r0, [r1, r0, lsl #2]
   37e00:	add	ip, ip, r0, lsl #2
   37e04:	add	r4, r0, r4
   37e08:	ldr	r1, [sp, #56]	; 0x38
   37e0c:	add	lr, r2, lr
   37e10:	mov	r0, #0
   37e14:	cmp	lr, r1
   37e18:	blt	37cdc <GetDataSlab+0x10318>
   37e1c:	b	47ffc <GetDataSlab+0x20638>
   37e20:	ldr	r5, [r3]
   37e24:	ldr	r9, [fp, #8]
   37e28:	ldr	r8, [fp, #12]
   37e2c:	mov	r4, #0
   37e30:	sub	r3, fp, #176	; 0xb0
   37e34:	sub	r0, r5, #1
   37e38:	str	r0, [fp, #-96]	; 0xffffffa0
   37e3c:	ldr	r0, [r9]
   37e40:	str	r0, [fp, #-176]	; 0xffffff50
   37e44:	str	r0, [sp, #52]	; 0x34
   37e48:	ldr	r0, [fp, #24]
   37e4c:	ldr	r2, [sl]
   37e50:	sub	sl, fp, #96	; 0x60
   37e54:	cmp	r0, #2
   37e58:	mov	r0, r2
   37e5c:	str	r2, [sp, #56]	; 0x38
   37e60:	blt	37fc4 <GetDataSlab+0x10600>
   37e64:	ldr	r7, [sp, #52]	; 0x34
   37e68:	sub	r0, r9, #4
   37e6c:	sub	r6, r9, #12
   37e70:	mov	ip, #1
   37e74:	mov	lr, #0
   37e78:	mov	r4, #0
   37e7c:	str	r2, [sp, #56]	; 0x38
   37e80:	mov	r1, r7
   37e84:	str	r7, [sp, #44]	; 0x2c
   37e88:	mov	r1, r2
   37e8c:	ldr	r1, [fp, #16]
   37e90:	add	lr, lr, #1
   37e94:	str	r6, [sp, #40]	; 0x28
   37e98:	cmp	lr, #4
   37e9c:	str	lr, [sp, #36]	; 0x24
   37ea0:	ldr	r1, [r1, ip, lsl #2]
   37ea4:	str	r7, [r3, ip, lsl #2]
   37ea8:	sub	r8, r1, #1
   37eac:	str	r8, [sl, ip, lsl #2]
   37eb0:	ldr	r1, [r9, ip, lsl #2]
   37eb4:	str	r1, [sp, #32]
   37eb8:	bcs	37ec4 <GetDataSlab+0x10500>
   37ebc:	mov	r3, ip
   37ec0:	b	37f58 <GetDataSlab+0x10594>
   37ec4:	vmov.i32	q9, #1	; 0x00000001
   37ec8:	vmov.i32	q10, #1	; 0x00000001
   37ecc:	vmov.i32	q8, #1	; 0x00000001
   37ed0:	bic	sl, lr, #3
   37ed4:	vmov.32	d23[1], r1
   37ed8:	bic	r9, ip, #3
   37edc:	mov	r1, r6
   37ee0:	vmov.32	d18[0], r7
   37ee4:	vmov.32	d20[0], r8
   37ee8:	sub	r3, ip, sl
   37eec:	mvn	r7, #15
   37ef0:	vorr	d16, d18, d18
   37ef4:	vmov.i32	q9, #1	; 0x00000001
   37ef8:	vorr	d18, d20, d20
   37efc:	vld1.32	{d20-d21}, [r1], r7
   37f00:	subs	r9, r9, #4
   37f04:	vrev64.32	q12, q10
   37f08:	vext.8	q12, q12, q12, #8
   37f0c:	vext.8	q11, q11, q12, #12
   37f10:	vmul.i32	q9, q9, q12
   37f14:	vmul.i32	q8, q11, q8
   37f18:	vorr	q11, q12, q12
   37f1c:	bne	37efc <GetDataSlab+0x10538>
   37f20:	vext.8	q11, q9, q8, #8
   37f24:	vext.8	q12, q8, q8, #8
   37f28:	cmp	lr, sl
   37f2c:	vmul.i32	q0, q9, q11
   37f30:	vmul.i32	q1, q8, q12
   37f34:	vmul.i32	q8, q0, d0[1]
   37f38:	vmul.i32	q9, q1, d2[1]
   37f3c:	vmov.32	r8, d16[0]
   37f40:	vmov.32	r7, d18[0]
   37f44:	bne	37f50 <GetDataSlab+0x1058c>
   37f48:	ldr	r9, [fp, #8]
   37f4c:	b	37f6c <GetDataSlab+0x105a8>
   37f50:	ldr	r9, [fp, #8]
   37f54:	vmov.32	r1, d20[0]
   37f58:	mul	r7, r1, r7
   37f5c:	ldr	r1, [r0, r3, lsl #2]
   37f60:	subs	r3, r3, #1
   37f64:	mul	r8, r8, r1
   37f68:	bne	37f58 <GetDataSlab+0x10594>
   37f6c:	sub	sl, fp, #96	; 0x60
   37f70:	sub	r3, fp, #176	; 0xb0
   37f74:	ldr	r6, [sp, #44]	; 0x2c
   37f78:	ldr	lr, [sp, #56]	; 0x38
   37f7c:	str	r7, [sp, #44]	; 0x2c
   37f80:	str	r8, [sl, ip, lsl #2]
   37f84:	ldr	r8, [fp, #12]
   37f88:	str	r7, [r3, ip, lsl #2]
   37f8c:	ldr	r7, [sp, #32]
   37f90:	ldr	r1, [r8, ip, lsl #2]
   37f94:	mla	r4, r1, r6, r4
   37f98:	ldr	r1, [fp, #20]
   37f9c:	ldr	r6, [sp, #40]	; 0x28
   37fa0:	ldr	r1, [r1, ip, lsl #2]
   37fa4:	add	ip, ip, #1
   37fa8:	add	r6, r6, #4
   37fac:	mul	lr, r1, lr
   37fb0:	ldr	r1, [fp, #24]
   37fb4:	str	lr, [sp, #56]	; 0x38
   37fb8:	ldr	lr, [sp, #36]	; 0x24
   37fbc:	cmp	ip, r1
   37fc0:	bne	37e8c <GetDataSlab+0x104c8>
   37fc4:	ldr	r0, [sp, #48]	; 0x30
   37fc8:	cmp	r5, #1
   37fcc:	add	ip, r0, r4, lsl #3
   37fd0:	bne	44460 <GetDataSlab+0x1ca9c>
   37fd4:	ldr	r0, [sp, #56]	; 0x38
   37fd8:	cmp	r0, #1
   37fdc:	ldr	r0, [fp, #20]
   37fe0:	blt	47ff8 <GetDataSlab+0x20634>
   37fe4:	add	r9, r0, #4
   37fe8:	sub	r0, fp, #136	; 0x88
   37fec:	mov	sl, r8
   37ff0:	mov	lr, #0
   37ff4:	orr	r7, r0, #4
   37ff8:	sub	r0, fp, #96	; 0x60
   37ffc:	orr	r0, r0, #4
   38000:	str	r0, [sp, #44]	; 0x2c
   38004:	ldr	r0, [sl], #4
   38008:	str	r0, [sp, #48]	; 0x30
   3800c:	ldr	r1, [sp, #48]	; 0x30
   38010:	ldr	r0, [sp, #52]	; 0x34
   38014:	cmp	r2, #1
   38018:	add	r5, r1, r4
   3801c:	add	r8, ip, r1, lsl #3
   38020:	blt	3806c <GetDataSlab+0x106a8>
   38024:	ldr	r0, [sp, #60]	; 0x3c
   38028:	ldr	r6, [fp, #20]
   3802c:	mov	r3, r8
   38030:	add	r4, r0, lr, lsl #2
   38034:	mov	r0, #0
   38038:	vldr	d16, [r3]
   3803c:	add	r3, r3, #8
   38040:	vcvt.u32.f64	s0, d16
   38044:	vmov	r1, s0
   38048:	str	r1, [r4, r0, lsl #2]
   3804c:	add	r0, r0, #1
   38050:	ldr	r2, [r6]
   38054:	cmp	r0, r2
   38058:	blt	38038 <GetDataSlab+0x10674>
   3805c:	ldr	r0, [fp, #12]
   38060:	ldr	r1, [r0]
   38064:	ldr	r0, [fp, #8]
   38068:	ldr	r0, [r0]
   3806c:	str	r0, [sp, #52]	; 0x34
   38070:	sub	r0, r0, r1
   38074:	str	r1, [sp, #48]	; 0x30
   38078:	add	ip, r8, r0, lsl #3
   3807c:	add	r4, r5, r0
   38080:	ldr	r0, [fp, #24]
   38084:	cmp	r0, #2
   38088:	blt	38138 <GetDataSlab+0x10774>
   3808c:	mov	r6, #0
   38090:	mov	r8, #0
   38094:	ldr	r1, [r7, r6, lsl #2]
   38098:	mov	r0, r6
   3809c:	add	r1, r1, #1
   380a0:	str	r1, [r7, r6, lsl #2]
   380a4:	ldr	r6, [r9, r6, lsl #2]
   380a8:	sdiv	r5, r1, r6
   380ac:	mls	r1, r5, r6, r1
   380b0:	cmp	r1, #0
   380b4:	bne	38128 <GetDataSlab+0x10764>
   380b8:	sub	r3, fp, #176	; 0xb0
   380bc:	str	r8, [r7, r0, lsl #2]
   380c0:	add	r1, r3, r0, lsl #2
   380c4:	ldr	r6, [r1, #4]
   380c8:	sdiv	r1, r4, r6
   380cc:	mls	r1, r1, r6, r4
   380d0:	cmp	r1, #0
   380d4:	beq	380f0 <GetDataSlab+0x1072c>
   380d8:	ldr	r5, [r3, r0, lsl #2]
   380dc:	ldr	r3, [sl, r0, lsl #2]
   380e0:	sub	r1, r6, r1
   380e4:	mla	r1, r3, r5, r1
   380e8:	add	r4, r1, r4
   380ec:	b	3810c <GetDataSlab+0x10748>
   380f0:	ldr	r1, [sl, r0, lsl #2]
   380f4:	cmp	r1, #0
   380f8:	beq	38110 <GetDataSlab+0x1074c>
   380fc:	sub	r3, fp, #176	; 0xb0
   38100:	ldr	r3, [r3, r0, lsl #2]
   38104:	mla	r4, r3, r1, r4
   38108:	mul	r1, r3, r1
   3810c:	add	ip, ip, r1, lsl #3
   38110:	ldr	r1, [fp, #24]
   38114:	add	r6, r0, #1
   38118:	add	r0, r0, #2
   3811c:	cmp	r0, r1
   38120:	blt	38094 <GetDataSlab+0x106d0>
   38124:	b	38138 <GetDataSlab+0x10774>
   38128:	ldr	r1, [sp, #44]	; 0x2c
   3812c:	ldr	r0, [r1, r0, lsl #2]
   38130:	add	ip, ip, r0, lsl #3
   38134:	add	r4, r0, r4
   38138:	ldr	r1, [sp, #56]	; 0x38
   3813c:	add	lr, r2, lr
   38140:	mov	r0, #0
   38144:	cmp	lr, r1
   38148:	blt	3800c <GetDataSlab+0x10648>
   3814c:	b	47ffc <GetDataSlab+0x20638>
   38150:	ldr	r5, [r3]
   38154:	mov	r3, #0
   38158:	sub	r8, fp, #176	; 0xb0
   3815c:	str	r6, [sp, #40]	; 0x28
   38160:	sub	r0, r5, #1
   38164:	str	r0, [fp, #-96]	; 0xffffffa0
   38168:	ldr	r0, [fp, #8]
   3816c:	ldr	r0, [r0]
   38170:	str	r0, [fp, #-176]	; 0xffffff50
   38174:	str	r0, [sp, #28]
   38178:	ldr	r0, [fp, #24]
   3817c:	ldr	r1, [sl]
   38180:	sub	sl, fp, #96	; 0x60
   38184:	cmp	r0, #2
   38188:	mov	r0, r1
   3818c:	str	r1, [sp, #56]	; 0x38
   38190:	blt	382f8 <GetDataSlab+0x10934>
   38194:	ldr	r0, [fp, #8]
   38198:	ldr	r6, [sp, #28]
   3819c:	mov	lr, #1
   381a0:	mvn	ip, #15
   381a4:	mov	r3, #0
   381a8:	str	r1, [sp, #56]	; 0x38
   381ac:	sub	r2, r0, #4
   381b0:	sub	r4, r0, #12
   381b4:	mov	r0, #0
   381b8:	mov	r7, r6
   381bc:	str	r0, [sp, #52]	; 0x34
   381c0:	mov	r0, r1
   381c4:	ldr	r0, [fp, #16]
   381c8:	str	r7, [sp, #44]	; 0x2c
   381cc:	str	r4, [sp, #36]	; 0x24
   381d0:	ldr	r0, [r0, lr, lsl #2]
   381d4:	str	r6, [r8, lr, lsl #2]
   381d8:	sub	r9, r0, #1
   381dc:	ldr	r0, [fp, #8]
   381e0:	str	r9, [sl, lr, lsl #2]
   381e4:	ldr	sl, [sp, #52]	; 0x34
   381e8:	ldr	r0, [r0, lr, lsl #2]
   381ec:	add	sl, sl, #1
   381f0:	cmp	sl, #4
   381f4:	str	sl, [sp, #52]	; 0x34
   381f8:	str	r0, [sp, #32]
   381fc:	bcs	3820c <GetDataSlab+0x10848>
   38200:	mov	r7, r0
   38204:	mov	r0, lr
   38208:	b	38290 <GetDataSlab+0x108cc>
   3820c:	vmov.i32	q9, #1	; 0x00000001
   38210:	vmov.i32	q10, #1	; 0x00000001
   38214:	vmov.i32	q8, #1	; 0x00000001
   38218:	bic	r7, sl, #3
   3821c:	vmov.32	d23[1], r0
   38220:	bic	r8, lr, #3
   38224:	vmov.32	d18[0], r6
   38228:	vmov.32	d20[0], r9
   3822c:	sub	r0, lr, r7
   38230:	mov	r6, r4
   38234:	vorr	d16, d18, d18
   38238:	vmov.i32	q9, #1	; 0x00000001
   3823c:	vorr	d18, d20, d20
   38240:	vld1.32	{d20-d21}, [r6], ip
   38244:	subs	r8, r8, #4
   38248:	vrev64.32	q12, q10
   3824c:	vext.8	q12, q12, q12, #8
   38250:	vext.8	q11, q11, q12, #12
   38254:	vmul.i32	q9, q9, q12
   38258:	vmul.i32	q8, q11, q8
   3825c:	vorr	q11, q12, q12
   38260:	bne	38240 <GetDataSlab+0x1087c>
   38264:	vext.8	q11, q9, q8, #8
   38268:	vext.8	q12, q8, q8, #8
   3826c:	cmp	sl, r7
   38270:	vmul.i32	q0, q9, q11
   38274:	vmul.i32	q1, q8, q12
   38278:	vmul.i32	q8, q0, d0[1]
   3827c:	vmul.i32	q9, q1, d2[1]
   38280:	vmov.32	r9, d16[0]
   38284:	vmov.32	r6, d18[0]
   38288:	beq	382a4 <GetDataSlab+0x108e0>
   3828c:	vmov.32	r7, d20[0]
   38290:	mul	r6, r7, r6
   38294:	ldr	r7, [r2, r0, lsl #2]
   38298:	subs	r0, r0, #1
   3829c:	mul	r9, r9, r7
   382a0:	bne	38290 <GetDataSlab+0x108cc>
   382a4:	ldr	r0, [fp, #12]
   382a8:	sub	r8, fp, #176	; 0xb0
   382ac:	sub	sl, fp, #96	; 0x60
   382b0:	ldr	r4, [sp, #44]	; 0x2c
   382b4:	mov	r7, r6
   382b8:	str	r6, [r8, lr, lsl #2]
   382bc:	str	r9, [sl, lr, lsl #2]
   382c0:	ldr	r6, [sp, #32]
   382c4:	ldr	r0, [r0, lr, lsl #2]
   382c8:	mla	r3, r0, r4, r3
   382cc:	ldr	r0, [fp, #20]
   382d0:	ldr	r4, [sp, #56]	; 0x38
   382d4:	ldr	r0, [r0, lr, lsl #2]
   382d8:	add	lr, lr, #1
   382dc:	mul	r4, r0, r4
   382e0:	ldr	r0, [fp, #24]
   382e4:	str	r4, [sp, #56]	; 0x38
   382e8:	ldr	r4, [sp, #36]	; 0x24
   382ec:	cmp	lr, r0
   382f0:	add	r4, r4, #4
   382f4:	bne	381c4 <GetDataSlab+0x10800>
   382f8:	ldr	r0, [sp, #48]	; 0x30
   382fc:	cmp	r5, #1
   38300:	add	sl, r0, r3, lsl #3
   38304:	bne	44604 <GetDataSlab+0x1cc40>
   38308:	ldr	r0, [sp, #56]	; 0x38
   3830c:	cmp	r0, #1
   38310:	blt	44788 <GetDataSlab+0x1cdc4>
   38314:	ldr	r8, [fp, #12]
   38318:	ldr	r0, [fp, #20]
   3831c:	mov	ip, #0
   38320:	ldr	lr, [r8], #4
   38324:	add	r9, r0, #4
   38328:	sub	r0, fp, #136	; 0x88
   3832c:	orr	r2, r0, #4
   38330:	sub	r0, fp, #96	; 0x60
   38334:	orr	r0, r0, #4
   38338:	str	r0, [sp, #52]	; 0x34
   3833c:	add	r6, lr, r3
   38340:	add	r3, sl, lr, lsl #3
   38344:	cmp	r1, #1
   38348:	blt	3838c <GetDataSlab+0x109c8>
   3834c:	ldr	r0, [sp, #60]	; 0x3c
   38350:	ldr	r7, [fp, #20]
   38354:	mov	r4, r3
   38358:	add	r5, r0, ip, lsl #2
   3835c:	mov	r0, #0
   38360:	ldr	r1, [r4], #8
   38364:	str	r1, [r5, r0, lsl #2]
   38368:	add	r0, r0, #1
   3836c:	ldr	r1, [r7]
   38370:	cmp	r0, r1
   38374:	blt	38360 <GetDataSlab+0x1099c>
   38378:	ldr	r0, [fp, #12]
   3837c:	ldr	lr, [r0]
   38380:	ldr	r0, [fp, #8]
   38384:	ldr	r0, [r0]
   38388:	str	r0, [sp, #28]
   3838c:	ldr	r0, [sp, #28]
   38390:	sub	r0, r0, lr
   38394:	add	sl, r3, r0, lsl #3
   38398:	add	r3, r6, r0
   3839c:	ldr	r0, [fp, #24]
   383a0:	cmp	r0, #2
   383a4:	blt	38454 <GetDataSlab+0x10a90>
   383a8:	mov	r0, #0
   383ac:	mov	r5, r0
   383b0:	ldr	r0, [r2, r0, lsl #2]
   383b4:	add	r0, r0, #1
   383b8:	str	r0, [r2, r5, lsl #2]
   383bc:	ldr	r7, [r9, r5, lsl #2]
   383c0:	sdiv	r6, r0, r7
   383c4:	mls	r0, r6, r7, r0
   383c8:	cmp	r0, #0
   383cc:	bne	38444 <GetDataSlab+0x10a80>
   383d0:	mov	r0, #0
   383d4:	sub	r4, fp, #176	; 0xb0
   383d8:	str	r0, [r2, r5, lsl #2]
   383dc:	add	r0, r4, r5, lsl #2
   383e0:	ldr	r0, [r0, #4]
   383e4:	sdiv	r6, r3, r0
   383e8:	mls	r7, r6, r0, r3
   383ec:	cmp	r7, #0
   383f0:	beq	3840c <GetDataSlab+0x10a48>
   383f4:	ldr	r6, [r4, r5, lsl #2]
   383f8:	ldr	r4, [r8, r5, lsl #2]
   383fc:	sub	r0, r0, r7
   38400:	mla	r0, r4, r6, r0
   38404:	add	r3, r0, r3
   38408:	b	38428 <GetDataSlab+0x10a64>
   3840c:	ldr	r0, [r8, r5, lsl #2]
   38410:	cmp	r0, #0
   38414:	beq	3842c <GetDataSlab+0x10a68>
   38418:	sub	r4, fp, #176	; 0xb0
   3841c:	ldr	r4, [r4, r5, lsl #2]
   38420:	mla	r3, r4, r0, r3
   38424:	mul	r0, r4, r0
   38428:	add	sl, sl, r0, lsl #3
   3842c:	add	r0, r5, #1
   38430:	add	r4, r5, #2
   38434:	ldr	r5, [fp, #24]
   38438:	cmp	r4, r5
   3843c:	blt	383ac <GetDataSlab+0x109e8>
   38440:	b	38454 <GetDataSlab+0x10a90>
   38444:	ldr	r0, [sp, #52]	; 0x34
   38448:	ldr	r0, [r0, r5, lsl #2]
   3844c:	add	sl, sl, r0, lsl #3
   38450:	add	r3, r0, r3
   38454:	ldr	r0, [sp, #56]	; 0x38
   38458:	add	ip, r1, ip
   3845c:	cmp	ip, r0
   38460:	blt	3833c <GetDataSlab+0x10978>
   38464:	b	44788 <GetDataSlab+0x1cdc4>
   38468:	ldr	r0, [fp, #16]
   3846c:	mov	r1, sl
   38470:	mov	r4, #0
   38474:	sub	r7, fp, #96	; 0x60
   38478:	ldr	sl, [r0]
   3847c:	sub	r0, sl, #1
   38480:	str	r0, [fp, #-96]	; 0xffffffa0
   38484:	ldr	r0, [fp, #8]
   38488:	ldr	r0, [r0]
   3848c:	str	r0, [fp, #-176]	; 0xffffff50
   38490:	str	r0, [sp, #36]	; 0x24
   38494:	ldr	r0, [fp, #24]
   38498:	ldr	r1, [r1]
   3849c:	cmp	r0, #2
   384a0:	str	r1, [sp, #44]	; 0x2c
   384a4:	str	r1, [sp, #52]	; 0x34
   384a8:	blt	38604 <GetDataSlab+0x10c40>
   384ac:	ldr	r0, [fp, #8]
   384b0:	ldr	r3, [sp, #36]	; 0x24
   384b4:	mov	r6, #1
   384b8:	mov	r8, #0
   384bc:	mvn	r5, #15
   384c0:	mov	r4, #0
   384c4:	mov	r1, r0
   384c8:	sub	r0, r0, #4
   384cc:	mov	r9, r3
   384d0:	sub	ip, r1, #12
   384d4:	ldr	r1, [sp, #44]	; 0x2c
   384d8:	str	r1, [sp, #52]	; 0x34
   384dc:	ldr	r1, [fp, #16]
   384e0:	add	r8, r8, #1
   384e4:	cmp	r8, #4
   384e8:	ldr	r1, [r1, r6, lsl #2]
   384ec:	str	r3, [lr, r6, lsl #2]
   384f0:	sub	r2, r1, #1
   384f4:	ldr	r1, [fp, #8]
   384f8:	str	r2, [r7, r6, lsl #2]
   384fc:	ldr	r1, [r1, r6, lsl #2]
   38500:	str	r1, [sp, #56]	; 0x38
   38504:	bcs	38510 <GetDataSlab+0x10b4c>
   38508:	mov	r7, r6
   3850c:	b	385a8 <GetDataSlab+0x10be4>
   38510:	vmov.i32	q9, #1	; 0x00000001
   38514:	vmov.i32	q10, #1	; 0x00000001
   38518:	vmov.i32	q8, #1	; 0x00000001
   3851c:	vmov.32	d23[1], r1
   38520:	bic	r1, r8, #3
   38524:	bic	lr, r6, #3
   38528:	vmov.32	d18[0], r3
   3852c:	vmov.32	d20[0], r2
   38530:	str	r1, [sp, #40]	; 0x28
   38534:	sub	r7, r6, r1
   38538:	mov	r1, ip
   3853c:	vorr	d16, d18, d18
   38540:	vmov.i32	q9, #1	; 0x00000001
   38544:	vorr	d18, d20, d20
   38548:	vld1.32	{d20-d21}, [r1], r5
   3854c:	subs	lr, lr, #4
   38550:	vrev64.32	q12, q10
   38554:	vext.8	q12, q12, q12, #8
   38558:	vext.8	q11, q11, q12, #12
   3855c:	vmul.i32	q9, q9, q12
   38560:	vmul.i32	q8, q11, q8
   38564:	vorr	q11, q12, q12
   38568:	bne	38548 <GetDataSlab+0x10b84>
   3856c:	ldr	r1, [sp, #40]	; 0x28
   38570:	vext.8	q11, q9, q8, #8
   38574:	vext.8	q12, q8, q8, #8
   38578:	vmul.i32	q0, q9, q11
   3857c:	vmul.i32	q1, q8, q12
   38580:	vmul.i32	q8, q0, d0[1]
   38584:	vmul.i32	q9, q1, d2[1]
   38588:	vmov.32	r2, d16[0]
   3858c:	vmov.32	r3, d18[0]
   38590:	cmp	r8, r1
   38594:	bne	385a0 <GetDataSlab+0x10bdc>
   38598:	sub	lr, fp, #176	; 0xb0
   3859c:	b	385bc <GetDataSlab+0x10bf8>
   385a0:	vmov.32	r1, d20[0]
   385a4:	sub	lr, fp, #176	; 0xb0
   385a8:	mul	r3, r1, r3
   385ac:	ldr	r1, [r0, r7, lsl #2]
   385b0:	subs	r7, r7, #1
   385b4:	mul	r2, r2, r1
   385b8:	bne	385a8 <GetDataSlab+0x10be4>
   385bc:	ldr	r1, [fp, #12]
   385c0:	sub	r7, fp, #96	; 0x60
   385c4:	str	r3, [lr, r6, lsl #2]
   385c8:	add	ip, ip, #4
   385cc:	str	r2, [r7, r6, lsl #2]
   385d0:	ldr	r2, [sp, #52]	; 0x34
   385d4:	ldr	r1, [r1, r6, lsl #2]
   385d8:	mla	r4, r1, r9, r4
   385dc:	ldr	r1, [fp, #20]
   385e0:	mov	r9, r3
   385e4:	ldr	r3, [sp, #56]	; 0x38
   385e8:	ldr	r1, [r1, r6, lsl #2]
   385ec:	add	r6, r6, #1
   385f0:	mul	r2, r1, r2
   385f4:	ldr	r1, [fp, #24]
   385f8:	str	r2, [sp, #52]	; 0x34
   385fc:	cmp	r6, r1
   38600:	bne	384dc <GetDataSlab+0x10b18>
   38604:	ldr	r0, [sp, #48]	; 0x30
   38608:	cmp	sl, #1
   3860c:	add	r5, r0, r4
   38610:	bne	44adc <GetDataSlab+0x1d118>
   38614:	ldr	r0, [sp, #52]	; 0x34
   38618:	ldr	ip, [sp, #44]	; 0x2c
   3861c:	cmp	r0, #1
   38620:	ldr	r0, [fp, #12]
   38624:	blt	47ff8 <GetDataSlab+0x20634>
   38628:	add	r8, r0, #4
   3862c:	ldr	r0, [fp, #20]
   38630:	mov	r9, #0
   38634:	mov	lr, #0
   38638:	add	sl, r0, #4
   3863c:	sub	r0, fp, #136	; 0x88
   38640:	orr	r6, r0, #4
   38644:	orr	r0, r7, #4
   38648:	str	r0, [sp, #24]
   3864c:	bic	r0, ip, #1
   38650:	str	r0, [sp, #28]
   38654:	lsl	r0, ip, #3
   38658:	str	r0, [sp, #40]	; 0x28
   3865c:	ldr	r0, [sp, #60]	; 0x3c
   38660:	str	r0, [sp, #56]	; 0x38
   38664:	mov	r0, #0
   38668:	str	r0, [sp, #48]	; 0x30
   3866c:	cmp	ip, #1
   38670:	blt	38748 <GetDataSlab+0x10d84>
   38674:	ldr	r0, [fp, #12]
   38678:	ldr	r2, [r0]
   3867c:	mov	r0, #0
   38680:	beq	38720 <GetDataSlab+0x10d5c>
   38684:	str	r2, [sp, #32]
   38688:	ldr	r1, [sp, #60]	; 0x3c
   3868c:	ldr	r2, [sp, #40]	; 0x28
   38690:	ldr	r3, [sp, #48]	; 0x30
   38694:	mla	ip, r2, r3, r1
   38698:	ldr	r1, [sp, #44]	; 0x2c
   3869c:	ldr	r2, [sp, #32]
   386a0:	add	r7, r5, r1
   386a4:	ldr	r1, [sp, #60]	; 0x3c
   386a8:	add	r3, r5, r2
   386ac:	add	r7, r7, r2
   386b0:	cmp	ip, r7
   386b4:	ldr	ip, [sp, #44]	; 0x2c
   386b8:	bcs	386d8 <GetDataSlab+0x10d14>
   386bc:	ldr	r2, [sp, #40]	; 0x28
   386c0:	ldr	r7, [sp, #48]	; 0x30
   386c4:	mla	r7, r2, r7, r2
   386c8:	ldr	r2, [sp, #32]
   386cc:	add	r7, r1, r7
   386d0:	cmp	r3, r7
   386d4:	bcc	38720 <GetDataSlab+0x10d5c>
   386d8:	ldr	r0, [sp, #28]
   386dc:	ldr	ip, [sp, #56]	; 0x38
   386e0:	add	r1, sp, #192	; 0xc0
   386e4:	add	r2, sp, #236	; 0xec
   386e8:	ldrh	r7, [r3], #2
   386ec:	subs	r0, r0, #2
   386f0:	strh	r7, [r1, #44]	; 0x2c
   386f4:	vld1.16	{d16[0]}, [r2 :16]
   386f8:	vmovl.u8	q8, d16
   386fc:	vmovl.u16	q8, d16
   38700:	vmovl.u32	q8, d16
   38704:	vst1.64	{d16-d17}, [ip]!
   38708:	bne	386e8 <GetDataSlab+0x10d24>
   3870c:	ldr	ip, [sp, #44]	; 0x2c
   38710:	ldr	r0, [sp, #28]
   38714:	ldr	r2, [sp, #32]
   38718:	cmp	ip, r0
   3871c:	beq	38748 <GetDataSlab+0x10d84>
   38720:	ldr	r1, [sp, #56]	; 0x38
   38724:	sub	r3, ip, r0
   38728:	add	r7, r1, r0, lsl #3
   3872c:	add	r0, r0, r2
   38730:	add	r1, r5, r0
   38734:	ldrb	r0, [r1], #1
   38738:	subs	r3, r3, #1
   3873c:	stm	r7, {r0, r9}
   38740:	add	r7, r7, #8
   38744:	bne	38734 <GetDataSlab+0x10d70>
   38748:	ldr	r0, [sp, #36]	; 0x24
   3874c:	add	r5, r5, r0
   38750:	add	r4, r4, r0
   38754:	ldr	r0, [fp, #24]
   38758:	cmp	r0, #2
   3875c:	blt	38804 <GetDataSlab+0x10e40>
   38760:	mov	r3, #0
   38764:	ldr	r1, [r6, r3, lsl #2]
   38768:	mov	r0, r3
   3876c:	add	r1, r1, #1
   38770:	str	r1, [r6, r3, lsl #2]
   38774:	ldr	r3, [sl, r3, lsl #2]
   38778:	sdiv	r7, r1, r3
   3877c:	mls	r1, r7, r3, r1
   38780:	cmp	r1, #0
   38784:	bne	387f4 <GetDataSlab+0x10e30>
   38788:	sub	r2, fp, #176	; 0xb0
   3878c:	str	r9, [r6, r0, lsl #2]
   38790:	add	r1, r2, r0, lsl #2
   38794:	ldr	r3, [r1, #4]
   38798:	sdiv	r1, r4, r3
   3879c:	mls	r7, r1, r3, r4
   387a0:	cmp	r7, #0
   387a4:	beq	387c4 <GetDataSlab+0x10e00>
   387a8:	ldr	r1, [r2, r0, lsl #2]
   387ac:	ldr	r2, [r8, r0, lsl #2]
   387b0:	sub	r3, r3, r7
   387b4:	mla	r1, r2, r1, r3
   387b8:	add	r4, r1, r4
   387bc:	add	r5, r5, r1
   387c0:	b	387dc <GetDataSlab+0x10e18>
   387c4:	ldr	r3, [r8, r0, lsl #2]
   387c8:	cmp	r3, #0
   387cc:	subne	r1, fp, #176	; 0xb0
   387d0:	ldrne	r1, [r1, r0, lsl #2]
   387d4:	mlane	r4, r1, r3, r4
   387d8:	mlane	r5, r1, r3, r5
   387dc:	ldr	r1, [fp, #24]
   387e0:	add	r3, r0, #1
   387e4:	add	r0, r0, #2
   387e8:	cmp	r0, r1
   387ec:	blt	38764 <GetDataSlab+0x10da0>
   387f0:	b	38804 <GetDataSlab+0x10e40>
   387f4:	ldr	r1, [sp, #24]
   387f8:	ldr	r0, [r1, r0, lsl #2]
   387fc:	add	r5, r5, r0
   38800:	add	r4, r0, r4
   38804:	ldr	r0, [sp, #40]	; 0x28
   38808:	ldr	r1, [sp, #56]	; 0x38
   3880c:	add	lr, lr, ip
   38810:	add	r1, r1, r0
   38814:	ldr	r0, [sp, #48]	; 0x30
   38818:	str	r1, [sp, #56]	; 0x38
   3881c:	ldr	r1, [sp, #52]	; 0x34
   38820:	add	r0, r0, #1
   38824:	str	r0, [sp, #48]	; 0x30
   38828:	mov	r0, #0
   3882c:	cmp	lr, r1
   38830:	blt	3866c <GetDataSlab+0x10ca8>
   38834:	b	47ffc <GetDataSlab+0x20638>
   38838:	ldr	r0, [fp, #16]
   3883c:	mov	ip, #0
   38840:	sub	r8, fp, #96	; 0x60
   38844:	ldr	r0, [r0]
   38848:	str	r0, [sp, #28]
   3884c:	sub	r0, r0, #1
   38850:	str	r0, [fp, #-96]	; 0xffffffa0
   38854:	ldr	r0, [fp, #8]
   38858:	ldr	r0, [r0]
   3885c:	str	r0, [fp, #-176]	; 0xffffff50
   38860:	str	r0, [sp, #40]	; 0x28
   38864:	ldr	r0, [fp, #24]
   38868:	ldr	r1, [sl]
   3886c:	cmp	r0, #2
   38870:	str	r1, [sp, #44]	; 0x2c
   38874:	str	r1, [sp, #56]	; 0x38
   38878:	blt	389c4 <GetDataSlab+0x11000>
   3887c:	ldr	r0, [fp, #8]
   38880:	ldr	r3, [sp, #40]	; 0x28
   38884:	ldr	r1, [sp, #44]	; 0x2c
   38888:	mov	r5, lr
   3888c:	mov	r4, #1
   38890:	mov	r9, #0
   38894:	mov	ip, #0
   38898:	sub	r7, r0, #4
   3889c:	sub	r6, r0, #12
   388a0:	mvn	r0, #15
   388a4:	mov	lr, r3
   388a8:	str	r1, [sp, #56]	; 0x38
   388ac:	ldr	r1, [fp, #16]
   388b0:	add	r9, r9, #1
   388b4:	cmp	r9, #4
   388b8:	ldr	r1, [r1, r4, lsl #2]
   388bc:	str	r3, [r5, r4, lsl #2]
   388c0:	sub	sl, r1, #1
   388c4:	ldr	r1, [fp, #8]
   388c8:	str	sl, [r8, r4, lsl #2]
   388cc:	ldr	r1, [r1, r4, lsl #2]
   388d0:	str	r1, [sp, #52]	; 0x34
   388d4:	bcs	388e0 <GetDataSlab+0x10f1c>
   388d8:	mov	r5, r4
   388dc:	b	38964 <GetDataSlab+0x10fa0>
   388e0:	vmov.i32	q9, #1	; 0x00000001
   388e4:	vmov.i32	q10, #1	; 0x00000001
   388e8:	vmov.i32	q8, #1	; 0x00000001
   388ec:	vmov.32	d23[1], r1
   388f0:	bic	r1, r9, #3
   388f4:	bic	r8, r4, #3
   388f8:	vmov.32	d18[0], r3
   388fc:	vmov.32	d20[0], sl
   38900:	sub	r5, r4, r1
   38904:	mov	r3, r6
   38908:	vorr	d16, d18, d18
   3890c:	vmov.i32	q9, #1	; 0x00000001
   38910:	vorr	d18, d20, d20
   38914:	vld1.32	{d20-d21}, [r3], r0
   38918:	subs	r8, r8, #4
   3891c:	vrev64.32	q12, q10
   38920:	vext.8	q12, q12, q12, #8
   38924:	vext.8	q11, q11, q12, #12
   38928:	vmul.i32	q9, q9, q12
   3892c:	vmul.i32	q8, q11, q8
   38930:	vorr	q11, q12, q12
   38934:	bne	38914 <GetDataSlab+0x10f50>
   38938:	vext.8	q11, q9, q8, #8
   3893c:	vext.8	q12, q8, q8, #8
   38940:	cmp	r9, r1
   38944:	vmul.i32	q0, q9, q11
   38948:	vmul.i32	q1, q8, q12
   3894c:	vmul.i32	q8, q0, d0[1]
   38950:	vmul.i32	q9, q1, d2[1]
   38954:	vmov.32	sl, d16[0]
   38958:	vmov.32	r3, d18[0]
   3895c:	beq	38978 <GetDataSlab+0x10fb4>
   38960:	vmov.32	r1, d20[0]
   38964:	mul	r3, r1, r3
   38968:	ldr	r1, [r7, r5, lsl #2]
   3896c:	subs	r5, r5, #1
   38970:	mul	sl, sl, r1
   38974:	bne	38964 <GetDataSlab+0x10fa0>
   38978:	ldr	r1, [fp, #12]
   3897c:	sub	r5, fp, #176	; 0xb0
   38980:	sub	r8, fp, #96	; 0x60
   38984:	ldr	r2, [sp, #56]	; 0x38
   38988:	add	r6, r6, #4
   3898c:	str	sl, [r8, r4, lsl #2]
   38990:	str	r3, [r5, r4, lsl #2]
   38994:	ldr	sl, [fp, #20]
   38998:	ldr	r1, [r1, r4, lsl #2]
   3899c:	mla	ip, r1, lr, ip
   389a0:	ldr	r1, [sl, r4, lsl #2]
   389a4:	mov	lr, r3
   389a8:	ldr	r3, [sp, #52]	; 0x34
   389ac:	add	r4, r4, #1
   389b0:	mul	r2, r1, r2
   389b4:	ldr	r1, [fp, #24]
   389b8:	str	r2, [sp, #56]	; 0x38
   389bc:	cmp	r4, r1
   389c0:	bne	388ac <GetDataSlab+0x10ee8>
   389c4:	ldr	r0, [sp, #48]	; 0x30
   389c8:	ldr	r1, [sp, #28]
   389cc:	add	lr, r0, ip, lsl #1
   389d0:	cmp	r1, #1
   389d4:	bne	44c7c <GetDataSlab+0x1d2b8>
   389d8:	ldr	r0, [sp, #56]	; 0x38
   389dc:	ldr	r1, [sp, #44]	; 0x2c
   389e0:	cmp	r0, #1
   389e4:	blt	47ff8 <GetDataSlab+0x20634>
   389e8:	sub	r0, fp, #136	; 0x88
   389ec:	add	r7, sl, #4
   389f0:	mov	sl, #0
   389f4:	add	r2, sp, #224	; 0xe0
   389f8:	mov	r9, #0
   389fc:	orr	r6, r0, #4
   38a00:	orr	r0, r8, #4
   38a04:	ldr	r8, [fp, #12]
   38a08:	str	r0, [sp, #32]
   38a0c:	lsl	r0, r1, #3
   38a10:	str	r0, [sp, #52]	; 0x34
   38a14:	bic	r0, r1, #1
   38a18:	str	r0, [sp, #36]	; 0x24
   38a1c:	ldr	r0, [r8], #4
   38a20:	str	r0, [sp, #48]	; 0x30
   38a24:	cmp	r1, #1
   38a28:	blt	38aa8 <GetDataSlab+0x110e4>
   38a2c:	mov	r3, #0
   38a30:	beq	38a74 <GetDataSlab+0x110b0>
   38a34:	ldr	r0, [sp, #48]	; 0x30
   38a38:	ldr	r1, [sp, #36]	; 0x24
   38a3c:	ldr	r3, [sp, #60]	; 0x3c
   38a40:	add	r0, lr, r0, lsl #1
   38a44:	ldr	r5, [r0], #4
   38a48:	subs	r1, r1, #2
   38a4c:	str	r5, [sp, #224]	; 0xe0
   38a50:	vld1.32	{d16[0]}, [r2 :32]
   38a54:	vmovl.s16	q8, d16
   38a58:	vmovl.s32	q8, d16
   38a5c:	vst1.64	{d16-d17}, [r3]!
   38a60:	bne	38a44 <GetDataSlab+0x11080>
   38a64:	ldr	r0, [sp, #44]	; 0x2c
   38a68:	ldr	r3, [sp, #36]	; 0x24
   38a6c:	cmp	r0, r3
   38a70:	beq	38aa8 <GetDataSlab+0x110e4>
   38a74:	ldr	r4, [sp, #48]	; 0x30
   38a78:	ldr	r0, [sp, #44]	; 0x2c
   38a7c:	ldr	r1, [sp, #60]	; 0x3c
   38a80:	add	r5, lr, r4, lsl #1
   38a84:	sub	r0, r0, r3
   38a88:	add	r1, r1, r3, lsl #3
   38a8c:	add	r3, r5, r3, lsl #1
   38a90:	ldrsh	r4, [r3], #2
   38a94:	subs	r0, r0, #1
   38a98:	asr	r5, r4, #31
   38a9c:	strd	r4, [r1]
   38aa0:	add	r1, r1, #8
   38aa4:	bne	38a90 <GetDataSlab+0x110cc>
   38aa8:	ldr	r0, [sp, #40]	; 0x28
   38aac:	add	lr, lr, r0, lsl #1
   38ab0:	add	ip, ip, r0
   38ab4:	ldr	r0, [fp, #24]
   38ab8:	cmp	r0, #2
   38abc:	blt	38b68 <GetDataSlab+0x111a4>
   38ac0:	mov	r1, #0
   38ac4:	mov	r0, r1
   38ac8:	ldr	r1, [r6, r1, lsl #2]
   38acc:	add	r1, r1, #1
   38ad0:	str	r1, [r6, r0, lsl #2]
   38ad4:	ldr	r3, [r7, r0, lsl #2]
   38ad8:	sdiv	r4, r1, r3
   38adc:	mls	r1, r4, r3, r1
   38ae0:	cmp	r1, #0
   38ae4:	bne	38b58 <GetDataSlab+0x11194>
   38ae8:	sub	r4, fp, #176	; 0xb0
   38aec:	str	sl, [r6, r0, lsl #2]
   38af0:	add	r1, r4, r0, lsl #2
   38af4:	ldr	r1, [r1, #4]
   38af8:	sdiv	r3, ip, r1
   38afc:	mls	r3, r3, r1, ip
   38b00:	cmp	r3, #0
   38b04:	beq	38b20 <GetDataSlab+0x1115c>
   38b08:	ldr	r4, [r4, r0, lsl #2]
   38b0c:	ldr	r5, [r8, r0, lsl #2]
   38b10:	sub	r1, r1, r3
   38b14:	mla	r1, r5, r4, r1
   38b18:	add	ip, r1, ip
   38b1c:	b	38b3c <GetDataSlab+0x11178>
   38b20:	ldr	r1, [r8, r0, lsl #2]
   38b24:	cmp	r1, #0
   38b28:	beq	38b40 <GetDataSlab+0x1117c>
   38b2c:	sub	r3, fp, #176	; 0xb0
   38b30:	ldr	r3, [r3, r0, lsl #2]
   38b34:	mla	ip, r3, r1, ip
   38b38:	mul	r1, r3, r1
   38b3c:	add	lr, lr, r1, lsl #1
   38b40:	ldr	r3, [fp, #24]
   38b44:	add	r1, r0, #1
   38b48:	add	r0, r0, #2
   38b4c:	cmp	r0, r3
   38b50:	blt	38ac4 <GetDataSlab+0x11100>
   38b54:	b	38b68 <GetDataSlab+0x111a4>
   38b58:	ldr	r1, [sp, #32]
   38b5c:	ldr	r0, [r1, r0, lsl #2]
   38b60:	add	lr, lr, r0, lsl #1
   38b64:	add	ip, r0, ip
   38b68:	ldr	r0, [sp, #60]	; 0x3c
   38b6c:	ldr	r1, [sp, #52]	; 0x34
   38b70:	ldr	r3, [sp, #56]	; 0x38
   38b74:	add	r0, r0, r1
   38b78:	ldr	r1, [sp, #44]	; 0x2c
   38b7c:	str	r0, [sp, #60]	; 0x3c
   38b80:	mov	r0, #0
   38b84:	add	r9, r9, r1
   38b88:	cmp	r9, r3
   38b8c:	blt	38a24 <GetDataSlab+0x11060>
   38b90:	b	47ffc <GetDataSlab+0x20638>
   38b94:	ldr	r0, [fp, #16]
   38b98:	mov	r9, #0
   38b9c:	sub	r8, fp, #96	; 0x60
   38ba0:	ldr	r0, [r0]
   38ba4:	str	r0, [sp, #24]
   38ba8:	sub	r0, r0, #1
   38bac:	str	r0, [fp, #-96]	; 0xffffffa0
   38bb0:	ldr	r0, [fp, #8]
   38bb4:	ldr	r0, [r0]
   38bb8:	str	r0, [fp, #-176]	; 0xffffff50
   38bbc:	str	r0, [sp, #44]	; 0x2c
   38bc0:	ldr	r0, [fp, #24]
   38bc4:	ldr	r1, [sl]
   38bc8:	cmp	r0, #2
   38bcc:	str	r1, [sp, #52]	; 0x34
   38bd0:	str	r1, [sp, #56]	; 0x38
   38bd4:	blt	38d20 <GetDataSlab+0x1135c>
   38bd8:	ldr	r0, [fp, #8]
   38bdc:	ldr	r3, [sp, #44]	; 0x2c
   38be0:	ldr	r6, [sp, #52]	; 0x34
   38be4:	mov	r4, #1
   38be8:	mov	r2, #0
   38bec:	mov	r9, #0
   38bf0:	sub	r1, r0, #4
   38bf4:	sub	r7, r0, #12
   38bf8:	mvn	r0, #15
   38bfc:	mov	sl, r3
   38c00:	str	r6, [sp, #56]	; 0x38
   38c04:	ldr	r6, [fp, #16]
   38c08:	add	r2, r2, #1
   38c0c:	cmp	r2, #4
   38c10:	ldr	r6, [r6, r4, lsl #2]
   38c14:	str	r3, [lr, r4, lsl #2]
   38c18:	sub	lr, r6, #1
   38c1c:	ldr	r6, [fp, #8]
   38c20:	str	lr, [r8, r4, lsl #2]
   38c24:	ldr	ip, [r6, r4, lsl #2]
   38c28:	bcs	38c38 <GetDataSlab+0x11274>
   38c2c:	mov	r5, ip
   38c30:	mov	r6, r4
   38c34:	b	38cbc <GetDataSlab+0x112f8>
   38c38:	vmov.i32	q9, #1	; 0x00000001
   38c3c:	vmov.i32	q10, #1	; 0x00000001
   38c40:	vmov.i32	q8, #1	; 0x00000001
   38c44:	bic	r5, r2, #3
   38c48:	bic	r8, r4, #3
   38c4c:	vmov.32	d23[1], ip
   38c50:	vmov.32	d18[0], r3
   38c54:	vmov.32	d20[0], lr
   38c58:	sub	r6, r4, r5
   38c5c:	mov	r3, r7
   38c60:	vorr	d16, d18, d18
   38c64:	vmov.i32	q9, #1	; 0x00000001
   38c68:	vorr	d18, d20, d20
   38c6c:	vld1.32	{d20-d21}, [r3], r0
   38c70:	subs	r8, r8, #4
   38c74:	vrev64.32	q12, q10
   38c78:	vext.8	q12, q12, q12, #8
   38c7c:	vext.8	q11, q11, q12, #12
   38c80:	vmul.i32	q9, q9, q12
   38c84:	vmul.i32	q8, q11, q8
   38c88:	vorr	q11, q12, q12
   38c8c:	bne	38c6c <GetDataSlab+0x112a8>
   38c90:	vext.8	q11, q9, q8, #8
   38c94:	vext.8	q12, q8, q8, #8
   38c98:	cmp	r2, r5
   38c9c:	vmul.i32	q0, q9, q11
   38ca0:	vmul.i32	q1, q8, q12
   38ca4:	vmul.i32	q8, q0, d0[1]
   38ca8:	vmul.i32	q9, q1, d2[1]
   38cac:	vmov.32	lr, d16[0]
   38cb0:	vmov.32	r3, d18[0]
   38cb4:	beq	38cd0 <GetDataSlab+0x1130c>
   38cb8:	vmov.32	r5, d20[0]
   38cbc:	mul	r3, r5, r3
   38cc0:	ldr	r5, [r1, r6, lsl #2]
   38cc4:	subs	r6, r6, #1
   38cc8:	mul	lr, lr, r5
   38ccc:	bne	38cbc <GetDataSlab+0x112f8>
   38cd0:	sub	r5, fp, #176	; 0xb0
   38cd4:	sub	r8, fp, #96	; 0x60
   38cd8:	add	r7, r7, #4
   38cdc:	str	lr, [r8, r4, lsl #2]
   38ce0:	str	r3, [r5, r4, lsl #2]
   38ce4:	mov	lr, r5
   38ce8:	ldr	r5, [fp, #12]
   38cec:	ldr	r6, [r5, r4, lsl #2]
   38cf0:	ldr	r5, [fp, #20]
   38cf4:	mla	r9, r6, sl, r9
   38cf8:	ldr	r6, [r5, r4, lsl #2]
   38cfc:	ldr	r5, [sp, #56]	; 0x38
   38d00:	add	r4, r4, #1
   38d04:	mov	sl, r3
   38d08:	mov	r3, ip
   38d0c:	mul	r5, r6, r5
   38d10:	ldr	r6, [fp, #24]
   38d14:	str	r5, [sp, #56]	; 0x38
   38d18:	cmp	r4, r6
   38d1c:	bne	38c04 <GetDataSlab+0x11240>
   38d20:	ldr	r0, [sp, #48]	; 0x30
   38d24:	ldr	r7, [sp, #24]
   38d28:	add	r4, r0, r9, lsl #1
   38d2c:	cmp	r7, #1
   38d30:	bne	44e00 <GetDataSlab+0x1d43c>
   38d34:	ldr	r0, [sp, #56]	; 0x38
   38d38:	sub	r1, fp, #96	; 0x60
   38d3c:	cmp	r0, #1
   38d40:	ldr	r0, [fp, #20]
   38d44:	blt	47ff8 <GetDataSlab+0x20634>
   38d48:	ldr	r2, [sp, #52]	; 0x34
   38d4c:	add	sl, r0, #4
   38d50:	sub	r0, fp, #136	; 0x88
   38d54:	ldr	r8, [fp, #12]
   38d58:	mov	ip, #0
   38d5c:	orr	r6, r0, #4
   38d60:	orr	r0, r1, #4
   38d64:	add	r1, sp, #228	; 0xe4
   38d68:	str	r0, [sp, #28]
   38d6c:	lsl	r0, r2, #3
   38d70:	str	r0, [sp, #40]	; 0x28
   38d74:	bic	r0, r2, #1
   38d78:	str	r0, [sp, #32]
   38d7c:	ldr	r0, [r8], #4
   38d80:	str	r0, [sp, #36]	; 0x24
   38d84:	mov	r0, #0
   38d88:	str	r0, [sp, #48]	; 0x30
   38d8c:	cmp	r2, #1
   38d90:	blt	38e04 <GetDataSlab+0x11440>
   38d94:	mov	r5, #0
   38d98:	beq	38dd8 <GetDataSlab+0x11414>
   38d9c:	ldr	r0, [sp, #36]	; 0x24
   38da0:	ldr	r5, [sp, #32]
   38da4:	ldr	r3, [sp, #60]	; 0x3c
   38da8:	add	r0, r4, r0, lsl #1
   38dac:	ldr	r7, [r0], #4
   38db0:	subs	r5, r5, #2
   38db4:	str	r7, [sp, #228]	; 0xe4
   38db8:	vld1.32	{d16[0]}, [r1 :32]
   38dbc:	vmovl.u16	q8, d16
   38dc0:	vmovl.u32	q8, d16
   38dc4:	vst1.64	{d16-d17}, [r3]!
   38dc8:	bne	38dac <GetDataSlab+0x113e8>
   38dcc:	ldr	r5, [sp, #32]
   38dd0:	cmp	r2, r5
   38dd4:	beq	38e04 <GetDataSlab+0x11440>
   38dd8:	sub	r0, r2, r5
   38ddc:	ldr	r2, [sp, #36]	; 0x24
   38de0:	ldr	r3, [sp, #60]	; 0x3c
   38de4:	add	r7, r4, r2, lsl #1
   38de8:	add	r3, r3, r5, lsl #3
   38dec:	add	r5, r7, r5, lsl #1
   38df0:	ldrh	r7, [r5], #2
   38df4:	subs	r0, r0, #1
   38df8:	stm	r3, {r7, ip}
   38dfc:	add	r3, r3, #8
   38e00:	bne	38df0 <GetDataSlab+0x1142c>
   38e04:	ldr	r0, [sp, #44]	; 0x2c
   38e08:	sub	r2, fp, #176	; 0xb0
   38e0c:	add	r4, r4, r0, lsl #1
   38e10:	add	r9, r9, r0
   38e14:	ldr	r0, [fp, #24]
   38e18:	cmp	r0, #2
   38e1c:	blt	38ec4 <GetDataSlab+0x11500>
   38e20:	mov	r3, #0
   38e24:	mov	r0, r3
   38e28:	ldr	r3, [r6, r3, lsl #2]
   38e2c:	add	r3, r3, #1
   38e30:	str	r3, [r6, r0, lsl #2]
   38e34:	ldr	r5, [sl, r0, lsl #2]
   38e38:	sdiv	r7, r3, r5
   38e3c:	mls	r3, r7, r5, r3
   38e40:	cmp	r3, #0
   38e44:	bne	38eb4 <GetDataSlab+0x114f0>
   38e48:	add	r3, r2, r0, lsl #2
   38e4c:	str	ip, [r6, r0, lsl #2]
   38e50:	ldr	r3, [r3, #4]
   38e54:	sdiv	r5, r9, r3
   38e58:	mls	r5, r5, r3, r9
   38e5c:	cmp	r5, #0
   38e60:	beq	38e80 <GetDataSlab+0x114bc>
   38e64:	ldr	r7, [r2, r0, lsl #2]
   38e68:	ldr	lr, [r8, r0, lsl #2]
   38e6c:	sub	r3, r3, r5
   38e70:	sub	r2, fp, #176	; 0xb0
   38e74:	mla	r3, lr, r7, r3
   38e78:	add	r9, r3, r9
   38e7c:	b	38e98 <GetDataSlab+0x114d4>
   38e80:	ldr	r3, [r8, r0, lsl #2]
   38e84:	cmp	r3, #0
   38e88:	beq	38e9c <GetDataSlab+0x114d8>
   38e8c:	ldr	r7, [r2, r0, lsl #2]
   38e90:	mla	r9, r7, r3, r9
   38e94:	mul	r3, r7, r3
   38e98:	add	r4, r4, r3, lsl #1
   38e9c:	ldr	r7, [fp, #24]
   38ea0:	add	r3, r0, #1
   38ea4:	add	r0, r0, #2
   38ea8:	cmp	r0, r7
   38eac:	blt	38e24 <GetDataSlab+0x11460>
   38eb0:	b	38ec4 <GetDataSlab+0x11500>
   38eb4:	ldr	r2, [sp, #28]
   38eb8:	ldr	r0, [r2, r0, lsl #2]
   38ebc:	add	r4, r4, r0, lsl #1
   38ec0:	add	r9, r0, r9
   38ec4:	ldr	r0, [sp, #60]	; 0x3c
   38ec8:	ldr	r2, [sp, #40]	; 0x28
   38ecc:	ldr	r7, [sp, #48]	; 0x30
   38ed0:	ldr	r3, [sp, #56]	; 0x38
   38ed4:	add	r0, r0, r2
   38ed8:	ldr	r2, [sp, #52]	; 0x34
   38edc:	str	r0, [sp, #60]	; 0x3c
   38ee0:	mov	r0, #0
   38ee4:	add	r7, r7, r2
   38ee8:	cmp	r7, r3
   38eec:	str	r7, [sp, #48]	; 0x30
   38ef0:	blt	38d8c <GetDataSlab+0x113c8>
   38ef4:	b	47ffc <GetDataSlab+0x20638>
   38ef8:	ldr	r0, [fp, #16]
   38efc:	mov	r3, #0
   38f00:	sub	r7, fp, #96	; 0x60
   38f04:	ldr	r0, [r0]
   38f08:	str	r0, [sp, #28]
   38f0c:	sub	r0, r0, #1
   38f10:	str	r0, [fp, #-96]	; 0xffffffa0
   38f14:	ldr	r0, [fp, #8]
   38f18:	ldr	r0, [r0]
   38f1c:	str	r0, [fp, #-176]	; 0xffffff50
   38f20:	str	r0, [sp, #40]	; 0x28
   38f24:	ldr	r0, [fp, #24]
   38f28:	ldr	r1, [sl]
   38f2c:	cmp	r0, #2
   38f30:	str	r1, [sp, #44]	; 0x2c
   38f34:	str	r1, [sp, #56]	; 0x38
   38f38:	blt	39080 <GetDataSlab+0x116bc>
   38f3c:	ldr	r0, [fp, #8]
   38f40:	ldr	r2, [sp, #40]	; 0x28
   38f44:	mov	r5, #1
   38f48:	mov	r8, #0
   38f4c:	mvn	r4, #15
   38f50:	mov	r3, #0
   38f54:	sub	r1, r0, #4
   38f58:	sub	ip, r0, #12
   38f5c:	ldr	r0, [sp, #44]	; 0x2c
   38f60:	mov	r9, r2
   38f64:	str	r0, [sp, #56]	; 0x38
   38f68:	ldr	r0, [fp, #16]
   38f6c:	add	r8, r8, #1
   38f70:	cmp	r8, #4
   38f74:	ldr	r0, [r0, r5, lsl #2]
   38f78:	str	r2, [lr, r5, lsl #2]
   38f7c:	sub	r0, r0, #1
   38f80:	str	r0, [r7, r5, lsl #2]
   38f84:	ldr	r7, [fp, #8]
   38f88:	ldr	r7, [r7, r5, lsl #2]
   38f8c:	str	r7, [sp, #52]	; 0x34
   38f90:	bcs	38f9c <GetDataSlab+0x115d8>
   38f94:	mov	r6, r5
   38f98:	b	39024 <GetDataSlab+0x11660>
   38f9c:	vmov.i32	q9, #1	; 0x00000001
   38fa0:	vmov.i32	q10, #1	; 0x00000001
   38fa4:	vmov.i32	q8, #1	; 0x00000001
   38fa8:	vmov.32	d23[1], r7
   38fac:	bic	r7, r8, #3
   38fb0:	bic	sl, r5, #3
   38fb4:	vmov.32	d18[0], r2
   38fb8:	vmov.32	d20[0], r0
   38fbc:	sub	r6, r5, r7
   38fc0:	mov	r0, ip
   38fc4:	vorr	d16, d18, d18
   38fc8:	vmov.i32	q9, #1	; 0x00000001
   38fcc:	vorr	d18, d20, d20
   38fd0:	vld1.32	{d20-d21}, [r0], r4
   38fd4:	subs	sl, sl, #4
   38fd8:	vrev64.32	q12, q10
   38fdc:	vext.8	q12, q12, q12, #8
   38fe0:	vext.8	q11, q11, q12, #12
   38fe4:	vmul.i32	q9, q9, q12
   38fe8:	vmul.i32	q8, q11, q8
   38fec:	vorr	q11, q12, q12
   38ff0:	bne	38fd0 <GetDataSlab+0x1160c>
   38ff4:	vext.8	q11, q9, q8, #8
   38ff8:	vext.8	q12, q8, q8, #8
   38ffc:	ldr	sl, [fp, #20]
   39000:	cmp	r8, r7
   39004:	vmul.i32	q0, q9, q11
   39008:	vmul.i32	q1, q8, q12
   3900c:	vmul.i32	q8, q0, d0[1]
   39010:	vmul.i32	q9, q1, d2[1]
   39014:	vmov.32	r0, d16[0]
   39018:	vmov.32	r2, d18[0]
   3901c:	beq	39038 <GetDataSlab+0x11674>
   39020:	vmov.32	r7, d20[0]
   39024:	mul	r2, r7, r2
   39028:	ldr	r7, [r1, r6, lsl #2]
   3902c:	subs	r6, r6, #1
   39030:	mul	r0, r0, r7
   39034:	bne	39024 <GetDataSlab+0x11660>
   39038:	sub	r7, fp, #96	; 0x60
   3903c:	sub	lr, fp, #176	; 0xb0
   39040:	ldr	r6, [sp, #56]	; 0x38
   39044:	add	ip, ip, #4
   39048:	str	r0, [r7, r5, lsl #2]
   3904c:	ldr	r0, [fp, #12]
   39050:	str	r2, [lr, r5, lsl #2]
   39054:	ldr	r0, [r0, r5, lsl #2]
   39058:	mla	r3, r0, r9, r3
   3905c:	ldr	r0, [sl, r5, lsl #2]
   39060:	mov	r9, r2
   39064:	ldr	r2, [sp, #52]	; 0x34
   39068:	add	r5, r5, #1
   3906c:	mul	r6, r0, r6
   39070:	ldr	r0, [fp, #24]
   39074:	str	r6, [sp, #56]	; 0x38
   39078:	cmp	r5, r0
   3907c:	bne	38f68 <GetDataSlab+0x115a4>
   39080:	ldr	r0, [sp, #48]	; 0x30
   39084:	ldr	r6, [sp, #28]
   39088:	add	sl, r0, r3, lsl #2
   3908c:	cmp	r6, #1
   39090:	bne	44f9c <GetDataSlab+0x1d5d8>
   39094:	ldr	r0, [sp, #56]	; 0x38
   39098:	sub	r1, fp, #96	; 0x60
   3909c:	cmp	r0, #1
   390a0:	ldr	r0, [fp, #12]
   390a4:	blt	47ff8 <GetDataSlab+0x20634>
   390a8:	add	r9, r0, #4
   390ac:	ldr	r0, [fp, #20]
   390b0:	add	lr, r0, #4
   390b4:	sub	r0, fp, #136	; 0x88
   390b8:	orr	r5, r0, #4
   390bc:	orr	r0, r1, #4
   390c0:	ldr	r1, [sp, #44]	; 0x2c
   390c4:	str	r0, [sp, #32]
   390c8:	lsl	r0, r1, #3
   390cc:	str	r0, [sp, #48]	; 0x30
   390d0:	bic	r0, r1, #1
   390d4:	str	r0, [sp, #36]	; 0x24
   390d8:	mov	r0, #0
   390dc:	str	r0, [sp, #52]	; 0x34
   390e0:	ldr	ip, [sp, #60]	; 0x3c
   390e4:	cmp	r1, #1
   390e8:	blt	39174 <GetDataSlab+0x117b0>
   390ec:	ldr	r0, [fp, #12]
   390f0:	mov	r2, #0
   390f4:	ldr	r6, [r0]
   390f8:	beq	39144 <GetDataSlab+0x11780>
   390fc:	ldr	r1, [sp, #36]	; 0x24
   39100:	add	r2, sl, r6, lsl #2
   39104:	mov	r0, ip
   39108:	add	r4, sp, #208	; 0xd0
   3910c:	ldm	r2, {r8, ip}
   39110:	subs	r1, r1, #2
   39114:	add	r2, r2, #8
   39118:	str	ip, [sp, #212]	; 0xd4
   3911c:	str	r8, [sp, #208]	; 0xd0
   39120:	vld1.32	{d16}, [r4 :64]
   39124:	vmovl.s32	q8, d16
   39128:	vst1.64	{d16-d17}, [r0]!
   3912c:	bne	3910c <GetDataSlab+0x11748>
   39130:	ldr	r0, [sp, #44]	; 0x2c
   39134:	ldr	r2, [sp, #36]	; 0x24
   39138:	ldr	ip, [sp, #60]	; 0x3c
   3913c:	cmp	r0, r2
   39140:	beq	39174 <GetDataSlab+0x117b0>
   39144:	ldr	r0, [sp, #44]	; 0x2c
   39148:	sub	r7, r0, r2
   3914c:	add	r0, ip, r2, lsl #3
   39150:	add	r2, r2, r6
   39154:	add	r2, sl, r2, lsl #2
   39158:	ldr	r8, [r2], #4
   3915c:	subs	r7, r7, #1
   39160:	asr	r1, r8, #31
   39164:	str	r8, [r0]
   39168:	str	r1, [r0, #4]
   3916c:	add	r0, r0, #8
   39170:	bne	39158 <GetDataSlab+0x11794>
   39174:	ldr	r0, [sp, #40]	; 0x28
   39178:	add	sl, sl, r0, lsl #2
   3917c:	add	r3, r3, r0
   39180:	ldr	r0, [fp, #24]
   39184:	cmp	r0, #2
   39188:	blt	39238 <GetDataSlab+0x11874>
   3918c:	mov	r1, #0
   39190:	mov	r4, #0
   39194:	mov	r0, r1
   39198:	ldr	r1, [r5, r1, lsl #2]
   3919c:	add	r1, r1, #1
   391a0:	str	r1, [r5, r0, lsl #2]
   391a4:	ldr	r2, [lr, r0, lsl #2]
   391a8:	sdiv	r7, r1, r2
   391ac:	mls	r1, r7, r2, r1
   391b0:	cmp	r1, #0
   391b4:	bne	39228 <GetDataSlab+0x11864>
   391b8:	sub	r6, fp, #176	; 0xb0
   391bc:	str	r4, [r5, r0, lsl #2]
   391c0:	add	r1, r6, r0, lsl #2
   391c4:	ldr	r1, [r1, #4]
   391c8:	sdiv	r2, r3, r1
   391cc:	mls	r2, r2, r1, r3
   391d0:	cmp	r2, #0
   391d4:	beq	391f0 <GetDataSlab+0x1182c>
   391d8:	ldr	r7, [r6, r0, lsl #2]
   391dc:	ldr	r6, [r9, r0, lsl #2]
   391e0:	sub	r1, r1, r2
   391e4:	mla	r1, r6, r7, r1
   391e8:	add	r3, r1, r3
   391ec:	b	3920c <GetDataSlab+0x11848>
   391f0:	ldr	r1, [r9, r0, lsl #2]
   391f4:	cmp	r1, #0
   391f8:	beq	39210 <GetDataSlab+0x1184c>
   391fc:	sub	r2, fp, #176	; 0xb0
   39200:	ldr	r2, [r2, r0, lsl #2]
   39204:	mla	r3, r2, r1, r3
   39208:	mul	r1, r2, r1
   3920c:	add	sl, sl, r1, lsl #2
   39210:	ldr	r2, [fp, #24]
   39214:	add	r1, r0, #1
   39218:	add	r0, r0, #2
   3921c:	cmp	r0, r2
   39220:	blt	39194 <GetDataSlab+0x117d0>
   39224:	b	39238 <GetDataSlab+0x11874>
   39228:	ldr	r1, [sp, #32]
   3922c:	ldr	r0, [r1, r0, lsl #2]
   39230:	add	sl, sl, r0, lsl #2
   39234:	add	r3, r0, r3
   39238:	ldr	r1, [sp, #44]	; 0x2c
   3923c:	ldr	r7, [sp, #52]	; 0x34
   39240:	ldr	r0, [sp, #48]	; 0x30
   39244:	ldr	r2, [sp, #56]	; 0x38
   39248:	add	r7, r7, r1
   3924c:	add	ip, ip, r0
   39250:	mov	r0, #0
   39254:	cmp	r7, r2
   39258:	str	ip, [sp, #60]	; 0x3c
   3925c:	str	r7, [sp, #52]	; 0x34
   39260:	blt	390e0 <GetDataSlab+0x1171c>
   39264:	b	47ffc <GetDataSlab+0x20638>
   39268:	ldr	r0, [fp, #16]
   3926c:	mov	r3, #0
   39270:	sub	r7, fp, #96	; 0x60
   39274:	ldr	r0, [r0]
   39278:	str	r0, [sp, #32]
   3927c:	sub	r0, r0, #1
   39280:	str	r0, [fp, #-96]	; 0xffffffa0
   39284:	ldr	r0, [fp, #8]
   39288:	ldr	r0, [r0]
   3928c:	str	r0, [fp, #-176]	; 0xffffff50
   39290:	str	r0, [sp, #40]	; 0x28
   39294:	ldr	r0, [fp, #24]
   39298:	ldr	r1, [sl]
   3929c:	cmp	r0, #2
   392a0:	str	r1, [sp, #44]	; 0x2c
   392a4:	str	r1, [sp, #56]	; 0x38
   392a8:	blt	393f4 <GetDataSlab+0x11a30>
   392ac:	ldr	r0, [fp, #8]
   392b0:	ldr	r2, [sp, #40]	; 0x28
   392b4:	mov	r6, lr
   392b8:	mov	r5, #1
   392bc:	mov	r8, #0
   392c0:	mvn	lr, #15
   392c4:	mov	r3, #0
   392c8:	sub	r1, r0, #4
   392cc:	sub	ip, r0, #12
   392d0:	ldr	r0, [sp, #44]	; 0x2c
   392d4:	mov	r9, r2
   392d8:	str	r0, [sp, #56]	; 0x38
   392dc:	ldr	r0, [fp, #16]
   392e0:	add	r8, r8, #1
   392e4:	cmp	r8, #4
   392e8:	ldr	r0, [r0, r5, lsl #2]
   392ec:	str	r2, [r6, r5, lsl #2]
   392f0:	sub	r0, r0, #1
   392f4:	str	r0, [r7, r5, lsl #2]
   392f8:	ldr	r7, [fp, #8]
   392fc:	ldr	r7, [r7, r5, lsl #2]
   39300:	str	r7, [sp, #52]	; 0x34
   39304:	bcs	39310 <GetDataSlab+0x1194c>
   39308:	mov	r6, r5
   3930c:	b	39398 <GetDataSlab+0x119d4>
   39310:	vmov.i32	q9, #1	; 0x00000001
   39314:	vmov.i32	q10, #1	; 0x00000001
   39318:	vmov.i32	q8, #1	; 0x00000001
   3931c:	vmov.32	d23[1], r7
   39320:	bic	r7, r8, #3
   39324:	bic	sl, r5, #3
   39328:	vmov.32	d18[0], r2
   3932c:	vmov.32	d20[0], r0
   39330:	sub	r6, r5, r7
   39334:	mov	r0, ip
   39338:	vorr	d16, d18, d18
   3933c:	vmov.i32	q9, #1	; 0x00000001
   39340:	vorr	d18, d20, d20
   39344:	vld1.32	{d20-d21}, [r0], lr
   39348:	subs	sl, sl, #4
   3934c:	vrev64.32	q12, q10
   39350:	vext.8	q12, q12, q12, #8
   39354:	vext.8	q11, q11, q12, #12
   39358:	vmul.i32	q9, q9, q12
   3935c:	vmul.i32	q8, q11, q8
   39360:	vorr	q11, q12, q12
   39364:	bne	39344 <GetDataSlab+0x11980>
   39368:	vext.8	q11, q9, q8, #8
   3936c:	vext.8	q12, q8, q8, #8
   39370:	ldr	sl, [fp, #20]
   39374:	cmp	r8, r7
   39378:	vmul.i32	q0, q9, q11
   3937c:	vmul.i32	q1, q8, q12
   39380:	vmul.i32	q8, q0, d0[1]
   39384:	vmul.i32	q9, q1, d2[1]
   39388:	vmov.32	r0, d16[0]
   3938c:	vmov.32	r2, d18[0]
   39390:	beq	393ac <GetDataSlab+0x119e8>
   39394:	vmov.32	r7, d20[0]
   39398:	mul	r2, r7, r2
   3939c:	ldr	r7, [r1, r6, lsl #2]
   393a0:	subs	r6, r6, #1
   393a4:	mul	r0, r0, r7
   393a8:	bne	39398 <GetDataSlab+0x119d4>
   393ac:	sub	r7, fp, #96	; 0x60
   393b0:	sub	r6, fp, #176	; 0xb0
   393b4:	ldr	r4, [sp, #56]	; 0x38
   393b8:	add	ip, ip, #4
   393bc:	str	r0, [r7, r5, lsl #2]
   393c0:	ldr	r0, [fp, #12]
   393c4:	str	r2, [r6, r5, lsl #2]
   393c8:	ldr	r0, [r0, r5, lsl #2]
   393cc:	mla	r3, r0, r9, r3
   393d0:	ldr	r0, [sl, r5, lsl #2]
   393d4:	mov	r9, r2
   393d8:	ldr	r2, [sp, #52]	; 0x34
   393dc:	add	r5, r5, #1
   393e0:	mul	r4, r0, r4
   393e4:	ldr	r0, [fp, #24]
   393e8:	str	r4, [sp, #56]	; 0x38
   393ec:	cmp	r5, r0
   393f0:	bne	392dc <GetDataSlab+0x11918>
   393f4:	ldr	r0, [sp, #48]	; 0x30
   393f8:	ldr	r4, [sp, #32]
   393fc:	add	lr, r0, r3, lsl #2
   39400:	cmp	r4, #1
   39404:	bne	45144 <GetDataSlab+0x1d780>
   39408:	ldr	r0, [sp, #56]	; 0x38
   3940c:	sub	r2, fp, #96	; 0x60
   39410:	cmp	r0, #1
   39414:	ldr	r0, [fp, #12]
   39418:	blt	47ff8 <GetDataSlab+0x20634>
   3941c:	mov	r1, sl
   39420:	add	sl, r0, #4
   39424:	sub	r0, fp, #136	; 0x88
   39428:	mov	r9, #0
   3942c:	add	r4, r1, #4
   39430:	ldr	r1, [sp, #44]	; 0x2c
   39434:	orr	r5, r0, #4
   39438:	orr	r0, r2, #4
   3943c:	str	r0, [sp, #32]
   39440:	lsl	r0, r1, #3
   39444:	str	r0, [sp, #48]	; 0x30
   39448:	bic	r0, r1, #1
   3944c:	str	r0, [sp, #36]	; 0x24
   39450:	mov	r0, #0
   39454:	str	r0, [sp, #52]	; 0x34
   39458:	ldr	ip, [sp, #60]	; 0x3c
   3945c:	cmp	r1, #1
   39460:	blt	394e4 <GetDataSlab+0x11b20>
   39464:	ldr	r0, [fp, #12]
   39468:	mov	r7, #0
   3946c:	ldr	r6, [r0]
   39470:	beq	394bc <GetDataSlab+0x11af8>
   39474:	ldr	r0, [sp, #36]	; 0x24
   39478:	add	r2, lr, r6, lsl #2
   3947c:	mov	r7, ip
   39480:	add	r1, sp, #216	; 0xd8
   39484:	ldm	r2, {r8, ip}
   39488:	subs	r0, r0, #2
   3948c:	add	r2, r2, #8
   39490:	str	ip, [sp, #220]	; 0xdc
   39494:	str	r8, [sp, #216]	; 0xd8
   39498:	vld1.32	{d16}, [r1 :64]
   3949c:	vmovl.u32	q8, d16
   394a0:	vst1.64	{d16-d17}, [r7]!
   394a4:	bne	39484 <GetDataSlab+0x11ac0>
   394a8:	ldr	r0, [sp, #44]	; 0x2c
   394ac:	ldr	r7, [sp, #36]	; 0x24
   394b0:	ldr	ip, [sp, #60]	; 0x3c
   394b4:	cmp	r0, r7
   394b8:	beq	394e4 <GetDataSlab+0x11b20>
   394bc:	ldr	r0, [sp, #44]	; 0x2c
   394c0:	add	r2, ip, r7, lsl #3
   394c4:	sub	r0, r0, r7
   394c8:	add	r7, r7, r6
   394cc:	add	r7, lr, r7, lsl #2
   394d0:	ldr	r8, [r7], #4
   394d4:	subs	r0, r0, #1
   394d8:	strd	r8, [r2]
   394dc:	add	r2, r2, #8
   394e0:	bne	394d0 <GetDataSlab+0x11b0c>
   394e4:	ldr	r0, [sp, #40]	; 0x28
   394e8:	add	lr, lr, r0, lsl #2
   394ec:	add	r3, r3, r0
   394f0:	ldr	r0, [fp, #24]
   394f4:	cmp	r0, #2
   394f8:	blt	395a4 <GetDataSlab+0x11be0>
   394fc:	mov	r2, #0
   39500:	mov	r0, r2
   39504:	ldr	r2, [r5, r2, lsl #2]
   39508:	add	r2, r2, #1
   3950c:	str	r2, [r5, r0, lsl #2]
   39510:	ldr	r7, [r4, r0, lsl #2]
   39514:	sdiv	r6, r2, r7
   39518:	mls	r2, r6, r7, r2
   3951c:	cmp	r2, #0
   39520:	bne	39594 <GetDataSlab+0x11bd0>
   39524:	sub	r1, fp, #176	; 0xb0
   39528:	str	r9, [r5, r0, lsl #2]
   3952c:	add	r2, r1, r0, lsl #2
   39530:	ldr	r2, [r2, #4]
   39534:	sdiv	r7, r3, r2
   39538:	mls	r7, r7, r2, r3
   3953c:	cmp	r7, #0
   39540:	beq	3955c <GetDataSlab+0x11b98>
   39544:	ldr	r6, [r1, r0, lsl #2]
   39548:	ldr	r1, [sl, r0, lsl #2]
   3954c:	sub	r2, r2, r7
   39550:	mla	r1, r1, r6, r2
   39554:	add	r3, r1, r3
   39558:	b	39578 <GetDataSlab+0x11bb4>
   3955c:	ldr	r2, [sl, r0, lsl #2]
   39560:	cmp	r2, #0
   39564:	beq	3957c <GetDataSlab+0x11bb8>
   39568:	sub	r1, fp, #176	; 0xb0
   3956c:	ldr	r1, [r1, r0, lsl #2]
   39570:	mla	r3, r1, r2, r3
   39574:	mul	r1, r1, r2
   39578:	add	lr, lr, r1, lsl #2
   3957c:	ldr	r1, [fp, #24]
   39580:	add	r2, r0, #1
   39584:	add	r0, r0, #2
   39588:	cmp	r0, r1
   3958c:	blt	39500 <GetDataSlab+0x11b3c>
   39590:	b	395a4 <GetDataSlab+0x11be0>
   39594:	ldr	r1, [sp, #32]
   39598:	ldr	r0, [r1, r0, lsl #2]
   3959c:	add	lr, lr, r0, lsl #2
   395a0:	add	r3, r0, r3
   395a4:	ldr	r1, [sp, #44]	; 0x2c
   395a8:	ldr	r7, [sp, #52]	; 0x34
   395ac:	ldr	r0, [sp, #48]	; 0x30
   395b0:	ldr	r2, [sp, #56]	; 0x38
   395b4:	add	r7, r7, r1
   395b8:	add	ip, ip, r0
   395bc:	mov	r0, #0
   395c0:	cmp	r7, r2
   395c4:	str	ip, [sp, #60]	; 0x3c
   395c8:	str	r7, [sp, #52]	; 0x34
   395cc:	blt	39458 <GetDataSlab+0x11a94>
   395d0:	b	47ffc <GetDataSlab+0x20638>
   395d4:	ldr	r0, [fp, #16]
   395d8:	ldr	r9, [fp, #8]
   395dc:	mov	r4, #0
   395e0:	sub	r8, fp, #96	; 0x60
   395e4:	ldr	r0, [r0]
   395e8:	str	r0, [sp, #16]
   395ec:	sub	r0, r0, #1
   395f0:	str	r0, [fp, #-96]	; 0xffffffa0
   395f4:	ldr	r0, [r9]
   395f8:	str	r0, [fp, #-176]	; 0xffffff50
   395fc:	str	r0, [sp, #36]	; 0x24
   39600:	ldr	r0, [fp, #24]
   39604:	ldr	r1, [sl]
   39608:	cmp	r0, #2
   3960c:	str	r1, [sp, #40]	; 0x28
   39610:	str	r1, [sp, #44]	; 0x2c
   39614:	blt	3977c <GetDataSlab+0x11db8>
   39618:	mov	r0, #0
   3961c:	ldr	r2, [sp, #40]	; 0x28
   39620:	sub	r1, r9, #4
   39624:	sub	ip, r9, #12
   39628:	mov	r7, #1
   3962c:	mvn	sl, #15
   39630:	mov	r4, #0
   39634:	str	r0, [sp, #56]	; 0x38
   39638:	ldr	r0, [sp, #36]	; 0x24
   3963c:	str	r2, [sp, #44]	; 0x2c
   39640:	mov	r5, r0
   39644:	ldr	r2, [fp, #16]
   39648:	ldr	r6, [sp, #56]	; 0x38
   3964c:	str	r5, [sp, #52]	; 0x34
   39650:	ldr	r2, [r2, r7, lsl #2]
   39654:	str	r0, [lr, r7, lsl #2]
   39658:	add	r6, r6, #1
   3965c:	cmp	r6, #4
   39660:	str	r6, [sp, #56]	; 0x38
   39664:	sub	r5, r2, #1
   39668:	str	r5, [r8, r7, lsl #2]
   3966c:	ldr	lr, [r9, r7, lsl #2]
   39670:	bcs	39680 <GetDataSlab+0x11cbc>
   39674:	mov	r2, lr
   39678:	mov	r3, r7
   3967c:	b	39710 <GetDataSlab+0x11d4c>
   39680:	vmov.i32	q9, #1	; 0x00000001
   39684:	vmov.i32	q10, #1	; 0x00000001
   39688:	vmov.i32	q8, #1	; 0x00000001
   3968c:	bic	r2, r6, #3
   39690:	bic	r9, r7, #3
   39694:	vmov.32	d23[1], lr
   39698:	vmov.32	d18[0], r0
   3969c:	vmov.32	d20[0], r5
   396a0:	sub	r3, r7, r2
   396a4:	mov	r0, ip
   396a8:	vorr	d16, d18, d18
   396ac:	vmov.i32	q9, #1	; 0x00000001
   396b0:	vorr	d18, d20, d20
   396b4:	vld1.32	{d20-d21}, [r0], sl
   396b8:	subs	r9, r9, #4
   396bc:	vrev64.32	q12, q10
   396c0:	vext.8	q12, q12, q12, #8
   396c4:	vext.8	q11, q11, q12, #12
   396c8:	vmul.i32	q9, q9, q12
   396cc:	vmul.i32	q8, q11, q8
   396d0:	vorr	q11, q12, q12
   396d4:	bne	396b4 <GetDataSlab+0x11cf0>
   396d8:	vext.8	q11, q9, q8, #8
   396dc:	vext.8	q12, q8, q8, #8
   396e0:	cmp	r6, r2
   396e4:	vmul.i32	q0, q9, q11
   396e8:	vmul.i32	q1, q8, q12
   396ec:	vmul.i32	q8, q0, d0[1]
   396f0:	vmul.i32	q9, q1, d2[1]
   396f4:	vmov.32	r5, d16[0]
   396f8:	vmov.32	r0, d18[0]
   396fc:	bne	39708 <GetDataSlab+0x11d44>
   39700:	ldr	r9, [fp, #8]
   39704:	b	39724 <GetDataSlab+0x11d60>
   39708:	ldr	r9, [fp, #8]
   3970c:	vmov.32	r2, d20[0]
   39710:	mul	r0, r2, r0
   39714:	ldr	r2, [r1, r3, lsl #2]
   39718:	subs	r3, r3, #1
   3971c:	mul	r5, r5, r2
   39720:	bne	39710 <GetDataSlab+0x11d4c>
   39724:	sub	r2, fp, #176	; 0xb0
   39728:	sub	r8, fp, #96	; 0x60
   3972c:	add	ip, ip, #4
   39730:	mov	r3, r2
   39734:	str	r0, [r2, r7, lsl #2]
   39738:	ldr	r2, [fp, #12]
   3973c:	str	r5, [r8, r7, lsl #2]
   39740:	ldr	r5, [sp, #52]	; 0x34
   39744:	ldr	r2, [r2, r7, lsl #2]
   39748:	mla	r4, r2, r5, r4
   3974c:	ldr	r2, [fp, #20]
   39750:	ldr	r5, [sp, #44]	; 0x2c
   39754:	ldr	r2, [r2, r7, lsl #2]
   39758:	add	r7, r7, #1
   3975c:	mul	r5, r2, r5
   39760:	ldr	r2, [fp, #24]
   39764:	str	r5, [sp, #44]	; 0x2c
   39768:	mov	r5, r0
   3976c:	mov	r0, lr
   39770:	mov	lr, r3
   39774:	cmp	r7, r2
   39778:	bne	39644 <GetDataSlab+0x11c80>
   3977c:	ldr	r0, [sp, #48]	; 0x30
   39780:	ldr	r3, [sp, #16]
   39784:	add	r5, r0, r4, lsl #2
   39788:	cmp	r3, #1
   3978c:	bne	452d4 <GetDataSlab+0x1d910>
   39790:	ldr	r0, [sp, #44]	; 0x2c
   39794:	ldr	r1, [fp, #20]
   39798:	ldr	r8, [sp, #40]	; 0x28
   3979c:	cmp	r0, #1
   397a0:	ldr	r0, [fp, #12]
   397a4:	blt	47ff8 <GetDataSlab+0x20634>
   397a8:	add	r9, r1, #4
   397ac:	sub	r1, fp, #136	; 0x88
   397b0:	orr	r7, r1, #4
   397b4:	sub	r1, fp, #96	; 0x60
   397b8:	orr	r1, r1, #4
   397bc:	str	r1, [sp, #28]
   397c0:	lsl	r1, r8, #3
   397c4:	str	r1, [sp, #48]	; 0x30
   397c8:	ldr	r1, [r0], #4
   397cc:	str	r0, [sp, #56]	; 0x38
   397d0:	mov	r0, #0
   397d4:	str	r1, [sp, #32]
   397d8:	str	r0, [sp, #52]	; 0x34
   397dc:	cmp	r8, #1
   397e0:	blt	3980c <GetDataSlab+0x11e48>
   397e4:	ldr	r0, [sp, #32]
   397e8:	ldr	r8, [sp, #40]	; 0x28
   397ec:	ldr	sl, [sp, #60]	; 0x3c
   397f0:	add	r6, r5, r0, lsl #2
   397f4:	ldr	r0, [r6], #4
   397f8:	bl	5855c <__aeabi_f2lz>
   397fc:	strd	r0, [sl]
   39800:	subs	r8, r8, #1
   39804:	add	sl, sl, #8
   39808:	bne	397f4 <GetDataSlab+0x11e30>
   3980c:	ldr	r0, [sp, #36]	; 0x24
   39810:	add	r5, r5, r0, lsl #2
   39814:	add	r4, r4, r0
   39818:	ldr	r0, [fp, #24]
   3981c:	cmp	r0, #2
   39820:	blt	398cc <GetDataSlab+0x11f08>
   39824:	ldr	ip, [sp, #60]	; 0x3c
   39828:	ldr	lr, [sp, #56]	; 0x38
   3982c:	ldr	r8, [sp, #40]	; 0x28
   39830:	mov	r1, #0
   39834:	mov	sl, #0
   39838:	mov	r0, r1
   3983c:	ldr	r1, [r7, r1, lsl #2]
   39840:	add	r1, r1, #1
   39844:	str	r1, [r7, r0, lsl #2]
   39848:	ldr	r2, [r9, r0, lsl #2]
   3984c:	sdiv	r3, r1, r2
   39850:	mls	r1, r3, r2, r1
   39854:	cmp	r1, #0
   39858:	bne	398d8 <GetDataSlab+0x11f14>
   3985c:	sub	r3, fp, #176	; 0xb0
   39860:	str	sl, [r7, r0, lsl #2]
   39864:	add	r1, r3, r0, lsl #2
   39868:	ldr	r1, [r1, #4]
   3986c:	sdiv	r2, r4, r1
   39870:	mls	r2, r2, r1, r4
   39874:	cmp	r2, #0
   39878:	beq	39894 <GetDataSlab+0x11ed0>
   3987c:	ldr	r3, [r3, r0, lsl #2]
   39880:	ldr	r6, [lr, r0, lsl #2]
   39884:	sub	r1, r1, r2
   39888:	mla	r1, r6, r3, r1
   3988c:	add	r4, r1, r4
   39890:	b	398b0 <GetDataSlab+0x11eec>
   39894:	ldr	r1, [lr, r0, lsl #2]
   39898:	cmp	r1, #0
   3989c:	beq	398b4 <GetDataSlab+0x11ef0>
   398a0:	sub	r2, fp, #176	; 0xb0
   398a4:	ldr	r2, [r2, r0, lsl #2]
   398a8:	mla	r4, r2, r1, r4
   398ac:	mul	r1, r2, r1
   398b0:	add	r5, r5, r1, lsl #2
   398b4:	ldr	r2, [fp, #24]
   398b8:	add	r1, r0, #1
   398bc:	add	r0, r0, #2
   398c0:	cmp	r0, r2
   398c4:	blt	39838 <GetDataSlab+0x11e74>
   398c8:	b	398e8 <GetDataSlab+0x11f24>
   398cc:	ldr	ip, [sp, #60]	; 0x3c
   398d0:	ldr	r8, [sp, #40]	; 0x28
   398d4:	b	398e8 <GetDataSlab+0x11f24>
   398d8:	ldr	r1, [sp, #28]
   398dc:	ldr	r0, [r1, r0, lsl #2]
   398e0:	add	r5, r5, r0, lsl #2
   398e4:	add	r4, r0, r4
   398e8:	ldr	r2, [sp, #52]	; 0x34
   398ec:	ldr	r0, [sp, #48]	; 0x30
   398f0:	ldr	r1, [sp, #44]	; 0x2c
   398f4:	add	r2, r2, r8
   398f8:	add	ip, ip, r0
   398fc:	mov	r0, #0
   39900:	cmp	r2, r1
   39904:	str	ip, [sp, #60]	; 0x3c
   39908:	str	r2, [sp, #52]	; 0x34
   3990c:	blt	397dc <GetDataSlab+0x11e18>
   39910:	b	47ffc <GetDataSlab+0x20638>
   39914:	ldr	r0, [fp, #16]
   39918:	ldr	r9, [fp, #8]
   3991c:	mov	r4, #0
   39920:	sub	r8, fp, #96	; 0x60
   39924:	ldr	r0, [r0]
   39928:	str	r0, [sp, #16]
   3992c:	sub	r0, r0, #1
   39930:	str	r0, [fp, #-96]	; 0xffffffa0
   39934:	ldr	r0, [r9]
   39938:	str	r0, [fp, #-176]	; 0xffffff50
   3993c:	str	r0, [sp, #36]	; 0x24
   39940:	ldr	r0, [fp, #24]
   39944:	ldr	r1, [sl]
   39948:	cmp	r0, #2
   3994c:	str	r1, [sp, #40]	; 0x28
   39950:	str	r1, [sp, #44]	; 0x2c
   39954:	blt	39abc <GetDataSlab+0x120f8>
   39958:	mov	r0, #0
   3995c:	ldr	r2, [sp, #40]	; 0x28
   39960:	sub	r1, r9, #4
   39964:	sub	ip, r9, #12
   39968:	mov	r7, #1
   3996c:	mvn	sl, #15
   39970:	mov	r4, #0
   39974:	str	r0, [sp, #56]	; 0x38
   39978:	ldr	r0, [sp, #36]	; 0x24
   3997c:	str	r2, [sp, #44]	; 0x2c
   39980:	mov	r5, r0
   39984:	ldr	r2, [fp, #16]
   39988:	ldr	r6, [sp, #56]	; 0x38
   3998c:	str	r5, [sp, #52]	; 0x34
   39990:	ldr	r2, [r2, r7, lsl #2]
   39994:	str	r0, [lr, r7, lsl #2]
   39998:	add	r6, r6, #1
   3999c:	cmp	r6, #4
   399a0:	str	r6, [sp, #56]	; 0x38
   399a4:	sub	r5, r2, #1
   399a8:	str	r5, [r8, r7, lsl #2]
   399ac:	ldr	lr, [r9, r7, lsl #2]
   399b0:	bcs	399c0 <GetDataSlab+0x11ffc>
   399b4:	mov	r2, lr
   399b8:	mov	r3, r7
   399bc:	b	39a50 <GetDataSlab+0x1208c>
   399c0:	vmov.i32	q9, #1	; 0x00000001
   399c4:	vmov.i32	q10, #1	; 0x00000001
   399c8:	vmov.i32	q8, #1	; 0x00000001
   399cc:	bic	r2, r6, #3
   399d0:	bic	r9, r7, #3
   399d4:	vmov.32	d23[1], lr
   399d8:	vmov.32	d18[0], r0
   399dc:	vmov.32	d20[0], r5
   399e0:	sub	r3, r7, r2
   399e4:	mov	r0, ip
   399e8:	vorr	d16, d18, d18
   399ec:	vmov.i32	q9, #1	; 0x00000001
   399f0:	vorr	d18, d20, d20
   399f4:	vld1.32	{d20-d21}, [r0], sl
   399f8:	subs	r9, r9, #4
   399fc:	vrev64.32	q12, q10
   39a00:	vext.8	q12, q12, q12, #8
   39a04:	vext.8	q11, q11, q12, #12
   39a08:	vmul.i32	q9, q9, q12
   39a0c:	vmul.i32	q8, q11, q8
   39a10:	vorr	q11, q12, q12
   39a14:	bne	399f4 <GetDataSlab+0x12030>
   39a18:	vext.8	q11, q9, q8, #8
   39a1c:	vext.8	q12, q8, q8, #8
   39a20:	cmp	r6, r2
   39a24:	vmul.i32	q0, q9, q11
   39a28:	vmul.i32	q1, q8, q12
   39a2c:	vmul.i32	q8, q0, d0[1]
   39a30:	vmul.i32	q9, q1, d2[1]
   39a34:	vmov.32	r5, d16[0]
   39a38:	vmov.32	r0, d18[0]
   39a3c:	bne	39a48 <GetDataSlab+0x12084>
   39a40:	ldr	r9, [fp, #8]
   39a44:	b	39a64 <GetDataSlab+0x120a0>
   39a48:	ldr	r9, [fp, #8]
   39a4c:	vmov.32	r2, d20[0]
   39a50:	mul	r0, r2, r0
   39a54:	ldr	r2, [r1, r3, lsl #2]
   39a58:	subs	r3, r3, #1
   39a5c:	mul	r5, r5, r2
   39a60:	bne	39a50 <GetDataSlab+0x1208c>
   39a64:	sub	r2, fp, #176	; 0xb0
   39a68:	sub	r8, fp, #96	; 0x60
   39a6c:	add	ip, ip, #4
   39a70:	mov	r3, r2
   39a74:	str	r0, [r2, r7, lsl #2]
   39a78:	ldr	r2, [fp, #12]
   39a7c:	str	r5, [r8, r7, lsl #2]
   39a80:	ldr	r5, [sp, #52]	; 0x34
   39a84:	ldr	r2, [r2, r7, lsl #2]
   39a88:	mla	r4, r2, r5, r4
   39a8c:	ldr	r2, [fp, #20]
   39a90:	ldr	r5, [sp, #44]	; 0x2c
   39a94:	ldr	r2, [r2, r7, lsl #2]
   39a98:	add	r7, r7, #1
   39a9c:	mul	r5, r2, r5
   39aa0:	ldr	r2, [fp, #24]
   39aa4:	str	r5, [sp, #44]	; 0x2c
   39aa8:	mov	r5, r0
   39aac:	mov	r0, lr
   39ab0:	mov	lr, r3
   39ab4:	cmp	r7, r2
   39ab8:	bne	39984 <GetDataSlab+0x11fc0>
   39abc:	ldr	r0, [sp, #48]	; 0x30
   39ac0:	ldr	r3, [sp, #16]
   39ac4:	add	r5, r0, r4, lsl #3
   39ac8:	cmp	r3, #1
   39acc:	bne	4547c <GetDataSlab+0x1dab8>
   39ad0:	ldr	r0, [sp, #44]	; 0x2c
   39ad4:	ldr	r1, [fp, #20]
   39ad8:	ldr	r8, [sp, #40]	; 0x28
   39adc:	cmp	r0, #1
   39ae0:	ldr	r0, [fp, #12]
   39ae4:	blt	47ff8 <GetDataSlab+0x20634>
   39ae8:	add	r9, r1, #4
   39aec:	sub	r1, fp, #136	; 0x88
   39af0:	orr	r7, r1, #4
   39af4:	sub	r1, fp, #96	; 0x60
   39af8:	orr	r1, r1, #4
   39afc:	str	r1, [sp, #28]
   39b00:	lsl	r1, r8, #3
   39b04:	str	r1, [sp, #48]	; 0x30
   39b08:	ldr	r1, [r0], #4
   39b0c:	str	r0, [sp, #56]	; 0x38
   39b10:	mov	r0, #0
   39b14:	str	r1, [sp, #32]
   39b18:	str	r0, [sp, #52]	; 0x34
   39b1c:	cmp	r8, #1
   39b20:	blt	39b54 <GetDataSlab+0x12190>
   39b24:	ldr	r0, [sp, #32]
   39b28:	ldr	r8, [sp, #40]	; 0x28
   39b2c:	ldr	sl, [sp, #60]	; 0x3c
   39b30:	add	r6, r5, r0, lsl #3
   39b34:	vldr	d16, [r6]
   39b38:	vmov	r0, r1, d16
   39b3c:	bl	58588 <__aeabi_d2lz>
   39b40:	strd	r0, [sl]
   39b44:	subs	r8, r8, #1
   39b48:	add	sl, sl, #8
   39b4c:	add	r6, r6, #8
   39b50:	bne	39b34 <GetDataSlab+0x12170>
   39b54:	ldr	r0, [sp, #36]	; 0x24
   39b58:	add	r5, r5, r0, lsl #3
   39b5c:	add	r4, r4, r0
   39b60:	ldr	r0, [fp, #24]
   39b64:	cmp	r0, #2
   39b68:	blt	39c14 <GetDataSlab+0x12250>
   39b6c:	ldr	ip, [sp, #60]	; 0x3c
   39b70:	ldr	lr, [sp, #56]	; 0x38
   39b74:	ldr	r8, [sp, #40]	; 0x28
   39b78:	mov	r1, #0
   39b7c:	mov	sl, #0
   39b80:	mov	r0, r1
   39b84:	ldr	r1, [r7, r1, lsl #2]
   39b88:	add	r1, r1, #1
   39b8c:	str	r1, [r7, r0, lsl #2]
   39b90:	ldr	r2, [r9, r0, lsl #2]
   39b94:	sdiv	r3, r1, r2
   39b98:	mls	r1, r3, r2, r1
   39b9c:	cmp	r1, #0
   39ba0:	bne	39c20 <GetDataSlab+0x1225c>
   39ba4:	sub	r3, fp, #176	; 0xb0
   39ba8:	str	sl, [r7, r0, lsl #2]
   39bac:	add	r1, r3, r0, lsl #2
   39bb0:	ldr	r1, [r1, #4]
   39bb4:	sdiv	r2, r4, r1
   39bb8:	mls	r2, r2, r1, r4
   39bbc:	cmp	r2, #0
   39bc0:	beq	39bdc <GetDataSlab+0x12218>
   39bc4:	ldr	r3, [r3, r0, lsl #2]
   39bc8:	ldr	r6, [lr, r0, lsl #2]
   39bcc:	sub	r1, r1, r2
   39bd0:	mla	r1, r6, r3, r1
   39bd4:	add	r4, r1, r4
   39bd8:	b	39bf8 <GetDataSlab+0x12234>
   39bdc:	ldr	r1, [lr, r0, lsl #2]
   39be0:	cmp	r1, #0
   39be4:	beq	39bfc <GetDataSlab+0x12238>
   39be8:	sub	r2, fp, #176	; 0xb0
   39bec:	ldr	r2, [r2, r0, lsl #2]
   39bf0:	mla	r4, r2, r1, r4
   39bf4:	mul	r1, r2, r1
   39bf8:	add	r5, r5, r1, lsl #3
   39bfc:	ldr	r2, [fp, #24]
   39c00:	add	r1, r0, #1
   39c04:	add	r0, r0, #2
   39c08:	cmp	r0, r2
   39c0c:	blt	39b80 <GetDataSlab+0x121bc>
   39c10:	b	39c30 <GetDataSlab+0x1226c>
   39c14:	ldr	ip, [sp, #60]	; 0x3c
   39c18:	ldr	r8, [sp, #40]	; 0x28
   39c1c:	b	39c30 <GetDataSlab+0x1226c>
   39c20:	ldr	r1, [sp, #28]
   39c24:	ldr	r0, [r1, r0, lsl #2]
   39c28:	add	r5, r5, r0, lsl #3
   39c2c:	add	r4, r0, r4
   39c30:	ldr	r2, [sp, #52]	; 0x34
   39c34:	ldr	r0, [sp, #48]	; 0x30
   39c38:	ldr	r1, [sp, #44]	; 0x2c
   39c3c:	add	r2, r2, r8
   39c40:	add	ip, ip, r0
   39c44:	mov	r0, #0
   39c48:	cmp	r2, r1
   39c4c:	str	ip, [sp, #60]	; 0x3c
   39c50:	str	r2, [sp, #52]	; 0x34
   39c54:	blt	39b1c <GetDataSlab+0x12158>
   39c58:	b	47ffc <GetDataSlab+0x20638>
   39c5c:	ldr	r0, [fp, #16]
   39c60:	str	r6, [sp, #40]	; 0x28
   39c64:	mov	r5, lr
   39c68:	mov	lr, #0
   39c6c:	sub	r6, fp, #96	; 0x60
   39c70:	ldr	r0, [r0]
   39c74:	str	r0, [sp, #16]
   39c78:	sub	r0, r0, #1
   39c7c:	str	r0, [fp, #-96]	; 0xffffffa0
   39c80:	ldr	r0, [fp, #8]
   39c84:	ldr	r0, [r0]
   39c88:	str	r0, [fp, #-176]	; 0xffffff50
   39c8c:	str	r0, [sp, #28]
   39c90:	ldr	r0, [fp, #24]
   39c94:	ldr	r1, [sl]
   39c98:	cmp	r0, #2
   39c9c:	str	r1, [sp, #44]	; 0x2c
   39ca0:	str	r1, [sp, #56]	; 0x38
   39ca4:	blt	39dec <GetDataSlab+0x12428>
   39ca8:	ldr	r0, [fp, #8]
   39cac:	ldr	r2, [sp, #28]
   39cb0:	mov	r4, #1
   39cb4:	mov	ip, #0
   39cb8:	mvn	r7, #15
   39cbc:	mov	lr, #0
   39cc0:	sub	r3, r0, #4
   39cc4:	sub	r9, r0, #12
   39cc8:	ldr	r0, [sp, #44]	; 0x2c
   39ccc:	mov	r8, r2
   39cd0:	str	r0, [sp, #56]	; 0x38
   39cd4:	ldr	r0, [fp, #16]
   39cd8:	add	ip, ip, #1
   39cdc:	cmp	ip, #4
   39ce0:	ldr	r0, [r0, r4, lsl #2]
   39ce4:	str	r2, [r5, r4, lsl #2]
   39ce8:	sub	r0, r0, #1
   39cec:	str	r0, [r6, r4, lsl #2]
   39cf0:	ldr	r6, [fp, #8]
   39cf4:	ldr	r6, [r6, r4, lsl #2]
   39cf8:	str	r6, [sp, #52]	; 0x34
   39cfc:	bcs	39d08 <GetDataSlab+0x12344>
   39d00:	mov	r5, r4
   39d04:	b	39d90 <GetDataSlab+0x123cc>
   39d08:	vmov.i32	q9, #1	; 0x00000001
   39d0c:	vmov.i32	q10, #1	; 0x00000001
   39d10:	vmov.i32	q8, #1	; 0x00000001
   39d14:	vmov.32	d23[1], r6
   39d18:	bic	r6, ip, #3
   39d1c:	bic	sl, r4, #3
   39d20:	vmov.32	d18[0], r2
   39d24:	vmov.32	d20[0], r0
   39d28:	sub	r5, r4, r6
   39d2c:	mov	r0, r9
   39d30:	vorr	d16, d18, d18
   39d34:	vmov.i32	q9, #1	; 0x00000001
   39d38:	vorr	d18, d20, d20
   39d3c:	vld1.32	{d20-d21}, [r0], r7
   39d40:	subs	sl, sl, #4
   39d44:	vrev64.32	q12, q10
   39d48:	vext.8	q12, q12, q12, #8
   39d4c:	vext.8	q11, q11, q12, #12
   39d50:	vmul.i32	q9, q9, q12
   39d54:	vmul.i32	q8, q11, q8
   39d58:	vorr	q11, q12, q12
   39d5c:	bne	39d3c <GetDataSlab+0x12378>
   39d60:	vext.8	q11, q9, q8, #8
   39d64:	vext.8	q12, q8, q8, #8
   39d68:	ldr	sl, [fp, #20]
   39d6c:	cmp	ip, r6
   39d70:	vmul.i32	q0, q9, q11
   39d74:	vmul.i32	q1, q8, q12
   39d78:	vmul.i32	q8, q0, d0[1]
   39d7c:	vmul.i32	q9, q1, d2[1]
   39d80:	vmov.32	r0, d16[0]
   39d84:	vmov.32	r2, d18[0]
   39d88:	beq	39da4 <GetDataSlab+0x123e0>
   39d8c:	vmov.32	r6, d20[0]
   39d90:	mul	r2, r6, r2
   39d94:	ldr	r6, [r3, r5, lsl #2]
   39d98:	subs	r5, r5, #1
   39d9c:	mul	r0, r0, r6
   39da0:	bne	39d90 <GetDataSlab+0x123cc>
   39da4:	sub	r6, fp, #96	; 0x60
   39da8:	sub	r5, fp, #176	; 0xb0
   39dac:	ldr	r1, [sp, #56]	; 0x38
   39db0:	add	r9, r9, #4
   39db4:	str	r0, [r6, r4, lsl #2]
   39db8:	ldr	r0, [fp, #12]
   39dbc:	str	r2, [r5, r4, lsl #2]
   39dc0:	ldr	r0, [r0, r4, lsl #2]
   39dc4:	mla	lr, r0, r8, lr
   39dc8:	ldr	r0, [sl, r4, lsl #2]
   39dcc:	mov	r8, r2
   39dd0:	ldr	r2, [sp, #52]	; 0x34
   39dd4:	add	r4, r4, #1
   39dd8:	mul	r1, r0, r1
   39ddc:	ldr	r0, [fp, #24]
   39de0:	str	r1, [sp, #56]	; 0x38
   39de4:	cmp	r4, r0
   39de8:	bne	39cd4 <GetDataSlab+0x12310>
   39dec:	ldr	r0, [sp, #48]	; 0x30
   39df0:	ldr	r2, [sp, #16]
   39df4:	add	r5, r0, lr, lsl #3
   39df8:	cmp	r2, #1
   39dfc:	bne	4562c <GetDataSlab+0x1dc68>
   39e00:	ldr	r0, [sp, #56]	; 0x38
   39e04:	ldr	ip, [sp, #44]	; 0x2c
   39e08:	sub	r2, fp, #96	; 0x60
   39e0c:	cmp	r0, #1
   39e10:	ldr	r0, [fp, #12]
   39e14:	blt	457c0 <GetDataSlab+0x1ddfc>
   39e18:	mov	r1, r0
   39e1c:	ldr	r9, [sp, #60]	; 0x3c
   39e20:	add	r8, sl, #4
   39e24:	ldr	r0, [r1], #4
   39e28:	str	r0, [sp, #24]
   39e2c:	add	r0, ip, r0
   39e30:	str	r0, [sp, #20]
   39e34:	sub	r0, fp, #136	; 0x88
   39e38:	orr	r6, r0, #4
   39e3c:	orr	r0, r2, #4
   39e40:	mov	r2, #0
   39e44:	str	r0, [sp, #12]
   39e48:	bic	r0, ip, #1
   39e4c:	str	r0, [sp, #16]
   39e50:	lsl	r0, ip, #3
   39e54:	str	r0, [sp, #32]
   39e58:	mov	r0, #0
   39e5c:	str	r0, [sp, #52]	; 0x34
   39e60:	mov	r4, r8
   39e64:	cmp	ip, #1
   39e68:	str	r2, [sp, #36]	; 0x24
   39e6c:	blt	39f1c <GetDataSlab+0x12558>
   39e70:	ldr	r0, [sp, #24]
   39e74:	mov	r2, #0
   39e78:	add	sl, r5, r0, lsl #3
   39e7c:	beq	39ee8 <GetDataSlab+0x12524>
   39e80:	ldr	r0, [sp, #60]	; 0x3c
   39e84:	ldr	r3, [sp, #32]
   39e88:	ldr	r7, [sp, #52]	; 0x34
   39e8c:	mla	r0, r3, r7, r0
   39e90:	ldr	r3, [sp, #20]
   39e94:	add	r3, r5, r3, lsl #3
   39e98:	cmp	r0, r3
   39e9c:	bcs	39ebc <GetDataSlab+0x124f8>
   39ea0:	ldr	r0, [sp, #32]
   39ea4:	ldr	r3, [sp, #52]	; 0x34
   39ea8:	mla	r0, r0, r3, r0
   39eac:	ldr	r3, [sp, #60]	; 0x3c
   39eb0:	add	r0, r3, r0
   39eb4:	cmp	r0, sl
   39eb8:	bhi	39ee8 <GetDataSlab+0x12524>
   39ebc:	ldr	r2, [sp, #16]
   39ec0:	mov	r3, r9
   39ec4:	mov	r0, sl
   39ec8:	vld1.64	{d16-d17}, [r0]!
   39ecc:	subs	r2, r2, #2
   39ed0:	vst1.64	{d16-d17}, [r3]!
   39ed4:	bne	39ec8 <GetDataSlab+0x12504>
   39ed8:	ldr	r0, [sp, #44]	; 0x2c
   39edc:	ldr	r2, [sp, #16]
   39ee0:	cmp	r0, r2
   39ee4:	beq	39f1c <GetDataSlab+0x12558>
   39ee8:	ldr	r0, [sp, #44]	; 0x2c
   39eec:	sub	r3, r0, r2
   39ef0:	mov	r0, #0
   39ef4:	sub	r2, r0, r2, lsl #3
   39ef8:	mov	r0, sl
   39efc:	mov	ip, r9
   39f00:	subs	r3, r3, #1
   39f04:	ldr	r8, [r0, -r2]!
   39f08:	ldr	r0, [r0, #4]
   39f0c:	str	r8, [ip, -r2]!
   39f10:	sub	r2, r2, #8
   39f14:	str	r0, [ip, #4]
   39f18:	bne	39ef8 <GetDataSlab+0x12534>
   39f1c:	ldr	r0, [sp, #28]
   39f20:	add	r5, r5, r0, lsl #3
   39f24:	add	lr, lr, r0
   39f28:	ldr	r0, [fp, #24]
   39f2c:	cmp	r0, #2
   39f30:	blt	39fd8 <GetDataSlab+0x12614>
   39f34:	ldr	ip, [sp, #44]	; 0x2c
   39f38:	mov	r2, #0
   39f3c:	mov	r8, r4
   39f40:	mov	sl, #0
   39f44:	mov	r0, r2
   39f48:	ldr	r2, [r6, r2, lsl #2]
   39f4c:	add	r2, r2, #1
   39f50:	str	r2, [r6, r0, lsl #2]
   39f54:	ldr	r3, [r8, r0, lsl #2]
   39f58:	sdiv	r7, r2, r3
   39f5c:	mls	r2, r7, r3, r2
   39f60:	cmp	r2, #0
   39f64:	bne	39fe4 <GetDataSlab+0x12620>
   39f68:	sub	r7, fp, #176	; 0xb0
   39f6c:	str	sl, [r6, r0, lsl #2]
   39f70:	add	r2, r7, r0, lsl #2
   39f74:	ldr	r2, [r2, #4]
   39f78:	sdiv	r3, lr, r2
   39f7c:	mls	r3, r3, r2, lr
   39f80:	cmp	r3, #0
   39f84:	beq	39fa0 <GetDataSlab+0x125dc>
   39f88:	ldr	r7, [r7, r0, lsl #2]
   39f8c:	ldr	r4, [r1, r0, lsl #2]
   39f90:	sub	r2, r2, r3
   39f94:	mla	r2, r4, r7, r2
   39f98:	add	lr, r2, lr
   39f9c:	b	39fbc <GetDataSlab+0x125f8>
   39fa0:	ldr	r2, [r1, r0, lsl #2]
   39fa4:	cmp	r2, #0
   39fa8:	beq	39fc0 <GetDataSlab+0x125fc>
   39fac:	sub	r3, fp, #176	; 0xb0
   39fb0:	ldr	r3, [r3, r0, lsl #2]
   39fb4:	mla	lr, r3, r2, lr
   39fb8:	mul	r2, r3, r2
   39fbc:	add	r5, r5, r2, lsl #3
   39fc0:	ldr	r3, [fp, #24]
   39fc4:	add	r2, r0, #1
   39fc8:	add	r0, r0, #2
   39fcc:	cmp	r0, r3
   39fd0:	blt	39f44 <GetDataSlab+0x12580>
   39fd4:	b	39ff4 <GetDataSlab+0x12630>
   39fd8:	ldr	ip, [sp, #44]	; 0x2c
   39fdc:	mov	r8, r4
   39fe0:	b	39ff4 <GetDataSlab+0x12630>
   39fe4:	ldr	r2, [sp, #12]
   39fe8:	ldr	r0, [r2, r0, lsl #2]
   39fec:	add	r5, r5, r0, lsl #3
   39ff0:	add	lr, r0, lr
   39ff4:	ldr	r0, [sp, #32]
   39ff8:	ldr	r2, [sp, #36]	; 0x24
   39ffc:	add	r9, r9, r0
   3a000:	ldr	r0, [sp, #52]	; 0x34
   3a004:	add	r2, r2, ip
   3a008:	add	r0, r0, #1
   3a00c:	str	r0, [sp, #52]	; 0x34
   3a010:	ldr	r0, [sp, #56]	; 0x38
   3a014:	cmp	r2, r0
   3a018:	blt	39e60 <GetDataSlab+0x1249c>
   3a01c:	b	457c0 <GetDataSlab+0x1ddfc>
   3a020:	ldr	r0, [fp, #16]
   3a024:	mov	r3, #0
   3a028:	sub	r2, fp, #96	; 0x60
   3a02c:	ldr	ip, [r0]
   3a030:	sub	r0, ip, #1
   3a034:	str	r0, [fp, #-96]	; 0xffffffa0
   3a038:	ldr	r0, [fp, #8]
   3a03c:	ldr	r0, [r0]
   3a040:	str	r0, [fp, #-176]	; 0xffffff50
   3a044:	str	r0, [sp, #32]
   3a048:	ldr	r0, [fp, #24]
   3a04c:	ldr	r1, [sl]
   3a050:	cmp	r0, #2
   3a054:	str	r1, [sp, #40]	; 0x28
   3a058:	str	r1, [sp, #56]	; 0x38
   3a05c:	blt	3a1c0 <GetDataSlab+0x127fc>
   3a060:	ldr	r0, [fp, #8]
   3a064:	ldr	r5, [sp, #32]
   3a068:	mov	r7, #1
   3a06c:	mov	r4, #0
   3a070:	mvn	r6, #15
   3a074:	mov	r3, #0
   3a078:	mov	r1, r0
   3a07c:	sub	r0, r0, #4
   3a080:	mov	r9, r5
   3a084:	sub	r8, r1, #12
   3a088:	ldr	r1, [sp, #40]	; 0x28
   3a08c:	str	r1, [sp, #56]	; 0x38
   3a090:	ldr	r1, [fp, #16]
   3a094:	add	r4, r4, #1
   3a098:	cmp	r4, #4
   3a09c:	str	r4, [sp, #52]	; 0x34
   3a0a0:	ldr	r1, [r1, r7, lsl #2]
   3a0a4:	str	r5, [lr, r7, lsl #2]
   3a0a8:	sub	lr, r1, #1
   3a0ac:	ldr	r1, [fp, #8]
   3a0b0:	str	lr, [r2, r7, lsl #2]
   3a0b4:	ldr	r1, [r1, r7, lsl #2]
   3a0b8:	str	r1, [sp, #44]	; 0x2c
   3a0bc:	bcs	3a0cc <GetDataSlab+0x12708>
   3a0c0:	mov	r4, r1
   3a0c4:	mov	r2, r7
   3a0c8:	b	3a15c <GetDataSlab+0x12798>
   3a0cc:	vmov.i32	q9, #1	; 0x00000001
   3a0d0:	vmov.i32	q10, #1	; 0x00000001
   3a0d4:	vmov.i32	q8, #1	; 0x00000001
   3a0d8:	vmov.32	d23[1], r1
   3a0dc:	bic	r1, r4, #3
   3a0e0:	bic	sl, r7, #3
   3a0e4:	vmov.32	d18[0], r5
   3a0e8:	vmov.32	d20[0], lr
   3a0ec:	str	r1, [sp, #36]	; 0x24
   3a0f0:	sub	r2, r7, r1
   3a0f4:	mov	r1, r8
   3a0f8:	vorr	d16, d18, d18
   3a0fc:	vmov.i32	q9, #1	; 0x00000001
   3a100:	vorr	d18, d20, d20
   3a104:	vld1.32	{d20-d21}, [r1], r6
   3a108:	subs	sl, sl, #4
   3a10c:	vrev64.32	q12, q10
   3a110:	vext.8	q12, q12, q12, #8
   3a114:	vext.8	q11, q11, q12, #12
   3a118:	vmul.i32	q9, q9, q12
   3a11c:	vmul.i32	q8, q11, q8
   3a120:	vorr	q11, q12, q12
   3a124:	bne	3a104 <GetDataSlab+0x12740>
   3a128:	ldr	r1, [sp, #36]	; 0x24
   3a12c:	vext.8	q11, q9, q8, #8
   3a130:	vext.8	q12, q8, q8, #8
   3a134:	ldr	sl, [fp, #20]
   3a138:	vmul.i32	q0, q9, q11
   3a13c:	vmul.i32	q1, q8, q12
   3a140:	vmul.i32	q8, q0, d0[1]
   3a144:	vmul.i32	q9, q1, d2[1]
   3a148:	vmov.32	lr, d16[0]
   3a14c:	vmov.32	r5, d18[0]
   3a150:	cmp	r4, r1
   3a154:	beq	3a170 <GetDataSlab+0x127ac>
   3a158:	vmov.32	r4, d20[0]
   3a15c:	mul	r5, r4, r5
   3a160:	ldr	r4, [r0, r2, lsl #2]
   3a164:	subs	r2, r2, #1
   3a168:	mul	lr, lr, r4
   3a16c:	bne	3a15c <GetDataSlab+0x12798>
   3a170:	sub	r1, fp, #176	; 0xb0
   3a174:	sub	r2, fp, #96	; 0x60
   3a178:	ldr	r4, [sp, #56]	; 0x38
   3a17c:	add	r8, r8, #4
   3a180:	str	lr, [r2, r7, lsl #2]
   3a184:	str	r5, [r1, r7, lsl #2]
   3a188:	mov	lr, r1
   3a18c:	ldr	r1, [fp, #12]
   3a190:	ldr	r1, [r1, r7, lsl #2]
   3a194:	mla	r3, r1, r9, r3
   3a198:	ldr	r1, [sl, r7, lsl #2]
   3a19c:	mov	r9, r5
   3a1a0:	ldr	r5, [sp, #44]	; 0x2c
   3a1a4:	add	r7, r7, #1
   3a1a8:	mul	r4, r1, r4
   3a1ac:	ldr	r1, [fp, #24]
   3a1b0:	str	r4, [sp, #56]	; 0x38
   3a1b4:	ldr	r4, [sp, #52]	; 0x34
   3a1b8:	cmp	r7, r1
   3a1bc:	bne	3a090 <GetDataSlab+0x126cc>
   3a1c0:	ldr	r0, [sp, #48]	; 0x30
   3a1c4:	cmp	ip, #1
   3a1c8:	add	r5, r0, r3
   3a1cc:	bne	45b8c <GetDataSlab+0x1e1c8>
   3a1d0:	ldr	r0, [sp, #56]	; 0x38
   3a1d4:	cmp	r0, #1
   3a1d8:	ldr	r0, [fp, #12]
   3a1dc:	blt	47ff8 <GetDataSlab+0x20634>
   3a1e0:	ldr	ip, [sp, #40]	; 0x28
   3a1e4:	add	lr, r0, #4
   3a1e8:	sub	r0, fp, #136	; 0x88
   3a1ec:	add	r8, sl, #4
   3a1f0:	mov	r9, #0
   3a1f4:	mov	sl, #0
   3a1f8:	orr	r4, r0, #4
   3a1fc:	orr	r0, r2, #4
   3a200:	str	r0, [sp, #24]
   3a204:	bic	r0, ip, #1
   3a208:	str	r0, [sp, #28]
   3a20c:	lsl	r0, ip, #3
   3a210:	str	r0, [sp, #44]	; 0x2c
   3a214:	ldr	r0, [sp, #60]	; 0x3c
   3a218:	str	r0, [sp, #52]	; 0x34
   3a21c:	mov	r0, #0
   3a220:	str	r0, [sp, #48]	; 0x30
   3a224:	cmp	ip, #1
   3a228:	blt	3a2f8 <GetDataSlab+0x12934>
   3a22c:	ldr	r0, [fp, #12]
   3a230:	mov	r2, #0
   3a234:	ldr	r6, [r0]
   3a238:	str	r6, [sp, #36]	; 0x24
   3a23c:	beq	3a2cc <GetDataSlab+0x12908>
   3a240:	ldr	r0, [sp, #60]	; 0x3c
   3a244:	ldr	r1, [sp, #44]	; 0x2c
   3a248:	ldr	r7, [sp, #48]	; 0x30
   3a24c:	mla	ip, r1, r7, r0
   3a250:	ldr	r1, [sp, #40]	; 0x28
   3a254:	add	r0, r5, r6
   3a258:	mov	r7, r6
   3a25c:	add	r6, r5, r1
   3a260:	ldr	r1, [sp, #60]	; 0x3c
   3a264:	add	r6, r6, r7
   3a268:	cmp	ip, r6
   3a26c:	ldr	ip, [sp, #40]	; 0x28
   3a270:	bcs	3a28c <GetDataSlab+0x128c8>
   3a274:	ldr	r6, [sp, #44]	; 0x2c
   3a278:	ldr	r7, [sp, #48]	; 0x30
   3a27c:	mla	r6, r6, r7, r6
   3a280:	add	r6, r1, r6
   3a284:	cmp	r0, r6
   3a288:	bcc	3a2cc <GetDataSlab+0x12908>
   3a28c:	ldr	r2, [sp, #28]
   3a290:	ldr	ip, [sp, #52]	; 0x34
   3a294:	sub	r1, fp, #212	; 0xd4
   3a298:	ldrh	r6, [r0], #2
   3a29c:	subs	r2, r2, #2
   3a2a0:	strh	r6, [fp, #-212]	; 0xffffff2c
   3a2a4:	vld1.16	{d16[0]}, [r1 :16]
   3a2a8:	vmovl.u8	q8, d16
   3a2ac:	vmovl.u16	q8, d16
   3a2b0:	vmovl.u32	q8, d16
   3a2b4:	vst1.64	{d16-d17}, [ip]!
   3a2b8:	bne	3a298 <GetDataSlab+0x128d4>
   3a2bc:	ldr	ip, [sp, #40]	; 0x28
   3a2c0:	ldr	r2, [sp, #28]
   3a2c4:	cmp	ip, r2
   3a2c8:	beq	3a2f8 <GetDataSlab+0x12934>
   3a2cc:	ldr	r0, [sp, #52]	; 0x34
   3a2d0:	sub	r7, ip, r2
   3a2d4:	add	r6, r0, r2, lsl #3
   3a2d8:	ldr	r0, [sp, #36]	; 0x24
   3a2dc:	add	r2, r2, r0
   3a2e0:	add	r2, r5, r2
   3a2e4:	ldrb	r0, [r2], #1
   3a2e8:	subs	r7, r7, #1
   3a2ec:	stm	r6, {r0, r9}
   3a2f0:	add	r6, r6, #8
   3a2f4:	bne	3a2e4 <GetDataSlab+0x12920>
   3a2f8:	ldr	r0, [sp, #32]
   3a2fc:	add	r5, r5, r0
   3a300:	add	r3, r3, r0
   3a304:	ldr	r0, [fp, #24]
   3a308:	cmp	r0, #2
   3a30c:	blt	3a3b4 <GetDataSlab+0x129f0>
   3a310:	mov	r2, #0
   3a314:	mov	r0, r2
   3a318:	ldr	r2, [r4, r2, lsl #2]
   3a31c:	add	r2, r2, #1
   3a320:	str	r2, [r4, r0, lsl #2]
   3a324:	ldr	r7, [r8, r0, lsl #2]
   3a328:	sdiv	r6, r2, r7
   3a32c:	mls	r2, r6, r7, r2
   3a330:	cmp	r2, #0
   3a334:	bne	3a3a4 <GetDataSlab+0x129e0>
   3a338:	sub	r1, fp, #176	; 0xb0
   3a33c:	str	r9, [r4, r0, lsl #2]
   3a340:	add	r2, r1, r0, lsl #2
   3a344:	ldr	r2, [r2, #4]
   3a348:	sdiv	r7, r3, r2
   3a34c:	mls	r6, r7, r2, r3
   3a350:	cmp	r6, #0
   3a354:	beq	3a374 <GetDataSlab+0x129b0>
   3a358:	ldr	r7, [r1, r0, lsl #2]
   3a35c:	ldr	r1, [lr, r0, lsl #2]
   3a360:	sub	r2, r2, r6
   3a364:	mla	r1, r1, r7, r2
   3a368:	add	r3, r1, r3
   3a36c:	add	r5, r5, r1
   3a370:	b	3a38c <GetDataSlab+0x129c8>
   3a374:	ldr	r2, [lr, r0, lsl #2]
   3a378:	cmp	r2, #0
   3a37c:	subne	r1, fp, #176	; 0xb0
   3a380:	ldrne	r1, [r1, r0, lsl #2]
   3a384:	mlane	r3, r1, r2, r3
   3a388:	mlane	r5, r1, r2, r5
   3a38c:	ldr	r1, [fp, #24]
   3a390:	add	r2, r0, #1
   3a394:	add	r0, r0, #2
   3a398:	cmp	r0, r1
   3a39c:	blt	3a314 <GetDataSlab+0x12950>
   3a3a0:	b	3a3b4 <GetDataSlab+0x129f0>
   3a3a4:	ldr	r1, [sp, #24]
   3a3a8:	ldr	r0, [r1, r0, lsl #2]
   3a3ac:	add	r5, r5, r0
   3a3b0:	add	r3, r0, r3
   3a3b4:	ldr	r0, [sp, #44]	; 0x2c
   3a3b8:	ldr	r1, [sp, #52]	; 0x34
   3a3bc:	add	sl, sl, ip
   3a3c0:	add	r1, r1, r0
   3a3c4:	ldr	r0, [sp, #48]	; 0x30
   3a3c8:	str	r1, [sp, #52]	; 0x34
   3a3cc:	ldr	r1, [sp, #56]	; 0x38
   3a3d0:	add	r0, r0, #1
   3a3d4:	str	r0, [sp, #48]	; 0x30
   3a3d8:	mov	r0, #0
   3a3dc:	cmp	sl, r1
   3a3e0:	blt	3a224 <GetDataSlab+0x12860>
   3a3e4:	b	47ffc <GetDataSlab+0x20638>
   3a3e8:	ldr	r0, [fp, #16]
   3a3ec:	mov	ip, #0
   3a3f0:	sub	r8, fp, #96	; 0x60
   3a3f4:	ldr	r0, [r0]
   3a3f8:	str	r0, [sp, #28]
   3a3fc:	sub	r0, r0, #1
   3a400:	str	r0, [fp, #-96]	; 0xffffffa0
   3a404:	ldr	r0, [fp, #8]
   3a408:	ldr	r0, [r0]
   3a40c:	str	r0, [fp, #-176]	; 0xffffff50
   3a410:	str	r0, [sp, #40]	; 0x28
   3a414:	ldr	r0, [fp, #24]
   3a418:	ldr	r1, [sl]
   3a41c:	cmp	r0, #2
   3a420:	str	r1, [sp, #44]	; 0x2c
   3a424:	str	r1, [sp, #56]	; 0x38
   3a428:	blt	3a574 <GetDataSlab+0x12bb0>
   3a42c:	ldr	r0, [fp, #8]
   3a430:	ldr	r3, [sp, #40]	; 0x28
   3a434:	ldr	r1, [sp, #44]	; 0x2c
   3a438:	mov	r5, lr
   3a43c:	mov	r4, #1
   3a440:	mov	r9, #0
   3a444:	mov	ip, #0
   3a448:	sub	r7, r0, #4
   3a44c:	sub	r6, r0, #12
   3a450:	mvn	r0, #15
   3a454:	mov	lr, r3
   3a458:	str	r1, [sp, #56]	; 0x38
   3a45c:	ldr	r1, [fp, #16]
   3a460:	add	r9, r9, #1
   3a464:	cmp	r9, #4
   3a468:	ldr	r1, [r1, r4, lsl #2]
   3a46c:	str	r3, [r5, r4, lsl #2]
   3a470:	sub	sl, r1, #1
   3a474:	ldr	r1, [fp, #8]
   3a478:	str	sl, [r8, r4, lsl #2]
   3a47c:	ldr	r1, [r1, r4, lsl #2]
   3a480:	str	r1, [sp, #52]	; 0x34
   3a484:	bcs	3a490 <GetDataSlab+0x12acc>
   3a488:	mov	r5, r4
   3a48c:	b	3a514 <GetDataSlab+0x12b50>
   3a490:	vmov.i32	q9, #1	; 0x00000001
   3a494:	vmov.i32	q10, #1	; 0x00000001
   3a498:	vmov.i32	q8, #1	; 0x00000001
   3a49c:	vmov.32	d23[1], r1
   3a4a0:	bic	r1, r9, #3
   3a4a4:	bic	r8, r4, #3
   3a4a8:	vmov.32	d18[0], r3
   3a4ac:	vmov.32	d20[0], sl
   3a4b0:	sub	r5, r4, r1
   3a4b4:	mov	r3, r6
   3a4b8:	vorr	d16, d18, d18
   3a4bc:	vmov.i32	q9, #1	; 0x00000001
   3a4c0:	vorr	d18, d20, d20
   3a4c4:	vld1.32	{d20-d21}, [r3], r0
   3a4c8:	subs	r8, r8, #4
   3a4cc:	vrev64.32	q12, q10
   3a4d0:	vext.8	q12, q12, q12, #8
   3a4d4:	vext.8	q11, q11, q12, #12
   3a4d8:	vmul.i32	q9, q9, q12
   3a4dc:	vmul.i32	q8, q11, q8
   3a4e0:	vorr	q11, q12, q12
   3a4e4:	bne	3a4c4 <GetDataSlab+0x12b00>
   3a4e8:	vext.8	q11, q9, q8, #8
   3a4ec:	vext.8	q12, q8, q8, #8
   3a4f0:	cmp	r9, r1
   3a4f4:	vmul.i32	q0, q9, q11
   3a4f8:	vmul.i32	q1, q8, q12
   3a4fc:	vmul.i32	q8, q0, d0[1]
   3a500:	vmul.i32	q9, q1, d2[1]
   3a504:	vmov.32	sl, d16[0]
   3a508:	vmov.32	r3, d18[0]
   3a50c:	beq	3a528 <GetDataSlab+0x12b64>
   3a510:	vmov.32	r1, d20[0]
   3a514:	mul	r3, r1, r3
   3a518:	ldr	r1, [r7, r5, lsl #2]
   3a51c:	subs	r5, r5, #1
   3a520:	mul	sl, sl, r1
   3a524:	bne	3a514 <GetDataSlab+0x12b50>
   3a528:	ldr	r1, [fp, #12]
   3a52c:	sub	r5, fp, #176	; 0xb0
   3a530:	sub	r8, fp, #96	; 0x60
   3a534:	ldr	r2, [sp, #56]	; 0x38
   3a538:	add	r6, r6, #4
   3a53c:	str	sl, [r8, r4, lsl #2]
   3a540:	str	r3, [r5, r4, lsl #2]
   3a544:	ldr	sl, [fp, #20]
   3a548:	ldr	r1, [r1, r4, lsl #2]
   3a54c:	mla	ip, r1, lr, ip
   3a550:	ldr	r1, [sl, r4, lsl #2]
   3a554:	mov	lr, r3
   3a558:	ldr	r3, [sp, #52]	; 0x34
   3a55c:	add	r4, r4, #1
   3a560:	mul	r2, r1, r2
   3a564:	ldr	r1, [fp, #24]
   3a568:	str	r2, [sp, #56]	; 0x38
   3a56c:	cmp	r4, r1
   3a570:	bne	3a45c <GetDataSlab+0x12a98>
   3a574:	ldr	r0, [sp, #48]	; 0x30
   3a578:	ldr	r1, [sp, #28]
   3a57c:	add	lr, r0, ip, lsl #1
   3a580:	cmp	r1, #1
   3a584:	bne	45d20 <GetDataSlab+0x1e35c>
   3a588:	ldr	r0, [sp, #56]	; 0x38
   3a58c:	ldr	r1, [sp, #44]	; 0x2c
   3a590:	cmp	r0, #1
   3a594:	blt	47ff8 <GetDataSlab+0x20634>
   3a598:	sub	r0, fp, #136	; 0x88
   3a59c:	add	r7, sl, #4
   3a5a0:	mov	sl, #0
   3a5a4:	sub	r2, fp, #224	; 0xe0
   3a5a8:	mov	r9, #0
   3a5ac:	orr	r6, r0, #4
   3a5b0:	orr	r0, r8, #4
   3a5b4:	ldr	r8, [fp, #12]
   3a5b8:	str	r0, [sp, #32]
   3a5bc:	lsl	r0, r1, #3
   3a5c0:	str	r0, [sp, #52]	; 0x34
   3a5c4:	bic	r0, r1, #1
   3a5c8:	str	r0, [sp, #36]	; 0x24
   3a5cc:	ldr	r0, [r8], #4
   3a5d0:	str	r0, [sp, #48]	; 0x30
   3a5d4:	cmp	r1, #1
   3a5d8:	blt	3a658 <GetDataSlab+0x12c94>
   3a5dc:	mov	r3, #0
   3a5e0:	beq	3a624 <GetDataSlab+0x12c60>
   3a5e4:	ldr	r0, [sp, #48]	; 0x30
   3a5e8:	ldr	r1, [sp, #36]	; 0x24
   3a5ec:	ldr	r3, [sp, #60]	; 0x3c
   3a5f0:	add	r0, lr, r0, lsl #1
   3a5f4:	ldr	r5, [r0], #4
   3a5f8:	subs	r1, r1, #2
   3a5fc:	str	r5, [fp, #-224]	; 0xffffff20
   3a600:	vld1.32	{d16[0]}, [r2 :32]
   3a604:	vmovl.s16	q8, d16
   3a608:	vmovl.s32	q8, d16
   3a60c:	vst1.64	{d16-d17}, [r3]!
   3a610:	bne	3a5f4 <GetDataSlab+0x12c30>
   3a614:	ldr	r0, [sp, #44]	; 0x2c
   3a618:	ldr	r3, [sp, #36]	; 0x24
   3a61c:	cmp	r0, r3
   3a620:	beq	3a658 <GetDataSlab+0x12c94>
   3a624:	ldr	r4, [sp, #48]	; 0x30
   3a628:	ldr	r0, [sp, #44]	; 0x2c
   3a62c:	ldr	r1, [sp, #60]	; 0x3c
   3a630:	add	r5, lr, r4, lsl #1
   3a634:	sub	r0, r0, r3
   3a638:	add	r1, r1, r3, lsl #3
   3a63c:	add	r3, r5, r3, lsl #1
   3a640:	ldrsh	r4, [r3], #2
   3a644:	subs	r0, r0, #1
   3a648:	asr	r5, r4, #31
   3a64c:	strd	r4, [r1]
   3a650:	add	r1, r1, #8
   3a654:	bne	3a640 <GetDataSlab+0x12c7c>
   3a658:	ldr	r0, [sp, #40]	; 0x28
   3a65c:	add	lr, lr, r0, lsl #1
   3a660:	add	ip, ip, r0
   3a664:	ldr	r0, [fp, #24]
   3a668:	cmp	r0, #2
   3a66c:	blt	3a718 <GetDataSlab+0x12d54>
   3a670:	mov	r1, #0
   3a674:	mov	r0, r1
   3a678:	ldr	r1, [r6, r1, lsl #2]
   3a67c:	add	r1, r1, #1
   3a680:	str	r1, [r6, r0, lsl #2]
   3a684:	ldr	r3, [r7, r0, lsl #2]
   3a688:	sdiv	r4, r1, r3
   3a68c:	mls	r1, r4, r3, r1
   3a690:	cmp	r1, #0
   3a694:	bne	3a708 <GetDataSlab+0x12d44>
   3a698:	sub	r4, fp, #176	; 0xb0
   3a69c:	str	sl, [r6, r0, lsl #2]
   3a6a0:	add	r1, r4, r0, lsl #2
   3a6a4:	ldr	r1, [r1, #4]
   3a6a8:	sdiv	r3, ip, r1
   3a6ac:	mls	r3, r3, r1, ip
   3a6b0:	cmp	r3, #0
   3a6b4:	beq	3a6d0 <GetDataSlab+0x12d0c>
   3a6b8:	ldr	r4, [r4, r0, lsl #2]
   3a6bc:	ldr	r5, [r8, r0, lsl #2]
   3a6c0:	sub	r1, r1, r3
   3a6c4:	mla	r1, r5, r4, r1
   3a6c8:	add	ip, r1, ip
   3a6cc:	b	3a6ec <GetDataSlab+0x12d28>
   3a6d0:	ldr	r1, [r8, r0, lsl #2]
   3a6d4:	cmp	r1, #0
   3a6d8:	beq	3a6f0 <GetDataSlab+0x12d2c>
   3a6dc:	sub	r3, fp, #176	; 0xb0
   3a6e0:	ldr	r3, [r3, r0, lsl #2]
   3a6e4:	mla	ip, r3, r1, ip
   3a6e8:	mul	r1, r3, r1
   3a6ec:	add	lr, lr, r1, lsl #1
   3a6f0:	ldr	r3, [fp, #24]
   3a6f4:	add	r1, r0, #1
   3a6f8:	add	r0, r0, #2
   3a6fc:	cmp	r0, r3
   3a700:	blt	3a674 <GetDataSlab+0x12cb0>
   3a704:	b	3a718 <GetDataSlab+0x12d54>
   3a708:	ldr	r1, [sp, #32]
   3a70c:	ldr	r0, [r1, r0, lsl #2]
   3a710:	add	lr, lr, r0, lsl #1
   3a714:	add	ip, r0, ip
   3a718:	ldr	r0, [sp, #60]	; 0x3c
   3a71c:	ldr	r1, [sp, #52]	; 0x34
   3a720:	ldr	r3, [sp, #56]	; 0x38
   3a724:	add	r0, r0, r1
   3a728:	ldr	r1, [sp, #44]	; 0x2c
   3a72c:	str	r0, [sp, #60]	; 0x3c
   3a730:	mov	r0, #0
   3a734:	add	r9, r9, r1
   3a738:	cmp	r9, r3
   3a73c:	blt	3a5d4 <GetDataSlab+0x12c10>
   3a740:	b	47ffc <GetDataSlab+0x20638>
   3a744:	ldr	r0, [fp, #16]
   3a748:	mov	r9, #0
   3a74c:	sub	r8, fp, #96	; 0x60
   3a750:	ldr	r0, [r0]
   3a754:	str	r0, [sp, #24]
   3a758:	sub	r0, r0, #1
   3a75c:	str	r0, [fp, #-96]	; 0xffffffa0
   3a760:	ldr	r0, [fp, #8]
   3a764:	ldr	r0, [r0]
   3a768:	str	r0, [fp, #-176]	; 0xffffff50
   3a76c:	str	r0, [sp, #44]	; 0x2c
   3a770:	ldr	r0, [fp, #24]
   3a774:	ldr	r1, [sl]
   3a778:	cmp	r0, #2
   3a77c:	str	r1, [sp, #52]	; 0x34
   3a780:	str	r1, [sp, #56]	; 0x38
   3a784:	blt	3a8d0 <GetDataSlab+0x12f0c>
   3a788:	ldr	r0, [fp, #8]
   3a78c:	ldr	r3, [sp, #44]	; 0x2c
   3a790:	ldr	r6, [sp, #52]	; 0x34
   3a794:	mov	r4, #1
   3a798:	mov	r2, #0
   3a79c:	mov	r9, #0
   3a7a0:	sub	r1, r0, #4
   3a7a4:	sub	r7, r0, #12
   3a7a8:	mvn	r0, #15
   3a7ac:	mov	sl, r3
   3a7b0:	str	r6, [sp, #56]	; 0x38
   3a7b4:	ldr	r6, [fp, #16]
   3a7b8:	add	r2, r2, #1
   3a7bc:	cmp	r2, #4
   3a7c0:	ldr	r6, [r6, r4, lsl #2]
   3a7c4:	str	r3, [lr, r4, lsl #2]
   3a7c8:	sub	lr, r6, #1
   3a7cc:	ldr	r6, [fp, #8]
   3a7d0:	str	lr, [r8, r4, lsl #2]
   3a7d4:	ldr	ip, [r6, r4, lsl #2]
   3a7d8:	bcs	3a7e8 <GetDataSlab+0x12e24>
   3a7dc:	mov	r5, ip
   3a7e0:	mov	r6, r4
   3a7e4:	b	3a86c <GetDataSlab+0x12ea8>
   3a7e8:	vmov.i32	q9, #1	; 0x00000001
   3a7ec:	vmov.i32	q10, #1	; 0x00000001
   3a7f0:	vmov.i32	q8, #1	; 0x00000001
   3a7f4:	bic	r5, r2, #3
   3a7f8:	bic	r8, r4, #3
   3a7fc:	vmov.32	d23[1], ip
   3a800:	vmov.32	d18[0], r3
   3a804:	vmov.32	d20[0], lr
   3a808:	sub	r6, r4, r5
   3a80c:	mov	r3, r7
   3a810:	vorr	d16, d18, d18
   3a814:	vmov.i32	q9, #1	; 0x00000001
   3a818:	vorr	d18, d20, d20
   3a81c:	vld1.32	{d20-d21}, [r3], r0
   3a820:	subs	r8, r8, #4
   3a824:	vrev64.32	q12, q10
   3a828:	vext.8	q12, q12, q12, #8
   3a82c:	vext.8	q11, q11, q12, #12
   3a830:	vmul.i32	q9, q9, q12
   3a834:	vmul.i32	q8, q11, q8
   3a838:	vorr	q11, q12, q12
   3a83c:	bne	3a81c <GetDataSlab+0x12e58>
   3a840:	vext.8	q11, q9, q8, #8
   3a844:	vext.8	q12, q8, q8, #8
   3a848:	cmp	r2, r5
   3a84c:	vmul.i32	q0, q9, q11
   3a850:	vmul.i32	q1, q8, q12
   3a854:	vmul.i32	q8, q0, d0[1]
   3a858:	vmul.i32	q9, q1, d2[1]
   3a85c:	vmov.32	lr, d16[0]
   3a860:	vmov.32	r3, d18[0]
   3a864:	beq	3a880 <GetDataSlab+0x12ebc>
   3a868:	vmov.32	r5, d20[0]
   3a86c:	mul	r3, r5, r3
   3a870:	ldr	r5, [r1, r6, lsl #2]
   3a874:	subs	r6, r6, #1
   3a878:	mul	lr, lr, r5
   3a87c:	bne	3a86c <GetDataSlab+0x12ea8>
   3a880:	sub	r5, fp, #176	; 0xb0
   3a884:	sub	r8, fp, #96	; 0x60
   3a888:	add	r7, r7, #4
   3a88c:	str	lr, [r8, r4, lsl #2]
   3a890:	str	r3, [r5, r4, lsl #2]
   3a894:	mov	lr, r5
   3a898:	ldr	r5, [fp, #12]
   3a89c:	ldr	r6, [r5, r4, lsl #2]
   3a8a0:	ldr	r5, [fp, #20]
   3a8a4:	mla	r9, r6, sl, r9
   3a8a8:	ldr	r6, [r5, r4, lsl #2]
   3a8ac:	ldr	r5, [sp, #56]	; 0x38
   3a8b0:	add	r4, r4, #1
   3a8b4:	mov	sl, r3
   3a8b8:	mov	r3, ip
   3a8bc:	mul	r5, r6, r5
   3a8c0:	ldr	r6, [fp, #24]
   3a8c4:	str	r5, [sp, #56]	; 0x38
   3a8c8:	cmp	r4, r6
   3a8cc:	bne	3a7b4 <GetDataSlab+0x12df0>
   3a8d0:	ldr	r0, [sp, #48]	; 0x30
   3a8d4:	ldr	r7, [sp, #24]
   3a8d8:	add	r4, r0, r9, lsl #1
   3a8dc:	cmp	r7, #1
   3a8e0:	bne	45ea4 <GetDataSlab+0x1e4e0>
   3a8e4:	ldr	r0, [sp, #56]	; 0x38
   3a8e8:	sub	r1, fp, #96	; 0x60
   3a8ec:	cmp	r0, #1
   3a8f0:	ldr	r0, [fp, #20]
   3a8f4:	blt	47ff8 <GetDataSlab+0x20634>
   3a8f8:	ldr	r2, [sp, #52]	; 0x34
   3a8fc:	add	sl, r0, #4
   3a900:	sub	r0, fp, #136	; 0x88
   3a904:	ldr	r8, [fp, #12]
   3a908:	mov	ip, #0
   3a90c:	orr	r6, r0, #4
   3a910:	orr	r0, r1, #4
   3a914:	sub	r1, fp, #220	; 0xdc
   3a918:	str	r0, [sp, #28]
   3a91c:	lsl	r0, r2, #3
   3a920:	str	r0, [sp, #40]	; 0x28
   3a924:	bic	r0, r2, #1
   3a928:	str	r0, [sp, #32]
   3a92c:	ldr	r0, [r8], #4
   3a930:	str	r0, [sp, #36]	; 0x24
   3a934:	mov	r0, #0
   3a938:	str	r0, [sp, #48]	; 0x30
   3a93c:	cmp	r2, #1
   3a940:	blt	3a9b4 <GetDataSlab+0x12ff0>
   3a944:	mov	r5, #0
   3a948:	beq	3a988 <GetDataSlab+0x12fc4>
   3a94c:	ldr	r0, [sp, #36]	; 0x24
   3a950:	ldr	r5, [sp, #32]
   3a954:	ldr	r3, [sp, #60]	; 0x3c
   3a958:	add	r0, r4, r0, lsl #1
   3a95c:	ldr	r7, [r0], #4
   3a960:	subs	r5, r5, #2
   3a964:	str	r7, [fp, #-220]	; 0xffffff24
   3a968:	vld1.32	{d16[0]}, [r1 :32]
   3a96c:	vmovl.u16	q8, d16
   3a970:	vmovl.u32	q8, d16
   3a974:	vst1.64	{d16-d17}, [r3]!
   3a978:	bne	3a95c <GetDataSlab+0x12f98>
   3a97c:	ldr	r5, [sp, #32]
   3a980:	cmp	r2, r5
   3a984:	beq	3a9b4 <GetDataSlab+0x12ff0>
   3a988:	sub	r0, r2, r5
   3a98c:	ldr	r2, [sp, #36]	; 0x24
   3a990:	ldr	r3, [sp, #60]	; 0x3c
   3a994:	add	r7, r4, r2, lsl #1
   3a998:	add	r3, r3, r5, lsl #3
   3a99c:	add	r5, r7, r5, lsl #1
   3a9a0:	ldrh	r7, [r5], #2
   3a9a4:	subs	r0, r0, #1
   3a9a8:	stm	r3, {r7, ip}
   3a9ac:	add	r3, r3, #8
   3a9b0:	bne	3a9a0 <GetDataSlab+0x12fdc>
   3a9b4:	ldr	r0, [sp, #44]	; 0x2c
   3a9b8:	sub	r2, fp, #176	; 0xb0
   3a9bc:	add	r4, r4, r0, lsl #1
   3a9c0:	add	r9, r9, r0
   3a9c4:	ldr	r0, [fp, #24]
   3a9c8:	cmp	r0, #2
   3a9cc:	blt	3aa74 <GetDataSlab+0x130b0>
   3a9d0:	mov	r3, #0
   3a9d4:	mov	r0, r3
   3a9d8:	ldr	r3, [r6, r3, lsl #2]
   3a9dc:	add	r3, r3, #1
   3a9e0:	str	r3, [r6, r0, lsl #2]
   3a9e4:	ldr	r5, [sl, r0, lsl #2]
   3a9e8:	sdiv	r7, r3, r5
   3a9ec:	mls	r3, r7, r5, r3
   3a9f0:	cmp	r3, #0
   3a9f4:	bne	3aa64 <GetDataSlab+0x130a0>
   3a9f8:	add	r3, r2, r0, lsl #2
   3a9fc:	str	ip, [r6, r0, lsl #2]
   3aa00:	ldr	r3, [r3, #4]
   3aa04:	sdiv	r5, r9, r3
   3aa08:	mls	r5, r5, r3, r9
   3aa0c:	cmp	r5, #0
   3aa10:	beq	3aa30 <GetDataSlab+0x1306c>
   3aa14:	ldr	r7, [r2, r0, lsl #2]
   3aa18:	ldr	lr, [r8, r0, lsl #2]
   3aa1c:	sub	r3, r3, r5
   3aa20:	sub	r2, fp, #176	; 0xb0
   3aa24:	mla	r3, lr, r7, r3
   3aa28:	add	r9, r3, r9
   3aa2c:	b	3aa48 <GetDataSlab+0x13084>
   3aa30:	ldr	r3, [r8, r0, lsl #2]
   3aa34:	cmp	r3, #0
   3aa38:	beq	3aa4c <GetDataSlab+0x13088>
   3aa3c:	ldr	r7, [r2, r0, lsl #2]
   3aa40:	mla	r9, r7, r3, r9
   3aa44:	mul	r3, r7, r3
   3aa48:	add	r4, r4, r3, lsl #1
   3aa4c:	ldr	r7, [fp, #24]
   3aa50:	add	r3, r0, #1
   3aa54:	add	r0, r0, #2
   3aa58:	cmp	r0, r7
   3aa5c:	blt	3a9d4 <GetDataSlab+0x13010>
   3aa60:	b	3aa74 <GetDataSlab+0x130b0>
   3aa64:	ldr	r2, [sp, #28]
   3aa68:	ldr	r0, [r2, r0, lsl #2]
   3aa6c:	add	r4, r4, r0, lsl #1
   3aa70:	add	r9, r0, r9
   3aa74:	ldr	r0, [sp, #60]	; 0x3c
   3aa78:	ldr	r2, [sp, #40]	; 0x28
   3aa7c:	ldr	r7, [sp, #48]	; 0x30
   3aa80:	ldr	r3, [sp, #56]	; 0x38
   3aa84:	add	r0, r0, r2
   3aa88:	ldr	r2, [sp, #52]	; 0x34
   3aa8c:	str	r0, [sp, #60]	; 0x3c
   3aa90:	mov	r0, #0
   3aa94:	add	r7, r7, r2
   3aa98:	cmp	r7, r3
   3aa9c:	str	r7, [sp, #48]	; 0x30
   3aaa0:	blt	3a93c <GetDataSlab+0x12f78>
   3aaa4:	b	47ffc <GetDataSlab+0x20638>
   3aaa8:	ldr	r0, [fp, #16]
   3aaac:	mov	r3, #0
   3aab0:	sub	r7, fp, #96	; 0x60
   3aab4:	ldr	r0, [r0]
   3aab8:	str	r0, [sp, #28]
   3aabc:	sub	r0, r0, #1
   3aac0:	str	r0, [fp, #-96]	; 0xffffffa0
   3aac4:	ldr	r0, [fp, #8]
   3aac8:	ldr	r0, [r0]
   3aacc:	str	r0, [fp, #-176]	; 0xffffff50
   3aad0:	str	r0, [sp, #40]	; 0x28
   3aad4:	ldr	r0, [fp, #24]
   3aad8:	ldr	r1, [sl]
   3aadc:	cmp	r0, #2
   3aae0:	str	r1, [sp, #44]	; 0x2c
   3aae4:	str	r1, [sp, #56]	; 0x38
   3aae8:	blt	3ac30 <GetDataSlab+0x1326c>
   3aaec:	ldr	r0, [fp, #8]
   3aaf0:	ldr	r2, [sp, #40]	; 0x28
   3aaf4:	mov	r5, #1
   3aaf8:	mov	r8, #0
   3aafc:	mvn	r4, #15
   3ab00:	mov	r3, #0
   3ab04:	sub	r1, r0, #4
   3ab08:	sub	ip, r0, #12
   3ab0c:	ldr	r0, [sp, #44]	; 0x2c
   3ab10:	mov	r9, r2
   3ab14:	str	r0, [sp, #56]	; 0x38
   3ab18:	ldr	r0, [fp, #16]
   3ab1c:	add	r8, r8, #1
   3ab20:	cmp	r8, #4
   3ab24:	ldr	r0, [r0, r5, lsl #2]
   3ab28:	str	r2, [lr, r5, lsl #2]
   3ab2c:	sub	r0, r0, #1
   3ab30:	str	r0, [r7, r5, lsl #2]
   3ab34:	ldr	r7, [fp, #8]
   3ab38:	ldr	r7, [r7, r5, lsl #2]
   3ab3c:	str	r7, [sp, #52]	; 0x34
   3ab40:	bcs	3ab4c <GetDataSlab+0x13188>
   3ab44:	mov	r6, r5
   3ab48:	b	3abd4 <GetDataSlab+0x13210>
   3ab4c:	vmov.i32	q9, #1	; 0x00000001
   3ab50:	vmov.i32	q10, #1	; 0x00000001
   3ab54:	vmov.i32	q8, #1	; 0x00000001
   3ab58:	vmov.32	d23[1], r7
   3ab5c:	bic	r7, r8, #3
   3ab60:	bic	sl, r5, #3
   3ab64:	vmov.32	d18[0], r2
   3ab68:	vmov.32	d20[0], r0
   3ab6c:	sub	r6, r5, r7
   3ab70:	mov	r0, ip
   3ab74:	vorr	d16, d18, d18
   3ab78:	vmov.i32	q9, #1	; 0x00000001
   3ab7c:	vorr	d18, d20, d20
   3ab80:	vld1.32	{d20-d21}, [r0], r4
   3ab84:	subs	sl, sl, #4
   3ab88:	vrev64.32	q12, q10
   3ab8c:	vext.8	q12, q12, q12, #8
   3ab90:	vext.8	q11, q11, q12, #12
   3ab94:	vmul.i32	q9, q9, q12
   3ab98:	vmul.i32	q8, q11, q8
   3ab9c:	vorr	q11, q12, q12
   3aba0:	bne	3ab80 <GetDataSlab+0x131bc>
   3aba4:	vext.8	q11, q9, q8, #8
   3aba8:	vext.8	q12, q8, q8, #8
   3abac:	ldr	sl, [fp, #20]
   3abb0:	cmp	r8, r7
   3abb4:	vmul.i32	q0, q9, q11
   3abb8:	vmul.i32	q1, q8, q12
   3abbc:	vmul.i32	q8, q0, d0[1]
   3abc0:	vmul.i32	q9, q1, d2[1]
   3abc4:	vmov.32	r0, d16[0]
   3abc8:	vmov.32	r2, d18[0]
   3abcc:	beq	3abe8 <GetDataSlab+0x13224>
   3abd0:	vmov.32	r7, d20[0]
   3abd4:	mul	r2, r7, r2
   3abd8:	ldr	r7, [r1, r6, lsl #2]
   3abdc:	subs	r6, r6, #1
   3abe0:	mul	r0, r0, r7
   3abe4:	bne	3abd4 <GetDataSlab+0x13210>
   3abe8:	sub	r7, fp, #96	; 0x60
   3abec:	sub	lr, fp, #176	; 0xb0
   3abf0:	ldr	r6, [sp, #56]	; 0x38
   3abf4:	add	ip, ip, #4
   3abf8:	str	r0, [r7, r5, lsl #2]
   3abfc:	ldr	r0, [fp, #12]
   3ac00:	str	r2, [lr, r5, lsl #2]
   3ac04:	ldr	r0, [r0, r5, lsl #2]
   3ac08:	mla	r3, r0, r9, r3
   3ac0c:	ldr	r0, [sl, r5, lsl #2]
   3ac10:	mov	r9, r2
   3ac14:	ldr	r2, [sp, #52]	; 0x34
   3ac18:	add	r5, r5, #1
   3ac1c:	mul	r6, r0, r6
   3ac20:	ldr	r0, [fp, #24]
   3ac24:	str	r6, [sp, #56]	; 0x38
   3ac28:	cmp	r5, r0
   3ac2c:	bne	3ab18 <GetDataSlab+0x13154>
   3ac30:	ldr	r0, [sp, #48]	; 0x30
   3ac34:	ldr	r6, [sp, #28]
   3ac38:	add	sl, r0, r3, lsl #2
   3ac3c:	cmp	r6, #1
   3ac40:	bne	46040 <GetDataSlab+0x1e67c>
   3ac44:	ldr	r0, [sp, #56]	; 0x38
   3ac48:	sub	r1, fp, #96	; 0x60
   3ac4c:	cmp	r0, #1
   3ac50:	ldr	r0, [fp, #12]
   3ac54:	blt	47ff8 <GetDataSlab+0x20634>
   3ac58:	add	r9, r0, #4
   3ac5c:	ldr	r0, [fp, #20]
   3ac60:	add	lr, r0, #4
   3ac64:	sub	r0, fp, #136	; 0x88
   3ac68:	orr	r5, r0, #4
   3ac6c:	orr	r0, r1, #4
   3ac70:	ldr	r1, [sp, #44]	; 0x2c
   3ac74:	str	r0, [sp, #32]
   3ac78:	lsl	r0, r1, #3
   3ac7c:	str	r0, [sp, #48]	; 0x30
   3ac80:	bic	r0, r1, #1
   3ac84:	str	r0, [sp, #36]	; 0x24
   3ac88:	mov	r0, #0
   3ac8c:	str	r0, [sp, #52]	; 0x34
   3ac90:	ldr	ip, [sp, #60]	; 0x3c
   3ac94:	cmp	r1, #1
   3ac98:	blt	3ad24 <GetDataSlab+0x13360>
   3ac9c:	ldr	r0, [fp, #12]
   3aca0:	mov	r2, #0
   3aca4:	ldr	r6, [r0]
   3aca8:	beq	3acf4 <GetDataSlab+0x13330>
   3acac:	ldr	r1, [sp, #36]	; 0x24
   3acb0:	add	r2, sl, r6, lsl #2
   3acb4:	mov	r0, ip
   3acb8:	add	r4, sp, #240	; 0xf0
   3acbc:	ldm	r2, {r8, ip}
   3acc0:	subs	r1, r1, #2
   3acc4:	add	r2, r2, #8
   3acc8:	str	ip, [sp, #244]	; 0xf4
   3accc:	str	r8, [sp, #240]	; 0xf0
   3acd0:	vld1.32	{d16}, [r4 :64]
   3acd4:	vmovl.s32	q8, d16
   3acd8:	vst1.64	{d16-d17}, [r0]!
   3acdc:	bne	3acbc <GetDataSlab+0x132f8>
   3ace0:	ldr	r0, [sp, #44]	; 0x2c
   3ace4:	ldr	r2, [sp, #36]	; 0x24
   3ace8:	ldr	ip, [sp, #60]	; 0x3c
   3acec:	cmp	r0, r2
   3acf0:	beq	3ad24 <GetDataSlab+0x13360>
   3acf4:	ldr	r0, [sp, #44]	; 0x2c
   3acf8:	sub	r7, r0, r2
   3acfc:	add	r0, ip, r2, lsl #3
   3ad00:	add	r2, r2, r6
   3ad04:	add	r2, sl, r2, lsl #2
   3ad08:	ldr	r8, [r2], #4
   3ad0c:	subs	r7, r7, #1
   3ad10:	asr	r1, r8, #31
   3ad14:	str	r8, [r0]
   3ad18:	str	r1, [r0, #4]
   3ad1c:	add	r0, r0, #8
   3ad20:	bne	3ad08 <GetDataSlab+0x13344>
   3ad24:	ldr	r0, [sp, #40]	; 0x28
   3ad28:	add	sl, sl, r0, lsl #2
   3ad2c:	add	r3, r3, r0
   3ad30:	ldr	r0, [fp, #24]
   3ad34:	cmp	r0, #2
   3ad38:	blt	3ade8 <GetDataSlab+0x13424>
   3ad3c:	mov	r1, #0
   3ad40:	mov	r4, #0
   3ad44:	mov	r0, r1
   3ad48:	ldr	r1, [r5, r1, lsl #2]
   3ad4c:	add	r1, r1, #1
   3ad50:	str	r1, [r5, r0, lsl #2]
   3ad54:	ldr	r2, [lr, r0, lsl #2]
   3ad58:	sdiv	r7, r1, r2
   3ad5c:	mls	r1, r7, r2, r1
   3ad60:	cmp	r1, #0
   3ad64:	bne	3add8 <GetDataSlab+0x13414>
   3ad68:	sub	r6, fp, #176	; 0xb0
   3ad6c:	str	r4, [r5, r0, lsl #2]
   3ad70:	add	r1, r6, r0, lsl #2
   3ad74:	ldr	r1, [r1, #4]
   3ad78:	sdiv	r2, r3, r1
   3ad7c:	mls	r2, r2, r1, r3
   3ad80:	cmp	r2, #0
   3ad84:	beq	3ada0 <GetDataSlab+0x133dc>
   3ad88:	ldr	r7, [r6, r0, lsl #2]
   3ad8c:	ldr	r6, [r9, r0, lsl #2]
   3ad90:	sub	r1, r1, r2
   3ad94:	mla	r1, r6, r7, r1
   3ad98:	add	r3, r1, r3
   3ad9c:	b	3adbc <GetDataSlab+0x133f8>
   3ada0:	ldr	r1, [r9, r0, lsl #2]
   3ada4:	cmp	r1, #0
   3ada8:	beq	3adc0 <GetDataSlab+0x133fc>
   3adac:	sub	r2, fp, #176	; 0xb0
   3adb0:	ldr	r2, [r2, r0, lsl #2]
   3adb4:	mla	r3, r2, r1, r3
   3adb8:	mul	r1, r2, r1
   3adbc:	add	sl, sl, r1, lsl #2
   3adc0:	ldr	r2, [fp, #24]
   3adc4:	add	r1, r0, #1
   3adc8:	add	r0, r0, #2
   3adcc:	cmp	r0, r2
   3add0:	blt	3ad44 <GetDataSlab+0x13380>
   3add4:	b	3ade8 <GetDataSlab+0x13424>
   3add8:	ldr	r1, [sp, #32]
   3addc:	ldr	r0, [r1, r0, lsl #2]
   3ade0:	add	sl, sl, r0, lsl #2
   3ade4:	add	r3, r0, r3
   3ade8:	ldr	r1, [sp, #44]	; 0x2c
   3adec:	ldr	r7, [sp, #52]	; 0x34
   3adf0:	ldr	r0, [sp, #48]	; 0x30
   3adf4:	ldr	r2, [sp, #56]	; 0x38
   3adf8:	add	r7, r7, r1
   3adfc:	add	ip, ip, r0
   3ae00:	mov	r0, #0
   3ae04:	cmp	r7, r2
   3ae08:	str	ip, [sp, #60]	; 0x3c
   3ae0c:	str	r7, [sp, #52]	; 0x34
   3ae10:	blt	3ac90 <GetDataSlab+0x132cc>
   3ae14:	b	47ffc <GetDataSlab+0x20638>
   3ae18:	ldr	r0, [fp, #16]
   3ae1c:	mov	r3, #0
   3ae20:	sub	r7, fp, #96	; 0x60
   3ae24:	ldr	r0, [r0]
   3ae28:	str	r0, [sp, #32]
   3ae2c:	sub	r0, r0, #1
   3ae30:	str	r0, [fp, #-96]	; 0xffffffa0
   3ae34:	ldr	r0, [fp, #8]
   3ae38:	ldr	r0, [r0]
   3ae3c:	str	r0, [fp, #-176]	; 0xffffff50
   3ae40:	str	r0, [sp, #40]	; 0x28
   3ae44:	ldr	r0, [fp, #24]
   3ae48:	ldr	r1, [sl]
   3ae4c:	cmp	r0, #2
   3ae50:	str	r1, [sp, #44]	; 0x2c
   3ae54:	str	r1, [sp, #56]	; 0x38
   3ae58:	blt	3afa4 <GetDataSlab+0x135e0>
   3ae5c:	ldr	r0, [fp, #8]
   3ae60:	ldr	r2, [sp, #40]	; 0x28
   3ae64:	mov	r6, lr
   3ae68:	mov	r5, #1
   3ae6c:	mov	r8, #0
   3ae70:	mvn	lr, #15
   3ae74:	mov	r3, #0
   3ae78:	sub	r1, r0, #4
   3ae7c:	sub	ip, r0, #12
   3ae80:	ldr	r0, [sp, #44]	; 0x2c
   3ae84:	mov	r9, r2
   3ae88:	str	r0, [sp, #56]	; 0x38
   3ae8c:	ldr	r0, [fp, #16]
   3ae90:	add	r8, r8, #1
   3ae94:	cmp	r8, #4
   3ae98:	ldr	r0, [r0, r5, lsl #2]
   3ae9c:	str	r2, [r6, r5, lsl #2]
   3aea0:	sub	r0, r0, #1
   3aea4:	str	r0, [r7, r5, lsl #2]
   3aea8:	ldr	r7, [fp, #8]
   3aeac:	ldr	r7, [r7, r5, lsl #2]
   3aeb0:	str	r7, [sp, #52]	; 0x34
   3aeb4:	bcs	3aec0 <GetDataSlab+0x134fc>
   3aeb8:	mov	r6, r5
   3aebc:	b	3af48 <GetDataSlab+0x13584>
   3aec0:	vmov.i32	q9, #1	; 0x00000001
   3aec4:	vmov.i32	q10, #1	; 0x00000001
   3aec8:	vmov.i32	q8, #1	; 0x00000001
   3aecc:	vmov.32	d23[1], r7
   3aed0:	bic	r7, r8, #3
   3aed4:	bic	sl, r5, #3
   3aed8:	vmov.32	d18[0], r2
   3aedc:	vmov.32	d20[0], r0
   3aee0:	sub	r6, r5, r7
   3aee4:	mov	r0, ip
   3aee8:	vorr	d16, d18, d18
   3aeec:	vmov.i32	q9, #1	; 0x00000001
   3aef0:	vorr	d18, d20, d20
   3aef4:	vld1.32	{d20-d21}, [r0], lr
   3aef8:	subs	sl, sl, #4
   3aefc:	vrev64.32	q12, q10
   3af00:	vext.8	q12, q12, q12, #8
   3af04:	vext.8	q11, q11, q12, #12
   3af08:	vmul.i32	q9, q9, q12
   3af0c:	vmul.i32	q8, q11, q8
   3af10:	vorr	q11, q12, q12
   3af14:	bne	3aef4 <GetDataSlab+0x13530>
   3af18:	vext.8	q11, q9, q8, #8
   3af1c:	vext.8	q12, q8, q8, #8
   3af20:	ldr	sl, [fp, #20]
   3af24:	cmp	r8, r7
   3af28:	vmul.i32	q0, q9, q11
   3af2c:	vmul.i32	q1, q8, q12
   3af30:	vmul.i32	q8, q0, d0[1]
   3af34:	vmul.i32	q9, q1, d2[1]
   3af38:	vmov.32	r0, d16[0]
   3af3c:	vmov.32	r2, d18[0]
   3af40:	beq	3af5c <GetDataSlab+0x13598>
   3af44:	vmov.32	r7, d20[0]
   3af48:	mul	r2, r7, r2
   3af4c:	ldr	r7, [r1, r6, lsl #2]
   3af50:	subs	r6, r6, #1
   3af54:	mul	r0, r0, r7
   3af58:	bne	3af48 <GetDataSlab+0x13584>
   3af5c:	sub	r7, fp, #96	; 0x60
   3af60:	sub	r6, fp, #176	; 0xb0
   3af64:	ldr	r4, [sp, #56]	; 0x38
   3af68:	add	ip, ip, #4
   3af6c:	str	r0, [r7, r5, lsl #2]
   3af70:	ldr	r0, [fp, #12]
   3af74:	str	r2, [r6, r5, lsl #2]
   3af78:	ldr	r0, [r0, r5, lsl #2]
   3af7c:	mla	r3, r0, r9, r3
   3af80:	ldr	r0, [sl, r5, lsl #2]
   3af84:	mov	r9, r2
   3af88:	ldr	r2, [sp, #52]	; 0x34
   3af8c:	add	r5, r5, #1
   3af90:	mul	r4, r0, r4
   3af94:	ldr	r0, [fp, #24]
   3af98:	str	r4, [sp, #56]	; 0x38
   3af9c:	cmp	r5, r0
   3afa0:	bne	3ae8c <GetDataSlab+0x134c8>
   3afa4:	ldr	r0, [sp, #48]	; 0x30
   3afa8:	ldr	r4, [sp, #32]
   3afac:	add	lr, r0, r3, lsl #2
   3afb0:	cmp	r4, #1
   3afb4:	bne	461e8 <GetDataSlab+0x1e824>
   3afb8:	ldr	r0, [sp, #56]	; 0x38
   3afbc:	sub	r2, fp, #96	; 0x60
   3afc0:	cmp	r0, #1
   3afc4:	ldr	r0, [fp, #12]
   3afc8:	blt	47ff8 <GetDataSlab+0x20634>
   3afcc:	mov	r1, sl
   3afd0:	add	sl, r0, #4
   3afd4:	sub	r0, fp, #136	; 0x88
   3afd8:	mov	r9, #0
   3afdc:	add	r4, r1, #4
   3afe0:	ldr	r1, [sp, #44]	; 0x2c
   3afe4:	orr	r5, r0, #4
   3afe8:	orr	r0, r2, #4
   3afec:	str	r0, [sp, #32]
   3aff0:	lsl	r0, r1, #3
   3aff4:	str	r0, [sp, #48]	; 0x30
   3aff8:	bic	r0, r1, #1
   3affc:	str	r0, [sp, #36]	; 0x24
   3b000:	mov	r0, #0
   3b004:	str	r0, [sp, #52]	; 0x34
   3b008:	ldr	ip, [sp, #60]	; 0x3c
   3b00c:	cmp	r1, #1
   3b010:	blt	3b094 <GetDataSlab+0x136d0>
   3b014:	ldr	r0, [fp, #12]
   3b018:	mov	r7, #0
   3b01c:	ldr	r6, [r0]
   3b020:	beq	3b06c <GetDataSlab+0x136a8>
   3b024:	ldr	r0, [sp, #36]	; 0x24
   3b028:	add	r2, lr, r6, lsl #2
   3b02c:	mov	r7, ip
   3b030:	sub	r1, fp, #232	; 0xe8
   3b034:	ldm	r2, {r8, ip}
   3b038:	subs	r0, r0, #2
   3b03c:	add	r2, r2, #8
   3b040:	str	ip, [fp, #-228]	; 0xffffff1c
   3b044:	str	r8, [fp, #-232]	; 0xffffff18
   3b048:	vld1.32	{d16}, [r1 :64]
   3b04c:	vmovl.u32	q8, d16
   3b050:	vst1.64	{d16-d17}, [r7]!
   3b054:	bne	3b034 <GetDataSlab+0x13670>
   3b058:	ldr	r0, [sp, #44]	; 0x2c
   3b05c:	ldr	r7, [sp, #36]	; 0x24
   3b060:	ldr	ip, [sp, #60]	; 0x3c
   3b064:	cmp	r0, r7
   3b068:	beq	3b094 <GetDataSlab+0x136d0>
   3b06c:	ldr	r0, [sp, #44]	; 0x2c
   3b070:	add	r2, ip, r7, lsl #3
   3b074:	sub	r0, r0, r7
   3b078:	add	r7, r7, r6
   3b07c:	add	r7, lr, r7, lsl #2
   3b080:	ldr	r8, [r7], #4
   3b084:	subs	r0, r0, #1
   3b088:	strd	r8, [r2]
   3b08c:	add	r2, r2, #8
   3b090:	bne	3b080 <GetDataSlab+0x136bc>
   3b094:	ldr	r0, [sp, #40]	; 0x28
   3b098:	add	lr, lr, r0, lsl #2
   3b09c:	add	r3, r3, r0
   3b0a0:	ldr	r0, [fp, #24]
   3b0a4:	cmp	r0, #2
   3b0a8:	blt	3b154 <GetDataSlab+0x13790>
   3b0ac:	mov	r2, #0
   3b0b0:	mov	r0, r2
   3b0b4:	ldr	r2, [r5, r2, lsl #2]
   3b0b8:	add	r2, r2, #1
   3b0bc:	str	r2, [r5, r0, lsl #2]
   3b0c0:	ldr	r7, [r4, r0, lsl #2]
   3b0c4:	sdiv	r6, r2, r7
   3b0c8:	mls	r2, r6, r7, r2
   3b0cc:	cmp	r2, #0
   3b0d0:	bne	3b144 <GetDataSlab+0x13780>
   3b0d4:	sub	r1, fp, #176	; 0xb0
   3b0d8:	str	r9, [r5, r0, lsl #2]
   3b0dc:	add	r2, r1, r0, lsl #2
   3b0e0:	ldr	r2, [r2, #4]
   3b0e4:	sdiv	r7, r3, r2
   3b0e8:	mls	r7, r7, r2, r3
   3b0ec:	cmp	r7, #0
   3b0f0:	beq	3b10c <GetDataSlab+0x13748>
   3b0f4:	ldr	r6, [r1, r0, lsl #2]
   3b0f8:	ldr	r1, [sl, r0, lsl #2]
   3b0fc:	sub	r2, r2, r7
   3b100:	mla	r1, r1, r6, r2
   3b104:	add	r3, r1, r3
   3b108:	b	3b128 <GetDataSlab+0x13764>
   3b10c:	ldr	r2, [sl, r0, lsl #2]
   3b110:	cmp	r2, #0
   3b114:	beq	3b12c <GetDataSlab+0x13768>
   3b118:	sub	r1, fp, #176	; 0xb0
   3b11c:	ldr	r1, [r1, r0, lsl #2]
   3b120:	mla	r3, r1, r2, r3
   3b124:	mul	r1, r1, r2
   3b128:	add	lr, lr, r1, lsl #2
   3b12c:	ldr	r1, [fp, #24]
   3b130:	add	r2, r0, #1
   3b134:	add	r0, r0, #2
   3b138:	cmp	r0, r1
   3b13c:	blt	3b0b0 <GetDataSlab+0x136ec>
   3b140:	b	3b154 <GetDataSlab+0x13790>
   3b144:	ldr	r1, [sp, #32]
   3b148:	ldr	r0, [r1, r0, lsl #2]
   3b14c:	add	lr, lr, r0, lsl #2
   3b150:	add	r3, r0, r3
   3b154:	ldr	r1, [sp, #44]	; 0x2c
   3b158:	ldr	r7, [sp, #52]	; 0x34
   3b15c:	ldr	r0, [sp, #48]	; 0x30
   3b160:	ldr	r2, [sp, #56]	; 0x38
   3b164:	add	r7, r7, r1
   3b168:	add	ip, ip, r0
   3b16c:	mov	r0, #0
   3b170:	cmp	r7, r2
   3b174:	str	ip, [sp, #60]	; 0x3c
   3b178:	str	r7, [sp, #52]	; 0x34
   3b17c:	blt	3b008 <GetDataSlab+0x13644>
   3b180:	b	47ffc <GetDataSlab+0x20638>
   3b184:	ldr	r0, [fp, #16]
   3b188:	ldr	r9, [fp, #8]
   3b18c:	mov	r4, #0
   3b190:	sub	r8, fp, #96	; 0x60
   3b194:	ldr	r0, [r0]
   3b198:	str	r0, [sp, #16]
   3b19c:	sub	r0, r0, #1
   3b1a0:	str	r0, [fp, #-96]	; 0xffffffa0
   3b1a4:	ldr	r0, [r9]
   3b1a8:	str	r0, [fp, #-176]	; 0xffffff50
   3b1ac:	str	r0, [sp, #36]	; 0x24
   3b1b0:	ldr	r0, [fp, #24]
   3b1b4:	ldr	r1, [sl]
   3b1b8:	cmp	r0, #2
   3b1bc:	str	r1, [sp, #40]	; 0x28
   3b1c0:	str	r1, [sp, #44]	; 0x2c
   3b1c4:	blt	3b32c <GetDataSlab+0x13968>
   3b1c8:	mov	r0, #0
   3b1cc:	ldr	r2, [sp, #40]	; 0x28
   3b1d0:	sub	r1, r9, #4
   3b1d4:	sub	ip, r9, #12
   3b1d8:	mov	r7, #1
   3b1dc:	mvn	sl, #15
   3b1e0:	mov	r4, #0
   3b1e4:	str	r0, [sp, #56]	; 0x38
   3b1e8:	ldr	r0, [sp, #36]	; 0x24
   3b1ec:	str	r2, [sp, #44]	; 0x2c
   3b1f0:	mov	r5, r0
   3b1f4:	ldr	r2, [fp, #16]
   3b1f8:	ldr	r6, [sp, #56]	; 0x38
   3b1fc:	str	r5, [sp, #52]	; 0x34
   3b200:	ldr	r2, [r2, r7, lsl #2]
   3b204:	str	r0, [lr, r7, lsl #2]
   3b208:	add	r6, r6, #1
   3b20c:	cmp	r6, #4
   3b210:	str	r6, [sp, #56]	; 0x38
   3b214:	sub	r5, r2, #1
   3b218:	str	r5, [r8, r7, lsl #2]
   3b21c:	ldr	lr, [r9, r7, lsl #2]
   3b220:	bcs	3b230 <GetDataSlab+0x1386c>
   3b224:	mov	r2, lr
   3b228:	mov	r3, r7
   3b22c:	b	3b2c0 <GetDataSlab+0x138fc>
   3b230:	vmov.i32	q9, #1	; 0x00000001
   3b234:	vmov.i32	q10, #1	; 0x00000001
   3b238:	vmov.i32	q8, #1	; 0x00000001
   3b23c:	bic	r2, r6, #3
   3b240:	bic	r9, r7, #3
   3b244:	vmov.32	d23[1], lr
   3b248:	vmov.32	d18[0], r0
   3b24c:	vmov.32	d20[0], r5
   3b250:	sub	r3, r7, r2
   3b254:	mov	r0, ip
   3b258:	vorr	d16, d18, d18
   3b25c:	vmov.i32	q9, #1	; 0x00000001
   3b260:	vorr	d18, d20, d20
   3b264:	vld1.32	{d20-d21}, [r0], sl
   3b268:	subs	r9, r9, #4
   3b26c:	vrev64.32	q12, q10
   3b270:	vext.8	q12, q12, q12, #8
   3b274:	vext.8	q11, q11, q12, #12
   3b278:	vmul.i32	q9, q9, q12
   3b27c:	vmul.i32	q8, q11, q8
   3b280:	vorr	q11, q12, q12
   3b284:	bne	3b264 <GetDataSlab+0x138a0>
   3b288:	vext.8	q11, q9, q8, #8
   3b28c:	vext.8	q12, q8, q8, #8
   3b290:	cmp	r6, r2
   3b294:	vmul.i32	q0, q9, q11
   3b298:	vmul.i32	q1, q8, q12
   3b29c:	vmul.i32	q8, q0, d0[1]
   3b2a0:	vmul.i32	q9, q1, d2[1]
   3b2a4:	vmov.32	r5, d16[0]
   3b2a8:	vmov.32	r0, d18[0]
   3b2ac:	bne	3b2b8 <GetDataSlab+0x138f4>
   3b2b0:	ldr	r9, [fp, #8]
   3b2b4:	b	3b2d4 <GetDataSlab+0x13910>
   3b2b8:	ldr	r9, [fp, #8]
   3b2bc:	vmov.32	r2, d20[0]
   3b2c0:	mul	r0, r2, r0
   3b2c4:	ldr	r2, [r1, r3, lsl #2]
   3b2c8:	subs	r3, r3, #1
   3b2cc:	mul	r5, r5, r2
   3b2d0:	bne	3b2c0 <GetDataSlab+0x138fc>
   3b2d4:	sub	r2, fp, #176	; 0xb0
   3b2d8:	sub	r8, fp, #96	; 0x60
   3b2dc:	add	ip, ip, #4
   3b2e0:	mov	r3, r2
   3b2e4:	str	r0, [r2, r7, lsl #2]
   3b2e8:	ldr	r2, [fp, #12]
   3b2ec:	str	r5, [r8, r7, lsl #2]
   3b2f0:	ldr	r5, [sp, #52]	; 0x34
   3b2f4:	ldr	r2, [r2, r7, lsl #2]
   3b2f8:	mla	r4, r2, r5, r4
   3b2fc:	ldr	r2, [fp, #20]
   3b300:	ldr	r5, [sp, #44]	; 0x2c
   3b304:	ldr	r2, [r2, r7, lsl #2]
   3b308:	add	r7, r7, #1
   3b30c:	mul	r5, r2, r5
   3b310:	ldr	r2, [fp, #24]
   3b314:	str	r5, [sp, #44]	; 0x2c
   3b318:	mov	r5, r0
   3b31c:	mov	r0, lr
   3b320:	mov	lr, r3
   3b324:	cmp	r7, r2
   3b328:	bne	3b1f4 <GetDataSlab+0x13830>
   3b32c:	ldr	r0, [sp, #48]	; 0x30
   3b330:	ldr	r3, [sp, #16]
   3b334:	add	r5, r0, r4, lsl #2
   3b338:	cmp	r3, #1
   3b33c:	bne	46378 <GetDataSlab+0x1e9b4>
   3b340:	ldr	r0, [sp, #44]	; 0x2c
   3b344:	ldr	r1, [fp, #20]
   3b348:	ldr	r8, [sp, #40]	; 0x28
   3b34c:	cmp	r0, #1
   3b350:	ldr	r0, [fp, #12]
   3b354:	blt	47ff8 <GetDataSlab+0x20634>
   3b358:	add	r9, r1, #4
   3b35c:	sub	r1, fp, #136	; 0x88
   3b360:	orr	r7, r1, #4
   3b364:	sub	r1, fp, #96	; 0x60
   3b368:	orr	r1, r1, #4
   3b36c:	str	r1, [sp, #28]
   3b370:	lsl	r1, r8, #3
   3b374:	str	r1, [sp, #48]	; 0x30
   3b378:	ldr	r1, [r0], #4
   3b37c:	str	r0, [sp, #56]	; 0x38
   3b380:	mov	r0, #0
   3b384:	str	r1, [sp, #32]
   3b388:	str	r0, [sp, #52]	; 0x34
   3b38c:	cmp	r8, #1
   3b390:	blt	3b3bc <GetDataSlab+0x139f8>
   3b394:	ldr	r0, [sp, #32]
   3b398:	ldr	r8, [sp, #40]	; 0x28
   3b39c:	ldr	sl, [sp, #60]	; 0x3c
   3b3a0:	add	r6, r5, r0, lsl #2
   3b3a4:	ldr	r0, [r6], #4
   3b3a8:	bl	585b8 <__aeabi_f2ulz>
   3b3ac:	strd	r0, [sl]
   3b3b0:	subs	r8, r8, #1
   3b3b4:	add	sl, sl, #8
   3b3b8:	bne	3b3a4 <GetDataSlab+0x139e0>
   3b3bc:	ldr	r0, [sp, #36]	; 0x24
   3b3c0:	add	r5, r5, r0, lsl #2
   3b3c4:	add	r4, r4, r0
   3b3c8:	ldr	r0, [fp, #24]
   3b3cc:	cmp	r0, #2
   3b3d0:	blt	3b47c <GetDataSlab+0x13ab8>
   3b3d4:	ldr	ip, [sp, #60]	; 0x3c
   3b3d8:	ldr	lr, [sp, #56]	; 0x38
   3b3dc:	ldr	r8, [sp, #40]	; 0x28
   3b3e0:	mov	r1, #0
   3b3e4:	mov	sl, #0
   3b3e8:	mov	r0, r1
   3b3ec:	ldr	r1, [r7, r1, lsl #2]
   3b3f0:	add	r1, r1, #1
   3b3f4:	str	r1, [r7, r0, lsl #2]
   3b3f8:	ldr	r2, [r9, r0, lsl #2]
   3b3fc:	sdiv	r3, r1, r2
   3b400:	mls	r1, r3, r2, r1
   3b404:	cmp	r1, #0
   3b408:	bne	3b488 <GetDataSlab+0x13ac4>
   3b40c:	sub	r3, fp, #176	; 0xb0
   3b410:	str	sl, [r7, r0, lsl #2]
   3b414:	add	r1, r3, r0, lsl #2
   3b418:	ldr	r1, [r1, #4]
   3b41c:	sdiv	r2, r4, r1
   3b420:	mls	r2, r2, r1, r4
   3b424:	cmp	r2, #0
   3b428:	beq	3b444 <GetDataSlab+0x13a80>
   3b42c:	ldr	r3, [r3, r0, lsl #2]
   3b430:	ldr	r6, [lr, r0, lsl #2]
   3b434:	sub	r1, r1, r2
   3b438:	mla	r1, r6, r3, r1
   3b43c:	add	r4, r1, r4
   3b440:	b	3b460 <GetDataSlab+0x13a9c>
   3b444:	ldr	r1, [lr, r0, lsl #2]
   3b448:	cmp	r1, #0
   3b44c:	beq	3b464 <GetDataSlab+0x13aa0>
   3b450:	sub	r2, fp, #176	; 0xb0
   3b454:	ldr	r2, [r2, r0, lsl #2]
   3b458:	mla	r4, r2, r1, r4
   3b45c:	mul	r1, r2, r1
   3b460:	add	r5, r5, r1, lsl #2
   3b464:	ldr	r2, [fp, #24]
   3b468:	add	r1, r0, #1
   3b46c:	add	r0, r0, #2
   3b470:	cmp	r0, r2
   3b474:	blt	3b3e8 <GetDataSlab+0x13a24>
   3b478:	b	3b498 <GetDataSlab+0x13ad4>
   3b47c:	ldr	ip, [sp, #60]	; 0x3c
   3b480:	ldr	r8, [sp, #40]	; 0x28
   3b484:	b	3b498 <GetDataSlab+0x13ad4>
   3b488:	ldr	r1, [sp, #28]
   3b48c:	ldr	r0, [r1, r0, lsl #2]
   3b490:	add	r5, r5, r0, lsl #2
   3b494:	add	r4, r0, r4
   3b498:	ldr	r2, [sp, #52]	; 0x34
   3b49c:	ldr	r0, [sp, #48]	; 0x30
   3b4a0:	ldr	r1, [sp, #44]	; 0x2c
   3b4a4:	add	r2, r2, r8
   3b4a8:	add	ip, ip, r0
   3b4ac:	mov	r0, #0
   3b4b0:	cmp	r2, r1
   3b4b4:	str	ip, [sp, #60]	; 0x3c
   3b4b8:	str	r2, [sp, #52]	; 0x34
   3b4bc:	blt	3b38c <GetDataSlab+0x139c8>
   3b4c0:	b	47ffc <GetDataSlab+0x20638>
   3b4c4:	ldr	r0, [fp, #16]
   3b4c8:	ldr	r9, [fp, #8]
   3b4cc:	mov	r4, #0
   3b4d0:	sub	r8, fp, #96	; 0x60
   3b4d4:	ldr	r0, [r0]
   3b4d8:	str	r0, [sp, #16]
   3b4dc:	sub	r0, r0, #1
   3b4e0:	str	r0, [fp, #-96]	; 0xffffffa0
   3b4e4:	ldr	r0, [r9]
   3b4e8:	str	r0, [fp, #-176]	; 0xffffff50
   3b4ec:	str	r0, [sp, #36]	; 0x24
   3b4f0:	ldr	r0, [fp, #24]
   3b4f4:	ldr	r1, [sl]
   3b4f8:	cmp	r0, #2
   3b4fc:	str	r1, [sp, #40]	; 0x28
   3b500:	str	r1, [sp, #44]	; 0x2c
   3b504:	blt	3b66c <GetDataSlab+0x13ca8>
   3b508:	mov	r0, #0
   3b50c:	ldr	r2, [sp, #40]	; 0x28
   3b510:	sub	r1, r9, #4
   3b514:	sub	ip, r9, #12
   3b518:	mov	r7, #1
   3b51c:	mvn	sl, #15
   3b520:	mov	r4, #0
   3b524:	str	r0, [sp, #56]	; 0x38
   3b528:	ldr	r0, [sp, #36]	; 0x24
   3b52c:	str	r2, [sp, #44]	; 0x2c
   3b530:	mov	r5, r0
   3b534:	ldr	r2, [fp, #16]
   3b538:	ldr	r6, [sp, #56]	; 0x38
   3b53c:	str	r5, [sp, #52]	; 0x34
   3b540:	ldr	r2, [r2, r7, lsl #2]
   3b544:	str	r0, [lr, r7, lsl #2]
   3b548:	add	r6, r6, #1
   3b54c:	cmp	r6, #4
   3b550:	str	r6, [sp, #56]	; 0x38
   3b554:	sub	r5, r2, #1
   3b558:	str	r5, [r8, r7, lsl #2]
   3b55c:	ldr	lr, [r9, r7, lsl #2]
   3b560:	bcs	3b570 <GetDataSlab+0x13bac>
   3b564:	mov	r2, lr
   3b568:	mov	r3, r7
   3b56c:	b	3b600 <GetDataSlab+0x13c3c>
   3b570:	vmov.i32	q9, #1	; 0x00000001
   3b574:	vmov.i32	q10, #1	; 0x00000001
   3b578:	vmov.i32	q8, #1	; 0x00000001
   3b57c:	bic	r2, r6, #3
   3b580:	bic	r9, r7, #3
   3b584:	vmov.32	d23[1], lr
   3b588:	vmov.32	d18[0], r0
   3b58c:	vmov.32	d20[0], r5
   3b590:	sub	r3, r7, r2
   3b594:	mov	r0, ip
   3b598:	vorr	d16, d18, d18
   3b59c:	vmov.i32	q9, #1	; 0x00000001
   3b5a0:	vorr	d18, d20, d20
   3b5a4:	vld1.32	{d20-d21}, [r0], sl
   3b5a8:	subs	r9, r9, #4
   3b5ac:	vrev64.32	q12, q10
   3b5b0:	vext.8	q12, q12, q12, #8
   3b5b4:	vext.8	q11, q11, q12, #12
   3b5b8:	vmul.i32	q9, q9, q12
   3b5bc:	vmul.i32	q8, q11, q8
   3b5c0:	vorr	q11, q12, q12
   3b5c4:	bne	3b5a4 <GetDataSlab+0x13be0>
   3b5c8:	vext.8	q11, q9, q8, #8
   3b5cc:	vext.8	q12, q8, q8, #8
   3b5d0:	cmp	r6, r2
   3b5d4:	vmul.i32	q0, q9, q11
   3b5d8:	vmul.i32	q1, q8, q12
   3b5dc:	vmul.i32	q8, q0, d0[1]
   3b5e0:	vmul.i32	q9, q1, d2[1]
   3b5e4:	vmov.32	r5, d16[0]
   3b5e8:	vmov.32	r0, d18[0]
   3b5ec:	bne	3b5f8 <GetDataSlab+0x13c34>
   3b5f0:	ldr	r9, [fp, #8]
   3b5f4:	b	3b614 <GetDataSlab+0x13c50>
   3b5f8:	ldr	r9, [fp, #8]
   3b5fc:	vmov.32	r2, d20[0]
   3b600:	mul	r0, r2, r0
   3b604:	ldr	r2, [r1, r3, lsl #2]
   3b608:	subs	r3, r3, #1
   3b60c:	mul	r5, r5, r2
   3b610:	bne	3b600 <GetDataSlab+0x13c3c>
   3b614:	sub	r2, fp, #176	; 0xb0
   3b618:	sub	r8, fp, #96	; 0x60
   3b61c:	add	ip, ip, #4
   3b620:	mov	r3, r2
   3b624:	str	r0, [r2, r7, lsl #2]
   3b628:	ldr	r2, [fp, #12]
   3b62c:	str	r5, [r8, r7, lsl #2]
   3b630:	ldr	r5, [sp, #52]	; 0x34
   3b634:	ldr	r2, [r2, r7, lsl #2]
   3b638:	mla	r4, r2, r5, r4
   3b63c:	ldr	r2, [fp, #20]
   3b640:	ldr	r5, [sp, #44]	; 0x2c
   3b644:	ldr	r2, [r2, r7, lsl #2]
   3b648:	add	r7, r7, #1
   3b64c:	mul	r5, r2, r5
   3b650:	ldr	r2, [fp, #24]
   3b654:	str	r5, [sp, #44]	; 0x2c
   3b658:	mov	r5, r0
   3b65c:	mov	r0, lr
   3b660:	mov	lr, r3
   3b664:	cmp	r7, r2
   3b668:	bne	3b534 <GetDataSlab+0x13b70>
   3b66c:	ldr	r0, [sp, #48]	; 0x30
   3b670:	ldr	r3, [sp, #16]
   3b674:	add	r5, r0, r4, lsl #3
   3b678:	cmp	r3, #1
   3b67c:	bne	46520 <GetDataSlab+0x1eb5c>
   3b680:	ldr	r0, [sp, #44]	; 0x2c
   3b684:	ldr	r1, [fp, #20]
   3b688:	ldr	r8, [sp, #40]	; 0x28
   3b68c:	cmp	r0, #1
   3b690:	ldr	r0, [fp, #12]
   3b694:	blt	47ff8 <GetDataSlab+0x20634>
   3b698:	add	r9, r1, #4
   3b69c:	sub	r1, fp, #136	; 0x88
   3b6a0:	orr	r7, r1, #4
   3b6a4:	sub	r1, fp, #96	; 0x60
   3b6a8:	orr	r1, r1, #4
   3b6ac:	str	r1, [sp, #28]
   3b6b0:	lsl	r1, r8, #3
   3b6b4:	str	r1, [sp, #48]	; 0x30
   3b6b8:	ldr	r1, [r0], #4
   3b6bc:	str	r0, [sp, #56]	; 0x38
   3b6c0:	mov	r0, #0
   3b6c4:	str	r1, [sp, #32]
   3b6c8:	str	r0, [sp, #52]	; 0x34
   3b6cc:	cmp	r8, #1
   3b6d0:	blt	3b704 <GetDataSlab+0x13d40>
   3b6d4:	ldr	r0, [sp, #32]
   3b6d8:	ldr	r8, [sp, #40]	; 0x28
   3b6dc:	ldr	sl, [sp, #60]	; 0x3c
   3b6e0:	add	r6, r5, r0, lsl #3
   3b6e4:	vldr	d16, [r6]
   3b6e8:	vmov	r0, r1, d16
   3b6ec:	bl	585f8 <__aeabi_d2ulz>
   3b6f0:	strd	r0, [sl]
   3b6f4:	subs	r8, r8, #1
   3b6f8:	add	sl, sl, #8
   3b6fc:	add	r6, r6, #8
   3b700:	bne	3b6e4 <GetDataSlab+0x13d20>
   3b704:	ldr	r0, [sp, #36]	; 0x24
   3b708:	add	r5, r5, r0, lsl #3
   3b70c:	add	r4, r4, r0
   3b710:	ldr	r0, [fp, #24]
   3b714:	cmp	r0, #2
   3b718:	blt	3b7c4 <GetDataSlab+0x13e00>
   3b71c:	ldr	ip, [sp, #60]	; 0x3c
   3b720:	ldr	lr, [sp, #56]	; 0x38
   3b724:	ldr	r8, [sp, #40]	; 0x28
   3b728:	mov	r1, #0
   3b72c:	mov	sl, #0
   3b730:	mov	r0, r1
   3b734:	ldr	r1, [r7, r1, lsl #2]
   3b738:	add	r1, r1, #1
   3b73c:	str	r1, [r7, r0, lsl #2]
   3b740:	ldr	r2, [r9, r0, lsl #2]
   3b744:	sdiv	r3, r1, r2
   3b748:	mls	r1, r3, r2, r1
   3b74c:	cmp	r1, #0
   3b750:	bne	3b7d0 <GetDataSlab+0x13e0c>
   3b754:	sub	r3, fp, #176	; 0xb0
   3b758:	str	sl, [r7, r0, lsl #2]
   3b75c:	add	r1, r3, r0, lsl #2
   3b760:	ldr	r1, [r1, #4]
   3b764:	sdiv	r2, r4, r1
   3b768:	mls	r2, r2, r1, r4
   3b76c:	cmp	r2, #0
   3b770:	beq	3b78c <GetDataSlab+0x13dc8>
   3b774:	ldr	r3, [r3, r0, lsl #2]
   3b778:	ldr	r6, [lr, r0, lsl #2]
   3b77c:	sub	r1, r1, r2
   3b780:	mla	r1, r6, r3, r1
   3b784:	add	r4, r1, r4
   3b788:	b	3b7a8 <GetDataSlab+0x13de4>
   3b78c:	ldr	r1, [lr, r0, lsl #2]
   3b790:	cmp	r1, #0
   3b794:	beq	3b7ac <GetDataSlab+0x13de8>
   3b798:	sub	r2, fp, #176	; 0xb0
   3b79c:	ldr	r2, [r2, r0, lsl #2]
   3b7a0:	mla	r4, r2, r1, r4
   3b7a4:	mul	r1, r2, r1
   3b7a8:	add	r5, r5, r1, lsl #3
   3b7ac:	ldr	r2, [fp, #24]
   3b7b0:	add	r1, r0, #1
   3b7b4:	add	r0, r0, #2
   3b7b8:	cmp	r0, r2
   3b7bc:	blt	3b730 <GetDataSlab+0x13d6c>
   3b7c0:	b	3b7e0 <GetDataSlab+0x13e1c>
   3b7c4:	ldr	ip, [sp, #60]	; 0x3c
   3b7c8:	ldr	r8, [sp, #40]	; 0x28
   3b7cc:	b	3b7e0 <GetDataSlab+0x13e1c>
   3b7d0:	ldr	r1, [sp, #28]
   3b7d4:	ldr	r0, [r1, r0, lsl #2]
   3b7d8:	add	r5, r5, r0, lsl #3
   3b7dc:	add	r4, r0, r4
   3b7e0:	ldr	r2, [sp, #52]	; 0x34
   3b7e4:	ldr	r0, [sp, #48]	; 0x30
   3b7e8:	ldr	r1, [sp, #44]	; 0x2c
   3b7ec:	add	r2, r2, r8
   3b7f0:	add	ip, ip, r0
   3b7f4:	mov	r0, #0
   3b7f8:	cmp	r2, r1
   3b7fc:	str	ip, [sp, #60]	; 0x3c
   3b800:	str	r2, [sp, #52]	; 0x34
   3b804:	blt	3b6cc <GetDataSlab+0x13d08>
   3b808:	b	47ffc <GetDataSlab+0x20638>
   3b80c:	ldr	r0, [fp, #16]
   3b810:	str	r6, [sp, #40]	; 0x28
   3b814:	mov	r5, lr
   3b818:	mov	lr, #0
   3b81c:	sub	r6, fp, #96	; 0x60
   3b820:	ldr	r0, [r0]
   3b824:	str	r0, [sp, #16]
   3b828:	sub	r0, r0, #1
   3b82c:	str	r0, [fp, #-96]	; 0xffffffa0
   3b830:	ldr	r0, [fp, #8]
   3b834:	ldr	r0, [r0]
   3b838:	str	r0, [fp, #-176]	; 0xffffff50
   3b83c:	str	r0, [sp, #28]
   3b840:	ldr	r0, [fp, #24]
   3b844:	ldr	r1, [sl]
   3b848:	cmp	r0, #2
   3b84c:	str	r1, [sp, #44]	; 0x2c
   3b850:	str	r1, [sp, #56]	; 0x38
   3b854:	blt	3b99c <GetDataSlab+0x13fd8>
   3b858:	ldr	r0, [fp, #8]
   3b85c:	ldr	r2, [sp, #28]
   3b860:	mov	r4, #1
   3b864:	mov	ip, #0
   3b868:	mvn	r7, #15
   3b86c:	mov	lr, #0
   3b870:	sub	r3, r0, #4
   3b874:	sub	r9, r0, #12
   3b878:	ldr	r0, [sp, #44]	; 0x2c
   3b87c:	mov	r8, r2
   3b880:	str	r0, [sp, #56]	; 0x38
   3b884:	ldr	r0, [fp, #16]
   3b888:	add	ip, ip, #1
   3b88c:	cmp	ip, #4
   3b890:	ldr	r0, [r0, r4, lsl #2]
   3b894:	str	r2, [r5, r4, lsl #2]
   3b898:	sub	r0, r0, #1
   3b89c:	str	r0, [r6, r4, lsl #2]
   3b8a0:	ldr	r6, [fp, #8]
   3b8a4:	ldr	r6, [r6, r4, lsl #2]
   3b8a8:	str	r6, [sp, #52]	; 0x34
   3b8ac:	bcs	3b8b8 <GetDataSlab+0x13ef4>
   3b8b0:	mov	r5, r4
   3b8b4:	b	3b940 <GetDataSlab+0x13f7c>
   3b8b8:	vmov.i32	q9, #1	; 0x00000001
   3b8bc:	vmov.i32	q10, #1	; 0x00000001
   3b8c0:	vmov.i32	q8, #1	; 0x00000001
   3b8c4:	vmov.32	d23[1], r6
   3b8c8:	bic	r6, ip, #3
   3b8cc:	bic	sl, r4, #3
   3b8d0:	vmov.32	d18[0], r2
   3b8d4:	vmov.32	d20[0], r0
   3b8d8:	sub	r5, r4, r6
   3b8dc:	mov	r0, r9
   3b8e0:	vorr	d16, d18, d18
   3b8e4:	vmov.i32	q9, #1	; 0x00000001
   3b8e8:	vorr	d18, d20, d20
   3b8ec:	vld1.32	{d20-d21}, [r0], r7
   3b8f0:	subs	sl, sl, #4
   3b8f4:	vrev64.32	q12, q10
   3b8f8:	vext.8	q12, q12, q12, #8
   3b8fc:	vext.8	q11, q11, q12, #12
   3b900:	vmul.i32	q9, q9, q12
   3b904:	vmul.i32	q8, q11, q8
   3b908:	vorr	q11, q12, q12
   3b90c:	bne	3b8ec <GetDataSlab+0x13f28>
   3b910:	vext.8	q11, q9, q8, #8
   3b914:	vext.8	q12, q8, q8, #8
   3b918:	ldr	sl, [fp, #20]
   3b91c:	cmp	ip, r6
   3b920:	vmul.i32	q0, q9, q11
   3b924:	vmul.i32	q1, q8, q12
   3b928:	vmul.i32	q8, q0, d0[1]
   3b92c:	vmul.i32	q9, q1, d2[1]
   3b930:	vmov.32	r0, d16[0]
   3b934:	vmov.32	r2, d18[0]
   3b938:	beq	3b954 <GetDataSlab+0x13f90>
   3b93c:	vmov.32	r6, d20[0]
   3b940:	mul	r2, r6, r2
   3b944:	ldr	r6, [r3, r5, lsl #2]
   3b948:	subs	r5, r5, #1
   3b94c:	mul	r0, r0, r6
   3b950:	bne	3b940 <GetDataSlab+0x13f7c>
   3b954:	sub	r6, fp, #96	; 0x60
   3b958:	sub	r5, fp, #176	; 0xb0
   3b95c:	ldr	r1, [sp, #56]	; 0x38
   3b960:	add	r9, r9, #4
   3b964:	str	r0, [r6, r4, lsl #2]
   3b968:	ldr	r0, [fp, #12]
   3b96c:	str	r2, [r5, r4, lsl #2]
   3b970:	ldr	r0, [r0, r4, lsl #2]
   3b974:	mla	lr, r0, r8, lr
   3b978:	ldr	r0, [sl, r4, lsl #2]
   3b97c:	mov	r8, r2
   3b980:	ldr	r2, [sp, #52]	; 0x34
   3b984:	add	r4, r4, #1
   3b988:	mul	r1, r0, r1
   3b98c:	ldr	r0, [fp, #24]
   3b990:	str	r1, [sp, #56]	; 0x38
   3b994:	cmp	r4, r0
   3b998:	bne	3b884 <GetDataSlab+0x13ec0>
   3b99c:	ldr	r0, [sp, #48]	; 0x30
   3b9a0:	ldr	r2, [sp, #16]
   3b9a4:	add	r5, r0, lr, lsl #3
   3b9a8:	cmp	r2, #1
   3b9ac:	bne	466d0 <GetDataSlab+0x1ed0c>
   3b9b0:	ldr	r0, [sp, #56]	; 0x38
   3b9b4:	ldr	ip, [sp, #44]	; 0x2c
   3b9b8:	sub	r2, fp, #96	; 0x60
   3b9bc:	cmp	r0, #1
   3b9c0:	ldr	r0, [fp, #12]
   3b9c4:	blt	46864 <GetDataSlab+0x1eea0>
   3b9c8:	mov	r1, r0
   3b9cc:	ldr	r9, [sp, #60]	; 0x3c
   3b9d0:	add	r8, sl, #4
   3b9d4:	ldr	r0, [r1], #4
   3b9d8:	str	r0, [sp, #24]
   3b9dc:	add	r0, ip, r0
   3b9e0:	str	r0, [sp, #20]
   3b9e4:	sub	r0, fp, #136	; 0x88
   3b9e8:	orr	r6, r0, #4
   3b9ec:	orr	r0, r2, #4
   3b9f0:	mov	r2, #0
   3b9f4:	str	r0, [sp, #12]
   3b9f8:	bic	r0, ip, #1
   3b9fc:	str	r0, [sp, #16]
   3ba00:	lsl	r0, ip, #3
   3ba04:	str	r0, [sp, #32]
   3ba08:	mov	r0, #0
   3ba0c:	str	r0, [sp, #52]	; 0x34
   3ba10:	mov	r4, r8
   3ba14:	cmp	ip, #1
   3ba18:	str	r2, [sp, #36]	; 0x24
   3ba1c:	blt	3bacc <GetDataSlab+0x14108>
   3ba20:	ldr	r0, [sp, #24]
   3ba24:	mov	r2, #0
   3ba28:	add	sl, r5, r0, lsl #3
   3ba2c:	beq	3ba98 <GetDataSlab+0x140d4>
   3ba30:	ldr	r0, [sp, #60]	; 0x3c
   3ba34:	ldr	r3, [sp, #32]
   3ba38:	ldr	r7, [sp, #52]	; 0x34
   3ba3c:	mla	r0, r3, r7, r0
   3ba40:	ldr	r3, [sp, #20]
   3ba44:	add	r3, r5, r3, lsl #3
   3ba48:	cmp	r0, r3
   3ba4c:	bcs	3ba6c <GetDataSlab+0x140a8>
   3ba50:	ldr	r0, [sp, #32]
   3ba54:	ldr	r3, [sp, #52]	; 0x34
   3ba58:	mla	r0, r0, r3, r0
   3ba5c:	ldr	r3, [sp, #60]	; 0x3c
   3ba60:	add	r0, r3, r0
   3ba64:	cmp	r0, sl
   3ba68:	bhi	3ba98 <GetDataSlab+0x140d4>
   3ba6c:	ldr	r2, [sp, #16]
   3ba70:	mov	r3, r9
   3ba74:	mov	r0, sl
   3ba78:	vld1.64	{d16-d17}, [r0]!
   3ba7c:	subs	r2, r2, #2
   3ba80:	vst1.64	{d16-d17}, [r3]!
   3ba84:	bne	3ba78 <GetDataSlab+0x140b4>
   3ba88:	ldr	r0, [sp, #44]	; 0x2c
   3ba8c:	ldr	r2, [sp, #16]
   3ba90:	cmp	r0, r2
   3ba94:	beq	3bacc <GetDataSlab+0x14108>
   3ba98:	ldr	r0, [sp, #44]	; 0x2c
   3ba9c:	sub	r3, r0, r2
   3baa0:	mov	r0, #0
   3baa4:	sub	r2, r0, r2, lsl #3
   3baa8:	mov	r0, sl
   3baac:	mov	ip, r9
   3bab0:	subs	r3, r3, #1
   3bab4:	ldr	r8, [r0, -r2]!
   3bab8:	ldr	r0, [r0, #4]
   3babc:	str	r8, [ip, -r2]!
   3bac0:	sub	r2, r2, #8
   3bac4:	str	r0, [ip, #4]
   3bac8:	bne	3baa8 <GetDataSlab+0x140e4>
   3bacc:	ldr	r0, [sp, #28]
   3bad0:	add	r5, r5, r0, lsl #3
   3bad4:	add	lr, lr, r0
   3bad8:	ldr	r0, [fp, #24]
   3badc:	cmp	r0, #2
   3bae0:	blt	3bb88 <GetDataSlab+0x141c4>
   3bae4:	ldr	ip, [sp, #44]	; 0x2c
   3bae8:	mov	r2, #0
   3baec:	mov	r8, r4
   3baf0:	mov	sl, #0
   3baf4:	mov	r0, r2
   3baf8:	ldr	r2, [r6, r2, lsl #2]
   3bafc:	add	r2, r2, #1
   3bb00:	str	r2, [r6, r0, lsl #2]
   3bb04:	ldr	r3, [r8, r0, lsl #2]
   3bb08:	sdiv	r7, r2, r3
   3bb0c:	mls	r2, r7, r3, r2
   3bb10:	cmp	r2, #0
   3bb14:	bne	3bb94 <GetDataSlab+0x141d0>
   3bb18:	sub	r7, fp, #176	; 0xb0
   3bb1c:	str	sl, [r6, r0, lsl #2]
   3bb20:	add	r2, r7, r0, lsl #2
   3bb24:	ldr	r2, [r2, #4]
   3bb28:	sdiv	r3, lr, r2
   3bb2c:	mls	r3, r3, r2, lr
   3bb30:	cmp	r3, #0
   3bb34:	beq	3bb50 <GetDataSlab+0x1418c>
   3bb38:	ldr	r7, [r7, r0, lsl #2]
   3bb3c:	ldr	r4, [r1, r0, lsl #2]
   3bb40:	sub	r2, r2, r3
   3bb44:	mla	r2, r4, r7, r2
   3bb48:	add	lr, r2, lr
   3bb4c:	b	3bb6c <GetDataSlab+0x141a8>
   3bb50:	ldr	r2, [r1, r0, lsl #2]
   3bb54:	cmp	r2, #0
   3bb58:	beq	3bb70 <GetDataSlab+0x141ac>
   3bb5c:	sub	r3, fp, #176	; 0xb0
   3bb60:	ldr	r3, [r3, r0, lsl #2]
   3bb64:	mla	lr, r3, r2, lr
   3bb68:	mul	r2, r3, r2
   3bb6c:	add	r5, r5, r2, lsl #3
   3bb70:	ldr	r3, [fp, #24]
   3bb74:	add	r2, r0, #1
   3bb78:	add	r0, r0, #2
   3bb7c:	cmp	r0, r3
   3bb80:	blt	3baf4 <GetDataSlab+0x14130>
   3bb84:	b	3bba4 <GetDataSlab+0x141e0>
   3bb88:	ldr	ip, [sp, #44]	; 0x2c
   3bb8c:	mov	r8, r4
   3bb90:	b	3bba4 <GetDataSlab+0x141e0>
   3bb94:	ldr	r2, [sp, #12]
   3bb98:	ldr	r0, [r2, r0, lsl #2]
   3bb9c:	add	r5, r5, r0, lsl #3
   3bba0:	add	lr, r0, lr
   3bba4:	ldr	r0, [sp, #32]
   3bba8:	ldr	r2, [sp, #36]	; 0x24
   3bbac:	add	r9, r9, r0
   3bbb0:	ldr	r0, [sp, #52]	; 0x34
   3bbb4:	add	r2, r2, ip
   3bbb8:	add	r0, r0, #1
   3bbbc:	str	r0, [sp, #52]	; 0x34
   3bbc0:	ldr	r0, [sp, #56]	; 0x38
   3bbc4:	cmp	r2, r0
   3bbc8:	blt	3ba10 <GetDataSlab+0x1404c>
   3bbcc:	b	46864 <GetDataSlab+0x1eea0>
   3bbd0:	ldr	r0, [sp, #56]	; 0x38
   3bbd4:	ldr	r3, [sp, #52]	; 0x34
   3bbd8:	ldr	r7, [fp, #20]
   3bbdc:	cmp	r0, #1
   3bbe0:	ldr	r0, [fp, #12]
   3bbe4:	blt	47ff8 <GetDataSlab+0x20634>
   3bbe8:	ldr	r1, [sp, #36]	; 0x24
   3bbec:	add	lr, r0, #4
   3bbf0:	sub	r0, fp, #136	; 0x88
   3bbf4:	add	r8, r7, #4
   3bbf8:	mov	sl, #0
   3bbfc:	mls	r1, r3, r9, r1
   3bc00:	str	r1, [sp, #44]	; 0x2c
   3bc04:	mul	r1, r3, r9
   3bc08:	str	r1, [sp, #36]	; 0x24
   3bc0c:	orr	r1, r0, #4
   3bc10:	orr	r0, r2, #4
   3bc14:	str	r0, [sp, #32]
   3bc18:	lsl	r0, r3, #3
   3bc1c:	str	r0, [sp, #40]	; 0x28
   3bc20:	mov	r0, #0
   3bc24:	str	r0, [sp, #48]	; 0x30
   3bc28:	ldr	r0, [fp, #12]
   3bc2c:	cmp	r3, #1
   3bc30:	ldr	r0, [r0]
   3bc34:	blt	3bc84 <GetDataSlab+0x142c0>
   3bc38:	ldr	r2, [sp, #36]	; 0x24
   3bc3c:	ldr	ip, [sp, #60]	; 0x3c
   3bc40:	mov	sl, r3
   3bc44:	mov	r7, r2
   3bc48:	add	r2, r2, r4
   3bc4c:	add	r4, r5, r7
   3bc50:	add	r5, r5, r0
   3bc54:	ldrsb	r3, [r5], r9
   3bc58:	subs	sl, sl, #1
   3bc5c:	vmov	s0, r3
   3bc60:	vcvt.f64.s32	d16, s0
   3bc64:	vstr	d16, [ip]
   3bc68:	add	ip, ip, #8
   3bc6c:	bne	3bc54 <GetDataSlab+0x14290>
   3bc70:	ldr	ip, [sp, #60]	; 0x3c
   3bc74:	add	r2, r2, r0
   3bc78:	mov	r5, r4
   3bc7c:	mov	sl, #0
   3bc80:	b	3bc8c <GetDataSlab+0x142c8>
   3bc84:	ldr	ip, [sp, #60]	; 0x3c
   3bc88:	add	r2, r0, r4
   3bc8c:	ldr	r3, [sp, #44]	; 0x2c
   3bc90:	sub	r0, r3, r0
   3bc94:	add	r5, r5, r3
   3bc98:	add	r4, r2, r0
   3bc9c:	ldr	r0, [fp, #24]
   3bca0:	cmp	r0, #2
   3bca4:	blt	3bd4c <GetDataSlab+0x14388>
   3bca8:	mov	r2, #0
   3bcac:	mov	r0, r2
   3bcb0:	ldr	r2, [r1, r2, lsl #2]
   3bcb4:	add	r2, r2, #1
   3bcb8:	str	r2, [r1, r0, lsl #2]
   3bcbc:	ldr	r3, [r8, r0, lsl #2]
   3bcc0:	sdiv	r6, r2, r3
   3bcc4:	mls	r2, r6, r3, r2
   3bcc8:	cmp	r2, #0
   3bccc:	bne	3bd3c <GetDataSlab+0x14378>
   3bcd0:	sub	r6, fp, #176	; 0xb0
   3bcd4:	str	sl, [r1, r0, lsl #2]
   3bcd8:	add	r2, r6, r0, lsl #2
   3bcdc:	ldr	r2, [r2, #4]
   3bce0:	sdiv	r3, r4, r2
   3bce4:	mls	r3, r3, r2, r4
   3bce8:	cmp	r3, #0
   3bcec:	beq	3bd0c <GetDataSlab+0x14348>
   3bcf0:	ldr	r6, [r6, r0, lsl #2]
   3bcf4:	ldr	r7, [lr, r0, lsl #2]
   3bcf8:	sub	r2, r2, r3
   3bcfc:	mla	r2, r7, r6, r2
   3bd00:	add	r4, r2, r4
   3bd04:	add	r5, r5, r2
   3bd08:	b	3bd24 <GetDataSlab+0x14360>
   3bd0c:	ldr	r2, [lr, r0, lsl #2]
   3bd10:	cmp	r2, #0
   3bd14:	subne	r3, fp, #176	; 0xb0
   3bd18:	ldrne	r3, [r3, r0, lsl #2]
   3bd1c:	mlane	r4, r3, r2, r4
   3bd20:	mlane	r5, r3, r2, r5
   3bd24:	ldr	r3, [fp, #24]
   3bd28:	add	r2, r0, #1
   3bd2c:	add	r0, r0, #2
   3bd30:	cmp	r0, r3
   3bd34:	blt	3bcac <GetDataSlab+0x142e8>
   3bd38:	b	3bd4c <GetDataSlab+0x14388>
   3bd3c:	ldr	r2, [sp, #32]
   3bd40:	ldr	r0, [r2, r0, lsl #2]
   3bd44:	add	r5, r5, r0
   3bd48:	add	r4, r0, r4
   3bd4c:	ldr	r3, [sp, #52]	; 0x34
   3bd50:	ldr	r7, [sp, #48]	; 0x30
   3bd54:	ldr	r0, [sp, #40]	; 0x28
   3bd58:	ldr	r2, [sp, #56]	; 0x38
   3bd5c:	add	r7, r7, r3
   3bd60:	add	ip, ip, r0
   3bd64:	mov	r0, #0
   3bd68:	cmp	r7, r2
   3bd6c:	str	ip, [sp, #60]	; 0x3c
   3bd70:	str	r7, [sp, #48]	; 0x30
   3bd74:	blt	3bc28 <GetDataSlab+0x14264>
   3bd78:	b	47ffc <GetDataSlab+0x20638>
   3bd7c:	ldr	r0, [sp, #52]	; 0x34
   3bd80:	ldr	lr, [sp, #40]	; 0x28
   3bd84:	sub	r2, fp, #96	; 0x60
   3bd88:	cmp	r0, #1
   3bd8c:	ldr	r0, [fp, #12]
   3bd90:	blt	47ff8 <GetDataSlab+0x20634>
   3bd94:	ldr	r1, [sp, #32]
   3bd98:	add	r0, r0, #4
   3bd9c:	str	r0, [sp, #56]	; 0x38
   3bda0:	ldr	r0, [fp, #20]
   3bda4:	mls	r1, lr, sl, r1
   3bda8:	str	r1, [sp, #44]	; 0x2c
   3bdac:	mul	r1, lr, sl
   3bdb0:	add	r9, r0, #4
   3bdb4:	sub	r0, fp, #136	; 0x88
   3bdb8:	str	r1, [sp, #32]
   3bdbc:	orr	r1, r0, #4
   3bdc0:	orr	r0, r2, #4
   3bdc4:	str	r0, [sp, #28]
   3bdc8:	lsl	r0, lr, #2
   3bdcc:	str	r0, [sp, #36]	; 0x24
   3bdd0:	mov	r0, #0
   3bdd4:	str	r0, [sp, #48]	; 0x30
   3bdd8:	ldr	r0, [fp, #12]
   3bddc:	cmp	lr, #1
   3bde0:	ldr	r0, [r0]
   3bde4:	blt	3be28 <GetDataSlab+0x14464>
   3bde8:	ldr	r2, [sp, #32]
   3bdec:	ldr	ip, [sp, #60]	; 0x3c
   3bdf0:	add	r4, r8, r0
   3bdf4:	mov	r5, lr
   3bdf8:	add	r3, r2, r3
   3bdfc:	add	r2, r8, r2
   3be00:	ldrsb	lr, [r4], sl
   3be04:	subs	r5, r5, #1
   3be08:	vmov	s0, lr
   3be0c:	vcvt.f32.s32	s0, s0
   3be10:	vstr	s0, [ip]
   3be14:	add	ip, ip, #4
   3be18:	bne	3be00 <GetDataSlab+0x1443c>
   3be1c:	add	r3, r3, r0
   3be20:	mov	r8, r2
   3be24:	b	3be2c <GetDataSlab+0x14468>
   3be28:	add	r3, r0, r3
   3be2c:	ldr	r2, [sp, #44]	; 0x2c
   3be30:	ldr	ip, [sp, #60]	; 0x3c
   3be34:	sub	r5, fp, #176	; 0xb0
   3be38:	sub	r0, r2, r0
   3be3c:	add	r8, r8, r2
   3be40:	add	r3, r3, r0
   3be44:	ldr	r0, [fp, #24]
   3be48:	cmp	r0, #2
   3be4c:	blt	3beec <GetDataSlab+0x14528>
   3be50:	ldr	lr, [sp, #40]	; 0x28
   3be54:	mov	r2, #0
   3be58:	mov	r0, r2
   3be5c:	ldr	r2, [r1, r2, lsl #2]
   3be60:	add	r2, r2, #1
   3be64:	str	r2, [r1, r0, lsl #2]
   3be68:	ldr	r4, [r9, r0, lsl #2]
   3be6c:	sdiv	r6, r2, r4
   3be70:	mls	r2, r6, r4, r2
   3be74:	cmp	r2, #0
   3be78:	bne	3bef4 <GetDataSlab+0x14530>
   3be7c:	mov	r2, #0
   3be80:	str	r2, [r1, r0, lsl #2]
   3be84:	add	r2, r5, r0, lsl #2
   3be88:	ldr	r2, [r2, #4]
   3be8c:	sdiv	r6, r3, r2
   3be90:	mls	r4, r6, r2, r3
   3be94:	cmp	r4, #0
   3be98:	beq	3bebc <GetDataSlab+0x144f8>
   3be9c:	ldr	r7, [sp, #56]	; 0x38
   3bea0:	ldr	r6, [r5, r0, lsl #2]
   3bea4:	sub	r2, r2, r4
   3bea8:	ldr	r7, [r7, r0, lsl #2]
   3beac:	mla	r2, r7, r6, r2
   3beb0:	add	r3, r2, r3
   3beb4:	add	r8, r8, r2
   3beb8:	b	3bed4 <GetDataSlab+0x14510>
   3bebc:	ldr	r2, [sp, #56]	; 0x38
   3bec0:	ldr	r2, [r2, r0, lsl #2]
   3bec4:	cmp	r2, #0
   3bec8:	ldrne	r7, [r5, r0, lsl #2]
   3becc:	mlane	r3, r7, r2, r3
   3bed0:	mlane	r8, r7, r2, r8
   3bed4:	ldr	r7, [fp, #24]
   3bed8:	add	r2, r0, #1
   3bedc:	add	r0, r0, #2
   3bee0:	cmp	r0, r7
   3bee4:	blt	3be58 <GetDataSlab+0x14494>
   3bee8:	b	3bf04 <GetDataSlab+0x14540>
   3beec:	ldr	lr, [sp, #40]	; 0x28
   3bef0:	b	3bf04 <GetDataSlab+0x14540>
   3bef4:	ldr	r2, [sp, #28]
   3bef8:	ldr	r0, [r2, r0, lsl #2]
   3befc:	add	r8, r8, r0
   3bf00:	add	r3, r0, r3
   3bf04:	ldr	r7, [sp, #48]	; 0x30
   3bf08:	ldr	r0, [sp, #36]	; 0x24
   3bf0c:	ldr	r2, [sp, #52]	; 0x34
   3bf10:	add	r7, r7, lr
   3bf14:	add	ip, ip, r0
   3bf18:	mov	r0, #0
   3bf1c:	cmp	r7, r2
   3bf20:	str	ip, [sp, #60]	; 0x3c
   3bf24:	str	r7, [sp, #48]	; 0x30
   3bf28:	blt	3bdd8 <GetDataSlab+0x14414>
   3bf2c:	b	47ffc <GetDataSlab+0x20638>
   3bf30:	ldr	r3, [fp, #16]
   3bf34:	cmp	r6, #13
   3bf38:	bne	47ffc <GetDataSlab+0x20638>
   3bf3c:	b	3f71c <GetDataSlab+0x17d58>
   3bf40:	ldr	r0, [sp, #56]	; 0x38
   3bf44:	cmp	r0, #1
   3bf48:	blt	2a430 <GetDataSlab+0x2a6c>
   3bf4c:	ldr	r0, [fp, #20]
   3bf50:	ldr	lr, [fp, #16]
   3bf54:	add	ip, r0, #4
   3bf58:	sub	r0, fp, #136	; 0x88
   3bf5c:	orr	r9, r0, #4
   3bf60:	sub	r0, fp, #96	; 0x60
   3bf64:	orr	r0, r0, #4
   3bf68:	str	r0, [sp, #40]	; 0x28
   3bf6c:	ldr	r0, [r8], #4
   3bf70:	str	r0, [sp, #44]	; 0x2c
   3bf74:	mov	r0, #0
   3bf78:	str	r0, [sp, #48]	; 0x30
   3bf7c:	ldr	r1, [sp, #44]	; 0x2c
   3bf80:	cmp	r2, #1
   3bf84:	add	r0, r1, r4
   3bf88:	add	r3, sl, r1
   3bf8c:	blt	3bfe0 <GetDataSlab+0x1461c>
   3bf90:	ldr	r1, [sp, #60]	; 0x3c
   3bf94:	ldr	r2, [sp, #48]	; 0x30
   3bf98:	ldr	r6, [fp, #20]
   3bf9c:	mov	r7, #0
   3bfa0:	add	r4, r1, r2
   3bfa4:	ldrb	r1, [r3]
   3bfa8:	strb	r1, [r4, r7]
   3bfac:	add	r7, r7, #1
   3bfb0:	ldr	r5, [lr]
   3bfb4:	ldr	r2, [r6]
   3bfb8:	add	r0, r5, r0
   3bfbc:	add	r3, r3, r5
   3bfc0:	cmp	r7, r2
   3bfc4:	blt	3bfa4 <GetDataSlab+0x145e0>
   3bfc8:	ldr	r1, [fp, #12]
   3bfcc:	sub	r6, fp, #176	; 0xb0
   3bfd0:	ldr	r4, [r1]
   3bfd4:	ldr	r1, [fp, #8]
   3bfd8:	ldr	r1, [r1]
   3bfdc:	b	3bfec <GetDataSlab+0x14628>
   3bfe0:	mov	r4, r1
   3bfe4:	ldr	r1, [sp, #52]	; 0x34
   3bfe8:	sub	r6, fp, #176	; 0xb0
   3bfec:	str	r1, [sp, #52]	; 0x34
   3bff0:	mls	r1, r5, r2, r1
   3bff4:	str	r4, [sp, #44]	; 0x2c
   3bff8:	sub	r1, r1, r4
   3bffc:	add	r4, r1, r0
   3c000:	ldr	r0, [fp, #24]
   3c004:	add	sl, r3, r1
   3c008:	cmp	r0, #2
   3c00c:	blt	3c0b8 <GetDataSlab+0x146f4>
   3c010:	mov	r7, #0
   3c014:	ldr	r1, [r9, r7, lsl #2]
   3c018:	mov	r0, r7
   3c01c:	add	r1, r1, #1
   3c020:	str	r1, [r9, r7, lsl #2]
   3c024:	ldr	r3, [ip, r7, lsl #2]
   3c028:	sdiv	r7, r1, r3
   3c02c:	mls	r1, r7, r3, r1
   3c030:	cmp	r1, #0
   3c034:	bne	3c0a8 <GetDataSlab+0x146e4>
   3c038:	mov	r1, #0
   3c03c:	str	r1, [r9, r0, lsl #2]
   3c040:	add	r1, r6, r0, lsl #2
   3c044:	ldr	r7, [r1, #4]
   3c048:	sdiv	r1, r4, r7
   3c04c:	mls	r1, r1, r7, r4
   3c050:	cmp	r1, #0
   3c054:	beq	3c07c <GetDataSlab+0x146b8>
   3c058:	ldr	r3, [r6, r0, lsl #2]
   3c05c:	ldr	lr, [r8, r0, lsl #2]
   3c060:	sub	r1, r7, r1
   3c064:	sub	r6, fp, #176	; 0xb0
   3c068:	mla	r1, lr, r3, r1
   3c06c:	ldr	lr, [fp, #16]
   3c070:	add	r4, r1, r4
   3c074:	add	sl, sl, r1
   3c078:	b	3c090 <GetDataSlab+0x146cc>
   3c07c:	ldr	r1, [r8, r0, lsl #2]
   3c080:	cmp	r1, #0
   3c084:	ldrne	r3, [r6, r0, lsl #2]
   3c088:	mlane	r4, r3, r1, r4
   3c08c:	mlane	sl, r3, r1, sl
   3c090:	ldr	r1, [fp, #24]
   3c094:	add	r7, r0, #1
   3c098:	add	r0, r0, #2
   3c09c:	cmp	r0, r1
   3c0a0:	blt	3c014 <GetDataSlab+0x14650>
   3c0a4:	b	3c0b8 <GetDataSlab+0x146f4>
   3c0a8:	ldr	r1, [sp, #40]	; 0x28
   3c0ac:	ldr	r0, [r1, r0, lsl #2]
   3c0b0:	add	sl, sl, r0
   3c0b4:	add	r4, r0, r4
   3c0b8:	ldr	r3, [sp, #48]	; 0x30
   3c0bc:	ldr	r1, [sp, #56]	; 0x38
   3c0c0:	mov	r0, #0
   3c0c4:	add	r3, r2, r3
   3c0c8:	cmp	r3, r1
   3c0cc:	str	r3, [sp, #48]	; 0x30
   3c0d0:	blt	3bf7c <GetDataSlab+0x145b8>
   3c0d4:	b	47ffc <GetDataSlab+0x20638>
   3c0d8:	ldr	r3, [fp, #16]
   3c0dc:	cmp	r6, #13
   3c0e0:	bne	47ffc <GetDataSlab+0x20638>
   3c0e4:	b	40744 <GetDataSlab+0x18d80>
   3c0e8:	ldr	r0, [sp, #56]	; 0x38
   3c0ec:	cmp	r0, #1
   3c0f0:	blt	2a430 <GetDataSlab+0x2a6c>
   3c0f4:	ldr	r0, [fp, #20]
   3c0f8:	ldr	lr, [fp, #16]
   3c0fc:	add	ip, r0, #4
   3c100:	sub	r0, fp, #136	; 0x88
   3c104:	orr	r9, r0, #4
   3c108:	sub	r0, fp, #96	; 0x60
   3c10c:	orr	r0, r0, #4
   3c110:	str	r0, [sp, #40]	; 0x28
   3c114:	ldr	r0, [r8], #4
   3c118:	str	r0, [sp, #44]	; 0x2c
   3c11c:	mov	r0, #0
   3c120:	str	r0, [sp, #48]	; 0x30
   3c124:	ldr	r1, [sp, #44]	; 0x2c
   3c128:	cmp	r2, #1
   3c12c:	add	r0, r1, r4
   3c130:	add	r3, sl, r1
   3c134:	blt	3c188 <GetDataSlab+0x147c4>
   3c138:	ldr	r1, [sp, #60]	; 0x3c
   3c13c:	ldr	r2, [sp, #48]	; 0x30
   3c140:	ldr	r6, [fp, #20]
   3c144:	mov	r7, #0
   3c148:	add	r4, r1, r2
   3c14c:	ldrb	r1, [r3]
   3c150:	strb	r1, [r4, r7]
   3c154:	add	r7, r7, #1
   3c158:	ldr	r5, [lr]
   3c15c:	ldr	r2, [r6]
   3c160:	add	r0, r5, r0
   3c164:	add	r3, r3, r5
   3c168:	cmp	r7, r2
   3c16c:	blt	3c14c <GetDataSlab+0x14788>
   3c170:	ldr	r1, [fp, #12]
   3c174:	sub	r6, fp, #176	; 0xb0
   3c178:	ldr	r4, [r1]
   3c17c:	ldr	r1, [fp, #8]
   3c180:	ldr	r1, [r1]
   3c184:	b	3c194 <GetDataSlab+0x147d0>
   3c188:	mov	r4, r1
   3c18c:	ldr	r1, [sp, #52]	; 0x34
   3c190:	sub	r6, fp, #176	; 0xb0
   3c194:	str	r1, [sp, #52]	; 0x34
   3c198:	mls	r1, r5, r2, r1
   3c19c:	str	r4, [sp, #44]	; 0x2c
   3c1a0:	sub	r1, r1, r4
   3c1a4:	add	r4, r1, r0
   3c1a8:	ldr	r0, [fp, #24]
   3c1ac:	add	sl, r3, r1
   3c1b0:	cmp	r0, #2
   3c1b4:	blt	3c260 <GetDataSlab+0x1489c>
   3c1b8:	mov	r7, #0
   3c1bc:	ldr	r1, [r9, r7, lsl #2]
   3c1c0:	mov	r0, r7
   3c1c4:	add	r1, r1, #1
   3c1c8:	str	r1, [r9, r7, lsl #2]
   3c1cc:	ldr	r3, [ip, r7, lsl #2]
   3c1d0:	sdiv	r7, r1, r3
   3c1d4:	mls	r1, r7, r3, r1
   3c1d8:	cmp	r1, #0
   3c1dc:	bne	3c250 <GetDataSlab+0x1488c>
   3c1e0:	mov	r1, #0
   3c1e4:	str	r1, [r9, r0, lsl #2]
   3c1e8:	add	r1, r6, r0, lsl #2
   3c1ec:	ldr	r7, [r1, #4]
   3c1f0:	sdiv	r1, r4, r7
   3c1f4:	mls	r1, r1, r7, r4
   3c1f8:	cmp	r1, #0
   3c1fc:	beq	3c224 <GetDataSlab+0x14860>
   3c200:	ldr	r3, [r6, r0, lsl #2]
   3c204:	ldr	lr, [r8, r0, lsl #2]
   3c208:	sub	r1, r7, r1
   3c20c:	sub	r6, fp, #176	; 0xb0
   3c210:	mla	r1, lr, r3, r1
   3c214:	ldr	lr, [fp, #16]
   3c218:	add	r4, r1, r4
   3c21c:	add	sl, sl, r1
   3c220:	b	3c238 <GetDataSlab+0x14874>
   3c224:	ldr	r1, [r8, r0, lsl #2]
   3c228:	cmp	r1, #0
   3c22c:	ldrne	r3, [r6, r0, lsl #2]
   3c230:	mlane	r4, r3, r1, r4
   3c234:	mlane	sl, r3, r1, sl
   3c238:	ldr	r1, [fp, #24]
   3c23c:	add	r7, r0, #1
   3c240:	add	r0, r0, #2
   3c244:	cmp	r0, r1
   3c248:	blt	3c1bc <GetDataSlab+0x147f8>
   3c24c:	b	3c260 <GetDataSlab+0x1489c>
   3c250:	ldr	r1, [sp, #40]	; 0x28
   3c254:	ldr	r0, [r1, r0, lsl #2]
   3c258:	add	sl, sl, r0
   3c25c:	add	r4, r0, r4
   3c260:	ldr	r3, [sp, #48]	; 0x30
   3c264:	ldr	r1, [sp, #56]	; 0x38
   3c268:	mov	r0, #0
   3c26c:	add	r3, r2, r3
   3c270:	cmp	r3, r1
   3c274:	str	r3, [sp, #48]	; 0x30
   3c278:	blt	3c124 <GetDataSlab+0x14760>
   3c27c:	b	47ffc <GetDataSlab+0x20638>
   3c280:	ldr	ip, [fp, #16]
   3c284:	cmp	r6, #13
   3c288:	bne	47ffc <GetDataSlab+0x20638>
   3c28c:	b	41728 <GetDataSlab+0x19d64>
   3c290:	ldr	r0, [sp, #56]	; 0x38
   3c294:	sub	r2, fp, #96	; 0x60
   3c298:	cmp	r0, #1
   3c29c:	ldr	r0, [fp, #12]
   3c2a0:	blt	47ff8 <GetDataSlab+0x20634>
   3c2a4:	ldr	r1, [sp, #32]
   3c2a8:	ldr	r7, [sp, #36]	; 0x24
   3c2ac:	add	r8, r0, #4
   3c2b0:	sub	r0, fp, #136	; 0x88
   3c2b4:	add	lr, sl, #4
   3c2b8:	mls	r7, r1, r9, r7
   3c2bc:	mov	sl, r1
   3c2c0:	str	r7, [sp, #48]	; 0x30
   3c2c4:	mul	r7, r1, r9
   3c2c8:	orr	r1, r0, #4
   3c2cc:	orr	r0, r2, #4
   3c2d0:	str	r0, [sp, #36]	; 0x24
   3c2d4:	lsl	r0, sl, #1
   3c2d8:	str	r7, [sp, #40]	; 0x28
   3c2dc:	str	r0, [sp, #44]	; 0x2c
   3c2e0:	mov	r0, #0
   3c2e4:	str	r0, [sp, #52]	; 0x34
   3c2e8:	ldr	r0, [fp, #12]
   3c2ec:	cmp	sl, #1
   3c2f0:	ldr	r0, [r0]
   3c2f4:	blt	3c330 <GetDataSlab+0x1496c>
   3c2f8:	ldr	r2, [sp, #40]	; 0x28
   3c2fc:	ldr	ip, [sp, #60]	; 0x3c
   3c300:	add	r4, r2, r3
   3c304:	add	r3, r5, r2
   3c308:	add	r5, r5, r0
   3c30c:	ldrsb	r2, [r5], r9
   3c310:	subs	sl, sl, #1
   3c314:	strh	r2, [ip], #2
   3c318:	bne	3c30c <GetDataSlab+0x14948>
   3c31c:	ldr	ip, [sp, #60]	; 0x3c
   3c320:	ldr	sl, [sp, #32]
   3c324:	add	r4, r4, r0
   3c328:	mov	r5, r3
   3c32c:	b	3c338 <GetDataSlab+0x14974>
   3c330:	ldr	ip, [sp, #60]	; 0x3c
   3c334:	add	r4, r0, r3
   3c338:	ldr	r2, [sp, #48]	; 0x30
   3c33c:	sub	r0, r2, r0
   3c340:	add	r5, r5, r2
   3c344:	add	r3, r4, r0
   3c348:	ldr	r0, [fp, #24]
   3c34c:	cmp	r0, #2
   3c350:	blt	3c3fc <GetDataSlab+0x14a38>
   3c354:	mov	r4, #0
   3c358:	ldr	r2, [r1, r4, lsl #2]
   3c35c:	mov	r0, r4
   3c360:	add	r2, r2, #1
   3c364:	str	r2, [r1, r4, lsl #2]
   3c368:	ldr	r4, [lr, r4, lsl #2]
   3c36c:	sdiv	r6, r2, r4
   3c370:	mls	r2, r6, r4, r2
   3c374:	cmp	r2, #0
   3c378:	bne	3c3ec <GetDataSlab+0x14a28>
   3c37c:	mov	r2, #0
   3c380:	sub	r6, fp, #176	; 0xb0
   3c384:	str	r2, [r1, r0, lsl #2]
   3c388:	add	r2, r6, r0, lsl #2
   3c38c:	ldr	r4, [r2, #4]
   3c390:	sdiv	r2, r3, r4
   3c394:	mls	r2, r2, r4, r3
   3c398:	cmp	r2, #0
   3c39c:	beq	3c3bc <GetDataSlab+0x149f8>
   3c3a0:	ldr	r6, [r6, r0, lsl #2]
   3c3a4:	ldr	r7, [r8, r0, lsl #2]
   3c3a8:	sub	r2, r4, r2
   3c3ac:	mla	r2, r7, r6, r2
   3c3b0:	add	r3, r2, r3
   3c3b4:	add	r5, r5, r2
   3c3b8:	b	3c3d4 <GetDataSlab+0x14a10>
   3c3bc:	ldr	r2, [r8, r0, lsl #2]
   3c3c0:	cmp	r2, #0
   3c3c4:	subne	r4, fp, #176	; 0xb0
   3c3c8:	ldrne	r7, [r4, r0, lsl #2]
   3c3cc:	mlane	r3, r7, r2, r3
   3c3d0:	mlane	r5, r7, r2, r5
   3c3d4:	ldr	r2, [fp, #24]
   3c3d8:	add	r4, r0, #1
   3c3dc:	add	r0, r0, #2
   3c3e0:	cmp	r0, r2
   3c3e4:	blt	3c358 <GetDataSlab+0x14994>
   3c3e8:	b	3c3fc <GetDataSlab+0x14a38>
   3c3ec:	ldr	r2, [sp, #36]	; 0x24
   3c3f0:	ldr	r0, [r2, r0, lsl #2]
   3c3f4:	add	r5, r5, r0
   3c3f8:	add	r3, r0, r3
   3c3fc:	ldr	r7, [sp, #52]	; 0x34
   3c400:	ldr	r0, [sp, #44]	; 0x2c
   3c404:	ldr	r2, [sp, #56]	; 0x38
   3c408:	add	r7, r7, sl
   3c40c:	add	ip, ip, r0
   3c410:	mov	r0, #0
   3c414:	cmp	r7, r2
   3c418:	str	ip, [sp, #60]	; 0x3c
   3c41c:	str	r7, [sp, #52]	; 0x34
   3c420:	blt	3c2e8 <GetDataSlab+0x14924>
   3c424:	b	47ffc <GetDataSlab+0x20638>
   3c428:	ldr	ip, [fp, #16]
   3c42c:	cmp	r6, #13
   3c430:	bne	47ffc <GetDataSlab+0x20638>
   3c434:	b	4272c <GetDataSlab+0x1ad68>
   3c438:	ldr	r0, [sp, #56]	; 0x38
   3c43c:	sub	r2, fp, #96	; 0x60
   3c440:	cmp	r0, #1
   3c444:	ldr	r0, [fp, #12]
   3c448:	blt	47ff8 <GetDataSlab+0x20634>
   3c44c:	ldr	r1, [sp, #32]
   3c450:	ldr	r7, [sp, #36]	; 0x24
   3c454:	add	r8, r0, #4
   3c458:	sub	r0, fp, #136	; 0x88
   3c45c:	add	lr, sl, #4
   3c460:	mls	r7, r1, r9, r7
   3c464:	mov	sl, r1
   3c468:	str	r7, [sp, #48]	; 0x30
   3c46c:	mul	r7, r1, r9
   3c470:	orr	r1, r0, #4
   3c474:	orr	r0, r2, #4
   3c478:	str	r0, [sp, #36]	; 0x24
   3c47c:	lsl	r0, sl, #1
   3c480:	str	r7, [sp, #40]	; 0x28
   3c484:	str	r0, [sp, #44]	; 0x2c
   3c488:	mov	r0, #0
   3c48c:	str	r0, [sp, #52]	; 0x34
   3c490:	ldr	r0, [fp, #12]
   3c494:	cmp	sl, #1
   3c498:	ldr	r0, [r0]
   3c49c:	blt	3c4d8 <GetDataSlab+0x14b14>
   3c4a0:	ldr	r2, [sp, #40]	; 0x28
   3c4a4:	ldr	ip, [sp, #60]	; 0x3c
   3c4a8:	add	r4, r2, r3
   3c4ac:	add	r3, r5, r2
   3c4b0:	add	r5, r5, r0
   3c4b4:	ldrsb	r2, [r5], r9
   3c4b8:	subs	sl, sl, #1
   3c4bc:	strh	r2, [ip], #2
   3c4c0:	bne	3c4b4 <GetDataSlab+0x14af0>
   3c4c4:	ldr	ip, [sp, #60]	; 0x3c
   3c4c8:	ldr	sl, [sp, #32]
   3c4cc:	add	r4, r4, r0
   3c4d0:	mov	r5, r3
   3c4d4:	b	3c4e0 <GetDataSlab+0x14b1c>
   3c4d8:	ldr	ip, [sp, #60]	; 0x3c
   3c4dc:	add	r4, r0, r3
   3c4e0:	ldr	r2, [sp, #48]	; 0x30
   3c4e4:	sub	r0, r2, r0
   3c4e8:	add	r5, r5, r2
   3c4ec:	add	r3, r4, r0
   3c4f0:	ldr	r0, [fp, #24]
   3c4f4:	cmp	r0, #2
   3c4f8:	blt	3c5a4 <GetDataSlab+0x14be0>
   3c4fc:	mov	r4, #0
   3c500:	ldr	r2, [r1, r4, lsl #2]
   3c504:	mov	r0, r4
   3c508:	add	r2, r2, #1
   3c50c:	str	r2, [r1, r4, lsl #2]
   3c510:	ldr	r4, [lr, r4, lsl #2]
   3c514:	sdiv	r6, r2, r4
   3c518:	mls	r2, r6, r4, r2
   3c51c:	cmp	r2, #0
   3c520:	bne	3c594 <GetDataSlab+0x14bd0>
   3c524:	mov	r2, #0
   3c528:	sub	r6, fp, #176	; 0xb0
   3c52c:	str	r2, [r1, r0, lsl #2]
   3c530:	add	r2, r6, r0, lsl #2
   3c534:	ldr	r4, [r2, #4]
   3c538:	sdiv	r2, r3, r4
   3c53c:	mls	r2, r2, r4, r3
   3c540:	cmp	r2, #0
   3c544:	beq	3c564 <GetDataSlab+0x14ba0>
   3c548:	ldr	r6, [r6, r0, lsl #2]
   3c54c:	ldr	r7, [r8, r0, lsl #2]
   3c550:	sub	r2, r4, r2
   3c554:	mla	r2, r7, r6, r2
   3c558:	add	r3, r2, r3
   3c55c:	add	r5, r5, r2
   3c560:	b	3c57c <GetDataSlab+0x14bb8>
   3c564:	ldr	r2, [r8, r0, lsl #2]
   3c568:	cmp	r2, #0
   3c56c:	subne	r4, fp, #176	; 0xb0
   3c570:	ldrne	r7, [r4, r0, lsl #2]
   3c574:	mlane	r3, r7, r2, r3
   3c578:	mlane	r5, r7, r2, r5
   3c57c:	ldr	r2, [fp, #24]
   3c580:	add	r4, r0, #1
   3c584:	add	r0, r0, #2
   3c588:	cmp	r0, r2
   3c58c:	blt	3c500 <GetDataSlab+0x14b3c>
   3c590:	b	3c5a4 <GetDataSlab+0x14be0>
   3c594:	ldr	r2, [sp, #36]	; 0x24
   3c598:	ldr	r0, [r2, r0, lsl #2]
   3c59c:	add	r5, r5, r0
   3c5a0:	add	r3, r0, r3
   3c5a4:	ldr	r7, [sp, #52]	; 0x34
   3c5a8:	ldr	r0, [sp, #44]	; 0x2c
   3c5ac:	ldr	r2, [sp, #56]	; 0x38
   3c5b0:	add	r7, r7, sl
   3c5b4:	add	ip, ip, r0
   3c5b8:	mov	r0, #0
   3c5bc:	cmp	r7, r2
   3c5c0:	str	ip, [sp, #60]	; 0x3c
   3c5c4:	str	r7, [sp, #52]	; 0x34
   3c5c8:	blt	3c490 <GetDataSlab+0x14acc>
   3c5cc:	b	47ffc <GetDataSlab+0x20638>
   3c5d0:	ldr	r3, [fp, #16]
   3c5d4:	cmp	r6, #13
   3c5d8:	bne	47ffc <GetDataSlab+0x20638>
   3c5dc:	b	43774 <GetDataSlab+0x1bdb0>
   3c5e0:	ldr	r0, [sp, #56]	; 0x38
   3c5e4:	cmp	r0, #1
   3c5e8:	blt	47ff8 <GetDataSlab+0x20634>
   3c5ec:	ldr	r0, [fp, #20]
   3c5f0:	ldr	lr, [fp, #16]
   3c5f4:	add	ip, r0, #4
   3c5f8:	sub	r0, fp, #136	; 0x88
   3c5fc:	orr	r9, r0, #4
   3c600:	sub	r0, fp, #96	; 0x60
   3c604:	orr	r0, r0, #4
   3c608:	str	r0, [sp, #40]	; 0x28
   3c60c:	ldr	r0, [r8], #4
   3c610:	str	r0, [sp, #44]	; 0x2c
   3c614:	mov	r0, #0
   3c618:	str	r0, [sp, #48]	; 0x30
   3c61c:	ldr	r1, [sp, #44]	; 0x2c
   3c620:	cmp	r2, #1
   3c624:	add	r0, r1, r4
   3c628:	add	r3, sl, r1
   3c62c:	blt	3c680 <GetDataSlab+0x14cbc>
   3c630:	ldr	r1, [sp, #60]	; 0x3c
   3c634:	ldr	r2, [sp, #48]	; 0x30
   3c638:	ldr	r6, [fp, #20]
   3c63c:	mov	r7, #0
   3c640:	add	r4, r1, r2, lsl #2
   3c644:	ldrsb	r1, [r3]
   3c648:	str	r1, [r4, r7, lsl #2]
   3c64c:	add	r7, r7, #1
   3c650:	ldr	r5, [lr]
   3c654:	ldr	r2, [r6]
   3c658:	add	r0, r5, r0
   3c65c:	add	r3, r3, r5
   3c660:	cmp	r7, r2
   3c664:	blt	3c644 <GetDataSlab+0x14c80>
   3c668:	ldr	r1, [fp, #12]
   3c66c:	sub	r6, fp, #176	; 0xb0
   3c670:	ldr	r4, [r1]
   3c674:	ldr	r1, [fp, #8]
   3c678:	ldr	r1, [r1]
   3c67c:	b	3c68c <GetDataSlab+0x14cc8>
   3c680:	mov	r4, r1
   3c684:	ldr	r1, [sp, #52]	; 0x34
   3c688:	sub	r6, fp, #176	; 0xb0
   3c68c:	str	r1, [sp, #52]	; 0x34
   3c690:	mls	r1, r5, r2, r1
   3c694:	str	r4, [sp, #44]	; 0x2c
   3c698:	sub	r1, r1, r4
   3c69c:	add	r4, r1, r0
   3c6a0:	ldr	r0, [fp, #24]
   3c6a4:	add	sl, r3, r1
   3c6a8:	cmp	r0, #2
   3c6ac:	blt	3c758 <GetDataSlab+0x14d94>
   3c6b0:	mov	r7, #0
   3c6b4:	ldr	r1, [r9, r7, lsl #2]
   3c6b8:	mov	r0, r7
   3c6bc:	add	r1, r1, #1
   3c6c0:	str	r1, [r9, r7, lsl #2]
   3c6c4:	ldr	r3, [ip, r7, lsl #2]
   3c6c8:	sdiv	r7, r1, r3
   3c6cc:	mls	r1, r7, r3, r1
   3c6d0:	cmp	r1, #0
   3c6d4:	bne	3c748 <GetDataSlab+0x14d84>
   3c6d8:	mov	r1, #0
   3c6dc:	str	r1, [r9, r0, lsl #2]
   3c6e0:	add	r1, r6, r0, lsl #2
   3c6e4:	ldr	r7, [r1, #4]
   3c6e8:	sdiv	r1, r4, r7
   3c6ec:	mls	r1, r1, r7, r4
   3c6f0:	cmp	r1, #0
   3c6f4:	beq	3c71c <GetDataSlab+0x14d58>
   3c6f8:	ldr	r3, [r6, r0, lsl #2]
   3c6fc:	ldr	lr, [r8, r0, lsl #2]
   3c700:	sub	r1, r7, r1
   3c704:	sub	r6, fp, #176	; 0xb0
   3c708:	mla	r1, lr, r3, r1
   3c70c:	ldr	lr, [fp, #16]
   3c710:	add	r4, r1, r4
   3c714:	add	sl, sl, r1
   3c718:	b	3c730 <GetDataSlab+0x14d6c>
   3c71c:	ldr	r1, [r8, r0, lsl #2]
   3c720:	cmp	r1, #0
   3c724:	ldrne	r3, [r6, r0, lsl #2]
   3c728:	mlane	r4, r3, r1, r4
   3c72c:	mlane	sl, r3, r1, sl
   3c730:	ldr	r1, [fp, #24]
   3c734:	add	r7, r0, #1
   3c738:	add	r0, r0, #2
   3c73c:	cmp	r0, r1
   3c740:	blt	3c6b4 <GetDataSlab+0x14cf0>
   3c744:	b	3c758 <GetDataSlab+0x14d94>
   3c748:	ldr	r1, [sp, #40]	; 0x28
   3c74c:	ldr	r0, [r1, r0, lsl #2]
   3c750:	add	sl, sl, r0
   3c754:	add	r4, r0, r4
   3c758:	ldr	r3, [sp, #48]	; 0x30
   3c75c:	ldr	r1, [sp, #56]	; 0x38
   3c760:	mov	r0, #0
   3c764:	add	r3, r2, r3
   3c768:	cmp	r3, r1
   3c76c:	str	r3, [sp, #48]	; 0x30
   3c770:	blt	3c61c <GetDataSlab+0x14c58>
   3c774:	b	47ffc <GetDataSlab+0x20638>
   3c778:	ldr	r3, [fp, #16]
   3c77c:	cmp	r6, #13
   3c780:	bne	47ffc <GetDataSlab+0x20638>
   3c784:	b	4479c <GetDataSlab+0x1cdd8>
   3c788:	ldr	r0, [sp, #56]	; 0x38
   3c78c:	cmp	r0, #1
   3c790:	blt	47ff8 <GetDataSlab+0x20634>
   3c794:	ldr	r0, [fp, #20]
   3c798:	ldr	lr, [fp, #16]
   3c79c:	add	ip, r0, #4
   3c7a0:	sub	r0, fp, #136	; 0x88
   3c7a4:	orr	r9, r0, #4
   3c7a8:	sub	r0, fp, #96	; 0x60
   3c7ac:	orr	r0, r0, #4
   3c7b0:	str	r0, [sp, #40]	; 0x28
   3c7b4:	ldr	r0, [r8], #4
   3c7b8:	str	r0, [sp, #44]	; 0x2c
   3c7bc:	mov	r0, #0
   3c7c0:	str	r0, [sp, #48]	; 0x30
   3c7c4:	ldr	r1, [sp, #44]	; 0x2c
   3c7c8:	cmp	r2, #1
   3c7cc:	add	r0, r1, r4
   3c7d0:	add	r3, sl, r1
   3c7d4:	blt	3c828 <GetDataSlab+0x14e64>
   3c7d8:	ldr	r1, [sp, #60]	; 0x3c
   3c7dc:	ldr	r2, [sp, #48]	; 0x30
   3c7e0:	ldr	r6, [fp, #20]
   3c7e4:	mov	r7, #0
   3c7e8:	add	r4, r1, r2, lsl #2
   3c7ec:	ldrsb	r1, [r3]
   3c7f0:	str	r1, [r4, r7, lsl #2]
   3c7f4:	add	r7, r7, #1
   3c7f8:	ldr	r5, [lr]
   3c7fc:	ldr	r2, [r6]
   3c800:	add	r0, r5, r0
   3c804:	add	r3, r3, r5
   3c808:	cmp	r7, r2
   3c80c:	blt	3c7ec <GetDataSlab+0x14e28>
   3c810:	ldr	r1, [fp, #12]
   3c814:	sub	r6, fp, #176	; 0xb0
   3c818:	ldr	r4, [r1]
   3c81c:	ldr	r1, [fp, #8]
   3c820:	ldr	r1, [r1]
   3c824:	b	3c834 <GetDataSlab+0x14e70>
   3c828:	mov	r4, r1
   3c82c:	ldr	r1, [sp, #52]	; 0x34
   3c830:	sub	r6, fp, #176	; 0xb0
   3c834:	str	r1, [sp, #52]	; 0x34
   3c838:	mls	r1, r5, r2, r1
   3c83c:	str	r4, [sp, #44]	; 0x2c
   3c840:	sub	r1, r1, r4
   3c844:	add	r4, r1, r0
   3c848:	ldr	r0, [fp, #24]
   3c84c:	add	sl, r3, r1
   3c850:	cmp	r0, #2
   3c854:	blt	3c900 <GetDataSlab+0x14f3c>
   3c858:	mov	r7, #0
   3c85c:	ldr	r1, [r9, r7, lsl #2]
   3c860:	mov	r0, r7
   3c864:	add	r1, r1, #1
   3c868:	str	r1, [r9, r7, lsl #2]
   3c86c:	ldr	r3, [ip, r7, lsl #2]
   3c870:	sdiv	r7, r1, r3
   3c874:	mls	r1, r7, r3, r1
   3c878:	cmp	r1, #0
   3c87c:	bne	3c8f0 <GetDataSlab+0x14f2c>
   3c880:	mov	r1, #0
   3c884:	str	r1, [r9, r0, lsl #2]
   3c888:	add	r1, r6, r0, lsl #2
   3c88c:	ldr	r7, [r1, #4]
   3c890:	sdiv	r1, r4, r7
   3c894:	mls	r1, r1, r7, r4
   3c898:	cmp	r1, #0
   3c89c:	beq	3c8c4 <GetDataSlab+0x14f00>
   3c8a0:	ldr	r3, [r6, r0, lsl #2]
   3c8a4:	ldr	lr, [r8, r0, lsl #2]
   3c8a8:	sub	r1, r7, r1
   3c8ac:	sub	r6, fp, #176	; 0xb0
   3c8b0:	mla	r1, lr, r3, r1
   3c8b4:	ldr	lr, [fp, #16]
   3c8b8:	add	r4, r1, r4
   3c8bc:	add	sl, sl, r1
   3c8c0:	b	3c8d8 <GetDataSlab+0x14f14>
   3c8c4:	ldr	r1, [r8, r0, lsl #2]
   3c8c8:	cmp	r1, #0
   3c8cc:	ldrne	r3, [r6, r0, lsl #2]
   3c8d0:	mlane	r4, r3, r1, r4
   3c8d4:	mlane	sl, r3, r1, sl
   3c8d8:	ldr	r1, [fp, #24]
   3c8dc:	add	r7, r0, #1
   3c8e0:	add	r0, r0, #2
   3c8e4:	cmp	r0, r1
   3c8e8:	blt	3c85c <GetDataSlab+0x14e98>
   3c8ec:	b	3c900 <GetDataSlab+0x14f3c>
   3c8f0:	ldr	r1, [sp, #40]	; 0x28
   3c8f4:	ldr	r0, [r1, r0, lsl #2]
   3c8f8:	add	sl, sl, r0
   3c8fc:	add	r4, r0, r4
   3c900:	ldr	r3, [sp, #48]	; 0x30
   3c904:	ldr	r1, [sp, #56]	; 0x38
   3c908:	mov	r0, #0
   3c90c:	add	r3, r2, r3
   3c910:	cmp	r3, r1
   3c914:	str	r3, [sp, #48]	; 0x30
   3c918:	blt	3c7c4 <GetDataSlab+0x14e00>
   3c91c:	b	47ffc <GetDataSlab+0x20638>
   3c920:	ldr	r0, [sp, #56]	; 0x38
   3c924:	ldr	r3, [sp, #40]	; 0x28
   3c928:	ldr	r7, [fp, #20]
   3c92c:	cmp	r0, #1
   3c930:	ldr	r0, [fp, #12]
   3c934:	blt	47ff8 <GetDataSlab+0x20634>
   3c938:	ldr	r1, [sp, #36]	; 0x24
   3c93c:	add	lr, r0, #4
   3c940:	sub	r0, fp, #136	; 0x88
   3c944:	add	r8, r7, #4
   3c948:	mov	sl, #0
   3c94c:	mls	r1, r3, r9, r1
   3c950:	str	r1, [sp, #48]	; 0x30
   3c954:	mul	r1, r3, r9
   3c958:	str	r1, [sp, #36]	; 0x24
   3c95c:	orr	r1, r0, #4
   3c960:	orr	r0, r2, #4
   3c964:	str	r0, [sp, #32]
   3c968:	lsl	r0, r3, #3
   3c96c:	str	r0, [sp, #44]	; 0x2c
   3c970:	mov	r0, #0
   3c974:	str	r0, [sp, #52]	; 0x34
   3c978:	ldr	r0, [fp, #12]
   3c97c:	cmp	r3, #1
   3c980:	ldr	r0, [r0]
   3c984:	blt	3c9cc <GetDataSlab+0x15008>
   3c988:	ldr	r2, [sp, #36]	; 0x24
   3c98c:	ldr	ip, [sp, #60]	; 0x3c
   3c990:	mov	sl, r3
   3c994:	add	r6, r2, r4
   3c998:	add	r4, r5, r2
   3c99c:	add	r5, r5, r0
   3c9a0:	ldrsb	r2, [r5], r9
   3c9a4:	subs	sl, sl, #1
   3c9a8:	asr	r3, r2, #31
   3c9ac:	strd	r2, [ip]
   3c9b0:	add	ip, ip, #8
   3c9b4:	bne	3c9a0 <GetDataSlab+0x14fdc>
   3c9b8:	ldr	ip, [sp, #60]	; 0x3c
   3c9bc:	add	r2, r6, r0
   3c9c0:	mov	r5, r4
   3c9c4:	mov	sl, #0
   3c9c8:	b	3c9d4 <GetDataSlab+0x15010>
   3c9cc:	ldr	ip, [sp, #60]	; 0x3c
   3c9d0:	add	r2, r0, r4
   3c9d4:	ldr	r3, [sp, #48]	; 0x30
   3c9d8:	sub	r0, r3, r0
   3c9dc:	add	r5, r5, r3
   3c9e0:	add	r4, r2, r0
   3c9e4:	ldr	r0, [fp, #24]
   3c9e8:	cmp	r0, #2
   3c9ec:	blt	3ca94 <GetDataSlab+0x150d0>
   3c9f0:	mov	r2, #0
   3c9f4:	mov	r0, r2
   3c9f8:	ldr	r2, [r1, r2, lsl #2]
   3c9fc:	add	r2, r2, #1
   3ca00:	str	r2, [r1, r0, lsl #2]
   3ca04:	ldr	r3, [r8, r0, lsl #2]
   3ca08:	sdiv	r6, r2, r3
   3ca0c:	mls	r2, r6, r3, r2
   3ca10:	cmp	r2, #0
   3ca14:	bne	3ca84 <GetDataSlab+0x150c0>
   3ca18:	sub	r6, fp, #176	; 0xb0
   3ca1c:	str	sl, [r1, r0, lsl #2]
   3ca20:	add	r2, r6, r0, lsl #2
   3ca24:	ldr	r2, [r2, #4]
   3ca28:	sdiv	r3, r4, r2
   3ca2c:	mls	r3, r3, r2, r4
   3ca30:	cmp	r3, #0
   3ca34:	beq	3ca54 <GetDataSlab+0x15090>
   3ca38:	ldr	r6, [r6, r0, lsl #2]
   3ca3c:	ldr	r7, [lr, r0, lsl #2]
   3ca40:	sub	r2, r2, r3
   3ca44:	mla	r2, r7, r6, r2
   3ca48:	add	r4, r2, r4
   3ca4c:	add	r5, r5, r2
   3ca50:	b	3ca6c <GetDataSlab+0x150a8>
   3ca54:	ldr	r2, [lr, r0, lsl #2]
   3ca58:	cmp	r2, #0
   3ca5c:	subne	r3, fp, #176	; 0xb0
   3ca60:	ldrne	r3, [r3, r0, lsl #2]
   3ca64:	mlane	r4, r3, r2, r4
   3ca68:	mlane	r5, r3, r2, r5
   3ca6c:	ldr	r3, [fp, #24]
   3ca70:	add	r2, r0, #1
   3ca74:	add	r0, r0, #2
   3ca78:	cmp	r0, r3
   3ca7c:	blt	3c9f4 <GetDataSlab+0x15030>
   3ca80:	b	3ca94 <GetDataSlab+0x150d0>
   3ca84:	ldr	r2, [sp, #32]
   3ca88:	ldr	r0, [r2, r0, lsl #2]
   3ca8c:	add	r5, r5, r0
   3ca90:	add	r4, r0, r4
   3ca94:	ldr	r3, [sp, #40]	; 0x28
   3ca98:	ldr	r7, [sp, #52]	; 0x34
   3ca9c:	ldr	r0, [sp, #44]	; 0x2c
   3caa0:	ldr	r2, [sp, #56]	; 0x38
   3caa4:	add	r7, r7, r3
   3caa8:	add	ip, ip, r0
   3caac:	mov	r0, #0
   3cab0:	cmp	r7, r2
   3cab4:	str	ip, [sp, #60]	; 0x3c
   3cab8:	str	r7, [sp, #52]	; 0x34
   3cabc:	blt	3c978 <GetDataSlab+0x14fb4>
   3cac0:	b	47ffc <GetDataSlab+0x20638>
   3cac4:	ldr	r0, [sp, #56]	; 0x38
   3cac8:	ldr	r6, [sp, #40]	; 0x28
   3cacc:	ldr	r1, [fp, #20]
   3cad0:	sub	r2, fp, #96	; 0x60
   3cad4:	cmp	r0, #1
   3cad8:	blt	47ff8 <GetDataSlab+0x20634>
   3cadc:	ldr	r0, [sp, #36]	; 0x24
   3cae0:	add	r8, r1, #4
   3cae4:	mov	sl, #0
   3cae8:	mls	r0, r6, r9, r0
   3caec:	str	r0, [sp, #44]	; 0x2c
   3caf0:	mul	r0, r6, r9
   3caf4:	str	r0, [sp, #32]
   3caf8:	ldr	r0, [fp, #12]
   3cafc:	add	r7, r0, #4
   3cb00:	sub	r0, fp, #136	; 0x88
   3cb04:	orr	r1, r0, #4
   3cb08:	orr	r0, r2, #4
   3cb0c:	str	r0, [sp, #28]
   3cb10:	lsl	r0, r6, #3
   3cb14:	str	r0, [sp, #36]	; 0x24
   3cb18:	mov	r0, #0
   3cb1c:	str	r0, [sp, #52]	; 0x34
   3cb20:	ldr	r0, [fp, #12]
   3cb24:	cmp	r6, #1
   3cb28:	ldr	r0, [r0]
   3cb2c:	blt	3cb78 <GetDataSlab+0x151b4>
   3cb30:	ldr	r2, [sp, #32]
   3cb34:	ldr	ip, [sp, #60]	; 0x3c
   3cb38:	add	r5, lr, r0
   3cb3c:	mov	sl, r6
   3cb40:	add	r4, r2, r3
   3cb44:	add	r2, lr, r2
   3cb48:	str	r2, [sp, #48]	; 0x30
   3cb4c:	ldrsb	r2, [r5], r9
   3cb50:	subs	sl, sl, #1
   3cb54:	asr	r3, r2, #31
   3cb58:	strd	r2, [ip]
   3cb5c:	add	ip, ip, #8
   3cb60:	bne	3cb4c <GetDataSlab+0x15188>
   3cb64:	ldr	lr, [sp, #48]	; 0x30
   3cb68:	ldr	ip, [sp, #60]	; 0x3c
   3cb6c:	add	r4, r4, r0
   3cb70:	mov	sl, #0
   3cb74:	b	3cb80 <GetDataSlab+0x151bc>
   3cb78:	ldr	ip, [sp, #60]	; 0x3c
   3cb7c:	add	r4, r0, r3
   3cb80:	ldr	r2, [sp, #44]	; 0x2c
   3cb84:	sub	r0, r2, r0
   3cb88:	add	lr, lr, r2
   3cb8c:	add	r3, r4, r0
   3cb90:	ldr	r0, [fp, #24]
   3cb94:	cmp	r0, #2
   3cb98:	blt	3cc40 <GetDataSlab+0x1527c>
   3cb9c:	mov	r4, #0
   3cba0:	ldr	r2, [r1, r4, lsl #2]
   3cba4:	mov	r0, r4
   3cba8:	add	r2, r2, #1
   3cbac:	str	r2, [r1, r4, lsl #2]
   3cbb0:	ldr	r5, [r8, r4, lsl #2]
   3cbb4:	sdiv	r4, r2, r5
   3cbb8:	mls	r2, r4, r5, r2
   3cbbc:	cmp	r2, #0
   3cbc0:	bne	3cc30 <GetDataSlab+0x1526c>
   3cbc4:	sub	r5, fp, #176	; 0xb0
   3cbc8:	str	sl, [r1, r0, lsl #2]
   3cbcc:	add	r2, r5, r0, lsl #2
   3cbd0:	ldr	r4, [r2, #4]
   3cbd4:	sdiv	r2, r3, r4
   3cbd8:	mls	r2, r2, r4, r3
   3cbdc:	cmp	r2, #0
   3cbe0:	beq	3cc00 <GetDataSlab+0x1523c>
   3cbe4:	ldr	r5, [r5, r0, lsl #2]
   3cbe8:	ldr	r6, [r7, r0, lsl #2]
   3cbec:	sub	r2, r4, r2
   3cbf0:	mla	r2, r6, r5, r2
   3cbf4:	add	r3, r2, r3
   3cbf8:	add	lr, lr, r2
   3cbfc:	b	3cc18 <GetDataSlab+0x15254>
   3cc00:	ldr	r2, [r7, r0, lsl #2]
   3cc04:	cmp	r2, #0
   3cc08:	subne	r4, fp, #176	; 0xb0
   3cc0c:	ldrne	r6, [r4, r0, lsl #2]
   3cc10:	mlane	r3, r6, r2, r3
   3cc14:	mlane	lr, r6, r2, lr
   3cc18:	ldr	r2, [fp, #24]
   3cc1c:	add	r4, r0, #1
   3cc20:	add	r0, r0, #2
   3cc24:	cmp	r0, r2
   3cc28:	blt	3cba0 <GetDataSlab+0x151dc>
   3cc2c:	b	3cc40 <GetDataSlab+0x1527c>
   3cc30:	ldr	r2, [sp, #28]
   3cc34:	ldr	r0, [r2, r0, lsl #2]
   3cc38:	add	lr, lr, r0
   3cc3c:	add	r3, r0, r3
   3cc40:	ldr	r6, [sp, #40]	; 0x28
   3cc44:	ldr	r5, [sp, #52]	; 0x34
   3cc48:	ldr	r0, [sp, #36]	; 0x24
   3cc4c:	ldr	r2, [sp, #56]	; 0x38
   3cc50:	add	r5, r5, r6
   3cc54:	add	ip, ip, r0
   3cc58:	mov	r0, #0
   3cc5c:	cmp	r5, r2
   3cc60:	str	ip, [sp, #60]	; 0x3c
   3cc64:	str	r5, [sp, #52]	; 0x34
   3cc68:	blt	3cb20 <GetDataSlab+0x1515c>
   3cc6c:	b	47ffc <GetDataSlab+0x20638>
   3cc70:	ldr	r0, [sp, #56]	; 0x38
   3cc74:	ldr	r3, [sp, #52]	; 0x34
   3cc78:	cmp	r0, #1
   3cc7c:	ldr	r0, [fp, #12]
   3cc80:	blt	47ff8 <GetDataSlab+0x20634>
   3cc84:	ldr	r1, [sp, #32]
   3cc88:	add	lr, r0, #4
   3cc8c:	sub	r0, fp, #136	; 0x88
   3cc90:	add	r8, sl, #4
   3cc94:	mov	sl, #0
   3cc98:	mls	r1, r3, r9, r1
   3cc9c:	str	r1, [sp, #44]	; 0x2c
   3cca0:	mul	r1, r3, r9
   3cca4:	str	r1, [sp, #36]	; 0x24
   3cca8:	orr	r1, r0, #4
   3ccac:	orr	r0, r2, #4
   3ccb0:	str	r0, [sp, #32]
   3ccb4:	lsl	r0, r3, #3
   3ccb8:	str	r0, [sp, #40]	; 0x28
   3ccbc:	mov	r0, #0
   3ccc0:	str	r0, [sp, #48]	; 0x30
   3ccc4:	ldr	r0, [fp, #12]
   3ccc8:	cmp	r3, #1
   3cccc:	ldr	r0, [r0]
   3ccd0:	blt	3cd20 <GetDataSlab+0x1535c>
   3ccd4:	ldr	r2, [sp, #36]	; 0x24
   3ccd8:	ldr	ip, [sp, #60]	; 0x3c
   3ccdc:	mov	sl, r3
   3cce0:	mov	r7, r2
   3cce4:	add	r2, r2, r4
   3cce8:	add	r4, r5, r7
   3ccec:	add	r5, r5, r0
   3ccf0:	ldrb	r3, [r5], r9
   3ccf4:	subs	sl, sl, #1
   3ccf8:	vmov	s0, r3
   3ccfc:	vcvt.f64.u32	d16, s0
   3cd00:	vstr	d16, [ip]
   3cd04:	add	ip, ip, #8
   3cd08:	bne	3ccf0 <GetDataSlab+0x1532c>
   3cd0c:	ldr	ip, [sp, #60]	; 0x3c
   3cd10:	add	r2, r2, r0
   3cd14:	mov	r5, r4
   3cd18:	mov	sl, #0
   3cd1c:	b	3cd28 <GetDataSlab+0x15364>
   3cd20:	ldr	ip, [sp, #60]	; 0x3c
   3cd24:	add	r2, r0, r4
   3cd28:	ldr	r3, [sp, #44]	; 0x2c
   3cd2c:	sub	r0, r3, r0
   3cd30:	add	r5, r5, r3
   3cd34:	add	r4, r2, r0
   3cd38:	ldr	r0, [fp, #24]
   3cd3c:	cmp	r0, #2
   3cd40:	blt	3cde8 <GetDataSlab+0x15424>
   3cd44:	mov	r2, #0
   3cd48:	mov	r0, r2
   3cd4c:	ldr	r2, [r1, r2, lsl #2]
   3cd50:	add	r2, r2, #1
   3cd54:	str	r2, [r1, r0, lsl #2]
   3cd58:	ldr	r3, [r8, r0, lsl #2]
   3cd5c:	sdiv	r6, r2, r3
   3cd60:	mls	r2, r6, r3, r2
   3cd64:	cmp	r2, #0
   3cd68:	bne	3cdd8 <GetDataSlab+0x15414>
   3cd6c:	sub	r6, fp, #176	; 0xb0
   3cd70:	str	sl, [r1, r0, lsl #2]
   3cd74:	add	r2, r6, r0, lsl #2
   3cd78:	ldr	r2, [r2, #4]
   3cd7c:	sdiv	r3, r4, r2
   3cd80:	mls	r3, r3, r2, r4
   3cd84:	cmp	r3, #0
   3cd88:	beq	3cda8 <GetDataSlab+0x153e4>
   3cd8c:	ldr	r6, [r6, r0, lsl #2]
   3cd90:	ldr	r7, [lr, r0, lsl #2]
   3cd94:	sub	r2, r2, r3
   3cd98:	mla	r2, r7, r6, r2
   3cd9c:	add	r4, r2, r4
   3cda0:	add	r5, r5, r2
   3cda4:	b	3cdc0 <GetDataSlab+0x153fc>
   3cda8:	ldr	r2, [lr, r0, lsl #2]
   3cdac:	cmp	r2, #0
   3cdb0:	subne	r3, fp, #176	; 0xb0
   3cdb4:	ldrne	r3, [r3, r0, lsl #2]
   3cdb8:	mlane	r4, r3, r2, r4
   3cdbc:	mlane	r5, r3, r2, r5
   3cdc0:	ldr	r3, [fp, #24]
   3cdc4:	add	r2, r0, #1
   3cdc8:	add	r0, r0, #2
   3cdcc:	cmp	r0, r3
   3cdd0:	blt	3cd48 <GetDataSlab+0x15384>
   3cdd4:	b	3cde8 <GetDataSlab+0x15424>
   3cdd8:	ldr	r2, [sp, #32]
   3cddc:	ldr	r0, [r2, r0, lsl #2]
   3cde0:	add	r5, r5, r0
   3cde4:	add	r4, r0, r4
   3cde8:	ldr	r3, [sp, #52]	; 0x34
   3cdec:	ldr	r7, [sp, #48]	; 0x30
   3cdf0:	ldr	r0, [sp, #40]	; 0x28
   3cdf4:	ldr	r2, [sp, #56]	; 0x38
   3cdf8:	add	r7, r7, r3
   3cdfc:	add	ip, ip, r0
   3ce00:	mov	r0, #0
   3ce04:	cmp	r7, r2
   3ce08:	str	ip, [sp, #60]	; 0x3c
   3ce0c:	str	r7, [sp, #48]	; 0x30
   3ce10:	blt	3ccc4 <GetDataSlab+0x15300>
   3ce14:	b	47ffc <GetDataSlab+0x20638>
   3ce18:	ldr	r0, [sp, #52]	; 0x34
   3ce1c:	ldr	r3, [sp, #44]	; 0x2c
   3ce20:	cmp	r0, #1
   3ce24:	blt	47ff8 <GetDataSlab+0x20634>
   3ce28:	ldr	r0, [sp, #40]	; 0x28
   3ce2c:	ldr	r6, [r8], #4
   3ce30:	mov	ip, #0
   3ce34:	mov	r9, #0
   3ce38:	mls	r0, r3, r1, r0
   3ce3c:	str	r8, [sp, #56]	; 0x38
   3ce40:	str	r6, [sp, #48]	; 0x30
   3ce44:	sub	r0, r0, r6
   3ce48:	str	r0, [sp, #40]	; 0x28
   3ce4c:	ldr	r0, [fp, #20]
   3ce50:	add	lr, r0, #4
   3ce54:	sub	r0, fp, #136	; 0x88
   3ce58:	orr	r7, r0, #4
   3ce5c:	sub	r0, fp, #96	; 0x60
   3ce60:	orr	r0, r0, #4
   3ce64:	str	r0, [sp, #28]
   3ce68:	mla	r0, r3, r1, r6
   3ce6c:	lsl	r1, r1, #1
   3ce70:	str	r0, [sp, #32]
   3ce74:	lsl	r0, r3, #3
   3ce78:	str	r0, [sp, #36]	; 0x24
   3ce7c:	ldr	r0, [sp, #48]	; 0x30
   3ce80:	cmp	r3, #1
   3ce84:	blt	3ceb8 <GetDataSlab+0x154f4>
   3ce88:	ldr	r0, [sp, #48]	; 0x30
   3ce8c:	ldr	r3, [sp, #44]	; 0x2c
   3ce90:	ldr	r6, [sp, #60]	; 0x3c
   3ce94:	add	r0, sl, r0, lsl #1
   3ce98:	ldrsh	r8, [r0], r1
   3ce9c:	subs	r3, r3, #1
   3cea0:	vmov	s0, r8
   3cea4:	vcvt.f64.s32	d16, s0
   3cea8:	vstr	d16, [r6]
   3ceac:	add	r6, r6, #8
   3ceb0:	bne	3ce98 <GetDataSlab+0x154d4>
   3ceb4:	ldr	r0, [sp, #32]
   3ceb8:	ldr	r4, [sp, #40]	; 0x28
   3cebc:	add	r3, sl, r4, lsl #1
   3cec0:	add	sl, r3, r0, lsl #1
   3cec4:	add	r0, r0, r2
   3cec8:	add	r2, r0, r4
   3cecc:	ldr	r0, [fp, #24]
   3ced0:	cmp	r0, #2
   3ced4:	blt	3cf84 <GetDataSlab+0x155c0>
   3ced8:	ldr	r8, [sp, #56]	; 0x38
   3cedc:	mov	r3, #0
   3cee0:	mov	r0, r3
   3cee4:	ldr	r3, [r7, r3, lsl #2]
   3cee8:	add	r3, r3, #1
   3ceec:	str	r3, [r7, r0, lsl #2]
   3cef0:	ldr	r6, [lr, r0, lsl #2]
   3cef4:	sdiv	r4, r3, r6
   3cef8:	mls	r3, r4, r6, r3
   3cefc:	cmp	r3, #0
   3cf00:	bne	3cf74 <GetDataSlab+0x155b0>
   3cf04:	sub	r5, fp, #176	; 0xb0
   3cf08:	str	ip, [r7, r0, lsl #2]
   3cf0c:	add	r3, r5, r0, lsl #2
   3cf10:	ldr	r3, [r3, #4]
   3cf14:	sdiv	r4, r2, r3
   3cf18:	mls	r6, r4, r3, r2
   3cf1c:	cmp	r6, #0
   3cf20:	beq	3cf3c <GetDataSlab+0x15578>
   3cf24:	ldr	r4, [r5, r0, lsl #2]
   3cf28:	ldr	r5, [r8, r0, lsl #2]
   3cf2c:	sub	r3, r3, r6
   3cf30:	mla	r3, r5, r4, r3
   3cf34:	add	r2, r3, r2
   3cf38:	b	3cf58 <GetDataSlab+0x15594>
   3cf3c:	ldr	r3, [r8, r0, lsl #2]
   3cf40:	cmp	r3, #0
   3cf44:	beq	3cf5c <GetDataSlab+0x15598>
   3cf48:	sub	r4, fp, #176	; 0xb0
   3cf4c:	ldr	r4, [r4, r0, lsl #2]
   3cf50:	mla	r2, r4, r3, r2
   3cf54:	mul	r3, r4, r3
   3cf58:	add	sl, sl, r3, lsl #1
   3cf5c:	ldr	r4, [fp, #24]
   3cf60:	add	r3, r0, #1
   3cf64:	add	r0, r0, #2
   3cf68:	cmp	r0, r4
   3cf6c:	blt	3cee0 <GetDataSlab+0x1551c>
   3cf70:	b	3cf84 <GetDataSlab+0x155c0>
   3cf74:	ldr	r3, [sp, #28]
   3cf78:	ldr	r0, [r3, r0, lsl #2]
   3cf7c:	add	sl, sl, r0, lsl #1
   3cf80:	add	r2, r0, r2
   3cf84:	ldr	r0, [sp, #60]	; 0x3c
   3cf88:	ldr	r3, [sp, #36]	; 0x24
   3cf8c:	ldr	r4, [sp, #52]	; 0x34
   3cf90:	add	r0, r0, r3
   3cf94:	ldr	r3, [sp, #44]	; 0x2c
   3cf98:	str	r0, [sp, #60]	; 0x3c
   3cf9c:	mov	r0, #0
   3cfa0:	add	r9, r9, r3
   3cfa4:	cmp	r9, r4
   3cfa8:	blt	3ce7c <GetDataSlab+0x154b8>
   3cfac:	b	47ffc <GetDataSlab+0x20638>
   3cfb0:	ldr	r0, [sp, #52]	; 0x34
   3cfb4:	ldr	r3, [sp, #44]	; 0x2c
   3cfb8:	cmp	r0, #1
   3cfbc:	blt	47ff8 <GetDataSlab+0x20634>
   3cfc0:	ldr	r0, [sp, #40]	; 0x28
   3cfc4:	ldr	r6, [r8], #4
   3cfc8:	mov	ip, #0
   3cfcc:	mov	r9, #0
   3cfd0:	mls	r0, r3, r1, r0
   3cfd4:	str	r8, [sp, #56]	; 0x38
   3cfd8:	str	r6, [sp, #48]	; 0x30
   3cfdc:	sub	r0, r0, r6
   3cfe0:	str	r0, [sp, #40]	; 0x28
   3cfe4:	ldr	r0, [fp, #20]
   3cfe8:	add	lr, r0, #4
   3cfec:	sub	r0, fp, #136	; 0x88
   3cff0:	orr	r7, r0, #4
   3cff4:	sub	r0, fp, #96	; 0x60
   3cff8:	orr	r0, r0, #4
   3cffc:	str	r0, [sp, #28]
   3d000:	mla	r0, r3, r1, r6
   3d004:	lsl	r1, r1, #1
   3d008:	str	r0, [sp, #32]
   3d00c:	lsl	r0, r3, #3
   3d010:	str	r0, [sp, #36]	; 0x24
   3d014:	ldr	r0, [sp, #48]	; 0x30
   3d018:	cmp	r3, #1
   3d01c:	blt	3d050 <GetDataSlab+0x1568c>
   3d020:	ldr	r0, [sp, #48]	; 0x30
   3d024:	ldr	r3, [sp, #44]	; 0x2c
   3d028:	ldr	r6, [sp, #60]	; 0x3c
   3d02c:	add	r0, sl, r0, lsl #1
   3d030:	ldrh	r8, [r0], r1
   3d034:	subs	r3, r3, #1
   3d038:	vmov	s0, r8
   3d03c:	vcvt.f64.u32	d16, s0
   3d040:	vstr	d16, [r6]
   3d044:	add	r6, r6, #8
   3d048:	bne	3d030 <GetDataSlab+0x1566c>
   3d04c:	ldr	r0, [sp, #32]
   3d050:	ldr	r4, [sp, #40]	; 0x28
   3d054:	add	r3, sl, r4, lsl #1
   3d058:	add	sl, r3, r0, lsl #1
   3d05c:	add	r0, r0, r2
   3d060:	add	r2, r0, r4
   3d064:	ldr	r0, [fp, #24]
   3d068:	cmp	r0, #2
   3d06c:	blt	3d11c <GetDataSlab+0x15758>
   3d070:	ldr	r8, [sp, #56]	; 0x38
   3d074:	mov	r3, #0
   3d078:	mov	r0, r3
   3d07c:	ldr	r3, [r7, r3, lsl #2]
   3d080:	add	r3, r3, #1
   3d084:	str	r3, [r7, r0, lsl #2]
   3d088:	ldr	r6, [lr, r0, lsl #2]
   3d08c:	sdiv	r4, r3, r6
   3d090:	mls	r3, r4, r6, r3
   3d094:	cmp	r3, #0
   3d098:	bne	3d10c <GetDataSlab+0x15748>
   3d09c:	sub	r5, fp, #176	; 0xb0
   3d0a0:	str	ip, [r7, r0, lsl #2]
   3d0a4:	add	r3, r5, r0, lsl #2
   3d0a8:	ldr	r3, [r3, #4]
   3d0ac:	sdiv	r4, r2, r3
   3d0b0:	mls	r6, r4, r3, r2
   3d0b4:	cmp	r6, #0
   3d0b8:	beq	3d0d4 <GetDataSlab+0x15710>
   3d0bc:	ldr	r4, [r5, r0, lsl #2]
   3d0c0:	ldr	r5, [r8, r0, lsl #2]
   3d0c4:	sub	r3, r3, r6
   3d0c8:	mla	r3, r5, r4, r3
   3d0cc:	add	r2, r3, r2
   3d0d0:	b	3d0f0 <GetDataSlab+0x1572c>
   3d0d4:	ldr	r3, [r8, r0, lsl #2]
   3d0d8:	cmp	r3, #0
   3d0dc:	beq	3d0f4 <GetDataSlab+0x15730>
   3d0e0:	sub	r4, fp, #176	; 0xb0
   3d0e4:	ldr	r4, [r4, r0, lsl #2]
   3d0e8:	mla	r2, r4, r3, r2
   3d0ec:	mul	r3, r4, r3
   3d0f0:	add	sl, sl, r3, lsl #1
   3d0f4:	ldr	r4, [fp, #24]
   3d0f8:	add	r3, r0, #1
   3d0fc:	add	r0, r0, #2
   3d100:	cmp	r0, r4
   3d104:	blt	3d078 <GetDataSlab+0x156b4>
   3d108:	b	3d11c <GetDataSlab+0x15758>
   3d10c:	ldr	r3, [sp, #28]
   3d110:	ldr	r0, [r3, r0, lsl #2]
   3d114:	add	sl, sl, r0, lsl #1
   3d118:	add	r2, r0, r2
   3d11c:	ldr	r0, [sp, #60]	; 0x3c
   3d120:	ldr	r3, [sp, #36]	; 0x24
   3d124:	ldr	r4, [sp, #52]	; 0x34
   3d128:	add	r0, r0, r3
   3d12c:	ldr	r3, [sp, #44]	; 0x2c
   3d130:	str	r0, [sp, #60]	; 0x3c
   3d134:	mov	r0, #0
   3d138:	add	r9, r9, r3
   3d13c:	cmp	r9, r4
   3d140:	blt	3d014 <GetDataSlab+0x15650>
   3d144:	b	47ffc <GetDataSlab+0x20638>
   3d148:	ldr	r1, [sp, #56]	; 0x38
   3d14c:	ldr	r2, [sp, #40]	; 0x28
   3d150:	cmp	r1, #1
   3d154:	sub	r1, fp, #96	; 0x60
   3d158:	blt	47ff8 <GetDataSlab+0x20634>
   3d15c:	add	r9, r0, #4
   3d160:	ldr	r0, [fp, #20]
   3d164:	ldr	r7, [sp, #36]	; 0x24
   3d168:	mov	r8, #0
   3d16c:	add	ip, r0, #4
   3d170:	sub	r0, fp, #136	; 0x88
   3d174:	mls	r7, r2, r6, r7
   3d178:	orr	r5, r0, #4
   3d17c:	orr	r0, r1, #4
   3d180:	lsl	r1, r6, #2
   3d184:	str	r7, [sp, #52]	; 0x34
   3d188:	str	r0, [sp, #36]	; 0x24
   3d18c:	mul	r0, r2, r6
   3d190:	str	r0, [sp, #44]	; 0x2c
   3d194:	lsl	r0, r2, #3
   3d198:	str	r0, [sp, #48]	; 0x30
   3d19c:	ldr	r0, [fp, #12]
   3d1a0:	cmp	r2, #1
   3d1a4:	ldr	r0, [r0]
   3d1a8:	blt	3d1e8 <GetDataSlab+0x15824>
   3d1ac:	ldr	r7, [sp, #44]	; 0x2c
   3d1b0:	ldr	lr, [sp, #60]	; 0x3c
   3d1b4:	add	r4, sl, r0, lsl #2
   3d1b8:	add	r3, r7, r3
   3d1bc:	add	r6, sl, r7, lsl #2
   3d1c0:	ldr	r7, [r4], r1
   3d1c4:	subs	r2, r2, #1
   3d1c8:	vmov	s0, r7
   3d1cc:	vcvt.f64.s32	d16, s0
   3d1d0:	vstr	d16, [lr]
   3d1d4:	add	lr, lr, #8
   3d1d8:	bne	3d1c0 <GetDataSlab+0x157fc>
   3d1dc:	add	r2, r3, r0
   3d1e0:	mov	sl, r6
   3d1e4:	b	3d1ec <GetDataSlab+0x15828>
   3d1e8:	add	r2, r0, r3
   3d1ec:	ldr	r3, [sp, #52]	; 0x34
   3d1f0:	sub	lr, fp, #176	; 0xb0
   3d1f4:	sub	r0, r3, r0
   3d1f8:	add	sl, sl, r3, lsl #2
   3d1fc:	add	r3, r2, r0
   3d200:	ldr	r0, [fp, #24]
   3d204:	cmp	r0, #2
   3d208:	blt	3d2b0 <GetDataSlab+0x158ec>
   3d20c:	mov	r2, #0
   3d210:	mov	r0, r2
   3d214:	ldr	r2, [r5, r2, lsl #2]
   3d218:	add	r2, r2, #1
   3d21c:	str	r2, [r5, r0, lsl #2]
   3d220:	ldr	r7, [ip, r0, lsl #2]
   3d224:	sdiv	r6, r2, r7
   3d228:	mls	r2, r6, r7, r2
   3d22c:	cmp	r2, #0
   3d230:	bne	3d2a0 <GetDataSlab+0x158dc>
   3d234:	mov	r2, #0
   3d238:	str	r2, [r5, r0, lsl #2]
   3d23c:	add	r2, lr, r0, lsl #2
   3d240:	ldr	r2, [r2, #4]
   3d244:	sdiv	r7, r3, r2
   3d248:	mls	r7, r7, r2, r3
   3d24c:	cmp	r7, #0
   3d250:	beq	3d26c <GetDataSlab+0x158a8>
   3d254:	ldr	r6, [lr, r0, lsl #2]
   3d258:	ldr	r4, [r9, r0, lsl #2]
   3d25c:	sub	r2, r2, r7
   3d260:	mla	r2, r4, r6, r2
   3d264:	add	r3, r2, r3
   3d268:	b	3d284 <GetDataSlab+0x158c0>
   3d26c:	ldr	r2, [r9, r0, lsl #2]
   3d270:	cmp	r2, #0
   3d274:	beq	3d288 <GetDataSlab+0x158c4>
   3d278:	ldr	r7, [lr, r0, lsl #2]
   3d27c:	mla	r3, r7, r2, r3
   3d280:	mul	r2, r7, r2
   3d284:	add	sl, sl, r2, lsl #2
   3d288:	ldr	r7, [fp, #24]
   3d28c:	add	r2, r0, #1
   3d290:	add	r0, r0, #2
   3d294:	cmp	r0, r7
   3d298:	blt	3d210 <GetDataSlab+0x1584c>
   3d29c:	b	3d2b0 <GetDataSlab+0x158ec>
   3d2a0:	ldr	r2, [sp, #36]	; 0x24
   3d2a4:	ldr	r0, [r2, r0, lsl #2]
   3d2a8:	add	sl, sl, r0, lsl #2
   3d2ac:	add	r3, r0, r3
   3d2b0:	ldr	r0, [sp, #60]	; 0x3c
   3d2b4:	ldr	r2, [sp, #48]	; 0x30
   3d2b8:	ldr	r7, [sp, #56]	; 0x38
   3d2bc:	add	r0, r0, r2
   3d2c0:	ldr	r2, [sp, #40]	; 0x28
   3d2c4:	str	r0, [sp, #60]	; 0x3c
   3d2c8:	mov	r0, #0
   3d2cc:	add	r8, r8, r2
   3d2d0:	cmp	r8, r7
   3d2d4:	blt	3d19c <GetDataSlab+0x157d8>
   3d2d8:	b	47ffc <GetDataSlab+0x20638>
   3d2dc:	ldr	r1, [sp, #56]	; 0x38
   3d2e0:	ldr	r2, [sp, #40]	; 0x28
   3d2e4:	cmp	r1, #1
   3d2e8:	sub	r1, fp, #96	; 0x60
   3d2ec:	blt	47ff8 <GetDataSlab+0x20634>
   3d2f0:	add	r9, r0, #4
   3d2f4:	ldr	r0, [fp, #20]
   3d2f8:	ldr	r7, [sp, #36]	; 0x24
   3d2fc:	mov	r8, #0
   3d300:	add	ip, r0, #4
   3d304:	sub	r0, fp, #136	; 0x88
   3d308:	mls	r7, r2, r6, r7
   3d30c:	orr	r5, r0, #4
   3d310:	orr	r0, r1, #4
   3d314:	lsl	r1, r6, #2
   3d318:	str	r7, [sp, #52]	; 0x34
   3d31c:	str	r0, [sp, #36]	; 0x24
   3d320:	mul	r0, r2, r6
   3d324:	str	r0, [sp, #44]	; 0x2c
   3d328:	lsl	r0, r2, #3
   3d32c:	str	r0, [sp, #48]	; 0x30
   3d330:	ldr	r0, [fp, #12]
   3d334:	cmp	r2, #1
   3d338:	ldr	r0, [r0]
   3d33c:	blt	3d37c <GetDataSlab+0x159b8>
   3d340:	ldr	r7, [sp, #44]	; 0x2c
   3d344:	ldr	lr, [sp, #60]	; 0x3c
   3d348:	add	r4, sl, r0, lsl #2
   3d34c:	add	r3, r7, r3
   3d350:	add	r6, sl, r7, lsl #2
   3d354:	ldr	r7, [r4], r1
   3d358:	subs	r2, r2, #1
   3d35c:	vmov	s0, r7
   3d360:	vcvt.f64.u32	d16, s0
   3d364:	vstr	d16, [lr]
   3d368:	add	lr, lr, #8
   3d36c:	bne	3d354 <GetDataSlab+0x15990>
   3d370:	add	r2, r3, r0
   3d374:	mov	sl, r6
   3d378:	b	3d380 <GetDataSlab+0x159bc>
   3d37c:	add	r2, r0, r3
   3d380:	ldr	r3, [sp, #52]	; 0x34
   3d384:	sub	lr, fp, #176	; 0xb0
   3d388:	sub	r0, r3, r0
   3d38c:	add	sl, sl, r3, lsl #2
   3d390:	add	r3, r2, r0
   3d394:	ldr	r0, [fp, #24]
   3d398:	cmp	r0, #2
   3d39c:	blt	3d444 <GetDataSlab+0x15a80>
   3d3a0:	mov	r2, #0
   3d3a4:	mov	r0, r2
   3d3a8:	ldr	r2, [r5, r2, lsl #2]
   3d3ac:	add	r2, r2, #1
   3d3b0:	str	r2, [r5, r0, lsl #2]
   3d3b4:	ldr	r7, [ip, r0, lsl #2]
   3d3b8:	sdiv	r6, r2, r7
   3d3bc:	mls	r2, r6, r7, r2
   3d3c0:	cmp	r2, #0
   3d3c4:	bne	3d434 <GetDataSlab+0x15a70>
   3d3c8:	mov	r2, #0
   3d3cc:	str	r2, [r5, r0, lsl #2]
   3d3d0:	add	r2, lr, r0, lsl #2
   3d3d4:	ldr	r2, [r2, #4]
   3d3d8:	sdiv	r7, r3, r2
   3d3dc:	mls	r7, r7, r2, r3
   3d3e0:	cmp	r7, #0
   3d3e4:	beq	3d400 <GetDataSlab+0x15a3c>
   3d3e8:	ldr	r6, [lr, r0, lsl #2]
   3d3ec:	ldr	r4, [r9, r0, lsl #2]
   3d3f0:	sub	r2, r2, r7
   3d3f4:	mla	r2, r4, r6, r2
   3d3f8:	add	r3, r2, r3
   3d3fc:	b	3d418 <GetDataSlab+0x15a54>
   3d400:	ldr	r2, [r9, r0, lsl #2]
   3d404:	cmp	r2, #0
   3d408:	beq	3d41c <GetDataSlab+0x15a58>
   3d40c:	ldr	r7, [lr, r0, lsl #2]
   3d410:	mla	r3, r7, r2, r3
   3d414:	mul	r2, r7, r2
   3d418:	add	sl, sl, r2, lsl #2
   3d41c:	ldr	r7, [fp, #24]
   3d420:	add	r2, r0, #1
   3d424:	add	r0, r0, #2
   3d428:	cmp	r0, r7
   3d42c:	blt	3d3a4 <GetDataSlab+0x159e0>
   3d430:	b	3d444 <GetDataSlab+0x15a80>
   3d434:	ldr	r2, [sp, #36]	; 0x24
   3d438:	ldr	r0, [r2, r0, lsl #2]
   3d43c:	add	sl, sl, r0, lsl #2
   3d440:	add	r3, r0, r3
   3d444:	ldr	r0, [sp, #60]	; 0x3c
   3d448:	ldr	r2, [sp, #48]	; 0x30
   3d44c:	ldr	r7, [sp, #56]	; 0x38
   3d450:	add	r0, r0, r2
   3d454:	ldr	r2, [sp, #40]	; 0x28
   3d458:	str	r0, [sp, #60]	; 0x3c
   3d45c:	mov	r0, #0
   3d460:	add	r8, r8, r2
   3d464:	cmp	r8, r7
   3d468:	blt	3d330 <GetDataSlab+0x1596c>
   3d46c:	b	47ffc <GetDataSlab+0x20638>
   3d470:	ldr	r0, [sp, #56]	; 0x38
   3d474:	ldr	ip, [fp, #12]
   3d478:	ldr	r3, [sp, #52]	; 0x34
   3d47c:	cmp	r0, #1
   3d480:	blt	47ff8 <GetDataSlab+0x20634>
   3d484:	ldr	r0, [sp, #36]	; 0x24
   3d488:	ldr	r4, [ip], #4
   3d48c:	add	lr, sl, #4
   3d490:	mov	sl, #0
   3d494:	mls	r0, r3, r1, r0
   3d498:	str	r4, [sp, #48]	; 0x30
   3d49c:	sub	r0, r0, r4
   3d4a0:	str	r0, [sp, #44]	; 0x2c
   3d4a4:	sub	r0, fp, #136	; 0x88
   3d4a8:	orr	r7, r0, #4
   3d4ac:	sub	r0, fp, #96	; 0x60
   3d4b0:	orr	r0, r0, #4
   3d4b4:	str	r0, [sp, #32]
   3d4b8:	mla	r0, r3, r1, r4
   3d4bc:	lsl	r1, r1, #2
   3d4c0:	str	r0, [sp, #36]	; 0x24
   3d4c4:	lsl	r0, r3, #3
   3d4c8:	str	r0, [sp, #40]	; 0x28
   3d4cc:	ldr	r0, [sp, #48]	; 0x30
   3d4d0:	cmp	r3, #1
   3d4d4:	blt	3d508 <GetDataSlab+0x15b44>
   3d4d8:	ldr	r0, [sp, #48]	; 0x30
   3d4dc:	ldr	r3, [sp, #52]	; 0x34
   3d4e0:	ldr	r6, [sp, #60]	; 0x3c
   3d4e4:	add	r0, r9, r0, lsl #2
   3d4e8:	vldr	s0, [r0]
   3d4ec:	add	r0, r0, r1
   3d4f0:	subs	r3, r3, #1
   3d4f4:	vcvt.f64.f32	d16, s0
   3d4f8:	vstr	d16, [r6]
   3d4fc:	add	r6, r6, #8
   3d500:	bne	3d4e8 <GetDataSlab+0x15b24>
   3d504:	ldr	r0, [sp, #36]	; 0x24
   3d508:	ldr	r4, [sp, #44]	; 0x2c
   3d50c:	add	r3, r9, r4, lsl #2
   3d510:	add	r9, r3, r0, lsl #2
   3d514:	add	r0, r0, r2
   3d518:	add	r2, r0, r4
   3d51c:	ldr	r0, [fp, #24]
   3d520:	cmp	r0, #2
   3d524:	blt	3d5d8 <GetDataSlab+0x15c14>
   3d528:	mov	r3, #0
   3d52c:	mov	r0, r3
   3d530:	ldr	r3, [r7, r3, lsl #2]
   3d534:	add	r3, r3, #1
   3d538:	str	r3, [r7, r0, lsl #2]
   3d53c:	ldr	r6, [lr, r0, lsl #2]
   3d540:	sdiv	r8, r3, r6
   3d544:	mls	r3, r8, r6, r3
   3d548:	cmp	r3, #0
   3d54c:	bne	3d5c8 <GetDataSlab+0x15c04>
   3d550:	mov	r3, #0
   3d554:	sub	r5, fp, #176	; 0xb0
   3d558:	mov	r4, ip
   3d55c:	str	r3, [r7, r0, lsl #2]
   3d560:	add	r3, r5, r0, lsl #2
   3d564:	ldr	r3, [r3, #4]
   3d568:	sdiv	r6, r2, r3
   3d56c:	mls	r6, r6, r3, r2
   3d570:	cmp	r6, #0
   3d574:	beq	3d590 <GetDataSlab+0x15bcc>
   3d578:	ldr	r5, [r5, r0, lsl #2]
   3d57c:	ldr	r4, [r4, r0, lsl #2]
   3d580:	sub	r3, r3, r6
   3d584:	mla	r3, r4, r5, r3
   3d588:	add	r2, r3, r2
   3d58c:	b	3d5ac <GetDataSlab+0x15be8>
   3d590:	ldr	r3, [r4, r0, lsl #2]
   3d594:	cmp	r3, #0
   3d598:	beq	3d5b0 <GetDataSlab+0x15bec>
   3d59c:	sub	r4, fp, #176	; 0xb0
   3d5a0:	ldr	r4, [r4, r0, lsl #2]
   3d5a4:	mla	r2, r4, r3, r2
   3d5a8:	mul	r3, r4, r3
   3d5ac:	add	r9, r9, r3, lsl #2
   3d5b0:	ldr	r4, [fp, #24]
   3d5b4:	add	r3, r0, #1
   3d5b8:	add	r0, r0, #2
   3d5bc:	cmp	r0, r4
   3d5c0:	blt	3d52c <GetDataSlab+0x15b68>
   3d5c4:	b	3d5d8 <GetDataSlab+0x15c14>
   3d5c8:	ldr	r3, [sp, #32]
   3d5cc:	ldr	r0, [r3, r0, lsl #2]
   3d5d0:	add	r9, r9, r0, lsl #2
   3d5d4:	add	r2, r0, r2
   3d5d8:	ldr	r0, [sp, #60]	; 0x3c
   3d5dc:	ldr	r3, [sp, #40]	; 0x28
   3d5e0:	ldr	r4, [sp, #56]	; 0x38
   3d5e4:	add	r0, r0, r3
   3d5e8:	ldr	r3, [sp, #52]	; 0x34
   3d5ec:	str	r0, [sp, #60]	; 0x3c
   3d5f0:	mov	r0, #0
   3d5f4:	add	sl, sl, r3
   3d5f8:	cmp	sl, r4
   3d5fc:	blt	3d4cc <GetDataSlab+0x15b08>
   3d600:	b	47ffc <GetDataSlab+0x20638>
   3d604:	ldr	r0, [sp, #56]	; 0x38
   3d608:	ldr	sl, [fp, #12]
   3d60c:	ldr	r3, [sp, #52]	; 0x34
   3d610:	cmp	r0, #1
   3d614:	blt	47ff8 <GetDataSlab+0x20634>
   3d618:	ldr	r0, [sp, #40]	; 0x28
   3d61c:	ldr	r6, [sl], #4
   3d620:	mov	ip, #0
   3d624:	mls	r0, r3, r1, r0
   3d628:	str	r6, [sp, #48]	; 0x30
   3d62c:	sub	r0, r0, r6
   3d630:	str	r0, [sp, #44]	; 0x2c
   3d634:	ldr	r0, [fp, #20]
   3d638:	add	lr, r0, #4
   3d63c:	sub	r0, fp, #136	; 0x88
   3d640:	orr	r7, r0, #4
   3d644:	sub	r0, fp, #96	; 0x60
   3d648:	orr	r0, r0, #4
   3d64c:	str	r0, [sp, #32]
   3d650:	mla	r0, r3, r1, r6
   3d654:	lsl	r1, r1, #3
   3d658:	str	r0, [sp, #36]	; 0x24
   3d65c:	lsl	r0, r3, #3
   3d660:	str	r0, [sp, #40]	; 0x28
   3d664:	ldr	r0, [sp, #48]	; 0x30
   3d668:	cmp	r3, #1
   3d66c:	blt	3d69c <GetDataSlab+0x15cd8>
   3d670:	ldr	r0, [sp, #48]	; 0x30
   3d674:	ldr	r3, [sp, #52]	; 0x34
   3d678:	ldr	r6, [sp, #60]	; 0x3c
   3d67c:	add	r0, r9, r0, lsl #3
   3d680:	vldr	d16, [r0]
   3d684:	add	r0, r0, r1
   3d688:	subs	r3, r3, #1
   3d68c:	vstr	d16, [r6]
   3d690:	add	r6, r6, #8
   3d694:	bne	3d680 <GetDataSlab+0x15cbc>
   3d698:	ldr	r0, [sp, #36]	; 0x24
   3d69c:	ldr	r4, [sp, #44]	; 0x2c
   3d6a0:	add	r3, r9, r4, lsl #3
   3d6a4:	add	r9, r3, r0, lsl #3
   3d6a8:	add	r0, r0, r2
   3d6ac:	add	r2, r0, r4
   3d6b0:	ldr	r0, [fp, #24]
   3d6b4:	cmp	r0, #2
   3d6b8:	blt	3d76c <GetDataSlab+0x15da8>
   3d6bc:	mov	r3, #0
   3d6c0:	mov	r0, r3
   3d6c4:	ldr	r3, [r7, r3, lsl #2]
   3d6c8:	add	r3, r3, #1
   3d6cc:	str	r3, [r7, r0, lsl #2]
   3d6d0:	ldr	r6, [lr, r0, lsl #2]
   3d6d4:	sdiv	r8, r3, r6
   3d6d8:	mls	r3, r8, r6, r3
   3d6dc:	cmp	r3, #0
   3d6e0:	bne	3d75c <GetDataSlab+0x15d98>
   3d6e4:	mov	r3, #0
   3d6e8:	sub	r4, fp, #176	; 0xb0
   3d6ec:	mov	r5, sl
   3d6f0:	str	r3, [r7, r0, lsl #2]
   3d6f4:	add	r3, r4, r0, lsl #2
   3d6f8:	ldr	r3, [r3, #4]
   3d6fc:	sdiv	r6, r2, r3
   3d700:	mls	r6, r6, r3, r2
   3d704:	cmp	r6, #0
   3d708:	beq	3d724 <GetDataSlab+0x15d60>
   3d70c:	ldr	r4, [r4, r0, lsl #2]
   3d710:	ldr	r5, [r5, r0, lsl #2]
   3d714:	sub	r3, r3, r6
   3d718:	mla	r3, r5, r4, r3
   3d71c:	add	r2, r3, r2
   3d720:	b	3d740 <GetDataSlab+0x15d7c>
   3d724:	ldr	r3, [r5, r0, lsl #2]
   3d728:	cmp	r3, #0
   3d72c:	beq	3d744 <GetDataSlab+0x15d80>
   3d730:	sub	r4, fp, #176	; 0xb0
   3d734:	ldr	r4, [r4, r0, lsl #2]
   3d738:	mla	r2, r4, r3, r2
   3d73c:	mul	r3, r4, r3
   3d740:	add	r9, r9, r3, lsl #3
   3d744:	ldr	r4, [fp, #24]
   3d748:	add	r3, r0, #1
   3d74c:	add	r0, r0, #2
   3d750:	cmp	r0, r4
   3d754:	blt	3d6c0 <GetDataSlab+0x15cfc>
   3d758:	b	3d76c <GetDataSlab+0x15da8>
   3d75c:	ldr	r3, [sp, #32]
   3d760:	ldr	r0, [r3, r0, lsl #2]
   3d764:	add	r9, r9, r0, lsl #3
   3d768:	add	r2, r0, r2
   3d76c:	ldr	r0, [sp, #60]	; 0x3c
   3d770:	ldr	r3, [sp, #40]	; 0x28
   3d774:	ldr	r4, [sp, #56]	; 0x38
   3d778:	add	r0, r0, r3
   3d77c:	ldr	r3, [sp, #52]	; 0x34
   3d780:	str	r0, [sp, #60]	; 0x3c
   3d784:	mov	r0, #0
   3d788:	add	ip, ip, r3
   3d78c:	cmp	ip, r4
   3d790:	blt	3d664 <GetDataSlab+0x15ca0>
   3d794:	b	47ffc <GetDataSlab+0x20638>
   3d798:	ldr	r0, [sp, #52]	; 0x34
   3d79c:	ldr	r2, [fp, #20]
   3d7a0:	ldr	r6, [sp, #40]	; 0x28
   3d7a4:	ldr	r9, [sp, #24]
   3d7a8:	cmp	r0, #1
   3d7ac:	blt	3d968 <GetDataSlab+0x15fa4>
   3d7b0:	ldr	r1, [fp, #12]
   3d7b4:	ldr	r0, [sp, #32]
   3d7b8:	lsl	r8, r3, #3
   3d7bc:	str	ip, [sp, #36]	; 0x24
   3d7c0:	mov	sl, r1
   3d7c4:	mls	r0, r9, r3, r0
   3d7c8:	ldr	r1, [sl], #4
   3d7cc:	sub	r0, r0, r1
   3d7d0:	str	r1, [sp, #28]
   3d7d4:	str	r0, [sp, #20]
   3d7d8:	add	r0, r2, #4
   3d7dc:	str	r0, [sp, #56]	; 0x38
   3d7e0:	sub	r0, fp, #136	; 0x88
   3d7e4:	orr	r6, r0, #4
   3d7e8:	sub	r0, fp, #96	; 0x60
   3d7ec:	orr	r0, r0, #4
   3d7f0:	str	r0, [sp, #8]
   3d7f4:	mla	r0, r9, r3, r1
   3d7f8:	mov	r1, #0
   3d7fc:	str	r0, [sp, #12]
   3d800:	lsl	r0, r9, #3
   3d804:	str	r0, [sp, #16]
   3d808:	ldr	r0, [sp, #28]
   3d80c:	cmp	r9, #1
   3d810:	str	r1, [sp, #32]
   3d814:	blt	3d85c <GetDataSlab+0x15e98>
   3d818:	ldr	r0, [sp, #28]
   3d81c:	mov	r7, sl
   3d820:	ldr	sl, [sp, #36]	; 0x24
   3d824:	str	r5, [sp, #44]	; 0x2c
   3d828:	add	r5, r5, r0, lsl #3
   3d82c:	ldrd	r0, [r5]
   3d830:	bl	582ac <__aeabi_l2d>
   3d834:	strd	r0, [sl]
   3d838:	add	r5, r5, r8
   3d83c:	subs	r9, r9, #1
   3d840:	add	sl, sl, #8
   3d844:	bne	3d82c <GetDataSlab+0x15e68>
   3d848:	ldr	r0, [sp, #12]
   3d84c:	ldr	r9, [sp, #24]
   3d850:	ldr	r5, [sp, #44]	; 0x2c
   3d854:	sub	lr, fp, #176	; 0xb0
   3d858:	mov	sl, r7
   3d85c:	ldr	r2, [sp, #20]
   3d860:	add	r1, r5, r2, lsl #3
   3d864:	add	r5, r1, r0, lsl #3
   3d868:	add	r0, r0, r4
   3d86c:	add	r4, r0, r2
   3d870:	ldr	r0, [fp, #24]
   3d874:	cmp	r0, #2
   3d878:	blt	3d920 <GetDataSlab+0x15f5c>
   3d87c:	ldr	ip, [sp, #40]	; 0x28
   3d880:	mov	r1, #0
   3d884:	mov	r0, r1
   3d888:	ldr	r1, [r6, r1, lsl #2]
   3d88c:	ldr	r2, [sp, #56]	; 0x38
   3d890:	add	r1, r1, #1
   3d894:	str	r1, [r6, r0, lsl #2]
   3d898:	ldr	r2, [r2, r0, lsl #2]
   3d89c:	sdiv	r3, r1, r2
   3d8a0:	mls	r1, r3, r2, r1
   3d8a4:	cmp	r1, #0
   3d8a8:	bne	3d928 <GetDataSlab+0x15f64>
   3d8ac:	mov	r1, #0
   3d8b0:	str	r1, [r6, r0, lsl #2]
   3d8b4:	add	r1, lr, r0, lsl #2
   3d8b8:	ldr	r1, [r1, #4]
   3d8bc:	sdiv	r2, r4, r1
   3d8c0:	mls	r2, r2, r1, r4
   3d8c4:	cmp	r2, #0
   3d8c8:	beq	3d8f0 <GetDataSlab+0x15f2c>
   3d8cc:	mov	r7, r5
   3d8d0:	ldr	r3, [lr, r0, lsl #2]
   3d8d4:	ldr	r5, [sl, r0, lsl #2]
   3d8d8:	sub	r1, r1, r2
   3d8dc:	mla	r1, r5, r3, r1
   3d8e0:	mov	r5, r7
   3d8e4:	add	r4, r1, r4
   3d8e8:	add	r5, r7, r1, lsl #3
   3d8ec:	b	3d908 <GetDataSlab+0x15f44>
   3d8f0:	ldr	r1, [sl, r0, lsl #2]
   3d8f4:	cmp	r1, #0
   3d8f8:	ldrne	r2, [lr, r0, lsl #2]
   3d8fc:	mlane	r4, r2, r1, r4
   3d900:	mulne	r1, r2, r1
   3d904:	addne	r5, r5, r1, lsl #3
   3d908:	ldr	r2, [fp, #24]
   3d90c:	add	r1, r0, #1
   3d910:	add	r0, r0, #2
   3d914:	cmp	r0, r2
   3d918:	blt	3d884 <GetDataSlab+0x15ec0>
   3d91c:	b	3d938 <GetDataSlab+0x15f74>
   3d920:	ldr	ip, [sp, #40]	; 0x28
   3d924:	b	3d938 <GetDataSlab+0x15f74>
   3d928:	ldr	r1, [sp, #8]
   3d92c:	ldr	r0, [r1, r0, lsl #2]
   3d930:	add	r5, r5, r0, lsl #3
   3d934:	add	r4, r0, r4
   3d938:	ldr	r0, [sp, #16]
   3d93c:	ldr	r1, [sp, #36]	; 0x24
   3d940:	add	r1, r1, r0
   3d944:	ldr	r0, [sp, #52]	; 0x34
   3d948:	str	r1, [sp, #36]	; 0x24
   3d94c:	ldr	r1, [sp, #32]
   3d950:	add	r1, r1, r9
   3d954:	cmp	r1, r0
   3d958:	blt	3d808 <GetDataSlab+0x15e44>
   3d95c:	mov	r0, #0
   3d960:	mov	r6, ip
   3d964:	b	3d96c <GetDataSlab+0x15fa8>
   3d968:	mov	r0, #0
   3d96c:	ldr	r2, [fp, #16]
   3d970:	cmp	r6, #13
   3d974:	bne	47ffc <GetDataSlab+0x20638>
   3d978:	ldr	r0, [r2]
   3d97c:	mov	r4, #0
   3d980:	sub	r3, fp, #176	; 0xb0
   3d984:	sub	r6, fp, #96	; 0x60
   3d988:	str	r0, [sp, #16]
   3d98c:	sub	r0, r0, #1
   3d990:	str	r0, [fp, #-96]	; 0xffffffa0
   3d994:	ldr	r0, [fp, #8]
   3d998:	ldr	r0, [r0]
   3d99c:	str	r0, [sp, #36]	; 0x24
   3d9a0:	str	r0, [fp, #-176]	; 0xffffff50
   3d9a4:	ldr	r0, [fp, #20]
   3d9a8:	ldr	r1, [r0]
   3d9ac:	ldr	r0, [fp, #24]
   3d9b0:	cmp	r0, #2
   3d9b4:	str	r1, [sp, #40]	; 0x28
   3d9b8:	str	r1, [sp, #44]	; 0x2c
   3d9bc:	blt	3db04 <GetDataSlab+0x16140>
   3d9c0:	ldr	r0, [fp, #8]
   3d9c4:	ldr	r5, [sp, #40]	; 0x28
   3d9c8:	mov	r7, #1
   3d9cc:	mov	r8, #0
   3d9d0:	mvn	lr, #15
   3d9d4:	mov	r4, #0
   3d9d8:	sub	r1, r0, #4
   3d9dc:	sub	sl, r0, #12
   3d9e0:	ldr	r0, [sp, #36]	; 0x24
   3d9e4:	str	r5, [sp, #44]	; 0x2c
   3d9e8:	mov	r9, r0
   3d9ec:	ldr	r2, [r2, r7, lsl #2]
   3d9f0:	str	r0, [r3, r7, lsl #2]
   3d9f4:	add	r8, r8, #1
   3d9f8:	cmp	r8, #4
   3d9fc:	sub	r5, r2, #1
   3da00:	ldr	r2, [fp, #8]
   3da04:	str	r5, [r6, r7, lsl #2]
   3da08:	ldr	r2, [r2, r7, lsl #2]
   3da0c:	str	r2, [sp, #56]	; 0x38
   3da10:	bcs	3da1c <GetDataSlab+0x16058>
   3da14:	mov	r3, r7
   3da18:	b	3daa0 <GetDataSlab+0x160dc>
   3da1c:	vmov.i32	q9, #1	; 0x00000001
   3da20:	vmov.i32	q10, #1	; 0x00000001
   3da24:	vmov.i32	q8, #1	; 0x00000001
   3da28:	vmov.32	d23[1], r2
   3da2c:	bic	r2, r8, #3
   3da30:	bic	ip, r7, #3
   3da34:	vmov.32	d18[0], r0
   3da38:	vmov.32	d20[0], r5
   3da3c:	sub	r3, r7, r2
   3da40:	mov	r0, sl
   3da44:	vorr	d16, d18, d18
   3da48:	vmov.i32	q9, #1	; 0x00000001
   3da4c:	vorr	d18, d20, d20
   3da50:	vld1.32	{d20-d21}, [r0], lr
   3da54:	subs	ip, ip, #4
   3da58:	vrev64.32	q12, q10
   3da5c:	vext.8	q12, q12, q12, #8
   3da60:	vext.8	q11, q11, q12, #12
   3da64:	vmul.i32	q9, q9, q12
   3da68:	vmul.i32	q8, q11, q8
   3da6c:	vorr	q11, q12, q12
   3da70:	bne	3da50 <GetDataSlab+0x1608c>
   3da74:	vext.8	q11, q9, q8, #8
   3da78:	vext.8	q12, q8, q8, #8
   3da7c:	cmp	r8, r2
   3da80:	vmul.i32	q0, q9, q11
   3da84:	vmul.i32	q1, q8, q12
   3da88:	vmul.i32	q8, q0, d0[1]
   3da8c:	vmul.i32	q9, q1, d2[1]
   3da90:	vmov.32	r5, d16[0]
   3da94:	vmov.32	r0, d18[0]
   3da98:	beq	3dab4 <GetDataSlab+0x160f0>
   3da9c:	vmov.32	r2, d20[0]
   3daa0:	mul	r0, r2, r0
   3daa4:	ldr	r2, [r1, r3, lsl #2]
   3daa8:	subs	r3, r3, #1
   3daac:	mul	r5, r5, r2
   3dab0:	bne	3daa0 <GetDataSlab+0x160dc>
   3dab4:	ldr	r2, [fp, #12]
   3dab8:	sub	r3, fp, #176	; 0xb0
   3dabc:	sub	r6, fp, #96	; 0x60
   3dac0:	add	sl, sl, #4
   3dac4:	str	r5, [r6, r7, lsl #2]
   3dac8:	str	r0, [r3, r7, lsl #2]
   3dacc:	ldr	r5, [sp, #44]	; 0x2c
   3dad0:	ldr	r2, [r2, r7, lsl #2]
   3dad4:	mla	r4, r2, r9, r4
   3dad8:	ldr	r2, [fp, #20]
   3dadc:	mov	r9, r0
   3dae0:	ldr	r0, [sp, #56]	; 0x38
   3dae4:	ldr	r2, [r2, r7, lsl #2]
   3dae8:	add	r7, r7, #1
   3daec:	mul	r5, r2, r5
   3daf0:	ldr	r2, [fp, #24]
   3daf4:	str	r5, [sp, #44]	; 0x2c
   3daf8:	cmp	r7, r2
   3dafc:	ldr	r2, [fp, #16]
   3db00:	bne	3d9ec <GetDataSlab+0x16028>
   3db04:	ldr	r0, [sp, #48]	; 0x30
   3db08:	ldr	r3, [sp, #16]
   3db0c:	add	sl, r0, r4, lsl #3
   3db10:	cmp	r3, #1
   3db14:	bne	46c30 <GetDataSlab+0x1f26c>
   3db18:	ldr	r0, [sp, #44]	; 0x2c
   3db1c:	ldr	ip, [sp, #40]	; 0x28
   3db20:	sub	r2, fp, #96	; 0x60
   3db24:	cmp	r0, #1
   3db28:	ldr	r0, [fp, #12]
   3db2c:	blt	47ff8 <GetDataSlab+0x20634>
   3db30:	ldr	r1, [fp, #20]
   3db34:	add	r1, r1, #4
   3db38:	str	r1, [sp, #24]
   3db3c:	sub	r1, fp, #136	; 0x88
   3db40:	orr	r6, r1, #4
   3db44:	orr	r1, r2, #4
   3db48:	str	r1, [sp, #20]
   3db4c:	lsl	r1, ip, #3
   3db50:	str	r1, [sp, #48]	; 0x30
   3db54:	bic	r1, ip, #1
   3db58:	str	r1, [sp, #28]
   3db5c:	ldr	r1, [r0], #4
   3db60:	str	r0, [sp, #56]	; 0x38
   3db64:	mov	r0, #0
   3db68:	str	r1, [sp, #32]
   3db6c:	str	r0, [sp, #52]	; 0x34
   3db70:	ldr	r8, [sp, #60]	; 0x3c
   3db74:	cmp	ip, #1
   3db78:	blt	3dc18 <GetDataSlab+0x16254>
   3db7c:	ldr	r0, [sp, #32]
   3db80:	add	r9, sl, r0, lsl #3
   3db84:	mov	r0, #0
   3db88:	beq	3dbe4 <GetDataSlab+0x16220>
   3db8c:	ldr	r5, [sp, #28]
   3db90:	mov	r7, r9
   3db94:	vld1.64	{d8-d9}, [r7]!
   3db98:	vmov.32	r0, d9[0]
   3db9c:	vmov.32	r1, d9[1]
   3dba0:	bl	58298 <__aeabi_ul2d>
   3dba4:	vmov.32	r2, d8[0]
   3dba8:	vmov.32	r3, d8[1]
   3dbac:	vmov	d9, r0, r1
   3dbb0:	mov	r0, r2
   3dbb4:	mov	r1, r3
   3dbb8:	bl	58298 <__aeabi_ul2d>
   3dbbc:	vmov	d8, r0, r1
   3dbc0:	subs	r5, r5, #2
   3dbc4:	vst1.64	{d8-d9}, [r8]!
   3dbc8:	bne	3db94 <GetDataSlab+0x161d0>
   3dbcc:	ldr	r0, [sp, #40]	; 0x28
   3dbd0:	ldr	r1, [sp, #28]
   3dbd4:	ldr	r8, [sp, #60]	; 0x3c
   3dbd8:	cmp	r0, r1
   3dbdc:	mov	r0, r1
   3dbe0:	beq	3dc18 <GetDataSlab+0x16254>
   3dbe4:	ldr	r1, [sp, #40]	; 0x28
   3dbe8:	lsl	r7, r0, #3
   3dbec:	sub	r5, r1, r0
   3dbf0:	mov	r1, r9
   3dbf4:	ldr	r0, [r1, r7]!
   3dbf8:	ldr	r1, [r1, #4]
   3dbfc:	bl	58298 <__aeabi_ul2d>
   3dc00:	mov	r2, r8
   3dc04:	subs	r5, r5, #1
   3dc08:	str	r0, [r2, r7]!
   3dc0c:	add	r7, r7, #8
   3dc10:	str	r1, [r2, #4]
   3dc14:	bne	3dbf0 <GetDataSlab+0x1622c>
   3dc18:	ldr	r0, [sp, #36]	; 0x24
   3dc1c:	sub	r5, fp, #176	; 0xb0
   3dc20:	add	sl, sl, r0, lsl #3
   3dc24:	add	r4, r4, r0
   3dc28:	ldr	r0, [fp, #24]
   3dc2c:	cmp	r0, #2
   3dc30:	blt	3dcdc <GetDataSlab+0x16318>
   3dc34:	mov	lr, r5
   3dc38:	ldr	ip, [sp, #40]	; 0x28
   3dc3c:	ldr	r5, [sp, #24]
   3dc40:	mov	r1, #0
   3dc44:	mov	r9, #0
   3dc48:	mov	r0, r1
   3dc4c:	ldr	r1, [r6, r1, lsl #2]
   3dc50:	add	r1, r1, #1
   3dc54:	str	r1, [r6, r0, lsl #2]
   3dc58:	ldr	r2, [r5, r0, lsl #2]
   3dc5c:	sdiv	r3, r1, r2
   3dc60:	mls	r1, r3, r2, r1
   3dc64:	cmp	r1, #0
   3dc68:	bne	3dce4 <GetDataSlab+0x16320>
   3dc6c:	add	r1, lr, r0, lsl #2
   3dc70:	str	r9, [r6, r0, lsl #2]
   3dc74:	ldr	r1, [r1, #4]
   3dc78:	sdiv	r2, r4, r1
   3dc7c:	mls	r2, r2, r1, r4
   3dc80:	cmp	r2, #0
   3dc84:	beq	3dca4 <GetDataSlab+0x162e0>
   3dc88:	ldr	r7, [sp, #56]	; 0x38
   3dc8c:	ldr	r3, [lr, r0, lsl #2]
   3dc90:	sub	r1, r1, r2
   3dc94:	ldr	r7, [r7, r0, lsl #2]
   3dc98:	mla	r1, r7, r3, r1
   3dc9c:	add	r4, r1, r4
   3dca0:	b	3dcc0 <GetDataSlab+0x162fc>
   3dca4:	ldr	r1, [sp, #56]	; 0x38
   3dca8:	ldr	r1, [r1, r0, lsl #2]
   3dcac:	cmp	r1, #0
   3dcb0:	beq	3dcc4 <GetDataSlab+0x16300>
   3dcb4:	ldr	r2, [lr, r0, lsl #2]
   3dcb8:	mla	r4, r2, r1, r4
   3dcbc:	mul	r1, r2, r1
   3dcc0:	add	sl, sl, r1, lsl #3
   3dcc4:	ldr	r2, [fp, #24]
   3dcc8:	add	r1, r0, #1
   3dccc:	add	r0, r0, #2
   3dcd0:	cmp	r0, r2
   3dcd4:	blt	3dc48 <GetDataSlab+0x16284>
   3dcd8:	b	3dcf4 <GetDataSlab+0x16330>
   3dcdc:	ldr	ip, [sp, #40]	; 0x28
   3dce0:	b	3dcf4 <GetDataSlab+0x16330>
   3dce4:	ldr	r1, [sp, #20]
   3dce8:	ldr	r0, [r1, r0, lsl #2]
   3dcec:	add	sl, sl, r0, lsl #3
   3dcf0:	add	r4, r0, r4
   3dcf4:	ldr	r2, [sp, #52]	; 0x34
   3dcf8:	ldr	r0, [sp, #48]	; 0x30
   3dcfc:	ldr	r1, [sp, #44]	; 0x2c
   3dd00:	add	r2, r2, ip
   3dd04:	add	r8, r8, r0
   3dd08:	mov	r0, #0
   3dd0c:	cmp	r2, r1
   3dd10:	str	r8, [sp, #60]	; 0x3c
   3dd14:	str	r2, [sp, #52]	; 0x34
   3dd18:	blt	3db70 <GetDataSlab+0x161ac>
   3dd1c:	b	47ffc <GetDataSlab+0x20638>
   3dd20:	ldr	r0, [sp, #52]	; 0x34
   3dd24:	ldr	lr, [sp, #40]	; 0x28
   3dd28:	sub	r2, fp, #96	; 0x60
   3dd2c:	cmp	r0, #1
   3dd30:	ldr	r0, [fp, #12]
   3dd34:	blt	47ff8 <GetDataSlab+0x20634>
   3dd38:	ldr	r1, [sp, #32]
   3dd3c:	add	r0, r0, #4
   3dd40:	str	r0, [sp, #56]	; 0x38
   3dd44:	ldr	r0, [fp, #20]
   3dd48:	mls	r1, lr, sl, r1
   3dd4c:	str	r1, [sp, #44]	; 0x2c
   3dd50:	mul	r1, lr, sl
   3dd54:	add	r9, r0, #4
   3dd58:	sub	r0, fp, #136	; 0x88
   3dd5c:	str	r1, [sp, #32]
   3dd60:	orr	r1, r0, #4
   3dd64:	orr	r0, r2, #4
   3dd68:	str	r0, [sp, #28]
   3dd6c:	lsl	r0, lr, #2
   3dd70:	str	r0, [sp, #36]	; 0x24
   3dd74:	mov	r0, #0
   3dd78:	str	r0, [sp, #48]	; 0x30
   3dd7c:	ldr	r0, [fp, #12]
   3dd80:	cmp	lr, #1
   3dd84:	ldr	r0, [r0]
   3dd88:	blt	3ddcc <GetDataSlab+0x16408>
   3dd8c:	ldr	r2, [sp, #32]
   3dd90:	ldr	ip, [sp, #60]	; 0x3c
   3dd94:	add	r4, r8, r0
   3dd98:	mov	r5, lr
   3dd9c:	add	r3, r2, r3
   3dda0:	add	r2, r8, r2
   3dda4:	ldrb	lr, [r4], sl
   3dda8:	subs	r5, r5, #1
   3ddac:	vmov	s0, lr
   3ddb0:	vcvt.f32.u32	s0, s0
   3ddb4:	vstr	s0, [ip]
   3ddb8:	add	ip, ip, #4
   3ddbc:	bne	3dda4 <GetDataSlab+0x163e0>
   3ddc0:	add	r3, r3, r0
   3ddc4:	mov	r8, r2
   3ddc8:	b	3ddd0 <GetDataSlab+0x1640c>
   3ddcc:	add	r3, r0, r3
   3ddd0:	ldr	r2, [sp, #44]	; 0x2c
   3ddd4:	ldr	ip, [sp, #60]	; 0x3c
   3ddd8:	sub	r5, fp, #176	; 0xb0
   3dddc:	sub	r0, r2, r0
   3dde0:	add	r8, r8, r2
   3dde4:	add	r3, r3, r0
   3dde8:	ldr	r0, [fp, #24]
   3ddec:	cmp	r0, #2
   3ddf0:	blt	3de90 <GetDataSlab+0x164cc>
   3ddf4:	ldr	lr, [sp, #40]	; 0x28
   3ddf8:	mov	r2, #0
   3ddfc:	mov	r0, r2
   3de00:	ldr	r2, [r1, r2, lsl #2]
   3de04:	add	r2, r2, #1
   3de08:	str	r2, [r1, r0, lsl #2]
   3de0c:	ldr	r4, [r9, r0, lsl #2]
   3de10:	sdiv	r6, r2, r4
   3de14:	mls	r2, r6, r4, r2
   3de18:	cmp	r2, #0
   3de1c:	bne	3de98 <GetDataSlab+0x164d4>
   3de20:	mov	r2, #0
   3de24:	str	r2, [r1, r0, lsl #2]
   3de28:	add	r2, r5, r0, lsl #2
   3de2c:	ldr	r2, [r2, #4]
   3de30:	sdiv	r6, r3, r2
   3de34:	mls	r4, r6, r2, r3
   3de38:	cmp	r4, #0
   3de3c:	beq	3de60 <GetDataSlab+0x1649c>
   3de40:	ldr	r7, [sp, #56]	; 0x38
   3de44:	ldr	r6, [r5, r0, lsl #2]
   3de48:	sub	r2, r2, r4
   3de4c:	ldr	r7, [r7, r0, lsl #2]
   3de50:	mla	r2, r7, r6, r2
   3de54:	add	r3, r2, r3
   3de58:	add	r8, r8, r2
   3de5c:	b	3de78 <GetDataSlab+0x164b4>
   3de60:	ldr	r2, [sp, #56]	; 0x38
   3de64:	ldr	r2, [r2, r0, lsl #2]
   3de68:	cmp	r2, #0
   3de6c:	ldrne	r7, [r5, r0, lsl #2]
   3de70:	mlane	r3, r7, r2, r3
   3de74:	mlane	r8, r7, r2, r8
   3de78:	ldr	r7, [fp, #24]
   3de7c:	add	r2, r0, #1
   3de80:	add	r0, r0, #2
   3de84:	cmp	r0, r7
   3de88:	blt	3ddfc <GetDataSlab+0x16438>
   3de8c:	b	3dea8 <GetDataSlab+0x164e4>
   3de90:	ldr	lr, [sp, #40]	; 0x28
   3de94:	b	3dea8 <GetDataSlab+0x164e4>
   3de98:	ldr	r2, [sp, #28]
   3de9c:	ldr	r0, [r2, r0, lsl #2]
   3dea0:	add	r8, r8, r0
   3dea4:	add	r3, r0, r3
   3dea8:	ldr	r7, [sp, #48]	; 0x30
   3deac:	ldr	r0, [sp, #36]	; 0x24
   3deb0:	ldr	r2, [sp, #52]	; 0x34
   3deb4:	add	r7, r7, lr
   3deb8:	add	ip, ip, r0
   3debc:	mov	r0, #0
   3dec0:	cmp	r7, r2
   3dec4:	str	ip, [sp, #60]	; 0x3c
   3dec8:	str	r7, [sp, #48]	; 0x30
   3decc:	blt	3dd7c <GetDataSlab+0x163b8>
   3ded0:	b	47ffc <GetDataSlab+0x20638>
   3ded4:	ldr	r0, [sp, #52]	; 0x34
   3ded8:	ldr	r1, [fp, #12]
   3dedc:	ldr	r3, [sp, #44]	; 0x2c
   3dee0:	cmp	r0, #1
   3dee4:	blt	47ff8 <GetDataSlab+0x20634>
   3dee8:	ldr	r0, [sp, #36]	; 0x24
   3deec:	ldr	r5, [r1], #4
   3def0:	add	lr, sl, #4
   3def4:	mov	ip, #0
   3def8:	mov	sl, #0
   3defc:	mls	r0, r3, r6, r0
   3df00:	str	r1, [sp, #56]	; 0x38
   3df04:	lsl	r1, r6, #1
   3df08:	str	r5, [sp, #48]	; 0x30
   3df0c:	sub	r0, r0, r5
   3df10:	str	r0, [sp, #40]	; 0x28
   3df14:	sub	r0, fp, #136	; 0x88
   3df18:	orr	r7, r0, #4
   3df1c:	sub	r0, fp, #96	; 0x60
   3df20:	orr	r0, r0, #4
   3df24:	str	r0, [sp, #28]
   3df28:	mla	r0, r3, r6, r5
   3df2c:	str	r0, [sp, #32]
   3df30:	lsl	r0, r3, #2
   3df34:	str	r0, [sp, #36]	; 0x24
   3df38:	ldr	r0, [sp, #48]	; 0x30
   3df3c:	cmp	r3, #1
   3df40:	blt	3df74 <GetDataSlab+0x165b0>
   3df44:	ldr	r0, [sp, #48]	; 0x30
   3df48:	ldr	r3, [sp, #44]	; 0x2c
   3df4c:	ldr	r6, [sp, #60]	; 0x3c
   3df50:	add	r0, r9, r0, lsl #1
   3df54:	ldrsh	r8, [r0], r1
   3df58:	subs	r3, r3, #1
   3df5c:	vmov	s0, r8
   3df60:	vcvt.f32.s32	s0, s0
   3df64:	vstr	s0, [r6]
   3df68:	add	r6, r6, #4
   3df6c:	bne	3df54 <GetDataSlab+0x16590>
   3df70:	ldr	r0, [sp, #32]
   3df74:	ldr	r4, [sp, #40]	; 0x28
   3df78:	add	r3, r9, r4, lsl #1
   3df7c:	add	r9, r3, r0, lsl #1
   3df80:	add	r0, r0, r2
   3df84:	add	r2, r0, r4
   3df88:	ldr	r0, [fp, #24]
   3df8c:	cmp	r0, #2
   3df90:	blt	3e040 <GetDataSlab+0x1667c>
   3df94:	ldr	r8, [sp, #56]	; 0x38
   3df98:	mov	r3, #0
   3df9c:	mov	r0, r3
   3dfa0:	ldr	r3, [r7, r3, lsl #2]
   3dfa4:	add	r3, r3, #1
   3dfa8:	str	r3, [r7, r0, lsl #2]
   3dfac:	ldr	r6, [lr, r0, lsl #2]
   3dfb0:	sdiv	r5, r3, r6
   3dfb4:	mls	r3, r5, r6, r3
   3dfb8:	cmp	r3, #0
   3dfbc:	bne	3e030 <GetDataSlab+0x1666c>
   3dfc0:	sub	r4, fp, #176	; 0xb0
   3dfc4:	str	ip, [r7, r0, lsl #2]
   3dfc8:	add	r3, r4, r0, lsl #2
   3dfcc:	ldr	r3, [r3, #4]
   3dfd0:	sdiv	r5, r2, r3
   3dfd4:	mls	r6, r5, r3, r2
   3dfd8:	cmp	r6, #0
   3dfdc:	beq	3dff8 <GetDataSlab+0x16634>
   3dfe0:	ldr	r5, [r4, r0, lsl #2]
   3dfe4:	ldr	r4, [r8, r0, lsl #2]
   3dfe8:	sub	r3, r3, r6
   3dfec:	mla	r3, r4, r5, r3
   3dff0:	add	r2, r3, r2
   3dff4:	b	3e014 <GetDataSlab+0x16650>
   3dff8:	ldr	r3, [r8, r0, lsl #2]
   3dffc:	cmp	r3, #0
   3e000:	beq	3e018 <GetDataSlab+0x16654>
   3e004:	sub	r4, fp, #176	; 0xb0
   3e008:	ldr	r4, [r4, r0, lsl #2]
   3e00c:	mla	r2, r4, r3, r2
   3e010:	mul	r3, r4, r3
   3e014:	add	r9, r9, r3, lsl #1
   3e018:	ldr	r4, [fp, #24]
   3e01c:	add	r3, r0, #1
   3e020:	add	r0, r0, #2
   3e024:	cmp	r0, r4
   3e028:	blt	3df9c <GetDataSlab+0x165d8>
   3e02c:	b	3e040 <GetDataSlab+0x1667c>
   3e030:	ldr	r3, [sp, #28]
   3e034:	ldr	r0, [r3, r0, lsl #2]
   3e038:	add	r9, r9, r0, lsl #1
   3e03c:	add	r2, r0, r2
   3e040:	ldr	r0, [sp, #60]	; 0x3c
   3e044:	ldr	r3, [sp, #36]	; 0x24
   3e048:	ldr	r4, [sp, #52]	; 0x34
   3e04c:	add	r0, r0, r3
   3e050:	ldr	r3, [sp, #44]	; 0x2c
   3e054:	str	r0, [sp, #60]	; 0x3c
   3e058:	mov	r0, #0
   3e05c:	add	sl, sl, r3
   3e060:	cmp	sl, r4
   3e064:	blt	3df38 <GetDataSlab+0x16574>
   3e068:	b	47ffc <GetDataSlab+0x20638>
   3e06c:	ldr	r0, [sp, #52]	; 0x34
   3e070:	ldr	r1, [fp, #12]
   3e074:	ldr	r3, [sp, #44]	; 0x2c
   3e078:	cmp	r0, #1
   3e07c:	blt	47ff8 <GetDataSlab+0x20634>
   3e080:	ldr	r0, [sp, #36]	; 0x24
   3e084:	ldr	r5, [r1], #4
   3e088:	add	lr, sl, #4
   3e08c:	mov	ip, #0
   3e090:	mov	sl, #0
   3e094:	mls	r0, r3, r6, r0
   3e098:	str	r1, [sp, #56]	; 0x38
   3e09c:	lsl	r1, r6, #1
   3e0a0:	str	r5, [sp, #48]	; 0x30
   3e0a4:	sub	r0, r0, r5
   3e0a8:	str	r0, [sp, #40]	; 0x28
   3e0ac:	sub	r0, fp, #136	; 0x88
   3e0b0:	orr	r7, r0, #4
   3e0b4:	sub	r0, fp, #96	; 0x60
   3e0b8:	orr	r0, r0, #4
   3e0bc:	str	r0, [sp, #28]
   3e0c0:	mla	r0, r3, r6, r5
   3e0c4:	str	r0, [sp, #32]
   3e0c8:	lsl	r0, r3, #2
   3e0cc:	str	r0, [sp, #36]	; 0x24
   3e0d0:	ldr	r0, [sp, #48]	; 0x30
   3e0d4:	cmp	r3, #1
   3e0d8:	blt	3e10c <GetDataSlab+0x16748>
   3e0dc:	ldr	r0, [sp, #48]	; 0x30
   3e0e0:	ldr	r3, [sp, #44]	; 0x2c
   3e0e4:	ldr	r6, [sp, #60]	; 0x3c
   3e0e8:	add	r0, r9, r0, lsl #1
   3e0ec:	ldrh	r8, [r0], r1
   3e0f0:	subs	r3, r3, #1
   3e0f4:	vmov	s0, r8
   3e0f8:	vcvt.f32.u32	s0, s0
   3e0fc:	vstr	s0, [r6]
   3e100:	add	r6, r6, #4
   3e104:	bne	3e0ec <GetDataSlab+0x16728>
   3e108:	ldr	r0, [sp, #32]
   3e10c:	ldr	r4, [sp, #40]	; 0x28
   3e110:	add	r3, r9, r4, lsl #1
   3e114:	add	r9, r3, r0, lsl #1
   3e118:	add	r0, r0, r2
   3e11c:	add	r2, r0, r4
   3e120:	ldr	r0, [fp, #24]
   3e124:	cmp	r0, #2
   3e128:	blt	3e1d8 <GetDataSlab+0x16814>
   3e12c:	ldr	r8, [sp, #56]	; 0x38
   3e130:	mov	r3, #0
   3e134:	mov	r0, r3
   3e138:	ldr	r3, [r7, r3, lsl #2]
   3e13c:	add	r3, r3, #1
   3e140:	str	r3, [r7, r0, lsl #2]
   3e144:	ldr	r6, [lr, r0, lsl #2]
   3e148:	sdiv	r5, r3, r6
   3e14c:	mls	r3, r5, r6, r3
   3e150:	cmp	r3, #0
   3e154:	bne	3e1c8 <GetDataSlab+0x16804>
   3e158:	sub	r4, fp, #176	; 0xb0
   3e15c:	str	ip, [r7, r0, lsl #2]
   3e160:	add	r3, r4, r0, lsl #2
   3e164:	ldr	r3, [r3, #4]
   3e168:	sdiv	r5, r2, r3
   3e16c:	mls	r6, r5, r3, r2
   3e170:	cmp	r6, #0
   3e174:	beq	3e190 <GetDataSlab+0x167cc>
   3e178:	ldr	r5, [r4, r0, lsl #2]
   3e17c:	ldr	r4, [r8, r0, lsl #2]
   3e180:	sub	r3, r3, r6
   3e184:	mla	r3, r4, r5, r3
   3e188:	add	r2, r3, r2
   3e18c:	b	3e1ac <GetDataSlab+0x167e8>
   3e190:	ldr	r3, [r8, r0, lsl #2]
   3e194:	cmp	r3, #0
   3e198:	beq	3e1b0 <GetDataSlab+0x167ec>
   3e19c:	sub	r4, fp, #176	; 0xb0
   3e1a0:	ldr	r4, [r4, r0, lsl #2]
   3e1a4:	mla	r2, r4, r3, r2
   3e1a8:	mul	r3, r4, r3
   3e1ac:	add	r9, r9, r3, lsl #1
   3e1b0:	ldr	r4, [fp, #24]
   3e1b4:	add	r3, r0, #1
   3e1b8:	add	r0, r0, #2
   3e1bc:	cmp	r0, r4
   3e1c0:	blt	3e134 <GetDataSlab+0x16770>
   3e1c4:	b	3e1d8 <GetDataSlab+0x16814>
   3e1c8:	ldr	r3, [sp, #28]
   3e1cc:	ldr	r0, [r3, r0, lsl #2]
   3e1d0:	add	r9, r9, r0, lsl #1
   3e1d4:	add	r2, r0, r2
   3e1d8:	ldr	r0, [sp, #60]	; 0x3c
   3e1dc:	ldr	r3, [sp, #36]	; 0x24
   3e1e0:	ldr	r4, [sp, #52]	; 0x34
   3e1e4:	add	r0, r0, r3
   3e1e8:	ldr	r3, [sp, #44]	; 0x2c
   3e1ec:	str	r0, [sp, #60]	; 0x3c
   3e1f0:	mov	r0, #0
   3e1f4:	add	sl, sl, r3
   3e1f8:	cmp	sl, r4
   3e1fc:	blt	3e0d0 <GetDataSlab+0x1670c>
   3e200:	b	47ffc <GetDataSlab+0x20638>
   3e204:	ldr	r0, [sp, #56]	; 0x38
   3e208:	ldr	r2, [sp, #52]	; 0x34
   3e20c:	sub	r1, fp, #96	; 0x60
   3e210:	cmp	r0, #1
   3e214:	ldr	r0, [fp, #12]
   3e218:	blt	47ff8 <GetDataSlab+0x20634>
   3e21c:	add	r9, r0, #4
   3e220:	ldr	r0, [fp, #20]
   3e224:	ldr	r7, [sp, #36]	; 0x24
   3e228:	mov	r8, #0
   3e22c:	add	ip, r0, #4
   3e230:	sub	r0, fp, #136	; 0x88
   3e234:	mls	r7, r2, r6, r7
   3e238:	orr	r5, r0, #4
   3e23c:	orr	r0, r1, #4
   3e240:	lsl	r1, r6, #2
   3e244:	str	r7, [sp, #44]	; 0x2c
   3e248:	str	r0, [sp, #32]
   3e24c:	mul	r0, r2, r6
   3e250:	str	r0, [sp, #36]	; 0x24
   3e254:	lsl	r0, r2, #2
   3e258:	str	r0, [sp, #40]	; 0x28
   3e25c:	ldr	r0, [fp, #12]
   3e260:	cmp	r2, #1
   3e264:	ldr	r0, [r0]
   3e268:	blt	3e2b0 <GetDataSlab+0x168ec>
   3e26c:	ldr	r7, [sp, #36]	; 0x24
   3e270:	ldr	lr, [sp, #60]	; 0x3c
   3e274:	add	r4, sl, r0, lsl #2
   3e278:	add	r6, r7, r3
   3e27c:	add	r3, sl, r7, lsl #2
   3e280:	str	r3, [sp, #48]	; 0x30
   3e284:	mov	r3, r2
   3e288:	ldr	r7, [r4], r1
   3e28c:	subs	r3, r3, #1
   3e290:	vmov	s0, r7
   3e294:	vcvt.f32.s32	s0, s0
   3e298:	vstr	s0, [lr]
   3e29c:	add	lr, lr, #4
   3e2a0:	bne	3e288 <GetDataSlab+0x168c4>
   3e2a4:	ldr	sl, [sp, #48]	; 0x30
   3e2a8:	add	r2, r6, r0
   3e2ac:	b	3e2b4 <GetDataSlab+0x168f0>
   3e2b0:	add	r2, r0, r3
   3e2b4:	ldr	r3, [sp, #44]	; 0x2c
   3e2b8:	sub	lr, fp, #176	; 0xb0
   3e2bc:	sub	r0, r3, r0
   3e2c0:	add	sl, sl, r3, lsl #2
   3e2c4:	add	r3, r2, r0
   3e2c8:	ldr	r0, [fp, #24]
   3e2cc:	cmp	r0, #2
   3e2d0:	blt	3e378 <GetDataSlab+0x169b4>
   3e2d4:	mov	r2, #0
   3e2d8:	mov	r0, r2
   3e2dc:	ldr	r2, [r5, r2, lsl #2]
   3e2e0:	add	r2, r2, #1
   3e2e4:	str	r2, [r5, r0, lsl #2]
   3e2e8:	ldr	r7, [ip, r0, lsl #2]
   3e2ec:	sdiv	r6, r2, r7
   3e2f0:	mls	r2, r6, r7, r2
   3e2f4:	cmp	r2, #0
   3e2f8:	bne	3e368 <GetDataSlab+0x169a4>
   3e2fc:	mov	r2, #0
   3e300:	str	r2, [r5, r0, lsl #2]
   3e304:	add	r2, lr, r0, lsl #2
   3e308:	ldr	r2, [r2, #4]
   3e30c:	sdiv	r7, r3, r2
   3e310:	mls	r7, r7, r2, r3
   3e314:	cmp	r7, #0
   3e318:	beq	3e334 <GetDataSlab+0x16970>
   3e31c:	ldr	r6, [lr, r0, lsl #2]
   3e320:	ldr	r4, [r9, r0, lsl #2]
   3e324:	sub	r2, r2, r7
   3e328:	mla	r2, r4, r6, r2
   3e32c:	add	r3, r2, r3
   3e330:	b	3e34c <GetDataSlab+0x16988>
   3e334:	ldr	r2, [r9, r0, lsl #2]
   3e338:	cmp	r2, #0
   3e33c:	beq	3e350 <GetDataSlab+0x1698c>
   3e340:	ldr	r7, [lr, r0, lsl #2]
   3e344:	mla	r3, r7, r2, r3
   3e348:	mul	r2, r7, r2
   3e34c:	add	sl, sl, r2, lsl #2
   3e350:	ldr	r7, [fp, #24]
   3e354:	add	r2, r0, #1
   3e358:	add	r0, r0, #2
   3e35c:	cmp	r0, r7
   3e360:	blt	3e2d8 <GetDataSlab+0x16914>
   3e364:	b	3e378 <GetDataSlab+0x169b4>
   3e368:	ldr	r2, [sp, #32]
   3e36c:	ldr	r0, [r2, r0, lsl #2]
   3e370:	add	sl, sl, r0, lsl #2
   3e374:	add	r3, r0, r3
   3e378:	ldr	r0, [sp, #60]	; 0x3c
   3e37c:	ldr	r2, [sp, #40]	; 0x28
   3e380:	ldr	r7, [sp, #56]	; 0x38
   3e384:	add	r0, r0, r2
   3e388:	ldr	r2, [sp, #52]	; 0x34
   3e38c:	str	r0, [sp, #60]	; 0x3c
   3e390:	mov	r0, #0
   3e394:	add	r8, r8, r2
   3e398:	cmp	r8, r7
   3e39c:	blt	3e25c <GetDataSlab+0x16898>
   3e3a0:	b	47ffc <GetDataSlab+0x20638>
   3e3a4:	ldr	r0, [sp, #56]	; 0x38
   3e3a8:	ldr	r2, [sp, #52]	; 0x34
   3e3ac:	sub	r1, fp, #96	; 0x60
   3e3b0:	cmp	r0, #1
   3e3b4:	ldr	r0, [fp, #12]
   3e3b8:	blt	47ff8 <GetDataSlab+0x20634>
   3e3bc:	add	r9, r0, #4
   3e3c0:	ldr	r0, [fp, #20]
   3e3c4:	ldr	r7, [sp, #36]	; 0x24
   3e3c8:	mov	r8, #0
   3e3cc:	add	ip, r0, #4
   3e3d0:	sub	r0, fp, #136	; 0x88
   3e3d4:	mls	r7, r2, r6, r7
   3e3d8:	orr	r5, r0, #4
   3e3dc:	orr	r0, r1, #4
   3e3e0:	lsl	r1, r6, #2
   3e3e4:	str	r7, [sp, #44]	; 0x2c
   3e3e8:	str	r0, [sp, #32]
   3e3ec:	mul	r0, r2, r6
   3e3f0:	str	r0, [sp, #36]	; 0x24
   3e3f4:	lsl	r0, r2, #2
   3e3f8:	str	r0, [sp, #40]	; 0x28
   3e3fc:	ldr	r0, [fp, #12]
   3e400:	cmp	r2, #1
   3e404:	ldr	r0, [r0]
   3e408:	blt	3e450 <GetDataSlab+0x16a8c>
   3e40c:	ldr	r7, [sp, #36]	; 0x24
   3e410:	ldr	lr, [sp, #60]	; 0x3c
   3e414:	add	r4, sl, r0, lsl #2
   3e418:	add	r6, r7, r3
   3e41c:	add	r3, sl, r7, lsl #2
   3e420:	str	r3, [sp, #48]	; 0x30
   3e424:	mov	r3, r2
   3e428:	ldr	r7, [r4], r1
   3e42c:	subs	r3, r3, #1
   3e430:	vmov	s0, r7
   3e434:	vcvt.f32.u32	s0, s0
   3e438:	vstr	s0, [lr]
   3e43c:	add	lr, lr, #4
   3e440:	bne	3e428 <GetDataSlab+0x16a64>
   3e444:	ldr	sl, [sp, #48]	; 0x30
   3e448:	add	r2, r6, r0
   3e44c:	b	3e454 <GetDataSlab+0x16a90>
   3e450:	add	r2, r0, r3
   3e454:	ldr	r3, [sp, #44]	; 0x2c
   3e458:	sub	lr, fp, #176	; 0xb0
   3e45c:	sub	r0, r3, r0
   3e460:	add	sl, sl, r3, lsl #2
   3e464:	add	r3, r2, r0
   3e468:	ldr	r0, [fp, #24]
   3e46c:	cmp	r0, #2
   3e470:	blt	3e518 <GetDataSlab+0x16b54>
   3e474:	mov	r2, #0
   3e478:	mov	r0, r2
   3e47c:	ldr	r2, [r5, r2, lsl #2]
   3e480:	add	r2, r2, #1
   3e484:	str	r2, [r5, r0, lsl #2]
   3e488:	ldr	r7, [ip, r0, lsl #2]
   3e48c:	sdiv	r6, r2, r7
   3e490:	mls	r2, r6, r7, r2
   3e494:	cmp	r2, #0
   3e498:	bne	3e508 <GetDataSlab+0x16b44>
   3e49c:	mov	r2, #0
   3e4a0:	str	r2, [r5, r0, lsl #2]
   3e4a4:	add	r2, lr, r0, lsl #2
   3e4a8:	ldr	r2, [r2, #4]
   3e4ac:	sdiv	r7, r3, r2
   3e4b0:	mls	r7, r7, r2, r3
   3e4b4:	cmp	r7, #0
   3e4b8:	beq	3e4d4 <GetDataSlab+0x16b10>
   3e4bc:	ldr	r6, [lr, r0, lsl #2]
   3e4c0:	ldr	r4, [r9, r0, lsl #2]
   3e4c4:	sub	r2, r2, r7
   3e4c8:	mla	r2, r4, r6, r2
   3e4cc:	add	r3, r2, r3
   3e4d0:	b	3e4ec <GetDataSlab+0x16b28>
   3e4d4:	ldr	r2, [r9, r0, lsl #2]
   3e4d8:	cmp	r2, #0
   3e4dc:	beq	3e4f0 <GetDataSlab+0x16b2c>
   3e4e0:	ldr	r7, [lr, r0, lsl #2]
   3e4e4:	mla	r3, r7, r2, r3
   3e4e8:	mul	r2, r7, r2
   3e4ec:	add	sl, sl, r2, lsl #2
   3e4f0:	ldr	r7, [fp, #24]
   3e4f4:	add	r2, r0, #1
   3e4f8:	add	r0, r0, #2
   3e4fc:	cmp	r0, r7
   3e500:	blt	3e478 <GetDataSlab+0x16ab4>
   3e504:	b	3e518 <GetDataSlab+0x16b54>
   3e508:	ldr	r2, [sp, #32]
   3e50c:	ldr	r0, [r2, r0, lsl #2]
   3e510:	add	sl, sl, r0, lsl #2
   3e514:	add	r3, r0, r3
   3e518:	ldr	r0, [sp, #60]	; 0x3c
   3e51c:	ldr	r2, [sp, #40]	; 0x28
   3e520:	ldr	r7, [sp, #56]	; 0x38
   3e524:	add	r0, r0, r2
   3e528:	ldr	r2, [sp, #52]	; 0x34
   3e52c:	str	r0, [sp, #60]	; 0x3c
   3e530:	mov	r0, #0
   3e534:	add	r8, r8, r2
   3e538:	cmp	r8, r7
   3e53c:	blt	3e3fc <GetDataSlab+0x16a38>
   3e540:	b	47ffc <GetDataSlab+0x20638>
   3e544:	ldr	r0, [sp, #52]	; 0x34
   3e548:	ldr	r1, [fp, #12]
   3e54c:	cmp	r0, #1
   3e550:	blt	47ff8 <GetDataSlab+0x20634>
   3e554:	ldr	r0, [sp, #40]	; 0x28
   3e558:	ldr	r4, [r1], #4
   3e55c:	mov	r9, #0
   3e560:	mls	r0, sl, r3, r0
   3e564:	str	r1, [sp, #56]	; 0x38
   3e568:	str	r4, [sp, #48]	; 0x30
   3e56c:	sub	r0, r0, r4
   3e570:	str	r0, [sp, #44]	; 0x2c
   3e574:	ldr	r0, [fp, #20]
   3e578:	add	ip, r0, #4
   3e57c:	sub	r0, fp, #136	; 0x88
   3e580:	orr	r7, r0, #4
   3e584:	sub	r0, fp, #96	; 0x60
   3e588:	orr	r0, r0, #4
   3e58c:	str	r0, [sp, #32]
   3e590:	mla	r0, sl, r3, r4
   3e594:	lsl	r3, r3, #2
   3e598:	str	r0, [sp, #36]	; 0x24
   3e59c:	lsl	r0, sl, #2
   3e5a0:	str	r0, [sp, #40]	; 0x28
   3e5a4:	ldr	r0, [sp, #48]	; 0x30
   3e5a8:	cmp	sl, #1
   3e5ac:	blt	3e5d4 <GetDataSlab+0x16c10>
   3e5b0:	ldr	r0, [sp, #48]	; 0x30
   3e5b4:	ldr	r8, [sp, #60]	; 0x3c
   3e5b8:	mov	r1, sl
   3e5bc:	add	r0, lr, r0, lsl #2
   3e5c0:	ldr	r6, [r0], r3
   3e5c4:	subs	r1, r1, #1
   3e5c8:	str	r6, [r8], #4
   3e5cc:	bne	3e5c0 <GetDataSlab+0x16bfc>
   3e5d0:	ldr	r0, [sp, #36]	; 0x24
   3e5d4:	ldr	r4, [sp, #44]	; 0x2c
   3e5d8:	add	r1, lr, r4, lsl #2
   3e5dc:	add	lr, r1, r0, lsl #2
   3e5e0:	add	r0, r0, r2
   3e5e4:	add	r2, r0, r4
   3e5e8:	ldr	r0, [fp, #24]
   3e5ec:	cmp	r0, #2
   3e5f0:	blt	3e6a4 <GetDataSlab+0x16ce0>
   3e5f4:	ldr	r8, [sp, #56]	; 0x38
   3e5f8:	mov	r1, #0
   3e5fc:	mov	r0, r1
   3e600:	ldr	r1, [r7, r1, lsl #2]
   3e604:	add	r1, r1, #1
   3e608:	str	r1, [r7, r0, lsl #2]
   3e60c:	ldr	r6, [ip, r0, lsl #2]
   3e610:	sdiv	r4, r1, r6
   3e614:	mls	r1, r4, r6, r1
   3e618:	cmp	r1, #0
   3e61c:	bne	3e694 <GetDataSlab+0x16cd0>
   3e620:	mov	r1, #0
   3e624:	sub	r5, fp, #176	; 0xb0
   3e628:	str	r1, [r7, r0, lsl #2]
   3e62c:	add	r1, r5, r0, lsl #2
   3e630:	ldr	r1, [r1, #4]
   3e634:	sdiv	r4, r2, r1
   3e638:	mls	r6, r4, r1, r2
   3e63c:	cmp	r6, #0
   3e640:	beq	3e65c <GetDataSlab+0x16c98>
   3e644:	ldr	r4, [r5, r0, lsl #2]
   3e648:	ldr	r5, [r8, r0, lsl #2]
   3e64c:	sub	r1, r1, r6
   3e650:	mla	r1, r5, r4, r1
   3e654:	add	r2, r1, r2
   3e658:	b	3e678 <GetDataSlab+0x16cb4>
   3e65c:	ldr	r1, [r8, r0, lsl #2]
   3e660:	cmp	r1, #0
   3e664:	beq	3e67c <GetDataSlab+0x16cb8>
   3e668:	sub	r4, fp, #176	; 0xb0
   3e66c:	ldr	r4, [r4, r0, lsl #2]
   3e670:	mla	r2, r4, r1, r2
   3e674:	mul	r1, r4, r1
   3e678:	add	lr, lr, r1, lsl #2
   3e67c:	ldr	r4, [fp, #24]
   3e680:	add	r1, r0, #1
   3e684:	add	r0, r0, #2
   3e688:	cmp	r0, r4
   3e68c:	blt	3e5fc <GetDataSlab+0x16c38>
   3e690:	b	3e6a4 <GetDataSlab+0x16ce0>
   3e694:	ldr	r1, [sp, #32]
   3e698:	ldr	r0, [r1, r0, lsl #2]
   3e69c:	add	lr, lr, r0, lsl #2
   3e6a0:	add	r2, r0, r2
   3e6a4:	ldr	r0, [sp, #60]	; 0x3c
   3e6a8:	ldr	r1, [sp, #40]	; 0x28
   3e6ac:	add	r9, r9, sl
   3e6b0:	add	r0, r0, r1
   3e6b4:	ldr	r1, [sp, #52]	; 0x34
   3e6b8:	str	r0, [sp, #60]	; 0x3c
   3e6bc:	mov	r0, #0
   3e6c0:	cmp	r9, r1
   3e6c4:	blt	3e5a4 <GetDataSlab+0x16be0>
   3e6c8:	b	47ffc <GetDataSlab+0x20638>
   3e6cc:	ldr	r0, [sp, #56]	; 0x38
   3e6d0:	ldr	ip, [fp, #12]
   3e6d4:	ldr	r3, [sp, #52]	; 0x34
   3e6d8:	cmp	r0, #1
   3e6dc:	blt	47ff8 <GetDataSlab+0x20634>
   3e6e0:	ldr	r0, [sp, #36]	; 0x24
   3e6e4:	ldr	r4, [ip], #4
   3e6e8:	add	lr, sl, #4
   3e6ec:	mov	sl, #0
   3e6f0:	mls	r0, r3, r1, r0
   3e6f4:	str	r4, [sp, #48]	; 0x30
   3e6f8:	sub	r0, r0, r4
   3e6fc:	str	r0, [sp, #44]	; 0x2c
   3e700:	sub	r0, fp, #136	; 0x88
   3e704:	orr	r7, r0, #4
   3e708:	sub	r0, fp, #96	; 0x60
   3e70c:	orr	r0, r0, #4
   3e710:	str	r0, [sp, #32]
   3e714:	mla	r0, r3, r1, r4
   3e718:	lsl	r1, r1, #3
   3e71c:	str	r0, [sp, #36]	; 0x24
   3e720:	lsl	r0, r3, #2
   3e724:	str	r0, [sp, #40]	; 0x28
   3e728:	ldr	r0, [sp, #48]	; 0x30
   3e72c:	cmp	r3, #1
   3e730:	blt	3e764 <GetDataSlab+0x16da0>
   3e734:	ldr	r0, [sp, #48]	; 0x30
   3e738:	ldr	r3, [sp, #52]	; 0x34
   3e73c:	ldr	r6, [sp, #60]	; 0x3c
   3e740:	add	r0, r9, r0, lsl #3
   3e744:	vldr	d16, [r0]
   3e748:	add	r0, r0, r1
   3e74c:	subs	r3, r3, #1
   3e750:	vcvt.f32.f64	s0, d16
   3e754:	vstr	s0, [r6]
   3e758:	add	r6, r6, #4
   3e75c:	bne	3e744 <GetDataSlab+0x16d80>
   3e760:	ldr	r0, [sp, #36]	; 0x24
   3e764:	ldr	r4, [sp, #44]	; 0x2c
   3e768:	add	r3, r9, r4, lsl #3
   3e76c:	add	r9, r3, r0, lsl #3
   3e770:	add	r0, r0, r2
   3e774:	add	r2, r0, r4
   3e778:	ldr	r0, [fp, #24]
   3e77c:	cmp	r0, #2
   3e780:	blt	3e834 <GetDataSlab+0x16e70>
   3e784:	mov	r3, #0
   3e788:	mov	r0, r3
   3e78c:	ldr	r3, [r7, r3, lsl #2]
   3e790:	add	r3, r3, #1
   3e794:	str	r3, [r7, r0, lsl #2]
   3e798:	ldr	r6, [lr, r0, lsl #2]
   3e79c:	sdiv	r8, r3, r6
   3e7a0:	mls	r3, r8, r6, r3
   3e7a4:	cmp	r3, #0
   3e7a8:	bne	3e824 <GetDataSlab+0x16e60>
   3e7ac:	mov	r3, #0
   3e7b0:	sub	r5, fp, #176	; 0xb0
   3e7b4:	mov	r4, ip
   3e7b8:	str	r3, [r7, r0, lsl #2]
   3e7bc:	add	r3, r5, r0, lsl #2
   3e7c0:	ldr	r3, [r3, #4]
   3e7c4:	sdiv	r6, r2, r3
   3e7c8:	mls	r6, r6, r3, r2
   3e7cc:	cmp	r6, #0
   3e7d0:	beq	3e7ec <GetDataSlab+0x16e28>
   3e7d4:	ldr	r5, [r5, r0, lsl #2]
   3e7d8:	ldr	r4, [r4, r0, lsl #2]
   3e7dc:	sub	r3, r3, r6
   3e7e0:	mla	r3, r4, r5, r3
   3e7e4:	add	r2, r3, r2
   3e7e8:	b	3e808 <GetDataSlab+0x16e44>
   3e7ec:	ldr	r3, [r4, r0, lsl #2]
   3e7f0:	cmp	r3, #0
   3e7f4:	beq	3e80c <GetDataSlab+0x16e48>
   3e7f8:	sub	r4, fp, #176	; 0xb0
   3e7fc:	ldr	r4, [r4, r0, lsl #2]
   3e800:	mla	r2, r4, r3, r2
   3e804:	mul	r3, r4, r3
   3e808:	add	r9, r9, r3, lsl #3
   3e80c:	ldr	r4, [fp, #24]
   3e810:	add	r3, r0, #1
   3e814:	add	r0, r0, #2
   3e818:	cmp	r0, r4
   3e81c:	blt	3e788 <GetDataSlab+0x16dc4>
   3e820:	b	3e834 <GetDataSlab+0x16e70>
   3e824:	ldr	r3, [sp, #32]
   3e828:	ldr	r0, [r3, r0, lsl #2]
   3e82c:	add	r9, r9, r0, lsl #3
   3e830:	add	r2, r0, r2
   3e834:	ldr	r0, [sp, #60]	; 0x3c
   3e838:	ldr	r3, [sp, #40]	; 0x28
   3e83c:	ldr	r4, [sp, #56]	; 0x38
   3e840:	add	r0, r0, r3
   3e844:	ldr	r3, [sp, #52]	; 0x34
   3e848:	str	r0, [sp, #60]	; 0x3c
   3e84c:	mov	r0, #0
   3e850:	add	sl, sl, r3
   3e854:	cmp	sl, r4
   3e858:	blt	3e728 <GetDataSlab+0x16d64>
   3e85c:	b	47ffc <GetDataSlab+0x20638>
   3e860:	ldr	r0, [sp, #52]	; 0x34
   3e864:	ldr	r2, [fp, #20]
   3e868:	ldr	r6, [sp, #40]	; 0x28
   3e86c:	ldr	r9, [sp, #24]
   3e870:	cmp	r0, #1
   3e874:	blt	47a98 <GetDataSlab+0x200d4>
   3e878:	ldr	r1, [fp, #12]
   3e87c:	ldr	r0, [sp, #32]
   3e880:	lsl	r8, r3, #3
   3e884:	str	ip, [sp, #36]	; 0x24
   3e888:	mov	sl, r1
   3e88c:	mls	r0, r9, r3, r0
   3e890:	ldr	r1, [sl], #4
   3e894:	sub	r0, r0, r1
   3e898:	str	r1, [sp, #28]
   3e89c:	str	r0, [sp, #20]
   3e8a0:	add	r0, r2, #4
   3e8a4:	str	r0, [sp, #56]	; 0x38
   3e8a8:	sub	r0, fp, #136	; 0x88
   3e8ac:	orr	r6, r0, #4
   3e8b0:	sub	r0, fp, #96	; 0x60
   3e8b4:	orr	r0, r0, #4
   3e8b8:	str	r0, [sp, #8]
   3e8bc:	mla	r0, r9, r3, r1
   3e8c0:	mov	r1, #0
   3e8c4:	str	r0, [sp, #12]
   3e8c8:	lsl	r0, r9, #2
   3e8cc:	str	r0, [sp, #16]
   3e8d0:	ldr	r0, [sp, #28]
   3e8d4:	cmp	r9, #1
   3e8d8:	str	r1, [sp, #32]
   3e8dc:	blt	3e928 <GetDataSlab+0x16f64>
   3e8e0:	ldr	r0, [sp, #28]
   3e8e4:	str	r5, [sp, #44]	; 0x2c
   3e8e8:	mov	r7, sl
   3e8ec:	add	r0, r5, r0, lsl #3
   3e8f0:	mov	r5, r9
   3e8f4:	ldr	r9, [sp, #36]	; 0x24
   3e8f8:	add	sl, r0, r8
   3e8fc:	ldrd	r0, [r0]
   3e900:	bl	584e0 <__aeabi_l2f>
   3e904:	str	r0, [r9], #4
   3e908:	subs	r5, r5, #1
   3e90c:	mov	r0, sl
   3e910:	bne	3e8f8 <GetDataSlab+0x16f34>
   3e914:	ldr	r0, [sp, #12]
   3e918:	ldr	r9, [sp, #24]
   3e91c:	ldr	r5, [sp, #44]	; 0x2c
   3e920:	sub	lr, fp, #176	; 0xb0
   3e924:	mov	sl, r7
   3e928:	ldr	r2, [sp, #20]
   3e92c:	add	r1, r5, r2, lsl #3
   3e930:	add	r5, r1, r0, lsl #3
   3e934:	add	r0, r0, r4
   3e938:	add	r4, r0, r2
   3e93c:	ldr	r0, [fp, #24]
   3e940:	cmp	r0, #2
   3e944:	blt	3e9ec <GetDataSlab+0x17028>
   3e948:	ldr	ip, [sp, #40]	; 0x28
   3e94c:	mov	r1, #0
   3e950:	mov	r0, r1
   3e954:	ldr	r1, [r6, r1, lsl #2]
   3e958:	ldr	r2, [sp, #56]	; 0x38
   3e95c:	add	r1, r1, #1
   3e960:	str	r1, [r6, r0, lsl #2]
   3e964:	ldr	r2, [r2, r0, lsl #2]
   3e968:	sdiv	r3, r1, r2
   3e96c:	mls	r1, r3, r2, r1
   3e970:	cmp	r1, #0
   3e974:	bne	3e9f4 <GetDataSlab+0x17030>
   3e978:	mov	r1, #0
   3e97c:	str	r1, [r6, r0, lsl #2]
   3e980:	add	r1, lr, r0, lsl #2
   3e984:	ldr	r1, [r1, #4]
   3e988:	sdiv	r2, r4, r1
   3e98c:	mls	r2, r2, r1, r4
   3e990:	cmp	r2, #0
   3e994:	beq	3e9bc <GetDataSlab+0x16ff8>
   3e998:	mov	r7, r5
   3e99c:	ldr	r3, [lr, r0, lsl #2]
   3e9a0:	ldr	r5, [sl, r0, lsl #2]
   3e9a4:	sub	r1, r1, r2
   3e9a8:	mla	r1, r5, r3, r1
   3e9ac:	mov	r5, r7
   3e9b0:	add	r4, r1, r4
   3e9b4:	add	r5, r7, r1, lsl #3
   3e9b8:	b	3e9d4 <GetDataSlab+0x17010>
   3e9bc:	ldr	r1, [sl, r0, lsl #2]
   3e9c0:	cmp	r1, #0
   3e9c4:	ldrne	r2, [lr, r0, lsl #2]
   3e9c8:	mlane	r4, r2, r1, r4
   3e9cc:	mulne	r1, r2, r1
   3e9d0:	addne	r5, r5, r1, lsl #3
   3e9d4:	ldr	r2, [fp, #24]
   3e9d8:	add	r1, r0, #1
   3e9dc:	add	r0, r0, #2
   3e9e0:	cmp	r0, r2
   3e9e4:	blt	3e950 <GetDataSlab+0x16f8c>
   3e9e8:	b	3ea04 <GetDataSlab+0x17040>
   3e9ec:	ldr	ip, [sp, #40]	; 0x28
   3e9f0:	b	3ea04 <GetDataSlab+0x17040>
   3e9f4:	ldr	r1, [sp, #8]
   3e9f8:	ldr	r0, [r1, r0, lsl #2]
   3e9fc:	add	r5, r5, r0, lsl #3
   3ea00:	add	r4, r0, r4
   3ea04:	ldr	r0, [sp, #16]
   3ea08:	ldr	r1, [sp, #36]	; 0x24
   3ea0c:	add	r1, r1, r0
   3ea10:	ldr	r0, [sp, #52]	; 0x34
   3ea14:	str	r1, [sp, #36]	; 0x24
   3ea18:	ldr	r1, [sp, #32]
   3ea1c:	add	r1, r1, r9
   3ea20:	cmp	r1, r0
   3ea24:	blt	3e8d0 <GetDataSlab+0x16f0c>
   3ea28:	mov	r0, #0
   3ea2c:	mov	r6, ip
   3ea30:	b	47a9c <GetDataSlab+0x200d8>
   3ea34:	ldr	r0, [sp, #56]	; 0x38
   3ea38:	cmp	r0, #1
   3ea3c:	blt	2a430 <GetDataSlab+0x2a6c>
   3ea40:	ldr	r0, [fp, #20]
   3ea44:	ldr	lr, [fp, #16]
   3ea48:	add	ip, r0, #4
   3ea4c:	sub	r0, fp, #136	; 0x88
   3ea50:	orr	r9, r0, #4
   3ea54:	sub	r0, fp, #96	; 0x60
   3ea58:	orr	r0, r0, #4
   3ea5c:	str	r0, [sp, #40]	; 0x28
   3ea60:	ldr	r0, [r8], #4
   3ea64:	str	r0, [sp, #44]	; 0x2c
   3ea68:	mov	r0, #0
   3ea6c:	str	r0, [sp, #48]	; 0x30
   3ea70:	ldr	r1, [sp, #44]	; 0x2c
   3ea74:	cmp	r2, #1
   3ea78:	add	r0, r1, r4
   3ea7c:	add	r3, sl, r1
   3ea80:	blt	3ead4 <GetDataSlab+0x17110>
   3ea84:	ldr	r1, [sp, #60]	; 0x3c
   3ea88:	ldr	r2, [sp, #48]	; 0x30
   3ea8c:	ldr	r6, [fp, #20]
   3ea90:	mov	r7, #0
   3ea94:	add	r4, r1, r2
   3ea98:	ldrb	r1, [r3]
   3ea9c:	strb	r1, [r4, r7]
   3eaa0:	add	r7, r7, #1
   3eaa4:	ldr	r5, [lr]
   3eaa8:	ldr	r2, [r6]
   3eaac:	add	r0, r5, r0
   3eab0:	add	r3, r3, r5
   3eab4:	cmp	r7, r2
   3eab8:	blt	3ea98 <GetDataSlab+0x170d4>
   3eabc:	ldr	r1, [fp, #12]
   3eac0:	sub	r6, fp, #176	; 0xb0
   3eac4:	ldr	r4, [r1]
   3eac8:	ldr	r1, [fp, #8]
   3eacc:	ldr	r1, [r1]
   3ead0:	b	3eae0 <GetDataSlab+0x1711c>
   3ead4:	mov	r4, r1
   3ead8:	ldr	r1, [sp, #52]	; 0x34
   3eadc:	sub	r6, fp, #176	; 0xb0
   3eae0:	str	r1, [sp, #52]	; 0x34
   3eae4:	mls	r1, r5, r2, r1
   3eae8:	str	r4, [sp, #44]	; 0x2c
   3eaec:	sub	r1, r1, r4
   3eaf0:	add	r4, r1, r0
   3eaf4:	ldr	r0, [fp, #24]
   3eaf8:	add	sl, r3, r1
   3eafc:	cmp	r0, #2
   3eb00:	blt	3ebac <GetDataSlab+0x171e8>
   3eb04:	mov	r7, #0
   3eb08:	ldr	r1, [r9, r7, lsl #2]
   3eb0c:	mov	r0, r7
   3eb10:	add	r1, r1, #1
   3eb14:	str	r1, [r9, r7, lsl #2]
   3eb18:	ldr	r3, [ip, r7, lsl #2]
   3eb1c:	sdiv	r7, r1, r3
   3eb20:	mls	r1, r7, r3, r1
   3eb24:	cmp	r1, #0
   3eb28:	bne	3eb9c <GetDataSlab+0x171d8>
   3eb2c:	mov	r1, #0
   3eb30:	str	r1, [r9, r0, lsl #2]
   3eb34:	add	r1, r6, r0, lsl #2
   3eb38:	ldr	r7, [r1, #4]
   3eb3c:	sdiv	r1, r4, r7
   3eb40:	mls	r1, r1, r7, r4
   3eb44:	cmp	r1, #0
   3eb48:	beq	3eb70 <GetDataSlab+0x171ac>
   3eb4c:	ldr	r3, [r6, r0, lsl #2]
   3eb50:	ldr	lr, [r8, r0, lsl #2]
   3eb54:	sub	r1, r7, r1
   3eb58:	sub	r6, fp, #176	; 0xb0
   3eb5c:	mla	r1, lr, r3, r1
   3eb60:	ldr	lr, [fp, #16]
   3eb64:	add	r4, r1, r4
   3eb68:	add	sl, sl, r1
   3eb6c:	b	3eb84 <GetDataSlab+0x171c0>
   3eb70:	ldr	r1, [r8, r0, lsl #2]
   3eb74:	cmp	r1, #0
   3eb78:	ldrne	r3, [r6, r0, lsl #2]
   3eb7c:	mlane	r4, r3, r1, r4
   3eb80:	mlane	sl, r3, r1, sl
   3eb84:	ldr	r1, [fp, #24]
   3eb88:	add	r7, r0, #1
   3eb8c:	add	r0, r0, #2
   3eb90:	cmp	r0, r1
   3eb94:	blt	3eb08 <GetDataSlab+0x17144>
   3eb98:	b	3ebac <GetDataSlab+0x171e8>
   3eb9c:	ldr	r1, [sp, #40]	; 0x28
   3eba0:	ldr	r0, [r1, r0, lsl #2]
   3eba4:	add	sl, sl, r0
   3eba8:	add	r4, r0, r4
   3ebac:	ldr	r3, [sp, #48]	; 0x30
   3ebb0:	ldr	r1, [sp, #56]	; 0x38
   3ebb4:	mov	r0, #0
   3ebb8:	add	r3, r2, r3
   3ebbc:	cmp	r3, r1
   3ebc0:	str	r3, [sp, #48]	; 0x30
   3ebc4:	blt	3ea70 <GetDataSlab+0x170ac>
   3ebc8:	b	47ffc <GetDataSlab+0x20638>
   3ebcc:	ldr	r0, [sp, #56]	; 0x38
   3ebd0:	cmp	r0, #1
   3ebd4:	blt	2a430 <GetDataSlab+0x2a6c>
   3ebd8:	ldr	r0, [fp, #20]
   3ebdc:	ldr	lr, [fp, #16]
   3ebe0:	add	ip, r0, #4
   3ebe4:	sub	r0, fp, #136	; 0x88
   3ebe8:	orr	r9, r0, #4
   3ebec:	sub	r0, fp, #96	; 0x60
   3ebf0:	orr	r0, r0, #4
   3ebf4:	str	r0, [sp, #40]	; 0x28
   3ebf8:	ldr	r0, [r8], #4
   3ebfc:	str	r0, [sp, #44]	; 0x2c
   3ec00:	mov	r0, #0
   3ec04:	str	r0, [sp, #48]	; 0x30
   3ec08:	ldr	r1, [sp, #44]	; 0x2c
   3ec0c:	cmp	r2, #1
   3ec10:	add	r0, r1, r4
   3ec14:	add	r3, sl, r1, lsl #1
   3ec18:	blt	3ec6c <GetDataSlab+0x172a8>
   3ec1c:	ldr	r1, [sp, #60]	; 0x3c
   3ec20:	ldr	r2, [sp, #48]	; 0x30
   3ec24:	ldr	r6, [fp, #20]
   3ec28:	mov	r7, #0
   3ec2c:	add	r4, r1, r2
   3ec30:	ldrb	r1, [r3]
   3ec34:	strb	r1, [r4, r7]
   3ec38:	add	r7, r7, #1
   3ec3c:	ldr	r5, [lr]
   3ec40:	ldr	r2, [r6]
   3ec44:	add	r0, r5, r0
   3ec48:	add	r3, r3, r5, lsl #1
   3ec4c:	cmp	r7, r2
   3ec50:	blt	3ec30 <GetDataSlab+0x1726c>
   3ec54:	ldr	r1, [fp, #12]
   3ec58:	sub	r6, fp, #176	; 0xb0
   3ec5c:	ldr	r4, [r1]
   3ec60:	ldr	r1, [fp, #8]
   3ec64:	ldr	r1, [r1]
   3ec68:	b	3ec78 <GetDataSlab+0x172b4>
   3ec6c:	mov	r4, r1
   3ec70:	ldr	r1, [sp, #52]	; 0x34
   3ec74:	sub	r6, fp, #176	; 0xb0
   3ec78:	str	r1, [sp, #52]	; 0x34
   3ec7c:	mls	r1, r5, r2, r1
   3ec80:	str	r4, [sp, #44]	; 0x2c
   3ec84:	sub	r1, r1, r4
   3ec88:	add	r4, r1, r0
   3ec8c:	ldr	r0, [fp, #24]
   3ec90:	add	sl, r3, r1, lsl #1
   3ec94:	cmp	r0, #2
   3ec98:	blt	3ed48 <GetDataSlab+0x17384>
   3ec9c:	mov	r7, #0
   3eca0:	ldr	r1, [r9, r7, lsl #2]
   3eca4:	mov	r0, r7
   3eca8:	add	r1, r1, #1
   3ecac:	str	r1, [r9, r7, lsl #2]
   3ecb0:	ldr	r3, [ip, r7, lsl #2]
   3ecb4:	sdiv	r7, r1, r3
   3ecb8:	mls	r1, r7, r3, r1
   3ecbc:	cmp	r1, #0
   3ecc0:	bne	3ed38 <GetDataSlab+0x17374>
   3ecc4:	mov	r1, #0
   3ecc8:	str	r1, [r9, r0, lsl #2]
   3eccc:	add	r1, r6, r0, lsl #2
   3ecd0:	ldr	r7, [r1, #4]
   3ecd4:	sdiv	r1, r4, r7
   3ecd8:	mls	r1, r1, r7, r4
   3ecdc:	cmp	r1, #0
   3ece0:	beq	3ed04 <GetDataSlab+0x17340>
   3ece4:	ldr	r3, [r6, r0, lsl #2]
   3ece8:	ldr	lr, [r8, r0, lsl #2]
   3ecec:	sub	r1, r7, r1
   3ecf0:	sub	r6, fp, #176	; 0xb0
   3ecf4:	mla	r1, lr, r3, r1
   3ecf8:	ldr	lr, [fp, #16]
   3ecfc:	add	r4, r1, r4
   3ed00:	b	3ed1c <GetDataSlab+0x17358>
   3ed04:	ldr	r1, [r8, r0, lsl #2]
   3ed08:	cmp	r1, #0
   3ed0c:	beq	3ed20 <GetDataSlab+0x1735c>
   3ed10:	ldr	r3, [r6, r0, lsl #2]
   3ed14:	mla	r4, r3, r1, r4
   3ed18:	mul	r1, r3, r1
   3ed1c:	add	sl, sl, r1, lsl #1
   3ed20:	ldr	r1, [fp, #24]
   3ed24:	add	r7, r0, #1
   3ed28:	add	r0, r0, #2
   3ed2c:	cmp	r0, r1
   3ed30:	blt	3eca0 <GetDataSlab+0x172dc>
   3ed34:	b	3ed48 <GetDataSlab+0x17384>
   3ed38:	ldr	r1, [sp, #40]	; 0x28
   3ed3c:	ldr	r0, [r1, r0, lsl #2]
   3ed40:	add	sl, sl, r0, lsl #1
   3ed44:	add	r4, r0, r4
   3ed48:	ldr	r3, [sp, #48]	; 0x30
   3ed4c:	ldr	r1, [sp, #56]	; 0x38
   3ed50:	mov	r0, #0
   3ed54:	add	r3, r2, r3
   3ed58:	cmp	r3, r1
   3ed5c:	str	r3, [sp, #48]	; 0x30
   3ed60:	blt	3ec08 <GetDataSlab+0x17244>
   3ed64:	b	47ffc <GetDataSlab+0x20638>
   3ed68:	ldr	r0, [sp, #56]	; 0x38
   3ed6c:	cmp	r0, #1
   3ed70:	blt	2a430 <GetDataSlab+0x2a6c>
   3ed74:	ldr	r0, [fp, #20]
   3ed78:	ldr	lr, [fp, #16]
   3ed7c:	add	ip, r0, #4
   3ed80:	sub	r0, fp, #136	; 0x88
   3ed84:	orr	r9, r0, #4
   3ed88:	sub	r0, fp, #96	; 0x60
   3ed8c:	orr	r0, r0, #4
   3ed90:	str	r0, [sp, #40]	; 0x28
   3ed94:	ldr	r0, [r8], #4
   3ed98:	str	r0, [sp, #44]	; 0x2c
   3ed9c:	mov	r0, #0
   3eda0:	str	r0, [sp, #48]	; 0x30
   3eda4:	ldr	r1, [sp, #44]	; 0x2c
   3eda8:	cmp	r2, #1
   3edac:	add	r0, r1, r4
   3edb0:	add	r3, sl, r1, lsl #1
   3edb4:	blt	3ee08 <GetDataSlab+0x17444>
   3edb8:	ldr	r1, [sp, #60]	; 0x3c
   3edbc:	ldr	r2, [sp, #48]	; 0x30
   3edc0:	ldr	r6, [fp, #20]
   3edc4:	mov	r7, #0
   3edc8:	add	r4, r1, r2
   3edcc:	ldrb	r1, [r3]
   3edd0:	strb	r1, [r4, r7]
   3edd4:	add	r7, r7, #1
   3edd8:	ldr	r5, [lr]
   3eddc:	ldr	r2, [r6]
   3ede0:	add	r0, r5, r0
   3ede4:	add	r3, r3, r5, lsl #1
   3ede8:	cmp	r7, r2
   3edec:	blt	3edcc <GetDataSlab+0x17408>
   3edf0:	ldr	r1, [fp, #12]
   3edf4:	sub	r6, fp, #176	; 0xb0
   3edf8:	ldr	r4, [r1]
   3edfc:	ldr	r1, [fp, #8]
   3ee00:	ldr	r1, [r1]
   3ee04:	b	3ee14 <GetDataSlab+0x17450>
   3ee08:	mov	r4, r1
   3ee0c:	ldr	r1, [sp, #52]	; 0x34
   3ee10:	sub	r6, fp, #176	; 0xb0
   3ee14:	str	r1, [sp, #52]	; 0x34
   3ee18:	mls	r1, r5, r2, r1
   3ee1c:	str	r4, [sp, #44]	; 0x2c
   3ee20:	sub	r1, r1, r4
   3ee24:	add	r4, r1, r0
   3ee28:	ldr	r0, [fp, #24]
   3ee2c:	add	sl, r3, r1, lsl #1
   3ee30:	cmp	r0, #2
   3ee34:	blt	3eee4 <GetDataSlab+0x17520>
   3ee38:	mov	r7, #0
   3ee3c:	ldr	r1, [r9, r7, lsl #2]
   3ee40:	mov	r0, r7
   3ee44:	add	r1, r1, #1
   3ee48:	str	r1, [r9, r7, lsl #2]
   3ee4c:	ldr	r3, [ip, r7, lsl #2]
   3ee50:	sdiv	r7, r1, r3
   3ee54:	mls	r1, r7, r3, r1
   3ee58:	cmp	r1, #0
   3ee5c:	bne	3eed4 <GetDataSlab+0x17510>
   3ee60:	mov	r1, #0
   3ee64:	str	r1, [r9, r0, lsl #2]
   3ee68:	add	r1, r6, r0, lsl #2
   3ee6c:	ldr	r7, [r1, #4]
   3ee70:	sdiv	r1, r4, r7
   3ee74:	mls	r1, r1, r7, r4
   3ee78:	cmp	r1, #0
   3ee7c:	beq	3eea0 <GetDataSlab+0x174dc>
   3ee80:	ldr	r3, [r6, r0, lsl #2]
   3ee84:	ldr	lr, [r8, r0, lsl #2]
   3ee88:	sub	r1, r7, r1
   3ee8c:	sub	r6, fp, #176	; 0xb0
   3ee90:	mla	r1, lr, r3, r1
   3ee94:	ldr	lr, [fp, #16]
   3ee98:	add	r4, r1, r4
   3ee9c:	b	3eeb8 <GetDataSlab+0x174f4>
   3eea0:	ldr	r1, [r8, r0, lsl #2]
   3eea4:	cmp	r1, #0
   3eea8:	beq	3eebc <GetDataSlab+0x174f8>
   3eeac:	ldr	r3, [r6, r0, lsl #2]
   3eeb0:	mla	r4, r3, r1, r4
   3eeb4:	mul	r1, r3, r1
   3eeb8:	add	sl, sl, r1, lsl #1
   3eebc:	ldr	r1, [fp, #24]
   3eec0:	add	r7, r0, #1
   3eec4:	add	r0, r0, #2
   3eec8:	cmp	r0, r1
   3eecc:	blt	3ee3c <GetDataSlab+0x17478>
   3eed0:	b	3eee4 <GetDataSlab+0x17520>
   3eed4:	ldr	r1, [sp, #40]	; 0x28
   3eed8:	ldr	r0, [r1, r0, lsl #2]
   3eedc:	add	sl, sl, r0, lsl #1
   3eee0:	add	r4, r0, r4
   3eee4:	ldr	r3, [sp, #48]	; 0x30
   3eee8:	ldr	r1, [sp, #56]	; 0x38
   3eeec:	mov	r0, #0
   3eef0:	add	r3, r2, r3
   3eef4:	cmp	r3, r1
   3eef8:	str	r3, [sp, #48]	; 0x30
   3eefc:	blt	3eda4 <GetDataSlab+0x173e0>
   3ef00:	b	47ffc <GetDataSlab+0x20638>
   3ef04:	ldr	r0, [sp, #56]	; 0x38
   3ef08:	cmp	r0, #1
   3ef0c:	blt	2a430 <GetDataSlab+0x2a6c>
   3ef10:	ldr	r0, [fp, #20]
   3ef14:	ldr	lr, [fp, #16]
   3ef18:	add	ip, r0, #4
   3ef1c:	sub	r0, fp, #136	; 0x88
   3ef20:	orr	r9, r0, #4
   3ef24:	sub	r0, fp, #96	; 0x60
   3ef28:	orr	r0, r0, #4
   3ef2c:	str	r0, [sp, #40]	; 0x28
   3ef30:	ldr	r0, [r8], #4
   3ef34:	str	r0, [sp, #44]	; 0x2c
   3ef38:	mov	r0, #0
   3ef3c:	str	r0, [sp, #48]	; 0x30
   3ef40:	ldr	r1, [sp, #44]	; 0x2c
   3ef44:	cmp	r2, #1
   3ef48:	add	r0, r1, r4
   3ef4c:	add	r3, sl, r1, lsl #2
   3ef50:	blt	3efa4 <GetDataSlab+0x175e0>
   3ef54:	ldr	r1, [sp, #60]	; 0x3c
   3ef58:	ldr	r2, [sp, #48]	; 0x30
   3ef5c:	ldr	r6, [fp, #20]
   3ef60:	mov	r7, #0
   3ef64:	add	r4, r1, r2
   3ef68:	ldr	r1, [r3]
   3ef6c:	strb	r1, [r4, r7]
   3ef70:	add	r7, r7, #1
   3ef74:	ldr	r5, [lr]
   3ef78:	ldr	r2, [r6]
   3ef7c:	add	r0, r5, r0
   3ef80:	add	r3, r3, r5, lsl #2
   3ef84:	cmp	r7, r2
   3ef88:	blt	3ef68 <GetDataSlab+0x175a4>
   3ef8c:	ldr	r1, [fp, #12]
   3ef90:	sub	r6, fp, #176	; 0xb0
   3ef94:	ldr	r4, [r1]
   3ef98:	ldr	r1, [fp, #8]
   3ef9c:	ldr	r1, [r1]
   3efa0:	b	3efb0 <GetDataSlab+0x175ec>
   3efa4:	mov	r4, r1
   3efa8:	ldr	r1, [sp, #52]	; 0x34
   3efac:	sub	r6, fp, #176	; 0xb0
   3efb0:	str	r1, [sp, #52]	; 0x34
   3efb4:	mls	r1, r5, r2, r1
   3efb8:	str	r4, [sp, #44]	; 0x2c
   3efbc:	sub	r1, r1, r4
   3efc0:	add	r4, r1, r0
   3efc4:	ldr	r0, [fp, #24]
   3efc8:	add	sl, r3, r1, lsl #2
   3efcc:	cmp	r0, #2
   3efd0:	blt	3f080 <GetDataSlab+0x176bc>
   3efd4:	mov	r7, #0
   3efd8:	ldr	r1, [r9, r7, lsl #2]
   3efdc:	mov	r0, r7
   3efe0:	add	r1, r1, #1
   3efe4:	str	r1, [r9, r7, lsl #2]
   3efe8:	ldr	r3, [ip, r7, lsl #2]
   3efec:	sdiv	r7, r1, r3
   3eff0:	mls	r1, r7, r3, r1
   3eff4:	cmp	r1, #0
   3eff8:	bne	3f070 <GetDataSlab+0x176ac>
   3effc:	mov	r1, #0
   3f000:	str	r1, [r9, r0, lsl #2]
   3f004:	add	r1, r6, r0, lsl #2
   3f008:	ldr	r7, [r1, #4]
   3f00c:	sdiv	r1, r4, r7
   3f010:	mls	r1, r1, r7, r4
   3f014:	cmp	r1, #0
   3f018:	beq	3f03c <GetDataSlab+0x17678>
   3f01c:	ldr	r3, [r6, r0, lsl #2]
   3f020:	ldr	lr, [r8, r0, lsl #2]
   3f024:	sub	r1, r7, r1
   3f028:	sub	r6, fp, #176	; 0xb0
   3f02c:	mla	r1, lr, r3, r1
   3f030:	ldr	lr, [fp, #16]
   3f034:	add	r4, r1, r4
   3f038:	b	3f054 <GetDataSlab+0x17690>
   3f03c:	ldr	r1, [r8, r0, lsl #2]
   3f040:	cmp	r1, #0
   3f044:	beq	3f058 <GetDataSlab+0x17694>
   3f048:	ldr	r3, [r6, r0, lsl #2]
   3f04c:	mla	r4, r3, r1, r4
   3f050:	mul	r1, r3, r1
   3f054:	add	sl, sl, r1, lsl #2
   3f058:	ldr	r1, [fp, #24]
   3f05c:	add	r7, r0, #1
   3f060:	add	r0, r0, #2
   3f064:	cmp	r0, r1
   3f068:	blt	3efd8 <GetDataSlab+0x17614>
   3f06c:	b	3f080 <GetDataSlab+0x176bc>
   3f070:	ldr	r1, [sp, #40]	; 0x28
   3f074:	ldr	r0, [r1, r0, lsl #2]
   3f078:	add	sl, sl, r0, lsl #2
   3f07c:	add	r4, r0, r4
   3f080:	ldr	r3, [sp, #48]	; 0x30
   3f084:	ldr	r1, [sp, #56]	; 0x38
   3f088:	mov	r0, #0
   3f08c:	add	r3, r2, r3
   3f090:	cmp	r3, r1
   3f094:	str	r3, [sp, #48]	; 0x30
   3f098:	blt	3ef40 <GetDataSlab+0x1757c>
   3f09c:	b	47ffc <GetDataSlab+0x20638>
   3f0a0:	ldr	r0, [sp, #56]	; 0x38
   3f0a4:	cmp	r0, #1
   3f0a8:	blt	2a430 <GetDataSlab+0x2a6c>
   3f0ac:	ldr	r0, [fp, #20]
   3f0b0:	ldr	lr, [fp, #16]
   3f0b4:	add	ip, r0, #4
   3f0b8:	sub	r0, fp, #136	; 0x88
   3f0bc:	orr	r9, r0, #4
   3f0c0:	sub	r0, fp, #96	; 0x60
   3f0c4:	orr	r0, r0, #4
   3f0c8:	str	r0, [sp, #40]	; 0x28
   3f0cc:	ldr	r0, [r8], #4
   3f0d0:	str	r0, [sp, #44]	; 0x2c
   3f0d4:	mov	r0, #0
   3f0d8:	str	r0, [sp, #48]	; 0x30
   3f0dc:	ldr	r1, [sp, #44]	; 0x2c
   3f0e0:	cmp	r2, #1
   3f0e4:	add	r0, r1, r4
   3f0e8:	add	r3, sl, r1, lsl #2
   3f0ec:	blt	3f140 <GetDataSlab+0x1777c>
   3f0f0:	ldr	r1, [sp, #60]	; 0x3c
   3f0f4:	ldr	r2, [sp, #48]	; 0x30
   3f0f8:	ldr	r6, [fp, #20]
   3f0fc:	mov	r7, #0
   3f100:	add	r4, r1, r2
   3f104:	ldr	r1, [r3]
   3f108:	strb	r1, [r4, r7]
   3f10c:	add	r7, r7, #1
   3f110:	ldr	r5, [lr]
   3f114:	ldr	r2, [r6]
   3f118:	add	r0, r5, r0
   3f11c:	add	r3, r3, r5, lsl #2
   3f120:	cmp	r7, r2
   3f124:	blt	3f104 <GetDataSlab+0x17740>
   3f128:	ldr	r1, [fp, #12]
   3f12c:	sub	r6, fp, #176	; 0xb0
   3f130:	ldr	r4, [r1]
   3f134:	ldr	r1, [fp, #8]
   3f138:	ldr	r1, [r1]
   3f13c:	b	3f14c <GetDataSlab+0x17788>
   3f140:	mov	r4, r1
   3f144:	ldr	r1, [sp, #52]	; 0x34
   3f148:	sub	r6, fp, #176	; 0xb0
   3f14c:	str	r1, [sp, #52]	; 0x34
   3f150:	mls	r1, r5, r2, r1
   3f154:	str	r4, [sp, #44]	; 0x2c
   3f158:	sub	r1, r1, r4
   3f15c:	add	r4, r1, r0
   3f160:	ldr	r0, [fp, #24]
   3f164:	add	sl, r3, r1, lsl #2
   3f168:	cmp	r0, #2
   3f16c:	blt	3f21c <GetDataSlab+0x17858>
   3f170:	mov	r7, #0
   3f174:	ldr	r1, [r9, r7, lsl #2]
   3f178:	mov	r0, r7
   3f17c:	add	r1, r1, #1
   3f180:	str	r1, [r9, r7, lsl #2]
   3f184:	ldr	r3, [ip, r7, lsl #2]
   3f188:	sdiv	r7, r1, r3
   3f18c:	mls	r1, r7, r3, r1
   3f190:	cmp	r1, #0
   3f194:	bne	3f20c <GetDataSlab+0x17848>
   3f198:	mov	r1, #0
   3f19c:	str	r1, [r9, r0, lsl #2]
   3f1a0:	add	r1, r6, r0, lsl #2
   3f1a4:	ldr	r7, [r1, #4]
   3f1a8:	sdiv	r1, r4, r7
   3f1ac:	mls	r1, r1, r7, r4
   3f1b0:	cmp	r1, #0
   3f1b4:	beq	3f1d8 <GetDataSlab+0x17814>
   3f1b8:	ldr	r3, [r6, r0, lsl #2]
   3f1bc:	ldr	lr, [r8, r0, lsl #2]
   3f1c0:	sub	r1, r7, r1
   3f1c4:	sub	r6, fp, #176	; 0xb0
   3f1c8:	mla	r1, lr, r3, r1
   3f1cc:	ldr	lr, [fp, #16]
   3f1d0:	add	r4, r1, r4
   3f1d4:	b	3f1f0 <GetDataSlab+0x1782c>
   3f1d8:	ldr	r1, [r8, r0, lsl #2]
   3f1dc:	cmp	r1, #0
   3f1e0:	beq	3f1f4 <GetDataSlab+0x17830>
   3f1e4:	ldr	r3, [r6, r0, lsl #2]
   3f1e8:	mla	r4, r3, r1, r4
   3f1ec:	mul	r1, r3, r1
   3f1f0:	add	sl, sl, r1, lsl #2
   3f1f4:	ldr	r1, [fp, #24]
   3f1f8:	add	r7, r0, #1
   3f1fc:	add	r0, r0, #2
   3f200:	cmp	r0, r1
   3f204:	blt	3f174 <GetDataSlab+0x177b0>
   3f208:	b	3f21c <GetDataSlab+0x17858>
   3f20c:	ldr	r1, [sp, #40]	; 0x28
   3f210:	ldr	r0, [r1, r0, lsl #2]
   3f214:	add	sl, sl, r0, lsl #2
   3f218:	add	r4, r0, r4
   3f21c:	ldr	r3, [sp, #48]	; 0x30
   3f220:	ldr	r1, [sp, #56]	; 0x38
   3f224:	mov	r0, #0
   3f228:	add	r3, r2, r3
   3f22c:	cmp	r3, r1
   3f230:	str	r3, [sp, #48]	; 0x30
   3f234:	blt	3f0dc <GetDataSlab+0x17718>
   3f238:	b	47ffc <GetDataSlab+0x20638>
   3f23c:	ldr	r0, [sp, #56]	; 0x38
   3f240:	cmp	r0, #1
   3f244:	ldr	r0, [fp, #20]
   3f248:	blt	2a430 <GetDataSlab+0x2a6c>
   3f24c:	add	r9, r0, #4
   3f250:	sub	r0, fp, #136	; 0x88
   3f254:	ldr	lr, [fp, #16]
   3f258:	orr	sl, r0, #4
   3f25c:	sub	r0, fp, #96	; 0x60
   3f260:	orr	r0, r0, #4
   3f264:	str	r0, [sp, #40]	; 0x28
   3f268:	ldr	r0, [r8], #4
   3f26c:	str	r0, [sp, #44]	; 0x2c
   3f270:	mov	r0, #0
   3f274:	str	r0, [sp, #48]	; 0x30
   3f278:	ldr	r1, [sp, #44]	; 0x2c
   3f27c:	cmp	r2, #1
   3f280:	add	r0, r1, r4
   3f284:	add	r3, ip, r1, lsl #2
   3f288:	blt	3f2e4 <GetDataSlab+0x17920>
   3f28c:	ldr	r1, [sp, #60]	; 0x3c
   3f290:	ldr	r2, [sp, #48]	; 0x30
   3f294:	ldr	r6, [fp, #20]
   3f298:	mov	r7, #0
   3f29c:	add	r4, r1, r2
   3f2a0:	vldr	s0, [r3]
   3f2a4:	vcvt.s32.f32	s0, s0
   3f2a8:	vmov	r1, s0
   3f2ac:	strb	r1, [r4, r7]
   3f2b0:	add	r7, r7, #1
   3f2b4:	ldr	r5, [lr]
   3f2b8:	ldr	r2, [r6]
   3f2bc:	add	r0, r5, r0
   3f2c0:	add	r3, r3, r5, lsl #2
   3f2c4:	cmp	r7, r2
   3f2c8:	blt	3f2a0 <GetDataSlab+0x178dc>
   3f2cc:	ldr	r1, [fp, #12]
   3f2d0:	sub	r6, fp, #176	; 0xb0
   3f2d4:	ldr	r4, [r1]
   3f2d8:	ldr	r1, [fp, #8]
   3f2dc:	ldr	r1, [r1]
   3f2e0:	b	3f2f0 <GetDataSlab+0x1792c>
   3f2e4:	mov	r4, r1
   3f2e8:	ldr	r1, [sp, #52]	; 0x34
   3f2ec:	sub	r6, fp, #176	; 0xb0
   3f2f0:	str	r1, [sp, #52]	; 0x34
   3f2f4:	mls	r1, r5, r2, r1
   3f2f8:	str	r4, [sp, #44]	; 0x2c
   3f2fc:	sub	r1, r1, r4
   3f300:	add	r4, r1, r0
   3f304:	ldr	r0, [fp, #24]
   3f308:	add	ip, r3, r1, lsl #2
   3f30c:	cmp	r0, #2
   3f310:	blt	3f3c0 <GetDataSlab+0x179fc>
   3f314:	mov	r7, #0
   3f318:	ldr	r1, [sl, r7, lsl #2]
   3f31c:	mov	r0, r7
   3f320:	add	r1, r1, #1
   3f324:	str	r1, [sl, r7, lsl #2]
   3f328:	ldr	r3, [r9, r7, lsl #2]
   3f32c:	sdiv	r7, r1, r3
   3f330:	mls	r1, r7, r3, r1
   3f334:	cmp	r1, #0
   3f338:	bne	3f3b0 <GetDataSlab+0x179ec>
   3f33c:	mov	r1, #0
   3f340:	str	r1, [sl, r0, lsl #2]
   3f344:	add	r1, r6, r0, lsl #2
   3f348:	ldr	r7, [r1, #4]
   3f34c:	sdiv	r1, r4, r7
   3f350:	mls	r1, r1, r7, r4
   3f354:	cmp	r1, #0
   3f358:	beq	3f37c <GetDataSlab+0x179b8>
   3f35c:	ldr	r3, [r6, r0, lsl #2]
   3f360:	ldr	lr, [r8, r0, lsl #2]
   3f364:	sub	r1, r7, r1
   3f368:	sub	r6, fp, #176	; 0xb0
   3f36c:	mla	r1, lr, r3, r1
   3f370:	ldr	lr, [fp, #16]
   3f374:	add	r4, r1, r4
   3f378:	b	3f394 <GetDataSlab+0x179d0>
   3f37c:	ldr	r1, [r8, r0, lsl #2]
   3f380:	cmp	r1, #0
   3f384:	beq	3f398 <GetDataSlab+0x179d4>
   3f388:	ldr	r3, [r6, r0, lsl #2]
   3f38c:	mla	r4, r3, r1, r4
   3f390:	mul	r1, r3, r1
   3f394:	add	ip, ip, r1, lsl #2
   3f398:	ldr	r1, [fp, #24]
   3f39c:	add	r7, r0, #1
   3f3a0:	add	r0, r0, #2
   3f3a4:	cmp	r0, r1
   3f3a8:	blt	3f318 <GetDataSlab+0x17954>
   3f3ac:	b	3f3c0 <GetDataSlab+0x179fc>
   3f3b0:	ldr	r1, [sp, #40]	; 0x28
   3f3b4:	ldr	r0, [r1, r0, lsl #2]
   3f3b8:	add	ip, ip, r0, lsl #2
   3f3bc:	add	r4, r0, r4
   3f3c0:	ldr	r3, [sp, #48]	; 0x30
   3f3c4:	ldr	r1, [sp, #56]	; 0x38
   3f3c8:	mov	r0, #0
   3f3cc:	add	r3, r2, r3
   3f3d0:	cmp	r3, r1
   3f3d4:	str	r3, [sp, #48]	; 0x30
   3f3d8:	blt	3f278 <GetDataSlab+0x178b4>
   3f3dc:	b	47ffc <GetDataSlab+0x20638>
   3f3e0:	ldr	r0, [sp, #56]	; 0x38
   3f3e4:	cmp	r0, #1
   3f3e8:	ldr	r0, [fp, #20]
   3f3ec:	blt	2a430 <GetDataSlab+0x2a6c>
   3f3f0:	add	r9, r0, #4
   3f3f4:	sub	r0, fp, #136	; 0x88
   3f3f8:	ldr	lr, [fp, #16]
   3f3fc:	orr	sl, r0, #4
   3f400:	sub	r0, fp, #96	; 0x60
   3f404:	orr	r0, r0, #4
   3f408:	str	r0, [sp, #40]	; 0x28
   3f40c:	ldr	r0, [r8], #4
   3f410:	str	r0, [sp, #44]	; 0x2c
   3f414:	mov	r0, #0
   3f418:	str	r0, [sp, #48]	; 0x30
   3f41c:	ldr	r1, [sp, #44]	; 0x2c
   3f420:	cmp	r2, #1
   3f424:	add	r0, r1, r4
   3f428:	add	r3, ip, r1, lsl #3
   3f42c:	blt	3f488 <GetDataSlab+0x17ac4>
   3f430:	ldr	r1, [sp, #60]	; 0x3c
   3f434:	ldr	r2, [sp, #48]	; 0x30
   3f438:	ldr	r6, [fp, #20]
   3f43c:	mov	r7, #0
   3f440:	add	r4, r1, r2
   3f444:	vldr	d16, [r3]
   3f448:	vcvt.s32.f64	s0, d16
   3f44c:	vmov	r1, s0
   3f450:	strb	r1, [r4, r7]
   3f454:	add	r7, r7, #1
   3f458:	ldr	r5, [lr]
   3f45c:	ldr	r2, [r6]
   3f460:	add	r0, r5, r0
   3f464:	add	r3, r3, r5, lsl #3
   3f468:	cmp	r7, r2
   3f46c:	blt	3f444 <GetDataSlab+0x17a80>
   3f470:	ldr	r1, [fp, #12]
   3f474:	sub	r6, fp, #176	; 0xb0
   3f478:	ldr	r4, [r1]
   3f47c:	ldr	r1, [fp, #8]
   3f480:	ldr	r1, [r1]
   3f484:	b	3f494 <GetDataSlab+0x17ad0>
   3f488:	mov	r4, r1
   3f48c:	ldr	r1, [sp, #52]	; 0x34
   3f490:	sub	r6, fp, #176	; 0xb0
   3f494:	str	r1, [sp, #52]	; 0x34
   3f498:	mls	r1, r5, r2, r1
   3f49c:	str	r4, [sp, #44]	; 0x2c
   3f4a0:	sub	r1, r1, r4
   3f4a4:	add	r4, r1, r0
   3f4a8:	ldr	r0, [fp, #24]
   3f4ac:	add	ip, r3, r1, lsl #3
   3f4b0:	cmp	r0, #2
   3f4b4:	blt	3f564 <GetDataSlab+0x17ba0>
   3f4b8:	mov	r7, #0
   3f4bc:	ldr	r1, [sl, r7, lsl #2]
   3f4c0:	mov	r0, r7
   3f4c4:	add	r1, r1, #1
   3f4c8:	str	r1, [sl, r7, lsl #2]
   3f4cc:	ldr	r3, [r9, r7, lsl #2]
   3f4d0:	sdiv	r7, r1, r3
   3f4d4:	mls	r1, r7, r3, r1
   3f4d8:	cmp	r1, #0
   3f4dc:	bne	3f554 <GetDataSlab+0x17b90>
   3f4e0:	mov	r1, #0
   3f4e4:	str	r1, [sl, r0, lsl #2]
   3f4e8:	add	r1, r6, r0, lsl #2
   3f4ec:	ldr	r7, [r1, #4]
   3f4f0:	sdiv	r1, r4, r7
   3f4f4:	mls	r1, r1, r7, r4
   3f4f8:	cmp	r1, #0
   3f4fc:	beq	3f520 <GetDataSlab+0x17b5c>
   3f500:	ldr	r3, [r6, r0, lsl #2]
   3f504:	ldr	lr, [r8, r0, lsl #2]
   3f508:	sub	r1, r7, r1
   3f50c:	sub	r6, fp, #176	; 0xb0
   3f510:	mla	r1, lr, r3, r1
   3f514:	ldr	lr, [fp, #16]
   3f518:	add	r4, r1, r4
   3f51c:	b	3f538 <GetDataSlab+0x17b74>
   3f520:	ldr	r1, [r8, r0, lsl #2]
   3f524:	cmp	r1, #0
   3f528:	beq	3f53c <GetDataSlab+0x17b78>
   3f52c:	ldr	r3, [r6, r0, lsl #2]
   3f530:	mla	r4, r3, r1, r4
   3f534:	mul	r1, r3, r1
   3f538:	add	ip, ip, r1, lsl #3
   3f53c:	ldr	r1, [fp, #24]
   3f540:	add	r7, r0, #1
   3f544:	add	r0, r0, #2
   3f548:	cmp	r0, r1
   3f54c:	blt	3f4bc <GetDataSlab+0x17af8>
   3f550:	b	3f564 <GetDataSlab+0x17ba0>
   3f554:	ldr	r1, [sp, #40]	; 0x28
   3f558:	ldr	r0, [r1, r0, lsl #2]
   3f55c:	add	ip, ip, r0, lsl #3
   3f560:	add	r4, r0, r4
   3f564:	ldr	r3, [sp, #48]	; 0x30
   3f568:	ldr	r1, [sp, #56]	; 0x38
   3f56c:	mov	r0, #0
   3f570:	add	r3, r2, r3
   3f574:	cmp	r3, r1
   3f578:	str	r3, [sp, #48]	; 0x30
   3f57c:	blt	3f41c <GetDataSlab+0x17a58>
   3f580:	b	47ffc <GetDataSlab+0x20638>
   3f584:	ldr	r0, [sp, #56]	; 0x38
   3f588:	ldr	ip, [sp, #60]	; 0x3c
   3f58c:	cmp	r0, #1
   3f590:	blt	3f708 <GetDataSlab+0x17d44>
   3f594:	ldr	r8, [fp, #12]
   3f598:	ldr	r0, [fp, #20]
   3f59c:	mov	r2, #0
   3f5a0:	ldr	r7, [r8], #4
   3f5a4:	add	r9, r0, #4
   3f5a8:	sub	r0, fp, #136	; 0x88
   3f5ac:	orr	lr, r0, #4
   3f5b0:	sub	r0, fp, #96	; 0x60
   3f5b4:	orr	r0, r0, #4
   3f5b8:	str	r0, [sp, #44]	; 0x2c
   3f5bc:	add	r3, r7, r3
   3f5c0:	add	r4, sl, r7, lsl #3
   3f5c4:	cmp	r1, #1
   3f5c8:	str	r2, [sp, #52]	; 0x34
   3f5cc:	blt	3f618 <GetDataSlab+0x17c54>
   3f5d0:	add	r0, ip, r2
   3f5d4:	ldr	r2, [fp, #20]
   3f5d8:	ldr	r6, [fp, #16]
   3f5dc:	mov	r7, #0
   3f5e0:	ldrb	r1, [r4]
   3f5e4:	strb	r1, [r0, r7]
   3f5e8:	add	r7, r7, #1
   3f5ec:	ldr	r5, [r6]
   3f5f0:	ldr	r1, [r2]
   3f5f4:	add	r3, r5, r3
   3f5f8:	add	r4, r4, r5, lsl #3
   3f5fc:	cmp	r7, r1
   3f600:	blt	3f5e0 <GetDataSlab+0x17c1c>
   3f604:	ldr	r0, [fp, #12]
   3f608:	ldr	r7, [r0]
   3f60c:	ldr	r0, [fp, #8]
   3f610:	ldr	r0, [r0]
   3f614:	b	3f61c <GetDataSlab+0x17c58>
   3f618:	ldr	r0, [sp, #28]
   3f61c:	str	r0, [sp, #28]
   3f620:	mls	r0, r5, r1, r0
   3f624:	mov	r6, r7
   3f628:	sub	r0, r0, r7
   3f62c:	add	sl, r4, r0, lsl #3
   3f630:	add	r3, r0, r3
   3f634:	ldr	r0, [fp, #24]
   3f638:	cmp	r0, #2
   3f63c:	blt	3f6f0 <GetDataSlab+0x17d2c>
   3f640:	mov	r7, #0
   3f644:	mov	r0, r7
   3f648:	ldr	r7, [lr, r7, lsl #2]
   3f64c:	add	r7, r7, #1
   3f650:	str	r7, [lr, r0, lsl #2]
   3f654:	ldr	r4, [r9, r0, lsl #2]
   3f658:	sdiv	r2, r7, r4
   3f65c:	mls	r2, r2, r4, r7
   3f660:	cmp	r2, #0
   3f664:	bne	3f6e0 <GetDataSlab+0x17d1c>
   3f668:	mov	r2, #0
   3f66c:	sub	r4, fp, #176	; 0xb0
   3f670:	str	r2, [lr, r0, lsl #2]
   3f674:	add	r2, r4, r0, lsl #2
   3f678:	ldr	r7, [r2, #4]
   3f67c:	sdiv	r2, r3, r7
   3f680:	mls	ip, r2, r7, r3
   3f684:	cmp	ip, #0
   3f688:	beq	3f6a4 <GetDataSlab+0x17ce0>
   3f68c:	ldr	r2, [r4, r0, lsl #2]
   3f690:	ldr	r4, [r8, r0, lsl #2]
   3f694:	sub	r7, r7, ip
   3f698:	mla	r2, r4, r2, r7
   3f69c:	add	r3, r2, r3
   3f6a0:	b	3f6c0 <GetDataSlab+0x17cfc>
   3f6a4:	ldr	r7, [r8, r0, lsl #2]
   3f6a8:	cmp	r7, #0
   3f6ac:	beq	3f6c4 <GetDataSlab+0x17d00>
   3f6b0:	sub	r2, fp, #176	; 0xb0
   3f6b4:	ldr	r2, [r2, r0, lsl #2]
   3f6b8:	mla	r3, r2, r7, r3
   3f6bc:	mul	r2, r2, r7
   3f6c0:	add	sl, sl, r2, lsl #3
   3f6c4:	ldr	r2, [fp, #24]
   3f6c8:	ldr	ip, [sp, #60]	; 0x3c
   3f6cc:	add	r7, r0, #1
   3f6d0:	add	r0, r0, #2
   3f6d4:	cmp	r0, r2
   3f6d8:	blt	3f644 <GetDataSlab+0x17c80>
   3f6dc:	b	3f6f0 <GetDataSlab+0x17d2c>
   3f6e0:	ldr	r2, [sp, #44]	; 0x2c
   3f6e4:	ldr	r0, [r2, r0, lsl #2]
   3f6e8:	add	sl, sl, r0, lsl #3
   3f6ec:	add	r3, r0, r3
   3f6f0:	ldr	r2, [sp, #52]	; 0x34
   3f6f4:	ldr	r0, [sp, #56]	; 0x38
   3f6f8:	mov	r7, r6
   3f6fc:	add	r2, r1, r2
   3f700:	cmp	r2, r0
   3f704:	blt	3f5bc <GetDataSlab+0x17bf8>
   3f708:	ldr	r3, [fp, #16]
   3f70c:	ldr	r6, [sp, #40]	; 0x28
   3f710:	mov	r0, #0
   3f714:	cmp	r6, #13
   3f718:	bne	47ffc <GetDataSlab+0x20638>
   3f71c:	ldr	r5, [r3]
   3f720:	ldr	r9, [fp, #8]
   3f724:	mov	r4, #0
   3f728:	sub	r3, fp, #176	; 0xb0
   3f72c:	sub	r0, r5, #1
   3f730:	str	r0, [fp, #-96]	; 0xffffffa0
   3f734:	ldr	r0, [r9]
   3f738:	sub	r9, fp, #96	; 0x60
   3f73c:	str	r0, [sp, #44]	; 0x2c
   3f740:	str	r0, [fp, #-176]	; 0xffffff50
   3f744:	ldr	r0, [fp, #20]
   3f748:	ldr	r2, [r0]
   3f74c:	ldr	r0, [fp, #24]
   3f750:	cmp	r0, #2
   3f754:	mov	r0, r2
   3f758:	str	r2, [sp, #56]	; 0x38
   3f75c:	blt	3f8d4 <GetDataSlab+0x17f10>
   3f760:	ldr	r0, [fp, #8]
   3f764:	ldr	r7, [sp, #44]	; 0x2c
   3f768:	mov	ip, #1
   3f76c:	mvn	sl, #15
   3f770:	mov	r4, #0
   3f774:	str	r2, [sp, #56]	; 0x38
   3f778:	mov	r1, r0
   3f77c:	sub	r0, r0, #4
   3f780:	mov	r6, r7
   3f784:	sub	lr, r1, #12
   3f788:	mov	r1, #0
   3f78c:	str	r1, [sp, #52]	; 0x34
   3f790:	mov	r1, r2
   3f794:	ldr	r1, [fp, #16]
   3f798:	ldr	r1, [r1, ip, lsl #2]
   3f79c:	str	r7, [r3, ip, lsl #2]
   3f7a0:	sub	r8, r1, #1
   3f7a4:	ldr	r1, [fp, #8]
   3f7a8:	str	r8, [r9, ip, lsl #2]
   3f7ac:	ldr	r3, [r1, ip, lsl #2]
   3f7b0:	ldr	r1, [sp, #52]	; 0x34
   3f7b4:	add	r1, r1, #1
   3f7b8:	str	r3, [sp, #40]	; 0x28
   3f7bc:	cmp	r1, #4
   3f7c0:	str	r1, [sp, #52]	; 0x34
   3f7c4:	bcs	3f7d4 <GetDataSlab+0x17e10>
   3f7c8:	mov	r1, r3
   3f7cc:	mov	r3, ip
   3f7d0:	b	3f874 <GetDataSlab+0x17eb0>
   3f7d4:	vmov.i32	q9, #1	; 0x00000001
   3f7d8:	vmov.i32	q10, #1	; 0x00000001
   3f7dc:	vmov.i32	q8, #1	; 0x00000001
   3f7e0:	bic	r1, r1, #3
   3f7e4:	vmov.32	d23[1], r3
   3f7e8:	bic	r9, ip, #3
   3f7ec:	str	r6, [sp, #32]
   3f7f0:	vmov.32	d18[0], r7
   3f7f4:	vmov.32	d20[0], r8
   3f7f8:	str	r1, [sp, #36]	; 0x24
   3f7fc:	sub	r3, ip, r1
   3f800:	mov	r1, lr
   3f804:	vorr	d16, d18, d18
   3f808:	vmov.i32	q9, #1	; 0x00000001
   3f80c:	vorr	d18, d20, d20
   3f810:	vld1.32	{d20-d21}, [r1], sl
   3f814:	subs	r9, r9, #4
   3f818:	vrev64.32	q12, q10
   3f81c:	vext.8	q12, q12, q12, #8
   3f820:	vext.8	q11, q11, q12, #12
   3f824:	vmul.i32	q9, q9, q12
   3f828:	vmul.i32	q8, q11, q8
   3f82c:	vorr	q11, q12, q12
   3f830:	bne	3f810 <GetDataSlab+0x17e4c>
   3f834:	ldr	r1, [sp, #52]	; 0x34
   3f838:	ldr	r6, [sp, #36]	; 0x24
   3f83c:	vext.8	q11, q9, q8, #8
   3f840:	vext.8	q12, q8, q8, #8
   3f844:	vmul.i32	q0, q9, q11
   3f848:	vmul.i32	q1, q8, q12
   3f84c:	vmul.i32	q8, q0, d0[1]
   3f850:	vmul.i32	q9, q1, d2[1]
   3f854:	vmov.32	r8, d16[0]
   3f858:	vmov.32	r7, d18[0]
   3f85c:	cmp	r1, r6
   3f860:	bne	3f86c <GetDataSlab+0x17ea8>
   3f864:	ldr	r6, [sp, #32]
   3f868:	b	3f888 <GetDataSlab+0x17ec4>
   3f86c:	ldr	r6, [sp, #32]
   3f870:	vmov.32	r1, d20[0]
   3f874:	mul	r7, r1, r7
   3f878:	ldr	r1, [r0, r3, lsl #2]
   3f87c:	subs	r3, r3, #1
   3f880:	mul	r8, r8, r1
   3f884:	bne	3f874 <GetDataSlab+0x17eb0>
   3f888:	ldr	r1, [fp, #12]
   3f88c:	sub	r3, fp, #176	; 0xb0
   3f890:	sub	r9, fp, #96	; 0x60
   3f894:	add	lr, lr, #4
   3f898:	str	r7, [r3, ip, lsl #2]
   3f89c:	str	r8, [r9, ip, lsl #2]
   3f8a0:	ldr	r1, [r1, ip, lsl #2]
   3f8a4:	mla	r4, r1, r6, r4
   3f8a8:	ldr	r1, [fp, #20]
   3f8ac:	ldr	r6, [sp, #56]	; 0x38
   3f8b0:	ldr	r1, [r1, ip, lsl #2]
   3f8b4:	add	ip, ip, #1
   3f8b8:	mul	r6, r1, r6
   3f8bc:	ldr	r1, [fp, #24]
   3f8c0:	str	r6, [sp, #56]	; 0x38
   3f8c4:	mov	r6, r7
   3f8c8:	ldr	r7, [sp, #40]	; 0x28
   3f8cc:	cmp	ip, r1
   3f8d0:	bne	3f794 <GetDataSlab+0x17dd0>
   3f8d4:	ldr	r0, [sp, #48]	; 0x30
   3f8d8:	ldr	r9, [fp, #12]
   3f8dc:	cmp	r5, #1
   3f8e0:	add	sl, r0, r4, lsl #3
   3f8e4:	mov	r8, r9
   3f8e8:	bne	46de0 <GetDataSlab+0x1f41c>
   3f8ec:	ldr	r0, [sp, #56]	; 0x38
   3f8f0:	cmp	r0, #1
   3f8f4:	blt	2a430 <GetDataSlab+0x2a6c>
   3f8f8:	ldr	r0, [fp, #20]
   3f8fc:	mov	r9, r8
   3f900:	mov	lr, #0
   3f904:	add	ip, r0, #4
   3f908:	sub	r0, fp, #136	; 0x88
   3f90c:	orr	r7, r0, #4
   3f910:	sub	r0, fp, #96	; 0x60
   3f914:	orr	r0, r0, #4
   3f918:	str	r0, [sp, #48]	; 0x30
   3f91c:	ldr	r0, [r9], #4
   3f920:	str	r0, [sp, #52]	; 0x34
   3f924:	ldr	r3, [sp, #52]	; 0x34
   3f928:	ldr	r1, [sp, #44]	; 0x2c
   3f92c:	cmp	r2, #1
   3f930:	add	r8, r3, r4
   3f934:	add	r0, sl, r3, lsl #3
   3f938:	blt	3f978 <GetDataSlab+0x17fb4>
   3f93c:	ldr	r1, [sp, #60]	; 0x3c
   3f940:	ldr	r5, [fp, #20]
   3f944:	mov	r3, r0
   3f948:	add	r4, r1, lr
   3f94c:	mov	r1, #0
   3f950:	ldrb	r2, [r3], #8
   3f954:	strb	r2, [r4, r1]
   3f958:	add	r1, r1, #1
   3f95c:	ldr	r2, [r5]
   3f960:	cmp	r1, r2
   3f964:	blt	3f950 <GetDataSlab+0x17f8c>
   3f968:	ldr	r1, [fp, #12]
   3f96c:	ldr	r3, [r1]
   3f970:	ldr	r1, [fp, #8]
   3f974:	ldr	r1, [r1]
   3f978:	str	r1, [sp, #44]	; 0x2c
   3f97c:	sub	r1, r1, r3
   3f980:	str	r3, [sp, #52]	; 0x34
   3f984:	add	sl, r0, r1, lsl #3
   3f988:	ldr	r0, [fp, #24]
   3f98c:	add	r4, r8, r1
   3f990:	cmp	r0, #2
   3f994:	blt	3fa44 <GetDataSlab+0x18080>
   3f998:	mov	r1, #0
   3f99c:	mov	r8, #0
   3f9a0:	mov	r0, r1
   3f9a4:	ldr	r1, [r7, r1, lsl #2]
   3f9a8:	add	r1, r1, #1
   3f9ac:	str	r1, [r7, r0, lsl #2]
   3f9b0:	ldr	r6, [ip, r0, lsl #2]
   3f9b4:	sdiv	r5, r1, r6
   3f9b8:	mls	r1, r5, r6, r1
   3f9bc:	cmp	r1, #0
   3f9c0:	bne	3fa34 <GetDataSlab+0x18070>
   3f9c4:	sub	r3, fp, #176	; 0xb0
   3f9c8:	str	r8, [r7, r0, lsl #2]
   3f9cc:	add	r1, r3, r0, lsl #2
   3f9d0:	ldr	r1, [r1, #4]
   3f9d4:	sdiv	r5, r4, r1
   3f9d8:	mls	r6, r5, r1, r4
   3f9dc:	cmp	r6, #0
   3f9e0:	beq	3f9fc <GetDataSlab+0x18038>
   3f9e4:	ldr	r5, [r3, r0, lsl #2]
   3f9e8:	ldr	r3, [r9, r0, lsl #2]
   3f9ec:	sub	r1, r1, r6
   3f9f0:	mla	r1, r3, r5, r1
   3f9f4:	add	r4, r1, r4
   3f9f8:	b	3fa18 <GetDataSlab+0x18054>
   3f9fc:	ldr	r1, [r9, r0, lsl #2]
   3fa00:	cmp	r1, #0
   3fa04:	beq	3fa1c <GetDataSlab+0x18058>
   3fa08:	sub	r3, fp, #176	; 0xb0
   3fa0c:	ldr	r3, [r3, r0, lsl #2]
   3fa10:	mla	r4, r3, r1, r4
   3fa14:	mul	r1, r3, r1
   3fa18:	add	sl, sl, r1, lsl #3
   3fa1c:	ldr	r3, [fp, #24]
   3fa20:	add	r1, r0, #1
   3fa24:	add	r0, r0, #2
   3fa28:	cmp	r0, r3
   3fa2c:	blt	3f9a0 <GetDataSlab+0x17fdc>
   3fa30:	b	3fa44 <GetDataSlab+0x18080>
   3fa34:	ldr	r1, [sp, #48]	; 0x30
   3fa38:	ldr	r0, [r1, r0, lsl #2]
   3fa3c:	add	sl, sl, r0, lsl #3
   3fa40:	add	r4, r0, r4
   3fa44:	ldr	r1, [sp, #56]	; 0x38
   3fa48:	add	lr, r2, lr
   3fa4c:	mov	r0, #0
   3fa50:	cmp	lr, r1
   3fa54:	blt	3f924 <GetDataSlab+0x17f60>
   3fa58:	b	47ffc <GetDataSlab+0x20638>
   3fa5c:	ldr	r0, [sp, #56]	; 0x38
   3fa60:	cmp	r0, #1
   3fa64:	blt	2a430 <GetDataSlab+0x2a6c>
   3fa68:	ldr	r0, [fp, #20]
   3fa6c:	ldr	lr, [fp, #16]
   3fa70:	add	ip, r0, #4
   3fa74:	sub	r0, fp, #136	; 0x88
   3fa78:	orr	r9, r0, #4
   3fa7c:	sub	r0, fp, #96	; 0x60
   3fa80:	orr	r0, r0, #4
   3fa84:	str	r0, [sp, #40]	; 0x28
   3fa88:	ldr	r0, [r8], #4
   3fa8c:	str	r0, [sp, #44]	; 0x2c
   3fa90:	mov	r0, #0
   3fa94:	str	r0, [sp, #48]	; 0x30
   3fa98:	ldr	r1, [sp, #44]	; 0x2c
   3fa9c:	cmp	r2, #1
   3faa0:	add	r0, r1, r4
   3faa4:	add	r3, sl, r1
   3faa8:	blt	3fafc <GetDataSlab+0x18138>
   3faac:	ldr	r1, [sp, #60]	; 0x3c
   3fab0:	ldr	r2, [sp, #48]	; 0x30
   3fab4:	ldr	r6, [fp, #20]
   3fab8:	mov	r7, #0
   3fabc:	add	r4, r1, r2
   3fac0:	ldrb	r1, [r3]
   3fac4:	strb	r1, [r4, r7]
   3fac8:	add	r7, r7, #1
   3facc:	ldr	r5, [lr]
   3fad0:	ldr	r2, [r6]
   3fad4:	add	r0, r5, r0
   3fad8:	add	r3, r3, r5
   3fadc:	cmp	r7, r2
   3fae0:	blt	3fac0 <GetDataSlab+0x180fc>
   3fae4:	ldr	r1, [fp, #12]
   3fae8:	sub	r6, fp, #176	; 0xb0
   3faec:	ldr	r4, [r1]
   3faf0:	ldr	r1, [fp, #8]
   3faf4:	ldr	r1, [r1]
   3faf8:	b	3fb08 <GetDataSlab+0x18144>
   3fafc:	mov	r4, r1
   3fb00:	ldr	r1, [sp, #52]	; 0x34
   3fb04:	sub	r6, fp, #176	; 0xb0
   3fb08:	str	r1, [sp, #52]	; 0x34
   3fb0c:	mls	r1, r5, r2, r1
   3fb10:	str	r4, [sp, #44]	; 0x2c
   3fb14:	sub	r1, r1, r4
   3fb18:	add	r4, r1, r0
   3fb1c:	ldr	r0, [fp, #24]
   3fb20:	add	sl, r3, r1
   3fb24:	cmp	r0, #2
   3fb28:	blt	3fbd4 <GetDataSlab+0x18210>
   3fb2c:	mov	r7, #0
   3fb30:	ldr	r1, [r9, r7, lsl #2]
   3fb34:	mov	r0, r7
   3fb38:	add	r1, r1, #1
   3fb3c:	str	r1, [r9, r7, lsl #2]
   3fb40:	ldr	r3, [ip, r7, lsl #2]
   3fb44:	sdiv	r7, r1, r3
   3fb48:	mls	r1, r7, r3, r1
   3fb4c:	cmp	r1, #0
   3fb50:	bne	3fbc4 <GetDataSlab+0x18200>
   3fb54:	mov	r1, #0
   3fb58:	str	r1, [r9, r0, lsl #2]
   3fb5c:	add	r1, r6, r0, lsl #2
   3fb60:	ldr	r7, [r1, #4]
   3fb64:	sdiv	r1, r4, r7
   3fb68:	mls	r1, r1, r7, r4
   3fb6c:	cmp	r1, #0
   3fb70:	beq	3fb98 <GetDataSlab+0x181d4>
   3fb74:	ldr	r3, [r6, r0, lsl #2]
   3fb78:	ldr	lr, [r8, r0, lsl #2]
   3fb7c:	sub	r1, r7, r1
   3fb80:	sub	r6, fp, #176	; 0xb0
   3fb84:	mla	r1, lr, r3, r1
   3fb88:	ldr	lr, [fp, #16]
   3fb8c:	add	r4, r1, r4
   3fb90:	add	sl, sl, r1
   3fb94:	b	3fbac <GetDataSlab+0x181e8>
   3fb98:	ldr	r1, [r8, r0, lsl #2]
   3fb9c:	cmp	r1, #0
   3fba0:	ldrne	r3, [r6, r0, lsl #2]
   3fba4:	mlane	r4, r3, r1, r4
   3fba8:	mlane	sl, r3, r1, sl
   3fbac:	ldr	r1, [fp, #24]
   3fbb0:	add	r7, r0, #1
   3fbb4:	add	r0, r0, #2
   3fbb8:	cmp	r0, r1
   3fbbc:	blt	3fb30 <GetDataSlab+0x1816c>
   3fbc0:	b	3fbd4 <GetDataSlab+0x18210>
   3fbc4:	ldr	r1, [sp, #40]	; 0x28
   3fbc8:	ldr	r0, [r1, r0, lsl #2]
   3fbcc:	add	sl, sl, r0
   3fbd0:	add	r4, r0, r4
   3fbd4:	ldr	r3, [sp, #48]	; 0x30
   3fbd8:	ldr	r1, [sp, #56]	; 0x38
   3fbdc:	mov	r0, #0
   3fbe0:	add	r3, r2, r3
   3fbe4:	cmp	r3, r1
   3fbe8:	str	r3, [sp, #48]	; 0x30
   3fbec:	blt	3fa98 <GetDataSlab+0x180d4>
   3fbf0:	b	47ffc <GetDataSlab+0x20638>
   3fbf4:	ldr	r0, [sp, #56]	; 0x38
   3fbf8:	cmp	r0, #1
   3fbfc:	blt	2a430 <GetDataSlab+0x2a6c>
   3fc00:	ldr	r0, [fp, #20]
   3fc04:	ldr	lr, [fp, #16]
   3fc08:	add	ip, r0, #4
   3fc0c:	sub	r0, fp, #136	; 0x88
   3fc10:	orr	r9, r0, #4
   3fc14:	sub	r0, fp, #96	; 0x60
   3fc18:	orr	r0, r0, #4
   3fc1c:	str	r0, [sp, #40]	; 0x28
   3fc20:	ldr	r0, [r8], #4
   3fc24:	str	r0, [sp, #44]	; 0x2c
   3fc28:	mov	r0, #0
   3fc2c:	str	r0, [sp, #48]	; 0x30
   3fc30:	ldr	r1, [sp, #44]	; 0x2c
   3fc34:	cmp	r2, #1
   3fc38:	add	r0, r1, r4
   3fc3c:	add	r3, sl, r1, lsl #1
   3fc40:	blt	3fc94 <GetDataSlab+0x182d0>
   3fc44:	ldr	r1, [sp, #60]	; 0x3c
   3fc48:	ldr	r2, [sp, #48]	; 0x30
   3fc4c:	ldr	r6, [fp, #20]
   3fc50:	mov	r7, #0
   3fc54:	add	r4, r1, r2
   3fc58:	ldrb	r1, [r3]
   3fc5c:	strb	r1, [r4, r7]
   3fc60:	add	r7, r7, #1
   3fc64:	ldr	r5, [lr]
   3fc68:	ldr	r2, [r6]
   3fc6c:	add	r0, r5, r0
   3fc70:	add	r3, r3, r5, lsl #1
   3fc74:	cmp	r7, r2
   3fc78:	blt	3fc58 <GetDataSlab+0x18294>
   3fc7c:	ldr	r1, [fp, #12]
   3fc80:	sub	r6, fp, #176	; 0xb0
   3fc84:	ldr	r4, [r1]
   3fc88:	ldr	r1, [fp, #8]
   3fc8c:	ldr	r1, [r1]
   3fc90:	b	3fca0 <GetDataSlab+0x182dc>
   3fc94:	mov	r4, r1
   3fc98:	ldr	r1, [sp, #52]	; 0x34
   3fc9c:	sub	r6, fp, #176	; 0xb0
   3fca0:	str	r1, [sp, #52]	; 0x34
   3fca4:	mls	r1, r5, r2, r1
   3fca8:	str	r4, [sp, #44]	; 0x2c
   3fcac:	sub	r1, r1, r4
   3fcb0:	add	r4, r1, r0
   3fcb4:	ldr	r0, [fp, #24]
   3fcb8:	add	sl, r3, r1, lsl #1
   3fcbc:	cmp	r0, #2
   3fcc0:	blt	3fd70 <GetDataSlab+0x183ac>
   3fcc4:	mov	r7, #0
   3fcc8:	ldr	r1, [r9, r7, lsl #2]
   3fccc:	mov	r0, r7
   3fcd0:	add	r1, r1, #1
   3fcd4:	str	r1, [r9, r7, lsl #2]
   3fcd8:	ldr	r3, [ip, r7, lsl #2]
   3fcdc:	sdiv	r7, r1, r3
   3fce0:	mls	r1, r7, r3, r1
   3fce4:	cmp	r1, #0
   3fce8:	bne	3fd60 <GetDataSlab+0x1839c>
   3fcec:	mov	r1, #0
   3fcf0:	str	r1, [r9, r0, lsl #2]
   3fcf4:	add	r1, r6, r0, lsl #2
   3fcf8:	ldr	r7, [r1, #4]
   3fcfc:	sdiv	r1, r4, r7
   3fd00:	mls	r1, r1, r7, r4
   3fd04:	cmp	r1, #0
   3fd08:	beq	3fd2c <GetDataSlab+0x18368>
   3fd0c:	ldr	r3, [r6, r0, lsl #2]
   3fd10:	ldr	lr, [r8, r0, lsl #2]
   3fd14:	sub	r1, r7, r1
   3fd18:	sub	r6, fp, #176	; 0xb0
   3fd1c:	mla	r1, lr, r3, r1
   3fd20:	ldr	lr, [fp, #16]
   3fd24:	add	r4, r1, r4
   3fd28:	b	3fd44 <GetDataSlab+0x18380>
   3fd2c:	ldr	r1, [r8, r0, lsl #2]
   3fd30:	cmp	r1, #0
   3fd34:	beq	3fd48 <GetDataSlab+0x18384>
   3fd38:	ldr	r3, [r6, r0, lsl #2]
   3fd3c:	mla	r4, r3, r1, r4
   3fd40:	mul	r1, r3, r1
   3fd44:	add	sl, sl, r1, lsl #1
   3fd48:	ldr	r1, [fp, #24]
   3fd4c:	add	r7, r0, #1
   3fd50:	add	r0, r0, #2
   3fd54:	cmp	r0, r1
   3fd58:	blt	3fcc8 <GetDataSlab+0x18304>
   3fd5c:	b	3fd70 <GetDataSlab+0x183ac>
   3fd60:	ldr	r1, [sp, #40]	; 0x28
   3fd64:	ldr	r0, [r1, r0, lsl #2]
   3fd68:	add	sl, sl, r0, lsl #1
   3fd6c:	add	r4, r0, r4
   3fd70:	ldr	r3, [sp, #48]	; 0x30
   3fd74:	ldr	r1, [sp, #56]	; 0x38
   3fd78:	mov	r0, #0
   3fd7c:	add	r3, r2, r3
   3fd80:	cmp	r3, r1
   3fd84:	str	r3, [sp, #48]	; 0x30
   3fd88:	blt	3fc30 <GetDataSlab+0x1826c>
   3fd8c:	b	47ffc <GetDataSlab+0x20638>
   3fd90:	ldr	r0, [sp, #56]	; 0x38
   3fd94:	cmp	r0, #1
   3fd98:	blt	2a430 <GetDataSlab+0x2a6c>
   3fd9c:	ldr	r0, [fp, #20]
   3fda0:	ldr	lr, [fp, #16]
   3fda4:	add	ip, r0, #4
   3fda8:	sub	r0, fp, #136	; 0x88
   3fdac:	orr	r9, r0, #4
   3fdb0:	sub	r0, fp, #96	; 0x60
   3fdb4:	orr	r0, r0, #4
   3fdb8:	str	r0, [sp, #40]	; 0x28
   3fdbc:	ldr	r0, [r8], #4
   3fdc0:	str	r0, [sp, #44]	; 0x2c
   3fdc4:	mov	r0, #0
   3fdc8:	str	r0, [sp, #48]	; 0x30
   3fdcc:	ldr	r1, [sp, #44]	; 0x2c
   3fdd0:	cmp	r2, #1
   3fdd4:	add	r0, r1, r4
   3fdd8:	add	r3, sl, r1, lsl #1
   3fddc:	blt	3fe30 <GetDataSlab+0x1846c>
   3fde0:	ldr	r1, [sp, #60]	; 0x3c
   3fde4:	ldr	r2, [sp, #48]	; 0x30
   3fde8:	ldr	r6, [fp, #20]
   3fdec:	mov	r7, #0
   3fdf0:	add	r4, r1, r2
   3fdf4:	ldrb	r1, [r3]
   3fdf8:	strb	r1, [r4, r7]
   3fdfc:	add	r7, r7, #1
   3fe00:	ldr	r5, [lr]
   3fe04:	ldr	r2, [r6]
   3fe08:	add	r0, r5, r0
   3fe0c:	add	r3, r3, r5, lsl #1
   3fe10:	cmp	r7, r2
   3fe14:	blt	3fdf4 <GetDataSlab+0x18430>
   3fe18:	ldr	r1, [fp, #12]
   3fe1c:	sub	r6, fp, #176	; 0xb0
   3fe20:	ldr	r4, [r1]
   3fe24:	ldr	r1, [fp, #8]
   3fe28:	ldr	r1, [r1]
   3fe2c:	b	3fe3c <GetDataSlab+0x18478>
   3fe30:	mov	r4, r1
   3fe34:	ldr	r1, [sp, #52]	; 0x34
   3fe38:	sub	r6, fp, #176	; 0xb0
   3fe3c:	str	r1, [sp, #52]	; 0x34
   3fe40:	mls	r1, r5, r2, r1
   3fe44:	str	r4, [sp, #44]	; 0x2c
   3fe48:	sub	r1, r1, r4
   3fe4c:	add	r4, r1, r0
   3fe50:	ldr	r0, [fp, #24]
   3fe54:	add	sl, r3, r1, lsl #1
   3fe58:	cmp	r0, #2
   3fe5c:	blt	3ff0c <GetDataSlab+0x18548>
   3fe60:	mov	r7, #0
   3fe64:	ldr	r1, [r9, r7, lsl #2]
   3fe68:	mov	r0, r7
   3fe6c:	add	r1, r1, #1
   3fe70:	str	r1, [r9, r7, lsl #2]
   3fe74:	ldr	r3, [ip, r7, lsl #2]
   3fe78:	sdiv	r7, r1, r3
   3fe7c:	mls	r1, r7, r3, r1
   3fe80:	cmp	r1, #0
   3fe84:	bne	3fefc <GetDataSlab+0x18538>
   3fe88:	mov	r1, #0
   3fe8c:	str	r1, [r9, r0, lsl #2]
   3fe90:	add	r1, r6, r0, lsl #2
   3fe94:	ldr	r7, [r1, #4]
   3fe98:	sdiv	r1, r4, r7
   3fe9c:	mls	r1, r1, r7, r4
   3fea0:	cmp	r1, #0
   3fea4:	beq	3fec8 <GetDataSlab+0x18504>
   3fea8:	ldr	r3, [r6, r0, lsl #2]
   3feac:	ldr	lr, [r8, r0, lsl #2]
   3feb0:	sub	r1, r7, r1
   3feb4:	sub	r6, fp, #176	; 0xb0
   3feb8:	mla	r1, lr, r3, r1
   3febc:	ldr	lr, [fp, #16]
   3fec0:	add	r4, r1, r4
   3fec4:	b	3fee0 <GetDataSlab+0x1851c>
   3fec8:	ldr	r1, [r8, r0, lsl #2]
   3fecc:	cmp	r1, #0
   3fed0:	beq	3fee4 <GetDataSlab+0x18520>
   3fed4:	ldr	r3, [r6, r0, lsl #2]
   3fed8:	mla	r4, r3, r1, r4
   3fedc:	mul	r1, r3, r1
   3fee0:	add	sl, sl, r1, lsl #1
   3fee4:	ldr	r1, [fp, #24]
   3fee8:	add	r7, r0, #1
   3feec:	add	r0, r0, #2
   3fef0:	cmp	r0, r1
   3fef4:	blt	3fe64 <GetDataSlab+0x184a0>
   3fef8:	b	3ff0c <GetDataSlab+0x18548>
   3fefc:	ldr	r1, [sp, #40]	; 0x28
   3ff00:	ldr	r0, [r1, r0, lsl #2]
   3ff04:	add	sl, sl, r0, lsl #1
   3ff08:	add	r4, r0, r4
   3ff0c:	ldr	r3, [sp, #48]	; 0x30
   3ff10:	ldr	r1, [sp, #56]	; 0x38
   3ff14:	mov	r0, #0
   3ff18:	add	r3, r2, r3
   3ff1c:	cmp	r3, r1
   3ff20:	str	r3, [sp, #48]	; 0x30
   3ff24:	blt	3fdcc <GetDataSlab+0x18408>
   3ff28:	b	47ffc <GetDataSlab+0x20638>
   3ff2c:	ldr	r0, [sp, #56]	; 0x38
   3ff30:	cmp	r0, #1
   3ff34:	blt	2a430 <GetDataSlab+0x2a6c>
   3ff38:	ldr	r0, [fp, #20]
   3ff3c:	ldr	lr, [fp, #16]
   3ff40:	add	ip, r0, #4
   3ff44:	sub	r0, fp, #136	; 0x88
   3ff48:	orr	r9, r0, #4
   3ff4c:	sub	r0, fp, #96	; 0x60
   3ff50:	orr	r0, r0, #4
   3ff54:	str	r0, [sp, #40]	; 0x28
   3ff58:	ldr	r0, [r8], #4
   3ff5c:	str	r0, [sp, #44]	; 0x2c
   3ff60:	mov	r0, #0
   3ff64:	str	r0, [sp, #48]	; 0x30
   3ff68:	ldr	r1, [sp, #44]	; 0x2c
   3ff6c:	cmp	r2, #1
   3ff70:	add	r0, r1, r4
   3ff74:	add	r3, sl, r1, lsl #2
   3ff78:	blt	3ffcc <GetDataSlab+0x18608>
   3ff7c:	ldr	r1, [sp, #60]	; 0x3c
   3ff80:	ldr	r2, [sp, #48]	; 0x30
   3ff84:	ldr	r6, [fp, #20]
   3ff88:	mov	r7, #0
   3ff8c:	add	r4, r1, r2
   3ff90:	ldr	r1, [r3]
   3ff94:	strb	r1, [r4, r7]
   3ff98:	add	r7, r7, #1
   3ff9c:	ldr	r5, [lr]
   3ffa0:	ldr	r2, [r6]
   3ffa4:	add	r0, r5, r0
   3ffa8:	add	r3, r3, r5, lsl #2
   3ffac:	cmp	r7, r2
   3ffb0:	blt	3ff90 <GetDataSlab+0x185cc>
   3ffb4:	ldr	r1, [fp, #12]
   3ffb8:	sub	r6, fp, #176	; 0xb0
   3ffbc:	ldr	r4, [r1]
   3ffc0:	ldr	r1, [fp, #8]
   3ffc4:	ldr	r1, [r1]
   3ffc8:	b	3ffd8 <GetDataSlab+0x18614>
   3ffcc:	mov	r4, r1
   3ffd0:	ldr	r1, [sp, #52]	; 0x34
   3ffd4:	sub	r6, fp, #176	; 0xb0
   3ffd8:	str	r1, [sp, #52]	; 0x34
   3ffdc:	mls	r1, r5, r2, r1
   3ffe0:	str	r4, [sp, #44]	; 0x2c
   3ffe4:	sub	r1, r1, r4
   3ffe8:	add	r4, r1, r0
   3ffec:	ldr	r0, [fp, #24]
   3fff0:	add	sl, r3, r1, lsl #2
   3fff4:	cmp	r0, #2
   3fff8:	blt	400a8 <GetDataSlab+0x186e4>
   3fffc:	mov	r7, #0
   40000:	ldr	r1, [r9, r7, lsl #2]
   40004:	mov	r0, r7
   40008:	add	r1, r1, #1
   4000c:	str	r1, [r9, r7, lsl #2]
   40010:	ldr	r3, [ip, r7, lsl #2]
   40014:	sdiv	r7, r1, r3
   40018:	mls	r1, r7, r3, r1
   4001c:	cmp	r1, #0
   40020:	bne	40098 <GetDataSlab+0x186d4>
   40024:	mov	r1, #0
   40028:	str	r1, [r9, r0, lsl #2]
   4002c:	add	r1, r6, r0, lsl #2
   40030:	ldr	r7, [r1, #4]
   40034:	sdiv	r1, r4, r7
   40038:	mls	r1, r1, r7, r4
   4003c:	cmp	r1, #0
   40040:	beq	40064 <GetDataSlab+0x186a0>
   40044:	ldr	r3, [r6, r0, lsl #2]
   40048:	ldr	lr, [r8, r0, lsl #2]
   4004c:	sub	r1, r7, r1
   40050:	sub	r6, fp, #176	; 0xb0
   40054:	mla	r1, lr, r3, r1
   40058:	ldr	lr, [fp, #16]
   4005c:	add	r4, r1, r4
   40060:	b	4007c <GetDataSlab+0x186b8>
   40064:	ldr	r1, [r8, r0, lsl #2]
   40068:	cmp	r1, #0
   4006c:	beq	40080 <GetDataSlab+0x186bc>
   40070:	ldr	r3, [r6, r0, lsl #2]
   40074:	mla	r4, r3, r1, r4
   40078:	mul	r1, r3, r1
   4007c:	add	sl, sl, r1, lsl #2
   40080:	ldr	r1, [fp, #24]
   40084:	add	r7, r0, #1
   40088:	add	r0, r0, #2
   4008c:	cmp	r0, r1
   40090:	blt	40000 <GetDataSlab+0x1863c>
   40094:	b	400a8 <GetDataSlab+0x186e4>
   40098:	ldr	r1, [sp, #40]	; 0x28
   4009c:	ldr	r0, [r1, r0, lsl #2]
   400a0:	add	sl, sl, r0, lsl #2
   400a4:	add	r4, r0, r4
   400a8:	ldr	r3, [sp, #48]	; 0x30
   400ac:	ldr	r1, [sp, #56]	; 0x38
   400b0:	mov	r0, #0
   400b4:	add	r3, r2, r3
   400b8:	cmp	r3, r1
   400bc:	str	r3, [sp, #48]	; 0x30
   400c0:	blt	3ff68 <GetDataSlab+0x185a4>
   400c4:	b	47ffc <GetDataSlab+0x20638>
   400c8:	ldr	r0, [sp, #56]	; 0x38
   400cc:	cmp	r0, #1
   400d0:	blt	2a430 <GetDataSlab+0x2a6c>
   400d4:	ldr	r0, [fp, #20]
   400d8:	ldr	lr, [fp, #16]
   400dc:	add	ip, r0, #4
   400e0:	sub	r0, fp, #136	; 0x88
   400e4:	orr	r9, r0, #4
   400e8:	sub	r0, fp, #96	; 0x60
   400ec:	orr	r0, r0, #4
   400f0:	str	r0, [sp, #40]	; 0x28
   400f4:	ldr	r0, [r8], #4
   400f8:	str	r0, [sp, #44]	; 0x2c
   400fc:	mov	r0, #0
   40100:	str	r0, [sp, #48]	; 0x30
   40104:	ldr	r1, [sp, #44]	; 0x2c
   40108:	cmp	r2, #1
   4010c:	add	r0, r1, r4
   40110:	add	r3, sl, r1, lsl #2
   40114:	blt	40168 <GetDataSlab+0x187a4>
   40118:	ldr	r1, [sp, #60]	; 0x3c
   4011c:	ldr	r2, [sp, #48]	; 0x30
   40120:	ldr	r6, [fp, #20]
   40124:	mov	r7, #0
   40128:	add	r4, r1, r2
   4012c:	ldr	r1, [r3]
   40130:	strb	r1, [r4, r7]
   40134:	add	r7, r7, #1
   40138:	ldr	r5, [lr]
   4013c:	ldr	r2, [r6]
   40140:	add	r0, r5, r0
   40144:	add	r3, r3, r5, lsl #2
   40148:	cmp	r7, r2
   4014c:	blt	4012c <GetDataSlab+0x18768>
   40150:	ldr	r1, [fp, #12]
   40154:	sub	r6, fp, #176	; 0xb0
   40158:	ldr	r4, [r1]
   4015c:	ldr	r1, [fp, #8]
   40160:	ldr	r1, [r1]
   40164:	b	40174 <GetDataSlab+0x187b0>
   40168:	mov	r4, r1
   4016c:	ldr	r1, [sp, #52]	; 0x34
   40170:	sub	r6, fp, #176	; 0xb0
   40174:	str	r1, [sp, #52]	; 0x34
   40178:	mls	r1, r5, r2, r1
   4017c:	str	r4, [sp, #44]	; 0x2c
   40180:	sub	r1, r1, r4
   40184:	add	r4, r1, r0
   40188:	ldr	r0, [fp, #24]
   4018c:	add	sl, r3, r1, lsl #2
   40190:	cmp	r0, #2
   40194:	blt	40244 <GetDataSlab+0x18880>
   40198:	mov	r7, #0
   4019c:	ldr	r1, [r9, r7, lsl #2]
   401a0:	mov	r0, r7
   401a4:	add	r1, r1, #1
   401a8:	str	r1, [r9, r7, lsl #2]
   401ac:	ldr	r3, [ip, r7, lsl #2]
   401b0:	sdiv	r7, r1, r3
   401b4:	mls	r1, r7, r3, r1
   401b8:	cmp	r1, #0
   401bc:	bne	40234 <GetDataSlab+0x18870>
   401c0:	mov	r1, #0
   401c4:	str	r1, [r9, r0, lsl #2]
   401c8:	add	r1, r6, r0, lsl #2
   401cc:	ldr	r7, [r1, #4]
   401d0:	sdiv	r1, r4, r7
   401d4:	mls	r1, r1, r7, r4
   401d8:	cmp	r1, #0
   401dc:	beq	40200 <GetDataSlab+0x1883c>
   401e0:	ldr	r3, [r6, r0, lsl #2]
   401e4:	ldr	lr, [r8, r0, lsl #2]
   401e8:	sub	r1, r7, r1
   401ec:	sub	r6, fp, #176	; 0xb0
   401f0:	mla	r1, lr, r3, r1
   401f4:	ldr	lr, [fp, #16]
   401f8:	add	r4, r1, r4
   401fc:	b	40218 <GetDataSlab+0x18854>
   40200:	ldr	r1, [r8, r0, lsl #2]
   40204:	cmp	r1, #0
   40208:	beq	4021c <GetDataSlab+0x18858>
   4020c:	ldr	r3, [r6, r0, lsl #2]
   40210:	mla	r4, r3, r1, r4
   40214:	mul	r1, r3, r1
   40218:	add	sl, sl, r1, lsl #2
   4021c:	ldr	r1, [fp, #24]
   40220:	add	r7, r0, #1
   40224:	add	r0, r0, #2
   40228:	cmp	r0, r1
   4022c:	blt	4019c <GetDataSlab+0x187d8>
   40230:	b	40244 <GetDataSlab+0x18880>
   40234:	ldr	r1, [sp, #40]	; 0x28
   40238:	ldr	r0, [r1, r0, lsl #2]
   4023c:	add	sl, sl, r0, lsl #2
   40240:	add	r4, r0, r4
   40244:	ldr	r3, [sp, #48]	; 0x30
   40248:	ldr	r1, [sp, #56]	; 0x38
   4024c:	mov	r0, #0
   40250:	add	r3, r2, r3
   40254:	cmp	r3, r1
   40258:	str	r3, [sp, #48]	; 0x30
   4025c:	blt	40104 <GetDataSlab+0x18740>
   40260:	b	47ffc <GetDataSlab+0x20638>
   40264:	ldr	r0, [sp, #56]	; 0x38
   40268:	cmp	r0, #1
   4026c:	ldr	r0, [fp, #20]
   40270:	blt	2a430 <GetDataSlab+0x2a6c>
   40274:	add	r9, r0, #4
   40278:	sub	r0, fp, #136	; 0x88
   4027c:	ldr	lr, [fp, #16]
   40280:	orr	sl, r0, #4
   40284:	sub	r0, fp, #96	; 0x60
   40288:	orr	r0, r0, #4
   4028c:	str	r0, [sp, #40]	; 0x28
   40290:	ldr	r0, [r8], #4
   40294:	str	r0, [sp, #44]	; 0x2c
   40298:	mov	r0, #0
   4029c:	str	r0, [sp, #48]	; 0x30
   402a0:	ldr	r1, [sp, #44]	; 0x2c
   402a4:	cmp	r2, #1
   402a8:	add	r0, r1, r4
   402ac:	add	r3, ip, r1, lsl #2
   402b0:	blt	4030c <GetDataSlab+0x18948>
   402b4:	ldr	r1, [sp, #60]	; 0x3c
   402b8:	ldr	r2, [sp, #48]	; 0x30
   402bc:	ldr	r6, [fp, #20]
   402c0:	mov	r7, #0
   402c4:	add	r4, r1, r2
   402c8:	vldr	s0, [r3]
   402cc:	vcvt.u32.f32	s0, s0
   402d0:	vmov	r1, s0
   402d4:	strb	r1, [r4, r7]
   402d8:	add	r7, r7, #1
   402dc:	ldr	r5, [lr]
   402e0:	ldr	r2, [r6]
   402e4:	add	r0, r5, r0
   402e8:	add	r3, r3, r5, lsl #2
   402ec:	cmp	r7, r2
   402f0:	blt	402c8 <GetDataSlab+0x18904>
   402f4:	ldr	r1, [fp, #12]
   402f8:	sub	r6, fp, #176	; 0xb0
   402fc:	ldr	r4, [r1]
   40300:	ldr	r1, [fp, #8]
   40304:	ldr	r1, [r1]
   40308:	b	40318 <GetDataSlab+0x18954>
   4030c:	mov	r4, r1
   40310:	ldr	r1, [sp, #52]	; 0x34
   40314:	sub	r6, fp, #176	; 0xb0
   40318:	str	r1, [sp, #52]	; 0x34
   4031c:	mls	r1, r5, r2, r1
   40320:	str	r4, [sp, #44]	; 0x2c
   40324:	sub	r1, r1, r4
   40328:	add	r4, r1, r0
   4032c:	ldr	r0, [fp, #24]
   40330:	add	ip, r3, r1, lsl #2
   40334:	cmp	r0, #2
   40338:	blt	403e8 <GetDataSlab+0x18a24>
   4033c:	mov	r7, #0
   40340:	ldr	r1, [sl, r7, lsl #2]
   40344:	mov	r0, r7
   40348:	add	r1, r1, #1
   4034c:	str	r1, [sl, r7, lsl #2]
   40350:	ldr	r3, [r9, r7, lsl #2]
   40354:	sdiv	r7, r1, r3
   40358:	mls	r1, r7, r3, r1
   4035c:	cmp	r1, #0
   40360:	bne	403d8 <GetDataSlab+0x18a14>
   40364:	mov	r1, #0
   40368:	str	r1, [sl, r0, lsl #2]
   4036c:	add	r1, r6, r0, lsl #2
   40370:	ldr	r7, [r1, #4]
   40374:	sdiv	r1, r4, r7
   40378:	mls	r1, r1, r7, r4
   4037c:	cmp	r1, #0
   40380:	beq	403a4 <GetDataSlab+0x189e0>
   40384:	ldr	r3, [r6, r0, lsl #2]
   40388:	ldr	lr, [r8, r0, lsl #2]
   4038c:	sub	r1, r7, r1
   40390:	sub	r6, fp, #176	; 0xb0
   40394:	mla	r1, lr, r3, r1
   40398:	ldr	lr, [fp, #16]
   4039c:	add	r4, r1, r4
   403a0:	b	403bc <GetDataSlab+0x189f8>
   403a4:	ldr	r1, [r8, r0, lsl #2]
   403a8:	cmp	r1, #0
   403ac:	beq	403c0 <GetDataSlab+0x189fc>
   403b0:	ldr	r3, [r6, r0, lsl #2]
   403b4:	mla	r4, r3, r1, r4
   403b8:	mul	r1, r3, r1
   403bc:	add	ip, ip, r1, lsl #2
   403c0:	ldr	r1, [fp, #24]
   403c4:	add	r7, r0, #1
   403c8:	add	r0, r0, #2
   403cc:	cmp	r0, r1
   403d0:	blt	40340 <GetDataSlab+0x1897c>
   403d4:	b	403e8 <GetDataSlab+0x18a24>
   403d8:	ldr	r1, [sp, #40]	; 0x28
   403dc:	ldr	r0, [r1, r0, lsl #2]
   403e0:	add	ip, ip, r0, lsl #2
   403e4:	add	r4, r0, r4
   403e8:	ldr	r3, [sp, #48]	; 0x30
   403ec:	ldr	r1, [sp, #56]	; 0x38
   403f0:	mov	r0, #0
   403f4:	add	r3, r2, r3
   403f8:	cmp	r3, r1
   403fc:	str	r3, [sp, #48]	; 0x30
   40400:	blt	402a0 <GetDataSlab+0x188dc>
   40404:	b	47ffc <GetDataSlab+0x20638>
   40408:	ldr	r0, [sp, #56]	; 0x38
   4040c:	cmp	r0, #1
   40410:	ldr	r0, [fp, #20]
   40414:	blt	2a430 <GetDataSlab+0x2a6c>
   40418:	add	r9, r0, #4
   4041c:	sub	r0, fp, #136	; 0x88
   40420:	ldr	lr, [fp, #16]
   40424:	orr	sl, r0, #4
   40428:	sub	r0, fp, #96	; 0x60
   4042c:	orr	r0, r0, #4
   40430:	str	r0, [sp, #40]	; 0x28
   40434:	ldr	r0, [r8], #4
   40438:	str	r0, [sp, #44]	; 0x2c
   4043c:	mov	r0, #0
   40440:	str	r0, [sp, #48]	; 0x30
   40444:	ldr	r1, [sp, #44]	; 0x2c
   40448:	cmp	r2, #1
   4044c:	add	r0, r1, r4
   40450:	add	r3, ip, r1, lsl #3
   40454:	blt	404b0 <GetDataSlab+0x18aec>
   40458:	ldr	r1, [sp, #60]	; 0x3c
   4045c:	ldr	r2, [sp, #48]	; 0x30
   40460:	ldr	r6, [fp, #20]
   40464:	mov	r7, #0
   40468:	add	r4, r1, r2
   4046c:	vldr	d16, [r3]
   40470:	vcvt.u32.f64	s0, d16
   40474:	vmov	r1, s0
   40478:	strb	r1, [r4, r7]
   4047c:	add	r7, r7, #1
   40480:	ldr	r5, [lr]
   40484:	ldr	r2, [r6]
   40488:	add	r0, r5, r0
   4048c:	add	r3, r3, r5, lsl #3
   40490:	cmp	r7, r2
   40494:	blt	4046c <GetDataSlab+0x18aa8>
   40498:	ldr	r1, [fp, #12]
   4049c:	sub	r6, fp, #176	; 0xb0
   404a0:	ldr	r4, [r1]
   404a4:	ldr	r1, [fp, #8]
   404a8:	ldr	r1, [r1]
   404ac:	b	404bc <GetDataSlab+0x18af8>
   404b0:	mov	r4, r1
   404b4:	ldr	r1, [sp, #52]	; 0x34
   404b8:	sub	r6, fp, #176	; 0xb0
   404bc:	str	r1, [sp, #52]	; 0x34
   404c0:	mls	r1, r5, r2, r1
   404c4:	str	r4, [sp, #44]	; 0x2c
   404c8:	sub	r1, r1, r4
   404cc:	add	r4, r1, r0
   404d0:	ldr	r0, [fp, #24]
   404d4:	add	ip, r3, r1, lsl #3
   404d8:	cmp	r0, #2
   404dc:	blt	4058c <GetDataSlab+0x18bc8>
   404e0:	mov	r7, #0
   404e4:	ldr	r1, [sl, r7, lsl #2]
   404e8:	mov	r0, r7
   404ec:	add	r1, r1, #1
   404f0:	str	r1, [sl, r7, lsl #2]
   404f4:	ldr	r3, [r9, r7, lsl #2]
   404f8:	sdiv	r7, r1, r3
   404fc:	mls	r1, r7, r3, r1
   40500:	cmp	r1, #0
   40504:	bne	4057c <GetDataSlab+0x18bb8>
   40508:	mov	r1, #0
   4050c:	str	r1, [sl, r0, lsl #2]
   40510:	add	r1, r6, r0, lsl #2
   40514:	ldr	r7, [r1, #4]
   40518:	sdiv	r1, r4, r7
   4051c:	mls	r1, r1, r7, r4
   40520:	cmp	r1, #0
   40524:	beq	40548 <GetDataSlab+0x18b84>
   40528:	ldr	r3, [r6, r0, lsl #2]
   4052c:	ldr	lr, [r8, r0, lsl #2]
   40530:	sub	r1, r7, r1
   40534:	sub	r6, fp, #176	; 0xb0
   40538:	mla	r1, lr, r3, r1
   4053c:	ldr	lr, [fp, #16]
   40540:	add	r4, r1, r4
   40544:	b	40560 <GetDataSlab+0x18b9c>
   40548:	ldr	r1, [r8, r0, lsl #2]
   4054c:	cmp	r1, #0
   40550:	beq	40564 <GetDataSlab+0x18ba0>
   40554:	ldr	r3, [r6, r0, lsl #2]
   40558:	mla	r4, r3, r1, r4
   4055c:	mul	r1, r3, r1
   40560:	add	ip, ip, r1, lsl #3
   40564:	ldr	r1, [fp, #24]
   40568:	add	r7, r0, #1
   4056c:	add	r0, r0, #2
   40570:	cmp	r0, r1
   40574:	blt	404e4 <GetDataSlab+0x18b20>
   40578:	b	4058c <GetDataSlab+0x18bc8>
   4057c:	ldr	r1, [sp, #40]	; 0x28
   40580:	ldr	r0, [r1, r0, lsl #2]
   40584:	add	ip, ip, r0, lsl #3
   40588:	add	r4, r0, r4
   4058c:	ldr	r3, [sp, #48]	; 0x30
   40590:	ldr	r1, [sp, #56]	; 0x38
   40594:	mov	r0, #0
   40598:	add	r3, r2, r3
   4059c:	cmp	r3, r1
   405a0:	str	r3, [sp, #48]	; 0x30
   405a4:	blt	40444 <GetDataSlab+0x18a80>
   405a8:	b	47ffc <GetDataSlab+0x20638>
   405ac:	ldr	r0, [sp, #56]	; 0x38
   405b0:	ldr	ip, [sp, #60]	; 0x3c
   405b4:	cmp	r0, #1
   405b8:	blt	40730 <GetDataSlab+0x18d6c>
   405bc:	ldr	r8, [fp, #12]
   405c0:	ldr	r0, [fp, #20]
   405c4:	mov	r2, #0
   405c8:	ldr	r7, [r8], #4
   405cc:	add	r9, r0, #4
   405d0:	sub	r0, fp, #136	; 0x88
   405d4:	orr	lr, r0, #4
   405d8:	sub	r0, fp, #96	; 0x60
   405dc:	orr	r0, r0, #4
   405e0:	str	r0, [sp, #44]	; 0x2c
   405e4:	add	r3, r7, r3
   405e8:	add	r4, sl, r7, lsl #3
   405ec:	cmp	r1, #1
   405f0:	str	r2, [sp, #52]	; 0x34
   405f4:	blt	40640 <GetDataSlab+0x18c7c>
   405f8:	add	r0, ip, r2
   405fc:	ldr	r2, [fp, #20]
   40600:	ldr	r6, [fp, #16]
   40604:	mov	r7, #0
   40608:	ldrb	r1, [r4]
   4060c:	strb	r1, [r0, r7]
   40610:	add	r7, r7, #1
   40614:	ldr	r5, [r6]
   40618:	ldr	r1, [r2]
   4061c:	add	r3, r5, r3
   40620:	add	r4, r4, r5, lsl #3
   40624:	cmp	r7, r1
   40628:	blt	40608 <GetDataSlab+0x18c44>
   4062c:	ldr	r0, [fp, #12]
   40630:	ldr	r7, [r0]
   40634:	ldr	r0, [fp, #8]
   40638:	ldr	r0, [r0]
   4063c:	b	40644 <GetDataSlab+0x18c80>
   40640:	ldr	r0, [sp, #28]
   40644:	str	r0, [sp, #28]
   40648:	mls	r0, r5, r1, r0
   4064c:	mov	r6, r7
   40650:	sub	r0, r0, r7
   40654:	add	sl, r4, r0, lsl #3
   40658:	add	r3, r0, r3
   4065c:	ldr	r0, [fp, #24]
   40660:	cmp	r0, #2
   40664:	blt	40718 <GetDataSlab+0x18d54>
   40668:	mov	r7, #0
   4066c:	mov	r0, r7
   40670:	ldr	r7, [lr, r7, lsl #2]
   40674:	add	r7, r7, #1
   40678:	str	r7, [lr, r0, lsl #2]
   4067c:	ldr	r4, [r9, r0, lsl #2]
   40680:	sdiv	r2, r7, r4
   40684:	mls	r2, r2, r4, r7
   40688:	cmp	r2, #0
   4068c:	bne	40708 <GetDataSlab+0x18d44>
   40690:	mov	r2, #0
   40694:	sub	r4, fp, #176	; 0xb0
   40698:	str	r2, [lr, r0, lsl #2]
   4069c:	add	r2, r4, r0, lsl #2
   406a0:	ldr	r7, [r2, #4]
   406a4:	sdiv	r2, r3, r7
   406a8:	mls	ip, r2, r7, r3
   406ac:	cmp	ip, #0
   406b0:	beq	406cc <GetDataSlab+0x18d08>
   406b4:	ldr	r2, [r4, r0, lsl #2]
   406b8:	ldr	r4, [r8, r0, lsl #2]
   406bc:	sub	r7, r7, ip
   406c0:	mla	r2, r4, r2, r7
   406c4:	add	r3, r2, r3
   406c8:	b	406e8 <GetDataSlab+0x18d24>
   406cc:	ldr	r7, [r8, r0, lsl #2]
   406d0:	cmp	r7, #0
   406d4:	beq	406ec <GetDataSlab+0x18d28>
   406d8:	sub	r2, fp, #176	; 0xb0
   406dc:	ldr	r2, [r2, r0, lsl #2]
   406e0:	mla	r3, r2, r7, r3
   406e4:	mul	r2, r2, r7
   406e8:	add	sl, sl, r2, lsl #3
   406ec:	ldr	r2, [fp, #24]
   406f0:	ldr	ip, [sp, #60]	; 0x3c
   406f4:	add	r7, r0, #1
   406f8:	add	r0, r0, #2
   406fc:	cmp	r0, r2
   40700:	blt	4066c <GetDataSlab+0x18ca8>
   40704:	b	40718 <GetDataSlab+0x18d54>
   40708:	ldr	r2, [sp, #44]	; 0x2c
   4070c:	ldr	r0, [r2, r0, lsl #2]
   40710:	add	sl, sl, r0, lsl #3
   40714:	add	r3, r0, r3
   40718:	ldr	r2, [sp, #52]	; 0x34
   4071c:	ldr	r0, [sp, #56]	; 0x38
   40720:	mov	r7, r6
   40724:	add	r2, r1, r2
   40728:	cmp	r2, r0
   4072c:	blt	405e4 <GetDataSlab+0x18c20>
   40730:	ldr	r3, [fp, #16]
   40734:	ldr	r6, [sp, #40]	; 0x28
   40738:	mov	r0, #0
   4073c:	cmp	r6, #13
   40740:	bne	47ffc <GetDataSlab+0x20638>
   40744:	ldr	r5, [r3]
   40748:	ldr	r9, [fp, #8]
   4074c:	mov	r4, #0
   40750:	sub	r3, fp, #176	; 0xb0
   40754:	sub	r0, r5, #1
   40758:	str	r0, [fp, #-96]	; 0xffffffa0
   4075c:	ldr	r0, [r9]
   40760:	sub	r9, fp, #96	; 0x60
   40764:	str	r0, [sp, #44]	; 0x2c
   40768:	str	r0, [fp, #-176]	; 0xffffff50
   4076c:	ldr	r0, [fp, #20]
   40770:	ldr	r2, [r0]
   40774:	ldr	r0, [fp, #24]
   40778:	cmp	r0, #2
   4077c:	mov	r0, r2
   40780:	str	r2, [sp, #56]	; 0x38
   40784:	blt	408fc <GetDataSlab+0x18f38>
   40788:	ldr	r0, [fp, #8]
   4078c:	ldr	r7, [sp, #44]	; 0x2c
   40790:	mov	ip, #1
   40794:	mvn	sl, #15
   40798:	mov	r4, #0
   4079c:	str	r2, [sp, #56]	; 0x38
   407a0:	mov	r1, r0
   407a4:	sub	r0, r0, #4
   407a8:	mov	r6, r7
   407ac:	sub	lr, r1, #12
   407b0:	mov	r1, #0
   407b4:	str	r1, [sp, #52]	; 0x34
   407b8:	mov	r1, r2
   407bc:	ldr	r1, [fp, #16]
   407c0:	ldr	r1, [r1, ip, lsl #2]
   407c4:	str	r7, [r3, ip, lsl #2]
   407c8:	sub	r8, r1, #1
   407cc:	ldr	r1, [fp, #8]
   407d0:	str	r8, [r9, ip, lsl #2]
   407d4:	ldr	r3, [r1, ip, lsl #2]
   407d8:	ldr	r1, [sp, #52]	; 0x34
   407dc:	add	r1, r1, #1
   407e0:	str	r3, [sp, #40]	; 0x28
   407e4:	cmp	r1, #4
   407e8:	str	r1, [sp, #52]	; 0x34
   407ec:	bcs	407fc <GetDataSlab+0x18e38>
   407f0:	mov	r1, r3
   407f4:	mov	r3, ip
   407f8:	b	4089c <GetDataSlab+0x18ed8>
   407fc:	vmov.i32	q9, #1	; 0x00000001
   40800:	vmov.i32	q10, #1	; 0x00000001
   40804:	vmov.i32	q8, #1	; 0x00000001
   40808:	bic	r1, r1, #3
   4080c:	vmov.32	d23[1], r3
   40810:	bic	r9, ip, #3
   40814:	str	r6, [sp, #32]
   40818:	vmov.32	d18[0], r7
   4081c:	vmov.32	d20[0], r8
   40820:	str	r1, [sp, #36]	; 0x24
   40824:	sub	r3, ip, r1
   40828:	mov	r1, lr
   4082c:	vorr	d16, d18, d18
   40830:	vmov.i32	q9, #1	; 0x00000001
   40834:	vorr	d18, d20, d20
   40838:	vld1.32	{d20-d21}, [r1], sl
   4083c:	subs	r9, r9, #4
   40840:	vrev64.32	q12, q10
   40844:	vext.8	q12, q12, q12, #8
   40848:	vext.8	q11, q11, q12, #12
   4084c:	vmul.i32	q9, q9, q12
   40850:	vmul.i32	q8, q11, q8
   40854:	vorr	q11, q12, q12
   40858:	bne	40838 <GetDataSlab+0x18e74>
   4085c:	ldr	r1, [sp, #52]	; 0x34
   40860:	ldr	r6, [sp, #36]	; 0x24
   40864:	vext.8	q11, q9, q8, #8
   40868:	vext.8	q12, q8, q8, #8
   4086c:	vmul.i32	q0, q9, q11
   40870:	vmul.i32	q1, q8, q12
   40874:	vmul.i32	q8, q0, d0[1]
   40878:	vmul.i32	q9, q1, d2[1]
   4087c:	vmov.32	r8, d16[0]
   40880:	vmov.32	r7, d18[0]
   40884:	cmp	r1, r6
   40888:	bne	40894 <GetDataSlab+0x18ed0>
   4088c:	ldr	r6, [sp, #32]
   40890:	b	408b0 <GetDataSlab+0x18eec>
   40894:	ldr	r6, [sp, #32]
   40898:	vmov.32	r1, d20[0]
   4089c:	mul	r7, r1, r7
   408a0:	ldr	r1, [r0, r3, lsl #2]
   408a4:	subs	r3, r3, #1
   408a8:	mul	r8, r8, r1
   408ac:	bne	4089c <GetDataSlab+0x18ed8>
   408b0:	ldr	r1, [fp, #12]
   408b4:	sub	r3, fp, #176	; 0xb0
   408b8:	sub	r9, fp, #96	; 0x60
   408bc:	add	lr, lr, #4
   408c0:	str	r7, [r3, ip, lsl #2]
   408c4:	str	r8, [r9, ip, lsl #2]
   408c8:	ldr	r1, [r1, ip, lsl #2]
   408cc:	mla	r4, r1, r6, r4
   408d0:	ldr	r1, [fp, #20]
   408d4:	ldr	r6, [sp, #56]	; 0x38
   408d8:	ldr	r1, [r1, ip, lsl #2]
   408dc:	add	ip, ip, #1
   408e0:	mul	r6, r1, r6
   408e4:	ldr	r1, [fp, #24]
   408e8:	str	r6, [sp, #56]	; 0x38
   408ec:	mov	r6, r7
   408f0:	ldr	r7, [sp, #40]	; 0x28
   408f4:	cmp	ip, r1
   408f8:	bne	407bc <GetDataSlab+0x18df8>
   408fc:	ldr	r0, [sp, #48]	; 0x30
   40900:	ldr	r9, [fp, #12]
   40904:	cmp	r5, #1
   40908:	add	sl, r0, r4, lsl #3
   4090c:	mov	r8, r9
   40910:	bne	46f7c <GetDataSlab+0x1f5b8>
   40914:	ldr	r0, [sp, #56]	; 0x38
   40918:	cmp	r0, #1
   4091c:	blt	2a430 <GetDataSlab+0x2a6c>
   40920:	ldr	r0, [fp, #20]
   40924:	mov	r9, r8
   40928:	mov	lr, #0
   4092c:	add	ip, r0, #4
   40930:	sub	r0, fp, #136	; 0x88
   40934:	orr	r7, r0, #4
   40938:	sub	r0, fp, #96	; 0x60
   4093c:	orr	r0, r0, #4
   40940:	str	r0, [sp, #48]	; 0x30
   40944:	ldr	r0, [r9], #4
   40948:	str	r0, [sp, #52]	; 0x34
   4094c:	ldr	r3, [sp, #52]	; 0x34
   40950:	ldr	r1, [sp, #44]	; 0x2c
   40954:	cmp	r2, #1
   40958:	add	r8, r3, r4
   4095c:	add	r0, sl, r3, lsl #3
   40960:	blt	409a0 <GetDataSlab+0x18fdc>
   40964:	ldr	r1, [sp, #60]	; 0x3c
   40968:	ldr	r5, [fp, #20]
   4096c:	mov	r3, r0
   40970:	add	r4, r1, lr
   40974:	mov	r1, #0
   40978:	ldrb	r2, [r3], #8
   4097c:	strb	r2, [r4, r1]
   40980:	add	r1, r1, #1
   40984:	ldr	r2, [r5]
   40988:	cmp	r1, r2
   4098c:	blt	40978 <GetDataSlab+0x18fb4>
   40990:	ldr	r1, [fp, #12]
   40994:	ldr	r3, [r1]
   40998:	ldr	r1, [fp, #8]
   4099c:	ldr	r1, [r1]
   409a0:	str	r1, [sp, #44]	; 0x2c
   409a4:	sub	r1, r1, r3
   409a8:	str	r3, [sp, #52]	; 0x34
   409ac:	add	sl, r0, r1, lsl #3
   409b0:	ldr	r0, [fp, #24]
   409b4:	add	r4, r8, r1
   409b8:	cmp	r0, #2
   409bc:	blt	40a6c <GetDataSlab+0x190a8>
   409c0:	mov	r1, #0
   409c4:	mov	r8, #0
   409c8:	mov	r0, r1
   409cc:	ldr	r1, [r7, r1, lsl #2]
   409d0:	add	r1, r1, #1
   409d4:	str	r1, [r7, r0, lsl #2]
   409d8:	ldr	r6, [ip, r0, lsl #2]
   409dc:	sdiv	r5, r1, r6
   409e0:	mls	r1, r5, r6, r1
   409e4:	cmp	r1, #0
   409e8:	bne	40a5c <GetDataSlab+0x19098>
   409ec:	sub	r3, fp, #176	; 0xb0
   409f0:	str	r8, [r7, r0, lsl #2]
   409f4:	add	r1, r3, r0, lsl #2
   409f8:	ldr	r1, [r1, #4]
   409fc:	sdiv	r5, r4, r1
   40a00:	mls	r6, r5, r1, r4
   40a04:	cmp	r6, #0
   40a08:	beq	40a24 <GetDataSlab+0x19060>
   40a0c:	ldr	r5, [r3, r0, lsl #2]
   40a10:	ldr	r3, [r9, r0, lsl #2]
   40a14:	sub	r1, r1, r6
   40a18:	mla	r1, r3, r5, r1
   40a1c:	add	r4, r1, r4
   40a20:	b	40a40 <GetDataSlab+0x1907c>
   40a24:	ldr	r1, [r9, r0, lsl #2]
   40a28:	cmp	r1, #0
   40a2c:	beq	40a44 <GetDataSlab+0x19080>
   40a30:	sub	r3, fp, #176	; 0xb0
   40a34:	ldr	r3, [r3, r0, lsl #2]
   40a38:	mla	r4, r3, r1, r4
   40a3c:	mul	r1, r3, r1
   40a40:	add	sl, sl, r1, lsl #3
   40a44:	ldr	r3, [fp, #24]
   40a48:	add	r1, r0, #1
   40a4c:	add	r0, r0, #2
   40a50:	cmp	r0, r3
   40a54:	blt	409c8 <GetDataSlab+0x19004>
   40a58:	b	40a6c <GetDataSlab+0x190a8>
   40a5c:	ldr	r1, [sp, #48]	; 0x30
   40a60:	ldr	r0, [r1, r0, lsl #2]
   40a64:	add	sl, sl, r0, lsl #3
   40a68:	add	r4, r0, r4
   40a6c:	ldr	r1, [sp, #56]	; 0x38
   40a70:	add	lr, r2, lr
   40a74:	mov	r0, #0
   40a78:	cmp	lr, r1
   40a7c:	blt	4094c <GetDataSlab+0x18f88>
   40a80:	b	47ffc <GetDataSlab+0x20638>
   40a84:	ldr	r0, [sp, #56]	; 0x38
   40a88:	sub	r2, fp, #96	; 0x60
   40a8c:	cmp	r0, #1
   40a90:	ldr	r0, [fp, #12]
   40a94:	blt	47ff8 <GetDataSlab+0x20634>
   40a98:	ldr	r1, [sp, #32]
   40a9c:	ldr	r7, [sp, #36]	; 0x24
   40aa0:	add	r8, r0, #4
   40aa4:	sub	r0, fp, #136	; 0x88
   40aa8:	add	lr, sl, #4
   40aac:	mls	r7, r1, r9, r7
   40ab0:	mov	sl, r1
   40ab4:	str	r7, [sp, #48]	; 0x30
   40ab8:	mul	r7, r1, r9
   40abc:	orr	r1, r0, #4
   40ac0:	orr	r0, r2, #4
   40ac4:	str	r0, [sp, #36]	; 0x24
   40ac8:	lsl	r0, sl, #1
   40acc:	str	r7, [sp, #40]	; 0x28
   40ad0:	str	r0, [sp, #44]	; 0x2c
   40ad4:	mov	r0, #0
   40ad8:	str	r0, [sp, #52]	; 0x34
   40adc:	ldr	r0, [fp, #12]
   40ae0:	cmp	sl, #1
   40ae4:	ldr	r0, [r0]
   40ae8:	blt	40b24 <GetDataSlab+0x19160>
   40aec:	ldr	r2, [sp, #40]	; 0x28
   40af0:	ldr	ip, [sp, #60]	; 0x3c
   40af4:	add	r4, r2, r3
   40af8:	add	r3, r5, r2
   40afc:	add	r5, r5, r0
   40b00:	ldrb	r2, [r5], r9
   40b04:	subs	sl, sl, #1
   40b08:	strh	r2, [ip], #2
   40b0c:	bne	40b00 <GetDataSlab+0x1913c>
   40b10:	ldr	ip, [sp, #60]	; 0x3c
   40b14:	ldr	sl, [sp, #32]
   40b18:	add	r4, r4, r0
   40b1c:	mov	r5, r3
   40b20:	b	40b2c <GetDataSlab+0x19168>
   40b24:	ldr	ip, [sp, #60]	; 0x3c
   40b28:	add	r4, r0, r3
   40b2c:	ldr	r2, [sp, #48]	; 0x30
   40b30:	sub	r0, r2, r0
   40b34:	add	r5, r5, r2
   40b38:	add	r3, r4, r0
   40b3c:	ldr	r0, [fp, #24]
   40b40:	cmp	r0, #2
   40b44:	blt	40bf0 <GetDataSlab+0x1922c>
   40b48:	mov	r4, #0
   40b4c:	ldr	r2, [r1, r4, lsl #2]
   40b50:	mov	r0, r4
   40b54:	add	r2, r2, #1
   40b58:	str	r2, [r1, r4, lsl #2]
   40b5c:	ldr	r4, [lr, r4, lsl #2]
   40b60:	sdiv	r6, r2, r4
   40b64:	mls	r2, r6, r4, r2
   40b68:	cmp	r2, #0
   40b6c:	bne	40be0 <GetDataSlab+0x1921c>
   40b70:	mov	r2, #0
   40b74:	sub	r6, fp, #176	; 0xb0
   40b78:	str	r2, [r1, r0, lsl #2]
   40b7c:	add	r2, r6, r0, lsl #2
   40b80:	ldr	r4, [r2, #4]
   40b84:	sdiv	r2, r3, r4
   40b88:	mls	r2, r2, r4, r3
   40b8c:	cmp	r2, #0
   40b90:	beq	40bb0 <GetDataSlab+0x191ec>
   40b94:	ldr	r6, [r6, r0, lsl #2]
   40b98:	ldr	r7, [r8, r0, lsl #2]
   40b9c:	sub	r2, r4, r2
   40ba0:	mla	r2, r7, r6, r2
   40ba4:	add	r3, r2, r3
   40ba8:	add	r5, r5, r2
   40bac:	b	40bc8 <GetDataSlab+0x19204>
   40bb0:	ldr	r2, [r8, r0, lsl #2]
   40bb4:	cmp	r2, #0
   40bb8:	subne	r4, fp, #176	; 0xb0
   40bbc:	ldrne	r7, [r4, r0, lsl #2]
   40bc0:	mlane	r3, r7, r2, r3
   40bc4:	mlane	r5, r7, r2, r5
   40bc8:	ldr	r2, [fp, #24]
   40bcc:	add	r4, r0, #1
   40bd0:	add	r0, r0, #2
   40bd4:	cmp	r0, r2
   40bd8:	blt	40b4c <GetDataSlab+0x19188>
   40bdc:	b	40bf0 <GetDataSlab+0x1922c>
   40be0:	ldr	r2, [sp, #36]	; 0x24
   40be4:	ldr	r0, [r2, r0, lsl #2]
   40be8:	add	r5, r5, r0
   40bec:	add	r3, r0, r3
   40bf0:	ldr	r7, [sp, #52]	; 0x34
   40bf4:	ldr	r0, [sp, #44]	; 0x2c
   40bf8:	ldr	r2, [sp, #56]	; 0x38
   40bfc:	add	r7, r7, sl
   40c00:	add	ip, ip, r0
   40c04:	mov	r0, #0
   40c08:	cmp	r7, r2
   40c0c:	str	ip, [sp, #60]	; 0x3c
   40c10:	str	r7, [sp, #52]	; 0x34
   40c14:	blt	40adc <GetDataSlab+0x19118>
   40c18:	b	47ffc <GetDataSlab+0x20638>
   40c1c:	ldr	r0, [sp, #52]	; 0x34
   40c20:	ldr	r1, [fp, #12]
   40c24:	ldr	r3, [sp, #44]	; 0x2c
   40c28:	cmp	r0, #1
   40c2c:	blt	47ff8 <GetDataSlab+0x20634>
   40c30:	ldr	r0, [sp, #40]	; 0x28
   40c34:	ldr	r5, [r1], #4
   40c38:	add	lr, sl, #4
   40c3c:	mov	sl, #0
   40c40:	mov	ip, #0
   40c44:	mls	r0, r3, r6, r0
   40c48:	str	r1, [sp, #56]	; 0x38
   40c4c:	lsl	r1, r6, #1
   40c50:	str	r5, [sp, #48]	; 0x30
   40c54:	sub	r0, r0, r5
   40c58:	str	r0, [sp, #40]	; 0x28
   40c5c:	sub	r0, fp, #136	; 0x88
   40c60:	orr	r7, r0, #4
   40c64:	sub	r0, fp, #96	; 0x60
   40c68:	orr	r0, r0, #4
   40c6c:	str	r0, [sp, #28]
   40c70:	mla	r0, r3, r6, r5
   40c74:	str	r0, [sp, #32]
   40c78:	lsl	r0, r3, #1
   40c7c:	str	r0, [sp, #36]	; 0x24
   40c80:	ldr	r0, [sp, #48]	; 0x30
   40c84:	cmp	r3, #1
   40c88:	blt	40cb0 <GetDataSlab+0x192ec>
   40c8c:	ldr	r0, [sp, #48]	; 0x30
   40c90:	ldr	r3, [sp, #44]	; 0x2c
   40c94:	ldr	r6, [sp, #60]	; 0x3c
   40c98:	add	r0, r9, r0, lsl #1
   40c9c:	ldrh	r8, [r0], r1
   40ca0:	subs	r3, r3, #1
   40ca4:	strh	r8, [r6], #2
   40ca8:	bne	40c9c <GetDataSlab+0x192d8>
   40cac:	ldr	r0, [sp, #32]
   40cb0:	ldr	r4, [sp, #40]	; 0x28
   40cb4:	add	r3, r9, r4, lsl #1
   40cb8:	add	r9, r3, r0, lsl #1
   40cbc:	add	r0, r0, r2
   40cc0:	add	r2, r0, r4
   40cc4:	ldr	r0, [fp, #24]
   40cc8:	cmp	r0, #2
   40ccc:	blt	40d7c <GetDataSlab+0x193b8>
   40cd0:	ldr	r8, [sp, #56]	; 0x38
   40cd4:	mov	r3, #0
   40cd8:	mov	r0, r3
   40cdc:	ldr	r3, [r7, r3, lsl #2]
   40ce0:	add	r3, r3, #1
   40ce4:	str	r3, [r7, r0, lsl #2]
   40ce8:	ldr	r6, [lr, r0, lsl #2]
   40cec:	sdiv	r4, r3, r6
   40cf0:	mls	r3, r4, r6, r3
   40cf4:	cmp	r3, #0
   40cf8:	bne	40d6c <GetDataSlab+0x193a8>
   40cfc:	sub	r5, fp, #176	; 0xb0
   40d00:	str	sl, [r7, r0, lsl #2]
   40d04:	add	r3, r5, r0, lsl #2
   40d08:	ldr	r3, [r3, #4]
   40d0c:	sdiv	r4, r2, r3
   40d10:	mls	r6, r4, r3, r2
   40d14:	cmp	r6, #0
   40d18:	beq	40d34 <GetDataSlab+0x19370>
   40d1c:	ldr	r4, [r5, r0, lsl #2]
   40d20:	ldr	r5, [r8, r0, lsl #2]
   40d24:	sub	r3, r3, r6
   40d28:	mla	r3, r5, r4, r3
   40d2c:	add	r2, r3, r2
   40d30:	b	40d50 <GetDataSlab+0x1938c>
   40d34:	ldr	r3, [r8, r0, lsl #2]
   40d38:	cmp	r3, #0
   40d3c:	beq	40d54 <GetDataSlab+0x19390>
   40d40:	sub	r4, fp, #176	; 0xb0
   40d44:	ldr	r4, [r4, r0, lsl #2]
   40d48:	mla	r2, r4, r3, r2
   40d4c:	mul	r3, r4, r3
   40d50:	add	r9, r9, r3, lsl #1
   40d54:	ldr	r4, [fp, #24]
   40d58:	add	r3, r0, #1
   40d5c:	add	r0, r0, #2
   40d60:	cmp	r0, r4
   40d64:	blt	40cd8 <GetDataSlab+0x19314>
   40d68:	b	40d7c <GetDataSlab+0x193b8>
   40d6c:	ldr	r3, [sp, #28]
   40d70:	ldr	r0, [r3, r0, lsl #2]
   40d74:	add	r9, r9, r0, lsl #1
   40d78:	add	r2, r0, r2
   40d7c:	ldr	r0, [sp, #60]	; 0x3c
   40d80:	ldr	r3, [sp, #36]	; 0x24
   40d84:	ldr	r4, [sp, #52]	; 0x34
   40d88:	add	r0, r0, r3
   40d8c:	ldr	r3, [sp, #44]	; 0x2c
   40d90:	str	r0, [sp, #60]	; 0x3c
   40d94:	mov	r0, #0
   40d98:	add	ip, ip, r3
   40d9c:	cmp	ip, r4
   40da0:	blt	40c80 <GetDataSlab+0x192bc>
   40da4:	b	47ffc <GetDataSlab+0x20638>
   40da8:	ldr	r0, [sp, #52]	; 0x34
   40dac:	ldr	r1, [fp, #12]
   40db0:	ldr	r3, [sp, #44]	; 0x2c
   40db4:	cmp	r0, #1
   40db8:	blt	47ff8 <GetDataSlab+0x20634>
   40dbc:	ldr	r0, [sp, #40]	; 0x28
   40dc0:	ldr	r5, [r1], #4
   40dc4:	add	lr, sl, #4
   40dc8:	mov	sl, #0
   40dcc:	mov	ip, #0
   40dd0:	mls	r0, r3, r6, r0
   40dd4:	str	r1, [sp, #56]	; 0x38
   40dd8:	lsl	r1, r6, #1
   40ddc:	str	r5, [sp, #48]	; 0x30
   40de0:	sub	r0, r0, r5
   40de4:	str	r0, [sp, #40]	; 0x28
   40de8:	sub	r0, fp, #136	; 0x88
   40dec:	orr	r7, r0, #4
   40df0:	sub	r0, fp, #96	; 0x60
   40df4:	orr	r0, r0, #4
   40df8:	str	r0, [sp, #28]
   40dfc:	mla	r0, r3, r6, r5
   40e00:	str	r0, [sp, #32]
   40e04:	lsl	r0, r3, #1
   40e08:	str	r0, [sp, #36]	; 0x24
   40e0c:	ldr	r0, [sp, #48]	; 0x30
   40e10:	cmp	r3, #1
   40e14:	blt	40e3c <GetDataSlab+0x19478>
   40e18:	ldr	r0, [sp, #48]	; 0x30
   40e1c:	ldr	r3, [sp, #44]	; 0x2c
   40e20:	ldr	r6, [sp, #60]	; 0x3c
   40e24:	add	r0, r9, r0, lsl #1
   40e28:	ldrh	r8, [r0], r1
   40e2c:	subs	r3, r3, #1
   40e30:	strh	r8, [r6], #2
   40e34:	bne	40e28 <GetDataSlab+0x19464>
   40e38:	ldr	r0, [sp, #32]
   40e3c:	ldr	r4, [sp, #40]	; 0x28
   40e40:	add	r3, r9, r4, lsl #1
   40e44:	add	r9, r3, r0, lsl #1
   40e48:	add	r0, r0, r2
   40e4c:	add	r2, r0, r4
   40e50:	ldr	r0, [fp, #24]
   40e54:	cmp	r0, #2
   40e58:	blt	40f08 <GetDataSlab+0x19544>
   40e5c:	ldr	r8, [sp, #56]	; 0x38
   40e60:	mov	r3, #0
   40e64:	mov	r0, r3
   40e68:	ldr	r3, [r7, r3, lsl #2]
   40e6c:	add	r3, r3, #1
   40e70:	str	r3, [r7, r0, lsl #2]
   40e74:	ldr	r6, [lr, r0, lsl #2]
   40e78:	sdiv	r4, r3, r6
   40e7c:	mls	r3, r4, r6, r3
   40e80:	cmp	r3, #0
   40e84:	bne	40ef8 <GetDataSlab+0x19534>
   40e88:	sub	r5, fp, #176	; 0xb0
   40e8c:	str	sl, [r7, r0, lsl #2]
   40e90:	add	r3, r5, r0, lsl #2
   40e94:	ldr	r3, [r3, #4]
   40e98:	sdiv	r4, r2, r3
   40e9c:	mls	r6, r4, r3, r2
   40ea0:	cmp	r6, #0
   40ea4:	beq	40ec0 <GetDataSlab+0x194fc>
   40ea8:	ldr	r4, [r5, r0, lsl #2]
   40eac:	ldr	r5, [r8, r0, lsl #2]
   40eb0:	sub	r3, r3, r6
   40eb4:	mla	r3, r5, r4, r3
   40eb8:	add	r2, r3, r2
   40ebc:	b	40edc <GetDataSlab+0x19518>
   40ec0:	ldr	r3, [r8, r0, lsl #2]
   40ec4:	cmp	r3, #0
   40ec8:	beq	40ee0 <GetDataSlab+0x1951c>
   40ecc:	sub	r4, fp, #176	; 0xb0
   40ed0:	ldr	r4, [r4, r0, lsl #2]
   40ed4:	mla	r2, r4, r3, r2
   40ed8:	mul	r3, r4, r3
   40edc:	add	r9, r9, r3, lsl #1
   40ee0:	ldr	r4, [fp, #24]
   40ee4:	add	r3, r0, #1
   40ee8:	add	r0, r0, #2
   40eec:	cmp	r0, r4
   40ef0:	blt	40e64 <GetDataSlab+0x194a0>
   40ef4:	b	40f08 <GetDataSlab+0x19544>
   40ef8:	ldr	r3, [sp, #28]
   40efc:	ldr	r0, [r3, r0, lsl #2]
   40f00:	add	r9, r9, r0, lsl #1
   40f04:	add	r2, r0, r2
   40f08:	ldr	r0, [sp, #60]	; 0x3c
   40f0c:	ldr	r3, [sp, #36]	; 0x24
   40f10:	ldr	r4, [sp, #52]	; 0x34
   40f14:	add	r0, r0, r3
   40f18:	ldr	r3, [sp, #44]	; 0x2c
   40f1c:	str	r0, [sp, #60]	; 0x3c
   40f20:	mov	r0, #0
   40f24:	add	ip, ip, r3
   40f28:	cmp	ip, r4
   40f2c:	blt	40e0c <GetDataSlab+0x19448>
   40f30:	b	47ffc <GetDataSlab+0x20638>
   40f34:	ldr	r0, [sp, #56]	; 0x38
   40f38:	ldr	r2, [sp, #52]	; 0x34
   40f3c:	sub	r1, fp, #96	; 0x60
   40f40:	cmp	r0, #1
   40f44:	ldr	r0, [fp, #12]
   40f48:	blt	47ff8 <GetDataSlab+0x20634>
   40f4c:	add	r9, r0, #4
   40f50:	ldr	r0, [fp, #20]
   40f54:	ldr	r7, [sp, #36]	; 0x24
   40f58:	mov	r8, #0
   40f5c:	add	ip, r0, #4
   40f60:	sub	r0, fp, #136	; 0x88
   40f64:	mls	r7, r2, r6, r7
   40f68:	orr	r5, r0, #4
   40f6c:	orr	r0, r1, #4
   40f70:	lsl	r1, r6, #2
   40f74:	str	r7, [sp, #44]	; 0x2c
   40f78:	str	r0, [sp, #32]
   40f7c:	mul	r0, r2, r6
   40f80:	str	r0, [sp, #36]	; 0x24
   40f84:	lsl	r0, r2, #1
   40f88:	str	r0, [sp, #40]	; 0x28
   40f8c:	ldr	r0, [fp, #12]
   40f90:	cmp	r2, #1
   40f94:	ldr	r0, [r0]
   40f98:	blt	40fd4 <GetDataSlab+0x19610>
   40f9c:	ldr	r7, [sp, #36]	; 0x24
   40fa0:	ldr	lr, [sp, #60]	; 0x3c
   40fa4:	add	r4, sl, r0, lsl #2
   40fa8:	add	r6, r7, r3
   40fac:	add	r3, sl, r7, lsl #2
   40fb0:	str	r3, [sp, #48]	; 0x30
   40fb4:	mov	r3, r2
   40fb8:	ldr	r7, [r4], r1
   40fbc:	subs	r3, r3, #1
   40fc0:	strh	r7, [lr], #2
   40fc4:	bne	40fb8 <GetDataSlab+0x195f4>
   40fc8:	ldr	sl, [sp, #48]	; 0x30
   40fcc:	add	r2, r6, r0
   40fd0:	b	40fd8 <GetDataSlab+0x19614>
   40fd4:	add	r2, r0, r3
   40fd8:	ldr	r3, [sp, #44]	; 0x2c
   40fdc:	sub	lr, fp, #176	; 0xb0
   40fe0:	sub	r0, r3, r0
   40fe4:	add	sl, sl, r3, lsl #2
   40fe8:	add	r3, r2, r0
   40fec:	ldr	r0, [fp, #24]
   40ff0:	cmp	r0, #2
   40ff4:	blt	4109c <GetDataSlab+0x196d8>
   40ff8:	mov	r2, #0
   40ffc:	mov	r0, r2
   41000:	ldr	r2, [r5, r2, lsl #2]
   41004:	add	r2, r2, #1
   41008:	str	r2, [r5, r0, lsl #2]
   4100c:	ldr	r7, [ip, r0, lsl #2]
   41010:	sdiv	r6, r2, r7
   41014:	mls	r2, r6, r7, r2
   41018:	cmp	r2, #0
   4101c:	bne	4108c <GetDataSlab+0x196c8>
   41020:	mov	r2, #0
   41024:	str	r2, [r5, r0, lsl #2]
   41028:	add	r2, lr, r0, lsl #2
   4102c:	ldr	r2, [r2, #4]
   41030:	sdiv	r7, r3, r2
   41034:	mls	r7, r7, r2, r3
   41038:	cmp	r7, #0
   4103c:	beq	41058 <GetDataSlab+0x19694>
   41040:	ldr	r6, [lr, r0, lsl #2]
   41044:	ldr	r4, [r9, r0, lsl #2]
   41048:	sub	r2, r2, r7
   4104c:	mla	r2, r4, r6, r2
   41050:	add	r3, r2, r3
   41054:	b	41070 <GetDataSlab+0x196ac>
   41058:	ldr	r2, [r9, r0, lsl #2]
   4105c:	cmp	r2, #0
   41060:	beq	41074 <GetDataSlab+0x196b0>
   41064:	ldr	r7, [lr, r0, lsl #2]
   41068:	mla	r3, r7, r2, r3
   4106c:	mul	r2, r7, r2
   41070:	add	sl, sl, r2, lsl #2
   41074:	ldr	r7, [fp, #24]
   41078:	add	r2, r0, #1
   4107c:	add	r0, r0, #2
   41080:	cmp	r0, r7
   41084:	blt	40ffc <GetDataSlab+0x19638>
   41088:	b	4109c <GetDataSlab+0x196d8>
   4108c:	ldr	r2, [sp, #32]
   41090:	ldr	r0, [r2, r0, lsl #2]
   41094:	add	sl, sl, r0, lsl #2
   41098:	add	r3, r0, r3
   4109c:	ldr	r0, [sp, #60]	; 0x3c
   410a0:	ldr	r2, [sp, #40]	; 0x28
   410a4:	ldr	r7, [sp, #56]	; 0x38
   410a8:	add	r0, r0, r2
   410ac:	ldr	r2, [sp, #52]	; 0x34
   410b0:	str	r0, [sp, #60]	; 0x3c
   410b4:	mov	r0, #0
   410b8:	add	r8, r8, r2
   410bc:	cmp	r8, r7
   410c0:	blt	40f8c <GetDataSlab+0x195c8>
   410c4:	b	47ffc <GetDataSlab+0x20638>
   410c8:	ldr	r0, [sp, #56]	; 0x38
   410cc:	ldr	r2, [sp, #52]	; 0x34
   410d0:	sub	r1, fp, #96	; 0x60
   410d4:	cmp	r0, #1
   410d8:	ldr	r0, [fp, #12]
   410dc:	blt	47ff8 <GetDataSlab+0x20634>
   410e0:	add	r9, r0, #4
   410e4:	ldr	r0, [fp, #20]
   410e8:	ldr	r7, [sp, #36]	; 0x24
   410ec:	mov	r8, #0
   410f0:	add	ip, r0, #4
   410f4:	sub	r0, fp, #136	; 0x88
   410f8:	mls	r7, r2, r6, r7
   410fc:	orr	r5, r0, #4
   41100:	orr	r0, r1, #4
   41104:	lsl	r1, r6, #2
   41108:	str	r7, [sp, #44]	; 0x2c
   4110c:	str	r0, [sp, #32]
   41110:	mul	r0, r2, r6
   41114:	str	r0, [sp, #36]	; 0x24
   41118:	lsl	r0, r2, #1
   4111c:	str	r0, [sp, #40]	; 0x28
   41120:	ldr	r0, [fp, #12]
   41124:	cmp	r2, #1
   41128:	ldr	r0, [r0]
   4112c:	blt	41168 <GetDataSlab+0x197a4>
   41130:	ldr	r7, [sp, #36]	; 0x24
   41134:	ldr	lr, [sp, #60]	; 0x3c
   41138:	add	r4, sl, r0, lsl #2
   4113c:	add	r6, r7, r3
   41140:	add	r3, sl, r7, lsl #2
   41144:	str	r3, [sp, #48]	; 0x30
   41148:	mov	r3, r2
   4114c:	ldr	r7, [r4], r1
   41150:	subs	r3, r3, #1
   41154:	strh	r7, [lr], #2
   41158:	bne	4114c <GetDataSlab+0x19788>
   4115c:	ldr	sl, [sp, #48]	; 0x30
   41160:	add	r2, r6, r0
   41164:	b	4116c <GetDataSlab+0x197a8>
   41168:	add	r2, r0, r3
   4116c:	ldr	r3, [sp, #44]	; 0x2c
   41170:	sub	lr, fp, #176	; 0xb0
   41174:	sub	r0, r3, r0
   41178:	add	sl, sl, r3, lsl #2
   4117c:	add	r3, r2, r0
   41180:	ldr	r0, [fp, #24]
   41184:	cmp	r0, #2
   41188:	blt	41230 <GetDataSlab+0x1986c>
   4118c:	mov	r2, #0
   41190:	mov	r0, r2
   41194:	ldr	r2, [r5, r2, lsl #2]
   41198:	add	r2, r2, #1
   4119c:	str	r2, [r5, r0, lsl #2]
   411a0:	ldr	r7, [ip, r0, lsl #2]
   411a4:	sdiv	r6, r2, r7
   411a8:	mls	r2, r6, r7, r2
   411ac:	cmp	r2, #0
   411b0:	bne	41220 <GetDataSlab+0x1985c>
   411b4:	mov	r2, #0
   411b8:	str	r2, [r5, r0, lsl #2]
   411bc:	add	r2, lr, r0, lsl #2
   411c0:	ldr	r2, [r2, #4]
   411c4:	sdiv	r7, r3, r2
   411c8:	mls	r7, r7, r2, r3
   411cc:	cmp	r7, #0
   411d0:	beq	411ec <GetDataSlab+0x19828>
   411d4:	ldr	r6, [lr, r0, lsl #2]
   411d8:	ldr	r4, [r9, r0, lsl #2]
   411dc:	sub	r2, r2, r7
   411e0:	mla	r2, r4, r6, r2
   411e4:	add	r3, r2, r3
   411e8:	b	41204 <GetDataSlab+0x19840>
   411ec:	ldr	r2, [r9, r0, lsl #2]
   411f0:	cmp	r2, #0
   411f4:	beq	41208 <GetDataSlab+0x19844>
   411f8:	ldr	r7, [lr, r0, lsl #2]
   411fc:	mla	r3, r7, r2, r3
   41200:	mul	r2, r7, r2
   41204:	add	sl, sl, r2, lsl #2
   41208:	ldr	r7, [fp, #24]
   4120c:	add	r2, r0, #1
   41210:	add	r0, r0, #2
   41214:	cmp	r0, r7
   41218:	blt	41190 <GetDataSlab+0x197cc>
   4121c:	b	41230 <GetDataSlab+0x1986c>
   41220:	ldr	r2, [sp, #32]
   41224:	ldr	r0, [r2, r0, lsl #2]
   41228:	add	sl, sl, r0, lsl #2
   4122c:	add	r3, r0, r3
   41230:	ldr	r0, [sp, #60]	; 0x3c
   41234:	ldr	r2, [sp, #40]	; 0x28
   41238:	ldr	r7, [sp, #56]	; 0x38
   4123c:	add	r0, r0, r2
   41240:	ldr	r2, [sp, #52]	; 0x34
   41244:	str	r0, [sp, #60]	; 0x3c
   41248:	mov	r0, #0
   4124c:	add	r8, r8, r2
   41250:	cmp	r8, r7
   41254:	blt	41120 <GetDataSlab+0x1975c>
   41258:	b	47ffc <GetDataSlab+0x20638>
   4125c:	ldr	r0, [sp, #52]	; 0x34
   41260:	ldr	r1, [fp, #12]
   41264:	ldr	r3, [sp, #44]	; 0x2c
   41268:	cmp	r0, #1
   4126c:	blt	47ff8 <GetDataSlab+0x20634>
   41270:	ldr	r0, [sp, #36]	; 0x24
   41274:	ldr	r5, [r1], #4
   41278:	add	lr, sl, #4
   4127c:	mov	ip, #0
   41280:	mov	sl, #0
   41284:	mls	r0, r3, r6, r0
   41288:	str	r1, [sp, #56]	; 0x38
   4128c:	lsl	r1, r6, #2
   41290:	str	r5, [sp, #48]	; 0x30
   41294:	sub	r0, r0, r5
   41298:	str	r0, [sp, #40]	; 0x28
   4129c:	sub	r0, fp, #136	; 0x88
   412a0:	orr	r7, r0, #4
   412a4:	sub	r0, fp, #96	; 0x60
   412a8:	orr	r0, r0, #4
   412ac:	str	r0, [sp, #28]
   412b0:	mla	r0, r3, r6, r5
   412b4:	str	r0, [sp, #32]
   412b8:	lsl	r0, r3, #1
   412bc:	str	r0, [sp, #36]	; 0x24
   412c0:	ldr	r0, [sp, #48]	; 0x30
   412c4:	cmp	r3, #1
   412c8:	blt	412fc <GetDataSlab+0x19938>
   412cc:	ldr	r0, [sp, #48]	; 0x30
   412d0:	ldr	r3, [sp, #44]	; 0x2c
   412d4:	ldr	r6, [sp, #60]	; 0x3c
   412d8:	add	r0, r9, r0, lsl #2
   412dc:	vldr	s0, [r0]
   412e0:	add	r0, r0, r1
   412e4:	subs	r3, r3, #1
   412e8:	vcvt.s32.f32	s0, s0
   412ec:	vmov	r8, s0
   412f0:	strh	r8, [r6], #2
   412f4:	bne	412dc <GetDataSlab+0x19918>
   412f8:	ldr	r0, [sp, #32]
   412fc:	ldr	r4, [sp, #40]	; 0x28
   41300:	add	r3, r9, r4, lsl #2
   41304:	add	r9, r3, r0, lsl #2
   41308:	add	r0, r0, r2
   4130c:	add	r2, r0, r4
   41310:	ldr	r0, [fp, #24]
   41314:	cmp	r0, #2
   41318:	blt	413c8 <GetDataSlab+0x19a04>
   4131c:	ldr	r8, [sp, #56]	; 0x38
   41320:	mov	r3, #0
   41324:	mov	r0, r3
   41328:	ldr	r3, [r7, r3, lsl #2]
   4132c:	add	r3, r3, #1
   41330:	str	r3, [r7, r0, lsl #2]
   41334:	ldr	r6, [lr, r0, lsl #2]
   41338:	sdiv	r5, r3, r6
   4133c:	mls	r3, r5, r6, r3
   41340:	cmp	r3, #0
   41344:	bne	413b8 <GetDataSlab+0x199f4>
   41348:	sub	r4, fp, #176	; 0xb0
   4134c:	str	ip, [r7, r0, lsl #2]
   41350:	add	r3, r4, r0, lsl #2
   41354:	ldr	r3, [r3, #4]
   41358:	sdiv	r5, r2, r3
   4135c:	mls	r6, r5, r3, r2
   41360:	cmp	r6, #0
   41364:	beq	41380 <GetDataSlab+0x199bc>
   41368:	ldr	r5, [r4, r0, lsl #2]
   4136c:	ldr	r4, [r8, r0, lsl #2]
   41370:	sub	r3, r3, r6
   41374:	mla	r3, r4, r5, r3
   41378:	add	r2, r3, r2
   4137c:	b	4139c <GetDataSlab+0x199d8>
   41380:	ldr	r3, [r8, r0, lsl #2]
   41384:	cmp	r3, #0
   41388:	beq	413a0 <GetDataSlab+0x199dc>
   4138c:	sub	r4, fp, #176	; 0xb0
   41390:	ldr	r4, [r4, r0, lsl #2]
   41394:	mla	r2, r4, r3, r2
   41398:	mul	r3, r4, r3
   4139c:	add	r9, r9, r3, lsl #2
   413a0:	ldr	r4, [fp, #24]
   413a4:	add	r3, r0, #1
   413a8:	add	r0, r0, #2
   413ac:	cmp	r0, r4
   413b0:	blt	41324 <GetDataSlab+0x19960>
   413b4:	b	413c8 <GetDataSlab+0x19a04>
   413b8:	ldr	r3, [sp, #28]
   413bc:	ldr	r0, [r3, r0, lsl #2]
   413c0:	add	r9, r9, r0, lsl #2
   413c4:	add	r2, r0, r2
   413c8:	ldr	r0, [sp, #60]	; 0x3c
   413cc:	ldr	r3, [sp, #36]	; 0x24
   413d0:	ldr	r4, [sp, #52]	; 0x34
   413d4:	add	r0, r0, r3
   413d8:	ldr	r3, [sp, #44]	; 0x2c
   413dc:	str	r0, [sp, #60]	; 0x3c
   413e0:	mov	r0, #0
   413e4:	add	sl, sl, r3
   413e8:	cmp	sl, r4
   413ec:	blt	412c0 <GetDataSlab+0x198fc>
   413f0:	b	47ffc <GetDataSlab+0x20638>
   413f4:	ldr	r0, [sp, #52]	; 0x34
   413f8:	ldr	r1, [fp, #12]
   413fc:	ldr	r3, [sp, #44]	; 0x2c
   41400:	ldr	r7, [fp, #20]
   41404:	cmp	r0, #1
   41408:	blt	47ff8 <GetDataSlab+0x20634>
   4140c:	ldr	r0, [sp, #40]	; 0x28
   41410:	ldr	r5, [r1], #4
   41414:	add	lr, r7, #4
   41418:	mov	sl, #0
   4141c:	mov	ip, #0
   41420:	mls	r0, r3, r6, r0
   41424:	str	r1, [sp, #56]	; 0x38
   41428:	lsl	r1, r6, #3
   4142c:	str	r5, [sp, #48]	; 0x30
   41430:	sub	r0, r0, r5
   41434:	str	r0, [sp, #40]	; 0x28
   41438:	sub	r0, fp, #136	; 0x88
   4143c:	orr	r7, r0, #4
   41440:	sub	r0, fp, #96	; 0x60
   41444:	orr	r0, r0, #4
   41448:	str	r0, [sp, #28]
   4144c:	mla	r0, r3, r6, r5
   41450:	str	r0, [sp, #32]
   41454:	lsl	r0, r3, #1
   41458:	str	r0, [sp, #36]	; 0x24
   4145c:	ldr	r0, [sp, #48]	; 0x30
   41460:	cmp	r3, #1
   41464:	blt	41498 <GetDataSlab+0x19ad4>
   41468:	ldr	r0, [sp, #48]	; 0x30
   4146c:	ldr	r3, [sp, #44]	; 0x2c
   41470:	ldr	r6, [sp, #60]	; 0x3c
   41474:	add	r0, r9, r0, lsl #3
   41478:	vldr	d16, [r0]
   4147c:	add	r0, r0, r1
   41480:	subs	r3, r3, #1
   41484:	vcvt.s32.f64	s0, d16
   41488:	vmov	r8, s0
   4148c:	strh	r8, [r6], #2
   41490:	bne	41478 <GetDataSlab+0x19ab4>
   41494:	ldr	r0, [sp, #32]
   41498:	ldr	r4, [sp, #40]	; 0x28
   4149c:	add	r3, r9, r4, lsl #3
   414a0:	add	r9, r3, r0, lsl #3
   414a4:	add	r0, r0, r2
   414a8:	add	r2, r0, r4
   414ac:	ldr	r0, [fp, #24]
   414b0:	cmp	r0, #2
   414b4:	blt	41564 <GetDataSlab+0x19ba0>
   414b8:	ldr	r8, [sp, #56]	; 0x38
   414bc:	mov	r3, #0
   414c0:	mov	r0, r3
   414c4:	ldr	r3, [r7, r3, lsl #2]
   414c8:	add	r3, r3, #1
   414cc:	str	r3, [r7, r0, lsl #2]
   414d0:	ldr	r6, [lr, r0, lsl #2]
   414d4:	sdiv	r5, r3, r6
   414d8:	mls	r3, r5, r6, r3
   414dc:	cmp	r3, #0
   414e0:	bne	41554 <GetDataSlab+0x19b90>
   414e4:	sub	r4, fp, #176	; 0xb0
   414e8:	str	sl, [r7, r0, lsl #2]
   414ec:	add	r3, r4, r0, lsl #2
   414f0:	ldr	r3, [r3, #4]
   414f4:	sdiv	r5, r2, r3
   414f8:	mls	r6, r5, r3, r2
   414fc:	cmp	r6, #0
   41500:	beq	4151c <GetDataSlab+0x19b58>
   41504:	ldr	r5, [r4, r0, lsl #2]
   41508:	ldr	r4, [r8, r0, lsl #2]
   4150c:	sub	r3, r3, r6
   41510:	mla	r3, r4, r5, r3
   41514:	add	r2, r3, r2
   41518:	b	41538 <GetDataSlab+0x19b74>
   4151c:	ldr	r3, [r8, r0, lsl #2]
   41520:	cmp	r3, #0
   41524:	beq	4153c <GetDataSlab+0x19b78>
   41528:	sub	r4, fp, #176	; 0xb0
   4152c:	ldr	r4, [r4, r0, lsl #2]
   41530:	mla	r2, r4, r3, r2
   41534:	mul	r3, r4, r3
   41538:	add	r9, r9, r3, lsl #3
   4153c:	ldr	r4, [fp, #24]
   41540:	add	r3, r0, #1
   41544:	add	r0, r0, #2
   41548:	cmp	r0, r4
   4154c:	blt	414c0 <GetDataSlab+0x19afc>
   41550:	b	41564 <GetDataSlab+0x19ba0>
   41554:	ldr	r3, [sp, #28]
   41558:	ldr	r0, [r3, r0, lsl #2]
   4155c:	add	r9, r9, r0, lsl #3
   41560:	add	r2, r0, r2
   41564:	ldr	r0, [sp, #60]	; 0x3c
   41568:	ldr	r3, [sp, #36]	; 0x24
   4156c:	ldr	r4, [sp, #52]	; 0x34
   41570:	add	r0, r0, r3
   41574:	ldr	r3, [sp, #44]	; 0x2c
   41578:	str	r0, [sp, #60]	; 0x3c
   4157c:	mov	r0, #0
   41580:	add	ip, ip, r3
   41584:	cmp	ip, r4
   41588:	blt	4145c <GetDataSlab+0x19a98>
   4158c:	b	47ffc <GetDataSlab+0x20638>
   41590:	ldr	r0, [sp, #56]	; 0x38
   41594:	ldr	r2, [sp, #60]	; 0x3c
   41598:	ldr	r8, [fp, #12]
   4159c:	cmp	r0, #1
   415a0:	blt	41714 <GetDataSlab+0x19d50>
   415a4:	ldr	r3, [sp, #44]	; 0x2c
   415a8:	ldr	r0, [sp, #36]	; 0x24
   415ac:	ldr	ip, [r8], #4
   415b0:	add	lr, sl, #4
   415b4:	mov	sl, #0
   415b8:	str	r2, [sp, #52]	; 0x34
   415bc:	mls	r0, r3, r7, r0
   415c0:	sub	r0, r0, ip
   415c4:	str	r0, [sp, #36]	; 0x24
   415c8:	sub	r0, fp, #136	; 0x88
   415cc:	orr	r6, r0, #4
   415d0:	sub	r0, fp, #96	; 0x60
   415d4:	orr	r0, r0, #4
   415d8:	str	r0, [sp, #24]
   415dc:	mla	r0, r3, r7, ip
   415e0:	lsl	r7, r7, #3
   415e4:	str	r0, [sp, #28]
   415e8:	lsl	r0, r3, #1
   415ec:	str	r0, [sp, #32]
   415f0:	cmp	r3, #1
   415f4:	mov	r0, ip
   415f8:	blt	41624 <GetDataSlab+0x19c60>
   415fc:	ldr	r0, [sp, #44]	; 0x2c
   41600:	ldr	r3, [sp, #52]	; 0x34
   41604:	mov	r4, ip
   41608:	add	r2, r9, ip, lsl #3
   4160c:	ldrh	ip, [r2], r7
   41610:	subs	r0, r0, #1
   41614:	strh	ip, [r3], #2
   41618:	bne	4160c <GetDataSlab+0x19c48>
   4161c:	ldr	r0, [sp, #28]
   41620:	mov	ip, r4
   41624:	ldr	r3, [sp, #36]	; 0x24
   41628:	add	r2, r9, r3, lsl #3
   4162c:	add	r9, r2, r0, lsl #3
   41630:	add	r0, r0, r1
   41634:	add	r1, r0, r3
   41638:	ldr	r0, [fp, #24]
   4163c:	cmp	r0, #2
   41640:	blt	416f0 <GetDataSlab+0x19d2c>
   41644:	mov	r0, #0
   41648:	mov	r2, r0
   4164c:	ldr	r0, [r6, r0, lsl #2]
   41650:	add	r0, r0, #1
   41654:	str	r0, [r6, r2, lsl #2]
   41658:	ldr	r3, [lr, r2, lsl #2]
   4165c:	sdiv	r4, r0, r3
   41660:	mls	r0, r4, r3, r0
   41664:	cmp	r0, #0
   41668:	bne	416e0 <GetDataSlab+0x19d1c>
   4166c:	mov	r0, #0
   41670:	sub	r5, fp, #176	; 0xb0
   41674:	str	r0, [r6, r2, lsl #2]
   41678:	add	r0, r5, r2, lsl #2
   4167c:	ldr	r0, [r0, #4]
   41680:	sdiv	r3, r1, r0
   41684:	mls	r3, r3, r0, r1
   41688:	cmp	r3, #0
   4168c:	beq	416a8 <GetDataSlab+0x19ce4>
   41690:	ldr	r4, [r5, r2, lsl #2]
   41694:	ldr	r5, [r8, r2, lsl #2]
   41698:	sub	r0, r0, r3
   4169c:	mla	r0, r5, r4, r0
   416a0:	add	r1, r0, r1
   416a4:	b	416c4 <GetDataSlab+0x19d00>
   416a8:	ldr	r0, [r8, r2, lsl #2]
   416ac:	cmp	r0, #0
   416b0:	beq	416c8 <GetDataSlab+0x19d04>
   416b4:	sub	r3, fp, #176	; 0xb0
   416b8:	ldr	r3, [r3, r2, lsl #2]
   416bc:	mla	r1, r3, r0, r1
   416c0:	mul	r0, r3, r0
   416c4:	add	r9, r9, r0, lsl #3
   416c8:	ldr	r3, [fp, #24]
   416cc:	add	r0, r2, #1
   416d0:	add	r2, r2, #2
   416d4:	cmp	r2, r3
   416d8:	blt	41648 <GetDataSlab+0x19c84>
   416dc:	b	416f0 <GetDataSlab+0x19d2c>
   416e0:	ldr	r0, [sp, #24]
   416e4:	ldr	r0, [r0, r2, lsl #2]
   416e8:	add	r9, r9, r0, lsl #3
   416ec:	add	r1, r0, r1
   416f0:	ldr	r0, [sp, #32]
   416f4:	ldr	r2, [sp, #52]	; 0x34
   416f8:	ldr	r3, [sp, #44]	; 0x2c
   416fc:	add	r2, r2, r0
   41700:	ldr	r0, [sp, #56]	; 0x38
   41704:	add	sl, sl, r3
   41708:	str	r2, [sp, #52]	; 0x34
   4170c:	cmp	sl, r0
   41710:	blt	415f0 <GetDataSlab+0x19c2c>
   41714:	ldr	ip, [fp, #16]
   41718:	ldr	r6, [sp, #40]	; 0x28
   4171c:	mov	r0, #0
   41720:	cmp	r6, #13
   41724:	bne	47ffc <GetDataSlab+0x20638>
   41728:	ldr	r0, [ip]
   4172c:	ldr	r9, [fp, #8]
   41730:	ldr	r6, [fp, #20]
   41734:	mov	r2, #0
   41738:	sub	r5, fp, #176	; 0xb0
   4173c:	str	r0, [sp, #24]
   41740:	sub	r0, r0, #1
   41744:	str	r0, [fp, #-96]	; 0xffffffa0
   41748:	ldr	r0, [r9]
   4174c:	sub	r9, fp, #96	; 0x60
   41750:	str	r0, [fp, #-176]	; 0xffffff50
   41754:	str	r0, [sp, #36]	; 0x24
   41758:	ldr	r0, [fp, #24]
   4175c:	ldr	r1, [r6]
   41760:	cmp	r0, #2
   41764:	str	r1, [sp, #44]	; 0x2c
   41768:	str	r1, [sp, #52]	; 0x34
   4176c:	blt	418c0 <GetDataSlab+0x19efc>
   41770:	ldr	r0, [fp, #8]
   41774:	ldr	r3, [sp, #36]	; 0x24
   41778:	mov	r4, #1
   4177c:	mvn	lr, #15
   41780:	mov	r2, #0
   41784:	sub	r7, r0, #4
   41788:	sub	ip, r0, #12
   4178c:	mov	r0, #0
   41790:	mov	r8, r3
   41794:	str	r0, [sp, #56]	; 0x38
   41798:	ldr	r0, [sp, #44]	; 0x2c
   4179c:	str	r0, [sp, #52]	; 0x34
   417a0:	ldr	r1, [fp, #16]
   417a4:	ldr	r0, [fp, #8]
   417a8:	ldr	r1, [r1, r4, lsl #2]
   417ac:	str	r3, [r5, r4, lsl #2]
   417b0:	sub	sl, r1, #1
   417b4:	str	sl, [r9, r4, lsl #2]
   417b8:	ldr	r1, [r0, r4, lsl #2]
   417bc:	ldr	r0, [sp, #56]	; 0x38
   417c0:	add	r0, r0, #1
   417c4:	str	r1, [sp, #40]	; 0x28
   417c8:	cmp	r0, #4
   417cc:	str	r0, [sp, #56]	; 0x38
   417d0:	bcs	417dc <GetDataSlab+0x19e18>
   417d4:	mov	r5, r4
   417d8:	b	41860 <GetDataSlab+0x19e9c>
   417dc:	vmov.i32	q9, #1	; 0x00000001
   417e0:	vmov.i32	q10, #1	; 0x00000001
   417e4:	vmov.i32	q8, #1	; 0x00000001
   417e8:	vmov.32	d23[1], r1
   417ec:	bic	r1, r0, #3
   417f0:	bic	r9, r4, #3
   417f4:	vmov.32	d18[0], r3
   417f8:	vmov.32	d20[0], sl
   417fc:	sub	r5, r4, r1
   41800:	mov	r3, ip
   41804:	vorr	d16, d18, d18
   41808:	vmov.i32	q9, #1	; 0x00000001
   4180c:	vorr	d18, d20, d20
   41810:	vld1.32	{d20-d21}, [r3], lr
   41814:	subs	r9, r9, #4
   41818:	vrev64.32	q12, q10
   4181c:	vext.8	q12, q12, q12, #8
   41820:	vext.8	q11, q11, q12, #12
   41824:	vmul.i32	q9, q9, q12
   41828:	vmul.i32	q8, q11, q8
   4182c:	vorr	q11, q12, q12
   41830:	bne	41810 <GetDataSlab+0x19e4c>
   41834:	vext.8	q11, q9, q8, #8
   41838:	vext.8	q12, q8, q8, #8
   4183c:	cmp	r0, r1
   41840:	vmul.i32	q0, q9, q11
   41844:	vmul.i32	q1, q8, q12
   41848:	vmul.i32	q8, q0, d0[1]
   4184c:	vmul.i32	q9, q1, d2[1]
   41850:	vmov.32	sl, d16[0]
   41854:	vmov.32	r3, d18[0]
   41858:	beq	41874 <GetDataSlab+0x19eb0>
   4185c:	vmov.32	r1, d20[0]
   41860:	mul	r3, r1, r3
   41864:	ldr	r1, [r7, r5, lsl #2]
   41868:	subs	r5, r5, #1
   4186c:	mul	sl, sl, r1
   41870:	bne	41860 <GetDataSlab+0x19e9c>
   41874:	ldr	r1, [fp, #12]
   41878:	sub	r5, fp, #176	; 0xb0
   4187c:	sub	r9, fp, #96	; 0x60
   41880:	ldr	r6, [fp, #20]
   41884:	ldr	r0, [sp, #52]	; 0x34
   41888:	add	ip, ip, #4
   4188c:	str	r3, [r5, r4, lsl #2]
   41890:	str	sl, [r9, r4, lsl #2]
   41894:	ldr	r1, [r1, r4, lsl #2]
   41898:	mla	r2, r1, r8, r2
   4189c:	ldr	r1, [r6, r4, lsl #2]
   418a0:	mov	r8, r3
   418a4:	ldr	r3, [sp, #40]	; 0x28
   418a8:	add	r4, r4, #1
   418ac:	mul	r0, r1, r0
   418b0:	ldr	r1, [fp, #24]
   418b4:	str	r0, [sp, #52]	; 0x34
   418b8:	cmp	r4, r1
   418bc:	bne	417a0 <GetDataSlab+0x19ddc>
   418c0:	ldr	r0, [sp, #48]	; 0x30
   418c4:	ldr	r5, [sp, #24]
   418c8:	add	r9, r0, r2, lsl #3
   418cc:	cmp	r5, #1
   418d0:	bne	47118 <GetDataSlab+0x1f754>
   418d4:	ldr	r0, [sp, #52]	; 0x34
   418d8:	ldr	lr, [fp, #12]
   418dc:	ldr	r1, [sp, #44]	; 0x2c
   418e0:	cmp	r0, #1
   418e4:	blt	47ff8 <GetDataSlab+0x20634>
   418e8:	sub	r0, fp, #136	; 0x88
   418ec:	add	r7, r6, #4
   418f0:	mov	sl, #0
   418f4:	mov	ip, #0
   418f8:	orr	r6, r0, #4
   418fc:	sub	r0, fp, #96	; 0x60
   41900:	orr	r0, r0, #4
   41904:	str	r0, [sp, #32]
   41908:	lsl	r0, r1, #1
   4190c:	str	r0, [sp, #56]	; 0x38
   41910:	bic	r0, r1, #1
   41914:	str	r0, [sp, #40]	; 0x28
   41918:	ldr	r0, [lr], #4
   4191c:	str	r0, [sp, #48]	; 0x30
   41920:	cmp	r1, #1
   41924:	mov	r4, lr
   41928:	blt	41998 <GetDataSlab+0x19fd4>
   4192c:	mov	r1, #0
   41930:	beq	4196c <GetDataSlab+0x19fa8>
   41934:	ldr	r0, [sp, #48]	; 0x30
   41938:	ldr	r3, [sp, #40]	; 0x28
   4193c:	ldr	r1, [sp, #60]	; 0x3c
   41940:	add	r0, r9, r0, lsl #3
   41944:	vld1.64	{d16-d17}, [r0]!
   41948:	subs	r3, r3, #2
   4194c:	vmovn.i64	d16, q8
   41950:	vuzp.16	d16, d17
   41954:	vst1.32	{d16[0]}, [r1]!
   41958:	bne	41944 <GetDataSlab+0x19f80>
   4195c:	ldr	r0, [sp, #44]	; 0x2c
   41960:	ldr	r1, [sp, #40]	; 0x28
   41964:	cmp	r0, r1
   41968:	beq	41998 <GetDataSlab+0x19fd4>
   4196c:	ldr	r5, [sp, #48]	; 0x30
   41970:	ldr	r0, [sp, #44]	; 0x2c
   41974:	ldr	r3, [sp, #60]	; 0x3c
   41978:	add	r5, r9, r5, lsl #3
   4197c:	sub	r0, r0, r1
   41980:	add	r3, r3, r1, lsl #1
   41984:	add	r1, r5, r1, lsl #3
   41988:	ldrh	r5, [r1], #8
   4198c:	subs	r0, r0, #1
   41990:	strh	r5, [r3], #2
   41994:	bne	41988 <GetDataSlab+0x19fc4>
   41998:	ldr	r0, [sp, #36]	; 0x24
   4199c:	add	r9, r9, r0, lsl #3
   419a0:	add	r2, r2, r0
   419a4:	ldr	r0, [fp, #24]
   419a8:	cmp	r0, #2
   419ac:	blt	41a5c <GetDataSlab+0x1a098>
   419b0:	mov	r1, #0
   419b4:	mov	r0, r1
   419b8:	ldr	r1, [r6, r1, lsl #2]
   419bc:	add	r1, r1, #1
   419c0:	str	r1, [r6, r0, lsl #2]
   419c4:	ldr	r3, [r7, r0, lsl #2]
   419c8:	sdiv	r5, r1, r3
   419cc:	mls	r1, r5, r3, r1
   419d0:	cmp	r1, #0
   419d4:	bne	41a4c <GetDataSlab+0x1a088>
   419d8:	sub	r5, fp, #176	; 0xb0
   419dc:	str	sl, [r6, r0, lsl #2]
   419e0:	add	r1, r5, r0, lsl #2
   419e4:	ldr	r1, [r1, #4]
   419e8:	sdiv	r3, r2, r1
   419ec:	mls	r3, r3, r1, r2
   419f0:	cmp	r3, #0
   419f4:	beq	41a14 <GetDataSlab+0x1a050>
   419f8:	ldr	r5, [r5, r0, lsl #2]
   419fc:	ldr	r8, [lr, r0, lsl #2]
   41a00:	sub	r1, r1, r3
   41a04:	mov	r4, lr
   41a08:	mla	r1, r8, r5, r1
   41a0c:	add	r2, r1, r2
   41a10:	b	41a30 <GetDataSlab+0x1a06c>
   41a14:	ldr	r1, [r4, r0, lsl #2]
   41a18:	cmp	r1, #0
   41a1c:	beq	41a34 <GetDataSlab+0x1a070>
   41a20:	sub	r3, fp, #176	; 0xb0
   41a24:	ldr	r3, [r3, r0, lsl #2]
   41a28:	mla	r2, r3, r1, r2
   41a2c:	mul	r1, r3, r1
   41a30:	add	r9, r9, r1, lsl #3
   41a34:	ldr	r3, [fp, #24]
   41a38:	add	r1, r0, #1
   41a3c:	add	r0, r0, #2
   41a40:	cmp	r0, r3
   41a44:	blt	419b4 <GetDataSlab+0x19ff0>
   41a48:	b	41a5c <GetDataSlab+0x1a098>
   41a4c:	ldr	r1, [sp, #32]
   41a50:	ldr	r0, [r1, r0, lsl #2]
   41a54:	add	r9, r9, r0, lsl #3
   41a58:	add	r2, r0, r2
   41a5c:	ldr	r0, [sp, #60]	; 0x3c
   41a60:	ldr	r1, [sp, #56]	; 0x38
   41a64:	ldr	r3, [sp, #52]	; 0x34
   41a68:	add	r0, r0, r1
   41a6c:	ldr	r1, [sp, #44]	; 0x2c
   41a70:	str	r0, [sp, #60]	; 0x3c
   41a74:	mov	r0, #0
   41a78:	add	ip, ip, r1
   41a7c:	cmp	ip, r3
   41a80:	blt	41920 <GetDataSlab+0x19f5c>
   41a84:	b	47ffc <GetDataSlab+0x20638>
   41a88:	ldr	r0, [sp, #56]	; 0x38
   41a8c:	sub	r2, fp, #96	; 0x60
   41a90:	cmp	r0, #1
   41a94:	ldr	r0, [fp, #12]
   41a98:	blt	47ff8 <GetDataSlab+0x20634>
   41a9c:	ldr	r1, [sp, #32]
   41aa0:	ldr	r7, [sp, #36]	; 0x24
   41aa4:	add	r8, r0, #4
   41aa8:	sub	r0, fp, #136	; 0x88
   41aac:	add	lr, sl, #4
   41ab0:	mls	r7, r1, r9, r7
   41ab4:	mov	sl, r1
   41ab8:	str	r7, [sp, #48]	; 0x30
   41abc:	mul	r7, r1, r9
   41ac0:	orr	r1, r0, #4
   41ac4:	orr	r0, r2, #4
   41ac8:	str	r0, [sp, #36]	; 0x24
   41acc:	lsl	r0, sl, #1
   41ad0:	str	r7, [sp, #40]	; 0x28
   41ad4:	str	r0, [sp, #44]	; 0x2c
   41ad8:	mov	r0, #0
   41adc:	str	r0, [sp, #52]	; 0x34
   41ae0:	ldr	r0, [fp, #12]
   41ae4:	cmp	sl, #1
   41ae8:	ldr	r0, [r0]
   41aec:	blt	41b28 <GetDataSlab+0x1a164>
   41af0:	ldr	r2, [sp, #40]	; 0x28
   41af4:	ldr	ip, [sp, #60]	; 0x3c
   41af8:	add	r4, r2, r3
   41afc:	add	r3, r5, r2
   41b00:	add	r5, r5, r0
   41b04:	ldrb	r2, [r5], r9
   41b08:	subs	sl, sl, #1
   41b0c:	strh	r2, [ip], #2
   41b10:	bne	41b04 <GetDataSlab+0x1a140>
   41b14:	ldr	ip, [sp, #60]	; 0x3c
   41b18:	ldr	sl, [sp, #32]
   41b1c:	add	r4, r4, r0
   41b20:	mov	r5, r3
   41b24:	b	41b30 <GetDataSlab+0x1a16c>
   41b28:	ldr	ip, [sp, #60]	; 0x3c
   41b2c:	add	r4, r0, r3
   41b30:	ldr	r2, [sp, #48]	; 0x30
   41b34:	sub	r0, r2, r0
   41b38:	add	r5, r5, r2
   41b3c:	add	r3, r4, r0
   41b40:	ldr	r0, [fp, #24]
   41b44:	cmp	r0, #2
   41b48:	blt	41bf4 <GetDataSlab+0x1a230>
   41b4c:	mov	r4, #0
   41b50:	ldr	r2, [r1, r4, lsl #2]
   41b54:	mov	r0, r4
   41b58:	add	r2, r2, #1
   41b5c:	str	r2, [r1, r4, lsl #2]
   41b60:	ldr	r4, [lr, r4, lsl #2]
   41b64:	sdiv	r6, r2, r4
   41b68:	mls	r2, r6, r4, r2
   41b6c:	cmp	r2, #0
   41b70:	bne	41be4 <GetDataSlab+0x1a220>
   41b74:	mov	r2, #0
   41b78:	sub	r6, fp, #176	; 0xb0
   41b7c:	str	r2, [r1, r0, lsl #2]
   41b80:	add	r2, r6, r0, lsl #2
   41b84:	ldr	r4, [r2, #4]
   41b88:	sdiv	r2, r3, r4
   41b8c:	mls	r2, r2, r4, r3
   41b90:	cmp	r2, #0
   41b94:	beq	41bb4 <GetDataSlab+0x1a1f0>
   41b98:	ldr	r6, [r6, r0, lsl #2]
   41b9c:	ldr	r7, [r8, r0, lsl #2]
   41ba0:	sub	r2, r4, r2
   41ba4:	mla	r2, r7, r6, r2
   41ba8:	add	r3, r2, r3
   41bac:	add	r5, r5, r2
   41bb0:	b	41bcc <GetDataSlab+0x1a208>
   41bb4:	ldr	r2, [r8, r0, lsl #2]
   41bb8:	cmp	r2, #0
   41bbc:	subne	r4, fp, #176	; 0xb0
   41bc0:	ldrne	r7, [r4, r0, lsl #2]
   41bc4:	mlane	r3, r7, r2, r3
   41bc8:	mlane	r5, r7, r2, r5
   41bcc:	ldr	r2, [fp, #24]
   41bd0:	add	r4, r0, #1
   41bd4:	add	r0, r0, #2
   41bd8:	cmp	r0, r2
   41bdc:	blt	41b50 <GetDataSlab+0x1a18c>
   41be0:	b	41bf4 <GetDataSlab+0x1a230>
   41be4:	ldr	r2, [sp, #36]	; 0x24
   41be8:	ldr	r0, [r2, r0, lsl #2]
   41bec:	add	r5, r5, r0
   41bf0:	add	r3, r0, r3
   41bf4:	ldr	r7, [sp, #52]	; 0x34
   41bf8:	ldr	r0, [sp, #44]	; 0x2c
   41bfc:	ldr	r2, [sp, #56]	; 0x38
   41c00:	add	r7, r7, sl
   41c04:	add	ip, ip, r0
   41c08:	mov	r0, #0
   41c0c:	cmp	r7, r2
   41c10:	str	ip, [sp, #60]	; 0x3c
   41c14:	str	r7, [sp, #52]	; 0x34
   41c18:	blt	41ae0 <GetDataSlab+0x1a11c>
   41c1c:	b	47ffc <GetDataSlab+0x20638>
   41c20:	ldr	r0, [sp, #52]	; 0x34
   41c24:	ldr	r1, [fp, #12]
   41c28:	ldr	r3, [sp, #44]	; 0x2c
   41c2c:	cmp	r0, #1
   41c30:	blt	47ff8 <GetDataSlab+0x20634>
   41c34:	ldr	r0, [sp, #40]	; 0x28
   41c38:	ldr	r5, [r1], #4
   41c3c:	add	lr, sl, #4
   41c40:	mov	sl, #0
   41c44:	mov	ip, #0
   41c48:	mls	r0, r3, r6, r0
   41c4c:	str	r1, [sp, #56]	; 0x38
   41c50:	lsl	r1, r6, #1
   41c54:	str	r5, [sp, #48]	; 0x30
   41c58:	sub	r0, r0, r5
   41c5c:	str	r0, [sp, #40]	; 0x28
   41c60:	sub	r0, fp, #136	; 0x88
   41c64:	orr	r7, r0, #4
   41c68:	sub	r0, fp, #96	; 0x60
   41c6c:	orr	r0, r0, #4
   41c70:	str	r0, [sp, #28]
   41c74:	mla	r0, r3, r6, r5
   41c78:	str	r0, [sp, #32]
   41c7c:	lsl	r0, r3, #1
   41c80:	str	r0, [sp, #36]	; 0x24
   41c84:	ldr	r0, [sp, #48]	; 0x30
   41c88:	cmp	r3, #1
   41c8c:	blt	41cb4 <GetDataSlab+0x1a2f0>
   41c90:	ldr	r0, [sp, #48]	; 0x30
   41c94:	ldr	r3, [sp, #44]	; 0x2c
   41c98:	ldr	r6, [sp, #60]	; 0x3c
   41c9c:	add	r0, r9, r0, lsl #1
   41ca0:	ldrh	r8, [r0], r1
   41ca4:	subs	r3, r3, #1
   41ca8:	strh	r8, [r6], #2
   41cac:	bne	41ca0 <GetDataSlab+0x1a2dc>
   41cb0:	ldr	r0, [sp, #32]
   41cb4:	ldr	r4, [sp, #40]	; 0x28
   41cb8:	add	r3, r9, r4, lsl #1
   41cbc:	add	r9, r3, r0, lsl #1
   41cc0:	add	r0, r0, r2
   41cc4:	add	r2, r0, r4
   41cc8:	ldr	r0, [fp, #24]
   41ccc:	cmp	r0, #2
   41cd0:	blt	41d80 <GetDataSlab+0x1a3bc>
   41cd4:	ldr	r8, [sp, #56]	; 0x38
   41cd8:	mov	r3, #0
   41cdc:	mov	r0, r3
   41ce0:	ldr	r3, [r7, r3, lsl #2]
   41ce4:	add	r3, r3, #1
   41ce8:	str	r3, [r7, r0, lsl #2]
   41cec:	ldr	r6, [lr, r0, lsl #2]
   41cf0:	sdiv	r4, r3, r6
   41cf4:	mls	r3, r4, r6, r3
   41cf8:	cmp	r3, #0
   41cfc:	bne	41d70 <GetDataSlab+0x1a3ac>
   41d00:	sub	r5, fp, #176	; 0xb0
   41d04:	str	sl, [r7, r0, lsl #2]
   41d08:	add	r3, r5, r0, lsl #2
   41d0c:	ldr	r3, [r3, #4]
   41d10:	sdiv	r4, r2, r3
   41d14:	mls	r6, r4, r3, r2
   41d18:	cmp	r6, #0
   41d1c:	beq	41d38 <GetDataSlab+0x1a374>
   41d20:	ldr	r4, [r5, r0, lsl #2]
   41d24:	ldr	r5, [r8, r0, lsl #2]
   41d28:	sub	r3, r3, r6
   41d2c:	mla	r3, r5, r4, r3
   41d30:	add	r2, r3, r2
   41d34:	b	41d54 <GetDataSlab+0x1a390>
   41d38:	ldr	r3, [r8, r0, lsl #2]
   41d3c:	cmp	r3, #0
   41d40:	beq	41d58 <GetDataSlab+0x1a394>
   41d44:	sub	r4, fp, #176	; 0xb0
   41d48:	ldr	r4, [r4, r0, lsl #2]
   41d4c:	mla	r2, r4, r3, r2
   41d50:	mul	r3, r4, r3
   41d54:	add	r9, r9, r3, lsl #1
   41d58:	ldr	r4, [fp, #24]
   41d5c:	add	r3, r0, #1
   41d60:	add	r0, r0, #2
   41d64:	cmp	r0, r4
   41d68:	blt	41cdc <GetDataSlab+0x1a318>
   41d6c:	b	41d80 <GetDataSlab+0x1a3bc>
   41d70:	ldr	r3, [sp, #28]
   41d74:	ldr	r0, [r3, r0, lsl #2]
   41d78:	add	r9, r9, r0, lsl #1
   41d7c:	add	r2, r0, r2
   41d80:	ldr	r0, [sp, #60]	; 0x3c
   41d84:	ldr	r3, [sp, #36]	; 0x24
   41d88:	ldr	r4, [sp, #52]	; 0x34
   41d8c:	add	r0, r0, r3
   41d90:	ldr	r3, [sp, #44]	; 0x2c
   41d94:	str	r0, [sp, #60]	; 0x3c
   41d98:	mov	r0, #0
   41d9c:	add	ip, ip, r3
   41da0:	cmp	ip, r4
   41da4:	blt	41c84 <GetDataSlab+0x1a2c0>
   41da8:	b	47ffc <GetDataSlab+0x20638>
   41dac:	ldr	r0, [sp, #52]	; 0x34
   41db0:	ldr	r1, [fp, #12]
   41db4:	ldr	r3, [sp, #44]	; 0x2c
   41db8:	cmp	r0, #1
   41dbc:	blt	47ff8 <GetDataSlab+0x20634>
   41dc0:	ldr	r0, [sp, #40]	; 0x28
   41dc4:	ldr	r5, [r1], #4
   41dc8:	add	lr, sl, #4
   41dcc:	mov	sl, #0
   41dd0:	mov	ip, #0
   41dd4:	mls	r0, r3, r6, r0
   41dd8:	str	r1, [sp, #56]	; 0x38
   41ddc:	lsl	r1, r6, #1
   41de0:	str	r5, [sp, #48]	; 0x30
   41de4:	sub	r0, r0, r5
   41de8:	str	r0, [sp, #40]	; 0x28
   41dec:	sub	r0, fp, #136	; 0x88
   41df0:	orr	r7, r0, #4
   41df4:	sub	r0, fp, #96	; 0x60
   41df8:	orr	r0, r0, #4
   41dfc:	str	r0, [sp, #28]
   41e00:	mla	r0, r3, r6, r5
   41e04:	str	r0, [sp, #32]
   41e08:	lsl	r0, r3, #1
   41e0c:	str	r0, [sp, #36]	; 0x24
   41e10:	ldr	r0, [sp, #48]	; 0x30
   41e14:	cmp	r3, #1
   41e18:	blt	41e40 <GetDataSlab+0x1a47c>
   41e1c:	ldr	r0, [sp, #48]	; 0x30
   41e20:	ldr	r3, [sp, #44]	; 0x2c
   41e24:	ldr	r6, [sp, #60]	; 0x3c
   41e28:	add	r0, r9, r0, lsl #1
   41e2c:	ldrh	r8, [r0], r1
   41e30:	subs	r3, r3, #1
   41e34:	strh	r8, [r6], #2
   41e38:	bne	41e2c <GetDataSlab+0x1a468>
   41e3c:	ldr	r0, [sp, #32]
   41e40:	ldr	r4, [sp, #40]	; 0x28
   41e44:	add	r3, r9, r4, lsl #1
   41e48:	add	r9, r3, r0, lsl #1
   41e4c:	add	r0, r0, r2
   41e50:	add	r2, r0, r4
   41e54:	ldr	r0, [fp, #24]
   41e58:	cmp	r0, #2
   41e5c:	blt	41f0c <GetDataSlab+0x1a548>
   41e60:	ldr	r8, [sp, #56]	; 0x38
   41e64:	mov	r3, #0
   41e68:	mov	r0, r3
   41e6c:	ldr	r3, [r7, r3, lsl #2]
   41e70:	add	r3, r3, #1
   41e74:	str	r3, [r7, r0, lsl #2]
   41e78:	ldr	r6, [lr, r0, lsl #2]
   41e7c:	sdiv	r4, r3, r6
   41e80:	mls	r3, r4, r6, r3
   41e84:	cmp	r3, #0
   41e88:	bne	41efc <GetDataSlab+0x1a538>
   41e8c:	sub	r5, fp, #176	; 0xb0
   41e90:	str	sl, [r7, r0, lsl #2]
   41e94:	add	r3, r5, r0, lsl #2
   41e98:	ldr	r3, [r3, #4]
   41e9c:	sdiv	r4, r2, r3
   41ea0:	mls	r6, r4, r3, r2
   41ea4:	cmp	r6, #0
   41ea8:	beq	41ec4 <GetDataSlab+0x1a500>
   41eac:	ldr	r4, [r5, r0, lsl #2]
   41eb0:	ldr	r5, [r8, r0, lsl #2]
   41eb4:	sub	r3, r3, r6
   41eb8:	mla	r3, r5, r4, r3
   41ebc:	add	r2, r3, r2
   41ec0:	b	41ee0 <GetDataSlab+0x1a51c>
   41ec4:	ldr	r3, [r8, r0, lsl #2]
   41ec8:	cmp	r3, #0
   41ecc:	beq	41ee4 <GetDataSlab+0x1a520>
   41ed0:	sub	r4, fp, #176	; 0xb0
   41ed4:	ldr	r4, [r4, r0, lsl #2]
   41ed8:	mla	r2, r4, r3, r2
   41edc:	mul	r3, r4, r3
   41ee0:	add	r9, r9, r3, lsl #1
   41ee4:	ldr	r4, [fp, #24]
   41ee8:	add	r3, r0, #1
   41eec:	add	r0, r0, #2
   41ef0:	cmp	r0, r4
   41ef4:	blt	41e68 <GetDataSlab+0x1a4a4>
   41ef8:	b	41f0c <GetDataSlab+0x1a548>
   41efc:	ldr	r3, [sp, #28]
   41f00:	ldr	r0, [r3, r0, lsl #2]
   41f04:	add	r9, r9, r0, lsl #1
   41f08:	add	r2, r0, r2
   41f0c:	ldr	r0, [sp, #60]	; 0x3c
   41f10:	ldr	r3, [sp, #36]	; 0x24
   41f14:	ldr	r4, [sp, #52]	; 0x34
   41f18:	add	r0, r0, r3
   41f1c:	ldr	r3, [sp, #44]	; 0x2c
   41f20:	str	r0, [sp, #60]	; 0x3c
   41f24:	mov	r0, #0
   41f28:	add	ip, ip, r3
   41f2c:	cmp	ip, r4
   41f30:	blt	41e10 <GetDataSlab+0x1a44c>
   41f34:	b	47ffc <GetDataSlab+0x20638>
   41f38:	ldr	r0, [sp, #56]	; 0x38
   41f3c:	ldr	r2, [sp, #52]	; 0x34
   41f40:	sub	r1, fp, #96	; 0x60
   41f44:	cmp	r0, #1
   41f48:	ldr	r0, [fp, #12]
   41f4c:	blt	47ff8 <GetDataSlab+0x20634>
   41f50:	add	r9, r0, #4
   41f54:	ldr	r0, [fp, #20]
   41f58:	ldr	r7, [sp, #36]	; 0x24
   41f5c:	mov	r8, #0
   41f60:	add	ip, r0, #4
   41f64:	sub	r0, fp, #136	; 0x88
   41f68:	mls	r7, r2, r6, r7
   41f6c:	orr	r5, r0, #4
   41f70:	orr	r0, r1, #4
   41f74:	lsl	r1, r6, #2
   41f78:	str	r7, [sp, #44]	; 0x2c
   41f7c:	str	r0, [sp, #32]
   41f80:	mul	r0, r2, r6
   41f84:	str	r0, [sp, #36]	; 0x24
   41f88:	lsl	r0, r2, #1
   41f8c:	str	r0, [sp, #40]	; 0x28
   41f90:	ldr	r0, [fp, #12]
   41f94:	cmp	r2, #1
   41f98:	ldr	r0, [r0]
   41f9c:	blt	41fd8 <GetDataSlab+0x1a614>
   41fa0:	ldr	r7, [sp, #36]	; 0x24
   41fa4:	ldr	lr, [sp, #60]	; 0x3c
   41fa8:	add	r4, sl, r0, lsl #2
   41fac:	add	r6, r7, r3
   41fb0:	add	r3, sl, r7, lsl #2
   41fb4:	str	r3, [sp, #48]	; 0x30
   41fb8:	mov	r3, r2
   41fbc:	ldr	r7, [r4], r1
   41fc0:	subs	r3, r3, #1
   41fc4:	strh	r7, [lr], #2
   41fc8:	bne	41fbc <GetDataSlab+0x1a5f8>
   41fcc:	ldr	sl, [sp, #48]	; 0x30
   41fd0:	add	r2, r6, r0
   41fd4:	b	41fdc <GetDataSlab+0x1a618>
   41fd8:	add	r2, r0, r3
   41fdc:	ldr	r3, [sp, #44]	; 0x2c
   41fe0:	sub	lr, fp, #176	; 0xb0
   41fe4:	sub	r0, r3, r0
   41fe8:	add	sl, sl, r3, lsl #2
   41fec:	add	r3, r2, r0
   41ff0:	ldr	r0, [fp, #24]
   41ff4:	cmp	r0, #2
   41ff8:	blt	420a0 <GetDataSlab+0x1a6dc>
   41ffc:	mov	r2, #0
   42000:	mov	r0, r2
   42004:	ldr	r2, [r5, r2, lsl #2]
   42008:	add	r2, r2, #1
   4200c:	str	r2, [r5, r0, lsl #2]
   42010:	ldr	r7, [ip, r0, lsl #2]
   42014:	sdiv	r6, r2, r7
   42018:	mls	r2, r6, r7, r2
   4201c:	cmp	r2, #0
   42020:	bne	42090 <GetDataSlab+0x1a6cc>
   42024:	mov	r2, #0
   42028:	str	r2, [r5, r0, lsl #2]
   4202c:	add	r2, lr, r0, lsl #2
   42030:	ldr	r2, [r2, #4]
   42034:	sdiv	r7, r3, r2
   42038:	mls	r7, r7, r2, r3
   4203c:	cmp	r7, #0
   42040:	beq	4205c <GetDataSlab+0x1a698>
   42044:	ldr	r6, [lr, r0, lsl #2]
   42048:	ldr	r4, [r9, r0, lsl #2]
   4204c:	sub	r2, r2, r7
   42050:	mla	r2, r4, r6, r2
   42054:	add	r3, r2, r3
   42058:	b	42074 <GetDataSlab+0x1a6b0>
   4205c:	ldr	r2, [r9, r0, lsl #2]
   42060:	cmp	r2, #0
   42064:	beq	42078 <GetDataSlab+0x1a6b4>
   42068:	ldr	r7, [lr, r0, lsl #2]
   4206c:	mla	r3, r7, r2, r3
   42070:	mul	r2, r7, r2
   42074:	add	sl, sl, r2, lsl #2
   42078:	ldr	r7, [fp, #24]
   4207c:	add	r2, r0, #1
   42080:	add	r0, r0, #2
   42084:	cmp	r0, r7
   42088:	blt	42000 <GetDataSlab+0x1a63c>
   4208c:	b	420a0 <GetDataSlab+0x1a6dc>
   42090:	ldr	r2, [sp, #32]
   42094:	ldr	r0, [r2, r0, lsl #2]
   42098:	add	sl, sl, r0, lsl #2
   4209c:	add	r3, r0, r3
   420a0:	ldr	r0, [sp, #60]	; 0x3c
   420a4:	ldr	r2, [sp, #40]	; 0x28
   420a8:	ldr	r7, [sp, #56]	; 0x38
   420ac:	add	r0, r0, r2
   420b0:	ldr	r2, [sp, #52]	; 0x34
   420b4:	str	r0, [sp, #60]	; 0x3c
   420b8:	mov	r0, #0
   420bc:	add	r8, r8, r2
   420c0:	cmp	r8, r7
   420c4:	blt	41f90 <GetDataSlab+0x1a5cc>
   420c8:	b	47ffc <GetDataSlab+0x20638>
   420cc:	ldr	r0, [sp, #56]	; 0x38
   420d0:	ldr	r2, [sp, #52]	; 0x34
   420d4:	sub	r1, fp, #96	; 0x60
   420d8:	cmp	r0, #1
   420dc:	ldr	r0, [fp, #12]
   420e0:	blt	47ff8 <GetDataSlab+0x20634>
   420e4:	add	r9, r0, #4
   420e8:	ldr	r0, [fp, #20]
   420ec:	ldr	r7, [sp, #36]	; 0x24
   420f0:	mov	r8, #0
   420f4:	add	ip, r0, #4
   420f8:	sub	r0, fp, #136	; 0x88
   420fc:	mls	r7, r2, r6, r7
   42100:	orr	r5, r0, #4
   42104:	orr	r0, r1, #4
   42108:	lsl	r1, r6, #2
   4210c:	str	r7, [sp, #44]	; 0x2c
   42110:	str	r0, [sp, #32]
   42114:	mul	r0, r2, r6
   42118:	str	r0, [sp, #36]	; 0x24
   4211c:	lsl	r0, r2, #1
   42120:	str	r0, [sp, #40]	; 0x28
   42124:	ldr	r0, [fp, #12]
   42128:	cmp	r2, #1
   4212c:	ldr	r0, [r0]
   42130:	blt	4216c <GetDataSlab+0x1a7a8>
   42134:	ldr	r7, [sp, #36]	; 0x24
   42138:	ldr	lr, [sp, #60]	; 0x3c
   4213c:	add	r4, sl, r0, lsl #2
   42140:	add	r6, r7, r3
   42144:	add	r3, sl, r7, lsl #2
   42148:	str	r3, [sp, #48]	; 0x30
   4214c:	mov	r3, r2
   42150:	ldr	r7, [r4], r1
   42154:	subs	r3, r3, #1
   42158:	strh	r7, [lr], #2
   4215c:	bne	42150 <GetDataSlab+0x1a78c>
   42160:	ldr	sl, [sp, #48]	; 0x30
   42164:	add	r2, r6, r0
   42168:	b	42170 <GetDataSlab+0x1a7ac>
   4216c:	add	r2, r0, r3
   42170:	ldr	r3, [sp, #44]	; 0x2c
   42174:	sub	lr, fp, #176	; 0xb0
   42178:	sub	r0, r3, r0
   4217c:	add	sl, sl, r3, lsl #2
   42180:	add	r3, r2, r0
   42184:	ldr	r0, [fp, #24]
   42188:	cmp	r0, #2
   4218c:	blt	42234 <GetDataSlab+0x1a870>
   42190:	mov	r2, #0
   42194:	mov	r0, r2
   42198:	ldr	r2, [r5, r2, lsl #2]
   4219c:	add	r2, r2, #1
   421a0:	str	r2, [r5, r0, lsl #2]
   421a4:	ldr	r7, [ip, r0, lsl #2]
   421a8:	sdiv	r6, r2, r7
   421ac:	mls	r2, r6, r7, r2
   421b0:	cmp	r2, #0
   421b4:	bne	42224 <GetDataSlab+0x1a860>
   421b8:	mov	r2, #0
   421bc:	str	r2, [r5, r0, lsl #2]
   421c0:	add	r2, lr, r0, lsl #2
   421c4:	ldr	r2, [r2, #4]
   421c8:	sdiv	r7, r3, r2
   421cc:	mls	r7, r7, r2, r3
   421d0:	cmp	r7, #0
   421d4:	beq	421f0 <GetDataSlab+0x1a82c>
   421d8:	ldr	r6, [lr, r0, lsl #2]
   421dc:	ldr	r4, [r9, r0, lsl #2]
   421e0:	sub	r2, r2, r7
   421e4:	mla	r2, r4, r6, r2
   421e8:	add	r3, r2, r3
   421ec:	b	42208 <GetDataSlab+0x1a844>
   421f0:	ldr	r2, [r9, r0, lsl #2]
   421f4:	cmp	r2, #0
   421f8:	beq	4220c <GetDataSlab+0x1a848>
   421fc:	ldr	r7, [lr, r0, lsl #2]
   42200:	mla	r3, r7, r2, r3
   42204:	mul	r2, r7, r2
   42208:	add	sl, sl, r2, lsl #2
   4220c:	ldr	r7, [fp, #24]
   42210:	add	r2, r0, #1
   42214:	add	r0, r0, #2
   42218:	cmp	r0, r7
   4221c:	blt	42194 <GetDataSlab+0x1a7d0>
   42220:	b	42234 <GetDataSlab+0x1a870>
   42224:	ldr	r2, [sp, #32]
   42228:	ldr	r0, [r2, r0, lsl #2]
   4222c:	add	sl, sl, r0, lsl #2
   42230:	add	r3, r0, r3
   42234:	ldr	r0, [sp, #60]	; 0x3c
   42238:	ldr	r2, [sp, #40]	; 0x28
   4223c:	ldr	r7, [sp, #56]	; 0x38
   42240:	add	r0, r0, r2
   42244:	ldr	r2, [sp, #52]	; 0x34
   42248:	str	r0, [sp, #60]	; 0x3c
   4224c:	mov	r0, #0
   42250:	add	r8, r8, r2
   42254:	cmp	r8, r7
   42258:	blt	42124 <GetDataSlab+0x1a760>
   4225c:	b	47ffc <GetDataSlab+0x20638>
   42260:	ldr	r0, [sp, #52]	; 0x34
   42264:	ldr	r1, [fp, #12]
   42268:	ldr	r3, [sp, #44]	; 0x2c
   4226c:	cmp	r0, #1
   42270:	blt	47ff8 <GetDataSlab+0x20634>
   42274:	ldr	r0, [sp, #36]	; 0x24
   42278:	ldr	r5, [r1], #4
   4227c:	add	lr, sl, #4
   42280:	mov	ip, #0
   42284:	mov	sl, #0
   42288:	mls	r0, r3, r6, r0
   4228c:	str	r1, [sp, #56]	; 0x38
   42290:	lsl	r1, r6, #2
   42294:	str	r5, [sp, #48]	; 0x30
   42298:	sub	r0, r0, r5
   4229c:	str	r0, [sp, #40]	; 0x28
   422a0:	sub	r0, fp, #136	; 0x88
   422a4:	orr	r7, r0, #4
   422a8:	sub	r0, fp, #96	; 0x60
   422ac:	orr	r0, r0, #4
   422b0:	str	r0, [sp, #28]
   422b4:	mla	r0, r3, r6, r5
   422b8:	str	r0, [sp, #32]
   422bc:	lsl	r0, r3, #1
   422c0:	str	r0, [sp, #36]	; 0x24
   422c4:	ldr	r0, [sp, #48]	; 0x30
   422c8:	cmp	r3, #1
   422cc:	blt	42300 <GetDataSlab+0x1a93c>
   422d0:	ldr	r0, [sp, #48]	; 0x30
   422d4:	ldr	r3, [sp, #44]	; 0x2c
   422d8:	ldr	r6, [sp, #60]	; 0x3c
   422dc:	add	r0, r9, r0, lsl #2
   422e0:	vldr	s0, [r0]
   422e4:	add	r0, r0, r1
   422e8:	subs	r3, r3, #1
   422ec:	vcvt.u32.f32	s0, s0
   422f0:	vmov	r8, s0
   422f4:	strh	r8, [r6], #2
   422f8:	bne	422e0 <GetDataSlab+0x1a91c>
   422fc:	ldr	r0, [sp, #32]
   42300:	ldr	r4, [sp, #40]	; 0x28
   42304:	add	r3, r9, r4, lsl #2
   42308:	add	r9, r3, r0, lsl #2
   4230c:	add	r0, r0, r2
   42310:	add	r2, r0, r4
   42314:	ldr	r0, [fp, #24]
   42318:	cmp	r0, #2
   4231c:	blt	423cc <GetDataSlab+0x1aa08>
   42320:	ldr	r8, [sp, #56]	; 0x38
   42324:	mov	r3, #0
   42328:	mov	r0, r3
   4232c:	ldr	r3, [r7, r3, lsl #2]
   42330:	add	r3, r3, #1
   42334:	str	r3, [r7, r0, lsl #2]
   42338:	ldr	r6, [lr, r0, lsl #2]
   4233c:	sdiv	r5, r3, r6
   42340:	mls	r3, r5, r6, r3
   42344:	cmp	r3, #0
   42348:	bne	423bc <GetDataSlab+0x1a9f8>
   4234c:	sub	r4, fp, #176	; 0xb0
   42350:	str	ip, [r7, r0, lsl #2]
   42354:	add	r3, r4, r0, lsl #2
   42358:	ldr	r3, [r3, #4]
   4235c:	sdiv	r5, r2, r3
   42360:	mls	r6, r5, r3, r2
   42364:	cmp	r6, #0
   42368:	beq	42384 <GetDataSlab+0x1a9c0>
   4236c:	ldr	r5, [r4, r0, lsl #2]
   42370:	ldr	r4, [r8, r0, lsl #2]
   42374:	sub	r3, r3, r6
   42378:	mla	r3, r4, r5, r3
   4237c:	add	r2, r3, r2
   42380:	b	423a0 <GetDataSlab+0x1a9dc>
   42384:	ldr	r3, [r8, r0, lsl #2]
   42388:	cmp	r3, #0
   4238c:	beq	423a4 <GetDataSlab+0x1a9e0>
   42390:	sub	r4, fp, #176	; 0xb0
   42394:	ldr	r4, [r4, r0, lsl #2]
   42398:	mla	r2, r4, r3, r2
   4239c:	mul	r3, r4, r3
   423a0:	add	r9, r9, r3, lsl #2
   423a4:	ldr	r4, [fp, #24]
   423a8:	add	r3, r0, #1
   423ac:	add	r0, r0, #2
   423b0:	cmp	r0, r4
   423b4:	blt	42328 <GetDataSlab+0x1a964>
   423b8:	b	423cc <GetDataSlab+0x1aa08>
   423bc:	ldr	r3, [sp, #28]
   423c0:	ldr	r0, [r3, r0, lsl #2]
   423c4:	add	r9, r9, r0, lsl #2
   423c8:	add	r2, r0, r2
   423cc:	ldr	r0, [sp, #60]	; 0x3c
   423d0:	ldr	r3, [sp, #36]	; 0x24
   423d4:	ldr	r4, [sp, #52]	; 0x34
   423d8:	add	r0, r0, r3
   423dc:	ldr	r3, [sp, #44]	; 0x2c
   423e0:	str	r0, [sp, #60]	; 0x3c
   423e4:	mov	r0, #0
   423e8:	add	sl, sl, r3
   423ec:	cmp	sl, r4
   423f0:	blt	422c4 <GetDataSlab+0x1a900>
   423f4:	b	47ffc <GetDataSlab+0x20638>
   423f8:	ldr	r0, [sp, #52]	; 0x34
   423fc:	ldr	r1, [fp, #12]
   42400:	ldr	r3, [sp, #44]	; 0x2c
   42404:	ldr	r7, [fp, #20]
   42408:	cmp	r0, #1
   4240c:	blt	47ff8 <GetDataSlab+0x20634>
   42410:	ldr	r0, [sp, #40]	; 0x28
   42414:	ldr	r5, [r1], #4
   42418:	add	lr, r7, #4
   4241c:	mov	sl, #0
   42420:	mov	ip, #0
   42424:	mls	r0, r3, r6, r0
   42428:	str	r1, [sp, #56]	; 0x38
   4242c:	lsl	r1, r6, #3
   42430:	str	r5, [sp, #48]	; 0x30
   42434:	sub	r0, r0, r5
   42438:	str	r0, [sp, #40]	; 0x28
   4243c:	sub	r0, fp, #136	; 0x88
   42440:	orr	r7, r0, #4
   42444:	sub	r0, fp, #96	; 0x60
   42448:	orr	r0, r0, #4
   4244c:	str	r0, [sp, #28]
   42450:	mla	r0, r3, r6, r5
   42454:	str	r0, [sp, #32]
   42458:	lsl	r0, r3, #1
   4245c:	str	r0, [sp, #36]	; 0x24
   42460:	ldr	r0, [sp, #48]	; 0x30
   42464:	cmp	r3, #1
   42468:	blt	4249c <GetDataSlab+0x1aad8>
   4246c:	ldr	r0, [sp, #48]	; 0x30
   42470:	ldr	r3, [sp, #44]	; 0x2c
   42474:	ldr	r6, [sp, #60]	; 0x3c
   42478:	add	r0, r9, r0, lsl #3
   4247c:	vldr	d16, [r0]
   42480:	add	r0, r0, r1
   42484:	subs	r3, r3, #1
   42488:	vcvt.u32.f64	s0, d16
   4248c:	vmov	r8, s0
   42490:	strh	r8, [r6], #2
   42494:	bne	4247c <GetDataSlab+0x1aab8>
   42498:	ldr	r0, [sp, #32]
   4249c:	ldr	r4, [sp, #40]	; 0x28
   424a0:	add	r3, r9, r4, lsl #3
   424a4:	add	r9, r3, r0, lsl #3
   424a8:	add	r0, r0, r2
   424ac:	add	r2, r0, r4
   424b0:	ldr	r0, [fp, #24]
   424b4:	cmp	r0, #2
   424b8:	blt	42568 <GetDataSlab+0x1aba4>
   424bc:	ldr	r8, [sp, #56]	; 0x38
   424c0:	mov	r3, #0
   424c4:	mov	r0, r3
   424c8:	ldr	r3, [r7, r3, lsl #2]
   424cc:	add	r3, r3, #1
   424d0:	str	r3, [r7, r0, lsl #2]
   424d4:	ldr	r6, [lr, r0, lsl #2]
   424d8:	sdiv	r5, r3, r6
   424dc:	mls	r3, r5, r6, r3
   424e0:	cmp	r3, #0
   424e4:	bne	42558 <GetDataSlab+0x1ab94>
   424e8:	sub	r4, fp, #176	; 0xb0
   424ec:	str	sl, [r7, r0, lsl #2]
   424f0:	add	r3, r4, r0, lsl #2
   424f4:	ldr	r3, [r3, #4]
   424f8:	sdiv	r5, r2, r3
   424fc:	mls	r6, r5, r3, r2
   42500:	cmp	r6, #0
   42504:	beq	42520 <GetDataSlab+0x1ab5c>
   42508:	ldr	r5, [r4, r0, lsl #2]
   4250c:	ldr	r4, [r8, r0, lsl #2]
   42510:	sub	r3, r3, r6
   42514:	mla	r3, r4, r5, r3
   42518:	add	r2, r3, r2
   4251c:	b	4253c <GetDataSlab+0x1ab78>
   42520:	ldr	r3, [r8, r0, lsl #2]
   42524:	cmp	r3, #0
   42528:	beq	42540 <GetDataSlab+0x1ab7c>
   4252c:	sub	r4, fp, #176	; 0xb0
   42530:	ldr	r4, [r4, r0, lsl #2]
   42534:	mla	r2, r4, r3, r2
   42538:	mul	r3, r4, r3
   4253c:	add	r9, r9, r3, lsl #3
   42540:	ldr	r4, [fp, #24]
   42544:	add	r3, r0, #1
   42548:	add	r0, r0, #2
   4254c:	cmp	r0, r4
   42550:	blt	424c4 <GetDataSlab+0x1ab00>
   42554:	b	42568 <GetDataSlab+0x1aba4>
   42558:	ldr	r3, [sp, #28]
   4255c:	ldr	r0, [r3, r0, lsl #2]
   42560:	add	r9, r9, r0, lsl #3
   42564:	add	r2, r0, r2
   42568:	ldr	r0, [sp, #60]	; 0x3c
   4256c:	ldr	r3, [sp, #36]	; 0x24
   42570:	ldr	r4, [sp, #52]	; 0x34
   42574:	add	r0, r0, r3
   42578:	ldr	r3, [sp, #44]	; 0x2c
   4257c:	str	r0, [sp, #60]	; 0x3c
   42580:	mov	r0, #0
   42584:	add	ip, ip, r3
   42588:	cmp	ip, r4
   4258c:	blt	42460 <GetDataSlab+0x1aa9c>
   42590:	b	47ffc <GetDataSlab+0x20638>
   42594:	ldr	r0, [sp, #56]	; 0x38
   42598:	ldr	r2, [sp, #60]	; 0x3c
   4259c:	ldr	r8, [fp, #12]
   425a0:	cmp	r0, #1
   425a4:	blt	42718 <GetDataSlab+0x1ad54>
   425a8:	ldr	r3, [sp, #44]	; 0x2c
   425ac:	ldr	r0, [sp, #36]	; 0x24
   425b0:	ldr	ip, [r8], #4
   425b4:	add	lr, sl, #4
   425b8:	mov	sl, #0
   425bc:	str	r2, [sp, #52]	; 0x34
   425c0:	mls	r0, r3, r7, r0
   425c4:	sub	r0, r0, ip
   425c8:	str	r0, [sp, #36]	; 0x24
   425cc:	sub	r0, fp, #136	; 0x88
   425d0:	orr	r6, r0, #4
   425d4:	sub	r0, fp, #96	; 0x60
   425d8:	orr	r0, r0, #4
   425dc:	str	r0, [sp, #24]
   425e0:	mla	r0, r3, r7, ip
   425e4:	lsl	r7, r7, #3
   425e8:	str	r0, [sp, #28]
   425ec:	lsl	r0, r3, #1
   425f0:	str	r0, [sp, #32]
   425f4:	cmp	r3, #1
   425f8:	mov	r0, ip
   425fc:	blt	42628 <GetDataSlab+0x1ac64>
   42600:	ldr	r0, [sp, #44]	; 0x2c
   42604:	ldr	r3, [sp, #52]	; 0x34
   42608:	mov	r4, ip
   4260c:	add	r2, r9, ip, lsl #3
   42610:	ldrh	ip, [r2], r7
   42614:	subs	r0, r0, #1
   42618:	strh	ip, [r3], #2
   4261c:	bne	42610 <GetDataSlab+0x1ac4c>
   42620:	ldr	r0, [sp, #28]
   42624:	mov	ip, r4
   42628:	ldr	r3, [sp, #36]	; 0x24
   4262c:	add	r2, r9, r3, lsl #3
   42630:	add	r9, r2, r0, lsl #3
   42634:	add	r0, r0, r1
   42638:	add	r1, r0, r3
   4263c:	ldr	r0, [fp, #24]
   42640:	cmp	r0, #2
   42644:	blt	426f4 <GetDataSlab+0x1ad30>
   42648:	mov	r0, #0
   4264c:	mov	r2, r0
   42650:	ldr	r0, [r6, r0, lsl #2]
   42654:	add	r0, r0, #1
   42658:	str	r0, [r6, r2, lsl #2]
   4265c:	ldr	r3, [lr, r2, lsl #2]
   42660:	sdiv	r4, r0, r3
   42664:	mls	r0, r4, r3, r0
   42668:	cmp	r0, #0
   4266c:	bne	426e4 <GetDataSlab+0x1ad20>
   42670:	mov	r0, #0
   42674:	sub	r5, fp, #176	; 0xb0
   42678:	str	r0, [r6, r2, lsl #2]
   4267c:	add	r0, r5, r2, lsl #2
   42680:	ldr	r0, [r0, #4]
   42684:	sdiv	r3, r1, r0
   42688:	mls	r3, r3, r0, r1
   4268c:	cmp	r3, #0
   42690:	beq	426ac <GetDataSlab+0x1ace8>
   42694:	ldr	r4, [r5, r2, lsl #2]
   42698:	ldr	r5, [r8, r2, lsl #2]
   4269c:	sub	r0, r0, r3
   426a0:	mla	r0, r5, r4, r0
   426a4:	add	r1, r0, r1
   426a8:	b	426c8 <GetDataSlab+0x1ad04>
   426ac:	ldr	r0, [r8, r2, lsl #2]
   426b0:	cmp	r0, #0
   426b4:	beq	426cc <GetDataSlab+0x1ad08>
   426b8:	sub	r3, fp, #176	; 0xb0
   426bc:	ldr	r3, [r3, r2, lsl #2]
   426c0:	mla	r1, r3, r0, r1
   426c4:	mul	r0, r3, r0
   426c8:	add	r9, r9, r0, lsl #3
   426cc:	ldr	r3, [fp, #24]
   426d0:	add	r0, r2, #1
   426d4:	add	r2, r2, #2
   426d8:	cmp	r2, r3
   426dc:	blt	4264c <GetDataSlab+0x1ac88>
   426e0:	b	426f4 <GetDataSlab+0x1ad30>
   426e4:	ldr	r0, [sp, #24]
   426e8:	ldr	r0, [r0, r2, lsl #2]
   426ec:	add	r9, r9, r0, lsl #3
   426f0:	add	r1, r0, r1
   426f4:	ldr	r0, [sp, #32]
   426f8:	ldr	r2, [sp, #52]	; 0x34
   426fc:	ldr	r3, [sp, #44]	; 0x2c
   42700:	add	r2, r2, r0
   42704:	ldr	r0, [sp, #56]	; 0x38
   42708:	add	sl, sl, r3
   4270c:	str	r2, [sp, #52]	; 0x34
   42710:	cmp	sl, r0
   42714:	blt	425f4 <GetDataSlab+0x1ac30>
   42718:	ldr	ip, [fp, #16]
   4271c:	ldr	r6, [sp, #40]	; 0x28
   42720:	mov	r0, #0
   42724:	cmp	r6, #13
   42728:	bne	47ffc <GetDataSlab+0x20638>
   4272c:	ldr	r0, [ip]
   42730:	ldr	r9, [fp, #8]
   42734:	ldr	r6, [fp, #20]
   42738:	mov	r2, #0
   4273c:	sub	r5, fp, #176	; 0xb0
   42740:	str	r0, [sp, #24]
   42744:	sub	r0, r0, #1
   42748:	str	r0, [fp, #-96]	; 0xffffffa0
   4274c:	ldr	r0, [r9]
   42750:	sub	r9, fp, #96	; 0x60
   42754:	str	r0, [fp, #-176]	; 0xffffff50
   42758:	str	r0, [sp, #36]	; 0x24
   4275c:	ldr	r0, [fp, #24]
   42760:	ldr	r1, [r6]
   42764:	cmp	r0, #2
   42768:	str	r1, [sp, #44]	; 0x2c
   4276c:	str	r1, [sp, #52]	; 0x34
   42770:	blt	428c4 <GetDataSlab+0x1af00>
   42774:	ldr	r0, [fp, #8]
   42778:	ldr	r3, [sp, #36]	; 0x24
   4277c:	mov	r4, #1
   42780:	mvn	lr, #15
   42784:	mov	r2, #0
   42788:	sub	r7, r0, #4
   4278c:	sub	ip, r0, #12
   42790:	mov	r0, #0
   42794:	mov	r8, r3
   42798:	str	r0, [sp, #56]	; 0x38
   4279c:	ldr	r0, [sp, #44]	; 0x2c
   427a0:	str	r0, [sp, #52]	; 0x34
   427a4:	ldr	r1, [fp, #16]
   427a8:	ldr	r0, [fp, #8]
   427ac:	ldr	r1, [r1, r4, lsl #2]
   427b0:	str	r3, [r5, r4, lsl #2]
   427b4:	sub	sl, r1, #1
   427b8:	str	sl, [r9, r4, lsl #2]
   427bc:	ldr	r1, [r0, r4, lsl #2]
   427c0:	ldr	r0, [sp, #56]	; 0x38
   427c4:	add	r0, r0, #1
   427c8:	str	r1, [sp, #40]	; 0x28
   427cc:	cmp	r0, #4
   427d0:	str	r0, [sp, #56]	; 0x38
   427d4:	bcs	427e0 <GetDataSlab+0x1ae1c>
   427d8:	mov	r5, r4
   427dc:	b	42864 <GetDataSlab+0x1aea0>
   427e0:	vmov.i32	q9, #1	; 0x00000001
   427e4:	vmov.i32	q10, #1	; 0x00000001
   427e8:	vmov.i32	q8, #1	; 0x00000001
   427ec:	vmov.32	d23[1], r1
   427f0:	bic	r1, r0, #3
   427f4:	bic	r9, r4, #3
   427f8:	vmov.32	d18[0], r3
   427fc:	vmov.32	d20[0], sl
   42800:	sub	r5, r4, r1
   42804:	mov	r3, ip
   42808:	vorr	d16, d18, d18
   4280c:	vmov.i32	q9, #1	; 0x00000001
   42810:	vorr	d18, d20, d20
   42814:	vld1.32	{d20-d21}, [r3], lr
   42818:	subs	r9, r9, #4
   4281c:	vrev64.32	q12, q10
   42820:	vext.8	q12, q12, q12, #8
   42824:	vext.8	q11, q11, q12, #12
   42828:	vmul.i32	q9, q9, q12
   4282c:	vmul.i32	q8, q11, q8
   42830:	vorr	q11, q12, q12
   42834:	bne	42814 <GetDataSlab+0x1ae50>
   42838:	vext.8	q11, q9, q8, #8
   4283c:	vext.8	q12, q8, q8, #8
   42840:	cmp	r0, r1
   42844:	vmul.i32	q0, q9, q11
   42848:	vmul.i32	q1, q8, q12
   4284c:	vmul.i32	q8, q0, d0[1]
   42850:	vmul.i32	q9, q1, d2[1]
   42854:	vmov.32	sl, d16[0]
   42858:	vmov.32	r3, d18[0]
   4285c:	beq	42878 <GetDataSlab+0x1aeb4>
   42860:	vmov.32	r1, d20[0]
   42864:	mul	r3, r1, r3
   42868:	ldr	r1, [r7, r5, lsl #2]
   4286c:	subs	r5, r5, #1
   42870:	mul	sl, sl, r1
   42874:	bne	42864 <GetDataSlab+0x1aea0>
   42878:	ldr	r1, [fp, #12]
   4287c:	sub	r5, fp, #176	; 0xb0
   42880:	sub	r9, fp, #96	; 0x60
   42884:	ldr	r6, [fp, #20]
   42888:	ldr	r0, [sp, #52]	; 0x34
   4288c:	add	ip, ip, #4
   42890:	str	r3, [r5, r4, lsl #2]
   42894:	str	sl, [r9, r4, lsl #2]
   42898:	ldr	r1, [r1, r4, lsl #2]
   4289c:	mla	r2, r1, r8, r2
   428a0:	ldr	r1, [r6, r4, lsl #2]
   428a4:	mov	r8, r3
   428a8:	ldr	r3, [sp, #40]	; 0x28
   428ac:	add	r4, r4, #1
   428b0:	mul	r0, r1, r0
   428b4:	ldr	r1, [fp, #24]
   428b8:	str	r0, [sp, #52]	; 0x34
   428bc:	cmp	r4, r1
   428c0:	bne	427a4 <GetDataSlab+0x1ade0>
   428c4:	ldr	r0, [sp, #48]	; 0x30
   428c8:	ldr	r5, [sp, #24]
   428cc:	add	r9, r0, r2, lsl #3
   428d0:	cmp	r5, #1
   428d4:	bne	472a4 <GetDataSlab+0x1f8e0>
   428d8:	ldr	r0, [sp, #52]	; 0x34
   428dc:	ldr	lr, [fp, #12]
   428e0:	ldr	r1, [sp, #44]	; 0x2c
   428e4:	cmp	r0, #1
   428e8:	blt	47ff8 <GetDataSlab+0x20634>
   428ec:	sub	r0, fp, #136	; 0x88
   428f0:	add	r7, r6, #4
   428f4:	mov	sl, #0
   428f8:	mov	ip, #0
   428fc:	orr	r6, r0, #4
   42900:	sub	r0, fp, #96	; 0x60
   42904:	orr	r0, r0, #4
   42908:	str	r0, [sp, #32]
   4290c:	lsl	r0, r1, #1
   42910:	str	r0, [sp, #56]	; 0x38
   42914:	bic	r0, r1, #1
   42918:	str	r0, [sp, #40]	; 0x28
   4291c:	ldr	r0, [lr], #4
   42920:	str	r0, [sp, #48]	; 0x30
   42924:	cmp	r1, #1
   42928:	mov	r4, lr
   4292c:	blt	4299c <GetDataSlab+0x1afd8>
   42930:	mov	r1, #0
   42934:	beq	42970 <GetDataSlab+0x1afac>
   42938:	ldr	r0, [sp, #48]	; 0x30
   4293c:	ldr	r3, [sp, #40]	; 0x28
   42940:	ldr	r1, [sp, #60]	; 0x3c
   42944:	add	r0, r9, r0, lsl #3
   42948:	vld1.64	{d16-d17}, [r0]!
   4294c:	subs	r3, r3, #2
   42950:	vmovn.i64	d16, q8
   42954:	vuzp.16	d16, d17
   42958:	vst1.32	{d16[0]}, [r1]!
   4295c:	bne	42948 <GetDataSlab+0x1af84>
   42960:	ldr	r0, [sp, #44]	; 0x2c
   42964:	ldr	r1, [sp, #40]	; 0x28
   42968:	cmp	r0, r1
   4296c:	beq	4299c <GetDataSlab+0x1afd8>
   42970:	ldr	r5, [sp, #48]	; 0x30
   42974:	ldr	r0, [sp, #44]	; 0x2c
   42978:	ldr	r3, [sp, #60]	; 0x3c
   4297c:	add	r5, r9, r5, lsl #3
   42980:	sub	r0, r0, r1
   42984:	add	r3, r3, r1, lsl #1
   42988:	add	r1, r5, r1, lsl #3
   4298c:	ldrh	r5, [r1], #8
   42990:	subs	r0, r0, #1
   42994:	strh	r5, [r3], #2
   42998:	bne	4298c <GetDataSlab+0x1afc8>
   4299c:	ldr	r0, [sp, #36]	; 0x24
   429a0:	add	r9, r9, r0, lsl #3
   429a4:	add	r2, r2, r0
   429a8:	ldr	r0, [fp, #24]
   429ac:	cmp	r0, #2
   429b0:	blt	42a60 <GetDataSlab+0x1b09c>
   429b4:	mov	r1, #0
   429b8:	mov	r0, r1
   429bc:	ldr	r1, [r6, r1, lsl #2]
   429c0:	add	r1, r1, #1
   429c4:	str	r1, [r6, r0, lsl #2]
   429c8:	ldr	r3, [r7, r0, lsl #2]
   429cc:	sdiv	r5, r1, r3
   429d0:	mls	r1, r5, r3, r1
   429d4:	cmp	r1, #0
   429d8:	bne	42a50 <GetDataSlab+0x1b08c>
   429dc:	sub	r5, fp, #176	; 0xb0
   429e0:	str	sl, [r6, r0, lsl #2]
   429e4:	add	r1, r5, r0, lsl #2
   429e8:	ldr	r1, [r1, #4]
   429ec:	sdiv	r3, r2, r1
   429f0:	mls	r3, r3, r1, r2
   429f4:	cmp	r3, #0
   429f8:	beq	42a18 <GetDataSlab+0x1b054>
   429fc:	ldr	r5, [r5, r0, lsl #2]
   42a00:	ldr	r8, [lr, r0, lsl #2]
   42a04:	sub	r1, r1, r3
   42a08:	mov	r4, lr
   42a0c:	mla	r1, r8, r5, r1
   42a10:	add	r2, r1, r2
   42a14:	b	42a34 <GetDataSlab+0x1b070>
   42a18:	ldr	r1, [r4, r0, lsl #2]
   42a1c:	cmp	r1, #0
   42a20:	beq	42a38 <GetDataSlab+0x1b074>
   42a24:	sub	r3, fp, #176	; 0xb0
   42a28:	ldr	r3, [r3, r0, lsl #2]
   42a2c:	mla	r2, r3, r1, r2
   42a30:	mul	r1, r3, r1
   42a34:	add	r9, r9, r1, lsl #3
   42a38:	ldr	r3, [fp, #24]
   42a3c:	add	r1, r0, #1
   42a40:	add	r0, r0, #2
   42a44:	cmp	r0, r3
   42a48:	blt	429b8 <GetDataSlab+0x1aff4>
   42a4c:	b	42a60 <GetDataSlab+0x1b09c>
   42a50:	ldr	r1, [sp, #32]
   42a54:	ldr	r0, [r1, r0, lsl #2]
   42a58:	add	r9, r9, r0, lsl #3
   42a5c:	add	r2, r0, r2
   42a60:	ldr	r0, [sp, #60]	; 0x3c
   42a64:	ldr	r1, [sp, #56]	; 0x38
   42a68:	ldr	r3, [sp, #52]	; 0x34
   42a6c:	add	r0, r0, r1
   42a70:	ldr	r1, [sp, #44]	; 0x2c
   42a74:	str	r0, [sp, #60]	; 0x3c
   42a78:	mov	r0, #0
   42a7c:	add	ip, ip, r1
   42a80:	cmp	ip, r3
   42a84:	blt	42924 <GetDataSlab+0x1af60>
   42a88:	b	47ffc <GetDataSlab+0x20638>
   42a8c:	ldr	r0, [sp, #56]	; 0x38
   42a90:	cmp	r0, #1
   42a94:	blt	47ff8 <GetDataSlab+0x20634>
   42a98:	ldr	r0, [fp, #20]
   42a9c:	ldr	lr, [fp, #16]
   42aa0:	add	ip, r0, #4
   42aa4:	sub	r0, fp, #136	; 0x88
   42aa8:	orr	r9, r0, #4
   42aac:	sub	r0, fp, #96	; 0x60
   42ab0:	orr	r0, r0, #4
   42ab4:	str	r0, [sp, #40]	; 0x28
   42ab8:	ldr	r0, [r8], #4
   42abc:	str	r0, [sp, #44]	; 0x2c
   42ac0:	mov	r0, #0
   42ac4:	str	r0, [sp, #48]	; 0x30
   42ac8:	ldr	r1, [sp, #44]	; 0x2c
   42acc:	cmp	r2, #1
   42ad0:	add	r0, r1, r4
   42ad4:	add	r3, sl, r1
   42ad8:	blt	42b2c <GetDataSlab+0x1b168>
   42adc:	ldr	r1, [sp, #60]	; 0x3c
   42ae0:	ldr	r2, [sp, #48]	; 0x30
   42ae4:	ldr	r6, [fp, #20]
   42ae8:	mov	r7, #0
   42aec:	add	r4, r1, r2, lsl #2
   42af0:	ldrb	r1, [r3]
   42af4:	str	r1, [r4, r7, lsl #2]
   42af8:	add	r7, r7, #1
   42afc:	ldr	r5, [lr]
   42b00:	ldr	r2, [r6]
   42b04:	add	r0, r5, r0
   42b08:	add	r3, r3, r5
   42b0c:	cmp	r7, r2
   42b10:	blt	42af0 <GetDataSlab+0x1b12c>
   42b14:	ldr	r1, [fp, #12]
   42b18:	sub	r6, fp, #176	; 0xb0
   42b1c:	ldr	r4, [r1]
   42b20:	ldr	r1, [fp, #8]
   42b24:	ldr	r1, [r1]
   42b28:	b	42b38 <GetDataSlab+0x1b174>
   42b2c:	mov	r4, r1
   42b30:	ldr	r1, [sp, #52]	; 0x34
   42b34:	sub	r6, fp, #176	; 0xb0
   42b38:	str	r1, [sp, #52]	; 0x34
   42b3c:	mls	r1, r5, r2, r1
   42b40:	str	r4, [sp, #44]	; 0x2c
   42b44:	sub	r1, r1, r4
   42b48:	add	r4, r1, r0
   42b4c:	ldr	r0, [fp, #24]
   42b50:	add	sl, r3, r1
   42b54:	cmp	r0, #2
   42b58:	blt	42c04 <GetDataSlab+0x1b240>
   42b5c:	mov	r7, #0
   42b60:	ldr	r1, [r9, r7, lsl #2]
   42b64:	mov	r0, r7
   42b68:	add	r1, r1, #1
   42b6c:	str	r1, [r9, r7, lsl #2]
   42b70:	ldr	r3, [ip, r7, lsl #2]
   42b74:	sdiv	r7, r1, r3
   42b78:	mls	r1, r7, r3, r1
   42b7c:	cmp	r1, #0
   42b80:	bne	42bf4 <GetDataSlab+0x1b230>
   42b84:	mov	r1, #0
   42b88:	str	r1, [r9, r0, lsl #2]
   42b8c:	add	r1, r6, r0, lsl #2
   42b90:	ldr	r7, [r1, #4]
   42b94:	sdiv	r1, r4, r7
   42b98:	mls	r1, r1, r7, r4
   42b9c:	cmp	r1, #0
   42ba0:	beq	42bc8 <GetDataSlab+0x1b204>
   42ba4:	ldr	r3, [r6, r0, lsl #2]
   42ba8:	ldr	lr, [r8, r0, lsl #2]
   42bac:	sub	r1, r7, r1
   42bb0:	sub	r6, fp, #176	; 0xb0
   42bb4:	mla	r1, lr, r3, r1
   42bb8:	ldr	lr, [fp, #16]
   42bbc:	add	r4, r1, r4
   42bc0:	add	sl, sl, r1
   42bc4:	b	42bdc <GetDataSlab+0x1b218>
   42bc8:	ldr	r1, [r8, r0, lsl #2]
   42bcc:	cmp	r1, #0
   42bd0:	ldrne	r3, [r6, r0, lsl #2]
   42bd4:	mlane	r4, r3, r1, r4
   42bd8:	mlane	sl, r3, r1, sl
   42bdc:	ldr	r1, [fp, #24]
   42be0:	add	r7, r0, #1
   42be4:	add	r0, r0, #2
   42be8:	cmp	r0, r1
   42bec:	blt	42b60 <GetDataSlab+0x1b19c>
   42bf0:	b	42c04 <GetDataSlab+0x1b240>
   42bf4:	ldr	r1, [sp, #40]	; 0x28
   42bf8:	ldr	r0, [r1, r0, lsl #2]
   42bfc:	add	sl, sl, r0
   42c00:	add	r4, r0, r4
   42c04:	ldr	r3, [sp, #48]	; 0x30
   42c08:	ldr	r1, [sp, #56]	; 0x38
   42c0c:	mov	r0, #0
   42c10:	add	r3, r2, r3
   42c14:	cmp	r3, r1
   42c18:	str	r3, [sp, #48]	; 0x30
   42c1c:	blt	42ac8 <GetDataSlab+0x1b104>
   42c20:	b	47ffc <GetDataSlab+0x20638>
   42c24:	ldr	r0, [sp, #56]	; 0x38
   42c28:	cmp	r0, #1
   42c2c:	blt	47ff8 <GetDataSlab+0x20634>
   42c30:	ldr	r0, [fp, #20]
   42c34:	ldr	lr, [fp, #16]
   42c38:	add	ip, r0, #4
   42c3c:	sub	r0, fp, #136	; 0x88
   42c40:	orr	r9, r0, #4
   42c44:	sub	r0, fp, #96	; 0x60
   42c48:	orr	r0, r0, #4
   42c4c:	str	r0, [sp, #40]	; 0x28
   42c50:	ldr	r0, [r8], #4
   42c54:	str	r0, [sp, #44]	; 0x2c
   42c58:	mov	r0, #0
   42c5c:	str	r0, [sp, #48]	; 0x30
   42c60:	ldr	r1, [sp, #44]	; 0x2c
   42c64:	cmp	r2, #1
   42c68:	add	r0, r1, r4
   42c6c:	add	r3, sl, r1, lsl #1
   42c70:	blt	42cc4 <GetDataSlab+0x1b300>
   42c74:	ldr	r1, [sp, #60]	; 0x3c
   42c78:	ldr	r2, [sp, #48]	; 0x30
   42c7c:	ldr	r6, [fp, #20]
   42c80:	mov	r7, #0
   42c84:	add	r4, r1, r2, lsl #2
   42c88:	ldrsh	r1, [r3]
   42c8c:	str	r1, [r4, r7, lsl #2]
   42c90:	add	r7, r7, #1
   42c94:	ldr	r5, [lr]
   42c98:	ldr	r2, [r6]
   42c9c:	add	r0, r5, r0
   42ca0:	add	r3, r3, r5, lsl #1
   42ca4:	cmp	r7, r2
   42ca8:	blt	42c88 <GetDataSlab+0x1b2c4>
   42cac:	ldr	r1, [fp, #12]
   42cb0:	sub	r6, fp, #176	; 0xb0
   42cb4:	ldr	r4, [r1]
   42cb8:	ldr	r1, [fp, #8]
   42cbc:	ldr	r1, [r1]
   42cc0:	b	42cd0 <GetDataSlab+0x1b30c>
   42cc4:	mov	r4, r1
   42cc8:	ldr	r1, [sp, #52]	; 0x34
   42ccc:	sub	r6, fp, #176	; 0xb0
   42cd0:	str	r1, [sp, #52]	; 0x34
   42cd4:	mls	r1, r5, r2, r1
   42cd8:	str	r4, [sp, #44]	; 0x2c
   42cdc:	sub	r1, r1, r4
   42ce0:	add	r4, r1, r0
   42ce4:	ldr	r0, [fp, #24]
   42ce8:	add	sl, r3, r1, lsl #1
   42cec:	cmp	r0, #2
   42cf0:	blt	42da0 <GetDataSlab+0x1b3dc>
   42cf4:	mov	r7, #0
   42cf8:	ldr	r1, [r9, r7, lsl #2]
   42cfc:	mov	r0, r7
   42d00:	add	r1, r1, #1
   42d04:	str	r1, [r9, r7, lsl #2]
   42d08:	ldr	r3, [ip, r7, lsl #2]
   42d0c:	sdiv	r7, r1, r3
   42d10:	mls	r1, r7, r3, r1
   42d14:	cmp	r1, #0
   42d18:	bne	42d90 <GetDataSlab+0x1b3cc>
   42d1c:	mov	r1, #0
   42d20:	str	r1, [r9, r0, lsl #2]
   42d24:	add	r1, r6, r0, lsl #2
   42d28:	ldr	r7, [r1, #4]
   42d2c:	sdiv	r1, r4, r7
   42d30:	mls	r1, r1, r7, r4
   42d34:	cmp	r1, #0
   42d38:	beq	42d5c <GetDataSlab+0x1b398>
   42d3c:	ldr	r3, [r6, r0, lsl #2]
   42d40:	ldr	lr, [r8, r0, lsl #2]
   42d44:	sub	r1, r7, r1
   42d48:	sub	r6, fp, #176	; 0xb0
   42d4c:	mla	r1, lr, r3, r1
   42d50:	ldr	lr, [fp, #16]
   42d54:	add	r4, r1, r4
   42d58:	b	42d74 <GetDataSlab+0x1b3b0>
   42d5c:	ldr	r1, [r8, r0, lsl #2]
   42d60:	cmp	r1, #0
   42d64:	beq	42d78 <GetDataSlab+0x1b3b4>
   42d68:	ldr	r3, [r6, r0, lsl #2]
   42d6c:	mla	r4, r3, r1, r4
   42d70:	mul	r1, r3, r1
   42d74:	add	sl, sl, r1, lsl #1
   42d78:	ldr	r1, [fp, #24]
   42d7c:	add	r7, r0, #1
   42d80:	add	r0, r0, #2
   42d84:	cmp	r0, r1
   42d88:	blt	42cf8 <GetDataSlab+0x1b334>
   42d8c:	b	42da0 <GetDataSlab+0x1b3dc>
   42d90:	ldr	r1, [sp, #40]	; 0x28
   42d94:	ldr	r0, [r1, r0, lsl #2]
   42d98:	add	sl, sl, r0, lsl #1
   42d9c:	add	r4, r0, r4
   42da0:	ldr	r3, [sp, #48]	; 0x30
   42da4:	ldr	r1, [sp, #56]	; 0x38
   42da8:	mov	r0, #0
   42dac:	add	r3, r2, r3
   42db0:	cmp	r3, r1
   42db4:	str	r3, [sp, #48]	; 0x30
   42db8:	blt	42c60 <GetDataSlab+0x1b29c>
   42dbc:	b	47ffc <GetDataSlab+0x20638>
   42dc0:	ldr	r0, [sp, #56]	; 0x38
   42dc4:	cmp	r0, #1
   42dc8:	blt	47ff8 <GetDataSlab+0x20634>
   42dcc:	ldr	r0, [fp, #20]
   42dd0:	ldr	lr, [fp, #16]
   42dd4:	add	ip, r0, #4
   42dd8:	sub	r0, fp, #136	; 0x88
   42ddc:	orr	r9, r0, #4
   42de0:	sub	r0, fp, #96	; 0x60
   42de4:	orr	r0, r0, #4
   42de8:	str	r0, [sp, #40]	; 0x28
   42dec:	ldr	r0, [r8], #4
   42df0:	str	r0, [sp, #44]	; 0x2c
   42df4:	mov	r0, #0
   42df8:	str	r0, [sp, #48]	; 0x30
   42dfc:	ldr	r1, [sp, #44]	; 0x2c
   42e00:	cmp	r2, #1
   42e04:	add	r0, r1, r4
   42e08:	add	r3, sl, r1, lsl #1
   42e0c:	blt	42e60 <GetDataSlab+0x1b49c>
   42e10:	ldr	r1, [sp, #60]	; 0x3c
   42e14:	ldr	r2, [sp, #48]	; 0x30
   42e18:	ldr	r6, [fp, #20]
   42e1c:	mov	r7, #0
   42e20:	add	r4, r1, r2, lsl #2
   42e24:	ldrh	r1, [r3]
   42e28:	str	r1, [r4, r7, lsl #2]
   42e2c:	add	r7, r7, #1
   42e30:	ldr	r5, [lr]
   42e34:	ldr	r2, [r6]
   42e38:	add	r0, r5, r0
   42e3c:	add	r3, r3, r5, lsl #1
   42e40:	cmp	r7, r2
   42e44:	blt	42e24 <GetDataSlab+0x1b460>
   42e48:	ldr	r1, [fp, #12]
   42e4c:	sub	r6, fp, #176	; 0xb0
   42e50:	ldr	r4, [r1]
   42e54:	ldr	r1, [fp, #8]
   42e58:	ldr	r1, [r1]
   42e5c:	b	42e6c <GetDataSlab+0x1b4a8>
   42e60:	mov	r4, r1
   42e64:	ldr	r1, [sp, #52]	; 0x34
   42e68:	sub	r6, fp, #176	; 0xb0
   42e6c:	str	r1, [sp, #52]	; 0x34
   42e70:	mls	r1, r5, r2, r1
   42e74:	str	r4, [sp, #44]	; 0x2c
   42e78:	sub	r1, r1, r4
   42e7c:	add	r4, r1, r0
   42e80:	ldr	r0, [fp, #24]
   42e84:	add	sl, r3, r1, lsl #1
   42e88:	cmp	r0, #2
   42e8c:	blt	42f3c <GetDataSlab+0x1b578>
   42e90:	mov	r7, #0
   42e94:	ldr	r1, [r9, r7, lsl #2]
   42e98:	mov	r0, r7
   42e9c:	add	r1, r1, #1
   42ea0:	str	r1, [r9, r7, lsl #2]
   42ea4:	ldr	r3, [ip, r7, lsl #2]
   42ea8:	sdiv	r7, r1, r3
   42eac:	mls	r1, r7, r3, r1
   42eb0:	cmp	r1, #0
   42eb4:	bne	42f2c <GetDataSlab+0x1b568>
   42eb8:	mov	r1, #0
   42ebc:	str	r1, [r9, r0, lsl #2]
   42ec0:	add	r1, r6, r0, lsl #2
   42ec4:	ldr	r7, [r1, #4]
   42ec8:	sdiv	r1, r4, r7
   42ecc:	mls	r1, r1, r7, r4
   42ed0:	cmp	r1, #0
   42ed4:	beq	42ef8 <GetDataSlab+0x1b534>
   42ed8:	ldr	r3, [r6, r0, lsl #2]
   42edc:	ldr	lr, [r8, r0, lsl #2]
   42ee0:	sub	r1, r7, r1
   42ee4:	sub	r6, fp, #176	; 0xb0
   42ee8:	mla	r1, lr, r3, r1
   42eec:	ldr	lr, [fp, #16]
   42ef0:	add	r4, r1, r4
   42ef4:	b	42f10 <GetDataSlab+0x1b54c>
   42ef8:	ldr	r1, [r8, r0, lsl #2]
   42efc:	cmp	r1, #0
   42f00:	beq	42f14 <GetDataSlab+0x1b550>
   42f04:	ldr	r3, [r6, r0, lsl #2]
   42f08:	mla	r4, r3, r1, r4
   42f0c:	mul	r1, r3, r1
   42f10:	add	sl, sl, r1, lsl #1
   42f14:	ldr	r1, [fp, #24]
   42f18:	add	r7, r0, #1
   42f1c:	add	r0, r0, #2
   42f20:	cmp	r0, r1
   42f24:	blt	42e94 <GetDataSlab+0x1b4d0>
   42f28:	b	42f3c <GetDataSlab+0x1b578>
   42f2c:	ldr	r1, [sp, #40]	; 0x28
   42f30:	ldr	r0, [r1, r0, lsl #2]
   42f34:	add	sl, sl, r0, lsl #1
   42f38:	add	r4, r0, r4
   42f3c:	ldr	r3, [sp, #48]	; 0x30
   42f40:	ldr	r1, [sp, #56]	; 0x38
   42f44:	mov	r0, #0
   42f48:	add	r3, r2, r3
   42f4c:	cmp	r3, r1
   42f50:	str	r3, [sp, #48]	; 0x30
   42f54:	blt	42dfc <GetDataSlab+0x1b438>
   42f58:	b	47ffc <GetDataSlab+0x20638>
   42f5c:	ldr	r0, [sp, #56]	; 0x38
   42f60:	cmp	r0, #1
   42f64:	blt	47ff8 <GetDataSlab+0x20634>
   42f68:	ldr	r0, [fp, #20]
   42f6c:	ldr	lr, [fp, #16]
   42f70:	add	ip, r0, #4
   42f74:	sub	r0, fp, #136	; 0x88
   42f78:	orr	r9, r0, #4
   42f7c:	sub	r0, fp, #96	; 0x60
   42f80:	orr	r0, r0, #4
   42f84:	str	r0, [sp, #40]	; 0x28
   42f88:	ldr	r0, [r8], #4
   42f8c:	str	r0, [sp, #44]	; 0x2c
   42f90:	mov	r0, #0
   42f94:	str	r0, [sp, #48]	; 0x30
   42f98:	ldr	r1, [sp, #44]	; 0x2c
   42f9c:	cmp	r2, #1
   42fa0:	add	r0, r1, r4
   42fa4:	add	r3, sl, r1, lsl #2
   42fa8:	blt	42ffc <GetDataSlab+0x1b638>
   42fac:	ldr	r1, [sp, #60]	; 0x3c
   42fb0:	ldr	r2, [sp, #48]	; 0x30
   42fb4:	ldr	r6, [fp, #20]
   42fb8:	mov	r7, #0
   42fbc:	add	r4, r1, r2, lsl #2
   42fc0:	ldr	r1, [r3]
   42fc4:	str	r1, [r4, r7, lsl #2]
   42fc8:	add	r7, r7, #1
   42fcc:	ldr	r5, [lr]
   42fd0:	ldr	r2, [r6]
   42fd4:	add	r0, r5, r0
   42fd8:	add	r3, r3, r5, lsl #2
   42fdc:	cmp	r7, r2
   42fe0:	blt	42fc0 <GetDataSlab+0x1b5fc>
   42fe4:	ldr	r1, [fp, #12]
   42fe8:	sub	r6, fp, #176	; 0xb0
   42fec:	ldr	r4, [r1]
   42ff0:	ldr	r1, [fp, #8]
   42ff4:	ldr	r1, [r1]
   42ff8:	b	43008 <GetDataSlab+0x1b644>
   42ffc:	mov	r4, r1
   43000:	ldr	r1, [sp, #52]	; 0x34
   43004:	sub	r6, fp, #176	; 0xb0
   43008:	str	r1, [sp, #52]	; 0x34
   4300c:	mls	r1, r5, r2, r1
   43010:	str	r4, [sp, #44]	; 0x2c
   43014:	sub	r1, r1, r4
   43018:	add	r4, r1, r0
   4301c:	ldr	r0, [fp, #24]
   43020:	add	sl, r3, r1, lsl #2
   43024:	cmp	r0, #2
   43028:	blt	430d8 <GetDataSlab+0x1b714>
   4302c:	mov	r7, #0
   43030:	ldr	r1, [r9, r7, lsl #2]
   43034:	mov	r0, r7
   43038:	add	r1, r1, #1
   4303c:	str	r1, [r9, r7, lsl #2]
   43040:	ldr	r3, [ip, r7, lsl #2]
   43044:	sdiv	r7, r1, r3
   43048:	mls	r1, r7, r3, r1
   4304c:	cmp	r1, #0
   43050:	bne	430c8 <GetDataSlab+0x1b704>
   43054:	mov	r1, #0
   43058:	str	r1, [r9, r0, lsl #2]
   4305c:	add	r1, r6, r0, lsl #2
   43060:	ldr	r7, [r1, #4]
   43064:	sdiv	r1, r4, r7
   43068:	mls	r1, r1, r7, r4
   4306c:	cmp	r1, #0
   43070:	beq	43094 <GetDataSlab+0x1b6d0>
   43074:	ldr	r3, [r6, r0, lsl #2]
   43078:	ldr	lr, [r8, r0, lsl #2]
   4307c:	sub	r1, r7, r1
   43080:	sub	r6, fp, #176	; 0xb0
   43084:	mla	r1, lr, r3, r1
   43088:	ldr	lr, [fp, #16]
   4308c:	add	r4, r1, r4
   43090:	b	430ac <GetDataSlab+0x1b6e8>
   43094:	ldr	r1, [r8, r0, lsl #2]
   43098:	cmp	r1, #0
   4309c:	beq	430b0 <GetDataSlab+0x1b6ec>
   430a0:	ldr	r3, [r6, r0, lsl #2]
   430a4:	mla	r4, r3, r1, r4
   430a8:	mul	r1, r3, r1
   430ac:	add	sl, sl, r1, lsl #2
   430b0:	ldr	r1, [fp, #24]
   430b4:	add	r7, r0, #1
   430b8:	add	r0, r0, #2
   430bc:	cmp	r0, r1
   430c0:	blt	43030 <GetDataSlab+0x1b66c>
   430c4:	b	430d8 <GetDataSlab+0x1b714>
   430c8:	ldr	r1, [sp, #40]	; 0x28
   430cc:	ldr	r0, [r1, r0, lsl #2]
   430d0:	add	sl, sl, r0, lsl #2
   430d4:	add	r4, r0, r4
   430d8:	ldr	r3, [sp, #48]	; 0x30
   430dc:	ldr	r1, [sp, #56]	; 0x38
   430e0:	mov	r0, #0
   430e4:	add	r3, r2, r3
   430e8:	cmp	r3, r1
   430ec:	str	r3, [sp, #48]	; 0x30
   430f0:	blt	42f98 <GetDataSlab+0x1b5d4>
   430f4:	b	47ffc <GetDataSlab+0x20638>
   430f8:	ldr	r0, [sp, #56]	; 0x38
   430fc:	cmp	r0, #1
   43100:	blt	47ff8 <GetDataSlab+0x20634>
   43104:	ldr	r0, [fp, #20]
   43108:	ldr	lr, [fp, #16]
   4310c:	add	ip, r0, #4
   43110:	sub	r0, fp, #136	; 0x88
   43114:	orr	r9, r0, #4
   43118:	sub	r0, fp, #96	; 0x60
   4311c:	orr	r0, r0, #4
   43120:	str	r0, [sp, #40]	; 0x28
   43124:	ldr	r0, [r8], #4
   43128:	str	r0, [sp, #44]	; 0x2c
   4312c:	mov	r0, #0
   43130:	str	r0, [sp, #48]	; 0x30
   43134:	ldr	r1, [sp, #44]	; 0x2c
   43138:	cmp	r2, #1
   4313c:	add	r0, r1, r4
   43140:	add	r3, sl, r1, lsl #2
   43144:	blt	43198 <GetDataSlab+0x1b7d4>
   43148:	ldr	r1, [sp, #60]	; 0x3c
   4314c:	ldr	r2, [sp, #48]	; 0x30
   43150:	ldr	r6, [fp, #20]
   43154:	mov	r7, #0
   43158:	add	r4, r1, r2, lsl #2
   4315c:	ldr	r1, [r3]
   43160:	str	r1, [r4, r7, lsl #2]
   43164:	add	r7, r7, #1
   43168:	ldr	r5, [lr]
   4316c:	ldr	r2, [r6]
   43170:	add	r0, r5, r0
   43174:	add	r3, r3, r5, lsl #2
   43178:	cmp	r7, r2
   4317c:	blt	4315c <GetDataSlab+0x1b798>
   43180:	ldr	r1, [fp, #12]
   43184:	sub	r6, fp, #176	; 0xb0
   43188:	ldr	r4, [r1]
   4318c:	ldr	r1, [fp, #8]
   43190:	ldr	r1, [r1]
   43194:	b	431a4 <GetDataSlab+0x1b7e0>
   43198:	mov	r4, r1
   4319c:	ldr	r1, [sp, #52]	; 0x34
   431a0:	sub	r6, fp, #176	; 0xb0
   431a4:	str	r1, [sp, #52]	; 0x34
   431a8:	mls	r1, r5, r2, r1
   431ac:	str	r4, [sp, #44]	; 0x2c
   431b0:	sub	r1, r1, r4
   431b4:	add	r4, r1, r0
   431b8:	ldr	r0, [fp, #24]
   431bc:	add	sl, r3, r1, lsl #2
   431c0:	cmp	r0, #2
   431c4:	blt	43274 <GetDataSlab+0x1b8b0>
   431c8:	mov	r7, #0
   431cc:	ldr	r1, [r9, r7, lsl #2]
   431d0:	mov	r0, r7
   431d4:	add	r1, r1, #1
   431d8:	str	r1, [r9, r7, lsl #2]
   431dc:	ldr	r3, [ip, r7, lsl #2]
   431e0:	sdiv	r7, r1, r3
   431e4:	mls	r1, r7, r3, r1
   431e8:	cmp	r1, #0
   431ec:	bne	43264 <GetDataSlab+0x1b8a0>
   431f0:	mov	r1, #0
   431f4:	str	r1, [r9, r0, lsl #2]
   431f8:	add	r1, r6, r0, lsl #2
   431fc:	ldr	r7, [r1, #4]
   43200:	sdiv	r1, r4, r7
   43204:	mls	r1, r1, r7, r4
   43208:	cmp	r1, #0
   4320c:	beq	43230 <GetDataSlab+0x1b86c>
   43210:	ldr	r3, [r6, r0, lsl #2]
   43214:	ldr	lr, [r8, r0, lsl #2]
   43218:	sub	r1, r7, r1
   4321c:	sub	r6, fp, #176	; 0xb0
   43220:	mla	r1, lr, r3, r1
   43224:	ldr	lr, [fp, #16]
   43228:	add	r4, r1, r4
   4322c:	b	43248 <GetDataSlab+0x1b884>
   43230:	ldr	r1, [r8, r0, lsl #2]
   43234:	cmp	r1, #0
   43238:	beq	4324c <GetDataSlab+0x1b888>
   4323c:	ldr	r3, [r6, r0, lsl #2]
   43240:	mla	r4, r3, r1, r4
   43244:	mul	r1, r3, r1
   43248:	add	sl, sl, r1, lsl #2
   4324c:	ldr	r1, [fp, #24]
   43250:	add	r7, r0, #1
   43254:	add	r0, r0, #2
   43258:	cmp	r0, r1
   4325c:	blt	431cc <GetDataSlab+0x1b808>
   43260:	b	43274 <GetDataSlab+0x1b8b0>
   43264:	ldr	r1, [sp, #40]	; 0x28
   43268:	ldr	r0, [r1, r0, lsl #2]
   4326c:	add	sl, sl, r0, lsl #2
   43270:	add	r4, r0, r4
   43274:	ldr	r3, [sp, #48]	; 0x30
   43278:	ldr	r1, [sp, #56]	; 0x38
   4327c:	mov	r0, #0
   43280:	add	r3, r2, r3
   43284:	cmp	r3, r1
   43288:	str	r3, [sp, #48]	; 0x30
   4328c:	blt	43134 <GetDataSlab+0x1b770>
   43290:	b	47ffc <GetDataSlab+0x20638>
   43294:	ldr	r0, [sp, #56]	; 0x38
   43298:	cmp	r0, #1
   4329c:	ldr	r0, [fp, #20]
   432a0:	blt	47ff8 <GetDataSlab+0x20634>
   432a4:	add	r9, r0, #4
   432a8:	sub	r0, fp, #136	; 0x88
   432ac:	ldr	lr, [fp, #16]
   432b0:	orr	sl, r0, #4
   432b4:	sub	r0, fp, #96	; 0x60
   432b8:	orr	r0, r0, #4
   432bc:	str	r0, [sp, #40]	; 0x28
   432c0:	ldr	r0, [r8], #4
   432c4:	str	r0, [sp, #44]	; 0x2c
   432c8:	mov	r0, #0
   432cc:	str	r0, [sp, #48]	; 0x30
   432d0:	ldr	r1, [sp, #44]	; 0x2c
   432d4:	cmp	r2, #1
   432d8:	add	r0, r1, r4
   432dc:	add	r3, ip, r1, lsl #2
   432e0:	blt	4333c <GetDataSlab+0x1b978>
   432e4:	ldr	r1, [sp, #60]	; 0x3c
   432e8:	ldr	r2, [sp, #48]	; 0x30
   432ec:	ldr	r6, [fp, #20]
   432f0:	mov	r7, #0
   432f4:	add	r4, r1, r2, lsl #2
   432f8:	vldr	s0, [r3]
   432fc:	vcvt.s32.f32	s0, s0
   43300:	vmov	r1, s0
   43304:	str	r1, [r4, r7, lsl #2]
   43308:	add	r7, r7, #1
   4330c:	ldr	r5, [lr]
   43310:	ldr	r2, [r6]
   43314:	add	r0, r5, r0
   43318:	add	r3, r3, r5, lsl #2
   4331c:	cmp	r7, r2
   43320:	blt	432f8 <GetDataSlab+0x1b934>
   43324:	ldr	r1, [fp, #12]
   43328:	sub	r6, fp, #176	; 0xb0
   4332c:	ldr	r4, [r1]
   43330:	ldr	r1, [fp, #8]
   43334:	ldr	r1, [r1]
   43338:	b	43348 <GetDataSlab+0x1b984>
   4333c:	mov	r4, r1
   43340:	ldr	r1, [sp, #52]	; 0x34
   43344:	sub	r6, fp, #176	; 0xb0
   43348:	str	r1, [sp, #52]	; 0x34
   4334c:	mls	r1, r5, r2, r1
   43350:	str	r4, [sp, #44]	; 0x2c
   43354:	sub	r1, r1, r4
   43358:	add	r4, r1, r0
   4335c:	ldr	r0, [fp, #24]
   43360:	add	ip, r3, r1, lsl #2
   43364:	cmp	r0, #2
   43368:	blt	43418 <GetDataSlab+0x1ba54>
   4336c:	mov	r7, #0
   43370:	ldr	r1, [sl, r7, lsl #2]
   43374:	mov	r0, r7
   43378:	add	r1, r1, #1
   4337c:	str	r1, [sl, r7, lsl #2]
   43380:	ldr	r3, [r9, r7, lsl #2]
   43384:	sdiv	r7, r1, r3
   43388:	mls	r1, r7, r3, r1
   4338c:	cmp	r1, #0
   43390:	bne	43408 <GetDataSlab+0x1ba44>
   43394:	mov	r1, #0
   43398:	str	r1, [sl, r0, lsl #2]
   4339c:	add	r1, r6, r0, lsl #2
   433a0:	ldr	r7, [r1, #4]
   433a4:	sdiv	r1, r4, r7
   433a8:	mls	r1, r1, r7, r4
   433ac:	cmp	r1, #0
   433b0:	beq	433d4 <GetDataSlab+0x1ba10>
   433b4:	ldr	r3, [r6, r0, lsl #2]
   433b8:	ldr	lr, [r8, r0, lsl #2]
   433bc:	sub	r1, r7, r1
   433c0:	sub	r6, fp, #176	; 0xb0
   433c4:	mla	r1, lr, r3, r1
   433c8:	ldr	lr, [fp, #16]
   433cc:	add	r4, r1, r4
   433d0:	b	433ec <GetDataSlab+0x1ba28>
   433d4:	ldr	r1, [r8, r0, lsl #2]
   433d8:	cmp	r1, #0
   433dc:	beq	433f0 <GetDataSlab+0x1ba2c>
   433e0:	ldr	r3, [r6, r0, lsl #2]
   433e4:	mla	r4, r3, r1, r4
   433e8:	mul	r1, r3, r1
   433ec:	add	ip, ip, r1, lsl #2
   433f0:	ldr	r1, [fp, #24]
   433f4:	add	r7, r0, #1
   433f8:	add	r0, r0, #2
   433fc:	cmp	r0, r1
   43400:	blt	43370 <GetDataSlab+0x1b9ac>
   43404:	b	43418 <GetDataSlab+0x1ba54>
   43408:	ldr	r1, [sp, #40]	; 0x28
   4340c:	ldr	r0, [r1, r0, lsl #2]
   43410:	add	ip, ip, r0, lsl #2
   43414:	add	r4, r0, r4
   43418:	ldr	r3, [sp, #48]	; 0x30
   4341c:	ldr	r1, [sp, #56]	; 0x38
   43420:	mov	r0, #0
   43424:	add	r3, r2, r3
   43428:	cmp	r3, r1
   4342c:	str	r3, [sp, #48]	; 0x30
   43430:	blt	432d0 <GetDataSlab+0x1b90c>
   43434:	b	47ffc <GetDataSlab+0x20638>
   43438:	ldr	r0, [sp, #56]	; 0x38
   4343c:	cmp	r0, #1
   43440:	ldr	r0, [fp, #20]
   43444:	blt	47ff8 <GetDataSlab+0x20634>
   43448:	add	r9, r0, #4
   4344c:	sub	r0, fp, #136	; 0x88
   43450:	ldr	lr, [fp, #16]
   43454:	orr	sl, r0, #4
   43458:	sub	r0, fp, #96	; 0x60
   4345c:	orr	r0, r0, #4
   43460:	str	r0, [sp, #40]	; 0x28
   43464:	ldr	r0, [r8], #4
   43468:	str	r0, [sp, #48]	; 0x30
   4346c:	mov	r0, #0
   43470:	str	r0, [sp, #52]	; 0x34
   43474:	ldr	r1, [sp, #48]	; 0x30
   43478:	cmp	r2, #1
   4347c:	add	r0, r1, r4
   43480:	add	r3, ip, r1, lsl #3
   43484:	blt	434e0 <GetDataSlab+0x1bb1c>
   43488:	ldr	r1, [sp, #60]	; 0x3c
   4348c:	ldr	r2, [sp, #52]	; 0x34
   43490:	ldr	r6, [fp, #20]
   43494:	mov	r7, #0
   43498:	add	r4, r1, r2, lsl #2
   4349c:	vldr	d16, [r3]
   434a0:	vcvt.s32.f64	s0, d16
   434a4:	vmov	r1, s0
   434a8:	str	r1, [r4, r7, lsl #2]
   434ac:	add	r7, r7, #1
   434b0:	ldr	r5, [lr]
   434b4:	ldr	r2, [r6]
   434b8:	add	r0, r5, r0
   434bc:	add	r3, r3, r5, lsl #3
   434c0:	cmp	r7, r2
   434c4:	blt	4349c <GetDataSlab+0x1bad8>
   434c8:	ldr	r1, [fp, #12]
   434cc:	sub	r6, fp, #176	; 0xb0
   434d0:	ldr	r4, [r1]
   434d4:	ldr	r1, [fp, #8]
   434d8:	ldr	r1, [r1]
   434dc:	b	434ec <GetDataSlab+0x1bb28>
   434e0:	mov	r4, r1
   434e4:	ldr	r1, [sp, #44]	; 0x2c
   434e8:	sub	r6, fp, #176	; 0xb0
   434ec:	str	r1, [sp, #44]	; 0x2c
   434f0:	mls	r1, r5, r2, r1
   434f4:	str	r4, [sp, #48]	; 0x30
   434f8:	sub	r1, r1, r4
   434fc:	add	r4, r1, r0
   43500:	ldr	r0, [fp, #24]
   43504:	add	ip, r3, r1, lsl #3
   43508:	cmp	r0, #2
   4350c:	blt	435bc <GetDataSlab+0x1bbf8>
   43510:	mov	r7, #0
   43514:	ldr	r1, [sl, r7, lsl #2]
   43518:	mov	r0, r7
   4351c:	add	r1, r1, #1
   43520:	str	r1, [sl, r7, lsl #2]
   43524:	ldr	r3, [r9, r7, lsl #2]
   43528:	sdiv	r7, r1, r3
   4352c:	mls	r1, r7, r3, r1
   43530:	cmp	r1, #0
   43534:	bne	435ac <GetDataSlab+0x1bbe8>
   43538:	mov	r1, #0
   4353c:	str	r1, [sl, r0, lsl #2]
   43540:	add	r1, r6, r0, lsl #2
   43544:	ldr	r7, [r1, #4]
   43548:	sdiv	r1, r4, r7
   4354c:	mls	r1, r1, r7, r4
   43550:	cmp	r1, #0
   43554:	beq	43578 <GetDataSlab+0x1bbb4>
   43558:	ldr	r3, [r6, r0, lsl #2]
   4355c:	ldr	lr, [r8, r0, lsl #2]
   43560:	sub	r1, r7, r1
   43564:	sub	r6, fp, #176	; 0xb0
   43568:	mla	r1, lr, r3, r1
   4356c:	ldr	lr, [fp, #16]
   43570:	add	r4, r1, r4
   43574:	b	43590 <GetDataSlab+0x1bbcc>
   43578:	ldr	r1, [r8, r0, lsl #2]
   4357c:	cmp	r1, #0
   43580:	beq	43594 <GetDataSlab+0x1bbd0>
   43584:	ldr	r3, [r6, r0, lsl #2]
   43588:	mla	r4, r3, r1, r4
   4358c:	mul	r1, r3, r1
   43590:	add	ip, ip, r1, lsl #3
   43594:	ldr	r1, [fp, #24]
   43598:	add	r7, r0, #1
   4359c:	add	r0, r0, #2
   435a0:	cmp	r0, r1
   435a4:	blt	43514 <GetDataSlab+0x1bb50>
   435a8:	b	435bc <GetDataSlab+0x1bbf8>
   435ac:	ldr	r1, [sp, #40]	; 0x28
   435b0:	ldr	r0, [r1, r0, lsl #2]
   435b4:	add	ip, ip, r0, lsl #3
   435b8:	add	r4, r0, r4
   435bc:	ldr	r3, [sp, #52]	; 0x34
   435c0:	ldr	r1, [sp, #56]	; 0x38
   435c4:	mov	r0, #0
   435c8:	add	r3, r2, r3
   435cc:	cmp	r3, r1
   435d0:	str	r3, [sp, #52]	; 0x34
   435d4:	blt	43474 <GetDataSlab+0x1bab0>
   435d8:	b	47ffc <GetDataSlab+0x20638>
   435dc:	ldr	r0, [sp, #56]	; 0x38
   435e0:	ldr	ip, [sp, #60]	; 0x3c
   435e4:	cmp	r0, #1
   435e8:	blt	43760 <GetDataSlab+0x1bd9c>
   435ec:	ldr	r8, [fp, #12]
   435f0:	ldr	r0, [fp, #20]
   435f4:	mov	r2, #0
   435f8:	ldr	r7, [r8], #4
   435fc:	add	r9, r0, #4
   43600:	sub	r0, fp, #136	; 0x88
   43604:	orr	lr, r0, #4
   43608:	sub	r0, fp, #96	; 0x60
   4360c:	orr	r0, r0, #4
   43610:	str	r0, [sp, #44]	; 0x2c
   43614:	add	r3, r7, r3
   43618:	add	r4, sl, r7, lsl #3
   4361c:	cmp	r1, #1
   43620:	str	r2, [sp, #52]	; 0x34
   43624:	blt	43670 <GetDataSlab+0x1bcac>
   43628:	add	r0, ip, r2, lsl #2
   4362c:	ldr	r2, [fp, #20]
   43630:	ldr	r6, [fp, #16]
   43634:	mov	r7, #0
   43638:	ldr	r1, [r4]
   4363c:	str	r1, [r0, r7, lsl #2]
   43640:	add	r7, r7, #1
   43644:	ldr	r5, [r6]
   43648:	ldr	r1, [r2]
   4364c:	add	r3, r5, r3
   43650:	add	r4, r4, r5, lsl #3
   43654:	cmp	r7, r1
   43658:	blt	43638 <GetDataSlab+0x1bc74>
   4365c:	ldr	r0, [fp, #12]
   43660:	ldr	r7, [r0]
   43664:	ldr	r0, [fp, #8]
   43668:	ldr	r0, [r0]
   4366c:	b	43674 <GetDataSlab+0x1bcb0>
   43670:	ldr	r0, [sp, #28]
   43674:	str	r0, [sp, #28]
   43678:	mls	r0, r5, r1, r0
   4367c:	mov	r6, r7
   43680:	sub	r0, r0, r7
   43684:	add	sl, r4, r0, lsl #3
   43688:	add	r3, r0, r3
   4368c:	ldr	r0, [fp, #24]
   43690:	cmp	r0, #2
   43694:	blt	43748 <GetDataSlab+0x1bd84>
   43698:	mov	r7, #0
   4369c:	mov	r0, r7
   436a0:	ldr	r7, [lr, r7, lsl #2]
   436a4:	add	r7, r7, #1
   436a8:	str	r7, [lr, r0, lsl #2]
   436ac:	ldr	r4, [r9, r0, lsl #2]
   436b0:	sdiv	r2, r7, r4
   436b4:	mls	r2, r2, r4, r7
   436b8:	cmp	r2, #0
   436bc:	bne	43738 <GetDataSlab+0x1bd74>
   436c0:	mov	r2, #0
   436c4:	sub	r4, fp, #176	; 0xb0
   436c8:	str	r2, [lr, r0, lsl #2]
   436cc:	add	r2, r4, r0, lsl #2
   436d0:	ldr	r7, [r2, #4]
   436d4:	sdiv	r2, r3, r7
   436d8:	mls	ip, r2, r7, r3
   436dc:	cmp	ip, #0
   436e0:	beq	436fc <GetDataSlab+0x1bd38>
   436e4:	ldr	r2, [r4, r0, lsl #2]
   436e8:	ldr	r4, [r8, r0, lsl #2]
   436ec:	sub	r7, r7, ip
   436f0:	mla	r2, r4, r2, r7
   436f4:	add	r3, r2, r3
   436f8:	b	43718 <GetDataSlab+0x1bd54>
   436fc:	ldr	r7, [r8, r0, lsl #2]
   43700:	cmp	r7, #0
   43704:	beq	4371c <GetDataSlab+0x1bd58>
   43708:	sub	r2, fp, #176	; 0xb0
   4370c:	ldr	r2, [r2, r0, lsl #2]
   43710:	mla	r3, r2, r7, r3
   43714:	mul	r2, r2, r7
   43718:	add	sl, sl, r2, lsl #3
   4371c:	ldr	r2, [fp, #24]
   43720:	ldr	ip, [sp, #60]	; 0x3c
   43724:	add	r7, r0, #1
   43728:	add	r0, r0, #2
   4372c:	cmp	r0, r2
   43730:	blt	4369c <GetDataSlab+0x1bcd8>
   43734:	b	43748 <GetDataSlab+0x1bd84>
   43738:	ldr	r2, [sp, #44]	; 0x2c
   4373c:	ldr	r0, [r2, r0, lsl #2]
   43740:	add	sl, sl, r0, lsl #3
   43744:	add	r3, r0, r3
   43748:	ldr	r2, [sp, #52]	; 0x34
   4374c:	ldr	r0, [sp, #56]	; 0x38
   43750:	mov	r7, r6
   43754:	add	r2, r1, r2
   43758:	cmp	r2, r0
   4375c:	blt	43614 <GetDataSlab+0x1bc50>
   43760:	ldr	r3, [fp, #16]
   43764:	ldr	r6, [sp, #40]	; 0x28
   43768:	mov	r0, #0
   4376c:	cmp	r6, #13
   43770:	bne	47ffc <GetDataSlab+0x20638>
   43774:	ldr	r5, [r3]
   43778:	ldr	r9, [fp, #8]
   4377c:	mov	r4, #0
   43780:	sub	r3, fp, #176	; 0xb0
   43784:	sub	r0, r5, #1
   43788:	str	r0, [fp, #-96]	; 0xffffffa0
   4378c:	ldr	r0, [r9]
   43790:	sub	r9, fp, #96	; 0x60
   43794:	str	r0, [sp, #44]	; 0x2c
   43798:	str	r0, [fp, #-176]	; 0xffffff50
   4379c:	ldr	r0, [fp, #20]
   437a0:	ldr	r2, [r0]
   437a4:	ldr	r0, [fp, #24]
   437a8:	cmp	r0, #2
   437ac:	mov	r0, r2
   437b0:	str	r2, [sp, #56]	; 0x38
   437b4:	blt	4392c <GetDataSlab+0x1bf68>
   437b8:	ldr	r0, [fp, #8]
   437bc:	ldr	r7, [sp, #44]	; 0x2c
   437c0:	mov	ip, #1
   437c4:	mvn	sl, #15
   437c8:	mov	r4, #0
   437cc:	str	r2, [sp, #56]	; 0x38
   437d0:	mov	r1, r0
   437d4:	sub	r0, r0, #4
   437d8:	mov	r6, r7
   437dc:	sub	lr, r1, #12
   437e0:	mov	r1, #0
   437e4:	str	r1, [sp, #52]	; 0x34
   437e8:	mov	r1, r2
   437ec:	ldr	r1, [fp, #16]
   437f0:	ldr	r1, [r1, ip, lsl #2]
   437f4:	str	r7, [r3, ip, lsl #2]
   437f8:	sub	r8, r1, #1
   437fc:	ldr	r1, [fp, #8]
   43800:	str	r8, [r9, ip, lsl #2]
   43804:	ldr	r3, [r1, ip, lsl #2]
   43808:	ldr	r1, [sp, #52]	; 0x34
   4380c:	add	r1, r1, #1
   43810:	str	r3, [sp, #40]	; 0x28
   43814:	cmp	r1, #4
   43818:	str	r1, [sp, #52]	; 0x34
   4381c:	bcs	4382c <GetDataSlab+0x1be68>
   43820:	mov	r1, r3
   43824:	mov	r3, ip
   43828:	b	438cc <GetDataSlab+0x1bf08>
   4382c:	vmov.i32	q9, #1	; 0x00000001
   43830:	vmov.i32	q10, #1	; 0x00000001
   43834:	vmov.i32	q8, #1	; 0x00000001
   43838:	bic	r1, r1, #3
   4383c:	vmov.32	d23[1], r3
   43840:	bic	r9, ip, #3
   43844:	str	r6, [sp, #32]
   43848:	vmov.32	d18[0], r7
   4384c:	vmov.32	d20[0], r8
   43850:	str	r1, [sp, #36]	; 0x24
   43854:	sub	r3, ip, r1
   43858:	mov	r1, lr
   4385c:	vorr	d16, d18, d18
   43860:	vmov.i32	q9, #1	; 0x00000001
   43864:	vorr	d18, d20, d20
   43868:	vld1.32	{d20-d21}, [r1], sl
   4386c:	subs	r9, r9, #4
   43870:	vrev64.32	q12, q10
   43874:	vext.8	q12, q12, q12, #8
   43878:	vext.8	q11, q11, q12, #12
   4387c:	vmul.i32	q9, q9, q12
   43880:	vmul.i32	q8, q11, q8
   43884:	vorr	q11, q12, q12
   43888:	bne	43868 <GetDataSlab+0x1bea4>
   4388c:	ldr	r1, [sp, #52]	; 0x34
   43890:	ldr	r6, [sp, #36]	; 0x24
   43894:	vext.8	q11, q9, q8, #8
   43898:	vext.8	q12, q8, q8, #8
   4389c:	vmul.i32	q0, q9, q11
   438a0:	vmul.i32	q1, q8, q12
   438a4:	vmul.i32	q8, q0, d0[1]
   438a8:	vmul.i32	q9, q1, d2[1]
   438ac:	vmov.32	r8, d16[0]
   438b0:	vmov.32	r7, d18[0]
   438b4:	cmp	r1, r6
   438b8:	bne	438c4 <GetDataSlab+0x1bf00>
   438bc:	ldr	r6, [sp, #32]
   438c0:	b	438e0 <GetDataSlab+0x1bf1c>
   438c4:	ldr	r6, [sp, #32]
   438c8:	vmov.32	r1, d20[0]
   438cc:	mul	r7, r1, r7
   438d0:	ldr	r1, [r0, r3, lsl #2]
   438d4:	subs	r3, r3, #1
   438d8:	mul	r8, r8, r1
   438dc:	bne	438cc <GetDataSlab+0x1bf08>
   438e0:	ldr	r1, [fp, #12]
   438e4:	sub	r3, fp, #176	; 0xb0
   438e8:	sub	r9, fp, #96	; 0x60
   438ec:	add	lr, lr, #4
   438f0:	str	r7, [r3, ip, lsl #2]
   438f4:	str	r8, [r9, ip, lsl #2]
   438f8:	ldr	r1, [r1, ip, lsl #2]
   438fc:	mla	r4, r1, r6, r4
   43900:	ldr	r1, [fp, #20]
   43904:	ldr	r6, [sp, #56]	; 0x38
   43908:	ldr	r1, [r1, ip, lsl #2]
   4390c:	add	ip, ip, #1
   43910:	mul	r6, r1, r6
   43914:	ldr	r1, [fp, #24]
   43918:	str	r6, [sp, #56]	; 0x38
   4391c:	mov	r6, r7
   43920:	ldr	r7, [sp, #40]	; 0x28
   43924:	cmp	ip, r1
   43928:	bne	437ec <GetDataSlab+0x1be28>
   4392c:	ldr	r0, [sp, #48]	; 0x30
   43930:	ldr	r9, [fp, #12]
   43934:	cmp	r5, #1
   43938:	add	sl, r0, r4, lsl #3
   4393c:	mov	r8, r9
   43940:	bne	47430 <GetDataSlab+0x1fa6c>
   43944:	ldr	r0, [sp, #56]	; 0x38
   43948:	cmp	r0, #1
   4394c:	blt	47ff8 <GetDataSlab+0x20634>
   43950:	ldr	r0, [fp, #20]
   43954:	mov	r9, r8
   43958:	mov	lr, #0
   4395c:	add	ip, r0, #4
   43960:	sub	r0, fp, #136	; 0x88
   43964:	orr	r7, r0, #4
   43968:	sub	r0, fp, #96	; 0x60
   4396c:	orr	r0, r0, #4
   43970:	str	r0, [sp, #48]	; 0x30
   43974:	ldr	r0, [r9], #4
   43978:	str	r0, [sp, #52]	; 0x34
   4397c:	ldr	r3, [sp, #52]	; 0x34
   43980:	ldr	r1, [sp, #44]	; 0x2c
   43984:	cmp	r2, #1
   43988:	add	r8, r3, r4
   4398c:	add	r0, sl, r3, lsl #3
   43990:	blt	439d0 <GetDataSlab+0x1c00c>
   43994:	ldr	r1, [sp, #60]	; 0x3c
   43998:	ldr	r5, [fp, #20]
   4399c:	mov	r3, r0
   439a0:	add	r4, r1, lr, lsl #2
   439a4:	mov	r1, #0
   439a8:	ldr	r2, [r3], #8
   439ac:	str	r2, [r4, r1, lsl #2]
   439b0:	add	r1, r1, #1
   439b4:	ldr	r2, [r5]
   439b8:	cmp	r1, r2
   439bc:	blt	439a8 <GetDataSlab+0x1bfe4>
   439c0:	ldr	r1, [fp, #12]
   439c4:	ldr	r3, [r1]
   439c8:	ldr	r1, [fp, #8]
   439cc:	ldr	r1, [r1]
   439d0:	str	r1, [sp, #44]	; 0x2c
   439d4:	sub	r1, r1, r3
   439d8:	str	r3, [sp, #52]	; 0x34
   439dc:	add	sl, r0, r1, lsl #3
   439e0:	ldr	r0, [fp, #24]
   439e4:	add	r4, r8, r1
   439e8:	cmp	r0, #2
   439ec:	blt	43a9c <GetDataSlab+0x1c0d8>
   439f0:	mov	r1, #0
   439f4:	mov	r8, #0
   439f8:	mov	r0, r1
   439fc:	ldr	r1, [r7, r1, lsl #2]
   43a00:	add	r1, r1, #1
   43a04:	str	r1, [r7, r0, lsl #2]
   43a08:	ldr	r6, [ip, r0, lsl #2]
   43a0c:	sdiv	r5, r1, r6
   43a10:	mls	r1, r5, r6, r1
   43a14:	cmp	r1, #0
   43a18:	bne	43a8c <GetDataSlab+0x1c0c8>
   43a1c:	sub	r3, fp, #176	; 0xb0
   43a20:	str	r8, [r7, r0, lsl #2]
   43a24:	add	r1, r3, r0, lsl #2
   43a28:	ldr	r1, [r1, #4]
   43a2c:	sdiv	r5, r4, r1
   43a30:	mls	r6, r5, r1, r4
   43a34:	cmp	r6, #0
   43a38:	beq	43a54 <GetDataSlab+0x1c090>
   43a3c:	ldr	r5, [r3, r0, lsl #2]
   43a40:	ldr	r3, [r9, r0, lsl #2]
   43a44:	sub	r1, r1, r6
   43a48:	mla	r1, r3, r5, r1
   43a4c:	add	r4, r1, r4
   43a50:	b	43a70 <GetDataSlab+0x1c0ac>
   43a54:	ldr	r1, [r9, r0, lsl #2]
   43a58:	cmp	r1, #0
   43a5c:	beq	43a74 <GetDataSlab+0x1c0b0>
   43a60:	sub	r3, fp, #176	; 0xb0
   43a64:	ldr	r3, [r3, r0, lsl #2]
   43a68:	mla	r4, r3, r1, r4
   43a6c:	mul	r1, r3, r1
   43a70:	add	sl, sl, r1, lsl #3
   43a74:	ldr	r3, [fp, #24]
   43a78:	add	r1, r0, #1
   43a7c:	add	r0, r0, #2
   43a80:	cmp	r0, r3
   43a84:	blt	439f8 <GetDataSlab+0x1c034>
   43a88:	b	43a9c <GetDataSlab+0x1c0d8>
   43a8c:	ldr	r1, [sp, #48]	; 0x30
   43a90:	ldr	r0, [r1, r0, lsl #2]
   43a94:	add	sl, sl, r0, lsl #3
   43a98:	add	r4, r0, r4
   43a9c:	ldr	r1, [sp, #56]	; 0x38
   43aa0:	add	lr, r2, lr
   43aa4:	mov	r0, #0
   43aa8:	cmp	lr, r1
   43aac:	blt	4397c <GetDataSlab+0x1bfb8>
   43ab0:	b	47ffc <GetDataSlab+0x20638>
   43ab4:	ldr	r0, [sp, #56]	; 0x38
   43ab8:	cmp	r0, #1
   43abc:	blt	47ff8 <GetDataSlab+0x20634>
   43ac0:	ldr	r0, [fp, #20]
   43ac4:	ldr	lr, [fp, #16]
   43ac8:	add	ip, r0, #4
   43acc:	sub	r0, fp, #136	; 0x88
   43ad0:	orr	r9, r0, #4
   43ad4:	sub	r0, fp, #96	; 0x60
   43ad8:	orr	r0, r0, #4
   43adc:	str	r0, [sp, #40]	; 0x28
   43ae0:	ldr	r0, [r8], #4
   43ae4:	str	r0, [sp, #44]	; 0x2c
   43ae8:	mov	r0, #0
   43aec:	str	r0, [sp, #48]	; 0x30
   43af0:	ldr	r1, [sp, #44]	; 0x2c
   43af4:	cmp	r2, #1
   43af8:	add	r0, r1, r4
   43afc:	add	r3, sl, r1
   43b00:	blt	43b54 <GetDataSlab+0x1c190>
   43b04:	ldr	r1, [sp, #60]	; 0x3c
   43b08:	ldr	r2, [sp, #48]	; 0x30
   43b0c:	ldr	r6, [fp, #20]
   43b10:	mov	r7, #0
   43b14:	add	r4, r1, r2, lsl #2
   43b18:	ldrb	r1, [r3]
   43b1c:	str	r1, [r4, r7, lsl #2]
   43b20:	add	r7, r7, #1
   43b24:	ldr	r5, [lr]
   43b28:	ldr	r2, [r6]
   43b2c:	add	r0, r5, r0
   43b30:	add	r3, r3, r5
   43b34:	cmp	r7, r2
   43b38:	blt	43b18 <GetDataSlab+0x1c154>
   43b3c:	ldr	r1, [fp, #12]
   43b40:	sub	r6, fp, #176	; 0xb0
   43b44:	ldr	r4, [r1]
   43b48:	ldr	r1, [fp, #8]
   43b4c:	ldr	r1, [r1]
   43b50:	b	43b60 <GetDataSlab+0x1c19c>
   43b54:	mov	r4, r1
   43b58:	ldr	r1, [sp, #52]	; 0x34
   43b5c:	sub	r6, fp, #176	; 0xb0
   43b60:	str	r1, [sp, #52]	; 0x34
   43b64:	mls	r1, r5, r2, r1
   43b68:	str	r4, [sp, #44]	; 0x2c
   43b6c:	sub	r1, r1, r4
   43b70:	add	r4, r1, r0
   43b74:	ldr	r0, [fp, #24]
   43b78:	add	sl, r3, r1
   43b7c:	cmp	r0, #2
   43b80:	blt	43c2c <GetDataSlab+0x1c268>
   43b84:	mov	r7, #0
   43b88:	ldr	r1, [r9, r7, lsl #2]
   43b8c:	mov	r0, r7
   43b90:	add	r1, r1, #1
   43b94:	str	r1, [r9, r7, lsl #2]
   43b98:	ldr	r3, [ip, r7, lsl #2]
   43b9c:	sdiv	r7, r1, r3
   43ba0:	mls	r1, r7, r3, r1
   43ba4:	cmp	r1, #0
   43ba8:	bne	43c1c <GetDataSlab+0x1c258>
   43bac:	mov	r1, #0
   43bb0:	str	r1, [r9, r0, lsl #2]
   43bb4:	add	r1, r6, r0, lsl #2
   43bb8:	ldr	r7, [r1, #4]
   43bbc:	sdiv	r1, r4, r7
   43bc0:	mls	r1, r1, r7, r4
   43bc4:	cmp	r1, #0
   43bc8:	beq	43bf0 <GetDataSlab+0x1c22c>
   43bcc:	ldr	r3, [r6, r0, lsl #2]
   43bd0:	ldr	lr, [r8, r0, lsl #2]
   43bd4:	sub	r1, r7, r1
   43bd8:	sub	r6, fp, #176	; 0xb0
   43bdc:	mla	r1, lr, r3, r1
   43be0:	ldr	lr, [fp, #16]
   43be4:	add	r4, r1, r4
   43be8:	add	sl, sl, r1
   43bec:	b	43c04 <GetDataSlab+0x1c240>
   43bf0:	ldr	r1, [r8, r0, lsl #2]
   43bf4:	cmp	r1, #0
   43bf8:	ldrne	r3, [r6, r0, lsl #2]
   43bfc:	mlane	r4, r3, r1, r4
   43c00:	mlane	sl, r3, r1, sl
   43c04:	ldr	r1, [fp, #24]
   43c08:	add	r7, r0, #1
   43c0c:	add	r0, r0, #2
   43c10:	cmp	r0, r1
   43c14:	blt	43b88 <GetDataSlab+0x1c1c4>
   43c18:	b	43c2c <GetDataSlab+0x1c268>
   43c1c:	ldr	r1, [sp, #40]	; 0x28
   43c20:	ldr	r0, [r1, r0, lsl #2]
   43c24:	add	sl, sl, r0
   43c28:	add	r4, r0, r4
   43c2c:	ldr	r3, [sp, #48]	; 0x30
   43c30:	ldr	r1, [sp, #56]	; 0x38
   43c34:	mov	r0, #0
   43c38:	add	r3, r2, r3
   43c3c:	cmp	r3, r1
   43c40:	str	r3, [sp, #48]	; 0x30
   43c44:	blt	43af0 <GetDataSlab+0x1c12c>
   43c48:	b	47ffc <GetDataSlab+0x20638>
   43c4c:	ldr	r0, [sp, #56]	; 0x38
   43c50:	cmp	r0, #1
   43c54:	blt	47ff8 <GetDataSlab+0x20634>
   43c58:	ldr	r0, [fp, #20]
   43c5c:	ldr	lr, [fp, #16]
   43c60:	add	ip, r0, #4
   43c64:	sub	r0, fp, #136	; 0x88
   43c68:	orr	r9, r0, #4
   43c6c:	sub	r0, fp, #96	; 0x60
   43c70:	orr	r0, r0, #4
   43c74:	str	r0, [sp, #40]	; 0x28
   43c78:	ldr	r0, [r8], #4
   43c7c:	str	r0, [sp, #44]	; 0x2c
   43c80:	mov	r0, #0
   43c84:	str	r0, [sp, #48]	; 0x30
   43c88:	ldr	r1, [sp, #44]	; 0x2c
   43c8c:	cmp	r2, #1
   43c90:	add	r0, r1, r4
   43c94:	add	r3, sl, r1, lsl #1
   43c98:	blt	43cec <GetDataSlab+0x1c328>
   43c9c:	ldr	r1, [sp, #60]	; 0x3c
   43ca0:	ldr	r2, [sp, #48]	; 0x30
   43ca4:	ldr	r6, [fp, #20]
   43ca8:	mov	r7, #0
   43cac:	add	r4, r1, r2, lsl #2
   43cb0:	ldrsh	r1, [r3]
   43cb4:	str	r1, [r4, r7, lsl #2]
   43cb8:	add	r7, r7, #1
   43cbc:	ldr	r5, [lr]
   43cc0:	ldr	r2, [r6]
   43cc4:	add	r0, r5, r0
   43cc8:	add	r3, r3, r5, lsl #1
   43ccc:	cmp	r7, r2
   43cd0:	blt	43cb0 <GetDataSlab+0x1c2ec>
   43cd4:	ldr	r1, [fp, #12]
   43cd8:	sub	r6, fp, #176	; 0xb0
   43cdc:	ldr	r4, [r1]
   43ce0:	ldr	r1, [fp, #8]
   43ce4:	ldr	r1, [r1]
   43ce8:	b	43cf8 <GetDataSlab+0x1c334>
   43cec:	mov	r4, r1
   43cf0:	ldr	r1, [sp, #52]	; 0x34
   43cf4:	sub	r6, fp, #176	; 0xb0
   43cf8:	str	r1, [sp, #52]	; 0x34
   43cfc:	mls	r1, r5, r2, r1
   43d00:	str	r4, [sp, #44]	; 0x2c
   43d04:	sub	r1, r1, r4
   43d08:	add	r4, r1, r0
   43d0c:	ldr	r0, [fp, #24]
   43d10:	add	sl, r3, r1, lsl #1
   43d14:	cmp	r0, #2
   43d18:	blt	43dc8 <GetDataSlab+0x1c404>
   43d1c:	mov	r7, #0
   43d20:	ldr	r1, [r9, r7, lsl #2]
   43d24:	mov	r0, r7
   43d28:	add	r1, r1, #1
   43d2c:	str	r1, [r9, r7, lsl #2]
   43d30:	ldr	r3, [ip, r7, lsl #2]
   43d34:	sdiv	r7, r1, r3
   43d38:	mls	r1, r7, r3, r1
   43d3c:	cmp	r1, #0
   43d40:	bne	43db8 <GetDataSlab+0x1c3f4>
   43d44:	mov	r1, #0
   43d48:	str	r1, [r9, r0, lsl #2]
   43d4c:	add	r1, r6, r0, lsl #2
   43d50:	ldr	r7, [r1, #4]
   43d54:	sdiv	r1, r4, r7
   43d58:	mls	r1, r1, r7, r4
   43d5c:	cmp	r1, #0
   43d60:	beq	43d84 <GetDataSlab+0x1c3c0>
   43d64:	ldr	r3, [r6, r0, lsl #2]
   43d68:	ldr	lr, [r8, r0, lsl #2]
   43d6c:	sub	r1, r7, r1
   43d70:	sub	r6, fp, #176	; 0xb0
   43d74:	mla	r1, lr, r3, r1
   43d78:	ldr	lr, [fp, #16]
   43d7c:	add	r4, r1, r4
   43d80:	b	43d9c <GetDataSlab+0x1c3d8>
   43d84:	ldr	r1, [r8, r0, lsl #2]
   43d88:	cmp	r1, #0
   43d8c:	beq	43da0 <GetDataSlab+0x1c3dc>
   43d90:	ldr	r3, [r6, r0, lsl #2]
   43d94:	mla	r4, r3, r1, r4
   43d98:	mul	r1, r3, r1
   43d9c:	add	sl, sl, r1, lsl #1
   43da0:	ldr	r1, [fp, #24]
   43da4:	add	r7, r0, #1
   43da8:	add	r0, r0, #2
   43dac:	cmp	r0, r1
   43db0:	blt	43d20 <GetDataSlab+0x1c35c>
   43db4:	b	43dc8 <GetDataSlab+0x1c404>
   43db8:	ldr	r1, [sp, #40]	; 0x28
   43dbc:	ldr	r0, [r1, r0, lsl #2]
   43dc0:	add	sl, sl, r0, lsl #1
   43dc4:	add	r4, r0, r4
   43dc8:	ldr	r3, [sp, #48]	; 0x30
   43dcc:	ldr	r1, [sp, #56]	; 0x38
   43dd0:	mov	r0, #0
   43dd4:	add	r3, r2, r3
   43dd8:	cmp	r3, r1
   43ddc:	str	r3, [sp, #48]	; 0x30
   43de0:	blt	43c88 <GetDataSlab+0x1c2c4>
   43de4:	b	47ffc <GetDataSlab+0x20638>
   43de8:	ldr	r0, [sp, #56]	; 0x38
   43dec:	cmp	r0, #1
   43df0:	blt	47ff8 <GetDataSlab+0x20634>
   43df4:	ldr	r0, [fp, #20]
   43df8:	ldr	lr, [fp, #16]
   43dfc:	add	ip, r0, #4
   43e00:	sub	r0, fp, #136	; 0x88
   43e04:	orr	r9, r0, #4
   43e08:	sub	r0, fp, #96	; 0x60
   43e0c:	orr	r0, r0, #4
   43e10:	str	r0, [sp, #40]	; 0x28
   43e14:	ldr	r0, [r8], #4
   43e18:	str	r0, [sp, #44]	; 0x2c
   43e1c:	mov	r0, #0
   43e20:	str	r0, [sp, #48]	; 0x30
   43e24:	ldr	r1, [sp, #44]	; 0x2c
   43e28:	cmp	r2, #1
   43e2c:	add	r0, r1, r4
   43e30:	add	r3, sl, r1, lsl #1
   43e34:	blt	43e88 <GetDataSlab+0x1c4c4>
   43e38:	ldr	r1, [sp, #60]	; 0x3c
   43e3c:	ldr	r2, [sp, #48]	; 0x30
   43e40:	ldr	r6, [fp, #20]
   43e44:	mov	r7, #0
   43e48:	add	r4, r1, r2, lsl #2
   43e4c:	ldrh	r1, [r3]
   43e50:	str	r1, [r4, r7, lsl #2]
   43e54:	add	r7, r7, #1
   43e58:	ldr	r5, [lr]
   43e5c:	ldr	r2, [r6]
   43e60:	add	r0, r5, r0
   43e64:	add	r3, r3, r5, lsl #1
   43e68:	cmp	r7, r2
   43e6c:	blt	43e4c <GetDataSlab+0x1c488>
   43e70:	ldr	r1, [fp, #12]
   43e74:	sub	r6, fp, #176	; 0xb0
   43e78:	ldr	r4, [r1]
   43e7c:	ldr	r1, [fp, #8]
   43e80:	ldr	r1, [r1]
   43e84:	b	43e94 <GetDataSlab+0x1c4d0>
   43e88:	mov	r4, r1
   43e8c:	ldr	r1, [sp, #52]	; 0x34
   43e90:	sub	r6, fp, #176	; 0xb0
   43e94:	str	r1, [sp, #52]	; 0x34
   43e98:	mls	r1, r5, r2, r1
   43e9c:	str	r4, [sp, #44]	; 0x2c
   43ea0:	sub	r1, r1, r4
   43ea4:	add	r4, r1, r0
   43ea8:	ldr	r0, [fp, #24]
   43eac:	add	sl, r3, r1, lsl #1
   43eb0:	cmp	r0, #2
   43eb4:	blt	43f64 <GetDataSlab+0x1c5a0>
   43eb8:	mov	r7, #0
   43ebc:	ldr	r1, [r9, r7, lsl #2]
   43ec0:	mov	r0, r7
   43ec4:	add	r1, r1, #1
   43ec8:	str	r1, [r9, r7, lsl #2]
   43ecc:	ldr	r3, [ip, r7, lsl #2]
   43ed0:	sdiv	r7, r1, r3
   43ed4:	mls	r1, r7, r3, r1
   43ed8:	cmp	r1, #0
   43edc:	bne	43f54 <GetDataSlab+0x1c590>
   43ee0:	mov	r1, #0
   43ee4:	str	r1, [r9, r0, lsl #2]
   43ee8:	add	r1, r6, r0, lsl #2
   43eec:	ldr	r7, [r1, #4]
   43ef0:	sdiv	r1, r4, r7
   43ef4:	mls	r1, r1, r7, r4
   43ef8:	cmp	r1, #0
   43efc:	beq	43f20 <GetDataSlab+0x1c55c>
   43f00:	ldr	r3, [r6, r0, lsl #2]
   43f04:	ldr	lr, [r8, r0, lsl #2]
   43f08:	sub	r1, r7, r1
   43f0c:	sub	r6, fp, #176	; 0xb0
   43f10:	mla	r1, lr, r3, r1
   43f14:	ldr	lr, [fp, #16]
   43f18:	add	r4, r1, r4
   43f1c:	b	43f38 <GetDataSlab+0x1c574>
   43f20:	ldr	r1, [r8, r0, lsl #2]
   43f24:	cmp	r1, #0
   43f28:	beq	43f3c <GetDataSlab+0x1c578>
   43f2c:	ldr	r3, [r6, r0, lsl #2]
   43f30:	mla	r4, r3, r1, r4
   43f34:	mul	r1, r3, r1
   43f38:	add	sl, sl, r1, lsl #1
   43f3c:	ldr	r1, [fp, #24]
   43f40:	add	r7, r0, #1
   43f44:	add	r0, r0, #2
   43f48:	cmp	r0, r1
   43f4c:	blt	43ebc <GetDataSlab+0x1c4f8>
   43f50:	b	43f64 <GetDataSlab+0x1c5a0>
   43f54:	ldr	r1, [sp, #40]	; 0x28
   43f58:	ldr	r0, [r1, r0, lsl #2]
   43f5c:	add	sl, sl, r0, lsl #1
   43f60:	add	r4, r0, r4
   43f64:	ldr	r3, [sp, #48]	; 0x30
   43f68:	ldr	r1, [sp, #56]	; 0x38
   43f6c:	mov	r0, #0
   43f70:	add	r3, r2, r3
   43f74:	cmp	r3, r1
   43f78:	str	r3, [sp, #48]	; 0x30
   43f7c:	blt	43e24 <GetDataSlab+0x1c460>
   43f80:	b	47ffc <GetDataSlab+0x20638>
   43f84:	ldr	r0, [sp, #56]	; 0x38
   43f88:	cmp	r0, #1
   43f8c:	blt	47ff8 <GetDataSlab+0x20634>
   43f90:	ldr	r0, [fp, #20]
   43f94:	ldr	lr, [fp, #16]
   43f98:	add	ip, r0, #4
   43f9c:	sub	r0, fp, #136	; 0x88
   43fa0:	orr	r9, r0, #4
   43fa4:	sub	r0, fp, #96	; 0x60
   43fa8:	orr	r0, r0, #4
   43fac:	str	r0, [sp, #40]	; 0x28
   43fb0:	ldr	r0, [r8], #4
   43fb4:	str	r0, [sp, #44]	; 0x2c
   43fb8:	mov	r0, #0
   43fbc:	str	r0, [sp, #48]	; 0x30
   43fc0:	ldr	r1, [sp, #44]	; 0x2c
   43fc4:	cmp	r2, #1
   43fc8:	add	r0, r1, r4
   43fcc:	add	r3, sl, r1, lsl #2
   43fd0:	blt	44024 <GetDataSlab+0x1c660>
   43fd4:	ldr	r1, [sp, #60]	; 0x3c
   43fd8:	ldr	r2, [sp, #48]	; 0x30
   43fdc:	ldr	r6, [fp, #20]
   43fe0:	mov	r7, #0
   43fe4:	add	r4, r1, r2, lsl #2
   43fe8:	ldr	r1, [r3]
   43fec:	str	r1, [r4, r7, lsl #2]
   43ff0:	add	r7, r7, #1
   43ff4:	ldr	r5, [lr]
   43ff8:	ldr	r2, [r6]
   43ffc:	add	r0, r5, r0
   44000:	add	r3, r3, r5, lsl #2
   44004:	cmp	r7, r2
   44008:	blt	43fe8 <GetDataSlab+0x1c624>
   4400c:	ldr	r1, [fp, #12]
   44010:	sub	r6, fp, #176	; 0xb0
   44014:	ldr	r4, [r1]
   44018:	ldr	r1, [fp, #8]
   4401c:	ldr	r1, [r1]
   44020:	b	44030 <GetDataSlab+0x1c66c>
   44024:	mov	r4, r1
   44028:	ldr	r1, [sp, #52]	; 0x34
   4402c:	sub	r6, fp, #176	; 0xb0
   44030:	str	r1, [sp, #52]	; 0x34
   44034:	mls	r1, r5, r2, r1
   44038:	str	r4, [sp, #44]	; 0x2c
   4403c:	sub	r1, r1, r4
   44040:	add	r4, r1, r0
   44044:	ldr	r0, [fp, #24]
   44048:	add	sl, r3, r1, lsl #2
   4404c:	cmp	r0, #2
   44050:	blt	44100 <GetDataSlab+0x1c73c>
   44054:	mov	r7, #0
   44058:	ldr	r1, [r9, r7, lsl #2]
   4405c:	mov	r0, r7
   44060:	add	r1, r1, #1
   44064:	str	r1, [r9, r7, lsl #2]
   44068:	ldr	r3, [ip, r7, lsl #2]
   4406c:	sdiv	r7, r1, r3
   44070:	mls	r1, r7, r3, r1
   44074:	cmp	r1, #0
   44078:	bne	440f0 <GetDataSlab+0x1c72c>
   4407c:	mov	r1, #0
   44080:	str	r1, [r9, r0, lsl #2]
   44084:	add	r1, r6, r0, lsl #2
   44088:	ldr	r7, [r1, #4]
   4408c:	sdiv	r1, r4, r7
   44090:	mls	r1, r1, r7, r4
   44094:	cmp	r1, #0
   44098:	beq	440bc <GetDataSlab+0x1c6f8>
   4409c:	ldr	r3, [r6, r0, lsl #2]
   440a0:	ldr	lr, [r8, r0, lsl #2]
   440a4:	sub	r1, r7, r1
   440a8:	sub	r6, fp, #176	; 0xb0
   440ac:	mla	r1, lr, r3, r1
   440b0:	ldr	lr, [fp, #16]
   440b4:	add	r4, r1, r4
   440b8:	b	440d4 <GetDataSlab+0x1c710>
   440bc:	ldr	r1, [r8, r0, lsl #2]
   440c0:	cmp	r1, #0
   440c4:	beq	440d8 <GetDataSlab+0x1c714>
   440c8:	ldr	r3, [r6, r0, lsl #2]
   440cc:	mla	r4, r3, r1, r4
   440d0:	mul	r1, r3, r1
   440d4:	add	sl, sl, r1, lsl #2
   440d8:	ldr	r1, [fp, #24]
   440dc:	add	r7, r0, #1
   440e0:	add	r0, r0, #2
   440e4:	cmp	r0, r1
   440e8:	blt	44058 <GetDataSlab+0x1c694>
   440ec:	b	44100 <GetDataSlab+0x1c73c>
   440f0:	ldr	r1, [sp, #40]	; 0x28
   440f4:	ldr	r0, [r1, r0, lsl #2]
   440f8:	add	sl, sl, r0, lsl #2
   440fc:	add	r4, r0, r4
   44100:	ldr	r3, [sp, #48]	; 0x30
   44104:	ldr	r1, [sp, #56]	; 0x38
   44108:	mov	r0, #0
   4410c:	add	r3, r2, r3
   44110:	cmp	r3, r1
   44114:	str	r3, [sp, #48]	; 0x30
   44118:	blt	43fc0 <GetDataSlab+0x1c5fc>
   4411c:	b	47ffc <GetDataSlab+0x20638>
   44120:	ldr	r0, [sp, #56]	; 0x38
   44124:	cmp	r0, #1
   44128:	blt	47ff8 <GetDataSlab+0x20634>
   4412c:	ldr	r0, [fp, #20]
   44130:	ldr	lr, [fp, #16]
   44134:	add	ip, r0, #4
   44138:	sub	r0, fp, #136	; 0x88
   4413c:	orr	r9, r0, #4
   44140:	sub	r0, fp, #96	; 0x60
   44144:	orr	r0, r0, #4
   44148:	str	r0, [sp, #40]	; 0x28
   4414c:	ldr	r0, [r8], #4
   44150:	str	r0, [sp, #44]	; 0x2c
   44154:	mov	r0, #0
   44158:	str	r0, [sp, #48]	; 0x30
   4415c:	ldr	r1, [sp, #44]	; 0x2c
   44160:	cmp	r2, #1
   44164:	add	r0, r1, r4
   44168:	add	r3, sl, r1, lsl #2
   4416c:	blt	441c0 <GetDataSlab+0x1c7fc>
   44170:	ldr	r1, [sp, #60]	; 0x3c
   44174:	ldr	r2, [sp, #48]	; 0x30
   44178:	ldr	r6, [fp, #20]
   4417c:	mov	r7, #0
   44180:	add	r4, r1, r2, lsl #2
   44184:	ldr	r1, [r3]
   44188:	str	r1, [r4, r7, lsl #2]
   4418c:	add	r7, r7, #1
   44190:	ldr	r5, [lr]
   44194:	ldr	r2, [r6]
   44198:	add	r0, r5, r0
   4419c:	add	r3, r3, r5, lsl #2
   441a0:	cmp	r7, r2
   441a4:	blt	44184 <GetDataSlab+0x1c7c0>
   441a8:	ldr	r1, [fp, #12]
   441ac:	sub	r6, fp, #176	; 0xb0
   441b0:	ldr	r4, [r1]
   441b4:	ldr	r1, [fp, #8]
   441b8:	ldr	r1, [r1]
   441bc:	b	441cc <GetDataSlab+0x1c808>
   441c0:	mov	r4, r1
   441c4:	ldr	r1, [sp, #52]	; 0x34
   441c8:	sub	r6, fp, #176	; 0xb0
   441cc:	str	r1, [sp, #52]	; 0x34
   441d0:	mls	r1, r5, r2, r1
   441d4:	str	r4, [sp, #44]	; 0x2c
   441d8:	sub	r1, r1, r4
   441dc:	add	r4, r1, r0
   441e0:	ldr	r0, [fp, #24]
   441e4:	add	sl, r3, r1, lsl #2
   441e8:	cmp	r0, #2
   441ec:	blt	4429c <GetDataSlab+0x1c8d8>
   441f0:	mov	r7, #0
   441f4:	ldr	r1, [r9, r7, lsl #2]
   441f8:	mov	r0, r7
   441fc:	add	r1, r1, #1
   44200:	str	r1, [r9, r7, lsl #2]
   44204:	ldr	r3, [ip, r7, lsl #2]
   44208:	sdiv	r7, r1, r3
   4420c:	mls	r1, r7, r3, r1
   44210:	cmp	r1, #0
   44214:	bne	4428c <GetDataSlab+0x1c8c8>
   44218:	mov	r1, #0
   4421c:	str	r1, [r9, r0, lsl #2]
   44220:	add	r1, r6, r0, lsl #2
   44224:	ldr	r7, [r1, #4]
   44228:	sdiv	r1, r4, r7
   4422c:	mls	r1, r1, r7, r4
   44230:	cmp	r1, #0
   44234:	beq	44258 <GetDataSlab+0x1c894>
   44238:	ldr	r3, [r6, r0, lsl #2]
   4423c:	ldr	lr, [r8, r0, lsl #2]
   44240:	sub	r1, r7, r1
   44244:	sub	r6, fp, #176	; 0xb0
   44248:	mla	r1, lr, r3, r1
   4424c:	ldr	lr, [fp, #16]
   44250:	add	r4, r1, r4
   44254:	b	44270 <GetDataSlab+0x1c8ac>
   44258:	ldr	r1, [r8, r0, lsl #2]
   4425c:	cmp	r1, #0
   44260:	beq	44274 <GetDataSlab+0x1c8b0>
   44264:	ldr	r3, [r6, r0, lsl #2]
   44268:	mla	r4, r3, r1, r4
   4426c:	mul	r1, r3, r1
   44270:	add	sl, sl, r1, lsl #2
   44274:	ldr	r1, [fp, #24]
   44278:	add	r7, r0, #1
   4427c:	add	r0, r0, #2
   44280:	cmp	r0, r1
   44284:	blt	441f4 <GetDataSlab+0x1c830>
   44288:	b	4429c <GetDataSlab+0x1c8d8>
   4428c:	ldr	r1, [sp, #40]	; 0x28
   44290:	ldr	r0, [r1, r0, lsl #2]
   44294:	add	sl, sl, r0, lsl #2
   44298:	add	r4, r0, r4
   4429c:	ldr	r3, [sp, #48]	; 0x30
   442a0:	ldr	r1, [sp, #56]	; 0x38
   442a4:	mov	r0, #0
   442a8:	add	r3, r2, r3
   442ac:	cmp	r3, r1
   442b0:	str	r3, [sp, #48]	; 0x30
   442b4:	blt	4415c <GetDataSlab+0x1c798>
   442b8:	b	47ffc <GetDataSlab+0x20638>
   442bc:	ldr	r0, [sp, #56]	; 0x38
   442c0:	cmp	r0, #1
   442c4:	ldr	r0, [fp, #20]
   442c8:	blt	47ff8 <GetDataSlab+0x20634>
   442cc:	add	r9, r0, #4
   442d0:	sub	r0, fp, #136	; 0x88
   442d4:	ldr	lr, [fp, #16]
   442d8:	orr	sl, r0, #4
   442dc:	sub	r0, fp, #96	; 0x60
   442e0:	orr	r0, r0, #4
   442e4:	str	r0, [sp, #40]	; 0x28
   442e8:	ldr	r0, [r8], #4
   442ec:	str	r0, [sp, #44]	; 0x2c
   442f0:	mov	r0, #0
   442f4:	str	r0, [sp, #48]	; 0x30
   442f8:	ldr	r1, [sp, #44]	; 0x2c
   442fc:	cmp	r2, #1
   44300:	add	r0, r1, r4
   44304:	add	r3, ip, r1, lsl #2
   44308:	blt	44364 <GetDataSlab+0x1c9a0>
   4430c:	ldr	r1, [sp, #60]	; 0x3c
   44310:	ldr	r2, [sp, #48]	; 0x30
   44314:	ldr	r6, [fp, #20]
   44318:	mov	r7, #0
   4431c:	add	r4, r1, r2, lsl #2
   44320:	vldr	s0, [r3]
   44324:	vcvt.u32.f32	s0, s0
   44328:	vmov	r1, s0
   4432c:	str	r1, [r4, r7, lsl #2]
   44330:	add	r7, r7, #1
   44334:	ldr	r5, [lr]
   44338:	ldr	r2, [r6]
   4433c:	add	r0, r5, r0
   44340:	add	r3, r3, r5, lsl #2
   44344:	cmp	r7, r2
   44348:	blt	44320 <GetDataSlab+0x1c95c>
   4434c:	ldr	r1, [fp, #12]
   44350:	sub	r6, fp, #176	; 0xb0
   44354:	ldr	r4, [r1]
   44358:	ldr	r1, [fp, #8]
   4435c:	ldr	r1, [r1]
   44360:	b	44370 <GetDataSlab+0x1c9ac>
   44364:	mov	r4, r1
   44368:	ldr	r1, [sp, #52]	; 0x34
   4436c:	sub	r6, fp, #176	; 0xb0
   44370:	str	r1, [sp, #52]	; 0x34
   44374:	mls	r1, r5, r2, r1
   44378:	str	r4, [sp, #44]	; 0x2c
   4437c:	sub	r1, r1, r4
   44380:	add	r4, r1, r0
   44384:	ldr	r0, [fp, #24]
   44388:	add	ip, r3, r1, lsl #2
   4438c:	cmp	r0, #2
   44390:	blt	44440 <GetDataSlab+0x1ca7c>
   44394:	mov	r7, #0
   44398:	ldr	r1, [sl, r7, lsl #2]
   4439c:	mov	r0, r7
   443a0:	add	r1, r1, #1
   443a4:	str	r1, [sl, r7, lsl #2]
   443a8:	ldr	r3, [r9, r7, lsl #2]
   443ac:	sdiv	r7, r1, r3
   443b0:	mls	r1, r7, r3, r1
   443b4:	cmp	r1, #0
   443b8:	bne	44430 <GetDataSlab+0x1ca6c>
   443bc:	mov	r1, #0
   443c0:	str	r1, [sl, r0, lsl #2]
   443c4:	add	r1, r6, r0, lsl #2
   443c8:	ldr	r7, [r1, #4]
   443cc:	sdiv	r1, r4, r7
   443d0:	mls	r1, r1, r7, r4
   443d4:	cmp	r1, #0
   443d8:	beq	443fc <GetDataSlab+0x1ca38>
   443dc:	ldr	r3, [r6, r0, lsl #2]
   443e0:	ldr	lr, [r8, r0, lsl #2]
   443e4:	sub	r1, r7, r1
   443e8:	sub	r6, fp, #176	; 0xb0
   443ec:	mla	r1, lr, r3, r1
   443f0:	ldr	lr, [fp, #16]
   443f4:	add	r4, r1, r4
   443f8:	b	44414 <GetDataSlab+0x1ca50>
   443fc:	ldr	r1, [r8, r0, lsl #2]
   44400:	cmp	r1, #0
   44404:	beq	44418 <GetDataSlab+0x1ca54>
   44408:	ldr	r3, [r6, r0, lsl #2]
   4440c:	mla	r4, r3, r1, r4
   44410:	mul	r1, r3, r1
   44414:	add	ip, ip, r1, lsl #2
   44418:	ldr	r1, [fp, #24]
   4441c:	add	r7, r0, #1
   44420:	add	r0, r0, #2
   44424:	cmp	r0, r1
   44428:	blt	44398 <GetDataSlab+0x1c9d4>
   4442c:	b	44440 <GetDataSlab+0x1ca7c>
   44430:	ldr	r1, [sp, #40]	; 0x28
   44434:	ldr	r0, [r1, r0, lsl #2]
   44438:	add	ip, ip, r0, lsl #2
   4443c:	add	r4, r0, r4
   44440:	ldr	r3, [sp, #48]	; 0x30
   44444:	ldr	r1, [sp, #56]	; 0x38
   44448:	mov	r0, #0
   4444c:	add	r3, r2, r3
   44450:	cmp	r3, r1
   44454:	str	r3, [sp, #48]	; 0x30
   44458:	blt	442f8 <GetDataSlab+0x1c934>
   4445c:	b	47ffc <GetDataSlab+0x20638>
   44460:	ldr	r0, [sp, #56]	; 0x38
   44464:	cmp	r0, #1
   44468:	ldr	r0, [fp, #20]
   4446c:	blt	47ff8 <GetDataSlab+0x20634>
   44470:	add	r9, r0, #4
   44474:	sub	r0, fp, #136	; 0x88
   44478:	ldr	lr, [fp, #16]
   4447c:	orr	sl, r0, #4
   44480:	sub	r0, fp, #96	; 0x60
   44484:	orr	r0, r0, #4
   44488:	str	r0, [sp, #40]	; 0x28
   4448c:	ldr	r0, [r8], #4
   44490:	str	r0, [sp, #44]	; 0x2c
   44494:	mov	r0, #0
   44498:	str	r0, [sp, #48]	; 0x30
   4449c:	ldr	r1, [sp, #44]	; 0x2c
   444a0:	cmp	r2, #1
   444a4:	add	r0, r1, r4
   444a8:	add	r3, ip, r1, lsl #3
   444ac:	blt	44508 <GetDataSlab+0x1cb44>
   444b0:	ldr	r1, [sp, #60]	; 0x3c
   444b4:	ldr	r2, [sp, #48]	; 0x30
   444b8:	ldr	r6, [fp, #20]
   444bc:	mov	r7, #0
   444c0:	add	r4, r1, r2, lsl #2
   444c4:	vldr	d16, [r3]
   444c8:	vcvt.u32.f64	s0, d16
   444cc:	vmov	r1, s0
   444d0:	str	r1, [r4, r7, lsl #2]
   444d4:	add	r7, r7, #1
   444d8:	ldr	r5, [lr]
   444dc:	ldr	r2, [r6]
   444e0:	add	r0, r5, r0
   444e4:	add	r3, r3, r5, lsl #3
   444e8:	cmp	r7, r2
   444ec:	blt	444c4 <GetDataSlab+0x1cb00>
   444f0:	ldr	r1, [fp, #12]
   444f4:	sub	r6, fp, #176	; 0xb0
   444f8:	ldr	r4, [r1]
   444fc:	ldr	r1, [fp, #8]
   44500:	ldr	r1, [r1]
   44504:	b	44514 <GetDataSlab+0x1cb50>
   44508:	mov	r4, r1
   4450c:	ldr	r1, [sp, #52]	; 0x34
   44510:	sub	r6, fp, #176	; 0xb0
   44514:	str	r1, [sp, #52]	; 0x34
   44518:	mls	r1, r5, r2, r1
   4451c:	str	r4, [sp, #44]	; 0x2c
   44520:	sub	r1, r1, r4
   44524:	add	r4, r1, r0
   44528:	ldr	r0, [fp, #24]
   4452c:	add	ip, r3, r1, lsl #3
   44530:	cmp	r0, #2
   44534:	blt	445e4 <GetDataSlab+0x1cc20>
   44538:	mov	r7, #0
   4453c:	ldr	r1, [sl, r7, lsl #2]
   44540:	mov	r0, r7
   44544:	add	r1, r1, #1
   44548:	str	r1, [sl, r7, lsl #2]
   4454c:	ldr	r3, [r9, r7, lsl #2]
   44550:	sdiv	r7, r1, r3
   44554:	mls	r1, r7, r3, r1
   44558:	cmp	r1, #0
   4455c:	bne	445d4 <GetDataSlab+0x1cc10>
   44560:	mov	r1, #0
   44564:	str	r1, [sl, r0, lsl #2]
   44568:	add	r1, r6, r0, lsl #2
   4456c:	ldr	r7, [r1, #4]
   44570:	sdiv	r1, r4, r7
   44574:	mls	r1, r1, r7, r4
   44578:	cmp	r1, #0
   4457c:	beq	445a0 <GetDataSlab+0x1cbdc>
   44580:	ldr	r3, [r6, r0, lsl #2]
   44584:	ldr	lr, [r8, r0, lsl #2]
   44588:	sub	r1, r7, r1
   4458c:	sub	r6, fp, #176	; 0xb0
   44590:	mla	r1, lr, r3, r1
   44594:	ldr	lr, [fp, #16]
   44598:	add	r4, r1, r4
   4459c:	b	445b8 <GetDataSlab+0x1cbf4>
   445a0:	ldr	r1, [r8, r0, lsl #2]
   445a4:	cmp	r1, #0
   445a8:	beq	445bc <GetDataSlab+0x1cbf8>
   445ac:	ldr	r3, [r6, r0, lsl #2]
   445b0:	mla	r4, r3, r1, r4
   445b4:	mul	r1, r3, r1
   445b8:	add	ip, ip, r1, lsl #3
   445bc:	ldr	r1, [fp, #24]
   445c0:	add	r7, r0, #1
   445c4:	add	r0, r0, #2
   445c8:	cmp	r0, r1
   445cc:	blt	4453c <GetDataSlab+0x1cb78>
   445d0:	b	445e4 <GetDataSlab+0x1cc20>
   445d4:	ldr	r1, [sp, #40]	; 0x28
   445d8:	ldr	r0, [r1, r0, lsl #2]
   445dc:	add	ip, ip, r0, lsl #3
   445e0:	add	r4, r0, r4
   445e4:	ldr	r3, [sp, #48]	; 0x30
   445e8:	ldr	r1, [sp, #56]	; 0x38
   445ec:	mov	r0, #0
   445f0:	add	r3, r2, r3
   445f4:	cmp	r3, r1
   445f8:	str	r3, [sp, #48]	; 0x30
   445fc:	blt	4449c <GetDataSlab+0x1cad8>
   44600:	b	47ffc <GetDataSlab+0x20638>
   44604:	ldr	r0, [sp, #56]	; 0x38
   44608:	ldr	ip, [sp, #60]	; 0x3c
   4460c:	cmp	r0, #1
   44610:	blt	44788 <GetDataSlab+0x1cdc4>
   44614:	ldr	r8, [fp, #12]
   44618:	ldr	r0, [fp, #20]
   4461c:	mov	r2, #0
   44620:	ldr	r7, [r8], #4
   44624:	add	r9, r0, #4
   44628:	sub	r0, fp, #136	; 0x88
   4462c:	orr	lr, r0, #4
   44630:	sub	r0, fp, #96	; 0x60
   44634:	orr	r0, r0, #4
   44638:	str	r0, [sp, #44]	; 0x2c
   4463c:	add	r3, r7, r3
   44640:	add	r4, sl, r7, lsl #3
   44644:	cmp	r1, #1
   44648:	str	r2, [sp, #52]	; 0x34
   4464c:	blt	44698 <GetDataSlab+0x1ccd4>
   44650:	add	r0, ip, r2, lsl #2
   44654:	ldr	r2, [fp, #20]
   44658:	ldr	r6, [fp, #16]
   4465c:	mov	r7, #0
   44660:	ldr	r1, [r4]
   44664:	str	r1, [r0, r7, lsl #2]
   44668:	add	r7, r7, #1
   4466c:	ldr	r5, [r6]
   44670:	ldr	r1, [r2]
   44674:	add	r3, r5, r3
   44678:	add	r4, r4, r5, lsl #3
   4467c:	cmp	r7, r1
   44680:	blt	44660 <GetDataSlab+0x1cc9c>
   44684:	ldr	r0, [fp, #12]
   44688:	ldr	r7, [r0]
   4468c:	ldr	r0, [fp, #8]
   44690:	ldr	r0, [r0]
   44694:	b	4469c <GetDataSlab+0x1ccd8>
   44698:	ldr	r0, [sp, #28]
   4469c:	str	r0, [sp, #28]
   446a0:	mls	r0, r5, r1, r0
   446a4:	mov	r6, r7
   446a8:	sub	r0, r0, r7
   446ac:	add	sl, r4, r0, lsl #3
   446b0:	add	r3, r0, r3
   446b4:	ldr	r0, [fp, #24]
   446b8:	cmp	r0, #2
   446bc:	blt	44770 <GetDataSlab+0x1cdac>
   446c0:	mov	r7, #0
   446c4:	mov	r0, r7
   446c8:	ldr	r7, [lr, r7, lsl #2]
   446cc:	add	r7, r7, #1
   446d0:	str	r7, [lr, r0, lsl #2]
   446d4:	ldr	r4, [r9, r0, lsl #2]
   446d8:	sdiv	r2, r7, r4
   446dc:	mls	r2, r2, r4, r7
   446e0:	cmp	r2, #0
   446e4:	bne	44760 <GetDataSlab+0x1cd9c>
   446e8:	mov	r2, #0
   446ec:	sub	r4, fp, #176	; 0xb0
   446f0:	str	r2, [lr, r0, lsl #2]
   446f4:	add	r2, r4, r0, lsl #2
   446f8:	ldr	r7, [r2, #4]
   446fc:	sdiv	r2, r3, r7
   44700:	mls	ip, r2, r7, r3
   44704:	cmp	ip, #0
   44708:	beq	44724 <GetDataSlab+0x1cd60>
   4470c:	ldr	r2, [r4, r0, lsl #2]
   44710:	ldr	r4, [r8, r0, lsl #2]
   44714:	sub	r7, r7, ip
   44718:	mla	r2, r4, r2, r7
   4471c:	add	r3, r2, r3
   44720:	b	44740 <GetDataSlab+0x1cd7c>
   44724:	ldr	r7, [r8, r0, lsl #2]
   44728:	cmp	r7, #0
   4472c:	beq	44744 <GetDataSlab+0x1cd80>
   44730:	sub	r2, fp, #176	; 0xb0
   44734:	ldr	r2, [r2, r0, lsl #2]
   44738:	mla	r3, r2, r7, r3
   4473c:	mul	r2, r2, r7
   44740:	add	sl, sl, r2, lsl #3
   44744:	ldr	r2, [fp, #24]
   44748:	ldr	ip, [sp, #60]	; 0x3c
   4474c:	add	r7, r0, #1
   44750:	add	r0, r0, #2
   44754:	cmp	r0, r2
   44758:	blt	446c4 <GetDataSlab+0x1cd00>
   4475c:	b	44770 <GetDataSlab+0x1cdac>
   44760:	ldr	r2, [sp, #44]	; 0x2c
   44764:	ldr	r0, [r2, r0, lsl #2]
   44768:	add	sl, sl, r0, lsl #3
   4476c:	add	r3, r0, r3
   44770:	ldr	r2, [sp, #52]	; 0x34
   44774:	ldr	r0, [sp, #56]	; 0x38
   44778:	mov	r7, r6
   4477c:	add	r2, r1, r2
   44780:	cmp	r2, r0
   44784:	blt	4463c <GetDataSlab+0x1cc78>
   44788:	ldr	r3, [fp, #16]
   4478c:	ldr	r6, [sp, #40]	; 0x28
   44790:	mov	r0, #0
   44794:	cmp	r6, #13
   44798:	bne	47ffc <GetDataSlab+0x20638>
   4479c:	ldr	r5, [r3]
   447a0:	ldr	r9, [fp, #8]
   447a4:	mov	r4, #0
   447a8:	sub	r3, fp, #176	; 0xb0
   447ac:	sub	r0, r5, #1
   447b0:	str	r0, [fp, #-96]	; 0xffffffa0
   447b4:	ldr	r0, [r9]
   447b8:	sub	r9, fp, #96	; 0x60
   447bc:	str	r0, [sp, #44]	; 0x2c
   447c0:	str	r0, [fp, #-176]	; 0xffffff50
   447c4:	ldr	r0, [fp, #20]
   447c8:	ldr	r2, [r0]
   447cc:	ldr	r0, [fp, #24]
   447d0:	cmp	r0, #2
   447d4:	mov	r0, r2
   447d8:	str	r2, [sp, #56]	; 0x38
   447dc:	blt	44954 <GetDataSlab+0x1cf90>
   447e0:	ldr	r0, [fp, #8]
   447e4:	ldr	r7, [sp, #44]	; 0x2c
   447e8:	mov	ip, #1
   447ec:	mvn	sl, #15
   447f0:	mov	r4, #0
   447f4:	str	r2, [sp, #56]	; 0x38
   447f8:	mov	r1, r0
   447fc:	sub	r0, r0, #4
   44800:	mov	r6, r7
   44804:	sub	lr, r1, #12
   44808:	mov	r1, #0
   4480c:	str	r1, [sp, #52]	; 0x34
   44810:	mov	r1, r2
   44814:	ldr	r1, [fp, #16]
   44818:	ldr	r1, [r1, ip, lsl #2]
   4481c:	str	r7, [r3, ip, lsl #2]
   44820:	sub	r8, r1, #1
   44824:	ldr	r1, [fp, #8]
   44828:	str	r8, [r9, ip, lsl #2]
   4482c:	ldr	r3, [r1, ip, lsl #2]
   44830:	ldr	r1, [sp, #52]	; 0x34
   44834:	add	r1, r1, #1
   44838:	str	r3, [sp, #40]	; 0x28
   4483c:	cmp	r1, #4
   44840:	str	r1, [sp, #52]	; 0x34
   44844:	bcs	44854 <GetDataSlab+0x1ce90>
   44848:	mov	r1, r3
   4484c:	mov	r3, ip
   44850:	b	448f4 <GetDataSlab+0x1cf30>
   44854:	vmov.i32	q9, #1	; 0x00000001
   44858:	vmov.i32	q10, #1	; 0x00000001
   4485c:	vmov.i32	q8, #1	; 0x00000001
   44860:	bic	r1, r1, #3
   44864:	vmov.32	d23[1], r3
   44868:	bic	r9, ip, #3
   4486c:	str	r6, [sp, #32]
   44870:	vmov.32	d18[0], r7
   44874:	vmov.32	d20[0], r8
   44878:	str	r1, [sp, #36]	; 0x24
   4487c:	sub	r3, ip, r1
   44880:	mov	r1, lr
   44884:	vorr	d16, d18, d18
   44888:	vmov.i32	q9, #1	; 0x00000001
   4488c:	vorr	d18, d20, d20
   44890:	vld1.32	{d20-d21}, [r1], sl
   44894:	subs	r9, r9, #4
   44898:	vrev64.32	q12, q10
   4489c:	vext.8	q12, q12, q12, #8
   448a0:	vext.8	q11, q11, q12, #12
   448a4:	vmul.i32	q9, q9, q12
   448a8:	vmul.i32	q8, q11, q8
   448ac:	vorr	q11, q12, q12
   448b0:	bne	44890 <GetDataSlab+0x1cecc>
   448b4:	ldr	r1, [sp, #52]	; 0x34
   448b8:	ldr	r6, [sp, #36]	; 0x24
   448bc:	vext.8	q11, q9, q8, #8
   448c0:	vext.8	q12, q8, q8, #8
   448c4:	vmul.i32	q0, q9, q11
   448c8:	vmul.i32	q1, q8, q12
   448cc:	vmul.i32	q8, q0, d0[1]
   448d0:	vmul.i32	q9, q1, d2[1]
   448d4:	vmov.32	r8, d16[0]
   448d8:	vmov.32	r7, d18[0]
   448dc:	cmp	r1, r6
   448e0:	bne	448ec <GetDataSlab+0x1cf28>
   448e4:	ldr	r6, [sp, #32]
   448e8:	b	44908 <GetDataSlab+0x1cf44>
   448ec:	ldr	r6, [sp, #32]
   448f0:	vmov.32	r1, d20[0]
   448f4:	mul	r7, r1, r7
   448f8:	ldr	r1, [r0, r3, lsl #2]
   448fc:	subs	r3, r3, #1
   44900:	mul	r8, r8, r1
   44904:	bne	448f4 <GetDataSlab+0x1cf30>
   44908:	ldr	r1, [fp, #12]
   4490c:	sub	r3, fp, #176	; 0xb0
   44910:	sub	r9, fp, #96	; 0x60
   44914:	add	lr, lr, #4
   44918:	str	r7, [r3, ip, lsl #2]
   4491c:	str	r8, [r9, ip, lsl #2]
   44920:	ldr	r1, [r1, ip, lsl #2]
   44924:	mla	r4, r1, r6, r4
   44928:	ldr	r1, [fp, #20]
   4492c:	ldr	r6, [sp, #56]	; 0x38
   44930:	ldr	r1, [r1, ip, lsl #2]
   44934:	add	ip, ip, #1
   44938:	mul	r6, r1, r6
   4493c:	ldr	r1, [fp, #24]
   44940:	str	r6, [sp, #56]	; 0x38
   44944:	mov	r6, r7
   44948:	ldr	r7, [sp, #40]	; 0x28
   4494c:	cmp	ip, r1
   44950:	bne	44814 <GetDataSlab+0x1ce50>
   44954:	ldr	r0, [sp, #48]	; 0x30
   44958:	ldr	r9, [fp, #12]
   4495c:	cmp	r5, #1
   44960:	add	sl, r0, r4, lsl #3
   44964:	mov	r8, r9
   44968:	bne	475cc <GetDataSlab+0x1fc08>
   4496c:	ldr	r0, [sp, #56]	; 0x38
   44970:	cmp	r0, #1
   44974:	blt	47ff8 <GetDataSlab+0x20634>
   44978:	ldr	r0, [fp, #20]
   4497c:	mov	r9, r8
   44980:	mov	lr, #0
   44984:	add	ip, r0, #4
   44988:	sub	r0, fp, #136	; 0x88
   4498c:	orr	r7, r0, #4
   44990:	sub	r0, fp, #96	; 0x60
   44994:	orr	r0, r0, #4
   44998:	str	r0, [sp, #48]	; 0x30
   4499c:	ldr	r0, [r9], #4
   449a0:	str	r0, [sp, #52]	; 0x34
   449a4:	ldr	r3, [sp, #52]	; 0x34
   449a8:	ldr	r1, [sp, #44]	; 0x2c
   449ac:	cmp	r2, #1
   449b0:	add	r8, r3, r4
   449b4:	add	r0, sl, r3, lsl #3
   449b8:	blt	449f8 <GetDataSlab+0x1d034>
   449bc:	ldr	r1, [sp, #60]	; 0x3c
   449c0:	ldr	r5, [fp, #20]
   449c4:	mov	r3, r0
   449c8:	add	r4, r1, lr, lsl #2
   449cc:	mov	r1, #0
   449d0:	ldr	r2, [r3], #8
   449d4:	str	r2, [r4, r1, lsl #2]
   449d8:	add	r1, r1, #1
   449dc:	ldr	r2, [r5]
   449e0:	cmp	r1, r2
   449e4:	blt	449d0 <GetDataSlab+0x1d00c>
   449e8:	ldr	r1, [fp, #12]
   449ec:	ldr	r3, [r1]
   449f0:	ldr	r1, [fp, #8]
   449f4:	ldr	r1, [r1]
   449f8:	str	r1, [sp, #44]	; 0x2c
   449fc:	sub	r1, r1, r3
   44a00:	str	r3, [sp, #52]	; 0x34
   44a04:	add	sl, r0, r1, lsl #3
   44a08:	ldr	r0, [fp, #24]
   44a0c:	add	r4, r8, r1
   44a10:	cmp	r0, #2
   44a14:	blt	44ac4 <GetDataSlab+0x1d100>
   44a18:	mov	r1, #0
   44a1c:	mov	r8, #0
   44a20:	mov	r0, r1
   44a24:	ldr	r1, [r7, r1, lsl #2]
   44a28:	add	r1, r1, #1
   44a2c:	str	r1, [r7, r0, lsl #2]
   44a30:	ldr	r6, [ip, r0, lsl #2]
   44a34:	sdiv	r5, r1, r6
   44a38:	mls	r1, r5, r6, r1
   44a3c:	cmp	r1, #0
   44a40:	bne	44ab4 <GetDataSlab+0x1d0f0>
   44a44:	sub	r3, fp, #176	; 0xb0
   44a48:	str	r8, [r7, r0, lsl #2]
   44a4c:	add	r1, r3, r0, lsl #2
   44a50:	ldr	r1, [r1, #4]
   44a54:	sdiv	r5, r4, r1
   44a58:	mls	r6, r5, r1, r4
   44a5c:	cmp	r6, #0
   44a60:	beq	44a7c <GetDataSlab+0x1d0b8>
   44a64:	ldr	r5, [r3, r0, lsl #2]
   44a68:	ldr	r3, [r9, r0, lsl #2]
   44a6c:	sub	r1, r1, r6
   44a70:	mla	r1, r3, r5, r1
   44a74:	add	r4, r1, r4
   44a78:	b	44a98 <GetDataSlab+0x1d0d4>
   44a7c:	ldr	r1, [r9, r0, lsl #2]
   44a80:	cmp	r1, #0
   44a84:	beq	44a9c <GetDataSlab+0x1d0d8>
   44a88:	sub	r3, fp, #176	; 0xb0
   44a8c:	ldr	r3, [r3, r0, lsl #2]
   44a90:	mla	r4, r3, r1, r4
   44a94:	mul	r1, r3, r1
   44a98:	add	sl, sl, r1, lsl #3
   44a9c:	ldr	r3, [fp, #24]
   44aa0:	add	r1, r0, #1
   44aa4:	add	r0, r0, #2
   44aa8:	cmp	r0, r3
   44aac:	blt	44a20 <GetDataSlab+0x1d05c>
   44ab0:	b	44ac4 <GetDataSlab+0x1d100>
   44ab4:	ldr	r1, [sp, #48]	; 0x30
   44ab8:	ldr	r0, [r1, r0, lsl #2]
   44abc:	add	sl, sl, r0, lsl #3
   44ac0:	add	r4, r0, r4
   44ac4:	ldr	r1, [sp, #56]	; 0x38
   44ac8:	add	lr, r2, lr
   44acc:	mov	r0, #0
   44ad0:	cmp	lr, r1
   44ad4:	blt	449a4 <GetDataSlab+0x1cfe0>
   44ad8:	b	47ffc <GetDataSlab+0x20638>
   44adc:	ldr	r0, [sp, #52]	; 0x34
   44ae0:	ldr	lr, [sp, #44]	; 0x2c
   44ae4:	cmp	r0, #1
   44ae8:	ldr	r0, [fp, #12]
   44aec:	blt	47ff8 <GetDataSlab+0x20634>
   44af0:	ldr	r1, [sp, #36]	; 0x24
   44af4:	add	r0, r0, #4
   44af8:	mov	r9, #0
   44afc:	str	r0, [sp, #56]	; 0x38
   44b00:	ldr	r0, [fp, #20]
   44b04:	mls	r1, lr, sl, r1
   44b08:	str	r1, [sp, #40]	; 0x28
   44b0c:	mul	r1, lr, sl
   44b10:	add	r8, r0, #4
   44b14:	sub	r0, fp, #136	; 0x88
   44b18:	str	r1, [sp, #32]
   44b1c:	orr	r1, r0, #4
   44b20:	orr	r0, r7, #4
   44b24:	str	r0, [sp, #28]
   44b28:	lsl	r0, lr, #3
   44b2c:	str	r0, [sp, #36]	; 0x24
   44b30:	mov	r0, #0
   44b34:	str	r0, [sp, #48]	; 0x30
   44b38:	ldr	r0, [fp, #12]
   44b3c:	cmp	lr, #1
   44b40:	ldr	r0, [r0]
   44b44:	blt	44b80 <GetDataSlab+0x1d1bc>
   44b48:	ldr	r2, [sp, #32]
   44b4c:	ldr	ip, [sp, #60]	; 0x3c
   44b50:	mov	r3, r2
   44b54:	add	r2, r2, r4
   44b58:	add	r4, r5, r3
   44b5c:	add	r5, r5, r0
   44b60:	ldrb	r6, [r5], sl
   44b64:	subs	lr, lr, #1
   44b68:	stm	ip, {r6, r9}
   44b6c:	add	ip, ip, #8
   44b70:	bne	44b60 <GetDataSlab+0x1d19c>
   44b74:	add	r2, r2, r0
   44b78:	mov	r5, r4
   44b7c:	b	44b84 <GetDataSlab+0x1d1c0>
   44b80:	add	r2, r0, r4
   44b84:	ldr	r3, [sp, #40]	; 0x28
   44b88:	ldr	ip, [sp, #60]	; 0x3c
   44b8c:	sub	lr, fp, #176	; 0xb0
   44b90:	sub	r0, r3, r0
   44b94:	add	r5, r5, r3
   44b98:	add	r4, r2, r0
   44b9c:	ldr	r0, [fp, #24]
   44ba0:	cmp	r0, #2
   44ba4:	blt	44c4c <GetDataSlab+0x1d288>
   44ba8:	mov	r2, #0
   44bac:	mov	r0, r2
   44bb0:	ldr	r2, [r1, r2, lsl #2]
   44bb4:	add	r2, r2, #1
   44bb8:	str	r2, [r1, r0, lsl #2]
   44bbc:	ldr	r6, [r8, r0, lsl #2]
   44bc0:	sdiv	r7, r2, r6
   44bc4:	mls	r2, r7, r6, r2
   44bc8:	cmp	r2, #0
   44bcc:	bne	44c3c <GetDataSlab+0x1d278>
   44bd0:	add	r2, lr, r0, lsl #2
   44bd4:	str	r9, [r1, r0, lsl #2]
   44bd8:	ldr	r2, [r2, #4]
   44bdc:	sdiv	r7, r4, r2
   44be0:	mls	r6, r7, r2, r4
   44be4:	cmp	r6, #0
   44be8:	beq	44c0c <GetDataSlab+0x1d248>
   44bec:	ldr	r3, [sp, #56]	; 0x38
   44bf0:	ldr	r7, [lr, r0, lsl #2]
   44bf4:	sub	r2, r2, r6
   44bf8:	ldr	r3, [r3, r0, lsl #2]
   44bfc:	mla	r2, r3, r7, r2
   44c00:	add	r4, r2, r4
   44c04:	add	r5, r5, r2
   44c08:	b	44c24 <GetDataSlab+0x1d260>
   44c0c:	ldr	r2, [sp, #56]	; 0x38
   44c10:	ldr	r2, [r2, r0, lsl #2]
   44c14:	cmp	r2, #0
   44c18:	ldrne	r3, [lr, r0, lsl #2]
   44c1c:	mlane	r4, r3, r2, r4
   44c20:	mlane	r5, r3, r2, r5
   44c24:	ldr	r3, [fp, #24]
   44c28:	add	r2, r0, #1
   44c2c:	add	r0, r0, #2
   44c30:	cmp	r0, r3
   44c34:	blt	44bac <GetDataSlab+0x1d1e8>
   44c38:	b	44c4c <GetDataSlab+0x1d288>
   44c3c:	ldr	r2, [sp, #28]
   44c40:	ldr	r0, [r2, r0, lsl #2]
   44c44:	add	r5, r5, r0
   44c48:	add	r4, r0, r4
   44c4c:	ldr	lr, [sp, #44]	; 0x2c
   44c50:	ldr	r3, [sp, #48]	; 0x30
   44c54:	ldr	r0, [sp, #36]	; 0x24
   44c58:	ldr	r2, [sp, #52]	; 0x34
   44c5c:	add	r3, r3, lr
   44c60:	add	ip, ip, r0
   44c64:	mov	r0, #0
   44c68:	cmp	r3, r2
   44c6c:	str	ip, [sp, #60]	; 0x3c
   44c70:	str	r3, [sp, #48]	; 0x30
   44c74:	blt	44b38 <GetDataSlab+0x1d174>
   44c78:	b	47ffc <GetDataSlab+0x20638>
   44c7c:	ldr	r0, [sp, #56]	; 0x38
   44c80:	ldr	r4, [sp, #44]	; 0x2c
   44c84:	cmp	r0, #1
   44c88:	blt	47ff8 <GetDataSlab+0x20634>
   44c8c:	ldr	r9, [fp, #12]
   44c90:	ldr	r0, [sp, #40]	; 0x28
   44c94:	add	r5, sl, #4
   44c98:	mov	sl, #0
   44c9c:	ldr	r2, [r9], #4
   44ca0:	mls	r0, r4, r1, r0
   44ca4:	sub	r0, r0, r2
   44ca8:	str	r2, [sp, #52]	; 0x34
   44cac:	str	r0, [sp, #48]	; 0x30
   44cb0:	sub	r0, fp, #136	; 0x88
   44cb4:	orr	r7, r0, #4
   44cb8:	orr	r0, r8, #4
   44cbc:	mov	r8, #0
   44cc0:	str	r0, [sp, #32]
   44cc4:	mla	r0, r4, r1, r2
   44cc8:	lsl	r1, r1, #1
   44ccc:	str	r0, [sp, #36]	; 0x24
   44cd0:	lsl	r0, r4, #3
   44cd4:	str	r0, [sp, #40]	; 0x28
   44cd8:	ldr	r0, [sp, #52]	; 0x34
   44cdc:	cmp	r4, #1
   44ce0:	blt	44d0c <GetDataSlab+0x1d348>
   44ce4:	ldr	r0, [sp, #52]	; 0x34
   44ce8:	ldr	r6, [sp, #60]	; 0x3c
   44cec:	add	r0, lr, r0, lsl #1
   44cf0:	ldrsh	r2, [r0], r1
   44cf4:	subs	r4, r4, #1
   44cf8:	asr	r3, r2, #31
   44cfc:	strd	r2, [r6]
   44d00:	add	r6, r6, #8
   44d04:	bne	44cf0 <GetDataSlab+0x1d32c>
   44d08:	ldr	r0, [sp, #36]	; 0x24
   44d0c:	ldr	r3, [sp, #48]	; 0x30
   44d10:	add	r2, lr, r3, lsl #1
   44d14:	add	lr, r2, r0, lsl #1
   44d18:	add	r0, r0, ip
   44d1c:	add	ip, r0, r3
   44d20:	ldr	r0, [fp, #24]
   44d24:	cmp	r0, #2
   44d28:	blt	44dd4 <GetDataSlab+0x1d410>
   44d2c:	mov	r3, #0
   44d30:	ldr	r2, [r7, r3, lsl #2]
   44d34:	mov	r0, r3
   44d38:	add	r2, r2, #1
   44d3c:	str	r2, [r7, r3, lsl #2]
   44d40:	ldr	r3, [r5, r3, lsl #2]
   44d44:	sdiv	r4, r2, r3
   44d48:	mls	r2, r4, r3, r2
   44d4c:	cmp	r2, #0
   44d50:	bne	44dc4 <GetDataSlab+0x1d400>
   44d54:	sub	r4, fp, #176	; 0xb0
   44d58:	str	r8, [r7, r0, lsl #2]
   44d5c:	add	r2, r4, r0, lsl #2
   44d60:	ldr	r3, [r2, #4]
   44d64:	sdiv	r2, ip, r3
   44d68:	mls	r6, r2, r3, ip
   44d6c:	cmp	r6, #0
   44d70:	beq	44d8c <GetDataSlab+0x1d3c8>
   44d74:	ldr	r2, [r4, r0, lsl #2]
   44d78:	ldr	r4, [r9, r0, lsl #2]
   44d7c:	sub	r3, r3, r6
   44d80:	mla	r2, r4, r2, r3
   44d84:	add	ip, r2, ip
   44d88:	b	44da8 <GetDataSlab+0x1d3e4>
   44d8c:	ldr	r3, [r9, r0, lsl #2]
   44d90:	cmp	r3, #0
   44d94:	beq	44dac <GetDataSlab+0x1d3e8>
   44d98:	sub	r2, fp, #176	; 0xb0
   44d9c:	ldr	r2, [r2, r0, lsl #2]
   44da0:	mla	ip, r2, r3, ip
   44da4:	mul	r2, r2, r3
   44da8:	add	lr, lr, r2, lsl #1
   44dac:	ldr	r2, [fp, #24]
   44db0:	add	r3, r0, #1
   44db4:	add	r0, r0, #2
   44db8:	cmp	r0, r2
   44dbc:	blt	44d30 <GetDataSlab+0x1d36c>
   44dc0:	b	44dd4 <GetDataSlab+0x1d410>
   44dc4:	ldr	r2, [sp, #32]
   44dc8:	ldr	r0, [r2, r0, lsl #2]
   44dcc:	add	lr, lr, r0, lsl #1
   44dd0:	add	ip, r0, ip
   44dd4:	ldr	r0, [sp, #60]	; 0x3c
   44dd8:	ldr	r2, [sp, #40]	; 0x28
   44ddc:	ldr	r4, [sp, #44]	; 0x2c
   44de0:	add	r0, r0, r2
   44de4:	ldr	r2, [sp, #56]	; 0x38
   44de8:	add	sl, sl, r4
   44dec:	str	r0, [sp, #60]	; 0x3c
   44df0:	mov	r0, #0
   44df4:	cmp	sl, r2
   44df8:	blt	44cd8 <GetDataSlab+0x1d314>
   44dfc:	b	47ffc <GetDataSlab+0x20638>
   44e00:	ldr	r0, [sp, #56]	; 0x38
   44e04:	ldr	r1, [fp, #20]
   44e08:	sub	r2, fp, #96	; 0x60
   44e0c:	cmp	r0, #1
   44e10:	blt	47ff8 <GetDataSlab+0x20634>
   44e14:	ldr	r8, [fp, #12]
   44e18:	ldr	r3, [sp, #52]	; 0x34
   44e1c:	ldr	r0, [sp, #44]	; 0x2c
   44e20:	add	sl, r1, #4
   44e24:	lsl	r5, r7, #1
   44e28:	mov	ip, #0
   44e2c:	ldr	r6, [r8], #4
   44e30:	mls	r0, r3, r7, r0
   44e34:	sub	r0, r0, r6
   44e38:	str	r6, [sp, #44]	; 0x2c
   44e3c:	str	r0, [sp, #40]	; 0x28
   44e40:	sub	r0, fp, #136	; 0x88
   44e44:	orr	r1, r0, #4
   44e48:	orr	r0, r2, #4
   44e4c:	mov	r2, r3
   44e50:	str	r0, [sp, #28]
   44e54:	mla	r0, r3, r7, r6
   44e58:	str	r0, [sp, #32]
   44e5c:	lsl	r0, r3, #3
   44e60:	str	r0, [sp, #36]	; 0x24
   44e64:	mov	r0, #0
   44e68:	str	r0, [sp, #48]	; 0x30
   44e6c:	ldr	r0, [sp, #44]	; 0x2c
   44e70:	cmp	r2, #1
   44e74:	blt	44ea0 <GetDataSlab+0x1d4dc>
   44e78:	ldr	r0, [sp, #44]	; 0x2c
   44e7c:	ldr	r7, [sp, #52]	; 0x34
   44e80:	ldr	r6, [sp, #60]	; 0x3c
   44e84:	add	r0, r4, r0, lsl #1
   44e88:	ldrh	r2, [r0], r5
   44e8c:	subs	r7, r7, #1
   44e90:	stm	r6, {r2, ip}
   44e94:	add	r6, r6, #8
   44e98:	bne	44e88 <GetDataSlab+0x1d4c4>
   44e9c:	ldr	r0, [sp, #32]
   44ea0:	ldr	r3, [sp, #40]	; 0x28
   44ea4:	add	r2, r4, r3, lsl #1
   44ea8:	add	r4, r2, r0, lsl #1
   44eac:	add	r0, r0, r9
   44eb0:	add	r9, r0, r3
   44eb4:	ldr	r0, [fp, #24]
   44eb8:	sub	r3, fp, #176	; 0xb0
   44ebc:	cmp	r0, #2
   44ec0:	blt	44f68 <GetDataSlab+0x1d5a4>
   44ec4:	mov	r7, #0
   44ec8:	ldr	r2, [r1, r7, lsl #2]
   44ecc:	mov	r0, r7
   44ed0:	add	r2, r2, #1
   44ed4:	str	r2, [r1, r7, lsl #2]
   44ed8:	ldr	r6, [sl, r7, lsl #2]
   44edc:	sdiv	r7, r2, r6
   44ee0:	mls	r2, r7, r6, r2
   44ee4:	cmp	r2, #0
   44ee8:	bne	44f58 <GetDataSlab+0x1d594>
   44eec:	add	r2, r3, r0, lsl #2
   44ef0:	str	ip, [r1, r0, lsl #2]
   44ef4:	ldr	r6, [r2, #4]
   44ef8:	sdiv	r2, r9, r6
   44efc:	mls	r7, r2, r6, r9
   44f00:	cmp	r7, #0
   44f04:	beq	44f24 <GetDataSlab+0x1d560>
   44f08:	ldr	r2, [r3, r0, lsl #2]
   44f0c:	ldr	lr, [r8, r0, lsl #2]
   44f10:	sub	r6, r6, r7
   44f14:	sub	r3, fp, #176	; 0xb0
   44f18:	mla	r2, lr, r2, r6
   44f1c:	add	r9, r2, r9
   44f20:	b	44f3c <GetDataSlab+0x1d578>
   44f24:	ldr	r6, [r8, r0, lsl #2]
   44f28:	cmp	r6, #0
   44f2c:	beq	44f40 <GetDataSlab+0x1d57c>
   44f30:	ldr	r2, [r3, r0, lsl #2]
   44f34:	mla	r9, r2, r6, r9
   44f38:	mul	r2, r2, r6
   44f3c:	add	r4, r4, r2, lsl #1
   44f40:	ldr	r2, [fp, #24]
   44f44:	add	r7, r0, #1
   44f48:	add	r0, r0, #2
   44f4c:	cmp	r0, r2
   44f50:	blt	44ec8 <GetDataSlab+0x1d504>
   44f54:	b	44f68 <GetDataSlab+0x1d5a4>
   44f58:	ldr	r2, [sp, #28]
   44f5c:	ldr	r0, [r2, r0, lsl #2]
   44f60:	add	r4, r4, r0, lsl #1
   44f64:	add	r9, r0, r9
   44f68:	ldr	r0, [sp, #60]	; 0x3c
   44f6c:	ldr	r2, [sp, #36]	; 0x24
   44f70:	ldr	r7, [sp, #48]	; 0x30
   44f74:	ldr	r3, [sp, #56]	; 0x38
   44f78:	add	r0, r0, r2
   44f7c:	ldr	r2, [sp, #52]	; 0x34
   44f80:	str	r0, [sp, #60]	; 0x3c
   44f84:	mov	r0, #0
   44f88:	add	r7, r7, r2
   44f8c:	cmp	r7, r3
   44f90:	str	r7, [sp, #48]	; 0x30
   44f94:	blt	44e6c <GetDataSlab+0x1d4a8>
   44f98:	b	47ffc <GetDataSlab+0x20638>
   44f9c:	ldr	r0, [sp, #56]	; 0x38
   44fa0:	sub	r1, fp, #96	; 0x60
   44fa4:	cmp	r0, #1
   44fa8:	ldr	r0, [fp, #12]
   44fac:	blt	47ff8 <GetDataSlab+0x20634>
   44fb0:	add	r9, r0, #4
   44fb4:	ldr	r0, [fp, #20]
   44fb8:	ldr	r2, [sp, #44]	; 0x2c
   44fbc:	ldr	r7, [sp, #40]	; 0x28
   44fc0:	lsl	r8, r6, #2
   44fc4:	mov	lr, #0
   44fc8:	add	ip, r0, #4
   44fcc:	sub	r0, fp, #136	; 0x88
   44fd0:	mls	r7, r2, r6, r7
   44fd4:	orr	r5, r0, #4
   44fd8:	orr	r0, r1, #4
   44fdc:	str	r7, [sp, #48]	; 0x30
   44fe0:	str	r0, [sp, #32]
   44fe4:	mul	r0, r2, r6
   44fe8:	str	r0, [sp, #36]	; 0x24
   44fec:	lsl	r0, r2, #3
   44ff0:	str	r0, [sp, #40]	; 0x28
   44ff4:	mov	r0, #0
   44ff8:	str	r0, [sp, #52]	; 0x34
   44ffc:	ldr	r0, [fp, #12]
   45000:	cmp	r2, #1
   45004:	ldr	r0, [r0]
   45008:	blt	4504c <GetDataSlab+0x1d688>
   4500c:	ldr	r1, [sp, #36]	; 0x24
   45010:	ldr	lr, [sp, #60]	; 0x3c
   45014:	add	r4, sl, r0, lsl #2
   45018:	add	r3, r1, r3
   4501c:	add	r1, sl, r1, lsl #2
   45020:	ldr	r6, [r4], r8
   45024:	subs	r2, r2, #1
   45028:	asr	r7, r6, #31
   4502c:	strd	r6, [lr]
   45030:	add	lr, lr, #8
   45034:	bne	45020 <GetDataSlab+0x1d65c>
   45038:	mov	sl, r1
   4503c:	add	r2, r3, r0
   45040:	sub	r1, fp, #176	; 0xb0
   45044:	mov	lr, #0
   45048:	b	45054 <GetDataSlab+0x1d690>
   4504c:	add	r2, r0, r3
   45050:	sub	r1, fp, #176	; 0xb0
   45054:	ldr	r3, [sp, #48]	; 0x30
   45058:	sub	r0, r3, r0
   4505c:	add	sl, sl, r3, lsl #2
   45060:	add	r3, r2, r0
   45064:	ldr	r0, [fp, #24]
   45068:	cmp	r0, #2
   4506c:	blt	45110 <GetDataSlab+0x1d74c>
   45070:	mov	r2, #0
   45074:	mov	r0, r2
   45078:	ldr	r2, [r5, r2, lsl #2]
   4507c:	add	r2, r2, #1
   45080:	str	r2, [r5, r0, lsl #2]
   45084:	ldr	r7, [ip, r0, lsl #2]
   45088:	sdiv	r6, r2, r7
   4508c:	mls	r2, r6, r7, r2
   45090:	cmp	r2, #0
   45094:	bne	45100 <GetDataSlab+0x1d73c>
   45098:	add	r2, r1, r0, lsl #2
   4509c:	str	lr, [r5, r0, lsl #2]
   450a0:	ldr	r2, [r2, #4]
   450a4:	sdiv	r7, r3, r2
   450a8:	mls	r7, r7, r2, r3
   450ac:	cmp	r7, #0
   450b0:	beq	450cc <GetDataSlab+0x1d708>
   450b4:	ldr	r6, [r1, r0, lsl #2]
   450b8:	ldr	r4, [r9, r0, lsl #2]
   450bc:	sub	r2, r2, r7
   450c0:	mla	r2, r4, r6, r2
   450c4:	add	r3, r2, r3
   450c8:	b	450e4 <GetDataSlab+0x1d720>
   450cc:	ldr	r2, [r9, r0, lsl #2]
   450d0:	cmp	r2, #0
   450d4:	beq	450e8 <GetDataSlab+0x1d724>
   450d8:	ldr	r7, [r1, r0, lsl #2]
   450dc:	mla	r3, r7, r2, r3
   450e0:	mul	r2, r7, r2
   450e4:	add	sl, sl, r2, lsl #2
   450e8:	ldr	r7, [fp, #24]
   450ec:	add	r2, r0, #1
   450f0:	add	r0, r0, #2
   450f4:	cmp	r0, r7
   450f8:	blt	45074 <GetDataSlab+0x1d6b0>
   450fc:	b	45110 <GetDataSlab+0x1d74c>
   45100:	ldr	r1, [sp, #32]
   45104:	ldr	r0, [r1, r0, lsl #2]
   45108:	add	sl, sl, r0, lsl #2
   4510c:	add	r3, r0, r3
   45110:	ldr	r0, [sp, #60]	; 0x3c
   45114:	ldr	r1, [sp, #40]	; 0x28
   45118:	ldr	r2, [sp, #44]	; 0x2c
   4511c:	ldr	r4, [sp, #52]	; 0x34
   45120:	add	r0, r0, r1
   45124:	ldr	r1, [sp, #56]	; 0x38
   45128:	add	r4, r4, r2
   4512c:	str	r0, [sp, #60]	; 0x3c
   45130:	mov	r0, #0
   45134:	str	r4, [sp, #52]	; 0x34
   45138:	cmp	r4, r1
   4513c:	blt	44ffc <GetDataSlab+0x1d638>
   45140:	b	47ffc <GetDataSlab+0x20638>
   45144:	ldr	r0, [sp, #56]	; 0x38
   45148:	sub	r1, fp, #96	; 0x60
   4514c:	cmp	r0, #1
   45150:	ldr	r0, [fp, #12]
   45154:	blt	47ff8 <GetDataSlab+0x20634>
   45158:	ldr	r2, [sp, #44]	; 0x2c
   4515c:	ldr	r7, [sp, #40]	; 0x28
   45160:	add	ip, r0, #4
   45164:	sub	r0, fp, #136	; 0x88
   45168:	add	sl, sl, #4
   4516c:	mov	r9, #0
   45170:	mov	r8, #0
   45174:	orr	r5, r0, #4
   45178:	orr	r0, r1, #4
   4517c:	lsl	r1, r4, #2
   45180:	str	r0, [sp, #36]	; 0x24
   45184:	mul	r0, r2, r4
   45188:	mls	r7, r2, r4, r7
   4518c:	str	r0, [sp, #40]	; 0x28
   45190:	lsl	r0, r2, #3
   45194:	str	r7, [sp, #52]	; 0x34
   45198:	str	r0, [sp, #48]	; 0x30
   4519c:	ldr	r0, [fp, #12]
   451a0:	cmp	r2, #1
   451a4:	ldr	r0, [r0]
   451a8:	blt	451e0 <GetDataSlab+0x1d81c>
   451ac:	ldr	r4, [sp, #40]	; 0x28
   451b0:	add	r3, r4, r3
   451b4:	add	r7, lr, r4, lsl #2
   451b8:	add	r4, lr, r0, lsl #2
   451bc:	ldr	lr, [sp, #60]	; 0x3c
   451c0:	ldr	r6, [r4], r1
   451c4:	subs	r2, r2, #1
   451c8:	stm	lr, {r6, r9}
   451cc:	add	lr, lr, #8
   451d0:	bne	451c0 <GetDataSlab+0x1d7fc>
   451d4:	add	r2, r3, r0
   451d8:	mov	lr, r7
   451dc:	b	451e4 <GetDataSlab+0x1d820>
   451e0:	add	r2, r0, r3
   451e4:	ldr	r3, [sp, #52]	; 0x34
   451e8:	sub	r0, r3, r0
   451ec:	add	lr, lr, r3, lsl #2
   451f0:	add	r3, r2, r0
   451f4:	ldr	r0, [fp, #24]
   451f8:	cmp	r0, #2
   451fc:	blt	452a8 <GetDataSlab+0x1d8e4>
   45200:	mov	r2, #0
   45204:	mov	r0, r2
   45208:	ldr	r2, [r5, r2, lsl #2]
   4520c:	add	r2, r2, #1
   45210:	str	r2, [r5, r0, lsl #2]
   45214:	ldr	r6, [sl, r0, lsl #2]
   45218:	sdiv	r7, r2, r6
   4521c:	mls	r2, r7, r6, r2
   45220:	cmp	r2, #0
   45224:	bne	45298 <GetDataSlab+0x1d8d4>
   45228:	sub	r4, fp, #176	; 0xb0
   4522c:	str	r9, [r5, r0, lsl #2]
   45230:	add	r2, r4, r0, lsl #2
   45234:	ldr	r2, [r2, #4]
   45238:	sdiv	r7, r3, r2
   4523c:	mls	r6, r7, r2, r3
   45240:	cmp	r6, #0
   45244:	beq	45260 <GetDataSlab+0x1d89c>
   45248:	ldr	r7, [r4, r0, lsl #2]
   4524c:	ldr	r4, [ip, r0, lsl #2]
   45250:	sub	r2, r2, r6
   45254:	mla	r2, r4, r7, r2
   45258:	add	r3, r2, r3
   4525c:	b	4527c <GetDataSlab+0x1d8b8>
   45260:	ldr	r2, [ip, r0, lsl #2]
   45264:	cmp	r2, #0
   45268:	beq	45280 <GetDataSlab+0x1d8bc>
   4526c:	sub	r4, fp, #176	; 0xb0
   45270:	ldr	r4, [r4, r0, lsl #2]
   45274:	mla	r3, r4, r2, r3
   45278:	mul	r2, r4, r2
   4527c:	add	lr, lr, r2, lsl #2
   45280:	ldr	r4, [fp, #24]
   45284:	add	r2, r0, #1
   45288:	add	r0, r0, #2
   4528c:	cmp	r0, r4
   45290:	blt	45204 <GetDataSlab+0x1d840>
   45294:	b	452a8 <GetDataSlab+0x1d8e4>
   45298:	ldr	r2, [sp, #36]	; 0x24
   4529c:	ldr	r0, [r2, r0, lsl #2]
   452a0:	add	lr, lr, r0, lsl #2
   452a4:	add	r3, r0, r3
   452a8:	ldr	r0, [sp, #60]	; 0x3c
   452ac:	ldr	r2, [sp, #48]	; 0x30
   452b0:	ldr	r4, [sp, #56]	; 0x38
   452b4:	add	r0, r0, r2
   452b8:	ldr	r2, [sp, #44]	; 0x2c
   452bc:	str	r0, [sp, #60]	; 0x3c
   452c0:	mov	r0, #0
   452c4:	add	r8, r8, r2
   452c8:	cmp	r8, r4
   452cc:	blt	4519c <GetDataSlab+0x1d7d8>
   452d0:	b	47ffc <GetDataSlab+0x20638>
   452d4:	ldr	r0, [sp, #44]	; 0x2c
   452d8:	ldr	r1, [fp, #12]
   452dc:	ldr	r2, [fp, #20]
   452e0:	ldr	sl, [sp, #40]	; 0x28
   452e4:	cmp	r0, #1
   452e8:	blt	47ff8 <GetDataSlab+0x20634>
   452ec:	ldr	r0, [sp, #36]	; 0x24
   452f0:	ldr	r9, [r1], #4
   452f4:	lsl	r8, r3, #2
   452f8:	mls	r0, sl, r3, r0
   452fc:	str	r1, [sp, #56]	; 0x38
   45300:	str	r9, [sp, #28]
   45304:	sub	r0, r0, r9
   45308:	str	r0, [sp, #36]	; 0x24
   4530c:	add	r0, r2, #4
   45310:	str	r0, [sp, #52]	; 0x34
   45314:	sub	r0, fp, #136	; 0x88
   45318:	orr	r7, r0, #4
   4531c:	sub	r0, fp, #96	; 0x60
   45320:	orr	r0, r0, #4
   45324:	str	r0, [sp, #20]
   45328:	mla	r0, sl, r3, r9
   4532c:	str	r0, [sp, #24]
   45330:	lsl	r0, sl, #3
   45334:	str	r0, [sp, #32]
   45338:	mov	r0, #0
   4533c:	str	r0, [sp, #48]	; 0x30
   45340:	cmp	sl, #1
   45344:	mov	r0, r9
   45348:	blt	45378 <GetDataSlab+0x1d9b4>
   4534c:	add	r6, r5, r9, lsl #2
   45350:	ldr	r9, [sp, #60]	; 0x3c
   45354:	ldr	r0, [r6], r8
   45358:	bl	5855c <__aeabi_f2lz>
   4535c:	strd	r0, [r9]
   45360:	subs	sl, sl, #1
   45364:	add	r9, r9, #8
   45368:	bne	45354 <GetDataSlab+0x1d990>
   4536c:	ldr	r0, [sp, #24]
   45370:	ldr	sl, [sp, #40]	; 0x28
   45374:	ldr	r9, [sp, #28]
   45378:	ldr	r2, [sp, #36]	; 0x24
   4537c:	ldr	ip, [sp, #60]	; 0x3c
   45380:	sub	lr, fp, #176	; 0xb0
   45384:	add	r1, r5, r2, lsl #2
   45388:	add	r5, r1, r0, lsl #2
   4538c:	add	r0, r0, r4
   45390:	add	r4, r0, r2
   45394:	ldr	r0, [fp, #24]
   45398:	cmp	r0, #2
   4539c:	blt	45450 <GetDataSlab+0x1da8c>
   453a0:	mov	r1, #0
   453a4:	mov	r0, r1
   453a8:	ldr	r1, [r7, r1, lsl #2]
   453ac:	ldr	r2, [sp, #52]	; 0x34
   453b0:	add	r1, r1, #1
   453b4:	str	r1, [r7, r0, lsl #2]
   453b8:	ldr	r2, [r2, r0, lsl #2]
   453bc:	sdiv	r3, r1, r2
   453c0:	mls	r1, r3, r2, r1
   453c4:	cmp	r1, #0
   453c8:	bne	45440 <GetDataSlab+0x1da7c>
   453cc:	mov	r1, #0
   453d0:	str	r1, [r7, r0, lsl #2]
   453d4:	add	r1, lr, r0, lsl #2
   453d8:	ldr	r1, [r1, #4]
   453dc:	sdiv	r2, r4, r1
   453e0:	mls	r2, r2, r1, r4
   453e4:	cmp	r2, #0
   453e8:	beq	45408 <GetDataSlab+0x1da44>
   453ec:	ldr	r6, [sp, #56]	; 0x38
   453f0:	ldr	r3, [lr, r0, lsl #2]
   453f4:	sub	r1, r1, r2
   453f8:	ldr	r6, [r6, r0, lsl #2]
   453fc:	mla	r1, r6, r3, r1
   45400:	add	r4, r1, r4
   45404:	b	45424 <GetDataSlab+0x1da60>
   45408:	ldr	r1, [sp, #56]	; 0x38
   4540c:	ldr	r1, [r1, r0, lsl #2]
   45410:	cmp	r1, #0
   45414:	beq	45428 <GetDataSlab+0x1da64>
   45418:	ldr	r2, [lr, r0, lsl #2]
   4541c:	mla	r4, r2, r1, r4
   45420:	mul	r1, r2, r1
   45424:	add	r5, r5, r1, lsl #2
   45428:	ldr	r2, [fp, #24]
   4542c:	add	r1, r0, #1
   45430:	add	r0, r0, #2
   45434:	cmp	r0, r2
   45438:	blt	453a4 <GetDataSlab+0x1d9e0>
   4543c:	b	45450 <GetDataSlab+0x1da8c>
   45440:	ldr	r1, [sp, #20]
   45444:	ldr	r0, [r1, r0, lsl #2]
   45448:	add	r5, r5, r0, lsl #2
   4544c:	add	r4, r0, r4
   45450:	ldr	r2, [sp, #48]	; 0x30
   45454:	ldr	r0, [sp, #32]
   45458:	ldr	r1, [sp, #44]	; 0x2c
   4545c:	add	r2, r2, sl
   45460:	add	ip, ip, r0
   45464:	mov	r0, #0
   45468:	cmp	r2, r1
   4546c:	str	ip, [sp, #60]	; 0x3c
   45470:	str	r2, [sp, #48]	; 0x30
   45474:	blt	45340 <GetDataSlab+0x1d97c>
   45478:	b	47ffc <GetDataSlab+0x20638>
   4547c:	ldr	r0, [sp, #44]	; 0x2c
   45480:	ldr	r1, [fp, #12]
   45484:	ldr	r2, [fp, #20]
   45488:	ldr	sl, [sp, #40]	; 0x28
   4548c:	cmp	r0, #1
   45490:	blt	47ff8 <GetDataSlab+0x20634>
   45494:	ldr	r0, [sp, #36]	; 0x24
   45498:	ldr	r9, [r1], #4
   4549c:	lsl	r8, r3, #3
   454a0:	mls	r0, sl, r3, r0
   454a4:	str	r1, [sp, #56]	; 0x38
   454a8:	str	r9, [sp, #28]
   454ac:	sub	r0, r0, r9
   454b0:	str	r0, [sp, #36]	; 0x24
   454b4:	add	r0, r2, #4
   454b8:	str	r0, [sp, #52]	; 0x34
   454bc:	sub	r0, fp, #136	; 0x88
   454c0:	orr	r7, r0, #4
   454c4:	sub	r0, fp, #96	; 0x60
   454c8:	orr	r0, r0, #4
   454cc:	str	r0, [sp, #20]
   454d0:	mla	r0, sl, r3, r9
   454d4:	str	r0, [sp, #24]
   454d8:	lsl	r0, sl, #3
   454dc:	str	r0, [sp, #32]
   454e0:	mov	r0, #0
   454e4:	str	r0, [sp, #48]	; 0x30
   454e8:	cmp	sl, #1
   454ec:	mov	r0, r9
   454f0:	blt	45528 <GetDataSlab+0x1db64>
   454f4:	add	r6, r5, r9, lsl #3
   454f8:	ldr	r9, [sp, #60]	; 0x3c
   454fc:	vldr	d16, [r6]
   45500:	vmov	r0, r1, d16
   45504:	bl	58588 <__aeabi_d2lz>
   45508:	strd	r0, [r9]
   4550c:	add	r6, r6, r8
   45510:	subs	sl, sl, #1
   45514:	add	r9, r9, #8
   45518:	bne	454fc <GetDataSlab+0x1db38>
   4551c:	ldr	r0, [sp, #24]
   45520:	ldr	sl, [sp, #40]	; 0x28
   45524:	ldr	r9, [sp, #28]
   45528:	ldr	r2, [sp, #36]	; 0x24
   4552c:	ldr	ip, [sp, #60]	; 0x3c
   45530:	sub	lr, fp, #176	; 0xb0
   45534:	add	r1, r5, r2, lsl #3
   45538:	add	r5, r1, r0, lsl #3
   4553c:	add	r0, r0, r4
   45540:	add	r4, r0, r2
   45544:	ldr	r0, [fp, #24]
   45548:	cmp	r0, #2
   4554c:	blt	45600 <GetDataSlab+0x1dc3c>
   45550:	mov	r1, #0
   45554:	mov	r0, r1
   45558:	ldr	r1, [r7, r1, lsl #2]
   4555c:	ldr	r2, [sp, #52]	; 0x34
   45560:	add	r1, r1, #1
   45564:	str	r1, [r7, r0, lsl #2]
   45568:	ldr	r2, [r2, r0, lsl #2]
   4556c:	sdiv	r3, r1, r2
   45570:	mls	r1, r3, r2, r1
   45574:	cmp	r1, #0
   45578:	bne	455f0 <GetDataSlab+0x1dc2c>
   4557c:	mov	r1, #0
   45580:	str	r1, [r7, r0, lsl #2]
   45584:	add	r1, lr, r0, lsl #2
   45588:	ldr	r1, [r1, #4]
   4558c:	sdiv	r2, r4, r1
   45590:	mls	r2, r2, r1, r4
   45594:	cmp	r2, #0
   45598:	beq	455b8 <GetDataSlab+0x1dbf4>
   4559c:	ldr	r6, [sp, #56]	; 0x38
   455a0:	ldr	r3, [lr, r0, lsl #2]
   455a4:	sub	r1, r1, r2
   455a8:	ldr	r6, [r6, r0, lsl #2]
   455ac:	mla	r1, r6, r3, r1
   455b0:	add	r4, r1, r4
   455b4:	b	455d4 <GetDataSlab+0x1dc10>
   455b8:	ldr	r1, [sp, #56]	; 0x38
   455bc:	ldr	r1, [r1, r0, lsl #2]
   455c0:	cmp	r1, #0
   455c4:	beq	455d8 <GetDataSlab+0x1dc14>
   455c8:	ldr	r2, [lr, r0, lsl #2]
   455cc:	mla	r4, r2, r1, r4
   455d0:	mul	r1, r2, r1
   455d4:	add	r5, r5, r1, lsl #3
   455d8:	ldr	r2, [fp, #24]
   455dc:	add	r1, r0, #1
   455e0:	add	r0, r0, #2
   455e4:	cmp	r0, r2
   455e8:	blt	45554 <GetDataSlab+0x1db90>
   455ec:	b	45600 <GetDataSlab+0x1dc3c>
   455f0:	ldr	r1, [sp, #20]
   455f4:	ldr	r0, [r1, r0, lsl #2]
   455f8:	add	r5, r5, r0, lsl #3
   455fc:	add	r4, r0, r4
   45600:	ldr	r2, [sp, #48]	; 0x30
   45604:	ldr	r0, [sp, #32]
   45608:	ldr	r1, [sp, #44]	; 0x2c
   4560c:	add	r2, r2, sl
   45610:	add	ip, ip, r0
   45614:	mov	r0, #0
   45618:	cmp	r2, r1
   4561c:	str	ip, [sp, #60]	; 0x3c
   45620:	str	r2, [sp, #48]	; 0x30
   45624:	blt	454e8 <GetDataSlab+0x1db24>
   45628:	b	47ffc <GetDataSlab+0x20638>
   4562c:	ldr	r0, [sp, #56]	; 0x38
   45630:	ldr	ip, [fp, #12]
   45634:	ldr	r8, [sp, #44]	; 0x2c
   45638:	sub	r1, fp, #96	; 0x60
   4563c:	cmp	r0, #1
   45640:	blt	457c0 <GetDataSlab+0x1ddfc>
   45644:	ldr	r0, [sp, #28]
   45648:	ldr	r3, [ip], #4
   4564c:	add	sl, sl, #4
   45650:	lsl	r7, r2, #3
   45654:	mov	r9, #0
   45658:	mls	r0, r8, r2, r0
   4565c:	str	r3, [sp, #36]	; 0x24
   45660:	sub	r0, r0, r3
   45664:	str	r0, [sp, #32]
   45668:	sub	r0, fp, #136	; 0x88
   4566c:	orr	r4, r0, #4
   45670:	orr	r0, r1, #4
   45674:	str	r0, [sp, #20]
   45678:	mla	r0, r8, r2, r3
   4567c:	str	r0, [sp, #24]
   45680:	lsl	r0, r8, #3
   45684:	str	r0, [sp, #28]
   45688:	ldr	r0, [sp, #60]	; 0x3c
   4568c:	str	r0, [sp, #52]	; 0x34
   45690:	ldr	r0, [sp, #36]	; 0x24
   45694:	cmp	r8, #1
   45698:	blt	456d4 <GetDataSlab+0x1dd10>
   4569c:	ldr	r0, [sp, #36]	; 0x24
   456a0:	add	r2, r5, r0, lsl #3
   456a4:	mov	r0, r8
   456a8:	ldr	r8, [sp, #52]	; 0x34
   456ac:	ldr	r3, [r2]
   456b0:	ldr	r1, [r2, #4]
   456b4:	add	r2, r2, r7
   456b8:	subs	r0, r0, #1
   456bc:	str	r3, [r8]
   456c0:	str	r1, [r8, #4]
   456c4:	add	r8, r8, #8
   456c8:	bne	456ac <GetDataSlab+0x1dce8>
   456cc:	ldr	r0, [sp, #24]
   456d0:	ldr	r8, [sp, #44]	; 0x2c
   456d4:	ldr	r2, [sp, #32]
   456d8:	add	r1, r5, r2, lsl #3
   456dc:	add	r5, r1, r0, lsl #3
   456e0:	add	r0, r0, lr
   456e4:	add	lr, r0, r2
   456e8:	ldr	r0, [fp, #24]
   456ec:	cmp	r0, #2
   456f0:	blt	457a0 <GetDataSlab+0x1dddc>
   456f4:	mov	r0, #0
   456f8:	mov	r2, r0
   456fc:	ldr	r0, [r4, r0, lsl #2]
   45700:	add	r0, r0, #1
   45704:	str	r0, [r4, r2, lsl #2]
   45708:	ldr	r1, [sl, r2, lsl #2]
   4570c:	sdiv	r3, r0, r1
   45710:	mls	r0, r3, r1, r0
   45714:	cmp	r0, #0
   45718:	bne	45790 <GetDataSlab+0x1ddcc>
   4571c:	mov	r0, #0
   45720:	sub	r6, fp, #176	; 0xb0
   45724:	str	r0, [r4, r2, lsl #2]
   45728:	add	r0, r6, r2, lsl #2
   4572c:	ldr	r0, [r0, #4]
   45730:	sdiv	r1, lr, r0
   45734:	mls	r3, r1, r0, lr
   45738:	cmp	r3, #0
   4573c:	beq	45758 <GetDataSlab+0x1dd94>
   45740:	ldr	r1, [r6, r2, lsl #2]
   45744:	ldr	r6, [ip, r2, lsl #2]
   45748:	sub	r0, r0, r3
   4574c:	mla	r0, r6, r1, r0
   45750:	add	lr, r0, lr
   45754:	b	45774 <GetDataSlab+0x1ddb0>
   45758:	ldr	r0, [ip, r2, lsl #2]
   4575c:	cmp	r0, #0
   45760:	beq	45778 <GetDataSlab+0x1ddb4>
   45764:	sub	r1, fp, #176	; 0xb0
   45768:	ldr	r1, [r1, r2, lsl #2]
   4576c:	mla	lr, r1, r0, lr
   45770:	mul	r0, r1, r0
   45774:	add	r5, r5, r0, lsl #3
   45778:	add	r0, r2, #1
   4577c:	add	r1, r2, #2
   45780:	ldr	r2, [fp, #24]
   45784:	cmp	r1, r2
   45788:	blt	456f8 <GetDataSlab+0x1dd34>
   4578c:	b	457a0 <GetDataSlab+0x1dddc>
   45790:	ldr	r0, [sp, #20]
   45794:	ldr	r0, [r0, r2, lsl #2]
   45798:	add	r5, r5, r0, lsl #3
   4579c:	add	lr, r0, lr
   457a0:	ldr	r0, [sp, #28]
   457a4:	ldr	r1, [sp, #52]	; 0x34
   457a8:	add	r9, r9, r8
   457ac:	add	r1, r1, r0
   457b0:	ldr	r0, [sp, #56]	; 0x38
   457b4:	str	r1, [sp, #52]	; 0x34
   457b8:	cmp	r9, r0
   457bc:	blt	45690 <GetDataSlab+0x1dccc>
   457c0:	ldr	r6, [sp, #40]	; 0x28
   457c4:	mov	r0, #0
   457c8:	ldr	r1, [fp, #16]
   457cc:	cmp	r6, #13
   457d0:	bne	47ffc <GetDataSlab+0x20638>
   457d4:	ldr	r0, [r1]
   457d8:	ldr	sl, [fp, #20]
   457dc:	mov	r2, #0
   457e0:	sub	r5, fp, #176	; 0xb0
   457e4:	sub	r6, fp, #96	; 0x60
   457e8:	str	r0, [sp, #28]
   457ec:	sub	r0, r0, #1
   457f0:	str	r0, [fp, #-96]	; 0xffffffa0
   457f4:	ldr	r0, [fp, #8]
   457f8:	ldr	r0, [r0]
   457fc:	str	r0, [fp, #-176]	; 0xffffff50
   45800:	str	r0, [sp, #36]	; 0x24
   45804:	ldr	r0, [fp, #24]
   45808:	ldr	r1, [sl]
   4580c:	cmp	r0, #2
   45810:	str	r1, [sp, #44]	; 0x2c
   45814:	str	r1, [sp, #52]	; 0x34
   45818:	blt	45960 <GetDataSlab+0x1df9c>
   4581c:	ldr	r0, [fp, #8]
   45820:	ldr	r3, [sp, #36]	; 0x24
   45824:	mov	r4, #1
   45828:	mov	lr, #0
   4582c:	mvn	ip, #15
   45830:	mov	r2, #0
   45834:	sub	r7, r0, #4
   45838:	sub	r9, r0, #12
   4583c:	ldr	r0, [sp, #44]	; 0x2c
   45840:	mov	r8, r3
   45844:	str	r0, [sp, #52]	; 0x34
   45848:	ldr	r1, [fp, #16]
   4584c:	add	lr, lr, #1
   45850:	cmp	lr, #4
   45854:	ldr	r1, [r1, r4, lsl #2]
   45858:	str	r3, [r5, r4, lsl #2]
   4585c:	sub	r1, r1, #1
   45860:	str	r1, [r6, r4, lsl #2]
   45864:	ldr	r6, [fp, #8]
   45868:	ldr	r6, [r6, r4, lsl #2]
   4586c:	str	r6, [sp, #56]	; 0x38
   45870:	bcs	4587c <GetDataSlab+0x1deb8>
   45874:	mov	r5, r4
   45878:	b	45904 <GetDataSlab+0x1df40>
   4587c:	vmov.i32	q9, #1	; 0x00000001
   45880:	vmov.i32	q10, #1	; 0x00000001
   45884:	vmov.i32	q8, #1	; 0x00000001
   45888:	vmov.32	d23[1], r6
   4588c:	bic	r6, lr, #3
   45890:	bic	sl, r4, #3
   45894:	vmov.32	d18[0], r3
   45898:	vmov.32	d20[0], r1
   4589c:	sub	r5, r4, r6
   458a0:	mov	r1, r9
   458a4:	vorr	d16, d18, d18
   458a8:	vmov.i32	q9, #1	; 0x00000001
   458ac:	vorr	d18, d20, d20
   458b0:	vld1.32	{d20-d21}, [r1], ip
   458b4:	subs	sl, sl, #4
   458b8:	vrev64.32	q12, q10
   458bc:	vext.8	q12, q12, q12, #8
   458c0:	vext.8	q11, q11, q12, #12
   458c4:	vmul.i32	q9, q9, q12
   458c8:	vmul.i32	q8, q11, q8
   458cc:	vorr	q11, q12, q12
   458d0:	bne	458b0 <GetDataSlab+0x1deec>
   458d4:	vext.8	q11, q9, q8, #8
   458d8:	vext.8	q12, q8, q8, #8
   458dc:	ldr	sl, [fp, #20]
   458e0:	cmp	lr, r6
   458e4:	vmul.i32	q0, q9, q11
   458e8:	vmul.i32	q1, q8, q12
   458ec:	vmul.i32	q8, q0, d0[1]
   458f0:	vmul.i32	q9, q1, d2[1]
   458f4:	vmov.32	r1, d16[0]
   458f8:	vmov.32	r3, d18[0]
   458fc:	beq	45918 <GetDataSlab+0x1df54>
   45900:	vmov.32	r6, d20[0]
   45904:	mul	r3, r6, r3
   45908:	ldr	r6, [r7, r5, lsl #2]
   4590c:	subs	r5, r5, #1
   45910:	mul	r1, r1, r6
   45914:	bne	45904 <GetDataSlab+0x1df40>
   45918:	sub	r6, fp, #96	; 0x60
   4591c:	sub	r5, fp, #176	; 0xb0
   45920:	ldr	r0, [sp, #52]	; 0x34
   45924:	add	r9, r9, #4
   45928:	str	r1, [r6, r4, lsl #2]
   4592c:	ldr	r1, [fp, #12]
   45930:	str	r3, [r5, r4, lsl #2]
   45934:	ldr	r1, [r1, r4, lsl #2]
   45938:	mla	r2, r1, r8, r2
   4593c:	ldr	r1, [sl, r4, lsl #2]
   45940:	mov	r8, r3
   45944:	ldr	r3, [sp, #56]	; 0x38
   45948:	add	r4, r4, #1
   4594c:	mul	r0, r1, r0
   45950:	ldr	r1, [fp, #24]
   45954:	str	r0, [sp, #52]	; 0x34
   45958:	cmp	r4, r1
   4595c:	bne	45848 <GetDataSlab+0x1de84>
   45960:	ldr	r0, [sp, #48]	; 0x30
   45964:	ldr	r6, [sp, #28]
   45968:	add	r9, r0, r2, lsl #3
   4596c:	cmp	r6, #1
   45970:	bne	47768 <GetDataSlab+0x1fda4>
   45974:	ldr	r0, [sp, #52]	; 0x34
   45978:	ldr	lr, [fp, #12]
   4597c:	cmp	r0, #1
   45980:	blt	47ff8 <GetDataSlab+0x20634>
   45984:	mov	r1, lr
   45988:	ldr	r8, [sp, #60]	; 0x3c
   4598c:	add	lr, sl, #4
   45990:	mov	r6, #0
   45994:	mov	r5, #0
   45998:	ldr	r0, [r1], #4
   4599c:	str	r1, [sp, #56]	; 0x38
   459a0:	ldr	r1, [sp, #44]	; 0x2c
   459a4:	str	r0, [sp, #32]
   459a8:	add	r0, r1, r0
   459ac:	str	r0, [sp, #28]
   459b0:	sub	r0, fp, #136	; 0x88
   459b4:	orr	r7, r0, #4
   459b8:	sub	r0, fp, #96	; 0x60
   459bc:	orr	r0, r0, #4
   459c0:	str	r0, [sp, #20]
   459c4:	bic	r0, r1, #1
   459c8:	str	r0, [sp, #24]
   459cc:	lsl	r0, r1, #3
   459d0:	str	r0, [sp, #40]	; 0x28
   459d4:	mov	r0, #0
   459d8:	str	r0, [sp, #48]	; 0x30
   459dc:	cmp	r1, #1
   459e0:	blt	45a84 <GetDataSlab+0x1e0c0>
   459e4:	ldr	r0, [sp, #32]
   459e8:	mov	r1, #0
   459ec:	add	r4, r9, r0, lsl #3
   459f0:	beq	45a54 <GetDataSlab+0x1e090>
   459f4:	ldr	r0, [sp, #60]	; 0x3c
   459f8:	ldr	r3, [sp, #40]	; 0x28
   459fc:	mla	r0, r3, r5, r0
   45a00:	ldr	r3, [sp, #28]
   45a04:	add	r3, r9, r3, lsl #3
   45a08:	cmp	r0, r3
   45a0c:	bcs	45a28 <GetDataSlab+0x1e064>
   45a10:	ldr	r0, [sp, #40]	; 0x28
   45a14:	ldr	r3, [sp, #60]	; 0x3c
   45a18:	mla	r0, r0, r5, r0
   45a1c:	add	r0, r3, r0
   45a20:	cmp	r0, r4
   45a24:	bhi	45a54 <GetDataSlab+0x1e090>
   45a28:	ldr	r1, [sp, #24]
   45a2c:	mov	r3, r8
   45a30:	mov	r0, r4
   45a34:	vld1.64	{d16-d17}, [r0]!
   45a38:	subs	r1, r1, #2
   45a3c:	vst1.64	{d16-d17}, [r3]!
   45a40:	bne	45a34 <GetDataSlab+0x1e070>
   45a44:	ldr	r0, [sp, #44]	; 0x2c
   45a48:	ldr	r1, [sp, #24]
   45a4c:	cmp	r0, r1
   45a50:	beq	45a84 <GetDataSlab+0x1e0c0>
   45a54:	ldr	r0, [sp, #44]	; 0x2c
   45a58:	sub	r3, r0, r1
   45a5c:	sub	r1, r6, r1, lsl #3
   45a60:	mov	r0, r4
   45a64:	mov	ip, r8
   45a68:	subs	r3, r3, #1
   45a6c:	ldr	sl, [r0, -r1]!
   45a70:	ldr	r0, [r0, #4]
   45a74:	str	sl, [ip, -r1]!
   45a78:	sub	r1, r1, #8
   45a7c:	str	r0, [ip, #4]
   45a80:	bne	45a60 <GetDataSlab+0x1e09c>
   45a84:	ldr	r0, [sp, #36]	; 0x24
   45a88:	mov	ip, r5
   45a8c:	add	r9, r9, r0, lsl #3
   45a90:	add	r2, r2, r0
   45a94:	ldr	r0, [fp, #24]
   45a98:	cmp	r0, #2
   45a9c:	blt	45b54 <GetDataSlab+0x1e190>
   45aa0:	mov	r1, #0
   45aa4:	mov	r5, #0
   45aa8:	mov	r0, r1
   45aac:	ldr	r1, [r7, r1, lsl #2]
   45ab0:	add	r1, r1, #1
   45ab4:	str	r1, [r7, r0, lsl #2]
   45ab8:	ldr	r3, [lr, r0, lsl #2]
   45abc:	sdiv	r4, r1, r3
   45ac0:	mls	r1, r4, r3, r1
   45ac4:	cmp	r1, #0
   45ac8:	bne	45b44 <GetDataSlab+0x1e180>
   45acc:	sub	r6, fp, #176	; 0xb0
   45ad0:	str	r5, [r7, r0, lsl #2]
   45ad4:	add	r1, r6, r0, lsl #2
   45ad8:	ldr	r1, [r1, #4]
   45adc:	sdiv	r3, r2, r1
   45ae0:	mls	r3, r3, r1, r2
   45ae4:	cmp	r3, #0
   45ae8:	beq	45b08 <GetDataSlab+0x1e144>
   45aec:	ldr	r4, [r6, r0, lsl #2]
   45af0:	ldr	r6, [sp, #56]	; 0x38
   45af4:	sub	r1, r1, r3
   45af8:	ldr	r6, [r6, r0, lsl #2]
   45afc:	mla	r1, r6, r4, r1
   45b00:	add	r2, r1, r2
   45b04:	b	45b28 <GetDataSlab+0x1e164>
   45b08:	ldr	r1, [sp, #56]	; 0x38
   45b0c:	ldr	r1, [r1, r0, lsl #2]
   45b10:	cmp	r1, #0
   45b14:	beq	45b2c <GetDataSlab+0x1e168>
   45b18:	sub	r3, fp, #176	; 0xb0
   45b1c:	ldr	r3, [r3, r0, lsl #2]
   45b20:	mla	r2, r3, r1, r2
   45b24:	mul	r1, r3, r1
   45b28:	add	r9, r9, r1, lsl #3
   45b2c:	ldr	r3, [fp, #24]
   45b30:	add	r1, r0, #1
   45b34:	add	r0, r0, #2
   45b38:	cmp	r0, r3
   45b3c:	blt	45aa8 <GetDataSlab+0x1e0e4>
   45b40:	b	45b54 <GetDataSlab+0x1e190>
   45b44:	ldr	r1, [sp, #20]
   45b48:	ldr	r0, [r1, r0, lsl #2]
   45b4c:	add	r9, r9, r0, lsl #3
   45b50:	add	r2, r0, r2
   45b54:	ldr	r1, [sp, #44]	; 0x2c
   45b58:	ldr	r4, [sp, #48]	; 0x30
   45b5c:	ldr	r0, [sp, #40]	; 0x28
   45b60:	ldr	r3, [sp, #52]	; 0x34
   45b64:	mov	r5, ip
   45b68:	mov	r6, #0
   45b6c:	add	r5, ip, #1
   45b70:	add	r4, r4, r1
   45b74:	add	r8, r8, r0
   45b78:	mov	r0, #0
   45b7c:	cmp	r4, r3
   45b80:	str	r4, [sp, #48]	; 0x30
   45b84:	blt	459dc <GetDataSlab+0x1e018>
   45b88:	b	47ffc <GetDataSlab+0x20638>
   45b8c:	ldr	r0, [sp, #56]	; 0x38
   45b90:	cmp	r0, #1
   45b94:	ldr	r0, [fp, #12]
   45b98:	blt	47ff8 <GetDataSlab+0x20634>
   45b9c:	ldr	r7, [sp, #40]	; 0x28
   45ba0:	ldr	r1, [sp, #32]
   45ba4:	add	r8, r0, #4
   45ba8:	mov	r0, r2
   45bac:	add	sl, sl, #4
   45bb0:	mov	r9, #0
   45bb4:	orr	r0, r0, #4
   45bb8:	str	r0, [sp, #32]
   45bbc:	mls	r1, r7, ip, r1
   45bc0:	lsl	r0, r7, #3
   45bc4:	str	r1, [sp, #48]	; 0x30
   45bc8:	mul	r1, r7, ip
   45bcc:	str	r0, [sp, #44]	; 0x2c
   45bd0:	mov	r0, #0
   45bd4:	str	r1, [sp, #36]	; 0x24
   45bd8:	sub	r1, fp, #136	; 0x88
   45bdc:	str	r0, [sp, #52]	; 0x34
   45be0:	orr	r2, r1, #4
   45be4:	ldr	r0, [fp, #12]
   45be8:	cmp	r7, #1
   45bec:	ldr	r0, [r0]
   45bf0:	blt	45c2c <GetDataSlab+0x1e268>
   45bf4:	ldr	r1, [sp, #36]	; 0x24
   45bf8:	ldr	lr, [sp, #60]	; 0x3c
   45bfc:	add	r4, r1, r3
   45c00:	add	r6, r5, r1
   45c04:	add	r5, r5, r0
   45c08:	mov	r3, r7
   45c0c:	ldrb	r7, [r5], ip
   45c10:	subs	r3, r3, #1
   45c14:	stm	lr, {r7, r9}
   45c18:	add	lr, lr, #8
   45c1c:	bne	45c0c <GetDataSlab+0x1e248>
   45c20:	add	r3, r4, r0
   45c24:	mov	r5, r6
   45c28:	b	45c30 <GetDataSlab+0x1e26c>
   45c2c:	add	r3, r0, r3
   45c30:	ldr	r1, [sp, #48]	; 0x30
   45c34:	sub	lr, fp, #176	; 0xb0
   45c38:	sub	r0, r1, r0
   45c3c:	add	r5, r5, r1
   45c40:	add	r3, r3, r0
   45c44:	ldr	r0, [fp, #24]
   45c48:	cmp	r0, #2
   45c4c:	blt	45cec <GetDataSlab+0x1e328>
   45c50:	mov	r4, #0
   45c54:	ldr	r7, [r2, r4, lsl #2]
   45c58:	mov	r0, r4
   45c5c:	add	r7, r7, #1
   45c60:	str	r7, [r2, r4, lsl #2]
   45c64:	ldr	r4, [sl, r4, lsl #2]
   45c68:	sdiv	r6, r7, r4
   45c6c:	mls	r7, r6, r4, r7
   45c70:	cmp	r7, #0
   45c74:	bne	45cdc <GetDataSlab+0x1e318>
   45c78:	add	r7, lr, r0, lsl #2
   45c7c:	str	r9, [r2, r0, lsl #2]
   45c80:	ldr	r4, [r7, #4]
   45c84:	sdiv	r7, r3, r4
   45c88:	mls	r7, r7, r4, r3
   45c8c:	cmp	r7, #0
   45c90:	beq	45cb0 <GetDataSlab+0x1e2ec>
   45c94:	ldr	r6, [lr, r0, lsl #2]
   45c98:	ldr	r1, [r8, r0, lsl #2]
   45c9c:	sub	r7, r4, r7
   45ca0:	mla	r1, r1, r6, r7
   45ca4:	add	r3, r1, r3
   45ca8:	add	r5, r5, r1
   45cac:	b	45cc4 <GetDataSlab+0x1e300>
   45cb0:	ldr	r7, [r8, r0, lsl #2]
   45cb4:	cmp	r7, #0
   45cb8:	ldrne	r1, [lr, r0, lsl #2]
   45cbc:	mlane	r3, r1, r7, r3
   45cc0:	mlane	r5, r1, r7, r5
   45cc4:	ldr	r1, [fp, #24]
   45cc8:	add	r4, r0, #1
   45ccc:	add	r0, r0, #2
   45cd0:	cmp	r0, r1
   45cd4:	blt	45c54 <GetDataSlab+0x1e290>
   45cd8:	b	45cec <GetDataSlab+0x1e328>
   45cdc:	ldr	r1, [sp, #32]
   45ce0:	ldr	r0, [r1, r0, lsl #2]
   45ce4:	add	r5, r5, r0
   45ce8:	add	r3, r0, r3
   45cec:	ldr	r0, [sp, #60]	; 0x3c
   45cf0:	ldr	r1, [sp, #44]	; 0x2c
   45cf4:	ldr	r7, [sp, #40]	; 0x28
   45cf8:	ldr	r6, [sp, #52]	; 0x34
   45cfc:	add	r0, r0, r1
   45d00:	ldr	r1, [sp, #56]	; 0x38
   45d04:	add	r6, r6, r7
   45d08:	str	r0, [sp, #60]	; 0x3c
   45d0c:	mov	r0, #0
   45d10:	str	r6, [sp, #52]	; 0x34
   45d14:	cmp	r6, r1
   45d18:	blt	45be4 <GetDataSlab+0x1e220>
   45d1c:	b	47ffc <GetDataSlab+0x20638>
   45d20:	ldr	r0, [sp, #56]	; 0x38
   45d24:	ldr	r4, [sp, #44]	; 0x2c
   45d28:	cmp	r0, #1
   45d2c:	blt	47ff8 <GetDataSlab+0x20634>
   45d30:	ldr	r9, [fp, #12]
   45d34:	ldr	r0, [sp, #40]	; 0x28
   45d38:	add	r5, sl, #4
   45d3c:	mov	sl, #0
   45d40:	ldr	r2, [r9], #4
   45d44:	mls	r0, r4, r1, r0
   45d48:	sub	r0, r0, r2
   45d4c:	str	r2, [sp, #52]	; 0x34
   45d50:	str	r0, [sp, #48]	; 0x30
   45d54:	sub	r0, fp, #136	; 0x88
   45d58:	orr	r7, r0, #4
   45d5c:	orr	r0, r8, #4
   45d60:	mov	r8, #0
   45d64:	str	r0, [sp, #32]
   45d68:	mla	r0, r4, r1, r2
   45d6c:	lsl	r1, r1, #1
   45d70:	str	r0, [sp, #36]	; 0x24
   45d74:	lsl	r0, r4, #3
   45d78:	str	r0, [sp, #40]	; 0x28
   45d7c:	ldr	r0, [sp, #52]	; 0x34
   45d80:	cmp	r4, #1
   45d84:	blt	45db0 <GetDataSlab+0x1e3ec>
   45d88:	ldr	r0, [sp, #52]	; 0x34
   45d8c:	ldr	r6, [sp, #60]	; 0x3c
   45d90:	add	r0, lr, r0, lsl #1
   45d94:	ldrsh	r2, [r0], r1
   45d98:	subs	r4, r4, #1
   45d9c:	asr	r3, r2, #31
   45da0:	strd	r2, [r6]
   45da4:	add	r6, r6, #8
   45da8:	bne	45d94 <GetDataSlab+0x1e3d0>
   45dac:	ldr	r0, [sp, #36]	; 0x24
   45db0:	ldr	r3, [sp, #48]	; 0x30
   45db4:	add	r2, lr, r3, lsl #1
   45db8:	add	lr, r2, r0, lsl #1
   45dbc:	add	r0, r0, ip
   45dc0:	add	ip, r0, r3
   45dc4:	ldr	r0, [fp, #24]
   45dc8:	cmp	r0, #2
   45dcc:	blt	45e78 <GetDataSlab+0x1e4b4>
   45dd0:	mov	r3, #0
   45dd4:	ldr	r2, [r7, r3, lsl #2]
   45dd8:	mov	r0, r3
   45ddc:	add	r2, r2, #1
   45de0:	str	r2, [r7, r3, lsl #2]
   45de4:	ldr	r3, [r5, r3, lsl #2]
   45de8:	sdiv	r4, r2, r3
   45dec:	mls	r2, r4, r3, r2
   45df0:	cmp	r2, #0
   45df4:	bne	45e68 <GetDataSlab+0x1e4a4>
   45df8:	sub	r4, fp, #176	; 0xb0
   45dfc:	str	r8, [r7, r0, lsl #2]
   45e00:	add	r2, r4, r0, lsl #2
   45e04:	ldr	r3, [r2, #4]
   45e08:	sdiv	r2, ip, r3
   45e0c:	mls	r6, r2, r3, ip
   45e10:	cmp	r6, #0
   45e14:	beq	45e30 <GetDataSlab+0x1e46c>
   45e18:	ldr	r2, [r4, r0, lsl #2]
   45e1c:	ldr	r4, [r9, r0, lsl #2]
   45e20:	sub	r3, r3, r6
   45e24:	mla	r2, r4, r2, r3
   45e28:	add	ip, r2, ip
   45e2c:	b	45e4c <GetDataSlab+0x1e488>
   45e30:	ldr	r3, [r9, r0, lsl #2]
   45e34:	cmp	r3, #0
   45e38:	beq	45e50 <GetDataSlab+0x1e48c>
   45e3c:	sub	r2, fp, #176	; 0xb0
   45e40:	ldr	r2, [r2, r0, lsl #2]
   45e44:	mla	ip, r2, r3, ip
   45e48:	mul	r2, r2, r3
   45e4c:	add	lr, lr, r2, lsl #1
   45e50:	ldr	r2, [fp, #24]
   45e54:	add	r3, r0, #1
   45e58:	add	r0, r0, #2
   45e5c:	cmp	r0, r2
   45e60:	blt	45dd4 <GetDataSlab+0x1e410>
   45e64:	b	45e78 <GetDataSlab+0x1e4b4>
   45e68:	ldr	r2, [sp, #32]
   45e6c:	ldr	r0, [r2, r0, lsl #2]
   45e70:	add	lr, lr, r0, lsl #1
   45e74:	add	ip, r0, ip
   45e78:	ldr	r0, [sp, #60]	; 0x3c
   45e7c:	ldr	r2, [sp, #40]	; 0x28
   45e80:	ldr	r4, [sp, #44]	; 0x2c
   45e84:	add	r0, r0, r2
   45e88:	ldr	r2, [sp, #56]	; 0x38
   45e8c:	add	sl, sl, r4
   45e90:	str	r0, [sp, #60]	; 0x3c
   45e94:	mov	r0, #0
   45e98:	cmp	sl, r2
   45e9c:	blt	45d7c <GetDataSlab+0x1e3b8>
   45ea0:	b	47ffc <GetDataSlab+0x20638>
   45ea4:	ldr	r0, [sp, #56]	; 0x38
   45ea8:	ldr	r1, [fp, #20]
   45eac:	sub	r2, fp, #96	; 0x60
   45eb0:	cmp	r0, #1
   45eb4:	blt	47ff8 <GetDataSlab+0x20634>
   45eb8:	ldr	r8, [fp, #12]
   45ebc:	ldr	r3, [sp, #52]	; 0x34
   45ec0:	ldr	r0, [sp, #44]	; 0x2c
   45ec4:	add	sl, r1, #4
   45ec8:	lsl	r5, r7, #1
   45ecc:	mov	ip, #0
   45ed0:	ldr	r6, [r8], #4
   45ed4:	mls	r0, r3, r7, r0
   45ed8:	sub	r0, r0, r6
   45edc:	str	r6, [sp, #44]	; 0x2c
   45ee0:	str	r0, [sp, #40]	; 0x28
   45ee4:	sub	r0, fp, #136	; 0x88
   45ee8:	orr	r1, r0, #4
   45eec:	orr	r0, r2, #4
   45ef0:	mov	r2, r3
   45ef4:	str	r0, [sp, #28]
   45ef8:	mla	r0, r3, r7, r6
   45efc:	str	r0, [sp, #32]
   45f00:	lsl	r0, r3, #3
   45f04:	str	r0, [sp, #36]	; 0x24
   45f08:	mov	r0, #0
   45f0c:	str	r0, [sp, #48]	; 0x30
   45f10:	ldr	r0, [sp, #44]	; 0x2c
   45f14:	cmp	r2, #1
   45f18:	blt	45f44 <GetDataSlab+0x1e580>
   45f1c:	ldr	r0, [sp, #44]	; 0x2c
   45f20:	ldr	r7, [sp, #52]	; 0x34
   45f24:	ldr	r6, [sp, #60]	; 0x3c
   45f28:	add	r0, r4, r0, lsl #1
   45f2c:	ldrh	r2, [r0], r5
   45f30:	subs	r7, r7, #1
   45f34:	stm	r6, {r2, ip}
   45f38:	add	r6, r6, #8
   45f3c:	bne	45f2c <GetDataSlab+0x1e568>
   45f40:	ldr	r0, [sp, #32]
   45f44:	ldr	r3, [sp, #40]	; 0x28
   45f48:	add	r2, r4, r3, lsl #1
   45f4c:	add	r4, r2, r0, lsl #1
   45f50:	add	r0, r0, r9
   45f54:	add	r9, r0, r3
   45f58:	ldr	r0, [fp, #24]
   45f5c:	sub	r3, fp, #176	; 0xb0
   45f60:	cmp	r0, #2
   45f64:	blt	4600c <GetDataSlab+0x1e648>
   45f68:	mov	r7, #0
   45f6c:	ldr	r2, [r1, r7, lsl #2]
   45f70:	mov	r0, r7
   45f74:	add	r2, r2, #1
   45f78:	str	r2, [r1, r7, lsl #2]
   45f7c:	ldr	r6, [sl, r7, lsl #2]
   45f80:	sdiv	r7, r2, r6
   45f84:	mls	r2, r7, r6, r2
   45f88:	cmp	r2, #0
   45f8c:	bne	45ffc <GetDataSlab+0x1e638>
   45f90:	add	r2, r3, r0, lsl #2
   45f94:	str	ip, [r1, r0, lsl #2]
   45f98:	ldr	r6, [r2, #4]
   45f9c:	sdiv	r2, r9, r6
   45fa0:	mls	r7, r2, r6, r9
   45fa4:	cmp	r7, #0
   45fa8:	beq	45fc8 <GetDataSlab+0x1e604>
   45fac:	ldr	r2, [r3, r0, lsl #2]
   45fb0:	ldr	lr, [r8, r0, lsl #2]
   45fb4:	sub	r6, r6, r7
   45fb8:	sub	r3, fp, #176	; 0xb0
   45fbc:	mla	r2, lr, r2, r6
   45fc0:	add	r9, r2, r9
   45fc4:	b	45fe0 <GetDataSlab+0x1e61c>
   45fc8:	ldr	r6, [r8, r0, lsl #2]
   45fcc:	cmp	r6, #0
   45fd0:	beq	45fe4 <GetDataSlab+0x1e620>
   45fd4:	ldr	r2, [r3, r0, lsl #2]
   45fd8:	mla	r9, r2, r6, r9
   45fdc:	mul	r2, r2, r6
   45fe0:	add	r4, r4, r2, lsl #1
   45fe4:	ldr	r2, [fp, #24]
   45fe8:	add	r7, r0, #1
   45fec:	add	r0, r0, #2
   45ff0:	cmp	r0, r2
   45ff4:	blt	45f6c <GetDataSlab+0x1e5a8>
   45ff8:	b	4600c <GetDataSlab+0x1e648>
   45ffc:	ldr	r2, [sp, #28]
   46000:	ldr	r0, [r2, r0, lsl #2]
   46004:	add	r4, r4, r0, lsl #1
   46008:	add	r9, r0, r9
   4600c:	ldr	r0, [sp, #60]	; 0x3c
   46010:	ldr	r2, [sp, #36]	; 0x24
   46014:	ldr	r7, [sp, #48]	; 0x30
   46018:	ldr	r3, [sp, #56]	; 0x38
   4601c:	add	r0, r0, r2
   46020:	ldr	r2, [sp, #52]	; 0x34
   46024:	str	r0, [sp, #60]	; 0x3c
   46028:	mov	r0, #0
   4602c:	add	r7, r7, r2
   46030:	cmp	r7, r3
   46034:	str	r7, [sp, #48]	; 0x30
   46038:	blt	45f10 <GetDataSlab+0x1e54c>
   4603c:	b	47ffc <GetDataSlab+0x20638>
   46040:	ldr	r0, [sp, #56]	; 0x38
   46044:	sub	r1, fp, #96	; 0x60
   46048:	cmp	r0, #1
   4604c:	ldr	r0, [fp, #12]
   46050:	blt	47ff8 <GetDataSlab+0x20634>
   46054:	add	r9, r0, #4
   46058:	ldr	r0, [fp, #20]
   4605c:	ldr	r2, [sp, #44]	; 0x2c
   46060:	ldr	r7, [sp, #40]	; 0x28
   46064:	lsl	r8, r6, #2
   46068:	mov	lr, #0
   4606c:	add	ip, r0, #4
   46070:	sub	r0, fp, #136	; 0x88
   46074:	mls	r7, r2, r6, r7
   46078:	orr	r5, r0, #4
   4607c:	orr	r0, r1, #4
   46080:	str	r7, [sp, #48]	; 0x30
   46084:	str	r0, [sp, #32]
   46088:	mul	r0, r2, r6
   4608c:	str	r0, [sp, #36]	; 0x24
   46090:	lsl	r0, r2, #3
   46094:	str	r0, [sp, #40]	; 0x28
   46098:	mov	r0, #0
   4609c:	str	r0, [sp, #52]	; 0x34
   460a0:	ldr	r0, [fp, #12]
   460a4:	cmp	r2, #1
   460a8:	ldr	r0, [r0]
   460ac:	blt	460f0 <GetDataSlab+0x1e72c>
   460b0:	ldr	r1, [sp, #36]	; 0x24
   460b4:	ldr	lr, [sp, #60]	; 0x3c
   460b8:	add	r4, sl, r0, lsl #2
   460bc:	add	r3, r1, r3
   460c0:	add	r1, sl, r1, lsl #2
   460c4:	ldr	r6, [r4], r8
   460c8:	subs	r2, r2, #1
   460cc:	asr	r7, r6, #31
   460d0:	strd	r6, [lr]
   460d4:	add	lr, lr, #8
   460d8:	bne	460c4 <GetDataSlab+0x1e700>
   460dc:	mov	sl, r1
   460e0:	add	r2, r3, r0
   460e4:	sub	r1, fp, #176	; 0xb0
   460e8:	mov	lr, #0
   460ec:	b	460f8 <GetDataSlab+0x1e734>
   460f0:	add	r2, r0, r3
   460f4:	sub	r1, fp, #176	; 0xb0
   460f8:	ldr	r3, [sp, #48]	; 0x30
   460fc:	sub	r0, r3, r0
   46100:	add	sl, sl, r3, lsl #2
   46104:	add	r3, r2, r0
   46108:	ldr	r0, [fp, #24]
   4610c:	cmp	r0, #2
   46110:	blt	461b4 <GetDataSlab+0x1e7f0>
   46114:	mov	r2, #0
   46118:	mov	r0, r2
   4611c:	ldr	r2, [r5, r2, lsl #2]
   46120:	add	r2, r2, #1
   46124:	str	r2, [r5, r0, lsl #2]
   46128:	ldr	r7, [ip, r0, lsl #2]
   4612c:	sdiv	r6, r2, r7
   46130:	mls	r2, r6, r7, r2
   46134:	cmp	r2, #0
   46138:	bne	461a4 <GetDataSlab+0x1e7e0>
   4613c:	add	r2, r1, r0, lsl #2
   46140:	str	lr, [r5, r0, lsl #2]
   46144:	ldr	r2, [r2, #4]
   46148:	sdiv	r7, r3, r2
   4614c:	mls	r7, r7, r2, r3
   46150:	cmp	r7, #0
   46154:	beq	46170 <GetDataSlab+0x1e7ac>
   46158:	ldr	r6, [r1, r0, lsl #2]
   4615c:	ldr	r4, [r9, r0, lsl #2]
   46160:	sub	r2, r2, r7
   46164:	mla	r2, r4, r6, r2
   46168:	add	r3, r2, r3
   4616c:	b	46188 <GetDataSlab+0x1e7c4>
   46170:	ldr	r2, [r9, r0, lsl #2]
   46174:	cmp	r2, #0
   46178:	beq	4618c <GetDataSlab+0x1e7c8>
   4617c:	ldr	r7, [r1, r0, lsl #2]
   46180:	mla	r3, r7, r2, r3
   46184:	mul	r2, r7, r2
   46188:	add	sl, sl, r2, lsl #2
   4618c:	ldr	r7, [fp, #24]
   46190:	add	r2, r0, #1
   46194:	add	r0, r0, #2
   46198:	cmp	r0, r7
   4619c:	blt	46118 <GetDataSlab+0x1e754>
   461a0:	b	461b4 <GetDataSlab+0x1e7f0>
   461a4:	ldr	r1, [sp, #32]
   461a8:	ldr	r0, [r1, r0, lsl #2]
   461ac:	add	sl, sl, r0, lsl #2
   461b0:	add	r3, r0, r3
   461b4:	ldr	r0, [sp, #60]	; 0x3c
   461b8:	ldr	r1, [sp, #40]	; 0x28
   461bc:	ldr	r2, [sp, #44]	; 0x2c
   461c0:	ldr	r4, [sp, #52]	; 0x34
   461c4:	add	r0, r0, r1
   461c8:	ldr	r1, [sp, #56]	; 0x38
   461cc:	add	r4, r4, r2
   461d0:	str	r0, [sp, #60]	; 0x3c
   461d4:	mov	r0, #0
   461d8:	str	r4, [sp, #52]	; 0x34
   461dc:	cmp	r4, r1
   461e0:	blt	460a0 <GetDataSlab+0x1e6dc>
   461e4:	b	47ffc <GetDataSlab+0x20638>
   461e8:	ldr	r0, [sp, #56]	; 0x38
   461ec:	sub	r1, fp, #96	; 0x60
   461f0:	cmp	r0, #1
   461f4:	ldr	r0, [fp, #12]
   461f8:	blt	47ff8 <GetDataSlab+0x20634>
   461fc:	ldr	r2, [sp, #44]	; 0x2c
   46200:	ldr	r7, [sp, #40]	; 0x28
   46204:	add	ip, r0, #4
   46208:	sub	r0, fp, #136	; 0x88
   4620c:	add	sl, sl, #4
   46210:	mov	r9, #0
   46214:	mov	r8, #0
   46218:	orr	r5, r0, #4
   4621c:	orr	r0, r1, #4
   46220:	lsl	r1, r4, #2
   46224:	str	r0, [sp, #36]	; 0x24
   46228:	mul	r0, r2, r4
   4622c:	mls	r7, r2, r4, r7
   46230:	str	r0, [sp, #40]	; 0x28
   46234:	lsl	r0, r2, #3
   46238:	str	r7, [sp, #52]	; 0x34
   4623c:	str	r0, [sp, #48]	; 0x30
   46240:	ldr	r0, [fp, #12]
   46244:	cmp	r2, #1
   46248:	ldr	r0, [r0]
   4624c:	blt	46284 <GetDataSlab+0x1e8c0>
   46250:	ldr	r4, [sp, #40]	; 0x28
   46254:	add	r3, r4, r3
   46258:	add	r7, lr, r4, lsl #2
   4625c:	add	r4, lr, r0, lsl #2
   46260:	ldr	lr, [sp, #60]	; 0x3c
   46264:	ldr	r6, [r4], r1
   46268:	subs	r2, r2, #1
   4626c:	stm	lr, {r6, r9}
   46270:	add	lr, lr, #8
   46274:	bne	46264 <GetDataSlab+0x1e8a0>
   46278:	add	r2, r3, r0
   4627c:	mov	lr, r7
   46280:	b	46288 <GetDataSlab+0x1e8c4>
   46284:	add	r2, r0, r3
   46288:	ldr	r3, [sp, #52]	; 0x34
   4628c:	sub	r0, r3, r0
   46290:	add	lr, lr, r3, lsl #2
   46294:	add	r3, r2, r0
   46298:	ldr	r0, [fp, #24]
   4629c:	cmp	r0, #2
   462a0:	blt	4634c <GetDataSlab+0x1e988>
   462a4:	mov	r2, #0
   462a8:	mov	r0, r2
   462ac:	ldr	r2, [r5, r2, lsl #2]
   462b0:	add	r2, r2, #1
   462b4:	str	r2, [r5, r0, lsl #2]
   462b8:	ldr	r6, [sl, r0, lsl #2]
   462bc:	sdiv	r7, r2, r6
   462c0:	mls	r2, r7, r6, r2
   462c4:	cmp	r2, #0
   462c8:	bne	4633c <GetDataSlab+0x1e978>
   462cc:	sub	r4, fp, #176	; 0xb0
   462d0:	str	r9, [r5, r0, lsl #2]
   462d4:	add	r2, r4, r0, lsl #2
   462d8:	ldr	r2, [r2, #4]
   462dc:	sdiv	r7, r3, r2
   462e0:	mls	r6, r7, r2, r3
   462e4:	cmp	r6, #0
   462e8:	beq	46304 <GetDataSlab+0x1e940>
   462ec:	ldr	r7, [r4, r0, lsl #2]
   462f0:	ldr	r4, [ip, r0, lsl #2]
   462f4:	sub	r2, r2, r6
   462f8:	mla	r2, r4, r7, r2
   462fc:	add	r3, r2, r3
   46300:	b	46320 <GetDataSlab+0x1e95c>
   46304:	ldr	r2, [ip, r0, lsl #2]
   46308:	cmp	r2, #0
   4630c:	beq	46324 <GetDataSlab+0x1e960>
   46310:	sub	r4, fp, #176	; 0xb0
   46314:	ldr	r4, [r4, r0, lsl #2]
   46318:	mla	r3, r4, r2, r3
   4631c:	mul	r2, r4, r2
   46320:	add	lr, lr, r2, lsl #2
   46324:	ldr	r4, [fp, #24]
   46328:	add	r2, r0, #1
   4632c:	add	r0, r0, #2
   46330:	cmp	r0, r4
   46334:	blt	462a8 <GetDataSlab+0x1e8e4>
   46338:	b	4634c <GetDataSlab+0x1e988>
   4633c:	ldr	r2, [sp, #36]	; 0x24
   46340:	ldr	r0, [r2, r0, lsl #2]
   46344:	add	lr, lr, r0, lsl #2
   46348:	add	r3, r0, r3
   4634c:	ldr	r0, [sp, #60]	; 0x3c
   46350:	ldr	r2, [sp, #48]	; 0x30
   46354:	ldr	r4, [sp, #56]	; 0x38
   46358:	add	r0, r0, r2
   4635c:	ldr	r2, [sp, #44]	; 0x2c
   46360:	str	r0, [sp, #60]	; 0x3c
   46364:	mov	r0, #0
   46368:	add	r8, r8, r2
   4636c:	cmp	r8, r4
   46370:	blt	46240 <GetDataSlab+0x1e87c>
   46374:	b	47ffc <GetDataSlab+0x20638>
   46378:	ldr	r0, [sp, #44]	; 0x2c
   4637c:	ldr	r1, [fp, #12]
   46380:	ldr	r2, [fp, #20]
   46384:	ldr	sl, [sp, #40]	; 0x28
   46388:	cmp	r0, #1
   4638c:	blt	47ff8 <GetDataSlab+0x20634>
   46390:	ldr	r0, [sp, #36]	; 0x24
   46394:	ldr	r9, [r1], #4
   46398:	lsl	r8, r3, #2
   4639c:	mls	r0, sl, r3, r0
   463a0:	str	r1, [sp, #56]	; 0x38
   463a4:	str	r9, [sp, #28]
   463a8:	sub	r0, r0, r9
   463ac:	str	r0, [sp, #36]	; 0x24
   463b0:	add	r0, r2, #4
   463b4:	str	r0, [sp, #52]	; 0x34
   463b8:	sub	r0, fp, #136	; 0x88
   463bc:	orr	r7, r0, #4
   463c0:	sub	r0, fp, #96	; 0x60
   463c4:	orr	r0, r0, #4
   463c8:	str	r0, [sp, #20]
   463cc:	mla	r0, sl, r3, r9
   463d0:	str	r0, [sp, #24]
   463d4:	lsl	r0, sl, #3
   463d8:	str	r0, [sp, #32]
   463dc:	mov	r0, #0
   463e0:	str	r0, [sp, #48]	; 0x30
   463e4:	cmp	sl, #1
   463e8:	mov	r0, r9
   463ec:	blt	4641c <GetDataSlab+0x1ea58>
   463f0:	add	r6, r5, r9, lsl #2
   463f4:	ldr	r9, [sp, #60]	; 0x3c
   463f8:	ldr	r0, [r6], r8
   463fc:	bl	585b8 <__aeabi_f2ulz>
   46400:	strd	r0, [r9]
   46404:	subs	sl, sl, #1
   46408:	add	r9, r9, #8
   4640c:	bne	463f8 <GetDataSlab+0x1ea34>
   46410:	ldr	r0, [sp, #24]
   46414:	ldr	sl, [sp, #40]	; 0x28
   46418:	ldr	r9, [sp, #28]
   4641c:	ldr	r2, [sp, #36]	; 0x24
   46420:	ldr	ip, [sp, #60]	; 0x3c
   46424:	sub	lr, fp, #176	; 0xb0
   46428:	add	r1, r5, r2, lsl #2
   4642c:	add	r5, r1, r0, lsl #2
   46430:	add	r0, r0, r4
   46434:	add	r4, r0, r2
   46438:	ldr	r0, [fp, #24]
   4643c:	cmp	r0, #2
   46440:	blt	464f4 <GetDataSlab+0x1eb30>
   46444:	mov	r1, #0
   46448:	mov	r0, r1
   4644c:	ldr	r1, [r7, r1, lsl #2]
   46450:	ldr	r2, [sp, #52]	; 0x34
   46454:	add	r1, r1, #1
   46458:	str	r1, [r7, r0, lsl #2]
   4645c:	ldr	r2, [r2, r0, lsl #2]
   46460:	sdiv	r3, r1, r2
   46464:	mls	r1, r3, r2, r1
   46468:	cmp	r1, #0
   4646c:	bne	464e4 <GetDataSlab+0x1eb20>
   46470:	mov	r1, #0
   46474:	str	r1, [r7, r0, lsl #2]
   46478:	add	r1, lr, r0, lsl #2
   4647c:	ldr	r1, [r1, #4]
   46480:	sdiv	r2, r4, r1
   46484:	mls	r2, r2, r1, r4
   46488:	cmp	r2, #0
   4648c:	beq	464ac <GetDataSlab+0x1eae8>
   46490:	ldr	r6, [sp, #56]	; 0x38
   46494:	ldr	r3, [lr, r0, lsl #2]
   46498:	sub	r1, r1, r2
   4649c:	ldr	r6, [r6, r0, lsl #2]
   464a0:	mla	r1, r6, r3, r1
   464a4:	add	r4, r1, r4
   464a8:	b	464c8 <GetDataSlab+0x1eb04>
   464ac:	ldr	r1, [sp, #56]	; 0x38
   464b0:	ldr	r1, [r1, r0, lsl #2]
   464b4:	cmp	r1, #0
   464b8:	beq	464cc <GetDataSlab+0x1eb08>
   464bc:	ldr	r2, [lr, r0, lsl #2]
   464c0:	mla	r4, r2, r1, r4
   464c4:	mul	r1, r2, r1
   464c8:	add	r5, r5, r1, lsl #2
   464cc:	ldr	r2, [fp, #24]
   464d0:	add	r1, r0, #1
   464d4:	add	r0, r0, #2
   464d8:	cmp	r0, r2
   464dc:	blt	46448 <GetDataSlab+0x1ea84>
   464e0:	b	464f4 <GetDataSlab+0x1eb30>
   464e4:	ldr	r1, [sp, #20]
   464e8:	ldr	r0, [r1, r0, lsl #2]
   464ec:	add	r5, r5, r0, lsl #2
   464f0:	add	r4, r0, r4
   464f4:	ldr	r2, [sp, #48]	; 0x30
   464f8:	ldr	r0, [sp, #32]
   464fc:	ldr	r1, [sp, #44]	; 0x2c
   46500:	add	r2, r2, sl
   46504:	add	ip, ip, r0
   46508:	mov	r0, #0
   4650c:	cmp	r2, r1
   46510:	str	ip, [sp, #60]	; 0x3c
   46514:	str	r2, [sp, #48]	; 0x30
   46518:	blt	463e4 <GetDataSlab+0x1ea20>
   4651c:	b	47ffc <GetDataSlab+0x20638>
   46520:	ldr	r0, [sp, #44]	; 0x2c
   46524:	ldr	r1, [fp, #12]
   46528:	ldr	r2, [fp, #20]
   4652c:	ldr	sl, [sp, #40]	; 0x28
   46530:	cmp	r0, #1
   46534:	blt	47ff8 <GetDataSlab+0x20634>
   46538:	ldr	r0, [sp, #36]	; 0x24
   4653c:	ldr	r9, [r1], #4
   46540:	lsl	r8, r3, #3
   46544:	mls	r0, sl, r3, r0
   46548:	str	r1, [sp, #56]	; 0x38
   4654c:	str	r9, [sp, #28]
   46550:	sub	r0, r0, r9
   46554:	str	r0, [sp, #36]	; 0x24
   46558:	add	r0, r2, #4
   4655c:	str	r0, [sp, #52]	; 0x34
   46560:	sub	r0, fp, #136	; 0x88
   46564:	orr	r7, r0, #4
   46568:	sub	r0, fp, #96	; 0x60
   4656c:	orr	r0, r0, #4
   46570:	str	r0, [sp, #20]
   46574:	mla	r0, sl, r3, r9
   46578:	str	r0, [sp, #24]
   4657c:	lsl	r0, sl, #3
   46580:	str	r0, [sp, #32]
   46584:	mov	r0, #0
   46588:	str	r0, [sp, #48]	; 0x30
   4658c:	cmp	sl, #1
   46590:	mov	r0, r9
   46594:	blt	465cc <GetDataSlab+0x1ec08>
   46598:	add	r6, r5, r9, lsl #3
   4659c:	ldr	r9, [sp, #60]	; 0x3c
   465a0:	vldr	d16, [r6]
   465a4:	vmov	r0, r1, d16
   465a8:	bl	585f8 <__aeabi_d2ulz>
   465ac:	strd	r0, [r9]
   465b0:	add	r6, r6, r8
   465b4:	subs	sl, sl, #1
   465b8:	add	r9, r9, #8
   465bc:	bne	465a0 <GetDataSlab+0x1ebdc>
   465c0:	ldr	r0, [sp, #24]
   465c4:	ldr	sl, [sp, #40]	; 0x28
   465c8:	ldr	r9, [sp, #28]
   465cc:	ldr	r2, [sp, #36]	; 0x24
   465d0:	ldr	ip, [sp, #60]	; 0x3c
   465d4:	sub	lr, fp, #176	; 0xb0
   465d8:	add	r1, r5, r2, lsl #3
   465dc:	add	r5, r1, r0, lsl #3
   465e0:	add	r0, r0, r4
   465e4:	add	r4, r0, r2
   465e8:	ldr	r0, [fp, #24]
   465ec:	cmp	r0, #2
   465f0:	blt	466a4 <GetDataSlab+0x1ece0>
   465f4:	mov	r1, #0
   465f8:	mov	r0, r1
   465fc:	ldr	r1, [r7, r1, lsl #2]
   46600:	ldr	r2, [sp, #52]	; 0x34
   46604:	add	r1, r1, #1
   46608:	str	r1, [r7, r0, lsl #2]
   4660c:	ldr	r2, [r2, r0, lsl #2]
   46610:	sdiv	r3, r1, r2
   46614:	mls	r1, r3, r2, r1
   46618:	cmp	r1, #0
   4661c:	bne	46694 <GetDataSlab+0x1ecd0>
   46620:	mov	r1, #0
   46624:	str	r1, [r7, r0, lsl #2]
   46628:	add	r1, lr, r0, lsl #2
   4662c:	ldr	r1, [r1, #4]
   46630:	sdiv	r2, r4, r1
   46634:	mls	r2, r2, r1, r4
   46638:	cmp	r2, #0
   4663c:	beq	4665c <GetDataSlab+0x1ec98>
   46640:	ldr	r6, [sp, #56]	; 0x38
   46644:	ldr	r3, [lr, r0, lsl #2]
   46648:	sub	r1, r1, r2
   4664c:	ldr	r6, [r6, r0, lsl #2]
   46650:	mla	r1, r6, r3, r1
   46654:	add	r4, r1, r4
   46658:	b	46678 <GetDataSlab+0x1ecb4>
   4665c:	ldr	r1, [sp, #56]	; 0x38
   46660:	ldr	r1, [r1, r0, lsl #2]
   46664:	cmp	r1, #0
   46668:	beq	4667c <GetDataSlab+0x1ecb8>
   4666c:	ldr	r2, [lr, r0, lsl #2]
   46670:	mla	r4, r2, r1, r4
   46674:	mul	r1, r2, r1
   46678:	add	r5, r5, r1, lsl #3
   4667c:	ldr	r2, [fp, #24]
   46680:	add	r1, r0, #1
   46684:	add	r0, r0, #2
   46688:	cmp	r0, r2
   4668c:	blt	465f8 <GetDataSlab+0x1ec34>
   46690:	b	466a4 <GetDataSlab+0x1ece0>
   46694:	ldr	r1, [sp, #20]
   46698:	ldr	r0, [r1, r0, lsl #2]
   4669c:	add	r5, r5, r0, lsl #3
   466a0:	add	r4, r0, r4
   466a4:	ldr	r2, [sp, #48]	; 0x30
   466a8:	ldr	r0, [sp, #32]
   466ac:	ldr	r1, [sp, #44]	; 0x2c
   466b0:	add	r2, r2, sl
   466b4:	add	ip, ip, r0
   466b8:	mov	r0, #0
   466bc:	cmp	r2, r1
   466c0:	str	ip, [sp, #60]	; 0x3c
   466c4:	str	r2, [sp, #48]	; 0x30
   466c8:	blt	4658c <GetDataSlab+0x1ebc8>
   466cc:	b	47ffc <GetDataSlab+0x20638>
   466d0:	ldr	r0, [sp, #56]	; 0x38
   466d4:	ldr	ip, [fp, #12]
   466d8:	ldr	r8, [sp, #44]	; 0x2c
   466dc:	sub	r1, fp, #96	; 0x60
   466e0:	cmp	r0, #1
   466e4:	blt	46864 <GetDataSlab+0x1eea0>
   466e8:	ldr	r0, [sp, #28]
   466ec:	ldr	r3, [ip], #4
   466f0:	add	sl, sl, #4
   466f4:	lsl	r7, r2, #3
   466f8:	mov	r9, #0
   466fc:	mls	r0, r8, r2, r0
   46700:	str	r3, [sp, #36]	; 0x24
   46704:	sub	r0, r0, r3
   46708:	str	r0, [sp, #32]
   4670c:	sub	r0, fp, #136	; 0x88
   46710:	orr	r4, r0, #4
   46714:	orr	r0, r1, #4
   46718:	str	r0, [sp, #20]
   4671c:	mla	r0, r8, r2, r3
   46720:	str	r0, [sp, #24]
   46724:	lsl	r0, r8, #3
   46728:	str	r0, [sp, #28]
   4672c:	ldr	r0, [sp, #60]	; 0x3c
   46730:	str	r0, [sp, #52]	; 0x34
   46734:	ldr	r0, [sp, #36]	; 0x24
   46738:	cmp	r8, #1
   4673c:	blt	46778 <GetDataSlab+0x1edb4>
   46740:	ldr	r0, [sp, #36]	; 0x24
   46744:	add	r2, r5, r0, lsl #3
   46748:	mov	r0, r8
   4674c:	ldr	r8, [sp, #52]	; 0x34
   46750:	ldr	r3, [r2]
   46754:	ldr	r1, [r2, #4]
   46758:	add	r2, r2, r7
   4675c:	subs	r0, r0, #1
   46760:	str	r3, [r8]
   46764:	str	r1, [r8, #4]
   46768:	add	r8, r8, #8
   4676c:	bne	46750 <GetDataSlab+0x1ed8c>
   46770:	ldr	r0, [sp, #24]
   46774:	ldr	r8, [sp, #44]	; 0x2c
   46778:	ldr	r2, [sp, #32]
   4677c:	add	r1, r5, r2, lsl #3
   46780:	add	r5, r1, r0, lsl #3
   46784:	add	r0, r0, lr
   46788:	add	lr, r0, r2
   4678c:	ldr	r0, [fp, #24]
   46790:	cmp	r0, #2
   46794:	blt	46844 <GetDataSlab+0x1ee80>
   46798:	mov	r0, #0
   4679c:	mov	r2, r0
   467a0:	ldr	r0, [r4, r0, lsl #2]
   467a4:	add	r0, r0, #1
   467a8:	str	r0, [r4, r2, lsl #2]
   467ac:	ldr	r1, [sl, r2, lsl #2]
   467b0:	sdiv	r3, r0, r1
   467b4:	mls	r0, r3, r1, r0
   467b8:	cmp	r0, #0
   467bc:	bne	46834 <GetDataSlab+0x1ee70>
   467c0:	mov	r0, #0
   467c4:	sub	r6, fp, #176	; 0xb0
   467c8:	str	r0, [r4, r2, lsl #2]
   467cc:	add	r0, r6, r2, lsl #2
   467d0:	ldr	r0, [r0, #4]
   467d4:	sdiv	r1, lr, r0
   467d8:	mls	r3, r1, r0, lr
   467dc:	cmp	r3, #0
   467e0:	beq	467fc <GetDataSlab+0x1ee38>
   467e4:	ldr	r1, [r6, r2, lsl #2]
   467e8:	ldr	r6, [ip, r2, lsl #2]
   467ec:	sub	r0, r0, r3
   467f0:	mla	r0, r6, r1, r0
   467f4:	add	lr, r0, lr
   467f8:	b	46818 <GetDataSlab+0x1ee54>
   467fc:	ldr	r0, [ip, r2, lsl #2]
   46800:	cmp	r0, #0
   46804:	beq	4681c <GetDataSlab+0x1ee58>
   46808:	sub	r1, fp, #176	; 0xb0
   4680c:	ldr	r1, [r1, r2, lsl #2]
   46810:	mla	lr, r1, r0, lr
   46814:	mul	r0, r1, r0
   46818:	add	r5, r5, r0, lsl #3
   4681c:	add	r0, r2, #1
   46820:	add	r1, r2, #2
   46824:	ldr	r2, [fp, #24]
   46828:	cmp	r1, r2
   4682c:	blt	4679c <GetDataSlab+0x1edd8>
   46830:	b	46844 <GetDataSlab+0x1ee80>
   46834:	ldr	r0, [sp, #20]
   46838:	ldr	r0, [r0, r2, lsl #2]
   4683c:	add	r5, r5, r0, lsl #3
   46840:	add	lr, r0, lr
   46844:	ldr	r0, [sp, #28]
   46848:	ldr	r1, [sp, #52]	; 0x34
   4684c:	add	r9, r9, r8
   46850:	add	r1, r1, r0
   46854:	ldr	r0, [sp, #56]	; 0x38
   46858:	str	r1, [sp, #52]	; 0x34
   4685c:	cmp	r9, r0
   46860:	blt	46734 <GetDataSlab+0x1ed70>
   46864:	ldr	r6, [sp, #40]	; 0x28
   46868:	mov	r0, #0
   4686c:	ldr	r1, [fp, #16]
   46870:	cmp	r6, #13
   46874:	bne	47ffc <GetDataSlab+0x20638>
   46878:	ldr	r0, [r1]
   4687c:	ldr	sl, [fp, #20]
   46880:	mov	r2, #0
   46884:	sub	r5, fp, #176	; 0xb0
   46888:	sub	r6, fp, #96	; 0x60
   4688c:	str	r0, [sp, #28]
   46890:	sub	r0, r0, #1
   46894:	str	r0, [fp, #-96]	; 0xffffffa0
   46898:	ldr	r0, [fp, #8]
   4689c:	ldr	r0, [r0]
   468a0:	str	r0, [fp, #-176]	; 0xffffff50
   468a4:	str	r0, [sp, #36]	; 0x24
   468a8:	ldr	r0, [fp, #24]
   468ac:	ldr	r1, [sl]
   468b0:	cmp	r0, #2
   468b4:	str	r1, [sp, #44]	; 0x2c
   468b8:	str	r1, [sp, #52]	; 0x34
   468bc:	blt	46a04 <GetDataSlab+0x1f040>
   468c0:	ldr	r0, [fp, #8]
   468c4:	ldr	r3, [sp, #36]	; 0x24
   468c8:	mov	r4, #1
   468cc:	mov	lr, #0
   468d0:	mvn	ip, #15
   468d4:	mov	r2, #0
   468d8:	sub	r7, r0, #4
   468dc:	sub	r9, r0, #12
   468e0:	ldr	r0, [sp, #44]	; 0x2c
   468e4:	mov	r8, r3
   468e8:	str	r0, [sp, #52]	; 0x34
   468ec:	ldr	r1, [fp, #16]
   468f0:	add	lr, lr, #1
   468f4:	cmp	lr, #4
   468f8:	ldr	r1, [r1, r4, lsl #2]
   468fc:	str	r3, [r5, r4, lsl #2]
   46900:	sub	r1, r1, #1
   46904:	str	r1, [r6, r4, lsl #2]
   46908:	ldr	r6, [fp, #8]
   4690c:	ldr	r6, [r6, r4, lsl #2]
   46910:	str	r6, [sp, #56]	; 0x38
   46914:	bcs	46920 <GetDataSlab+0x1ef5c>
   46918:	mov	r5, r4
   4691c:	b	469a8 <GetDataSlab+0x1efe4>
   46920:	vmov.i32	q9, #1	; 0x00000001
   46924:	vmov.i32	q10, #1	; 0x00000001
   46928:	vmov.i32	q8, #1	; 0x00000001
   4692c:	vmov.32	d23[1], r6
   46930:	bic	r6, lr, #3
   46934:	bic	sl, r4, #3
   46938:	vmov.32	d18[0], r3
   4693c:	vmov.32	d20[0], r1
   46940:	sub	r5, r4, r6
   46944:	mov	r1, r9
   46948:	vorr	d16, d18, d18
   4694c:	vmov.i32	q9, #1	; 0x00000001
   46950:	vorr	d18, d20, d20
   46954:	vld1.32	{d20-d21}, [r1], ip
   46958:	subs	sl, sl, #4
   4695c:	vrev64.32	q12, q10
   46960:	vext.8	q12, q12, q12, #8
   46964:	vext.8	q11, q11, q12, #12
   46968:	vmul.i32	q9, q9, q12
   4696c:	vmul.i32	q8, q11, q8
   46970:	vorr	q11, q12, q12
   46974:	bne	46954 <GetDataSlab+0x1ef90>
   46978:	vext.8	q11, q9, q8, #8
   4697c:	vext.8	q12, q8, q8, #8
   46980:	ldr	sl, [fp, #20]
   46984:	cmp	lr, r6
   46988:	vmul.i32	q0, q9, q11
   4698c:	vmul.i32	q1, q8, q12
   46990:	vmul.i32	q8, q0, d0[1]
   46994:	vmul.i32	q9, q1, d2[1]
   46998:	vmov.32	r1, d16[0]
   4699c:	vmov.32	r3, d18[0]
   469a0:	beq	469bc <GetDataSlab+0x1eff8>
   469a4:	vmov.32	r6, d20[0]
   469a8:	mul	r3, r6, r3
   469ac:	ldr	r6, [r7, r5, lsl #2]
   469b0:	subs	r5, r5, #1
   469b4:	mul	r1, r1, r6
   469b8:	bne	469a8 <GetDataSlab+0x1efe4>
   469bc:	sub	r6, fp, #96	; 0x60
   469c0:	sub	r5, fp, #176	; 0xb0
   469c4:	ldr	r0, [sp, #52]	; 0x34
   469c8:	add	r9, r9, #4
   469cc:	str	r1, [r6, r4, lsl #2]
   469d0:	ldr	r1, [fp, #12]
   469d4:	str	r3, [r5, r4, lsl #2]
   469d8:	ldr	r1, [r1, r4, lsl #2]
   469dc:	mla	r2, r1, r8, r2
   469e0:	ldr	r1, [sl, r4, lsl #2]
   469e4:	mov	r8, r3
   469e8:	ldr	r3, [sp, #56]	; 0x38
   469ec:	add	r4, r4, #1
   469f0:	mul	r0, r1, r0
   469f4:	ldr	r1, [fp, #24]
   469f8:	str	r0, [sp, #52]	; 0x34
   469fc:	cmp	r4, r1
   46a00:	bne	468ec <GetDataSlab+0x1ef28>
   46a04:	ldr	r0, [sp, #48]	; 0x30
   46a08:	ldr	r6, [sp, #28]
   46a0c:	add	r9, r0, r2, lsl #3
   46a10:	cmp	r6, #1
   46a14:	bne	47900 <GetDataSlab+0x1ff3c>
   46a18:	ldr	r0, [sp, #52]	; 0x34
   46a1c:	ldr	lr, [fp, #12]
   46a20:	cmp	r0, #1
   46a24:	blt	47ff8 <GetDataSlab+0x20634>
   46a28:	mov	r1, lr
   46a2c:	ldr	r8, [sp, #60]	; 0x3c
   46a30:	add	lr, sl, #4
   46a34:	mov	r6, #0
   46a38:	mov	r5, #0
   46a3c:	ldr	r0, [r1], #4
   46a40:	str	r1, [sp, #56]	; 0x38
   46a44:	ldr	r1, [sp, #44]	; 0x2c
   46a48:	str	r0, [sp, #32]
   46a4c:	add	r0, r1, r0
   46a50:	str	r0, [sp, #28]
   46a54:	sub	r0, fp, #136	; 0x88
   46a58:	orr	r7, r0, #4
   46a5c:	sub	r0, fp, #96	; 0x60
   46a60:	orr	r0, r0, #4
   46a64:	str	r0, [sp, #20]
   46a68:	bic	r0, r1, #1
   46a6c:	str	r0, [sp, #24]
   46a70:	lsl	r0, r1, #3
   46a74:	str	r0, [sp, #40]	; 0x28
   46a78:	mov	r0, #0
   46a7c:	str	r0, [sp, #48]	; 0x30
   46a80:	cmp	r1, #1
   46a84:	blt	46b28 <GetDataSlab+0x1f164>
   46a88:	ldr	r0, [sp, #32]
   46a8c:	mov	r1, #0
   46a90:	add	r4, r9, r0, lsl #3
   46a94:	beq	46af8 <GetDataSlab+0x1f134>
   46a98:	ldr	r0, [sp, #60]	; 0x3c
   46a9c:	ldr	r3, [sp, #40]	; 0x28
   46aa0:	mla	r0, r3, r5, r0
   46aa4:	ldr	r3, [sp, #28]
   46aa8:	add	r3, r9, r3, lsl #3
   46aac:	cmp	r0, r3
   46ab0:	bcs	46acc <GetDataSlab+0x1f108>
   46ab4:	ldr	r0, [sp, #40]	; 0x28
   46ab8:	ldr	r3, [sp, #60]	; 0x3c
   46abc:	mla	r0, r0, r5, r0
   46ac0:	add	r0, r3, r0
   46ac4:	cmp	r0, r4
   46ac8:	bhi	46af8 <GetDataSlab+0x1f134>
   46acc:	ldr	r1, [sp, #24]
   46ad0:	mov	r3, r8
   46ad4:	mov	r0, r4
   46ad8:	vld1.64	{d16-d17}, [r0]!
   46adc:	subs	r1, r1, #2
   46ae0:	vst1.64	{d16-d17}, [r3]!
   46ae4:	bne	46ad8 <GetDataSlab+0x1f114>
   46ae8:	ldr	r0, [sp, #44]	; 0x2c
   46aec:	ldr	r1, [sp, #24]
   46af0:	cmp	r0, r1
   46af4:	beq	46b28 <GetDataSlab+0x1f164>
   46af8:	ldr	r0, [sp, #44]	; 0x2c
   46afc:	sub	r3, r0, r1
   46b00:	sub	r1, r6, r1, lsl #3
   46b04:	mov	r0, r4
   46b08:	mov	ip, r8
   46b0c:	subs	r3, r3, #1
   46b10:	ldr	sl, [r0, -r1]!
   46b14:	ldr	r0, [r0, #4]
   46b18:	str	sl, [ip, -r1]!
   46b1c:	sub	r1, r1, #8
   46b20:	str	r0, [ip, #4]
   46b24:	bne	46b04 <GetDataSlab+0x1f140>
   46b28:	ldr	r0, [sp, #36]	; 0x24
   46b2c:	mov	ip, r5
   46b30:	add	r9, r9, r0, lsl #3
   46b34:	add	r2, r2, r0
   46b38:	ldr	r0, [fp, #24]
   46b3c:	cmp	r0, #2
   46b40:	blt	46bf8 <GetDataSlab+0x1f234>
   46b44:	mov	r1, #0
   46b48:	mov	r5, #0
   46b4c:	mov	r0, r1
   46b50:	ldr	r1, [r7, r1, lsl #2]
   46b54:	add	r1, r1, #1
   46b58:	str	r1, [r7, r0, lsl #2]
   46b5c:	ldr	r3, [lr, r0, lsl #2]
   46b60:	sdiv	r4, r1, r3
   46b64:	mls	r1, r4, r3, r1
   46b68:	cmp	r1, #0
   46b6c:	bne	46be8 <GetDataSlab+0x1f224>
   46b70:	sub	r6, fp, #176	; 0xb0
   46b74:	str	r5, [r7, r0, lsl #2]
   46b78:	add	r1, r6, r0, lsl #2
   46b7c:	ldr	r1, [r1, #4]
   46b80:	sdiv	r3, r2, r1
   46b84:	mls	r3, r3, r1, r2
   46b88:	cmp	r3, #0
   46b8c:	beq	46bac <GetDataSlab+0x1f1e8>
   46b90:	ldr	r4, [r6, r0, lsl #2]
   46b94:	ldr	r6, [sp, #56]	; 0x38
   46b98:	sub	r1, r1, r3
   46b9c:	ldr	r6, [r6, r0, lsl #2]
   46ba0:	mla	r1, r6, r4, r1
   46ba4:	add	r2, r1, r2
   46ba8:	b	46bcc <GetDataSlab+0x1f208>
   46bac:	ldr	r1, [sp, #56]	; 0x38
   46bb0:	ldr	r1, [r1, r0, lsl #2]
   46bb4:	cmp	r1, #0
   46bb8:	beq	46bd0 <GetDataSlab+0x1f20c>
   46bbc:	sub	r3, fp, #176	; 0xb0
   46bc0:	ldr	r3, [r3, r0, lsl #2]
   46bc4:	mla	r2, r3, r1, r2
   46bc8:	mul	r1, r3, r1
   46bcc:	add	r9, r9, r1, lsl #3
   46bd0:	ldr	r3, [fp, #24]
   46bd4:	add	r1, r0, #1
   46bd8:	add	r0, r0, #2
   46bdc:	cmp	r0, r3
   46be0:	blt	46b4c <GetDataSlab+0x1f188>
   46be4:	b	46bf8 <GetDataSlab+0x1f234>
   46be8:	ldr	r1, [sp, #20]
   46bec:	ldr	r0, [r1, r0, lsl #2]
   46bf0:	add	r9, r9, r0, lsl #3
   46bf4:	add	r2, r0, r2
   46bf8:	ldr	r1, [sp, #44]	; 0x2c
   46bfc:	ldr	r4, [sp, #48]	; 0x30
   46c00:	ldr	r0, [sp, #40]	; 0x28
   46c04:	ldr	r3, [sp, #52]	; 0x34
   46c08:	mov	r5, ip
   46c0c:	mov	r6, #0
   46c10:	add	r5, ip, #1
   46c14:	add	r4, r4, r1
   46c18:	add	r8, r8, r0
   46c1c:	mov	r0, #0
   46c20:	cmp	r4, r3
   46c24:	str	r4, [sp, #48]	; 0x30
   46c28:	blt	46a80 <GetDataSlab+0x1f0bc>
   46c2c:	b	47ffc <GetDataSlab+0x20638>
   46c30:	ldr	r0, [sp, #44]	; 0x2c
   46c34:	ldr	r1, [fp, #12]
   46c38:	ldr	r9, [sp, #40]	; 0x28
   46c3c:	sub	r2, fp, #96	; 0x60
   46c40:	cmp	r0, #1
   46c44:	blt	47ff8 <GetDataSlab+0x20634>
   46c48:	ldr	r0, [sp, #36]	; 0x24
   46c4c:	ldr	lr, [r1], #4
   46c50:	lsl	r8, r3, #3
   46c54:	mls	r0, r9, r3, r0
   46c58:	str	r1, [sp, #56]	; 0x38
   46c5c:	str	lr, [sp, #28]
   46c60:	sub	r0, r0, lr
   46c64:	str	r0, [sp, #36]	; 0x24
   46c68:	ldr	r0, [fp, #20]
   46c6c:	add	r0, r0, #4
   46c70:	str	r0, [sp, #52]	; 0x34
   46c74:	sub	r0, fp, #136	; 0x88
   46c78:	orr	r7, r0, #4
   46c7c:	orr	r0, r2, #4
   46c80:	str	r0, [sp, #20]
   46c84:	mla	r0, r9, r3, lr
   46c88:	str	r0, [sp, #24]
   46c8c:	lsl	r0, r9, #3
   46c90:	str	r0, [sp, #32]
   46c94:	mov	r0, #0
   46c98:	str	r0, [sp, #48]	; 0x30
   46c9c:	cmp	r9, #1
   46ca0:	mov	r0, lr
   46ca4:	blt	46cd8 <GetDataSlab+0x1f314>
   46ca8:	ldr	r6, [sp, #60]	; 0x3c
   46cac:	add	r5, sl, lr, lsl #3
   46cb0:	ldrd	r0, [r5]
   46cb4:	bl	58298 <__aeabi_ul2d>
   46cb8:	strd	r0, [r6]
   46cbc:	add	r5, r5, r8
   46cc0:	subs	r9, r9, #1
   46cc4:	add	r6, r6, #8
   46cc8:	bne	46cb0 <GetDataSlab+0x1f2ec>
   46ccc:	ldr	r0, [sp, #24]
   46cd0:	ldr	r9, [sp, #40]	; 0x28
   46cd4:	ldr	lr, [sp, #28]
   46cd8:	ldr	r2, [sp, #36]	; 0x24
   46cdc:	ldr	r5, [sp, #60]	; 0x3c
   46ce0:	add	r1, sl, r2, lsl #3
   46ce4:	mov	ip, r5
   46ce8:	sub	r5, fp, #176	; 0xb0
   46cec:	add	sl, r1, r0, lsl #3
   46cf0:	add	r0, r0, r4
   46cf4:	add	r4, r0, r2
   46cf8:	ldr	r0, [fp, #24]
   46cfc:	cmp	r0, #2
   46d00:	blt	46db4 <GetDataSlab+0x1f3f0>
   46d04:	mov	r1, #0
   46d08:	mov	r0, r1
   46d0c:	ldr	r1, [r7, r1, lsl #2]
   46d10:	ldr	r2, [sp, #52]	; 0x34
   46d14:	add	r1, r1, #1
   46d18:	str	r1, [r7, r0, lsl #2]
   46d1c:	ldr	r2, [r2, r0, lsl #2]
   46d20:	sdiv	r3, r1, r2
   46d24:	mls	r1, r3, r2, r1
   46d28:	cmp	r1, #0
   46d2c:	bne	46da4 <GetDataSlab+0x1f3e0>
   46d30:	mov	r1, #0
   46d34:	str	r1, [r7, r0, lsl #2]
   46d38:	add	r1, r5, r0, lsl #2
   46d3c:	ldr	r1, [r1, #4]
   46d40:	sdiv	r2, r4, r1
   46d44:	mls	r2, r2, r1, r4
   46d48:	cmp	r2, #0
   46d4c:	beq	46d6c <GetDataSlab+0x1f3a8>
   46d50:	ldr	r6, [sp, #56]	; 0x38
   46d54:	ldr	r3, [r5, r0, lsl #2]
   46d58:	sub	r1, r1, r2
   46d5c:	ldr	r6, [r6, r0, lsl #2]
   46d60:	mla	r1, r6, r3, r1
   46d64:	add	r4, r1, r4
   46d68:	b	46d88 <GetDataSlab+0x1f3c4>
   46d6c:	ldr	r1, [sp, #56]	; 0x38
   46d70:	ldr	r1, [r1, r0, lsl #2]
   46d74:	cmp	r1, #0
   46d78:	beq	46d8c <GetDataSlab+0x1f3c8>
   46d7c:	ldr	r2, [r5, r0, lsl #2]
   46d80:	mla	r4, r2, r1, r4
   46d84:	mul	r1, r2, r1
   46d88:	add	sl, sl, r1, lsl #3
   46d8c:	ldr	r2, [fp, #24]
   46d90:	add	r1, r0, #1
   46d94:	add	r0, r0, #2
   46d98:	cmp	r0, r2
   46d9c:	blt	46d08 <GetDataSlab+0x1f344>
   46da0:	b	46db4 <GetDataSlab+0x1f3f0>
   46da4:	ldr	r1, [sp, #20]
   46da8:	ldr	r0, [r1, r0, lsl #2]
   46dac:	add	sl, sl, r0, lsl #3
   46db0:	add	r4, r0, r4
   46db4:	ldr	r2, [sp, #48]	; 0x30
   46db8:	ldr	r0, [sp, #32]
   46dbc:	ldr	r1, [sp, #44]	; 0x2c
   46dc0:	add	r2, r2, r9
   46dc4:	add	ip, ip, r0
   46dc8:	mov	r0, #0
   46dcc:	cmp	r2, r1
   46dd0:	str	ip, [sp, #60]	; 0x3c
   46dd4:	str	r2, [sp, #48]	; 0x30
   46dd8:	blt	46c9c <GetDataSlab+0x1f2d8>
   46ddc:	b	47ffc <GetDataSlab+0x20638>
   46de0:	ldr	r0, [sp, #56]	; 0x38
   46de4:	cmp	r0, #1
   46de8:	blt	2a430 <GetDataSlab+0x2a6c>
   46dec:	ldr	r0, [fp, #20]
   46df0:	ldr	lr, [fp, #16]
   46df4:	add	ip, r0, #4
   46df8:	sub	r0, fp, #136	; 0x88
   46dfc:	orr	r9, r0, #4
   46e00:	sub	r0, fp, #96	; 0x60
   46e04:	orr	r0, r0, #4
   46e08:	str	r0, [sp, #40]	; 0x28
   46e0c:	ldr	r0, [r8], #4
   46e10:	str	r0, [sp, #48]	; 0x30
   46e14:	mov	r0, #0
   46e18:	str	r0, [sp, #52]	; 0x34
   46e1c:	ldr	r1, [sp, #48]	; 0x30
   46e20:	cmp	r2, #1
   46e24:	add	r0, r1, r4
   46e28:	add	r3, sl, r1, lsl #3
   46e2c:	blt	46e80 <GetDataSlab+0x1f4bc>
   46e30:	ldr	r1, [sp, #60]	; 0x3c
   46e34:	ldr	r2, [sp, #52]	; 0x34
   46e38:	ldr	r6, [fp, #20]
   46e3c:	mov	r7, #0
   46e40:	add	r4, r1, r2
   46e44:	ldrb	r1, [r3]
   46e48:	strb	r1, [r4, r7]
   46e4c:	add	r7, r7, #1
   46e50:	ldr	r5, [lr]
   46e54:	ldr	r2, [r6]
   46e58:	add	r0, r5, r0
   46e5c:	add	r3, r3, r5, lsl #3
   46e60:	cmp	r7, r2
   46e64:	blt	46e44 <GetDataSlab+0x1f480>
   46e68:	ldr	r1, [fp, #12]
   46e6c:	sub	r6, fp, #176	; 0xb0
   46e70:	ldr	r4, [r1]
   46e74:	ldr	r1, [fp, #8]
   46e78:	ldr	r1, [r1]
   46e7c:	b	46e8c <GetDataSlab+0x1f4c8>
   46e80:	mov	r4, r1
   46e84:	ldr	r1, [sp, #44]	; 0x2c
   46e88:	sub	r6, fp, #176	; 0xb0
   46e8c:	str	r1, [sp, #44]	; 0x2c
   46e90:	mls	r1, r5, r2, r1
   46e94:	str	r4, [sp, #48]	; 0x30
   46e98:	sub	r1, r1, r4
   46e9c:	add	r4, r1, r0
   46ea0:	ldr	r0, [fp, #24]
   46ea4:	add	sl, r3, r1, lsl #3
   46ea8:	cmp	r0, #2
   46eac:	blt	46f5c <GetDataSlab+0x1f598>
   46eb0:	mov	r7, #0
   46eb4:	ldr	r1, [r9, r7, lsl #2]
   46eb8:	mov	r0, r7
   46ebc:	add	r1, r1, #1
   46ec0:	str	r1, [r9, r7, lsl #2]
   46ec4:	ldr	r3, [ip, r7, lsl #2]
   46ec8:	sdiv	r7, r1, r3
   46ecc:	mls	r1, r7, r3, r1
   46ed0:	cmp	r1, #0
   46ed4:	bne	46f4c <GetDataSlab+0x1f588>
   46ed8:	mov	r1, #0
   46edc:	str	r1, [r9, r0, lsl #2]
   46ee0:	add	r1, r6, r0, lsl #2
   46ee4:	ldr	r7, [r1, #4]
   46ee8:	sdiv	r1, r4, r7
   46eec:	mls	r1, r1, r7, r4
   46ef0:	cmp	r1, #0
   46ef4:	beq	46f18 <GetDataSlab+0x1f554>
   46ef8:	ldr	r3, [r6, r0, lsl #2]
   46efc:	ldr	lr, [r8, r0, lsl #2]
   46f00:	sub	r1, r7, r1
   46f04:	sub	r6, fp, #176	; 0xb0
   46f08:	mla	r1, lr, r3, r1
   46f0c:	ldr	lr, [fp, #16]
   46f10:	add	r4, r1, r4
   46f14:	b	46f30 <GetDataSlab+0x1f56c>
   46f18:	ldr	r1, [r8, r0, lsl #2]
   46f1c:	cmp	r1, #0
   46f20:	beq	46f34 <GetDataSlab+0x1f570>
   46f24:	ldr	r3, [r6, r0, lsl #2]
   46f28:	mla	r4, r3, r1, r4
   46f2c:	mul	r1, r3, r1
   46f30:	add	sl, sl, r1, lsl #3
   46f34:	ldr	r1, [fp, #24]
   46f38:	add	r7, r0, #1
   46f3c:	add	r0, r0, #2
   46f40:	cmp	r0, r1
   46f44:	blt	46eb4 <GetDataSlab+0x1f4f0>
   46f48:	b	46f5c <GetDataSlab+0x1f598>
   46f4c:	ldr	r1, [sp, #40]	; 0x28
   46f50:	ldr	r0, [r1, r0, lsl #2]
   46f54:	add	sl, sl, r0, lsl #3
   46f58:	add	r4, r0, r4
   46f5c:	ldr	r3, [sp, #52]	; 0x34
   46f60:	ldr	r1, [sp, #56]	; 0x38
   46f64:	mov	r0, #0
   46f68:	add	r3, r2, r3
   46f6c:	cmp	r3, r1
   46f70:	str	r3, [sp, #52]	; 0x34
   46f74:	blt	46e1c <GetDataSlab+0x1f458>
   46f78:	b	47ffc <GetDataSlab+0x20638>
   46f7c:	ldr	r0, [sp, #56]	; 0x38
   46f80:	cmp	r0, #1
   46f84:	blt	2a430 <GetDataSlab+0x2a6c>
   46f88:	ldr	r0, [fp, #20]
   46f8c:	ldr	lr, [fp, #16]
   46f90:	add	ip, r0, #4
   46f94:	sub	r0, fp, #136	; 0x88
   46f98:	orr	r9, r0, #4
   46f9c:	sub	r0, fp, #96	; 0x60
   46fa0:	orr	r0, r0, #4
   46fa4:	str	r0, [sp, #40]	; 0x28
   46fa8:	ldr	r0, [r8], #4
   46fac:	str	r0, [sp, #48]	; 0x30
   46fb0:	mov	r0, #0
   46fb4:	str	r0, [sp, #52]	; 0x34
   46fb8:	ldr	r1, [sp, #48]	; 0x30
   46fbc:	cmp	r2, #1
   46fc0:	add	r0, r1, r4
   46fc4:	add	r3, sl, r1, lsl #3
   46fc8:	blt	4701c <GetDataSlab+0x1f658>
   46fcc:	ldr	r1, [sp, #60]	; 0x3c
   46fd0:	ldr	r2, [sp, #52]	; 0x34
   46fd4:	ldr	r6, [fp, #20]
   46fd8:	mov	r7, #0
   46fdc:	add	r4, r1, r2
   46fe0:	ldrb	r1, [r3]
   46fe4:	strb	r1, [r4, r7]
   46fe8:	add	r7, r7, #1
   46fec:	ldr	r5, [lr]
   46ff0:	ldr	r2, [r6]
   46ff4:	add	r0, r5, r0
   46ff8:	add	r3, r3, r5, lsl #3
   46ffc:	cmp	r7, r2
   47000:	blt	46fe0 <GetDataSlab+0x1f61c>
   47004:	ldr	r1, [fp, #12]
   47008:	sub	r6, fp, #176	; 0xb0
   4700c:	ldr	r4, [r1]
   47010:	ldr	r1, [fp, #8]
   47014:	ldr	r1, [r1]
   47018:	b	47028 <GetDataSlab+0x1f664>
   4701c:	mov	r4, r1
   47020:	ldr	r1, [sp, #44]	; 0x2c
   47024:	sub	r6, fp, #176	; 0xb0
   47028:	str	r1, [sp, #44]	; 0x2c
   4702c:	mls	r1, r5, r2, r1
   47030:	str	r4, [sp, #48]	; 0x30
   47034:	sub	r1, r1, r4
   47038:	add	r4, r1, r0
   4703c:	ldr	r0, [fp, #24]
   47040:	add	sl, r3, r1, lsl #3
   47044:	cmp	r0, #2
   47048:	blt	470f8 <GetDataSlab+0x1f734>
   4704c:	mov	r7, #0
   47050:	ldr	r1, [r9, r7, lsl #2]
   47054:	mov	r0, r7
   47058:	add	r1, r1, #1
   4705c:	str	r1, [r9, r7, lsl #2]
   47060:	ldr	r3, [ip, r7, lsl #2]
   47064:	sdiv	r7, r1, r3
   47068:	mls	r1, r7, r3, r1
   4706c:	cmp	r1, #0
   47070:	bne	470e8 <GetDataSlab+0x1f724>
   47074:	mov	r1, #0
   47078:	str	r1, [r9, r0, lsl #2]
   4707c:	add	r1, r6, r0, lsl #2
   47080:	ldr	r7, [r1, #4]
   47084:	sdiv	r1, r4, r7
   47088:	mls	r1, r1, r7, r4
   4708c:	cmp	r1, #0
   47090:	beq	470b4 <GetDataSlab+0x1f6f0>
   47094:	ldr	r3, [r6, r0, lsl #2]
   47098:	ldr	lr, [r8, r0, lsl #2]
   4709c:	sub	r1, r7, r1
   470a0:	sub	r6, fp, #176	; 0xb0
   470a4:	mla	r1, lr, r3, r1
   470a8:	ldr	lr, [fp, #16]
   470ac:	add	r4, r1, r4
   470b0:	b	470cc <GetDataSlab+0x1f708>
   470b4:	ldr	r1, [r8, r0, lsl #2]
   470b8:	cmp	r1, #0
   470bc:	beq	470d0 <GetDataSlab+0x1f70c>
   470c0:	ldr	r3, [r6, r0, lsl #2]
   470c4:	mla	r4, r3, r1, r4
   470c8:	mul	r1, r3, r1
   470cc:	add	sl, sl, r1, lsl #3
   470d0:	ldr	r1, [fp, #24]
   470d4:	add	r7, r0, #1
   470d8:	add	r0, r0, #2
   470dc:	cmp	r0, r1
   470e0:	blt	47050 <GetDataSlab+0x1f68c>
   470e4:	b	470f8 <GetDataSlab+0x1f734>
   470e8:	ldr	r1, [sp, #40]	; 0x28
   470ec:	ldr	r0, [r1, r0, lsl #2]
   470f0:	add	sl, sl, r0, lsl #3
   470f4:	add	r4, r0, r4
   470f8:	ldr	r3, [sp, #52]	; 0x34
   470fc:	ldr	r1, [sp, #56]	; 0x38
   47100:	mov	r0, #0
   47104:	add	r3, r2, r3
   47108:	cmp	r3, r1
   4710c:	str	r3, [sp, #52]	; 0x34
   47110:	blt	46fb8 <GetDataSlab+0x1f5f4>
   47114:	b	47ffc <GetDataSlab+0x20638>
   47118:	ldr	r0, [sp, #52]	; 0x34
   4711c:	ldr	r1, [fp, #12]
   47120:	ldr	r3, [sp, #44]	; 0x2c
   47124:	cmp	r0, #1
   47128:	blt	47ff8 <GetDataSlab+0x20634>
   4712c:	ldr	r0, [sp, #36]	; 0x24
   47130:	ldr	r4, [r1], #4
   47134:	add	lr, r6, #4
   47138:	mov	ip, #0
   4713c:	mov	sl, #0
   47140:	mls	r0, r3, r5, r0
   47144:	str	r1, [sp, #56]	; 0x38
   47148:	lsl	r1, r5, #3
   4714c:	str	r4, [sp, #48]	; 0x30
   47150:	sub	r0, r0, r4
   47154:	str	r0, [sp, #40]	; 0x28
   47158:	sub	r0, fp, #136	; 0x88
   4715c:	orr	r7, r0, #4
   47160:	sub	r0, fp, #96	; 0x60
   47164:	orr	r0, r0, #4
   47168:	str	r0, [sp, #28]
   4716c:	mla	r0, r3, r5, r4
   47170:	str	r0, [sp, #32]
   47174:	lsl	r0, r3, #1
   47178:	str	r0, [sp, #36]	; 0x24
   4717c:	ldr	r0, [sp, #48]	; 0x30
   47180:	cmp	r3, #1
   47184:	blt	471ac <GetDataSlab+0x1f7e8>
   47188:	ldr	r0, [sp, #48]	; 0x30
   4718c:	ldr	r3, [sp, #44]	; 0x2c
   47190:	ldr	r6, [sp, #60]	; 0x3c
   47194:	add	r0, r9, r0, lsl #3
   47198:	ldrh	r8, [r0], r1
   4719c:	subs	r3, r3, #1
   471a0:	strh	r8, [r6], #2
   471a4:	bne	47198 <GetDataSlab+0x1f7d4>
   471a8:	ldr	r0, [sp, #32]
   471ac:	ldr	r4, [sp, #40]	; 0x28
   471b0:	add	r3, r9, r4, lsl #3
   471b4:	add	r9, r3, r0, lsl #3
   471b8:	add	r0, r0, r2
   471bc:	add	r2, r0, r4
   471c0:	ldr	r0, [fp, #24]
   471c4:	cmp	r0, #2
   471c8:	blt	47278 <GetDataSlab+0x1f8b4>
   471cc:	ldr	r8, [sp, #56]	; 0x38
   471d0:	mov	r3, #0
   471d4:	mov	r0, r3
   471d8:	ldr	r3, [r7, r3, lsl #2]
   471dc:	add	r3, r3, #1
   471e0:	str	r3, [r7, r0, lsl #2]
   471e4:	ldr	r6, [lr, r0, lsl #2]
   471e8:	sdiv	r5, r3, r6
   471ec:	mls	r3, r5, r6, r3
   471f0:	cmp	r3, #0
   471f4:	bne	47268 <GetDataSlab+0x1f8a4>
   471f8:	sub	r4, fp, #176	; 0xb0
   471fc:	str	ip, [r7, r0, lsl #2]
   47200:	add	r3, r4, r0, lsl #2
   47204:	ldr	r3, [r3, #4]
   47208:	sdiv	r5, r2, r3
   4720c:	mls	r6, r5, r3, r2
   47210:	cmp	r6, #0
   47214:	beq	47230 <GetDataSlab+0x1f86c>
   47218:	ldr	r5, [r4, r0, lsl #2]
   4721c:	ldr	r4, [r8, r0, lsl #2]
   47220:	sub	r3, r3, r6
   47224:	mla	r3, r4, r5, r3
   47228:	add	r2, r3, r2
   4722c:	b	4724c <GetDataSlab+0x1f888>
   47230:	ldr	r3, [r8, r0, lsl #2]
   47234:	cmp	r3, #0
   47238:	beq	47250 <GetDataSlab+0x1f88c>
   4723c:	sub	r4, fp, #176	; 0xb0
   47240:	ldr	r4, [r4, r0, lsl #2]
   47244:	mla	r2, r4, r3, r2
   47248:	mul	r3, r4, r3
   4724c:	add	r9, r9, r3, lsl #3
   47250:	ldr	r4, [fp, #24]
   47254:	add	r3, r0, #1
   47258:	add	r0, r0, #2
   4725c:	cmp	r0, r4
   47260:	blt	471d4 <GetDataSlab+0x1f810>
   47264:	b	47278 <GetDataSlab+0x1f8b4>
   47268:	ldr	r3, [sp, #28]
   4726c:	ldr	r0, [r3, r0, lsl #2]
   47270:	add	r9, r9, r0, lsl #3
   47274:	add	r2, r0, r2
   47278:	ldr	r0, [sp, #60]	; 0x3c
   4727c:	ldr	r3, [sp, #36]	; 0x24
   47280:	ldr	r4, [sp, #52]	; 0x34
   47284:	add	r0, r0, r3
   47288:	ldr	r3, [sp, #44]	; 0x2c
   4728c:	str	r0, [sp, #60]	; 0x3c
   47290:	mov	r0, #0
   47294:	add	sl, sl, r3
   47298:	cmp	sl, r4
   4729c:	blt	4717c <GetDataSlab+0x1f7b8>
   472a0:	b	47ffc <GetDataSlab+0x20638>
   472a4:	ldr	r0, [sp, #52]	; 0x34
   472a8:	ldr	r1, [fp, #12]
   472ac:	ldr	r3, [sp, #44]	; 0x2c
   472b0:	cmp	r0, #1
   472b4:	blt	47ff8 <GetDataSlab+0x20634>
   472b8:	ldr	r0, [sp, #36]	; 0x24
   472bc:	ldr	r4, [r1], #4
   472c0:	add	lr, r6, #4
   472c4:	mov	ip, #0
   472c8:	mov	sl, #0
   472cc:	mls	r0, r3, r5, r0
   472d0:	str	r1, [sp, #56]	; 0x38
   472d4:	lsl	r1, r5, #3
   472d8:	str	r4, [sp, #48]	; 0x30
   472dc:	sub	r0, r0, r4
   472e0:	str	r0, [sp, #40]	; 0x28
   472e4:	sub	r0, fp, #136	; 0x88
   472e8:	orr	r7, r0, #4
   472ec:	sub	r0, fp, #96	; 0x60
   472f0:	orr	r0, r0, #4
   472f4:	str	r0, [sp, #28]
   472f8:	mla	r0, r3, r5, r4
   472fc:	str	r0, [sp, #32]
   47300:	lsl	r0, r3, #1
   47304:	str	r0, [sp, #36]	; 0x24
   47308:	ldr	r0, [sp, #48]	; 0x30
   4730c:	cmp	r3, #1
   47310:	blt	47338 <GetDataSlab+0x1f974>
   47314:	ldr	r0, [sp, #48]	; 0x30
   47318:	ldr	r3, [sp, #44]	; 0x2c
   4731c:	ldr	r6, [sp, #60]	; 0x3c
   47320:	add	r0, r9, r0, lsl #3
   47324:	ldrh	r8, [r0], r1
   47328:	subs	r3, r3, #1
   4732c:	strh	r8, [r6], #2
   47330:	bne	47324 <GetDataSlab+0x1f960>
   47334:	ldr	r0, [sp, #32]
   47338:	ldr	r4, [sp, #40]	; 0x28
   4733c:	add	r3, r9, r4, lsl #3
   47340:	add	r9, r3, r0, lsl #3
   47344:	add	r0, r0, r2
   47348:	add	r2, r0, r4
   4734c:	ldr	r0, [fp, #24]
   47350:	cmp	r0, #2
   47354:	blt	47404 <GetDataSlab+0x1fa40>
   47358:	ldr	r8, [sp, #56]	; 0x38
   4735c:	mov	r3, #0
   47360:	mov	r0, r3
   47364:	ldr	r3, [r7, r3, lsl #2]
   47368:	add	r3, r3, #1
   4736c:	str	r3, [r7, r0, lsl #2]
   47370:	ldr	r6, [lr, r0, lsl #2]
   47374:	sdiv	r5, r3, r6
   47378:	mls	r3, r5, r6, r3
   4737c:	cmp	r3, #0
   47380:	bne	473f4 <GetDataSlab+0x1fa30>
   47384:	sub	r4, fp, #176	; 0xb0
   47388:	str	ip, [r7, r0, lsl #2]
   4738c:	add	r3, r4, r0, lsl #2
   47390:	ldr	r3, [r3, #4]
   47394:	sdiv	r5, r2, r3
   47398:	mls	r6, r5, r3, r2
   4739c:	cmp	r6, #0
   473a0:	beq	473bc <GetDataSlab+0x1f9f8>
   473a4:	ldr	r5, [r4, r0, lsl #2]
   473a8:	ldr	r4, [r8, r0, lsl #2]
   473ac:	sub	r3, r3, r6
   473b0:	mla	r3, r4, r5, r3
   473b4:	add	r2, r3, r2
   473b8:	b	473d8 <GetDataSlab+0x1fa14>
   473bc:	ldr	r3, [r8, r0, lsl #2]
   473c0:	cmp	r3, #0
   473c4:	beq	473dc <GetDataSlab+0x1fa18>
   473c8:	sub	r4, fp, #176	; 0xb0
   473cc:	ldr	r4, [r4, r0, lsl #2]
   473d0:	mla	r2, r4, r3, r2
   473d4:	mul	r3, r4, r3
   473d8:	add	r9, r9, r3, lsl #3
   473dc:	ldr	r4, [fp, #24]
   473e0:	add	r3, r0, #1
   473e4:	add	r0, r0, #2
   473e8:	cmp	r0, r4
   473ec:	blt	47360 <GetDataSlab+0x1f99c>
   473f0:	b	47404 <GetDataSlab+0x1fa40>
   473f4:	ldr	r3, [sp, #28]
   473f8:	ldr	r0, [r3, r0, lsl #2]
   473fc:	add	r9, r9, r0, lsl #3
   47400:	add	r2, r0, r2
   47404:	ldr	r0, [sp, #60]	; 0x3c
   47408:	ldr	r3, [sp, #36]	; 0x24
   4740c:	ldr	r4, [sp, #52]	; 0x34
   47410:	add	r0, r0, r3
   47414:	ldr	r3, [sp, #44]	; 0x2c
   47418:	str	r0, [sp, #60]	; 0x3c
   4741c:	mov	r0, #0
   47420:	add	sl, sl, r3
   47424:	cmp	sl, r4
   47428:	blt	47308 <GetDataSlab+0x1f944>
   4742c:	b	47ffc <GetDataSlab+0x20638>
   47430:	ldr	r0, [sp, #56]	; 0x38
   47434:	cmp	r0, #1
   47438:	blt	47ff8 <GetDataSlab+0x20634>
   4743c:	ldr	r0, [fp, #20]
   47440:	ldr	lr, [fp, #16]
   47444:	add	ip, r0, #4
   47448:	sub	r0, fp, #136	; 0x88
   4744c:	orr	r9, r0, #4
   47450:	sub	r0, fp, #96	; 0x60
   47454:	orr	r0, r0, #4
   47458:	str	r0, [sp, #40]	; 0x28
   4745c:	ldr	r0, [r8], #4
   47460:	str	r0, [sp, #48]	; 0x30
   47464:	mov	r0, #0
   47468:	str	r0, [sp, #52]	; 0x34
   4746c:	ldr	r1, [sp, #48]	; 0x30
   47470:	cmp	r2, #1
   47474:	add	r0, r1, r4
   47478:	add	r3, sl, r1, lsl #3
   4747c:	blt	474d0 <GetDataSlab+0x1fb0c>
   47480:	ldr	r1, [sp, #60]	; 0x3c
   47484:	ldr	r2, [sp, #52]	; 0x34
   47488:	ldr	r6, [fp, #20]
   4748c:	mov	r7, #0
   47490:	add	r4, r1, r2, lsl #2
   47494:	ldr	r1, [r3]
   47498:	str	r1, [r4, r7, lsl #2]
   4749c:	add	r7, r7, #1
   474a0:	ldr	r5, [lr]
   474a4:	ldr	r2, [r6]
   474a8:	add	r0, r5, r0
   474ac:	add	r3, r3, r5, lsl #3
   474b0:	cmp	r7, r2
   474b4:	blt	47494 <GetDataSlab+0x1fad0>
   474b8:	ldr	r1, [fp, #12]
   474bc:	sub	r6, fp, #176	; 0xb0
   474c0:	ldr	r4, [r1]
   474c4:	ldr	r1, [fp, #8]
   474c8:	ldr	r1, [r1]
   474cc:	b	474dc <GetDataSlab+0x1fb18>
   474d0:	mov	r4, r1
   474d4:	ldr	r1, [sp, #44]	; 0x2c
   474d8:	sub	r6, fp, #176	; 0xb0
   474dc:	str	r1, [sp, #44]	; 0x2c
   474e0:	mls	r1, r5, r2, r1
   474e4:	str	r4, [sp, #48]	; 0x30
   474e8:	sub	r1, r1, r4
   474ec:	add	r4, r1, r0
   474f0:	ldr	r0, [fp, #24]
   474f4:	add	sl, r3, r1, lsl #3
   474f8:	cmp	r0, #2
   474fc:	blt	475ac <GetDataSlab+0x1fbe8>
   47500:	mov	r7, #0
   47504:	ldr	r1, [r9, r7, lsl #2]
   47508:	mov	r0, r7
   4750c:	add	r1, r1, #1
   47510:	str	r1, [r9, r7, lsl #2]
   47514:	ldr	r3, [ip, r7, lsl #2]
   47518:	sdiv	r7, r1, r3
   4751c:	mls	r1, r7, r3, r1
   47520:	cmp	r1, #0
   47524:	bne	4759c <GetDataSlab+0x1fbd8>
   47528:	mov	r1, #0
   4752c:	str	r1, [r9, r0, lsl #2]
   47530:	add	r1, r6, r0, lsl #2
   47534:	ldr	r7, [r1, #4]
   47538:	sdiv	r1, r4, r7
   4753c:	mls	r1, r1, r7, r4
   47540:	cmp	r1, #0
   47544:	beq	47568 <GetDataSlab+0x1fba4>
   47548:	ldr	r3, [r6, r0, lsl #2]
   4754c:	ldr	lr, [r8, r0, lsl #2]
   47550:	sub	r1, r7, r1
   47554:	sub	r6, fp, #176	; 0xb0
   47558:	mla	r1, lr, r3, r1
   4755c:	ldr	lr, [fp, #16]
   47560:	add	r4, r1, r4
   47564:	b	47580 <GetDataSlab+0x1fbbc>
   47568:	ldr	r1, [r8, r0, lsl #2]
   4756c:	cmp	r1, #0
   47570:	beq	47584 <GetDataSlab+0x1fbc0>
   47574:	ldr	r3, [r6, r0, lsl #2]
   47578:	mla	r4, r3, r1, r4
   4757c:	mul	r1, r3, r1
   47580:	add	sl, sl, r1, lsl #3
   47584:	ldr	r1, [fp, #24]
   47588:	add	r7, r0, #1
   4758c:	add	r0, r0, #2
   47590:	cmp	r0, r1
   47594:	blt	47504 <GetDataSlab+0x1fb40>
   47598:	b	475ac <GetDataSlab+0x1fbe8>
   4759c:	ldr	r1, [sp, #40]	; 0x28
   475a0:	ldr	r0, [r1, r0, lsl #2]
   475a4:	add	sl, sl, r0, lsl #3
   475a8:	add	r4, r0, r4
   475ac:	ldr	r3, [sp, #52]	; 0x34
   475b0:	ldr	r1, [sp, #56]	; 0x38
   475b4:	mov	r0, #0
   475b8:	add	r3, r2, r3
   475bc:	cmp	r3, r1
   475c0:	str	r3, [sp, #52]	; 0x34
   475c4:	blt	4746c <GetDataSlab+0x1faa8>
   475c8:	b	47ffc <GetDataSlab+0x20638>
   475cc:	ldr	r0, [sp, #56]	; 0x38
   475d0:	cmp	r0, #1
   475d4:	blt	47ff8 <GetDataSlab+0x20634>
   475d8:	ldr	r0, [fp, #20]
   475dc:	ldr	lr, [fp, #16]
   475e0:	add	ip, r0, #4
   475e4:	sub	r0, fp, #136	; 0x88
   475e8:	orr	r9, r0, #4
   475ec:	sub	r0, fp, #96	; 0x60
   475f0:	orr	r0, r0, #4
   475f4:	str	r0, [sp, #40]	; 0x28
   475f8:	ldr	r0, [r8], #4
   475fc:	str	r0, [sp, #48]	; 0x30
   47600:	mov	r0, #0
   47604:	str	r0, [sp, #52]	; 0x34
   47608:	ldr	r1, [sp, #48]	; 0x30
   4760c:	cmp	r2, #1
   47610:	add	r0, r1, r4
   47614:	add	r3, sl, r1, lsl #3
   47618:	blt	4766c <GetDataSlab+0x1fca8>
   4761c:	ldr	r1, [sp, #60]	; 0x3c
   47620:	ldr	r2, [sp, #52]	; 0x34
   47624:	ldr	r6, [fp, #20]
   47628:	mov	r7, #0
   4762c:	add	r4, r1, r2, lsl #2
   47630:	ldr	r1, [r3]
   47634:	str	r1, [r4, r7, lsl #2]
   47638:	add	r7, r7, #1
   4763c:	ldr	r5, [lr]
   47640:	ldr	r2, [r6]
   47644:	add	r0, r5, r0
   47648:	add	r3, r3, r5, lsl #3
   4764c:	cmp	r7, r2
   47650:	blt	47630 <GetDataSlab+0x1fc6c>
   47654:	ldr	r1, [fp, #12]
   47658:	sub	r6, fp, #176	; 0xb0
   4765c:	ldr	r4, [r1]
   47660:	ldr	r1, [fp, #8]
   47664:	ldr	r1, [r1]
   47668:	b	47678 <GetDataSlab+0x1fcb4>
   4766c:	mov	r4, r1
   47670:	ldr	r1, [sp, #44]	; 0x2c
   47674:	sub	r6, fp, #176	; 0xb0
   47678:	str	r1, [sp, #44]	; 0x2c
   4767c:	mls	r1, r5, r2, r1
   47680:	str	r4, [sp, #48]	; 0x30
   47684:	sub	r1, r1, r4
   47688:	add	r4, r1, r0
   4768c:	ldr	r0, [fp, #24]
   47690:	add	sl, r3, r1, lsl #3
   47694:	cmp	r0, #2
   47698:	blt	47748 <GetDataSlab+0x1fd84>
   4769c:	mov	r7, #0
   476a0:	ldr	r1, [r9, r7, lsl #2]
   476a4:	mov	r0, r7
   476a8:	add	r1, r1, #1
   476ac:	str	r1, [r9, r7, lsl #2]
   476b0:	ldr	r3, [ip, r7, lsl #2]
   476b4:	sdiv	r7, r1, r3
   476b8:	mls	r1, r7, r3, r1
   476bc:	cmp	r1, #0
   476c0:	bne	47738 <GetDataSlab+0x1fd74>
   476c4:	mov	r1, #0
   476c8:	str	r1, [r9, r0, lsl #2]
   476cc:	add	r1, r6, r0, lsl #2
   476d0:	ldr	r7, [r1, #4]
   476d4:	sdiv	r1, r4, r7
   476d8:	mls	r1, r1, r7, r4
   476dc:	cmp	r1, #0
   476e0:	beq	47704 <GetDataSlab+0x1fd40>
   476e4:	ldr	r3, [r6, r0, lsl #2]
   476e8:	ldr	lr, [r8, r0, lsl #2]
   476ec:	sub	r1, r7, r1
   476f0:	sub	r6, fp, #176	; 0xb0
   476f4:	mla	r1, lr, r3, r1
   476f8:	ldr	lr, [fp, #16]
   476fc:	add	r4, r1, r4
   47700:	b	4771c <GetDataSlab+0x1fd58>
   47704:	ldr	r1, [r8, r0, lsl #2]
   47708:	cmp	r1, #0
   4770c:	beq	47720 <GetDataSlab+0x1fd5c>
   47710:	ldr	r3, [r6, r0, lsl #2]
   47714:	mla	r4, r3, r1, r4
   47718:	mul	r1, r3, r1
   4771c:	add	sl, sl, r1, lsl #3
   47720:	ldr	r1, [fp, #24]
   47724:	add	r7, r0, #1
   47728:	add	r0, r0, #2
   4772c:	cmp	r0, r1
   47730:	blt	476a0 <GetDataSlab+0x1fcdc>
   47734:	b	47748 <GetDataSlab+0x1fd84>
   47738:	ldr	r1, [sp, #40]	; 0x28
   4773c:	ldr	r0, [r1, r0, lsl #2]
   47740:	add	sl, sl, r0, lsl #3
   47744:	add	r4, r0, r4
   47748:	ldr	r3, [sp, #52]	; 0x34
   4774c:	ldr	r1, [sp, #56]	; 0x38
   47750:	mov	r0, #0
   47754:	add	r3, r2, r3
   47758:	cmp	r3, r1
   4775c:	str	r3, [sp, #52]	; 0x34
   47760:	blt	47608 <GetDataSlab+0x1fc44>
   47764:	b	47ffc <GetDataSlab+0x20638>
   47768:	ldr	r0, [sp, #52]	; 0x34
   4776c:	ldr	r1, [fp, #12]
   47770:	cmp	r0, #1
   47774:	blt	47ff8 <GetDataSlab+0x20634>
   47778:	ldr	r3, [sp, #44]	; 0x2c
   4777c:	ldr	r0, [sp, #36]	; 0x24
   47780:	ldr	r8, [r1], #4
   47784:	add	ip, sl, #4
   47788:	lsl	lr, r6, #3
   4778c:	mov	sl, #0
   47790:	mls	r0, r3, r6, r0
   47794:	str	r1, [sp, #56]	; 0x38
   47798:	mov	r1, r3
   4779c:	sub	r0, r0, r8
   477a0:	ldr	r5, [sp, #56]	; 0x38
   477a4:	str	r0, [sp, #48]	; 0x30
   477a8:	sub	r0, fp, #136	; 0x88
   477ac:	orr	r7, r0, #4
   477b0:	sub	r0, fp, #96	; 0x60
   477b4:	orr	r0, r0, #4
   477b8:	str	r0, [sp, #32]
   477bc:	mla	r0, r3, r6, r8
   477c0:	str	r0, [sp, #36]	; 0x24
   477c4:	lsl	r0, r3, #3
   477c8:	str	r0, [sp, #40]	; 0x28
   477cc:	cmp	r1, #1
   477d0:	mov	r0, r8
   477d4:	blt	47808 <GetDataSlab+0x1fe44>
   477d8:	ldr	r3, [sp, #44]	; 0x2c
   477dc:	ldr	r6, [sp, #60]	; 0x3c
   477e0:	mov	r4, r8
   477e4:	add	r8, r9, r8, lsl #3
   477e8:	ldrd	r0, [r8]
   477ec:	add	r8, r8, lr
   477f0:	subs	r3, r3, #1
   477f4:	strd	r0, [r6]
   477f8:	add	r6, r6, #8
   477fc:	bne	477e8 <GetDataSlab+0x1fe24>
   47800:	ldr	r0, [sp, #36]	; 0x24
   47804:	mov	r8, r4
   47808:	ldr	r3, [sp, #48]	; 0x30
   4780c:	add	r1, r9, r3, lsl #3
   47810:	add	r9, r1, r0, lsl #3
   47814:	add	r0, r0, r2
   47818:	add	r2, r0, r3
   4781c:	ldr	r0, [fp, #24]
   47820:	cmp	r0, #2
   47824:	blt	478d4 <GetDataSlab+0x1ff10>
   47828:	mov	r3, #0
   4782c:	ldr	r1, [r7, r3, lsl #2]
   47830:	mov	r0, r3
   47834:	add	r1, r1, #1
   47838:	str	r1, [r7, r3, lsl #2]
   4783c:	ldr	r3, [ip, r3, lsl #2]
   47840:	sdiv	r6, r1, r3
   47844:	mls	r1, r6, r3, r1
   47848:	cmp	r1, #0
   4784c:	bne	478c4 <GetDataSlab+0x1ff00>
   47850:	mov	r1, #0
   47854:	sub	r4, fp, #176	; 0xb0
   47858:	str	r1, [r7, r0, lsl #2]
   4785c:	add	r1, r4, r0, lsl #2
   47860:	ldr	r3, [r1, #4]
   47864:	sdiv	r1, r2, r3
   47868:	mls	r6, r1, r3, r2
   4786c:	cmp	r6, #0
   47870:	beq	4788c <GetDataSlab+0x1fec8>
   47874:	ldr	r1, [r4, r0, lsl #2]
   47878:	ldr	r4, [r5, r0, lsl #2]
   4787c:	sub	r3, r3, r6
   47880:	mla	r1, r4, r1, r3
   47884:	add	r2, r1, r2
   47888:	b	478a8 <GetDataSlab+0x1fee4>
   4788c:	ldr	r3, [r5, r0, lsl #2]
   47890:	cmp	r3, #0
   47894:	beq	478ac <GetDataSlab+0x1fee8>
   47898:	sub	r1, fp, #176	; 0xb0
   4789c:	ldr	r1, [r1, r0, lsl #2]
   478a0:	mla	r2, r1, r3, r2
   478a4:	mul	r1, r1, r3
   478a8:	add	r9, r9, r1, lsl #3
   478ac:	ldr	r1, [fp, #24]
   478b0:	add	r3, r0, #1
   478b4:	add	r0, r0, #2
   478b8:	cmp	r0, r1
   478bc:	blt	4782c <GetDataSlab+0x1fe68>
   478c0:	b	478d4 <GetDataSlab+0x1ff10>
   478c4:	ldr	r1, [sp, #32]
   478c8:	ldr	r0, [r1, r0, lsl #2]
   478cc:	add	r9, r9, r0, lsl #3
   478d0:	add	r2, r0, r2
   478d4:	ldr	r0, [sp, #60]	; 0x3c
   478d8:	ldr	r1, [sp, #40]	; 0x28
   478dc:	ldr	r3, [sp, #52]	; 0x34
   478e0:	add	r0, r0, r1
   478e4:	ldr	r1, [sp, #44]	; 0x2c
   478e8:	str	r0, [sp, #60]	; 0x3c
   478ec:	mov	r0, #0
   478f0:	add	sl, sl, r1
   478f4:	cmp	sl, r3
   478f8:	blt	477cc <GetDataSlab+0x1fe08>
   478fc:	b	47ffc <GetDataSlab+0x20638>
   47900:	ldr	r0, [sp, #52]	; 0x34
   47904:	ldr	r1, [fp, #12]
   47908:	cmp	r0, #1
   4790c:	blt	47ff8 <GetDataSlab+0x20634>
   47910:	ldr	r3, [sp, #44]	; 0x2c
   47914:	ldr	r0, [sp, #36]	; 0x24
   47918:	ldr	r8, [r1], #4
   4791c:	add	ip, sl, #4
   47920:	lsl	lr, r6, #3
   47924:	mov	sl, #0
   47928:	mls	r0, r3, r6, r0
   4792c:	str	r1, [sp, #56]	; 0x38
   47930:	mov	r1, r3
   47934:	sub	r0, r0, r8
   47938:	ldr	r5, [sp, #56]	; 0x38
   4793c:	str	r0, [sp, #48]	; 0x30
   47940:	sub	r0, fp, #136	; 0x88
   47944:	orr	r7, r0, #4
   47948:	sub	r0, fp, #96	; 0x60
   4794c:	orr	r0, r0, #4
   47950:	str	r0, [sp, #32]
   47954:	mla	r0, r3, r6, r8
   47958:	str	r0, [sp, #36]	; 0x24
   4795c:	lsl	r0, r3, #3
   47960:	str	r0, [sp, #40]	; 0x28
   47964:	cmp	r1, #1
   47968:	mov	r0, r8
   4796c:	blt	479a0 <GetDataSlab+0x1ffdc>
   47970:	ldr	r3, [sp, #44]	; 0x2c
   47974:	ldr	r6, [sp, #60]	; 0x3c
   47978:	mov	r4, r8
   4797c:	add	r8, r9, r8, lsl #3
   47980:	ldrd	r0, [r8]
   47984:	add	r8, r8, lr
   47988:	subs	r3, r3, #1
   4798c:	strd	r0, [r6]
   47990:	add	r6, r6, #8
   47994:	bne	47980 <GetDataSlab+0x1ffbc>
   47998:	ldr	r0, [sp, #36]	; 0x24
   4799c:	mov	r8, r4
   479a0:	ldr	r3, [sp, #48]	; 0x30
   479a4:	add	r1, r9, r3, lsl #3
   479a8:	add	r9, r1, r0, lsl #3
   479ac:	add	r0, r0, r2
   479b0:	add	r2, r0, r3
   479b4:	ldr	r0, [fp, #24]
   479b8:	cmp	r0, #2
   479bc:	blt	47a6c <GetDataSlab+0x200a8>
   479c0:	mov	r3, #0
   479c4:	ldr	r1, [r7, r3, lsl #2]
   479c8:	mov	r0, r3
   479cc:	add	r1, r1, #1
   479d0:	str	r1, [r7, r3, lsl #2]
   479d4:	ldr	r3, [ip, r3, lsl #2]
   479d8:	sdiv	r6, r1, r3
   479dc:	mls	r1, r6, r3, r1
   479e0:	cmp	r1, #0
   479e4:	bne	47a5c <GetDataSlab+0x20098>
   479e8:	mov	r1, #0
   479ec:	sub	r4, fp, #176	; 0xb0
   479f0:	str	r1, [r7, r0, lsl #2]
   479f4:	add	r1, r4, r0, lsl #2
   479f8:	ldr	r3, [r1, #4]
   479fc:	sdiv	r1, r2, r3
   47a00:	mls	r6, r1, r3, r2
   47a04:	cmp	r6, #0
   47a08:	beq	47a24 <GetDataSlab+0x20060>
   47a0c:	ldr	r1, [r4, r0, lsl #2]
   47a10:	ldr	r4, [r5, r0, lsl #2]
   47a14:	sub	r3, r3, r6
   47a18:	mla	r1, r4, r1, r3
   47a1c:	add	r2, r1, r2
   47a20:	b	47a40 <GetDataSlab+0x2007c>
   47a24:	ldr	r3, [r5, r0, lsl #2]
   47a28:	cmp	r3, #0
   47a2c:	beq	47a44 <GetDataSlab+0x20080>
   47a30:	sub	r1, fp, #176	; 0xb0
   47a34:	ldr	r1, [r1, r0, lsl #2]
   47a38:	mla	r2, r1, r3, r2
   47a3c:	mul	r1, r1, r3
   47a40:	add	r9, r9, r1, lsl #3
   47a44:	ldr	r1, [fp, #24]
   47a48:	add	r3, r0, #1
   47a4c:	add	r0, r0, #2
   47a50:	cmp	r0, r1
   47a54:	blt	479c4 <GetDataSlab+0x20000>
   47a58:	b	47a6c <GetDataSlab+0x200a8>
   47a5c:	ldr	r1, [sp, #32]
   47a60:	ldr	r0, [r1, r0, lsl #2]
   47a64:	add	r9, r9, r0, lsl #3
   47a68:	add	r2, r0, r2
   47a6c:	ldr	r0, [sp, #60]	; 0x3c
   47a70:	ldr	r1, [sp, #40]	; 0x28
   47a74:	ldr	r3, [sp, #52]	; 0x34
   47a78:	add	r0, r0, r1
   47a7c:	ldr	r1, [sp, #44]	; 0x2c
   47a80:	str	r0, [sp, #60]	; 0x3c
   47a84:	mov	r0, #0
   47a88:	add	sl, sl, r1
   47a8c:	cmp	sl, r3
   47a90:	blt	47964 <GetDataSlab+0x1ffa0>
   47a94:	b	47ffc <GetDataSlab+0x20638>
   47a98:	mov	r0, #0
   47a9c:	ldr	r2, [fp, #16]
   47aa0:	cmp	r6, #13
   47aa4:	bne	47ffc <GetDataSlab+0x20638>
   47aa8:	ldr	r0, [r2]
   47aac:	mov	r4, #0
   47ab0:	sub	r3, fp, #176	; 0xb0
   47ab4:	sub	r6, fp, #96	; 0x60
   47ab8:	str	r0, [sp, #16]
   47abc:	sub	r0, r0, #1
   47ac0:	str	r0, [fp, #-96]	; 0xffffffa0
   47ac4:	ldr	r0, [fp, #8]
   47ac8:	ldr	r0, [r0]
   47acc:	str	r0, [sp, #36]	; 0x24
   47ad0:	str	r0, [fp, #-176]	; 0xffffff50
   47ad4:	ldr	r0, [fp, #20]
   47ad8:	ldr	r1, [r0]
   47adc:	ldr	r0, [fp, #24]
   47ae0:	cmp	r0, #2
   47ae4:	str	r1, [sp, #40]	; 0x28
   47ae8:	str	r1, [sp, #44]	; 0x2c
   47aec:	blt	47c34 <GetDataSlab+0x20270>
   47af0:	ldr	r0, [fp, #8]
   47af4:	ldr	r5, [sp, #40]	; 0x28
   47af8:	mov	r7, #1
   47afc:	mov	r8, #0
   47b00:	mvn	lr, #15
   47b04:	mov	r4, #0
   47b08:	sub	r1, r0, #4
   47b0c:	sub	sl, r0, #12
   47b10:	ldr	r0, [sp, #36]	; 0x24
   47b14:	str	r5, [sp, #44]	; 0x2c
   47b18:	mov	r9, r0
   47b1c:	ldr	r2, [r2, r7, lsl #2]
   47b20:	str	r0, [r3, r7, lsl #2]
   47b24:	add	r8, r8, #1
   47b28:	cmp	r8, #4
   47b2c:	sub	r5, r2, #1
   47b30:	ldr	r2, [fp, #8]
   47b34:	str	r5, [r6, r7, lsl #2]
   47b38:	ldr	r2, [r2, r7, lsl #2]
   47b3c:	str	r2, [sp, #56]	; 0x38
   47b40:	bcs	47b4c <GetDataSlab+0x20188>
   47b44:	mov	r3, r7
   47b48:	b	47bd0 <GetDataSlab+0x2020c>
   47b4c:	vmov.i32	q9, #1	; 0x00000001
   47b50:	vmov.i32	q10, #1	; 0x00000001
   47b54:	vmov.i32	q8, #1	; 0x00000001
   47b58:	vmov.32	d23[1], r2
   47b5c:	bic	r2, r8, #3
   47b60:	bic	ip, r7, #3
   47b64:	vmov.32	d18[0], r0
   47b68:	vmov.32	d20[0], r5
   47b6c:	sub	r3, r7, r2
   47b70:	mov	r0, sl
   47b74:	vorr	d16, d18, d18
   47b78:	vmov.i32	q9, #1	; 0x00000001
   47b7c:	vorr	d18, d20, d20
   47b80:	vld1.32	{d20-d21}, [r0], lr
   47b84:	subs	ip, ip, #4
   47b88:	vrev64.32	q12, q10
   47b8c:	vext.8	q12, q12, q12, #8
   47b90:	vext.8	q11, q11, q12, #12
   47b94:	vmul.i32	q9, q9, q12
   47b98:	vmul.i32	q8, q11, q8
   47b9c:	vorr	q11, q12, q12
   47ba0:	bne	47b80 <GetDataSlab+0x201bc>
   47ba4:	vext.8	q11, q9, q8, #8
   47ba8:	vext.8	q12, q8, q8, #8
   47bac:	cmp	r8, r2
   47bb0:	vmul.i32	q0, q9, q11
   47bb4:	vmul.i32	q1, q8, q12
   47bb8:	vmul.i32	q8, q0, d0[1]
   47bbc:	vmul.i32	q9, q1, d2[1]
   47bc0:	vmov.32	r5, d16[0]
   47bc4:	vmov.32	r0, d18[0]
   47bc8:	beq	47be4 <GetDataSlab+0x20220>
   47bcc:	vmov.32	r2, d20[0]
   47bd0:	mul	r0, r2, r0
   47bd4:	ldr	r2, [r1, r3, lsl #2]
   47bd8:	subs	r3, r3, #1
   47bdc:	mul	r5, r5, r2
   47be0:	bne	47bd0 <GetDataSlab+0x2020c>
   47be4:	ldr	r2, [fp, #12]
   47be8:	sub	r3, fp, #176	; 0xb0
   47bec:	sub	r6, fp, #96	; 0x60
   47bf0:	add	sl, sl, #4
   47bf4:	str	r5, [r6, r7, lsl #2]
   47bf8:	str	r0, [r3, r7, lsl #2]
   47bfc:	ldr	r5, [sp, #44]	; 0x2c
   47c00:	ldr	r2, [r2, r7, lsl #2]
   47c04:	mla	r4, r2, r9, r4
   47c08:	ldr	r2, [fp, #20]
   47c0c:	mov	r9, r0
   47c10:	ldr	r0, [sp, #56]	; 0x38
   47c14:	ldr	r2, [r2, r7, lsl #2]
   47c18:	add	r7, r7, #1
   47c1c:	mul	r5, r2, r5
   47c20:	ldr	r2, [fp, #24]
   47c24:	str	r5, [sp, #44]	; 0x2c
   47c28:	cmp	r7, r2
   47c2c:	ldr	r2, [fp, #16]
   47c30:	bne	47b1c <GetDataSlab+0x20158>
   47c34:	ldr	r0, [sp, #48]	; 0x30
   47c38:	ldr	r3, [sp, #16]
   47c3c:	add	sl, r0, r4, lsl #3
   47c40:	cmp	r3, #1
   47c44:	bne	47e44 <GetDataSlab+0x20480>
   47c48:	ldr	r0, [sp, #44]	; 0x2c
   47c4c:	ldr	lr, [sp, #40]	; 0x28
   47c50:	sub	r2, fp, #96	; 0x60
   47c54:	cmp	r0, #1
   47c58:	ldr	r0, [fp, #12]
   47c5c:	blt	47ff8 <GetDataSlab+0x20634>
   47c60:	ldr	r1, [fp, #20]
   47c64:	add	r8, r1, #4
   47c68:	sub	r1, fp, #136	; 0x88
   47c6c:	orr	r9, r1, #4
   47c70:	orr	r1, r2, #4
   47c74:	str	r1, [sp, #24]
   47c78:	lsl	r1, lr, #2
   47c7c:	str	r1, [sp, #48]	; 0x30
   47c80:	bic	r1, lr, #1
   47c84:	str	r1, [sp, #28]
   47c88:	ldr	r1, [r0], #4
   47c8c:	str	r0, [sp, #56]	; 0x38
   47c90:	mov	r0, #0
   47c94:	str	r1, [sp, #32]
   47c98:	str	r0, [sp, #52]	; 0x34
   47c9c:	cmp	lr, #1
   47ca0:	blt	47d40 <GetDataSlab+0x2037c>
   47ca4:	mov	r0, #0
   47ca8:	beq	47d0c <GetDataSlab+0x20348>
   47cac:	ldr	r0, [sp, #32]
   47cb0:	mov	r7, r8
   47cb4:	ldr	r5, [sp, #28]
   47cb8:	ldr	r8, [sp, #60]	; 0x3c
   47cbc:	add	r6, sl, r0, lsl #3
   47cc0:	vld1.64	{d8-d9}, [r6]!
   47cc4:	vmov.32	r0, d9[0]
   47cc8:	vmov.32	r1, d9[1]
   47ccc:	bl	584d0 <__aeabi_ul2f>
   47cd0:	vmov.32	r2, d8[0]
   47cd4:	vmov.32	r1, d8[1]
   47cd8:	vmov	s17, r0
   47cdc:	mov	r0, r2
   47ce0:	bl	584d0 <__aeabi_ul2f>
   47ce4:	vmov	s16, r0
   47ce8:	subs	r5, r5, #2
   47cec:	vst1.32	{d8}, [r8]!
   47cf0:	bne	47cc0 <GetDataSlab+0x202fc>
   47cf4:	ldr	r0, [sp, #40]	; 0x28
   47cf8:	ldr	r1, [sp, #28]
   47cfc:	mov	r8, r7
   47d00:	cmp	r0, r1
   47d04:	mov	r0, r1
   47d08:	beq	47d40 <GetDataSlab+0x2037c>
   47d0c:	ldr	r1, [sp, #40]	; 0x28
   47d10:	sub	r5, r1, r0
   47d14:	ldr	r1, [sp, #60]	; 0x3c
   47d18:	add	r6, r1, r0, lsl #2
   47d1c:	ldr	r1, [sp, #32]
   47d20:	add	r1, sl, r1, lsl #3
   47d24:	add	r7, r1, r0, lsl #3
   47d28:	ldrd	r0, [r7]
   47d2c:	bl	584d0 <__aeabi_ul2f>
   47d30:	str	r0, [r6], #4
   47d34:	subs	r5, r5, #1
   47d38:	add	r7, r7, #8
   47d3c:	bne	47d28 <GetDataSlab+0x20364>
   47d40:	ldr	r0, [sp, #36]	; 0x24
   47d44:	sub	ip, fp, #176	; 0xb0
   47d48:	add	sl, sl, r0, lsl #3
   47d4c:	add	r4, r4, r0
   47d50:	ldr	r0, [fp, #24]
   47d54:	cmp	r0, #2
   47d58:	blt	47dfc <GetDataSlab+0x20438>
   47d5c:	ldr	r6, [sp, #60]	; 0x3c
   47d60:	ldr	r5, [sp, #56]	; 0x38
   47d64:	ldr	lr, [sp, #40]	; 0x28
   47d68:	mov	r1, #0
   47d6c:	mov	r0, r1
   47d70:	ldr	r1, [r9, r1, lsl #2]
   47d74:	add	r1, r1, #1
   47d78:	str	r1, [r9, r0, lsl #2]
   47d7c:	ldr	r2, [r8, r0, lsl #2]
   47d80:	sdiv	r3, r1, r2
   47d84:	mls	r1, r3, r2, r1
   47d88:	cmp	r1, #0
   47d8c:	bne	47e08 <GetDataSlab+0x20444>
   47d90:	mov	r1, #0
   47d94:	str	r1, [r9, r0, lsl #2]
   47d98:	add	r1, ip, r0, lsl #2
   47d9c:	ldr	r1, [r1, #4]
   47da0:	sdiv	r2, r4, r1
   47da4:	mls	r2, r2, r1, r4
   47da8:	cmp	r2, #0
   47dac:	beq	47dc8 <GetDataSlab+0x20404>
   47db0:	ldr	r3, [ip, r0, lsl #2]
   47db4:	ldr	r7, [r5, r0, lsl #2]
   47db8:	sub	r1, r1, r2
   47dbc:	mla	r1, r7, r3, r1
   47dc0:	add	r4, r1, r4
   47dc4:	b	47de0 <GetDataSlab+0x2041c>
   47dc8:	ldr	r1, [r5, r0, lsl #2]
   47dcc:	cmp	r1, #0
   47dd0:	beq	47de4 <GetDataSlab+0x20420>
   47dd4:	ldr	r2, [ip, r0, lsl #2]
   47dd8:	mla	r4, r2, r1, r4
   47ddc:	mul	r1, r2, r1
   47de0:	add	sl, sl, r1, lsl #3
   47de4:	ldr	r2, [fp, #24]
   47de8:	add	r1, r0, #1
   47dec:	add	r0, r0, #2
   47df0:	cmp	r0, r2
   47df4:	blt	47d6c <GetDataSlab+0x203a8>
   47df8:	b	47e18 <GetDataSlab+0x20454>
   47dfc:	ldr	r6, [sp, #60]	; 0x3c
   47e00:	ldr	lr, [sp, #40]	; 0x28
   47e04:	b	47e18 <GetDataSlab+0x20454>
   47e08:	ldr	r1, [sp, #24]
   47e0c:	ldr	r0, [r1, r0, lsl #2]
   47e10:	add	sl, sl, r0, lsl #3
   47e14:	add	r4, r0, r4
   47e18:	ldr	r2, [sp, #52]	; 0x34
   47e1c:	ldr	r0, [sp, #48]	; 0x30
   47e20:	ldr	r1, [sp, #44]	; 0x2c
   47e24:	add	r2, r2, lr
   47e28:	add	r6, r6, r0
   47e2c:	mov	r0, #0
   47e30:	cmp	r2, r1
   47e34:	str	r6, [sp, #60]	; 0x3c
   47e38:	str	r2, [sp, #52]	; 0x34
   47e3c:	blt	47c9c <GetDataSlab+0x202d8>
   47e40:	b	47ffc <GetDataSlab+0x20638>
   47e44:	ldr	r0, [sp, #44]	; 0x2c
   47e48:	ldr	r1, [fp, #12]
   47e4c:	ldr	lr, [sp, #40]	; 0x28
   47e50:	sub	r2, fp, #96	; 0x60
   47e54:	cmp	r0, #1
   47e58:	blt	47ff8 <GetDataSlab+0x20634>
   47e5c:	ldr	r0, [sp, #36]	; 0x24
   47e60:	ldr	r9, [r1], #4
   47e64:	lsl	r8, r3, #3
   47e68:	mls	r0, lr, r3, r0
   47e6c:	str	r1, [sp, #56]	; 0x38
   47e70:	str	r9, [sp, #28]
   47e74:	sub	r0, r0, r9
   47e78:	str	r0, [sp, #36]	; 0x24
   47e7c:	ldr	r0, [fp, #20]
   47e80:	add	r0, r0, #4
   47e84:	str	r0, [sp, #52]	; 0x34
   47e88:	sub	r0, fp, #136	; 0x88
   47e8c:	orr	r7, r0, #4
   47e90:	orr	r0, r2, #4
   47e94:	str	r0, [sp, #20]
   47e98:	mla	r0, lr, r3, r9
   47e9c:	str	r0, [sp, #24]
   47ea0:	lsl	r0, lr, #2
   47ea4:	str	r0, [sp, #32]
   47ea8:	mov	r0, #0
   47eac:	str	r0, [sp, #48]	; 0x30
   47eb0:	cmp	lr, #1
   47eb4:	mov	r0, r9
   47eb8:	blt	47ef0 <GetDataSlab+0x2052c>
   47ebc:	add	r0, sl, r9, lsl #3
   47ec0:	ldr	r9, [sp, #60]	; 0x3c
   47ec4:	mov	r5, lr
   47ec8:	add	r6, r0, r8
   47ecc:	ldrd	r0, [r0]
   47ed0:	bl	584d0 <__aeabi_ul2f>
   47ed4:	str	r0, [r9], #4
   47ed8:	subs	r5, r5, #1
   47edc:	mov	r0, r6
   47ee0:	bne	47ec8 <GetDataSlab+0x20504>
   47ee4:	ldr	r0, [sp, #24]
   47ee8:	ldr	lr, [sp, #40]	; 0x28
   47eec:	ldr	r9, [sp, #28]
   47ef0:	ldr	r2, [sp, #36]	; 0x24
   47ef4:	ldr	r5, [sp, #60]	; 0x3c
   47ef8:	add	r1, sl, r2, lsl #3
   47efc:	mov	ip, r5
   47f00:	sub	r5, fp, #176	; 0xb0
   47f04:	add	sl, r1, r0, lsl #3
   47f08:	add	r0, r0, r4
   47f0c:	add	r4, r0, r2
   47f10:	ldr	r0, [fp, #24]
   47f14:	cmp	r0, #2
   47f18:	blt	47fcc <GetDataSlab+0x20608>
   47f1c:	mov	r1, #0
   47f20:	mov	r0, r1
   47f24:	ldr	r1, [r7, r1, lsl #2]
   47f28:	ldr	r2, [sp, #52]	; 0x34
   47f2c:	add	r1, r1, #1
   47f30:	str	r1, [r7, r0, lsl #2]
   47f34:	ldr	r2, [r2, r0, lsl #2]
   47f38:	sdiv	r3, r1, r2
   47f3c:	mls	r1, r3, r2, r1
   47f40:	cmp	r1, #0
   47f44:	bne	47fbc <GetDataSlab+0x205f8>
   47f48:	mov	r1, #0
   47f4c:	str	r1, [r7, r0, lsl #2]
   47f50:	add	r1, r5, r0, lsl #2
   47f54:	ldr	r1, [r1, #4]
   47f58:	sdiv	r2, r4, r1
   47f5c:	mls	r2, r2, r1, r4
   47f60:	cmp	r2, #0
   47f64:	beq	47f84 <GetDataSlab+0x205c0>
   47f68:	ldr	r6, [sp, #56]	; 0x38
   47f6c:	ldr	r3, [r5, r0, lsl #2]
   47f70:	sub	r1, r1, r2
   47f74:	ldr	r6, [r6, r0, lsl #2]
   47f78:	mla	r1, r6, r3, r1
   47f7c:	add	r4, r1, r4
   47f80:	b	47fa0 <GetDataSlab+0x205dc>
   47f84:	ldr	r1, [sp, #56]	; 0x38
   47f88:	ldr	r1, [r1, r0, lsl #2]
   47f8c:	cmp	r1, #0
   47f90:	beq	47fa4 <GetDataSlab+0x205e0>
   47f94:	ldr	r2, [r5, r0, lsl #2]
   47f98:	mla	r4, r2, r1, r4
   47f9c:	mul	r1, r2, r1
   47fa0:	add	sl, sl, r1, lsl #3
   47fa4:	ldr	r2, [fp, #24]
   47fa8:	add	r1, r0, #1
   47fac:	add	r0, r0, #2
   47fb0:	cmp	r0, r2
   47fb4:	blt	47f20 <GetDataSlab+0x2055c>
   47fb8:	b	47fcc <GetDataSlab+0x20608>
   47fbc:	ldr	r1, [sp, #20]
   47fc0:	ldr	r0, [r1, r0, lsl #2]
   47fc4:	add	sl, sl, r0, lsl #3
   47fc8:	add	r4, r0, r4
   47fcc:	ldr	r2, [sp, #48]	; 0x30
   47fd0:	ldr	r0, [sp, #32]
   47fd4:	ldr	r1, [sp, #44]	; 0x2c
   47fd8:	add	r2, r2, lr
   47fdc:	add	ip, ip, r0
   47fe0:	mov	r0, #0
   47fe4:	cmp	r2, r1
   47fe8:	str	ip, [sp, #60]	; 0x3c
   47fec:	str	r2, [sp, #48]	; 0x30
   47ff0:	blt	47eb0 <GetDataSlab+0x204ec>
   47ff4:	b	47ffc <GetDataSlab+0x20638>
   47ff8:	mov	r0, #0
   47ffc:	sub	sp, fp, #48	; 0x30
   48000:	vpop	{d8-d9}
   48004:	add	sp, sp, #4
   48008:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4800c:	ldr	r0, [sp, #52]	; 0x34
   48010:	cmp	r0, #1
   48014:	blt	2a430 <GetDataSlab+0x2a6c>
   48018:	ldr	r2, [sp, #16]
   4801c:	ldr	r1, [sp, #56]	; 0x38
   48020:	mov	lr, ip
   48024:	mul	r9, lr, r4
   48028:	mla	r0, r2, r4, r6
   4802c:	cmp	r1, #1
   48030:	bic	sl, r1, #1
   48034:	add	ip, r3, r0
   48038:	str	r0, [sp, #36]	; 0x24
   4803c:	add	r0, r1, r6
   48040:	movwne	r7, #1
   48044:	mov	r3, #0
   48048:	add	r6, sp, #76	; 0x4c
   4804c:	mla	r0, r2, r4, r0
   48050:	lsl	r4, r5, #1
   48054:	str	r0, [sp, #40]	; 0x28
   48058:	sub	r0, r5, #1
   4805c:	clz	r0, r0
   48060:	lsr	r0, r0, #5
   48064:	and	r8, r7, r0
   48068:	ldr	r0, [sp, #56]	; 0x38
   4806c:	cmp	r0, #1
   48070:	blt	48150 <GetDataSlab+0x2078c>
   48074:	mov	r1, #0
   48078:	cmp	r8, #0
   4807c:	beq	48110 <GetDataSlab+0x2074c>
   48080:	ldr	r0, [sp, #40]	; 0x28
   48084:	ldr	r2, [sp, #48]	; 0x30
   48088:	ldr	r7, [sp, #32]
   4808c:	mla	r0, r9, r3, r0
   48090:	add	r0, r2, r0
   48094:	ldr	r2, [sp, #60]	; 0x3c
   48098:	cmp	r0, r2
   4809c:	bls	480c4 <GetDataSlab+0x20700>
   480a0:	ldr	r0, [sp, #36]	; 0x24
   480a4:	ldr	r2, [sp, #48]	; 0x30
   480a8:	mla	r0, r9, r3, r0
   480ac:	add	r5, r2, r0
   480b0:	ldr	r0, [sp, #60]	; 0x3c
   480b4:	ldr	r2, [sp, #56]	; 0x38
   480b8:	add	r2, r0, r2, lsl #3
   480bc:	cmp	r5, r2
   480c0:	bcc	48118 <GetDataSlab+0x20754>
   480c4:	ldr	lr, [sp, #60]	; 0x3c
   480c8:	mov	r1, sl
   480cc:	mov	r2, ip
   480d0:	add	r0, lr, sl, lsl #3
   480d4:	ldrh	r5, [r2], r4
   480d8:	subs	r1, r1, #2
   480dc:	strh	r5, [sp, #76]	; 0x4c
   480e0:	vld1.16	{d16[0]}, [r6 :16]
   480e4:	vmovl.u8	q8, d16
   480e8:	vmovl.u16	q0, d16
   480ec:	vcvt.f64.u32	d17, s1
   480f0:	vcvt.f64.u32	d16, s0
   480f4:	vst1.64	{d16-d17}, [lr]!
   480f8:	bne	480d4 <GetDataSlab+0x20710>
   480fc:	ldr	r1, [sp, #56]	; 0x38
   48100:	cmp	r1, sl
   48104:	mov	r1, sl
   48108:	bne	48118 <GetDataSlab+0x20754>
   4810c:	b	48140 <GetDataSlab+0x2077c>
   48110:	ldr	r0, [sp, #60]	; 0x3c
   48114:	ldr	r7, [sp, #32]
   48118:	ldr	r5, [sp, #56]	; 0x38
   4811c:	mla	r2, r7, r1, ip
   48120:	sub	r1, r5, r1
   48124:	ldrb	r5, [r2], r7
   48128:	subs	r1, r1, #1
   4812c:	vmov	s0, r5
   48130:	vcvt.f64.u32	d16, s0
   48134:	vstr	d16, [r0]
   48138:	add	r0, r0, #8
   4813c:	bne	48124 <GetDataSlab+0x20760>
   48140:	ldr	r0, [sp, #60]	; 0x3c
   48144:	ldr	r1, [sp, #56]	; 0x38
   48148:	add	r0, r0, r1, lsl #3
   4814c:	str	r0, [sp, #60]	; 0x3c
   48150:	ldr	r1, [sp, #52]	; 0x34
   48154:	add	r3, r3, #1
   48158:	add	ip, ip, r9
   4815c:	mov	r0, #0
   48160:	cmp	r3, r1
   48164:	bne	48068 <GetDataSlab+0x206a4>
   48168:	b	47ffc <GetDataSlab+0x20638>
   4816c:	ldr	r0, [sp, #52]	; 0x34
   48170:	cmp	r0, #1
   48174:	blt	2a430 <GetDataSlab+0x2a6c>
   48178:	ldr	r0, [sp, #16]
   4817c:	ldr	r1, [sp, #56]	; 0x38
   48180:	mov	r2, ip
   48184:	add	r9, sp, #64	; 0x40
   48188:	mla	r0, r0, r4, r6
   4818c:	cmp	r1, #1
   48190:	lsl	r6, r5, #2
   48194:	bic	r8, r1, #1
   48198:	add	sl, r3, r0, lsl #1
   4819c:	sub	r0, r5, #1
   481a0:	movwne	r7, #1
   481a4:	clz	r0, r0
   481a8:	lsr	r0, r0, #5
   481ac:	and	ip, r7, r0
   481b0:	mul	r0, r2, r4
   481b4:	lsl	r7, r5, #1
   481b8:	mov	r2, #0
   481bc:	lsl	lr, r0, #1
   481c0:	ldr	r0, [sp, #56]	; 0x38
   481c4:	cmp	r0, #1
   481c8:	blt	48258 <GetDataSlab+0x20894>
   481cc:	ldr	r0, [sp, #60]	; 0x3c
   481d0:	mov	r3, #0
   481d4:	cmp	ip, #0
   481d8:	beq	48220 <GetDataSlab+0x2085c>
   481dc:	ldr	r3, [sp, #60]	; 0x3c
   481e0:	mov	r4, r8
   481e4:	mov	r1, sl
   481e8:	add	r0, r3, r8, lsl #3
   481ec:	ldr	r5, [r1], r6
   481f0:	subs	r4, r4, #2
   481f4:	str	r5, [sp, #64]	; 0x40
   481f8:	vld1.32	{d16[0]}, [r9 :32]
   481fc:	vmovl.s16	q0, d16
   48200:	vcvt.f64.s32	d17, s1
   48204:	vcvt.f64.s32	d16, s0
   48208:	vst1.64	{d16-d17}, [r3]!
   4820c:	bne	481ec <GetDataSlab+0x20828>
   48210:	ldr	r1, [sp, #56]	; 0x38
   48214:	mov	r3, r8
   48218:	cmp	r1, r8
   4821c:	beq	48248 <GetDataSlab+0x20884>
   48220:	ldr	r4, [sp, #56]	; 0x38
   48224:	mla	r1, r7, r3, sl
   48228:	sub	r3, r4, r3
   4822c:	ldrsh	r4, [r1], r7
   48230:	subs	r3, r3, #1
   48234:	vmov	s0, r4
   48238:	vcvt.f64.s32	d16, s0
   4823c:	vstr	d16, [r0]
   48240:	add	r0, r0, #8
   48244:	bne	4822c <GetDataSlab+0x20868>
   48248:	ldr	r0, [sp, #60]	; 0x3c
   4824c:	ldr	r1, [sp, #56]	; 0x38
   48250:	add	r0, r0, r1, lsl #3
   48254:	str	r0, [sp, #60]	; 0x3c
   48258:	ldr	r1, [sp, #52]	; 0x34
   4825c:	add	r2, r2, #1
   48260:	add	sl, sl, lr
   48264:	mov	r0, #0
   48268:	cmp	r2, r1
   4826c:	bne	481c0 <GetDataSlab+0x207fc>
   48270:	b	47ffc <GetDataSlab+0x20638>
   48274:	ldr	r0, [sp, #52]	; 0x34
   48278:	cmp	r0, #1
   4827c:	blt	2a430 <GetDataSlab+0x2a6c>
   48280:	ldr	r0, [sp, #16]
   48284:	ldr	r1, [sp, #56]	; 0x38
   48288:	mov	r2, ip
   4828c:	add	r9, sp, #68	; 0x44
   48290:	mla	r0, r0, r4, r6
   48294:	cmp	r1, #1
   48298:	lsl	r6, r5, #2
   4829c:	bic	r8, r1, #1
   482a0:	add	sl, r3, r0, lsl #1
   482a4:	sub	r0, r5, #1
   482a8:	movwne	r7, #1
   482ac:	clz	r0, r0
   482b0:	lsr	r0, r0, #5
   482b4:	and	ip, r7, r0
   482b8:	mul	r0, r2, r4
   482bc:	lsl	r7, r5, #1
   482c0:	mov	r2, #0
   482c4:	lsl	lr, r0, #1
   482c8:	ldr	r0, [sp, #56]	; 0x38
   482cc:	cmp	r0, #1
   482d0:	blt	48360 <GetDataSlab+0x2099c>
   482d4:	ldr	r0, [sp, #60]	; 0x3c
   482d8:	mov	r3, #0
   482dc:	cmp	ip, #0
   482e0:	beq	48328 <GetDataSlab+0x20964>
   482e4:	ldr	r3, [sp, #60]	; 0x3c
   482e8:	mov	r4, r8
   482ec:	mov	r1, sl
   482f0:	add	r0, r3, r8, lsl #3
   482f4:	ldr	r5, [r1], r6
   482f8:	subs	r4, r4, #2
   482fc:	str	r5, [sp, #68]	; 0x44
   48300:	vld1.32	{d16[0]}, [r9 :32]
   48304:	vmovl.u16	q0, d16
   48308:	vcvt.f64.u32	d17, s1
   4830c:	vcvt.f64.u32	d16, s0
   48310:	vst1.64	{d16-d17}, [r3]!
   48314:	bne	482f4 <GetDataSlab+0x20930>
   48318:	ldr	r1, [sp, #56]	; 0x38
   4831c:	mov	r3, r8
   48320:	cmp	r1, r8
   48324:	beq	48350 <GetDataSlab+0x2098c>
   48328:	ldr	r4, [sp, #56]	; 0x38
   4832c:	mla	r1, r7, r3, sl
   48330:	sub	r3, r4, r3
   48334:	ldrh	r4, [r1], r7
   48338:	subs	r3, r3, #1
   4833c:	vmov	s0, r4
   48340:	vcvt.f64.u32	d16, s0
   48344:	vstr	d16, [r0]
   48348:	add	r0, r0, #8
   4834c:	bne	48334 <GetDataSlab+0x20970>
   48350:	ldr	r0, [sp, #60]	; 0x3c
   48354:	ldr	r1, [sp, #56]	; 0x38
   48358:	add	r0, r0, r1, lsl #3
   4835c:	str	r0, [sp, #60]	; 0x3c
   48360:	ldr	r1, [sp, #52]	; 0x34
   48364:	add	r2, r2, #1
   48368:	add	sl, sl, lr
   4836c:	mov	r0, #0
   48370:	cmp	r2, r1
   48374:	bne	482c8 <GetDataSlab+0x20904>
   48378:	b	47ffc <GetDataSlab+0x20638>
   4837c:	ldr	r0, [sp, #52]	; 0x34
   48380:	cmp	r0, #1
   48384:	blt	2a430 <GetDataSlab+0x2a6c>
   48388:	ldr	r0, [sp, #16]
   4838c:	ldr	r1, [sp, #56]	; 0x38
   48390:	ldr	r9, [sp, #56]	; 0x38
   48394:	mov	r2, ip
   48398:	mla	r0, r0, r4, r6
   4839c:	cmp	r1, #1
   483a0:	lsl	r6, r5, #3
   483a4:	bic	r8, r1, #1
   483a8:	add	r3, r3, r0, lsl #2
   483ac:	sub	r0, r5, #1
   483b0:	movwne	r7, #1
   483b4:	clz	r0, r0
   483b8:	lsr	r0, r0, #5
   483bc:	and	ip, r7, r0
   483c0:	mul	r0, r2, r4
   483c4:	lsl	r7, r5, #2
   483c8:	mov	r2, #0
   483cc:	lsl	lr, r0, #2
   483d0:	cmp	r9, #1
   483d4:	blt	4844c <GetDataSlab+0x20a88>
   483d8:	ldr	r0, [sp, #60]	; 0x3c
   483dc:	mov	r4, #0
   483e0:	cmp	ip, #0
   483e4:	beq	4841c <GetDataSlab+0x20a58>
   483e8:	ldr	r5, [sp, #60]	; 0x3c
   483ec:	mov	r4, r8
   483f0:	mov	r1, r3
   483f4:	add	r0, r5, r8, lsl #3
   483f8:	vld1.32	{d0}, [r1], r6
   483fc:	subs	r4, r4, #2
   48400:	vcvt.f64.s32	d17, s1
   48404:	vcvt.f64.s32	d16, s0
   48408:	vst1.64	{d16-d17}, [r5]!
   4840c:	bne	483f8 <GetDataSlab+0x20a34>
   48410:	cmp	r9, r8
   48414:	mov	r4, r8
   48418:	beq	48440 <GetDataSlab+0x20a7c>
   4841c:	mla	r1, r7, r4, r3
   48420:	sub	r4, r9, r4
   48424:	ldr	r5, [r1], r7
   48428:	subs	r4, r4, #1
   4842c:	vmov	s0, r5
   48430:	vcvt.f64.s32	d16, s0
   48434:	vstr	d16, [r0]
   48438:	add	r0, r0, #8
   4843c:	bne	48424 <GetDataSlab+0x20a60>
   48440:	ldr	r0, [sp, #60]	; 0x3c
   48444:	add	r0, r0, r9, lsl #3
   48448:	str	r0, [sp, #60]	; 0x3c
   4844c:	ldr	r1, [sp, #52]	; 0x34
   48450:	add	r2, r2, #1
   48454:	add	r3, r3, lr
   48458:	mov	r0, #0
   4845c:	cmp	r2, r1
   48460:	bne	483d0 <GetDataSlab+0x20a0c>
   48464:	b	47ffc <GetDataSlab+0x20638>
   48468:	ldr	r0, [sp, #52]	; 0x34
   4846c:	cmp	r0, #1
   48470:	blt	2a430 <GetDataSlab+0x2a6c>
   48474:	ldr	r0, [sp, #16]
   48478:	ldr	r1, [sp, #56]	; 0x38
   4847c:	ldr	r9, [sp, #56]	; 0x38
   48480:	mov	r2, ip
   48484:	mla	r0, r0, r4, r6
   48488:	cmp	r1, #1
   4848c:	lsl	r6, r5, #3
   48490:	bic	r8, r1, #1
   48494:	add	r3, r3, r0, lsl #2
   48498:	sub	r0, r5, #1
   4849c:	movwne	r7, #1
   484a0:	clz	r0, r0
   484a4:	lsr	r0, r0, #5
   484a8:	and	ip, r7, r0
   484ac:	mul	r0, r2, r4
   484b0:	lsl	r7, r5, #2
   484b4:	mov	r2, #0
   484b8:	lsl	lr, r0, #2
   484bc:	cmp	r9, #1
   484c0:	blt	48538 <GetDataSlab+0x20b74>
   484c4:	ldr	r0, [sp, #60]	; 0x3c
   484c8:	mov	r4, #0
   484cc:	cmp	ip, #0
   484d0:	beq	48508 <GetDataSlab+0x20b44>
   484d4:	ldr	r5, [sp, #60]	; 0x3c
   484d8:	mov	r4, r8
   484dc:	mov	r1, r3
   484e0:	add	r0, r5, r8, lsl #3
   484e4:	vld1.32	{d0}, [r1], r6
   484e8:	subs	r4, r4, #2
   484ec:	vcvt.f64.u32	d17, s1
   484f0:	vcvt.f64.u32	d16, s0
   484f4:	vst1.64	{d16-d17}, [r5]!
   484f8:	bne	484e4 <GetDataSlab+0x20b20>
   484fc:	cmp	r9, r8
   48500:	mov	r4, r8
   48504:	beq	4852c <GetDataSlab+0x20b68>
   48508:	mla	r1, r7, r4, r3
   4850c:	sub	r4, r9, r4
   48510:	ldr	r5, [r1], r7
   48514:	subs	r4, r4, #1
   48518:	vmov	s0, r5
   4851c:	vcvt.f64.u32	d16, s0
   48520:	vstr	d16, [r0]
   48524:	add	r0, r0, #8
   48528:	bne	48510 <GetDataSlab+0x20b4c>
   4852c:	ldr	r0, [sp, #60]	; 0x3c
   48530:	add	r0, r0, r9, lsl #3
   48534:	str	r0, [sp, #60]	; 0x3c
   48538:	ldr	r1, [sp, #52]	; 0x34
   4853c:	add	r2, r2, #1
   48540:	add	r3, r3, lr
   48544:	mov	r0, #0
   48548:	cmp	r2, r1
   4854c:	bne	484bc <GetDataSlab+0x20af8>
   48550:	b	47ffc <GetDataSlab+0x20638>
   48554:	ldr	r0, [sp, #52]	; 0x34
   48558:	cmp	r0, #1
   4855c:	blt	2a430 <GetDataSlab+0x2a6c>
   48560:	ldr	r0, [sp, #16]
   48564:	ldr	r2, [sp, #56]	; 0x38
   48568:	ldr	r9, [sp, #56]	; 0x38
   4856c:	mla	r0, r0, r4, r6
   48570:	cmp	r2, #1
   48574:	bic	r8, r2, #1
   48578:	lsl	r6, r5, #3
   4857c:	mov	r2, #0
   48580:	add	r1, r3, r0, lsl #2
   48584:	sub	r0, r5, #1
   48588:	movwne	r7, #1
   4858c:	mov	r3, ip
   48590:	clz	r0, r0
   48594:	lsr	r0, r0, #5
   48598:	and	ip, r7, r0
   4859c:	mul	r0, r3, r4
   485a0:	lsl	r7, r5, #2
   485a4:	lsl	lr, r0, #2
   485a8:	cmp	r9, #1
   485ac:	blt	48624 <GetDataSlab+0x20c60>
   485b0:	ldr	r0, [sp, #60]	; 0x3c
   485b4:	mov	r4, #0
   485b8:	cmp	ip, #0
   485bc:	beq	485f4 <GetDataSlab+0x20c30>
   485c0:	ldr	r3, [sp, #60]	; 0x3c
   485c4:	mov	r4, r8
   485c8:	mov	r5, r1
   485cc:	add	r0, r3, r8, lsl #3
   485d0:	vld1.32	{d0}, [r5], r6
   485d4:	subs	r4, r4, #2
   485d8:	vcvt.f64.f32	d17, s1
   485dc:	vcvt.f64.f32	d16, s0
   485e0:	vst1.64	{d16-d17}, [r3]!
   485e4:	bne	485d0 <GetDataSlab+0x20c0c>
   485e8:	cmp	r9, r8
   485ec:	mov	r4, r8
   485f0:	beq	48618 <GetDataSlab+0x20c54>
   485f4:	mla	r3, r7, r4, r1
   485f8:	sub	r4, r9, r4
   485fc:	vldr	s0, [r3]
   48600:	add	r3, r3, r7
   48604:	subs	r4, r4, #1
   48608:	vcvt.f64.f32	d16, s0
   4860c:	vstr	d16, [r0]
   48610:	add	r0, r0, #8
   48614:	bne	485fc <GetDataSlab+0x20c38>
   48618:	ldr	r0, [sp, #60]	; 0x3c
   4861c:	add	r0, r0, r9, lsl #3
   48620:	str	r0, [sp, #60]	; 0x3c
   48624:	ldr	r3, [sp, #52]	; 0x34
   48628:	add	r2, r2, #1
   4862c:	add	r1, r1, lr
   48630:	mov	r0, #0
   48634:	cmp	r2, r3
   48638:	bne	485a8 <GetDataSlab+0x20be4>
   4863c:	b	47ffc <GetDataSlab+0x20638>
   48640:	ldr	r0, [sp, #52]	; 0x34
   48644:	cmp	r0, #1
   48648:	blt	2a430 <GetDataSlab+0x2a6c>
   4864c:	ldr	r0, [sp, #16]
   48650:	ldr	r2, [sp, #56]	; 0x38
   48654:	mla	r0, r0, r4, r6
   48658:	cmp	r2, #1
   4865c:	lsl	r6, r5, #3
   48660:	bic	r9, r2, #1
   48664:	add	r1, r3, r0, lsl #3
   48668:	mov	r3, ip
   4866c:	lsl	ip, r0, #3
   48670:	sub	r0, r5, #1
   48674:	movwne	r7, #1
   48678:	clz	r0, r0
   4867c:	add	lr, ip, r2, lsl #3
   48680:	lsr	r0, r0, #5
   48684:	and	r8, r7, r0
   48688:	mul	r0, r3, r4
   4868c:	lsl	r4, r5, #4
   48690:	mov	r3, #0
   48694:	lsl	sl, r0, #3
   48698:	ldr	r0, [sp, #56]	; 0x38
   4869c:	cmp	r0, #1
   486a0:	blt	48758 <GetDataSlab+0x20d94>
   486a4:	mov	r2, #0
   486a8:	cmp	r8, #0
   486ac:	beq	48720 <GetDataSlab+0x20d5c>
   486b0:	ldr	r5, [sp, #48]	; 0x30
   486b4:	mla	r0, sl, r3, lr
   486b8:	add	r0, r5, r0
   486bc:	ldr	r5, [sp, #60]	; 0x3c
   486c0:	cmp	r0, r5
   486c4:	bls	486ec <GetDataSlab+0x20d28>
   486c8:	ldr	r5, [sp, #48]	; 0x30
   486cc:	mla	r0, sl, r3, ip
   486d0:	ldr	r7, [sp, #60]	; 0x3c
   486d4:	add	r0, r5, r0
   486d8:	ldr	r5, [sp, #56]	; 0x38
   486dc:	add	r5, r7, r5, lsl #3
   486e0:	cmp	r0, r5
   486e4:	mov	r0, r7
   486e8:	bcc	48724 <GetDataSlab+0x20d60>
   486ec:	ldr	r7, [sp, #60]	; 0x3c
   486f0:	mov	r2, r9
   486f4:	mov	r5, r1
   486f8:	add	r0, r7, r9, lsl #3
   486fc:	vld1.64	{d16-d17}, [r5], r4
   48700:	subs	r2, r2, #2
   48704:	vst1.64	{d16-d17}, [r7]!
   48708:	bne	486fc <GetDataSlab+0x20d38>
   4870c:	ldr	r2, [sp, #56]	; 0x38
   48710:	cmp	r2, r9
   48714:	mov	r2, r9
   48718:	bne	48724 <GetDataSlab+0x20d60>
   4871c:	b	48748 <GetDataSlab+0x20d84>
   48720:	ldr	r0, [sp, #60]	; 0x3c
   48724:	ldr	r7, [sp, #56]	; 0x38
   48728:	mla	r5, r6, r2, r1
   4872c:	sub	r2, r7, r2
   48730:	vldr	d16, [r5]
   48734:	add	r5, r5, r6
   48738:	subs	r2, r2, #1
   4873c:	vstr	d16, [r0]
   48740:	add	r0, r0, #8
   48744:	bne	48730 <GetDataSlab+0x20d6c>
   48748:	ldr	r0, [sp, #60]	; 0x3c
   4874c:	ldr	r2, [sp, #56]	; 0x38
   48750:	add	r0, r0, r2, lsl #3
   48754:	str	r0, [sp, #60]	; 0x3c
   48758:	ldr	r2, [sp, #52]	; 0x34
   4875c:	add	r3, r3, #1
   48760:	add	r1, r1, sl
   48764:	mov	r0, #0
   48768:	cmp	r3, r2
   4876c:	bne	48698 <GetDataSlab+0x20cd4>
   48770:	b	47ffc <GetDataSlab+0x20638>
   48774:	ldr	r0, [sp, #52]	; 0x34
   48778:	cmp	r0, #1
   4877c:	blt	2a430 <GetDataSlab+0x2a6c>
   48780:	ldr	r0, [sp, #16]
   48784:	ldr	r2, [sp, #56]	; 0x38
   48788:	mla	r0, r0, r4, r6
   4878c:	mov	r6, r5
   48790:	cmp	r2, #1
   48794:	bic	r9, r2, #1
   48798:	mov	r2, #0
   4879c:	sub	r1, r6, #1
   487a0:	add	r5, r3, r0, lsl #3
   487a4:	mov	r0, r7
   487a8:	ldr	r7, [sp, #60]	; 0x3c
   487ac:	lsl	r8, r6, #3
   487b0:	clz	r1, r1
   487b4:	movwne	r0, #1
   487b8:	lsr	r1, r1, #5
   487bc:	and	sl, r0, r1
   487c0:	mul	r0, ip, r4
   487c4:	lsl	r1, r6, #4
   487c8:	lsl	r0, r0, #3
   487cc:	str	r0, [sp, #12]
   487d0:	stmib	sp, {r1, sl}
   487d4:	str	r9, [sp]
   487d8:	ldr	r0, [sp, #56]	; 0x38
   487dc:	cmp	r0, #1
   487e0:	blt	4889c <GetDataSlab+0x20ed8>
   487e4:	mov	r0, #0
   487e8:	cmp	sl, #0
   487ec:	str	r2, [sp, #36]	; 0x24
   487f0:	str	r7, [sp, #60]	; 0x3c
   487f4:	beq	4885c <GetDataSlab+0x20e98>
   487f8:	ldr	sl, [sp, #60]	; 0x3c
   487fc:	mov	r4, r9
   48800:	mov	r6, r5
   48804:	add	r7, sl, r9, lsl #3
   48808:	ldr	r9, [sp, #4]
   4880c:	vld1.64	{d8-d9}, [r6], r9
   48810:	vmov.32	r0, d9[0]
   48814:	vmov.32	r1, d9[1]
   48818:	bl	582ac <__aeabi_l2d>
   4881c:	vmov.32	r2, d8[0]
   48820:	vmov.32	r3, d8[1]
   48824:	vmov	d9, r0, r1
   48828:	mov	r0, r2
   4882c:	mov	r1, r3
   48830:	bl	582ac <__aeabi_l2d>
   48834:	vmov	d8, r0, r1
   48838:	subs	r4, r4, #2
   4883c:	vst1.64	{d8-d9}, [sl]!
   48840:	bne	4880c <GetDataSlab+0x20e48>
   48844:	ldr	r0, [sp, #56]	; 0x38
   48848:	ldr	r9, [sp]
   4884c:	ldr	sl, [sp, #8]
   48850:	cmp	r0, r9
   48854:	mov	r0, r9
   48858:	beq	48884 <GetDataSlab+0x20ec0>
   4885c:	ldr	r1, [sp, #56]	; 0x38
   48860:	mla	r4, r8, r0, r5
   48864:	sub	r6, r1, r0
   48868:	ldrd	r0, [r4]
   4886c:	bl	582ac <__aeabi_l2d>
   48870:	strd	r0, [r7]
   48874:	add	r4, r4, r8
   48878:	subs	r6, r6, #1
   4887c:	add	r7, r7, #8
   48880:	bne	48868 <GetDataSlab+0x20ea4>
   48884:	ldr	r7, [sp, #60]	; 0x3c
   48888:	ldr	r0, [sp, #56]	; 0x38
   4888c:	ldr	r4, [sp, #44]	; 0x2c
   48890:	ldr	ip, [sp, #28]
   48894:	ldr	r2, [sp, #36]	; 0x24
   48898:	add	r7, r7, r0, lsl #3
   4889c:	ldr	r0, [sp, #12]
   488a0:	add	r2, r2, #1
   488a4:	add	r5, r5, r0
   488a8:	ldr	r0, [sp, #52]	; 0x34
   488ac:	cmp	r2, r0
   488b0:	bne	487d8 <GetDataSlab+0x20e14>
   488b4:	mov	r0, #0
   488b8:	str	r7, [sp, #60]	; 0x3c
   488bc:	ldr	r1, [sp, #40]	; 0x28
   488c0:	cmp	r1, #13
   488c4:	bne	47ffc <GetDataSlab+0x20638>
   488c8:	ldr	r0, [sp, #52]	; 0x34
   488cc:	cmp	r0, #1
   488d0:	blt	2a430 <GetDataSlab+0x2a6c>
   488d4:	ldr	r0, [sp, #16]
   488d8:	ldr	r1, [sp, #24]
   488dc:	ldr	r2, [sp, #32]
   488e0:	ldr	r3, [sp, #20]
   488e4:	mla	r0, r0, r4, r1
   488e8:	ldr	r1, [sp, #48]	; 0x30
   488ec:	add	r0, r1, r0, lsl #3
   488f0:	ldr	r1, [sp, #56]	; 0x38
   488f4:	str	r0, [sp, #48]	; 0x30
   488f8:	sub	r0, r2, #1
   488fc:	clz	r0, r0
   48900:	lsr	r0, r0, #5
   48904:	cmp	r1, #1
   48908:	movwne	r3, #1
   4890c:	and	r0, r3, r0
   48910:	str	r0, [sp, #36]	; 0x24
   48914:	mul	r0, ip, r4
   48918:	lsl	r4, r2, #3
   4891c:	lsl	r0, r0, #3
   48920:	str	r0, [sp, #40]	; 0x28
   48924:	lsl	r0, r2, #4
   48928:	str	r0, [sp, #28]
   4892c:	bic	r0, r1, #1
   48930:	str	r0, [sp, #32]
   48934:	mov	r0, #0
   48938:	str	r0, [sp, #44]	; 0x2c
   4893c:	ldr	r5, [sp, #56]	; 0x38
   48940:	cmp	r5, #1
   48944:	blt	489ec <GetDataSlab+0x21028>
   48948:	ldr	r1, [sp, #36]	; 0x24
   4894c:	ldr	sl, [sp, #60]	; 0x3c
   48950:	mov	r0, #0
   48954:	cmp	r1, #0
   48958:	beq	489b8 <GetDataSlab+0x20ff4>
   4895c:	ldr	r8, [sp, #60]	; 0x3c
   48960:	ldr	r9, [sp, #32]
   48964:	ldr	r6, [sp, #48]	; 0x30
   48968:	ldr	r5, [sp, #28]
   4896c:	add	sl, r8, r9, lsl #3
   48970:	vld1.64	{d8-d9}, [r6], r5
   48974:	vmov.32	r0, d9[0]
   48978:	vmov.32	r1, d9[1]
   4897c:	bl	58298 <__aeabi_ul2d>
   48980:	vmov.32	r2, d8[0]
   48984:	vmov.32	r3, d8[1]
   48988:	vmov	d9, r0, r1
   4898c:	mov	r0, r2
   48990:	mov	r1, r3
   48994:	bl	58298 <__aeabi_ul2d>
   48998:	vmov	d8, r0, r1
   4899c:	subs	r9, r9, #2
   489a0:	vst1.64	{d8-d9}, [r8]!
   489a4:	bne	48970 <GetDataSlab+0x20fac>
   489a8:	ldr	r5, [sp, #56]	; 0x38
   489ac:	ldr	r0, [sp, #32]
   489b0:	cmp	r5, r0
   489b4:	beq	489e0 <GetDataSlab+0x2101c>
   489b8:	ldr	r1, [sp, #48]	; 0x30
   489bc:	sub	r7, r5, r0
   489c0:	mla	r6, r4, r0, r1
   489c4:	ldrd	r0, [r6]
   489c8:	bl	58298 <__aeabi_ul2d>
   489cc:	strd	r0, [sl]
   489d0:	add	r6, r6, r4
   489d4:	subs	r7, r7, #1
   489d8:	add	sl, sl, #8
   489dc:	bne	489c4 <GetDataSlab+0x21000>
   489e0:	ldr	r0, [sp, #60]	; 0x3c
   489e4:	add	r0, r0, r5, lsl #3
   489e8:	str	r0, [sp, #60]	; 0x3c
   489ec:	ldr	r0, [sp, #48]	; 0x30
   489f0:	ldr	r2, [sp, #40]	; 0x28
   489f4:	ldr	r1, [sp, #52]	; 0x34
   489f8:	add	r0, r0, r2
   489fc:	ldr	r2, [sp, #44]	; 0x2c
   48a00:	str	r0, [sp, #48]	; 0x30
   48a04:	mov	r0, #0
   48a08:	add	r2, r2, #1
   48a0c:	cmp	r2, r1
   48a10:	str	r2, [sp, #44]	; 0x2c
   48a14:	bne	4893c <GetDataSlab+0x20f78>
   48a18:	b	47ffc <GetDataSlab+0x20638>
   48a1c:	ldr	r0, [sp, #52]	; 0x34
   48a20:	cmp	r0, #1
   48a24:	blt	2a430 <GetDataSlab+0x2a6c>
   48a28:	ldr	r1, [sp, #16]
   48a2c:	mul	r8, ip, r4
   48a30:	mov	r6, #0
   48a34:	add	r9, sp, #84	; 0x54
   48a38:	mla	r0, r1, r4, r7
   48a3c:	add	r2, r3, r0
   48a40:	ldr	r3, [sp, #56]	; 0x38
   48a44:	str	r0, [sp, #36]	; 0x24
   48a48:	add	r0, r3, r7
   48a4c:	cmp	r3, #3
   48a50:	bic	sl, r3, #3
   48a54:	mla	r0, r1, r4, r0
   48a58:	mov	r1, #0
   48a5c:	str	r0, [sp, #40]	; 0x28
   48a60:	sub	r0, r5, #1
   48a64:	movwhi	r1, #1
   48a68:	clz	r0, r0
   48a6c:	lsr	r0, r0, #5
   48a70:	and	r0, r1, r0
   48a74:	lsl	r1, r5, #2
   48a78:	str	r0, [sp, #44]	; 0x2c
   48a7c:	ldr	r0, [sp, #56]	; 0x38
   48a80:	cmp	r0, #1
   48a84:	blt	48b60 <GetDataSlab+0x2119c>
   48a88:	ldr	r0, [sp, #44]	; 0x2c
   48a8c:	ldr	ip, [sp, #60]	; 0x3c
   48a90:	mov	r3, #0
   48a94:	cmp	r0, #0
   48a98:	beq	48b24 <GetDataSlab+0x21160>
   48a9c:	ldr	r0, [sp, #40]	; 0x28
   48aa0:	ldr	r7, [sp, #48]	; 0x30
   48aa4:	ldr	r4, [sp, #32]
   48aa8:	mla	r0, r8, r6, r0
   48aac:	add	r0, r7, r0
   48ab0:	cmp	r0, ip
   48ab4:	bls	48adc <GetDataSlab+0x21118>
   48ab8:	ldr	r0, [sp, #36]	; 0x24
   48abc:	ldr	r7, [sp, #48]	; 0x30
   48ac0:	mla	r0, r8, r6, r0
   48ac4:	add	r0, r7, r0
   48ac8:	ldr	r7, [sp, #56]	; 0x38
   48acc:	add	r5, ip, r7, lsl #2
   48ad0:	cmp	r0, r5
   48ad4:	mov	r0, ip
   48ad8:	bcc	48b2c <GetDataSlab+0x21168>
   48adc:	add	r0, ip, sl, lsl #2
   48ae0:	mov	r3, sl
   48ae4:	mov	r5, r2
   48ae8:	ldr	lr, [r5], r1
   48aec:	subs	r3, r3, #4
   48af0:	str	lr, [sp, #84]	; 0x54
   48af4:	vld1.32	{d16[0]}, [r9 :32]
   48af8:	vmovl.u8	q8, d16
   48afc:	vmovl.u16	q8, d16
   48b00:	vcvt.f32.u32	q8, q8
   48b04:	vst1.32	{d16-d17}, [ip]!
   48b08:	bne	48ae8 <GetDataSlab+0x21124>
   48b0c:	ldr	r3, [sp, #56]	; 0x38
   48b10:	ldr	ip, [sp, #60]	; 0x3c
   48b14:	cmp	r3, sl
   48b18:	mov	r3, sl
   48b1c:	bne	48b2c <GetDataSlab+0x21168>
   48b20:	b	48b54 <GetDataSlab+0x21190>
   48b24:	ldr	r4, [sp, #32]
   48b28:	mov	r0, ip
   48b2c:	ldr	r7, [sp, #56]	; 0x38
   48b30:	mla	r5, r4, r3, r2
   48b34:	sub	r3, r7, r3
   48b38:	ldrb	r7, [r5], r4
   48b3c:	subs	r3, r3, #1
   48b40:	vmov	s0, r7
   48b44:	vcvt.f32.u32	s0, s0
   48b48:	vstr	s0, [r0]
   48b4c:	add	r0, r0, #4
   48b50:	bne	48b38 <GetDataSlab+0x21174>
   48b54:	ldr	r0, [sp, #56]	; 0x38
   48b58:	add	ip, ip, r0, lsl #2
   48b5c:	str	ip, [sp, #60]	; 0x3c
   48b60:	ldr	r3, [sp, #52]	; 0x34
   48b64:	add	r6, r6, #1
   48b68:	add	r2, r2, r8
   48b6c:	mov	r0, #0
   48b70:	cmp	r6, r3
   48b74:	bne	48a7c <GetDataSlab+0x210b8>
   48b78:	b	47ffc <GetDataSlab+0x20638>
   48b7c:	ldr	r0, [sp, #52]	; 0x34
   48b80:	cmp	r0, #1
   48b84:	blt	2a430 <GetDataSlab+0x2a6c>
   48b88:	ldr	r0, [sp, #16]
   48b8c:	ldr	r9, [sp, #56]	; 0x38
   48b90:	mov	r6, ip
   48b94:	mov	r2, #0
   48b98:	mla	r0, r0, r4, r7
   48b9c:	ldr	r7, [sp, #56]	; 0x38
   48ba0:	add	r1, r3, r0, lsl #1
   48ba4:	sub	r3, r5, #1
   48ba8:	mov	r0, #0
   48bac:	clz	r3, r3
   48bb0:	lsr	r3, r3, #5
   48bb4:	cmp	r7, #3
   48bb8:	bic	r8, r7, #3
   48bbc:	movwhi	r0, #1
   48bc0:	and	ip, r0, r3
   48bc4:	mul	r0, r6, r4
   48bc8:	lsl	r6, r5, #1
   48bcc:	lsl	r4, r5, #3
   48bd0:	lsl	lr, r0, #1
   48bd4:	cmp	r9, #1
   48bd8:	blt	48c50 <GetDataSlab+0x2128c>
   48bdc:	ldr	r0, [sp, #60]	; 0x3c
   48be0:	mov	r3, #0
   48be4:	cmp	ip, #0
   48be8:	beq	48c20 <GetDataSlab+0x2125c>
   48bec:	ldr	r3, [sp, #60]	; 0x3c
   48bf0:	mov	r5, r8
   48bf4:	mov	r7, r1
   48bf8:	add	r0, r3, r8, lsl #2
   48bfc:	vld1.16	{d16}, [r7], r4
   48c00:	subs	r5, r5, #4
   48c04:	vmovl.s16	q8, d16
   48c08:	vcvt.f32.s32	q8, q8
   48c0c:	vst1.32	{d16-d17}, [r3]!
   48c10:	bne	48bfc <GetDataSlab+0x21238>
   48c14:	cmp	r9, r8
   48c18:	mov	r3, r8
   48c1c:	beq	48c44 <GetDataSlab+0x21280>
   48c20:	mla	r5, r6, r3, r1
   48c24:	sub	r7, r9, r3
   48c28:	ldrsh	r3, [r5], r6
   48c2c:	subs	r7, r7, #1
   48c30:	vmov	s0, r3
   48c34:	vcvt.f32.s32	s0, s0
   48c38:	vstr	s0, [r0]
   48c3c:	add	r0, r0, #4
   48c40:	bne	48c28 <GetDataSlab+0x21264>
   48c44:	ldr	r0, [sp, #60]	; 0x3c
   48c48:	add	r0, r0, r9, lsl #2
   48c4c:	str	r0, [sp, #60]	; 0x3c
   48c50:	ldr	r3, [sp, #52]	; 0x34
   48c54:	add	r2, r2, #1
   48c58:	add	r1, r1, lr
   48c5c:	mov	r0, #0
   48c60:	cmp	r2, r3
   48c64:	bne	48bd4 <GetDataSlab+0x21210>
   48c68:	b	47ffc <GetDataSlab+0x20638>
   48c6c:	ldr	r0, [sp, #52]	; 0x34
   48c70:	cmp	r0, #1
   48c74:	blt	2a430 <GetDataSlab+0x2a6c>
   48c78:	ldr	r0, [sp, #16]
   48c7c:	ldr	r9, [sp, #56]	; 0x38
   48c80:	mov	r6, ip
   48c84:	mov	r2, #0
   48c88:	mla	r0, r0, r4, r7
   48c8c:	ldr	r7, [sp, #56]	; 0x38
   48c90:	add	r1, r3, r0, lsl #1
   48c94:	sub	r3, r5, #1
   48c98:	mov	r0, #0
   48c9c:	clz	r3, r3
   48ca0:	lsr	r3, r3, #5
   48ca4:	cmp	r7, #3
   48ca8:	bic	r8, r7, #3
   48cac:	movwhi	r0, #1
   48cb0:	and	ip, r0, r3
   48cb4:	mul	r0, r6, r4
   48cb8:	lsl	r6, r5, #1
   48cbc:	lsl	r4, r5, #3
   48cc0:	lsl	lr, r0, #1
   48cc4:	cmp	r9, #1
   48cc8:	blt	48d40 <GetDataSlab+0x2137c>
   48ccc:	ldr	r0, [sp, #60]	; 0x3c
   48cd0:	mov	r3, #0
   48cd4:	cmp	ip, #0
   48cd8:	beq	48d10 <GetDataSlab+0x2134c>
   48cdc:	ldr	r3, [sp, #60]	; 0x3c
   48ce0:	mov	r5, r8
   48ce4:	mov	r7, r1
   48ce8:	add	r0, r3, r8, lsl #2
   48cec:	vld1.16	{d16}, [r7], r4
   48cf0:	subs	r5, r5, #4
   48cf4:	vmovl.u16	q8, d16
   48cf8:	vcvt.f32.u32	q8, q8
   48cfc:	vst1.32	{d16-d17}, [r3]!
   48d00:	bne	48cec <GetDataSlab+0x21328>
   48d04:	cmp	r9, r8
   48d08:	mov	r3, r8
   48d0c:	beq	48d34 <GetDataSlab+0x21370>
   48d10:	mla	r5, r6, r3, r1
   48d14:	sub	r7, r9, r3
   48d18:	ldrh	r3, [r5], r6
   48d1c:	subs	r7, r7, #1
   48d20:	vmov	s0, r3
   48d24:	vcvt.f32.u32	s0, s0
   48d28:	vstr	s0, [r0]
   48d2c:	add	r0, r0, #4
   48d30:	bne	48d18 <GetDataSlab+0x21354>
   48d34:	ldr	r0, [sp, #60]	; 0x3c
   48d38:	add	r0, r0, r9, lsl #2
   48d3c:	str	r0, [sp, #60]	; 0x3c
   48d40:	ldr	r3, [sp, #52]	; 0x34
   48d44:	add	r2, r2, #1
   48d48:	add	r1, r1, lr
   48d4c:	mov	r0, #0
   48d50:	cmp	r2, r3
   48d54:	bne	48cc4 <GetDataSlab+0x21300>
   48d58:	b	47ffc <GetDataSlab+0x20638>
   48d5c:	ldr	r0, [sp, #52]	; 0x34
   48d60:	cmp	r0, #1
   48d64:	blt	2a430 <GetDataSlab+0x2a6c>
   48d68:	ldr	r0, [sp, #16]
   48d6c:	sub	r1, r5, #1
   48d70:	mov	r6, ip
   48d74:	mov	r2, #0
   48d78:	clz	r1, r1
   48d7c:	lsr	r1, r1, #5
   48d80:	mla	r0, r0, r4, r7
   48d84:	add	r7, r3, r0, lsl #2
   48d88:	ldr	r3, [sp, #56]	; 0x38
   48d8c:	mov	r0, #0
   48d90:	cmp	r3, #3
   48d94:	bic	r8, r3, #3
   48d98:	movwhi	r0, #1
   48d9c:	and	ip, r0, r1
   48da0:	mul	r0, r6, r4
   48da4:	ldr	r4, [sp, #32]
   48da8:	lsl	r6, r5, #4
   48dac:	lsl	lr, r0, #2
   48db0:	ldr	r0, [sp, #56]	; 0x38
   48db4:	cmp	r0, #1
   48db8:	blt	48e3c <GetDataSlab+0x21478>
   48dbc:	ldr	r0, [sp, #60]	; 0x3c
   48dc0:	mov	r1, #0
   48dc4:	cmp	ip, #0
   48dc8:	beq	48e00 <GetDataSlab+0x2143c>
   48dcc:	ldr	r5, [sp, #60]	; 0x3c
   48dd0:	mov	r3, r8
   48dd4:	mov	r1, r7
   48dd8:	add	r0, r5, r8, lsl #2
   48ddc:	vld1.32	{d16-d17}, [r1], r6
   48de0:	subs	r3, r3, #4
   48de4:	vcvt.f32.s32	q8, q8
   48de8:	vst1.32	{d16-d17}, [r5]!
   48dec:	bne	48ddc <GetDataSlab+0x21418>
   48df0:	ldr	r1, [sp, #56]	; 0x38
   48df4:	cmp	r1, r8
   48df8:	mov	r1, r8
   48dfc:	beq	48e2c <GetDataSlab+0x21468>
   48e00:	ldr	r3, [sp, #56]	; 0x38
   48e04:	mul	r5, r4, r1
   48e08:	sub	r3, r3, r1
   48e0c:	add	r1, r7, r5, lsl #2
   48e10:	add	r5, r5, r4
   48e14:	subs	r3, r3, #1
   48e18:	vldr	s0, [r1]
   48e1c:	vcvt.f32.s32	s0, s0
   48e20:	vstr	s0, [r0]
   48e24:	add	r0, r0, #4
   48e28:	bne	48e0c <GetDataSlab+0x21448>
   48e2c:	ldr	r0, [sp, #60]	; 0x3c
   48e30:	ldr	r1, [sp, #56]	; 0x38
   48e34:	add	r0, r0, r1, lsl #2
   48e38:	str	r0, [sp, #60]	; 0x3c
   48e3c:	ldr	r1, [sp, #52]	; 0x34
   48e40:	add	r2, r2, #1
   48e44:	add	r7, r7, lr
   48e48:	mov	r0, #0
   48e4c:	cmp	r2, r1
   48e50:	bne	48db0 <GetDataSlab+0x213ec>
   48e54:	b	47ffc <GetDataSlab+0x20638>
   48e58:	ldr	r0, [sp, #52]	; 0x34
   48e5c:	cmp	r0, #1
   48e60:	blt	2a430 <GetDataSlab+0x2a6c>
   48e64:	ldr	r0, [sp, #16]
   48e68:	sub	r1, r5, #1
   48e6c:	mov	r6, ip
   48e70:	mov	r2, #0
   48e74:	clz	r1, r1
   48e78:	lsr	r1, r1, #5
   48e7c:	mla	r0, r0, r4, r7
   48e80:	add	r7, r3, r0, lsl #2
   48e84:	ldr	r3, [sp, #56]	; 0x38
   48e88:	mov	r0, #0
   48e8c:	cmp	r3, #3
   48e90:	bic	r8, r3, #3
   48e94:	movwhi	r0, #1
   48e98:	and	ip, r0, r1
   48e9c:	mul	r0, r6, r4
   48ea0:	ldr	r4, [sp, #32]
   48ea4:	lsl	r6, r5, #4
   48ea8:	lsl	lr, r0, #2
   48eac:	ldr	r0, [sp, #56]	; 0x38
   48eb0:	cmp	r0, #1
   48eb4:	blt	48f38 <GetDataSlab+0x21574>
   48eb8:	ldr	r0, [sp, #60]	; 0x3c
   48ebc:	mov	r1, #0
   48ec0:	cmp	ip, #0
   48ec4:	beq	48efc <GetDataSlab+0x21538>
   48ec8:	ldr	r5, [sp, #60]	; 0x3c
   48ecc:	mov	r3, r8
   48ed0:	mov	r1, r7
   48ed4:	add	r0, r5, r8, lsl #2
   48ed8:	vld1.32	{d16-d17}, [r1], r6
   48edc:	subs	r3, r3, #4
   48ee0:	vcvt.f32.u32	q8, q8
   48ee4:	vst1.32	{d16-d17}, [r5]!
   48ee8:	bne	48ed8 <GetDataSlab+0x21514>
   48eec:	ldr	r1, [sp, #56]	; 0x38
   48ef0:	cmp	r1, r8
   48ef4:	mov	r1, r8
   48ef8:	beq	48f28 <GetDataSlab+0x21564>
   48efc:	ldr	r3, [sp, #56]	; 0x38
   48f00:	mul	r5, r4, r1
   48f04:	sub	r3, r3, r1
   48f08:	add	r1, r7, r5, lsl #2
   48f0c:	add	r5, r5, r4
   48f10:	subs	r3, r3, #1
   48f14:	vldr	s0, [r1]
   48f18:	vcvt.f32.u32	s0, s0
   48f1c:	vstr	s0, [r0]
   48f20:	add	r0, r0, #4
   48f24:	bne	48f08 <GetDataSlab+0x21544>
   48f28:	ldr	r0, [sp, #60]	; 0x3c
   48f2c:	ldr	r1, [sp, #56]	; 0x38
   48f30:	add	r0, r0, r1, lsl #2
   48f34:	str	r0, [sp, #60]	; 0x3c
   48f38:	ldr	r1, [sp, #52]	; 0x34
   48f3c:	add	r2, r2, #1
   48f40:	add	r7, r7, lr
   48f44:	mov	r0, #0
   48f48:	cmp	r2, r1
   48f4c:	bne	48eac <GetDataSlab+0x214e8>
   48f50:	b	47ffc <GetDataSlab+0x20638>
   48f54:	ldr	r0, [sp, #52]	; 0x34
   48f58:	cmp	r0, #1
   48f5c:	blt	2a430 <GetDataSlab+0x2a6c>
   48f60:	ldr	r0, [sp, #16]
   48f64:	ldr	r2, [sp, #32]
   48f68:	mla	r0, r0, r4, r7
   48f6c:	add	r1, r3, r0, lsl #2
   48f70:	mul	r0, ip, r4
   48f74:	mov	r3, #0
   48f78:	lsl	ip, r0, #2
   48f7c:	ldr	r0, [sp, #56]	; 0x38
   48f80:	cmp	r0, #1
   48f84:	blt	48fb8 <GetDataSlab+0x215f4>
   48f88:	ldr	r4, [sp, #60]	; 0x3c
   48f8c:	mov	r6, #0
   48f90:	mov	r7, r4
   48f94:	add	r5, r6, r2
   48f98:	ldr	r6, [r1, r6, lsl #2]
   48f9c:	subs	r0, r0, #1
   48fa0:	str	r6, [r7], #4
   48fa4:	mov	r6, r5
   48fa8:	bne	48f94 <GetDataSlab+0x215d0>
   48fac:	ldr	r0, [sp, #56]	; 0x38
   48fb0:	add	r4, r4, r0, lsl #2
   48fb4:	str	r4, [sp, #60]	; 0x3c
   48fb8:	ldr	r7, [sp, #52]	; 0x34
   48fbc:	add	r3, r3, #1
   48fc0:	add	r1, r1, ip
   48fc4:	mov	r0, #0
   48fc8:	cmp	r3, r7
   48fcc:	bne	48f7c <GetDataSlab+0x215b8>
   48fd0:	b	47ffc <GetDataSlab+0x20638>
   48fd4:	ldr	r0, [sp, #52]	; 0x34
   48fd8:	cmp	r0, #1
   48fdc:	blt	2a430 <GetDataSlab+0x2a6c>
   48fe0:	ldr	r0, [sp, #16]
   48fe4:	ldr	r1, [sp, #56]	; 0x38
   48fe8:	ldr	r9, [sp, #56]	; 0x38
   48fec:	mov	r2, ip
   48ff0:	mla	r0, r0, r4, r7
   48ff4:	cmp	r1, #1
   48ff8:	lsl	r7, r5, #3
   48ffc:	bic	r8, r1, #1
   49000:	add	r3, r3, r0, lsl #3
   49004:	sub	r0, r5, #1
   49008:	movwne	r6, #1
   4900c:	clz	r0, r0
   49010:	lsr	r0, r0, #5
   49014:	and	ip, r6, r0
   49018:	mul	r0, r2, r4
   4901c:	lsl	r6, r5, #4
   49020:	mov	r2, #0
   49024:	lsl	lr, r0, #3
   49028:	cmp	r9, #1
   4902c:	blt	490a4 <GetDataSlab+0x216e0>
   49030:	ldr	r0, [sp, #60]	; 0x3c
   49034:	mov	r4, #0
   49038:	cmp	ip, #0
   4903c:	beq	49074 <GetDataSlab+0x216b0>
   49040:	ldr	r5, [sp, #60]	; 0x3c
   49044:	mov	r4, r8
   49048:	mov	r1, r3
   4904c:	add	r0, r5, r8, lsl #2
   49050:	vld1.64	{d16-d17}, [r1], r6
   49054:	subs	r4, r4, #2
   49058:	vcvt.f32.f64	s1, d17
   4905c:	vcvt.f32.f64	s0, d16
   49060:	vst1.32	{d0}, [r5]!
   49064:	bne	49050 <GetDataSlab+0x2168c>
   49068:	cmp	r9, r8
   4906c:	mov	r4, r8
   49070:	beq	49098 <GetDataSlab+0x216d4>
   49074:	mla	r1, r7, r4, r3
   49078:	sub	r4, r9, r4
   4907c:	vldr	d16, [r1]
   49080:	add	r1, r1, r7
   49084:	subs	r4, r4, #1
   49088:	vcvt.f32.f64	s0, d16
   4908c:	vstr	s0, [r0]
   49090:	add	r0, r0, #4
   49094:	bne	4907c <GetDataSlab+0x216b8>
   49098:	ldr	r0, [sp, #60]	; 0x3c
   4909c:	add	r0, r0, r9, lsl #2
   490a0:	str	r0, [sp, #60]	; 0x3c
   490a4:	ldr	r1, [sp, #52]	; 0x34
   490a8:	add	r2, r2, #1
   490ac:	add	r3, r3, lr
   490b0:	mov	r0, #0
   490b4:	cmp	r2, r1
   490b8:	bne	49028 <GetDataSlab+0x21664>
   490bc:	b	47ffc <GetDataSlab+0x20638>
   490c0:	ldr	r0, [sp, #52]	; 0x34
   490c4:	cmp	r0, #1
   490c8:	blt	2a430 <GetDataSlab+0x2a6c>
   490cc:	ldr	r0, [sp, #16]
   490d0:	ldr	r2, [sp, #56]	; 0x38
   490d4:	sub	r1, r5, #1
   490d8:	lsl	r8, r5, #3
   490dc:	clz	r1, r1
   490e0:	lsr	r1, r1, #5
   490e4:	mla	r0, r0, r4, r7
   490e8:	cmp	r2, #1
   490ec:	ldr	r7, [sp, #60]	; 0x3c
   490f0:	add	r9, r3, r0, lsl #3
   490f4:	mov	r0, r6
   490f8:	movwne	r0, #1
   490fc:	and	sl, r0, r1
   49100:	mul	r0, ip, r4
   49104:	lsl	r1, r5, #4
   49108:	lsl	r6, r0, #3
   4910c:	bic	r0, r2, #1
   49110:	mov	r2, #0
   49114:	str	r0, [sp, #12]
   49118:	stmib	sp, {r1, r6}
   4911c:	str	sl, [sp]
   49120:	ldr	r0, [sp, #56]	; 0x38
   49124:	cmp	r0, #1
   49128:	blt	491e0 <GetDataSlab+0x2181c>
   4912c:	mov	r1, #0
   49130:	cmp	sl, #0
   49134:	str	r2, [sp, #36]	; 0x24
   49138:	str	r7, [sp, #60]	; 0x3c
   4913c:	beq	491a0 <GetDataSlab+0x217dc>
   49140:	ldr	r6, [sp, #60]	; 0x3c
   49144:	ldr	r4, [sp, #12]
   49148:	ldr	r5, [sp, #4]
   4914c:	mov	sl, r9
   49150:	add	r7, r6, r4, lsl #2
   49154:	vld1.64	{d8-d9}, [sl], r5
   49158:	vmov.32	r0, d9[0]
   4915c:	vmov.32	r1, d9[1]
   49160:	bl	584e0 <__aeabi_l2f>
   49164:	vmov.32	r2, d8[0]
   49168:	vmov.32	r1, d8[1]
   4916c:	vmov	s17, r0
   49170:	mov	r0, r2
   49174:	bl	584e0 <__aeabi_l2f>
   49178:	vmov	s16, r0
   4917c:	subs	r4, r4, #2
   49180:	vst1.32	{d8}, [r6]!
   49184:	bne	49154 <GetDataSlab+0x21790>
   49188:	ldr	r0, [sp, #56]	; 0x38
   4918c:	ldr	r1, [sp, #12]
   49190:	ldr	sl, [sp]
   49194:	ldr	r6, [sp, #8]
   49198:	cmp	r0, r1
   4919c:	beq	491c8 <GetDataSlab+0x21804>
   491a0:	ldr	r2, [sp, #56]	; 0x38
   491a4:	mla	r0, r8, r1, r9
   491a8:	sub	r4, r2, r1
   491ac:	add	r5, r0, r8
   491b0:	ldrd	r0, [r0]
   491b4:	bl	584e0 <__aeabi_l2f>
   491b8:	str	r0, [r7], #4
   491bc:	subs	r4, r4, #1
   491c0:	mov	r0, r5
   491c4:	bne	491ac <GetDataSlab+0x217e8>
   491c8:	ldr	r7, [sp, #60]	; 0x3c
   491cc:	ldr	r0, [sp, #56]	; 0x38
   491d0:	ldr	r4, [sp, #44]	; 0x2c
   491d4:	ldr	ip, [sp, #28]
   491d8:	ldr	r2, [sp, #36]	; 0x24
   491dc:	add	r7, r7, r0, lsl #2
   491e0:	ldr	r0, [sp, #52]	; 0x34
   491e4:	add	r2, r2, #1
   491e8:	add	r9, r9, r6
   491ec:	cmp	r2, r0
   491f0:	bne	49120 <GetDataSlab+0x2175c>
   491f4:	mov	r0, #0
   491f8:	str	r7, [sp, #60]	; 0x3c
   491fc:	ldr	r1, [sp, #40]	; 0x28
   49200:	cmp	r1, #13
   49204:	bne	47ffc <GetDataSlab+0x20638>
   49208:	ldr	r0, [sp, #52]	; 0x34
   4920c:	cmp	r0, #1
   49210:	blt	2a430 <GetDataSlab+0x2a6c>
   49214:	ldr	r0, [sp, #16]
   49218:	ldr	r1, [sp, #24]
   4921c:	ldr	r2, [sp, #32]
   49220:	ldr	r3, [sp, #20]
   49224:	mla	r0, r0, r4, r1
   49228:	ldr	r1, [sp, #48]	; 0x30
   4922c:	lsl	r7, r2, #4
   49230:	add	r0, r1, r0, lsl #3
   49234:	ldr	r1, [sp, #56]	; 0x38
   49238:	str	r0, [sp, #48]	; 0x30
   4923c:	sub	r0, r2, #1
   49240:	clz	r0, r0
   49244:	lsr	r0, r0, #5
   49248:	cmp	r1, #1
   4924c:	movwne	r3, #1
   49250:	and	r0, r3, r0
   49254:	str	r0, [sp, #36]	; 0x24
   49258:	mul	r0, ip, r4
   4925c:	lsl	r4, r2, #3
   49260:	lsl	r0, r0, #3
   49264:	str	r0, [sp, #40]	; 0x28
   49268:	bic	r0, r1, #1
   4926c:	str	r0, [sp, #32]
   49270:	mov	r0, #0
   49274:	str	r0, [sp, #44]	; 0x2c
   49278:	ldr	r8, [sp, #56]	; 0x38
   4927c:	cmp	r8, #1
   49280:	blt	49320 <GetDataSlab+0x2195c>
   49284:	ldr	r0, [sp, #36]	; 0x24
   49288:	ldr	sl, [sp, #60]	; 0x3c
   4928c:	mov	r1, #0
   49290:	cmp	r0, #0
   49294:	beq	492ec <GetDataSlab+0x21928>
   49298:	ldr	r8, [sp, #60]	; 0x3c
   4929c:	ldr	r9, [sp, #32]
   492a0:	ldr	r6, [sp, #48]	; 0x30
   492a4:	add	sl, r8, r9, lsl #2
   492a8:	vld1.64	{d8-d9}, [r6], r7
   492ac:	vmov.32	r0, d9[0]
   492b0:	vmov.32	r1, d9[1]
   492b4:	bl	584d0 <__aeabi_ul2f>
   492b8:	vmov.32	r2, d8[0]
   492bc:	vmov.32	r1, d8[1]
   492c0:	vmov	s17, r0
   492c4:	mov	r0, r2
   492c8:	bl	584d0 <__aeabi_ul2f>
   492cc:	vmov	s16, r0
   492d0:	subs	r9, r9, #2
   492d4:	vst1.32	{d8}, [r8]!
   492d8:	bne	492a8 <GetDataSlab+0x218e4>
   492dc:	ldr	r8, [sp, #56]	; 0x38
   492e0:	ldr	r1, [sp, #32]
   492e4:	cmp	r8, r1
   492e8:	beq	49314 <GetDataSlab+0x21950>
   492ec:	ldr	r0, [sp, #48]	; 0x30
   492f0:	sub	r6, r8, r1
   492f4:	mla	r0, r4, r1, r0
   492f8:	add	r5, r0, r4
   492fc:	ldrd	r0, [r0]
   49300:	bl	584d0 <__aeabi_ul2f>
   49304:	str	r0, [sl], #4
   49308:	subs	r6, r6, #1
   4930c:	mov	r0, r5
   49310:	bne	492f8 <GetDataSlab+0x21934>
   49314:	ldr	r0, [sp, #60]	; 0x3c
   49318:	add	r0, r0, r8, lsl #2
   4931c:	str	r0, [sp, #60]	; 0x3c
   49320:	ldr	r0, [sp, #48]	; 0x30
   49324:	ldr	r2, [sp, #40]	; 0x28
   49328:	ldr	r1, [sp, #52]	; 0x34
   4932c:	add	r0, r0, r2
   49330:	ldr	r2, [sp, #44]	; 0x2c
   49334:	str	r0, [sp, #48]	; 0x30
   49338:	mov	r0, #0
   4933c:	add	r2, r2, #1
   49340:	cmp	r2, r1
   49344:	str	r2, [sp, #44]	; 0x2c
   49348:	bne	49278 <GetDataSlab+0x218b4>
   4934c:	b	47ffc <GetDataSlab+0x20638>
   49350:	cmp	r1, #1
   49354:	blt	2a430 <GetDataSlab+0x2a6c>
   49358:	ldr	r0, [sp, #16]
   4935c:	ldr	r1, [sp, #24]
   49360:	ldr	r6, [sp, #28]
   49364:	mov	r7, #0
   49368:	mla	r0, r0, r4, r1
   4936c:	add	r2, r5, r0
   49370:	ldr	r0, [sp, #56]	; 0x38
   49374:	cmp	r0, #1
   49378:	blt	493c8 <GetDataSlab+0x21a04>
   4937c:	ldr	r5, [sp, #60]	; 0x3c
   49380:	ldr	r4, [fp, #8]
   49384:	mov	r0, #0
   49388:	ldr	r6, [r8]
   4938c:	mul	r6, r6, r0
   49390:	ldrb	r6, [r2, r6]
   49394:	strb	r6, [r5, r0]
   49398:	add	r0, r0, #1
   4939c:	ldr	r6, [r3]
   493a0:	cmp	r0, r6
   493a4:	blt	49388 <GetDataSlab+0x219c4>
   493a8:	add	r5, r5, r0
   493ac:	ldr	r0, [sp, #36]	; 0x24
   493b0:	str	r6, [sp, #56]	; 0x38
   493b4:	ldr	r4, [r4]
   493b8:	ldr	r6, [lr]
   493bc:	str	r5, [sp, #60]	; 0x3c
   493c0:	ldr	r1, [r0]
   493c4:	b	493cc <GetDataSlab+0x21a08>
   493c8:	ldr	r1, [sp, #52]	; 0x34
   493cc:	add	r7, r7, #1
   493d0:	mla	r2, r4, r6, r2
   493d4:	mov	r0, #0
   493d8:	str	r1, [sp, #52]	; 0x34
   493dc:	cmp	r7, r1
   493e0:	blt	49370 <GetDataSlab+0x219ac>
   493e4:	b	47ffc <GetDataSlab+0x20638>
   493e8:	cmp	r1, #1
   493ec:	blt	2a430 <GetDataSlab+0x2a6c>
   493f0:	ldr	r0, [sp, #16]
   493f4:	ldr	r1, [sp, #24]
   493f8:	ldr	r6, [sp, #28]
   493fc:	mov	r7, #0
   49400:	mla	r0, r0, r4, r1
   49404:	add	r2, r5, r0, lsl #1
   49408:	ldr	r0, [sp, #56]	; 0x38
   4940c:	cmp	r0, #1
   49410:	blt	49460 <GetDataSlab+0x21a9c>
   49414:	ldr	r5, [sp, #60]	; 0x3c
   49418:	ldr	r4, [fp, #8]
   4941c:	mov	r0, #0
   49420:	ldr	r6, [r8]
   49424:	mul	r6, r6, r0
   49428:	ldrb	r6, [r2, r6, lsl #1]
   4942c:	strb	r6, [r5, r0]
   49430:	add	r0, r0, #1
   49434:	ldr	r6, [r3]
   49438:	cmp	r0, r6
   4943c:	blt	49420 <GetDataSlab+0x21a5c>
   49440:	add	r5, r5, r0
   49444:	ldr	r0, [sp, #36]	; 0x24
   49448:	str	r6, [sp, #56]	; 0x38
   4944c:	ldr	r4, [r4]
   49450:	ldr	r6, [lr]
   49454:	str	r5, [sp, #60]	; 0x3c
   49458:	ldr	r1, [r0]
   4945c:	b	49464 <GetDataSlab+0x21aa0>
   49460:	ldr	r1, [sp, #52]	; 0x34
   49464:	mul	r0, r4, r6
   49468:	add	r7, r7, #1
   4946c:	str	r1, [sp, #52]	; 0x34
   49470:	add	r2, r2, r0, lsl #1
   49474:	mov	r0, #0
   49478:	cmp	r7, r1
   4947c:	blt	49408 <GetDataSlab+0x21a44>
   49480:	b	47ffc <GetDataSlab+0x20638>
   49484:	cmp	r1, #1
   49488:	blt	2a430 <GetDataSlab+0x2a6c>
   4948c:	ldr	r0, [sp, #16]
   49490:	ldr	r1, [sp, #24]
   49494:	ldr	r6, [sp, #28]
   49498:	mov	r7, #0
   4949c:	mla	r0, r0, r4, r1
   494a0:	add	r2, r5, r0, lsl #1
   494a4:	ldr	r0, [sp, #56]	; 0x38
   494a8:	cmp	r0, #1
   494ac:	blt	494fc <GetDataSlab+0x21b38>
   494b0:	ldr	r5, [sp, #60]	; 0x3c
   494b4:	ldr	r4, [fp, #8]
   494b8:	mov	r0, #0
   494bc:	ldr	r6, [r8]
   494c0:	mul	r6, r6, r0
   494c4:	ldrb	r6, [r2, r6, lsl #1]
   494c8:	strb	r6, [r5, r0]
   494cc:	add	r0, r0, #1
   494d0:	ldr	r6, [r3]
   494d4:	cmp	r0, r6
   494d8:	blt	494bc <GetDataSlab+0x21af8>
   494dc:	add	r5, r5, r0
   494e0:	ldr	r0, [sp, #36]	; 0x24
   494e4:	str	r6, [sp, #56]	; 0x38
   494e8:	ldr	r4, [r4]
   494ec:	ldr	r6, [lr]
   494f0:	str	r5, [sp, #60]	; 0x3c
   494f4:	ldr	r1, [r0]
   494f8:	b	49500 <GetDataSlab+0x21b3c>
   494fc:	ldr	r1, [sp, #52]	; 0x34
   49500:	mul	r0, r4, r6
   49504:	add	r7, r7, #1
   49508:	str	r1, [sp, #52]	; 0x34
   4950c:	add	r2, r2, r0, lsl #1
   49510:	mov	r0, #0
   49514:	cmp	r7, r1
   49518:	blt	494a4 <GetDataSlab+0x21ae0>
   4951c:	b	47ffc <GetDataSlab+0x20638>
   49520:	cmp	r1, #1
   49524:	blt	2a430 <GetDataSlab+0x2a6c>
   49528:	ldr	r0, [sp, #16]
   4952c:	ldr	r1, [sp, #24]
   49530:	ldr	r6, [sp, #28]
   49534:	mov	r7, #0
   49538:	mla	r0, r0, r4, r1
   4953c:	add	r2, r5, r0, lsl #2
   49540:	ldr	r0, [sp, #56]	; 0x38
   49544:	cmp	r0, #1
   49548:	blt	49598 <GetDataSlab+0x21bd4>
   4954c:	ldr	r5, [sp, #60]	; 0x3c
   49550:	ldr	r4, [fp, #8]
   49554:	mov	r0, #0
   49558:	ldr	r6, [r8]
   4955c:	mul	r6, r6, r0
   49560:	ldr	r6, [r2, r6, lsl #2]
   49564:	strb	r6, [r5, r0]
   49568:	add	r0, r0, #1
   4956c:	ldr	r6, [r3]
   49570:	cmp	r0, r6
   49574:	blt	49558 <GetDataSlab+0x21b94>
   49578:	add	r5, r5, r0
   4957c:	ldr	r0, [sp, #36]	; 0x24
   49580:	str	r6, [sp, #56]	; 0x38
   49584:	ldr	r4, [r4]
   49588:	ldr	r6, [lr]
   4958c:	str	r5, [sp, #60]	; 0x3c
   49590:	ldr	r1, [r0]
   49594:	b	4959c <GetDataSlab+0x21bd8>
   49598:	ldr	r1, [sp, #52]	; 0x34
   4959c:	mul	r0, r4, r6
   495a0:	add	r7, r7, #1
   495a4:	str	r1, [sp, #52]	; 0x34
   495a8:	add	r2, r2, r0, lsl #2
   495ac:	mov	r0, #0
   495b0:	cmp	r7, r1
   495b4:	blt	49540 <GetDataSlab+0x21b7c>
   495b8:	b	47ffc <GetDataSlab+0x20638>
   495bc:	cmp	r1, #1
   495c0:	blt	2a430 <GetDataSlab+0x2a6c>
   495c4:	ldr	r0, [sp, #16]
   495c8:	ldr	r1, [sp, #24]
   495cc:	ldr	r6, [sp, #28]
   495d0:	mov	r7, #0
   495d4:	mla	r0, r0, r4, r1
   495d8:	add	r2, r5, r0, lsl #2
   495dc:	ldr	r0, [sp, #56]	; 0x38
   495e0:	cmp	r0, #1
   495e4:	blt	49634 <GetDataSlab+0x21c70>
   495e8:	ldr	r5, [sp, #60]	; 0x3c
   495ec:	ldr	r4, [fp, #8]
   495f0:	mov	r0, #0
   495f4:	ldr	r6, [r8]
   495f8:	mul	r6, r6, r0
   495fc:	ldr	r6, [r2, r6, lsl #2]
   49600:	strb	r6, [r5, r0]
   49604:	add	r0, r0, #1
   49608:	ldr	r6, [r3]
   4960c:	cmp	r0, r6
   49610:	blt	495f4 <GetDataSlab+0x21c30>
   49614:	add	r5, r5, r0
   49618:	ldr	r0, [sp, #36]	; 0x24
   4961c:	str	r6, [sp, #56]	; 0x38
   49620:	ldr	r4, [r4]
   49624:	ldr	r6, [lr]
   49628:	str	r5, [sp, #60]	; 0x3c
   4962c:	ldr	r1, [r0]
   49630:	b	49638 <GetDataSlab+0x21c74>
   49634:	ldr	r1, [sp, #52]	; 0x34
   49638:	mul	r0, r4, r6
   4963c:	add	r7, r7, #1
   49640:	str	r1, [sp, #52]	; 0x34
   49644:	add	r2, r2, r0, lsl #2
   49648:	mov	r0, #0
   4964c:	cmp	r7, r1
   49650:	blt	495dc <GetDataSlab+0x21c18>
   49654:	b	47ffc <GetDataSlab+0x20638>
   49658:	cmp	r1, #1
   4965c:	blt	2a430 <GetDataSlab+0x2a6c>
   49660:	ldr	r0, [sp, #16]
   49664:	ldr	r1, [sp, #24]
   49668:	ldr	r6, [sp, #28]
   4966c:	mov	r7, #0
   49670:	mla	r0, r0, r4, r1
   49674:	add	r2, r5, r0, lsl #2
   49678:	ldr	r0, [sp, #56]	; 0x38
   4967c:	cmp	r0, #1
   49680:	blt	496dc <GetDataSlab+0x21d18>
   49684:	ldr	r5, [sp, #60]	; 0x3c
   49688:	ldr	r4, [fp, #8]
   4968c:	mov	r0, #0
   49690:	ldr	r6, [r8]
   49694:	mul	r6, r6, r0
   49698:	add	r6, r2, r6, lsl #2
   4969c:	vldr	s0, [r6]
   496a0:	vcvt.s32.f32	s0, s0
   496a4:	vmov	r6, s0
   496a8:	strb	r6, [r5, r0]
   496ac:	add	r0, r0, #1
   496b0:	ldr	r6, [r3]
   496b4:	cmp	r0, r6
   496b8:	blt	49690 <GetDataSlab+0x21ccc>
   496bc:	add	r5, r5, r0
   496c0:	ldr	r0, [sp, #36]	; 0x24
   496c4:	str	r6, [sp, #56]	; 0x38
   496c8:	ldr	r4, [r4]
   496cc:	ldr	r6, [lr]
   496d0:	str	r5, [sp, #60]	; 0x3c
   496d4:	ldr	r1, [r0]
   496d8:	b	496e0 <GetDataSlab+0x21d1c>
   496dc:	ldr	r1, [sp, #52]	; 0x34
   496e0:	mul	r0, r4, r6
   496e4:	add	r7, r7, #1
   496e8:	str	r1, [sp, #52]	; 0x34
   496ec:	add	r2, r2, r0, lsl #2
   496f0:	mov	r0, #0
   496f4:	cmp	r7, r1
   496f8:	blt	49678 <GetDataSlab+0x21cb4>
   496fc:	b	47ffc <GetDataSlab+0x20638>
   49700:	cmp	r1, #1
   49704:	blt	2a430 <GetDataSlab+0x2a6c>
   49708:	ldr	r0, [sp, #16]
   4970c:	ldr	r1, [sp, #24]
   49710:	ldr	r6, [sp, #28]
   49714:	mov	r7, #0
   49718:	mla	r0, r0, r4, r1
   4971c:	add	r2, r5, r0, lsl #3
   49720:	ldr	r0, [sp, #56]	; 0x38
   49724:	cmp	r0, #1
   49728:	blt	49784 <GetDataSlab+0x21dc0>
   4972c:	ldr	r5, [sp, #60]	; 0x3c
   49730:	ldr	r4, [fp, #8]
   49734:	mov	r0, #0
   49738:	ldr	r6, [r8]
   4973c:	mul	r6, r6, r0
   49740:	add	r6, r2, r6, lsl #3
   49744:	vldr	d16, [r6]
   49748:	vcvt.s32.f64	s0, d16
   4974c:	vmov	r6, s0
   49750:	strb	r6, [r5, r0]
   49754:	add	r0, r0, #1
   49758:	ldr	r6, [r3]
   4975c:	cmp	r0, r6
   49760:	blt	49738 <GetDataSlab+0x21d74>
   49764:	add	r5, r5, r0
   49768:	ldr	r0, [sp, #36]	; 0x24
   4976c:	str	r6, [sp, #56]	; 0x38
   49770:	ldr	r4, [r4]
   49774:	ldr	r6, [lr]
   49778:	str	r5, [sp, #60]	; 0x3c
   4977c:	ldr	r1, [r0]
   49780:	b	49788 <GetDataSlab+0x21dc4>
   49784:	ldr	r1, [sp, #52]	; 0x34
   49788:	mul	r0, r4, r6
   4978c:	add	r7, r7, #1
   49790:	str	r1, [sp, #52]	; 0x34
   49794:	add	r2, r2, r0, lsl #3
   49798:	mov	r0, #0
   4979c:	cmp	r7, r1
   497a0:	blt	49720 <GetDataSlab+0x21d5c>
   497a4:	b	47ffc <GetDataSlab+0x20638>
   497a8:	cmp	r1, #1
   497ac:	blt	2a430 <GetDataSlab+0x2a6c>
   497b0:	ldr	r0, [sp, #16]
   497b4:	ldr	r2, [sp, #24]
   497b8:	mla	r0, r0, r4, r2
   497bc:	ldr	r4, [fp, #8]
   497c0:	mov	r2, #0
   497c4:	add	r0, r5, r0, lsl #3
   497c8:	ldr	r5, [sp, #60]	; 0x3c
   497cc:	mov	r9, r4
   497d0:	cmp	r6, #1
   497d4:	blt	49814 <GetDataSlab+0x21e50>
   497d8:	mov	r7, #0
   497dc:	ldr	r6, [r8]
   497e0:	mul	r6, r6, r7
   497e4:	ldrb	r6, [r0, r6, lsl #3]
   497e8:	strb	r6, [r5, r7]
   497ec:	add	r7, r7, #1
   497f0:	ldr	r6, [r3]
   497f4:	cmp	r7, r6
   497f8:	blt	497dc <GetDataSlab+0x21e18>
   497fc:	ldr	r1, [sp, #36]	; 0x24
   49800:	add	r5, r5, r7
   49804:	ldr	r7, [r9]
   49808:	ldr	r4, [lr]
   4980c:	ldr	r1, [r1]
   49810:	b	4981c <GetDataSlab+0x21e58>
   49814:	ldr	r7, [sp, #44]	; 0x2c
   49818:	ldr	r4, [sp, #28]
   4981c:	str	r7, [sp, #44]	; 0x2c
   49820:	mul	r7, r7, r4
   49824:	add	r2, r2, #1
   49828:	str	r4, [sp, #28]
   4982c:	add	r0, r0, r7, lsl #3
   49830:	cmp	r2, r1
   49834:	blt	497d0 <GetDataSlab+0x21e0c>
   49838:	ldr	r4, [sp, #44]	; 0x2c
   4983c:	mov	r0, #0
   49840:	str	r5, [sp, #60]	; 0x3c
   49844:	b	4cc58 <GetDataSlab+0x25294>
   49848:	cmp	r1, #1
   4984c:	blt	2a430 <GetDataSlab+0x2a6c>
   49850:	ldr	r0, [sp, #16]
   49854:	ldr	r1, [sp, #24]
   49858:	ldr	r6, [sp, #28]
   4985c:	mov	r7, #0
   49860:	mla	r0, r0, r4, r1
   49864:	add	r2, r5, r0
   49868:	ldr	r0, [sp, #56]	; 0x38
   4986c:	cmp	r0, #1
   49870:	blt	498c0 <GetDataSlab+0x21efc>
   49874:	ldr	r5, [sp, #60]	; 0x3c
   49878:	ldr	r4, [fp, #8]
   4987c:	mov	r0, #0
   49880:	ldr	r6, [r8]
   49884:	mul	r6, r6, r0
   49888:	ldrb	r6, [r2, r6]
   4988c:	strb	r6, [r5, r0]
   49890:	add	r0, r0, #1
   49894:	ldr	r6, [r3]
   49898:	cmp	r0, r6
   4989c:	blt	49880 <GetDataSlab+0x21ebc>
   498a0:	add	r5, r5, r0
   498a4:	ldr	r0, [sp, #36]	; 0x24
   498a8:	str	r6, [sp, #56]	; 0x38
   498ac:	ldr	r4, [r4]
   498b0:	ldr	r6, [lr]
   498b4:	str	r5, [sp, #60]	; 0x3c
   498b8:	ldr	r1, [r0]
   498bc:	b	498c4 <GetDataSlab+0x21f00>
   498c0:	ldr	r1, [sp, #52]	; 0x34
   498c4:	add	r7, r7, #1
   498c8:	mla	r2, r4, r6, r2
   498cc:	mov	r0, #0
   498d0:	str	r1, [sp, #52]	; 0x34
   498d4:	cmp	r7, r1
   498d8:	blt	49868 <GetDataSlab+0x21ea4>
   498dc:	b	47ffc <GetDataSlab+0x20638>
   498e0:	cmp	r1, #1
   498e4:	blt	2a430 <GetDataSlab+0x2a6c>
   498e8:	ldr	r0, [sp, #16]
   498ec:	ldr	r1, [sp, #24]
   498f0:	ldr	r6, [sp, #28]
   498f4:	mov	r7, #0
   498f8:	mla	r0, r0, r4, r1
   498fc:	add	r2, r5, r0, lsl #1
   49900:	ldr	r0, [sp, #56]	; 0x38
   49904:	cmp	r0, #1
   49908:	blt	49958 <GetDataSlab+0x21f94>
   4990c:	ldr	r5, [sp, #60]	; 0x3c
   49910:	ldr	r4, [fp, #8]
   49914:	mov	r0, #0
   49918:	ldr	r6, [r8]
   4991c:	mul	r6, r6, r0
   49920:	ldrb	r6, [r2, r6, lsl #1]
   49924:	strb	r6, [r5, r0]
   49928:	add	r0, r0, #1
   4992c:	ldr	r6, [r3]
   49930:	cmp	r0, r6
   49934:	blt	49918 <GetDataSlab+0x21f54>
   49938:	add	r5, r5, r0
   4993c:	ldr	r0, [sp, #36]	; 0x24
   49940:	str	r6, [sp, #56]	; 0x38
   49944:	ldr	r4, [r4]
   49948:	ldr	r6, [lr]
   4994c:	str	r5, [sp, #60]	; 0x3c
   49950:	ldr	r1, [r0]
   49954:	b	4995c <GetDataSlab+0x21f98>
   49958:	ldr	r1, [sp, #52]	; 0x34
   4995c:	mul	r0, r4, r6
   49960:	add	r7, r7, #1
   49964:	str	r1, [sp, #52]	; 0x34
   49968:	add	r2, r2, r0, lsl #1
   4996c:	mov	r0, #0
   49970:	cmp	r7, r1
   49974:	blt	49900 <GetDataSlab+0x21f3c>
   49978:	b	47ffc <GetDataSlab+0x20638>
   4997c:	cmp	r1, #1
   49980:	blt	2a430 <GetDataSlab+0x2a6c>
   49984:	ldr	r0, [sp, #16]
   49988:	ldr	r1, [sp, #24]
   4998c:	ldr	r6, [sp, #28]
   49990:	mov	r7, #0
   49994:	mla	r0, r0, r4, r1
   49998:	add	r2, r5, r0, lsl #1
   4999c:	ldr	r0, [sp, #56]	; 0x38
   499a0:	cmp	r0, #1
   499a4:	blt	499f4 <GetDataSlab+0x22030>
   499a8:	ldr	r5, [sp, #60]	; 0x3c
   499ac:	ldr	r4, [fp, #8]
   499b0:	mov	r0, #0
   499b4:	ldr	r6, [r8]
   499b8:	mul	r6, r6, r0
   499bc:	ldrb	r6, [r2, r6, lsl #1]
   499c0:	strb	r6, [r5, r0]
   499c4:	add	r0, r0, #1
   499c8:	ldr	r6, [r3]
   499cc:	cmp	r0, r6
   499d0:	blt	499b4 <GetDataSlab+0x21ff0>
   499d4:	add	r5, r5, r0
   499d8:	ldr	r0, [sp, #36]	; 0x24
   499dc:	str	r6, [sp, #56]	; 0x38
   499e0:	ldr	r4, [r4]
   499e4:	ldr	r6, [lr]
   499e8:	str	r5, [sp, #60]	; 0x3c
   499ec:	ldr	r1, [r0]
   499f0:	b	499f8 <GetDataSlab+0x22034>
   499f4:	ldr	r1, [sp, #52]	; 0x34
   499f8:	mul	r0, r4, r6
   499fc:	add	r7, r7, #1
   49a00:	str	r1, [sp, #52]	; 0x34
   49a04:	add	r2, r2, r0, lsl #1
   49a08:	mov	r0, #0
   49a0c:	cmp	r7, r1
   49a10:	blt	4999c <GetDataSlab+0x21fd8>
   49a14:	b	47ffc <GetDataSlab+0x20638>
   49a18:	cmp	r1, #1
   49a1c:	blt	2a430 <GetDataSlab+0x2a6c>
   49a20:	ldr	r0, [sp, #16]
   49a24:	ldr	r1, [sp, #24]
   49a28:	ldr	r6, [sp, #28]
   49a2c:	mov	r7, #0
   49a30:	mla	r0, r0, r4, r1
   49a34:	add	r2, r5, r0, lsl #2
   49a38:	ldr	r0, [sp, #56]	; 0x38
   49a3c:	cmp	r0, #1
   49a40:	blt	49a90 <GetDataSlab+0x220cc>
   49a44:	ldr	r5, [sp, #60]	; 0x3c
   49a48:	ldr	r4, [fp, #8]
   49a4c:	mov	r0, #0
   49a50:	ldr	r6, [r8]
   49a54:	mul	r6, r6, r0
   49a58:	ldr	r6, [r2, r6, lsl #2]
   49a5c:	strb	r6, [r5, r0]
   49a60:	add	r0, r0, #1
   49a64:	ldr	r6, [r3]
   49a68:	cmp	r0, r6
   49a6c:	blt	49a50 <GetDataSlab+0x2208c>
   49a70:	add	r5, r5, r0
   49a74:	ldr	r0, [sp, #36]	; 0x24
   49a78:	str	r6, [sp, #56]	; 0x38
   49a7c:	ldr	r4, [r4]
   49a80:	ldr	r6, [lr]
   49a84:	str	r5, [sp, #60]	; 0x3c
   49a88:	ldr	r1, [r0]
   49a8c:	b	49a94 <GetDataSlab+0x220d0>
   49a90:	ldr	r1, [sp, #52]	; 0x34
   49a94:	mul	r0, r4, r6
   49a98:	add	r7, r7, #1
   49a9c:	str	r1, [sp, #52]	; 0x34
   49aa0:	add	r2, r2, r0, lsl #2
   49aa4:	mov	r0, #0
   49aa8:	cmp	r7, r1
   49aac:	blt	49a38 <GetDataSlab+0x22074>
   49ab0:	b	47ffc <GetDataSlab+0x20638>
   49ab4:	cmp	r1, #1
   49ab8:	blt	2a430 <GetDataSlab+0x2a6c>
   49abc:	ldr	r0, [sp, #16]
   49ac0:	ldr	r1, [sp, #24]
   49ac4:	ldr	r6, [sp, #28]
   49ac8:	mov	r7, #0
   49acc:	mla	r0, r0, r4, r1
   49ad0:	add	r2, r5, r0, lsl #2
   49ad4:	ldr	r0, [sp, #56]	; 0x38
   49ad8:	cmp	r0, #1
   49adc:	blt	49b2c <GetDataSlab+0x22168>
   49ae0:	ldr	r5, [sp, #60]	; 0x3c
   49ae4:	ldr	r4, [fp, #8]
   49ae8:	mov	r0, #0
   49aec:	ldr	r6, [r8]
   49af0:	mul	r6, r6, r0
   49af4:	ldr	r6, [r2, r6, lsl #2]
   49af8:	strb	r6, [r5, r0]
   49afc:	add	r0, r0, #1
   49b00:	ldr	r6, [r3]
   49b04:	cmp	r0, r6
   49b08:	blt	49aec <GetDataSlab+0x22128>
   49b0c:	add	r5, r5, r0
   49b10:	ldr	r0, [sp, #36]	; 0x24
   49b14:	str	r6, [sp, #56]	; 0x38
   49b18:	ldr	r4, [r4]
   49b1c:	ldr	r6, [lr]
   49b20:	str	r5, [sp, #60]	; 0x3c
   49b24:	ldr	r1, [r0]
   49b28:	b	49b30 <GetDataSlab+0x2216c>
   49b2c:	ldr	r1, [sp, #52]	; 0x34
   49b30:	mul	r0, r4, r6
   49b34:	add	r7, r7, #1
   49b38:	str	r1, [sp, #52]	; 0x34
   49b3c:	add	r2, r2, r0, lsl #2
   49b40:	mov	r0, #0
   49b44:	cmp	r7, r1
   49b48:	blt	49ad4 <GetDataSlab+0x22110>
   49b4c:	b	47ffc <GetDataSlab+0x20638>
   49b50:	cmp	r1, #1
   49b54:	blt	2a430 <GetDataSlab+0x2a6c>
   49b58:	ldr	r0, [sp, #16]
   49b5c:	ldr	r1, [sp, #24]
   49b60:	ldr	r6, [sp, #28]
   49b64:	mov	r7, #0
   49b68:	mla	r0, r0, r4, r1
   49b6c:	add	r2, r5, r0, lsl #2
   49b70:	ldr	r0, [sp, #56]	; 0x38
   49b74:	cmp	r0, #1
   49b78:	blt	49bd4 <GetDataSlab+0x22210>
   49b7c:	ldr	r5, [sp, #60]	; 0x3c
   49b80:	ldr	r4, [fp, #8]
   49b84:	mov	r0, #0
   49b88:	ldr	r6, [r8]
   49b8c:	mul	r6, r6, r0
   49b90:	add	r6, r2, r6, lsl #2
   49b94:	vldr	s0, [r6]
   49b98:	vcvt.u32.f32	s0, s0
   49b9c:	vmov	r6, s0
   49ba0:	strb	r6, [r5, r0]
   49ba4:	add	r0, r0, #1
   49ba8:	ldr	r6, [r3]
   49bac:	cmp	r0, r6
   49bb0:	blt	49b88 <GetDataSlab+0x221c4>
   49bb4:	add	r5, r5, r0
   49bb8:	ldr	r0, [sp, #36]	; 0x24
   49bbc:	str	r6, [sp, #56]	; 0x38
   49bc0:	ldr	r4, [r4]
   49bc4:	ldr	r6, [lr]
   49bc8:	str	r5, [sp, #60]	; 0x3c
   49bcc:	ldr	r1, [r0]
   49bd0:	b	49bd8 <GetDataSlab+0x22214>
   49bd4:	ldr	r1, [sp, #52]	; 0x34
   49bd8:	mul	r0, r4, r6
   49bdc:	add	r7, r7, #1
   49be0:	str	r1, [sp, #52]	; 0x34
   49be4:	add	r2, r2, r0, lsl #2
   49be8:	mov	r0, #0
   49bec:	cmp	r7, r1
   49bf0:	blt	49b70 <GetDataSlab+0x221ac>
   49bf4:	b	47ffc <GetDataSlab+0x20638>
   49bf8:	cmp	r1, #1
   49bfc:	blt	2a430 <GetDataSlab+0x2a6c>
   49c00:	ldr	r0, [sp, #16]
   49c04:	ldr	r1, [sp, #24]
   49c08:	ldr	r6, [sp, #28]
   49c0c:	mov	r7, #0
   49c10:	mla	r0, r0, r4, r1
   49c14:	add	r2, r5, r0, lsl #3
   49c18:	ldr	r0, [sp, #56]	; 0x38
   49c1c:	cmp	r0, #1
   49c20:	blt	49c7c <GetDataSlab+0x222b8>
   49c24:	ldr	r5, [sp, #60]	; 0x3c
   49c28:	ldr	r4, [fp, #8]
   49c2c:	mov	r0, #0
   49c30:	ldr	r6, [r8]
   49c34:	mul	r6, r6, r0
   49c38:	add	r6, r2, r6, lsl #3
   49c3c:	vldr	d16, [r6]
   49c40:	vcvt.u32.f64	s0, d16
   49c44:	vmov	r6, s0
   49c48:	strb	r6, [r5, r0]
   49c4c:	add	r0, r0, #1
   49c50:	ldr	r6, [r3]
   49c54:	cmp	r0, r6
   49c58:	blt	49c30 <GetDataSlab+0x2226c>
   49c5c:	add	r5, r5, r0
   49c60:	ldr	r0, [sp, #36]	; 0x24
   49c64:	str	r6, [sp, #56]	; 0x38
   49c68:	ldr	r4, [r4]
   49c6c:	ldr	r6, [lr]
   49c70:	str	r5, [sp, #60]	; 0x3c
   49c74:	ldr	r1, [r0]
   49c78:	b	49c80 <GetDataSlab+0x222bc>
   49c7c:	ldr	r1, [sp, #52]	; 0x34
   49c80:	mul	r0, r4, r6
   49c84:	add	r7, r7, #1
   49c88:	str	r1, [sp, #52]	; 0x34
   49c8c:	add	r2, r2, r0, lsl #3
   49c90:	mov	r0, #0
   49c94:	cmp	r7, r1
   49c98:	blt	49c18 <GetDataSlab+0x22254>
   49c9c:	b	47ffc <GetDataSlab+0x20638>
   49ca0:	cmp	r1, #1
   49ca4:	blt	2a430 <GetDataSlab+0x2a6c>
   49ca8:	ldr	r0, [sp, #16]
   49cac:	ldr	r2, [sp, #24]
   49cb0:	mla	r0, r0, r4, r2
   49cb4:	ldr	r4, [fp, #8]
   49cb8:	mov	r2, #0
   49cbc:	add	r0, r5, r0, lsl #3
   49cc0:	ldr	r5, [sp, #60]	; 0x3c
   49cc4:	mov	r9, r4
   49cc8:	cmp	r6, #1
   49ccc:	blt	49d0c <GetDataSlab+0x22348>
   49cd0:	mov	r7, #0
   49cd4:	ldr	r6, [r8]
   49cd8:	mul	r6, r6, r7
   49cdc:	ldrb	r6, [r0, r6, lsl #3]
   49ce0:	strb	r6, [r5, r7]
   49ce4:	add	r7, r7, #1
   49ce8:	ldr	r6, [r3]
   49cec:	cmp	r7, r6
   49cf0:	blt	49cd4 <GetDataSlab+0x22310>
   49cf4:	ldr	r1, [sp, #36]	; 0x24
   49cf8:	add	r5, r5, r7
   49cfc:	ldr	r7, [r9]
   49d00:	ldr	r4, [lr]
   49d04:	ldr	r1, [r1]
   49d08:	b	49d14 <GetDataSlab+0x22350>
   49d0c:	ldr	r7, [sp, #44]	; 0x2c
   49d10:	ldr	r4, [sp, #28]
   49d14:	str	r7, [sp, #44]	; 0x2c
   49d18:	mul	r7, r7, r4
   49d1c:	add	r2, r2, #1
   49d20:	str	r4, [sp, #28]
   49d24:	add	r0, r0, r7, lsl #3
   49d28:	cmp	r2, r1
   49d2c:	blt	49cc8 <GetDataSlab+0x22304>
   49d30:	ldr	r4, [sp, #44]	; 0x2c
   49d34:	mov	r0, #0
   49d38:	str	r5, [sp, #60]	; 0x3c
   49d3c:	b	4cd1c <GetDataSlab+0x25358>
   49d40:	ldr	r0, [sp, #52]	; 0x34
   49d44:	cmp	r0, #1
   49d48:	blt	2a430 <GetDataSlab+0x2a6c>
   49d4c:	ldr	r1, [sp, #16]
   49d50:	mul	sl, ip, r4
   49d54:	add	r9, sp, #160	; 0xa0
   49d58:	mla	r0, r1, r4, r6
   49d5c:	add	r2, r3, r0
   49d60:	ldr	r3, [sp, #56]	; 0x38
   49d64:	str	r0, [sp, #20]
   49d68:	add	r0, r3, r6
   49d6c:	cmp	r3, #7
   49d70:	mov	r6, #0
   49d74:	mla	r0, r1, r4, r0
   49d78:	mov	r1, #0
   49d7c:	str	r0, [sp, #40]	; 0x28
   49d80:	sub	r0, r7, #1
   49d84:	movwhi	r1, #1
   49d88:	clz	r0, r0
   49d8c:	lsr	r0, r0, #5
   49d90:	and	r0, r1, r0
   49d94:	lsl	r1, r7, #3
   49d98:	str	r0, [sp, #44]	; 0x2c
   49d9c:	bic	r0, r3, #7
   49da0:	str	r0, [sp, #36]	; 0x24
   49da4:	ldr	r0, [sp, #56]	; 0x38
   49da8:	cmp	r0, #1
   49dac:	blt	49e84 <GetDataSlab+0x224c0>
   49db0:	ldr	r0, [sp, #44]	; 0x2c
   49db4:	ldr	ip, [sp, #60]	; 0x3c
   49db8:	mov	r3, #0
   49dbc:	cmp	r0, #0
   49dc0:	beq	49e54 <GetDataSlab+0x22490>
   49dc4:	ldr	r0, [sp, #40]	; 0x28
   49dc8:	ldr	r7, [sp, #48]	; 0x30
   49dcc:	ldr	r4, [sp, #32]
   49dd0:	mla	r0, sl, r6, r0
   49dd4:	add	r0, r7, r0
   49dd8:	cmp	r0, ip
   49ddc:	bls	49e04 <GetDataSlab+0x22440>
   49de0:	ldr	r0, [sp, #20]
   49de4:	ldr	r7, [sp, #48]	; 0x30
   49de8:	mla	r0, sl, r6, r0
   49dec:	add	r0, r7, r0
   49df0:	ldr	r7, [sp, #56]	; 0x38
   49df4:	add	r5, ip, r7, lsl #1
   49df8:	cmp	r0, r5
   49dfc:	mov	r0, ip
   49e00:	bcc	49e5c <GetDataSlab+0x22498>
   49e04:	ldr	r3, [sp, #36]	; 0x24
   49e08:	mov	r5, r2
   49e0c:	add	r0, ip, r3, lsl #1
   49e10:	ldr	lr, [r5]
   49e14:	ldr	r8, [r5, #4]
   49e18:	add	r5, r5, r1
   49e1c:	subs	r3, r3, #8
   49e20:	str	r8, [sp, #164]	; 0xa4
   49e24:	str	lr, [sp, #160]	; 0xa0
   49e28:	vld1.8	{d16}, [r9 :64]
   49e2c:	vmovl.u8	q8, d16
   49e30:	vst1.16	{d16-d17}, [ip]!
   49e34:	bne	49e10 <GetDataSlab+0x2244c>
   49e38:	ldr	r3, [sp, #56]	; 0x38
   49e3c:	ldr	r7, [sp, #36]	; 0x24
   49e40:	ldr	ip, [sp, #60]	; 0x3c
   49e44:	cmp	r3, r7
   49e48:	mov	r3, r7
   49e4c:	bne	49e5c <GetDataSlab+0x22498>
   49e50:	b	49e78 <GetDataSlab+0x224b4>
   49e54:	ldr	r4, [sp, #32]
   49e58:	mov	r0, ip
   49e5c:	ldr	r7, [sp, #56]	; 0x38
   49e60:	mla	r5, r4, r3, r2
   49e64:	sub	r3, r7, r3
   49e68:	ldrb	r7, [r5], r4
   49e6c:	subs	r3, r3, #1
   49e70:	strh	r7, [r0], #2
   49e74:	bne	49e68 <GetDataSlab+0x224a4>
   49e78:	ldr	r0, [sp, #56]	; 0x38
   49e7c:	add	ip, ip, r0, lsl #1
   49e80:	str	ip, [sp, #60]	; 0x3c
   49e84:	ldr	r3, [sp, #52]	; 0x34
   49e88:	add	r6, r6, #1
   49e8c:	add	r2, r2, sl
   49e90:	mov	r0, #0
   49e94:	cmp	r6, r3
   49e98:	bne	49da4 <GetDataSlab+0x223e0>
   49e9c:	b	47ffc <GetDataSlab+0x20638>
   49ea0:	ldr	r0, [sp, #52]	; 0x34
   49ea4:	cmp	r0, #1
   49ea8:	blt	2a430 <GetDataSlab+0x2a6c>
   49eac:	ldr	r0, [sp, #16]
   49eb0:	ldr	r5, [sp, #56]	; 0x38
   49eb4:	mov	r2, #0
   49eb8:	mla	r0, r0, r4, r6
   49ebc:	mov	r6, ip
   49ec0:	cmp	r5, #7
   49ec4:	bic	r9, r5, #7
   49ec8:	add	r1, r3, r0, lsl #1
   49ecc:	lsl	ip, r0, #1
   49ed0:	sub	r0, r7, #1
   49ed4:	movwhi	r2, #1
   49ed8:	mov	r3, #0
   49edc:	clz	r0, r0
   49ee0:	add	lr, ip, r5, lsl #1
   49ee4:	lsr	r0, r0, #5
   49ee8:	and	r8, r2, r0
   49eec:	mul	r0, r6, r4
   49ef0:	lsl	r4, r7, #1
   49ef4:	lsl	r2, r7, #4
   49ef8:	lsl	sl, r0, #1
   49efc:	ldr	r0, [sp, #56]	; 0x38
   49f00:	cmp	r0, #1
   49f04:	blt	49fb4 <GetDataSlab+0x225f0>
   49f08:	mov	r7, #0
   49f0c:	cmp	r8, #0
   49f10:	beq	49f84 <GetDataSlab+0x225c0>
   49f14:	ldr	r5, [sp, #48]	; 0x30
   49f18:	mla	r0, sl, r3, lr
   49f1c:	add	r0, r5, r0
   49f20:	ldr	r5, [sp, #60]	; 0x3c
   49f24:	cmp	r0, r5
   49f28:	bls	49f50 <GetDataSlab+0x2258c>
   49f2c:	ldr	r5, [sp, #48]	; 0x30
   49f30:	mla	r0, sl, r3, ip
   49f34:	ldr	r6, [sp, #60]	; 0x3c
   49f38:	add	r0, r5, r0
   49f3c:	ldr	r5, [sp, #56]	; 0x38
   49f40:	add	r5, r6, r5, lsl #1
   49f44:	cmp	r0, r5
   49f48:	mov	r0, r6
   49f4c:	bcc	49f88 <GetDataSlab+0x225c4>
   49f50:	ldr	r6, [sp, #60]	; 0x3c
   49f54:	mov	r5, r9
   49f58:	mov	r7, r1
   49f5c:	add	r0, r6, r9, lsl #1
   49f60:	vld1.16	{d16-d17}, [r7], r2
   49f64:	subs	r5, r5, #8
   49f68:	vst1.16	{d16-d17}, [r6]!
   49f6c:	bne	49f60 <GetDataSlab+0x2259c>
   49f70:	ldr	r5, [sp, #56]	; 0x38
   49f74:	mov	r7, r9
   49f78:	cmp	r5, r9
   49f7c:	bne	49f88 <GetDataSlab+0x225c4>
   49f80:	b	49fa4 <GetDataSlab+0x225e0>
   49f84:	ldr	r0, [sp, #60]	; 0x3c
   49f88:	ldr	r6, [sp, #56]	; 0x38
   49f8c:	mla	r5, r4, r7, r1
   49f90:	sub	r7, r6, r7
   49f94:	ldrh	r6, [r5], r4
   49f98:	subs	r7, r7, #1
   49f9c:	strh	r6, [r0], #2
   49fa0:	bne	49f94 <GetDataSlab+0x225d0>
   49fa4:	ldr	r0, [sp, #60]	; 0x3c
   49fa8:	ldr	r5, [sp, #56]	; 0x38
   49fac:	add	r0, r0, r5, lsl #1
   49fb0:	str	r0, [sp, #60]	; 0x3c
   49fb4:	ldr	r5, [sp, #52]	; 0x34
   49fb8:	add	r3, r3, #1
   49fbc:	add	r1, r1, sl
   49fc0:	mov	r0, #0
   49fc4:	cmp	r3, r5
   49fc8:	bne	49efc <GetDataSlab+0x22538>
   49fcc:	b	47ffc <GetDataSlab+0x20638>
   49fd0:	ldr	r0, [sp, #52]	; 0x34
   49fd4:	cmp	r0, #1
   49fd8:	blt	2a430 <GetDataSlab+0x2a6c>
   49fdc:	ldr	r0, [sp, #16]
   49fe0:	ldr	r5, [sp, #56]	; 0x38
   49fe4:	mov	r2, #0
   49fe8:	mla	r0, r0, r4, r6
   49fec:	mov	r6, ip
   49ff0:	cmp	r5, #7
   49ff4:	bic	r9, r5, #7
   49ff8:	add	r1, r3, r0, lsl #1
   49ffc:	lsl	ip, r0, #1
   4a000:	sub	r0, r7, #1
   4a004:	movwhi	r2, #1
   4a008:	mov	r3, #0
   4a00c:	clz	r0, r0
   4a010:	add	lr, ip, r5, lsl #1
   4a014:	lsr	r0, r0, #5
   4a018:	and	r8, r2, r0
   4a01c:	mul	r0, r6, r4
   4a020:	lsl	r4, r7, #1
   4a024:	lsl	r2, r7, #4
   4a028:	lsl	sl, r0, #1
   4a02c:	ldr	r0, [sp, #56]	; 0x38
   4a030:	cmp	r0, #1
   4a034:	blt	4a0e4 <GetDataSlab+0x22720>
   4a038:	mov	r7, #0
   4a03c:	cmp	r8, #0
   4a040:	beq	4a0b4 <GetDataSlab+0x226f0>
   4a044:	ldr	r5, [sp, #48]	; 0x30
   4a048:	mla	r0, sl, r3, lr
   4a04c:	add	r0, r5, r0
   4a050:	ldr	r5, [sp, #60]	; 0x3c
   4a054:	cmp	r0, r5
   4a058:	bls	4a080 <GetDataSlab+0x226bc>
   4a05c:	ldr	r5, [sp, #48]	; 0x30
   4a060:	mla	r0, sl, r3, ip
   4a064:	ldr	r6, [sp, #60]	; 0x3c
   4a068:	add	r0, r5, r0
   4a06c:	ldr	r5, [sp, #56]	; 0x38
   4a070:	add	r5, r6, r5, lsl #1
   4a074:	cmp	r0, r5
   4a078:	mov	r0, r6
   4a07c:	bcc	4a0b8 <GetDataSlab+0x226f4>
   4a080:	ldr	r6, [sp, #60]	; 0x3c
   4a084:	mov	r5, r9
   4a088:	mov	r7, r1
   4a08c:	add	r0, r6, r9, lsl #1
   4a090:	vld1.16	{d16-d17}, [r7], r2
   4a094:	subs	r5, r5, #8
   4a098:	vst1.16	{d16-d17}, [r6]!
   4a09c:	bne	4a090 <GetDataSlab+0x226cc>
   4a0a0:	ldr	r5, [sp, #56]	; 0x38
   4a0a4:	mov	r7, r9
   4a0a8:	cmp	r5, r9
   4a0ac:	bne	4a0b8 <GetDataSlab+0x226f4>
   4a0b0:	b	4a0d4 <GetDataSlab+0x22710>
   4a0b4:	ldr	r0, [sp, #60]	; 0x3c
   4a0b8:	ldr	r6, [sp, #56]	; 0x38
   4a0bc:	mla	r5, r4, r7, r1
   4a0c0:	sub	r7, r6, r7
   4a0c4:	ldrh	r6, [r5], r4
   4a0c8:	subs	r7, r7, #1
   4a0cc:	strh	r6, [r0], #2
   4a0d0:	bne	4a0c4 <GetDataSlab+0x22700>
   4a0d4:	ldr	r0, [sp, #60]	; 0x3c
   4a0d8:	ldr	r5, [sp, #56]	; 0x38
   4a0dc:	add	r0, r0, r5, lsl #1
   4a0e0:	str	r0, [sp, #60]	; 0x3c
   4a0e4:	ldr	r5, [sp, #52]	; 0x34
   4a0e8:	add	r3, r3, #1
   4a0ec:	add	r1, r1, sl
   4a0f0:	mov	r0, #0
   4a0f4:	cmp	r3, r5
   4a0f8:	bne	4a02c <GetDataSlab+0x22668>
   4a0fc:	b	47ffc <GetDataSlab+0x20638>
   4a100:	ldr	r0, [sp, #52]	; 0x34
   4a104:	cmp	r0, #1
   4a108:	blt	2a430 <GetDataSlab+0x2a6c>
   4a10c:	ldr	r0, [sp, #16]
   4a110:	ldr	r5, [sp, #56]	; 0x38
   4a114:	ldr	r9, [sp, #56]	; 0x38
   4a118:	mov	r2, #0
   4a11c:	mla	r0, r0, r4, r6
   4a120:	cmp	r5, #3
   4a124:	mov	r6, ip
   4a128:	bic	r8, r5, #3
   4a12c:	add	r1, r3, r0, lsl #2
   4a130:	sub	r3, r7, #1
   4a134:	mov	r0, #0
   4a138:	clz	r3, r3
   4a13c:	movwhi	r0, #1
   4a140:	lsr	r3, r3, #5
   4a144:	and	ip, r0, r3
   4a148:	mul	r0, r6, r4
   4a14c:	lsl	r6, r7, #2
   4a150:	lsl	r4, r7, #4
   4a154:	lsl	lr, r0, #2
   4a158:	cmp	r9, #1
   4a15c:	blt	4a1c4 <GetDataSlab+0x22800>
   4a160:	ldr	r0, [sp, #60]	; 0x3c
   4a164:	mov	r3, #0
   4a168:	cmp	ip, #0
   4a16c:	beq	4a1a0 <GetDataSlab+0x227dc>
   4a170:	ldr	r3, [sp, #60]	; 0x3c
   4a174:	mov	r5, r8
   4a178:	mov	r7, r1
   4a17c:	add	r0, r3, r8, lsl #1
   4a180:	vld1.32	{d16-d17}, [r7], r4
   4a184:	subs	r5, r5, #4
   4a188:	vmovn.i32	d16, q8
   4a18c:	vst1.16	{d16}, [r3]!
   4a190:	bne	4a180 <GetDataSlab+0x227bc>
   4a194:	cmp	r9, r8
   4a198:	mov	r3, r8
   4a19c:	beq	4a1b8 <GetDataSlab+0x227f4>
   4a1a0:	mla	r5, r6, r3, r1
   4a1a4:	sub	r7, r9, r3
   4a1a8:	ldr	r3, [r5], r6
   4a1ac:	subs	r7, r7, #1
   4a1b0:	strh	r3, [r0], #2
   4a1b4:	bne	4a1a8 <GetDataSlab+0x227e4>
   4a1b8:	ldr	r0, [sp, #60]	; 0x3c
   4a1bc:	add	r0, r0, r9, lsl #1
   4a1c0:	str	r0, [sp, #60]	; 0x3c
   4a1c4:	ldr	r3, [sp, #52]	; 0x34
   4a1c8:	add	r2, r2, #1
   4a1cc:	add	r1, r1, lr
   4a1d0:	mov	r0, #0
   4a1d4:	cmp	r2, r3
   4a1d8:	bne	4a158 <GetDataSlab+0x22794>
   4a1dc:	b	47ffc <GetDataSlab+0x20638>
   4a1e0:	ldr	r0, [sp, #52]	; 0x34
   4a1e4:	cmp	r0, #1
   4a1e8:	blt	2a430 <GetDataSlab+0x2a6c>
   4a1ec:	ldr	r0, [sp, #16]
   4a1f0:	ldr	r5, [sp, #56]	; 0x38
   4a1f4:	ldr	r9, [sp, #56]	; 0x38
   4a1f8:	mov	r2, #0
   4a1fc:	mla	r0, r0, r4, r6
   4a200:	cmp	r5, #3
   4a204:	mov	r6, ip
   4a208:	bic	r8, r5, #3
   4a20c:	add	r1, r3, r0, lsl #2
   4a210:	sub	r3, r7, #1
   4a214:	mov	r0, #0
   4a218:	clz	r3, r3
   4a21c:	movwhi	r0, #1
   4a220:	lsr	r3, r3, #5
   4a224:	and	ip, r0, r3
   4a228:	mul	r0, r6, r4
   4a22c:	lsl	r6, r7, #2
   4a230:	lsl	r4, r7, #4
   4a234:	lsl	lr, r0, #2
   4a238:	cmp	r9, #1
   4a23c:	blt	4a2a4 <GetDataSlab+0x228e0>
   4a240:	ldr	r0, [sp, #60]	; 0x3c
   4a244:	mov	r3, #0
   4a248:	cmp	ip, #0
   4a24c:	beq	4a280 <GetDataSlab+0x228bc>
   4a250:	ldr	r3, [sp, #60]	; 0x3c
   4a254:	mov	r5, r8
   4a258:	mov	r7, r1
   4a25c:	add	r0, r3, r8, lsl #1
   4a260:	vld1.32	{d16-d17}, [r7], r4
   4a264:	subs	r5, r5, #4
   4a268:	vmovn.i32	d16, q8
   4a26c:	vst1.16	{d16}, [r3]!
   4a270:	bne	4a260 <GetDataSlab+0x2289c>
   4a274:	cmp	r9, r8
   4a278:	mov	r3, r8
   4a27c:	beq	4a298 <GetDataSlab+0x228d4>
   4a280:	mla	r5, r6, r3, r1
   4a284:	sub	r7, r9, r3
   4a288:	ldr	r3, [r5], r6
   4a28c:	subs	r7, r7, #1
   4a290:	strh	r3, [r0], #2
   4a294:	bne	4a288 <GetDataSlab+0x228c4>
   4a298:	ldr	r0, [sp, #60]	; 0x3c
   4a29c:	add	r0, r0, r9, lsl #1
   4a2a0:	str	r0, [sp, #60]	; 0x3c
   4a2a4:	ldr	r3, [sp, #52]	; 0x34
   4a2a8:	add	r2, r2, #1
   4a2ac:	add	r1, r1, lr
   4a2b0:	mov	r0, #0
   4a2b4:	cmp	r2, r3
   4a2b8:	bne	4a238 <GetDataSlab+0x22874>
   4a2bc:	b	47ffc <GetDataSlab+0x20638>
   4a2c0:	ldr	r0, [sp, #52]	; 0x34
   4a2c4:	cmp	r0, #1
   4a2c8:	blt	2a430 <GetDataSlab+0x2a6c>
   4a2cc:	ldr	r0, [sp, #16]
   4a2d0:	ldr	r5, [sp, #56]	; 0x38
   4a2d4:	ldr	r9, [sp, #56]	; 0x38
   4a2d8:	mov	r2, #0
   4a2dc:	mla	r0, r0, r4, r6
   4a2e0:	cmp	r5, #3
   4a2e4:	mov	r6, ip
   4a2e8:	bic	r8, r5, #3
   4a2ec:	add	r1, r3, r0, lsl #2
   4a2f0:	sub	r3, r7, #1
   4a2f4:	mov	r0, #0
   4a2f8:	clz	r3, r3
   4a2fc:	movwhi	r0, #1
   4a300:	lsr	r3, r3, #5
   4a304:	and	ip, r0, r3
   4a308:	mul	r0, r6, r4
   4a30c:	lsl	r6, r7, #2
   4a310:	lsl	r4, r7, #4
   4a314:	lsl	lr, r0, #2
   4a318:	cmp	r9, #1
   4a31c:	blt	4a394 <GetDataSlab+0x229d0>
   4a320:	ldr	r0, [sp, #60]	; 0x3c
   4a324:	mov	r3, #0
   4a328:	cmp	ip, #0
   4a32c:	beq	4a364 <GetDataSlab+0x229a0>
   4a330:	ldr	r3, [sp, #60]	; 0x3c
   4a334:	mov	r5, r8
   4a338:	mov	r7, r1
   4a33c:	add	r0, r3, r8, lsl #1
   4a340:	vld1.32	{d16-d17}, [r7], r4
   4a344:	subs	r5, r5, #4
   4a348:	vcvt.s32.f32	q8, q8
   4a34c:	vmovn.i32	d16, q8
   4a350:	vst1.16	{d16}, [r3]!
   4a354:	bne	4a340 <GetDataSlab+0x2297c>
   4a358:	cmp	r9, r8
   4a35c:	mov	r3, r8
   4a360:	beq	4a388 <GetDataSlab+0x229c4>
   4a364:	mla	r5, r6, r3, r1
   4a368:	sub	r7, r9, r3
   4a36c:	vldr	s0, [r5]
   4a370:	add	r5, r5, r6
   4a374:	subs	r7, r7, #1
   4a378:	vcvt.s32.f32	s0, s0
   4a37c:	vmov	r3, s0
   4a380:	strh	r3, [r0], #2
   4a384:	bne	4a36c <GetDataSlab+0x229a8>
   4a388:	ldr	r0, [sp, #60]	; 0x3c
   4a38c:	add	r0, r0, r9, lsl #1
   4a390:	str	r0, [sp, #60]	; 0x3c
   4a394:	ldr	r3, [sp, #52]	; 0x34
   4a398:	add	r2, r2, #1
   4a39c:	add	r1, r1, lr
   4a3a0:	mov	r0, #0
   4a3a4:	cmp	r2, r3
   4a3a8:	bne	4a318 <GetDataSlab+0x22954>
   4a3ac:	b	47ffc <GetDataSlab+0x20638>
   4a3b0:	ldr	r0, [sp, #52]	; 0x34
   4a3b4:	cmp	r0, #1
   4a3b8:	blt	2a430 <GetDataSlab+0x2a6c>
   4a3bc:	ldr	r0, [sp, #16]
   4a3c0:	ldr	lr, [sp, #56]	; 0x38
   4a3c4:	mla	r0, r0, r4, r6
   4a3c8:	add	r1, r3, r0, lsl #3
   4a3cc:	mul	r0, ip, r4
   4a3d0:	lsl	r3, r7, #3
   4a3d4:	mov	r7, #0
   4a3d8:	lsl	ip, r0, #3
   4a3dc:	cmp	lr, #1
   4a3e0:	blt	4a420 <GetDataSlab+0x22a5c>
   4a3e4:	ldr	r2, [sp, #60]	; 0x3c
   4a3e8:	ldr	r8, [sp, #52]	; 0x34
   4a3ec:	mov	r0, r1
   4a3f0:	mov	r6, lr
   4a3f4:	mov	r5, r2
   4a3f8:	vldr	d16, [r0]
   4a3fc:	add	r0, r0, r3
   4a400:	subs	r6, r6, #1
   4a404:	vcvt.s32.f64	s0, d16
   4a408:	vmov	r4, s0
   4a40c:	strh	r4, [r5], #2
   4a410:	bne	4a3f8 <GetDataSlab+0x22a34>
   4a414:	add	r2, r2, lr, lsl #1
   4a418:	str	r2, [sp, #60]	; 0x3c
   4a41c:	b	4a424 <GetDataSlab+0x22a60>
   4a420:	ldr	r8, [sp, #52]	; 0x34
   4a424:	add	r7, r7, #1
   4a428:	add	r1, r1, ip
   4a42c:	mov	r0, #0
   4a430:	cmp	r7, r8
   4a434:	bne	4a3dc <GetDataSlab+0x22a18>
   4a438:	b	47ffc <GetDataSlab+0x20638>
   4a43c:	ldr	r0, [sp, #52]	; 0x34
   4a440:	cmp	r0, #1
   4a444:	blt	2a430 <GetDataSlab+0x2a6c>
   4a448:	ldr	r0, [sp, #16]
   4a44c:	ldr	r1, [sp, #20]
   4a450:	sub	r2, r7, #1
   4a454:	clz	r2, r2
   4a458:	lsr	r2, r2, #5
   4a45c:	mla	r0, r0, r4, r6
   4a460:	mov	r6, ip
   4a464:	add	r0, r3, r0, lsl #3
   4a468:	mov	r3, r4
   4a46c:	ldr	r4, [sp, #56]	; 0x38
   4a470:	cmp	r4, #1
   4a474:	bic	r8, r4, #1
   4a478:	movwne	r1, #1
   4a47c:	and	ip, r1, r2
   4a480:	mul	r1, r6, r3
   4a484:	lsl	r3, r7, #3
   4a488:	lsl	r7, r7, #4
   4a48c:	lsl	lr, r1, #3
   4a490:	mov	r1, #0
   4a494:	ldr	r2, [sp, #56]	; 0x38
   4a498:	cmp	r2, #1
   4a49c:	blt	4a514 <GetDataSlab+0x22b50>
   4a4a0:	ldr	r2, [sp, #60]	; 0x3c
   4a4a4:	mov	r5, #0
   4a4a8:	cmp	ip, #0
   4a4ac:	beq	4a4e8 <GetDataSlab+0x22b24>
   4a4b0:	ldr	r6, [sp, #60]	; 0x3c
   4a4b4:	mov	r4, r8
   4a4b8:	mov	r5, r0
   4a4bc:	add	r2, r6, r8, lsl #1
   4a4c0:	vld1.64	{d16-d17}, [r5], r7
   4a4c4:	subs	r4, r4, #2
   4a4c8:	vmovn.i64	d16, q8
   4a4cc:	vuzp.16	d16, d17
   4a4d0:	vst1.32	{d16[0]}, [r6]!
   4a4d4:	bne	4a4c0 <GetDataSlab+0x22afc>
   4a4d8:	ldr	r4, [sp, #56]	; 0x38
   4a4dc:	mov	r5, r8
   4a4e0:	cmp	r4, r8
   4a4e4:	beq	4a504 <GetDataSlab+0x22b40>
   4a4e8:	ldr	r6, [sp, #56]	; 0x38
   4a4ec:	mla	r4, r3, r5, r0
   4a4f0:	sub	r5, r6, r5
   4a4f4:	ldrh	r6, [r4], r3
   4a4f8:	subs	r5, r5, #1
   4a4fc:	strh	r6, [r2], #2
   4a500:	bne	4a4f4 <GetDataSlab+0x22b30>
   4a504:	ldr	r2, [sp, #60]	; 0x3c
   4a508:	ldr	r4, [sp, #56]	; 0x38
   4a50c:	add	r2, r2, r4, lsl #1
   4a510:	str	r2, [sp, #60]	; 0x3c
   4a514:	ldr	r2, [sp, #52]	; 0x34
   4a518:	add	r1, r1, #1
   4a51c:	add	r0, r0, lr
   4a520:	cmp	r1, r2
   4a524:	bne	4a494 <GetDataSlab+0x22ad0>
   4a528:	ldr	r4, [sp, #44]	; 0x2c
   4a52c:	ldr	ip, [sp, #28]
   4a530:	mov	r0, #0
   4a534:	ldr	r1, [sp, #40]	; 0x28
   4a538:	cmp	r1, #13
   4a53c:	bne	47ffc <GetDataSlab+0x20638>
   4a540:	ldr	r0, [sp, #52]	; 0x34
   4a544:	cmp	r0, #1
   4a548:	blt	2a430 <GetDataSlab+0x2a6c>
   4a54c:	ldr	r0, [sp, #16]
   4a550:	ldr	r1, [sp, #24]
   4a554:	ldr	r5, [sp, #32]
   4a558:	ldr	r7, [sp, #20]
   4a55c:	ldr	r9, [sp, #56]	; 0x38
   4a560:	mov	r2, ip
   4a564:	mla	r0, r0, r4, r1
   4a568:	ldr	r1, [sp, #48]	; 0x30
   4a56c:	lsl	r6, r5, #4
   4a570:	add	r3, r1, r0, lsl #3
   4a574:	ldr	r1, [sp, #56]	; 0x38
   4a578:	sub	r0, r5, #1
   4a57c:	clz	r0, r0
   4a580:	lsr	r0, r0, #5
   4a584:	cmp	r1, #1
   4a588:	bic	r8, r1, #1
   4a58c:	movwne	r7, #1
   4a590:	and	ip, r7, r0
   4a594:	mul	r0, r2, r4
   4a598:	lsl	r7, r5, #3
   4a59c:	mov	r2, #0
   4a5a0:	lsl	lr, r0, #3
   4a5a4:	cmp	r9, #1
   4a5a8:	blt	4a614 <GetDataSlab+0x22c50>
   4a5ac:	ldr	r0, [sp, #60]	; 0x3c
   4a5b0:	mov	r1, #0
   4a5b4:	cmp	ip, #0
   4a5b8:	beq	4a5f0 <GetDataSlab+0x22c2c>
   4a5bc:	ldr	r5, [sp, #60]	; 0x3c
   4a5c0:	mov	r4, r8
   4a5c4:	mov	r1, r3
   4a5c8:	add	r0, r5, r8, lsl #1
   4a5cc:	vld1.64	{d16-d17}, [r1], r6
   4a5d0:	subs	r4, r4, #2
   4a5d4:	vmovn.i64	d16, q8
   4a5d8:	vuzp.16	d16, d17
   4a5dc:	vst1.32	{d16[0]}, [r5]!
   4a5e0:	bne	4a5cc <GetDataSlab+0x22c08>
   4a5e4:	cmp	r9, r8
   4a5e8:	mov	r1, r8
   4a5ec:	beq	4a608 <GetDataSlab+0x22c44>
   4a5f0:	mla	r4, r7, r1, r3
   4a5f4:	sub	r1, r9, r1
   4a5f8:	ldrh	r5, [r4], r7
   4a5fc:	subs	r1, r1, #1
   4a600:	strh	r5, [r0], #2
   4a604:	bne	4a5f8 <GetDataSlab+0x22c34>
   4a608:	ldr	r0, [sp, #60]	; 0x3c
   4a60c:	add	r0, r0, r9, lsl #1
   4a610:	str	r0, [sp, #60]	; 0x3c
   4a614:	ldr	r1, [sp, #52]	; 0x34
   4a618:	add	r2, r2, #1
   4a61c:	add	r3, r3, lr
   4a620:	mov	r0, #0
   4a624:	cmp	r2, r1
   4a628:	bne	4a5a4 <GetDataSlab+0x22be0>
   4a62c:	b	47ffc <GetDataSlab+0x20638>
   4a630:	ldr	r0, [sp, #52]	; 0x34
   4a634:	cmp	r0, #1
   4a638:	blt	2a430 <GetDataSlab+0x2a6c>
   4a63c:	ldr	r1, [sp, #16]
   4a640:	mul	sl, ip, r4
   4a644:	add	r9, sp, #176	; 0xb0
   4a648:	mla	r0, r1, r4, r6
   4a64c:	add	r2, r3, r0
   4a650:	ldr	r3, [sp, #56]	; 0x38
   4a654:	str	r0, [sp, #20]
   4a658:	add	r0, r3, r6
   4a65c:	cmp	r3, #7
   4a660:	mov	r6, #0
   4a664:	mla	r0, r1, r4, r0
   4a668:	mov	r1, #0
   4a66c:	str	r0, [sp, #40]	; 0x28
   4a670:	sub	r0, r7, #1
   4a674:	movwhi	r1, #1
   4a678:	clz	r0, r0
   4a67c:	lsr	r0, r0, #5
   4a680:	and	r0, r1, r0
   4a684:	lsl	r1, r7, #3
   4a688:	str	r0, [sp, #44]	; 0x2c
   4a68c:	bic	r0, r3, #7
   4a690:	str	r0, [sp, #36]	; 0x24
   4a694:	ldr	r0, [sp, #56]	; 0x38
   4a698:	cmp	r0, #1
   4a69c:	blt	4a774 <GetDataSlab+0x22db0>
   4a6a0:	ldr	r0, [sp, #44]	; 0x2c
   4a6a4:	ldr	ip, [sp, #60]	; 0x3c
   4a6a8:	mov	r3, #0
   4a6ac:	cmp	r0, #0
   4a6b0:	beq	4a744 <GetDataSlab+0x22d80>
   4a6b4:	ldr	r0, [sp, #40]	; 0x28
   4a6b8:	ldr	r7, [sp, #48]	; 0x30
   4a6bc:	ldr	r4, [sp, #32]
   4a6c0:	mla	r0, sl, r6, r0
   4a6c4:	add	r0, r7, r0
   4a6c8:	cmp	r0, ip
   4a6cc:	bls	4a6f4 <GetDataSlab+0x22d30>
   4a6d0:	ldr	r0, [sp, #20]
   4a6d4:	ldr	r7, [sp, #48]	; 0x30
   4a6d8:	mla	r0, sl, r6, r0
   4a6dc:	add	r0, r7, r0
   4a6e0:	ldr	r7, [sp, #56]	; 0x38
   4a6e4:	add	r5, ip, r7, lsl #1
   4a6e8:	cmp	r0, r5
   4a6ec:	mov	r0, ip
   4a6f0:	bcc	4a74c <GetDataSlab+0x22d88>
   4a6f4:	ldr	r3, [sp, #36]	; 0x24
   4a6f8:	mov	r5, r2
   4a6fc:	add	r0, ip, r3, lsl #1
   4a700:	ldr	lr, [r5]
   4a704:	ldr	r8, [r5, #4]
   4a708:	add	r5, r5, r1
   4a70c:	subs	r3, r3, #8
   4a710:	str	r8, [sp, #180]	; 0xb4
   4a714:	str	lr, [sp, #176]	; 0xb0
   4a718:	vld1.8	{d16}, [r9 :64]
   4a71c:	vmovl.u8	q8, d16
   4a720:	vst1.16	{d16-d17}, [ip]!
   4a724:	bne	4a700 <GetDataSlab+0x22d3c>
   4a728:	ldr	r3, [sp, #56]	; 0x38
   4a72c:	ldr	r7, [sp, #36]	; 0x24
   4a730:	ldr	ip, [sp, #60]	; 0x3c
   4a734:	cmp	r3, r7
   4a738:	mov	r3, r7
   4a73c:	bne	4a74c <GetDataSlab+0x22d88>
   4a740:	b	4a768 <GetDataSlab+0x22da4>
   4a744:	ldr	r4, [sp, #32]
   4a748:	mov	r0, ip
   4a74c:	ldr	r7, [sp, #56]	; 0x38
   4a750:	mla	r5, r4, r3, r2
   4a754:	sub	r3, r7, r3
   4a758:	ldrb	r7, [r5], r4
   4a75c:	subs	r3, r3, #1
   4a760:	strh	r7, [r0], #2
   4a764:	bne	4a758 <GetDataSlab+0x22d94>
   4a768:	ldr	r0, [sp, #56]	; 0x38
   4a76c:	add	ip, ip, r0, lsl #1
   4a770:	str	ip, [sp, #60]	; 0x3c
   4a774:	ldr	r3, [sp, #52]	; 0x34
   4a778:	add	r6, r6, #1
   4a77c:	add	r2, r2, sl
   4a780:	mov	r0, #0
   4a784:	cmp	r6, r3
   4a788:	bne	4a694 <GetDataSlab+0x22cd0>
   4a78c:	b	47ffc <GetDataSlab+0x20638>
   4a790:	ldr	r0, [sp, #52]	; 0x34
   4a794:	cmp	r0, #1
   4a798:	blt	2a430 <GetDataSlab+0x2a6c>
   4a79c:	ldr	r0, [sp, #16]
   4a7a0:	ldr	r5, [sp, #56]	; 0x38
   4a7a4:	mov	r2, #0
   4a7a8:	mla	r0, r0, r4, r6
   4a7ac:	mov	r6, ip
   4a7b0:	cmp	r5, #7
   4a7b4:	bic	r9, r5, #7
   4a7b8:	add	r1, r3, r0, lsl #1
   4a7bc:	lsl	ip, r0, #1
   4a7c0:	sub	r0, r7, #1
   4a7c4:	movwhi	r2, #1
   4a7c8:	mov	r3, #0
   4a7cc:	clz	r0, r0
   4a7d0:	add	lr, ip, r5, lsl #1
   4a7d4:	lsr	r0, r0, #5
   4a7d8:	and	r8, r2, r0
   4a7dc:	mul	r0, r6, r4
   4a7e0:	lsl	r4, r7, #1
   4a7e4:	lsl	r2, r7, #4
   4a7e8:	lsl	sl, r0, #1
   4a7ec:	ldr	r0, [sp, #56]	; 0x38
   4a7f0:	cmp	r0, #1
   4a7f4:	blt	4a8a4 <GetDataSlab+0x22ee0>
   4a7f8:	mov	r7, #0
   4a7fc:	cmp	r8, #0
   4a800:	beq	4a874 <GetDataSlab+0x22eb0>
   4a804:	ldr	r5, [sp, #48]	; 0x30
   4a808:	mla	r0, sl, r3, lr
   4a80c:	add	r0, r5, r0
   4a810:	ldr	r5, [sp, #60]	; 0x3c
   4a814:	cmp	r0, r5
   4a818:	bls	4a840 <GetDataSlab+0x22e7c>
   4a81c:	ldr	r5, [sp, #48]	; 0x30
   4a820:	mla	r0, sl, r3, ip
   4a824:	ldr	r6, [sp, #60]	; 0x3c
   4a828:	add	r0, r5, r0
   4a82c:	ldr	r5, [sp, #56]	; 0x38
   4a830:	add	r5, r6, r5, lsl #1
   4a834:	cmp	r0, r5
   4a838:	mov	r0, r6
   4a83c:	bcc	4a878 <GetDataSlab+0x22eb4>
   4a840:	ldr	r6, [sp, #60]	; 0x3c
   4a844:	mov	r5, r9
   4a848:	mov	r7, r1
   4a84c:	add	r0, r6, r9, lsl #1
   4a850:	vld1.16	{d16-d17}, [r7], r2
   4a854:	subs	r5, r5, #8
   4a858:	vst1.16	{d16-d17}, [r6]!
   4a85c:	bne	4a850 <GetDataSlab+0x22e8c>
   4a860:	ldr	r5, [sp, #56]	; 0x38
   4a864:	mov	r7, r9
   4a868:	cmp	r5, r9
   4a86c:	bne	4a878 <GetDataSlab+0x22eb4>
   4a870:	b	4a894 <GetDataSlab+0x22ed0>
   4a874:	ldr	r0, [sp, #60]	; 0x3c
   4a878:	ldr	r6, [sp, #56]	; 0x38
   4a87c:	mla	r5, r4, r7, r1
   4a880:	sub	r7, r6, r7
   4a884:	ldrh	r6, [r5], r4
   4a888:	subs	r7, r7, #1
   4a88c:	strh	r6, [r0], #2
   4a890:	bne	4a884 <GetDataSlab+0x22ec0>
   4a894:	ldr	r0, [sp, #60]	; 0x3c
   4a898:	ldr	r5, [sp, #56]	; 0x38
   4a89c:	add	r0, r0, r5, lsl #1
   4a8a0:	str	r0, [sp, #60]	; 0x3c
   4a8a4:	ldr	r5, [sp, #52]	; 0x34
   4a8a8:	add	r3, r3, #1
   4a8ac:	add	r1, r1, sl
   4a8b0:	mov	r0, #0
   4a8b4:	cmp	r3, r5
   4a8b8:	bne	4a7ec <GetDataSlab+0x22e28>
   4a8bc:	b	47ffc <GetDataSlab+0x20638>
   4a8c0:	ldr	r0, [sp, #52]	; 0x34
   4a8c4:	cmp	r0, #1
   4a8c8:	blt	2a430 <GetDataSlab+0x2a6c>
   4a8cc:	ldr	r0, [sp, #16]
   4a8d0:	ldr	r5, [sp, #56]	; 0x38
   4a8d4:	mov	r2, #0
   4a8d8:	mla	r0, r0, r4, r6
   4a8dc:	mov	r6, ip
   4a8e0:	cmp	r5, #7
   4a8e4:	bic	r9, r5, #7
   4a8e8:	add	r1, r3, r0, lsl #1
   4a8ec:	lsl	ip, r0, #1
   4a8f0:	sub	r0, r7, #1
   4a8f4:	movwhi	r2, #1
   4a8f8:	mov	r3, #0
   4a8fc:	clz	r0, r0
   4a900:	add	lr, ip, r5, lsl #1
   4a904:	lsr	r0, r0, #5
   4a908:	and	r8, r2, r0
   4a90c:	mul	r0, r6, r4
   4a910:	lsl	r4, r7, #1
   4a914:	lsl	r2, r7, #4
   4a918:	lsl	sl, r0, #1
   4a91c:	ldr	r0, [sp, #56]	; 0x38
   4a920:	cmp	r0, #1
   4a924:	blt	4a9d4 <GetDataSlab+0x23010>
   4a928:	mov	r7, #0
   4a92c:	cmp	r8, #0
   4a930:	beq	4a9a4 <GetDataSlab+0x22fe0>
   4a934:	ldr	r5, [sp, #48]	; 0x30
   4a938:	mla	r0, sl, r3, lr
   4a93c:	add	r0, r5, r0
   4a940:	ldr	r5, [sp, #60]	; 0x3c
   4a944:	cmp	r0, r5
   4a948:	bls	4a970 <GetDataSlab+0x22fac>
   4a94c:	ldr	r5, [sp, #48]	; 0x30
   4a950:	mla	r0, sl, r3, ip
   4a954:	ldr	r6, [sp, #60]	; 0x3c
   4a958:	add	r0, r5, r0
   4a95c:	ldr	r5, [sp, #56]	; 0x38
   4a960:	add	r5, r6, r5, lsl #1
   4a964:	cmp	r0, r5
   4a968:	mov	r0, r6
   4a96c:	bcc	4a9a8 <GetDataSlab+0x22fe4>
   4a970:	ldr	r6, [sp, #60]	; 0x3c
   4a974:	mov	r5, r9
   4a978:	mov	r7, r1
   4a97c:	add	r0, r6, r9, lsl #1
   4a980:	vld1.16	{d16-d17}, [r7], r2
   4a984:	subs	r5, r5, #8
   4a988:	vst1.16	{d16-d17}, [r6]!
   4a98c:	bne	4a980 <GetDataSlab+0x22fbc>
   4a990:	ldr	r5, [sp, #56]	; 0x38
   4a994:	mov	r7, r9
   4a998:	cmp	r5, r9
   4a99c:	bne	4a9a8 <GetDataSlab+0x22fe4>
   4a9a0:	b	4a9c4 <GetDataSlab+0x23000>
   4a9a4:	ldr	r0, [sp, #60]	; 0x3c
   4a9a8:	ldr	r6, [sp, #56]	; 0x38
   4a9ac:	mla	r5, r4, r7, r1
   4a9b0:	sub	r7, r6, r7
   4a9b4:	ldrh	r6, [r5], r4
   4a9b8:	subs	r7, r7, #1
   4a9bc:	strh	r6, [r0], #2
   4a9c0:	bne	4a9b4 <GetDataSlab+0x22ff0>
   4a9c4:	ldr	r0, [sp, #60]	; 0x3c
   4a9c8:	ldr	r5, [sp, #56]	; 0x38
   4a9cc:	add	r0, r0, r5, lsl #1
   4a9d0:	str	r0, [sp, #60]	; 0x3c
   4a9d4:	ldr	r5, [sp, #52]	; 0x34
   4a9d8:	add	r3, r3, #1
   4a9dc:	add	r1, r1, sl
   4a9e0:	mov	r0, #0
   4a9e4:	cmp	r3, r5
   4a9e8:	bne	4a91c <GetDataSlab+0x22f58>
   4a9ec:	b	47ffc <GetDataSlab+0x20638>
   4a9f0:	ldr	r0, [sp, #52]	; 0x34
   4a9f4:	cmp	r0, #1
   4a9f8:	blt	2a430 <GetDataSlab+0x2a6c>
   4a9fc:	ldr	r0, [sp, #16]
   4aa00:	ldr	r5, [sp, #56]	; 0x38
   4aa04:	ldr	r9, [sp, #56]	; 0x38
   4aa08:	mov	r2, #0
   4aa0c:	mla	r0, r0, r4, r6
   4aa10:	cmp	r5, #3
   4aa14:	mov	r6, ip
   4aa18:	bic	r8, r5, #3
   4aa1c:	add	r1, r3, r0, lsl #2
   4aa20:	sub	r3, r7, #1
   4aa24:	mov	r0, #0
   4aa28:	clz	r3, r3
   4aa2c:	movwhi	r0, #1
   4aa30:	lsr	r3, r3, #5
   4aa34:	and	ip, r0, r3
   4aa38:	mul	r0, r6, r4
   4aa3c:	lsl	r6, r7, #2
   4aa40:	lsl	r4, r7, #4
   4aa44:	lsl	lr, r0, #2
   4aa48:	cmp	r9, #1
   4aa4c:	blt	4aab4 <GetDataSlab+0x230f0>
   4aa50:	ldr	r0, [sp, #60]	; 0x3c
   4aa54:	mov	r3, #0
   4aa58:	cmp	ip, #0
   4aa5c:	beq	4aa90 <GetDataSlab+0x230cc>
   4aa60:	ldr	r3, [sp, #60]	; 0x3c
   4aa64:	mov	r5, r8
   4aa68:	mov	r7, r1
   4aa6c:	add	r0, r3, r8, lsl #1
   4aa70:	vld1.32	{d16-d17}, [r7], r4
   4aa74:	subs	r5, r5, #4
   4aa78:	vmovn.i32	d16, q8
   4aa7c:	vst1.16	{d16}, [r3]!
   4aa80:	bne	4aa70 <GetDataSlab+0x230ac>
   4aa84:	cmp	r9, r8
   4aa88:	mov	r3, r8
   4aa8c:	beq	4aaa8 <GetDataSlab+0x230e4>
   4aa90:	mla	r5, r6, r3, r1
   4aa94:	sub	r7, r9, r3
   4aa98:	ldr	r3, [r5], r6
   4aa9c:	subs	r7, r7, #1
   4aaa0:	strh	r3, [r0], #2
   4aaa4:	bne	4aa98 <GetDataSlab+0x230d4>
   4aaa8:	ldr	r0, [sp, #60]	; 0x3c
   4aaac:	add	r0, r0, r9, lsl #1
   4aab0:	str	r0, [sp, #60]	; 0x3c
   4aab4:	ldr	r3, [sp, #52]	; 0x34
   4aab8:	add	r2, r2, #1
   4aabc:	add	r1, r1, lr
   4aac0:	mov	r0, #0
   4aac4:	cmp	r2, r3
   4aac8:	bne	4aa48 <GetDataSlab+0x23084>
   4aacc:	b	47ffc <GetDataSlab+0x20638>
   4aad0:	ldr	r0, [sp, #52]	; 0x34
   4aad4:	cmp	r0, #1
   4aad8:	blt	2a430 <GetDataSlab+0x2a6c>
   4aadc:	ldr	r0, [sp, #16]
   4aae0:	ldr	r5, [sp, #56]	; 0x38
   4aae4:	ldr	r9, [sp, #56]	; 0x38
   4aae8:	mov	r2, #0
   4aaec:	mla	r0, r0, r4, r6
   4aaf0:	cmp	r5, #3
   4aaf4:	mov	r6, ip
   4aaf8:	bic	r8, r5, #3
   4aafc:	add	r1, r3, r0, lsl #2
   4ab00:	sub	r3, r7, #1
   4ab04:	mov	r0, #0
   4ab08:	clz	r3, r3
   4ab0c:	movwhi	r0, #1
   4ab10:	lsr	r3, r3, #5
   4ab14:	and	ip, r0, r3
   4ab18:	mul	r0, r6, r4
   4ab1c:	lsl	r6, r7, #2
   4ab20:	lsl	r4, r7, #4
   4ab24:	lsl	lr, r0, #2
   4ab28:	cmp	r9, #1
   4ab2c:	blt	4ab94 <GetDataSlab+0x231d0>
   4ab30:	ldr	r0, [sp, #60]	; 0x3c
   4ab34:	mov	r3, #0
   4ab38:	cmp	ip, #0
   4ab3c:	beq	4ab70 <GetDataSlab+0x231ac>
   4ab40:	ldr	r3, [sp, #60]	; 0x3c
   4ab44:	mov	r5, r8
   4ab48:	mov	r7, r1
   4ab4c:	add	r0, r3, r8, lsl #1
   4ab50:	vld1.32	{d16-d17}, [r7], r4
   4ab54:	subs	r5, r5, #4
   4ab58:	vmovn.i32	d16, q8
   4ab5c:	vst1.16	{d16}, [r3]!
   4ab60:	bne	4ab50 <GetDataSlab+0x2318c>
   4ab64:	cmp	r9, r8
   4ab68:	mov	r3, r8
   4ab6c:	beq	4ab88 <GetDataSlab+0x231c4>
   4ab70:	mla	r5, r6, r3, r1
   4ab74:	sub	r7, r9, r3
   4ab78:	ldr	r3, [r5], r6
   4ab7c:	subs	r7, r7, #1
   4ab80:	strh	r3, [r0], #2
   4ab84:	bne	4ab78 <GetDataSlab+0x231b4>
   4ab88:	ldr	r0, [sp, #60]	; 0x3c
   4ab8c:	add	r0, r0, r9, lsl #1
   4ab90:	str	r0, [sp, #60]	; 0x3c
   4ab94:	ldr	r3, [sp, #52]	; 0x34
   4ab98:	add	r2, r2, #1
   4ab9c:	add	r1, r1, lr
   4aba0:	mov	r0, #0
   4aba4:	cmp	r2, r3
   4aba8:	bne	4ab28 <GetDataSlab+0x23164>
   4abac:	b	47ffc <GetDataSlab+0x20638>
   4abb0:	ldr	r0, [sp, #52]	; 0x34
   4abb4:	cmp	r0, #1
   4abb8:	blt	2a430 <GetDataSlab+0x2a6c>
   4abbc:	ldr	r0, [sp, #16]
   4abc0:	ldr	r5, [sp, #56]	; 0x38
   4abc4:	ldr	r9, [sp, #56]	; 0x38
   4abc8:	mov	r2, #0
   4abcc:	mla	r0, r0, r4, r6
   4abd0:	cmp	r5, #3
   4abd4:	mov	r6, ip
   4abd8:	bic	r8, r5, #3
   4abdc:	add	r1, r3, r0, lsl #2
   4abe0:	sub	r3, r7, #1
   4abe4:	mov	r0, #0
   4abe8:	clz	r3, r3
   4abec:	movwhi	r0, #1
   4abf0:	lsr	r3, r3, #5
   4abf4:	and	ip, r0, r3
   4abf8:	mul	r0, r6, r4
   4abfc:	lsl	r6, r7, #2
   4ac00:	lsl	r4, r7, #4
   4ac04:	lsl	lr, r0, #2
   4ac08:	cmp	r9, #1
   4ac0c:	blt	4ac84 <GetDataSlab+0x232c0>
   4ac10:	ldr	r0, [sp, #60]	; 0x3c
   4ac14:	mov	r3, #0
   4ac18:	cmp	ip, #0
   4ac1c:	beq	4ac54 <GetDataSlab+0x23290>
   4ac20:	ldr	r3, [sp, #60]	; 0x3c
   4ac24:	mov	r5, r8
   4ac28:	mov	r7, r1
   4ac2c:	add	r0, r3, r8, lsl #1
   4ac30:	vld1.32	{d16-d17}, [r7], r4
   4ac34:	subs	r5, r5, #4
   4ac38:	vcvt.u32.f32	q8, q8
   4ac3c:	vmovn.i32	d16, q8
   4ac40:	vst1.16	{d16}, [r3]!
   4ac44:	bne	4ac30 <GetDataSlab+0x2326c>
   4ac48:	cmp	r9, r8
   4ac4c:	mov	r3, r8
   4ac50:	beq	4ac78 <GetDataSlab+0x232b4>
   4ac54:	mla	r5, r6, r3, r1
   4ac58:	sub	r7, r9, r3
   4ac5c:	vldr	s0, [r5]
   4ac60:	add	r5, r5, r6
   4ac64:	subs	r7, r7, #1
   4ac68:	vcvt.u32.f32	s0, s0
   4ac6c:	vmov	r3, s0
   4ac70:	strh	r3, [r0], #2
   4ac74:	bne	4ac5c <GetDataSlab+0x23298>
   4ac78:	ldr	r0, [sp, #60]	; 0x3c
   4ac7c:	add	r0, r0, r9, lsl #1
   4ac80:	str	r0, [sp, #60]	; 0x3c
   4ac84:	ldr	r3, [sp, #52]	; 0x34
   4ac88:	add	r2, r2, #1
   4ac8c:	add	r1, r1, lr
   4ac90:	mov	r0, #0
   4ac94:	cmp	r2, r3
   4ac98:	bne	4ac08 <GetDataSlab+0x23244>
   4ac9c:	b	47ffc <GetDataSlab+0x20638>
   4aca0:	ldr	r0, [sp, #52]	; 0x34
   4aca4:	cmp	r0, #1
   4aca8:	blt	2a430 <GetDataSlab+0x2a6c>
   4acac:	ldr	r0, [sp, #16]
   4acb0:	ldr	lr, [sp, #56]	; 0x38
   4acb4:	mla	r0, r0, r4, r6
   4acb8:	add	r1, r3, r0, lsl #3
   4acbc:	mul	r0, ip, r4
   4acc0:	lsl	r3, r7, #3
   4acc4:	mov	r7, #0
   4acc8:	lsl	ip, r0, #3
   4accc:	cmp	lr, #1
   4acd0:	blt	4ad10 <GetDataSlab+0x2334c>
   4acd4:	ldr	r2, [sp, #60]	; 0x3c
   4acd8:	ldr	r8, [sp, #52]	; 0x34
   4acdc:	mov	r0, r1
   4ace0:	mov	r6, lr
   4ace4:	mov	r5, r2
   4ace8:	vldr	d16, [r0]
   4acec:	add	r0, r0, r3
   4acf0:	subs	r6, r6, #1
   4acf4:	vcvt.u32.f64	s0, d16
   4acf8:	vmov	r4, s0
   4acfc:	strh	r4, [r5], #2
   4ad00:	bne	4ace8 <GetDataSlab+0x23324>
   4ad04:	add	r2, r2, lr, lsl #1
   4ad08:	str	r2, [sp, #60]	; 0x3c
   4ad0c:	b	4ad14 <GetDataSlab+0x23350>
   4ad10:	ldr	r8, [sp, #52]	; 0x34
   4ad14:	add	r7, r7, #1
   4ad18:	add	r1, r1, ip
   4ad1c:	mov	r0, #0
   4ad20:	cmp	r7, r8
   4ad24:	bne	4accc <GetDataSlab+0x23308>
   4ad28:	b	47ffc <GetDataSlab+0x20638>
   4ad2c:	ldr	r0, [sp, #52]	; 0x34
   4ad30:	cmp	r0, #1
   4ad34:	blt	2a430 <GetDataSlab+0x2a6c>
   4ad38:	ldr	r0, [sp, #16]
   4ad3c:	ldr	r1, [sp, #20]
   4ad40:	sub	r2, r7, #1
   4ad44:	clz	r2, r2
   4ad48:	lsr	r2, r2, #5
   4ad4c:	mla	r0, r0, r4, r6
   4ad50:	mov	r6, ip
   4ad54:	add	r0, r3, r0, lsl #3
   4ad58:	mov	r3, r4
   4ad5c:	ldr	r4, [sp, #56]	; 0x38
   4ad60:	cmp	r4, #1
   4ad64:	bic	r8, r4, #1
   4ad68:	movwne	r1, #1
   4ad6c:	and	ip, r1, r2
   4ad70:	mul	r1, r6, r3
   4ad74:	lsl	r3, r7, #3
   4ad78:	lsl	r7, r7, #4
   4ad7c:	lsl	lr, r1, #3
   4ad80:	mov	r1, #0
   4ad84:	ldr	r2, [sp, #56]	; 0x38
   4ad88:	cmp	r2, #1
   4ad8c:	blt	4ae04 <GetDataSlab+0x23440>
   4ad90:	ldr	r2, [sp, #60]	; 0x3c
   4ad94:	mov	r5, #0
   4ad98:	cmp	ip, #0
   4ad9c:	beq	4add8 <GetDataSlab+0x23414>
   4ada0:	ldr	r6, [sp, #60]	; 0x3c
   4ada4:	mov	r4, r8
   4ada8:	mov	r5, r0
   4adac:	add	r2, r6, r8, lsl #1
   4adb0:	vld1.64	{d16-d17}, [r5], r7
   4adb4:	subs	r4, r4, #2
   4adb8:	vmovn.i64	d16, q8
   4adbc:	vuzp.16	d16, d17
   4adc0:	vst1.32	{d16[0]}, [r6]!
   4adc4:	bne	4adb0 <GetDataSlab+0x233ec>
   4adc8:	ldr	r4, [sp, #56]	; 0x38
   4adcc:	mov	r5, r8
   4add0:	cmp	r4, r8
   4add4:	beq	4adf4 <GetDataSlab+0x23430>
   4add8:	ldr	r6, [sp, #56]	; 0x38
   4addc:	mla	r4, r3, r5, r0
   4ade0:	sub	r5, r6, r5
   4ade4:	ldrh	r6, [r4], r3
   4ade8:	subs	r5, r5, #1
   4adec:	strh	r6, [r2], #2
   4adf0:	bne	4ade4 <GetDataSlab+0x23420>
   4adf4:	ldr	r2, [sp, #60]	; 0x3c
   4adf8:	ldr	r4, [sp, #56]	; 0x38
   4adfc:	add	r2, r2, r4, lsl #1
   4ae00:	str	r2, [sp, #60]	; 0x3c
   4ae04:	ldr	r2, [sp, #52]	; 0x34
   4ae08:	add	r1, r1, #1
   4ae0c:	add	r0, r0, lr
   4ae10:	cmp	r1, r2
   4ae14:	bne	4ad84 <GetDataSlab+0x233c0>
   4ae18:	ldr	r4, [sp, #44]	; 0x2c
   4ae1c:	ldr	ip, [sp, #28]
   4ae20:	mov	r0, #0
   4ae24:	ldr	r1, [sp, #40]	; 0x28
   4ae28:	cmp	r1, #13
   4ae2c:	bne	47ffc <GetDataSlab+0x20638>
   4ae30:	ldr	r0, [sp, #52]	; 0x34
   4ae34:	cmp	r0, #1
   4ae38:	blt	2a430 <GetDataSlab+0x2a6c>
   4ae3c:	ldr	r0, [sp, #16]
   4ae40:	ldr	r1, [sp, #24]
   4ae44:	ldr	r5, [sp, #32]
   4ae48:	ldr	r7, [sp, #20]
   4ae4c:	ldr	r9, [sp, #56]	; 0x38
   4ae50:	mov	r2, ip
   4ae54:	mla	r0, r0, r4, r1
   4ae58:	ldr	r1, [sp, #48]	; 0x30
   4ae5c:	lsl	r6, r5, #4
   4ae60:	add	r3, r1, r0, lsl #3
   4ae64:	ldr	r1, [sp, #56]	; 0x38
   4ae68:	sub	r0, r5, #1
   4ae6c:	clz	r0, r0
   4ae70:	lsr	r0, r0, #5
   4ae74:	cmp	r1, #1
   4ae78:	bic	r8, r1, #1
   4ae7c:	movwne	r7, #1
   4ae80:	and	ip, r7, r0
   4ae84:	mul	r0, r2, r4
   4ae88:	lsl	r7, r5, #3
   4ae8c:	mov	r2, #0
   4ae90:	lsl	lr, r0, #3
   4ae94:	cmp	r9, #1
   4ae98:	blt	4af04 <GetDataSlab+0x23540>
   4ae9c:	ldr	r0, [sp, #60]	; 0x3c
   4aea0:	mov	r1, #0
   4aea4:	cmp	ip, #0
   4aea8:	beq	4aee0 <GetDataSlab+0x2351c>
   4aeac:	ldr	r5, [sp, #60]	; 0x3c
   4aeb0:	mov	r4, r8
   4aeb4:	mov	r1, r3
   4aeb8:	add	r0, r5, r8, lsl #1
   4aebc:	vld1.64	{d16-d17}, [r1], r6
   4aec0:	subs	r4, r4, #2
   4aec4:	vmovn.i64	d16, q8
   4aec8:	vuzp.16	d16, d17
   4aecc:	vst1.32	{d16[0]}, [r5]!
   4aed0:	bne	4aebc <GetDataSlab+0x234f8>
   4aed4:	cmp	r9, r8
   4aed8:	mov	r1, r8
   4aedc:	beq	4aef8 <GetDataSlab+0x23534>
   4aee0:	mla	r4, r7, r1, r3
   4aee4:	sub	r1, r9, r1
   4aee8:	ldrh	r5, [r4], r7
   4aeec:	subs	r1, r1, #1
   4aef0:	strh	r5, [r0], #2
   4aef4:	bne	4aee8 <GetDataSlab+0x23524>
   4aef8:	ldr	r0, [sp, #60]	; 0x3c
   4aefc:	add	r0, r0, r9, lsl #1
   4af00:	str	r0, [sp, #60]	; 0x3c
   4af04:	ldr	r1, [sp, #52]	; 0x34
   4af08:	add	r2, r2, #1
   4af0c:	add	r3, r3, lr
   4af10:	mov	r0, #0
   4af14:	cmp	r2, r1
   4af18:	bne	4ae94 <GetDataSlab+0x234d0>
   4af1c:	b	47ffc <GetDataSlab+0x20638>
   4af20:	cmp	r6, #1
   4af24:	blt	2a430 <GetDataSlab+0x2a6c>
   4af28:	ldr	r0, [sp, #16]
   4af2c:	ldr	r2, [sp, #24]
   4af30:	mov	r7, #0
   4af34:	mla	r0, r0, r4, r2
   4af38:	add	r2, r1, r0
   4af3c:	ldr	r0, [sp, #56]	; 0x38
   4af40:	cmp	r0, #1
   4af44:	blt	4af9c <GetDataSlab+0x235d8>
   4af48:	ldr	r4, [sp, #60]	; 0x3c
   4af4c:	ldr	ip, [fp, #8]
   4af50:	mov	r0, #0
   4af54:	mov	r6, #0
   4af58:	ldr	r5, [r8]
   4af5c:	add	r0, r0, #4
   4af60:	mul	r5, r5, r6
   4af64:	ldrb	r5, [r2, r5]
   4af68:	str	r5, [r4, r6, lsl #2]
   4af6c:	add	r6, r6, #1
   4af70:	ldr	r5, [r3]
   4af74:	cmp	r6, r5
   4af78:	blt	4af58 <GetDataSlab+0x23594>
   4af7c:	add	r4, r4, r0
   4af80:	ldr	r0, [sp, #36]	; 0x24
   4af84:	str	r5, [sp, #56]	; 0x38
   4af88:	str	r4, [sp, #60]	; 0x3c
   4af8c:	ldr	r4, [ip]
   4af90:	ldr	ip, [lr]
   4af94:	ldr	r1, [r0]
   4af98:	b	4afa0 <GetDataSlab+0x235dc>
   4af9c:	ldr	r1, [sp, #52]	; 0x34
   4afa0:	add	r7, r7, #1
   4afa4:	mla	r2, r4, ip, r2
   4afa8:	mov	r0, #0
   4afac:	str	r1, [sp, #52]	; 0x34
   4afb0:	cmp	r7, r1
   4afb4:	blt	4af3c <GetDataSlab+0x23578>
   4afb8:	b	47ffc <GetDataSlab+0x20638>
   4afbc:	cmp	r6, #1
   4afc0:	blt	2a430 <GetDataSlab+0x2a6c>
   4afc4:	ldr	r0, [sp, #16]
   4afc8:	ldr	r2, [sp, #24]
   4afcc:	mov	r7, #0
   4afd0:	mla	r0, r0, r4, r2
   4afd4:	add	r2, r1, r0, lsl #1
   4afd8:	ldr	r0, [sp, #56]	; 0x38
   4afdc:	cmp	r0, #1
   4afe0:	blt	4b03c <GetDataSlab+0x23678>
   4afe4:	ldr	r4, [sp, #60]	; 0x3c
   4afe8:	ldr	ip, [fp, #8]
   4afec:	mov	r0, #0
   4aff0:	mov	r6, #0
   4aff4:	ldr	r5, [r8]
   4aff8:	add	r0, r0, #4
   4affc:	mul	r5, r5, r6
   4b000:	add	r5, r2, r5, lsl #1
   4b004:	ldrsh	r5, [r5]
   4b008:	str	r5, [r4, r6, lsl #2]
   4b00c:	add	r6, r6, #1
   4b010:	ldr	r5, [r3]
   4b014:	cmp	r6, r5
   4b018:	blt	4aff4 <GetDataSlab+0x23630>
   4b01c:	add	r4, r4, r0
   4b020:	ldr	r0, [sp, #36]	; 0x24
   4b024:	str	r5, [sp, #56]	; 0x38
   4b028:	str	r4, [sp, #60]	; 0x3c
   4b02c:	ldr	r4, [ip]
   4b030:	ldr	ip, [lr]
   4b034:	ldr	r1, [r0]
   4b038:	b	4b040 <GetDataSlab+0x2367c>
   4b03c:	ldr	r1, [sp, #52]	; 0x34
   4b040:	mul	r0, r4, ip
   4b044:	add	r7, r7, #1
   4b048:	str	r1, [sp, #52]	; 0x34
   4b04c:	add	r2, r2, r0, lsl #1
   4b050:	mov	r0, #0
   4b054:	cmp	r7, r1
   4b058:	blt	4afd8 <GetDataSlab+0x23614>
   4b05c:	b	47ffc <GetDataSlab+0x20638>
   4b060:	cmp	r6, #1
   4b064:	blt	2a430 <GetDataSlab+0x2a6c>
   4b068:	ldr	r0, [sp, #16]
   4b06c:	ldr	r2, [sp, #24]
   4b070:	mov	r7, #0
   4b074:	mla	r0, r0, r4, r2
   4b078:	add	r2, r1, r0, lsl #1
   4b07c:	ldr	r0, [sp, #56]	; 0x38
   4b080:	cmp	r0, #1
   4b084:	blt	4b0e0 <GetDataSlab+0x2371c>
   4b088:	ldr	r4, [sp, #60]	; 0x3c
   4b08c:	ldr	ip, [fp, #8]
   4b090:	mov	r0, #0
   4b094:	mov	r6, #0
   4b098:	ldr	r5, [r8]
   4b09c:	add	r0, r0, #4
   4b0a0:	mul	r5, r5, r6
   4b0a4:	add	r5, r2, r5, lsl #1
   4b0a8:	ldrh	r5, [r5]
   4b0ac:	str	r5, [r4, r6, lsl #2]
   4b0b0:	add	r6, r6, #1
   4b0b4:	ldr	r5, [r3]
   4b0b8:	cmp	r6, r5
   4b0bc:	blt	4b098 <GetDataSlab+0x236d4>
   4b0c0:	add	r4, r4, r0
   4b0c4:	ldr	r0, [sp, #36]	; 0x24
   4b0c8:	str	r5, [sp, #56]	; 0x38
   4b0cc:	str	r4, [sp, #60]	; 0x3c
   4b0d0:	ldr	r4, [ip]
   4b0d4:	ldr	ip, [lr]
   4b0d8:	ldr	r1, [r0]
   4b0dc:	b	4b0e4 <GetDataSlab+0x23720>
   4b0e0:	ldr	r1, [sp, #52]	; 0x34
   4b0e4:	mul	r0, r4, ip
   4b0e8:	add	r7, r7, #1
   4b0ec:	str	r1, [sp, #52]	; 0x34
   4b0f0:	add	r2, r2, r0, lsl #1
   4b0f4:	mov	r0, #0
   4b0f8:	cmp	r7, r1
   4b0fc:	blt	4b07c <GetDataSlab+0x236b8>
   4b100:	b	47ffc <GetDataSlab+0x20638>
   4b104:	cmp	r6, #1
   4b108:	blt	2a430 <GetDataSlab+0x2a6c>
   4b10c:	ldr	r0, [sp, #16]
   4b110:	ldr	r2, [sp, #24]
   4b114:	mov	r7, #0
   4b118:	mla	r0, r0, r4, r2
   4b11c:	add	r2, r1, r0, lsl #2
   4b120:	ldr	r0, [sp, #56]	; 0x38
   4b124:	cmp	r0, #1
   4b128:	blt	4b180 <GetDataSlab+0x237bc>
   4b12c:	ldr	r4, [sp, #60]	; 0x3c
   4b130:	ldr	ip, [fp, #8]
   4b134:	mov	r0, #0
   4b138:	mov	r6, #0
   4b13c:	ldr	r5, [r8]
   4b140:	add	r0, r0, #4
   4b144:	mul	r5, r5, r6
   4b148:	ldr	r5, [r2, r5, lsl #2]
   4b14c:	str	r5, [r4, r6, lsl #2]
   4b150:	add	r6, r6, #1
   4b154:	ldr	r5, [r3]
   4b158:	cmp	r6, r5
   4b15c:	blt	4b13c <GetDataSlab+0x23778>
   4b160:	add	r4, r4, r0
   4b164:	ldr	r0, [sp, #36]	; 0x24
   4b168:	str	r5, [sp, #56]	; 0x38
   4b16c:	str	r4, [sp, #60]	; 0x3c
   4b170:	ldr	r4, [ip]
   4b174:	ldr	ip, [lr]
   4b178:	ldr	r1, [r0]
   4b17c:	b	4b184 <GetDataSlab+0x237c0>
   4b180:	ldr	r1, [sp, #52]	; 0x34
   4b184:	mul	r0, r4, ip
   4b188:	add	r7, r7, #1
   4b18c:	str	r1, [sp, #52]	; 0x34
   4b190:	add	r2, r2, r0, lsl #2
   4b194:	mov	r0, #0
   4b198:	cmp	r7, r1
   4b19c:	blt	4b120 <GetDataSlab+0x2375c>
   4b1a0:	b	47ffc <GetDataSlab+0x20638>
   4b1a4:	cmp	r6, #1
   4b1a8:	blt	2a430 <GetDataSlab+0x2a6c>
   4b1ac:	ldr	r0, [sp, #16]
   4b1b0:	ldr	r2, [sp, #24]
   4b1b4:	mov	r7, #0
   4b1b8:	mla	r0, r0, r4, r2
   4b1bc:	add	r2, r1, r0, lsl #2
   4b1c0:	ldr	r0, [sp, #56]	; 0x38
   4b1c4:	cmp	r0, #1
   4b1c8:	blt	4b220 <GetDataSlab+0x2385c>
   4b1cc:	ldr	r4, [sp, #60]	; 0x3c
   4b1d0:	ldr	ip, [fp, #8]
   4b1d4:	mov	r0, #0
   4b1d8:	mov	r6, #0
   4b1dc:	ldr	r5, [r8]
   4b1e0:	add	r0, r0, #4
   4b1e4:	mul	r5, r5, r6
   4b1e8:	ldr	r5, [r2, r5, lsl #2]
   4b1ec:	str	r5, [r4, r6, lsl #2]
   4b1f0:	add	r6, r6, #1
   4b1f4:	ldr	r5, [r3]
   4b1f8:	cmp	r6, r5
   4b1fc:	blt	4b1dc <GetDataSlab+0x23818>
   4b200:	add	r4, r4, r0
   4b204:	ldr	r0, [sp, #36]	; 0x24
   4b208:	str	r5, [sp, #56]	; 0x38
   4b20c:	str	r4, [sp, #60]	; 0x3c
   4b210:	ldr	r4, [ip]
   4b214:	ldr	ip, [lr]
   4b218:	ldr	r1, [r0]
   4b21c:	b	4b224 <GetDataSlab+0x23860>
   4b220:	ldr	r1, [sp, #52]	; 0x34
   4b224:	mul	r0, r4, ip
   4b228:	add	r7, r7, #1
   4b22c:	str	r1, [sp, #52]	; 0x34
   4b230:	add	r2, r2, r0, lsl #2
   4b234:	mov	r0, #0
   4b238:	cmp	r7, r1
   4b23c:	blt	4b1c0 <GetDataSlab+0x237fc>
   4b240:	b	47ffc <GetDataSlab+0x20638>
   4b244:	cmp	r6, #1
   4b248:	blt	2a430 <GetDataSlab+0x2a6c>
   4b24c:	ldr	r0, [sp, #16]
   4b250:	ldr	r2, [sp, #24]
   4b254:	mov	r7, #0
   4b258:	mla	r0, r0, r4, r2
   4b25c:	add	r2, r1, r0, lsl #2
   4b260:	ldr	r0, [sp, #56]	; 0x38
   4b264:	cmp	r0, #1
   4b268:	blt	4b2cc <GetDataSlab+0x23908>
   4b26c:	ldr	r4, [sp, #60]	; 0x3c
   4b270:	ldr	ip, [fp, #8]
   4b274:	mov	r0, #0
   4b278:	mov	r6, #0
   4b27c:	ldr	r5, [r8]
   4b280:	add	r0, r0, #4
   4b284:	mul	r5, r5, r6
   4b288:	add	r5, r2, r5, lsl #2
   4b28c:	vldr	s0, [r5]
   4b290:	vcvt.s32.f32	s0, s0
   4b294:	vmov	r5, s0
   4b298:	str	r5, [r4, r6, lsl #2]
   4b29c:	add	r6, r6, #1
   4b2a0:	ldr	r5, [r3]
   4b2a4:	cmp	r6, r5
   4b2a8:	blt	4b27c <GetDataSlab+0x238b8>
   4b2ac:	add	r4, r4, r0
   4b2b0:	ldr	r0, [sp, #36]	; 0x24
   4b2b4:	str	r5, [sp, #56]	; 0x38
   4b2b8:	str	r4, [sp, #60]	; 0x3c
   4b2bc:	ldr	r4, [ip]
   4b2c0:	ldr	ip, [lr]
   4b2c4:	ldr	r1, [r0]
   4b2c8:	b	4b2d0 <GetDataSlab+0x2390c>
   4b2cc:	ldr	r1, [sp, #52]	; 0x34
   4b2d0:	mul	r0, r4, ip
   4b2d4:	add	r7, r7, #1
   4b2d8:	str	r1, [sp, #52]	; 0x34
   4b2dc:	add	r2, r2, r0, lsl #2
   4b2e0:	mov	r0, #0
   4b2e4:	cmp	r7, r1
   4b2e8:	blt	4b260 <GetDataSlab+0x2389c>
   4b2ec:	b	47ffc <GetDataSlab+0x20638>
   4b2f0:	cmp	r6, #1
   4b2f4:	blt	2a430 <GetDataSlab+0x2a6c>
   4b2f8:	ldr	r0, [sp, #16]
   4b2fc:	ldr	r2, [sp, #24]
   4b300:	mov	r7, #0
   4b304:	mla	r0, r0, r4, r2
   4b308:	add	r2, r1, r0, lsl #3
   4b30c:	ldr	r0, [sp, #56]	; 0x38
   4b310:	cmp	r0, #1
   4b314:	blt	4b378 <GetDataSlab+0x239b4>
   4b318:	ldr	r4, [sp, #60]	; 0x3c
   4b31c:	ldr	ip, [fp, #8]
   4b320:	mov	r0, #0
   4b324:	mov	r6, #0
   4b328:	ldr	r5, [r8]
   4b32c:	add	r0, r0, #4
   4b330:	mul	r5, r5, r6
   4b334:	add	r5, r2, r5, lsl #3
   4b338:	vldr	d16, [r5]
   4b33c:	vcvt.s32.f64	s0, d16
   4b340:	vmov	r5, s0
   4b344:	str	r5, [r4, r6, lsl #2]
   4b348:	add	r6, r6, #1
   4b34c:	ldr	r5, [r3]
   4b350:	cmp	r6, r5
   4b354:	blt	4b328 <GetDataSlab+0x23964>
   4b358:	add	r4, r4, r0
   4b35c:	ldr	r0, [sp, #36]	; 0x24
   4b360:	str	r5, [sp, #56]	; 0x38
   4b364:	str	r4, [sp, #60]	; 0x3c
   4b368:	ldr	r4, [ip]
   4b36c:	ldr	ip, [lr]
   4b370:	ldr	r1, [r0]
   4b374:	b	4b37c <GetDataSlab+0x239b8>
   4b378:	ldr	r1, [sp, #52]	; 0x34
   4b37c:	mul	r0, r4, ip
   4b380:	add	r7, r7, #1
   4b384:	str	r1, [sp, #52]	; 0x34
   4b388:	add	r2, r2, r0, lsl #3
   4b38c:	mov	r0, #0
   4b390:	cmp	r7, r1
   4b394:	blt	4b30c <GetDataSlab+0x23948>
   4b398:	b	47ffc <GetDataSlab+0x20638>
   4b39c:	cmp	r6, #1
   4b3a0:	blt	2a430 <GetDataSlab+0x2a6c>
   4b3a4:	ldr	r0, [sp, #16]
   4b3a8:	ldr	r2, [sp, #24]
   4b3ac:	ldr	ip, [fp, #8]
   4b3b0:	mla	r0, r0, r4, r2
   4b3b4:	ldr	r4, [sp, #60]	; 0x3c
   4b3b8:	mov	r2, #0
   4b3bc:	add	r0, r1, r0, lsl #3
   4b3c0:	cmp	r5, #1
   4b3c4:	blt	4b40c <GetDataSlab+0x23a48>
   4b3c8:	mov	r7, #0
   4b3cc:	mov	r6, #0
   4b3d0:	ldr	r5, [r8]
   4b3d4:	add	r7, r7, #4
   4b3d8:	mul	r5, r5, r6
   4b3dc:	ldr	r5, [r0, r5, lsl #3]
   4b3e0:	str	r5, [r4, r6, lsl #2]
   4b3e4:	add	r6, r6, #1
   4b3e8:	ldr	r5, [r3]
   4b3ec:	cmp	r6, r5
   4b3f0:	blt	4b3d0 <GetDataSlab+0x23a0c>
   4b3f4:	ldr	r1, [sp, #36]	; 0x24
   4b3f8:	add	r4, r4, r7
   4b3fc:	ldr	r7, [lr]
   4b400:	ldr	r6, [r1]
   4b404:	ldr	r1, [ip]
   4b408:	b	4b414 <GetDataSlab+0x23a50>
   4b40c:	ldr	r1, [sp, #44]	; 0x2c
   4b410:	ldr	r7, [sp, #28]
   4b414:	str	r7, [sp, #28]
   4b418:	mul	r7, r1, r7
   4b41c:	add	r2, r2, #1
   4b420:	str	r1, [sp, #44]	; 0x2c
   4b424:	add	r0, r0, r7, lsl #3
   4b428:	cmp	r2, r6
   4b42c:	blt	4b3c0 <GetDataSlab+0x239fc>
   4b430:	str	r4, [sp, #60]	; 0x3c
   4b434:	ldr	r4, [sp, #44]	; 0x2c
   4b438:	ldr	ip, [sp, #28]
   4b43c:	mov	r0, #0
   4b440:	cmp	r9, #13
   4b444:	bne	47ffc <GetDataSlab+0x20638>
   4b448:	b	4cde8 <GetDataSlab+0x25424>
   4b44c:	cmp	r6, #1
   4b450:	blt	2a430 <GetDataSlab+0x2a6c>
   4b454:	ldr	r0, [sp, #16]
   4b458:	ldr	r2, [sp, #24]
   4b45c:	mov	r7, #0
   4b460:	mla	r0, r0, r4, r2
   4b464:	add	r2, r1, r0
   4b468:	ldr	r0, [sp, #56]	; 0x38
   4b46c:	cmp	r0, #1
   4b470:	blt	4b4c8 <GetDataSlab+0x23b04>
   4b474:	ldr	r4, [sp, #60]	; 0x3c
   4b478:	ldr	ip, [fp, #8]
   4b47c:	mov	r0, #0
   4b480:	mov	r6, #0
   4b484:	ldr	r5, [r8]
   4b488:	add	r0, r0, #4
   4b48c:	mul	r5, r5, r6
   4b490:	ldrb	r5, [r2, r5]
   4b494:	str	r5, [r4, r6, lsl #2]
   4b498:	add	r6, r6, #1
   4b49c:	ldr	r5, [r3]
   4b4a0:	cmp	r6, r5
   4b4a4:	blt	4b484 <GetDataSlab+0x23ac0>
   4b4a8:	add	r4, r4, r0
   4b4ac:	ldr	r0, [sp, #36]	; 0x24
   4b4b0:	str	r5, [sp, #56]	; 0x38
   4b4b4:	str	r4, [sp, #60]	; 0x3c
   4b4b8:	ldr	r4, [ip]
   4b4bc:	ldr	ip, [lr]
   4b4c0:	ldr	r1, [r0]
   4b4c4:	b	4b4cc <GetDataSlab+0x23b08>
   4b4c8:	ldr	r1, [sp, #52]	; 0x34
   4b4cc:	add	r7, r7, #1
   4b4d0:	mla	r2, r4, ip, r2
   4b4d4:	mov	r0, #0
   4b4d8:	str	r1, [sp, #52]	; 0x34
   4b4dc:	cmp	r7, r1
   4b4e0:	blt	4b468 <GetDataSlab+0x23aa4>
   4b4e4:	b	47ffc <GetDataSlab+0x20638>
   4b4e8:	cmp	r6, #1
   4b4ec:	blt	2a430 <GetDataSlab+0x2a6c>
   4b4f0:	ldr	r0, [sp, #16]
   4b4f4:	ldr	r2, [sp, #24]
   4b4f8:	mov	r7, #0
   4b4fc:	mla	r0, r0, r4, r2
   4b500:	add	r2, r1, r0, lsl #1
   4b504:	ldr	r0, [sp, #56]	; 0x38
   4b508:	cmp	r0, #1
   4b50c:	blt	4b568 <GetDataSlab+0x23ba4>
   4b510:	ldr	r4, [sp, #60]	; 0x3c
   4b514:	ldr	ip, [fp, #8]
   4b518:	mov	r0, #0
   4b51c:	mov	r6, #0
   4b520:	ldr	r5, [r8]
   4b524:	add	r0, r0, #4
   4b528:	mul	r5, r5, r6
   4b52c:	add	r5, r2, r5, lsl #1
   4b530:	ldrsh	r5, [r5]
   4b534:	str	r5, [r4, r6, lsl #2]
   4b538:	add	r6, r6, #1
   4b53c:	ldr	r5, [r3]
   4b540:	cmp	r6, r5
   4b544:	blt	4b520 <GetDataSlab+0x23b5c>
   4b548:	add	r4, r4, r0
   4b54c:	ldr	r0, [sp, #36]	; 0x24
   4b550:	str	r5, [sp, #56]	; 0x38
   4b554:	str	r4, [sp, #60]	; 0x3c
   4b558:	ldr	r4, [ip]
   4b55c:	ldr	ip, [lr]
   4b560:	ldr	r1, [r0]
   4b564:	b	4b56c <GetDataSlab+0x23ba8>
   4b568:	ldr	r1, [sp, #52]	; 0x34
   4b56c:	mul	r0, r4, ip
   4b570:	add	r7, r7, #1
   4b574:	str	r1, [sp, #52]	; 0x34
   4b578:	add	r2, r2, r0, lsl #1
   4b57c:	mov	r0, #0
   4b580:	cmp	r7, r1
   4b584:	blt	4b504 <GetDataSlab+0x23b40>
   4b588:	b	47ffc <GetDataSlab+0x20638>
   4b58c:	cmp	r6, #1
   4b590:	blt	2a430 <GetDataSlab+0x2a6c>
   4b594:	ldr	r0, [sp, #16]
   4b598:	ldr	r2, [sp, #24]
   4b59c:	mov	r7, #0
   4b5a0:	mla	r0, r0, r4, r2
   4b5a4:	add	r2, r1, r0, lsl #1
   4b5a8:	ldr	r0, [sp, #56]	; 0x38
   4b5ac:	cmp	r0, #1
   4b5b0:	blt	4b60c <GetDataSlab+0x23c48>
   4b5b4:	ldr	r4, [sp, #60]	; 0x3c
   4b5b8:	ldr	ip, [fp, #8]
   4b5bc:	mov	r0, #0
   4b5c0:	mov	r6, #0
   4b5c4:	ldr	r5, [r8]
   4b5c8:	add	r0, r0, #4
   4b5cc:	mul	r5, r5, r6
   4b5d0:	add	r5, r2, r5, lsl #1
   4b5d4:	ldrh	r5, [r5]
   4b5d8:	str	r5, [r4, r6, lsl #2]
   4b5dc:	add	r6, r6, #1
   4b5e0:	ldr	r5, [r3]
   4b5e4:	cmp	r6, r5
   4b5e8:	blt	4b5c4 <GetDataSlab+0x23c00>
   4b5ec:	add	r4, r4, r0
   4b5f0:	ldr	r0, [sp, #36]	; 0x24
   4b5f4:	str	r5, [sp, #56]	; 0x38
   4b5f8:	str	r4, [sp, #60]	; 0x3c
   4b5fc:	ldr	r4, [ip]
   4b600:	ldr	ip, [lr]
   4b604:	ldr	r1, [r0]
   4b608:	b	4b610 <GetDataSlab+0x23c4c>
   4b60c:	ldr	r1, [sp, #52]	; 0x34
   4b610:	mul	r0, r4, ip
   4b614:	add	r7, r7, #1
   4b618:	str	r1, [sp, #52]	; 0x34
   4b61c:	add	r2, r2, r0, lsl #1
   4b620:	mov	r0, #0
   4b624:	cmp	r7, r1
   4b628:	blt	4b5a8 <GetDataSlab+0x23be4>
   4b62c:	b	47ffc <GetDataSlab+0x20638>
   4b630:	cmp	r6, #1
   4b634:	blt	2a430 <GetDataSlab+0x2a6c>
   4b638:	ldr	r0, [sp, #16]
   4b63c:	ldr	r2, [sp, #24]
   4b640:	mov	r7, #0
   4b644:	mla	r0, r0, r4, r2
   4b648:	add	r2, r1, r0, lsl #2
   4b64c:	ldr	r0, [sp, #56]	; 0x38
   4b650:	cmp	r0, #1
   4b654:	blt	4b6ac <GetDataSlab+0x23ce8>
   4b658:	ldr	r4, [sp, #60]	; 0x3c
   4b65c:	ldr	ip, [fp, #8]
   4b660:	mov	r0, #0
   4b664:	mov	r6, #0
   4b668:	ldr	r5, [r8]
   4b66c:	add	r0, r0, #4
   4b670:	mul	r5, r5, r6
   4b674:	ldr	r5, [r2, r5, lsl #2]
   4b678:	str	r5, [r4, r6, lsl #2]
   4b67c:	add	r6, r6, #1
   4b680:	ldr	r5, [r3]
   4b684:	cmp	r6, r5
   4b688:	blt	4b668 <GetDataSlab+0x23ca4>
   4b68c:	add	r4, r4, r0
   4b690:	ldr	r0, [sp, #36]	; 0x24
   4b694:	str	r5, [sp, #56]	; 0x38
   4b698:	str	r4, [sp, #60]	; 0x3c
   4b69c:	ldr	r4, [ip]
   4b6a0:	ldr	ip, [lr]
   4b6a4:	ldr	r1, [r0]
   4b6a8:	b	4b6b0 <GetDataSlab+0x23cec>
   4b6ac:	ldr	r1, [sp, #52]	; 0x34
   4b6b0:	mul	r0, r4, ip
   4b6b4:	add	r7, r7, #1
   4b6b8:	str	r1, [sp, #52]	; 0x34
   4b6bc:	add	r2, r2, r0, lsl #2
   4b6c0:	mov	r0, #0
   4b6c4:	cmp	r7, r1
   4b6c8:	blt	4b64c <GetDataSlab+0x23c88>
   4b6cc:	b	47ffc <GetDataSlab+0x20638>
   4b6d0:	cmp	r6, #1
   4b6d4:	blt	2a430 <GetDataSlab+0x2a6c>
   4b6d8:	ldr	r0, [sp, #16]
   4b6dc:	ldr	r2, [sp, #24]
   4b6e0:	mov	r7, #0
   4b6e4:	mla	r0, r0, r4, r2
   4b6e8:	add	r2, r1, r0, lsl #2
   4b6ec:	ldr	r0, [sp, #56]	; 0x38
   4b6f0:	cmp	r0, #1
   4b6f4:	blt	4b74c <GetDataSlab+0x23d88>
   4b6f8:	ldr	r4, [sp, #60]	; 0x3c
   4b6fc:	ldr	ip, [fp, #8]
   4b700:	mov	r0, #0
   4b704:	mov	r6, #0
   4b708:	ldr	r5, [r8]
   4b70c:	add	r0, r0, #4
   4b710:	mul	r5, r5, r6
   4b714:	ldr	r5, [r2, r5, lsl #2]
   4b718:	str	r5, [r4, r6, lsl #2]
   4b71c:	add	r6, r6, #1
   4b720:	ldr	r5, [r3]
   4b724:	cmp	r6, r5
   4b728:	blt	4b708 <GetDataSlab+0x23d44>
   4b72c:	add	r4, r4, r0
   4b730:	ldr	r0, [sp, #36]	; 0x24
   4b734:	str	r5, [sp, #56]	; 0x38
   4b738:	str	r4, [sp, #60]	; 0x3c
   4b73c:	ldr	r4, [ip]
   4b740:	ldr	ip, [lr]
   4b744:	ldr	r1, [r0]
   4b748:	b	4b750 <GetDataSlab+0x23d8c>
   4b74c:	ldr	r1, [sp, #52]	; 0x34
   4b750:	mul	r0, r4, ip
   4b754:	add	r7, r7, #1
   4b758:	str	r1, [sp, #52]	; 0x34
   4b75c:	add	r2, r2, r0, lsl #2
   4b760:	mov	r0, #0
   4b764:	cmp	r7, r1
   4b768:	blt	4b6ec <GetDataSlab+0x23d28>
   4b76c:	b	47ffc <GetDataSlab+0x20638>
   4b770:	cmp	r6, #1
   4b774:	blt	2a430 <GetDataSlab+0x2a6c>
   4b778:	ldr	r0, [sp, #16]
   4b77c:	ldr	r2, [sp, #24]
   4b780:	mov	r7, #0
   4b784:	mla	r0, r0, r4, r2
   4b788:	add	r2, r1, r0, lsl #2
   4b78c:	ldr	r0, [sp, #56]	; 0x38
   4b790:	cmp	r0, #1
   4b794:	blt	4b7f8 <GetDataSlab+0x23e34>
   4b798:	ldr	r4, [sp, #60]	; 0x3c
   4b79c:	ldr	ip, [fp, #8]
   4b7a0:	mov	r0, #0
   4b7a4:	mov	r6, #0
   4b7a8:	ldr	r5, [r8]
   4b7ac:	add	r0, r0, #4
   4b7b0:	mul	r5, r5, r6
   4b7b4:	add	r5, r2, r5, lsl #2
   4b7b8:	vldr	s0, [r5]
   4b7bc:	vcvt.u32.f32	s0, s0
   4b7c0:	vmov	r5, s0
   4b7c4:	str	r5, [r4, r6, lsl #2]
   4b7c8:	add	r6, r6, #1
   4b7cc:	ldr	r5, [r3]
   4b7d0:	cmp	r6, r5
   4b7d4:	blt	4b7a8 <GetDataSlab+0x23de4>
   4b7d8:	add	r4, r4, r0
   4b7dc:	ldr	r0, [sp, #36]	; 0x24
   4b7e0:	str	r5, [sp, #56]	; 0x38
   4b7e4:	str	r4, [sp, #60]	; 0x3c
   4b7e8:	ldr	r4, [ip]
   4b7ec:	ldr	ip, [lr]
   4b7f0:	ldr	r1, [r0]
   4b7f4:	b	4b7fc <GetDataSlab+0x23e38>
   4b7f8:	ldr	r1, [sp, #52]	; 0x34
   4b7fc:	mul	r0, r4, ip
   4b800:	add	r7, r7, #1
   4b804:	str	r1, [sp, #52]	; 0x34
   4b808:	add	r2, r2, r0, lsl #2
   4b80c:	mov	r0, #0
   4b810:	cmp	r7, r1
   4b814:	blt	4b78c <GetDataSlab+0x23dc8>
   4b818:	b	47ffc <GetDataSlab+0x20638>
   4b81c:	cmp	r6, #1
   4b820:	blt	2a430 <GetDataSlab+0x2a6c>
   4b824:	ldr	r0, [sp, #16]
   4b828:	ldr	r2, [sp, #24]
   4b82c:	mov	r7, #0
   4b830:	mla	r0, r0, r4, r2
   4b834:	add	r2, r1, r0, lsl #3
   4b838:	ldr	r0, [sp, #56]	; 0x38
   4b83c:	cmp	r0, #1
   4b840:	blt	4b8a4 <GetDataSlab+0x23ee0>
   4b844:	ldr	r4, [sp, #60]	; 0x3c
   4b848:	ldr	ip, [fp, #8]
   4b84c:	mov	r0, #0
   4b850:	mov	r6, #0
   4b854:	ldr	r5, [r8]
   4b858:	add	r0, r0, #4
   4b85c:	mul	r5, r5, r6
   4b860:	add	r5, r2, r5, lsl #3
   4b864:	vldr	d16, [r5]
   4b868:	vcvt.u32.f64	s0, d16
   4b86c:	vmov	r5, s0
   4b870:	str	r5, [r4, r6, lsl #2]
   4b874:	add	r6, r6, #1
   4b878:	ldr	r5, [r3]
   4b87c:	cmp	r6, r5
   4b880:	blt	4b854 <GetDataSlab+0x23e90>
   4b884:	add	r4, r4, r0
   4b888:	ldr	r0, [sp, #36]	; 0x24
   4b88c:	str	r5, [sp, #56]	; 0x38
   4b890:	str	r4, [sp, #60]	; 0x3c
   4b894:	ldr	r4, [ip]
   4b898:	ldr	ip, [lr]
   4b89c:	ldr	r1, [r0]
   4b8a0:	b	4b8a8 <GetDataSlab+0x23ee4>
   4b8a4:	ldr	r1, [sp, #52]	; 0x34
   4b8a8:	mul	r0, r4, ip
   4b8ac:	add	r7, r7, #1
   4b8b0:	str	r1, [sp, #52]	; 0x34
   4b8b4:	add	r2, r2, r0, lsl #3
   4b8b8:	mov	r0, #0
   4b8bc:	cmp	r7, r1
   4b8c0:	blt	4b838 <GetDataSlab+0x23e74>
   4b8c4:	b	47ffc <GetDataSlab+0x20638>
   4b8c8:	cmp	r6, #1
   4b8cc:	blt	2a430 <GetDataSlab+0x2a6c>
   4b8d0:	ldr	r0, [sp, #16]
   4b8d4:	ldr	r2, [sp, #24]
   4b8d8:	ldr	ip, [fp, #8]
   4b8dc:	mla	r0, r0, r4, r2
   4b8e0:	ldr	r4, [sp, #60]	; 0x3c
   4b8e4:	mov	r2, #0
   4b8e8:	add	r0, r1, r0, lsl #3
   4b8ec:	cmp	r5, #1
   4b8f0:	blt	4b938 <GetDataSlab+0x23f74>
   4b8f4:	mov	r7, #0
   4b8f8:	mov	r6, #0
   4b8fc:	ldr	r5, [r8]
   4b900:	add	r7, r7, #4
   4b904:	mul	r5, r5, r6
   4b908:	ldr	r5, [r0, r5, lsl #3]
   4b90c:	str	r5, [r4, r6, lsl #2]
   4b910:	add	r6, r6, #1
   4b914:	ldr	r5, [r3]
   4b918:	cmp	r6, r5
   4b91c:	blt	4b8fc <GetDataSlab+0x23f38>
   4b920:	ldr	r1, [sp, #36]	; 0x24
   4b924:	add	r4, r4, r7
   4b928:	ldr	r7, [lr]
   4b92c:	ldr	r6, [r1]
   4b930:	ldr	r1, [ip]
   4b934:	b	4b940 <GetDataSlab+0x23f7c>
   4b938:	ldr	r1, [sp, #44]	; 0x2c
   4b93c:	ldr	r7, [sp, #28]
   4b940:	str	r7, [sp, #28]
   4b944:	mul	r7, r1, r7
   4b948:	add	r2, r2, #1
   4b94c:	str	r1, [sp, #44]	; 0x2c
   4b950:	add	r0, r0, r7, lsl #3
   4b954:	cmp	r2, r6
   4b958:	blt	4b8ec <GetDataSlab+0x23f28>
   4b95c:	str	r4, [sp, #60]	; 0x3c
   4b960:	ldr	r4, [sp, #44]	; 0x2c
   4b964:	ldr	ip, [sp, #28]
   4b968:	mov	r0, #0
   4b96c:	cmp	r9, #13
   4b970:	bne	47ffc <GetDataSlab+0x20638>
   4b974:	b	4cea4 <GetDataSlab+0x254e0>
   4b978:	ldr	r0, [sp, #52]	; 0x34
   4b97c:	cmp	r0, #1
   4b980:	blt	2a430 <GetDataSlab+0x2a6c>
   4b984:	ldr	r2, [sp, #16]
   4b988:	ldr	r1, [sp, #56]	; 0x38
   4b98c:	mul	r8, ip, r4
   4b990:	lsl	r9, r5, #1
   4b994:	add	ip, sp, #116	; 0x74
   4b998:	mla	r0, r2, r4, r6
   4b99c:	cmp	r1, #1
   4b9a0:	add	lr, r3, r0
   4b9a4:	str	r0, [sp, #12]
   4b9a8:	add	r0, r1, r6
   4b9ac:	movwne	r7, #1
   4b9b0:	mov	r3, #0
   4b9b4:	mla	r0, r2, r4, r0
   4b9b8:	str	r0, [sp, #40]	; 0x28
   4b9bc:	sub	r0, r5, #1
   4b9c0:	clz	r0, r0
   4b9c4:	lsr	r0, r0, #5
   4b9c8:	and	r0, r7, r0
   4b9cc:	str	r0, [sp, #44]	; 0x2c
   4b9d0:	bic	r0, r1, #1
   4b9d4:	mov	r1, #0
   4b9d8:	str	r0, [sp, #36]	; 0x24
   4b9dc:	ldr	r0, [sp, #56]	; 0x38
   4b9e0:	cmp	r0, #1
   4b9e4:	blt	4bac4 <GetDataSlab+0x24100>
   4b9e8:	ldr	r0, [sp, #44]	; 0x2c
   4b9ec:	mov	sl, #0
   4b9f0:	cmp	r0, #0
   4b9f4:	beq	4ba88 <GetDataSlab+0x240c4>
   4b9f8:	ldr	r0, [sp, #40]	; 0x28
   4b9fc:	ldr	r2, [sp, #48]	; 0x30
   4ba00:	ldr	r4, [sp, #32]
   4ba04:	mla	r0, r8, r3, r0
   4ba08:	add	r0, r2, r0
   4ba0c:	ldr	r2, [sp, #60]	; 0x3c
   4ba10:	cmp	r0, r2
   4ba14:	bls	4ba40 <GetDataSlab+0x2407c>
   4ba18:	ldr	r0, [sp, #12]
   4ba1c:	ldr	r2, [sp, #48]	; 0x30
   4ba20:	ldr	r5, [sp, #60]	; 0x3c
   4ba24:	mla	r0, r8, r3, r0
   4ba28:	add	r0, r2, r0
   4ba2c:	ldr	r2, [sp, #56]	; 0x38
   4ba30:	add	r2, r5, r2, lsl #3
   4ba34:	cmp	r0, r2
   4ba38:	mov	r0, r5
   4ba3c:	bcc	4ba90 <GetDataSlab+0x240cc>
   4ba40:	ldr	r7, [sp, #60]	; 0x3c
   4ba44:	ldr	r5, [sp, #36]	; 0x24
   4ba48:	mov	r2, lr
   4ba4c:	add	r0, r7, r5, lsl #3
   4ba50:	ldrh	r6, [r2], r9
   4ba54:	subs	r5, r5, #2
   4ba58:	strh	r6, [sp, #116]	; 0x74
   4ba5c:	vld1.16	{d16[0]}, [ip :16]
   4ba60:	vmovl.u8	q8, d16
   4ba64:	vmovl.u16	q8, d16
   4ba68:	vmovl.u32	q8, d16
   4ba6c:	vst1.64	{d16-d17}, [r7]!
   4ba70:	bne	4ba50 <GetDataSlab+0x2408c>
   4ba74:	ldr	r2, [sp, #56]	; 0x38
   4ba78:	ldr	sl, [sp, #36]	; 0x24
   4ba7c:	cmp	r2, sl
   4ba80:	bne	4ba90 <GetDataSlab+0x240cc>
   4ba84:	b	4bab4 <GetDataSlab+0x240f0>
   4ba88:	ldr	r0, [sp, #60]	; 0x3c
   4ba8c:	ldr	r4, [sp, #32]
   4ba90:	ldr	r5, [sp, #56]	; 0x38
   4ba94:	mla	r2, r4, sl, lr
   4ba98:	sub	r5, r5, sl
   4ba9c:	ldrb	r6, [r2], r4
   4baa0:	subs	r5, r5, #1
   4baa4:	str	r6, [r0]
   4baa8:	str	r1, [r0, #4]
   4baac:	add	r0, r0, #8
   4bab0:	bne	4ba9c <GetDataSlab+0x240d8>
   4bab4:	ldr	r0, [sp, #60]	; 0x3c
   4bab8:	ldr	r2, [sp, #56]	; 0x38
   4babc:	add	r0, r0, r2, lsl #3
   4bac0:	str	r0, [sp, #60]	; 0x3c
   4bac4:	ldr	r2, [sp, #52]	; 0x34
   4bac8:	add	r3, r3, #1
   4bacc:	add	lr, lr, r8
   4bad0:	mov	r0, #0
   4bad4:	cmp	r3, r2
   4bad8:	bne	4b9dc <GetDataSlab+0x24018>
   4badc:	b	47ffc <GetDataSlab+0x20638>
   4bae0:	ldr	r0, [sp, #52]	; 0x34
   4bae4:	cmp	r0, #1
   4bae8:	blt	2a430 <GetDataSlab+0x2a6c>
   4baec:	ldr	r0, [sp, #16]
   4baf0:	ldr	r1, [sp, #56]	; 0x38
   4baf4:	mov	r2, ip
   4baf8:	add	r9, sp, #104	; 0x68
   4bafc:	mla	r0, r0, r4, r6
   4bb00:	cmp	r1, #1
   4bb04:	lsl	r6, r5, #2
   4bb08:	bic	r8, r1, #1
   4bb0c:	add	sl, r3, r0, lsl #1
   4bb10:	sub	r0, r5, #1
   4bb14:	movwne	r7, #1
   4bb18:	clz	r0, r0
   4bb1c:	lsr	r0, r0, #5
   4bb20:	and	ip, r7, r0
   4bb24:	mul	r0, r2, r4
   4bb28:	lsl	r7, r5, #1
   4bb2c:	mov	r2, #0
   4bb30:	lsl	lr, r0, #1
   4bb34:	ldr	r0, [sp, #56]	; 0x38
   4bb38:	cmp	r0, #1
   4bb3c:	blt	4bbc4 <GetDataSlab+0x24200>
   4bb40:	ldr	r0, [sp, #60]	; 0x3c
   4bb44:	mov	r3, #0
   4bb48:	cmp	ip, #0
   4bb4c:	beq	4bb90 <GetDataSlab+0x241cc>
   4bb50:	ldr	r3, [sp, #60]	; 0x3c
   4bb54:	mov	r5, r8
   4bb58:	mov	r1, sl
   4bb5c:	add	r0, r3, r8, lsl #3
   4bb60:	ldr	r4, [r1], r6
   4bb64:	subs	r5, r5, #2
   4bb68:	str	r4, [sp, #104]	; 0x68
   4bb6c:	vld1.32	{d16[0]}, [r9 :32]
   4bb70:	vmovl.s16	q8, d16
   4bb74:	vmovl.s32	q8, d16
   4bb78:	vst1.64	{d16-d17}, [r3]!
   4bb7c:	bne	4bb60 <GetDataSlab+0x2419c>
   4bb80:	ldr	r1, [sp, #56]	; 0x38
   4bb84:	mov	r3, r8
   4bb88:	cmp	r1, r8
   4bb8c:	beq	4bbb4 <GetDataSlab+0x241f0>
   4bb90:	ldr	r4, [sp, #56]	; 0x38
   4bb94:	mla	r1, r7, r3, sl
   4bb98:	sub	r3, r4, r3
   4bb9c:	ldrsh	r4, [r1], r7
   4bba0:	subs	r3, r3, #1
   4bba4:	asr	r5, r4, #31
   4bba8:	strd	r4, [r0]
   4bbac:	add	r0, r0, #8
   4bbb0:	bne	4bb9c <GetDataSlab+0x241d8>
   4bbb4:	ldr	r0, [sp, #60]	; 0x3c
   4bbb8:	ldr	r1, [sp, #56]	; 0x38
   4bbbc:	add	r0, r0, r1, lsl #3
   4bbc0:	str	r0, [sp, #60]	; 0x3c
   4bbc4:	ldr	r1, [sp, #52]	; 0x34
   4bbc8:	add	r2, r2, #1
   4bbcc:	add	sl, sl, lr
   4bbd0:	mov	r0, #0
   4bbd4:	cmp	r2, r1
   4bbd8:	bne	4bb34 <GetDataSlab+0x24170>
   4bbdc:	b	47ffc <GetDataSlab+0x20638>
   4bbe0:	ldr	r0, [sp, #52]	; 0x34
   4bbe4:	cmp	r0, #1
   4bbe8:	blt	2a430 <GetDataSlab+0x2a6c>
   4bbec:	ldr	r0, [sp, #16]
   4bbf0:	ldr	r1, [sp, #56]	; 0x38
   4bbf4:	mov	r9, #0
   4bbf8:	add	sl, sp, #108	; 0x6c
   4bbfc:	mla	r0, r0, r4, r6
   4bc00:	cmp	r1, #1
   4bc04:	lsl	r6, r5, #2
   4bc08:	add	r8, r3, r0, lsl #1
   4bc0c:	sub	r0, r5, #1
   4bc10:	movwne	r7, #1
   4bc14:	mov	r3, #0
   4bc18:	clz	r0, r0
   4bc1c:	lsr	r0, r0, #5
   4bc20:	and	r0, r7, r0
   4bc24:	lsl	r7, r5, #1
   4bc28:	str	r0, [sp, #40]	; 0x28
   4bc2c:	mul	r0, ip, r4
   4bc30:	lsl	r0, r0, #1
   4bc34:	str	r0, [sp, #48]	; 0x30
   4bc38:	bic	r0, r1, #1
   4bc3c:	str	r0, [sp, #44]	; 0x2c
   4bc40:	ldr	r0, [sp, #56]	; 0x38
   4bc44:	cmp	r0, #1
   4bc48:	blt	4bcd4 <GetDataSlab+0x24310>
   4bc4c:	ldr	r0, [sp, #40]	; 0x28
   4bc50:	ldr	r4, [sp, #60]	; 0x3c
   4bc54:	mov	r2, #0
   4bc58:	cmp	r0, #0
   4bc5c:	mov	lr, r4
   4bc60:	beq	4bca8 <GetDataSlab+0x242e4>
   4bc64:	ldr	r5, [sp, #44]	; 0x2c
   4bc68:	mov	r1, r8
   4bc6c:	mov	r2, r4
   4bc70:	add	lr, r4, r5, lsl #3
   4bc74:	ldr	ip, [r1], r6
   4bc78:	subs	r5, r5, #2
   4bc7c:	str	ip, [sp, #108]	; 0x6c
   4bc80:	vld1.32	{d16[0]}, [sl :32]
   4bc84:	vmovl.u16	q8, d16
   4bc88:	vmovl.u32	q8, d16
   4bc8c:	vst1.64	{d16-d17}, [r2]!
   4bc90:	bne	4bc74 <GetDataSlab+0x242b0>
   4bc94:	ldr	r0, [sp, #56]	; 0x38
   4bc98:	ldr	r2, [sp, #44]	; 0x2c
   4bc9c:	ldr	r4, [sp, #60]	; 0x3c
   4bca0:	cmp	r0, r2
   4bca4:	beq	4bcc8 <GetDataSlab+0x24304>
   4bca8:	ldr	r0, [sp, #56]	; 0x38
   4bcac:	mla	r1, r7, r2, r8
   4bcb0:	sub	r2, r0, r2
   4bcb4:	ldrh	r0, [r1], r7
   4bcb8:	subs	r2, r2, #1
   4bcbc:	stm	lr, {r0, r9}
   4bcc0:	add	lr, lr, #8
   4bcc4:	bne	4bcb4 <GetDataSlab+0x242f0>
   4bcc8:	ldr	r0, [sp, #56]	; 0x38
   4bccc:	add	r4, r4, r0, lsl #3
   4bcd0:	str	r4, [sp, #60]	; 0x3c
   4bcd4:	ldr	r0, [sp, #48]	; 0x30
   4bcd8:	ldr	r1, [sp, #52]	; 0x34
   4bcdc:	add	r3, r3, #1
   4bce0:	add	r8, r8, r0
   4bce4:	mov	r0, #0
   4bce8:	cmp	r3, r1
   4bcec:	bne	4bc40 <GetDataSlab+0x2427c>
   4bcf0:	b	47ffc <GetDataSlab+0x20638>
   4bcf4:	ldr	r0, [sp, #52]	; 0x34
   4bcf8:	cmp	r0, #1
   4bcfc:	blt	2a430 <GetDataSlab+0x2a6c>
   4bd00:	ldr	r0, [sp, #16]
   4bd04:	ldr	r1, [sp, #56]	; 0x38
   4bd08:	mov	lr, #0
   4bd0c:	add	r9, sp, #88	; 0x58
   4bd10:	mla	r0, r0, r4, r6
   4bd14:	cmp	r1, #1
   4bd18:	lsl	r6, r5, #3
   4bd1c:	bic	r8, r1, #1
   4bd20:	add	sl, r3, r0, lsl #2
   4bd24:	sub	r0, r5, #1
   4bd28:	movwne	r7, #1
   4bd2c:	clz	r0, r0
   4bd30:	lsr	r0, r0, #5
   4bd34:	and	r0, r7, r0
   4bd38:	lsl	r7, r5, #2
   4bd3c:	str	r0, [sp, #40]	; 0x28
   4bd40:	mul	r0, ip, r4
   4bd44:	lsl	r0, r0, #2
   4bd48:	str	r0, [sp, #48]	; 0x30
   4bd4c:	ldr	r0, [sp, #56]	; 0x38
   4bd50:	cmp	r0, #1
   4bd54:	blt	4bde8 <GetDataSlab+0x24424>
   4bd58:	ldr	r0, [sp, #40]	; 0x28
   4bd5c:	ldr	r2, [sp, #60]	; 0x3c
   4bd60:	mov	r3, #0
   4bd64:	cmp	r0, #0
   4bd68:	mov	r0, r2
   4bd6c:	beq	4bdb8 <GetDataSlab+0x243f4>
   4bd70:	add	r0, r2, r8, lsl #3
   4bd74:	mov	r5, r8
   4bd78:	mov	r1, sl
   4bd7c:	mov	r3, r2
   4bd80:	ldm	r1, {r4, ip}
   4bd84:	add	r1, r1, r6
   4bd88:	subs	r5, r5, #2
   4bd8c:	str	ip, [sp, #92]	; 0x5c
   4bd90:	str	r4, [sp, #88]	; 0x58
   4bd94:	vld1.32	{d16}, [r9 :64]
   4bd98:	vmovl.s32	q8, d16
   4bd9c:	vst1.64	{d16-d17}, [r3]!
   4bda0:	bne	4bd80 <GetDataSlab+0x243bc>
   4bda4:	ldr	r1, [sp, #56]	; 0x38
   4bda8:	ldr	r2, [sp, #60]	; 0x3c
   4bdac:	mov	r3, r8
   4bdb0:	cmp	r1, r8
   4bdb4:	beq	4bddc <GetDataSlab+0x24418>
   4bdb8:	ldr	r5, [sp, #56]	; 0x38
   4bdbc:	mla	r1, r7, r3, sl
   4bdc0:	sub	r3, r5, r3
   4bdc4:	ldr	r4, [r1], r7
   4bdc8:	subs	r3, r3, #1
   4bdcc:	asr	r5, r4, #31
   4bdd0:	strd	r4, [r0]
   4bdd4:	add	r0, r0, #8
   4bdd8:	bne	4bdc4 <GetDataSlab+0x24400>
   4bddc:	ldr	r0, [sp, #56]	; 0x38
   4bde0:	add	r2, r2, r0, lsl #3
   4bde4:	str	r2, [sp, #60]	; 0x3c
   4bde8:	ldr	r0, [sp, #48]	; 0x30
   4bdec:	ldr	r1, [sp, #52]	; 0x34
   4bdf0:	add	lr, lr, #1
   4bdf4:	add	sl, sl, r0
   4bdf8:	mov	r0, #0
   4bdfc:	cmp	lr, r1
   4be00:	bne	4bd4c <GetDataSlab+0x24388>
   4be04:	b	47ffc <GetDataSlab+0x20638>
   4be08:	ldr	r0, [sp, #52]	; 0x34
   4be0c:	cmp	r0, #1
   4be10:	blt	2a430 <GetDataSlab+0x2a6c>
   4be14:	ldr	r0, [sp, #16]
   4be18:	ldr	r1, [sp, #56]	; 0x38
   4be1c:	mov	r9, #0
   4be20:	mla	r0, r0, r4, r6
   4be24:	cmp	r1, #1
   4be28:	lsl	r6, r5, #3
   4be2c:	add	sl, r3, r0, lsl #2
   4be30:	sub	r0, r5, #1
   4be34:	movwne	r7, #1
   4be38:	mov	r3, #0
   4be3c:	clz	r0, r0
   4be40:	lsr	r0, r0, #5
   4be44:	and	r0, r7, r0
   4be48:	lsl	r7, r5, #2
   4be4c:	str	r0, [sp, #40]	; 0x28
   4be50:	mul	r0, ip, r4
   4be54:	lsl	r0, r0, #2
   4be58:	str	r0, [sp, #48]	; 0x30
   4be5c:	bic	r0, r1, #1
   4be60:	str	r0, [sp, #44]	; 0x2c
   4be64:	ldr	r0, [sp, #56]	; 0x38
   4be68:	cmp	r0, #1
   4be6c:	blt	4bf00 <GetDataSlab+0x2453c>
   4be70:	ldr	r0, [sp, #40]	; 0x28
   4be74:	ldr	r4, [sp, #60]	; 0x3c
   4be78:	mov	r2, #0
   4be7c:	cmp	r0, #0
   4be80:	mov	r8, r4
   4be84:	beq	4bed4 <GetDataSlab+0x24510>
   4be88:	ldr	r5, [sp, #44]	; 0x2c
   4be8c:	mov	r1, sl
   4be90:	mov	r2, r4
   4be94:	add	r0, sp, #96	; 0x60
   4be98:	add	r8, r4, r5, lsl #3
   4be9c:	ldm	r1, {ip, lr}
   4bea0:	add	r1, r1, r6
   4bea4:	subs	r5, r5, #2
   4bea8:	str	lr, [sp, #100]	; 0x64
   4beac:	str	ip, [sp, #96]	; 0x60
   4beb0:	vld1.32	{d16}, [r0 :64]
   4beb4:	vmovl.u32	q8, d16
   4beb8:	vst1.64	{d16-d17}, [r2]!
   4bebc:	bne	4be9c <GetDataSlab+0x244d8>
   4bec0:	ldr	r0, [sp, #56]	; 0x38
   4bec4:	ldr	r2, [sp, #44]	; 0x2c
   4bec8:	ldr	r4, [sp, #60]	; 0x3c
   4becc:	cmp	r0, r2
   4bed0:	beq	4bef4 <GetDataSlab+0x24530>
   4bed4:	ldr	r0, [sp, #56]	; 0x38
   4bed8:	mla	r1, r7, r2, sl
   4bedc:	sub	r2, r0, r2
   4bee0:	ldr	r0, [r1], r7
   4bee4:	subs	r2, r2, #1
   4bee8:	stm	r8, {r0, r9}
   4beec:	add	r8, r8, #8
   4bef0:	bne	4bee0 <GetDataSlab+0x2451c>
   4bef4:	ldr	r0, [sp, #56]	; 0x38
   4bef8:	add	r4, r4, r0, lsl #3
   4befc:	str	r4, [sp, #60]	; 0x3c
   4bf00:	ldr	r0, [sp, #48]	; 0x30
   4bf04:	ldr	r1, [sp, #52]	; 0x34
   4bf08:	add	r3, r3, #1
   4bf0c:	add	sl, sl, r0
   4bf10:	mov	r0, #0
   4bf14:	cmp	r3, r1
   4bf18:	bne	4be64 <GetDataSlab+0x244a0>
   4bf1c:	b	47ffc <GetDataSlab+0x20638>
   4bf20:	ldr	r0, [sp, #52]	; 0x34
   4bf24:	cmp	r0, #1
   4bf28:	blt	2a430 <GetDataSlab+0x2a6c>
   4bf2c:	ldr	r0, [sp, #16]
   4bf30:	lsl	r7, r5, #2
   4bf34:	mov	r9, #0
   4bf38:	mla	r0, r0, r4, r6
   4bf3c:	add	sl, r3, r0, lsl #2
   4bf40:	mul	r0, ip, r4
   4bf44:	lsl	r8, r0, #2
   4bf48:	ldr	r4, [sp, #56]	; 0x38
   4bf4c:	cmp	r4, #1
   4bf50:	blt	4bf84 <GetDataSlab+0x245c0>
   4bf54:	ldr	r6, [sp, #60]	; 0x3c
   4bf58:	mov	r5, sl
   4bf5c:	ldr	r0, [r5], r7
   4bf60:	bl	5855c <__aeabi_f2lz>
   4bf64:	strd	r0, [r6]
   4bf68:	subs	r4, r4, #1
   4bf6c:	add	r6, r6, #8
   4bf70:	bne	4bf5c <GetDataSlab+0x24598>
   4bf74:	ldr	r0, [sp, #60]	; 0x3c
   4bf78:	ldr	r1, [sp, #56]	; 0x38
   4bf7c:	add	r0, r0, r1, lsl #3
   4bf80:	str	r0, [sp, #60]	; 0x3c
   4bf84:	ldr	r1, [sp, #52]	; 0x34
   4bf88:	add	r9, r9, #1
   4bf8c:	add	sl, sl, r8
   4bf90:	mov	r0, #0
   4bf94:	cmp	r9, r1
   4bf98:	bne	4bf48 <GetDataSlab+0x24584>
   4bf9c:	b	47ffc <GetDataSlab+0x20638>
   4bfa0:	ldr	r0, [sp, #52]	; 0x34
   4bfa4:	cmp	r0, #1
   4bfa8:	blt	2a430 <GetDataSlab+0x2a6c>
   4bfac:	ldr	r0, [sp, #16]
   4bfb0:	lsl	r7, r5, #3
   4bfb4:	mov	r9, #0
   4bfb8:	mla	r0, r0, r4, r6
   4bfbc:	add	sl, r3, r0, lsl #3
   4bfc0:	mul	r0, ip, r4
   4bfc4:	lsl	r8, r0, #3
   4bfc8:	ldr	r5, [sp, #56]	; 0x38
   4bfcc:	cmp	r5, #1
   4bfd0:	blt	4c00c <GetDataSlab+0x24648>
   4bfd4:	ldr	r6, [sp, #60]	; 0x3c
   4bfd8:	mov	r4, sl
   4bfdc:	vldr	d16, [r4]
   4bfe0:	vmov	r0, r1, d16
   4bfe4:	bl	58588 <__aeabi_d2lz>
   4bfe8:	strd	r0, [r6]
   4bfec:	add	r4, r4, r7
   4bff0:	subs	r5, r5, #1
   4bff4:	add	r6, r6, #8
   4bff8:	bne	4bfdc <GetDataSlab+0x24618>
   4bffc:	ldr	r0, [sp, #60]	; 0x3c
   4c000:	ldr	r1, [sp, #56]	; 0x38
   4c004:	add	r0, r0, r1, lsl #3
   4c008:	str	r0, [sp, #60]	; 0x3c
   4c00c:	ldr	r1, [sp, #52]	; 0x34
   4c010:	add	r9, r9, #1
   4c014:	add	sl, sl, r8
   4c018:	mov	r0, #0
   4c01c:	cmp	r9, r1
   4c020:	bne	4bfc8 <GetDataSlab+0x24604>
   4c024:	b	47ffc <GetDataSlab+0x20638>
   4c028:	ldr	r0, [sp, #52]	; 0x34
   4c02c:	cmp	r0, #1
   4c030:	blt	2a430 <GetDataSlab+0x2a6c>
   4c034:	ldr	r0, [sp, #16]
   4c038:	mov	r2, r7
   4c03c:	sub	r2, r5, #1
   4c040:	clz	r2, r2
   4c044:	lsr	r2, r2, #5
   4c048:	mla	r1, r0, r4, r6
   4c04c:	ldr	r0, [sp, #56]	; 0x38
   4c050:	lsl	r6, r5, #4
   4c054:	add	lr, r3, r1, lsl #3
   4c058:	lsl	r3, r1, #3
   4c05c:	mov	r1, r7
   4c060:	lsl	r7, r5, #3
   4c064:	str	r3, [sp, #8]
   4c068:	cmp	r0, #1
   4c06c:	bic	r9, r0, #1
   4c070:	movwne	r1, #1
   4c074:	and	r1, r1, r2
   4c078:	mov	r2, #0
   4c07c:	str	r1, [sp, #36]	; 0x24
   4c080:	mul	r1, ip, r4
   4c084:	lsl	sl, r1, #3
   4c088:	mov	r1, r3
   4c08c:	add	r1, r3, r0, lsl #3
   4c090:	ldr	r3, [sp, #60]	; 0x3c
   4c094:	str	r1, [sp, #12]
   4c098:	ldr	r0, [sp, #56]	; 0x38
   4c09c:	cmp	r0, #1
   4c0a0:	blt	4c164 <GetDataSlab+0x247a0>
   4c0a4:	ldr	r0, [sp, #36]	; 0x24
   4c0a8:	mov	r4, #0
   4c0ac:	cmp	r0, #0
   4c0b0:	beq	4c130 <GetDataSlab+0x2476c>
   4c0b4:	ldr	r0, [sp, #12]
   4c0b8:	mla	r1, sl, r2, r0
   4c0bc:	ldr	r0, [sp, #48]	; 0x30
   4c0c0:	add	r1, r0, r1
   4c0c4:	cmp	r1, r3
   4c0c8:	bls	4c0f0 <GetDataSlab+0x2472c>
   4c0cc:	ldr	r0, [sp, #8]
   4c0d0:	mov	r8, r3
   4c0d4:	mla	r1, sl, r2, r0
   4c0d8:	ldr	r0, [sp, #48]	; 0x30
   4c0dc:	add	r1, r0, r1
   4c0e0:	ldr	r0, [sp, #56]	; 0x38
   4c0e4:	add	r5, r3, r0, lsl #3
   4c0e8:	cmp	r1, r5
   4c0ec:	bcc	4c134 <GetDataSlab+0x24770>
   4c0f0:	mov	r4, r9
   4c0f4:	add	r8, r3, r9, lsl #3
   4c0f8:	mov	r5, lr
   4c0fc:	mov	r0, r3
   4c100:	mov	ip, r3
   4c104:	vld1.64	{d16-d17}, [r5], r6
   4c108:	subs	r4, r4, #2
   4c10c:	vst1.64	{d16-d17}, [ip]!
   4c110:	bne	4c104 <GetDataSlab+0x24740>
   4c114:	ldr	r1, [sp, #56]	; 0x38
   4c118:	ldr	ip, [sp, #28]
   4c11c:	mov	r4, r9
   4c120:	mov	r3, r0
   4c124:	cmp	r1, r9
   4c128:	bne	4c134 <GetDataSlab+0x24770>
   4c12c:	b	4c158 <GetDataSlab+0x24794>
   4c130:	mov	r8, r3
   4c134:	ldr	r0, [sp, #56]	; 0x38
   4c138:	mla	r5, r7, r4, lr
   4c13c:	sub	r4, r0, r4
   4c140:	ldrd	r0, [r5]
   4c144:	add	r5, r5, r7
   4c148:	subs	r4, r4, #1
   4c14c:	strd	r0, [r8]
   4c150:	add	r8, r8, #8
   4c154:	bne	4c140 <GetDataSlab+0x2477c>
   4c158:	ldr	r0, [sp, #56]	; 0x38
   4c15c:	ldr	r4, [sp, #44]	; 0x2c
   4c160:	add	r3, r3, r0, lsl #3
   4c164:	ldr	r0, [sp, #52]	; 0x34
   4c168:	add	r2, r2, #1
   4c16c:	add	lr, lr, sl
   4c170:	cmp	r2, r0
   4c174:	bne	4c098 <GetDataSlab+0x246d4>
   4c178:	mov	r0, #0
   4c17c:	str	r3, [sp, #60]	; 0x3c
   4c180:	ldr	r1, [sp, #40]	; 0x28
   4c184:	cmp	r1, #13
   4c188:	bne	47ffc <GetDataSlab+0x20638>
   4c18c:	ldr	r0, [sp, #52]	; 0x34
   4c190:	cmp	r0, #1
   4c194:	blt	2a430 <GetDataSlab+0x2a6c>
   4c198:	ldr	r0, [sp, #16]
   4c19c:	ldr	r1, [sp, #24]
   4c1a0:	ldr	r3, [sp, #32]
   4c1a4:	mov	r2, ip
   4c1a8:	ldr	r7, [sp, #20]
   4c1ac:	mla	r0, r0, r4, r1
   4c1b0:	ldr	r1, [sp, #48]	; 0x30
   4c1b4:	lsl	r6, r3, #3
   4c1b8:	lsl	r5, r0, #3
   4c1bc:	str	r5, [sp, #44]	; 0x2c
   4c1c0:	add	ip, r1, r0, lsl #3
   4c1c4:	ldr	r1, [sp, #56]	; 0x38
   4c1c8:	sub	r0, r3, #1
   4c1cc:	clz	r0, r0
   4c1d0:	lsr	r0, r0, #5
   4c1d4:	cmp	r1, #1
   4c1d8:	add	lr, r5, r1, lsl #3
   4c1dc:	bic	r9, r1, #1
   4c1e0:	movwne	r7, #1
   4c1e4:	and	r8, r7, r0
   4c1e8:	mul	r0, r2, r4
   4c1ec:	lsl	r4, r3, #4
   4c1f0:	mov	r3, #0
   4c1f4:	lsl	sl, r0, #3
   4c1f8:	mov	r0, r5
   4c1fc:	ldr	r0, [sp, #56]	; 0x38
   4c200:	cmp	r0, #1
   4c204:	blt	4c2c8 <GetDataSlab+0x24904>
   4c208:	mov	r2, #0
   4c20c:	cmp	r8, #0
   4c210:	beq	4c288 <GetDataSlab+0x248c4>
   4c214:	ldr	r1, [sp, #48]	; 0x30
   4c218:	mla	r0, sl, r3, lr
   4c21c:	add	r0, r1, r0
   4c220:	ldr	r1, [sp, #60]	; 0x3c
   4c224:	cmp	r0, r1
   4c228:	bls	4c254 <GetDataSlab+0x24890>
   4c22c:	ldr	r0, [sp, #44]	; 0x2c
   4c230:	ldr	r1, [sp, #48]	; 0x30
   4c234:	ldr	r5, [sp, #56]	; 0x38
   4c238:	mla	r0, sl, r3, r0
   4c23c:	add	r0, r1, r0
   4c240:	ldr	r1, [sp, #60]	; 0x3c
   4c244:	add	r5, r1, r5, lsl #3
   4c248:	cmp	r0, r5
   4c24c:	mov	r0, r1
   4c250:	bcc	4c28c <GetDataSlab+0x248c8>
   4c254:	ldr	r7, [sp, #60]	; 0x3c
   4c258:	mov	r2, r9
   4c25c:	mov	r5, ip
   4c260:	add	r0, r7, r9, lsl #3
   4c264:	vld1.64	{d16-d17}, [r5], r4
   4c268:	subs	r2, r2, #2
   4c26c:	vst1.64	{d16-d17}, [r7]!
   4c270:	bne	4c264 <GetDataSlab+0x248a0>
   4c274:	ldr	r1, [sp, #56]	; 0x38
   4c278:	mov	r2, r9
   4c27c:	cmp	r1, r9
   4c280:	bne	4c28c <GetDataSlab+0x248c8>
   4c284:	b	4c2b8 <GetDataSlab+0x248f4>
   4c288:	ldr	r0, [sp, #60]	; 0x3c
   4c28c:	ldr	r1, [sp, #56]	; 0x38
   4c290:	mla	r5, r6, r2, ip
   4c294:	sub	r2, r1, r2
   4c298:	ldr	r7, [r5]
   4c29c:	ldr	r1, [r5, #4]
   4c2a0:	add	r5, r5, r6
   4c2a4:	subs	r2, r2, #1
   4c2a8:	str	r7, [r0]
   4c2ac:	str	r1, [r0, #4]
   4c2b0:	add	r0, r0, #8
   4c2b4:	bne	4c298 <GetDataSlab+0x248d4>
   4c2b8:	ldr	r0, [sp, #60]	; 0x3c
   4c2bc:	ldr	r1, [sp, #56]	; 0x38
   4c2c0:	add	r0, r0, r1, lsl #3
   4c2c4:	str	r0, [sp, #60]	; 0x3c
   4c2c8:	ldr	r1, [sp, #52]	; 0x34
   4c2cc:	add	r3, r3, #1
   4c2d0:	add	ip, ip, sl
   4c2d4:	mov	r0, #0
   4c2d8:	cmp	r3, r1
   4c2dc:	bne	4c1fc <GetDataSlab+0x24838>
   4c2e0:	b	47ffc <GetDataSlab+0x20638>
   4c2e4:	ldr	r0, [sp, #52]	; 0x34
   4c2e8:	cmp	r0, #1
   4c2ec:	blt	2a430 <GetDataSlab+0x2a6c>
   4c2f0:	ldr	r2, [sp, #16]
   4c2f4:	ldr	r1, [sp, #56]	; 0x38
   4c2f8:	mul	r8, ip, r4
   4c2fc:	lsl	r9, r5, #1
   4c300:	add	ip, sp, #148	; 0x94
   4c304:	mla	r0, r2, r4, r6
   4c308:	cmp	r1, #1
   4c30c:	add	lr, r3, r0
   4c310:	str	r0, [sp, #12]
   4c314:	add	r0, r1, r6
   4c318:	movwne	r7, #1
   4c31c:	mov	r3, #0
   4c320:	mla	r0, r2, r4, r0
   4c324:	str	r0, [sp, #40]	; 0x28
   4c328:	sub	r0, r5, #1
   4c32c:	clz	r0, r0
   4c330:	lsr	r0, r0, #5
   4c334:	and	r0, r7, r0
   4c338:	str	r0, [sp, #44]	; 0x2c
   4c33c:	bic	r0, r1, #1
   4c340:	mov	r1, #0
   4c344:	str	r0, [sp, #36]	; 0x24
   4c348:	ldr	r0, [sp, #56]	; 0x38
   4c34c:	cmp	r0, #1
   4c350:	blt	4c430 <GetDataSlab+0x24a6c>
   4c354:	ldr	r0, [sp, #44]	; 0x2c
   4c358:	mov	sl, #0
   4c35c:	cmp	r0, #0
   4c360:	beq	4c3f4 <GetDataSlab+0x24a30>
   4c364:	ldr	r0, [sp, #40]	; 0x28
   4c368:	ldr	r2, [sp, #48]	; 0x30
   4c36c:	ldr	r4, [sp, #32]
   4c370:	mla	r0, r8, r3, r0
   4c374:	add	r0, r2, r0
   4c378:	ldr	r2, [sp, #60]	; 0x3c
   4c37c:	cmp	r0, r2
   4c380:	bls	4c3ac <GetDataSlab+0x249e8>
   4c384:	ldr	r0, [sp, #12]
   4c388:	ldr	r2, [sp, #48]	; 0x30
   4c38c:	ldr	r5, [sp, #60]	; 0x3c
   4c390:	mla	r0, r8, r3, r0
   4c394:	add	r0, r2, r0
   4c398:	ldr	r2, [sp, #56]	; 0x38
   4c39c:	add	r2, r5, r2, lsl #3
   4c3a0:	cmp	r0, r2
   4c3a4:	mov	r0, r5
   4c3a8:	bcc	4c3fc <GetDataSlab+0x24a38>
   4c3ac:	ldr	r7, [sp, #60]	; 0x3c
   4c3b0:	ldr	r5, [sp, #36]	; 0x24
   4c3b4:	mov	r2, lr
   4c3b8:	add	r0, r7, r5, lsl #3
   4c3bc:	ldrh	r6, [r2], r9
   4c3c0:	subs	r5, r5, #2
   4c3c4:	strh	r6, [sp, #148]	; 0x94
   4c3c8:	vld1.16	{d16[0]}, [ip :16]
   4c3cc:	vmovl.u8	q8, d16
   4c3d0:	vmovl.u16	q8, d16
   4c3d4:	vmovl.u32	q8, d16
   4c3d8:	vst1.64	{d16-d17}, [r7]!
   4c3dc:	bne	4c3bc <GetDataSlab+0x249f8>
   4c3e0:	ldr	r2, [sp, #56]	; 0x38
   4c3e4:	ldr	sl, [sp, #36]	; 0x24
   4c3e8:	cmp	r2, sl
   4c3ec:	bne	4c3fc <GetDataSlab+0x24a38>
   4c3f0:	b	4c420 <GetDataSlab+0x24a5c>
   4c3f4:	ldr	r0, [sp, #60]	; 0x3c
   4c3f8:	ldr	r4, [sp, #32]
   4c3fc:	ldr	r5, [sp, #56]	; 0x38
   4c400:	mla	r2, r4, sl, lr
   4c404:	sub	r5, r5, sl
   4c408:	ldrb	r6, [r2], r4
   4c40c:	subs	r5, r5, #1
   4c410:	str	r6, [r0]
   4c414:	str	r1, [r0, #4]
   4c418:	add	r0, r0, #8
   4c41c:	bne	4c408 <GetDataSlab+0x24a44>
   4c420:	ldr	r0, [sp, #60]	; 0x3c
   4c424:	ldr	r2, [sp, #56]	; 0x38
   4c428:	add	r0, r0, r2, lsl #3
   4c42c:	str	r0, [sp, #60]	; 0x3c
   4c430:	ldr	r2, [sp, #52]	; 0x34
   4c434:	add	r3, r3, #1
   4c438:	add	lr, lr, r8
   4c43c:	mov	r0, #0
   4c440:	cmp	r3, r2
   4c444:	bne	4c348 <GetDataSlab+0x24984>
   4c448:	b	47ffc <GetDataSlab+0x20638>
   4c44c:	ldr	r0, [sp, #52]	; 0x34
   4c450:	cmp	r0, #1
   4c454:	blt	2a430 <GetDataSlab+0x2a6c>
   4c458:	ldr	r0, [sp, #16]
   4c45c:	ldr	r1, [sp, #56]	; 0x38
   4c460:	mov	r2, ip
   4c464:	add	r9, sp, #136	; 0x88
   4c468:	mla	r0, r0, r4, r6
   4c46c:	cmp	r1, #1
   4c470:	lsl	r6, r5, #2
   4c474:	bic	r8, r1, #1
   4c478:	add	sl, r3, r0, lsl #1
   4c47c:	sub	r0, r5, #1
   4c480:	movwne	r7, #1
   4c484:	clz	r0, r0
   4c488:	lsr	r0, r0, #5
   4c48c:	and	ip, r7, r0
   4c490:	mul	r0, r2, r4
   4c494:	lsl	r7, r5, #1
   4c498:	mov	r2, #0
   4c49c:	lsl	lr, r0, #1
   4c4a0:	ldr	r0, [sp, #56]	; 0x38
   4c4a4:	cmp	r0, #1
   4c4a8:	blt	4c530 <GetDataSlab+0x24b6c>
   4c4ac:	ldr	r0, [sp, #60]	; 0x3c
   4c4b0:	mov	r3, #0
   4c4b4:	cmp	ip, #0
   4c4b8:	beq	4c4fc <GetDataSlab+0x24b38>
   4c4bc:	ldr	r3, [sp, #60]	; 0x3c
   4c4c0:	mov	r5, r8
   4c4c4:	mov	r1, sl
   4c4c8:	add	r0, r3, r8, lsl #3
   4c4cc:	ldr	r4, [r1], r6
   4c4d0:	subs	r5, r5, #2
   4c4d4:	str	r4, [sp, #136]	; 0x88
   4c4d8:	vld1.32	{d16[0]}, [r9 :32]
   4c4dc:	vmovl.s16	q8, d16
   4c4e0:	vmovl.s32	q8, d16
   4c4e4:	vst1.64	{d16-d17}, [r3]!
   4c4e8:	bne	4c4cc <GetDataSlab+0x24b08>
   4c4ec:	ldr	r1, [sp, #56]	; 0x38
   4c4f0:	mov	r3, r8
   4c4f4:	cmp	r1, r8
   4c4f8:	beq	4c520 <GetDataSlab+0x24b5c>
   4c4fc:	ldr	r4, [sp, #56]	; 0x38
   4c500:	mla	r1, r7, r3, sl
   4c504:	sub	r3, r4, r3
   4c508:	ldrsh	r4, [r1], r7
   4c50c:	subs	r3, r3, #1
   4c510:	asr	r5, r4, #31
   4c514:	strd	r4, [r0]
   4c518:	add	r0, r0, #8
   4c51c:	bne	4c508 <GetDataSlab+0x24b44>
   4c520:	ldr	r0, [sp, #60]	; 0x3c
   4c524:	ldr	r1, [sp, #56]	; 0x38
   4c528:	add	r0, r0, r1, lsl #3
   4c52c:	str	r0, [sp, #60]	; 0x3c
   4c530:	ldr	r1, [sp, #52]	; 0x34
   4c534:	add	r2, r2, #1
   4c538:	add	sl, sl, lr
   4c53c:	mov	r0, #0
   4c540:	cmp	r2, r1
   4c544:	bne	4c4a0 <GetDataSlab+0x24adc>
   4c548:	b	47ffc <GetDataSlab+0x20638>
   4c54c:	ldr	r0, [sp, #52]	; 0x34
   4c550:	cmp	r0, #1
   4c554:	blt	2a430 <GetDataSlab+0x2a6c>
   4c558:	ldr	r0, [sp, #16]
   4c55c:	ldr	r1, [sp, #56]	; 0x38
   4c560:	mov	r9, #0
   4c564:	add	sl, sp, #140	; 0x8c
   4c568:	mla	r0, r0, r4, r6
   4c56c:	cmp	r1, #1
   4c570:	lsl	r6, r5, #2
   4c574:	add	r8, r3, r0, lsl #1
   4c578:	sub	r0, r5, #1
   4c57c:	movwne	r7, #1
   4c580:	mov	r3, #0
   4c584:	clz	r0, r0
   4c588:	lsr	r0, r0, #5
   4c58c:	and	r0, r7, r0
   4c590:	lsl	r7, r5, #1
   4c594:	str	r0, [sp, #40]	; 0x28
   4c598:	mul	r0, ip, r4
   4c59c:	lsl	r0, r0, #1
   4c5a0:	str	r0, [sp, #48]	; 0x30
   4c5a4:	bic	r0, r1, #1
   4c5a8:	str	r0, [sp, #44]	; 0x2c
   4c5ac:	ldr	r0, [sp, #56]	; 0x38
   4c5b0:	cmp	r0, #1
   4c5b4:	blt	4c640 <GetDataSlab+0x24c7c>
   4c5b8:	ldr	r0, [sp, #40]	; 0x28
   4c5bc:	ldr	r4, [sp, #60]	; 0x3c
   4c5c0:	mov	r2, #0
   4c5c4:	cmp	r0, #0
   4c5c8:	mov	lr, r4
   4c5cc:	beq	4c614 <GetDataSlab+0x24c50>
   4c5d0:	ldr	r5, [sp, #44]	; 0x2c
   4c5d4:	mov	r1, r8
   4c5d8:	mov	r2, r4
   4c5dc:	add	lr, r4, r5, lsl #3
   4c5e0:	ldr	ip, [r1], r6
   4c5e4:	subs	r5, r5, #2
   4c5e8:	str	ip, [sp, #140]	; 0x8c
   4c5ec:	vld1.32	{d16[0]}, [sl :32]
   4c5f0:	vmovl.u16	q8, d16
   4c5f4:	vmovl.u32	q8, d16
   4c5f8:	vst1.64	{d16-d17}, [r2]!
   4c5fc:	bne	4c5e0 <GetDataSlab+0x24c1c>
   4c600:	ldr	r0, [sp, #56]	; 0x38
   4c604:	ldr	r2, [sp, #44]	; 0x2c
   4c608:	ldr	r4, [sp, #60]	; 0x3c
   4c60c:	cmp	r0, r2
   4c610:	beq	4c634 <GetDataSlab+0x24c70>
   4c614:	ldr	r0, [sp, #56]	; 0x38
   4c618:	mla	r1, r7, r2, r8
   4c61c:	sub	r2, r0, r2
   4c620:	ldrh	r0, [r1], r7
   4c624:	subs	r2, r2, #1
   4c628:	stm	lr, {r0, r9}
   4c62c:	add	lr, lr, #8
   4c630:	bne	4c620 <GetDataSlab+0x24c5c>
   4c634:	ldr	r0, [sp, #56]	; 0x38
   4c638:	add	r4, r4, r0, lsl #3
   4c63c:	str	r4, [sp, #60]	; 0x3c
   4c640:	ldr	r0, [sp, #48]	; 0x30
   4c644:	ldr	r1, [sp, #52]	; 0x34
   4c648:	add	r3, r3, #1
   4c64c:	add	r8, r8, r0
   4c650:	mov	r0, #0
   4c654:	cmp	r3, r1
   4c658:	bne	4c5ac <GetDataSlab+0x24be8>
   4c65c:	b	47ffc <GetDataSlab+0x20638>
   4c660:	ldr	r0, [sp, #52]	; 0x34
   4c664:	cmp	r0, #1
   4c668:	blt	2a430 <GetDataSlab+0x2a6c>
   4c66c:	ldr	r0, [sp, #16]
   4c670:	ldr	r1, [sp, #56]	; 0x38
   4c674:	mov	lr, #0
   4c678:	add	r9, sp, #120	; 0x78
   4c67c:	mla	r0, r0, r4, r6
   4c680:	cmp	r1, #1
   4c684:	lsl	r6, r5, #3
   4c688:	bic	r8, r1, #1
   4c68c:	add	sl, r3, r0, lsl #2
   4c690:	sub	r0, r5, #1
   4c694:	movwne	r7, #1
   4c698:	clz	r0, r0
   4c69c:	lsr	r0, r0, #5
   4c6a0:	and	r0, r7, r0
   4c6a4:	lsl	r7, r5, #2
   4c6a8:	str	r0, [sp, #40]	; 0x28
   4c6ac:	mul	r0, ip, r4
   4c6b0:	lsl	r0, r0, #2
   4c6b4:	str	r0, [sp, #48]	; 0x30
   4c6b8:	ldr	r0, [sp, #56]	; 0x38
   4c6bc:	cmp	r0, #1
   4c6c0:	blt	4c754 <GetDataSlab+0x24d90>
   4c6c4:	ldr	r0, [sp, #40]	; 0x28
   4c6c8:	ldr	r2, [sp, #60]	; 0x3c
   4c6cc:	mov	r3, #0
   4c6d0:	cmp	r0, #0
   4c6d4:	mov	r0, r2
   4c6d8:	beq	4c724 <GetDataSlab+0x24d60>
   4c6dc:	add	r0, r2, r8, lsl #3
   4c6e0:	mov	r5, r8
   4c6e4:	mov	r1, sl
   4c6e8:	mov	r3, r2
   4c6ec:	ldm	r1, {r4, ip}
   4c6f0:	add	r1, r1, r6
   4c6f4:	subs	r5, r5, #2
   4c6f8:	str	ip, [sp, #124]	; 0x7c
   4c6fc:	str	r4, [sp, #120]	; 0x78
   4c700:	vld1.32	{d16}, [r9 :64]
   4c704:	vmovl.s32	q8, d16
   4c708:	vst1.64	{d16-d17}, [r3]!
   4c70c:	bne	4c6ec <GetDataSlab+0x24d28>
   4c710:	ldr	r1, [sp, #56]	; 0x38
   4c714:	ldr	r2, [sp, #60]	; 0x3c
   4c718:	mov	r3, r8
   4c71c:	cmp	r1, r8
   4c720:	beq	4c748 <GetDataSlab+0x24d84>
   4c724:	ldr	r5, [sp, #56]	; 0x38
   4c728:	mla	r1, r7, r3, sl
   4c72c:	sub	r3, r5, r3
   4c730:	ldr	r4, [r1], r7
   4c734:	subs	r3, r3, #1
   4c738:	asr	r5, r4, #31
   4c73c:	strd	r4, [r0]
   4c740:	add	r0, r0, #8
   4c744:	bne	4c730 <GetDataSlab+0x24d6c>
   4c748:	ldr	r0, [sp, #56]	; 0x38
   4c74c:	add	r2, r2, r0, lsl #3
   4c750:	str	r2, [sp, #60]	; 0x3c
   4c754:	ldr	r0, [sp, #48]	; 0x30
   4c758:	ldr	r1, [sp, #52]	; 0x34
   4c75c:	add	lr, lr, #1
   4c760:	add	sl, sl, r0
   4c764:	mov	r0, #0
   4c768:	cmp	lr, r1
   4c76c:	bne	4c6b8 <GetDataSlab+0x24cf4>
   4c770:	b	47ffc <GetDataSlab+0x20638>
   4c774:	ldr	r0, [sp, #52]	; 0x34
   4c778:	cmp	r0, #1
   4c77c:	blt	2a430 <GetDataSlab+0x2a6c>
   4c780:	ldr	r0, [sp, #16]
   4c784:	ldr	r1, [sp, #56]	; 0x38
   4c788:	mov	r9, #0
   4c78c:	mla	r0, r0, r4, r6
   4c790:	cmp	r1, #1
   4c794:	lsl	r6, r5, #3
   4c798:	add	sl, r3, r0, lsl #2
   4c79c:	sub	r0, r5, #1
   4c7a0:	movwne	r7, #1
   4c7a4:	mov	r3, #0
   4c7a8:	clz	r0, r0
   4c7ac:	lsr	r0, r0, #5
   4c7b0:	and	r0, r7, r0
   4c7b4:	lsl	r7, r5, #2
   4c7b8:	str	r0, [sp, #40]	; 0x28
   4c7bc:	mul	r0, ip, r4
   4c7c0:	lsl	r0, r0, #2
   4c7c4:	str	r0, [sp, #48]	; 0x30
   4c7c8:	bic	r0, r1, #1
   4c7cc:	str	r0, [sp, #44]	; 0x2c
   4c7d0:	ldr	r0, [sp, #56]	; 0x38
   4c7d4:	cmp	r0, #1
   4c7d8:	blt	4c86c <GetDataSlab+0x24ea8>
   4c7dc:	ldr	r0, [sp, #40]	; 0x28
   4c7e0:	ldr	r4, [sp, #60]	; 0x3c
   4c7e4:	mov	r2, #0
   4c7e8:	cmp	r0, #0
   4c7ec:	mov	r8, r4
   4c7f0:	beq	4c840 <GetDataSlab+0x24e7c>
   4c7f4:	ldr	r5, [sp, #44]	; 0x2c
   4c7f8:	mov	r1, sl
   4c7fc:	mov	r2, r4
   4c800:	add	r0, sp, #128	; 0x80
   4c804:	add	r8, r4, r5, lsl #3
   4c808:	ldm	r1, {ip, lr}
   4c80c:	add	r1, r1, r6
   4c810:	subs	r5, r5, #2
   4c814:	str	lr, [sp, #132]	; 0x84
   4c818:	str	ip, [sp, #128]	; 0x80
   4c81c:	vld1.32	{d16}, [r0 :64]
   4c820:	vmovl.u32	q8, d16
   4c824:	vst1.64	{d16-d17}, [r2]!
   4c828:	bne	4c808 <GetDataSlab+0x24e44>
   4c82c:	ldr	r0, [sp, #56]	; 0x38
   4c830:	ldr	r2, [sp, #44]	; 0x2c
   4c834:	ldr	r4, [sp, #60]	; 0x3c
   4c838:	cmp	r0, r2
   4c83c:	beq	4c860 <GetDataSlab+0x24e9c>
   4c840:	ldr	r0, [sp, #56]	; 0x38
   4c844:	mla	r1, r7, r2, sl
   4c848:	sub	r2, r0, r2
   4c84c:	ldr	r0, [r1], r7
   4c850:	subs	r2, r2, #1
   4c854:	stm	r8, {r0, r9}
   4c858:	add	r8, r8, #8
   4c85c:	bne	4c84c <GetDataSlab+0x24e88>
   4c860:	ldr	r0, [sp, #56]	; 0x38
   4c864:	add	r4, r4, r0, lsl #3
   4c868:	str	r4, [sp, #60]	; 0x3c
   4c86c:	ldr	r0, [sp, #48]	; 0x30
   4c870:	ldr	r1, [sp, #52]	; 0x34
   4c874:	add	r3, r3, #1
   4c878:	add	sl, sl, r0
   4c87c:	mov	r0, #0
   4c880:	cmp	r3, r1
   4c884:	bne	4c7d0 <GetDataSlab+0x24e0c>
   4c888:	b	47ffc <GetDataSlab+0x20638>
   4c88c:	ldr	r0, [sp, #52]	; 0x34
   4c890:	cmp	r0, #1
   4c894:	blt	2a430 <GetDataSlab+0x2a6c>
   4c898:	ldr	r0, [sp, #16]
   4c89c:	lsl	r7, r5, #2
   4c8a0:	mov	r9, #0
   4c8a4:	mla	r0, r0, r4, r6
   4c8a8:	add	sl, r3, r0, lsl #2
   4c8ac:	mul	r0, ip, r4
   4c8b0:	lsl	r8, r0, #2
   4c8b4:	ldr	r4, [sp, #56]	; 0x38
   4c8b8:	cmp	r4, #1
   4c8bc:	blt	4c8f0 <GetDataSlab+0x24f2c>
   4c8c0:	ldr	r6, [sp, #60]	; 0x3c
   4c8c4:	mov	r5, sl
   4c8c8:	ldr	r0, [r5], r7
   4c8cc:	bl	585b8 <__aeabi_f2ulz>
   4c8d0:	strd	r0, [r6]
   4c8d4:	subs	r4, r4, #1
   4c8d8:	add	r6, r6, #8
   4c8dc:	bne	4c8c8 <GetDataSlab+0x24f04>
   4c8e0:	ldr	r0, [sp, #60]	; 0x3c
   4c8e4:	ldr	r1, [sp, #56]	; 0x38
   4c8e8:	add	r0, r0, r1, lsl #3
   4c8ec:	str	r0, [sp, #60]	; 0x3c
   4c8f0:	ldr	r1, [sp, #52]	; 0x34
   4c8f4:	add	r9, r9, #1
   4c8f8:	add	sl, sl, r8
   4c8fc:	mov	r0, #0
   4c900:	cmp	r9, r1
   4c904:	bne	4c8b4 <GetDataSlab+0x24ef0>
   4c908:	b	47ffc <GetDataSlab+0x20638>
   4c90c:	ldr	r0, [sp, #52]	; 0x34
   4c910:	cmp	r0, #1
   4c914:	blt	2a430 <GetDataSlab+0x2a6c>
   4c918:	ldr	r0, [sp, #16]
   4c91c:	lsl	r7, r5, #3
   4c920:	mov	r9, #0
   4c924:	mla	r0, r0, r4, r6
   4c928:	add	sl, r3, r0, lsl #3
   4c92c:	mul	r0, ip, r4
   4c930:	lsl	r8, r0, #3
   4c934:	ldr	r5, [sp, #56]	; 0x38
   4c938:	cmp	r5, #1
   4c93c:	blt	4c978 <GetDataSlab+0x24fb4>
   4c940:	ldr	r6, [sp, #60]	; 0x3c
   4c944:	mov	r4, sl
   4c948:	vldr	d16, [r4]
   4c94c:	vmov	r0, r1, d16
   4c950:	bl	585f8 <__aeabi_d2ulz>
   4c954:	strd	r0, [r6]
   4c958:	add	r4, r4, r7
   4c95c:	subs	r5, r5, #1
   4c960:	add	r6, r6, #8
   4c964:	bne	4c948 <GetDataSlab+0x24f84>
   4c968:	ldr	r0, [sp, #60]	; 0x3c
   4c96c:	ldr	r1, [sp, #56]	; 0x38
   4c970:	add	r0, r0, r1, lsl #3
   4c974:	str	r0, [sp, #60]	; 0x3c
   4c978:	ldr	r1, [sp, #52]	; 0x34
   4c97c:	add	r9, r9, #1
   4c980:	add	sl, sl, r8
   4c984:	mov	r0, #0
   4c988:	cmp	r9, r1
   4c98c:	bne	4c934 <GetDataSlab+0x24f70>
   4c990:	b	47ffc <GetDataSlab+0x20638>
   4c994:	ldr	r0, [sp, #52]	; 0x34
   4c998:	cmp	r0, #1
   4c99c:	blt	2a430 <GetDataSlab+0x2a6c>
   4c9a0:	ldr	r0, [sp, #16]
   4c9a4:	mov	r2, r7
   4c9a8:	sub	r2, r5, #1
   4c9ac:	clz	r2, r2
   4c9b0:	lsr	r2, r2, #5
   4c9b4:	mla	r1, r0, r4, r6
   4c9b8:	ldr	r0, [sp, #56]	; 0x38
   4c9bc:	lsl	r6, r5, #4
   4c9c0:	add	lr, r3, r1, lsl #3
   4c9c4:	lsl	r3, r1, #3
   4c9c8:	mov	r1, r7
   4c9cc:	lsl	r7, r5, #3
   4c9d0:	str	r3, [sp, #8]
   4c9d4:	cmp	r0, #1
   4c9d8:	bic	r9, r0, #1
   4c9dc:	movwne	r1, #1
   4c9e0:	and	r1, r1, r2
   4c9e4:	mov	r2, #0
   4c9e8:	str	r1, [sp, #36]	; 0x24
   4c9ec:	mul	r1, ip, r4
   4c9f0:	lsl	sl, r1, #3
   4c9f4:	mov	r1, r3
   4c9f8:	add	r1, r3, r0, lsl #3
   4c9fc:	ldr	r3, [sp, #60]	; 0x3c
   4ca00:	str	r1, [sp, #12]
   4ca04:	ldr	r0, [sp, #56]	; 0x38
   4ca08:	cmp	r0, #1
   4ca0c:	blt	4cad0 <GetDataSlab+0x2510c>
   4ca10:	ldr	r0, [sp, #36]	; 0x24
   4ca14:	mov	r4, #0
   4ca18:	cmp	r0, #0
   4ca1c:	beq	4ca9c <GetDataSlab+0x250d8>
   4ca20:	ldr	r0, [sp, #12]
   4ca24:	mla	r1, sl, r2, r0
   4ca28:	ldr	r0, [sp, #48]	; 0x30
   4ca2c:	add	r1, r0, r1
   4ca30:	cmp	r1, r3
   4ca34:	bls	4ca5c <GetDataSlab+0x25098>
   4ca38:	ldr	r0, [sp, #8]
   4ca3c:	mov	r8, r3
   4ca40:	mla	r1, sl, r2, r0
   4ca44:	ldr	r0, [sp, #48]	; 0x30
   4ca48:	add	r1, r0, r1
   4ca4c:	ldr	r0, [sp, #56]	; 0x38
   4ca50:	add	r5, r3, r0, lsl #3
   4ca54:	cmp	r1, r5
   4ca58:	bcc	4caa0 <GetDataSlab+0x250dc>
   4ca5c:	mov	r4, r9
   4ca60:	add	r8, r3, r9, lsl #3
   4ca64:	mov	r5, lr
   4ca68:	mov	r0, r3
   4ca6c:	mov	ip, r3
   4ca70:	vld1.64	{d16-d17}, [r5], r6
   4ca74:	subs	r4, r4, #2
   4ca78:	vst1.64	{d16-d17}, [ip]!
   4ca7c:	bne	4ca70 <GetDataSlab+0x250ac>
   4ca80:	ldr	r1, [sp, #56]	; 0x38
   4ca84:	ldr	ip, [sp, #28]
   4ca88:	mov	r4, r9
   4ca8c:	mov	r3, r0
   4ca90:	cmp	r1, r9
   4ca94:	bne	4caa0 <GetDataSlab+0x250dc>
   4ca98:	b	4cac4 <GetDataSlab+0x25100>
   4ca9c:	mov	r8, r3
   4caa0:	ldr	r0, [sp, #56]	; 0x38
   4caa4:	mla	r5, r7, r4, lr
   4caa8:	sub	r4, r0, r4
   4caac:	ldrd	r0, [r5]
   4cab0:	add	r5, r5, r7
   4cab4:	subs	r4, r4, #1
   4cab8:	strd	r0, [r8]
   4cabc:	add	r8, r8, #8
   4cac0:	bne	4caac <GetDataSlab+0x250e8>
   4cac4:	ldr	r0, [sp, #56]	; 0x38
   4cac8:	ldr	r4, [sp, #44]	; 0x2c
   4cacc:	add	r3, r3, r0, lsl #3
   4cad0:	ldr	r0, [sp, #52]	; 0x34
   4cad4:	add	r2, r2, #1
   4cad8:	add	lr, lr, sl
   4cadc:	cmp	r2, r0
   4cae0:	bne	4ca04 <GetDataSlab+0x25040>
   4cae4:	mov	r0, #0
   4cae8:	str	r3, [sp, #60]	; 0x3c
   4caec:	ldr	r1, [sp, #40]	; 0x28
   4caf0:	cmp	r1, #13
   4caf4:	bne	47ffc <GetDataSlab+0x20638>
   4caf8:	ldr	r0, [sp, #52]	; 0x34
   4cafc:	cmp	r0, #1
   4cb00:	blt	2a430 <GetDataSlab+0x2a6c>
   4cb04:	ldr	r0, [sp, #16]
   4cb08:	ldr	r1, [sp, #24]
   4cb0c:	ldr	r3, [sp, #32]
   4cb10:	mov	r2, ip
   4cb14:	ldr	r7, [sp, #20]
   4cb18:	mla	r0, r0, r4, r1
   4cb1c:	ldr	r1, [sp, #48]	; 0x30
   4cb20:	lsl	r6, r3, #3
   4cb24:	lsl	r5, r0, #3
   4cb28:	str	r5, [sp, #44]	; 0x2c
   4cb2c:	add	ip, r1, r0, lsl #3
   4cb30:	ldr	r1, [sp, #56]	; 0x38
   4cb34:	sub	r0, r3, #1
   4cb38:	clz	r0, r0
   4cb3c:	lsr	r0, r0, #5
   4cb40:	cmp	r1, #1
   4cb44:	add	lr, r5, r1, lsl #3
   4cb48:	bic	r9, r1, #1
   4cb4c:	movwne	r7, #1
   4cb50:	and	r8, r7, r0
   4cb54:	mul	r0, r2, r4
   4cb58:	lsl	r4, r3, #4
   4cb5c:	mov	r3, #0
   4cb60:	lsl	sl, r0, #3
   4cb64:	mov	r0, r5
   4cb68:	ldr	r0, [sp, #56]	; 0x38
   4cb6c:	cmp	r0, #1
   4cb70:	blt	4cc34 <GetDataSlab+0x25270>
   4cb74:	mov	r2, #0
   4cb78:	cmp	r8, #0
   4cb7c:	beq	4cbf4 <GetDataSlab+0x25230>
   4cb80:	ldr	r1, [sp, #48]	; 0x30
   4cb84:	mla	r0, sl, r3, lr
   4cb88:	add	r0, r1, r0
   4cb8c:	ldr	r1, [sp, #60]	; 0x3c
   4cb90:	cmp	r0, r1
   4cb94:	bls	4cbc0 <GetDataSlab+0x251fc>
   4cb98:	ldr	r0, [sp, #44]	; 0x2c
   4cb9c:	ldr	r1, [sp, #48]	; 0x30
   4cba0:	ldr	r5, [sp, #56]	; 0x38
   4cba4:	mla	r0, sl, r3, r0
   4cba8:	add	r0, r1, r0
   4cbac:	ldr	r1, [sp, #60]	; 0x3c
   4cbb0:	add	r5, r1, r5, lsl #3
   4cbb4:	cmp	r0, r5
   4cbb8:	mov	r0, r1
   4cbbc:	bcc	4cbf8 <GetDataSlab+0x25234>
   4cbc0:	ldr	r7, [sp, #60]	; 0x3c
   4cbc4:	mov	r2, r9
   4cbc8:	mov	r5, ip
   4cbcc:	add	r0, r7, r9, lsl #3
   4cbd0:	vld1.64	{d16-d17}, [r5], r4
   4cbd4:	subs	r2, r2, #2
   4cbd8:	vst1.64	{d16-d17}, [r7]!
   4cbdc:	bne	4cbd0 <GetDataSlab+0x2520c>
   4cbe0:	ldr	r1, [sp, #56]	; 0x38
   4cbe4:	mov	r2, r9
   4cbe8:	cmp	r1, r9
   4cbec:	bne	4cbf8 <GetDataSlab+0x25234>
   4cbf0:	b	4cc24 <GetDataSlab+0x25260>
   4cbf4:	ldr	r0, [sp, #60]	; 0x3c
   4cbf8:	ldr	r1, [sp, #56]	; 0x38
   4cbfc:	mla	r5, r6, r2, ip
   4cc00:	sub	r2, r1, r2
   4cc04:	ldr	r7, [r5]
   4cc08:	ldr	r1, [r5, #4]
   4cc0c:	add	r5, r5, r6
   4cc10:	subs	r2, r2, #1
   4cc14:	str	r7, [r0]
   4cc18:	str	r1, [r0, #4]
   4cc1c:	add	r0, r0, #8
   4cc20:	bne	4cc04 <GetDataSlab+0x25240>
   4cc24:	ldr	r0, [sp, #60]	; 0x3c
   4cc28:	ldr	r1, [sp, #56]	; 0x38
   4cc2c:	add	r0, r0, r1, lsl #3
   4cc30:	str	r0, [sp, #60]	; 0x3c
   4cc34:	ldr	r1, [sp, #52]	; 0x34
   4cc38:	add	r3, r3, #1
   4cc3c:	add	ip, ip, sl
   4cc40:	mov	r0, #0
   4cc44:	cmp	r3, r1
   4cc48:	bne	4cb68 <GetDataSlab+0x251a4>
   4cc4c:	b	47ffc <GetDataSlab+0x20638>
   4cc50:	ldr	r6, [sp, #56]	; 0x38
   4cc54:	ldr	r1, [sp, #52]	; 0x34
   4cc58:	mov	r9, r6
   4cc5c:	ldr	r6, [sp, #28]
   4cc60:	cmp	ip, #13
   4cc64:	bne	47ffc <GetDataSlab+0x20638>
   4cc68:	mov	r5, r1
   4cc6c:	mov	r0, r1
   4cc70:	cmp	r5, #1
   4cc74:	blt	2a430 <GetDataSlab+0x2a6c>
   4cc78:	ldr	r0, [fp, #12]
   4cc7c:	mov	r7, #0
   4cc80:	mov	r1, r0
   4cc84:	ldr	r0, [r0]
   4cc88:	ldr	r2, [r1, #4]
   4cc8c:	mla	r0, r4, r2, r0
   4cc90:	ldr	r2, [sp, #48]	; 0x30
   4cc94:	add	r2, r2, r0, lsl #3
   4cc98:	cmp	r9, #1
   4cc9c:	mov	r0, r9
   4cca0:	blt	4ccf0 <GetDataSlab+0x2532c>
   4cca4:	ldr	r5, [sp, #60]	; 0x3c
   4cca8:	ldr	r4, [fp, #8]
   4ccac:	mov	r0, #0
   4ccb0:	ldr	r6, [r8]
   4ccb4:	mul	r6, r6, r0
   4ccb8:	ldrb	r6, [r2, r6, lsl #3]
   4ccbc:	strb	r6, [r5, r0]
   4ccc0:	add	r0, r0, #1
   4ccc4:	ldr	r6, [r3]
   4ccc8:	cmp	r0, r6
   4cccc:	blt	4ccb0 <GetDataSlab+0x252ec>
   4ccd0:	add	r5, r5, r0
   4ccd4:	ldr	r0, [sp, #36]	; 0x24
   4ccd8:	mov	r9, r6
   4ccdc:	ldr	r4, [r4]
   4cce0:	ldr	r6, [lr]
   4cce4:	str	r5, [sp, #60]	; 0x3c
   4cce8:	ldr	r1, [r0]
   4ccec:	b	4ccf4 <GetDataSlab+0x25330>
   4ccf0:	mov	r1, r5
   4ccf4:	mul	r0, r4, r6
   4ccf8:	add	r7, r7, #1
   4ccfc:	mov	r5, r1
   4cd00:	add	r2, r2, r0, lsl #3
   4cd04:	mov	r0, #0
   4cd08:	cmp	r7, r1
   4cd0c:	blt	4cc98 <GetDataSlab+0x252d4>
   4cd10:	b	47ffc <GetDataSlab+0x20638>
   4cd14:	ldr	r6, [sp, #56]	; 0x38
   4cd18:	ldr	r1, [sp, #52]	; 0x34
   4cd1c:	mov	r9, r6
   4cd20:	ldr	r6, [sp, #28]
   4cd24:	cmp	ip, #13
   4cd28:	bne	47ffc <GetDataSlab+0x20638>
   4cd2c:	mov	r5, r1
   4cd30:	mov	r0, r1
   4cd34:	cmp	r5, #1
   4cd38:	blt	2a430 <GetDataSlab+0x2a6c>
   4cd3c:	ldr	r0, [fp, #12]
   4cd40:	mov	r7, #0
   4cd44:	mov	r1, r0
   4cd48:	ldr	r0, [r0]
   4cd4c:	ldr	r2, [r1, #4]
   4cd50:	mla	r0, r4, r2, r0
   4cd54:	ldr	r2, [sp, #48]	; 0x30
   4cd58:	add	r2, r2, r0, lsl #3
   4cd5c:	cmp	r9, #1
   4cd60:	mov	r0, r9
   4cd64:	blt	4cdb4 <GetDataSlab+0x253f0>
   4cd68:	ldr	r5, [sp, #60]	; 0x3c
   4cd6c:	ldr	r4, [fp, #8]
   4cd70:	mov	r0, #0
   4cd74:	ldr	r6, [r8]
   4cd78:	mul	r6, r6, r0
   4cd7c:	ldrb	r6, [r2, r6, lsl #3]
   4cd80:	strb	r6, [r5, r0]
   4cd84:	add	r0, r0, #1
   4cd88:	ldr	r6, [r3]
   4cd8c:	cmp	r0, r6
   4cd90:	blt	4cd74 <GetDataSlab+0x253b0>
   4cd94:	add	r5, r5, r0
   4cd98:	ldr	r0, [sp, #36]	; 0x24
   4cd9c:	mov	r9, r6
   4cda0:	ldr	r4, [r4]
   4cda4:	ldr	r6, [lr]
   4cda8:	str	r5, [sp, #60]	; 0x3c
   4cdac:	ldr	r1, [r0]
   4cdb0:	b	4cdb8 <GetDataSlab+0x253f4>
   4cdb4:	mov	r1, r5
   4cdb8:	mul	r0, r4, r6
   4cdbc:	add	r7, r7, #1
   4cdc0:	mov	r5, r1
   4cdc4:	add	r2, r2, r0, lsl #3
   4cdc8:	mov	r0, #0
   4cdcc:	cmp	r7, r1
   4cdd0:	blt	4cd5c <GetDataSlab+0x25398>
   4cdd4:	b	47ffc <GetDataSlab+0x20638>
   4cdd8:	ldr	r5, [sp, #56]	; 0x38
   4cddc:	ldr	r6, [sp, #52]	; 0x34
   4cde0:	cmp	r9, #13
   4cde4:	bne	47ffc <GetDataSlab+0x20638>
   4cde8:	cmp	r6, #1
   4cdec:	mov	r0, r6
   4cdf0:	blt	2a430 <GetDataSlab+0x2a6c>
   4cdf4:	ldr	r0, [fp, #12]
   4cdf8:	mov	r7, #0
   4cdfc:	mov	r1, r0
   4ce00:	ldr	r0, [r0]
   4ce04:	ldr	r2, [r1, #4]
   4ce08:	mla	r0, r4, r2, r0
   4ce0c:	ldr	r2, [sp, #48]	; 0x30
   4ce10:	add	r2, r2, r0, lsl #3
   4ce14:	cmp	r5, #1
   4ce18:	mov	r0, r5
   4ce1c:	blt	4ce70 <GetDataSlab+0x254ac>
   4ce20:	ldr	r4, [sp, #60]	; 0x3c
   4ce24:	ldr	ip, [fp, #8]
   4ce28:	mov	r0, #0
   4ce2c:	mov	r6, #0
   4ce30:	ldr	r5, [r8]
   4ce34:	add	r0, r0, #4
   4ce38:	mul	r5, r5, r6
   4ce3c:	ldr	r5, [r2, r5, lsl #3]
   4ce40:	str	r5, [r4, r6, lsl #2]
   4ce44:	add	r6, r6, #1
   4ce48:	ldr	r5, [r3]
   4ce4c:	cmp	r6, r5
   4ce50:	blt	4ce30 <GetDataSlab+0x2546c>
   4ce54:	add	r4, r4, r0
   4ce58:	ldr	r0, [sp, #36]	; 0x24
   4ce5c:	str	r4, [sp, #60]	; 0x3c
   4ce60:	ldr	r4, [ip]
   4ce64:	ldr	ip, [lr]
   4ce68:	ldr	r1, [r0]
   4ce6c:	b	4ce74 <GetDataSlab+0x254b0>
   4ce70:	mov	r1, r6
   4ce74:	mul	r0, r4, ip
   4ce78:	add	r7, r7, #1
   4ce7c:	mov	r6, r1
   4ce80:	add	r2, r2, r0, lsl #3
   4ce84:	mov	r0, #0
   4ce88:	cmp	r7, r1
   4ce8c:	blt	4ce14 <GetDataSlab+0x25450>
   4ce90:	b	47ffc <GetDataSlab+0x20638>
   4ce94:	ldr	r5, [sp, #56]	; 0x38
   4ce98:	ldr	r6, [sp, #52]	; 0x34
   4ce9c:	cmp	r9, #13
   4cea0:	bne	47ffc <GetDataSlab+0x20638>
   4cea4:	cmp	r6, #1
   4cea8:	mov	r0, r6
   4ceac:	blt	2a430 <GetDataSlab+0x2a6c>
   4ceb0:	ldr	r0, [fp, #12]
   4ceb4:	mov	r7, #0
   4ceb8:	mov	r1, r0
   4cebc:	ldr	r0, [r0]
   4cec0:	ldr	r2, [r1, #4]
   4cec4:	mla	r0, r4, r2, r0
   4cec8:	ldr	r2, [sp, #48]	; 0x30
   4cecc:	add	r2, r2, r0, lsl #3
   4ced0:	cmp	r5, #1
   4ced4:	mov	r0, r5
   4ced8:	blt	4cf2c <GetDataSlab+0x25568>
   4cedc:	ldr	r4, [sp, #60]	; 0x3c
   4cee0:	ldr	ip, [fp, #8]
   4cee4:	mov	r0, #0
   4cee8:	mov	r6, #0
   4ceec:	ldr	r5, [r8]
   4cef0:	add	r0, r0, #4
   4cef4:	mul	r5, r5, r6
   4cef8:	ldr	r5, [r2, r5, lsl #3]
   4cefc:	str	r5, [r4, r6, lsl #2]
   4cf00:	add	r6, r6, #1
   4cf04:	ldr	r5, [r3]
   4cf08:	cmp	r6, r5
   4cf0c:	blt	4ceec <GetDataSlab+0x25528>
   4cf10:	add	r4, r4, r0
   4cf14:	ldr	r0, [sp, #36]	; 0x24
   4cf18:	str	r4, [sp, #60]	; 0x3c
   4cf1c:	ldr	r4, [ip]
   4cf20:	ldr	ip, [lr]
   4cf24:	ldr	r1, [r0]
   4cf28:	b	4cf30 <GetDataSlab+0x2556c>
   4cf2c:	mov	r1, r6
   4cf30:	mul	r0, r4, ip
   4cf34:	add	r7, r7, #1
   4cf38:	mov	r6, r1
   4cf3c:	add	r2, r2, r0, lsl #3
   4cf40:	mov	r0, #0
   4cf44:	cmp	r7, r1
   4cf48:	blt	4ced0 <GetDataSlab+0x2550c>
   4cf4c:	b	47ffc <GetDataSlab+0x20638>

0004cf50 <Mat_VarReadDataLinear5>:
   4cf50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4cf54:	add	fp, sp, #28
   4cf58:	sub	sp, sp, #84	; 0x54
   4cf5c:	mov	r7, r0
   4cf60:	mov	r0, #1
   4cf64:	mvn	r5, #0
   4cf68:	str	r0, [sp, #16]
   4cf6c:	ldr	r0, [r7, #16]
   4cf70:	cmp	r0, #16
   4cf74:	beq	4d41c <Mat_VarReadDataLinear5+0x4cc>
   4cf78:	mov	r4, r1
   4cf7c:	ldr	r1, [r1, #52]	; 0x34
   4cf80:	ldr	r0, [r7]
   4cf84:	mov	r8, r2
   4cf88:	mov	r2, #0
   4cf8c:	mov	r9, r3
   4cf90:	mov	r6, #0
   4cf94:	ldr	r1, [r1]
   4cf98:	bl	1a2c <fseek@plt>
   4cf9c:	ldr	r0, [r4, #48]	; 0x30
   4cfa0:	cmp	r0, #1
   4cfa4:	beq	4d018 <Mat_VarReadDataLinear5+0xc8>
   4cfa8:	cmp	r0, #0
   4cfac:	bne	4d160 <Mat_VarReadDataLinear5+0x210>
   4cfb0:	ldr	r3, [r7]
   4cfb4:	sub	r5, fp, #36	; 0x24
   4cfb8:	mov	r1, #4
   4cfbc:	mov	r2, #2
   4cfc0:	mov	r0, r5
   4cfc4:	bl	18b8 <fread@plt>
   4cfc8:	ldr	r0, [r7, #20]
   4cfcc:	cmp	r0, #0
   4cfd0:	beq	4cfe4 <Mat_VarReadDataLinear5+0x94>
   4cfd4:	mov	r0, r5
   4cfd8:	bl	1bf0 <Mat_int32Swap>
   4cfdc:	add	r0, r5, #4
   4cfe0:	bl	1bf0 <Mat_int32Swap>
   4cfe4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   4cfe8:	uxtb	r1, r0
   4cfec:	cmp	r0, #65536	; 0x10000
   4cff0:	str	r1, [r4, #8]
   4cff4:	bcc	4d158 <Mat_VarReadDataLinear5+0x208>
   4cff8:	ldr	r0, [r7]
   4cffc:	mvn	r1, #3
   4d000:	mov	r2, #1
   4d004:	bl	1a2c <fseek@plt>
   4d008:	ldr	r0, [fp, #-36]	; 0xffffffdc
   4d00c:	mov	r1, #4
   4d010:	add	r6, r1, r0, asr #16
   4d014:	b	4d160 <Mat_VarReadDataLinear5+0x210>
   4d018:	ldr	r0, [r4, #52]	; 0x34
   4d01c:	ldr	r6, [r0, #16]
   4d020:	cmp	r6, #0
   4d024:	beq	4d084 <Mat_VarReadDataLinear5+0x134>
   4d028:	ldr	r0, [r4, #20]
   4d02c:	cmp	r0, #0
   4d030:	beq	4d0b8 <Mat_VarReadDataLinear5+0x168>
   4d034:	ldr	r3, [r4, #8]
   4d038:	ldr	r2, [r4, #16]
   4d03c:	ldr	r1, [r8]
   4d040:	ldr	r0, [r6]
   4d044:	ldr	sl, [fp, #8]
   4d048:	ldr	r7, [fp, #12]
   4d04c:	str	r9, [sp]
   4d050:	str	sl, [sp, #4]
   4d054:	str	r7, [sp, #8]
   4d058:	bl	4d434 <GetDataLinear>
   4d05c:	mov	r5, r0
   4d060:	cmp	r0, #0
   4d064:	bne	4d41c <Mat_VarReadDataLinear5+0x4cc>
   4d068:	ldr	r3, [r4, #8]
   4d06c:	ldr	r2, [r4, #16]
   4d070:	ldr	r1, [r8, #4]
   4d074:	ldr	r0, [r6, #4]
   4d078:	stm	sp, {r9, sl}
   4d07c:	str	r7, [sp, #8]
   4d080:	b	4d0dc <Mat_VarReadDataLinear5+0x18c>
   4d084:	ldr	r1, [r0, #12]
   4d088:	mov	r0, #0
   4d08c:	str	r0, [r1, #4]
   4d090:	add	r0, sp, #20
   4d094:	bl	1948 <inflateCopy@plt>
   4d098:	cmp	r0, #0
   4d09c:	beq	4d0e8 <Mat_VarReadDataLinear5+0x198>
   4d0a0:	bl	1888 <zError@plt>
   4d0a4:	mov	r1, r0
   4d0a8:	ldr	r0, [pc, #888]	; 4d428 <Mat_VarReadDataLinear5+0x4d8>
   4d0ac:	add	r0, pc, r0
   4d0b0:	bl	19b4 <Mat_Critical@plt>
   4d0b4:	b	4d41c <Mat_VarReadDataLinear5+0x4cc>
   4d0b8:	ldr	r0, [fp, #8]
   4d0bc:	ldr	r3, [r4, #8]
   4d0c0:	ldr	r2, [r4, #16]
   4d0c4:	str	r9, [sp]
   4d0c8:	mov	r1, r8
   4d0cc:	str	r0, [sp, #4]
   4d0d0:	ldr	r0, [fp, #12]
   4d0d4:	str	r0, [sp, #8]
   4d0d8:	mov	r0, r6
   4d0dc:	bl	4d434 <GetDataLinear>
   4d0e0:	mov	r5, r0
   4d0e4:	b	4d41c <Mat_VarReadDataLinear5+0x4cc>
   4d0e8:	sub	r5, fp, #36	; 0x24
   4d0ec:	add	r1, sp, #20
   4d0f0:	mov	r0, r7
   4d0f4:	mov	r2, r5
   4d0f8:	bl	3188 <InflateDataType>
   4d0fc:	ldr	r0, [r7, #20]
   4d100:	cmp	r0, #0
   4d104:	beq	4d118 <Mat_VarReadDataLinear5+0x1c8>
   4d108:	mov	r0, r5
   4d10c:	bl	1bf0 <Mat_int32Swap>
   4d110:	add	r0, r5, #4
   4d114:	bl	1bf0 <Mat_int32Swap>
   4d118:	ldr	r0, [fp, #-36]	; 0xffffffdc
   4d11c:	uxtb	r1, r0
   4d120:	str	r1, [r4, #8]
   4d124:	mov	r1, #0
   4d128:	cmp	r1, r0, lsr #16
   4d12c:	bne	4d00c <Mat_VarReadDataLinear5+0xbc>
   4d130:	add	r5, r5, #4
   4d134:	add	r1, sp, #20
   4d138:	mov	r0, r7
   4d13c:	mov	r2, r5
   4d140:	bl	3188 <InflateDataType>
   4d144:	ldr	r0, [r7, #20]
   4d148:	cmp	r0, #0
   4d14c:	beq	4d158 <Mat_VarReadDataLinear5+0x208>
   4d150:	mov	r0, r5
   4d154:	bl	1bf0 <Mat_int32Swap>
   4d158:	ldr	r0, [fp, #-32]	; 0xffffffe0
   4d15c:	add	r6, r0, #8
   4d160:	asr	r0, r6, #31
   4d164:	add	r1, sp, #16
   4d168:	add	r0, r6, r0, lsr #29
   4d16c:	bic	r0, r0, #7
   4d170:	subs	r0, r6, r0
   4d174:	rsb	r0, r0, #8
   4d178:	addne	r6, r6, r0
   4d17c:	mov	r0, r4
   4d180:	bl	53824 <SafeMulDims>
   4d184:	mov	sl, r0
   4d188:	cmp	r0, #0
   4d18c:	beq	4d19c <Mat_VarReadDataLinear5+0x24c>
   4d190:	ldr	r0, [pc, #660]	; 4d42c <Mat_VarReadDataLinear5+0x4dc>
   4d194:	add	r0, pc, r0
   4d198:	bl	19b4 <Mat_Critical@plt>
   4d19c:	ldr	ip, [fp, #12]
   4d1a0:	ldr	lr, [fp, #8]
   4d1a4:	ldr	r1, [sp, #16]
   4d1a8:	mov	r5, #1
   4d1ac:	sub	r0, ip, #1
   4d1b0:	mla	r0, r0, lr, r9
   4d1b4:	add	r0, r0, #1
   4d1b8:	cmp	r0, r1
   4d1bc:	bhi	4d404 <Mat_VarReadDataLinear5+0x4b4>
   4d1c0:	ldr	r0, [r4, #48]	; 0x30
   4d1c4:	cmp	r0, #1
   4d1c8:	beq	4d294 <Mat_VarReadDataLinear5+0x344>
   4d1cc:	cmp	r0, #0
   4d1d0:	bne	4d3ac <Mat_VarReadDataLinear5+0x45c>
   4d1d4:	ldr	r0, [r4, #20]
   4d1d8:	cmp	r0, #0
   4d1dc:	beq	4d3b4 <Mat_VarReadDataLinear5+0x464>
   4d1e0:	ldr	r3, [r4, #8]
   4d1e4:	ldr	r2, [r4, #16]
   4d1e8:	ldr	r1, [r8]
   4d1ec:	mov	r0, r7
   4d1f0:	stm	sp, {r9, lr}
   4d1f4:	str	ip, [sp, #8]
   4d1f8:	bl	21d44 <ReadDataSlab1>
   4d1fc:	ldr	r0, [r4, #52]	; 0x34
   4d200:	mov	r2, #0
   4d204:	ldr	r0, [r0]
   4d208:	add	r1, r0, r6
   4d20c:	ldr	r0, [r7]
   4d210:	bl	1a2c <fseek@plt>
   4d214:	ldr	r3, [r7]
   4d218:	sub	r5, fp, #36	; 0x24
   4d21c:	mov	r1, #4
   4d220:	mov	r2, #2
   4d224:	mov	r0, r5
   4d228:	bl	18b8 <fread@plt>
   4d22c:	ldr	r0, [r7, #20]
   4d230:	cmp	r0, #0
   4d234:	beq	4d248 <Mat_VarReadDataLinear5+0x2f8>
   4d238:	mov	r0, r5
   4d23c:	bl	1bf0 <Mat_int32Swap>
   4d240:	add	r0, r5, #4
   4d244:	bl	1bf0 <Mat_int32Swap>
   4d248:	ldr	r0, [fp, #-36]	; 0xffffffdc
   4d24c:	uxtb	r3, r0
   4d250:	cmp	r0, #65536	; 0x10000
   4d254:	str	r3, [r4, #8]
   4d258:	bcc	4d270 <Mat_VarReadDataLinear5+0x320>
   4d25c:	ldr	r0, [r7]
   4d260:	mvn	r1, #3
   4d264:	mov	r2, #1
   4d268:	bl	1a2c <fseek@plt>
   4d26c:	ldr	r3, [r4, #8]
   4d270:	ldr	r0, [fp, #8]
   4d274:	ldr	r2, [r4, #16]
   4d278:	ldr	r1, [r8, #4]
   4d27c:	str	r9, [sp]
   4d280:	str	r0, [sp, #4]
   4d284:	ldr	r0, [fp, #12]
   4d288:	str	r0, [sp, #8]
   4d28c:	mov	r0, r7
   4d290:	b	4d3cc <Mat_VarReadDataLinear5+0x47c>
   4d294:	ldr	r0, [r4, #20]
   4d298:	cmp	r0, #0
   4d29c:	beq	4d3d8 <Mat_VarReadDataLinear5+0x488>
   4d2a0:	ldr	r0, [r4, #8]
   4d2a4:	ldr	r2, [r8]
   4d2a8:	ldr	r3, [r4, #16]
   4d2ac:	add	r5, sp, #20
   4d2b0:	mov	r1, r5
   4d2b4:	stm	sp, {r0, r9, lr}
   4d2b8:	mov	r0, r7
   4d2bc:	str	ip, [sp, #12]
   4d2c0:	bl	23208 <ReadCompressedDataSlab1>
   4d2c4:	ldr	r1, [r4, #52]	; 0x34
   4d2c8:	ldr	r0, [r7]
   4d2cc:	mov	r2, #0
   4d2d0:	ldr	r1, [r1]
   4d2d4:	bl	1a2c <fseek@plt>
   4d2d8:	mov	r0, r5
   4d2dc:	bl	193c <inflateEnd@plt>
   4d2e0:	ldr	r0, [r4, #52]	; 0x34
   4d2e4:	ldr	r1, [r0, #12]
   4d2e8:	mov	r0, r5
   4d2ec:	bl	1948 <inflateCopy@plt>
   4d2f0:	mov	r5, r0
   4d2f4:	cmp	r0, #0
   4d2f8:	beq	4d314 <Mat_VarReadDataLinear5+0x3c4>
   4d2fc:	mov	r0, r5
   4d300:	bl	1888 <zError@plt>
   4d304:	mov	r1, r0
   4d308:	ldr	r0, [pc, #288]	; 4d430 <Mat_VarReadDataLinear5+0x4e0>
   4d30c:	add	r0, pc, r0
   4d310:	bl	19b4 <Mat_Critical@plt>
   4d314:	add	sl, sp, #20
   4d318:	mov	r0, r7
   4d31c:	mov	r2, r6
   4d320:	mov	r1, sl
   4d324:	bl	240c <InflateSkip>
   4d328:	mov	r0, #0
   4d32c:	sub	r2, fp, #36	; 0x24
   4d330:	mov	r1, sl
   4d334:	str	r0, [sp, #24]
   4d338:	mov	r0, r7
   4d33c:	bl	3188 <InflateDataType>
   4d340:	ldr	r0, [r7, #20]
   4d344:	cmp	r0, #0
   4d348:	beq	4d354 <Mat_VarReadDataLinear5+0x404>
   4d34c:	sub	r0, fp, #36	; 0x24
   4d350:	bl	1bf0 <Mat_int32Swap>
   4d354:	ldr	r1, [fp, #-36]	; 0xffffffdc
   4d358:	mov	r2, #0
   4d35c:	uxtb	r0, r1
   4d360:	cmp	r2, r1, lsr #16
   4d364:	str	r0, [r4, #8]
   4d368:	bne	4d380 <Mat_VarReadDataLinear5+0x430>
   4d36c:	add	r1, sp, #20
   4d370:	mov	r0, r7
   4d374:	mov	r2, #4
   4d378:	bl	240c <InflateSkip>
   4d37c:	ldr	r0, [r4, #8]
   4d380:	ldr	r3, [r4, #16]
   4d384:	ldr	r2, [r8, #4]
   4d388:	stm	sp, {r0, r9}
   4d38c:	ldr	r0, [fp, #8]
   4d390:	add	r1, sp, #20
   4d394:	str	r0, [sp, #8]
   4d398:	ldr	r0, [fp, #12]
   4d39c:	str	r0, [sp, #12]
   4d3a0:	mov	r0, r7
   4d3a4:	bl	23208 <ReadCompressedDataSlab1>
   4d3a8:	b	4d3fc <Mat_VarReadDataLinear5+0x4ac>
   4d3ac:	mov	r5, sl
   4d3b0:	b	4d404 <Mat_VarReadDataLinear5+0x4b4>
   4d3b4:	ldr	r3, [r4, #8]
   4d3b8:	ldr	r2, [r4, #16]
   4d3bc:	mov	r0, r7
   4d3c0:	mov	r1, r8
   4d3c4:	stm	sp, {r9, lr}
   4d3c8:	str	ip, [sp, #8]
   4d3cc:	bl	21d44 <ReadDataSlab1>
   4d3d0:	mov	r5, sl
   4d3d4:	b	4d404 <Mat_VarReadDataLinear5+0x4b4>
   4d3d8:	ldr	r0, [r4, #8]
   4d3dc:	ldr	r3, [r4, #16]
   4d3e0:	add	r1, sp, #20
   4d3e4:	mov	r2, r8
   4d3e8:	stm	sp, {r0, r9, lr}
   4d3ec:	mov	r0, r7
   4d3f0:	str	ip, [sp, #12]
   4d3f4:	bl	23208 <ReadCompressedDataSlab1>
   4d3f8:	mov	r5, sl
   4d3fc:	add	r0, sp, #20
   4d400:	bl	193c <inflateEnd@plt>
   4d404:	ldr	r0, [r4, #16]
   4d408:	bl	53804 <ClassType2DataType>
   4d40c:	str	r0, [r4, #8]
   4d410:	ldr	r0, [r4, #16]
   4d414:	bl	1a08 <Mat_SizeOfClass@plt>
   4d418:	str	r0, [r4, #12]
   4d41c:	mov	r0, r5
   4d420:	sub	sp, fp, #28
   4d424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4d428:	.word	0x0000bb73
   4d42c:	.word	0x0000b8e0
   4d430:	.word	0x0000b913

0004d434 <GetDataLinear>:
   4d434:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4d438:	add	fp, sp, #28
   4d43c:	sub	sp, sp, #4
   4d440:	mov	r5, r0
   4d444:	mov	r0, r3
   4d448:	mov	r7, r2
   4d44c:	mov	r4, r1
   4d450:	bl	1924 <Mat_SizeOf@plt>
   4d454:	sub	r1, r7, #6
   4d458:	cmp	r1, #9
   4d45c:	bhi	4d4e4 <GetDataLinear+0xb0>
   4d460:	add	r2, pc, #20
   4d464:	mov	r8, r0
   4d468:	ldr	r6, [fp, #16]
   4d46c:	ldr	r9, [fp, #12]
   4d470:	ldr	r0, [fp, #8]
   4d474:	ldr	r1, [r2, r1, lsl #2]
   4d478:	add	pc, r2, r1
   4d47c:	.word	0x00000028
   4d480:	.word	0x00000070
   4d484:	.word	0x000000b0
   4d488:	.word	0x000000ec
   4d48c:	.word	0x00000128
   4d490:	.word	0x00000168
   4d494:	.word	0x000001a8
   4d498:	.word	0x000001e8
   4d49c:	.word	0x00000228
   4d4a0:	.word	0x00000268
   4d4a4:	add	r7, r5, r0, lsl #3
   4d4a8:	cmp	r9, #0
   4d4ac:	beq	4d724 <GetDataLinear+0x2f0>
   4d4b0:	mov	sl, #0
   4d4b4:	cmp	r6, #1
   4d4b8:	blt	4d738 <GetDataLinear+0x304>
   4d4bc:	lsl	r5, r9, #3
   4d4c0:	mov	r0, r4
   4d4c4:	mov	r1, r7
   4d4c8:	mov	r2, r8
   4d4cc:	bl	181c <memcpy@plt>
   4d4d0:	add	r7, r7, r5
   4d4d4:	subs	r6, r6, #1
   4d4d8:	add	r4, r4, #8
   4d4dc:	bne	4d4c0 <GetDataLinear+0x8c>
   4d4e0:	b	4d738 <GetDataLinear+0x304>
   4d4e4:	mov	sl, #1
   4d4e8:	b	4d738 <GetDataLinear+0x304>
   4d4ec:	add	r7, r5, r0, lsl #2
   4d4f0:	cmp	r9, #0
   4d4f4:	beq	4d724 <GetDataLinear+0x2f0>
   4d4f8:	mov	sl, #0
   4d4fc:	cmp	r6, #1
   4d500:	blt	4d738 <GetDataLinear+0x304>
   4d504:	lsl	r5, r9, #2
   4d508:	mov	r0, r4
   4d50c:	mov	r1, r7
   4d510:	mov	r2, r8
   4d514:	bl	181c <memcpy@plt>
   4d518:	add	r7, r7, r5
   4d51c:	subs	r6, r6, #1
   4d520:	add	r4, r4, #4
   4d524:	bne	4d508 <GetDataLinear+0xd4>
   4d528:	b	4d738 <GetDataLinear+0x304>
   4d52c:	add	r7, r5, r0
   4d530:	cmp	r9, #0
   4d534:	beq	4d724 <GetDataLinear+0x2f0>
   4d538:	mov	sl, #0
   4d53c:	cmp	r6, #1
   4d540:	blt	4d738 <GetDataLinear+0x304>
   4d544:	mov	r0, r4
   4d548:	mov	r1, r7
   4d54c:	mov	r2, r8
   4d550:	bl	181c <memcpy@plt>
   4d554:	add	r7, r7, r9
   4d558:	subs	r6, r6, #1
   4d55c:	add	r4, r4, #1
   4d560:	bne	4d544 <GetDataLinear+0x110>
   4d564:	b	4d738 <GetDataLinear+0x304>
   4d568:	add	r7, r5, r0
   4d56c:	cmp	r9, #0
   4d570:	beq	4d724 <GetDataLinear+0x2f0>
   4d574:	mov	sl, #0
   4d578:	cmp	r6, #1
   4d57c:	blt	4d738 <GetDataLinear+0x304>
   4d580:	mov	r0, r4
   4d584:	mov	r1, r7
   4d588:	mov	r2, r8
   4d58c:	bl	181c <memcpy@plt>
   4d590:	add	r7, r7, r9
   4d594:	subs	r6, r6, #1
   4d598:	add	r4, r4, #1
   4d59c:	bne	4d580 <GetDataLinear+0x14c>
   4d5a0:	b	4d738 <GetDataLinear+0x304>
   4d5a4:	add	r7, r5, r0, lsl #1
   4d5a8:	cmp	r9, #0
   4d5ac:	beq	4d724 <GetDataLinear+0x2f0>
   4d5b0:	mov	sl, #0
   4d5b4:	cmp	r6, #1
   4d5b8:	blt	4d738 <GetDataLinear+0x304>
   4d5bc:	lsl	r5, r9, #1
   4d5c0:	mov	r0, r4
   4d5c4:	mov	r1, r7
   4d5c8:	mov	r2, r8
   4d5cc:	bl	181c <memcpy@plt>
   4d5d0:	add	r7, r7, r5
   4d5d4:	subs	r6, r6, #1
   4d5d8:	add	r4, r4, #2
   4d5dc:	bne	4d5c0 <GetDataLinear+0x18c>
   4d5e0:	b	4d738 <GetDataLinear+0x304>
   4d5e4:	add	r7, r5, r0, lsl #1
   4d5e8:	cmp	r9, #0
   4d5ec:	beq	4d724 <GetDataLinear+0x2f0>
   4d5f0:	mov	sl, #0
   4d5f4:	cmp	r6, #1
   4d5f8:	blt	4d738 <GetDataLinear+0x304>
   4d5fc:	lsl	r5, r9, #1
   4d600:	mov	r0, r4
   4d604:	mov	r1, r7
   4d608:	mov	r2, r8
   4d60c:	bl	181c <memcpy@plt>
   4d610:	add	r7, r7, r5
   4d614:	subs	r6, r6, #1
   4d618:	add	r4, r4, #2
   4d61c:	bne	4d600 <GetDataLinear+0x1cc>
   4d620:	b	4d738 <GetDataLinear+0x304>
   4d624:	add	r7, r5, r0, lsl #2
   4d628:	cmp	r9, #0
   4d62c:	beq	4d724 <GetDataLinear+0x2f0>
   4d630:	mov	sl, #0
   4d634:	cmp	r6, #1
   4d638:	blt	4d738 <GetDataLinear+0x304>
   4d63c:	lsl	r5, r9, #2
   4d640:	mov	r0, r4
   4d644:	mov	r1, r7
   4d648:	mov	r2, r8
   4d64c:	bl	181c <memcpy@plt>
   4d650:	add	r7, r7, r5
   4d654:	subs	r6, r6, #1
   4d658:	add	r4, r4, #4
   4d65c:	bne	4d640 <GetDataLinear+0x20c>
   4d660:	b	4d738 <GetDataLinear+0x304>
   4d664:	add	r7, r5, r0, lsl #2
   4d668:	cmp	r9, #0
   4d66c:	beq	4d724 <GetDataLinear+0x2f0>
   4d670:	mov	sl, #0
   4d674:	cmp	r6, #1
   4d678:	blt	4d738 <GetDataLinear+0x304>
   4d67c:	lsl	r5, r9, #2
   4d680:	mov	r0, r4
   4d684:	mov	r1, r7
   4d688:	mov	r2, r8
   4d68c:	bl	181c <memcpy@plt>
   4d690:	add	r7, r7, r5
   4d694:	subs	r6, r6, #1
   4d698:	add	r4, r4, #4
   4d69c:	bne	4d680 <GetDataLinear+0x24c>
   4d6a0:	b	4d738 <GetDataLinear+0x304>
   4d6a4:	add	r7, r5, r0, lsl #3
   4d6a8:	cmp	r9, #0
   4d6ac:	beq	4d724 <GetDataLinear+0x2f0>
   4d6b0:	mov	sl, #0
   4d6b4:	cmp	r6, #1
   4d6b8:	blt	4d738 <GetDataLinear+0x304>
   4d6bc:	lsl	r5, r9, #3
   4d6c0:	mov	r0, r4
   4d6c4:	mov	r1, r7
   4d6c8:	mov	r2, r8
   4d6cc:	bl	181c <memcpy@plt>
   4d6d0:	add	r7, r7, r5
   4d6d4:	subs	r6, r6, #1
   4d6d8:	add	r4, r4, #8
   4d6dc:	bne	4d6c0 <GetDataLinear+0x28c>
   4d6e0:	b	4d738 <GetDataLinear+0x304>
   4d6e4:	add	r7, r5, r0, lsl #3
   4d6e8:	cmp	r9, #0
   4d6ec:	beq	4d724 <GetDataLinear+0x2f0>
   4d6f0:	mov	sl, #0
   4d6f4:	cmp	r6, #1
   4d6f8:	blt	4d738 <GetDataLinear+0x304>
   4d6fc:	lsl	r5, r9, #3
   4d700:	mov	r0, r4
   4d704:	mov	r1, r7
   4d708:	mov	r2, r8
   4d70c:	bl	181c <memcpy@plt>
   4d710:	add	r7, r7, r5
   4d714:	subs	r6, r6, #1
   4d718:	add	r4, r4, #8
   4d71c:	bne	4d700 <GetDataLinear+0x2cc>
   4d720:	b	4d738 <GetDataLinear+0x304>
   4d724:	mul	r2, r8, r6
   4d728:	mov	r0, r4
   4d72c:	mov	r1, r7
   4d730:	bl	181c <memcpy@plt>
   4d734:	mov	sl, #0
   4d738:	mov	r0, sl
   4d73c:	sub	sp, fp, #28
   4d740:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0004d744 <Mat_VarWrite5>:
   4d744:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4d748:	add	fp, sp, #28
   4d74c:	sub	sp, sp, #52	; 0x34
   4d750:	sub	sp, sp, #4096	; 0x1000
   4d754:	mov	r4, r0
   4d758:	mov	r0, #6
   4d75c:	mov	r5, r1
   4d760:	mov	r1, #14
   4d764:	mvn	r6, #0
   4d768:	str	r0, [fp, #-40]	; 0xffffffd8
   4d76c:	mov	r0, #5
   4d770:	cmp	r4, #0
   4d774:	str	r1, [fp, #-56]	; 0xffffffc8
   4d778:	str	r0, [fp, #-44]	; 0xffffffd4
   4d77c:	mov	r0, #8
   4d780:	str	r0, [fp, #-48]	; 0xffffffd0
   4d784:	mov	r0, #0
   4d788:	str	r0, [fp, #-52]	; 0xffffffcc
   4d78c:	str	r0, [fp, #-64]	; 0xffffffc0
   4d790:	beq	4d7b8 <Mat_VarWrite5+0x74>
   4d794:	ldr	r0, [r4]
   4d798:	mov	r7, r2
   4d79c:	mov	r1, #0
   4d7a0:	mov	r2, #2
   4d7a4:	bl	1a2c <fseek@plt>
   4d7a8:	cmp	r5, #0
   4d7ac:	ldrne	r0, [r5, #36]	; 0x24
   4d7b0:	cmpne	r0, #0
   4d7b4:	bne	4d7c4 <Mat_VarWrite5+0x80>
   4d7b8:	mov	r0, r6
   4d7bc:	sub	sp, fp, #28
   4d7c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4d7c4:	cmp	r7, #1
   4d7c8:	beq	4d9ac <Mat_VarWrite5+0x268>
   4d7cc:	mov	r9, #0
   4d7d0:	cmp	r7, #0
   4d7d4:	bne	4dae0 <Mat_VarWrite5+0x39c>
   4d7d8:	ldr	r3, [r4]
   4d7dc:	sub	r0, fp, #56	; 0x38
   4d7e0:	mov	r1, #4
   4d7e4:	mov	r2, #1
   4d7e8:	bl	18ac <fwrite@plt>
   4d7ec:	ldr	r3, [r4]
   4d7f0:	sub	r0, fp, #52	; 0x34
   4d7f4:	mov	r1, #4
   4d7f8:	mov	r2, #1
   4d7fc:	bl	18ac <fwrite@plt>
   4d800:	ldr	r0, [r4]
   4d804:	bl	1840 <ftell@plt>
   4d808:	mov	r9, r0
   4d80c:	ldr	r0, [r5, #16]
   4d810:	ldr	r2, [r5, #20]
   4d814:	uxtb	r1, r0
   4d818:	cmp	r2, #0
   4d81c:	str	r1, [fp, #-36]	; 0xffffffdc
   4d820:	orrne	r1, r1, #2048	; 0x800
   4d824:	strne	r1, [fp, #-36]	; 0xffffffdc
   4d828:	ldr	r2, [r5, #24]
   4d82c:	cmp	r2, #0
   4d830:	orrne	r1, r1, #1024	; 0x400
   4d834:	strne	r1, [fp, #-36]	; 0xffffffdc
   4d838:	ldr	r2, [r5, #28]
   4d83c:	cmp	r2, #0
   4d840:	mov	r2, #1
   4d844:	orrne	r1, r1, #512	; 0x200
   4d848:	strne	r1, [fp, #-36]	; 0xffffffdc
   4d84c:	cmp	r0, #5
   4d850:	mov	r1, #4
   4d854:	ldreq	r0, [r5, #40]	; 0x28
   4d858:	ldreq	r0, [r0]
   4d85c:	streq	r0, [fp, #-64]	; 0xffffffc0
   4d860:	sub	r0, fp, #40	; 0x28
   4d864:	ldr	r3, [r4]
   4d868:	bl	18ac <fwrite@plt>
   4d86c:	ldr	r3, [r4]
   4d870:	sub	r0, fp, #48	; 0x30
   4d874:	mov	r1, #4
   4d878:	mov	r2, #1
   4d87c:	bl	18ac <fwrite@plt>
   4d880:	ldr	r3, [r4]
   4d884:	sub	r0, fp, #36	; 0x24
   4d888:	mov	r1, #4
   4d88c:	mov	r2, #1
   4d890:	bl	18ac <fwrite@plt>
   4d894:	ldr	r3, [r4]
   4d898:	sub	r0, fp, #64	; 0x40
   4d89c:	mov	r1, #4
   4d8a0:	mov	r2, #1
   4d8a4:	bl	18ac <fwrite@plt>
   4d8a8:	ldr	r0, [r5, #4]
   4d8ac:	mov	r1, #4
   4d8b0:	mov	r2, #1
   4d8b4:	lsl	r0, r0, #2
   4d8b8:	str	r0, [fp, #-60]	; 0xffffffc4
   4d8bc:	sub	r0, fp, #44	; 0x2c
   4d8c0:	ldr	r3, [r4]
   4d8c4:	bl	18ac <fwrite@plt>
   4d8c8:	ldr	r3, [r4]
   4d8cc:	sub	r0, fp, #60	; 0x3c
   4d8d0:	mov	r1, #4
   4d8d4:	mov	r2, #1
   4d8d8:	bl	18ac <fwrite@plt>
   4d8dc:	ldr	r0, [r5, #4]
   4d8e0:	cmp	r0, #1
   4d8e4:	blt	4d920 <Mat_VarWrite5+0x1dc>
   4d8e8:	mov	r7, #0
   4d8ec:	add	r6, sp, #2064	; 0x810
   4d8f0:	ldr	r0, [r5, #32]
   4d8f4:	mov	r1, #4
   4d8f8:	mov	r2, #1
   4d8fc:	ldr	r0, [r0, r7, lsl #2]
   4d900:	str	r0, [sp, #2064]	; 0x810
   4d904:	mov	r0, r6
   4d908:	ldr	r3, [r4]
   4d90c:	bl	18ac <fwrite@plt>
   4d910:	ldr	r0, [r5, #4]
   4d914:	add	r7, r7, #1
   4d918:	cmp	r7, r0
   4d91c:	blt	4d8f0 <Mat_VarWrite5+0x1ac>
   4d920:	tst	r0, #1
   4d924:	beq	4d93c <Mat_VarWrite5+0x1f8>
   4d928:	ldr	r3, [r4]
   4d92c:	sub	r0, fp, #52	; 0x34
   4d930:	mov	r1, #4
   4d934:	mov	r2, #1
   4d938:	bl	18ac <fwrite@plt>
   4d93c:	ldr	r0, [r5, #36]	; 0x24
   4d940:	bl	1954 <strlen@plt>
   4d944:	mov	r6, r0
   4d948:	cmp	r0, #4
   4d94c:	bhi	4da1c <Mat_VarWrite5+0x2d8>
   4d950:	mov	r0, #1
   4d954:	mov	r1, #4
   4d958:	mov	r2, #1
   4d95c:	orr	r0, r0, r6, lsl #16
   4d960:	str	r0, [sp, #2064]	; 0x810
   4d964:	add	r0, sp, #2064	; 0x810
   4d968:	ldr	r3, [r4]
   4d96c:	bl	18ac <fwrite@plt>
   4d970:	ldr	r0, [r5, #36]	; 0x24
   4d974:	ldr	r3, [r4]
   4d978:	mov	r1, #1
   4d97c:	mov	r2, r6
   4d980:	bl	18ac <fwrite@plt>
   4d984:	cmp	r6, #4
   4d988:	beq	4da98 <Mat_VarWrite5+0x354>
   4d98c:	sub	r6, r6, #1
   4d990:	ldr	r1, [r4]
   4d994:	mov	r0, #0
   4d998:	bl	19e4 <fputc@plt>
   4d99c:	add	r6, r6, #1
   4d9a0:	cmp	r6, #3
   4d9a4:	blt	4d990 <Mat_VarWrite5+0x24c>
   4d9a8:	b	4da98 <Mat_VarWrite5+0x354>
   4d9ac:	add	r9, sp, #16
   4d9b0:	mov	r1, #0
   4d9b4:	mov	r2, #2048	; 0x800
   4d9b8:	mov	r0, r9
   4d9bc:	bl	1990 <memset@plt>
   4d9c0:	mov	r0, #1
   4d9c4:	mov	r1, #56	; 0x38
   4d9c8:	bl	1798 <calloc@plt>
   4d9cc:	cmp	r0, #0
   4d9d0:	beq	4d7b8 <Mat_VarWrite5+0x74>
   4d9d4:	ldr	r2, [pc, #1436]	; 4df78 <Mat_VarWrite5+0x834>
   4d9d8:	mvn	r1, #0
   4d9dc:	mov	r3, #56	; 0x38
   4d9e0:	mov	r7, r0
   4d9e4:	add	r2, pc, r2
   4d9e8:	bl	18dc <deflateInit_@plt>
   4d9ec:	cmp	r0, #0
   4d9f0:	beq	4db54 <Mat_VarWrite5+0x410>
   4d9f4:	mov	r8, r0
   4d9f8:	mov	r0, r7
   4d9fc:	bl	1804 <free@plt>
   4da00:	mov	r0, r8
   4da04:	bl	1888 <zError@plt>
   4da08:	mov	r1, r0
   4da0c:	ldr	r0, [pc, #1384]	; 4df7c <Mat_VarWrite5+0x838>
   4da10:	add	r0, pc, r0
   4da14:	bl	19b4 <Mat_Critical@plt>
   4da18:	b	4d7b8 <Mat_VarWrite5+0x74>
   4da1c:	mov	r0, #1
   4da20:	str	r6, [sp, #16]
   4da24:	mov	r1, #4
   4da28:	mov	r2, #1
   4da2c:	str	r0, [sp, #2064]	; 0x810
   4da30:	add	r0, sp, #2064	; 0x810
   4da34:	ldr	r3, [r4]
   4da38:	bl	18ac <fwrite@plt>
   4da3c:	ldr	r3, [r4]
   4da40:	add	r0, sp, #16
   4da44:	mov	r1, #4
   4da48:	mov	r2, #1
   4da4c:	bl	18ac <fwrite@plt>
   4da50:	ldr	r6, [sp, #16]
   4da54:	ldr	r0, [r5, #36]	; 0x24
   4da58:	ldr	r3, [r4]
   4da5c:	mov	r1, #1
   4da60:	mov	r2, r6
   4da64:	bl	18ac <fwrite@plt>
   4da68:	asr	r0, r6, #31
   4da6c:	add	r0, r6, r0, lsr #29
   4da70:	bic	r0, r0, #7
   4da74:	subs	r0, r6, r0
   4da78:	beq	4da98 <Mat_VarWrite5+0x354>
   4da7c:	sub	r6, r0, #1
   4da80:	ldr	r1, [r4]
   4da84:	mov	r0, #0
   4da88:	bl	19e4 <fputc@plt>
   4da8c:	add	r6, r6, #1
   4da90:	cmp	r6, #7
   4da94:	blt	4da80 <Mat_VarWrite5+0x33c>
   4da98:	ldr	r0, [r5, #52]	; 0x34
   4da9c:	cmp	r0, #0
   4daa0:	beq	4dacc <Mat_VarWrite5+0x388>
   4daa4:	ldr	r0, [r4]
   4daa8:	bl	1840 <ftell@plt>
   4daac:	ldr	r1, [r5, #52]	; 0x34
   4dab0:	cmn	r0, #1
   4dab4:	str	r0, [r1]
   4dab8:	bne	4dad4 <Mat_VarWrite5+0x390>
   4dabc:	ldr	r0, [pc, #1200]	; 4df74 <Mat_VarWrite5+0x830>
   4dac0:	add	r0, pc, r0
   4dac4:	bl	19b4 <Mat_Critical@plt>
   4dac8:	b	4dad4 <Mat_VarWrite5+0x390>
   4dacc:	mov	r0, #0
   4dad0:	str	r0, [r5, #16]
   4dad4:	mov	r0, r4
   4dad8:	mov	r1, r5
   4dadc:	bl	4df88 <WriteType>
   4dae0:	ldr	r0, [r4]
   4dae4:	bl	1840 <ftell@plt>
   4dae8:	cmn	r9, #1
   4daec:	movne	r5, r0
   4daf0:	cmnne	r0, #1
   4daf4:	bne	4db0c <Mat_VarWrite5+0x3c8>
   4daf8:	ldr	r0, [pc, #1156]	; 4df84 <Mat_VarWrite5+0x840>
   4dafc:	add	r0, pc, r0
   4db00:	bl	19b4 <Mat_Critical@plt>
   4db04:	mov	r6, #0
   4db08:	b	4d7b8 <Mat_VarWrite5+0x74>
   4db0c:	sub	r0, r5, r9
   4db10:	mvn	r1, #3
   4db14:	mov	r2, #1
   4db18:	str	r0, [fp, #-60]	; 0xffffffc4
   4db1c:	sub	r1, r1, r0
   4db20:	ldr	r0, [r4]
   4db24:	bl	1a2c <fseek@plt>
   4db28:	ldr	r3, [r4]
   4db2c:	sub	r0, fp, #60	; 0x3c
   4db30:	mov	r1, #4
   4db34:	mov	r2, #1
   4db38:	bl	18ac <fwrite@plt>
   4db3c:	ldr	r0, [r4]
   4db40:	mov	r1, r5
   4db44:	mov	r2, #0
   4db48:	mov	r6, #0
   4db4c:	bl	1a2c <fseek@plt>
   4db50:	b	4d7b8 <Mat_VarWrite5+0x74>
   4db54:	mov	r0, #15
   4db58:	mov	r1, #4
   4db5c:	mov	r2, #1
   4db60:	str	r0, [fp, #-56]	; 0xffffffc8
   4db64:	sub	r0, fp, #56	; 0x38
   4db68:	ldr	r3, [r4]
   4db6c:	bl	18ac <fwrite@plt>
   4db70:	ldr	r3, [r4]
   4db74:	sub	r0, fp, #52	; 0x34
   4db78:	mov	r1, #4
   4db7c:	mov	r2, #1
   4db80:	bl	18ac <fwrite@plt>
   4db84:	ldr	r0, [r4]
   4db88:	bl	1840 <ftell@plt>
   4db8c:	mov	r2, r0
   4db90:	ldr	r0, [r5, #16]
   4db94:	ldr	r1, [r5, #20]
   4db98:	mov	r6, #24
   4db9c:	str	r2, [sp, #8]
   4dba0:	uxtb	r8, r0
   4dba4:	cmp	r1, #0
   4dba8:	str	r8, [fp, #-36]	; 0xffffffdc
   4dbac:	orrne	r8, r8, #2048	; 0x800
   4dbb0:	strne	r8, [fp, #-36]	; 0xffffffdc
   4dbb4:	ldr	r1, [r5, #24]
   4dbb8:	cmp	r1, #0
   4dbbc:	orrne	r8, r8, #1024	; 0x400
   4dbc0:	strne	r8, [fp, #-36]	; 0xffffffdc
   4dbc4:	ldr	r1, [r5, #28]
   4dbc8:	cmp	r1, #0
   4dbcc:	mov	r1, #0
   4dbd0:	orrne	r8, r8, #512	; 0x200
   4dbd4:	strne	r8, [fp, #-36]	; 0xffffffdc
   4dbd8:	cmp	r0, #5
   4dbdc:	ldreq	r0, [r5, #40]	; 0x28
   4dbe0:	ldreq	r1, [r0]
   4dbe4:	mov	r0, #14
   4dbe8:	str	r0, [sp, #16]
   4dbec:	streq	r1, [fp, #-64]	; 0xffffffc0
   4dbf0:	str	r1, [sp, #12]
   4dbf4:	ldr	r0, [r5, #36]	; 0x24
   4dbf8:	cmp	r0, #0
   4dbfc:	beq	4dc1c <Mat_VarWrite5+0x4d8>
   4dc00:	bl	1954 <strlen@plt>
   4dc04:	cmp	r0, #5
   4dc08:	bcc	4dc1c <Mat_VarWrite5+0x4d8>
   4dc0c:	ands	r1, r0, #7
   4dc10:	rsb	r1, r1, #8
   4dc14:	addne	r0, r0, r1
   4dc18:	add	r6, r0, #24
   4dc1c:	mov	r0, r5
   4dc20:	bl	51bc4 <GetTypeBufSize>
   4dc24:	add	r0, r0, r6
   4dc28:	str	r9, [r7]
   4dc2c:	mov	sl, #2048	; 0x800
   4dc30:	add	r6, sp, #2064	; 0x810
   4dc34:	str	r0, [sp, #20]
   4dc38:	mov	r0, #8
   4dc3c:	str	r0, [r7, #4]
   4dc40:	orr	r0, r9, #4
   4dc44:	str	r0, [sp, #4]
   4dc48:	mov	r0, r7
   4dc4c:	mov	r1, #0
   4dc50:	str	r6, [r7, #12]
   4dc54:	str	sl, [r7, #16]
   4dc58:	bl	1894 <deflate@plt>
   4dc5c:	ldr	r0, [r7, #16]
   4dc60:	ldr	r3, [r4]
   4dc64:	mov	r1, #1
   4dc68:	rsb	r2, r0, #2048	; 0x800
   4dc6c:	mov	r0, r6
   4dc70:	bl	18ac <fwrite@plt>
   4dc74:	ldr	r0, [r7, #16]
   4dc78:	cmp	r0, #0
   4dc7c:	beq	4dc48 <Mat_VarWrite5+0x504>
   4dc80:	mov	r0, #8
   4dc84:	str	r0, [sp, #20]
   4dc88:	mov	r0, #6
   4dc8c:	str	r0, [sp, #16]
   4dc90:	ldr	r0, [sp, #12]
   4dc94:	str	r8, [sp, #24]
   4dc98:	str	r0, [sp, #28]
   4dc9c:	mov	r0, #5
   4dca0:	ldr	lr, [r5, #4]
   4dca4:	str	r0, [sp, #32]
   4dca8:	lsl	r0, lr, #2
   4dcac:	cmp	lr, #1
   4dcb0:	str	r0, [fp, #-60]	; 0xffffffc4
   4dcb4:	str	r0, [sp, #36]	; 0x24
   4dcb8:	blt	4dd30 <Mat_VarWrite5+0x5ec>
   4dcbc:	ldr	ip, [r5, #32]
   4dcc0:	mov	r2, #0
   4dcc4:	cmp	lr, #4
   4dcc8:	bcc	4dd10 <Mat_VarWrite5+0x5cc>
   4dccc:	add	r0, ip, lr, lsl #2
   4dcd0:	add	r3, r9, #24
   4dcd4:	cmp	r3, r0
   4dcd8:	addcc	r0, r9, lr, lsl #2
   4dcdc:	addcc	r0, r0, #24
   4dce0:	cmpcc	ip, r0
   4dce4:	bcc	4dd10 <Mat_VarWrite5+0x5cc>
   4dce8:	bic	r2, lr, #3
   4dcec:	mov	r0, ip
   4dcf0:	mov	r1, r2
   4dcf4:	vld1.32	{d16-d17}, [r0]!
   4dcf8:	subs	r1, r1, #4
   4dcfc:	vst1.32	{d16-d17}, [r3]!
   4dd00:	bne	4dcf4 <Mat_VarWrite5+0x5b0>
   4dd04:	cmp	lr, r2
   4dd08:	mov	r3, lr
   4dd0c:	beq	4dd34 <Mat_VarWrite5+0x5f0>
   4dd10:	ldr	r0, [ip, r2, lsl #2]
   4dd14:	add	r1, r9, r2, lsl #2
   4dd18:	add	r2, r2, #1
   4dd1c:	cmp	lr, r2
   4dd20:	str	r0, [r1, #24]
   4dd24:	bne	4dd10 <Mat_VarWrite5+0x5cc>
   4dd28:	mov	r3, lr
   4dd2c:	b	4dd34 <Mat_VarWrite5+0x5f0>
   4dd30:	mov	r3, #0
   4dd34:	tst	lr, #1
   4dd38:	mov	r8, #2048	; 0x800
   4dd3c:	ldrne	r1, [fp, #-52]	; 0xffffffcc
   4dd40:	addne	r0, r9, r3, lsl #2
   4dd44:	addne	r3, r3, #1
   4dd48:	strne	r1, [r0, #24]
   4dd4c:	mov	r0, #24
   4dd50:	mov	r1, r9
   4dd54:	add	r9, r9, #8
   4dd58:	add	r0, r0, r3, lsl #2
   4dd5c:	str	r1, [r7]
   4dd60:	str	r0, [r7, #4]
   4dd64:	mov	r0, r7
   4dd68:	mov	r1, #0
   4dd6c:	str	r6, [r7, #12]
   4dd70:	str	r8, [r7, #16]
   4dd74:	bl	1894 <deflate@plt>
   4dd78:	ldr	r0, [r7, #16]
   4dd7c:	ldr	r3, [r4]
   4dd80:	mov	r1, #1
   4dd84:	rsb	r2, r0, #2048	; 0x800
   4dd88:	mov	r0, r6
   4dd8c:	bl	18ac <fwrite@plt>
   4dd90:	ldr	r0, [r7, #16]
   4dd94:	cmp	r0, #0
   4dd98:	beq	4dd64 <Mat_VarWrite5+0x620>
   4dd9c:	ldr	r8, [r5, #36]	; 0x24
   4dda0:	mov	r0, r8
   4dda4:	bl	1954 <strlen@plt>
   4dda8:	mov	sl, r0
   4ddac:	cmp	r0, #4
   4ddb0:	bhi	4de2c <Mat_VarWrite5+0x6e8>
   4ddb4:	mov	r0, #0
   4ddb8:	sxth	r2, sl
   4ddbc:	mov	r1, r8
   4ddc0:	str	r0, [sp, #20]
   4ddc4:	mov	r0, #1
   4ddc8:	orr	r0, r0, sl, lsl #16
   4ddcc:	str	r0, [sp, #16]
   4ddd0:	ldr	r0, [sp, #4]
   4ddd4:	bl	181c <memcpy@plt>
   4ddd8:	ldr	r9, [sp, #8]
   4dddc:	add	r1, sp, #16
   4dde0:	mov	r8, #2048	; 0x800
   4dde4:	mov	r0, #8
   4dde8:	str	r1, [r7]
   4ddec:	str	r0, [r7, #4]
   4ddf0:	mov	r0, r7
   4ddf4:	mov	r1, #0
   4ddf8:	str	r6, [r7, #12]
   4ddfc:	str	r8, [r7, #16]
   4de00:	bl	1894 <deflate@plt>
   4de04:	ldr	r0, [r7, #16]
   4de08:	ldr	r3, [r4]
   4de0c:	mov	r1, #1
   4de10:	rsb	r2, r0, #2048	; 0x800
   4de14:	mov	r0, r6
   4de18:	bl	18ac <fwrite@plt>
   4de1c:	ldr	r0, [r7, #16]
   4de20:	cmp	r0, #0
   4de24:	beq	4ddf0 <Mat_VarWrite5+0x6ac>
   4de28:	b	4dec0 <Mat_VarWrite5+0x77c>
   4de2c:	mov	r0, r9
   4de30:	mov	r1, #0
   4de34:	movw	r2, #2040	; 0x7f8
   4de38:	bl	1990 <memset@plt>
   4de3c:	mov	r0, #1
   4de40:	mov	r1, r8
   4de44:	mov	r2, sl
   4de48:	str	r0, [sp, #16]
   4de4c:	mov	r0, r9
   4de50:	str	sl, [sp, #20]
   4de54:	bl	181c <memcpy@plt>
   4de58:	asr	r0, sl, #31
   4de5c:	ldr	r9, [sp, #8]
   4de60:	add	r1, sp, #16
   4de64:	mov	r8, #2048	; 0x800
   4de68:	add	r0, sl, r0, lsr #29
   4de6c:	str	r1, [r7]
   4de70:	bic	r0, r0, #7
   4de74:	subs	r0, sl, r0
   4de78:	rsb	r0, r0, #8
   4de7c:	addne	sl, sl, r0
   4de80:	add	r0, sl, #8
   4de84:	str	r0, [r7, #4]
   4de88:	mov	r0, r7
   4de8c:	mov	r1, #0
   4de90:	str	r6, [r7, #12]
   4de94:	str	r8, [r7, #16]
   4de98:	bl	1894 <deflate@plt>
   4de9c:	ldr	r0, [r7, #16]
   4dea0:	ldr	r3, [r4]
   4dea4:	mov	r1, #1
   4dea8:	rsb	r2, r0, #2048	; 0x800
   4deac:	mov	r0, r6
   4deb0:	bl	18ac <fwrite@plt>
   4deb4:	ldr	r0, [r7, #16]
   4deb8:	cmp	r0, #0
   4debc:	beq	4de88 <Mat_VarWrite5+0x744>
   4dec0:	ldr	r0, [r5, #52]	; 0x34
   4dec4:	cmp	r0, #0
   4dec8:	beq	4def4 <Mat_VarWrite5+0x7b0>
   4decc:	ldr	r0, [r4]
   4ded0:	bl	1840 <ftell@plt>
   4ded4:	ldr	r1, [r5, #52]	; 0x34
   4ded8:	cmn	r0, #1
   4dedc:	str	r0, [r1]
   4dee0:	bne	4defc <Mat_VarWrite5+0x7b8>
   4dee4:	ldr	r0, [pc, #148]	; 4df80 <Mat_VarWrite5+0x83c>
   4dee8:	add	r0, pc, r0
   4deec:	bl	19b4 <Mat_Critical@plt>
   4def0:	b	4defc <Mat_VarWrite5+0x7b8>
   4def4:	mov	r0, #0
   4def8:	str	r0, [r5, #16]
   4defc:	mov	r0, r4
   4df00:	mov	r1, r5
   4df04:	mov	r2, r7
   4df08:	bl	4eff0 <WriteCompressedType>
   4df0c:	mov	r0, #0
   4df10:	mov	r8, #2048	; 0x800
   4df14:	str	r0, [r7]
   4df18:	str	r0, [r7, #4]
   4df1c:	mov	r0, r7
   4df20:	mov	r1, #4
   4df24:	str	r6, [r7, #12]
   4df28:	str	r8, [r7, #16]
   4df2c:	bl	1894 <deflate@plt>
   4df30:	mov	r5, r0
   4df34:	ldr	r0, [r7, #16]
   4df38:	ldr	r3, [r4]
   4df3c:	mov	r1, #1
   4df40:	rsb	r2, r0, #2048	; 0x800
   4df44:	mov	r0, r6
   4df48:	bl	18ac <fwrite@plt>
   4df4c:	cmp	r5, #1
   4df50:	beq	4df60 <Mat_VarWrite5+0x81c>
   4df54:	ldr	r0, [r7, #16]
   4df58:	cmp	r0, #0
   4df5c:	beq	4df1c <Mat_VarWrite5+0x7d8>
   4df60:	mov	r0, r7
   4df64:	bl	19c0 <deflateEnd@plt>
   4df68:	mov	r0, r7
   4df6c:	bl	1804 <free@plt>
   4df70:	b	4dae0 <Mat_VarWrite5+0x39c>
   4df74:	.word	0x0000af28
   4df78:	.word	0x0000b259
   4df7c:	.word	0x0000b234
   4df80:	.word	0x0000ab00
   4df84:	.word	0x0000aeec

0004df88 <WriteType>:
   4df88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4df8c:	add	fp, sp, #28
   4df90:	sub	sp, sp, #108	; 0x6c
   4df94:	mov	r6, r1
   4df98:	mov	r4, r0
   4df9c:	mov	r0, #1
   4dfa0:	add	r1, sp, #28
   4dfa4:	strh	r0, [sp, #38]	; 0x26
   4dfa8:	str	r0, [sp, #28]
   4dfac:	mov	r0, r6
   4dfb0:	bl	53824 <SafeMulDims>
   4dfb4:	ldr	r0, [r6, #16]
   4dfb8:	sub	r1, r0, #6
   4dfbc:	cmp	r1, #10
   4dfc0:	bcs	4e07c <WriteType+0xf4>
   4dfc4:	ldr	r0, [r6, #20]
   4dfc8:	ldr	r1, [r6, #40]	; 0x28
   4dfcc:	cmp	r0, #0
   4dfd0:	beq	4e0ec <WriteType+0x164>
   4dfd4:	ldr	r5, [pc, #4092]	; 4efd8 <WriteType+0x1050>
   4dfd8:	cmp	r1, #0
   4dfdc:	ldr	r3, [r6, #8]
   4dfe0:	ldr	r2, [sp, #28]
   4dfe4:	mov	r0, r4
   4dfe8:	mov	r7, r6
   4dfec:	add	r5, pc, r5
   4dff0:	movne	r5, r1
   4dff4:	ldr	r1, [r5]
   4dff8:	bl	51b20 <WriteData>
   4dffc:	asr	r1, r0, #31
   4e000:	str	r0, [sp, #32]
   4e004:	add	r1, r0, r1, lsr #29
   4e008:	bic	r1, r1, #7
   4e00c:	subs	r0, r0, r1
   4e010:	beq	4e030 <WriteType+0xa8>
   4e014:	sub	r6, r0, #1
   4e018:	ldr	r1, [r4]
   4e01c:	mov	r0, #0
   4e020:	bl	19e4 <fputc@plt>
   4e024:	add	r6, r6, #1
   4e028:	cmp	r6, #7
   4e02c:	blt	4e018 <WriteType+0x90>
   4e030:	ldr	r3, [r7, #8]
   4e034:	ldr	r1, [r5, #4]
   4e038:	ldr	r2, [sp, #28]
   4e03c:	mov	r0, r4
   4e040:	bl	51b20 <WriteData>
   4e044:	asr	r1, r0, #31
   4e048:	str	r0, [sp, #32]
   4e04c:	add	r1, r0, r1, lsr #29
   4e050:	bic	r1, r1, #7
   4e054:	subs	r0, r0, r1
   4e058:	beq	4e130 <WriteType+0x1a8>
   4e05c:	sub	r5, r0, #1
   4e060:	ldr	r1, [r4]
   4e064:	mov	r0, #0
   4e068:	bl	19e4 <fputc@plt>
   4e06c:	add	r5, r5, #1
   4e070:	cmp	r5, #7
   4e074:	blt	4e060 <WriteType+0xd8>
   4e078:	b	4e130 <WriteType+0x1a8>
   4e07c:	sub	r0, r0, #1
   4e080:	cmp	r0, #4
   4e084:	bhi	4e130 <WriteType+0x1a8>
   4e088:	add	r1, pc, #4
   4e08c:	ldr	r0, [r1, r0, lsl #2]
   4e090:	add	pc, r1, r0
   4e094:	.word	0x00000014
   4e098:	.word	0x00000568
   4e09c:	.word	0x0000009c
   4e0a0:	.word	0x00000450
   4e0a4:	.word	0x00000bd4
   4e0a8:	ldr	r0, [r6]
   4e0ac:	cmp	r0, #0
   4e0b0:	beq	4e130 <WriteType+0x1a8>
   4e0b4:	ldr	r9, [r6, #40]	; 0x28
   4e0b8:	cmp	r9, #0
   4e0bc:	ldrne	r1, [r6, #12]
   4e0c0:	cmpne	r1, #0
   4e0c4:	beq	4e130 <WriteType+0x1a8>
   4e0c8:	udiv	r2, r0, r1
   4e0cc:	cmp	r1, r0
   4e0d0:	str	r2, [sp, #28]
   4e0d4:	bhi	4e130 <WriteType+0x1a8>
   4e0d8:	mov	r5, #0
   4e0dc:	mov	r7, #1
   4e0e0:	sub	sl, fp, #64	; 0x40
   4e0e4:	mov	r6, #0
   4e0e8:	b	4e494 <WriteType+0x50c>
   4e0ec:	ldr	r3, [r6, #8]
   4e0f0:	ldr	r2, [sp, #28]
   4e0f4:	mov	r0, r4
   4e0f8:	bl	51b20 <WriteData>
   4e0fc:	asr	r1, r0, #31
   4e100:	str	r0, [sp, #32]
   4e104:	add	r1, r0, r1, lsr #29
   4e108:	bic	r1, r1, #7
   4e10c:	subs	r0, r0, r1
   4e110:	beq	4e130 <WriteType+0x1a8>
   4e114:	sub	r5, r0, #1
   4e118:	ldr	r1, [r4]
   4e11c:	mov	r0, #0
   4e120:	bl	19e4 <fputc@plt>
   4e124:	add	r5, r5, #1
   4e128:	cmp	r5, #7
   4e12c:	blt	4e118 <WriteType+0x190>
   4e130:	sub	sp, fp, #28
   4e134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4e138:	ldr	r3, [r4]
   4e13c:	sub	r0, fp, #52	; 0x34
   4e140:	mov	r1, #4
   4e144:	mov	r2, #1
   4e148:	bl	18ac <fwrite@plt>
   4e14c:	ldr	r3, [r4]
   4e150:	sub	r0, fp, #48	; 0x30
   4e154:	mov	r1, #4
   4e158:	mov	r2, #1
   4e15c:	bl	18ac <fwrite@plt>
   4e160:	ldr	r0, [r8, #16]
   4e164:	cmp	r0, #0
   4e168:	beq	4e4d0 <WriteType+0x548>
   4e16c:	ldr	r0, [r4]
   4e170:	bl	1840 <ftell@plt>
   4e174:	mov	r7, r0
   4e178:	ldr	r0, [r8, #16]
   4e17c:	sub	r5, fp, #32
   4e180:	uxtb	r1, r0
   4e184:	str	r1, [fp, #-32]	; 0xffffffe0
   4e188:	ldr	r2, [r8, #20]
   4e18c:	cmp	r2, #0
   4e190:	orrne	r1, r1, #2048	; 0x800
   4e194:	strne	r1, [fp, #-32]	; 0xffffffe0
   4e198:	ldr	r2, [r8, #24]
   4e19c:	cmp	r2, #0
   4e1a0:	orrne	r1, r1, #1024	; 0x400
   4e1a4:	strne	r1, [fp, #-32]	; 0xffffffe0
   4e1a8:	ldr	r2, [r8, #28]
   4e1ac:	cmp	r2, #0
   4e1b0:	orrne	r1, r1, #512	; 0x200
   4e1b4:	strne	r1, [fp, #-32]	; 0xffffffe0
   4e1b8:	cmp	r0, #5
   4e1bc:	ldreq	r0, [r8, #40]	; 0x28
   4e1c0:	ldreq	r0, [r0]
   4e1c4:	streq	r0, [fp, #-60]	; 0xffffffc4
   4e1c8:	ldr	r0, [r4, #20]
   4e1cc:	cmp	r0, #0
   4e1d0:	beq	4e1e0 <WriteType+0x258>
   4e1d4:	mov	r0, r5
   4e1d8:	bl	1bf0 <Mat_int32Swap>
   4e1dc:	str	r0, [fp, #-32]	; 0xffffffe0
   4e1e0:	ldr	r3, [r4]
   4e1e4:	sub	r0, fp, #36	; 0x24
   4e1e8:	mov	r1, #4
   4e1ec:	mov	r2, #1
   4e1f0:	bl	18ac <fwrite@plt>
   4e1f4:	ldr	r3, [r4]
   4e1f8:	sub	r0, fp, #44	; 0x2c
   4e1fc:	mov	r1, #4
   4e200:	mov	r2, #1
   4e204:	bl	18ac <fwrite@plt>
   4e208:	ldr	r3, [r4]
   4e20c:	mov	r0, r5
   4e210:	mov	r1, #4
   4e214:	mov	r2, #1
   4e218:	bl	18ac <fwrite@plt>
   4e21c:	ldr	r3, [r4]
   4e220:	sub	r0, fp, #60	; 0x3c
   4e224:	mov	r1, #4
   4e228:	mov	r2, #1
   4e22c:	bl	18ac <fwrite@plt>
   4e230:	ldr	r0, [r8, #4]
   4e234:	mov	r1, #4
   4e238:	mov	r2, #1
   4e23c:	lsl	r0, r0, #2
   4e240:	str	r0, [fp, #-56]	; 0xffffffc8
   4e244:	sub	r0, fp, #40	; 0x28
   4e248:	ldr	r3, [r4]
   4e24c:	bl	18ac <fwrite@plt>
   4e250:	ldr	r3, [r4]
   4e254:	sub	r0, fp, #56	; 0x38
   4e258:	mov	r1, #4
   4e25c:	mov	r2, #1
   4e260:	bl	18ac <fwrite@plt>
   4e264:	ldr	r0, [r8, #4]
   4e268:	cmp	r0, #1
   4e26c:	blt	4e2a4 <WriteType+0x31c>
   4e270:	mov	r5, #0
   4e274:	ldr	r0, [r8, #32]
   4e278:	mov	r1, #4
   4e27c:	mov	r2, #1
   4e280:	ldr	r0, [r0, r5, lsl #2]
   4e284:	str	r0, [fp, #-64]	; 0xffffffc0
   4e288:	mov	r0, sl
   4e28c:	ldr	r3, [r4]
   4e290:	bl	18ac <fwrite@plt>
   4e294:	ldr	r0, [r8, #4]
   4e298:	add	r5, r5, #1
   4e29c:	cmp	r5, r0
   4e2a0:	blt	4e274 <WriteType+0x2ec>
   4e2a4:	tst	r0, #1
   4e2a8:	beq	4e2c0 <WriteType+0x338>
   4e2ac:	ldr	r3, [r4]
   4e2b0:	sub	r0, fp, #48	; 0x30
   4e2b4:	mov	r1, #4
   4e2b8:	mov	r2, #1
   4e2bc:	bl	18ac <fwrite@plt>
   4e2c0:	ldr	r0, [r8, #36]	; 0x24
   4e2c4:	cmp	r0, #0
   4e2c8:	beq	4e344 <WriteType+0x3bc>
   4e2cc:	bl	1954 <strlen@plt>
   4e2d0:	cmp	r0, #4
   4e2d4:	bhi	4e388 <WriteType+0x400>
   4e2d8:	strh	r0, [fp, #-64]	; 0xffffffc0
   4e2dc:	add	r0, sp, #68	; 0x44
   4e2e0:	mov	r1, #2
   4e2e4:	mov	r2, #1
   4e2e8:	ldr	r3, [r4]
   4e2ec:	bl	18ac <fwrite@plt>
   4e2f0:	ldr	r3, [r4]
   4e2f4:	mov	r0, sl
   4e2f8:	mov	r1, #2
   4e2fc:	mov	r2, #1
   4e300:	bl	18ac <fwrite@plt>
   4e304:	ldrsh	r5, [fp, #-64]	; 0xffffffc0
   4e308:	ldr	r0, [r8, #36]	; 0x24
   4e30c:	ldr	r3, [r4]
   4e310:	mov	r1, #1
   4e314:	mov	r2, r5
   4e318:	bl	18ac <fwrite@plt>
   4e31c:	cmp	r5, #3
   4e320:	bgt	4e414 <WriteType+0x48c>
   4e324:	sub	r5, r5, #1
   4e328:	ldr	r1, [r4]
   4e32c:	mov	r0, #0
   4e330:	bl	19e4 <fputc@plt>
   4e334:	add	r5, r5, #1
   4e338:	cmp	r5, #3
   4e33c:	blt	4e328 <WriteType+0x3a0>
   4e340:	b	4e414 <WriteType+0x48c>
   4e344:	ldr	r3, [r4]
   4e348:	add	r0, sp, #68	; 0x44
   4e34c:	mov	r1, #2
   4e350:	mov	r2, #1
   4e354:	bl	18ac <fwrite@plt>
   4e358:	ldr	r1, [r4]
   4e35c:	mov	r0, #0
   4e360:	bl	19e4 <fputc@plt>
   4e364:	ldr	r1, [r4]
   4e368:	mov	r0, #0
   4e36c:	bl	19e4 <fputc@plt>
   4e370:	ldr	r3, [r4]
   4e374:	sub	r0, fp, #48	; 0x30
   4e378:	mov	r1, #4
   4e37c:	mov	r2, #1
   4e380:	bl	18ac <fwrite@plt>
   4e384:	b	4e414 <WriteType+0x48c>
   4e388:	str	r0, [fp, #-64]	; 0xffffffc0
   4e38c:	add	r0, sp, #68	; 0x44
   4e390:	mov	r1, #2
   4e394:	mov	r2, #1
   4e398:	ldr	r3, [r4]
   4e39c:	bl	18ac <fwrite@plt>
   4e3a0:	ldr	r1, [r4]
   4e3a4:	mov	r0, #0
   4e3a8:	bl	19e4 <fputc@plt>
   4e3ac:	ldr	r1, [r4]
   4e3b0:	mov	r0, #0
   4e3b4:	bl	19e4 <fputc@plt>
   4e3b8:	ldr	r3, [r4]
   4e3bc:	mov	r0, sl
   4e3c0:	mov	r1, #4
   4e3c4:	mov	r2, #1
   4e3c8:	bl	18ac <fwrite@plt>
   4e3cc:	ldr	r5, [fp, #-64]	; 0xffffffc0
   4e3d0:	ldr	r0, [r8, #36]	; 0x24
   4e3d4:	ldr	r3, [r4]
   4e3d8:	mov	r1, #1
   4e3dc:	mov	r2, r5
   4e3e0:	bl	18ac <fwrite@plt>
   4e3e4:	asr	r0, r5, #31
   4e3e8:	add	r0, r5, r0, lsr #29
   4e3ec:	bic	r0, r0, #7
   4e3f0:	subs	r0, r5, r0
   4e3f4:	beq	4e414 <WriteType+0x48c>
   4e3f8:	sub	r5, r0, #1
   4e3fc:	ldr	r1, [r4]
   4e400:	mov	r0, #0
   4e404:	bl	19e4 <fputc@plt>
   4e408:	add	r5, r5, #1
   4e40c:	cmp	r5, #7
   4e410:	blt	4e3fc <WriteType+0x474>
   4e414:	mov	r0, r4
   4e418:	mov	r1, r8
   4e41c:	bl	4df88 <WriteType>
   4e420:	ldr	r0, [r4]
   4e424:	bl	1840 <ftell@plt>
   4e428:	cmn	r7, #1
   4e42c:	movne	r5, r0
   4e430:	cmnne	r0, #1
   4e434:	bne	4e448 <WriteType+0x4c0>
   4e438:	ldr	r0, [pc, #2972]	; 4efdc <WriteType+0x1054>
   4e43c:	add	r0, pc, r0
   4e440:	bl	19b4 <Mat_Critical@plt>
   4e444:	b	4e488 <WriteType+0x500>
   4e448:	sub	r0, r5, r7
   4e44c:	mvn	r1, #3
   4e450:	mov	r2, #1
   4e454:	str	r0, [fp, #-56]	; 0xffffffc8
   4e458:	sub	r1, r1, r0
   4e45c:	ldr	r0, [r4]
   4e460:	bl	1a2c <fseek@plt>
   4e464:	ldr	r3, [r4]
   4e468:	sub	r0, fp, #56	; 0x38
   4e46c:	mov	r1, #4
   4e470:	mov	r2, #1
   4e474:	bl	18ac <fwrite@plt>
   4e478:	ldr	r0, [r4]
   4e47c:	mov	r1, r5
   4e480:	mov	r2, #0
   4e484:	bl	1a2c <fseek@plt>
   4e488:	mov	r5, #0
   4e48c:	mov	r7, #1
   4e490:	b	4e4d0 <WriteType+0x548>
   4e494:	ldr	r8, [r9, r6, lsl #2]
   4e498:	mov	r0, #6
   4e49c:	cmp	r4, #0
   4e4a0:	strh	r7, [sp, #68]	; 0x44
   4e4a4:	str	r5, [fp, #-48]	; 0xffffffd0
   4e4a8:	str	r5, [fp, #-60]	; 0xffffffc4
   4e4ac:	str	r0, [fp, #-36]	; 0xffffffdc
   4e4b0:	mov	r0, #5
   4e4b4:	str	r0, [fp, #-40]	; 0xffffffd8
   4e4b8:	mov	r0, #8
   4e4bc:	str	r0, [fp, #-44]	; 0xffffffd4
   4e4c0:	mov	r0, #14
   4e4c4:	cmpne	r8, #0
   4e4c8:	str	r0, [fp, #-52]	; 0xffffffcc
   4e4cc:	bne	4e138 <WriteType+0x1b0>
   4e4d0:	ldr	r0, [sp, #28]
   4e4d4:	add	r6, r6, #1
   4e4d8:	cmp	r6, r0
   4e4dc:	bcc	4e494 <WriteType+0x50c>
   4e4e0:	b	4e130 <WriteType+0x1a8>
   4e4e4:	ldr	r0, [r6, #8]
   4e4e8:	ldr	r5, [r6, #40]	; 0x28
   4e4ec:	ldr	r6, [sp, #28]
   4e4f0:	mov	r1, #0
   4e4f4:	str	r1, [fp, #-36]	; 0xffffffdc
   4e4f8:	cmp	r0, #16
   4e4fc:	str	r0, [fp, #-32]	; 0xffffffe0
   4e500:	bhi	4efc8 <WriteType+0x1040>
   4e504:	add	r1, pc, #4
   4e508:	ldr	r0, [r1, r0, lsl #2]
   4e50c:	add	pc, r1, r0
   4e510:	.word	0x0000096c
   4e514:	.word	0x00000044
   4e518:	.word	0x00000044
   4e51c:	.word	0x00000ab8
   4e520:	.word	0x000009a8
   4e524:	.word	0x00000ab8
   4e528:	.word	0x00000ab8
   4e52c:	.word	0x00000ab8
   4e530:	.word	0x00000ab8
   4e534:	.word	0x00000ab8
   4e538:	.word	0x00000ab8
   4e53c:	.word	0x00000ab8
   4e540:	.word	0x00000ab8
   4e544:	.word	0x00000ab8
   4e548:	.word	0x00000ab8
   4e54c:	.word	0x00000ab8
   4e550:	.word	0x00000a34
   4e554:	mov	r0, #4
   4e558:	mov	r1, #4
   4e55c:	mov	r2, #1
   4e560:	str	r0, [fp, #-32]	; 0xffffffe0
   4e564:	lsl	r0, r6, #1
   4e568:	str	r0, [fp, #-36]	; 0xffffffdc
   4e56c:	sub	r0, fp, #32
   4e570:	ldr	r3, [r4]
   4e574:	bl	18ac <fwrite@plt>
   4e578:	ldr	r3, [r4]
   4e57c:	sub	r0, fp, #36	; 0x24
   4e580:	mov	r1, #4
   4e584:	mov	r2, #1
   4e588:	bl	18ac <fwrite@plt>
   4e58c:	cmp	r5, #0
   4e590:	beq	4efc8 <WriteType+0x1040>
   4e594:	cmp	r6, #1
   4e598:	blt	4e5c4 <WriteType+0x63c>
   4e59c:	sub	r7, fp, #40	; 0x28
   4e5a0:	ldrb	r0, [r5], #1
   4e5a4:	mov	r1, #2
   4e5a8:	mov	r2, #1
   4e5ac:	strh	r0, [fp, #-40]	; 0xffffffd8
   4e5b0:	mov	r0, r7
   4e5b4:	ldr	r3, [r4]
   4e5b8:	bl	18ac <fwrite@plt>
   4e5bc:	subs	r6, r6, #1
   4e5c0:	bne	4e5a0 <WriteType+0x618>
   4e5c4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   4e5c8:	asr	r1, r0, #31
   4e5cc:	add	r1, r0, r1, lsr #29
   4e5d0:	bic	r1, r1, #7
   4e5d4:	subs	r0, r0, r1
   4e5d8:	beq	4efc8 <WriteType+0x1040>
   4e5dc:	sub	r5, r0, #1
   4e5e0:	ldr	r1, [r4]
   4e5e4:	mov	r0, #0
   4e5e8:	bl	19e4 <fputc@plt>
   4e5ec:	add	r5, r5, #1
   4e5f0:	cmp	r5, #7
   4e5f4:	blt	4e5e0 <WriteType+0x658>
   4e5f8:	b	4efc8 <WriteType+0x1040>
   4e5fc:	ldr	r0, [r6, #52]	; 0x34
   4e600:	ldr	r9, [r0, #4]
   4e604:	cmp	r9, #0
   4e608:	beq	4eda4 <WriteType+0xe1c>
   4e60c:	ldr	sl, [r6, #40]	; 0x28
   4e610:	ldr	r8, [r0, #8]
   4e614:	mov	r5, #0
   4e618:	mov	r7, #0
   4e61c:	str	r6, [sp, #4]
   4e620:	ldr	r0, [r8, r7, lsl #2]
   4e624:	mov	r6, r5
   4e628:	bl	1954 <strlen@plt>
   4e62c:	cmp	r0, r5
   4e630:	add	r7, r7, #1
   4e634:	movhi	r5, r0
   4e638:	cmp	r9, r7
   4e63c:	bne	4e620 <WriteType+0x698>
   4e640:	cmp	r0, r6
   4e644:	str	sl, [sp, #8]
   4e648:	movhi	r6, r0
   4e64c:	add	r0, r6, #1
   4e650:	mul	r0, r9, r0
   4e654:	add	r1, r0, r9
   4e658:	tst	r0, #7
   4e65c:	add	r5, r5, #1
   4e660:	mov	r0, r1
   4e664:	bne	4e654 <WriteType+0x6cc>
   4e668:	movw	r0, #5
   4e66c:	str	r5, [sp, #24]
   4e670:	mov	r1, #4
   4e674:	mov	r2, #1
   4e678:	movt	r0, #4
   4e67c:	str	r0, [sp, #16]
   4e680:	add	r0, sp, #16
   4e684:	ldr	r3, [r4]
   4e688:	bl	18ac <fwrite@plt>
   4e68c:	ldr	r3, [r4]
   4e690:	add	r0, sp, #24
   4e694:	mov	r1, #4
   4e698:	mov	r2, #1
   4e69c:	bl	18ac <fwrite@plt>
   4e6a0:	ldr	r3, [r4]
   4e6a4:	add	r0, sp, #38	; 0x26
   4e6a8:	mov	r1, #2
   4e6ac:	mov	r2, #1
   4e6b0:	bl	18ac <fwrite@plt>
   4e6b4:	ldr	r1, [r4]
   4e6b8:	mov	r0, #0
   4e6bc:	mov	r8, #0
   4e6c0:	bl	19e4 <fputc@plt>
   4e6c4:	ldr	r1, [r4]
   4e6c8:	mov	r0, #0
   4e6cc:	bl	19e4 <fputc@plt>
   4e6d0:	ldr	r5, [sp, #24]
   4e6d4:	mov	r1, #4
   4e6d8:	mov	r2, #1
   4e6dc:	mul	r0, r5, r9
   4e6e0:	str	r0, [sp, #32]
   4e6e4:	add	r0, sp, #32
   4e6e8:	ldr	r3, [r4]
   4e6ec:	bl	18ac <fwrite@plt>
   4e6f0:	mov	r0, r5
   4e6f4:	mov	r1, #1
   4e6f8:	str	r5, [sp, #12]
   4e6fc:	bl	1798 <calloc@plt>
   4e700:	ldr	r6, [sp, #4]
   4e704:	mov	sl, r0
   4e708:	ldr	r0, [r6, #52]	; 0x34
   4e70c:	ldr	r0, [r0, #8]
   4e710:	ldr	r5, [r0, r8, lsl #2]
   4e714:	mov	r0, r5
   4e718:	bl	1954 <strlen@plt>
   4e71c:	ldr	r3, [r4]
   4e720:	mov	r7, r0
   4e724:	mov	r0, r5
   4e728:	mov	r1, #1
   4e72c:	mov	r2, r7
   4e730:	bl	18ac <fwrite@plt>
   4e734:	ldr	r0, [sp, #12]
   4e738:	ldr	r3, [r4]
   4e73c:	mov	r1, #1
   4e740:	sub	r2, r0, r7
   4e744:	mov	r0, sl
   4e748:	bl	18ac <fwrite@plt>
   4e74c:	add	r8, r8, #1
   4e750:	cmp	r9, r8
   4e754:	bne	4e708 <WriteType+0x780>
   4e758:	mov	r0, sl
   4e75c:	bl	1804 <free@plt>
   4e760:	ldr	r1, [sp, #28]
   4e764:	add	r0, sp, #20
   4e768:	mov	r2, r9
   4e76c:	bl	53884 <SafeMul>
   4e770:	ldr	r0, [sp, #20]
   4e774:	ldr	r7, [sp, #8]
   4e778:	cmp	r0, #0
   4e77c:	beq	4e130 <WriteType+0x1a8>
   4e780:	mov	r8, #0
   4e784:	mov	r6, #1
   4e788:	mov	r0, #6
   4e78c:	mov	r1, #5
   4e790:	mov	r2, #8
   4e794:	mov	r3, #14
   4e798:	mov	r9, #0
   4e79c:	ldr	r5, [r7, r9, lsl #2]
   4e7a0:	str	r6, [sp, #64]	; 0x40
   4e7a4:	str	r0, [sp, #60]	; 0x3c
   4e7a8:	str	r1, [sp, #56]	; 0x38
   4e7ac:	str	r2, [sp, #52]	; 0x34
   4e7b0:	str	r8, [sp, #48]	; 0x30
   4e7b4:	str	r3, [sp, #44]	; 0x2c
   4e7b8:	str	r8, [sp, #40]	; 0x28
   4e7bc:	cmp	r5, #0
   4e7c0:	beq	4e9b0 <WriteType+0xa28>
   4e7c4:	ldr	r3, [r4]
   4e7c8:	add	r0, sp, #44	; 0x2c
   4e7cc:	mov	r1, #4
   4e7d0:	mov	r2, #1
   4e7d4:	bl	18ac <fwrite@plt>
   4e7d8:	ldr	r3, [r4]
   4e7dc:	add	r0, sp, #48	; 0x30
   4e7e0:	mov	r1, #4
   4e7e4:	mov	r2, #1
   4e7e8:	bl	18ac <fwrite@plt>
   4e7ec:	ldr	r0, [r5, #16]
   4e7f0:	cmp	r0, #0
   4e7f4:	beq	4ec44 <WriteType+0xcbc>
   4e7f8:	ldr	r0, [r4]
   4e7fc:	bl	1840 <ftell@plt>
   4e800:	mov	sl, r0
   4e804:	ldr	r0, [r5, #16]
   4e808:	sub	r6, fp, #32
   4e80c:	sub	r7, fp, #40	; 0x28
   4e810:	uxtb	r1, r0
   4e814:	str	r1, [fp, #-32]	; 0xffffffe0
   4e818:	ldr	r2, [r5, #20]
   4e81c:	cmp	r2, #0
   4e820:	orrne	r1, r1, #2048	; 0x800
   4e824:	strne	r1, [fp, #-32]	; 0xffffffe0
   4e828:	ldr	r2, [r5, #24]
   4e82c:	cmp	r2, #0
   4e830:	orrne	r1, r1, #1024	; 0x400
   4e834:	strne	r1, [fp, #-32]	; 0xffffffe0
   4e838:	ldr	r2, [r5, #28]
   4e83c:	cmp	r2, #0
   4e840:	orrne	r1, r1, #512	; 0x200
   4e844:	strne	r1, [fp, #-32]	; 0xffffffe0
   4e848:	cmp	r0, #5
   4e84c:	ldreq	r0, [r5, #40]	; 0x28
   4e850:	ldreq	r0, [r0]
   4e854:	streq	r0, [sp, #40]	; 0x28
   4e858:	ldr	r0, [r4, #20]
   4e85c:	cmp	r0, #0
   4e860:	beq	4e870 <WriteType+0x8e8>
   4e864:	mov	r0, r6
   4e868:	bl	1bf0 <Mat_int32Swap>
   4e86c:	str	r0, [fp, #-32]	; 0xffffffe0
   4e870:	ldr	r3, [r4]
   4e874:	add	r0, sp, #60	; 0x3c
   4e878:	mov	r1, #4
   4e87c:	mov	r2, #1
   4e880:	bl	18ac <fwrite@plt>
   4e884:	ldr	r3, [r4]
   4e888:	add	r0, sp, #52	; 0x34
   4e88c:	mov	r1, #4
   4e890:	mov	r2, #1
   4e894:	bl	18ac <fwrite@plt>
   4e898:	ldr	r3, [r4]
   4e89c:	mov	r0, r6
   4e8a0:	mov	r1, #4
   4e8a4:	mov	r2, #1
   4e8a8:	bl	18ac <fwrite@plt>
   4e8ac:	ldr	r3, [r4]
   4e8b0:	add	r0, sp, #40	; 0x28
   4e8b4:	mov	r1, #4
   4e8b8:	mov	r2, #1
   4e8bc:	bl	18ac <fwrite@plt>
   4e8c0:	ldr	r0, [r5, #4]
   4e8c4:	mov	r1, #4
   4e8c8:	mov	r2, #1
   4e8cc:	lsl	r0, r0, #2
   4e8d0:	str	r0, [fp, #-36]	; 0xffffffdc
   4e8d4:	add	r0, sp, #56	; 0x38
   4e8d8:	ldr	r3, [r4]
   4e8dc:	bl	18ac <fwrite@plt>
   4e8e0:	ldr	r3, [r4]
   4e8e4:	sub	r0, fp, #36	; 0x24
   4e8e8:	mov	r1, #4
   4e8ec:	mov	r2, #1
   4e8f0:	bl	18ac <fwrite@plt>
   4e8f4:	ldr	r0, [r5, #4]
   4e8f8:	cmp	r0, #1
   4e8fc:	blt	4e934 <WriteType+0x9ac>
   4e900:	mov	r6, #0
   4e904:	ldr	r0, [r5, #32]
   4e908:	mov	r1, #4
   4e90c:	mov	r2, #1
   4e910:	ldr	r0, [r0, r6, lsl #2]
   4e914:	str	r0, [fp, #-40]	; 0xffffffd8
   4e918:	mov	r0, r7
   4e91c:	ldr	r3, [r4]
   4e920:	bl	18ac <fwrite@plt>
   4e924:	ldr	r0, [r5, #4]
   4e928:	add	r6, r6, #1
   4e92c:	cmp	r6, r0
   4e930:	blt	4e904 <WriteType+0x97c>
   4e934:	tst	r0, #1
   4e938:	beq	4e950 <WriteType+0x9c8>
   4e93c:	ldr	r3, [r4]
   4e940:	add	r0, sp, #48	; 0x30
   4e944:	mov	r1, #4
   4e948:	mov	r2, #1
   4e94c:	bl	18ac <fwrite@plt>
   4e950:	ldr	r3, [r4]
   4e954:	add	r0, sp, #64	; 0x40
   4e958:	mov	r1, #4
   4e95c:	mov	r2, #1
   4e960:	bl	18ac <fwrite@plt>
   4e964:	ldr	r3, [r4]
   4e968:	add	r0, sp, #48	; 0x30
   4e96c:	mov	r1, #4
   4e970:	mov	r2, #1
   4e974:	bl	18ac <fwrite@plt>
   4e978:	mov	r0, r4
   4e97c:	mov	r1, r5
   4e980:	bl	4df88 <WriteType>
   4e984:	ldr	r0, [r4]
   4e988:	bl	1840 <ftell@plt>
   4e98c:	cmn	sl, #1
   4e990:	mov	r6, #1
   4e994:	movne	r5, r0
   4e998:	cmnne	r0, #1
   4e99c:	bne	4ebb8 <WriteType+0xc30>
   4e9a0:	ldr	r0, [pc, #1596]	; 4efe4 <WriteType+0x105c>
   4e9a4:	add	r0, pc, r0
   4e9a8:	bl	19b4 <Mat_Critical@plt>
   4e9ac:	b	4ebf8 <WriteType+0xc70>
   4e9b0:	sub	ip, fp, #52	; 0x34
   4e9b4:	stm	ip, {r0, r3, r6}
   4e9b8:	mov	r0, #0
   4e9bc:	str	r1, [fp, #-56]	; 0xffffffc8
   4e9c0:	str	r2, [fp, #-60]	; 0xffffffc4
   4e9c4:	mov	r1, #4
   4e9c8:	mov	r2, #1
   4e9cc:	mov	r6, #6
   4e9d0:	str	r0, [fp, #-64]	; 0xffffffc0
   4e9d4:	sub	r0, fp, #48	; 0x30
   4e9d8:	ldr	r3, [r4]
   4e9dc:	bl	18ac <fwrite@plt>
   4e9e0:	ldr	r3, [r4]
   4e9e4:	sub	r0, fp, #64	; 0x40
   4e9e8:	mov	r1, #4
   4e9ec:	mov	r2, #1
   4e9f0:	bl	18ac <fwrite@plt>
   4e9f4:	ldr	r0, [r4]
   4e9f8:	bl	1840 <ftell@plt>
   4e9fc:	str	r6, [fp, #-40]	; 0xffffffd8
   4ea00:	mov	r5, r0
   4ea04:	sub	r6, fp, #40	; 0x28
   4ea08:	ldr	r0, [r4, #20]
   4ea0c:	cmp	r0, #0
   4ea10:	beq	4ea20 <WriteType+0xa98>
   4ea14:	mov	r0, r6
   4ea18:	bl	1bf0 <Mat_int32Swap>
   4ea1c:	str	r0, [fp, #-40]	; 0xffffffd8
   4ea20:	ldr	r3, [r4]
   4ea24:	sub	r0, fp, #52	; 0x34
   4ea28:	mov	r1, #4
   4ea2c:	mov	r2, #1
   4ea30:	bl	18ac <fwrite@plt>
   4ea34:	ldr	r3, [r4]
   4ea38:	sub	r0, fp, #60	; 0x3c
   4ea3c:	mov	r1, #4
   4ea40:	mov	r2, #1
   4ea44:	bl	18ac <fwrite@plt>
   4ea48:	ldr	r3, [r4]
   4ea4c:	mov	r0, r6
   4ea50:	mov	r1, #4
   4ea54:	mov	r2, #1
   4ea58:	bl	18ac <fwrite@plt>
   4ea5c:	ldr	r3, [r4]
   4ea60:	sub	r8, fp, #64	; 0x40
   4ea64:	mov	r1, #4
   4ea68:	mov	r2, #1
   4ea6c:	mov	r0, r8
   4ea70:	bl	18ac <fwrite@plt>
   4ea74:	mov	r0, #8
   4ea78:	mov	r1, #4
   4ea7c:	mov	r2, #1
   4ea80:	str	r0, [sp, #68]	; 0x44
   4ea84:	sub	r0, fp, #56	; 0x38
   4ea88:	ldr	r3, [r4]
   4ea8c:	bl	18ac <fwrite@plt>
   4ea90:	ldr	r3, [r4]
   4ea94:	add	r0, sp, #68	; 0x44
   4ea98:	mov	r1, #4
   4ea9c:	mov	r2, #1
   4eaa0:	bl	18ac <fwrite@plt>
   4eaa4:	mov	r6, #0
   4eaa8:	sub	sl, fp, #32
   4eaac:	mov	r1, #4
   4eab0:	mov	r2, #1
   4eab4:	str	r6, [fp, #-32]	; 0xffffffe0
   4eab8:	mov	r0, sl
   4eabc:	ldr	r3, [r4]
   4eac0:	bl	18ac <fwrite@plt>
   4eac4:	str	r6, [fp, #-32]	; 0xffffffe0
   4eac8:	mov	r0, sl
   4eacc:	mov	r1, #4
   4ead0:	mov	r2, #1
   4ead4:	ldr	r3, [r4]
   4ead8:	bl	18ac <fwrite@plt>
   4eadc:	ldr	r3, [r4]
   4eae0:	sub	r0, fp, #44	; 0x2c
   4eae4:	mov	r1, #4
   4eae8:	mov	r2, #1
   4eaec:	bl	18ac <fwrite@plt>
   4eaf0:	ldr	r3, [r4]
   4eaf4:	mov	r0, r8
   4eaf8:	mov	r1, #4
   4eafc:	mov	r2, #1
   4eb00:	bl	18ac <fwrite@plt>
   4eb04:	mov	r0, #9
   4eb08:	str	r6, [fp, #-36]	; 0xffffffdc
   4eb0c:	mov	r8, #0
   4eb10:	str	r0, [fp, #-32]	; 0xffffffe0
   4eb14:	ldr	r0, [r4]
   4eb18:	cmp	r0, #0
   4eb1c:	beq	4eb58 <WriteType+0xbd0>
   4eb20:	mov	r0, #9
   4eb24:	bl	1924 <Mat_SizeOf@plt>
   4eb28:	str	r8, [fp, #-36]	; 0xffffffdc
   4eb2c:	mov	r0, sl
   4eb30:	mov	r1, #4
   4eb34:	mov	r2, #1
   4eb38:	ldr	r3, [r4]
   4eb3c:	bl	18ac <fwrite@plt>
   4eb40:	ldr	r3, [r4]
   4eb44:	sub	r0, fp, #36	; 0x24
   4eb48:	mov	r1, #4
   4eb4c:	mov	r2, #1
   4eb50:	bl	18ac <fwrite@plt>
   4eb54:	ldr	r6, [fp, #-36]	; 0xffffffdc
   4eb58:	asr	r0, r6, #31
   4eb5c:	str	r6, [sp, #68]	; 0x44
   4eb60:	add	r0, r6, r0, lsr #29
   4eb64:	bic	r0, r0, #7
   4eb68:	subs	r0, r6, r0
   4eb6c:	beq	4eb8c <WriteType+0xc04>
   4eb70:	sub	r6, r0, #1
   4eb74:	ldr	r1, [r4]
   4eb78:	mov	r0, #0
   4eb7c:	bl	19e4 <fputc@plt>
   4eb80:	add	r6, r6, #1
   4eb84:	cmp	r6, #7
   4eb88:	blt	4eb74 <WriteType+0xbec>
   4eb8c:	ldr	r0, [r4]
   4eb90:	bl	1840 <ftell@plt>
   4eb94:	ldr	r7, [sp, #8]
   4eb98:	cmn	r5, #1
   4eb9c:	movne	r6, r0
   4eba0:	cmnne	r0, #1
   4eba4:	bne	4ec00 <WriteType+0xc78>
   4eba8:	ldr	r0, [pc, #1072]	; 4efe0 <WriteType+0x1058>
   4ebac:	add	r0, pc, r0
   4ebb0:	bl	19b4 <Mat_Critical@plt>
   4ebb4:	b	4ec40 <WriteType+0xcb8>
   4ebb8:	sub	r0, r5, sl
   4ebbc:	mvn	r1, #3
   4ebc0:	mov	r2, #1
   4ebc4:	str	r0, [fp, #-36]	; 0xffffffdc
   4ebc8:	sub	r1, r1, r0
   4ebcc:	ldr	r0, [r4]
   4ebd0:	bl	1a2c <fseek@plt>
   4ebd4:	ldr	r3, [r4]
   4ebd8:	sub	r0, fp, #36	; 0x24
   4ebdc:	mov	r1, #4
   4ebe0:	mov	r2, #1
   4ebe4:	bl	18ac <fwrite@plt>
   4ebe8:	ldr	r0, [r4]
   4ebec:	mov	r1, r5
   4ebf0:	mov	r2, #0
   4ebf4:	bl	1a2c <fseek@plt>
   4ebf8:	ldr	r7, [sp, #8]
   4ebfc:	b	4ec44 <WriteType+0xcbc>
   4ec00:	sub	r0, r6, r5
   4ec04:	mvn	r1, #3
   4ec08:	mov	r2, #1
   4ec0c:	str	r0, [sp, #68]	; 0x44
   4ec10:	sub	r1, r1, r0
   4ec14:	ldr	r0, [r4]
   4ec18:	bl	1a2c <fseek@plt>
   4ec1c:	ldr	r3, [r4]
   4ec20:	add	r0, sp, #68	; 0x44
   4ec24:	mov	r1, #4
   4ec28:	mov	r2, #1
   4ec2c:	bl	18ac <fwrite@plt>
   4ec30:	ldr	r0, [r4]
   4ec34:	mov	r1, r6
   4ec38:	mov	r2, #0
   4ec3c:	bl	1a2c <fseek@plt>
   4ec40:	mov	r6, #1
   4ec44:	ldr	r0, [sp, #20]
   4ec48:	add	r9, r9, #1
   4ec4c:	mov	r1, #5
   4ec50:	mov	r2, #8
   4ec54:	mov	r3, #14
   4ec58:	cmp	r9, r0
   4ec5c:	mov	r0, #6
   4ec60:	bcc	4e79c <WriteType+0x814>
   4ec64:	b	4e130 <WriteType+0x1a8>
   4ec68:	ldr	r5, [r6, #40]	; 0x28
   4ec6c:	mov	r0, r4
   4ec70:	mov	r3, #5
   4ec74:	mov	r8, r6
   4ec78:	ldmib	r5, {r1, r2}
   4ec7c:	bl	51b20 <WriteData>
   4ec80:	asr	r1, r0, #31
   4ec84:	str	r0, [sp, #32]
   4ec88:	add	r1, r0, r1, lsr #29
   4ec8c:	bic	r1, r1, #7
   4ec90:	subs	r0, r0, r1
   4ec94:	beq	4ecb4 <WriteType+0xd2c>
   4ec98:	sub	r6, r0, #1
   4ec9c:	ldr	r1, [r4]
   4eca0:	mov	r0, #0
   4eca4:	bl	19e4 <fputc@plt>
   4eca8:	add	r6, r6, #1
   4ecac:	cmp	r6, #7
   4ecb0:	blt	4ec9c <WriteType+0xd14>
   4ecb4:	ldr	r1, [r5, #12]
   4ecb8:	ldr	r2, [r5, #16]
   4ecbc:	mov	r0, r4
   4ecc0:	mov	r3, #5
   4ecc4:	bl	51b20 <WriteData>
   4ecc8:	asr	r1, r0, #31
   4eccc:	str	r0, [sp, #32]
   4ecd0:	add	r1, r0, r1, lsr #29
   4ecd4:	bic	r1, r1, #7
   4ecd8:	subs	r0, r0, r1
   4ecdc:	beq	4ecfc <WriteType+0xd74>
   4ece0:	sub	r6, r0, #1
   4ece4:	ldr	r1, [r4]
   4ece8:	mov	r0, #0
   4ecec:	bl	19e4 <fputc@plt>
   4ecf0:	add	r6, r6, #1
   4ecf4:	cmp	r6, #7
   4ecf8:	blt	4ece4 <WriteType+0xd5c>
   4ecfc:	ldr	r0, [r8, #20]
   4ed00:	mov	r1, r8
   4ed04:	cmp	r0, #0
   4ed08:	beq	4ee30 <WriteType+0xea8>
   4ed0c:	ldr	r6, [r5, #24]
   4ed10:	ldr	r3, [r1, #8]
   4ed14:	ldr	r2, [r5, #20]
   4ed18:	mov	r0, r4
   4ed1c:	ldr	r1, [r6]
   4ed20:	bl	51b20 <WriteData>
   4ed24:	asr	r1, r0, #31
   4ed28:	str	r0, [sp, #32]
   4ed2c:	add	r1, r0, r1, lsr #29
   4ed30:	bic	r1, r1, #7
   4ed34:	subs	r0, r0, r1
   4ed38:	beq	4ed58 <WriteType+0xdd0>
   4ed3c:	sub	r7, r0, #1
   4ed40:	ldr	r1, [r4]
   4ed44:	mov	r0, #0
   4ed48:	bl	19e4 <fputc@plt>
   4ed4c:	add	r7, r7, #1
   4ed50:	cmp	r7, #7
   4ed54:	blt	4ed40 <WriteType+0xdb8>
   4ed58:	ldr	r3, [r8, #8]
   4ed5c:	ldr	r2, [r5, #20]
   4ed60:	ldr	r1, [r6, #4]
   4ed64:	mov	r0, r4
   4ed68:	bl	51b20 <WriteData>
   4ed6c:	asr	r1, r0, #31
   4ed70:	str	r0, [sp, #32]
   4ed74:	add	r1, r0, r1, lsr #29
   4ed78:	bic	r1, r1, #7
   4ed7c:	subs	r0, r0, r1
   4ed80:	beq	4e130 <WriteType+0x1a8>
   4ed84:	sub	r5, r0, #1
   4ed88:	ldr	r1, [r4]
   4ed8c:	mov	r0, #0
   4ed90:	bl	19e4 <fputc@plt>
   4ed94:	add	r5, r5, #1
   4ed98:	cmp	r5, #7
   4ed9c:	blt	4ed88 <WriteType+0xe00>
   4eda0:	b	4e130 <WriteType+0x1a8>
   4eda4:	movw	r0, #5
   4eda8:	mov	r1, #4
   4edac:	mov	r2, #1
   4edb0:	mov	r5, #1
   4edb4:	movt	r0, #4
   4edb8:	str	r0, [sp, #16]
   4edbc:	add	r0, sp, #16
   4edc0:	ldr	r3, [r4]
   4edc4:	bl	18ac <fwrite@plt>
   4edc8:	str	r5, [sp, #24]
   4edcc:	add	r0, sp, #24
   4edd0:	mov	r1, #4
   4edd4:	mov	r2, #1
   4edd8:	ldr	r3, [r4]
   4eddc:	bl	18ac <fwrite@plt>
   4ede0:	ldr	r3, [r4]
   4ede4:	add	r0, sp, #38	; 0x26
   4ede8:	mov	r1, #2
   4edec:	mov	r2, #1
   4edf0:	bl	18ac <fwrite@plt>
   4edf4:	ldr	r1, [r4]
   4edf8:	mov	r0, #0
   4edfc:	mov	r5, #0
   4ee00:	bl	19e4 <fputc@plt>
   4ee04:	ldr	r1, [r4]
   4ee08:	mov	r0, #0
   4ee0c:	bl	19e4 <fputc@plt>
   4ee10:	str	r5, [sp, #32]
   4ee14:	add	r0, sp, #32
   4ee18:	mov	r1, #4
   4ee1c:	mov	r2, #1
   4ee20:	ldr	r3, [r4]
   4ee24:	bl	18ac <fwrite@plt>
   4ee28:	sub	sp, fp, #28
   4ee2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4ee30:	ldr	r3, [r1, #8]
   4ee34:	ldr	r2, [r5, #20]
   4ee38:	ldr	r1, [r5, #24]
   4ee3c:	mov	r0, r4
   4ee40:	bl	51b20 <WriteData>
   4ee44:	asr	r1, r0, #31
   4ee48:	str	r0, [sp, #32]
   4ee4c:	add	r1, r0, r1, lsr #29
   4ee50:	bic	r1, r1, #7
   4ee54:	subs	r0, r0, r1
   4ee58:	beq	4e130 <WriteType+0x1a8>
   4ee5c:	sub	r5, r0, #1
   4ee60:	ldr	r1, [r4]
   4ee64:	mov	r0, #0
   4ee68:	bl	19e4 <fputc@plt>
   4ee6c:	add	r5, r5, #1
   4ee70:	cmp	r5, #7
   4ee74:	blt	4ee60 <WriteType+0xed8>
   4ee78:	b	4e130 <WriteType+0x1a8>
   4ee7c:	mov	r0, #4
   4ee80:	mov	r1, #4
   4ee84:	mov	r2, #1
   4ee88:	str	r0, [fp, #-32]	; 0xffffffe0
   4ee8c:	lsl	r0, r6, #1
   4ee90:	str	r0, [fp, #-36]	; 0xffffffdc
   4ee94:	sub	r0, fp, #32
   4ee98:	ldr	r3, [r4]
   4ee9c:	bl	18ac <fwrite@plt>
   4eea0:	ldr	r3, [r4]
   4eea4:	sub	r0, fp, #36	; 0x24
   4eea8:	mov	r1, #4
   4eeac:	mov	r2, #1
   4eeb0:	bl	18ac <fwrite@plt>
   4eeb4:	b	4efc8 <WriteType+0x1040>
   4eeb8:	lsl	r0, r6, #1
   4eebc:	mov	r1, #4
   4eec0:	mov	r2, #1
   4eec4:	str	r0, [fp, #-36]	; 0xffffffdc
   4eec8:	sub	r0, fp, #32
   4eecc:	ldr	r3, [r4]
   4eed0:	bl	18ac <fwrite@plt>
   4eed4:	ldr	r3, [r4]
   4eed8:	sub	r0, fp, #36	; 0x24
   4eedc:	mov	r1, #4
   4eee0:	mov	r2, #1
   4eee4:	bl	18ac <fwrite@plt>
   4eee8:	cmp	r5, #0
   4eeec:	beq	4ef0c <WriteType+0xf84>
   4eef0:	cmp	r6, #1
   4eef4:	blt	4ef0c <WriteType+0xf84>
   4eef8:	ldr	r3, [r4]
   4eefc:	mov	r0, r5
   4ef00:	mov	r1, #2
   4ef04:	mov	r2, r6
   4ef08:	bl	18ac <fwrite@plt>
   4ef0c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   4ef10:	asr	r1, r0, #31
   4ef14:	add	r1, r0, r1, lsr #29
   4ef18:	bic	r1, r1, #7
   4ef1c:	subs	r0, r0, r1
   4ef20:	beq	4efc8 <WriteType+0x1040>
   4ef24:	sub	r5, r0, #1
   4ef28:	ldr	r1, [r4]
   4ef2c:	mov	r0, #0
   4ef30:	bl	19e4 <fputc@plt>
   4ef34:	add	r5, r5, #1
   4ef38:	cmp	r5, #7
   4ef3c:	blt	4ef28 <WriteType+0xfa0>
   4ef40:	b	4efc8 <WriteType+0x1040>
   4ef44:	str	r6, [fp, #-36]	; 0xffffffdc
   4ef48:	sub	r0, fp, #32
   4ef4c:	mov	r1, #4
   4ef50:	mov	r2, #1
   4ef54:	ldr	r3, [r4]
   4ef58:	bl	18ac <fwrite@plt>
   4ef5c:	ldr	r3, [r4]
   4ef60:	sub	r0, fp, #36	; 0x24
   4ef64:	mov	r1, #4
   4ef68:	mov	r2, #1
   4ef6c:	bl	18ac <fwrite@plt>
   4ef70:	ldr	r6, [fp, #-36]	; 0xffffffdc
   4ef74:	cmp	r5, #0
   4ef78:	beq	4ef98 <WriteType+0x1010>
   4ef7c:	cmp	r6, #1
   4ef80:	blt	4ef98 <WriteType+0x1010>
   4ef84:	ldr	r3, [r4]
   4ef88:	mov	r0, r5
   4ef8c:	mov	r1, #1
   4ef90:	mov	r2, r6
   4ef94:	bl	18ac <fwrite@plt>
   4ef98:	asr	r0, r6, #31
   4ef9c:	add	r0, r6, r0, lsr #29
   4efa0:	bic	r0, r0, #7
   4efa4:	subs	r0, r6, r0
   4efa8:	beq	4efc8 <WriteType+0x1040>
   4efac:	sub	r5, r0, #1
   4efb0:	ldr	r1, [r4]
   4efb4:	mov	r0, #0
   4efb8:	bl	19e4 <fputc@plt>
   4efbc:	add	r5, r5, #1
   4efc0:	cmp	r5, #7
   4efc4:	blt	4efb0 <WriteType+0x1028>
   4efc8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   4efcc:	str	r0, [sp, #32]
   4efd0:	sub	sp, fp, #28
   4efd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4efd8:	.word	0x0000ae44
   4efdc:	.word	0x0000a5ac
   4efe0:	.word	0x00009e3c
   4efe4:	.word	0x0000a044
   4efe8:	.word	0xe320f000
   4efec:	.word	0xe320f000

0004eff0 <WriteCompressedType>:
   4eff0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4eff4:	add	fp, sp, #28
   4eff8:	sub	sp, sp, #52	; 0x34
   4effc:	sub	sp, sp, #11264	; 0x2c00
   4f000:	add	r5, sp, #40	; 0x28
   4f004:	mov	r4, r2
   4f008:	mov	r7, r1
   4f00c:	mov	sl, r0
   4f010:	mov	r1, #0
   4f014:	mov	r2, #2048	; 0x800
   4f018:	mov	r6, #0
   4f01c:	mov	r0, r5
   4f020:	bl	1990 <memset@plt>
   4f024:	mov	r0, #1
   4f028:	str	r0, [sp, #36]	; 0x24
   4f02c:	ldr	r0, [r7, #16]
   4f030:	cmp	r0, #0
   4f034:	beq	4f9d8 <WriteCompressedType+0x9e8>
   4f038:	add	r1, sp, #36	; 0x24
   4f03c:	mov	r0, r7
   4f040:	bl	53824 <SafeMulDims>
   4f044:	ldr	r0, [r7, #16]
   4f048:	sub	r1, r0, #6
   4f04c:	cmp	r1, #10
   4f050:	bcs	4f0b8 <WriteCompressedType+0xc8>
   4f054:	ldr	r0, [r7, #20]
   4f058:	ldr	r2, [r7, #40]	; 0x28
   4f05c:	cmp	r0, #0
   4f060:	beq	4f204 <WriteCompressedType+0x214>
   4f064:	ldr	r5, [pc, #2564]	; 4fa70 <WriteCompressedType+0xa80>
   4f068:	cmp	r2, #0
   4f06c:	ldr	r0, [r7, #8]
   4f070:	ldr	r3, [sp, #36]	; 0x24
   4f074:	mov	r1, r4
   4f078:	add	r5, pc, r5
   4f07c:	movne	r5, r2
   4f080:	ldr	r2, [r5]
   4f084:	str	r0, [sp]
   4f088:	mov	r0, sl
   4f08c:	bl	51e78 <WriteCompressedData>
   4f090:	mov	r6, r0
   4f094:	ldr	r0, [r7, #8]
   4f098:	ldr	r2, [r5, #4]
   4f09c:	ldr	r3, [sp, #36]	; 0x24
   4f0a0:	mov	r1, r4
   4f0a4:	str	r0, [sp]
   4f0a8:	mov	r0, sl
   4f0ac:	bl	51e78 <WriteCompressedData>
   4f0b0:	add	r6, r0, r6
   4f0b4:	b	4f9d8 <WriteCompressedType+0x9e8>
   4f0b8:	sub	r0, r0, #1
   4f0bc:	cmp	r0, #4
   4f0c0:	bhi	4f9d8 <WriteCompressedType+0x9e8>
   4f0c4:	add	r1, pc, #4
   4f0c8:	ldr	r0, [r1, r0, lsl #2]
   4f0cc:	add	pc, r1, r0
   4f0d0:	.word	0x00000014
   4f0d4:	.word	0x00000154
   4f0d8:	.word	0x00000908
   4f0dc:	.word	0x00000640
   4f0e0:	.word	0x000007d4
   4f0e4:	ldr	r0, [r7]
   4f0e8:	cmp	r0, #0
   4f0ec:	beq	4f9d8 <WriteCompressedType+0x9e8>
   4f0f0:	ldr	r1, [r7, #40]	; 0x28
   4f0f4:	cmp	r1, #0
   4f0f8:	str	r1, [sp, #28]
   4f0fc:	ldrne	r1, [r7, #12]
   4f100:	cmpne	r1, #0
   4f104:	beq	4f9d8 <WriteCompressedType+0x9e8>
   4f108:	udiv	r9, r0, r1
   4f10c:	cmp	r1, r0
   4f110:	str	r9, [sp, #36]	; 0x24
   4f114:	bhi	4f9d8 <WriteCompressedType+0x9e8>
   4f118:	mov	r5, #0
   4f11c:	mov	r8, #2048	; 0x800
   4f120:	sub	r7, fp, #2080	; 0x820
   4f124:	ldr	r0, [sp, #28]
   4f128:	sub	lr, fp, #4096	; 0x1000
   4f12c:	mov	r1, #0
   4f130:	mov	r2, #2048	; 0x800
   4f134:	ldr	r6, [r0, r5, lsl #2]
   4f138:	sub	r0, lr, #32
   4f13c:	bl	1990 <memset@plt>
   4f140:	cmp	r4, #0
   4f144:	beq	4f1f0 <WriteCompressedType+0x200>
   4f148:	cmp	sl, #0
   4f14c:	cmpne	r6, #0
   4f150:	beq	4f1f0 <WriteCompressedType+0x200>
   4f154:	add	lr, sp, #5120	; 0x1400
   4f158:	mov	r1, #14
   4f15c:	add	r0, lr, #40	; 0x28
   4f160:	str	r1, [r0, #2056]	; 0x808
   4f164:	ldr	r0, [r6, #16]
   4f168:	cmp	r0, #0
   4f16c:	beq	4f180 <WriteCompressedType+0x190>
   4f170:	mov	r0, r6
   4f174:	bl	51bc4 <GetTypeBufSize>
   4f178:	add	r0, r0, #24
   4f17c:	b	4f184 <WriteCompressedType+0x194>
   4f180:	mov	r0, #0
   4f184:	add	lr, sp, #5120	; 0x1400
   4f188:	add	r1, lr, #40	; 0x28
   4f18c:	sub	lr, fp, #4096	; 0x1000
   4f190:	str	r0, [r1, #2060]	; 0x80c
   4f194:	sub	r0, lr, #32
   4f198:	str	r0, [r4]
   4f19c:	mov	r0, #8
   4f1a0:	str	r0, [r4, #4]
   4f1a4:	mov	r0, r4
   4f1a8:	mov	r1, #0
   4f1ac:	str	r7, [r4, #12]
   4f1b0:	str	r8, [r4, #16]
   4f1b4:	bl	1894 <deflate@plt>
   4f1b8:	ldr	r0, [r4, #16]
   4f1bc:	ldr	r3, [sl]
   4f1c0:	mov	r1, #1
   4f1c4:	rsb	r2, r0, #2048	; 0x800
   4f1c8:	mov	r0, r7
   4f1cc:	bl	18ac <fwrite@plt>
   4f1d0:	ldr	r0, [r4, #16]
   4f1d4:	cmp	r0, #0
   4f1d8:	beq	4f1a4 <WriteCompressedType+0x1b4>
   4f1dc:	mov	r0, sl
   4f1e0:	mov	r1, r6
   4f1e4:	mov	r2, r4
   4f1e8:	bl	51ff8 <WriteCompressedTypeArrayFlags>
   4f1ec:	ldr	r9, [sp, #36]	; 0x24
   4f1f0:	add	r5, r5, #1
   4f1f4:	mov	r6, #0
   4f1f8:	cmp	r5, r9
   4f1fc:	bcc	4f124 <WriteCompressedType+0x134>
   4f200:	b	4f9d8 <WriteCompressedType+0x9e8>
   4f204:	ldr	r0, [r7, #8]
   4f208:	ldr	r3, [sp, #36]	; 0x24
   4f20c:	mov	r1, r4
   4f210:	str	r0, [sp]
   4f214:	mov	r0, sl
   4f218:	bl	51e78 <WriteCompressedData>
   4f21c:	mov	r6, r0
   4f220:	b	4f9d8 <WriteCompressedType+0x9e8>
   4f224:	ldr	r0, [r7, #52]	; 0x34
   4f228:	ldr	r9, [r0, #4]
   4f22c:	cmp	r9, #0
   4f230:	beq	4f950 <WriteCompressedType+0x960>
   4f234:	ldr	r1, [r7, #40]	; 0x28
   4f238:	ldr	r8, [r0, #8]
   4f23c:	str	r7, [sp, #8]
   4f240:	mov	r7, #0
   4f244:	mov	r6, #0
   4f248:	str	r1, [sp, #4]
   4f24c:	ldr	r0, [r8, r6, lsl #2]
   4f250:	mov	r5, r7
   4f254:	bl	1954 <strlen@plt>
   4f258:	cmp	r0, r7
   4f25c:	add	r6, r6, #1
   4f260:	movhi	r7, r0
   4f264:	cmp	r9, r6
   4f268:	bne	4f24c <WriteCompressedType+0x25c>
   4f26c:	cmp	r0, r5
   4f270:	mov	r1, r5
   4f274:	mov	r3, #0
   4f278:	movhi	r1, r0
   4f27c:	add	r1, r1, #1
   4f280:	mul	r2, r9, r1
   4f284:	add	r1, r3, r9
   4f288:	add	r3, r2, r3
   4f28c:	add	r7, r7, #1
   4f290:	tst	r3, #7
   4f294:	mov	r3, r1
   4f298:	bne	4f284 <WriteCompressedType+0x294>
   4f29c:	movw	r2, #5
   4f2a0:	cmp	r0, r5
   4f2a4:	str	r7, [sp, #44]	; 0x2c
   4f2a8:	str	r9, [sp, #16]
   4f2ac:	str	r7, [sp, #28]
   4f2b0:	movhi	r5, r0
   4f2b4:	movt	r2, #4
   4f2b8:	str	r2, [sp, #40]	; 0x28
   4f2bc:	mov	r2, #1
   4f2c0:	mla	r0, r9, r5, r1
   4f2c4:	mov	r1, #1
   4f2c8:	str	r2, [sp, #48]	; 0x30
   4f2cc:	str	r0, [sp, #52]	; 0x34
   4f2d0:	mov	r0, r7
   4f2d4:	bl	1798 <calloc@plt>
   4f2d8:	add	lr, sp, #2048	; 0x800
   4f2dc:	str	r0, [sp, #12]
   4f2e0:	add	r1, sp, #40	; 0x28
   4f2e4:	mov	r0, #16
   4f2e8:	mov	r6, #0
   4f2ec:	mov	r5, #2048	; 0x800
   4f2f0:	add	r8, lr, #40	; 0x28
   4f2f4:	str	r1, [r4]
   4f2f8:	str	r0, [r4, #4]
   4f2fc:	mov	r0, r4
   4f300:	mov	r1, #0
   4f304:	str	r8, [r4, #12]
   4f308:	str	r5, [r4, #16]
   4f30c:	bl	1894 <deflate@plt>
   4f310:	ldr	r0, [r4, #16]
   4f314:	ldr	r3, [sl]
   4f318:	mov	r1, #1
   4f31c:	rsb	r2, r0, #2048	; 0x800
   4f320:	mov	r0, r8
   4f324:	bl	18ac <fwrite@plt>
   4f328:	add	r6, r0, r6
   4f32c:	ldr	r0, [r4, #16]
   4f330:	cmp	r0, #0
   4f334:	beq	4f2fc <WriteCompressedType+0x30c>
   4f338:	ldr	r7, [sp, #12]
   4f33c:	mov	r5, #0
   4f340:	mov	r9, #2048	; 0x800
   4f344:	ldr	r0, [sp, #8]
   4f348:	ldr	r0, [r0, #52]	; 0x34
   4f34c:	str	r0, [sp, #24]
   4f350:	ldr	r0, [r0, #8]
   4f354:	ldr	r0, [r0, r5, lsl #2]
   4f358:	bl	1954 <strlen@plt>
   4f35c:	ldr	r2, [sp, #28]
   4f360:	str	r0, [sp, #20]
   4f364:	mov	r0, r7
   4f368:	mov	r1, #0
   4f36c:	bl	1990 <memset@plt>
   4f370:	ldr	r0, [sp, #24]
   4f374:	ldr	r2, [sp, #20]
   4f378:	ldr	r0, [r0, #8]
   4f37c:	ldr	r1, [r0, r5, lsl #2]
   4f380:	mov	r0, r7
   4f384:	bl	181c <memcpy@plt>
   4f388:	ldr	r0, [sp, #28]
   4f38c:	str	r7, [r4]
   4f390:	str	r0, [r4, #4]
   4f394:	mov	r0, r4
   4f398:	mov	r1, #0
   4f39c:	str	r8, [r4, #12]
   4f3a0:	str	r9, [r4, #16]
   4f3a4:	bl	1894 <deflate@plt>
   4f3a8:	ldr	r0, [r4, #16]
   4f3ac:	ldr	r3, [sl]
   4f3b0:	mov	r1, #1
   4f3b4:	rsb	r2, r0, #2048	; 0x800
   4f3b8:	mov	r0, r8
   4f3bc:	bl	18ac <fwrite@plt>
   4f3c0:	add	r6, r0, r6
   4f3c4:	ldr	r0, [r4, #16]
   4f3c8:	cmp	r0, #0
   4f3cc:	beq	4f394 <WriteCompressedType+0x3a4>
   4f3d0:	ldr	r0, [sp, #16]
   4f3d4:	add	r5, r5, #1
   4f3d8:	cmp	r5, r0
   4f3dc:	bne	4f344 <WriteCompressedType+0x354>
   4f3e0:	ldr	r0, [sp, #12]
   4f3e4:	bl	1804 <free@plt>
   4f3e8:	ldr	r1, [sp, #36]	; 0x24
   4f3ec:	ldr	r2, [sp, #16]
   4f3f0:	add	r0, sp, #32
   4f3f4:	bl	53884 <SafeMul>
   4f3f8:	ldr	r0, [sp, #32]
   4f3fc:	cmp	r0, #0
   4f400:	beq	4f9d8 <WriteCompressedType+0x9e8>
   4f404:	sub	lr, fp, #4096	; 0x1000
   4f408:	mov	r7, #2048	; 0x800
   4f40c:	sub	r8, fp, #2080	; 0x820
   4f410:	mov	r5, #0
   4f414:	sub	r0, lr, #32
   4f418:	add	r1, r0, #8
   4f41c:	add	r0, r0, #24
   4f420:	str	r1, [sp, #24]
   4f424:	str	r0, [sp, #20]
   4f428:	ldr	r0, [sp, #4]
   4f42c:	add	lr, sp, #4096	; 0x1000
   4f430:	mov	r1, #0
   4f434:	mov	r2, #2048	; 0x800
   4f438:	ldr	r9, [r0, r5, lsl #2]
   4f43c:	add	r0, lr, #1072	; 0x430
   4f440:	bl	1990 <memset@plt>
   4f444:	cmp	r9, #0
   4f448:	str	r5, [sp, #28]
   4f44c:	beq	4f4f4 <WriteCompressedType+0x504>
   4f450:	add	lr, sp, #5120	; 0x1400
   4f454:	mov	r1, #14
   4f458:	mov	r5, #0
   4f45c:	add	r0, lr, #40	; 0x28
   4f460:	str	r1, [r0, #8]
   4f464:	ldr	r0, [r9, #16]
   4f468:	cmp	r0, #0
   4f46c:	mov	r0, #0
   4f470:	beq	4f480 <WriteCompressedType+0x490>
   4f474:	mov	r0, r9
   4f478:	bl	51bc4 <GetTypeBufSize>
   4f47c:	add	r0, r0, #24
   4f480:	add	lr, sp, #5120	; 0x1400
   4f484:	add	r1, lr, #40	; 0x28
   4f488:	add	lr, sp, #4096	; 0x1000
   4f48c:	str	r0, [r1, #12]
   4f490:	add	r0, lr, #1072	; 0x430
   4f494:	str	r0, [r4]
   4f498:	mov	r0, #8
   4f49c:	str	r0, [r4, #4]
   4f4a0:	mov	r0, r4
   4f4a4:	mov	r1, #0
   4f4a8:	str	r8, [r4, #12]
   4f4ac:	str	r7, [r4, #16]
   4f4b0:	bl	1894 <deflate@plt>
   4f4b4:	ldr	r0, [r4, #16]
   4f4b8:	ldr	r3, [sl]
   4f4bc:	mov	r1, #1
   4f4c0:	rsb	r2, r0, #2048	; 0x800
   4f4c4:	mov	r0, r8
   4f4c8:	bl	18ac <fwrite@plt>
   4f4cc:	add	r5, r0, r5
   4f4d0:	ldr	r0, [r4, #16]
   4f4d4:	cmp	r0, #0
   4f4d8:	beq	4f4a0 <WriteCompressedType+0x4b0>
   4f4dc:	mov	r0, sl
   4f4e0:	mov	r1, r9
   4f4e4:	mov	r2, r4
   4f4e8:	bl	51ff8 <WriteCompressedTypeArrayFlags>
   4f4ec:	add	r0, r0, r5
   4f4f0:	b	4f6f4 <WriteCompressedType+0x704>
   4f4f4:	ldr	r0, [sp, #24]
   4f4f8:	mov	r1, #0
   4f4fc:	movw	r2, #2040	; 0x7f8
   4f500:	mov	r5, #0
   4f504:	bl	1990 <memset@plt>
   4f508:	add	lr, sp, #5120	; 0x1400
   4f50c:	mov	r1, #14
   4f510:	add	r0, lr, #40	; 0x28
   4f514:	sub	lr, fp, #4096	; 0x1000
   4f518:	str	r1, [r0, #2056]	; 0x808
   4f51c:	mov	r1, #48	; 0x30
   4f520:	str	r1, [r0, #2060]	; 0x80c
   4f524:	sub	r0, lr, #32
   4f528:	str	r0, [r4]
   4f52c:	mov	r0, #8
   4f530:	str	r0, [r4, #4]
   4f534:	mov	r0, r4
   4f538:	mov	r1, #0
   4f53c:	str	r8, [r4, #12]
   4f540:	str	r7, [r4, #16]
   4f544:	bl	1894 <deflate@plt>
   4f548:	ldr	r0, [r4, #16]
   4f54c:	ldr	r3, [sl]
   4f550:	mov	r1, #1
   4f554:	rsb	r2, r0, #2048	; 0x800
   4f558:	mov	r0, r8
   4f55c:	bl	18ac <fwrite@plt>
   4f560:	add	r5, r0, r5
   4f564:	ldr	r0, [r4, #16]
   4f568:	cmp	r0, #0
   4f56c:	beq	4f534 <WriteCompressedType+0x544>
   4f570:	add	r0, pc, #968	; 0x3c8
   4f574:	sub	lr, fp, #4096	; 0x1000
   4f578:	mov	r2, #20
   4f57c:	mov	r9, #0
   4f580:	vld1.64	{d16-d17}, [r0 :128]
   4f584:	sub	r1, lr, #32
   4f588:	add	lr, sp, #5120	; 0x1400
   4f58c:	mov	r0, r1
   4f590:	vst1.32	{d16-d17}, [r0], r2
   4f594:	mov	r2, #8
   4f598:	str	r2, [r0]
   4f59c:	add	r0, lr, #40	; 0x28
   4f5a0:	mov	r2, #5
   4f5a4:	str	r2, [r0, #2072]	; 0x818
   4f5a8:	ldr	r0, [sp, #20]
   4f5ac:	mov	r2, #0
   4f5b0:	str	r2, [r0]
   4f5b4:	str	r2, [r0, #4]
   4f5b8:	mov	r0, #32
   4f5bc:	str	r1, [r4]
   4f5c0:	str	r0, [r4, #4]
   4f5c4:	mov	r0, r4
   4f5c8:	mov	r1, #0
   4f5cc:	str	r8, [r4, #12]
   4f5d0:	str	r7, [r4, #16]
   4f5d4:	bl	1894 <deflate@plt>
   4f5d8:	ldr	r0, [r4, #16]
   4f5dc:	ldr	r3, [sl]
   4f5e0:	mov	r1, #1
   4f5e4:	rsb	r2, r0, #2048	; 0x800
   4f5e8:	mov	r0, r8
   4f5ec:	bl	18ac <fwrite@plt>
   4f5f0:	add	r5, r0, r5
   4f5f4:	ldr	r0, [r4, #16]
   4f5f8:	cmp	r0, #0
   4f5fc:	beq	4f5c4 <WriteCompressedType+0x5d4>
   4f600:	add	lr, sp, #5120	; 0x1400
   4f604:	mov	r1, #1
   4f608:	add	r0, lr, #40	; 0x28
   4f60c:	sub	lr, fp, #4096	; 0x1000
   4f610:	str	r1, [r0, #2056]	; 0x808
   4f614:	str	r9, [r0, #2060]	; 0x80c
   4f618:	sub	r0, lr, #32
   4f61c:	str	r0, [r4]
   4f620:	mov	r0, #8
   4f624:	str	r0, [r4, #4]
   4f628:	mov	r0, r4
   4f62c:	mov	r1, #0
   4f630:	str	r8, [r4, #12]
   4f634:	str	r7, [r4, #16]
   4f638:	bl	1894 <deflate@plt>
   4f63c:	ldr	r0, [r4, #16]
   4f640:	ldr	r3, [sl]
   4f644:	mov	r1, #1
   4f648:	rsb	r2, r0, #2048	; 0x800
   4f64c:	mov	r0, r8
   4f650:	bl	18ac <fwrite@plt>
   4f654:	add	r5, r0, r5
   4f658:	ldr	r0, [r4, #16]
   4f65c:	cmp	r0, #0
   4f660:	beq	4f628 <WriteCompressedType+0x638>
   4f664:	ldr	r0, [sl]
   4f668:	cmp	r0, #0
   4f66c:	beq	4f6e8 <WriteCompressedType+0x6f8>
   4f670:	mov	r0, #9
   4f674:	bl	1924 <Mat_SizeOf@plt>
   4f678:	add	lr, sp, #5120	; 0x1400
   4f67c:	mov	r7, #0
   4f680:	mov	r1, #9
   4f684:	add	r0, lr, #40	; 0x28
   4f688:	add	lr, sp, #4096	; 0x1000
   4f68c:	stm	r0, {r1, r7}
   4f690:	str	r0, [r4]
   4f694:	mov	r0, #8
   4f698:	mov	r1, #1024	; 0x400
   4f69c:	add	r9, lr, #40	; 0x28
   4f6a0:	str	r0, [r4, #4]
   4f6a4:	str	r9, [r4, #12]
   4f6a8:	str	r1, [r4, #16]
   4f6ac:	mov	r0, r4
   4f6b0:	mov	r1, #0
   4f6b4:	bl	1894 <deflate@plt>
   4f6b8:	ldr	r0, [r4, #16]
   4f6bc:	ldr	r3, [sl]
   4f6c0:	mov	r1, #1
   4f6c4:	rsb	r2, r0, #1024	; 0x400
   4f6c8:	mov	r0, r9
   4f6cc:	bl	18ac <fwrite@plt>
   4f6d0:	add	r7, r0, r7
   4f6d4:	ldr	r0, [r4, #16]
   4f6d8:	mov	r1, #1024	; 0x400
   4f6dc:	cmp	r0, #0
   4f6e0:	beq	4f6a4 <WriteCompressedType+0x6b4>
   4f6e4:	b	4f6ec <WriteCompressedType+0x6fc>
   4f6e8:	mov	r7, #0
   4f6ec:	add	r0, r7, r5
   4f6f0:	mov	r7, #2048	; 0x800
   4f6f4:	ldr	r5, [sp, #28]
   4f6f8:	add	r6, r0, r6
   4f6fc:	ldr	r0, [sp, #32]
   4f700:	add	r5, r5, #1
   4f704:	cmp	r5, r0
   4f708:	bcc	4f428 <WriteCompressedType+0x438>
   4f70c:	b	4f9d8 <WriteCompressedType+0x9e8>
   4f710:	mov	r6, #0
   4f714:	ldr	r5, [r7, #8]
   4f718:	ldr	r2, [r7, #40]	; 0x28
   4f71c:	cmp	sl, #0
   4f720:	ldr	r9, [sp, #36]	; 0x24
   4f724:	str	r6, [fp, #-2076]	; 0xfffff7e4
   4f728:	str	r6, [fp, #-2080]	; 0xfffff7e0
   4f72c:	ldrne	r0, [sl]
   4f730:	cmpne	r0, #0
   4f734:	beq	4f9d8 <WriteCompressedType+0x9e8>
   4f738:	cmp	r5, #17
   4f73c:	bhi	4f9d8 <WriteCompressedType+0x9e8>
   4f740:	movw	r1, #20
   4f744:	mov	r0, #1
   4f748:	movt	r1, #3
   4f74c:	tst	r1, r0, lsl r5
   4f750:	beq	4f9e4 <WriteCompressedType+0x9f4>
   4f754:	mov	r0, r5
   4f758:	str	r2, [sp, #28]
   4f75c:	bl	1924 <Mat_SizeOf@plt>
   4f760:	cmp	r5, #2
   4f764:	add	lr, sp, #5120	; 0x1400
   4f768:	mul	r2, r0, r9
   4f76c:	mov	r6, #0
   4f770:	mov	r8, #1024	; 0x400
   4f774:	add	r0, lr, #40	; 0x28
   4f778:	movweq	r5, #16
   4f77c:	add	lr, sp, #4096	; 0x1000
   4f780:	str	r5, [r0]
   4f784:	mov	r1, r0
   4f788:	str	r2, [r0, #4]
   4f78c:	mov	r5, r2
   4f790:	add	r7, lr, #40	; 0x28
   4f794:	mov	r0, #8
   4f798:	str	r1, [r4]
   4f79c:	str	r0, [r4, #4]
   4f7a0:	mov	r0, r4
   4f7a4:	mov	r1, #0
   4f7a8:	str	r7, [r4, #12]
   4f7ac:	str	r8, [r4, #16]
   4f7b0:	bl	1894 <deflate@plt>
   4f7b4:	ldr	r0, [r4, #16]
   4f7b8:	ldr	r3, [sl]
   4f7bc:	mov	r1, #1
   4f7c0:	rsb	r2, r0, #1024	; 0x400
   4f7c4:	mov	r0, r7
   4f7c8:	bl	18ac <fwrite@plt>
   4f7cc:	add	r6, r0, r6
   4f7d0:	ldr	r0, [r4, #16]
   4f7d4:	cmp	r0, #0
   4f7d8:	beq	4f7a0 <WriteCompressedType+0x7b0>
   4f7dc:	ldr	r0, [sp, #28]
   4f7e0:	cmp	r0, #0
   4f7e4:	beq	4f9d8 <WriteCompressedType+0x9e8>
   4f7e8:	cmp	r9, #1
   4f7ec:	blt	4f9d8 <WriteCompressedType+0x9e8>
   4f7f0:	str	r0, [r4]
   4f7f4:	mov	r8, r5
   4f7f8:	str	r5, [r4, #4]
   4f7fc:	mov	r5, #1024	; 0x400
   4f800:	mov	r0, r4
   4f804:	mov	r1, #0
   4f808:	str	r7, [r4, #12]
   4f80c:	str	r5, [r4, #16]
   4f810:	bl	1894 <deflate@plt>
   4f814:	ldr	r0, [r4, #16]
   4f818:	ldr	r3, [sl]
   4f81c:	mov	r1, #1
   4f820:	rsb	r2, r0, #1024	; 0x400
   4f824:	mov	r0, r7
   4f828:	bl	18ac <fwrite@plt>
   4f82c:	add	r6, r0, r6
   4f830:	ldr	r0, [r4, #16]
   4f834:	cmp	r0, #0
   4f838:	beq	4f800 <WriteCompressedType+0x810>
   4f83c:	asr	r0, r8, #31
   4f840:	add	r0, r8, r0, lsr #29
   4f844:	bic	r0, r0, #7
   4f848:	subs	r0, r8, r0
   4f84c:	beq	4f9d8 <WriteCompressedType+0x9e8>
   4f850:	sub	r1, fp, #2080	; 0x820
   4f854:	mov	r5, #1024	; 0x400
   4f858:	rsb	r0, r0, #8
   4f85c:	str	r1, [r4]
   4f860:	str	r0, [r4, #4]
   4f864:	mov	r0, r4
   4f868:	mov	r1, #0
   4f86c:	str	r7, [r4, #12]
   4f870:	str	r5, [r4, #16]
   4f874:	bl	1894 <deflate@plt>
   4f878:	ldr	r0, [r4, #16]
   4f87c:	ldr	r3, [sl]
   4f880:	mov	r1, #1
   4f884:	rsb	r2, r0, #1024	; 0x400
   4f888:	mov	r0, r7
   4f88c:	bl	18ac <fwrite@plt>
   4f890:	add	r6, r0, r6
   4f894:	ldr	r0, [r4, #16]
   4f898:	cmp	r0, #0
   4f89c:	beq	4f864 <WriteCompressedType+0x874>
   4f8a0:	b	4f9d8 <WriteCompressedType+0x9e8>
   4f8a4:	ldr	r5, [r7, #40]	; 0x28
   4f8a8:	mov	r8, #5
   4f8ac:	mov	r0, sl
   4f8b0:	mov	r1, r4
   4f8b4:	ldmib	r5, {r2, r3}
   4f8b8:	str	r8, [sp]
   4f8bc:	bl	51e78 <WriteCompressedData>
   4f8c0:	ldr	r2, [r5, #12]
   4f8c4:	ldr	r3, [r5, #16]
   4f8c8:	mov	r6, r0
   4f8cc:	mov	r0, sl
   4f8d0:	mov	r1, r4
   4f8d4:	str	r8, [sp]
   4f8d8:	bl	51e78 <WriteCompressedData>
   4f8dc:	add	r8, r0, r6
   4f8e0:	ldr	r0, [r7, #20]
   4f8e4:	cmp	r0, #0
   4f8e8:	beq	4f9b8 <WriteCompressedType+0x9c8>
   4f8ec:	ldr	r6, [r5, #24]
   4f8f0:	ldr	r0, [r7, #8]
   4f8f4:	ldr	r3, [r5, #20]
   4f8f8:	mov	r1, r4
   4f8fc:	ldr	r2, [r6]
   4f900:	str	r0, [sp]
   4f904:	mov	r0, sl
   4f908:	bl	51e78 <WriteCompressedData>
   4f90c:	ldr	r1, [r7, #8]
   4f910:	ldr	r3, [r5, #20]
   4f914:	ldr	r2, [r6, #4]
   4f918:	add	r5, r0, r8
   4f91c:	mov	r0, sl
   4f920:	str	r1, [sp]
   4f924:	mov	r1, r4
   4f928:	bl	51e78 <WriteCompressedData>
   4f92c:	add	r6, r5, r0
   4f930:	b	4f9d8 <WriteCompressedType+0x9e8>
   4f934:	nop	{0}
   4f938:	nop	{0}
   4f93c:	nop	{0}
   4f940:	.word	0x00000006
   4f944:	.word	0x00000008
   4f948:	.word	0x00000006
   4f94c:	.word	0x00000000
   4f950:	add	r0, pc, #264	; 0x108
   4f954:	add	lr, sp, #2048	; 0x800
   4f958:	mov	r6, #0
   4f95c:	vld1.64	{d16-d17}, [r0 :128]
   4f960:	mov	r0, #16
   4f964:	add	r7, lr, #40	; 0x28
   4f968:	vst1.64	{d16-d17}, [r5]
   4f96c:	str	r5, [r4]
   4f970:	mov	r5, #2048	; 0x800
   4f974:	str	r0, [r4, #4]
   4f978:	mov	r0, r4
   4f97c:	mov	r1, #0
   4f980:	str	r7, [r4, #12]
   4f984:	str	r5, [r4, #16]
   4f988:	bl	1894 <deflate@plt>
   4f98c:	ldr	r0, [r4, #16]
   4f990:	ldr	r3, [sl]
   4f994:	mov	r1, #1
   4f998:	rsb	r2, r0, #2048	; 0x800
   4f99c:	mov	r0, r7
   4f9a0:	bl	18ac <fwrite@plt>
   4f9a4:	add	r6, r0, r6
   4f9a8:	ldr	r0, [r4, #16]
   4f9ac:	cmp	r0, #0
   4f9b0:	beq	4f978 <WriteCompressedType+0x988>
   4f9b4:	b	4f9d8 <WriteCompressedType+0x9e8>
   4f9b8:	ldr	r0, [r7, #8]
   4f9bc:	ldr	r3, [r5, #20]
   4f9c0:	ldr	r2, [r5, #24]
   4f9c4:	mov	r1, r4
   4f9c8:	str	r0, [sp]
   4f9cc:	mov	r0, sl
   4f9d0:	bl	51e78 <WriteCompressedData>
   4f9d4:	add	r6, r0, r8
   4f9d8:	mov	r0, r6
   4f9dc:	sub	sp, fp, #28
   4f9e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4f9e4:	cmp	r5, #0
   4f9e8:	bne	4f9d8 <WriteCompressedType+0x9e8>
   4f9ec:	add	lr, sp, #5120	; 0x1400
   4f9f0:	mov	r0, #4
   4f9f4:	lsl	r1, r9, #1
   4f9f8:	mov	r6, #0
   4f9fc:	mov	r5, #1024	; 0x400
   4fa00:	add	r2, lr, #40	; 0x28
   4fa04:	add	lr, sp, #4096	; 0x1000
   4fa08:	stm	r2, {r0, r1}
   4fa0c:	add	r7, lr, #40	; 0x28
   4fa10:	mov	r0, #8
   4fa14:	str	r2, [r4]
   4fa18:	str	r0, [r4, #4]
   4fa1c:	mov	r0, r4
   4fa20:	mov	r1, #0
   4fa24:	str	r7, [r4, #12]
   4fa28:	str	r5, [r4, #16]
   4fa2c:	bl	1894 <deflate@plt>
   4fa30:	ldr	r0, [r4, #16]
   4fa34:	ldr	r3, [sl]
   4fa38:	mov	r1, #1
   4fa3c:	rsb	r2, r0, #1024	; 0x400
   4fa40:	mov	r0, r7
   4fa44:	bl	18ac <fwrite@plt>
   4fa48:	add	r6, r0, r6
   4fa4c:	ldr	r0, [r4, #16]
   4fa50:	cmp	r0, #0
   4fa54:	beq	4fa1c <WriteCompressedType+0xa2c>
   4fa58:	b	4f9d8 <WriteCompressedType+0x9e8>
   4fa5c:	nop	{0}
   4fa60:	.word	0x00040005
   4fa64:	.word	0x00000001
   4fa68:	.word	0x00000001
   4fa6c:	.word	0x00000000
   4fa70:	.word	0x00009db8

0004fa74 <Mat_VarReadNextInfo5>:
   4fa74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4fa78:	add	fp, sp, #28
   4fa7c:	sub	sp, sp, #84	; 0x54
   4fa80:	mov	r4, #0
   4fa84:	cmp	r0, #0
   4fa88:	beq	501b0 <Mat_VarReadNextInfo5+0x73c>
   4fa8c:	mov	r5, r0
   4fa90:	ldr	r0, [r0]
   4fa94:	bl	1840 <ftell@plt>
   4fa98:	cmn	r0, #1
   4fa9c:	beq	4fb94 <Mat_VarReadNextInfo5+0x120>
   4faa0:	ldr	r3, [r5]
   4faa4:	mov	r9, r0
   4faa8:	sub	r0, fp, #36	; 0x24
   4faac:	mov	r1, #4
   4fab0:	mov	r2, #1
   4fab4:	bl	18b8 <fread@plt>
   4fab8:	cmp	r0, #0
   4fabc:	beq	501b0 <Mat_VarReadNextInfo5+0x73c>
   4fac0:	ldr	r3, [r5]
   4fac4:	sub	r0, fp, #40	; 0x28
   4fac8:	mov	r1, #4
   4facc:	mov	r2, #1
   4fad0:	bl	18b8 <fread@plt>
   4fad4:	ldr	r0, [r5, #20]
   4fad8:	cmp	r0, #0
   4fadc:	beq	4faf0 <Mat_VarReadNextInfo5+0x7c>
   4fae0:	sub	r0, fp, #36	; 0x24
   4fae4:	bl	1bf0 <Mat_int32Swap>
   4fae8:	sub	r0, fp, #40	; 0x28
   4faec:	bl	1bf0 <Mat_int32Swap>
   4faf0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   4faf4:	cmp	r1, #14
   4faf8:	beq	4fba8 <Mat_VarReadNextInfo5+0x134>
   4fafc:	cmp	r1, #15
   4fb00:	bne	4fca8 <Mat_VarReadNextInfo5+0x234>
   4fb04:	add	r1, sp, #8
   4fb08:	vmov.i32	q8, #0	; 0x00000000
   4fb0c:	mov	r0, #48	; 0x30
   4fb10:	mov	r2, r1
   4fb14:	vst1.64	{d16-d17}, [r2], r0
   4fb18:	add	r0, r1, #32
   4fb1c:	vst1.64	{d16-d17}, [r0]
   4fb20:	add	r0, r1, #16
   4fb24:	vst1.64	{d16-d17}, [r2]
   4fb28:	vst1.64	{d16-d17}, [r0]
   4fb2c:	bl	18a0 <Mat_VarCalloc@plt>
   4fb30:	mov	r4, r0
   4fb34:	mov	r0, #1
   4fb38:	mov	r1, #56	; 0x38
   4fb3c:	str	r0, [r4, #48]	; 0x30
   4fb40:	mov	r0, #1
   4fb44:	bl	1798 <calloc@plt>
   4fb48:	ldr	r1, [r4, #52]	; 0x34
   4fb4c:	mov	r2, #56	; 0x38
   4fb50:	str	r0, [r1, #12]
   4fb54:	ldr	r1, [pc, #1636]	; 501c0 <Mat_VarReadNextInfo5+0x74c>
   4fb58:	add	r1, pc, r1
   4fb5c:	bl	19d8 <inflateInit_@plt>
   4fb60:	cmp	r0, #0
   4fb64:	beq	4fd08 <Mat_VarReadNextInfo5+0x294>
   4fb68:	mov	r6, r0
   4fb6c:	mov	r0, r4
   4fb70:	bl	1918 <Mat_VarFree@plt>
   4fb74:	mov	r0, r6
   4fb78:	bl	1888 <zError@plt>
   4fb7c:	mov	r1, r0
   4fb80:	ldr	r0, [pc, #1596]	; 501c4 <Mat_VarReadNextInfo5+0x750>
   4fb84:	add	r0, pc, r0
   4fb88:	bl	19b4 <Mat_Critical@plt>
   4fb8c:	mov	r4, #0
   4fb90:	b	501b0 <Mat_VarReadNextInfo5+0x73c>
   4fb94:	ldr	r0, [pc, #1568]	; 501bc <Mat_VarReadNextInfo5+0x748>
   4fb98:	add	r0, pc, r0
   4fb9c:	bl	19b4 <Mat_Critical@plt>
   4fba0:	mov	r4, #0
   4fba4:	b	501b0 <Mat_VarReadNextInfo5+0x73c>
   4fba8:	bl	18a0 <Mat_VarCalloc@plt>
   4fbac:	ldr	r3, [r5]
   4fbb0:	add	r7, sp, #8
   4fbb4:	mov	r4, r0
   4fbb8:	mov	r1, #4
   4fbbc:	mov	r2, #6
   4fbc0:	mov	r0, r7
   4fbc4:	bl	18b8 <fread@plt>
   4fbc8:	ldr	r0, [r5, #20]
   4fbcc:	cmp	r0, #0
   4fbd0:	beq	4fc04 <Mat_VarReadNextInfo5+0x190>
   4fbd4:	mov	r0, r7
   4fbd8:	bl	1c04 <Mat_uint32Swap>
   4fbdc:	add	r0, r7, #4
   4fbe0:	bl	1c04 <Mat_uint32Swap>
   4fbe4:	add	r0, r7, #8
   4fbe8:	bl	1c04 <Mat_uint32Swap>
   4fbec:	add	r0, r7, #12
   4fbf0:	bl	1c04 <Mat_uint32Swap>
   4fbf4:	add	r0, r7, #16
   4fbf8:	bl	1c04 <Mat_uint32Swap>
   4fbfc:	add	r0, r7, #20
   4fc00:	bl	1c04 <Mat_uint32Swap>
   4fc04:	ldr	r0, [sp, #8]
   4fc08:	cmp	r0, #6
   4fc0c:	bne	4fc40 <Mat_VarReadNextInfo5+0x1cc>
   4fc10:	ldr	r0, [sp, #16]
   4fc14:	add	ip, r4, #16
   4fc18:	and	r1, r0, #2048	; 0x800
   4fc1c:	and	r2, r0, #1024	; 0x400
   4fc20:	and	r3, r0, #512	; 0x200
   4fc24:	uxtb	r0, r0
   4fc28:	cmp	r0, #18
   4fc2c:	movcs	r0, #0
   4fc30:	stm	ip, {r0, r1, r2, r3}
   4fc34:	cmp	r0, #5
   4fc38:	ldreq	r0, [sp, #20]
   4fc3c:	streq	r0, [r4]
   4fc40:	ldr	r2, [sp, #24]
   4fc44:	ldr	r3, [sp, #28]
   4fc48:	mov	r0, r5
   4fc4c:	mov	r1, r4
   4fc50:	bl	519e4 <ReadRankDims>
   4fc54:	ldr	r3, [r5]
   4fc58:	add	r8, sp, #8
   4fc5c:	mov	r1, #4
   4fc60:	mov	r2, #2
   4fc64:	mov	r0, r8
   4fc68:	bl	18b8 <fread@plt>
   4fc6c:	ldr	r0, [r5, #20]
   4fc70:	cmp	r0, #0
   4fc74:	beq	4fc80 <Mat_VarReadNextInfo5+0x20c>
   4fc78:	add	r0, sp, #8
   4fc7c:	bl	1c04 <Mat_uint32Swap>
   4fc80:	ldr	r0, [sp, #8]
   4fc84:	cmp	r0, #1
   4fc88:	bne	4fcb8 <Mat_VarReadNextInfo5+0x244>
   4fc8c:	ldr	r0, [r5, #20]
   4fc90:	cmp	r0, #0
   4fc94:	beq	4fd44 <Mat_VarReadNextInfo5+0x2d0>
   4fc98:	add	r0, r8, #4
   4fc9c:	bl	1c04 <Mat_uint32Swap>
   4fca0:	mov	r6, r0
   4fca4:	b	4fd48 <Mat_VarReadNextInfo5+0x2d4>
   4fca8:	ldr	r0, [pc, #1316]	; 501d4 <Mat_VarReadNextInfo5+0x760>
   4fcac:	add	r0, pc, r0
   4fcb0:	bl	19b4 <Mat_Critical@plt>
   4fcb4:	b	501b0 <Mat_VarReadNextInfo5+0x73c>
   4fcb8:	lsr	r7, r0, #16
   4fcbc:	cmp	r7, #4
   4fcc0:	bhi	4fdb0 <Mat_VarReadNextInfo5+0x33c>
   4fcc4:	uxth	r0, r0
   4fcc8:	cmp	r0, #1
   4fccc:	bne	4fdb0 <Mat_VarReadNextInfo5+0x33c>
   4fcd0:	cmp	r7, #0
   4fcd4:	beq	4fdb0 <Mat_VarReadNextInfo5+0x33c>
   4fcd8:	add	r0, r7, #1
   4fcdc:	bl	18d0 <malloc@plt>
   4fce0:	cmp	r0, #0
   4fce4:	str	r0, [r4, #36]	; 0x24
   4fce8:	beq	4fdb0 <Mat_VarReadNextInfo5+0x33c>
   4fcec:	add	r1, r8, #4
   4fcf0:	mov	r2, r7
   4fcf4:	bl	181c <memcpy@plt>
   4fcf8:	ldr	r0, [r4, #36]	; 0x24
   4fcfc:	mov	r1, #0
   4fd00:	strb	r1, [r0, r7]
   4fd04:	b	4fdb0 <Mat_VarReadNextInfo5+0x33c>
   4fd08:	add	r6, sp, #8
   4fd0c:	mov	r0, r5
   4fd10:	mov	r1, r4
   4fd14:	mov	r2, r6
   4fd18:	bl	27d8 <InflateVarTag>
   4fd1c:	mov	r7, r0
   4fd20:	ldr	r0, [r5, #20]
   4fd24:	cmp	r0, #0
   4fd28:	beq	4fe60 <Mat_VarReadNextInfo5+0x3ec>
   4fd2c:	mov	r0, r6
   4fd30:	bl	1c04 <Mat_uint32Swap>
   4fd34:	orr	r8, r6, #4
   4fd38:	mov	r0, r8
   4fd3c:	bl	1c04 <Mat_uint32Swap>
   4fd40:	b	4fe64 <Mat_VarReadNextInfo5+0x3f0>
   4fd44:	ldr	r6, [sp, #12]
   4fd48:	ands	r0, r6, #7
   4fd4c:	add	r1, r6, #8
   4fd50:	mov	r7, r6
   4fd54:	subne	r7, r1, r0
   4fd58:	add	r0, r7, #1
   4fd5c:	bl	18d0 <malloc@plt>
   4fd60:	cmp	r0, #0
   4fd64:	str	r0, [r4, #36]	; 0x24
   4fd68:	beq	4fdb0 <Mat_VarReadNextInfo5+0x33c>
   4fd6c:	ldr	r3, [r5]
   4fd70:	mov	r1, #1
   4fd74:	mov	r2, r7
   4fd78:	bl	18b8 <fread@plt>
   4fd7c:	mov	r1, r0
   4fd80:	ldr	r0, [r4, #36]	; 0x24
   4fd84:	cmp	r1, r7
   4fd88:	bne	4fd98 <Mat_VarReadNextInfo5+0x324>
   4fd8c:	mov	r1, #0
   4fd90:	strb	r1, [r0, r6]
   4fd94:	b	4fdb0 <Mat_VarReadNextInfo5+0x33c>
   4fd98:	bl	1804 <free@plt>
   4fd9c:	mov	r0, #0
   4fda0:	str	r0, [r4, #36]	; 0x24
   4fda4:	ldr	r0, [pc, #1060]	; 501d0 <Mat_VarReadNextInfo5+0x75c>
   4fda8:	add	r0, pc, r0
   4fdac:	bl	19b4 <Mat_Critical@plt>
   4fdb0:	ldr	r0, [r4, #16]
   4fdb4:	cmp	r0, #1
   4fdb8:	beq	4fddc <Mat_VarReadNextInfo5+0x368>
   4fdbc:	cmp	r0, #16
   4fdc0:	beq	4fdec <Mat_VarReadNextInfo5+0x378>
   4fdc4:	cmp	r0, #2
   4fdc8:	bne	50174 <Mat_VarReadNextInfo5+0x700>
   4fdcc:	mov	r0, r5
   4fdd0:	mov	r1, r4
   4fdd4:	bl	501d8 <ReadNextStructField>
   4fdd8:	b	50174 <Mat_VarReadNextInfo5+0x700>
   4fddc:	mov	r0, r5
   4fde0:	mov	r1, r4
   4fde4:	bl	50f9c <ReadNextCell>
   4fde8:	b	50174 <Mat_VarReadNextInfo5+0x700>
   4fdec:	mov	r0, #1
   4fdf0:	sub	r1, fp, #32
   4fdf4:	str	r0, [fp, #-32]	; 0xffffffe0
   4fdf8:	mov	r0, r4
   4fdfc:	bl	53824 <SafeMulDims>
   4fe00:	mov	r0, #4
   4fe04:	mov	r2, #4
   4fe08:	str	r0, [r4, #12]
   4fe0c:	mov	r0, r4
   4fe10:	ldr	r1, [fp, #-32]	; 0xffffffe0
   4fe14:	bl	53884 <SafeMul>
   4fe18:	ldr	r0, [r4]
   4fe1c:	bl	18d0 <malloc@plt>
   4fe20:	cmp	r0, #0
   4fe24:	str	r0, [r4, #40]	; 0x28
   4fe28:	beq	4ff1c <Mat_VarReadNextInfo5+0x4a8>
   4fe2c:	mov	r7, r0
   4fe30:	ldr	r0, [fp, #-32]	; 0xffffffe0
   4fe34:	cmp	r0, #0
   4fe38:	beq	50174 <Mat_VarReadNextInfo5+0x700>
   4fe3c:	mov	r6, #0
   4fe40:	mov	r0, r5
   4fe44:	bl	1a50 <Mat_VarReadNextInfo@plt>
   4fe48:	str	r0, [r7, r6, lsl #2]
   4fe4c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   4fe50:	add	r6, r6, #1
   4fe54:	cmp	r6, r0
   4fe58:	bcc	4fe40 <Mat_VarReadNextInfo5+0x3cc>
   4fe5c:	b	50174 <Mat_VarReadNextInfo5+0x700>
   4fe60:	orr	r8, r6, #4
   4fe64:	ldr	r0, [sp, #8]
   4fe68:	cmp	r0, #14
   4fe6c:	bne	4fef4 <Mat_VarReadNextInfo5+0x480>
   4fe70:	add	r6, sp, #8
   4fe74:	mov	r0, r5
   4fe78:	mov	r1, r4
   4fe7c:	mov	r2, r6
   4fe80:	bl	292c <InflateArrayFlags>
   4fe84:	ldr	r0, [r5, #20]
   4fe88:	cmp	r0, #0
   4fe8c:	beq	4fea8 <Mat_VarReadNextInfo5+0x434>
   4fe90:	mov	r0, r6
   4fe94:	bl	1c04 <Mat_uint32Swap>
   4fe98:	add	r0, r6, #8
   4fe9c:	bl	1c04 <Mat_uint32Swap>
   4fea0:	add	r0, r6, #12
   4fea4:	bl	1c04 <Mat_uint32Swap>
   4fea8:	ldr	r0, [sp, #8]
   4feac:	cmp	r0, #6
   4feb0:	bne	4ff2c <Mat_VarReadNextInfo5+0x4b8>
   4feb4:	ldr	r1, [sp, #16]
   4feb8:	mov	sl, r4
   4febc:	uxtb	r0, r1
   4fec0:	and	r2, r1, #2048	; 0x800
   4fec4:	and	r3, r1, #1024	; 0x400
   4fec8:	and	r1, r1, #512	; 0x200
   4fecc:	cmp	r0, #18
   4fed0:	movcs	r0, #0
   4fed4:	str	r0, [sl, #16]!
   4fed8:	cmp	r0, #5
   4fedc:	stmib	sl, {r2, r3}
   4fee0:	str	r1, [sl, #12]
   4fee4:	bne	4ff34 <Mat_VarReadNextInfo5+0x4c0>
   4fee8:	ldr	r0, [sp, #20]
   4feec:	str	r0, [r4]
   4fef0:	b	4ff3c <Mat_VarReadNextInfo5+0x4c8>
   4fef4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   4fef8:	mov	r2, #1
   4fefc:	sub	r1, r0, r7
   4ff00:	ldr	r0, [r5]
   4ff04:	bl	1a2c <fseek@plt>
   4ff08:	mov	r0, r4
   4ff0c:	bl	1918 <Mat_VarFree@plt>
   4ff10:	ldr	r0, [pc, #688]	; 501c8 <Mat_VarReadNextInfo5+0x754>
   4ff14:	add	r0, pc, r0
   4ff18:	b	4fb9c <Mat_VarReadNextInfo5+0x128>
   4ff1c:	mov	r0, #0
   4ff20:	str	r0, [r4]
   4ff24:	str	r0, [r4, #12]
   4ff28:	b	50174 <Mat_VarReadNextInfo5+0x700>
   4ff2c:	mov	sl, r4
   4ff30:	ldr	r0, [sl, #16]!
   4ff34:	cmp	r0, #17
   4ff38:	beq	50198 <Mat_VarReadNextInfo5+0x724>
   4ff3c:	mov	r0, #0
   4ff40:	add	r6, sp, #8
   4ff44:	mov	r1, r4
   4ff48:	mov	r3, #64	; 0x40
   4ff4c:	str	r0, [fp, #-32]	; 0xffffffe0
   4ff50:	sub	r0, fp, #32
   4ff54:	mov	r2, r6
   4ff58:	str	r0, [sp]
   4ff5c:	mov	r0, r5
   4ff60:	bl	2a80 <InflateRankDims>
   4ff64:	ldr	r0, [fp, #-32]	; 0xffffffe0
   4ff68:	mov	r1, #1
   4ff6c:	cmp	r0, #0
   4ff70:	addeq	r0, r6, #8
   4ff74:	moveq	r1, #0
   4ff78:	streq	r0, [fp, #-32]	; 0xffffffe0
   4ff7c:	str	r1, [sp, #4]
   4ff80:	ldr	r0, [r5, #20]
   4ff84:	cmp	r0, #0
   4ff88:	beq	4ff9c <Mat_VarReadNextInfo5+0x528>
   4ff8c:	add	r0, sp, #8
   4ff90:	bl	1c04 <Mat_uint32Swap>
   4ff94:	mov	r0, r8
   4ff98:	bl	1c04 <Mat_uint32Swap>
   4ff9c:	ldr	r0, [sp, #8]
   4ffa0:	cmp	r0, #5
   4ffa4:	bne	5003c <Mat_VarReadNextInfo5+0x5c8>
   4ffa8:	ldr	r0, [sp, #12]
   4ffac:	asr	r1, r0, #31
   4ffb0:	add	r0, r0, r1, lsr #30
   4ffb4:	asr	r1, r0, #2
   4ffb8:	bic	r0, r0, #3
   4ffbc:	str	r1, [r4, #4]
   4ffc0:	bl	18d0 <malloc@plt>
   4ffc4:	str	r0, [r4, #32]
   4ffc8:	ldr	r2, [r5, #20]
   4ffcc:	ldr	r1, [r4, #4]
   4ffd0:	cmp	r2, #0
   4ffd4:	beq	50014 <Mat_VarReadNextInfo5+0x5a0>
   4ffd8:	cmp	r1, #1
   4ffdc:	blt	5003c <Mat_VarReadNextInfo5+0x5c8>
   4ffe0:	mov	r6, #0
   4ffe4:	mov	r7, #0
   4ffe8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   4ffec:	add	r0, r0, r6
   4fff0:	bl	1c04 <Mat_uint32Swap>
   4fff4:	ldr	r1, [r4, #32]
   4fff8:	add	r7, r7, #1
   4fffc:	str	r0, [r1, r6]
   50000:	add	r6, r6, #4
   50004:	ldr	r0, [r4, #4]
   50008:	cmp	r7, r0
   5000c:	blt	4ffe8 <Mat_VarReadNextInfo5+0x574>
   50010:	b	5003c <Mat_VarReadNextInfo5+0x5c8>
   50014:	cmp	r1, #1
   50018:	blt	5003c <Mat_VarReadNextInfo5+0x5c8>
   5001c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   50020:	mov	r1, #0
   50024:	ldr	r3, [r2, r1, lsl #2]
   50028:	str	r3, [r0, r1, lsl #2]
   5002c:	add	r1, r1, #1
   50030:	ldr	r3, [r4, #4]
   50034:	cmp	r1, r3
   50038:	blt	50024 <Mat_VarReadNextInfo5+0x5b0>
   5003c:	ldr	r0, [sp, #4]
   50040:	cmp	r0, #0
   50044:	beq	50050 <Mat_VarReadNextInfo5+0x5dc>
   50048:	ldr	r0, [fp, #-32]	; 0xffffffe0
   5004c:	bl	1804 <free@plt>
   50050:	add	r2, sp, #8
   50054:	mov	r0, r5
   50058:	mov	r1, r4
   5005c:	bl	2d6c <InflateVarNameTag>
   50060:	ldr	r0, [r5, #20]
   50064:	cmp	r0, #0
   50068:	beq	50074 <Mat_VarReadNextInfo5+0x600>
   5006c:	add	r0, sp, #8
   50070:	bl	1c04 <Mat_uint32Swap>
   50074:	ldr	r0, [sp, #8]
   50078:	cmp	r0, #1
   5007c:	bne	5009c <Mat_VarReadNextInfo5+0x628>
   50080:	ldr	r0, [r5, #20]
   50084:	cmp	r0, #0
   50088:	beq	500e0 <Mat_VarReadNextInfo5+0x66c>
   5008c:	mov	r0, r8
   50090:	bl	1c04 <Mat_uint32Swap>
   50094:	mov	r7, r0
   50098:	b	500e4 <Mat_VarReadNextInfo5+0x670>
   5009c:	lsr	r7, r0, #16
   500a0:	cmp	r7, #4
   500a4:	bhi	50128 <Mat_VarReadNextInfo5+0x6b4>
   500a8:	uxth	r0, r0
   500ac:	cmp	r0, #1
   500b0:	bne	50128 <Mat_VarReadNextInfo5+0x6b4>
   500b4:	cmp	r7, #0
   500b8:	beq	50128 <Mat_VarReadNextInfo5+0x6b4>
   500bc:	add	r0, r7, #1
   500c0:	bl	18d0 <malloc@plt>
   500c4:	cmp	r0, #0
   500c8:	str	r0, [r4, #36]	; 0x24
   500cc:	beq	50128 <Mat_VarReadNextInfo5+0x6b4>
   500d0:	mov	r1, r8
   500d4:	mov	r2, r7
   500d8:	bl	181c <memcpy@plt>
   500dc:	b	5011c <Mat_VarReadNextInfo5+0x6a8>
   500e0:	ldr	r7, [sp, #12]
   500e4:	ands	r0, r7, #7
   500e8:	add	r1, r7, #8
   500ec:	mov	r6, r7
   500f0:	subne	r6, r1, r0
   500f4:	add	r0, r6, #1
   500f8:	bl	18d0 <malloc@plt>
   500fc:	cmp	r0, #0
   50100:	str	r0, [r4, #36]	; 0x24
   50104:	beq	50128 <Mat_VarReadNextInfo5+0x6b4>
   50108:	mov	r2, r0
   5010c:	mov	r0, r5
   50110:	mov	r1, r4
   50114:	mov	r3, r6
   50118:	bl	2ec0 <InflateVarName>
   5011c:	ldr	r0, [r4, #36]	; 0x24
   50120:	mov	r1, #0
   50124:	strb	r1, [r0, r7]
   50128:	ldr	r0, [sl]
   5012c:	cmp	r0, #1
   50130:	beq	5014c <Mat_VarReadNextInfo5+0x6d8>
   50134:	cmp	r0, #2
   50138:	bne	50158 <Mat_VarReadNextInfo5+0x6e4>
   5013c:	mov	r0, r5
   50140:	mov	r1, r4
   50144:	bl	501d8 <ReadNextStructField>
   50148:	b	50158 <Mat_VarReadNextInfo5+0x6e4>
   5014c:	mov	r0, r5
   50150:	mov	r1, r4
   50154:	bl	50f9c <ReadNextCell>
   50158:	ldr	r1, [r4, #52]	; 0x34
   5015c:	ldr	r0, [r5]
   50160:	mov	r2, #1
   50164:	ldr	r1, [r1, #12]
   50168:	ldr	r1, [r1, #4]
   5016c:	rsb	r1, r1, #0
   50170:	bl	1a2c <fseek@plt>
   50174:	ldr	r0, [r5]
   50178:	bl	1840 <ftell@plt>
   5017c:	ldr	r1, [r4, #52]	; 0x34
   50180:	cmn	r0, #1
   50184:	str	r0, [r1]
   50188:	bne	50198 <Mat_VarReadNextInfo5+0x724>
   5018c:	ldr	r0, [pc, #56]	; 501cc <Mat_VarReadNextInfo5+0x758>
   50190:	add	r0, pc, r0
   50194:	bl	19b4 <Mat_Critical@plt>
   50198:	ldr	r0, [fp, #-40]	; 0xffffffd8
   5019c:	mov	r2, #0
   501a0:	add	r0, r9, r0
   501a4:	add	r1, r0, #8
   501a8:	ldr	r0, [r5]
   501ac:	bl	1a2c <fseek@plt>
   501b0:	mov	r0, r4
   501b4:	sub	sp, fp, #28
   501b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   501bc:	.word	0x00008e50
   501c0:	.word	0x000090e5
   501c4:	.word	0x000090d8
   501c8:	.word	0x00008de7
   501cc:	.word	0x00008858
   501d0:	.word	0x00008ecc
   501d4:	.word	0x00008ff2

000501d8 <ReadNextStructField>:
   501d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   501dc:	add	fp, sp, #28
   501e0:	sub	sp, sp, #124	; 0x7c
   501e4:	mov	r9, r1
   501e8:	mov	r5, r0
   501ec:	mov	r0, #1
   501f0:	sub	r1, fp, #32
   501f4:	str	r0, [fp, #-32]	; 0xffffffe0
   501f8:	mov	r0, r9
   501fc:	bl	53824 <SafeMulDims>
   50200:	cmp	r0, #0
   50204:	beq	5021c <ReadNextStructField+0x44>
   50208:	ldr	r0, [pc, #3420]	; 50f6c <ReadNextStructField+0xd94>
   5020c:	add	r0, pc, r0
   50210:	bl	19b4 <Mat_Critical@plt>
   50214:	mov	r7, #0
   50218:	b	505ec <ReadNextStructField+0x414>
   5021c:	ldr	r0, [r9, #48]	; 0x30
   50220:	str	r5, [sp, #32]
   50224:	cmp	r0, #1
   50228:	bne	50308 <ReadNextStructField+0x130>
   5022c:	add	r4, sp, #48	; 0x30
   50230:	vmov.i32	q8, #0	; 0x00000000
   50234:	mov	r0, #48	; 0x30
   50238:	mov	r1, r4
   5023c:	mov	r2, r4
   50240:	vst1.64	{d16-d17}, [r1], r0
   50244:	add	r0, r4, #32
   50248:	vst1.64	{d16-d17}, [r0]
   5024c:	add	r0, r4, #16
   50250:	vst1.64	{d16-d17}, [r1]
   50254:	mov	r1, r9
   50258:	vst1.64	{d16-d17}, [r0]
   5025c:	mov	r0, r5
   50260:	bl	3450 <InflateFieldNameLength>
   50264:	mov	r7, r0
   50268:	ldr	r0, [r5, #20]
   5026c:	cmp	r0, #0
   50270:	beq	50284 <ReadNextStructField+0xac>
   50274:	mov	r0, r4
   50278:	bl	1c04 <Mat_uint32Swap>
   5027c:	orr	r0, r4, #4
   50280:	bl	1c04 <Mat_uint32Swap>
   50284:	ldrh	r0, [sp, #48]	; 0x30
   50288:	cmp	r0, #5
   5028c:	bne	503c4 <ReadNextStructField+0x1ec>
   50290:	ldr	r8, [sp, #52]	; 0x34
   50294:	mov	r0, r5
   50298:	mov	r1, r9
   5029c:	mov	r2, r4
   502a0:	bl	35a4 <InflateFieldNamesTag>
   502a4:	mov	r6, r0
   502a8:	ldr	r0, [r5, #20]
   502ac:	orr	sl, r4, #4
   502b0:	cmp	r0, #0
   502b4:	beq	502c8 <ReadNextStructField+0xf0>
   502b8:	add	r0, sp, #48	; 0x30
   502bc:	bl	1c04 <Mat_uint32Swap>
   502c0:	mov	r0, sl
   502c4:	bl	1c04 <Mat_uint32Swap>
   502c8:	ldr	r1, [sp, #52]	; 0x34
   502cc:	add	r7, r6, r7
   502d0:	mov	r0, #4
   502d4:	str	r0, [r9, #12]
   502d8:	udiv	r6, r1, r8
   502dc:	str	r1, [sp, #28]
   502e0:	mul	r0, r6, r8
   502e4:	ands	r4, r0, #7
   502e8:	rsbne	r4, r4, #8
   502ec:	cmp	r8, r1
   502f0:	bls	503d0 <ReadNextStructField+0x1f8>
   502f4:	ldr	r0, [r9, #52]	; 0x34
   502f8:	mov	r1, #0
   502fc:	str	r1, [r0, #4]
   50300:	str	r1, [r0, #8]
   50304:	b	504ac <ReadNextStructField+0x2d4>
   50308:	ldr	r3, [r5]
   5030c:	add	r6, sp, #48	; 0x30
   50310:	mov	r1, #4
   50314:	mov	r2, #2
   50318:	mov	r0, r6
   5031c:	bl	18b8 <fread@plt>
   50320:	mov	r7, r0
   50324:	ldr	r0, [r5, #20]
   50328:	cmp	r0, #0
   5032c:	beq	50340 <ReadNextStructField+0x168>
   50330:	mov	r0, r6
   50334:	bl	1c04 <Mat_uint32Swap>
   50338:	add	r0, r6, #4
   5033c:	bl	1c04 <Mat_uint32Swap>
   50340:	ldrh	r0, [sp, #48]	; 0x30
   50344:	cmp	r0, #5
   50348:	bne	503c4 <ReadNextStructField+0x1ec>
   5034c:	ldr	r3, [r5]
   50350:	ldr	r4, [sp, #52]	; 0x34
   50354:	mov	r0, r6
   50358:	mov	r1, #4
   5035c:	mov	r2, #2
   50360:	mov	r8, #4
   50364:	bl	18b8 <fread@plt>
   50368:	mov	sl, r0
   5036c:	ldr	r0, [r5, #20]
   50370:	add	r6, r6, #4
   50374:	cmp	r0, #0
   50378:	beq	5038c <ReadNextStructField+0x1b4>
   5037c:	add	r0, sp, #48	; 0x30
   50380:	bl	1c04 <Mat_uint32Swap>
   50384:	mov	r0, r6
   50388:	bl	1c04 <Mat_uint32Swap>
   5038c:	ldr	r0, [sp, #52]	; 0x34
   50390:	str	r8, [r9, #12]
   50394:	add	r7, sl, r7
   50398:	str	r6, [sp, #24]
   5039c:	ldr	r5, [r9, #52]	; 0x34
   503a0:	str	r7, [sp, #40]	; 0x28
   503a4:	udiv	sl, r0, r4
   503a8:	cmp	r4, r0
   503ac:	str	r0, [sp, #28]
   503b0:	bls	504ec <ReadNextStructField+0x314>
   503b4:	mov	r0, #0
   503b8:	str	r0, [r5, #4]
   503bc:	str	r0, [r5, #8]
   503c0:	b	5057c <ReadNextStructField+0x3a4>
   503c4:	ldr	r0, [pc, #3020]	; 50f98 <ReadNextStructField+0xdc0>
   503c8:	add	r0, pc, r0
   503cc:	b	504e4 <ReadNextStructField+0x30c>
   503d0:	add	r0, r4, r0
   503d4:	str	sl, [sp, #24]
   503d8:	bl	18d0 <malloc@plt>
   503dc:	cmp	r0, #0
   503e0:	beq	504a8 <ReadNextStructField+0x2d0>
   503e4:	mov	sl, r0
   503e8:	mov	r0, r5
   503ec:	mov	r1, r9
   503f0:	mov	r3, r6
   503f4:	str	r7, [sp, #40]	; 0x28
   503f8:	str	r8, [sp]
   503fc:	str	r4, [sp, #4]
   50400:	mov	r2, sl
   50404:	bl	36f8 <InflateFieldNames>
   50408:	ldr	r4, [r9, #52]	; 0x34
   5040c:	str	r0, [sp, #36]	; 0x24
   50410:	mov	r0, r6
   50414:	mov	r1, #4
   50418:	str	r6, [r4, #4]
   5041c:	bl	1798 <calloc@plt>
   50420:	cmp	r0, #0
   50424:	mov	r5, sl
   50428:	str	r0, [r4, #8]
   5042c:	beq	50494 <ReadNextStructField+0x2bc>
   50430:	sub	r4, r8, #1
   50434:	mov	r7, r5
   50438:	mov	sl, #0
   5043c:	mov	r0, r8
   50440:	bl	18d0 <malloc@plt>
   50444:	ldr	r1, [r9, #52]	; 0x34
   50448:	ldr	r1, [r1, #8]
   5044c:	str	r0, [r1, sl, lsl #2]
   50450:	ldr	r0, [r9, #52]	; 0x34
   50454:	ldr	r0, [r0, #8]
   50458:	ldr	r0, [r0, sl, lsl #2]
   5045c:	cmp	r0, #0
   50460:	beq	50484 <ReadNextStructField+0x2ac>
   50464:	mov	r1, r7
   50468:	mov	r2, r8
   5046c:	bl	181c <memcpy@plt>
   50470:	ldr	r0, [r9, #52]	; 0x34
   50474:	mov	r1, #0
   50478:	ldr	r0, [r0, #8]
   5047c:	ldr	r0, [r0, sl, lsl #2]
   50480:	strb	r1, [r0, r4]
   50484:	add	sl, sl, #1
   50488:	add	r7, r7, r8
   5048c:	cmp	sl, r6
   50490:	bcc	5043c <ReadNextStructField+0x264>
   50494:	ldr	r7, [sp, #40]	; 0x28
   50498:	ldr	r0, [sp, #36]	; 0x24
   5049c:	add	r7, r0, r7
   504a0:	mov	r0, r5
   504a4:	bl	1804 <free@plt>
   504a8:	ldr	sl, [sp, #24]
   504ac:	ldr	r1, [fp, #-32]	; 0xffffffe0
   504b0:	sub	r0, fp, #36	; 0x24
   504b4:	mov	r2, r6
   504b8:	bl	53884 <SafeMul>
   504bc:	cmp	r0, #0
   504c0:	bne	504dc <ReadNextStructField+0x304>
   504c4:	ldr	r2, [r9, #12]
   504c8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   504cc:	mov	r0, r9
   504d0:	bl	53884 <SafeMul>
   504d4:	cmp	r0, #0
   504d8:	beq	505f8 <ReadNextStructField+0x420>
   504dc:	ldr	r0, [pc, #2700]	; 50f70 <ReadNextStructField+0xd98>
   504e0:	add	r0, pc, r0
   504e4:	bl	19b4 <Mat_Critical@plt>
   504e8:	b	505ec <ReadNextStructField+0x414>
   504ec:	mov	r0, sl
   504f0:	mov	r1, #4
   504f4:	str	sl, [r5, #4]
   504f8:	bl	1798 <calloc@plt>
   504fc:	cmp	r0, #0
   50500:	str	r0, [r5, #8]
   50504:	beq	5057c <ReadNextStructField+0x3a4>
   50508:	ldr	r5, [sp, #32]
   5050c:	sub	r7, r4, #1
   50510:	mov	r6, #0
   50514:	mov	r8, #0
   50518:	mov	r0, r4
   5051c:	bl	18d0 <malloc@plt>
   50520:	ldr	r1, [r9, #52]	; 0x34
   50524:	ldr	r1, [r1, #8]
   50528:	str	r0, [r1, r8, lsl #2]
   5052c:	ldr	r0, [r9, #52]	; 0x34
   50530:	ldr	r0, [r0, #8]
   50534:	ldr	r0, [r0, r8, lsl #2]
   50538:	cmp	r0, #0
   5053c:	beq	5056c <ReadNextStructField+0x394>
   50540:	ldr	r3, [r5]
   50544:	mov	r1, #1
   50548:	mov	r2, r4
   5054c:	bl	18b8 <fread@plt>
   50550:	ldr	r1, [r9, #52]	; 0x34
   50554:	ldr	r1, [r1, #8]
   50558:	ldr	r1, [r1, r8, lsl #2]
   5055c:	strb	r6, [r1, r7]
   50560:	ldr	r1, [sp, #40]	; 0x28
   50564:	add	r1, r0, r1
   50568:	str	r1, [sp, #40]	; 0x28
   5056c:	add	r8, r8, #1
   50570:	cmp	r8, sl
   50574:	bcc	50518 <ReadNextStructField+0x340>
   50578:	b	50580 <ReadNextStructField+0x3a8>
   5057c:	ldr	r5, [sp, #32]
   50580:	mul	r0, sl, r4
   50584:	ands	r1, r0, #7
   50588:	beq	505ac <ReadNextStructField+0x3d4>
   5058c:	ldr	r0, [r5]
   50590:	rsb	r7, r1, #8
   50594:	mov	r2, #1
   50598:	mov	r1, r7
   5059c:	bl	1a2c <fseek@plt>
   505a0:	ldr	r0, [sp, #40]	; 0x28
   505a4:	add	r0, r0, r7
   505a8:	str	r0, [sp, #40]	; 0x28
   505ac:	ldr	r1, [fp, #-32]	; 0xffffffe0
   505b0:	sub	r0, fp, #36	; 0x24
   505b4:	mov	r2, sl
   505b8:	bl	53884 <SafeMul>
   505bc:	cmp	r0, #0
   505c0:	bne	505dc <ReadNextStructField+0x404>
   505c4:	ldr	r2, [r9, #12]
   505c8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   505cc:	mov	r0, r9
   505d0:	bl	53884 <SafeMul>
   505d4:	cmp	r0, #0
   505d8:	beq	50684 <ReadNextStructField+0x4ac>
   505dc:	ldr	r0, [pc, #2472]	; 50f8c <ReadNextStructField+0xdb4>
   505e0:	add	r0, pc, r0
   505e4:	bl	19b4 <Mat_Critical@plt>
   505e8:	ldr	r7, [sp, #40]	; 0x28
   505ec:	mov	r0, r7
   505f0:	sub	sp, fp, #28
   505f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   505f8:	ldr	r0, [r9]
   505fc:	cmp	r0, #0
   50600:	beq	505ec <ReadNextStructField+0x414>
   50604:	ldr	r1, [r9, #12]
   50608:	ldr	r0, [fp, #-36]	; 0xffffffdc
   5060c:	bl	1798 <calloc@plt>
   50610:	cmp	r0, #0
   50614:	str	r0, [r9, #40]	; 0x28
   50618:	str	r0, [sp, #36]	; 0x24
   5061c:	beq	509c4 <ReadNextStructField+0x7ec>
   50620:	ldr	r0, [fp, #-32]	; 0xffffffe0
   50624:	str	sl, [sp, #24]
   50628:	str	r7, [sp, #40]	; 0x28
   5062c:	cmp	r0, #0
   50630:	beq	509d0 <ReadNextStructField+0x7f8>
   50634:	mov	r7, #0
   50638:	str	r8, [sp, #20]
   5063c:	ldr	r1, [sp, #28]
   50640:	cmp	r8, r1
   50644:	bhi	50674 <ReadNextStructField+0x49c>
   50648:	ldr	r8, [sp, #36]	; 0x24
   5064c:	mul	r4, r7, r6
   50650:	mov	r5, #0
   50654:	add	sl, r5, r4
   50658:	bl	18a0 <Mat_VarCalloc@plt>
   5065c:	add	r5, r5, #1
   50660:	str	r0, [r8, sl, lsl #2]
   50664:	cmp	r5, r6
   50668:	bcc	50654 <ReadNextStructField+0x47c>
   5066c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   50670:	ldr	r8, [sp, #20]
   50674:	add	r7, r7, #1
   50678:	cmp	r7, r0
   5067c:	bcc	5063c <ReadNextStructField+0x464>
   50680:	b	509d4 <ReadNextStructField+0x7fc>
   50684:	ldr	r0, [r9]
   50688:	cmp	r0, #0
   5068c:	beq	505e8 <ReadNextStructField+0x410>
   50690:	bl	18d0 <malloc@plt>
   50694:	cmp	r0, #0
   50698:	str	r0, [r9, #40]	; 0x28
   5069c:	str	r0, [sp, #36]	; 0x24
   506a0:	beq	505e8 <ReadNextStructField+0x410>
   506a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   506a8:	cmp	r0, #0
   506ac:	beq	5076c <ReadNextStructField+0x594>
   506b0:	mov	r6, #0
   506b4:	str	r4, [sp, #20]
   506b8:	ldr	r1, [sp, #28]
   506bc:	cmp	r4, r1
   506c0:	bhi	506f0 <ReadNextStructField+0x518>
   506c4:	ldr	r4, [sp, #36]	; 0x24
   506c8:	mul	r5, r6, sl
   506cc:	mov	r7, #0
   506d0:	add	r8, r7, r5
   506d4:	bl	18a0 <Mat_VarCalloc@plt>
   506d8:	add	r7, r7, #1
   506dc:	str	r0, [r4, r8, lsl #2]
   506e0:	cmp	r7, sl
   506e4:	bcc	506d0 <ReadNextStructField+0x4f8>
   506e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   506ec:	ldr	r4, [sp, #20]
   506f0:	add	r6, r6, #1
   506f4:	cmp	r6, r0
   506f8:	bcc	506b8 <ReadNextStructField+0x4e0>
   506fc:	ldr	r1, [r9, #52]	; 0x34
   50700:	ldr	r1, [r1, #8]
   50704:	cmp	r1, #0
   50708:	cmpne	r0, #0
   5070c:	beq	5076c <ReadNextStructField+0x594>
   50710:	mov	r8, #0
   50714:	ldr	r0, [sp, #28]
   50718:	cmp	r4, r0
   5071c:	bhi	5075c <ReadNextStructField+0x584>
   50720:	mul	r6, r8, sl
   50724:	mov	r5, #0
   50728:	ldr	r0, [r9, #52]	; 0x34
   5072c:	ldr	r0, [r0, #8]
   50730:	ldr	r0, [r0, r5, lsl #2]
   50734:	cmp	r0, #0
   50738:	beq	50750 <ReadNextStructField+0x578>
   5073c:	add	r7, r5, r6
   50740:	bl	1864 <strdup@plt>
   50744:	ldr	r1, [sp, #36]	; 0x24
   50748:	ldr	r1, [r1, r7, lsl #2]
   5074c:	str	r0, [r1, #36]	; 0x24
   50750:	add	r5, r5, #1
   50754:	cmp	r5, sl
   50758:	bcc	50728 <ReadNextStructField+0x550>
   5075c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   50760:	add	r8, r8, #1
   50764:	cmp	r8, r0
   50768:	bcc	50714 <ReadNextStructField+0x53c>
   5076c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   50770:	ldr	r7, [sp, #40]	; 0x28
   50774:	cmp	r0, #0
   50778:	beq	505ec <ReadNextStructField+0x414>
   5077c:	add	r6, sp, #48	; 0x30
   50780:	ldr	r5, [sp, #32]
   50784:	ldr	sl, [sp, #36]	; 0x24
   50788:	mov	r8, #0
   5078c:	mov	r4, #0
   50790:	add	r0, r6, #20
   50794:	str	r0, [sp, #28]
   50798:	add	r0, r6, #16
   5079c:	str	r0, [sp, #20]
   507a0:	add	r0, r6, #12
   507a4:	str	r0, [sp, #16]
   507a8:	add	r0, r6, #8
   507ac:	str	r0, [sp, #12]
   507b0:	ldr	r3, [r5]
   507b4:	mov	r0, r6
   507b8:	mov	r1, #4
   507bc:	mov	r2, #2
   507c0:	bl	18b8 <fread@plt>
   507c4:	mov	r1, r5
   507c8:	mov	r5, r0
   507cc:	ldr	r0, [r1, #20]
   507d0:	cmp	r0, #0
   507d4:	beq	507e8 <ReadNextStructField+0x610>
   507d8:	mov	r0, r6
   507dc:	bl	1c04 <Mat_uint32Swap>
   507e0:	ldr	r0, [sp, #24]
   507e4:	bl	1c04 <Mat_uint32Swap>
   507e8:	ldr	r0, [sp, #48]	; 0x30
   507ec:	add	r7, r5, r7
   507f0:	cmp	r0, #14
   507f4:	bne	50f38 <ReadNextStructField+0xd60>
   507f8:	ldr	r0, [sp, #52]	; 0x34
   507fc:	ldr	r5, [sp, #32]
   50800:	cmp	r0, #0
   50804:	beq	508b8 <ReadNextStructField+0x6e0>
   50808:	ldr	r3, [r5]
   5080c:	str	r0, [sp, #40]	; 0x28
   50810:	mov	r0, r6
   50814:	mov	r1, #4
   50818:	mov	r2, #6
   5081c:	bl	18b8 <fread@plt>
   50820:	mov	r1, r5
   50824:	mov	r5, r0
   50828:	ldr	r0, [r1, #20]
   5082c:	cmp	r0, #0
   50830:	beq	50864 <ReadNextStructField+0x68c>
   50834:	mov	r0, r6
   50838:	bl	1c04 <Mat_uint32Swap>
   5083c:	ldr	r0, [sp, #24]
   50840:	bl	1c04 <Mat_uint32Swap>
   50844:	ldr	r0, [sp, #12]
   50848:	bl	1c04 <Mat_uint32Swap>
   5084c:	ldr	r0, [sp, #16]
   50850:	bl	1c04 <Mat_uint32Swap>
   50854:	ldr	r0, [sp, #20]
   50858:	bl	1c04 <Mat_uint32Swap>
   5085c:	ldr	r0, [sp, #28]
   50860:	bl	1c04 <Mat_uint32Swap>
   50864:	ldr	r0, [sp, #48]	; 0x30
   50868:	add	r9, r5, r7
   5086c:	cmp	r0, #6
   50870:	bne	508d4 <ReadNextStructField+0x6fc>
   50874:	ldr	r0, [sp, #56]	; 0x38
   50878:	ldr	r1, [sl, r4, lsl #2]!
   5087c:	mov	r6, #0
   50880:	and	r2, r0, #2048	; 0x800
   50884:	and	r3, r0, #1024	; 0x400
   50888:	and	r7, r0, #512	; 0x200
   5088c:	uxtb	r0, r0
   50890:	add	ip, r1, #16
   50894:	cmp	r0, #18
   50898:	movcs	r0, r6
   5089c:	mov	r6, sl
   508a0:	stm	ip, {r0, r2, r3, r7}
   508a4:	cmp	r0, #5
   508a8:	ldreq	r0, [sp, #60]	; 0x3c
   508ac:	ldr	r5, [sp, #32]
   508b0:	streq	r0, [r1]
   508b4:	b	508e0 <ReadNextStructField+0x708>
   508b8:	ldr	r0, [sl, r4, lsl #2]
   508bc:	ldr	r0, [r0, #52]	; 0x34
   508c0:	bl	1804 <free@plt>
   508c4:	ldr	r0, [sl, r4, lsl #2]
   508c8:	mov	r1, #0
   508cc:	str	r1, [r0, #52]	; 0x34
   508d0:	b	509ac <ReadNextStructField+0x7d4>
   508d4:	ldr	r1, [sl, r4, lsl #2]
   508d8:	ldr	r5, [sp, #32]
   508dc:	add	r6, sl, r8
   508e0:	ldr	r2, [sp, #64]	; 0x40
   508e4:	ldr	r3, [sp, #68]	; 0x44
   508e8:	mov	r0, r5
   508ec:	bl	519e4 <ReadRankDims>
   508f0:	ldr	r3, [r5]
   508f4:	mov	sl, r0
   508f8:	add	r0, sp, #48	; 0x30
   508fc:	mov	r1, #1
   50900:	mov	r2, #8
   50904:	bl	18b8 <fread@plt>
   50908:	mov	r1, r5
   5090c:	mov	r5, r0
   50910:	ldr	r0, [r1]
   50914:	bl	1840 <ftell@plt>
   50918:	ldr	r1, [r6]
   5091c:	cmn	r0, #1
   50920:	ldr	r2, [r1, #52]	; 0x34
   50924:	str	r0, [r2]
   50928:	add	r2, r9, sl
   5092c:	add	r7, r2, r5
   50930:	beq	50958 <ReadNextStructField+0x780>
   50934:	ldr	r0, [r1, #16]
   50938:	cmp	r0, #1
   5093c:	beq	5096c <ReadNextStructField+0x794>
   50940:	ldr	r5, [sp, #32]
   50944:	cmp	r0, #2
   50948:	bne	5097c <ReadNextStructField+0x7a4>
   5094c:	mov	r0, r5
   50950:	bl	501d8 <ReadNextStructField>
   50954:	b	50978 <ReadNextStructField+0x7a0>
   50958:	ldr	r0, [pc, #1588]	; 50f94 <ReadNextStructField+0xdbc>
   5095c:	add	r0, pc, r0
   50960:	bl	19b4 <Mat_Critical@plt>
   50964:	ldr	r5, [sp, #32]
   50968:	b	509a4 <ReadNextStructField+0x7cc>
   5096c:	ldr	r5, [sp, #32]
   50970:	mov	r0, r5
   50974:	bl	50f9c <ReadNextCell>
   50978:	add	r7, r0, r7
   5097c:	ldr	r1, [r6]
   50980:	ldr	r0, [sp, #40]	; 0x28
   50984:	mov	r2, #0
   50988:	ldr	r1, [r1, #52]	; 0x34
   5098c:	sub	r0, r0, #32
   50990:	sub	r0, r0, sl
   50994:	ldr	r1, [r1]
   50998:	add	r1, r0, r1
   5099c:	ldr	r0, [r5]
   509a0:	bl	1a2c <fseek@plt>
   509a4:	ldr	sl, [sp, #36]	; 0x24
   509a8:	add	r6, sp, #48	; 0x30
   509ac:	ldr	r0, [fp, #-36]	; 0xffffffdc
   509b0:	add	r4, r4, #1
   509b4:	add	r8, r8, #4
   509b8:	cmp	r4, r0
   509bc:	bcc	507b0 <ReadNextStructField+0x5d8>
   509c0:	b	505ec <ReadNextStructField+0x414>
   509c4:	ldr	r0, [pc, #1448]	; 50f74 <ReadNextStructField+0xd9c>
   509c8:	add	r0, pc, r0
   509cc:	b	504e4 <ReadNextStructField+0x30c>
   509d0:	mov	r0, #0
   509d4:	ldr	r1, [r9, #52]	; 0x34
   509d8:	ldr	r1, [r1, #8]
   509dc:	cmp	r1, #0
   509e0:	cmpne	r0, #0
   509e4:	beq	50a44 <ReadNextStructField+0x86c>
   509e8:	mov	sl, #0
   509ec:	ldr	r0, [sp, #28]
   509f0:	cmp	r8, r0
   509f4:	bhi	50a34 <ReadNextStructField+0x85c>
   509f8:	mul	r4, sl, r6
   509fc:	mov	r5, #0
   50a00:	ldr	r0, [r9, #52]	; 0x34
   50a04:	ldr	r0, [r0, #8]
   50a08:	ldr	r0, [r0, r5, lsl #2]
   50a0c:	cmp	r0, #0
   50a10:	beq	50a28 <ReadNextStructField+0x850>
   50a14:	add	r7, r5, r4
   50a18:	bl	1864 <strdup@plt>
   50a1c:	ldr	r1, [sp, #36]	; 0x24
   50a20:	ldr	r1, [r1, r7, lsl #2]
   50a24:	str	r0, [r1, #36]	; 0x24
   50a28:	add	r5, r5, #1
   50a2c:	cmp	r5, r6
   50a30:	bcc	50a00 <ReadNextStructField+0x828>
   50a34:	ldr	r0, [fp, #-32]	; 0xffffffe0
   50a38:	add	sl, sl, #1
   50a3c:	cmp	sl, r0
   50a40:	bcc	509ec <ReadNextStructField+0x814>
   50a44:	ldr	r0, [fp, #-36]	; 0xffffffdc
   50a48:	cmp	r0, #0
   50a4c:	beq	505e8 <ReadNextStructField+0x410>
   50a50:	ldr	r7, [sp, #40]	; 0x28
   50a54:	ldr	sl, [sp, #24]
   50a58:	add	r5, sp, #48	; 0x30
   50a5c:	mov	r8, #0
   50a60:	add	r0, r5, #12
   50a64:	str	r0, [sp, #16]
   50a68:	add	r0, r5, #8
   50a6c:	str	r0, [sp, #20]
   50a70:	ldr	r6, [sp, #32]
   50a74:	mov	r1, r9
   50a78:	mov	r2, r5
   50a7c:	mov	r0, r6
   50a80:	bl	27d8 <InflateVarTag>
   50a84:	mov	r4, r0
   50a88:	ldr	r0, [r6, #20]
   50a8c:	cmp	r0, #0
   50a90:	beq	50aa4 <ReadNextStructField+0x8cc>
   50a94:	mov	r0, r5
   50a98:	bl	1c04 <Mat_uint32Swap>
   50a9c:	mov	r0, sl
   50aa0:	bl	1c04 <Mat_uint32Swap>
   50aa4:	ldr	r0, [sp, #48]	; 0x30
   50aa8:	add	r7, r4, r7
   50aac:	cmp	r0, #14
   50ab0:	bne	50b78 <ReadNextStructField+0x9a0>
   50ab4:	ldr	r4, [sp, #36]	; 0x24
   50ab8:	ldr	sl, [sp, #52]	; 0x34
   50abc:	ldr	r0, [r4, r8, lsl #2]
   50ac0:	cmp	sl, #0
   50ac4:	beq	50ba0 <ReadNextStructField+0x9c8>
   50ac8:	ldr	r6, [sp, #32]
   50acc:	mov	r1, #1
   50ad0:	add	r5, sp, #48	; 0x30
   50ad4:	str	r1, [r0, #48]	; 0x30
   50ad8:	mov	r1, r9
   50adc:	mov	r2, r5
   50ae0:	mov	r0, r6
   50ae4:	bl	292c <InflateArrayFlags>
   50ae8:	mov	r4, r0
   50aec:	ldr	r0, [r6, #20]
   50af0:	cmp	r0, #0
   50af4:	beq	50b18 <ReadNextStructField+0x940>
   50af8:	mov	r0, r5
   50afc:	bl	1c04 <Mat_uint32Swap>
   50b00:	ldr	r0, [sp, #24]
   50b04:	bl	1c04 <Mat_uint32Swap>
   50b08:	ldr	r0, [sp, #20]
   50b0c:	bl	1c04 <Mat_uint32Swap>
   50b10:	ldr	r0, [sp, #16]
   50b14:	bl	1c04 <Mat_uint32Swap>
   50b18:	ldr	r1, [sp, #48]	; 0x30
   50b1c:	add	r6, r4, r7
   50b20:	sub	r4, sl, #16
   50b24:	cmp	r1, #6
   50b28:	bne	50bb8 <ReadNextStructField+0x9e0>
   50b2c:	ldr	r0, [sp, #36]	; 0x24
   50b30:	mov	r5, r6
   50b34:	mov	r6, #0
   50b38:	ldr	r1, [r0, r8, lsl #2]
   50b3c:	ldr	r0, [sp, #56]	; 0x38
   50b40:	and	r2, r0, #2048	; 0x800
   50b44:	and	r3, r0, #1024	; 0x400
   50b48:	and	r7, r0, #512	; 0x200
   50b4c:	uxtb	r0, r0
   50b50:	add	ip, r1, #16
   50b54:	cmp	r0, #18
   50b58:	movcs	r0, r6
   50b5c:	cmp	r0, #5
   50b60:	stm	ip, {r0, r2, r3, r7}
   50b64:	bne	50bf4 <ReadNextStructField+0xa1c>
   50b68:	ldr	r0, [sp, #60]	; 0x3c
   50b6c:	mov	r6, r5
   50b70:	str	r0, [r1]
   50b74:	b	50c00 <ReadNextStructField+0xa28>
   50b78:	ldr	r4, [sp, #36]	; 0x24
   50b7c:	ldr	r0, [r4, r8, lsl #2]
   50b80:	bl	1918 <Mat_VarFree@plt>
   50b84:	mov	r0, #0
   50b88:	mov	r1, r8
   50b8c:	str	r0, [r4, r8, lsl #2]
   50b90:	ldr	r0, [pc, #992]	; 50f78 <ReadNextStructField+0xda0>
   50b94:	add	r0, pc, r0
   50b98:	bl	19b4 <Mat_Critical@plt>
   50b9c:	b	50f24 <ReadNextStructField+0xd4c>
   50ba0:	ldr	r0, [r0, #52]	; 0x34
   50ba4:	bl	1804 <free@plt>
   50ba8:	ldr	r0, [r4, r8, lsl #2]
   50bac:	mov	r1, #0
   50bb0:	str	r1, [r0, #52]	; 0x34
   50bb4:	b	50f1c <ReadNextStructField+0xd44>
   50bb8:	ldr	r0, [pc, #956]	; 50f7c <ReadNextStructField+0xda4>
   50bbc:	add	r0, pc, r0
   50bc0:	bl	19b4 <Mat_Critical@plt>
   50bc4:	ldr	r0, [r9, #52]	; 0x34
   50bc8:	mov	r2, r4
   50bcc:	ldr	r1, [r0, #12]
   50bd0:	ldr	r0, [sp, #32]
   50bd4:	bl	240c <InflateSkip>
   50bd8:	add	r6, r0, r6
   50bdc:	ldr	r0, [sp, #36]	; 0x24
   50be0:	ldr	r0, [r0, r8, lsl #2]
   50be4:	ldr	r0, [r0, #16]
   50be8:	cmp	r0, #17
   50bec:	bne	50c00 <ReadNextStructField+0xa28>
   50bf0:	b	50f04 <ReadNextStructField+0xd2c>
   50bf4:	mov	r6, r5
   50bf8:	cmp	r0, #17
   50bfc:	beq	50f04 <ReadNextStructField+0xd2c>
   50c00:	ldr	r7, [sp, #32]
   50c04:	mov	r0, #0
   50c08:	mov	r1, r9
   50c0c:	add	r2, sp, #48	; 0x30
   50c10:	mov	r3, #64	; 0x40
   50c14:	str	r0, [sp, #44]	; 0x2c
   50c18:	add	r0, sp, #44	; 0x2c
   50c1c:	str	r0, [sp]
   50c20:	mov	r0, r7
   50c24:	bl	2a80 <InflateRankDims>
   50c28:	str	r0, [sp, #28]
   50c2c:	ldr	r0, [sp, #44]	; 0x2c
   50c30:	mov	r4, #1
   50c34:	cmp	r0, #0
   50c38:	ldreq	r0, [sp, #20]
   50c3c:	moveq	r4, #0
   50c40:	streq	r0, [sp, #44]	; 0x2c
   50c44:	ldr	r0, [r7, #20]
   50c48:	cmp	r0, #0
   50c4c:	beq	50c60 <ReadNextStructField+0xa88>
   50c50:	add	r0, sp, #48	; 0x30
   50c54:	bl	1c04 <Mat_uint32Swap>
   50c58:	ldr	r0, [sp, #24]
   50c5c:	bl	1c04 <Mat_uint32Swap>
   50c60:	ldr	r0, [sp, #48]	; 0x30
   50c64:	sub	sl, sl, #24
   50c68:	str	r4, [sp, #40]	; 0x28
   50c6c:	cmp	r0, #5
   50c70:	bne	50d00 <ReadNextStructField+0xb28>
   50c74:	ldr	r5, [sp, #36]	; 0x24
   50c78:	ldr	r7, [sp, #52]	; 0x34
   50c7c:	str	r6, [sp, #12]
   50c80:	ldr	r6, [r5, r8, lsl #2]
   50c84:	asr	r0, r7, #31
   50c88:	add	r0, r7, r0, lsr #30
   50c8c:	asr	r1, r0, #2
   50c90:	bic	r0, r0, #3
   50c94:	str	r1, [r6, #4]
   50c98:	bl	18d0 <malloc@plt>
   50c9c:	str	r0, [r6, #32]
   50ca0:	ldr	r2, [sp, #32]
   50ca4:	sub	sl, sl, r7
   50ca8:	add	r4, sp, #48	; 0x30
   50cac:	ldr	r1, [r5, r8, lsl #2]
   50cb0:	ldr	r2, [r2, #20]
   50cb4:	ldr	r0, [r1, #4]
   50cb8:	cmp	r2, #0
   50cbc:	beq	50d0c <ReadNextStructField+0xb34>
   50cc0:	cmp	r0, #1
   50cc4:	blt	50d38 <ReadNextStructField+0xb60>
   50cc8:	mov	r7, #0
   50ccc:	mov	r6, #0
   50cd0:	ldr	r0, [sp, #44]	; 0x2c
   50cd4:	add	r0, r0, r7
   50cd8:	bl	1c04 <Mat_uint32Swap>
   50cdc:	ldr	r1, [r5, r8, lsl #2]
   50ce0:	add	r6, r6, #1
   50ce4:	ldr	r2, [r1, #32]
   50ce8:	str	r0, [r2, r7]
   50cec:	add	r7, r7, #4
   50cf0:	ldr	r0, [r1, #4]
   50cf4:	cmp	r6, r0
   50cf8:	blt	50cd0 <ReadNextStructField+0xaf8>
   50cfc:	b	50d38 <ReadNextStructField+0xb60>
   50d00:	ldr	r5, [sp, #36]	; 0x24
   50d04:	add	r4, sp, #48	; 0x30
   50d08:	b	50d44 <ReadNextStructField+0xb6c>
   50d0c:	cmp	r0, #1
   50d10:	blt	50d38 <ReadNextStructField+0xb60>
   50d14:	ldr	r2, [r1, #32]
   50d18:	ldr	r7, [sp, #44]	; 0x2c
   50d1c:	mov	r3, #0
   50d20:	ldr	r0, [r7, r3, lsl #2]
   50d24:	str	r0, [r2, r3, lsl #2]
   50d28:	add	r3, r3, #1
   50d2c:	ldr	r0, [r1, #4]
   50d30:	cmp	r3, r0
   50d34:	blt	50d20 <ReadNextStructField+0xb48>
   50d38:	ldr	r6, [sp, #12]
   50d3c:	tst	r0, #1
   50d40:	subne	sl, sl, #4
   50d44:	ldr	r0, [sp, #28]
   50d48:	add	r7, r0, r6
   50d4c:	ldr	r0, [sp, #40]	; 0x28
   50d50:	cmp	r0, #0
   50d54:	beq	50d60 <ReadNextStructField+0xb88>
   50d58:	ldr	r0, [sp, #44]	; 0x2c
   50d5c:	bl	1804 <free@plt>
   50d60:	ldr	r0, [sp, #32]
   50d64:	mov	r1, r9
   50d68:	mov	r2, r4
   50d6c:	bl	2d6c <InflateVarNameTag>
   50d70:	mov	r4, r0
   50d74:	mov	r0, #1
   50d78:	mov	r1, #56	; 0x38
   50d7c:	bl	1798 <calloc@plt>
   50d80:	ldr	r1, [r5, r8, lsl #2]
   50d84:	add	r6, r7, r4
   50d88:	ldr	r1, [r1, #52]	; 0x34
   50d8c:	str	r0, [r1, #12]
   50d90:	ldr	r0, [r5, r8, lsl #2]
   50d94:	ldr	r0, [r0, #52]	; 0x34
   50d98:	ldr	r0, [r0, #12]
   50d9c:	cmp	r0, #0
   50da0:	beq	50dd0 <ReadNextStructField+0xbf8>
   50da4:	ldr	r1, [r9, #52]	; 0x34
   50da8:	ldr	r1, [r1, #12]
   50dac:	bl	1948 <inflateCopy@plt>
   50db0:	cmp	r0, #0
   50db4:	beq	50de0 <ReadNextStructField+0xc08>
   50db8:	bl	1888 <zError@plt>
   50dbc:	mov	r1, r0
   50dc0:	ldr	r0, [pc, #444]	; 50f84 <ReadNextStructField+0xdac>
   50dc4:	add	r0, pc, r0
   50dc8:	bl	19b4 <Mat_Critical@plt>
   50dcc:	b	50f00 <ReadNextStructField+0xd28>
   50dd0:	ldr	r0, [pc, #432]	; 50f88 <ReadNextStructField+0xdb0>
   50dd4:	add	r0, pc, r0
   50dd8:	bl	19b4 <Mat_Critical@plt>
   50ddc:	b	50f00 <ReadNextStructField+0xd28>
   50de0:	ldr	r0, [sp, #32]
   50de4:	ldr	r0, [r0]
   50de8:	bl	1840 <ftell@plt>
   50dec:	ldr	r1, [r5, r8, lsl #2]
   50df0:	cmn	r0, #1
   50df4:	ldr	r2, [r1, #52]	; 0x34
   50df8:	str	r0, [r2]
   50dfc:	beq	50e3c <ReadNextStructField+0xc64>
   50e00:	ldr	r3, [r9, #52]	; 0x34
   50e04:	ldr	r3, [r3, #12]
   50e08:	ldr	r3, [r3, #4]
   50e0c:	sub	r0, r0, r3
   50e10:	str	r0, [r2]
   50e14:	ldr	r0, [r1, #16]
   50e18:	cmp	r0, #1
   50e1c:	beq	50e4c <ReadNextStructField+0xc74>
   50e20:	cmp	r0, #2
   50e24:	bne	50e60 <ReadNextStructField+0xc88>
   50e28:	ldr	r4, [sp, #32]
   50e2c:	mov	r0, r4
   50e30:	bl	501d8 <ReadNextStructField>
   50e34:	add	r6, r0, r6
   50e38:	b	50e9c <ReadNextStructField+0xcc4>
   50e3c:	ldr	r0, [pc, #316]	; 50f80 <ReadNextStructField+0xda8>
   50e40:	add	r0, pc, r0
   50e44:	bl	19b4 <Mat_Critical@plt>
   50e48:	b	50eb4 <ReadNextStructField+0xcdc>
   50e4c:	ldr	r4, [sp, #32]
   50e50:	mov	r0, r4
   50e54:	bl	50f9c <ReadNextCell>
   50e58:	add	r6, r0, r6
   50e5c:	b	50e9c <ReadNextStructField+0xcc4>
   50e60:	movw	r0, #32776	; 0x8008
   50e64:	cmp	sl, r0
   50e68:	bgt	50e98 <ReadNextStructField+0xcc0>
   50e6c:	ldr	r4, [sp, #32]
   50e70:	mov	r0, r4
   50e74:	bl	25480 <Mat_VarRead5>
   50e78:	ldr	r0, [r5, r8, lsl #2]
   50e7c:	ldr	r1, [r0, #40]	; 0x28
   50e80:	ldr	r0, [r0, #52]	; 0x34
   50e84:	str	r1, [r0, #16]
   50e88:	mov	r1, #0
   50e8c:	ldr	r0, [r5, r8, lsl #2]
   50e90:	str	r1, [r0, #40]	; 0x28
   50e94:	b	50e9c <ReadNextStructField+0xcc4>
   50e98:	ldr	r4, [sp, #32]
   50e9c:	ldr	r0, [r5, r8, lsl #2]
   50ea0:	mov	r2, #0
   50ea4:	ldr	r0, [r0, #52]	; 0x34
   50ea8:	ldr	r1, [r0]
   50eac:	ldr	r0, [r4]
   50eb0:	bl	1a2c <fseek@plt>
   50eb4:	ldr	r1, [r5, r8, lsl #2]
   50eb8:	ldr	r0, [r1, #52]	; 0x34
   50ebc:	ldr	r2, [r0, #16]
   50ec0:	cmp	r2, #0
   50ec4:	bne	50ed8 <ReadNextStructField+0xd00>
   50ec8:	ldr	r1, [r1, #16]
   50ecc:	sub	r1, r1, #1
   50ed0:	cmp	r1, #1
   50ed4:	bhi	50f00 <ReadNextStructField+0xd28>
   50ed8:	ldr	r0, [r0, #12]
   50edc:	bl	193c <inflateEnd@plt>
   50ee0:	ldr	r0, [r5, r8, lsl #2]
   50ee4:	ldr	r0, [r0, #52]	; 0x34
   50ee8:	ldr	r0, [r0, #12]
   50eec:	bl	1804 <free@plt>
   50ef0:	ldr	r0, [r5, r8, lsl #2]
   50ef4:	mov	r1, #0
   50ef8:	ldr	r0, [r0, #52]	; 0x34
   50efc:	str	r1, [r0, #12]
   50f00:	sub	r4, sl, #8
   50f04:	ldr	r0, [r9, #52]	; 0x34
   50f08:	mov	r2, r4
   50f0c:	ldr	r1, [r0, #12]
   50f10:	ldr	r0, [sp, #32]
   50f14:	bl	240c <InflateSkip>
   50f18:	add	r7, r0, r6
   50f1c:	ldr	sl, [sp, #24]
   50f20:	add	r5, sp, #48	; 0x30
   50f24:	ldr	r0, [fp, #-36]	; 0xffffffdc
   50f28:	add	r8, r8, #1
   50f2c:	cmp	r8, r0
   50f30:	bcc	50a70 <ReadNextStructField+0x898>
   50f34:	b	505ec <ReadNextStructField+0x414>
   50f38:	ldr	r0, [sl, r4, lsl #2]
   50f3c:	bl	1918 <Mat_VarFree@plt>
   50f40:	mov	r0, #0
   50f44:	str	r0, [sl, r4, lsl #2]
   50f48:	ldr	r0, [sp, #32]
   50f4c:	ldr	r0, [r0]
   50f50:	bl	1840 <ftell@plt>
   50f54:	mov	r2, r0
   50f58:	ldr	r0, [pc, #48]	; 50f90 <ReadNextStructField+0xdb8>
   50f5c:	mov	r1, r4
   50f60:	add	r0, pc, r0
   50f64:	bl	19b4 <Mat_Critical@plt>
   50f68:	b	505ec <ReadNextStructField+0x414>
   50f6c:	.word	0x00008868
   50f70:	.word	0x00008594
   50f74:	.word	0x000080cc
   50f78:	.word	0x0000815a
   50f7c:	.word	0x00008162
   50f80:	.word	0x00007ba8
   50f84:	.word	0x00007e5b
   50f88:	.word	0x00007f77
   50f8c:	.word	0x00008494
   50f90:	.word	0x00007e04
   50f94:	.word	0x0000808c
   50f98:	.word	0x00008909

00050f9c <ReadNextCell>:
   50f9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   50fa0:	add	fp, sp, #28
   50fa4:	sub	sp, sp, #116	; 0x74
   50fa8:	mov	r6, r1
   50fac:	mov	r4, r0
   50fb0:	mov	r0, #1
   50fb4:	sub	r1, fp, #32
   50fb8:	str	r0, [fp, #-32]	; 0xffffffe0
   50fbc:	mov	r0, r6
   50fc0:	bl	53824 <SafeMulDims>
   50fc4:	cmp	r0, #0
   50fc8:	bne	50fec <ReadNextCell+0x50>
   50fcc:	mov	r0, #4
   50fd0:	mov	r2, #4
   50fd4:	str	r0, [r6, #12]
   50fd8:	mov	r0, r6
   50fdc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   50fe0:	bl	53884 <SafeMul>
   50fe4:	cmp	r0, #0
   50fe8:	beq	51008 <ReadNextCell+0x6c>
   50fec:	ldr	r0, [pc, #2500]	; 519b8 <ReadNextCell+0xa1c>
   50ff0:	add	r0, pc, r0
   50ff4:	bl	19b4 <Mat_Critical@plt>
   50ff8:	mov	r9, #0
   50ffc:	mov	r0, r9
   51000:	sub	sp, fp, #28
   51004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51008:	ldr	r7, [fp, #-32]	; 0xffffffe0
   5100c:	ldr	r1, [r6, #12]
   51010:	mov	r0, r7
   51014:	bl	1798 <calloc@plt>
   51018:	cmp	r0, #0
   5101c:	str	r0, [r6, #40]	; 0x28
   51020:	str	r0, [sp, #36]	; 0x24
   51024:	beq	51670 <ReadNextCell+0x6d4>
   51028:	ldr	r0, [r6, #48]	; 0x30
   5102c:	str	r4, [sp, #40]	; 0x28
   51030:	cmp	r0, #1
   51034:	bne	51690 <ReadNextCell+0x6f4>
   51038:	add	r2, sp, #48	; 0x30
   5103c:	vmov.i32	q8, #0	; 0x00000000
   51040:	mov	r0, #48	; 0x30
   51044:	cmp	r7, #0
   51048:	mov	r1, r2
   5104c:	vst1.64	{d16-d17}, [r1], r0
   51050:	add	r0, r2, #32
   51054:	vst1.64	{d16-d17}, [r0]
   51058:	add	r0, r2, #16
   5105c:	vst1.64	{d16-d17}, [r1]
   51060:	vst1.64	{d16-d17}, [r0]
   51064:	beq	50ff8 <ReadNextCell+0x5c>
   51068:	ldr	r5, [sp, #36]	; 0x24
   5106c:	add	r0, r2, #12
   51070:	mov	r9, #0
   51074:	mov	r8, #0
   51078:	str	r6, [sp, #20]
   5107c:	str	r0, [sp, #12]
   51080:	add	r0, r2, #8
   51084:	str	r0, [sp, #16]
   51088:	orr	r0, r2, #4
   5108c:	str	r0, [sp, #32]
   51090:	bl	18a0 <Mat_VarCalloc@plt>
   51094:	mov	sl, r5
   51098:	cmp	r0, #0
   5109c:	str	r0, [sl, r8, lsl #2]!
   510a0:	beq	511c0 <ReadNextCell+0x224>
   510a4:	mov	r0, #0
   510a8:	mov	r7, r4
   510ac:	mov	r1, r6
   510b0:	str	r0, [sp, #52]	; 0x34
   510b4:	str	r0, [sp, #48]	; 0x30
   510b8:	mov	r0, r4
   510bc:	add	r4, sp, #48	; 0x30
   510c0:	mov	r2, r4
   510c4:	bl	27d8 <InflateVarTag>
   510c8:	mov	r5, r0
   510cc:	ldr	r0, [r7, #20]
   510d0:	cmp	r0, #0
   510d4:	beq	510e8 <ReadNextCell+0x14c>
   510d8:	mov	r0, r4
   510dc:	bl	1c04 <Mat_uint32Swap>
   510e0:	ldr	r0, [sp, #32]
   510e4:	bl	1c04 <Mat_uint32Swap>
   510e8:	ldr	r7, [sp, #52]	; 0x34
   510ec:	add	r9, r5, r9
   510f0:	cmp	r7, #0
   510f4:	beq	511d4 <ReadNextCell+0x238>
   510f8:	ldr	r1, [sp, #48]	; 0x30
   510fc:	ldr	r0, [sl]
   51100:	ldr	r2, [sp, #40]	; 0x28
   51104:	cmp	r1, #14
   51108:	bne	51968 <ReadNextCell+0x9cc>
   5110c:	mov	r1, #1
   51110:	add	r4, sp, #48	; 0x30
   51114:	str	r1, [r0, #48]	; 0x30
   51118:	mov	r1, r6
   5111c:	mov	r0, r2
   51120:	mov	r6, r2
   51124:	mov	r2, r4
   51128:	bl	292c <InflateArrayFlags>
   5112c:	mov	r5, r0
   51130:	ldr	r0, [r6, #20]
   51134:	cmp	r0, #0
   51138:	beq	5115c <ReadNextCell+0x1c0>
   5113c:	mov	r0, r4
   51140:	bl	1c04 <Mat_uint32Swap>
   51144:	ldr	r0, [sp, #32]
   51148:	bl	1c04 <Mat_uint32Swap>
   5114c:	ldr	r0, [sp, #16]
   51150:	bl	1c04 <Mat_uint32Swap>
   51154:	ldr	r0, [sp, #12]
   51158:	bl	1c04 <Mat_uint32Swap>
   5115c:	ldr	r1, [sp, #48]	; 0x30
   51160:	add	r5, r5, r9
   51164:	sub	r9, r7, #16
   51168:	cmp	r1, #6
   5116c:	bne	511f8 <ReadNextCell+0x25c>
   51170:	ldr	r0, [sp, #56]	; 0x38
   51174:	ldr	r1, [sl]
   51178:	mov	ip, r5
   5117c:	mov	r6, #0
   51180:	and	r2, r0, #2048	; 0x800
   51184:	and	r3, r0, #1024	; 0x400
   51188:	and	r5, r0, #512	; 0x200
   5118c:	uxtb	r0, r0
   51190:	add	lr, r1, #16
   51194:	cmp	r0, #18
   51198:	movcs	r0, r6
   5119c:	stm	lr, {r0, r2, r3, r5}
   511a0:	cmp	r0, #5
   511a4:	ldr	r4, [sp, #40]	; 0x28
   511a8:	ldr	r6, [sp, #20]
   511ac:	bne	51238 <ReadNextCell+0x29c>
   511b0:	ldr	r0, [sp, #60]	; 0x3c
   511b4:	mov	r5, ip
   511b8:	str	r0, [r1]
   511bc:	b	51244 <ReadNextCell+0x2a8>
   511c0:	ldr	r0, [pc, #2040]	; 519c0 <ReadNextCell+0xa24>
   511c4:	mov	r1, r8
   511c8:	add	r0, pc, r0
   511cc:	bl	19b4 <Mat_Critical@plt>
   511d0:	b	5165c <ReadNextCell+0x6c0>
   511d4:	ldr	r0, [sl]
   511d8:	ldr	r0, [r0, #52]	; 0x34
   511dc:	bl	1804 <free@plt>
   511e0:	ldr	r0, [sl]
   511e4:	ldr	r5, [sp, #36]	; 0x24
   511e8:	ldr	r4, [sp, #40]	; 0x28
   511ec:	mov	r1, #0
   511f0:	str	r1, [r0, #52]	; 0x34
   511f4:	b	5165c <ReadNextCell+0x6c0>
   511f8:	ldr	r0, [pc, #1992]	; 519c8 <ReadNextCell+0xa2c>
   511fc:	add	r0, pc, r0
   51200:	bl	19b4 <Mat_Critical@plt>
   51204:	ldr	r6, [sp, #20]
   51208:	ldr	r4, [sp, #40]	; 0x28
   5120c:	mov	r2, r9
   51210:	ldr	r0, [r6, #52]	; 0x34
   51214:	ldr	r1, [r0, #12]
   51218:	mov	r0, r4
   5121c:	bl	240c <InflateSkip>
   51220:	add	r5, r0, r5
   51224:	ldr	r0, [sl]
   51228:	ldr	r0, [r0, #16]
   5122c:	cmp	r0, #17
   51230:	bne	51244 <ReadNextCell+0x2a8>
   51234:	b	51640 <ReadNextCell+0x6a4>
   51238:	mov	r5, ip
   5123c:	cmp	r0, #17
   51240:	beq	51640 <ReadNextCell+0x6a4>
   51244:	mov	r0, #0
   51248:	str	r5, [sp, #24]
   5124c:	mov	r5, r4
   51250:	mov	r1, r6
   51254:	mov	r3, #64	; 0x40
   51258:	str	r0, [sp, #44]	; 0x2c
   5125c:	add	r0, sp, #44	; 0x2c
   51260:	str	r0, [sp]
   51264:	mov	r0, r4
   51268:	add	r4, sp, #48	; 0x30
   5126c:	mov	r2, r4
   51270:	bl	2a80 <InflateRankDims>
   51274:	mov	r9, r0
   51278:	ldr	r0, [sp, #44]	; 0x2c
   5127c:	mov	r1, #1
   51280:	cmp	r0, #0
   51284:	ldreq	r0, [sp, #16]
   51288:	moveq	r1, #0
   5128c:	streq	r0, [sp, #44]	; 0x2c
   51290:	ldr	r0, [r5, #20]
   51294:	cmp	r0, #0
   51298:	beq	512b4 <ReadNextCell+0x318>
   5129c:	mov	r0, r4
   512a0:	mov	r5, r1
   512a4:	bl	1c04 <Mat_uint32Swap>
   512a8:	ldr	r0, [sp, #32]
   512ac:	bl	1c04 <Mat_uint32Swap>
   512b0:	mov	r1, r5
   512b4:	ldr	r0, [sp, #48]	; 0x30
   512b8:	sub	r7, r7, #24
   512bc:	cmp	r0, #5
   512c0:	bne	5134c <ReadNextCell+0x3b0>
   512c4:	stmib	sp, {r1, r9}
   512c8:	ldr	r4, [sp, #52]	; 0x34
   512cc:	ldr	r5, [sl]
   512d0:	asr	r0, r4, #31
   512d4:	add	r0, r4, r0, lsr #30
   512d8:	asr	r1, r0, #2
   512dc:	bic	r0, r0, #3
   512e0:	str	r1, [r5, #4]
   512e4:	bl	18d0 <malloc@plt>
   512e8:	str	r0, [r5, #32]
   512ec:	ldr	r3, [sp, #40]	; 0x28
   512f0:	sub	r7, r7, r4
   512f4:	ldr	r1, [sl]
   512f8:	mov	r4, r7
   512fc:	ldr	r2, [r3, #20]
   51300:	ldr	r0, [r1, #4]
   51304:	cmp	r2, #0
   51308:	beq	51360 <ReadNextCell+0x3c4>
   5130c:	cmp	r0, #1
   51310:	blt	5138c <ReadNextCell+0x3f0>
   51314:	mov	r5, #0
   51318:	mov	r9, #0
   5131c:	ldr	r0, [sp, #44]	; 0x2c
   51320:	add	r0, r0, r5
   51324:	bl	1c04 <Mat_uint32Swap>
   51328:	ldr	r1, [sl]
   5132c:	add	r9, r9, #1
   51330:	ldr	r2, [r1, #32]
   51334:	str	r0, [r2, r5]
   51338:	add	r5, r5, #4
   5133c:	ldr	r0, [r1, #4]
   51340:	cmp	r9, r0
   51344:	blt	5131c <ReadNextCell+0x380>
   51348:	b	5138c <ReadNextCell+0x3f0>
   5134c:	ldr	r5, [sp, #24]
   51350:	str	r7, [sp, #28]
   51354:	cmp	r1, #0
   51358:	bne	513ac <ReadNextCell+0x410>
   5135c:	b	513b4 <ReadNextCell+0x418>
   51360:	cmp	r0, #1
   51364:	blt	5138c <ReadNextCell+0x3f0>
   51368:	ldr	r2, [r1, #32]
   5136c:	ldr	r7, [sp, #44]	; 0x2c
   51370:	mov	r3, #0
   51374:	ldr	r0, [r7, r3, lsl #2]
   51378:	str	r0, [r2, r3, lsl #2]
   5137c:	add	r3, r3, #1
   51380:	ldr	r0, [r1, #4]
   51384:	cmp	r3, r0
   51388:	blt	51374 <ReadNextCell+0x3d8>
   5138c:	tst	r0, #1
   51390:	ldr	r5, [sp, #24]
   51394:	subne	r4, r4, #4
   51398:	str	r4, [sp, #28]
   5139c:	add	r4, sp, #48	; 0x30
   513a0:	ldmib	sp, {r1, r9}
   513a4:	cmp	r1, #0
   513a8:	beq	513b4 <ReadNextCell+0x418>
   513ac:	ldr	r0, [sp, #44]	; 0x2c
   513b0:	bl	1804 <free@plt>
   513b4:	ldr	r7, [sp, #40]	; 0x28
   513b8:	mov	r1, r6
   513bc:	mov	r2, r4
   513c0:	add	r9, r9, r5
   513c4:	mov	r0, r7
   513c8:	bl	2d6c <InflateVarNameTag>
   513cc:	mov	r5, r0
   513d0:	ldr	r0, [r7, #20]
   513d4:	cmp	r0, #0
   513d8:	beq	513ec <ReadNextCell+0x450>
   513dc:	mov	r0, r4
   513e0:	bl	1c04 <Mat_uint32Swap>
   513e4:	ldr	r0, [sp, #32]
   513e8:	bl	1c04 <Mat_uint32Swap>
   513ec:	ldr	r7, [sp, #52]	; 0x34
   513f0:	ldr	r0, [sp, #28]
   513f4:	add	r5, r9, r5
   513f8:	sub	r9, r0, #8
   513fc:	cmp	r7, #0
   51400:	beq	5146c <ReadNextCell+0x4d0>
   51404:	ldr	r0, [sp, #48]	; 0x30
   51408:	cmp	r0, #1
   5140c:	bne	51474 <ReadNextCell+0x4d8>
   51410:	ands	r0, r7, #7
   51414:	rsb	r0, r0, #8
   51418:	addne	r7, r7, r0
   5141c:	add	r0, r7, #1
   51420:	bl	18d0 <malloc@plt>
   51424:	ldr	r1, [sl]
   51428:	ldr	r4, [sp, #40]	; 0x28
   5142c:	sub	r9, r9, r7
   51430:	str	r0, [r1, #36]	; 0x24
   51434:	ldr	r0, [sl]
   51438:	ldr	r2, [r0, #36]	; 0x24
   5143c:	cmp	r2, #0
   51440:	beq	514d4 <ReadNextCell+0x538>
   51444:	mov	r0, r4
   51448:	mov	r1, r6
   5144c:	mov	r3, r7
   51450:	bl	2ec0 <InflateVarName>
   51454:	ldr	r1, [sl]
   51458:	mov	r2, #0
   5145c:	add	r5, r0, r5
   51460:	ldr	r1, [r1, #36]	; 0x24
   51464:	strb	r2, [r1, r7]
   51468:	b	514d4 <ReadNextCell+0x538>
   5146c:	ldr	r4, [sp, #40]	; 0x28
   51470:	b	514d4 <ReadNextCell+0x538>
   51474:	ldr	r4, [sp, #40]	; 0x28
   51478:	lsr	r7, r0, #16
   5147c:	cmp	r7, #4
   51480:	bhi	514d4 <ReadNextCell+0x538>
   51484:	uxth	r0, r0
   51488:	cmp	r0, #1
   5148c:	bne	514d4 <ReadNextCell+0x538>
   51490:	cmp	r7, #0
   51494:	beq	514d4 <ReadNextCell+0x538>
   51498:	add	r0, r7, #1
   5149c:	bl	18d0 <malloc@plt>
   514a0:	ldr	r1, [sl]
   514a4:	str	r0, [r1, #36]	; 0x24
   514a8:	ldr	r0, [sl]
   514ac:	ldr	r0, [r0, #36]	; 0x24
   514b0:	cmp	r0, #0
   514b4:	beq	514d4 <ReadNextCell+0x538>
   514b8:	ldr	r1, [sp, #32]
   514bc:	mov	r2, r7
   514c0:	bl	181c <memcpy@plt>
   514c4:	ldr	r0, [sl]
   514c8:	mov	r1, #0
   514cc:	ldr	r0, [r0, #36]	; 0x24
   514d0:	strb	r1, [r0, r7]
   514d4:	mov	r0, #1
   514d8:	mov	r1, #56	; 0x38
   514dc:	bl	1798 <calloc@plt>
   514e0:	ldr	r1, [sl]
   514e4:	ldr	r1, [r1, #52]	; 0x34
   514e8:	str	r0, [r1, #12]
   514ec:	ldr	r0, [sl]
   514f0:	ldr	r0, [r0, #52]	; 0x34
   514f4:	ldr	r0, [r0, #12]
   514f8:	cmp	r0, #0
   514fc:	beq	5152c <ReadNextCell+0x590>
   51500:	ldr	r1, [r6, #52]	; 0x34
   51504:	ldr	r1, [r1, #12]
   51508:	bl	1948 <inflateCopy@plt>
   5150c:	cmp	r0, #0
   51510:	beq	5153c <ReadNextCell+0x5a0>
   51514:	bl	1888 <zError@plt>
   51518:	mov	r1, r0
   5151c:	ldr	r0, [pc, #1196]	; 519d0 <ReadNextCell+0xa34>
   51520:	add	r0, pc, r0
   51524:	bl	19b4 <Mat_Critical@plt>
   51528:	b	51640 <ReadNextCell+0x6a4>
   5152c:	ldr	r0, [pc, #1184]	; 519d4 <ReadNextCell+0xa38>
   51530:	add	r0, pc, r0
   51534:	bl	19b4 <Mat_Critical@plt>
   51538:	b	51640 <ReadNextCell+0x6a4>
   5153c:	ldr	r0, [r4]
   51540:	bl	1840 <ftell@plt>
   51544:	ldr	r1, [sl]
   51548:	cmn	r0, #1
   5154c:	ldr	r2, [r1, #52]	; 0x34
   51550:	str	r0, [r2]
   51554:	beq	51590 <ReadNextCell+0x5f4>
   51558:	ldr	r3, [r6, #52]	; 0x34
   5155c:	ldr	r3, [r3, #12]
   51560:	ldr	r3, [r3, #4]
   51564:	sub	r0, r0, r3
   51568:	str	r0, [r2]
   5156c:	ldr	r0, [r1, #16]
   51570:	cmp	r0, #1
   51574:	beq	515a0 <ReadNextCell+0x604>
   51578:	cmp	r0, #2
   5157c:	bne	515b0 <ReadNextCell+0x614>
   51580:	mov	r0, r4
   51584:	bl	501d8 <ReadNextStructField>
   51588:	add	r5, r0, r5
   5158c:	b	515dc <ReadNextCell+0x640>
   51590:	ldr	r0, [pc, #1076]	; 519cc <ReadNextCell+0xa30>
   51594:	add	r0, pc, r0
   51598:	bl	19b4 <Mat_Critical@plt>
   5159c:	b	515f4 <ReadNextCell+0x658>
   515a0:	mov	r0, r4
   515a4:	bl	50f9c <ReadNextCell>
   515a8:	add	r5, r0, r5
   515ac:	b	515dc <ReadNextCell+0x640>
   515b0:	cmp	r9, #32768	; 0x8000
   515b4:	bgt	515dc <ReadNextCell+0x640>
   515b8:	mov	r0, r4
   515bc:	bl	25480 <Mat_VarRead5>
   515c0:	ldr	r0, [sl]
   515c4:	ldr	r1, [r0, #40]	; 0x28
   515c8:	ldr	r0, [r0, #52]	; 0x34
   515cc:	str	r1, [r0, #16]
   515d0:	mov	r1, #0
   515d4:	ldr	r0, [sl]
   515d8:	str	r1, [r0, #40]	; 0x28
   515dc:	ldr	r1, [sl]
   515e0:	ldr	r0, [r4]
   515e4:	mov	r2, #0
   515e8:	ldr	r1, [r1, #52]	; 0x34
   515ec:	ldr	r1, [r1]
   515f0:	bl	1a2c <fseek@plt>
   515f4:	ldr	r1, [sl]
   515f8:	ldr	r0, [r1, #52]	; 0x34
   515fc:	ldr	r2, [r0, #16]
   51600:	cmp	r2, #0
   51604:	bne	51618 <ReadNextCell+0x67c>
   51608:	ldr	r1, [r1, #16]
   5160c:	sub	r1, r1, #1
   51610:	cmp	r1, #1
   51614:	bhi	51640 <ReadNextCell+0x6a4>
   51618:	ldr	r0, [r0, #12]
   5161c:	bl	193c <inflateEnd@plt>
   51620:	ldr	r0, [sl]
   51624:	ldr	r0, [r0, #52]	; 0x34
   51628:	ldr	r0, [r0, #12]
   5162c:	bl	1804 <free@plt>
   51630:	ldr	r0, [sl]
   51634:	mov	r1, #0
   51638:	ldr	r0, [r0, #52]	; 0x34
   5163c:	str	r1, [r0, #12]
   51640:	ldr	r0, [r6, #52]	; 0x34
   51644:	mov	r2, r9
   51648:	ldr	r1, [r0, #12]
   5164c:	mov	r0, r4
   51650:	bl	240c <InflateSkip>
   51654:	add	r9, r0, r5
   51658:	ldr	r5, [sp, #36]	; 0x24
   5165c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   51660:	add	r8, r8, #1
   51664:	cmp	r8, r0
   51668:	bcc	51090 <ReadNextCell+0xf4>
   5166c:	b	50ffc <ReadNextCell+0x60>
   51670:	ldr	r1, [r6, #36]	; 0x24
   51674:	mov	r9, #0
   51678:	cmp	r1, #0
   5167c:	beq	50ffc <ReadNextCell+0x60>
   51680:	ldr	r0, [pc, #820]	; 519bc <ReadNextCell+0xa20>
   51684:	add	r0, pc, r0
   51688:	bl	19b4 <Mat_Critical@plt>
   5168c:	b	50ffc <ReadNextCell+0x60>
   51690:	cmp	r7, #0
   51694:	beq	50ff8 <ReadNextCell+0x5c>
   51698:	add	sl, sp, #48	; 0x30
   5169c:	ldr	r7, [sp, #36]	; 0x24
   516a0:	mov	r9, #0
   516a4:	mov	r6, #0
   516a8:	add	r0, sl, #20
   516ac:	str	r0, [sp, #28]
   516b0:	add	r0, sl, #16
   516b4:	str	r0, [sp, #24]
   516b8:	add	r0, sl, #12
   516bc:	str	r0, [sp, #20]
   516c0:	add	r0, sl, #8
   516c4:	str	r0, [sp, #16]
   516c8:	add	r0, sl, #4
   516cc:	str	r0, [sp, #32]
   516d0:	bl	18a0 <Mat_VarCalloc@plt>
   516d4:	cmp	r0, #0
   516d8:	str	r0, [r7, r6, lsl #2]
   516dc:	beq	517ec <ReadNextCell+0x850>
   516e0:	ldr	r3, [r4]
   516e4:	mov	r0, sl
   516e8:	mov	r1, #4
   516ec:	mov	r2, #2
   516f0:	bl	18b8 <fread@plt>
   516f4:	cmp	r0, #0
   516f8:	beq	51954 <ReadNextCell+0x9b8>
   516fc:	mov	r5, r0
   51700:	ldr	r0, [r4, #20]
   51704:	cmp	r0, #0
   51708:	beq	5171c <ReadNextCell+0x780>
   5170c:	mov	r0, sl
   51710:	bl	1c04 <Mat_uint32Swap>
   51714:	ldr	r0, [sp, #32]
   51718:	bl	1c04 <Mat_uint32Swap>
   5171c:	ldr	r8, [sp, #52]	; 0x34
   51720:	add	r9, r5, r9
   51724:	cmp	r8, #0
   51728:	beq	51800 <ReadNextCell+0x864>
   5172c:	ldr	r0, [sp, #48]	; 0x30
   51730:	cmp	r0, #14
   51734:	bne	51988 <ReadNextCell+0x9ec>
   51738:	ldr	r3, [r4]
   5173c:	mov	r0, sl
   51740:	mov	r1, #4
   51744:	mov	r2, #6
   51748:	bl	18b8 <fread@plt>
   5174c:	mov	r2, r0
   51750:	ldr	r0, [r4, #20]
   51754:	mov	r5, sl
   51758:	cmp	r0, #0
   5175c:	beq	51798 <ReadNextCell+0x7fc>
   51760:	mov	r0, r5
   51764:	mov	sl, r2
   51768:	bl	1c04 <Mat_uint32Swap>
   5176c:	ldr	r0, [sp, #32]
   51770:	bl	1c04 <Mat_uint32Swap>
   51774:	ldr	r0, [sp, #16]
   51778:	bl	1c04 <Mat_uint32Swap>
   5177c:	ldr	r0, [sp, #20]
   51780:	bl	1c04 <Mat_uint32Swap>
   51784:	ldr	r0, [sp, #24]
   51788:	bl	1c04 <Mat_uint32Swap>
   5178c:	ldr	r0, [sp, #28]
   51790:	bl	1c04 <Mat_uint32Swap>
   51794:	mov	r2, sl
   51798:	ldr	r0, [sp, #48]	; 0x30
   5179c:	mov	sl, r5
   517a0:	cmp	r0, #6
   517a4:	bne	5181c <ReadNextCell+0x880>
   517a8:	ldr	r0, [sp, #56]	; 0x38
   517ac:	ldr	r1, [r7, r6, lsl #2]
   517b0:	mov	r5, #0
   517b4:	and	ip, r0, #2048	; 0x800
   517b8:	and	r3, r0, #1024	; 0x400
   517bc:	and	r7, r0, #512	; 0x200
   517c0:	uxtb	r0, r0
   517c4:	cmp	r0, #18
   517c8:	movcs	r0, r5
   517cc:	str	r0, [r1, #16]
   517d0:	str	ip, [r1, #20]
   517d4:	str	r3, [r1, #24]
   517d8:	str	r7, [r1, #28]
   517dc:	cmp	r0, #5
   517e0:	ldreq	r0, [sp, #60]	; 0x3c
   517e4:	streq	r0, [r1]
   517e8:	b	51820 <ReadNextCell+0x884>
   517ec:	ldr	r0, [pc, #484]	; 519d8 <ReadNextCell+0xa3c>
   517f0:	mov	r1, r6
   517f4:	add	r0, pc, r0
   517f8:	bl	19b4 <Mat_Critical@plt>
   517fc:	b	51954 <ReadNextCell+0x9b8>
   51800:	ldr	r0, [r7, r6, lsl #2]
   51804:	ldr	r0, [r0, #52]	; 0x34
   51808:	bl	1804 <free@plt>
   5180c:	ldr	r0, [r7, r6, lsl #2]
   51810:	mov	r1, #0
   51814:	str	r1, [r0, #52]	; 0x34
   51818:	b	51954 <ReadNextCell+0x9b8>
   5181c:	ldr	r1, [r7, r6, lsl #2]
   51820:	add	r7, r2, r9
   51824:	ldr	r2, [sp, #64]	; 0x40
   51828:	ldr	r3, [sp, #68]	; 0x44
   5182c:	mov	r0, r4
   51830:	bl	519e4 <ReadRankDims>
   51834:	ldr	r3, [r4]
   51838:	mov	r5, r0
   5183c:	mov	r0, sl
   51840:	mov	r1, #1
   51844:	mov	r2, #8
   51848:	bl	18b8 <fread@plt>
   5184c:	mov	r9, r0
   51850:	mov	r0, r4
   51854:	sub	r4, r8, #32
   51858:	ldr	r0, [r0, #20]
   5185c:	cmp	r0, #0
   51860:	beq	51874 <ReadNextCell+0x8d8>
   51864:	mov	r0, sl
   51868:	bl	1c04 <Mat_uint32Swap>
   5186c:	ldr	r0, [sp, #32]
   51870:	bl	1c04 <Mat_uint32Swap>
   51874:	add	r7, r7, r5
   51878:	sub	r8, r4, r5
   5187c:	ldr	r5, [sp, #52]	; 0x34
   51880:	cmp	r5, #0
   51884:	beq	518cc <ReadNextCell+0x930>
   51888:	ldr	r0, [sp, #48]	; 0x30
   5188c:	cmp	r0, #1
   51890:	bne	518cc <ReadNextCell+0x930>
   51894:	asr	r0, r5, #31
   51898:	ldr	r4, [sp, #40]	; 0x28
   5189c:	mov	r2, #1
   518a0:	add	r0, r5, r0, lsr #29
   518a4:	bic	r0, r0, #7
   518a8:	sub	r0, r5, r0
   518ac:	rsb	r1, r0, #8
   518b0:	cmp	r0, #0
   518b4:	ldr	r0, [r4]
   518b8:	addgt	r5, r5, r1
   518bc:	mov	r1, r5
   518c0:	bl	1a2c <fseek@plt>
   518c4:	sub	r8, r8, r5
   518c8:	b	518d0 <ReadNextCell+0x934>
   518cc:	ldr	r4, [sp, #40]	; 0x28
   518d0:	ldr	r0, [r4]
   518d4:	add	r9, r7, r9
   518d8:	bl	1840 <ftell@plt>
   518dc:	ldr	r7, [sp, #36]	; 0x24
   518e0:	cmn	r0, #1
   518e4:	ldr	r1, [r7, r6, lsl #2]
   518e8:	ldr	r2, [r1, #52]	; 0x34
   518ec:	str	r0, [r2]
   518f0:	beq	51948 <ReadNextCell+0x9ac>
   518f4:	ldr	r0, [r1, #16]
   518f8:	cmp	r0, #2
   518fc:	bne	51914 <ReadNextCell+0x978>
   51900:	mov	r0, r4
   51904:	bl	501d8 <ReadNextStructField>
   51908:	ldr	r1, [r7, r6, lsl #2]
   5190c:	add	r9, r0, r9
   51910:	ldr	r0, [r1, #16]
   51914:	cmp	r0, #1
   51918:	bne	5192c <ReadNextCell+0x990>
   5191c:	mov	r0, r4
   51920:	bl	50f9c <ReadNextCell>
   51924:	ldr	r1, [r7, r6, lsl #2]
   51928:	add	r9, r0, r9
   5192c:	ldr	r0, [r1, #52]	; 0x34
   51930:	mov	r2, #0
   51934:	ldr	r0, [r0]
   51938:	add	r1, r0, r8
   5193c:	ldr	r0, [r4]
   51940:	bl	1a2c <fseek@plt>
   51944:	b	51954 <ReadNextCell+0x9b8>
   51948:	ldr	r0, [pc, #144]	; 519e0 <ReadNextCell+0xa44>
   5194c:	add	r0, pc, r0
   51950:	bl	19b4 <Mat_Critical@plt>
   51954:	ldr	r0, [fp, #-32]	; 0xffffffe0
   51958:	add	r6, r6, #1
   5195c:	cmp	r6, r0
   51960:	bcc	516d0 <ReadNextCell+0x734>
   51964:	b	50ffc <ReadNextCell+0x60>
   51968:	bl	1918 <Mat_VarFree@plt>
   5196c:	mov	r0, #0
   51970:	mov	r1, r8
   51974:	str	r0, [sl]
   51978:	ldr	r0, [pc, #68]	; 519c4 <ReadNextCell+0xa28>
   5197c:	add	r0, pc, r0
   51980:	bl	19b4 <Mat_Critical@plt>
   51984:	b	50ffc <ReadNextCell+0x60>
   51988:	ldr	r0, [r7, r6, lsl #2]
   5198c:	bl	1918 <Mat_VarFree@plt>
   51990:	mov	r0, #0
   51994:	str	r0, [r7, r6, lsl #2]
   51998:	ldr	r0, [r4]
   5199c:	bl	1840 <ftell@plt>
   519a0:	mov	r2, r0
   519a4:	ldr	r0, [pc, #48]	; 519dc <ReadNextCell+0xa40>
   519a8:	mov	r1, r6
   519ac:	add	r0, pc, r0
   519b0:	bl	19b4 <Mat_Critical@plt>
   519b4:	b	50ffc <ReadNextCell+0x60>
   519b8:	.word	0x00007a84
   519bc:	.word	0x00007709
   519c0:	.word	0x00007beb
   519c4:	.word	0x0000745d
   519c8:	.word	0x00007b22
   519cc:	.word	0x00007454
   519d0:	.word	0x000076ff
   519d4:	.word	0x0000781b
   519d8:	.word	0x000075bf
   519dc:	.word	0x0000745c
   519e0:	.word	0x0000709c

000519e4 <ReadRankDims>:
   519e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   519e8:	add	fp, sp, #24
   519ec:	sub	sp, sp, #8
   519f0:	mov	r7, #0
   519f4:	cmp	r2, #5
   519f8:	bne	51afc <ReadRankDims+0x118>
   519fc:	mov	r9, r0
   51a00:	lsr	r5, r3, #2
   51a04:	bic	r0, r3, #3
   51a08:	mov	r4, r1
   51a0c:	str	r5, [r1, #4]
   51a10:	bl	18d0 <malloc@plt>
   51a14:	cmp	r0, #0
   51a18:	str	r0, [r4, #32]
   51a1c:	beq	51ab8 <ReadRankDims+0xd4>
   51a20:	cmp	r5, #0
   51a24:	beq	51ad0 <ReadRankDims+0xec>
   51a28:	mov	r6, #0
   51a2c:	add	r8, sp, #4
   51a30:	mov	r5, #0
   51a34:	ldr	r3, [r9]
   51a38:	mov	r0, r8
   51a3c:	mov	r1, #4
   51a40:	mov	r2, #1
   51a44:	bl	18b8 <fread@plt>
   51a48:	cmp	r0, #1
   51a4c:	bne	51ad8 <ReadRankDims+0xf4>
   51a50:	ldr	r0, [r9, #20]
   51a54:	cmp	r0, #0
   51a58:	beq	51a68 <ReadRankDims+0x84>
   51a5c:	mov	r0, r8
   51a60:	bl	1c04 <Mat_uint32Swap>
   51a64:	b	51a6c <ReadRankDims+0x88>
   51a68:	ldr	r0, [sp, #4]
   51a6c:	ldr	r1, [r4, #32]
   51a70:	add	r7, r6, #4
   51a74:	add	r5, r5, #1
   51a78:	str	r0, [r1, r6]
   51a7c:	mov	r6, r7
   51a80:	ldr	r0, [r4, #4]
   51a84:	cmp	r5, r0
   51a88:	blt	51a34 <ReadRankDims+0x50>
   51a8c:	tst	r0, #1
   51a90:	beq	51afc <ReadRankDims+0x118>
   51a94:	ldr	r3, [r9]
   51a98:	add	r0, sp, #4
   51a9c:	mov	r1, #4
   51aa0:	mov	r2, #1
   51aa4:	bl	18b8 <fread@plt>
   51aa8:	cmp	r0, #1
   51aac:	bne	51b08 <ReadRankDims+0x124>
   51ab0:	add	r7, r7, #4
   51ab4:	b	51afc <ReadRankDims+0x118>
   51ab8:	mov	r7, #0
   51abc:	str	r7, [r4, #4]
   51ac0:	ldr	r0, [pc, #84]	; 51b1c <ReadRankDims+0x138>
   51ac4:	add	r0, pc, r0
   51ac8:	bl	19b4 <Mat_Critical@plt>
   51acc:	b	51afc <ReadRankDims+0x118>
   51ad0:	mov	r7, #0
   51ad4:	b	51afc <ReadRankDims+0x118>
   51ad8:	ldr	r0, [r4, #32]
   51adc:	bl	1804 <free@plt>
   51ae0:	mov	r0, #0
   51ae4:	str	r0, [r4, #4]
   51ae8:	str	r0, [r4, #32]
   51aec:	ldr	r0, [pc, #36]	; 51b18 <ReadRankDims+0x134>
   51af0:	add	r0, pc, r0
   51af4:	bl	19b4 <Mat_Critical@plt>
   51af8:	mov	r7, r6
   51afc:	mov	r0, r7
   51b00:	sub	sp, fp, #24
   51b04:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   51b08:	ldr	r0, [pc, #4]	; 51b14 <ReadRankDims+0x130>
   51b0c:	add	r0, pc, r0
   51b10:	b	51ac8 <ReadRankDims+0xe4>
   51b14:	.word	0x00007168
   51b18:	.word	0x00007184
   51b1c:	.word	0x00006d01

00051b20 <WriteData>:
   51b20:	push	{r4, r5, r6, r7, fp, lr}
   51b24:	add	fp, sp, #16
   51b28:	sub	sp, sp, #8
   51b2c:	mov	r6, r0
   51b30:	mov	r0, #0
   51b34:	str	r3, [sp, #4]
   51b38:	cmp	r6, #0
   51b3c:	str	r0, [sp]
   51b40:	beq	51bbc <WriteData+0x9c>
   51b44:	mov	r5, r1
   51b48:	ldr	r1, [r6]
   51b4c:	cmp	r1, #0
   51b50:	beq	51bbc <WriteData+0x9c>
   51b54:	mov	r0, r3
   51b58:	mov	r4, r2
   51b5c:	bl	1924 <Mat_SizeOf@plt>
   51b60:	mov	r7, r0
   51b64:	mul	r0, r0, r4
   51b68:	mov	r1, #4
   51b6c:	mov	r2, #1
   51b70:	str	r0, [sp]
   51b74:	add	r0, sp, #4
   51b78:	ldr	r3, [r6]
   51b7c:	bl	18ac <fwrite@plt>
   51b80:	ldr	r3, [r6]
   51b84:	mov	r0, sp
   51b88:	mov	r1, #4
   51b8c:	mov	r2, #1
   51b90:	bl	18ac <fwrite@plt>
   51b94:	cmp	r5, #0
   51b98:	beq	51bb8 <WriteData+0x98>
   51b9c:	cmp	r4, #1
   51ba0:	blt	51bb8 <WriteData+0x98>
   51ba4:	ldr	r3, [r6]
   51ba8:	mov	r0, r5
   51bac:	mov	r1, r7
   51bb0:	mov	r2, r4
   51bb4:	bl	18ac <fwrite@plt>
   51bb8:	ldr	r0, [sp]
   51bbc:	sub	sp, fp, #16
   51bc0:	pop	{r4, r5, r6, r7, fp, pc}

00051bc4 <GetTypeBufSize>:
   51bc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   51bc8:	add	fp, sp, #28
   51bcc:	sub	sp, sp, #20
   51bd0:	mov	r5, r0
   51bd4:	mov	r0, #1
   51bd8:	add	r1, sp, #12
   51bdc:	str	r0, [sp, #12]
   51be0:	mov	r0, r5
   51be4:	bl	53824 <SafeMulDims>
   51be8:	ldr	r9, [r5, #4]
   51bec:	ldr	r0, [r5, #16]
   51bf0:	mov	sl, #12
   51bf4:	tst	r9, #1
   51bf8:	sub	r0, r0, #1
   51bfc:	movweq	sl, #8
   51c00:	cmp	r0, #4
   51c04:	add	r4, sl, r9, lsl #2
   51c08:	bhi	51d7c <GetTypeBufSize+0x1b8>
   51c0c:	add	r1, pc, #4
   51c10:	ldr	r0, [r1, r0, lsl #2]
   51c14:	add	pc, r1, r0
   51c18:	.word	0x00000014
   51c1c:	.word	0x0000007c
   51c20:	.word	0x00000164
   51c24:	.word	0x00000170
   51c28:	.word	0x000001b8
   51c2c:	ldr	r0, [r5]
   51c30:	cmp	r0, #0
   51c34:	ldrne	r2, [r5, #12]
   51c38:	cmpne	r2, #0
   51c3c:	beq	51e6c <GetTypeBufSize+0x2a8>
   51c40:	ldr	r5, [r5, #40]	; 0x28
   51c44:	udiv	r1, r0, r2
   51c48:	str	r1, [sp, #12]
   51c4c:	cmp	r5, #0
   51c50:	beq	51e6c <GetTypeBufSize+0x2a8>
   51c54:	cmp	r2, r0
   51c58:	bhi	51e6c <GetTypeBufSize+0x2a8>
   51c5c:	mov	r6, #0
   51c60:	ldr	r0, [r5, r6, lsl #2]
   51c64:	mov	r2, #0
   51c68:	cmp	r0, #0
   51c6c:	beq	51c7c <GetTypeBufSize+0xb8>
   51c70:	bl	51bc4 <GetTypeBufSize>
   51c74:	ldr	r1, [sp, #12]
   51c78:	add	r2, r0, #24
   51c7c:	add	r0, r4, r2
   51c80:	add	r6, r6, #1
   51c84:	add	r4, r0, #8
   51c88:	cmp	r6, r1
   51c8c:	bcc	51c60 <GetTypeBufSize+0x9c>
   51c90:	b	51e6c <GetTypeBufSize+0x2a8>
   51c94:	ldr	r0, [r5, #40]	; 0x28
   51c98:	mov	r4, #0
   51c9c:	mov	r7, #0
   51ca0:	str	r0, [sp, #4]
   51ca4:	ldr	r0, [r5, #52]	; 0x34
   51ca8:	ldr	r8, [r0, #4]
   51cac:	cmp	r8, #0
   51cb0:	beq	51ce4 <GetTypeBufSize+0x120>
   51cb4:	ldr	r6, [r0, #8]
   51cb8:	mov	r7, #0
   51cbc:	mov	r5, r8
   51cc0:	ldr	r0, [r6]
   51cc4:	cmp	r0, #0
   51cc8:	beq	51cd8 <GetTypeBufSize+0x114>
   51ccc:	bl	1954 <strlen@plt>
   51cd0:	cmp	r0, r7
   51cd4:	movhi	r7, r0
   51cd8:	subs	r5, r5, #1
   51cdc:	add	r6, r6, #4
   51ce0:	bne	51cc0 <GetTypeBufSize+0xfc>
   51ce4:	add	r0, r7, #1
   51ce8:	mul	r0, r8, r0
   51cec:	add	r1, r0, r4
   51cf0:	add	r4, r4, r8
   51cf4:	tst	r1, #7
   51cf8:	bne	51cec <GetTypeBufSize+0x128>
   51cfc:	ldr	r6, [sp, #4]
   51d00:	mla	r0, r7, r8, sl
   51d04:	add	r0, r0, r9, lsl #2
   51d08:	add	r0, r0, r4
   51d0c:	add	r4, r0, #16
   51d10:	cmp	r6, #0
   51d14:	cmpne	r8, #0
   51d18:	beq	51e6c <GetTypeBufSize+0x2a8>
   51d1c:	ldr	r1, [sp, #12]
   51d20:	mov	r0, #1
   51d24:	mov	r2, r8
   51d28:	str	r0, [sp, #8]
   51d2c:	add	r0, sp, #8
   51d30:	bl	53884 <SafeMul>
   51d34:	ldr	r1, [sp, #8]
   51d38:	cmp	r1, #0
   51d3c:	beq	51e6c <GetTypeBufSize+0x2a8>
   51d40:	mov	r5, #0
   51d44:	ldr	r0, [r6, r5, lsl #2]
   51d48:	cmp	r0, #0
   51d4c:	beq	51d60 <GetTypeBufSize+0x19c>
   51d50:	bl	51bc4 <GetTypeBufSize>
   51d54:	ldr	r1, [sp, #8]
   51d58:	add	r0, r0, #24
   51d5c:	b	51d64 <GetTypeBufSize+0x1a0>
   51d60:	mov	r0, #48	; 0x30
   51d64:	add	r0, r4, r0
   51d68:	add	r5, r5, #1
   51d6c:	add	r4, r0, #8
   51d70:	cmp	r5, r1
   51d74:	bcc	51d44 <GetTypeBufSize+0x180>
   51d78:	b	51e6c <GetTypeBufSize+0x2a8>
   51d7c:	ldr	r0, [r5, #8]
   51d80:	ldr	r6, [sp, #12]
   51d84:	b	51d9c <GetTypeBufSize+0x1d8>
   51d88:	ldr	r0, [r5, #8]
   51d8c:	ldr	r6, [sp, #12]
   51d90:	sub	r1, r0, #1
   51d94:	cmp	r1, #1
   51d98:	movls	r0, #4
   51d9c:	bl	1924 <Mat_SizeOf@plt>
   51da0:	mov	r2, r0
   51da4:	add	r0, sp, #16
   51da8:	mov	r1, r6
   51dac:	bl	53884 <SafeMul>
   51db0:	ldr	r0, [sp, #16]
   51db4:	ands	r1, r0, #7
   51db8:	addne	r0, r0, #8
   51dbc:	subne	r0, r0, r1
   51dc0:	strne	r0, [sp, #16]
   51dc4:	add	r0, r0, #8
   51dc8:	add	r4, r0, r4
   51dcc:	b	51e60 <GetTypeBufSize+0x29c>
   51dd0:	ldr	r6, [r5, #40]	; 0x28
   51dd4:	add	r0, sp, #16
   51dd8:	mov	r2, #4
   51ddc:	ldr	r1, [r6, #8]
   51de0:	bl	53884 <SafeMul>
   51de4:	ldr	r8, [sp, #16]
   51de8:	mov	r2, #4
   51dec:	ands	r0, r8, #7
   51df0:	addne	r1, r8, #8
   51df4:	subne	r8, r1, r0
   51df8:	add	r0, sp, #16
   51dfc:	strne	r8, [sp, #16]
   51e00:	ldr	r1, [r6, #16]
   51e04:	bl	53884 <SafeMul>
   51e08:	ldr	r7, [sp, #16]
   51e0c:	ands	r0, r7, #7
   51e10:	addne	r1, r7, #8
   51e14:	subne	r7, r1, r0
   51e18:	strne	r7, [sp, #16]
   51e1c:	ldr	r0, [r5, #8]
   51e20:	ldr	r6, [r6, #20]
   51e24:	bl	1924 <Mat_SizeOf@plt>
   51e28:	mov	r2, r0
   51e2c:	add	r0, sp, #16
   51e30:	mov	r1, r6
   51e34:	bl	53884 <SafeMul>
   51e38:	ldr	r0, [sp, #16]
   51e3c:	ands	r1, r0, #7
   51e40:	addne	r0, r0, #8
   51e44:	subne	r0, r0, r1
   51e48:	add	r1, r4, r8
   51e4c:	strne	r0, [sp, #16]
   51e50:	add	r1, r1, r7
   51e54:	add	r0, r0, #8
   51e58:	add	r1, r1, r0
   51e5c:	add	r4, r1, #16
   51e60:	ldr	r1, [r5, #20]
   51e64:	cmp	r1, #0
   51e68:	addne	r4, r4, r0
   51e6c:	mov	r0, r4
   51e70:	sub	sp, fp, #28
   51e74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00051e78 <WriteCompressedData>:
   51e78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   51e7c:	add	fp, sp, #28
   51e80:	sub	sp, sp, #28
   51e84:	sub	sp, sp, #1024	; 0x400
   51e88:	mov	r6, #0
   51e8c:	cmp	r0, #0
   51e90:	str	r6, [sp, #12]
   51e94:	str	r6, [sp, #8]
   51e98:	beq	51fec <WriteCompressedData+0x174>
   51e9c:	mov	r5, r0
   51ea0:	ldr	r0, [r0]
   51ea4:	cmp	r0, #0
   51ea8:	beq	51fec <WriteCompressedData+0x174>
   51eac:	ldr	r6, [fp, #8]
   51eb0:	mov	r9, r3
   51eb4:	mov	r8, r2
   51eb8:	mov	r4, r1
   51ebc:	mov	r0, r6
   51ec0:	bl	1924 <Mat_SizeOf@plt>
   51ec4:	mul	r0, r0, r9
   51ec8:	str	r6, [fp, #-40]	; 0xffffffd8
   51ecc:	sub	r1, fp, #40	; 0x28
   51ed0:	mov	r6, #0
   51ed4:	mov	sl, #1024	; 0x400
   51ed8:	add	r7, sp, #16
   51edc:	str	r0, [fp, #-36]	; 0xffffffdc
   51ee0:	str	r0, [sp, #4]
   51ee4:	mov	r0, #8
   51ee8:	str	r1, [r4]
   51eec:	str	r0, [r4, #4]
   51ef0:	mov	r0, r4
   51ef4:	mov	r1, #0
   51ef8:	str	r7, [r4, #12]
   51efc:	str	sl, [r4, #16]
   51f00:	bl	1894 <deflate@plt>
   51f04:	ldr	r0, [r4, #16]
   51f08:	ldr	r3, [r5]
   51f0c:	mov	r1, #1
   51f10:	rsb	r2, r0, #1024	; 0x400
   51f14:	mov	r0, r7
   51f18:	bl	18ac <fwrite@plt>
   51f1c:	add	r6, r0, r6
   51f20:	ldr	r0, [r4, #16]
   51f24:	cmp	r0, #0
   51f28:	beq	51ef0 <WriteCompressedData+0x78>
   51f2c:	cmp	r8, #0
   51f30:	beq	51fec <WriteCompressedData+0x174>
   51f34:	cmp	r9, #1
   51f38:	blt	51fec <WriteCompressedData+0x174>
   51f3c:	ldr	r9, [sp, #4]
   51f40:	str	r8, [r4]
   51f44:	mov	r8, #1024	; 0x400
   51f48:	str	r9, [r4, #4]
   51f4c:	mov	r0, r4
   51f50:	mov	r1, #0
   51f54:	str	r7, [r4, #12]
   51f58:	str	r8, [r4, #16]
   51f5c:	bl	1894 <deflate@plt>
   51f60:	ldr	r0, [r4, #16]
   51f64:	ldr	r3, [r5]
   51f68:	mov	r1, #1
   51f6c:	rsb	r2, r0, #1024	; 0x400
   51f70:	mov	r0, r7
   51f74:	bl	18ac <fwrite@plt>
   51f78:	add	r6, r0, r6
   51f7c:	ldr	r0, [r4, #16]
   51f80:	cmp	r0, #0
   51f84:	beq	51f4c <WriteCompressedData+0xd4>
   51f88:	asr	r0, r9, #31
   51f8c:	add	r0, r9, r0, lsr #29
   51f90:	bic	r0, r0, #7
   51f94:	subs	r0, r9, r0
   51f98:	beq	51fec <WriteCompressedData+0x174>
   51f9c:	add	r1, sp, #8
   51fa0:	mov	r8, #1024	; 0x400
   51fa4:	rsb	r0, r0, #8
   51fa8:	str	r1, [r4]
   51fac:	str	r0, [r4, #4]
   51fb0:	mov	r0, r4
   51fb4:	mov	r1, #0
   51fb8:	str	r7, [r4, #12]
   51fbc:	str	r8, [r4, #16]
   51fc0:	bl	1894 <deflate@plt>
   51fc4:	ldr	r0, [r4, #16]
   51fc8:	ldr	r3, [r5]
   51fcc:	mov	r1, #1
   51fd0:	rsb	r2, r0, #1024	; 0x400
   51fd4:	mov	r0, r7
   51fd8:	bl	18ac <fwrite@plt>
   51fdc:	add	r6, r0, r6
   51fe0:	ldr	r0, [r4, #16]
   51fe4:	cmp	r0, #0
   51fe8:	beq	51fb0 <WriteCompressedData+0x138>
   51fec:	mov	r0, r6
   51ff0:	sub	sp, fp, #28
   51ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00051ff8 <WriteCompressedTypeArrayFlags>:
   51ff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   51ffc:	add	fp, sp, #28
   52000:	sub	sp, sp, #4
   52004:	sub	sp, sp, #4096	; 0x1000
   52008:	mov	r9, sp
   5200c:	mov	r4, r2
   52010:	mov	r8, r1
   52014:	mov	sl, r0
   52018:	mov	r1, #0
   5201c:	mov	r2, #2048	; 0x800
   52020:	mov	r5, #0
   52024:	mov	r0, r9
   52028:	bl	1990 <memset@plt>
   5202c:	ldr	r1, [r8, #16]
   52030:	cmp	r1, #0
   52034:	beq	52214 <WriteCompressedTypeArrayFlags+0x21c>
   52038:	add	r7, r8, #20
   5203c:	uxtb	r0, r1
   52040:	ldm	r7, {r2, r3, r7}
   52044:	cmp	r2, #0
   52048:	mov	r2, #8
   5204c:	orrne	r0, r0, #2048	; 0x800
   52050:	cmp	r3, #0
   52054:	mov	r3, #0
   52058:	orrne	r0, r0, #1024	; 0x400
   5205c:	cmp	r7, #0
   52060:	orrne	r0, r0, #512	; 0x200
   52064:	cmp	r1, #5
   52068:	mov	r1, #0
   5206c:	ldreq	r1, [r8, #40]	; 0x28
   52070:	ldreq	r1, [r1]
   52074:	str	r2, [sp, #4]
   52078:	mov	r2, #6
   5207c:	str	r2, [sp]
   52080:	str	r0, [sp, #8]
   52084:	str	r1, [sp, #12]
   52088:	mov	r1, #5
   5208c:	ldr	r0, [r8, #4]
   52090:	str	r1, [sp, #16]
   52094:	lsl	r1, r0, #2
   52098:	cmp	r0, #1
   5209c:	str	r1, [sp, #20]
   520a0:	blt	52114 <WriteCompressedTypeArrayFlags+0x11c>
   520a4:	ldr	r6, [r8, #32]
   520a8:	mov	r2, #0
   520ac:	cmp	r0, #4
   520b0:	bcc	520f8 <WriteCompressedTypeArrayFlags+0x100>
   520b4:	add	r1, r6, r0, lsl #2
   520b8:	add	r3, r9, #24
   520bc:	cmp	r3, r1
   520c0:	addcc	r1, r9, r0, lsl #2
   520c4:	addcc	r1, r1, #24
   520c8:	cmpcc	r6, r1
   520cc:	bcc	520f8 <WriteCompressedTypeArrayFlags+0x100>
   520d0:	bic	r2, r0, #3
   520d4:	mov	r1, r6
   520d8:	mov	r7, r2
   520dc:	vld1.32	{d16-d17}, [r1]!
   520e0:	subs	r7, r7, #4
   520e4:	vst1.32	{d16-d17}, [r3]!
   520e8:	bne	520dc <WriteCompressedTypeArrayFlags+0xe4>
   520ec:	cmp	r0, r2
   520f0:	mov	r3, r0
   520f4:	beq	52114 <WriteCompressedTypeArrayFlags+0x11c>
   520f8:	ldr	r1, [r6, r2, lsl #2]
   520fc:	add	r3, r9, r2, lsl #2
   52100:	add	r2, r2, #1
   52104:	cmp	r0, r2
   52108:	str	r1, [r3, #24]
   5210c:	bne	520f8 <WriteCompressedTypeArrayFlags+0x100>
   52110:	mov	r3, r0
   52114:	tst	r0, #1
   52118:	mov	r7, #0
   5211c:	mov	r6, #2048	; 0x800
   52120:	add	r5, sp, #2048	; 0x800
   52124:	addne	r0, r9, r3, lsl #2
   52128:	movne	r1, #0
   5212c:	addne	r3, r3, #1
   52130:	strne	r1, [r0, #24]
   52134:	mov	r0, #24
   52138:	str	r9, [r4]
   5213c:	add	r0, r0, r3, lsl #2
   52140:	str	r0, [r4, #4]
   52144:	mov	r0, r4
   52148:	mov	r1, #0
   5214c:	str	r5, [r4, #12]
   52150:	str	r6, [r4, #16]
   52154:	bl	1894 <deflate@plt>
   52158:	ldr	r0, [r4, #16]
   5215c:	ldr	r3, [sl]
   52160:	mov	r1, #1
   52164:	rsb	r2, r0, #2048	; 0x800
   52168:	mov	r0, r5
   5216c:	bl	18ac <fwrite@plt>
   52170:	add	r7, r0, r7
   52174:	ldr	r0, [r4, #16]
   52178:	cmp	r0, #0
   5217c:	beq	52144 <WriteCompressedTypeArrayFlags+0x14c>
   52180:	mov	r0, #0
   52184:	mov	r6, #2048	; 0x800
   52188:	str	r0, [sp, #4]
   5218c:	mov	r0, #1
   52190:	str	r0, [sp]
   52194:	mov	r0, #8
   52198:	str	r9, [r4]
   5219c:	str	r0, [r4, #4]
   521a0:	mov	r0, r4
   521a4:	mov	r1, #0
   521a8:	str	r5, [r4, #12]
   521ac:	str	r6, [r4, #16]
   521b0:	bl	1894 <deflate@plt>
   521b4:	ldr	r0, [r4, #16]
   521b8:	ldr	r3, [sl]
   521bc:	mov	r1, #1
   521c0:	rsb	r2, r0, #2048	; 0x800
   521c4:	mov	r0, r5
   521c8:	bl	18ac <fwrite@plt>
   521cc:	add	r7, r0, r7
   521d0:	ldr	r0, [r4, #16]
   521d4:	cmp	r0, #0
   521d8:	beq	521a0 <WriteCompressedTypeArrayFlags+0x1a8>
   521dc:	ldr	r0, [sl]
   521e0:	bl	1840 <ftell@plt>
   521e4:	ldr	r1, [r8, #52]	; 0x34
   521e8:	cmn	r0, #1
   521ec:	str	r0, [r1]
   521f0:	bne	52200 <WriteCompressedTypeArrayFlags+0x208>
   521f4:	ldr	r0, [pc, #36]	; 52220 <WriteCompressedTypeArrayFlags+0x228>
   521f8:	add	r0, pc, r0
   521fc:	bl	19b4 <Mat_Critical@plt>
   52200:	mov	r0, sl
   52204:	mov	r1, r8
   52208:	mov	r2, r4
   5220c:	bl	4eff0 <WriteCompressedType>
   52210:	add	r5, r0, r7
   52214:	mov	r0, r5
   52218:	sub	sp, fp, #28
   5221c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52220:	.word	0x000067f0
   52224:	.word	0x00000000

00052228 <Mat_Create4>:
   52228:	push	{r4, r5, r6, r7, fp, lr}
   5222c:	add	fp, sp, #16
   52230:	ldr	r1, [pc, #156]	; 522d4 <Mat_Create4+0xac>
   52234:	mov	r5, r0
   52238:	add	r1, pc, r1
   5223c:	bl	17e0 <fopen@plt>
   52240:	mov	r4, #0
   52244:	cmp	r0, #0
   52248:	beq	522b0 <Mat_Create4+0x88>
   5224c:	mov	r7, r0
   52250:	mov	r0, #44	; 0x2c
   52254:	bl	18d0 <malloc@plt>
   52258:	cmp	r0, #0
   5225c:	beq	522b8 <Mat_Create4+0x90>
   52260:	mov	r4, #0
   52264:	str	r7, [r0]
   52268:	mov	r6, r0
   5226c:	mov	r1, r5
   52270:	str	r4, [r0, #4]
   52274:	str	r4, [r0, #8]
   52278:	ldr	r0, [pc, #92]	; 522dc <Mat_Create4+0xb4>
   5227c:	add	r0, pc, r0
   52280:	bl	1dac <strdup_printf>
   52284:	str	r0, [r6, #12]
   52288:	mov	r1, #16
   5228c:	vmov.i32	q8, #0	; 0x00000000
   52290:	add	r0, r6, #20
   52294:	str	r1, [r6, #16]
   52298:	vst1.32	{d16-d17}, [r0]
   5229c:	mov	r0, r6
   522a0:	str	r4, [r6, #36]	; 0x24
   522a4:	str	r4, [r6, #40]	; 0x28
   522a8:	bl	1984 <Mat_Rewind@plt>
   522ac:	mov	r4, r6
   522b0:	mov	r0, r4
   522b4:	pop	{r4, r5, r6, r7, fp, pc}
   522b8:	mov	r0, r7
   522bc:	bl	19cc <fclose@plt>
   522c0:	ldr	r0, [pc, #16]	; 522d8 <Mat_Create4+0xb0>
   522c4:	add	r0, pc, r0
   522c8:	bl	19b4 <Mat_Critical@plt>
   522cc:	mov	r0, r4
   522d0:	pop	{r4, r5, r6, r7, fp, pc}
   522d4:	.word	0x000067d1
   522d8:	.word	0x00006b74
   522dc:	.word	0x000070b7

000522e0 <Mat_VarWrite4>:
   522e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   522e4:	add	fp, sp, #28
   522e8:	sub	sp, sp, #4
   522ec:	vpush	{d8}
   522f0:	sub	sp, sp, #40	; 0x28
   522f4:	cmp	r0, #0
   522f8:	mvn	r5, #0
   522fc:	movne	r6, r1
   52300:	cmpne	r1, #0
   52304:	bne	5231c <Mat_VarWrite4+0x3c>
   52308:	mov	r0, r5
   5230c:	sub	sp, fp, #40	; 0x28
   52310:	vpop	{d8}
   52314:	add	sp, sp, #4
   52318:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5231c:	mov	r9, r0
   52320:	ldr	r0, [r6, #36]	; 0x24
   52324:	cmp	r0, #0
   52328:	beq	52308 <Mat_VarWrite4+0x28>
   5232c:	ldr	r1, [r6, #4]
   52330:	cmp	r1, #2
   52334:	bne	52308 <Mat_VarWrite4+0x28>
   52338:	ldr	r1, [r6, #8]
   5233c:	mov	r5, #2
   52340:	sub	r1, r1, #2
   52344:	cmp	r1, #7
   52348:	bhi	52308 <Mat_VarWrite4+0x28>
   5234c:	uxtb	r2, r1
   52350:	mov	r3, #175	; 0xaf
   52354:	mov	r7, #1
   52358:	tst	r7, r3, lsr r2
   5235c:	beq	52308 <Mat_VarWrite4+0x28>
   52360:	ldr	r2, [pc, #1304]	; 52880 <Mat_VarWrite4+0x5a0>
   52364:	add	r2, pc, r2
   52368:	ldr	r8, [r2, r1, lsl #2]
   5236c:	str	r8, [sp, #20]
   52370:	bl	1954 <strlen@plt>
   52374:	add	r0, r0, #1
   52378:	mov	r1, #0
   5237c:	mov	r2, #2
   52380:	mov	r5, #0
   52384:	str	r0, [sp, #36]	; 0x24
   52388:	ldr	r0, [r9]
   5238c:	bl	1a2c <fseek@plt>
   52390:	ldr	r0, [r6, #16]
   52394:	cmp	r0, #12
   52398:	bhi	52308 <Mat_VarWrite4+0x28>
   5239c:	mov	r7, #1
   523a0:	mov	r1, #7872	; 0x1ec0
   523a4:	tst	r1, r7, lsl r0
   523a8:	beq	523d0 <Mat_VarWrite4+0xf0>
   523ac:	ldr	r1, [r6, #4]
   523b0:	ldr	r4, [r6, #32]
   523b4:	cmp	r1, #1
   523b8:	blt	52460 <Mat_VarWrite4+0x180>
   523bc:	cmp	r1, #4
   523c0:	bcs	52414 <Mat_VarWrite4+0x134>
   523c4:	mov	r2, #0
   523c8:	mov	r7, #1
   523cc:	b	5244c <Mat_VarWrite4+0x16c>
   523d0:	cmp	r0, #4
   523d4:	beq	524f0 <Mat_VarWrite4+0x210>
   523d8:	cmp	r0, #5
   523dc:	bne	52308 <Mat_VarWrite4+0x28>
   523e0:	ldr	r0, [r6, #8]
   523e4:	bl	1924 <Mat_SizeOf@plt>
   523e8:	ldr	r7, [r6, #40]	; 0x28
   523ec:	add	r1, r8, #2
   523f0:	str	r1, [sp, #20]
   523f4:	ldr	r2, [r7, #16]
   523f8:	cmp	r2, #1
   523fc:	blt	524fc <Mat_VarWrite4+0x21c>
   52400:	ldr	r1, [r7, #12]
   52404:	add	r1, r1, r2, lsl #2
   52408:	ldr	r1, [r1, #-4]
   5240c:	add	r1, r1, #1
   52410:	b	52500 <Mat_VarWrite4+0x220>
   52414:	bic	r2, r1, #3
   52418:	vmov.i32	q8, #1	; 0x00000001
   5241c:	mov	r0, r4
   52420:	mov	r3, r2
   52424:	vld1.32	{d18-d19}, [r0]!
   52428:	subs	r3, r3, #4
   5242c:	vmul.i32	q8, q9, q8
   52430:	bne	52424 <Mat_VarWrite4+0x144>
   52434:	vext.8	q9, q8, q8, #8
   52438:	cmp	r1, r2
   5243c:	vmul.i32	q0, q8, q9
   52440:	vmul.i32	q8, q0, d0[1]
   52444:	vmov.32	r7, d16[0]
   52448:	beq	52460 <Mat_VarWrite4+0x180>
   5244c:	ldr	r0, [r4, r2, lsl #2]
   52450:	add	r2, r2, #1
   52454:	cmp	r2, r1
   52458:	mul	r7, r0, r7
   5245c:	blt	5244c <Mat_VarWrite4+0x16c>
   52460:	ldm	r4, {r0, r1}
   52464:	mov	r2, #1
   52468:	str	r0, [sp, #24]
   5246c:	str	r1, [sp, #28]
   52470:	mov	r1, #20
   52474:	ldr	r0, [r6, #20]
   52478:	cmp	r0, #0
   5247c:	movwne	r0, #1
   52480:	str	r0, [sp, #32]
   52484:	add	r0, sp, #20
   52488:	ldr	r3, [r9]
   5248c:	bl	18ac <fwrite@plt>
   52490:	ldr	r0, [r6, #36]	; 0x24
   52494:	ldr	r3, [r9]
   52498:	ldr	r2, [sp, #36]	; 0x24
   5249c:	mov	r1, #1
   524a0:	bl	18ac <fwrite@plt>
   524a4:	ldr	r0, [r6, #20]
   524a8:	cmp	r0, #0
   524ac:	beq	524d8 <Mat_VarWrite4+0x1f8>
   524b0:	ldr	r4, [r6, #40]	; 0x28
   524b4:	ldr	r3, [r9]
   524b8:	ldr	r1, [r6, #12]
   524bc:	mov	r2, r7
   524c0:	ldr	r0, [r4]
   524c4:	bl	18ac <fwrite@plt>
   524c8:	ldr	r0, [r4, #4]
   524cc:	ldr	r1, [r6, #12]
   524d0:	ldr	r3, [r9]
   524d4:	b	524e4 <Mat_VarWrite4+0x204>
   524d8:	ldr	r3, [r9]
   524dc:	ldr	r1, [r6, #12]
   524e0:	ldr	r0, [r6, #40]	; 0x28
   524e4:	mov	r2, r7
   524e8:	bl	18ac <fwrite@plt>
   524ec:	b	52308 <Mat_VarWrite4+0x28>
   524f0:	orr	r0, r8, #1
   524f4:	str	r0, [sp, #20]
   524f8:	b	523ac <Mat_VarWrite4+0xcc>
   524fc:	mov	r1, #1
   52500:	str	r1, [sp, #24]
   52504:	mov	sl, r0
   52508:	mov	r1, #4
   5250c:	mov	r5, #0
   52510:	mov	r2, #1
   52514:	ldr	r0, [r6, #20]
   52518:	str	r5, [sp, #32]
   5251c:	cmp	r0, #0
   52520:	add	r0, sp, #20
   52524:	movweq	r1, #3
   52528:	str	r1, [sp, #28]
   5252c:	mov	r1, #20
   52530:	ldr	r3, [r9]
   52534:	bl	18ac <fwrite@plt>
   52538:	ldr	r0, [r6, #36]	; 0x24
   5253c:	ldr	r3, [r9]
   52540:	ldr	r2, [sp, #36]	; 0x24
   52544:	mov	r1, #1
   52548:	bl	18ac <fwrite@plt>
   5254c:	ldr	r1, [r7, #16]
   52550:	cmp	r1, #2
   52554:	blt	525d0 <Mat_VarWrite4+0x2f0>
   52558:	ldr	r0, [r7, #12]
   5255c:	add	r8, sp, #8
   52560:	ldr	r4, [r0, r5, lsl #2]
   52564:	add	r5, r5, #1
   52568:	ldr	r2, [r0, r5, lsl #2]
   5256c:	cmp	r4, r2
   52570:	bge	525c4 <Mat_VarWrite4+0x2e4>
   52574:	ldr	r1, [r7, #20]
   52578:	cmp	r4, r1
   5257c:	bge	525c0 <Mat_VarWrite4+0x2e0>
   52580:	ldr	r0, [r7, #4]
   52584:	mov	r1, #8
   52588:	mov	r2, #1
   5258c:	ldr	r0, [r0, r4, lsl #2]
   52590:	add	r0, r0, #1
   52594:	vmov	s0, r0
   52598:	mov	r0, r8
   5259c:	vcvt.f64.s32	d16, s0
   525a0:	vstr	d16, [sp, #8]
   525a4:	ldr	r3, [r9]
   525a8:	bl	18ac <fwrite@plt>
   525ac:	ldr	r0, [r7, #12]
   525b0:	add	r4, r4, #1
   525b4:	ldr	r1, [r0, r5, lsl #2]
   525b8:	cmp	r4, r1
   525bc:	blt	52574 <Mat_VarWrite4+0x294>
   525c0:	ldr	r1, [r7, #16]
   525c4:	sub	r2, r1, #1
   525c8:	cmp	r5, r2
   525cc:	blt	52560 <Mat_VarWrite4+0x280>
   525d0:	ldr	r0, [r6, #32]
   525d4:	mov	r1, #8
   525d8:	mov	r2, #1
   525dc:	vldr	s0, [r0]
   525e0:	add	r0, sp, #8
   525e4:	vcvt.f64.u32	d16, s0
   525e8:	vstr	d16, [sp, #8]
   525ec:	ldr	r3, [r9]
   525f0:	bl	18ac <fwrite@plt>
   525f4:	ldr	r1, [r7, #16]
   525f8:	cmp	r1, #2
   525fc:	blt	52670 <Mat_VarWrite4+0x390>
   52600:	ldr	r0, [r7, #12]
   52604:	mov	r5, #0
   52608:	add	r8, sp, #8
   5260c:	ldr	r4, [r0, r5, lsl #2]
   52610:	add	r5, r5, #1
   52614:	ldr	r2, [r0, r5, lsl #2]
   52618:	cmp	r4, r2
   5261c:	bge	52664 <Mat_VarWrite4+0x384>
   52620:	vmov	s0, r5
   52624:	vcvt.f64.s32	d8, s0
   52628:	ldr	r1, [r7, #20]
   5262c:	cmp	r4, r1
   52630:	bge	52660 <Mat_VarWrite4+0x380>
   52634:	vstr	d8, [sp, #8]
   52638:	mov	r0, r8
   5263c:	mov	r1, #8
   52640:	mov	r2, #1
   52644:	ldr	r3, [r9]
   52648:	bl	18ac <fwrite@plt>
   5264c:	ldr	r0, [r7, #12]
   52650:	add	r4, r4, #1
   52654:	ldr	r1, [r0, r5, lsl #2]
   52658:	cmp	r4, r1
   5265c:	blt	52628 <Mat_VarWrite4+0x348>
   52660:	ldr	r1, [r7, #16]
   52664:	sub	r2, r1, #1
   52668:	cmp	r5, r2
   5266c:	blt	5260c <Mat_VarWrite4+0x32c>
   52670:	ldr	r0, [r6, #32]
   52674:	mov	r1, #8
   52678:	mov	r2, #1
   5267c:	vldr	s0, [r0, #4]
   52680:	add	r0, sp, #8
   52684:	vcvt.f64.u32	d16, s0
   52688:	vstr	d16, [sp, #8]
   5268c:	ldr	r3, [r9]
   52690:	bl	18ac <fwrite@plt>
   52694:	mov	r0, #0
   52698:	str	r0, [sp, #12]
   5269c:	str	r0, [sp, #8]
   526a0:	ldr	r0, [r6, #20]
   526a4:	cmp	r0, #0
   526a8:	beq	527dc <Mat_VarWrite4+0x4fc>
   526ac:	ldr	r0, [r7, #24]
   526b0:	ldr	r1, [r7, #16]
   526b4:	mov	r4, sl
   526b8:	ldr	r2, [r0, #4]
   526bc:	cmp	r1, #2
   526c0:	str	r2, [sp, #4]
   526c4:	blt	52740 <Mat_VarWrite4+0x460>
   526c8:	ldr	sl, [r0]
   526cc:	ldr	r0, [r7, #12]
   526d0:	mov	r5, #0
   526d4:	ldr	r8, [r0, r5, lsl #2]
   526d8:	add	r5, r5, #1
   526dc:	ldr	r2, [r0, r5, lsl #2]
   526e0:	cmp	r8, r2
   526e4:	bge	52734 <Mat_VarWrite4+0x454>
   526e8:	ldr	r1, [r7, #20]
   526ec:	cmp	r8, r1
   526f0:	bge	52730 <Mat_VarWrite4+0x450>
   526f4:	mla	r6, r4, r8, sl
   526f8:	ldr	r3, [r9]
   526fc:	mov	r0, r6
   52700:	mov	r1, r4
   52704:	mov	r2, #1
   52708:	bl	18ac <fwrite@plt>
   5270c:	ldr	r0, [r7, #12]
   52710:	add	r8, r8, #1
   52714:	ldr	r1, [r0, r5, lsl #2]
   52718:	cmp	r8, r1
   5271c:	bge	52730 <Mat_VarWrite4+0x450>
   52720:	ldr	r1, [r7, #20]
   52724:	add	r6, r6, r4
   52728:	cmp	r8, r1
   5272c:	blt	526f8 <Mat_VarWrite4+0x418>
   52730:	ldr	r1, [r7, #16]
   52734:	sub	r2, r1, #1
   52738:	cmp	r5, r2
   5273c:	blt	526d4 <Mat_VarWrite4+0x3f4>
   52740:	ldr	r3, [r9]
   52744:	add	r0, sp, #8
   52748:	mov	r1, r4
   5274c:	mov	r2, #1
   52750:	bl	18ac <fwrite@plt>
   52754:	ldr	r1, [r7, #16]
   52758:	ldr	sl, [sp, #4]
   5275c:	cmp	r1, #2
   52760:	blt	52864 <Mat_VarWrite4+0x584>
   52764:	ldr	r0, [r7, #12]
   52768:	mov	r8, #0
   5276c:	ldr	r5, [r0, r8, lsl #2]
   52770:	add	r8, r8, #1
   52774:	ldr	r2, [r0, r8, lsl #2]
   52778:	cmp	r5, r2
   5277c:	bge	527cc <Mat_VarWrite4+0x4ec>
   52780:	ldr	r1, [r7, #20]
   52784:	cmp	r5, r1
   52788:	bge	527c8 <Mat_VarWrite4+0x4e8>
   5278c:	mla	r6, r4, r5, sl
   52790:	ldr	r3, [r9]
   52794:	mov	r0, r6
   52798:	mov	r1, r4
   5279c:	mov	r2, #1
   527a0:	bl	18ac <fwrite@plt>
   527a4:	ldr	r0, [r7, #12]
   527a8:	add	r5, r5, #1
   527ac:	ldr	r1, [r0, r8, lsl #2]
   527b0:	cmp	r5, r1
   527b4:	bge	527c8 <Mat_VarWrite4+0x4e8>
   527b8:	ldr	r1, [r7, #20]
   527bc:	add	r6, r6, r4
   527c0:	cmp	r5, r1
   527c4:	blt	52790 <Mat_VarWrite4+0x4b0>
   527c8:	ldr	r1, [r7, #16]
   527cc:	sub	r2, r1, #1
   527d0:	cmp	r8, r2
   527d4:	blt	5276c <Mat_VarWrite4+0x48c>
   527d8:	b	52864 <Mat_VarWrite4+0x584>
   527dc:	ldr	r1, [r7, #16]
   527e0:	mov	r4, sl
   527e4:	cmp	r1, #2
   527e8:	blt	52864 <Mat_VarWrite4+0x584>
   527ec:	ldr	r8, [r7, #24]
   527f0:	ldr	r0, [r7, #12]
   527f4:	mov	sl, #0
   527f8:	ldr	r5, [r0, sl, lsl #2]
   527fc:	add	sl, sl, #1
   52800:	ldr	r2, [r0, sl, lsl #2]
   52804:	cmp	r5, r2
   52808:	bge	52858 <Mat_VarWrite4+0x578>
   5280c:	ldr	r1, [r7, #20]
   52810:	cmp	r5, r1
   52814:	bge	52854 <Mat_VarWrite4+0x574>
   52818:	mla	r6, r4, r5, r8
   5281c:	ldr	r3, [r9]
   52820:	mov	r0, r6
   52824:	mov	r1, r4
   52828:	mov	r2, #1
   5282c:	bl	18ac <fwrite@plt>
   52830:	ldr	r0, [r7, #12]
   52834:	add	r5, r5, #1
   52838:	ldr	r1, [r0, sl, lsl #2]
   5283c:	cmp	r5, r1
   52840:	bge	52854 <Mat_VarWrite4+0x574>
   52844:	ldr	r1, [r7, #20]
   52848:	add	r6, r6, r4
   5284c:	cmp	r5, r1
   52850:	blt	5281c <Mat_VarWrite4+0x53c>
   52854:	ldr	r1, [r7, #16]
   52858:	sub	r2, r1, #1
   5285c:	cmp	sl, r2
   52860:	blt	527f8 <Mat_VarWrite4+0x518>
   52864:	ldr	r3, [r9]
   52868:	add	r0, sp, #8
   5286c:	mov	r1, r4
   52870:	mov	r2, #1
   52874:	bl	18ac <fwrite@plt>
   52878:	mov	r5, #0
   5287c:	b	52308 <Mat_VarWrite4+0x28>
   52880:	.word	0x00006bf4
   52884:	.word	0xe320f000

00052888 <Mat_VarRead4>:
   52888:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5288c:	add	fp, sp, #28
   52890:	sub	sp, sp, #20
   52894:	mov	r5, r1
   52898:	mov	sl, r0
   5289c:	mov	r4, #1
   528a0:	add	r1, sp, #16
   528a4:	mov	r0, r5
   528a8:	str	r4, [sp, #16]
   528ac:	bl	53824 <SafeMulDims>
   528b0:	ldr	r1, [r5, #52]	; 0x34
   528b4:	ldr	r0, [sl]
   528b8:	mov	r2, #0
   528bc:	ldr	r1, [r1]
   528c0:	bl	1a2c <fseek@plt>
   528c4:	ldr	r0, [r5, #16]
   528c8:	cmp	r0, #4
   528cc:	beq	52938 <Mat_VarRead4+0xb0>
   528d0:	cmp	r0, #5
   528d4:	beq	52970 <Mat_VarRead4+0xe8>
   528d8:	cmp	r0, #6
   528dc:	bne	52aec <Mat_VarRead4+0x264>
   528e0:	mov	r0, #8
   528e4:	mov	r2, #8
   528e8:	str	r0, [r5, #12]
   528ec:	mov	r0, r5
   528f0:	ldr	r1, [sp, #16]
   528f4:	bl	53884 <SafeMul>
   528f8:	ldr	r1, [r5, #20]
   528fc:	ldr	r0, [r5]
   52900:	cmp	r1, #0
   52904:	beq	52af8 <Mat_VarRead4+0x270>
   52908:	bl	53794 <ComplexMalloc>
   5290c:	cmp	r0, #0
   52910:	beq	52b4c <Mat_VarRead4+0x2c4>
   52914:	str	r0, [r5, #40]	; 0x28
   52918:	mov	r6, r0
   5291c:	ldr	r1, [r0]
   52920:	ldr	r2, [r5, #8]
   52924:	ldr	r3, [sp, #16]
   52928:	mov	r0, sl
   5292c:	bl	3858 <ReadDoubleData>
   52930:	ldr	r1, [r6, #4]
   52934:	b	52b0c <Mat_VarRead4+0x284>
   52938:	str	r4, [r5, #12]
   5293c:	ldr	r6, [sp, #16]
   52940:	mov	r0, r6
   52944:	str	r6, [r5]
   52948:	bl	18d0 <malloc@plt>
   5294c:	cmp	r0, #0
   52950:	str	r0, [r5, #40]	; 0x28
   52954:	beq	52b20 <Mat_VarRead4+0x298>
   52958:	ldr	r2, [r5, #8]!
   5295c:	mov	r1, r0
   52960:	mov	r0, sl
   52964:	mov	r3, r6
   52968:	bl	176ac <ReadUInt8Data>
   5296c:	b	52b30 <Mat_VarRead4+0x2a8>
   52970:	mov	r0, #28
   52974:	str	r0, [r5, #12]
   52978:	mov	r0, #28
   5297c:	bl	18d0 <malloc@plt>
   52980:	cmp	r0, #0
   52984:	str	r0, [r5, #40]	; 0x28
   52988:	beq	52b40 <Mat_VarRead4+0x2b8>
   5298c:	mov	r6, r0
   52990:	ldr	r0, [r5, #32]
   52994:	ldr	r1, [r0, #4]
   52998:	sub	r1, r1, #4
   5299c:	clz	r1, r1
   529a0:	lsr	r1, r1, #5
   529a4:	str	r1, [r5, #20]
   529a8:	ldr	r0, [r0]
   529ac:	sub	r7, r0, #1
   529b0:	lsl	r0, r7, #2
   529b4:	str	r7, [r6]
   529b8:	str	r7, [r6, #8]
   529bc:	bl	18d0 <malloc@plt>
   529c0:	cmp	r0, #0
   529c4:	str	r0, [r6, #4]
   529c8:	beq	52b58 <Mat_VarRead4+0x2d0>
   529cc:	mov	r1, r0
   529d0:	mov	r0, sl
   529d4:	mov	r2, #9
   529d8:	mov	r3, r7
   529dc:	bl	d774 <ReadInt32Data>
   529e0:	ldr	r0, [r6, #8]
   529e4:	cmp	r0, #1
   529e8:	blt	52a10 <Mat_VarRead4+0x188>
   529ec:	ldr	r0, [r6, #4]
   529f0:	mov	r1, #0
   529f4:	ldr	r2, [r0, r1, lsl #2]
   529f8:	sub	r2, r2, #1
   529fc:	str	r2, [r0, r1, lsl #2]
   52a00:	add	r1, r1, #1
   52a04:	ldr	r2, [r6, #8]
   52a08:	cmp	r1, r2
   52a0c:	blt	529f4 <Mat_VarRead4+0x16c>
   52a10:	add	r1, sp, #8
   52a14:	mov	r0, sl
   52a18:	mov	r2, #9
   52a1c:	mov	r3, #1
   52a20:	bl	3858 <ReadDoubleData>
   52a24:	vldr	d16, [sp, #8]
   52a28:	ldr	r0, [r5, #32]
   52a2c:	vcvt.u32.f64	s0, d16
   52a30:	vstr	s0, [r0]
   52a34:	ldr	r0, [sl]
   52a38:	bl	1840 <ftell@plt>
   52a3c:	cmn	r0, #1
   52a40:	beq	52b74 <Mat_VarRead4+0x2ec>
   52a44:	ldr	r7, [sl]
   52a48:	ldr	r4, [r6, #8]
   52a4c:	mov	r8, r0
   52a50:	mov	r0, #9
   52a54:	bl	1924 <Mat_SizeOf@plt>
   52a58:	mul	r1, r0, r4
   52a5c:	mov	r0, r7
   52a60:	mov	r2, #1
   52a64:	bl	1a2c <fseek@plt>
   52a68:	add	r1, sp, #8
   52a6c:	mov	r0, sl
   52a70:	mov	r2, #9
   52a74:	mov	r3, #1
   52a78:	bl	3858 <ReadDoubleData>
   52a7c:	vldr	d16, [sp, #8]
   52a80:	vldr	d17, [pc, #1000]	; 52e70 <Mat_VarRead4+0x5e8>
   52a84:	vcmpe.f64	d16, d17
   52a88:	vmrs	APSR_nzcv, fpscr
   52a8c:	bgt	52bb4 <Mat_VarRead4+0x32c>
   52a90:	vcmpe.f64	d16, #0.0
   52a94:	vmrs	APSR_nzcv, fpscr
   52a98:	bmi	52bb4 <Mat_VarRead4+0x32c>
   52a9c:	ldr	r0, [r5, #32]
   52aa0:	vcvt.u32.f64	s0, d16
   52aa4:	mov	r1, r8
   52aa8:	mov	r2, #0
   52aac:	mov	r4, #0
   52ab0:	vstr	s0, [r0, #4]
   52ab4:	ldr	r0, [sl]
   52ab8:	bl	1a2c <fseek@plt>
   52abc:	ldr	r0, [r5, #32]
   52ac0:	ldr	r0, [r0, #4]
   52ac4:	cmn	r0, #-2147483647	; 0x80000001
   52ac8:	bcc	52bd8 <Mat_VarRead4+0x350>
   52acc:	ldr	r0, [r6, #4]
   52ad0:	bl	1804 <free@plt>
   52ad4:	ldr	r0, [r5, #40]	; 0x28
   52ad8:	bl	1804 <free@plt>
   52adc:	str	r4, [r5, #40]	; 0x28
   52ae0:	ldr	r0, [pc, #1620]	; 5313c <Mat_VarRead4+0x8b4>
   52ae4:	add	r0, pc, r0
   52ae8:	b	52d90 <Mat_VarRead4+0x508>
   52aec:	ldr	r0, [pc, #1632]	; 53154 <Mat_VarRead4+0x8cc>
   52af0:	add	r0, pc, r0
   52af4:	b	52d90 <Mat_VarRead4+0x508>
   52af8:	bl	18d0 <malloc@plt>
   52afc:	cmp	r0, #0
   52b00:	str	r0, [r5, #40]	; 0x28
   52b04:	beq	52b98 <Mat_VarRead4+0x310>
   52b08:	mov	r1, r0
   52b0c:	ldr	r2, [r5, #8]
   52b10:	ldr	r3, [sp, #16]
   52b14:	mov	r0, sl
   52b18:	bl	3858 <ReadDoubleData>
   52b1c:	b	52ba4 <Mat_VarRead4+0x31c>
   52b20:	ldr	r0, [pc, #1544]	; 53130 <Mat_VarRead4+0x8a8>
   52b24:	add	r0, pc, r0
   52b28:	bl	19b4 <Mat_Critical@plt>
   52b2c:	add	r5, r5, #8
   52b30:	mov	r0, #2
   52b34:	str	r0, [r5]
   52b38:	sub	sp, fp, #28
   52b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52b40:	ldr	r0, [pc, #1544]	; 53150 <Mat_VarRead4+0x8c8>
   52b44:	add	r0, pc, r0
   52b48:	b	52d90 <Mat_VarRead4+0x508>
   52b4c:	ldr	r0, [pc, #1492]	; 53128 <Mat_VarRead4+0x8a0>
   52b50:	add	r0, pc, r0
   52b54:	b	52ba0 <Mat_VarRead4+0x318>
   52b58:	mov	r0, r6
   52b5c:	bl	1804 <free@plt>
   52b60:	mov	r0, #0
   52b64:	str	r0, [r5, #40]	; 0x28
   52b68:	ldr	r0, [pc, #1512]	; 53158 <Mat_VarRead4+0x8d0>
   52b6c:	add	r0, pc, r0
   52b70:	b	52d90 <Mat_VarRead4+0x508>
   52b74:	ldr	r0, [r6, #4]
   52b78:	bl	1804 <free@plt>
   52b7c:	ldr	r0, [r5, #40]	; 0x28
   52b80:	bl	1804 <free@plt>
   52b84:	mov	r0, #0
   52b88:	str	r0, [r5, #40]	; 0x28
   52b8c:	ldr	r0, [pc, #1440]	; 53134 <Mat_VarRead4+0x8ac>
   52b90:	add	r0, pc, r0
   52b94:	b	52d90 <Mat_VarRead4+0x508>
   52b98:	ldr	r0, [pc, #1420]	; 5312c <Mat_VarRead4+0x8a4>
   52b9c:	add	r0, pc, r0
   52ba0:	bl	19b4 <Mat_Critical@plt>
   52ba4:	mov	r0, #9
   52ba8:	str	r0, [r5, #8]
   52bac:	sub	sp, fp, #28
   52bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52bb4:	ldr	r0, [r6, #4]
   52bb8:	bl	1804 <free@plt>
   52bbc:	ldr	r0, [r5, #40]	; 0x28
   52bc0:	bl	1804 <free@plt>
   52bc4:	mov	r0, #0
   52bc8:	str	r0, [r5, #40]	; 0x28
   52bcc:	ldr	r0, [pc, #1380]	; 53138 <Mat_VarRead4+0x8b0>
   52bd0:	add	r0, pc, r0
   52bd4:	b	52d90 <Mat_VarRead4+0x508>
   52bd8:	add	r0, r0, #1
   52bdc:	str	r0, [r6, #16]
   52be0:	lsl	r0, r0, #2
   52be4:	bl	18d0 <malloc@plt>
   52be8:	cmp	r0, #0
   52bec:	str	r0, [r6, #12]
   52bf0:	beq	52d70 <Mat_VarRead4+0x4e8>
   52bf4:	ldr	r9, [r6, #8]
   52bf8:	mov	r8, r0
   52bfc:	lsl	r0, r9, #2
   52c00:	bl	18d0 <malloc@plt>
   52c04:	cmp	r0, #0
   52c08:	beq	52d68 <Mat_VarRead4+0x4e0>
   52c0c:	mov	r7, r0
   52c10:	mov	r4, #0
   52c14:	mov	r0, sl
   52c18:	mov	r2, #9
   52c1c:	mov	r3, r9
   52c20:	mov	r1, r7
   52c24:	str	r4, [r8]
   52c28:	bl	d774 <ReadInt32Data>
   52c2c:	ldr	r0, [r6, #16]
   52c30:	cmp	r0, #3
   52c34:	blt	52c80 <Mat_VarRead4+0x3f8>
   52c38:	ldr	r0, [r6, #12]
   52c3c:	mov	r1, #1
   52c40:	ldr	r2, [r6, #8]
   52c44:	cmp	r4, r2
   52c48:	blt	52c5c <Mat_VarRead4+0x3d4>
   52c4c:	b	52c68 <Mat_VarRead4+0x3e0>
   52c50:	add	r4, r4, #1
   52c54:	cmp	r4, r2
   52c58:	bge	52c68 <Mat_VarRead4+0x3e0>
   52c5c:	ldr	r3, [r7, r4, lsl #2]
   52c60:	cmp	r3, r1
   52c64:	ble	52c50 <Mat_VarRead4+0x3c8>
   52c68:	str	r4, [r0, r1, lsl #2]
   52c6c:	add	r1, r1, #1
   52c70:	ldr	r2, [r6, #16]
   52c74:	sub	r2, r2, #1
   52c78:	cmp	r1, r2
   52c7c:	blt	52c40 <Mat_VarRead4+0x3b8>
   52c80:	mov	r0, r7
   52c84:	bl	1804 <free@plt>
   52c88:	add	r2, r6, #8
   52c8c:	mov	r3, #1
   52c90:	ldm	r2, {r0, r1, r2}
   52c94:	add	r1, r1, r2, lsl #2
   52c98:	mov	r2, #9
   52c9c:	str	r0, [r1, #-4]
   52ca0:	add	r1, sp, #8
   52ca4:	mov	r0, sl
   52ca8:	bl	3858 <ReadDoubleData>
   52cac:	ldr	r4, [r6, #8]
   52cb0:	str	r4, [r6, #20]
   52cb4:	ldr	r9, [r5, #8]
   52cb8:	ldr	r7, [r5, #20]
   52cbc:	mov	r0, r9
   52cc0:	bl	1924 <Mat_SizeOf@plt>
   52cc4:	mul	r0, r0, r4
   52cc8:	cmp	r7, #0
   52ccc:	beq	52d9c <Mat_VarRead4+0x514>
   52cd0:	bl	53794 <ComplexMalloc>
   52cd4:	cmp	r0, #0
   52cd8:	beq	52e14 <Mat_VarRead4+0x58c>
   52cdc:	mov	r8, r0
   52ce0:	str	r0, [r6, #24]
   52ce4:	sub	r0, r9, #2
   52ce8:	cmp	r0, #7
   52cec:	bhi	52f5c <Mat_VarRead4+0x6d4>
   52cf0:	add	r1, pc, #4
   52cf4:	ldr	r0, [r1, r0, lsl #2]
   52cf8:	add	pc, r1, r0
   52cfc:	.word	0x00000020
   52d00:	.word	0x0000017c
   52d04:	.word	0x000001c8
   52d08:	.word	0x00000214
   52d0c:	.word	0x00000260
   52d10:	.word	0x00000278
   52d14:	.word	0x00000260
   52d18:	.word	0x000002c4
   52d1c:	ldr	r3, [r6, #20]
   52d20:	ldr	r1, [r8]
   52d24:	mov	r0, sl
   52d28:	mov	r2, #2
   52d2c:	bl	176ac <ReadUInt8Data>
   52d30:	add	r5, sp, #4
   52d34:	mov	r0, sl
   52d38:	mov	r2, #2
   52d3c:	mov	r3, #1
   52d40:	mov	r1, r5
   52d44:	bl	176ac <ReadUInt8Data>
   52d48:	ldr	r1, [r8, #4]
   52d4c:	ldr	r3, [r6, #20]
   52d50:	mov	r0, sl
   52d54:	mov	r2, #2
   52d58:	bl	176ac <ReadUInt8Data>
   52d5c:	mov	r0, sl
   52d60:	mov	r1, r5
   52d64:	b	52e00 <Mat_VarRead4+0x578>
   52d68:	mov	r0, r8
   52d6c:	bl	1804 <free@plt>
   52d70:	ldr	r0, [r6, #4]
   52d74:	bl	1804 <free@plt>
   52d78:	ldr	r0, [r5, #40]	; 0x28
   52d7c:	bl	1804 <free@plt>
   52d80:	mov	r0, #0
   52d84:	str	r0, [r5, #40]	; 0x28
   52d88:	ldr	r0, [pc, #944]	; 53140 <Mat_VarRead4+0x8b8>
   52d8c:	add	r0, pc, r0
   52d90:	bl	19b4 <Mat_Critical@plt>
   52d94:	sub	sp, fp, #28
   52d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52d9c:	bl	18d0 <malloc@plt>
   52da0:	cmp	r0, #0
   52da4:	str	r0, [r6, #24]
   52da8:	beq	52e40 <Mat_VarRead4+0x5b8>
   52dac:	mov	r1, r0
   52db0:	sub	r0, r9, #2
   52db4:	cmp	r0, #7
   52db8:	bhi	53090 <Mat_VarRead4+0x808>
   52dbc:	add	r2, pc, #4
   52dc0:	ldr	r0, [r2, r0, lsl #2]
   52dc4:	add	pc, r2, r0
   52dc8:	.word	0x00000020
   52dcc:	.word	0x00000244
   52dd0:	.word	0x00000270
   52dd4:	.word	0x0000029c
   52dd8:	.word	0x000002c8
   52ddc:	.word	0x00000308
   52de0:	.word	0x000002c8
   52de4:	.word	0x00000334
   52de8:	ldr	r3, [r6, #20]
   52dec:	mov	r0, sl
   52df0:	mov	r2, #2
   52df4:	bl	176ac <ReadUInt8Data>
   52df8:	add	r1, sp, #4
   52dfc:	mov	r0, sl
   52e00:	mov	r2, #2
   52e04:	mov	r3, #1
   52e08:	bl	176ac <ReadUInt8Data>
   52e0c:	sub	sp, fp, #28
   52e10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52e14:	ldr	r0, [r6, #12]
   52e18:	bl	1804 <free@plt>
   52e1c:	ldr	r0, [r6, #4]
   52e20:	bl	1804 <free@plt>
   52e24:	ldr	r0, [r5, #40]	; 0x28
   52e28:	bl	1804 <free@plt>
   52e2c:	mov	r0, #0
   52e30:	str	r0, [r5, #40]	; 0x28
   52e34:	ldr	r0, [pc, #776]	; 53144 <Mat_VarRead4+0x8bc>
   52e38:	add	r0, pc, r0
   52e3c:	b	52d90 <Mat_VarRead4+0x508>
   52e40:	ldr	r0, [r6, #12]
   52e44:	bl	1804 <free@plt>
   52e48:	ldr	r0, [r6, #4]
   52e4c:	bl	1804 <free@plt>
   52e50:	ldr	r0, [r5, #40]	; 0x28
   52e54:	bl	1804 <free@plt>
   52e58:	mov	r0, #0
   52e5c:	str	r0, [r5, #40]	; 0x28
   52e60:	ldr	r0, [pc, #740]	; 5314c <Mat_VarRead4+0x8c4>
   52e64:	add	r0, pc, r0
   52e68:	b	52d90 <Mat_VarRead4+0x508>
   52e6c:	nop	{0}
   52e70:	.word	0xff800000
   52e74:	.word	0x41dfffff
   52e78:	ldr	r3, [r6, #20]
   52e7c:	ldr	r1, [r8]
   52e80:	mov	r0, sl
   52e84:	mov	r2, #3
   52e88:	bl	11944 <ReadInt16Data>
   52e8c:	add	r5, sp, #4
   52e90:	mov	r0, sl
   52e94:	mov	r2, #3
   52e98:	mov	r3, #1
   52e9c:	mov	r1, r5
   52ea0:	bl	11944 <ReadInt16Data>
   52ea4:	ldr	r1, [r8, #4]
   52ea8:	ldr	r3, [r6, #20]
   52eac:	mov	r0, sl
   52eb0:	mov	r2, #3
   52eb4:	bl	11944 <ReadInt16Data>
   52eb8:	mov	r0, sl
   52ebc:	mov	r1, r5
   52ec0:	b	53024 <Mat_VarRead4+0x79c>
   52ec4:	ldr	r3, [r6, #20]
   52ec8:	ldr	r1, [r8]
   52ecc:	mov	r0, sl
   52ed0:	mov	r2, #4
   52ed4:	bl	138dc <ReadUInt16Data>
   52ed8:	add	r5, sp, #4
   52edc:	mov	r0, sl
   52ee0:	mov	r2, #4
   52ee4:	mov	r3, #1
   52ee8:	mov	r1, r5
   52eec:	bl	138dc <ReadUInt16Data>
   52ef0:	ldr	r1, [r8, #4]
   52ef4:	ldr	r3, [r6, #20]
   52ef8:	mov	r0, sl
   52efc:	mov	r2, #4
   52f00:	bl	138dc <ReadUInt16Data>
   52f04:	mov	r0, sl
   52f08:	mov	r1, r5
   52f0c:	b	53050 <Mat_VarRead4+0x7c8>
   52f10:	ldr	r3, [r6, #20]
   52f14:	ldr	r1, [r8]
   52f18:	mov	r0, sl
   52f1c:	mov	r2, #5
   52f20:	bl	d774 <ReadInt32Data>
   52f24:	add	r5, sp, #4
   52f28:	mov	r0, sl
   52f2c:	mov	r2, #5
   52f30:	mov	r3, #1
   52f34:	mov	r1, r5
   52f38:	bl	d774 <ReadInt32Data>
   52f3c:	ldr	r1, [r8, #4]
   52f40:	ldr	r3, [r6, #20]
   52f44:	mov	r0, sl
   52f48:	mov	r2, #5
   52f4c:	bl	d774 <ReadInt32Data>
   52f50:	mov	r0, sl
   52f54:	mov	r1, r5
   52f58:	b	5307c <Mat_VarRead4+0x7f4>
   52f5c:	ldr	r0, [r8]
   52f60:	bl	1804 <free@plt>
   52f64:	ldr	r0, [r8, #4]
   52f68:	bl	1804 <free@plt>
   52f6c:	mov	r0, r8
   52f70:	b	53094 <Mat_VarRead4+0x80c>
   52f74:	ldr	r3, [r6, #20]
   52f78:	ldr	r1, [r8]
   52f7c:	mov	r0, sl
   52f80:	mov	r2, #7
   52f84:	bl	6f1c <ReadSingleData>
   52f88:	add	r5, sp, #4
   52f8c:	mov	r0, sl
   52f90:	mov	r2, #7
   52f94:	mov	r3, #1
   52f98:	mov	r1, r5
   52f9c:	bl	6f1c <ReadSingleData>
   52fa0:	ldr	r1, [r8, #4]
   52fa4:	ldr	r3, [r6, #20]
   52fa8:	mov	r0, sl
   52fac:	mov	r2, #7
   52fb0:	bl	6f1c <ReadSingleData>
   52fb4:	mov	r0, sl
   52fb8:	mov	r1, r5
   52fbc:	b	530e8 <Mat_VarRead4+0x860>
   52fc0:	ldr	r3, [r6, #20]
   52fc4:	ldr	r1, [r8]
   52fc8:	mov	r0, sl
   52fcc:	mov	r2, #9
   52fd0:	bl	3858 <ReadDoubleData>
   52fd4:	add	r5, sp, #8
   52fd8:	mov	r0, sl
   52fdc:	mov	r2, #9
   52fe0:	mov	r3, #1
   52fe4:	mov	r1, r5
   52fe8:	bl	3858 <ReadDoubleData>
   52fec:	ldr	r1, [r8, #4]
   52ff0:	ldr	r3, [r6, #20]
   52ff4:	mov	r0, sl
   52ff8:	mov	r2, #9
   52ffc:	bl	3858 <ReadDoubleData>
   53000:	mov	r0, sl
   53004:	mov	r1, r5
   53008:	b	53114 <Mat_VarRead4+0x88c>
   5300c:	ldr	r3, [r6, #20]
   53010:	mov	r0, sl
   53014:	mov	r2, #3
   53018:	bl	11944 <ReadInt16Data>
   5301c:	add	r1, sp, #4
   53020:	mov	r0, sl
   53024:	mov	r2, #3
   53028:	mov	r3, #1
   5302c:	bl	11944 <ReadInt16Data>
   53030:	sub	sp, fp, #28
   53034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53038:	ldr	r3, [r6, #20]
   5303c:	mov	r0, sl
   53040:	mov	r2, #4
   53044:	bl	138dc <ReadUInt16Data>
   53048:	add	r1, sp, #4
   5304c:	mov	r0, sl
   53050:	mov	r2, #4
   53054:	mov	r3, #1
   53058:	bl	138dc <ReadUInt16Data>
   5305c:	sub	sp, fp, #28
   53060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53064:	ldr	r3, [r6, #20]
   53068:	mov	r0, sl
   5306c:	mov	r2, #5
   53070:	bl	d774 <ReadInt32Data>
   53074:	add	r1, sp, #4
   53078:	mov	r0, sl
   5307c:	mov	r2, #5
   53080:	mov	r3, #1
   53084:	bl	d774 <ReadInt32Data>
   53088:	sub	sp, fp, #28
   5308c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53090:	mov	r0, r1
   53094:	bl	1804 <free@plt>
   53098:	ldr	r0, [r6, #12]
   5309c:	bl	1804 <free@plt>
   530a0:	ldr	r0, [r6, #4]
   530a4:	bl	1804 <free@plt>
   530a8:	ldr	r0, [r5, #40]	; 0x28
   530ac:	bl	1804 <free@plt>
   530b0:	mov	r0, #0
   530b4:	mov	r1, r9
   530b8:	str	r0, [r5, #40]	; 0x28
   530bc:	ldr	r0, [pc, #132]	; 53148 <Mat_VarRead4+0x8c0>
   530c0:	add	r0, pc, r0
   530c4:	bl	19b4 <Mat_Critical@plt>
   530c8:	sub	sp, fp, #28
   530cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   530d0:	ldr	r3, [r6, #20]
   530d4:	mov	r0, sl
   530d8:	mov	r2, #7
   530dc:	bl	6f1c <ReadSingleData>
   530e0:	add	r1, sp, #4
   530e4:	mov	r0, sl
   530e8:	mov	r2, #7
   530ec:	mov	r3, #1
   530f0:	bl	6f1c <ReadSingleData>
   530f4:	sub	sp, fp, #28
   530f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   530fc:	ldr	r3, [r6, #20]
   53100:	mov	r0, sl
   53104:	mov	r2, #9
   53108:	bl	3858 <ReadDoubleData>
   5310c:	add	r1, sp, #8
   53110:	mov	r0, sl
   53114:	mov	r2, #9
   53118:	mov	r3, #1
   5311c:	bl	3858 <ReadDoubleData>
   53120:	sub	sp, fp, #28
   53124:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53128:	.word	0x000060a1
   5312c:	.word	0x00005ef8
   53130:	.word	0x00005f70
   53134:	.word	0x00005e58
   53138:	.word	0x000062c4
   5313c:	.word	0x000063b0
   53140:	.word	0x00006133
   53144:	.word	0x00005d2d
   53148:	.word	0x00005e33
   5314c:	.word	0x00005d36
   53150:	.word	0x00005f50
   53154:	.word	0x00006445
   53158:	.word	0x000062f6

0005315c <Mat_VarReadData4>:
   5315c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   53160:	add	fp, sp, #28
   53164:	sub	sp, sp, #28
   53168:	mov	r7, r1
   5316c:	ldr	r1, [r1, #52]	; 0x34
   53170:	mov	r4, r0
   53174:	ldr	r0, [r0]
   53178:	mov	r8, r2
   5317c:	mov	r2, #0
   53180:	mov	r5, r3
   53184:	ldr	r1, [r1]
   53188:	bl	1a2c <fseek@plt>
   5318c:	ldr	r3, [r7, #8]
   53190:	mov	r6, #1
   53194:	cmp	r3, #9
   53198:	bhi	53364 <Mat_VarReadData4+0x208>
   5319c:	mov	r0, #1
   531a0:	mov	r1, #700	; 0x2bc
   531a4:	tst	r1, r0, lsl r3
   531a8:	beq	53364 <Mat_VarReadData4+0x208>
   531ac:	ldr	r0, [r7, #4]
   531b0:	ldr	r9, [fp, #12]
   531b4:	ldr	sl, [fp, #8]
   531b8:	cmp	r0, #2
   531bc:	bne	53290 <Mat_VarReadData4+0x134>
   531c0:	ldr	r2, [r9]
   531c4:	ldr	r0, [r5]
   531c8:	ldr	r1, [sl]
   531cc:	mov	r6, #1
   531d0:	sub	r2, r2, #1
   531d4:	mla	r0, r2, r1, r0
   531d8:	add	r1, r0, #1
   531dc:	ldr	r0, [r7, #32]
   531e0:	ldr	r2, [r0]
   531e4:	cmp	r1, r2
   531e8:	bhi	53214 <Mat_VarReadData4+0xb8>
   531ec:	ldr	r6, [r9, #4]
   531f0:	ldr	r1, [r5, #4]
   531f4:	ldr	r2, [sl, #4]
   531f8:	sub	r6, r6, #1
   531fc:	mla	r1, r6, r2, r1
   53200:	ldr	r2, [r0, #4]
   53204:	mov	r6, #0
   53208:	add	r1, r1, #1
   5320c:	cmp	r1, r2
   53210:	movwhi	r6, #1
   53214:	ldr	r1, [r7, #20]
   53218:	cmp	r1, #0
   5321c:	beq	53328 <Mat_VarReadData4+0x1cc>
   53220:	mov	r0, r3
   53224:	bl	1924 <Mat_SizeOf@plt>
   53228:	str	r0, [sp, #24]
   5322c:	add	r1, sp, #24
   53230:	mov	r0, r7
   53234:	bl	53824 <SafeMulDims>
   53238:	ldr	r0, [r7, #32]
   5323c:	ldr	r1, [r8]
   53240:	ldr	r3, [r7, #8]
   53244:	ldr	r2, [r7, #16]
   53248:	stm	sp, {r0, r5, sl}
   5324c:	mov	r0, r4
   53250:	str	r9, [sp, #12]
   53254:	bl	22214 <ReadDataSlab2>
   53258:	ldr	r0, [r7, #52]	; 0x34
   5325c:	ldr	r1, [sp, #24]
   53260:	mov	r2, #0
   53264:	ldr	r0, [r0]
   53268:	add	r1, r1, r0
   5326c:	ldr	r0, [r4]
   53270:	bl	1a2c <fseek@plt>
   53274:	ldr	r0, [r7, #32]
   53278:	ldr	r1, [r8, #4]
   5327c:	ldr	r3, [r7, #8]
   53280:	ldr	r2, [r7, #16]
   53284:	stm	sp, {r0, r5, sl}
   53288:	mov	r0, r4
   5328c:	b	53338 <Mat_VarReadData4+0x1dc>
   53290:	ldr	r1, [r7, #20]
   53294:	cmp	r1, #0
   53298:	beq	53344 <Mat_VarReadData4+0x1e8>
   5329c:	mov	r0, r3
   532a0:	bl	1924 <Mat_SizeOf@plt>
   532a4:	str	r0, [sp, #20]
   532a8:	add	r1, sp, #20
   532ac:	mov	r0, r7
   532b0:	bl	53824 <SafeMulDims>
   532b4:	ldr	r1, [r8]
   532b8:	ldmib	r7, {r0, r3}
   532bc:	ldr	r6, [r7, #32]
   532c0:	ldr	r2, [r7, #16]
   532c4:	stm	sp, {r0, r6}
   532c8:	mov	r0, r4
   532cc:	str	r5, [sp, #8]
   532d0:	str	sl, [sp, #12]
   532d4:	str	r9, [sp, #16]
   532d8:	bl	1976c <ReadDataSlabN>
   532dc:	ldr	r0, [r7, #52]	; 0x34
   532e0:	ldr	r1, [sp, #20]
   532e4:	mov	r2, #0
   532e8:	mov	r6, #0
   532ec:	ldr	r0, [r0]
   532f0:	add	r1, r1, r0
   532f4:	ldr	r0, [r4]
   532f8:	bl	1a2c <fseek@plt>
   532fc:	ldr	r1, [r8, #4]
   53300:	ldmib	r7, {r0, r3}
   53304:	ldr	r2, [r7, #16]
   53308:	ldr	r7, [r7, #32]
   5330c:	stm	sp, {r0, r7}
   53310:	mov	r0, r4
   53314:	str	r5, [sp, #8]
   53318:	str	sl, [sp, #12]
   5331c:	str	r9, [sp, #16]
   53320:	bl	1976c <ReadDataSlabN>
   53324:	b	53364 <Mat_VarReadData4+0x208>
   53328:	ldr	r2, [r7, #16]
   5332c:	stm	sp, {r0, r5, sl}
   53330:	mov	r0, r4
   53334:	mov	r1, r8
   53338:	str	r9, [sp, #12]
   5333c:	bl	22214 <ReadDataSlab2>
   53340:	b	53364 <Mat_VarReadData4+0x208>
   53344:	ldr	r1, [r7, #32]
   53348:	ldr	r2, [r7, #16]
   5334c:	stm	sp, {r0, r1, r5, sl}
   53350:	mov	r0, r4
   53354:	mov	r1, r8
   53358:	str	r9, [sp, #16]
   5335c:	bl	1976c <ReadDataSlabN>
   53360:	mov	r6, #0
   53364:	mov	r0, r6
   53368:	sub	sp, fp, #28
   5336c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00053370 <Mat_VarReadDataLinear4>:
   53370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   53374:	add	fp, sp, #28
   53378:	sub	sp, sp, #20
   5337c:	mov	r4, r1
   53380:	mov	r5, r0
   53384:	mov	r7, #1
   53388:	add	r1, sp, #16
   5338c:	mov	sl, r3
   53390:	mov	r8, r2
   53394:	mov	r0, r4
   53398:	str	r7, [sp, #16]
   5339c:	bl	53824 <SafeMulDims>
   533a0:	ldr	r1, [r4, #52]	; 0x34
   533a4:	str	r0, [sp, #12]
   533a8:	ldr	r0, [r5]
   533ac:	mov	r2, #0
   533b0:	ldr	r1, [r1]
   533b4:	bl	1a2c <fseek@plt>
   533b8:	ldr	r0, [r4, #8]
   533bc:	bl	1924 <Mat_SizeOf@plt>
   533c0:	ldr	ip, [fp, #12]
   533c4:	ldr	lr, [fp, #8]
   533c8:	str	r0, [r4, #12]
   533cc:	mov	r6, r0
   533d0:	ldr	r9, [sp, #16]
   533d4:	sub	r0, ip, #1
   533d8:	mla	r0, r0, lr, sl
   533dc:	add	r0, r0, #1
   533e0:	cmp	r0, r9
   533e4:	bhi	53470 <Mat_VarReadDataLinear4+0x100>
   533e8:	ldr	r0, [r4, #20]
   533ec:	cmp	r0, #0
   533f0:	beq	53450 <Mat_VarReadDataLinear4+0xe0>
   533f4:	ldr	r3, [r4, #8]
   533f8:	ldr	r2, [r4, #16]
   533fc:	ldr	r1, [r8]
   53400:	mov	r0, r5
   53404:	stm	sp, {sl, lr}
   53408:	str	ip, [sp, #8]
   5340c:	mov	r7, lr
   53410:	bl	21d44 <ReadDataSlab1>
   53414:	ldr	r0, [r4, #52]	; 0x34
   53418:	mov	r2, #0
   5341c:	ldr	r0, [r0]
   53420:	mla	r1, r9, r6, r0
   53424:	ldr	r0, [r5]
   53428:	bl	1a2c <fseek@plt>
   5342c:	ldr	r0, [fp, #12]
   53430:	ldr	r1, [r8, #4]
   53434:	ldr	r3, [r4, #8]
   53438:	ldr	r2, [r4, #16]
   5343c:	str	sl, [sp]
   53440:	str	r7, [sp, #4]
   53444:	str	r0, [sp, #8]
   53448:	mov	r0, r5
   5344c:	b	53468 <Mat_VarReadDataLinear4+0xf8>
   53450:	ldr	r3, [r4, #8]
   53454:	ldr	r2, [r4, #16]
   53458:	mov	r0, r5
   5345c:	mov	r1, r8
   53460:	stm	sp, {sl, lr}
   53464:	str	ip, [sp, #8]
   53468:	bl	21d44 <ReadDataSlab1>
   5346c:	ldr	r7, [sp, #12]
   53470:	mov	r0, r7
   53474:	sub	sp, fp, #28
   53478:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5347c:	nop	{0}

00053480 <Mat_VarReadNextInfo4>:
   53480:	push	{r4, r5, r6, sl, fp, lr}
   53484:	add	fp, sp, #16
   53488:	sub	sp, sp, #8
   5348c:	cmp	r0, #0
   53490:	beq	53750 <Mat_VarReadNextInfo4+0x2d0>
   53494:	mov	r5, r0
   53498:	ldr	r0, [r0]
   5349c:	cmp	r0, #0
   534a0:	beq	53750 <Mat_VarReadNextInfo4+0x2d0>
   534a4:	bl	18a0 <Mat_VarCalloc@plt>
   534a8:	cmp	r0, #0
   534ac:	beq	53750 <Mat_VarReadNextInfo4+0x2d0>
   534b0:	ldr	r3, [r5]
   534b4:	mov	r4, r0
   534b8:	add	r0, sp, #4
   534bc:	mov	r1, #4
   534c0:	mov	r2, #1
   534c4:	bl	18b8 <fread@plt>
   534c8:	cmp	r0, #0
   534cc:	beq	53748 <Mat_VarReadNextInfo4+0x2c8>
   534d0:	ldr	r1, [sp, #4]
   534d4:	movw	r0, #4053	; 0xfd5
   534d8:	cmp	r1, r0
   534dc:	bcc	534f8 <Mat_VarReadNextInfo4+0x78>
   534e0:	add	r0, sp, #4
   534e4:	bl	1bf0 <Mat_int32Swap>
   534e8:	movw	r1, #4052	; 0xfd4
   534ec:	cmp	r0, r1
   534f0:	bgt	53748 <Mat_VarReadNextInfo4+0x2c8>
   534f4:	ldr	r1, [sp, #4]
   534f8:	vldr	d16, [pc, #632]	; 53778 <Mat_VarReadNextInfo4+0x2f8>
   534fc:	vmov	s0, r1
   53500:	movw	r2, #64536	; 0xfc18
   53504:	mvn	r3, #99	; 0x63
   53508:	vcvt.f64.s32	d17, s0
   5350c:	movt	r2, #65535	; 0xffff
   53510:	vdiv.f64	d16, d17, d16
   53514:	vcvtm.s32.f64	s0, d16
   53518:	vldr	d16, [pc, #608]	; 53780 <Mat_VarReadNextInfo4+0x300>
   5351c:	vmov	r0, s0
   53520:	mla	r1, r0, r2, r1
   53524:	cmp	r0, #2
   53528:	vmov	s0, r1
   5352c:	vcvt.f64.s32	d17, s0
   53530:	vdiv.f64	d16, d17, d16
   53534:	vcvtm.s32.f64	s0, d16
   53538:	vmov.f64	d16, #36	; 0x41200000  10.0
   5353c:	vmov	r2, s0
   53540:	mla	r3, r2, r3, r1
   53544:	vmov	s0, r3
   53548:	vcvt.f64.s32	d17, s0
   5354c:	vdiv.f64	d16, d17, d16
   53550:	vcvtm.s32.f64	s0, d16
   53554:	vmov	r1, s0
   53558:	add	r6, r1, r1, lsl #2
   5355c:	rsb	r6, r6, #0
   53560:	add	r3, r3, r6, lsl #1
   53564:	vmov	s0, r3
   53568:	vcvt.f64.s32	d16, s0
   5356c:	vcvtm.s32.f64	s0, d16
   53570:	str	r3, [sp, #4]
   53574:	bcs	53748 <Mat_VarReadNextInfo4+0x2c8>
   53578:	cmp	r2, #0
   5357c:	str	r0, [r5, #20]
   53580:	bne	53748 <Mat_VarReadNextInfo4+0x2c8>
   53584:	cmp	r1, #6
   53588:	bcs	53748 <Mat_VarReadNextInfo4+0x2c8>
   5358c:	ldr	r2, [pc, #500]	; 53788 <Mat_VarReadNextInfo4+0x308>
   53590:	vmov	r0, s0
   53594:	cmp	r0, #3
   53598:	add	r2, pc, r2
   5359c:	ldr	r1, [r2, r1, lsl #2]
   535a0:	str	r1, [r4, #8]
   535a4:	bcs	53748 <Mat_VarReadNextInfo4+0x2c8>
   535a8:	mov	r1, #2
   535ac:	str	r1, [r4, #4]
   535b0:	ldr	r1, [pc, #468]	; 5378c <Mat_VarReadNextInfo4+0x30c>
   535b4:	add	r1, pc, r1
   535b8:	ldr	r0, [r1, r0, lsl #2]
   535bc:	str	r0, [r4, #16]
   535c0:	mov	r0, #8
   535c4:	bl	18d0 <malloc@plt>
   535c8:	cmp	r0, #0
   535cc:	str	r0, [r4, #32]
   535d0:	beq	53748 <Mat_VarReadNextInfo4+0x2c8>
   535d4:	ldr	r3, [r5]
   535d8:	add	r0, sp, #4
   535dc:	mov	r1, #4
   535e0:	mov	r2, #1
   535e4:	bl	18b8 <fread@plt>
   535e8:	mov	r6, r0
   535ec:	ldr	r0, [r5, #20]
   535f0:	cmp	r0, #0
   535f4:	beq	53600 <Mat_VarReadNextInfo4+0x180>
   535f8:	add	r0, sp, #4
   535fc:	bl	1bf0 <Mat_int32Swap>
   53600:	ldr	r0, [r4, #32]
   53604:	ldr	r1, [sp, #4]
   53608:	cmp	r6, #0
   5360c:	str	r1, [r0]
   53610:	beq	53748 <Mat_VarReadNextInfo4+0x2c8>
   53614:	ldr	r3, [r5]
   53618:	add	r0, sp, #4
   5361c:	mov	r1, #4
   53620:	mov	r2, #1
   53624:	bl	18b8 <fread@plt>
   53628:	mov	r6, r0
   5362c:	ldr	r0, [r5, #20]
   53630:	cmp	r0, #0
   53634:	beq	53640 <Mat_VarReadNextInfo4+0x1c0>
   53638:	add	r0, sp, #4
   5363c:	bl	1bf0 <Mat_int32Swap>
   53640:	ldr	r0, [r4, #32]
   53644:	ldr	r1, [sp, #4]
   53648:	cmp	r6, #0
   5364c:	str	r1, [r0, #4]
   53650:	beq	53748 <Mat_VarReadNextInfo4+0x2c8>
   53654:	ldr	r3, [r5]
   53658:	add	r6, r4, #20
   5365c:	mov	r1, #4
   53660:	mov	r2, #1
   53664:	mov	r0, r6
   53668:	bl	18b8 <fread@plt>
   5366c:	cmp	r0, #0
   53670:	beq	53748 <Mat_VarReadNextInfo4+0x2c8>
   53674:	ldr	r0, [r6]
   53678:	cmp	r0, #0
   5367c:	beq	5368c <Mat_VarReadNextInfo4+0x20c>
   53680:	ldr	r0, [r4, #16]
   53684:	cmp	r0, #4
   53688:	beq	53748 <Mat_VarReadNextInfo4+0x2c8>
   5368c:	ldr	r3, [r5]
   53690:	add	r0, sp, #4
   53694:	mov	r1, #4
   53698:	mov	r2, #1
   5369c:	bl	18b8 <fread@plt>
   536a0:	cmp	r0, #0
   536a4:	beq	53748 <Mat_VarReadNextInfo4+0x2c8>
   536a8:	ldr	r0, [r5, #20]
   536ac:	cmp	r0, #0
   536b0:	beq	536bc <Mat_VarReadNextInfo4+0x23c>
   536b4:	add	r0, sp, #4
   536b8:	bl	1bf0 <Mat_int32Swap>
   536bc:	ldr	r6, [sp, #4]
   536c0:	cmp	r6, #0
   536c4:	ble	53748 <Mat_VarReadNextInfo4+0x2c8>
   536c8:	mov	r0, r6
   536cc:	bl	18d0 <malloc@plt>
   536d0:	cmp	r0, #0
   536d4:	str	r0, [r4, #36]	; 0x24
   536d8:	beq	53748 <Mat_VarReadNextInfo4+0x2c8>
   536dc:	ldr	r3, [r5]
   536e0:	mov	r1, #1
   536e4:	mov	r2, r6
   536e8:	bl	18b8 <fread@plt>
   536ec:	cmp	r0, #0
   536f0:	beq	53748 <Mat_VarReadNextInfo4+0x2c8>
   536f4:	ldr	r0, [r5]
   536f8:	bl	1840 <ftell@plt>
   536fc:	ldr	r1, [r4, #52]	; 0x34
   53700:	cmn	r0, #1
   53704:	str	r0, [r1]
   53708:	beq	53760 <Mat_VarReadNextInfo4+0x2e0>
   5370c:	ldr	r0, [r4, #8]
   53710:	bl	1924 <Mat_SizeOf@plt>
   53714:	str	r0, [sp]
   53718:	ldr	r1, [r4, #20]
   5371c:	cmp	r1, #0
   53720:	mov	r1, sp
   53724:	lslne	r0, r0, #1
   53728:	strne	r0, [sp]
   5372c:	mov	r0, r4
   53730:	bl	53824 <SafeMulDims>
   53734:	ldr	r1, [sp]
   53738:	ldr	r0, [r5]
   5373c:	mov	r2, #1
   53740:	bl	1a2c <fseek@plt>
   53744:	b	53754 <Mat_VarReadNextInfo4+0x2d4>
   53748:	mov	r0, r4
   5374c:	bl	1918 <Mat_VarFree@plt>
   53750:	mov	r4, #0
   53754:	mov	r0, r4
   53758:	sub	sp, fp, #16
   5375c:	pop	{r4, r5, r6, sl, fp, pc}
   53760:	mov	r0, r4
   53764:	bl	1918 <Mat_VarFree@plt>
   53768:	ldr	r0, [pc, #32]	; 53790 <Mat_VarReadNextInfo4+0x310>
   5376c:	add	r0, pc, r0
   53770:	bl	19b4 <Mat_Critical@plt>
   53774:	b	53750 <Mat_VarReadNextInfo4+0x2d0>
   53778:	.word	0x00000000
   5377c:	.word	0x408f4000
   53780:	.word	0x00000000
   53784:	.word	0x40590000
   53788:	.word	0x000059e0
   5378c:	.word	0x000059dc
   53790:	.word	0x0000527c

00053794 <ComplexMalloc>:
   53794:	push	{r4, r5, r6, sl, fp, lr}
   53798:	add	fp, sp, #16
   5379c:	mov	r5, r0
   537a0:	mov	r0, #8
   537a4:	bl	18d0 <malloc@plt>
   537a8:	mov	r4, r0
   537ac:	cmp	r0, #0
   537b0:	beq	537e0 <ComplexMalloc+0x4c>
   537b4:	mov	r0, r5
   537b8:	bl	18d0 <malloc@plt>
   537bc:	cmp	r0, #0
   537c0:	str	r0, [r4]
   537c4:	beq	537f0 <ComplexMalloc+0x5c>
   537c8:	mov	r6, r0
   537cc:	mov	r0, r5
   537d0:	bl	18d0 <malloc@plt>
   537d4:	cmp	r0, #0
   537d8:	str	r0, [r4, #4]
   537dc:	beq	537e8 <ComplexMalloc+0x54>
   537e0:	mov	r0, r4
   537e4:	pop	{r4, r5, r6, sl, fp, pc}
   537e8:	mov	r0, r6
   537ec:	bl	1804 <free@plt>
   537f0:	mov	r0, r4
   537f4:	bl	1804 <free@plt>
   537f8:	mov	r4, #0
   537fc:	mov	r0, r4
   53800:	pop	{r4, r5, r6, sl, fp, pc}

00053804 <ClassType2DataType>:
   53804:	sub	r0, r0, #1
   53808:	cmp	r0, #14
   5380c:	ldrls	r1, [pc, #12]	; 53820 <ClassType2DataType+0x1c>
   53810:	movhi	r0, #0
   53814:	addls	r1, pc, r1
   53818:	ldrls	r0, [r1, r0, lsl #2]
   5381c:	bx	lr
   53820:	.word	0x00005eb4

00053824 <SafeMulDims>:
   53824:	push	{fp, lr}
   53828:	mov	fp, sp
   5382c:	ldr	r2, [r0, #4]
   53830:	cmp	r2, #1
   53834:	movlt	r0, #0
   53838:	poplt	{fp, pc}
   5383c:	ldr	lr, [r1]
   53840:	ldr	ip, [r0, #32]
   53844:	mov	r3, #0
   53848:	b	53860 <SafeMulDims+0x3c>
   5384c:	ldr	r2, [r0, #4]
   53850:	add	r3, r3, #1
   53854:	cmp	r3, r2
   53858:	movge	r0, #0
   5385c:	popge	{fp, pc}
   53860:	ldr	r2, [ip, r3, lsl #2]
   53864:	umull	lr, r2, lr, r2
   53868:	cmp	r2, #0
   5386c:	str	lr, [r1]
   53870:	beq	5384c <SafeMulDims+0x28>
   53874:	mov	r0, #0
   53878:	str	r0, [r1]
   5387c:	mov	r0, #1
   53880:	pop	{fp, pc}

00053884 <SafeMul>:
   53884:	umull	r2, r1, r1, r2
   53888:	cmp	r1, #0
   5388c:	movwne	r1, #1
   53890:	cmp	r1, #0
   53894:	movwne	r2, #0
   53898:	str	r2, [r0]
   5389c:	mov	r0, r1
   538a0:	bx	lr

000538a4 <Mat_GetLibraryVersion>:
   538a4:	cmp	r0, #0
   538a8:	movne	r3, #1
   538ac:	strne	r3, [r0]
   538b0:	cmp	r1, #0
   538b4:	movne	r0, #5
   538b8:	strne	r0, [r1]
   538bc:	cmp	r2, #0
   538c0:	movne	r0, #15
   538c4:	strne	r0, [r2]
   538c8:	bx	lr

000538cc <Mat_CreateVer>:
   538cc:	cmp	r2, #256	; 0x100
   538d0:	beq	538e4 <Mat_CreateVer+0x18>
   538d4:	cmp	r2, #16
   538d8:	movne	r0, #0
   538dc:	bxne	lr
   538e0:	b	52228 <Mat_Create4>
   538e4:	b	252b0 <Mat_Create5>

000538e8 <Mat_Open>:
   538e8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   538ec:	add	fp, sp, #24
   538f0:	sub	sp, sp, #8
   538f4:	mov	r9, r1
   538f8:	mov	r8, r0
   538fc:	tst	r1, #1
   53900:	bne	53924 <Mat_Open+0x3c>
   53904:	ldr	r1, [pc, #896]	; 53c8c <Mat_Open+0x3a4>
   53908:	mov	r0, r8
   5390c:	add	r1, pc, r1
   53910:	bl	17e0 <fopen@plt>
   53914:	mov	r7, r0
   53918:	cmp	r0, #0
   5391c:	bne	53940 <Mat_Open+0x58>
   53920:	b	53c7c <Mat_Open+0x394>
   53924:	ldr	r1, [pc, #872]	; 53c94 <Mat_Open+0x3ac>
   53928:	mov	r0, r8
   5392c:	add	r1, pc, r1
   53930:	bl	17e0 <fopen@plt>
   53934:	mov	r7, r0
   53938:	cmp	r0, #0
   5393c:	beq	53a58 <Mat_Open+0x170>
   53940:	mov	r0, #44	; 0x2c
   53944:	bl	18d0 <malloc@plt>
   53948:	cmp	r0, #0
   5394c:	beq	53a40 <Mat_Open+0x158>
   53950:	mov	r5, r0
   53954:	str	r7, [r0]
   53958:	mov	r0, #128	; 0x80
   5395c:	mov	r1, #1
   53960:	bl	1798 <calloc@plt>
   53964:	cmp	r0, #0
   53968:	str	r0, [r5, #4]
   5396c:	beq	53a80 <Mat_Open+0x198>
   53970:	mov	r4, r0
   53974:	mov	r0, #8
   53978:	mov	r1, #1
   5397c:	bl	1798 <calloc@plt>
   53980:	cmp	r0, #0
   53984:	str	r0, [r5, #8]
   53988:	beq	53aa0 <Mat_Open+0x1b8>
   5398c:	mov	r6, #0
   53990:	mov	r0, r4
   53994:	mov	r1, #1
   53998:	mov	r2, #116	; 0x74
   5399c:	mov	r3, r7
   539a0:	str	r6, [r5, #12]
   539a4:	str	r6, [r5, #16]
   539a8:	str	r6, [r5, #20]
   539ac:	str	r6, [r5, #36]	; 0x24
   539b0:	str	r6, [r5, #40]	; 0x28
   539b4:	bl	18b8 <fread@plt>
   539b8:	mov	r4, r0
   539bc:	ldr	r0, [r5, #4]
   539c0:	mov	r1, #1
   539c4:	mov	r2, #8
   539c8:	mov	r3, r7
   539cc:	strb	r6, [r0, #116]	; 0x74
   539d0:	ldr	r0, [r5, #8]
   539d4:	bl	18b8 <fread@plt>
   539d8:	add	r4, r0, r4
   539dc:	add	r0, sp, #4
   539e0:	mov	r1, #2
   539e4:	mov	r2, #1
   539e8:	mov	r3, r7
   539ec:	bl	18b8 <fread@plt>
   539f0:	add	r4, r4, r0, lsl #1
   539f4:	add	r0, sp, #6
   539f8:	mov	r1, #1
   539fc:	mov	r2, #2
   53a00:	mov	r3, r7
   53a04:	bl	18b8 <fread@plt>
   53a08:	add	r4, r4, r0
   53a0c:	cmp	r4, #128	; 0x80
   53a10:	bne	53b2c <Mat_Open+0x244>
   53a14:	mvn	r0, #0
   53a18:	movw	r1, #18765	; 0x494d
   53a1c:	str	r0, [r5, #20]
   53a20:	ldrh	r0, [sp, #6]
   53a24:	cmp	r0, r1
   53a28:	beq	53adc <Mat_Open+0x1f4>
   53a2c:	movw	r1, #19785	; 0x4d49
   53a30:	cmp	r0, r1
   53a34:	moveq	r0, #0
   53a38:	streq	r0, [r5, #20]
   53a3c:	b	53aec <Mat_Open+0x204>
   53a40:	mov	r0, r7
   53a44:	bl	19cc <fclose@plt>
   53a48:	ldr	r0, [pc, #576]	; 53c90 <Mat_Open+0x3a8>
   53a4c:	add	r0, pc, r0
   53a50:	bl	19b4 <Mat_Critical@plt>
   53a54:	b	53c7c <Mat_Open+0x394>
   53a58:	bic	r0, r9, #1
   53a5c:	cmp	r0, #256	; 0x100
   53a60:	beq	53ac8 <Mat_Open+0x1e0>
   53a64:	mov	r5, #0
   53a68:	cmp	r0, #16
   53a6c:	bne	53c80 <Mat_Open+0x398>
   53a70:	mov	r0, r8
   53a74:	bl	52228 <Mat_Create4>
   53a78:	mov	r5, r0
   53a7c:	b	53c80 <Mat_Open+0x398>
   53a80:	mov	r0, r5
   53a84:	bl	1804 <free@plt>
   53a88:	mov	r0, r7
   53a8c:	bl	19cc <fclose@plt>
   53a90:	ldr	r0, [pc, #512]	; 53c98 <Mat_Open+0x3b0>
   53a94:	add	r0, pc, r0
   53a98:	bl	19b4 <Mat_Critical@plt>
   53a9c:	b	53c7c <Mat_Open+0x394>
   53aa0:	mov	r0, r4
   53aa4:	bl	1804 <free@plt>
   53aa8:	mov	r0, r5
   53aac:	bl	1804 <free@plt>
   53ab0:	mov	r0, r7
   53ab4:	bl	19cc <fclose@plt>
   53ab8:	ldr	r0, [pc, #476]	; 53c9c <Mat_Open+0x3b4>
   53abc:	add	r0, pc, r0
   53ac0:	bl	19b4 <Mat_Critical@plt>
   53ac4:	b	53c7c <Mat_Open+0x394>
   53ac8:	mov	r0, r8
   53acc:	mov	r1, #0
   53ad0:	bl	252b0 <Mat_Create5>
   53ad4:	mov	r5, r0
   53ad8:	b	53c80 <Mat_Open+0x398>
   53adc:	mov	r0, #1
   53ae0:	str	r0, [r5, #20]
   53ae4:	add	r0, sp, #4
   53ae8:	bl	1c18 <Mat_int16Swap>
   53aec:	ldrh	r0, [sp, #4]
   53af0:	cmp	r0, #512	; 0x200
   53af4:	sxth	r1, r0
   53af8:	cmpne	r0, #256	; 0x100
   53afc:	str	r1, [r5, #16]
   53b00:	bne	53b3c <Mat_Open+0x254>
   53b04:	ldr	r0, [r5, #20]
   53b08:	cmn	r0, #1
   53b0c:	beq	53b3c <Mat_Open+0x254>
   53b10:	ldr	r0, [r5]
   53b14:	bl	1840 <ftell@plt>
   53b18:	cmn	r0, #1
   53b1c:	str	r0, [r5, #28]
   53b20:	beq	53be4 <Mat_Open+0x2fc>
   53b24:	mov	r0, #0
   53b28:	str	r0, [r5, #32]
   53b2c:	ldr	r0, [r5, #16]
   53b30:	cmp	r0, #0
   53b34:	bne	53c30 <Mat_Open+0x348>
   53b38:	b	53b44 <Mat_Open+0x25c>
   53b3c:	mov	r0, #0
   53b40:	str	r0, [r5, #16]
   53b44:	ldr	r0, [r5, #4]
   53b48:	bl	1804 <free@plt>
   53b4c:	ldr	r0, [r5, #8]
   53b50:	bl	1804 <free@plt>
   53b54:	mov	r0, #0
   53b58:	mov	r1, #16
   53b5c:	str	r7, [r5]
   53b60:	mov	r2, #0
   53b64:	str	r0, [r5, #4]
   53b68:	str	r0, [r5, #8]
   53b6c:	str	r1, [r5, #16]
   53b70:	str	r0, [r5, #20]
   53b74:	str	r9, [r5, #24]
   53b78:	str	r0, [r5, #28]
   53b7c:	str	r0, [r5, #32]
   53b80:	mov	r0, r7
   53b84:	mov	r1, #0
   53b88:	bl	1a2c <fseek@plt>
   53b8c:	mov	r0, r5
   53b90:	bl	53480 <Mat_VarReadNextInfo4>
   53b94:	cmp	r4, #0
   53b98:	beq	53bb8 <Mat_Open+0x2d0>
   53b9c:	cmp	r0, #0
   53ba0:	bne	53bb8 <Mat_Open+0x2d0>
   53ba4:	mov	r0, r5
   53ba8:	bl	19a8 <Mat_Close@plt>
   53bac:	ldr	r0, [pc, #240]	; 53ca4 <Mat_Open+0x3bc>
   53bb0:	add	r0, pc, r0
   53bb4:	b	53c74 <Mat_Open+0x38c>
   53bb8:	bl	1918 <Mat_VarFree@plt>
   53bbc:	ldr	r0, [r5, #16]
   53bc0:	cmp	r0, #16
   53bc4:	beq	53c14 <Mat_Open+0x32c>
   53bc8:	cmp	r0, #512	; 0x200
   53bcc:	beq	53c28 <Mat_Open+0x340>
   53bd0:	cmp	r0, #256	; 0x100
   53bd4:	bne	53c30 <Mat_Open+0x348>
   53bd8:	ldr	r0, [r5]
   53bdc:	mov	r1, #128	; 0x80
   53be0:	b	53c1c <Mat_Open+0x334>
   53be4:	ldr	r0, [r5, #4]
   53be8:	bl	1804 <free@plt>
   53bec:	ldr	r0, [r5, #8]
   53bf0:	bl	1804 <free@plt>
   53bf4:	mov	r0, r5
   53bf8:	bl	1804 <free@plt>
   53bfc:	mov	r0, r7
   53c00:	bl	19cc <fclose@plt>
   53c04:	ldr	r0, [pc, #148]	; 53ca0 <Mat_Open+0x3b8>
   53c08:	add	r0, pc, r0
   53c0c:	bl	19b4 <Mat_Critical@plt>
   53c10:	b	53c7c <Mat_Open+0x394>
   53c14:	ldr	r0, [r5]
   53c18:	mov	r1, #0
   53c1c:	mov	r2, #0
   53c20:	bl	1a2c <fseek@plt>
   53c24:	b	53c30 <Mat_Open+0x348>
   53c28:	mov	r0, #0
   53c2c:	str	r0, [r5, #32]
   53c30:	ldr	r0, [pc, #112]	; 53ca8 <Mat_Open+0x3c0>
   53c34:	mov	r1, r8
   53c38:	add	r0, pc, r0
   53c3c:	bl	1dac <strdup_printf>
   53c40:	str	r0, [r5, #12]
   53c44:	str	r9, [r5, #24]
   53c48:	ldr	r0, [r5, #16]
   53c4c:	cmp	r0, #512	; 0x200
   53c50:	bne	53c80 <Mat_Open+0x398>
   53c54:	ldr	r0, [r5]
   53c58:	bl	19cc <fclose@plt>
   53c5c:	mov	r0, #0
   53c60:	str	r0, [r5]
   53c64:	mov	r0, r5
   53c68:	bl	19a8 <Mat_Close@plt>
   53c6c:	ldr	r0, [pc, #56]	; 53cac <Mat_Open+0x3c4>
   53c70:	add	r0, pc, r0
   53c74:	mov	r1, r8
   53c78:	bl	19b4 <Mat_Critical@plt>
   53c7c:	mov	r5, #0
   53c80:	mov	r0, r5
   53c84:	sub	sp, fp, #24
   53c88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   53c8c:	.word	0x00005690
   53c90:	.word	0x000053ec
   53c94:	.word	0x00005673
   53c98:	.word	0x0000550f
   53c9c:	.word	0x00005518
   53ca0:	.word	0x00004de0
   53ca4:	.word	0x0000545c
   53ca8:	.word	0x000056fb
   53cac:	.word	0x000053c6

00053cb0 <Mat_Rewind>:
   53cb0:	push	{r4, sl, fp, lr}
   53cb4:	add	fp, sp, #8
   53cb8:	ldr	r1, [r0, #16]
   53cbc:	cmp	r1, #16
   53cc0:	beq	53ce8 <Mat_Rewind+0x38>
   53cc4:	cmp	r1, #512	; 0x200
   53cc8:	beq	53d04 <Mat_Rewind+0x54>
   53ccc:	mvn	r4, #0
   53cd0:	cmp	r1, #256	; 0x100
   53cd4:	bne	53cfc <Mat_Rewind+0x4c>
   53cd8:	ldr	r0, [r0]
   53cdc:	mov	r4, #0
   53ce0:	mov	r1, #128	; 0x80
   53ce4:	b	53cf4 <Mat_Rewind+0x44>
   53ce8:	ldr	r0, [r0]
   53cec:	mov	r4, #0
   53cf0:	mov	r1, #0
   53cf4:	mov	r2, #0
   53cf8:	bl	1a2c <fseek@plt>
   53cfc:	mov	r0, r4
   53d00:	pop	{r4, sl, fp, pc}
   53d04:	mov	r4, #0
   53d08:	str	r4, [r0, #32]
   53d0c:	mov	r0, r4
   53d10:	pop	{r4, sl, fp, pc}

00053d14 <Mat_Close>:
   53d14:	cmp	r0, #0
   53d18:	beq	53dbc <Mat_Close+0xa8>
   53d1c:	push	{r4, r5, fp, lr}
   53d20:	add	fp, sp, #8
   53d24:	mov	r4, r0
   53d28:	ldr	r0, [r0]
   53d2c:	cmp	r0, #0
   53d30:	beq	53d38 <Mat_Close+0x24>
   53d34:	bl	19cc <fclose@plt>
   53d38:	ldr	r0, [r4, #4]
   53d3c:	cmp	r0, #0
   53d40:	beq	53d48 <Mat_Close+0x34>
   53d44:	bl	1804 <free@plt>
   53d48:	ldr	r0, [r4, #8]
   53d4c:	cmp	r0, #0
   53d50:	beq	53d58 <Mat_Close+0x44>
   53d54:	bl	1804 <free@plt>
   53d58:	ldr	r0, [r4, #12]
   53d5c:	cmp	r0, #0
   53d60:	beq	53d68 <Mat_Close+0x54>
   53d64:	bl	1804 <free@plt>
   53d68:	ldr	r0, [r4, #40]	; 0x28
   53d6c:	cmp	r0, #0
   53d70:	beq	53db0 <Mat_Close+0x9c>
   53d74:	ldr	r2, [r4, #36]	; 0x24
   53d78:	cmp	r2, #0
   53d7c:	beq	53dac <Mat_Close+0x98>
   53d80:	mov	r5, #0
   53d84:	ldr	r1, [r0, r5, lsl #2]
   53d88:	cmp	r1, #0
   53d8c:	beq	53da0 <Mat_Close+0x8c>
   53d90:	mov	r0, r1
   53d94:	bl	1804 <free@plt>
   53d98:	ldr	r2, [r4, #36]	; 0x24
   53d9c:	ldr	r0, [r4, #40]	; 0x28
   53da0:	add	r5, r5, #1
   53da4:	cmp	r5, r2
   53da8:	bcc	53d84 <Mat_Close+0x70>
   53dac:	bl	1804 <free@plt>
   53db0:	mov	r0, r4
   53db4:	bl	1804 <free@plt>
   53db8:	pop	{r4, r5, fp, lr}
   53dbc:	mov	r0, #0
   53dc0:	bx	lr

00053dc4 <Mat_VarFree>:
   53dc4:	cmp	r0, #0
   53dc8:	bxeq	lr
   53dcc:	push	{r4, r5, r6, sl, fp, lr}
   53dd0:	add	fp, sp, #16
   53dd4:	mov	r4, r0
   53dd8:	ldr	r0, [r0, #32]
   53ddc:	cmp	r0, #0
   53de0:	beq	53e18 <Mat_VarFree+0x54>
   53de4:	ldr	r1, [r4, #4]
   53de8:	mov	r6, #1
   53dec:	cmp	r1, #1
   53df0:	blt	53e24 <Mat_VarFree+0x60>
   53df4:	mov	r2, #0
   53df8:	ldr	r3, [r0, r2, lsl #2]
   53dfc:	umull	r6, r3, r6, r3
   53e00:	cmp	r3, #0
   53e04:	bne	53e20 <Mat_VarFree+0x5c>
   53e08:	add	r2, r2, #1
   53e0c:	cmp	r2, r1
   53e10:	blt	53df8 <Mat_VarFree+0x34>
   53e14:	b	53e24 <Mat_VarFree+0x60>
   53e18:	mov	r6, #0
   53e1c:	b	53e28 <Mat_VarFree+0x64>
   53e20:	mov	r6, #0
   53e24:	bl	1804 <free@plt>
   53e28:	ldr	r5, [r4, #40]	; 0x28
   53e2c:	cmp	r5, #0
   53e30:	beq	53ec0 <Mat_VarFree+0xfc>
   53e34:	ldr	r0, [r4, #16]
   53e38:	sub	r0, r0, #1
   53e3c:	cmp	r0, #15
   53e40:	bhi	53ec0 <Mat_VarFree+0xfc>
   53e44:	add	r1, pc, #4
   53e48:	ldr	r0, [r1, r0, lsl #2]
   53e4c:	add	pc, r1, r0
   53e50:	.word	0x00000120
   53e54:	.word	0x00000148
   53e58:	.word	0x00000070
   53e5c:	.word	0x00000040
   53e60:	.word	0x00000188
   53e64:	.word	0x00000040
   53e68:	.word	0x00000040
   53e6c:	.word	0x00000040
   53e70:	.word	0x00000040
   53e74:	.word	0x00000040
   53e78:	.word	0x00000040
   53e7c:	.word	0x00000040
   53e80:	.word	0x00000040
   53e84:	.word	0x00000040
   53e88:	.word	0x00000040
   53e8c:	.word	0x000001e0
   53e90:	ldr	r0, [r4, #44]	; 0x2c
   53e94:	cmp	r0, #0
   53e98:	bne	53ec0 <Mat_VarFree+0xfc>
   53e9c:	ldr	r0, [r4, #20]
   53ea0:	cmp	r0, #0
   53ea4:	beq	53eb8 <Mat_VarFree+0xf4>
   53ea8:	ldr	r0, [r5]
   53eac:	bl	1804 <free@plt>
   53eb0:	ldr	r0, [r5, #4]
   53eb4:	bl	1804 <free@plt>
   53eb8:	mov	r0, r5
   53ebc:	bl	1804 <free@plt>
   53ec0:	ldr	r0, [r4, #52]	; 0x34
   53ec4:	cmp	r0, #0
   53ec8:	beq	540b8 <Mat_VarFree+0x2f4>
   53ecc:	ldr	r1, [r4, #48]	; 0x30
   53ed0:	cmp	r1, #1
   53ed4:	bne	54058 <Mat_VarFree+0x294>
   53ed8:	ldr	r0, [r0, #12]
   53edc:	bl	193c <inflateEnd@plt>
   53ee0:	ldr	r0, [r4, #52]	; 0x34
   53ee4:	ldr	r0, [r0, #12]
   53ee8:	bl	1804 <free@plt>
   53eec:	ldr	r0, [r4, #52]	; 0x34
   53ef0:	ldr	r5, [r0, #16]
   53ef4:	cmp	r5, #0
   53ef8:	beq	54058 <Mat_VarFree+0x294>
   53efc:	ldr	r0, [r4, #16]
   53f00:	cmp	r0, #5
   53f04:	bne	53f54 <Mat_VarFree+0x190>
   53f08:	ldr	r0, [r5, #4]
   53f0c:	cmp	r0, #0
   53f10:	beq	53f18 <Mat_VarFree+0x154>
   53f14:	bl	1804 <free@plt>
   53f18:	ldr	r0, [r5, #12]
   53f1c:	cmp	r0, #0
   53f20:	beq	53f28 <Mat_VarFree+0x164>
   53f24:	bl	1804 <free@plt>
   53f28:	ldr	r0, [r4, #20]
   53f2c:	ldr	r6, [r5, #24]
   53f30:	cmp	r0, #0
   53f34:	beq	54040 <Mat_VarFree+0x27c>
   53f38:	cmp	r6, #0
   53f3c:	beq	54050 <Mat_VarFree+0x28c>
   53f40:	ldr	r0, [r6]
   53f44:	bl	1804 <free@plt>
   53f48:	ldr	r0, [r6, #4]
   53f4c:	bl	1804 <free@plt>
   53f50:	b	54048 <Mat_VarFree+0x284>
   53f54:	ldr	r0, [r4, #20]
   53f58:	cmp	r0, #0
   53f5c:	beq	54050 <Mat_VarFree+0x28c>
   53f60:	ldr	r0, [r5]
   53f64:	bl	1804 <free@plt>
   53f68:	ldr	r0, [r5, #4]
   53f6c:	b	5404c <Mat_VarFree+0x288>
   53f70:	ldr	r0, [r4, #44]	; 0x2c
   53f74:	cmp	r0, #0
   53f78:	bne	53ec0 <Mat_VarFree+0xfc>
   53f7c:	cmp	r6, #0
   53f80:	beq	53eb8 <Mat_VarFree+0xf4>
   53f84:	ldr	r0, [r5], #4
   53f88:	bl	1918 <Mat_VarFree@plt>
   53f8c:	subs	r6, r6, #1
   53f90:	bne	53f84 <Mat_VarFree+0x1c0>
   53f94:	b	53fd0 <Mat_VarFree+0x20c>
   53f98:	ldr	r0, [r4, #44]	; 0x2c
   53f9c:	cmp	r0, #0
   53fa0:	bne	53ec0 <Mat_VarFree+0xfc>
   53fa4:	ldr	r0, [r4, #52]	; 0x34
   53fa8:	ldr	r0, [r0, #4]
   53fac:	umull	r6, r0, r6, r0
   53fb0:	cmp	r0, #0
   53fb4:	bne	53eb8 <Mat_VarFree+0xf4>
   53fb8:	cmp	r6, #0
   53fbc:	beq	53eb8 <Mat_VarFree+0xf4>
   53fc0:	ldr	r0, [r5], #4
   53fc4:	bl	1918 <Mat_VarFree@plt>
   53fc8:	subs	r6, r6, #1
   53fcc:	bne	53fc0 <Mat_VarFree+0x1fc>
   53fd0:	ldr	r5, [r4, #40]	; 0x28
   53fd4:	b	53eb8 <Mat_VarFree+0xf4>
   53fd8:	ldr	r0, [r4, #44]	; 0x2c
   53fdc:	cmp	r0, #0
   53fe0:	bne	53ec0 <Mat_VarFree+0xfc>
   53fe4:	ldr	r0, [r5, #4]
   53fe8:	cmp	r0, #0
   53fec:	beq	53ff4 <Mat_VarFree+0x230>
   53ff0:	bl	1804 <free@plt>
   53ff4:	ldr	r0, [r5, #12]
   53ff8:	cmp	r0, #0
   53ffc:	beq	54004 <Mat_VarFree+0x240>
   54000:	bl	1804 <free@plt>
   54004:	ldr	r0, [r4, #20]
   54008:	ldr	r6, [r5, #24]
   5400c:	cmp	r0, #0
   54010:	beq	540d4 <Mat_VarFree+0x310>
   54014:	cmp	r6, #0
   54018:	beq	53eb8 <Mat_VarFree+0xf4>
   5401c:	ldr	r0, [r6]
   54020:	bl	1804 <free@plt>
   54024:	ldr	r0, [r6, #4]
   54028:	bl	1804 <free@plt>
   5402c:	b	540dc <Mat_VarFree+0x318>
   54030:	ldr	r0, [r4, #44]	; 0x2c
   54034:	cmp	r0, #0
   54038:	bne	53ec0 <Mat_VarFree+0xfc>
   5403c:	b	53eb8 <Mat_VarFree+0xf4>
   54040:	cmp	r6, #0
   54044:	beq	54050 <Mat_VarFree+0x28c>
   54048:	mov	r0, r6
   5404c:	bl	1804 <free@plt>
   54050:	mov	r0, r5
   54054:	bl	1804 <free@plt>
   54058:	ldr	r0, [r4, #52]	; 0x34
   5405c:	ldr	r1, [r0, #8]
   54060:	cmp	r1, #0
   54064:	ldrne	r2, [r0, #4]
   54068:	cmpne	r2, #0
   5406c:	beq	540ac <Mat_VarFree+0x2e8>
   54070:	mov	r5, #0
   54074:	ldr	r1, [r1, r5, lsl #2]
   54078:	cmp	r1, #0
   5407c:	beq	5408c <Mat_VarFree+0x2c8>
   54080:	mov	r0, r1
   54084:	bl	1804 <free@plt>
   54088:	ldr	r0, [r4, #52]	; 0x34
   5408c:	ldr	r2, [r0, #4]
   54090:	ldr	r1, [r0, #8]
   54094:	add	r5, r5, #1
   54098:	cmp	r5, r2
   5409c:	bcc	54074 <Mat_VarFree+0x2b0>
   540a0:	mov	r0, r1
   540a4:	bl	1804 <free@plt>
   540a8:	ldr	r0, [r4, #52]	; 0x34
   540ac:	bl	1804 <free@plt>
   540b0:	mov	r0, #0
   540b4:	str	r0, [r4, #52]	; 0x34
   540b8:	ldr	r0, [r4, #36]	; 0x24
   540bc:	cmp	r0, #0
   540c0:	beq	540c8 <Mat_VarFree+0x304>
   540c4:	bl	1804 <free@plt>
   540c8:	mov	r0, r4
   540cc:	pop	{r4, r5, r6, sl, fp, lr}
   540d0:	b	1804 <free@plt>
   540d4:	cmp	r6, #0
   540d8:	beq	53eb8 <Mat_VarFree+0xf4>
   540dc:	mov	r0, r6
   540e0:	b	53eb4 <Mat_VarFree+0xf0>

000540e4 <Mat_GetFilename>:
   540e4:	cmp	r0, #0
   540e8:	ldrne	r0, [r0, #12]
   540ec:	moveq	r0, #0
   540f0:	bx	lr

000540f4 <Mat_GetHeader>:
   540f4:	cmp	r0, #0
   540f8:	ldrne	r0, [r0, #4]
   540fc:	moveq	r0, #0
   54100:	bx	lr

00054104 <Mat_GetVersion>:
   54104:	cmp	r0, #0
   54108:	ldrne	r0, [r0, #16]
   5410c:	moveq	r0, #0
   54110:	bx	lr

00054114 <Mat_GetDir>:
   54114:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   54118:	add	fp, sp, #24
   5411c:	cmp	r1, #0
   54120:	moveq	r5, #0
   54124:	moveq	r0, r5
   54128:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   5412c:	mov	r4, r1
   54130:	mov	r5, r0
   54134:	cmp	r0, #0
   54138:	beq	541d8 <Mat_GetDir+0xc4>
   5413c:	ldr	r0, [r5, #40]	; 0x28
   54140:	ldr	r1, [r5, #16]
   54144:	cmp	r0, #0
   54148:	beq	5418c <Mat_GetDir+0x78>
   5414c:	cmp	r1, #512	; 0x200
   54150:	bne	54340 <Mat_GetDir+0x22c>
   54154:	mov	r1, #0
   54158:	str	r1, [r4]
   5415c:	ldr	r2, [r5, #36]	; 0x24
   54160:	cmp	r2, #0
   54164:	beq	54348 <Mat_GetDir+0x234>
   54168:	ldr	r2, [r0, r1, lsl #2]
   5416c:	cmp	r2, #0
   54170:	beq	54348 <Mat_GetDir+0x234>
   54174:	add	r1, r1, #1
   54178:	str	r1, [r4]
   5417c:	ldr	r2, [r5, #36]	; 0x24
   54180:	cmp	r1, r2
   54184:	bcc	54168 <Mat_GetDir+0x54>
   54188:	b	54348 <Mat_GetDir+0x234>
   5418c:	cmp	r1, #512	; 0x200
   54190:	bne	541e8 <Mat_GetDir+0xd4>
   54194:	ldr	r0, [r5, #36]	; 0x24
   54198:	cmp	r0, #0
   5419c:	beq	541d8 <Mat_GetDir+0xc4>
   541a0:	ldr	r6, [r5, #32]
   541a4:	mov	r1, #4
   541a8:	bl	1798 <calloc@plt>
   541ac:	cmp	r0, #0
   541b0:	str	r0, [r5, #40]	; 0x28
   541b4:	beq	542fc <Mat_GetDir+0x1e8>
   541b8:	mov	r7, #0
   541bc:	str	r7, [r5, #32]
   541c0:	ldr	r0, [pc, #400]	; 54358 <Mat_GetDir+0x244>
   541c4:	add	r0, pc, r0
   541c8:	bl	19b4 <Mat_Critical@plt>
   541cc:	str	r6, [r5, #32]
   541d0:	str	r7, [r4]
   541d4:	b	54348 <Mat_GetDir+0x234>
   541d8:	mov	r5, #0
   541dc:	mov	r0, r5
   541e0:	str	r5, [r4]
   541e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   541e8:	ldr	r0, [r5]
   541ec:	bl	1840 <ftell@plt>
   541f0:	cmn	r0, #1
   541f4:	beq	542e8 <Mat_GetDir+0x1d4>
   541f8:	mov	r6, r0
   541fc:	ldr	r0, [r5]
   54200:	ldr	r1, [r5, #28]
   54204:	mov	r2, #0
   54208:	mov	r7, #0
   5420c:	bl	1a2c <fseek@plt>
   54210:	str	r7, [r5, #36]	; 0x24
   54214:	mov	r9, #4
   54218:	ldr	r8, [pc, #316]	; 5435c <Mat_GetDir+0x248>
   5421c:	add	r8, pc, r8
   54220:	ldr	r0, [r5, #16]
   54224:	cmp	r0, #16
   54228:	beq	54240 <Mat_GetDir+0x12c>
   5422c:	cmp	r0, #256	; 0x100
   54230:	bne	54284 <Mat_GetDir+0x170>
   54234:	mov	r0, r5
   54238:	bl	4fa74 <Mat_VarReadNextInfo5>
   5423c:	b	54248 <Mat_GetDir+0x134>
   54240:	mov	r0, r5
   54244:	bl	53480 <Mat_VarReadNextInfo4>
   54248:	mov	r7, r0
   5424c:	cmp	r0, #0
   54250:	beq	54284 <Mat_GetDir+0x170>
   54254:	ldr	r0, [r7, #36]	; 0x24
   54258:	cmp	r0, #0
   5425c:	beq	542cc <Mat_GetDir+0x1b8>
   54260:	ldr	r0, [r5, #40]	; 0x28
   54264:	cmp	r0, #0
   54268:	beq	54298 <Mat_GetDir+0x184>
   5426c:	ldr	r1, [r5, #36]	; 0x24
   54270:	add	r1, r9, r1, lsl #2
   54274:	bl	1870 <realloc@plt>
   54278:	cmp	r0, #0
   5427c:	bne	542a8 <Mat_GetDir+0x194>
   54280:	b	54324 <Mat_GetDir+0x210>
   54284:	ldr	r0, [r5]
   54288:	bl	190c <feof@plt>
   5428c:	cmp	r0, #0
   54290:	bne	542d4 <Mat_GetDir+0x1c0>
   54294:	b	54318 <Mat_GetDir+0x204>
   54298:	mov	r0, #4
   5429c:	bl	18d0 <malloc@plt>
   542a0:	cmp	r0, #0
   542a4:	beq	54324 <Mat_GetDir+0x210>
   542a8:	str	r0, [r5, #40]	; 0x28
   542ac:	mov	r0, r8
   542b0:	ldr	r1, [r7, #36]	; 0x24
   542b4:	bl	1dac <strdup_printf>
   542b8:	ldr	r1, [r5, #36]	; 0x24
   542bc:	ldr	r2, [r5, #40]	; 0x28
   542c0:	add	r3, r1, #1
   542c4:	str	r3, [r5, #36]	; 0x24
   542c8:	str	r0, [r2, r1, lsl #2]
   542cc:	mov	r0, r7
   542d0:	bl	1918 <Mat_VarFree@plt>
   542d4:	ldr	r0, [r5]
   542d8:	bl	190c <feof@plt>
   542dc:	cmp	r0, #0
   542e0:	beq	54220 <Mat_GetDir+0x10c>
   542e4:	b	54330 <Mat_GetDir+0x21c>
   542e8:	mov	r5, #0
   542ec:	str	r5, [r4]
   542f0:	ldr	r0, [pc, #108]	; 54364 <Mat_GetDir+0x250>
   542f4:	add	r0, pc, r0
   542f8:	b	5430c <Mat_GetDir+0x1f8>
   542fc:	mov	r5, #0
   54300:	str	r5, [r4]
   54304:	ldr	r0, [pc, #72]	; 54354 <Mat_GetDir+0x240>
   54308:	add	r0, pc, r0
   5430c:	bl	19b4 <Mat_Critical@plt>
   54310:	mov	r0, r5
   54314:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   54318:	ldr	r0, [pc, #64]	; 54360 <Mat_GetDir+0x24c>
   5431c:	add	r0, pc, r0
   54320:	b	5432c <Mat_GetDir+0x218>
   54324:	ldr	r0, [pc, #60]	; 54368 <Mat_GetDir+0x254>
   54328:	add	r0, pc, r0
   5432c:	bl	19b4 <Mat_Critical@plt>
   54330:	ldr	r0, [r5]
   54334:	mov	r1, r6
   54338:	mov	r2, #0
   5433c:	bl	1a2c <fseek@plt>
   54340:	ldr	r0, [r5, #36]	; 0x24
   54344:	str	r0, [r4]
   54348:	ldr	r5, [r5, #40]	; 0x28
   5434c:	mov	r0, r5
   54350:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   54354:	.word	0x00004d6f
   54358:	.word	0x00004ab0
   5435c:	.word	0x00005117
   54360:	.word	0x00004958
   54364:	.word	0x000046f4
   54368:	.word	0x00004d4f

0005436c <Mat_VarReadNextInfo>:
   5436c:	cmp	r0, #0
   54370:	beq	5438c <Mat_VarReadNextInfo+0x20>
   54374:	ldr	r1, [r0, #16]
   54378:	cmp	r1, #16
   5437c:	beq	54394 <Mat_VarReadNextInfo+0x28>
   54380:	cmp	r1, #256	; 0x100
   54384:	bne	5438c <Mat_VarReadNextInfo+0x20>
   54388:	b	4fa74 <Mat_VarReadNextInfo5>
   5438c:	mov	r0, #0
   54390:	bx	lr
   54394:	b	53480 <Mat_VarReadNextInfo4>

00054398 <Mat_SizeOfClass>:
   54398:	sub	r0, r0, #4
   5439c:	cmp	r0, #11
   543a0:	ldrls	r1, [pc, #12]	; 543b4 <Mat_SizeOfClass+0x1c>
   543a4:	movhi	r0, #0
   543a8:	addls	r1, pc, r1
   543ac:	ldrls	r0, [r1, r0, lsl #2]
   543b0:	bx	lr
   543b4:	.word	0x00005360

000543b8 <Mat_VarCalloc>:
   543b8:	push	{r4, r5, r6, sl, fp, lr}
   543bc:	add	fp, sp, #16
   543c0:	vpush	{d8-d9}
   543c4:	mov	r0, #56	; 0x38
   543c8:	bl	18d0 <malloc@plt>
   543cc:	mov	r4, r0
   543d0:	cmp	r0, #0
   543d4:	beq	5442c <Mat_VarCalloc+0x74>
   543d8:	vmov.i32	q4, #0	; 0x00000000
   543dc:	add	r0, r4, #32
   543e0:	mov	r6, r4
   543e4:	mov	r5, #0
   543e8:	vst1.32	{d8-d9}, [r0]
   543ec:	add	r0, r4, #16
   543f0:	str	r5, [r4, #48]	; 0x30
   543f4:	vst1.32	{d8-d9}, [r0]
   543f8:	mov	r0, #52	; 0x34
   543fc:	vst1.32	{d8-d9}, [r6], r0
   54400:	mov	r0, #20
   54404:	bl	18d0 <malloc@plt>
   54408:	cmp	r0, #0
   5440c:	str	r0, [r6]
   54410:	beq	54420 <Mat_VarCalloc+0x68>
   54414:	vst1.32	{d8-d9}, [r0]!
   54418:	str	r5, [r0]
   5441c:	b	5442c <Mat_VarCalloc+0x74>
   54420:	mov	r0, r4
   54424:	bl	1804 <free@plt>
   54428:	mov	r4, #0
   5442c:	mov	r0, r4
   54430:	vpop	{d8-d9}
   54434:	pop	{r4, r5, r6, sl, fp, pc}

00054438 <Mat_VarCreate>:
   54438:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5443c:	add	fp, sp, #28
   54440:	sub	sp, sp, #4
   54444:	vpush	{d8-d9}
   54448:	sub	sp, sp, #8
   5444c:	ldr	sl, [fp, #8]
   54450:	mov	r8, #0
   54454:	cmp	sl, #0
   54458:	beq	54950 <Mat_VarCreate+0x518>
   5445c:	mov	r7, r0
   54460:	mov	r0, #56	; 0x38
   54464:	mov	r6, r3
   54468:	mov	r5, r2
   5446c:	mov	r9, r1
   54470:	bl	18d0 <malloc@plt>
   54474:	cmp	r0, #0
   54478:	beq	54950 <Mat_VarCreate+0x518>
   5447c:	str	r5, [sp, #4]
   54480:	mov	r5, #0
   54484:	mov	r8, r0
   54488:	vmov.i32	q4, #0	; 0x00000000
   5448c:	add	r1, r0, #32
   54490:	str	r5, [r0, #48]	; 0x30
   54494:	add	r0, r0, #16
   54498:	mov	r4, r8
   5449c:	vst1.32	{d8-d9}, [r1]
   544a0:	vst1.32	{d8-d9}, [r0]
   544a4:	mov	r0, #52	; 0x34
   544a8:	vst1.32	{d8-d9}, [r4], r0
   544ac:	mov	r0, #20
   544b0:	bl	18d0 <malloc@plt>
   544b4:	cmp	r0, #0
   544b8:	str	r0, [r4]
   544bc:	beq	54538 <Mat_VarCreate+0x100>
   544c0:	ldr	r2, [fp, #16]
   544c4:	vst1.32	{d8-d9}, [r0]!
   544c8:	add	r3, r8, #20
   544cc:	cmp	r7, #0
   544d0:	mov	r4, r9
   544d4:	str	r5, [r8, #48]	; 0x30
   544d8:	str	r5, [r0]
   544dc:	and	r0, r2, #2048	; 0x800
   544e0:	and	r1, r2, #1024	; 0x400
   544e4:	and	r2, r2, #512	; 0x200
   544e8:	stm	r3, {r0, r1, r2}
   544ec:	beq	54504 <Mat_VarCreate+0xcc>
   544f0:	ldr	r0, [pc, #1132]	; 54964 <Mat_VarCreate+0x52c>
   544f4:	mov	r1, r7
   544f8:	add	r0, pc, r0
   544fc:	bl	1dac <strdup_printf>
   54500:	str	r0, [r8, #36]	; 0x24
   54504:	lsl	r0, r6, #2
   54508:	str	r6, [r8, #4]
   5450c:	bl	18d0 <malloc@plt>
   54510:	mov	r5, #1
   54514:	cmp	r6, #1
   54518:	mov	r7, #1
   5451c:	str	r0, [r8, #32]
   54520:	blt	545a0 <Mat_VarCreate+0x168>
   54524:	cmp	r6, #4
   54528:	bcs	54548 <Mat_VarCreate+0x110>
   5452c:	mov	r7, #1
   54530:	mov	r1, #0
   54534:	b	54588 <Mat_VarCreate+0x150>
   54538:	mov	r0, r8
   5453c:	bl	1804 <free@plt>
   54540:	mov	r8, #0
   54544:	b	54950 <Mat_VarCreate+0x518>
   54548:	bic	r1, r6, #3
   5454c:	vmov.i32	q8, #1	; 0x00000001
   54550:	mov	r3, r0
   54554:	mov	r7, sl
   54558:	mov	r2, r1
   5455c:	vld1.32	{d18-d19}, [r7]!
   54560:	subs	r2, r2, #4
   54564:	vst1.32	{d18-d19}, [r3]!
   54568:	vmul.i32	q8, q9, q8
   5456c:	bne	5455c <Mat_VarCreate+0x124>
   54570:	vext.8	q9, q8, q8, #8
   54574:	cmp	r1, r6
   54578:	vmul.i32	q0, q8, q9
   5457c:	vmul.i32	q8, q0, d0[1]
   54580:	vmov.32	r7, d16[0]
   54584:	beq	545a0 <Mat_VarCreate+0x168>
   54588:	ldr	r2, [sl, r1, lsl #2]
   5458c:	str	r2, [r0, r1, lsl #2]
   54590:	add	r1, r1, #1
   54594:	mul	r7, r2, r7
   54598:	cmp	r1, r6
   5459c:	blt	54588 <Mat_VarCreate+0x150>
   545a0:	ldr	r0, [sp, #4]
   545a4:	str	r0, [r8, #8]
   545a8:	sub	r0, r0, #1
   545ac:	str	r4, [r8, #16]
   545b0:	cmp	r0, #21
   545b4:	bhi	546a0 <Mat_VarCreate+0x268>
   545b8:	add	r1, pc, #8
   545bc:	ldr	sl, [fp, #12]
   545c0:	ldr	r0, [r1, r0, lsl #2]
   545c4:	add	pc, r1, r0
   545c8:	.word	0x00000184
   545cc:	.word	0x00000184
   545d0:	.word	0x000000ac
   545d4:	.word	0x000000ac
   545d8:	.word	0x00000058
   545dc:	.word	0x00000058
   545e0:	.word	0x00000058
   545e4:	.word	0x000000d8
   545e8:	.word	0x000000bc
   545ec:	.word	0x000000d8
   545f0:	.word	0x000000d8
   545f4:	.word	0x000000bc
   545f8:	.word	0x000000bc
   545fc:	.word	0x000000d8
   54600:	.word	0x000000d8
   54604:	.word	0x00000184
   54608:	.word	0x000000ac
   5460c:	.word	0x00000058
   54610:	.word	0x000000d8
   54614:	.word	0x000000d8
   54618:	.word	0x00000058
   5461c:	.word	0x000000f4
   54620:	mov	r5, #4
   54624:	cmp	r4, #5
   54628:	beq	54754 <Mat_VarCreate+0x31c>
   5462c:	umull	r6, r0, r7, r5
   54630:	str	r5, [r8, #12]
   54634:	cmp	r0, #0
   54638:	movwne	r0, #1
   5463c:	cmp	r0, #0
   54640:	movwne	r6, #0
   54644:	str	r6, [r8]
   54648:	cmp	sl, #0
   5464c:	bne	54768 <Mat_VarCreate+0x330>
   54650:	cmp	r4, #1
   54654:	bne	54694 <Mat_VarCreate+0x25c>
   54658:	cmp	r7, #0
   5465c:	beq	54694 <Mat_VarCreate+0x25c>
   54660:	mov	r0, r7
   54664:	mov	r1, #4
   54668:	bl	1798 <calloc@plt>
   5466c:	str	r0, [r8, #40]	; 0x28
   54670:	b	54950 <Mat_VarCreate+0x518>
   54674:	mov	r5, #2
   54678:	cmp	r4, #5
   5467c:	beq	54754 <Mat_VarCreate+0x31c>
   54680:	b	5462c <Mat_VarCreate+0x1f4>
   54684:	mov	r5, #8
   54688:	cmp	r4, #5
   5468c:	beq	54754 <Mat_VarCreate+0x31c>
   54690:	b	5462c <Mat_VarCreate+0x1f4>
   54694:	mov	r0, #0
   54698:	str	r0, [r8, #40]	; 0x28
   5469c:	b	54950 <Mat_VarCreate+0x518>
   546a0:	mov	r0, r8
   546a4:	bl	1918 <Mat_VarFree@plt>
   546a8:	ldr	r0, [pc, #696]	; 54968 <Mat_VarCreate+0x530>
   546ac:	add	r0, pc, r0
   546b0:	bl	19b4 <Mat_Critical@plt>
   546b4:	mov	r8, #0
   546b8:	b	54950 <Mat_VarCreate+0x518>
   546bc:	mov	r5, #4
   546c0:	cmp	sl, #0
   546c4:	beq	5474c <Mat_VarCreate+0x314>
   546c8:	mov	r0, #0
   546cc:	ldr	r1, [sl, r0, lsl #2]
   546d0:	add	r0, r0, #1
   546d4:	cmp	r1, #0
   546d8:	bne	546cc <Mat_VarCreate+0x294>
   546dc:	ldr	r9, [r8, #52]	; 0x34
   546e0:	sub	r6, r0, #1
   546e4:	cmp	r7, #0
   546e8:	udivne	r6, r6, r7
   546ec:	cmp	r6, #0
   546f0:	str	r6, [r9, #4]
   546f4:	beq	5474c <Mat_VarCreate+0x314>
   546f8:	mov	r0, r6
   546fc:	mov	r1, #4
   54700:	bl	1798 <calloc@plt>
   54704:	mov	r5, #0
   54708:	str	r0, [r9, #8]
   5470c:	ldr	r0, [sl, r5, lsl #2]
   54710:	ldr	r0, [r0, #36]	; 0x24
   54714:	bl	1864 <strdup@plt>
   54718:	ldr	r1, [r8, #52]	; 0x34
   5471c:	ldr	r1, [r1, #8]
   54720:	str	r0, [r1, r5, lsl #2]
   54724:	add	r5, r5, #1
   54728:	cmp	r6, r5
   5472c:	bne	5470c <Mat_VarCreate+0x2d4>
   54730:	umull	r7, r0, r7, r6
   54734:	ldr	r4, [r8, #16]
   54738:	mov	r5, #4
   5473c:	cmp	r0, #0
   54740:	movwne	r0, #1
   54744:	cmp	r0, #0
   54748:	movwne	r7, #0
   5474c:	cmp	r4, #5
   54750:	bne	5462c <Mat_VarCreate+0x1f4>
   54754:	mov	r6, #28
   54758:	str	r6, [r8]
   5475c:	str	r6, [r8, #12]
   54760:	cmp	sl, #0
   54764:	beq	54650 <Mat_VarCreate+0x218>
   54768:	ldr	r0, [fp, #16]
   5476c:	tst	r0, #1
   54770:	bne	54874 <Mat_VarCreate+0x43c>
   54774:	cmp	r4, #5
   54778:	bne	54880 <Mat_VarCreate+0x448>
   5477c:	mov	r0, #28
   54780:	bl	18d0 <malloc@plt>
   54784:	mov	r6, r0
   54788:	cmp	r0, #0
   5478c:	beq	5494c <Mat_VarCreate+0x514>
   54790:	ldr	r0, [sl]
   54794:	str	r0, [r6]
   54798:	ldr	r0, [sl, #8]
   5479c:	str	r0, [r6, #8]
   547a0:	lsl	r7, r0, #2
   547a4:	ldr	r9, [sl, #16]
   547a8:	ldr	r4, [sl, #20]
   547ac:	mov	r0, r7
   547b0:	str	r9, [r6, #16]
   547b4:	str	r4, [r6, #20]
   547b8:	bl	18d0 <malloc@plt>
   547bc:	cmp	r0, #0
   547c0:	str	r0, [r6, #4]
   547c4:	beq	547d4 <Mat_VarCreate+0x39c>
   547c8:	ldr	r1, [sl, #4]
   547cc:	mov	r2, r7
   547d0:	bl	181c <memcpy@plt>
   547d4:	lsl	r7, r9, #2
   547d8:	mov	r0, r7
   547dc:	bl	18d0 <malloc@plt>
   547e0:	cmp	r0, #0
   547e4:	str	r0, [r6, #12]
   547e8:	beq	547f8 <Mat_VarCreate+0x3c0>
   547ec:	ldr	r1, [sl, #12]
   547f0:	mov	r2, r7
   547f4:	bl	181c <memcpy@plt>
   547f8:	ldr	r0, [r8, #20]
   547fc:	cmp	r0, #0
   54800:	beq	54928 <Mat_VarCreate+0x4f0>
   54804:	mov	r0, #8
   54808:	bl	18d0 <malloc@plt>
   5480c:	cmp	r0, #0
   54810:	str	r0, [r6, #24]
   54814:	beq	5494c <Mat_VarCreate+0x514>
   54818:	ldr	sl, [sl, #24]
   5481c:	mul	r4, r4, r5
   54820:	mov	r7, r0
   54824:	mov	r0, r4
   54828:	bl	18d0 <malloc@plt>
   5482c:	mov	r5, r0
   54830:	str	r0, [r7]
   54834:	mov	r0, r4
   54838:	bl	18d0 <malloc@plt>
   5483c:	mov	r9, r0
   54840:	cmp	r5, #0
   54844:	str	r0, [r7, #4]
   54848:	beq	5485c <Mat_VarCreate+0x424>
   5484c:	ldr	r1, [sl]
   54850:	mov	r0, r5
   54854:	mov	r2, r4
   54858:	bl	181c <memcpy@plt>
   5485c:	cmp	r9, #0
   54860:	beq	5494c <Mat_VarCreate+0x514>
   54864:	ldr	r1, [sl, #4]
   54868:	mov	r0, r9
   5486c:	mov	r2, r4
   54870:	b	54948 <Mat_VarCreate+0x510>
   54874:	mov	r0, #1
   54878:	str	sl, [r8, #40]	; 0x28
   5487c:	b	54920 <Mat_VarCreate+0x4e8>
   54880:	ldr	r0, [r8, #20]
   54884:	cmp	r0, #0
   54888:	beq	548f4 <Mat_VarCreate+0x4bc>
   5488c:	mov	r0, #8
   54890:	bl	18d0 <malloc@plt>
   54894:	cmp	r0, #0
   54898:	str	r0, [r8, #40]	; 0x28
   5489c:	cmpne	r6, #0
   548a0:	beq	5491c <Mat_VarCreate+0x4e4>
   548a4:	mov	r7, r0
   548a8:	mov	r0, r6
   548ac:	bl	18d0 <malloc@plt>
   548b0:	mov	r9, r0
   548b4:	str	r0, [r7]
   548b8:	mov	r0, r6
   548bc:	bl	18d0 <malloc@plt>
   548c0:	mov	r4, r0
   548c4:	cmp	r9, #0
   548c8:	str	r0, [r7, #4]
   548cc:	beq	548e0 <Mat_VarCreate+0x4a8>
   548d0:	ldr	r1, [sl]
   548d4:	mov	r0, r9
   548d8:	mov	r2, r6
   548dc:	bl	181c <memcpy@plt>
   548e0:	cmp	r4, #0
   548e4:	beq	5491c <Mat_VarCreate+0x4e4>
   548e8:	ldr	r1, [sl, #4]
   548ec:	mov	r0, r4
   548f0:	b	54914 <Mat_VarCreate+0x4dc>
   548f4:	cmp	r6, #0
   548f8:	beq	5491c <Mat_VarCreate+0x4e4>
   548fc:	mov	r0, r6
   54900:	bl	18d0 <malloc@plt>
   54904:	cmp	r0, #0
   54908:	str	r0, [r8, #40]	; 0x28
   5490c:	beq	5491c <Mat_VarCreate+0x4e4>
   54910:	mov	r1, sl
   54914:	mov	r2, r6
   54918:	bl	181c <memcpy@plt>
   5491c:	mov	r0, #0
   54920:	str	r0, [r8, #44]	; 0x2c
   54924:	b	54950 <Mat_VarCreate+0x518>
   54928:	mul	r7, r4, r5
   5492c:	mov	r0, r7
   54930:	bl	18d0 <malloc@plt>
   54934:	cmp	r0, #0
   54938:	str	r0, [r6, #24]
   5493c:	beq	5494c <Mat_VarCreate+0x514>
   54940:	ldr	r1, [sl, #24]
   54944:	mov	r2, r7
   54948:	bl	181c <memcpy@plt>
   5494c:	str	r6, [r8, #40]	; 0x28
   54950:	mov	r0, r8
   54954:	sub	sp, fp, #48	; 0x30
   54958:	vpop	{d8-d9}
   5495c:	add	sp, sp, #4
   54960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   54964:	.word	0x00004e3b
   54968:	.word	0x000049f6

0005496c <Mat_VarDelete>:
   5496c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   54970:	add	fp, sp, #28
   54974:	sub	sp, sp, #20
   54978:	sub	sp, sp, #8192	; 0x2000
   5497c:	mov	r9, r0
   54980:	mov	r0, #0
   54984:	mov	r6, #1
   54988:	strb	r0, [sp, #14]
   5498c:	movw	r0, #22616	; 0x5858
   54990:	cmp	r9, #0
   54994:	strh	r0, [sp, #12]
   54998:	movw	r0, #22616	; 0x5858
   5499c:	movne	r7, r1
   549a0:	cmpne	r1, #0
   549a4:	movt	r0, #22616	; 0x5858
   549a8:	str	r0, [sp, #8]
   549ac:	bne	549bc <Mat_VarDelete+0x50>
   549b0:	mov	r0, r6
   549b4:	sub	sp, fp, #28
   549b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   549bc:	add	r0, sp, #8
   549c0:	bl	18e8 <mktemp@plt>
   549c4:	cmp	r0, #0
   549c8:	beq	54a04 <Mat_VarDelete+0x98>
   549cc:	ldr	r1, [r9, #16]
   549d0:	mov	r8, r0
   549d4:	cmp	r1, #512	; 0x200
   549d8:	mov	r0, r1
   549dc:	movwne	r0, #256	; 0x100
   549e0:	cmp	r1, #16
   549e4:	moveq	r0, r1
   549e8:	cmp	r0, #256	; 0x100
   549ec:	beq	54a14 <Mat_VarDelete+0xa8>
   549f0:	cmp	r0, #16
   549f4:	bne	549b0 <Mat_VarDelete+0x44>
   549f8:	mov	r0, r8
   549fc:	bl	52228 <Mat_Create4>
   54a00:	b	54a20 <Mat_VarDelete+0xb4>
   54a04:	ldr	r0, [pc, #1068]	; 54e38 <Mat_VarDelete+0x4cc>
   54a08:	add	r0, pc, r0
   54a0c:	bl	19b4 <Mat_Critical@plt>
   54a10:	b	549b0 <Mat_VarDelete+0x44>
   54a14:	ldr	r1, [r9, #4]
   54a18:	mov	r0, r8
   54a1c:	bl	252b0 <Mat_Create5>
   54a20:	mov	r5, r0
   54a24:	cmp	r0, #0
   54a28:	beq	549b0 <Mat_VarDelete+0x44>
   54a2c:	ldr	r0, [r9, #16]
   54a30:	cmp	r0, #16
   54a34:	beq	54a54 <Mat_VarDelete+0xe8>
   54a38:	cmp	r0, #512	; 0x200
   54a3c:	beq	54a68 <Mat_VarDelete+0xfc>
   54a40:	cmp	r0, #256	; 0x100
   54a44:	bne	54a70 <Mat_VarDelete+0x104>
   54a48:	ldr	r0, [r9]
   54a4c:	mov	r1, #128	; 0x80
   54a50:	b	54a5c <Mat_VarDelete+0xf0>
   54a54:	ldr	r0, [r9]
   54a58:	mov	r1, #0
   54a5c:	mov	r2, #0
   54a60:	bl	1a2c <fseek@plt>
   54a64:	b	54a70 <Mat_VarDelete+0x104>
   54a68:	mov	r0, #0
   54a6c:	str	r0, [r9, #32]
   54a70:	mov	r0, r9
   54a74:	bl	17a4 <Mat_VarReadNext@plt>
   54a78:	cmp	r0, #0
   54a7c:	beq	54ad4 <Mat_VarDelete+0x168>
   54a80:	mov	r6, r0
   54a84:	mov	r4, #1
   54a88:	ldr	r0, [r6, #36]	; 0x24
   54a8c:	mov	r1, r7
   54a90:	bl	17b0 <strcmp@plt>
   54a94:	cmp	r0, #0
   54a98:	beq	54ab0 <Mat_VarDelete+0x144>
   54a9c:	ldr	r2, [r6, #48]	; 0x30
   54aa0:	mov	r0, r5
   54aa4:	mov	r1, r6
   54aa8:	bl	1828 <Mat_VarWrite@plt>
   54aac:	b	54ab4 <Mat_VarDelete+0x148>
   54ab0:	mov	r4, #0
   54ab4:	mov	r0, r6
   54ab8:	bl	1918 <Mat_VarFree@plt>
   54abc:	mov	r0, r9
   54ac0:	bl	17a4 <Mat_VarReadNext@plt>
   54ac4:	mov	r6, r0
   54ac8:	cmp	r0, #0
   54acc:	bne	54a88 <Mat_VarDelete+0x11c>
   54ad0:	b	54ad8 <Mat_VarDelete+0x16c>
   54ad4:	mov	r4, #1
   54ad8:	ldr	sl, [r5, #36]	; 0x24
   54adc:	ldr	r6, [r5, #40]	; 0x28
   54ae0:	mov	r0, #0
   54ae4:	str	r0, [r5, #40]	; 0x28
   54ae8:	mov	r0, r5
   54aec:	bl	19a8 <Mat_Close@plt>
   54af0:	cmp	r4, #0
   54af4:	beq	54b24 <Mat_VarDelete+0x1b8>
   54af8:	mov	r0, r8
   54afc:	bl	19f0 <remove@plt>
   54b00:	mov	r6, r0
   54b04:	cmn	r0, #1
   54b08:	bne	549b0 <Mat_VarDelete+0x44>
   54b0c:	ldr	r0, [pc, #800]	; 54e34 <Mat_VarDelete+0x4c8>
   54b10:	mov	r1, r8
   54b14:	add	r0, pc, r0
   54b18:	bl	19b4 <Mat_Critical@plt>
   54b1c:	mvn	r6, #0
   54b20:	b	549b0 <Mat_VarDelete+0x44>
   54b24:	ldr	r1, [r9, #12]
   54b28:	ldr	r0, [pc, #740]	; 54e14 <Mat_VarDelete+0x4a8>
   54b2c:	add	r0, pc, r0
   54b30:	bl	1dac <strdup_printf>
   54b34:	mov	r7, r0
   54b38:	ldr	r0, [r9]
   54b3c:	cmp	r0, #0
   54b40:	beq	54b50 <Mat_VarDelete+0x1e4>
   54b44:	bl	19cc <fclose@plt>
   54b48:	mov	r0, #0
   54b4c:	str	r0, [r9]
   54b50:	add	r0, sp, #16
   54b54:	mov	r1, #0
   54b58:	mov	r2, #8192	; 0x2000
   54b5c:	bl	1990 <memset@plt>
   54b60:	ldr	r1, [pc, #688]	; 54e18 <Mat_VarDelete+0x4ac>
   54b64:	mov	r0, r8
   54b68:	add	r1, pc, r1
   54b6c:	bl	17e0 <fopen@plt>
   54b70:	cmp	r0, #0
   54b74:	beq	54c10 <Mat_VarDelete+0x2a4>
   54b78:	str	r6, [sp, #4]
   54b7c:	mov	r5, r0
   54b80:	mov	r0, r7
   54b84:	ldr	r1, [pc, #660]	; 54e20 <Mat_VarDelete+0x4b4>
   54b88:	add	r1, pc, r1
   54b8c:	bl	17e0 <fopen@plt>
   54b90:	cmp	r0, #0
   54b94:	beq	54c2c <Mat_VarDelete+0x2c0>
   54b98:	str	r7, [sp]
   54b9c:	mov	r6, r0
   54ba0:	mov	r4, r8
   54ba4:	add	r7, sp, #16
   54ba8:	mov	r0, r7
   54bac:	mov	r1, #1
   54bb0:	mov	r2, #8192	; 0x2000
   54bb4:	mov	r3, r5
   54bb8:	bl	1a14 <fread_unlocked@plt>
   54bbc:	cmp	r0, #0
   54bc0:	beq	54ca4 <Mat_VarDelete+0x338>
   54bc4:	mov	r8, r0
   54bc8:	mov	r0, r7
   54bcc:	mov	r1, #1
   54bd0:	mov	r3, r6
   54bd4:	mov	r2, r8
   54bd8:	bl	184c <fwrite_unlocked@plt>
   54bdc:	cmp	r8, r0
   54be0:	beq	54ba8 <Mat_VarDelete+0x23c>
   54be4:	mov	r0, r5
   54be8:	bl	19cc <fclose@plt>
   54bec:	mov	r0, r6
   54bf0:	bl	19cc <fclose@plt>
   54bf4:	ldr	r0, [pc, #552]	; 54e24 <Mat_VarDelete+0x4b8>
   54bf8:	ldr	r7, [sp]
   54bfc:	add	r0, pc, r0
   54c00:	mov	r1, r7
   54c04:	bl	19b4 <Mat_Critical@plt>
   54c08:	mov	r8, r4
   54c0c:	b	54c44 <Mat_VarDelete+0x2d8>
   54c10:	ldr	r0, [pc, #516]	; 54e1c <Mat_VarDelete+0x4b0>
   54c14:	mov	r1, r8
   54c18:	add	r0, pc, r0
   54c1c:	bl	19b4 <Mat_Critical@plt>
   54c20:	cmp	r6, #0
   54c24:	bne	54c50 <Mat_VarDelete+0x2e4>
   54c28:	b	54c80 <Mat_VarDelete+0x314>
   54c2c:	mov	r0, r5
   54c30:	bl	19cc <fclose@plt>
   54c34:	ldr	r0, [pc, #512]	; 54e3c <Mat_VarDelete+0x4d0>
   54c38:	mov	r1, r7
   54c3c:	add	r0, pc, r0
   54c40:	bl	19b4 <Mat_Critical@plt>
   54c44:	ldr	r6, [sp, #4]
   54c48:	cmp	r6, #0
   54c4c:	beq	54c80 <Mat_VarDelete+0x314>
   54c50:	cmp	sl, #0
   54c54:	beq	54c78 <Mat_VarDelete+0x30c>
   54c58:	mov	r4, r6
   54c5c:	ldr	r0, [r4]
   54c60:	cmp	r0, #0
   54c64:	beq	54c6c <Mat_VarDelete+0x300>
   54c68:	bl	1804 <free@plt>
   54c6c:	subs	sl, sl, #1
   54c70:	add	r4, r4, #4
   54c74:	bne	54c5c <Mat_VarDelete+0x2f0>
   54c78:	mov	r0, r6
   54c7c:	bl	1804 <free@plt>
   54c80:	ldr	r0, [pc, #416]	; 54e28 <Mat_VarDelete+0x4bc>
   54c84:	mov	r1, r8
   54c88:	mov	r2, r7
   54c8c:	add	r0, pc, r0
   54c90:	bl	19b4 <Mat_Critical@plt>
   54c94:	mvn	r6, #0
   54c98:	mov	r0, r7
   54c9c:	bl	1804 <free@plt>
   54ca0:	b	549b0 <Mat_VarDelete+0x44>
   54ca4:	mov	r0, r5
   54ca8:	bl	19cc <fclose@plt>
   54cac:	mov	r0, r6
   54cb0:	bl	19cc <fclose@plt>
   54cb4:	mov	r0, r4
   54cb8:	mov	r5, r4
   54cbc:	bl	19f0 <remove@plt>
   54cc0:	cmn	r0, #1
   54cc4:	beq	54dac <Mat_VarDelete+0x440>
   54cc8:	ldr	r7, [sp]
   54ccc:	ldr	r1, [r9, #24]
   54cd0:	mov	r6, r0
   54cd4:	mov	r0, r7
   54cd8:	bl	17c8 <Mat_Open@plt>
   54cdc:	cmp	r0, #0
   54ce0:	beq	54e00 <Mat_VarDelete+0x494>
   54ce4:	mov	r5, r0
   54ce8:	ldr	r0, [r9, #4]
   54cec:	cmp	r0, #0
   54cf0:	beq	54cf8 <Mat_VarDelete+0x38c>
   54cf4:	bl	1804 <free@plt>
   54cf8:	ldr	r0, [r9, #8]
   54cfc:	cmp	r0, #0
   54d00:	beq	54d08 <Mat_VarDelete+0x39c>
   54d04:	bl	1804 <free@plt>
   54d08:	ldr	r0, [r9, #12]
   54d0c:	cmp	r0, #0
   54d10:	beq	54d18 <Mat_VarDelete+0x3ac>
   54d14:	bl	1804 <free@plt>
   54d18:	ldr	r0, [r9, #40]	; 0x28
   54d1c:	cmp	r0, #0
   54d20:	beq	54d60 <Mat_VarDelete+0x3f4>
   54d24:	ldr	r2, [r9, #36]	; 0x24
   54d28:	cmp	r2, #0
   54d2c:	beq	54d5c <Mat_VarDelete+0x3f0>
   54d30:	mov	r4, #0
   54d34:	ldr	r1, [r0, r4, lsl #2]
   54d38:	cmp	r1, #0
   54d3c:	beq	54d50 <Mat_VarDelete+0x3e4>
   54d40:	mov	r0, r1
   54d44:	bl	1804 <free@plt>
   54d48:	ldr	r2, [r9, #36]	; 0x24
   54d4c:	ldr	r0, [r9, #40]	; 0x28
   54d50:	add	r4, r4, #1
   54d54:	cmp	r4, r2
   54d58:	bcc	54d34 <Mat_VarDelete+0x3c8>
   54d5c:	bl	1804 <free@plt>
   54d60:	mov	r0, #28
   54d64:	mov	r1, r5
   54d68:	mov	r4, r9
   54d6c:	vld1.32	{d16-d17}, [r1], r0
   54d70:	add	r0, r5, #16
   54d74:	vld1.32	{d18-d19}, [r0]
   54d78:	add	r0, r9, #16
   54d7c:	vld1.32	{d20-d21}, [r1]
   54d80:	vst1.32	{d18-d19}, [r0]
   54d84:	add	r0, r9, #28
   54d88:	vst1.32	{d20-d21}, [r0]
   54d8c:	mov	r0, #40	; 0x28
   54d90:	vst1.32	{d16-d17}, [r4], r0
   54d94:	mov	r0, r5
   54d98:	bl	1804 <free@plt>
   54d9c:	ldr	r0, [sp, #4]
   54da0:	str	r0, [r4]
   54da4:	str	sl, [r9, #36]	; 0x24
   54da8:	b	54c98 <Mat_VarDelete+0x32c>
   54dac:	ldr	r6, [sp, #4]
   54db0:	cmp	r6, #0
   54db4:	beq	54de8 <Mat_VarDelete+0x47c>
   54db8:	cmp	sl, #0
   54dbc:	beq	54de0 <Mat_VarDelete+0x474>
   54dc0:	mov	r4, r6
   54dc4:	ldr	r0, [r4]
   54dc8:	cmp	r0, #0
   54dcc:	beq	54dd4 <Mat_VarDelete+0x468>
   54dd0:	bl	1804 <free@plt>
   54dd4:	subs	sl, sl, #1
   54dd8:	add	r4, r4, #4
   54ddc:	bne	54dc4 <Mat_VarDelete+0x458>
   54de0:	mov	r0, r6
   54de4:	bl	1804 <free@plt>
   54de8:	ldr	r0, [pc, #60]	; 54e2c <Mat_VarDelete+0x4c0>
   54dec:	mov	r1, r5
   54df0:	add	r0, pc, r0
   54df4:	bl	19b4 <Mat_Critical@plt>
   54df8:	ldr	r7, [sp]
   54dfc:	b	54c94 <Mat_VarDelete+0x328>
   54e00:	ldr	r0, [pc, #40]	; 54e30 <Mat_VarDelete+0x4c4>
   54e04:	mov	r1, r7
   54e08:	add	r0, pc, r0
   54e0c:	bl	19b4 <Mat_Critical@plt>
   54e10:	b	54c98 <Mat_VarDelete+0x32c>
   54e14:	.word	0x00004807
   54e18:	.word	0x00004434
   54e1c:	.word	0x000049b8
   54e20:	.word	0x00004a6b
   54e24:	.word	0x00004a1d
   54e28:	.word	0x00004434
   54e2c:	.word	0x000042f4
   54e30:	.word	0x000042f5
   54e34:	.word	0x000045d0
   54e38:	.word	0x0000470c
   54e3c:	.word	0x000049ba

00054e40 <Mat_VarReadNext>:
   54e40:	push	{r4, r5, r6, r7, fp, lr}
   54e44:	add	fp, sp, #16
   54e48:	mov	r5, r0
   54e4c:	ldr	r0, [r0, #16]
   54e50:	mov	r4, #0
   54e54:	cmp	r0, #512	; 0x200
   54e58:	beq	54e6c <Mat_VarReadNext+0x2c>
   54e5c:	ldr	r0, [r5]
   54e60:	bl	190c <feof@plt>
   54e64:	cmp	r0, #0
   54e68:	beq	54e74 <Mat_VarReadNext+0x34>
   54e6c:	mov	r0, r4
   54e70:	pop	{r4, r5, r6, r7, fp, pc}
   54e74:	ldr	r0, [r5]
   54e78:	bl	1840 <ftell@plt>
   54e7c:	cmn	r0, #1
   54e80:	beq	54ea8 <Mat_VarReadNext+0x68>
   54e84:	mov	r6, r0
   54e88:	ldr	r0, [r5, #16]
   54e8c:	cmp	r0, #16
   54e90:	beq	54ebc <Mat_VarReadNext+0x7c>
   54e94:	cmp	r0, #256	; 0x100
   54e98:	bne	54f08 <Mat_VarReadNext+0xc8>
   54e9c:	mov	r0, r5
   54ea0:	bl	4fa74 <Mat_VarReadNextInfo5>
   54ea4:	b	54ec4 <Mat_VarReadNext+0x84>
   54ea8:	ldr	r0, [pc, #152]	; 54f48 <Mat_VarReadNext+0x108>
   54eac:	add	r0, pc, r0
   54eb0:	bl	19b4 <Mat_Critical@plt>
   54eb4:	mov	r0, r4
   54eb8:	pop	{r4, r5, r6, r7, fp, pc}
   54ebc:	mov	r0, r5
   54ec0:	bl	53480 <Mat_VarReadNextInfo4>
   54ec4:	mov	r7, r0
   54ec8:	cmp	r0, #0
   54ecc:	beq	54f04 <Mat_VarReadNext+0xc4>
   54ed0:	ldr	r0, [r5]
   54ed4:	cmp	r0, #0
   54ed8:	beq	54f2c <Mat_VarReadNext+0xec>
   54edc:	ldr	r0, [r5, #16]
   54ee0:	cmp	r0, #16
   54ee4:	beq	54f34 <Mat_VarReadNext+0xf4>
   54ee8:	cmp	r0, #256	; 0x100
   54eec:	bne	54f2c <Mat_VarReadNext+0xec>
   54ef0:	mov	r0, r5
   54ef4:	mov	r1, r7
   54ef8:	bl	25480 <Mat_VarRead5>
   54efc:	mov	r0, r7
   54f00:	pop	{r4, r5, r6, r7, fp, pc}
   54f04:	ldr	r0, [r5, #16]
   54f08:	cmp	r0, #512	; 0x200
   54f0c:	beq	54e6c <Mat_VarReadNext+0x2c>
   54f10:	ldr	r0, [r5]
   54f14:	mov	r1, r6
   54f18:	mov	r2, #0
   54f1c:	mov	r4, #0
   54f20:	bl	1a2c <fseek@plt>
   54f24:	mov	r0, r4
   54f28:	pop	{r4, r5, r6, r7, fp, pc}
   54f2c:	mov	r0, r7
   54f30:	pop	{r4, r5, r6, r7, fp, pc}
   54f34:	mov	r0, r5
   54f38:	mov	r1, r7
   54f3c:	bl	52888 <Mat_VarRead4>
   54f40:	mov	r0, r7
   54f44:	pop	{r4, r5, r6, r7, fp, pc}
   54f48:	.word	0x00003b3c

00054f4c <Mat_VarWrite>:
   54f4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   54f50:	add	fp, sp, #28
   54f54:	sub	sp, sp, #4
   54f58:	mov	r9, r0
   54f5c:	mvn	r0, #0
   54f60:	cmp	r9, #0
   54f64:	movne	sl, r1
   54f68:	cmpne	r1, #0
   54f6c:	bne	54f78 <Mat_VarWrite+0x2c>
   54f70:	sub	sp, fp, #28
   54f74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   54f78:	ldr	r0, [r9, #40]	; 0x28
   54f7c:	mov	r8, r2
   54f80:	cmp	r0, #0
   54f84:	bne	54f9c <Mat_VarWrite+0x50>
   54f88:	mov	r0, #0
   54f8c:	mov	r1, sp
   54f90:	str	r0, [sp]
   54f94:	mov	r0, r9
   54f98:	bl	1930 <Mat_GetDir@plt>
   54f9c:	ldr	r6, [r9, #36]	; 0x24
   54fa0:	cmp	r6, #0
   54fa4:	beq	54fdc <Mat_VarWrite+0x90>
   54fa8:	ldr	r4, [r9, #40]	; 0x28
   54fac:	mov	r5, #0
   54fb0:	ldr	r0, [r4, r5, lsl #2]
   54fb4:	cmp	r0, #0
   54fb8:	beq	54fd0 <Mat_VarWrite+0x84>
   54fbc:	ldr	r7, [sl, #36]	; 0x24
   54fc0:	mov	r1, r7
   54fc4:	bl	17b0 <strcmp@plt>
   54fc8:	cmp	r0, #0
   54fcc:	beq	5501c <Mat_VarWrite+0xd0>
   54fd0:	add	r5, r5, #1
   54fd4:	cmp	r5, r6
   54fd8:	bcc	54fb0 <Mat_VarWrite+0x64>
   54fdc:	ldr	r0, [r9, #16]
   54fe0:	cmp	r0, #16
   54fe4:	beq	55038 <Mat_VarWrite+0xec>
   54fe8:	cmp	r0, #512	; 0x200
   54fec:	beq	5502c <Mat_VarWrite+0xe0>
   54ff0:	cmp	r0, #256	; 0x100
   54ff4:	movne	r0, #2
   54ff8:	subne	sp, fp, #28
   54ffc:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   55000:	mov	r0, r9
   55004:	mov	r1, sl
   55008:	mov	r2, r8
   5500c:	bl	4d744 <Mat_VarWrite5>
   55010:	cmp	r0, #0
   55014:	bne	54f70 <Mat_VarWrite+0x24>
   55018:	b	5504c <Mat_VarWrite+0x100>
   5501c:	ldr	r0, [pc, #204]	; 550f0 <Mat_VarWrite+0x1a4>
   55020:	mov	r1, r7
   55024:	add	r0, pc, r0
   55028:	bl	19b4 <Mat_Critical@plt>
   5502c:	mov	r0, #1
   55030:	sub	sp, fp, #28
   55034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   55038:	mov	r0, r9
   5503c:	mov	r1, sl
   55040:	bl	522e0 <Mat_VarWrite4>
   55044:	cmp	r0, #0
   55048:	bne	54f70 <Mat_VarWrite+0x24>
   5504c:	ldr	r0, [r9, #40]	; 0x28
   55050:	cmp	r0, #0
   55054:	beq	5506c <Mat_VarWrite+0x120>
   55058:	ldr	r1, [r9, #36]	; 0x24
   5505c:	mov	r2, #4
   55060:	add	r1, r2, r1, lsl #2
   55064:	bl	1870 <realloc@plt>
   55068:	b	55074 <Mat_VarWrite+0x128>
   5506c:	mov	r0, #4
   55070:	bl	18d0 <malloc@plt>
   55074:	mov	r2, r0
   55078:	cmp	r0, #0
   5507c:	beq	550bc <Mat_VarWrite+0x170>
   55080:	str	r2, [r9, #40]	; 0x28
   55084:	ldr	r1, [sl, #36]	; 0x24
   55088:	cmp	r1, #0
   5508c:	beq	550d4 <Mat_VarWrite+0x188>
   55090:	ldr	r0, [pc, #92]	; 550f4 <Mat_VarWrite+0x1a8>
   55094:	add	r0, pc, r0
   55098:	bl	1dac <strdup_printf>
   5509c:	ldr	r1, [r9, #36]	; 0x24
   550a0:	ldr	r2, [r9, #40]	; 0x28
   550a4:	add	r3, r1, #1
   550a8:	str	r3, [r9, #36]	; 0x24
   550ac:	str	r0, [r2, r1, lsl #2]
   550b0:	mov	r0, #0
   550b4:	sub	sp, fp, #28
   550b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   550bc:	ldr	r0, [pc, #52]	; 550f8 <Mat_VarWrite+0x1ac>
   550c0:	add	r0, pc, r0
   550c4:	bl	19b4 <Mat_Critical@plt>
   550c8:	mov	r0, #3
   550cc:	sub	sp, fp, #28
   550d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   550d4:	ldr	r1, [r9, #36]	; 0x24
   550d8:	add	r0, r1, #1
   550dc:	str	r0, [r9, #36]	; 0x24
   550e0:	mov	r0, #0
   550e4:	str	r0, [r2, r1, lsl #2]
   550e8:	sub	sp, fp, #28
   550ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   550f0:	.word	0x00004590
   550f4:	.word	0x0000429f
   550f8:	.word	0x00003fb7

000550fc <Mat_VarDuplicate>:
   550fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   55100:	add	fp, sp, #28
   55104:	sub	sp, sp, #4
   55108:	vpush	{d8-d9}
   5510c:	sub	sp, sp, #16
   55110:	mov	sl, r0
   55114:	mov	r0, #56	; 0x38
   55118:	mov	r4, r1
   5511c:	bl	18d0 <malloc@plt>
   55120:	cmp	r0, #0
   55124:	beq	553fc <Mat_VarDuplicate+0x300>
   55128:	mov	r6, #0
   5512c:	mov	r9, r0
   55130:	vmov.i32	q4, #0	; 0x00000000
   55134:	mov	r8, r4
   55138:	str	r6, [r0, #48]	; 0x30
   5513c:	add	r0, r0, #32
   55140:	mov	r4, r9
   55144:	add	r5, r9, #16
   55148:	vst1.32	{d8-d9}, [r0]
   5514c:	mov	r0, #52	; 0x34
   55150:	vst1.32	{d8-d9}, [r5]
   55154:	vst1.32	{d8-d9}, [r4], r0
   55158:	mov	r0, #20
   5515c:	bl	18d0 <malloc@plt>
   55160:	cmp	r0, #0
   55164:	str	r0, [r4]
   55168:	beq	55404 <Mat_VarDuplicate+0x308>
   5516c:	mov	r7, r0
   55170:	vst1.32	{d8-d9}, [r0]!
   55174:	mov	r1, sl
   55178:	mov	r2, r9
   5517c:	str	r6, [r0]
   55180:	mov	r0, #36	; 0x24
   55184:	vld1.32	{d8-d9}, [r1], r0
   55188:	mov	r0, #48	; 0x30
   5518c:	vst1.32	{d8-d9}, [r2], r0
   55190:	add	r0, sl, #16
   55194:	vld1.32	{d16-d17}, [r0]
   55198:	str	r0, [sp, #12]
   5519c:	vst1.32	{d16-d17}, [r5]
   551a0:	ldr	r0, [sl, #44]	; 0x2c
   551a4:	ldr	r3, [sl, #48]	; 0x30
   551a8:	str	r0, [r9, #44]	; 0x2c
   551ac:	str	r3, [r2]
   551b0:	ldr	r6, [r1]
   551b4:	cmp	r6, #0
   551b8:	beq	551e8 <Mat_VarDuplicate+0xec>
   551bc:	mov	r0, r6
   551c0:	bl	1954 <strlen@plt>
   551c4:	add	r5, r0, #1
   551c8:	mov	r0, r5
   551cc:	bl	18d0 <malloc@plt>
   551d0:	cmp	r0, #0
   551d4:	str	r0, [r9, #36]	; 0x24
   551d8:	beq	551e8 <Mat_VarDuplicate+0xec>
   551dc:	mov	r1, r6
   551e0:	mov	r2, r5
   551e4:	bl	181c <memcpy@plt>
   551e8:	vmov.32	r0, d8[1]
   551ec:	lsl	r6, r0, #2
   551f0:	mov	r0, r6
   551f4:	bl	18d0 <malloc@plt>
   551f8:	cmp	r0, #0
   551fc:	mov	r4, r8
   55200:	str	r0, [r9, #32]
   55204:	beq	55214 <Mat_VarDuplicate+0x118>
   55208:	ldr	r1, [sl, #32]
   5520c:	mov	r2, r6
   55210:	bl	181c <memcpy@plt>
   55214:	ldr	r5, [sl, #52]	; 0x34
   55218:	cmp	r5, #0
   5521c:	beq	55414 <Mat_VarDuplicate+0x318>
   55220:	ldr	r0, [r5]
   55224:	mov	r1, #0
   55228:	str	r1, [r7, #12]
   5522c:	str	r1, [r7, #16]
   55230:	str	r0, [r7]
   55234:	ldr	r0, [r5, #4]
   55238:	str	r0, [r7, #4]
   5523c:	ldr	r0, [r5, #8]
   55240:	cmp	r0, #0
   55244:	ldrne	r0, [r5, #4]
   55248:	cmpne	r0, #0
   5524c:	bne	55534 <Mat_VarDuplicate+0x438>
   55250:	ldr	r0, [r5, #12]
   55254:	cmp	r0, #0
   55258:	beq	55280 <Mat_VarDuplicate+0x184>
   5525c:	mov	r0, #56	; 0x38
   55260:	bl	18d0 <malloc@plt>
   55264:	ldr	r1, [r9, #52]	; 0x34
   55268:	cmp	r0, #0
   5526c:	str	r0, [r1, #12]
   55270:	beq	55280 <Mat_VarDuplicate+0x184>
   55274:	ldr	r1, [r5, #12]
   55278:	bl	1948 <inflateCopy@plt>
   5527c:	ldr	r5, [sl, #52]	; 0x34
   55280:	ldr	r0, [r5, #16]
   55284:	cmp	r0, #0
   55288:	beq	55424 <Mat_VarDuplicate+0x328>
   5528c:	ldr	r0, [sp, #12]
   55290:	ldr	r0, [r0]
   55294:	cmp	r0, #5
   55298:	bne	554c8 <Mat_VarDuplicate+0x3cc>
   5529c:	mov	r0, #28
   552a0:	bl	18d0 <malloc@plt>
   552a4:	mov	r7, r0
   552a8:	ldr	r0, [r9, #52]	; 0x34
   552ac:	cmp	r7, #0
   552b0:	str	r7, [r0, #16]
   552b4:	beq	55424 <Mat_VarDuplicate+0x328>
   552b8:	ldr	r5, [r5, #16]
   552bc:	ldr	r0, [r5]
   552c0:	str	r0, [r7]
   552c4:	ldr	r0, [r5, #8]
   552c8:	str	r0, [r7, #8]
   552cc:	ldr	r0, [r5, #8]
   552d0:	lsl	r0, r0, #2
   552d4:	bl	18d0 <malloc@plt>
   552d8:	cmp	r0, #0
   552dc:	str	r0, [r7, #4]
   552e0:	beq	552f0 <Mat_VarDuplicate+0x1f4>
   552e4:	ldmib	r5, {r1, r2}
   552e8:	lsl	r2, r2, #2
   552ec:	bl	181c <memcpy@plt>
   552f0:	ldr	r0, [r5, #16]
   552f4:	str	r0, [r7, #16]
   552f8:	ldr	r0, [r5, #16]
   552fc:	lsl	r0, r0, #2
   55300:	bl	18d0 <malloc@plt>
   55304:	cmp	r0, #0
   55308:	str	r0, [r7, #12]
   5530c:	beq	55320 <Mat_VarDuplicate+0x224>
   55310:	ldr	r2, [r5, #16]
   55314:	ldr	r1, [r5, #12]
   55318:	lsl	r2, r2, #2
   5531c:	bl	181c <memcpy@plt>
   55320:	ldr	r0, [r5, #20]
   55324:	ldr	r1, [r9, #20]
   55328:	str	r0, [r7, #20]
   5532c:	cmp	r1, #0
   55330:	ldr	r0, [r5, #24]
   55334:	beq	557b8 <Mat_VarDuplicate+0x6bc>
   55338:	cmp	r0, #0
   5533c:	beq	55424 <Mat_VarDuplicate+0x328>
   55340:	mov	r0, #8
   55344:	bl	18d0 <malloc@plt>
   55348:	cmp	r0, #0
   5534c:	str	r0, [r7, #24]
   55350:	beq	55424 <Mat_VarDuplicate+0x328>
   55354:	mov	r7, r0
   55358:	ldr	r0, [r5, #24]
   5535c:	ldr	r4, [r5, #20]
   55360:	str	r0, [sp, #8]
   55364:	ldr	r0, [sl, #8]
   55368:	bl	1924 <Mat_SizeOf@plt>
   5536c:	mul	r0, r0, r4
   55370:	bl	18d0 <malloc@plt>
   55374:	cmp	r0, #0
   55378:	str	r0, [r7]
   5537c:	beq	553b0 <Mat_VarDuplicate+0x2b4>
   55380:	mov	r6, r0
   55384:	ldr	r0, [sp, #8]
   55388:	str	r7, [sp, #4]
   5538c:	ldr	r4, [r5, #20]
   55390:	ldr	r7, [r0]
   55394:	ldr	r0, [sl, #8]
   55398:	bl	1924 <Mat_SizeOf@plt>
   5539c:	mov	r1, r7
   553a0:	ldr	r7, [sp, #4]
   553a4:	mul	r2, r0, r4
   553a8:	mov	r0, r6
   553ac:	bl	181c <memcpy@plt>
   553b0:	ldr	r0, [sl, #8]
   553b4:	ldr	r4, [r5, #20]
   553b8:	bl	1924 <Mat_SizeOf@plt>
   553bc:	mul	r0, r0, r4
   553c0:	bl	18d0 <malloc@plt>
   553c4:	cmp	r0, #0
   553c8:	mov	r4, r8
   553cc:	str	r0, [r7, #4]
   553d0:	beq	55424 <Mat_VarDuplicate+0x328>
   553d4:	mov	r6, r0
   553d8:	ldr	r0, [sp, #8]
   553dc:	ldr	r4, [r5, #20]
   553e0:	ldr	r7, [r0, #4]
   553e4:	ldr	r0, [sl, #8]
   553e8:	bl	1924 <Mat_SizeOf@plt>
   553ec:	mul	r2, r0, r4
   553f0:	mov	r0, r6
   553f4:	mov	r1, r7
   553f8:	b	55804 <Mat_VarDuplicate+0x708>
   553fc:	mov	r9, #0
   55400:	b	554b4 <Mat_VarDuplicate+0x3b8>
   55404:	mov	r0, r9
   55408:	bl	1804 <free@plt>
   5540c:	mov	r9, #0
   55410:	b	554b4 <Mat_VarDuplicate+0x3b8>
   55414:	mov	r0, r7
   55418:	bl	1804 <free@plt>
   5541c:	mov	r0, #0
   55420:	str	r0, [r9, #52]	; 0x34
   55424:	ldr	r8, [sl, #40]	; 0x28
   55428:	cmp	r4, #0
   5542c:	beq	554b0 <Mat_VarDuplicate+0x3b4>
   55430:	cmp	r8, #0
   55434:	beq	554b4 <Mat_VarDuplicate+0x3b8>
   55438:	ldr	r0, [sp, #12]
   5543c:	ldr	r0, [r0]
   55440:	cmp	r0, #1
   55444:	beq	55588 <Mat_VarDuplicate+0x48c>
   55448:	cmp	r0, #5
   5544c:	beq	555e0 <Mat_VarDuplicate+0x4e4>
   55450:	cmp	r0, #2
   55454:	bne	55728 <Mat_VarDuplicate+0x62c>
   55458:	ldr	r5, [sl]
   5545c:	mov	r0, r5
   55460:	bl	18d0 <malloc@plt>
   55464:	cmp	r0, #0
   55468:	str	r0, [r9, #40]	; 0x28
   5546c:	beq	554b4 <Mat_VarDuplicate+0x3b8>
   55470:	mov	r6, r0
   55474:	ldr	r0, [sl, #12]
   55478:	cmp	r0, #1
   5547c:	blt	554b4 <Mat_VarDuplicate+0x3b8>
   55480:	cmp	r0, r5
   55484:	bhi	554b4 <Mat_VarDuplicate+0x3b8>
   55488:	udiv	r5, r5, r0
   5548c:	mov	r7, #0
   55490:	ldr	r0, [r8, r7, lsl #2]
   55494:	mov	r1, r4
   55498:	bl	1a44 <Mat_VarDuplicate@plt>
   5549c:	str	r0, [r6, r7, lsl #2]
   554a0:	add	r7, r7, #1
   554a4:	cmp	r7, r5
   554a8:	bcc	55490 <Mat_VarDuplicate+0x394>
   554ac:	b	554b4 <Mat_VarDuplicate+0x3b8>
   554b0:	str	r8, [r9, #40]	; 0x28
   554b4:	mov	r0, r9
   554b8:	sub	sp, fp, #48	; 0x30
   554bc:	vpop	{d8-d9}
   554c0:	add	sp, sp, #4
   554c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   554c8:	ldr	r0, [r9, #20]
   554cc:	cmp	r0, #0
   554d0:	beq	5578c <Mat_VarDuplicate+0x690>
   554d4:	mov	r0, #8
   554d8:	bl	18d0 <malloc@plt>
   554dc:	mov	r7, r0
   554e0:	ldr	r0, [r9, #52]	; 0x34
   554e4:	cmp	r7, #0
   554e8:	str	r7, [r0, #16]
   554ec:	beq	55424 <Mat_VarDuplicate+0x328>
   554f0:	ldr	r6, [r9]
   554f4:	ldr	r5, [r5, #16]
   554f8:	mov	r0, r6
   554fc:	bl	18d0 <malloc@plt>
   55500:	cmp	r0, #0
   55504:	str	r0, [r7]
   55508:	beq	55518 <Mat_VarDuplicate+0x41c>
   5550c:	ldr	r1, [r5]
   55510:	mov	r2, r6
   55514:	bl	181c <memcpy@plt>
   55518:	mov	r0, r6
   5551c:	bl	18d0 <malloc@plt>
   55520:	cmp	r0, #0
   55524:	str	r0, [r7, #4]
   55528:	beq	55424 <Mat_VarDuplicate+0x328>
   5552c:	ldr	r1, [r5, #4]
   55530:	b	557ac <Mat_VarDuplicate+0x6b0>
   55534:	mov	r1, #4
   55538:	bl	1798 <calloc@plt>
   5553c:	str	r0, [r7, #8]
   55540:	ldr	r0, [r5, #4]
   55544:	cmp	r0, #0
   55548:	beq	55250 <Mat_VarDuplicate+0x154>
   5554c:	mov	r6, #0
   55550:	ldr	r0, [r5, #8]
   55554:	ldr	r0, [r0, r6, lsl #2]
   55558:	cmp	r0, #0
   5555c:	beq	55574 <Mat_VarDuplicate+0x478>
   55560:	bl	1864 <strdup@plt>
   55564:	ldr	r1, [r9, #52]	; 0x34
   55568:	ldr	r1, [r1, #8]
   5556c:	str	r0, [r1, r6, lsl #2]
   55570:	ldr	r5, [sl, #52]	; 0x34
   55574:	ldr	r0, [r5, #4]
   55578:	add	r6, r6, #1
   5557c:	cmp	r6, r0
   55580:	bcc	55550 <Mat_VarDuplicate+0x454>
   55584:	b	55250 <Mat_VarDuplicate+0x154>
   55588:	ldr	r5, [sl]
   5558c:	mov	r0, r5
   55590:	bl	18d0 <malloc@plt>
   55594:	cmp	r0, #0
   55598:	str	r0, [r9, #40]	; 0x28
   5559c:	beq	554b4 <Mat_VarDuplicate+0x3b8>
   555a0:	mov	r6, r0
   555a4:	ldr	r0, [sl, #12]
   555a8:	cmp	r0, #1
   555ac:	blt	554b4 <Mat_VarDuplicate+0x3b8>
   555b0:	cmp	r0, r5
   555b4:	bhi	554b4 <Mat_VarDuplicate+0x3b8>
   555b8:	udiv	r5, r5, r0
   555bc:	mov	r7, #0
   555c0:	ldr	r0, [r8, r7, lsl #2]
   555c4:	mov	r1, r4
   555c8:	bl	1a44 <Mat_VarDuplicate@plt>
   555cc:	str	r0, [r6, r7, lsl #2]
   555d0:	add	r7, r7, #1
   555d4:	cmp	r7, r5
   555d8:	bcc	555c0 <Mat_VarDuplicate+0x4c4>
   555dc:	b	554b4 <Mat_VarDuplicate+0x3b8>
   555e0:	mov	r0, #28
   555e4:	bl	18d0 <malloc@plt>
   555e8:	cmp	r0, #0
   555ec:	str	r0, [r9, #40]	; 0x28
   555f0:	beq	554b4 <Mat_VarDuplicate+0x3b8>
   555f4:	mov	r6, r0
   555f8:	ldr	r0, [r8]
   555fc:	str	r0, [r6]
   55600:	ldr	r0, [r8, #8]
   55604:	str	r0, [r6, #8]
   55608:	ldr	r0, [r8, #8]
   5560c:	lsl	r0, r0, #2
   55610:	bl	18d0 <malloc@plt>
   55614:	cmp	r0, #0
   55618:	str	r0, [r6, #4]
   5561c:	beq	5562c <Mat_VarDuplicate+0x530>
   55620:	ldmib	r8, {r1, r2}
   55624:	lsl	r2, r2, #2
   55628:	bl	181c <memcpy@plt>
   5562c:	ldr	r0, [r8, #16]
   55630:	str	r0, [r6, #16]
   55634:	ldr	r0, [r8, #16]
   55638:	lsl	r0, r0, #2
   5563c:	bl	18d0 <malloc@plt>
   55640:	cmp	r0, #0
   55644:	str	r0, [r6, #12]
   55648:	beq	5565c <Mat_VarDuplicate+0x560>
   5564c:	ldr	r2, [r8, #16]
   55650:	ldr	r1, [r8, #12]
   55654:	lsl	r2, r2, #2
   55658:	bl	181c <memcpy@plt>
   5565c:	ldr	r0, [r8, #20]
   55660:	ldr	r1, [r9, #20]
   55664:	str	r0, [r6, #20]
   55668:	cmp	r1, #0
   5566c:	ldr	r0, [r8, #24]
   55670:	beq	55838 <Mat_VarDuplicate+0x73c>
   55674:	cmp	r0, #0
   55678:	beq	55884 <Mat_VarDuplicate+0x788>
   5567c:	mov	r0, #8
   55680:	bl	18d0 <malloc@plt>
   55684:	cmp	r0, #0
   55688:	str	r0, [r6, #24]
   5568c:	beq	554b4 <Mat_VarDuplicate+0x3b8>
   55690:	mov	r7, r0
   55694:	ldr	r0, [sl, #8]
   55698:	ldr	r5, [r8, #20]
   5569c:	ldr	r4, [r8, #24]
   556a0:	bl	1924 <Mat_SizeOf@plt>
   556a4:	mul	r0, r0, r5
   556a8:	bl	18d0 <malloc@plt>
   556ac:	cmp	r0, #0
   556b0:	str	r0, [r7]
   556b4:	beq	556e0 <Mat_VarDuplicate+0x5e4>
   556b8:	mov	r6, r0
   556bc:	ldr	r0, [r4]
   556c0:	ldr	r5, [r8, #20]
   556c4:	str	r0, [sp, #12]
   556c8:	ldr	r0, [sl, #8]
   556cc:	bl	1924 <Mat_SizeOf@plt>
   556d0:	ldr	r1, [sp, #12]
   556d4:	mul	r2, r0, r5
   556d8:	mov	r0, r6
   556dc:	bl	181c <memcpy@plt>
   556e0:	ldr	r0, [sl, #8]
   556e4:	mov	r5, r4
   556e8:	ldr	r4, [r8, #20]
   556ec:	bl	1924 <Mat_SizeOf@plt>
   556f0:	mul	r0, r0, r4
   556f4:	bl	18d0 <malloc@plt>
   556f8:	cmp	r0, #0
   556fc:	str	r0, [r7, #4]
   55700:	beq	554b4 <Mat_VarDuplicate+0x3b8>
   55704:	mov	r6, r0
   55708:	ldr	r0, [sl, #8]
   5570c:	ldr	r5, [r5, #4]
   55710:	ldr	r4, [r8, #20]
   55714:	bl	1924 <Mat_SizeOf@plt>
   55718:	mul	r2, r0, r4
   5571c:	mov	r0, r6
   55720:	mov	r1, r5
   55724:	b	55830 <Mat_VarDuplicate+0x734>
   55728:	ldr	r0, [r9, #20]
   5572c:	cmp	r0, #0
   55730:	beq	55810 <Mat_VarDuplicate+0x714>
   55734:	mov	r0, #8
   55738:	bl	18d0 <malloc@plt>
   5573c:	cmp	r0, #0
   55740:	str	r0, [r9, #40]	; 0x28
   55744:	beq	554b4 <Mat_VarDuplicate+0x3b8>
   55748:	ldr	r5, [r9]
   5574c:	mov	r6, r0
   55750:	mov	r0, r5
   55754:	bl	18d0 <malloc@plt>
   55758:	cmp	r0, #0
   5575c:	str	r0, [r6]
   55760:	beq	55770 <Mat_VarDuplicate+0x674>
   55764:	ldr	r1, [r8]
   55768:	mov	r2, r5
   5576c:	bl	181c <memcpy@plt>
   55770:	mov	r0, r5
   55774:	bl	18d0 <malloc@plt>
   55778:	cmp	r0, #0
   5577c:	str	r0, [r6, #4]
   55780:	beq	554b4 <Mat_VarDuplicate+0x3b8>
   55784:	ldr	r1, [r8, #4]
   55788:	b	5582c <Mat_VarDuplicate+0x730>
   5578c:	ldr	r6, [sl]
   55790:	mov	r0, r6
   55794:	bl	18d0 <malloc@plt>
   55798:	ldr	r1, [r9, #52]	; 0x34
   5579c:	cmp	r0, #0
   557a0:	str	r0, [r1, #16]
   557a4:	beq	55424 <Mat_VarDuplicate+0x328>
   557a8:	ldr	r1, [r5, #16]
   557ac:	mov	r2, r6
   557b0:	bl	181c <memcpy@plt>
   557b4:	b	55424 <Mat_VarDuplicate+0x328>
   557b8:	cmp	r0, #0
   557bc:	beq	55424 <Mat_VarDuplicate+0x328>
   557c0:	ldr	r0, [sl, #8]
   557c4:	ldr	r4, [r5, #20]
   557c8:	bl	1924 <Mat_SizeOf@plt>
   557cc:	mul	r0, r0, r4
   557d0:	mov	r4, r8
   557d4:	bl	18d0 <malloc@plt>
   557d8:	cmp	r0, #0
   557dc:	str	r0, [r7, #24]
   557e0:	beq	55424 <Mat_VarDuplicate+0x328>
   557e4:	mov	r6, r0
   557e8:	ldr	r0, [sl, #8]
   557ec:	ldr	r4, [r5, #20]
   557f0:	ldr	r5, [r5, #24]
   557f4:	bl	1924 <Mat_SizeOf@plt>
   557f8:	mul	r2, r0, r4
   557fc:	mov	r0, r6
   55800:	mov	r1, r5
   55804:	mov	r4, r8
   55808:	bl	181c <memcpy@plt>
   5580c:	b	55424 <Mat_VarDuplicate+0x328>
   55810:	ldr	r5, [sl]
   55814:	mov	r0, r5
   55818:	bl	18d0 <malloc@plt>
   5581c:	cmp	r0, #0
   55820:	str	r0, [r9, #40]	; 0x28
   55824:	beq	554b4 <Mat_VarDuplicate+0x3b8>
   55828:	mov	r1, r8
   5582c:	mov	r2, r5
   55830:	bl	181c <memcpy@plt>
   55834:	b	554b4 <Mat_VarDuplicate+0x3b8>
   55838:	cmp	r0, #0
   5583c:	beq	55884 <Mat_VarDuplicate+0x788>
   55840:	ldr	r0, [sl, #8]
   55844:	ldr	r4, [r8, #20]
   55848:	bl	1924 <Mat_SizeOf@plt>
   5584c:	mul	r0, r0, r4
   55850:	bl	18d0 <malloc@plt>
   55854:	cmp	r0, #0
   55858:	str	r0, [r6, #24]
   5585c:	beq	554b4 <Mat_VarDuplicate+0x3b8>
   55860:	mov	r7, r0
   55864:	ldr	r0, [sl, #8]
   55868:	ldr	r4, [r8, #20]
   5586c:	ldr	r5, [r8, #24]
   55870:	bl	1924 <Mat_SizeOf@plt>
   55874:	mul	r2, r0, r4
   55878:	mov	r0, r7
   5587c:	mov	r1, r5
   55880:	b	55830 <Mat_VarDuplicate+0x734>
   55884:	mov	r0, #0
   55888:	str	r0, [r6, #24]
   5588c:	b	554b4 <Mat_VarDuplicate+0x3b8>

00055890 <Mat_CalcSingleSubscript>:
   55890:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   55894:	add	fp, sp, #24
   55898:	cmp	r0, #1
   5589c:	movlt	ip, #0
   558a0:	movlt	r0, ip
   558a4:	poplt	{r4, r5, r6, r7, r8, r9, fp, pc}
   558a8:	mov	r7, #1
   558ac:	sub	r3, r1, #4
   558b0:	sub	lr, r1, #16
   558b4:	mov	r4, #0
   558b8:	mvn	r9, #15
   558bc:	mov	ip, #0
   558c0:	vdup.32	q8, r7
   558c4:	b	558e0 <Mat_CalcSingleSubscript+0x50>
   558c8:	add	r4, r4, #1
   558cc:	add	ip, r7, ip
   558d0:	add	lr, lr, #4
   558d4:	cmp	r4, r0
   558d8:	movge	r0, ip
   558dc:	popge	{r4, r5, r6, r7, r8, r9, fp, pc}
   558e0:	ldr	r5, [r2, r4, lsl #2]
   558e4:	ldr	r6, [r1, r4, lsl #2]
   558e8:	cmp	r5, r6
   558ec:	bgt	55978 <Mat_CalcSingleSubscript+0xe8>
   558f0:	cmp	r5, #1
   558f4:	blt	55984 <Mat_CalcSingleSubscript+0xf4>
   558f8:	sub	r7, r5, #1
   558fc:	cmp	r4, #0
   55900:	beq	558c8 <Mat_CalcSingleSubscript+0x38>
   55904:	cmp	r4, #4
   55908:	bcs	55914 <Mat_CalcSingleSubscript+0x84>
   5590c:	mov	r6, r4
   55910:	b	55964 <Mat_CalcSingleSubscript+0xd4>
   55914:	vorr	d20, d16, d16
   55918:	bic	r8, r4, #-2147483645	; 0x80000003
   5591c:	vorr	q9, q8, q8
   55920:	bic	r5, r4, #3
   55924:	vmov.32	d20[0], r7
   55928:	sub	r6, r4, r8
   5592c:	mov	r7, lr
   55930:	vorr	d18, d20, d20
   55934:	vld1.32	{d20-d21}, [r7], r9
   55938:	subs	r5, r5, #4
   5593c:	vrev64.32	q10, q10
   55940:	vext.8	q10, q10, q10, #8
   55944:	vmul.i32	q9, q10, q9
   55948:	bne	55934 <Mat_CalcSingleSubscript+0xa4>
   5594c:	vext.8	q10, q9, q8, #8
   55950:	cmp	r4, r8
   55954:	vmul.i32	q0, q9, q10
   55958:	vmul.i32	q9, q0, d0[1]
   5595c:	vmov.32	r7, d18[0]
   55960:	beq	558c8 <Mat_CalcSingleSubscript+0x38>
   55964:	ldr	r5, [r3, r6, lsl #2]
   55968:	subs	r6, r6, #1
   5596c:	mul	r7, r5, r7
   55970:	bne	55964 <Mat_CalcSingleSubscript+0xd4>
   55974:	b	558c8 <Mat_CalcSingleSubscript+0x38>
   55978:	ldr	r0, [pc, #16]	; 55990 <Mat_CalcSingleSubscript+0x100>
   5597c:	add	r0, pc, r0
   55980:	bl	19b4 <Mat_Critical@plt>
   55984:	mvn	ip, #0
   55988:	mov	r0, ip
   5598c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   55990:	.word	0x000037ba

00055994 <Mat_CalcSingleSubscript2>:
   55994:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   55998:	add	fp, sp, #24
   5599c:	cmp	r0, #1
   559a0:	blt	55a6c <Mat_CalcSingleSubscript2+0xd8>
   559a4:	mov	r5, #1
   559a8:	sub	ip, r1, #4
   559ac:	sub	lr, r1, #16
   559b0:	mov	r4, #0
   559b4:	mvn	r9, #15
   559b8:	vdup.32	q8, r5
   559bc:	ldr	r5, [r2, r4, lsl #2]
   559c0:	ldr	r6, [r1, r4, lsl #2]
   559c4:	cmp	r5, r6
   559c8:	bhi	55a74 <Mat_CalcSingleSubscript2+0xe0>
   559cc:	cmp	r5, #0
   559d0:	beq	55a80 <Mat_CalcSingleSubscript2+0xec>
   559d4:	sub	r7, r5, #1
   559d8:	cmp	r4, #0
   559dc:	beq	55a50 <Mat_CalcSingleSubscript2+0xbc>
   559e0:	cmp	r4, #4
   559e4:	bcs	559f0 <Mat_CalcSingleSubscript2+0x5c>
   559e8:	mov	r6, r4
   559ec:	b	55a40 <Mat_CalcSingleSubscript2+0xac>
   559f0:	vorr	d20, d16, d16
   559f4:	bic	r8, r4, #-2147483645	; 0x80000003
   559f8:	vorr	q9, q8, q8
   559fc:	bic	r5, r4, #3
   55a00:	vmov.32	d20[0], r7
   55a04:	sub	r6, r4, r8
   55a08:	mov	r7, lr
   55a0c:	vorr	d18, d20, d20
   55a10:	vld1.32	{d20-d21}, [r7], r9
   55a14:	subs	r5, r5, #4
   55a18:	vrev64.32	q10, q10
   55a1c:	vext.8	q10, q10, q10, #8
   55a20:	vmul.i32	q9, q10, q9
   55a24:	bne	55a10 <Mat_CalcSingleSubscript2+0x7c>
   55a28:	vext.8	q10, q9, q8, #8
   55a2c:	cmp	r4, r8
   55a30:	vmul.i32	q0, q9, q10
   55a34:	vmul.i32	q9, q0, d0[1]
   55a38:	vmov.32	r7, d18[0]
   55a3c:	beq	55a50 <Mat_CalcSingleSubscript2+0xbc>
   55a40:	ldr	r5, [ip, r6, lsl #2]
   55a44:	subs	r6, r6, #1
   55a48:	mul	r7, r5, r7
   55a4c:	bne	55a40 <Mat_CalcSingleSubscript2+0xac>
   55a50:	ldr	r5, [r3]
   55a54:	add	r4, r4, #1
   55a58:	add	lr, lr, #4
   55a5c:	cmp	r4, r0
   55a60:	add	r5, r5, r7
   55a64:	str	r5, [r3]
   55a68:	blt	559bc <Mat_CalcSingleSubscript2+0x28>
   55a6c:	mov	r0, #0
   55a70:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   55a74:	ldr	r0, [pc, #12]	; 55a88 <Mat_CalcSingleSubscript2+0xf4>
   55a78:	add	r0, pc, r0
   55a7c:	bl	19b4 <Mat_Critical@plt>
   55a80:	mov	r0, #1
   55a84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   55a88:	.word	0x000036eb

00055a8c <Mat_CalcSubscripts>:
   55a8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   55a90:	add	fp, sp, #28
   55a94:	sub	sp, sp, #4
   55a98:	mov	r9, r0
   55a9c:	lsl	r0, r0, #2
   55aa0:	mov	r6, r2
   55aa4:	mov	r4, r1
   55aa8:	bl	18d0 <malloc@plt>
   55aac:	cmp	r9, #0
   55ab0:	beq	55ba4 <Mat_CalcSubscripts+0x118>
   55ab4:	add	r1, r4, r9, lsl #2
   55ab8:	vmov	s0, r6
   55abc:	sub	r2, r9, #1
   55ac0:	mov	r3, #0
   55ac4:	mvn	r8, #15
   55ac8:	mov	sl, r9
   55acc:	sub	r5, r1, #20
   55ad0:	vcvt.f64.s32	d16, s0
   55ad4:	mov	r1, sl
   55ad8:	subs	sl, sl, #1
   55adc:	beq	55b60 <Mat_CalcSubscripts+0xd4>
   55ae0:	mvn	r7, r3
   55ae4:	sub	ip, r1, #2
   55ae8:	add	lr, r7, r9
   55aec:	mov	r7, #1
   55af0:	cmp	lr, #4
   55af4:	bcc	55b44 <Mat_CalcSubscripts+0xb8>
   55af8:	mov	r6, r9
   55afc:	bic	r9, lr, #3
   55b00:	bic	r7, r2, #3
   55b04:	vmov.i32	q9, #1	; 0x00000001
   55b08:	mov	r1, r5
   55b0c:	sub	ip, ip, r9
   55b10:	vld1.32	{d20-d21}, [r1], r8
   55b14:	subs	r7, r7, #4
   55b18:	vrev64.32	q10, q10
   55b1c:	vext.8	q10, q10, q10, #8
   55b20:	vmul.i32	q9, q10, q9
   55b24:	bne	55b10 <Mat_CalcSubscripts+0x84>
   55b28:	vext.8	q10, q9, q8, #8
   55b2c:	cmp	lr, r9
   55b30:	mov	r9, r6
   55b34:	vmul.i32	q0, q9, q10
   55b38:	vmul.i32	q9, q0, d0[1]
   55b3c:	vmov.32	r7, d18[0]
   55b40:	beq	55b64 <Mat_CalcSubscripts+0xd8>
   55b44:	rsb	r1, ip, #0
   55b48:	ldr	r6, [r4, -r1, lsl #2]
   55b4c:	add	r1, r1, #1
   55b50:	cmp	r1, #1
   55b54:	mul	r7, r6, r7
   55b58:	bne	55b48 <Mat_CalcSubscripts+0xbc>
   55b5c:	b	55b64 <Mat_CalcSubscripts+0xd8>
   55b60:	mov	r7, #1
   55b64:	vmov	s0, r7
   55b68:	sub	r2, r2, #1
   55b6c:	sub	r5, r5, #4
   55b70:	add	r3, r3, #1
   55b74:	cmp	sl, #0
   55b78:	vcvt.f64.s32	d17, s0
   55b7c:	vdiv.f64	d17, d16, d17
   55b80:	vcvtm.s32.f64	s0, d17
   55b84:	vmov	r1, s0
   55b88:	mul	r7, r7, r1
   55b8c:	add	r1, r1, #1
   55b90:	vmov	s0, r7
   55b94:	vcvt.f64.s32	d17, s0
   55b98:	str	r1, [r0, sl, lsl #2]
   55b9c:	vsub.f64	d16, d16, d17
   55ba0:	bne	55ad4 <Mat_CalcSubscripts+0x48>
   55ba4:	sub	sp, fp, #28
   55ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00055bac <Mat_CalcSubscripts2>:
   55bac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   55bb0:	add	fp, sp, #28
   55bb4:	sub	sp, sp, #4
   55bb8:	mov	r9, r0
   55bbc:	lsl	r0, r0, #2
   55bc0:	mov	r6, r2
   55bc4:	mov	r4, r1
   55bc8:	bl	18d0 <malloc@plt>
   55bcc:	cmp	r9, #0
   55bd0:	beq	55cc4 <Mat_CalcSubscripts2+0x118>
   55bd4:	add	r1, r4, r9, lsl #2
   55bd8:	vmov	s0, r6
   55bdc:	sub	r2, r9, #1
   55be0:	mov	r3, #0
   55be4:	mvn	r8, #15
   55be8:	mov	sl, r9
   55bec:	sub	r5, r1, #20
   55bf0:	vcvt.f64.u32	d16, s0
   55bf4:	mov	r1, sl
   55bf8:	subs	sl, sl, #1
   55bfc:	beq	55c80 <Mat_CalcSubscripts2+0xd4>
   55c00:	mvn	r7, r3
   55c04:	sub	ip, r1, #2
   55c08:	add	lr, r7, r9
   55c0c:	mov	r7, #1
   55c10:	cmp	lr, #4
   55c14:	bcc	55c64 <Mat_CalcSubscripts2+0xb8>
   55c18:	mov	r6, r9
   55c1c:	bic	r9, lr, #3
   55c20:	bic	r7, r2, #3
   55c24:	vmov.i32	q9, #1	; 0x00000001
   55c28:	mov	r1, r5
   55c2c:	sub	ip, ip, r9
   55c30:	vld1.32	{d20-d21}, [r1], r8
   55c34:	subs	r7, r7, #4
   55c38:	vrev64.32	q10, q10
   55c3c:	vext.8	q10, q10, q10, #8
   55c40:	vmul.i32	q9, q10, q9
   55c44:	bne	55c30 <Mat_CalcSubscripts2+0x84>
   55c48:	vext.8	q10, q9, q8, #8
   55c4c:	cmp	lr, r9
   55c50:	mov	r9, r6
   55c54:	vmul.i32	q0, q9, q10
   55c58:	vmul.i32	q9, q0, d0[1]
   55c5c:	vmov.32	r7, d18[0]
   55c60:	beq	55c84 <Mat_CalcSubscripts2+0xd8>
   55c64:	rsb	r1, ip, #0
   55c68:	ldr	r6, [r4, -r1, lsl #2]
   55c6c:	add	r1, r1, #1
   55c70:	cmp	r1, #1
   55c74:	mul	r7, r6, r7
   55c78:	bne	55c68 <Mat_CalcSubscripts2+0xbc>
   55c7c:	b	55c84 <Mat_CalcSubscripts2+0xd8>
   55c80:	mov	r7, #1
   55c84:	vmov	s0, r7
   55c88:	sub	r2, r2, #1
   55c8c:	sub	r5, r5, #4
   55c90:	add	r3, r3, #1
   55c94:	cmp	sl, #0
   55c98:	vcvt.f64.u32	d17, s0
   55c9c:	vdiv.f64	d17, d16, d17
   55ca0:	vcvtm.u32.f64	s0, d17
   55ca4:	vmov	r1, s0
   55ca8:	mul	r7, r7, r1
   55cac:	add	r1, r1, #1
   55cb0:	vmov	s0, r7
   55cb4:	vcvt.f64.u32	d17, s0
   55cb8:	str	r1, [r0, sl, lsl #2]
   55cbc:	vsub.f64	d16, d16, d17
   55cc0:	bne	55bf4 <Mat_CalcSubscripts2+0x48>
   55cc4:	sub	sp, fp, #28
   55cc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00055ccc <Mat_VarGetSize>:
   55ccc:	push	{r4, r5, r6, r7, fp, lr}
   55cd0:	add	fp, sp, #16
   55cd4:	ldr	r1, [r0, #16]
   55cd8:	mov	r4, r0
   55cdc:	cmp	r1, #1
   55ce0:	beq	55d94 <Mat_VarGetSize+0xc8>
   55ce4:	cmp	r1, #5
   55ce8:	beq	55df8 <Mat_VarGetSize+0x12c>
   55cec:	cmp	r1, #2
   55cf0:	bne	55e5c <Mat_VarGetSize+0x190>
   55cf4:	ldr	r5, [r4, #40]	; 0x28
   55cf8:	cmp	r5, #0
   55cfc:	beq	55eb4 <Mat_VarGetSize+0x1e8>
   55d00:	ldr	r1, [r4, #52]	; 0x34
   55d04:	ldr	r0, [r4, #4]
   55d08:	ldr	r7, [r1, #4]
   55d0c:	cmp	r0, #1
   55d10:	blt	55d3c <Mat_VarGetSize+0x70>
   55d14:	ldr	r1, [r4, #32]
   55d18:	mov	r6, #0
   55d1c:	mov	r2, #0
   55d20:	ldr	r3, [r1, r2, lsl #2]
   55d24:	umull	r7, r3, r7, r3
   55d28:	cmp	r3, #0
   55d2c:	bne	55eb8 <Mat_VarGetSize+0x1ec>
   55d30:	add	r2, r2, #1
   55d34:	cmp	r2, r0
   55d38:	blt	55d20 <Mat_VarGetSize+0x54>
   55d3c:	mov	r0, #60	; 0x3c
   55d40:	umull	r6, r0, r7, r0
   55d44:	cmp	r0, #0
   55d48:	movwne	r0, #1
   55d4c:	cmp	r0, #0
   55d50:	movwne	r6, #0
   55d54:	cmp	r7, #0
   55d58:	beq	55eb8 <Mat_VarGetSize+0x1ec>
   55d5c:	ldr	r0, [r5]
   55d60:	cmp	r0, #0
   55d64:	beq	55d84 <Mat_VarGetSize+0xb8>
   55d68:	ldr	r1, [r0, #16]
   55d6c:	cmp	r1, #0
   55d70:	beq	55d80 <Mat_VarGetSize+0xb4>
   55d74:	bl	1a20 <Mat_VarGetSize@plt>
   55d78:	add	r6, r0, r6
   55d7c:	b	55d84 <Mat_VarGetSize+0xb8>
   55d80:	sub	r6, r6, #56	; 0x38
   55d84:	subs	r7, r7, #1
   55d88:	add	r5, r5, #4
   55d8c:	bne	55d5c <Mat_VarGetSize+0x90>
   55d90:	b	55eb8 <Mat_VarGetSize+0x1ec>
   55d94:	ldr	r6, [r4, #40]	; 0x28
   55d98:	cmp	r6, #0
   55d9c:	beq	55ea8 <Mat_VarGetSize+0x1dc>
   55da0:	ldr	r0, [r4]
   55da4:	ldr	r1, [r4, #12]
   55da8:	udiv	r4, r0, r1
   55dac:	cmp	r1, r0
   55db0:	rsb	r2, r4, r4, lsl #4
   55db4:	lsl	r5, r2, #2
   55db8:	bhi	55ef0 <Mat_VarGetSize+0x224>
   55dbc:	mov	r7, #0
   55dc0:	ldr	r0, [r6, r7, lsl #2]
   55dc4:	cmp	r0, #0
   55dc8:	beq	55de8 <Mat_VarGetSize+0x11c>
   55dcc:	ldr	r1, [r0, #16]
   55dd0:	cmp	r1, #0
   55dd4:	beq	55de4 <Mat_VarGetSize+0x118>
   55dd8:	bl	1a20 <Mat_VarGetSize@plt>
   55ddc:	add	r5, r0, r5
   55de0:	b	55de8 <Mat_VarGetSize+0x11c>
   55de4:	sub	r5, r5, #56	; 0x38
   55de8:	add	r7, r7, #1
   55dec:	cmp	r7, r4
   55df0:	bcc	55dc0 <Mat_VarGetSize+0xf4>
   55df4:	b	55ef0 <Mat_VarGetSize+0x224>
   55df8:	ldr	r6, [r4, #40]	; 0x28
   55dfc:	cmp	r6, #0
   55e00:	beq	55ea8 <Mat_VarGetSize+0x1dc>
   55e04:	ldr	r0, [r4, #8]
   55e08:	ldr	r5, [r6, #20]
   55e0c:	bl	1924 <Mat_SizeOf@plt>
   55e10:	mul	r1, r0, r5
   55e14:	ldr	r2, [r4, #20]
   55e18:	ldr	r0, [r6, #8]
   55e1c:	ldr	r3, [r6, #16]
   55e20:	cmp	r2, #0
   55e24:	add	r7, r3, r0
   55e28:	movwne	r2, #1
   55e2c:	cmp	r3, #0
   55e30:	lsl	r7, r7, #2
   55e34:	add	r5, r7, r1, lsl r2
   55e38:	cmpne	r0, #0
   55e3c:	bne	55ee4 <Mat_VarGetSize+0x218>
   55e40:	ldr	r0, [r4, #28]
   55e44:	mov	r1, #1
   55e48:	cmp	r0, #0
   55e4c:	movweq	r1, #8
   55e50:	add	r5, r1, r5
   55e54:	mov	r0, r5
   55e58:	pop	{r4, r5, r6, r7, fp, pc}
   55e5c:	ldr	r0, [r4, #4]
   55e60:	cmp	r0, #1
   55e64:	blt	55ea8 <Mat_VarGetSize+0x1dc>
   55e68:	sub	r3, r1, #4
   55e6c:	mov	r1, #0
   55e70:	mov	r2, #0
   55e74:	cmp	r3, #11
   55e78:	ldrls	r1, [pc, #120]	; 55ef8 <Mat_VarGetSize+0x22c>
   55e7c:	addls	r1, pc, r1
   55e80:	ldrls	r1, [r1, r3, lsl #2]
   55e84:	ldr	r3, [r4, #32]
   55e88:	ldr	r7, [r3, r2, lsl #2]
   55e8c:	umull	r1, r7, r1, r7
   55e90:	cmp	r7, #0
   55e94:	bne	55ecc <Mat_VarGetSize+0x200>
   55e98:	add	r2, r2, #1
   55e9c:	cmp	r2, r0
   55ea0:	blt	55e88 <Mat_VarGetSize+0x1bc>
   55ea4:	b	55ed0 <Mat_VarGetSize+0x204>
   55ea8:	mov	r5, #0
   55eac:	mov	r0, r5
   55eb0:	pop	{r4, r5, r6, r7, fp, pc}
   55eb4:	mov	r6, #0
   55eb8:	ldr	r0, [r4, #52]	; 0x34
   55ebc:	ldr	r0, [r0, #4]
   55ec0:	add	r5, r6, r0, lsl #6
   55ec4:	mov	r0, r5
   55ec8:	pop	{r4, r5, r6, r7, fp, pc}
   55ecc:	mov	r1, #0
   55ed0:	ldr	r0, [r4, #20]
   55ed4:	cmp	r0, #0
   55ed8:	movwne	r0, #1
   55edc:	lsl	r0, r1, r0
   55ee0:	pop	{r4, r5, r6, r7, fp, pc}
   55ee4:	ldr	r0, [r6, #20]
   55ee8:	cmp	r0, #0
   55eec:	beq	55e40 <Mat_VarGetSize+0x174>
   55ef0:	mov	r0, r5
   55ef4:	pop	{r4, r5, r6, r7, fp, pc}
   55ef8:	.word	0x0000388c

00055efc <Mat_VarPrint>:
   55efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   55f00:	add	fp, sp, #28
   55f04:	sub	sp, sp, #4
   55f08:	cmp	r0, #0
   55f0c:	beq	561e0 <Mat_VarPrint+0x2e4>
   55f10:	mov	r9, r1
   55f14:	ldr	r1, [r0, #36]	; 0x24
   55f18:	mov	sl, r0
   55f1c:	cmp	r1, #0
   55f20:	beq	55f30 <Mat_VarPrint+0x34>
   55f24:	ldr	r0, [pc, #2020]	; 56710 <Mat_VarPrint+0x814>
   55f28:	add	r0, pc, r0
   55f2c:	bl	17d4 <printf@plt>
   55f30:	ldr	r1, [sl, #4]
   55f34:	ldr	r0, [pc, #2008]	; 56714 <Mat_VarPrint+0x818>
   55f38:	add	r0, pc, r0
   55f3c:	bl	17d4 <printf@plt>
   55f40:	ldr	r0, [sl, #4]
   55f44:	cmp	r0, #1
   55f48:	blt	561e0 <Mat_VarPrint+0x2e4>
   55f4c:	ldr	r1, [sl, #32]
   55f50:	cmp	r1, #0
   55f54:	beq	55f80 <Mat_VarPrint+0x84>
   55f58:	mov	r7, #1
   55f5c:	mov	r2, #0
   55f60:	ldr	r3, [r1, r2, lsl #2]
   55f64:	umull	r7, r3, r7, r3
   55f68:	cmp	r3, #0
   55f6c:	bne	55f88 <Mat_VarPrint+0x8c>
   55f70:	add	r2, r2, #1
   55f74:	cmp	r2, r0
   55f78:	blt	55f60 <Mat_VarPrint+0x64>
   55f7c:	b	55f8c <Mat_VarPrint+0x90>
   55f80:	mov	r7, #0
   55f84:	b	55fdc <Mat_VarPrint+0xe0>
   55f88:	mov	r7, #0
   55f8c:	ldr	r1, [r1]
   55f90:	ldr	r0, [pc, #1920]	; 56718 <Mat_VarPrint+0x81c>
   55f94:	add	r0, pc, r0
   55f98:	bl	17d4 <printf@plt>
   55f9c:	ldr	r0, [sl, #4]
   55fa0:	cmp	r0, #2
   55fa4:	blt	55fd4 <Mat_VarPrint+0xd8>
   55fa8:	ldr	r6, [pc, #1900]	; 5671c <Mat_VarPrint+0x820>
   55fac:	mov	r4, #1
   55fb0:	add	r6, pc, r6
   55fb4:	ldr	r0, [sl, #32]
   55fb8:	ldr	r1, [r0, r4, lsl #2]
   55fbc:	mov	r0, r6
   55fc0:	bl	17d4 <printf@plt>
   55fc4:	ldr	r0, [sl, #4]
   55fc8:	add	r4, r4, #1
   55fcc:	cmp	r4, r0
   55fd0:	blt	55fb4 <Mat_VarPrint+0xb8>
   55fd4:	mov	r0, #10
   55fd8:	bl	199c <putchar@plt>
   55fdc:	ldr	r0, [sl, #16]
   55fe0:	ldr	r1, [pc, #1848]	; 56720 <Mat_VarPrint+0x824>
   55fe4:	add	r1, pc, r1
   55fe8:	ldr	r1, [r1, r0, lsl #2]
   55fec:	ldr	r0, [pc, #1840]	; 56724 <Mat_VarPrint+0x828>
   55ff0:	add	r0, pc, r0
   55ff4:	bl	17d4 <printf@plt>
   55ff8:	ldr	r0, [sl, #20]
   55ffc:	cmp	r0, #0
   56000:	beq	56010 <Mat_VarPrint+0x114>
   56004:	ldr	r0, [pc, #1820]	; 56728 <Mat_VarPrint+0x82c>
   56008:	add	r0, pc, r0
   5600c:	b	56024 <Mat_VarPrint+0x128>
   56010:	ldr	r0, [sl, #28]
   56014:	cmp	r0, #0
   56018:	beq	56028 <Mat_VarPrint+0x12c>
   5601c:	ldr	r0, [pc, #1800]	; 5672c <Mat_VarPrint+0x830>
   56020:	add	r0, pc, r0
   56024:	bl	17d4 <printf@plt>
   56028:	mov	r0, #10
   5602c:	bl	199c <putchar@plt>
   56030:	ldr	r0, [sl, #8]
   56034:	cmp	r0, #0
   56038:	beq	56054 <Mat_VarPrint+0x158>
   5603c:	ldr	r1, [pc, #1772]	; 56730 <Mat_VarPrint+0x834>
   56040:	add	r1, pc, r1
   56044:	ldr	r1, [r1, r0, lsl #2]
   56048:	ldr	r0, [pc, #1764]	; 56734 <Mat_VarPrint+0x838>
   5604c:	add	r0, pc, r0
   56050:	bl	17d4 <printf@plt>
   56054:	ldr	r0, [sl, #16]
   56058:	cmp	r0, #2
   5605c:	bne	560e4 <Mat_VarPrint+0x1e8>
   56060:	ldr	r0, [sl, #52]	; 0x34
   56064:	ldr	r6, [r0, #4]
   56068:	umull	r7, r0, r7, r6
   5606c:	cmp	r0, #0
   56070:	bne	56154 <Mat_VarPrint+0x258>
   56074:	cmp	r7, #0
   56078:	beq	56154 <Mat_VarPrint+0x258>
   5607c:	ldr	r5, [sl, #40]	; 0x28
   56080:	ldr	r0, [pc, #1712]	; 56738 <Mat_VarPrint+0x83c>
   56084:	mov	r1, r7
   56088:	add	r0, pc, r0
   5608c:	bl	17d4 <printf@plt>
   56090:	ldr	r8, [pc, #1700]	; 5673c <Mat_VarPrint+0x840>
   56094:	mov	r4, #0
   56098:	add	r8, pc, r8
   5609c:	ldr	r0, [r5, r4, lsl #2]
   560a0:	cmp	r0, #0
   560a4:	beq	560b4 <Mat_VarPrint+0x1b8>
   560a8:	mov	r1, r9
   560ac:	bl	196c <Mat_VarPrint@plt>
   560b0:	b	560d4 <Mat_VarPrint+0x1d8>
   560b4:	ldr	r1, [sl, #52]	; 0x34
   560b8:	udiv	r0, r4, r6
   560bc:	mov	r2, #0
   560c0:	mls	r0, r0, r6, r4
   560c4:	ldr	r1, [r1, #8]
   560c8:	ldr	r1, [r1, r0, lsl #2]
   560cc:	mov	r0, r8
   560d0:	bl	17d4 <printf@plt>
   560d4:	add	r4, r4, #1
   560d8:	cmp	r7, r4
   560dc:	bne	5609c <Mat_VarPrint+0x1a0>
   560e0:	b	5619c <Mat_VarPrint+0x2a0>
   560e4:	ldr	r5, [sl, #40]	; 0x28
   560e8:	cmp	r5, #0
   560ec:	beq	56140 <Mat_VarPrint+0x244>
   560f0:	ldr	r4, [sl, #12]
   560f4:	cmp	r4, #0
   560f8:	ble	56140 <Mat_VarPrint+0x244>
   560fc:	cmp	r0, #1
   56100:	bne	561b0 <Mat_VarPrint+0x2b4>
   56104:	ldr	r6, [sl]
   56108:	ldr	r0, [pc, #1600]	; 56750 <Mat_VarPrint+0x854>
   5610c:	add	r0, pc, r0
   56110:	bl	18c4 <puts@plt>
   56114:	cmp	r4, r6
   56118:	bhi	5619c <Mat_VarPrint+0x2a0>
   5611c:	udiv	r4, r6, r4
   56120:	mov	r6, #0
   56124:	ldr	r0, [r5, r6, lsl #2]
   56128:	mov	r1, r9
   5612c:	bl	196c <Mat_VarPrint@plt>
   56130:	add	r6, r6, #1
   56134:	cmp	r6, r4
   56138:	bcc	56124 <Mat_VarPrint+0x228>
   5613c:	b	5619c <Mat_VarPrint+0x2a0>
   56140:	cmp	r9, #0
   56144:	beq	561e0 <Mat_VarPrint+0x2e4>
   56148:	ldr	r0, [pc, #1532]	; 5674c <Mat_VarPrint+0x850>
   5614c:	add	r0, pc, r0
   56150:	b	561a4 <Mat_VarPrint+0x2a8>
   56154:	ldr	r0, [pc, #1512]	; 56744 <Mat_VarPrint+0x848>
   56158:	mov	r1, r6
   5615c:	add	r0, pc, r0
   56160:	bl	17d4 <printf@plt>
   56164:	cmp	r6, #0
   56168:	beq	5619c <Mat_VarPrint+0x2a0>
   5616c:	ldr	r5, [pc, #1492]	; 56748 <Mat_VarPrint+0x84c>
   56170:	mov	r4, #0
   56174:	add	r5, pc, r5
   56178:	ldr	r0, [sl, #52]	; 0x34
   5617c:	mov	r2, #0
   56180:	ldr	r0, [r0, #8]
   56184:	ldr	r1, [r0, r4, lsl #2]
   56188:	mov	r0, r5
   5618c:	bl	17d4 <printf@plt>
   56190:	add	r4, r4, #1
   56194:	cmp	r6, r4
   56198:	bne	56178 <Mat_VarPrint+0x27c>
   5619c:	ldr	r0, [pc, #1436]	; 56740 <Mat_VarPrint+0x844>
   561a0:	add	r0, pc, r0
   561a4:	sub	sp, fp, #28
   561a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   561ac:	b	18c4 <puts@plt>
   561b0:	cmp	r9, #0
   561b4:	beq	561e0 <Mat_VarPrint+0x2e4>
   561b8:	ldr	r0, [pc, #1428]	; 56754 <Mat_VarPrint+0x858>
   561bc:	add	r0, pc, r0
   561c0:	bl	18c4 <puts@plt>
   561c4:	ldr	r0, [sl, #4]
   561c8:	cmp	r0, #3
   561cc:	blt	561e8 <Mat_VarPrint+0x2ec>
   561d0:	ldr	r0, [pc, #1408]	; 56758 <Mat_VarPrint+0x85c>
   561d4:	add	r0, pc, r0
   561d8:	bl	18c4 <puts@plt>
   561dc:	b	5619c <Mat_VarPrint+0x2a0>
   561e0:	sub	sp, fp, #28
   561e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   561e8:	cmp	r0, #2
   561ec:	beq	56220 <Mat_VarPrint+0x324>
   561f0:	cmp	r0, #1
   561f4:	bne	5619c <Mat_VarPrint+0x2a0>
   561f8:	ldr	r0, [sl, #32]
   561fc:	cmp	r0, #0
   56200:	beq	5619c <Mat_VarPrint+0x2a0>
   56204:	ldr	r0, [r0]
   56208:	cmp	r0, #16
   5620c:	bcc	5619c <Mat_VarPrint+0x2a0>
   56210:	ldr	r0, [pc, #1348]	; 5675c <Mat_VarPrint+0x860>
   56214:	add	r0, pc, r0
   56218:	bl	18c4 <puts@plt>
   5621c:	b	5619c <Mat_VarPrint+0x2a0>
   56220:	ldr	r0, [sl, #32]
   56224:	cmp	r0, #0
   56228:	beq	5619c <Mat_VarPrint+0x2a0>
   5622c:	ldr	r1, [sl, #16]
   56230:	sub	r2, r1, #6
   56234:	cmp	r2, #10
   56238:	bcs	56400 <Mat_VarPrint+0x504>
   5623c:	ldr	r0, [sl, #8]
   56240:	bl	1924 <Mat_SizeOf@plt>
   56244:	mov	r5, r0
   56248:	ldr	r0, [sl, #20]
   5624c:	cmp	r0, #0
   56250:	beq	56318 <Mat_VarPrint+0x41c>
   56254:	ldr	r1, [sl, #32]
   56258:	ldr	r0, [r1]
   5625c:	cmp	r0, #0
   56260:	beq	5619c <Mat_VarPrint+0x2a0>
   56264:	ldr	r2, [sl, #40]	; 0x28
   56268:	mov	r7, #0
   5626c:	ldm	r2, {r6, r8}
   56270:	ldr	r1, [r1, #4]
   56274:	cmp	r1, #0
   56278:	beq	562ec <Mat_VarPrint+0x3f0>
   5627c:	mov	r9, #1
   56280:	b	5628c <Mat_VarPrint+0x390>
   56284:	ldr	r0, [r0]
   56288:	add	r9, r9, #1
   5628c:	sub	r1, r9, #1
   56290:	mla	r4, r0, r1, r7
   56294:	ldr	r0, [sl, #8]
   56298:	mla	r1, r4, r5, r6
   5629c:	bl	5678c <Mat_PrintNumber>
   562a0:	ldr	r0, [pc, #1208]	; 56760 <Mat_VarPrint+0x864>
   562a4:	add	r0, pc, r0
   562a8:	bl	17d4 <printf@plt>
   562ac:	ldr	r0, [sl, #8]
   562b0:	mla	r1, r4, r5, r8
   562b4:	bl	5678c <Mat_PrintNumber>
   562b8:	ldr	r0, [pc, #1188]	; 56764 <Mat_VarPrint+0x868>
   562bc:	add	r0, pc, r0
   562c0:	bl	17d4 <printf@plt>
   562c4:	ldr	r0, [sl, #32]
   562c8:	cmp	r9, #14
   562cc:	ldr	r1, [r0, #4]
   562d0:	cmpls	r9, r1
   562d4:	bcc	56284 <Mat_VarPrint+0x388>
   562d8:	cmp	r9, r1
   562dc:	bcs	562ec <Mat_VarPrint+0x3f0>
   562e0:	ldr	r0, [pc, #1152]	; 56768 <Mat_VarPrint+0x86c>
   562e4:	add	r0, pc, r0
   562e8:	bl	17d4 <printf@plt>
   562ec:	mov	r0, #10
   562f0:	bl	199c <putchar@plt>
   562f4:	ldr	r1, [sl, #32]
   562f8:	add	r7, r7, #1
   562fc:	cmp	r7, #14
   56300:	ldr	r0, [r1]
   56304:	cmpls	r7, r0
   56308:	bcc	56270 <Mat_VarPrint+0x374>
   5630c:	cmp	r7, r0
   56310:	bcs	5619c <Mat_VarPrint+0x2a0>
   56314:	b	563f0 <Mat_VarPrint+0x4f4>
   56318:	ldr	r0, [sl, #32]
   5631c:	ldr	r1, [r0]
   56320:	cmp	r1, #0
   56324:	beq	5619c <Mat_VarPrint+0x2a0>
   56328:	ldr	r9, [sl, #40]	; 0x28
   5632c:	ldr	r8, [pc, #1084]	; 56770 <Mat_VarPrint+0x874>
   56330:	mov	r7, #0
   56334:	add	r8, pc, r8
   56338:	ldr	r0, [r0, #4]
   5633c:	cmp	r0, #0
   56340:	beq	563c8 <Mat_VarPrint+0x4cc>
   56344:	ldr	r0, [sl, #8]
   56348:	mla	r1, r7, r5, r9
   5634c:	bl	5678c <Mat_PrintNumber>
   56350:	mov	r0, #32
   56354:	bl	199c <putchar@plt>
   56358:	ldr	r0, [sl, #32]
   5635c:	mov	r1, #0
   56360:	ldr	r2, [r0, #4]
   56364:	cmp	r2, #1
   56368:	movwhi	r1, #1
   5636c:	cmp	r2, #2
   56370:	bcc	563b8 <Mat_VarPrint+0x4bc>
   56374:	mov	r6, #1
   56378:	ldr	r0, [r0]
   5637c:	mla	r0, r0, r6, r7
   56380:	mla	r1, r0, r5, r9
   56384:	ldr	r0, [sl, #8]
   56388:	bl	5678c <Mat_PrintNumber>
   5638c:	mov	r0, #32
   56390:	bl	199c <putchar@plt>
   56394:	ldr	r0, [sl, #32]
   56398:	add	r6, r6, #1
   5639c:	mov	r1, #0
   563a0:	ldr	r2, [r0, #4]
   563a4:	cmp	r6, r2
   563a8:	movwcc	r1, #1
   563ac:	cmp	r6, #14
   563b0:	cmpls	r6, r2
   563b4:	bcc	56378 <Mat_VarPrint+0x47c>
   563b8:	cmp	r1, #0
   563bc:	beq	563c8 <Mat_VarPrint+0x4cc>
   563c0:	mov	r0, r8
   563c4:	bl	17d4 <printf@plt>
   563c8:	mov	r0, #10
   563cc:	bl	199c <putchar@plt>
   563d0:	ldr	r0, [sl, #32]
   563d4:	add	r7, r7, #1
   563d8:	cmp	r7, #14
   563dc:	ldr	r1, [r0]
   563e0:	cmpls	r7, r1
   563e4:	bcc	56338 <Mat_VarPrint+0x43c>
   563e8:	cmp	r7, r1
   563ec:	bcs	5619c <Mat_VarPrint+0x2a0>
   563f0:	ldr	r0, [pc, #884]	; 5676c <Mat_VarPrint+0x870>
   563f4:	add	r0, pc, r0
   563f8:	bl	18c4 <puts@plt>
   563fc:	b	5619c <Mat_VarPrint+0x2a0>
   56400:	cmp	r1, #4
   56404:	beq	564f8 <Mat_VarPrint+0x5fc>
   56408:	cmp	r1, #5
   5640c:	bne	5619c <Mat_VarPrint+0x2a0>
   56410:	ldr	r0, [sl, #8]
   56414:	bl	1924 <Mat_SizeOf@plt>
   56418:	str	r0, [sp]
   5641c:	ldr	r0, [sl, #20]
   56420:	ldr	r5, [sl, #40]	; 0x28
   56424:	cmp	r0, #0
   56428:	beq	565e0 <Mat_VarPrint+0x6e4>
   5642c:	ldr	r1, [r5, #16]
   56430:	cmp	r1, #1
   56434:	beq	5619c <Mat_VarPrint+0x2a0>
   56438:	ldr	r0, [r5, #24]
   5643c:	mov	r6, #0
   56440:	ldm	r0, {r8, r9}
   56444:	ldr	r0, [r5, #12]
   56448:	ldr	r7, [r0, r6, lsl #2]
   5644c:	add	r6, r6, #1
   56450:	ldr	r2, [r0, r6, lsl #2]
   56454:	cmp	r7, r2
   56458:	bcs	564e8 <Mat_VarPrint+0x5ec>
   5645c:	ldr	r1, [r5, #20]
   56460:	cmp	r7, r1
   56464:	bcs	564e4 <Mat_VarPrint+0x5e8>
   56468:	ldr	r0, [sp]
   5646c:	mul	r4, r0, r7
   56470:	ldr	r0, [r5, #4]
   56474:	mov	r2, r6
   56478:	ldr	r0, [r0, r7, lsl #2]
   5647c:	add	r1, r0, #1
   56480:	ldr	r0, [pc, #756]	; 5677c <Mat_VarPrint+0x880>
   56484:	add	r0, pc, r0
   56488:	bl	17d4 <printf@plt>
   5648c:	ldr	r0, [sl, #8]
   56490:	add	r1, r8, r4
   56494:	bl	5678c <Mat_PrintNumber>
   56498:	ldr	r0, [pc, #736]	; 56780 <Mat_VarPrint+0x884>
   5649c:	add	r0, pc, r0
   564a0:	bl	17d4 <printf@plt>
   564a4:	ldr	r0, [sl, #8]
   564a8:	add	r1, r9, r4
   564ac:	bl	5678c <Mat_PrintNumber>
   564b0:	ldr	r0, [pc, #716]	; 56784 <Mat_VarPrint+0x888>
   564b4:	add	r0, pc, r0
   564b8:	bl	18c4 <puts@plt>
   564bc:	ldr	r0, [r5, #12]
   564c0:	add	r7, r7, #1
   564c4:	ldr	r1, [r0, r6, lsl #2]
   564c8:	cmp	r7, r1
   564cc:	bcs	564e4 <Mat_VarPrint+0x5e8>
   564d0:	ldr	r1, [sp]
   564d4:	add	r4, r4, r1
   564d8:	ldr	r1, [r5, #20]
   564dc:	cmp	r7, r1
   564e0:	bcc	56470 <Mat_VarPrint+0x574>
   564e4:	ldr	r1, [r5, #16]
   564e8:	sub	r2, r1, #1
   564ec:	cmp	r6, r2
   564f0:	bcc	56448 <Mat_VarPrint+0x54c>
   564f4:	b	5619c <Mat_VarPrint+0x2a0>
   564f8:	ldr	r1, [sl, #8]
   564fc:	cmp	r1, #17
   56500:	cmpne	r1, #4
   56504:	bne	56690 <Mat_VarPrint+0x794>
   56508:	ldr	r1, [r0]
   5650c:	cmp	r1, #0
   56510:	beq	5619c <Mat_VarPrint+0x2a0>
   56514:	ldr	r7, [sl, #40]	; 0x28
   56518:	ldr	r4, [pc, #596]	; 56774 <Mat_VarPrint+0x878>
   5651c:	mov	r5, #0
   56520:	mov	r6, #2
   56524:	mov	r9, #0
   56528:	add	r4, pc, r4
   5652c:	ldr	r0, [r0, #4]
   56530:	cmp	r0, #0
   56534:	beq	565c0 <Mat_VarPrint+0x6c4>
   56538:	mov	r8, #1
   5653c:	b	56548 <Mat_VarPrint+0x64c>
   56540:	ldr	r1, [r0]
   56544:	add	r8, r8, #1
   56548:	sub	r0, r8, #1
   5654c:	mla	r0, r1, r0, r9
   56550:	add	r0, r7, r0, lsl #1
   56554:	ldrh	r3, [r0]
   56558:	cmp	r3, #127	; 0x7f
   5655c:	bhi	5656c <Mat_VarPrint+0x670>
   56560:	mov	r0, r3
   56564:	bl	199c <putchar@plt>
   56568:	b	565b0 <Mat_VarPrint+0x6b4>
   5656c:	cmp	r5, r3, lsr #11
   56570:	bne	56594 <Mat_VarPrint+0x698>
   56574:	mov	r0, #192	; 0xc0
   56578:	orr	r1, r0, r3, lsr #6
   5657c:	ldr	r0, [pc, #500]	; 56778 <Mat_VarPrint+0x87c>
   56580:	bfi	r3, r6, #6, #26
   56584:	mov	r2, r3
   56588:	add	r0, pc, r0
   5658c:	bl	17d4 <printf@plt>
   56590:	b	565b0 <Mat_VarPrint+0x6b4>
   56594:	lsr	r2, r3, #6
   56598:	mov	r0, #224	; 0xe0
   5659c:	orr	r1, r0, r3, lsr #12
   565a0:	bfi	r3, r6, #6, #26
   565a4:	bfi	r2, r6, #6, #26
   565a8:	mov	r0, r4
   565ac:	bl	17d4 <printf@plt>
   565b0:	ldr	r0, [sl, #32]
   565b4:	ldr	r1, [r0, #4]
   565b8:	cmp	r8, r1
   565bc:	bcc	56540 <Mat_VarPrint+0x644>
   565c0:	mov	r0, #10
   565c4:	bl	199c <putchar@plt>
   565c8:	ldr	r0, [sl, #32]
   565cc:	add	r9, r9, #1
   565d0:	ldr	r1, [r0]
   565d4:	cmp	r9, r1
   565d8:	bcc	5652c <Mat_VarPrint+0x630>
   565dc:	b	5619c <Mat_VarPrint+0x2a0>
   565e0:	ldr	r1, [r5, #16]
   565e4:	cmp	r1, #1
   565e8:	beq	5619c <Mat_VarPrint+0x2a0>
   565ec:	ldr	r9, [r5, #24]
   565f0:	ldr	r0, [r5, #12]
   565f4:	ldr	r8, [pc, #396]	; 56788 <Mat_VarPrint+0x88c>
   565f8:	mov	r4, #0
   565fc:	add	r8, pc, r8
   56600:	ldr	r6, [r0, r4, lsl #2]
   56604:	add	r4, r4, #1
   56608:	ldr	r2, [r0, r4, lsl #2]
   5660c:	cmp	r6, r2
   56610:	bcs	56680 <Mat_VarPrint+0x784>
   56614:	ldr	r1, [r5, #20]
   56618:	cmp	r6, r1
   5661c:	bcs	5667c <Mat_VarPrint+0x780>
   56620:	ldr	r0, [sp]
   56624:	mla	r7, r0, r6, r9
   56628:	ldr	r0, [r5, #4]
   5662c:	mov	r2, r4
   56630:	ldr	r0, [r0, r6, lsl #2]
   56634:	add	r1, r0, #1
   56638:	mov	r0, r8
   5663c:	bl	17d4 <printf@plt>
   56640:	ldr	r0, [sl, #8]
   56644:	mov	r1, r7
   56648:	bl	5678c <Mat_PrintNumber>
   5664c:	mov	r0, #10
   56650:	bl	199c <putchar@plt>
   56654:	ldr	r0, [r5, #12]
   56658:	add	r6, r6, #1
   5665c:	ldr	r1, [r0, r4, lsl #2]
   56660:	cmp	r6, r1
   56664:	bcs	5667c <Mat_VarPrint+0x780>
   56668:	ldr	r1, [sp]
   5666c:	add	r7, r7, r1
   56670:	ldr	r1, [r5, #20]
   56674:	cmp	r6, r1
   56678:	bcc	56628 <Mat_VarPrint+0x72c>
   5667c:	ldr	r1, [r5, #16]
   56680:	sub	r2, r1, #1
   56684:	cmp	r4, r2
   56688:	bcc	56600 <Mat_VarPrint+0x704>
   5668c:	b	5619c <Mat_VarPrint+0x2a0>
   56690:	ldr	r1, [r0]
   56694:	cmp	r1, #0
   56698:	beq	5619c <Mat_VarPrint+0x2a0>
   5669c:	ldr	r5, [sl, #40]	; 0x28
   566a0:	mov	r6, #0
   566a4:	ldr	r0, [r0, #4]
   566a8:	cmp	r0, #0
   566ac:	beq	566f0 <Mat_VarPrint+0x7f4>
   566b0:	ldrb	r0, [r5, r6]
   566b4:	bl	199c <putchar@plt>
   566b8:	ldr	r0, [sl, #32]
   566bc:	ldr	r1, [r0, #4]
   566c0:	cmp	r1, #2
   566c4:	bcc	566f0 <Mat_VarPrint+0x7f4>
   566c8:	mov	r4, #1
   566cc:	ldr	r0, [r0]
   566d0:	mla	r0, r0, r4, r6
   566d4:	ldrb	r0, [r5, r0]
   566d8:	bl	199c <putchar@plt>
   566dc:	ldr	r0, [sl, #32]
   566e0:	add	r4, r4, #1
   566e4:	ldr	r1, [r0, #4]
   566e8:	cmp	r4, r1
   566ec:	bcc	566cc <Mat_VarPrint+0x7d0>
   566f0:	mov	r0, #10
   566f4:	bl	199c <putchar@plt>
   566f8:	ldr	r0, [sl, #32]
   566fc:	add	r6, r6, #1
   56700:	ldr	r1, [r0]
   56704:	cmp	r6, r1
   56708:	bcc	566a4 <Mat_VarPrint+0x7a8>
   5670c:	b	5619c <Mat_VarPrint+0x2a0>
   56710:	.word	0x000033d8
   56714:	.word	0x000035da
   56718:	.word	0x0000337c
   5671c:	.word	0x00003370
   56720:	.word	0x00013e68
   56724:	.word	0x00003337
   56728:	.word	0x0000332e
   5672c:	.word	0x00003321
   56730:	.word	0x00013e54
   56734:	.word	0x00003498
   56738:	.word	0x0000346c
   5673c:	.word	0x0000346b
   56740:	.word	0x000034c1
   56744:	.word	0x00003398
   56748:	.word	0x0000338f
   5674c:	.word	0x00003513
   56750:	.word	0x00003551
   56754:	.word	0x000034a1
   56758:	.word	0x000034c4
   5675c:	.word	0x00003454
   56760:	.word	0x0000327e
   56764:	.word	0x0000326a
   56768:	.word	0x00003245
   5676c:	.word	0x00003263
   56770:	.word	0x000031f5
   56774:	.word	0x00003005
   56778:	.word	0x00002fa7
   5677c:	.word	0x000030b0
   56780:	.word	0x00003086
   56784:	.word	0x00003187
   56788:	.word	0x00002f38

0005678c <Mat_PrintNumber>:
   5678c:	sub	r0, r0, #1
   56790:	cmp	r0, #12
   56794:	bxhi	lr
   56798:	add	r2, pc, #4
   5679c:	ldr	r0, [r2, r0, lsl #2]
   567a0:	add	pc, r2, r0
   567a4:	.word	0x00000034
   567a8:	.word	0x00000044
   567ac:	.word	0x00000054
   567b0:	.word	0x00000064
   567b4:	.word	0x00000074
   567b8:	.word	0x00000084
   567bc:	.word	0x00000094
   567c0:	.word	0x000000d4
   567c4:	.word	0x000000a0
   567c8:	.word	0x000000d4
   567cc:	.word	0x000000d4
   567d0:	.word	0x000000b4
   567d4:	.word	0x000000c4
   567d8:	ldrsb	r1, [r1]
   567dc:	ldr	r0, [pc, #180]	; 56898 <Mat_PrintNumber+0x10c>
   567e0:	add	r0, pc, r0
   567e4:	b	17d4 <printf@plt>
   567e8:	ldrb	r1, [r1]
   567ec:	ldr	r0, [pc, #168]	; 5689c <Mat_PrintNumber+0x110>
   567f0:	add	r0, pc, r0
   567f4:	b	17d4 <printf@plt>
   567f8:	ldrsh	r1, [r1]
   567fc:	ldr	r0, [pc, #140]	; 56890 <Mat_PrintNumber+0x104>
   56800:	add	r0, pc, r0
   56804:	b	17d4 <printf@plt>
   56808:	ldrh	r1, [r1]
   5680c:	ldr	r0, [pc, #128]	; 56894 <Mat_PrintNumber+0x108>
   56810:	add	r0, pc, r0
   56814:	b	17d4 <printf@plt>
   56818:	ldr	r1, [r1]
   5681c:	ldr	r0, [pc, #100]	; 56888 <Mat_PrintNumber+0xfc>
   56820:	add	r0, pc, r0
   56824:	b	17d4 <printf@plt>
   56828:	ldr	r1, [r1]
   5682c:	ldr	r0, [pc, #88]	; 5688c <Mat_PrintNumber+0x100>
   56830:	add	r0, pc, r0
   56834:	b	17d4 <printf@plt>
   56838:	vldr	s0, [r1]
   5683c:	vcvt.f64.f32	d16, s0
   56840:	b	56848 <Mat_PrintNumber+0xbc>
   56844:	vldr	d16, [r1]
   56848:	ldr	r0, [pc, #44]	; 5687c <Mat_PrintNumber+0xf0>
   5684c:	vmov	r2, r3, d16
   56850:	add	r0, pc, r0
   56854:	b	17d4 <printf@plt>
   56858:	ldrd	r2, [r1]
   5685c:	ldr	r0, [pc, #28]	; 56880 <Mat_PrintNumber+0xf4>
   56860:	add	r0, pc, r0
   56864:	b	17d4 <printf@plt>
   56868:	ldrd	r2, [r1]
   5686c:	ldr	r0, [pc, #16]	; 56884 <Mat_PrintNumber+0xf8>
   56870:	add	r0, pc, r0
   56874:	b	17d4 <printf@plt>
   56878:	bx	lr
   5687c:	.word	0x00002de5
   56880:	.word	0x00002dd8
   56884:	.word	0x00002dcd
   56888:	.word	0x00002528
   5688c:	.word	0x00002e12
   56890:	.word	0x00002e45
   56894:	.word	0x00002e39
   56898:	.word	0x00002e6d
   5689c:	.word	0x00002e62

000568a0 <Mat_VarReadData>:
   568a0:	push	{fp, lr}
   568a4:	mov	fp, sp
   568a8:	ldr	ip, [r1, #16]
   568ac:	sub	lr, ip, #6
   568b0:	mvn	ip, #0
   568b4:	cmp	lr, #9
   568b8:	bhi	568ec <Mat_VarReadData+0x4c>
   568bc:	ldr	ip, [r0, #16]
   568c0:	cmp	ip, #16
   568c4:	beq	568f4 <Mat_VarReadData+0x54>
   568c8:	cmp	ip, #512	; 0x200
   568cc:	moveq	ip, #1
   568d0:	moveq	r0, ip
   568d4:	popeq	{fp, pc}
   568d8:	cmp	ip, #256	; 0x100
   568dc:	bne	568e8 <Mat_VarReadData+0x48>
   568e0:	pop	{fp, lr}
   568e4:	b	271d0 <Mat_VarReadData5>
   568e8:	mov	ip, #2
   568ec:	mov	r0, ip
   568f0:	pop	{fp, pc}
   568f4:	pop	{fp, lr}
   568f8:	b	5315c <Mat_VarReadData4>

000568fc <Mat_VarReadDataAll>:
   568fc:	push	{r4, sl, fp, lr}
   56900:	add	fp, sp, #8
   56904:	cmp	r0, #0
   56908:	mov	r4, #1
   5690c:	cmpne	r1, #0
   56910:	bne	5691c <Mat_VarReadDataAll+0x20>
   56914:	mov	r0, r4
   56918:	pop	{r4, sl, fp, pc}
   5691c:	ldr	r2, [r0]
   56920:	mov	r4, #0
   56924:	cmp	r2, #0
   56928:	beq	56914 <Mat_VarReadDataAll+0x18>
   5692c:	ldr	r2, [r0, #16]
   56930:	cmp	r2, #16
   56934:	beq	5694c <Mat_VarReadDataAll+0x50>
   56938:	cmp	r2, #256	; 0x100
   5693c:	bne	56914 <Mat_VarReadDataAll+0x18>
   56940:	bl	25480 <Mat_VarRead5>
   56944:	mov	r0, r4
   56948:	pop	{r4, sl, fp, pc}
   5694c:	bl	52888 <Mat_VarRead4>
   56950:	mov	r0, r4
   56954:	pop	{r4, sl, fp, pc}

00056958 <Mat_VarReadDataLinear>:
   56958:	push	{fp, lr}
   5695c:	mov	fp, sp
   56960:	ldr	ip, [r1, #16]
   56964:	sub	lr, ip, #6
   56968:	mvn	ip, #0
   5696c:	cmp	lr, #9
   56970:	bhi	569a4 <Mat_VarReadDataLinear+0x4c>
   56974:	ldr	ip, [r0, #16]
   56978:	cmp	ip, #16
   5697c:	beq	569ac <Mat_VarReadDataLinear+0x54>
   56980:	cmp	ip, #512	; 0x200
   56984:	moveq	ip, #1
   56988:	moveq	r0, ip
   5698c:	popeq	{fp, pc}
   56990:	cmp	ip, #256	; 0x100
   56994:	bne	569a0 <Mat_VarReadDataLinear+0x48>
   56998:	pop	{fp, lr}
   5699c:	b	4cf50 <Mat_VarReadDataLinear5>
   569a0:	mov	ip, #2
   569a4:	mov	r0, ip
   569a8:	pop	{fp, pc}
   569ac:	pop	{fp, lr}
   569b0:	b	53370 <Mat_VarReadDataLinear4>

000569b4 <Mat_VarReadInfo>:
   569b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   569b8:	add	fp, sp, #24
   569bc:	cmp	r0, #0
   569c0:	mov	r6, #0
   569c4:	movne	r5, r1
   569c8:	cmpne	r1, #0
   569cc:	bne	569d8 <Mat_VarReadInfo+0x24>
   569d0:	mov	r0, r6
   569d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   569d8:	mov	r4, r0
   569dc:	ldr	r0, [r0, #16]
   569e0:	cmp	r0, #512	; 0x200
   569e4:	bne	56a6c <Mat_VarReadInfo+0xb8>
   569e8:	ldr	r0, [r4, #36]	; 0x24
   569ec:	ldr	r8, [r4, #32]
   569f0:	mov	r6, #0
   569f4:	str	r6, [r4, #32]
   569f8:	cmp	r0, #0
   569fc:	beq	56b30 <Mat_VarReadInfo+0x17c>
   56a00:	ldr	r0, [r4, #16]
   56a04:	cmp	r0, #16
   56a08:	beq	56a20 <Mat_VarReadInfo+0x6c>
   56a0c:	cmp	r0, #256	; 0x100
   56a10:	bne	56b24 <Mat_VarReadInfo+0x170>
   56a14:	mov	r0, r4
   56a18:	bl	4fa74 <Mat_VarReadNextInfo5>
   56a1c:	b	56a28 <Mat_VarReadInfo+0x74>
   56a20:	mov	r0, r4
   56a24:	bl	53480 <Mat_VarReadNextInfo4>
   56a28:	mov	r7, r0
   56a2c:	cmp	r0, #0
   56a30:	beq	56b24 <Mat_VarReadInfo+0x170>
   56a34:	ldr	r0, [r7, #36]	; 0x24
   56a38:	cmp	r0, #0
   56a3c:	beq	56a50 <Mat_VarReadInfo+0x9c>
   56a40:	mov	r1, r5
   56a44:	bl	17b0 <strcmp@plt>
   56a48:	cmp	r0, #0
   56a4c:	beq	56b64 <Mat_VarReadInfo+0x1b0>
   56a50:	mov	r0, r7
   56a54:	bl	1918 <Mat_VarFree@plt>
   56a58:	ldr	r0, [r4, #32]
   56a5c:	ldr	r1, [r4, #36]	; 0x24
   56a60:	cmp	r0, r1
   56a64:	bcc	56a00 <Mat_VarReadInfo+0x4c>
   56a68:	b	56b30 <Mat_VarReadInfo+0x17c>
   56a6c:	ldr	r0, [r4]
   56a70:	bl	1840 <ftell@plt>
   56a74:	cmn	r0, #1
   56a78:	beq	56b10 <Mat_VarReadInfo+0x15c>
   56a7c:	mov	r7, r0
   56a80:	ldr	r0, [r4]
   56a84:	ldr	r1, [r4, #28]
   56a88:	mov	r2, #0
   56a8c:	bl	1a2c <fseek@plt>
   56a90:	ldr	r0, [r4, #16]
   56a94:	cmp	r0, #16
   56a98:	beq	56ab0 <Mat_VarReadInfo+0xfc>
   56a9c:	cmp	r0, #256	; 0x100
   56aa0:	bne	56aec <Mat_VarReadInfo+0x138>
   56aa4:	mov	r0, r4
   56aa8:	bl	4fa74 <Mat_VarReadNextInfo5>
   56aac:	b	56ab8 <Mat_VarReadInfo+0x104>
   56ab0:	mov	r0, r4
   56ab4:	bl	53480 <Mat_VarReadNextInfo4>
   56ab8:	mov	r6, r0
   56abc:	cmp	r0, #0
   56ac0:	beq	56aec <Mat_VarReadInfo+0x138>
   56ac4:	ldr	r0, [r6, #36]	; 0x24
   56ac8:	cmp	r0, #0
   56acc:	beq	56ae0 <Mat_VarReadInfo+0x12c>
   56ad0:	mov	r1, r5
   56ad4:	bl	17b0 <strcmp@plt>
   56ad8:	cmp	r0, #0
   56adc:	beq	56b4c <Mat_VarReadInfo+0x198>
   56ae0:	mov	r0, r6
   56ae4:	bl	1918 <Mat_VarFree@plt>
   56ae8:	b	56afc <Mat_VarReadInfo+0x148>
   56aec:	ldr	r0, [r4]
   56af0:	bl	190c <feof@plt>
   56af4:	cmp	r0, #0
   56af8:	beq	56b3c <Mat_VarReadInfo+0x188>
   56afc:	ldr	r0, [r4]
   56b00:	bl	190c <feof@plt>
   56b04:	cmp	r0, #0
   56b08:	beq	56a90 <Mat_VarReadInfo+0xdc>
   56b0c:	b	56b48 <Mat_VarReadInfo+0x194>
   56b10:	ldr	r0, [pc, #96]	; 56b78 <Mat_VarReadInfo+0x1c4>
   56b14:	add	r0, pc, r0
   56b18:	bl	19b4 <Mat_Critical@plt>
   56b1c:	mov	r0, r6
   56b20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   56b24:	ldr	r0, [pc, #68]	; 56b70 <Mat_VarReadInfo+0x1bc>
   56b28:	add	r0, pc, r0
   56b2c:	bl	19b4 <Mat_Critical@plt>
   56b30:	mov	r0, r6
   56b34:	str	r8, [r4, #32]
   56b38:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   56b3c:	ldr	r0, [pc, #48]	; 56b74 <Mat_VarReadInfo+0x1c0>
   56b40:	add	r0, pc, r0
   56b44:	bl	19b4 <Mat_Critical@plt>
   56b48:	mov	r6, #0
   56b4c:	ldr	r0, [r4]
   56b50:	mov	r1, r7
   56b54:	mov	r2, #0
   56b58:	bl	1a2c <fseek@plt>
   56b5c:	mov	r0, r6
   56b60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   56b64:	mov	r0, r7
   56b68:	str	r8, [r4, #32]
   56b6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   56b70:	.word	0x0000214c
   56b74:	.word	0x00002134
   56b78:	.word	0x00001ed4

00056b7c <Mat_VarRead>:
   56b7c:	push	{r4, r5, r6, r7, fp, lr}
   56b80:	add	fp, sp, #16
   56b84:	cmp	r0, #0
   56b88:	mov	r4, #0
   56b8c:	movne	r7, r1
   56b90:	cmpne	r1, #0
   56b94:	bne	56ba0 <Mat_VarRead+0x24>
   56b98:	mov	r0, r4
   56b9c:	pop	{r4, r5, r6, r7, fp, pc}
   56ba0:	mov	r5, r0
   56ba4:	ldr	r0, [r0, #16]
   56ba8:	cmp	r0, #512	; 0x200
   56bac:	bne	56be8 <Mat_VarRead+0x6c>
   56bb0:	ldr	r6, [r5, #32]
   56bb4:	mov	r0, #0
   56bb8:	mov	r1, r7
   56bbc:	str	r0, [r5, #32]
   56bc0:	mov	r0, r5
   56bc4:	bl	187c <Mat_VarReadInfo@plt>
   56bc8:	cmp	r0, #0
   56bcc:	mov	r4, r0
   56bd0:	ldrne	r0, [r5]
   56bd4:	cmpne	r0, #0
   56bd8:	bne	56c48 <Mat_VarRead+0xcc>
   56bdc:	str	r6, [r5, #32]
   56be0:	mov	r0, r4
   56be4:	pop	{r4, r5, r6, r7, fp, pc}
   56be8:	ldr	r0, [r5]
   56bec:	bl	1840 <ftell@plt>
   56bf0:	cmn	r0, #1
   56bf4:	beq	56c34 <Mat_VarRead+0xb8>
   56bf8:	mov	r6, r0
   56bfc:	mov	r0, r5
   56c00:	mov	r1, r7
   56c04:	bl	187c <Mat_VarReadInfo@plt>
   56c08:	cmp	r0, #0
   56c0c:	mov	r4, r0
   56c10:	ldrne	r0, [r5]
   56c14:	cmpne	r0, #0
   56c18:	bne	56c6c <Mat_VarRead+0xf0>
   56c1c:	ldr	r0, [r5]
   56c20:	mov	r1, r6
   56c24:	mov	r2, #0
   56c28:	bl	1a2c <fseek@plt>
   56c2c:	mov	r0, r4
   56c30:	pop	{r4, r5, r6, r7, fp, pc}
   56c34:	ldr	r0, [pc, #116]	; 56cb0 <Mat_VarRead+0x134>
   56c38:	add	r0, pc, r0
   56c3c:	bl	19b4 <Mat_Critical@plt>
   56c40:	mov	r0, r4
   56c44:	pop	{r4, r5, r6, r7, fp, pc}
   56c48:	ldr	r0, [r5, #16]
   56c4c:	cmp	r0, #16
   56c50:	beq	56c90 <Mat_VarRead+0x114>
   56c54:	cmp	r0, #256	; 0x100
   56c58:	bne	56bdc <Mat_VarRead+0x60>
   56c5c:	mov	r0, r5
   56c60:	mov	r1, r4
   56c64:	bl	25480 <Mat_VarRead5>
   56c68:	b	56bdc <Mat_VarRead+0x60>
   56c6c:	ldr	r0, [r5, #16]
   56c70:	cmp	r0, #16
   56c74:	beq	56ca0 <Mat_VarRead+0x124>
   56c78:	cmp	r0, #256	; 0x100
   56c7c:	bne	56c1c <Mat_VarRead+0xa0>
   56c80:	mov	r0, r5
   56c84:	mov	r1, r4
   56c88:	bl	25480 <Mat_VarRead5>
   56c8c:	b	56c1c <Mat_VarRead+0xa0>
   56c90:	mov	r0, r5
   56c94:	mov	r1, r4
   56c98:	bl	52888 <Mat_VarRead4>
   56c9c:	b	56bdc <Mat_VarRead+0x60>
   56ca0:	mov	r0, r5
   56ca4:	mov	r1, r4
   56ca8:	bl	52888 <Mat_VarRead4>
   56cac:	b	56c1c <Mat_VarRead+0xa0>
   56cb0:	.word	0x00001db0

00056cb4 <Mat_VarWriteInfo>:
   56cb4:	push	{fp, lr}
   56cb8:	mov	fp, sp
   56cbc:	ldr	r0, [r0, #16]
   56cc0:	ldr	r2, [pc, #36]	; 56cec <Mat_VarWriteInfo+0x38>
   56cc4:	ldr	r1, [pc, #36]	; 56cf0 <Mat_VarWriteInfo+0x3c>
   56cc8:	cmp	r0, #512	; 0x200
   56ccc:	ldr	r0, [pc, #32]	; 56cf4 <Mat_VarWriteInfo+0x40>
   56cd0:	add	r2, pc, r2
   56cd4:	add	r1, pc, r1
   56cd8:	moveq	r1, r2
   56cdc:	add	r0, pc, r0
   56ce0:	bl	19b4 <Mat_Critical@plt>
   56ce4:	mov	r0, #1
   56ce8:	pop	{fp, pc}
   56cec:	.word	0x000028b7
   56cf0:	.word	0x000028d3
   56cf4:	.word	0x00002867

00056cf8 <Mat_VarWriteData>:
   56cf8:	push	{fp, lr}
   56cfc:	mov	fp, sp
   56d00:	ldr	r0, [r0, #16]
   56d04:	ldr	r2, [pc, #36]	; 56d30 <Mat_VarWriteData+0x38>
   56d08:	ldr	r1, [pc, #36]	; 56d34 <Mat_VarWriteData+0x3c>
   56d0c:	cmp	r0, #512	; 0x200
   56d10:	ldr	r0, [pc, #32]	; 56d38 <Mat_VarWriteData+0x40>
   56d14:	add	r2, pc, r2
   56d18:	add	r1, pc, r1
   56d1c:	moveq	r1, r2
   56d20:	add	r0, pc, r0
   56d24:	bl	19b4 <Mat_Critical@plt>
   56d28:	mov	r0, #1
   56d2c:	pop	{fp, pc}
   56d30:	.word	0x00002873
   56d34:	.word	0x0000288f
   56d38:	.word	0x00002823

00056d3c <Mat_VarWriteAppend>:
   56d3c:	push	{r4, sl, fp, lr}
   56d40:	add	fp, sp, #8
   56d44:	sub	sp, sp, #8
   56d48:	mov	r4, r0
   56d4c:	mvn	r0, #0
   56d50:	cmp	r4, #0
   56d54:	cmpne	r1, #0
   56d58:	bne	56d64 <Mat_VarWriteAppend+0x28>
   56d5c:	sub	sp, fp, #8
   56d60:	pop	{r4, sl, fp, pc}
   56d64:	ldr	r0, [r4, #40]	; 0x28
   56d68:	cmp	r0, #0
   56d6c:	bne	56d84 <Mat_VarWriteAppend+0x48>
   56d70:	mov	r0, #0
   56d74:	add	r1, sp, #4
   56d78:	str	r0, [sp, #4]
   56d7c:	mov	r0, r4
   56d80:	bl	1930 <Mat_GetDir@plt>
   56d84:	ldr	r1, [r4, #16]
   56d88:	mov	r0, #2
   56d8c:	cmp	r1, #512	; 0x200
   56d90:	movweq	r0, #1
   56d94:	sub	sp, fp, #8
   56d98:	pop	{r4, sl, fp, pc}

00056d9c <Mat_VarGetCell>:
   56d9c:	push	{r4, r5, r6, sl, fp, lr}
   56da0:	add	fp, sp, #16
   56da4:	sub	sp, sp, #8
   56da8:	mov	r6, r0
   56dac:	mov	r0, #1
   56db0:	mov	r4, #0
   56db4:	cmp	r6, #0
   56db8:	str	r0, [sp, #4]
   56dbc:	beq	56de8 <Mat_VarGetCell+0x4c>
   56dc0:	mov	r5, r1
   56dc4:	add	r1, sp, #4
   56dc8:	mov	r0, r6
   56dcc:	bl	53824 <SafeMulDims>
   56dd0:	cmp	r5, #0
   56dd4:	blt	56de8 <Mat_VarGetCell+0x4c>
   56dd8:	ldr	r0, [sp, #4]
   56ddc:	cmp	r0, r5
   56de0:	ldrhi	r0, [r6, #40]	; 0x28
   56de4:	ldrhi	r4, [r0, r5, lsl #2]
   56de8:	mov	r0, r4
   56dec:	sub	sp, fp, #16
   56df0:	pop	{r4, r5, r6, sl, fp, pc}

00056df4 <Mat_VarGetCells>:
   56df4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   56df8:	add	fp, sp, #28
   56dfc:	sub	sp, sp, #172	; 0xac
   56e00:	mov	sl, r3
   56e04:	sub	r3, fp, #72	; 0x48
   56e08:	str	r2, [sp, #16]
   56e0c:	mov	r2, r0
   56e10:	vmov.i32	q8, #0	; 0x00000000
   56e14:	mov	r0, #36	; 0x24
   56e18:	mov	r7, #0
   56e1c:	mov	r6, r3
   56e20:	add	r3, r3, #16
   56e24:	cmp	r2, #0
   56e28:	str	r7, [fp, #-40]	; 0xffffffd8
   56e2c:	str	r7, [sp, #120]	; 0x78
   56e30:	str	r7, [sp, #80]	; 0x50
   56e34:	vst1.64	{d16-d17}, [r6], r0
   56e38:	vst1.64	{d16-d17}, [r3]
   56e3c:	add	r3, sp, #88	; 0x58
   56e40:	cmpne	r1, #0
   56e44:	str	r7, [r6]
   56e48:	add	r6, r3, #16
   56e4c:	vst1.64	{d16-d17}, [r3], r0
   56e50:	str	r7, [r3]
   56e54:	add	r3, sp, #48	; 0x30
   56e58:	vst1.64	{d16-d17}, [r6]
   56e5c:	add	r6, r3, #16
   56e60:	vst1.64	{d16-d17}, [r3], r0
   56e64:	vst1.64	{d16-d17}, [r6]
   56e68:	str	r7, [r3]
   56e6c:	beq	56e80 <Mat_VarGetCells+0x8c>
   56e70:	ldr	r0, [sp, #16]
   56e74:	cmp	r0, #0
   56e78:	cmpne	sl, #0
   56e7c:	bne	56e8c <Mat_VarGetCells+0x98>
   56e80:	mov	r0, r7
   56e84:	sub	sp, fp, #28
   56e88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   56e8c:	ldr	r3, [r2, #4]
   56e90:	cmp	r3, #9
   56e94:	bgt	56e80 <Mat_VarGetCells+0x8c>
   56e98:	ldr	r9, [r2, #32]
   56e9c:	cmp	r3, #2
   56ea0:	str	r2, [sp, #12]
   56ea4:	str	r1, [sp, #40]	; 0x28
   56ea8:	str	r3, [sp, #8]
   56eac:	ldr	r7, [r9]
   56eb0:	str	r7, [sp, #48]	; 0x30
   56eb4:	ldr	r0, [sl]
   56eb8:	ldr	r5, [r1]
   56ebc:	mov	r6, r0
   56ec0:	str	r5, [fp, #-72]	; 0xffffffb8
   56ec4:	str	r0, [sp, #32]
   56ec8:	str	r5, [sp, #36]	; 0x24
   56ecc:	blt	56f34 <Mat_VarGetCells+0x140>
   56ed0:	ldr	r1, [sp, #40]	; 0x28
   56ed4:	mvn	r0, #3
   56ed8:	add	r2, r0, r3, lsl #2
   56edc:	sub	r0, fp, #72	; 0x48
   56ee0:	orr	r0, r0, #4
   56ee4:	add	r8, r1, #4
   56ee8:	mov	r1, r8
   56eec:	bl	181c <memcpy@plt>
   56ef0:	ldr	r0, [sp, #8]
   56ef4:	ldr	r5, [sp, #36]	; 0x24
   56ef8:	ldr	r6, [sp, #32]
   56efc:	add	r2, sp, #48	; 0x30
   56f00:	add	r1, sl, #4
   56f04:	add	r3, r9, #4
   56f08:	orr	r2, r2, #4
   56f0c:	sub	r0, r0, #1
   56f10:	ldr	r4, [r8], #4
   56f14:	subs	r0, r0, #1
   56f18:	mla	r5, r7, r4, r5
   56f1c:	ldr	r4, [r3], #4
   56f20:	mul	r7, r4, r7
   56f24:	str	r7, [r2], #4
   56f28:	ldr	r4, [r1], #4
   56f2c:	mul	r6, r4, r6
   56f30:	bne	56f10 <Mat_VarGetCells+0x11c>
   56f34:	lsl	r0, r6, #2
   56f38:	bl	18d0 <malloc@plt>
   56f3c:	mov	r7, r0
   56f40:	cmp	r6, #1
   56f44:	blt	56e80 <Mat_VarGetCells+0x8c>
   56f48:	ldr	r0, [sp, #16]
   56f4c:	ldr	lr, [sp, #8]
   56f50:	str	r6, [sp, #28]
   56f54:	ldr	r6, [sp, #40]	; 0x28
   56f58:	ldr	r4, [sp, #32]
   56f5c:	mov	r2, r7
   56f60:	mov	r9, #0
   56f64:	str	r7, [sp, #4]
   56f68:	add	r3, r0, #8
   56f6c:	ldr	r0, [r0, #4]
   56f70:	sub	r1, lr, #2
   56f74:	sub	r8, lr, #1
   56f78:	str	r3, [sp, #44]	; 0x2c
   56f7c:	mov	r3, sl
   56f80:	add	sl, r6, #4
   56f84:	add	r6, r3, #4
   56f88:	lsl	r3, r4, #2
   56f8c:	str	r3, [sp, #24]
   56f90:	str	r0, [sp, #20]
   56f94:	cmp	r4, #1
   56f98:	blt	56fc8 <Mat_VarGetCells+0x1d4>
   56f9c:	ldr	r0, [sp, #12]
   56fa0:	ldr	r0, [r0, #40]	; 0x28
   56fa4:	add	r7, r0, r5, lsl #2
   56fa8:	ldr	r0, [sp, #16]
   56fac:	ldr	r0, [r0]
   56fb0:	lsl	r5, r0, #2
   56fb4:	mov	r0, r2
   56fb8:	ldr	r3, [r7], r5
   56fbc:	subs	r4, r4, #1
   56fc0:	str	r3, [r0], #4
   56fc4:	bne	56fb8 <Mat_VarGetCells+0x1c4>
   56fc8:	ldr	r5, [sp, #36]	; 0x24
   56fcc:	ldr	r0, [sp, #92]	; 0x5c
   56fd0:	ldr	r3, [sp, #20]
   56fd4:	cmp	lr, #2
   56fd8:	str	r2, [sp, #40]	; 0x28
   56fdc:	str	r5, [fp, #-72]	; 0xffffffb8
   56fe0:	add	ip, r0, #1
   56fe4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   56fe8:	str	ip, [sp, #92]	; 0x5c
   56fec:	add	r0, r0, r3
   56ff0:	str	r0, [fp, #-68]	; 0xffffffbc
   56ff4:	blt	57094 <Mat_VarGetCells+0x2a0>
   56ff8:	ldr	r5, [sp, #36]	; 0x24
   56ffc:	mov	r7, #0
   57000:	sub	r2, fp, #72	; 0x48
   57004:	add	r3, sp, #88	; 0x58
   57008:	b	57018 <Mat_VarGetCells+0x224>
   5700c:	add	r0, r3, r7, lsl #2
   57010:	mov	r7, lr
   57014:	ldr	ip, [r0, #8]
   57018:	ldr	r0, [r6, r7, lsl #2]
   5701c:	add	lr, r7, #1
   57020:	cmp	ip, r0
   57024:	bne	57074 <Mat_VarGetCells+0x280>
   57028:	add	r3, r3, r7, lsl #2
   5702c:	mov	r0, #0
   57030:	cmp	lr, r8
   57034:	str	r0, [r3, #4]
   57038:	add	r0, r2, r7, lsl #2
   5703c:	ldr	r4, [sl, r7, lsl #2]
   57040:	str	r4, [r0, #4]
   57044:	bge	5706c <Mat_VarGetCells+0x278>
   57048:	ldr	r2, [r3, #8]
   5704c:	add	r2, r2, #1
   57050:	str	r2, [r3, #8]
   57054:	ldr	r2, [sp, #44]	; 0x2c
   57058:	ldr	r3, [r0, #8]
   5705c:	ldr	r2, [r2, r7, lsl #2]
   57060:	add	r2, r3, r2
   57064:	str	r2, [r0, #8]
   57068:	sub	r2, fp, #72	; 0x48
   5706c:	add	r3, sp, #88	; 0x58
   57070:	b	5707c <Mat_VarGetCells+0x288>
   57074:	add	r0, r2, r7, lsl #2
   57078:	ldr	r4, [r0, #4]
   5707c:	add	r0, sp, #48	; 0x30
   57080:	cmp	r1, r7
   57084:	ldr	r0, [r0, r7, lsl #2]
   57088:	mla	r5, r0, r4, r5
   5708c:	bne	5700c <Mat_VarGetCells+0x218>
   57090:	ldr	lr, [sp, #8]
   57094:	ldr	r0, [sp, #24]
   57098:	ldr	r2, [sp, #40]	; 0x28
   5709c:	ldr	r4, [sp, #32]
   570a0:	add	r2, r2, r0
   570a4:	ldr	r0, [sp, #28]
   570a8:	add	r9, r9, r4
   570ac:	cmp	r9, r0
   570b0:	blt	56f94 <Mat_VarGetCells+0x1a0>
   570b4:	ldr	r7, [sp, #4]
   570b8:	b	56e80 <Mat_VarGetCells+0x8c>

000570bc <Mat_VarGetCellsLinear>:
   570bc:	push	{r4, r5, r6, r7, fp, lr}
   570c0:	add	fp, sp, #16
   570c4:	cmp	r0, #0
   570c8:	moveq	r0, #0
   570cc:	popeq	{r4, r5, r6, r7, fp, pc}
   570d0:	mov	r7, r0
   570d4:	lsl	r0, r3, #2
   570d8:	mov	r4, r3
   570dc:	mov	r5, r2
   570e0:	mov	r6, r1
   570e4:	bl	18d0 <malloc@plt>
   570e8:	cmp	r4, #1
   570ec:	poplt	{r4, r5, r6, r7, fp, pc}
   570f0:	ldr	r1, [r7, #40]	; 0x28
   570f4:	lsl	r2, r5, #2
   570f8:	mov	r3, r0
   570fc:	add	r1, r1, r6, lsl #2
   57100:	ldr	r7, [r1], r2
   57104:	subs	r4, r4, #1
   57108:	str	r7, [r3], #4
   5710c:	bne	57100 <Mat_VarGetCellsLinear+0x44>
   57110:	pop	{r4, r5, r6, r7, fp, pc}

00057114 <Mat_VarSetCell>:
   57114:	push	{r4, r5, r6, r7, fp, lr}
   57118:	add	fp, sp, #16
   5711c:	sub	sp, sp, #8
   57120:	mov	r7, r0
   57124:	mov	r0, #1
   57128:	mov	r4, #0
   5712c:	cmp	r7, #0
   57130:	str	r0, [sp, #4]
   57134:	beq	57174 <Mat_VarSetCell+0x60>
   57138:	ldr	r0, [r7, #4]
   5713c:	cmp	r0, #1
   57140:	blt	57174 <Mat_VarSetCell+0x60>
   57144:	mov	r6, r1
   57148:	add	r1, sp, #4
   5714c:	mov	r0, r7
   57150:	mov	r5, r2
   57154:	bl	53824 <SafeMulDims>
   57158:	cmp	r6, #0
   5715c:	blt	57174 <Mat_VarSetCell+0x60>
   57160:	ldr	r0, [sp, #4]
   57164:	cmp	r0, r6
   57168:	ldrhi	r0, [r7, #40]	; 0x28
   5716c:	ldrhi	r4, [r0, r6, lsl #2]
   57170:	strhi	r5, [r0, r6, lsl #2]
   57174:	mov	r0, r4
   57178:	sub	sp, fp, #16
   5717c:	pop	{r4, r5, r6, r7, fp, pc}

00057180 <Mat_VarCreateStruct>:
   57180:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   57184:	add	fp, sp, #28
   57188:	sub	sp, sp, #4
   5718c:	mov	r5, #0
   57190:	cmp	r2, #0
   57194:	beq	572d0 <Mat_VarCreateStruct+0x150>
   57198:	mov	r9, r3
   5719c:	mov	r6, r2
   571a0:	mov	sl, r1
   571a4:	mov	r7, r0
   571a8:	bl	18a0 <Mat_VarCalloc@plt>
   571ac:	cmp	r0, #0
   571b0:	beq	572d0 <Mat_VarCreateStruct+0x150>
   571b4:	mov	r4, r0
   571b8:	mov	r0, #0
   571bc:	cmp	r7, #0
   571c0:	str	r0, [r4, #48]	; 0x30
   571c4:	beq	571d4 <Mat_VarCreateStruct+0x54>
   571c8:	mov	r0, r7
   571cc:	bl	1864 <strdup@plt>
   571d0:	str	r0, [r4, #36]	; 0x24
   571d4:	ldr	r8, [fp, #8]
   571d8:	lsl	r0, sl, #2
   571dc:	str	sl, [r4, #4]
   571e0:	bl	18d0 <malloc@plt>
   571e4:	str	r0, [r4, #32]
   571e8:	mov	r7, #1
   571ec:	ldr	r1, [r4, #4]
   571f0:	cmp	r1, #1
   571f4:	blt	57218 <Mat_VarCreateStruct+0x98>
   571f8:	mov	r1, #0
   571fc:	ldr	r2, [r6, r1, lsl #2]
   57200:	str	r2, [r0, r1, lsl #2]
   57204:	mul	r7, r2, r7
   57208:	add	r1, r1, #1
   5720c:	ldr	r2, [r4, #4]
   57210:	cmp	r1, r2
   57214:	blt	571fc <Mat_VarCreateStruct+0x7c>
   57218:	mov	r0, #22
   5721c:	cmp	r8, #0
   57220:	mov	r1, #2
   57224:	mov	r2, #4
   57228:	str	r0, [r4, #8]
   5722c:	str	r2, [r4, #12]
   57230:	str	r1, [r4, #16]
   57234:	beq	572bc <Mat_VarCreateStruct+0x13c>
   57238:	ldr	r0, [r4, #52]	; 0x34
   5723c:	str	r8, [r0, #4]
   57240:	lsl	r0, r8, #2
   57244:	bl	18d0 <malloc@plt>
   57248:	ldr	r1, [r4, #52]	; 0x34
   5724c:	cmp	r0, #0
   57250:	str	r0, [r1, #8]
   57254:	beq	572c4 <Mat_VarCreateStruct+0x144>
   57258:	mov	r5, #0
   5725c:	ldr	r0, [r9, r5, lsl #2]
   57260:	cmp	r0, #0
   57264:	beq	572c4 <Mat_VarCreateStruct+0x144>
   57268:	bl	1864 <strdup@plt>
   5726c:	ldr	r1, [r4, #52]	; 0x34
   57270:	ldr	r1, [r1, #8]
   57274:	str	r0, [r1, r5, lsl #2]
   57278:	add	r5, r5, #1
   5727c:	cmp	r5, r8
   57280:	bcc	5725c <Mat_VarCreateStruct+0xdc>
   57284:	cmp	r7, #0
   57288:	beq	572bc <Mat_VarCreateStruct+0x13c>
   5728c:	mov	r0, sp
   57290:	mov	r1, r7
   57294:	mov	r2, r8
   57298:	bl	53884 <SafeMul>
   5729c:	ldr	r2, [r4, #12]
   572a0:	ldr	r1, [sp]
   572a4:	mov	r0, r4
   572a8:	bl	53884 <SafeMul>
   572ac:	ldr	r1, [r4, #12]
   572b0:	ldr	r0, [sp]
   572b4:	bl	1798 <calloc@plt>
   572b8:	str	r0, [r4, #40]	; 0x28
   572bc:	mov	r5, r4
   572c0:	b	572d0 <Mat_VarCreateStruct+0x150>
   572c4:	mov	r0, r4
   572c8:	bl	1918 <Mat_VarFree@plt>
   572cc:	mov	r5, #0
   572d0:	mov	r0, r5
   572d4:	sub	sp, fp, #28
   572d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000572dc <Mat_VarAddStructField>:
   572dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   572e0:	add	fp, sp, #28
   572e4:	sub	sp, sp, #20
   572e8:	mov	r9, r0
   572ec:	mov	r0, #1
   572f0:	mvn	r8, #0
   572f4:	cmp	r9, #0
   572f8:	str	r0, [sp, #16]
   572fc:	movne	r5, r1
   57300:	cmpne	r1, #0
   57304:	bne	57314 <Mat_VarAddStructField+0x38>
   57308:	mov	r0, r8
   5730c:	sub	sp, fp, #28
   57310:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   57314:	add	r1, sp, #16
   57318:	mov	r0, r9
   5731c:	bl	53824 <SafeMulDims>
   57320:	ldr	r1, [r9, #52]	; 0x34
   57324:	ldr	r6, [r1, #4]
   57328:	ldr	r0, [r1, #8]
   5732c:	add	r7, r6, #1
   57330:	str	r7, [r1, #4]
   57334:	lsl	r1, r7, #2
   57338:	bl	1870 <realloc@plt>
   5733c:	cmp	r0, #0
   57340:	beq	57308 <Mat_VarAddStructField+0x2c>
   57344:	ldr	r1, [r9, #52]	; 0x34
   57348:	str	r0, [r1, #8]
   5734c:	mov	r0, r5
   57350:	bl	1864 <strdup@plt>
   57354:	ldr	r1, [r9, #52]	; 0x34
   57358:	mov	r2, r7
   5735c:	ldr	r1, [r1, #8]
   57360:	str	r0, [r1, r6, lsl #2]
   57364:	add	r0, sp, #12
   57368:	ldr	r1, [sp, #16]
   5736c:	bl	53884 <SafeMul>
   57370:	ldr	r1, [sp, #12]
   57374:	mov	r0, r9
   57378:	mov	r2, #4
   5737c:	bl	53884 <SafeMul>
   57380:	ldr	r0, [r9]
   57384:	bl	18d0 <malloc@plt>
   57388:	cmp	r0, #0
   5738c:	beq	57490 <Mat_VarAddStructField+0x1b4>
   57390:	ldr	r8, [sp, #16]
   57394:	mov	r5, r0
   57398:	ldr	r0, [r9, #40]	; 0x28
   5739c:	cmp	r8, #0
   573a0:	str	r0, [sp, #8]
   573a4:	beq	5747c <Mat_VarAddStructField+0x1a0>
   573a8:	add	r0, r5, r6, lsl #2
   573ac:	lsl	sl, r6, #2
   573b0:	mov	r3, #0
   573b4:	mov	r4, #0
   573b8:	str	r0, [sp]
   573bc:	bic	r0, r6, #3
   573c0:	str	r0, [sp, #4]
   573c4:	ldr	r0, [sp, #8]
   573c8:	cmp	r6, #0
   573cc:	beq	57460 <Mat_VarAddStructField+0x184>
   573d0:	mov	r7, #0
   573d4:	cmp	r6, #4
   573d8:	bcs	573e4 <Mat_VarAddStructField+0x108>
   573dc:	mov	lr, r3
   573e0:	b	57444 <Mat_VarAddStructField+0x168>
   573e4:	ldr	r1, [sp, #8]
   573e8:	mla	r2, r6, r4, r6
   573ec:	add	ip, r5, r3, lsl #2
   573f0:	add	r2, r1, r2, lsl #2
   573f4:	cmp	ip, r2
   573f8:	bcs	5741c <Mat_VarAddStructField+0x140>
   573fc:	ldr	r1, [sp, #8]
   57400:	mul	r2, r6, r4
   57404:	mov	lr, r3
   57408:	add	r2, r1, r2, lsl #2
   5740c:	ldr	r1, [sp]
   57410:	add	r1, r1, r3, lsl #2
   57414:	cmp	r1, r2
   57418:	bhi	57444 <Mat_VarAddStructField+0x168>
   5741c:	ldr	r7, [sp, #4]
   57420:	mov	r2, r0
   57424:	add	lr, r3, r7
   57428:	vld1.32	{d16-d17}, [r2]!
   5742c:	subs	r7, r7, #4
   57430:	vst1.32	{d16-d17}, [ip]!
   57434:	bne	57428 <Mat_VarAddStructField+0x14c>
   57438:	ldr	r7, [sp, #4]
   5743c:	cmp	r6, r7
   57440:	beq	5745c <Mat_VarAddStructField+0x180>
   57444:	add	r2, r5, lr, lsl #2
   57448:	ldr	r1, [r0, r7, lsl #2]
   5744c:	add	r7, r7, #1
   57450:	cmp	r6, r7
   57454:	str	r1, [r2], #4
   57458:	bne	57448 <Mat_VarAddStructField+0x16c>
   5745c:	add	r3, r6, r3
   57460:	mov	r1, #0
   57464:	add	r4, r4, #1
   57468:	add	r0, r0, sl
   5746c:	str	r1, [r5, r3, lsl #2]
   57470:	add	r3, r3, #1
   57474:	cmp	r4, r8
   57478:	bcc	573c8 <Mat_VarAddStructField+0xec>
   5747c:	ldr	r0, [sp, #8]
   57480:	bl	1804 <free@plt>
   57484:	mov	r8, #0
   57488:	str	r5, [r9, #40]	; 0x28
   5748c:	b	57308 <Mat_VarAddStructField+0x2c>
   57490:	mov	r0, #0
   57494:	str	r0, [r9]
   57498:	b	57308 <Mat_VarAddStructField+0x2c>

0005749c <Mat_VarGetNumberOfFields>:
   5749c:	mov	r1, r0
   574a0:	mov	r0, #0
   574a4:	cmp	r1, #0
   574a8:	bxeq	lr
   574ac:	ldr	r2, [r1, #16]
   574b0:	cmp	r2, #2
   574b4:	bne	574c4 <Mat_VarGetNumberOfFields+0x28>
   574b8:	ldr	r1, [r1, #52]	; 0x34
   574bc:	cmp	r1, #0
   574c0:	ldrne	r0, [r1, #4]
   574c4:	bx	lr

000574c8 <Mat_VarGetStructFieldnames>:
   574c8:	mov	r1, r0
   574cc:	mov	r0, #0
   574d0:	cmp	r1, #0
   574d4:	bxeq	lr
   574d8:	ldr	r2, [r1, #16]
   574dc:	cmp	r2, #2
   574e0:	bne	574f0 <Mat_VarGetStructFieldnames+0x28>
   574e4:	ldr	r1, [r1, #52]	; 0x34
   574e8:	cmp	r1, #0
   574ec:	ldrne	r0, [r1, #8]
   574f0:	bx	lr

000574f4 <Mat_VarGetStructFieldByIndex>:
   574f4:	push	{r4, r5, r6, r7, fp, lr}
   574f8:	add	fp, sp, #16
   574fc:	sub	sp, sp, #8
   57500:	mov	r7, r0
   57504:	mov	r0, #1
   57508:	mov	r4, #0
   5750c:	cmp	r7, #0
   57510:	str	r0, [sp, #4]
   57514:	beq	5759c <Mat_VarGetStructFieldByIndex+0xa8>
   57518:	ldr	r0, [r7, #16]
   5751c:	cmp	r0, #2
   57520:	bne	5759c <Mat_VarGetStructFieldByIndex+0xa8>
   57524:	ldr	r0, [r7, #12]
   57528:	cmp	r0, #0
   5752c:	beq	5759c <Mat_VarGetStructFieldByIndex+0xa8>
   57530:	mov	r5, r1
   57534:	add	r1, sp, #4
   57538:	mov	r0, r7
   5753c:	mov	r6, r2
   57540:	bl	53824 <SafeMulDims>
   57544:	ldr	r0, [sp, #4]
   57548:	sub	r0, r0, #1
   5754c:	cmp	r0, r6
   57550:	bcs	57564 <Mat_VarGetStructFieldByIndex+0x70>
   57554:	ldr	r0, [pc, #76]	; 575a8 <Mat_VarGetStructFieldByIndex+0xb4>
   57558:	add	r0, pc, r0
   5755c:	bl	19b4 <Mat_Critical@plt>
   57560:	b	5759c <Mat_VarGetStructFieldByIndex+0xa8>
   57564:	ldr	r0, [r7, #52]	; 0x34
   57568:	ldr	r0, [r0, #4]
   5756c:	cmp	r0, #0
   57570:	beq	5759c <Mat_VarGetStructFieldByIndex+0xa8>
   57574:	cmp	r0, r5
   57578:	bcs	5758c <Mat_VarGetStructFieldByIndex+0x98>
   5757c:	ldr	r0, [pc, #40]	; 575ac <Mat_VarGetStructFieldByIndex+0xb8>
   57580:	add	r0, pc, r0
   57584:	bl	19b4 <Mat_Critical@plt>
   57588:	b	5759c <Mat_VarGetStructFieldByIndex+0xa8>
   5758c:	ldr	r1, [r7, #40]	; 0x28
   57590:	mul	r0, r0, r6
   57594:	add	r0, r1, r0, lsl #2
   57598:	ldr	r4, [r0, r5, lsl #2]
   5759c:	mov	r0, r4
   575a0:	sub	sp, fp, #16
   575a4:	pop	{r4, r5, r6, r7, fp, pc}
   575a8:	.word	0x000021e0
   575ac:	.word	0x000021ed

000575b0 <Mat_VarGetStructFieldByName>:
   575b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   575b4:	add	fp, sp, #28
   575b8:	sub	sp, sp, #4
   575bc:	mov	r6, r0
   575c0:	mov	r0, #1
   575c4:	mov	sl, #0
   575c8:	cmp	r6, #0
   575cc:	str	r0, [sp]
   575d0:	beq	57670 <Mat_VarGetStructFieldByName+0xc0>
   575d4:	ldr	r0, [r6, #16]
   575d8:	cmp	r0, #2
   575dc:	bne	57670 <Mat_VarGetStructFieldByName+0xc0>
   575e0:	ldr	r0, [r6, #12]
   575e4:	cmp	r0, #0
   575e8:	beq	57670 <Mat_VarGetStructFieldByName+0xc0>
   575ec:	mov	r7, r1
   575f0:	mov	r1, sp
   575f4:	mov	r0, r6
   575f8:	mov	r9, r2
   575fc:	bl	53824 <SafeMulDims>
   57600:	ldr	r0, [r6, #52]	; 0x34
   57604:	mvn	r4, #0
   57608:	ldr	r5, [r0, #4]
   5760c:	cmp	r5, #1
   57610:	blt	57640 <Mat_VarGetStructFieldByName+0x90>
   57614:	ldr	r8, [r0, #8]
   57618:	mov	r4, #0
   5761c:	ldr	r0, [r8, r4, lsl #2]
   57620:	mov	r1, r7
   57624:	bl	17b0 <strcmp@plt>
   57628:	cmp	r0, #0
   5762c:	beq	57640 <Mat_VarGetStructFieldByName+0x90>
   57630:	add	r4, r4, #1
   57634:	cmp	r4, r5
   57638:	blt	5761c <Mat_VarGetStructFieldByName+0x6c>
   5763c:	mvn	r4, #0
   57640:	ldr	r0, [sp]
   57644:	cmp	r0, r9
   57648:	bls	57664 <Mat_VarGetStructFieldByName+0xb4>
   5764c:	cmp	r4, #0
   57650:	ldrge	r1, [r6, #40]	; 0x28
   57654:	mulge	r0, r5, r9
   57658:	addge	r0, r1, r0, lsl #2
   5765c:	ldrge	sl, [r0, r4, lsl #2]
   57660:	b	57670 <Mat_VarGetStructFieldByName+0xc0>
   57664:	ldr	r0, [pc, #16]	; 5767c <Mat_VarGetStructFieldByName+0xcc>
   57668:	add	r0, pc, r0
   5766c:	bl	19b4 <Mat_Critical@plt>
   57670:	mov	r0, sl
   57674:	sub	sp, fp, #28
   57678:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5767c:	.word	0x000020d0

00057680 <Mat_VarGetStructField>:
   57680:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   57684:	add	fp, sp, #28
   57688:	sub	sp, sp, #12
   5768c:	mov	r6, r0
   57690:	mov	r0, #1
   57694:	mov	r7, r1
   57698:	mov	r1, sp
   5769c:	mov	r5, r3
   576a0:	mov	r4, r2
   576a4:	str	r0, [sp]
   576a8:	mov	r0, r6
   576ac:	bl	53824 <SafeMulDims>
   576b0:	mov	r8, #0
   576b4:	cmp	r5, #0
   576b8:	blt	576cc <Mat_VarGetStructField+0x4c>
   576bc:	ldr	r0, [sp]
   576c0:	sub	r0, r0, #1
   576c4:	cmp	r0, r5
   576c8:	bcs	576d8 <Mat_VarGetStructField+0x58>
   576cc:	mov	r0, r8
   576d0:	sub	sp, fp, #28
   576d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   576d8:	ldr	r0, [r6, #52]	; 0x34
   576dc:	cmp	r4, #2
   576e0:	ldr	r0, [r0, #4]
   576e4:	bne	57768 <Mat_VarGetStructField+0xe8>
   576e8:	cmp	r0, #1
   576ec:	blt	57768 <Mat_VarGetStructField+0xe8>
   576f0:	ldr	r4, [r7]
   576f4:	cmp	r4, #0
   576f8:	beq	576cc <Mat_VarGetStructField+0x4c>
   576fc:	mov	r0, #1
   57700:	mov	r8, #0
   57704:	str	r0, [sp, #4]
   57708:	ldr	r0, [r6, #16]
   5770c:	cmp	r0, #2
   57710:	bne	576cc <Mat_VarGetStructField+0x4c>
   57714:	ldr	r0, [r6, #12]
   57718:	cmp	r0, #0
   5771c:	beq	576cc <Mat_VarGetStructField+0x4c>
   57720:	add	r1, sp, #4
   57724:	mov	r0, r6
   57728:	bl	53824 <SafeMulDims>
   5772c:	ldr	r0, [sp, #4]
   57730:	sub	r0, r0, #1
   57734:	cmp	r0, r5
   57738:	bcc	5780c <Mat_VarGetStructField+0x18c>
   5773c:	ldr	r0, [r6, #52]	; 0x34
   57740:	ldr	r0, [r0, #4]
   57744:	cmp	r0, #0
   57748:	beq	576cc <Mat_VarGetStructField+0x4c>
   5774c:	sub	r1, r4, #1
   57750:	cmp	r0, r1
   57754:	bcs	5781c <Mat_VarGetStructField+0x19c>
   57758:	ldr	r0, [pc, #212]	; 57834 <Mat_VarGetStructField+0x1b4>
   5775c:	add	r0, pc, r0
   57760:	bl	19b4 <Mat_Critical@plt>
   57764:	b	576cc <Mat_VarGetStructField+0x4c>
   57768:	cmp	r4, #1
   5776c:	bne	576cc <Mat_VarGetStructField+0x4c>
   57770:	cmp	r0, #1
   57774:	blt	576cc <Mat_VarGetStructField+0x4c>
   57778:	mov	r0, #1
   5777c:	mov	r8, #0
   57780:	str	r0, [sp, #8]
   57784:	ldr	r0, [r6, #16]
   57788:	cmp	r0, #2
   5778c:	bne	576cc <Mat_VarGetStructField+0x4c>
   57790:	ldr	r0, [r6, #12]
   57794:	cmp	r0, #0
   57798:	beq	576cc <Mat_VarGetStructField+0x4c>
   5779c:	add	r1, sp, #8
   577a0:	mov	r0, r6
   577a4:	bl	53824 <SafeMulDims>
   577a8:	ldr	r0, [r6, #52]	; 0x34
   577ac:	mvn	r4, #0
   577b0:	ldr	sl, [r0, #4]
   577b4:	cmp	sl, #1
   577b8:	blt	577e8 <Mat_VarGetStructField+0x168>
   577bc:	ldr	r9, [r0, #8]
   577c0:	mov	r4, #0
   577c4:	ldr	r0, [r9, r4, lsl #2]
   577c8:	mov	r1, r7
   577cc:	bl	17b0 <strcmp@plt>
   577d0:	cmp	r0, #0
   577d4:	beq	577e8 <Mat_VarGetStructField+0x168>
   577d8:	add	r4, r4, #1
   577dc:	cmp	r4, sl
   577e0:	blt	577c4 <Mat_VarGetStructField+0x144>
   577e4:	mvn	r4, #0
   577e8:	ldr	r0, [sp, #8]
   577ec:	cmp	r0, r5
   577f0:	bls	5780c <Mat_VarGetStructField+0x18c>
   577f4:	cmp	r4, #0
   577f8:	ldrge	r1, [r6, #40]	; 0x28
   577fc:	mulge	r0, sl, r5
   57800:	addge	r0, r1, r0, lsl #2
   57804:	ldrge	r8, [r0, r4, lsl #2]
   57808:	b	576cc <Mat_VarGetStructField+0x4c>
   5780c:	ldr	r0, [pc, #28]	; 57830 <Mat_VarGetStructField+0x1b0>
   57810:	add	r0, pc, r0
   57814:	bl	19b4 <Mat_Critical@plt>
   57818:	b	576cc <Mat_VarGetStructField+0x4c>
   5781c:	ldr	r2, [r6, #40]	; 0x28
   57820:	mul	r0, r0, r5
   57824:	add	r0, r2, r0, lsl #2
   57828:	ldr	r8, [r0, r1, lsl #2]
   5782c:	b	576cc <Mat_VarGetStructField+0x4c>
   57830:	.word	0x00001f28
   57834:	.word	0x00002011

00057838 <Mat_VarGetStructs>:
   57838:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5783c:	add	fp, sp, #28
   57840:	sub	sp, sp, #172	; 0xac
   57844:	sub	r6, fp, #72	; 0x48
   57848:	mov	r7, r0
   5784c:	mov	r9, r1
   57850:	vmov.i32	q8, #0	; 0x00000000
   57854:	mov	r0, #36	; 0x24
   57858:	mov	r4, #0
   5785c:	str	r2, [sp, #44]	; 0x2c
   57860:	add	r2, sp, #88	; 0x58
   57864:	str	r3, [sp, #32]
   57868:	mov	r1, r6
   5786c:	cmp	r7, #0
   57870:	str	r4, [fp, #-40]	; 0xffffffd8
   57874:	str	r4, [sp, #120]	; 0x78
   57878:	str	r4, [sp, #80]	; 0x50
   5787c:	vst1.64	{d16-d17}, [r1], r0
   57880:	cmpne	r9, #0
   57884:	str	r4, [r1]
   57888:	add	r1, r6, #16
   5788c:	vst1.64	{d16-d17}, [r1]
   57890:	add	r1, r2, #16
   57894:	vst1.64	{d16-d17}, [r1]
   57898:	mov	r1, r2
   5789c:	add	r2, sp, #48	; 0x30
   578a0:	vst1.64	{d16-d17}, [r1], r0
   578a4:	str	r4, [r1]
   578a8:	add	r1, r2, #16
   578ac:	vst1.64	{d16-d17}, [r1]
   578b0:	mov	r1, r2
   578b4:	vst1.64	{d16-d17}, [r1], r0
   578b8:	str	r4, [r1]
   578bc:	beq	578d4 <Mat_VarGetStructs+0x9c>
   578c0:	ldr	r0, [sp, #44]	; 0x2c
   578c4:	cmp	r0, #0
   578c8:	ldrne	r0, [sp, #32]
   578cc:	cmpne	r0, #0
   578d0:	bne	578e0 <Mat_VarGetStructs+0xa8>
   578d4:	mov	r0, r4
   578d8:	sub	sp, fp, #28
   578dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   578e0:	ldr	r0, [r7, #4]
   578e4:	cmp	r0, #9
   578e8:	bgt	578d4 <Mat_VarGetStructs+0x9c>
   578ec:	ldr	r0, [r7, #16]
   578f0:	cmp	r0, #2
   578f4:	bne	578d4 <Mat_VarGetStructs+0x9c>
   578f8:	ldr	r4, [fp, #8]
   578fc:	mov	r0, r7
   57900:	mov	r1, #0
   57904:	bl	1a44 <Mat_VarDuplicate@plt>
   57908:	cmp	r4, #0
   5790c:	str	r0, [sp]
   57910:	moveq	r1, #1
   57914:	streq	r1, [r0, #44]	; 0x2c
   57918:	ldr	ip, [r7, #32]
   5791c:	ldr	r1, [r7, #52]	; 0x34
   57920:	ldr	r2, [ip]
   57924:	ldr	r1, [r1, #4]
   57928:	str	r2, [sp, #48]	; 0x30
   5792c:	str	r1, [sp, #28]
   57930:	ldr	lr, [r0, #32]
   57934:	ldr	r0, [sp, #32]
   57938:	ldr	r8, [r9]
   5793c:	ldr	sl, [r0]
   57940:	str	sl, [lr]
   57944:	ldr	r3, [r9]
   57948:	str	r3, [fp, #-72]	; 0xffffffb8
   5794c:	ldr	r3, [r7, #4]
   57950:	cmp	r3, #2
   57954:	blt	5799c <Mat_VarGetStructs+0x164>
   57958:	ldr	r1, [sp, #32]
   5795c:	mov	r3, #1
   57960:	ldr	r5, [r9, r3, lsl #2]
   57964:	add	r0, sp, #48	; 0x30
   57968:	str	r5, [r6, r3, lsl #2]
   5796c:	mla	r8, r2, r5, r8
   57970:	ldr	r4, [ip, r3, lsl #2]
   57974:	mul	r4, r4, r2
   57978:	str	r4, [r0, r3, lsl #2]
   5797c:	mov	r2, r4
   57980:	ldr	r0, [r1, r3, lsl #2]
   57984:	str	r0, [lr, r3, lsl #2]
   57988:	mul	sl, r0, sl
   5798c:	add	r3, r3, #1
   57990:	ldr	r0, [r7, #4]
   57994:	cmp	r3, r0
   57998:	blt	57960 <Mat_VarGetStructs+0x128>
   5799c:	ldr	r0, [sp, #28]
   579a0:	ldr	r4, [sp]
   579a4:	mul	r0, r0, sl
   579a8:	lsl	r0, r0, #2
   579ac:	str	r0, [r4]
   579b0:	bl	18d0 <malloc@plt>
   579b4:	cmp	r0, #0
   579b8:	str	r0, [r4, #40]	; 0x28
   579bc:	mov	r1, r0
   579c0:	str	r0, [sp, #4]
   579c4:	beq	57ba8 <Mat_VarGetStructs+0x370>
   579c8:	cmp	sl, #0
   579cc:	beq	578d4 <Mat_VarGetStructs+0x9c>
   579d0:	ldr	r0, [sp, #44]	; 0x2c
   579d4:	ldr	r1, [sp, #32]
   579d8:	ldr	r4, [sp, #28]
   579dc:	str	r9, [sp, #12]
   579e0:	str	sl, [sp, #8]
   579e4:	add	r0, r0, #8
   579e8:	mov	r2, r1
   579ec:	str	r0, [sp, #20]
   579f0:	add	r0, r9, #4
   579f4:	str	r0, [sp, #24]
   579f8:	lsl	r0, r4, #2
   579fc:	str	r0, [sp, #40]	; 0x28
   57a00:	ldr	r0, [r2], #4
   57a04:	str	r2, [sp, #36]	; 0x24
   57a08:	mov	r2, #0
   57a0c:	str	r2, [sp, #16]
   57a10:	cmp	r0, #1
   57a14:	blt	57aa0 <Mat_VarGetStructs+0x268>
   57a18:	ldr	r0, [sp, #4]
   57a1c:	ldr	r2, [sp, #40]	; 0x28
   57a20:	ldr	r3, [sp, #16]
   57a24:	mul	sl, r8, r4
   57a28:	mov	r5, #0
   57a2c:	mla	r9, r2, r3, r0
   57a30:	cmp	r4, #0
   57a34:	beq	57a78 <Mat_VarGetStructs+0x240>
   57a38:	mov	r8, r9
   57a3c:	mov	r6, sl
   57a40:	ldr	r0, [r7, #40]	; 0x28
   57a44:	ldr	r1, [fp, #8]
   57a48:	ldr	r0, [r0, r6, lsl #2]
   57a4c:	cmp	r1, #0
   57a50:	beq	57a5c <Mat_VarGetStructs+0x224>
   57a54:	mov	r1, #1
   57a58:	bl	1a44 <Mat_VarDuplicate@plt>
   57a5c:	str	r0, [r8], #4
   57a60:	subs	r4, r4, #1
   57a64:	add	r6, r6, #1
   57a68:	bne	57a40 <Mat_VarGetStructs+0x208>
   57a6c:	ldr	r4, [sp, #28]
   57a70:	ldr	r1, [sp, #32]
   57a74:	add	sl, r4, sl
   57a78:	ldr	r0, [sp, #44]	; 0x2c
   57a7c:	add	r5, r5, #1
   57a80:	ldr	r0, [r0]
   57a84:	sub	r0, r0, #1
   57a88:	mla	sl, r0, r4, sl
   57a8c:	ldr	r0, [sp, #40]	; 0x28
   57a90:	add	r9, r9, r0
   57a94:	ldr	r0, [r1]
   57a98:	cmp	r5, r0
   57a9c:	blt	57a30 <Mat_VarGetStructs+0x1f8>
   57aa0:	ldr	r9, [sp, #12]
   57aa4:	ldr	r1, [sp, #92]	; 0x5c
   57aa8:	ldr	r8, [r9]
   57aac:	add	r4, r1, #1
   57ab0:	ldr	r1, [sp, #44]	; 0x2c
   57ab4:	str	r4, [sp, #92]	; 0x5c
   57ab8:	str	r8, [fp, #-72]	; 0xffffffb8
   57abc:	ldr	r1, [r1, #4]
   57ac0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   57ac4:	add	r1, r2, r1
   57ac8:	str	r1, [fp, #-68]	; 0xffffffbc
   57acc:	ldr	lr, [r7, #4]
   57ad0:	cmp	lr, #2
   57ad4:	blt	57b78 <Mat_VarGetStructs+0x340>
   57ad8:	sub	ip, lr, #1
   57adc:	mov	r3, #0
   57ae0:	sub	sl, fp, #72	; 0x48
   57ae4:	add	r2, sp, #88	; 0x58
   57ae8:	b	57af8 <Mat_VarGetStructs+0x2c0>
   57aec:	add	r1, r2, r3, lsl #2
   57af0:	mov	r3, r5
   57af4:	ldr	r4, [r1, #8]
   57af8:	ldr	r1, [sp, #36]	; 0x24
   57afc:	add	r5, r3, #1
   57b00:	ldr	r1, [r1, r3, lsl #2]
   57b04:	cmp	r4, r1
   57b08:	bne	57b58 <Mat_VarGetStructs+0x320>
   57b0c:	add	r1, r2, r3, lsl #2
   57b10:	mov	r2, #0
   57b14:	cmp	r5, ip
   57b18:	str	r2, [r1, #4]
   57b1c:	ldr	r2, [sp, #24]
   57b20:	ldr	r4, [r2, r3, lsl #2]
   57b24:	add	r2, sl, r3, lsl #2
   57b28:	str	r4, [r2, #4]
   57b2c:	bge	57b50 <Mat_VarGetStructs+0x318>
   57b30:	ldr	r6, [r1, #8]
   57b34:	add	r6, r6, #1
   57b38:	str	r6, [r1, #8]
   57b3c:	ldr	r1, [sp, #20]
   57b40:	ldr	r6, [r2, #8]
   57b44:	ldr	r1, [r1, r3, lsl #2]
   57b48:	add	r1, r6, r1
   57b4c:	str	r1, [r2, #8]
   57b50:	add	r2, sp, #88	; 0x58
   57b54:	b	57b60 <Mat_VarGetStructs+0x328>
   57b58:	add	r1, sl, r3, lsl #2
   57b5c:	ldr	r4, [r1, #4]
   57b60:	add	r1, sp, #48	; 0x30
   57b64:	ldr	r1, [r1, r3, lsl #2]
   57b68:	mla	r8, r1, r4, r8
   57b6c:	add	r1, r3, #2
   57b70:	cmp	r1, lr
   57b74:	blt	57aec <Mat_VarGetStructs+0x2b4>
   57b78:	ldr	r1, [sp, #16]
   57b7c:	ldr	sl, [sp, #8]
   57b80:	ldr	r4, [sp, #28]
   57b84:	mov	r2, r1
   57b88:	add	r2, r0, r1
   57b8c:	mov	r1, r2
   57b90:	cmp	r2, sl
   57b94:	str	r2, [sp, #16]
   57b98:	ldr	r1, [sp, #32]
   57b9c:	bcc	57a10 <Mat_VarGetStructs+0x1d8>
   57ba0:	ldr	r4, [sp]
   57ba4:	b	578d4 <Mat_VarGetStructs+0x9c>
   57ba8:	mov	r0, r4
   57bac:	bl	1918 <Mat_VarFree@plt>
   57bb0:	mov	r4, #0
   57bb4:	b	578d4 <Mat_VarGetStructs+0x9c>

00057bb8 <Mat_VarGetStructsLinear>:
   57bb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   57bbc:	add	fp, sp, #28
   57bc0:	sub	sp, sp, #28
   57bc4:	mov	r4, #0
   57bc8:	cmp	r0, #0
   57bcc:	str	r3, [sp, #24]
   57bd0:	beq	57da4 <Mat_VarGetStructsLinear+0x1ec>
   57bd4:	mov	r6, r0
   57bd8:	ldr	r0, [r0, #4]
   57bdc:	cmp	r0, #10
   57be0:	bgt	57da4 <Mat_VarGetStructsLinear+0x1ec>
   57be4:	ldr	r5, [fp, #8]
   57be8:	mov	r7, r1
   57bec:	mov	r0, r6
   57bf0:	mov	r1, #0
   57bf4:	mov	r9, r2
   57bf8:	bl	1a44 <Mat_VarDuplicate@plt>
   57bfc:	cmp	r5, #0
   57c00:	mov	r4, r0
   57c04:	ldr	r5, [sp, #24]
   57c08:	moveq	r0, #1
   57c0c:	streq	r0, [r4, #44]	; 0x2c
   57c10:	ldr	r0, [r6, #52]	; 0x34
   57c14:	ldr	r8, [r0, #4]
   57c18:	mul	r0, r5, r8
   57c1c:	lsl	r0, r0, #2
   57c20:	str	r0, [r4]
   57c24:	bl	18d0 <malloc@plt>
   57c28:	cmp	r0, #0
   57c2c:	str	r0, [r4, #40]	; 0x28
   57c30:	mov	r1, r0
   57c34:	str	r0, [sp, #12]
   57c38:	beq	57d98 <Mat_VarGetStructsLinear+0x1e0>
   57c3c:	ldr	r0, [r4, #32]
   57c40:	cmp	r5, #1
   57c44:	mov	r1, #1
   57c48:	str	r5, [r0]
   57c4c:	str	r1, [r0, #4]
   57c50:	blt	57da4 <Mat_VarGetStructsLinear+0x1ec>
   57c54:	ldr	sl, [sp, #12]
   57c58:	ldr	ip, [fp, #8]
   57c5c:	sub	r0, r9, #1
   57c60:	str	r4, [sp, #4]
   57c64:	lsl	r9, r8, #2
   57c68:	mul	r7, r8, r7
   57c6c:	mov	r4, #0
   57c70:	mul	lr, r8, r0
   57c74:	bic	r0, r8, #3
   57c78:	str	r9, [sp, #16]
   57c7c:	str	r0, [sp, #8]
   57c80:	cmp	ip, #0
   57c84:	beq	57cd8 <Mat_VarGetStructsLinear+0x120>
   57c88:	cmp	r8, #1
   57c8c:	blt	57d78 <Mat_VarGetStructsLinear+0x1c0>
   57c90:	str	r4, [sp, #20]
   57c94:	mov	r4, lr
   57c98:	lsl	r5, r7, #2
   57c9c:	mov	r9, #0
   57ca0:	ldr	r0, [r6, #40]	; 0x28
   57ca4:	mov	r1, #1
   57ca8:	add	r0, r0, r5
   57cac:	ldr	r0, [r0, r9, lsl #2]
   57cb0:	bl	1a44 <Mat_VarDuplicate@plt>
   57cb4:	str	r0, [sl, r9, lsl #2]
   57cb8:	add	r9, r9, #1
   57cbc:	cmp	r8, r9
   57cc0:	bne	57ca0 <Mat_VarGetStructsLinear+0xe8>
   57cc4:	mov	lr, r4
   57cc8:	ldr	ip, [fp, #8]
   57ccc:	ldr	r9, [sp, #16]
   57cd0:	ldr	r4, [sp, #20]
   57cd4:	b	57d74 <Mat_VarGetStructsLinear+0x1bc>
   57cd8:	cmp	r8, #1
   57cdc:	blt	57d78 <Mat_VarGetStructsLinear+0x1c0>
   57ce0:	ldr	r0, [r6, #40]	; 0x28
   57ce4:	mov	r1, #0
   57ce8:	cmp	r8, #3
   57cec:	bhi	57cf8 <Mat_VarGetStructsLinear+0x140>
   57cf0:	mov	r3, r7
   57cf4:	b	57d5c <Mat_VarGetStructsLinear+0x1a4>
   57cf8:	ldr	r2, [sp, #12]
   57cfc:	add	r5, r0, r8, lsl #2
   57d00:	add	r5, r5, r7, lsl #2
   57d04:	mla	r3, r9, r4, r2
   57d08:	add	r2, r0, r7, lsl #2
   57d0c:	cmp	r3, r5
   57d10:	bcs	57d2c <Mat_VarGetStructsLinear+0x174>
   57d14:	ldr	r5, [sp, #12]
   57d18:	mla	r3, r9, r4, r9
   57d1c:	add	r3, r5, r3
   57d20:	cmp	r3, r2
   57d24:	mov	r3, r7
   57d28:	bhi	57d5c <Mat_VarGetStructsLinear+0x1a4>
   57d2c:	ldr	r1, [sp, #8]
   57d30:	mov	r5, r4
   57d34:	mov	r4, sl
   57d38:	add	r3, r7, r1
   57d3c:	vld1.32	{d16-d17}, [r2]!
   57d40:	subs	r1, r1, #4
   57d44:	vst1.32	{d16-d17}, [r4]!
   57d48:	bne	57d3c <Mat_VarGetStructsLinear+0x184>
   57d4c:	ldr	r1, [sp, #8]
   57d50:	mov	r4, r5
   57d54:	cmp	r8, r1
   57d58:	beq	57d74 <Mat_VarGetStructsLinear+0x1bc>
   57d5c:	add	r0, r0, r3, lsl #2
   57d60:	ldr	r2, [r0], #4
   57d64:	str	r2, [sl, r1, lsl #2]
   57d68:	add	r1, r1, #1
   57d6c:	cmp	r8, r1
   57d70:	bne	57d60 <Mat_VarGetStructsLinear+0x1a8>
   57d74:	add	r7, r8, r7
   57d78:	ldr	r0, [sp, #24]
   57d7c:	add	r4, r4, #1
   57d80:	add	sl, sl, r9
   57d84:	add	r7, r7, lr
   57d88:	cmp	r4, r0
   57d8c:	bne	57c80 <Mat_VarGetStructsLinear+0xc8>
   57d90:	ldr	r4, [sp, #4]
   57d94:	b	57da4 <Mat_VarGetStructsLinear+0x1ec>
   57d98:	mov	r0, r4
   57d9c:	bl	1918 <Mat_VarFree@plt>
   57da0:	mov	r4, #0
   57da4:	mov	r0, r4
   57da8:	sub	sp, fp, #28
   57dac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00057db0 <Mat_VarSetStructFieldByIndex>:
   57db0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   57db4:	add	fp, sp, #24
   57db8:	sub	sp, sp, #8
   57dbc:	mov	r7, r0
   57dc0:	mov	r0, #1
   57dc4:	mov	r4, #0
   57dc8:	cmp	r7, #0
   57dcc:	str	r0, [sp, #4]
   57dd0:	beq	57e50 <Mat_VarSetStructFieldByIndex+0xa0>
   57dd4:	ldr	r0, [r7, #16]
   57dd8:	cmp	r0, #2
   57ddc:	bne	57e50 <Mat_VarSetStructFieldByIndex+0xa0>
   57de0:	ldr	r0, [r7, #40]	; 0x28
   57de4:	cmp	r0, #0
   57de8:	beq	57e50 <Mat_VarSetStructFieldByIndex+0xa0>
   57dec:	mov	r6, r1
   57df0:	add	r1, sp, #4
   57df4:	mov	r0, r7
   57df8:	mov	r8, r3
   57dfc:	mov	r5, r2
   57e00:	bl	53824 <SafeMulDims>
   57e04:	ldr	r0, [r7, #52]	; 0x34
   57e08:	ldr	r0, [r0, #4]
   57e0c:	cmp	r0, r6
   57e10:	ldrhi	r1, [sp, #4]
   57e14:	cmphi	r1, r5
   57e18:	bls	57e50 <Mat_VarSetStructFieldByIndex+0xa0>
   57e1c:	ldr	r1, [r7, #40]	; 0x28
   57e20:	mla	r0, r0, r5, r6
   57e24:	ldr	r4, [r1, r0, lsl #2]
   57e28:	str	r8, [r1, r0, lsl #2]
   57e2c:	ldr	r0, [r8, #36]	; 0x24
   57e30:	cmp	r0, #0
   57e34:	beq	57e3c <Mat_VarSetStructFieldByIndex+0x8c>
   57e38:	bl	1804 <free@plt>
   57e3c:	ldr	r0, [r7, #52]	; 0x34
   57e40:	ldr	r0, [r0, #8]
   57e44:	ldr	r0, [r0, r6, lsl #2]
   57e48:	bl	1864 <strdup@plt>
   57e4c:	str	r0, [r8, #36]	; 0x24
   57e50:	mov	r0, r4
   57e54:	sub	sp, fp, #24
   57e58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00057e5c <Mat_VarSetStructFieldByName>:
   57e5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   57e60:	add	fp, sp, #28
   57e64:	sub	sp, sp, #12
   57e68:	mov	r8, r0
   57e6c:	mov	r0, #1
   57e70:	mov	sl, #0
   57e74:	cmp	r8, #0
   57e78:	str	r0, [sp, #8]
   57e7c:	beq	57f40 <Mat_VarSetStructFieldByName+0xe4>
   57e80:	ldr	r0, [r8, #16]
   57e84:	cmp	r0, #2
   57e88:	bne	57f40 <Mat_VarSetStructFieldByName+0xe4>
   57e8c:	ldr	r0, [r8, #40]	; 0x28
   57e90:	cmp	r0, #0
   57e94:	beq	57f40 <Mat_VarSetStructFieldByName+0xe4>
   57e98:	mov	r4, r1
   57e9c:	add	r1, sp, #8
   57ea0:	mov	r0, r8
   57ea4:	mov	r5, r3
   57ea8:	mov	r9, r2
   57eac:	bl	53824 <SafeMulDims>
   57eb0:	ldr	r0, [r8, #52]	; 0x34
   57eb4:	ldr	r6, [r0, #4]
   57eb8:	cmp	r6, #1
   57ebc:	blt	57f40 <Mat_VarSetStructFieldByName+0xe4>
   57ec0:	str	r5, [sp, #4]
   57ec4:	ldr	r5, [r0, #8]
   57ec8:	mov	r7, #0
   57ecc:	ldr	r0, [r5, r7, lsl #2]
   57ed0:	mov	r1, r4
   57ed4:	bl	17b0 <strcmp@plt>
   57ed8:	cmp	r0, #0
   57edc:	beq	57ef4 <Mat_VarSetStructFieldByName+0x98>
   57ee0:	add	r7, r7, #1
   57ee4:	cmp	r7, r6
   57ee8:	blt	57ecc <Mat_VarSetStructFieldByName+0x70>
   57eec:	mov	sl, #0
   57ef0:	b	57f40 <Mat_VarSetStructFieldByName+0xe4>
   57ef4:	ldr	r0, [sp, #8]
   57ef8:	ldr	r4, [sp, #4]
   57efc:	mov	sl, #0
   57f00:	cmp	r0, r9
   57f04:	bls	57f40 <Mat_VarSetStructFieldByName+0xe4>
   57f08:	ldr	r1, [r8, #40]	; 0x28
   57f0c:	mul	r0, r6, r9
   57f10:	add	r0, r1, r0, lsl #2
   57f14:	ldr	sl, [r0, r7, lsl #2]
   57f18:	str	r4, [r0, r7, lsl #2]
   57f1c:	ldr	r0, [r4, #36]	; 0x24
   57f20:	cmp	r0, #0
   57f24:	beq	57f2c <Mat_VarSetStructFieldByName+0xd0>
   57f28:	bl	1804 <free@plt>
   57f2c:	ldr	r0, [r8, #52]	; 0x34
   57f30:	ldr	r0, [r0, #8]
   57f34:	ldr	r0, [r0, r7, lsl #2]
   57f38:	bl	1864 <strdup@plt>
   57f3c:	str	r0, [r4, #36]	; 0x24
   57f40:	mov	r0, sl
   57f44:	sub	sp, fp, #28
   57f48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00057f4c <__aeabi_drsub>:
   57f4c:	eor	r1, r1, #-2147483648	; 0x80000000
   57f50:	b	57f58 <__adddf3>

00057f54 <__aeabi_dsub>:
   57f54:	eor	r3, r3, #-2147483648	; 0x80000000

00057f58 <__adddf3>:
   57f58:	push	{r4, r5, lr}
   57f5c:	lsl	r4, r1, #1
   57f60:	lsl	r5, r3, #1
   57f64:	teq	r4, r5
   57f68:	teqeq	r0, r2
   57f6c:	orrsne	ip, r4, r0
   57f70:	orrsne	ip, r5, r2
   57f74:	mvnsne	ip, r4, asr #21
   57f78:	mvnsne	ip, r5, asr #21
   57f7c:	beq	58168 <__adddf3+0x210>
   57f80:	lsr	r4, r4, #21
   57f84:	rsbs	r5, r4, r5, lsr #21
   57f88:	rsblt	r5, r5, #0
   57f8c:	ble	57fac <__adddf3+0x54>
   57f90:	add	r4, r4, r5
   57f94:	eor	r2, r0, r2
   57f98:	eor	r3, r1, r3
   57f9c:	eor	r0, r2, r0
   57fa0:	eor	r1, r3, r1
   57fa4:	eor	r2, r0, r2
   57fa8:	eor	r3, r1, r3
   57fac:	cmp	r5, #54	; 0x36
   57fb0:	pophi	{r4, r5, pc}
   57fb4:	tst	r1, #-2147483648	; 0x80000000
   57fb8:	lsl	r1, r1, #12
   57fbc:	mov	ip, #1048576	; 0x100000
   57fc0:	orr	r1, ip, r1, lsr #12
   57fc4:	beq	57fd0 <__adddf3+0x78>
   57fc8:	rsbs	r0, r0, #0
   57fcc:	rsc	r1, r1, #0
   57fd0:	tst	r3, #-2147483648	; 0x80000000
   57fd4:	lsl	r3, r3, #12
   57fd8:	orr	r3, ip, r3, lsr #12
   57fdc:	beq	57fe8 <__adddf3+0x90>
   57fe0:	rsbs	r2, r2, #0
   57fe4:	rsc	r3, r3, #0
   57fe8:	teq	r4, r5
   57fec:	beq	58150 <__adddf3+0x1f8>
   57ff0:	sub	r4, r4, #1
   57ff4:	rsbs	lr, r5, #32
   57ff8:	blt	58014 <__adddf3+0xbc>
   57ffc:	lsl	ip, r2, lr
   58000:	adds	r0, r0, r2, lsr r5
   58004:	adc	r1, r1, #0
   58008:	adds	r0, r0, r3, lsl lr
   5800c:	adcs	r1, r1, r3, asr r5
   58010:	b	58030 <__adddf3+0xd8>
   58014:	sub	r5, r5, #32
   58018:	add	lr, lr, #32
   5801c:	cmp	r2, #1
   58020:	lsl	ip, r3, lr
   58024:	orrcs	ip, ip, #2
   58028:	adds	r0, r0, r3, asr r5
   5802c:	adcs	r1, r1, r3, asr #31
   58030:	and	r5, r1, #-2147483648	; 0x80000000
   58034:	bpl	58044 <__adddf3+0xec>
   58038:	rsbs	ip, ip, #0
   5803c:	rscs	r0, r0, #0
   58040:	rsc	r1, r1, #0
   58044:	cmp	r1, #1048576	; 0x100000
   58048:	bcc	58088 <__adddf3+0x130>
   5804c:	cmp	r1, #2097152	; 0x200000
   58050:	bcc	58070 <__adddf3+0x118>
   58054:	lsrs	r1, r1, #1
   58058:	rrxs	r0, r0
   5805c:	rrx	ip, ip
   58060:	add	r4, r4, #1
   58064:	lsl	r2, r4, #21
   58068:	cmn	r2, #4194304	; 0x400000
   5806c:	bcs	581c8 <__adddf3+0x270>
   58070:	cmp	ip, #-2147483648	; 0x80000000
   58074:	lsrseq	ip, r0, #1
   58078:	adcs	r0, r0, #0
   5807c:	adc	r1, r1, r4, lsl #20
   58080:	orr	r1, r1, r5
   58084:	pop	{r4, r5, pc}
   58088:	lsls	ip, ip, #1
   5808c:	adcs	r0, r0, r0
   58090:	adc	r1, r1, r1
   58094:	tst	r1, #1048576	; 0x100000
   58098:	sub	r4, r4, #1
   5809c:	bne	58070 <__adddf3+0x118>
   580a0:	teq	r1, #0
   580a4:	moveq	r1, r0
   580a8:	moveq	r0, #0
   580ac:	clz	r3, r1
   580b0:	addeq	r3, r3, #32
   580b4:	sub	r3, r3, #11
   580b8:	subs	r2, r3, #32
   580bc:	bge	580e0 <__adddf3+0x188>
   580c0:	adds	r2, r2, #12
   580c4:	ble	580dc <__adddf3+0x184>
   580c8:	add	ip, r2, #20
   580cc:	rsb	r2, r2, #12
   580d0:	lsl	r0, r1, ip
   580d4:	lsr	r1, r1, r2
   580d8:	b	580f0 <__adddf3+0x198>
   580dc:	add	r2, r2, #20
   580e0:	rsble	ip, r2, #32
   580e4:	lsl	r1, r1, r2
   580e8:	orrle	r1, r1, r0, lsr ip
   580ec:	lslle	r0, r0, r2
   580f0:	subs	r4, r4, r3
   580f4:	addge	r1, r1, r4, lsl #20
   580f8:	orrge	r1, r1, r5
   580fc:	popge	{r4, r5, pc}
   58100:	mvn	r4, r4
   58104:	subs	r4, r4, #31
   58108:	bge	58144 <__adddf3+0x1ec>
   5810c:	adds	r4, r4, #12
   58110:	bgt	5812c <__adddf3+0x1d4>
   58114:	add	r4, r4, #20
   58118:	rsb	r2, r4, #32
   5811c:	lsr	r0, r0, r4
   58120:	orr	r0, r0, r1, lsl r2
   58124:	orr	r1, r5, r1, lsr r4
   58128:	pop	{r4, r5, pc}
   5812c:	rsb	r4, r4, #12
   58130:	rsb	r2, r4, #32
   58134:	lsr	r0, r0, r2
   58138:	orr	r0, r0, r1, lsl r4
   5813c:	mov	r1, r5
   58140:	pop	{r4, r5, pc}
   58144:	lsr	r0, r1, r4
   58148:	mov	r1, r5
   5814c:	pop	{r4, r5, pc}
   58150:	teq	r4, #0
   58154:	eor	r3, r3, #1048576	; 0x100000
   58158:	eoreq	r1, r1, #1048576	; 0x100000
   5815c:	addeq	r4, r4, #1
   58160:	subne	r5, r5, #1
   58164:	b	57ff0 <__adddf3+0x98>
   58168:	mvns	ip, r4, asr #21
   5816c:	mvnsne	ip, r5, asr #21
   58170:	beq	581d8 <__adddf3+0x280>
   58174:	teq	r4, r5
   58178:	teqeq	r0, r2
   5817c:	beq	58190 <__adddf3+0x238>
   58180:	orrs	ip, r4, r0
   58184:	moveq	r1, r3
   58188:	moveq	r0, r2
   5818c:	pop	{r4, r5, pc}
   58190:	teq	r1, r3
   58194:	movne	r1, #0
   58198:	movne	r0, #0
   5819c:	popne	{r4, r5, pc}
   581a0:	lsrs	ip, r4, #21
   581a4:	bne	581b8 <__adddf3+0x260>
   581a8:	lsls	r0, r0, #1
   581ac:	adcs	r1, r1, r1
   581b0:	orrcs	r1, r1, #-2147483648	; 0x80000000
   581b4:	pop	{r4, r5, pc}
   581b8:	adds	r4, r4, #4194304	; 0x400000
   581bc:	addcc	r1, r1, #1048576	; 0x100000
   581c0:	popcc	{r4, r5, pc}
   581c4:	and	r5, r1, #-2147483648	; 0x80000000
   581c8:	orr	r1, r5, #2130706432	; 0x7f000000
   581cc:	orr	r1, r1, #15728640	; 0xf00000
   581d0:	mov	r0, #0
   581d4:	pop	{r4, r5, pc}
   581d8:	mvns	ip, r4, asr #21
   581dc:	movne	r1, r3
   581e0:	movne	r0, r2
   581e4:	mvnseq	ip, r5, asr #21
   581e8:	movne	r3, r1
   581ec:	movne	r2, r0
   581f0:	orrs	r4, r0, r1, lsl #12
   581f4:	orrseq	r5, r2, r3, lsl #12
   581f8:	teqeq	r1, r3
   581fc:	orrne	r1, r1, #524288	; 0x80000
   58200:	pop	{r4, r5, pc}

00058204 <__aeabi_ui2d>:
   58204:	teq	r0, #0
   58208:	moveq	r1, #0
   5820c:	bxeq	lr
   58210:	push	{r4, r5, lr}
   58214:	mov	r4, #1024	; 0x400
   58218:	add	r4, r4, #50	; 0x32
   5821c:	mov	r5, #0
   58220:	mov	r1, #0
   58224:	b	580a0 <__adddf3+0x148>

00058228 <__aeabi_i2d>:
   58228:	teq	r0, #0
   5822c:	moveq	r1, #0
   58230:	bxeq	lr
   58234:	push	{r4, r5, lr}
   58238:	mov	r4, #1024	; 0x400
   5823c:	add	r4, r4, #50	; 0x32
   58240:	ands	r5, r0, #-2147483648	; 0x80000000
   58244:	rsbmi	r0, r0, #0
   58248:	mov	r1, #0
   5824c:	b	580a0 <__adddf3+0x148>

00058250 <__aeabi_f2d>:
   58250:	lsls	r2, r0, #1
   58254:	asr	r1, r2, #3
   58258:	rrx	r1, r1
   5825c:	lsl	r0, r2, #28
   58260:	andsne	r3, r2, #-16777216	; 0xff000000
   58264:	teqne	r3, #-16777216	; 0xff000000
   58268:	eorne	r1, r1, #939524096	; 0x38000000
   5826c:	bxne	lr
   58270:	bics	r2, r2, #-16777216	; 0xff000000
   58274:	bxeq	lr
   58278:	teq	r3, #-16777216	; 0xff000000
   5827c:	orreq	r1, r1, #524288	; 0x80000
   58280:	bxeq	lr
   58284:	push	{r4, r5, lr}
   58288:	mov	r4, #896	; 0x380
   5828c:	and	r5, r1, #-2147483648	; 0x80000000
   58290:	bic	r1, r1, #-2147483648	; 0x80000000
   58294:	b	580a0 <__adddf3+0x148>

00058298 <__aeabi_ul2d>:
   58298:	orrs	r2, r0, r1
   5829c:	bxeq	lr
   582a0:	push	{r4, r5, lr}
   582a4:	mov	r5, #0
   582a8:	b	582c8 <__aeabi_l2d+0x1c>

000582ac <__aeabi_l2d>:
   582ac:	orrs	r2, r0, r1
   582b0:	bxeq	lr
   582b4:	push	{r4, r5, lr}
   582b8:	ands	r5, r1, #-2147483648	; 0x80000000
   582bc:	bpl	582c8 <__aeabi_l2d+0x1c>
   582c0:	rsbs	r0, r0, #0
   582c4:	rsc	r1, r1, #0
   582c8:	mov	r4, #1024	; 0x400
   582cc:	add	r4, r4, #50	; 0x32
   582d0:	lsrs	ip, r1, #22
   582d4:	beq	58044 <__adddf3+0xec>
   582d8:	mov	r2, #3
   582dc:	lsrs	ip, ip, #3
   582e0:	addne	r2, r2, #3
   582e4:	lsrs	ip, ip, #3
   582e8:	addne	r2, r2, #3
   582ec:	add	r2, r2, ip, lsr #3
   582f0:	rsb	r3, r2, #32
   582f4:	lsl	ip, r0, r3
   582f8:	lsr	r0, r0, r2
   582fc:	orr	r0, r0, r1, lsl r3
   58300:	lsr	r1, r1, r2
   58304:	add	r4, r4, r2
   58308:	b	58044 <__adddf3+0xec>

0005830c <__aeabi_frsub>:
   5830c:	eor	r0, r0, #-2147483648	; 0x80000000
   58310:	b	58318 <__addsf3>

00058314 <__aeabi_fsub>:
   58314:	eor	r1, r1, #-2147483648	; 0x80000000

00058318 <__addsf3>:
   58318:	lsls	r2, r0, #1
   5831c:	lslsne	r3, r1, #1
   58320:	teqne	r2, r3
   58324:	mvnsne	ip, r2, asr #24
   58328:	mvnsne	ip, r3, asr #24
   5832c:	beq	58424 <__addsf3+0x10c>
   58330:	lsr	r2, r2, #24
   58334:	rsbs	r3, r2, r3, lsr #24
   58338:	addgt	r2, r2, r3
   5833c:	eorgt	r1, r0, r1
   58340:	eorgt	r0, r1, r0
   58344:	eorgt	r1, r0, r1
   58348:	rsblt	r3, r3, #0
   5834c:	cmp	r3, #25
   58350:	bxhi	lr
   58354:	tst	r0, #-2147483648	; 0x80000000
   58358:	orr	r0, r0, #8388608	; 0x800000
   5835c:	bic	r0, r0, #-16777216	; 0xff000000
   58360:	rsbne	r0, r0, #0
   58364:	tst	r1, #-2147483648	; 0x80000000
   58368:	orr	r1, r1, #8388608	; 0x800000
   5836c:	bic	r1, r1, #-16777216	; 0xff000000
   58370:	rsbne	r1, r1, #0
   58374:	teq	r2, r3
   58378:	beq	5840c <__addsf3+0xf4>
   5837c:	sub	r2, r2, #1
   58380:	adds	r0, r0, r1, asr r3
   58384:	rsb	r3, r3, #32
   58388:	lsl	r1, r1, r3
   5838c:	and	r3, r0, #-2147483648	; 0x80000000
   58390:	bpl	5839c <__addsf3+0x84>
   58394:	rsbs	r1, r1, #0
   58398:	rsc	r0, r0, #0
   5839c:	cmp	r0, #8388608	; 0x800000
   583a0:	bcc	583d4 <__addsf3+0xbc>
   583a4:	cmp	r0, #16777216	; 0x1000000
   583a8:	bcc	583c0 <__addsf3+0xa8>
   583ac:	lsrs	r0, r0, #1
   583b0:	rrx	r1, r1
   583b4:	add	r2, r2, #1
   583b8:	cmp	r2, #254	; 0xfe
   583bc:	bcs	58478 <__addsf3+0x160>
   583c0:	cmp	r1, #-2147483648	; 0x80000000
   583c4:	adc	r0, r0, r2, lsl #23
   583c8:	biceq	r0, r0, #1
   583cc:	orr	r0, r0, r3
   583d0:	bx	lr
   583d4:	lsls	r1, r1, #1
   583d8:	adc	r0, r0, r0
   583dc:	tst	r0, #8388608	; 0x800000
   583e0:	sub	r2, r2, #1
   583e4:	bne	583c0 <__addsf3+0xa8>
   583e8:	clz	ip, r0
   583ec:	sub	ip, ip, #8
   583f0:	subs	r2, r2, ip
   583f4:	lsl	r0, r0, ip
   583f8:	addge	r0, r0, r2, lsl #23
   583fc:	rsblt	r2, r2, #0
   58400:	orrge	r0, r0, r3
   58404:	orrlt	r0, r3, r0, lsr r2
   58408:	bx	lr
   5840c:	teq	r2, #0
   58410:	eor	r1, r1, #8388608	; 0x800000
   58414:	eoreq	r0, r0, #8388608	; 0x800000
   58418:	addeq	r2, r2, #1
   5841c:	subne	r3, r3, #1
   58420:	b	5837c <__addsf3+0x64>
   58424:	lsl	r3, r1, #1
   58428:	mvns	ip, r2, asr #24
   5842c:	mvnsne	ip, r3, asr #24
   58430:	beq	58484 <__addsf3+0x16c>
   58434:	teq	r2, r3
   58438:	beq	58448 <__addsf3+0x130>
   5843c:	teq	r2, #0
   58440:	moveq	r0, r1
   58444:	bx	lr
   58448:	teq	r0, r1
   5844c:	movne	r0, #0
   58450:	bxne	lr
   58454:	tst	r2, #-16777216	; 0xff000000
   58458:	bne	58468 <__addsf3+0x150>
   5845c:	lsls	r0, r0, #1
   58460:	orrcs	r0, r0, #-2147483648	; 0x80000000
   58464:	bx	lr
   58468:	adds	r2, r2, #33554432	; 0x2000000
   5846c:	addcc	r0, r0, #8388608	; 0x800000
   58470:	bxcc	lr
   58474:	and	r3, r0, #-2147483648	; 0x80000000
   58478:	orr	r0, r3, #2130706432	; 0x7f000000
   5847c:	orr	r0, r0, #8388608	; 0x800000
   58480:	bx	lr
   58484:	mvns	r2, r2, asr #24
   58488:	movne	r0, r1
   5848c:	mvnseq	r3, r3, asr #24
   58490:	movne	r1, r0
   58494:	lsls	r2, r0, #9
   58498:	lslseq	r3, r1, #9
   5849c:	teqeq	r0, r1
   584a0:	orrne	r0, r0, #4194304	; 0x400000
   584a4:	bx	lr

000584a8 <__aeabi_ui2f>:
   584a8:	mov	r3, #0
   584ac:	b	584b8 <__aeabi_i2f+0x8>

000584b0 <__aeabi_i2f>:
   584b0:	ands	r3, r0, #-2147483648	; 0x80000000
   584b4:	rsbmi	r0, r0, #0
   584b8:	movs	ip, r0
   584bc:	bxeq	lr
   584c0:	orr	r3, r3, #1258291200	; 0x4b000000
   584c4:	mov	r1, r0
   584c8:	mov	r0, #0
   584cc:	b	58510 <__aeabi_l2f+0x30>

000584d0 <__aeabi_ul2f>:
   584d0:	orrs	r2, r0, r1
   584d4:	bxeq	lr
   584d8:	mov	r3, #0
   584dc:	b	584f8 <__aeabi_l2f+0x18>

000584e0 <__aeabi_l2f>:
   584e0:	orrs	r2, r0, r1
   584e4:	bxeq	lr
   584e8:	ands	r3, r1, #-2147483648	; 0x80000000
   584ec:	bpl	584f8 <__aeabi_l2f+0x18>
   584f0:	rsbs	r0, r0, #0
   584f4:	rsc	r1, r1, #0
   584f8:	movs	ip, r1
   584fc:	moveq	ip, r0
   58500:	moveq	r1, r0
   58504:	moveq	r0, #0
   58508:	orr	r3, r3, #1526726656	; 0x5b000000
   5850c:	subeq	r3, r3, #268435456	; 0x10000000
   58510:	sub	r3, r3, #8388608	; 0x800000
   58514:	clz	r2, ip
   58518:	subs	r2, r2, #8
   5851c:	sub	r3, r3, r2, lsl #23
   58520:	blt	58540 <__aeabi_l2f+0x60>
   58524:	add	r3, r3, r1, lsl r2
   58528:	lsl	ip, r0, r2
   5852c:	rsb	r2, r2, #32
   58530:	cmp	ip, #-2147483648	; 0x80000000
   58534:	adc	r0, r3, r0, lsr r2
   58538:	biceq	r0, r0, #1
   5853c:	bx	lr
   58540:	add	r2, r2, #32
   58544:	lsl	ip, r1, r2
   58548:	rsb	r2, r2, #32
   5854c:	orrs	r0, r0, ip, lsl #1
   58550:	adc	r0, r3, r1, lsr r2
   58554:	biceq	r0, r0, ip, lsr #31
   58558:	bx	lr

0005855c <__aeabi_f2lz>:
   5855c:	vmov	s15, r0
   58560:	vcmpe.f32	s15, #0.0
   58564:	vmrs	APSR_nzcv, fpscr
   58568:	bmi	58570 <__aeabi_f2lz+0x14>
   5856c:	b	585b8 <__aeabi_f2ulz>
   58570:	push	{r4, lr}
   58574:	eor	r0, r0, #-2147483648	; 0x80000000
   58578:	bl	585b8 <__aeabi_f2ulz>
   5857c:	rsbs	r0, r0, #0
   58580:	rsc	r1, r1, #0
   58584:	pop	{r4, pc}

00058588 <__aeabi_d2lz>:
   58588:	vmov	d7, r0, r1
   5858c:	vcmpe.f64	d7, #0.0
   58590:	vmrs	APSR_nzcv, fpscr
   58594:	bmi	5859c <__aeabi_d2lz+0x14>
   58598:	b	585f8 <__aeabi_d2ulz>
   5859c:	push	{r4, lr}
   585a0:	eor	r1, r1, #-2147483648	; 0x80000000
   585a4:	bl	585f8 <__aeabi_d2ulz>
   585a8:	rsbs	r0, r0, #0
   585ac:	rsc	r1, r1, #0
   585b0:	pop	{r4, pc}
   585b4:	andeq	r0, r0, r0

000585b8 <__aeabi_f2ulz>:
   585b8:	vmov	s15, r0
   585bc:	vldr	d5, [pc, #36]	; 585e8 <__aeabi_f2ulz+0x30>
   585c0:	vcvt.f64.f32	d6, s15
   585c4:	vldr	d7, [pc, #36]	; 585f0 <__aeabi_f2ulz+0x38>
   585c8:	vmul.f64	d7, d6, d7
   585cc:	vcvt.u32.f64	s14, d7
   585d0:	vcvt.f64.u32	d4, s14
   585d4:	vmov	r1, s14
   585d8:	vmls.f64	d6, d4, d5
   585dc:	vcvt.u32.f64	s15, d6
   585e0:	vmov	r0, s15
   585e4:	bx	lr
   585e8:	.word	0x00000000
   585ec:	.word	0x41f00000
   585f0:	.word	0x00000000
   585f4:	.word	0x3df00000

000585f8 <__aeabi_d2ulz>:
   585f8:	vmov	d6, r0, r1
   585fc:	vldr	d7, [pc, #36]	; 58628 <__aeabi_d2ulz+0x30>
   58600:	vldr	d5, [pc, #40]	; 58630 <__aeabi_d2ulz+0x38>
   58604:	vmul.f64	d7, d6, d7
   58608:	vcvt.u32.f64	s14, d7
   5860c:	vcvt.f64.u32	d4, s14
   58610:	vmov	r1, s14
   58614:	vmls.f64	d6, d4, d5
   58618:	vcvt.u32.f64	s15, d6
   5861c:	vmov	r0, s15
   58620:	bx	lr
   58624:	nop			; (mov r0, r0)
   58628:	.word	0x00000000
   5862c:	.word	0x3df00000
   58630:	.word	0x00000000
   58634:	.word	0x41f00000

Disassembly of section .fini:

00058638 <_fini>:
   58638:	push	{r3, lr}
   5863c:	pop	{r3, pc}
