
../repos/eddieantonio-ocreval-3ab279a/wordacc/wordacc:     file format elf32-littlearm


Disassembly of section .init:

000109b0 <.init>:
   109b0:	push	{r3, lr}
   109b4:	bl	10c44 <__assert_fail@plt+0xd0>
   109b8:	pop	{r3, pc}

Disassembly of section .plt:

000109bc <calloc@plt-0x14>:
   109bc:	push	{lr}		; (str lr, [sp, #-4]!)
   109c0:	ldr	lr, [pc, #4]	; 109cc <calloc@plt-0x4>
   109c4:	add	lr, pc, lr
   109c8:	ldr	pc, [lr, #8]!
   109cc:	andeq	r8, r1, r4, lsr r6

000109d0 <calloc@plt>:
   109d0:	add	ip, pc, #0, 12
   109d4:	add	ip, ip, #24, 20	; 0x18000
   109d8:	ldr	pc, [ip, #1588]!	; 0x634

000109dc <strcmp@plt>:
   109dc:	add	ip, pc, #0, 12
   109e0:	add	ip, ip, #24, 20	; 0x18000
   109e4:	ldr	pc, [ip, #1580]!	; 0x62c

000109e8 <strtol@plt>:
   109e8:	add	ip, pc, #0, 12
   109ec:	add	ip, ip, #24, 20	; 0x18000
   109f0:	ldr	pc, [ip, #1572]!	; 0x624

000109f4 <fopen@plt>:
   109f4:	add	ip, pc, #0, 12
   109f8:	add	ip, ip, #24, 20	; 0x18000
   109fc:	ldr	pc, [ip, #1564]!	; 0x61c

00010a00 <free@plt>:
   10a00:	add	ip, pc, #0, 12
   10a04:	add	ip, ip, #24, 20	; 0x18000
   10a08:	ldr	pc, [ip, #1556]!	; 0x614

00010a0c <utf8proc_get_property@plt>:
   10a0c:	add	ip, pc, #0, 12
   10a10:	add	ip, ip, #24, 20	; 0x18000
   10a14:	ldr	pc, [ip, #1548]!	; 0x60c

00010a18 <fgets@plt>:
   10a18:	add	ip, pc, #0, 12
   10a1c:	add	ip, ip, #24, 20	; 0x18000
   10a20:	ldr	pc, [ip, #1540]!	; 0x604

00010a24 <utf8proc_encode_char@plt>:
   10a24:	add	ip, pc, #0, 12
   10a28:	add	ip, ip, #24, 20	; 0x18000
   10a2c:	ldr	pc, [ip, #1532]!	; 0x5fc

00010a30 <strdup@plt>:
   10a30:	add	ip, pc, #0, 12
   10a34:	add	ip, ip, #24, 20	; 0x18000
   10a38:	ldr	pc, [ip, #1524]!	; 0x5f4

00010a3c <rewind@plt>:
   10a3c:	add	ip, pc, #0, 12
   10a40:	add	ip, ip, #24, 20	; 0x18000
   10a44:	ldr	pc, [ip, #1516]!	; 0x5ec

00010a48 <unlink@plt>:
   10a48:	add	ip, pc, #0, 12
   10a4c:	add	ip, ip, #24, 20	; 0x18000
   10a50:	ldr	pc, [ip, #1508]!	; 0x5e4

00010a54 <utf8proc_tolower@plt>:
   10a54:	add	ip, pc, #0, 12
   10a58:	add	ip, ip, #24, 20	; 0x18000
   10a5c:	ldr	pc, [ip, #1500]!	; 0x5dc

00010a60 <__xstat@plt>:
   10a60:	add	ip, pc, #0, 12
   10a64:	add	ip, ip, #24, 20	; 0x18000
   10a68:	ldr	pc, [ip, #1492]!	; 0x5d4

00010a6c <fwrite@plt>:
   10a6c:	add	ip, pc, #0, 12
   10a70:	add	ip, ip, #24, 20	; 0x18000
   10a74:	ldr	pc, [ip, #1484]!	; 0x5cc

00010a78 <fread@plt>:
   10a78:	add	ip, pc, #0, 12
   10a7c:	add	ip, ip, #24, 20	; 0x18000
   10a80:	ldr	pc, [ip, #1476]!	; 0x5c4

00010a84 <utf8proc_iterate@plt>:
   10a84:	add	ip, pc, #0, 12
   10a88:	add	ip, ip, #24, 20	; 0x18000
   10a8c:	ldr	pc, [ip, #1468]!	; 0x5bc

00010a90 <malloc@plt>:
   10a90:	add	ip, pc, #0, 12
   10a94:	add	ip, ip, #24, 20	; 0x18000
   10a98:	ldr	pc, [ip, #1460]!	; 0x5b4

00010a9c <__libc_start_main@plt>:
   10a9c:	add	ip, pc, #0, 12
   10aa0:	add	ip, ip, #24, 20	; 0x18000
   10aa4:	ldr	pc, [ip, #1452]!	; 0x5ac

00010aa8 <__sysv_signal@plt>:
   10aa8:	add	ip, pc, #0, 12
   10aac:	add	ip, ip, #24, 20	; 0x18000
   10ab0:	ldr	pc, [ip, #1444]!	; 0x5a4

00010ab4 <__gmon_start__@plt>:
   10ab4:	add	ip, pc, #0, 12
   10ab8:	add	ip, ip, #24, 20	; 0x18000
   10abc:	ldr	pc, [ip, #1436]!	; 0x59c

00010ac0 <getpid@plt>:
   10ac0:	add	ip, pc, #0, 12
   10ac4:	add	ip, ip, #24, 20	; 0x18000
   10ac8:	ldr	pc, [ip, #1428]!	; 0x594

00010acc <exit@plt>:
   10acc:	add	ip, pc, #0, 12
   10ad0:	add	ip, ip, #24, 20	; 0x18000
   10ad4:	ldr	pc, [ip, #1420]!	; 0x58c

00010ad8 <utf8proc_category@plt>:
   10ad8:	add	ip, pc, #0, 12
   10adc:	add	ip, ip, #24, 20	; 0x18000
   10ae0:	ldr	pc, [ip, #1412]!	; 0x584

00010ae4 <strlen@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #24, 20	; 0x18000
   10aec:	ldr	pc, [ip, #1404]!	; 0x57c

00010af0 <fprintf@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #24, 20	; 0x18000
   10af8:	ldr	pc, [ip, #1396]!	; 0x574

00010afc <__isoc99_sscanf@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #24, 20	; 0x18000
   10b04:	ldr	pc, [ip, #1388]!	; 0x56c

00010b08 <fclose@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #24, 20	; 0x18000
   10b10:	ldr	pc, [ip, #1380]!	; 0x564

00010b14 <utf8proc_NFC@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #24, 20	; 0x18000
   10b1c:	ldr	pc, [ip, #1372]!	; 0x55c

00010b20 <fputc@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #24, 20	; 0x18000
   10b28:	ldr	pc, [ip, #1364]!	; 0x554

00010b2c <sprintf@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #24, 20	; 0x18000
   10b34:	ldr	pc, [ip, #1356]!	; 0x54c

00010b38 <utf8proc_errmsg@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #24, 20	; 0x18000
   10b40:	ldr	pc, [ip, #1348]!	; 0x544

00010b44 <fputs@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #24, 20	; 0x18000
   10b4c:	ldr	pc, [ip, #1340]!	; 0x53c

00010b50 <strncmp@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #24, 20	; 0x18000
   10b58:	ldr	pc, [ip, #1332]!	; 0x534

00010b5c <abort@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #24, 20	; 0x18000
   10b64:	ldr	pc, [ip, #1324]!	; 0x52c

00010b68 <getc@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #24, 20	; 0x18000
   10b70:	ldr	pc, [ip, #1316]!	; 0x524

00010b74 <__assert_fail@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #24, 20	; 0x18000
   10b7c:	ldr	pc, [ip, #1308]!	; 0x51c

Disassembly of section .text:

00010b80 <error@@Base-0x2b8c>:
   10b80:	push	{lr}		; (str lr, [sp, #-4]!)
   10b84:	sub	sp, sp, #12
   10b88:	movw	r2, #18080	; 0x46a0
   10b8c:	movt	r2, #1
   10b90:	ldr	r3, [pc, #108]	; 10c04 <__assert_fail@plt+0x90>
   10b94:	mov	r4, r1
   10b98:	str	r0, [sp, #4]
   10b9c:	add	r0, sp, #4
   10ba0:	bl	13878 <error@@Base+0x16c>
   10ba4:	ldr	r3, [sp, #4]
   10ba8:	sub	r3, r3, #2
   10bac:	cmp	r3, #1
   10bb0:	bls	10bc0 <__assert_fail@plt+0x4c>
   10bb4:	movw	r0, #18144	; 0x46e0
   10bb8:	movt	r0, #1
   10bbc:	bl	1370c <error@@Base>
   10bc0:	movw	r3, #45352	; 0xb128
   10bc4:	movt	r3, #2
   10bc8:	ldr	r0, [r3]
   10bcc:	bl	11c2c <__assert_fail@plt+0x10b8>
   10bd0:	mov	r0, r4
   10bd4:	bl	10d90 <__assert_fail@plt+0x21c>
   10bd8:	bl	112c4 <__assert_fail@plt+0x750>
   10bdc:	bl	113d8 <__assert_fail@plt+0x864>
   10be0:	bl	1175c <__assert_fail@plt+0xbe8>
   10be4:	ldr	r3, [sp, #4]
   10be8:	movw	r0, #53460	; 0xd0d4
   10bec:	movt	r0, #2
   10bf0:	cmp	r3, #3
   10bf4:	ldreq	r1, [r4, #8]
   10bf8:	movne	r1, #0
   10bfc:	bl	12708 <__assert_fail@plt+0x1b94>
   10c00:	bl	136ac <__assert_fail@plt+0x2b38>
   10c04:	strheq	r9, [r2], -r4
   10c08:	mov	fp, #0
   10c0c:	mov	lr, #0
   10c10:	pop	{r1}		; (ldr r1, [sp], #4)
   10c14:	mov	r2, sp
   10c18:	push	{r2}		; (str r2, [sp, #-4]!)
   10c1c:	push	{r0}		; (str r0, [sp, #-4]!)
   10c20:	ldr	ip, [pc, #16]	; 10c38 <__assert_fail@plt+0xc4>
   10c24:	push	{ip}		; (str ip, [sp, #-4]!)
   10c28:	ldr	r0, [pc, #12]	; 10c3c <__assert_fail@plt+0xc8>
   10c2c:	ldr	r3, [pc, #12]	; 10c40 <__assert_fail@plt+0xcc>
   10c30:	bl	10a9c <__libc_start_main@plt>
   10c34:	bl	10b5c <abort@plt>
   10c38:	andeq	r4, r1, ip, asr r6
   10c3c:	andeq	r0, r1, r0, lsl #23
   10c40:	strdeq	r4, [r1], -ip
   10c44:	ldr	r3, [pc, #20]	; 10c60 <__assert_fail@plt+0xec>
   10c48:	ldr	r2, [pc, #20]	; 10c64 <__assert_fail@plt+0xf0>
   10c4c:	add	r3, pc, r3
   10c50:	ldr	r2, [r3, r2]
   10c54:	cmp	r2, #0
   10c58:	bxeq	lr
   10c5c:	b	10ab4 <__gmon_start__@plt>
   10c60:	andeq	r8, r1, ip, lsr #7
   10c64:	muleq	r0, ip, r0
   10c68:	ldr	r0, [pc, #24]	; 10c88 <__assert_fail@plt+0x114>
   10c6c:	ldr	r3, [pc, #24]	; 10c8c <__assert_fail@plt+0x118>
   10c70:	cmp	r3, r0
   10c74:	bxeq	lr
   10c78:	ldr	r3, [pc, #16]	; 10c90 <__assert_fail@plt+0x11c>
   10c7c:	cmp	r3, #0
   10c80:	bxeq	lr
   10c84:	bx	r3
   10c88:	andeq	r9, r2, r0, ror #1
   10c8c:	andeq	r9, r2, r0, ror #1
   10c90:	andeq	r0, r0, r0
   10c94:	ldr	r0, [pc, #36]	; 10cc0 <__assert_fail@plt+0x14c>
   10c98:	ldr	r1, [pc, #36]	; 10cc4 <__assert_fail@plt+0x150>
   10c9c:	sub	r1, r1, r0
   10ca0:	asr	r1, r1, #2
   10ca4:	add	r1, r1, r1, lsr #31
   10ca8:	asrs	r1, r1, #1
   10cac:	bxeq	lr
   10cb0:	ldr	r3, [pc, #16]	; 10cc8 <__assert_fail@plt+0x154>
   10cb4:	cmp	r3, #0
   10cb8:	bxeq	lr
   10cbc:	bx	r3
   10cc0:	andeq	r9, r2, r0, ror #1
   10cc4:	andeq	r9, r2, r0, ror #1
   10cc8:	andeq	r0, r0, r0
   10ccc:	push	{r4, lr}
   10cd0:	ldr	r4, [pc, #24]	; 10cf0 <__assert_fail@plt+0x17c>
   10cd4:	ldrb	r3, [r4]
   10cd8:	cmp	r3, #0
   10cdc:	popne	{r4, pc}
   10ce0:	bl	10c68 <__assert_fail@plt+0xf4>
   10ce4:	mov	r3, #1
   10ce8:	strb	r3, [r4]
   10cec:	pop	{r4, pc}
   10cf0:	strdeq	r9, [r2], -r0
   10cf4:	b	10c94 <__assert_fail@plt+0x120>
   10cf8:	movw	r3, #45356	; 0xb12c
   10cfc:	movt	r3, #2
   10d00:	strd	r4, [sp, #-24]!	; 0xffffffe8
   10d04:	strd	r6, [sp, #8]
   10d08:	add	r6, r3, r0, lsl #4
   10d0c:	mov	r4, r0
   10d10:	mov	r5, r1
   10d14:	mov	r1, #4
   10d18:	str	r8, [sp, #16]
   10d1c:	ldr	r0, [r6, #12]
   10d20:	str	lr, [sp, #20]
   10d24:	add	r0, r0, #1
   10d28:	bl	1374c <error@@Base+0x40>
   10d2c:	ldr	r6, [r6, #12]
   10d30:	mov	ip, #0
   10d34:	cmp	r6, #0
   10d38:	ble	10d78 <__assert_fail@plt+0x204>
   10d3c:	movw	lr, #5044	; 0x13b4
   10d40:	movt	lr, #3
   10d44:	mov	r3, ip
   10d48:	rsb	r7, r4, #1
   10d4c:	ldr	r2, [lr, r4, lsl #2]
   10d50:	ldr	r1, [r2, r3, lsl #3]
   10d54:	add	r2, r2, r3, lsl #3
   10d58:	add	r3, r3, #1
   10d5c:	add	r1, r1, r7
   10d60:	ldrb	r1, [r1, #12]
   10d64:	cmp	r1, #0
   10d68:	strne	r2, [r0, ip, lsl #2]
   10d6c:	addne	ip, ip, #1
   10d70:	cmp	r3, r6
   10d74:	bne	10d4c <__assert_fail@plt+0x1d8>
   10d78:	ldrd	r6, [sp, #8]
   10d7c:	ldr	r8, [sp, #16]
   10d80:	str	ip, [r5]
   10d84:	ldrd	r4, [sp]
   10d88:	add	sp, sp, #20
   10d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   10d90:	movw	r3, #37032	; 0x90a8
   10d94:	movt	r3, #2
   10d98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10d9c:	strd	r6, [sp, #8]
   10da0:	mov	r5, #0
   10da4:	movw	r6, #45404	; 0xb15c
   10da8:	movt	r6, #2
   10dac:	strd	r8, [sp, #16]
   10db0:	movw	r8, #5044	; 0x13b4
   10db4:	movt	r8, #3
   10db8:	strd	sl, [sp, #24]
   10dbc:	mov	r9, #1
   10dc0:	str	lr, [sp, #32]
   10dc4:	sub	sp, sp, #28
   10dc8:	movw	sl, #45356	; 0xb12c
   10dcc:	movt	sl, #2
   10dd0:	mov	r7, r8
   10dd4:	str	r3, [sp, #16]
   10dd8:	sub	r3, r0, #4
   10ddc:	str	r8, [sp, #20]
   10de0:	str	r3, [sp]
   10de4:	movw	r3, #45312	; 0xb100
   10de8:	movt	r3, #2
   10dec:	str	sl, [sp, #12]
   10df0:	str	r3, [sp, #8]
   10df4:	ldr	r3, [sp, #8]
   10df8:	movw	r2, #37032	; 0x90a8
   10dfc:	movt	r2, #2
   10e00:	add	r4, r3, r5, lsl #4
   10e04:	ldr	r3, [sp]
   10e08:	mov	r0, r4
   10e0c:	ldr	r1, [r3, #4]!
   10e10:	str	r3, [sp]
   10e14:	bl	13bd8 <error@@Base+0x4cc>
   10e18:	cmp	r5, #0
   10e1c:	bne	11000 <__assert_fail@plt+0x48c>
   10e20:	ldr	r3, [sp, #16]
   10e24:	ldrb	r3, [r3, #11]
   10e28:	cmp	r3, #0
   10e2c:	bne	11064 <__assert_fail@plt+0x4f0>
   10e30:	mov	r1, r4
   10e34:	mov	r0, sl
   10e38:	bl	12cd4 <__assert_fail@plt+0x2160>
   10e3c:	ldr	r0, [sl, #12]
   10e40:	mov	r1, #8
   10e44:	add	r0, r0, #1
   10e48:	bl	1374c <error@@Base+0x40>
   10e4c:	ldr	r4, [sl]
   10e50:	str	r0, [r7]
   10e54:	cmp	r4, #0
   10e58:	movne	r3, #1
   10e5c:	strne	r3, [sp, #4]
   10e60:	beq	10ff0 <__assert_fail@plt+0x47c>
   10e64:	mov	r8, #0
   10e68:	mov	r0, r6
   10e6c:	ldr	r1, [r4, #8]
   10e70:	bl	12940 <__assert_fail@plt+0x1dcc>
   10e74:	cmp	r0, #0
   10e78:	beq	10fa0 <__assert_fail@plt+0x42c>
   10e7c:	add	r3, r0, r5
   10e80:	strb	r9, [r3, #12]
   10e84:	ldr	r4, [r4, #4]
   10e88:	ldr	r3, [r7]
   10e8c:	cmp	r4, #0
   10e90:	str	r0, [r3, r8]
   10e94:	add	r8, r8, #8
   10e98:	bne	10e68 <__assert_fail@plt+0x2f4>
   10e9c:	ldr	r3, [sp, #4]
   10ea0:	cmp	r3, #2
   10ea4:	bne	10ff0 <__assert_fail@plt+0x47c>
   10ea8:	ldr	r4, [sp, #12]
   10eac:	mov	r1, #4
   10eb0:	ldr	r8, [sp, #20]
   10eb4:	ldr	r0, [r4, #12]
   10eb8:	add	r0, r0, #1
   10ebc:	bl	1374c <error@@Base+0x40>
   10ec0:	ldr	lr, [r4, #12]
   10ec4:	cmp	lr, #0
   10ec8:	ble	11038 <__assert_fail@plt+0x4c4>
   10ecc:	mov	ip, #0
   10ed0:	mov	r3, ip
   10ed4:	ldr	r2, [r8]
   10ed8:	ldr	r1, [r2, r3, lsl #3]
   10edc:	add	r2, r2, r3, lsl #3
   10ee0:	add	r3, r3, #1
   10ee4:	ldrb	r1, [r1, #13]
   10ee8:	cmp	r1, #0
   10eec:	strne	r2, [r0, ip, lsl #2]
   10ef0:	addne	ip, ip, #1
   10ef4:	cmp	r3, lr
   10ef8:	bne	10ed4 <__assert_fail@plt+0x360>
   10efc:	movw	r2, #5036	; 0x13ac
   10f00:	movt	r2, #3
   10f04:	movw	r3, #5032	; 0x13a8
   10f08:	movt	r3, #3
   10f0c:	cmp	ip, #65536	; 0x10000
   10f10:	str	ip, [r2]
   10f14:	str	r0, [r3]
   10f18:	bge	11058 <__assert_fail@plt+0x4e4>
   10f1c:	ldr	r4, [sp, #12]
   10f20:	mov	r1, #4
   10f24:	ldr	r0, [r4, #28]
   10f28:	add	r0, r0, #1
   10f2c:	bl	1374c <error@@Base+0x40>
   10f30:	ldr	lr, [r4, #28]
   10f34:	mov	ip, #0
   10f38:	cmp	lr, #0
   10f3c:	ble	10f6c <__assert_fail@plt+0x3f8>
   10f40:	mov	r3, ip
   10f44:	ldr	r2, [r8, #4]
   10f48:	ldr	r1, [r2, r3, lsl #3]
   10f4c:	add	r2, r2, r3, lsl #3
   10f50:	add	r3, r3, #1
   10f54:	ldrb	r1, [r1, #12]
   10f58:	cmp	r1, #0
   10f5c:	strne	r2, [r0, ip, lsl #2]
   10f60:	addne	ip, ip, #1
   10f64:	cmp	lr, r3
   10f68:	bne	10f44 <__assert_fail@plt+0x3d0>
   10f6c:	movw	r2, #45348	; 0xb124
   10f70:	movt	r2, #2
   10f74:	movw	r3, #45344	; 0xb120
   10f78:	movt	r3, #2
   10f7c:	str	ip, [r2]
   10f80:	str	r0, [r3]
   10f84:	add	sp, sp, #28
   10f88:	ldrd	r4, [sp]
   10f8c:	ldrd	r6, [sp, #8]
   10f90:	ldrd	r8, [sp, #16]
   10f94:	ldrd	sl, [sp, #24]
   10f98:	add	sp, sp, #32
   10f9c:	pop	{pc}		; (ldr pc, [sp], #4)
   10fa0:	mov	r1, #16
   10fa4:	mov	r0, #1
   10fa8:	bl	1374c <error@@Base+0x40>
   10fac:	ldr	r3, [r4, #8]
   10fb0:	mov	fp, r0
   10fb4:	mov	r0, r6
   10fb8:	mov	r1, fp
   10fbc:	str	r3, [fp, #8]
   10fc0:	bl	129cc <__assert_fail@plt+0x1e58>
   10fc4:	add	r3, fp, r5
   10fc8:	strb	r9, [r3, #12]
   10fcc:	ldr	r4, [r4, #4]
   10fd0:	ldr	r3, [r7]
   10fd4:	cmp	r4, #0
   10fd8:	str	fp, [r3, r8]
   10fdc:	add	r8, r8, #8
   10fe0:	bne	10e68 <__assert_fail@plt+0x2f4>
   10fe4:	ldr	r3, [sp, #4]
   10fe8:	cmp	r3, #2
   10fec:	beq	10ea8 <__assert_fail@plt+0x334>
   10ff0:	add	r5, r5, #1
   10ff4:	add	sl, sl, #16
   10ff8:	add	r7, r7, #4
   10ffc:	b	10df4 <__assert_fail@plt+0x280>
   11000:	mov	r1, r4
   11004:	mov	r0, sl
   11008:	bl	12cd4 <__assert_fail@plt+0x2160>
   1100c:	ldr	r0, [sl, #12]
   11010:	add	r3, r5, #1
   11014:	mov	r1, #8
   11018:	str	r3, [sp, #4]
   1101c:	add	r0, r0, #1
   11020:	bl	1374c <error@@Base+0x40>
   11024:	ldr	r4, [sl]
   11028:	str	r0, [r7]
   1102c:	cmp	r4, #0
   11030:	bne	10e64 <__assert_fail@plt+0x2f0>
   11034:	b	10e9c <__assert_fail@plt+0x328>
   11038:	movw	r2, #5036	; 0x13ac
   1103c:	movt	r2, #3
   11040:	mov	r1, #0
   11044:	movw	r3, #5032	; 0x13a8
   11048:	movt	r3, #3
   1104c:	str	r1, [r2]
   11050:	str	r0, [r3]
   11054:	b	10f1c <__assert_fail@plt+0x3a8>
   11058:	movw	r0, #18056	; 0x4688
   1105c:	movt	r0, #1
   11060:	bl	1370c <error@@Base>
   11064:	movw	r0, #18028	; 0x466c
   11068:	movt	r0, #1
   1106c:	bl	1370c <error@@Base>
   11070:	cmp	r1, #0
   11074:	beq	110e0 <__assert_fail@plt+0x56c>
   11078:	ldr	r3, [r1, #8]
   1107c:	rsb	ip, r3, #0
   11080:	cmp	ip, r0
   11084:	bge	110d8 <__assert_fail@plt+0x564>
   11088:	push	{lr}		; (str lr, [sp, #-4]!)
   1108c:	sub	ip, r0, #1
   11090:	ldr	lr, [r1, #12]
   11094:	add	r3, r3, ip
   11098:	bic	r3, r3, #1
   1109c:	ldrh	r3, [lr, r3]
   110a0:	str	ip, [r2]
   110a4:	ldr	ip, [r1, #8]
   110a8:	cmp	ip, r0
   110ac:	ble	110d0 <__assert_fail@plt+0x55c>
   110b0:	add	r1, r0, #1
   110b4:	add	ip, ip, r1
   110b8:	bic	ip, ip, #1
   110bc:	ldrh	r0, [lr, ip]
   110c0:	add	r0, r0, #1
   110c4:	cmp	r3, r0
   110c8:	movle	r3, r0
   110cc:	strle	r1, [r2]
   110d0:	mov	r0, r3
   110d4:	pop	{pc}		; (ldr pc, [sp], #4)
   110d8:	cmp	r3, r0
   110dc:	bgt	110ec <__assert_fail@plt+0x578>
   110e0:	mov	r3, #0
   110e4:	mov	r0, r3
   110e8:	bx	lr
   110ec:	ldr	ip, [r1, #12]
   110f0:	add	r1, r0, #1
   110f4:	add	r3, r3, r1
   110f8:	bic	r3, r3, #1
   110fc:	ldrh	r3, [ip, r3]
   11100:	str	r1, [r2]
   11104:	add	r3, r3, #1
   11108:	mov	r0, r3
   1110c:	bx	lr
   11110:	ldr	r3, [r1]
   11114:	strd	r4, [sp, #-28]!	; 0xffffffe4
   11118:	strd	r6, [sp, #8]
   1111c:	strd	r8, [sp, #16]
   11120:	str	lr, [sp, #24]
   11124:	cmp	r3, #0
   11128:	moveq	r2, r0
   1112c:	beq	11160 <__assert_fail@plt+0x5ec>
   11130:	ldr	r2, [r3, #8]
   11134:	rsb	ip, r2, #0
   11138:	cmp	r0, ip
   1113c:	ble	1125c <__assert_fail@plt+0x6e8>
   11140:	ldr	lr, [r3, #12]
   11144:	sub	r3, r0, #1
   11148:	cmp	r0, r2
   1114c:	add	r3, r3, r2
   11150:	bic	r3, r3, #1
   11154:	ldrh	r3, [lr, r3]
   11158:	blt	11294 <__assert_fail@plt+0x720>
   1115c:	add	r2, r0, r3
   11160:	movw	ip, #5036	; 0x13ac
   11164:	movt	ip, #3
   11168:	ldr	r7, [ip]
   1116c:	movw	ip, #45348	; 0xb124
   11170:	movt	ip, #2
   11174:	ldr	r9, [ip]
   11178:	cmp	r3, r7
   1117c:	bge	112b8 <__assert_fail@plt+0x744>
   11180:	cmp	r2, r9
   11184:	bge	112bc <__assert_fail@plt+0x748>
   11188:	movw	lr, #5032	; 0x13a8
   1118c:	movt	lr, #3
   11190:	movw	ip, #45344	; 0xb120
   11194:	movt	ip, #2
   11198:	ldr	lr, [lr]
   1119c:	mov	r6, r2
   111a0:	mov	r8, r3
   111a4:	ldr	ip, [ip]
   111a8:	ldr	r2, [lr, r3, lsl #2]
   111ac:	add	lr, lr, r3, lsl #2
   111b0:	ldr	r4, [ip, r6, lsl #2]
   111b4:	add	ip, ip, r6, lsl #2
   111b8:	ldr	r2, [r2]
   111bc:	ldr	r4, [r4]
   111c0:	cmp	r4, r2
   111c4:	bne	1128c <__assert_fail@plt+0x718>
   111c8:	add	r5, r9, r3
   111cc:	sub	r5, r5, r6
   111d0:	b	111f4 <__assert_fail@plt+0x680>
   111d4:	cmp	r3, r5
   111d8:	beq	1121c <__assert_fail@plt+0x6a8>
   111dc:	ldr	r4, [lr, #4]!
   111e0:	ldr	r2, [ip, #4]!
   111e4:	ldr	r4, [r4]
   111e8:	ldr	r2, [r2]
   111ec:	cmp	r4, r2
   111f0:	bne	1128c <__assert_fail@plt+0x718>
   111f4:	add	r3, r3, #1
   111f8:	add	r2, r3, r6
   111fc:	cmp	r3, r7
   11200:	sub	r2, r2, r8
   11204:	bne	111d4 <__assert_fail@plt+0x660>
   11208:	movw	r3, #5040	; 0x13b0
   1120c:	movt	r3, #3
   11210:	add	ip, r0, #1
   11214:	mov	r5, r7
   11218:	str	ip, [r3]
   1121c:	cmp	r2, r9
   11220:	bne	11234 <__assert_fail@plt+0x6c0>
   11224:	movw	r3, #5028	; 0x13a4
   11228:	movt	r3, #3
   1122c:	sub	r2, r0, #1
   11230:	str	r2, [r3]
   11234:	ldr	r3, [r1, #8]
   11238:	ldr	r2, [r1, #12]
   1123c:	ldrd	r6, [sp, #8]
   11240:	add	r0, r0, r3
   11244:	bic	r0, r0, #1
   11248:	ldrd	r8, [sp, #16]
   1124c:	strh	r5, [r2, r0]
   11250:	ldrd	r4, [sp]
   11254:	add	sp, sp, #24
   11258:	pop	{pc}		; (ldr pc, [sp], #4)
   1125c:	cmp	r0, r2
   11260:	movge	r2, r0
   11264:	movge	r3, #0
   11268:	bge	11160 <__assert_fail@plt+0x5ec>
   1126c:	ldr	ip, [r3, #12]
   11270:	add	r3, r0, #1
   11274:	add	r2, r3, r2
   11278:	bic	r2, r2, #1
   1127c:	ldrh	r3, [ip, r2]
   11280:	add	r3, r3, #1
   11284:	add	r2, r0, r3
   11288:	b	11160 <__assert_fail@plt+0x5ec>
   1128c:	mov	r5, r3
   11290:	b	11234 <__assert_fail@plt+0x6c0>
   11294:	add	ip, r0, #1
   11298:	add	r2, ip, r2
   1129c:	bic	r2, r2, #1
   112a0:	ldrh	r2, [lr, r2]
   112a4:	add	r2, r2, #1
   112a8:	cmp	r3, r2
   112ac:	movlt	r3, r2
   112b0:	add	r2, r0, r3
   112b4:	b	11160 <__assert_fail@plt+0x5ec>
   112b8:	beq	11208 <__assert_fail@plt+0x694>
   112bc:	mov	r5, r3
   112c0:	b	1121c <__assert_fail@plt+0x6a8>
   112c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   112c8:	strd	r6, [sp, #8]
   112cc:	movw	r7, #5040	; 0x13b0
   112d0:	movt	r7, #3
   112d4:	strd	r8, [sp, #16]
   112d8:	movw	r8, #5036	; 0x13ac
   112dc:	movt	r8, #3
   112e0:	movw	r9, #45348	; 0xb124
   112e4:	movt	r9, #2
   112e8:	ldr	r3, [r8]
   112ec:	strd	sl, [sp, #24]
   112f0:	movw	fp, #5028	; 0x13a4
   112f4:	movt	fp, #3
   112f8:	ldr	r2, [r9]
   112fc:	str	lr, [sp, #32]
   11300:	sub	sp, sp, #4
   11304:	rsb	r1, r3, #0
   11308:	sub	r3, r2, r3
   1130c:	str	r1, [r7]
   11310:	cmp	r1, r3
   11314:	str	r2, [fp]
   11318:	bgt	113bc <__assert_fail@plt+0x848>
   1131c:	movw	sl, #45388	; 0xb14c
   11320:	movt	sl, #2
   11324:	mvn	r4, #0
   11328:	mov	r1, #16
   1132c:	mov	r0, #1
   11330:	bl	1374c <error@@Base+0x40>
   11334:	mov	r6, r0
   11338:	add	r5, r4, #1
   1133c:	add	r0, r4, #2
   11340:	mov	r1, #2
   11344:	str	r5, [r6, #8]
   11348:	rsb	r4, r5, #0
   1134c:	bl	1374c <error@@Base+0x40>
   11350:	mov	r1, r6
   11354:	str	r0, [r6, #12]
   11358:	mov	r0, sl
   1135c:	bl	119ac <__assert_fail@plt+0xe38>
   11360:	ldr	r3, [r7]
   11364:	b	11374 <__assert_fail@plt+0x800>
   11368:	add	r4, r4, #2
   1136c:	cmp	r5, r4
   11370:	blt	113a4 <__assert_fail@plt+0x830>
   11374:	cmp	r4, r3
   11378:	blt	11368 <__assert_fail@plt+0x7f4>
   1137c:	ldr	r2, [fp]
   11380:	cmp	r2, r4
   11384:	blt	11368 <__assert_fail@plt+0x7f4>
   11388:	mov	r0, r4
   1138c:	mov	r1, r6
   11390:	add	r4, r4, #2
   11394:	bl	11110 <__assert_fail@plt+0x59c>
   11398:	cmp	r5, r4
   1139c:	ldr	r3, [r7]
   113a0:	bge	11374 <__assert_fail@plt+0x800>
   113a4:	ldr	r1, [r8]
   113a8:	mov	r4, r5
   113ac:	ldr	r2, [r9]
   113b0:	sub	r2, r2, r1
   113b4:	cmp	r2, r3
   113b8:	bge	11328 <__assert_fail@plt+0x7b4>
   113bc:	add	sp, sp, #4
   113c0:	ldrd	r4, [sp]
   113c4:	ldrd	r6, [sp, #8]
   113c8:	ldrd	r8, [sp, #16]
   113cc:	ldrd	sl, [sp, #24]
   113d0:	add	sp, sp, #32
   113d4:	pop	{pc}		; (ldr pc, [sp], #4)
   113d8:	movw	r3, #45388	; 0xb14c
   113dc:	movt	r3, #2
   113e0:	strd	r4, [sp, #-20]!	; 0xffffffec
   113e4:	movw	r2, #45348	; 0xb124
   113e8:	movt	r2, #2
   113ec:	ldr	r1, [r2]
   113f0:	strd	r6, [sp, #8]
   113f4:	str	lr, [sp, #16]
   113f8:	ldr	lr, [r3, #4]
   113fc:	movw	r3, #5036	; 0x13ac
   11400:	movt	r3, #3
   11404:	ldr	r3, [r3]
   11408:	cmp	lr, #0
   1140c:	sub	r1, r1, r3
   11410:	beq	11504 <__assert_fail@plt+0x990>
   11414:	movw	r3, #5032	; 0x13a8
   11418:	movt	r3, #3
   1141c:	ldr	r2, [lr, #8]
   11420:	mov	ip, #1
   11424:	ldr	r5, [r3]
   11428:	add	r2, r1, r2
   1142c:	ldr	r3, [lr, #12]
   11430:	bic	r2, r2, #1
   11434:	ldr	lr, [lr]
   11438:	ldrh	r3, [r3, r2]
   1143c:	cmp	lr, #0
   11440:	beq	114d8 <__assert_fail@plt+0x964>
   11444:	ldr	r2, [lr, #8]
   11448:	rsb	r0, r2, #0
   1144c:	cmp	r0, r1
   11450:	bge	114c8 <__assert_fail@plt+0x954>
   11454:	ldr	r6, [lr, #12]
   11458:	sub	r4, r1, #1
   1145c:	cmp	r2, r1
   11460:	add	r0, r2, r4
   11464:	bic	r0, r0, #1
   11468:	ldrh	r0, [r6, r0]
   1146c:	ble	11490 <__assert_fail@plt+0x91c>
   11470:	add	r1, r1, #1
   11474:	add	r7, r2, r1
   11478:	bic	r7, r7, #1
   1147c:	ldrh	r6, [r6, r7]
   11480:	add	r6, r6, #1
   11484:	cmp	r0, r6
   11488:	movle	r4, r1
   1148c:	movle	r0, r6
   11490:	cmp	r0, r3
   11494:	bge	114c0 <__assert_fail@plt+0x94c>
   11498:	sub	r3, r3, #1
   1149c:	add	r2, r5, r3, lsl #2
   114a0:	ldr	r1, [r2], #-4
   114a4:	cmp	r3, r0
   114a8:	sub	r3, r3, #1
   114ac:	strb	ip, [r1, #4]
   114b0:	bgt	114a0 <__assert_fail@plt+0x92c>
   114b4:	cmp	lr, #0
   114b8:	beq	11504 <__assert_fail@plt+0x990>
   114bc:	ldr	r2, [lr, #8]
   114c0:	mov	r1, r4
   114c4:	b	11428 <__assert_fail@plt+0x8b4>
   114c8:	cmp	r2, r1
   114cc:	bgt	114e8 <__assert_fail@plt+0x974>
   114d0:	mov	r0, #0
   114d4:	b	11490 <__assert_fail@plt+0x91c>
   114d8:	cmp	r3, #0
   114dc:	beq	11504 <__assert_fail@plt+0x990>
   114e0:	mov	r0, lr
   114e4:	b	11498 <__assert_fail@plt+0x924>
   114e8:	ldr	r0, [lr, #12]
   114ec:	add	r4, r1, #1
   114f0:	add	r1, r2, r4
   114f4:	bic	r1, r1, #1
   114f8:	ldrh	r0, [r0, r1]
   114fc:	add	r0, r0, #1
   11500:	b	11490 <__assert_fail@plt+0x91c>
   11504:	ldrd	r4, [sp]
   11508:	ldrd	r6, [sp, #8]
   1150c:	add	sp, sp, #16
   11510:	pop	{pc}		; (ldr pc, [sp], #4)
   11514:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11518:	mov	r5, r2
   1151c:	strd	r6, [sp, #8]
   11520:	add	r6, r0, #4096	; 0x1000
   11524:	strd	r8, [sp, #16]
   11528:	mov	r8, r1
   1152c:	strd	sl, [sp, #24]
   11530:	str	lr, [sp, #32]
   11534:	sub	sp, sp, #12
   11538:	bl	12ad4 <__assert_fail@plt+0x1f60>
   1153c:	ldr	r3, [r6, #3956]	; 0xf74
   11540:	cmp	r3, #0
   11544:	ble	115f8 <__assert_fail@plt+0xa84>
   11548:	cmp	r5, #0
   1154c:	beq	11614 <__assert_fail@plt+0xaa0>
   11550:	movw	sl, #53460	; 0xd0d4
   11554:	movt	sl, #2
   11558:	add	r3, r5, #88	; 0x58
   1155c:	mov	r7, #0
   11560:	str	r3, [sp, #4]
   11564:	ldr	r3, [r6, #3952]	; 0xf70
   11568:	mov	r0, sl
   1156c:	ldr	r3, [r3, r7, lsl #2]
   11570:	ldr	r4, [r3, #12]
   11574:	ldr	fp, [r3, #16]
   11578:	mov	r1, r4
   1157c:	mov	r2, fp
   11580:	sub	r9, r4, fp
   11584:	bl	1245c <__assert_fail@plt+0x18e8>
   11588:	mov	r1, r4
   1158c:	mov	r2, fp
   11590:	mov	r0, r8
   11594:	clz	r9, r9
   11598:	bl	1245c <__assert_fail@plt+0x18e8>
   1159c:	ldr	r2, [r6, #3952]	; 0xf70
   115a0:	lsr	r9, r9, #5
   115a4:	ldr	r2, [r2, r7, lsl #2]
   115a8:	ldr	r0, [r2, #8]
   115ac:	bl	10ae4 <strlen@plt>
   115b0:	add	r0, r8, r0, lsl #3
   115b4:	mov	r2, fp
   115b8:	mov	r1, r4
   115bc:	bl	1245c <__assert_fail@plt+0x18e8>
   115c0:	mov	r2, r9
   115c4:	mov	r1, #1
   115c8:	mov	r0, r5
   115cc:	bl	1245c <__assert_fail@plt+0x18e8>
   115d0:	cmp	r4, #10
   115d4:	mov	r2, r9
   115d8:	add	r0, r5, r4, lsl #3
   115dc:	mov	r1, #1
   115e0:	bgt	11684 <__assert_fail@plt+0xb10>
   115e4:	bl	1245c <__assert_fail@plt+0x18e8>
   115e8:	ldr	r3, [r6, #3956]	; 0xf74
   115ec:	add	r7, r7, #1
   115f0:	cmp	r7, r3
   115f4:	blt	11564 <__assert_fail@plt+0x9f0>
   115f8:	add	sp, sp, #12
   115fc:	ldrd	r4, [sp]
   11600:	ldrd	r6, [sp, #8]
   11604:	ldrd	r8, [sp, #16]
   11608:	ldrd	sl, [sp, #24]
   1160c:	add	sp, sp, #32
   11610:	pop	{pc}		; (ldr pc, [sp], #4)
   11614:	movw	r9, #53460	; 0xd0d4
   11618:	movt	r9, #2
   1161c:	mov	r4, r5
   11620:	ldr	r3, [r6, #3952]	; 0xf70
   11624:	mov	r0, r9
   11628:	ldr	r3, [r3, r4, lsl #2]
   1162c:	ldr	r5, [r3, #12]
   11630:	ldr	r7, [r3, #16]
   11634:	mov	r1, r5
   11638:	mov	r2, r7
   1163c:	bl	1245c <__assert_fail@plt+0x18e8>
   11640:	mov	r2, r7
   11644:	mov	r1, r5
   11648:	mov	r0, r8
   1164c:	bl	1245c <__assert_fail@plt+0x18e8>
   11650:	ldr	r3, [r6, #3952]	; 0xf70
   11654:	ldr	r3, [r3, r4, lsl #2]
   11658:	add	r4, r4, #1
   1165c:	ldr	r0, [r3, #8]
   11660:	bl	10ae4 <strlen@plt>
   11664:	add	r0, r8, r0, lsl #3
   11668:	mov	r2, r7
   1166c:	mov	r1, r5
   11670:	bl	1245c <__assert_fail@plt+0x18e8>
   11674:	ldr	r3, [r6, #3956]	; 0xf74
   11678:	cmp	r4, r3
   1167c:	blt	11620 <__assert_fail@plt+0xaac>
   11680:	b	115f8 <__assert_fail@plt+0xa84>
   11684:	mov	r1, #1
   11688:	ldr	r0, [sp, #4]
   1168c:	add	r7, r7, r1
   11690:	bl	1245c <__assert_fail@plt+0x18e8>
   11694:	ldr	r3, [r6, #3956]	; 0xf74
   11698:	cmp	r3, r7
   1169c:	bgt	11564 <__assert_fail@plt+0x9f0>
   116a0:	b	115f8 <__assert_fail@plt+0xa84>
   116a4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   116a8:	strd	r6, [sp, #8]
   116ac:	strd	r8, [sp, #16]
   116b0:	movw	r8, #45356	; 0xb12c
   116b4:	movt	r8, #2
   116b8:	ldr	r3, [r8, #12]
   116bc:	str	sl, [sp, #24]
   116c0:	str	lr, [sp, #28]
   116c4:	cmp	r3, #0
   116c8:	movwgt	sl, #5044	; 0x13b4
   116cc:	movgt	r7, #7
   116d0:	movtgt	sl, #3
   116d4:	movgt	r9, #0
   116d8:	ble	11740 <__assert_fail@plt+0xbcc>
   116dc:	cmp	r9, r3
   116e0:	ldrlt	r6, [pc, #112]	; 11758 <__assert_fail@plt+0xbe4>
   116e4:	movlt	r4, r9
   116e8:	movlt	r5, #1
   116ec:	blt	116fc <__assert_fail@plt+0xb88>
   116f0:	b	11730 <__assert_fail@plt+0xbbc>
   116f4:	cmp	r3, r4
   116f8:	ble	11730 <__assert_fail@plt+0xbbc>
   116fc:	ldr	r3, [sl]
   11700:	mov	r1, #1
   11704:	mov	r0, r6
   11708:	add	r6, r6, #8
   1170c:	add	r3, r3, r4, lsl #3
   11710:	ldrb	r3, [r3, #4]
   11714:	and	r5, r5, r3
   11718:	eor	r2, r5, r1
   1171c:	bl	1245c <__assert_fail@plt+0x18e8>
   11720:	cmp	r4, r7
   11724:	add	r4, r4, #1
   11728:	ldr	r3, [r8, #12]
   1172c:	bne	116f4 <__assert_fail@plt+0xb80>
   11730:	add	r9, r9, #1
   11734:	add	r7, r7, #1
   11738:	cmp	r9, r3
   1173c:	blt	116dc <__assert_fail@plt+0xb68>
   11740:	ldrd	r4, [sp]
   11744:	ldrd	r6, [sp, #8]
   11748:	ldrd	r8, [sp, #16]
   1174c:	ldr	sl, [sp, #24]
   11750:	add	sp, sp, #28
   11754:	pop	{pc}		; (ldr pc, [sp], #4)
   11758:	andeq	sp, r2, r4, ror r4
   1175c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11760:	strd	r6, [sp, #8]
   11764:	movw	r7, #45356	; 0xb12c
   11768:	movt	r7, #2
   1176c:	ldr	r3, [r7, #12]
   11770:	strd	r8, [sp, #16]
   11774:	strd	sl, [sp, #24]
   11778:	str	lr, [sp, #32]
   1177c:	sub	sp, sp, #4
   11780:	cmp	r3, #0
   11784:	ble	117f4 <__assert_fail@plt+0xc80>
   11788:	ldr	r9, [pc, #404]	; 11924 <__assert_fail@plt+0xdb0>
   1178c:	movw	r6, #5044	; 0x13b4
   11790:	movt	r6, #3
   11794:	mov	r4, #0
   11798:	ldr	r8, [pc, #392]	; 11928 <__assert_fail@plt+0xdb4>
   1179c:	lsl	r5, r4, #3
   117a0:	ldr	r3, [r6]
   117a4:	ldr	r3, [r3, r4, lsl #3]
   117a8:	ldr	r0, [r3, #8]
   117ac:	bl	11da4 <__assert_fail@plt+0x1230>
   117b0:	ldr	r3, [r6]
   117b4:	cmp	r0, #0
   117b8:	mov	r2, #1
   117bc:	mov	r0, r8
   117c0:	moveq	r2, #1
   117c4:	moveq	r0, r9
   117c8:	add	r5, r3, r5
   117cc:	ldr	r1, [r3, r4, lsl #3]
   117d0:	add	r4, r4, r2
   117d4:	ldrb	r3, [r5, #4]
   117d8:	ldr	r1, [r1, #8]
   117dc:	clz	r3, r3
   117e0:	lsr	r3, r3, #5
   117e4:	bl	12474 <__assert_fail@plt+0x1900>
   117e8:	ldr	r3, [r7, #12]
   117ec:	cmp	r3, r4
   117f0:	bgt	1179c <__assert_fail@plt+0xc28>
   117f4:	ldr	r8, [pc, #304]	; 1192c <__assert_fail@plt+0xdb8>
   117f8:	ldr	r0, [pc, #296]	; 11928 <__assert_fail@plt+0xdb4>
   117fc:	bl	12ad4 <__assert_fail@plt+0x1f60>
   11800:	ldr	r3, [r8, #852]	; 0x354
   11804:	cmp	r3, #0
   11808:	ble	1187c <__assert_fail@plt+0xd08>
   1180c:	ldr	r9, [pc, #284]	; 11930 <__assert_fail@plt+0xdbc>
   11810:	mov	r4, #0
   11814:	sub	fp, r8, #8192	; 0x2000
   11818:	mov	sl, r9
   1181c:	ldr	r3, [r8, #848]	; 0x350
   11820:	mov	r0, fp
   11824:	ldr	r3, [r3, r4, lsl #2]
   11828:	ldr	r5, [r3, #12]
   1182c:	ldr	r6, [r3, #16]
   11830:	mov	r1, r5
   11834:	mov	r2, r6
   11838:	bl	1245c <__assert_fail@plt+0x18e8>
   1183c:	mov	r2, r6
   11840:	mov	r1, r5
   11844:	mov	r0, sl
   11848:	bl	1245c <__assert_fail@plt+0x18e8>
   1184c:	ldr	r3, [r8, #848]	; 0x350
   11850:	ldr	r3, [r3, r4, lsl #2]
   11854:	add	r4, r4, #1
   11858:	ldr	r0, [r3, #8]
   1185c:	bl	10ae4 <strlen@plt>
   11860:	add	r0, r9, r0, lsl #3
   11864:	mov	r2, r6
   11868:	mov	r1, r5
   1186c:	bl	1245c <__assert_fail@plt+0x18e8>
   11870:	ldr	r3, [r8, #852]	; 0x354
   11874:	cmp	r4, r3
   11878:	blt	1181c <__assert_fail@plt+0xca8>
   1187c:	ldr	r2, [pc, #176]	; 11934 <__assert_fail@plt+0xdc0>
   11880:	ldr	r0, [pc, #156]	; 11924 <__assert_fail@plt+0xdb0>
   11884:	sub	r1, r2, #408	; 0x198
   11888:	bl	11514 <__assert_fail@plt+0x9a0>
   1188c:	ldr	r3, [r7, #12]
   11890:	cmp	r3, #0
   11894:	movwgt	sl, #5044	; 0x13b4
   11898:	movgt	r5, #0
   1189c:	movtgt	sl, #3
   118a0:	ble	11908 <__assert_fail@plt+0xd94>
   118a4:	cmp	r5, r3
   118a8:	bge	118fc <__assert_fail@plt+0xd88>
   118ac:	ldr	r8, [pc, #132]	; 11938 <__assert_fail@plt+0xdc4>
   118b0:	mov	r4, r5
   118b4:	mov	r6, #1
   118b8:	add	r9, r5, #7
   118bc:	b	118c8 <__assert_fail@plt+0xd54>
   118c0:	cmp	r4, r3
   118c4:	bge	118fc <__assert_fail@plt+0xd88>
   118c8:	ldr	r3, [sl]
   118cc:	mov	r1, #1
   118d0:	mov	r0, r8
   118d4:	add	r8, r8, #8
   118d8:	add	r3, r3, r4, lsl #3
   118dc:	ldrb	r3, [r3, #4]
   118e0:	and	r6, r6, r3
   118e4:	eor	r2, r6, r1
   118e8:	bl	1245c <__assert_fail@plt+0x18e8>
   118ec:	cmp	r9, r4
   118f0:	add	r4, r4, #1
   118f4:	ldr	r3, [r7, #12]
   118f8:	bne	118c0 <__assert_fail@plt+0xd4c>
   118fc:	add	r5, r5, #1
   11900:	cmp	r5, r3
   11904:	blt	118a4 <__assert_fail@plt+0xd30>
   11908:	add	sp, sp, #4
   1190c:	ldrd	r4, [sp]
   11910:	ldrd	r6, [sp, #8]
   11914:	ldrd	r8, [sp, #16]
   11918:	ldrd	sl, [sp, #24]
   1191c:	add	sp, sp, #32
   11920:	pop	{pc}		; (ldr pc, [sp], #4)
   11924:	andeq	pc, r2, ip, lsr #8
   11928:			; <UNDEFINED> instruction: 0x0002d4b4
   1192c:	ldrdeq	pc, [r2], -r4
   11930:	ldrdeq	sp, [r2], -ip
   11934:	andeq	sp, r2, ip, lsl #8
   11938:	andeq	sp, r2, r4, ror r4
   1193c:	mov	r3, #0
   11940:	str	r3, [r0]
   11944:	str	r3, [r0, #4]
   11948:	str	r3, [r0, #8]
   1194c:	str	r3, [r0, #12]
   11950:	bx	lr
   11954:	ldr	r3, [r0]
   11958:	mov	r2, #0
   1195c:	str	r4, [sp, #-8]!
   11960:	mov	r4, r0
   11964:	str	lr, [sp, #4]
   11968:	cmp	r3, r2
   1196c:	strd	r2, [r1]
   11970:	str	r1, [r0]
   11974:	streq	r1, [r0, #4]
   11978:	ldr	r0, [r0, #8]
   1197c:	strne	r1, [r3]
   11980:	cmp	r0, #0
   11984:	beq	11994 <__assert_fail@plt+0xe20>
   11988:	bl	10a00 <free@plt>
   1198c:	mov	r3, #0
   11990:	str	r3, [r4, #8]
   11994:	ldr	r3, [r4, #12]
   11998:	add	r3, r3, #1
   1199c:	str	r3, [r4, #12]
   119a0:	ldr	r4, [sp]
   119a4:	add	sp, sp, #4
   119a8:	pop	{pc}		; (ldr pc, [sp], #4)
   119ac:	ldr	r3, [r0, #4]
   119b0:	mov	r2, #0
   119b4:	str	r4, [sp, #-8]!
   119b8:	mov	r4, r0
   119bc:	str	lr, [sp, #4]
   119c0:	cmp	r3, r2
   119c4:	str	r3, [r1]
   119c8:	str	r2, [r1, #4]
   119cc:	streq	r1, [r0]
   119d0:	ldr	r0, [r0, #8]
   119d4:	strne	r1, [r3, #4]
   119d8:	str	r1, [r4, #4]
   119dc:	cmp	r0, #0
   119e0:	beq	119f0 <__assert_fail@plt+0xe7c>
   119e4:	bl	10a00 <free@plt>
   119e8:	mov	r3, #0
   119ec:	str	r3, [r4, #8]
   119f0:	ldr	r3, [r4, #12]
   119f4:	add	r3, r3, #1
   119f8:	str	r3, [r4, #12]
   119fc:	ldr	r4, [sp]
   11a00:	add	sp, sp, #4
   11a04:	pop	{pc}		; (ldr pc, [sp], #4)
   11a08:	ldr	r3, [r2]
   11a0c:	str	r4, [sp, #-8]!
   11a10:	mov	r4, r0
   11a14:	str	lr, [sp, #4]
   11a18:	cmp	r3, #0
   11a1c:	str	r3, [r1]
   11a20:	str	r2, [r1, #4]
   11a24:	streq	r1, [r0]
   11a28:	ldr	r0, [r0, #8]
   11a2c:	strne	r1, [r3, #4]
   11a30:	str	r1, [r2]
   11a34:	cmp	r0, #0
   11a38:	beq	11a48 <__assert_fail@plt+0xed4>
   11a3c:	bl	10a00 <free@plt>
   11a40:	mov	r3, #0
   11a44:	str	r3, [r4, #8]
   11a48:	ldr	r3, [r4, #12]
   11a4c:	add	r3, r3, #1
   11a50:	str	r3, [r4, #12]
   11a54:	ldr	r4, [sp]
   11a58:	add	sp, sp, #4
   11a5c:	pop	{pc}		; (ldr pc, [sp], #4)
   11a60:	ldr	r3, [r1, #4]
   11a64:	str	r4, [sp, #-8]!
   11a68:	mov	r4, r0
   11a6c:	str	lr, [sp, #4]
   11a70:	cmp	r3, #0
   11a74:	stm	r2, {r1, r3}
   11a78:	str	r2, [r1, #4]
   11a7c:	streq	r2, [r0, #4]
   11a80:	ldr	r0, [r0, #8]
   11a84:	strne	r2, [r3]
   11a88:	cmp	r0, #0
   11a8c:	beq	11a9c <__assert_fail@plt+0xf28>
   11a90:	bl	10a00 <free@plt>
   11a94:	mov	r3, #0
   11a98:	str	r3, [r4, #8]
   11a9c:	ldr	r3, [r4, #12]
   11aa0:	add	r3, r3, #1
   11aa4:	str	r3, [r4, #12]
   11aa8:	ldr	r4, [sp]
   11aac:	add	sp, sp, #4
   11ab0:	pop	{pc}		; (ldr pc, [sp], #4)
   11ab4:	ldrd	r2, [r1]
   11ab8:	strd	r4, [sp, #-16]!
   11abc:	mov	r4, r0
   11ac0:	mov	r5, #0
   11ac4:	str	r6, [sp, #8]
   11ac8:	str	lr, [sp, #12]
   11acc:	cmp	r2, #0
   11ad0:	strne	r3, [r2, #4]
   11ad4:	ldrne	r3, [r1, #4]
   11ad8:	streq	r3, [r0]
   11adc:	cmp	r3, #0
   11ae0:	streq	r2, [r0, #4]
   11ae4:	ldr	r0, [r0, #8]
   11ae8:	strne	r2, [r3]
   11aec:	str	r5, [r1]
   11af0:	str	r5, [r1, #4]
   11af4:	cmp	r0, r5
   11af8:	beq	11b04 <__assert_fail@plt+0xf90>
   11afc:	bl	10a00 <free@plt>
   11b00:	str	r5, [r4, #8]
   11b04:	ldr	r3, [r4, #12]
   11b08:	ldr	r6, [sp, #8]
   11b0c:	sub	r3, r3, #1
   11b10:	str	r3, [r4, #12]
   11b14:	ldrd	r4, [sp]
   11b18:	add	sp, sp, #12
   11b1c:	pop	{pc}		; (ldr pc, [sp], #4)
   11b20:	ldr	r3, [r0, #8]
   11b24:	cmp	r3, #0
   11b28:	bxne	lr
   11b2c:	ldr	r3, [r0, #12]
   11b30:	cmp	r3, #0
   11b34:	bxeq	lr
   11b38:	mov	r1, #4
   11b3c:	str	r4, [sp, #-8]!
   11b40:	mov	r4, r0
   11b44:	mov	r0, r3
   11b48:	str	lr, [sp, #4]
   11b4c:	bl	1374c <error@@Base+0x40>
   11b50:	ldr	r3, [r4]
   11b54:	str	r0, [r4, #8]
   11b58:	cmp	r3, #0
   11b5c:	beq	11b74 <__assert_fail@plt+0x1000>
   11b60:	sub	r0, r0, #4
   11b64:	str	r3, [r0, #4]!
   11b68:	ldr	r3, [r3, #4]
   11b6c:	cmp	r3, #0
   11b70:	bne	11b64 <__assert_fail@plt+0xff0>
   11b74:	ldr	r4, [sp]
   11b78:	add	sp, sp, #4
   11b7c:	pop	{pc}		; (ldr pc, [sp], #4)
   11b80:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11b84:	ldr	r4, [r0]
   11b88:	strd	r6, [sp, #8]
   11b8c:	str	r8, [sp, #16]
   11b90:	str	lr, [sp, #20]
   11b94:	cmp	r4, #0
   11b98:	beq	11c18 <__assert_fail@plt+0x10a4>
   11b9c:	mov	r7, r1
   11ba0:	mov	r5, r0
   11ba4:	mov	r6, #0
   11ba8:	b	11bd8 <__assert_fail@plt+0x1064>
   11bac:	mov	r0, r3
   11bb0:	bl	10a00 <free@plt>
   11bb4:	ldr	r3, [r5, #12]
   11bb8:	mov	r0, r4
   11bbc:	str	r6, [r5, #8]
   11bc0:	sub	r3, r3, #1
   11bc4:	str	r3, [r5, #12]
   11bc8:	blx	r7
   11bcc:	ldr	r4, [r5]
   11bd0:	cmp	r4, #0
   11bd4:	beq	11c18 <__assert_fail@plt+0x10a4>
   11bd8:	ldrd	r2, [r4]
   11bdc:	mov	r0, r4
   11be0:	cmp	r2, #0
   11be4:	strne	r3, [r2, #4]
   11be8:	ldrne	r3, [r4, #4]
   11bec:	streq	r3, [r5]
   11bf0:	cmp	r3, #0
   11bf4:	strne	r2, [r3]
   11bf8:	ldr	r3, [r5, #8]
   11bfc:	streq	r2, [r5, #4]
   11c00:	str	r6, [r4]
   11c04:	str	r6, [r4, #4]
   11c08:	cmp	r3, #0
   11c0c:	bne	11bac <__assert_fail@plt+0x1038>
   11c10:	ldr	r3, [r5, #12]
   11c14:	b	11bc0 <__assert_fail@plt+0x104c>
   11c18:	ldrd	r4, [sp]
   11c1c:	ldrd	r6, [sp, #8]
   11c20:	ldr	r8, [sp, #16]
   11c24:	add	sp, sp, #20
   11c28:	pop	{pc}		; (ldr pc, [sp], #4)
   11c2c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11c30:	strd	r6, [sp, #8]
   11c34:	strd	r8, [sp, #16]
   11c38:	movw	r9, #37108	; 0x90f4
   11c3c:	movt	r9, #2
   11c40:	ldrb	r3, [r9]
   11c44:	str	sl, [sp, #24]
   11c48:	str	lr, [sp, #28]
   11c4c:	cmp	r3, #0
   11c50:	bne	11d94 <__assert_fail@plt+0x1220>
   11c54:	cmp	r0, #0
   11c58:	beq	11d28 <__assert_fail@plt+0x11b4>
   11c5c:	mov	r1, r0
   11c60:	movw	r2, #37068	; 0x90cc
   11c64:	movt	r2, #2
   11c68:	add	r0, r9, #4
   11c6c:	bl	13bd8 <error@@Base+0x4cc>
   11c70:	add	r1, r9, #4
   11c74:	add	r0, r9, #20
   11c78:	bl	12cd4 <__assert_fail@plt+0x2160>
   11c7c:	movw	r1, #2560	; 0xa00
   11c80:	movt	r1, #1
   11c84:	add	r0, r9, #4
   11c88:	bl	11b80 <__assert_fail@plt+0x100c>
   11c8c:	ldr	r4, [r9, #20]
   11c90:	cmp	r4, #0
   11c94:	beq	11cd8 <__assert_fail@plt+0x1164>
   11c98:	movw	r6, #37144	; 0x9118
   11c9c:	movt	r6, #2
   11ca0:	movw	r7, #18640	; 0x48d0
   11ca4:	movt	r7, #1
   11ca8:	ldr	r5, [r4, #8]
   11cac:	mov	r0, r6
   11cb0:	mov	r1, r5
   11cb4:	bl	12940 <__assert_fail@plt+0x1dcc>
   11cb8:	cmp	r0, #0
   11cbc:	beq	11cf8 <__assert_fail@plt+0x1184>
   11cc0:	mov	r1, r5
   11cc4:	mov	r0, r7
   11cc8:	bl	13b50 <error@@Base+0x444>
   11ccc:	ldr	r4, [r4, #4]
   11cd0:	cmp	r4, #0
   11cd4:	bne	11ca8 <__assert_fail@plt+0x1134>
   11cd8:	mov	r3, #1
   11cdc:	ldrd	r4, [sp]
   11ce0:	strb	r3, [r9]
   11ce4:	ldrd	r6, [sp, #8]
   11ce8:	ldrd	r8, [sp, #16]
   11cec:	ldr	sl, [sp, #24]
   11cf0:	add	sp, sp, #28
   11cf4:	pop	{pc}		; (ldr pc, [sp], #4)
   11cf8:	mov	r1, #12
   11cfc:	mov	r0, #1
   11d00:	bl	1374c <error@@Base+0x40>
   11d04:	mov	r3, r0
   11d08:	mov	r0, r6
   11d0c:	mov	r1, r3
   11d10:	str	r5, [r3, #8]
   11d14:	bl	129cc <__assert_fail@plt+0x1e58>
   11d18:	ldr	r4, [r4, #4]
   11d1c:	cmp	r4, #0
   11d20:	bne	11ca8 <__assert_fail@plt+0x1134>
   11d24:	b	11cd8 <__assert_fail@plt+0x1164>
   11d28:	ldr	r4, [pc, #112]	; 11da0 <__assert_fail@plt+0x122c>
   11d2c:	movw	r6, #37144	; 0x9118
   11d30:	movt	r6, #2
   11d34:	movw	r8, #18640	; 0x48d0
   11d38:	movt	r8, #1
   11d3c:	add	r7, r4, #440	; 0x1b8
   11d40:	b	11d58 <__assert_fail@plt+0x11e4>
   11d44:	mov	r1, r5
   11d48:	mov	r0, r8
   11d4c:	bl	13b50 <error@@Base+0x444>
   11d50:	cmp	r7, r4
   11d54:	beq	11cd8 <__assert_fail@plt+0x1164>
   11d58:	ldr	r5, [r4, #4]!
   11d5c:	mov	r0, r6
   11d60:	mov	r1, r5
   11d64:	bl	12940 <__assert_fail@plt+0x1dcc>
   11d68:	cmp	r0, #0
   11d6c:	bne	11d44 <__assert_fail@plt+0x11d0>
   11d70:	mov	r1, #12
   11d74:	mov	r0, #1
   11d78:	bl	1374c <error@@Base+0x40>
   11d7c:	mov	r3, r0
   11d80:	mov	r0, r6
   11d84:	mov	r1, r3
   11d88:	str	r5, [r3, #8]
   11d8c:	bl	129cc <__assert_fail@plt+0x1e58>
   11d90:	b	11d50 <__assert_fail@plt+0x11dc>
   11d94:	movw	r0, #18608	; 0x48b0
   11d98:	movt	r0, #1
   11d9c:	bl	1370c <error@@Base>
   11da0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   11da4:	movw	r3, #37108	; 0x90f4
   11da8:	movt	r3, #2
   11dac:	str	r4, [sp, #-8]!
   11db0:	str	lr, [sp, #4]
   11db4:	ldrb	r3, [r3]
   11db8:	cmp	r3, #0
   11dbc:	beq	11de4 <__assert_fail@plt+0x1270>
   11dc0:	mov	r1, r0
   11dc4:	movw	r0, #37144	; 0x9118
   11dc8:	movt	r0, #2
   11dcc:	bl	12940 <__assert_fail@plt+0x1dcc>
   11dd0:	adds	r0, r0, #0
   11dd4:	ldr	r4, [sp]
   11dd8:	add	sp, sp, #4
   11ddc:	movne	r0, #1
   11de0:	pop	{pc}		; (ldr pc, [sp], #4)
   11de4:	movw	r0, #18660	; 0x48e4
   11de8:	movt	r0, #1
   11dec:	bl	1370c <error@@Base>
   11df0:	ldr	r0, [r0, #8]
   11df4:	ldr	r1, [r1, #8]
   11df8:	b	13514 <__assert_fail@plt+0x29a0>
   11dfc:	mov	r2, r0
   11e00:	strd	r4, [sp, #-28]!	; 0xffffffe4
   11e04:	strd	r6, [sp, #8]
   11e08:	mov	r6, r0
   11e0c:	mov	r7, r1
   11e10:	movw	r0, #45200	; 0xb090
   11e14:	movt	r0, #2
   11e18:	strd	r8, [sp, #16]
   11e1c:	mov	r1, #99	; 0x63
   11e20:	str	lr, [sp, #24]
   11e24:	sub	sp, sp, #12
   11e28:	bl	10a18 <fgets@plt>
   11e2c:	cmp	r0, #0
   11e30:	beq	11efc <__assert_fail@plt+0x1388>
   11e34:	movw	r0, #45200	; 0xb090
   11e38:	movt	r0, #2
   11e3c:	mov	r2, r6
   11e40:	mov	r1, #99	; 0x63
   11e44:	bl	10a18 <fgets@plt>
   11e48:	cmp	r0, #0
   11e4c:	beq	11efc <__assert_fail@plt+0x1388>
   11e50:	movw	r4, #45200	; 0xb090
   11e54:	movt	r4, #2
   11e58:	movw	r8, #19340	; 0x4b8c
   11e5c:	movt	r8, #1
   11e60:	add	r5, r4, #29
   11e64:	mov	r9, #0
   11e68:	b	11e88 <__assert_fail@plt+0x1314>
   11e6c:	ldr	r0, [sp]
   11e70:	add	r3, r7, r3, lsl #3
   11e74:	ldm	r3, {r1, r2}
   11e78:	ldr	ip, [sp, #4]
   11e7c:	add	r1, r1, r0
   11e80:	add	r2, r2, ip
   11e84:	stm	r3, {r1, r2}
   11e88:	mov	r2, r6
   11e8c:	mov	r1, #99	; 0x63
   11e90:	mov	r0, r4
   11e94:	bl	10a18 <fgets@plt>
   11e98:	cmp	r0, #0
   11e9c:	add	r3, sp, #4
   11ea0:	mov	r2, sp
   11ea4:	mov	r1, r8
   11ea8:	mov	r0, r4
   11eac:	beq	11f00 <__assert_fail@plt+0x138c>
   11eb0:	bl	10afc <__isoc99_sscanf@plt>
   11eb4:	cmp	r0, #2
   11eb8:	bne	11f00 <__assert_fail@plt+0x138c>
   11ebc:	mov	r1, #0
   11ec0:	mov	r2, #10
   11ec4:	mov	r0, r5
   11ec8:	bl	109e8 <strtol@plt>
   11ecc:	subs	r3, r0, #0
   11ed0:	movw	r1, #19332	; 0x4b84
   11ed4:	movt	r1, #1
   11ed8:	mov	r0, r5
   11edc:	bne	11e6c <__assert_fail@plt+0x12f8>
   11ee0:	bl	109dc <strcmp@plt>
   11ee4:	cmp	r0, #0
   11ee8:	ldr	r0, [sp]
   11eec:	mov	r3, r7
   11ef0:	addne	r3, r7, #88	; 0x58
   11ef4:	moveq	r9, r0
   11ef8:	b	11e74 <__assert_fail@plt+0x1300>
   11efc:	mov	r9, #0
   11f00:	mov	r0, r9
   11f04:	add	sp, sp, #12
   11f08:	ldrd	r4, [sp]
   11f0c:	ldrd	r6, [sp, #8]
   11f10:	ldrd	r8, [sp, #16]
   11f14:	add	sp, sp, #24
   11f18:	pop	{pc}		; (ldr pc, [sp], #4)
   11f1c:	strd	r4, [sp, #-16]!
   11f20:	subs	r4, r1, #0
   11f24:	mov	r5, r0
   11f28:	str	r6, [sp, #8]
   11f2c:	str	lr, [sp, #12]
   11f30:	beq	11fcc <__assert_fail@plt+0x1458>
   11f34:	movw	r1, #19348	; 0x4b94
   11f38:	movt	r1, #1
   11f3c:	ldrd	r2, [r4]
   11f40:	bl	10af0 <fprintf@plt>
   11f44:	ldr	r3, [r4]
   11f48:	cmp	r3, #0
   11f4c:	beq	11fb0 <__assert_fail@plt+0x143c>
   11f50:	ldr	r2, [r4, #4]
   11f54:	movw	r1, #19372	; 0x4bac
   11f58:	movt	r1, #1
   11f5c:	vmov	s15, r3
   11f60:	mov	r0, r5
   11f64:	vldr	d5, [pc, #124]	; 11fe8 <__assert_fail@plt+0x1474>
   11f68:	sub	r3, r3, r2
   11f6c:	vmov	s14, r3
   11f70:	vcvt.f64.s32	d6, s15
   11f74:	vcvt.f64.s32	d7, s14
   11f78:	vmul.f64	d7, d7, d5
   11f7c:	vdiv.f64	d7, d7, d6
   11f80:	vmov	r2, r3, d7
   11f84:	bl	10af0 <fprintf@plt>
   11f88:	mov	r3, r5
   11f8c:	movw	r0, #19408	; 0x4bd0
   11f90:	movt	r0, #1
   11f94:	mov	r2, #3
   11f98:	ldrd	r4, [sp]
   11f9c:	mov	r1, #1
   11fa0:	ldr	r6, [sp, #8]
   11fa4:	ldr	lr, [sp, #12]
   11fa8:	add	sp, sp, #16
   11fac:	b	10a6c <fwrite@plt>
   11fb0:	movw	r0, #19360	; 0x4ba0
   11fb4:	movt	r0, #1
   11fb8:	mov	r3, r5
   11fbc:	mov	r2, #8
   11fc0:	mov	r1, #1
   11fc4:	bl	10a6c <fwrite@plt>
   11fc8:	b	11f88 <__assert_fail@plt+0x1414>
   11fcc:	movw	r0, #19380	; 0x4bb4
   11fd0:	movt	r0, #1
   11fd4:	mov	r3, r5
   11fd8:	mov	r2, #26
   11fdc:	mov	r1, #1
   11fe0:	bl	10a6c <fwrite@plt>
   11fe4:	b	11f88 <__assert_fail@plt+0x1414>
   11fe8:	andeq	r0, r0, r0
   11fec:	subsmi	r0, r9, r0
   11ff0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11ff4:	movw	r5, #45200	; 0xb090
   11ff8:	movt	r5, #2
   11ffc:	mov	r2, r0
   12000:	strd	r6, [sp, #8]
   12004:	strd	r8, [sp, #16]
   12008:	mov	r8, r0
   1200c:	mov	r9, r1
   12010:	mov	r0, r5
   12014:	mov	r1, #99	; 0x63
   12018:	strd	sl, [sp, #24]
   1201c:	str	lr, [sp, #32]
   12020:	sub	sp, sp, #20
   12024:	bl	10a18 <fgets@plt>
   12028:	cmp	r0, #0
   1202c:	beq	120d0 <__assert_fail@plt+0x155c>
   12030:	mov	r2, r8
   12034:	mov	r1, #99	; 0x63
   12038:	mov	r0, r5
   1203c:	bl	10a18 <fgets@plt>
   12040:	cmp	r0, #0
   12044:	beq	120d0 <__assert_fail@plt+0x155c>
   12048:	movw	sl, #19340	; 0x4b8c
   1204c:	movt	sl, #1
   12050:	mov	r4, r5
   12054:	add	fp, r5, #29
   12058:	b	120a8 <__assert_fail@plt+0x1534>
   1205c:	bl	10afc <__isoc99_sscanf@plt>
   12060:	cmp	r0, #2
   12064:	bne	120d0 <__assert_fail@plt+0x155c>
   12068:	mov	r0, r4
   1206c:	bl	10ae4 <strlen@plt>
   12070:	add	r3, r5, r0
   12074:	mov	r2, #0
   12078:	ldrd	r6, [sp, #8]
   1207c:	mov	r1, fp
   12080:	mov	r0, r9
   12084:	strb	r2, [r3, #-1]
   12088:	bl	12940 <__assert_fail@plt+0x1dcc>
   1208c:	subs	r3, r0, #0
   12090:	beq	120ec <__assert_fail@plt+0x1578>
   12094:	ldr	r1, [r3, #12]
   12098:	ldr	r2, [r3, #16]
   1209c:	add	r6, r1, r6
   120a0:	add	r7, r2, r7
   120a4:	strd	r6, [r3, #12]
   120a8:	mov	r2, r8
   120ac:	mov	r1, #99	; 0x63
   120b0:	mov	r0, r4
   120b4:	bl	10a18 <fgets@plt>
   120b8:	cmp	r0, #0
   120bc:	add	r3, sp, #12
   120c0:	add	r2, sp, #8
   120c4:	mov	r1, sl
   120c8:	mov	r0, r4
   120cc:	bne	1205c <__assert_fail@plt+0x14e8>
   120d0:	add	sp, sp, #20
   120d4:	ldrd	r4, [sp]
   120d8:	ldrd	r6, [sp, #8]
   120dc:	ldrd	r8, [sp, #16]
   120e0:	ldrd	sl, [sp, #24]
   120e4:	add	sp, sp, #32
   120e8:	pop	{pc}		; (ldr pc, [sp], #4)
   120ec:	mov	r1, #20
   120f0:	mov	r0, #1
   120f4:	bl	1374c <error@@Base+0x40>
   120f8:	mov	r3, r0
   120fc:	mov	r0, fp
   12100:	str	r3, [sp, #4]
   12104:	bl	10a30 <strdup@plt>
   12108:	ldr	r3, [sp, #4]
   1210c:	mov	r1, r3
   12110:	str	r0, [r3, #8]
   12114:	mov	r0, r9
   12118:	bl	129cc <__assert_fail@plt+0x1e58>
   1211c:	ldr	r3, [sp, #4]
   12120:	b	12094 <__assert_fail@plt+0x1520>
   12124:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12128:	mov	r5, r0
   1212c:	mov	r0, r1
   12130:	strd	r6, [sp, #8]
   12134:	add	r7, r1, #4096	; 0x1000
   12138:	mov	r4, r2
   1213c:	strd	r8, [sp, #16]
   12140:	str	sl, [sp, #24]
   12144:	str	lr, [sp, #28]
   12148:	vpush	{d8}
   1214c:	bl	12ad4 <__assert_fail@plt+0x1f60>
   12150:	movw	r2, #7664	; 0x1df0
   12154:	movt	r2, #1
   12158:	ldr	r1, [r7, #3952]	; 0xf70
   1215c:	ldr	r0, [r7, #3956]	; 0xf74
   12160:	bl	145d0 <error@@Base+0xec4>
   12164:	mov	r2, r4
   12168:	mov	r0, r5
   1216c:	movw	r1, #19412	; 0x4bd4
   12170:	movt	r1, #1
   12174:	bl	10af0 <fprintf@plt>
   12178:	mov	r3, r5
   1217c:	mov	r2, #26
   12180:	mov	r1, #1
   12184:	movw	r0, #19380	; 0x4bb4
   12188:	movt	r0, #1
   1218c:	bl	10a6c <fwrite@plt>
   12190:	mov	r3, r5
   12194:	mov	r2, #3
   12198:	mov	r1, #1
   1219c:	movw	r0, #19408	; 0x4bd0
   121a0:	movt	r0, #1
   121a4:	bl	10a6c <fwrite@plt>
   121a8:	mov	r1, r5
   121ac:	mov	r0, #10
   121b0:	bl	10b20 <fputc@plt>
   121b4:	ldr	r3, [r7, #3956]	; 0xf74
   121b8:	cmp	r3, #0
   121bc:	ble	122b4 <__assert_fail@plt+0x1740>
   121c0:	movw	r8, #19380	; 0x4bb4
   121c4:	movt	r8, #1
   121c8:	vldr	d8, [pc, #256]	; 122d0 <__assert_fail@plt+0x175c>
   121cc:	mov	r4, #0
   121d0:	b	1224c <__assert_fail@plt+0x16d8>
   121d4:	ldr	r3, [r6, #16]
   121d8:	movw	r1, #19372	; 0x4bac
   121dc:	movt	r1, #1
   121e0:	vmov	s15, ip
   121e4:	mov	r0, r5
   121e8:	sub	r3, ip, r3
   121ec:	vmov	s14, r3
   121f0:	vcvt.f64.s32	d6, s15
   121f4:	vcvt.f64.s32	d7, s14
   121f8:	vmul.f64	d7, d7, d8
   121fc:	vdiv.f64	d7, d7, d6
   12200:	vmov	r2, r3, d7
   12204:	bl	10af0 <fprintf@plt>
   12208:	mov	r1, #1
   1220c:	mov	r3, r5
   12210:	mov	r2, #3
   12214:	movw	r0, #19408	; 0x4bd0
   12218:	movt	r0, #1
   1221c:	add	r4, r4, r1
   12220:	bl	10a6c <fwrite@plt>
   12224:	ldr	r3, [r7, #3952]	; 0xf70
   12228:	movw	r1, #32900	; 0x8084
   1222c:	movt	r1, #1
   12230:	mov	r0, r5
   12234:	ldr	r3, [r3, r9]
   12238:	ldr	r2, [r3, #8]
   1223c:	bl	10af0 <fprintf@plt>
   12240:	ldr	r3, [r7, #3956]	; 0xf74
   12244:	cmp	r3, r4
   12248:	ble	122b4 <__assert_fail@plt+0x1740>
   1224c:	ldr	r3, [r7, #3952]	; 0xf70
   12250:	movw	r1, #19348	; 0x4b94
   12254:	movt	r1, #1
   12258:	mov	r0, r5
   1225c:	lsl	r9, r4, #2
   12260:	ldr	r6, [r3, r4, lsl #2]
   12264:	cmn	r6, #12
   12268:	beq	1229c <__assert_fail@plt+0x1728>
   1226c:	ldrd	r2, [r6, #12]
   12270:	bl	10af0 <fprintf@plt>
   12274:	ldr	ip, [r6, #12]
   12278:	movw	r0, #19360	; 0x4ba0
   1227c:	movt	r0, #1
   12280:	mov	r3, r5
   12284:	mov	r2, #8
   12288:	mov	r1, #1
   1228c:	cmp	ip, #0
   12290:	bne	121d4 <__assert_fail@plt+0x1660>
   12294:	bl	10a6c <fwrite@plt>
   12298:	b	12208 <__assert_fail@plt+0x1694>
   1229c:	mov	r3, r5
   122a0:	mov	r2, #26
   122a4:	mov	r1, #1
   122a8:	mov	r0, r8
   122ac:	bl	10a6c <fwrite@plt>
   122b0:	b	12208 <__assert_fail@plt+0x1694>
   122b4:	vpop	{d8}
   122b8:	ldrd	r4, [sp]
   122bc:	ldrd	r6, [sp, #8]
   122c0:	ldrd	r8, [sp, #16]
   122c4:	ldr	sl, [sp, #24]
   122c8:	add	sp, sp, #28
   122cc:	pop	{pc}		; (ldr pc, [sp], #4)
   122d0:	andeq	r0, r0, r0
   122d4:	subsmi	r0, r9, r0
   122d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   122dc:	mov	r5, r1
   122e0:	movw	r1, #19412	; 0x4bd4
   122e4:	movt	r1, #1
   122e8:	strd	r6, [sp, #8]
   122ec:	mov	r6, r0
   122f0:	strd	r8, [sp, #16]
   122f4:	mov	r9, r2
   122f8:	mov	r2, r3
   122fc:	strd	sl, [sp, #24]
   12300:	sub	fp, r9, #1
   12304:	movw	r7, #19436	; 0x4bec
   12308:	movt	r7, #1
   1230c:	str	lr, [sp, #32]
   12310:	sub	sp, sp, #4
   12314:	ldrb	r8, [sp, #40]	; 0x28
   12318:	uxth	fp, fp
   1231c:	mov	r4, #1
   12320:	add	fp, fp, #2
   12324:	ldrb	sl, [sp, #44]	; 0x2c
   12328:	bl	10af0 <fprintf@plt>
   1232c:	mov	r3, r6
   12330:	mov	r2, #26
   12334:	mov	r1, #1
   12338:	movw	r0, #19380	; 0x4bb4
   1233c:	movt	r0, #1
   12340:	bl	10a6c <fwrite@plt>
   12344:	mov	r3, r6
   12348:	mov	r2, #3
   1234c:	mov	r1, #1
   12350:	movw	r0, #19408	; 0x4bd0
   12354:	movt	r0, #1
   12358:	bl	10a6c <fwrite@plt>
   1235c:	cmp	r8, #0
   12360:	movw	r3, #19428	; 0x4be4
   12364:	movt	r3, #1
   12368:	movw	r2, #19420	; 0x4bdc
   1236c:	movt	r2, #1
   12370:	mov	r0, r6
   12374:	moveq	r2, r3
   12378:	movw	r1, #32900	; 0x8084
   1237c:	movt	r1, #1
   12380:	bl	10af0 <fprintf@plt>
   12384:	ldr	r3, [r5, r4, lsl #3]
   12388:	mov	r0, r6
   1238c:	add	r1, r5, r4, lsl #3
   12390:	cmp	r3, #0
   12394:	ble	123ac <__assert_fail@plt+0x1838>
   12398:	bl	11f1c <__assert_fail@plt+0x13a8>
   1239c:	mov	r2, r4
   123a0:	mov	r1, r7
   123a4:	mov	r0, r6
   123a8:	bl	10af0 <fprintf@plt>
   123ac:	add	r4, r4, #1
   123b0:	cmp	fp, r4
   123b4:	bne	12384 <__assert_fail@plt+0x1810>
   123b8:	cmp	r8, #0
   123bc:	beq	123d4 <__assert_fail@plt+0x1860>
   123c0:	add	r1, r9, #1
   123c4:	ldr	r3, [r5, r1, lsl #3]
   123c8:	add	r1, r5, r1, lsl #3
   123cc:	cmp	r3, #0
   123d0:	bgt	123f8 <__assert_fail@plt+0x1884>
   123d4:	cmp	sl, #0
   123d8:	bne	1241c <__assert_fail@plt+0x18a8>
   123dc:	add	sp, sp, #4
   123e0:	ldrd	r4, [sp]
   123e4:	ldrd	r6, [sp, #8]
   123e8:	ldrd	r8, [sp, #16]
   123ec:	ldrd	sl, [sp, #24]
   123f0:	add	sp, sp, #32
   123f4:	pop	{pc}		; (ldr pc, [sp], #4)
   123f8:	mov	r0, r6
   123fc:	bl	11f1c <__assert_fail@plt+0x13a8>
   12400:	mov	r2, r9
   12404:	movw	r1, #19448	; 0x4bf8
   12408:	movt	r1, #1
   1240c:	mov	r0, r6
   12410:	bl	10af0 <fprintf@plt>
   12414:	cmp	sl, #0
   12418:	beq	123dc <__assert_fail@plt+0x1868>
   1241c:	mov	r1, r5
   12420:	mov	r0, r6
   12424:	bl	11f1c <__assert_fail@plt+0x13a8>
   12428:	mov	r3, r6
   1242c:	movw	r0, #19332	; 0x4b84
   12430:	movt	r0, #1
   12434:	mov	r2, #7
   12438:	mov	r1, #1
   1243c:	add	sp, sp, #4
   12440:	ldrd	r4, [sp]
   12444:	ldrd	r6, [sp, #8]
   12448:	ldrd	r8, [sp, #16]
   1244c:	ldrd	sl, [sp, #24]
   12450:	ldr	lr, [sp, #32]
   12454:	add	sp, sp, #36	; 0x24
   12458:	b	10a6c <fwrite@plt>
   1245c:	ldr	ip, [r0]
   12460:	ldr	r3, [r0, #4]
   12464:	add	r1, ip, r1
   12468:	add	r2, r3, r2
   1246c:	stm	r0, {r1, r2}
   12470:	bx	lr
   12474:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12478:	mov	r5, r3
   1247c:	strd	r6, [sp, #8]
   12480:	mov	r6, r2
   12484:	mov	r7, r0
   12488:	str	r8, [sp, #16]
   1248c:	mov	r8, r1
   12490:	str	lr, [sp, #20]
   12494:	bl	12940 <__assert_fail@plt+0x1dcc>
   12498:	subs	r4, r0, #0
   1249c:	beq	124c4 <__assert_fail@plt+0x1950>
   124a0:	ldrd	r0, [r4, #12]
   124a4:	ldr	r8, [sp, #16]
   124a8:	add	r0, r0, r6
   124ac:	add	r1, r1, r5
   124b0:	ldrd	r6, [sp, #8]
   124b4:	strd	r0, [r4, #12]
   124b8:	ldrd	r4, [sp]
   124bc:	add	sp, sp, #20
   124c0:	pop	{pc}		; (ldr pc, [sp], #4)
   124c4:	mov	r1, #20
   124c8:	mov	r0, #1
   124cc:	bl	1374c <error@@Base+0x40>
   124d0:	mov	r4, r0
   124d4:	mov	r0, r8
   124d8:	bl	10a30 <strdup@plt>
   124dc:	mov	r1, r4
   124e0:	str	r0, [r4, #8]
   124e4:	mov	r0, r7
   124e8:	bl	129cc <__assert_fail@plt+0x1e58>
   124ec:	b	124a0 <__assert_fail@plt+0x192c>
   124f0:	strd	r4, [sp, #-20]!	; 0xffffffec
   124f4:	mov	r5, r0
   124f8:	strd	r6, [sp, #8]
   124fc:	mov	r6, r1
   12500:	movw	r1, #19060	; 0x4a74
   12504:	movt	r1, #1
   12508:	mov	r0, r6
   1250c:	str	lr, [sp, #16]
   12510:	sub	sp, sp, #12
   12514:	bl	137ec <error@@Base+0xe0>
   12518:	mov	r2, r0
   1251c:	mov	r4, r0
   12520:	mov	r1, #99	; 0x63
   12524:	movw	r0, #45200	; 0xb090
   12528:	movt	r0, #2
   1252c:	bl	10a18 <fgets@plt>
   12530:	cmp	r0, #0
   12534:	beq	125cc <__assert_fail@plt+0x1a58>
   12538:	movw	r1, #19468	; 0x4c0c
   1253c:	movt	r1, #1
   12540:	movw	r0, #45200	; 0xb090
   12544:	movt	r0, #2
   12548:	mov	r2, #45	; 0x2d
   1254c:	bl	10b50 <strncmp@plt>
   12550:	cmp	r0, #0
   12554:	bne	125cc <__assert_fail@plt+0x1a58>
   12558:	movw	r0, #45200	; 0xb090
   1255c:	movt	r0, #2
   12560:	mov	r2, r4
   12564:	mov	r1, #99	; 0x63
   12568:	bl	10a18 <fgets@plt>
   1256c:	cmp	r0, #0
   12570:	beq	125cc <__assert_fail@plt+0x1a58>
   12574:	movw	r1, #33144	; 0x8178
   12578:	movt	r1, #1
   1257c:	movw	r0, #45200	; 0xb090
   12580:	movt	r0, #2
   12584:	bl	109dc <strcmp@plt>
   12588:	cmp	r0, #0
   1258c:	bne	125cc <__assert_fail@plt+0x1a58>
   12590:	movw	r0, #45200	; 0xb090
   12594:	movt	r0, #2
   12598:	mov	r2, r4
   1259c:	mov	r1, #99	; 0x63
   125a0:	bl	10a18 <fgets@plt>
   125a4:	cmp	r0, #0
   125a8:	beq	125cc <__assert_fail@plt+0x1a58>
   125ac:	movw	r1, #19344	; 0x4b90
   125b0:	movt	r1, #1
   125b4:	movw	r0, #45200	; 0xb090
   125b8:	movt	r0, #2
   125bc:	mov	r2, sp
   125c0:	bl	10afc <__isoc99_sscanf@plt>
   125c4:	cmp	r0, #1
   125c8:	beq	125e8 <__assert_fail@plt+0x1a74>
   125cc:	cmp	r6, #0
   125d0:	movw	r1, #19460	; 0x4c04
   125d4:	movt	r1, #1
   125d8:	movw	r0, #19516	; 0x4c3c
   125dc:	movt	r0, #1
   125e0:	movne	r1, r6
   125e4:	bl	137a8 <error@@Base+0x9c>
   125e8:	movw	r0, #45200	; 0xb090
   125ec:	movt	r0, #2
   125f0:	mov	r2, r4
   125f4:	mov	r1, #99	; 0x63
   125f8:	bl	10a18 <fgets@plt>
   125fc:	cmp	r0, #0
   12600:	beq	125cc <__assert_fail@plt+0x1a58>
   12604:	movw	r1, #19344	; 0x4b90
   12608:	movt	r1, #1
   1260c:	movw	r0, #45200	; 0xb090
   12610:	movt	r0, #2
   12614:	add	r2, sp, #4
   12618:	bl	10afc <__isoc99_sscanf@plt>
   1261c:	cmp	r0, #1
   12620:	bne	125cc <__assert_fail@plt+0x1a58>
   12624:	movw	r0, #45200	; 0xb090
   12628:	movt	r0, #2
   1262c:	mov	r2, r4
   12630:	mov	r1, #99	; 0x63
   12634:	bl	10a18 <fgets@plt>
   12638:	cmp	r0, #0
   1263c:	beq	125cc <__assert_fail@plt+0x1a58>
   12640:	movw	r0, #45200	; 0xb090
   12644:	movt	r0, #2
   12648:	mov	r2, r4
   1264c:	mov	r1, #99	; 0x63
   12650:	bl	10a18 <fgets@plt>
   12654:	cmp	r0, #0
   12658:	beq	125cc <__assert_fail@plt+0x1a58>
   1265c:	ldm	sp, {ip, lr}
   12660:	add	r1, r5, #8
   12664:	mov	r0, r4
   12668:	ldr	r3, [r5]
   1266c:	ldr	r2, [r5, #4]
   12670:	add	r3, r3, ip
   12674:	add	r2, r2, lr
   12678:	str	r3, [r5]
   1267c:	str	r2, [r5, #4]
   12680:	bl	11dfc <__assert_fail@plt+0x1288>
   12684:	mov	r7, r0
   12688:	add	r1, r5, #416	; 0x1a0
   1268c:	mov	r0, r4
   12690:	bl	11dfc <__assert_fail@plt+0x1288>
   12694:	mov	r6, r0
   12698:	add	r1, r5, #824	; 0x338
   1269c:	mov	r0, r4
   126a0:	bl	11dfc <__assert_fail@plt+0x1288>
   126a4:	ldr	r3, [sp]
   126a8:	cmp	r3, #0
   126ac:	bgt	126cc <__assert_fail@plt+0x1b58>
   126b0:	mov	r0, r4
   126b4:	bl	1356c <__assert_fail@plt+0x29f8>
   126b8:	add	sp, sp, #12
   126bc:	ldrd	r4, [sp]
   126c0:	ldrd	r6, [sp, #8]
   126c4:	add	sp, sp, #16
   126c8:	pop	{pc}		; (ldr pc, [sp], #4)
   126cc:	add	r1, r5, #920	; 0x398
   126d0:	mov	r0, r4
   126d4:	bl	11dfc <__assert_fail@plt+0x1288>
   126d8:	cmp	r7, #0
   126dc:	ble	126ec <__assert_fail@plt+0x1b78>
   126e0:	add	r1, r5, #992	; 0x3e0
   126e4:	mov	r0, r4
   126e8:	bl	11ff0 <__assert_fail@plt+0x147c>
   126ec:	cmp	r6, #0
   126f0:	ble	126b0 <__assert_fail@plt+0x1b3c>
   126f4:	add	r1, r5, #9024	; 0x2340
   126f8:	mov	r0, r4
   126fc:	add	r1, r1, #24
   12700:	bl	11ff0 <__assert_fail@plt+0x147c>
   12704:	b	126b0 <__assert_fail@plt+0x1b3c>
   12708:	mov	r3, r1
   1270c:	movw	r1, #19536	; 0x4c50
   12710:	movt	r1, #1
   12714:	strd	r4, [sp, #-20]!	; 0xffffffec
   12718:	mov	r4, r0
   1271c:	mov	r0, r3
   12720:	strd	r6, [sp, #8]
   12724:	str	lr, [sp, #16]
   12728:	sub	sp, sp, #12
   1272c:	bl	137ec <error@@Base+0xe0>
   12730:	mov	r5, r0
   12734:	movw	r3, #33144	; 0x8178
   12738:	movt	r3, #1
   1273c:	movw	r2, #19468	; 0x4c0c
   12740:	movt	r2, #1
   12744:	movw	r1, #19540	; 0x4c54
   12748:	movt	r1, #1
   1274c:	bl	10af0 <fprintf@plt>
   12750:	mov	r0, r5
   12754:	movw	r1, #19548	; 0x4c5c
   12758:	movt	r1, #1
   1275c:	ldr	r2, [r4]
   12760:	bl	10af0 <fprintf@plt>
   12764:	mov	r0, r5
   12768:	movw	r1, #19564	; 0x4c6c
   1276c:	movt	r1, #1
   12770:	ldr	r2, [r4, #4]
   12774:	bl	10af0 <fprintf@plt>
   12778:	ldr	r3, [r4]
   1277c:	cmp	r3, #0
   12780:	bne	12844 <__assert_fail@plt+0x1cd0>
   12784:	movw	r0, #19360	; 0x4ba0
   12788:	movt	r0, #1
   1278c:	mov	r3, r5
   12790:	mov	r2, #8
   12794:	mov	r1, #1
   12798:	bl	10a6c <fwrite@plt>
   1279c:	mov	r6, #1
   127a0:	mov	r7, #0
   127a4:	mov	r3, r5
   127a8:	mov	r2, #12
   127ac:	mov	r1, r6
   127b0:	movw	r0, #19588	; 0x4c84
   127b4:	movt	r0, #1
   127b8:	bl	10a6c <fwrite@plt>
   127bc:	mov	r2, #50	; 0x32
   127c0:	add	r1, r4, #8
   127c4:	str	r7, [sp]
   127c8:	mov	r0, r5
   127cc:	movw	r3, #19604	; 0x4c94
   127d0:	movt	r3, #1
   127d4:	str	r6, [sp, #4]
   127d8:	bl	122d8 <__assert_fail@plt+0x1764>
   127dc:	mov	r2, #50	; 0x32
   127e0:	add	r1, r4, #416	; 0x1a0
   127e4:	str	r7, [sp]
   127e8:	mov	r0, r5
   127ec:	movw	r3, #19616	; 0x4ca0
   127f0:	movt	r3, #1
   127f4:	str	r6, [sp, #4]
   127f8:	bl	122d8 <__assert_fail@plt+0x1764>
   127fc:	movw	r3, #19632	; 0x4cb0
   12800:	movt	r3, #1
   12804:	str	r6, [sp]
   12808:	mov	r2, #10
   1280c:	add	r1, r4, #824	; 0x338
   12810:	str	r6, [sp, #4]
   12814:	mov	r0, r5
   12818:	bl	122d8 <__assert_fail@plt+0x1764>
   1281c:	ldr	r3, [r4]
   12820:	cmp	r3, r7
   12824:	bgt	12880 <__assert_fail@plt+0x1d0c>
   12828:	mov	r0, r5
   1282c:	add	sp, sp, #12
   12830:	ldrd	r4, [sp]
   12834:	ldrd	r6, [sp, #8]
   12838:	ldr	lr, [sp, #16]
   1283c:	add	sp, sp, #20
   12840:	b	1356c <__assert_fail@plt+0x29f8>
   12844:	ldr	r2, [r4, #4]
   12848:	movw	r1, #19372	; 0x4bac
   1284c:	movt	r1, #1
   12850:	vmov	s15, r3
   12854:	mov	r0, r5
   12858:	vldr	d5, [pc, #136]	; 128e8 <__assert_fail@plt+0x1d74>
   1285c:	sub	r3, r3, r2
   12860:	vmov	s14, r3
   12864:	vcvt.f64.s32	d6, s15
   12868:	vcvt.f64.s32	d7, s14
   1286c:	vmul.f64	d7, d7, d5
   12870:	vdiv.f64	d7, d7, d6
   12874:	vmov	r2, r3, d7
   12878:	bl	10af0 <fprintf@plt>
   1287c:	b	1279c <__assert_fail@plt+0x1c28>
   12880:	movw	r3, #19656	; 0x4cc8
   12884:	movt	r3, #1
   12888:	str	r7, [sp]
   1288c:	mov	r2, #8
   12890:	add	r1, r4, #920	; 0x398
   12894:	str	r7, [sp, #4]
   12898:	mov	r0, r5
   1289c:	bl	122d8 <__assert_fail@plt+0x1764>
   128a0:	ldr	r3, [r4, #8]
   128a4:	cmp	r3, r7
   128a8:	ble	128c0 <__assert_fail@plt+0x1d4c>
   128ac:	movw	r2, #19604	; 0x4c94
   128b0:	movt	r2, #1
   128b4:	add	r1, r4, #992	; 0x3e0
   128b8:	mov	r0, r5
   128bc:	bl	12124 <__assert_fail@plt+0x15b0>
   128c0:	ldr	r3, [r4, #416]	; 0x1a0
   128c4:	cmp	r3, #0
   128c8:	ble	12828 <__assert_fail@plt+0x1cb4>
   128cc:	add	r1, r4, #9024	; 0x2340
   128d0:	movw	r2, #19616	; 0x4ca0
   128d4:	movt	r2, #1
   128d8:	add	r1, r1, #24
   128dc:	mov	r0, r5
   128e0:	bl	12124 <__assert_fail@plt+0x15b0>
   128e4:	b	12828 <__assert_fail@plt+0x1cb4>
   128e8:	andeq	r0, r0, r0
   128ec:	subsmi	r0, r9, r0
   128f0:	strd	r4, [sp, #-16]!
   128f4:	add	r5, r0, #8000	; 0x1f40
   128f8:	mov	r4, r0
   128fc:	add	r5, r5, #48	; 0x30
   12900:	str	r6, [sp, #8]
   12904:	mov	r6, r0
   12908:	str	lr, [sp, #12]
   1290c:	mov	r0, r4
   12910:	add	r4, r4, #16
   12914:	bl	1193c <__assert_fail@plt+0xdc8>
   12918:	cmp	r5, r4
   1291c:	bne	1290c <__assert_fail@plt+0x1d98>
   12920:	add	r6, r6, #4096	; 0x1000
   12924:	mov	r3, #0
   12928:	ldrd	r4, [sp]
   1292c:	str	r3, [r6, #3952]	; 0xf70
   12930:	str	r3, [r6, #3956]	; 0xf74
   12934:	ldr	r6, [sp, #8]
   12938:	add	sp, sp, #12
   1293c:	pop	{pc}		; (ldr pc, [sp], #4)
   12940:	strd	r4, [sp, #-16]!
   12944:	mov	r5, r1
   12948:	str	r6, [sp, #8]
   1294c:	str	lr, [sp, #12]
   12950:	ldrb	r3, [r1]
   12954:	cmp	r3, #0
   12958:	beq	12988 <__assert_fail@plt+0x1e14>
   1295c:	mov	r2, #0
   12960:	add	r2, r2, r3
   12964:	ldrb	r3, [r1, #1]!
   12968:	cmp	r3, #0
   1296c:	bne	12960 <__assert_fail@plt+0x1dec>
   12970:	movw	r3, #20065	; 0x4e61
   12974:	movt	r3, #33354	; 0x824a
   12978:	movw	r1, #503	; 0x1f7
   1297c:	umull	ip, r3, r3, r2
   12980:	lsr	r3, r3, #8
   12984:	mls	r3, r1, r3, r2
   12988:	ldr	r4, [r0, r3, lsl #4]
   1298c:	cmp	r4, #0
   12990:	bne	129a4 <__assert_fail@plt+0x1e30>
   12994:	b	129b8 <__assert_fail@plt+0x1e44>
   12998:	ldr	r4, [r4, #4]
   1299c:	cmp	r4, #0
   129a0:	beq	129b8 <__assert_fail@plt+0x1e44>
   129a4:	mov	r0, r5
   129a8:	ldr	r1, [r4, #8]
   129ac:	bl	109dc <strcmp@plt>
   129b0:	cmp	r0, #0
   129b4:	bne	12998 <__assert_fail@plt+0x1e24>
   129b8:	mov	r0, r4
   129bc:	ldrd	r4, [sp]
   129c0:	ldr	r6, [sp, #8]
   129c4:	add	sp, sp, #12
   129c8:	pop	{pc}		; (ldr pc, [sp], #4)
   129cc:	ldr	r2, [r1, #8]
   129d0:	str	r4, [sp, #-8]!
   129d4:	mov	r4, r0
   129d8:	str	lr, [sp, #4]
   129dc:	ldrb	r3, [r2]
   129e0:	cmp	r3, #0
   129e4:	beq	12a18 <__assert_fail@plt+0x1ea4>
   129e8:	mov	r0, #0
   129ec:	add	r0, r0, r3
   129f0:	ldrb	r3, [r2, #1]!
   129f4:	cmp	r3, #0
   129f8:	bne	129ec <__assert_fail@plt+0x1e78>
   129fc:	movw	r3, #20065	; 0x4e61
   12a00:	movt	r3, #33354	; 0x824a
   12a04:	movw	r2, #503	; 0x1f7
   12a08:	umull	ip, r3, r3, r0
   12a0c:	lsr	r3, r3, #8
   12a10:	mls	r0, r2, r3, r0
   12a14:	add	r0, r4, r0, lsl #4
   12a18:	add	r4, r4, #4096	; 0x1000
   12a1c:	bl	11954 <__assert_fail@plt+0xde0>
   12a20:	ldr	r0, [r4, #3952]	; 0xf70
   12a24:	cmp	r0, #0
   12a28:	beq	12a38 <__assert_fail@plt+0x1ec4>
   12a2c:	bl	10a00 <free@plt>
   12a30:	mov	r3, #0
   12a34:	str	r3, [r4, #3952]	; 0xf70
   12a38:	ldr	r3, [r4, #3956]	; 0xf74
   12a3c:	add	r3, r3, #1
   12a40:	str	r3, [r4, #3956]	; 0xf74
   12a44:	ldr	r4, [sp]
   12a48:	add	sp, sp, #4
   12a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   12a50:	ldr	r2, [r1, #8]
   12a54:	str	r4, [sp, #-8]!
   12a58:	mov	r4, r0
   12a5c:	str	lr, [sp, #4]
   12a60:	ldrb	r3, [r2]
   12a64:	cmp	r3, #0
   12a68:	beq	12a9c <__assert_fail@plt+0x1f28>
   12a6c:	mov	r0, #0
   12a70:	add	r0, r0, r3
   12a74:	ldrb	r3, [r2, #1]!
   12a78:	cmp	r3, #0
   12a7c:	bne	12a70 <__assert_fail@plt+0x1efc>
   12a80:	movw	r3, #20065	; 0x4e61
   12a84:	movt	r3, #33354	; 0x824a
   12a88:	movw	r2, #503	; 0x1f7
   12a8c:	umull	ip, r3, r3, r0
   12a90:	lsr	r3, r3, #8
   12a94:	mls	r0, r2, r3, r0
   12a98:	add	r0, r4, r0, lsl #4
   12a9c:	add	r4, r4, #4096	; 0x1000
   12aa0:	bl	11ab4 <__assert_fail@plt+0xf40>
   12aa4:	ldr	r0, [r4, #3952]	; 0xf70
   12aa8:	cmp	r0, #0
   12aac:	beq	12abc <__assert_fail@plt+0x1f48>
   12ab0:	bl	10a00 <free@plt>
   12ab4:	mov	r3, #0
   12ab8:	str	r3, [r4, #3952]	; 0xf70
   12abc:	ldr	r3, [r4, #3956]	; 0xf74
   12ac0:	sub	r3, r3, #1
   12ac4:	str	r3, [r4, #3956]	; 0xf74
   12ac8:	ldr	r4, [sp]
   12acc:	add	sp, sp, #4
   12ad0:	pop	{pc}		; (ldr pc, [sp], #4)
   12ad4:	strd	r4, [sp, #-16]!
   12ad8:	str	r6, [sp, #8]
   12adc:	add	r6, r0, #4096	; 0x1000
   12ae0:	ldr	r4, [r6, #3952]	; 0xf70
   12ae4:	str	lr, [sp, #12]
   12ae8:	cmp	r4, #0
   12aec:	beq	12b00 <__assert_fail@plt+0x1f8c>
   12af0:	ldrd	r4, [sp]
   12af4:	ldr	r6, [sp, #8]
   12af8:	add	sp, sp, #12
   12afc:	pop	{pc}		; (ldr pc, [sp], #4)
   12b00:	ldr	r3, [r6, #3956]	; 0xf74
   12b04:	cmp	r3, #0
   12b08:	beq	12af0 <__assert_fail@plt+0x1f7c>
   12b0c:	mov	r5, r0
   12b10:	mov	r1, #4
   12b14:	mov	r0, r3
   12b18:	bl	1374c <error@@Base+0x40>
   12b1c:	mov	r2, r4
   12b20:	mov	ip, r4
   12b24:	str	r0, [r6, #3952]	; 0xf70
   12b28:	movw	lr, #503	; 0x1f7
   12b2c:	ldr	r3, [r5, ip, lsl #4]
   12b30:	cmp	r3, #0
   12b34:	beq	12b50 <__assert_fail@plt+0x1fdc>
   12b38:	add	r1, r0, r2, lsl #2
   12b3c:	str	r3, [r1], #4
   12b40:	add	r2, r2, #1
   12b44:	ldr	r3, [r3, #4]
   12b48:	cmp	r3, #0
   12b4c:	bne	12b3c <__assert_fail@plt+0x1fc8>
   12b50:	add	ip, ip, #1
   12b54:	cmp	ip, lr
   12b58:	bne	12b2c <__assert_fail@plt+0x1fb8>
   12b5c:	ldrd	r4, [sp]
   12b60:	ldr	r6, [sp, #8]
   12b64:	add	sp, sp, #12
   12b68:	pop	{pc}		; (ldr pc, [sp], #4)
   12b6c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12b70:	add	r5, r0, #8000	; 0x1f40
   12b74:	mov	r4, r0
   12b78:	add	r5, r5, #48	; 0x30
   12b7c:	strd	r6, [sp, #8]
   12b80:	mov	r7, r0
   12b84:	mov	r6, r1
   12b88:	str	r8, [sp, #16]
   12b8c:	str	lr, [sp, #20]
   12b90:	mov	r0, r4
   12b94:	mov	r1, r6
   12b98:	add	r4, r4, #16
   12b9c:	bl	11b80 <__assert_fail@plt+0x100c>
   12ba0:	cmp	r5, r4
   12ba4:	bne	12b90 <__assert_fail@plt+0x201c>
   12ba8:	add	r7, r7, #4096	; 0x1000
   12bac:	ldr	r0, [r7, #3952]	; 0xf70
   12bb0:	cmp	r0, #0
   12bb4:	beq	12bc4 <__assert_fail@plt+0x2050>
   12bb8:	bl	10a00 <free@plt>
   12bbc:	mov	r3, #0
   12bc0:	str	r3, [r7, #3952]	; 0xf70
   12bc4:	mov	r3, #0
   12bc8:	ldrd	r4, [sp]
   12bcc:	ldr	r8, [sp, #16]
   12bd0:	str	r3, [r7, #3956]	; 0xf74
   12bd4:	ldrd	r6, [sp, #8]
   12bd8:	add	sp, sp, #20
   12bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   12be0:	str	r4, [sp, #-8]!
   12be4:	movw	r4, #19704	; 0x4cf8
   12be8:	movt	r4, #1
   12bec:	str	lr, [sp, #4]
   12bf0:	ldr	r0, [r0, #4]
   12bf4:	cmp	r0, #0
   12bf8:	beq	12ca8 <__assert_fail@plt+0x2134>
   12bfc:	movw	ip, #1092	; 0x444
   12c00:	movw	r2, #8294	; 0x2066
   12c04:	ldr	lr, [r0, #12]
   12c08:	mov	r3, ip
   12c0c:	mov	r1, #0
   12c10:	b	12c1c <__assert_fail@plt+0x20a8>
   12c14:	add	r2, r2, r2, lsl #1
   12c18:	ldr	r2, [r4, r2, lsl #2]
   12c1c:	add	r3, r1, r3, lsr #1
   12c20:	cmp	lr, r2
   12c24:	subcc	ip, r3, #1
   12c28:	bcc	12c44 <__assert_fail@plt+0x20d0>
   12c2c:	add	r2, r3, r3, lsl #1
   12c30:	add	r1, r3, #1
   12c34:	add	r3, r4, r2, lsl #2
   12c38:	ldr	r2, [r3, #4]
   12c3c:	cmp	lr, r2
   12c40:	bls	12cb4 <__assert_fail@plt+0x2140>
   12c44:	sub	r3, ip, r1
   12c48:	cmp	ip, r1
   12c4c:	add	r2, r1, r3, lsr #1
   12c50:	bcs	12c14 <__assert_fail@plt+0x20a0>
   12c54:	movw	r2, #8294	; 0x2066
   12c58:	mov	r1, #0
   12c5c:	movw	ip, #1092	; 0x444
   12c60:	movw	r3, #1092	; 0x444
   12c64:	b	12c70 <__assert_fail@plt+0x20fc>
   12c68:	add	r2, r2, r2, lsl #1
   12c6c:	ldr	r2, [r4, r2, lsl #2]
   12c70:	add	r3, r1, r3, lsr #1
   12c74:	cmp	lr, r2
   12c78:	subcc	ip, r3, #1
   12c7c:	bcc	12c98 <__assert_fail@plt+0x2124>
   12c80:	add	r2, r3, r3, lsl #1
   12c84:	add	r1, r3, #1
   12c88:	add	r3, r4, r2, lsl #2
   12c8c:	ldr	r2, [r3, #4]
   12c90:	cmp	lr, r2
   12c94:	bls	12cc4 <__assert_fail@plt+0x2150>
   12c98:	sub	r3, ip, r1
   12c9c:	cmp	ip, r1
   12ca0:	add	r2, r1, r3, lsr #1
   12ca4:	bcs	12c68 <__assert_fail@plt+0x20f4>
   12ca8:	ldr	r4, [sp]
   12cac:	add	sp, sp, #4
   12cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   12cb4:	ldr	r3, [r3, #8]
   12cb8:	cmp	r3, #4
   12cbc:	beq	12bf0 <__assert_fail@plt+0x207c>
   12cc0:	b	12c54 <__assert_fail@plt+0x20e0>
   12cc4:	ldr	r3, [r3, #8]
   12cc8:	cmp	r3, #6
   12ccc:	beq	12bf0 <__assert_fail@plt+0x207c>
   12cd0:	b	12ca8 <__assert_fail@plt+0x2134>
   12cd4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12cd8:	strd	r6, [sp, #8]
   12cdc:	strd	r8, [sp, #16]
   12ce0:	ldr	r9, [r1]
   12ce4:	strd	sl, [sp, #24]
   12ce8:	str	lr, [sp, #32]
   12cec:	sub	sp, sp, #28
   12cf0:	cmp	r9, #0
   12cf4:	str	r9, [sp, #12]
   12cf8:	beq	12fec <__assert_fail@plt+0x2478>
   12cfc:	movw	r7, #19704	; 0x4cf8
   12d00:	movt	r7, #1
   12d04:	str	r0, [sp, #4]
   12d08:	mov	r8, #17
   12d0c:	add	r6, sp, #8
   12d10:	mov	r0, r6
   12d14:	bl	12be0 <__assert_fail@plt+0x206c>
   12d18:	subs	r6, r0, #0
   12d1c:	beq	130f8 <__assert_fail@plt+0x2584>
   12d20:	movw	r1, #1092	; 0x444
   12d24:	movw	r0, #8294	; 0x2066
   12d28:	ldr	ip, [r6, #12]
   12d2c:	mov	r3, r1
   12d30:	mov	r2, #0
   12d34:	b	12d48 <__assert_fail@plt+0x21d4>
   12d38:	sub	r3, r1, r2
   12d3c:	add	r0, r2, r3, lsr #1
   12d40:	add	r0, r0, r0, lsl #1
   12d44:	ldr	r0, [r7, r0, lsl #2]
   12d48:	add	r3, r2, r3, lsr #1
   12d4c:	cmp	ip, r0
   12d50:	subcc	r1, r3, #1
   12d54:	bcc	12d70 <__assert_fail@plt+0x21fc>
   12d58:	add	r2, r3, r3, lsl #1
   12d5c:	add	r2, r7, r2, lsl #2
   12d60:	ldr	r0, [r2, #4]
   12d64:	cmp	ip, r0
   12d68:	bls	131d0 <__assert_fail@plt+0x265c>
   12d6c:	add	r2, r3, #1
   12d70:	cmp	r1, r2
   12d74:	bcs	12d38 <__assert_fail@plt+0x21c4>
   12d78:	mov	r0, r6
   12d7c:	bl	12be0 <__assert_fail@plt+0x206c>
   12d80:	cmp	r0, #0
   12d84:	beq	13360 <__assert_fail@plt+0x27ec>
   12d88:	mov	r5, #0
   12d8c:	mov	sl, r5
   12d90:	movw	r1, #1092	; 0x444
   12d94:	movw	lr, #8294	; 0x2066
   12d98:	ldr	ip, [r0, #12]
   12d9c:	mov	r3, r1
   12da0:	mov	r2, #0
   12da4:	b	12db8 <__assert_fail@plt+0x2244>
   12da8:	sub	r3, r1, r2
   12dac:	add	lr, r2, r3, lsr #1
   12db0:	add	lr, lr, lr, lsl #1
   12db4:	ldr	lr, [r7, lr, lsl #2]
   12db8:	add	r3, r2, r3, lsr #1
   12dbc:	cmp	ip, lr
   12dc0:	subcc	r1, r3, #1
   12dc4:	bcc	12de0 <__assert_fail@plt+0x226c>
   12dc8:	add	r2, r3, r3, lsl #1
   12dcc:	add	r2, r7, r2, lsl #2
   12dd0:	ldr	lr, [r2, #4]
   12dd4:	cmp	ip, lr
   12dd8:	bls	132a4 <__assert_fail@plt+0x2730>
   12ddc:	add	r2, r3, #1
   12de0:	cmp	r1, r2
   12de4:	bcs	12da8 <__assert_fail@plt+0x2234>
   12de8:	bl	12be0 <__assert_fail@plt+0x206c>
   12dec:	cmp	r0, #0
   12df0:	beq	133a8 <__assert_fail@plt+0x2834>
   12df4:	mov	r4, #0
   12df8:	mov	r1, r4
   12dfc:	mov	lr, r4
   12e00:	movw	ip, #1092	; 0x444
   12e04:	movw	fp, #8294	; 0x2066
   12e08:	ldr	r0, [r0, #12]
   12e0c:	mov	r3, ip
   12e10:	mov	r2, #0
   12e14:	b	12e28 <__assert_fail@plt+0x22b4>
   12e18:	sub	r3, ip, r2
   12e1c:	add	fp, r2, r3, lsr #1
   12e20:	add	fp, fp, fp, lsl #1
   12e24:	ldr	fp, [r7, fp, lsl #2]
   12e28:	add	r3, r2, r3, lsr #1
   12e2c:	cmp	r0, fp
   12e30:	subcc	ip, r3, #1
   12e34:	bcc	12e50 <__assert_fail@plt+0x22dc>
   12e38:	add	r2, r3, r3, lsl #1
   12e3c:	add	r2, r7, r2, lsl #2
   12e40:	ldr	fp, [r2, #4]
   12e44:	cmp	r0, fp
   12e48:	bls	131b8 <__assert_fail@plt+0x2644>
   12e4c:	add	r2, r3, #1
   12e50:	cmp	ip, r2
   12e54:	bcs	12e18 <__assert_fail@plt+0x22a4>
   12e58:	mov	r2, #0
   12e5c:	cmp	lr, #0
   12e60:	bne	130d4 <__assert_fail@plt+0x2560>
   12e64:	sub	r3, r5, #2
   12e68:	cmp	r3, #1
   12e6c:	orrls	sl, sl, #1
   12e70:	cmp	sl, #0
   12e74:	bne	13018 <__assert_fail@plt+0x24a4>
   12e78:	bic	ip, r4, #2
   12e7c:	cmp	ip, #1
   12e80:	movne	r0, r1
   12e84:	orreq	r0, r1, #1
   12e88:	cmp	r0, #0
   12e8c:	bne	13018 <__assert_fail@plt+0x24a4>
   12e90:	sub	r3, r5, #8
   12e94:	cmp	r3, #1
   12e98:	bhi	1310c <__assert_fail@plt+0x2598>
   12e9c:	sub	r1, r4, #8
   12ea0:	cmp	r1, #1
   12ea4:	bls	130f0 <__assert_fail@plt+0x257c>
   12ea8:	sub	r1, r4, #12
   12eac:	sub	r0, r4, #10
   12eb0:	clz	r0, r0
   12eb4:	cmp	r4, #10
   12eb8:	cmpne	r1, #1
   12ebc:	lsr	r0, r0, #5
   12ec0:	bhi	12ed0 <__assert_fail@plt+0x235c>
   12ec4:	sub	r1, r2, #8
   12ec8:	cmp	r1, #1
   12ecc:	bls	130f0 <__assert_fail@plt+0x257c>
   12ed0:	sub	r1, r8, #8
   12ed4:	cmp	r1, #1
   12ed8:	bls	13350 <__assert_fail@plt+0x27dc>
   12edc:	sub	r1, r5, #8
   12ee0:	clz	r1, r1
   12ee4:	lsr	r1, r1, #5
   12ee8:	tst	r1, r0
   12eec:	beq	13230 <__assert_fail@plt+0x26bc>
   12ef0:	mov	r8, #8
   12ef4:	ldr	r3, [r6, #4]
   12ef8:	cmp	r3, #0
   12efc:	bne	12d10 <__assert_fail@plt+0x219c>
   12f00:	ldr	r0, [r9, #12]
   12f04:	bl	10a0c <utf8proc_get_property@plt>
   12f08:	ldrsh	r3, [r0]
   12f0c:	cmp	r3, #0
   12f10:	ble	12fdc <__assert_fail@plt+0x2468>
   12f14:	cmp	r3, #12
   12f18:	ble	12f24 <__assert_fail@plt+0x23b0>
   12f1c:	cmp	r3, #29
   12f20:	bne	12fdc <__assert_fail@plt+0x2468>
   12f24:	ldr	r5, [r6, #4]
   12f28:	cmp	r5, r9
   12f2c:	movne	r4, r9
   12f30:	movne	r8, #0
   12f34:	bne	12f44 <__assert_fail@plt+0x23d0>
   12f38:	b	133b8 <__assert_fail@plt+0x2844>
   12f3c:	cmp	r4, #0
   12f40:	beq	133cc <__assert_fail@plt+0x2858>
   12f44:	add	r1, sp, #8
   12f48:	ldr	r0, [r4, #12]
   12f4c:	bl	10a24 <utf8proc_encode_char@plt>
   12f50:	cmp	r0, #0
   12f54:	beq	133ec <__assert_fail@plt+0x2878>
   12f58:	ldr	r4, [r4, #4]
   12f5c:	add	r8, r8, r0
   12f60:	cmp	r5, r4
   12f64:	bne	12f3c <__assert_fail@plt+0x23c8>
   12f68:	add	r0, r8, #1
   12f6c:	mov	r4, #0
   12f70:	bl	10a90 <malloc@plt>
   12f74:	mov	r8, r0
   12f78:	b	12f84 <__assert_fail@plt+0x2410>
   12f7c:	cmp	r9, #0
   12f80:	beq	1340c <__assert_fail@plt+0x2898>
   12f84:	add	r1, r8, r4
   12f88:	ldr	r0, [r9, #12]
   12f8c:	bl	10a24 <utf8proc_encode_char@plt>
   12f90:	ldr	r9, [r9, #4]
   12f94:	add	r4, r4, r0
   12f98:	cmp	r5, r9
   12f9c:	bne	12f7c <__assert_fail@plt+0x2408>
   12fa0:	add	r4, r8, r4
   12fa4:	mov	r3, #0
   12fa8:	mov	r1, #12
   12fac:	mov	r0, #1
   12fb0:	strb	r3, [r4]
   12fb4:	bl	1374c <error@@Base+0x40>
   12fb8:	mov	r4, r0
   12fbc:	mov	r0, r8
   12fc0:	bl	10b14 <utf8proc_NFC@plt>
   12fc4:	mov	r1, r4
   12fc8:	str	r0, [r4, #8]
   12fcc:	ldr	r0, [sp, #4]
   12fd0:	bl	119ac <__assert_fail@plt+0xe38>
   12fd4:	mov	r0, r8
   12fd8:	bl	10a00 <free@plt>
   12fdc:	ldr	r9, [r6, #4]
   12fe0:	cmp	r9, #0
   12fe4:	str	r9, [sp, #12]
   12fe8:	bne	12d08 <__assert_fail@plt+0x2194>
   12fec:	add	sp, sp, #28
   12ff0:	ldrd	r4, [sp]
   12ff4:	ldrd	r6, [sp, #8]
   12ff8:	ldrd	r8, [sp, #16]
   12ffc:	ldrd	sl, [sp, #24]
   13000:	add	sp, sp, #32
   13004:	pop	{pc}		; (ldr pc, [sp], #4)
   13008:	ldr	r3, [r2, #8]
   1300c:	cmp	r3, #4
   13010:	bne	1307c <__assert_fail@plt+0x2508>
   13014:	mov	r6, r0
   13018:	ldr	r0, [r6, #4]
   1301c:	cmp	r0, #0
   13020:	beq	12f00 <__assert_fail@plt+0x238c>
   13024:	movw	ip, #1092	; 0x444
   13028:	movw	lr, #8294	; 0x2066
   1302c:	ldr	r1, [r0, #12]
   13030:	mov	r3, ip
   13034:	mov	r2, #0
   13038:	b	1304c <__assert_fail@plt+0x24d8>
   1303c:	sub	r3, ip, r2
   13040:	add	lr, r2, r3, lsr #1
   13044:	add	lr, lr, lr, lsl #1
   13048:	ldr	lr, [r7, lr, lsl #2]
   1304c:	add	r3, r2, r3, lsr #1
   13050:	cmp	r1, lr
   13054:	subcc	ip, r3, #1
   13058:	bcc	13074 <__assert_fail@plt+0x2500>
   1305c:	add	r2, r3, r3, lsl #1
   13060:	add	r2, r7, r2, lsl #2
   13064:	ldr	lr, [r2, #4]
   13068:	cmp	r1, lr
   1306c:	bls	13008 <__assert_fail@plt+0x2494>
   13070:	add	r2, r3, #1
   13074:	cmp	r2, ip
   13078:	bls	1303c <__assert_fail@plt+0x24c8>
   1307c:	movw	ip, #8294	; 0x2066
   13080:	mov	r2, #0
   13084:	movw	lr, #1092	; 0x444
   13088:	movw	r3, #1092	; 0x444
   1308c:	b	130a0 <__assert_fail@plt+0x252c>
   13090:	sub	r3, lr, r2
   13094:	add	ip, r2, r3, lsr #1
   13098:	add	ip, ip, ip, lsl #1
   1309c:	ldr	ip, [r7, ip, lsl #2]
   130a0:	add	r3, r2, r3, lsr #1
   130a4:	cmp	r1, ip
   130a8:	subcc	lr, r3, #1
   130ac:	bcc	130c8 <__assert_fail@plt+0x2554>
   130b0:	add	r2, r3, r3, lsl #1
   130b4:	add	r2, r7, r2, lsl #2
   130b8:	ldr	ip, [r2, #4]
   130bc:	cmp	r1, ip
   130c0:	bls	131c0 <__assert_fail@plt+0x264c>
   130c4:	add	r2, r3, #1
   130c8:	cmp	lr, r2
   130cc:	bcs	13090 <__assert_fail@plt+0x251c>
   130d0:	b	12f00 <__assert_fail@plt+0x238c>
   130d4:	mov	r8, #1
   130d8:	b	12ef4 <__assert_fail@plt+0x2380>
   130dc:	cmp	r5, #13
   130e0:	bne	13200 <__assert_fail@plt+0x268c>
   130e4:	sub	r1, r4, #8
   130e8:	cmp	r1, #1
   130ec:	bhi	13118 <__assert_fail@plt+0x25a4>
   130f0:	mov	r8, r5
   130f4:	b	12ef4 <__assert_fail@plt+0x2380>
   130f8:	mov	r4, #18
   130fc:	mov	ip, #16
   13100:	mov	r2, r4
   13104:	mov	r5, r4
   13108:	mov	r3, #10
   1310c:	sub	r1, r8, #8
   13110:	cmp	r1, #1
   13114:	bls	130dc <__assert_fail@plt+0x2568>
   13118:	sub	r0, r4, #10
   1311c:	clz	r0, r0
   13120:	lsr	r0, r0, #5
   13124:	cmp	r8, #8
   13128:	cmpeq	r5, #11
   1312c:	bne	132cc <__assert_fail@plt+0x2758>
   13130:	cmp	r4, #8
   13134:	beq	13388 <__assert_fail@plt+0x2814>
   13138:	sub	lr, r4, #15
   1313c:	mov	r1, #0
   13140:	clz	lr, lr
   13144:	mov	r3, r1
   13148:	lsr	lr, lr, #5
   1314c:	sub	r2, r5, #7
   13150:	sub	r0, r4, #7
   13154:	clz	r2, r2
   13158:	clz	r0, r0
   1315c:	lsr	r2, r2, #5
   13160:	mov	r8, r5
   13164:	lsr	r0, r0, #5
   13168:	orrs	r3, r1, r3
   1316c:	bne	13180 <__assert_fail@plt+0x260c>
   13170:	cmp	r5, #16
   13174:	orreq	r2, r2, #1
   13178:	cmp	r2, #0
   1317c:	beq	13374 <__assert_fail@plt+0x2800>
   13180:	cmp	r4, #16
   13184:	beq	12ef4 <__assert_fail@plt+0x2380>
   13188:	cmp	r5, #16
   1318c:	bne	13374 <__assert_fail@plt+0x2800>
   13190:	sub	r4, r4, #8
   13194:	cmp	r4, #1
   13198:	orrls	lr, lr, #1
   1319c:	cmp	lr, #0
   131a0:	bne	12ef4 <__assert_fail@plt+0x2380>
   131a4:	cmp	r0, #0
   131a8:	bne	12ef4 <__assert_fail@plt+0x2380>
   131ac:	cmp	r6, #0
   131b0:	bne	13018 <__assert_fail@plt+0x24a4>
   131b4:	b	12fec <__assert_fail@plt+0x2478>
   131b8:	ldr	r2, [r2, #8]
   131bc:	b	12e5c <__assert_fail@plt+0x22e8>
   131c0:	ldr	r3, [r2, #8]
   131c4:	cmp	r3, #6
   131c8:	beq	13014 <__assert_fail@plt+0x24a0>
   131cc:	b	12f00 <__assert_fail@plt+0x238c>
   131d0:	ldr	r5, [r2, #8]
   131d4:	mov	r0, r6
   131d8:	bl	12be0 <__assert_fail@plt+0x206c>
   131dc:	cmp	r0, #0
   131e0:	sub	sl, r5, #1
   131e4:	clz	sl, sl
   131e8:	lsr	sl, sl, #5
   131ec:	bne	12d90 <__assert_fail@plt+0x221c>
   131f0:	mov	r4, #18
   131f4:	mov	r1, r0
   131f8:	mov	r2, r4
   131fc:	b	12e64 <__assert_fail@plt+0x22f0>
   13200:	sub	r1, r5, #10
   13204:	bics	r1, r1, #2
   13208:	bne	13350 <__assert_fail@plt+0x27dc>
   1320c:	sub	r1, r4, #8
   13210:	cmp	r1, #1
   13214:	bls	130f0 <__assert_fail@plt+0x257c>
   13218:	sub	r0, r4, #10
   1321c:	sub	r1, r5, #8
   13220:	clz	r0, r0
   13224:	clz	r1, r1
   13228:	lsr	r0, r0, #5
   1322c:	lsr	r1, r1, #5
   13230:	cmp	r4, #11
   13234:	movne	r1, #0
   13238:	andeq	r1, r1, #1
   1323c:	cmp	r1, #0
   13240:	beq	13124 <__assert_fail@plt+0x25b0>
   13244:	cmp	r2, #8
   13248:	beq	12ef0 <__assert_fail@plt+0x237c>
   1324c:	cmp	r3, #1
   13250:	sub	r1, r5, #15
   13254:	movhi	r3, #0
   13258:	movls	r3, #1
   1325c:	clz	r1, r1
   13260:	cmp	r5, #15
   13264:	lsr	r1, r1, #5
   13268:	mov	lr, #0
   1326c:	beq	13310 <__assert_fail@plt+0x279c>
   13270:	cmp	r8, #15
   13274:	beq	13390 <__assert_fail@plt+0x281c>
   13278:	sub	r2, r5, #7
   1327c:	sub	r0, r4, #7
   13280:	clz	r2, r2
   13284:	clz	r0, r0
   13288:	lsr	r2, r2, #5
   1328c:	lsr	r0, r0, #5
   13290:	tst	r2, r0
   13294:	movne	r8, #7
   13298:	bne	12ef4 <__assert_fail@plt+0x2380>
   1329c:	mov	r8, r5
   132a0:	b	13168 <__assert_fail@plt+0x25f4>
   132a4:	ldr	r4, [r2, #8]
   132a8:	bl	12be0 <__assert_fail@plt+0x206c>
   132ac:	cmp	r0, #0
   132b0:	sub	r1, r4, #2
   132b4:	clz	r1, r1
   132b8:	lsr	r1, r1, #5
   132bc:	and	lr, r1, sl
   132c0:	bne	12e00 <__assert_fail@plt+0x228c>
   132c4:	mov	r2, #18
   132c8:	b	12e5c <__assert_fail@plt+0x22e8>
   132cc:	sub	r1, r5, #15
   132d0:	sub	lr, r4, #15
   132d4:	clz	r1, r1
   132d8:	clz	lr, lr
   132dc:	lsr	r1, r1, #5
   132e0:	lsr	lr, lr, #5
   132e4:	tst	r1, lr
   132e8:	beq	132f4 <__assert_fail@plt+0x2780>
   132ec:	mov	r8, #15
   132f0:	b	12ef4 <__assert_fail@plt+0x2380>
   132f4:	cmp	r3, #1
   132f8:	movhi	r3, #0
   132fc:	movls	r3, #1
   13300:	tst	lr, r3
   13304:	bne	130f0 <__assert_fail@plt+0x257c>
   13308:	cmp	r5, #15
   1330c:	bne	13270 <__assert_fail@plt+0x26fc>
   13310:	sub	r8, r4, #8
   13314:	cmp	r8, #1
   13318:	bls	132ec <__assert_fail@plt+0x2778>
   1331c:	cmp	ip, #12
   13320:	orreq	r0, r0, #1
   13324:	cmp	r0, #0
   13328:	beq	13334 <__assert_fail@plt+0x27c0>
   1332c:	cmp	r2, #15
   13330:	beq	132ec <__assert_fail@plt+0x2778>
   13334:	sub	r0, r4, #7
   13338:	orrs	r3, r1, r3
   1333c:	clz	r0, r0
   13340:	lsr	r0, r0, #5
   13344:	beq	13374 <__assert_fail@plt+0x2800>
   13348:	mov	r8, #15
   1334c:	b	13180 <__assert_fail@plt+0x260c>
   13350:	sub	r0, r4, #10
   13354:	clz	r0, r0
   13358:	lsr	r0, r0, #5
   1335c:	b	12edc <__assert_fail@plt+0x2368>
   13360:	mov	r2, #18
   13364:	mov	r5, r0
   13368:	mov	r1, r0
   1336c:	mov	r4, r2
   13370:	b	12e78 <__assert_fail@plt+0x2304>
   13374:	cmp	r5, #5
   13378:	cmpeq	r4, #5
   1337c:	bne	131ac <__assert_fail@plt+0x2638>
   13380:	mov	r8, #5
   13384:	b	12ef4 <__assert_fail@plt+0x2380>
   13388:	mov	r8, #11
   1338c:	b	12ef4 <__assert_fail@plt+0x2380>
   13390:	cmp	r5, #14
   13394:	bne	13428 <__assert_fail@plt+0x28b4>
   13398:	cmp	r4, #15
   1339c:	bne	1314c <__assert_fail@plt+0x25d8>
   133a0:	mov	r8, r5
   133a4:	b	12ef4 <__assert_fail@plt+0x2380>
   133a8:	mov	r4, r0
   133ac:	mov	r2, #18
   133b0:	mov	r1, r0
   133b4:	b	12e64 <__assert_fail@plt+0x22f0>
   133b8:	mov	r0, #1
   133bc:	bl	10a90 <malloc@plt>
   133c0:	mov	r8, r0
   133c4:	mov	r4, r0
   133c8:	b	12fa4 <__assert_fail@plt+0x2430>
   133cc:	movw	r3, #19664	; 0x4cd0
   133d0:	movt	r3, #1
   133d4:	movw	r1, #32820	; 0x8034
   133d8:	movt	r1, #1
   133dc:	movw	r0, #32828	; 0x803c
   133e0:	movt	r0, #1
   133e4:	mov	r2, #249	; 0xf9
   133e8:	bl	10b74 <__assert_fail@plt>
   133ec:	movw	r3, #19664	; 0x4cd0
   133f0:	movt	r3, #1
   133f4:	movw	r1, #32820	; 0x8034
   133f8:	movt	r1, #1
   133fc:	movw	r0, #32844	; 0x804c
   13400:	movt	r0, #1
   13404:	mov	r2, #253	; 0xfd
   13408:	bl	10b74 <__assert_fail@plt>
   1340c:	movw	r1, #32820	; 0x8034
   13410:	movt	r1, #1
   13414:	ldr	r3, [pc, #40]	; 13444 <__assert_fail@plt+0x28d0>
   13418:	movw	r0, #32828	; 0x803c
   1341c:	movt	r0, #1
   13420:	movw	r2, #269	; 0x10d
   13424:	bl	10b74 <__assert_fail@plt>
   13428:	sub	r2, r5, #10
   1342c:	bics	r2, r2, #2
   13430:	bne	13278 <__assert_fail@plt+0x2704>
   13434:	cmp	r4, #15
   13438:	bne	13278 <__assert_fail@plt+0x2704>
   1343c:	mov	r8, r5
   13440:	b	12ef4 <__assert_fail@plt+0x2380>
   13444:	andeq	r4, r1, r4, ror #25
   13448:	str	r4, [sp, #-8]!
   1344c:	mov	r4, r0
   13450:	ldr	r0, [r0, #8]
   13454:	str	lr, [sp, #4]
   13458:	bl	10a00 <free@plt>
   1345c:	mov	r0, r4
   13460:	ldr	r4, [sp]
   13464:	ldr	lr, [sp, #4]
   13468:	add	sp, sp, #8
   1346c:	b	10a00 <free@plt>
   13470:	movw	r3, #5060	; 0x13c4
   13474:	movt	r3, #3
   13478:	str	r7, [sp, #-8]!
   1347c:	ldr	r3, [r3]
   13480:	mov	r8, r0
   13484:	str	lr, [sp, #4]
   13488:	sub	sp, sp, #112	; 0x70
   1348c:	cmp	r3, #0
   13490:	beq	13498 <__assert_fail@plt+0x2924>
   13494:	blx	r3
   13498:	movw	r5, #45300	; 0xb0f4
   1349c:	movt	r5, #2
   134a0:	ldrsh	r3, [r5]
   134a4:	cmp	r3, #0
   134a8:	ble	1350c <__assert_fail@plt+0x2998>
   134ac:	movw	r7, #5056	; 0x13c0
   134b0:	movt	r7, #3
   134b4:	movw	r6, #32864	; 0x8060
   134b8:	movt	r6, #1
   134bc:	mov	r4, #1
   134c0:	ldr	r9, [r7]
   134c4:	bl	10ac0 <getpid@plt>
   134c8:	mov	r3, r0
   134cc:	mov	r1, r6
   134d0:	str	r4, [sp]
   134d4:	add	r0, sp, #12
   134d8:	add	r4, r4, #1
   134dc:	sxth	r4, r4
   134e0:	mov	r2, r9
   134e4:	bl	10b2c <sprintf@plt>
   134e8:	add	r0, sp, #12
   134ec:	bl	10a30 <strdup@plt>
   134f0:	mov	r9, r0
   134f4:	bl	10a48 <unlink@plt>
   134f8:	mov	r0, r9
   134fc:	bl	10a00 <free@plt>
   13500:	ldrsh	r3, [r5]
   13504:	cmp	r3, r4
   13508:	bge	134c0 <__assert_fail@plt+0x294c>
   1350c:	mov	r0, r8
   13510:	bl	10acc <exit@plt>
   13514:	ldrb	r3, [r0]
   13518:	ldrb	r2, [r1]
   1351c:	cmp	r3, #0
   13520:	beq	13548 <__assert_fail@plt+0x29d4>
   13524:	cmp	r2, r3
   13528:	beq	13538 <__assert_fail@plt+0x29c4>
   1352c:	b	13554 <__assert_fail@plt+0x29e0>
   13530:	cmp	r3, r2
   13534:	bne	13554 <__assert_fail@plt+0x29e0>
   13538:	ldrb	r3, [r0, #1]!
   1353c:	ldrb	r2, [r1, #1]!
   13540:	cmp	r3, #0
   13544:	bne	13530 <__assert_fail@plt+0x29bc>
   13548:	cmp	r2, #0
   1354c:	beq	13564 <__assert_fail@plt+0x29f0>
   13550:	mov	r3, #0
   13554:	cmp	r3, r2
   13558:	mvncc	r0, #0
   1355c:	movcs	r0, #1
   13560:	bx	lr
   13564:	mov	r0, r2
   13568:	bx	lr
   1356c:	movw	r3, #37096	; 0x90e8
   13570:	movt	r3, #2
   13574:	ldr	r3, [r3]
   13578:	cmp	r3, r0
   1357c:	beq	13598 <__assert_fail@plt+0x2a24>
   13580:	movw	r3, #37100	; 0x90ec
   13584:	movt	r3, #2
   13588:	ldr	r3, [r3]
   1358c:	cmp	r3, r0
   13590:	beq	13598 <__assert_fail@plt+0x2a24>
   13594:	b	10b08 <fclose@plt>
   13598:	bx	lr
   1359c:	push	{lr}		; (str lr, [sp, #-4]!)
   135a0:	sub	sp, sp, #92	; 0x5c
   135a4:	mov	r1, r0
   135a8:	mov	r2, sp
   135ac:	mov	r0, #3
   135b0:	bl	10a60 <__xstat@plt>
   135b4:	clz	r0, r0
   135b8:	lsr	r0, r0, #5
   135bc:	add	sp, sp, #92	; 0x5c
   135c0:	pop	{pc}		; (ldr pc, [sp], #4)
   135c4:	movw	r3, #45300	; 0xb0f4
   135c8:	movt	r3, #2
   135cc:	strd	r4, [sp, #-12]!
   135d0:	ldrh	r4, [r3]
   135d4:	movw	r2, #5056	; 0x13c0
   135d8:	movt	r2, #3
   135dc:	ldr	r5, [r2]
   135e0:	str	lr, [sp, #8]
   135e4:	sub	sp, sp, #116	; 0x74
   135e8:	add	r4, r4, #1
   135ec:	sxth	r4, r4
   135f0:	strh	r4, [r3]
   135f4:	bl	10ac0 <getpid@plt>
   135f8:	mov	r3, r0
   135fc:	mov	r2, r5
   13600:	str	r4, [sp]
   13604:	add	r0, sp, #12
   13608:	movw	r1, #32864	; 0x8060
   1360c:	movt	r1, #1
   13610:	bl	10b2c <sprintf@plt>
   13614:	add	r0, sp, #12
   13618:	bl	10a30 <strdup@plt>
   1361c:	mov	r4, r0
   13620:	bl	10a48 <unlink@plt>
   13624:	mov	r0, r4
   13628:	add	sp, sp, #116	; 0x74
   1362c:	ldrd	r4, [sp]
   13630:	add	sp, sp, #8
   13634:	pop	{pc}		; (ldr pc, [sp], #4)
   13638:	str	r4, [sp, #-8]!
   1363c:	mov	r4, r0
   13640:	str	lr, [sp, #4]
   13644:	bl	10ae4 <strlen@plt>
   13648:	uxth	r0, r0
   1364c:	sub	r3, r0, #1
   13650:	sxth	r3, r3
   13654:	cmp	r3, #0
   13658:	blt	13698 <__assert_fail@plt+0x2b24>
   1365c:	ldrb	r2, [r4, r3]
   13660:	cmp	r2, #47	; 0x2f
   13664:	beq	13698 <__assert_fail@plt+0x2b24>
   13668:	sub	r0, r0, #2
   1366c:	sxth	r3, r0
   13670:	add	r2, r3, #1
   13674:	add	r2, r4, r2
   13678:	b	1368c <__assert_fail@plt+0x2b18>
   1367c:	ldrb	r0, [r2, #-1]!
   13680:	cmp	r0, #47	; 0x2f
   13684:	beq	13698 <__assert_fail@plt+0x2b24>
   13688:	mov	r3, r1
   1368c:	tst	r3, #32768	; 0x8000
   13690:	sub	r1, r3, #1
   13694:	beq	1367c <__assert_fail@plt+0x2b08>
   13698:	add	r0, r3, #1
   1369c:	add	r0, r4, r0
   136a0:	ldr	r4, [sp]
   136a4:	add	sp, sp, #4
   136a8:	pop	{pc}		; (ldr pc, [sp], #4)
   136ac:	mov	r0, #0
   136b0:	str	r4, [sp, #-8]!
   136b4:	str	lr, [sp, #4]
   136b8:	bl	13470 <__assert_fail@plt+0x28fc>
   136bc:	movw	r3, #5052	; 0x13bc
   136c0:	movt	r3, #3
   136c4:	str	r4, [sp, #-8]!
   136c8:	ldr	r2, [r3]
   136cc:	str	lr, [sp, #4]
   136d0:	cmp	r2, #0
   136d4:	beq	136e0 <__assert_fail@plt+0x2b6c>
   136d8:	blx	r2
   136dc:	bl	136ac <__assert_fail@plt+0x2b38>
   136e0:	movw	r3, #5056	; 0x13c0
   136e4:	movt	r3, #3
   136e8:	movw	ip, #37088	; 0x90e0
   136ec:	movt	ip, #2
   136f0:	ldr	r2, [r3]
   136f4:	movw	r1, #32880	; 0x8070
   136f8:	movt	r1, #1
   136fc:	mov	r3, r0
   13700:	ldr	r0, [ip]
   13704:	bl	10af0 <fprintf@plt>
   13708:	b	136dc <__assert_fail@plt+0x2b68>

0001370c <error@@Base>:
   1370c:	movw	r3, #5056	; 0x13c0
   13710:	movt	r3, #3
   13714:	str	r4, [sp, #-8]!
   13718:	movw	ip, #37088	; 0x90e0
   1371c:	movt	ip, #2
   13720:	ldr	r2, [r3]
   13724:	movw	r1, #32896	; 0x8080
   13728:	movt	r1, #1
   1372c:	str	lr, [sp, #4]
   13730:	mov	r3, r0
   13734:	ldr	r0, [ip]
   13738:	bl	10af0 <fprintf@plt>
   1373c:	movw	r3, #37080	; 0x90d8
   13740:	movt	r3, #2
   13744:	ldr	r0, [r3]
   13748:	bl	13470 <__assert_fail@plt+0x28fc>
   1374c:	str	r4, [sp, #-8]!
   13750:	str	lr, [sp, #4]
   13754:	bl	109d0 <calloc@plt>
   13758:	cmp	r0, #0
   1375c:	beq	1376c <error@@Base+0x60>
   13760:	ldr	r4, [sp]
   13764:	add	sp, sp, #4
   13768:	pop	{pc}		; (ldr pc, [sp], #4)
   1376c:	movw	r0, #32904	; 0x8088
   13770:	movt	r0, #1
   13774:	bl	1370c <error@@Base>
   13778:	movw	r3, #45300	; 0xb0f4
   1377c:	movt	r3, #2
   13780:	ldrb	r2, [r3, #2]
   13784:	cmp	r2, #0
   13788:	bxne	lr
   1378c:	mov	r2, #1
   13790:	movw	r0, #32932	; 0x80a4
   13794:	movt	r0, #1
   13798:	str	r4, [sp, #-8]!
   1379c:	str	lr, [sp, #4]
   137a0:	strb	r2, [r3, #2]
   137a4:	bl	1370c <error@@Base>
   137a8:	push	{lr}		; (str lr, [sp, #-4]!)
   137ac:	sub	sp, sp, #12
   137b0:	movw	r3, #5056	; 0x13c0
   137b4:	movt	r3, #3
   137b8:	movw	ip, #37088	; 0x90e0
   137bc:	movt	ip, #2
   137c0:	str	r1, [sp]
   137c4:	movw	r1, #32948	; 0x80b4
   137c8:	movt	r1, #1
   137cc:	ldr	r2, [r3]
   137d0:	mov	r3, r0
   137d4:	ldr	r0, [ip]
   137d8:	bl	10af0 <fprintf@plt>
   137dc:	movw	r3, #37080	; 0x90d8
   137e0:	movt	r3, #2
   137e4:	ldr	r0, [r3]
   137e8:	bl	13470 <__assert_fail@plt+0x28fc>
   137ec:	subs	r2, r0, #0
   137f0:	strd	r4, [sp, #-16]!
   137f4:	mov	r4, r1
   137f8:	str	r6, [sp, #8]
   137fc:	str	lr, [sp, #12]
   13800:	beq	13840 <error@@Base+0x134>
   13804:	mov	r5, r2
   13808:	bl	109f4 <fopen@plt>
   1380c:	cmp	r0, #0
   13810:	beq	13824 <error@@Base+0x118>
   13814:	ldrd	r4, [sp]
   13818:	ldr	r6, [sp, #8]
   1381c:	add	sp, sp, #12
   13820:	pop	{pc}		; (ldr pc, [sp], #4)
   13824:	ldrb	r3, [r4]
   13828:	mov	r1, r5
   1382c:	cmp	r3, #119	; 0x77
   13830:	beq	1386c <error@@Base+0x160>
   13834:	movw	r0, #32988	; 0x80dc
   13838:	movt	r0, #1
   1383c:	bl	137a8 <error@@Base+0x9c>
   13840:	ldrb	r3, [r1]
   13844:	ldrd	r4, [sp]
   13848:	ldr	r6, [sp, #8]
   1384c:	add	sp, sp, #12
   13850:	cmp	r3, #114	; 0x72
   13854:	movweq	r3, #37096	; 0x90e8
   13858:	movwne	r3, #37100	; 0x90ec
   1385c:	movteq	r3, #2
   13860:	movtne	r3, #2
   13864:	ldr	r0, [r3]
   13868:	pop	{pc}		; (ldr pc, [sp], #4)
   1386c:	movw	r0, #32964	; 0x80c4
   13870:	movt	r0, #1
   13874:	bl	137a8 <error@@Base+0x9c>
   13878:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1387c:	ldr	r4, [r1]
   13880:	strd	r6, [sp, #8]
   13884:	strd	r8, [sp, #16]
   13888:	mov	r8, r3
   1388c:	strd	sl, [sp, #24]
   13890:	mov	sl, r1
   13894:	str	lr, [sp, #32]
   13898:	sub	sp, sp, #20
   1389c:	str	r0, [sp]
   138a0:	mov	r0, r4
   138a4:	str	r2, [sp, #12]
   138a8:	bl	10ae4 <strlen@plt>
   138ac:	uxth	r0, r0
   138b0:	sub	r3, r0, #1
   138b4:	sxth	r3, r3
   138b8:	cmp	r3, #0
   138bc:	blt	138fc <error@@Base+0x1f0>
   138c0:	ldrb	r2, [r4, r3]
   138c4:	cmp	r2, #47	; 0x2f
   138c8:	beq	138fc <error@@Base+0x1f0>
   138cc:	sub	r0, r0, #2
   138d0:	sxth	r3, r0
   138d4:	add	r2, r3, #1
   138d8:	add	r2, r4, r2
   138dc:	b	138f4 <error@@Base+0x1e8>
   138e0:	ldrb	r1, [r2, #-1]!
   138e4:	sub	r0, r3, #1
   138e8:	cmp	r1, #47	; 0x2f
   138ec:	beq	138fc <error@@Base+0x1f0>
   138f0:	mov	r3, r0
   138f4:	tst	r3, #32768	; 0x8000
   138f8:	beq	138e0 <error@@Base+0x1d4>
   138fc:	add	r3, r3, #1
   13900:	movw	r2, #5056	; 0x13c0
   13904:	movt	r2, #3
   13908:	add	r3, r4, r3
   1390c:	movw	r1, #14200	; 0x3778
   13910:	movt	r1, #1
   13914:	mov	r0, #2
   13918:	str	r3, [r2]
   1391c:	bl	10aa8 <__sysv_signal@plt>
   13920:	movw	r1, #14200	; 0x3778
   13924:	movt	r1, #1
   13928:	mov	r0, #15
   1392c:	bl	10aa8 <__sysv_signal@plt>
   13930:	ldr	r3, [sp]
   13934:	ldr	r9, [r3]
   13938:	cmp	r9, #1
   1393c:	beq	13b14 <error@@Base+0x408>
   13940:	movle	r6, #0
   13944:	ble	13a9c <error@@Base+0x390>
   13948:	movw	r3, #33008	; 0x80f0
   1394c:	movt	r3, #1
   13950:	mov	r7, #1
   13954:	mov	r6, #0
   13958:	mov	r4, r7
   1395c:	str	r3, [sp, #8]
   13960:	mov	r3, sl
   13964:	mov	sl, r9
   13968:	b	1398c <error@@Base+0x280>
   1396c:	add	r4, r4, #1
   13970:	add	r2, r6, #1
   13974:	str	r5, [r3, r6, lsl #2]
   13978:	sxth	r4, r4
   1397c:	sxth	r6, r2
   13980:	cmp	r4, sl
   13984:	mov	r7, r4
   13988:	bge	13a9c <error@@Base+0x390>
   1398c:	ldr	r5, [r3, r4, lsl #2]
   13990:	lsl	r9, r4, #2
   13994:	ldrb	r2, [r5]
   13998:	cmp	r2, #45	; 0x2d
   1399c:	bne	1396c <error@@Base+0x260>
   139a0:	ldrb	fp, [r5, #1]
   139a4:	cmp	fp, #0
   139a8:	beq	1396c <error@@Base+0x260>
   139ac:	mov	r0, r5
   139b0:	str	r3, [sp, #4]
   139b4:	bl	10ae4 <strlen@plt>
   139b8:	mov	r2, r0
   139bc:	mov	r1, r5
   139c0:	ldr	r0, [sp, #8]
   139c4:	bl	10b50 <strncmp@plt>
   139c8:	cmp	r0, #0
   139cc:	beq	13b28 <error@@Base+0x41c>
   139d0:	ldr	r3, [sp, #4]
   139d4:	add	r7, r7, #1
   139d8:	cmp	r7, sl
   139dc:	movge	r0, #0
   139e0:	addlt	r9, r3, r9
   139e4:	ldrlt	r0, [r9, #4]
   139e8:	cmp	r8, #0
   139ec:	beq	13a30 <error@@Base+0x324>
   139f0:	ldrb	r2, [r8]
   139f4:	cmp	r2, #0
   139f8:	beq	13a30 <error@@Base+0x324>
   139fc:	cmp	fp, r2
   13a00:	beq	13a40 <error@@Base+0x334>
   13a04:	mov	r2, #0
   13a08:	b	13a14 <error@@Base+0x308>
   13a0c:	cmp	fp, ip
   13a10:	beq	13a44 <error@@Base+0x338>
   13a14:	add	r2, r2, #1
   13a18:	sxth	r2, r2
   13a1c:	add	r1, r2, r2, lsl #1
   13a20:	ldrb	ip, [r8, r1, lsl #2]
   13a24:	add	r1, r8, r1, lsl #2
   13a28:	cmp	ip, #0
   13a2c:	bne	13a0c <error@@Base+0x300>
   13a30:	movw	r0, #33016	; 0x80f8
   13a34:	movt	r0, #1
   13a38:	mov	r1, r5
   13a3c:	bl	137a8 <error@@Base+0x9c>
   13a40:	mov	r1, r8
   13a44:	ldr	r2, [r1, #4]
   13a48:	cmp	r2, #0
   13a4c:	beq	13ad4 <error@@Base+0x3c8>
   13a50:	ldrb	ip, [r5, #2]
   13a54:	cmp	ip, #0
   13a58:	bne	13ac0 <error@@Base+0x3b4>
   13a5c:	cmp	r0, #0
   13a60:	beq	13b30 <error@@Base+0x424>
   13a64:	ldr	r1, [r2]
   13a68:	cmp	r1, #0
   13a6c:	bne	13b40 <error@@Base+0x434>
   13a70:	str	r0, [r2]
   13a74:	uxth	r2, r4
   13a78:	ldrb	r1, [r5, #2]
   13a7c:	add	r4, r2, #1
   13a80:	sxth	r4, r4
   13a84:	cmp	r1, #0
   13a88:	addeq	r4, r2, #2
   13a8c:	sxtheq	r4, r4
   13a90:	cmp	r4, sl
   13a94:	mov	r7, r4
   13a98:	blt	1398c <error@@Base+0x280>
   13a9c:	ldr	r3, [sp]
   13aa0:	str	r6, [r3]
   13aa4:	add	sp, sp, #20
   13aa8:	ldrd	r4, [sp]
   13aac:	ldrd	r6, [sp, #8]
   13ab0:	ldrd	r8, [sp, #16]
   13ab4:	ldrd	sl, [sp, #24]
   13ab8:	add	sp, sp, #32
   13abc:	pop	{pc}		; (ldr pc, [sp], #4)
   13ac0:	ldr	r1, [r2]
   13ac4:	cmp	r1, #0
   13ac8:	bne	13b40 <error@@Base+0x434>
   13acc:	add	r0, r5, #2
   13ad0:	b	13a70 <error@@Base+0x364>
   13ad4:	ldr	r2, [r1, #8]
   13ad8:	cmp	r2, #0
   13adc:	beq	13a30 <error@@Base+0x324>
   13ae0:	ldrb	r1, [r5, #2]
   13ae4:	cmp	r1, #0
   13ae8:	bne	13a30 <error@@Base+0x324>
   13aec:	ldrb	r1, [r2]
   13af0:	cmp	r1, #0
   13af4:	bne	13b40 <error@@Base+0x434>
   13af8:	mov	r1, #1
   13afc:	add	r4, r4, #1
   13b00:	sxth	r4, r4
   13b04:	strb	r1, [r2]
   13b08:	ldr	r2, [sp]
   13b0c:	ldr	sl, [r2]
   13b10:	b	13980 <error@@Base+0x274>
   13b14:	movw	r3, #37080	; 0x90d8
   13b18:	movt	r3, #2
   13b1c:	ldrb	r6, [r3, #4]
   13b20:	cmp	r6, #0
   13b24:	beq	13a9c <error@@Base+0x390>
   13b28:	ldr	r0, [sp, #12]
   13b2c:	bl	136bc <__assert_fail@plt+0x2b48>
   13b30:	ldr	r2, [r1, #8]
   13b34:	cmp	r2, #0
   13b38:	bne	13aec <error@@Base+0x3e0>
   13b3c:	b	13a30 <error@@Base+0x324>
   13b40:	movw	r0, #33032	; 0x8108
   13b44:	movt	r0, #1
   13b48:	mov	r1, r5
   13b4c:	bl	137a8 <error@@Base+0x9c>
   13b50:	push	{lr}		; (str lr, [sp, #-4]!)
   13b54:	sub	sp, sp, #12
   13b58:	movw	r3, #5056	; 0x13c0
   13b5c:	movt	r3, #3
   13b60:	movw	ip, #37088	; 0x90e0
   13b64:	movt	ip, #2
   13b68:	str	r1, [sp]
   13b6c:	movw	r1, #32948	; 0x80b4
   13b70:	movt	r1, #1
   13b74:	ldr	r2, [r3]
   13b78:	mov	r3, r0
   13b7c:	ldr	r0, [ip]
   13b80:	bl	10af0 <fprintf@plt>
   13b84:	add	sp, sp, #12
   13b88:	pop	{pc}		; (ldr pc, [sp], #4)
   13b8c:	strd	r4, [sp, #-16]!
   13b90:	uxtb	r5, r1
   13b94:	mov	r1, #16
   13b98:	str	r6, [sp, #8]
   13b9c:	mov	r6, r0
   13ba0:	mov	r0, #1
   13ba4:	mov	r4, r2
   13ba8:	str	lr, [sp, #12]
   13bac:	bl	1374c <error@@Base+0x40>
   13bb0:	mov	r3, r0
   13bb4:	mov	r0, r6
   13bb8:	mov	r1, r3
   13bbc:	strb	r5, [r3, #8]
   13bc0:	str	r4, [r3, #12]
   13bc4:	ldrd	r4, [sp]
   13bc8:	ldr	r6, [sp, #8]
   13bcc:	ldr	lr, [sp, #12]
   13bd0:	add	sp, sp, #16
   13bd4:	b	119ac <__assert_fail@plt+0xe38>
   13bd8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13bdc:	clz	r3, r1
   13be0:	strd	r6, [sp, #8]
   13be4:	lsr	r3, r3, #5
   13be8:	strd	r8, [sp, #16]
   13bec:	strd	sl, [sp, #24]
   13bf0:	mov	fp, r2
   13bf4:	str	lr, [sp, #32]
   13bf8:	sub	sp, sp, #116	; 0x74
   13bfc:	ldrb	r2, [r2]
   13c00:	cmp	r2, #0
   13c04:	moveq	r3, #0
   13c08:	cmp	r3, #0
   13c0c:	bne	13fe4 <error@@Base+0x8d8>
   13c10:	mov	r9, r0
   13c14:	mov	r0, r1
   13c18:	ldr	r3, [r9, #4]
   13c1c:	movw	r1, #19060	; 0x4a74
   13c20:	movt	r1, #1
   13c24:	str	r3, [sp, #4]
   13c28:	bl	137ec <error@@Base+0xe0>
   13c2c:	ldrb	r3, [fp]
   13c30:	mov	r6, r0
   13c34:	cmp	r3, #0
   13c38:	bne	13f30 <error@@Base+0x824>
   13c3c:	ldr	sl, [fp, #4]
   13c40:	mov	r0, r6
   13c44:	ldrb	r5, [fp, #1]
   13c48:	cmp	sl, #0
   13c4c:	moveq	sl, #94	; 0x5e
   13c50:	bl	10b68 <getc@plt>
   13c54:	cmn	r0, #1
   13c58:	beq	13d18 <error@@Base+0x60c>
   13c5c:	movw	r8, #36360	; 0x8e08
   13c60:	movt	r8, #2
   13c64:	ldrsb	r4, [r8, r0]
   13c68:	cmp	r4, #0
   13c6c:	ble	13fc4 <error@@Base+0x8b8>
   13c70:	cmp	r5, #0
   13c74:	movne	r7, #0
   13c78:	bne	13c8c <error@@Base+0x580>
   13c7c:	b	13dac <error@@Base+0x6a0>
   13c80:	ldrsb	r4, [r8, r0]
   13c84:	cmp	r4, #0
   13c88:	ble	13fc4 <error@@Base+0x8b8>
   13c8c:	cmp	r4, #1
   13c90:	strb	r0, [sp, #8]
   13c94:	beq	13cb8 <error@@Base+0x5ac>
   13c98:	sub	r5, r4, #1
   13c9c:	mov	r3, r6
   13ca0:	mov	r2, r5
   13ca4:	mov	r1, #1
   13ca8:	add	r0, sp, #9
   13cac:	bl	10a78 <fread@plt>
   13cb0:	cmp	r5, r0
   13cb4:	bne	13fd8 <error@@Base+0x8cc>
   13cb8:	add	r2, sp, #12
   13cbc:	mov	r1, #4
   13cc0:	add	r0, sp, #8
   13cc4:	bl	10a84 <utf8proc_iterate@plt>
   13cc8:	cmp	r0, r4
   13ccc:	bne	13fd0 <error@@Base+0x8c4>
   13cd0:	ldr	r4, [sp, #12]
   13cd4:	cmp	r4, sl
   13cd8:	moveq	r7, #1
   13cdc:	beq	13d08 <error@@Base+0x5fc>
   13ce0:	mov	r1, #16
   13ce4:	mov	r0, #1
   13ce8:	bl	1374c <error@@Base+0x40>
   13cec:	mov	r3, r0
   13cf0:	mov	r0, r9
   13cf4:	mov	r1, r3
   13cf8:	strb	r7, [r3, #8]
   13cfc:	mov	r7, #0
   13d00:	str	r4, [r3, #12]
   13d04:	bl	119ac <__assert_fail@plt+0xe38>
   13d08:	mov	r0, r6
   13d0c:	bl	10b68 <getc@plt>
   13d10:	cmn	r0, #1
   13d14:	bne	13c80 <error@@Base+0x574>
   13d18:	mov	r0, r6
   13d1c:	bl	1356c <__assert_fail@plt+0x29f8>
   13d20:	ldrb	r3, [fp, #9]
   13d24:	cmp	r3, #0
   13d28:	beq	13e30 <error@@Base+0x724>
   13d2c:	ldr	r3, [sp, #4]
   13d30:	cmp	r3, #0
   13d34:	ldrne	r6, [r3, #4]
   13d38:	ldreq	r6, [r9]
   13d3c:	cmp	r6, #0
   13d40:	beq	13e30 <error@@Base+0x724>
   13d44:	mov	r5, r6
   13d48:	mov	r7, #32
   13d4c:	b	13d5c <error@@Base+0x650>
   13d50:	ldr	r5, [r5, #4]
   13d54:	cmp	r5, #0
   13d58:	beq	13ea8 <error@@Base+0x79c>
   13d5c:	ldr	r4, [r5, #12]
   13d60:	mov	r0, r4
   13d64:	bl	10a0c <utf8proc_get_property@plt>
   13d68:	cmp	r4, #13
   13d6c:	bhi	13f24 <error@@Base+0x818>
   13d70:	cmp	r4, #11
   13d74:	bcs	13d98 <error@@Base+0x68c>
   13d78:	cmp	r4, #9
   13d7c:	beq	13d98 <error@@Base+0x68c>
   13d80:	cmp	r4, #10
   13d84:	beq	13d50 <error@@Base+0x644>
   13d88:	ldrsh	r3, [r0]
   13d8c:	sub	r3, r3, #23
   13d90:	cmp	r3, #2
   13d94:	bhi	13d50 <error@@Base+0x644>
   13d98:	str	r7, [r5, #12]
   13d9c:	b	13d50 <error@@Base+0x644>
   13da0:	ldrsb	r4, [r8, r0]
   13da4:	cmp	r4, #0
   13da8:	ble	13fc4 <error@@Base+0x8b8>
   13dac:	cmp	r4, #1
   13db0:	strb	r0, [sp, #8]
   13db4:	beq	13dd8 <error@@Base+0x6cc>
   13db8:	sub	r5, r4, #1
   13dbc:	mov	r3, r6
   13dc0:	mov	r2, r5
   13dc4:	mov	r1, #1
   13dc8:	add	r0, sp, #9
   13dcc:	bl	10a78 <fread@plt>
   13dd0:	cmp	r0, r5
   13dd4:	bne	13fd8 <error@@Base+0x8cc>
   13dd8:	add	r2, sp, #12
   13ddc:	mov	r1, #4
   13de0:	add	r0, sp, #8
   13de4:	bl	10a84 <utf8proc_iterate@plt>
   13de8:	cmp	r4, r0
   13dec:	bne	13fd0 <error@@Base+0x8c4>
   13df0:	ldr	r4, [sp, #12]
   13df4:	mov	r1, #16
   13df8:	mov	r0, #1
   13dfc:	bl	1374c <error@@Base+0x40>
   13e00:	mov	r3, r0
   13e04:	mov	r2, #0
   13e08:	mov	r1, r0
   13e0c:	mov	r0, r9
   13e10:	strb	r2, [r3, #8]
   13e14:	str	r4, [r3, #12]
   13e18:	bl	119ac <__assert_fail@plt+0xe38>
   13e1c:	mov	r0, r6
   13e20:	bl	10b68 <getc@plt>
   13e24:	cmn	r0, #1
   13e28:	bne	13da0 <error@@Base+0x694>
   13e2c:	b	13d18 <error@@Base+0x60c>
   13e30:	ldrb	r3, [fp, #10]
   13e34:	cmp	r3, #0
   13e38:	beq	13e68 <error@@Base+0x75c>
   13e3c:	ldr	r3, [sp, #4]
   13e40:	cmp	r3, #0
   13e44:	ldrne	r4, [r3, #4]
   13e48:	ldreq	r4, [r9]
   13e4c:	b	13e60 <error@@Base+0x754>
   13e50:	ldr	r0, [r4, #12]
   13e54:	bl	10a54 <utf8proc_tolower@plt>
   13e58:	str	r0, [r4, #12]
   13e5c:	ldr	r4, [r4, #4]
   13e60:	cmp	r4, #0
   13e64:	bne	13e50 <error@@Base+0x744>
   13e68:	add	sp, sp, #116	; 0x74
   13e6c:	ldrd	r4, [sp]
   13e70:	ldrd	r6, [sp, #8]
   13e74:	ldrd	r8, [sp, #16]
   13e78:	ldrd	sl, [sp, #24]
   13e7c:	add	sp, sp, #32
   13e80:	pop	{pc}		; (ldr pc, [sp], #4)
   13e84:	cmp	r3, #10
   13e88:	movne	r2, #0
   13e8c:	andeq	r2, r2, #1
   13e90:	cmp	r2, #0
   13e94:	bne	13f0c <error@@Base+0x800>
   13e98:	subs	r5, r3, #10
   13e9c:	movne	r5, #1
   13ea0:	subs	r6, r4, #0
   13ea4:	beq	13e30 <error@@Base+0x724>
   13ea8:	eor	r2, r5, #1
   13eac:	ldr	r4, [r6, #4]
   13eb0:	ldr	r3, [r6, #12]
   13eb4:	cmp	r3, #32
   13eb8:	bne	13e84 <error@@Base+0x778>
   13ebc:	cmp	r4, #0
   13ec0:	moveq	r2, #1
   13ec4:	cmp	r2, #0
   13ec8:	bne	13edc <error@@Base+0x7d0>
   13ecc:	ldr	r2, [r4, #12]
   13ed0:	cmp	r2, #10
   13ed4:	cmpne	r2, #32
   13ed8:	bne	13e98 <error@@Base+0x78c>
   13edc:	cmp	r4, #0
   13ee0:	movne	r3, r5
   13ee4:	moveq	r3, #0
   13ee8:	cmp	r3, #0
   13eec:	beq	13f0c <error@@Base+0x800>
   13ef0:	ldr	r3, [r4, #12]
   13ef4:	cmp	r3, #32
   13ef8:	bne	13f0c <error@@Base+0x800>
   13efc:	ldrb	r3, [r4, #8]
   13f00:	ldrb	r2, [r6, #8]
   13f04:	orr	r3, r3, r2
   13f08:	strb	r3, [r4, #8]
   13f0c:	mov	r0, r9
   13f10:	mov	r1, r6
   13f14:	bl	11ab4 <__assert_fail@plt+0xf40>
   13f18:	mov	r0, r6
   13f1c:	bl	10a00 <free@plt>
   13f20:	b	13ea0 <error@@Base+0x794>
   13f24:	cmp	r4, #160	; 0xa0
   13f28:	bne	13d88 <error@@Base+0x67c>
   13f2c:	b	13d98 <error@@Base+0x68c>
   13f30:	mov	r2, r0
   13f34:	mov	r1, #99	; 0x63
   13f38:	add	r0, sp, #12
   13f3c:	bl	10a18 <fgets@plt>
   13f40:	cmp	r0, #0
   13f44:	beq	13f64 <error@@Base+0x858>
   13f48:	movw	r1, #33080	; 0x8138
   13f4c:	movt	r1, #1
   13f50:	mov	r2, #51	; 0x33
   13f54:	add	r0, sp, #12
   13f58:	bl	10b50 <strncmp@plt>
   13f5c:	subs	r4, r0, #0
   13f60:	beq	13f78 <error@@Base+0x86c>
   13f64:	mov	r0, r6
   13f68:	bl	10a3c <rewind@plt>
   13f6c:	mov	r3, #0
   13f70:	strb	r3, [fp, #11]
   13f74:	b	13c3c <error@@Base+0x530>
   13f78:	movw	r5, #33136	; 0x8170
   13f7c:	movt	r5, #1
   13f80:	mov	r2, r6
   13f84:	mov	r1, #99	; 0x63
   13f88:	add	r0, sp, #12
   13f8c:	bl	10a18 <fgets@plt>
   13f90:	cmp	r0, #0
   13f94:	beq	13fbc <error@@Base+0x8b0>
   13f98:	mov	r1, r5
   13f9c:	add	r0, sp, #12
   13fa0:	bl	109dc <strcmp@plt>
   13fa4:	cmp	r0, #0
   13fa8:	bne	13f80 <error@@Base+0x874>
   13fac:	cmp	r4, #0
   13fb0:	bne	13fbc <error@@Base+0x8b0>
   13fb4:	mov	r4, #1
   13fb8:	b	13f80 <error@@Base+0x874>
   13fbc:	mov	r3, #1
   13fc0:	b	13f70 <error@@Base+0x864>
   13fc4:	movw	r0, #33192	; 0x81a8
   13fc8:	movt	r0, #1
   13fcc:	bl	1370c <error@@Base>
   13fd0:	bl	10b38 <utf8proc_errmsg@plt>
   13fd4:	bl	1370c <error@@Base>
   13fd8:	movw	r0, #33216	; 0x81c0
   13fdc:	movt	r0, #1
   13fe0:	bl	1370c <error@@Base>
   13fe4:	movw	r1, #33052	; 0x811c
   13fe8:	movt	r1, #1
   13fec:	movw	r0, #33064	; 0x8128
   13ff0:	movt	r0, #1
   13ff4:	bl	137a8 <error@@Base+0x9c>
   13ff8:	str	r4, [sp, #-8]!
   13ffc:	str	lr, [sp, #4]
   14000:	bl	10a24 <utf8proc_encode_char@plt>
   14004:	cmp	r0, #0
   14008:	ble	1401c <error@@Base+0x910>
   1400c:	ldr	r4, [sp]
   14010:	add	sp, sp, #4
   14014:	sxtb	r0, r0
   14018:	pop	{pc}		; (ldr pc, [sp], #4)
   1401c:	movw	r0, #33240	; 0x81d8
   14020:	movt	r0, #1
   14024:	bl	1370c <error@@Base>
   14028:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1402c:	uxtb	r5, r0
   14030:	cmp	r5, #0
   14034:	strd	r6, [sp, #8]
   14038:	mov	r6, r1
   1403c:	mov	r7, r2
   14040:	moveq	r4, r2
   14044:	str	r8, [sp, #16]
   14048:	uxtb	r8, r3
   1404c:	str	lr, [sp, #20]
   14050:	bne	14160 <error@@Base+0xa54>
   14054:	cmp	r6, #10
   14058:	bne	14090 <error@@Base+0x984>
   1405c:	cmp	r8, #0
   14060:	movw	r2, #19584	; 0x4c80
   14064:	movt	r2, #1
   14068:	movw	r1, #33264	; 0x81f0
   1406c:	movt	r1, #1
   14070:	mov	r0, r4
   14074:	ldrd	r4, [sp]
   14078:	moveq	r1, r2
   1407c:	ldrd	r6, [sp, #8]
   14080:	ldr	r8, [sp, #16]
   14084:	ldr	lr, [sp, #20]
   14088:	add	sp, sp, #24
   1408c:	b	10b2c <sprintf@plt>
   14090:	mov	r0, r6
   14094:	bl	10a0c <utf8proc_get_property@plt>
   14098:	cmp	r6, #32
   1409c:	beq	140bc <error@@Base+0x9b0>
   140a0:	ldrsh	r3, [r0]
   140a4:	cmp	r3, #0
   140a8:	ble	14130 <error@@Base+0xa24>
   140ac:	cmp	r3, #22
   140b0:	ble	140bc <error@@Base+0x9b0>
   140b4:	cmp	r3, #29
   140b8:	bne	14130 <error@@Base+0xa24>
   140bc:	mov	r0, r6
   140c0:	bl	10ad8 <utf8proc_category@plt>
   140c4:	sub	r0, r0, #6
   140c8:	cmp	r0, #2
   140cc:	bhi	140f4 <error@@Base+0x9e8>
   140d0:	mov	r1, r4
   140d4:	movw	r0, #9676	; 0x25cc
   140d8:	bl	10a24 <utf8proc_encode_char@plt>
   140dc:	cmp	r0, #0
   140e0:	ble	14180 <error@@Base+0xa74>
   140e4:	sxtb	r0, r0
   140e8:	add	r0, r5, r0
   140ec:	sxth	r5, r0
   140f0:	add	r4, r7, r5
   140f4:	mov	r1, r4
   140f8:	mov	r0, r6
   140fc:	bl	10a24 <utf8proc_encode_char@plt>
   14100:	cmp	r0, #0
   14104:	ble	14180 <error@@Base+0xa74>
   14108:	sxtb	r0, r0
   1410c:	mov	r3, #0
   14110:	add	r0, r5, r0
   14114:	sxth	r0, r0
   14118:	strb	r3, [r7, r0]
   1411c:	ldrd	r4, [sp]
   14120:	ldrd	r6, [sp, #8]
   14124:	ldr	r8, [sp, #16]
   14128:	add	sp, sp, #20
   1412c:	pop	{pc}		; (ldr pc, [sp], #4)
   14130:	cmp	r6, #255	; 0xff
   14134:	bls	1418c <error@@Base+0xa80>
   14138:	movw	r1, #33280	; 0x8200
   1413c:	movt	r1, #1
   14140:	mov	r2, r6
   14144:	mov	r0, r4
   14148:	ldrd	r4, [sp]
   1414c:	ldrd	r6, [sp, #8]
   14150:	ldr	r8, [sp, #16]
   14154:	ldr	lr, [sp, #20]
   14158:	add	sp, sp, #24
   1415c:	b	10b2c <sprintf@plt>
   14160:	mov	r1, r2
   14164:	mov	r0, #94	; 0x5e
   14168:	bl	10a24 <utf8proc_encode_char@plt>
   1416c:	subs	r4, r0, #0
   14170:	sxtbgt	r4, r4
   14174:	sxthgt	r5, r4
   14178:	addgt	r4, r7, r4
   1417c:	bgt	14054 <error@@Base+0x948>
   14180:	movw	r0, #33240	; 0x81d8
   14184:	movt	r0, #1
   14188:	bl	1370c <error@@Base>
   1418c:	movw	r1, #33272	; 0x81f8
   14190:	movt	r1, #1
   14194:	mov	r2, r6
   14198:	mov	r0, r4
   1419c:	b	14148 <error@@Base+0xa3c>
   141a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   141a4:	mov	r4, r2
   141a8:	mov	r5, r0
   141ac:	mov	r0, r1
   141b0:	movw	r1, #19536	; 0x4c50
   141b4:	movt	r1, #1
   141b8:	strd	r6, [sp, #8]
   141bc:	strd	r8, [sp, #16]
   141c0:	strd	sl, [sp, #24]
   141c4:	str	lr, [sp, #32]
   141c8:	sub	sp, sp, #20
   141cc:	bl	137ec <error@@Base+0xe0>
   141d0:	cmp	r4, #0
   141d4:	mov	r7, r0
   141d8:	beq	1422c <error@@Base+0xb20>
   141dc:	mov	r3, r7
   141e0:	mov	r2, #55	; 0x37
   141e4:	mov	r1, #1
   141e8:	movw	r0, #33080	; 0x8138
   141ec:	movt	r0, #1
   141f0:	bl	10a6c <fwrite@plt>
   141f4:	mov	r3, r7
   141f8:	mov	r2, #55	; 0x37
   141fc:	mov	r1, #1
   14200:	movw	r0, #33136	; 0x8170
   14204:	movt	r0, #1
   14208:	bl	10a6c <fwrite@plt>
   1420c:	mov	r0, r7
   14210:	blx	r4
   14214:	movw	r0, #33136	; 0x8170
   14218:	movt	r0, #1
   1421c:	mov	r3, r7
   14220:	mov	r2, #55	; 0x37
   14224:	mov	r1, #1
   14228:	bl	10a6c <fwrite@plt>
   1422c:	ldr	r4, [r5]
   14230:	cmp	r4, #0
   14234:	beq	14384 <error@@Base+0xc78>
   14238:	movw	sl, #33280	; 0x8200
   1423c:	movt	sl, #1
   14240:	movw	r9, #33272	; 0x81f8
   14244:	movt	r9, #1
   14248:	movw	r8, #19584	; 0x4c80
   1424c:	movt	r8, #1
   14250:	b	14274 <error@@Base+0xb68>
   14254:	ldrh	r3, [r8]
   14258:	strh	r3, [r6]
   1425c:	mov	r1, r7
   14260:	add	r0, sp, #4
   14264:	bl	10b44 <fputs@plt>
   14268:	ldr	r4, [r4, #4]
   1426c:	cmp	r4, #0
   14270:	beq	14384 <error@@Base+0xc78>
   14274:	ldrb	r3, [r4, #8]
   14278:	ldr	r5, [r4, #12]
   1427c:	cmp	r3, #0
   14280:	moveq	fp, r3
   14284:	addeq	r6, sp, #4
   14288:	bne	1432c <error@@Base+0xc20>
   1428c:	cmp	r5, #10
   14290:	beq	14254 <error@@Base+0xb48>
   14294:	mov	r0, r5
   14298:	bl	10a0c <utf8proc_get_property@plt>
   1429c:	cmp	r5, #32
   142a0:	beq	142c0 <error@@Base+0xbb4>
   142a4:	ldrsh	r3, [r0]
   142a8:	cmp	r3, #0
   142ac:	ble	14354 <error@@Base+0xc48>
   142b0:	cmp	r3, #22
   142b4:	ble	142c0 <error@@Base+0xbb4>
   142b8:	cmp	r3, #29
   142bc:	bne	14354 <error@@Base+0xc48>
   142c0:	mov	r0, r5
   142c4:	bl	10ad8 <utf8proc_category@plt>
   142c8:	sub	r0, r0, #6
   142cc:	cmp	r0, #2
   142d0:	bhi	142fc <error@@Base+0xbf0>
   142d4:	mov	r1, r6
   142d8:	movw	r0, #9676	; 0x25cc
   142dc:	bl	10a24 <utf8proc_encode_char@plt>
   142e0:	subs	r3, r0, #0
   142e4:	ble	143a8 <error@@Base+0xc9c>
   142e8:	sxtb	r3, r3
   142ec:	add	r3, fp, r3
   142f0:	sxth	fp, r3
   142f4:	add	r3, sp, #4
   142f8:	add	r6, r3, fp
   142fc:	mov	r1, r6
   14300:	mov	r0, r5
   14304:	bl	10a24 <utf8proc_encode_char@plt>
   14308:	subs	r3, r0, #0
   1430c:	ble	143a8 <error@@Base+0xc9c>
   14310:	sxtb	r3, r3
   14314:	add	r1, sp, #16
   14318:	add	r3, fp, r3
   1431c:	mov	r2, #0
   14320:	sxtah	r3, r1, r3
   14324:	strb	r2, [r3, #-12]
   14328:	b	1425c <error@@Base+0xb50>
   1432c:	add	r1, sp, #4
   14330:	mov	r0, #94	; 0x5e
   14334:	bl	10a24 <utf8proc_encode_char@plt>
   14338:	subs	r6, r0, #0
   1433c:	ble	143a8 <error@@Base+0xc9c>
   14340:	sxtb	r6, r6
   14344:	add	r3, sp, #4
   14348:	sxth	fp, r6
   1434c:	add	r6, r3, r6
   14350:	b	1428c <error@@Base+0xb80>
   14354:	cmp	r5, #255	; 0xff
   14358:	bhi	14370 <error@@Base+0xc64>
   1435c:	mov	r2, r5
   14360:	mov	r0, r6
   14364:	mov	r1, r9
   14368:	bl	10b2c <sprintf@plt>
   1436c:	b	1425c <error@@Base+0xb50>
   14370:	mov	r2, r5
   14374:	mov	r0, r6
   14378:	mov	r1, sl
   1437c:	bl	10b2c <sprintf@plt>
   14380:	b	1425c <error@@Base+0xb50>
   14384:	mov	r0, r7
   14388:	bl	1356c <__assert_fail@plt+0x29f8>
   1438c:	add	sp, sp, #20
   14390:	ldrd	r4, [sp]
   14394:	ldrd	r6, [sp, #8]
   14398:	ldrd	r8, [sp, #16]
   1439c:	ldrd	sl, [sp, #24]
   143a0:	add	sp, sp, #32
   143a4:	pop	{pc}		; (ldr pc, [sp], #4)
   143a8:	movw	r0, #33240	; 0x81d8
   143ac:	movt	r0, #1
   143b0:	bl	1370c <error@@Base>
   143b4:	strd	r4, [sp, #-20]!	; 0xffffffec
   143b8:	mov	r2, #0
   143bc:	strd	r6, [sp, #8]
   143c0:	str	lr, [sp, #16]
   143c4:	sub	sp, sp, #12
   143c8:	ldrb	r3, [r1]
   143cc:	str	r2, [sp, #4]
   143d0:	cmp	r3, r2
   143d4:	beq	1443c <error@@Base+0xd30>
   143d8:	mov	r4, r1
   143dc:	mov	r6, r0
   143e0:	b	14414 <error@@Base+0xd08>
   143e4:	ldr	r5, [sp, #4]
   143e8:	bl	1374c <error@@Base+0x40>
   143ec:	mov	r3, r0
   143f0:	mov	r2, #0
   143f4:	mov	r1, r0
   143f8:	mov	r0, r6
   143fc:	strb	r2, [r3, #8]
   14400:	str	r5, [r3, #12]
   14404:	bl	119ac <__assert_fail@plt+0xe38>
   14408:	ldrb	r3, [r4, r7]!
   1440c:	cmp	r3, #0
   14410:	beq	1443c <error@@Base+0xd30>
   14414:	mvn	r1, #0
   14418:	add	r2, sp, #4
   1441c:	mov	r0, r4
   14420:	bl	10a84 <utf8proc_iterate@plt>
   14424:	subs	r7, r0, #0
   14428:	mov	r1, #16
   1442c:	mov	r0, #1
   14430:	bgt	143e4 <error@@Base+0xcd8>
   14434:	mov	r0, #0
   14438:	b	14440 <error@@Base+0xd34>
   1443c:	mov	r0, #1
   14440:	add	sp, sp, #12
   14444:	ldrd	r4, [sp]
   14448:	ldrd	r6, [sp, #8]
   1444c:	add	sp, sp, #16
   14450:	pop	{pc}		; (ldr pc, [sp], #4)
   14454:	lsl	r3, r1, #2
   14458:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1445c:	strd	r6, [sp, #8]
   14460:	strd	r8, [sp, #16]
   14464:	mov	r8, r0
   14468:	strd	sl, [sp, #24]
   1446c:	movw	sl, #45304	; 0xb0f8
   14470:	movt	sl, #2
   14474:	str	lr, [sp, #32]
   14478:	sub	sp, sp, #12
   1447c:	str	r1, [sp]
   14480:	str	r3, [sp, #4]
   14484:	ldr	r3, [sp]
   14488:	ldr	r1, [sl]
   1448c:	cmp	r8, r3
   14490:	movlt	r4, r3
   14494:	movlt	r7, r8
   14498:	ldr	r5, [r1, r8, lsl #2]
   1449c:	bge	145bc <error@@Base+0xeb0>
   144a0:	mov	r0, r5
   144a4:	lsl	fp, r4, #2
   144a8:	ldr	r1, [r1, r4, lsl #2]
   144ac:	ldr	r2, [sl, #4]
   144b0:	blx	r2
   144b4:	cmp	r0, #0
   144b8:	bge	1454c <error@@Base+0xe40>
   144bc:	sub	r4, r4, #1
   144c0:	ldr	r1, [sl]
   144c4:	cmp	r7, r4
   144c8:	lslge	fp, r4, #2
   144cc:	blt	144a0 <error@@Base+0xd94>
   144d0:	cmp	r4, r7
   144d4:	add	r6, r1, fp
   144d8:	beq	1455c <error@@Base+0xe50>
   144dc:	ldr	r0, [r1, fp]
   144e0:	add	r9, r7, #1
   144e4:	lsl	r6, r7, #2
   144e8:	cmp	r4, r9
   144ec:	str	r0, [r1, r7, lsl #2]
   144f0:	bgt	14508 <error@@Base+0xdfc>
   144f4:	b	1459c <error@@Base+0xe90>
   144f8:	add	r9, r9, #1
   144fc:	ldr	r1, [sl]
   14500:	cmp	r4, r9
   14504:	beq	14554 <error@@Base+0xe48>
   14508:	mov	r0, r5
   1450c:	ldr	r1, [r1, r9, lsl #2]
   14510:	lsl	r6, r9, #2
   14514:	ldr	r7, [sl, #4]
   14518:	blx	r7
   1451c:	cmp	r0, #0
   14520:	bgt	144f8 <error@@Base+0xdec>
   14524:	ldr	r1, [sl]
   14528:	mov	r7, r9
   1452c:	add	r6, r1, r6
   14530:	ldr	r0, [r6]
   14534:	sub	r4, r4, #1
   14538:	cmp	r4, r9
   1453c:	str	r0, [r1, fp]
   14540:	bgt	144a0 <error@@Base+0xd94>
   14544:	add	r6, r1, r4, lsl #2
   14548:	b	14560 <error@@Base+0xe54>
   1454c:	ldr	r1, [sl]
   14550:	b	144d0 <error@@Base+0xdc4>
   14554:	add	r6, r1, fp
   14558:	mov	r7, r4
   1455c:	mov	r4, r7
   14560:	sub	r1, r4, #1
   14564:	str	r5, [r6]
   14568:	cmp	r8, r1
   1456c:	blt	145b0 <error@@Base+0xea4>
   14570:	ldr	r3, [sp]
   14574:	add	r8, r7, #1
   14578:	cmp	r8, r3
   1457c:	blt	14484 <error@@Base+0xd78>
   14580:	add	sp, sp, #12
   14584:	ldrd	r4, [sp]
   14588:	ldrd	r6, [sp, #8]
   1458c:	ldrd	r8, [sp, #16]
   14590:	ldrd	sl, [sp, #24]
   14594:	add	sp, sp, #32
   14598:	pop	{pc}		; (ldr pc, [sp], #4)
   1459c:	add	r6, r6, #4
   145a0:	add	r6, r1, r6
   145a4:	beq	14558 <error@@Base+0xe4c>
   145a8:	mov	r7, r9
   145ac:	b	14530 <error@@Base+0xe24>
   145b0:	mov	r0, r8
   145b4:	bl	14454 <error@@Base+0xd48>
   145b8:	b	14570 <error@@Base+0xe64>
   145bc:	mov	r4, r3
   145c0:	ldr	r3, [sp, #4]
   145c4:	mov	r7, r8
   145c8:	add	r6, r1, r3
   145cc:	b	14560 <error@@Base+0xe54>
   145d0:	cmp	r0, #1
   145d4:	mov	ip, r1
   145d8:	ble	145f8 <error@@Base+0xeec>
   145dc:	movw	r3, #45304	; 0xb0f8
   145e0:	movt	r3, #2
   145e4:	sub	r1, r0, #1
   145e8:	mov	r0, #0
   145ec:	str	ip, [r3]
   145f0:	str	r2, [r3, #4]
   145f4:	b	14454 <error@@Base+0xd48>
   145f8:	bx	lr
   145fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14600:	mov	r7, r0
   14604:	ldr	r6, [pc, #72]	; 14654 <error@@Base+0xf48>
   14608:	ldr	r5, [pc, #72]	; 14658 <error@@Base+0xf4c>
   1460c:	add	r6, pc, r6
   14610:	add	r5, pc, r5
   14614:	sub	r6, r6, r5
   14618:	mov	r8, r1
   1461c:	mov	r9, r2
   14620:	bl	109b0 <calloc@plt-0x20>
   14624:	asrs	r6, r6, #2
   14628:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1462c:	mov	r4, #0
   14630:	add	r4, r4, #1
   14634:	ldr	r3, [r5], #4
   14638:	mov	r2, r9
   1463c:	mov	r1, r8
   14640:	mov	r0, r7
   14644:	blx	r3
   14648:	cmp	r6, r4
   1464c:	bne	14630 <error@@Base+0xf24>
   14650:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14654:	strdeq	r4, [r1], -r0
   14658:	andeq	r4, r1, r8, ror #15
   1465c:	bx	lr

Disassembly of section .fini:

00014660 <.fini>:
   14660:	push	{r3, lr}
   14664:	pop	{r3, pc}
