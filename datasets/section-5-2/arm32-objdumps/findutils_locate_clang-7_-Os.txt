
../repos/findutils/locate/locate:     file format elf32-littlearm


Disassembly of section .init:

000117dc <.init>:
   117dc:	push	{r3, lr}
   117e0:	bl	11cec <__assert_fail@plt+0x4c>
   117e4:	pop	{r3, pc}

Disassembly of section .plt:

000117e8 <pthread_mutex_unlock@plt-0x14>:
   117e8:	push	{lr}		; (str lr, [sp, #-4]!)
   117ec:	ldr	lr, [pc, #4]	; 117f8 <pthread_mutex_unlock@plt-0x4>
   117f0:	add	lr, pc, lr
   117f4:	ldr	pc, [lr, #8]!
   117f8:	andeq	r9, r2, r8, lsl #16

000117fc <pthread_mutex_unlock@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #167936	; 0x29000
   11804:	ldr	pc, [ip, #2056]!	; 0x808

00011808 <fdopen@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #167936	; 0x29000
   11810:	ldr	pc, [ip, #2048]!	; 0x800

00011814 <calloc@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #167936	; 0x29000
   1181c:	ldr	pc, [ip, #2040]!	; 0x7f8

00011820 <wctype@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #167936	; 0x29000
   11828:	ldr	pc, [ip, #2032]!	; 0x7f0

0001182c <raise@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #167936	; 0x29000
   11834:	ldr	pc, [ip, #2024]!	; 0x7e8

00011838 <wcrtomb@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #167936	; 0x29000
   11840:	ldr	pc, [ip, #2016]!	; 0x7e0

00011844 <iswctype@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #167936	; 0x29000
   1184c:	ldr	pc, [ip, #2008]!	; 0x7d8

00011850 <strcmp@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #167936	; 0x29000
   11858:	ldr	pc, [ip, #2000]!	; 0x7d0

0001185c <printf@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #167936	; 0x29000
   11864:	ldr	pc, [ip, #1992]!	; 0x7c8

00011868 <pthread_mutex_destroy@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #167936	; 0x29000
   11870:	ldr	pc, [ip, #1984]!	; 0x7c0

00011874 <fflush@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #167936	; 0x29000
   1187c:	ldr	pc, [ip, #1976]!	; 0x7b8

00011880 <wcwidth@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #167936	; 0x29000
   11888:	ldr	pc, [ip, #1968]!	; 0x7b0

0001188c <getuid@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #167936	; 0x29000
   11894:	ldr	pc, [ip, #1960]!	; 0x7a8

00011898 <memmove@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #167936	; 0x29000
   118a0:	ldr	pc, [ip, #1952]!	; 0x7a0

000118a4 <free@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #167936	; 0x29000
   118ac:	ldr	pc, [ip, #1944]!	; 0x798

000118b0 <pthread_mutex_lock@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #167936	; 0x29000
   118b8:	ldr	pc, [ip, #1936]!	; 0x790

000118bc <ferror@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #167936	; 0x29000
   118c4:	ldr	pc, [ip, #1928]!	; 0x788

000118c8 <strndup@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #167936	; 0x29000
   118d0:	ldr	pc, [ip, #1920]!	; 0x780

000118d4 <_exit@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #167936	; 0x29000
   118dc:	ldr	pc, [ip, #1912]!	; 0x778

000118e0 <memcpy@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #167936	; 0x29000
   118e8:	ldr	pc, [ip, #1904]!	; 0x770

000118ec <tolower@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #167936	; 0x29000
   118f4:	ldr	pc, [ip, #1896]!	; 0x768

000118f8 <pthread_mutex_init@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #167936	; 0x29000
   11900:	ldr	pc, [ip, #1888]!	; 0x760

00011904 <towlower@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #167936	; 0x29000
   1190c:	ldr	pc, [ip, #1880]!	; 0x758

00011910 <mbsinit@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #167936	; 0x29000
   11918:	ldr	pc, [ip, #1872]!	; 0x750

0001191c <time@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #167936	; 0x29000
   11924:	ldr	pc, [ip, #1864]!	; 0x748

00011928 <memcmp@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #167936	; 0x29000
   11930:	ldr	pc, [ip, #1856]!	; 0x740

00011934 <dcgettext@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #167936	; 0x29000
   1193c:	ldr	pc, [ip, #1848]!	; 0x738

00011940 <realloc@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #167936	; 0x29000
   11948:	ldr	pc, [ip, #1840]!	; 0x730

0001194c <textdomain@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #167936	; 0x29000
   11954:	ldr	pc, [ip, #1832]!	; 0x728

00011958 <iswcntrl@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #167936	; 0x29000
   11960:	ldr	pc, [ip, #1824]!	; 0x720

00011964 <geteuid@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #167936	; 0x29000
   1196c:	ldr	pc, [ip, #1816]!	; 0x718

00011970 <iswprint@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #167936	; 0x29000
   11978:	ldr	pc, [ip, #1808]!	; 0x710

0001197c <setgroups@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #167936	; 0x29000
   11984:	ldr	pc, [ip, #1800]!	; 0x708

00011988 <__fxstat64@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #167936	; 0x29000
   11990:	ldr	pc, [ip, #1792]!	; 0x700

00011994 <lseek64@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #167936	; 0x29000
   1199c:	ldr	pc, [ip, #1784]!	; 0x6f8

000119a0 <__ctype_get_mb_cur_max@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #167936	; 0x29000
   119a8:	ldr	pc, [ip, #1776]!	; 0x6f0

000119ac <fread@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #167936	; 0x29000
   119b4:	ldr	pc, [ip, #1768]!	; 0x6e8

000119b8 <__fpending@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #167936	; 0x29000
   119c0:	ldr	pc, [ip, #1760]!	; 0x6e0

000119c4 <mbrtowc@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #167936	; 0x29000
   119cc:	ldr	pc, [ip, #1752]!	; 0x6d8

000119d0 <error@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #167936	; 0x29000
   119d8:	ldr	pc, [ip, #1744]!	; 0x6d0

000119dc <fnmatch@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #167936	; 0x29000
   119e4:	ldr	pc, [ip, #1736]!	; 0x6c8

000119e8 <open64@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #167936	; 0x29000
   119f0:	ldr	pc, [ip, #1728]!	; 0x6c0

000119f4 <getenv@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #167936	; 0x29000
   119fc:	ldr	pc, [ip, #1720]!	; 0x6b8

00011a00 <setgid@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #167936	; 0x29000
   11a08:	ldr	pc, [ip, #1712]!	; 0x6b0

00011a0c <malloc@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #167936	; 0x29000
   11a14:	ldr	pc, [ip, #1704]!	; 0x6a8

00011a18 <__libc_start_main@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #167936	; 0x29000
   11a20:	ldr	pc, [ip, #1696]!	; 0x6a0

00011a24 <strftime@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #167936	; 0x29000
   11a2c:	ldr	pc, [ip, #1688]!	; 0x698

00011a30 <__freading@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #167936	; 0x29000
   11a38:	ldr	pc, [ip, #1680]!	; 0x690

00011a3c <localtime@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #167936	; 0x29000
   11a44:	ldr	pc, [ip, #1672]!	; 0x688

00011a48 <__ctype_tolower_loc@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #167936	; 0x29000
   11a50:	ldr	pc, [ip, #1664]!	; 0x680

00011a54 <__gmon_start__@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #167936	; 0x29000
   11a5c:	ldr	pc, [ip, #1656]!	; 0x678

00011a60 <getopt_long@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #167936	; 0x29000
   11a68:	ldr	pc, [ip, #1648]!	; 0x670

00011a6c <__ctype_b_loc@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #167936	; 0x29000
   11a74:	ldr	pc, [ip, #1640]!	; 0x668

00011a78 <exit@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #167936	; 0x29000
   11a80:	ldr	pc, [ip, #1632]!	; 0x660

00011a84 <feof@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #167936	; 0x29000
   11a8c:	ldr	pc, [ip, #1624]!	; 0x658

00011a90 <strtoul@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #167936	; 0x29000
   11a98:	ldr	pc, [ip, #1616]!	; 0x650

00011a9c <strlen@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #167936	; 0x29000
   11aa4:	ldr	pc, [ip, #1608]!	; 0x648

00011aa8 <strchr@plt>:
   11aa8:	add	ip, pc, #0, 12
   11aac:	add	ip, ip, #167936	; 0x29000
   11ab0:	ldr	pc, [ip, #1600]!	; 0x640

00011ab4 <fprintf@plt>:
   11ab4:	add	ip, pc, #0, 12
   11ab8:	add	ip, ip, #167936	; 0x29000
   11abc:	ldr	pc, [ip, #1592]!	; 0x638

00011ac0 <ungetc@plt>:
   11ac0:	add	ip, pc, #0, 12
   11ac4:	add	ip, ip, #167936	; 0x29000
   11ac8:	ldr	pc, [ip, #1584]!	; 0x630

00011acc <__errno_location@plt>:
   11acc:	add	ip, pc, #0, 12
   11ad0:	add	ip, ip, #167936	; 0x29000
   11ad4:	ldr	pc, [ip, #1576]!	; 0x628

00011ad8 <iswalnum@plt>:
   11ad8:	add	ip, pc, #0, 12
   11adc:	add	ip, ip, #167936	; 0x29000
   11ae0:	ldr	pc, [ip, #1568]!	; 0x620

00011ae4 <strncasecmp@plt>:
   11ae4:	add	ip, pc, #0, 12
   11ae8:	add	ip, ip, #167936	; 0x29000
   11aec:	ldr	pc, [ip, #1560]!	; 0x618

00011af0 <__cxa_atexit@plt>:
   11af0:	add	ip, pc, #0, 12
   11af4:	add	ip, ip, #167936	; 0x29000
   11af8:	ldr	pc, [ip, #1552]!	; 0x610

00011afc <getgid@plt>:
   11afc:	add	ip, pc, #0, 12
   11b00:	add	ip, ip, #167936	; 0x29000
   11b04:	ldr	pc, [ip, #1544]!	; 0x608

00011b08 <memset@plt>:
   11b08:	add	ip, pc, #0, 12
   11b0c:	add	ip, ip, #167936	; 0x29000
   11b10:	ldr	pc, [ip, #1536]!	; 0x600

00011b14 <putchar@plt>:
   11b14:	add	ip, pc, #0, 12
   11b18:	add	ip, ip, #167936	; 0x29000
   11b1c:	ldr	pc, [ip, #1528]!	; 0x5f8

00011b20 <btowc@plt>:
   11b20:	add	ip, pc, #0, 12
   11b24:	add	ip, ip, #167936	; 0x29000
   11b28:	ldr	pc, [ip, #1520]!	; 0x5f0

00011b2c <fgetc@plt>:
   11b2c:	add	ip, pc, #0, 12
   11b30:	add	ip, ip, #167936	; 0x29000
   11b34:	ldr	pc, [ip, #1512]!	; 0x5e8

00011b38 <fileno@plt>:
   11b38:	add	ip, pc, #0, 12
   11b3c:	add	ip, ip, #167936	; 0x29000
   11b40:	ldr	pc, [ip, #1504]!	; 0x5e0

00011b44 <difftime@plt>:
   11b44:	add	ip, pc, #0, 12
   11b48:	add	ip, ip, #167936	; 0x29000
   11b4c:	ldr	pc, [ip, #1496]!	; 0x5d8

00011b50 <strtoumax@plt>:
   11b50:	add	ip, pc, #0, 12
   11b54:	add	ip, ip, #167936	; 0x29000
   11b58:	ldr	pc, [ip, #1488]!	; 0x5d0

00011b5c <memchr@plt>:
   11b5c:	add	ip, pc, #0, 12
   11b60:	add	ip, ip, #167936	; 0x29000
   11b64:	ldr	pc, [ip, #1480]!	; 0x5c8

00011b68 <fclose@plt>:
   11b68:	add	ip, pc, #0, 12
   11b6c:	add	ip, ip, #167936	; 0x29000
   11b70:	ldr	pc, [ip, #1472]!	; 0x5c0

00011b74 <strnlen@plt>:
   11b74:	add	ip, pc, #0, 12
   11b78:	add	ip, ip, #167936	; 0x29000
   11b7c:	ldr	pc, [ip, #1464]!	; 0x5b8

00011b80 <fseeko64@plt>:
   11b80:	add	ip, pc, #0, 12
   11b84:	add	ip, ip, #167936	; 0x29000
   11b88:	ldr	pc, [ip, #1456]!	; 0x5b0

00011b8c <fcntl64@plt>:
   11b8c:	add	ip, pc, #0, 12
   11b90:	add	ip, ip, #167936	; 0x29000
   11b94:	ldr	pc, [ip, #1448]!	; 0x5a8

00011b98 <setlocale@plt>:
   11b98:	add	ip, pc, #0, 12
   11b9c:	add	ip, ip, #167936	; 0x29000
   11ba0:	ldr	pc, [ip, #1440]!	; 0x5a0

00011ba4 <toupper@plt>:
   11ba4:	add	ip, pc, #0, 12
   11ba8:	add	ip, ip, #167936	; 0x29000
   11bac:	ldr	pc, [ip, #1432]!	; 0x598

00011bb0 <strrchr@plt>:
   11bb0:	add	ip, pc, #0, 12
   11bb4:	add	ip, ip, #167936	; 0x29000
   11bb8:	ldr	pc, [ip, #1424]!	; 0x590

00011bbc <nl_langinfo@plt>:
   11bbc:	add	ip, pc, #0, 12
   11bc0:	add	ip, ip, #167936	; 0x29000
   11bc4:	ldr	pc, [ip, #1416]!	; 0x588

00011bc8 <setuid@plt>:
   11bc8:	add	ip, pc, #0, 12
   11bcc:	add	ip, ip, #167936	; 0x29000
   11bd0:	ldr	pc, [ip, #1408]!	; 0x580

00011bd4 <localeconv@plt>:
   11bd4:	add	ip, pc, #0, 12
   11bd8:	add	ip, ip, #167936	; 0x29000
   11bdc:	ldr	pc, [ip, #1400]!	; 0x578

00011be0 <clearerr@plt>:
   11be0:	add	ip, pc, #0, 12
   11be4:	add	ip, ip, #167936	; 0x29000
   11be8:	ldr	pc, [ip, #1392]!	; 0x570

00011bec <sprintf@plt>:
   11bec:	add	ip, pc, #0, 12
   11bf0:	add	ip, ip, #167936	; 0x29000
   11bf4:	ldr	pc, [ip, #1384]!	; 0x568

00011bf8 <putc@plt>:
   11bf8:	add	ip, pc, #0, 12
   11bfc:	add	ip, ip, #167936	; 0x29000
   11c00:	ldr	pc, [ip, #1376]!	; 0x560

00011c04 <strpbrk@plt>:
   11c04:	add	ip, pc, #0, 12
   11c08:	add	ip, ip, #167936	; 0x29000
   11c0c:	ldr	pc, [ip, #1368]!	; 0x558

00011c10 <bindtextdomain@plt>:
   11c10:	add	ip, pc, #0, 12
   11c14:	add	ip, ip, #167936	; 0x29000
   11c18:	ldr	pc, [ip, #1360]!	; 0x550

00011c1c <getdelim@plt>:
   11c1c:	add	ip, pc, #0, 12
   11c20:	add	ip, ip, #167936	; 0x29000
   11c24:	ldr	pc, [ip, #1352]!	; 0x548

00011c28 <__xstat64@plt>:
   11c28:	add	ip, pc, #0, 12
   11c2c:	add	ip, ip, #167936	; 0x29000
   11c30:	ldr	pc, [ip, #1344]!	; 0x540

00011c34 <isatty@plt>:
   11c34:	add	ip, pc, #0, 12
   11c38:	add	ip, ip, #167936	; 0x29000
   11c3c:	ldr	pc, [ip, #1336]!	; 0x538

00011c40 <towupper@plt>:
   11c40:	add	ip, pc, #0, 12
   11c44:	add	ip, ip, #167936	; 0x29000
   11c48:	ldr	pc, [ip, #1328]!	; 0x530

00011c4c <fputs@plt>:
   11c4c:	add	ip, pc, #0, 12
   11c50:	add	ip, ip, #167936	; 0x29000
   11c54:	ldr	pc, [ip, #1320]!	; 0x528

00011c58 <strncmp@plt>:
   11c58:	add	ip, pc, #0, 12
   11c5c:	add	ip, ip, #167936	; 0x29000
   11c60:	ldr	pc, [ip, #1312]!	; 0x520

00011c64 <abort@plt>:
   11c64:	add	ip, pc, #0, 12
   11c68:	add	ip, ip, #167936	; 0x29000
   11c6c:	ldr	pc, [ip, #1304]!	; 0x518

00011c70 <getc@plt>:
   11c70:	add	ip, pc, #0, 12
   11c74:	add	ip, ip, #167936	; 0x29000
   11c78:	ldr	pc, [ip, #1296]!	; 0x510

00011c7c <close@plt>:
   11c7c:	add	ip, pc, #0, 12
   11c80:	add	ip, ip, #167936	; 0x29000
   11c84:	ldr	pc, [ip, #1288]!	; 0x508

00011c88 <__lxstat64@plt>:
   11c88:	add	ip, pc, #0, 12
   11c8c:	add	ip, ip, #167936	; 0x29000
   11c90:	ldr	pc, [ip, #1280]!	; 0x500

00011c94 <dcngettext@plt>:
   11c94:	add	ip, pc, #0, 12
   11c98:	add	ip, ip, #167936	; 0x29000
   11c9c:	ldr	pc, [ip, #1272]!	; 0x4f8

00011ca0 <__assert_fail@plt>:
   11ca0:	add	ip, pc, #0, 12
   11ca4:	add	ip, ip, #167936	; 0x29000
   11ca8:	ldr	pc, [ip, #1264]!	; 0x4f0

Disassembly of section .text:

00011cb0 <.text>:
   11cb0:	mov	fp, #0
   11cb4:	mov	lr, #0
   11cb8:	pop	{r1}		; (ldr r1, [sp], #4)
   11cbc:	mov	r2, sp
   11cc0:	push	{r2}		; (str r2, [sp, #-4]!)
   11cc4:	push	{r0}		; (str r0, [sp, #-4]!)
   11cc8:	ldr	ip, [pc, #16]	; 11ce0 <__assert_fail@plt+0x40>
   11ccc:	push	{ip}		; (str ip, [sp, #-4]!)
   11cd0:	ldr	r0, [pc, #12]	; 11ce4 <__assert_fail@plt+0x44>
   11cd4:	ldr	r3, [pc, #12]	; 11ce8 <__assert_fail@plt+0x48>
   11cd8:	bl	11a18 <__libc_start_main@plt>
   11cdc:	bl	11c64 <abort@plt>
   11ce0:	andeq	r8, r2, r0, lsl #29
   11ce4:	andeq	r1, r1, r0, lsr #27
   11ce8:	andeq	r8, r2, r0, lsr #28
   11cec:	ldr	r3, [pc, #20]	; 11d08 <__assert_fail@plt+0x68>
   11cf0:	ldr	r2, [pc, #20]	; 11d0c <__assert_fail@plt+0x6c>
   11cf4:	add	r3, pc, r3
   11cf8:	ldr	r2, [r3, r2]
   11cfc:	cmp	r2, #0
   11d00:	bxeq	lr
   11d04:	b	11a54 <__gmon_start__@plt>
   11d08:	andeq	r9, r2, r4, lsl #6
   11d0c:	muleq	r0, ip, r1
   11d10:	ldr	r0, [pc, #24]	; 11d30 <__assert_fail@plt+0x90>
   11d14:	ldr	r3, [pc, #24]	; 11d34 <__assert_fail@plt+0x94>
   11d18:	cmp	r3, r0
   11d1c:	bxeq	lr
   11d20:	ldr	r3, [pc, #16]	; 11d38 <__assert_fail@plt+0x98>
   11d24:	cmp	r3, #0
   11d28:	bxeq	lr
   11d2c:	bx	r3
   11d30:	strdeq	fp, [r3], -ip
   11d34:	strdeq	fp, [r3], -ip
   11d38:	andeq	r0, r0, r0
   11d3c:	ldr	r0, [pc, #36]	; 11d68 <__assert_fail@plt+0xc8>
   11d40:	ldr	r1, [pc, #36]	; 11d6c <__assert_fail@plt+0xcc>
   11d44:	sub	r1, r1, r0
   11d48:	asr	r1, r1, #2
   11d4c:	add	r1, r1, r1, lsr #31
   11d50:	asrs	r1, r1, #1
   11d54:	bxeq	lr
   11d58:	ldr	r3, [pc, #16]	; 11d70 <__assert_fail@plt+0xd0>
   11d5c:	cmp	r3, #0
   11d60:	bxeq	lr
   11d64:	bx	r3
   11d68:	strdeq	fp, [r3], -ip
   11d6c:	strdeq	fp, [r3], -ip
   11d70:	andeq	r0, r0, r0
   11d74:	push	{r4, lr}
   11d78:	ldr	r4, [pc, #24]	; 11d98 <__assert_fail@plt+0xf8>
   11d7c:	ldrb	r3, [r4]
   11d80:	cmp	r3, #0
   11d84:	popne	{r4, pc}
   11d88:	bl	11d10 <__assert_fail@plt+0x70>
   11d8c:	mov	r3, #1
   11d90:	strb	r3, [r4]
   11d94:	pop	{r4, pc}
   11d98:	andeq	fp, r3, ip, lsl r2
   11d9c:	b	11d3c <__assert_fail@plt+0x9c>
   11da0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11da4:	add	fp, sp, #28
   11da8:	sub	sp, sp, #4
   11dac:	vpush	{d8-d12}
   11db0:	sub	sp, sp, #104	; 0x68
   11db4:	sub	sp, sp, #3072	; 0xc00
   11db8:	movw	r6, #39808	; 0x9b80
   11dbc:	mov	r5, #0
   11dc0:	str	r1, [sp, #136]	; 0x88
   11dc4:	str	r0, [sp, #84]	; 0x54
   11dc8:	movt	r6, #2
   11dcc:	ldr	r4, [r6, r5, lsl #2]
   11dd0:	mov	r0, r4
   11dd4:	bl	1372c <__assert_fail@plt+0x1a8c>
   11dd8:	cmp	r0, #0
   11ddc:	bge	11df8 <__assert_fail@plt+0x158>
   11de0:	add	r5, r5, #1
   11de4:	cmp	r5, #1
   11de8:	bls	11dcc <__assert_fail@plt+0x12c>
   11dec:	mvn	r0, #0
   11df0:	str	r0, [sp, #52]	; 0x34
   11df4:	b	11e08 <__assert_fail@plt+0x168>
   11df8:	str	r0, [sp, #52]	; 0x34
   11dfc:	movw	r0, #45600	; 0xb220
   11e00:	movt	r0, #3
   11e04:	str	r4, [r0]
   11e08:	bl	11964 <geteuid@plt>
   11e0c:	mov	r5, r0
   11e10:	bl	1188c <getuid@plt>
   11e14:	mov	r6, r0
   11e18:	bl	11afc <getgid@plt>
   11e1c:	mov	r4, r0
   11e20:	cmp	r5, #0
   11e24:	bne	11e40 <__assert_fail@plt+0x1a0>
   11e28:	sub	r1, fp, #728	; 0x2d8
   11e2c:	mov	r0, #1
   11e30:	str	r4, [fp, #-728]	; 0xfffffd28
   11e34:	bl	1197c <setgroups@plt>
   11e38:	cmp	r0, #0
   11e3c:	bne	13670 <__assert_fail@plt+0x19d0>
   11e40:	bl	11acc <__errno_location@plt>
   11e44:	cmp	r6, r5
   11e48:	str	r0, [sp, #108]	; 0x6c
   11e4c:	cmpne	r6, #0
   11e50:	beq	11e84 <__assert_fail@plt+0x1e4>
   11e54:	ldr	r1, [sp, #108]	; 0x6c
   11e58:	mov	r0, #0
   11e5c:	str	r0, [r1]
   11e60:	bl	1188c <getuid@plt>
   11e64:	bl	11bc8 <setuid@plt>
   11e68:	cmp	r0, #0
   11e6c:	bne	13694 <__assert_fail@plt+0x19f4>
   11e70:	mov	r0, #0
   11e74:	mov	r5, #0
   11e78:	bl	11bc8 <setuid@plt>
   11e7c:	cmp	r0, #0
   11e80:	beq	136b0 <__assert_fail@plt+0x1a10>
   11e84:	ldr	r1, [sp, #108]	; 0x6c
   11e88:	mov	r0, #0
   11e8c:	str	r0, [r1]
   11e90:	mov	r0, r4
   11e94:	bl	11a00 <setgid@plt>
   11e98:	cmp	r0, #0
   11e9c:	bne	135a8 <__assert_fail@plt+0x1908>
   11ea0:	ldr	r0, [sp, #136]	; 0x88
   11ea4:	ldr	r0, [r0]
   11ea8:	cmp	r0, #0
   11eac:	movweq	r0, #38114	; 0x94e2
   11eb0:	movteq	r0, #2
   11eb4:	bl	17274 <__assert_fail@plt+0x55d4>
   11eb8:	movw	r1, #39775	; 0x9b5f
   11ebc:	mov	r0, #6
   11ec0:	movt	r1, #2
   11ec4:	bl	11b98 <setlocale@plt>
   11ec8:	movw	r4, #40337	; 0x9d91
   11ecc:	movw	r1, #36754	; 0x8f92
   11ed0:	movt	r4, #2
   11ed4:	movt	r1, #2
   11ed8:	mov	r0, r4
   11edc:	bl	11c10 <bindtextdomain@plt>
   11ee0:	mov	r0, r4
   11ee4:	bl	1194c <textdomain@plt>
   11ee8:	mov	r0, #0
   11eec:	bl	17330 <__assert_fail@plt+0x5690>
   11ef0:	movw	r1, #45604	; 0xb224
   11ef4:	movt	r1, #3
   11ef8:	str	r0, [r1]
   11efc:	movw	r0, #19492	; 0x4c24
   11f00:	movt	r0, #1
   11f04:	bl	28e84 <__assert_fail@plt+0x171e4>
   11f08:	cmp	r0, #0
   11f0c:	bne	134f8 <__assert_fail@plt+0x1858>
   11f10:	movw	r0, #14196	; 0x3774
   11f14:	movt	r0, #1
   11f18:	bl	28e84 <__assert_fail@plt+0x171e4>
   11f1c:	cmp	r0, #0
   11f20:	bne	134f8 <__assert_fail@plt+0x1858>
   11f24:	movw	r0, #45624	; 0xb238
   11f28:	mov	r7, #1
   11f2c:	vmov.i32	q8, #0	; 0x00000000
   11f30:	movt	r0, #3
   11f34:	strb	r7, [r0]
   11f38:	movw	r0, #45608	; 0xb228
   11f3c:	movt	r0, #3
   11f40:	vst1.64	{d16-d17}, [r0]
   11f44:	movw	r0, #36813	; 0x8fcd
   11f48:	movt	r0, #2
   11f4c:	bl	119f4 <getenv@plt>
   11f50:	str	r0, [sp, #88]	; 0x58
   11f54:	movw	r0, #45628	; 0xb23c
   11f58:	mov	r6, #0
   11f5c:	movw	r9, #36825	; 0x8fd9
   11f60:	movw	r5, #39820	; 0x9b8c
   11f64:	sub	lr, fp, #1024	; 0x400
   11f68:	mvn	r8, #0
   11f6c:	movt	r0, #3
   11f70:	sub	sl, lr, #356	; 0x164
   11f74:	movt	r9, #2
   11f78:	movt	r5, #2
   11f7c:	str	r6, [r0]
   11f80:	mov	r0, #0
   11f84:	str	r0, [sp, #132]	; 0x84
   11f88:	mov	r0, #0
   11f8c:	str	r0, [sp, #100]	; 0x64
   11f90:	mov	r0, #0
   11f94:	str	r0, [sp, #44]	; 0x2c
   11f98:	mov	r0, #0
   11f9c:	str	r0, [sp, #68]	; 0x44
   11fa0:	mov	r0, #0
   11fa4:	str	r0, [sp, #124]	; 0x7c
   11fa8:	mov	r0, #0
   11fac:	str	r0, [sp, #144]	; 0x90
   11fb0:	mov	r0, #0
   11fb4:	str	r0, [sp, #140]	; 0x8c
   11fb8:	mov	r0, #0
   11fbc:	str	r0, [sp, #120]	; 0x78
   11fc0:	mov	r0, #0
   11fc4:	str	r0, [sp, #148]	; 0x94
   11fc8:	b	12034 <__assert_fail@plt+0x394>
   11fcc:	ldr	r0, [sp, #108]	; 0x6c
   11fd0:	sub	r1, fp, #728	; 0x2d8
   11fd4:	mov	r2, #10
   11fd8:	str	r6, [r0]
   11fdc:	mov	r0, r4
   11fe0:	bl	11a90 <strtoul@plt>
   11fe4:	cmp	r0, #0
   11fe8:	beq	12008 <__assert_fail@plt+0x368>
   11fec:	cmn	r0, #1
   11ff0:	bne	12018 <__assert_fail@plt+0x378>
   11ff4:	ldr	r1, [sp, #108]	; 0x6c
   11ff8:	ldr	r1, [r1]
   11ffc:	cmp	r1, #34	; 0x22
   12000:	bne	12018 <__assert_fail@plt+0x378>
   12004:	b	13524 <__assert_fail@plt+0x1884>
   12008:	ldr	r1, [sp, #108]	; 0x6c
   1200c:	ldr	r1, [r1]
   12010:	cmp	r1, #22
   12014:	beq	1352c <__assert_fail@plt+0x188c>
   12018:	ldr	r1, [fp, #-728]	; 0xfffffd28
   1201c:	ldrb	r1, [r1]
   12020:	cmp	r1, #0
   12024:	bne	1356c <__assert_fail@plt+0x18cc>
   12028:	movw	r1, #45480	; 0xb1a8
   1202c:	movt	r1, #3
   12030:	str	r0, [r1]
   12034:	ldr	r4, [sp, #84]	; 0x54
   12038:	b	12150 <__assert_fail@plt+0x4b0>
   1203c:	movw	r0, #45592	; 0xb218
   12040:	movt	r0, #3
   12044:	ldr	r0, [r0]
   12048:	bl	148a8 <__assert_fail@plt+0x2c08>
   1204c:	str	r0, [sp, #140]	; 0x8c
   12050:	b	12150 <__assert_fail@plt+0x4b0>
   12054:	cmp	r0, #65	; 0x41
   12058:	bne	1208c <__assert_fail@plt+0x3ec>
   1205c:	mov	r0, #1
   12060:	str	r0, [sp, #148]	; 0x94
   12064:	b	12150 <__assert_fail@plt+0x4b0>
   12068:	cmp	r0, #80	; 0x50
   1206c:	bne	120a8 <__assert_fail@plt+0x408>
   12070:	movw	r0, #45636	; 0xb244
   12074:	movt	r0, #3
   12078:	strb	r7, [r0]
   1207c:	b	12150 <__assert_fail@plt+0x4b0>
   12080:	mov	r0, #1
   12084:	str	r0, [sp, #100]	; 0x64
   12088:	b	12150 <__assert_fail@plt+0x4b0>
   1208c:	cmp	r0, #69	; 0x45
   12090:	bne	13724 <__assert_fail@plt+0x1a84>
   12094:	movw	r0, #45628	; 0xb23c
   12098:	mov	r1, #2
   1209c:	movt	r0, #3
   120a0:	str	r1, [r0]
   120a4:	b	12150 <__assert_fail@plt+0x4b0>
   120a8:	cmp	r0, #83	; 0x53
   120ac:	bne	13724 <__assert_fail@plt+0x1a84>
   120b0:	mov	r0, #1
   120b4:	str	r0, [sp, #120]	; 0x78
   120b8:	b	12150 <__assert_fail@plt+0x4b0>
   120bc:	mov	r0, #1
   120c0:	str	r0, [sp, #44]	; 0x2c
   120c4:	b	12150 <__assert_fail@plt+0x4b0>
   120c8:	movw	r0, #45592	; 0xb218
   120cc:	movt	r0, #3
   120d0:	ldr	r0, [r0]
   120d4:	cmp	r0, #0
   120d8:	str	r0, [sp, #88]	; 0x58
   120dc:	bne	12150 <__assert_fail@plt+0x4b0>
   120e0:	b	13494 <__assert_fail@plt+0x17f4>
   120e4:	movw	r0, #45628	; 0xb23c
   120e8:	movt	r0, #3
   120ec:	str	r7, [r0]
   120f0:	b	12150 <__assert_fail@plt+0x4b0>
   120f4:	mov	r0, #1
   120f8:	str	r0, [sp, #132]	; 0x84
   120fc:	b	12150 <__assert_fail@plt+0x4b0>
   12100:	movw	r0, #45592	; 0xb218
   12104:	movw	r3, #45608	; 0xb228
   12108:	sub	r1, fp, #728	; 0x2d8
   1210c:	mov	r2, #10
   12110:	str	r6, [sp]
   12114:	movt	r0, #3
   12118:	movt	r3, #3
   1211c:	ldr	r0, [r0]
   12120:	str	r0, [fp, #-728]	; 0xfffffd28
   12124:	bl	19818 <__assert_fail@plt+0x7b78>
   12128:	cmp	r0, #0
   1212c:	bne	134b4 <__assert_fail@plt+0x1814>
   12130:	mov	r0, #1
   12134:	str	r0, [sp, #124]	; 0x7c
   12138:	b	12150 <__assert_fail@plt+0x4b0>
   1213c:	mov	r0, #1
   12140:	str	r0, [sp, #144]	; 0x90
   12144:	b	12150 <__assert_fail@plt+0x4b0>
   12148:	mov	r0, #0
   1214c:	str	r0, [sp, #68]	; 0x44
   12150:	ldr	r1, [sp, #136]	; 0x88
   12154:	mov	r0, r4
   12158:	mov	r2, r9
   1215c:	mov	r3, r5
   12160:	str	r8, [fp, #-1380]	; 0xfffffa9c
   12164:	str	sl, [sp]
   12168:	bl	11a60 <getopt_long@plt>
   1216c:	cmp	r0, #97	; 0x61
   12170:	ble	121ec <__assert_fail@plt+0x54c>
   12174:	sub	r1, r0, #98	; 0x62
   12178:	cmp	r1, #21
   1217c:	bhi	12250 <__assert_fail@plt+0x5b0>
   12180:	add	r0, pc, #0
   12184:	ldr	pc, [r0, r1, lsl #2]
   12188:	andeq	r2, r1, r0, ror #3
   1218c:	strheq	r2, [r1], -ip
   12190:	andeq	r2, r1, r8, asr #1
   12194:	andeq	r2, r1, r4, ror #1
   12198:	andeq	r3, r1, r4, lsr #14
   1219c:	andeq	r3, r1, r4, lsr #14
   121a0:	andeq	r3, r1, ip, lsl #9
   121a4:	strdeq	r2, [r1], -r4
   121a8:	andeq	r3, r1, r4, lsr #14
   121ac:	andeq	r3, r1, r4, lsr #14
   121b0:	andeq	r2, r1, r0, lsl #2
   121b4:	andeq	r2, r1, r0, asr r1
   121b8:	andeq	r3, r1, r4, lsr #14
   121bc:	andeq	r3, r1, r4, lsr #14
   121c0:	andeq	r2, r1, r0, lsl #1
   121c4:	andeq	r3, r1, r4, lsr #14
   121c8:	andeq	r2, r1, ip, lsr r1
   121cc:	andeq	r2, r1, r0, asr r1
   121d0:	andeq	r3, r1, r4, lsr #14
   121d4:	andeq	r3, r1, r4, lsr #14
   121d8:	andeq	r2, r1, ip, asr #5
   121dc:	andeq	r2, r1, r8, asr #2
   121e0:	mov	r0, #1
   121e4:	str	r0, [sp, #68]	; 0x44
   121e8:	b	12150 <__assert_fail@plt+0x4b0>
   121ec:	cmp	r0, #71	; 0x47
   121f0:	bgt	12228 <__assert_fail@plt+0x588>
   121f4:	cmp	r0, #64	; 0x40
   121f8:	bgt	12054 <__assert_fail@plt+0x3b4>
   121fc:	cmn	r0, #1
   12200:	beq	122a0 <__assert_fail@plt+0x600>
   12204:	cmp	r0, #48	; 0x30
   12208:	bne	13724 <__assert_fail@plt+0x1a84>
   1220c:	movw	r0, #45624	; 0xb238
   12210:	movt	r0, #3
   12214:	strb	r6, [r0]
   12218:	movw	r0, #45632	; 0xb240
   1221c:	movt	r0, #3
   12220:	strb	r7, [r0]
   12224:	b	12150 <__assert_fail@plt+0x4b0>
   12228:	cmp	r0, #79	; 0x4f
   1222c:	bgt	12068 <__assert_fail@plt+0x3c8>
   12230:	cmp	r0, #72	; 0x48
   12234:	beq	12070 <__assert_fail@plt+0x3d0>
   12238:	cmp	r0, #76	; 0x4c
   1223c:	bne	13724 <__assert_fail@plt+0x1a84>
   12240:	movw	r0, #45636	; 0xb244
   12244:	movt	r0, #3
   12248:	strb	r6, [r0]
   1224c:	b	12150 <__assert_fail@plt+0x4b0>
   12250:	cmp	r0, #256	; 0x100
   12254:	beq	1203c <__assert_fail@plt+0x39c>
   12258:	movw	r1, #257	; 0x101
   1225c:	cmp	r0, r1
   12260:	bne	13724 <__assert_fail@plt+0x1a84>
   12264:	movw	r0, #45592	; 0xb218
   12268:	movt	r0, #3
   1226c:	ldr	r4, [r0]
   12270:	ldrb	r0, [r4]
   12274:	cmp	r0, #0
   12278:	bne	11fcc <__assert_fail@plt+0x32c>
   1227c:	movw	r1, #37701	; 0x9345
   12280:	mov	r0, #0
   12284:	mov	r2, #5
   12288:	movt	r1, #2
   1228c:	bl	11934 <dcgettext@plt>
   12290:	mov	r2, r0
   12294:	mov	r0, #1
   12298:	mov	r1, #0
   1229c:	bl	119d0 <error@plt>
   122a0:	ldr	r0, [sp, #52]	; 0x34
   122a4:	cmp	r0, #0
   122a8:	blt	122dc <__assert_fail@plt+0x63c>
   122ac:	ldr	sl, [sp, #88]	; 0x58
   122b0:	ldr	r5, [sp, #120]	; 0x78
   122b4:	cmp	sl, #0
   122b8:	beq	122e4 <__assert_fail@plt+0x644>
   122bc:	bl	11c7c <close@plt>
   122c0:	mvn	r0, #0
   122c4:	str	r0, [sp, #52]	; 0x34
   122c8:	b	122e4 <__assert_fail@plt+0x644>
   122cc:	movw	r0, #38114	; 0x94e2
   122d0:	movt	r0, #2
   122d4:	bl	1443c <__assert_fail@plt+0x279c>
   122d8:	b	13438 <__assert_fail@plt+0x1798>
   122dc:	ldr	r5, [sp, #120]	; 0x78
   122e0:	ldr	sl, [sp, #88]	; 0x58
   122e4:	ldr	r0, [sp, #44]	; 0x2c
   122e8:	orrs	r0, r5, r0
   122ec:	ldr	r0, [sp, #100]	; 0x64
   122f0:	movweq	r0, #1
   122f4:	cmp	r5, #0
   122f8:	str	r0, [sp, #100]	; 0x64
   122fc:	movw	r0, #45576	; 0xb208
   12300:	movt	r0, #3
   12304:	beq	12320 <__assert_fail@plt+0x680>
   12308:	ldr	r0, [r0]
   1230c:	ldr	r1, [sp, #124]	; 0x7c
   12310:	subs	r0, r0, r4
   12314:	moveq	r1, r0
   12318:	str	r1, [sp, #124]	; 0x7c
   1231c:	b	12334 <__assert_fail@plt+0x694>
   12320:	ldr	r0, [r0]
   12324:	cmp	r0, r4
   12328:	ldreq	r0, [sp, #44]	; 0x2c
   1232c:	cmpeq	r0, #0
   12330:	beq	13700 <__assert_fail@plt+0x1a60>
   12334:	mov	r0, #1
   12338:	bl	11c34 <isatty@plt>
   1233c:	sub	r0, r0, #1
   12340:	movw	r1, #45637	; 0xb245
   12344:	cmp	sl, #0
   12348:	clz	r0, r0
   1234c:	movt	r1, #3
   12350:	lsr	r0, r0, #5
   12354:	strb	r0, [r1]
   12358:	beq	1237c <__assert_fail@plt+0x6dc>
   1235c:	movw	r1, #43200	; 0xa8c0
   12360:	add	r0, sp, #264	; 0x108
   12364:	add	r3, sp, #268	; 0x10c
   12368:	mov	r2, #1
   1236c:	str	r0, [sp]
   12370:	movt	r1, #2
   12374:	mov	r0, sl
   12378:	bl	14a8c <__assert_fail@plt+0x2dec>
   1237c:	ldr	r2, [sp, #148]	; 0x94
   12380:	movw	r0, #16848	; 0x41d0
   12384:	movw	r1, #16680	; 0x4128
   12388:	vldr	d9, [pc, #872]	; 126f8 <__assert_fail@plt+0xa58>
   1238c:	vldr	d12, [pc, #876]	; 12700 <__assert_fail@plt+0xa60>
   12390:	movw	r7, #45640	; 0xb248
   12394:	mov	r6, #0
   12398:	vmov.i32	q5, #0	; 0x00000000
   1239c:	mov	r8, #0
   123a0:	str	r5, [sp, #120]	; 0x78
   123a4:	movt	r0, #1
   123a8:	movt	r1, #1
   123ac:	movt	r7, #3
   123b0:	cmp	r2, #0
   123b4:	movw	r2, #15920	; 0x3e30
   123b8:	moveq	r1, r0
   123bc:	movw	r0, #15884	; 0x3e0c
   123c0:	movt	r2, #1
   123c4:	str	r1, [sp, #40]	; 0x28
   123c8:	ldr	r1, [sp, #132]	; 0x84
   123cc:	movt	r0, #1
   123d0:	cmp	r1, #0
   123d4:	movne	r2, r0
   123d8:	movw	r0, #15700	; 0x3d54
   123dc:	str	r2, [sp, #116]	; 0x74
   123e0:	movw	r2, #15792	; 0x3db0
   123e4:	movt	r0, #1
   123e8:	movt	r2, #1
   123ec:	movne	r2, r0
   123f0:	ldr	r0, [sp, #140]	; 0x8c
   123f4:	cmp	r1, #0
   123f8:	str	r2, [sp, #112]	; 0x70
   123fc:	orrne	r0, r0, #4194304	; 0x400000
   12400:	str	r0, [sp, #140]	; 0x8c
   12404:	ldr	r0, [sp, #100]	; 0x64
   12408:	orr	r0, r0, r5
   1240c:	str	r0, [sp, #20]
   12410:	add	r0, sp, #272	; 0x110
   12414:	add	r0, r0, #16
   12418:	str	r0, [sp, #28]
   1241c:	add	r0, sp, #160	; 0xa0
   12420:	add	r1, r0, #80	; 0x50
   12424:	add	r0, r0, #48	; 0x30
   12428:	str	r0, [sp, #32]
   1242c:	mov	r0, #0
   12430:	str	r1, [sp, #36]	; 0x24
   12434:	str	r0, [sp, #24]
   12438:	ldr	r0, [sp, #124]	; 0x7c
   1243c:	cmp	r0, #0
   12440:	beq	12464 <__assert_fail@plt+0x7c4>
   12444:	movw	r0, #45608	; 0xb228
   12448:	movt	r0, #3
   1244c:	mov	r3, r0
   12450:	ldr	r0, [r0]
   12454:	ldmib	r3, {r1, r2, r3}
   12458:	subs	r0, r2, r0
   1245c:	sbcs	r0, r3, r1
   12460:	bcs	13398 <__assert_fail@plt+0x16f8>
   12464:	add	r0, r7, #16
   12468:	mov	r1, #32
   1246c:	cmp	sl, #0
   12470:	vst1.64	{d10-d11}, [r0]
   12474:	mov	r0, r7
   12478:	vst1.64	{d10-d11}, [r0], r1
   1247c:	vst1.64	{d10-d11}, [r0]
   12480:	beq	124fc <__assert_fail@plt+0x85c>
   12484:	ldr	r1, [sp, #264]	; 0x108
   12488:	movw	r7, #45688	; 0xb278
   1248c:	mov	r5, #0
   12490:	movt	r7, #3
   12494:	cmp	r1, #0
   12498:	beq	12538 <__assert_fail@plt+0x898>
   1249c:	movw	r9, #45692	; 0xb27c
   124a0:	cmp	r1, #1
   124a4:	movt	r9, #3
   124a8:	bne	1254c <__assert_fail@plt+0x8ac>
   124ac:	ldr	r2, [sp, #268]	; 0x10c
   124b0:	mov	r0, sl
   124b4:	movw	r8, #36572	; 0x8edc
   124b8:	movt	r8, #2
   124bc:	ldrb	r2, [r0, r2]!
   124c0:	cmp	r2, #46	; 0x2e
   124c4:	beq	12560 <__assert_fail@plt+0x8c0>
   124c8:	cmp	r2, #45	; 0x2d
   124cc:	bne	12554 <__assert_fail@plt+0x8b4>
   124d0:	ldr	r0, [sp, #24]
   124d4:	tst	r0, #1
   124d8:	bne	1344c <__assert_fail@plt+0x17ac>
   124dc:	mov	r0, #0
   124e0:	movw	r8, #36991	; 0x907f
   124e4:	mov	r4, #0
   124e8:	str	r0, [sp, #96]	; 0x60
   124ec:	mov	r0, #1
   124f0:	movt	r8, #2
   124f4:	str	r0, [sp, #24]
   124f8:	b	12578 <__assert_fail@plt+0x8d8>
   124fc:	ldr	r4, [sp, #52]	; 0x34
   12500:	movw	r7, #45688	; 0xb278
   12504:	movt	r7, #3
   12508:	cmn	r4, #1
   1250c:	beq	13398 <__assert_fail@plt+0x16f8>
   12510:	movw	r0, #45600	; 0xb220
   12514:	movw	r9, #45692	; 0xb27c
   12518:	movt	r0, #3
   1251c:	movt	r9, #3
   12520:	ldr	r8, [r0]
   12524:	mov	r0, #0
   12528:	str	r0, [sp, #96]	; 0x60
   1252c:	mvn	r0, #0
   12530:	str	r0, [sp, #52]	; 0x34
   12534:	b	12578 <__assert_fail@plt+0x8d8>
   12538:	movw	r8, #36572	; 0x8edc
   1253c:	movw	r9, #45692	; 0xb27c
   12540:	movt	r8, #2
   12544:	movt	r9, #3
   12548:	b	12560 <__assert_fail@plt+0x8c0>
   1254c:	ldr	r0, [sp, #268]	; 0x10c
   12550:	add	r0, sl, r0
   12554:	bl	118c8 <strndup@plt>
   12558:	mov	r8, r0
   1255c:	mov	r5, r0
   12560:	mov	r0, r8
   12564:	str	r5, [sp, #96]	; 0x60
   12568:	bl	1372c <__assert_fail@plt+0x1a8c>
   1256c:	cmn	r0, #1
   12570:	ble	133f8 <__assert_fail@plt+0x1758>
   12574:	mov	r4, r0
   12578:	mov	r0, r4
   1257c:	add	r1, sp, #160	; 0xa0
   12580:	bl	28eac <__assert_fail@plt+0x1720c>
   12584:	cmp	r0, #0
   12588:	str	r8, [sp, #48]	; 0x30
   1258c:	beq	125dc <__assert_fail@plt+0x93c>
   12590:	ldr	r0, [sp, #108]	; 0x6c
   12594:	mov	r1, #8
   12598:	mov	r2, r8
   1259c:	ldr	r5, [r0]
   125a0:	mov	r0, #0
   125a4:	str	r0, [sp, #104]	; 0x68
   125a8:	mov	r0, #0
   125ac:	bl	18898 <__assert_fail@plt+0x6bf8>
   125b0:	movw	r2, #43212	; 0xa8cc
   125b4:	mov	r3, r0
   125b8:	mov	r0, #0
   125bc:	mov	r1, r5
   125c0:	movt	r2, #2
   125c4:	bl	119d0 <error@plt>
   125c8:	mov	r0, #0
   125cc:	str	r0, [sp, #92]	; 0x5c
   125d0:	mov	r0, #0
   125d4:	str	r0, [sp, #64]	; 0x40
   125d8:	b	12740 <__assert_fail@plt+0xaa0>
   125dc:	ldr	r0, [sp, #32]
   125e0:	ldrd	r0, [r0]
   125e4:	str	r0, [sp, #92]	; 0x5c
   125e8:	ldr	r0, [sp, #36]	; 0x24
   125ec:	str	r1, [sp, #64]	; 0x40
   125f0:	ldr	r6, [r0]
   125f4:	ldr	r1, [r0, #4]
   125f8:	sub	r0, fp, #728	; 0x2d8
   125fc:	str	r1, [sp, #156]	; 0x9c
   12600:	str	r6, [sp, #152]	; 0x98
   12604:	bl	1191c <time@plt>
   12608:	cmn	r0, #1
   1260c:	beq	12708 <__assert_fail@plt+0xa68>
   12610:	ldr	r0, [fp, #-728]	; 0xfffffd28
   12614:	mov	r1, r6
   12618:	bl	11b44 <difftime@plt>
   1261c:	movw	r0, #45480	; 0xb1a8
   12620:	movw	r1, #20864	; 0x5180
   12624:	vmov.f64	d8, d0
   12628:	movt	r0, #3
   1262c:	movt	r1, #1
   12630:	ldr	r0, [r0]
   12634:	mul	r0, r0, r1
   12638:	vmov	s0, r0
   1263c:	vcvt.f64.u32	d16, s0
   12640:	vcmpe.f64	d8, d16
   12644:	vmrs	APSR_nzcv, fpscr
   12648:	ble	12734 <__assert_fail@plt+0xa94>
   1264c:	movw	r1, #37023	; 0x909f
   12650:	mov	r0, #0
   12654:	mov	r2, #5
   12658:	movt	r1, #2
   1265c:	bl	11934 <dcgettext@plt>
   12660:	mov	r9, r0
   12664:	mov	r0, #0
   12668:	mov	r1, #8
   1266c:	mov	r2, r8
   12670:	bl	18898 <__assert_fail@plt+0x6bf8>
   12674:	mov	r8, sl
   12678:	mov	sl, r0
   1267c:	movw	r0, #45480	; 0xb1a8
   12680:	movw	r7, #40188	; 0x9cfc
   12684:	mov	r2, #5
   12688:	movt	r0, #3
   1268c:	movt	r7, #2
   12690:	ldr	r6, [r0]
   12694:	mov	r0, #0
   12698:	mov	r1, r7
   1269c:	bl	11934 <dcgettext@plt>
   126a0:	mov	r5, r0
   126a4:	mov	r1, r7
   126a8:	movw	r7, #45688	; 0xb278
   126ac:	mov	r0, #0
   126b0:	mov	r2, #5
   126b4:	movt	r7, #3
   126b8:	bl	11934 <dcgettext@plt>
   126bc:	mov	r3, sl
   126c0:	mov	sl, r8
   126c4:	ldr	r8, [sp, #48]	; 0x30
   126c8:	vdiv.f64	d16, d8, d9
   126cc:	str	r0, [sp, #16]
   126d0:	mov	r2, r9
   126d4:	movw	r9, #45692	; 0xb27c
   126d8:	mov	r0, #0
   126dc:	mov	r1, #0
   126e0:	str	r6, [sp]
   126e4:	str	r5, [sp, #4]
   126e8:	vstr	d16, [sp, #8]
   126ec:	movt	r9, #3
   126f0:	bl	119d0 <error@plt>
   126f4:	b	12734 <__assert_fail@plt+0xa94>
   126f8:	andeq	r0, r0, r0
   126fc:	rscsmi	r1, r5, r0, lsl #16
   12700:	andeq	r0, r0, r0
   12704:	subsmi	r0, r9, r0
   12708:	ldr	r0, [sp, #108]	; 0x6c
   1270c:	movw	r1, #36999	; 0x9087
   12710:	mov	r2, #5
   12714:	movt	r1, #2
   12718:	ldr	r5, [r0]
   1271c:	mov	r0, #0
   12720:	bl	11934 <dcgettext@plt>
   12724:	mov	r2, r0
   12728:	mov	r0, #0
   1272c:	mov	r1, r5
   12730:	bl	119d0 <error@plt>
   12734:	mov	r0, #1
   12738:	mov	r6, #0
   1273c:	str	r0, [sp, #104]	; 0x68
   12740:	movw	r1, #40317	; 0x9d7d
   12744:	mov	r0, r4
   12748:	movt	r1, #2
   1274c:	bl	11808 <fdopen@plt>
   12750:	cmp	r0, #0
   12754:	beq	133f8 <__assert_fail@plt+0x1758>
   12758:	mov	r4, r0
   1275c:	movw	r0, #45576	; 0xb208
   12760:	mov	r1, r8
   12764:	str	r6, [sp, #304]	; 0x130
   12768:	str	r6, [sp, #276]	; 0x114
   1276c:	str	r6, [sp, #280]	; 0x118
   12770:	str	r6, [r7]
   12774:	str	r6, [r9]
   12778:	movt	r0, #3
   1277c:	str	r1, [sp, #300]	; 0x12c
   12780:	str	r4, [sp, #296]	; 0x128
   12784:	ldr	r8, [r0]
   12788:	movw	r0, #45696	; 0xb280
   1278c:	movt	r0, #3
   12790:	str	r6, [r0]
   12794:	movw	r0, #45700	; 0xb284
   12798:	movt	r0, #3
   1279c:	strb	r6, [r0]
   127a0:	mov	r0, #128	; 0x80
   127a4:	str	r0, [sp, #288]	; 0x120
   127a8:	movw	r0, #45628	; 0xb23c
   127ac:	movt	r0, #3
   127b0:	ldr	r6, [r0]
   127b4:	mov	r0, #128	; 0x80
   127b8:	bl	192c0 <__assert_fail@plt+0x7620>
   127bc:	mov	r1, #1
   127c0:	mov	r2, #2
   127c4:	mov	r3, r4
   127c8:	mov	r5, r0
   127cc:	str	r0, [sp, #284]	; 0x11c
   127d0:	str	r4, [sp, #128]	; 0x80
   127d4:	bl	119ac <fread@plt>
   127d8:	mov	r4, r0
   127dc:	ldr	r0, [sp, #104]	; 0x68
   127e0:	cmp	r0, #0
   127e4:	mov	r1, r0
   127e8:	add	r0, sp, #152	; 0x98
   127ec:	movne	r1, r0
   127f0:	cmp	r4, #3
   127f4:	str	r1, [sp, #72]	; 0x48
   127f8:	bcs	134d8 <__assert_fail@plt+0x1838>
   127fc:	cmp	r4, #2
   12800:	ldrbeq	r0, [r5, #1]
   12804:	cmpeq	r0, #0
   12808:	beq	12d90 <__assert_fail@plt+0x10f0>
   1280c:	ldr	r3, [sp, #128]	; 0x80
   12810:	add	r0, r5, r4
   12814:	rsb	r2, r4, #10
   12818:	mov	r1, #1
   1281c:	bl	119ac <fread@plt>
   12820:	add	r5, r0, r4
   12824:	ldr	r4, [sp, #284]	; 0x11c
   12828:	cmp	r5, #10
   1282c:	bcc	1284c <__assert_fail@plt+0xbac>
   12830:	movw	r1, #40193	; 0x9d01
   12834:	mov	r0, r4
   12838:	mov	r2, #10
   1283c:	movt	r1, #2
   12840:	bl	11928 <memcmp@plt>
   12844:	cmp	r0, #0
   12848:	beq	12bac <__assert_fail@plt+0xf0c>
   1284c:	ldr	r0, [sp, #288]	; 0x120
   12850:	cmp	r0, #255	; 0xff
   12854:	bhi	12878 <__assert_fail@plt+0xbd8>
   12858:	ldr	r1, [sp, #28]
   1285c:	mov	r0, #256	; 0x100
   12860:	mov	r2, #1
   12864:	str	r0, [sp, #288]	; 0x120
   12868:	mov	r0, r4
   1286c:	bl	193cc <__assert_fail@plt+0x772c>
   12870:	mov	r4, r0
   12874:	str	r0, [sp, #284]	; 0x11c
   12878:	cmp	r5, #255	; 0xff
   1287c:	add	r7, sp, #272	; 0x110
   12880:	bgt	128a8 <__assert_fail@plt+0xc08>
   12884:	ldr	r3, [sp, #296]	; 0x128
   12888:	add	r0, r4, r5
   1288c:	rsb	r2, r5, #256	; 0x100
   12890:	mov	r1, #1
   12894:	bl	119ac <fread@plt>
   12898:	add	r0, r0, r5
   1289c:	cmp	r0, #256	; 0x100
   128a0:	bne	135b4 <__assert_fail@plt+0x1914>
   128a4:	ldr	r4, [sp, #284]	; 0x11c
   128a8:	mov	r1, #0
   128ac:	add	r0, r4, #1
   128b0:	str	r1, [sp, #80]	; 0x50
   128b4:	mov	r1, #0
   128b8:	ldrb	r3, [r0, #-1]
   128bc:	add	r2, r7, r1
   128c0:	add	r1, r1, #1
   128c4:	cmp	r1, #128	; 0x80
   128c8:	strb	r3, [r2, #36]	; 0x24
   128cc:	ldrb	r3, [r0]
   128d0:	add	r0, r0, #2
   128d4:	strb	r3, [r2, #164]	; 0xa4
   128d8:	bne	128b8 <__assert_fail@plt+0xc18>
   128dc:	mov	r0, #1
   128e0:	movw	r4, #15048	; 0x3ac8
   128e4:	movw	r7, #45688	; 0xb278
   128e8:	str	r6, [sp, #76]	; 0x4c
   128ec:	mov	r6, #0
   128f0:	str	r0, [sp, #60]	; 0x3c
   128f4:	movw	r0, #38189	; 0x952d
   128f8:	movt	r4, #1
   128fc:	movt	r7, #3
   12900:	movt	r0, #2
   12904:	str	r0, [sp, #56]	; 0x38
   12908:	ldr	r0, [sp, #84]	; 0x54
   1290c:	sub	r0, r0, r8
   12910:	str	r0, [sp, #148]	; 0x94
   12914:	mov	r0, #12
   12918:	bl	192c0 <__assert_fail@plt+0x7620>
   1291c:	stm	r0, {r4, r6}
   12920:	mov	sl, r0
   12924:	str	r6, [r0, #8]
   12928:	mov	r1, r7
   1292c:	ldr	r0, [r9]
   12930:	cmp	r0, #0
   12934:	addne	r1, r0, #8
   12938:	ldr	r0, [sp, #68]	; 0x44
   1293c:	str	sl, [r1]
   12940:	str	sl, [r9]
   12944:	cmp	r0, #0
   12948:	beq	12980 <__assert_fail@plt+0xce0>
   1294c:	mov	r0, #12
   12950:	bl	192c0 <__assert_fail@plt+0x7620>
   12954:	mov	sl, r0
   12958:	movw	r0, #15488	; 0x3c80
   1295c:	mov	r1, r7
   12960:	movt	r0, #1
   12964:	stm	sl, {r0, r6}
   12968:	str	r6, [sl, #8]
   1296c:	ldr	r0, [r9]
   12970:	cmp	r0, #0
   12974:	addne	r1, r0, #8
   12978:	str	sl, [r1]
   1297c:	str	sl, [r9]
   12980:	ldr	r0, [sp, #148]	; 0x94
   12984:	cmp	r0, #1
   12988:	blt	12af8 <__assert_fail@plt+0xe58>
   1298c:	ldr	r0, [sp, #136]	; 0x88
   12990:	add	r9, r0, r8, lsl #2
   12994:	mov	r8, #0
   12998:	movw	r1, #45700	; 0xb284
   1299c:	mov	r0, #1
   129a0:	movt	r1, #3
   129a4:	strb	r0, [r1]
   129a8:	ldr	r0, [sp, #144]	; 0x90
   129ac:	ldr	r4, [r9, r8, lsl #2]
   129b0:	cmp	r0, #0
   129b4:	beq	12a4c <__assert_fail@plt+0xdac>
   129b8:	mov	r0, #32
   129bc:	bl	192c0 <__assert_fail@plt+0x7620>
   129c0:	ldr	r6, [sp, #140]	; 0x8c
   129c4:	mov	r5, r0
   129c8:	add	r0, r0, #16
   129cc:	vst1.32	{d10-d11}, [r0]
   129d0:	mov	r7, r5
   129d4:	mov	r0, #20
   129d8:	vst1.32	{d10-d11}, [r7], r0
   129dc:	mov	r0, r6
   129e0:	bl	1b008 <__assert_fail@plt+0x9368>
   129e4:	mov	r0, #100	; 0x64
   129e8:	str	r0, [r5, #4]
   129ec:	mov	r0, #100	; 0x64
   129f0:	bl	192c0 <__assert_fail@plt+0x7620>
   129f4:	str	r0, [r5]
   129f8:	str	r6, [r5, #12]
   129fc:	mov	r6, #0
   12a00:	mov	r0, r4
   12a04:	str	r6, [r5, #16]
   12a08:	str	r6, [r7]
   12a0c:	bl	11a9c <strlen@plt>
   12a10:	mov	r1, r0
   12a14:	mov	r0, r4
   12a18:	mov	r2, r5
   12a1c:	bl	1a340 <__assert_fail@plt+0x86a0>
   12a20:	cmp	r0, #0
   12a24:	bne	13474 <__assert_fail@plt+0x17d4>
   12a28:	mov	r0, #12
   12a2c:	bl	192c0 <__assert_fail@plt+0x7620>
   12a30:	mov	sl, r0
   12a34:	movw	r0, #15520	; 0x3ca0
   12a38:	movw	r7, #45688	; 0xb278
   12a3c:	movt	r0, #1
   12a40:	movt	r7, #3
   12a44:	str	r0, [sl]
   12a48:	b	12ac0 <__assert_fail@plt+0xe20>
   12a4c:	movw	r1, #38974	; 0x983e
   12a50:	mov	r0, r4
   12a54:	movt	r1, #2
   12a58:	bl	11c04 <strpbrk@plt>
   12a5c:	cmp	r0, #0
   12a60:	beq	12a88 <__assert_fail@plt+0xde8>
   12a64:	mov	r0, #12
   12a68:	bl	192c0 <__assert_fail@plt+0x7620>
   12a6c:	mov	sl, r0
   12a70:	ldr	r0, [sp, #132]	; 0x84
   12a74:	cmp	r0, #0
   12a78:	beq	12ab0 <__assert_fail@plt+0xe10>
   12a7c:	movw	r0, #15604	; 0x3cf4
   12a80:	movt	r0, #1
   12a84:	b	12ab8 <__assert_fail@plt+0xe18>
   12a88:	bl	119a0 <__ctype_get_mb_cur_max@plt>
   12a8c:	cmp	r0, #1
   12a90:	ldr	r5, [sp, #116]	; 0x74
   12a94:	ldr	r0, [sp, #112]	; 0x70
   12a98:	moveq	r5, r0
   12a9c:	mov	r0, #12
   12aa0:	bl	192c0 <__assert_fail@plt+0x7620>
   12aa4:	mov	sl, r0
   12aa8:	str	r5, [r0]
   12aac:	b	12abc <__assert_fail@plt+0xe1c>
   12ab0:	movw	r0, #15652	; 0x3d24
   12ab4:	movt	r0, #1
   12ab8:	str	r0, [sl]
   12abc:	mov	r5, r4
   12ac0:	movw	r0, #45692	; 0xb27c
   12ac4:	stmib	sl, {r5, r6}
   12ac8:	mov	r1, r7
   12acc:	add	r8, r8, #1
   12ad0:	movt	r0, #3
   12ad4:	mov	r2, r0
   12ad8:	ldr	r0, [r0]
   12adc:	cmp	r0, #0
   12ae0:	addne	r1, r0, #8
   12ae4:	ldr	r0, [sp, #148]	; 0x94
   12ae8:	str	sl, [r1]
   12aec:	str	sl, [r2]
   12af0:	cmp	r8, r0
   12af4:	blt	12998 <__assert_fail@plt+0xcf8>
   12af8:	ldr	r0, [sp, #76]	; 0x4c
   12afc:	cmp	r0, #2
   12b00:	beq	12b5c <__assert_fail@plt+0xebc>
   12b04:	movw	r5, #45692	; 0xb27c
   12b08:	ldr	r9, [sp, #120]	; 0x78
   12b0c:	cmp	r0, #1
   12b10:	movt	r5, #3
   12b14:	mov	r4, r5
   12b18:	movw	r5, #45704	; 0xb288
   12b1c:	movt	r5, #3
   12b20:	bne	12c14 <__assert_fail@plt+0xf74>
   12b24:	movw	r1, #45700	; 0xb284
   12b28:	mov	r0, #1
   12b2c:	movt	r1, #3
   12b30:	strb	r0, [r1]
   12b34:	movw	r0, #45636	; 0xb244
   12b38:	movt	r0, #3
   12b3c:	ldrb	r8, [r0]
   12b40:	mov	r0, #12
   12b44:	bl	192c0 <__assert_fail@plt+0x7620>
   12b48:	cmp	r8, #0
   12b4c:	beq	12bdc <__assert_fail@plt+0xf3c>
   12b50:	movw	r1, #16004	; 0x3e84
   12b54:	movt	r1, #1
   12b58:	b	12bf0 <__assert_fail@plt+0xf50>
   12b5c:	movw	r1, #45700	; 0xb284
   12b60:	mov	r0, #1
   12b64:	movt	r1, #3
   12b68:	strb	r0, [r1]
   12b6c:	movw	r0, #45636	; 0xb244
   12b70:	movt	r0, #3
   12b74:	ldrb	r4, [r0]
   12b78:	mov	r0, #12
   12b7c:	bl	192c0 <__assert_fail@plt+0x7620>
   12b80:	movw	r5, #45692	; 0xb27c
   12b84:	ldr	r9, [sp, #120]	; 0x78
   12b88:	cmp	r4, #0
   12b8c:	movt	r5, #3
   12b90:	mov	r4, r5
   12b94:	movw	r5, #45704	; 0xb288
   12b98:	movt	r5, #3
   12b9c:	beq	12be8 <__assert_fail@plt+0xf48>
   12ba0:	movw	r1, #16100	; 0x3ee4
   12ba4:	movt	r1, #1
   12ba8:	b	12bf0 <__assert_fail@plt+0xf50>
   12bac:	mov	r0, #0
   12bb0:	movw	r4, #14372	; 0x3824
   12bb4:	str	r6, [sp, #76]	; 0x4c
   12bb8:	mov	r6, #0
   12bbc:	str	r0, [sp, #80]	; 0x50
   12bc0:	movw	r0, #38121	; 0x94e9
   12bc4:	movt	r4, #1
   12bc8:	movt	r0, #2
   12bcc:	str	r0, [sp, #56]	; 0x38
   12bd0:	mov	r0, #0
   12bd4:	str	r0, [sp, #60]	; 0x3c
   12bd8:	b	12908 <__assert_fail@plt+0xc68>
   12bdc:	movw	r1, #15956	; 0x3e54
   12be0:	movt	r1, #1
   12be4:	b	12bf0 <__assert_fail@plt+0xf50>
   12be8:	movw	r1, #16052	; 0x3eb4
   12bec:	movt	r1, #1
   12bf0:	str	r1, [r0]
   12bf4:	ldr	r1, [r4]
   12bf8:	mov	r2, r7
   12bfc:	str	r6, [r0, #4]
   12c00:	str	r6, [r0, #8]
   12c04:	cmp	r1, #0
   12c08:	addne	r2, r1, #8
   12c0c:	str	r0, [r2]
   12c10:	str	r0, [r4]
   12c14:	cmp	r9, #0
   12c18:	beq	12c54 <__assert_fail@plt+0xfb4>
   12c1c:	mov	r0, #12
   12c20:	bl	192c0 <__assert_fail@plt+0x7620>
   12c24:	movw	r1, #16148	; 0x3f14
   12c28:	mov	r2, r7
   12c2c:	movt	r1, #1
   12c30:	str	r1, [r0]
   12c34:	movw	r1, #45640	; 0xb248
   12c38:	movt	r1, #3
   12c3c:	stmib	r0, {r1, r6}
   12c40:	ldr	r1, [r4]
   12c44:	cmp	r1, #0
   12c48:	addne	r2, r1, #8
   12c4c:	str	r0, [r2]
   12c50:	str	r0, [r4]
   12c54:	ldr	r0, [sp, #100]	; 0x64
   12c58:	cmp	r0, #0
   12c5c:	beq	12cac <__assert_fail@plt+0x100c>
   12c60:	movw	r0, #45624	; 0xb238
   12c64:	movt	r0, #3
   12c68:	ldrb	r9, [r0]
   12c6c:	mov	r0, #12
   12c70:	bl	192c0 <__assert_fail@plt+0x7620>
   12c74:	movw	r1, #16528	; 0x4090
   12c78:	movw	r2, #16416	; 0x4020
   12c7c:	cmp	r9, #0
   12c80:	movt	r1, #1
   12c84:	movt	r2, #1
   12c88:	movne	r1, r2
   12c8c:	mov	r2, r7
   12c90:	stm	r0, {r1, r6}
   12c94:	str	r6, [r0, #8]
   12c98:	ldr	r1, [r4]
   12c9c:	cmp	r1, #0
   12ca0:	addne	r2, r1, #8
   12ca4:	str	r0, [r2]
   12ca8:	str	r0, [r4]
   12cac:	mov	r0, #12
   12cb0:	bl	192c0 <__assert_fail@plt+0x7620>
   12cb4:	ldr	r1, [sp, #124]	; 0x7c
   12cb8:	cmp	r1, #0
   12cbc:	beq	12ccc <__assert_fail@plt+0x102c>
   12cc0:	movw	r1, #16592	; 0x40d0
   12cc4:	movt	r1, #1
   12cc8:	b	12cd4 <__assert_fail@plt+0x1034>
   12ccc:	movw	r1, #16648	; 0x4108
   12cd0:	movt	r1, #1
   12cd4:	ldr	r2, [r4]
   12cd8:	str	r1, [r0]
   12cdc:	movw	r1, #45608	; 0xb228
   12ce0:	ldr	r9, [sp, #92]	; 0x5c
   12ce4:	movt	r1, #3
   12ce8:	str	r1, [r0, #4]
   12cec:	mov	r1, r7
   12cf0:	str	r6, [r0, #8]
   12cf4:	ldr	r7, [sp, #120]	; 0x78
   12cf8:	cmp	r2, #0
   12cfc:	addne	r1, r2, #8
   12d00:	str	r0, [r1]
   12d04:	str	r0, [r4]
   12d08:	ldr	r0, [sp, #148]	; 0x94
   12d0c:	cmp	r0, #2
   12d10:	movw	r0, #17020	; 0x427c
   12d14:	movt	r0, #1
   12d18:	blt	12d30 <__assert_fail@plt+0x1090>
   12d1c:	ldr	r0, [sl, #8]
   12d20:	movw	r1, #45696	; 0xb280
   12d24:	movt	r1, #3
   12d28:	str	r0, [r1]
   12d2c:	ldr	r0, [sp, #40]	; 0x28
   12d30:	cmp	r7, #0
   12d34:	str	r0, [r5]
   12d38:	beq	12d5c <__assert_fail@plt+0x10bc>
   12d3c:	movw	r1, #38193	; 0x9531
   12d40:	mov	r0, #0
   12d44:	mov	r2, #5
   12d48:	movt	r1, #2
   12d4c:	bl	11934 <dcgettext@plt>
   12d50:	ldr	r1, [sp, #300]	; 0x12c
   12d54:	ldr	r2, [sp, #56]	; 0x38
   12d58:	bl	1185c <printf@plt>
   12d5c:	ldr	r0, [sp, #296]	; 0x128
   12d60:	bl	11c70 <getc@plt>
   12d64:	ldr	r1, [sp, #80]	; 0x50
   12d68:	ldr	sl, [sp, #88]	; 0x58
   12d6c:	add	r4, sp, #272	; 0x110
   12d70:	str	r0, [sp, #272]	; 0x110
   12d74:	cmp	r1, #0
   12d78:	cmnne	r0, #1
   12d7c:	beq	12f48 <__assert_fail@plt+0x12a8>
   12d80:	ldr	r1, [sp, #296]	; 0x128
   12d84:	bl	11ac0 <ungetc@plt>
   12d88:	str	r6, [sp, #272]	; 0x110
   12d8c:	b	12f50 <__assert_fail@plt+0x12b0>
   12d90:	bl	11a6c <__ctype_b_loc@plt>
   12d94:	ldrb	r1, [r5]
   12d98:	ldr	r0, [r0]
   12d9c:	add	r0, r0, r1, lsl #1
   12da0:	ldrb	r0, [r0, #1]
   12da4:	tst	r0, #8
   12da8:	beq	1280c <__assert_fail@plt+0xb6c>
   12dac:	sub	r4, r1, #48	; 0x30
   12db0:	cmp	r1, #50	; 0x32
   12db4:	bcc	12e4c <__assert_fail@plt+0x11ac>
   12db8:	movw	r1, #38476	; 0x964c
   12dbc:	mov	r0, #0
   12dc0:	mov	r2, #5
   12dc4:	mov	r8, #0
   12dc8:	movt	r1, #2
   12dcc:	bl	11934 <dcgettext@plt>
   12dd0:	ldr	r7, [sp, #48]	; 0x30
   12dd4:	mov	r6, r0
   12dd8:	mov	r0, #0
   12ddc:	mov	r1, #8
   12de0:	mov	r2, r7
   12de4:	bl	18898 <__assert_fail@plt+0x6bf8>
   12de8:	mov	r3, r0
   12dec:	ldrb	r0, [r5, #1]
   12df0:	mov	r1, #0
   12df4:	mov	r2, r6
   12df8:	str	r0, [sp]
   12dfc:	mov	r0, #0
   12e00:	bl	119d0 <error@plt>
   12e04:	movw	r1, #37812	; 0x93b4
   12e08:	mov	r0, #0
   12e0c:	mov	r2, #5
   12e10:	movt	r1, #2
   12e14:	bl	11934 <dcgettext@plt>
   12e18:	mov	r5, r0
   12e1c:	mov	r0, #0
   12e20:	mov	r1, #8
   12e24:	mov	r2, r7
   12e28:	bl	18898 <__assert_fail@plt+0x6bf8>
   12e2c:	mov	r3, r0
   12e30:	mov	r0, #0
   12e34:	mov	r1, #0
   12e38:	mov	r2, r5
   12e3c:	str	r4, [sp]
   12e40:	bl	119d0 <error@plt>
   12e44:	mov	r6, #0
   12e48:	b	13340 <__assert_fail@plt+0x16a0>
   12e4c:	cmp	r4, #1
   12e50:	bne	12e94 <__assert_fail@plt+0x11f4>
   12e54:	movw	r0, #45628	; 0xb23c
   12e58:	movt	r0, #3
   12e5c:	ldr	r0, [r0]
   12e60:	cmp	r0, #2
   12e64:	bne	12ec0 <__assert_fail@plt+0x1220>
   12e68:	movw	r1, #37885	; 0x93fd
   12e6c:	mov	r0, #0
   12e70:	mov	r2, #5
   12e74:	mov	r8, #0
   12e78:	movt	r1, #2
   12e7c:	bl	11934 <dcgettext@plt>
   12e80:	mov	r2, r0
   12e84:	mov	r0, #0
   12e88:	mov	r1, #0
   12e8c:	bl	119d0 <error@plt>
   12e90:	b	12e44 <__assert_fail@plt+0x11a4>
   12e94:	mov	r0, #1
   12e98:	movw	r4, #14372	; 0x3824
   12e9c:	str	r6, [sp, #76]	; 0x4c
   12ea0:	mov	r6, #0
   12ea4:	str	r0, [sp, #80]	; 0x50
   12ea8:	mov	r0, #0
   12eac:	movt	r4, #1
   12eb0:	str	r0, [sp, #60]	; 0x3c
   12eb4:	movw	r0, #38113	; 0x94e1
   12eb8:	movt	r0, #2
   12ebc:	b	12904 <__assert_fail@plt+0xc64>
   12ec0:	mov	r0, #0
   12ec4:	str	r0, [sp, #60]	; 0x3c
   12ec8:	mov	r0, #1
   12ecc:	str	r0, [sp, #76]	; 0x4c
   12ed0:	ldr	r0, [sp, #20]
   12ed4:	cmp	r0, #0
   12ed8:	cmpne	r6, #1
   12edc:	beq	12f24 <__assert_fail@plt+0x1284>
   12ee0:	movw	r1, #38057	; 0x94a9
   12ee4:	mov	r0, #0
   12ee8:	mov	r2, #5
   12eec:	str	r0, [sp, #60]	; 0x3c
   12ef0:	mov	r0, #0
   12ef4:	movt	r1, #2
   12ef8:	bl	11934 <dcgettext@plt>
   12efc:	ldr	r2, [sp, #48]	; 0x30
   12f00:	mov	r4, r0
   12f04:	mov	r0, #0
   12f08:	mov	r1, #8
   12f0c:	bl	18898 <__assert_fail@plt+0x6bf8>
   12f10:	mov	r3, r0
   12f14:	mov	r0, #0
   12f18:	mov	r1, #0
   12f1c:	mov	r2, r4
   12f20:	bl	119d0 <error@plt>
   12f24:	movw	r0, #38113	; 0x94e1
   12f28:	movw	r4, #14372	; 0x3824
   12f2c:	mov	r6, #0
   12f30:	movt	r0, #2
   12f34:	movt	r4, #1
   12f38:	str	r0, [sp, #56]	; 0x38
   12f3c:	mov	r0, #1
   12f40:	str	r0, [sp, #80]	; 0x50
   12f44:	b	12908 <__assert_fail@plt+0xc68>
   12f48:	cmn	r0, #1
   12f4c:	beq	12f6c <__assert_fail@plt+0x12cc>
   12f50:	ldr	r1, [r5]
   12f54:	mov	r0, r4
   12f58:	blx	r1
   12f5c:	cmp	r0, #8
   12f60:	beq	12f6c <__assert_fail@plt+0x12cc>
   12f64:	ldr	r0, [sp, #272]	; 0x110
   12f68:	b	12f48 <__assert_fail@plt+0x12a8>
   12f6c:	cmp	r7, #0
   12f70:	beq	132ec <__assert_fail@plt+0x164c>
   12f74:	ldr	r0, [sp, #60]	; 0x3c
   12f78:	cmp	r0, #0
   12f7c:	beq	12ff8 <__assert_fail@plt+0x1358>
   12f80:	movw	r1, #38227	; 0x9553
   12f84:	mov	r0, #0
   12f88:	mov	r2, #5
   12f8c:	movt	r1, #2
   12f90:	bl	11934 <dcgettext@plt>
   12f94:	movw	r1, #38282	; 0x958a
   12f98:	mov	r4, r0
   12f9c:	mov	r0, #0
   12fa0:	mov	r2, #5
   12fa4:	movt	r1, #2
   12fa8:	bl	11934 <dcgettext@plt>
   12fac:	mov	r1, r0
   12fb0:	ldr	r0, [sp, #304]	; 0x130
   12fb4:	cmp	r0, #2
   12fb8:	beq	12fd0 <__assert_fail@plt+0x1330>
   12fbc:	cmp	r0, #1
   12fc0:	bne	12fe0 <__assert_fail@plt+0x1340>
   12fc4:	movw	r0, #43212	; 0xa8cc
   12fc8:	mov	r1, r4
   12fcc:	b	12fd4 <__assert_fail@plt+0x1334>
   12fd0:	movw	r0, #43212	; 0xa8cc
   12fd4:	movt	r0, #2
   12fd8:	bl	1185c <printf@plt>
   12fdc:	b	12ff8 <__assert_fail@plt+0x1358>
   12fe0:	movw	r1, #38334	; 0x95be
   12fe4:	mov	r0, #0
   12fe8:	mov	r2, #5
   12fec:	movt	r1, #2
   12ff0:	bl	11934 <dcgettext@plt>
   12ff4:	bl	1185c <printf@plt>
   12ff8:	ldr	r0, [sp, #64]	; 0x40
   12ffc:	orrs	r0, r9, r0
   13000:	ldreq	r0, [sp, #72]	; 0x48
   13004:	cmpeq	r0, #0
   13008:	beq	132ec <__assert_fail@plt+0x164c>
   1300c:	ldr	r0, [sp, #104]	; 0x68
   13010:	cmp	r0, #0
   13014:	beq	130bc <__assert_fail@plt+0x141c>
   13018:	ldr	r0, [sp, #72]	; 0x48
   1301c:	bl	11a3c <localtime@plt>
   13020:	cmp	r0, #0
   13024:	beq	130bc <__assert_fail@plt+0x141c>
   13028:	movw	r2, #39144	; 0x98e8
   1302c:	mov	r4, r0
   13030:	sub	r5, fp, #728	; 0x2d8
   13034:	mov	r1, #20
   13038:	mov	r0, r5
   1303c:	movt	r2, #2
   13040:	mov	r3, r4
   13044:	bl	11a24 <strftime@plt>
   13048:	cmp	r0, #19
   1304c:	bne	135f0 <__assert_fail@plt+0x1950>
   13050:	ldrb	r0, [fp, #-709]	; 0xfffffd3b
   13054:	cmp	r0, #0
   13058:	bne	13610 <__assert_fail@plt+0x1970>
   1305c:	ldrb	r0, [fp, #-710]	; 0xfffffd3a
   13060:	cmp	r0, #0
   13064:	beq	13630 <__assert_fail@plt+0x1990>
   13068:	movw	r1, #39301	; 0x9985
   1306c:	mov	r0, #0
   13070:	mov	r2, #5
   13074:	movt	r1, #2
   13078:	bl	11934 <dcgettext@plt>
   1307c:	ldr	r1, [sp, #72]	; 0x48
   13080:	ldr	r2, [r1, #4]
   13084:	mov	r1, r5
   13088:	bl	1185c <printf@plt>
   1308c:	movw	r2, #39340	; 0x99ac
   13090:	mov	r0, r5
   13094:	mov	r1, #20
   13098:	mov	r3, r4
   1309c:	movt	r2, #2
   130a0:	bl	11a24 <strftime@plt>
   130a4:	cmp	r0, #5
   130a8:	bne	13650 <__assert_fail@plt+0x19b0>
   130ac:	movw	r0, #41543	; 0xa247
   130b0:	mov	r1, r5
   130b4:	movt	r0, #2
   130b8:	bl	1185c <printf@plt>
   130bc:	movw	r1, #39356	; 0x99bc
   130c0:	movw	r2, #39387	; 0x99db
   130c4:	mov	r0, #5
   130c8:	mov	r3, r9
   130cc:	str	r0, [sp]
   130d0:	mov	r0, #0
   130d4:	movt	r1, #2
   130d8:	movt	r2, #2
   130dc:	bl	11c94 <dcngettext@plt>
   130e0:	sub	r5, fp, #728	; 0x2d8
   130e4:	mov	r6, #1
   130e8:	mov	r7, #0
   130ec:	mov	r4, r0
   130f0:	mov	r0, r9
   130f4:	mov	r1, #0
   130f8:	mov	r3, #0
   130fc:	mov	r2, r5
   13100:	str	r6, [sp]
   13104:	str	r7, [sp, #4]
   13108:	str	r6, [sp, #8]
   1310c:	str	r7, [sp, #12]
   13110:	bl	14d58 <__assert_fail@plt+0x30b8>
   13114:	mov	r1, r0
   13118:	mov	r0, r4
   1311c:	bl	1185c <printf@plt>
   13120:	movw	r0, #45700	; 0xb284
   13124:	movw	r1, #39443	; 0x9a13
   13128:	mov	r2, #5
   1312c:	movt	r0, #3
   13130:	movt	r1, #2
   13134:	ldrb	r0, [r0]
   13138:	cmp	r0, #0
   1313c:	movw	r0, #39419	; 0x99fb
   13140:	movt	r0, #2
   13144:	movne	r1, r0
   13148:	mov	r0, #0
   1314c:	bl	11934 <dcgettext@plt>
   13150:	movw	r9, #45640	; 0xb248
   13154:	mov	r4, r0
   13158:	mov	r2, r5
   1315c:	mov	r3, #0
   13160:	movt	r9, #3
   13164:	ldrd	r0, [r9, #8]
   13168:	stm	sp, {r6, r7}
   1316c:	str	r6, [sp, #8]
   13170:	str	r7, [sp, #12]
   13174:	bl	14d58 <__assert_fail@plt+0x30b8>
   13178:	mov	r1, r0
   1317c:	mov	r0, r4
   13180:	bl	1185c <printf@plt>
   13184:	movw	r1, #39462	; 0x9a26
   13188:	mov	r0, #0
   1318c:	mov	r2, #5
   13190:	movt	r1, #2
   13194:	bl	11934 <dcgettext@plt>
   13198:	mov	r8, r0
   1319c:	ldrd	r0, [r9, #16]
   131a0:	mov	r2, r5
   131a4:	mov	r3, #0
   131a8:	stm	sp, {r6, r7}
   131ac:	str	r6, [sp, #8]
   131b0:	str	r7, [sp, #12]
   131b4:	bl	14d58 <__assert_fail@plt+0x30b8>
   131b8:	mov	sl, r0
   131bc:	ldrd	r0, [r9, #24]
   131c0:	sub	lr, fp, #1024	; 0x400
   131c4:	mov	r3, #0
   131c8:	stm	sp, {r6, r7}
   131cc:	str	r6, [sp, #8]
   131d0:	str	r7, [sp, #12]
   131d4:	sub	r2, lr, #356	; 0x164
   131d8:	bl	14d58 <__assert_fail@plt+0x30b8>
   131dc:	mov	r5, r0
   131e0:	ldrd	r0, [r9, #32]
   131e4:	add	r2, sp, #1216	; 0x4c0
   131e8:	mov	r3, #0
   131ec:	stm	sp, {r6, r7}
   131f0:	str	r6, [sp, #8]
   131f4:	str	r7, [sp, #12]
   131f8:	bl	14d58 <__assert_fail@plt+0x30b8>
   131fc:	mov	r4, r0
   13200:	ldrd	r0, [r9, #40]	; 0x28
   13204:	stm	sp, {r6, r7}
   13208:	str	r6, [sp, #8]
   1320c:	mov	r6, #0
   13210:	add	r2, sp, #564	; 0x234
   13214:	mov	r3, #0
   13218:	str	r6, [sp, #12]
   1321c:	bl	14d58 <__assert_fail@plt+0x30b8>
   13220:	mov	r1, sl
   13224:	ldr	sl, [sp, #88]	; 0x58
   13228:	str	r0, [sp]
   1322c:	mov	r0, r8
   13230:	mov	r2, r5
   13234:	mov	r3, r4
   13238:	bl	1185c <printf@plt>
   1323c:	ldr	r0, [sp, #148]	; 0x94
   13240:	cmp	r0, #0
   13244:	bne	132e4 <__assert_fail@plt+0x1644>
   13248:	movw	r0, #45700	; 0xb284
   1324c:	movt	r0, #3
   13250:	ldrb	r0, [r0]
   13254:	cmp	r0, #1
   13258:	bne	1326c <__assert_fail@plt+0x15cc>
   1325c:	movw	r1, #39642	; 0x9ada
   13260:	mov	r0, #0
   13264:	movt	r1, #2
   13268:	b	132d8 <__assert_fail@plt+0x1638>
   1326c:	movw	r5, #45640	; 0xb248
   13270:	movt	r5, #3
   13274:	ldrd	r0, [r5, #16]
   13278:	orrs	r0, r0, r1
   1327c:	beq	132cc <__assert_fail@plt+0x162c>
   13280:	movw	r1, #39730	; 0x9b32
   13284:	mov	r0, #0
   13288:	mov	r2, #5
   1328c:	movt	r1, #2
   13290:	bl	11934 <dcgettext@plt>
   13294:	mov	r4, r0
   13298:	ldrd	r0, [r5, #16]
   1329c:	bl	28bf8 <__assert_fail@plt+0x16f58>
   132a0:	ldr	r2, [sp, #92]	; 0x5c
   132a4:	vmov	d17, r0, r1
   132a8:	mov	r0, r4
   132ac:	vmov	s0, r2
   132b0:	vcvt.f64.u32	d16, s0
   132b4:	vsub.f64	d16, d17, d16
   132b8:	vmul.f64	d16, d16, d12
   132bc:	vdiv.f64	d16, d16, d17
   132c0:	vmov	r2, r3, d16
   132c4:	bl	1185c <printf@plt>
   132c8:	b	132e4 <__assert_fail@plt+0x1644>
   132cc:	movw	r1, #39776	; 0x9b60
   132d0:	mov	r0, #0
   132d4:	movt	r1, #2
   132d8:	mov	r2, #5
   132dc:	bl	11934 <dcgettext@plt>
   132e0:	bl	1185c <printf@plt>
   132e4:	mov	r0, #10
   132e8:	bl	11b14 <putchar@plt>
   132ec:	ldr	r0, [sp, #296]	; 0x128
   132f0:	bl	118bc <ferror@plt>
   132f4:	cmp	r0, #0
   132f8:	beq	13334 <__assert_fail@plt+0x1694>
   132fc:	ldr	r0, [sp, #108]	; 0x6c
   13300:	ldr	r2, [sp, #300]	; 0x12c
   13304:	mov	r1, #8
   13308:	mov	r8, #0
   1330c:	ldr	r4, [r0]
   13310:	mov	r0, #0
   13314:	bl	18898 <__assert_fail@plt+0x6bf8>
   13318:	movw	r2, #43212	; 0xa8cc
   1331c:	mov	r3, r0
   13320:	mov	r0, #0
   13324:	mov	r1, r4
   13328:	movt	r2, #2
   1332c:	bl	119d0 <error@plt>
   13330:	b	13340 <__assert_fail@plt+0x16a0>
   13334:	movw	r0, #45608	; 0xb228
   13338:	movt	r0, #3
   1333c:	ldr	r8, [r0, #8]
   13340:	ldr	r0, [sp, #128]	; 0x80
   13344:	bl	11b68 <fclose@plt>
   13348:	cmn	r0, #1
   1334c:	beq	13408 <__assert_fail@plt+0x1768>
   13350:	ldr	r0, [sp, #96]	; 0x60
   13354:	cmp	r0, #0
   13358:	beq	13360 <__assert_fail@plt+0x16c0>
   1335c:	bl	1a158 <__assert_fail@plt+0x84b8>
   13360:	cmp	sl, #0
   13364:	beq	13398 <__assert_fail@plt+0x16f8>
   13368:	movw	r1, #43200	; 0xa8c0
   1336c:	add	r0, sp, #264	; 0x108
   13370:	mov	r2, #0
   13374:	add	r3, sp, #268	; 0x10c
   13378:	str	r0, [sp]
   1337c:	mov	r0, sl
   13380:	movt	r1, #2
   13384:	bl	14a8c <__assert_fail@plt+0x2dec>
   13388:	movw	r7, #45640	; 0xb248
   1338c:	cmp	r0, #0
   13390:	movt	r7, #3
   13394:	bne	12438 <__assert_fail@plt+0x798>
   13398:	ldr	r0, [sp, #44]	; 0x2c
   1339c:	cmp	r0, #0
   133a0:	beq	133b4 <__assert_fail@plt+0x1714>
   133a4:	movw	r0, #37091	; 0x90e3
   133a8:	mov	r1, r8
   133ac:	movt	r0, #2
   133b0:	bl	1185c <printf@plt>
   133b4:	mov	r0, #0
   133b8:	cmp	r8, #0
   133bc:	bne	1343c <__assert_fail@plt+0x179c>
   133c0:	movw	r1, #45608	; 0xb228
   133c4:	ldr	r0, [sp, #124]	; 0x7c
   133c8:	movt	r1, #3
   133cc:	ldrd	r2, [r1]
   133d0:	clz	r0, r0
   133d4:	lsr	r0, r0, #5
   133d8:	orrs	r1, r2, r3
   133dc:	movwne	r1, #1
   133e0:	orr	r0, r0, r1
   133e4:	ldr	r1, [sp, #120]	; 0x78
   133e8:	clz	r1, r1
   133ec:	lsr	r1, r1, #5
   133f0:	and	r0, r1, r0
   133f4:	b	1343c <__assert_fail@plt+0x179c>
   133f8:	ldr	r0, [sp, #108]	; 0x6c
   133fc:	mov	r1, #8
   13400:	mov	r2, r8
   13404:	b	13414 <__assert_fail@plt+0x1774>
   13408:	ldr	r0, [sp, #108]	; 0x6c
   1340c:	ldr	r2, [sp, #48]	; 0x30
   13410:	mov	r1, #8
   13414:	ldr	r4, [r0]
   13418:	mov	r0, #0
   1341c:	bl	18898 <__assert_fail@plt+0x6bf8>
   13420:	movw	r2, #43212	; 0xa8cc
   13424:	mov	r3, r0
   13428:	mov	r0, #0
   1342c:	mov	r1, r4
   13430:	movt	r2, #2
   13434:	bl	119d0 <error@plt>
   13438:	mov	r0, #0
   1343c:	sub	sp, fp, #72	; 0x48
   13440:	vpop	{d8-d12}
   13444:	add	sp, sp, #4
   13448:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1344c:	movw	r1, #36928	; 0x9040
   13450:	mov	r0, #0
   13454:	mov	r2, #5
   13458:	movt	r1, #2
   1345c:	bl	11934 <dcgettext@plt>
   13460:	mov	r2, r0
   13464:	mov	r0, #0
   13468:	mov	r1, #0
   1346c:	bl	119d0 <error@plt>
   13470:	b	13438 <__assert_fail@plt+0x1798>
   13474:	movw	r2, #43212	; 0xa8cc
   13478:	mov	r3, r0
   1347c:	mov	r0, #1
   13480:	mov	r1, #0
   13484:	movt	r2, #2
   13488:	bl	119d0 <error@plt>
   1348c:	mov	r0, #0
   13490:	bl	13784 <__assert_fail@plt+0x1ae4>
   13494:	movw	r0, #36846	; 0x8fee
   13498:	movw	r1, #36861	; 0x8ffd
   1349c:	movw	r3, #36870	; 0x9006
   134a0:	movw	r2, #1613	; 0x64d
   134a4:	movt	r0, #2
   134a8:	movt	r1, #2
   134ac:	movt	r3, #2
   134b0:	bl	11ca0 <__assert_fail@plt>
   134b4:	movw	r1, #45592	; 0xb218
   134b8:	movw	r3, #39820	; 0x9b8c
   134bc:	movt	r1, #3
   134c0:	movt	r3, #2
   134c4:	ldr	r2, [r1]
   134c8:	ldr	r1, [fp, #-1380]	; 0xfffffa9c
   134cc:	str	r2, [sp]
   134d0:	mov	r2, #108	; 0x6c
   134d4:	bl	19754 <__assert_fail@plt+0x7ab4>
   134d8:	movw	r0, #38392	; 0x95f8
   134dc:	movw	r1, #36861	; 0x8ffd
   134e0:	movw	r3, #38401	; 0x9601
   134e4:	movw	r2, #935	; 0x3a7
   134e8:	movt	r0, #2
   134ec:	movt	r1, #2
   134f0:	movt	r3, #2
   134f4:	bl	11ca0 <__assert_fail@plt>
   134f8:	ldr	r0, [sp, #108]	; 0x6c
   134fc:	movw	r1, #36778	; 0x8faa
   13500:	mov	r2, #5
   13504:	movt	r1, #2
   13508:	ldr	r4, [r0]
   1350c:	mov	r0, #0
   13510:	bl	11934 <dcgettext@plt>
   13514:	mov	r2, r0
   13518:	mov	r0, #1
   1351c:	mov	r1, r4
   13520:	bl	119d0 <error@plt>
   13524:	mov	r5, #34	; 0x22
   13528:	b	13530 <__assert_fail@plt+0x1890>
   1352c:	mov	r5, #22
   13530:	movw	r1, #37762	; 0x9382
   13534:	mov	r0, #0
   13538:	mov	r2, #5
   1353c:	movt	r1, #2
   13540:	bl	11934 <dcgettext@plt>
   13544:	mov	r6, r0
   13548:	mov	r0, #0
   1354c:	mov	r1, #8
   13550:	mov	r2, r4
   13554:	bl	18898 <__assert_fail@plt+0x6bf8>
   13558:	mov	r3, r0
   1355c:	mov	r0, #1
   13560:	mov	r1, r5
   13564:	mov	r2, r6
   13568:	bl	119d0 <error@plt>
   1356c:	movw	r1, #37762	; 0x9382
   13570:	mov	r0, #0
   13574:	mov	r2, #5
   13578:	movt	r1, #2
   1357c:	bl	11934 <dcgettext@plt>
   13580:	mov	r5, r0
   13584:	mov	r0, #0
   13588:	mov	r1, #8
   1358c:	mov	r2, r4
   13590:	bl	18898 <__assert_fail@plt+0x6bf8>
   13594:	mov	r3, r0
   13598:	mov	r0, #1
   1359c:	mov	r1, #0
   135a0:	mov	r2, r5
   135a4:	bl	119d0 <error@plt>
   135a8:	movw	r1, #36721	; 0x8f71
   135ac:	movt	r1, #2
   135b0:	b	1369c <__assert_fail@plt+0x19fc>
   135b4:	movw	r1, #38134	; 0x94f6
   135b8:	mov	r0, #0
   135bc:	mov	r2, #5
   135c0:	movt	r1, #2
   135c4:	bl	11934 <dcgettext@plt>
   135c8:	ldr	r2, [sp, #48]	; 0x30
   135cc:	mov	r4, r0
   135d0:	mov	r0, #0
   135d4:	mov	r1, #8
   135d8:	bl	18898 <__assert_fail@plt+0x6bf8>
   135dc:	mov	r3, r0
   135e0:	mov	r0, #1
   135e4:	mov	r1, #0
   135e8:	mov	r2, r4
   135ec:	bl	119d0 <error@plt>
   135f0:	movw	r0, #39162	; 0x98fa
   135f4:	movw	r1, #36861	; 0x8ffd
   135f8:	movw	r3, #39188	; 0x9914
   135fc:	movw	r2, #845	; 0x34d
   13600:	movt	r0, #2
   13604:	movt	r1, #2
   13608:	movt	r3, #2
   1360c:	bl	11ca0 <__assert_fail@plt>
   13610:	movw	r0, #39243	; 0x994b
   13614:	movw	r1, #36861	; 0x8ffd
   13618:	movw	r3, #39188	; 0x9914
   1361c:	movw	r2, #846	; 0x34e
   13620:	movt	r0, #2
   13624:	movt	r1, #2
   13628:	movt	r3, #2
   1362c:	bl	11ca0 <__assert_fail@plt>
   13630:	movw	r0, #39272	; 0x9968
   13634:	movw	r1, #36861	; 0x8ffd
   13638:	movw	r3, #39188	; 0x9914
   1363c:	movw	r2, #847	; 0x34f
   13640:	movt	r0, #2
   13644:	movt	r1, #2
   13648:	movt	r3, #2
   1364c:	bl	11ca0 <__assert_fail@plt>
   13650:	movw	r0, #39343	; 0x99af
   13654:	movw	r1, #36861	; 0x8ffd
   13658:	movw	r3, #39188	; 0x9914
   1365c:	movw	r2, #851	; 0x353
   13660:	movt	r0, #2
   13664:	movt	r1, #2
   13668:	movt	r3, #2
   1366c:	bl	11ca0 <__assert_fail@plt>
   13670:	movw	r1, #36624	; 0x8f10
   13674:	mov	r0, #0
   13678:	mov	r2, #5
   1367c:	movt	r1, #2
   13680:	bl	11934 <dcgettext@plt>
   13684:	mov	r4, r0
   13688:	bl	11acc <__errno_location@plt>
   1368c:	str	r0, [sp, #108]	; 0x6c
   13690:	b	136d0 <__assert_fail@plt+0x1a30>
   13694:	movw	r1, #36656	; 0x8f30
   13698:	movt	r1, #2
   1369c:	mov	r0, #0
   136a0:	mov	r2, #5
   136a4:	bl	11934 <dcgettext@plt>
   136a8:	mov	r4, r0
   136ac:	b	136d0 <__assert_fail@plt+0x1a30>
   136b0:	movw	r1, #36689	; 0x8f51
   136b4:	mov	r0, #0
   136b8:	mov	r2, #5
   136bc:	movt	r1, #2
   136c0:	bl	11934 <dcgettext@plt>
   136c4:	mov	r4, r0
   136c8:	ldr	r0, [sp, #108]	; 0x6c
   136cc:	str	r5, [r0]
   136d0:	ldr	r0, [sp, #108]	; 0x6c
   136d4:	mov	r1, #8
   136d8:	mov	r2, r4
   136dc:	ldr	r5, [r0]
   136e0:	mov	r0, #0
   136e4:	bl	18898 <__assert_fail@plt+0x6bf8>
   136e8:	movw	r2, #43212	; 0xa8cc
   136ec:	mov	r3, r0
   136f0:	mov	r0, #1
   136f4:	mov	r1, r5
   136f8:	movt	r2, #2
   136fc:	bl	119d0 <error@plt>
   13700:	movw	r1, #36902	; 0x9026
   13704:	mov	r0, #0
   13708:	mov	r2, #5
   1370c:	movt	r1, #2
   13710:	bl	11934 <dcgettext@plt>
   13714:	mov	r2, r0
   13718:	mov	r0, #0
   1371c:	mov	r1, #0
   13720:	bl	119d0 <error@plt>
   13724:	mov	r0, #1
   13728:	bl	13784 <__assert_fail@plt+0x1ae4>
   1372c:	push	{r4, sl, fp, lr}
   13730:	add	fp, sp, #8
   13734:	mov	r1, #131072	; 0x20000
   13738:	bl	14d0c <__assert_fail@plt+0x306c>
   1373c:	mov	r4, r0
   13740:	cmp	r0, #0
   13744:	blt	1376c <__assert_fail@plt+0x1acc>
   13748:	mov	r0, r4
   1374c:	mov	r1, #2
   13750:	mov	r2, #1
   13754:	bl	19f24 <__assert_fail@plt+0x8284>
   13758:	cmp	r0, #0
   1375c:	beq	1376c <__assert_fail@plt+0x1acc>
   13760:	mov	r0, r4
   13764:	bl	11c7c <close@plt>
   13768:	mvn	r4, #0
   1376c:	mov	r0, r4
   13770:	pop	{r4, sl, fp, pc}
   13774:	movw	r0, #45604	; 0xb224
   13778:	movt	r0, #3
   1377c:	ldr	r0, [r0]
   13780:	b	1a158 <__assert_fail@plt+0x84b8>
   13784:	push	{fp, lr}
   13788:	mov	fp, sp
   1378c:	cmp	r0, #0
   13790:	bne	137e0 <__assert_fail@plt+0x1b40>
   13794:	movw	r5, #45588	; 0xb214
   13798:	movw	r1, #37285	; 0x91a5
   1379c:	mov	r0, #0
   137a0:	mov	r2, #5
   137a4:	movt	r5, #3
   137a8:	movt	r1, #2
   137ac:	ldr	r4, [r5]
   137b0:	bl	11934 <dcgettext@plt>
   137b4:	movw	r6, #45716	; 0xb294
   137b8:	mov	r1, r0
   137bc:	mov	r0, r4
   137c0:	movt	r6, #3
   137c4:	ldr	r2, [r6]
   137c8:	bl	11ab4 <fprintf@plt>
   137cc:	ldr	r0, [r5]
   137d0:	ldr	r1, [r6]
   137d4:	bl	14b18 <__assert_fail@plt+0x2e78>
   137d8:	mov	r0, #0
   137dc:	bl	11a78 <exit@plt>
   137e0:	mov	r4, r0
   137e4:	movw	r0, #45584	; 0xb210
   137e8:	movw	r1, #37246	; 0x917e
   137ec:	mov	r2, #5
   137f0:	movt	r0, #3
   137f4:	movt	r1, #2
   137f8:	ldr	r5, [r0]
   137fc:	mov	r0, #0
   13800:	bl	11934 <dcgettext@plt>
   13804:	mov	r1, r0
   13808:	movw	r0, #45716	; 0xb294
   1380c:	movt	r0, #3
   13810:	ldr	r2, [r0]
   13814:	mov	r0, r5
   13818:	bl	11ab4 <fprintf@plt>
   1381c:	mov	r0, r4
   13820:	bl	11a78 <exit@plt>
   13824:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13828:	add	fp, sp, #24
   1382c:	sub	sp, sp, #8
   13830:	mov	r4, r0
   13834:	ldr	r0, [r0]
   13838:	cmp	r0, #128	; 0x80
   1383c:	bne	1386c <__assert_fail@plt+0x1bcc>
   13840:	ldr	r5, [r4, #24]
   13844:	mov	r0, r5
   13848:	bl	11b2c <fgetc@plt>
   1384c:	mov	r6, r0
   13850:	mov	r0, r5
   13854:	bl	11b2c <fgetc@plt>
   13858:	ldr	r1, [r4, #4]
   1385c:	uxtb	r0, r0
   13860:	orr	r0, r0, r6, lsl #8
   13864:	sxtah	r6, r1, r0
   13868:	b	1387c <__assert_fail@plt+0x1bdc>
   1386c:	ldr	r1, [r4, #4]
   13870:	addlt	r6, r1, r0
   13874:	addge	r0, r0, r1
   13878:	subge	r6, r0, #256	; 0x100
   1387c:	cmp	r6, #0
   13880:	str	r6, [r4, #4]
   13884:	blt	139c0 <__assert_fail@plt+0x1d20>
   13888:	ldr	r0, [r4, #8]
   1388c:	cmp	r6, r0
   13890:	bgt	139c0 <__assert_fail@plt+0x1d20>
   13894:	ldr	r3, [r4, #24]
   13898:	mov	r0, #0
   1389c:	mov	r1, sp
   138a0:	mov	r2, #0
   138a4:	str	r0, [sp, #4]
   138a8:	str	r0, [sp]
   138ac:	add	r0, sp, #4
   138b0:	bl	11c1c <getdelim@plt>
   138b4:	cmp	r0, #0
   138b8:	blt	139b4 <__assert_fail@plt+0x1d14>
   138bc:	ldr	r1, [sp, #4]
   138c0:	cmp	r1, #0
   138c4:	beq	139fc <__assert_fail@plt+0x1d5c>
   138c8:	ldr	r2, [r4, #16]
   138cc:	add	r8, r0, #1
   138d0:	mov	r5, r0
   138d4:	ldr	r0, [r4, #12]
   138d8:	add	r7, r8, r6
   138dc:	cmp	r7, r2
   138e0:	bls	13900 <__assert_fail@plt+0x1c60>
   138e4:	mov	r1, r7
   138e8:	bl	1a2b4 <__assert_fail@plt+0x8614>
   138ec:	cmp	r0, #0
   138f0:	beq	139b4 <__assert_fail@plt+0x1d14>
   138f4:	str	r0, [r4, #12]
   138f8:	str	r7, [r4, #16]
   138fc:	ldr	r1, [sp, #4]
   13900:	add	r0, r0, r6
   13904:	mov	r2, r8
   13908:	bl	118e0 <memcpy@plt>
   1390c:	ldr	r0, [sp, #4]
   13910:	bl	1a158 <__assert_fail@plt+0x84b8>
   13914:	cmp	r5, #1
   13918:	blt	139b4 <__assert_fail@plt+0x1d14>
   1391c:	ldr	r0, [r4, #24]
   13920:	bl	11c70 <getc@plt>
   13924:	str	r0, [r4]
   13928:	ldr	r0, [r4, #4]
   1392c:	add	r0, r0, r5
   13930:	subs	r1, r0, #1
   13934:	str	r1, [r4, #8]
   13938:	bgt	1397c <__assert_fail@plt+0x1cdc>
   1393c:	movw	r1, #38613	; 0x96d5
   13940:	mov	r0, #0
   13944:	mov	r2, #5
   13948:	movt	r1, #2
   1394c:	bl	11934 <dcgettext@plt>
   13950:	ldr	r2, [r4, #28]
   13954:	mov	r5, r0
   13958:	mov	r0, #0
   1395c:	mov	r1, #8
   13960:	bl	18898 <__assert_fail@plt+0x6bf8>
   13964:	mov	r3, r0
   13968:	mov	r0, #1
   1396c:	mov	r1, #0
   13970:	mov	r2, r5
   13974:	bl	119d0 <error@plt>
   13978:	ldr	r1, [r4, #8]
   1397c:	ldr	r0, [r4, #12]
   13980:	add	r2, r0, r1
   13984:	ldrb	r3, [r2, #-1]
   13988:	cmp	r3, #0
   1398c:	beq	13a1c <__assert_fail@plt+0x1d7c>
   13990:	ldrb	r1, [r0, r1]
   13994:	cmp	r1, #0
   13998:	bne	13a3c <__assert_fail@plt+0x1d9c>
   1399c:	ldrb	r1, [r2, #1]
   139a0:	cmp	r1, #0
   139a4:	bne	13a5c <__assert_fail@plt+0x1dbc>
   139a8:	str	r0, [r4, #20]
   139ac:	mov	r0, #1
   139b0:	b	139b8 <__assert_fail@plt+0x1d18>
   139b4:	mov	r0, #8
   139b8:	sub	sp, fp, #24
   139bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   139c0:	movw	r1, #38613	; 0x96d5
   139c4:	mov	r0, #0
   139c8:	mov	r2, #5
   139cc:	movt	r1, #2
   139d0:	bl	11934 <dcgettext@plt>
   139d4:	ldr	r2, [r4, #28]
   139d8:	mov	r5, r0
   139dc:	mov	r0, #0
   139e0:	mov	r1, #8
   139e4:	bl	18898 <__assert_fail@plt+0x6bf8>
   139e8:	mov	r3, r0
   139ec:	mov	r0, #1
   139f0:	mov	r1, #0
   139f4:	mov	r2, r5
   139f8:	bl	119d0 <error@plt>
   139fc:	movw	r0, #38750	; 0x975e
   13a00:	movw	r1, #36861	; 0x8ffd
   13a04:	movw	r3, #38760	; 0x9768
   13a08:	mov	r2, #245	; 0xf5
   13a0c:	movt	r0, #2
   13a10:	movt	r1, #2
   13a14:	movt	r3, #2
   13a18:	bl	11ca0 <__assert_fail@plt>
   13a1c:	movw	r0, #38654	; 0x96fe
   13a20:	movw	r1, #36861	; 0x8ffd
   13a24:	movw	r3, #38667	; 0x970b
   13a28:	mov	r2, #568	; 0x238
   13a2c:	movt	r0, #2
   13a30:	movt	r1, #2
   13a34:	movt	r3, #2
   13a38:	bl	11ca0 <__assert_fail@plt>
   13a3c:	movw	r0, #38724	; 0x9744
   13a40:	movw	r1, #36861	; 0x8ffd
   13a44:	movw	r3, #38667	; 0x970b
   13a48:	movw	r2, #569	; 0x239
   13a4c:	movt	r0, #2
   13a50:	movt	r1, #2
   13a54:	movt	r3, #2
   13a58:	bl	11ca0 <__assert_fail@plt>
   13a5c:	movw	r0, #38737	; 0x9751
   13a60:	movw	r1, #36861	; 0x8ffd
   13a64:	movw	r3, #38667	; 0x970b
   13a68:	movw	r2, #570	; 0x23a
   13a6c:	movt	r0, #2
   13a70:	movt	r1, #2
   13a74:	movt	r3, #2
   13a78:	bl	11ca0 <__assert_fail@plt>
   13a7c:	push	{r4, sl, fp, lr}
   13a80:	add	fp, sp, #8
   13a84:	mov	r4, r0
   13a88:	mvn	r0, r1
   13a8c:	cmp	r0, r2
   13a90:	bcc	13ac0 <__assert_fail@plt+0x1e20>
   13a94:	add	r0, r2, r1
   13a98:	mov	r1, r4
   13a9c:	ldr	r2, [r1, #16]!
   13aa0:	cmp	r2, r0
   13aa4:	popcs	{r4, sl, fp, pc}
   13aa8:	str	r0, [r4, #16]
   13aac:	mov	r2, #1
   13ab0:	ldr	r0, [r4, #12]
   13ab4:	bl	193cc <__assert_fail@plt+0x772c>
   13ab8:	str	r0, [r4, #12]
   13abc:	pop	{r4, sl, fp, pc}
   13ac0:	mov	r0, r4
   13ac4:	bl	142c4 <__assert_fail@plt+0x2624>
   13ac8:	push	{r4, r5, r6, sl, fp, lr}
   13acc:	add	fp, sp, #16
   13ad0:	mov	r4, r0
   13ad4:	ldr	r0, [r0]
   13ad8:	cmn	r0, #1
   13adc:	beq	13b50 <__assert_fail@plt+0x1eb0>
   13ae0:	cmp	r0, #30
   13ae4:	bne	13b58 <__assert_fail@plt+0x1eb8>
   13ae8:	ldr	r5, [r4, #4]
   13aec:	ldr	r2, [r4, #8]
   13af0:	ldr	r0, [r4, #24]
   13af4:	ldr	r1, [r4, #28]
   13af8:	sub	r3, r5, #14
   13afc:	cmp	r5, #13
   13b00:	str	r3, [r4, #4]
   13b04:	subgt	r2, r2, r3
   13b08:	add	r3, r4, #32
   13b0c:	bl	142f8 <__assert_fail@plt+0x2658>
   13b10:	rsb	r1, r5, #14
   13b14:	cmp	r0, r1
   13b18:	blt	13c40 <__assert_fail@plt+0x1fa0>
   13b1c:	ldr	r1, [r4, #4]
   13b20:	add	r5, r1, r0
   13b24:	cmn	r5, #1
   13b28:	str	r5, [r4, #4]
   13b2c:	bgt	13b70 <__assert_fail@plt+0x1ed0>
   13b30:	movw	r0, #38953	; 0x9829
   13b34:	movw	r1, #36861	; 0x8ffd
   13b38:	movw	r3, #38901	; 0x97f5
   13b3c:	mov	r2, #480	; 0x1e0
   13b40:	movt	r0, #2
   13b44:	movt	r1, #2
   13b48:	movt	r3, #2
   13b4c:	bl	11ca0 <__assert_fail@plt>
   13b50:	mov	r6, #8
   13b54:	b	13c38 <__assert_fail@plt+0x1f98>
   13b58:	ldr	r1, [r4, #4]
   13b5c:	add	r0, r0, r1
   13b60:	sub	r5, r0, #14
   13b64:	cmp	r5, #0
   13b68:	str	r5, [r4, #4]
   13b6c:	blt	13c60 <__assert_fail@plt+0x1fc0>
   13b70:	ldr	r0, [r4, #24]
   13b74:	bl	11c70 <getc@plt>
   13b78:	cmp	r0, #31
   13b7c:	str	r0, [r4]
   13b80:	blt	13c0c <__assert_fail@plt+0x1f6c>
   13b84:	cmp	r0, #127	; 0x7f
   13b88:	bgt	13bac <__assert_fail@plt+0x1f0c>
   13b8c:	mov	r0, r4
   13b90:	mov	r1, r5
   13b94:	mov	r2, #1
   13b98:	mov	r6, #1
   13b9c:	bl	13a7c <__assert_fail@plt+0x1ddc>
   13ba0:	ldr	r0, [r4]
   13ba4:	mov	r1, r5
   13ba8:	b	13bec <__assert_fail@plt+0x1f4c>
   13bac:	mov	r0, r4
   13bb0:	mov	r1, r5
   13bb4:	mov	r2, #2
   13bb8:	mov	r6, #2
   13bbc:	bl	13a7c <__assert_fail@plt+0x1ddc>
   13bc0:	ldr	r0, [r4]
   13bc4:	ldr	r1, [r4, #12]
   13bc8:	and	r0, r0, #127	; 0x7f
   13bcc:	str	r0, [r4]
   13bd0:	add	r0, r4, r0
   13bd4:	ldrb	r0, [r0, #36]	; 0x24
   13bd8:	strb	r0, [r1, r5]
   13bdc:	add	r1, r5, #1
   13be0:	ldr	r0, [r4]
   13be4:	add	r0, r4, r0
   13be8:	ldrb	r0, [r0, #164]	; 0xa4
   13bec:	ldr	r2, [r4, #12]
   13bf0:	strb	r0, [r2, r1]
   13bf4:	ldr	r0, [r4, #24]
   13bf8:	bl	11c70 <getc@plt>
   13bfc:	add	r5, r5, r6
   13c00:	cmp	r0, #30
   13c04:	str	r0, [r4]
   13c08:	bgt	13b84 <__assert_fail@plt+0x1ee4>
   13c0c:	mov	r0, r4
   13c10:	mov	r1, r5
   13c14:	mov	r2, #1
   13c18:	mov	r6, #1
   13c1c:	bl	13a7c <__assert_fail@plt+0x1ddc>
   13c20:	ldr	r0, [r4, #12]
   13c24:	mov	r1, #0
   13c28:	strb	r1, [r0, r5]
   13c2c:	str	r5, [r4, #8]
   13c30:	ldr	r0, [r4, #12]
   13c34:	str	r0, [r4, #20]
   13c38:	mov	r0, r6
   13c3c:	pop	{r4, r5, r6, sl, fp, pc}
   13c40:	movw	r0, #38886	; 0x97e6
   13c44:	movw	r1, #36861	; 0x8ffd
   13c48:	movw	r3, #38901	; 0x97f5
   13c4c:	movw	r2, #478	; 0x1de
   13c50:	movt	r0, #2
   13c54:	movt	r1, #2
   13c58:	movt	r3, #2
   13c5c:	bl	11ca0 <__assert_fail@plt>
   13c60:	movw	r0, #38953	; 0x9829
   13c64:	movw	r1, #36861	; 0x8ffd
   13c68:	movw	r3, #38901	; 0x97f5
   13c6c:	movw	r2, #485	; 0x1e5
   13c70:	movt	r0, #2
   13c74:	movt	r1, #2
   13c78:	movt	r3, #2
   13c7c:	bl	11ca0 <__assert_fail@plt>
   13c80:	push	{r4, sl, fp, lr}
   13c84:	add	fp, sp, #8
   13c88:	mov	r4, r0
   13c8c:	ldr	r0, [r0, #12]
   13c90:	bl	14b84 <__assert_fail@plt+0x2ee4>
   13c94:	str	r0, [r4, #20]
   13c98:	mov	r0, #1
   13c9c:	pop	{r4, sl, fp, pc}
   13ca0:	push	{r4, r5, fp, lr}
   13ca4:	add	fp, sp, #8
   13ca8:	sub	sp, sp, #8
   13cac:	ldr	r5, [r0, #20]
   13cb0:	mov	r4, r1
   13cb4:	mov	r0, r5
   13cb8:	bl	11a9c <strlen@plt>
   13cbc:	mov	r2, r0
   13cc0:	mov	r0, #0
   13cc4:	mov	r1, r5
   13cc8:	mov	r3, #0
   13ccc:	str	r0, [sp, #4]
   13cd0:	mov	r0, r4
   13cd4:	str	r2, [sp]
   13cd8:	bl	1d5a4 <__assert_fail@plt+0xb904>
   13cdc:	mov	r1, #2
   13ce0:	cmp	r0, #0
   13ce4:	movwlt	r1, #4
   13ce8:	mov	r0, r1
   13cec:	sub	sp, fp, #8
   13cf0:	pop	{r4, r5, fp, pc}
   13cf4:	push	{fp, lr}
   13cf8:	mov	fp, sp
   13cfc:	mov	r2, r1
   13d00:	ldr	r1, [r0, #20]
   13d04:	mov	r0, r2
   13d08:	mov	r2, #16
   13d0c:	bl	119dc <fnmatch@plt>
   13d10:	mov	r1, #4
   13d14:	cmp	r0, #0
   13d18:	movweq	r1, #2
   13d1c:	mov	r0, r1
   13d20:	pop	{fp, pc}
   13d24:	push	{fp, lr}
   13d28:	mov	fp, sp
   13d2c:	mov	r2, r1
   13d30:	ldr	r1, [r0, #20]
   13d34:	mov	r0, r2
   13d38:	mov	r2, #0
   13d3c:	bl	119dc <fnmatch@plt>
   13d40:	mov	r1, #4
   13d44:	cmp	r0, #0
   13d48:	movweq	r1, #2
   13d4c:	mov	r0, r1
   13d50:	pop	{fp, pc}
   13d54:	push	{r4, r5, fp, lr}
   13d58:	add	fp, sp, #8
   13d5c:	mov	r4, r1
   13d60:	mov	r5, r0
   13d64:	bl	119a0 <__ctype_get_mb_cur_max@plt>
   13d68:	cmp	r0, #1
   13d6c:	bne	13d90 <__assert_fail@plt+0x20f0>
   13d70:	ldr	r0, [r5, #20]
   13d74:	mov	r1, r4
   13d78:	bl	26e54 <__assert_fail@plt+0x151b4>
   13d7c:	mov	r1, #2
   13d80:	cmp	r0, #0
   13d84:	movweq	r1, #4
   13d88:	mov	r0, r1
   13d8c:	pop	{r4, r5, fp, pc}
   13d90:	movw	r0, #38980	; 0x9844
   13d94:	movw	r1, #36861	; 0x8ffd
   13d98:	movw	r3, #38996	; 0x9854
   13d9c:	movw	r2, #714	; 0x2ca
   13da0:	movt	r0, #2
   13da4:	movt	r1, #2
   13da8:	movt	r3, #2
   13dac:	bl	11ca0 <__assert_fail@plt>
   13db0:	push	{r4, r5, fp, lr}
   13db4:	add	fp, sp, #8
   13db8:	mov	r4, r1
   13dbc:	mov	r5, r0
   13dc0:	bl	119a0 <__ctype_get_mb_cur_max@plt>
   13dc4:	cmp	r0, #1
   13dc8:	bne	13dec <__assert_fail@plt+0x214c>
   13dcc:	ldr	r0, [r5, #20]
   13dd0:	mov	r1, r4
   13dd4:	bl	27a24 <__assert_fail@plt+0x15d84>
   13dd8:	mov	r1, #2
   13ddc:	cmp	r0, #0
   13de0:	movweq	r1, #4
   13de4:	mov	r0, r1
   13de8:	pop	{r4, r5, fp, pc}
   13dec:	movw	r0, #38980	; 0x9844
   13df0:	movw	r1, #36861	; 0x8ffd
   13df4:	movw	r3, #39069	; 0x989d
   13df8:	movw	r2, #690	; 0x2b2
   13dfc:	movt	r0, #2
   13e00:	movt	r1, #2
   13e04:	movt	r3, #2
   13e08:	bl	11ca0 <__assert_fail@plt>
   13e0c:	push	{fp, lr}
   13e10:	mov	fp, sp
   13e14:	ldr	r0, [r0, #20]
   13e18:	bl	1587c <__assert_fail@plt+0x3bdc>
   13e1c:	mov	r1, #2
   13e20:	cmp	r0, #0
   13e24:	movweq	r1, #4
   13e28:	mov	r0, r1
   13e2c:	pop	{fp, pc}
   13e30:	push	{fp, lr}
   13e34:	mov	fp, sp
   13e38:	ldr	r0, [r0, #20]
   13e3c:	bl	1660c <__assert_fail@plt+0x496c>
   13e40:	mov	r1, #2
   13e44:	cmp	r0, #0
   13e48:	movweq	r1, #4
   13e4c:	mov	r0, r1
   13e50:	pop	{fp, pc}
   13e54:	push	{fp, lr}
   13e58:	mov	fp, sp
   13e5c:	sub	sp, sp, #104	; 0x68
   13e60:	ldr	r0, [r0, #12]
   13e64:	mov	r1, sp
   13e68:	bl	28e9c <__assert_fail@plt+0x171fc>
   13e6c:	mov	r1, #4
   13e70:	cmp	r0, #0
   13e74:	movweq	r1, #1
   13e78:	mov	r0, r1
   13e7c:	mov	sp, fp
   13e80:	pop	{fp, pc}
   13e84:	push	{fp, lr}
   13e88:	mov	fp, sp
   13e8c:	sub	sp, sp, #104	; 0x68
   13e90:	ldr	r0, [r0, #12]
   13e94:	mov	r1, sp
   13e98:	bl	28ebc <__assert_fail@plt+0x1721c>
   13e9c:	mov	r1, #4
   13ea0:	cmp	r0, #0
   13ea4:	movweq	r1, #1
   13ea8:	mov	r0, r1
   13eac:	mov	sp, fp
   13eb0:	pop	{fp, pc}
   13eb4:	push	{fp, lr}
   13eb8:	mov	fp, sp
   13ebc:	sub	sp, sp, #104	; 0x68
   13ec0:	ldr	r0, [r0, #12]
   13ec4:	mov	r1, sp
   13ec8:	bl	28e9c <__assert_fail@plt+0x171fc>
   13ecc:	mov	r1, #1
   13ed0:	cmp	r0, #0
   13ed4:	movweq	r1, #4
   13ed8:	mov	r0, r1
   13edc:	mov	sp, fp
   13ee0:	pop	{fp, pc}
   13ee4:	push	{fp, lr}
   13ee8:	mov	fp, sp
   13eec:	sub	sp, sp, #104	; 0x68
   13ef0:	ldr	r0, [r0, #12]
   13ef4:	mov	r1, sp
   13ef8:	bl	28ebc <__assert_fail@plt+0x1721c>
   13efc:	mov	r1, #1
   13f00:	cmp	r0, #0
   13f04:	movweq	r1, #4
   13f08:	mov	r0, r1
   13f0c:	mov	sp, fp
   13f10:	pop	{fp, pc}
   13f14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f18:	add	fp, sp, #28
   13f1c:	sub	sp, sp, #4
   13f20:	ldr	r5, [r0, #12]
   13f24:	mov	r8, r1
   13f28:	mov	r0, r5
   13f2c:	bl	11a9c <strlen@plt>
   13f30:	vldr	s1, [pc, #224]	; 14018 <__assert_fail@plt+0x2378>
   13f34:	add	r1, r8, #8
   13f38:	vld1.64	{d16-d17}, [r1]
   13f3c:	vldr	s0, [pc, #216]	; 1401c <__assert_fail@plt+0x237c>
   13f40:	vmov	s2, r0
   13f44:	vmov.f32	s3, s1
   13f48:	vadd.i64	q8, q0, q8
   13f4c:	vst1.64	{d16-d17}, [r1]
   13f50:	ldrb	r1, [r5]
   13f54:	cmp	r1, #0
   13f58:	beq	1400c <__assert_fail@plt+0x236c>
   13f5c:	add	r5, r5, #1
   13f60:	mov	r4, #0
   13f64:	mov	r9, #1
   13f68:	mov	r6, #0
   13f6c:	mov	sl, #0
   13f70:	sxtb	r0, r1
   13f74:	uxtb	r7, r1
   13f78:	mov	r2, #1
   13f7c:	cmp	r0, #0
   13f80:	mov	r0, #1
   13f84:	movwlt	sl, #1
   13f88:	cmp	r7, #10
   13f8c:	beq	13fb0 <__assert_fail@plt+0x2310>
   13f90:	bl	11a6c <__ctype_b_loc@plt>
   13f94:	ldr	r0, [r0]
   13f98:	add	r0, r0, r7, lsl #1
   13f9c:	ldrb	r0, [r0, #1]
   13fa0:	tst	r0, #32
   13fa4:	mov	r0, r4
   13fa8:	movne	r6, r9
   13fac:	mov	r2, r6
   13fb0:	ldrb	r1, [r5], #1
   13fb4:	mov	r4, r0
   13fb8:	mov	r6, r2
   13fbc:	cmp	r1, #0
   13fc0:	bne	13f70 <__assert_fail@plt+0x22d0>
   13fc4:	cmp	sl, #0
   13fc8:	beq	13fdc <__assert_fail@plt+0x233c>
   13fcc:	ldrd	r4, [r8, #40]	; 0x28
   13fd0:	adds	r4, r4, #1
   13fd4:	adc	r5, r5, #0
   13fd8:	strd	r4, [r8, #40]	; 0x28
   13fdc:	cmp	r2, #0
   13fe0:	beq	13ff4 <__assert_fail@plt+0x2354>
   13fe4:	ldrd	r2, [r8, #24]
   13fe8:	adds	r2, r2, #1
   13fec:	adc	r3, r3, #0
   13ff0:	strd	r2, [r8, #24]
   13ff4:	cmp	r0, #0
   13ff8:	beq	1400c <__assert_fail@plt+0x236c>
   13ffc:	ldrd	r0, [r8, #32]
   14000:	adds	r0, r0, #1
   14004:	adc	r1, r1, #0
   14008:	strd	r0, [r8, #32]
   1400c:	mov	r0, #1
   14010:	sub	sp, fp, #28
   14014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14018:	andeq	r0, r0, r0
   1401c:	andeq	r0, r0, r1
   14020:	push	{fp, lr}
   14024:	mov	fp, sp
   14028:	sub	sp, sp, #8
   1402c:	movw	r1, #45637	; 0xb245
   14030:	movw	r3, #45588	; 0xb214
   14034:	ldr	r0, [r0, #12]
   14038:	movt	r1, #3
   1403c:	movt	r3, #3
   14040:	ldrb	r2, [r1]
   14044:	movw	r1, #45604	; 0xb224
   14048:	ldr	ip, [r3]
   1404c:	movw	r3, #43212	; 0xa8cc
   14050:	movt	r1, #3
   14054:	movt	r3, #2
   14058:	ldr	r1, [r1]
   1405c:	str	r0, [sp]
   14060:	mov	r0, ip
   14064:	bl	144ec <__assert_fail@plt+0x284c>
   14068:	movw	r0, #45632	; 0xb240
   1406c:	movt	r0, #3
   14070:	ldrb	r1, [r0]
   14074:	mov	r0, #10
   14078:	cmp	r1, #0
   1407c:	movwne	r0, #0
   14080:	bl	11b14 <putchar@plt>
   14084:	mov	r0, #1
   14088:	mov	sp, fp
   1408c:	pop	{fp, pc}
   14090:	push	{fp, lr}
   14094:	mov	fp, sp
   14098:	movw	r1, #45588	; 0xb214
   1409c:	ldr	r0, [r0, #12]
   140a0:	movt	r1, #3
   140a4:	ldr	r1, [r1]
   140a8:	bl	11c4c <fputs@plt>
   140ac:	movw	r0, #45632	; 0xb240
   140b0:	movt	r0, #3
   140b4:	ldrb	r1, [r0]
   140b8:	mov	r0, #10
   140bc:	cmp	r1, #0
   140c0:	movwne	r0, #0
   140c4:	bl	11b14 <putchar@plt>
   140c8:	mov	r0, #1
   140cc:	pop	{fp, pc}
   140d0:	push	{r4, r5, fp, lr}
   140d4:	add	fp, sp, #8
   140d8:	ldr	r0, [r1, #8]
   140dc:	ldr	r2, [r1, #12]
   140e0:	ldr	ip, [r1]
   140e4:	ldr	r3, [r1, #4]
   140e8:	adds	r4, r0, #1
   140ec:	mov	r0, #8
   140f0:	adc	r5, r2, #0
   140f4:	strd	r4, [r1, #8]
   140f8:	subs	r1, r4, ip
   140fc:	sbcs	r1, r5, r3
   14100:	movwcc	r0, #1
   14104:	pop	{r4, r5, fp, pc}
   14108:	ldr	r0, [r1, #8]
   1410c:	ldr	r3, [r1, #12]
   14110:	adds	r0, r0, #1
   14114:	str	r0, [r1, #8]
   14118:	adc	r3, r3, #0
   1411c:	mov	r0, #1
   14120:	str	r3, [r1, #12]
   14124:	bx	lr
   14128:	push	{r4, r5, r6, r7, fp, lr}
   1412c:	add	fp, sp, #16
   14130:	movw	r6, #45696	; 0xb280
   14134:	mov	r4, r0
   14138:	movw	r0, #45688	; 0xb278
   1413c:	movt	r6, #3
   14140:	movt	r0, #3
   14144:	ldr	r7, [r6]
   14148:	ldr	r5, [r0]
   1414c:	cmp	r5, r7
   14150:	beq	14194 <__assert_fail@plt+0x24f4>
   14154:	ldr	r2, [r5]
   14158:	ldr	r1, [r5, #4]
   1415c:	mov	r0, r4
   14160:	blx	r2
   14164:	ldr	r5, [r5, #8]
   14168:	mov	r1, r0
   1416c:	cmp	r5, r7
   14170:	andsne	r0, r1, #3
   14174:	bne	14154 <__assert_fail@plt+0x24b4>
   14178:	mov	r0, #4
   1417c:	cmp	r1, #1
   14180:	beq	141c4 <__assert_fail@plt+0x2524>
   14184:	tst	r1, #12
   14188:	mov	r0, r1
   1418c:	popne	{r4, r5, r6, r7, fp, pc}
   14190:	ldr	r5, [r6]
   14194:	cmp	r5, #0
   14198:	beq	141c8 <__assert_fail@plt+0x2528>
   1419c:	ldr	r2, [r5]
   141a0:	ldr	r1, [r5, #4]
   141a4:	mov	r0, r4
   141a8:	blx	r2
   141ac:	ldr	r5, [r5, #8]
   141b0:	cmp	r5, #0
   141b4:	andsne	r1, r0, #1
   141b8:	bne	1419c <__assert_fail@plt+0x24fc>
   141bc:	cmp	r0, #1
   141c0:	moveq	r0, #2
   141c4:	pop	{r4, r5, r6, r7, fp, pc}
   141c8:	mov	r0, #2
   141cc:	pop	{r4, r5, r6, r7, fp, pc}
   141d0:	push	{r4, r5, r6, r7, fp, lr}
   141d4:	add	fp, sp, #16
   141d8:	movw	r5, #45696	; 0xb280
   141dc:	mov	r4, r0
   141e0:	movw	r0, #45688	; 0xb278
   141e4:	movt	r5, #3
   141e8:	movt	r0, #3
   141ec:	ldr	r6, [r5]
   141f0:	ldr	r7, [r0]
   141f4:	cmp	r7, r6
   141f8:	moveq	r0, #5
   141fc:	popeq	{r4, r5, r6, r7, fp, pc}
   14200:	ldr	r2, [r7]
   14204:	ldr	r1, [r7, #4]
   14208:	mov	r0, r4
   1420c:	blx	r2
   14210:	ldr	r7, [r7, #8]
   14214:	mov	r1, r0
   14218:	cmp	r7, r6
   1421c:	andsne	r0, r1, #5
   14220:	bne	14200 <__assert_fail@plt+0x2560>
   14224:	mov	r0, #4
   14228:	cmp	r1, #1
   1422c:	beq	14270 <__assert_fail@plt+0x25d0>
   14230:	tst	r1, #12
   14234:	mov	r0, r1
   14238:	popne	{r4, r5, r6, r7, fp, pc}
   1423c:	ldr	r5, [r5]
   14240:	cmp	r5, #0
   14244:	beq	14274 <__assert_fail@plt+0x25d4>
   14248:	ldr	r2, [r5]
   1424c:	ldr	r1, [r5, #4]
   14250:	mov	r0, r4
   14254:	blx	r2
   14258:	ldr	r5, [r5, #8]
   1425c:	cmp	r5, #0
   14260:	andsne	r1, r0, #1
   14264:	bne	14248 <__assert_fail@plt+0x25a8>
   14268:	cmp	r0, #1
   1426c:	moveq	r0, #2
   14270:	pop	{r4, r5, r6, r7, fp, pc}
   14274:	mov	r0, #2
   14278:	pop	{r4, r5, r6, r7, fp, pc}
   1427c:	push	{r4, r5, fp, lr}
   14280:	add	fp, sp, #8
   14284:	mov	r4, r0
   14288:	movw	r0, #45688	; 0xb278
   1428c:	movt	r0, #3
   14290:	ldr	r5, [r0]
   14294:	cmp	r5, #0
   14298:	moveq	r0, #3
   1429c:	popeq	{r4, r5, fp, pc}
   142a0:	ldr	r2, [r5]
   142a4:	ldr	r1, [r5, #4]
   142a8:	mov	r0, r4
   142ac:	blx	r2
   142b0:	ldr	r5, [r5, #8]
   142b4:	cmp	r5, #0
   142b8:	andsne	r1, r0, #3
   142bc:	bne	142a0 <__assert_fail@plt+0x2600>
   142c0:	pop	{r4, r5, fp, pc}
   142c4:	push	{fp, lr}
   142c8:	mov	fp, sp
   142cc:	movw	r1, #38817	; 0x97a1
   142d0:	mov	r4, r0
   142d4:	mov	r0, #0
   142d8:	mov	r2, #5
   142dc:	movt	r1, #2
   142e0:	bl	11934 <dcgettext@plt>
   142e4:	ldr	r3, [r4, #28]
   142e8:	mov	r2, r0
   142ec:	mov	r0, #1
   142f0:	mov	r1, #0
   142f4:	bl	119d0 <error@plt>
   142f8:	push	{r4, r5, r6, r7, fp, lr}
   142fc:	add	fp, sp, #16
   14300:	sub	sp, sp, #8
   14304:	mov	r4, r3
   14308:	mov	r6, r2
   1430c:	mov	r5, r1
   14310:	mov	r7, r0
   14314:	bl	11be0 <clearerr@plt>
   14318:	add	r0, sp, #4
   1431c:	mov	r1, #4
   14320:	mov	r2, #1
   14324:	mov	r3, r7
   14328:	bl	119ac <fread@plt>
   1432c:	cmp	r0, #1
   14330:	bne	143c0 <__assert_fail@plt+0x2720>
   14334:	ldr	r1, [r4]
   14338:	ldr	r0, [sp, #4]
   1433c:	rev	r7, r0
   14340:	cmp	r1, #2
   14344:	beq	143a4 <__assert_fail@plt+0x2704>
   14348:	cmp	r1, #0
   1434c:	bne	143b8 <__assert_fail@plt+0x2718>
   14350:	cmp	r0, r6
   14354:	ble	143ac <__assert_fail@plt+0x270c>
   14358:	cmp	r7, r6
   1435c:	bgt	143b8 <__assert_fail@plt+0x2718>
   14360:	movw	r1, #40253	; 0x9d3d
   14364:	mov	r0, #0
   14368:	mov	r2, #5
   1436c:	movt	r1, #2
   14370:	bl	11934 <dcgettext@plt>
   14374:	mov	r6, r0
   14378:	mov	r0, #0
   1437c:	mov	r1, #8
   14380:	mov	r2, r5
   14384:	bl	18898 <__assert_fail@plt+0x6bf8>
   14388:	mov	r3, r0
   1438c:	mov	r0, #0
   14390:	mov	r1, #0
   14394:	mov	r2, r6
   14398:	bl	119d0 <error@plt>
   1439c:	mov	r0, #2
   143a0:	str	r0, [r4]
   143a4:	mov	r0, r7
   143a8:	b	143b8 <__assert_fail@plt+0x2718>
   143ac:	cmp	r7, r6
   143b0:	movgt	r1, #1
   143b4:	strgt	r1, [r4]
   143b8:	sub	sp, fp, #16
   143bc:	pop	{r4, r5, r6, r7, fp, pc}
   143c0:	mov	r0, #0
   143c4:	mov	r1, #8
   143c8:	mov	r2, r5
   143cc:	bl	18898 <__assert_fail@plt+0x6bf8>
   143d0:	mov	r4, r0
   143d4:	mov	r0, r7
   143d8:	bl	11a84 <feof@plt>
   143dc:	cmp	r0, #0
   143e0:	bne	14414 <__assert_fail@plt+0x2774>
   143e4:	bl	11acc <__errno_location@plt>
   143e8:	ldr	r5, [r0]
   143ec:	movw	r1, #40224	; 0x9d20
   143f0:	mov	r0, #0
   143f4:	mov	r2, #5
   143f8:	movt	r1, #2
   143fc:	bl	11934 <dcgettext@plt>
   14400:	mov	r2, r0
   14404:	mov	r0, #1
   14408:	mov	r1, r5
   1440c:	mov	r3, r4
   14410:	bl	119d0 <error@plt>
   14414:	movw	r1, #40203	; 0x9d0b
   14418:	mov	r0, #0
   1441c:	mov	r2, #5
   14420:	movt	r1, #2
   14424:	bl	11934 <dcgettext@plt>
   14428:	mov	r2, r0
   1442c:	mov	r0, #1
   14430:	mov	r1, #0
   14434:	mov	r3, r4
   14438:	bl	119d0 <error@plt>
   1443c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14440:	add	fp, sp, #24
   14444:	sub	sp, sp, #16
   14448:	mov	r8, r0
   1444c:	movw	r0, #45584	; 0xb210
   14450:	movt	r0, #3
   14454:	ldr	r0, [r0]
   14458:	bl	1a0fc <__assert_fail@plt+0x845c>
   1445c:	movw	r0, #45588	; 0xb214
   14460:	movw	r1, #40347	; 0x9d9b
   14464:	mov	r2, #5
   14468:	mov	r9, #0
   1446c:	movt	r0, #3
   14470:	movt	r1, #2
   14474:	ldr	r6, [r0]
   14478:	movw	r0, #45484	; 0xb1ac
   1447c:	movt	r0, #3
   14480:	ldr	r5, [r0]
   14484:	mov	r0, #0
   14488:	bl	11934 <dcgettext@plt>
   1448c:	movw	r1, #40362	; 0x9daa
   14490:	mov	r7, r0
   14494:	mov	r0, #0
   14498:	mov	r2, #5
   1449c:	movt	r1, #2
   144a0:	bl	11934 <dcgettext@plt>
   144a4:	movw	r1, #40377	; 0x9db9
   144a8:	mov	r4, r0
   144ac:	mov	r0, #0
   144b0:	mov	r2, #5
   144b4:	movt	r1, #2
   144b8:	bl	11934 <dcgettext@plt>
   144bc:	movw	r2, #40333	; 0x9d8d
   144c0:	str	r0, [sp, #8]
   144c4:	mov	r0, r6
   144c8:	mov	r1, r8
   144cc:	mov	r3, r5
   144d0:	str	r7, [sp]
   144d4:	str	r4, [sp, #4]
   144d8:	str	r9, [sp, #12]
   144dc:	movt	r2, #2
   144e0:	bl	191d0 <__assert_fail@plt+0x7530>
   144e4:	sub	sp, fp, #24
   144e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   144ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144f0:	add	fp, sp, #28
   144f4:	sub	sp, sp, #12
   144f8:	sub	sp, sp, #8192	; 0x2000
   144fc:	ldr	r7, [fp, #8]
   14500:	mov	r9, r3
   14504:	mov	sl, r0
   14508:	cmp	r2, #0
   1450c:	beq	145ac <__assert_fail@plt+0x290c>
   14510:	add	r4, sp, #8
   14514:	mov	r8, r1
   14518:	str	r1, [sp]
   1451c:	mov	r1, #8192	; 0x2000
   14520:	mov	r2, r7
   14524:	mvn	r3, #0
   14528:	mov	r0, r4
   1452c:	bl	17430 <__assert_fail@plt+0x5790>
   14530:	mov	r5, r0
   14534:	cmp	r0, #8192	; 0x2000
   14538:	mov	r6, r4
   1453c:	bcc	14568 <__assert_fail@plt+0x28c8>
   14540:	add	r4, r5, #1
   14544:	mov	r0, r4
   14548:	bl	192c0 <__assert_fail@plt+0x7620>
   1454c:	mov	r1, r4
   14550:	mov	r2, r7
   14554:	mvn	r3, #0
   14558:	mov	r6, r0
   1455c:	str	r8, [sp]
   14560:	add	r4, sp, #8
   14564:	bl	17430 <__assert_fail@plt+0x5790>
   14568:	mov	r0, r6
   1456c:	mov	r1, r5
   14570:	bl	145c4 <__assert_fail@plt+0x2924>
   14574:	mov	r1, #0
   14578:	mov	r2, r6
   1457c:	strb	r1, [r6, r0]
   14580:	mov	r0, sl
   14584:	mov	r1, r9
   14588:	bl	11ab4 <fprintf@plt>
   1458c:	mov	r5, r0
   14590:	cmp	r6, r4
   14594:	beq	145a0 <__assert_fail@plt+0x2900>
   14598:	mov	r0, r6
   1459c:	bl	1a158 <__assert_fail@plt+0x84b8>
   145a0:	mov	r0, r5
   145a4:	sub	sp, fp, #28
   145a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145ac:	mov	r0, sl
   145b0:	mov	r1, r9
   145b4:	mov	r2, r7
   145b8:	sub	sp, fp, #28
   145bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145c0:	b	11ab4 <fprintf@plt>
   145c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145c8:	add	fp, sp, #28
   145cc:	sub	sp, sp, #20
   145d0:	mov	r5, r1
   145d4:	mov	r4, r0
   145d8:	add	sl, r0, r1
   145dc:	bl	119a0 <__ctype_get_mb_cur_max@plt>
   145e0:	cmp	r0, #2
   145e4:	bcs	14620 <__assert_fail@plt+0x2980>
   145e8:	cmp	r5, #1
   145ec:	blt	1489c <__assert_fail@plt+0x2bfc>
   145f0:	bl	11a6c <__ctype_b_loc@plt>
   145f4:	mov	r1, #63	; 0x3f
   145f8:	ldrb	r2, [r4]
   145fc:	ldr	r3, [r0]
   14600:	add	r2, r3, r2, lsl #1
   14604:	ldrb	r2, [r2, #1]
   14608:	tst	r2, #64	; 0x40
   1460c:	strbeq	r1, [r4]
   14610:	add	r4, r4, #1
   14614:	cmp	r4, sl
   14618:	bcc	145f8 <__assert_fail@plt+0x2958>
   1461c:	b	1489c <__assert_fail@plt+0x2bfc>
   14620:	cmp	r5, #1
   14624:	mov	r6, r4
   14628:	blt	14898 <__assert_fail@plt+0x2bf8>
   1462c:	mov	r3, #0
   14630:	add	r8, sp, #4
   14634:	add	r9, sp, #8
   14638:	mov	r6, r4
   1463c:	mov	r7, r4
   14640:	b	146f4 <__assert_fail@plt+0x2a54>
   14644:	str	r3, [sp, #12]
   14648:	str	r3, [sp, #8]
   1464c:	sub	r2, sl, r7
   14650:	mov	r0, r8
   14654:	mov	r1, r7
   14658:	mov	r3, r9
   1465c:	bl	1a254 <__assert_fail@plt+0x85b4>
   14660:	cmp	r0, #0
   14664:	beq	14680 <__assert_fail@plt+0x29e0>
   14668:	mov	r5, r0
   1466c:	cmn	r0, #2
   14670:	beq	146d8 <__assert_fail@plt+0x2a38>
   14674:	cmn	r5, #1
   14678:	bne	14684 <__assert_fail@plt+0x29e4>
   1467c:	b	146e0 <__assert_fail@plt+0x2a40>
   14680:	mov	r5, #1
   14684:	ldr	r0, [sp, #4]
   14688:	bl	11880 <wcwidth@plt>
   1468c:	cmp	r0, #0
   14690:	blt	146b8 <__assert_fail@plt+0x2a18>
   14694:	mov	r0, r5
   14698:	mov	r1, r6
   1469c:	mov	r2, r7
   146a0:	ldrb	r3, [r2], #1
   146a4:	subs	r0, r0, #1
   146a8:	strb	r3, [r1], #1
   146ac:	bne	146a0 <__assert_fail@plt+0x2a00>
   146b0:	add	r6, r6, r5
   146b4:	b	146c0 <__assert_fail@plt+0x2a20>
   146b8:	mov	r0, #63	; 0x3f
   146bc:	strb	r0, [r6], #1
   146c0:	mov	r0, r9
   146c4:	add	r7, r7, r5
   146c8:	bl	11910 <mbsinit@plt>
   146cc:	cmp	r0, #0
   146d0:	beq	1464c <__assert_fail@plt+0x29ac>
   146d4:	b	146ec <__assert_fail@plt+0x2a4c>
   146d8:	mov	r7, sl
   146dc:	b	146e4 <__assert_fail@plt+0x2a44>
   146e0:	add	r7, r7, #1
   146e4:	mov	r0, #63	; 0x3f
   146e8:	strb	r0, [r6], #1
   146ec:	mov	r3, #0
   146f0:	b	14890 <__assert_fail@plt+0x2bf0>
   146f4:	ldrb	r0, [r7]
   146f8:	sub	r1, r0, #32
   146fc:	cmp	r1, #94	; 0x5e
   14700:	bhi	14644 <__assert_fail@plt+0x29a4>
   14704:	add	r2, pc, #0
   14708:	ldr	pc, [r2, r1, lsl #2]
   1470c:	andeq	r4, r1, r8, lsl #17
   14710:	andeq	r4, r1, r8, lsl #17
   14714:	andeq	r4, r1, r8, lsl #17
   14718:	andeq	r4, r1, r8, lsl #17
   1471c:	andeq	r4, r1, r4, asr #12
   14720:	andeq	r4, r1, r8, lsl #17
   14724:	andeq	r4, r1, r8, lsl #17
   14728:	andeq	r4, r1, r8, lsl #17
   1472c:	andeq	r4, r1, r8, lsl #17
   14730:	andeq	r4, r1, r8, lsl #17
   14734:	andeq	r4, r1, r8, lsl #17
   14738:	andeq	r4, r1, r8, lsl #17
   1473c:	andeq	r4, r1, r8, lsl #17
   14740:	andeq	r4, r1, r8, lsl #17
   14744:	andeq	r4, r1, r8, lsl #17
   14748:	andeq	r4, r1, r8, lsl #17
   1474c:	andeq	r4, r1, r8, lsl #17
   14750:	andeq	r4, r1, r8, lsl #17
   14754:	andeq	r4, r1, r8, lsl #17
   14758:	andeq	r4, r1, r8, lsl #17
   1475c:	andeq	r4, r1, r8, lsl #17
   14760:	andeq	r4, r1, r8, lsl #17
   14764:	andeq	r4, r1, r8, lsl #17
   14768:	andeq	r4, r1, r8, lsl #17
   1476c:	andeq	r4, r1, r8, lsl #17
   14770:	andeq	r4, r1, r8, lsl #17
   14774:	andeq	r4, r1, r8, lsl #17
   14778:	andeq	r4, r1, r8, lsl #17
   1477c:	andeq	r4, r1, r8, lsl #17
   14780:	andeq	r4, r1, r8, lsl #17
   14784:	andeq	r4, r1, r8, lsl #17
   14788:	andeq	r4, r1, r8, lsl #17
   1478c:	andeq	r4, r1, r4, asr #12
   14790:	andeq	r4, r1, r8, lsl #17
   14794:	andeq	r4, r1, r8, lsl #17
   14798:	andeq	r4, r1, r8, lsl #17
   1479c:	andeq	r4, r1, r8, lsl #17
   147a0:	andeq	r4, r1, r8, lsl #17
   147a4:	andeq	r4, r1, r8, lsl #17
   147a8:	andeq	r4, r1, r8, lsl #17
   147ac:	andeq	r4, r1, r8, lsl #17
   147b0:	andeq	r4, r1, r8, lsl #17
   147b4:	andeq	r4, r1, r8, lsl #17
   147b8:	andeq	r4, r1, r8, lsl #17
   147bc:	andeq	r4, r1, r8, lsl #17
   147c0:	andeq	r4, r1, r8, lsl #17
   147c4:	andeq	r4, r1, r8, lsl #17
   147c8:	andeq	r4, r1, r8, lsl #17
   147cc:	andeq	r4, r1, r8, lsl #17
   147d0:	andeq	r4, r1, r8, lsl #17
   147d4:	andeq	r4, r1, r8, lsl #17
   147d8:	andeq	r4, r1, r8, lsl #17
   147dc:	andeq	r4, r1, r8, lsl #17
   147e0:	andeq	r4, r1, r8, lsl #17
   147e4:	andeq	r4, r1, r8, lsl #17
   147e8:	andeq	r4, r1, r8, lsl #17
   147ec:	andeq	r4, r1, r8, lsl #17
   147f0:	andeq	r4, r1, r8, lsl #17
   147f4:	andeq	r4, r1, r8, lsl #17
   147f8:	andeq	r4, r1, r8, lsl #17
   147fc:	andeq	r4, r1, r8, lsl #17
   14800:	andeq	r4, r1, r8, lsl #17
   14804:	andeq	r4, r1, r8, lsl #17
   14808:	andeq	r4, r1, r8, lsl #17
   1480c:	andeq	r4, r1, r4, asr #12
   14810:	andeq	r4, r1, r8, lsl #17
   14814:	andeq	r4, r1, r8, lsl #17
   14818:	andeq	r4, r1, r8, lsl #17
   1481c:	andeq	r4, r1, r8, lsl #17
   14820:	andeq	r4, r1, r8, lsl #17
   14824:	andeq	r4, r1, r8, lsl #17
   14828:	andeq	r4, r1, r8, lsl #17
   1482c:	andeq	r4, r1, r8, lsl #17
   14830:	andeq	r4, r1, r8, lsl #17
   14834:	andeq	r4, r1, r8, lsl #17
   14838:	andeq	r4, r1, r8, lsl #17
   1483c:	andeq	r4, r1, r8, lsl #17
   14840:	andeq	r4, r1, r8, lsl #17
   14844:	andeq	r4, r1, r8, lsl #17
   14848:	andeq	r4, r1, r8, lsl #17
   1484c:	andeq	r4, r1, r8, lsl #17
   14850:	andeq	r4, r1, r8, lsl #17
   14854:	andeq	r4, r1, r8, lsl #17
   14858:	andeq	r4, r1, r8, lsl #17
   1485c:	andeq	r4, r1, r8, lsl #17
   14860:	andeq	r4, r1, r8, lsl #17
   14864:	andeq	r4, r1, r8, lsl #17
   14868:	andeq	r4, r1, r8, lsl #17
   1486c:	andeq	r4, r1, r8, lsl #17
   14870:	andeq	r4, r1, r8, lsl #17
   14874:	andeq	r4, r1, r8, lsl #17
   14878:	andeq	r4, r1, r8, lsl #17
   1487c:	andeq	r4, r1, r8, lsl #17
   14880:	andeq	r4, r1, r8, lsl #17
   14884:	andeq	r4, r1, r8, lsl #17
   14888:	strb	r0, [r6], #1
   1488c:	add	r7, r7, #1
   14890:	cmp	r7, sl
   14894:	bcc	146f4 <__assert_fail@plt+0x2a54>
   14898:	sub	r5, r6, r4
   1489c:	mov	r0, r5
   148a0:	sub	sp, fp, #28
   148a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148ac:	add	fp, sp, #28
   148b0:	sub	sp, sp, #12
   148b4:	movw	sl, #40392	; 0x9dc8
   148b8:	mov	r8, r0
   148bc:	mov	r6, #0
   148c0:	mov	r7, #0
   148c4:	movt	sl, #2
   148c8:	add	r4, sl, #8
   148cc:	ldr	r5, [r4, #-8]
   148d0:	mov	r1, r8
   148d4:	mov	r0, r5
   148d8:	bl	11850 <strcmp@plt>
   148dc:	cmp	r0, #0
   148e0:	beq	149a4 <__assert_fail@plt+0x2d04>
   148e4:	mov	r0, r5
   148e8:	bl	18c78 <__assert_fail@plt+0x6fd8>
   148ec:	bl	11a9c <strlen@plt>
   148f0:	add	r0, r7, r0
   148f4:	add	r6, r6, #1
   148f8:	add	r4, r4, #12
   148fc:	add	r7, r0, #2
   14900:	cmp	r6, #13
   14904:	bcc	148cc <__assert_fail@plt+0x2c2c>
   14908:	add	r0, r7, #1
   1490c:	str	r8, [sp, #8]
   14910:	bl	192c0 <__assert_fail@plt+0x7620>
   14914:	mov	r6, r0
   14918:	mov	r4, #0
   1491c:	movw	r8, #8236	; 0x202c
   14920:	mov	r9, #0
   14924:	str	r0, [sp, #4]
   14928:	ldr	r0, [sl, -r9]
   1492c:	cmp	r9, #0
   14930:	strhne	r8, [r6]
   14934:	strbne	r4, [r6, #2]!
   14938:	bl	18c78 <__assert_fail@plt+0x6fd8>
   1493c:	mov	r7, r0
   14940:	bl	11a9c <strlen@plt>
   14944:	mov	r5, r0
   14948:	add	r2, r0, #1
   1494c:	mov	r0, r6
   14950:	mov	r1, r7
   14954:	bl	118e0 <memcpy@plt>
   14958:	sub	r9, r9, #12
   1495c:	add	r6, r6, r5
   14960:	cmn	r9, #156	; 0x9c
   14964:	bne	14928 <__assert_fail@plt+0x2c88>
   14968:	movw	r1, #40551	; 0x9e67
   1496c:	mov	r0, #0
   14970:	mov	r2, #5
   14974:	movt	r1, #2
   14978:	bl	11934 <dcgettext@plt>
   1497c:	mov	r5, r0
   14980:	ldr	r0, [sp, #8]
   14984:	bl	18c78 <__assert_fail@plt+0x6fd8>
   14988:	mov	r3, r0
   1498c:	ldr	r0, [sp, #4]
   14990:	mov	r1, #0
   14994:	mov	r2, r5
   14998:	str	r0, [sp]
   1499c:	mov	r0, #1
   149a0:	bl	119d0 <error@plt>
   149a4:	ldr	r0, [r4]
   149a8:	sub	sp, fp, #28
   149ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149b0:	mov	r1, r0
   149b4:	mov	r0, #0
   149b8:	cmp	r1, #12
   149bc:	addls	r0, r1, r1, lsl #1
   149c0:	movwls	r1, #40392	; 0x9dc8
   149c4:	movtls	r1, #2
   149c8:	ldrls	r0, [r1, r0, lsl #2]
   149cc:	bx	lr
   149d0:	mov	r1, r0
   149d4:	mvn	r0, #0
   149d8:	cmp	r1, #12
   149dc:	bxhi	lr
   149e0:	add	r0, r1, r1, lsl #1
   149e4:	movw	r1, #40392	; 0x9dc8
   149e8:	movt	r1, #2
   149ec:	add	r0, r1, r0, lsl #2
   149f0:	ldr	r0, [r0, #8]
   149f4:	bx	lr
   149f8:	mov	r1, r0
   149fc:	mov	r0, #0
   14a00:	cmp	r1, #12
   14a04:	bxhi	lr
   14a08:	add	r0, r1, r1, lsl #1
   14a0c:	movw	r1, #40392	; 0x9dc8
   14a10:	movt	r1, #2
   14a14:	add	r0, r1, r0, lsl #2
   14a18:	ldr	r0, [r0, #4]
   14a1c:	bx	lr
   14a20:	push	{r4, sl, fp, lr}
   14a24:	add	fp, sp, #8
   14a28:	mov	lr, r0
   14a2c:	mvn	r0, #0
   14a30:	cmp	lr, #12
   14a34:	bhi	14a88 <__assert_fail@plt+0x2de8>
   14a38:	cmp	lr, #0
   14a3c:	popeq	{r4, sl, fp, pc}
   14a40:	movw	r3, #40392	; 0x9dc8
   14a44:	add	r2, lr, lr, lsl #1
   14a48:	movt	r3, #2
   14a4c:	add	r2, r3, r2, lsl #2
   14a50:	ldr	ip, [r2, #8]
   14a54:	add	r2, r3, #4
   14a58:	mov	r3, #0
   14a5c:	ldr	r4, [r2]
   14a60:	tst	r4, r1
   14a64:	beq	14a78 <__assert_fail@plt+0x2dd8>
   14a68:	ldr	r4, [r2, #4]
   14a6c:	cmp	ip, r4
   14a70:	moveq	r0, r3
   14a74:	popeq	{r4, sl, fp, pc}
   14a78:	add	r3, r3, #1
   14a7c:	add	r2, r2, #12
   14a80:	cmp	r3, lr
   14a84:	bcc	14a5c <__assert_fail@plt+0x2dbc>
   14a88:	pop	{r4, sl, fp, pc}
   14a8c:	push	{r4, r5, fp, lr}
   14a90:	add	fp, sp, #8
   14a94:	ldr	r5, [fp, #8]
   14a98:	cmp	r2, #0
   14a9c:	beq	14ab4 <__assert_fail@plt+0x2e14>
   14aa0:	mov	r2, #0
   14aa4:	str	r2, [r3]
   14aa8:	str	r2, [r5]
   14aac:	ldr	r2, [r3]
   14ab0:	b	14adc <__assert_fail@plt+0x2e3c>
   14ab4:	ldr	r2, [r5]
   14ab8:	ldr	r4, [r3]
   14abc:	add	r2, r4, r2
   14ac0:	str	r2, [r3]
   14ac4:	ldrb	r4, [r0, r2]
   14ac8:	cmp	r4, #0
   14acc:	moveq	r0, #0
   14ad0:	popeq	{r4, r5, fp, pc}
   14ad4:	add	r2, r2, #1
   14ad8:	str	r2, [r3]
   14adc:	add	r4, r0, r2
   14ae0:	ldrb	r0, [r1]
   14ae4:	cmp	r0, #0
   14ae8:	beq	14b04 <__assert_fail@plt+0x2e64>
   14aec:	mov	r0, r4
   14af0:	bl	11c04 <strpbrk@plt>
   14af4:	cmp	r0, #0
   14af8:	beq	14b04 <__assert_fail@plt+0x2e64>
   14afc:	sub	r0, r0, r4
   14b00:	b	14b0c <__assert_fail@plt+0x2e6c>
   14b04:	mov	r0, r4
   14b08:	bl	11a9c <strlen@plt>
   14b0c:	str	r0, [r5]
   14b10:	mov	r0, #1
   14b14:	pop	{r4, r5, fp, pc}
   14b18:	push	{r4, r5, fp, lr}
   14b1c:	add	fp, sp, #8
   14b20:	sub	sp, sp, #16
   14b24:	mov	r4, r1
   14b28:	movw	r1, #40712	; 0x9f08
   14b2c:	mov	r5, r0
   14b30:	mov	r0, #0
   14b34:	mov	r2, #5
   14b38:	movt	r1, #2
   14b3c:	bl	11934 <dcgettext@plt>
   14b40:	movw	r2, #40957	; 0x9ffd
   14b44:	movw	r3, #40333	; 0x9d8d
   14b48:	mov	r1, r0
   14b4c:	movw	r0, #41004	; 0xa02c
   14b50:	movt	r2, #2
   14b54:	movt	r0, #2
   14b58:	movt	r3, #2
   14b5c:	str	r2, [sp, #4]
   14b60:	movw	r2, #40918	; 0x9fd6
   14b64:	str	r3, [sp]
   14b68:	str	r0, [sp, #8]
   14b6c:	mov	r0, r5
   14b70:	mov	r3, r4
   14b74:	movt	r2, #2
   14b78:	bl	11ab4 <fprintf@plt>
   14b7c:	sub	sp, fp, #8
   14b80:	pop	{r4, r5, fp, pc}
   14b84:	sub	r0, r0, #1
   14b88:	ldrb	r3, [r0, #1]!
   14b8c:	cmp	r3, #47	; 0x2f
   14b90:	beq	14b88 <__assert_fail@plt+0x2ee8>
   14b94:	mov	r2, #0
   14b98:	mov	r1, r0
   14b9c:	uxtb	r3, r3
   14ba0:	cmp	r3, #47	; 0x2f
   14ba4:	beq	14bc0 <__assert_fail@plt+0x2f20>
   14ba8:	cmp	r3, #0
   14bac:	bxeq	lr
   14bb0:	tst	r2, #1
   14bb4:	mov	r2, #0
   14bb8:	movne	r0, r1
   14bbc:	b	14bc4 <__assert_fail@plt+0x2f24>
   14bc0:	mov	r2, #1
   14bc4:	ldrb	r3, [r1, #1]!
   14bc8:	b	14b9c <__assert_fail@plt+0x2efc>
   14bcc:	push	{r4, sl, fp, lr}
   14bd0:	add	fp, sp, #8
   14bd4:	mov	r4, r0
   14bd8:	bl	11a9c <strlen@plt>
   14bdc:	mov	r1, r0
   14be0:	sub	r2, r4, #1
   14be4:	mov	r0, r1
   14be8:	cmp	r1, #2
   14bec:	popcc	{r4, sl, fp, pc}
   14bf0:	ldrb	r3, [r2, r0]
   14bf4:	sub	r1, r0, #1
   14bf8:	cmp	r3, #47	; 0x2f
   14bfc:	beq	14be4 <__assert_fail@plt+0x2f44>
   14c00:	pop	{r4, sl, fp, pc}
   14c04:	movw	r1, #45708	; 0xb28c
   14c08:	movt	r1, #3
   14c0c:	str	r0, [r1]
   14c10:	bx	lr
   14c14:	movw	r1, #45712	; 0xb290
   14c18:	movt	r1, #3
   14c1c:	strb	r0, [r1]
   14c20:	bx	lr
   14c24:	push	{r4, r5, r6, sl, fp, lr}
   14c28:	add	fp, sp, #16
   14c2c:	sub	sp, sp, #8
   14c30:	movw	r0, #45588	; 0xb214
   14c34:	movt	r0, #3
   14c38:	ldr	r0, [r0]
   14c3c:	bl	284f4 <__assert_fail@plt+0x16854>
   14c40:	cmp	r0, #0
   14c44:	beq	14c6c <__assert_fail@plt+0x2fcc>
   14c48:	movw	r0, #45712	; 0xb290
   14c4c:	movt	r0, #3
   14c50:	ldrb	r0, [r0]
   14c54:	cmp	r0, #0
   14c58:	beq	14c8c <__assert_fail@plt+0x2fec>
   14c5c:	bl	11acc <__errno_location@plt>
   14c60:	ldr	r0, [r0]
   14c64:	cmp	r0, #32
   14c68:	bne	14c8c <__assert_fail@plt+0x2fec>
   14c6c:	movw	r0, #45584	; 0xb210
   14c70:	movt	r0, #3
   14c74:	ldr	r0, [r0]
   14c78:	bl	284f4 <__assert_fail@plt+0x16854>
   14c7c:	cmp	r0, #0
   14c80:	subeq	sp, fp, #16
   14c84:	popeq	{r4, r5, r6, sl, fp, pc}
   14c88:	b	14cfc <__assert_fail@plt+0x305c>
   14c8c:	movw	r1, #41026	; 0xa042
   14c90:	mov	r0, #0
   14c94:	mov	r2, #5
   14c98:	movt	r1, #2
   14c9c:	bl	11934 <dcgettext@plt>
   14ca0:	mov	r4, r0
   14ca4:	movw	r0, #45708	; 0xb28c
   14ca8:	movt	r0, #3
   14cac:	ldr	r6, [r0]
   14cb0:	bl	11acc <__errno_location@plt>
   14cb4:	ldr	r5, [r0]
   14cb8:	cmp	r6, #0
   14cbc:	bne	14cd8 <__assert_fail@plt+0x3038>
   14cc0:	movw	r2, #43212	; 0xa8cc
   14cc4:	mov	r0, #0
   14cc8:	mov	r1, r5
   14ccc:	mov	r3, r4
   14cd0:	movt	r2, #2
   14cd4:	b	14cf8 <__assert_fail@plt+0x3058>
   14cd8:	mov	r0, r6
   14cdc:	bl	18a38 <__assert_fail@plt+0x6d98>
   14ce0:	movw	r2, #41038	; 0xa04e
   14ce4:	mov	r3, r0
   14ce8:	str	r4, [sp]
   14cec:	mov	r0, #0
   14cf0:	mov	r1, r5
   14cf4:	movt	r2, #2
   14cf8:	bl	119d0 <error@plt>
   14cfc:	movw	r0, #45488	; 0xb1b0
   14d00:	movt	r0, #3
   14d04:	ldr	r0, [r0]
   14d08:	bl	118d4 <_exit@plt>
   14d0c:	sub	sp, sp, #8
   14d10:	push	{fp, lr}
   14d14:	mov	fp, sp
   14d18:	sub	sp, sp, #8
   14d1c:	str	r2, [fp, #8]
   14d20:	mov	r2, #0
   14d24:	tst	r1, #64	; 0x40
   14d28:	str	r3, [fp, #12]
   14d2c:	addne	r2, fp, #8
   14d30:	orrne	r2, r2, #4
   14d34:	strne	r2, [sp, #4]
   14d38:	ldrne	r2, [fp, #8]
   14d3c:	bl	119e8 <open64@plt>
   14d40:	bl	18de0 <__assert_fail@plt+0x7140>
   14d44:	mov	sp, fp
   14d48:	pop	{fp, lr}
   14d4c:	add	sp, sp, #8
   14d50:	bx	lr
   14d54:	andeq	r0, r0, r0
   14d58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d5c:	add	fp, sp, #28
   14d60:	sub	sp, sp, #4
   14d64:	vpush	{d8-d9}
   14d68:	sub	sp, sp, #96	; 0x60
   14d6c:	mov	r7, r3
   14d70:	mov	r6, r2
   14d74:	mov	r9, r1
   14d78:	str	r0, [sp, #36]	; 0x24
   14d7c:	bl	11bd4 <localeconv@plt>
   14d80:	ldr	r5, [r0]
   14d84:	mov	r4, r0
   14d88:	mov	r0, r5
   14d8c:	bl	11a9c <strlen@plt>
   14d90:	movw	r2, #36989	; 0x907d
   14d94:	sub	r1, r0, #1
   14d98:	cmp	r1, #16
   14d9c:	movt	r2, #2
   14da0:	movcc	r2, r5
   14da4:	ldr	r5, [r4, #4]
   14da8:	ldr	r4, [r4, #8]
   14dac:	movcs	r0, #1
   14db0:	str	r0, [sp, #8]
   14db4:	str	r2, [sp, #4]
   14db8:	mov	r0, r5
   14dbc:	bl	11a9c <strlen@plt>
   14dc0:	movw	r3, #39775	; 0x9b5f
   14dc4:	cmp	r0, #17
   14dc8:	movw	r0, #647	; 0x287
   14dcc:	ldr	r2, [fp, #16]
   14dd0:	ldr	sl, [fp, #8]
   14dd4:	ldr	r8, [fp, #12]
   14dd8:	str	r6, [sp, #20]
   14ddc:	str	r7, [sp, #28]
   14de0:	str	r4, [sp, #12]
   14de4:	movt	r3, #2
   14de8:	add	r1, r6, r0
   14dec:	movcc	r3, r5
   14df0:	ands	r0, r7, #32
   14df4:	ldr	r5, [fp, #20]
   14df8:	str	r1, [sp, #24]
   14dfc:	str	r0, [sp, #16]
   14e00:	mov	r0, #1000	; 0x3e8
   14e04:	str	r3, [sp, #44]	; 0x2c
   14e08:	movwne	r0, #1024	; 0x400
   14e0c:	str	r0, [sp, #32]
   14e10:	and	r0, r7, #3
   14e14:	str	r0, [sp, #40]	; 0x28
   14e18:	subs	r0, sl, r2
   14e1c:	sbcs	r0, r8, r5
   14e20:	bcs	14f14 <__assert_fail@plt+0x3274>
   14e24:	orrs	r0, sl, r8
   14e28:	mov	r4, r9
   14e2c:	beq	14ffc <__assert_fail@plt+0x335c>
   14e30:	ldr	r5, [fp, #20]
   14e34:	mov	r0, r2
   14e38:	mov	r2, sl
   14e3c:	mov	r3, r8
   14e40:	mov	r1, r5
   14e44:	bl	28c6c <__assert_fail@plt+0x16fcc>
   14e48:	ldr	r2, [fp, #16]
   14e4c:	mov	r6, r0
   14e50:	mov	r3, r1
   14e54:	umull	r0, r1, r0, sl
   14e58:	mla	r1, r6, r8, r1
   14e5c:	mla	r1, r3, sl, r1
   14e60:	subs	r0, r2, r0
   14e64:	sbc	r1, r5, r1
   14e68:	orrs	r0, r0, r1
   14e6c:	bne	14ffc <__assert_fail@plt+0x335c>
   14e70:	ldr	r5, [sp, #36]	; 0x24
   14e74:	mov	r1, r4
   14e78:	mov	r2, r6
   14e7c:	mov	r8, r3
   14e80:	mov	r0, r5
   14e84:	bl	28c6c <__assert_fail@plt+0x16fcc>
   14e88:	mov	r7, r0
   14e8c:	mov	r9, r1
   14e90:	umull	r0, r1, r0, r6
   14e94:	mov	r2, #10
   14e98:	mov	r3, r8
   14e9c:	mla	r1, r7, r8, r1
   14ea0:	subs	r0, r5, r0
   14ea4:	mla	r1, r9, r6, r1
   14ea8:	umull	sl, r0, r0, r2
   14eac:	mov	r2, r6
   14eb0:	sbc	r1, r4, r1
   14eb4:	add	r1, r1, r1, lsl #2
   14eb8:	add	r5, r0, r1, lsl #1
   14ebc:	mov	r0, sl
   14ec0:	mov	r1, r5
   14ec4:	bl	28c6c <__assert_fail@plt+0x16fcc>
   14ec8:	mov	r4, r0
   14ecc:	umull	r0, r2, r0, r6
   14ed0:	mla	r2, r4, r8, r2
   14ed4:	subs	r0, sl, r0
   14ed8:	mla	r1, r1, r6, r2
   14edc:	mov	r2, #2
   14ee0:	sbc	r1, r5, r1
   14ee4:	subs	r3, r6, r0, lsl #1
   14ee8:	lsl	r1, r1, #1
   14eec:	orr	r1, r1, r0, lsr #31
   14ef0:	sbcs	r3, r8, r1
   14ef4:	orr	r5, r1, r0, lsl #1
   14ef8:	movwcc	r2, #3
   14efc:	cmp	r5, #0
   14f00:	movwne	r5, #1
   14f04:	rsbs	r0, r6, r0, lsl #1
   14f08:	sbcs	r0, r1, r8
   14f0c:	movcs	r5, r2
   14f10:	b	14f8c <__assert_fail@plt+0x32ec>
   14f14:	mov	r0, sl
   14f18:	mov	r1, r8
   14f1c:	mov	r3, r5
   14f20:	bl	28c6c <__assert_fail@plt+0x16fcc>
   14f24:	ldr	r2, [fp, #16]
   14f28:	mov	r6, r0
   14f2c:	mov	r3, r1
   14f30:	mov	r4, r9
   14f34:	umull	r0, r1, r0, r2
   14f38:	mla	r1, r6, r5, r1
   14f3c:	subs	r0, sl, r0
   14f40:	mla	r1, r3, r2, r1
   14f44:	sbc	r1, r8, r1
   14f48:	orrs	r0, r0, r1
   14f4c:	bne	14ffc <__assert_fail@plt+0x335c>
   14f50:	ldr	r5, [sp, #36]	; 0x24
   14f54:	mov	r2, r6
   14f58:	umull	r7, r0, r6, r5
   14f5c:	mla	r0, r6, r4, r0
   14f60:	mla	r9, r3, r5, r0
   14f64:	mov	r0, r7
   14f68:	mov	r1, r9
   14f6c:	bl	28c6c <__assert_fail@plt+0x16fcc>
   14f70:	ldr	r2, [fp, #16]
   14f74:	eor	r1, r1, r4
   14f78:	eor	r0, r0, r5
   14f7c:	orrs	r0, r0, r1
   14f80:	bne	14ffc <__assert_fail@plt+0x335c>
   14f84:	mov	r5, #0
   14f88:	mov	r4, #0
   14f8c:	ldr	r0, [sp, #28]
   14f90:	ldr	r2, [sp, #32]
   14f94:	mvn	r6, #0
   14f98:	ands	r8, r0, #16
   14f9c:	beq	14fb0 <__assert_fail@plt+0x3310>
   14fa0:	subs	r0, r7, r2
   14fa4:	mov	r6, #0
   14fa8:	sbcs	r0, r9, #0
   14fac:	bcs	154dc <__assert_fail@plt+0x383c>
   14fb0:	ldr	r0, [sp, #24]
   14fb4:	mov	sl, r7
   14fb8:	str	r0, [sp, #36]	; 0x24
   14fbc:	ldr	r0, [sp, #40]	; 0x28
   14fc0:	cmp	r0, #0
   14fc4:	beq	152a0 <__assert_fail@plt+0x3600>
   14fc8:	cmp	r0, #1
   14fcc:	bne	1530c <__assert_fail@plt+0x366c>
   14fd0:	rsbs	r1, r5, #0
   14fd4:	mov	r0, #0
   14fd8:	and	r3, sl, #1
   14fdc:	ldr	r5, [sp, #36]	; 0x24
   14fe0:	sbc	r0, r0, #0
   14fe4:	eor	r1, r3, r1
   14fe8:	orrs	r0, r1, r0
   14fec:	addne	r4, r4, #1
   14ff0:	cmp	r4, #5
   14ff4:	bgt	152b0 <__assert_fail@plt+0x3610>
   14ff8:	b	15304 <__assert_fail@plt+0x3664>
   14ffc:	ldr	r9, [fp, #20]
   15000:	mov	r0, r2
   15004:	mov	r1, r9
   15008:	bl	28bf8 <__assert_fail@plt+0x16f58>
   1500c:	vmov	d8, r0, r1
   15010:	ldr	r0, [sp, #36]	; 0x24
   15014:	mov	r1, r4
   15018:	bl	28bf8 <__assert_fail@plt+0x16f58>
   1501c:	mov	r6, r0
   15020:	mov	r7, r1
   15024:	mov	r0, sl
   15028:	mov	r1, r8
   1502c:	bl	28bf8 <__assert_fail@plt+0x16f58>
   15030:	vmov	d17, r6, r7
   15034:	ldr	r7, [sp, #28]
   15038:	vmov	d16, r0, r1
   1503c:	vdiv.f64	d16, d16, d8
   15040:	vmul.f64	d8, d16, d17
   15044:	tst	r7, #16
   15048:	bne	150bc <__assert_fail@plt+0x341c>
   1504c:	ldr	r0, [sp, #40]	; 0x28
   15050:	ldr	sl, [sp, #20]
   15054:	cmp	r0, #1
   15058:	beq	1525c <__assert_fail@plt+0x35bc>
   1505c:	vldr	d16, [pc, #780]	; 15370 <__assert_fail@plt+0x36d0>
   15060:	ldr	r8, [sp, #24]
   15064:	vcmpe.f64	d8, d16
   15068:	vmrs	APSR_nzcv, fpscr
   1506c:	bpl	15260 <__assert_fail@plt+0x35c0>
   15070:	mov	r6, r0
   15074:	vmov	r0, r1, d8
   15078:	bl	28cb8 <__assert_fail@plt+0x17018>
   1507c:	mov	r4, r0
   15080:	mov	r5, r1
   15084:	bl	28bf8 <__assert_fail@plt+0x16f58>
   15088:	vmov	d16, r0, r1
   1508c:	clz	r0, r6
   15090:	mov	r2, #0
   15094:	vcmp.f64	d8, d16
   15098:	lsr	r0, r0, #5
   1509c:	vmrs	APSR_nzcv, fpscr
   150a0:	movwne	r2, #1
   150a4:	and	r0, r0, r2
   150a8:	adds	r0, r0, r4
   150ac:	adc	r1, r5, #0
   150b0:	bl	28bf8 <__assert_fail@plt+0x16f58>
   150b4:	vmov	d8, r0, r1
   150b8:	b	15260 <__assert_fail@plt+0x35c0>
   150bc:	ldr	r0, [sp, #32]
   150c0:	vmov.f64	d16, #112	; 0x3f800000  1.0
   150c4:	mov	r6, #0
   150c8:	vmov	s0, r0
   150cc:	vcvt.f64.u32	d17, s0
   150d0:	ldr	sl, [sp, #20]
   150d4:	add	r6, r6, #1
   150d8:	vmul.f64	d16, d16, d17
   150dc:	cmp	r6, #7
   150e0:	vmulls.f64	d18, d16, d17
   150e4:	vcmpels.f64	d18, d8
   150e8:	vmrsls	APSR_nzcv, fpscr
   150ec:	bls	150d4 <__assert_fail@plt+0x3434>
   150f0:	ldr	r0, [sp, #40]	; 0x28
   150f4:	ldr	r8, [sp, #24]
   150f8:	ldr	r5, [sp, #8]
   150fc:	vdiv.f64	d8, d8, d16
   15100:	vmov.f64	d16, d8
   15104:	cmp	r0, #1
   15108:	beq	1516c <__assert_fail@plt+0x34cc>
   1510c:	vldr	d16, [pc, #604]	; 15370 <__assert_fail@plt+0x36d0>
   15110:	vcmpe.f64	d8, d16
   15114:	vmov.f64	d16, d8
   15118:	vmrs	APSR_nzcv, fpscr
   1511c:	bpl	1516c <__assert_fail@plt+0x34cc>
   15120:	vmov	r0, r1, d8
   15124:	bl	28cb8 <__assert_fail@plt+0x17018>
   15128:	mov	r4, r0
   1512c:	mov	r5, r1
   15130:	bl	28bf8 <__assert_fail@plt+0x16f58>
   15134:	vmov	d16, r0, r1
   15138:	ldr	r0, [sp, #40]	; 0x28
   1513c:	mov	r2, #0
   15140:	vcmp.f64	d8, d16
   15144:	vmrs	APSR_nzcv, fpscr
   15148:	movwne	r2, #1
   1514c:	clz	r0, r0
   15150:	lsr	r0, r0, #5
   15154:	and	r0, r0, r2
   15158:	adds	r0, r0, r4
   1515c:	adc	r1, r5, #0
   15160:	ldr	r5, [sp, #8]
   15164:	bl	28bf8 <__assert_fail@plt+0x16f58>
   15168:	vmov	d16, r0, r1
   1516c:	movw	r1, #41051	; 0xa05b
   15170:	vmov	r2, r3, d16
   15174:	mov	r0, sl
   15178:	movt	r1, #2
   1517c:	bl	11bec <sprintf@plt>
   15180:	ldr	r1, [sp, #16]
   15184:	mov	r0, #3
   15188:	cmp	r1, #0
   1518c:	movwne	r0, #2
   15190:	add	r4, r0, r5
   15194:	mov	r0, sl
   15198:	bl	11a9c <strlen@plt>
   1519c:	cmp	r4, r0
   151a0:	bcc	151c4 <__assert_fail@plt+0x3524>
   151a4:	mov	r2, r0
   151a8:	add	r5, r5, #1
   151ac:	tst	r7, #8
   151b0:	beq	15288 <__assert_fail@plt+0x35e8>
   151b4:	add	r0, sl, r2
   151b8:	ldrb	r0, [r0, #-1]
   151bc:	cmp	r0, #48	; 0x30
   151c0:	bne	15288 <__assert_fail@plt+0x35e8>
   151c4:	ldr	r0, [sp, #40]	; 0x28
   151c8:	vmov.f64	d9, #36	; 0x41200000  10.0
   151cc:	vmul.f64	d8, d8, d9
   151d0:	cmp	r0, #1
   151d4:	beq	15230 <__assert_fail@plt+0x3590>
   151d8:	vldr	d16, [pc, #400]	; 15370 <__assert_fail@plt+0x36d0>
   151dc:	vcmpe.f64	d8, d16
   151e0:	vmrs	APSR_nzcv, fpscr
   151e4:	bpl	15230 <__assert_fail@plt+0x3590>
   151e8:	vmov	r0, r1, d8
   151ec:	bl	28cb8 <__assert_fail@plt+0x17018>
   151f0:	mov	r4, r0
   151f4:	mov	r5, r1
   151f8:	bl	28bf8 <__assert_fail@plt+0x16f58>
   151fc:	vmov	d16, r0, r1
   15200:	ldr	r0, [sp, #40]	; 0x28
   15204:	mov	r2, #0
   15208:	vcmp.f64	d8, d16
   1520c:	vmrs	APSR_nzcv, fpscr
   15210:	movwne	r2, #1
   15214:	clz	r0, r0
   15218:	lsr	r0, r0, #5
   1521c:	and	r0, r0, r2
   15220:	adds	r0, r0, r4
   15224:	adc	r1, r5, #0
   15228:	bl	28bf8 <__assert_fail@plt+0x16f58>
   1522c:	vmov	d8, r0, r1
   15230:	movw	r1, #41045	; 0xa055
   15234:	vdiv.f64	d16, d8, d9
   15238:	mov	r0, sl
   1523c:	vmov	r2, r3, d16
   15240:	movt	r1, #2
   15244:	bl	11bec <sprintf@plt>
   15248:	mov	r0, sl
   1524c:	bl	11a9c <strlen@plt>
   15250:	mov	r2, r0
   15254:	mov	r5, #0
   15258:	b	15288 <__assert_fail@plt+0x35e8>
   1525c:	ldr	r8, [sp, #24]
   15260:	movw	r1, #41045	; 0xa055
   15264:	vmov	r2, r3, d8
   15268:	mov	r0, sl
   1526c:	movt	r1, #2
   15270:	bl	11bec <sprintf@plt>
   15274:	mov	r0, sl
   15278:	bl	11a9c <strlen@plt>
   1527c:	mov	r2, r0
   15280:	mov	r5, #0
   15284:	mvn	r6, #0
   15288:	sub	r4, r8, r2
   1528c:	mov	r1, sl
   15290:	mov	r0, r4
   15294:	bl	11898 <memmove@plt>
   15298:	sub	r5, r8, r5
   1529c:	b	1535c <__assert_fail@plt+0x36bc>
   152a0:	add	r0, r4, r5
   152a4:	ldr	r5, [sp, #36]	; 0x24
   152a8:	cmp	r0, #1
   152ac:	blt	15304 <__assert_fail@plt+0x3664>
   152b0:	adds	sl, sl, #1
   152b4:	adc	r9, r9, #0
   152b8:	cmp	r6, #7
   152bc:	bgt	15304 <__assert_fail@plt+0x3664>
   152c0:	cmp	r8, #0
   152c4:	beq	15304 <__assert_fail@plt+0x3664>
   152c8:	eor	r0, sl, r2
   152cc:	orrs	r0, r0, r9
   152d0:	ldreq	r0, [sp, #28]
   152d4:	addeq	r6, r6, #1
   152d8:	moveq	r9, #0
   152dc:	moveq	sl, #1
   152e0:	tsteq	r0, #8
   152e4:	bne	15304 <__assert_fail@plt+0x3664>
   152e8:	ldr	r2, [sp, #8]
   152ec:	mov	r0, #48	; 0x30
   152f0:	ldr	r1, [sp, #4]
   152f4:	strb	r0, [r5, #-1]!
   152f8:	sub	r5, r5, r2
   152fc:	mov	r0, r5
   15300:	bl	118e0 <memcpy@plt>
   15304:	ldr	r8, [sp, #24]
   15308:	b	15314 <__assert_fail@plt+0x3674>
   1530c:	ldr	r8, [sp, #24]
   15310:	ldr	r5, [sp, #36]	; 0x24
   15314:	mov	r4, r5
   15318:	mov	r0, sl
   1531c:	mov	r1, r9
   15320:	mov	r2, #10
   15324:	mov	r3, #0
   15328:	bl	28c6c <__assert_fail@plt+0x16fcc>
   1532c:	add	r2, r0, r0, lsl #2
   15330:	sub	r2, sl, r2, lsl #1
   15334:	orr	r2, r2, #48	; 0x30
   15338:	strb	r2, [r4, #-1]!
   1533c:	rsbs	r2, sl, #9
   15340:	mov	sl, r0
   15344:	rscs	r2, r9, #0
   15348:	mov	r9, r1
   1534c:	bcc	15318 <__assert_fail@plt+0x3678>
   15350:	ldr	r7, [sp, #28]
   15354:	ldr	r9, [fp, #20]
   15358:	ldr	sl, [sp, #20]
   1535c:	tst	r7, #4
   15360:	bne	15378 <__assert_fail@plt+0x36d8>
   15364:	ldr	r3, [sp, #32]
   15368:	ldr	r5, [fp, #16]
   1536c:	b	1548c <__assert_fail@plt+0x37ec>
   15370:	andeq	r0, r0, r0
   15374:	mvnsmi	r0, #0
   15378:	ldr	r0, [sp, #44]	; 0x2c
   1537c:	mov	r7, r5
   15380:	str	r6, [sp, #8]
   15384:	sub	r5, r5, r4
   15388:	bl	11a9c <strlen@plt>
   1538c:	add	r8, sp, #48	; 0x30
   15390:	str	r0, [sp, #40]	; 0x28
   15394:	mov	r1, r4
   15398:	mov	r2, r5
   1539c:	mov	r0, r8
   153a0:	bl	118e0 <memcpy@plt>
   153a4:	ldr	r0, [sp, #12]
   153a8:	ldrb	r6, [r0]
   153ac:	cmp	r6, #255	; 0xff
   153b0:	mov	r9, r6
   153b4:	moveq	r9, r5
   153b8:	cmp	r6, #0
   153bc:	mvneq	r9, #0
   153c0:	cmp	r9, r5
   153c4:	movhi	r9, r5
   153c8:	sub	r4, r7, r9
   153cc:	sub	r7, r5, r9
   153d0:	mov	r2, r9
   153d4:	add	r1, r8, r7
   153d8:	mov	r0, r4
   153dc:	bl	118e0 <memcpy@plt>
   153e0:	cmp	r7, #0
   153e4:	beq	15470 <__assert_fail@plt+0x37d0>
   153e8:	clz	r0, r6
   153ec:	ldr	r8, [sp, #12]
   153f0:	lsr	sl, r0, #5
   153f4:	ldr	r0, [sp, #40]	; 0x28
   153f8:	rsb	r0, r0, #0
   153fc:	str	r0, [sp, #36]	; 0x24
   15400:	ldr	r0, [sp, #36]	; 0x24
   15404:	ldr	r1, [sp, #44]	; 0x2c
   15408:	ldr	r2, [sp, #40]	; 0x28
   1540c:	add	r4, r4, r0
   15410:	mov	r0, r4
   15414:	bl	118e0 <memcpy@plt>
   15418:	tst	sl, #1
   1541c:	add	r0, sp, #48	; 0x30
   15420:	addeq	r8, r8, #1
   15424:	ldrb	r6, [r8]
   15428:	cmp	r6, #255	; 0xff
   1542c:	mov	r5, r6
   15430:	moveq	r5, r7
   15434:	cmp	r6, #0
   15438:	moveq	r5, r9
   1543c:	cmp	r7, r5
   15440:	movcc	r5, r7
   15444:	sub	r7, r7, r5
   15448:	sub	r4, r4, r5
   1544c:	mov	r2, r5
   15450:	add	r1, r0, r7
   15454:	mov	r0, r4
   15458:	bl	118e0 <memcpy@plt>
   1545c:	clz	r0, r6
   15460:	cmp	r7, #0
   15464:	mov	r9, r5
   15468:	lsr	sl, r0, #5
   1546c:	bne	15400 <__assert_fail@plt+0x3760>
   15470:	ldr	r8, [sp, #24]
   15474:	ldr	sl, [sp, #20]
   15478:	ldr	r7, [sp, #28]
   1547c:	ldr	r3, [sp, #32]
   15480:	ldr	r9, [fp, #20]
   15484:	ldr	r5, [fp, #16]
   15488:	ldr	r6, [sp, #8]
   1548c:	tst	r7, #128	; 0x80
   15490:	beq	155f8 <__assert_fail@plt+0x3958>
   15494:	cmn	r6, #1
   15498:	bgt	15590 <__assert_fail@plt+0x38f0>
   1549c:	subs	r0, r5, #2
   154a0:	mov	r6, #0
   154a4:	sbcs	r0, r9, #0
   154a8:	bcc	15590 <__assert_fail@plt+0x38f0>
   154ac:	mov	r0, #0
   154b0:	mov	r1, #1
   154b4:	mov	r6, #0
   154b8:	cmp	r6, #7
   154bc:	beq	1558c <__assert_fail@plt+0x38ec>
   154c0:	umull	r1, r2, r1, r3
   154c4:	add	r6, r6, #1
   154c8:	mla	r0, r0, r3, r2
   154cc:	subs	r2, r1, r5
   154d0:	sbcs	r2, r0, r9
   154d4:	bcc	154b8 <__assert_fail@plt+0x3818>
   154d8:	b	15590 <__assert_fail@plt+0x38f0>
   154dc:	mov	r6, #0
   154e0:	mov	r0, r7
   154e4:	mov	r1, r9
   154e8:	mov	r3, #0
   154ec:	bl	28c6c <__assert_fail@plt+0x16fcc>
   154f0:	ldr	r2, [sp, #32]
   154f4:	mov	sl, r0
   154f8:	mov	r9, r1
   154fc:	mls	r0, r0, r2, r7
   15500:	add	r0, r0, r0, lsl #2
   15504:	add	r0, r4, r0, lsl #1
   15508:	udiv	r4, r0, r2
   1550c:	mls	r0, r4, r2, r0
   15510:	lsl	r0, r0, #1
   15514:	add	r0, r0, r5, lsr #1
   15518:	cmp	r0, r2
   1551c:	bcs	15534 <__assert_fail@plt+0x3894>
   15520:	add	r1, r0, r5
   15524:	cmn	r0, r5
   15528:	movwne	r1, #1
   1552c:	mov	r5, r1
   15530:	b	15544 <__assert_fail@plt+0x38a4>
   15534:	add	r0, r0, r5
   15538:	mov	r5, #2
   1553c:	cmp	r2, r0
   15540:	movwcc	r5, #3
   15544:	add	r6, r6, #1
   15548:	cmp	r6, #7
   1554c:	bhi	15560 <__assert_fail@plt+0x38c0>
   15550:	subs	r0, sl, r2
   15554:	mov	r7, sl
   15558:	sbcs	r0, r9, #0
   1555c:	bcs	154e0 <__assert_fail@plt+0x3840>
   15560:	rsbs	r0, sl, #9
   15564:	rscs	r0, r9, #0
   15568:	bcc	15614 <__assert_fail@plt+0x3974>
   1556c:	ldr	r0, [sp, #40]	; 0x28
   15570:	cmp	r0, #1
   15574:	bne	1561c <__assert_fail@plt+0x397c>
   15578:	and	r0, r4, #1
   1557c:	add	r0, r5, r0
   15580:	cmp	r0, #2
   15584:	bhi	1562c <__assert_fail@plt+0x398c>
   15588:	b	15660 <__assert_fail@plt+0x39c0>
   1558c:	mov	r6, #8
   15590:	and	r0, r7, #256	; 0x100
   15594:	tst	r7, #64	; 0x40
   15598:	orrsne	r1, r6, r0
   1559c:	movne	r1, #32
   155a0:	addne	r8, sl, #648	; 0x288
   155a4:	strbne	r1, [sl, #647]	; 0x287
   155a8:	cmp	r6, #0
   155ac:	beq	155d4 <__assert_fail@plt+0x3934>
   155b0:	ldr	r1, [sp, #16]
   155b4:	cmp	r1, #0
   155b8:	moveq	r1, #107	; 0x6b
   155bc:	cmpeq	r6, #1
   155c0:	beq	155d0 <__assert_fail@plt+0x3930>
   155c4:	movw	r1, #41132	; 0xa0ac
   155c8:	movt	r1, #2
   155cc:	ldrb	r1, [r1, r6]
   155d0:	strb	r1, [r8], #1
   155d4:	cmp	r0, #0
   155d8:	beq	155f8 <__assert_fail@plt+0x3958>
   155dc:	ldr	r0, [sp, #16]
   155e0:	cmp	r0, #0
   155e4:	cmpne	r6, #0
   155e8:	movne	r0, #105	; 0x69
   155ec:	strbne	r0, [r8], #1
   155f0:	mov	r0, #66	; 0x42
   155f4:	strb	r0, [r8], #1
   155f8:	mov	r0, #0
   155fc:	strb	r0, [r8]
   15600:	mov	r0, r4
   15604:	sub	sp, fp, #48	; 0x30
   15608:	vpop	{d8-d9}
   1560c:	add	sp, sp, #4
   15610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15614:	ldr	r0, [sp, #24]
   15618:	b	14fb8 <__assert_fail@plt+0x3318>
   1561c:	cmp	r0, #0
   15620:	bne	15660 <__assert_fail@plt+0x39c0>
   15624:	cmp	r5, #0
   15628:	beq	15660 <__assert_fail@plt+0x39c0>
   1562c:	adds	r0, sl, #1
   15630:	add	r4, r4, #1
   15634:	mov	r5, #0
   15638:	adc	r1, r9, #0
   1563c:	cmp	r4, #10
   15640:	bne	15660 <__assert_fail@plt+0x39c0>
   15644:	rsbs	r3, r0, #9
   15648:	mov	r4, #0
   1564c:	mov	sl, r0
   15650:	mov	r9, r1
   15654:	mov	r5, #0
   15658:	rscs	r3, r1, #0
   1565c:	bcc	156b0 <__assert_fail@plt+0x3a10>
   15660:	ldr	r0, [sp, #28]
   15664:	tst	r0, #8
   15668:	beq	15680 <__assert_fail@plt+0x39e0>
   1566c:	cmp	r4, #0
   15670:	bne	15680 <__assert_fail@plt+0x39e0>
   15674:	ldr	r0, [sp, #24]
   15678:	str	r0, [sp, #36]	; 0x24
   1567c:	b	156a8 <__assert_fail@plt+0x3a08>
   15680:	ldr	r1, [sp, #20]
   15684:	ldr	r2, [sp, #8]
   15688:	add	r0, r4, #48	; 0x30
   1568c:	strb	r0, [r1, #646]!	; 0x286
   15690:	sub	r0, r1, r2
   15694:	ldr	r1, [sp, #4]
   15698:	str	r0, [sp, #36]	; 0x24
   1569c:	bl	118e0 <memcpy@plt>
   156a0:	ldr	r2, [sp, #32]
   156a4:	mov	r5, #0
   156a8:	mov	r4, #0
   156ac:	b	14fbc <__assert_fail@plt+0x331c>
   156b0:	ldr	r0, [sp, #24]
   156b4:	mov	r5, #0
   156b8:	mov	sl, #10
   156bc:	mov	r9, #0
   156c0:	b	14fb8 <__assert_fail@plt+0x3318>
   156c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   156c8:	add	fp, sp, #24
   156cc:	sub	sp, sp, #8
   156d0:	mov	r4, r2
   156d4:	mov	r8, r1
   156d8:	cmp	r0, #0
   156dc:	bne	15708 <__assert_fail@plt+0x3a68>
   156e0:	movw	r0, #41057	; 0xa061
   156e4:	movt	r0, #2
   156e8:	bl	119f4 <getenv@plt>
   156ec:	cmp	r0, #0
   156f0:	bne	15708 <__assert_fail@plt+0x3a68>
   156f4:	movw	r0, #41068	; 0xa06c
   156f8:	movt	r0, #2
   156fc:	bl	119f4 <getenv@plt>
   15700:	cmp	r0, #0
   15704:	beq	15824 <__assert_fail@plt+0x3b84>
   15708:	mov	r6, r0
   1570c:	movw	r7, #41156	; 0xa0c4
   15710:	movw	r1, #41144	; 0xa0b8
   15714:	mov	r3, #4
   15718:	ldrb	r5, [r6], #1
   1571c:	movt	r7, #2
   15720:	movt	r1, #2
   15724:	mov	r2, r7
   15728:	cmp	r5, #39	; 0x27
   1572c:	movne	r6, r0
   15730:	mov	r0, r6
   15734:	bl	281ac <__assert_fail@plt+0x1650c>
   15738:	sub	r1, r5, #39	; 0x27
   1573c:	cmp	r0, #0
   15740:	clz	r1, r1
   15744:	lsr	r1, r1, #5
   15748:	lsl	r5, r1, #2
   1574c:	blt	15774 <__assert_fail@plt+0x3ad4>
   15750:	ldr	r0, [r7, r0, lsl #2]
   15754:	mov	r2, #1
   15758:	mov	r1, #0
   1575c:	str	r2, [r4]
   15760:	str	r1, [r4, #4]
   15764:	orr	r1, r0, r5
   15768:	mov	r0, #0
   1576c:	str	r1, [r8]
   15770:	b	157a4 <__assert_fail@plt+0x3b04>
   15774:	movw	r0, #41078	; 0xa076
   15778:	add	r1, sp, #4
   1577c:	mov	r2, #0
   15780:	mov	r3, r4
   15784:	mov	r7, #0
   15788:	movt	r0, #2
   1578c:	str	r0, [sp]
   15790:	mov	r0, r6
   15794:	bl	19818 <__assert_fail@plt+0x7b78>
   15798:	cmp	r0, #0
   1579c:	beq	157e0 <__assert_fail@plt+0x3b40>
   157a0:	str	r7, [r8]
   157a4:	ldrd	r2, [r4]
   157a8:	orrs	r1, r2, r3
   157ac:	bne	157d8 <__assert_fail@plt+0x3b38>
   157b0:	movw	r0, #41114	; 0xa09a
   157b4:	movt	r0, #2
   157b8:	bl	119f4 <getenv@plt>
   157bc:	cmp	r0, #0
   157c0:	mov	r2, #512	; 0x200
   157c4:	mov	r0, #4
   157c8:	mov	r1, #0
   157cc:	movweq	r2, #1024	; 0x400
   157d0:	str	r2, [r4]
   157d4:	str	r1, [r4, #4]
   157d8:	sub	sp, fp, #24
   157dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   157e0:	ldrb	r0, [r6]
   157e4:	sub	r0, r0, #48	; 0x30
   157e8:	uxtb	r0, r0
   157ec:	cmp	r0, #10
   157f0:	bcc	1581c <__assert_fail@plt+0x3b7c>
   157f4:	ldr	r0, [sp, #4]
   157f8:	cmp	r0, r6
   157fc:	beq	1584c <__assert_fail@plt+0x3bac>
   15800:	ldrb	r2, [r6, #1]
   15804:	add	r1, r6, #1
   15808:	mov	r6, r1
   1580c:	sub	r2, r2, #48	; 0x30
   15810:	uxtb	r2, r2
   15814:	cmp	r2, #10
   15818:	bcs	157f8 <__assert_fail@plt+0x3b58>
   1581c:	mov	r1, r5
   15820:	b	15768 <__assert_fail@plt+0x3ac8>
   15824:	movw	r0, #41114	; 0xa09a
   15828:	movt	r0, #2
   1582c:	bl	119f4 <getenv@plt>
   15830:	mov	r2, #512	; 0x200
   15834:	cmp	r0, #0
   15838:	mov	r1, #0
   1583c:	movweq	r2, #1024	; 0x400
   15840:	str	r2, [r4]
   15844:	str	r1, [r4, #4]
   15848:	b	15768 <__assert_fail@plt+0x3ac8>
   1584c:	ldrb	r2, [r0, #-1]
   15850:	orr	r1, r5, #384	; 0x180
   15854:	cmp	r2, #66	; 0x42
   15858:	mov	r2, r1
   1585c:	orrne	r2, r5, #128	; 0x80
   15860:	bne	15874 <__assert_fail@plt+0x3bd4>
   15864:	ldrb	r0, [r0, #-2]
   15868:	cmp	r0, #105	; 0x69
   1586c:	orreq	r1, r2, #32
   15870:	b	15768 <__assert_fail@plt+0x3ac8>
   15874:	orr	r1, r2, #32
   15878:	b	15768 <__assert_fail@plt+0x3ac8>
   1587c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15880:	add	fp, sp, #28
   15884:	sub	sp, sp, #388	; 0x184
   15888:	mov	r5, r1
   1588c:	mov	r9, r0
   15890:	bl	119a0 <__ctype_get_mb_cur_max@plt>
   15894:	cmp	r0, #2
   15898:	str	r5, [sp, #20]
   1589c:	bcc	15910 <__assert_fail@plt+0x3c70>
   158a0:	sub	r6, fp, #88	; 0x58
   158a4:	mov	r7, #0
   158a8:	mov	r0, r6
   158ac:	str	r7, [fp, #-80]	; 0xffffffb0
   158b0:	str	r7, [fp, #-84]	; 0xffffffac
   158b4:	strb	r7, [fp, #-88]	; 0xffffffa8
   158b8:	str	r5, [fp, #-72]	; 0xffffffb8
   158bc:	strb	r7, [fp, #-76]	; 0xffffffb4
   158c0:	bl	17038 <__assert_fail@plt+0x5398>
   158c4:	ldrb	r5, [fp, #-64]	; 0xffffffc0
   158c8:	ldr	r4, [fp, #-60]	; 0xffffffc4
   158cc:	cmp	r5, #0
   158d0:	beq	158dc <__assert_fail@plt+0x3c3c>
   158d4:	cmp	r4, #0
   158d8:	beq	15ac4 <__assert_fail@plt+0x3e24>
   158dc:	ldr	r0, [sp, #20]
   158e0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   158e4:	str	r7, [fp, #-136]	; 0xffffff78
   158e8:	str	r7, [fp, #-140]	; 0xffffff74
   158ec:	strb	r7, [fp, #-144]	; 0xffffff70
   158f0:	str	r0, [fp, #-128]	; 0xffffff80
   158f4:	add	r0, r6, #32
   158f8:	strb	r7, [fp, #-132]	; 0xffffff7c
   158fc:	cmp	r1, r0
   15900:	beq	15acc <__assert_fail@plt+0x3e2c>
   15904:	ldr	r6, [fp, #-68]	; 0xffffffbc
   15908:	mov	r7, r1
   1590c:	b	15ae4 <__assert_fail@plt+0x3e44>
   15910:	ldrb	r4, [r5]
   15914:	cmp	r4, #0
   15918:	beq	15ac4 <__assert_fail@plt+0x3e24>
   1591c:	bl	11a6c <__ctype_b_loc@plt>
   15920:	ldr	r8, [r0]
   15924:	str	r0, [sp]
   15928:	add	r0, r8, r4, lsl #1
   1592c:	ldrb	r0, [r0, #1]
   15930:	tst	r0, #1
   15934:	beq	15944 <__assert_fail@plt+0x3ca4>
   15938:	bl	11a48 <__ctype_tolower_loc@plt>
   1593c:	ldr	r0, [r0]
   15940:	ldrb	r4, [r0, r4, lsl #2]
   15944:	ldrb	r6, [r9]
   15948:	cmp	r6, #0
   1594c:	beq	15ec0 <__assert_fail@plt+0x4220>
   15950:	mov	r0, #0
   15954:	mov	sl, #0
   15958:	mov	r7, #0
   1595c:	str	r4, [sp, #12]
   15960:	str	r5, [sp, #8]
   15964:	str	r0, [sp, #4]
   15968:	mov	r0, #1
   1596c:	str	r0, [sp, #16]
   15970:	b	15a00 <__assert_fail@plt+0x3d60>
   15974:	ldr	r0, [sp, #16]
   15978:	tst	r0, #1
   1597c:	beq	15a10 <__assert_fail@plt+0x3d70>
   15980:	ldr	r4, [sp, #8]
   15984:	cmp	r4, #0
   15988:	beq	159b8 <__assert_fail@plt+0x3d18>
   1598c:	ldr	r0, [sp, #4]
   15990:	sub	r1, sl, r0
   15994:	mov	r0, r4
   15998:	bl	11b74 <strnlen@plt>
   1599c:	ldrb	r0, [r4, r0]!
   159a0:	str	sl, [sp, #4]
   159a4:	cmp	r0, #0
   159a8:	beq	159b8 <__assert_fail@plt+0x3d18>
   159ac:	str	r4, [sp, #8]
   159b0:	str	sl, [sp, #4]
   159b4:	b	15a10 <__assert_fail@plt+0x3d70>
   159b8:	mov	r0, r5
   159bc:	bl	11a9c <strlen@plt>
   159c0:	mov	r2, r0
   159c4:	mov	r0, r9
   159c8:	mov	r1, r5
   159cc:	sub	r3, fp, #88	; 0x58
   159d0:	bl	16350 <__assert_fail@plt+0x46b0>
   159d4:	cmp	r0, #0
   159d8:	bne	15ee0 <__assert_fail@plt+0x4240>
   159dc:	ldr	r1, [sp, #16]
   159e0:	ldrb	r6, [r9]
   159e4:	and	r1, r1, r0
   159e8:	ldr	r0, [sp]
   159ec:	str	r1, [sp, #16]
   159f0:	ldr	r8, [r0]
   159f4:	mov	r0, #0
   159f8:	str	r0, [sp, #8]
   159fc:	b	15a10 <__assert_fail@plt+0x3d70>
   15a00:	add	r0, r7, r7, lsl #2
   15a04:	cmp	sl, r0
   15a08:	cmpcs	r7, #10
   15a0c:	bcs	15974 <__assert_fail@plt+0x3cd4>
   15a10:	uxtb	r4, r6
   15a14:	add	r0, r8, r4, lsl #1
   15a18:	ldrb	r0, [r0, #1]
   15a1c:	tst	r0, #1
   15a20:	beq	15a30 <__assert_fail@plt+0x3d90>
   15a24:	bl	11a48 <__ctype_tolower_loc@plt>
   15a28:	ldr	r0, [r0]
   15a2c:	ldr	r4, [r0, r4, lsl #2]
   15a30:	ldr	r0, [sp, #12]
   15a34:	cmp	r4, r0
   15a38:	bne	15aa8 <__assert_fail@plt+0x3e08>
   15a3c:	mov	r4, #1
   15a40:	ldrb	r6, [r5, r4]
   15a44:	cmp	r6, #0
   15a48:	beq	15ac4 <__assert_fail@plt+0x3e24>
   15a4c:	ldrb	r5, [r9, r4]
   15a50:	cmp	r5, #0
   15a54:	beq	15ec0 <__assert_fail@plt+0x4220>
   15a58:	add	r0, r8, r5, lsl #1
   15a5c:	ldrb	r0, [r0, #1]
   15a60:	tst	r0, #1
   15a64:	beq	15a74 <__assert_fail@plt+0x3dd4>
   15a68:	bl	11a48 <__ctype_tolower_loc@plt>
   15a6c:	ldr	r0, [r0]
   15a70:	ldr	r5, [r0, r5, lsl #2]
   15a74:	add	r0, r8, r6, lsl #1
   15a78:	ldrb	r0, [r0, #1]
   15a7c:	tst	r0, #1
   15a80:	beq	15a90 <__assert_fail@plt+0x3df0>
   15a84:	bl	11a48 <__ctype_tolower_loc@plt>
   15a88:	ldr	r0, [r0]
   15a8c:	ldr	r6, [r0, r6, lsl #2]
   15a90:	cmp	r5, r6
   15a94:	ldr	r5, [sp, #20]
   15a98:	add	r4, r4, #1
   15a9c:	beq	15a40 <__assert_fail@plt+0x3da0>
   15aa0:	add	sl, sl, r4
   15aa4:	b	15aac <__assert_fail@plt+0x3e0c>
   15aa8:	add	sl, sl, #1
   15aac:	ldrb	r6, [r9, #1]!
   15ab0:	add	r7, r7, #1
   15ab4:	mov	r4, #0
   15ab8:	cmp	r6, #0
   15abc:	bne	15a00 <__assert_fail@plt+0x3d60>
   15ac0:	b	15ec4 <__assert_fail@plt+0x4224>
   15ac4:	mov	r4, r9
   15ac8:	b	15ec4 <__assert_fail@plt+0x4224>
   15acc:	ldr	r6, [fp, #-68]	; 0xffffffbc
   15ad0:	sub	r0, fp, #184	; 0xb8
   15ad4:	add	r7, r0, #16
   15ad8:	mov	r0, r7
   15adc:	mov	r2, r6
   15ae0:	bl	118e0 <memcpy@plt>
   15ae4:	cmp	r5, #0
   15ae8:	str	r6, [fp, #-180]	; 0xffffff4c
   15aec:	str	r7, [fp, #-184]	; 0xffffff48
   15af0:	strb	r5, [fp, #-176]	; 0xffffff50
   15af4:	beq	15b08 <__assert_fail@plt+0x3e68>
   15af8:	mov	r0, r4
   15afc:	str	r4, [fp, #-172]	; 0xffffff54
   15b00:	bl	11904 <towlower@plt>
   15b04:	str	r0, [fp, #-172]	; 0xffffff54
   15b08:	mov	r4, #0
   15b0c:	add	r0, sp, #176	; 0xb0
   15b10:	str	r4, [sp, #184]	; 0xb8
   15b14:	str	r4, [sp, #180]	; 0xb4
   15b18:	strb	r4, [sp, #176]	; 0xb0
   15b1c:	str	r9, [sp, #192]	; 0xc0
   15b20:	strb	r4, [sp, #188]	; 0xbc
   15b24:	bl	17038 <__assert_fail@plt+0x5398>
   15b28:	ldrb	r0, [sp, #200]	; 0xc8
   15b2c:	cmp	r0, #0
   15b30:	beq	15b40 <__assert_fail@plt+0x3ea0>
   15b34:	ldr	r0, [sp, #204]	; 0xcc
   15b38:	cmp	r0, #0
   15b3c:	beq	15ec4 <__assert_fail@plt+0x4224>
   15b40:	add	r0, sp, #24
   15b44:	mov	r5, #0
   15b48:	mov	r6, #0
   15b4c:	mov	r8, #0
   15b50:	add	r0, r0, #4
   15b54:	str	r0, [sp]
   15b58:	add	r0, sp, #136	; 0x88
   15b5c:	add	r0, r0, #16
   15b60:	str	r0, [sp, #4]
   15b64:	add	r0, sp, #176	; 0xb0
   15b68:	add	r0, r0, #32
   15b6c:	str	r0, [sp, #16]
   15b70:	mov	r0, #1
   15b74:	str	r0, [sp, #8]
   15b78:	mov	r0, #0
   15b7c:	str	r0, [sp, #12]
   15b80:	add	r0, r6, r6, lsl #2
   15b84:	mov	sl, r8
   15b88:	cmp	r8, r0
   15b8c:	bcc	15c50 <__assert_fail@plt+0x3fb0>
   15b90:	ldr	r0, [sp, #8]
   15b94:	mov	r7, r6
   15b98:	sub	r6, fp, #144	; 0x90
   15b9c:	tst	r0, #1
   15ba0:	beq	15c4c <__assert_fail@plt+0x3fac>
   15ba4:	cmp	r7, #10
   15ba8:	bcc	15c4c <__assert_fail@plt+0x3fac>
   15bac:	ldr	r1, [sp, #12]
   15bb0:	subs	r0, sl, r1
   15bb4:	beq	15bf8 <__assert_fail@plt+0x3f58>
   15bb8:	sub	r4, r1, sl
   15bbc:	mov	r0, r6
   15bc0:	bl	17038 <__assert_fail@plt+0x5398>
   15bc4:	ldrb	r0, [fp, #-120]	; 0xffffff88
   15bc8:	cmp	r0, #0
   15bcc:	beq	15bdc <__assert_fail@plt+0x3f3c>
   15bd0:	ldr	r0, [fp, #-116]	; 0xffffff8c
   15bd4:	cmp	r0, #0
   15bd8:	beq	15bf8 <__assert_fail@plt+0x3f58>
   15bdc:	strb	r5, [fp, #-132]	; 0xffffff7c
   15be0:	adds	r4, r4, #1
   15be4:	ldr	r0, [fp, #-128]	; 0xffffff80
   15be8:	ldr	r1, [fp, #-124]	; 0xffffff84
   15bec:	add	r0, r0, r1
   15bf0:	str	r0, [fp, #-128]	; 0xffffff80
   15bf4:	bne	15bbc <__assert_fail@plt+0x3f1c>
   15bf8:	mov	r0, r6
   15bfc:	bl	17038 <__assert_fail@plt+0x5398>
   15c00:	ldrb	r0, [fp, #-120]	; 0xffffff88
   15c04:	cmp	r0, #0
   15c08:	beq	15c48 <__assert_fail@plt+0x3fa8>
   15c0c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   15c10:	mov	r6, r7
   15c14:	str	sl, [sp, #12]
   15c18:	cmp	r0, #0
   15c1c:	bne	15c50 <__assert_fail@plt+0x3fb0>
   15c20:	ldr	r1, [sp, #20]
   15c24:	mov	r0, r9
   15c28:	add	r2, sp, #80	; 0x50
   15c2c:	bl	15eec <__assert_fail@plt+0x424c>
   15c30:	mov	r1, #0
   15c34:	cmp	r0, #0
   15c38:	str	sl, [sp, #12]
   15c3c:	str	r1, [sp, #8]
   15c40:	beq	15c50 <__assert_fail@plt+0x3fb0>
   15c44:	b	15ed8 <__assert_fail@plt+0x4238>
   15c48:	str	sl, [sp, #12]
   15c4c:	mov	r6, r7
   15c50:	ldr	r7, [sp, #192]	; 0xc0
   15c54:	ldr	r1, [sp, #16]
   15c58:	ldr	r4, [sp, #196]	; 0xc4
   15c5c:	cmp	r7, r1
   15c60:	bne	15c78 <__assert_fail@plt+0x3fd8>
   15c64:	ldr	r7, [sp, #4]
   15c68:	ldr	r1, [sp, #16]
   15c6c:	mov	r2, r4
   15c70:	mov	r0, r7
   15c74:	bl	118e0 <memcpy@plt>
   15c78:	ldrb	r0, [sp, #200]	; 0xc8
   15c7c:	add	r8, sl, #1
   15c80:	str	r4, [sp, #140]	; 0x8c
   15c84:	str	r7, [sp, #136]	; 0x88
   15c88:	cmp	r0, #0
   15c8c:	strb	r0, [sp, #144]	; 0x90
   15c90:	beq	15cb8 <__assert_fail@plt+0x4018>
   15c94:	ldr	r0, [sp, #204]	; 0xcc
   15c98:	str	r0, [sp, #148]	; 0x94
   15c9c:	bl	11904 <towlower@plt>
   15ca0:	str	r0, [sp, #148]	; 0x94
   15ca4:	ldrb	r0, [sp, #144]	; 0x90
   15ca8:	cmp	r0, #0
   15cac:	ldrbne	r0, [fp, #-176]	; 0xffffff50
   15cb0:	cmpne	r0, #0
   15cb4:	bne	15ce0 <__assert_fail@plt+0x4040>
   15cb8:	ldr	r2, [sp, #140]	; 0x8c
   15cbc:	ldr	r0, [fp, #-180]	; 0xffffff4c
   15cc0:	cmp	r2, r0
   15cc4:	bne	15e80 <__assert_fail@plt+0x41e0>
   15cc8:	ldr	r1, [fp, #-184]	; 0xffffff48
   15ccc:	ldr	r0, [sp, #136]	; 0x88
   15cd0:	bl	11928 <memcmp@plt>
   15cd4:	cmp	r0, #0
   15cd8:	bne	15e80 <__assert_fail@plt+0x41e0>
   15cdc:	b	15cf0 <__assert_fail@plt+0x4050>
   15ce0:	ldr	r0, [fp, #-172]	; 0xffffff54
   15ce4:	ldr	r1, [sp, #148]	; 0x94
   15ce8:	cmp	r1, r0
   15cec:	bne	15e80 <__assert_fail@plt+0x41e0>
   15cf0:	add	r0, sp, #176	; 0xb0
   15cf4:	add	r1, sp, #80	; 0x50
   15cf8:	mov	r7, r6
   15cfc:	ldm	r0!, {r2, r3, r4, r5}
   15d00:	stmia	r1!, {r2, r3, r4, r5}
   15d04:	ldm	r0!, {r2, r3, r4, r5, r6}
   15d08:	stmia	r1!, {r2, r3, r4, r5, r6}
   15d0c:	ldm	r0, {r2, r3, r4, r5, r6}
   15d10:	stm	r1, {r2, r3, r4, r5, r6}
   15d14:	mov	r2, #0
   15d18:	mov	r5, #0
   15d1c:	ldr	r0, [sp, #20]
   15d20:	strb	r2, [sp, #92]	; 0x5c
   15d24:	ldr	r1, [sp, #100]	; 0x64
   15d28:	str	r0, [sp, #40]	; 0x28
   15d2c:	ldr	r0, [sp, #96]	; 0x60
   15d30:	strb	r2, [sp, #24]
   15d34:	add	r0, r0, r1
   15d38:	str	r0, [sp, #96]	; 0x60
   15d3c:	ldr	r0, [sp]
   15d40:	str	r2, [r0]
   15d44:	str	r2, [r0, #4]
   15d48:	add	r0, sp, #24
   15d4c:	strb	r2, [sp, #36]	; 0x24
   15d50:	bl	17038 <__assert_fail@plt+0x5398>
   15d54:	ldrb	r0, [sp, #48]	; 0x30
   15d58:	cmp	r0, #0
   15d5c:	beq	15d6c <__assert_fail@plt+0x40cc>
   15d60:	ldr	r0, [sp, #52]	; 0x34
   15d64:	cmp	r0, #0
   15d68:	beq	15ee8 <__assert_fail@plt+0x4248>
   15d6c:	strb	r5, [sp, #36]	; 0x24
   15d70:	ldr	r0, [sp, #40]	; 0x28
   15d74:	ldr	r1, [sp, #44]	; 0x2c
   15d78:	add	r0, r0, r1
   15d7c:	str	r0, [sp, #40]	; 0x28
   15d80:	add	r0, sp, #24
   15d84:	bl	17038 <__assert_fail@plt+0x5398>
   15d88:	ldrb	r0, [sp, #48]	; 0x30
   15d8c:	mov	r6, r7
   15d90:	cmp	r0, #0
   15d94:	beq	15da4 <__assert_fail@plt+0x4104>
   15d98:	ldr	r0, [sp, #52]	; 0x34
   15d9c:	cmp	r0, #0
   15da0:	beq	15ed0 <__assert_fail@plt+0x4230>
   15da4:	add	r8, sl, #2
   15da8:	add	r0, sp, #80	; 0x50
   15dac:	bl	17038 <__assert_fail@plt+0x5398>
   15db0:	ldr	r0, [sp, #108]	; 0x6c
   15db4:	ldrb	r1, [sp, #104]	; 0x68
   15db8:	cmp	r0, #0
   15dbc:	bne	15dc8 <__assert_fail@plt+0x4128>
   15dc0:	cmp	r1, #0
   15dc4:	bne	15ec0 <__assert_fail@plt+0x4220>
   15dc8:	cmp	r1, #0
   15dcc:	ldrbne	r1, [sp, #48]	; 0x30
   15dd0:	cmpne	r1, #0
   15dd4:	bne	15e10 <__assert_fail@plt+0x4170>
   15dd8:	ldr	r4, [sp, #100]	; 0x64
   15ddc:	ldr	r0, [sp, #44]	; 0x2c
   15de0:	cmp	r4, r0
   15de4:	bne	15e80 <__assert_fail@plt+0x41e0>
   15de8:	ldr	sl, [sp, #40]	; 0x28
   15dec:	ldr	r7, [sp, #96]	; 0x60
   15df0:	mov	r2, r4
   15df4:	mov	r0, r7
   15df8:	mov	r1, sl
   15dfc:	bl	11928 <memcmp@plt>
   15e00:	cmp	r0, #0
   15e04:	mov	r0, r4
   15e08:	beq	15e38 <__assert_fail@plt+0x4198>
   15e0c:	b	15e80 <__assert_fail@plt+0x41e0>
   15e10:	bl	11904 <towlower@plt>
   15e14:	mov	r4, r0
   15e18:	ldr	r0, [sp, #52]	; 0x34
   15e1c:	bl	11904 <towlower@plt>
   15e20:	cmp	r4, r0
   15e24:	bne	15e80 <__assert_fail@plt+0x41e0>
   15e28:	ldr	sl, [sp, #40]	; 0x28
   15e2c:	ldr	r4, [sp, #44]	; 0x2c
   15e30:	ldr	r7, [sp, #96]	; 0x60
   15e34:	ldr	r0, [sp, #100]	; 0x64
   15e38:	mov	r1, #0
   15e3c:	add	r0, r7, r0
   15e40:	mov	r5, #0
   15e44:	strb	r1, [sp, #92]	; 0x5c
   15e48:	str	r0, [sp, #96]	; 0x60
   15e4c:	add	r0, sl, r4
   15e50:	strb	r1, [sp, #36]	; 0x24
   15e54:	str	r0, [sp, #40]	; 0x28
   15e58:	add	r0, sp, #24
   15e5c:	bl	17038 <__assert_fail@plt+0x5398>
   15e60:	ldrb	r0, [sp, #48]	; 0x30
   15e64:	add	r8, r8, #1
   15e68:	cmp	r0, #0
   15e6c:	beq	15da8 <__assert_fail@plt+0x4108>
   15e70:	ldr	r0, [sp, #52]	; 0x34
   15e74:	cmp	r0, #0
   15e78:	bne	15da8 <__assert_fail@plt+0x4108>
   15e7c:	b	15ed0 <__assert_fail@plt+0x4230>
   15e80:	mov	r4, #0
   15e84:	add	r6, r6, #1
   15e88:	strb	r4, [sp, #188]	; 0xbc
   15e8c:	ldr	r0, [sp, #192]	; 0xc0
   15e90:	ldr	r1, [sp, #196]	; 0xc4
   15e94:	add	r0, r0, r1
   15e98:	str	r0, [sp, #192]	; 0xc0
   15e9c:	add	r0, sp, #176	; 0xb0
   15ea0:	bl	17038 <__assert_fail@plt+0x5398>
   15ea4:	ldrb	r0, [sp, #200]	; 0xc8
   15ea8:	cmp	r0, #0
   15eac:	beq	15b80 <__assert_fail@plt+0x3ee0>
   15eb0:	ldr	r0, [sp, #204]	; 0xcc
   15eb4:	cmp	r0, #0
   15eb8:	bne	15b80 <__assert_fail@plt+0x3ee0>
   15ebc:	b	15ec4 <__assert_fail@plt+0x4224>
   15ec0:	mov	r4, #0
   15ec4:	mov	r0, r4
   15ec8:	sub	sp, fp, #28
   15ecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ed0:	ldr	r4, [sp, #192]	; 0xc0
   15ed4:	b	15ec4 <__assert_fail@plt+0x4224>
   15ed8:	ldr	r4, [sp, #80]	; 0x50
   15edc:	b	15ec4 <__assert_fail@plt+0x4224>
   15ee0:	ldr	r4, [fp, #-88]	; 0xffffffa8
   15ee4:	b	15ec4 <__assert_fail@plt+0x4224>
   15ee8:	bl	11c64 <abort@plt>
   15eec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ef0:	add	fp, sp, #28
   15ef4:	sub	sp, sp, #180	; 0xb4
   15ef8:	mov	r7, r0
   15efc:	mov	r0, r1
   15f00:	mov	sl, r2
   15f04:	mov	r4, r1
   15f08:	bl	16558 <__assert_fail@plt+0x48b8>
   15f0c:	mov	r6, r0
   15f10:	movw	r0, #47662	; 0xba2e
   15f14:	mov	r5, #0
   15f18:	movt	r0, #744	; 0x2e8
   15f1c:	cmp	r6, r0
   15f20:	bhi	16340 <__assert_fail@plt+0x46a0>
   15f24:	mov	r0, #44	; 0x2c
   15f28:	mul	r0, r6, r0
   15f2c:	cmp	r0, #4016	; 0xfb0
   15f30:	bhi	15f50 <__assert_fail@plt+0x42b0>
   15f34:	add	r0, r0, #22
   15f38:	bic	r0, r0, #7
   15f3c:	sub	r0, sp, r0
   15f40:	add	r1, r0, #15
   15f44:	bic	r8, r1, #15
   15f48:	mov	sp, r0
   15f4c:	b	15f58 <__assert_fail@plt+0x42b8>
   15f50:	bl	286cc <__assert_fail@plt+0x16a2c>
   15f54:	mov	r8, r0
   15f58:	cmp	r8, #0
   15f5c:	beq	16340 <__assert_fail@plt+0x46a0>
   15f60:	mov	r9, #0
   15f64:	str	r7, [fp, #-196]	; 0xffffff3c
   15f68:	str	r9, [fp, #-80]	; 0xffffffb0
   15f6c:	str	r9, [fp, #-84]	; 0xffffffac
   15f70:	strb	r9, [fp, #-88]	; 0xffffffa8
   15f74:	str	r4, [fp, #-72]	; 0xffffffb8
   15f78:	sub	r4, fp, #88	; 0x58
   15f7c:	strb	r9, [fp, #-76]	; 0xffffffb4
   15f80:	mov	r0, r4
   15f84:	bl	17038 <__assert_fail@plt+0x5398>
   15f88:	add	r0, r6, r6, lsl #2
   15f8c:	add	r3, r8, r0, lsl #3
   15f90:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   15f94:	str	r3, [fp, #-188]	; 0xffffff44
   15f98:	cmp	r0, #0
   15f9c:	beq	15fac <__assert_fail@plt+0x430c>
   15fa0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15fa4:	cmp	r0, #0
   15fa8:	beq	1603c <__assert_fail@plt+0x439c>
   15fac:	add	r7, r8, #16
   15fb0:	add	r5, r4, #32
   15fb4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15fb8:	cmp	r0, r5
   15fbc:	bne	15fd4 <__assert_fail@plt+0x4334>
   15fc0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15fc4:	mov	r0, r7
   15fc8:	mov	r1, r5
   15fcc:	bl	118e0 <memcpy@plt>
   15fd0:	mov	r0, r7
   15fd4:	str	r0, [r7, #-16]
   15fd8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15fdc:	str	r0, [r7, #-12]
   15fe0:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   15fe4:	cmp	r0, #0
   15fe8:	strb	r0, [r7, #-8]
   15fec:	beq	16000 <__assert_fail@plt+0x4360>
   15ff0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15ff4:	str	r0, [r7, #-4]
   15ff8:	bl	11904 <towlower@plt>
   15ffc:	str	r0, [r7, #-4]
   16000:	strb	r9, [fp, #-76]	; 0xffffffb4
   16004:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16008:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1600c:	add	r0, r0, r1
   16010:	str	r0, [fp, #-72]	; 0xffffffb8
   16014:	mov	r0, r4
   16018:	bl	17038 <__assert_fail@plt+0x5398>
   1601c:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   16020:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16024:	ldr	r3, [fp, #-188]	; 0xffffff44
   16028:	add	r7, r7, #40	; 0x28
   1602c:	cmp	r1, #0
   16030:	beq	15fb4 <__assert_fail@plt+0x4314>
   16034:	cmp	r0, #0
   16038:	bne	15fb4 <__assert_fail@plt+0x4314>
   1603c:	mov	r0, #1
   16040:	cmp	r6, #3
   16044:	str	sl, [fp, #-204]	; 0xffffff34
   16048:	str	r6, [fp, #-192]	; 0xffffff40
   1604c:	str	r0, [r3, #4]
   16050:	bcc	16110 <__assert_fail@plt+0x4470>
   16054:	mov	r4, #2
   16058:	mov	r5, #0
   1605c:	add	r0, r4, r4, lsl #2
   16060:	add	r0, r8, r0, lsl #3
   16064:	ldrb	sl, [r0, #-32]	; 0xffffffe0
   16068:	sub	r7, r0, #28
   1606c:	sub	r9, r0, #40	; 0x28
   16070:	sub	r6, r0, #36	; 0x24
   16074:	b	16080 <__assert_fail@plt+0x43e0>
   16078:	ldr	r0, [r3, r5, lsl #2]
   1607c:	sub	r5, r5, r0
   16080:	cmp	sl, #0
   16084:	beq	160b0 <__assert_fail@plt+0x4410>
   16088:	add	r0, r5, r5, lsl #2
   1608c:	add	r0, r8, r0, lsl #3
   16090:	ldrb	r1, [r0, #8]
   16094:	cmp	r1, #0
   16098:	beq	160b0 <__assert_fail@plt+0x4410>
   1609c:	ldr	r0, [r0, #12]
   160a0:	ldr	r1, [r7]
   160a4:	cmp	r1, r0
   160a8:	bne	160e0 <__assert_fail@plt+0x4440>
   160ac:	b	160f4 <__assert_fail@plt+0x4454>
   160b0:	add	r0, r5, r5, lsl #2
   160b4:	ldr	r2, [r6]
   160b8:	add	r1, r8, r0, lsl #3
   160bc:	ldr	r1, [r1, #4]
   160c0:	cmp	r2, r1
   160c4:	bne	160e0 <__assert_fail@plt+0x4440>
   160c8:	ldr	r1, [r8, r0, lsl #3]
   160cc:	ldr	r0, [r9]
   160d0:	bl	11928 <memcmp@plt>
   160d4:	ldr	r3, [fp, #-188]	; 0xffffff44
   160d8:	cmp	r0, #0
   160dc:	beq	160f4 <__assert_fail@plt+0x4454>
   160e0:	cmp	r5, #0
   160e4:	bne	16078 <__assert_fail@plt+0x43d8>
   160e8:	mov	r5, #0
   160ec:	mov	r0, r4
   160f0:	b	160fc <__assert_fail@plt+0x445c>
   160f4:	add	r5, r5, #1
   160f8:	sub	r0, r4, r5
   160fc:	str	r0, [r3, r4, lsl #2]
   16100:	ldr	r0, [fp, #-192]	; 0xffffff40
   16104:	add	r4, r4, #1
   16108:	cmp	r4, r0
   1610c:	bne	1605c <__assert_fail@plt+0x43bc>
   16110:	ldr	r0, [fp, #-204]	; 0xffffff34
   16114:	mov	r1, #0
   16118:	str	r1, [r0]
   1611c:	ldr	r0, [fp, #-196]	; 0xffffff3c
   16120:	str	r1, [fp, #-80]	; 0xffffffb0
   16124:	str	r1, [fp, #-84]	; 0xffffffac
   16128:	strb	r1, [fp, #-88]	; 0xffffffa8
   1612c:	str	r1, [fp, #-136]	; 0xffffff78
   16130:	str	r1, [fp, #-140]	; 0xffffff74
   16134:	str	r0, [fp, #-72]	; 0xffffffb8
   16138:	str	r0, [fp, #-128]	; 0xffffff80
   1613c:	sub	r0, fp, #144	; 0x90
   16140:	strb	r1, [fp, #-144]	; 0xffffff70
   16144:	strb	r1, [fp, #-76]	; 0xffffffb4
   16148:	strb	r1, [fp, #-132]	; 0xffffff7c
   1614c:	bl	17038 <__assert_fail@plt+0x5398>
   16150:	ldrb	r9, [fp, #-120]	; 0xffffff88
   16154:	ldr	r6, [fp, #-116]	; 0xffffff8c
   16158:	cmp	r9, #0
   1615c:	beq	16168 <__assert_fail@plt+0x44c8>
   16160:	cmp	r6, #0
   16164:	beq	16334 <__assert_fail@plt+0x4694>
   16168:	sub	r0, fp, #184	; 0xb8
   1616c:	sub	r4, fp, #88	; 0x58
   16170:	mov	r7, #0
   16174:	add	r0, r0, #16
   16178:	str	r0, [fp, #-200]	; 0xffffff38
   1617c:	sub	r0, fp, #144	; 0x90
   16180:	add	r0, r0, #32
   16184:	str	r0, [fp, #-196]	; 0xffffff3c
   16188:	ldr	sl, [fp, #-128]	; 0xffffff80
   1618c:	ldr	r1, [fp, #-196]	; 0xffffff3c
   16190:	ldr	r5, [fp, #-124]	; 0xffffff84
   16194:	cmp	sl, r1
   16198:	bne	161b0 <__assert_fail@plt+0x4510>
   1619c:	ldr	sl, [fp, #-200]	; 0xffffff38
   161a0:	ldr	r1, [fp, #-196]	; 0xffffff3c
   161a4:	mov	r2, r5
   161a8:	mov	r0, sl
   161ac:	bl	118e0 <memcpy@plt>
   161b0:	tst	r9, #255	; 0xff
   161b4:	str	r5, [fp, #-180]	; 0xffffff4c
   161b8:	str	sl, [fp, #-184]	; 0xffffff48
   161bc:	strb	r9, [fp, #-176]	; 0xffffff50
   161c0:	beq	161f0 <__assert_fail@plt+0x4550>
   161c4:	mov	r0, r6
   161c8:	str	r6, [fp, #-172]	; 0xffffff54
   161cc:	bl	11904 <towlower@plt>
   161d0:	str	r0, [fp, #-172]	; 0xffffff54
   161d4:	add	r0, r7, r7, lsl #2
   161d8:	add	r0, r8, r0, lsl #3
   161dc:	ldrb	r1, [r0, #8]
   161e0:	cmp	r1, #0
   161e4:	ldrbne	r1, [fp, #-176]	; 0xffffff50
   161e8:	cmpne	r1, #0
   161ec:	bne	162cc <__assert_fail@plt+0x462c>
   161f0:	add	r0, r7, r7, lsl #2
   161f4:	add	r1, r8, r0, lsl #3
   161f8:	ldr	r2, [r1, #4]
   161fc:	ldr	r1, [fp, #-180]	; 0xffffff4c
   16200:	cmp	r2, r1
   16204:	bne	1621c <__assert_fail@plt+0x457c>
   16208:	ldr	r0, [r8, r0, lsl #3]
   1620c:	ldr	r1, [fp, #-184]	; 0xffffff48
   16210:	bl	11928 <memcmp@plt>
   16214:	cmp	r0, #0
   16218:	beq	162dc <__assert_fail@plt+0x463c>
   1621c:	cmp	r7, #0
   16220:	mov	r6, #0
   16224:	beq	1627c <__assert_fail@plt+0x45dc>
   16228:	ldr	r0, [fp, #-188]	; 0xffffff44
   1622c:	ldr	r5, [r0, r7, lsl #2]
   16230:	sub	r7, r7, r5
   16234:	cmp	r5, #0
   16238:	beq	16304 <__assert_fail@plt+0x4664>
   1623c:	mov	r0, r4
   16240:	bl	17038 <__assert_fail@plt+0x5398>
   16244:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16248:	cmp	r0, #0
   1624c:	beq	1625c <__assert_fail@plt+0x45bc>
   16250:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16254:	cmp	r0, #0
   16258:	beq	1634c <__assert_fail@plt+0x46ac>
   1625c:	strb	r6, [fp, #-76]	; 0xffffffb4
   16260:	subs	r5, r5, #1
   16264:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16268:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1626c:	add	r0, r0, r1
   16270:	str	r0, [fp, #-72]	; 0xffffffb8
   16274:	bne	1623c <__assert_fail@plt+0x459c>
   16278:	b	16304 <__assert_fail@plt+0x4664>
   1627c:	mov	r0, r4
   16280:	bl	17038 <__assert_fail@plt+0x5398>
   16284:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16288:	cmp	r0, #0
   1628c:	beq	1629c <__assert_fail@plt+0x45fc>
   16290:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16294:	cmp	r0, #0
   16298:	beq	1634c <__assert_fail@plt+0x46ac>
   1629c:	mov	r7, #0
   162a0:	strb	r7, [fp, #-76]	; 0xffffffb4
   162a4:	strb	r7, [fp, #-132]	; 0xffffff7c
   162a8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   162ac:	ldr	r1, [fp, #-68]	; 0xffffffbc
   162b0:	add	r0, r0, r1
   162b4:	ldr	r1, [fp, #-124]	; 0xffffff84
   162b8:	str	r0, [fp, #-72]	; 0xffffffb8
   162bc:	ldr	r0, [fp, #-128]	; 0xffffff80
   162c0:	add	r0, r0, r1
   162c4:	str	r0, [fp, #-128]	; 0xffffff80
   162c8:	b	16304 <__assert_fail@plt+0x4664>
   162cc:	ldr	r0, [r0, #12]
   162d0:	ldr	r1, [fp, #-172]	; 0xffffff54
   162d4:	cmp	r0, r1
   162d8:	bne	1621c <__assert_fail@plt+0x457c>
   162dc:	mov	r0, #0
   162e0:	add	r7, r7, #1
   162e4:	strb	r0, [fp, #-132]	; 0xffffff7c
   162e8:	ldr	r0, [fp, #-128]	; 0xffffff80
   162ec:	ldr	r1, [fp, #-124]	; 0xffffff84
   162f0:	add	r0, r0, r1
   162f4:	str	r0, [fp, #-128]	; 0xffffff80
   162f8:	ldr	r0, [fp, #-192]	; 0xffffff40
   162fc:	cmp	r7, r0
   16300:	beq	16328 <__assert_fail@plt+0x4688>
   16304:	sub	r0, fp, #144	; 0x90
   16308:	bl	17038 <__assert_fail@plt+0x5398>
   1630c:	ldrb	r9, [fp, #-120]	; 0xffffff88
   16310:	ldr	r6, [fp, #-116]	; 0xffffff8c
   16314:	cmp	r9, #0
   16318:	beq	16188 <__assert_fail@plt+0x44e8>
   1631c:	cmp	r6, #0
   16320:	bne	16188 <__assert_fail@plt+0x44e8>
   16324:	b	16334 <__assert_fail@plt+0x4694>
   16328:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1632c:	ldr	r1, [fp, #-204]	; 0xffffff34
   16330:	str	r0, [r1]
   16334:	mov	r0, r8
   16338:	bl	28734 <__assert_fail@plt+0x16a94>
   1633c:	mov	r5, #1
   16340:	mov	r0, r5
   16344:	sub	sp, fp, #28
   16348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1634c:	bl	11c64 <abort@plt>
   16350:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16354:	add	fp, sp, #28
   16358:	sub	sp, sp, #28
   1635c:	mov	r4, #0
   16360:	cmn	r2, #-536870911	; 0xe0000001
   16364:	bhi	1654c <__assert_fail@plt+0x48ac>
   16368:	str	r0, [fp, #-48]	; 0xffffffd0
   1636c:	lsl	r0, r2, #2
   16370:	mov	r5, r3
   16374:	mov	r8, r2
   16378:	mov	r9, r1
   1637c:	cmp	r0, #4016	; 0xfb0
   16380:	bhi	163a0 <__assert_fail@plt+0x4700>
   16384:	add	r0, r0, #22
   16388:	bic	r0, r0, #7
   1638c:	sub	r0, sp, r0
   16390:	add	r1, r0, #15
   16394:	bic	sl, r1, #15
   16398:	mov	sp, r0
   1639c:	b	163a8 <__assert_fail@plt+0x4708>
   163a0:	bl	286cc <__assert_fail@plt+0x16a2c>
   163a4:	mov	sl, r0
   163a8:	cmp	sl, #0
   163ac:	beq	1654c <__assert_fail@plt+0x48ac>
   163b0:	mov	r0, #1
   163b4:	cmp	r8, #3
   163b8:	str	r5, [fp, #-52]	; 0xffffffcc
   163bc:	str	r0, [sl, #4]
   163c0:	bcc	16460 <__assert_fail@plt+0x47c0>
   163c4:	bl	11a6c <__ctype_b_loc@plt>
   163c8:	ldr	r5, [r0]
   163cc:	mov	r4, #0
   163d0:	mov	r7, #2
   163d4:	str	r8, [fp, #-36]	; 0xffffffdc
   163d8:	add	r0, r9, r7
   163dc:	ldrb	r6, [r0, #-1]
   163e0:	add	r0, r5, r6, lsl #1
   163e4:	ldrb	r0, [r0, #1]
   163e8:	tst	r0, #1
   163ec:	beq	16408 <__assert_fail@plt+0x4768>
   163f0:	bl	11a48 <__ctype_tolower_loc@plt>
   163f4:	ldr	r0, [r0]
   163f8:	ldrb	r6, [r0, r6, lsl #2]
   163fc:	b	16408 <__assert_fail@plt+0x4768>
   16400:	ldr	r0, [sl, r4, lsl #2]
   16404:	sub	r4, r4, r0
   16408:	ldrb	r8, [r9, r4]
   1640c:	add	r0, r5, r8, lsl #1
   16410:	ldrb	r0, [r0, #1]
   16414:	tst	r0, #1
   16418:	beq	16428 <__assert_fail@plt+0x4788>
   1641c:	bl	11a48 <__ctype_tolower_loc@plt>
   16420:	ldr	r0, [r0]
   16424:	ldr	r8, [r0, r8, lsl #2]
   16428:	cmp	r6, r8
   1642c:	beq	16444 <__assert_fail@plt+0x47a4>
   16430:	cmp	r4, #0
   16434:	bne	16400 <__assert_fail@plt+0x4760>
   16438:	mov	r4, #0
   1643c:	mov	r0, r7
   16440:	b	1644c <__assert_fail@plt+0x47ac>
   16444:	add	r4, r4, #1
   16448:	sub	r0, r7, r4
   1644c:	ldr	r8, [fp, #-36]	; 0xffffffdc
   16450:	str	r0, [sl, r7, lsl #2]
   16454:	add	r7, r7, #1
   16458:	cmp	r7, r8
   1645c:	bne	163d8 <__assert_fail@plt+0x4738>
   16460:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16464:	ldr	r7, [fp, #-48]	; 0xffffffd0
   16468:	mov	r5, #0
   1646c:	str	r5, [r0]
   16470:	ldrb	r6, [r7]
   16474:	cmp	r6, #0
   16478:	beq	16540 <__assert_fail@plt+0x48a0>
   1647c:	bl	11a6c <__ctype_b_loc@plt>
   16480:	ldr	r1, [r0]
   16484:	str	r7, [fp, #-40]	; 0xffffffd8
   16488:	str	r1, [fp, #-44]	; 0xffffffd4
   1648c:	ldrb	r4, [r9, r5]
   16490:	add	r0, r1, r4, lsl #1
   16494:	ldrb	r0, [r0, #1]
   16498:	tst	r0, #1
   1649c:	beq	164b0 <__assert_fail@plt+0x4810>
   164a0:	bl	11a48 <__ctype_tolower_loc@plt>
   164a4:	ldr	r0, [r0]
   164a8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   164ac:	ldr	r4, [r0, r4, lsl #2]
   164b0:	uxtb	r6, r6
   164b4:	add	r0, r1, r6, lsl #1
   164b8:	ldrb	r0, [r0, #1]
   164bc:	tst	r0, #1
   164c0:	beq	164d4 <__assert_fail@plt+0x4834>
   164c4:	bl	11a48 <__ctype_tolower_loc@plt>
   164c8:	ldr	r0, [r0]
   164cc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   164d0:	ldr	r6, [r0, r6, lsl #2]
   164d4:	cmp	r4, r6
   164d8:	bne	164f0 <__assert_fail@plt+0x4850>
   164dc:	add	r5, r5, #1
   164e0:	cmp	r5, r8
   164e4:	beq	16534 <__assert_fail@plt+0x4894>
   164e8:	add	r7, r7, #1
   164ec:	b	16524 <__assert_fail@plt+0x4884>
   164f0:	cmp	r5, #0
   164f4:	beq	16510 <__assert_fail@plt+0x4870>
   164f8:	ldr	r0, [sl, r5, lsl #2]
   164fc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16500:	add	r2, r2, r0
   16504:	sub	r5, r5, r0
   16508:	str	r2, [fp, #-40]	; 0xffffffd8
   1650c:	b	16524 <__assert_fail@plt+0x4884>
   16510:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16514:	add	r7, r7, #1
   16518:	mov	r5, #0
   1651c:	add	r0, r0, #1
   16520:	str	r0, [fp, #-40]	; 0xffffffd8
   16524:	ldrb	r6, [r7]
   16528:	cmp	r6, #0
   1652c:	bne	1648c <__assert_fail@plt+0x47ec>
   16530:	b	16540 <__assert_fail@plt+0x48a0>
   16534:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16538:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1653c:	str	r1, [r0]
   16540:	mov	r0, sl
   16544:	bl	28734 <__assert_fail@plt+0x16a94>
   16548:	mov	r4, #1
   1654c:	mov	r0, r4
   16550:	sub	sp, fp, #28
   16554:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16558:	push	{r4, r5, r6, sl, fp, lr}
   1655c:	add	fp, sp, #16
   16560:	sub	sp, sp, #56	; 0x38
   16564:	mov	r5, r0
   16568:	bl	119a0 <__ctype_get_mb_cur_max@plt>
   1656c:	cmp	r0, #2
   16570:	bcc	165fc <__assert_fail@plt+0x495c>
   16574:	mov	r4, #0
   16578:	mov	r0, sp
   1657c:	str	r4, [sp, #8]
   16580:	str	r4, [sp, #4]
   16584:	strb	r4, [sp]
   16588:	str	r5, [sp, #16]
   1658c:	strb	r4, [sp, #12]
   16590:	bl	17038 <__assert_fail@plt+0x5398>
   16594:	ldrb	r0, [sp, #24]
   16598:	cmp	r0, #0
   1659c:	beq	165ac <__assert_fail@plt+0x490c>
   165a0:	ldr	r0, [sp, #28]
   165a4:	cmp	r0, #0
   165a8:	beq	165f0 <__assert_fail@plt+0x4950>
   165ac:	mov	r6, #0
   165b0:	mov	r5, sp
   165b4:	mov	r4, #0
   165b8:	strb	r6, [sp, #12]
   165bc:	ldr	r0, [sp, #16]
   165c0:	ldr	r1, [sp, #20]
   165c4:	add	r0, r0, r1
   165c8:	str	r0, [sp, #16]
   165cc:	mov	r0, r5
   165d0:	bl	17038 <__assert_fail@plt+0x5398>
   165d4:	ldrb	r1, [sp, #24]
   165d8:	ldr	r0, [sp, #28]
   165dc:	add	r4, r4, #1
   165e0:	cmp	r1, #0
   165e4:	beq	165b8 <__assert_fail@plt+0x4918>
   165e8:	cmp	r0, #0
   165ec:	bne	165b8 <__assert_fail@plt+0x4918>
   165f0:	mov	r0, r4
   165f4:	sub	sp, fp, #16
   165f8:	pop	{r4, r5, r6, sl, fp, pc}
   165fc:	mov	r0, r5
   16600:	sub	sp, fp, #16
   16604:	pop	{r4, r5, r6, sl, fp, lr}
   16608:	b	11a9c <strlen@plt>
   1660c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16610:	add	fp, sp, #28
   16614:	sub	sp, sp, #308	; 0x134
   16618:	mov	r5, r1
   1661c:	mov	r7, r0
   16620:	bl	119a0 <__ctype_get_mb_cur_max@plt>
   16624:	cmp	r0, #2
   16628:	bcc	169a4 <__assert_fail@plt+0x4d04>
   1662c:	mov	r4, #0
   16630:	sub	r0, fp, #88	; 0x58
   16634:	str	r4, [fp, #-80]	; 0xffffffb0
   16638:	str	r4, [fp, #-84]	; 0xffffffac
   1663c:	strb	r4, [fp, #-88]	; 0xffffffa8
   16640:	str	r5, [fp, #-72]	; 0xffffffb8
   16644:	strb	r4, [fp, #-76]	; 0xffffffb4
   16648:	bl	17038 <__assert_fail@plt+0x5398>
   1664c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16650:	cmp	r0, #0
   16654:	beq	16664 <__assert_fail@plt+0x49c4>
   16658:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1665c:	cmp	r0, #0
   16660:	beq	16ac4 <__assert_fail@plt+0x4e24>
   16664:	add	r0, sp, #136	; 0x88
   16668:	str	r4, [fp, #-136]	; 0xffffff78
   1666c:	str	r4, [fp, #-140]	; 0xffffff74
   16670:	strb	r4, [fp, #-144]	; 0xffffff70
   16674:	str	r5, [fp, #-128]	; 0xffffff80
   16678:	str	r4, [sp, #144]	; 0x90
   1667c:	str	r4, [sp, #140]	; 0x8c
   16680:	str	r7, [sp, #152]	; 0x98
   16684:	strb	r4, [sp, #136]	; 0x88
   16688:	strb	r4, [fp, #-132]	; 0xffffff7c
   1668c:	str	r7, [sp, #12]
   16690:	strb	r4, [sp, #148]	; 0x94
   16694:	bl	17038 <__assert_fail@plt+0x5398>
   16698:	ldrb	r0, [sp, #160]	; 0xa0
   1669c:	cmp	r0, #0
   166a0:	beq	166b0 <__assert_fail@plt+0x4a10>
   166a4:	ldr	r0, [sp, #164]	; 0xa4
   166a8:	cmp	r0, #0
   166ac:	beq	16ad0 <__assert_fail@plt+0x4e30>
   166b0:	add	r0, sp, #24
   166b4:	mov	sl, #0
   166b8:	sub	r7, fp, #144	; 0x90
   166bc:	mov	r1, #0
   166c0:	mov	r6, #0
   166c4:	mov	r9, #0
   166c8:	add	r0, r0, #4
   166cc:	str	r0, [sp, #8]
   166d0:	mov	r0, #1
   166d4:	str	r0, [sp, #16]
   166d8:	add	r0, r9, r9, lsl #2
   166dc:	mov	r8, r6
   166e0:	cmp	r6, r0
   166e4:	bcc	16794 <__assert_fail@plt+0x4af4>
   166e8:	ldr	r0, [sp, #16]
   166ec:	tst	r0, #1
   166f0:	beq	16794 <__assert_fail@plt+0x4af4>
   166f4:	cmp	r9, #10
   166f8:	bcc	16794 <__assert_fail@plt+0x4af4>
   166fc:	subs	r0, r8, r1
   16700:	beq	16744 <__assert_fail@plt+0x4aa4>
   16704:	sub	r6, r1, r8
   16708:	mov	r0, r7
   1670c:	bl	17038 <__assert_fail@plt+0x5398>
   16710:	ldrb	r0, [fp, #-120]	; 0xffffff88
   16714:	cmp	r0, #0
   16718:	beq	16728 <__assert_fail@plt+0x4a88>
   1671c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16720:	cmp	r0, #0
   16724:	beq	16744 <__assert_fail@plt+0x4aa4>
   16728:	strb	sl, [fp, #-132]	; 0xffffff7c
   1672c:	adds	r6, r6, #1
   16730:	ldr	r0, [fp, #-128]	; 0xffffff80
   16734:	ldr	r1, [fp, #-124]	; 0xffffff84
   16738:	add	r0, r0, r1
   1673c:	str	r0, [fp, #-128]	; 0xffffff80
   16740:	bne	16708 <__assert_fail@plt+0x4a68>
   16744:	mov	r0, r7
   16748:	bl	17038 <__assert_fail@plt+0x5398>
   1674c:	ldrb	r0, [fp, #-120]	; 0xffffff88
   16750:	cmp	r0, #0
   16754:	beq	16790 <__assert_fail@plt+0x4af0>
   16758:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1675c:	mov	r1, r8
   16760:	cmp	r0, #0
   16764:	bne	16794 <__assert_fail@plt+0x4af4>
   16768:	ldr	r0, [sp, #12]
   1676c:	mov	r1, r5
   16770:	add	r2, sp, #80	; 0x50
   16774:	bl	16af8 <__assert_fail@plt+0x4e58>
   16778:	mov	r1, #0
   1677c:	cmp	r0, #0
   16780:	str	r1, [sp, #16]
   16784:	mov	r1, r8
   16788:	beq	16794 <__assert_fail@plt+0x4af4>
   1678c:	b	16aec <__assert_fail@plt+0x4e4c>
   16790:	mov	r1, r8
   16794:	ldrb	r0, [sp, #160]	; 0xa0
   16798:	add	r6, r8, #1
   1679c:	str	r1, [sp, #20]
   167a0:	cmp	r0, #0
   167a4:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   167a8:	cmpne	r0, #0
   167ac:	bne	167d8 <__assert_fail@plt+0x4b38>
   167b0:	ldr	r2, [sp, #156]	; 0x9c
   167b4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   167b8:	cmp	r2, r0
   167bc:	bne	16960 <__assert_fail@plt+0x4cc0>
   167c0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   167c4:	ldr	r0, [sp, #152]	; 0x98
   167c8:	bl	11928 <memcmp@plt>
   167cc:	cmp	r0, #0
   167d0:	bne	16960 <__assert_fail@plt+0x4cc0>
   167d4:	b	167e8 <__assert_fail@plt+0x4b48>
   167d8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   167dc:	ldr	r1, [sp, #164]	; 0xa4
   167e0:	cmp	r1, r0
   167e4:	bne	16960 <__assert_fail@plt+0x4cc0>
   167e8:	str	r9, [sp, #4]
   167ec:	add	r1, sp, #136	; 0x88
   167f0:	mov	ip, r5
   167f4:	add	r0, sp, #80	; 0x50
   167f8:	ldm	r1!, {r2, r3, r5, r6}
   167fc:	stmia	r0!, {r2, r3, r5, r6}
   16800:	ldm	r1!, {r2, r3, r4, r5, r6}
   16804:	stmia	r0!, {r2, r3, r4, r5, r6}
   16808:	ldm	r1, {r2, r3, r4, r5, r6}
   1680c:	stm	r0, {r2, r3, r4, r5, r6}
   16810:	strb	sl, [sp, #92]	; 0x5c
   16814:	str	ip, [sp, #40]	; 0x28
   16818:	strb	sl, [sp, #24]
   1681c:	mov	r5, ip
   16820:	ldr	r0, [sp, #96]	; 0x60
   16824:	ldr	r1, [sp, #100]	; 0x64
   16828:	add	r0, r0, r1
   1682c:	str	r0, [sp, #96]	; 0x60
   16830:	ldr	r0, [sp, #8]
   16834:	str	sl, [r0]
   16838:	str	sl, [r0, #4]
   1683c:	add	r0, sp, #24
   16840:	strb	sl, [sp, #36]	; 0x24
   16844:	bl	17038 <__assert_fail@plt+0x5398>
   16848:	ldrb	r0, [sp, #48]	; 0x30
   1684c:	cmp	r0, #0
   16850:	beq	16860 <__assert_fail@plt+0x4bc0>
   16854:	ldr	r0, [sp, #52]	; 0x34
   16858:	cmp	r0, #0
   1685c:	beq	16af4 <__assert_fail@plt+0x4e54>
   16860:	strb	sl, [sp, #36]	; 0x24
   16864:	ldr	r0, [sp, #40]	; 0x28
   16868:	ldr	r1, [sp, #44]	; 0x2c
   1686c:	add	r0, r0, r1
   16870:	str	r0, [sp, #40]	; 0x28
   16874:	add	r0, sp, #24
   16878:	bl	17038 <__assert_fail@plt+0x5398>
   1687c:	ldrb	r0, [sp, #48]	; 0x30
   16880:	cmp	r0, #0
   16884:	beq	16894 <__assert_fail@plt+0x4bf4>
   16888:	ldr	r0, [sp, #52]	; 0x34
   1688c:	cmp	r0, #0
   16890:	beq	16adc <__assert_fail@plt+0x4e3c>
   16894:	add	r6, r8, #2
   16898:	add	r0, sp, #80	; 0x50
   1689c:	bl	17038 <__assert_fail@plt+0x5398>
   168a0:	ldr	r0, [sp, #108]	; 0x6c
   168a4:	ldrb	r1, [sp, #104]	; 0x68
   168a8:	cmp	r0, #0
   168ac:	bne	168b8 <__assert_fail@plt+0x4c18>
   168b0:	cmp	r1, #0
   168b4:	bne	16acc <__assert_fail@plt+0x4e2c>
   168b8:	cmp	r1, #0
   168bc:	ldrbne	r1, [sp, #48]	; 0x30
   168c0:	cmpne	r1, #0
   168c4:	bne	16900 <__assert_fail@plt+0x4c60>
   168c8:	ldr	r4, [sp, #100]	; 0x64
   168cc:	ldr	r0, [sp, #44]	; 0x2c
   168d0:	cmp	r4, r0
   168d4:	bne	1695c <__assert_fail@plt+0x4cbc>
   168d8:	ldr	r8, [sp, #40]	; 0x28
   168dc:	ldr	r9, [sp, #96]	; 0x60
   168e0:	mov	r2, r4
   168e4:	mov	r0, r9
   168e8:	mov	r1, r8
   168ec:	bl	11928 <memcmp@plt>
   168f0:	cmp	r0, #0
   168f4:	mov	r0, r4
   168f8:	beq	1691c <__assert_fail@plt+0x4c7c>
   168fc:	b	1695c <__assert_fail@plt+0x4cbc>
   16900:	ldr	r1, [sp, #52]	; 0x34
   16904:	cmp	r0, r1
   16908:	bne	1695c <__assert_fail@plt+0x4cbc>
   1690c:	ldr	r8, [sp, #40]	; 0x28
   16910:	ldr	r4, [sp, #44]	; 0x2c
   16914:	ldr	r9, [sp, #96]	; 0x60
   16918:	ldr	r0, [sp, #100]	; 0x64
   1691c:	add	r0, r9, r0
   16920:	strb	sl, [sp, #92]	; 0x5c
   16924:	strb	sl, [sp, #36]	; 0x24
   16928:	str	r0, [sp, #96]	; 0x60
   1692c:	add	r0, r8, r4
   16930:	str	r0, [sp, #40]	; 0x28
   16934:	add	r0, sp, #24
   16938:	bl	17038 <__assert_fail@plt+0x5398>
   1693c:	ldrb	r0, [sp, #48]	; 0x30
   16940:	add	r6, r6, #1
   16944:	cmp	r0, #0
   16948:	beq	16898 <__assert_fail@plt+0x4bf8>
   1694c:	ldr	r0, [sp, #52]	; 0x34
   16950:	cmp	r0, #0
   16954:	bne	16898 <__assert_fail@plt+0x4bf8>
   16958:	b	16adc <__assert_fail@plt+0x4e3c>
   1695c:	ldr	r9, [sp, #4]
   16960:	mov	r4, #0
   16964:	add	r9, r9, #1
   16968:	strb	r4, [sp, #148]	; 0x94
   1696c:	ldr	r0, [sp, #152]	; 0x98
   16970:	ldr	r1, [sp, #156]	; 0x9c
   16974:	add	r0, r0, r1
   16978:	str	r0, [sp, #152]	; 0x98
   1697c:	add	r0, sp, #136	; 0x88
   16980:	bl	17038 <__assert_fail@plt+0x5398>
   16984:	ldrb	r0, [sp, #160]	; 0xa0
   16988:	ldr	r1, [sp, #20]
   1698c:	cmp	r0, #0
   16990:	beq	166d8 <__assert_fail@plt+0x4a38>
   16994:	ldr	r0, [sp, #164]	; 0xa4
   16998:	cmp	r0, #0
   1699c:	bne	166d8 <__assert_fail@plt+0x4a38>
   169a0:	b	16ad0 <__assert_fail@plt+0x4e30>
   169a4:	ldrb	r6, [r5]
   169a8:	cmp	r6, #0
   169ac:	beq	16ac4 <__assert_fail@plt+0x4e24>
   169b0:	ldrb	r9, [r7]
   169b4:	cmp	r9, #0
   169b8:	beq	16acc <__assert_fail@plt+0x4e2c>
   169bc:	mov	r3, #1
   169c0:	mov	ip, #0
   169c4:	mov	lr, r5
   169c8:	mov	r8, #0
   169cc:	mov	sl, #0
   169d0:	str	r6, [sp, #16]
   169d4:	add	r0, sl, sl, lsl #2
   169d8:	cmp	r8, r0
   169dc:	bcc	16a6c <__assert_fail@plt+0x4dcc>
   169e0:	tst	r3, #1
   169e4:	beq	16a6c <__assert_fail@plt+0x4dcc>
   169e8:	cmp	sl, #10
   169ec:	bcc	16a6c <__assert_fail@plt+0x4dcc>
   169f0:	cmp	lr, #0
   169f4:	str	r3, [sp, #20]
   169f8:	beq	16a2c <__assert_fail@plt+0x4d8c>
   169fc:	sub	r1, r8, ip
   16a00:	mov	r0, lr
   16a04:	mov	r6, lr
   16a08:	bl	11b74 <strnlen@plt>
   16a0c:	mov	lr, r6
   16a10:	mov	ip, r8
   16a14:	ldrb	r0, [lr, r0]!
   16a18:	cmp	r0, #0
   16a1c:	beq	16a2c <__assert_fail@plt+0x4d8c>
   16a20:	ldr	r3, [sp, #20]
   16a24:	mov	ip, r8
   16a28:	b	16a68 <__assert_fail@plt+0x4dc8>
   16a2c:	mov	r0, r5
   16a30:	mov	r4, ip
   16a34:	bl	11a9c <strlen@plt>
   16a38:	mov	r2, r0
   16a3c:	mov	r0, r7
   16a40:	mov	r1, r5
   16a44:	sub	r3, fp, #88	; 0x58
   16a48:	bl	16ef0 <__assert_fail@plt+0x5250>
   16a4c:	cmp	r0, #0
   16a50:	bne	16ae4 <__assert_fail@plt+0x4e44>
   16a54:	ldr	r3, [sp, #20]
   16a58:	ldrb	r9, [r7]
   16a5c:	mov	lr, #0
   16a60:	mov	ip, r4
   16a64:	and	r3, r3, r0
   16a68:	ldr	r6, [sp, #16]
   16a6c:	uxtb	r0, r9
   16a70:	cmp	r0, r6
   16a74:	bne	16aa8 <__assert_fail@plt+0x4e08>
   16a78:	mov	r0, #1
   16a7c:	ldrb	r1, [r5, r0]
   16a80:	cmp	r1, #0
   16a84:	beq	16ac4 <__assert_fail@plt+0x4e24>
   16a88:	ldrb	r2, [r7, r0]
   16a8c:	cmp	r2, #0
   16a90:	beq	16acc <__assert_fail@plt+0x4e2c>
   16a94:	add	r0, r0, #1
   16a98:	cmp	r2, r1
   16a9c:	beq	16a7c <__assert_fail@plt+0x4ddc>
   16aa0:	add	r8, r8, r0
   16aa4:	b	16aac <__assert_fail@plt+0x4e0c>
   16aa8:	add	r8, r8, #1
   16aac:	ldrb	r9, [r7, #1]!
   16ab0:	add	sl, sl, #1
   16ab4:	mov	r4, #0
   16ab8:	cmp	r9, #0
   16abc:	bne	169d4 <__assert_fail@plt+0x4d34>
   16ac0:	b	16ad0 <__assert_fail@plt+0x4e30>
   16ac4:	mov	r4, r7
   16ac8:	b	16ad0 <__assert_fail@plt+0x4e30>
   16acc:	mov	r4, #0
   16ad0:	mov	r0, r4
   16ad4:	sub	sp, fp, #28
   16ad8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16adc:	ldr	r4, [sp, #152]	; 0x98
   16ae0:	b	16ad0 <__assert_fail@plt+0x4e30>
   16ae4:	ldr	r4, [fp, #-88]	; 0xffffffa8
   16ae8:	b	16ad0 <__assert_fail@plt+0x4e30>
   16aec:	ldr	r4, [sp, #80]	; 0x50
   16af0:	b	16ad0 <__assert_fail@plt+0x4e30>
   16af4:	bl	11c64 <abort@plt>
   16af8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16afc:	add	fp, sp, #28
   16b00:	sub	sp, sp, #132	; 0x84
   16b04:	mov	r4, r0
   16b08:	mov	r0, r1
   16b0c:	mov	r8, r2
   16b10:	mov	r7, r1
   16b14:	bl	16558 <__assert_fail@plt+0x48b8>
   16b18:	mov	sl, r0
   16b1c:	movw	r0, #47662	; 0xba2e
   16b20:	mov	r5, #0
   16b24:	movt	r0, #744	; 0x2e8
   16b28:	cmp	sl, r0
   16b2c:	bhi	16ee0 <__assert_fail@plt+0x5240>
   16b30:	mov	r0, #44	; 0x2c
   16b34:	mul	r0, sl, r0
   16b38:	cmp	r0, #4016	; 0xfb0
   16b3c:	bhi	16b5c <__assert_fail@plt+0x4ebc>
   16b40:	add	r0, r0, #22
   16b44:	bic	r0, r0, #7
   16b48:	sub	r0, sp, r0
   16b4c:	add	r1, r0, #15
   16b50:	bic	r9, r1, #15
   16b54:	mov	sp, r0
   16b58:	b	16b64 <__assert_fail@plt+0x4ec4>
   16b5c:	bl	286cc <__assert_fail@plt+0x16a2c>
   16b60:	mov	r9, r0
   16b64:	cmp	r9, #0
   16b68:	beq	16ee0 <__assert_fail@plt+0x5240>
   16b6c:	sub	r6, fp, #88	; 0x58
   16b70:	str	r4, [fp, #-160]	; 0xffffff60
   16b74:	mov	r4, #0
   16b78:	mov	r0, r6
   16b7c:	str	r4, [fp, #-80]	; 0xffffffb0
   16b80:	str	r4, [fp, #-84]	; 0xffffffac
   16b84:	strb	r4, [fp, #-88]	; 0xffffffa8
   16b88:	str	r7, [fp, #-72]	; 0xffffffb8
   16b8c:	strb	r4, [fp, #-76]	; 0xffffffb4
   16b90:	bl	17038 <__assert_fail@plt+0x5398>
   16b94:	add	r0, sl, sl, lsl #2
   16b98:	add	r3, r9, r0, lsl #3
   16b9c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16ba0:	str	r3, [fp, #-148]	; 0xffffff6c
   16ba4:	cmp	r0, #0
   16ba8:	beq	16bb8 <__assert_fail@plt+0x4f18>
   16bac:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16bb0:	cmp	r0, #0
   16bb4:	beq	16c3c <__assert_fail@plt+0x4f9c>
   16bb8:	add	r7, r9, #16
   16bbc:	add	r5, r6, #32
   16bc0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16bc4:	cmp	r0, r5
   16bc8:	bne	16be0 <__assert_fail@plt+0x4f40>
   16bcc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16bd0:	mov	r0, r7
   16bd4:	mov	r1, r5
   16bd8:	bl	118e0 <memcpy@plt>
   16bdc:	mov	r0, r7
   16be0:	str	r0, [r7, #-16]
   16be4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16be8:	str	r0, [r7, #-12]
   16bec:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16bf0:	strb	r0, [r7, #-8]
   16bf4:	cmp	r0, #0
   16bf8:	ldrne	r0, [fp, #-60]	; 0xffffffc4
   16bfc:	strne	r0, [r7, #-4]
   16c00:	strb	r4, [fp, #-76]	; 0xffffffb4
   16c04:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16c08:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16c0c:	add	r0, r0, r1
   16c10:	str	r0, [fp, #-72]	; 0xffffffb8
   16c14:	mov	r0, r6
   16c18:	bl	17038 <__assert_fail@plt+0x5398>
   16c1c:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   16c20:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16c24:	ldr	r3, [fp, #-148]	; 0xffffff6c
   16c28:	add	r7, r7, #40	; 0x28
   16c2c:	cmp	r1, #0
   16c30:	beq	16bc0 <__assert_fail@plt+0x4f20>
   16c34:	cmp	r0, #0
   16c38:	bne	16bc0 <__assert_fail@plt+0x4f20>
   16c3c:	mov	r0, #1
   16c40:	cmp	sl, #3
   16c44:	str	r8, [fp, #-156]	; 0xffffff64
   16c48:	str	sl, [fp, #-152]	; 0xffffff68
   16c4c:	str	r0, [r3, #4]
   16c50:	bcc	16d10 <__assert_fail@plt+0x5070>
   16c54:	mov	r4, #2
   16c58:	mov	r5, #0
   16c5c:	add	r0, r4, r4, lsl #2
   16c60:	add	r0, r9, r0, lsl #3
   16c64:	ldrb	r8, [r0, #-32]	; 0xffffffe0
   16c68:	sub	r7, r0, #28
   16c6c:	sub	sl, r0, #40	; 0x28
   16c70:	sub	r6, r0, #36	; 0x24
   16c74:	b	16c80 <__assert_fail@plt+0x4fe0>
   16c78:	ldr	r0, [r3, r5, lsl #2]
   16c7c:	sub	r5, r5, r0
   16c80:	cmp	r8, #0
   16c84:	beq	16cb0 <__assert_fail@plt+0x5010>
   16c88:	add	r0, r5, r5, lsl #2
   16c8c:	add	r0, r9, r0, lsl #3
   16c90:	ldrb	r1, [r0, #8]
   16c94:	cmp	r1, #0
   16c98:	beq	16cb0 <__assert_fail@plt+0x5010>
   16c9c:	ldr	r0, [r0, #12]
   16ca0:	ldr	r1, [r7]
   16ca4:	cmp	r1, r0
   16ca8:	bne	16ce0 <__assert_fail@plt+0x5040>
   16cac:	b	16cf4 <__assert_fail@plt+0x5054>
   16cb0:	add	r0, r5, r5, lsl #2
   16cb4:	ldr	r2, [r6]
   16cb8:	add	r1, r9, r0, lsl #3
   16cbc:	ldr	r1, [r1, #4]
   16cc0:	cmp	r2, r1
   16cc4:	bne	16ce0 <__assert_fail@plt+0x5040>
   16cc8:	ldr	r1, [r9, r0, lsl #3]
   16ccc:	ldr	r0, [sl]
   16cd0:	bl	11928 <memcmp@plt>
   16cd4:	ldr	r3, [fp, #-148]	; 0xffffff6c
   16cd8:	cmp	r0, #0
   16cdc:	beq	16cf4 <__assert_fail@plt+0x5054>
   16ce0:	cmp	r5, #0
   16ce4:	bne	16c78 <__assert_fail@plt+0x4fd8>
   16ce8:	mov	r5, #0
   16cec:	mov	r0, r4
   16cf0:	b	16cfc <__assert_fail@plt+0x505c>
   16cf4:	add	r5, r5, #1
   16cf8:	sub	r0, r4, r5
   16cfc:	str	r0, [r3, r4, lsl #2]
   16d00:	ldr	r0, [fp, #-152]	; 0xffffff68
   16d04:	add	r4, r4, #1
   16d08:	cmp	r4, r0
   16d0c:	bne	16c5c <__assert_fail@plt+0x4fbc>
   16d10:	ldr	r8, [fp, #-156]	; 0xffffff64
   16d14:	ldr	r0, [fp, #-160]	; 0xffffff60
   16d18:	mov	r6, #0
   16d1c:	str	r6, [r8]
   16d20:	str	r6, [fp, #-80]	; 0xffffffb0
   16d24:	str	r6, [fp, #-84]	; 0xffffffac
   16d28:	strb	r6, [fp, #-88]	; 0xffffffa8
   16d2c:	str	r0, [fp, #-72]	; 0xffffffb8
   16d30:	str	r6, [fp, #-136]	; 0xffffff78
   16d34:	str	r6, [fp, #-140]	; 0xffffff74
   16d38:	str	r0, [fp, #-128]	; 0xffffff80
   16d3c:	sub	r0, fp, #144	; 0x90
   16d40:	strb	r6, [fp, #-144]	; 0xffffff70
   16d44:	strb	r6, [fp, #-76]	; 0xffffffb4
   16d48:	strb	r6, [fp, #-132]	; 0xffffff7c
   16d4c:	bl	17038 <__assert_fail@plt+0x5398>
   16d50:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16d54:	ldrb	r1, [fp, #-120]	; 0xffffff88
   16d58:	cmp	r0, #0
   16d5c:	bne	16d68 <__assert_fail@plt+0x50c8>
   16d60:	cmp	r1, #0
   16d64:	bne	16ed4 <__assert_fail@plt+0x5234>
   16d68:	clz	r1, r1
   16d6c:	sub	r4, fp, #88	; 0x58
   16d70:	mov	sl, #0
   16d74:	lsr	r1, r1, #5
   16d78:	add	r2, sl, sl, lsl #2
   16d7c:	tst	r1, #1
   16d80:	add	r3, r9, r2, lsl #3
   16d84:	bne	16dac <__assert_fail@plt+0x510c>
   16d88:	ldrb	r1, [r3, #8]
   16d8c:	cmp	r1, #0
   16d90:	beq	16dac <__assert_fail@plt+0x510c>
   16d94:	ldr	r1, [r3, #12]
   16d98:	cmp	r1, r0
   16d9c:	bne	16dd8 <__assert_fail@plt+0x5138>
   16da0:	ldr	r7, [fp, #-128]	; 0xffffff80
   16da4:	ldr	r5, [fp, #-124]	; 0xffffff84
   16da8:	b	16e34 <__assert_fail@plt+0x5194>
   16dac:	ldr	r5, [r3, #4]
   16db0:	ldr	r0, [fp, #-124]	; 0xffffff84
   16db4:	cmp	r5, r0
   16db8:	bne	16dd8 <__assert_fail@plt+0x5138>
   16dbc:	ldr	r7, [fp, #-128]	; 0xffffff80
   16dc0:	ldr	r0, [r9, r2, lsl #3]
   16dc4:	mov	r2, r5
   16dc8:	mov	r1, r7
   16dcc:	bl	11928 <memcmp@plt>
   16dd0:	cmp	r0, #0
   16dd4:	beq	16e34 <__assert_fail@plt+0x5194>
   16dd8:	cmp	sl, #0
   16ddc:	beq	16e54 <__assert_fail@plt+0x51b4>
   16de0:	ldr	r0, [fp, #-148]	; 0xffffff6c
   16de4:	ldr	r5, [r0, sl, lsl #2]
   16de8:	sub	sl, sl, r5
   16dec:	cmp	r5, #0
   16df0:	beq	16ea0 <__assert_fail@plt+0x5200>
   16df4:	mov	r0, r4
   16df8:	bl	17038 <__assert_fail@plt+0x5398>
   16dfc:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16e00:	cmp	r0, #0
   16e04:	beq	16e14 <__assert_fail@plt+0x5174>
   16e08:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16e0c:	cmp	r0, #0
   16e10:	beq	16eec <__assert_fail@plt+0x524c>
   16e14:	strb	r6, [fp, #-76]	; 0xffffffb4
   16e18:	subs	r5, r5, #1
   16e1c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16e20:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16e24:	add	r0, r0, r1
   16e28:	str	r0, [fp, #-72]	; 0xffffffb8
   16e2c:	bne	16df4 <__assert_fail@plt+0x5154>
   16e30:	b	16ea0 <__assert_fail@plt+0x5200>
   16e34:	add	r0, r7, r5
   16e38:	strb	r6, [fp, #-132]	; 0xffffff7c
   16e3c:	add	sl, sl, #1
   16e40:	str	r0, [fp, #-128]	; 0xffffff80
   16e44:	ldr	r0, [fp, #-152]	; 0xffffff68
   16e48:	cmp	sl, r0
   16e4c:	bne	16ea0 <__assert_fail@plt+0x5200>
   16e50:	b	16ecc <__assert_fail@plt+0x522c>
   16e54:	mov	r0, r4
   16e58:	bl	17038 <__assert_fail@plt+0x5398>
   16e5c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16e60:	cmp	r0, #0
   16e64:	beq	16e74 <__assert_fail@plt+0x51d4>
   16e68:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16e6c:	cmp	r0, #0
   16e70:	beq	16eec <__assert_fail@plt+0x524c>
   16e74:	mov	sl, #0
   16e78:	strb	sl, [fp, #-76]	; 0xffffffb4
   16e7c:	strb	sl, [fp, #-132]	; 0xffffff7c
   16e80:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16e84:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16e88:	add	r0, r0, r1
   16e8c:	ldr	r1, [fp, #-124]	; 0xffffff84
   16e90:	str	r0, [fp, #-72]	; 0xffffffb8
   16e94:	ldr	r0, [fp, #-128]	; 0xffffff80
   16e98:	add	r0, r0, r1
   16e9c:	str	r0, [fp, #-128]	; 0xffffff80
   16ea0:	sub	r0, fp, #144	; 0x90
   16ea4:	bl	17038 <__assert_fail@plt+0x5398>
   16ea8:	ldrb	r2, [fp, #-120]	; 0xffffff88
   16eac:	clz	r0, r2
   16eb0:	lsr	r1, r0, #5
   16eb4:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16eb8:	cmp	r0, #0
   16ebc:	bne	16d78 <__assert_fail@plt+0x50d8>
   16ec0:	cmp	r2, #0
   16ec4:	beq	16d78 <__assert_fail@plt+0x50d8>
   16ec8:	b	16ed4 <__assert_fail@plt+0x5234>
   16ecc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16ed0:	str	r0, [r8]
   16ed4:	mov	r0, r9
   16ed8:	bl	28734 <__assert_fail@plt+0x16a94>
   16edc:	mov	r5, #1
   16ee0:	mov	r0, r5
   16ee4:	sub	sp, fp, #28
   16ee8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16eec:	bl	11c64 <abort@plt>
   16ef0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16ef4:	add	fp, sp, #24
   16ef8:	mov	r4, #0
   16efc:	cmn	r2, #-536870911	; 0xe0000001
   16f00:	bhi	1702c <__assert_fail@plt+0x538c>
   16f04:	mov	r7, r0
   16f08:	lsl	r0, r2, #2
   16f0c:	mov	r8, r3
   16f10:	mov	r5, r2
   16f14:	mov	r6, r1
   16f18:	cmp	r0, #4016	; 0xfb0
   16f1c:	bhi	16f3c <__assert_fail@plt+0x529c>
   16f20:	add	r0, r0, #22
   16f24:	bic	r0, r0, #7
   16f28:	sub	r1, sp, r0
   16f2c:	add	r0, r1, #15
   16f30:	bic	r0, r0, #15
   16f34:	mov	sp, r1
   16f38:	b	16f40 <__assert_fail@plt+0x52a0>
   16f3c:	bl	286cc <__assert_fail@plt+0x16a2c>
   16f40:	cmp	r0, #0
   16f44:	beq	1702c <__assert_fail@plt+0x538c>
   16f48:	mov	r1, #1
   16f4c:	cmp	r5, #3
   16f50:	str	r1, [r0, #4]
   16f54:	bcc	16fb0 <__assert_fail@plt+0x5310>
   16f58:	mov	r1, #2
   16f5c:	mov	r2, #0
   16f60:	add	r3, r6, r1
   16f64:	ldrb	r4, [r6, r2]
   16f68:	ldrb	r3, [r3, #-1]
   16f6c:	b	16f7c <__assert_fail@plt+0x52dc>
   16f70:	ldr	r4, [r0, r2, lsl #2]
   16f74:	sub	r2, r2, r4
   16f78:	ldrb	r4, [r6, r2]
   16f7c:	cmp	r3, r4
   16f80:	beq	16f98 <__assert_fail@plt+0x52f8>
   16f84:	cmp	r2, #0
   16f88:	bne	16f70 <__assert_fail@plt+0x52d0>
   16f8c:	mov	r2, #0
   16f90:	mov	r3, r1
   16f94:	b	16fa0 <__assert_fail@plt+0x5300>
   16f98:	add	r2, r2, #1
   16f9c:	sub	r3, r1, r2
   16fa0:	str	r3, [r0, r1, lsl #2]
   16fa4:	add	r1, r1, #1
   16fa8:	cmp	r1, r5
   16fac:	bne	16f60 <__assert_fail@plt+0x52c0>
   16fb0:	mov	r1, #0
   16fb4:	str	r1, [r8]
   16fb8:	ldrb	r3, [r7]
   16fbc:	cmp	r3, #0
   16fc0:	beq	17024 <__assert_fail@plt+0x5384>
   16fc4:	mov	r2, r7
   16fc8:	ldrb	r4, [r6, r1]
   16fcc:	uxtb	r3, r3
   16fd0:	cmp	r4, r3
   16fd4:	bne	16fec <__assert_fail@plt+0x534c>
   16fd8:	add	r1, r1, #1
   16fdc:	cmp	r1, r5
   16fe0:	beq	17020 <__assert_fail@plt+0x5380>
   16fe4:	add	r7, r7, #1
   16fe8:	b	17010 <__assert_fail@plt+0x5370>
   16fec:	cmp	r1, #0
   16ff0:	beq	17004 <__assert_fail@plt+0x5364>
   16ff4:	ldr	r3, [r0, r1, lsl #2]
   16ff8:	sub	r1, r1, r3
   16ffc:	add	r2, r2, r3
   17000:	b	17010 <__assert_fail@plt+0x5370>
   17004:	add	r7, r7, #1
   17008:	add	r2, r2, #1
   1700c:	mov	r1, #0
   17010:	ldrb	r3, [r7]
   17014:	cmp	r3, #0
   17018:	bne	16fc8 <__assert_fail@plt+0x5328>
   1701c:	b	17024 <__assert_fail@plt+0x5384>
   17020:	str	r2, [r8]
   17024:	bl	28734 <__assert_fail@plt+0x16a94>
   17028:	mov	r4, #1
   1702c:	mov	r0, r4
   17030:	sub	sp, fp, #24
   17034:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17038:	push	{r4, r5, r6, r7, fp, lr}
   1703c:	add	fp, sp, #16
   17040:	mov	r4, r0
   17044:	ldrb	r0, [r0, #12]
   17048:	cmp	r0, #0
   1704c:	popne	{r4, r5, r6, r7, fp, pc}
   17050:	ldrb	r0, [r4]
   17054:	ldr	r6, [r4, #16]
   17058:	cmp	r0, #0
   1705c:	beq	170bc <__assert_fail@plt+0x541c>
   17060:	add	r5, r4, #4
   17064:	bl	119a0 <__ctype_get_mb_cur_max@plt>
   17068:	mov	r1, r0
   1706c:	mov	r0, r6
   17070:	bl	18db0 <__assert_fail@plt+0x7110>
   17074:	add	r7, r4, #28
   17078:	mov	r2, r0
   1707c:	mov	r1, r6
   17080:	mov	r3, r5
   17084:	mov	r0, r7
   17088:	bl	1a254 <__assert_fail@plt+0x85b4>
   1708c:	cmn	r0, #2
   17090:	str	r0, [r4, #20]
   17094:	beq	17138 <__assert_fail@plt+0x5498>
   17098:	cmp	r0, #0
   1709c:	beq	170f4 <__assert_fail@plt+0x5454>
   170a0:	cmn	r0, #1
   170a4:	bne	17118 <__assert_fail@plt+0x5478>
   170a8:	mov	r0, #0
   170ac:	strb	r0, [r4, #24]
   170b0:	mov	r0, #1
   170b4:	str	r0, [r4, #20]
   170b8:	b	1714c <__assert_fail@plt+0x54ac>
   170bc:	ldrb	r0, [r6]
   170c0:	movw	r2, #43232	; 0xa8e0
   170c4:	movt	r2, #2
   170c8:	ubfx	r1, r0, #5, #3
   170cc:	ldr	r1, [r2, r1, lsl #2]
   170d0:	and	r2, r0, #31
   170d4:	mov	r0, #1
   170d8:	tst	r1, r0, lsl r2
   170dc:	beq	17158 <__assert_fail@plt+0x54b8>
   170e0:	str	r0, [r4, #20]
   170e4:	ldrb	r1, [r6]
   170e8:	strb	r0, [r4, #24]
   170ec:	str	r1, [r4, #28]
   170f0:	b	1714c <__assert_fail@plt+0x54ac>
   170f4:	mov	r0, #1
   170f8:	str	r0, [r4, #20]
   170fc:	ldr	r0, [r4, #16]
   17100:	ldrb	r0, [r0]
   17104:	cmp	r0, #0
   17108:	bne	17178 <__assert_fail@plt+0x54d8>
   1710c:	ldr	r0, [r7]
   17110:	cmp	r0, #0
   17114:	bne	17198 <__assert_fail@plt+0x54f8>
   17118:	mov	r0, #1
   1711c:	strb	r0, [r4, #24]
   17120:	mov	r0, r5
   17124:	bl	11910 <mbsinit@plt>
   17128:	cmp	r0, #0
   1712c:	movne	r0, #0
   17130:	strbne	r0, [r4]
   17134:	b	1714c <__assert_fail@plt+0x54ac>
   17138:	ldr	r0, [r4, #16]
   1713c:	bl	11a9c <strlen@plt>
   17140:	str	r0, [r4, #20]
   17144:	mov	r0, #0
   17148:	strb	r0, [r4, #24]
   1714c:	mov	r0, #1
   17150:	strb	r0, [r4, #12]
   17154:	pop	{r4, r5, r6, r7, fp, pc}
   17158:	add	r5, r4, #4
   1715c:	mov	r0, r5
   17160:	bl	11910 <mbsinit@plt>
   17164:	cmp	r0, #0
   17168:	beq	171b8 <__assert_fail@plt+0x5518>
   1716c:	mov	r0, #1
   17170:	strb	r0, [r4]
   17174:	b	17064 <__assert_fail@plt+0x53c4>
   17178:	movw	r0, #41247	; 0xa11f
   1717c:	movw	r1, #41187	; 0xa0e3
   17180:	movw	r3, #41199	; 0xa0ef
   17184:	mov	r2, #171	; 0xab
   17188:	movt	r0, #2
   1718c:	movt	r1, #2
   17190:	movt	r3, #2
   17194:	bl	11ca0 <__assert_fail@plt>
   17198:	movw	r0, #41270	; 0xa136
   1719c:	movw	r1, #41187	; 0xa0e3
   171a0:	movw	r3, #41199	; 0xa0ef
   171a4:	mov	r2, #172	; 0xac
   171a8:	movt	r0, #2
   171ac:	movt	r1, #2
   171b0:	movt	r3, #2
   171b4:	bl	11ca0 <__assert_fail@plt>
   171b8:	movw	r0, #41164	; 0xa0cc
   171bc:	movw	r1, #41187	; 0xa0e3
   171c0:	movw	r3, #41199	; 0xa0ef
   171c4:	mov	r2, #143	; 0x8f
   171c8:	movt	r0, #2
   171cc:	movt	r1, #2
   171d0:	movt	r3, #2
   171d4:	bl	11ca0 <__assert_fail@plt>
   171d8:	ldr	r2, [r0, #16]
   171dc:	add	r1, r2, r1
   171e0:	str	r1, [r0, #16]
   171e4:	bx	lr
   171e8:	push	{r4, r5, r6, sl, fp, lr}
   171ec:	add	fp, sp, #16
   171f0:	mov	r5, r1
   171f4:	ldrb	r1, [r1]
   171f8:	mov	r4, r0
   171fc:	strb	r1, [r0], #4
   17200:	cmp	r1, #0
   17204:	beq	17214 <__assert_fail@plt+0x5574>
   17208:	ldmib	r5, {r1, r2}
   1720c:	stm	r0, {r1, r2}
   17210:	b	17220 <__assert_fail@plt+0x5580>
   17214:	mov	r1, #0
   17218:	str	r1, [r0]
   1721c:	str	r1, [r0, #4]
   17220:	ldrb	r0, [r5, #12]
   17224:	strb	r0, [r4, #12]
   17228:	add	r0, r5, #32
   1722c:	ldr	r1, [r5, #16]
   17230:	cmp	r1, r0
   17234:	beq	17240 <__assert_fail@plt+0x55a0>
   17238:	mov	r6, r1
   1723c:	b	17250 <__assert_fail@plt+0x55b0>
   17240:	ldr	r2, [r5, #20]
   17244:	add	r6, r4, #32
   17248:	mov	r0, r6
   1724c:	bl	118e0 <memcpy@plt>
   17250:	str	r6, [r4, #16]
   17254:	ldr	r0, [r5, #20]
   17258:	str	r0, [r4, #20]
   1725c:	ldrb	r0, [r5, #24]
   17260:	strb	r0, [r4, #24]
   17264:	cmp	r0, #0
   17268:	ldrne	r0, [r5, #28]
   1726c:	strne	r0, [r4, #28]
   17270:	pop	{r4, r5, r6, sl, fp, pc}
   17274:	push	{r4, r5, fp, lr}
   17278:	add	fp, sp, #8
   1727c:	cmp	r0, #0
   17280:	beq	17314 <__assert_fail@plt+0x5674>
   17284:	mov	r1, #47	; 0x2f
   17288:	mov	r4, r0
   1728c:	bl	11bb0 <strrchr@plt>
   17290:	cmp	r0, #0
   17294:	mov	r5, r4
   17298:	addne	r5, r0, #1
   1729c:	sub	r0, r5, r4
   172a0:	cmp	r0, #7
   172a4:	blt	172f8 <__assert_fail@plt+0x5658>
   172a8:	movw	r1, #41344	; 0xa180
   172ac:	sub	r0, r5, #7
   172b0:	mov	r2, #7
   172b4:	movt	r1, #2
   172b8:	bl	11c58 <strncmp@plt>
   172bc:	cmp	r0, #0
   172c0:	bne	172f8 <__assert_fail@plt+0x5658>
   172c4:	movw	r1, #41352	; 0xa188
   172c8:	mov	r0, r5
   172cc:	mov	r2, #3
   172d0:	movt	r1, #2
   172d4:	bl	11c58 <strncmp@plt>
   172d8:	cmp	r0, #0
   172dc:	beq	172e8 <__assert_fail@plt+0x5648>
   172e0:	mov	r4, r5
   172e4:	b	172f8 <__assert_fail@plt+0x5658>
   172e8:	movw	r0, #45568	; 0xb200
   172ec:	add	r4, r5, #3
   172f0:	movt	r0, #3
   172f4:	str	r4, [r0]
   172f8:	movw	r0, #45572	; 0xb204
   172fc:	movt	r0, #3
   17300:	str	r4, [r0]
   17304:	movw	r0, #45716	; 0xb294
   17308:	movt	r0, #3
   1730c:	str	r4, [r0]
   17310:	pop	{r4, r5, fp, pc}
   17314:	movw	r0, #45584	; 0xb210
   17318:	movt	r0, #3
   1731c:	ldr	r1, [r0]
   17320:	movw	r0, #41288	; 0xa148
   17324:	movt	r0, #2
   17328:	bl	11c4c <fputs@plt>
   1732c:	bl	11c64 <abort@plt>
   17330:	push	{r4, r5, r6, sl, fp, lr}
   17334:	add	fp, sp, #16
   17338:	mov	r4, r0
   1733c:	movw	r0, #45720	; 0xb298
   17340:	movt	r0, #3
   17344:	cmp	r4, #0
   17348:	moveq	r4, r0
   1734c:	bl	11acc <__errno_location@plt>
   17350:	ldr	r6, [r0]
   17354:	mov	r5, r0
   17358:	mov	r0, r4
   1735c:	mov	r1, #48	; 0x30
   17360:	bl	19610 <__assert_fail@plt+0x7970>
   17364:	str	r6, [r5]
   17368:	pop	{r4, r5, r6, sl, fp, pc}
   1736c:	movw	r1, #45720	; 0xb298
   17370:	cmp	r0, #0
   17374:	movt	r1, #3
   17378:	movne	r1, r0
   1737c:	ldr	r0, [r1]
   17380:	bx	lr
   17384:	movw	r2, #45720	; 0xb298
   17388:	cmp	r0, #0
   1738c:	movt	r2, #3
   17390:	movne	r2, r0
   17394:	str	r1, [r2]
   17398:	bx	lr
   1739c:	movw	r3, #45720	; 0xb298
   173a0:	cmp	r0, #0
   173a4:	movt	r3, #3
   173a8:	movne	r3, r0
   173ac:	ubfx	r0, r1, #5, #3
   173b0:	and	r1, r1, #31
   173b4:	add	r0, r3, r0, lsl #2
   173b8:	ldr	r3, [r0, #8]
   173bc:	eor	r2, r2, r3, lsr r1
   173c0:	and	r2, r2, #1
   173c4:	eor	r2, r3, r2, lsl r1
   173c8:	str	r2, [r0, #8]
   173cc:	mov	r0, #1
   173d0:	and	r0, r0, r3, lsr r1
   173d4:	bx	lr
   173d8:	movw	r2, #45720	; 0xb298
   173dc:	cmp	r0, #0
   173e0:	movt	r2, #3
   173e4:	movne	r2, r0
   173e8:	ldr	r0, [r2, #4]
   173ec:	str	r1, [r2, #4]
   173f0:	bx	lr
   173f4:	movw	r3, #45720	; 0xb298
   173f8:	cmp	r0, #0
   173fc:	movt	r3, #3
   17400:	movne	r3, r0
   17404:	cmp	r1, #0
   17408:	mov	r0, #10
   1740c:	cmpne	r2, #0
   17410:	str	r0, [r3]
   17414:	bne	17424 <__assert_fail@plt+0x5784>
   17418:	push	{fp, lr}
   1741c:	mov	fp, sp
   17420:	bl	11c64 <abort@plt>
   17424:	str	r1, [r3, #40]	; 0x28
   17428:	str	r2, [r3, #44]	; 0x2c
   1742c:	bx	lr
   17430:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17434:	add	fp, sp, #28
   17438:	sub	sp, sp, #20
   1743c:	mov	r7, r0
   17440:	ldr	r0, [fp, #8]
   17444:	movw	r5, #45720	; 0xb298
   17448:	mov	r8, r3
   1744c:	mov	r9, r2
   17450:	mov	sl, r1
   17454:	movt	r5, #3
   17458:	cmp	r0, #0
   1745c:	movne	r5, r0
   17460:	bl	11acc <__errno_location@plt>
   17464:	mov	r4, r0
   17468:	ldm	r5, {r0, r1}
   1746c:	ldr	r2, [r5, #40]	; 0x28
   17470:	ldr	r3, [r5, #44]	; 0x2c
   17474:	add	r5, r5, #8
   17478:	ldr	r6, [r4]
   1747c:	stm	sp, {r0, r1, r5}
   17480:	str	r2, [sp, #12]
   17484:	str	r3, [sp, #16]
   17488:	mov	r0, r7
   1748c:	mov	r1, sl
   17490:	mov	r2, r9
   17494:	mov	r3, r8
   17498:	bl	174a8 <__assert_fail@plt+0x5808>
   1749c:	str	r6, [r4]
   174a0:	sub	sp, fp, #28
   174a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174ac:	add	fp, sp, #28
   174b0:	sub	sp, sp, #156	; 0x9c
   174b4:	str	r0, [fp, #-56]	; 0xffffffc8
   174b8:	ldr	r0, [fp, #12]
   174bc:	mov	r4, r1
   174c0:	str	r3, [sp, #80]	; 0x50
   174c4:	str	r2, [fp, #-84]	; 0xffffffac
   174c8:	and	r1, r0, #4
   174cc:	str	r1, [sp, #24]
   174d0:	and	r1, r0, #1
   174d4:	str	r1, [sp, #28]
   174d8:	ubfx	r7, r0, #1, #1
   174dc:	bl	119a0 <__ctype_get_mb_cur_max@plt>
   174e0:	str	r0, [sp, #32]
   174e4:	ldr	r0, [fp, #24]
   174e8:	ldr	r9, [fp, #8]
   174ec:	mov	r2, #0
   174f0:	mov	r1, #0
   174f4:	mov	r5, #0
   174f8:	str	r2, [sp, #52]	; 0x34
   174fc:	mov	r2, #1
   17500:	str	r0, [sp, #72]	; 0x48
   17504:	ldr	r0, [fp, #20]
   17508:	str	r0, [sp, #64]	; 0x40
   1750c:	mov	r0, #0
   17510:	str	r0, [sp, #92]	; 0x5c
   17514:	mov	r0, #0
   17518:	str	r0, [fp, #-76]	; 0xffffffb4
   1751c:	mov	r0, #0
   17520:	cmp	r9, #10
   17524:	str	r1, [sp, #68]	; 0x44
   17528:	bhi	18528 <__assert_fail@plt+0x6888>
   1752c:	add	r1, pc, #28
   17530:	ldr	ip, [fp, #-84]	; 0xffffffac
   17534:	ldr	lr, [sp, #80]	; 0x50
   17538:	mov	r6, r4
   1753c:	mov	r8, #0
   17540:	mov	r3, #1
   17544:	mov	sl, #0
   17548:	mov	r4, r2
   1754c:	ldr	pc, [r1, r9, lsl #2]
   17550:	andeq	r7, r1, r0, lsr #12
   17554:	andeq	r7, r1, ip, asr r6
   17558:	andeq	r7, r1, r0, lsr r6
   1755c:	andeq	r7, r1, r8, lsl r6
   17560:	andeq	r7, r1, r0, asr r6
   17564:	andeq	r7, r1, r8, lsr #13
   17568:	andeq	r7, r1, r0, asr #12
   1756c:	andeq	r7, r1, r8, lsl #14
   17570:	andeq	r7, r1, ip, ror r5
   17574:	andeq	r7, r1, ip, ror r5
   17578:	andeq	r7, r1, r4, lsr #11
   1757c:	movw	r0, #41434	; 0xa1da
   17580:	mov	r1, r9
   17584:	movt	r0, #2
   17588:	bl	18c90 <__assert_fail@plt+0x6ff0>
   1758c:	str	r0, [sp, #64]	; 0x40
   17590:	movw	r0, #38665	; 0x9709
   17594:	mov	r1, r9
   17598:	movt	r0, #2
   1759c:	bl	18c90 <__assert_fail@plt+0x6ff0>
   175a0:	str	r0, [sp, #72]	; 0x48
   175a4:	mov	r8, #0
   175a8:	mov	sl, r7
   175ac:	tst	r7, #1
   175b0:	str	r5, [fp, #-48]	; 0xffffffd0
   175b4:	bne	175f0 <__assert_fail@plt+0x5950>
   175b8:	ldr	r0, [sp, #64]	; 0x40
   175bc:	ldrb	r0, [r0]
   175c0:	cmp	r0, #0
   175c4:	beq	175f0 <__assert_fail@plt+0x5950>
   175c8:	ldr	r1, [sp, #64]	; 0x40
   175cc:	mov	r8, #0
   175d0:	add	r1, r1, #1
   175d4:	cmp	r8, r6
   175d8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   175dc:	strbcc	r0, [r2, r8]
   175e0:	ldrb	r0, [r1, r8]
   175e4:	add	r8, r8, #1
   175e8:	cmp	r0, #0
   175ec:	bne	175d4 <__assert_fail@plt+0x5934>
   175f0:	ldr	r7, [sp, #72]	; 0x48
   175f4:	mov	r0, r7
   175f8:	bl	11a9c <strlen@plt>
   175fc:	ldr	ip, [fp, #-84]	; 0xffffffac
   17600:	ldr	lr, [sp, #80]	; 0x50
   17604:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17608:	str	r0, [fp, #-76]	; 0xffffffb4
   1760c:	str	r7, [sp, #92]	; 0x5c
   17610:	mov	r3, #1
   17614:	b	17708 <__assert_fail@plt+0x5a68>
   17618:	mov	r0, #1
   1761c:	b	1765c <__assert_fail@plt+0x59bc>
   17620:	mov	r9, #0
   17624:	mov	r8, #0
   17628:	mov	r3, r0
   1762c:	b	17704 <__assert_fail@plt+0x5a64>
   17630:	tst	r7, #1
   17634:	bne	1765c <__assert_fail@plt+0x59bc>
   17638:	mov	r3, r0
   1763c:	b	17684 <__assert_fail@plt+0x59e4>
   17640:	mov	r0, #1
   17644:	mov	r8, #0
   17648:	mov	r9, #5
   1764c:	b	176bc <__assert_fail@plt+0x5a1c>
   17650:	mov	r3, #1
   17654:	tst	r7, #1
   17658:	beq	17684 <__assert_fail@plt+0x59e4>
   1765c:	mov	r1, #1
   17660:	mov	r8, #0
   17664:	mov	r9, #2
   17668:	mov	r3, r0
   1766c:	mov	sl, #1
   17670:	str	r1, [fp, #-76]	; 0xffffffb4
   17674:	movw	r1, #38665	; 0x9709
   17678:	movt	r1, #2
   1767c:	str	r1, [sp, #92]	; 0x5c
   17680:	b	17708 <__assert_fail@plt+0x5a68>
   17684:	cmp	r6, #0
   17688:	mov	r8, #1
   1768c:	mov	r9, #2
   17690:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   17694:	movne	r0, #39	; 0x27
   17698:	strbne	r0, [r1]
   1769c:	movw	r0, #38665	; 0x9709
   176a0:	movt	r0, #2
   176a4:	b	176f8 <__assert_fail@plt+0x5a58>
   176a8:	mov	r9, #5
   176ac:	tst	r7, #1
   176b0:	beq	176d8 <__assert_fail@plt+0x5a38>
   176b4:	mov	r0, #1
   176b8:	mov	r8, #0
   176bc:	str	r0, [fp, #-76]	; 0xffffffb4
   176c0:	movw	r0, #41432	; 0xa1d8
   176c4:	mov	r3, #1
   176c8:	mov	sl, #1
   176cc:	movt	r0, #2
   176d0:	str	r0, [sp, #92]	; 0x5c
   176d4:	b	17708 <__assert_fail@plt+0x5a68>
   176d8:	cmp	r6, #0
   176dc:	mov	r8, #1
   176e0:	mov	r3, #1
   176e4:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   176e8:	movne	r0, #34	; 0x22
   176ec:	strbne	r0, [r1]
   176f0:	movw	r0, #41432	; 0xa1d8
   176f4:	movt	r0, #2
   176f8:	str	r0, [sp, #92]	; 0x5c
   176fc:	mov	r0, #1
   17700:	str	r0, [fp, #-76]	; 0xffffffb4
   17704:	mov	sl, #0
   17708:	ldr	r0, [fp, #16]
   1770c:	mov	r7, #0
   17710:	str	r9, [fp, #-64]	; 0xffffffc0
   17714:	str	sl, [fp, #-72]	; 0xffffffb8
   17718:	str	r3, [sp, #84]	; 0x54
   1771c:	cmp	r0, #0
   17720:	movwne	r0, #1
   17724:	and	r0, r0, sl
   17728:	str	r0, [fp, #-88]	; 0xffffffa8
   1772c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17730:	cmp	r0, #0
   17734:	movwne	r0, #1
   17738:	subs	r2, r9, #2
   1773c:	and	r1, r0, sl
   17740:	str	r2, [fp, #-80]	; 0xffffffb0
   17744:	and	r1, r3, r1
   17748:	str	r1, [sp, #44]	; 0x2c
   1774c:	clz	r1, r2
   17750:	lsr	r1, r1, #5
   17754:	and	r1, r1, sl
   17758:	str	r1, [sp, #56]	; 0x38
   1775c:	mov	r1, r2
   17760:	eor	r2, sl, #1
   17764:	movwne	r1, #1
   17768:	str	r2, [sp, #88]	; 0x58
   1776c:	orr	r2, r1, r2
   17770:	and	r1, r1, r3
   17774:	and	r0, r0, r1
   17778:	str	r2, [sp, #60]	; 0x3c
   1777c:	str	r1, [fp, #-68]	; 0xffffffbc
   17780:	str	r0, [fp, #-60]	; 0xffffffc4
   17784:	eor	r0, r3, #1
   17788:	str	r0, [sp, #48]	; 0x30
   1778c:	cmn	lr, #1
   17790:	beq	177a0 <__assert_fail@plt+0x5b00>
   17794:	cmp	r7, lr
   17798:	bne	177ac <__assert_fail@plt+0x5b0c>
   1779c:	b	18358 <__assert_fail@plt+0x66b8>
   177a0:	ldrb	r0, [ip, r7]
   177a4:	cmp	r0, #0
   177a8:	beq	18360 <__assert_fail@plt+0x66c0>
   177ac:	ldr	r0, [fp, #-60]	; 0xffffffc4
   177b0:	mov	r9, #0
   177b4:	str	r5, [fp, #-48]	; 0xffffffd0
   177b8:	str	r6, [fp, #-52]	; 0xffffffcc
   177bc:	cmp	r0, #0
   177c0:	beq	17800 <__assert_fail@plt+0x5b60>
   177c4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   177c8:	mov	r5, r4
   177cc:	add	r4, r7, r0
   177d0:	cmp	r0, #2
   177d4:	bcc	177f0 <__assert_fail@plt+0x5b50>
   177d8:	cmn	lr, #1
   177dc:	bne	177f0 <__assert_fail@plt+0x5b50>
   177e0:	mov	r0, ip
   177e4:	bl	11a9c <strlen@plt>
   177e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   177ec:	mov	lr, r0
   177f0:	cmp	r4, lr
   177f4:	bls	17808 <__assert_fail@plt+0x5b68>
   177f8:	mov	r6, #0
   177fc:	b	17848 <__assert_fail@plt+0x5ba8>
   17800:	mov	r6, #0
   17804:	b	1784c <__assert_fail@plt+0x5bac>
   17808:	ldr	r1, [sp, #92]	; 0x5c
   1780c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17810:	add	r0, ip, r7
   17814:	mov	r4, lr
   17818:	bl	11928 <memcmp@plt>
   1781c:	ldr	r2, [sp, #88]	; 0x58
   17820:	cmp	r0, #0
   17824:	mov	r1, r0
   17828:	movwne	r1, #1
   1782c:	orr	r1, r1, r2
   17830:	tst	r1, #1
   17834:	beq	183f4 <__assert_fail@plt+0x6754>
   17838:	ldr	ip, [fp, #-84]	; 0xffffffac
   1783c:	clz	r0, r0
   17840:	mov	lr, r4
   17844:	lsr	r6, r0, #5
   17848:	mov	r4, r5
   1784c:	ldrb	r5, [ip, r7]
   17850:	cmp	r5, #126	; 0x7e
   17854:	bhi	17c1c <__assert_fail@plt+0x5f7c>
   17858:	add	r3, pc, #16
   1785c:	mov	sl, #1
   17860:	mov	r2, #110	; 0x6e
   17864:	mov	r0, #97	; 0x61
   17868:	mov	r1, #0
   1786c:	ldr	pc, [r3, r5, lsl #2]
   17870:	andeq	r7, r1, r0, lsl #22
   17874:	andeq	r7, r1, ip, lsl ip
   17878:	andeq	r7, r1, ip, lsl ip
   1787c:	andeq	r7, r1, ip, lsl ip
   17880:	andeq	r7, r1, ip, lsl ip
   17884:	andeq	r7, r1, ip, lsl ip
   17888:	andeq	r7, r1, ip, lsl ip
   1788c:	andeq	r7, r1, r0, asr #25
   17890:	andeq	r7, r1, r0, ror #21
   17894:	ldrdeq	r7, [r1], -r8
   17898:	andeq	r7, r1, ip, ror #21
   1789c:	andeq	r7, r1, r0, ror fp
   178a0:	ldrdeq	r7, [r1], -r0
   178a4:	andeq	r7, r1, r8, ror #21
   178a8:	andeq	r7, r1, ip, lsl ip
   178ac:	andeq	r7, r1, ip, lsl ip
   178b0:	andeq	r7, r1, ip, lsl ip
   178b4:	andeq	r7, r1, ip, lsl ip
   178b8:	andeq	r7, r1, ip, lsl ip
   178bc:	andeq	r7, r1, ip, lsl ip
   178c0:	andeq	r7, r1, ip, lsl ip
   178c4:	andeq	r7, r1, ip, lsl ip
   178c8:	andeq	r7, r1, ip, lsl ip
   178cc:	andeq	r7, r1, ip, lsl ip
   178d0:	andeq	r7, r1, ip, lsl ip
   178d4:	andeq	r7, r1, ip, lsl ip
   178d8:	andeq	r7, r1, ip, lsl ip
   178dc:	andeq	r7, r1, ip, lsl ip
   178e0:	andeq	r7, r1, ip, lsl ip
   178e4:	andeq	r7, r1, ip, lsl ip
   178e8:	andeq	r7, r1, ip, lsl ip
   178ec:	andeq	r7, r1, ip, lsl ip
   178f0:	andeq	r7, r1, r0, lsl #25
   178f4:	andeq	r7, r1, r4, lsl #25
   178f8:	andeq	r7, r1, r4, lsl #25
   178fc:	andeq	r7, r1, r0, lsl #21
   17900:	andeq	r7, r1, r4, lsl #25
   17904:	andeq	r7, r1, ip, ror #20
   17908:	andeq	r7, r1, r4, lsl #25
   1790c:	andeq	r7, r1, r8, ror fp
   17910:	andeq	r7, r1, r4, lsl #25
   17914:	andeq	r7, r1, r4, lsl #25
   17918:	andeq	r7, r1, r4, lsl #25
   1791c:	andeq	r7, r1, ip, ror #20
   17920:	andeq	r7, r1, ip, ror #20
   17924:	andeq	r7, r1, ip, ror #20
   17928:	andeq	r7, r1, ip, ror #20
   1792c:	andeq	r7, r1, ip, ror #20
   17930:	andeq	r7, r1, ip, ror #20
   17934:	andeq	r7, r1, ip, ror #20
   17938:	andeq	r7, r1, ip, ror #20
   1793c:	andeq	r7, r1, ip, ror #20
   17940:	andeq	r7, r1, ip, ror #20
   17944:	andeq	r7, r1, ip, ror #20
   17948:	andeq	r7, r1, ip, ror #20
   1794c:	andeq	r7, r1, ip, ror #20
   17950:	andeq	r7, r1, ip, ror #20
   17954:	andeq	r7, r1, ip, ror #20
   17958:	andeq	r7, r1, ip, ror #20
   1795c:	andeq	r7, r1, r4, lsl #25
   17960:	andeq	r7, r1, r4, lsl #25
   17964:	andeq	r7, r1, r4, lsl #25
   17968:	andeq	r7, r1, r4, lsl #25
   1796c:	andeq	r7, r1, r4, asr #22
   17970:	andeq	r7, r1, ip, lsl ip
   17974:	andeq	r7, r1, ip, ror #20
   17978:	andeq	r7, r1, ip, ror #20
   1797c:	andeq	r7, r1, ip, ror #20
   17980:	andeq	r7, r1, ip, ror #20
   17984:	andeq	r7, r1, ip, ror #20
   17988:	andeq	r7, r1, ip, ror #20
   1798c:	andeq	r7, r1, ip, ror #20
   17990:	andeq	r7, r1, ip, ror #20
   17994:	andeq	r7, r1, ip, ror #20
   17998:	andeq	r7, r1, ip, ror #20
   1799c:	andeq	r7, r1, ip, ror #20
   179a0:	andeq	r7, r1, ip, ror #20
   179a4:	andeq	r7, r1, ip, ror #20
   179a8:	andeq	r7, r1, ip, ror #20
   179ac:	andeq	r7, r1, ip, ror #20
   179b0:	andeq	r7, r1, ip, ror #20
   179b4:	andeq	r7, r1, ip, ror #20
   179b8:	andeq	r7, r1, ip, ror #20
   179bc:	andeq	r7, r1, ip, ror #20
   179c0:	andeq	r7, r1, ip, ror #20
   179c4:	andeq	r7, r1, ip, ror #20
   179c8:	andeq	r7, r1, ip, ror #20
   179cc:	andeq	r7, r1, ip, ror #20
   179d0:	andeq	r7, r1, ip, ror #20
   179d4:	andeq	r7, r1, ip, ror #20
   179d8:	andeq	r7, r1, ip, ror #20
   179dc:	andeq	r7, r1, r4, lsl #25
   179e0:	andeq	r7, r1, ip, lsr #21
   179e4:	andeq	r7, r1, ip, ror #20
   179e8:	andeq	r7, r1, r4, lsl #25
   179ec:	andeq	r7, r1, ip, ror #20
   179f0:	andeq	r7, r1, r4, lsl #25
   179f4:	andeq	r7, r1, ip, ror #20
   179f8:	andeq	r7, r1, ip, ror #20
   179fc:	andeq	r7, r1, ip, ror #20
   17a00:	andeq	r7, r1, ip, ror #20
   17a04:	andeq	r7, r1, ip, ror #20
   17a08:	andeq	r7, r1, ip, ror #20
   17a0c:	andeq	r7, r1, ip, ror #20
   17a10:	andeq	r7, r1, ip, ror #20
   17a14:	andeq	r7, r1, ip, ror #20
   17a18:	andeq	r7, r1, ip, ror #20
   17a1c:	andeq	r7, r1, ip, ror #20
   17a20:	andeq	r7, r1, ip, ror #20
   17a24:	andeq	r7, r1, ip, ror #20
   17a28:	andeq	r7, r1, ip, ror #20
   17a2c:	andeq	r7, r1, ip, ror #20
   17a30:	andeq	r7, r1, ip, ror #20
   17a34:	andeq	r7, r1, ip, ror #20
   17a38:	andeq	r7, r1, ip, ror #20
   17a3c:	andeq	r7, r1, ip, ror #20
   17a40:	andeq	r7, r1, ip, ror #20
   17a44:	andeq	r7, r1, ip, ror #20
   17a48:	andeq	r7, r1, ip, ror #20
   17a4c:	andeq	r7, r1, ip, ror #20
   17a50:	andeq	r7, r1, ip, ror #20
   17a54:	andeq	r7, r1, ip, ror #20
   17a58:	andeq	r7, r1, ip, ror #20
   17a5c:	muleq	r1, r0, sl
   17a60:	andeq	r7, r1, r4, lsl #25
   17a64:	muleq	r1, r0, sl
   17a68:	andeq	r7, r1, r0, lsl #21
   17a6c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17a70:	cmp	r0, #0
   17a74:	beq	17cd4 <__assert_fail@plt+0x6034>
   17a78:	ldr	r0, [fp, #16]
   17a7c:	b	17cd8 <__assert_fail@plt+0x6038>
   17a80:	mov	sl, #0
   17a84:	cmp	r7, #0
   17a88:	bne	17ef0 <__assert_fail@plt+0x6250>
   17a8c:	b	17c80 <__assert_fail@plt+0x5fe0>
   17a90:	mov	sl, #0
   17a94:	cmn	lr, #1
   17a98:	beq	17c6c <__assert_fail@plt+0x5fcc>
   17a9c:	cmp	r7, #0
   17aa0:	cmpeq	lr, #1
   17aa4:	bne	17ef0 <__assert_fail@plt+0x6250>
   17aa8:	b	17c80 <__assert_fail@plt+0x5fe0>
   17aac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17ab0:	cmp	r0, #2
   17ab4:	bne	17ca4 <__assert_fail@plt+0x6004>
   17ab8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17abc:	tst	r0, #1
   17ac0:	bne	18410 <__assert_fail@plt+0x6770>
   17ac4:	mov	r9, #0
   17ac8:	mov	r0, #92	; 0x5c
   17acc:	b	17cb8 <__assert_fail@plt+0x6018>
   17ad0:	mov	r0, #102	; 0x66
   17ad4:	b	17cc0 <__assert_fail@plt+0x6020>
   17ad8:	mov	r2, #116	; 0x74
   17adc:	b	17aec <__assert_fail@plt+0x5e4c>
   17ae0:	mov	r0, #98	; 0x62
   17ae4:	b	17cc0 <__assert_fail@plt+0x6020>
   17ae8:	mov	r2, #114	; 0x72
   17aec:	ldr	r0, [sp, #60]	; 0x3c
   17af0:	tst	r0, #1
   17af4:	mov	r0, r2
   17af8:	bne	17cc0 <__assert_fail@plt+0x6020>
   17afc:	b	18410 <__assert_fail@plt+0x6770>
   17b00:	ldr	r0, [sp, #84]	; 0x54
   17b04:	tst	r0, #1
   17b08:	beq	17dac <__assert_fail@plt+0x610c>
   17b0c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17b10:	tst	r0, #1
   17b14:	bne	18518 <__assert_fail@plt+0x6878>
   17b18:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17b1c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17b20:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17b24:	cmp	r0, #2
   17b28:	ldr	r0, [fp, #-80]	; 0xffffffb0
   17b2c:	movwne	r0, #1
   17b30:	orr	r0, r0, r3
   17b34:	tst	r0, #1
   17b38:	beq	1822c <__assert_fail@plt+0x658c>
   17b3c:	mov	r0, r8
   17b40:	b	1826c <__assert_fail@plt+0x65cc>
   17b44:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17b48:	mov	r9, #0
   17b4c:	mov	r5, #63	; 0x3f
   17b50:	cmp	r0, #5
   17b54:	beq	17ef8 <__assert_fail@plt+0x6258>
   17b58:	cmp	r0, #2
   17b5c:	bne	17fb8 <__assert_fail@plt+0x6318>
   17b60:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17b64:	tst	r0, #1
   17b68:	beq	17fbc <__assert_fail@plt+0x631c>
   17b6c:	b	18410 <__assert_fail@plt+0x6770>
   17b70:	mov	r0, #118	; 0x76
   17b74:	b	17cc0 <__assert_fail@plt+0x6020>
   17b78:	mov	r0, #1
   17b7c:	mov	r5, #39	; 0x27
   17b80:	str	r0, [sp, #52]	; 0x34
   17b84:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17b88:	cmp	r0, #2
   17b8c:	bne	17c14 <__assert_fail@plt+0x5f74>
   17b90:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17b94:	tst	r0, #1
   17b98:	bne	18410 <__assert_fail@plt+0x6770>
   17b9c:	ldr	r3, [sp, #68]	; 0x44
   17ba0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   17ba4:	mov	r9, #0
   17ba8:	clz	r1, r2
   17bac:	cmp	r3, #0
   17bb0:	mov	r0, r3
   17bb4:	movwne	r0, #1
   17bb8:	lsr	r1, r1, #5
   17bbc:	orrs	r0, r0, r1
   17bc0:	moveq	r3, r2
   17bc4:	moveq	r2, r0
   17bc8:	cmp	r8, r2
   17bcc:	str	r3, [sp, #68]	; 0x44
   17bd0:	str	r2, [fp, #-52]	; 0xffffffcc
   17bd4:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   17bd8:	movcc	r0, #39	; 0x27
   17bdc:	strbcc	r0, [r1, r8]
   17be0:	add	r0, r8, #1
   17be4:	cmp	r0, r2
   17be8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   17bec:	movcc	r1, #92	; 0x5c
   17bf0:	strbcc	r1, [r3, r0]
   17bf4:	add	r0, r8, #2
   17bf8:	add	r8, r8, #3
   17bfc:	cmp	r0, r2
   17c00:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   17c04:	movcc	r1, #39	; 0x27
   17c08:	strbcc	r1, [r2, r0]
   17c0c:	mov	r0, #0
   17c10:	str	r0, [fp, #-48]	; 0xffffffd0
   17c14:	mov	sl, #1
   17c18:	b	17a6c <__assert_fail@plt+0x5dcc>
   17c1c:	ldr	r0, [sp, #32]
   17c20:	cmp	r0, #1
   17c24:	bne	17dd0 <__assert_fail@plt+0x6130>
   17c28:	str	lr, [sp, #80]	; 0x50
   17c2c:	bl	11a6c <__ctype_b_loc@plt>
   17c30:	ldr	r0, [r0]
   17c34:	ldr	ip, [fp, #-84]	; 0xffffffac
   17c38:	mov	r1, #1
   17c3c:	add	r0, r0, r5, lsl #1
   17c40:	ldrb	r0, [r0, #1]
   17c44:	ubfx	sl, r0, #6, #1
   17c48:	ldr	r0, [sp, #48]	; 0x30
   17c4c:	mov	r2, r1
   17c50:	cmp	r1, #1
   17c54:	orr	r0, sl, r0
   17c58:	bhi	17fc4 <__assert_fail@plt+0x6324>
   17c5c:	tst	r0, #1
   17c60:	beq	17fc4 <__assert_fail@plt+0x6324>
   17c64:	ldr	lr, [sp, #80]	; 0x50
   17c68:	b	17a6c <__assert_fail@plt+0x5dcc>
   17c6c:	cmp	r7, #0
   17c70:	bne	17eec <__assert_fail@plt+0x624c>
   17c74:	ldrb	r0, [ip, #1]
   17c78:	cmp	r0, #0
   17c7c:	bne	17eec <__assert_fail@plt+0x624c>
   17c80:	mov	r1, #1
   17c84:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17c88:	cmp	r0, #2
   17c8c:	bne	17c9c <__assert_fail@plt+0x5ffc>
   17c90:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17c94:	tst	r0, #1
   17c98:	bne	18410 <__assert_fail@plt+0x6770>
   17c9c:	mov	sl, r1
   17ca0:	b	17a6c <__assert_fail@plt+0x5dcc>
   17ca4:	ldr	r1, [sp, #44]	; 0x2c
   17ca8:	mov	r9, #0
   17cac:	mov	r0, #92	; 0x5c
   17cb0:	cmp	r1, #0
   17cb4:	beq	17cc0 <__assert_fail@plt+0x6020>
   17cb8:	mov	sl, #0
   17cbc:	b	181d8 <__assert_fail@plt+0x6538>
   17cc0:	ldr	r1, [sp, #84]	; 0x54
   17cc4:	mov	sl, #0
   17cc8:	mov	r9, #0
   17ccc:	tst	r1, #1
   17cd0:	bne	17d0c <__assert_fail@plt+0x606c>
   17cd4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   17cd8:	cmp	r0, #0
   17cdc:	mov	r0, r5
   17ce0:	beq	17d04 <__assert_fail@plt+0x6064>
   17ce4:	ldr	r1, [fp, #16]
   17ce8:	ubfx	r0, r5, #5, #3
   17cec:	mov	r2, #1
   17cf0:	ldr	r0, [r1, r0, lsl #2]
   17cf4:	and	r1, r5, #31
   17cf8:	tst	r0, r2, lsl r1
   17cfc:	mov	r0, r5
   17d00:	bne	17d0c <__assert_fail@plt+0x606c>
   17d04:	cmp	r6, #0
   17d08:	beq	181d8 <__assert_fail@plt+0x6538>
   17d0c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17d10:	ldr	r6, [fp, #-52]	; 0xffffffcc
   17d14:	tst	r1, #1
   17d18:	bne	183ec <__assert_fail@plt+0x674c>
   17d1c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17d20:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17d24:	cmp	r1, #2
   17d28:	ldr	r1, [fp, #-80]	; 0xffffffb0
   17d2c:	movwne	r1, #1
   17d30:	orr	r1, r1, r5
   17d34:	tst	r1, #1
   17d38:	bne	17d7c <__assert_fail@plt+0x60dc>
   17d3c:	cmp	r8, r6
   17d40:	mov	r5, #1
   17d44:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   17d48:	movcc	r1, #39	; 0x27
   17d4c:	strbcc	r1, [r2, r8]
   17d50:	add	r1, r8, #1
   17d54:	cmp	r1, r6
   17d58:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   17d5c:	movcc	r2, #36	; 0x24
   17d60:	strbcc	r2, [r3, r1]
   17d64:	add	r1, r8, #2
   17d68:	add	r8, r8, #3
   17d6c:	cmp	r1, r6
   17d70:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   17d74:	movcc	r2, #39	; 0x27
   17d78:	strbcc	r2, [r3, r1]
   17d7c:	cmp	r8, r6
   17d80:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   17d84:	movcc	r1, #92	; 0x5c
   17d88:	strbcc	r1, [r2, r8]
   17d8c:	add	r8, r8, #1
   17d90:	cmp	r8, r6
   17d94:	and	r4, r4, sl
   17d98:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   17d9c:	strbcc	r0, [r1, r8]
   17da0:	add	r8, r8, #1
   17da4:	add	r7, r7, #1
   17da8:	b	1778c <__assert_fail@plt+0x5aec>
   17dac:	ldr	r0, [sp, #28]
   17db0:	mov	sl, #0
   17db4:	mov	r9, #0
   17db8:	mov	r5, #0
   17dbc:	cmp	r0, #0
   17dc0:	beq	17cd4 <__assert_fail@plt+0x6034>
   17dc4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   17dc8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17dcc:	b	17da4 <__assert_fail@plt+0x6104>
   17dd0:	mov	r0, #0
   17dd4:	cmn	lr, #1
   17dd8:	str	r6, [sp, #76]	; 0x4c
   17ddc:	str	r4, [sp, #20]
   17de0:	str	r0, [fp, #-36]	; 0xffffffdc
   17de4:	str	r0, [fp, #-40]	; 0xffffffd8
   17de8:	bne	17dfc <__assert_fail@plt+0x615c>
   17dec:	mov	r0, ip
   17df0:	bl	11a9c <strlen@plt>
   17df4:	ldr	ip, [fp, #-84]	; 0xffffffac
   17df8:	mov	lr, r0
   17dfc:	add	r0, ip, r7
   17e00:	mov	sl, #1
   17e04:	mov	r6, #0
   17e08:	sub	r4, fp, #40	; 0x28
   17e0c:	str	lr, [sp, #80]	; 0x50
   17e10:	str	r0, [sp, #36]	; 0x24
   17e14:	str	r6, [sp, #40]	; 0x28
   17e18:	add	r6, r6, r7
   17e1c:	sub	r0, fp, #44	; 0x2c
   17e20:	mov	r3, r4
   17e24:	add	r1, ip, r6
   17e28:	sub	r2, lr, r6
   17e2c:	bl	1a254 <__assert_fail@plt+0x85b4>
   17e30:	cmp	r0, #0
   17e34:	beq	18340 <__assert_fail@plt+0x66a0>
   17e38:	cmn	r0, #1
   17e3c:	beq	18300 <__assert_fail@plt+0x6660>
   17e40:	ldr	lr, [sp, #80]	; 0x50
   17e44:	cmn	r0, #2
   17e48:	beq	18308 <__assert_fail@plt+0x6668>
   17e4c:	ldr	r2, [sp, #56]	; 0x38
   17e50:	cmp	r0, #2
   17e54:	mov	r1, #0
   17e58:	movwcc	r1, #1
   17e5c:	eor	r2, r2, #1
   17e60:	orrs	r1, r2, r1
   17e64:	bne	17eb0 <__assert_fail@plt+0x6210>
   17e68:	ldr	r1, [sp, #40]	; 0x28
   17e6c:	ldr	r2, [sp, #36]	; 0x24
   17e70:	add	ip, r2, r1
   17e74:	mov	r2, #1
   17e78:	ldrb	r3, [ip, r2]
   17e7c:	sub	r6, r3, #94	; 0x5e
   17e80:	cmp	r6, #30
   17e84:	bhi	17e98 <__assert_fail@plt+0x61f8>
   17e88:	mov	r4, #1
   17e8c:	mov	r1, #1073741829	; 0x40000005
   17e90:	tst	r1, r4, lsl r6
   17e94:	bne	1840c <__assert_fail@plt+0x676c>
   17e98:	sub	r3, r3, #91	; 0x5b
   17e9c:	cmp	r3, #2
   17ea0:	bcc	1840c <__assert_fail@plt+0x676c>
   17ea4:	add	r2, r2, #1
   17ea8:	cmp	r2, r0
   17eac:	bcc	17e78 <__assert_fail@plt+0x61d8>
   17eb0:	ldr	r6, [sp, #40]	; 0x28
   17eb4:	add	r6, r0, r6
   17eb8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17ebc:	bl	11970 <iswprint@plt>
   17ec0:	cmp	r0, #0
   17ec4:	sub	r4, fp, #40	; 0x28
   17ec8:	movwne	r0, #1
   17ecc:	and	sl, sl, r0
   17ed0:	mov	r0, r4
   17ed4:	bl	11910 <mbsinit@plt>
   17ed8:	ldr	lr, [sp, #80]	; 0x50
   17edc:	ldr	ip, [fp, #-84]	; 0xffffffac
   17ee0:	cmp	r0, #0
   17ee4:	beq	17e14 <__assert_fail@plt+0x6174>
   17ee8:	b	18348 <__assert_fail@plt+0x66a8>
   17eec:	mvn	lr, #0
   17ef0:	mov	r9, #0
   17ef4:	b	17a6c <__assert_fail@plt+0x5dcc>
   17ef8:	ldr	r0, [sp, #24]
   17efc:	cmp	r0, #0
   17f00:	beq	17fb8 <__assert_fail@plt+0x6318>
   17f04:	add	r0, r7, #2
   17f08:	cmp	r0, lr
   17f0c:	bcs	17fb8 <__assert_fail@plt+0x6318>
   17f10:	add	r1, ip, r7
   17f14:	ldrb	r1, [r1, #1]
   17f18:	cmp	r1, #63	; 0x3f
   17f1c:	bne	17fb8 <__assert_fail@plt+0x6318>
   17f20:	ldrb	r5, [ip, r0]
   17f24:	sub	r1, r5, #33	; 0x21
   17f28:	cmp	r1, #29
   17f2c:	bhi	17fb8 <__assert_fail@plt+0x6318>
   17f30:	movw	r3, #20929	; 0x51c1
   17f34:	mov	r2, #1
   17f38:	movt	r3, #14336	; 0x3800
   17f3c:	tst	r3, r2, lsl r1
   17f40:	beq	17fb8 <__assert_fail@plt+0x6318>
   17f44:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17f48:	tst	r1, #1
   17f4c:	bne	18520 <__assert_fail@plt+0x6880>
   17f50:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17f54:	mov	r7, r0
   17f58:	cmp	r8, r1
   17f5c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   17f60:	movcc	r1, #63	; 0x3f
   17f64:	strbcc	r1, [r2, r8]
   17f68:	ldr	r2, [fp, #-52]	; 0xffffffcc
   17f6c:	add	r1, r8, #1
   17f70:	cmp	r1, r2
   17f74:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   17f78:	movcc	r2, #34	; 0x22
   17f7c:	strbcc	r2, [r3, r1]
   17f80:	ldr	r2, [fp, #-52]	; 0xffffffcc
   17f84:	add	r1, r8, #2
   17f88:	cmp	r1, r2
   17f8c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   17f90:	movcc	r2, #34	; 0x22
   17f94:	strbcc	r2, [r3, r1]
   17f98:	ldr	r2, [fp, #-52]	; 0xffffffcc
   17f9c:	add	r1, r8, #3
   17fa0:	add	r8, r8, #4
   17fa4:	cmp	r1, r2
   17fa8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   17fac:	movcc	r2, #63	; 0x3f
   17fb0:	strbcc	r2, [r3, r1]
   17fb4:	b	17fbc <__assert_fail@plt+0x631c>
   17fb8:	mov	r5, #63	; 0x3f
   17fbc:	mov	sl, #0
   17fc0:	b	17a6c <__assert_fail@plt+0x5dcc>
   17fc4:	str	r0, [sp, #40]	; 0x28
   17fc8:	add	r0, r2, r7
   17fcc:	str	r6, [sp, #76]	; 0x4c
   17fd0:	add	r1, r7, #1
   17fd4:	ldr	lr, [sp, #80]	; 0x50
   17fd8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17fdc:	ldr	r6, [fp, #-52]	; 0xffffffcc
   17fe0:	mov	r3, #0
   17fe4:	str	r0, [sp, #36]	; 0x24
   17fe8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17fec:	b	18080 <__assert_fail@plt+0x63e0>
   17ff0:	str	r0, [sp, #76]	; 0x4c
   17ff4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17ff8:	cmp	r9, #0
   17ffc:	movwne	r9, #1
   18000:	mvn	r7, r0
   18004:	orr	r7, r7, r9
   18008:	tst	r7, #1
   1800c:	bne	1805c <__assert_fail@plt+0x63bc>
   18010:	ldr	r6, [fp, #-52]	; 0xffffffcc
   18014:	cmp	r8, r6
   18018:	bcs	18030 <__assert_fail@plt+0x6390>
   1801c:	ldr	r7, [fp, #-56]	; 0xffffffc8
   18020:	mov	r2, r4
   18024:	mov	r4, #39	; 0x27
   18028:	strb	r4, [r7, r8]
   1802c:	mov	r4, r2
   18030:	add	r7, r8, #1
   18034:	cmp	r7, r6
   18038:	bcs	18050 <__assert_fail@plt+0x63b0>
   1803c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18040:	mov	r2, r4
   18044:	mov	r4, #39	; 0x27
   18048:	strb	r4, [r0, r7]
   1804c:	mov	r4, r2
   18050:	add	r8, r8, #2
   18054:	mov	r0, #0
   18058:	b	18064 <__assert_fail@plt+0x63c4>
   1805c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   18060:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18064:	cmp	r8, r6
   18068:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1806c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   18070:	strbcc	r5, [r2, r8]
   18074:	add	r8, r8, #1
   18078:	ldrb	r5, [ip, r1]
   1807c:	add	r1, r1, #1
   18080:	ldr	r2, [sp, #40]	; 0x28
   18084:	tst	r2, #1
   18088:	beq	180c4 <__assert_fail@plt+0x6424>
   1808c:	ldr	r2, [sp, #76]	; 0x4c
   18090:	str	r0, [fp, #-48]	; 0xffffffd0
   18094:	tst	r2, #1
   18098:	beq	180bc <__assert_fail@plt+0x641c>
   1809c:	cmp	r8, r6
   180a0:	bcs	180b8 <__assert_fail@plt+0x6418>
   180a4:	ldr	r6, [fp, #-56]	; 0xffffffc8
   180a8:	mov	r2, r4
   180ac:	mov	r4, #92	; 0x5c
   180b0:	strb	r4, [r6, r8]
   180b4:	mov	r4, r2
   180b8:	add	r8, r8, #1
   180bc:	mov	r0, #0
   180c0:	b	181b8 <__assert_fail@plt+0x6518>
   180c4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   180c8:	tst	r2, #1
   180cc:	bne	18418 <__assert_fail@plt+0x6778>
   180d0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   180d4:	cmp	r7, #2
   180d8:	movwne	r3, #1
   180dc:	orr	r3, r3, r0
   180e0:	tst	r3, #1
   180e4:	bne	18140 <__assert_fail@plt+0x64a0>
   180e8:	cmp	r8, r6
   180ec:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   180f0:	movcc	r3, #39	; 0x27
   180f4:	strbcc	r3, [r2, r8]
   180f8:	add	r3, r8, #1
   180fc:	cmp	r3, r6
   18100:	bcs	18118 <__assert_fail@plt+0x6478>
   18104:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18108:	mov	r7, r4
   1810c:	mov	r4, #36	; 0x24
   18110:	strb	r4, [r2, r3]
   18114:	mov	r4, r7
   18118:	add	r3, r8, #2
   1811c:	cmp	r3, r6
   18120:	bcs	18138 <__assert_fail@plt+0x6498>
   18124:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18128:	mov	r7, r4
   1812c:	mov	r4, #39	; 0x27
   18130:	strb	r4, [r2, r3]
   18134:	mov	r4, r7
   18138:	add	r8, r8, #3
   1813c:	mov	r0, #1
   18140:	cmp	r8, r6
   18144:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   18148:	movcc	r3, #92	; 0x5c
   1814c:	strbcc	r3, [r2, r8]
   18150:	add	r3, r8, #1
   18154:	cmp	r3, r6
   18158:	bcs	18178 <__assert_fail@plt+0x64d8>
   1815c:	mov	r2, r4
   18160:	and	r7, r5, #192	; 0xc0
   18164:	mov	r4, #48	; 0x30
   18168:	orr	r7, r4, r7, lsr #6
   1816c:	mov	r4, r2
   18170:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18174:	strb	r7, [r2, r3]
   18178:	add	r3, r8, #2
   1817c:	cmp	r3, r6
   18180:	bcs	181a0 <__assert_fail@plt+0x6500>
   18184:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18188:	mov	r6, r4
   1818c:	lsr	r7, r5, #3
   18190:	mov	r4, #6
   18194:	bfi	r7, r4, #3, #29
   18198:	mov	r4, r6
   1819c:	strb	r7, [r2, r3]
   181a0:	str	r0, [fp, #-48]	; 0xffffffd0
   181a4:	ldr	r0, [sp, #76]	; 0x4c
   181a8:	mov	r3, #6
   181ac:	add	r8, r8, #3
   181b0:	bfi	r5, r3, #3, #29
   181b4:	mov	r3, #1
   181b8:	ldr	r2, [sp, #36]	; 0x24
   181bc:	and	r9, r3, #1
   181c0:	cmp	r2, r1
   181c4:	bhi	17ff0 <__assert_fail@plt+0x6350>
   181c8:	cmp	r9, #0
   181cc:	sub	r7, r1, #1
   181d0:	mov	r0, r5
   181d4:	movwne	r9, #1
   181d8:	cmp	r9, #0
   181dc:	bne	18220 <__assert_fail@plt+0x6580>
   181e0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   181e4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   181e8:	tst	r5, #1
   181ec:	beq	17d90 <__assert_fail@plt+0x60f0>
   181f0:	cmp	r8, r6
   181f4:	mov	r5, #0
   181f8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   181fc:	movcc	r1, #39	; 0x27
   18200:	strbcc	r1, [r2, r8]
   18204:	add	r1, r8, #1
   18208:	add	r8, r8, #2
   1820c:	cmp	r1, r6
   18210:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   18214:	movcc	r2, #39	; 0x27
   18218:	strbcc	r2, [r3, r1]
   1821c:	b	17d90 <__assert_fail@plt+0x60f0>
   18220:	ldr	r6, [fp, #-52]	; 0xffffffcc
   18224:	ldr	r5, [fp, #-48]	; 0xffffffd0
   18228:	b	17d90 <__assert_fail@plt+0x60f0>
   1822c:	cmp	r8, r1
   18230:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   18234:	movcc	r0, #39	; 0x27
   18238:	strbcc	r0, [r2, r8]
   1823c:	add	r0, r8, #1
   18240:	cmp	r0, r1
   18244:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   18248:	movcc	r2, #36	; 0x24
   1824c:	strbcc	r2, [r3, r0]
   18250:	add	r0, r8, #2
   18254:	cmp	r0, r1
   18258:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1825c:	movcc	r2, #39	; 0x27
   18260:	strbcc	r2, [r3, r0]
   18264:	add	r0, r8, #3
   18268:	mov	r3, #1
   1826c:	cmp	r0, r1
   18270:	add	r8, r0, #1
   18274:	str	r3, [fp, #-48]	; 0xffffffd0
   18278:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1827c:	movcc	r1, #92	; 0x5c
   18280:	strbcc	r1, [r2, r0]
   18284:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18288:	cmp	r1, #2
   1828c:	beq	182f0 <__assert_fail@plt+0x6650>
   18290:	add	r1, r7, #1
   18294:	mov	sl, #0
   18298:	mov	r9, #1
   1829c:	mov	r5, #48	; 0x30
   182a0:	cmp	r1, lr
   182a4:	bcs	17a6c <__assert_fail@plt+0x5dcc>
   182a8:	ldrb	r1, [ip, r1]
   182ac:	sub	r1, r1, #48	; 0x30
   182b0:	uxtb	r1, r1
   182b4:	cmp	r1, #9
   182b8:	bhi	17a6c <__assert_fail@plt+0x5dcc>
   182bc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   182c0:	cmp	r8, r1
   182c4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   182c8:	movcc	r1, #48	; 0x30
   182cc:	strbcc	r1, [r2, r8]
   182d0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   182d4:	add	r1, r0, #2
   182d8:	add	r8, r0, #3
   182dc:	cmp	r1, r2
   182e0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   182e4:	movcc	r2, #48	; 0x30
   182e8:	strbcc	r2, [r3, r1]
   182ec:	b	17a6c <__assert_fail@plt+0x5dcc>
   182f0:	mov	r0, #48	; 0x30
   182f4:	mov	r9, #1
   182f8:	mov	sl, #0
   182fc:	b	17d04 <__assert_fail@plt+0x6064>
   18300:	mov	sl, #0
   18304:	b	18340 <__assert_fail@plt+0x66a0>
   18308:	mov	sl, #0
   1830c:	cmp	lr, r6
   18310:	bls	18340 <__assert_fail@plt+0x66a0>
   18314:	ldr	ip, [fp, #-84]	; 0xffffffac
   18318:	ldr	r6, [sp, #40]	; 0x28
   1831c:	ldr	r0, [sp, #36]	; 0x24
   18320:	ldrb	r0, [r0, r6]
   18324:	cmp	r0, #0
   18328:	beq	18348 <__assert_fail@plt+0x66a8>
   1832c:	add	r6, r6, #1
   18330:	add	r0, r7, r6
   18334:	cmp	r0, lr
   18338:	bcc	1831c <__assert_fail@plt+0x667c>
   1833c:	b	18348 <__assert_fail@plt+0x66a8>
   18340:	ldr	ip, [fp, #-84]	; 0xffffffac
   18344:	ldr	r6, [sp, #40]	; 0x28
   18348:	mov	r1, r6
   1834c:	ldr	r4, [sp, #20]
   18350:	ldr	r6, [sp, #76]	; 0x4c
   18354:	b	17c48 <__assert_fail@plt+0x5fa8>
   18358:	mov	lr, r7
   1835c:	b	18364 <__assert_fail@plt+0x66c4>
   18360:	mvn	lr, #0
   18364:	ldr	r9, [fp, #-64]	; 0xffffffc0
   18368:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1836c:	eor	r0, r9, #2
   18370:	orr	r0, r0, r8
   18374:	clz	r0, r0
   18378:	lsr	r0, r0, #5
   1837c:	tst	r1, r0
   18380:	bne	1847c <__assert_fail@plt+0x67dc>
   18384:	mov	r0, r1
   18388:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1838c:	cmp	r9, #2
   18390:	movwne	r1, #1
   18394:	orr	r0, r0, r1
   18398:	tst	r0, #1
   1839c:	bne	184bc <__assert_fail@plt+0x681c>
   183a0:	ldr	r0, [sp, #52]	; 0x34
   183a4:	ldr	r1, [sp, #68]	; 0x44
   183a8:	str	lr, [sp, #80]	; 0x50
   183ac:	eor	r0, r0, #1
   183b0:	tst	r0, #1
   183b4:	bne	184bc <__assert_fail@plt+0x681c>
   183b8:	tst	r4, #1
   183bc:	bne	18484 <__assert_fail@plt+0x67e4>
   183c0:	mov	r7, #0
   183c4:	cmp	r1, #0
   183c8:	beq	184b4 <__assert_fail@plt+0x6814>
   183cc:	ldr	r0, [sp, #84]	; 0x54
   183d0:	mov	r3, #0
   183d4:	cmp	r6, #0
   183d8:	mov	r2, #0
   183dc:	mov	r4, r1
   183e0:	str	r3, [fp, #-72]	; 0xffffffb8
   183e4:	beq	17520 <__assert_fail@plt+0x5880>
   183e8:	b	184bc <__assert_fail@plt+0x681c>
   183ec:	ldr	r7, [fp, #-64]	; 0xffffffc0
   183f0:	b	18418 <__assert_fail@plt+0x6778>
   183f4:	ldr	ip, [fp, #-84]	; 0xffffffac
   183f8:	mov	r2, #1
   183fc:	mov	lr, r4
   18400:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18404:	ldr	r6, [fp, #-52]	; 0xffffffcc
   18408:	b	1841c <__assert_fail@plt+0x677c>
   1840c:	ldr	ip, [fp, #-84]	; 0xffffffac
   18410:	mov	r7, #2
   18414:	ldr	r6, [fp, #-52]	; 0xffffffcc
   18418:	ldr	r2, [sp, #84]	; 0x54
   1841c:	mov	r0, #0
   18420:	ldr	r1, [fp, #12]
   18424:	tst	r2, #1
   18428:	mov	r2, r7
   1842c:	mov	r3, lr
   18430:	str	r0, [sp, #8]
   18434:	ldr	r0, [sp, #64]	; 0x40
   18438:	movwne	r2, #4
   1843c:	cmp	r7, #2
   18440:	movne	r2, r7
   18444:	str	r2, [sp]
   18448:	mov	r2, ip
   1844c:	bic	r1, r1, #2
   18450:	str	r0, [sp, #12]
   18454:	ldr	r0, [sp, #72]	; 0x48
   18458:	str	r1, [sp, #4]
   1845c:	mov	r1, r6
   18460:	str	r0, [sp, #16]
   18464:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18468:	bl	174a8 <__assert_fail@plt+0x5808>
   1846c:	mov	r8, r0
   18470:	mov	r0, r8
   18474:	sub	sp, fp, #28
   18478:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1847c:	mov	r7, #2
   18480:	b	18418 <__assert_fail@plt+0x6778>
   18484:	mov	r0, #5
   18488:	ldr	r2, [fp, #-84]	; 0xffffffac
   1848c:	ldr	r3, [sp, #80]	; 0x50
   18490:	str	r0, [sp]
   18494:	ldr	r0, [fp, #12]
   18498:	str	r0, [sp, #4]
   1849c:	ldr	r0, [fp, #16]
   184a0:	str	r0, [sp, #8]
   184a4:	ldr	r0, [sp, #64]	; 0x40
   184a8:	str	r0, [sp, #12]
   184ac:	ldr	r0, [sp, #72]	; 0x48
   184b0:	b	18460 <__assert_fail@plt+0x67c0>
   184b4:	mov	r0, #0
   184b8:	str	r0, [fp, #-72]	; 0xffffffb8
   184bc:	ldr	r1, [sp, #92]	; 0x5c
   184c0:	cmp	r1, #0
   184c4:	beq	18504 <__assert_fail@plt+0x6864>
   184c8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   184cc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   184d0:	tst	r0, #1
   184d4:	bne	18508 <__assert_fail@plt+0x6868>
   184d8:	ldrb	r0, [r1]
   184dc:	cmp	r0, #0
   184e0:	beq	18508 <__assert_fail@plt+0x6868>
   184e4:	add	r1, r1, #1
   184e8:	cmp	r8, r6
   184ec:	strbcc	r0, [r2, r8]
   184f0:	add	r8, r8, #1
   184f4:	ldrb	r0, [r1], #1
   184f8:	cmp	r0, #0
   184fc:	bne	184e8 <__assert_fail@plt+0x6848>
   18500:	b	18508 <__assert_fail@plt+0x6868>
   18504:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18508:	cmp	r8, r6
   1850c:	movcc	r0, #0
   18510:	strbcc	r0, [r2, r8]
   18514:	b	18470 <__assert_fail@plt+0x67d0>
   18518:	mov	r2, #1
   1851c:	b	18400 <__assert_fail@plt+0x6760>
   18520:	mov	r7, #5
   18524:	b	18414 <__assert_fail@plt+0x6774>
   18528:	bl	11c64 <abort@plt>
   1852c:	mov	r3, r2
   18530:	mov	r2, #0
   18534:	b	18538 <__assert_fail@plt+0x6898>
   18538:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1853c:	add	fp, sp, #28
   18540:	sub	sp, sp, #36	; 0x24
   18544:	movw	r8, #45720	; 0xb298
   18548:	cmp	r3, #0
   1854c:	mov	r4, r2
   18550:	str	r2, [sp, #24]
   18554:	mov	r5, r1
   18558:	mov	r6, r0
   1855c:	str	r0, [sp, #20]
   18560:	movt	r8, #3
   18564:	movne	r8, r3
   18568:	bl	11acc <__errno_location@plt>
   1856c:	str	r0, [sp, #28]
   18570:	cmp	r4, #0
   18574:	add	sl, r8, #8
   18578:	ldm	r8, {r3, r9}
   1857c:	ldr	r7, [r0]
   18580:	ldr	r1, [r8, #40]	; 0x28
   18584:	ldr	r2, [r8, #44]	; 0x2c
   18588:	mov	r0, #0
   1858c:	orreq	r9, r9, #1
   18590:	str	r7, [sp, #32]
   18594:	mov	r7, r5
   18598:	stm	sp, {r3, r9, sl}
   1859c:	str	r1, [sp, #12]
   185a0:	str	r2, [sp, #16]
   185a4:	mov	r1, #0
   185a8:	mov	r2, r6
   185ac:	mov	r3, r5
   185b0:	bl	174a8 <__assert_fail@plt+0x5808>
   185b4:	add	r4, r0, #1
   185b8:	mov	r5, r0
   185bc:	mov	r0, r4
   185c0:	bl	192f0 <__assert_fail@plt+0x7650>
   185c4:	mov	r6, r0
   185c8:	ldr	r0, [r8]
   185cc:	ldr	r2, [r8, #44]	; 0x2c
   185d0:	ldr	r1, [r8, #40]	; 0x28
   185d4:	mov	r3, r7
   185d8:	stm	sp, {r0, r9, sl}
   185dc:	str	r2, [sp, #16]
   185e0:	str	r1, [sp, #12]
   185e4:	mov	r0, r6
   185e8:	mov	r1, r4
   185ec:	ldr	r2, [sp, #20]
   185f0:	bl	174a8 <__assert_fail@plt+0x5808>
   185f4:	ldr	r0, [sp, #24]
   185f8:	ldr	r1, [sp, #32]
   185fc:	ldr	r2, [sp, #28]
   18600:	cmp	r0, #0
   18604:	str	r1, [r2]
   18608:	strne	r5, [r0]
   1860c:	mov	r0, r6
   18610:	sub	sp, fp, #28
   18614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18618:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1861c:	add	fp, sp, #24
   18620:	movw	r5, #45500	; 0xb1bc
   18624:	movw	r8, #45496	; 0xb1b8
   18628:	movt	r5, #3
   1862c:	movt	r8, #3
   18630:	ldr	r0, [r5]
   18634:	ldr	r4, [r8]
   18638:	cmp	r0, #2
   1863c:	blt	18668 <__assert_fail@plt+0x69c8>
   18640:	add	r7, r4, #12
   18644:	mov	r6, #0
   18648:	ldr	r0, [r7, r6, lsl #3]
   1864c:	bl	1a158 <__assert_fail@plt+0x84b8>
   18650:	ldr	r1, [r5]
   18654:	add	r2, r6, #2
   18658:	add	r0, r6, #1
   1865c:	mov	r6, r0
   18660:	cmp	r2, r1
   18664:	blt	18648 <__assert_fail@plt+0x69a8>
   18668:	ldr	r0, [r4, #4]
   1866c:	movw	r7, #45768	; 0xb2c8
   18670:	movt	r7, #3
   18674:	cmp	r0, r7
   18678:	beq	18690 <__assert_fail@plt+0x69f0>
   1867c:	bl	1a158 <__assert_fail@plt+0x84b8>
   18680:	movw	r0, #45504	; 0xb1c0
   18684:	mov	r6, #256	; 0x100
   18688:	movt	r0, #3
   1868c:	strd	r6, [r0]
   18690:	movw	r6, #45504	; 0xb1c0
   18694:	movt	r6, #3
   18698:	cmp	r4, r6
   1869c:	beq	186ac <__assert_fail@plt+0x6a0c>
   186a0:	mov	r0, r4
   186a4:	bl	1a158 <__assert_fail@plt+0x84b8>
   186a8:	str	r6, [r8]
   186ac:	mov	r0, #1
   186b0:	str	r0, [r5]
   186b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   186b8:	movw	r3, #45720	; 0xb298
   186bc:	mvn	r2, #0
   186c0:	movt	r3, #3
   186c4:	b	186c8 <__assert_fail@plt+0x6a28>
   186c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186cc:	add	fp, sp, #28
   186d0:	sub	sp, sp, #44	; 0x2c
   186d4:	mov	r7, r3
   186d8:	str	r2, [sp, #36]	; 0x24
   186dc:	str	r1, [sp, #32]
   186e0:	mov	r5, r0
   186e4:	bl	11acc <__errno_location@plt>
   186e8:	cmp	r5, #0
   186ec:	blt	18858 <__assert_fail@plt+0x6bb8>
   186f0:	cmn	r5, #-2147483647	; 0x80000001
   186f4:	beq	18858 <__assert_fail@plt+0x6bb8>
   186f8:	movw	r8, #45500	; 0xb1bc
   186fc:	movw	r4, #45496	; 0xb1b8
   18700:	str	r0, [sp, #28]
   18704:	ldr	r0, [r0]
   18708:	movt	r8, #3
   1870c:	movt	r4, #3
   18710:	ldr	r1, [r8]
   18714:	ldr	r6, [r4]
   18718:	str	r0, [sp, #24]
   1871c:	cmp	r1, r5
   18720:	ble	1872c <__assert_fail@plt+0x6a8c>
   18724:	mov	sl, r6
   18728:	b	18794 <__assert_fail@plt+0x6af4>
   1872c:	movw	r9, #45504	; 0xb1c0
   18730:	mov	r0, #8
   18734:	add	r2, r5, #1
   18738:	str	r1, [fp, #-32]	; 0xffffffe0
   1873c:	mvn	r3, #-2147483648	; 0x80000000
   18740:	movt	r9, #3
   18744:	str	r0, [sp]
   18748:	sub	r2, r2, r1
   1874c:	sub	r1, fp, #32
   18750:	subs	r0, r6, r9
   18754:	movne	r0, r6
   18758:	bl	19420 <__assert_fail@plt+0x7780>
   1875c:	cmp	r6, r9
   18760:	mov	sl, r0
   18764:	str	r0, [r4]
   18768:	ldrdeq	r0, [r9]
   1876c:	stmeq	sl, {r0, r1}
   18770:	ldr	r1, [r8]
   18774:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18778:	add	r0, sl, r1, lsl #3
   1877c:	sub	r1, r2, r1
   18780:	lsl	r2, r1, #3
   18784:	mov	r1, #0
   18788:	bl	11b08 <memset@plt>
   1878c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18790:	str	r0, [r8]
   18794:	mov	r9, sl
   18798:	ldr	r6, [r9, r5, lsl #3]!
   1879c:	ldr	r4, [r9, #4]!
   187a0:	ldm	r7, {r0, r1}
   187a4:	ldr	r2, [r7, #40]	; 0x28
   187a8:	ldr	r3, [r7, #44]	; 0x2c
   187ac:	orr	r8, r1, #1
   187b0:	add	r1, r7, #8
   187b4:	stm	sp, {r0, r8}
   187b8:	add	r0, sp, #8
   187bc:	str	r1, [sp, #20]
   187c0:	stm	r0, {r1, r2, r3}
   187c4:	mov	r0, r4
   187c8:	mov	r1, r6
   187cc:	ldr	r2, [sp, #32]
   187d0:	ldr	r3, [sp, #36]	; 0x24
   187d4:	bl	174a8 <__assert_fail@plt+0x5808>
   187d8:	cmp	r6, r0
   187dc:	bhi	18840 <__assert_fail@plt+0x6ba0>
   187e0:	add	r6, r0, #1
   187e4:	movw	r0, #45768	; 0xb2c8
   187e8:	movt	r0, #3
   187ec:	str	r6, [sl, r5, lsl #3]
   187f0:	cmp	r4, r0
   187f4:	beq	18800 <__assert_fail@plt+0x6b60>
   187f8:	mov	r0, r4
   187fc:	bl	1a158 <__assert_fail@plt+0x84b8>
   18800:	mov	r0, r6
   18804:	bl	192f0 <__assert_fail@plt+0x7650>
   18808:	str	r0, [r9]
   1880c:	mov	r4, r0
   18810:	add	r3, sp, #8
   18814:	ldr	r0, [r7]
   18818:	ldr	r1, [r7, #40]	; 0x28
   1881c:	ldr	r2, [r7, #44]	; 0x2c
   18820:	stm	sp, {r0, r8}
   18824:	ldr	r0, [sp, #20]
   18828:	stm	r3, {r0, r1, r2}
   1882c:	mov	r0, r4
   18830:	mov	r1, r6
   18834:	ldr	r2, [sp, #32]
   18838:	ldr	r3, [sp, #36]	; 0x24
   1883c:	bl	174a8 <__assert_fail@plt+0x5808>
   18840:	ldr	r0, [sp, #28]
   18844:	ldr	r1, [sp, #24]
   18848:	str	r1, [r0]
   1884c:	mov	r0, r4
   18850:	sub	sp, fp, #28
   18854:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18858:	bl	11c64 <abort@plt>
   1885c:	movw	r3, #45720	; 0xb298
   18860:	movt	r3, #3
   18864:	b	186c8 <__assert_fail@plt+0x6a28>
   18868:	movw	r3, #45720	; 0xb298
   1886c:	mov	r1, r0
   18870:	mov	r0, #0
   18874:	mvn	r2, #0
   18878:	movt	r3, #3
   1887c:	b	186c8 <__assert_fail@plt+0x6a28>
   18880:	movw	r3, #45720	; 0xb298
   18884:	mov	r2, r1
   18888:	mov	r1, r0
   1888c:	mov	r0, #0
   18890:	movt	r3, #3
   18894:	b	186c8 <__assert_fail@plt+0x6a28>
   18898:	push	{fp, lr}
   1889c:	mov	fp, sp
   188a0:	sub	sp, sp, #48	; 0x30
   188a4:	vmov.i32	q8, #0	; 0x00000000
   188a8:	mov	ip, #32
   188ac:	mov	r3, sp
   188b0:	mov	lr, r2
   188b4:	cmp	r1, #10
   188b8:	add	r2, r3, #16
   188bc:	vst1.64	{d16-d17}, [r3], ip
   188c0:	vst1.64	{d16-d17}, [r3]
   188c4:	vst1.64	{d16-d17}, [r2]
   188c8:	beq	188e8 <__assert_fail@plt+0x6c48>
   188cc:	str	r1, [sp]
   188d0:	mov	r3, sp
   188d4:	mov	r1, lr
   188d8:	mvn	r2, #0
   188dc:	bl	186c8 <__assert_fail@plt+0x6a28>
   188e0:	mov	sp, fp
   188e4:	pop	{fp, pc}
   188e8:	bl	11c64 <abort@plt>
   188ec:	push	{r4, sl, fp, lr}
   188f0:	add	fp, sp, #8
   188f4:	sub	sp, sp, #48	; 0x30
   188f8:	mov	ip, r3
   188fc:	mov	r3, sp
   18900:	vmov.i32	q8, #0	; 0x00000000
   18904:	mov	lr, #32
   18908:	cmp	r1, #10
   1890c:	add	r4, r3, #16
   18910:	vst1.64	{d16-d17}, [r3], lr
   18914:	vst1.64	{d16-d17}, [r3]
   18918:	vst1.64	{d16-d17}, [r4]
   1891c:	beq	1893c <__assert_fail@plt+0x6c9c>
   18920:	str	r1, [sp]
   18924:	mov	r1, r2
   18928:	mov	r3, sp
   1892c:	mov	r2, ip
   18930:	bl	186c8 <__assert_fail@plt+0x6a28>
   18934:	sub	sp, fp, #8
   18938:	pop	{r4, sl, fp, pc}
   1893c:	bl	11c64 <abort@plt>
   18940:	mov	r2, r1
   18944:	mov	r1, r0
   18948:	mov	r0, #0
   1894c:	b	18898 <__assert_fail@plt+0x6bf8>
   18950:	mov	r3, r2
   18954:	mov	r2, r1
   18958:	mov	r1, r0
   1895c:	mov	r0, #0
   18960:	b	188ec <__assert_fail@plt+0x6c4c>
   18964:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18968:	add	fp, sp, #24
   1896c:	sub	sp, sp, #48	; 0x30
   18970:	movw	r8, #45720	; 0xb298
   18974:	mov	lr, r0
   18978:	mov	r3, sp
   1897c:	mov	ip, r1
   18980:	movt	r8, #3
   18984:	mov	r1, r3
   18988:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   1898c:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   18990:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   18994:	stm	r1, {r0, r4, r5, r6, r7, r9}
   18998:	ubfx	r0, r2, #5, #3
   1899c:	and	r2, r2, #31
   189a0:	mov	r4, #1
   189a4:	add	r0, r3, r0, lsl #2
   189a8:	ldr	r1, [r0, #8]
   189ac:	bic	r4, r4, r1, lsr r2
   189b0:	eor	r1, r1, r4, lsl r2
   189b4:	mov	r2, ip
   189b8:	str	r1, [r0, #8]
   189bc:	mov	r0, #0
   189c0:	mov	r1, lr
   189c4:	bl	186c8 <__assert_fail@plt+0x6a28>
   189c8:	sub	sp, fp, #24
   189cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   189d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   189d4:	add	fp, sp, #24
   189d8:	sub	sp, sp, #48	; 0x30
   189dc:	movw	lr, #45720	; 0xb298
   189e0:	mov	ip, r0
   189e4:	mov	r3, sp
   189e8:	movt	lr, #3
   189ec:	mov	r2, r3
   189f0:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   189f4:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   189f8:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   189fc:	stm	r2, {r0, r4, r5, r6, r7, r8}
   18a00:	ubfx	r0, r1, #5, #3
   18a04:	and	r1, r1, #31
   18a08:	mov	r7, #1
   18a0c:	add	r0, r3, r0, lsl #2
   18a10:	ldr	r2, [r0, #8]
   18a14:	bic	r7, r7, r2, lsr r1
   18a18:	eor	r1, r2, r7, lsl r1
   18a1c:	mvn	r2, #0
   18a20:	str	r1, [r0, #8]
   18a24:	mov	r0, #0
   18a28:	mov	r1, ip
   18a2c:	bl	186c8 <__assert_fail@plt+0x6a28>
   18a30:	sub	sp, fp, #24
   18a34:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18a38:	push	{r4, r5, r6, r7, fp, lr}
   18a3c:	add	fp, sp, #16
   18a40:	sub	sp, sp, #48	; 0x30
   18a44:	movw	lr, #45720	; 0xb298
   18a48:	mov	ip, r0
   18a4c:	mov	r3, sp
   18a50:	movt	lr, #3
   18a54:	mov	r2, r3
   18a58:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   18a5c:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   18a60:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   18a64:	stm	r2, {r0, r1, r4, r5, r6, r7}
   18a68:	mov	r1, ip
   18a6c:	mvn	r2, #0
   18a70:	ldr	r0, [sp, #12]
   18a74:	orr	r0, r0, #67108864	; 0x4000000
   18a78:	str	r0, [sp, #12]
   18a7c:	mov	r0, #0
   18a80:	bl	186c8 <__assert_fail@plt+0x6a28>
   18a84:	sub	sp, fp, #16
   18a88:	pop	{r4, r5, r6, r7, fp, pc}
   18a8c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18a90:	add	fp, sp, #24
   18a94:	sub	sp, sp, #48	; 0x30
   18a98:	movw	r8, #45720	; 0xb298
   18a9c:	mov	ip, r1
   18aa0:	mov	lr, r0
   18aa4:	mov	r3, sp
   18aa8:	movt	r8, #3
   18aac:	mov	r2, r3
   18ab0:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   18ab4:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   18ab8:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   18abc:	stm	r2, {r0, r1, r4, r5, r6, r7}
   18ac0:	mov	r1, lr
   18ac4:	mov	r2, ip
   18ac8:	ldr	r0, [sp, #12]
   18acc:	orr	r0, r0, #67108864	; 0x4000000
   18ad0:	str	r0, [sp, #12]
   18ad4:	mov	r0, #0
   18ad8:	bl	186c8 <__assert_fail@plt+0x6a28>
   18adc:	sub	sp, fp, #24
   18ae0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18ae4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18ae8:	add	fp, sp, #24
   18aec:	sub	sp, sp, #96	; 0x60
   18af0:	mov	lr, sp
   18af4:	vmov.i32	q8, #0	; 0x00000000
   18af8:	mov	ip, r2
   18afc:	cmp	r1, #10
   18b00:	add	r3, lr, #16
   18b04:	mov	r2, lr
   18b08:	vst1.64	{d16-d17}, [r3]
   18b0c:	mov	r3, #28
   18b10:	vst1.64	{d16-d17}, [r2], r3
   18b14:	vst1.32	{d16-d17}, [r2]
   18b18:	beq	18b58 <__assert_fail@plt+0x6eb8>
   18b1c:	str	r1, [sp, #48]	; 0x30
   18b20:	add	r3, sp, #48	; 0x30
   18b24:	ldm	lr!, {r2, r4, r5, r6, r7}
   18b28:	add	r1, r3, #4
   18b2c:	stmia	r1!, {r2, r4, r5, r6, r7}
   18b30:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   18b34:	stm	r1, {r2, r4, r5, r6, r7, r8}
   18b38:	mvn	r2, #0
   18b3c:	ldr	r1, [sp, #60]	; 0x3c
   18b40:	orr	r1, r1, #67108864	; 0x4000000
   18b44:	str	r1, [sp, #60]	; 0x3c
   18b48:	mov	r1, ip
   18b4c:	bl	186c8 <__assert_fail@plt+0x6a28>
   18b50:	sub	sp, fp, #24
   18b54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18b58:	bl	11c64 <abort@plt>
   18b5c:	push	{fp, lr}
   18b60:	mov	fp, sp
   18b64:	sub	sp, sp, #8
   18b68:	mvn	ip, #0
   18b6c:	str	ip, [sp]
   18b70:	bl	18b7c <__assert_fail@plt+0x6edc>
   18b74:	mov	sp, fp
   18b78:	pop	{fp, pc}
   18b7c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18b80:	add	fp, sp, #24
   18b84:	sub	sp, sp, #48	; 0x30
   18b88:	movw	ip, #45720	; 0xb298
   18b8c:	mov	lr, r3
   18b90:	mov	r3, sp
   18b94:	cmp	r1, #0
   18b98:	movt	ip, #3
   18b9c:	cmpne	r2, #0
   18ba0:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   18ba4:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   18ba8:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   18bac:	stm	r3, {r4, r5, r6, r7, r8, r9}
   18bb0:	mov	r3, #10
   18bb4:	str	r3, [sp]
   18bb8:	bne	18bc0 <__assert_fail@plt+0x6f20>
   18bbc:	bl	11c64 <abort@plt>
   18bc0:	ldr	ip, [fp, #8]
   18bc4:	str	r2, [sp, #44]	; 0x2c
   18bc8:	str	r1, [sp, #40]	; 0x28
   18bcc:	mov	r3, sp
   18bd0:	mov	r1, lr
   18bd4:	mov	r2, ip
   18bd8:	bl	186c8 <__assert_fail@plt+0x6a28>
   18bdc:	sub	sp, fp, #24
   18be0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18be4:	push	{fp, lr}
   18be8:	mov	fp, sp
   18bec:	sub	sp, sp, #8
   18bf0:	mov	r3, r2
   18bf4:	mov	r2, r1
   18bf8:	mov	r1, r0
   18bfc:	mvn	r0, #0
   18c00:	str	r0, [sp]
   18c04:	mov	r0, #0
   18c08:	bl	18b7c <__assert_fail@plt+0x6edc>
   18c0c:	mov	sp, fp
   18c10:	pop	{fp, pc}
   18c14:	push	{fp, lr}
   18c18:	mov	fp, sp
   18c1c:	sub	sp, sp, #8
   18c20:	mov	ip, r2
   18c24:	mov	r2, r1
   18c28:	mov	r1, r0
   18c2c:	str	r3, [sp]
   18c30:	mov	r0, #0
   18c34:	mov	r3, ip
   18c38:	bl	18b7c <__assert_fail@plt+0x6edc>
   18c3c:	mov	sp, fp
   18c40:	pop	{fp, pc}
   18c44:	movw	r3, #45512	; 0xb1c8
   18c48:	movt	r3, #3
   18c4c:	b	186c8 <__assert_fail@plt+0x6a28>
   18c50:	movw	r3, #45512	; 0xb1c8
   18c54:	mov	r2, r1
   18c58:	mov	r1, r0
   18c5c:	mov	r0, #0
   18c60:	movt	r3, #3
   18c64:	b	186c8 <__assert_fail@plt+0x6a28>
   18c68:	movw	r3, #45512	; 0xb1c8
   18c6c:	mvn	r2, #0
   18c70:	movt	r3, #3
   18c74:	b	186c8 <__assert_fail@plt+0x6a28>
   18c78:	movw	r3, #45512	; 0xb1c8
   18c7c:	mov	r1, r0
   18c80:	mov	r0, #0
   18c84:	mvn	r2, #0
   18c88:	movt	r3, #3
   18c8c:	b	186c8 <__assert_fail@plt+0x6a28>
   18c90:	push	{r4, r5, fp, lr}
   18c94:	add	fp, sp, #8
   18c98:	mov	r5, r0
   18c9c:	mov	r4, r1
   18ca0:	mov	r0, #0
   18ca4:	mov	r2, #5
   18ca8:	mov	r1, r5
   18cac:	bl	11934 <dcgettext@plt>
   18cb0:	cmp	r0, r5
   18cb4:	popne	{r4, r5, fp, pc}
   18cb8:	bl	28694 <__assert_fail@plt+0x169f4>
   18cbc:	ldrb	r1, [r0]
   18cc0:	and	r1, r1, #223	; 0xdf
   18cc4:	cmp	r1, #71	; 0x47
   18cc8:	beq	18d30 <__assert_fail@plt+0x7090>
   18ccc:	cmp	r1, #85	; 0x55
   18cd0:	bne	18d54 <__assert_fail@plt+0x70b4>
   18cd4:	ldrb	r1, [r0, #1]
   18cd8:	and	r1, r1, #223	; 0xdf
   18cdc:	cmp	r1, #84	; 0x54
   18ce0:	bne	18d54 <__assert_fail@plt+0x70b4>
   18ce4:	ldrb	r1, [r0, #2]
   18ce8:	and	r1, r1, #223	; 0xdf
   18cec:	cmp	r1, #70	; 0x46
   18cf0:	ldrbeq	r1, [r0, #3]
   18cf4:	cmpeq	r1, #45	; 0x2d
   18cf8:	bne	18d54 <__assert_fail@plt+0x70b4>
   18cfc:	ldrb	r1, [r0, #4]
   18d00:	cmp	r1, #56	; 0x38
   18d04:	ldrbeq	r0, [r0, #5]
   18d08:	cmpeq	r0, #0
   18d0c:	bne	18d54 <__assert_fail@plt+0x70b4>
   18d10:	ldrb	r1, [r5]
   18d14:	movw	r2, #41436	; 0xa1dc
   18d18:	movw	r0, #41440	; 0xa1e0
   18d1c:	movt	r2, #2
   18d20:	movt	r0, #2
   18d24:	cmp	r1, #96	; 0x60
   18d28:	moveq	r0, r2
   18d2c:	pop	{r4, r5, fp, pc}
   18d30:	ldrb	r1, [r0, #1]
   18d34:	and	r1, r1, #223	; 0xdf
   18d38:	cmp	r1, #66	; 0x42
   18d3c:	bne	18d54 <__assert_fail@plt+0x70b4>
   18d40:	ldrb	r1, [r0, #2]
   18d44:	cmp	r1, #49	; 0x31
   18d48:	ldrbeq	r1, [r0, #3]
   18d4c:	cmpeq	r1, #56	; 0x38
   18d50:	beq	18d70 <__assert_fail@plt+0x70d0>
   18d54:	movw	r1, #41432	; 0xa1d8
   18d58:	movw	r0, #38665	; 0x9709
   18d5c:	cmp	r4, #9
   18d60:	movt	r1, #2
   18d64:	movt	r0, #2
   18d68:	moveq	r0, r1
   18d6c:	pop	{r4, r5, fp, pc}
   18d70:	ldrb	r1, [r0, #4]
   18d74:	cmp	r1, #48	; 0x30
   18d78:	ldrbeq	r1, [r0, #5]
   18d7c:	cmpeq	r1, #51	; 0x33
   18d80:	bne	18d54 <__assert_fail@plt+0x70b4>
   18d84:	ldrb	r1, [r0, #6]
   18d88:	cmp	r1, #48	; 0x30
   18d8c:	ldrbeq	r0, [r0, #7]
   18d90:	cmpeq	r0, #0
   18d94:	bne	18d54 <__assert_fail@plt+0x70b4>
   18d98:	ldrb	r1, [r5]
   18d9c:	movw	r2, #41444	; 0xa1e4
   18da0:	movw	r0, #41448	; 0xa1e8
   18da4:	movt	r2, #2
   18da8:	movt	r0, #2
   18dac:	b	18d24 <__assert_fail@plt+0x7084>
   18db0:	push	{r4, r5, fp, lr}
   18db4:	add	fp, sp, #8
   18db8:	mov	r4, r1
   18dbc:	mov	r1, #0
   18dc0:	mov	r5, r0
   18dc4:	mov	r2, r4
   18dc8:	bl	11b5c <memchr@plt>
   18dcc:	rsb	r1, r5, #1
   18dd0:	cmp	r0, #0
   18dd4:	addne	r4, r1, r0
   18dd8:	mov	r0, r4
   18ddc:	pop	{r4, r5, fp, pc}
   18de0:	push	{r4, r5, r6, r7, fp, lr}
   18de4:	add	fp, sp, #16
   18de8:	mov	r4, r0
   18dec:	cmp	r0, #2
   18df0:	movhi	r0, r4
   18df4:	pophi	{r4, r5, r6, r7, fp, pc}
   18df8:	mov	r0, r4
   18dfc:	bl	288a0 <__assert_fail@plt+0x16c00>
   18e00:	mov	r5, r0
   18e04:	bl	11acc <__errno_location@plt>
   18e08:	ldr	r7, [r0]
   18e0c:	mov	r6, r0
   18e10:	mov	r0, r4
   18e14:	bl	11c7c <close@plt>
   18e18:	mov	r0, r5
   18e1c:	str	r7, [r6]
   18e20:	pop	{r4, r5, r6, r7, fp, pc}
   18e24:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18e28:	add	fp, sp, #24
   18e2c:	sub	sp, sp, #32
   18e30:	ldr	r7, [fp, #12]
   18e34:	ldr	r6, [fp, #8]
   18e38:	mov	r4, r2
   18e3c:	mov	r5, r0
   18e40:	cmp	r1, #0
   18e44:	beq	18e64 <__assert_fail@plt+0x71c4>
   18e48:	mov	r2, r1
   18e4c:	movw	r1, #41536	; 0xa240
   18e50:	str	r3, [sp]
   18e54:	mov	r0, r5
   18e58:	mov	r3, r4
   18e5c:	movt	r1, #2
   18e60:	b	18e74 <__assert_fail@plt+0x71d4>
   18e64:	movw	r1, #41548	; 0xa24c
   18e68:	mov	r0, r5
   18e6c:	mov	r2, r4
   18e70:	movt	r1, #2
   18e74:	bl	11ab4 <fprintf@plt>
   18e78:	movw	r1, #41555	; 0xa253
   18e7c:	mov	r0, #0
   18e80:	mov	r2, #5
   18e84:	movt	r1, #2
   18e88:	bl	11934 <dcgettext@plt>
   18e8c:	movw	r1, #42251	; 0xa50b
   18e90:	mov	r2, r0
   18e94:	mov	r0, r5
   18e98:	movw	r3, #2022	; 0x7e6
   18e9c:	movt	r1, #2
   18ea0:	bl	11ab4 <fprintf@plt>
   18ea4:	movw	r4, #39774	; 0x9b5e
   18ea8:	mov	r1, r5
   18eac:	movt	r4, #2
   18eb0:	mov	r0, r4
   18eb4:	bl	11c4c <fputs@plt>
   18eb8:	movw	r1, #41559	; 0xa257
   18ebc:	mov	r0, #0
   18ec0:	mov	r2, #5
   18ec4:	movt	r1, #2
   18ec8:	bl	11934 <dcgettext@plt>
   18ecc:	movw	r2, #41730	; 0xa302
   18ed0:	mov	r1, r0
   18ed4:	mov	r0, r5
   18ed8:	movt	r2, #2
   18edc:	bl	11ab4 <fprintf@plt>
   18ee0:	mov	r0, r4
   18ee4:	mov	r1, r5
   18ee8:	bl	11c4c <fputs@plt>
   18eec:	cmp	r7, #9
   18ef0:	bhi	18f50 <__assert_fail@plt+0x72b0>
   18ef4:	add	r0, pc, #0
   18ef8:	ldr	pc, [r0, r7, lsl #2]
   18efc:	andeq	r9, r1, r0, asr #2
   18f00:	andeq	r8, r1, r4, lsr #30
   18f04:	andeq	r8, r1, ip, asr pc
   18f08:	andeq	r8, r1, r8, lsl #31
   18f0c:			; <UNDEFINED> instruction: 0x00018fb0
   18f10:	ldrdeq	r8, [r1], -ip
   18f14:	andeq	r9, r1, r0, lsl r0
   18f18:	andeq	r9, r1, r0, asr r0
   18f1c:	andeq	r9, r1, ip, ror #1
   18f20:	muleq	r1, r4, r0
   18f24:	movw	r1, #41764	; 0xa324
   18f28:	mov	r0, #0
   18f2c:	mov	r2, #5
   18f30:	movt	r1, #2
   18f34:	bl	11934 <dcgettext@plt>
   18f38:	ldr	r2, [r6]
   18f3c:	mov	r1, r0
   18f40:	mov	r0, r5
   18f44:	sub	sp, fp, #24
   18f48:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18f4c:	b	11ab4 <fprintf@plt>
   18f50:	movw	r1, #42083	; 0xa463
   18f54:	movt	r1, #2
   18f58:	b	1909c <__assert_fail@plt+0x73fc>
   18f5c:	movw	r1, #41780	; 0xa334
   18f60:	mov	r0, #0
   18f64:	mov	r2, #5
   18f68:	movt	r1, #2
   18f6c:	bl	11934 <dcgettext@plt>
   18f70:	ldm	r6, {r2, r3}
   18f74:	mov	r1, r0
   18f78:	mov	r0, r5
   18f7c:	sub	sp, fp, #24
   18f80:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18f84:	b	11ab4 <fprintf@plt>
   18f88:	movw	r1, #41803	; 0xa34b
   18f8c:	mov	r0, #0
   18f90:	mov	r2, #5
   18f94:	movt	r1, #2
   18f98:	bl	11934 <dcgettext@plt>
   18f9c:	mov	r1, r0
   18fa0:	ldm	r6, {r2, r3}
   18fa4:	ldr	r0, [r6, #8]
   18fa8:	str	r0, [sp]
   18fac:	b	19048 <__assert_fail@plt+0x73a8>
   18fb0:	movw	r1, #41831	; 0xa367
   18fb4:	mov	r0, #0
   18fb8:	mov	r2, #5
   18fbc:	movt	r1, #2
   18fc0:	bl	11934 <dcgettext@plt>
   18fc4:	ldm	r6, {r2, r3}
   18fc8:	mov	r1, r0
   18fcc:	ldr	r0, [r6, #8]
   18fd0:	ldr	r7, [r6, #12]
   18fd4:	stm	sp, {r0, r7}
   18fd8:	b	19048 <__assert_fail@plt+0x73a8>
   18fdc:	movw	r1, #41863	; 0xa387
   18fe0:	mov	r0, #0
   18fe4:	mov	r2, #5
   18fe8:	movt	r1, #2
   18fec:	bl	11934 <dcgettext@plt>
   18ff0:	ldm	r6, {r2, r3}
   18ff4:	mov	r1, r0
   18ff8:	ldr	r0, [r6, #8]
   18ffc:	ldr	r7, [r6, #12]
   19000:	ldr	r6, [r6, #16]
   19004:	stm	sp, {r0, r7}
   19008:	str	r6, [sp, #8]
   1900c:	b	19048 <__assert_fail@plt+0x73a8>
   19010:	movw	r1, #41899	; 0xa3ab
   19014:	mov	r0, #0
   19018:	mov	r2, #5
   1901c:	movt	r1, #2
   19020:	bl	11934 <dcgettext@plt>
   19024:	ldm	r6, {r2, r3}
   19028:	mov	r1, r0
   1902c:	ldr	r0, [r6, #8]
   19030:	ldr	r7, [r6, #12]
   19034:	ldr	r4, [r6, #16]
   19038:	ldr	r6, [r6, #20]
   1903c:	stm	sp, {r0, r7}
   19040:	str	r4, [sp, #8]
   19044:	str	r6, [sp, #12]
   19048:	mov	r0, r5
   1904c:	b	1913c <__assert_fail@plt+0x749c>
   19050:	movw	r1, #41939	; 0xa3d3
   19054:	mov	r0, #0
   19058:	mov	r2, #5
   1905c:	movt	r1, #2
   19060:	bl	11934 <dcgettext@plt>
   19064:	ldm	r6, {r2, r3}
   19068:	mov	ip, r0
   1906c:	ldr	r0, [r6, #8]
   19070:	ldr	r7, [r6, #12]
   19074:	ldr	r4, [r6, #16]
   19078:	ldr	r1, [r6, #20]
   1907c:	ldr	r6, [r6, #24]
   19080:	stm	sp, {r0, r7}
   19084:	str	r4, [sp, #8]
   19088:	str	r1, [sp, #12]
   1908c:	str	r6, [sp, #16]
   19090:	b	19134 <__assert_fail@plt+0x7494>
   19094:	movw	r1, #42031	; 0xa42f
   19098:	movt	r1, #2
   1909c:	mov	r0, #0
   190a0:	mov	r2, #5
   190a4:	bl	11934 <dcgettext@plt>
   190a8:	mov	ip, r0
   190ac:	ldr	r2, [r6]
   190b0:	ldr	r3, [r6, #4]
   190b4:	ldr	r0, [r6, #8]
   190b8:	ldr	r7, [r6, #12]
   190bc:	ldr	r4, [r6, #16]
   190c0:	ldr	r1, [r6, #20]
   190c4:	ldr	lr, [r6, #24]
   190c8:	ldr	r8, [r6, #28]
   190cc:	ldr	r6, [r6, #32]
   190d0:	stm	sp, {r0, r7}
   190d4:	str	r4, [sp, #8]
   190d8:	str	r1, [sp, #12]
   190dc:	str	lr, [sp, #16]
   190e0:	str	r8, [sp, #20]
   190e4:	str	r6, [sp, #24]
   190e8:	b	19134 <__assert_fail@plt+0x7494>
   190ec:	movw	r1, #41983	; 0xa3ff
   190f0:	mov	r0, #0
   190f4:	mov	r2, #5
   190f8:	movt	r1, #2
   190fc:	bl	11934 <dcgettext@plt>
   19100:	ldm	r6, {r2, r3}
   19104:	mov	ip, r0
   19108:	ldr	r0, [r6, #8]
   1910c:	ldr	r7, [r6, #12]
   19110:	ldr	r4, [r6, #16]
   19114:	ldr	r1, [r6, #20]
   19118:	ldr	lr, [r6, #24]
   1911c:	ldr	r6, [r6, #28]
   19120:	stm	sp, {r0, r7}
   19124:	str	r4, [sp, #8]
   19128:	str	r1, [sp, #12]
   1912c:	str	lr, [sp, #16]
   19130:	str	r6, [sp, #20]
   19134:	mov	r0, r5
   19138:	mov	r1, ip
   1913c:	bl	11ab4 <fprintf@plt>
   19140:	sub	sp, fp, #24
   19144:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19148:	push	{r4, sl, fp, lr}
   1914c:	add	fp, sp, #8
   19150:	sub	sp, sp, #8
   19154:	ldr	ip, [fp, #8]
   19158:	mov	lr, #0
   1915c:	ldr	r4, [ip, lr, lsl #2]
   19160:	add	lr, lr, #1
   19164:	cmp	r4, #0
   19168:	bne	1915c <__assert_fail@plt+0x74bc>
   1916c:	sub	r4, lr, #1
   19170:	str	ip, [sp]
   19174:	str	r4, [sp, #4]
   19178:	bl	18e24 <__assert_fail@plt+0x7184>
   1917c:	sub	sp, fp, #8
   19180:	pop	{r4, sl, fp, pc}
   19184:	push	{r4, r5, fp, lr}
   19188:	add	fp, sp, #8
   1918c:	sub	sp, sp, #48	; 0x30
   19190:	ldr	r4, [fp, #8]
   19194:	mov	ip, #0
   19198:	add	lr, sp, #8
   1919c:	ldr	r5, [r4]
   191a0:	cmp	r5, #0
   191a4:	str	r5, [lr, ip, lsl #2]
   191a8:	beq	191bc <__assert_fail@plt+0x751c>
   191ac:	add	ip, ip, #1
   191b0:	add	r4, r4, #4
   191b4:	cmp	ip, #10
   191b8:	bcc	1919c <__assert_fail@plt+0x74fc>
   191bc:	str	lr, [sp]
   191c0:	str	ip, [sp, #4]
   191c4:	bl	18e24 <__assert_fail@plt+0x7184>
   191c8:	sub	sp, fp, #8
   191cc:	pop	{r4, r5, fp, pc}
   191d0:	push	{fp, lr}
   191d4:	mov	fp, sp
   191d8:	sub	sp, sp, #8
   191dc:	add	ip, fp, #8
   191e0:	str	ip, [sp, #4]
   191e4:	str	ip, [sp]
   191e8:	bl	19184 <__assert_fail@plt+0x74e4>
   191ec:	mov	sp, fp
   191f0:	pop	{fp, pc}
   191f4:	push	{fp, lr}
   191f8:	mov	fp, sp
   191fc:	movw	r0, #45588	; 0xb214
   19200:	movt	r0, #3
   19204:	ldr	r1, [r0]
   19208:	movw	r0, #39774	; 0x9b5e
   1920c:	movt	r0, #2
   19210:	bl	11c4c <fputs@plt>
   19214:	movw	r1, #42143	; 0xa49f
   19218:	mov	r0, #0
   1921c:	mov	r2, #5
   19220:	movt	r1, #2
   19224:	bl	11934 <dcgettext@plt>
   19228:	movw	r1, #41004	; 0xa02c
   1922c:	movt	r1, #2
   19230:	bl	1185c <printf@plt>
   19234:	movw	r1, #42163	; 0xa4b3
   19238:	mov	r0, #0
   1923c:	mov	r2, #5
   19240:	movt	r1, #2
   19244:	bl	11934 <dcgettext@plt>
   19248:	movw	r1, #40333	; 0x9d8d
   1924c:	movw	r2, #40918	; 0x9fd6
   19250:	movt	r1, #2
   19254:	movt	r2, #2
   19258:	bl	1185c <printf@plt>
   1925c:	movw	r1, #42183	; 0xa4c7
   19260:	mov	r0, #0
   19264:	mov	r2, #5
   19268:	movt	r1, #2
   1926c:	bl	11934 <dcgettext@plt>
   19270:	movw	r1, #42222	; 0xa4ee
   19274:	movt	r1, #2
   19278:	pop	{fp, lr}
   1927c:	b	1185c <printf@plt>
   19280:	b	19284 <__assert_fail@plt+0x75e4>
   19284:	push	{r4, r5, r6, sl, fp, lr}
   19288:	add	fp, sp, #16
   1928c:	mov	r4, r2
   19290:	mov	r5, r1
   19294:	mov	r6, r0
   19298:	bl	1a304 <__assert_fail@plt+0x8664>
   1929c:	cmp	r0, #0
   192a0:	popne	{r4, r5, r6, sl, fp, pc}
   192a4:	cmp	r6, #0
   192a8:	beq	192bc <__assert_fail@plt+0x761c>
   192ac:	cmp	r5, #0
   192b0:	cmpne	r4, #0
   192b4:	bne	192bc <__assert_fail@plt+0x761c>
   192b8:	pop	{r4, r5, r6, sl, fp, pc}
   192bc:	bl	19710 <__assert_fail@plt+0x7a70>
   192c0:	push	{fp, lr}
   192c4:	mov	fp, sp
   192c8:	bl	1a224 <__assert_fail@plt+0x8584>
   192cc:	cmp	r0, #0
   192d0:	popne	{fp, pc}
   192d4:	bl	19710 <__assert_fail@plt+0x7a70>
   192d8:	push	{fp, lr}
   192dc:	mov	fp, sp
   192e0:	bl	1a224 <__assert_fail@plt+0x8584>
   192e4:	cmp	r0, #0
   192e8:	popne	{fp, pc}
   192ec:	bl	19710 <__assert_fail@plt+0x7a70>
   192f0:	push	{fp, lr}
   192f4:	mov	fp, sp
   192f8:	bl	1a224 <__assert_fail@plt+0x8584>
   192fc:	cmp	r0, #0
   19300:	popne	{fp, pc}
   19304:	bl	19710 <__assert_fail@plt+0x7a70>
   19308:	push	{r4, r5, fp, lr}
   1930c:	add	fp, sp, #8
   19310:	mov	r4, r1
   19314:	mov	r5, r0
   19318:	bl	1a2b4 <__assert_fail@plt+0x8614>
   1931c:	cmp	r0, #0
   19320:	popne	{r4, r5, fp, pc}
   19324:	cmp	r5, #0
   19328:	beq	19338 <__assert_fail@plt+0x7698>
   1932c:	cmp	r4, #0
   19330:	bne	19338 <__assert_fail@plt+0x7698>
   19334:	pop	{r4, r5, fp, pc}
   19338:	bl	19710 <__assert_fail@plt+0x7a70>
   1933c:	push	{fp, lr}
   19340:	mov	fp, sp
   19344:	cmp	r1, #0
   19348:	orreq	r1, r1, #1
   1934c:	bl	1a2b4 <__assert_fail@plt+0x8614>
   19350:	cmp	r0, #0
   19354:	popne	{fp, pc}
   19358:	bl	19710 <__assert_fail@plt+0x7a70>
   1935c:	push	{fp, lr}
   19360:	mov	fp, sp
   19364:	clz	r3, r2
   19368:	lsr	ip, r3, #5
   1936c:	clz	r3, r1
   19370:	lsr	r3, r3, #5
   19374:	orrs	r3, r3, ip
   19378:	movwne	r1, #1
   1937c:	movwne	r2, #1
   19380:	bl	1a304 <__assert_fail@plt+0x8664>
   19384:	cmp	r0, #0
   19388:	popne	{fp, pc}
   1938c:	bl	19710 <__assert_fail@plt+0x7a70>
   19390:	push	{fp, lr}
   19394:	mov	fp, sp
   19398:	mov	r2, r1
   1939c:	mov	r1, r0
   193a0:	mov	r0, #0
   193a4:	bl	1a304 <__assert_fail@plt+0x8664>
   193a8:	cmp	r0, #0
   193ac:	popne	{fp, pc}
   193b0:	bl	19710 <__assert_fail@plt+0x7a70>
   193b4:	mov	r2, r1
   193b8:	mov	r1, r0
   193bc:	mov	r0, #0
   193c0:	b	1935c <__assert_fail@plt+0x76bc>
   193c4:	mov	r2, #1
   193c8:	b	193cc <__assert_fail@plt+0x772c>
   193cc:	push	{r4, r5, fp, lr}
   193d0:	add	fp, sp, #8
   193d4:	ldr	r5, [r1]
   193d8:	mov	r4, r1
   193dc:	cmp	r0, #0
   193e0:	beq	193f8 <__assert_fail@plt+0x7758>
   193e4:	mov	r1, #1
   193e8:	add	r1, r1, r5, lsr #1
   193ec:	adds	r5, r5, r1
   193f0:	bcc	19410 <__assert_fail@plt+0x7770>
   193f4:	bl	19710 <__assert_fail@plt+0x7a70>
   193f8:	cmp	r5, #0
   193fc:	bne	19410 <__assert_fail@plt+0x7770>
   19400:	mov	r1, #64	; 0x40
   19404:	cmp	r2, #64	; 0x40
   19408:	udiv	r5, r1, r2
   1940c:	addhi	r5, r5, #1
   19410:	mov	r1, r5
   19414:	bl	19284 <__assert_fail@plt+0x75e4>
   19418:	str	r5, [r4]
   1941c:	pop	{r4, r5, fp, pc}
   19420:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19424:	add	fp, sp, #24
   19428:	ldr	r6, [r1]
   1942c:	mov	r8, r1
   19430:	ldr	r4, [fp, #8]
   19434:	add	r1, r6, r6, asr #1
   19438:	cmp	r1, r6
   1943c:	mvnvs	r1, #-2147483648	; 0x80000000
   19440:	cmp	r1, r3
   19444:	mov	r5, r1
   19448:	movgt	r5, r3
   1944c:	cmn	r3, #1
   19450:	movle	r5, r1
   19454:	cmn	r4, #1
   19458:	ble	19478 <__assert_fail@plt+0x77d8>
   1945c:	cmp	r4, #0
   19460:	beq	194cc <__assert_fail@plt+0x782c>
   19464:	cmn	r5, #1
   19468:	ble	194a0 <__assert_fail@plt+0x7800>
   1946c:	mvn	r7, #-2147483648	; 0x80000000
   19470:	udiv	r1, r7, r4
   19474:	b	19494 <__assert_fail@plt+0x77f4>
   19478:	cmn	r5, #1
   1947c:	ble	194bc <__assert_fail@plt+0x781c>
   19480:	cmn	r4, #1
   19484:	beq	194cc <__assert_fail@plt+0x782c>
   19488:	mov	r1, #-2147483648	; 0x80000000
   1948c:	mvn	r7, #-2147483648	; 0x80000000
   19490:	sdiv	r1, r1, r4
   19494:	cmp	r1, r5
   19498:	bge	194cc <__assert_fail@plt+0x782c>
   1949c:	b	194dc <__assert_fail@plt+0x783c>
   194a0:	beq	194cc <__assert_fail@plt+0x782c>
   194a4:	mov	r1, #-2147483648	; 0x80000000
   194a8:	mvn	r7, #-2147483648	; 0x80000000
   194ac:	sdiv	r1, r1, r5
   194b0:	cmp	r1, r4
   194b4:	bge	194cc <__assert_fail@plt+0x782c>
   194b8:	b	194dc <__assert_fail@plt+0x783c>
   194bc:	mvn	r7, #-2147483648	; 0x80000000
   194c0:	sdiv	r1, r7, r4
   194c4:	cmp	r5, r1
   194c8:	blt	194dc <__assert_fail@plt+0x783c>
   194cc:	mul	r1, r5, r4
   194d0:	mov	r7, #64	; 0x40
   194d4:	cmp	r1, #63	; 0x3f
   194d8:	bgt	194e4 <__assert_fail@plt+0x7844>
   194dc:	sdiv	r5, r7, r4
   194e0:	mul	r1, r5, r4
   194e4:	cmp	r0, #0
   194e8:	moveq	r7, #0
   194ec:	streq	r7, [r8]
   194f0:	sub	r7, r5, r6
   194f4:	cmp	r7, r2
   194f8:	bge	1959c <__assert_fail@plt+0x78fc>
   194fc:	add	r5, r6, r2
   19500:	mov	r2, #0
   19504:	mov	r1, #0
   19508:	cmp	r5, r3
   1950c:	movwgt	r2, #1
   19510:	cmn	r3, #1
   19514:	movwgt	r1, #1
   19518:	cmp	r5, r6
   1951c:	bvs	19584 <__assert_fail@plt+0x78e4>
   19520:	ands	r1, r1, r2
   19524:	bne	19584 <__assert_fail@plt+0x78e4>
   19528:	cmn	r4, #1
   1952c:	ble	1954c <__assert_fail@plt+0x78ac>
   19530:	cmp	r4, #0
   19534:	beq	19598 <__assert_fail@plt+0x78f8>
   19538:	cmn	r5, #1
   1953c:	ble	19570 <__assert_fail@plt+0x78d0>
   19540:	mvn	r1, #-2147483648	; 0x80000000
   19544:	udiv	r1, r1, r4
   19548:	b	19564 <__assert_fail@plt+0x78c4>
   1954c:	cmn	r5, #1
   19550:	ble	19588 <__assert_fail@plt+0x78e8>
   19554:	cmn	r4, #1
   19558:	beq	19598 <__assert_fail@plt+0x78f8>
   1955c:	mov	r1, #-2147483648	; 0x80000000
   19560:	sdiv	r1, r1, r4
   19564:	cmp	r1, r5
   19568:	bge	19598 <__assert_fail@plt+0x78f8>
   1956c:	b	19584 <__assert_fail@plt+0x78e4>
   19570:	beq	19598 <__assert_fail@plt+0x78f8>
   19574:	mov	r1, #-2147483648	; 0x80000000
   19578:	sdiv	r1, r1, r5
   1957c:	cmp	r1, r4
   19580:	bge	19598 <__assert_fail@plt+0x78f8>
   19584:	bl	19710 <__assert_fail@plt+0x7a70>
   19588:	mvn	r1, #-2147483648	; 0x80000000
   1958c:	sdiv	r1, r1, r4
   19590:	cmp	r5, r1
   19594:	blt	19584 <__assert_fail@plt+0x78e4>
   19598:	mul	r1, r5, r4
   1959c:	bl	19308 <__assert_fail@plt+0x7668>
   195a0:	str	r5, [r8]
   195a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   195a8:	push	{fp, lr}
   195ac:	mov	fp, sp
   195b0:	mov	r1, #1
   195b4:	bl	19ed0 <__assert_fail@plt+0x8230>
   195b8:	cmp	r0, #0
   195bc:	popne	{fp, pc}
   195c0:	bl	19710 <__assert_fail@plt+0x7a70>
   195c4:	push	{fp, lr}
   195c8:	mov	fp, sp
   195cc:	bl	19ed0 <__assert_fail@plt+0x8230>
   195d0:	cmp	r0, #0
   195d4:	popne	{fp, pc}
   195d8:	bl	19710 <__assert_fail@plt+0x7a70>
   195dc:	push	{fp, lr}
   195e0:	mov	fp, sp
   195e4:	mov	r1, #1
   195e8:	bl	19ed0 <__assert_fail@plt+0x8230>
   195ec:	cmp	r0, #0
   195f0:	popne	{fp, pc}
   195f4:	bl	19710 <__assert_fail@plt+0x7a70>
   195f8:	push	{fp, lr}
   195fc:	mov	fp, sp
   19600:	bl	19ed0 <__assert_fail@plt+0x8230>
   19604:	cmp	r0, #0
   19608:	popne	{fp, pc}
   1960c:	bl	19710 <__assert_fail@plt+0x7a70>
   19610:	push	{r4, r5, r6, sl, fp, lr}
   19614:	add	fp, sp, #16
   19618:	mov	r5, r0
   1961c:	mov	r0, r1
   19620:	mov	r4, r1
   19624:	bl	1a224 <__assert_fail@plt+0x8584>
   19628:	cmp	r0, #0
   1962c:	beq	19648 <__assert_fail@plt+0x79a8>
   19630:	mov	r1, r5
   19634:	mov	r2, r4
   19638:	mov	r6, r0
   1963c:	bl	118e0 <memcpy@plt>
   19640:	mov	r0, r6
   19644:	pop	{r4, r5, r6, sl, fp, pc}
   19648:	bl	19710 <__assert_fail@plt+0x7a70>
   1964c:	push	{r4, r5, r6, sl, fp, lr}
   19650:	add	fp, sp, #16
   19654:	mov	r5, r0
   19658:	mov	r0, r1
   1965c:	mov	r4, r1
   19660:	bl	1a224 <__assert_fail@plt+0x8584>
   19664:	cmp	r0, #0
   19668:	beq	19684 <__assert_fail@plt+0x79e4>
   1966c:	mov	r1, r5
   19670:	mov	r2, r4
   19674:	mov	r6, r0
   19678:	bl	118e0 <memcpy@plt>
   1967c:	mov	r0, r6
   19680:	pop	{r4, r5, r6, sl, fp, pc}
   19684:	bl	19710 <__assert_fail@plt+0x7a70>
   19688:	push	{r4, r5, r6, sl, fp, lr}
   1968c:	add	fp, sp, #16
   19690:	mov	r5, r0
   19694:	add	r0, r1, #1
   19698:	mov	r4, r1
   1969c:	bl	1a224 <__assert_fail@plt+0x8584>
   196a0:	cmp	r0, #0
   196a4:	beq	196cc <__assert_fail@plt+0x7a2c>
   196a8:	mov	r6, r0
   196ac:	mov	r0, #0
   196b0:	mov	r1, r5
   196b4:	mov	r2, r4
   196b8:	strb	r0, [r6, r4]
   196bc:	mov	r0, r6
   196c0:	bl	118e0 <memcpy@plt>
   196c4:	mov	r0, r6
   196c8:	pop	{r4, r5, r6, sl, fp, pc}
   196cc:	bl	19710 <__assert_fail@plt+0x7a70>
   196d0:	push	{r4, r5, r6, sl, fp, lr}
   196d4:	add	fp, sp, #16
   196d8:	mov	r4, r0
   196dc:	bl	11a9c <strlen@plt>
   196e0:	add	r5, r0, #1
   196e4:	mov	r0, r5
   196e8:	bl	1a224 <__assert_fail@plt+0x8584>
   196ec:	cmp	r0, #0
   196f0:	beq	1970c <__assert_fail@plt+0x7a6c>
   196f4:	mov	r1, r4
   196f8:	mov	r2, r5
   196fc:	mov	r6, r0
   19700:	bl	118e0 <memcpy@plt>
   19704:	mov	r0, r6
   19708:	pop	{r4, r5, r6, sl, fp, pc}
   1970c:	bl	19710 <__assert_fail@plt+0x7a70>
   19710:	push	{fp, lr}
   19714:	mov	fp, sp
   19718:	movw	r0, #45488	; 0xb1b0
   1971c:	movw	r1, #42298	; 0xa53a
   19720:	mov	r2, #5
   19724:	movt	r0, #3
   19728:	movt	r1, #2
   1972c:	ldr	r4, [r0]
   19730:	mov	r0, #0
   19734:	bl	11934 <dcgettext@plt>
   19738:	movw	r2, #43212	; 0xa8cc
   1973c:	mov	r3, r0
   19740:	mov	r0, r4
   19744:	mov	r1, #0
   19748:	movt	r2, #2
   1974c:	bl	119d0 <error@plt>
   19750:	bl	11c64 <abort@plt>
   19754:	push	{fp, lr}
   19758:	mov	fp, sp
   1975c:	sub	sp, sp, #8
   19760:	movw	ip, #45488	; 0xb1b0
   19764:	movt	ip, #3
   19768:	ldr	ip, [ip]
   1976c:	str	ip, [sp, #4]
   19770:	ldr	ip, [fp, #8]
   19774:	str	ip, [sp]
   19778:	bl	19780 <__assert_fail@plt+0x7ae0>
   1977c:	bl	11c64 <abort@plt>
   19780:	push	{r4, r5, r6, r7, fp, lr}
   19784:	add	fp, sp, #16
   19788:	sub	sp, sp, #16
   1978c:	sub	r0, r0, #1
   19790:	cmp	r0, #4
   19794:	bcs	19814 <__assert_fail@plt+0x7b74>
   19798:	mov	r5, r1
   1979c:	movw	r1, #42412	; 0xa5ac
   197a0:	ldr	r4, [fp, #12]
   197a4:	ldr	r6, [fp, #8]
   197a8:	movt	r1, #2
   197ac:	cmn	r5, #1
   197b0:	ldr	r1, [r1, r0, lsl #2]
   197b4:	ble	197c8 <__assert_fail@plt+0x7b28>
   197b8:	ldr	r7, [r3, r5, lsl #4]
   197bc:	movw	r5, #42315	; 0xa54b
   197c0:	movt	r5, #2
   197c4:	b	197e4 <__assert_fail@plt+0x7b44>
   197c8:	mov	r0, #0
   197cc:	add	r7, sp, #14
   197d0:	strb	r0, [sp, #15]
   197d4:	movw	r0, #42315	; 0xa54b
   197d8:	strb	r2, [sp, #14]
   197dc:	movt	r0, #2
   197e0:	sub	r5, r0, r5
   197e4:	mov	r0, #0
   197e8:	mov	r2, #5
   197ec:	bl	11934 <dcgettext@plt>
   197f0:	mov	r2, r0
   197f4:	mov	r0, r4
   197f8:	mov	r1, #0
   197fc:	mov	r3, r5
   19800:	str	r7, [sp]
   19804:	str	r6, [sp, #4]
   19808:	bl	119d0 <error@plt>
   1980c:	sub	sp, fp, #16
   19810:	pop	{r4, r5, r6, r7, fp, pc}
   19814:	bl	11c64 <abort@plt>
   19818:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1981c:	add	fp, sp, #28
   19820:	sub	sp, sp, #20
   19824:	cmp	r2, #37	; 0x25
   19828:	bcs	19eb0 <__assert_fail@plt+0x8210>
   1982c:	mov	r8, r3
   19830:	mov	r5, r2
   19834:	mov	r6, r1
   19838:	mov	r4, r0
   1983c:	bl	11acc <__errno_location@plt>
   19840:	mov	r7, r0
   19844:	mov	r0, #0
   19848:	str	r0, [r7]
   1984c:	bl	11a6c <__ctype_b_loc@plt>
   19850:	ldr	r1, [r0]
   19854:	mov	r2, r4
   19858:	ldrb	r0, [r2], #1
   1985c:	add	r3, r1, r0, lsl #1
   19860:	ldrb	r3, [r3, #1]
   19864:	tst	r3, #32
   19868:	bne	19858 <__assert_fail@plt+0x7bb8>
   1986c:	add	sl, sp, #16
   19870:	cmp	r6, #0
   19874:	movne	sl, r6
   19878:	mov	r6, #4
   1987c:	cmp	r0, #45	; 0x2d
   19880:	beq	19ea4 <__assert_fail@plt+0x8204>
   19884:	mov	r0, r4
   19888:	mov	r1, sl
   1988c:	mov	r2, r5
   19890:	str	r8, [sp, #12]
   19894:	bl	11b50 <strtoumax@plt>
   19898:	ldr	r5, [sl]
   1989c:	cmp	r5, r4
   198a0:	beq	198c8 <__assert_fail@plt+0x7c28>
   198a4:	mov	r8, r0
   198a8:	ldr	r0, [r7]
   198ac:	mov	r9, r1
   198b0:	cmp	r0, #0
   198b4:	beq	198f8 <__assert_fail@plt+0x7c58>
   198b8:	cmp	r0, #34	; 0x22
   198bc:	bne	19ea4 <__assert_fail@plt+0x8204>
   198c0:	mov	r6, #1
   198c4:	b	198fc <__assert_fail@plt+0x7c5c>
   198c8:	ldr	r0, [fp, #8]
   198cc:	cmp	r0, #0
   198d0:	ldrbne	r1, [r4]
   198d4:	cmpne	r1, #0
   198d8:	beq	19ea4 <__assert_fail@plt+0x8204>
   198dc:	bl	11aa8 <strchr@plt>
   198e0:	cmp	r0, #0
   198e4:	beq	19ea4 <__assert_fail@plt+0x8204>
   198e8:	mov	r6, #0
   198ec:	mov	r8, #1
   198f0:	mov	r9, #0
   198f4:	b	19908 <__assert_fail@plt+0x7c68>
   198f8:	mov	r6, r0
   198fc:	ldr	r0, [fp, #8]
   19900:	cmp	r0, #0
   19904:	beq	19e9c <__assert_fail@plt+0x81fc>
   19908:	ldrb	r7, [r5]
   1990c:	cmp	r7, #0
   19910:	beq	19e9c <__assert_fail@plt+0x81fc>
   19914:	ldr	r0, [fp, #8]
   19918:	mov	r1, r7
   1991c:	bl	11aa8 <strchr@plt>
   19920:	cmp	r0, #0
   19924:	beq	19a2c <__assert_fail@plt+0x7d8c>
   19928:	sub	r0, r7, #69	; 0x45
   1992c:	mov	r1, #1
   19930:	mov	r3, #0
   19934:	mov	r4, #1024	; 0x400
   19938:	cmp	r0, #21
   1993c:	str	r1, [sp, #8]
   19940:	bhi	19958 <__assert_fail@plt+0x7cb8>
   19944:	movw	r2, #35141	; 0x8945
   19948:	mov	r1, #1
   1994c:	movt	r2, #48	; 0x30
   19950:	tst	r2, r1, lsl r0
   19954:	bne	19974 <__assert_fail@plt+0x7cd4>
   19958:	sub	r0, r7, #103	; 0x67
   1995c:	cmp	r0, #13
   19960:	bhi	199a8 <__assert_fail@plt+0x7d08>
   19964:	mov	r1, #1
   19968:	movw	r2, #8273	; 0x2051
   1996c:	tst	r2, r1, lsl r0
   19970:	beq	199a8 <__assert_fail@plt+0x7d08>
   19974:	ldr	r0, [fp, #8]
   19978:	mov	r1, #48	; 0x30
   1997c:	bl	11aa8 <strchr@plt>
   19980:	cmp	r0, #0
   19984:	beq	199a4 <__assert_fail@plt+0x7d04>
   19988:	ldrb	r0, [r5, #1]
   1998c:	cmp	r0, #66	; 0x42
   19990:	cmpne	r0, #68	; 0x44
   19994:	bne	19abc <__assert_fail@plt+0x7e1c>
   19998:	mov	r4, #1000	; 0x3e8
   1999c:	mov	r0, #2
   199a0:	str	r0, [sp, #8]
   199a4:	mov	r3, #0
   199a8:	cmp	r7, #89	; 0x59
   199ac:	stm	sp, {r5, r6}
   199b0:	bgt	19a38 <__assert_fail@plt+0x7d98>
   199b4:	sub	r0, r7, #66	; 0x42
   199b8:	cmp	r0, #14
   199bc:	bhi	19ae0 <__assert_fail@plt+0x7e40>
   199c0:	add	r1, pc, #0
   199c4:	ldr	pc, [r1, r0, lsl #2]
   199c8:	andeq	r9, r1, r4, lsl #20
   199cc:	muleq	r1, r0, sp
   199d0:	muleq	r1, r0, sp
   199d4:	andeq	r9, r1, r4, lsr #27
   199d8:	muleq	r1, r0, sp
   199dc:	muleq	r1, r4, fp
   199e0:	muleq	r1, r0, sp
   199e4:	muleq	r1, r0, sp
   199e8:	muleq	r1, r0, sp
   199ec:	andeq	r9, r1, r0, lsl #24
   199f0:	muleq	r1, r0, sp
   199f4:	andeq	r9, r1, r4, asr #24
   199f8:	muleq	r1, r0, sp
   199fc:	muleq	r1, r0, sp
   19a00:	andeq	r9, r1, r0, lsl lr
   19a04:	mov	r1, #0
   19a08:	lsl	r3, r9, #10
   19a0c:	lsl	r0, r8, #10
   19a10:	lsr	r2, r9, #22
   19a14:	cmp	r1, r9, lsr #22
   19a18:	orr	r3, r3, r8, lsr #22
   19a1c:	mvnne	r0, #0
   19a20:	movwne	r2, #1
   19a24:	cmp	r1, r9, lsr #22
   19a28:	b	19aac <__assert_fail@plt+0x7e0c>
   19a2c:	ldr	r0, [sp, #12]
   19a30:	orr	r6, r6, #2
   19a34:	b	19ea0 <__assert_fail@plt+0x8200>
   19a38:	cmp	r7, #115	; 0x73
   19a3c:	bgt	19b5c <__assert_fail@plt+0x7ebc>
   19a40:	sub	r0, r7, #98	; 0x62
   19a44:	cmp	r0, #11
   19a48:	bhi	19d1c <__assert_fail@plt+0x807c>
   19a4c:	add	r1, pc, #4
   19a50:	mov	r2, #0
   19a54:	ldr	pc, [r1, r0, lsl #2]
   19a58:	andeq	r9, r1, r8, lsl #21
   19a5c:	andeq	r9, r1, r8, ror lr
   19a60:	muleq	r1, r0, sp
   19a64:	muleq	r1, r0, sp
   19a68:	muleq	r1, r0, sp
   19a6c:	muleq	r1, r4, fp
   19a70:	muleq	r1, r0, sp
   19a74:	muleq	r1, r0, sp
   19a78:	muleq	r1, r0, sp
   19a7c:	andeq	r9, r1, r0, lsl #24
   19a80:	muleq	r1, r0, sp
   19a84:	andeq	r9, r1, r4, asr #24
   19a88:	mov	r1, #0
   19a8c:	lsl	r3, r9, #9
   19a90:	lsl	r0, r8, #9
   19a94:	lsr	r2, r9, #23
   19a98:	cmp	r1, r9, lsr #23
   19a9c:	orr	r3, r3, r8, lsr #23
   19aa0:	mvnne	r0, #0
   19aa4:	movwne	r2, #1
   19aa8:	cmp	r1, r9, lsr #23
   19aac:	mvnne	r3, #0
   19ab0:	mov	r8, r0
   19ab4:	mov	r9, r3
   19ab8:	b	19e78 <__assert_fail@plt+0x81d8>
   19abc:	cmp	r0, #105	; 0x69
   19ac0:	mov	r3, #0
   19ac4:	bne	199a8 <__assert_fail@plt+0x7d08>
   19ac8:	ldrb	r0, [r5, #2]
   19acc:	mov	r1, #1
   19ad0:	cmp	r0, #66	; 0x42
   19ad4:	movweq	r1, #3
   19ad8:	str	r1, [sp, #8]
   19adc:	b	199a8 <__assert_fail@plt+0x7d08>
   19ae0:	cmp	r7, #84	; 0x54
   19ae4:	beq	19cb0 <__assert_fail@plt+0x8010>
   19ae8:	cmp	r7, #89	; 0x59
   19aec:	bne	19d90 <__assert_fail@plt+0x80f0>
   19af0:	mvn	r0, #0
   19af4:	mvn	r1, #0
   19af8:	mov	r2, r4
   19afc:	mov	r5, r3
   19b00:	bl	28c6c <__assert_fail@plt+0x16fcc>
   19b04:	mov	ip, r5
   19b08:	mvn	lr, #0
   19b0c:	mov	r2, #0
   19b10:	mvn	r3, #7
   19b14:	mov	r6, r8
   19b18:	mov	r5, r9
   19b1c:	umull	r8, r7, r6, r4
   19b20:	mvn	r9, #0
   19b24:	mla	r7, r6, ip, r7
   19b28:	subs	r6, r0, r6
   19b2c:	sbcs	r6, r1, r5
   19b30:	mov	r6, #0
   19b34:	movwcc	r6, #1
   19b38:	cmp	r6, #0
   19b3c:	mlaeq	r9, r5, r4, r7
   19b40:	movne	r8, lr
   19b44:	orrne	r2, r2, #1
   19b48:	adds	r3, r3, #1
   19b4c:	mov	r6, r8
   19b50:	mov	r5, r9
   19b54:	bne	19b1c <__assert_fail@plt+0x7e7c>
   19b58:	b	19e78 <__assert_fail@plt+0x81d8>
   19b5c:	cmp	r7, #116	; 0x74
   19b60:	beq	19cb0 <__assert_fail@plt+0x8010>
   19b64:	cmp	r7, #119	; 0x77
   19b68:	bne	19d90 <__assert_fail@plt+0x80f0>
   19b6c:	lsl	r1, r9, #1
   19b70:	lsl	r0, r8, #1
   19b74:	cmp	r9, #0
   19b78:	lsr	r2, r9, #31
   19b7c:	orr	r1, r1, r8, lsr #31
   19b80:	mvnlt	r0, #0
   19b84:	mvnlt	r1, #0
   19b88:	mov	r8, r0
   19b8c:	mov	r9, r1
   19b90:	b	19e78 <__assert_fail@plt+0x81d8>
   19b94:	mvn	r0, #0
   19b98:	mvn	r1, #0
   19b9c:	mov	r2, r4
   19ba0:	mov	r5, r3
   19ba4:	bl	28c6c <__assert_fail@plt+0x16fcc>
   19ba8:	mov	ip, r5
   19bac:	mvn	lr, #0
   19bb0:	mov	r2, #0
   19bb4:	mvn	r3, #2
   19bb8:	mov	r6, r8
   19bbc:	mov	r5, r9
   19bc0:	umull	r8, r7, r6, r4
   19bc4:	mvn	r9, #0
   19bc8:	mla	r7, r6, ip, r7
   19bcc:	subs	r6, r0, r6
   19bd0:	sbcs	r6, r1, r5
   19bd4:	mov	r6, #0
   19bd8:	movwcc	r6, #1
   19bdc:	cmp	r6, #0
   19be0:	mlaeq	r9, r5, r4, r7
   19be4:	movne	r8, lr
   19be8:	orrne	r2, r2, #1
   19bec:	adds	r3, r3, #1
   19bf0:	mov	r6, r8
   19bf4:	mov	r5, r9
   19bf8:	bne	19bc0 <__assert_fail@plt+0x7f20>
   19bfc:	b	19e78 <__assert_fail@plt+0x81d8>
   19c00:	mvn	r0, #0
   19c04:	mvn	r1, #0
   19c08:	mov	r2, r4
   19c0c:	mov	r5, r3
   19c10:	bl	28c6c <__assert_fail@plt+0x16fcc>
   19c14:	subs	r0, r0, r8
   19c18:	mov	r2, #0
   19c1c:	sbcs	r0, r1, r9
   19c20:	movwcc	r2, #1
   19c24:	umull	r0, r1, r8, r4
   19c28:	mla	r1, r8, r5, r1
   19c2c:	cmp	r2, #0
   19c30:	mla	r9, r9, r4, r1
   19c34:	mvnne	r0, #0
   19c38:	mvnne	r9, #0
   19c3c:	mov	r8, r0
   19c40:	b	19e78 <__assert_fail@plt+0x81d8>
   19c44:	mvn	r0, #0
   19c48:	mvn	r1, #0
   19c4c:	mov	r2, r4
   19c50:	mov	r5, r3
   19c54:	bl	28c6c <__assert_fail@plt+0x16fcc>
   19c58:	mov	ip, r5
   19c5c:	mvn	lr, #0
   19c60:	mov	r2, #0
   19c64:	mvn	r3, #1
   19c68:	mov	r6, r8
   19c6c:	mov	r5, r9
   19c70:	umull	r8, r7, r6, r4
   19c74:	mvn	r9, #0
   19c78:	mla	r7, r6, ip, r7
   19c7c:	subs	r6, r0, r6
   19c80:	sbcs	r6, r1, r5
   19c84:	mov	r6, #0
   19c88:	movwcc	r6, #1
   19c8c:	cmp	r6, #0
   19c90:	mlaeq	r9, r5, r4, r7
   19c94:	movne	r8, lr
   19c98:	orrne	r2, r2, #1
   19c9c:	adds	r3, r3, #1
   19ca0:	mov	r6, r8
   19ca4:	mov	r5, r9
   19ca8:	bne	19c70 <__assert_fail@plt+0x7fd0>
   19cac:	b	19e78 <__assert_fail@plt+0x81d8>
   19cb0:	mvn	r0, #0
   19cb4:	mvn	r1, #0
   19cb8:	mov	r2, r4
   19cbc:	mov	r5, r3
   19cc0:	bl	28c6c <__assert_fail@plt+0x16fcc>
   19cc4:	mov	ip, r5
   19cc8:	mvn	lr, #0
   19ccc:	mov	r2, #0
   19cd0:	mvn	r3, #3
   19cd4:	mov	r6, r8
   19cd8:	mov	r5, r9
   19cdc:	umull	r8, r7, r6, r4
   19ce0:	mvn	r9, #0
   19ce4:	mla	r7, r6, ip, r7
   19ce8:	subs	r6, r0, r6
   19cec:	sbcs	r6, r1, r5
   19cf0:	mov	r6, #0
   19cf4:	movwcc	r6, #1
   19cf8:	cmp	r6, #0
   19cfc:	mlaeq	r9, r5, r4, r7
   19d00:	movne	r8, lr
   19d04:	orrne	r2, r2, #1
   19d08:	adds	r3, r3, #1
   19d0c:	mov	r6, r8
   19d10:	mov	r5, r9
   19d14:	bne	19cdc <__assert_fail@plt+0x803c>
   19d18:	b	19e78 <__assert_fail@plt+0x81d8>
   19d1c:	cmp	r7, #90	; 0x5a
   19d20:	bne	19d90 <__assert_fail@plt+0x80f0>
   19d24:	mvn	r0, #0
   19d28:	mvn	r1, #0
   19d2c:	mov	r2, r4
   19d30:	mov	r5, r3
   19d34:	bl	28c6c <__assert_fail@plt+0x16fcc>
   19d38:	mov	ip, r5
   19d3c:	mvn	lr, #0
   19d40:	mov	r2, #0
   19d44:	mvn	r3, #6
   19d48:	mov	r6, r8
   19d4c:	mov	r5, r9
   19d50:	umull	r8, r7, r6, r4
   19d54:	mvn	r9, #0
   19d58:	mla	r7, r6, ip, r7
   19d5c:	subs	r6, r0, r6
   19d60:	sbcs	r6, r1, r5
   19d64:	mov	r6, #0
   19d68:	movwcc	r6, #1
   19d6c:	cmp	r6, #0
   19d70:	mlaeq	r9, r5, r4, r7
   19d74:	movne	r8, lr
   19d78:	orrne	r2, r2, #1
   19d7c:	adds	r3, r3, #1
   19d80:	mov	r6, r8
   19d84:	mov	r5, r9
   19d88:	bne	19d50 <__assert_fail@plt+0x80b0>
   19d8c:	b	19e78 <__assert_fail@plt+0x81d8>
   19d90:	ldr	r0, [sp, #12]
   19d94:	strd	r8, [r0]
   19d98:	ldr	r6, [sp, #4]
   19d9c:	orr	r6, r6, #2
   19da0:	b	19ea4 <__assert_fail@plt+0x8204>
   19da4:	mvn	r0, #0
   19da8:	mvn	r1, #0
   19dac:	mov	r2, r4
   19db0:	mov	r5, r3
   19db4:	bl	28c6c <__assert_fail@plt+0x16fcc>
   19db8:	mov	ip, r5
   19dbc:	mvn	lr, #0
   19dc0:	mov	r2, #0
   19dc4:	mvn	r3, #5
   19dc8:	mov	r5, r8
   19dcc:	mov	r7, r9
   19dd0:	umull	r8, r6, r5, r4
   19dd4:	mvn	r9, #0
   19dd8:	mla	r6, r5, ip, r6
   19ddc:	subs	r5, r0, r5
   19de0:	sbcs	r5, r1, r7
   19de4:	mov	r5, #0
   19de8:	movwcc	r5, #1
   19dec:	cmp	r5, #0
   19df0:	mlaeq	r9, r7, r4, r6
   19df4:	movne	r8, lr
   19df8:	orrne	r2, r2, #1
   19dfc:	adds	r3, r3, #1
   19e00:	mov	r5, r8
   19e04:	mov	r7, r9
   19e08:	bne	19dd0 <__assert_fail@plt+0x8130>
   19e0c:	b	19e78 <__assert_fail@plt+0x81d8>
   19e10:	mvn	r0, #0
   19e14:	mvn	r1, #0
   19e18:	mov	r2, r4
   19e1c:	mov	r5, r3
   19e20:	bl	28c6c <__assert_fail@plt+0x16fcc>
   19e24:	mov	ip, r5
   19e28:	mvn	lr, #0
   19e2c:	mov	r2, #0
   19e30:	mvn	r3, #4
   19e34:	mov	r6, r8
   19e38:	mov	r5, r9
   19e3c:	umull	r8, r7, r6, r4
   19e40:	mvn	r9, #0
   19e44:	mla	r7, r6, ip, r7
   19e48:	subs	r6, r0, r6
   19e4c:	sbcs	r6, r1, r5
   19e50:	mov	r6, #0
   19e54:	movwcc	r6, #1
   19e58:	cmp	r6, #0
   19e5c:	mlaeq	r9, r5, r4, r7
   19e60:	movne	r8, lr
   19e64:	orrne	r2, r2, #1
   19e68:	adds	r3, r3, #1
   19e6c:	mov	r6, r8
   19e70:	mov	r5, r9
   19e74:	bne	19e3c <__assert_fail@plt+0x819c>
   19e78:	ldr	r1, [sp]
   19e7c:	ldr	r3, [sp, #8]
   19e80:	ldr	r6, [sp, #4]
   19e84:	add	r0, r1, r3
   19e88:	orr	r6, r2, r6
   19e8c:	str	r0, [sl]
   19e90:	ldrb	r0, [r1, r3]
   19e94:	cmp	r0, #0
   19e98:	orrne	r6, r6, #2
   19e9c:	ldr	r0, [sp, #12]
   19ea0:	strd	r8, [r0]
   19ea4:	mov	r0, r6
   19ea8:	sub	sp, fp, #28
   19eac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19eb0:	movw	r0, #42428	; 0xa5bc
   19eb4:	movw	r1, #42466	; 0xa5e2
   19eb8:	movw	r3, #42478	; 0xa5ee
   19ebc:	mov	r2, #84	; 0x54
   19ec0:	movt	r0, #2
   19ec4:	movt	r1, #2
   19ec8:	movt	r3, #2
   19ecc:	bl	11ca0 <__assert_fail@plt>
   19ed0:	clz	r2, r1
   19ed4:	clz	r3, r0
   19ed8:	lsr	r2, r2, #5
   19edc:	lsr	r3, r3, #5
   19ee0:	orrs	r2, r3, r2
   19ee4:	movwne	r1, #1
   19ee8:	movwne	r0, #1
   19eec:	cmp	r1, #0
   19ef0:	beq	19f20 <__assert_fail@plt+0x8280>
   19ef4:	mvn	r2, #-2147483648	; 0x80000000
   19ef8:	udiv	r2, r2, r1
   19efc:	cmp	r2, r0
   19f00:	bcs	19f20 <__assert_fail@plt+0x8280>
   19f04:	push	{fp, lr}
   19f08:	mov	fp, sp
   19f0c:	bl	11acc <__errno_location@plt>
   19f10:	mov	r1, #12
   19f14:	str	r1, [r0]
   19f18:	mov	r0, #0
   19f1c:	pop	{fp, pc}
   19f20:	b	11814 <calloc@plt>
   19f24:	sub	sp, sp, #8
   19f28:	push	{r4, r5, r6, r7, fp, lr}
   19f2c:	add	fp, sp, #16
   19f30:	sub	sp, sp, #8
   19f34:	mov	r5, r0
   19f38:	add	r0, fp, #8
   19f3c:	cmp	r1, #11
   19f40:	str	r3, [fp, #12]
   19f44:	str	r2, [fp, #8]
   19f48:	str	r0, [sp, #4]
   19f4c:	bhi	19f88 <__assert_fail@plt+0x82e8>
   19f50:	mov	r0, #1
   19f54:	movw	r2, #1300	; 0x514
   19f58:	tst	r2, r0, lsl r1
   19f5c:	bne	1a040 <__assert_fail@plt+0x83a0>
   19f60:	movw	r2, #2570	; 0xa0a
   19f64:	tst	r2, r0, lsl r1
   19f68:	bne	19fb0 <__assert_fail@plt+0x8310>
   19f6c:	cmp	r1, #0
   19f70:	bne	19f88 <__assert_fail@plt+0x82e8>
   19f74:	ldr	r0, [sp, #4]
   19f78:	add	r1, r0, #4
   19f7c:	str	r1, [sp, #4]
   19f80:	mov	r1, #0
   19f84:	b	1a04c <__assert_fail@plt+0x83ac>
   19f88:	sub	r0, r1, #1024	; 0x400
   19f8c:	cmp	r0, #10
   19f90:	bhi	1a040 <__assert_fail@plt+0x83a0>
   19f94:	mov	r2, #1
   19f98:	movw	r3, #645	; 0x285
   19f9c:	tst	r3, r2, lsl r0
   19fa0:	bne	1a040 <__assert_fail@plt+0x83a0>
   19fa4:	movw	r3, #1282	; 0x502
   19fa8:	tst	r3, r2, lsl r0
   19fac:	beq	19fbc <__assert_fail@plt+0x831c>
   19fb0:	mov	r0, r5
   19fb4:	bl	11b8c <fcntl64@plt>
   19fb8:	b	1a058 <__assert_fail@plt+0x83b8>
   19fbc:	cmp	r0, #6
   19fc0:	bne	1a040 <__assert_fail@plt+0x83a0>
   19fc4:	ldr	r0, [sp, #4]
   19fc8:	movw	r7, #46024	; 0xb3c8
   19fcc:	movt	r7, #3
   19fd0:	add	r1, r0, #4
   19fd4:	str	r1, [sp, #4]
   19fd8:	ldr	r6, [r0]
   19fdc:	ldr	r0, [r7]
   19fe0:	cmp	r0, #0
   19fe4:	blt	1a07c <__assert_fail@plt+0x83dc>
   19fe8:	mov	r0, r5
   19fec:	movw	r1, #1030	; 0x406
   19ff0:	mov	r2, r6
   19ff4:	bl	11b8c <fcntl64@plt>
   19ff8:	mov	r4, r0
   19ffc:	cmn	r0, #1
   1a000:	bgt	1a070 <__assert_fail@plt+0x83d0>
   1a004:	bl	11acc <__errno_location@plt>
   1a008:	ldr	r0, [r0]
   1a00c:	cmp	r0, #22
   1a010:	bne	1a070 <__assert_fail@plt+0x83d0>
   1a014:	mov	r0, r5
   1a018:	mov	r1, #0
   1a01c:	mov	r2, r6
   1a020:	bl	11b8c <fcntl64@plt>
   1a024:	mov	r4, r0
   1a028:	cmp	r0, #0
   1a02c:	blt	1a05c <__assert_fail@plt+0x83bc>
   1a030:	mvn	r0, #0
   1a034:	str	r0, [r7]
   1a038:	mov	r0, #1
   1a03c:	b	1a0a0 <__assert_fail@plt+0x8400>
   1a040:	ldr	r0, [sp, #4]
   1a044:	add	r2, r0, #4
   1a048:	str	r2, [sp, #4]
   1a04c:	ldr	r2, [r0]
   1a050:	mov	r0, r5
   1a054:	bl	11b8c <fcntl64@plt>
   1a058:	mov	r4, r0
   1a05c:	mov	r0, r4
   1a060:	sub	sp, fp, #16
   1a064:	pop	{r4, r5, r6, r7, fp, lr}
   1a068:	add	sp, sp, #8
   1a06c:	bx	lr
   1a070:	mov	r0, #1
   1a074:	str	r0, [r7]
   1a078:	b	1a05c <__assert_fail@plt+0x83bc>
   1a07c:	mov	r0, r5
   1a080:	mov	r1, #0
   1a084:	mov	r2, r6
   1a088:	bl	11b8c <fcntl64@plt>
   1a08c:	mov	r4, r0
   1a090:	ldr	r0, [r7]
   1a094:	add	r0, r0, #1
   1a098:	clz	r0, r0
   1a09c:	lsr	r0, r0, #5
   1a0a0:	cmp	r0, #0
   1a0a4:	beq	1a05c <__assert_fail@plt+0x83bc>
   1a0a8:	cmp	r4, #0
   1a0ac:	blt	1a05c <__assert_fail@plt+0x83bc>
   1a0b0:	mov	r0, r4
   1a0b4:	mov	r1, #1
   1a0b8:	bl	11b8c <fcntl64@plt>
   1a0bc:	cmp	r0, #0
   1a0c0:	blt	1a0dc <__assert_fail@plt+0x843c>
   1a0c4:	orr	r2, r0, #1
   1a0c8:	mov	r0, r4
   1a0cc:	mov	r1, #2
   1a0d0:	bl	11b8c <fcntl64@plt>
   1a0d4:	cmn	r0, #1
   1a0d8:	bne	1a05c <__assert_fail@plt+0x83bc>
   1a0dc:	bl	11acc <__errno_location@plt>
   1a0e0:	ldr	r6, [r0]
   1a0e4:	mov	r5, r0
   1a0e8:	mov	r0, r4
   1a0ec:	bl	11c7c <close@plt>
   1a0f0:	str	r6, [r5]
   1a0f4:	mvn	r4, #0
   1a0f8:	b	1a05c <__assert_fail@plt+0x83bc>
   1a0fc:	push	{r4, sl, fp, lr}
   1a100:	add	fp, sp, #8
   1a104:	sub	sp, sp, #8
   1a108:	mov	r4, r0
   1a10c:	cmp	r0, #0
   1a110:	beq	1a12c <__assert_fail@plt+0x848c>
   1a114:	mov	r0, r4
   1a118:	bl	11a30 <__freading@plt>
   1a11c:	cmp	r0, #0
   1a120:	ldrbne	r0, [r4, #1]
   1a124:	tstne	r0, #1
   1a128:	bne	1a13c <__assert_fail@plt+0x849c>
   1a12c:	mov	r0, r4
   1a130:	sub	sp, fp, #8
   1a134:	pop	{r4, sl, fp, lr}
   1a138:	b	11874 <fflush@plt>
   1a13c:	mov	r0, #1
   1a140:	mov	r2, #0
   1a144:	mov	r3, #0
   1a148:	str	r0, [sp]
   1a14c:	mov	r0, r4
   1a150:	bl	1a180 <__assert_fail@plt+0x84e0>
   1a154:	b	1a12c <__assert_fail@plt+0x848c>
   1a158:	push	{r4, r5, r6, sl, fp, lr}
   1a15c:	add	fp, sp, #16
   1a160:	mov	r4, r0
   1a164:	bl	11acc <__errno_location@plt>
   1a168:	ldr	r6, [r0]
   1a16c:	mov	r5, r0
   1a170:	mov	r0, r4
   1a174:	bl	118a4 <free@plt>
   1a178:	str	r6, [r5]
   1a17c:	pop	{r4, r5, r6, sl, fp, pc}
   1a180:	push	{r4, r5, r6, r7, fp, lr}
   1a184:	add	fp, sp, #16
   1a188:	sub	sp, sp, #8
   1a18c:	mov	r4, r0
   1a190:	ldr	r0, [r0, #4]
   1a194:	mov	r5, r3
   1a198:	mov	r6, r2
   1a19c:	ldr	r1, [r4, #8]
   1a1a0:	cmp	r1, r0
   1a1a4:	bne	1a1c0 <__assert_fail@plt+0x8520>
   1a1a8:	ldrd	r0, [r4, #16]
   1a1ac:	cmp	r1, r0
   1a1b0:	bne	1a1c0 <__assert_fail@plt+0x8520>
   1a1b4:	ldr	r0, [r4, #36]	; 0x24
   1a1b8:	cmp	r0, #0
   1a1bc:	beq	1a1d8 <__assert_fail@plt+0x8538>
   1a1c0:	mov	r0, r4
   1a1c4:	mov	r2, r6
   1a1c8:	mov	r3, r5
   1a1cc:	sub	sp, fp, #16
   1a1d0:	pop	{r4, r5, r6, r7, fp, lr}
   1a1d4:	b	11b80 <fseeko64@plt>
   1a1d8:	ldr	r7, [fp, #8]
   1a1dc:	mov	r0, r4
   1a1e0:	bl	11b38 <fileno@plt>
   1a1e4:	mov	r2, r6
   1a1e8:	mov	r3, r5
   1a1ec:	str	r7, [sp]
   1a1f0:	bl	11994 <lseek64@plt>
   1a1f4:	and	r2, r0, r1
   1a1f8:	cmn	r2, #1
   1a1fc:	beq	1a218 <__assert_fail@plt+0x8578>
   1a200:	strd	r0, [r4, #80]	; 0x50
   1a204:	ldr	r0, [r4]
   1a208:	bic	r0, r0, #16
   1a20c:	str	r0, [r4]
   1a210:	mov	r0, #0
   1a214:	b	1a21c <__assert_fail@plt+0x857c>
   1a218:	mvn	r0, #0
   1a21c:	sub	sp, fp, #16
   1a220:	pop	{r4, r5, r6, r7, fp, pc}
   1a224:	cmp	r0, #0
   1a228:	movweq	r0, #1
   1a22c:	cmn	r0, #1
   1a230:	ble	1a238 <__assert_fail@plt+0x8598>
   1a234:	b	11a0c <malloc@plt>
   1a238:	push	{fp, lr}
   1a23c:	mov	fp, sp
   1a240:	bl	11acc <__errno_location@plt>
   1a244:	mov	r1, #12
   1a248:	str	r1, [r0]
   1a24c:	mov	r0, #0
   1a250:	pop	{fp, pc}
   1a254:	push	{r4, r5, r6, r7, fp, lr}
   1a258:	add	fp, sp, #16
   1a25c:	sub	sp, sp, #8
   1a260:	add	r5, sp, #4
   1a264:	cmp	r0, #0
   1a268:	mov	r7, r2
   1a26c:	mov	r4, r1
   1a270:	movne	r5, r0
   1a274:	mov	r0, r5
   1a278:	bl	119c4 <mbrtowc@plt>
   1a27c:	mov	r6, r0
   1a280:	cmp	r7, #0
   1a284:	beq	1a2a8 <__assert_fail@plt+0x8608>
   1a288:	cmn	r6, #2
   1a28c:	bcc	1a2a8 <__assert_fail@plt+0x8608>
   1a290:	mov	r0, #0
   1a294:	bl	28630 <__assert_fail@plt+0x16990>
   1a298:	cmp	r0, #0
   1a29c:	ldrbeq	r0, [r4]
   1a2a0:	moveq	r6, #1
   1a2a4:	streq	r0, [r5]
   1a2a8:	mov	r0, r6
   1a2ac:	sub	sp, fp, #16
   1a2b0:	pop	{r4, r5, r6, r7, fp, pc}
   1a2b4:	push	{fp, lr}
   1a2b8:	mov	fp, sp
   1a2bc:	cmp	r0, #0
   1a2c0:	beq	1a2dc <__assert_fail@plt+0x863c>
   1a2c4:	cmp	r1, #0
   1a2c8:	beq	1a2e8 <__assert_fail@plt+0x8648>
   1a2cc:	cmn	r1, #1
   1a2d0:	ble	1a2f0 <__assert_fail@plt+0x8650>
   1a2d4:	pop	{fp, lr}
   1a2d8:	b	11940 <realloc@plt>
   1a2dc:	mov	r0, r1
   1a2e0:	pop	{fp, lr}
   1a2e4:	b	1a224 <__assert_fail@plt+0x8584>
   1a2e8:	bl	1a158 <__assert_fail@plt+0x84b8>
   1a2ec:	b	1a2fc <__assert_fail@plt+0x865c>
   1a2f0:	bl	11acc <__errno_location@plt>
   1a2f4:	mov	r1, #12
   1a2f8:	str	r1, [r0]
   1a2fc:	mov	r0, #0
   1a300:	pop	{fp, pc}
   1a304:	cmp	r2, #0
   1a308:	beq	1a338 <__assert_fail@plt+0x8698>
   1a30c:	mvn	r3, #0
   1a310:	udiv	r3, r3, r2
   1a314:	cmp	r3, r1
   1a318:	bcs	1a338 <__assert_fail@plt+0x8698>
   1a31c:	push	{fp, lr}
   1a320:	mov	fp, sp
   1a324:	bl	11acc <__errno_location@plt>
   1a328:	mov	r1, #12
   1a32c:	str	r1, [r0]
   1a330:	mov	r0, #0
   1a334:	pop	{fp, pc}
   1a338:	mul	r1, r2, r1
   1a33c:	b	1a2b4 <__assert_fail@plt+0x8614>
   1a340:	push	{fp, lr}
   1a344:	mov	fp, sp
   1a348:	mov	lr, r0
   1a34c:	movw	r0, #46028	; 0xb3cc
   1a350:	mov	ip, r1
   1a354:	ldrb	r1, [r2, #28]
   1a358:	movt	r0, #3
   1a35c:	ldr	r3, [r0]
   1a360:	mov	r0, #16
   1a364:	and	r1, r1, #111	; 0x6f
   1a368:	and	r0, r0, r3, lsr #21
   1a36c:	orr	r0, r1, r0
   1a370:	mov	r1, lr
   1a374:	orr	r0, r0, #128	; 0x80
   1a378:	strb	r0, [r2, #28]
   1a37c:	mov	r0, r2
   1a380:	mov	r2, ip
   1a384:	bl	1a3bc <__assert_fail@plt+0x871c>
   1a388:	cmp	r0, #0
   1a38c:	moveq	r0, #0
   1a390:	popeq	{fp, pc}
   1a394:	movw	r1, #42944	; 0xa7c0
   1a398:	mov	r2, #5
   1a39c:	movt	r1, #2
   1a3a0:	ldr	r0, [r1, r0, lsl #2]
   1a3a4:	movw	r1, #42560	; 0xa640
   1a3a8:	movt	r1, #2
   1a3ac:	add	r1, r1, r0
   1a3b0:	mov	r0, #0
   1a3b4:	pop	{fp, lr}
   1a3b8:	b	11934 <dcgettext@plt>
   1a3bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3c0:	add	fp, sp, #28
   1a3c4:	sub	sp, sp, #140	; 0x8c
   1a3c8:	str	r1, [sp, #24]
   1a3cc:	mov	r1, #0
   1a3d0:	str	r0, [sp, #28]
   1a3d4:	mov	sl, r2
   1a3d8:	str	r3, [sp, #20]
   1a3dc:	str	r1, [fp, #-52]	; 0xffffffcc
   1a3e0:	str	r1, [r0, #8]
   1a3e4:	str	r3, [r0, #12]
   1a3e8:	str	r1, [r0, #24]
   1a3ec:	ldrb	r1, [r0, #28]
   1a3f0:	and	r1, r1, #144	; 0x90
   1a3f4:	strb	r1, [r0, #28]
   1a3f8:	ldr	r9, [r0]
   1a3fc:	ldr	r0, [r0, #4]
   1a400:	cmp	r0, #159	; 0x9f
   1a404:	bls	1afb4 <__assert_fail@plt+0x9314>
   1a408:	ldr	r1, [sp, #28]
   1a40c:	mov	r0, #160	; 0xa0
   1a410:	mov	r2, #160	; 0xa0
   1a414:	str	r0, [r1, #8]
   1a418:	mov	r0, r9
   1a41c:	mov	r1, #0
   1a420:	bl	11b08 <memset@plt>
   1a424:	mov	r0, #31
   1a428:	str	r0, [r9, #64]	; 0x40
   1a42c:	movw	r0, #43689	; 0xaaa9
   1a430:	movt	r0, #2730	; 0xaaa
   1a434:	cmp	sl, r0
   1a438:	bhi	1a5a8 <__assert_fail@plt+0x8908>
   1a43c:	add	r0, sl, #1
   1a440:	str	r0, [r9, #4]
   1a444:	str	r0, [sp, #12]
   1a448:	lsl	r0, r0, #3
   1a44c:	bl	1a224 <__assert_fail@plt+0x8584>
   1a450:	str	r0, [r9]
   1a454:	mov	r0, #1
   1a458:	mov	r4, r0
   1a45c:	lsl	r0, r0, #1
   1a460:	cmp	r4, sl
   1a464:	bls	1a458 <__assert_fail@plt+0x87b8>
   1a468:	mov	r0, #12
   1a46c:	mov	r1, r4
   1a470:	bl	19ed0 <__assert_fail@plt+0x8230>
   1a474:	str	r0, [r9, #32]
   1a478:	sub	r0, r4, #1
   1a47c:	str	r0, [r9, #68]	; 0x44
   1a480:	bl	119a0 <__ctype_get_mb_cur_max@plt>
   1a484:	str	r0, [r9, #92]	; 0x5c
   1a488:	mov	r0, #14
   1a48c:	bl	11bbc <nl_langinfo@plt>
   1a490:	ldrb	r1, [r0]
   1a494:	orr	r1, r1, #32
   1a498:	cmp	r1, #117	; 0x75
   1a49c:	bne	1a4e8 <__assert_fail@plt+0x8848>
   1a4a0:	ldrb	r1, [r0, #1]
   1a4a4:	orr	r1, r1, #32
   1a4a8:	cmp	r1, #116	; 0x74
   1a4ac:	bne	1a4e8 <__assert_fail@plt+0x8848>
   1a4b0:	ldrb	r1, [r0, #2]
   1a4b4:	orr	r1, r1, #32
   1a4b8:	cmp	r1, #102	; 0x66
   1a4bc:	bne	1a4e8 <__assert_fail@plt+0x8848>
   1a4c0:	ldrb	r1, [r0, #3]!
   1a4c4:	cmp	r1, #45	; 0x2d
   1a4c8:	movw	r1, #43060	; 0xa834
   1a4cc:	addeq	r0, r0, #1
   1a4d0:	movt	r1, #2
   1a4d4:	bl	11850 <strcmp@plt>
   1a4d8:	cmp	r0, #0
   1a4dc:	ldrbeq	r0, [r9, #88]	; 0x58
   1a4e0:	orreq	r0, r0, #4
   1a4e4:	strbeq	r0, [r9, #88]	; 0x58
   1a4e8:	ldrb	r0, [r9, #88]	; 0x58
   1a4ec:	and	r1, r0, #247	; 0xf7
   1a4f0:	strb	r1, [r9, #88]	; 0x58
   1a4f4:	ldr	r1, [r9, #92]	; 0x5c
   1a4f8:	cmp	r1, #2
   1a4fc:	blt	1a594 <__assert_fail@plt+0x88f4>
   1a500:	tst	r0, #4
   1a504:	bne	1a588 <__assert_fail@plt+0x88e8>
   1a508:	mov	r0, #32
   1a50c:	mov	r1, #1
   1a510:	mov	r8, #1
   1a514:	bl	19ed0 <__assert_fail@plt+0x8230>
   1a518:	cmp	r0, #0
   1a51c:	str	r0, [r9, #60]	; 0x3c
   1a520:	beq	1a5a8 <__assert_fail@plt+0x8908>
   1a524:	mov	r7, #0
   1a528:	mov	r5, #0
   1a52c:	mov	r6, #0
   1a530:	add	r4, r7, r6
   1a534:	mov	r0, r4
   1a538:	bl	11b20 <btowc@plt>
   1a53c:	cmn	r0, #1
   1a540:	ldrne	r1, [r9, #60]	; 0x3c
   1a544:	ldrne	r2, [r1, r5, lsl #2]
   1a548:	orrne	r2, r2, r8, lsl r6
   1a54c:	strne	r2, [r1, r5, lsl #2]
   1a550:	cmp	r4, #127	; 0x7f
   1a554:	bhi	1a568 <__assert_fail@plt+0x88c8>
   1a558:	cmp	r4, r0
   1a55c:	ldrbne	r0, [r9, #88]	; 0x58
   1a560:	orrne	r0, r0, #8
   1a564:	strbne	r0, [r9, #88]	; 0x58
   1a568:	add	r6, r6, #1
   1a56c:	cmp	r6, #32
   1a570:	bne	1a530 <__assert_fail@plt+0x8890>
   1a574:	add	r5, r5, #1
   1a578:	add	r7, r7, #32
   1a57c:	cmp	r5, #8
   1a580:	bne	1a52c <__assert_fail@plt+0x888c>
   1a584:	b	1a594 <__assert_fail@plt+0x88f4>
   1a588:	movw	r0, #43012	; 0xa804
   1a58c:	movt	r0, #2
   1a590:	str	r0, [r9, #60]	; 0x3c
   1a594:	ldr	r0, [r9]
   1a598:	cmp	r0, #0
   1a59c:	ldrne	r0, [r9, #32]
   1a5a0:	cmpne	r0, #0
   1a5a4:	bne	1a5cc <__assert_fail@plt+0x892c>
   1a5a8:	mov	r4, #12
   1a5ac:	mov	r0, r9
   1a5b0:	str	r4, [fp, #-52]	; 0xffffffcc
   1a5b4:	bl	1b65c <__assert_fail@plt+0x99bc>
   1a5b8:	ldr	r0, [sp, #28]
   1a5bc:	mov	r1, #0
   1a5c0:	str	r1, [r0]
   1a5c4:	str	r1, [r0, #4]
   1a5c8:	b	1af3c <__assert_fail@plt+0x929c>
   1a5cc:	movw	r0, #0
   1a5d0:	movw	r1, #0
   1a5d4:	mov	r4, #0
   1a5d8:	movt	r0, #0
   1a5dc:	movt	r1, #0
   1a5e0:	str	r4, [fp, #-52]	; 0xffffffcc
   1a5e4:	orrs	r0, r1, r0
   1a5e8:	str	r0, [sp, #8]
   1a5ec:	beq	1a604 <__assert_fail@plt+0x8964>
   1a5f0:	add	r0, r9, #136	; 0x88
   1a5f4:	mov	r1, #0
   1a5f8:	bl	118f8 <pthread_mutex_init@plt>
   1a5fc:	cmp	r0, #0
   1a600:	bne	1a5a8 <__assert_fail@plt+0x8908>
   1a604:	ldr	r0, [sp, #28]
   1a608:	add	r5, sp, #32
   1a60c:	mov	r1, #0
   1a610:	mov	r2, #76	; 0x4c
   1a614:	ldr	r8, [r0, #20]
   1a618:	add	r0, r5, #4
   1a61c:	bl	11b08 <memset@plt>
   1a620:	ldr	r0, [sp, #24]
   1a624:	ldr	r1, [sp, #20]
   1a628:	add	r3, r5, #44	; 0x2c
   1a62c:	vdup.32	q8, sl
   1a630:	str	r0, [sp, #32]
   1a634:	str	r8, [sp, #96]	; 0x60
   1a638:	ubfx	r0, r1, #22, #1
   1a63c:	strb	r0, [sp, #104]	; 0x68
   1a640:	and	r0, r1, #4194304	; 0x400000
   1a644:	orrs	r1, r0, r8
   1a648:	str	r0, [sp, #16]
   1a64c:	movwne	r1, #1
   1a650:	cmp	sl, #1
   1a654:	strb	r1, [sp, #107]	; 0x6b
   1a658:	ldr	r0, [r9, #92]	; 0x5c
   1a65c:	str	r0, [sp, #112]	; 0x70
   1a660:	ldrb	r2, [r9, #88]	; 0x58
   1a664:	vst1.32	{d16-d17}, [r3]
   1a668:	ubfx	r3, r2, #3, #1
   1a66c:	strb	r3, [sp, #106]	; 0x6a
   1a670:	ubfx	r2, r2, #2, #1
   1a674:	strb	r2, [sp, #105]	; 0x69
   1a678:	blt	1a69c <__assert_fail@plt+0x89fc>
   1a67c:	ldr	r1, [sp, #12]
   1a680:	add	r0, sp, #32
   1a684:	bl	1d8d0 <__assert_fail@plt+0xbc30>
   1a688:	cmp	r0, #0
   1a68c:	bne	1a70c <__assert_fail@plt+0x8a6c>
   1a690:	ldr	r0, [r9, #92]	; 0x5c
   1a694:	ldr	r4, [sp, #36]	; 0x24
   1a698:	ldrb	r1, [sp, #107]	; 0x6b
   1a69c:	cmp	r1, #0
   1a6a0:	ldr	r1, [sp, #24]
   1a6a4:	moveq	r4, r1
   1a6a8:	ldr	r1, [sp, #16]
   1a6ac:	str	r4, [sp, #36]	; 0x24
   1a6b0:	cmp	r1, #0
   1a6b4:	beq	1a714 <__assert_fail@plt+0x8a74>
   1a6b8:	cmp	r0, #2
   1a6bc:	blt	1a728 <__assert_fail@plt+0x8a88>
   1a6c0:	add	r4, sp, #32
   1a6c4:	mov	r0, r4
   1a6c8:	bl	1d970 <__assert_fail@plt+0xbcd0>
   1a6cc:	cmp	r0, #0
   1a6d0:	bne	1a70c <__assert_fail@plt+0x8a6c>
   1a6d4:	ldr	r0, [sp, #64]	; 0x40
   1a6d8:	cmp	r0, sl
   1a6dc:	bge	1a7bc <__assert_fail@plt+0x8b1c>
   1a6e0:	ldr	r1, [r9, #92]	; 0x5c
   1a6e4:	ldr	r2, [sp, #60]	; 0x3c
   1a6e8:	ldr	r0, [sp, #68]	; 0x44
   1a6ec:	add	r1, r1, r2
   1a6f0:	cmp	r0, r1
   1a6f4:	bgt	1a7bc <__assert_fail@plt+0x8b1c>
   1a6f8:	lsl	r1, r0, #1
   1a6fc:	mov	r0, r4
   1a700:	bl	1d8d0 <__assert_fail@plt+0xbc30>
   1a704:	cmp	r0, #0
   1a708:	beq	1a6c4 <__assert_fail@plt+0x8a24>
   1a70c:	ldr	sl, [sp, #28]
   1a710:	b	1a910 <__assert_fail@plt+0x8c70>
   1a714:	cmp	r0, #2
   1a718:	blt	1a734 <__assert_fail@plt+0x8a94>
   1a71c:	add	r0, sp, #32
   1a720:	bl	1df4c <__assert_fail@plt+0xc2ac>
   1a724:	b	1a7bc <__assert_fail@plt+0x8b1c>
   1a728:	add	r0, sp, #32
   1a72c:	bl	1dee0 <__assert_fail@plt+0xc240>
   1a730:	b	1a7bc <__assert_fail@plt+0x8b1c>
   1a734:	ldr	r0, [sp, #68]	; 0x44
   1a738:	cmp	r8, #0
   1a73c:	beq	1a7b4 <__assert_fail@plt+0x8b14>
   1a740:	ldr	r2, [sp, #80]	; 0x50
   1a744:	ldr	r1, [sp, #60]	; 0x3c
   1a748:	cmp	r0, r2
   1a74c:	movgt	r0, r2
   1a750:	cmp	r1, r0
   1a754:	bge	1a7a8 <__assert_fail@plt+0x8b08>
   1a758:	ldr	r3, [sp, #56]	; 0x38
   1a75c:	ldr	r2, [sp, #32]
   1a760:	ldr	r7, [sp, #96]	; 0x60
   1a764:	add	r3, r3, r1
   1a768:	ldrb	r2, [r2, r3]
   1a76c:	ldrb	r2, [r7, r2]
   1a770:	strb	r2, [r4, r1]
   1a774:	b	1a798 <__assert_fail@plt+0x8af8>
   1a778:	ldr	r2, [sp, #32]
   1a77c:	ldr	r7, [sp, #56]	; 0x38
   1a780:	ldr	r6, [sp, #96]	; 0x60
   1a784:	ldr	r3, [sp, #36]	; 0x24
   1a788:	add	r2, r2, r7
   1a78c:	ldrb	r2, [r2, r1]
   1a790:	ldrb	r2, [r6, r2]
   1a794:	strb	r2, [r3, r1]
   1a798:	add	r1, r1, #1
   1a79c:	cmp	r1, r0
   1a7a0:	blt	1a778 <__assert_fail@plt+0x8ad8>
   1a7a4:	mov	r1, r0
   1a7a8:	str	r1, [sp, #64]	; 0x40
   1a7ac:	str	r1, [sp, #60]	; 0x3c
   1a7b0:	b	1a7bc <__assert_fail@plt+0x8b1c>
   1a7b4:	str	r0, [sp, #64]	; 0x40
   1a7b8:	str	r0, [sp, #60]	; 0x3c
   1a7bc:	ldr	sl, [sp, #28]
   1a7c0:	mov	r5, #0
   1a7c4:	ldr	r6, [sp, #20]
   1a7c8:	sub	r8, fp, #48	; 0x30
   1a7cc:	add	r7, sp, #32
   1a7d0:	str	r5, [fp, #-52]	; 0xffffffcc
   1a7d4:	mov	r0, r8
   1a7d8:	mov	r1, r7
   1a7dc:	str	r5, [sl, #24]
   1a7e0:	orr	r2, r6, #8388608	; 0x800000
   1a7e4:	ldr	r4, [sl]
   1a7e8:	str	r6, [r4, #128]	; 0x80
   1a7ec:	bl	1e338 <__assert_fail@plt+0xc698>
   1a7f0:	ldr	r1, [sp, #72]	; 0x48
   1a7f4:	mov	r2, r8
   1a7f8:	mov	r3, r6
   1a7fc:	str	r5, [sp]
   1a800:	add	r0, r1, r0
   1a804:	mov	r1, sl
   1a808:	str	r0, [sp, #72]	; 0x48
   1a80c:	sub	r0, fp, #52	; 0x34
   1a810:	str	r0, [sp, #4]
   1a814:	mov	r0, r7
   1a818:	bl	1e188 <__assert_fail@plt+0xc4e8>
   1a81c:	mov	r6, r0
   1a820:	cmp	r0, #0
   1a824:	bne	1a834 <__assert_fail@plt+0x8b94>
   1a828:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1a82c:	cmp	r0, #0
   1a830:	bne	1afe8 <__assert_fail@plt+0x9348>
   1a834:	mov	r0, #2
   1a838:	sub	r3, fp, #40	; 0x28
   1a83c:	mov	r1, #0
   1a840:	mov	r2, #0
   1a844:	str	r0, [fp, #-36]	; 0xffffffdc
   1a848:	mov	r0, r4
   1a84c:	str	r5, [fp, #-40]	; 0xffffffd8
   1a850:	bl	2016c <__assert_fail@plt+0xe4cc>
   1a854:	mov	r7, r0
   1a858:	cmp	r6, #0
   1a85c:	beq	1a888 <__assert_fail@plt+0x8be8>
   1a860:	mov	r0, #16
   1a864:	sub	r3, fp, #40	; 0x28
   1a868:	mov	r1, r6
   1a86c:	mov	r2, r7
   1a870:	str	r0, [fp, #-36]	; 0xffffffdc
   1a874:	mov	r0, #0
   1a878:	str	r0, [fp, #-40]	; 0xffffffd8
   1a87c:	mov	r0, r4
   1a880:	bl	2016c <__assert_fail@plt+0xe4cc>
   1a884:	b	1a88c <__assert_fail@plt+0x8bec>
   1a888:	mov	r0, r7
   1a88c:	cmp	r7, #0
   1a890:	cmpne	r0, #0
   1a894:	beq	1afe0 <__assert_fail@plt+0x9340>
   1a898:	str	r0, [r9, #52]	; 0x34
   1a89c:	ldr	r8, [sl]
   1a8a0:	ldr	r0, [r8, #4]
   1a8a4:	lsl	r0, r0, #2
   1a8a8:	bl	1a224 <__assert_fail@plt+0x8584>
   1a8ac:	str	r0, [r8, #12]
   1a8b0:	ldr	r0, [r8, #4]
   1a8b4:	lsl	r0, r0, #2
   1a8b8:	bl	1a224 <__assert_fail@plt+0x8584>
   1a8bc:	str	r0, [r8, #16]
   1a8c0:	ldr	r0, [r8, #4]
   1a8c4:	add	r0, r0, r0, lsl #1
   1a8c8:	lsl	r0, r0, #2
   1a8cc:	bl	1a224 <__assert_fail@plt+0x8584>
   1a8d0:	str	r0, [r8, #20]
   1a8d4:	ldr	r0, [r8, #4]
   1a8d8:	add	r0, r0, r0, lsl #1
   1a8dc:	lsl	r0, r0, #2
   1a8e0:	bl	1a224 <__assert_fail@plt+0x8584>
   1a8e4:	str	r0, [r8, #24]
   1a8e8:	ldr	r1, [r8, #12]
   1a8ec:	cmp	r1, #0
   1a8f0:	ldrne	r1, [r8, #16]
   1a8f4:	cmpne	r1, #0
   1a8f8:	beq	1a90c <__assert_fail@plt+0x8c6c>
   1a8fc:	cmp	r0, #0
   1a900:	ldrne	r0, [r8, #20]
   1a904:	cmpne	r0, #0
   1a908:	bne	1a954 <__assert_fail@plt+0x8cb4>
   1a90c:	mov	r0, #12
   1a910:	str	r0, [fp, #-52]	; 0xffffffcc
   1a914:	mov	r0, sl
   1a918:	bl	1d84c <__assert_fail@plt+0xbbac>
   1a91c:	add	r0, sp, #32
   1a920:	bl	1d89c <__assert_fail@plt+0xbbfc>
   1a924:	ldr	r0, [sp, #8]
   1a928:	cmp	r0, #0
   1a92c:	beq	1a938 <__assert_fail@plt+0x8c98>
   1a930:	add	r0, r9, #136	; 0x88
   1a934:	bl	11868 <pthread_mutex_destroy@plt>
   1a938:	mov	r0, r9
   1a93c:	bl	1b65c <__assert_fail@plt+0x99bc>
   1a940:	mov	r0, #0
   1a944:	str	r0, [sl]
   1a948:	str	r0, [sl, #4]
   1a94c:	ldr	r4, [fp, #-52]	; 0xffffffcc
   1a950:	b	1af3c <__assert_fail@plt+0x929c>
   1a954:	ldr	r0, [sl, #24]
   1a958:	lsl	r0, r0, #2
   1a95c:	bl	1a224 <__assert_fail@plt+0x8584>
   1a960:	cmp	r0, #0
   1a964:	str	r0, [r8, #132]	; 0x84
   1a968:	beq	1a9dc <__assert_fail@plt+0x8d3c>
   1a96c:	ldr	r1, [sl, #24]
   1a970:	cmp	r1, #0
   1a974:	beq	1a98c <__assert_fail@plt+0x8cec>
   1a978:	mov	r2, #0
   1a97c:	str	r2, [r0, r2, lsl #2]
   1a980:	add	r2, r2, #1
   1a984:	cmp	r1, r2
   1a988:	bne	1a97c <__assert_fail@plt+0x8cdc>
   1a98c:	mov	r4, r8
   1a990:	movw	r1, #4864	; 0x1300
   1a994:	mov	r2, r8
   1a998:	ldr	r0, [r4, #52]!	; 0x34
   1a99c:	movt	r1, #2
   1a9a0:	bl	21280 <__assert_fail@plt+0xf5e0>
   1a9a4:	ldr	r1, [sl, #24]
   1a9a8:	cmp	r1, #0
   1a9ac:	beq	1a9e4 <__assert_fail@plt+0x8d44>
   1a9b0:	ldr	r0, [r8, #132]	; 0x84
   1a9b4:	mov	r2, #0
   1a9b8:	ldr	r3, [r0, r2, lsl #2]
   1a9bc:	cmp	r2, r3
   1a9c0:	bne	1a9d0 <__assert_fail@plt+0x8d30>
   1a9c4:	add	r2, r2, #1
   1a9c8:	cmp	r2, r1
   1a9cc:	bcc	1a9b8 <__assert_fail@plt+0x8d18>
   1a9d0:	cmp	r2, r1
   1a9d4:	beq	1a9e8 <__assert_fail@plt+0x8d48>
   1a9d8:	b	1a9f4 <__assert_fail@plt+0x8d54>
   1a9dc:	add	r4, r8, #52	; 0x34
   1a9e0:	b	1a9f4 <__assert_fail@plt+0x8d54>
   1a9e4:	ldr	r0, [r8, #132]	; 0x84
   1a9e8:	bl	1a158 <__assert_fail@plt+0x84b8>
   1a9ec:	mov	r0, #0
   1a9f0:	str	r0, [r8, #132]	; 0x84
   1a9f4:	ldr	r0, [r4]
   1a9f8:	movw	r1, #5016	; 0x1398
   1a9fc:	mov	r2, sl
   1aa00:	movt	r1, #2
   1aa04:	bl	1ebe0 <__assert_fail@plt+0xcf40>
   1aa08:	cmp	r0, #0
   1aa0c:	bne	1a910 <__assert_fail@plt+0x8c70>
   1aa10:	ldr	r0, [r8, #52]	; 0x34
   1aa14:	movw	r1, #5152	; 0x1420
   1aa18:	mov	r2, r8
   1aa1c:	movt	r1, #2
   1aa20:	bl	1ebe0 <__assert_fail@plt+0xcf40>
   1aa24:	cmp	r0, #0
   1aa28:	bne	1a910 <__assert_fail@plt+0x8c70>
   1aa2c:	ldr	r0, [r8, #52]	; 0x34
   1aa30:	movw	r1, #5292	; 0x14ac
   1aa34:	mov	r2, r8
   1aa38:	movt	r1, #2
   1aa3c:	bl	21280 <__assert_fail@plt+0xf5e0>
   1aa40:	ldr	r0, [r8, #52]	; 0x34
   1aa44:	movw	r1, #5388	; 0x150c
   1aa48:	mov	r2, r8
   1aa4c:	movt	r1, #2
   1aa50:	bl	21280 <__assert_fail@plt+0xf5e0>
   1aa54:	cmp	r0, #0
   1aa58:	bne	1a910 <__assert_fail@plt+0x8c70>
   1aa5c:	ldr	r0, [r8, #8]
   1aa60:	cmp	r0, #0
   1aa64:	beq	1ab08 <__assert_fail@plt+0x8e68>
   1aa68:	mov	r5, #0
   1aa6c:	sub	r7, fp, #40	; 0x28
   1aa70:	mov	r4, #0
   1aa74:	ldr	r0, [r8, #24]
   1aa78:	add	r6, r4, r4, lsl #1
   1aa7c:	add	r0, r0, r6, lsl #2
   1aa80:	ldr	r0, [r0, #4]
   1aa84:	cmp	r0, #0
   1aa88:	beq	1aa94 <__assert_fail@plt+0x8df4>
   1aa8c:	mov	r1, r5
   1aa90:	b	1aad4 <__assert_fail@plt+0x8e34>
   1aa94:	mov	r0, r7
   1aa98:	mov	r1, r8
   1aa9c:	mov	r2, r4
   1aaa0:	mov	r3, #1
   1aaa4:	bl	219c0 <__assert_fail@plt+0xfd20>
   1aaa8:	cmp	r0, #0
   1aaac:	bne	1a910 <__assert_fail@plt+0x8c70>
   1aab0:	ldr	r0, [r8, #24]
   1aab4:	mov	r1, r5
   1aab8:	add	r0, r0, r6, lsl #2
   1aabc:	ldr	r0, [r0, #4]
   1aac0:	cmp	r0, #0
   1aac4:	bne	1aad4 <__assert_fail@plt+0x8e34>
   1aac8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1aacc:	bl	1a158 <__assert_fail@plt+0x84b8>
   1aad0:	mov	r1, #1
   1aad4:	ldr	r2, [r8, #8]
   1aad8:	add	r0, r4, #1
   1aadc:	subs	r3, r0, r2
   1aae0:	mov	r4, r3
   1aae4:	movwne	r3, #1
   1aae8:	movne	r4, r0
   1aaec:	tst	r1, #1
   1aaf0:	and	r5, r1, r3
   1aaf4:	cmpeq	r0, r2
   1aaf8:	bne	1aa74 <__assert_fail@plt+0x8dd4>
   1aafc:	add	r0, r0, r0, lsl #1
   1ab00:	lsl	r0, r0, #2
   1ab04:	b	1ab0c <__assert_fail@plt+0x8e6c>
   1ab08:	mov	r0, #0
   1ab0c:	ldrb	r1, [sl, #28]
   1ab10:	tst	r1, #16
   1ab14:	bne	1ab2c <__assert_fail@plt+0x8e8c>
   1ab18:	ldr	r1, [sl, #24]
   1ab1c:	cmp	r1, #0
   1ab20:	ldrbne	r1, [r8, #88]	; 0x58
   1ab24:	tstne	r1, #1
   1ab28:	bne	1ab38 <__assert_fail@plt+0x8e98>
   1ab2c:	ldr	r1, [r8, #76]	; 0x4c
   1ab30:	cmp	r1, #0
   1ab34:	beq	1ac10 <__assert_fail@plt+0x8f70>
   1ab38:	bl	1a224 <__assert_fail@plt+0x8584>
   1ab3c:	cmp	r0, #0
   1ab40:	str	r0, [r8, #28]
   1ab44:	beq	1a90c <__assert_fail@plt+0x8c6c>
   1ab48:	ldr	r1, [r8, #8]
   1ab4c:	cmp	r1, #0
   1ab50:	beq	1ac10 <__assert_fail@plt+0x8f70>
   1ab54:	mov	r1, #0
   1ab58:	str	r1, [r0]
   1ab5c:	str	r1, [r0, #4]
   1ab60:	str	r1, [r0, #8]
   1ab64:	ldr	r0, [r8, #8]
   1ab68:	cmp	r0, #2
   1ab6c:	bcc	1ab9c <__assert_fail@plt+0x8efc>
   1ab70:	mov	r2, #1
   1ab74:	mov	r3, #12
   1ab78:	ldr	r0, [r8, #28]
   1ab7c:	add	r2, r2, #1
   1ab80:	str	r1, [r0, r3]!
   1ab84:	add	r3, r3, #12
   1ab88:	str	r1, [r0, #4]
   1ab8c:	str	r1, [r0, #8]
   1ab90:	ldr	r0, [r8, #8]
   1ab94:	cmp	r2, r0
   1ab98:	bcc	1ab78 <__assert_fail@plt+0x8ed8>
   1ab9c:	cmp	r0, #0
   1aba0:	beq	1ac10 <__assert_fail@plt+0x8f70>
   1aba4:	ldr	r1, [r8, #24]
   1aba8:	mov	r4, #0
   1abac:	add	r5, r4, r4, lsl #1
   1abb0:	add	r2, r1, r5, lsl #2
   1abb4:	ldr	r3, [r2, #4]
   1abb8:	cmp	r3, #1
   1abbc:	blt	1ac04 <__assert_fail@plt+0x8f64>
   1abc0:	ldr	r7, [r2, #8]
   1abc4:	mov	r6, #0
   1abc8:	ldr	r0, [r7, r6, lsl #2]
   1abcc:	ldr	r1, [r8, #28]
   1abd0:	add	r0, r0, r0, lsl #1
   1abd4:	add	r0, r1, r0, lsl #2
   1abd8:	mov	r1, r4
   1abdc:	bl	22200 <__assert_fail@plt+0x10560>
   1abe0:	cmp	r0, #0
   1abe4:	beq	1a90c <__assert_fail@plt+0x8c6c>
   1abe8:	ldr	r1, [r8, #24]
   1abec:	add	r6, r6, #1
   1abf0:	add	r0, r1, r5, lsl #2
   1abf4:	ldr	r0, [r0, #4]
   1abf8:	cmp	r6, r0
   1abfc:	blt	1abc8 <__assert_fail@plt+0x8f28>
   1ac00:	ldr	r0, [r8, #8]
   1ac04:	add	r4, r4, #1
   1ac08:	cmp	r4, r0
   1ac0c:	bcc	1abac <__assert_fail@plt+0x8f0c>
   1ac10:	mov	r0, #0
   1ac14:	str	r0, [fp, #-52]	; 0xffffffcc
   1ac18:	ldr	r0, [sp, #16]
   1ac1c:	cmp	r0, #0
   1ac20:	bne	1ad54 <__assert_fail@plt+0x90b4>
   1ac24:	ldrb	r2, [r9, #88]	; 0x58
   1ac28:	ands	r0, r2, #4
   1ac2c:	beq	1ad54 <__assert_fail@plt+0x90b4>
   1ac30:	ldr	r0, [sp, #28]
   1ac34:	ldr	r0, [r0, #20]
   1ac38:	cmp	r0, #0
   1ac3c:	bne	1ad54 <__assert_fail@plt+0x90b4>
   1ac40:	ldr	r7, [r9, #8]
   1ac44:	mov	sl, #0
   1ac48:	cmp	r7, #0
   1ac4c:	beq	1ad28 <__assert_fail@plt+0x9088>
   1ac50:	ldr	r3, [r9]
   1ac54:	mov	r8, #0
   1ac58:	mov	ip, #1
   1ac5c:	mov	lr, #139	; 0x8b
   1ac60:	mov	r6, #0
   1ac64:	mov	r4, #0
   1ac68:	add	r1, r3, r4, lsl #3
   1ac6c:	ldrb	r5, [r1, #4]
   1ac70:	sub	r5, r5, #1
   1ac74:	cmp	r5, #11
   1ac78:	bhi	1b004 <__assert_fail@plt+0x9364>
   1ac7c:	add	r0, pc, #0
   1ac80:	ldr	pc, [r0, r5, lsl #2]
   1ac84:	andeq	sl, r1, r8, lsl #26
   1ac88:			; <UNDEFINED> instruction: 0x0001acb4
   1ac8c:	andeq	sl, r1, r4, asr #25
   1ac90:			; <UNDEFINED> instruction: 0x0001acb4
   1ac94:	andeq	sl, r1, r0, lsr #26
   1ac98:	andeq	sl, r1, r4, asr sp
   1ac9c:	andeq	fp, r1, r4
   1aca0:			; <UNDEFINED> instruction: 0x0001acb4
   1aca4:			; <UNDEFINED> instruction: 0x0001acb4
   1aca8:			; <UNDEFINED> instruction: 0x0001acb4
   1acac:			; <UNDEFINED> instruction: 0x0001acb4
   1acb0:	andeq	sl, r1, r8, ror #25
   1acb4:	add	r4, r4, #1
   1acb8:	cmp	r4, r7
   1acbc:	bcc	1ac68 <__assert_fail@plt+0x8fc8>
   1acc0:	b	1af48 <__assert_fail@plt+0x92a8>
   1acc4:	ldr	r5, [r3, r4, lsl #3]
   1acc8:	mov	r1, #4
   1accc:	ldr	r0, [r5, r1, lsl #2]
   1acd0:	cmp	r0, #0
   1acd4:	bne	1ad54 <__assert_fail@plt+0x90b4>
   1acd8:	add	r1, r1, #1
   1acdc:	cmp	r1, #7
   1ace0:	bls	1accc <__assert_fail@plt+0x902c>
   1ace4:	b	1acb4 <__assert_fail@plt+0x9014>
   1ace8:	ldr	r0, [r3, r4, lsl #3]
   1acec:	sub	r0, r0, #16
   1acf0:	ror	r1, r0, #4
   1acf4:	cmp	r1, #7
   1acf8:	bhi	1ad54 <__assert_fail@plt+0x90b4>
   1acfc:	tst	lr, ip, lsl r1
   1ad00:	bne	1acb4 <__assert_fail@plt+0x9014>
   1ad04:	b	1ad54 <__assert_fail@plt+0x90b4>
   1ad08:	ldrsb	r0, [r1]
   1ad0c:	cmp	r0, #0
   1ad10:	mov	r0, #0
   1ad14:	movwlt	r0, #1
   1ad18:	orr	r6, r6, r0
   1ad1c:	b	1acb4 <__assert_fail@plt+0x9014>
   1ad20:	mov	r8, #1
   1ad24:	b	1acb4 <__assert_fail@plt+0x9014>
   1ad28:	mov	r8, #0
   1ad2c:	mov	r0, #1
   1ad30:	and	r1, r2, #249	; 0xf9
   1ad34:	str	r0, [r9, #92]	; 0x5c
   1ad38:	ldr	r0, [r9, #76]	; 0x4c
   1ad3c:	cmp	r0, #0
   1ad40:	movwgt	sl, #1
   1ad44:	orr	r0, r8, sl
   1ad48:	and	r0, r0, #1
   1ad4c:	orr	r0, r1, r0, lsl #1
   1ad50:	strb	r0, [r9, #88]	; 0x58
   1ad54:	ldr	r1, [r9, #52]	; 0x34
   1ad58:	ldr	r0, [r9, #24]
   1ad5c:	ldr	r1, [r1, #12]
   1ad60:	ldr	r1, [r1, #28]
   1ad64:	str	r1, [r9, #72]	; 0x48
   1ad68:	add	r1, r1, r1, lsl #1
   1ad6c:	add	r1, r0, r1, lsl #2
   1ad70:	sub	r0, fp, #40	; 0x28
   1ad74:	bl	22268 <__assert_fail@plt+0x105c8>
   1ad78:	cmp	r0, #0
   1ad7c:	str	r0, [fp, #-48]	; 0xffffffd0
   1ad80:	bne	1affc <__assert_fail@plt+0x935c>
   1ad84:	ldr	r0, [r9, #76]	; 0x4c
   1ad88:	ldr	sl, [sp, #28]
   1ad8c:	cmp	r0, #1
   1ad90:	ldrge	r7, [fp, #-36]	; 0xffffffdc
   1ad94:	cmpge	r7, #1
   1ad98:	blt	1ae5c <__assert_fail@plt+0x91bc>
   1ad9c:	mov	r6, #0
   1ada0:	sub	r8, fp, #40	; 0x28
   1ada4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1ada8:	ldr	r2, [r9]
   1adac:	ldr	r0, [r1, r6, lsl #2]
   1adb0:	add	r3, r2, r0, lsl #3
   1adb4:	ldrb	r3, [r3, #4]
   1adb8:	cmp	r3, #4
   1adbc:	bne	1ae50 <__assert_fail@plt+0x91b0>
   1adc0:	mov	r3, #0
   1adc4:	cmp	r7, #1
   1adc8:	blt	1adfc <__assert_fail@plt+0x915c>
   1adcc:	ldr	r5, [r1, r3, lsl #2]
   1add0:	add	r4, r2, r5, lsl #3
   1add4:	ldrb	r4, [r4, #4]
   1add8:	cmp	r4, #9
   1addc:	bne	1adf0 <__assert_fail@plt+0x9150>
   1ade0:	ldr	r4, [r2, r0, lsl #3]
   1ade4:	ldr	r5, [r2, r5, lsl #3]
   1ade8:	cmp	r5, r4
   1adec:	beq	1adfc <__assert_fail@plt+0x915c>
   1adf0:	add	r3, r3, #1
   1adf4:	cmp	r3, r7
   1adf8:	blt	1adcc <__assert_fail@plt+0x912c>
   1adfc:	cmp	r3, r7
   1ae00:	beq	1ae50 <__assert_fail@plt+0x91b0>
   1ae04:	ldr	r1, [r9, #20]
   1ae08:	add	r0, r0, r0, lsl #1
   1ae0c:	add	r0, r1, r0, lsl #2
   1ae10:	ldr	r0, [r0, #8]
   1ae14:	ldr	r4, [r0]
   1ae18:	mov	r0, r8
   1ae1c:	mov	r1, r4
   1ae20:	bl	222e4 <__assert_fail@plt+0x10644>
   1ae24:	cmp	r0, #0
   1ae28:	bne	1ae50 <__assert_fail@plt+0x91b0>
   1ae2c:	ldr	r0, [r9, #24]
   1ae30:	add	r1, r4, r4, lsl #1
   1ae34:	add	r1, r0, r1, lsl #2
   1ae38:	mov	r0, r8
   1ae3c:	bl	21eb8 <__assert_fail@plt+0x10218>
   1ae40:	cmp	r0, #0
   1ae44:	bne	1af18 <__assert_fail@plt+0x9278>
   1ae48:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1ae4c:	mov	r6, #0
   1ae50:	add	r6, r6, #1
   1ae54:	cmp	r6, r7
   1ae58:	blt	1ada4 <__assert_fail@plt+0x9104>
   1ae5c:	sub	r0, fp, #48	; 0x30
   1ae60:	sub	r2, fp, #40	; 0x28
   1ae64:	mov	r1, r9
   1ae68:	mov	r3, #0
   1ae6c:	bl	22348 <__assert_fail@plt+0x106a8>
   1ae70:	cmp	r0, #0
   1ae74:	str	r0, [r9, #36]	; 0x24
   1ae78:	beq	1aef8 <__assert_fail@plt+0x9258>
   1ae7c:	ldrsb	r1, [r0, #52]	; 0x34
   1ae80:	cmn	r1, #1
   1ae84:	ble	1ae98 <__assert_fail@plt+0x91f8>
   1ae88:	str	r0, [r9, #40]	; 0x28
   1ae8c:	str	r0, [r9, #44]	; 0x2c
   1ae90:	str	r0, [r9, #48]	; 0x30
   1ae94:	b	1af0c <__assert_fail@plt+0x926c>
   1ae98:	sub	r4, fp, #48	; 0x30
   1ae9c:	sub	r6, fp, #40	; 0x28
   1aea0:	mov	r1, r9
   1aea4:	mov	r3, #1
   1aea8:	mov	r0, r4
   1aeac:	mov	r2, r6
   1aeb0:	bl	22348 <__assert_fail@plt+0x106a8>
   1aeb4:	str	r0, [r9, #40]	; 0x28
   1aeb8:	mov	r0, r4
   1aebc:	mov	r1, r9
   1aec0:	mov	r2, r6
   1aec4:	mov	r3, #2
   1aec8:	bl	22348 <__assert_fail@plt+0x106a8>
   1aecc:	str	r0, [r9, #44]	; 0x2c
   1aed0:	mov	r0, r4
   1aed4:	mov	r1, r9
   1aed8:	mov	r2, r6
   1aedc:	mov	r3, #6
   1aee0:	bl	22348 <__assert_fail@plt+0x106a8>
   1aee4:	str	r0, [r9, #48]	; 0x30
   1aee8:	ldr	r1, [r9, #40]	; 0x28
   1aeec:	cmp	r1, #0
   1aef0:	cmpne	r0, #0
   1aef4:	bne	1af00 <__assert_fail@plt+0x9260>
   1aef8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1aefc:	b	1af18 <__assert_fail@plt+0x9278>
   1af00:	ldr	r0, [r9, #44]	; 0x2c
   1af04:	cmp	r0, #0
   1af08:	beq	1aef8 <__assert_fail@plt+0x9258>
   1af0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1af10:	bl	1a158 <__assert_fail@plt+0x84b8>
   1af14:	mov	r0, #0
   1af18:	str	r0, [fp, #-52]	; 0xffffffcc
   1af1c:	mov	r0, sl
   1af20:	bl	1d84c <__assert_fail@plt+0xbbac>
   1af24:	add	r0, sp, #32
   1af28:	bl	1d89c <__assert_fail@plt+0xbbfc>
   1af2c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1af30:	mov	r4, #0
   1af34:	cmp	r0, #0
   1af38:	bne	1a924 <__assert_fail@plt+0x8c84>
   1af3c:	mov	r0, r4
   1af40:	sub	sp, fp, #28
   1af44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af48:	orr	r0, r6, r8
   1af4c:	tst	r0, #1
   1af50:	beq	1ad2c <__assert_fail@plt+0x908c>
   1af54:	mov	r2, #0
   1af58:	mov	r7, #7
   1af5c:	b	1af64 <__assert_fail@plt+0x92c4>
   1af60:	ldr	r3, [r9]
   1af64:	add	r3, r3, r2, lsl #3
   1af68:	ldr	r6, [r3, #4]
   1af6c:	uxtb	r1, r6
   1af70:	cmp	r1, #5
   1af74:	beq	1af94 <__assert_fail@plt+0x92f4>
   1af78:	cmp	r1, #1
   1af7c:	bne	1af9c <__assert_fail@plt+0x92fc>
   1af80:	ldrsb	r0, [r3]
   1af84:	cmn	r0, #1
   1af88:	bicle	r0, r6, #2097152	; 0x200000
   1af8c:	strle	r0, [r3, #4]
   1af90:	b	1af9c <__assert_fail@plt+0x92fc>
   1af94:	bfi	r6, r7, #0, #8
   1af98:	str	r6, [r3, #4]
   1af9c:	ldr	r0, [r9, #8]
   1afa0:	add	r2, r2, #1
   1afa4:	cmp	r2, r0
   1afa8:	bcc	1af60 <__assert_fail@plt+0x92c0>
   1afac:	ldrb	r2, [r9, #88]	; 0x58
   1afb0:	b	1ad2c <__assert_fail@plt+0x908c>
   1afb4:	mov	r0, r9
   1afb8:	mov	r1, #160	; 0xa0
   1afbc:	mov	r4, #160	; 0xa0
   1afc0:	bl	1a2b4 <__assert_fail@plt+0x8614>
   1afc4:	cmp	r0, #0
   1afc8:	beq	1aff4 <__assert_fail@plt+0x9354>
   1afcc:	mov	r9, r0
   1afd0:	ldr	r0, [sp, #28]
   1afd4:	str	r9, [r0]
   1afd8:	str	r4, [r0, #4]
   1afdc:	b	1a408 <__assert_fail@plt+0x8768>
   1afe0:	mov	r0, #12
   1afe4:	str	r0, [fp, #-52]	; 0xffffffcc
   1afe8:	mov	r0, #0
   1afec:	str	r0, [r9, #52]	; 0x34
   1aff0:	b	1a914 <__assert_fail@plt+0x8c74>
   1aff4:	mov	r4, #12
   1aff8:	b	1af3c <__assert_fail@plt+0x929c>
   1affc:	ldr	sl, [sp, #28]
   1b000:	b	1af18 <__assert_fail@plt+0x9278>
   1b004:	bl	11c64 <abort@plt>
   1b008:	movw	r2, #46028	; 0xb3cc
   1b00c:	movt	r2, #3
   1b010:	ldr	r1, [r2]
   1b014:	str	r0, [r2]
   1b018:	mov	r0, r1
   1b01c:	bx	lr
   1b020:	push	{r4, r5, r6, sl, fp, lr}
   1b024:	add	fp, sp, #16
   1b028:	ldr	r5, [r0, #16]
   1b02c:	ldr	r6, [r0]
   1b030:	mov	r4, r0
   1b034:	mov	r1, #0
   1b038:	mov	r2, #256	; 0x100
   1b03c:	mov	r0, r5
   1b040:	bl	11b08 <memset@plt>
   1b044:	ldr	r1, [r6, #36]	; 0x24
   1b048:	mov	r0, r4
   1b04c:	mov	r2, r5
   1b050:	bl	1b0bc <__assert_fail@plt+0x941c>
   1b054:	ldr	r0, [r6, #36]	; 0x24
   1b058:	ldr	r1, [r6, #40]	; 0x28
   1b05c:	cmp	r0, r1
   1b060:	beq	1b074 <__assert_fail@plt+0x93d4>
   1b064:	mov	r0, r4
   1b068:	mov	r2, r5
   1b06c:	bl	1b0bc <__assert_fail@plt+0x941c>
   1b070:	ldr	r0, [r6, #36]	; 0x24
   1b074:	ldr	r1, [r6, #44]	; 0x2c
   1b078:	cmp	r0, r1
   1b07c:	beq	1b090 <__assert_fail@plt+0x93f0>
   1b080:	mov	r0, r4
   1b084:	mov	r2, r5
   1b088:	bl	1b0bc <__assert_fail@plt+0x941c>
   1b08c:	ldr	r0, [r6, #36]	; 0x24
   1b090:	ldr	r1, [r6, #48]	; 0x30
   1b094:	cmp	r0, r1
   1b098:	beq	1b0a8 <__assert_fail@plt+0x9408>
   1b09c:	mov	r0, r4
   1b0a0:	mov	r2, r5
   1b0a4:	bl	1b0bc <__assert_fail@plt+0x941c>
   1b0a8:	ldrb	r0, [r4, #28]
   1b0ac:	orr	r0, r0, #8
   1b0b0:	strb	r0, [r4, #28]
   1b0b4:	mov	r0, #0
   1b0b8:	pop	{r4, r5, r6, sl, fp, pc}
   1b0bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0c0:	add	fp, sp, #28
   1b0c4:	sub	sp, sp, #308	; 0x134
   1b0c8:	ldr	r8, [r0]
   1b0cc:	str	r0, [sp, #16]
   1b0d0:	mov	sl, #0
   1b0d4:	str	r2, [sp, #28]
   1b0d8:	ldr	r0, [r8, #92]	; 0x5c
   1b0dc:	cmp	r0, #1
   1b0e0:	ldreq	r0, [sp, #16]
   1b0e4:	ldrbeq	r0, [r0, #14]
   1b0e8:	ubfxeq	sl, r0, #6, #1
   1b0ec:	ldr	r0, [r1, #8]
   1b0f0:	cmp	r0, #1
   1b0f4:	blt	1b468 <__assert_fail@plt+0x97c8>
   1b0f8:	add	r0, sp, #32
   1b0fc:	mov	r4, #1
   1b100:	mov	r2, #0
   1b104:	str	r1, [sp, #8]
   1b108:	str	r8, [sp, #20]
   1b10c:	add	r0, r0, #1
   1b110:	str	r0, [sp, #4]
   1b114:	movw	r0, #1
   1b118:	movt	r0, #32
   1b11c:	add	r0, r0, #254	; 0xfe
   1b120:	str	r0, [sp]
   1b124:	ldr	r0, [r1, #12]
   1b128:	str	r2, [sp, #12]
   1b12c:	ldr	r9, [r0, r2, lsl #2]
   1b130:	ldr	r0, [r8]
   1b134:	add	r1, r0, r9, lsl #3
   1b138:	ldrb	r5, [r1, #4]
   1b13c:	sub	r1, r5, #1
   1b140:	cmp	r1, #6
   1b144:	bhi	1b428 <__assert_fail@plt+0x9788>
   1b148:	add	r2, pc, #0
   1b14c:	ldr	pc, [r2, r1, lsl #2]
   1b150:	andeq	fp, r1, ip, ror #2
   1b154:	andeq	fp, r1, r4, asr #8
   1b158:	andeq	fp, r1, r8, ror r2
   1b15c:	andeq	fp, r1, r8, lsr #8
   1b160:	andeq	fp, r1, r4, asr #8
   1b164:	strdeq	fp, [r1], -r0
   1b168:	andeq	fp, r1, r4, asr #8
   1b16c:	ldrb	r0, [r0, r9, lsl #3]
   1b170:	ldr	r1, [sp, #28]
   1b174:	cmp	sl, #0
   1b178:	strb	r4, [r1, r0]
   1b17c:	beq	1b18c <__assert_fail@plt+0x94ec>
   1b180:	bl	118ec <tolower@plt>
   1b184:	ldr	r1, [sp, #28]
   1b188:	strb	r4, [r1, r0]
   1b18c:	ldr	r0, [sp, #16]
   1b190:	ldrb	r0, [r0, #14]
   1b194:	tst	r0, #64	; 0x40
   1b198:	beq	1b428 <__assert_fail@plt+0x9788>
   1b19c:	ldr	r0, [r8, #92]	; 0x5c
   1b1a0:	cmp	r0, #2
   1b1a4:	blt	1b428 <__assert_fail@plt+0x9788>
   1b1a8:	ldr	r0, [r8]
   1b1ac:	add	r1, r9, #1
   1b1b0:	add	r5, sp, #32
   1b1b4:	mov	r3, r9
   1b1b8:	movw	r6, #1
   1b1bc:	mov	r7, #0
   1b1c0:	movt	r6, #32
   1b1c4:	ldrb	r0, [r0, r9, lsl #3]
   1b1c8:	mov	r9, r5
   1b1cc:	ldr	r5, [sp]
   1b1d0:	strb	r0, [sp, #32]
   1b1d4:	ldr	r0, [r8, #8]
   1b1d8:	cmp	r1, r0
   1b1dc:	ldr	r0, [sp, #4]
   1b1e0:	bcs	1b220 <__assert_fail@plt+0x9580>
   1b1e4:	ldr	r0, [sp, #4]
   1b1e8:	ldr	r1, [r8]
   1b1ec:	add	r1, r1, r3, lsl #3
   1b1f0:	ldr	r2, [r1, #12]
   1b1f4:	and	r2, r2, r5
   1b1f8:	cmp	r2, r6
   1b1fc:	bne	1b220 <__assert_fail@plt+0x9580>
   1b200:	ldrb	r1, [r1, #8]
   1b204:	strb	r1, [r0], #1
   1b208:	add	r1, r3, #1
   1b20c:	add	r3, r3, #2
   1b210:	ldr	r2, [r8, #8]
   1b214:	cmp	r3, r2
   1b218:	mov	r3, r1
   1b21c:	bcc	1b1e8 <__assert_fail@plt+0x9548>
   1b220:	sub	r6, r0, r9
   1b224:	sub	r5, fp, #48	; 0x30
   1b228:	sub	r0, fp, #36	; 0x24
   1b22c:	mov	r1, r9
   1b230:	str	r7, [fp, #-44]	; 0xffffffd4
   1b234:	str	r7, [fp, #-48]	; 0xffffffd0
   1b238:	mov	r2, r6
   1b23c:	mov	r3, r5
   1b240:	bl	1a254 <__assert_fail@plt+0x85b4>
   1b244:	cmp	r0, r6
   1b248:	bne	1b428 <__assert_fail@plt+0x9788>
   1b24c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1b250:	bl	11904 <towlower@plt>
   1b254:	mov	r1, r0
   1b258:	mov	r0, r9
   1b25c:	mov	r2, r5
   1b260:	bl	11838 <wcrtomb@plt>
   1b264:	cmn	r0, #1
   1b268:	ldrbne	r0, [sp, #32]
   1b26c:	ldrne	r1, [sp, #28]
   1b270:	strbne	r4, [r1, r0]
   1b274:	b	1b428 <__assert_fail@plt+0x9788>
   1b278:	ldr	r5, [sp, #28]
   1b27c:	mov	r7, #0
   1b280:	mov	r6, #0
   1b284:	str	r9, [sp, #24]
   1b288:	b	1b298 <__assert_fail@plt+0x95f8>
   1b28c:	ldr	r0, [r8]
   1b290:	add	r5, r5, #32
   1b294:	add	r7, r7, #32
   1b298:	ldr	r0, [r0, r9, lsl #3]
   1b29c:	mov	r8, #0
   1b2a0:	ldr	r9, [r0, r6, lsl #2]
   1b2a4:	b	1b2bc <__assert_fail@plt+0x961c>
   1b2a8:	add	r0, r7, r8
   1b2ac:	bl	118ec <tolower@plt>
   1b2b0:	ldr	r1, [sp, #28]
   1b2b4:	strb	r4, [r1, r0]
   1b2b8:	b	1b2cc <__assert_fail@plt+0x962c>
   1b2bc:	tst	r9, r4, lsl r8
   1b2c0:	strbne	r4, [r5, r8]
   1b2c4:	cmpne	sl, #0
   1b2c8:	bne	1b2a8 <__assert_fail@plt+0x9608>
   1b2cc:	add	r8, r8, #1
   1b2d0:	cmp	r8, #32
   1b2d4:	bne	1b2bc <__assert_fail@plt+0x961c>
   1b2d8:	ldr	r8, [sp, #20]
   1b2dc:	ldr	r9, [sp, #24]
   1b2e0:	add	r6, r6, #1
   1b2e4:	cmp	r6, #8
   1b2e8:	bne	1b28c <__assert_fail@plt+0x95ec>
   1b2ec:	b	1b428 <__assert_fail@plt+0x9788>
   1b2f0:	ldr	r6, [r0, r9, lsl #3]
   1b2f4:	ldr	r0, [r8, #92]	; 0x5c
   1b2f8:	cmp	r0, #2
   1b2fc:	blt	1b370 <__assert_fail@plt+0x96d0>
   1b300:	ldr	r0, [r6, #36]	; 0x24
   1b304:	cmp	r0, #0
   1b308:	bne	1b320 <__assert_fail@plt+0x9680>
   1b30c:	ldrb	r0, [r6, #16]
   1b310:	tst	r0, #1
   1b314:	ldreq	r0, [r6, #32]
   1b318:	cmpeq	r0, #0
   1b31c:	beq	1b370 <__assert_fail@plt+0x96d0>
   1b320:	mov	r6, #0
   1b324:	add	r5, sp, #32
   1b328:	sub	r7, fp, #48	; 0x30
   1b32c:	strb	r6, [fp, #-48]	; 0xffffffd0
   1b330:	mov	r0, #0
   1b334:	mov	r1, r7
   1b338:	mov	r2, #1
   1b33c:	mov	r3, r5
   1b340:	str	r6, [sp, #36]	; 0x24
   1b344:	str	r6, [sp, #32]
   1b348:	bl	1a254 <__assert_fail@plt+0x85b4>
   1b34c:	cmn	r0, #2
   1b350:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   1b354:	ldreq	r0, [sp, #28]
   1b358:	strbeq	r4, [r0, r1]
   1b35c:	add	r0, r1, #1
   1b360:	tst	r0, #255	; 0xff
   1b364:	strb	r0, [fp, #-48]	; 0xffffffd0
   1b368:	bne	1b330 <__assert_fail@plt+0x9690>
   1b36c:	b	1b428 <__assert_fail@plt+0x9788>
   1b370:	ldr	r0, [r6, #20]
   1b374:	cmp	r0, #1
   1b378:	blt	1b428 <__assert_fail@plt+0x9788>
   1b37c:	mov	r9, #0
   1b380:	mov	r0, #0
   1b384:	sub	r7, fp, #48	; 0x30
   1b388:	add	r5, sp, #32
   1b38c:	str	r0, [fp, #-44]	; 0xffffffd4
   1b390:	str	r0, [fp, #-48]	; 0xffffffd0
   1b394:	mov	r2, r7
   1b398:	ldr	r0, [r6]
   1b39c:	ldr	r1, [r0, r9, lsl #2]
   1b3a0:	mov	r0, r5
   1b3a4:	bl	11838 <wcrtomb@plt>
   1b3a8:	cmn	r0, #1
   1b3ac:	beq	1b3d0 <__assert_fail@plt+0x9730>
   1b3b0:	ldrb	r0, [sp, #32]
   1b3b4:	ldr	r1, [sp, #28]
   1b3b8:	cmp	sl, #0
   1b3bc:	strb	r4, [r1, r0]
   1b3c0:	beq	1b3d0 <__assert_fail@plt+0x9730>
   1b3c4:	bl	118ec <tolower@plt>
   1b3c8:	ldr	r1, [sp, #28]
   1b3cc:	strb	r4, [r1, r0]
   1b3d0:	ldr	r0, [sp, #16]
   1b3d4:	ldrb	r0, [r0, #14]
   1b3d8:	tst	r0, #64	; 0x40
   1b3dc:	beq	1b418 <__assert_fail@plt+0x9778>
   1b3e0:	ldr	r0, [r8, #92]	; 0x5c
   1b3e4:	cmp	r0, #2
   1b3e8:	blt	1b418 <__assert_fail@plt+0x9778>
   1b3ec:	ldr	r0, [r6]
   1b3f0:	ldr	r0, [r0, r9, lsl #2]
   1b3f4:	bl	11904 <towlower@plt>
   1b3f8:	mov	r1, r0
   1b3fc:	mov	r0, r5
   1b400:	mov	r2, r7
   1b404:	bl	11838 <wcrtomb@plt>
   1b408:	cmn	r0, #1
   1b40c:	ldrbne	r0, [sp, #32]
   1b410:	ldrne	r1, [sp, #28]
   1b414:	strbne	r4, [r1, r0]
   1b418:	ldr	r0, [r6, #20]
   1b41c:	add	r9, r9, #1
   1b420:	cmp	r9, r0
   1b424:	blt	1b380 <__assert_fail@plt+0x96e0>
   1b428:	ldr	r1, [sp, #8]
   1b42c:	ldr	r2, [sp, #12]
   1b430:	ldr	r0, [r1, #8]
   1b434:	add	r2, r2, #1
   1b438:	cmp	r2, r0
   1b43c:	blt	1b124 <__assert_fail@plt+0x9484>
   1b440:	b	1b468 <__assert_fail@plt+0x97c8>
   1b444:	ldr	r0, [sp, #28]
   1b448:	mov	r1, #1
   1b44c:	mov	r2, #256	; 0x100
   1b450:	bl	11b08 <memset@plt>
   1b454:	cmp	r5, #2
   1b458:	ldreq	r1, [sp, #16]
   1b45c:	ldrbeq	r0, [r1, #28]
   1b460:	orreq	r0, r0, #1
   1b464:	strbeq	r0, [r1, #28]
   1b468:	sub	sp, fp, #28
   1b46c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b470:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b474:	add	fp, sp, #24
   1b478:	mov	r4, r0
   1b47c:	mov	r0, #0
   1b480:	mov	r6, r2
   1b484:	mov	r8, r1
   1b488:	str	r0, [r4]
   1b48c:	str	r0, [r4, #4]
   1b490:	str	r0, [r4, #8]
   1b494:	mov	r0, #256	; 0x100
   1b498:	bl	1a224 <__assert_fail@plt+0x8584>
   1b49c:	cmp	r0, #0
   1b4a0:	str	r0, [r4, #16]
   1b4a4:	beq	1b554 <__assert_fail@plt+0x98b4>
   1b4a8:	movw	r0, #45820	; 0xb2fc
   1b4ac:	tst	r6, #1
   1b4b0:	and	r1, r6, #2
   1b4b4:	movt	r0, #3
   1b4b8:	movweq	r0, #710	; 0x2c6
   1b4bc:	movteq	r0, #257	; 0x101
   1b4c0:	tst	r6, #4
   1b4c4:	orr	r5, r0, r1, lsl #21
   1b4c8:	bne	1b4dc <__assert_fail@plt+0x983c>
   1b4cc:	ldrb	r0, [r4, #28]
   1b4d0:	and	r0, r0, #127	; 0x7f
   1b4d4:	strb	r0, [r4, #28]
   1b4d8:	b	1b4fc <__assert_fail@plt+0x985c>
   1b4dc:	ldrb	r0, [r4, #28]
   1b4e0:	mvn	r1, #127	; 0x7f
   1b4e4:	orr	r0, r0, r1
   1b4e8:	movw	r1, #45758	; 0xb2be
   1b4ec:	movt	r1, #323	; 0x143
   1b4f0:	strb	r0, [r4, #28]
   1b4f4:	and	r1, r5, r1
   1b4f8:	orr	r5, r1, #256	; 0x100
   1b4fc:	and	r1, r6, #8
   1b500:	and	r0, r0, #239	; 0xef
   1b504:	mov	r7, #0
   1b508:	orr	r0, r0, r1, lsl #1
   1b50c:	str	r7, [r4, #20]
   1b510:	strb	r0, [r4, #28]
   1b514:	mov	r0, r8
   1b518:	bl	11a9c <strlen@plt>
   1b51c:	mov	r2, r0
   1b520:	mov	r0, r4
   1b524:	mov	r1, r8
   1b528:	mov	r3, r5
   1b52c:	bl	1a3bc <__assert_fail@plt+0x871c>
   1b530:	mov	r5, r0
   1b534:	cmp	r0, #16
   1b538:	movweq	r5, #8
   1b53c:	cmp	r5, #0
   1b540:	bne	1b55c <__assert_fail@plt+0x98bc>
   1b544:	mov	r0, r4
   1b548:	bl	1b020 <__assert_fail@plt+0x9380>
   1b54c:	mov	r0, r7
   1b550:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b554:	mov	r7, #12
   1b558:	b	1b54c <__assert_fail@plt+0x98ac>
   1b55c:	ldr	r0, [r4, #16]
   1b560:	bl	1a158 <__assert_fail@plt+0x84b8>
   1b564:	str	r7, [r4, #16]
   1b568:	mov	r7, r5
   1b56c:	b	1b54c <__assert_fail@plt+0x98ac>
   1b570:	push	{r4, r5, r6, r7, fp, lr}
   1b574:	add	fp, sp, #16
   1b578:	cmp	r0, #17
   1b57c:	bcs	1b5f0 <__assert_fail@plt+0x9950>
   1b580:	movw	r1, #42944	; 0xa7c0
   1b584:	mov	r4, r2
   1b588:	mov	r2, #5
   1b58c:	mov	r5, r3
   1b590:	movt	r1, #2
   1b594:	ldr	r0, [r1, r0, lsl #2]
   1b598:	movw	r1, #42560	; 0xa640
   1b59c:	movt	r1, #2
   1b5a0:	add	r1, r1, r0
   1b5a4:	mov	r0, #0
   1b5a8:	bl	11934 <dcgettext@plt>
   1b5ac:	mov	r6, r0
   1b5b0:	bl	11a9c <strlen@plt>
   1b5b4:	add	r7, r0, #1
   1b5b8:	cmp	r5, #0
   1b5bc:	beq	1b5d8 <__assert_fail@plt+0x9938>
   1b5c0:	cmp	r7, r5
   1b5c4:	mov	r2, r7
   1b5c8:	bhi	1b5e0 <__assert_fail@plt+0x9940>
   1b5cc:	mov	r0, r4
   1b5d0:	mov	r1, r6
   1b5d4:	bl	118e0 <memcpy@plt>
   1b5d8:	mov	r0, r7
   1b5dc:	pop	{r4, r5, r6, r7, fp, pc}
   1b5e0:	sub	r2, r5, #1
   1b5e4:	mov	r0, #0
   1b5e8:	strb	r0, [r4, r2]
   1b5ec:	b	1b5cc <__assert_fail@plt+0x992c>
   1b5f0:	bl	11c64 <abort@plt>
   1b5f4:	push	{r4, r5, fp, lr}
   1b5f8:	add	fp, sp, #8
   1b5fc:	ldr	r5, [r0]
   1b600:	mov	r4, r0
   1b604:	cmp	r5, #0
   1b608:	beq	1b634 <__assert_fail@plt+0x9994>
   1b60c:	movw	r0, #0
   1b610:	movw	r1, #0
   1b614:	movt	r0, #0
   1b618:	movt	r1, #0
   1b61c:	orrs	r0, r1, r0
   1b620:	beq	1b62c <__assert_fail@plt+0x998c>
   1b624:	add	r0, r5, #136	; 0x88
   1b628:	bl	11868 <pthread_mutex_destroy@plt>
   1b62c:	mov	r0, r5
   1b630:	bl	1b65c <__assert_fail@plt+0x99bc>
   1b634:	mov	r5, #0
   1b638:	str	r5, [r4]
   1b63c:	str	r5, [r4, #4]
   1b640:	ldr	r0, [r4, #16]
   1b644:	bl	1a158 <__assert_fail@plt+0x84b8>
   1b648:	str	r5, [r4, #16]
   1b64c:	ldr	r0, [r4, #20]
   1b650:	bl	1a158 <__assert_fail@plt+0x84b8>
   1b654:	str	r5, [r4, #20]
   1b658:	pop	{r4, r5, fp, pc}
   1b65c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b660:	add	fp, sp, #28
   1b664:	sub	sp, sp, #4
   1b668:	mov	sl, r0
   1b66c:	ldr	r0, [r0]
   1b670:	cmp	r0, #0
   1b674:	ldrne	r1, [sl, #8]
   1b678:	cmpne	r1, #0
   1b67c:	bne	1b7c8 <__assert_fail@plt+0x9b28>
   1b680:	ldr	r0, [sl, #12]
   1b684:	bl	1a158 <__assert_fail@plt+0x84b8>
   1b688:	ldr	r0, [sl, #8]
   1b68c:	cmp	r0, #0
   1b690:	beq	1b6fc <__assert_fail@plt+0x9a5c>
   1b694:	add	r7, sl, #20
   1b698:	add	r8, sl, #28
   1b69c:	add	r9, sl, #24
   1b6a0:	mov	r5, #0
   1b6a4:	mov	r6, #8
   1b6a8:	ldr	r0, [r9]
   1b6ac:	cmp	r0, #0
   1b6b0:	beq	1b6bc <__assert_fail@plt+0x9a1c>
   1b6b4:	ldr	r0, [r0, r6]
   1b6b8:	bl	1a158 <__assert_fail@plt+0x84b8>
   1b6bc:	ldr	r0, [r8]
   1b6c0:	cmp	r0, #0
   1b6c4:	beq	1b6d0 <__assert_fail@plt+0x9a30>
   1b6c8:	ldr	r0, [r0, r6]
   1b6cc:	bl	1a158 <__assert_fail@plt+0x84b8>
   1b6d0:	ldr	r0, [r7]
   1b6d4:	cmp	r0, #0
   1b6d8:	beq	1b6e4 <__assert_fail@plt+0x9a44>
   1b6dc:	ldr	r0, [r0, r6]
   1b6e0:	bl	1a158 <__assert_fail@plt+0x84b8>
   1b6e4:	ldr	r0, [sl, #8]
   1b6e8:	add	r5, r5, #1
   1b6ec:	add	r6, r6, #12
   1b6f0:	cmp	r5, r0
   1b6f4:	bcc	1b6a8 <__assert_fail@plt+0x9a08>
   1b6f8:	b	1b708 <__assert_fail@plt+0x9a68>
   1b6fc:	add	r8, sl, #28
   1b700:	add	r9, sl, #24
   1b704:	add	r7, sl, #20
   1b708:	ldr	r0, [r7]
   1b70c:	bl	1a158 <__assert_fail@plt+0x84b8>
   1b710:	ldr	r0, [r9]
   1b714:	bl	1a158 <__assert_fail@plt+0x84b8>
   1b718:	ldr	r0, [r8]
   1b71c:	bl	1a158 <__assert_fail@plt+0x84b8>
   1b720:	ldr	r0, [sl]
   1b724:	bl	1a158 <__assert_fail@plt+0x84b8>
   1b728:	ldr	r5, [sl, #32]
   1b72c:	cmp	r5, #0
   1b730:	beq	1b790 <__assert_fail@plt+0x9af0>
   1b734:	mov	r6, #0
   1b738:	b	1b744 <__assert_fail@plt+0x9aa4>
   1b73c:	ldr	r5, [sl, #32]
   1b740:	add	r6, r6, #1
   1b744:	add	r0, r6, r6, lsl #1
   1b748:	ldr	r0, [r5, r0, lsl #2]!
   1b74c:	add	r7, r5, #8
   1b750:	cmp	r0, #1
   1b754:	blt	1b778 <__assert_fail@plt+0x9ad8>
   1b758:	mov	r4, #0
   1b75c:	ldr	r0, [r7]
   1b760:	ldr	r0, [r0, r4, lsl #2]
   1b764:	bl	1d7b4 <__assert_fail@plt+0xbb14>
   1b768:	ldr	r0, [r5]
   1b76c:	add	r4, r4, #1
   1b770:	cmp	r4, r0
   1b774:	blt	1b75c <__assert_fail@plt+0x9abc>
   1b778:	ldr	r0, [r7]
   1b77c:	bl	1a158 <__assert_fail@plt+0x84b8>
   1b780:	ldr	r0, [sl, #68]	; 0x44
   1b784:	cmp	r6, r0
   1b788:	bcc	1b73c <__assert_fail@plt+0x9a9c>
   1b78c:	ldr	r5, [sl, #32]
   1b790:	mov	r0, r5
   1b794:	bl	1a158 <__assert_fail@plt+0x84b8>
   1b798:	ldr	r0, [sl, #60]	; 0x3c
   1b79c:	movw	r1, #43012	; 0xa804
   1b7a0:	movt	r1, #2
   1b7a4:	cmp	r0, r1
   1b7a8:	beq	1b7b0 <__assert_fail@plt+0x9b10>
   1b7ac:	bl	1a158 <__assert_fail@plt+0x84b8>
   1b7b0:	ldr	r0, [sl, #132]	; 0x84
   1b7b4:	bl	1a158 <__assert_fail@plt+0x84b8>
   1b7b8:	mov	r0, sl
   1b7bc:	sub	sp, fp, #28
   1b7c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b7c4:	b	1a158 <__assert_fail@plt+0x84b8>
   1b7c8:	bl	1d784 <__assert_fail@plt+0xbae4>
   1b7cc:	ldr	r0, [sl, #8]
   1b7d0:	cmp	r0, #2
   1b7d4:	bcc	1b680 <__assert_fail@plt+0x99e0>
   1b7d8:	mov	r5, #1
   1b7dc:	mov	r6, #8
   1b7e0:	ldr	r0, [sl]
   1b7e4:	add	r0, r0, r6
   1b7e8:	bl	1d784 <__assert_fail@plt+0xbae4>
   1b7ec:	ldr	r0, [sl, #8]
   1b7f0:	add	r5, r5, #1
   1b7f4:	add	r6, r6, #8
   1b7f8:	cmp	r5, r0
   1b7fc:	bcc	1b7e0 <__assert_fail@plt+0x9b40>
   1b800:	b	1b680 <__assert_fail@plt+0x99e0>
   1b804:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b808:	add	fp, sp, #28
   1b80c:	sub	sp, sp, #28
   1b810:	ldr	sl, [fp, #8]
   1b814:	mov	r7, #2
   1b818:	cmp	sl, #7
   1b81c:	bhi	1b8f0 <__assert_fail@plt+0x9c50>
   1b820:	mov	r5, r0
   1b824:	ldr	r0, [r0]
   1b828:	mov	r6, r3
   1b82c:	mov	r9, r2
   1b830:	mov	r4, r1
   1b834:	tst	sl, #4
   1b838:	str	r0, [sp, #24]
   1b83c:	bne	1b854 <__assert_fail@plt+0x9bb4>
   1b840:	mov	r0, r4
   1b844:	bl	11a9c <strlen@plt>
   1b848:	mov	r7, r0
   1b84c:	mov	r8, #0
   1b850:	b	1b85c <__assert_fail@plt+0x9bbc>
   1b854:	ldr	r8, [r6]
   1b858:	ldr	r7, [r6, #4]
   1b85c:	movw	r0, #0
   1b860:	movw	r1, #0
   1b864:	movt	r0, #0
   1b868:	movt	r1, #0
   1b86c:	orrs	r0, r1, r0
   1b870:	str	r0, [sp, #20]
   1b874:	beq	1b884 <__assert_fail@plt+0x9be4>
   1b878:	ldr	r0, [sp, #24]
   1b87c:	add	r0, r0, #136	; 0x88
   1b880:	bl	118b0 <pthread_mutex_lock@plt>
   1b884:	ldrb	r0, [r5, #28]
   1b888:	tst	r0, #16
   1b88c:	bne	1b8a0 <__assert_fail@plt+0x9c00>
   1b890:	str	r7, [sp]
   1b894:	stmib	sp, {r7, r9}
   1b898:	str	r6, [sp, #12]
   1b89c:	b	1b8b4 <__assert_fail@plt+0x9c14>
   1b8a0:	mov	r0, #0
   1b8a4:	str	r7, [sp]
   1b8a8:	str	r7, [sp, #4]
   1b8ac:	str	r0, [sp, #8]
   1b8b0:	str	r0, [sp, #12]
   1b8b4:	mov	r0, r5
   1b8b8:	mov	r1, r4
   1b8bc:	mov	r2, r7
   1b8c0:	mov	r3, r8
   1b8c4:	str	sl, [sp, #16]
   1b8c8:	bl	1b8fc <__assert_fail@plt+0x9c5c>
   1b8cc:	mov	r7, r0
   1b8d0:	ldr	r0, [sp, #20]
   1b8d4:	cmp	r0, #0
   1b8d8:	beq	1b8e8 <__assert_fail@plt+0x9c48>
   1b8dc:	ldr	r0, [sp, #24]
   1b8e0:	add	r0, r0, #136	; 0x88
   1b8e4:	bl	117fc <pthread_mutex_unlock@plt>
   1b8e8:	cmp	r7, #0
   1b8ec:	movwne	r7, #1
   1b8f0:	mov	r0, r7
   1b8f4:	sub	sp, fp, #28
   1b8f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b900:	add	fp, sp, #28
   1b904:	sub	sp, sp, #436	; 0x1b4
   1b908:	ldr	r5, [r0]
   1b90c:	str	r2, [sp, #108]	; 0x6c
   1b910:	str	r1, [sp, #104]	; 0x68
   1b914:	mov	r9, r0
   1b918:	add	r0, sp, #112	; 0x70
   1b91c:	mov	r1, #0
   1b920:	mov	r2, #136	; 0x88
   1b924:	mov	r7, r3
   1b928:	mov	r8, #0
   1b92c:	bl	11b08 <memset@plt>
   1b930:	str	r5, [sp, #196]	; 0xc4
   1b934:	ldr	r0, [fp, #8]
   1b938:	mov	sl, #0
   1b93c:	ldr	r1, [r9, #16]
   1b940:	cmp	r1, #0
   1b944:	beq	1b960 <__assert_fail@plt+0x9cc0>
   1b948:	ldrb	r2, [r9, #28]
   1b94c:	and	r2, r2, #9
   1b950:	cmp	r2, #8
   1b954:	movne	r1, #0
   1b958:	subs	sl, r7, r0
   1b95c:	movne	sl, r1
   1b960:	ldr	r2, [r9, #24]
   1b964:	ldr	r6, [fp, #16]
   1b968:	ldr	r1, [r9, #8]
   1b96c:	mov	r4, #1
   1b970:	mvn	r3, r2
   1b974:	cmp	r2, r6
   1b978:	addcc	r8, r3, r6
   1b97c:	cmp	r1, #0
   1b980:	beq	1d1c4 <__assert_fail@plt+0xb524>
   1b984:	ldr	r1, [r5, #36]	; 0x24
   1b988:	cmp	r1, #0
   1b98c:	ldrne	r2, [r5, #40]	; 0x28
   1b990:	cmpne	r2, #0
   1b994:	beq	1d1c4 <__assert_fail@plt+0xb524>
   1b998:	ldr	r3, [r5, #44]	; 0x2c
   1b99c:	cmp	r3, #0
   1b9a0:	ldrne	r6, [r5, #48]	; 0x30
   1b9a4:	cmpne	r6, #0
   1b9a8:	beq	1d1c4 <__assert_fail@plt+0xb524>
   1b9ac:	ldr	r1, [r1, #8]
   1b9b0:	ldr	r6, [r9, #20]
   1b9b4:	cmp	r1, #0
   1b9b8:	beq	1b9c8 <__assert_fail@plt+0x9d28>
   1b9bc:	ldr	lr, [sp, #108]	; 0x6c
   1b9c0:	ldr	ip, [sp, #104]	; 0x68
   1b9c4:	b	1b9dc <__assert_fail@plt+0x9d3c>
   1b9c8:	ldr	r1, [r2, #8]
   1b9cc:	ldr	lr, [sp, #108]	; 0x6c
   1b9d0:	ldr	ip, [sp, #104]	; 0x68
   1b9d4:	cmp	r1, #0
   1b9d8:	beq	1c9ec <__assert_fail@plt+0xad4c>
   1b9dc:	str	r0, [sp, #96]	; 0x60
   1b9e0:	ldr	r0, [fp, #16]
   1b9e4:	subs	r0, r0, r8
   1b9e8:	str	r0, [sp, #92]	; 0x5c
   1b9ec:	mov	r0, #1
   1b9f0:	str	r0, [sp, #68]	; 0x44
   1b9f4:	bne	1ba08 <__assert_fail@plt+0x9d68>
   1b9f8:	ldr	r0, [r5, #76]	; 0x4c
   1b9fc:	cmp	r0, #0
   1ba00:	movwne	r0, #1
   1ba04:	str	r0, [sp, #68]	; 0x44
   1ba08:	ldr	r0, [r9, #12]
   1ba0c:	ldr	r2, [r5, #92]	; 0x5c
   1ba10:	ldr	r1, [r5, #8]
   1ba14:	str	r6, [sp, #176]	; 0xb0
   1ba18:	str	ip, [sp, #112]	; 0x70
   1ba1c:	vdup.32	q8, lr
   1ba20:	str	r2, [sp, #192]	; 0xc0
   1ba24:	ubfx	r3, r0, #22, #1
   1ba28:	and	r0, r0, #4194304	; 0x400000
   1ba2c:	str	r6, [sp, #100]	; 0x64
   1ba30:	add	r1, r1, #1
   1ba34:	orrs	r0, r6, r0
   1ba38:	strb	r3, [sp, #184]	; 0xb8
   1ba3c:	movwne	r0, #1
   1ba40:	cmp	r2, r1
   1ba44:	strb	r0, [sp, #187]	; 0xbb
   1ba48:	add	r0, sp, #112	; 0x70
   1ba4c:	movgt	r1, r2
   1ba50:	add	r2, lr, #1
   1ba54:	ldrb	r6, [r5, #88]	; 0x58
   1ba58:	add	r3, r0, #44	; 0x2c
   1ba5c:	cmp	r2, r1
   1ba60:	vst1.32	{d16-d17}, [r3]
   1ba64:	movlt	r1, r2
   1ba68:	ubfx	r3, r6, #3, #1
   1ba6c:	strb	r3, [sp, #186]	; 0xba
   1ba70:	ubfx	r3, r6, #2, #1
   1ba74:	strb	r3, [sp, #185]	; 0xb9
   1ba78:	bl	1d8d0 <__assert_fail@plt+0xbc30>
   1ba7c:	cmp	r0, #0
   1ba80:	bne	1d23c <__assert_fail@plt+0xb59c>
   1ba84:	add	r1, r5, #96	; 0x60
   1ba88:	ldr	r2, [fp, #24]
   1ba8c:	ldr	r0, [fp, #12]
   1ba90:	str	r1, [sp, #180]	; 0xb4
   1ba94:	ldrb	r1, [r5, #88]	; 0x58
   1ba98:	ubfx	r1, r1, #4, #1
   1ba9c:	ldr	ip, [sp, #108]	; 0x6c
   1baa0:	strb	r1, [sp, #190]	; 0xbe
   1baa4:	mov	r1, #0
   1baa8:	ldrb	r3, [sp, #187]	; 0xbb
   1baac:	cmp	r3, #0
   1bab0:	ldr	r3, [sp, #104]	; 0x68
   1bab4:	bne	1bacc <__assert_fail@plt+0x9e2c>
   1bab8:	str	r3, [sp, #116]	; 0x74
   1babc:	ldr	r1, [r5, #92]	; 0x5c
   1bac0:	cmp	r1, #1
   1bac4:	mov	r1, ip
   1bac8:	movwgt	r1, #0
   1bacc:	str	r1, [sp, #144]	; 0x90
   1bad0:	str	r1, [sp, #140]	; 0x8c
   1bad4:	str	r0, [sp, #168]	; 0xa8
   1bad8:	str	r0, [sp, #164]	; 0xa4
   1badc:	mov	r1, r5
   1bae0:	str	r9, [sp, #44]	; 0x2c
   1bae4:	ldrb	r0, [r9, #28]
   1bae8:	str	r1, [sp, #84]	; 0x54
   1baec:	lsr	r0, r0, #7
   1baf0:	strb	r0, [sp, #189]	; 0xbd
   1baf4:	mov	r0, r5
   1baf8:	ldr	r5, [sp, #100]	; 0x64
   1bafc:	ldr	r6, [r0, #76]!	; 0x4c
   1bb00:	str	r0, [sp, #64]	; 0x40
   1bb04:	mvn	r0, #0
   1bb08:	lsl	r9, r6, #1
   1bb0c:	cmp	r6, #1
   1bb10:	str	r0, [sp, #204]	; 0xcc
   1bb14:	str	r2, [sp, #200]	; 0xc8
   1bb18:	blt	1bb78 <__assert_fail@plt+0x9ed8>
   1bb1c:	movw	r0, #43690	; 0xaaaa
   1bb20:	mov	r4, #12
   1bb24:	movt	r0, #2730	; 0xaaa
   1bb28:	cmp	r9, r0
   1bb2c:	bhi	1d18c <__assert_fail@plt+0xb4ec>
   1bb30:	add	r0, r6, r6, lsl #1
   1bb34:	mov	r5, r8
   1bb38:	lsl	r0, r0, #4
   1bb3c:	bl	1a224 <__assert_fail@plt+0x8584>
   1bb40:	mov	r8, r0
   1bb44:	str	r0, [sp, #228]	; 0xe4
   1bb48:	lsl	r0, r6, #3
   1bb4c:	bl	1a224 <__assert_fail@plt+0x8584>
   1bb50:	cmp	r0, #0
   1bb54:	str	r0, [sp, #244]	; 0xf4
   1bb58:	beq	1d18c <__assert_fail@plt+0xb4ec>
   1bb5c:	cmp	r8, #0
   1bb60:	mov	r8, r5
   1bb64:	ldr	ip, [sp, #108]	; 0x6c
   1bb68:	ldr	r3, [sp, #104]	; 0x68
   1bb6c:	ldr	r5, [sp, #100]	; 0x64
   1bb70:	ldr	r2, [fp, #24]
   1bb74:	beq	1d18c <__assert_fail@plt+0xb4ec>
   1bb78:	mov	r0, #1
   1bb7c:	str	r0, [sp, #232]	; 0xe8
   1bb80:	ldr	r0, [sp, #92]	; 0x5c
   1bb84:	str	r9, [sp, #224]	; 0xe0
   1bb88:	str	r9, [sp, #240]	; 0xf0
   1bb8c:	cmp	r0, #1
   1bb90:	bhi	1bba4 <__assert_fail@plt+0x9f04>
   1bb94:	ldr	r0, [sp, #84]	; 0x54
   1bb98:	ldrb	r0, [r0, #88]	; 0x58
   1bb9c:	tst	r0, #2
   1bba0:	beq	1bbdc <__assert_fail@plt+0x9f3c>
   1bba4:	ldr	r0, [sp, #148]	; 0x94
   1bba8:	mov	r4, #12
   1bbac:	cmn	r0, #-1073741822	; 0xc0000002
   1bbb0:	bhi	1d18c <__assert_fail@plt+0xb4ec>
   1bbb4:	mov	r1, #4
   1bbb8:	add	r0, r1, r0, lsl #2
   1bbbc:	bl	1a224 <__assert_fail@plt+0x8584>
   1bbc0:	ldr	r2, [fp, #24]
   1bbc4:	ldr	r5, [sp, #100]	; 0x64
   1bbc8:	ldr	r3, [sp, #104]	; 0x68
   1bbcc:	ldr	ip, [sp, #108]	; 0x6c
   1bbd0:	cmp	r0, #0
   1bbd4:	str	r0, [sp, #212]	; 0xd4
   1bbd8:	beq	1d18c <__assert_fail@plt+0xb4ec>
   1bbdc:	ldr	r6, [sp, #96]	; 0x60
   1bbe0:	tst	r2, #1
   1bbe4:	mov	r1, #4
   1bbe8:	str	r7, [fp, #-212]	; 0xffffff2c
   1bbec:	str	r8, [sp, #36]	; 0x24
   1bbf0:	mov	r9, r7
   1bbf4:	mov	r0, #4
   1bbf8:	movweq	r1, #6
   1bbfc:	str	r1, [sp, #172]	; 0xac
   1bc00:	mov	r1, #1
   1bc04:	cmp	r6, r7
   1bc08:	mov	r8, r6
   1bc0c:	mvnlt	r1, #0
   1bc10:	movlt	r8, r7
   1bc14:	movlt	r9, r6
   1bc18:	cmp	sl, #0
   1bc1c:	str	r1, [sp, #80]	; 0x50
   1bc20:	ldr	r1, [sp, #84]	; 0x54
   1bc24:	ldr	r1, [r1, #92]	; 0x5c
   1bc28:	str	r1, [sp, #76]	; 0x4c
   1bc2c:	beq	1bc70 <__assert_fail@plt+0x9fd0>
   1bc30:	cmp	r1, #1
   1bc34:	beq	1bc54 <__assert_fail@plt+0x9fb4>
   1bc38:	ldr	r0, [sp, #44]	; 0x2c
   1bc3c:	ldr	r0, [r0, #12]
   1bc40:	and	r0, r0, #4194304	; 0x400000
   1bc44:	orr	r0, r5, r0
   1bc48:	clz	r0, r0
   1bc4c:	lsr	r0, r0, #5
   1bc50:	lsl	r0, r0, #2
   1bc54:	cmp	r5, #0
   1bc58:	mov	r1, r5
   1bc5c:	movwne	r1, #1
   1bc60:	cmp	r6, r7
   1bc64:	orrge	r1, r1, #2
   1bc68:	orr	r0, r1, r0
   1bc6c:	b	1bc74 <__assert_fail@plt+0x9fd4>
   1bc70:	mov	r0, #8
   1bc74:	add	r1, sp, #112	; 0x70
   1bc78:	cmp	r6, r7
   1bc7c:	sub	lr, r0, #4
   1bc80:	str	r9, [sp, #56]	; 0x38
   1bc84:	add	r1, r1, #32
   1bc88:	str	lr, [sp, #60]	; 0x3c
   1bc8c:	str	r1, [sp, #32]
   1bc90:	sub	r1, fp, #212	; 0xd4
   1bc94:	movwlt	r1, #0
   1bc98:	cmp	r1, #0
   1bc9c:	str	r1, [sp, #48]	; 0x30
   1bca0:	movwne	r1, #1
   1bca4:	str	r1, [sp, #52]	; 0x34
   1bca8:	sub	r1, fp, #208	; 0xd0
   1bcac:	add	r1, r1, #16
   1bcb0:	str	r1, [sp, #40]	; 0x28
   1bcb4:	cmp	lr, #4
   1bcb8:	bhi	1bd94 <__assert_fail@plt+0xa0f4>
   1bcbc:	add	r0, pc, #0
   1bcc0:	ldr	pc, [r0, lr, lsl #2]
   1bcc4:	ldrdeq	fp, [r1], -r8
   1bcc8:	ldrdeq	fp, [r1], -r8
   1bccc:	andeq	fp, r1, ip, asr #26
   1bcd0:	andeq	fp, r1, r4, lsr #26
   1bcd4:	andeq	fp, r1, ip, lsl lr
   1bcd8:	mov	r4, #1
   1bcdc:	cmp	r7, r9
   1bce0:	blt	1d18c <__assert_fail@plt+0xb4ec>
   1bce4:	mov	r0, #0
   1bce8:	cmp	r7, ip
   1bcec:	ldrblt	r0, [r3, r7]
   1bcf0:	cmp	r5, #0
   1bcf4:	ldrbne	r0, [r5, r0]
   1bcf8:	ldrb	r0, [sl, r0]
   1bcfc:	cmp	r0, #0
   1bd00:	bne	1be1c <__assert_fail@plt+0xa17c>
   1bd04:	sub	r0, r7, #1
   1bd08:	cmp	r7, r9
   1bd0c:	mov	r7, r0
   1bd10:	str	r0, [fp, #-212]	; 0xffffff2c
   1bd14:	bgt	1bce4 <__assert_fail@plt+0xa044>
   1bd18:	b	1d18c <__assert_fail@plt+0xb4ec>
   1bd1c:	add	r7, r7, #1
   1bd20:	str	r7, [fp, #-212]	; 0xffffff2c
   1bd24:	cmp	r7, r8
   1bd28:	bge	1bd64 <__assert_fail@plt+0xa0c4>
   1bd2c:	ldrb	r0, [r3, r7]
   1bd30:	ldrb	r0, [r5, r0]
   1bd34:	ldrb	r0, [sl, r0]
   1bd38:	cmp	r0, #0
   1bd3c:	beq	1bd1c <__assert_fail@plt+0xa07c>
   1bd40:	b	1bd64 <__assert_fail@plt+0xa0c4>
   1bd44:	add	r7, r7, #1
   1bd48:	str	r7, [fp, #-212]	; 0xffffff2c
   1bd4c:	cmp	r7, r8
   1bd50:	bge	1bd64 <__assert_fail@plt+0xa0c4>
   1bd54:	ldrb	r0, [r3, r7]
   1bd58:	ldrb	r0, [sl, r0]
   1bd5c:	cmp	r0, #0
   1bd60:	beq	1bd44 <__assert_fail@plt+0xa0a4>
   1bd64:	cmp	r7, r8
   1bd68:	bne	1be1c <__assert_fail@plt+0xa17c>
   1bd6c:	mov	r0, #0
   1bd70:	cmp	r8, ip
   1bd74:	mov	r7, r8
   1bd78:	ldrblt	r0, [r3, r8]
   1bd7c:	cmp	r5, #0
   1bd80:	ldrbne	r0, [r5, r0]
   1bd84:	ldrb	r0, [sl, r0]
   1bd88:	cmp	r0, #0
   1bd8c:	bne	1be1c <__assert_fail@plt+0xa17c>
   1bd90:	b	1d24c <__assert_fail@plt+0xb5ac>
   1bd94:	ldr	r0, [sp, #136]	; 0x88
   1bd98:	ldr	r5, [sp, #80]	; 0x50
   1bd9c:	ldr	r3, [sp, #144]	; 0x90
   1bda0:	sub	r1, r7, r0
   1bda4:	cmp	r1, r3
   1bda8:	bcs	1bdec <__assert_fail@plt+0xa14c>
   1bdac:	ldr	r3, [sp, #140]	; 0x8c
   1bdb0:	mov	r6, #0
   1bdb4:	cmp	r1, r3
   1bdb8:	ldrcc	r3, [sp, #116]	; 0x74
   1bdbc:	ldrbcc	r6, [r3, r1]
   1bdc0:	ldrb	r1, [sl, r6]
   1bdc4:	cmp	r1, #0
   1bdc8:	bne	1be1c <__assert_fail@plt+0xa17c>
   1bdcc:	add	r7, r7, r5
   1bdd0:	mov	r4, #1
   1bdd4:	cmp	r7, r9
   1bdd8:	str	r7, [fp, #-212]	; 0xffffff2c
   1bddc:	blt	1d18c <__assert_fail@plt+0xb4ec>
   1bde0:	cmp	r7, r8
   1bde4:	ble	1bd9c <__assert_fail@plt+0xa0fc>
   1bde8:	b	1d18c <__assert_fail@plt+0xb4ec>
   1bdec:	add	r0, sp, #112	; 0x70
   1bdf0:	mov	r1, r7
   1bdf4:	mov	r6, lr
   1bdf8:	bl	2278c <__assert_fail@plt+0x10aec>
   1bdfc:	cmp	r0, #0
   1be00:	bne	1d1e0 <__assert_fail@plt+0xb540>
   1be04:	ldr	r0, [sp, #136]	; 0x88
   1be08:	ldr	r7, [fp, #-212]	; 0xffffff2c
   1be0c:	ldr	r2, [fp, #24]
   1be10:	mov	lr, r6
   1be14:	sub	r1, r7, r0
   1be18:	b	1bdac <__assert_fail@plt+0xa10c>
   1be1c:	add	r0, sp, #112	; 0x70
   1be20:	mov	r1, r7
   1be24:	bl	2278c <__assert_fail@plt+0x10aec>
   1be28:	cmp	r0, #0
   1be2c:	bne	1d1e0 <__assert_fail@plt+0xb540>
   1be30:	ldr	r0, [sp, #76]	; 0x4c
   1be34:	cmp	r0, #1
   1be38:	ldrne	r0, [sp, #140]	; 0x8c
   1be3c:	cmpne	r0, #0
   1be40:	bne	1be78 <__assert_fail@plt+0xa1d8>
   1be44:	mov	r0, #0
   1be48:	str	r0, [sp, #220]	; 0xdc
   1be4c:	str	r0, [sp, #232]	; 0xe8
   1be50:	str	r0, [sp, #216]	; 0xd8
   1be54:	str	r0, [fp, #-64]	; 0xffffffc0
   1be58:	ldr	r4, [sp, #196]	; 0xc4
   1be5c:	ldr	r3, [sp, #152]	; 0x98
   1be60:	ldr	r7, [r4, #36]	; 0x24
   1be64:	ldrsb	r0, [r7, #52]	; 0x34
   1be68:	cmn	r0, #1
   1be6c:	ble	1be8c <__assert_fail@plt+0xa1ec>
   1be70:	sub	r5, fp, #208	; 0xd0
   1be74:	b	1bef8 <__assert_fail@plt+0xa258>
   1be78:	ldr	r0, [sp, #120]	; 0x78
   1be7c:	ldr	r0, [r0]
   1be80:	cmn	r0, #1
   1be84:	bne	1be44 <__assert_fail@plt+0xa1a4>
   1be88:	b	1c700 <__assert_fail@plt+0xaa60>
   1be8c:	ldr	r2, [sp, #200]	; 0xc8
   1be90:	sub	r1, r3, #1
   1be94:	add	r0, sp, #112	; 0x70
   1be98:	mov	r6, r3
   1be9c:	bl	22fb8 <__assert_fail@plt+0x11318>
   1bea0:	tst	r0, #1
   1bea4:	sub	r5, fp, #208	; 0xd0
   1bea8:	bne	1bef0 <__assert_fail@plt+0xa250>
   1beac:	mov	r3, r0
   1beb0:	cmp	r0, #0
   1beb4:	beq	1bef4 <__assert_fail@plt+0xa254>
   1beb8:	ands	r1, r3, #2
   1bebc:	and	r0, r3, #4
   1bec0:	cmpne	r0, #0
   1bec4:	bne	1c740 <__assert_fail@plt+0xaaa0>
   1bec8:	cmp	r1, #0
   1becc:	bne	1c748 <__assert_fail@plt+0xaaa8>
   1bed0:	cmp	r0, #0
   1bed4:	beq	1bef4 <__assert_fail@plt+0xa254>
   1bed8:	ldr	r2, [r7, #40]	; 0x28
   1bedc:	sub	r0, fp, #64	; 0x40
   1bee0:	mov	r1, r4
   1bee4:	bl	22348 <__assert_fail@plt+0x106a8>
   1bee8:	mov	r7, r0
   1beec:	b	1bef4 <__assert_fail@plt+0xa254>
   1bef0:	ldr	r7, [r4, #40]	; 0x28
   1bef4:	mov	r3, r6
   1bef8:	ldr	r1, [sp, #52]	; 0x34
   1befc:	cmp	r7, #0
   1bf00:	beq	1d1d8 <__assert_fail@plt+0xb538>
   1bf04:	ldr	r0, [sp, #212]	; 0xd4
   1bf08:	mov	ip, r1
   1bf0c:	cmp	r0, #0
   1bf10:	beq	1bf28 <__assert_fail@plt+0xa288>
   1bf14:	str	r7, [r0, r3, lsl #2]
   1bf18:	mov	ip, r1
   1bf1c:	ldr	r0, [r4, #76]	; 0x4c
   1bf20:	cmp	r0, #0
   1bf24:	bne	1c798 <__assert_fail@plt+0xaaf8>
   1bf28:	ldrb	r0, [r7, #52]	; 0x34
   1bf2c:	sxtb	r5, r0
   1bf30:	tst	r0, #16
   1bf34:	bne	1c750 <__assert_fail@plt+0xaab0>
   1bf38:	mov	r0, #0
   1bf3c:	mvn	r2, #0
   1bf40:	str	r0, [sp, #72]	; 0x48
   1bf44:	ldr	r6, [sp, #152]	; 0x98
   1bf48:	ldr	r0, [sp, #168]	; 0xa8
   1bf4c:	str	r2, [sp, #96]	; 0x60
   1bf50:	cmp	r0, r6
   1bf54:	ble	1bf60 <__assert_fail@plt+0xa2c0>
   1bf58:	ldr	r1, [sp, #48]	; 0x30
   1bf5c:	b	1c244 <__assert_fail@plt+0xa5a4>
   1bf60:	ldr	r1, [sp, #48]	; 0x30
   1bf64:	b	1c3fc <__assert_fail@plt+0xa75c>
   1bf68:	ldr	r0, [sp, #212]	; 0xd4
   1bf6c:	ldr	r2, [sp, #152]	; 0x98
   1bf70:	ldr	r1, [sp, #216]	; 0xd8
   1bf74:	add	r2, r2, #1
   1bf78:	sub	r3, r2, #1
   1bf7c:	cmp	r3, r1
   1bf80:	bge	1c3f4 <__assert_fail@plt+0xa754>
   1bf84:	str	r2, [sp, #152]	; 0x98
   1bf88:	ldr	r3, [r0, r2, lsl #2]
   1bf8c:	add	r2, r2, #1
   1bf90:	cmp	r3, #0
   1bf94:	beq	1bf78 <__assert_fail@plt+0xa2d8>
   1bf98:	sub	r0, fp, #64	; 0x40
   1bf9c:	add	r1, sp, #112	; 0x70
   1bfa0:	mov	r2, #0
   1bfa4:	bl	239a0 <__assert_fail@plt+0x11d00>
   1bfa8:	cmp	r0, #0
   1bfac:	mov	r7, r0
   1bfb0:	ldreq	r0, [fp, #-64]	; 0xffffffc0
   1bfb4:	cmpeq	r0, #0
   1bfb8:	beq	1bf68 <__assert_fail@plt+0xa2c8>
   1bfbc:	cmp	r7, #0
   1bfc0:	mov	r3, r5
   1bfc4:	mov	ip, r6
   1bfc8:	bne	1c324 <__assert_fail@plt+0xa684>
   1bfcc:	b	1c3f8 <__assert_fail@plt+0xa758>
   1bfd0:	ldr	r0, [r4, #8]
   1bfd4:	cmp	r0, #1
   1bfd8:	blt	1c1bc <__assert_fail@plt+0xa51c>
   1bfdc:	ldr	r7, [sp, #196]	; 0xc4
   1bfe0:	mov	r5, #0
   1bfe4:	str	r3, [sp, #12]
   1bfe8:	str	ip, [sp, #24]
   1bfec:	str	r4, [sp, #8]
   1bff0:	str	r7, [sp, #16]
   1bff4:	ldr	r0, [r4, #12]
   1bff8:	ldr	r1, [r0, r5, lsl #2]
   1bffc:	ldr	r0, [r7]
   1c000:	add	r0, r0, r1, lsl #3
   1c004:	ldr	r6, [r0, #4]
   1c008:	tst	r6, #1048576	; 0x100000
   1c00c:	beq	1c1ac <__assert_fail@plt+0xa50c>
   1c010:	ldr	lr, [sp, #152]	; 0x98
   1c014:	movw	r0, #65280	; 0xff00
   1c018:	str	r1, [sp, #28]
   1c01c:	movt	r0, #3
   1c020:	tst	r6, r0
   1c024:	beq	1c094 <__assert_fail@plt+0xa3f4>
   1c028:	ldr	r2, [sp, #200]	; 0xc8
   1c02c:	add	r0, sp, #112	; 0x70
   1c030:	mov	r1, lr
   1c034:	mov	r7, r3
   1c038:	str	lr, [sp, #20]
   1c03c:	bl	22fb8 <__assert_fail@plt+0x11318>
   1c040:	mov	r3, r7
   1c044:	ldr	lr, [sp, #20]
   1c048:	ldr	r1, [sp, #28]
   1c04c:	ldr	ip, [sp, #24]
   1c050:	ldr	r7, [sp, #16]
   1c054:	and	r2, r0, #1
   1c058:	tst	r6, #1024	; 0x400
   1c05c:	beq	1c068 <__assert_fail@plt+0xa3c8>
   1c060:	cmp	r2, #0
   1c064:	beq	1c1ac <__assert_fail@plt+0xa50c>
   1c068:	tst	r6, #2048	; 0x800
   1c06c:	cmpne	r2, #0
   1c070:	bne	1c1ac <__assert_fail@plt+0xa50c>
   1c074:	tst	r6, #8192	; 0x2000
   1c078:	beq	1c084 <__assert_fail@plt+0xa3e4>
   1c07c:	ands	r2, r0, #2
   1c080:	beq	1c1ac <__assert_fail@plt+0xa50c>
   1c084:	tst	r6, #32768	; 0x8000
   1c088:	beq	1c094 <__assert_fail@plt+0xa3f4>
   1c08c:	ands	r0, r0, #8
   1c090:	beq	1c1ac <__assert_fail@plt+0xa50c>
   1c094:	mov	r0, r7
   1c098:	add	r2, sp, #112	; 0x70
   1c09c:	mov	r3, lr
   1c0a0:	bl	24c40 <__assert_fail@plt+0x12fa0>
   1c0a4:	ldr	r4, [sp, #8]
   1c0a8:	ldr	ip, [sp, #24]
   1c0ac:	ldr	r3, [sp, #12]
   1c0b0:	cmp	r0, #0
   1c0b4:	beq	1c1ac <__assert_fail@plt+0xa50c>
   1c0b8:	ldr	r1, [sp, #152]	; 0x98
   1c0bc:	ldr	r2, [sp, #232]	; 0xe8
   1c0c0:	cmp	r2, r0
   1c0c4:	add	r6, r1, r0
   1c0c8:	movlt	r2, r0
   1c0cc:	add	r0, sp, #112	; 0x70
   1c0d0:	mov	r1, r6
   1c0d4:	str	r2, [sp, #232]	; 0xe8
   1c0d8:	bl	23d80 <__assert_fail@plt+0x120e0>
   1c0dc:	cmp	r0, #0
   1c0e0:	str	r0, [fp, #-48]	; 0xffffffd0
   1c0e4:	bne	1c224 <__assert_fail@plt+0xa584>
   1c0e8:	ldr	r0, [sp, #212]	; 0xd4
   1c0ec:	ldr	r2, [sp, #28]
   1c0f0:	ldr	r1, [r7, #24]
   1c0f4:	ldr	r4, [r0, r6, lsl #2]
   1c0f8:	ldr	r0, [r7, #12]
   1c0fc:	ldr	r0, [r0, r2, lsl #2]
   1c100:	cmp	r4, #0
   1c104:	add	r0, r0, r0, lsl #1
   1c108:	add	r2, r1, r0, lsl #2
   1c10c:	beq	1c130 <__assert_fail@plt+0xa490>
   1c110:	ldr	r1, [r4, #40]	; 0x28
   1c114:	sub	r7, fp, #208	; 0xd0
   1c118:	mov	r0, r7
   1c11c:	bl	23af4 <__assert_fail@plt+0x11e54>
   1c120:	cmp	r0, #0
   1c124:	str	r0, [fp, #-48]	; 0xffffffd0
   1c128:	beq	1c144 <__assert_fail@plt+0xa4a4>
   1c12c:	b	1c224 <__assert_fail@plt+0xa584>
   1c130:	vldr	d16, [r2]
   1c134:	ldr	r0, [r2, #8]
   1c138:	sub	r7, fp, #208	; 0xd0
   1c13c:	str	r0, [fp, #-200]	; 0xffffff38
   1c140:	vstr	d16, [fp, #-208]	; 0xffffff30
   1c144:	ldr	r2, [sp, #200]	; 0xc8
   1c148:	sub	r1, r6, #1
   1c14c:	add	r0, sp, #112	; 0x70
   1c150:	bl	22fb8 <__assert_fail@plt+0x11318>
   1c154:	ldr	r1, [sp, #16]
   1c158:	mov	r3, r0
   1c15c:	sub	r0, fp, #48	; 0x30
   1c160:	mov	r2, r7
   1c164:	bl	22348 <__assert_fail@plt+0x106a8>
   1c168:	ldr	r1, [sp, #212]	; 0xd4
   1c16c:	cmp	r4, #0
   1c170:	str	r0, [r1, r6, lsl #2]
   1c174:	beq	1c180 <__assert_fail@plt+0xa4e0>
   1c178:	ldr	r0, [fp, #-200]	; 0xffffff38
   1c17c:	bl	1a158 <__assert_fail@plt+0x84b8>
   1c180:	ldr	r0, [sp, #212]	; 0xd4
   1c184:	ldr	r3, [sp, #12]
   1c188:	ldr	ip, [sp, #24]
   1c18c:	ldr	r4, [sp, #8]
   1c190:	ldr	r7, [sp, #16]
   1c194:	ldr	r0, [r0, r6, lsl #2]
   1c198:	cmp	r0, #0
   1c19c:	bne	1c1ac <__assert_fail@plt+0xa50c>
   1c1a0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1c1a4:	cmp	r0, #0
   1c1a8:	bne	1c238 <__assert_fail@plt+0xa598>
   1c1ac:	ldr	r0, [r4, #8]
   1c1b0:	add	r5, r5, #1
   1c1b4:	cmp	r5, r0
   1c1b8:	blt	1bff4 <__assert_fail@plt+0xa354>
   1c1bc:	mov	r0, #0
   1c1c0:	str	r0, [fp, #-64]	; 0xffffffc0
   1c1c4:	b	1c284 <__assert_fail@plt+0xa5e4>
   1c1c8:	add	r1, r6, #2
   1c1cc:	add	r0, sp, #112	; 0x70
   1c1d0:	mov	r5, r3
   1c1d4:	mov	r6, ip
   1c1d8:	bl	238c8 <__assert_fail@plt+0x11c28>
   1c1dc:	cmp	r0, #0
   1c1e0:	str	r0, [fp, #-64]	; 0xffffffc0
   1c1e4:	bne	1d1d8 <__assert_fail@plt+0xb538>
   1c1e8:	mov	r3, r5
   1c1ec:	ldrb	r5, [r4, #52]	; 0x34
   1c1f0:	mov	ip, r6
   1c1f4:	b	1c27c <__assert_fail@plt+0xa5dc>
   1c1f8:	ldr	r0, [sp, #152]	; 0x98
   1c1fc:	ldr	r2, [sp, #200]	; 0xc8
   1c200:	sub	r1, r0, #1
   1c204:	add	r0, sp, #112	; 0x70
   1c208:	bl	22fb8 <__assert_fail@plt+0x11318>
   1c20c:	bfi	r5, r0, #8, #1
   1c210:	ldr	r3, [sp, #12]
   1c214:	ldr	ip, [sp, #24]
   1c218:	ldr	r4, [sp, #8]
   1c21c:	ldr	r7, [r6, r5, lsl #2]
   1c220:	b	1c2ec <__assert_fail@plt+0xa64c>
   1c224:	ldr	r2, [sp, #72]	; 0x48
   1c228:	ldr	r3, [sp, #12]
   1c22c:	ldr	ip, [sp, #24]
   1c230:	ldr	r4, [sp, #8]
   1c234:	str	r2, [sp, #72]	; 0x48
   1c238:	mov	r7, #0
   1c23c:	str	r0, [fp, #-64]	; 0xffffffc0
   1c240:	b	1c2ec <__assert_fail@plt+0xa64c>
   1c244:	str	r1, [sp, #88]	; 0x58
   1c248:	ldr	r1, [sp, #148]	; 0x94
   1c24c:	ldr	r0, [sp, #160]	; 0xa0
   1c250:	add	r9, r6, #1
   1c254:	mov	r4, r7
   1c258:	cmp	r9, r1
   1c25c:	blt	1c268 <__assert_fail@plt+0xa5c8>
   1c260:	cmp	r1, r0
   1c264:	blt	1c1c8 <__assert_fail@plt+0xa528>
   1c268:	ldr	r1, [sp, #140]	; 0x8c
   1c26c:	cmp	r9, r1
   1c270:	blt	1c27c <__assert_fail@plt+0xa5dc>
   1c274:	cmp	r1, r0
   1c278:	blt	1c1c8 <__assert_fail@plt+0xa528>
   1c27c:	tst	r5, #32
   1c280:	bne	1bfd0 <__assert_fail@plt+0xa330>
   1c284:	ldr	r1, [sp, #152]	; 0x98
   1c288:	ldr	r0, [sp, #116]	; 0x74
   1c28c:	add	r2, r1, #1
   1c290:	str	r2, [sp, #152]	; 0x98
   1c294:	ldrb	r5, [r0, r1]
   1c298:	ldr	r0, [r4, #44]	; 0x2c
   1c29c:	cmp	r0, #0
   1c2a0:	bne	1c2e8 <__assert_fail@plt+0xa648>
   1c2a4:	ldr	r6, [r4, #48]	; 0x30
   1c2a8:	str	ip, [sp, #24]
   1c2ac:	str	r3, [sp, #12]
   1c2b0:	str	r4, [sp, #8]
   1c2b4:	cmp	r6, #0
   1c2b8:	bne	1c1f8 <__assert_fail@plt+0xa558>
   1c2bc:	ldr	r6, [sp, #8]
   1c2c0:	ldr	r0, [sp, #196]	; 0xc4
   1c2c4:	mov	r1, r6
   1c2c8:	bl	25064 <__assert_fail@plt+0x133c4>
   1c2cc:	ldr	r3, [sp, #12]
   1c2d0:	ldr	ip, [sp, #24]
   1c2d4:	mov	r4, r6
   1c2d8:	cmp	r0, #0
   1c2dc:	bne	1c298 <__assert_fail@plt+0xa5f8>
   1c2e0:	mov	r0, #12
   1c2e4:	b	1c238 <__assert_fail@plt+0xa598>
   1c2e8:	ldr	r7, [r0, r5, lsl #2]
   1c2ec:	ldr	r0, [sp, #212]	; 0xd4
   1c2f0:	cmp	r0, #0
   1c2f4:	beq	1c31c <__assert_fail@plt+0xa67c>
   1c2f8:	sub	r0, fp, #64	; 0x40
   1c2fc:	add	r1, sp, #112	; 0x70
   1c300:	mov	r2, r7
   1c304:	mov	r5, r3
   1c308:	mov	r6, ip
   1c30c:	bl	239a0 <__assert_fail@plt+0x11d00>
   1c310:	mov	ip, r6
   1c314:	mov	r3, r5
   1c318:	mov	r7, r0
   1c31c:	cmp	r7, #0
   1c320:	beq	1c354 <__assert_fail@plt+0xa6b4>
   1c324:	sub	r0, r4, r7
   1c328:	clz	r0, r0
   1c32c:	lsr	r0, r0, #5
   1c330:	ands	ip, ip, r0
   1c334:	ldrb	r0, [r7, #52]	; 0x34
   1c338:	movne	r3, r9
   1c33c:	sxtb	r5, r0
   1c340:	tst	r0, #16
   1c344:	bne	1c394 <__assert_fail@plt+0xa6f4>
   1c348:	ldr	r6, [sp, #152]	; 0x98
   1c34c:	ldr	r1, [sp, #88]	; 0x58
   1c350:	b	1c3e4 <__assert_fail@plt+0xa744>
   1c354:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1c358:	cmp	r0, #0
   1c35c:	bne	1d1d8 <__assert_fail@plt+0xb538>
   1c360:	ldr	r0, [sp, #72]	; 0x48
   1c364:	ldr	r1, [sp, #68]	; 0x44
   1c368:	clz	r0, r0
   1c36c:	lsr	r0, r0, #5
   1c370:	orr	r0, r1, r0
   1c374:	cmp	r0, #1
   1c378:	bne	1c3f8 <__assert_fail@plt+0xa758>
   1c37c:	ldr	r0, [sp, #212]	; 0xd4
   1c380:	cmp	r0, #0
   1c384:	beq	1c3f8 <__assert_fail@plt+0xa758>
   1c388:	mov	r6, ip
   1c38c:	mov	r5, r3
   1c390:	b	1bf6c <__assert_fail@plt+0xa2cc>
   1c394:	ldr	r6, [sp, #152]	; 0x98
   1c398:	cmn	r5, #1
   1c39c:	bgt	1c3c8 <__assert_fail@plt+0xa728>
   1c3a0:	add	r0, sp, #112	; 0x70
   1c3a4:	mov	r1, r7
   1c3a8:	mov	r2, r6
   1c3ac:	mov	r4, r3
   1c3b0:	mov	r9, ip
   1c3b4:	bl	22e50 <__assert_fail@plt+0x111b0>
   1c3b8:	mov	ip, r9
   1c3bc:	mov	r3, r4
   1c3c0:	cmp	r0, #0
   1c3c4:	beq	1c34c <__assert_fail@plt+0xa6ac>
   1c3c8:	ldr	r0, [sp, #68]	; 0x44
   1c3cc:	cmp	r0, #0
   1c3d0:	beq	1c824 <__assert_fail@plt+0xab84>
   1c3d4:	mov	r1, #0
   1c3d8:	mov	r0, #1
   1c3dc:	str	r6, [sp, #96]	; 0x60
   1c3e0:	str	r0, [sp, #72]	; 0x48
   1c3e4:	ldr	r0, [sp, #168]	; 0xa8
   1c3e8:	cmp	r0, r6
   1c3ec:	bgt	1c244 <__assert_fail@plt+0xa5a4>
   1c3f0:	b	1c3fc <__assert_fail@plt+0xa75c>
   1c3f4:	mov	r3, r5
   1c3f8:	ldr	r1, [sp, #88]	; 0x58
   1c3fc:	cmp	r1, #0
   1c400:	ldr	r6, [sp, #96]	; 0x60
   1c404:	sub	r5, fp, #208	; 0xd0
   1c408:	ldrne	r0, [r1]
   1c40c:	addne	r0, r0, r3
   1c410:	strne	r0, [r1]
   1c414:	cmn	r6, #1
   1c418:	beq	1c6f8 <__assert_fail@plt+0xaa58>
   1c41c:	mov	r4, #12
   1c420:	cmn	r6, #2
   1c424:	beq	1d18c <__assert_fail@plt+0xb4ec>
   1c428:	ldr	r0, [sp, #92]	; 0x5c
   1c42c:	str	r6, [sp, #204]	; 0xcc
   1c430:	cmp	r0, #2
   1c434:	bcc	1c488 <__assert_fail@plt+0xa7e8>
   1c438:	ldr	r0, [sp, #44]	; 0x2c
   1c43c:	ldrb	r0, [r0, #28]
   1c440:	ands	r0, r0, #16
   1c444:	bne	1c488 <__assert_fail@plt+0xa7e8>
   1c448:	ldr	r0, [sp, #212]	; 0xd4
   1c44c:	mov	r2, r6
   1c450:	ldr	r1, [r0, r6, lsl #2]
   1c454:	add	r0, sp, #112	; 0x70
   1c458:	bl	22e50 <__assert_fail@plt+0x111b0>
   1c45c:	str	r0, [sp, #88]	; 0x58
   1c460:	str	r0, [sp, #208]	; 0xd0
   1c464:	ldr	r0, [sp, #84]	; 0x54
   1c468:	ldrb	r0, [r0, #88]	; 0x58
   1c46c:	tst	r0, #1
   1c470:	bne	1c4b4 <__assert_fail@plt+0xa814>
   1c474:	ldr	r0, [sp, #64]	; 0x40
   1c478:	ldr	r0, [r0]
   1c47c:	cmp	r0, #0
   1c480:	bne	1c4b4 <__assert_fail@plt+0xa814>
   1c484:	b	1c87c <__assert_fail@plt+0xabdc>
   1c488:	ldr	r0, [sp, #64]	; 0x40
   1c48c:	ldr	r0, [r0]
   1c490:	cmp	r0, #0
   1c494:	beq	1c87c <__assert_fail@plt+0xabdc>
   1c498:	ldr	r0, [sp, #212]	; 0xd4
   1c49c:	mov	r2, r6
   1c4a0:	ldr	r1, [r0, r6, lsl #2]
   1c4a4:	add	r0, sp, #112	; 0x70
   1c4a8:	bl	22e50 <__assert_fail@plt+0x111b0>
   1c4ac:	str	r0, [sp, #88]	; 0x58
   1c4b0:	str	r0, [sp, #208]	; 0xd0
   1c4b4:	cmn	r6, #-1073741823	; 0xc0000001
   1c4b8:	bcs	1d18c <__assert_fail@plt+0xb4ec>
   1c4bc:	ldr	r0, [sp, #196]	; 0xc4
   1c4c0:	mov	r9, r6
   1c4c4:	str	r0, [sp, #72]	; 0x48
   1c4c8:	mov	r0, #4
   1c4cc:	add	r6, r0, r6, lsl #2
   1c4d0:	mov	r0, r6
   1c4d4:	bl	1a224 <__assert_fail@plt+0x8584>
   1c4d8:	mov	r7, r0
   1c4dc:	cmp	r0, #0
   1c4e0:	beq	1d228 <__assert_fail@plt+0xb588>
   1c4e4:	ldr	r0, [sp, #72]	; 0x48
   1c4e8:	ldr	r0, [r0, #76]	; 0x4c
   1c4ec:	cmp	r0, #0
   1c4f0:	beq	1c5a8 <__assert_fail@plt+0xa908>
   1c4f4:	mov	r0, r6
   1c4f8:	bl	1a224 <__assert_fail@plt+0x8584>
   1c4fc:	cmp	r0, #0
   1c500:	beq	1d228 <__assert_fail@plt+0xb588>
   1c504:	mov	r6, r0
   1c508:	add	r0, r9, #1
   1c50c:	mov	r1, #0
   1c510:	mov	r4, r9
   1c514:	str	r0, [sp, #28]
   1c518:	lsl	r2, r0, #2
   1c51c:	mov	r0, r6
   1c520:	bl	11b08 <memset@plt>
   1c524:	ldr	r0, [sp, #88]	; 0x58
   1c528:	str	r7, [fp, #-208]	; 0xffffff30
   1c52c:	str	r6, [fp, #-204]	; 0xffffff34
   1c530:	mov	r1, #0
   1c534:	str	r0, [fp, #-200]	; 0xffffff38
   1c538:	ldr	r0, [sp, #40]	; 0x28
   1c53c:	str	r9, [fp, #-196]	; 0xffffff3c
   1c540:	str	r1, [r0]
   1c544:	str	r1, [r0, #4]
   1c548:	str	r1, [r0, #8]
   1c54c:	add	r0, sp, #112	; 0x70
   1c550:	mov	r1, r5
   1c554:	bl	25b70 <__assert_fail@plt+0x13ed0>
   1c558:	mov	r4, r0
   1c55c:	mov	r0, #0
   1c560:	bl	1a158 <__assert_fail@plt+0x84b8>
   1c564:	cmp	r4, #0
   1c568:	bne	1c774 <__assert_fail@plt+0xaad4>
   1c56c:	ldr	r0, [r7]
   1c570:	cmp	r0, #0
   1c574:	beq	1c604 <__assert_fail@plt+0xa964>
   1c578:	ldr	r0, [sp, #72]	; 0x48
   1c57c:	ldr	r3, [sp, #28]
   1c580:	mov	r1, r7
   1c584:	mov	r2, r6
   1c588:	bl	25e08 <__assert_fail@plt+0x14168>
   1c58c:	mov	r4, r0
   1c590:	mov	r0, r6
   1c594:	bl	1a158 <__assert_fail@plt+0x84b8>
   1c598:	cmp	r4, #0
   1c59c:	beq	1c854 <__assert_fail@plt+0xabb4>
   1c5a0:	mov	r6, #0
   1c5a4:	b	1c774 <__assert_fail@plt+0xaad4>
   1c5a8:	ldr	r0, [sp, #88]	; 0x58
   1c5ac:	mov	r6, #0
   1c5b0:	mov	r1, r5
   1c5b4:	str	r6, [fp, #-204]	; 0xffffff34
   1c5b8:	str	r7, [fp, #-208]	; 0xffffff30
   1c5bc:	str	r0, [fp, #-200]	; 0xffffff38
   1c5c0:	ldr	r0, [sp, #40]	; 0x28
   1c5c4:	str	r9, [fp, #-196]	; 0xffffff3c
   1c5c8:	str	r6, [r0]
   1c5cc:	str	r6, [r0, #4]
   1c5d0:	str	r6, [r0, #8]
   1c5d4:	add	r0, sp, #112	; 0x70
   1c5d8:	bl	25b70 <__assert_fail@plt+0x13ed0>
   1c5dc:	mov	r4, r0
   1c5e0:	mov	r0, #0
   1c5e4:	bl	1a158 <__assert_fail@plt+0x84b8>
   1c5e8:	cmp	r4, #0
   1c5ec:	bne	1c774 <__assert_fail@plt+0xaad4>
   1c5f0:	ldr	r0, [r7]
   1c5f4:	mov	r6, #0
   1c5f8:	cmp	r0, #0
   1c5fc:	beq	1c6e8 <__assert_fail@plt+0xaa48>
   1c600:	b	1c854 <__assert_fail@plt+0xabb4>
   1c604:	ldr	r0, [r6]
   1c608:	cmp	r0, #0
   1c60c:	bne	1c578 <__assert_fail@plt+0xa8d8>
   1c610:	cmp	r9, #1
   1c614:	blt	1c6e8 <__assert_fail@plt+0xaa48>
   1c618:	ldr	r0, [sp, #212]	; 0xd4
   1c61c:	lsl	r4, r9, #2
   1c620:	add	r5, r9, #1
   1c624:	sub	r0, r0, #4
   1c628:	ldr	r1, [r0, r4]
   1c62c:	cmp	r1, #0
   1c630:	ldrbne	r2, [r1, #52]	; 0x34
   1c634:	tstne	r2, #16
   1c638:	bne	1c650 <__assert_fail@plt+0xa9b0>
   1c63c:	sub	r5, r5, #1
   1c640:	sub	r4, r4, #4
   1c644:	cmp	r5, #2
   1c648:	bge	1c628 <__assert_fail@plt+0xa988>
   1c64c:	b	1c6e8 <__assert_fail@plt+0xaa48>
   1c650:	sub	r2, r5, #2
   1c654:	add	r0, sp, #112	; 0x70
   1c658:	str	r2, [sp, #96]	; 0x60
   1c65c:	bl	22e50 <__assert_fail@plt+0x111b0>
   1c660:	mov	r9, r0
   1c664:	mov	r0, r6
   1c668:	mov	r1, #0
   1c66c:	mov	r2, r4
   1c670:	bl	11b08 <memset@plt>
   1c674:	ldr	r0, [sp, #96]	; 0x60
   1c678:	str	r7, [fp, #-208]	; 0xffffff30
   1c67c:	str	r6, [fp, #-204]	; 0xffffff34
   1c680:	str	r9, [fp, #-200]	; 0xffffff38
   1c684:	str	r9, [sp, #88]	; 0x58
   1c688:	mov	r1, #0
   1c68c:	mov	r9, r0
   1c690:	str	r0, [fp, #-196]	; 0xffffff3c
   1c694:	ldr	r0, [sp, #40]	; 0x28
   1c698:	str	r1, [r0]
   1c69c:	str	r1, [r0, #4]
   1c6a0:	str	r1, [r0, #8]
   1c6a4:	add	r0, sp, #112	; 0x70
   1c6a8:	sub	r1, fp, #208	; 0xd0
   1c6ac:	bl	25b70 <__assert_fail@plt+0x13ed0>
   1c6b0:	mov	r4, r0
   1c6b4:	mov	r0, #0
   1c6b8:	bl	1a158 <__assert_fail@plt+0x84b8>
   1c6bc:	cmp	r4, #0
   1c6c0:	bne	1c774 <__assert_fail@plt+0xaad4>
   1c6c4:	sub	r0, r5, #1
   1c6c8:	str	r0, [sp, #28]
   1c6cc:	ldr	r0, [r7]
   1c6d0:	cmp	r0, #0
   1c6d4:	beq	1c604 <__assert_fail@plt+0xa964>
   1c6d8:	sub	r9, r5, #2
   1c6dc:	sub	r0, r5, #1
   1c6e0:	str	r0, [sp, #28]
   1c6e4:	b	1c578 <__assert_fail@plt+0xa8d8>
   1c6e8:	mov	r0, r7
   1c6ec:	bl	1a158 <__assert_fail@plt+0x84b8>
   1c6f0:	mov	r0, r6
   1c6f4:	bl	1a158 <__assert_fail@plt+0x84b8>
   1c6f8:	add	r0, sp, #112	; 0x70
   1c6fc:	bl	22f10 <__assert_fail@plt+0x11270>
   1c700:	ldr	r0, [fp, #-212]	; 0xffffff2c
   1c704:	ldr	r1, [sp, #80]	; 0x50
   1c708:	ldr	r9, [sp, #56]	; 0x38
   1c70c:	ldr	ip, [sp, #108]	; 0x6c
   1c710:	ldr	r3, [sp, #104]	; 0x68
   1c714:	ldr	r5, [sp, #100]	; 0x64
   1c718:	ldr	r2, [fp, #24]
   1c71c:	ldr	lr, [sp, #60]	; 0x3c
   1c720:	mov	r4, #1
   1c724:	add	r7, r0, r1
   1c728:	cmp	r7, r9
   1c72c:	str	r7, [fp, #-212]	; 0xffffff2c
   1c730:	blt	1d18c <__assert_fail@plt+0xb4ec>
   1c734:	cmp	r8, r7
   1c738:	bge	1bcb4 <__assert_fail@plt+0xa014>
   1c73c:	b	1d18c <__assert_fail@plt+0xb4ec>
   1c740:	ldr	r7, [r4, #48]	; 0x30
   1c744:	b	1bef4 <__assert_fail@plt+0xa254>
   1c748:	ldr	r7, [r4, #44]	; 0x2c
   1c74c:	b	1bef4 <__assert_fail@plt+0xa254>
   1c750:	cmn	r5, #1
   1c754:	ble	1c7d4 <__assert_fail@plt+0xab34>
   1c758:	mov	r0, #1
   1c75c:	mov	r2, r3
   1c760:	str	r0, [sp, #72]	; 0x48
   1c764:	ldr	r0, [sp, #68]	; 0x44
   1c768:	cmp	r0, #0
   1c76c:	bne	1bf44 <__assert_fail@plt+0xa2a4>
   1c770:	b	1c820 <__assert_fail@plt+0xab80>
   1c774:	mov	r0, r7
   1c778:	bl	1a158 <__assert_fail@plt+0x84b8>
   1c77c:	mov	r0, r6
   1c780:	bl	1a158 <__assert_fail@plt+0x84b8>
   1c784:	cmp	r4, #0
   1c788:	beq	1c87c <__assert_fail@plt+0xabdc>
   1c78c:	cmp	r4, #1
   1c790:	beq	1c6f8 <__assert_fail@plt+0xaa58>
   1c794:	b	1d18c <__assert_fail@plt+0xb4ec>
   1c798:	add	r4, r7, #4
   1c79c:	add	r0, sp, #112	; 0x70
   1c7a0:	mov	r2, #0
   1c7a4:	mov	r9, r3
   1c7a8:	mov	r1, r4
   1c7ac:	bl	23098 <__assert_fail@plt+0x113f8>
   1c7b0:	cmp	r0, #0
   1c7b4:	str	r0, [fp, #-64]	; 0xffffffc0
   1c7b8:	bne	1c84c <__assert_fail@plt+0xabac>
   1c7bc:	ldrb	r0, [r7, #52]	; 0x34
   1c7c0:	mov	ip, #0
   1c7c4:	tst	r0, #64	; 0x40
   1c7c8:	bne	1c82c <__assert_fail@plt+0xab8c>
   1c7cc:	mov	r3, r9
   1c7d0:	b	1bf28 <__assert_fail@plt+0xa288>
   1c7d4:	add	r0, sp, #112	; 0x70
   1c7d8:	mov	r1, r7
   1c7dc:	mov	r2, r3
   1c7e0:	mov	r4, r3
   1c7e4:	mov	r6, ip
   1c7e8:	bl	22e50 <__assert_fail@plt+0x111b0>
   1c7ec:	clz	r1, r0
   1c7f0:	mov	ip, r6
   1c7f4:	cmp	r0, #0
   1c7f8:	mov	r2, r4
   1c7fc:	mov	r3, r4
   1c800:	lsr	r6, r1, #5
   1c804:	ldr	r1, [sp, #68]	; 0x44
   1c808:	movwne	r0, #1
   1c80c:	mvneq	r2, #0
   1c810:	str	r0, [sp, #72]	; 0x48
   1c814:	orr	r1, r1, r6
   1c818:	cmp	r1, #0
   1c81c:	bne	1bf44 <__assert_fail@plt+0xa2a4>
   1c820:	mov	r6, r3
   1c824:	sub	r5, fp, #208	; 0xd0
   1c828:	b	1c414 <__assert_fail@plt+0xa774>
   1c82c:	add	r0, sp, #112	; 0x70
   1c830:	mov	r1, r4
   1c834:	bl	23190 <__assert_fail@plt+0x114f0>
   1c838:	mov	ip, #0
   1c83c:	cmp	r0, #0
   1c840:	mov	r3, r9
   1c844:	str	r0, [fp, #-64]	; 0xffffffc0
   1c848:	beq	1bf28 <__assert_fail@plt+0xa288>
   1c84c:	mov	r6, r0
   1c850:	b	1c414 <__assert_fail@plt+0xa774>
   1c854:	ldr	r0, [sp, #212]	; 0xd4
   1c858:	bl	1a158 <__assert_fail@plt+0x84b8>
   1c85c:	ldr	r0, [sp, #88]	; 0x58
   1c860:	str	r0, [sp, #208]	; 0xd0
   1c864:	mov	r0, #0
   1c868:	str	r7, [sp, #212]	; 0xd4
   1c86c:	str	r9, [sp, #204]	; 0xcc
   1c870:	bl	1a158 <__assert_fail@plt+0x84b8>
   1c874:	mov	r0, #0
   1c878:	bl	1a158 <__assert_fail@plt+0x84b8>
   1c87c:	ldr	r4, [sp, #92]	; 0x5c
   1c880:	cmp	r4, #0
   1c884:	beq	1d188 <__assert_fail@plt+0xb4e8>
   1c888:	ldr	r8, [sp, #36]	; 0x24
   1c88c:	ldr	sl, [fp, #20]
   1c890:	cmp	r4, #1
   1c894:	beq	1c8b4 <__assert_fail@plt+0xac14>
   1c898:	ldr	r1, [fp, #16]
   1c89c:	mvn	r0, r8
   1c8a0:	add	r0, r0, r1
   1c8a4:	mov	r1, #255	; 0xff
   1c8a8:	lsl	r2, r0, #3
   1c8ac:	add	r0, sl, #8
   1c8b0:	bl	11b08 <memset@plt>
   1c8b4:	ldr	r0, [sp, #204]	; 0xcc
   1c8b8:	mov	r5, #0
   1c8bc:	cmp	r4, #2
   1c8c0:	str	r5, [sl]
   1c8c4:	str	r0, [sl, #4]
   1c8c8:	bcc	1d060 <__assert_fail@plt+0xb3c0>
   1c8cc:	ldr	r0, [sp, #44]	; 0x2c
   1c8d0:	ldrb	r0, [r0, #28]
   1c8d4:	ands	r0, r0, #16
   1c8d8:	bne	1d060 <__assert_fail@plt+0xb3c0>
   1c8dc:	ldr	r0, [sp, #84]	; 0x54
   1c8e0:	ldrb	r1, [r0, #88]	; 0x58
   1c8e4:	mov	r0, #0
   1c8e8:	tst	r1, #1
   1c8ec:	mov	r1, #0
   1c8f0:	beq	1c908 <__assert_fail@plt+0xac68>
   1c8f4:	ldr	r1, [sp, #64]	; 0x40
   1c8f8:	ldr	r2, [r1]
   1c8fc:	mov	r1, #0
   1c900:	cmp	r2, #0
   1c904:	movwgt	r1, #1
   1c908:	ldr	r2, [sp, #44]	; 0x2c
   1c90c:	ldr	r4, [sp, #92]	; 0x5c
   1c910:	cmp	r1, #0
   1c914:	ldr	r6, [r2]
   1c918:	movw	r2, #43048	; 0xa828
   1c91c:	movt	r2, #2
   1c920:	vldr	d16, [r2]
   1c924:	ldr	r2, [r2, #8]
   1c928:	str	r2, [fp, #-56]	; 0xffffffc8
   1c92c:	mov	r2, #16
   1c930:	vstr	d16, [fp, #-64]	; 0xffffffc0
   1c934:	str	r2, [fp, #-204]	; 0xffffff34
   1c938:	sub	r2, fp, #208	; 0xd0
   1c93c:	str	r0, [fp, #-208]	; 0xffffff30
   1c940:	add	r9, r2, #12
   1c944:	mov	r2, #0
   1c948:	str	r9, [fp, #-200]	; 0xffffff38
   1c94c:	beq	1c970 <__assert_fail@plt+0xacd0>
   1c950:	mov	r0, #48	; 0x30
   1c954:	bl	1a224 <__assert_fail@plt+0x8584>
   1c958:	cmp	r0, #0
   1c95c:	str	r0, [fp, #-56]	; 0xffffffc8
   1c960:	beq	1d078 <__assert_fail@plt+0xb3d8>
   1c964:	ldr	r0, [fp, #-208]	; 0xffffff30
   1c968:	sub	r1, fp, #64	; 0x40
   1c96c:	mov	r2, r1
   1c970:	ldr	sl, [r6, #72]	; 0x48
   1c974:	mov	r1, #0
   1c978:	cmp	r0, r4
   1c97c:	str	r6, [sp, #104]	; 0x68
   1c980:	str	r2, [sp, #108]	; 0x6c
   1c984:	str	r1, [fp, #-44]	; 0xffffffd4
   1c988:	str	r1, [fp, #-48]	; 0xffffffd0
   1c98c:	str	r1, [fp, #-40]	; 0xffffffd8
   1c990:	bcs	1ca24 <__assert_fail@plt+0xad84>
   1c994:	sub	r0, fp, #208	; 0xd0
   1c998:	mov	r1, r4
   1c99c:	mov	r2, r9
   1c9a0:	mov	r3, #8
   1c9a4:	bl	28574 <__assert_fail@plt+0x168d4>
   1c9a8:	cmp	r0, #0
   1c9ac:	bne	1ca28 <__assert_fail@plt+0xad88>
   1c9b0:	ldr	r0, [fp, #-200]	; 0xffffff38
   1c9b4:	ldr	r6, [sp, #108]	; 0x6c
   1c9b8:	mov	r4, r9
   1c9bc:	cmp	r0, r9
   1c9c0:	beq	1c9c8 <__assert_fail@plt+0xad28>
   1c9c4:	bl	1a158 <__assert_fail@plt+0x84b8>
   1c9c8:	mov	r0, #16
   1c9cc:	str	r0, [fp, #-204]	; 0xffffff34
   1c9d0:	mov	r0, #0
   1c9d4:	str	r0, [fp, #-208]	; 0xffffff30
   1c9d8:	mov	r0, r6
   1c9dc:	str	r4, [fp, #-200]	; 0xffffff38
   1c9e0:	bl	26d34 <__assert_fail@plt+0x15094>
   1c9e4:	ldr	r8, [sp, #36]	; 0x24
   1c9e8:	b	1d018 <__assert_fail@plt+0xb378>
   1c9ec:	ldr	r1, [r3, #8]
   1c9f0:	cmp	r1, #0
   1c9f4:	beq	1ca04 <__assert_fail@plt+0xad64>
   1c9f8:	ldrsb	r1, [r9, #28]
   1c9fc:	cmp	r1, #0
   1ca00:	blt	1b9dc <__assert_fail@plt+0x9d3c>
   1ca04:	mov	r1, #0
   1ca08:	cmp	r7, #0
   1ca0c:	str	r1, [sp, #96]	; 0x60
   1ca10:	beq	1d070 <__assert_fail@plt+0xb3d0>
   1ca14:	cmp	r0, #0
   1ca18:	mov	r7, #0
   1ca1c:	bne	1d1c4 <__assert_fail@plt+0xb524>
   1ca20:	b	1b9e0 <__assert_fail@plt+0x9d40>
   1ca24:	str	r4, [fp, #-208]	; 0xffffff30
   1ca28:	ldr	r6, [fp, #20]
   1ca2c:	ldr	r0, [fp, #-200]	; 0xffffff38
   1ca30:	lsl	r2, r4, #3
   1ca34:	str	r2, [sp, #96]	; 0x60
   1ca38:	mov	r1, r6
   1ca3c:	str	r0, [sp, #100]	; 0x64
   1ca40:	bl	118e0 <memcpy@plt>
   1ca44:	ldr	r7, [r6]
   1ca48:	ldr	r1, [r6, #4]
   1ca4c:	mov	r0, #0
   1ca50:	cmp	r7, r1
   1ca54:	str	r7, [fp, #-36]	; 0xffffffdc
   1ca58:	ble	1ca8c <__assert_fail@plt+0xadec>
   1ca5c:	bl	1a158 <__assert_fail@plt+0x84b8>
   1ca60:	ldr	r0, [fp, #-200]	; 0xffffff38
   1ca64:	cmp	r0, r9
   1ca68:	beq	1ca70 <__assert_fail@plt+0xadd0>
   1ca6c:	bl	1a158 <__assert_fail@plt+0x84b8>
   1ca70:	mov	r0, #16
   1ca74:	mov	r4, #0
   1ca78:	str	r0, [fp, #-204]	; 0xffffff34
   1ca7c:	ldr	r0, [sp, #108]	; 0x6c
   1ca80:	str	r4, [fp, #-208]	; 0xffffff30
   1ca84:	str	r9, [fp, #-200]	; 0xffffff38
   1ca88:	b	1d050 <__assert_fail@plt+0xb3b0>
   1ca8c:	ldr	r1, [sp, #104]	; 0x68
   1ca90:	lsl	r0, r4, #4
   1ca94:	str	r9, [sp, #88]	; 0x58
   1ca98:	str	r0, [sp, #80]	; 0x50
   1ca9c:	ldr	r0, [r1]
   1caa0:	add	r1, r0, sl, lsl #3
   1caa4:	ldr	r3, [r1, #4]
   1caa8:	uxtb	r2, r3
   1caac:	cmp	r2, #9
   1cab0:	beq	1cae0 <__assert_fail@plt+0xae40>
   1cab4:	cmp	r2, #8
   1cab8:	bne	1cb48 <__assert_fail@plt+0xaea8>
   1cabc:	ldr	r0, [r0, sl, lsl #3]
   1cac0:	add	r0, r0, #1
   1cac4:	cmp	r0, r4
   1cac8:	bge	1cb48 <__assert_fail@plt+0xaea8>
   1cacc:	ldr	r1, [fp, #20]
   1cad0:	str	r7, [r1, r0, lsl #3]!
   1cad4:	mvn	r0, #0
   1cad8:	str	r0, [r1, #4]
   1cadc:	b	1cb48 <__assert_fail@plt+0xaea8>
   1cae0:	ldr	r0, [r0, sl, lsl #3]
   1cae4:	add	r0, r0, #1
   1cae8:	cmp	r0, r4
   1caec:	bge	1cb48 <__assert_fail@plt+0xaea8>
   1caf0:	ldr	r1, [fp, #20]
   1caf4:	ldr	r2, [r1, r0, lsl #3]
   1caf8:	cmp	r2, r7
   1cafc:	bge	1cb10 <__assert_fail@plt+0xae70>
   1cb00:	add	r0, r1, r0, lsl #3
   1cb04:	str	r7, [r0, #4]
   1cb08:	ldr	r0, [sp, #100]	; 0x64
   1cb0c:	b	1cb30 <__assert_fail@plt+0xae90>
   1cb10:	tst	r3, #524288	; 0x80000
   1cb14:	beq	1cb3c <__assert_fail@plt+0xae9c>
   1cb18:	ldr	r1, [sp, #100]	; 0x64
   1cb1c:	ldr	r1, [r1, r0, lsl #3]
   1cb20:	cmn	r1, #1
   1cb24:	beq	1cb3c <__assert_fail@plt+0xae9c>
   1cb28:	ldr	r0, [fp, #20]
   1cb2c:	ldr	r1, [sp, #100]	; 0x64
   1cb30:	ldr	r2, [sp, #96]	; 0x60
   1cb34:	bl	118e0 <memcpy@plt>
   1cb38:	b	1cb48 <__assert_fail@plt+0xaea8>
   1cb3c:	ldr	r1, [fp, #20]
   1cb40:	add	r0, r1, r0, lsl #3
   1cb44:	str	r7, [r0, #4]
   1cb48:	ldr	r0, [fp, #20]
   1cb4c:	ldr	r0, [r0, #4]
   1cb50:	cmp	r7, r0
   1cb54:	ldreq	r0, [sp, #208]	; 0xd0
   1cb58:	cmpeq	sl, r0
   1cb5c:	beq	1cb84 <__assert_fail@plt+0xaee4>
   1cb60:	ldr	r7, [sp, #108]	; 0x6c
   1cb64:	cmp	r7, #0
   1cb68:	beq	1cbf0 <__assert_fail@plt+0xaf50>
   1cb6c:	sub	r0, fp, #48	; 0x30
   1cb70:	mov	r1, sl
   1cb74:	bl	222e4 <__assert_fail@plt+0x10644>
   1cb78:	cmp	r0, #0
   1cb7c:	bne	1cb90 <__assert_fail@plt+0xaef0>
   1cb80:	b	1cbf0 <__assert_fail@plt+0xaf50>
   1cb84:	ldr	r7, [sp, #108]	; 0x6c
   1cb88:	cmp	r7, #0
   1cb8c:	beq	1d020 <__assert_fail@plt+0xb380>
   1cb90:	mov	r0, #0
   1cb94:	ldr	r3, [fp, #20]
   1cb98:	ldr	r1, [r3, r0, lsl #3]
   1cb9c:	cmp	r1, #0
   1cba0:	blt	1cbb4 <__assert_fail@plt+0xaf14>
   1cba4:	add	r1, r3, r0, lsl #3
   1cba8:	ldr	r1, [r1, #4]
   1cbac:	cmn	r1, #1
   1cbb0:	beq	1cbc4 <__assert_fail@plt+0xaf24>
   1cbb4:	add	r0, r0, #1
   1cbb8:	cmp	r0, r4
   1cbbc:	bcc	1cb94 <__assert_fail@plt+0xaef4>
   1cbc0:	b	1d020 <__assert_fail@plt+0xb380>
   1cbc4:	ldr	r0, [sp, #100]	; 0x64
   1cbc8:	sub	r1, fp, #36	; 0x24
   1cbcc:	mov	r2, r4
   1cbd0:	str	r0, [sp]
   1cbd4:	sub	r0, fp, #48	; 0x30
   1cbd8:	str	r0, [sp, #4]
   1cbdc:	mov	r0, r7
   1cbe0:	bl	26d9c <__assert_fail@plt+0x150fc>
   1cbe4:	mov	sl, r0
   1cbe8:	cmn	r0, #1
   1cbec:	ble	1d020 <__assert_fail@plt+0xb380>
   1cbf0:	ldr	r6, [sp, #196]	; 0xc4
   1cbf4:	ldr	r0, [r6]
   1cbf8:	add	r1, r0, sl, lsl #3
   1cbfc:	ldr	r1, [r1, #4]
   1cc00:	tst	r1, #8
   1cc04:	bne	1ccc4 <__assert_fail@plt+0xb024>
   1cc08:	tst	r1, #1048576	; 0x100000
   1cc0c:	bne	1cd5c <__assert_fail@plt+0xb0bc>
   1cc10:	uxtb	r1, r1
   1cc14:	cmp	r1, #4
   1cc18:	bne	1cd80 <__assert_fail@plt+0xb0e0>
   1cc1c:	ldr	r0, [r0, sl, lsl #3]
   1cc20:	ldr	r1, [sp, #92]	; 0x5c
   1cc24:	mov	r4, #0
   1cc28:	add	r0, r0, #1
   1cc2c:	cmp	r0, r1
   1cc30:	ldrlt	r1, [fp, #20]
   1cc34:	ldrlt	r2, [r1, r0, lsl #3]!
   1cc38:	ldrlt	r1, [r1, #4]
   1cc3c:	sublt	r4, r1, r2
   1cc40:	cmp	r7, #0
   1cc44:	beq	1ce54 <__assert_fail@plt+0xb1b4>
   1cc48:	ldr	r1, [sp, #92]	; 0x5c
   1cc4c:	cmp	r0, r1
   1cc50:	bge	1cdf4 <__assert_fail@plt+0xb154>
   1cc54:	ldr	r1, [fp, #20]
   1cc58:	ldr	r1, [r1, r0, lsl #3]
   1cc5c:	cmn	r1, #1
   1cc60:	beq	1cdf4 <__assert_fail@plt+0xb154>
   1cc64:	ldr	r2, [fp, #20]
   1cc68:	add	r0, r2, r0, lsl #3
   1cc6c:	ldr	r0, [r0, #4]
   1cc70:	cmn	r0, #1
   1cc74:	beq	1cdf4 <__assert_fail@plt+0xb154>
   1cc78:	cmp	r4, #0
   1cc7c:	beq	1cf00 <__assert_fail@plt+0xb260>
   1cc80:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1cc84:	ldr	r0, [sp, #140]	; 0x8c
   1cc88:	sub	r0, r0, r7
   1cc8c:	cmp	r0, r4
   1cc90:	blt	1cdf4 <__assert_fail@plt+0xb154>
   1cc94:	ldr	r2, [sp, #116]	; 0x74
   1cc98:	add	r0, r2, r1
   1cc9c:	add	r1, r2, r7
   1cca0:	mov	r2, r4
   1cca4:	bl	11928 <memcmp@plt>
   1cca8:	cmp	r0, #0
   1ccac:	bne	1cdf4 <__assert_fail@plt+0xb154>
   1ccb0:	ldr	r0, [r6, #12]
   1ccb4:	add	r7, r7, r4
   1ccb8:	ldr	r9, [r0, sl, lsl #2]
   1ccbc:	str	r7, [fp, #-36]	; 0xffffffdc
   1ccc0:	b	1cdc4 <__assert_fail@plt+0xb124>
   1ccc4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1ccc8:	ldr	r0, [sp, #212]	; 0xd4
   1cccc:	ldr	r4, [r6, #20]
   1ccd0:	ldr	r7, [r0, r1, lsl #2]
   1ccd4:	str	r1, [sp, #76]	; 0x4c
   1ccd8:	sub	r0, fp, #48	; 0x30
   1ccdc:	mov	r1, sl
   1cce0:	bl	222e4 <__assert_fail@plt+0x10644>
   1cce4:	cmp	r0, #0
   1cce8:	bne	1cd00 <__assert_fail@plt+0xb060>
   1ccec:	sub	r0, fp, #48	; 0x30
   1ccf0:	mov	r1, sl
   1ccf4:	bl	220cc <__assert_fail@plt+0x1042c>
   1ccf8:	cmp	r0, #0
   1ccfc:	beq	1cfe0 <__assert_fail@plt+0xb340>
   1cd00:	add	r0, sl, sl, lsl #1
   1cd04:	add	r0, r4, r0, lsl #2
   1cd08:	ldr	r4, [r0, #4]
   1cd0c:	cmp	r4, #1
   1cd10:	blt	1cdf4 <__assert_fail@plt+0xb154>
   1cd14:	add	r6, r7, #4
   1cd18:	ldr	r7, [r0, #8]
   1cd1c:	mov	r8, #0
   1cd20:	mvn	sl, #0
   1cd24:	ldr	r9, [r7, r8, lsl #2]
   1cd28:	mov	r0, r6
   1cd2c:	mov	r1, r9
   1cd30:	bl	222e4 <__assert_fail@plt+0x10644>
   1cd34:	cmp	r0, #0
   1cd38:	beq	1cd48 <__assert_fail@plt+0xb0a8>
   1cd3c:	cmn	sl, #1
   1cd40:	bne	1ce34 <__assert_fail@plt+0xb194>
   1cd44:	mov	sl, r9
   1cd48:	add	r8, r8, #1
   1cd4c:	cmp	r8, r4
   1cd50:	blt	1cd24 <__assert_fail@plt+0xb084>
   1cd54:	mov	r9, sl
   1cd58:	b	1ce48 <__assert_fail@plt+0xb1a8>
   1cd5c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1cd60:	mov	r0, r6
   1cd64:	mov	r1, sl
   1cd68:	add	r2, sp, #112	; 0x70
   1cd6c:	mov	r3, r7
   1cd70:	bl	24c40 <__assert_fail@plt+0x12fa0>
   1cd74:	cmp	r0, #0
   1cd78:	bne	1cda8 <__assert_fail@plt+0xb108>
   1cd7c:	b	1cd84 <__assert_fail@plt+0xb0e4>
   1cd80:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1cd84:	ldr	r0, [r6]
   1cd88:	mov	r2, r7
   1cd8c:	add	r1, r0, sl, lsl #3
   1cd90:	add	r0, sp, #112	; 0x70
   1cd94:	bl	24f30 <__assert_fail@plt+0x13290>
   1cd98:	mov	r1, r0
   1cd9c:	mov	r0, #1
   1cda0:	cmp	r1, #0
   1cda4:	beq	1cdf4 <__assert_fail@plt+0xb154>
   1cda8:	ldr	r1, [r6, #12]
   1cdac:	add	r7, r0, r7
   1cdb0:	ldr	r0, [sp, #108]	; 0x6c
   1cdb4:	ldr	r9, [r1, sl, lsl #2]
   1cdb8:	cmp	r0, #0
   1cdbc:	str	r7, [fp, #-36]	; 0xffffffdc
   1cdc0:	beq	1ce70 <__assert_fail@plt+0xb1d0>
   1cdc4:	ldr	r0, [sp, #204]	; 0xcc
   1cdc8:	cmp	r7, r0
   1cdcc:	bgt	1cdf4 <__assert_fail@plt+0xb154>
   1cdd0:	ldr	r0, [sp, #212]	; 0xd4
   1cdd4:	ldr	r0, [r0, r7, lsl #2]
   1cdd8:	cmp	r0, #0
   1cddc:	beq	1cdf4 <__assert_fail@plt+0xb154>
   1cde0:	add	r0, r0, #4
   1cde4:	mov	r1, r9
   1cde8:	bl	222e4 <__assert_fail@plt+0x10644>
   1cdec:	cmp	r0, #0
   1cdf0:	bne	1ce70 <__assert_fail@plt+0xb1d0>
   1cdf4:	ldr	r0, [sp, #100]	; 0x64
   1cdf8:	ldr	r4, [sp, #92]	; 0x5c
   1cdfc:	ldr	r6, [sp, #108]	; 0x6c
   1ce00:	ldr	r3, [fp, #20]
   1ce04:	sub	r1, fp, #36	; 0x24
   1ce08:	str	r0, [sp]
   1ce0c:	sub	r0, fp, #48	; 0x30
   1ce10:	mov	r2, r4
   1ce14:	str	r0, [sp, #4]
   1ce18:	mov	r0, r6
   1ce1c:	bl	26d9c <__assert_fail@plt+0x150fc>
   1ce20:	cmp	r0, #0
   1ce24:	blt	1d1e8 <__assert_fail@plt+0xb548>
   1ce28:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1ce2c:	mov	sl, r0
   1ce30:	b	1ce88 <__assert_fail@plt+0xb1e8>
   1ce34:	sub	r0, fp, #48	; 0x30
   1ce38:	mov	r1, sl
   1ce3c:	bl	222e4 <__assert_fail@plt+0x10644>
   1ce40:	cmp	r0, #0
   1ce44:	beq	1cea4 <__assert_fail@plt+0xb204>
   1ce48:	ldr	r8, [sp, #36]	; 0x24
   1ce4c:	ldr	r7, [sp, #76]	; 0x4c
   1ce50:	b	1ce78 <__assert_fail@plt+0xb1d8>
   1ce54:	cmp	r4, #0
   1ce58:	beq	1cf00 <__assert_fail@plt+0xb260>
   1ce5c:	ldr	r0, [r6, #12]
   1ce60:	ldr	r9, [r0, sl, lsl #2]
   1ce64:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1ce68:	add	r7, r0, r4
   1ce6c:	str	r7, [fp, #-36]	; 0xffffffdc
   1ce70:	mov	r0, #0
   1ce74:	str	r0, [fp, #-44]	; 0xffffffd4
   1ce78:	cmn	r9, #1
   1ce7c:	ble	1cfd8 <__assert_fail@plt+0xb338>
   1ce80:	ldr	r4, [sp, #92]	; 0x5c
   1ce84:	mov	sl, r9
   1ce88:	ldr	r0, [fp, #20]
   1ce8c:	ldr	r9, [sp, #88]	; 0x58
   1ce90:	ldr	r1, [sp, #104]	; 0x68
   1ce94:	ldr	r0, [r0, #4]
   1ce98:	cmp	r7, r0
   1ce9c:	ble	1ca9c <__assert_fail@plt+0xadfc>
   1cea0:	b	1d1d0 <__assert_fail@plt+0xb530>
   1cea4:	ldr	r4, [sp, #108]	; 0x6c
   1cea8:	ldr	r8, [sp, #36]	; 0x24
   1ceac:	ldr	r7, [sp, #76]	; 0x4c
   1ceb0:	cmp	r4, #0
   1ceb4:	beq	1cf4c <__assert_fail@plt+0xb2ac>
   1ceb8:	ldr	r6, [r4]
   1cebc:	ldr	r0, [r4, #4]
   1cec0:	add	r1, r6, #1
   1cec4:	cmp	r1, r0
   1cec8:	str	r1, [r4]
   1cecc:	bne	1cf54 <__assert_fail@plt+0xb2b4>
   1ced0:	ldr	r0, [r4, #8]
   1ced4:	add	r1, r1, r1, lsl #1
   1ced8:	lsl	r1, r1, #4
   1cedc:	bl	1a2b4 <__assert_fail@plt+0x8614>
   1cee0:	cmp	r0, #0
   1cee4:	beq	1cfd0 <__assert_fail@plt+0xb330>
   1cee8:	str	r0, [r4, #8]
   1ceec:	ldr	r7, [sp, #76]	; 0x4c
   1cef0:	ldr	r1, [r4, #4]
   1cef4:	lsl	r1, r1, #1
   1cef8:	str	r1, [r4, #4]
   1cefc:	b	1cf58 <__assert_fail@plt+0xb2b8>
   1cf00:	sub	r0, fp, #48	; 0x30
   1cf04:	mov	r1, sl
   1cf08:	bl	220cc <__assert_fail@plt+0x1042c>
   1cf0c:	cmp	r0, #0
   1cf10:	beq	1cfe0 <__assert_fail@plt+0xb340>
   1cf14:	ldr	r0, [r6, #20]
   1cf18:	add	r1, sl, sl, lsl #1
   1cf1c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1cf20:	add	r0, r0, r1, lsl #2
   1cf24:	ldr	r0, [r0, #8]
   1cf28:	ldr	r9, [r0]
   1cf2c:	ldr	r0, [sp, #212]	; 0xd4
   1cf30:	ldr	r0, [r0, r7, lsl #2]
   1cf34:	mov	r1, r9
   1cf38:	add	r0, r0, #4
   1cf3c:	bl	222e4 <__assert_fail@plt+0x10644>
   1cf40:	cmp	r0, #0
   1cf44:	bne	1ce78 <__assert_fail@plt+0xb1d8>
   1cf48:	b	1cd84 <__assert_fail@plt+0xb0e4>
   1cf4c:	mov	r9, sl
   1cf50:	b	1ce78 <__assert_fail@plt+0xb1d8>
   1cf54:	ldr	r0, [r4, #8]
   1cf58:	add	r1, r6, r6, lsl #1
   1cf5c:	str	r7, [r0, r1, lsl #3]!
   1cf60:	mov	r7, r1
   1cf64:	str	r9, [r0, #4]
   1cf68:	ldr	r0, [sp, #80]	; 0x50
   1cf6c:	bl	1a224 <__assert_fail@plt+0x8584>
   1cf70:	ldr	r1, [r4, #8]
   1cf74:	mvn	r9, #1
   1cf78:	cmp	r0, #0
   1cf7c:	add	r6, r1, r7, lsl #3
   1cf80:	str	r0, [r6, #8]!
   1cf84:	beq	1ce4c <__assert_fail@plt+0xb1ac>
   1cf88:	ldr	r1, [fp, #20]
   1cf8c:	ldr	r2, [sp, #96]	; 0x60
   1cf90:	bl	118e0 <memcpy@plt>
   1cf94:	ldr	r0, [r6]
   1cf98:	ldr	r1, [sp, #92]	; 0x5c
   1cf9c:	ldr	r2, [sp, #96]	; 0x60
   1cfa0:	add	r0, r0, r1, lsl #3
   1cfa4:	ldr	r1, [sp, #100]	; 0x64
   1cfa8:	bl	118e0 <memcpy@plt>
   1cfac:	ldr	r0, [r4, #8]
   1cfb0:	sub	r1, fp, #48	; 0x30
   1cfb4:	add	r0, r0, r7, lsl #3
   1cfb8:	add	r0, r0, #12
   1cfbc:	bl	22268 <__assert_fail@plt+0x105c8>
   1cfc0:	ldr	r7, [sp, #76]	; 0x4c
   1cfc4:	cmp	r0, #0
   1cfc8:	moveq	r9, sl
   1cfcc:	b	1ce78 <__assert_fail@plt+0xb1d8>
   1cfd0:	mvn	r9, #1
   1cfd4:	b	1ce4c <__assert_fail@plt+0xb1ac>
   1cfd8:	cmn	r9, #2
   1cfdc:	bne	1cdf4 <__assert_fail@plt+0xb154>
   1cfe0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1cfe4:	bl	1a158 <__assert_fail@plt+0x84b8>
   1cfe8:	ldr	r0, [fp, #-200]	; 0xffffff38
   1cfec:	ldr	r4, [sp, #88]	; 0x58
   1cff0:	cmp	r0, r4
   1cff4:	beq	1cffc <__assert_fail@plt+0xb35c>
   1cff8:	bl	1a158 <__assert_fail@plt+0x84b8>
   1cffc:	mov	r0, #16
   1d000:	str	r0, [fp, #-204]	; 0xffffff34
   1d004:	mov	r0, #0
   1d008:	str	r0, [fp, #-208]	; 0xffffff30
   1d00c:	ldr	r0, [sp, #108]	; 0x6c
   1d010:	str	r4, [fp, #-200]	; 0xffffff38
   1d014:	bl	26d34 <__assert_fail@plt+0x15094>
   1d018:	mov	r4, #12
   1d01c:	b	1d054 <__assert_fail@plt+0xb3b4>
   1d020:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1d024:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d028:	ldr	r0, [fp, #-200]	; 0xffffff38
   1d02c:	cmp	r0, r9
   1d030:	beq	1d038 <__assert_fail@plt+0xb398>
   1d034:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d038:	mov	r0, #16
   1d03c:	mov	r4, #0
   1d040:	str	r0, [fp, #-204]	; 0xffffff34
   1d044:	str	r4, [fp, #-208]	; 0xffffff30
   1d048:	str	r9, [fp, #-200]	; 0xffffff38
   1d04c:	mov	r0, r7
   1d050:	bl	26d34 <__assert_fail@plt+0x15094>
   1d054:	ldr	sl, [fp, #20]
   1d058:	cmp	r4, #0
   1d05c:	bne	1d18c <__assert_fail@plt+0xb4ec>
   1d060:	ldrb	r1, [sp, #188]	; 0xbc
   1d064:	ldr	r2, [fp, #16]
   1d068:	add	r0, sl, #4
   1d06c:	b	1d0c0 <__assert_fail@plt+0xb420>
   1d070:	mov	r7, #0
   1d074:	b	1b9e0 <__assert_fail@plt+0x9d40>
   1d078:	mov	r4, #12
   1d07c:	b	1d058 <__assert_fail@plt+0xb3b8>
   1d080:	ldr	r7, [sp, #140]	; 0x8c
   1d084:	ldr	r6, [sp, #32]
   1d088:	ldr	ip, [sp, #124]	; 0x7c
   1d08c:	cmp	r3, r7
   1d090:	mov	r4, r6
   1d094:	addne	r4, ip, r3, lsl #2
   1d098:	ldr	r3, [r4]
   1d09c:	str	r3, [r0, #-4]
   1d0a0:	ldr	r4, [r0]
   1d0a4:	cmp	r4, r7
   1d0a8:	addne	r6, ip, r4, lsl #2
   1d0ac:	ldr	r7, [r6]
   1d0b0:	add	r6, sl, r5, lsl #3
   1d0b4:	add	r6, r6, #4
   1d0b8:	str	r7, [r0]
   1d0bc:	b	1d0dc <__assert_fail@plt+0xb43c>
   1d0c0:	ldr	r3, [r0, #-4]
   1d0c4:	cmn	r3, #1
   1d0c8:	beq	1d0f0 <__assert_fail@plt+0xb450>
   1d0cc:	cmp	r1, #0
   1d0d0:	bne	1d080 <__assert_fail@plt+0xb3e0>
   1d0d4:	ldr	r7, [r0]
   1d0d8:	mov	r6, r0
   1d0dc:	ldr	r4, [fp, #-212]	; 0xffffff2c
   1d0e0:	add	r3, r3, r4
   1d0e4:	str	r3, [r0, #-4]
   1d0e8:	add	r3, r7, r4
   1d0ec:	str	r3, [r6]
   1d0f0:	sub	r2, r2, #1
   1d0f4:	add	r0, r0, #8
   1d0f8:	add	r5, r5, #1
   1d0fc:	cmp	r8, r2
   1d100:	bne	1d0c0 <__assert_fail@plt+0xb420>
   1d104:	ldr	r0, [sp, #92]	; 0x5c
   1d108:	cmp	r8, #1
   1d10c:	blt	1d120 <__assert_fail@plt+0xb480>
   1d110:	add	r0, sl, r0, lsl #3
   1d114:	lsl	r2, r8, #3
   1d118:	mov	r1, #255	; 0xff
   1d11c:	bl	11b08 <memset@plt>
   1d120:	ldr	r0, [sp, #84]	; 0x54
   1d124:	mov	r4, #0
   1d128:	ldr	r0, [r0, #132]	; 0x84
   1d12c:	cmp	r0, #0
   1d130:	beq	1d18c <__assert_fail@plt+0xb4ec>
   1d134:	ldr	r1, [sp, #92]	; 0x5c
   1d138:	cmp	r1, #2
   1d13c:	bcc	1d18c <__assert_fail@plt+0xb4ec>
   1d140:	ldr	r1, [fp, #16]
   1d144:	mov	r2, #0
   1d148:	sub	r1, r1, #1
   1d14c:	sub	r1, r1, r8
   1d150:	ldr	r3, [r0, r2, lsl #2]
   1d154:	cmp	r2, r3
   1d158:	beq	1d17c <__assert_fail@plt+0xb4dc>
   1d15c:	add	r3, sl, r3, lsl #3
   1d160:	add	r7, sl, r2, lsl #3
   1d164:	ldr	r3, [r3, #8]
   1d168:	str	r3, [r7, #8]
   1d16c:	ldr	r3, [r0, r2, lsl #2]
   1d170:	add	r3, sl, r3, lsl #3
   1d174:	ldr	r3, [r3, #12]
   1d178:	str	r3, [r7, #12]
   1d17c:	add	r2, r2, #1
   1d180:	cmp	r1, r2
   1d184:	bne	1d150 <__assert_fail@plt+0xb4b0>
   1d188:	mov	r4, #0
   1d18c:	ldr	r0, [sp, #212]	; 0xd4
   1d190:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d194:	ldr	r0, [sp, #64]	; 0x40
   1d198:	ldr	r0, [r0]
   1d19c:	cmp	r0, #0
   1d1a0:	beq	1d1bc <__assert_fail@plt+0xb51c>
   1d1a4:	add	r0, sp, #112	; 0x70
   1d1a8:	bl	22f10 <__assert_fail@plt+0x11270>
   1d1ac:	ldr	r0, [sp, #244]	; 0xf4
   1d1b0:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d1b4:	ldr	r0, [sp, #228]	; 0xe4
   1d1b8:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d1bc:	add	r0, sp, #112	; 0x70
   1d1c0:	bl	1d89c <__assert_fail@plt+0xbbfc>
   1d1c4:	mov	r0, r4
   1d1c8:	sub	sp, fp, #28
   1d1cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d1d0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1d1d4:	b	1ca5c <__assert_fail@plt+0xadbc>
   1d1d8:	mov	r4, #12
   1d1dc:	b	1d18c <__assert_fail@plt+0xb4ec>
   1d1e0:	mov	r4, r0
   1d1e4:	b	1d18c <__assert_fail@plt+0xb4ec>
   1d1e8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1d1ec:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d1f0:	ldr	r0, [fp, #-200]	; 0xffffff38
   1d1f4:	ldr	r4, [sp, #88]	; 0x58
   1d1f8:	cmp	r0, r4
   1d1fc:	beq	1d204 <__assert_fail@plt+0xb564>
   1d200:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d204:	mov	r0, #16
   1d208:	str	r0, [fp, #-204]	; 0xffffff34
   1d20c:	mov	r0, #0
   1d210:	str	r0, [fp, #-208]	; 0xffffff30
   1d214:	mov	r0, r6
   1d218:	str	r4, [fp, #-200]	; 0xffffff38
   1d21c:	bl	26d34 <__assert_fail@plt+0x15094>
   1d220:	mov	r4, #1
   1d224:	b	1d054 <__assert_fail@plt+0xb3b4>
   1d228:	mov	r0, r7
   1d22c:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d230:	mov	r0, #0
   1d234:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d238:	b	1d18c <__assert_fail@plt+0xb4ec>
   1d23c:	mov	r4, r0
   1d240:	add	r0, r5, #76	; 0x4c
   1d244:	str	r0, [sp, #64]	; 0x40
   1d248:	b	1d18c <__assert_fail@plt+0xb4ec>
   1d24c:	mov	r4, #1
   1d250:	b	1d18c <__assert_fail@plt+0xb4ec>
   1d254:	push	{fp, lr}
   1d258:	mov	fp, sp
   1d25c:	sub	sp, sp, #16
   1d260:	mov	ip, #1
   1d264:	str	r2, [sp, #4]
   1d268:	str	ip, [sp, #12]
   1d26c:	mov	ip, #0
   1d270:	str	ip, [sp]
   1d274:	ldr	ip, [fp, #8]
   1d278:	str	ip, [sp, #8]
   1d27c:	bl	1d288 <__assert_fail@plt+0xb5e8>
   1d280:	mov	sp, fp
   1d284:	pop	{fp, pc}
   1d288:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d28c:	add	fp, sp, #28
   1d290:	sub	sp, sp, #44	; 0x2c
   1d294:	mvn	r6, #0
   1d298:	cmp	r3, #0
   1d29c:	blt	1d530 <__assert_fail@plt+0xb890>
   1d2a0:	mov	r4, r3
   1d2a4:	mov	r9, r2
   1d2a8:	cmp	r3, r2
   1d2ac:	bgt	1d530 <__assert_fail@plt+0xb890>
   1d2b0:	mov	r7, r0
   1d2b4:	ldr	r0, [fp, #8]
   1d2b8:	mov	r8, r9
   1d2bc:	mov	sl, r1
   1d2c0:	movw	r1, #0
   1d2c4:	ldr	r6, [r7]
   1d2c8:	movt	r1, #0
   1d2cc:	add	r0, r0, r4
   1d2d0:	cmp	r0, r9
   1d2d4:	bicle	r8, r0, r0, asr #31
   1d2d8:	movw	r0, #0
   1d2dc:	movt	r0, #0
   1d2e0:	orrs	r5, r1, r0
   1d2e4:	beq	1d2f0 <__assert_fail@plt+0xb650>
   1d2e8:	add	r0, r6, #136	; 0x88
   1d2ec:	bl	118b0 <pthread_mutex_lock@plt>
   1d2f0:	ldrb	r0, [r7, #28]
   1d2f4:	ldr	r2, [fp, #16]
   1d2f8:	cmp	r8, r4
   1d2fc:	ubfx	r1, r0, #5, #2
   1d300:	str	r6, [sp, #20]
   1d304:	str	r5, [sp, #36]	; 0x24
   1d308:	str	r4, [sp, #32]
   1d30c:	str	sl, [sp, #28]
   1d310:	str	r1, [sp, #24]
   1d314:	ble	1d340 <__assert_fail@plt+0xb6a0>
   1d318:	tst	r0, #8
   1d31c:	bne	1d340 <__assert_fail@plt+0xb6a0>
   1d320:	ldr	r1, [r7, #16]
   1d324:	cmp	r1, #0
   1d328:	beq	1d340 <__assert_fail@plt+0xb6a0>
   1d32c:	mov	r0, r7
   1d330:	mov	r4, r2
   1d334:	bl	1b020 <__assert_fail@plt+0x9380>
   1d338:	ldrb	r0, [r7, #28]
   1d33c:	mov	r2, r4
   1d340:	mov	sl, #1
   1d344:	mov	r6, #0
   1d348:	cmp	r2, #0
   1d34c:	str	r7, [fp, #-32]	; 0xffffffe0
   1d350:	beq	1d39c <__assert_fail@plt+0xb6fc>
   1d354:	ands	r1, r0, #16
   1d358:	bne	1d39c <__assert_fail@plt+0xb6fc>
   1d35c:	and	r0, r0, #6
   1d360:	cmp	r0, #4
   1d364:	bne	1d38c <__assert_fail@plt+0xb6ec>
   1d368:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d36c:	ldr	sl, [r2]
   1d370:	ldr	r0, [r0, #24]
   1d374:	cmp	sl, r0
   1d378:	bhi	1d394 <__assert_fail@plt+0xb6f4>
   1d37c:	cmp	sl, #1
   1d380:	movwlt	r2, #0
   1d384:	movwlt	sl, #1
   1d388:	b	1d398 <__assert_fail@plt+0xb6f8>
   1d38c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d390:	ldr	r0, [r0, #24]
   1d394:	add	sl, r0, #1
   1d398:	mov	r6, r2
   1d39c:	lsl	r0, sl, #3
   1d3a0:	bl	1a224 <__assert_fail@plt+0x8584>
   1d3a4:	cmp	r0, #0
   1d3a8:	beq	1d53c <__assert_fail@plt+0xb89c>
   1d3ac:	mov	r4, r0
   1d3b0:	ldr	r0, [fp, #12]
   1d3b4:	str	r8, [sp]
   1d3b8:	mov	r2, r9
   1d3bc:	stmib	sp, {r0, sl}
   1d3c0:	str	r4, [sp, #12]
   1d3c4:	ldr	r0, [sp, #24]
   1d3c8:	ldr	r5, [sp, #32]
   1d3cc:	ldr	r1, [sp, #28]
   1d3d0:	str	r0, [sp, #16]
   1d3d4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d3d8:	mov	r3, r5
   1d3dc:	bl	1b8fc <__assert_fail@plt+0x9c5c>
   1d3e0:	cmp	r0, #0
   1d3e4:	beq	1d3f8 <__assert_fail@plt+0xb758>
   1d3e8:	mvn	r6, #1
   1d3ec:	cmp	r0, #1
   1d3f0:	mvneq	r6, #0
   1d3f4:	b	1d510 <__assert_fail@plt+0xb870>
   1d3f8:	cmp	r6, #0
   1d3fc:	beq	1d4f4 <__assert_fail@plt+0xb854>
   1d400:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d404:	add	r9, sl, #1
   1d408:	ldrb	r0, [r0, #28]
   1d40c:	ubfx	r0, r0, #1, #2
   1d410:	cmp	r0, #1
   1d414:	beq	1d460 <__assert_fail@plt+0xb7c0>
   1d418:	mov	r8, #2
   1d41c:	cmp	r0, #0
   1d420:	bne	1d470 <__assert_fail@plt+0xb7d0>
   1d424:	lsl	r8, r9, #2
   1d428:	mov	r0, r8
   1d42c:	bl	1a224 <__assert_fail@plt+0x8584>
   1d430:	mov	r7, #0
   1d434:	cmp	r0, #0
   1d438:	str	r0, [r6, #4]
   1d43c:	beq	1d4d8 <__assert_fail@plt+0xb838>
   1d440:	mov	r0, r8
   1d444:	bl	1a224 <__assert_fail@plt+0x8584>
   1d448:	cmp	r0, #0
   1d44c:	str	r0, [r6, #8]
   1d450:	beq	1d590 <__assert_fail@plt+0xb8f0>
   1d454:	str	r9, [r6]
   1d458:	mov	r8, #1
   1d45c:	b	1d470 <__assert_fail@plt+0xb7d0>
   1d460:	ldr	r0, [r6]
   1d464:	mov	r8, #1
   1d468:	cmp	r9, r0
   1d46c:	bhi	1d548 <__assert_fail@plt+0xb8a8>
   1d470:	cmp	sl, #1
   1d474:	blt	1d4a4 <__assert_fail@plt+0xb804>
   1d478:	ldmib	r6, {r1, r2}
   1d47c:	add	r0, r4, #4
   1d480:	mov	r3, sl
   1d484:	ldr	r7, [r0, #-4]
   1d488:	subs	r3, r3, #1
   1d48c:	str	r7, [r1], #4
   1d490:	ldr	r7, [r0]
   1d494:	add	r0, r0, #8
   1d498:	str	r7, [r2], #4
   1d49c:	bne	1d484 <__assert_fail@plt+0xb7e4>
   1d4a0:	b	1d4a8 <__assert_fail@plt+0xb808>
   1d4a4:	mov	sl, #0
   1d4a8:	ldr	r0, [r6]
   1d4ac:	cmp	sl, r0
   1d4b0:	bcs	1d4d4 <__assert_fail@plt+0xb834>
   1d4b4:	ldmib	r6, {r0, r1}
   1d4b8:	mvn	r2, #0
   1d4bc:	str	r2, [r1, sl, lsl #2]
   1d4c0:	str	r2, [r0, sl, lsl #2]
   1d4c4:	add	sl, sl, #1
   1d4c8:	ldr	r3, [r6]
   1d4cc:	cmp	sl, r3
   1d4d0:	bcc	1d4bc <__assert_fail@plt+0xb81c>
   1d4d4:	mov	r7, r8
   1d4d8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1d4dc:	cmp	r7, #0
   1d4e0:	ldrb	r0, [r1, #28]
   1d4e4:	and	r0, r0, #249	; 0xf9
   1d4e8:	orr	r0, r0, r7, lsl #1
   1d4ec:	strb	r0, [r1, #28]
   1d4f0:	beq	1d50c <__assert_fail@plt+0xb86c>
   1d4f4:	ldr	r0, [fp, #20]
   1d4f8:	cmp	r0, #0
   1d4fc:	ldreq	r6, [r4]
   1d500:	ldrne	r0, [r4, #4]
   1d504:	subne	r6, r0, r5
   1d508:	b	1d510 <__assert_fail@plt+0xb870>
   1d50c:	mvn	r6, #1
   1d510:	ldr	r5, [sp, #36]	; 0x24
   1d514:	mov	r0, r4
   1d518:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d51c:	cmp	r5, #0
   1d520:	beq	1d530 <__assert_fail@plt+0xb890>
   1d524:	ldr	r0, [sp, #20]
   1d528:	add	r0, r0, #136	; 0x88
   1d52c:	bl	117fc <pthread_mutex_unlock@plt>
   1d530:	mov	r0, r6
   1d534:	sub	sp, fp, #28
   1d538:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d53c:	ldr	r5, [sp, #36]	; 0x24
   1d540:	mvn	r6, #1
   1d544:	b	1d51c <__assert_fail@plt+0xb87c>
   1d548:	ldr	r0, [r6, #4]
   1d54c:	lsl	r1, r9, #2
   1d550:	str	r1, [sp, #28]
   1d554:	bl	1a2b4 <__assert_fail@plt+0x8614>
   1d558:	mov	r7, #0
   1d55c:	cmp	r0, #0
   1d560:	str	r0, [sp, #24]
   1d564:	beq	1d4d8 <__assert_fail@plt+0xb838>
   1d568:	ldr	r0, [r6, #8]
   1d56c:	ldr	r1, [sp, #28]
   1d570:	bl	1a2b4 <__assert_fail@plt+0x8614>
   1d574:	cmp	r0, #0
   1d578:	beq	1d59c <__assert_fail@plt+0xb8fc>
   1d57c:	ldr	r1, [sp, #24]
   1d580:	str	r9, [r6]
   1d584:	str	r1, [r6, #4]
   1d588:	str	r0, [r6, #8]
   1d58c:	b	1d470 <__assert_fail@plt+0xb7d0>
   1d590:	ldr	r0, [r6, #4]
   1d594:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d598:	b	1d4d8 <__assert_fail@plt+0xb838>
   1d59c:	ldr	r0, [sp, #24]
   1d5a0:	b	1d594 <__assert_fail@plt+0xb8f4>
   1d5a4:	push	{fp, lr}
   1d5a8:	mov	fp, sp
   1d5ac:	sub	sp, sp, #16
   1d5b0:	mov	ip, #0
   1d5b4:	str	r2, [sp, #4]
   1d5b8:	str	ip, [sp, #12]
   1d5bc:	ldr	ip, [fp, #12]
   1d5c0:	str	ip, [sp, #8]
   1d5c4:	ldr	ip, [fp, #8]
   1d5c8:	str	ip, [sp]
   1d5cc:	bl	1d288 <__assert_fail@plt+0xb5e8>
   1d5d0:	mov	sp, fp
   1d5d4:	pop	{fp, pc}
   1d5d8:	push	{fp, lr}
   1d5dc:	mov	fp, sp
   1d5e0:	sub	sp, sp, #24
   1d5e4:	mov	ip, #1
   1d5e8:	str	ip, [sp, #20]
   1d5ec:	mov	ip, #0
   1d5f0:	str	ip, [sp, #8]
   1d5f4:	ldr	ip, [fp, #20]
   1d5f8:	str	ip, [sp, #16]
   1d5fc:	ldr	ip, [fp, #16]
   1d600:	str	ip, [sp, #12]
   1d604:	ldr	ip, [fp, #12]
   1d608:	str	ip, [sp, #4]
   1d60c:	ldr	ip, [fp, #8]
   1d610:	str	ip, [sp]
   1d614:	bl	1d620 <__assert_fail@plt+0xb980>
   1d618:	mov	sp, fp
   1d61c:	pop	{fp, pc}
   1d620:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d624:	add	fp, sp, #28
   1d628:	sub	sp, sp, #20
   1d62c:	ldr	r4, [fp, #8]
   1d630:	mov	r8, r1
   1d634:	mov	r1, r0
   1d638:	mov	r6, r2
   1d63c:	orr	r0, r4, r2
   1d640:	ldr	r2, [fp, #24]
   1d644:	orr	r0, r0, r2
   1d648:	cmp	r0, #0
   1d64c:	blt	1d700 <__assert_fail@plt+0xba60>
   1d650:	adds	sl, r6, r4
   1d654:	bvs	1d700 <__assert_fail@plt+0xba60>
   1d658:	mov	r5, #0
   1d65c:	cmp	r4, #1
   1d660:	blt	1d6b4 <__assert_fail@plt+0xba14>
   1d664:	mov	r9, r3
   1d668:	cmp	r6, #1
   1d66c:	blt	1d6bc <__assert_fail@plt+0xba1c>
   1d670:	mov	r0, sl
   1d674:	mov	r5, r1
   1d678:	bl	1a224 <__assert_fail@plt+0x8584>
   1d67c:	cmp	r0, #0
   1d680:	beq	1d700 <__assert_fail@plt+0xba60>
   1d684:	mov	r1, r8
   1d688:	mov	r2, r6
   1d68c:	mov	r7, r0
   1d690:	bl	118e0 <memcpy@plt>
   1d694:	add	r0, r7, r6
   1d698:	mov	r1, r9
   1d69c:	mov	r2, r4
   1d6a0:	bl	118e0 <memcpy@plt>
   1d6a4:	ldr	r2, [fp, #24]
   1d6a8:	mov	r1, r5
   1d6ac:	mov	r5, r7
   1d6b0:	b	1d6c0 <__assert_fail@plt+0xba20>
   1d6b4:	mov	r7, r8
   1d6b8:	b	1d6c0 <__assert_fail@plt+0xba20>
   1d6bc:	mov	r7, r9
   1d6c0:	add	r6, fp, #12
   1d6c4:	ldr	r0, [fp, #28]
   1d6c8:	ldm	r6, {r3, r4, r6}
   1d6cc:	str	r4, [sp]
   1d6d0:	stmib	sp, {r2, r6}
   1d6d4:	str	r0, [sp, #12]
   1d6d8:	mov	r0, r1
   1d6dc:	mov	r1, r7
   1d6e0:	mov	r2, sl
   1d6e4:	bl	1d288 <__assert_fail@plt+0xb5e8>
   1d6e8:	mov	r4, r0
   1d6ec:	mov	r0, r5
   1d6f0:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d6f4:	mov	r0, r4
   1d6f8:	sub	sp, fp, #28
   1d6fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d700:	mvn	r0, #1
   1d704:	sub	sp, fp, #28
   1d708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d70c:	push	{fp, lr}
   1d710:	mov	fp, sp
   1d714:	sub	sp, sp, #24
   1d718:	mov	ip, #0
   1d71c:	str	ip, [sp, #20]
   1d720:	ldr	ip, [fp, #24]
   1d724:	str	ip, [sp, #16]
   1d728:	ldr	ip, [fp, #20]
   1d72c:	str	ip, [sp, #12]
   1d730:	ldr	ip, [fp, #16]
   1d734:	str	ip, [sp, #8]
   1d738:	ldr	ip, [fp, #12]
   1d73c:	str	ip, [sp, #4]
   1d740:	ldr	ip, [fp, #8]
   1d744:	str	ip, [sp]
   1d748:	bl	1d620 <__assert_fail@plt+0xb980>
   1d74c:	mov	sp, fp
   1d750:	pop	{fp, pc}
   1d754:	ldrb	ip, [r0, #28]
   1d758:	cmp	r2, #0
   1d75c:	bic	ip, ip, #6
   1d760:	orrne	ip, ip, #2
   1d764:	strb	ip, [r0, #28]
   1d768:	ldr	r0, [sp]
   1d76c:	moveq	r0, r2
   1d770:	cmp	r2, #0
   1d774:	moveq	r3, r2
   1d778:	stm	r1, {r2, r3}
   1d77c:	str	r0, [r1, #8]
   1d780:	bx	lr
   1d784:	ldr	r1, [r0, #4]
   1d788:	movw	r2, #255	; 0xff
   1d78c:	movt	r2, #4
   1d790:	and	r1, r1, r2
   1d794:	cmp	r1, #3
   1d798:	beq	1d7ac <__assert_fail@plt+0xbb0c>
   1d79c:	cmp	r1, #6
   1d7a0:	bxne	lr
   1d7a4:	ldr	r0, [r0]
   1d7a8:	b	1d814 <__assert_fail@plt+0xbb74>
   1d7ac:	ldr	r0, [r0]
   1d7b0:	b	1a158 <__assert_fail@plt+0x84b8>
   1d7b4:	push	{r4, sl, fp, lr}
   1d7b8:	add	fp, sp, #8
   1d7bc:	mov	r4, r0
   1d7c0:	ldr	r0, [r0, #24]
   1d7c4:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d7c8:	ldr	r0, [r4, #36]	; 0x24
   1d7cc:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d7d0:	ldr	r0, [r4, #40]	; 0x28
   1d7d4:	add	r1, r4, #4
   1d7d8:	cmp	r0, r1
   1d7dc:	beq	1d7f0 <__assert_fail@plt+0xbb50>
   1d7e0:	ldr	r0, [r0, #8]
   1d7e4:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d7e8:	ldr	r0, [r4, #40]	; 0x28
   1d7ec:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d7f0:	ldr	r0, [r4, #12]
   1d7f4:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d7f8:	ldr	r0, [r4, #48]	; 0x30
   1d7fc:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d800:	ldr	r0, [r4, #44]	; 0x2c
   1d804:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d808:	mov	r0, r4
   1d80c:	pop	{r4, sl, fp, lr}
   1d810:	b	1a158 <__assert_fail@plt+0x84b8>
   1d814:	push	{r4, sl, fp, lr}
   1d818:	add	fp, sp, #8
   1d81c:	mov	r4, r0
   1d820:	ldr	r0, [r0]
   1d824:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d828:	ldr	r0, [r4, #4]
   1d82c:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d830:	ldr	r0, [r4, #8]
   1d834:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d838:	ldr	r0, [r4, #12]
   1d83c:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d840:	mov	r0, r4
   1d844:	pop	{r4, sl, fp, lr}
   1d848:	b	1a158 <__assert_fail@plt+0x84b8>
   1d84c:	push	{r4, r5, fp, lr}
   1d850:	add	fp, sp, #8
   1d854:	ldr	r4, [r0]
   1d858:	ldr	r0, [r4, #56]	; 0x38
   1d85c:	cmp	r0, #0
   1d860:	beq	1d878 <__assert_fail@plt+0xbbd8>
   1d864:	ldr	r5, [r0]
   1d868:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d86c:	cmp	r5, #0
   1d870:	mov	r0, r5
   1d874:	bne	1d864 <__assert_fail@plt+0xbbc4>
   1d878:	mov	r0, #31
   1d87c:	mov	r5, #0
   1d880:	str	r0, [r4, #64]	; 0x40
   1d884:	str	r5, [r4, #52]	; 0x34
   1d888:	str	r5, [r4, #56]	; 0x38
   1d88c:	ldr	r0, [r4, #16]
   1d890:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d894:	str	r5, [r4, #16]
   1d898:	pop	{r4, r5, fp, pc}
   1d89c:	push	{r4, sl, fp, lr}
   1d8a0:	add	fp, sp, #8
   1d8a4:	mov	r4, r0
   1d8a8:	ldr	r0, [r0, #8]
   1d8ac:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d8b0:	ldr	r0, [r4, #12]
   1d8b4:	bl	1a158 <__assert_fail@plt+0x84b8>
   1d8b8:	ldrb	r0, [r4, #75]	; 0x4b
   1d8bc:	cmp	r0, #0
   1d8c0:	popeq	{r4, sl, fp, pc}
   1d8c4:	ldr	r0, [r4, #4]
   1d8c8:	pop	{r4, sl, fp, lr}
   1d8cc:	b	1a158 <__assert_fail@plt+0x84b8>
   1d8d0:	push	{r4, r5, r6, r7, fp, lr}
   1d8d4:	add	fp, sp, #16
   1d8d8:	mov	r5, r0
   1d8dc:	ldr	r0, [r0, #80]	; 0x50
   1d8e0:	mov	r4, r1
   1d8e4:	cmp	r0, #2
   1d8e8:	blt	1d934 <__assert_fail@plt+0xbc94>
   1d8ec:	mov	r6, #12
   1d8f0:	cmn	r4, #-1073741823	; 0xc0000001
   1d8f4:	bhi	1d960 <__assert_fail@plt+0xbcc0>
   1d8f8:	ldr	r0, [r5, #8]
   1d8fc:	lsl	r7, r4, #2
   1d900:	mov	r1, r7
   1d904:	bl	1a2b4 <__assert_fail@plt+0x8614>
   1d908:	cmp	r0, #0
   1d90c:	beq	1d960 <__assert_fail@plt+0xbcc0>
   1d910:	str	r0, [r5, #8]
   1d914:	ldr	r0, [r5, #12]
   1d918:	cmp	r0, #0
   1d91c:	beq	1d934 <__assert_fail@plt+0xbc94>
   1d920:	mov	r1, r7
   1d924:	bl	1a2b4 <__assert_fail@plt+0x8614>
   1d928:	cmp	r0, #0
   1d92c:	beq	1d960 <__assert_fail@plt+0xbcc0>
   1d930:	str	r0, [r5, #12]
   1d934:	ldrb	r0, [r5, #75]	; 0x4b
   1d938:	cmp	r0, #0
   1d93c:	beq	1d958 <__assert_fail@plt+0xbcb8>
   1d940:	ldr	r0, [r5, #4]
   1d944:	mov	r1, r4
   1d948:	bl	1a2b4 <__assert_fail@plt+0x8614>
   1d94c:	cmp	r0, #0
   1d950:	beq	1d968 <__assert_fail@plt+0xbcc8>
   1d954:	str	r0, [r5, #4]
   1d958:	mov	r6, #0
   1d95c:	str	r4, [r5, #36]	; 0x24
   1d960:	mov	r0, r6
   1d964:	pop	{r4, r5, r6, r7, fp, pc}
   1d968:	mov	r6, #12
   1d96c:	b	1d960 <__assert_fail@plt+0xbcc0>
   1d970:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d974:	add	fp, sp, #28
   1d978:	sub	sp, sp, #92	; 0x5c
   1d97c:	mov	r4, r0
   1d980:	ldrb	r0, [r0, #74]	; 0x4a
   1d984:	ldr	r2, [r4, #36]	; 0x24
   1d988:	ldr	r1, [r4, #48]	; 0x30
   1d98c:	ldr	r5, [r4, #28]
   1d990:	cmp	r2, r1
   1d994:	movgt	r2, r1
   1d998:	cmp	r0, #0
   1d99c:	str	r2, [sp, #4]
   1d9a0:	bne	1d9c0 <__assert_fail@plt+0xbd20>
   1d9a4:	mov	r8, r4
   1d9a8:	ldr	r0, [r8, #64]!	; 0x40
   1d9ac:	cmp	r0, #0
   1d9b0:	bne	1d9c0 <__assert_fail@plt+0xbd20>
   1d9b4:	ldrb	r0, [r4, #76]	; 0x4c
   1d9b8:	cmp	r0, #0
   1d9bc:	beq	1d9c8 <__assert_fail@plt+0xbd28>
   1d9c0:	ldr	r7, [r4, #32]
   1d9c4:	b	1db94 <__assert_fail@plt+0xbef4>
   1d9c8:	ldr	r0, [sp, #4]
   1d9cc:	cmp	r0, r5
   1d9d0:	ble	1d9e0 <__assert_fail@plt+0xbd40>
   1d9d4:	add	r9, r4, #16
   1d9d8:	mov	sl, r5
   1d9dc:	b	1da34 <__assert_fail@plt+0xbd94>
   1d9e0:	mov	sl, r5
   1d9e4:	mov	r7, r5
   1d9e8:	b	1dca0 <__assert_fail@plt+0xc000>
   1d9ec:	add	r0, r5, #1
   1d9f0:	cmp	r0, #2
   1d9f4:	bcc	1da08 <__assert_fail@plt+0xbd68>
   1d9f8:	ldr	r0, [r4, #36]	; 0x24
   1d9fc:	ldr	r1, [r4, #48]	; 0x30
   1da00:	cmp	r0, r1
   1da04:	blt	1db80 <__assert_fail@plt+0xbee0>
   1da08:	ldr	r0, [r4, #4]
   1da0c:	cmn	r5, #1
   1da10:	strb	sl, [r0, r7]
   1da14:	ldr	r0, [r4, #8]
   1da18:	str	sl, [r0, r7, lsl #2]
   1da1c:	add	sl, r7, #1
   1da20:	bne	1db64 <__assert_fail@plt+0xbec4>
   1da24:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1da28:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1da2c:	stm	r9, {r0, r1}
   1da30:	b	1db64 <__assert_fail@plt+0xbec4>
   1da34:	ldr	r7, [r4, #24]
   1da38:	ldr	r5, [r4]
   1da3c:	mov	r6, sl
   1da40:	add	r0, r7, sl
   1da44:	ldrb	sl, [r5, r0]
   1da48:	tst	sl, #128	; 0x80
   1da4c:	bne	1da90 <__assert_fail@plt+0xbdf0>
   1da50:	mov	r0, r9
   1da54:	bl	11910 <mbsinit@plt>
   1da58:	cmp	r0, #0
   1da5c:	beq	1da90 <__assert_fail@plt+0xbdf0>
   1da60:	mov	r0, sl
   1da64:	bl	11c40 <towupper@plt>
   1da68:	cmp	r0, #128	; 0x80
   1da6c:	bcs	1da88 <__assert_fail@plt+0xbde8>
   1da70:	ldr	r1, [r4, #4]
   1da74:	add	sl, r6, #1
   1da78:	strb	r0, [r1, r6]
   1da7c:	ldr	r1, [r4, #8]
   1da80:	str	r0, [r1, r6, lsl #2]
   1da84:	b	1db64 <__assert_fail@plt+0xbec4>
   1da88:	ldr	r5, [r4]
   1da8c:	ldr	r7, [r4, #24]
   1da90:	ldm	r9, {r0, r1}
   1da94:	mov	r3, r9
   1da98:	str	r0, [fp, #-40]	; 0xffffffd8
   1da9c:	ldr	r0, [sp, #4]
   1daa0:	str	r1, [fp, #-36]	; 0xffffffdc
   1daa4:	sub	r2, r0, r6
   1daa8:	add	r0, r5, r7
   1daac:	mov	r7, r6
   1dab0:	add	r1, r0, r6
   1dab4:	add	r0, sp, #12
   1dab8:	bl	1a254 <__assert_fail@plt+0x85b4>
   1dabc:	mov	r5, r0
   1dac0:	sub	r0, r0, #1
   1dac4:	cmn	r0, #4
   1dac8:	bhi	1d9ec <__assert_fail@plt+0xbd4c>
   1dacc:	ldr	r0, [sp, #12]
   1dad0:	bl	11c40 <towupper@plt>
   1dad4:	mov	r6, r0
   1dad8:	ldr	r0, [sp, #12]
   1dadc:	cmp	r6, r0
   1dae0:	bne	1db00 <__assert_fail@plt+0xbe60>
   1dae4:	ldr	r1, [r4]
   1dae8:	ldr	r2, [r4, #24]
   1daec:	ldr	r0, [r4, #4]
   1daf0:	add	r1, r1, r2
   1daf4:	add	r0, r0, r7
   1daf8:	add	r1, r1, r7
   1dafc:	b	1db28 <__assert_fail@plt+0xbe88>
   1db00:	add	sl, sp, #16
   1db04:	mov	r1, r6
   1db08:	sub	r2, fp, #40	; 0x28
   1db0c:	mov	r0, sl
   1db10:	bl	11838 <wcrtomb@plt>
   1db14:	cmp	r5, r0
   1db18:	bne	1db78 <__assert_fail@plt+0xbed8>
   1db1c:	ldr	r0, [r4, #4]
   1db20:	mov	r1, sl
   1db24:	add	r0, r0, r7
   1db28:	mov	r2, r5
   1db2c:	bl	118e0 <memcpy@plt>
   1db30:	ldr	r0, [r4, #8]
   1db34:	add	sl, r7, #1
   1db38:	str	r6, [r0, r7, lsl #2]
   1db3c:	add	r6, r5, r7
   1db40:	cmp	sl, r6
   1db44:	bge	1db64 <__assert_fail@plt+0xbec4>
   1db48:	add	r0, r0, r7, lsl #2
   1db4c:	mvn	r1, #3
   1db50:	add	r2, r1, r5, lsl #2
   1db54:	add	r0, r0, #4
   1db58:	mov	r1, #255	; 0xff
   1db5c:	bl	11b08 <memset@plt>
   1db60:	mov	sl, r6
   1db64:	ldr	r0, [sp, #4]
   1db68:	mov	r7, sl
   1db6c:	cmp	r0, sl
   1db70:	bgt	1da34 <__assert_fail@plt+0xbd94>
   1db74:	b	1dca0 <__assert_fail@plt+0xc000>
   1db78:	mov	sl, r7
   1db7c:	b	1dbac <__assert_fail@plt+0xbf0c>
   1db80:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1db84:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1db88:	mov	sl, r7
   1db8c:	stm	r9, {r0, r1}
   1db90:	b	1dca0 <__assert_fail@plt+0xc000>
   1db94:	ldr	r0, [sp, #4]
   1db98:	cmp	r5, r0
   1db9c:	bge	1dc9c <__assert_fail@plt+0xbffc>
   1dba0:	add	r8, r4, #64	; 0x40
   1dba4:	add	r9, r4, #16
   1dba8:	mov	sl, r5
   1dbac:	ldm	r9, {r0, r1}
   1dbb0:	str	r7, [sp]
   1dbb4:	str	r0, [fp, #-40]	; 0xffffffd8
   1dbb8:	ldr	r0, [sp, #4]
   1dbbc:	str	r1, [fp, #-36]	; 0xffffffdc
   1dbc0:	sub	r2, r0, sl
   1dbc4:	ldr	r0, [r8]
   1dbc8:	cmp	r0, #0
   1dbcc:	bne	1dcb4 <__assert_fail@plt+0xc014>
   1dbd0:	ldr	r0, [r4]
   1dbd4:	ldr	r1, [r4, #24]
   1dbd8:	add	r0, r0, r1
   1dbdc:	add	r5, r0, r7
   1dbe0:	add	r0, sp, #8
   1dbe4:	mov	r1, r5
   1dbe8:	mov	r3, r9
   1dbec:	bl	1a254 <__assert_fail@plt+0x85b4>
   1dbf0:	sub	r8, r0, #1
   1dbf4:	mov	r6, r0
   1dbf8:	cmn	r8, #4
   1dbfc:	bhi	1dd08 <__assert_fail@plt+0xc068>
   1dc00:	ldr	r0, [sp, #8]
   1dc04:	bl	11c40 <towupper@plt>
   1dc08:	mov	r7, r0
   1dc0c:	ldr	r0, [sp, #8]
   1dc10:	cmp	r7, r0
   1dc14:	bne	1dc24 <__assert_fail@plt+0xbf84>
   1dc18:	ldr	r0, [r4, #4]
   1dc1c:	mov	r1, r5
   1dc20:	b	1dc44 <__assert_fail@plt+0xbfa4>
   1dc24:	add	r0, sp, #16
   1dc28:	sub	r2, fp, #40	; 0x28
   1dc2c:	mov	r1, r7
   1dc30:	bl	11838 <wcrtomb@plt>
   1dc34:	cmp	r0, r6
   1dc38:	bne	1dd84 <__assert_fail@plt+0xc0e4>
   1dc3c:	ldr	r0, [r4, #4]
   1dc40:	add	r1, sp, #16
   1dc44:	add	r0, r0, sl
   1dc48:	mov	r2, r6
   1dc4c:	bl	118e0 <memcpy@plt>
   1dc50:	ldrb	r0, [r4, #76]	; 0x4c
   1dc54:	cmp	r0, #0
   1dc58:	bne	1dea0 <__assert_fail@plt+0xc200>
   1dc5c:	ldr	r0, [r4, #8]
   1dc60:	add	r5, r6, sl
   1dc64:	add	r1, sl, #1
   1dc68:	cmp	r1, r5
   1dc6c:	str	r7, [r0, sl, lsl #2]
   1dc70:	ldr	r7, [sp]
   1dc74:	add	r7, r6, r7
   1dc78:	bge	1dc94 <__assert_fail@plt+0xbff4>
   1dc7c:	add	r0, r0, r1, lsl #2
   1dc80:	mvn	r1, #3
   1dc84:	add	r2, r1, r6, lsl #2
   1dc88:	mov	r1, #255	; 0xff
   1dc8c:	bl	11b08 <memset@plt>
   1dc90:	b	1db94 <__assert_fail@plt+0xbef4>
   1dc94:	mov	r5, r1
   1dc98:	b	1db94 <__assert_fail@plt+0xbef4>
   1dc9c:	mov	sl, r5
   1dca0:	mov	r0, #0
   1dca4:	str	sl, [r4, #28]
   1dca8:	str	r7, [r4, #32]
   1dcac:	sub	sp, fp, #28
   1dcb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dcb4:	cmp	r2, #1
   1dcb8:	add	r5, sp, #16
   1dcbc:	ldrge	r1, [r4, #80]	; 0x50
   1dcc0:	cmpge	r1, #1
   1dcc4:	blt	1dbe0 <__assert_fail@plt+0xbf40>
   1dcc8:	mov	r6, r7
   1dccc:	ldr	r7, [r4, #24]
   1dcd0:	ldr	r3, [r4]
   1dcd4:	add	r5, sp, #16
   1dcd8:	add	r7, r6, r7
   1dcdc:	add	r3, r3, r7
   1dce0:	mov	r7, #0
   1dce4:	ldrb	r6, [r3, r7]
   1dce8:	ldrb	r6, [r0, r6]
   1dcec:	strb	r6, [r5, r7]
   1dcf0:	add	r7, r7, #1
   1dcf4:	cmp	r7, r2
   1dcf8:	bge	1dbe0 <__assert_fail@plt+0xbf40>
   1dcfc:	cmp	r7, r1
   1dd00:	blt	1dce4 <__assert_fail@plt+0xc044>
   1dd04:	b	1dbe0 <__assert_fail@plt+0xbf40>
   1dd08:	add	r0, r6, #1
   1dd0c:	cmp	r0, #2
   1dd10:	bcc	1dd24 <__assert_fail@plt+0xc084>
   1dd14:	ldr	r0, [r4, #36]	; 0x24
   1dd18:	ldr	r1, [r4, #48]	; 0x30
   1dd1c:	cmp	r0, r1
   1dd20:	blt	1dec4 <__assert_fail@plt+0xc224>
   1dd24:	ldr	r2, [r4, #24]
   1dd28:	ldr	r7, [sp]
   1dd2c:	ldr	r0, [r4]
   1dd30:	ldr	r1, [r4, #64]	; 0x40
   1dd34:	add	r5, sl, #1
   1dd38:	add	r2, r2, r7
   1dd3c:	cmp	r1, #0
   1dd40:	ldrb	r0, [r0, r2]
   1dd44:	ldrbne	r0, [r1, r0]
   1dd48:	ldr	r1, [r4, #4]
   1dd4c:	strb	r0, [r1, sl]
   1dd50:	ldrb	r1, [r4, #76]	; 0x4c
   1dd54:	cmp	r1, #0
   1dd58:	ldrne	r1, [r4, #12]
   1dd5c:	strne	r7, [r1, sl, lsl #2]
   1dd60:	add	r7, r7, #1
   1dd64:	cmn	r6, #1
   1dd68:	ldr	r1, [r4, #8]
   1dd6c:	str	r0, [r1, sl, lsl #2]
   1dd70:	bne	1db94 <__assert_fail@plt+0xbef4>
   1dd74:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1dd78:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1dd7c:	stm	r9, {r0, r1}
   1dd80:	b	1db94 <__assert_fail@plt+0xbef4>
   1dd84:	mov	r2, r0
   1dd88:	cmn	r0, #1
   1dd8c:	beq	1dc18 <__assert_fail@plt+0xbf78>
   1dd90:	ldr	r1, [r4, #36]	; 0x24
   1dd94:	add	r5, r2, sl
   1dd98:	cmp	r5, r1
   1dd9c:	bhi	1dec4 <__assert_fail@plt+0xc224>
   1dda0:	ldr	r0, [r4, #12]
   1dda4:	cmp	r0, #0
   1dda8:	bne	1ddc8 <__assert_fail@plt+0xc128>
   1ddac:	lsl	r0, r1, #2
   1ddb0:	mov	r9, r2
   1ddb4:	bl	1a224 <__assert_fail@plt+0x8584>
   1ddb8:	mov	r2, r9
   1ddbc:	cmp	r0, #0
   1ddc0:	str	r0, [r4, #12]
   1ddc4:	beq	1ded8 <__assert_fail@plt+0xc238>
   1ddc8:	ldrb	r1, [r4, #76]	; 0x4c
   1ddcc:	cmp	r1, #0
   1ddd0:	bne	1ddf8 <__assert_fail@plt+0xc158>
   1ddd4:	cmp	sl, #0
   1ddd8:	beq	1ddf0 <__assert_fail@plt+0xc150>
   1dddc:	mov	r1, #0
   1dde0:	str	r1, [r0, r1, lsl #2]
   1dde4:	add	r1, r1, #1
   1dde8:	cmp	sl, r1
   1ddec:	bne	1dde0 <__assert_fail@plt+0xc140>
   1ddf0:	mov	r0, #1
   1ddf4:	strb	r0, [r4, #76]	; 0x4c
   1ddf8:	ldr	r0, [r4, #4]
   1ddfc:	add	r1, sp, #16
   1de00:	mov	r9, r2
   1de04:	add	r0, r0, sl
   1de08:	bl	118e0 <memcpy@plt>
   1de0c:	ldr	r1, [r4, #8]
   1de10:	ldr	r3, [sp]
   1de14:	mov	lr, r9
   1de18:	cmp	r9, #2
   1de1c:	str	r7, [r1, sl, lsl #2]
   1de20:	ldr	r0, [r4, #12]
   1de24:	str	r3, [r0, sl, lsl #2]
   1de28:	bcc	1de60 <__assert_fail@plt+0xc1c0>
   1de2c:	add	r0, r0, sl, lsl #2
   1de30:	add	r1, r1, sl, lsl #2
   1de34:	mov	r2, #1
   1de38:	mvn	ip, #0
   1de3c:	cmp	r2, r6
   1de40:	mov	r7, r8
   1de44:	movcc	r7, r2
   1de48:	add	r7, r7, r3
   1de4c:	str	r7, [r0, r2, lsl #2]
   1de50:	str	ip, [r1, r2, lsl #2]
   1de54:	add	r2, r2, #1
   1de58:	cmp	lr, r2
   1de5c:	bne	1de3c <__assert_fail@plt+0xc19c>
   1de60:	ldr	r0, [r4, #48]	; 0x30
   1de64:	ldr	r2, [r4, #52]	; 0x34
   1de68:	sub	r1, lr, r6
   1de6c:	mov	r7, r3
   1de70:	add	r7, r6, r7
   1de74:	add	r0, r0, r1
   1de78:	cmp	r2, r3
   1de7c:	str	r0, [r4, #48]	; 0x30
   1de80:	ldrgt	r2, [r4, #56]	; 0x38
   1de84:	addgt	r1, r2, r1
   1de88:	strgt	r1, [r4, #56]	; 0x38
   1de8c:	ldr	r1, [r4, #36]	; 0x24
   1de90:	cmp	r1, r0
   1de94:	movgt	r1, r0
   1de98:	str	r1, [sp, #4]
   1de9c:	b	1db94 <__assert_fail@plt+0xbef4>
   1dea0:	ldr	r0, [r4, #12]
   1dea4:	ldr	r1, [sp]
   1dea8:	mov	r2, r6
   1deac:	add	r0, r0, sl, lsl #2
   1deb0:	str	r1, [r0], #4
   1deb4:	add	r1, r1, #1
   1deb8:	subs	r2, r2, #1
   1debc:	bne	1deb0 <__assert_fail@plt+0xc210>
   1dec0:	b	1dc5c <__assert_fail@plt+0xbfbc>
   1dec4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1dec8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1decc:	stm	r9, {r0, r1}
   1ded0:	ldr	r7, [sp]
   1ded4:	b	1dca0 <__assert_fail@plt+0xc000>
   1ded8:	mov	r0, #12
   1dedc:	b	1dcac <__assert_fail@plt+0xc00c>
   1dee0:	push	{r4, r5, r6, sl, fp, lr}
   1dee4:	add	fp, sp, #16
   1dee8:	mov	r4, r0
   1deec:	ldr	r5, [r0, #28]
   1def0:	ldr	r6, [r0, #36]	; 0x24
   1def4:	ldr	r0, [r0, #48]	; 0x30
   1def8:	cmp	r6, r0
   1defc:	movgt	r6, r0
   1df00:	cmp	r5, r6
   1df04:	bge	1df40 <__assert_fail@plt+0xc2a0>
   1df08:	ldr	r0, [r4]
   1df0c:	ldr	r2, [r4, #24]
   1df10:	ldr	r1, [r4, #64]	; 0x40
   1df14:	add	r0, r0, r2
   1df18:	cmp	r1, #0
   1df1c:	ldrb	r0, [r0, r5]
   1df20:	ldrbne	r0, [r1, r0]
   1df24:	bl	11ba4 <toupper@plt>
   1df28:	ldr	r1, [r4, #4]
   1df2c:	strb	r0, [r1, r5]
   1df30:	add	r5, r5, #1
   1df34:	cmp	r5, r6
   1df38:	blt	1df08 <__assert_fail@plt+0xc268>
   1df3c:	mov	r5, r6
   1df40:	str	r5, [r4, #28]
   1df44:	str	r5, [r4, #32]
   1df48:	pop	{r4, r5, r6, sl, fp, pc}
   1df4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df50:	add	fp, sp, #28
   1df54:	sub	sp, sp, #68	; 0x44
   1df58:	mov	r4, r0
   1df5c:	ldr	r6, [r0, #28]
   1df60:	ldr	r7, [r0, #36]	; 0x24
   1df64:	ldr	r0, [r0, #48]	; 0x30
   1df68:	cmp	r7, r0
   1df6c:	movgt	r7, r0
   1df70:	cmp	r7, r6
   1df74:	ble	1e114 <__assert_fail@plt+0xc474>
   1df78:	add	r8, r4, #16
   1df7c:	mov	r5, sp
   1df80:	ldm	r8, {r9, sl}
   1df84:	ldr	r0, [r4, #64]	; 0x40
   1df88:	sub	r2, r7, r6
   1df8c:	cmp	r0, #0
   1df90:	bne	1e060 <__assert_fail@plt+0xc3c0>
   1df94:	ldr	r0, [r4]
   1df98:	ldr	r1, [r4, #24]
   1df9c:	add	r0, r0, r1
   1dfa0:	add	r1, r0, r6
   1dfa4:	mov	r0, r5
   1dfa8:	mov	r3, r8
   1dfac:	bl	1a254 <__assert_fail@plt+0x85b4>
   1dfb0:	add	r1, r0, #1
   1dfb4:	cmp	r1, #2
   1dfb8:	bcc	1dfd4 <__assert_fail@plt+0xc334>
   1dfbc:	cmn	r0, #2
   1dfc0:	bne	1e010 <__assert_fail@plt+0xc370>
   1dfc4:	ldr	r0, [r4, #36]	; 0x24
   1dfc8:	ldr	r1, [r4, #48]	; 0x30
   1dfcc:	cmp	r0, r1
   1dfd0:	blt	1e110 <__assert_fail@plt+0xc470>
   1dfd4:	ldr	r1, [r4, #24]
   1dfd8:	ldr	r0, [r4]
   1dfdc:	mov	r2, sl
   1dfe0:	mov	sl, r5
   1dfe4:	add	r1, r1, r6
   1dfe8:	ldrb	r1, [r0, r1]
   1dfec:	str	r1, [sp]
   1dff0:	ldr	r0, [r4, #64]	; 0x40
   1dff4:	cmp	r0, #0
   1dff8:	ldrbne	r1, [r0, r1]
   1dffc:	mov	r0, #1
   1e000:	strne	r1, [sp]
   1e004:	str	r9, [r8]
   1e008:	str	r2, [r8, #4]
   1e00c:	b	1e018 <__assert_fail@plt+0xc378>
   1e010:	ldr	r1, [sp]
   1e014:	mov	sl, r5
   1e018:	ldr	r3, [r4, #8]
   1e01c:	add	r5, r0, r6
   1e020:	str	r1, [r3, r6, lsl #2]
   1e024:	add	r1, r6, #1
   1e028:	cmp	r1, r5
   1e02c:	bge	1e04c <__assert_fail@plt+0xc3ac>
   1e030:	mvn	r1, #3
   1e034:	add	r2, r1, r0, lsl #2
   1e038:	add	r0, r3, r6, lsl #2
   1e03c:	mov	r1, #255	; 0xff
   1e040:	add	r0, r0, #4
   1e044:	bl	11b08 <memset@plt>
   1e048:	mov	r1, r5
   1e04c:	cmp	r7, r1
   1e050:	mov	r6, r1
   1e054:	mov	r5, sl
   1e058:	bgt	1df80 <__assert_fail@plt+0xc2e0>
   1e05c:	b	1e118 <__assert_fail@plt+0xc478>
   1e060:	cmp	r2, #1
   1e064:	add	r1, sp, #4
   1e068:	blt	1dfa4 <__assert_fail@plt+0xc304>
   1e06c:	ldr	r1, [r4, #80]	; 0x50
   1e070:	cmp	r1, #1
   1e074:	add	r1, sp, #4
   1e078:	blt	1dfa4 <__assert_fail@plt+0xc304>
   1e07c:	ldm	r4, {r1, r3}
   1e080:	mov	lr, r5
   1e084:	ldr	r5, [r4, #24]
   1e088:	cmp	r2, #2
   1e08c:	add	r5, r6, r5
   1e090:	ldrb	r1, [r1, r5]
   1e094:	mov	r5, lr
   1e098:	ldrb	r0, [r0, r1]
   1e09c:	add	r1, sp, #4
   1e0a0:	strb	r0, [r3, r6]
   1e0a4:	strb	r0, [sp, #4]
   1e0a8:	blt	1dfa4 <__assert_fail@plt+0xc304>
   1e0ac:	ldr	r0, [r4, #80]	; 0x50
   1e0b0:	add	r1, sp, #4
   1e0b4:	cmp	r0, #2
   1e0b8:	blt	1dfa4 <__assert_fail@plt+0xc304>
   1e0bc:	mov	r0, #1
   1e0c0:	ldm	r4, {r1, ip}
   1e0c4:	ldr	r5, [r4, #24]
   1e0c8:	ldr	r3, [r4, #64]	; 0x40
   1e0cc:	add	r1, r1, r5
   1e0d0:	add	r1, r1, r6
   1e0d4:	ldrb	r1, [r1, r0]
   1e0d8:	ldrb	r1, [r3, r1]
   1e0dc:	add	r3, ip, r6
   1e0e0:	strb	r1, [r3, r0]
   1e0e4:	add	r3, sp, #4
   1e0e8:	strb	r1, [r3, r0]
   1e0ec:	add	r0, r0, #1
   1e0f0:	cmp	r0, r2
   1e0f4:	bge	1e104 <__assert_fail@plt+0xc464>
   1e0f8:	ldr	r1, [r4, #80]	; 0x50
   1e0fc:	cmp	r0, r1
   1e100:	blt	1e0c0 <__assert_fail@plt+0xc420>
   1e104:	add	r1, sp, #4
   1e108:	mov	r5, lr
   1e10c:	b	1dfa4 <__assert_fail@plt+0xc304>
   1e110:	stm	r8, {r9, sl}
   1e114:	mov	r1, r6
   1e118:	str	r1, [r4, #28]
   1e11c:	str	r1, [r4, #32]
   1e120:	sub	sp, fp, #28
   1e124:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e128:	ldr	ip, [r0, #36]	; 0x24
   1e12c:	ldr	r3, [r0, #48]	; 0x30
   1e130:	ldr	r1, [r0, #28]
   1e134:	cmp	ip, r3
   1e138:	movgt	ip, r3
   1e13c:	cmp	r1, ip
   1e140:	bge	1e17c <__assert_fail@plt+0xc4dc>
   1e144:	push	{r4, sl, fp, lr}
   1e148:	add	fp, sp, #8
   1e14c:	ldm	r0, {r3, lr}
   1e150:	ldr	r2, [r0, #24]
   1e154:	ldr	r4, [r0, #64]	; 0x40
   1e158:	add	r2, r3, r2
   1e15c:	ldrb	r2, [r2, r1]
   1e160:	ldrb	r2, [r4, r2]
   1e164:	strb	r2, [lr, r1]
   1e168:	add	r1, r1, #1
   1e16c:	cmp	r1, ip
   1e170:	blt	1e14c <__assert_fail@plt+0xc4ac>
   1e174:	mov	r1, ip
   1e178:	pop	{r4, sl, fp, lr}
   1e17c:	str	r1, [r0, #28]
   1e180:	str	r1, [r0, #32]
   1e184:	bx	lr
   1e188:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e18c:	add	fp, sp, #28
   1e190:	sub	sp, sp, #28
   1e194:	ldr	r9, [r1]
   1e198:	mov	r5, r0
   1e19c:	ldr	r8, [fp, #12]
   1e1a0:	mov	r6, r2
   1e1a4:	str	r1, [sp, #12]
   1e1a8:	str	r3, [sp, #16]
   1e1ac:	ldr	r0, [r9, #84]	; 0x54
   1e1b0:	str	r8, [sp, #4]
   1e1b4:	str	r0, [sp, #8]
   1e1b8:	ldr	r0, [fp, #8]
   1e1bc:	str	r0, [sp]
   1e1c0:	mov	r0, r5
   1e1c4:	bl	1e9c4 <__assert_fail@plt+0xcd24>
   1e1c8:	mov	r4, r0
   1e1cc:	cmp	r0, #0
   1e1d0:	bne	1e1e0 <__assert_fail@plt+0xc540>
   1e1d4:	ldr	r0, [r8]
   1e1d8:	cmp	r0, #0
   1e1dc:	bne	1e2d0 <__assert_fail@plt+0xc630>
   1e1e0:	ldr	r0, [sp, #16]
   1e1e4:	ldr	r8, [fp, #8]
   1e1e8:	mov	r7, #10
   1e1ec:	orr	sl, r0, #8388608	; 0x800000
   1e1f0:	ldrb	r0, [r6, #4]
   1e1f4:	cmp	r0, #10
   1e1f8:	bne	1e2d4 <__assert_fail@plt+0xc634>
   1e1fc:	mov	r0, r6
   1e200:	mov	r1, r5
   1e204:	mov	r2, sl
   1e208:	bl	1e338 <__assert_fail@plt+0xc698>
   1e20c:	ldr	r1, [r5, #40]	; 0x28
   1e210:	mov	r2, #0
   1e214:	add	r0, r1, r0
   1e218:	str	r0, [r5, #40]	; 0x28
   1e21c:	ldrb	r0, [r6, #4]
   1e220:	orr	r1, r0, #8
   1e224:	cmp	r1, #10
   1e228:	bne	1e258 <__assert_fail@plt+0xc5b8>
   1e22c:	mov	r0, #0
   1e230:	str	r7, [sp, #24]
   1e234:	mov	r1, r4
   1e238:	add	r3, sp, #20
   1e23c:	str	r0, [sp, #20]
   1e240:	mov	r0, r9
   1e244:	bl	2016c <__assert_fail@plt+0xe4cc>
   1e248:	mov	r4, r0
   1e24c:	cmp	r0, #0
   1e250:	bne	1e1f0 <__assert_fail@plt+0xc550>
   1e254:	b	1e2c4 <__assert_fail@plt+0xc624>
   1e258:	cmp	r8, #0
   1e25c:	beq	1e268 <__assert_fail@plt+0xc5c8>
   1e260:	cmp	r0, #9
   1e264:	beq	1e22c <__assert_fail@plt+0xc58c>
   1e268:	ldr	r0, [sp, #8]
   1e26c:	ldr	r7, [r9, #84]	; 0x54
   1e270:	ldr	r1, [sp, #12]
   1e274:	ldr	r3, [sp, #16]
   1e278:	mov	r2, r6
   1e27c:	str	r0, [r9, #84]	; 0x54
   1e280:	str	r8, [sp]
   1e284:	ldr	r8, [fp, #12]
   1e288:	mov	r0, r5
   1e28c:	str	r8, [sp, #4]
   1e290:	bl	1e9c4 <__assert_fail@plt+0xcd24>
   1e294:	mov	r2, r0
   1e298:	cmp	r0, #0
   1e29c:	bne	1e2ac <__assert_fail@plt+0xc60c>
   1e2a0:	ldr	r0, [r8]
   1e2a4:	cmp	r0, #0
   1e2a8:	bne	1e2e0 <__assert_fail@plt+0xc640>
   1e2ac:	ldr	r0, [r9, #84]	; 0x54
   1e2b0:	ldr	r8, [fp, #8]
   1e2b4:	orr	r0, r0, r7
   1e2b8:	mov	r7, #10
   1e2bc:	str	r0, [r9, #84]	; 0x54
   1e2c0:	b	1e22c <__assert_fail@plt+0xc58c>
   1e2c4:	ldr	r1, [fp, #12]
   1e2c8:	mov	r0, #12
   1e2cc:	str	r0, [r1]
   1e2d0:	mov	r4, #0
   1e2d4:	mov	r0, r4
   1e2d8:	sub	sp, fp, #28
   1e2dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e2e0:	cmp	r4, #0
   1e2e4:	beq	1e2d0 <__assert_fail@plt+0xc630>
   1e2e8:	mov	r5, r4
   1e2ec:	ldr	r4, [r4, #4]
   1e2f0:	cmp	r4, #0
   1e2f4:	bne	1e2e8 <__assert_fail@plt+0xc648>
   1e2f8:	ldr	r4, [r5, #8]
   1e2fc:	cmp	r4, #0
   1e300:	bne	1e2e8 <__assert_fail@plt+0xc648>
   1e304:	add	r0, r5, #20
   1e308:	bl	1d784 <__assert_fail@plt+0xbae4>
   1e30c:	ldr	r0, [r5]
   1e310:	cmp	r0, #0
   1e314:	beq	1e2d0 <__assert_fail@plt+0xc630>
   1e318:	ldr	r4, [r0, #8]
   1e31c:	cmp	r4, r5
   1e320:	mov	r5, r0
   1e324:	beq	1e304 <__assert_fail@plt+0xc664>
   1e328:	cmp	r4, #0
   1e32c:	mov	r5, r0
   1e330:	beq	1e304 <__assert_fail@plt+0xc664>
   1e334:	b	1e2e8 <__assert_fail@plt+0xc648>
   1e338:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e33c:	add	fp, sp, #24
   1e340:	sub	sp, sp, #8
   1e344:	mov	r9, r0
   1e348:	mov	r7, r1
   1e34c:	ldr	r0, [r1, #40]	; 0x28
   1e350:	ldr	r1, [r1, #56]	; 0x38
   1e354:	cmp	r1, r0
   1e358:	ble	1e440 <__assert_fail@plt+0xc7a0>
   1e35c:	ldr	r1, [r7, #4]
   1e360:	mov	r5, r9
   1e364:	mov	r8, r2
   1e368:	ldrb	r6, [r1, r0]
   1e36c:	strb	r6, [r5], #4
   1e370:	ldr	r0, [r5]
   1e374:	bic	r1, r0, #6291456	; 0x600000
   1e378:	str	r1, [r5]
   1e37c:	ldr	r3, [r7, #80]	; 0x50
   1e380:	cmp	r3, #2
   1e384:	blt	1e3a8 <__assert_fail@plt+0xc708>
   1e388:	ldr	r2, [r7, #28]
   1e38c:	ldr	r1, [r7, #40]	; 0x28
   1e390:	cmp	r1, r2
   1e394:	beq	1e3a8 <__assert_fail@plt+0xc708>
   1e398:	ldr	r2, [r7, #8]
   1e39c:	ldr	r1, [r2, r1, lsl #2]
   1e3a0:	cmn	r1, #1
   1e3a4:	beq	1e6fc <__assert_fail@plt+0xca5c>
   1e3a8:	movw	r1, #65280	; 0xff00
   1e3ac:	cmp	r6, #92	; 0x5c
   1e3b0:	movt	r1, #65439	; 0xff9f
   1e3b4:	bne	1e450 <__assert_fail@plt+0xc7b0>
   1e3b8:	ldr	r6, [r7, #40]	; 0x28
   1e3bc:	ldr	r4, [r7, #48]	; 0x30
   1e3c0:	add	r2, r6, #1
   1e3c4:	cmp	r2, r4
   1e3c8:	bge	1e4a4 <__assert_fail@plt+0xc804>
   1e3cc:	ldrb	r4, [r7, #75]	; 0x4b
   1e3d0:	cmp	r4, #0
   1e3d4:	bne	1e954 <__assert_fail@plt+0xccb4>
   1e3d8:	ldr	r3, [r7, #4]
   1e3dc:	ldrb	r6, [r3, r2]
   1e3e0:	and	r0, r0, r1
   1e3e4:	strb	r6, [r9]
   1e3e8:	orr	r4, r0, #1
   1e3ec:	str	r4, [r9, #4]
   1e3f0:	ldr	r0, [r7, #80]	; 0x50
   1e3f4:	cmp	r0, #2
   1e3f8:	blt	1e5b4 <__assert_fail@plt+0xc914>
   1e3fc:	ldr	r0, [r7, #8]
   1e400:	ldr	r1, [r7, #40]	; 0x28
   1e404:	add	r0, r0, r1, lsl #2
   1e408:	ldr	r4, [r0, #4]
   1e40c:	mov	r0, r4
   1e410:	bl	11ad8 <iswalnum@plt>
   1e414:	sub	r1, r4, #95	; 0x5f
   1e418:	cmp	r0, #0
   1e41c:	clz	r1, r1
   1e420:	movwne	r0, #1
   1e424:	lsr	r1, r1, #5
   1e428:	orr	r0, r1, r0
   1e42c:	ldr	r1, [r5]
   1e430:	bic	r1, r1, #4194304	; 0x400000
   1e434:	orr	r0, r1, r0, lsl #22
   1e438:	uxtb	r1, r6
   1e43c:	b	1e5d8 <__assert_fail@plt+0xc938>
   1e440:	mov	r0, #2
   1e444:	mov	r4, #0
   1e448:	strb	r0, [r9, #4]
   1e44c:	b	1e928 <__assert_fail@plt+0xcc88>
   1e450:	and	r0, r0, r1
   1e454:	orr	r4, r0, #1
   1e458:	str	r4, [r5]
   1e45c:	ldr	r0, [r7, #80]	; 0x50
   1e460:	cmp	r0, #2
   1e464:	blt	1e4b0 <__assert_fail@plt+0xc810>
   1e468:	ldr	r0, [r7, #8]
   1e46c:	ldr	r1, [r7, #40]	; 0x28
   1e470:	ldr	r4, [r0, r1, lsl #2]
   1e474:	mov	r0, r4
   1e478:	bl	11ad8 <iswalnum@plt>
   1e47c:	sub	r1, r4, #95	; 0x5f
   1e480:	cmp	r0, #0
   1e484:	clz	r1, r1
   1e488:	movwne	r0, #1
   1e48c:	lsr	r1, r1, #5
   1e490:	orr	r0, r1, r0
   1e494:	ldr	r1, [r5]
   1e498:	bic	r1, r1, #4194304	; 0x400000
   1e49c:	orr	r0, r1, r0, lsl #22
   1e4a0:	b	1e4d0 <__assert_fail@plt+0xc830>
   1e4a4:	and	r0, r0, r1
   1e4a8:	orr	r0, r0, #36	; 0x24
   1e4ac:	b	1e710 <__assert_fail@plt+0xca70>
   1e4b0:	bl	11a6c <__ctype_b_loc@plt>
   1e4b4:	ldr	r0, [r0]
   1e4b8:	cmp	r6, #95	; 0x5f
   1e4bc:	add	r0, r0, r6, lsl #1
   1e4c0:	ldrh	r0, [r0]
   1e4c4:	ubfx	r0, r0, #3, #1
   1e4c8:	movweq	r0, #1
   1e4cc:	orr	r0, r4, r0, lsl #22
   1e4d0:	mov	r4, #1
   1e4d4:	cmp	r6, #62	; 0x3e
   1e4d8:	str	r0, [r5]
   1e4dc:	bgt	1e578 <__assert_fail@plt+0xc8d8>
   1e4e0:	sub	r1, r6, #36	; 0x24
   1e4e4:	cmp	r1, #10
   1e4e8:	bhi	1e76c <__assert_fail@plt+0xcacc>
   1e4ec:	add	r2, pc, #0
   1e4f0:	ldr	pc, [r2, r1, lsl #2]
   1e4f4:	andeq	lr, r1, r0, lsr #10
   1e4f8:	andeq	lr, r1, r8, lsr #18
   1e4fc:	andeq	lr, r1, r8, lsr #18
   1e500:	andeq	lr, r1, r8, lsr #18
   1e504:	andeq	lr, r1, r0, lsl #15
   1e508:	muleq	r1, r0, r7
   1e50c:	andeq	lr, r1, r0, lsr #15
   1e510:	andeq	lr, r1, r8, lsr #15
   1e514:	andeq	lr, r1, r8, lsr #18
   1e518:	andeq	lr, r1, r8, lsr #18
   1e51c:			; <UNDEFINED> instruction: 0x0001e7b8
   1e520:	tst	r8, #8
   1e524:	bne	1e570 <__assert_fail@plt+0xc8d0>
   1e528:	ldr	r1, [r7, #40]	; 0x28
   1e52c:	ldr	r2, [r7, #48]	; 0x30
   1e530:	add	r1, r1, #1
   1e534:	cmp	r1, r2
   1e538:	beq	1e570 <__assert_fail@plt+0xc8d0>
   1e53c:	str	r1, [r7, #40]	; 0x28
   1e540:	mov	r0, sp
   1e544:	mov	r1, r7
   1e548:	mov	r2, r8
   1e54c:	bl	1e338 <__assert_fail@plt+0xc698>
   1e550:	ldr	r0, [r7, #40]	; 0x28
   1e554:	sub	r0, r0, #1
   1e558:	str	r0, [r7, #40]	; 0x28
   1e55c:	ldrb	r0, [sp, #4]
   1e560:	sub	r0, r0, #9
   1e564:	cmp	r0, #1
   1e568:	bhi	1e928 <__assert_fail@plt+0xcc88>
   1e56c:	ldr	r0, [r5]
   1e570:	mov	r1, #32
   1e574:	b	1e5ac <__assert_fail@plt+0xc90c>
   1e578:	cmp	r6, #122	; 0x7a
   1e57c:	bgt	1e6d4 <__assert_fail@plt+0xca34>
   1e580:	cmp	r6, #63	; 0x3f
   1e584:	beq	1e7c0 <__assert_fail@plt+0xcb20>
   1e588:	cmp	r6, #91	; 0x5b
   1e58c:	beq	1e7d0 <__assert_fail@plt+0xcb30>
   1e590:	cmp	r6, #94	; 0x5e
   1e594:	bne	1e928 <__assert_fail@plt+0xcc88>
   1e598:	movw	r1, #8
   1e59c:	movt	r1, #128	; 0x80
   1e5a0:	tst	r8, r1
   1e5a4:	beq	1e818 <__assert_fail@plt+0xcb78>
   1e5a8:	mov	r1, #16
   1e5ac:	mov	r2, #12
   1e5b0:	b	1e6c4 <__assert_fail@plt+0xca24>
   1e5b4:	bl	11a6c <__ctype_b_loc@plt>
   1e5b8:	ldr	r0, [r0]
   1e5bc:	uxtb	r1, r6
   1e5c0:	cmp	r1, #95	; 0x5f
   1e5c4:	add	r0, r0, r1, lsl #1
   1e5c8:	ldrh	r0, [r0]
   1e5cc:	ubfx	r0, r0, #3, #1
   1e5d0:	movweq	r0, #1
   1e5d4:	orr	r0, r4, r0, lsl #22
   1e5d8:	uxtb	r2, r6
   1e5dc:	mov	r4, #2
   1e5e0:	str	r0, [r5]
   1e5e4:	cmp	r2, #95	; 0x5f
   1e5e8:	bgt	1e71c <__assert_fail@plt+0xca7c>
   1e5ec:	sub	r3, r2, #39	; 0x27
   1e5f0:	cmp	r3, #44	; 0x2c
   1e5f4:	bhi	1e844 <__assert_fail@plt+0xcba4>
   1e5f8:	add	r2, pc, #0
   1e5fc:	ldr	pc, [r2, r3, lsl #2]
   1e600:	andeq	lr, r1, ip, lsr #17
   1e604:			; <UNDEFINED> instruction: 0x0001e8bc
   1e608:	andeq	lr, r1, r8, asr #17
   1e60c:	andeq	lr, r1, r8, lsr #18
   1e610:	ldrdeq	lr, [r1], -r4
   1e614:	andeq	lr, r1, r8, lsr #18
   1e618:	andeq	lr, r1, r8, lsr #18
   1e61c:	andeq	lr, r1, r8, lsr #18
   1e620:	andeq	lr, r1, r8, lsr #18
   1e624:	andeq	lr, r1, r8, lsr #18
   1e628:			; <UNDEFINED> instruction: 0x0001e6b4
   1e62c:			; <UNDEFINED> instruction: 0x0001e6b4
   1e630:			; <UNDEFINED> instruction: 0x0001e6b4
   1e634:			; <UNDEFINED> instruction: 0x0001e6b4
   1e638:			; <UNDEFINED> instruction: 0x0001e6b4
   1e63c:			; <UNDEFINED> instruction: 0x0001e6b4
   1e640:			; <UNDEFINED> instruction: 0x0001e6b4
   1e644:			; <UNDEFINED> instruction: 0x0001e6b4
   1e648:			; <UNDEFINED> instruction: 0x0001e6b4
   1e64c:	andeq	lr, r1, r8, lsr #18
   1e650:	andeq	lr, r1, r8, lsr #18
   1e654:	andeq	lr, r1, ip, ror #17
   1e658:	andeq	lr, r1, r8, lsr #18
   1e65c:	strdeq	lr, [r1], -ip
   1e660:	andeq	lr, r1, ip, lsl #18
   1e664:	andeq	lr, r1, r8, lsr #18
   1e668:	andeq	lr, r1, r8, lsr #18
   1e66c:	andeq	lr, r1, r4, lsr r9
   1e670:	andeq	lr, r1, r8, lsr #18
   1e674:	andeq	lr, r1, r8, lsr #18
   1e678:	andeq	lr, r1, r8, lsr #18
   1e67c:	andeq	lr, r1, r8, lsr #18
   1e680:	andeq	lr, r1, r8, lsr #18
   1e684:	andeq	lr, r1, r8, lsr #18
   1e688:	andeq	lr, r1, r8, lsr #18
   1e68c:	andeq	lr, r1, r8, lsr #18
   1e690:	andeq	lr, r1, r8, lsr #18
   1e694:	andeq	lr, r1, r8, lsr #18
   1e698:	andeq	lr, r1, r8, lsr #18
   1e69c:	andeq	lr, r1, r8, lsr #18
   1e6a0:	andeq	lr, r1, r8, lsr #18
   1e6a4:	andeq	lr, r1, r8, lsr #18
   1e6a8:	andeq	lr, r1, r8, lsr #18
   1e6ac:	andeq	lr, r1, r8, lsr #18
   1e6b0:	andeq	lr, r1, r4, asr #18
   1e6b4:	tst	r8, #16384	; 0x4000
   1e6b8:	bne	1e928 <__assert_fail@plt+0xcc88>
   1e6bc:	sub	r1, r1, #49	; 0x31
   1e6c0:	mov	r2, #4
   1e6c4:	bfi	r0, r2, #0, #8
   1e6c8:	str	r1, [r9]
   1e6cc:	str	r0, [r9, #4]
   1e6d0:	b	1e928 <__assert_fail@plt+0xcc88>
   1e6d4:	cmp	r6, #123	; 0x7b
   1e6d8:	beq	1e7d8 <__assert_fail@plt+0xcb38>
   1e6dc:	cmp	r6, #124	; 0x7c
   1e6e0:	beq	1e7e8 <__assert_fail@plt+0xcb48>
   1e6e4:	cmp	r6, #125	; 0x7d
   1e6e8:	bne	1e928 <__assert_fail@plt+0xcc88>
   1e6ec:	and	r1, r8, #4608	; 0x1200
   1e6f0:	cmp	r1, #4608	; 0x1200
   1e6f4:	beq	1e894 <__assert_fail@plt+0xcbf4>
   1e6f8:	b	1e928 <__assert_fail@plt+0xcc88>
   1e6fc:	movw	r1, #65280	; 0xff00
   1e700:	movt	r1, #65439	; 0xff9f
   1e704:	and	r0, r0, r1
   1e708:	orr	r0, r0, #1
   1e70c:	orr	r0, r0, #2097152	; 0x200000
   1e710:	str	r0, [r5]
   1e714:	mov	r4, #1
   1e718:	b	1e928 <__assert_fail@plt+0xcc88>
   1e71c:	sub	r1, r2, #115	; 0x73
   1e720:	cmp	r1, #10
   1e724:	bhi	1e7fc <__assert_fail@plt+0xcb5c>
   1e728:	add	r2, pc, #0
   1e72c:	ldr	pc, [r2, r1, lsl #2]
   1e730:	andeq	lr, r1, ip, asr r7
   1e734:	andeq	lr, r1, r8, lsr #18
   1e738:	andeq	lr, r1, r8, lsr #18
   1e73c:	andeq	lr, r1, r8, lsr #18
   1e740:	andeq	lr, r1, r8, asr r8
   1e744:	andeq	lr, r1, r8, lsr #18
   1e748:	andeq	lr, r1, r8, lsr #18
   1e74c:	andeq	lr, r1, r8, lsr #18
   1e750:	andeq	lr, r1, r8, ror #16
   1e754:	andeq	lr, r1, ip, ror r8
   1e758:	andeq	lr, r1, r8, lsl #17
   1e75c:	tst	r8, #524288	; 0x80000
   1e760:	bne	1e928 <__assert_fail@plt+0xcc88>
   1e764:	mov	r1, #34	; 0x22
   1e768:	b	1e920 <__assert_fail@plt+0xcc80>
   1e76c:	cmp	r6, #10
   1e770:	bne	1e928 <__assert_fail@plt+0xcc88>
   1e774:	tst	r8, #2048	; 0x800
   1e778:	bne	1e7f4 <__assert_fail@plt+0xcb54>
   1e77c:	b	1e928 <__assert_fail@plt+0xcc88>
   1e780:	tst	r8, #8192	; 0x2000
   1e784:	beq	1e928 <__assert_fail@plt+0xcc88>
   1e788:	mov	r1, #8
   1e78c:	b	1e920 <__assert_fail@plt+0xcc80>
   1e790:	tst	r8, #8192	; 0x2000
   1e794:	beq	1e928 <__assert_fail@plt+0xcc88>
   1e798:	mov	r1, #9
   1e79c:	b	1e920 <__assert_fail@plt+0xcc80>
   1e7a0:	mov	r1, #11
   1e7a4:	b	1e920 <__assert_fail@plt+0xcc80>
   1e7a8:	movw	r1, #1026	; 0x402
   1e7ac:	tst	r8, r1
   1e7b0:	bne	1e928 <__assert_fail@plt+0xcc88>
   1e7b4:	b	1e8e4 <__assert_fail@plt+0xcc44>
   1e7b8:	mov	r1, #5
   1e7bc:	b	1e920 <__assert_fail@plt+0xcc80>
   1e7c0:	movw	r1, #1026	; 0x402
   1e7c4:	tst	r8, r1
   1e7c8:	bne	1e928 <__assert_fail@plt+0xcc88>
   1e7cc:	b	1e91c <__assert_fail@plt+0xcc7c>
   1e7d0:	mov	r1, #20
   1e7d4:	b	1e920 <__assert_fail@plt+0xcc80>
   1e7d8:	and	r1, r8, #4608	; 0x1200
   1e7dc:	cmp	r1, #4608	; 0x1200
   1e7e0:	beq	1e874 <__assert_fail@plt+0xcbd4>
   1e7e4:	b	1e928 <__assert_fail@plt+0xcc88>
   1e7e8:	and	r1, r8, #33792	; 0x8400
   1e7ec:	cmp	r1, #32768	; 0x8000
   1e7f0:	bne	1e928 <__assert_fail@plt+0xcc88>
   1e7f4:	mov	r1, #10
   1e7f8:	b	1e920 <__assert_fail@plt+0xcc80>
   1e7fc:	cmp	r2, #96	; 0x60
   1e800:	beq	1e89c <__assert_fail@plt+0xcbfc>
   1e804:	cmp	r2, #98	; 0x62
   1e808:	tsteq	r8, #524288	; 0x80000
   1e80c:	bne	1e928 <__assert_fail@plt+0xcc88>
   1e810:	mov	r1, #256	; 0x100
   1e814:	b	1e5ac <__assert_fail@plt+0xc90c>
   1e818:	ldr	r1, [r7, #40]	; 0x28
   1e81c:	cmp	r1, #0
   1e820:	beq	1e5a8 <__assert_fail@plt+0xc908>
   1e824:	tst	r8, #2048	; 0x800
   1e828:	beq	1e928 <__assert_fail@plt+0xcc88>
   1e82c:	ldr	r2, [r7, #4]
   1e830:	add	r1, r2, r1
   1e834:	ldrb	r1, [r1, #-1]
   1e838:	cmp	r1, #10
   1e83c:	beq	1e5a8 <__assert_fail@plt+0xc908>
   1e840:	b	1e928 <__assert_fail@plt+0xcc88>
   1e844:	cmp	r2, #87	; 0x57
   1e848:	tsteq	r8, #524288	; 0x80000
   1e84c:	bne	1e928 <__assert_fail@plt+0xcc88>
   1e850:	mov	r1, #33	; 0x21
   1e854:	b	1e920 <__assert_fail@plt+0xcc80>
   1e858:	tst	r8, #524288	; 0x80000
   1e85c:	bne	1e928 <__assert_fail@plt+0xcc88>
   1e860:	mov	r1, #32
   1e864:	b	1e920 <__assert_fail@plt+0xcc80>
   1e868:	and	r1, r8, #4608	; 0x1200
   1e86c:	cmp	r1, #512	; 0x200
   1e870:	bne	1e928 <__assert_fail@plt+0xcc88>
   1e874:	mov	r1, #23
   1e878:	b	1e920 <__assert_fail@plt+0xcc80>
   1e87c:	tst	r8, #33792	; 0x8400
   1e880:	bne	1e928 <__assert_fail@plt+0xcc88>
   1e884:	b	1e7f4 <__assert_fail@plt+0xcb54>
   1e888:	and	r1, r8, #4608	; 0x1200
   1e88c:	cmp	r1, #512	; 0x200
   1e890:	bne	1e928 <__assert_fail@plt+0xcc88>
   1e894:	mov	r1, #24
   1e898:	b	1e920 <__assert_fail@plt+0xcc80>
   1e89c:	tst	r8, #524288	; 0x80000
   1e8a0:	bne	1e928 <__assert_fail@plt+0xcc88>
   1e8a4:	mov	r1, #64	; 0x40
   1e8a8:	b	1e5ac <__assert_fail@plt+0xc90c>
   1e8ac:	tst	r8, #524288	; 0x80000
   1e8b0:	bne	1e928 <__assert_fail@plt+0xcc88>
   1e8b4:	mov	r1, #128	; 0x80
   1e8b8:	b	1e5ac <__assert_fail@plt+0xc90c>
   1e8bc:	tst	r8, #8192	; 0x2000
   1e8c0:	beq	1e788 <__assert_fail@plt+0xcae8>
   1e8c4:	b	1e928 <__assert_fail@plt+0xcc88>
   1e8c8:	tst	r8, #8192	; 0x2000
   1e8cc:	beq	1e798 <__assert_fail@plt+0xcaf8>
   1e8d0:	b	1e928 <__assert_fail@plt+0xcc88>
   1e8d4:	movw	r1, #1026	; 0x402
   1e8d8:	and	r1, r8, r1
   1e8dc:	cmp	r1, #2
   1e8e0:	bne	1e928 <__assert_fail@plt+0xcc88>
   1e8e4:	mov	r1, #18
   1e8e8:	b	1e920 <__assert_fail@plt+0xcc80>
   1e8ec:	tst	r8, #524288	; 0x80000
   1e8f0:	bne	1e928 <__assert_fail@plt+0xcc88>
   1e8f4:	mov	r1, #6
   1e8f8:	b	1e5ac <__assert_fail@plt+0xc90c>
   1e8fc:	tst	r8, #524288	; 0x80000
   1e900:	bne	1e928 <__assert_fail@plt+0xcc88>
   1e904:	mov	r1, #9
   1e908:	b	1e5ac <__assert_fail@plt+0xc90c>
   1e90c:	movw	r1, #1026	; 0x402
   1e910:	and	r1, r8, r1
   1e914:	cmp	r1, #2
   1e918:	bne	1e928 <__assert_fail@plt+0xcc88>
   1e91c:	mov	r1, #19
   1e920:	bfi	r0, r1, #0, #8
   1e924:	str	r0, [r5]
   1e928:	mov	r0, r4
   1e92c:	sub	sp, fp, #24
   1e930:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e934:	tst	r8, #524288	; 0x80000
   1e938:	bne	1e928 <__assert_fail@plt+0xcc88>
   1e93c:	mov	r1, #512	; 0x200
   1e940:	b	1e5ac <__assert_fail@plt+0xc90c>
   1e944:	tst	r8, #524288	; 0x80000
   1e948:	bne	1e928 <__assert_fail@plt+0xcc88>
   1e94c:	mov	r1, #35	; 0x23
   1e950:	b	1e920 <__assert_fail@plt+0xcc80>
   1e954:	cmp	r3, #2
   1e958:	blt	1e988 <__assert_fail@plt+0xcce8>
   1e95c:	ldr	r3, [r7, #8]
   1e960:	ldr	r4, [r3, r2, lsl #2]
   1e964:	cmn	r4, #1
   1e968:	beq	1e3d8 <__assert_fail@plt+0xc738>
   1e96c:	ldr	r4, [r7, #28]
   1e970:	add	r6, r6, #2
   1e974:	cmp	r4, r6
   1e978:	beq	1e988 <__assert_fail@plt+0xcce8>
   1e97c:	ldr	r3, [r3, r6, lsl #2]
   1e980:	cmn	r3, #1
   1e984:	beq	1e3d8 <__assert_fail@plt+0xc738>
   1e988:	ldrb	r3, [r7, #76]	; 0x4c
   1e98c:	mov	r6, r2
   1e990:	ldr	r4, [r7, #24]
   1e994:	ldr	ip, [r7]
   1e998:	cmp	r3, #0
   1e99c:	ldrne	r6, [r7, #12]
   1e9a0:	ldrne	r6, [r6, r2, lsl #2]
   1e9a4:	cmp	r3, #0
   1e9a8:	add	r6, r4, r6
   1e9ac:	add	r6, ip, r6
   1e9b0:	ldrsb	r6, [r6]
   1e9b4:	beq	1e3e0 <__assert_fail@plt+0xc740>
   1e9b8:	cmn	r6, #1
   1e9bc:	ble	1e3d8 <__assert_fail@plt+0xc738>
   1e9c0:	b	1e3e0 <__assert_fail@plt+0xc740>
   1e9c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e9c8:	add	fp, sp, #28
   1e9cc:	sub	sp, sp, #28
   1e9d0:	mov	r7, r1
   1e9d4:	mov	r1, r0
   1e9d8:	ldr	r4, [fp, #12]
   1e9dc:	ldr	r5, [fp, #8]
   1e9e0:	mov	r6, r2
   1e9e4:	str	r3, [sp, #16]
   1e9e8:	ldr	r0, [r7]
   1e9ec:	str	r1, [sp, #12]
   1e9f0:	str	r4, [sp, #4]
   1e9f4:	str	r5, [sp]
   1e9f8:	str	r0, [sp, #8]
   1e9fc:	mov	r0, r1
   1ea00:	mov	r1, r7
   1ea04:	bl	1ec50 <__assert_fail@plt+0xcfb0>
   1ea08:	cmp	r0, #0
   1ea0c:	bne	1ea1c <__assert_fail@plt+0xcd7c>
   1ea10:	ldr	r1, [r4]
   1ea14:	cmp	r1, #0
   1ea18:	bne	1eb78 <__assert_fail@plt+0xced8>
   1ea1c:	mov	r4, r0
   1ea20:	ldrb	r0, [r6, #4]
   1ea24:	orr	r1, r0, #8
   1ea28:	cmp	r1, #10
   1ea2c:	beq	1eb7c <__assert_fail@plt+0xcedc>
   1ea30:	cmp	r5, #0
   1ea34:	beq	1ea40 <__assert_fail@plt+0xcda0>
   1ea38:	cmp	r0, #9
   1ea3c:	beq	1eb7c <__assert_fail@plt+0xcedc>
   1ea40:	ldr	r8, [fp, #12]
   1ea44:	ldr	r0, [sp, #12]
   1ea48:	ldr	r3, [sp, #16]
   1ea4c:	mov	r1, r7
   1ea50:	mov	r2, r6
   1ea54:	mov	r9, r5
   1ea58:	str	r5, [sp]
   1ea5c:	str	r8, [sp, #4]
   1ea60:	bl	1ec50 <__assert_fail@plt+0xcfb0>
   1ea64:	mov	sl, r0
   1ea68:	cmp	r0, #0
   1ea6c:	bne	1ea7c <__assert_fail@plt+0xcddc>
   1ea70:	ldr	r0, [r8]
   1ea74:	cmp	r0, #0
   1ea78:	bne	1eb88 <__assert_fail@plt+0xcee8>
   1ea7c:	cmp	r4, #0
   1ea80:	cmpne	sl, #0
   1ea84:	bne	1ea9c <__assert_fail@plt+0xcdfc>
   1ea88:	cmp	r4, #0
   1ea8c:	mov	r5, r9
   1ea90:	movne	sl, r4
   1ea94:	mov	r0, sl
   1ea98:	b	1ea1c <__assert_fail@plt+0xcd7c>
   1ea9c:	mov	r0, #16
   1eaa0:	mov	r1, r4
   1eaa4:	mov	r2, sl
   1eaa8:	add	r3, sp, #20
   1eaac:	str	r0, [sp, #24]
   1eab0:	mov	r0, #0
   1eab4:	str	r0, [sp, #20]
   1eab8:	ldr	r0, [sp, #8]
   1eabc:	bl	2016c <__assert_fail@plt+0xe4cc>
   1eac0:	cmp	r0, #0
   1eac4:	mov	r5, r9
   1eac8:	bne	1ea1c <__assert_fail@plt+0xcd7c>
   1eacc:	mov	r5, sl
   1ead0:	ldr	sl, [sl, #4]
   1ead4:	cmp	sl, #0
   1ead8:	bne	1eacc <__assert_fail@plt+0xce2c>
   1eadc:	ldr	sl, [r5, #8]
   1eae0:	cmp	sl, #0
   1eae4:	bne	1eacc <__assert_fail@plt+0xce2c>
   1eae8:	add	r0, r5, #20
   1eaec:	bl	1d784 <__assert_fail@plt+0xbae4>
   1eaf0:	ldr	r0, [r5]
   1eaf4:	cmp	r0, #0
   1eaf8:	beq	1eb1c <__assert_fail@plt+0xce7c>
   1eafc:	ldr	sl, [r0, #8]
   1eb00:	cmp	sl, r5
   1eb04:	mov	r5, r0
   1eb08:	beq	1eae8 <__assert_fail@plt+0xce48>
   1eb0c:	cmp	sl, #0
   1eb10:	mov	r5, r0
   1eb14:	beq	1eae8 <__assert_fail@plt+0xce48>
   1eb18:	b	1eacc <__assert_fail@plt+0xce2c>
   1eb1c:	mov	r5, r4
   1eb20:	ldr	r4, [r4, #4]
   1eb24:	cmp	r4, #0
   1eb28:	bne	1eb1c <__assert_fail@plt+0xce7c>
   1eb2c:	ldr	r4, [r5, #8]
   1eb30:	cmp	r4, #0
   1eb34:	bne	1eb1c <__assert_fail@plt+0xce7c>
   1eb38:	add	r0, r5, #20
   1eb3c:	bl	1d784 <__assert_fail@plt+0xbae4>
   1eb40:	ldr	r0, [r5]
   1eb44:	cmp	r0, #0
   1eb48:	beq	1eb6c <__assert_fail@plt+0xcecc>
   1eb4c:	ldr	r4, [r0, #8]
   1eb50:	cmp	r4, r5
   1eb54:	mov	r5, r0
   1eb58:	beq	1eb38 <__assert_fail@plt+0xce98>
   1eb5c:	cmp	r4, #0
   1eb60:	mov	r5, r0
   1eb64:	beq	1eb38 <__assert_fail@plt+0xce98>
   1eb68:	b	1eb1c <__assert_fail@plt+0xce7c>
   1eb6c:	ldr	r1, [fp, #12]
   1eb70:	mov	r0, #12
   1eb74:	str	r0, [r1]
   1eb78:	mov	r4, #0
   1eb7c:	mov	r0, r4
   1eb80:	sub	sp, fp, #28
   1eb84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb88:	cmp	r4, #0
   1eb8c:	beq	1eb78 <__assert_fail@plt+0xced8>
   1eb90:	mov	r5, r4
   1eb94:	ldr	r4, [r4, #4]
   1eb98:	cmp	r4, #0
   1eb9c:	bne	1eb90 <__assert_fail@plt+0xcef0>
   1eba0:	ldr	r4, [r5, #8]
   1eba4:	cmp	r4, #0
   1eba8:	bne	1eb90 <__assert_fail@plt+0xcef0>
   1ebac:	add	r0, r5, #20
   1ebb0:	bl	1d784 <__assert_fail@plt+0xbae4>
   1ebb4:	ldr	r0, [r5]
   1ebb8:	cmp	r0, #0
   1ebbc:	beq	1eb78 <__assert_fail@plt+0xced8>
   1ebc0:	ldr	r4, [r0, #8]
   1ebc4:	cmp	r4, r5
   1ebc8:	mov	r5, r0
   1ebcc:	beq	1ebac <__assert_fail@plt+0xcf0c>
   1ebd0:	cmp	r4, #0
   1ebd4:	mov	r5, r0
   1ebd8:	beq	1ebac <__assert_fail@plt+0xcf0c>
   1ebdc:	b	1eb90 <__assert_fail@plt+0xcef0>
   1ebe0:	push	{r4, r5, r6, sl, fp, lr}
   1ebe4:	add	fp, sp, #16
   1ebe8:	mov	r4, r2
   1ebec:	mov	r5, r1
   1ebf0:	mov	r6, r0
   1ebf4:	ldr	r0, [r0, #4]
   1ebf8:	cmp	r0, #0
   1ebfc:	bne	1ebf0 <__assert_fail@plt+0xcf50>
   1ec00:	ldr	r0, [r6, #8]
   1ec04:	cmp	r0, #0
   1ec08:	bne	1ebf0 <__assert_fail@plt+0xcf50>
   1ec0c:	mov	r0, r4
   1ec10:	mov	r1, r6
   1ec14:	blx	r5
   1ec18:	cmp	r0, #0
   1ec1c:	bne	1ec4c <__assert_fail@plt+0xcfac>
   1ec20:	ldr	r1, [r6]
   1ec24:	cmp	r1, #0
   1ec28:	popeq	{r4, r5, r6, sl, fp, pc}
   1ec2c:	ldr	r0, [r1, #8]
   1ec30:	cmp	r0, r6
   1ec34:	mov	r6, r1
   1ec38:	beq	1ec0c <__assert_fail@plt+0xcf6c>
   1ec3c:	cmp	r0, #0
   1ec40:	mov	r6, r1
   1ec44:	beq	1ec0c <__assert_fail@plt+0xcf6c>
   1ec48:	b	1ebf0 <__assert_fail@plt+0xcf50>
   1ec4c:	pop	{r4, r5, r6, sl, fp, pc}
   1ec50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ec54:	add	fp, sp, #28
   1ec58:	sub	sp, sp, #148	; 0x94
   1ec5c:	mov	r5, r1
   1ec60:	mov	r6, r0
   1ec64:	mov	r7, r2
   1ec68:	ldr	r0, [r2, #4]
   1ec6c:	mvn	r1, #0
   1ec70:	mov	sl, #0
   1ec74:	ldr	r2, [r5]
   1ec78:	uxtab	r1, r1, r0
   1ec7c:	str	r2, [sp, #52]	; 0x34
   1ec80:	cmp	r1, #35	; 0x23
   1ec84:	ldr	r9, [fp, #12]
   1ec88:	str	r6, [sp, #48]	; 0x30
   1ec8c:	str	r3, [sp, #44]	; 0x2c
   1ec90:	str	r7, [sp, #28]
   1ec94:	bhi	1edc0 <__assert_fail@plt+0xd120>
   1ec98:	add	r2, pc, #0
   1ec9c:	ldr	pc, [r2, r1, lsl #2]
   1eca0:	andeq	pc, r1, r0, lsl r0	; <UNPREDICTABLE>
   1eca4:	andeq	pc, r1, ip, ror #31
   1eca8:	andeq	lr, r1, r0, asr #27
   1ecac:	andeq	lr, r1, r4, lsr #28
   1ecb0:	andeq	lr, r1, r0, lsl #29
   1ecb4:	andeq	lr, r1, r0, asr #27
   1ecb8:	andeq	lr, r1, r0, asr #27
   1ecbc:	andeq	lr, r1, r4, asr #29
   1ecc0:	ldrdeq	lr, [r1], -r0
   1ecc4:	andeq	pc, r1, ip, ror #31
   1ecc8:	andeq	lr, r1, r0, asr #27
   1eccc:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1ecd0:	andeq	lr, r1, r0, asr #27
   1ecd4:	andeq	lr, r1, r0, asr #27
   1ecd8:	andeq	lr, r1, r0, asr #27
   1ecdc:	andeq	lr, r1, r0, asr #27
   1ece0:	andeq	lr, r1, r0, asr #27
   1ece4:	andeq	lr, r1, r0, asr #27
   1ece8:	andeq	lr, r1, r0, asr #27
   1ecec:	andeq	pc, r1, r0, lsl #2
   1ecf0:	andeq	lr, r1, r0, asr #27
   1ecf4:	andeq	lr, r1, r0, asr #27
   1ecf8:			; <UNDEFINED> instruction: 0x0001edb8
   1ecfc:	andeq	lr, r1, r0, ror #27
   1ed00:	andeq	lr, r1, r0, asr #27
   1ed04:	andeq	lr, r1, r0, asr #27
   1ed08:	andeq	lr, r1, r0, asr #27
   1ed0c:	andeq	lr, r1, r0, asr #27
   1ed10:	andeq	lr, r1, r0, asr #27
   1ed14:	andeq	lr, r1, r0, asr #27
   1ed18:	andeq	lr, r1, r0, asr #27
   1ed1c:	andeq	lr, r1, r0, asr #26
   1ed20:	andeq	lr, r1, r0, asr #26
   1ed24:	andeq	lr, r1, r4, ror #26
   1ed28:	andeq	lr, r1, r4, ror #26
   1ed2c:	strdeq	pc, [r1], -r8
   1ed30:	andeq	r0, r0, r0
   1ed34:	mvnseq	r0, #0
   1ed38:			; <UNDEFINED> instruction: 0x87fffffe
   1ed3c:			; <UNDEFINED> instruction: 0x07fffffe
   1ed40:	mvn	r2, #32
   1ed44:	ldr	r1, [r6, #64]	; 0x40
   1ed48:	movw	r3, #43068	; 0xa83c
   1ed4c:	uxtab	r0, r2, r0
   1ed50:	movw	r2, #43062	; 0xa836
   1ed54:	movt	r3, #2
   1ed58:	clz	r0, r0
   1ed5c:	movt	r2, #2
   1ed60:	b	1ed84 <__assert_fail@plt+0xd0e4>
   1ed64:	mvn	r2, #34	; 0x22
   1ed68:	ldr	r1, [r6, #64]	; 0x40
   1ed6c:	movw	r3, #39775	; 0x9b5f
   1ed70:	uxtab	r0, r2, r0
   1ed74:	movw	r2, #43070	; 0xa83e
   1ed78:	movt	r3, #2
   1ed7c:	clz	r0, r0
   1ed80:	movt	r2, #2
   1ed84:	lsr	r0, r0, #5
   1ed88:	stm	sp, {r0, r9}
   1ed8c:	ldr	r0, [sp, #52]	; 0x34
   1ed90:	bl	20210 <__assert_fail@plt+0xe570>
   1ed94:	mov	r4, r0
   1ed98:	cmp	r0, #0
   1ed9c:	bne	1fa60 <__assert_fail@plt+0xddc0>
   1eda0:	ldr	r0, [r9]
   1eda4:	ldr	r2, [sp, #44]	; 0x2c
   1eda8:	ldr	r3, [sp, #28]
   1edac:	cmp	r0, #0
   1edb0:	beq	1fa68 <__assert_fail@plt+0xddc8>
   1edb4:	b	1ffec <__assert_fail@plt+0xe34c>
   1edb8:	tst	r3, #16777216	; 0x1000000
   1edbc:	bne	1ee1c <__assert_fail@plt+0xd17c>
   1edc0:	tst	r3, #32
   1edc4:	bne	1ee1c <__assert_fail@plt+0xd17c>
   1edc8:	tst	r3, #16
   1edcc:	bne	1f174 <__assert_fail@plt+0xd4d4>
   1edd0:	tst	r3, #131072	; 0x20000
   1edd4:	uxtbeq	r1, r0
   1edd8:	cmpeq	r1, #9
   1eddc:	beq	1f1b0 <__assert_fail@plt+0xd510>
   1ede0:	mov	r1, #1
   1ede4:	mov	r2, #0
   1ede8:	mov	r3, r7
   1edec:	mov	sl, #0
   1edf0:	bfi	r0, r1, #0, #8
   1edf4:	mov	r1, #0
   1edf8:	str	r0, [r7, #4]
   1edfc:	ldr	r0, [sp, #52]	; 0x34
   1ee00:	bl	2016c <__assert_fail@plt+0xe4cc>
   1ee04:	ldr	r3, [sp, #28]
   1ee08:	ldr	r2, [sp, #44]	; 0x2c
   1ee0c:	mov	r4, r0
   1ee10:	cmp	r0, #0
   1ee14:	bne	1fa68 <__assert_fail@plt+0xddc8>
   1ee18:	b	1f91c <__assert_fail@plt+0xdc7c>
   1ee1c:	mov	r0, #13
   1ee20:	b	1f920 <__assert_fail@plt+0xdc80>
   1ee24:	ldr	r5, [sp, #52]	; 0x34
   1ee28:	ldr	r0, [r7]
   1ee2c:	mov	r1, #1
   1ee30:	ldr	r2, [r5, #84]	; 0x54
   1ee34:	tst	r2, r1, lsl r0
   1ee38:	beq	1f9ec <__assert_fail@plt+0xdd4c>
   1ee3c:	lsl	r0, r1, r0
   1ee40:	ldr	r1, [r5, #80]	; 0x50
   1ee44:	mov	r2, #0
   1ee48:	mov	r3, r7
   1ee4c:	mov	sl, #0
   1ee50:	orr	r0, r1, r0
   1ee54:	mov	r1, #0
   1ee58:	str	r0, [r5, #80]	; 0x50
   1ee5c:	mov	r0, r5
   1ee60:	bl	2016c <__assert_fail@plt+0xe4cc>
   1ee64:	cmp	r0, #0
   1ee68:	beq	1f91c <__assert_fail@plt+0xdc7c>
   1ee6c:	mov	r4, r0
   1ee70:	ldr	r0, [r5, #76]	; 0x4c
   1ee74:	add	r0, r0, #1
   1ee78:	str	r0, [r5, #76]	; 0x4c
   1ee7c:	b	1eeb4 <__assert_fail@plt+0xd214>
   1ee80:	ldr	r5, [sp, #52]	; 0x34
   1ee84:	mov	r1, #0
   1ee88:	mov	r2, #0
   1ee8c:	mov	r3, r7
   1ee90:	mov	sl, #0
   1ee94:	mov	r0, r5
   1ee98:	bl	2016c <__assert_fail@plt+0xe4cc>
   1ee9c:	cmp	r0, #0
   1eea0:	beq	1f91c <__assert_fail@plt+0xdc7c>
   1eea4:	mov	r4, r0
   1eea8:	ldr	r0, [r5, #92]	; 0x5c
   1eeac:	cmp	r0, #2
   1eeb0:	blt	1fa60 <__assert_fail@plt+0xddc0>
   1eeb4:	ldrb	r0, [r5, #88]	; 0x58
   1eeb8:	orr	r0, r0, #2
   1eebc:	strb	r0, [r5, #88]	; 0x58
   1eec0:	b	1fa60 <__assert_fail@plt+0xddc0>
   1eec4:	ldr	r8, [r5, #24]
   1eec8:	ldr	r4, [fp, #8]
   1eecc:	orr	r2, r3, #8388608	; 0x800000
   1eed0:	mov	r1, r6
   1eed4:	add	r0, r8, #1
   1eed8:	str	r0, [r5, #24]
   1eedc:	mov	r0, r7
   1eee0:	bl	1e338 <__assert_fail@plt+0xc698>
   1eee4:	ldr	r1, [r6, #40]	; 0x28
   1eee8:	ldr	r2, [sp, #28]
   1eeec:	add	r0, r1, r0
   1eef0:	mov	r1, #0
   1eef4:	str	r0, [r6, #40]	; 0x28
   1eef8:	ldrb	r0, [r2, #4]
   1eefc:	cmp	r0, #9
   1ef00:	beq	1ef40 <__assert_fail@plt+0xd2a0>
   1ef04:	add	r0, r4, #1
   1ef08:	mov	r1, r5
   1ef0c:	mov	r5, r2
   1ef10:	stm	sp, {r0, r9}
   1ef14:	mov	r0, r6
   1ef18:	ldr	r3, [sp, #44]	; 0x2c
   1ef1c:	bl	1e188 <__assert_fail@plt+0xc4e8>
   1ef20:	mov	r1, r0
   1ef24:	ldr	r0, [r9]
   1ef28:	mov	sl, #0
   1ef2c:	cmp	r0, #0
   1ef30:	bne	1ffec <__assert_fail@plt+0xe34c>
   1ef34:	ldrb	r0, [r5, #4]
   1ef38:	cmp	r0, #9
   1ef3c:	bne	200dc <__assert_fail@plt+0xe43c>
   1ef40:	ldr	r0, [sp, #52]	; 0x34
   1ef44:	cmp	r8, #8
   1ef48:	mov	sl, #0
   1ef4c:	movls	r2, #1
   1ef50:	ldrls	r3, [r0, #84]	; 0x54
   1ef54:	orrls	r2, r3, r2, lsl r8
   1ef58:	sub	r3, fp, #80	; 0x50
   1ef5c:	strls	r2, [r0, #84]	; 0x54
   1ef60:	mov	r2, #17
   1ef64:	str	r2, [fp, #-76]	; 0xffffffb4
   1ef68:	mov	r2, #0
   1ef6c:	str	sl, [fp, #-80]	; 0xffffffb0
   1ef70:	bl	2016c <__assert_fail@plt+0xe4cc>
   1ef74:	cmp	r0, #0
   1ef78:	beq	1f91c <__assert_fail@plt+0xdc7c>
   1ef7c:	ldr	r2, [sp, #44]	; 0x2c
   1ef80:	ldr	r3, [sp, #28]
   1ef84:	str	r8, [r0, #20]
   1ef88:	mov	r4, r0
   1ef8c:	b	1fa68 <__assert_fail@plt+0xddc8>
   1ef90:	ldr	r2, [r7]
   1ef94:	movw	r1, #783	; 0x30f
   1ef98:	tst	r2, r1
   1ef9c:	beq	1eff0 <__assert_fail@plt+0xd350>
   1efa0:	ldr	r0, [sp, #52]	; 0x34
   1efa4:	ldrb	r0, [r0, #88]	; 0x58
   1efa8:	tst	r0, #16
   1efac:	bne	1efe8 <__assert_fail@plt+0xd348>
   1efb0:	ldr	r2, [sp, #52]	; 0x34
   1efb4:	orr	r1, r0, #16
   1efb8:	tst	r0, #8
   1efbc:	strb	r1, [r2, #88]	; 0x58
   1efc0:	bne	20054 <__assert_fail@plt+0xe3b4>
   1efc4:	sub	r1, pc, #668	; 0x29c
   1efc8:	tst	r0, #4
   1efcc:	vld1.64	{d16-d17}, [r1]
   1efd0:	add	r1, r2, #96	; 0x60
   1efd4:	vst1.32	{d16-d17}, [r1]
   1efd8:	beq	20060 <__assert_fail@plt+0xe3c0>
   1efdc:	vmov.i32	q8, #0	; 0x00000000
   1efe0:	add	r0, r2, #112	; 0x70
   1efe4:	vst1.32	{d16-d17}, [r0]
   1efe8:	ldr	r2, [r7]
   1efec:	ldr	r6, [sp, #48]	; 0x30
   1eff0:	ldr	r0, [sp, #52]	; 0x34
   1eff4:	cmp	r2, #256	; 0x100
   1eff8:	beq	1f8a8 <__assert_fail@plt+0xdc08>
   1effc:	cmp	r2, #512	; 0x200
   1f000:	bne	1f928 <__assert_fail@plt+0xdc88>
   1f004:	mov	r4, #10
   1f008:	mov	r0, #5
   1f00c:	b	1f8b0 <__assert_fail@plt+0xdc10>
   1f010:	ldr	r5, [sp, #52]	; 0x34
   1f014:	mov	r1, #0
   1f018:	mov	r2, #0
   1f01c:	mov	r3, r7
   1f020:	mov	sl, #0
   1f024:	mov	r0, r5
   1f028:	bl	2016c <__assert_fail@plt+0xe4cc>
   1f02c:	cmp	r0, #0
   1f030:	beq	1f91c <__assert_fail@plt+0xdc7c>
   1f034:	mov	r4, r0
   1f038:	ldr	r0, [r5, #92]	; 0x5c
   1f03c:	cmp	r0, #2
   1f040:	blt	1fa60 <__assert_fail@plt+0xddc0>
   1f044:	ldr	r7, [sp, #52]	; 0x34
   1f048:	mov	sl, #16
   1f04c:	sub	r8, fp, #80	; 0x50
   1f050:	ldr	r5, [sp, #48]	; 0x30
   1f054:	ldr	r0, [r5, #40]	; 0x28
   1f058:	ldr	r1, [r5, #56]	; 0x38
   1f05c:	cmp	r1, r0
   1f060:	ble	1f974 <__assert_fail@plt+0xdcd4>
   1f064:	ldr	r1, [r5, #28]
   1f068:	ldr	r2, [sp, #44]	; 0x2c
   1f06c:	ldr	r3, [sp, #28]
   1f070:	cmp	r0, r1
   1f074:	beq	1f96c <__assert_fail@plt+0xdccc>
   1f078:	ldr	r1, [r5, #8]
   1f07c:	ldr	r0, [r1, r0, lsl #2]
   1f080:	cmn	r0, #1
   1f084:	bne	1f96c <__assert_fail@plt+0xdccc>
   1f088:	mov	r0, r3
   1f08c:	mov	r1, r5
   1f090:	mov	r6, r3
   1f094:	bl	1e338 <__assert_fail@plt+0xc698>
   1f098:	ldr	r1, [r5, #40]	; 0x28
   1f09c:	mov	r2, #0
   1f0a0:	mov	r3, r6
   1f0a4:	add	r0, r1, r0
   1f0a8:	mov	r1, #0
   1f0ac:	str	r0, [r5, #40]	; 0x28
   1f0b0:	mov	r0, r7
   1f0b4:	bl	2016c <__assert_fail@plt+0xe4cc>
   1f0b8:	mov	r5, r0
   1f0bc:	mov	r0, #0
   1f0c0:	str	sl, [fp, #-76]	; 0xffffffb4
   1f0c4:	mov	r1, r4
   1f0c8:	mov	r3, r8
   1f0cc:	str	r0, [fp, #-80]	; 0xffffffb0
   1f0d0:	mov	r0, r7
   1f0d4:	mov	r2, r5
   1f0d8:	bl	2016c <__assert_fail@plt+0xe4cc>
   1f0dc:	cmp	r5, #0
   1f0e0:	movne	r4, r0
   1f0e4:	cmpne	r0, #0
   1f0e8:	bne	1f050 <__assert_fail@plt+0xd3b0>
   1f0ec:	mov	r0, #12
   1f0f0:	str	r0, [r9]
   1f0f4:	b	1ffe8 <__assert_fail@plt+0xe348>
   1f0f8:	mov	r0, #5
   1f0fc:	b	1f920 <__assert_fail@plt+0xdc80>
   1f100:	mov	r0, #0
   1f104:	mov	r1, #1
   1f108:	mov	r7, #0
   1f10c:	str	r0, [fp, #-32]	; 0xffffffe0
   1f110:	mov	r0, #32
   1f114:	bl	19ed0 <__assert_fail@plt+0x8230>
   1f118:	mov	r4, r0
   1f11c:	mov	r0, #40	; 0x28
   1f120:	mov	r1, #1
   1f124:	bl	19ed0 <__assert_fail@plt+0x8230>
   1f128:	mov	r8, r0
   1f12c:	cmp	r4, #0
   1f130:	cmpne	r8, #0
   1f134:	beq	1f9f4 <__assert_fail@plt+0xdd54>
   1f138:	ldr	r7, [sp, #28]
   1f13c:	ldr	r5, [sp, #44]	; 0x2c
   1f140:	mov	r1, r6
   1f144:	mov	r0, r7
   1f148:	mov	r2, r5
   1f14c:	bl	2043c <__assert_fail@plt+0xe79c>
   1f150:	mov	r3, r0
   1f154:	ldr	r0, [r7, #4]
   1f158:	uxtb	r1, r0
   1f15c:	cmp	r1, #25
   1f160:	beq	1f1b8 <__assert_fail@plt+0xd518>
   1f164:	cmp	r1, #2
   1f168:	beq	1f9e0 <__assert_fail@plt+0xdd40>
   1f16c:	mov	r1, #0
   1f170:	b	1f20c <__assert_fail@plt+0xd56c>
   1f174:	mov	r0, r7
   1f178:	mov	r1, r6
   1f17c:	mov	r2, r3
   1f180:	mov	r4, r3
   1f184:	bl	1e338 <__assert_fail@plt+0xc698>
   1f188:	ldr	r1, [r6, #40]	; 0x28
   1f18c:	mov	r2, r7
   1f190:	mov	r3, r4
   1f194:	add	r0, r1, r0
   1f198:	mov	r1, r5
   1f19c:	str	r0, [r6, #40]	; 0x28
   1f1a0:	mov	r0, r6
   1f1a4:	sub	sp, fp, #28
   1f1a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f1ac:	b	1ec50 <__assert_fail@plt+0xcfb0>
   1f1b0:	mov	r0, #16
   1f1b4:	b	1f920 <__assert_fail@plt+0xdc80>
   1f1b8:	ldrb	r0, [r8, #16]
   1f1bc:	tst	r5, #256	; 0x100
   1f1c0:	ldr	r2, [sp, #44]	; 0x2c
   1f1c4:	mov	r1, r6
   1f1c8:	orr	r0, r0, #1
   1f1cc:	strb	r0, [r8, #16]
   1f1d0:	ldrne	r0, [r4]
   1f1d4:	orrne	r0, r0, #1024	; 0x400
   1f1d8:	strne	r0, [r4]
   1f1dc:	ldr	r0, [r6, #40]	; 0x28
   1f1e0:	add	r0, r0, r3
   1f1e4:	str	r0, [r6, #40]	; 0x28
   1f1e8:	mov	r0, r7
   1f1ec:	bl	2043c <__assert_fail@plt+0xe79c>
   1f1f0:	ldr	r7, [sp, #28]
   1f1f4:	mov	r3, r0
   1f1f8:	ldr	r0, [r7, #4]
   1f1fc:	uxtb	r1, r0
   1f200:	cmp	r1, #2
   1f204:	beq	1f9e0 <__assert_fail@plt+0xdd40>
   1f208:	mov	r1, #1
   1f20c:	str	r1, [sp, #36]	; 0x24
   1f210:	uxtb	r1, r0
   1f214:	str	r8, [sp, #40]	; 0x28
   1f218:	mov	r2, r7
   1f21c:	cmp	r1, #21
   1f220:	ldr	r5, [sp, #44]	; 0x2c
   1f224:	moveq	r1, #1
   1f228:	bfieq	r0, r1, #0, #8
   1f22c:	mov	r1, r6
   1f230:	streq	r0, [r7, #4]
   1f234:	mov	r0, #3
   1f238:	str	r0, [fp, #-40]	; 0xffffffd8
   1f23c:	sub	r0, fp, #80	; 0x50
   1f240:	str	r0, [fp, #-36]	; 0xffffffdc
   1f244:	mov	r0, #1
   1f248:	str	r5, [sp]
   1f24c:	str	r0, [sp, #4]
   1f250:	sub	r0, fp, #40	; 0x28
   1f254:	bl	205a4 <__assert_fail@plt+0xe904>
   1f258:	cmp	r0, #0
   1f25c:	bne	1f9cc <__assert_fail@plt+0xdd2c>
   1f260:	and	r0, r5, #65536	; 0x10000
   1f264:	mov	r2, r5
   1f268:	mov	r8, #0
   1f26c:	str	r0, [sp, #20]
   1f270:	mov	r0, #0
   1f274:	str	r0, [sp, #16]
   1f278:	mov	r0, #0
   1f27c:	str	r0, [sp, #12]
   1f280:	ldr	r5, [sp, #28]
   1f284:	mov	r0, r5
   1f288:	mov	r1, r6
   1f28c:	bl	2043c <__assert_fail@plt+0xe79c>
   1f290:	ldr	r7, [fp, #-40]	; 0xffffffd8
   1f294:	mov	sl, r0
   1f298:	cmp	r7, #2
   1f29c:	beq	1f474 <__assert_fail@plt+0xd7d4>
   1f2a0:	cmp	r7, #4
   1f2a4:	bne	1f2e8 <__assert_fail@plt+0xd648>
   1f2a8:	ldr	r6, [sp, #48]	; 0x30
   1f2ac:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1f2b0:	sub	r3, fp, #32
   1f2b4:	ldr	r0, [r6, #64]	; 0x40
   1f2b8:	str	r1, [sp]
   1f2bc:	ldr	r1, [sp, #44]	; 0x2c
   1f2c0:	str	r1, [sp, #4]
   1f2c4:	mov	r1, r4
   1f2c8:	ldr	r2, [sp, #40]	; 0x28
   1f2cc:	bl	2085c <__assert_fail@plt+0xebbc>
   1f2d0:	ldr	r2, [sp, #28]
   1f2d4:	ldr	r5, [sp, #52]	; 0x34
   1f2d8:	cmp	r0, #0
   1f2dc:	str	r0, [r9]
   1f2e0:	beq	1f4b4 <__assert_fail@plt+0xd814>
   1f2e4:	b	1fa24 <__assert_fail@plt+0xdd84>
   1f2e8:	str	sl, [sp, #32]
   1f2ec:	mov	sl, #7
   1f2f0:	ldr	r2, [sp, #28]
   1f2f4:	str	r9, [sp, #24]
   1f2f8:	ldrb	r0, [r2, #4]
   1f2fc:	cmp	r0, #22
   1f300:	beq	1f310 <__assert_fail@plt+0xd670>
   1f304:	cmp	r0, #2
   1f308:	bne	1f414 <__assert_fail@plt+0xd774>
   1f30c:	b	1fa18 <__assert_fail@plt+0xdd78>
   1f310:	ldr	r5, [sp, #48]	; 0x30
   1f314:	ldr	r6, [sp, #32]
   1f318:	ldr	r2, [sp, #44]	; 0x2c
   1f31c:	ldr	r0, [r5, #40]	; 0x28
   1f320:	mov	r1, r5
   1f324:	add	r0, r0, r6
   1f328:	str	r0, [r5, #40]	; 0x28
   1f32c:	add	r0, sp, #56	; 0x38
   1f330:	bl	2043c <__assert_fail@plt+0xe79c>
   1f334:	mov	r3, r0
   1f338:	ldrb	r0, [sp, #60]	; 0x3c
   1f33c:	cmp	r0, #21
   1f340:	beq	1f3fc <__assert_fail@plt+0xd75c>
   1f344:	cmp	r0, #2
   1f348:	beq	1fa18 <__assert_fail@plt+0xdd78>
   1f34c:	ldr	r8, [sp, #44]	; 0x2c
   1f350:	mov	r0, #3
   1f354:	add	r2, sp, #56	; 0x38
   1f358:	str	r0, [fp, #-48]	; 0xffffffd0
   1f35c:	add	r0, sp, #64	; 0x40
   1f360:	str	r0, [fp, #-44]	; 0xffffffd4
   1f364:	mov	r0, #1
   1f368:	str	r0, [sp, #4]
   1f36c:	sub	r0, fp, #48	; 0x30
   1f370:	str	r8, [sp]
   1f374:	ldr	r5, [sp, #48]	; 0x30
   1f378:	mov	r1, r5
   1f37c:	bl	205a4 <__assert_fail@plt+0xe904>
   1f380:	cmp	r0, #0
   1f384:	bne	2013c <__assert_fail@plt+0xe49c>
   1f388:	ldr	r0, [sp, #28]
   1f38c:	mov	r1, r5
   1f390:	mov	r2, r8
   1f394:	bl	2043c <__assert_fail@plt+0xe79c>
   1f398:	ldr	r6, [fp, #-48]	; 0xffffffd0
   1f39c:	mov	sl, #11
   1f3a0:	str	r0, [sp, #32]
   1f3a4:	cmp	r6, #2
   1f3a8:	cmpne	r6, #4
   1f3ac:	beq	1fa18 <__assert_fail@plt+0xdd78>
   1f3b0:	cmp	r7, #3
   1f3b4:	bne	1f3c8 <__assert_fail@plt+0xd728>
   1f3b8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1f3bc:	bl	11a9c <strlen@plt>
   1f3c0:	cmp	r0, #1
   1f3c4:	bhi	1fa14 <__assert_fail@plt+0xdd74>
   1f3c8:	cmp	r6, #3
   1f3cc:	bne	1f3e0 <__assert_fail@plt+0xd740>
   1f3d0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1f3d4:	bl	11a9c <strlen@plt>
   1f3d8:	cmp	r0, #1
   1f3dc:	bhi	1fa14 <__assert_fail@plt+0xdd74>
   1f3e0:	ldr	r2, [sp, #28]
   1f3e4:	cmp	r7, #3
   1f3e8:	beq	1f560 <__assert_fail@plt+0xd8c0>
   1f3ec:	mov	r8, #0
   1f3f0:	cmp	r7, #0
   1f3f4:	ldrbeq	r8, [fp, #-36]	; 0xffffffdc
   1f3f8:	b	1f568 <__assert_fail@plt+0xd8c8>
   1f3fc:	ldr	r0, [r5, #40]	; 0x28
   1f400:	ldr	r2, [sp, #28]
   1f404:	sub	r0, r0, r6
   1f408:	str	r0, [r5, #40]	; 0x28
   1f40c:	mov	r0, #1
   1f410:	strb	r0, [r2, #4]
   1f414:	cmp	r7, #1
   1f418:	beq	1f504 <__assert_fail@plt+0xd864>
   1f41c:	ldr	r9, [sp, #24]
   1f420:	ldr	sl, [sp, #32]
   1f424:	cmp	r7, #2
   1f428:	mov	r8, #0
   1f42c:	beq	1f474 <__assert_fail@plt+0xd7d4>
   1f430:	cmp	r7, #3
   1f434:	mov	r7, #1
   1f438:	bne	1f544 <__assert_fail@plt+0xd8a4>
   1f43c:	ldr	r5, [fp, #-36]	; 0xffffffdc
   1f440:	mov	r0, r5
   1f444:	bl	11a9c <strlen@plt>
   1f448:	ldr	r6, [sp, #48]	; 0x30
   1f44c:	cmp	r0, #1
   1f450:	bne	1fa14 <__assert_fail@plt+0xdd74>
   1f454:	ldrb	r0, [r5]
   1f458:	ubfx	r1, r0, #5, #3
   1f45c:	and	r0, r0, #31
   1f460:	ldr	r2, [r4, r1, lsl #2]
   1f464:	orr	r0, r2, r7, lsl r0
   1f468:	str	r0, [r4, r1, lsl #2]
   1f46c:	str	r8, [r9]
   1f470:	b	1f4ac <__assert_fail@plt+0xd80c>
   1f474:	ldr	r5, [fp, #-36]	; 0xffffffdc
   1f478:	mov	r0, r5
   1f47c:	bl	11a9c <strlen@plt>
   1f480:	cmp	r0, #1
   1f484:	mov	r3, #1
   1f488:	bne	1fa10 <__assert_fail@plt+0xdd70>
   1f48c:	ldrb	r0, [r5]
   1f490:	ubfx	r1, r0, #5, #3
   1f494:	and	r0, r0, #31
   1f498:	ldr	r2, [r4, r1, lsl #2]
   1f49c:	orr	r0, r2, r3, lsl r0
   1f4a0:	str	r0, [r4, r1, lsl #2]
   1f4a4:	str	r8, [r9]
   1f4a8:	ldr	r6, [sp, #48]	; 0x30
   1f4ac:	ldr	r2, [sp, #28]
   1f4b0:	ldr	r5, [sp, #52]	; 0x34
   1f4b4:	ldrb	r0, [r2, #4]
   1f4b8:	cmp	r0, #21
   1f4bc:	beq	1f748 <__assert_fail@plt+0xdaa8>
   1f4c0:	cmp	r0, #2
   1f4c4:	ldr	r0, [sp, #44]	; 0x2c
   1f4c8:	beq	1f9d4 <__assert_fail@plt+0xdd34>
   1f4cc:	mov	r1, #3
   1f4d0:	mov	r3, sl
   1f4d4:	mov	r5, r2
   1f4d8:	str	r1, [fp, #-40]	; 0xffffffd8
   1f4dc:	sub	r1, fp, #80	; 0x50
   1f4e0:	str	r1, [fp, #-36]	; 0xffffffdc
   1f4e4:	stm	sp, {r0, r8}
   1f4e8:	sub	r0, fp, #40	; 0x28
   1f4ec:	mov	r1, r6
   1f4f0:	bl	205a4 <__assert_fail@plt+0xe904>
   1f4f4:	ldr	r2, [sp, #44]	; 0x2c
   1f4f8:	cmp	r0, #0
   1f4fc:	beq	1f284 <__assert_fail@plt+0xd5e4>
   1f500:	b	1f9cc <__assert_fail@plt+0xdd2c>
   1f504:	ldr	r3, [sp, #40]	; 0x28
   1f508:	ldr	r0, [sp, #16]
   1f50c:	mov	r8, #0
   1f510:	ldr	r1, [r3, #20]
   1f514:	cmp	r0, r1
   1f518:	beq	1f6a8 <__assert_fail@plt+0xda08>
   1f51c:	ldr	r0, [r3]
   1f520:	ldr	r9, [sp, #24]
   1f524:	ldr	r6, [sp, #48]	; 0x30
   1f528:	ldr	r5, [sp, #52]	; 0x34
   1f52c:	ldr	ip, [fp, #-36]	; 0xffffffdc
   1f530:	ldr	sl, [sp, #32]
   1f534:	add	r7, r1, #1
   1f538:	str	r7, [r3, #20]
   1f53c:	str	ip, [r0, r1, lsl #2]
   1f540:	b	1f4b4 <__assert_fail@plt+0xd814>
   1f544:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   1f548:	ubfx	r1, r0, #5, #3
   1f54c:	and	r0, r0, #31
   1f550:	ldr	r2, [r4, r1, lsl #2]
   1f554:	orr	r0, r2, r7, lsl r0
   1f558:	str	r0, [r4, r1, lsl #2]
   1f55c:	b	1f4a8 <__assert_fail@plt+0xd808>
   1f560:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1f564:	ldrb	r8, [r0]
   1f568:	cmp	r6, #3
   1f56c:	beq	1f580 <__assert_fail@plt+0xd8e0>
   1f570:	mov	r9, #0
   1f574:	cmp	r6, #0
   1f578:	ldrbeq	r9, [fp, #-44]	; 0xffffffd4
   1f57c:	b	1f588 <__assert_fail@plt+0xd8e8>
   1f580:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1f584:	ldrb	r9, [r0]
   1f588:	cmp	r7, #3
   1f58c:	cmpne	r7, #0
   1f590:	bne	1f5b8 <__assert_fail@plt+0xd918>
   1f594:	ldr	r0, [sp, #52]	; 0x34
   1f598:	ldr	r0, [r0, #92]	; 0x5c
   1f59c:	cmp	r0, #2
   1f5a0:	blt	1f5bc <__assert_fail@plt+0xd91c>
   1f5a4:	mov	r0, r8
   1f5a8:	bl	11b20 <btowc@plt>
   1f5ac:	ldr	r2, [sp, #28]
   1f5b0:	mov	r8, r0
   1f5b4:	b	1f5bc <__assert_fail@plt+0xd91c>
   1f5b8:	ldr	r8, [fp, #-36]	; 0xffffffdc
   1f5bc:	cmp	r6, #3
   1f5c0:	cmpne	r6, #0
   1f5c4:	bne	1f5ec <__assert_fail@plt+0xd94c>
   1f5c8:	ldr	r0, [sp, #52]	; 0x34
   1f5cc:	ldr	r0, [r0, #92]	; 0x5c
   1f5d0:	cmp	r0, #2
   1f5d4:	blt	1f5f0 <__assert_fail@plt+0xd950>
   1f5d8:	mov	r0, r9
   1f5dc:	bl	11b20 <btowc@plt>
   1f5e0:	ldr	r2, [sp, #28]
   1f5e4:	mov	r9, r0
   1f5e8:	b	1f5f0 <__assert_fail@plt+0xd950>
   1f5ec:	ldr	r9, [fp, #-44]	; 0xffffffd4
   1f5f0:	cmn	r8, #1
   1f5f4:	mov	sl, #3
   1f5f8:	cmnne	r9, #1
   1f5fc:	beq	1fa18 <__assert_fail@plt+0xdd78>
   1f600:	ldr	r0, [sp, #20]
   1f604:	cmp	r0, #0
   1f608:	beq	1f618 <__assert_fail@plt+0xd978>
   1f60c:	cmp	r8, r9
   1f610:	mov	sl, #11
   1f614:	bhi	1fa18 <__assert_fail@plt+0xdd78>
   1f618:	ldr	r0, [sp, #52]	; 0x34
   1f61c:	ldr	r0, [r0, #92]	; 0x5c
   1f620:	cmp	r0, #2
   1f624:	blt	1f65c <__assert_fail@plt+0xd9bc>
   1f628:	ldr	r7, [sp, #40]	; 0x28
   1f62c:	ldr	r1, [sp, #12]
   1f630:	ldr	r6, [sp, #48]	; 0x30
   1f634:	ldr	r0, [r7, #32]
   1f638:	cmp	r1, r0
   1f63c:	beq	1f6f0 <__assert_fail@plt+0xda50>
   1f640:	ldmib	r7, {r5, sl}
   1f644:	str	r8, [r5, r0, lsl #2]
   1f648:	ldr	r0, [r7, #32]
   1f64c:	add	r1, r0, #1
   1f650:	str	r1, [r7, #32]
   1f654:	str	r9, [sl, r0, lsl #2]
   1f658:	b	1f660 <__assert_fail@plt+0xd9c0>
   1f65c:	ldr	r6, [sp, #48]	; 0x30
   1f660:	ldr	sl, [sp, #32]
   1f664:	mov	r0, #0
   1f668:	mov	r5, #1
   1f66c:	cmp	r8, r0
   1f670:	cmpls	r0, r9
   1f674:	ubfxls	r1, r0, #5, #3
   1f678:	andls	r3, r0, #31
   1f67c:	add	r0, r0, #1
   1f680:	ldrls	r7, [r4, r1, lsl #2]
   1f684:	orrls	r3, r7, r5, lsl r3
   1f688:	strls	r3, [r4, r1, lsl #2]
   1f68c:	cmp	r0, #256	; 0x100
   1f690:	bne	1f66c <__assert_fail@plt+0xd9cc>
   1f694:	ldr	r9, [sp, #24]
   1f698:	ldr	r5, [sp, #52]	; 0x34
   1f69c:	mov	r8, #0
   1f6a0:	str	r8, [r9]
   1f6a4:	b	1f4b4 <__assert_fail@plt+0xd814>
   1f6a8:	ldr	r1, [sp, #16]
   1f6ac:	mov	r0, #1
   1f6b0:	orr	r1, r0, r1, lsl #1
   1f6b4:	ldr	r0, [r3]
   1f6b8:	str	r1, [sp, #16]
   1f6bc:	lsl	r1, r1, #2
   1f6c0:	bl	1a2b4 <__assert_fail@plt+0x8614>
   1f6c4:	cmp	r0, #0
   1f6c8:	beq	20144 <__assert_fail@plt+0xe4a4>
   1f6cc:	ldr	r3, [sp, #40]	; 0x28
   1f6d0:	ldr	r9, [sp, #24]
   1f6d4:	ldr	r6, [sp, #48]	; 0x30
   1f6d8:	ldr	r2, [sp, #28]
   1f6dc:	ldr	r5, [sp, #52]	; 0x34
   1f6e0:	mov	r8, #0
   1f6e4:	str	r0, [r3]
   1f6e8:	ldr	r1, [r3, #20]
   1f6ec:	b	1f52c <__assert_fail@plt+0xd88c>
   1f6f0:	ldr	r1, [sp, #12]
   1f6f4:	mov	r0, #1
   1f6f8:	orr	r1, r0, r1, lsl #1
   1f6fc:	ldr	r0, [r7, #4]
   1f700:	lsl	r6, r1, #2
   1f704:	str	r1, [sp, #12]
   1f708:	mov	r1, r6
   1f70c:	bl	1a2b4 <__assert_fail@plt+0x8614>
   1f710:	mov	r5, r0
   1f714:	ldr	r0, [r7, #8]
   1f718:	mov	r1, r6
   1f71c:	bl	1a2b4 <__assert_fail@plt+0x8614>
   1f720:	mov	sl, r0
   1f724:	cmp	r5, #0
   1f728:	cmpne	sl, #0
   1f72c:	beq	20154 <__assert_fail@plt+0xe4b4>
   1f730:	ldr	r7, [sp, #40]	; 0x28
   1f734:	stmib	r7, {r5, sl}
   1f738:	ldr	r0, [r7, #32]
   1f73c:	ldr	r6, [sp, #48]	; 0x30
   1f740:	ldr	r2, [sp, #28]
   1f744:	b	1f644 <__assert_fail@plt+0xd9a4>
   1f748:	ldr	r0, [r6, #40]	; 0x28
   1f74c:	add	r0, r0, sl
   1f750:	str	r0, [r6, #40]	; 0x28
   1f754:	ldr	r0, [sp, #36]	; 0x24
   1f758:	cmp	r0, #0
   1f75c:	beq	1f780 <__assert_fail@plt+0xdae0>
   1f760:	mov	r0, #0
   1f764:	add	r1, r4, r0
   1f768:	add	r0, r0, #16
   1f76c:	vld1.32	{d16-d17}, [r1]
   1f770:	cmp	r0, #32
   1f774:	vmvn	q8, q8
   1f778:	vst1.32	{d16-d17}, [r1]
   1f77c:	bne	1f764 <__assert_fail@plt+0xdac4>
   1f780:	ldr	r0, [r5, #92]	; 0x5c
   1f784:	ldr	r8, [sp, #40]	; 0x28
   1f788:	cmp	r0, #2
   1f78c:	blt	1f7b4 <__assert_fail@plt+0xdb14>
   1f790:	ldr	r1, [r5, #60]	; 0x3c
   1f794:	mov	r2, #0
   1f798:	ldr	r3, [r1, r2, lsl #2]
   1f79c:	ldr	r7, [r4, r2, lsl #2]
   1f7a0:	and	r3, r7, r3
   1f7a4:	str	r3, [r4, r2, lsl #2]
   1f7a8:	add	r2, r2, #1
   1f7ac:	cmp	r2, #8
   1f7b0:	bne	1f798 <__assert_fail@plt+0xdaf8>
   1f7b4:	ldr	r1, [r8, #20]
   1f7b8:	cmp	r1, #0
   1f7bc:	bne	1f7e4 <__assert_fail@plt+0xdb44>
   1f7c0:	ldr	r1, [r8, #24]
   1f7c4:	cmp	r1, #0
   1f7c8:	bne	1f7e4 <__assert_fail@plt+0xdb44>
   1f7cc:	ldr	r1, [r8, #28]
   1f7d0:	cmp	r1, #0
   1f7d4:	bne	1f7e4 <__assert_fail@plt+0xdb44>
   1f7d8:	ldr	r1, [r8, #32]
   1f7dc:	cmp	r1, #0
   1f7e0:	beq	1f97c <__assert_fail@plt+0xdcdc>
   1f7e4:	ldrb	r0, [r5, #88]	; 0x58
   1f7e8:	add	r3, sp, #64	; 0x40
   1f7ec:	mov	r1, #0
   1f7f0:	mov	r2, #0
   1f7f4:	orr	r0, r0, #2
   1f7f8:	strb	r0, [r5, #88]	; 0x58
   1f7fc:	mov	r0, #6
   1f800:	str	r8, [sp, #64]	; 0x40
   1f804:	str	r0, [sp, #68]	; 0x44
   1f808:	mov	r0, r5
   1f80c:	mov	r5, #0
   1f810:	bl	2016c <__assert_fail@plt+0xe4cc>
   1f814:	ldr	r6, [sp, #48]	; 0x30
   1f818:	cmp	r0, #0
   1f81c:	beq	1f8a0 <__assert_fail@plt+0xdc00>
   1f820:	mov	r7, r0
   1f824:	ldr	r0, [r4, r5, lsl #2]
   1f828:	cmp	r0, #0
   1f82c:	bne	1f848 <__assert_fail@plt+0xdba8>
   1f830:	add	r5, r5, #1
   1f834:	cmp	r5, #7
   1f838:	bls	1f824 <__assert_fail@plt+0xdb84>
   1f83c:	mov	r0, r4
   1f840:	bl	1a158 <__assert_fail@plt+0x84b8>
   1f844:	b	1fa3c <__assert_fail@plt+0xdd9c>
   1f848:	mov	r0, #3
   1f84c:	str	r4, [sp, #64]	; 0x40
   1f850:	add	r3, sp, #64	; 0x40
   1f854:	mov	r1, #0
   1f858:	mov	r2, #0
   1f85c:	mov	r5, #0
   1f860:	str	r0, [sp, #68]	; 0x44
   1f864:	ldr	r0, [sp, #52]	; 0x34
   1f868:	bl	2016c <__assert_fail@plt+0xe4cc>
   1f86c:	cmp	r0, #0
   1f870:	beq	1f8a0 <__assert_fail@plt+0xdc00>
   1f874:	mov	r1, r0
   1f878:	mov	r0, #10
   1f87c:	sub	r3, fp, #80	; 0x50
   1f880:	mov	r2, r7
   1f884:	str	r0, [fp, #-76]	; 0xffffffb4
   1f888:	ldr	r0, [sp, #52]	; 0x34
   1f88c:	str	r5, [fp, #-80]	; 0xffffffb0
   1f890:	bl	2016c <__assert_fail@plt+0xe4cc>
   1f894:	mov	r7, r0
   1f898:	cmp	r0, #0
   1f89c:	bne	1fa3c <__assert_fail@plt+0xdd9c>
   1f8a0:	mov	r0, #12
   1f8a4:	b	1f9e4 <__assert_fail@plt+0xdd44>
   1f8a8:	mov	r4, #9
   1f8ac:	mov	r0, #6
   1f8b0:	ldr	r5, [sp, #52]	; 0x34
   1f8b4:	str	r0, [r7]
   1f8b8:	mov	r1, #0
   1f8bc:	mov	r2, #0
   1f8c0:	mov	r3, r7
   1f8c4:	mov	sl, #0
   1f8c8:	mov	r0, r5
   1f8cc:	bl	2016c <__assert_fail@plt+0xe4cc>
   1f8d0:	mov	r8, r0
   1f8d4:	mov	r0, r5
   1f8d8:	mov	r1, #0
   1f8dc:	mov	r2, #0
   1f8e0:	mov	r3, r7
   1f8e4:	str	r4, [r7]
   1f8e8:	bl	2016c <__assert_fail@plt+0xe4cc>
   1f8ec:	mov	r7, r0
   1f8f0:	mov	r0, #10
   1f8f4:	sub	r3, fp, #80	; 0x50
   1f8f8:	mov	r1, r8
   1f8fc:	str	r0, [fp, #-76]	; 0xffffffb4
   1f900:	mov	r0, r5
   1f904:	mov	r2, r7
   1f908:	str	sl, [fp, #-80]	; 0xffffffb0
   1f90c:	bl	2016c <__assert_fail@plt+0xe4cc>
   1f910:	cmp	r8, #0
   1f914:	cmpne	r7, #0
   1f918:	bne	1f93c <__assert_fail@plt+0xdc9c>
   1f91c:	mov	r0, #12
   1f920:	str	r0, [r9]
   1f924:	b	1ffec <__assert_fail@plt+0xe34c>
   1f928:	mov	r1, #0
   1f92c:	mov	r2, #0
   1f930:	mov	r3, r7
   1f934:	mov	sl, #0
   1f938:	bl	2016c <__assert_fail@plt+0xe4cc>
   1f93c:	mov	r5, r0
   1f940:	cmp	r0, #0
   1f944:	beq	1f91c <__assert_fail@plt+0xdc7c>
   1f948:	ldr	r0, [sp, #28]
   1f94c:	ldr	r2, [sp, #44]	; 0x2c
   1f950:	mov	r1, r6
   1f954:	bl	1e338 <__assert_fail@plt+0xc698>
   1f958:	ldr	r1, [r6, #40]	; 0x28
   1f95c:	mov	sl, r5
   1f960:	add	r0, r1, r0
   1f964:	str	r0, [r6, #40]	; 0x28
   1f968:	b	1ffec <__assert_fail@plt+0xe34c>
   1f96c:	mov	r6, r5
   1f970:	b	1fa68 <__assert_fail@plt+0xddc8>
   1f974:	mov	r6, r5
   1f978:	b	1fa60 <__assert_fail@plt+0xddc0>
   1f97c:	cmp	r0, #2
   1f980:	blt	1f99c <__assert_fail@plt+0xdcfc>
   1f984:	ldr	r0, [r8, #36]	; 0x24
   1f988:	cmp	r0, #0
   1f98c:	bne	1f7e4 <__assert_fail@plt+0xdb44>
   1f990:	ldrb	r0, [r8, #16]
   1f994:	tst	r0, #1
   1f998:	bne	1f7e4 <__assert_fail@plt+0xdb44>
   1f99c:	mov	r0, r8
   1f9a0:	bl	1d814 <__assert_fail@plt+0xbb74>
   1f9a4:	mov	r0, #3
   1f9a8:	str	r4, [sp, #64]	; 0x40
   1f9ac:	add	r3, sp, #64	; 0x40
   1f9b0:	mov	r1, #0
   1f9b4:	mov	r2, #0
   1f9b8:	str	r0, [sp, #68]	; 0x44
   1f9bc:	mov	r0, r5
   1f9c0:	bl	2016c <__assert_fail@plt+0xe4cc>
   1f9c4:	ldr	r6, [sp, #48]	; 0x30
   1f9c8:	b	1f894 <__assert_fail@plt+0xdbf4>
   1f9cc:	mov	sl, r0
   1f9d0:	b	1f9d8 <__assert_fail@plt+0xdd38>
   1f9d4:	mov	sl, #7
   1f9d8:	str	r9, [sp, #24]
   1f9dc:	b	1fa18 <__assert_fail@plt+0xdd78>
   1f9e0:	mov	r0, #2
   1f9e4:	str	r0, [r9]
   1f9e8:	b	1fa28 <__assert_fail@plt+0xdd88>
   1f9ec:	mov	r0, #6
   1f9f0:	b	1f920 <__assert_fail@plt+0xdc80>
   1f9f4:	mov	r0, r4
   1f9f8:	bl	1a158 <__assert_fail@plt+0x84b8>
   1f9fc:	mov	r0, r8
   1fa00:	bl	1a158 <__assert_fail@plt+0x84b8>
   1fa04:	mov	r0, #12
   1fa08:	str	r0, [r9]
   1fa0c:	b	1fa3c <__assert_fail@plt+0xdd9c>
   1fa10:	str	r9, [sp, #24]
   1fa14:	mov	sl, #3
   1fa18:	ldr	r9, [sp, #24]
   1fa1c:	ldr	r6, [sp, #48]	; 0x30
   1fa20:	str	sl, [r9]
   1fa24:	ldr	r8, [sp, #40]	; 0x28
   1fa28:	mov	r0, r4
   1fa2c:	bl	1a158 <__assert_fail@plt+0x84b8>
   1fa30:	mov	r0, r8
   1fa34:	bl	1d814 <__assert_fail@plt+0xbb74>
   1fa38:	mov	r7, #0
   1fa3c:	mov	r4, r7
   1fa40:	cmp	r7, #0
   1fa44:	bne	1fa60 <__assert_fail@plt+0xddc0>
   1fa48:	ldr	r0, [r9]
   1fa4c:	ldr	r2, [sp, #44]	; 0x2c
   1fa50:	ldr	r3, [sp, #28]
   1fa54:	cmp	r0, #0
   1fa58:	beq	1fa68 <__assert_fail@plt+0xddc8>
   1fa5c:	b	1ffe8 <__assert_fail@plt+0xe348>
   1fa60:	ldr	r2, [sp, #44]	; 0x2c
   1fa64:	ldr	r3, [sp, #28]
   1fa68:	mov	r0, r3
   1fa6c:	mov	r1, r6
   1fa70:	str	r9, [sp, #24]
   1fa74:	bl	1e338 <__assert_fail@plt+0xc698>
   1fa78:	ldr	r1, [r6, #40]	; 0x28
   1fa7c:	ldr	r2, [sp, #44]	; 0x2c
   1fa80:	ldr	r3, [sp, #28]
   1fa84:	sub	r7, fp, #80	; 0x50
   1fa88:	add	r0, r1, r0
   1fa8c:	str	r0, [r6, #40]	; 0x28
   1fa90:	and	r0, r2, #2097152	; 0x200000
   1fa94:	str	r0, [sp, #20]
   1fa98:	and	r0, r2, #16777216	; 0x1000000
   1fa9c:	str	r0, [sp, #32]
   1faa0:	ldrb	r0, [r3, #4]
   1faa4:	cmp	r0, #23
   1faa8:	bhi	1ff7c <__assert_fail@plt+0xe2dc>
   1faac:	movw	r6, #2048	; 0x800
   1fab0:	mov	r1, #1
   1fab4:	movt	r6, #140	; 0x8c
   1fab8:	tst	r6, r1, lsl r0
   1fabc:	beq	1ff7c <__assert_fail@plt+0xe2dc>
   1fac0:	cmp	r0, #23
   1fac4:	bne	1fb1c <__assert_fail@plt+0xde7c>
   1fac8:	ldr	r0, [sp, #48]	; 0x30
   1facc:	ldr	sl, [r3]
   1fad0:	ldr	r8, [r3, #4]
   1fad4:	mov	r1, r3
   1fad8:	mov	r5, r3
   1fadc:	ldr	r9, [r0, #40]	; 0x28
   1fae0:	bl	210e8 <__assert_fail@plt+0xf448>
   1fae4:	cmn	r0, #1
   1fae8:	bne	1fb38 <__assert_fail@plt+0xde98>
   1faec:	ldrb	r0, [r5, #4]
   1faf0:	mov	r3, r5
   1faf4:	cmp	r0, #1
   1faf8:	ldrbeq	r1, [r3]
   1fafc:	cmpeq	r1, #44	; 0x2c
   1fb00:	beq	1fba0 <__assert_fail@plt+0xdf00>
   1fb04:	ldr	r0, [sp, #24]
   1fb08:	ldr	r2, [sp, #44]	; 0x2c
   1fb0c:	mov	r1, #10
   1fb10:	mov	r5, #0
   1fb14:	str	r1, [r0]
   1fb18:	b	1fef0 <__assert_fail@plt+0xe250>
   1fb1c:	cmp	r0, #19
   1fb20:	sub	r0, r0, #18
   1fb24:	mvn	sl, #0
   1fb28:	clz	r0, r0
   1fb2c:	movweq	sl, #1
   1fb30:	lsr	r6, r0, #5
   1fb34:	b	1fc00 <__assert_fail@plt+0xdf60>
   1fb38:	str	sl, [sp, #40]	; 0x28
   1fb3c:	mov	r6, r0
   1fb40:	cmn	r0, #2
   1fb44:	mov	r3, r5
   1fb48:	ldr	r2, [sp, #44]	; 0x2c
   1fb4c:	beq	1fb74 <__assert_fail@plt+0xded4>
   1fb50:	ldr	r0, [r3, #4]
   1fb54:	uxtb	r0, r0
   1fb58:	mov	sl, r6
   1fb5c:	cmp	r0, #24
   1fb60:	beq	1fbd0 <__assert_fail@plt+0xdf30>
   1fb64:	cmp	r0, #1
   1fb68:	ldrbeq	r0, [r3]
   1fb6c:	cmpeq	r0, #44	; 0x2c
   1fb70:	beq	1fbb0 <__assert_fail@plt+0xdf10>
   1fb74:	ldr	r0, [sp, #20]
   1fb78:	cmp	r0, #0
   1fb7c:	beq	1ff48 <__assert_fail@plt+0xe2a8>
   1fb80:	ldr	r0, [sp, #48]	; 0x30
   1fb84:	mov	r5, r4
   1fb88:	str	r9, [r0, #40]	; 0x28
   1fb8c:	mov	r0, #1
   1fb90:	bfi	r8, r0, #0, #8
   1fb94:	ldr	r0, [sp, #40]	; 0x28
   1fb98:	stm	r3, {r0, r8}
   1fb9c:	b	1fef0 <__assert_fail@plt+0xe250>
   1fba0:	str	sl, [sp, #40]	; 0x28
   1fba4:	mov	r6, #0
   1fba8:	ldr	r2, [sp, #44]	; 0x2c
   1fbac:	b	1fb54 <__assert_fail@plt+0xdeb4>
   1fbb0:	ldr	r0, [sp, #48]	; 0x30
   1fbb4:	mov	r1, r3
   1fbb8:	bl	210e8 <__assert_fail@plt+0xf448>
   1fbbc:	ldr	r3, [sp, #28]
   1fbc0:	ldr	r2, [sp, #44]	; 0x2c
   1fbc4:	mov	sl, r0
   1fbc8:	cmn	r0, #2
   1fbcc:	beq	1fb74 <__assert_fail@plt+0xded4>
   1fbd0:	cmn	sl, #1
   1fbd4:	beq	1fbe0 <__assert_fail@plt+0xdf40>
   1fbd8:	cmp	r6, sl
   1fbdc:	bgt	1ff3c <__assert_fail@plt+0xe29c>
   1fbe0:	ldrb	r0, [r3, #4]
   1fbe4:	cmp	r0, #24
   1fbe8:	bne	1ff3c <__assert_fail@plt+0xe29c>
   1fbec:	cmn	sl, #1
   1fbf0:	mov	r0, sl
   1fbf4:	moveq	r0, r6
   1fbf8:	cmp	r0, #32768	; 0x8000
   1fbfc:	bge	1ff68 <__assert_fail@plt+0xe2c8>
   1fc00:	ldr	r5, [sp, #48]	; 0x30
   1fc04:	mov	r0, r3
   1fc08:	mov	r1, r5
   1fc0c:	bl	1e338 <__assert_fail@plt+0xc698>
   1fc10:	ldr	r1, [r5, #40]	; 0x28
   1fc14:	cmp	r4, #0
   1fc18:	add	r0, r1, r0
   1fc1c:	str	r0, [r5, #40]	; 0x28
   1fc20:	mov	r5, #0
   1fc24:	beq	1fe28 <__assert_fail@plt+0xe188>
   1fc28:	orrs	r0, sl, r6
   1fc2c:	beq	1fdd4 <__assert_fail@plt+0xe134>
   1fc30:	mov	r0, #0
   1fc34:	cmp	r6, #1
   1fc38:	mov	r8, r4
   1fc3c:	str	r0, [sp, #40]	; 0x28
   1fc40:	str	r4, [sp, #36]	; 0x24
   1fc44:	mov	r4, #10
   1fc48:	bge	1fe34 <__assert_fail@plt+0xe194>
   1fc4c:	ldrb	r0, [r8, #24]
   1fc50:	cmp	r0, #17
   1fc54:	ldr	r0, [sp, #52]	; 0x34
   1fc58:	bne	1fcc8 <__assert_fail@plt+0xe028>
   1fc5c:	ldr	r5, [r8, #20]
   1fc60:	mov	r2, r8
   1fc64:	mov	r1, r2
   1fc68:	ldr	r2, [r2, #4]
   1fc6c:	cmp	r2, #0
   1fc70:	bne	1fc64 <__assert_fail@plt+0xdfc4>
   1fc74:	ldr	r2, [r1, #8]
   1fc78:	cmp	r2, #0
   1fc7c:	bne	1fc64 <__assert_fail@plt+0xdfc4>
   1fc80:	ldr	r2, [r1, #24]
   1fc84:	uxtb	r3, r2
   1fc88:	cmp	r3, #17
   1fc8c:	ldreq	r3, [r1, #20]
   1fc90:	cmpeq	r3, r5
   1fc94:	orreq	r2, r2, #524288	; 0x80000
   1fc98:	streq	r2, [r1, #24]
   1fc9c:	ldr	r3, [r1]
   1fca0:	cmp	r3, #0
   1fca4:	beq	1fcc8 <__assert_fail@plt+0xe028>
   1fca8:	ldr	r2, [r3, #8]
   1fcac:	cmp	r2, r1
   1fcb0:	mov	r1, r3
   1fcb4:	beq	1fc80 <__assert_fail@plt+0xdfe0>
   1fcb8:	cmp	r2, #0
   1fcbc:	mov	r1, r3
   1fcc0:	beq	1fc80 <__assert_fail@plt+0xdfe0>
   1fcc4:	b	1fc64 <__assert_fail@plt+0xdfc4>
   1fcc8:	mov	r1, #0
   1fccc:	cmn	sl, #1
   1fcd0:	mov	r2, #0
   1fcd4:	mov	r3, r7
   1fcd8:	str	r1, [fp, #-80]	; 0xffffffb0
   1fcdc:	mov	r1, #10
   1fce0:	movweq	r1, #11
   1fce4:	str	r1, [fp, #-76]	; 0xffffffb4
   1fce8:	mov	r1, r8
   1fcec:	bl	2016c <__assert_fail@plt+0xe4cc>
   1fcf0:	cmp	r0, #0
   1fcf4:	beq	1fed4 <__assert_fail@plt+0xe234>
   1fcf8:	mov	r5, r0
   1fcfc:	add	r0, r6, #2
   1fd00:	cmp	r0, sl
   1fd04:	ble	1fd3c <__assert_fail@plt+0xe09c>
   1fd08:	ldr	r1, [sp, #40]	; 0x28
   1fd0c:	cmp	r1, #0
   1fd10:	beq	1fdc0 <__assert_fail@plt+0xe120>
   1fd14:	mov	r0, #16
   1fd18:	mov	r2, r5
   1fd1c:	mov	r3, r7
   1fd20:	str	r0, [fp, #-76]	; 0xffffffb4
   1fd24:	mov	r0, #0
   1fd28:	str	r0, [fp, #-80]	; 0xffffffb0
   1fd2c:	ldr	r0, [sp, #52]	; 0x34
   1fd30:	bl	2016c <__assert_fail@plt+0xe4cc>
   1fd34:	mov	r5, r0
   1fd38:	b	1fee4 <__assert_fail@plt+0xe244>
   1fd3c:	add	r6, r6, #1
   1fd40:	ldr	r9, [sp, #52]	; 0x34
   1fd44:	mov	r0, r8
   1fd48:	mov	r1, r9
   1fd4c:	bl	211a0 <__assert_fail@plt+0xf500>
   1fd50:	mov	r8, r0
   1fd54:	mov	r0, #16
   1fd58:	mov	r1, r5
   1fd5c:	mov	r3, r7
   1fd60:	str	r0, [fp, #-76]	; 0xffffffb4
   1fd64:	mov	r0, #0
   1fd68:	mov	r2, r8
   1fd6c:	str	r0, [fp, #-80]	; 0xffffffb0
   1fd70:	mov	r0, r9
   1fd74:	bl	2016c <__assert_fail@plt+0xe4cc>
   1fd78:	cmp	r8, #0
   1fd7c:	movne	r1, r0
   1fd80:	cmpne	r0, #0
   1fd84:	beq	1fed4 <__assert_fail@plt+0xe234>
   1fd88:	mov	r0, #0
   1fd8c:	str	r4, [fp, #-76]	; 0xffffffb4
   1fd90:	mov	r2, #0
   1fd94:	mov	r3, r7
   1fd98:	str	r0, [fp, #-80]	; 0xffffffb0
   1fd9c:	ldr	r0, [sp, #52]	; 0x34
   1fda0:	bl	2016c <__assert_fail@plt+0xe4cc>
   1fda4:	cmp	r0, #0
   1fda8:	beq	1fed4 <__assert_fail@plt+0xe234>
   1fdac:	add	r6, r6, #1
   1fdb0:	mov	r5, r0
   1fdb4:	cmp	r6, sl
   1fdb8:	blt	1fd40 <__assert_fail@plt+0xe0a0>
   1fdbc:	b	1fd08 <__assert_fail@plt+0xe068>
   1fdc0:	ldr	r2, [sp, #44]	; 0x2c
   1fdc4:	ldr	r3, [sp, #28]
   1fdc8:	clz	r0, r5
   1fdcc:	lsr	r0, r0, #5
   1fdd0:	b	1ff10 <__assert_fail@plt+0xe270>
   1fdd4:	mov	r0, r4
   1fdd8:	mov	r6, r0
   1fddc:	ldr	r0, [r0, #4]
   1fde0:	cmp	r0, #0
   1fde4:	bne	1fdd8 <__assert_fail@plt+0xe138>
   1fde8:	ldr	r0, [r6, #8]
   1fdec:	cmp	r0, #0
   1fdf0:	bne	1fdd8 <__assert_fail@plt+0xe138>
   1fdf4:	add	r0, r6, #20
   1fdf8:	bl	1d784 <__assert_fail@plt+0xbae4>
   1fdfc:	ldr	r1, [r6]
   1fe00:	cmp	r1, #0
   1fe04:	beq	1fe28 <__assert_fail@plt+0xe188>
   1fe08:	ldr	r0, [r1, #8]
   1fe0c:	cmp	r0, r6
   1fe10:	mov	r6, r1
   1fe14:	beq	1fdf4 <__assert_fail@plt+0xe154>
   1fe18:	cmp	r0, #0
   1fe1c:	mov	r6, r1
   1fe20:	beq	1fdf4 <__assert_fail@plt+0xe154>
   1fe24:	b	1fdd8 <__assert_fail@plt+0xe138>
   1fe28:	ldr	r2, [sp, #44]	; 0x2c
   1fe2c:	ldr	r3, [sp, #28]
   1fe30:	b	1fef0 <__assert_fail@plt+0xe250>
   1fe34:	ldr	r9, [sp, #36]	; 0x24
   1fe38:	str	r9, [sp, #40]	; 0x28
   1fe3c:	beq	1fea8 <__assert_fail@plt+0xe208>
   1fe40:	ldr	r0, [sp, #36]	; 0x24
   1fe44:	mov	r5, #1
   1fe48:	mov	r9, r0
   1fe4c:	str	r0, [sp, #40]	; 0x28
   1fe50:	ldr	r8, [sp, #52]	; 0x34
   1fe54:	mov	r0, r9
   1fe58:	mov	r1, r8
   1fe5c:	bl	211a0 <__assert_fail@plt+0xf500>
   1fe60:	ldr	r1, [sp, #40]	; 0x28
   1fe64:	mov	r9, r0
   1fe68:	mov	r0, #16
   1fe6c:	mov	r3, r7
   1fe70:	str	r0, [fp, #-76]	; 0xffffffb4
   1fe74:	mov	r0, #0
   1fe78:	mov	r2, r9
   1fe7c:	str	r0, [fp, #-80]	; 0xffffffb0
   1fe80:	mov	r0, r8
   1fe84:	bl	2016c <__assert_fail@plt+0xe4cc>
   1fe88:	str	r0, [sp, #40]	; 0x28
   1fe8c:	cmp	r9, #0
   1fe90:	ldrne	r0, [sp, #40]	; 0x28
   1fe94:	cmpne	r0, #0
   1fe98:	beq	1fed4 <__assert_fail@plt+0xe234>
   1fe9c:	add	r5, r5, #1
   1fea0:	cmp	r5, r6
   1fea4:	blt	1fe50 <__assert_fail@plt+0xe1b0>
   1fea8:	cmp	r6, sl
   1feac:	bne	1febc <__assert_fail@plt+0xe21c>
   1feb0:	ldr	r2, [sp, #44]	; 0x2c
   1feb4:	ldr	r5, [sp, #40]	; 0x28
   1feb8:	b	1fdc4 <__assert_fail@plt+0xe124>
   1febc:	ldr	r1, [sp, #52]	; 0x34
   1fec0:	mov	r0, r9
   1fec4:	bl	211a0 <__assert_fail@plt+0xf500>
   1fec8:	mov	r8, r0
   1fecc:	cmp	r0, #0
   1fed0:	bne	1fc4c <__assert_fail@plt+0xdfac>
   1fed4:	ldr	r0, [sp, #24]
   1fed8:	mov	r1, #12
   1fedc:	mov	r5, #0
   1fee0:	str	r1, [r0]
   1fee4:	ldr	r2, [sp, #44]	; 0x2c
   1fee8:	ldr	r3, [sp, #28]
   1feec:	ldr	r4, [sp, #36]	; 0x24
   1fef0:	clz	r0, r5
   1fef4:	cmp	r5, #0
   1fef8:	lsr	r0, r0, #5
   1fefc:	bne	1ff10 <__assert_fail@plt+0xe270>
   1ff00:	ldr	r1, [sp, #24]
   1ff04:	ldr	r1, [r1]
   1ff08:	cmp	r1, #0
   1ff0c:	bne	1fff8 <__assert_fail@plt+0xe358>
   1ff10:	ldr	r1, [sp, #32]
   1ff14:	mov	r4, r5
   1ff18:	cmp	r1, #0
   1ff1c:	beq	1faa0 <__assert_fail@plt+0xde00>
   1ff20:	ldrb	r1, [r3, #4]
   1ff24:	cmp	r1, #23
   1ff28:	beq	1ff84 <__assert_fail@plt+0xe2e4>
   1ff2c:	cmp	r1, #11
   1ff30:	mov	r4, r5
   1ff34:	bne	1faa0 <__assert_fail@plt+0xde00>
   1ff38:	b	1ff84 <__assert_fail@plt+0xe2e4>
   1ff3c:	ldr	r0, [sp, #24]
   1ff40:	mov	r1, #10
   1ff44:	b	1ff70 <__assert_fail@plt+0xe2d0>
   1ff48:	ldrb	r0, [r3, #4]
   1ff4c:	ldr	r1, [sp, #24]
   1ff50:	mov	r5, #0
   1ff54:	cmp	r0, #2
   1ff58:	mov	r0, #10
   1ff5c:	movweq	r0, #9
   1ff60:	str	r0, [r1]
   1ff64:	b	1fef0 <__assert_fail@plt+0xe250>
   1ff68:	ldr	r0, [sp, #24]
   1ff6c:	mov	r1, #15
   1ff70:	str	r1, [r0]
   1ff74:	mov	r5, #0
   1ff78:	b	1fef0 <__assert_fail@plt+0xe250>
   1ff7c:	mov	sl, r4
   1ff80:	b	1ffec <__assert_fail@plt+0xe34c>
   1ff84:	cmp	r0, #0
   1ff88:	bne	1ffdc <__assert_fail@plt+0xe33c>
   1ff8c:	mov	r4, r5
   1ff90:	ldr	r5, [r5, #4]
   1ff94:	cmp	r5, #0
   1ff98:	bne	1ff8c <__assert_fail@plt+0xe2ec>
   1ff9c:	ldr	r5, [r4, #8]
   1ffa0:	cmp	r5, #0
   1ffa4:	bne	1ff8c <__assert_fail@plt+0xe2ec>
   1ffa8:	add	r0, r4, #20
   1ffac:	bl	1d784 <__assert_fail@plt+0xbae4>
   1ffb0:	ldr	r0, [r4]
   1ffb4:	cmp	r0, #0
   1ffb8:	beq	1ffdc <__assert_fail@plt+0xe33c>
   1ffbc:	ldr	r5, [r0, #8]
   1ffc0:	cmp	r5, r4
   1ffc4:	mov	r4, r0
   1ffc8:	beq	1ffa8 <__assert_fail@plt+0xe308>
   1ffcc:	cmp	r5, #0
   1ffd0:	mov	r4, r0
   1ffd4:	beq	1ffa8 <__assert_fail@plt+0xe308>
   1ffd8:	b	1ff8c <__assert_fail@plt+0xe2ec>
   1ffdc:	ldr	r1, [sp, #24]
   1ffe0:	mov	r0, #13
   1ffe4:	str	r0, [r1]
   1ffe8:	mov	sl, #0
   1ffec:	mov	r0, sl
   1fff0:	sub	sp, fp, #28
   1fff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fff8:	mov	sl, #0
   1fffc:	cmp	r4, #0
   20000:	beq	1ffec <__assert_fail@plt+0xe34c>
   20004:	mov	r5, r4
   20008:	ldr	r4, [r4, #4]
   2000c:	cmp	r4, #0
   20010:	bne	20004 <__assert_fail@plt+0xe364>
   20014:	ldr	r4, [r5, #8]
   20018:	cmp	r4, #0
   2001c:	bne	20004 <__assert_fail@plt+0xe364>
   20020:	add	r0, r5, #20
   20024:	bl	1d784 <__assert_fail@plt+0xbae4>
   20028:	ldr	r0, [r5]
   2002c:	cmp	r0, #0
   20030:	beq	1ffec <__assert_fail@plt+0xe34c>
   20034:	ldr	r4, [r0, #8]
   20038:	cmp	r4, r5
   2003c:	mov	r5, r0
   20040:	beq	20020 <__assert_fail@plt+0xe380>
   20044:	cmp	r4, #0
   20048:	mov	r5, r0
   2004c:	beq	20020 <__assert_fail@plt+0xe380>
   20050:	b	20004 <__assert_fail@plt+0xe364>
   20054:	mov	r4, #0
   20058:	mov	r8, #0
   2005c:	b	20068 <__assert_fail@plt+0xe3c8>
   20060:	mov	r8, #4
   20064:	mov	r4, #128	; 0x80
   20068:	bl	11a6c <__ctype_b_loc@plt>
   2006c:	ldr	r0, [r0]
   20070:	ldr	r7, [sp, #28]
   20074:	mov	r1, #1
   20078:	add	r5, r0, r4, lsl #1
   2007c:	ldr	r0, [sp, #52]	; 0x34
   20080:	mov	r3, #0
   20084:	add	r0, r0, r8, lsl #2
   20088:	add	r2, r0, #96	; 0x60
   2008c:	mov	r0, r5
   20090:	add	r6, r4, r3
   20094:	cmp	r6, #95	; 0x5f
   20098:	beq	200a8 <__assert_fail@plt+0xe408>
   2009c:	ldrh	r6, [r0]
   200a0:	ands	r6, r6, #8
   200a4:	beq	200b4 <__assert_fail@plt+0xe414>
   200a8:	ldr	r6, [r2]
   200ac:	orr	r6, r6, r1, lsl r3
   200b0:	str	r6, [r2]
   200b4:	add	r3, r3, #1
   200b8:	add	r0, r0, #2
   200bc:	cmp	r3, #32
   200c0:	bne	20090 <__assert_fail@plt+0xe3f0>
   200c4:	add	r8, r8, #1
   200c8:	add	r5, r5, #64	; 0x40
   200cc:	add	r4, r4, #32
   200d0:	cmp	r8, #8
   200d4:	bne	2007c <__assert_fail@plt+0xe3dc>
   200d8:	b	1efe8 <__assert_fail@plt+0xd348>
   200dc:	cmp	r1, #0
   200e0:	beq	20134 <__assert_fail@plt+0xe494>
   200e4:	mov	r5, r1
   200e8:	ldr	r1, [r1, #4]
   200ec:	cmp	r1, #0
   200f0:	bne	200e4 <__assert_fail@plt+0xe444>
   200f4:	ldr	r1, [r5, #8]
   200f8:	cmp	r1, #0
   200fc:	bne	200e4 <__assert_fail@plt+0xe444>
   20100:	add	r0, r5, #20
   20104:	bl	1d784 <__assert_fail@plt+0xbae4>
   20108:	ldr	r0, [r5]
   2010c:	cmp	r0, #0
   20110:	beq	20134 <__assert_fail@plt+0xe494>
   20114:	ldr	r1, [r0, #8]
   20118:	cmp	r1, r5
   2011c:	mov	r5, r0
   20120:	beq	20100 <__assert_fail@plt+0xe460>
   20124:	cmp	r1, #0
   20128:	mov	r5, r0
   2012c:	beq	20100 <__assert_fail@plt+0xe460>
   20130:	b	200e4 <__assert_fail@plt+0xe444>
   20134:	mov	r0, #8
   20138:	b	1f920 <__assert_fail@plt+0xdc80>
   2013c:	mov	sl, r0
   20140:	b	1fa18 <__assert_fail@plt+0xdd78>
   20144:	ldr	r9, [sp, #24]
   20148:	ldr	r6, [sp, #48]	; 0x30
   2014c:	ldr	r8, [sp, #40]	; 0x28
   20150:	b	1f8a0 <__assert_fail@plt+0xdc00>
   20154:	mov	r0, r5
   20158:	bl	1a158 <__assert_fail@plt+0x84b8>
   2015c:	mov	r0, sl
   20160:	bl	1a158 <__assert_fail@plt+0x84b8>
   20164:	mov	sl, #12
   20168:	b	1fa18 <__assert_fail@plt+0xdd78>
   2016c:	push	{r4, r5, r6, r7, fp, lr}
   20170:	add	fp, sp, #16
   20174:	mov	r5, r1
   20178:	ldr	r1, [r0, #64]	; 0x40
   2017c:	mov	r6, r3
   20180:	mov	r4, r2
   20184:	mov	r7, r0
   20188:	cmp	r1, #31
   2018c:	beq	201e4 <__assert_fail@plt+0xe544>
   20190:	ldr	r0, [r7, #56]	; 0x38
   20194:	add	r2, r1, #1
   20198:	add	r0, r0, r1, lsl #5
   2019c:	mov	r1, #0
   201a0:	cmp	r5, #0
   201a4:	str	r2, [r7, #64]	; 0x40
   201a8:	str	r1, [r0, #4]!
   201ac:	str	r5, [r0, #4]
   201b0:	str	r4, [r0, #8]
   201b4:	ldm	r6, {r2, r3}
   201b8:	str	r1, [r0, #12]
   201bc:	str	r1, [r0, #16]
   201c0:	mvn	r1, #0
   201c4:	str	r1, [r0, #28]
   201c8:	bic	r1, r3, #786432	; 0xc0000
   201cc:	str	r2, [r0, #20]
   201d0:	str	r1, [r0, #24]
   201d4:	strne	r0, [r5]
   201d8:	cmp	r4, #0
   201dc:	strne	r0, [r4]
   201e0:	pop	{r4, r5, r6, r7, fp, pc}
   201e4:	mov	r0, #996	; 0x3e4
   201e8:	bl	1a224 <__assert_fail@plt+0x8584>
   201ec:	cmp	r0, #0
   201f0:	moveq	r0, #0
   201f4:	popeq	{r4, r5, r6, r7, fp, pc}
   201f8:	ldr	r1, [r7, #56]	; 0x38
   201fc:	str	r1, [r0]
   20200:	mov	r1, #0
   20204:	str	r1, [r7, #64]	; 0x40
   20208:	str	r0, [r7, #56]	; 0x38
   2020c:	b	20194 <__assert_fail@plt+0xe4f4>
   20210:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20214:	add	fp, sp, #28
   20218:	sub	sp, sp, #28
   2021c:	mov	sl, r1
   20220:	mov	r9, r0
   20224:	mov	r7, #0
   20228:	mov	r0, #32
   2022c:	mov	r1, #1
   20230:	mov	r8, r3
   20234:	mov	r4, r2
   20238:	str	r7, [sp, #16]
   2023c:	bl	19ed0 <__assert_fail@plt+0x8230>
   20240:	ldr	r1, [fp, #12]
   20244:	cmp	r0, #0
   20248:	beq	203f8 <__assert_fail@plt+0xe758>
   2024c:	mov	r5, r0
   20250:	mov	r0, #40	; 0x28
   20254:	mov	r1, #1
   20258:	bl	19ed0 <__assert_fail@plt+0x8230>
   2025c:	cmp	r0, #0
   20260:	beq	20400 <__assert_fail@plt+0xe760>
   20264:	mov	r6, r0
   20268:	ldrb	r0, [r0, #16]
   2026c:	ldr	r1, [fp, #8]
   20270:	mov	r7, #0
   20274:	add	r3, sp, #16
   20278:	mov	r2, r6
   2027c:	and	r0, r0, #254	; 0xfe
   20280:	orr	r0, r0, r1
   20284:	mov	r1, r5
   20288:	strb	r0, [r6, #16]
   2028c:	mov	r0, sl
   20290:	stm	sp, {r4, r7}
   20294:	bl	2085c <__assert_fail@plt+0xebbc>
   20298:	cmp	r0, #0
   2029c:	bne	2041c <__assert_fail@plt+0xe77c>
   202a0:	ldrb	r0, [r8]
   202a4:	cmp	r0, #0
   202a8:	beq	202d4 <__assert_fail@plt+0xe634>
   202ac:	add	r1, r8, #1
   202b0:	mov	r2, #1
   202b4:	ubfx	r3, r0, #5, #3
   202b8:	and	r0, r0, #31
   202bc:	ldr	r7, [r5, r3, lsl #2]
   202c0:	orr	r0, r7, r2, lsl r0
   202c4:	str	r0, [r5, r3, lsl #2]
   202c8:	ldrb	r0, [r1], #1
   202cc:	cmp	r0, #0
   202d0:	bne	202b4 <__assert_fail@plt+0xe614>
   202d4:	ldr	r0, [fp, #8]
   202d8:	cmp	r0, #0
   202dc:	beq	20300 <__assert_fail@plt+0xe660>
   202e0:	mov	r0, #0
   202e4:	add	r1, r5, r0
   202e8:	add	r0, r0, #16
   202ec:	vld1.32	{d16-d17}, [r1]
   202f0:	cmp	r0, #32
   202f4:	vmvn	q8, q8
   202f8:	vst1.32	{d16-d17}, [r1]
   202fc:	bne	202e4 <__assert_fail@plt+0xe644>
   20300:	ldr	r0, [r9, #92]	; 0x5c
   20304:	cmp	r0, #2
   20308:	blt	20330 <__assert_fail@plt+0xe690>
   2030c:	ldr	r0, [r9, #60]	; 0x3c
   20310:	mov	r1, #0
   20314:	ldr	r2, [r0, r1, lsl #2]
   20318:	ldr	r3, [r5, r1, lsl #2]
   2031c:	and	r2, r3, r2
   20320:	str	r2, [r5, r1, lsl #2]
   20324:	add	r1, r1, #1
   20328:	cmp	r1, #8
   2032c:	bne	20314 <__assert_fail@plt+0xe674>
   20330:	mov	r0, #3
   20334:	add	r3, sp, #8
   20338:	mov	r1, #0
   2033c:	mov	r2, #0
   20340:	mov	r7, #0
   20344:	str	r0, [sp, #12]
   20348:	mov	r0, r9
   2034c:	str	r5, [sp, #8]
   20350:	bl	2016c <__assert_fail@plt+0xe4cc>
   20354:	cmp	r0, #0
   20358:	beq	203e4 <__assert_fail@plt+0xe744>
   2035c:	mov	r4, r0
   20360:	ldr	r0, [r9, #92]	; 0x5c
   20364:	cmp	r0, #2
   20368:	blt	203cc <__assert_fail@plt+0xe72c>
   2036c:	mov	r0, #6
   20370:	str	r6, [sp, #8]
   20374:	add	r3, sp, #8
   20378:	mov	r1, #0
   2037c:	mov	r2, #0
   20380:	mov	r8, #0
   20384:	str	r0, [sp, #12]
   20388:	ldrb	r0, [r9, #88]	; 0x58
   2038c:	orr	r0, r0, #2
   20390:	strb	r0, [r9, #88]	; 0x58
   20394:	mov	r0, r9
   20398:	bl	2016c <__assert_fail@plt+0xe4cc>
   2039c:	cmp	r0, #0
   203a0:	beq	203e4 <__assert_fail@plt+0xe744>
   203a4:	mov	r2, r0
   203a8:	mov	r0, #10
   203ac:	add	r3, sp, #20
   203b0:	mov	r1, r4
   203b4:	str	r0, [sp, #24]
   203b8:	mov	r0, r9
   203bc:	str	r8, [sp, #20]
   203c0:	bl	2016c <__assert_fail@plt+0xe4cc>
   203c4:	mov	r7, r0
   203c8:	b	203d8 <__assert_fail@plt+0xe738>
   203cc:	mov	r0, r6
   203d0:	bl	1d814 <__assert_fail@plt+0xbb74>
   203d4:	mov	r7, r4
   203d8:	mov	r0, r7
   203dc:	sub	sp, fp, #28
   203e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   203e4:	mov	r0, r5
   203e8:	bl	1a158 <__assert_fail@plt+0x84b8>
   203ec:	mov	r0, r6
   203f0:	bl	1d814 <__assert_fail@plt+0xbb74>
   203f4:	ldr	r1, [fp, #12]
   203f8:	mov	r0, #12
   203fc:	b	20414 <__assert_fail@plt+0xe774>
   20400:	mov	r0, r5
   20404:	bl	1a158 <__assert_fail@plt+0x84b8>
   20408:	ldr	r1, [fp, #12]
   2040c:	mov	r0, #12
   20410:	mov	r7, #0
   20414:	str	r0, [r1]
   20418:	b	203d8 <__assert_fail@plt+0xe738>
   2041c:	mov	r4, r0
   20420:	mov	r0, r5
   20424:	bl	1a158 <__assert_fail@plt+0x84b8>
   20428:	mov	r0, r6
   2042c:	bl	1d814 <__assert_fail@plt+0xbb74>
   20430:	ldr	r0, [fp, #12]
   20434:	str	r4, [r0]
   20438:	b	203d8 <__assert_fail@plt+0xe738>
   2043c:	push	{fp, lr}
   20440:	mov	fp, sp
   20444:	ldr	ip, [r1, #40]	; 0x28
   20448:	ldr	r3, [r1, #56]	; 0x38
   2044c:	cmp	r3, ip
   20450:	ble	204cc <__assert_fail@plt+0xe82c>
   20454:	ldr	r3, [r1, #4]
   20458:	ldrb	lr, [r3, ip]
   2045c:	strb	lr, [r0]
   20460:	ldr	r3, [r1, #80]	; 0x50
   20464:	cmp	r3, #2
   20468:	blt	2048c <__assert_fail@plt+0xe7ec>
   2046c:	ldr	r3, [r1, #28]
   20470:	ldr	ip, [r1, #40]	; 0x28
   20474:	cmp	ip, r3
   20478:	beq	2048c <__assert_fail@plt+0xe7ec>
   2047c:	ldr	r3, [r1, #8]
   20480:	ldr	r3, [r3, ip, lsl #2]
   20484:	cmn	r3, #1
   20488:	beq	20574 <__assert_fail@plt+0xe8d4>
   2048c:	tst	r2, #1
   20490:	beq	204dc <__assert_fail@plt+0xe83c>
   20494:	cmp	lr, #92	; 0x5c
   20498:	bne	204dc <__assert_fail@plt+0xe83c>
   2049c:	ldr	r2, [r1, #40]	; 0x28
   204a0:	ldr	r3, [r1, #48]	; 0x30
   204a4:	add	r2, r2, #1
   204a8:	cmp	r2, r3
   204ac:	bge	20574 <__assert_fail@plt+0xe8d4>
   204b0:	str	r2, [r1, #40]	; 0x28
   204b4:	ldr	r1, [r1, #4]
   204b8:	ldrb	r2, [r1, r2]
   204bc:	mov	r1, #1
   204c0:	strb	r1, [r0, #4]
   204c4:	strb	r2, [r0]
   204c8:	b	2057c <__assert_fail@plt+0xe8dc>
   204cc:	mov	r1, #2
   204d0:	strb	r1, [r0, #4]
   204d4:	mov	r1, #0
   204d8:	b	2057c <__assert_fail@plt+0xe8dc>
   204dc:	cmp	lr, #92	; 0x5c
   204e0:	bgt	20534 <__assert_fail@plt+0xe894>
   204e4:	cmp	lr, #45	; 0x2d
   204e8:	beq	2054c <__assert_fail@plt+0xe8ac>
   204ec:	cmp	lr, #91	; 0x5b
   204f0:	bne	20574 <__assert_fail@plt+0xe8d4>
   204f4:	ldr	r3, [r1, #40]	; 0x28
   204f8:	ldr	ip, [r1, #48]	; 0x30
   204fc:	add	r3, r3, #1
   20500:	cmp	r3, ip
   20504:	bge	20564 <__assert_fail@plt+0xe8c4>
   20508:	ldr	r1, [r1, #4]
   2050c:	ldrb	r1, [r1, r3]
   20510:	cmp	r1, #61	; 0x3d
   20514:	strb	r1, [r0]
   20518:	beq	20584 <__assert_fail@plt+0xe8e4>
   2051c:	cmp	r1, #58	; 0x3a
   20520:	beq	2058c <__assert_fail@plt+0xe8ec>
   20524:	cmp	r1, #46	; 0x2e
   20528:	bne	2056c <__assert_fail@plt+0xe8cc>
   2052c:	mov	r1, #26
   20530:	b	20598 <__assert_fail@plt+0xe8f8>
   20534:	cmp	lr, #93	; 0x5d
   20538:	beq	20554 <__assert_fail@plt+0xe8b4>
   2053c:	cmp	lr, #94	; 0x5e
   20540:	bne	20574 <__assert_fail@plt+0xe8d4>
   20544:	mov	r1, #25
   20548:	b	20558 <__assert_fail@plt+0xe8b8>
   2054c:	mov	r1, #22
   20550:	b	20558 <__assert_fail@plt+0xe8b8>
   20554:	mov	r1, #21
   20558:	strb	r1, [r0, #4]
   2055c:	mov	r1, #1
   20560:	b	2057c <__assert_fail@plt+0xe8dc>
   20564:	mov	r1, #0
   20568:	strb	r1, [r0]
   2056c:	mov	r1, #91	; 0x5b
   20570:	strb	r1, [r0]
   20574:	mov	r1, #1
   20578:	strb	r1, [r0, #4]
   2057c:	mov	r0, r1
   20580:	pop	{fp, pc}
   20584:	mov	r1, #28
   20588:	b	20598 <__assert_fail@plt+0xe8f8>
   2058c:	tst	r2, #4
   20590:	beq	2056c <__assert_fail@plt+0xe8cc>
   20594:	mov	r1, #30
   20598:	strb	r1, [r0, #4]
   2059c:	mov	r1, #2
   205a0:	b	2057c <__assert_fail@plt+0xe8dc>
   205a4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   205a8:	add	fp, sp, #24
   205ac:	sub	sp, sp, #8
   205b0:	mov	r5, r2
   205b4:	ldr	r2, [r1, #80]	; 0x50
   205b8:	mov	r9, r0
   205bc:	ldr	r0, [r1, #40]	; 0x28
   205c0:	cmp	r2, #1
   205c4:	beq	20630 <__assert_fail@plt+0xe990>
   205c8:	ldr	r4, [r1, #28]
   205cc:	add	r2, r0, #1
   205d0:	cmp	r2, r4
   205d4:	bge	20630 <__assert_fail@plt+0xe990>
   205d8:	ldr	ip, [r1, #8]
   205dc:	mov	r2, #1
   205e0:	add	r6, ip, r0, lsl #2
   205e4:	ldr	r7, [r6, r2, lsl #2]
   205e8:	cmn	r7, #1
   205ec:	bne	20604 <__assert_fail@plt+0xe964>
   205f0:	add	r2, r2, #1
   205f4:	add	r7, r0, r2
   205f8:	cmp	r7, r4
   205fc:	blt	205e4 <__assert_fail@plt+0xe944>
   20600:	b	2060c <__assert_fail@plt+0xe96c>
   20604:	cmp	r2, #2
   20608:	bcc	20630 <__assert_fail@plt+0xe990>
   2060c:	mov	r3, #1
   20610:	str	r3, [r9]
   20614:	ldr	r0, [ip, r0, lsl #2]
   20618:	str	r0, [r9, #4]
   2061c:	ldr	r0, [r1, #40]	; 0x28
   20620:	add	r0, r0, r2
   20624:	str	r0, [r1, #40]	; 0x28
   20628:	mov	r0, #0
   2062c:	b	20854 <__assert_fail@plt+0xebb4>
   20630:	add	r2, r0, r3
   20634:	str	r2, [r1, #40]	; 0x28
   20638:	ldrb	r6, [r5, #4]
   2063c:	sub	r0, r6, #22
   20640:	cmp	r0, #8
   20644:	bhi	20844 <__assert_fail@plt+0xeba4>
   20648:	add	r3, pc, #0
   2064c:	ldr	pc, [r3, r0, lsl #2]
   20650:	andeq	r0, r2, ip, lsl r8
   20654:	andeq	r0, r2, r4, asr #16
   20658:	andeq	r0, r2, r4, asr #16
   2065c:	andeq	r0, r2, r4, asr #16
   20660:	andeq	r0, r2, r4, ror r6
   20664:	andeq	r0, r2, r4, asr #16
   20668:	andeq	r0, r2, r4, ror r6
   2066c:	andeq	r0, r2, r4, asr #16
   20670:	andeq	r0, r2, r4, ror r6
   20674:	ldr	r3, [r1, #56]	; 0x38
   20678:	mov	r0, #7
   2067c:	cmp	r3, r2
   20680:	ble	20854 <__assert_fail@plt+0xebb4>
   20684:	ldrb	r3, [r5]
   20688:	mov	r2, #0
   2068c:	uxtb	r7, r6
   20690:	cmp	r7, #30
   20694:	bne	206a4 <__assert_fail@plt+0xea04>
   20698:	ldrb	r7, [r1, #75]	; 0x4b
   2069c:	cmp	r7, #0
   206a0:	bne	206fc <__assert_fail@plt+0xea5c>
   206a4:	ldr	r4, [r1, #40]	; 0x28
   206a8:	ldr	r7, [r1, #4]
   206ac:	add	r6, r4, #1
   206b0:	str	r6, [r1, #40]	; 0x28
   206b4:	ldrb	r4, [r7, r4]
   206b8:	ldr	r7, [r1, #56]	; 0x38
   206bc:	cmp	r7, r6
   206c0:	ble	20854 <__assert_fail@plt+0xebb4>
   206c4:	uxtb	r7, r4
   206c8:	cmp	r7, r3
   206cc:	bne	206e0 <__assert_fail@plt+0xea40>
   206d0:	ldr	r7, [r1, #4]
   206d4:	ldrb	r7, [r7, r6]
   206d8:	cmp	r7, #93	; 0x5d
   206dc:	beq	207d0 <__assert_fail@plt+0xeb30>
   206e0:	ldr	r7, [r9, #4]
   206e4:	cmp	r2, #30
   206e8:	strb	r4, [r7, r2]
   206ec:	bhi	20854 <__assert_fail@plt+0xebb4>
   206f0:	ldrb	r6, [r5, #4]
   206f4:	add	r2, r2, #1
   206f8:	b	2068c <__assert_fail@plt+0xe9ec>
   206fc:	ldrb	r7, [r1, #76]	; 0x4c
   20700:	cmp	r7, #0
   20704:	beq	2079c <__assert_fail@plt+0xeafc>
   20708:	ldr	lr, [r1, #28]
   2070c:	ldr	ip, [r1, #40]	; 0x28
   20710:	cmp	ip, lr
   20714:	beq	20728 <__assert_fail@plt+0xea88>
   20718:	ldr	r4, [r1, #8]
   2071c:	ldr	r4, [r4, ip, lsl #2]
   20720:	cmn	r4, #1
   20724:	beq	207bc <__assert_fail@plt+0xeb1c>
   20728:	ldr	r6, [r1, #12]
   2072c:	ldr	r7, [r1, #24]
   20730:	ldr	r4, [r1]
   20734:	ldr	r6, [r6, ip, lsl #2]
   20738:	add	r6, r7, r6
   2073c:	add	r4, r4, r6
   20740:	ldrsb	r4, [r4]
   20744:	cmn	r4, #1
   20748:	ble	207bc <__assert_fail@plt+0xeb1c>
   2074c:	ldr	r7, [r1, #80]	; 0x50
   20750:	mov	r6, #1
   20754:	cmp	r7, #1
   20758:	beq	20790 <__assert_fail@plt+0xeaf0>
   2075c:	add	r7, ip, #1
   20760:	cmp	r7, lr
   20764:	bge	20790 <__assert_fail@plt+0xeaf0>
   20768:	ldr	r6, [r1, #8]
   2076c:	add	r8, r6, ip, lsl #2
   20770:	mov	r6, #1
   20774:	ldr	r7, [r8, r6, lsl #2]
   20778:	cmn	r7, #1
   2077c:	bne	20790 <__assert_fail@plt+0xeaf0>
   20780:	add	r6, r6, #1
   20784:	add	r7, ip, r6
   20788:	cmp	r7, lr
   2078c:	blt	20774 <__assert_fail@plt+0xead4>
   20790:	add	r6, r6, ip
   20794:	str	r6, [r1, #40]	; 0x28
   20798:	b	206b8 <__assert_fail@plt+0xea18>
   2079c:	ldr	r7, [r1, #40]	; 0x28
   207a0:	ldr	r4, [r1, #24]
   207a4:	ldr	ip, [r1]
   207a8:	add	r6, r7, #1
   207ac:	add	r7, r7, r4
   207b0:	str	r6, [r1, #40]	; 0x28
   207b4:	ldrb	r4, [ip, r7]
   207b8:	b	206b8 <__assert_fail@plt+0xea18>
   207bc:	add	r6, ip, #1
   207c0:	str	r6, [r1, #40]	; 0x28
   207c4:	ldr	r7, [r1, #4]
   207c8:	ldrb	r4, [r7, ip]
   207cc:	b	206b8 <__assert_fail@plt+0xea18>
   207d0:	add	r0, r6, #1
   207d4:	str	r0, [r1, #40]	; 0x28
   207d8:	mov	r0, #0
   207dc:	ldr	r1, [r9, #4]
   207e0:	strb	r0, [r1, r2]
   207e4:	ldrb	r1, [r5, #4]
   207e8:	cmp	r1, #30
   207ec:	beq	20808 <__assert_fail@plt+0xeb68>
   207f0:	cmp	r1, #28
   207f4:	beq	20810 <__assert_fail@plt+0xeb70>
   207f8:	cmp	r1, #26
   207fc:	moveq	r1, #3
   20800:	streq	r1, [r9]
   20804:	b	20854 <__assert_fail@plt+0xebb4>
   20808:	mov	r1, #4
   2080c:	b	20814 <__assert_fail@plt+0xeb74>
   20810:	mov	r1, #2
   20814:	str	r1, [r9]
   20818:	b	20854 <__assert_fail@plt+0xebb4>
   2081c:	ldr	r0, [fp, #12]
   20820:	cmp	r0, #0
   20824:	bne	20844 <__assert_fail@plt+0xeba4>
   20828:	ldr	r2, [fp, #8]
   2082c:	mov	r0, sp
   20830:	bl	2043c <__assert_fail@plt+0xe79c>
   20834:	ldrb	r1, [sp, #4]
   20838:	mov	r0, #11
   2083c:	cmp	r1, #21
   20840:	bne	20854 <__assert_fail@plt+0xebb4>
   20844:	mov	r0, #0
   20848:	str	r0, [r9]
   2084c:	ldrb	r1, [r5]
   20850:	strb	r1, [r9, #4]
   20854:	sub	sp, fp, #24
   20858:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2085c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20860:	add	fp, sp, #24
   20864:	mov	r8, r0
   20868:	ldrb	r0, [fp, #14]
   2086c:	ldr	r6, [fp, #8]
   20870:	mov	r5, r3
   20874:	mov	r7, r2
   20878:	mov	r4, r1
   2087c:	tst	r0, #64	; 0x40
   20880:	beq	208bc <__assert_fail@plt+0xec1c>
   20884:	movw	r1, #43076	; 0xa844
   20888:	mov	r0, r6
   2088c:	movt	r1, #2
   20890:	bl	11850 <strcmp@plt>
   20894:	cmp	r0, #0
   20898:	beq	208b4 <__assert_fail@plt+0xec14>
   2089c:	movw	r1, #43082	; 0xa84a
   208a0:	mov	r0, r6
   208a4:	movt	r1, #2
   208a8:	bl	11850 <strcmp@plt>
   208ac:	cmp	r0, #0
   208b0:	bne	208bc <__assert_fail@plt+0xec1c>
   208b4:	movw	r6, #43088	; 0xa850
   208b8:	movt	r6, #2
   208bc:	ldr	r0, [r5]
   208c0:	ldr	r1, [r7, #36]	; 0x24
   208c4:	cmp	r0, r1
   208c8:	beq	20dbc <__assert_fail@plt+0xf11c>
   208cc:	mov	r0, r6
   208d0:	bl	11820 <wctype@plt>
   208d4:	ldr	r2, [r7, #36]	; 0x24
   208d8:	ldr	r1, [r7, #12]
   208dc:	add	r3, r2, #1
   208e0:	str	r3, [r7, #36]	; 0x24
   208e4:	str	r0, [r1, r2, lsl #2]
   208e8:	movw	r1, #43062	; 0xa836
   208ec:	mov	r0, r6
   208f0:	movt	r1, #2
   208f4:	bl	11850 <strcmp@plt>
   208f8:	cmp	r0, #0
   208fc:	beq	20a60 <__assert_fail@plt+0xedc0>
   20900:	movw	r1, #43094	; 0xa856
   20904:	mov	r0, r6
   20908:	movt	r1, #2
   2090c:	bl	11850 <strcmp@plt>
   20910:	cmp	r0, #0
   20914:	beq	20aac <__assert_fail@plt+0xee0c>
   20918:	movw	r1, #43082	; 0xa84a
   2091c:	mov	r0, r6
   20920:	movt	r1, #2
   20924:	bl	11850 <strcmp@plt>
   20928:	cmp	r0, #0
   2092c:	beq	20af8 <__assert_fail@plt+0xee58>
   20930:	movw	r1, #43070	; 0xa83e
   20934:	mov	r0, r6
   20938:	movt	r1, #2
   2093c:	bl	11850 <strcmp@plt>
   20940:	cmp	r0, #0
   20944:	beq	20b44 <__assert_fail@plt+0xeea4>
   20948:	movw	r1, #43088	; 0xa850
   2094c:	mov	r0, r6
   20950:	movt	r1, #2
   20954:	bl	11850 <strcmp@plt>
   20958:	cmp	r0, #0
   2095c:	beq	20b90 <__assert_fail@plt+0xeef0>
   20960:	movw	r1, #43119	; 0xa86f
   20964:	mov	r0, r6
   20968:	movt	r1, #2
   2096c:	bl	11850 <strcmp@plt>
   20970:	cmp	r0, #0
   20974:	beq	20bdc <__assert_fail@plt+0xef3c>
   20978:	movw	r1, #37187	; 0x9143
   2097c:	mov	r0, r6
   20980:	movt	r1, #2
   20984:	bl	11850 <strcmp@plt>
   20988:	cmp	r0, #0
   2098c:	beq	20c2c <__assert_fail@plt+0xef8c>
   20990:	movw	r1, #43076	; 0xa844
   20994:	mov	r0, r6
   20998:	movt	r1, #2
   2099c:	bl	11850 <strcmp@plt>
   209a0:	cmp	r0, #0
   209a4:	beq	20c7c <__assert_fail@plt+0xefdc>
   209a8:	movw	r1, #43100	; 0xa85c
   209ac:	mov	r0, r6
   209b0:	movt	r1, #2
   209b4:	bl	11850 <strcmp@plt>
   209b8:	cmp	r0, #0
   209bc:	beq	20ccc <__assert_fail@plt+0xf02c>
   209c0:	movw	r1, #43106	; 0xa862
   209c4:	mov	r0, r6
   209c8:	movt	r1, #2
   209cc:	bl	11850 <strcmp@plt>
   209d0:	cmp	r0, #0
   209d4:	beq	20d1c <__assert_fail@plt+0xf07c>
   209d8:	movw	r1, #43112	; 0xa868
   209dc:	mov	r0, r6
   209e0:	movt	r1, #2
   209e4:	bl	11850 <strcmp@plt>
   209e8:	cmp	r0, #0
   209ec:	beq	20d6c <__assert_fail@plt+0xf0cc>
   209f0:	movw	r1, #43118	; 0xa86e
   209f4:	mov	r0, r6
   209f8:	movt	r1, #2
   209fc:	bl	11850 <strcmp@plt>
   20a00:	mov	r1, r0
   20a04:	mov	r0, #4
   20a08:	cmp	r1, #0
   20a0c:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   20a10:	bl	11a6c <__ctype_b_loc@plt>
   20a14:	ldr	r1, [r0]
   20a18:	mov	r2, #0
   20a1c:	mov	r3, #1
   20a20:	cmp	r8, #0
   20a24:	bne	20f24 <__assert_fail@plt+0xf284>
   20a28:	ldrb	r0, [r1, #1]
   20a2c:	tst	r0, #16
   20a30:	beq	20a48 <__assert_fail@plt+0xeda8>
   20a34:	ubfx	r0, r2, #5, #3
   20a38:	and	r6, r2, #31
   20a3c:	ldr	r7, [r4, r0, lsl #2]
   20a40:	orr	r7, r7, r3, lsl r6
   20a44:	str	r7, [r4, r0, lsl #2]
   20a48:	add	r2, r2, #1
   20a4c:	add	r1, r1, #2
   20a50:	mov	r0, #0
   20a54:	cmp	r2, #256	; 0x100
   20a58:	bne	20a28 <__assert_fail@plt+0xed88>
   20a5c:	b	20db8 <__assert_fail@plt+0xf118>
   20a60:	bl	11a6c <__ctype_b_loc@plt>
   20a64:	ldr	r1, [r0]
   20a68:	cmp	r8, #0
   20a6c:	bne	20e60 <__assert_fail@plt+0xf1c0>
   20a70:	mov	r0, #0
   20a74:	mov	r2, #1
   20a78:	ldrb	r3, [r1]
   20a7c:	tst	r3, #8
   20a80:	beq	20a98 <__assert_fail@plt+0xedf8>
   20a84:	ubfx	r3, r0, #5, #3
   20a88:	and	r6, r0, #31
   20a8c:	ldr	r7, [r4, r3, lsl #2]
   20a90:	orr	r7, r7, r2, lsl r6
   20a94:	str	r7, [r4, r3, lsl #2]
   20a98:	add	r0, r0, #1
   20a9c:	add	r1, r1, #2
   20aa0:	cmp	r0, #256	; 0x100
   20aa4:	bne	20a78 <__assert_fail@plt+0xedd8>
   20aa8:	b	20c24 <__assert_fail@plt+0xef84>
   20aac:	bl	11a6c <__ctype_b_loc@plt>
   20ab0:	ldr	r1, [r0]
   20ab4:	cmp	r8, #0
   20ab8:	bne	20ee0 <__assert_fail@plt+0xf240>
   20abc:	mov	r0, #0
   20ac0:	mov	r2, #1
   20ac4:	ldrb	r3, [r1]
   20ac8:	tst	r3, #2
   20acc:	beq	20ae4 <__assert_fail@plt+0xee44>
   20ad0:	ubfx	r3, r0, #5, #3
   20ad4:	and	r6, r0, #31
   20ad8:	ldr	r7, [r4, r3, lsl #2]
   20adc:	orr	r7, r7, r2, lsl r6
   20ae0:	str	r7, [r4, r3, lsl #2]
   20ae4:	add	r0, r0, #1
   20ae8:	add	r1, r1, #2
   20aec:	cmp	r0, #256	; 0x100
   20af0:	bne	20ac4 <__assert_fail@plt+0xee24>
   20af4:	b	20c24 <__assert_fail@plt+0xef84>
   20af8:	bl	11a6c <__ctype_b_loc@plt>
   20afc:	ldr	r1, [r0]
   20b00:	cmp	r8, #0
   20b04:	bne	20f9c <__assert_fail@plt+0xf2fc>
   20b08:	mov	r0, #0
   20b0c:	mov	r2, #1
   20b10:	ldrb	r3, [r1, #1]
   20b14:	tst	r3, #2
   20b18:	beq	20b30 <__assert_fail@plt+0xee90>
   20b1c:	ubfx	r3, r0, #5, #3
   20b20:	and	r6, r0, #31
   20b24:	ldr	r7, [r4, r3, lsl #2]
   20b28:	orr	r7, r7, r2, lsl r6
   20b2c:	str	r7, [r4, r3, lsl #2]
   20b30:	add	r0, r0, #1
   20b34:	add	r1, r1, #2
   20b38:	cmp	r0, #256	; 0x100
   20b3c:	bne	20b10 <__assert_fail@plt+0xee70>
   20b40:	b	20c24 <__assert_fail@plt+0xef84>
   20b44:	bl	11a6c <__ctype_b_loc@plt>
   20b48:	ldr	r1, [r0]
   20b4c:	cmp	r8, #0
   20b50:	bne	2101c <__assert_fail@plt+0xf37c>
   20b54:	mov	r0, #0
   20b58:	mov	r2, #1
   20b5c:	ldrb	r3, [r1, #1]
   20b60:	tst	r3, #32
   20b64:	beq	20b7c <__assert_fail@plt+0xeedc>
   20b68:	ubfx	r3, r0, #5, #3
   20b6c:	and	r6, r0, #31
   20b70:	ldr	r7, [r4, r3, lsl #2]
   20b74:	orr	r7, r7, r2, lsl r6
   20b78:	str	r7, [r4, r3, lsl #2]
   20b7c:	add	r0, r0, #1
   20b80:	add	r1, r1, #2
   20b84:	cmp	r0, #256	; 0x100
   20b88:	bne	20b5c <__assert_fail@plt+0xeebc>
   20b8c:	b	20c24 <__assert_fail@plt+0xef84>
   20b90:	bl	11a6c <__ctype_b_loc@plt>
   20b94:	ldr	r1, [r0]
   20b98:	cmp	r8, #0
   20b9c:	bne	21060 <__assert_fail@plt+0xf3c0>
   20ba0:	mov	r0, #0
   20ba4:	mov	r2, #1
   20ba8:	ldrb	r3, [r1, #1]
   20bac:	tst	r3, #4
   20bb0:	beq	20bc8 <__assert_fail@plt+0xef28>
   20bb4:	ubfx	r3, r0, #5, #3
   20bb8:	and	r6, r0, #31
   20bbc:	ldr	r7, [r4, r3, lsl #2]
   20bc0:	orr	r7, r7, r2, lsl r6
   20bc4:	str	r7, [r4, r3, lsl #2]
   20bc8:	add	r0, r0, #1
   20bcc:	add	r1, r1, #2
   20bd0:	cmp	r0, #256	; 0x100
   20bd4:	bne	20ba8 <__assert_fail@plt+0xef08>
   20bd8:	b	20c24 <__assert_fail@plt+0xef84>
   20bdc:	bl	11a6c <__ctype_b_loc@plt>
   20be0:	ldr	r1, [r0]
   20be4:	cmp	r8, #0
   20be8:	bne	210a4 <__assert_fail@plt+0xf404>
   20bec:	mov	r0, #0
   20bf0:	mov	r2, #1
   20bf4:	ldrb	r3, [r1, #1]
   20bf8:	tst	r3, #8
   20bfc:	beq	20c14 <__assert_fail@plt+0xef74>
   20c00:	ubfx	r3, r0, #5, #3
   20c04:	and	r6, r0, #31
   20c08:	ldr	r7, [r4, r3, lsl #2]
   20c0c:	orr	r7, r7, r2, lsl r6
   20c10:	str	r7, [r4, r3, lsl #2]
   20c14:	add	r0, r0, #1
   20c18:	add	r1, r1, #2
   20c1c:	cmp	r0, #256	; 0x100
   20c20:	bne	20bf4 <__assert_fail@plt+0xef54>
   20c24:	mov	r0, #0
   20c28:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20c2c:	bl	11a6c <__ctype_b_loc@plt>
   20c30:	ldr	r1, [r0]
   20c34:	mov	r2, #0
   20c38:	mov	r3, #1
   20c3c:	cmp	r8, #0
   20c40:	bne	20de8 <__assert_fail@plt+0xf148>
   20c44:	ldrb	r0, [r1, #1]
   20c48:	tst	r0, #64	; 0x40
   20c4c:	beq	20c64 <__assert_fail@plt+0xefc4>
   20c50:	ubfx	r0, r2, #5, #3
   20c54:	and	r6, r2, #31
   20c58:	ldr	r7, [r4, r0, lsl #2]
   20c5c:	orr	r7, r7, r3, lsl r6
   20c60:	str	r7, [r4, r0, lsl #2]
   20c64:	add	r2, r2, #1
   20c68:	add	r1, r1, #2
   20c6c:	mov	r0, #0
   20c70:	cmp	r2, #256	; 0x100
   20c74:	bne	20c44 <__assert_fail@plt+0xefa4>
   20c78:	b	20db8 <__assert_fail@plt+0xf118>
   20c7c:	bl	11a6c <__ctype_b_loc@plt>
   20c80:	ldr	r1, [r0]
   20c84:	mov	r2, #0
   20c88:	mov	r3, #1
   20c8c:	cmp	r8, #0
   20c90:	bne	20e24 <__assert_fail@plt+0xf184>
   20c94:	ldrb	r0, [r1, #1]
   20c98:	tst	r0, #1
   20c9c:	beq	20cb4 <__assert_fail@plt+0xf014>
   20ca0:	ubfx	r0, r2, #5, #3
   20ca4:	and	r6, r2, #31
   20ca8:	ldr	r7, [r4, r0, lsl #2]
   20cac:	orr	r7, r7, r3, lsl r6
   20cb0:	str	r7, [r4, r0, lsl #2]
   20cb4:	add	r2, r2, #1
   20cb8:	add	r1, r1, #2
   20cbc:	mov	r0, #0
   20cc0:	cmp	r2, #256	; 0x100
   20cc4:	bne	20c94 <__assert_fail@plt+0xeff4>
   20cc8:	b	20db8 <__assert_fail@plt+0xf118>
   20ccc:	bl	11a6c <__ctype_b_loc@plt>
   20cd0:	ldr	r1, [r0]
   20cd4:	mov	r2, #0
   20cd8:	mov	r3, #1
   20cdc:	cmp	r8, #0
   20ce0:	bne	20ea4 <__assert_fail@plt+0xf204>
   20ce4:	ldrb	r0, [r1]
   20ce8:	tst	r0, #1
   20cec:	beq	20d04 <__assert_fail@plt+0xf064>
   20cf0:	ubfx	r0, r2, #5, #3
   20cf4:	and	r6, r2, #31
   20cf8:	ldr	r7, [r4, r0, lsl #2]
   20cfc:	orr	r7, r7, r3, lsl r6
   20d00:	str	r7, [r4, r0, lsl #2]
   20d04:	add	r2, r2, #1
   20d08:	add	r1, r1, #2
   20d0c:	mov	r0, #0
   20d10:	cmp	r2, #256	; 0x100
   20d14:	bne	20ce4 <__assert_fail@plt+0xf044>
   20d18:	b	20db8 <__assert_fail@plt+0xf118>
   20d1c:	bl	11a6c <__ctype_b_loc@plt>
   20d20:	ldr	r1, [r0]
   20d24:	mov	r2, #0
   20d28:	mov	r3, #1
   20d2c:	cmp	r8, #0
   20d30:	bne	20f60 <__assert_fail@plt+0xf2c0>
   20d34:	ldrsh	r0, [r1]
   20d38:	cmn	r0, #1
   20d3c:	bgt	20d54 <__assert_fail@plt+0xf0b4>
   20d40:	ubfx	r0, r2, #5, #3
   20d44:	and	r6, r2, #31
   20d48:	ldr	r7, [r4, r0, lsl #2]
   20d4c:	orr	r7, r7, r3, lsl r6
   20d50:	str	r7, [r4, r0, lsl #2]
   20d54:	add	r2, r2, #1
   20d58:	add	r1, r1, #2
   20d5c:	mov	r0, #0
   20d60:	cmp	r2, #256	; 0x100
   20d64:	bne	20d34 <__assert_fail@plt+0xf094>
   20d68:	b	20db8 <__assert_fail@plt+0xf118>
   20d6c:	bl	11a6c <__ctype_b_loc@plt>
   20d70:	ldr	r1, [r0]
   20d74:	mov	r2, #0
   20d78:	mov	r3, #1
   20d7c:	cmp	r8, #0
   20d80:	bne	20fe0 <__assert_fail@plt+0xf340>
   20d84:	ldrb	r0, [r1]
   20d88:	tst	r0, #4
   20d8c:	beq	20da4 <__assert_fail@plt+0xf104>
   20d90:	ubfx	r0, r2, #5, #3
   20d94:	and	r6, r2, #31
   20d98:	ldr	r7, [r4, r0, lsl #2]
   20d9c:	orr	r7, r7, r3, lsl r6
   20da0:	str	r7, [r4, r0, lsl #2]
   20da4:	add	r2, r2, #1
   20da8:	add	r1, r1, #2
   20dac:	mov	r0, #0
   20db0:	cmp	r2, #256	; 0x100
   20db4:	bne	20d84 <__assert_fail@plt+0xf0e4>
   20db8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20dbc:	mov	r1, #1
   20dc0:	orr	r9, r1, r0, lsl #1
   20dc4:	ldr	r0, [r7, #12]
   20dc8:	lsl	r1, r9, #2
   20dcc:	bl	1a2b4 <__assert_fail@plt+0x8614>
   20dd0:	cmp	r0, #0
   20dd4:	moveq	r0, #12
   20dd8:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   20ddc:	str	r0, [r7, #12]
   20de0:	str	r9, [r5]
   20de4:	b	208cc <__assert_fail@plt+0xec2c>
   20de8:	ldrb	r0, [r1, #1]
   20dec:	tst	r0, #64	; 0x40
   20df0:	beq	20e0c <__assert_fail@plt+0xf16c>
   20df4:	ldrb	r0, [r8, r2]
   20df8:	ubfx	r7, r0, #5, #3
   20dfc:	and	r0, r0, #31
   20e00:	ldr	r6, [r4, r7, lsl #2]
   20e04:	orr	r0, r6, r3, lsl r0
   20e08:	str	r0, [r4, r7, lsl #2]
   20e0c:	add	r2, r2, #1
   20e10:	add	r1, r1, #2
   20e14:	mov	r0, #0
   20e18:	cmp	r2, #256	; 0x100
   20e1c:	bne	20de8 <__assert_fail@plt+0xf148>
   20e20:	b	20db8 <__assert_fail@plt+0xf118>
   20e24:	ldrb	r0, [r1, #1]
   20e28:	tst	r0, #1
   20e2c:	beq	20e48 <__assert_fail@plt+0xf1a8>
   20e30:	ldrb	r0, [r8, r2]
   20e34:	ubfx	r7, r0, #5, #3
   20e38:	and	r0, r0, #31
   20e3c:	ldr	r6, [r4, r7, lsl #2]
   20e40:	orr	r0, r6, r3, lsl r0
   20e44:	str	r0, [r4, r7, lsl #2]
   20e48:	add	r2, r2, #1
   20e4c:	add	r1, r1, #2
   20e50:	mov	r0, #0
   20e54:	cmp	r2, #256	; 0x100
   20e58:	bne	20e24 <__assert_fail@plt+0xf184>
   20e5c:	b	20db8 <__assert_fail@plt+0xf118>
   20e60:	mov	r2, #0
   20e64:	mov	r3, #1
   20e68:	ldrb	r0, [r1]
   20e6c:	tst	r0, #8
   20e70:	beq	20e8c <__assert_fail@plt+0xf1ec>
   20e74:	ldrb	r0, [r8, r2]
   20e78:	ubfx	r7, r0, #5, #3
   20e7c:	and	r0, r0, #31
   20e80:	ldr	r6, [r4, r7, lsl #2]
   20e84:	orr	r0, r6, r3, lsl r0
   20e88:	str	r0, [r4, r7, lsl #2]
   20e8c:	add	r2, r2, #1
   20e90:	add	r1, r1, #2
   20e94:	mov	r0, #0
   20e98:	cmp	r2, #256	; 0x100
   20e9c:	bne	20e68 <__assert_fail@plt+0xf1c8>
   20ea0:	b	20db8 <__assert_fail@plt+0xf118>
   20ea4:	ldrb	r0, [r1]
   20ea8:	tst	r0, #1
   20eac:	beq	20ec8 <__assert_fail@plt+0xf228>
   20eb0:	ldrb	r0, [r8, r2]
   20eb4:	ubfx	r7, r0, #5, #3
   20eb8:	and	r0, r0, #31
   20ebc:	ldr	r6, [r4, r7, lsl #2]
   20ec0:	orr	r0, r6, r3, lsl r0
   20ec4:	str	r0, [r4, r7, lsl #2]
   20ec8:	add	r2, r2, #1
   20ecc:	add	r1, r1, #2
   20ed0:	mov	r0, #0
   20ed4:	cmp	r2, #256	; 0x100
   20ed8:	bne	20ea4 <__assert_fail@plt+0xf204>
   20edc:	b	20db8 <__assert_fail@plt+0xf118>
   20ee0:	mov	r2, #0
   20ee4:	mov	r3, #1
   20ee8:	ldrb	r0, [r1]
   20eec:	tst	r0, #2
   20ef0:	beq	20f0c <__assert_fail@plt+0xf26c>
   20ef4:	ldrb	r0, [r8, r2]
   20ef8:	ubfx	r7, r0, #5, #3
   20efc:	and	r0, r0, #31
   20f00:	ldr	r6, [r4, r7, lsl #2]
   20f04:	orr	r0, r6, r3, lsl r0
   20f08:	str	r0, [r4, r7, lsl #2]
   20f0c:	add	r2, r2, #1
   20f10:	add	r1, r1, #2
   20f14:	mov	r0, #0
   20f18:	cmp	r2, #256	; 0x100
   20f1c:	bne	20ee8 <__assert_fail@plt+0xf248>
   20f20:	b	20db8 <__assert_fail@plt+0xf118>
   20f24:	ldrb	r0, [r1, #1]
   20f28:	tst	r0, #16
   20f2c:	beq	20f48 <__assert_fail@plt+0xf2a8>
   20f30:	ldrb	r0, [r8, r2]
   20f34:	ubfx	r7, r0, #5, #3
   20f38:	and	r0, r0, #31
   20f3c:	ldr	r6, [r4, r7, lsl #2]
   20f40:	orr	r0, r6, r3, lsl r0
   20f44:	str	r0, [r4, r7, lsl #2]
   20f48:	add	r2, r2, #1
   20f4c:	add	r1, r1, #2
   20f50:	mov	r0, #0
   20f54:	cmp	r2, #256	; 0x100
   20f58:	bne	20f24 <__assert_fail@plt+0xf284>
   20f5c:	b	20db8 <__assert_fail@plt+0xf118>
   20f60:	ldrsh	r0, [r1]
   20f64:	cmn	r0, #1
   20f68:	bgt	20f84 <__assert_fail@plt+0xf2e4>
   20f6c:	ldrb	r0, [r8, r2]
   20f70:	ubfx	r7, r0, #5, #3
   20f74:	and	r0, r0, #31
   20f78:	ldr	r6, [r4, r7, lsl #2]
   20f7c:	orr	r0, r6, r3, lsl r0
   20f80:	str	r0, [r4, r7, lsl #2]
   20f84:	add	r2, r2, #1
   20f88:	add	r1, r1, #2
   20f8c:	mov	r0, #0
   20f90:	cmp	r2, #256	; 0x100
   20f94:	bne	20f60 <__assert_fail@plt+0xf2c0>
   20f98:	b	20db8 <__assert_fail@plt+0xf118>
   20f9c:	mov	r2, #0
   20fa0:	mov	r3, #1
   20fa4:	ldrb	r0, [r1, #1]
   20fa8:	tst	r0, #2
   20fac:	beq	20fc8 <__assert_fail@plt+0xf328>
   20fb0:	ldrb	r0, [r8, r2]
   20fb4:	ubfx	r7, r0, #5, #3
   20fb8:	and	r0, r0, #31
   20fbc:	ldr	r6, [r4, r7, lsl #2]
   20fc0:	orr	r0, r6, r3, lsl r0
   20fc4:	str	r0, [r4, r7, lsl #2]
   20fc8:	add	r2, r2, #1
   20fcc:	add	r1, r1, #2
   20fd0:	mov	r0, #0
   20fd4:	cmp	r2, #256	; 0x100
   20fd8:	bne	20fa4 <__assert_fail@plt+0xf304>
   20fdc:	b	20db8 <__assert_fail@plt+0xf118>
   20fe0:	ldrb	r0, [r1]
   20fe4:	tst	r0, #4
   20fe8:	beq	21004 <__assert_fail@plt+0xf364>
   20fec:	ldrb	r0, [r8, r2]
   20ff0:	ubfx	r7, r0, #5, #3
   20ff4:	and	r0, r0, #31
   20ff8:	ldr	r6, [r4, r7, lsl #2]
   20ffc:	orr	r0, r6, r3, lsl r0
   21000:	str	r0, [r4, r7, lsl #2]
   21004:	add	r2, r2, #1
   21008:	add	r1, r1, #2
   2100c:	mov	r0, #0
   21010:	cmp	r2, #256	; 0x100
   21014:	bne	20fe0 <__assert_fail@plt+0xf340>
   21018:	b	20db8 <__assert_fail@plt+0xf118>
   2101c:	mov	r2, #0
   21020:	mov	r3, #1
   21024:	ldrb	r0, [r1, #1]
   21028:	tst	r0, #32
   2102c:	beq	21048 <__assert_fail@plt+0xf3a8>
   21030:	ldrb	r0, [r8, r2]
   21034:	ubfx	r7, r0, #5, #3
   21038:	and	r0, r0, #31
   2103c:	ldr	r6, [r4, r7, lsl #2]
   21040:	orr	r0, r6, r3, lsl r0
   21044:	str	r0, [r4, r7, lsl #2]
   21048:	add	r2, r2, #1
   2104c:	add	r1, r1, #2
   21050:	mov	r0, #0
   21054:	cmp	r2, #256	; 0x100
   21058:	bne	21024 <__assert_fail@plt+0xf384>
   2105c:	b	20db8 <__assert_fail@plt+0xf118>
   21060:	mov	r2, #0
   21064:	mov	r3, #1
   21068:	ldrb	r0, [r1, #1]
   2106c:	tst	r0, #4
   21070:	beq	2108c <__assert_fail@plt+0xf3ec>
   21074:	ldrb	r0, [r8, r2]
   21078:	ubfx	r7, r0, #5, #3
   2107c:	and	r0, r0, #31
   21080:	ldr	r6, [r4, r7, lsl #2]
   21084:	orr	r0, r6, r3, lsl r0
   21088:	str	r0, [r4, r7, lsl #2]
   2108c:	add	r2, r2, #1
   21090:	add	r1, r1, #2
   21094:	mov	r0, #0
   21098:	cmp	r2, #256	; 0x100
   2109c:	bne	21068 <__assert_fail@plt+0xf3c8>
   210a0:	b	20db8 <__assert_fail@plt+0xf118>
   210a4:	mov	r2, #0
   210a8:	mov	r3, #1
   210ac:	ldrb	r0, [r1, #1]
   210b0:	tst	r0, #8
   210b4:	beq	210d0 <__assert_fail@plt+0xf430>
   210b8:	ldrb	r0, [r8, r2]
   210bc:	ubfx	r7, r0, #5, #3
   210c0:	and	r0, r0, #31
   210c4:	ldr	r6, [r4, r7, lsl #2]
   210c8:	orr	r0, r6, r3, lsl r0
   210cc:	str	r0, [r4, r7, lsl #2]
   210d0:	add	r2, r2, #1
   210d4:	add	r1, r1, #2
   210d8:	mov	r0, #0
   210dc:	cmp	r2, #256	; 0x100
   210e0:	bne	210ac <__assert_fail@plt+0xf40c>
   210e4:	b	20db8 <__assert_fail@plt+0xf118>
   210e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   210ec:	add	fp, sp, #24
   210f0:	mov	r6, r0
   210f4:	mov	r4, r2
   210f8:	mov	r5, r1
   210fc:	mvn	r0, #0
   21100:	movw	r8, #32816	; 0x8030
   21104:	b	21164 <__assert_fail@plt+0xf4c4>
   21108:	cmp	r2, #2
   2110c:	beq	21198 <__assert_fail@plt+0xf4f8>
   21110:	ldrb	r1, [r5]
   21114:	cmp	r1, #44	; 0x2c
   21118:	beq	21190 <__assert_fail@plt+0xf4f0>
   2111c:	mvn	r0, #1
   21120:	cmp	r1, #48	; 0x30
   21124:	bcc	21164 <__assert_fail@plt+0xf4c4>
   21128:	cmp	r2, #1
   2112c:	bne	21164 <__assert_fail@plt+0xf4c4>
   21130:	cmn	r7, #2
   21134:	beq	21164 <__assert_fail@plt+0xf4c4>
   21138:	cmp	r1, #57	; 0x39
   2113c:	bhi	21164 <__assert_fail@plt+0xf4c4>
   21140:	cmn	r7, #1
   21144:	beq	21160 <__assert_fail@plt+0xf4c0>
   21148:	add	r0, r7, r7, lsl #2
   2114c:	add	r1, r1, r0, lsl #1
   21150:	sub	r0, r1, #48	; 0x30
   21154:	cmp	r1, r8
   21158:	movwgt	r0, #32768	; 0x8000
   2115c:	b	21164 <__assert_fail@plt+0xf4c4>
   21160:	sub	r0, r1, #48	; 0x30
   21164:	mov	r7, r0
   21168:	mov	r0, r5
   2116c:	mov	r1, r6
   21170:	mov	r2, r4
   21174:	bl	1e338 <__assert_fail@plt+0xc698>
   21178:	ldr	r1, [r6, #40]	; 0x28
   2117c:	add	r0, r1, r0
   21180:	str	r0, [r6, #40]	; 0x28
   21184:	ldrb	r2, [r5, #4]
   21188:	cmp	r2, #24
   2118c:	bne	21108 <__assert_fail@plt+0xf468>
   21190:	mov	r0, r7
   21194:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21198:	mvn	r7, #1
   2119c:	b	21190 <__assert_fail@plt+0xf4f0>
   211a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   211a4:	add	fp, sp, #24
   211a8:	sub	sp, sp, #8
   211ac:	mov	r3, r0
   211b0:	mov	r5, r0
   211b4:	mov	r8, r1
   211b8:	mov	r0, r1
   211bc:	mov	r1, #0
   211c0:	mov	r2, #0
   211c4:	mov	r7, #0
   211c8:	ldr	r4, [r3], #20
   211cc:	bl	2016c <__assert_fail@plt+0xe4cc>
   211d0:	cmp	r0, #0
   211d4:	str	r0, [sp, #4]
   211d8:	beq	21274 <__assert_fail@plt+0xf5d4>
   211dc:	mov	r9, r0
   211e0:	add	r6, sp, #4
   211e4:	mov	r7, #0
   211e8:	str	r4, [r0]
   211ec:	ldr	r0, [r6]
   211f0:	ldr	r1, [r0, #24]
   211f4:	orr	r1, r1, #262144	; 0x40000
   211f8:	str	r1, [r0, #24]
   211fc:	ldr	r0, [r5, #4]
   21200:	ldr	r4, [r6]
   21204:	cmp	r0, #0
   21208:	beq	21218 <__assert_fail@plt+0xf578>
   2120c:	add	r6, r4, #4
   21210:	mov	r5, r0
   21214:	b	2124c <__assert_fail@plt+0xf5ac>
   21218:	mov	r1, #0
   2121c:	mov	r0, r5
   21220:	ldr	r5, [r5, #8]
   21224:	cmp	r5, r1
   21228:	cmpne	r5, #0
   2122c:	bne	21248 <__assert_fail@plt+0xf5a8>
   21230:	ldr	r5, [r0]
   21234:	ldr	r4, [r4]
   21238:	mov	r1, r0
   2123c:	cmp	r5, #0
   21240:	bne	2121c <__assert_fail@plt+0xf57c>
   21244:	b	21270 <__assert_fail@plt+0xf5d0>
   21248:	add	r6, r4, #8
   2124c:	add	r3, r5, #20
   21250:	mov	r0, r8
   21254:	mov	r1, #0
   21258:	mov	r2, #0
   2125c:	bl	2016c <__assert_fail@plt+0xe4cc>
   21260:	cmp	r0, #0
   21264:	str	r0, [r6]
   21268:	bne	211e8 <__assert_fail@plt+0xf548>
   2126c:	b	21274 <__assert_fail@plt+0xf5d4>
   21270:	mov	r7, r9
   21274:	mov	r0, r7
   21278:	sub	sp, fp, #24
   2127c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21280:	push	{r4, r5, r6, r7, fp, lr}
   21284:	add	fp, sp, #16
   21288:	mov	r6, r0
   2128c:	mov	r5, r1
   21290:	mov	r0, r2
   21294:	mov	r4, r2
   21298:	mov	r1, r6
   2129c:	blx	r5
   212a0:	cmp	r0, #0
   212a4:	popne	{r4, r5, r6, r7, fp, pc}
   212a8:	ldr	r7, [r6, #4]
   212ac:	cmp	r7, #0
   212b0:	bne	212e4 <__assert_fail@plt+0xf644>
   212b4:	mov	r1, #0
   212b8:	b	212d0 <__assert_fail@plt+0xf630>
   212bc:	ldr	r6, [r0]
   212c0:	mov	r1, r0
   212c4:	cmp	r6, #0
   212c8:	moveq	r0, #0
   212cc:	popeq	{r4, r5, r6, r7, fp, pc}
   212d0:	ldr	r7, [r6, #8]
   212d4:	mov	r0, r6
   212d8:	cmp	r7, r1
   212dc:	cmpne	r7, #0
   212e0:	beq	212bc <__assert_fail@plt+0xf61c>
   212e4:	mov	r0, r4
   212e8:	mov	r1, r7
   212ec:	blx	r5
   212f0:	cmp	r0, #0
   212f4:	mov	r6, r7
   212f8:	beq	212a8 <__assert_fail@plt+0xf608>
   212fc:	pop	{r4, r5, r6, r7, fp, pc}
   21300:	ldrb	r2, [r1, #24]
   21304:	cmp	r2, #17
   21308:	beq	2133c <__assert_fail@plt+0xf69c>
   2130c:	cmp	r2, #4
   21310:	bne	21390 <__assert_fail@plt+0xf6f0>
   21314:	ldr	r2, [r0, #132]	; 0x84
   21318:	cmp	r2, #0
   2131c:	beq	21390 <__assert_fail@plt+0xf6f0>
   21320:	ldr	r3, [r1, #20]
   21324:	ldr	r2, [r2, r3, lsl #2]
   21328:	mov	r3, #1
   2132c:	str	r2, [r1, #20]
   21330:	ldr	r1, [r0, #80]	; 0x50
   21334:	orr	r1, r1, r3, lsl r2
   21338:	b	2138c <__assert_fail@plt+0xf6ec>
   2133c:	ldr	r2, [r1, #4]
   21340:	cmp	r2, #0
   21344:	beq	21390 <__assert_fail@plt+0xf6f0>
   21348:	ldrb	r3, [r2, #24]
   2134c:	cmp	r3, #17
   21350:	bne	21390 <__assert_fail@plt+0xf6f0>
   21354:	ldr	r3, [r2, #4]
   21358:	ldr	r2, [r2, #20]
   2135c:	cmp	r3, #0
   21360:	str	r3, [r1, #4]
   21364:	strne	r1, [r3]
   21368:	cmp	r2, #31
   2136c:	ldr	r1, [r1, #20]
   21370:	ldr	r3, [r0, #132]	; 0x84
   21374:	ldr	r1, [r3, r1, lsl #2]
   21378:	str	r1, [r3, r2, lsl #2]
   2137c:	bgt	21390 <__assert_fail@plt+0xf6f0>
   21380:	ldr	r1, [r0, #80]	; 0x50
   21384:	mov	r3, #1
   21388:	bic	r1, r1, r3, lsl r2
   2138c:	str	r1, [r0, #80]	; 0x50
   21390:	mov	r0, #0
   21394:	bx	lr
   21398:	push	{r4, r5, fp, lr}
   2139c:	add	fp, sp, #8
   213a0:	sub	sp, sp, #8
   213a4:	mov	r5, r0
   213a8:	mov	r0, #0
   213ac:	mov	r4, r1
   213b0:	str	r0, [sp, #4]
   213b4:	ldr	r2, [r1, #4]
   213b8:	cmp	r2, #0
   213bc:	beq	213e4 <__assert_fail@plt+0xf744>
   213c0:	ldrb	r0, [r2, #24]
   213c4:	cmp	r0, #17
   213c8:	bne	213e4 <__assert_fail@plt+0xf744>
   213cc:	add	r0, sp, #4
   213d0:	mov	r1, r5
   213d4:	bl	2169c <__assert_fail@plt+0xf9fc>
   213d8:	cmp	r0, #0
   213dc:	str	r0, [r4, #4]
   213e0:	strne	r4, [r0]
   213e4:	ldr	r2, [r4, #8]
   213e8:	cmp	r2, #0
   213ec:	beq	21414 <__assert_fail@plt+0xf774>
   213f0:	ldrb	r0, [r2, #24]
   213f4:	cmp	r0, #17
   213f8:	bne	21414 <__assert_fail@plt+0xf774>
   213fc:	add	r0, sp, #4
   21400:	mov	r1, r5
   21404:	bl	2169c <__assert_fail@plt+0xf9fc>
   21408:	cmp	r0, #0
   2140c:	str	r0, [r4, #8]
   21410:	strne	r4, [r0]
   21414:	ldr	r0, [sp, #4]
   21418:	sub	sp, fp, #8
   2141c:	pop	{r4, r5, fp, pc}
   21420:	push	{r4, r5, fp, lr}
   21424:	add	fp, sp, #8
   21428:	ldr	r2, [r1, #24]
   2142c:	mov	r5, r0
   21430:	mov	r4, r1
   21434:	uxtb	r0, r2
   21438:	cmp	r0, #16
   2143c:	bne	2145c <__assert_fail@plt+0xf7bc>
   21440:	ldr	r0, [r4, #4]
   21444:	ldr	r1, [r0, #12]
   21448:	str	r1, [r4, #12]
   2144c:	ldr	r0, [r0, #28]
   21450:	str	r0, [r4, #28]
   21454:	mov	r0, #0
   21458:	pop	{r4, r5, fp, pc}
   2145c:	str	r4, [r4, #12]
   21460:	mov	r0, r5
   21464:	ldr	r1, [r4, #20]
   21468:	bl	217f0 <__assert_fail@plt+0xfb50>
   2146c:	cmn	r0, #1
   21470:	str	r0, [r4, #28]
   21474:	moveq	r0, #12
   21478:	popeq	{r4, r5, fp, pc}
   2147c:	ldrb	r2, [r4, #24]
   21480:	mov	r1, r0
   21484:	mov	r0, #0
   21488:	cmp	r2, #12
   2148c:	popne	{r4, r5, fp, pc}
   21490:	ldr	r2, [r5]
   21494:	ldr	r3, [r4, #20]
   21498:	add	r1, r2, r1, lsl #3
   2149c:	ldr	r2, [r1, #4]
   214a0:	bfi	r2, r3, #8, #10
   214a4:	str	r2, [r1, #4]
   214a8:	pop	{r4, r5, fp, pc}
   214ac:	ldrb	r0, [r1, #24]
   214b0:	cmp	r0, #16
   214b4:	beq	214c8 <__assert_fail@plt+0xf828>
   214b8:	cmp	r0, #11
   214bc:	bne	214e0 <__assert_fail@plt+0xf840>
   214c0:	ldr	r0, [r1, #4]
   214c4:	b	21500 <__assert_fail@plt+0xf860>
   214c8:	ldmib	r1, {r0, r2}
   214cc:	ldr	r3, [r2, #12]
   214d0:	str	r3, [r0, #16]
   214d4:	ldr	r0, [r1, #16]
   214d8:	str	r0, [r2, #16]
   214dc:	b	21504 <__assert_fail@plt+0xf864>
   214e0:	ldr	r0, [r1, #4]
   214e4:	cmp	r0, #0
   214e8:	ldrne	r2, [r1, #16]
   214ec:	strne	r2, [r0, #16]
   214f0:	ldr	r0, [r1, #8]
   214f4:	cmp	r0, #0
   214f8:	beq	21504 <__assert_fail@plt+0xf864>
   214fc:	ldr	r1, [r1, #16]
   21500:	str	r1, [r0, #16]
   21504:	mov	r0, #0
   21508:	bx	lr
   2150c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21510:	add	fp, sp, #24
   21514:	ldrb	r3, [r1, #24]
   21518:	ldr	r2, [r1, #28]
   2151c:	mov	r4, #0
   21520:	sub	r3, r3, #2
   21524:	cmp	r3, #14
   21528:	bhi	21630 <__assert_fail@plt+0xf990>
   2152c:	add	r7, pc, #0
   21530:	ldr	pc, [r7, r3, lsl #2]
   21534:	andeq	r1, r2, r0, lsl #13
   21538:	andeq	r1, r2, r0, lsr r6
   2153c:	andeq	r1, r2, r4, asr #12
   21540:	andeq	r1, r2, r0, lsr r6
   21544:	andeq	r1, r2, r0, lsr r6
   21548:	andeq	r1, r2, r0, lsr r6
   2154c:	andeq	r1, r2, r0, ror r5
   21550:	andeq	r1, r2, r0, ror r5
   21554:	andeq	r1, r2, ip, lsr #11
   21558:	andeq	r1, r2, ip, lsr #11
   2155c:	andeq	r1, r2, r0, ror r5
   21560:	andeq	r1, r2, r0, lsr r6
   21564:	andeq	r1, r2, r0, lsr r6
   21568:	andeq	r1, r2, r0, lsr r6
   2156c:	andeq	r1, r2, r0, lsl #13
   21570:	ldr	r1, [r1, #16]
   21574:	ldr	r5, [r1, #28]
   21578:	ldr	r6, [r0, #20]
   2157c:	add	r0, r2, r2, lsl #1
   21580:	mov	r1, #1
   21584:	str	r1, [r6, r0, lsl #2]!
   21588:	mov	r0, #4
   2158c:	mov	r7, r6
   21590:	str	r1, [r7, #4]!
   21594:	bl	1a224 <__assert_fail@plt+0x8584>
   21598:	cmp	r0, #0
   2159c:	str	r0, [r6, #8]
   215a0:	beq	21688 <__assert_fail@plt+0xf9e8>
   215a4:	str	r5, [r0]
   215a8:	b	21680 <__assert_fail@plt+0xf9e0>
   215ac:	ldrb	r3, [r0, #88]	; 0x58
   215b0:	add	r6, r1, #16
   215b4:	add	r5, r2, r2, lsl #1
   215b8:	orr	r3, r3, #1
   215bc:	strb	r3, [r0, #88]	; 0x58
   215c0:	mov	r3, r6
   215c4:	ldr	r7, [r1, #4]
   215c8:	ldr	r1, [r1, #8]
   215cc:	cmp	r1, #0
   215d0:	addne	r3, r1, #12
   215d4:	cmp	r7, #0
   215d8:	ldr	r1, [r3]
   215dc:	addne	r6, r7, #12
   215e0:	ldr	r8, [r1, #28]
   215e4:	ldr	r1, [r6]
   215e8:	ldr	r6, [r0, #20]
   215ec:	mov	r0, #2
   215f0:	ldr	r9, [r1, #28]
   215f4:	mov	r7, r6
   215f8:	str	r0, [r7, r5, lsl #2]!
   215fc:	mov	r0, #8
   21600:	bl	1a224 <__assert_fail@plt+0x8584>
   21604:	cmp	r0, #0
   21608:	str	r0, [r7, #8]
   2160c:	beq	21694 <__assert_fail@plt+0xf9f4>
   21610:	add	r1, r6, r5, lsl #2
   21614:	cmp	r9, r8
   21618:	add	r1, r1, #4
   2161c:	bne	21664 <__assert_fail@plt+0xf9c4>
   21620:	mov	r2, #1
   21624:	str	r2, [r1]
   21628:	str	r9, [r0]
   2162c:	b	21680 <__assert_fail@plt+0xf9e0>
   21630:	ldr	r1, [r1, #16]
   21634:	ldr	r0, [r0, #12]
   21638:	ldr	r1, [r1, #28]
   2163c:	str	r1, [r0, r2, lsl #2]
   21640:	b	21680 <__assert_fail@plt+0xf9e0>
   21644:	ldr	r7, [r1, #16]
   21648:	ldr	r3, [r0, #12]
   2164c:	ldr	r5, [r7, #28]
   21650:	str	r5, [r3, r2, lsl #2]
   21654:	ldrb	r1, [r1, #24]
   21658:	cmp	r1, #4
   2165c:	beq	21578 <__assert_fail@plt+0xf8d8>
   21660:	b	21680 <__assert_fail@plt+0xf9e0>
   21664:	mov	r2, #2
   21668:	str	r2, [r1]
   2166c:	bge	2167c <__assert_fail@plt+0xf9dc>
   21670:	str	r9, [r0]
   21674:	str	r8, [r0, #4]
   21678:	b	21680 <__assert_fail@plt+0xf9e0>
   2167c:	stm	r0, {r8, r9}
   21680:	mov	r0, r4
   21684:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21688:	mov	r0, #0
   2168c:	str	r0, [r7]
   21690:	str	r0, [r6]
   21694:	mov	r4, #12
   21698:	b	21680 <__assert_fail@plt+0xf9e0>
   2169c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   216a0:	add	fp, sp, #28
   216a4:	sub	sp, sp, #12
   216a8:	ldr	r5, [r2, #4]
   216ac:	ldr	sl, [r1]
   216b0:	mov	r9, r2
   216b4:	cmp	r5, #0
   216b8:	ldrbne	r1, [r1, #28]
   216bc:	andsne	r1, r1, #16
   216c0:	bne	217c8 <__assert_fail@plt+0xfb28>
   216c4:	str	r0, [sp]
   216c8:	mov	r0, #8
   216cc:	mov	r8, #0
   216d0:	add	r3, sp, #4
   216d4:	mov	r1, #0
   216d8:	mov	r2, #0
   216dc:	str	r0, [sp, #8]
   216e0:	mov	r0, sl
   216e4:	str	r8, [sp, #4]
   216e8:	bl	2016c <__assert_fail@plt+0xe4cc>
   216ec:	mov	r7, r0
   216f0:	mov	r0, #9
   216f4:	add	r3, sp, #4
   216f8:	mov	r1, #0
   216fc:	mov	r2, #0
   21700:	str	r0, [sp, #8]
   21704:	mov	r0, sl
   21708:	str	r8, [sp, #4]
   2170c:	bl	2016c <__assert_fail@plt+0xe4cc>
   21710:	mov	r4, r0
   21714:	cmp	r5, #0
   21718:	mov	r6, r0
   2171c:	beq	21744 <__assert_fail@plt+0xfaa4>
   21720:	mov	r0, #16
   21724:	add	r3, sp, #4
   21728:	mov	r1, r5
   2172c:	mov	r2, r4
   21730:	str	r0, [sp, #8]
   21734:	mov	r0, sl
   21738:	str	r8, [sp, #4]
   2173c:	bl	2016c <__assert_fail@plt+0xe4cc>
   21740:	mov	r6, r0
   21744:	mov	r0, #16
   21748:	add	r3, sp, #4
   2174c:	mov	r1, r7
   21750:	mov	r2, r6
   21754:	str	r0, [sp, #8]
   21758:	mov	r0, sl
   2175c:	str	r8, [sp, #4]
   21760:	bl	2016c <__assert_fail@plt+0xe4cc>
   21764:	cmp	r4, #0
   21768:	beq	21778 <__assert_fail@plt+0xfad8>
   2176c:	cmp	r7, #0
   21770:	cmpne	r6, #0
   21774:	bne	2178c <__assert_fail@plt+0xfaec>
   21778:	ldr	r1, [sp]
   2177c:	mov	r0, #12
   21780:	mov	r5, #0
   21784:	str	r0, [r1]
   21788:	b	217e4 <__assert_fail@plt+0xfb44>
   2178c:	mov	r5, r0
   21790:	cmp	r0, #0
   21794:	beq	21778 <__assert_fail@plt+0xfad8>
   21798:	ldr	r0, [r9, #20]
   2179c:	str	r0, [r4, #20]
   217a0:	str	r0, [r7, #20]
   217a4:	ldr	r1, [r9, #24]
   217a8:	ldr	r0, [r4, #24]
   217ac:	lsr	r1, r1, #19
   217b0:	bfi	r0, r1, #19, #1
   217b4:	str	r0, [r4, #24]
   217b8:	ldr	r0, [r7, #24]
   217bc:	bfi	r0, r1, #19, #1
   217c0:	str	r0, [r7, #24]
   217c4:	b	217e4 <__assert_fail@plt+0xfb44>
   217c8:	ldr	r3, [r9, #20]
   217cc:	cmp	r3, #31
   217d0:	bgt	217e4 <__assert_fail@plt+0xfb44>
   217d4:	ldr	r1, [sl, #80]	; 0x50
   217d8:	mov	r2, #1
   217dc:	tst	r1, r2, lsl r3
   217e0:	bne	216c4 <__assert_fail@plt+0xfa24>
   217e4:	mov	r0, r5
   217e8:	sub	sp, fp, #28
   217ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   217f4:	add	fp, sp, #28
   217f8:	sub	sp, sp, #12
   217fc:	mov	r4, r0
   21800:	ldr	r7, [r0, #4]
   21804:	ldr	r0, [r0, #8]
   21808:	mov	r5, r2
   2180c:	mov	r9, r1
   21810:	cmp	r0, r7
   21814:	bcs	218e0 <__assert_fail@plt+0xfc40>
   21818:	ldr	r1, [r4]
   2181c:	str	r9, [r1, r0, lsl #3]!
   21820:	str	r5, [r1, #4]
   21824:	ldr	r0, [r4]
   21828:	ldr	r1, [r4, #8]
   2182c:	add	r0, r0, r1, lsl #3
   21830:	ldr	r1, [r0, #4]
   21834:	bfc	r1, #8, #10
   21838:	str	r1, [r0, #4]
   2183c:	uxtb	r1, r5
   21840:	cmp	r1, #5
   21844:	bne	21858 <__assert_fail@plt+0xfbb8>
   21848:	ldr	r2, [r4, #92]	; 0x5c
   2184c:	mov	r0, #1048576	; 0x100000
   21850:	cmp	r2, #1
   21854:	bgt	21868 <__assert_fail@plt+0xfbc8>
   21858:	sub	r0, r1, #6
   2185c:	clz	r0, r0
   21860:	lsr	r0, r0, #5
   21864:	lsl	r0, r0, #20
   21868:	ldr	r1, [r4]
   2186c:	ldr	r2, [r4, #8]
   21870:	add	r1, r1, r2, lsl #3
   21874:	ldr	r2, [r1, #4]
   21878:	bic	r2, r2, #1048576	; 0x100000
   2187c:	orr	r0, r2, r0
   21880:	mvn	r2, #0
   21884:	str	r0, [r1, #4]
   21888:	ldr	r0, [r4, #8]
   2188c:	ldr	r1, [r4, #12]
   21890:	str	r2, [r1, r0, lsl #2]
   21894:	mov	r2, #0
   21898:	ldr	r0, [r4, #8]
   2189c:	ldr	r1, [r4, #20]
   218a0:	add	r0, r0, r0, lsl #1
   218a4:	str	r2, [r1, r0, lsl #2]!
   218a8:	str	r2, [r1, #4]
   218ac:	str	r2, [r1, #8]
   218b0:	ldr	r0, [r4, #8]
   218b4:	ldr	r1, [r4, #24]
   218b8:	add	r0, r0, r0, lsl #1
   218bc:	str	r2, [r1, r0, lsl #2]!
   218c0:	str	r2, [r1, #4]
   218c4:	str	r2, [r1, #8]
   218c8:	ldr	r6, [r4, #8]
   218cc:	add	r0, r6, #1
   218d0:	str	r0, [r4, #8]
   218d4:	mov	r0, r6
   218d8:	sub	sp, fp, #28
   218dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   218e0:	movw	r0, #21845	; 0x5555
   218e4:	lsl	r1, r7, #1
   218e8:	mvn	r6, #0
   218ec:	movt	r0, #5461	; 0x1555
   218f0:	cmp	r1, r0
   218f4:	bhi	218d4 <__assert_fail@plt+0xfc34>
   218f8:	ldr	r0, [r4]
   218fc:	str	r1, [sp, #8]
   21900:	lsl	r1, r7, #4
   21904:	bl	1a2b4 <__assert_fail@plt+0x8614>
   21908:	cmp	r0, #0
   2190c:	beq	218d4 <__assert_fail@plt+0xfc34>
   21910:	str	r0, [r4]
   21914:	lsl	r8, r7, #3
   21918:	ldr	r0, [r4, #12]
   2191c:	mov	r1, r8
   21920:	bl	1a2b4 <__assert_fail@plt+0x8614>
   21924:	str	r0, [sp, #4]
   21928:	ldr	r0, [r4, #16]
   2192c:	mov	r1, r8
   21930:	bl	1a2b4 <__assert_fail@plt+0x8614>
   21934:	mov	r2, r0
   21938:	ldr	r0, [r4, #20]
   2193c:	add	r1, r7, r7, lsl #1
   21940:	lsl	r8, r1, #3
   21944:	mov	r7, r2
   21948:	mov	r1, r8
   2194c:	bl	1a2b4 <__assert_fail@plt+0x8614>
   21950:	mov	sl, r0
   21954:	ldr	r0, [r4, #24]
   21958:	mov	r1, r8
   2195c:	bl	1a2b4 <__assert_fail@plt+0x8614>
   21960:	mov	r8, r0
   21964:	ldr	r0, [sp, #4]
   21968:	cmp	r0, #0
   2196c:	beq	2197c <__assert_fail@plt+0xfcdc>
   21970:	cmp	r7, #0
   21974:	cmpne	sl, #0
   21978:	bne	2199c <__assert_fail@plt+0xfcfc>
   2197c:	bl	1a158 <__assert_fail@plt+0x84b8>
   21980:	mov	r0, r7
   21984:	bl	1a158 <__assert_fail@plt+0x84b8>
   21988:	mov	r0, sl
   2198c:	bl	1a158 <__assert_fail@plt+0x84b8>
   21990:	mov	r0, r8
   21994:	bl	1a158 <__assert_fail@plt+0x84b8>
   21998:	b	218d4 <__assert_fail@plt+0xfc34>
   2199c:	cmp	r8, #0
   219a0:	beq	2197c <__assert_fail@plt+0xfcdc>
   219a4:	add	r1, r4, #12
   219a8:	stm	r1, {r0, r7, sl}
   219ac:	str	r8, [r4, #24]
   219b0:	ldr	r0, [sp, #8]
   219b4:	str	r0, [r4, #4]
   219b8:	ldr	r0, [r4, #8]
   219bc:	b	21818 <__assert_fail@plt+0xfb78>
   219c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   219c4:	add	fp, sp, #28
   219c8:	sub	sp, sp, #44	; 0x2c
   219cc:	mov	r8, r0
   219d0:	ldr	r0, [r1, #20]
   219d4:	add	r4, r2, r2, lsl #1
   219d8:	mov	r5, r1
   219dc:	mov	r1, #0
   219e0:	mov	r9, r3
   219e4:	mov	r6, r2
   219e8:	add	r0, r0, r4, lsl #2
   219ec:	ldr	r0, [r0, #4]
   219f0:	str	r1, [sp, #36]	; 0x24
   219f4:	add	r0, r0, #1
   219f8:	str	r0, [sp, #32]
   219fc:	lsl	r0, r0, #2
   21a00:	bl	1a224 <__assert_fail@plt+0x8584>
   21a04:	cmp	r0, #0
   21a08:	str	r0, [sp, #40]	; 0x28
   21a0c:	beq	21bd4 <__assert_fail@plt+0xff34>
   21a10:	mov	r1, #1
   21a14:	str	r6, [r0]
   21a18:	str	r1, [sp, #36]	; 0x24
   21a1c:	mvn	r1, #0
   21a20:	ldr	r0, [r5, #24]
   21a24:	add	r0, r0, r4, lsl #2
   21a28:	str	r1, [r0, #4]
   21a2c:	ldr	r2, [r5]
   21a30:	add	r0, r2, r6, lsl #3
   21a34:	ldr	r0, [r0, #4]
   21a38:	ubfx	r1, r0, #8, #10
   21a3c:	cmp	r1, #0
   21a40:	beq	21a9c <__assert_fail@plt+0xfdfc>
   21a44:	ldr	r3, [r5, #20]
   21a48:	add	r3, r3, r4, lsl #2
   21a4c:	ldr	r7, [r3, #4]
   21a50:	cmp	r7, #0
   21a54:	beq	21a9c <__assert_fail@plt+0xfdfc>
   21a58:	ldr	r3, [r3, #8]
   21a5c:	ldr	r3, [r3]
   21a60:	add	r2, r2, r3, lsl #3
   21a64:	ldrb	r2, [r2, #6]
   21a68:	tst	r2, #4
   21a6c:	bne	21a9c <__assert_fail@plt+0xfdfc>
   21a70:	str	r1, [sp]
   21a74:	mov	r0, r5
   21a78:	mov	r1, r6
   21a7c:	mov	r2, r6
   21a80:	mov	r3, r6
   21a84:	bl	21bdc <__assert_fail@plt+0xff3c>
   21a88:	cmp	r0, #0
   21a8c:	bne	21bcc <__assert_fail@plt+0xff2c>
   21a90:	ldr	r0, [r5]
   21a94:	add	r0, r0, r6, lsl #3
   21a98:	ldr	r0, [r0, #4]
   21a9c:	tst	r0, #8
   21aa0:	beq	21ba0 <__assert_fail@plt+0xff00>
   21aa4:	ldr	r0, [r5, #20]
   21aa8:	add	r1, r0, r4, lsl #2
   21aac:	ldr	r1, [r1, #4]
   21ab0:	cmp	r1, #1
   21ab4:	blt	21ba0 <__assert_fail@plt+0xff00>
   21ab8:	str	r8, [sp, #12]
   21abc:	mov	r8, #0
   21ac0:	add	r7, sp, #16
   21ac4:	add	sl, sp, #32
   21ac8:	mov	r6, #0
   21acc:	str	r9, [sp, #8]
   21ad0:	add	r0, r0, r4, lsl #2
   21ad4:	ldr	r0, [r0, #8]
   21ad8:	ldr	r2, [r0, r6, lsl #2]
   21adc:	ldr	r0, [r5, #24]
   21ae0:	add	r9, r2, r2, lsl #1
   21ae4:	add	r0, r0, r9, lsl #2
   21ae8:	ldr	r1, [r0, #4]
   21aec:	cmn	r1, #1
   21af0:	beq	21b58 <__assert_fail@plt+0xfeb8>
   21af4:	cmp	r1, #0
   21af8:	bne	21b18 <__assert_fail@plt+0xfe78>
   21afc:	mov	r0, r7
   21b00:	mov	r1, r5
   21b04:	mov	r3, #0
   21b08:	bl	219c0 <__assert_fail@plt+0xfd20>
   21b0c:	cmp	r0, #0
   21b10:	beq	21b28 <__assert_fail@plt+0xfe88>
   21b14:	b	21bcc <__assert_fail@plt+0xff2c>
   21b18:	vldr	d16, [r0]
   21b1c:	ldr	r0, [r0, #8]
   21b20:	str	r0, [sp, #24]
   21b24:	vstr	d16, [sp, #16]
   21b28:	mov	r0, sl
   21b2c:	mov	r1, r7
   21b30:	bl	21eb8 <__assert_fail@plt+0x10218>
   21b34:	cmp	r0, #0
   21b38:	bne	21bcc <__assert_fail@plt+0xff2c>
   21b3c:	ldr	r0, [r5, #24]
   21b40:	add	r0, r0, r9, lsl #2
   21b44:	ldr	r0, [r0, #4]
   21b48:	cmp	r0, #0
   21b4c:	bne	21b5c <__assert_fail@plt+0xfebc>
   21b50:	ldr	r0, [sp, #24]
   21b54:	bl	1a158 <__assert_fail@plt+0x84b8>
   21b58:	mov	r8, #1
   21b5c:	ldr	r0, [r5, #20]
   21b60:	add	r6, r6, #1
   21b64:	add	r1, r0, r4, lsl #2
   21b68:	ldr	r1, [r1, #4]
   21b6c:	cmp	r6, r1
   21b70:	blt	21ad0 <__assert_fail@plt+0xfe30>
   21b74:	tst	r8, #1
   21b78:	ldr	r8, [sp, #12]
   21b7c:	ldr	r0, [sp, #8]
   21b80:	beq	21ba0 <__assert_fail@plt+0xff00>
   21b84:	cmp	r0, #0
   21b88:	bne	21ba0 <__assert_fail@plt+0xff00>
   21b8c:	ldr	r0, [r5, #24]
   21b90:	mov	r1, #0
   21b94:	add	r0, r0, r4, lsl #2
   21b98:	str	r1, [r0, #4]
   21b9c:	b	21bb8 <__assert_fail@plt+0xff18>
   21ba0:	ldr	r0, [r5, #24]
   21ba4:	vldr	d16, [sp, #32]
   21ba8:	ldr	r1, [sp, #40]	; 0x28
   21bac:	add	r0, r0, r4, lsl #2
   21bb0:	str	r1, [r0, #8]
   21bb4:	vstr	d16, [r0]
   21bb8:	ldr	r0, [sp, #40]	; 0x28
   21bbc:	vldr	d16, [sp, #32]
   21bc0:	str	r0, [r8, #8]
   21bc4:	mov	r0, #0
   21bc8:	vstr	d16, [r8]
   21bcc:	sub	sp, fp, #28
   21bd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21bd4:	mov	r0, #12
   21bd8:	b	21bcc <__assert_fail@plt+0xff2c>
   21bdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21be0:	add	fp, sp, #28
   21be4:	sub	sp, sp, #20
   21be8:	ldr	sl, [fp, #8]
   21bec:	mov	r8, r2
   21bf0:	mov	r4, r1
   21bf4:	mov	r7, r0
   21bf8:	str	r3, [sp, #8]
   21bfc:	ldr	r2, [r7]
   21c00:	add	r1, r2, r4, lsl #3
   21c04:	ldrb	r0, [r1, #4]!
   21c08:	cmp	r0, #4
   21c0c:	bne	21c8c <__assert_fail@plt+0xffec>
   21c10:	ldr	r0, [r7, #12]
   21c14:	ldr	r1, [r7, #20]
   21c18:	add	r9, r8, r8, lsl #1
   21c1c:	mov	r2, sl
   21c20:	mov	r6, r7
   21c24:	ldr	r5, [r0, r4, lsl #2]
   21c28:	add	r0, r1, r9, lsl #2
   21c2c:	mov	r1, #0
   21c30:	str	r1, [r0, #4]
   21c34:	mov	r0, r7
   21c38:	mov	r1, r5
   21c3c:	bl	22044 <__assert_fail@plt+0x103a4>
   21c40:	mov	r7, r0
   21c44:	mov	r0, #12
   21c48:	cmn	r7, #1
   21c4c:	str	r0, [sp, #16]
   21c50:	beq	21eac <__assert_fail@plt+0x1020c>
   21c54:	ldr	r0, [r6, #12]
   21c58:	ldr	r1, [r0, r4, lsl #2]
   21c5c:	str	r1, [r0, r8, lsl #2]
   21c60:	mov	r1, r7
   21c64:	ldr	r0, [r6, #20]
   21c68:	add	r0, r0, r9, lsl #2
   21c6c:	bl	220cc <__assert_fail@plt+0x1042c>
   21c70:	mov	r8, r7
   21c74:	mov	r1, #0
   21c78:	cmp	r0, #0
   21c7c:	mov	r4, r5
   21c80:	mov	r7, r6
   21c84:	bne	21e5c <__assert_fail@plt+0x101bc>
   21c88:	b	21eac <__assert_fail@plt+0x1020c>
   21c8c:	ldr	r0, [r7, #20]
   21c90:	add	r9, r4, r4, lsl #1
   21c94:	add	r6, r0, r9, lsl #2
   21c98:	ldr	r3, [r6, #4]
   21c9c:	cmp	r3, #0
   21ca0:	beq	21e98 <__assert_fail@plt+0x101f8>
   21ca4:	ldr	r6, [r6, #8]
   21ca8:	cmp	r3, #1
   21cac:	ldr	r5, [r6]
   21cb0:	add	r6, r8, r8, lsl #1
   21cb4:	add	r0, r0, r6, lsl #2
   21cb8:	str	r6, [sp, #12]
   21cbc:	mov	r6, #0
   21cc0:	str	r6, [r0, #4]
   21cc4:	bne	21cf8 <__assert_fail@plt+0x10058>
   21cc8:	ldr	r2, [sp, #8]
   21ccc:	cmp	r4, r2
   21cd0:	bne	21e08 <__assert_fail@plt+0x10168>
   21cd4:	cmp	r8, r4
   21cd8:	beq	21e08 <__assert_fail@plt+0x10168>
   21cdc:	mov	r1, r5
   21ce0:	bl	220cc <__assert_fail@plt+0x1042c>
   21ce4:	ldr	r4, [sp, #8]
   21ce8:	cmp	r0, #0
   21cec:	mov	r1, #1
   21cf0:	movwne	r1, #2
   21cf4:	b	21e5c <__assert_fail@plt+0x101bc>
   21cf8:	ldr	r1, [r7, #8]
   21cfc:	sub	r3, r1, #1
   21d00:	cmp	r3, #1
   21d04:	blt	21d54 <__assert_fail@plt+0x100b4>
   21d08:	add	r3, r2, r3, lsl #3
   21d0c:	ldr	r6, [r3, #4]
   21d10:	ands	r3, r6, #262144	; 0x40000
   21d14:	beq	21d54 <__assert_fail@plt+0x100b4>
   21d18:	ldr	r3, [r7, #16]
   21d1c:	sub	r2, r2, #12
   21d20:	sub	r3, r3, #4
   21d24:	ldr	r4, [r3, r1, lsl #2]
   21d28:	cmp	r4, r5
   21d2c:	ubfxeq	r6, r6, #8, #10
   21d30:	cmpeq	r6, sl
   21d34:	beq	21e68 <__assert_fail@plt+0x101c8>
   21d38:	sub	r6, r1, #2
   21d3c:	cmp	r6, #1
   21d40:	blt	21d54 <__assert_fail@plt+0x100b4>
   21d44:	ldr	r6, [r2, r1, lsl #3]
   21d48:	sub	r1, r1, #1
   21d4c:	ands	r4, r6, #262144	; 0x40000
   21d50:	bne	21d24 <__assert_fail@plt+0x10084>
   21d54:	mov	r0, r7
   21d58:	mov	r1, r5
   21d5c:	mov	r2, sl
   21d60:	bl	22044 <__assert_fail@plt+0x103a4>
   21d64:	mov	r4, r0
   21d68:	mov	r0, #12
   21d6c:	cmn	r4, #1
   21d70:	str	r0, [sp, #16]
   21d74:	beq	21eac <__assert_fail@plt+0x1020c>
   21d78:	ldr	r0, [r7, #20]
   21d7c:	ldr	r6, [sp, #12]
   21d80:	mov	r1, r4
   21d84:	add	r0, r0, r6, lsl #2
   21d88:	bl	220cc <__assert_fail@plt+0x1042c>
   21d8c:	cmp	r0, #0
   21d90:	beq	21eac <__assert_fail@plt+0x1020c>
   21d94:	ldr	r3, [sp, #8]
   21d98:	mov	r0, r7
   21d9c:	mov	r1, r5
   21da0:	mov	r2, r4
   21da4:	str	sl, [sp]
   21da8:	bl	21bdc <__assert_fail@plt+0xff3c>
   21dac:	cmp	r0, #0
   21db0:	bne	21ea8 <__assert_fail@plt+0x10208>
   21db4:	ldr	r0, [r7, #20]
   21db8:	mov	r2, sl
   21dbc:	add	r0, r0, r9, lsl #2
   21dc0:	ldr	r0, [r0, #8]
   21dc4:	ldr	r4, [r0, #4]
   21dc8:	mov	r0, r7
   21dcc:	mov	r1, r4
   21dd0:	bl	22044 <__assert_fail@plt+0x103a4>
   21dd4:	mov	r8, r0
   21dd8:	mov	r0, #12
   21ddc:	cmn	r8, #1
   21de0:	str	r0, [sp, #16]
   21de4:	beq	21eac <__assert_fail@plt+0x1020c>
   21de8:	ldr	r0, [r7, #20]
   21dec:	mov	r1, r8
   21df0:	add	r0, r0, r6, lsl #2
   21df4:	bl	220cc <__assert_fail@plt+0x1042c>
   21df8:	mov	r1, #0
   21dfc:	cmp	r0, #0
   21e00:	bne	21e5c <__assert_fail@plt+0x101bc>
   21e04:	b	21eac <__assert_fail@plt+0x1020c>
   21e08:	ldr	r0, [r1]
   21e0c:	mov	r1, r5
   21e10:	ubfx	r0, r0, #8, #10
   21e14:	orr	sl, r0, sl
   21e18:	mov	r0, r7
   21e1c:	mov	r2, sl
   21e20:	bl	22044 <__assert_fail@plt+0x103a4>
   21e24:	mov	r8, r0
   21e28:	mov	r0, #12
   21e2c:	cmn	r8, #1
   21e30:	str	r0, [sp, #16]
   21e34:	beq	21eac <__assert_fail@plt+0x1020c>
   21e38:	ldr	r0, [r7, #20]
   21e3c:	ldr	r1, [sp, #12]
   21e40:	add	r0, r0, r1, lsl #2
   21e44:	mov	r1, r8
   21e48:	bl	220cc <__assert_fail@plt+0x1042c>
   21e4c:	mov	r1, #0
   21e50:	cmp	r0, #0
   21e54:	mov	r4, r5
   21e58:	beq	21eac <__assert_fail@plt+0x1020c>
   21e5c:	cmp	r1, #0
   21e60:	beq	21bfc <__assert_fail@plt+0xff5c>
   21e64:	b	21e84 <__assert_fail@plt+0x101e4>
   21e68:	sub	r1, r1, #1
   21e6c:	bl	220cc <__assert_fail@plt+0x1042c>
   21e70:	ldr	r6, [sp, #12]
   21e74:	cmp	r0, #0
   21e78:	bne	21db4 <__assert_fail@plt+0x10114>
   21e7c:	mov	r0, #12
   21e80:	b	21ea8 <__assert_fail@plt+0x10208>
   21e84:	mov	r0, #12
   21e88:	cmp	r1, #2
   21e8c:	str	r0, [sp, #16]
   21e90:	beq	21ea4 <__assert_fail@plt+0x10204>
   21e94:	b	21eac <__assert_fail@plt+0x1020c>
   21e98:	ldr	r0, [r7, #12]
   21e9c:	ldr	r1, [r0, r4, lsl #2]
   21ea0:	str	r1, [r0, r8, lsl #2]
   21ea4:	mov	r0, #0
   21ea8:	str	r0, [sp, #16]
   21eac:	ldr	r0, [sp, #16]
   21eb0:	sub	sp, fp, #28
   21eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21eb8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21ebc:	add	fp, sp, #24
   21ec0:	mov	r8, #0
   21ec4:	cmp	r1, #0
   21ec8:	beq	22020 <__assert_fail@plt+0x10380>
   21ecc:	mov	r5, r0
   21ed0:	ldr	r0, [r1, #4]
   21ed4:	mov	r9, r1
   21ed8:	cmp	r0, #0
   21edc:	beq	22020 <__assert_fail@plt+0x10380>
   21ee0:	ldr	r1, [r5, #4]
   21ee4:	ldr	r2, [r5]
   21ee8:	add	r3, r1, r0, lsl #1
   21eec:	cmp	r2, r3
   21ef0:	bge	21f20 <__assert_fail@plt+0x10280>
   21ef4:	add	r7, r2, r0
   21ef8:	ldr	r0, [r5, #8]
   21efc:	lsl	r1, r7, #3
   21f00:	bl	1a2b4 <__assert_fail@plt+0x8614>
   21f04:	cmp	r0, #0
   21f08:	beq	2203c <__assert_fail@plt+0x1039c>
   21f0c:	str	r0, [r5, #8]
   21f10:	lsl	r0, r7, #1
   21f14:	str	r0, [r5]
   21f18:	ldr	r1, [r5, #4]
   21f1c:	ldr	r0, [r9, #4]
   21f20:	cmp	r1, #0
   21f24:	beq	22028 <__assert_fail@plt+0x10388>
   21f28:	add	r7, r1, r0, lsl #1
   21f2c:	sub	r1, r1, #1
   21f30:	sub	r0, r0, #1
   21f34:	orr	r2, r0, r1
   21f38:	cmp	r2, #0
   21f3c:	blt	21f88 <__assert_fail@plt+0x102e8>
   21f40:	ldr	r2, [r9, #8]
   21f44:	ldr	r3, [r5, #8]
   21f48:	ldr	r4, [r2, r0, lsl #2]
   21f4c:	ldr	r6, [r3, r1, lsl #2]
   21f50:	cmp	r6, r4
   21f54:	bne	21f64 <__assert_fail@plt+0x102c4>
   21f58:	sub	r1, r1, #1
   21f5c:	sub	r0, r0, #1
   21f60:	b	21f7c <__assert_fail@plt+0x102dc>
   21f64:	bge	21f78 <__assert_fail@plt+0x102d8>
   21f68:	sub	r7, r7, #1
   21f6c:	sub	r0, r0, #1
   21f70:	str	r4, [r3, r7, lsl #2]
   21f74:	b	21f7c <__assert_fail@plt+0x102dc>
   21f78:	sub	r1, r1, #1
   21f7c:	orr	r6, r0, r1
   21f80:	cmn	r6, #1
   21f84:	bgt	21f48 <__assert_fail@plt+0x102a8>
   21f88:	cmp	r0, #0
   21f8c:	blt	21fac <__assert_fail@plt+0x1030c>
   21f90:	add	r2, r0, #1
   21f94:	ldr	r0, [r5, #8]
   21f98:	ldr	r1, [r9, #8]
   21f9c:	sub	r7, r7, r2
   21fa0:	lsl	r2, r2, #2
   21fa4:	add	r0, r0, r7, lsl #2
   21fa8:	bl	118e0 <memcpy@plt>
   21fac:	ldr	r0, [r5, #4]
   21fb0:	ldr	r2, [r9, #4]
   21fb4:	sub	r1, r0, #1
   21fb8:	add	r3, r1, r2, lsl #1
   21fbc:	sub	r2, r3, r7
   21fc0:	adds	r2, r2, #1
   21fc4:	beq	22020 <__assert_fail@plt+0x10380>
   21fc8:	add	r0, r2, r0
   21fcc:	str	r0, [r5, #4]
   21fd0:	ldr	r0, [r5, #8]
   21fd4:	ldr	r6, [r0, r1, lsl #2]
   21fd8:	ldr	r5, [r0, r3, lsl #2]
   21fdc:	cmp	r5, r6
   21fe0:	ble	21ffc <__assert_fail@plt+0x1035c>
   21fe4:	add	r6, r2, r1
   21fe8:	subs	r2, r2, #1
   21fec:	sub	r3, r3, #1
   21ff0:	str	r5, [r0, r6, lsl #2]
   21ff4:	bne	21fd4 <__assert_fail@plt+0x10334>
   21ff8:	b	22020 <__assert_fail@plt+0x10380>
   21ffc:	add	r5, r2, r1
   22000:	cmp	r1, #0
   22004:	str	r6, [r0, r5, lsl #2]
   22008:	sub	r6, r1, #1
   2200c:	mov	r1, r6
   22010:	bgt	21fd4 <__assert_fail@plt+0x10334>
   22014:	add	r1, r0, r7, lsl #2
   22018:	lsl	r2, r2, #2
   2201c:	bl	118e0 <memcpy@plt>
   22020:	mov	r0, r8
   22024:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22028:	str	r0, [r5, #4]
   2202c:	ldr	r0, [r5, #8]
   22030:	ldr	r2, [r9, #4]
   22034:	ldr	r1, [r9, #8]
   22038:	b	22018 <__assert_fail@plt+0x10378>
   2203c:	mov	r8, #12
   22040:	b	22020 <__assert_fail@plt+0x10380>
   22044:	push	{r4, r5, r6, sl, fp, lr}
   22048:	add	fp, sp, #16
   2204c:	mov	r5, r0
   22050:	ldr	r0, [r0]
   22054:	mov	r4, r1
   22058:	mov	r6, r2
   2205c:	ldr	r1, [r0, r1, lsl #3]!
   22060:	ldr	r2, [r0, #4]
   22064:	mov	r0, r5
   22068:	bl	217f0 <__assert_fail@plt+0xfb50>
   2206c:	cmn	r0, #1
   22070:	ldrne	r1, [r5]
   22074:	movwne	r3, #65280	; 0xff00
   22078:	movtne	r3, #3
   2207c:	addne	r1, r1, r0, lsl #3
   22080:	ldrne	r2, [r1, #4]
   22084:	bfine	r2, r6, #8, #10
   22088:	strne	r2, [r1, #4]
   2208c:	ldrne	r1, [r5]
   22090:	addne	r2, r1, r4, lsl #3
   22094:	addne	r1, r1, r0, lsl #3
   22098:	ldrne	r2, [r2, #4]
   2209c:	andne	r2, r2, r3
   220a0:	ldrne	r3, [r1, #4]
   220a4:	orrne	r2, r2, r3
   220a8:	strne	r2, [r1, #4]
   220ac:	ldrne	r1, [r5]
   220b0:	addne	r1, r1, r0, lsl #3
   220b4:	ldrne	r2, [r1, #4]
   220b8:	orrne	r2, r2, #262144	; 0x40000
   220bc:	strne	r2, [r1, #4]
   220c0:	ldrne	r1, [r5, #16]
   220c4:	strne	r4, [r1, r0, lsl #2]
   220c8:	pop	{r4, r5, r6, sl, fp, pc}
   220cc:	push	{r4, r5, r6, sl, fp, lr}
   220d0:	add	fp, sp, #16
   220d4:	ldr	r2, [r0]
   220d8:	mov	r5, r1
   220dc:	mov	r4, r0
   220e0:	cmp	r2, #0
   220e4:	beq	22110 <__assert_fail@plt+0x10470>
   220e8:	ldr	r1, [r4, #4]
   220ec:	cmp	r1, #0
   220f0:	bne	2213c <__assert_fail@plt+0x1049c>
   220f4:	ldr	r0, [r4, #8]
   220f8:	str	r5, [r0]
   220fc:	ldr	r0, [r4, #4]
   22100:	mov	r6, #1
   22104:	add	r0, r0, #1
   22108:	str	r0, [r4, #4]
   2210c:	b	22134 <__assert_fail@plt+0x10494>
   22110:	mov	r6, #1
   22114:	mov	r0, #4
   22118:	str	r6, [r4]
   2211c:	str	r6, [r4, #4]
   22120:	bl	1a224 <__assert_fail@plt+0x8584>
   22124:	cmp	r0, #0
   22128:	str	r0, [r4, #8]
   2212c:	beq	2216c <__assert_fail@plt+0x104cc>
   22130:	str	r5, [r0]
   22134:	mov	r0, r6
   22138:	pop	{r4, r5, r6, sl, fp, pc}
   2213c:	cmp	r2, r1
   22140:	bne	2217c <__assert_fail@plt+0x104dc>
   22144:	lsl	r0, r2, #1
   22148:	lsl	r1, r2, #3
   2214c:	str	r0, [r4]
   22150:	ldr	r0, [r4, #8]
   22154:	bl	1a2b4 <__assert_fail@plt+0x8614>
   22158:	cmp	r0, #0
   2215c:	beq	221f8 <__assert_fail@plt+0x10558>
   22160:	str	r0, [r4, #8]
   22164:	ldr	r1, [r4, #4]
   22168:	b	22180 <__assert_fail@plt+0x104e0>
   2216c:	mov	r6, #0
   22170:	str	r6, [r4]
   22174:	str	r6, [r4, #4]
   22178:	b	22134 <__assert_fail@plt+0x10494>
   2217c:	ldr	r0, [r4, #8]
   22180:	ldr	r2, [r0]
   22184:	cmp	r2, r5
   22188:	ble	221c0 <__assert_fail@plt+0x10520>
   2218c:	cmp	r1, #1
   22190:	blt	221f0 <__assert_fail@plt+0x10550>
   22194:	add	r2, r0, r1, lsl #2
   22198:	add	r1, r1, #1
   2219c:	mov	r3, r2
   221a0:	ldr	r6, [r3, #-4]!
   221a4:	sub	r1, r1, #1
   221a8:	cmp	r1, #1
   221ac:	str	r6, [r2]
   221b0:	mov	r2, r3
   221b4:	bgt	221a0 <__assert_fail@plt+0x10500>
   221b8:	sub	r1, r1, #1
   221bc:	b	221f0 <__assert_fail@plt+0x10550>
   221c0:	add	r2, r0, r1, lsl #2
   221c4:	ldr	r3, [r2, #-4]
   221c8:	cmp	r3, r5
   221cc:	ble	221f0 <__assert_fail@plt+0x10550>
   221d0:	sub	r1, r1, #2
   221d4:	str	r3, [r2]
   221d8:	sub	r1, r1, #1
   221dc:	ldr	r3, [r2, #-8]
   221e0:	sub	r2, r2, #4
   221e4:	cmp	r3, r5
   221e8:	bgt	221d4 <__assert_fail@plt+0x10534>
   221ec:	add	r1, r1, #2
   221f0:	str	r5, [r0, r1, lsl #2]
   221f4:	b	220fc <__assert_fail@plt+0x1045c>
   221f8:	mov	r6, #0
   221fc:	b	22134 <__assert_fail@plt+0x10494>
   22200:	push	{r4, r5, fp, lr}
   22204:	add	fp, sp, #8
   22208:	mov	r5, r0
   2220c:	mov	r4, r1
   22210:	ldr	r0, [r0]
   22214:	ldr	r1, [r5, #4]
   22218:	cmp	r0, r1
   2221c:	bne	22250 <__assert_fail@plt+0x105b0>
   22220:	mov	r1, #2
   22224:	add	r0, r1, r0, lsl #1
   22228:	str	r0, [r5]
   2222c:	lsl	r1, r0, #2
   22230:	ldr	r0, [r5, #8]
   22234:	bl	1a2b4 <__assert_fail@plt+0x8614>
   22238:	cmp	r0, #0
   2223c:	moveq	r0, #0
   22240:	popeq	{r4, r5, fp, pc}
   22244:	str	r0, [r5, #8]
   22248:	ldr	r1, [r5, #4]
   2224c:	b	22254 <__assert_fail@plt+0x105b4>
   22250:	ldr	r0, [r5, #8]
   22254:	add	r2, r1, #1
   22258:	str	r2, [r5, #4]
   2225c:	str	r4, [r0, r1, lsl #2]
   22260:	mov	r0, #1
   22264:	pop	{r4, r5, fp, pc}
   22268:	push	{r4, r5, fp, lr}
   2226c:	add	fp, sp, #8
   22270:	mov	r4, r0
   22274:	ldr	r0, [r1, #4]
   22278:	mov	r5, r1
   2227c:	str	r0, [r4, #4]
   22280:	ldr	r1, [r1, #4]
   22284:	cmp	r1, #1
   22288:	blt	222bc <__assert_fail@plt+0x1061c>
   2228c:	str	r0, [r4]
   22290:	lsl	r0, r0, #2
   22294:	bl	1a224 <__assert_fail@plt+0x8584>
   22298:	cmp	r0, #0
   2229c:	str	r0, [r4, #8]
   222a0:	beq	222d0 <__assert_fail@plt+0x10630>
   222a4:	ldr	r2, [r5, #4]
   222a8:	ldr	r1, [r5, #8]
   222ac:	lsl	r2, r2, #2
   222b0:	bl	118e0 <memcpy@plt>
   222b4:	mov	r0, #0
   222b8:	pop	{r4, r5, fp, pc}
   222bc:	mov	r0, #0
   222c0:	str	r0, [r4]
   222c4:	str	r0, [r4, #4]
   222c8:	str	r0, [r4, #8]
   222cc:	pop	{r4, r5, fp, pc}
   222d0:	mov	r0, #0
   222d4:	str	r0, [r4]
   222d8:	str	r0, [r4, #4]
   222dc:	mov	r0, #12
   222e0:	pop	{r4, r5, fp, pc}
   222e4:	ldr	r2, [r0, #4]
   222e8:	cmp	r2, #1
   222ec:	movlt	r0, #0
   222f0:	bxlt	lr
   222f4:	push	{r4, r5, r6, sl, fp, lr}
   222f8:	add	fp, sp, #16
   222fc:	ldr	ip, [r0, #8]
   22300:	subs	r2, r2, #1
   22304:	mov	r0, #0
   22308:	mov	r3, #0
   2230c:	beq	22338 <__assert_fail@plt+0x10698>
   22310:	mov	r3, #0
   22314:	mov	lr, #1
   22318:	add	r4, r2, r3
   2231c:	lsr	r5, r4, #1
   22320:	ldr	r6, [ip, r5, lsl #2]
   22324:	cmp	r6, r1
   22328:	movge	r2, r5
   2232c:	addlt	r3, lr, r4, lsr #1
   22330:	cmp	r3, r2
   22334:	bcc	22318 <__assert_fail@plt+0x10678>
   22338:	ldr	r2, [ip, r3, lsl #2]
   2233c:	cmp	r2, r1
   22340:	addeq	r0, r3, #1
   22344:	pop	{r4, r5, r6, sl, fp, pc}
   22348:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2234c:	add	fp, sp, #28
   22350:	sub	sp, sp, #20
   22354:	ldr	lr, [r2, #4]
   22358:	cmp	lr, #0
   2235c:	beq	22664 <__assert_fail@plt+0x109c4>
   22360:	mov	r8, r3
   22364:	mov	sl, r2
   22368:	add	r7, lr, r3
   2236c:	cmp	lr, #1
   22370:	str	r0, [sp, #4]
   22374:	blt	22390 <__assert_fail@plt+0x106f0>
   22378:	ldr	r3, [sl, #8]
   2237c:	mov	r2, lr
   22380:	ldr	r0, [r3], #4
   22384:	subs	r2, r2, #1
   22388:	add	r7, r0, r7
   2238c:	bne	22380 <__assert_fail@plt+0x106e0>
   22390:	ldr	r0, [r1, #32]
   22394:	str	r1, [sp, #12]
   22398:	ldr	r1, [r1, #68]	; 0x44
   2239c:	and	r1, r1, r7
   223a0:	add	r2, r1, r1, lsl #1
   223a4:	ldr	r1, [r0, r2, lsl #2]
   223a8:	cmp	r1, #1
   223ac:	blt	2243c <__assert_fail@plt+0x1079c>
   223b0:	add	r0, r0, r2, lsl #2
   223b4:	sub	ip, lr, #1
   223b8:	mov	r3, #0
   223bc:	ldr	r9, [r0, #8]
   223c0:	b	22400 <__assert_fail@plt+0x10760>
   223c4:	ldr	r0, [r5, #4]
   223c8:	cmp	r0, lr
   223cc:	bne	22430 <__assert_fail@plt+0x10790>
   223d0:	mov	r0, ip
   223d4:	add	r6, r0, #1
   223d8:	cmp	r6, #1
   223dc:	blt	2266c <__assert_fail@plt+0x109cc>
   223e0:	ldr	r6, [sl, #8]
   223e4:	ldr	r2, [r5, #8]
   223e8:	ldr	r6, [r6, r0, lsl #2]
   223ec:	ldr	r2, [r2, r0, lsl #2]
   223f0:	sub	r0, r0, #1
   223f4:	cmp	r2, r6
   223f8:	beq	223d4 <__assert_fail@plt+0x10734>
   223fc:	b	22430 <__assert_fail@plt+0x10790>
   22400:	ldr	r4, [r9, r3, lsl #2]
   22404:	ldr	r0, [r4]
   22408:	cmp	r0, r7
   2240c:	bne	22430 <__assert_fail@plt+0x10790>
   22410:	ldrb	r0, [r4, #52]	; 0x34
   22414:	and	r0, r0, #15
   22418:	cmp	r0, r8
   2241c:	bne	22430 <__assert_fail@plt+0x10790>
   22420:	cmp	sl, #0
   22424:	ldrne	r5, [r4, #40]	; 0x28
   22428:	cmpne	r5, #0
   2242c:	bne	223c4 <__assert_fail@plt+0x10724>
   22430:	add	r3, r3, #1
   22434:	cmp	r3, r1
   22438:	blt	22400 <__assert_fail@plt+0x10760>
   2243c:	mov	r0, #56	; 0x38
   22440:	mov	r1, #1
   22444:	bl	19ed0 <__assert_fail@plt+0x8230>
   22448:	cmp	r0, #0
   2244c:	beq	22650 <__assert_fail@plt+0x109b0>
   22450:	add	r5, r0, #4
   22454:	mov	r4, r0
   22458:	mov	r1, sl
   2245c:	mov	r0, r5
   22460:	bl	22268 <__assert_fail@plt+0x105c8>
   22464:	cmp	r0, #0
   22468:	bne	22678 <__assert_fail@plt+0x109d8>
   2246c:	str	r5, [r4, #40]	; 0x28
   22470:	and	r0, r8, #15
   22474:	ldr	r6, [sp, #12]
   22478:	ldrb	r1, [r4, #52]	; 0x34
   2247c:	and	r1, r1, #240	; 0xf0
   22480:	orr	r0, r1, r0
   22484:	strb	r0, [r4, #52]	; 0x34
   22488:	ldr	r0, [sl, #4]
   2248c:	cmp	r0, #1
   22490:	blt	22630 <__assert_fail@plt+0x10990>
   22494:	movw	r9, #65280	; 0xff00
   22498:	and	r0, r8, #4
   2249c:	mov	ip, r5
   224a0:	and	lr, r8, #1
   224a4:	str	r0, [sp]
   224a8:	and	r0, r8, #2
   224ac:	movt	r9, #3
   224b0:	mov	r8, #0
   224b4:	str	r0, [sp, #8]
   224b8:	add	r3, r9, #255	; 0xff
   224bc:	mov	r0, #0
   224c0:	str	r3, [sp, #16]
   224c4:	b	224fc <__assert_fail@plt+0x1085c>
   224c8:	sub	r2, r2, #1
   224cc:	cmp	r2, r1
   224d0:	str	r2, [r4, #8]
   224d4:	ble	22618 <__assert_fail@plt+0x10978>
   224d8:	ldr	r2, [r4, #12]
   224dc:	add	r3, r2, r1, lsl #2
   224e0:	ldr	r3, [r3, #4]
   224e4:	str	r3, [r2, r1, lsl #2]
   224e8:	add	r1, r1, #1
   224ec:	ldr	r3, [r4, #8]
   224f0:	cmp	r1, r3
   224f4:	blt	224dc <__assert_fail@plt+0x1083c>
   224f8:	b	22618 <__assert_fail@plt+0x10978>
   224fc:	ldr	r1, [sl, #8]
   22500:	ldr	r2, [r6]
   22504:	ldr	r1, [r1, r8, lsl #2]
   22508:	add	r1, r2, r1, lsl #3
   2250c:	ldr	r5, [r1, #4]
   22510:	and	r1, r5, r3
   22514:	cmp	r1, #1
   22518:	beq	22620 <__assert_fail@plt+0x10980>
   2251c:	ldrb	r3, [r4, #52]	; 0x34
   22520:	mov	r2, #32
   22524:	and	r1, r5, r9
   22528:	and	r2, r2, r5, lsr #15
   2252c:	orr	r2, r3, r2
   22530:	uxtb	r3, r5
   22534:	cmp	r3, #2
   22538:	strb	r2, [r4, #52]	; 0x34
   2253c:	beq	22550 <__assert_fail@plt+0x108b0>
   22540:	cmp	r3, #4
   22544:	bne	2255c <__assert_fail@plt+0x108bc>
   22548:	mov	r3, #64	; 0x40
   2254c:	b	22554 <__assert_fail@plt+0x108b4>
   22550:	mov	r3, #16
   22554:	orr	r2, r2, r3
   22558:	strb	r2, [r4, #52]	; 0x34
   2255c:	cmp	r1, #0
   22560:	beq	2261c <__assert_fail@plt+0x1097c>
   22564:	ldr	r1, [r4, #40]	; 0x28
   22568:	cmp	r1, ip
   2256c:	bne	225c0 <__assert_fail@plt+0x10920>
   22570:	mov	r0, #12
   22574:	mov	r6, lr
   22578:	mov	r9, ip
   2257c:	bl	1a224 <__assert_fail@plt+0x8584>
   22580:	cmp	r0, #0
   22584:	beq	22648 <__assert_fail@plt+0x109a8>
   22588:	mov	r1, sl
   2258c:	str	r0, [r4, #40]	; 0x28
   22590:	bl	22268 <__assert_fail@plt+0x105c8>
   22594:	cmp	r0, #0
   22598:	bne	22648 <__assert_fail@plt+0x109a8>
   2259c:	ldrb	r0, [r4, #52]	; 0x34
   225a0:	mov	lr, r6
   225a4:	ldr	r6, [sp, #12]
   225a8:	mov	ip, r9
   225ac:	movw	r9, #65280	; 0xff00
   225b0:	movt	r9, #3
   225b4:	orr	r0, r0, #128	; 0x80
   225b8:	strb	r0, [r4, #52]	; 0x34
   225bc:	mov	r0, #0
   225c0:	cmp	lr, #0
   225c4:	bne	225d0 <__assert_fail@plt+0x10930>
   225c8:	ands	r1, r5, #256	; 0x100
   225cc:	bne	22604 <__assert_fail@plt+0x10964>
   225d0:	cmp	lr, #0
   225d4:	andsne	r1, r5, #512	; 0x200
   225d8:	bne	22604 <__assert_fail@plt+0x10964>
   225dc:	ldr	r1, [sp, #8]
   225e0:	cmp	r1, #0
   225e4:	bne	225f0 <__assert_fail@plt+0x10950>
   225e8:	ands	r1, r5, #4096	; 0x1000
   225ec:	bne	22604 <__assert_fail@plt+0x10964>
   225f0:	ldr	r1, [sp]
   225f4:	cmp	r1, #0
   225f8:	bne	2261c <__assert_fail@plt+0x1097c>
   225fc:	ands	r1, r5, #16384	; 0x4000
   22600:	beq	2261c <__assert_fail@plt+0x1097c>
   22604:	sub	r1, r8, r0
   22608:	cmp	r1, #0
   2260c:	ldrge	r2, [r4, #8]
   22610:	cmpge	r2, r1
   22614:	bgt	224c8 <__assert_fail@plt+0x10828>
   22618:	add	r0, r0, #1
   2261c:	ldr	r3, [sp, #16]
   22620:	ldr	r1, [sl, #4]
   22624:	add	r8, r8, #1
   22628:	cmp	r8, r1
   2262c:	blt	224fc <__assert_fail@plt+0x1085c>
   22630:	mov	r0, r6
   22634:	mov	r1, r4
   22638:	mov	r2, r7
   2263c:	bl	22684 <__assert_fail@plt+0x109e4>
   22640:	cmp	r0, #0
   22644:	beq	2266c <__assert_fail@plt+0x109cc>
   22648:	mov	r0, r4
   2264c:	bl	1d7b4 <__assert_fail@plt+0xbb14>
   22650:	ldr	r1, [sp, #4]
   22654:	mov	r0, #12
   22658:	mov	r4, #0
   2265c:	str	r0, [r1]
   22660:	b	2266c <__assert_fail@plt+0x109cc>
   22664:	mov	r4, #0
   22668:	str	r4, [r0]
   2266c:	mov	r0, r4
   22670:	sub	sp, fp, #28
   22674:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22678:	mov	r0, r4
   2267c:	bl	1a158 <__assert_fail@plt+0x84b8>
   22680:	b	22650 <__assert_fail@plt+0x109b0>
   22684:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22688:	add	fp, sp, #24
   2268c:	str	r2, [r1]
   22690:	mov	r4, r1
   22694:	mov	r7, r0
   22698:	mov	r0, #0
   2269c:	mov	r9, r2
   226a0:	ldr	r1, [r1, #8]
   226a4:	str	r1, [r4, #16]
   226a8:	str	r0, [r4, #20]
   226ac:	lsl	r0, r1, #2
   226b0:	bl	1a224 <__assert_fail@plt+0x8584>
   226b4:	mov	r8, #12
   226b8:	cmp	r0, #0
   226bc:	str	r0, [r4, #24]
   226c0:	beq	22754 <__assert_fail@plt+0x10ab4>
   226c4:	ldr	r0, [r4, #8]
   226c8:	cmp	r0, #1
   226cc:	blt	22714 <__assert_fail@plt+0x10a74>
   226d0:	add	r5, r4, #16
   226d4:	mov	r6, #0
   226d8:	ldr	r1, [r4, #12]
   226dc:	ldr	r2, [r7]
   226e0:	ldr	r1, [r1, r6, lsl #2]
   226e4:	add	r2, r2, r1, lsl #3
   226e8:	ldrb	r2, [r2, #4]
   226ec:	tst	r2, #8
   226f0:	bne	22708 <__assert_fail@plt+0x10a68>
   226f4:	mov	r0, r5
   226f8:	bl	22200 <__assert_fail@plt+0x10560>
   226fc:	cmp	r0, #0
   22700:	beq	22754 <__assert_fail@plt+0x10ab4>
   22704:	ldr	r0, [r4, #8]
   22708:	add	r6, r6, #1
   2270c:	cmp	r6, r0
   22710:	blt	226d8 <__assert_fail@plt+0x10a38>
   22714:	ldr	r1, [r7, #68]	; 0x44
   22718:	ldr	r0, [r7, #32]
   2271c:	and	r1, r1, r9
   22720:	mov	r5, r0
   22724:	add	r2, r1, r1, lsl #1
   22728:	ldr	r1, [r5, r2, lsl #2]!
   2272c:	mov	r6, r5
   22730:	ldr	r3, [r6, #4]!
   22734:	cmp	r3, r1
   22738:	ble	2275c <__assert_fail@plt+0x10abc>
   2273c:	add	r0, r0, r2, lsl #2
   22740:	ldr	r0, [r0, #8]
   22744:	add	r2, r1, #1
   22748:	mov	r8, #0
   2274c:	str	r2, [r5]
   22750:	str	r4, [r0, r1, lsl #2]
   22754:	mov	r0, r8
   22758:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2275c:	add	r7, r0, r2, lsl #2
   22760:	mov	r2, #2
   22764:	ldr	r0, [r7, #8]!
   22768:	add	r9, r2, r1, lsl #1
   2276c:	lsl	r1, r9, #2
   22770:	bl	1a2b4 <__assert_fail@plt+0x8614>
   22774:	cmp	r0, #0
   22778:	beq	22754 <__assert_fail@plt+0x10ab4>
   2277c:	str	r0, [r7]
   22780:	str	r9, [r6]
   22784:	ldr	r1, [r5]
   22788:	b	22744 <__assert_fail@plt+0x10aa4>
   2278c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22790:	add	fp, sp, #28
   22794:	sub	sp, sp, #36	; 0x24
   22798:	mov	r4, r0
   2279c:	ldr	r0, [r0, #24]
   227a0:	mov	r6, r2
   227a4:	mov	r9, r1
   227a8:	cmp	r0, r1
   227ac:	ble	22910 <__assert_fail@plt+0x10c70>
   227b0:	ldr	r0, [r4, #80]	; 0x50
   227b4:	mov	r1, #4
   227b8:	mov	r5, r9
   227bc:	cmp	r0, #2
   227c0:	movge	r0, #0
   227c4:	strge	r0, [r4, #16]
   227c8:	strge	r0, [r4, #20]
   227cc:	mov	r0, #0
   227d0:	tst	r6, #1
   227d4:	str	r0, [r4, #24]
   227d8:	str	r0, [r4, #28]
   227dc:	str	r0, [r4, #32]
   227e0:	strb	r0, [r4, #76]	; 0x4c
   227e4:	movweq	r1, #6
   227e8:	ldr	r2, [r4, #44]	; 0x2c
   227ec:	ldr	r3, [r4, #52]	; 0x34
   227f0:	str	r2, [r4, #48]	; 0x30
   227f4:	str	r3, [r4, #56]	; 0x38
   227f8:	str	r1, [r4, #60]	; 0x3c
   227fc:	ldrb	r1, [r4, #75]	; 0x4b
   22800:	cmp	r1, #0
   22804:	ldreq	r1, [r4]
   22808:	streq	r1, [r4, #4]
   2280c:	cmp	r5, #0
   22810:	beq	2289c <__assert_fail@plt+0x10bfc>
   22814:	ldr	r1, [r4, #32]
   22818:	cmp	r5, r1
   2281c:	bge	22918 <__assert_fail@plt+0x10c78>
   22820:	ldrb	r0, [r4, #76]	; 0x4c
   22824:	cmp	r0, #0
   22828:	bne	22a18 <__assert_fail@plt+0x10d78>
   2282c:	sub	r1, r5, #1
   22830:	mov	r0, r4
   22834:	mov	r2, r6
   22838:	bl	22fb8 <__assert_fail@plt+0x11318>
   2283c:	str	r0, [r4, #60]	; 0x3c
   22840:	ldr	r0, [r4, #80]	; 0x50
   22844:	cmp	r0, #2
   22848:	blt	22864 <__assert_fail@plt+0x10bc4>
   2284c:	ldr	r2, [r4, #28]
   22850:	ldr	r0, [r4, #8]
   22854:	sub	r2, r2, r5
   22858:	add	r1, r0, r5, lsl #2
   2285c:	lsl	r2, r2, #2
   22860:	bl	11898 <memmove@plt>
   22864:	ldrb	r0, [r4, #75]	; 0x4b
   22868:	cmp	r0, #0
   2286c:	bne	22b0c <__assert_fail@plt+0x10e6c>
   22870:	ldr	r0, [r4, #28]
   22874:	ldr	r1, [r4, #32]
   22878:	sub	r0, r0, r5
   2287c:	sub	r1, r1, r5
   22880:	str	r0, [r4, #28]
   22884:	str	r1, [r4, #32]
   22888:	ldrb	r0, [r4, #75]	; 0x4b
   2288c:	cmp	r0, #0
   22890:	ldreq	r0, [r4, #4]
   22894:	addeq	r0, r0, r5
   22898:	streq	r0, [r4, #4]
   2289c:	str	r9, [r4, #24]
   228a0:	ldr	r0, [r4, #48]	; 0x30
   228a4:	ldr	r1, [r4, #56]	; 0x38
   228a8:	ldr	r2, [r4, #80]	; 0x50
   228ac:	sub	r0, r0, r5
   228b0:	cmp	r2, #2
   228b4:	sub	r1, r1, r5
   228b8:	str	r0, [r4, #48]	; 0x30
   228bc:	str	r1, [r4, #56]	; 0x38
   228c0:	blt	228e4 <__assert_fail@plt+0x10c44>
   228c4:	ldrb	r0, [r4, #72]	; 0x48
   228c8:	cmp	r0, #0
   228cc:	beq	228f8 <__assert_fail@plt+0x10c58>
   228d0:	mov	r0, r4
   228d4:	bl	1d970 <__assert_fail@plt+0xbcd0>
   228d8:	cmp	r0, #0
   228dc:	bne	22908 <__assert_fail@plt+0x10c68>
   228e0:	b	22900 <__assert_fail@plt+0x10c60>
   228e4:	ldrb	r1, [r4, #75]	; 0x4b
   228e8:	cmp	r1, #0
   228ec:	bne	22b24 <__assert_fail@plt+0x10e84>
   228f0:	str	r0, [r4, #28]
   228f4:	b	22900 <__assert_fail@plt+0x10c60>
   228f8:	mov	r0, r4
   228fc:	bl	1df4c <__assert_fail@plt+0xc2ac>
   22900:	mov	r0, #0
   22904:	str	r0, [r4, #40]	; 0x28
   22908:	sub	sp, fp, #28
   2290c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22910:	sub	r5, r9, r0
   22914:	b	2280c <__assert_fail@plt+0x10b6c>
   22918:	ldrb	r2, [r4, #76]	; 0x4c
   2291c:	ldr	lr, [r4, #28]
   22920:	cmp	r2, #0
   22924:	bne	22d64 <__assert_fail@plt+0x110c4>
   22928:	mov	r2, #0
   2292c:	str	r2, [r4, #28]
   22930:	ldr	r3, [r4, #80]	; 0x50
   22934:	cmp	r3, #2
   22938:	blt	22b3c <__assert_fail@plt+0x10e9c>
   2293c:	ldrb	r2, [r4, #73]	; 0x49
   22940:	cmp	r2, #0
   22944:	beq	22a00 <__assert_fail@plt+0x10d60>
   22948:	ldr	r7, [r4]
   2294c:	sub	r3, r5, r3
   22950:	add	ip, r7, r0
   22954:	add	r3, ip, r3
   22958:	add	r8, ip, r5
   2295c:	cmp	r3, r7
   22960:	movcc	r3, r7
   22964:	mov	r7, r8
   22968:	sub	r7, r7, #1
   2296c:	cmp	r7, r3
   22970:	bcc	22a00 <__assert_fail@plt+0x10d60>
   22974:	ldrb	r2, [r7]
   22978:	and	r2, r2, #192	; 0xc0
   2297c:	cmp	r2, #128	; 0x80
   22980:	beq	22968 <__assert_fail@plt+0x10cc8>
   22984:	ldr	r0, [r4, #48]	; 0x30
   22988:	mov	sl, lr
   2298c:	mov	r1, r7
   22990:	add	r3, ip, r0
   22994:	ldr	r0, [r4, #64]	; 0x40
   22998:	sub	r2, r3, r7
   2299c:	cmp	r0, #0
   229a0:	bne	22e00 <__assert_fail@plt+0x11160>
   229a4:	mov	r0, #0
   229a8:	add	r3, sp, #24
   229ac:	str	r0, [sp, #28]
   229b0:	str	r0, [sp, #24]
   229b4:	add	r0, sp, #20
   229b8:	bl	1a254 <__assert_fail@plt+0x85b4>
   229bc:	sub	r1, r8, r7
   229c0:	mvn	r2, #0
   229c4:	cmp	r0, r1
   229c8:	bcc	229ec <__assert_fail@plt+0x10d4c>
   229cc:	cmn	r0, #3
   229d0:	bhi	229ec <__assert_fail@plt+0x10d4c>
   229d4:	mov	r2, #0
   229d8:	sub	r0, r0, r1
   229dc:	str	r2, [r4, #16]
   229e0:	str	r2, [r4, #20]
   229e4:	str	r0, [r4, #28]
   229e8:	ldr	r2, [sp, #20]
   229ec:	cmn	r2, #1
   229f0:	bne	22d0c <__assert_fail@plt+0x1106c>
   229f4:	ldr	r0, [r4, #24]
   229f8:	ldr	r1, [r4, #32]
   229fc:	mov	lr, sl
   22a00:	add	r8, r1, r0
   22a04:	cmp	r8, r9
   22a08:	bge	22be4 <__assert_fail@plt+0x10f44>
   22a0c:	add	sl, r4, #16
   22a10:	str	lr, [sp]
   22a14:	b	22cac <__assert_fail@plt+0x1100c>
   22a18:	ldr	r8, [r4, #28]
   22a1c:	ldr	sl, [r4, #12]
   22a20:	mov	r0, #0
   22a24:	mov	r1, r8
   22a28:	add	r2, r0, r1
   22a2c:	add	r2, r2, r2, lsr #31
   22a30:	asr	r7, r2, #1
   22a34:	ldr	r2, [sl, r7, lsl #2]
   22a38:	mov	r3, r7
   22a3c:	cmp	r2, r5
   22a40:	bgt	22a50 <__assert_fail@plt+0x10db0>
   22a44:	bge	22a5c <__assert_fail@plt+0x10dbc>
   22a48:	add	r0, r7, #1
   22a4c:	mov	r3, r1
   22a50:	cmp	r0, r3
   22a54:	mov	r1, r3
   22a58:	blt	22a28 <__assert_fail@plt+0x10d88>
   22a5c:	cmp	r2, r5
   22a60:	mov	r0, r4
   22a64:	mov	r2, r6
   22a68:	addlt	r7, r7, #1
   22a6c:	sub	r1, r7, #1
   22a70:	bl	22fb8 <__assert_fail@plt+0x11318>
   22a74:	cmp	r8, r5
   22a78:	str	r0, [r4, #60]	; 0x3c
   22a7c:	ble	22a90 <__assert_fail@plt+0x10df0>
   22a80:	cmp	r7, r5
   22a84:	ldreq	r0, [sl, r5, lsl #2]
   22a88:	cmpeq	r0, r5
   22a8c:	beq	22c08 <__assert_fail@plt+0x10f68>
   22a90:	mov	r0, #0
   22a94:	strb	r0, [r4, #76]	; 0x4c
   22a98:	sub	r0, r5, r9
   22a9c:	ldr	r1, [r4, #44]	; 0x2c
   22aa0:	ldr	r2, [r4, #52]	; 0x34
   22aa4:	add	r1, r0, r1
   22aa8:	add	r0, r0, r2
   22aac:	str	r1, [r4, #48]	; 0x30
   22ab0:	sub	r1, sl, #4
   22ab4:	str	r0, [r4, #56]	; 0x38
   22ab8:	mov	r0, r7
   22abc:	cmp	r7, #1
   22ac0:	blt	22ad4 <__assert_fail@plt+0x10e34>
   22ac4:	ldr	r2, [r1, r0, lsl #2]
   22ac8:	sub	r7, r0, #1
   22acc:	cmp	r2, r5
   22ad0:	beq	22ab8 <__assert_fail@plt+0x10e18>
   22ad4:	cmp	r0, r8
   22ad8:	bge	22af8 <__assert_fail@plt+0x10e58>
   22adc:	ldr	r1, [r4, #8]
   22ae0:	ldr	r2, [r1, r0, lsl #2]
   22ae4:	cmn	r2, #1
   22ae8:	bne	22af8 <__assert_fail@plt+0x10e58>
   22aec:	add	r0, r0, #1
   22af0:	cmp	r0, r8
   22af4:	blt	22ae0 <__assert_fail@plt+0x10e40>
   22af8:	cmp	r0, r8
   22afc:	bne	22b98 <__assert_fail@plt+0x10ef8>
   22b00:	mov	r0, #0
   22b04:	str	r0, [r4, #28]
   22b08:	b	22d5c <__assert_fail@plt+0x110bc>
   22b0c:	ldr	r2, [r4, #28]
   22b10:	ldr	r0, [r4, #4]
   22b14:	add	r1, r0, r5
   22b18:	sub	r2, r2, r5
   22b1c:	bl	11898 <memmove@plt>
   22b20:	b	22870 <__assert_fail@plt+0x10bd0>
   22b24:	ldrb	r0, [r4, #72]	; 0x48
   22b28:	cmp	r0, #0
   22b2c:	beq	22bf0 <__assert_fail@plt+0x10f50>
   22b30:	mov	r0, r4
   22b34:	bl	1dee0 <__assert_fail@plt+0xc240>
   22b38:	b	22900 <__assert_fail@plt+0x10c60>
   22b3c:	ldr	r3, [r4]
   22b40:	add	r0, r5, r0
   22b44:	ldr	r1, [r4, #64]	; 0x40
   22b48:	add	r0, r3, r0
   22b4c:	cmp	r1, #0
   22b50:	ldrb	r0, [r0, #-1]
   22b54:	str	r2, [r4, #32]
   22b58:	ldrbne	r0, [r1, r0]
   22b5c:	ldr	r1, [r4, #68]	; 0x44
   22b60:	ubfx	r2, r0, #5, #3
   22b64:	and	r3, r0, #31
   22b68:	ldr	r2, [r1, r2, lsl #2]
   22b6c:	mov	r1, #1
   22b70:	tst	r2, r1, lsl r3
   22b74:	bne	22b90 <__assert_fail@plt+0x10ef0>
   22b78:	mov	r1, #0
   22b7c:	cmp	r0, #10
   22b80:	bne	22b90 <__assert_fail@plt+0x10ef0>
   22b84:	ldrb	r1, [r4, #77]	; 0x4d
   22b88:	cmp	r1, #0
   22b8c:	movwne	r1, #2
   22b90:	str	r1, [r4, #60]	; 0x3c
   22b94:	b	22888 <__assert_fail@plt+0x10be8>
   22b98:	ldr	r0, [sl, r0, lsl #2]
   22b9c:	subs	r2, r0, r5
   22ba0:	str	r2, [r4, #28]
   22ba4:	beq	22c7c <__assert_fail@plt+0x10fdc>
   22ba8:	cmp	r2, #1
   22bac:	blt	22bd0 <__assert_fail@plt+0x10f30>
   22bb0:	ldr	r0, [r4, #8]
   22bb4:	mov	r1, #0
   22bb8:	mvn	r3, #0
   22bbc:	str	r3, [r0, r1, lsl #2]
   22bc0:	add	r1, r1, #1
   22bc4:	ldr	r2, [r4, #28]
   22bc8:	cmp	r1, r2
   22bcc:	blt	22bbc <__assert_fail@plt+0x10f1c>
   22bd0:	ldr	r0, [r4, #4]
   22bd4:	mov	r1, #255	; 0xff
   22bd8:	bl	11b08 <memset@plt>
   22bdc:	ldr	r0, [r4, #28]
   22be0:	b	22d5c <__assert_fail@plt+0x110bc>
   22be4:	sub	r7, r8, r9
   22be8:	str	r7, [r4, #28]
   22bec:	b	22d3c <__assert_fail@plt+0x1109c>
   22bf0:	ldr	r0, [r4, #64]	; 0x40
   22bf4:	cmp	r0, #0
   22bf8:	beq	22900 <__assert_fail@plt+0x10c60>
   22bfc:	mov	r0, r4
   22c00:	bl	1e128 <__assert_fail@plt+0xc488>
   22c04:	b	22900 <__assert_fail@plt+0x10c60>
   22c08:	ldr	r0, [r4, #8]
   22c0c:	sub	r2, r8, r5
   22c10:	lsl	r2, r2, #2
   22c14:	add	r1, r0, r5, lsl #2
   22c18:	bl	11898 <memmove@plt>
   22c1c:	ldr	r2, [r4, #28]
   22c20:	ldr	r0, [r4, #4]
   22c24:	add	r1, r0, r5
   22c28:	sub	r2, r2, r5
   22c2c:	bl	11898 <memmove@plt>
   22c30:	ldr	r0, [r4, #28]
   22c34:	ldr	r1, [r4, #32]
   22c38:	sub	r0, r0, r5
   22c3c:	sub	r1, r1, r5
   22c40:	cmp	r0, #1
   22c44:	str	r0, [r4, #28]
   22c48:	str	r1, [r4, #32]
   22c4c:	blt	22888 <__assert_fail@plt+0x10be8>
   22c50:	ldr	r0, [r4, #12]
   22c54:	mov	r2, #0
   22c58:	add	r1, r0, r5, lsl #2
   22c5c:	ldr	r3, [r1, r2, lsl #2]
   22c60:	sub	r3, r3, r5
   22c64:	str	r3, [r0, r2, lsl #2]
   22c68:	add	r2, r2, #1
   22c6c:	ldr	r3, [r4, #28]
   22c70:	cmp	r2, r3
   22c74:	blt	22c5c <__assert_fail@plt+0x10fbc>
   22c78:	b	22888 <__assert_fail@plt+0x10be8>
   22c7c:	mov	r0, #0
   22c80:	b	22d5c <__assert_fail@plt+0x110bc>
   22c84:	cmp	r7, #0
   22c88:	ldr	r3, [sp, #4]
   22c8c:	ldr	r1, [sp, #8]
   22c90:	mov	r2, #0
   22c94:	cmpne	r0, #0
   22c98:	ldrne	r0, [r4]
   22c9c:	ldrbne	r2, [r0, r8]
   22ca0:	stm	sl, {r1, r3}
   22ca4:	mov	r0, #1
   22ca8:	b	22cec <__assert_fail@plt+0x1104c>
   22cac:	ldr	r0, [r4]
   22cb0:	ldr	r2, [r4, #44]	; 0x2c
   22cb4:	mov	r3, sl
   22cb8:	add	r1, r0, r8
   22cbc:	ldr	r0, [sl]
   22cc0:	sub	r7, r2, r8
   22cc4:	mov	r2, r7
   22cc8:	str	r0, [sp, #8]
   22ccc:	ldr	r0, [sl, #4]
   22cd0:	str	r0, [sp, #4]
   22cd4:	add	r0, sp, #24
   22cd8:	bl	1a254 <__assert_fail@plt+0x85b4>
   22cdc:	sub	r1, r0, #1
   22ce0:	cmn	r1, #3
   22ce4:	bcs	22c84 <__assert_fail@plt+0x10fe4>
   22ce8:	ldr	r2, [sp, #24]
   22cec:	add	r8, r0, r8
   22cf0:	cmp	r8, r9
   22cf4:	blt	22cac <__assert_fail@plt+0x1100c>
   22cf8:	ldr	lr, [sp]
   22cfc:	sub	r7, r8, r9
   22d00:	cmn	r2, #1
   22d04:	str	r7, [r4, #28]
   22d08:	beq	22d3c <__assert_fail@plt+0x1109c>
   22d0c:	ldrb	r0, [r4, #78]	; 0x4e
   22d10:	cmp	r0, #0
   22d14:	bne	22dd0 <__assert_fail@plt+0x11130>
   22d18:	mov	r1, #0
   22d1c:	cmp	r2, #10
   22d20:	bne	22d30 <__assert_fail@plt+0x11090>
   22d24:	ldrb	r1, [r4, #77]	; 0x4d
   22d28:	cmp	r1, #0
   22d2c:	movwne	r1, #2
   22d30:	str	r1, [r4, #60]	; 0x3c
   22d34:	ldr	r7, [r4, #28]
   22d38:	b	22d50 <__assert_fail@plt+0x110b0>
   22d3c:	sub	r1, lr, #1
   22d40:	mov	r0, r4
   22d44:	mov	r2, r6
   22d48:	bl	22fb8 <__assert_fail@plt+0x11318>
   22d4c:	str	r0, [r4, #60]	; 0x3c
   22d50:	mov	r0, #0
   22d54:	cmp	r7, #0
   22d58:	bne	22d8c <__assert_fail@plt+0x110ec>
   22d5c:	str	r0, [r4, #32]
   22d60:	b	22888 <__assert_fail@plt+0x10be8>
   22d64:	mov	r2, #0
   22d68:	strb	r2, [r4, #76]	; 0x4c
   22d6c:	sub	r2, r5, r9
   22d70:	ldr	r3, [r4, #44]	; 0x2c
   22d74:	ldr	r7, [r4, #52]	; 0x34
   22d78:	add	r3, r2, r3
   22d7c:	add	r2, r2, r7
   22d80:	str	r3, [r4, #48]	; 0x30
   22d84:	str	r2, [r4, #56]	; 0x38
   22d88:	b	22928 <__assert_fail@plt+0x10c88>
   22d8c:	cmp	r7, #1
   22d90:	blt	22db4 <__assert_fail@plt+0x11114>
   22d94:	ldr	r0, [r4, #8]
   22d98:	mov	r1, #0
   22d9c:	mvn	r2, #0
   22da0:	str	r2, [r0, r1, lsl #2]
   22da4:	add	r1, r1, #1
   22da8:	ldr	r7, [r4, #28]
   22dac:	cmp	r1, r7
   22db0:	blt	22da0 <__assert_fail@plt+0x11100>
   22db4:	ldrb	r0, [r4, #75]	; 0x4b
   22db8:	cmp	r0, #0
   22dbc:	beq	22df8 <__assert_fail@plt+0x11158>
   22dc0:	ldr	r0, [r4, #4]
   22dc4:	mov	r1, #255	; 0xff
   22dc8:	mov	r2, r7
   22dcc:	b	22bd8 <__assert_fail@plt+0x10f38>
   22dd0:	mov	r0, r2
   22dd4:	mov	r6, r2
   22dd8:	bl	11ad8 <iswalnum@plt>
   22ddc:	mov	r1, #1
   22de0:	cmp	r6, #95	; 0x5f
   22de4:	beq	22d30 <__assert_fail@plt+0x11090>
   22de8:	mov	r2, r6
   22dec:	cmp	r0, #0
   22df0:	beq	22d18 <__assert_fail@plt+0x11078>
   22df4:	b	22d30 <__assert_fail@plt+0x11090>
   22df8:	mov	r0, r7
   22dfc:	b	22d5c <__assert_fail@plt+0x110bc>
   22e00:	cmp	r2, #1
   22e04:	blt	22e48 <__assert_fail@plt+0x111a8>
   22e08:	sub	r1, r7, #1
   22e0c:	sub	r1, r1, r3
   22e10:	mvn	r3, #1
   22e14:	cmn	r1, #7
   22e18:	mvnle	r1, #6
   22e1c:	sub	ip, r3, r1
   22e20:	add	r1, sp, #14
   22e24:	ldrb	r3, [r7, ip]
   22e28:	sub	lr, ip, #1
   22e2c:	ldrb	r3, [r0, r3]
   22e30:	strb	r3, [r1, ip]
   22e34:	add	r3, ip, #1
   22e38:	mov	ip, lr
   22e3c:	cmp	r3, #1
   22e40:	bgt	22e24 <__assert_fail@plt+0x11184>
   22e44:	b	229a4 <__assert_fail@plt+0x10d04>
   22e48:	add	r1, sp, #14
   22e4c:	b	229a4 <__assert_fail@plt+0x10d04>
   22e50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22e54:	add	fp, sp, #24
   22e58:	mov	r3, r2
   22e5c:	ldr	r2, [r0, #88]	; 0x58
   22e60:	mov	r5, r1
   22e64:	mov	r4, r0
   22e68:	mov	r1, r3
   22e6c:	bl	22fb8 <__assert_fail@plt+0x11318>
   22e70:	ldr	r1, [r5, #8]
   22e74:	cmp	r1, #1
   22e78:	blt	22f08 <__assert_fail@plt+0x11268>
   22e7c:	and	ip, r0, #8
   22e80:	and	lr, r0, #2
   22e84:	and	r2, r0, #1
   22e88:	ldr	r0, [r4, #84]	; 0x54
   22e8c:	ldr	r5, [r5, #12]
   22e90:	movw	r8, #65280	; 0xff00
   22e94:	mov	r3, #0
   22e98:	movt	r8, #3
   22e9c:	ldr	r4, [r0]
   22ea0:	ldr	r0, [r5, r3, lsl #2]
   22ea4:	add	r7, r4, r0, lsl #3
   22ea8:	ldr	r7, [r7, #4]
   22eac:	uxtb	r6, r7
   22eb0:	cmp	r6, #2
   22eb4:	bne	22efc <__assert_fail@plt+0x1125c>
   22eb8:	tst	r7, r8
   22ebc:	beq	22f0c <__assert_fail@plt+0x1126c>
   22ec0:	cmp	r2, #0
   22ec4:	bne	22ed0 <__assert_fail@plt+0x11230>
   22ec8:	ands	r6, r7, #1024	; 0x400
   22ecc:	bne	22efc <__assert_fail@plt+0x1125c>
   22ed0:	cmp	r2, #0
   22ed4:	andsne	r6, r7, #2048	; 0x800
   22ed8:	bne	22efc <__assert_fail@plt+0x1125c>
   22edc:	cmp	lr, #0
   22ee0:	bne	22eec <__assert_fail@plt+0x1124c>
   22ee4:	ands	r6, r7, #8192	; 0x2000
   22ee8:	bne	22efc <__assert_fail@plt+0x1125c>
   22eec:	cmp	ip, #0
   22ef0:	bne	22f0c <__assert_fail@plt+0x1126c>
   22ef4:	ands	r6, r7, #32768	; 0x8000
   22ef8:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   22efc:	add	r3, r3, #1
   22f00:	cmp	r3, r1
   22f04:	blt	22ea0 <__assert_fail@plt+0x11200>
   22f08:	mov	r0, #0
   22f0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22f10:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22f14:	add	fp, sp, #24
   22f18:	mov	r8, r0
   22f1c:	ldr	r0, [r0, #124]	; 0x7c
   22f20:	cmp	r0, #1
   22f24:	blt	22fa8 <__assert_fail@plt+0x11308>
   22f28:	mov	r7, #0
   22f2c:	ldr	r0, [r8, #132]	; 0x84
   22f30:	ldr	r5, [r0, r7, lsl #2]
   22f34:	ldr	r0, [r5, #16]
   22f38:	cmp	r0, #1
   22f3c:	blt	22f6c <__assert_fail@plt+0x112cc>
   22f40:	mov	r4, #0
   22f44:	ldr	r0, [r5, #20]
   22f48:	ldr	r6, [r0, r4, lsl #2]
   22f4c:	ldr	r0, [r6, #16]
   22f50:	bl	1a158 <__assert_fail@plt+0x84b8>
   22f54:	mov	r0, r6
   22f58:	bl	1a158 <__assert_fail@plt+0x84b8>
   22f5c:	ldr	r0, [r5, #16]
   22f60:	add	r4, r4, #1
   22f64:	cmp	r4, r0
   22f68:	blt	22f44 <__assert_fail@plt+0x112a4>
   22f6c:	ldr	r0, [r5, #20]
   22f70:	bl	1a158 <__assert_fail@plt+0x84b8>
   22f74:	ldr	r0, [r5, #8]
   22f78:	cmp	r0, #0
   22f7c:	beq	22f90 <__assert_fail@plt+0x112f0>
   22f80:	ldr	r0, [r0, #8]
   22f84:	bl	1a158 <__assert_fail@plt+0x84b8>
   22f88:	ldr	r0, [r5, #8]
   22f8c:	bl	1a158 <__assert_fail@plt+0x84b8>
   22f90:	mov	r0, r5
   22f94:	bl	1a158 <__assert_fail@plt+0x84b8>
   22f98:	ldr	r0, [r8, #124]	; 0x7c
   22f9c:	add	r7, r7, #1
   22fa0:	cmp	r7, r0
   22fa4:	blt	22f2c <__assert_fail@plt+0x1128c>
   22fa8:	mov	r0, #0
   22fac:	str	r0, [r8, #108]	; 0x6c
   22fb0:	str	r0, [r8, #124]	; 0x7c
   22fb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22fb8:	push	{r4, r5, fp, lr}
   22fbc:	add	fp, sp, #8
   22fc0:	mov	r4, r0
   22fc4:	cmn	r1, #1
   22fc8:	ble	23004 <__assert_fail@plt+0x11364>
   22fcc:	ldr	r0, [r4, #48]	; 0x30
   22fd0:	cmp	r0, r1
   22fd4:	beq	23068 <__assert_fail@plt+0x113c8>
   22fd8:	ldr	r0, [r4, #80]	; 0x50
   22fdc:	cmp	r0, #2
   22fe0:	blt	2300c <__assert_fail@plt+0x1136c>
   22fe4:	ldr	r0, [r4, #8]
   22fe8:	ldr	r5, [r0, r1, lsl #2]
   22fec:	cmn	r5, #1
   22ff0:	bne	23040 <__assert_fail@plt+0x113a0>
   22ff4:	sub	r2, r1, #1
   22ff8:	cmp	r1, #0
   22ffc:	mov	r1, r2
   23000:	bgt	22fe8 <__assert_fail@plt+0x11348>
   23004:	ldr	r0, [r4, #60]	; 0x3c
   23008:	pop	{r4, r5, fp, pc}
   2300c:	ldr	r0, [r4, #4]
   23010:	ldr	r2, [r4, #68]	; 0x44
   23014:	ldrb	r1, [r0, r1]
   23018:	ubfx	r0, r1, #5, #3
   2301c:	and	r3, r1, #31
   23020:	ldr	r2, [r2, r0, lsl #2]
   23024:	mov	r0, #1
   23028:	tst	r2, r0, lsl r3
   2302c:	bne	23064 <__assert_fail@plt+0x113c4>
   23030:	mov	r0, #0
   23034:	cmp	r1, #10
   23038:	popne	{r4, r5, fp, pc}
   2303c:	b	23058 <__assert_fail@plt+0x113b8>
   23040:	ldrb	r0, [r4, #78]	; 0x4e
   23044:	cmp	r0, #0
   23048:	bne	23074 <__assert_fail@plt+0x113d4>
   2304c:	mov	r0, #0
   23050:	cmp	r5, #10
   23054:	bne	23064 <__assert_fail@plt+0x113c4>
   23058:	ldrb	r0, [r4, #77]	; 0x4d
   2305c:	cmp	r0, #0
   23060:	movwne	r0, #2
   23064:	pop	{r4, r5, fp, pc}
   23068:	and	r0, r2, #2
   2306c:	eor	r0, r0, #10
   23070:	pop	{r4, r5, fp, pc}
   23074:	mov	r0, r5
   23078:	bl	11ad8 <iswalnum@plt>
   2307c:	mov	r1, r0
   23080:	mov	r0, #1
   23084:	cmp	r5, #95	; 0x5f
   23088:	beq	23064 <__assert_fail@plt+0x113c4>
   2308c:	cmp	r1, #0
   23090:	beq	2304c <__assert_fail@plt+0x113ac>
   23094:	b	23064 <__assert_fail@plt+0x113c4>
   23098:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2309c:	add	fp, sp, #28
   230a0:	sub	sp, sp, #4
   230a4:	mov	sl, r0
   230a8:	ldr	r0, [r1, #4]
   230ac:	cmp	r0, #1
   230b0:	blt	2317c <__assert_fail@plt+0x114dc>
   230b4:	ldr	r7, [sl, #84]	; 0x54
   230b8:	mov	r8, r2
   230bc:	mov	r5, r1
   230c0:	mov	r4, #0
   230c4:	b	230ec <__assert_fail@plt+0x1144c>
   230c8:	ldr	r0, [sl, #132]	; 0x84
   230cc:	lsl	r1, r9, #3
   230d0:	bl	1a2b4 <__assert_fail@plt+0x8614>
   230d4:	cmp	r0, #0
   230d8:	beq	23188 <__assert_fail@plt+0x114e8>
   230dc:	lsl	r1, r9, #1
   230e0:	str	r1, [sl, #128]	; 0x80
   230e4:	str	r0, [sl, #132]	; 0x84
   230e8:	b	23134 <__assert_fail@plt+0x11494>
   230ec:	ldr	r1, [r5, #8]
   230f0:	ldr	r6, [r1, r4, lsl #2]
   230f4:	ldr	r1, [r7]
   230f8:	add	r2, r1, r6, lsl #3
   230fc:	ldrb	r2, [r2, #4]
   23100:	cmp	r2, #8
   23104:	bne	23170 <__assert_fail@plt+0x114d0>
   23108:	ldr	r1, [r1, r6, lsl #3]
   2310c:	cmp	r1, #31
   23110:	bgt	23170 <__assert_fail@plt+0x114d0>
   23114:	ldr	r2, [r7, #80]	; 0x50
   23118:	mov	r3, #1
   2311c:	tst	r2, r3, lsl r1
   23120:	beq	23170 <__assert_fail@plt+0x114d0>
   23124:	ldr	r9, [sl, #124]	; 0x7c
   23128:	ldr	r0, [sl, #128]	; 0x80
   2312c:	cmp	r9, r0
   23130:	beq	230c8 <__assert_fail@plt+0x11428>
   23134:	mov	r0, #1
   23138:	mov	r1, #24
   2313c:	bl	19ed0 <__assert_fail@plt+0x8230>
   23140:	ldr	r1, [sl, #124]	; 0x7c
   23144:	ldr	r2, [sl, #132]	; 0x84
   23148:	str	r0, [r2, r1, lsl #2]
   2314c:	ldr	r0, [sl, #132]	; 0x84
   23150:	ldr	r0, [r0, r1, lsl #2]
   23154:	cmp	r0, #0
   23158:	beq	23188 <__assert_fail@plt+0x114e8>
   2315c:	add	r1, r1, #1
   23160:	str	r6, [r0, #4]
   23164:	str	r1, [sl, #124]	; 0x7c
   23168:	str	r8, [r0]
   2316c:	ldr	r0, [r5, #4]
   23170:	add	r4, r4, #1
   23174:	cmp	r4, r0
   23178:	blt	230ec <__assert_fail@plt+0x1144c>
   2317c:	mov	r0, #0
   23180:	sub	sp, fp, #28
   23184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23188:	mov	r0, #12
   2318c:	b	23180 <__assert_fail@plt+0x114e0>
   23190:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23194:	add	fp, sp, #28
   23198:	sub	sp, sp, #76	; 0x4c
   2319c:	mov	lr, r0
   231a0:	ldr	r0, [r1, #4]
   231a4:	cmp	r0, #1
   231a8:	blt	23888 <__assert_fail@plt+0x11be8>
   231ac:	ldr	r2, [lr, #84]	; 0x54
   231b0:	ldr	r0, [lr, #40]	; 0x28
   231b4:	mov	r3, #0
   231b8:	str	lr, [sp, #48]	; 0x30
   231bc:	str	r1, [sp, #16]
   231c0:	str	r0, [fp, #-48]	; 0xffffffd0
   231c4:	str	r2, [sp, #32]
   231c8:	ldr	r0, [r1, #8]
   231cc:	str	r3, [sp, #36]	; 0x24
   231d0:	ldr	r3, [r0, r3, lsl #2]
   231d4:	ldr	r0, [r2]
   231d8:	add	r0, r0, r3, lsl #3
   231dc:	mov	r1, r3
   231e0:	str	r3, [sp, #52]	; 0x34
   231e4:	ldr	r4, [r0, #4]
   231e8:	uxtb	r0, r4
   231ec:	cmp	r0, #4
   231f0:	bne	2386c <__assert_fail@plt+0x11bcc>
   231f4:	movw	r0, #65280	; 0xff00
   231f8:	movt	r0, #3
   231fc:	tst	r4, r0
   23200:	beq	2325c <__assert_fail@plt+0x115bc>
   23204:	ldr	r2, [lr, #88]	; 0x58
   23208:	ldr	r1, [fp, #-48]	; 0xffffffd0
   2320c:	mov	r0, lr
   23210:	mov	r5, lr
   23214:	bl	22fb8 <__assert_fail@plt+0x11318>
   23218:	mov	lr, r5
   2321c:	and	r1, r0, #1
   23220:	tst	r4, #1024	; 0x400
   23224:	beq	23230 <__assert_fail@plt+0x11590>
   23228:	cmp	r1, #0
   2322c:	beq	2386c <__assert_fail@plt+0x11bcc>
   23230:	tst	r4, #2048	; 0x800
   23234:	cmpne	r1, #0
   23238:	bne	2386c <__assert_fail@plt+0x11bcc>
   2323c:	tst	r4, #8192	; 0x2000
   23240:	beq	2324c <__assert_fail@plt+0x115ac>
   23244:	ands	r1, r0, #2
   23248:	beq	2386c <__assert_fail@plt+0x11bcc>
   2324c:	tst	r4, #32768	; 0x8000
   23250:	beq	2325c <__assert_fail@plt+0x115bc>
   23254:	ands	r0, r0, #8
   23258:	beq	2386c <__assert_fail@plt+0x11bcc>
   2325c:	ldr	r0, [lr, #108]	; 0x6c
   23260:	ldr	r1, [fp, #-48]	; 0xffffffd0
   23264:	ldr	r4, [lr, #4]
   23268:	ldr	r7, [lr, #84]	; 0x54
   2326c:	mov	r5, lr
   23270:	str	r0, [sp, #12]
   23274:	mov	r0, lr
   23278:	bl	23cf8 <__assert_fail@plt+0x12058>
   2327c:	mov	lr, r5
   23280:	cmn	r0, #1
   23284:	beq	232b4 <__assert_fail@plt+0x11614>
   23288:	ldr	r1, [lr, #116]	; 0x74
   2328c:	add	r0, r0, r0, lsl #1
   23290:	add	r0, r1, r0, lsl #3
   23294:	ldr	r1, [r0]
   23298:	ldr	r2, [sp, #52]	; 0x34
   2329c:	cmp	r1, r2
   232a0:	beq	2365c <__assert_fail@plt+0x119bc>
   232a4:	ldrb	r1, [r0, #20]
   232a8:	add	r0, r0, #24
   232ac:	cmp	r1, #0
   232b0:	bne	23294 <__assert_fail@plt+0x115f4>
   232b4:	ldr	r0, [lr, #124]	; 0x7c
   232b8:	cmp	r0, #1
   232bc:	blt	2365c <__assert_fail@plt+0x119bc>
   232c0:	ldr	r0, [r7]
   232c4:	ldr	r1, [sp, #52]	; 0x34
   232c8:	mov	r2, #0
   232cc:	mov	ip, r4
   232d0:	str	r7, [sp, #24]
   232d4:	ldr	r8, [r0, r1, lsl #3]
   232d8:	str	r8, [sp, #28]
   232dc:	ldr	r1, [lr, #132]	; 0x84
   232e0:	str	r2, [sp, #40]	; 0x28
   232e4:	ldr	r6, [r1, r2, lsl #2]
   232e8:	ldr	r1, [r6, #4]
   232ec:	ldr	r0, [r0, r1, lsl #3]
   232f0:	cmp	r0, r8
   232f4:	bne	23418 <__assert_fail@plt+0x11778>
   232f8:	ldr	r0, [r6, #16]
   232fc:	ldr	r9, [r6]
   23300:	mov	r8, #0
   23304:	str	r6, [sp, #44]	; 0x2c
   23308:	cmp	r0, #1
   2330c:	blt	2331c <__assert_fail@plt+0x1167c>
   23310:	ldr	r5, [fp, #-48]	; 0xffffffd0
   23314:	mov	r7, r9
   23318:	b	23350 <__assert_fail@plt+0x116b0>
   2331c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   23320:	b	233f4 <__assert_fail@plt+0x11754>
   23324:	ldr	r2, [lr, #48]	; 0x30
   23328:	cmp	r1, r2
   2332c:	bgt	233f0 <__assert_fail@plt+0x11750>
   23330:	mov	r0, lr
   23334:	mov	r6, lr
   23338:	bl	23d80 <__assert_fail@plt+0x120e0>
   2333c:	cmp	r0, #0
   23340:	bne	23898 <__assert_fail@plt+0x11bf8>
   23344:	ldr	ip, [r6, #4]
   23348:	mov	r1, r6
   2334c:	b	23378 <__assert_fail@plt+0x116d8>
   23350:	ldr	r1, [r6, #20]
   23354:	ldr	sl, [r1, r8, lsl #2]
   23358:	ldr	r9, [sl, #4]
   2335c:	sub	r4, r9, r7
   23360:	cmp	r4, #1
   23364:	blt	233a0 <__assert_fail@plt+0x11700>
   23368:	ldr	r2, [lr, #28]
   2336c:	add	r1, r4, r5
   23370:	cmp	r1, r2
   23374:	bgt	23324 <__assert_fail@plt+0x11684>
   23378:	add	r0, ip, r5
   2337c:	add	r1, ip, r7
   23380:	mov	r2, r4
   23384:	mov	r6, ip
   23388:	bl	11928 <memcmp@plt>
   2338c:	mov	ip, r6
   23390:	ldr	r6, [sp, #44]	; 0x2c
   23394:	ldr	lr, [sp, #48]	; 0x30
   23398:	cmp	r0, #0
   2339c:	bne	233ec <__assert_fail@plt+0x1174c>
   233a0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   233a4:	ldr	r3, [sp, #52]	; 0x34
   233a8:	mov	r1, r6
   233ac:	mov	r2, sl
   233b0:	mov	r7, lr
   233b4:	str	r0, [sp]
   233b8:	mov	r0, lr
   233bc:	bl	23e10 <__assert_fail@plt+0x12170>
   233c0:	cmp	r0, #1
   233c4:	bhi	23898 <__assert_fail@plt+0x11bf8>
   233c8:	ldr	r0, [r6, #16]
   233cc:	ldr	ip, [r7, #4]
   233d0:	add	r8, r8, #1
   233d4:	mov	lr, r7
   233d8:	add	r5, r4, r5
   233dc:	mov	r7, r9
   233e0:	cmp	r8, r0
   233e4:	blt	23350 <__assert_fail@plt+0x116b0>
   233e8:	b	233f4 <__assert_fail@plt+0x11754>
   233ec:	ldr	r0, [r6, #16]
   233f0:	mov	r9, r7
   233f4:	cmp	r8, r0
   233f8:	blt	23410 <__assert_fail@plt+0x11770>
   233fc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   23400:	cmp	r8, #0
   23404:	addne	r9, r9, #1
   23408:	cmp	r9, r0
   2340c:	ble	23434 <__assert_fail@plt+0x11794>
   23410:	ldr	r7, [sp, #24]
   23414:	ldr	r8, [sp, #28]
   23418:	ldr	r2, [sp, #40]	; 0x28
   2341c:	ldr	r0, [lr, #124]	; 0x7c
   23420:	add	r2, r2, #1
   23424:	cmp	r2, r0
   23428:	bge	23668 <__assert_fail@plt+0x119c8>
   2342c:	ldr	r0, [r7]
   23430:	b	232dc <__assert_fail@plt+0x1163c>
   23434:	ldr	r7, [sp, #24]
   23438:	ldr	r8, [sp, #28]
   2343c:	b	235ac <__assert_fail@plt+0x1190c>
   23440:	cmn	r4, #1
   23444:	beq	23640 <__assert_fail@plt+0x119a0>
   23448:	ldr	r1, [r6, #8]
   2344c:	mov	r7, ip
   23450:	str	r5, [sp, #20]
   23454:	cmp	r1, #0
   23458:	bne	23488 <__assert_fail@plt+0x117e8>
   2345c:	ldr	r0, [r6]
   23460:	add	r1, sl, #1
   23464:	mov	r5, #12
   23468:	sub	r1, r1, r0
   2346c:	mov	r0, #12
   23470:	bl	19ed0 <__assert_fail@plt+0x8230>
   23474:	ldr	r6, [sp, #44]	; 0x2c
   23478:	mov	r1, r0
   2347c:	cmp	r0, #0
   23480:	str	r0, [r6, #8]
   23484:	beq	2389c <__assert_fail@plt+0x11bfc>
   23488:	ldr	r3, [r6]
   2348c:	ldr	r2, [r6, #4]
   23490:	stm	sp, {r4, sl}
   23494:	mov	r0, #9
   23498:	str	r0, [sp, #8]
   2349c:	ldr	r0, [sp, #48]	; 0x30
   234a0:	bl	23f60 <__assert_fail@plt+0x122c0>
   234a4:	ldr	r6, [sp, #44]	; 0x2c
   234a8:	ldr	r5, [sp, #20]
   234ac:	mov	ip, r7
   234b0:	cmp	r0, #1
   234b4:	mov	r7, r9
   234b8:	beq	23644 <__assert_fail@plt+0x119a4>
   234bc:	cmp	r0, #0
   234c0:	bne	23898 <__assert_fail@plt+0x11bf8>
   234c4:	ldr	r1, [r6, #12]
   234c8:	ldr	r0, [r6, #16]
   234cc:	ldr	r7, [sp, #48]	; 0x30
   234d0:	cmp	r0, r1
   234d4:	beq	23580 <__assert_fail@plt+0x118e0>
   234d8:	mov	r0, #1
   234dc:	mov	r1, #20
   234e0:	bl	19ed0 <__assert_fail@plt+0x8230>
   234e4:	cmp	r0, #0
   234e8:	beq	238a8 <__assert_fail@plt+0x11c08>
   234ec:	ldr	r1, [sp, #44]	; 0x2c
   234f0:	mov	r2, r0
   234f4:	ldr	r0, [r1, #16]
   234f8:	ldr	r3, [r1, #20]
   234fc:	str	r2, [r3, r0, lsl #2]
   23500:	stm	r2, {r4, sl}
   23504:	add	r0, r0, #1
   23508:	str	r0, [r1, #16]
   2350c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   23510:	ldr	r3, [sp, #52]	; 0x34
   23514:	str	r0, [sp]
   23518:	mov	r0, r7
   2351c:	bl	23e10 <__assert_fail@plt+0x12170>
   23520:	cmp	r0, #1
   23524:	bhi	23898 <__assert_fail@plt+0x11bf8>
   23528:	ldr	ip, [r7, #4]
   2352c:	ldr	r6, [sp, #44]	; 0x2c
   23530:	ldr	r5, [sp, #20]
   23534:	b	23640 <__assert_fail@plt+0x119a0>
   23538:	ldr	r0, [lr, #48]	; 0x30
   2353c:	cmp	r5, r0
   23540:	bge	23418 <__assert_fail@plt+0x11778>
   23544:	add	r4, r5, #1
   23548:	mov	r0, lr
   2354c:	mov	r9, r7
   23550:	mov	r7, r5
   23554:	mov	r5, lr
   23558:	mov	r1, r4
   2355c:	bl	238c8 <__assert_fail@plt+0x11c28>
   23560:	cmp	r0, #0
   23564:	bne	23898 <__assert_fail@plt+0x11bf8>
   23568:	ldr	ip, [r5, #4]
   2356c:	ldr	r6, [sp, #44]	; 0x2c
   23570:	mov	lr, r5
   23574:	mov	r5, r7
   23578:	mov	r7, r9
   2357c:	b	235cc <__assert_fail@plt+0x1192c>
   23580:	mov	r1, #1
   23584:	orr	r5, r1, r0, lsl #1
   23588:	ldr	r0, [r6, #20]
   2358c:	lsl	r1, r5, #2
   23590:	bl	1a2b4 <__assert_fail@plt+0x8614>
   23594:	cmp	r0, #0
   23598:	beq	238a8 <__assert_fail@plt+0x11c08>
   2359c:	ldr	r8, [sp, #28]
   235a0:	str	r5, [r6, #12]
   235a4:	str	r0, [r6, #20]
   235a8:	b	234d8 <__assert_fail@plt+0x11838>
   235ac:	ldr	r0, [r6]
   235b0:	mov	sl, r9
   235b4:	cmp	r9, r0
   235b8:	ble	235e4 <__assert_fail@plt+0x11944>
   235bc:	ldr	r0, [lr, #28]
   235c0:	cmp	r5, r0
   235c4:	bge	23538 <__assert_fail@plt+0x11898>
   235c8:	add	r4, r5, #1
   235cc:	add	r1, ip, sl
   235d0:	ldrb	r0, [ip, r5]
   235d4:	ldrb	r1, [r1, #-1]
   235d8:	cmp	r0, r1
   235dc:	beq	235e8 <__assert_fail@plt+0x11948>
   235e0:	b	23418 <__assert_fail@plt+0x11778>
   235e4:	mov	r4, r5
   235e8:	ldr	r0, [lr, #100]	; 0x64
   235ec:	mov	r5, r4
   235f0:	ldr	r2, [r0, sl, lsl #2]
   235f4:	cmp	r2, #0
   235f8:	beq	23644 <__assert_fail@plt+0x119a4>
   235fc:	ldr	r0, [r2, #8]
   23600:	cmp	r0, #1
   23604:	blt	23644 <__assert_fail@plt+0x119a4>
   23608:	ldr	r1, [r7]
   2360c:	ldr	r2, [r2, #12]
   23610:	mov	r9, r7
   23614:	mov	r3, #0
   23618:	ldr	r4, [r2, r3, lsl #2]
   2361c:	add	r7, r1, r4, lsl #3
   23620:	ldrb	r7, [r7, #4]
   23624:	cmp	r7, #9
   23628:	ldreq	r7, [r1, r4, lsl #3]
   2362c:	cmpeq	r7, r8
   23630:	beq	23440 <__assert_fail@plt+0x117a0>
   23634:	add	r3, r3, #1
   23638:	cmp	r3, r0
   2363c:	blt	23618 <__assert_fail@plt+0x11978>
   23640:	mov	r7, r9
   23644:	ldr	r0, [fp, #-48]	; 0xffffffd0
   23648:	ldr	lr, [sp, #48]	; 0x30
   2364c:	add	r9, sl, #1
   23650:	cmp	sl, r0
   23654:	blt	235ac <__assert_fail@plt+0x1190c>
   23658:	b	23418 <__assert_fail@plt+0x11778>
   2365c:	mov	r0, #0
   23660:	str	r0, [fp, #-32]	; 0xffffffe0
   23664:	b	2386c <__assert_fail@plt+0x11bcc>
   23668:	ldr	r0, [lr, #108]	; 0x6c
   2366c:	ldr	r7, [sp, #12]
   23670:	mov	r1, #0
   23674:	str	r1, [fp, #-32]	; 0xffffffe0
   23678:	cmp	r7, r0
   2367c:	bge	2386c <__assert_fail@plt+0x11bcc>
   23680:	add	r0, r7, r7, lsl #1
   23684:	lsl	r5, r0, #3
   23688:	ldr	r0, [lr, #116]	; 0x74
   2368c:	ldr	r2, [sp, #52]	; 0x34
   23690:	ldr	r1, [r0, r5]
   23694:	cmp	r1, r2
   23698:	bne	23854 <__assert_fail@plt+0x11bb4>
   2369c:	add	r0, r0, r5
   236a0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   236a4:	ldr	r1, [r0, #4]
   236a8:	cmp	r1, r2
   236ac:	bne	23854 <__assert_fail@plt+0x11bb4>
   236b0:	ldr	r2, [r0, #8]
   236b4:	ldr	r3, [r0, #12]
   236b8:	ldr	r0, [sp, #32]
   236bc:	ldr	r4, [r0, #24]
   236c0:	cmp	r3, r2
   236c4:	bne	236e0 <__assert_fail@plt+0x11a40>
   236c8:	ldr	r1, [sp, #52]	; 0x34
   236cc:	ldr	r0, [r0, #20]
   236d0:	add	r1, r1, r1, lsl #1
   236d4:	add	r0, r0, r1, lsl #2
   236d8:	ldr	r0, [r0, #8]
   236dc:	b	236ec <__assert_fail@plt+0x11a4c>
   236e0:	ldr	r0, [r0, #12]
   236e4:	ldr	r1, [sp, #52]	; 0x34
   236e8:	add	r0, r0, r1, lsl #2
   236ec:	ldr	r0, [r0]
   236f0:	ldr	r8, [fp, #-48]	; 0xffffffd0
   236f4:	ldr	r6, [sp, #48]	; 0x30
   236f8:	str	r2, [sp, #44]	; 0x2c
   236fc:	str	r3, [sp, #40]	; 0x28
   23700:	add	r9, r0, r0, lsl #1
   23704:	add	r0, r3, r8
   23708:	sub	sl, r0, r2
   2370c:	ldr	r2, [r6, #88]	; 0x58
   23710:	mov	r0, r6
   23714:	sub	r1, sl, #1
   23718:	bl	22fb8 <__assert_fail@plt+0x11318>
   2371c:	mov	r3, r0
   23720:	ldr	r0, [r6, #100]	; 0x64
   23724:	ldr	r1, [r0, r8, lsl #2]
   23728:	ldr	r2, [r0, sl, lsl #2]
   2372c:	add	r8, r4, r9, lsl #2
   23730:	cmp	r1, #0
   23734:	ldrne	r0, [r1, #8]
   23738:	moveq	r0, #0
   2373c:	cmp	r2, #0
   23740:	str	r0, [sp, #28]
   23744:	sub	r0, fp, #44	; 0x2c
   23748:	beq	237b4 <__assert_fail@plt+0x11b14>
   2374c:	ldr	r1, [r2, #40]	; 0x28
   23750:	mov	r2, r8
   23754:	mov	r4, r3
   23758:	mov	r6, r0
   2375c:	bl	23af4 <__assert_fail@plt+0x11e54>
   23760:	cmp	r0, #0
   23764:	str	r0, [fp, #-32]	; 0xffffffe0
   23768:	bne	238b0 <__assert_fail@plt+0x11c10>
   2376c:	ldr	r1, [sp, #32]
   23770:	sub	r0, fp, #32
   23774:	mov	r2, r6
   23778:	mov	r3, r4
   2377c:	bl	22348 <__assert_fail@plt+0x106a8>
   23780:	ldr	r4, [sp, #48]	; 0x30
   23784:	ldr	r1, [r4, #100]	; 0x64
   23788:	str	r0, [r1, sl, lsl #2]
   2378c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23790:	bl	1a158 <__assert_fail@plt+0x84b8>
   23794:	ldr	r3, [r4, #100]	; 0x64
   23798:	ldr	r1, [r3, sl, lsl #2]
   2379c:	cmp	r1, #0
   237a0:	bne	237f4 <__assert_fail@plt+0x11b54>
   237a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   237a8:	cmp	r0, #0
   237ac:	beq	237f4 <__assert_fail@plt+0x11b54>
   237b0:	b	23890 <__assert_fail@plt+0x11bf0>
   237b4:	ldr	r1, [sp, #32]
   237b8:	sub	r0, fp, #32
   237bc:	mov	r2, r8
   237c0:	bl	22348 <__assert_fail@plt+0x106a8>
   237c4:	ldr	r1, [r6, #100]	; 0x64
   237c8:	str	r0, [r1, sl, lsl #2]
   237cc:	ldr	r3, [r6, #100]	; 0x64
   237d0:	ldr	r1, [r3, sl, lsl #2]
   237d4:	cmp	r1, #0
   237d8:	bne	237f4 <__assert_fail@plt+0x11b54>
   237dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   237e0:	ldr	r1, [sp, #44]	; 0x2c
   237e4:	ldr	r2, [sp, #40]	; 0x28
   237e8:	cmp	r0, #0
   237ec:	beq	237fc <__assert_fail@plt+0x11b5c>
   237f0:	b	23890 <__assert_fail@plt+0x11bf0>
   237f4:	ldr	r1, [sp, #44]	; 0x2c
   237f8:	ldr	r2, [sp, #40]	; 0x28
   237fc:	cmp	r2, r1
   23800:	bne	23854 <__assert_fail@plt+0x11bb4>
   23804:	ldr	r1, [fp, #-48]	; 0xffffffd0
   23808:	ldr	r0, [r3, r1, lsl #2]
   2380c:	ldr	r1, [sp, #28]
   23810:	ldr	r0, [r0, #8]
   23814:	cmp	r0, r1
   23818:	ble	23854 <__assert_fail@plt+0x11bb4>
   2381c:	ldr	r4, [sp, #48]	; 0x30
   23820:	ldr	r2, [fp, #-48]	; 0xffffffd0
   23824:	mov	r1, r8
   23828:	mov	r0, r4
   2382c:	bl	23098 <__assert_fail@plt+0x113f8>
   23830:	cmp	r0, #0
   23834:	str	r0, [fp, #-32]	; 0xffffffe0
   23838:	bne	23890 <__assert_fail@plt+0x11bf0>
   2383c:	mov	r0, r4
   23840:	mov	r1, r8
   23844:	bl	23190 <__assert_fail@plt+0x114f0>
   23848:	cmp	r0, #0
   2384c:	str	r0, [fp, #-32]	; 0xffffffe0
   23850:	bne	23890 <__assert_fail@plt+0x11bf0>
   23854:	ldr	lr, [sp, #48]	; 0x30
   23858:	add	r7, r7, #1
   2385c:	add	r5, r5, #24
   23860:	ldr	r0, [lr, #108]	; 0x6c
   23864:	cmp	r7, r0
   23868:	blt	23688 <__assert_fail@plt+0x119e8>
   2386c:	ldr	r1, [sp, #16]
   23870:	ldr	r3, [sp, #36]	; 0x24
   23874:	ldr	r2, [sp, #32]
   23878:	ldr	r0, [r1, #4]
   2387c:	add	r3, r3, #1
   23880:	cmp	r3, r0
   23884:	blt	231c8 <__assert_fail@plt+0x11528>
   23888:	mov	r0, #0
   2388c:	str	r0, [fp, #-32]	; 0xffffffe0
   23890:	sub	sp, fp, #28
   23894:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23898:	mov	r5, r0
   2389c:	str	r5, [fp, #-32]	; 0xffffffe0
   238a0:	mov	r0, r5
   238a4:	b	23890 <__assert_fail@plt+0x11bf0>
   238a8:	mov	r5, #12
   238ac:	b	2389c <__assert_fail@plt+0x11bfc>
   238b0:	mov	r1, r0
   238b4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   238b8:	mov	r4, r1
   238bc:	bl	1a158 <__assert_fail@plt+0x84b8>
   238c0:	mov	r0, r4
   238c4:	b	23890 <__assert_fail@plt+0x11bf0>
   238c8:	push	{r4, r5, fp, lr}
   238cc:	add	fp, sp, #8
   238d0:	mov	r4, r0
   238d4:	ldr	r0, [r0, #36]	; 0x24
   238d8:	mov	r5, #12
   238dc:	cmn	r0, #-536870910	; 0xe0000002
   238e0:	bhi	23998 <__assert_fail@plt+0x11cf8>
   238e4:	ldr	r2, [r4, #48]	; 0x30
   238e8:	cmp	r2, r0, lsl #1
   238ec:	lslge	r2, r0, #1
   238f0:	mov	r0, r4
   238f4:	cmp	r2, r1
   238f8:	movle	r2, r1
   238fc:	mov	r1, r2
   23900:	bl	1d8d0 <__assert_fail@plt+0xbc30>
   23904:	cmp	r0, #0
   23908:	bne	2395c <__assert_fail@plt+0x11cbc>
   2390c:	ldr	r0, [r4, #100]	; 0x64
   23910:	cmp	r0, #0
   23914:	beq	23934 <__assert_fail@plt+0x11c94>
   23918:	ldr	r1, [r4, #36]	; 0x24
   2391c:	mov	r2, #4
   23920:	add	r1, r2, r1, lsl #2
   23924:	bl	1a2b4 <__assert_fail@plt+0x8614>
   23928:	cmp	r0, #0
   2392c:	beq	23998 <__assert_fail@plt+0x11cf8>
   23930:	str	r0, [r4, #100]	; 0x64
   23934:	ldrb	r1, [r4, #72]	; 0x48
   23938:	ldr	r0, [r4, #80]	; 0x50
   2393c:	cmp	r1, #0
   23940:	beq	23964 <__assert_fail@plt+0x11cc4>
   23944:	cmp	r0, #2
   23948:	blt	23978 <__assert_fail@plt+0x11cd8>
   2394c:	mov	r0, r4
   23950:	bl	1d970 <__assert_fail@plt+0xbcd0>
   23954:	cmp	r0, #0
   23958:	beq	23994 <__assert_fail@plt+0x11cf4>
   2395c:	mov	r5, r0
   23960:	b	23998 <__assert_fail@plt+0x11cf8>
   23964:	cmp	r0, #2
   23968:	blt	23984 <__assert_fail@plt+0x11ce4>
   2396c:	mov	r0, r4
   23970:	bl	1df4c <__assert_fail@plt+0xc2ac>
   23974:	b	23994 <__assert_fail@plt+0x11cf4>
   23978:	mov	r0, r4
   2397c:	bl	1dee0 <__assert_fail@plt+0xc240>
   23980:	b	23994 <__assert_fail@plt+0x11cf4>
   23984:	ldr	r0, [r4, #64]	; 0x40
   23988:	cmp	r0, #0
   2398c:	movne	r0, r4
   23990:	blne	1e128 <__assert_fail@plt+0xc488>
   23994:	mov	r5, #0
   23998:	mov	r0, r5
   2399c:	pop	{r4, r5, fp, pc}
   239a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   239a4:	add	fp, sp, #24
   239a8:	sub	sp, sp, #16
   239ac:	mov	r8, r0
   239b0:	mov	r4, r1
   239b4:	ldr	r5, [r1, #40]	; 0x28
   239b8:	ldr	r7, [r1, #84]	; 0x54
   239bc:	ldr	r0, [r1, #100]	; 0x64
   239c0:	ldr	r1, [r1, #104]	; 0x68
   239c4:	mov	r6, r2
   239c8:	cmp	r5, r1
   239cc:	ble	239dc <__assert_fail@plt+0x11d3c>
   239d0:	str	r6, [r0, r5, lsl #2]
   239d4:	str	r5, [r4, #104]	; 0x68
   239d8:	b	23a80 <__assert_fail@plt+0x11de0>
   239dc:	ldr	r1, [r0, r5, lsl #2]
   239e0:	cmp	r1, #0
   239e4:	beq	23a20 <__assert_fail@plt+0x11d80>
   239e8:	ldr	r2, [r1, #40]	; 0x28
   239ec:	cmp	r6, #0
   239f0:	beq	23a28 <__assert_fail@plt+0x11d88>
   239f4:	ldr	r6, [r6, #40]	; 0x28
   239f8:	mov	r0, sp
   239fc:	mov	r1, r6
   23a00:	bl	23af4 <__assert_fail@plt+0x11e54>
   23a04:	cmp	r0, #0
   23a08:	str	r0, [r8]
   23a0c:	bne	23aec <__assert_fail@plt+0x11e4c>
   23a10:	ldr	r0, [r4, #40]	; 0x28
   23a14:	clz	r1, r6
   23a18:	lsr	r9, r1, #5
   23a1c:	b	23a40 <__assert_fail@plt+0x11da0>
   23a20:	str	r6, [r0, r5, lsl #2]
   23a24:	b	23a80 <__assert_fail@plt+0x11de0>
   23a28:	ldr	r0, [r2, #8]
   23a2c:	vldr	d16, [r2]
   23a30:	mov	r9, #1
   23a34:	str	r0, [sp, #8]
   23a38:	mov	r0, r5
   23a3c:	vstr	d16, [sp]
   23a40:	ldr	r2, [r4, #88]	; 0x58
   23a44:	sub	r1, r0, #1
   23a48:	mov	r0, r4
   23a4c:	bl	22fb8 <__assert_fail@plt+0x11318>
   23a50:	mov	r3, r0
   23a54:	mov	r2, sp
   23a58:	mov	r0, r8
   23a5c:	mov	r1, r7
   23a60:	bl	22348 <__assert_fail@plt+0x106a8>
   23a64:	mov	r6, r0
   23a68:	ldr	r0, [r4, #100]	; 0x64
   23a6c:	cmp	r9, #0
   23a70:	str	r6, [r0, r5, lsl #2]
   23a74:	bne	23a80 <__assert_fail@plt+0x11de0>
   23a78:	ldr	r0, [sp, #8]
   23a7c:	bl	1a158 <__assert_fail@plt+0x84b8>
   23a80:	cmp	r6, #0
   23a84:	ldrne	r0, [r7, #76]	; 0x4c
   23a88:	cmpne	r0, #0
   23a8c:	bne	23a9c <__assert_fail@plt+0x11dfc>
   23a90:	mov	r0, r6
   23a94:	sub	sp, fp, #24
   23a98:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23a9c:	add	r7, r6, #4
   23aa0:	mov	r0, r4
   23aa4:	mov	r2, r5
   23aa8:	mov	r1, r7
   23aac:	bl	23098 <__assert_fail@plt+0x113f8>
   23ab0:	cmp	r0, #0
   23ab4:	str	r0, [r8]
   23ab8:	bne	23aec <__assert_fail@plt+0x11e4c>
   23abc:	ldrb	r0, [r6, #52]	; 0x34
   23ac0:	tst	r0, #64	; 0x40
   23ac4:	beq	23a90 <__assert_fail@plt+0x11df0>
   23ac8:	mov	r0, r4
   23acc:	mov	r1, r7
   23ad0:	bl	23190 <__assert_fail@plt+0x114f0>
   23ad4:	str	r0, [r8]
   23ad8:	cmp	r0, #0
   23adc:	mov	r6, #0
   23ae0:	ldreq	r0, [r4, #100]	; 0x64
   23ae4:	ldreq	r6, [r0, r5, lsl #2]
   23ae8:	b	23a90 <__assert_fail@plt+0x11df0>
   23aec:	mov	r6, #0
   23af0:	b	23a90 <__assert_fail@plt+0x11df0>
   23af4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23af8:	add	fp, sp, #28
   23afc:	sub	sp, sp, #20
   23b00:	mov	r8, r2
   23b04:	cmp	r1, #0
   23b08:	str	r0, [sp, #16]
   23b0c:	beq	23b44 <__assert_fail@plt+0x11ea4>
   23b10:	ldr	r0, [r1, #4]
   23b14:	mov	r6, r1
   23b18:	cmp	r8, #0
   23b1c:	beq	23b30 <__assert_fail@plt+0x11e90>
   23b20:	cmp	r0, #1
   23b24:	ldrge	r1, [r8, #4]
   23b28:	cmpge	r1, #1
   23b2c:	bge	23b84 <__assert_fail@plt+0x11ee4>
   23b30:	cmp	r0, #1
   23b34:	blt	23b44 <__assert_fail@plt+0x11ea4>
   23b38:	ldr	r0, [sp, #16]
   23b3c:	mov	r1, r6
   23b40:	b	23b60 <__assert_fail@plt+0x11ec0>
   23b44:	cmp	r8, #0
   23b48:	beq	23b6c <__assert_fail@plt+0x11ecc>
   23b4c:	ldr	r0, [r8, #4]
   23b50:	cmp	r0, #1
   23b54:	blt	23b6c <__assert_fail@plt+0x11ecc>
   23b58:	ldr	r0, [sp, #16]
   23b5c:	mov	r1, r8
   23b60:	sub	sp, fp, #28
   23b64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23b68:	b	22268 <__assert_fail@plt+0x105c8>
   23b6c:	ldr	r1, [sp, #16]
   23b70:	mov	r0, #0
   23b74:	str	r0, [r1]
   23b78:	str	r0, [r1, #4]
   23b7c:	str	r0, [r1, #8]
   23b80:	b	23ce8 <__assert_fail@plt+0x12048>
   23b84:	ldr	r4, [sp, #16]
   23b88:	add	r0, r1, r0
   23b8c:	str	r0, [r4]
   23b90:	lsl	r0, r0, #2
   23b94:	bl	1a224 <__assert_fail@plt+0x8584>
   23b98:	cmp	r0, #0
   23b9c:	str	r0, [r4, #8]
   23ba0:	beq	23cf0 <__assert_fail@plt+0x12050>
   23ba4:	ldr	r9, [r8, #4]
   23ba8:	ldr	lr, [r6, #4]
   23bac:	mov	r1, #0
   23bb0:	mov	r7, #0
   23bb4:	cmp	r9, #0
   23bb8:	movwgt	r1, #1
   23bbc:	cmp	lr, #1
   23bc0:	blt	23c84 <__assert_fail@plt+0x11fe4>
   23bc4:	mov	r2, #0
   23bc8:	mov	ip, #0
   23bcc:	str	r2, [sp, #8]
   23bd0:	mov	r2, #0
   23bd4:	str	r2, [sp, #12]
   23bd8:	mov	r2, #0
   23bdc:	ldr	r4, [sp, #12]
   23be0:	mov	r7, ip
   23be4:	tst	r1, #1
   23be8:	beq	23cb4 <__assert_fail@plt+0x12014>
   23bec:	ldr	r1, [r8, #8]
   23bf0:	ldr	r3, [r1, r7, lsl #2]
   23bf4:	ldr	r1, [r6, #8]
   23bf8:	ldr	sl, [r1, r2, lsl #2]
   23bfc:	cmp	sl, r3
   23c00:	ble	23c28 <__assert_fail@plt+0x11f88>
   23c04:	add	r7, r7, #1
   23c08:	mov	r1, #0
   23c0c:	str	r3, [r0, r4, lsl #2]
   23c10:	add	r4, r4, #1
   23c14:	cmp	r9, r7
   23c18:	movwgt	r1, #1
   23c1c:	cmp	lr, r2
   23c20:	bgt	23be4 <__assert_fail@plt+0x11f44>
   23c24:	b	23c88 <__assert_fail@plt+0x11fe8>
   23c28:	add	r1, r7, #1
   23c2c:	str	sl, [r0, r4, lsl #2]
   23c30:	mov	ip, r7
   23c34:	add	r2, r2, #1
   23c38:	str	r1, [sp, #4]
   23c3c:	ldr	r9, [r8, #4]
   23c40:	ldr	lr, [r6, #4]
   23c44:	moveq	ip, r1
   23c48:	mov	r1, #0
   23c4c:	ldr	r5, [sp, #8]
   23c50:	cmp	r9, ip
   23c54:	sub	r5, r5, #1
   23c58:	movwgt	r1, #1
   23c5c:	cmp	lr, r2
   23c60:	str	r5, [sp, #8]
   23c64:	add	r5, r4, #1
   23c68:	str	r5, [sp, #12]
   23c6c:	bgt	23bdc <__assert_fail@plt+0x11f3c>
   23c70:	ldr	r2, [sp, #4]
   23c74:	cmp	sl, r3
   23c78:	add	r4, r4, #1
   23c7c:	moveq	r7, r2
   23c80:	b	23c88 <__assert_fail@plt+0x11fe8>
   23c84:	mov	r4, #0
   23c88:	cmp	r1, #0
   23c8c:	beq	23cdc <__assert_fail@plt+0x1203c>
   23c90:	ldr	r1, [r8, #8]
   23c94:	sub	r2, r9, r7
   23c98:	add	r0, r0, r4, lsl #2
   23c9c:	lsl	r2, r2, #2
   23ca0:	add	r1, r1, r7, lsl #2
   23ca4:	bl	118e0 <memcpy@plt>
   23ca8:	sub	r0, r4, r7
   23cac:	add	r4, r0, r9
   23cb0:	b	23cdc <__assert_fail@plt+0x1203c>
   23cb4:	ldr	r1, [r6, #8]
   23cb8:	add	r0, r0, r4, lsl #2
   23cbc:	add	r1, r1, r2, lsl #2
   23cc0:	sub	r2, lr, r2
   23cc4:	lsl	r2, r2, #2
   23cc8:	bl	118e0 <memcpy@plt>
   23ccc:	ldr	r0, [r6, #4]
   23cd0:	ldr	r1, [sp, #8]
   23cd4:	add	r0, r0, r1
   23cd8:	add	r4, r0, r4
   23cdc:	ldr	r0, [sp, #16]
   23ce0:	str	r4, [r0, #4]
   23ce4:	mov	r0, #0
   23ce8:	sub	sp, fp, #28
   23cec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23cf0:	mov	r0, #12
   23cf4:	b	23ce8 <__assert_fail@plt+0x12048>
   23cf8:	push	{r4, r5, r6, r7, fp, lr}
   23cfc:	add	fp, sp, #16
   23d00:	ldr	lr, [r0, #108]	; 0x6c
   23d04:	mov	ip, r0
   23d08:	cmp	lr, #1
   23d0c:	blt	23d50 <__assert_fail@plt+0x120b0>
   23d10:	ldr	r2, [ip, #116]	; 0x74
   23d14:	mov	r0, #0
   23d18:	mov	r3, #1
   23d1c:	mov	r4, lr
   23d20:	add	r5, r0, r4
   23d24:	add	r5, r5, r5, lsr #31
   23d28:	asr	r6, r5, #1
   23d2c:	add	r7, r6, r6, lsl #1
   23d30:	add	r7, r2, r7, lsl #3
   23d34:	ldr	r7, [r7, #4]
   23d38:	cmp	r7, r1
   23d3c:	addlt	r0, r3, r5, asr #1
   23d40:	movge	r4, r6
   23d44:	cmp	r0, r4
   23d48:	blt	23d20 <__assert_fail@plt+0x12080>
   23d4c:	b	23d54 <__assert_fail@plt+0x120b4>
   23d50:	mov	r0, #0
   23d54:	cmp	r0, lr
   23d58:	bge	23d78 <__assert_fail@plt+0x120d8>
   23d5c:	ldr	r2, [ip, #116]	; 0x74
   23d60:	add	r3, r0, r0, lsl #1
   23d64:	add	r2, r2, r3, lsl #3
   23d68:	ldr	r2, [r2, #4]
   23d6c:	cmp	r2, r1
   23d70:	mvnne	r0, #0
   23d74:	pop	{r4, r5, r6, r7, fp, pc}
   23d78:	mvn	r0, #0
   23d7c:	pop	{r4, r5, r6, r7, fp, pc}
   23d80:	push	{r4, r5, r6, r7, fp, lr}
   23d84:	add	fp, sp, #16
   23d88:	mov	r5, r0
   23d8c:	ldr	r0, [r0, #36]	; 0x24
   23d90:	mov	r4, r1
   23d94:	ldr	r7, [r5, #104]	; 0x68
   23d98:	cmp	r0, r1
   23d9c:	ldrle	r1, [r5, #48]	; 0x30
   23da0:	cmple	r0, r1
   23da4:	blt	23df0 <__assert_fail@plt+0x12150>
   23da8:	ldr	r0, [r5, #28]
   23dac:	cmp	r0, r4
   23db0:	ldrle	r1, [r5, #48]	; 0x30
   23db4:	cmple	r0, r1
   23db8:	blt	23df0 <__assert_fail@plt+0x12150>
   23dbc:	mov	r6, #0
   23dc0:	cmp	r7, r4
   23dc4:	bge	23e08 <__assert_fail@plt+0x12168>
   23dc8:	sub	r0, r4, r7
   23dcc:	mov	r1, #0
   23dd0:	mov	r6, #0
   23dd4:	lsl	r2, r0, #2
   23dd8:	ldr	r0, [r5, #100]	; 0x64
   23ddc:	add	r0, r0, r7, lsl #2
   23de0:	add	r0, r0, #4
   23de4:	bl	11b08 <memset@plt>
   23de8:	str	r4, [r5, #104]	; 0x68
   23dec:	b	23e08 <__assert_fail@plt+0x12168>
   23df0:	add	r1, r4, #1
   23df4:	mov	r0, r5
   23df8:	bl	238c8 <__assert_fail@plt+0x11c28>
   23dfc:	mov	r6, r0
   23e00:	cmp	r0, #0
   23e04:	beq	23dbc <__assert_fail@plt+0x1211c>
   23e08:	mov	r0, r6
   23e0c:	pop	{r4, r5, r6, r7, fp, pc}
   23e10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23e14:	add	fp, sp, #28
   23e18:	sub	sp, sp, #12
   23e1c:	mov	r6, r2
   23e20:	mov	r4, r0
   23e24:	mov	r0, #8
   23e28:	mov	r7, r3
   23e2c:	ldr	r2, [r2]
   23e30:	mov	r8, r1
   23e34:	ldr	r3, [r6, #4]
   23e38:	str	r0, [sp, #8]
   23e3c:	add	r1, r6, #8
   23e40:	mov	r0, r4
   23e44:	ldr	r5, [fp, #8]
   23e48:	str	r7, [sp]
   23e4c:	str	r5, [sp, #4]
   23e50:	bl	23f60 <__assert_fail@plt+0x122c0>
   23e54:	cmp	r0, #0
   23e58:	beq	23e64 <__assert_fail@plt+0x121c4>
   23e5c:	sub	sp, fp, #28
   23e60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23e64:	ldr	r0, [r4, #108]	; 0x6c
   23e68:	ldr	r1, [r4, #112]	; 0x70
   23e6c:	ldr	r9, [r6, #4]
   23e70:	ldr	sl, [r8]
   23e74:	cmp	r0, r1
   23e78:	blt	23ec8 <__assert_fail@plt+0x12228>
   23e7c:	ldr	r0, [r4, #116]	; 0x74
   23e80:	add	r1, r1, r1, lsl #1
   23e84:	lsl	r1, r1, #4
   23e88:	bl	1a2b4 <__assert_fail@plt+0x8614>
   23e8c:	cmp	r0, #0
   23e90:	beq	23f50 <__assert_fail@plt+0x122b0>
   23e94:	str	r0, [r4, #116]	; 0x74
   23e98:	ldr	r1, [r4, #108]	; 0x6c
   23e9c:	ldr	r2, [r4, #112]	; 0x70
   23ea0:	add	r1, r1, r1, lsl #1
   23ea4:	add	r0, r0, r1, lsl #3
   23ea8:	add	r1, r2, r2, lsl #1
   23eac:	lsl	r2, r1, #3
   23eb0:	mov	r1, #0
   23eb4:	bl	11b08 <memset@plt>
   23eb8:	ldr	r1, [r4, #112]	; 0x70
   23ebc:	ldr	r0, [r4, #108]	; 0x6c
   23ec0:	lsl	r1, r1, #1
   23ec4:	str	r1, [r4, #112]	; 0x70
   23ec8:	ldr	r1, [r4, #116]	; 0x74
   23ecc:	cmp	r0, #1
   23ed0:	blt	23ef0 <__assert_fail@plt+0x12250>
   23ed4:	sub	r2, r0, #1
   23ed8:	add	r2, r2, r2, lsl #1
   23edc:	add	r2, r1, r2, lsl #3
   23ee0:	ldr	r3, [r2, #4]
   23ee4:	cmp	r3, r5
   23ee8:	moveq	r3, #1
   23eec:	strbeq	r3, [r2, #20]
   23ef0:	add	r2, r0, r0, lsl #1
   23ef4:	cmp	r9, sl
   23ef8:	mov	r3, #0
   23efc:	add	r0, r0, #1
   23f00:	str	r7, [r1, r2, lsl #3]!
   23f04:	mov	r2, #0
   23f08:	mvneq	r3, #0
   23f0c:	stmib	r1, {r5, sl}
   23f10:	str	r9, [r1, #12]
   23f14:	str	r3, [r1, #16]
   23f18:	str	r0, [r4, #108]	; 0x6c
   23f1c:	strb	r2, [r1, #20]
   23f20:	sub	r0, r9, sl
   23f24:	ldr	r1, [r4, #120]	; 0x78
   23f28:	cmp	r1, r0
   23f2c:	strlt	r0, [r4, #120]	; 0x78
   23f30:	ldr	r0, [r6, #4]
   23f34:	ldr	r1, [r8]
   23f38:	add	r0, r0, r5
   23f3c:	sub	r1, r0, r1
   23f40:	mov	r0, r4
   23f44:	sub	sp, fp, #28
   23f48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f4c:	b	23d80 <__assert_fail@plt+0x120e0>
   23f50:	ldr	r0, [r4, #116]	; 0x74
   23f54:	bl	1a158 <__assert_fail@plt+0x84b8>
   23f58:	mov	r0, #12
   23f5c:	b	23e5c <__assert_fail@plt+0x121bc>
   23f60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f64:	add	fp, sp, #28
   23f68:	sub	sp, sp, #84	; 0x54
   23f6c:	ldr	r9, [r0, #84]	; 0x54
   23f70:	mov	r6, r3
   23f74:	mov	r3, r1
   23f78:	mov	r1, #0
   23f7c:	str	r0, [sp, #44]	; 0x2c
   23f80:	ldr	sl, [fp, #12]
   23f84:	mov	r8, r2
   23f88:	str	r1, [fp, #-52]	; 0xffffffcc
   23f8c:	ldr	r0, [r0, #120]	; 0x78
   23f90:	ldr	r5, [r3, #4]
   23f94:	ldr	r1, [r9]
   23f98:	str	r9, [sp, #20]
   23f9c:	add	r0, r0, sl
   23fa0:	cmp	r5, r0
   23fa4:	ldr	r1, [r1, r2, lsl #3]
   23fa8:	str	r1, [sp, #24]
   23fac:	ble	24480 <__assert_fail@plt+0x127e0>
   23fb0:	add	r4, r3, #8
   23fb4:	ldr	r0, [sp, #44]	; 0x2c
   23fb8:	ldr	r5, [r3]
   23fbc:	ldr	r4, [r4]
   23fc0:	str	r3, [sp, #16]
   23fc4:	ldr	r1, [r0, #40]	; 0x28
   23fc8:	ldr	r2, [r0, #88]	; 0x58
   23fcc:	cmp	r5, #0
   23fd0:	moveq	r5, r6
   23fd4:	str	r1, [sp, #12]
   23fd8:	ldr	r1, [r0, #100]	; 0x64
   23fdc:	str	r4, [r0, #100]	; 0x64
   23fe0:	str	r5, [r0, #40]	; 0x28
   23fe4:	str	r1, [sp, #8]
   23fe8:	sub	r1, r5, #1
   23fec:	bl	22fb8 <__assert_fail@plt+0x11318>
   23ff0:	mov	r7, r0
   23ff4:	cmp	r5, r6
   23ff8:	bne	240c4 <__assert_fail@plt+0x12424>
   23ffc:	mov	r0, #1
   24000:	str	r0, [sp, #52]	; 0x34
   24004:	str	r0, [sp, #48]	; 0x30
   24008:	mov	r0, #4
   2400c:	bl	1a224 <__assert_fail@plt+0x8584>
   24010:	cmp	r0, #0
   24014:	str	r0, [sp, #56]	; 0x38
   24018:	beq	24504 <__assert_fail@plt+0x12864>
   2401c:	ldr	r6, [sp, #24]
   24020:	ldr	r4, [fp, #16]
   24024:	str	r8, [r0]
   24028:	mov	r0, #0
   2402c:	add	r1, sp, #48	; 0x30
   24030:	str	r7, [sp, #40]	; 0x28
   24034:	str	r0, [fp, #-52]	; 0xffffffcc
   24038:	mov	r0, r9
   2403c:	mov	r2, r6
   24040:	mov	r3, r4
   24044:	bl	24524 <__assert_fail@plt+0x12884>
   24048:	ldr	r8, [sp, #44]	; 0x2c
   2404c:	cmp	r0, #0
   24050:	str	r0, [fp, #-52]	; 0xffffffcc
   24054:	bne	244f4 <__assert_fail@plt+0x12854>
   24058:	ldr	r0, [sp, #52]	; 0x34
   2405c:	cmp	r0, #0
   24060:	beq	24088 <__assert_fail@plt+0x123e8>
   24064:	add	r1, sp, #48	; 0x30
   24068:	mov	r0, r8
   2406c:	mov	r2, r5
   24070:	mov	r3, r6
   24074:	str	r4, [sp]
   24078:	bl	2465c <__assert_fail@plt+0x129bc>
   2407c:	cmp	r0, #0
   24080:	str	r0, [fp, #-52]	; 0xffffffcc
   24084:	bne	244f4 <__assert_fail@plt+0x12854>
   24088:	ldr	r3, [sp, #40]	; 0x28
   2408c:	sub	r0, fp, #52	; 0x34
   24090:	add	r2, sp, #48	; 0x30
   24094:	mov	r1, r9
   24098:	bl	22348 <__assert_fail@plt+0x106a8>
   2409c:	mov	r6, r0
   240a0:	cmp	r0, #0
   240a4:	bne	240b4 <__assert_fail@plt+0x12414>
   240a8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   240ac:	cmp	r0, #0
   240b0:	bne	24470 <__assert_fail@plt+0x127d0>
   240b4:	ldr	r0, [r8, #100]	; 0x64
   240b8:	mov	r4, r5
   240bc:	str	r6, [r0, r5, lsl #2]
   240c0:	b	24138 <__assert_fail@plt+0x12498>
   240c4:	ldr	r6, [r4, r5, lsl #2]
   240c8:	mov	r4, r5
   240cc:	cmp	r6, #0
   240d0:	beq	240f8 <__assert_fail@plt+0x12458>
   240d4:	ldrb	r0, [r6, #52]	; 0x34
   240d8:	ldr	r8, [sp, #44]	; 0x2c
   240dc:	tst	r0, #64	; 0x40
   240e0:	bne	24110 <__assert_fail@plt+0x12470>
   240e4:	mov	r0, #0
   240e8:	str	r0, [sp, #52]	; 0x34
   240ec:	str	r0, [sp, #48]	; 0x30
   240f0:	str	r0, [sp, #56]	; 0x38
   240f4:	b	24138 <__assert_fail@plt+0x12498>
   240f8:	ldr	r8, [sp, #44]	; 0x2c
   240fc:	mov	r6, #0
   24100:	str	r6, [sp, #52]	; 0x34
   24104:	str	r6, [sp, #48]	; 0x30
   24108:	str	r6, [sp, #56]	; 0x38
   2410c:	b	24138 <__assert_fail@plt+0x12498>
   24110:	add	r1, r6, #4
   24114:	add	r0, sp, #48	; 0x30
   24118:	str	r7, [sp, #40]	; 0x28
   2411c:	bl	22268 <__assert_fail@plt+0x105c8>
   24120:	cmp	r0, #0
   24124:	str	r0, [fp, #-52]	; 0xffffffcc
   24128:	bne	2451c <__assert_fail@plt+0x1287c>
   2412c:	ldrb	r0, [r6, #52]	; 0x34
   24130:	tst	r0, #64	; 0x40
   24134:	bne	24440 <__assert_fail@plt+0x127a0>
   24138:	cmp	r4, sl
   2413c:	bge	243dc <__assert_fail@plt+0x1273c>
   24140:	add	r5, sp, #48	; 0x30
   24144:	mov	r2, #0
   24148:	ldr	r0, [r8, #120]	; 0x78
   2414c:	cmp	r2, r0
   24150:	bgt	243dc <__assert_fail@plt+0x1273c>
   24154:	mov	r0, #0
   24158:	add	r1, r4, #1
   2415c:	str	r2, [sp, #28]
   24160:	str	r0, [sp, #52]	; 0x34
   24164:	str	r1, [sp, #32]
   24168:	ldr	r0, [r8, #100]	; 0x64
   2416c:	ldr	r0, [r0, r1, lsl #2]
   24170:	cmp	r0, #0
   24174:	beq	24190 <__assert_fail@plt+0x124f0>
   24178:	add	r1, r0, #4
   2417c:	mov	r0, r5
   24180:	bl	21eb8 <__assert_fail@plt+0x10218>
   24184:	cmp	r0, #0
   24188:	str	r0, [fp, #-52]	; 0xffffffcc
   2418c:	bne	24470 <__assert_fail@plt+0x127d0>
   24190:	cmp	r6, #0
   24194:	beq	24310 <__assert_fail@plt+0x12670>
   24198:	mov	r0, #0
   2419c:	ldr	r7, [r8, #84]	; 0x54
   241a0:	str	r0, [fp, #-32]	; 0xffffffe0
   241a4:	str	r0, [fp, #-44]	; 0xffffffd4
   241a8:	str	r0, [fp, #-48]	; 0xffffffd0
   241ac:	str	r0, [fp, #-40]	; 0xffffffd8
   241b0:	ldr	r1, [r6, #20]
   241b4:	cmp	r1, #1
   241b8:	blt	24300 <__assert_fail@plt+0x12660>
   241bc:	mov	r5, #0
   241c0:	str	r4, [sp, #40]	; 0x28
   241c4:	str	r6, [sp, #36]	; 0x24
   241c8:	b	241d4 <__assert_fail@plt+0x12534>
   241cc:	ldr	r0, [r7]
   241d0:	b	241f0 <__assert_fail@plt+0x12550>
   241d4:	ldr	r0, [r6, #24]
   241d8:	ldr	sl, [r0, r5, lsl #2]
   241dc:	ldr	r0, [r7]
   241e0:	add	r1, r0, sl, lsl #3
   241e4:	ldrb	r1, [r1, #6]
   241e8:	tst	r1, #16
   241ec:	bne	2420c <__assert_fail@plt+0x1256c>
   241f0:	add	r1, r0, sl, lsl #3
   241f4:	mov	r0, r8
   241f8:	mov	r2, r4
   241fc:	bl	24f30 <__assert_fail@plt+0x13290>
   24200:	cmp	r0, #0
   24204:	bne	242c8 <__assert_fail@plt+0x12628>
   24208:	b	242e0 <__assert_fail@plt+0x12640>
   2420c:	mov	r0, r7
   24210:	mov	r1, sl
   24214:	mov	r2, r8
   24218:	mov	r3, r4
   2421c:	bl	24c40 <__assert_fail@plt+0x12fa0>
   24220:	cmp	r0, #2
   24224:	blt	242c0 <__assert_fail@plt+0x12620>
   24228:	add	r4, r0, r4
   2422c:	ldr	r0, [r8, #100]	; 0x64
   24230:	ldr	r1, [r7, #12]
   24234:	sub	r8, fp, #48	; 0x30
   24238:	ldr	r0, [r0, r4, lsl #2]
   2423c:	ldr	r6, [r1, sl, lsl #2]
   24240:	mov	r1, #0
   24244:	str	r1, [fp, #-44]	; 0xffffffd4
   24248:	cmp	r0, #0
   2424c:	beq	24268 <__assert_fail@plt+0x125c8>
   24250:	add	r1, r0, #4
   24254:	mov	r0, r8
   24258:	bl	21eb8 <__assert_fail@plt+0x10218>
   2425c:	cmp	r0, #0
   24260:	str	r0, [fp, #-32]	; 0xffffffe0
   24264:	bne	24460 <__assert_fail@plt+0x127c0>
   24268:	mov	r0, r8
   2426c:	mov	r1, r6
   24270:	bl	220cc <__assert_fail@plt+0x1042c>
   24274:	cmp	r0, #0
   24278:	beq	24450 <__assert_fail@plt+0x127b0>
   2427c:	sub	r0, fp, #32
   24280:	mov	r1, r7
   24284:	mov	r2, r8
   24288:	bl	24a44 <__assert_fail@plt+0x12da4>
   2428c:	ldr	r8, [sp, #44]	; 0x2c
   24290:	ldr	r6, [sp, #36]	; 0x24
   24294:	ldr	r1, [r8, #100]	; 0x64
   24298:	str	r0, [r1, r4, lsl #2]
   2429c:	ldr	r0, [r8, #100]	; 0x64
   242a0:	ldr	r0, [r0, r4, lsl #2]
   242a4:	ldr	r4, [sp, #40]	; 0x28
   242a8:	cmp	r0, #0
   242ac:	bne	242c8 <__assert_fail@plt+0x12628>
   242b0:	ldr	r9, [fp, #-32]	; 0xffffffe0
   242b4:	cmp	r9, #0
   242b8:	beq	242c8 <__assert_fail@plt+0x12628>
   242bc:	b	24464 <__assert_fail@plt+0x127c4>
   242c0:	cmp	r0, #0
   242c4:	beq	241cc <__assert_fail@plt+0x1252c>
   242c8:	ldr	r0, [r7, #12]
   242cc:	ldr	r1, [r0, sl, lsl #2]
   242d0:	add	r0, sp, #48	; 0x30
   242d4:	bl	220cc <__assert_fail@plt+0x1042c>
   242d8:	cmp	r0, #0
   242dc:	beq	24450 <__assert_fail@plt+0x127b0>
   242e0:	ldr	r0, [r6, #20]
   242e4:	add	r5, r5, #1
   242e8:	cmp	r5, r0
   242ec:	blt	241d4 <__assert_fail@plt+0x12534>
   242f0:	ldr	r5, [fp, #12]
   242f4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   242f8:	ldr	r9, [sp, #20]
   242fc:	mov	sl, r5
   24300:	bl	1a158 <__assert_fail@plt+0x84b8>
   24304:	mov	r0, #0
   24308:	add	r5, sp, #48	; 0x30
   2430c:	str	r0, [fp, #-52]	; 0xffffffcc
   24310:	ldr	r0, [sp, #52]	; 0x34
   24314:	cmp	r0, #0
   24318:	beq	24370 <__assert_fail@plt+0x126d0>
   2431c:	mov	r6, r4
   24320:	ldr	r4, [sp, #24]
   24324:	ldr	r7, [fp, #16]
   24328:	mov	r0, r9
   2432c:	mov	r1, r5
   24330:	mov	r2, r4
   24334:	mov	r3, r7
   24338:	bl	24524 <__assert_fail@plt+0x12884>
   2433c:	cmp	r0, #0
   24340:	str	r0, [fp, #-52]	; 0xffffffcc
   24344:	bne	24470 <__assert_fail@plt+0x127d0>
   24348:	ldr	r2, [sp, #32]
   2434c:	mov	r0, r8
   24350:	mov	r1, r5
   24354:	mov	r3, r4
   24358:	str	r7, [sp]
   2435c:	bl	2465c <__assert_fail@plt+0x129bc>
   24360:	cmp	r0, #0
   24364:	mov	r4, r6
   24368:	str	r0, [fp, #-52]	; 0xffffffcc
   2436c:	bne	24470 <__assert_fail@plt+0x127d0>
   24370:	ldr	r2, [r8, #88]	; 0x58
   24374:	mov	r0, r8
   24378:	mov	r1, r4
   2437c:	bl	22fb8 <__assert_fail@plt+0x11318>
   24380:	mov	r3, r0
   24384:	sub	r0, fp, #52	; 0x34
   24388:	mov	r1, r9
   2438c:	mov	r2, r5
   24390:	bl	22348 <__assert_fail@plt+0x106a8>
   24394:	mov	r6, r0
   24398:	cmp	r0, #0
   2439c:	bne	243ac <__assert_fail@plt+0x1270c>
   243a0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   243a4:	cmp	r0, #0
   243a8:	bne	24470 <__assert_fail@plt+0x127d0>
   243ac:	ldr	r1, [sp, #32]
   243b0:	ldr	r0, [r8, #100]	; 0x64
   243b4:	ldr	r2, [sp, #28]
   243b8:	cmp	r6, #0
   243bc:	str	r6, [r0, r1, lsl #2]
   243c0:	mov	r0, #0
   243c4:	mov	r4, r1
   243c8:	addeq	r0, r2, #1
   243cc:	cmp	r1, sl
   243d0:	mov	r2, r0
   243d4:	blt	24148 <__assert_fail@plt+0x124a8>
   243d8:	b	243e0 <__assert_fail@plt+0x12740>
   243dc:	mov	r1, r4
   243e0:	ldr	r0, [sp, #56]	; 0x38
   243e4:	mov	r4, r1
   243e8:	bl	1a158 <__assert_fail@plt+0x84b8>
   243ec:	ldr	r0, [r8, #100]	; 0x64
   243f0:	ldr	r1, [sp, #16]
   243f4:	ldr	r0, [r0, sl, lsl #2]
   243f8:	str	r4, [r1]
   243fc:	ldr	r1, [sp, #12]
   24400:	str	r1, [r8, #40]	; 0x28
   24404:	ldr	r1, [sp, #8]
   24408:	cmp	r0, #0
   2440c:	str	r1, [r8, #100]	; 0x64
   24410:	beq	24430 <__assert_fail@plt+0x12790>
   24414:	ldr	r1, [fp, #8]
   24418:	add	r0, r0, #4
   2441c:	bl	222e4 <__assert_fail@plt+0x10644>
   24420:	mov	r7, #0
   24424:	cmp	r0, #0
   24428:	moveq	r7, #1
   2442c:	b	24434 <__assert_fail@plt+0x12794>
   24430:	mov	r7, #1
   24434:	mov	r0, r7
   24438:	sub	sp, fp, #28
   2443c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24440:	mov	r5, r4
   24444:	ldr	r6, [sp, #24]
   24448:	ldr	r4, [fp, #16]
   2444c:	b	24058 <__assert_fail@plt+0x123b8>
   24450:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24454:	bl	1a158 <__assert_fail@plt+0x84b8>
   24458:	mov	r9, #12
   2445c:	b	2446c <__assert_fail@plt+0x127cc>
   24460:	mov	r9, r0
   24464:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24468:	bl	1a158 <__assert_fail@plt+0x84b8>
   2446c:	str	r9, [fp, #-52]	; 0xffffffcc
   24470:	ldr	r0, [sp, #56]	; 0x38
   24474:	bl	1a158 <__assert_fail@plt+0x84b8>
   24478:	ldr	r7, [fp, #-52]	; 0xffffffcc
   2447c:	b	24434 <__assert_fail@plt+0x12794>
   24480:	mvn	r1, #-2147483648	; 0x80000000
   24484:	mov	r7, #12
   24488:	sub	r1, r1, r5
   2448c:	cmp	r1, r0
   24490:	ble	24434 <__assert_fail@plt+0x12794>
   24494:	add	r0, r0, #1
   24498:	add	sl, r0, r5
   2449c:	str	r0, [sp, #40]	; 0x28
   244a0:	cmn	sl, #-1073741823	; 0xc0000001
   244a4:	bhi	24434 <__assert_fail@plt+0x12794>
   244a8:	mov	r4, r3
   244ac:	lsl	r1, sl, #2
   244b0:	mov	r9, r3
   244b4:	ldr	r0, [r4, #8]!
   244b8:	bl	1a2b4 <__assert_fail@plt+0x8614>
   244bc:	cmp	r0, #0
   244c0:	beq	24434 <__assert_fail@plt+0x12794>
   244c4:	ldr	r1, [sp, #40]	; 0x28
   244c8:	str	sl, [r9, #4]
   244cc:	str	r0, [r9, #8]
   244d0:	add	r0, r0, r5, lsl #2
   244d4:	lsl	r2, r1, #2
   244d8:	mov	r1, #0
   244dc:	bl	11b08 <memset@plt>
   244e0:	ldr	r5, [fp, #12]
   244e4:	mov	r3, r9
   244e8:	ldr	r9, [sp, #20]
   244ec:	mov	sl, r5
   244f0:	b	23fb4 <__assert_fail@plt+0x12314>
   244f4:	mov	r7, r0
   244f8:	ldr	r0, [sp, #56]	; 0x38
   244fc:	bl	1a158 <__assert_fail@plt+0x84b8>
   24500:	b	24434 <__assert_fail@plt+0x12794>
   24504:	mov	r0, #0
   24508:	mov	r7, #12
   2450c:	str	r0, [sp, #48]	; 0x30
   24510:	str	r0, [sp, #52]	; 0x34
   24514:	str	r7, [fp, #-52]	; 0xffffffcc
   24518:	b	24434 <__assert_fail@plt+0x12794>
   2451c:	mov	r7, r0
   24520:	b	24434 <__assert_fail@plt+0x12794>
   24524:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24528:	add	fp, sp, #28
   2452c:	sub	sp, sp, #28
   24530:	str	r0, [sp, #12]
   24534:	ldr	r0, [r1, #4]
   24538:	mov	r4, r1
   2453c:	mov	r1, #0
   24540:	mov	sl, r3
   24544:	mov	r8, r2
   24548:	str	r1, [sp, #20]
   2454c:	str	r0, [sp, #16]
   24550:	lsl	r0, r0, #2
   24554:	bl	1a224 <__assert_fail@plt+0x8584>
   24558:	cmp	r0, #0
   2455c:	str	r0, [sp, #24]
   24560:	beq	24654 <__assert_fail@plt+0x129b4>
   24564:	ldr	r0, [r4, #4]
   24568:	cmp	r0, #1
   2456c:	blt	2461c <__assert_fail@plt+0x1297c>
   24570:	mov	r9, #0
   24574:	str	r4, [sp, #8]
   24578:	b	2459c <__assert_fail@plt+0x128fc>
   2457c:	cmn	r4, #1
   24580:	beq	245f8 <__assert_fail@plt+0x12958>
   24584:	ldr	r0, [sp, #12]
   24588:	add	r1, sp, #16
   2458c:	mov	r3, r8
   24590:	str	sl, [sp]
   24594:	bl	24940 <__assert_fail@plt+0x12ca0>
   24598:	b	24600 <__assert_fail@plt+0x12960>
   2459c:	ldr	r0, [r4, #8]
   245a0:	ldr	r1, [sp, #12]
   245a4:	ldr	r2, [r0, r9, lsl #2]
   245a8:	ldr	r1, [r1, #24]
   245ac:	add	r0, r2, r2, lsl #1
   245b0:	add	r1, r1, r0, lsl #2
   245b4:	ldr	r0, [r1, #4]
   245b8:	cmp	r0, #1
   245bc:	blt	245f8 <__assert_fail@plt+0x12958>
   245c0:	ldr	r7, [sp, #12]
   245c4:	ldr	r3, [r1, #8]
   245c8:	mov	r6, #0
   245cc:	ldr	r7, [r7]
   245d0:	ldr	r4, [r3, r6, lsl #2]
   245d4:	add	r5, r7, r4, lsl #3
   245d8:	ldrb	r5, [r5, #4]
   245dc:	cmp	r5, sl
   245e0:	ldreq	r5, [r7, r4, lsl #3]
   245e4:	cmpeq	r5, r8
   245e8:	beq	2457c <__assert_fail@plt+0x128dc>
   245ec:	add	r6, r6, #1
   245f0:	cmp	r6, r0
   245f4:	blt	245d0 <__assert_fail@plt+0x12930>
   245f8:	add	r0, sp, #16
   245fc:	bl	21eb8 <__assert_fail@plt+0x10218>
   24600:	cmp	r0, #0
   24604:	bne	24644 <__assert_fail@plt+0x129a4>
   24608:	ldr	r4, [sp, #8]
   2460c:	add	r9, r9, #1
   24610:	ldr	r0, [r4, #4]
   24614:	cmp	r9, r0
   24618:	blt	2459c <__assert_fail@plt+0x128fc>
   2461c:	ldr	r0, [r4, #8]
   24620:	bl	1a158 <__assert_fail@plt+0x84b8>
   24624:	vldr	d16, [sp, #16]
   24628:	ldr	r0, [sp, #24]
   2462c:	mov	r7, #0
   24630:	str	r0, [r4, #8]
   24634:	vstr	d16, [r4]
   24638:	mov	r0, r7
   2463c:	sub	sp, fp, #28
   24640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24644:	mov	r7, r0
   24648:	ldr	r0, [sp, #24]
   2464c:	bl	1a158 <__assert_fail@plt+0x84b8>
   24650:	b	24638 <__assert_fail@plt+0x12998>
   24654:	mov	r7, #12
   24658:	b	24638 <__assert_fail@plt+0x12998>
   2465c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24660:	add	fp, sp, #28
   24664:	sub	sp, sp, #44	; 0x2c
   24668:	ldr	r6, [r0, #84]	; 0x54
   2466c:	mov	r4, r1
   24670:	mov	r1, r2
   24674:	str	r3, [sp, #4]
   24678:	mov	r5, r2
   2467c:	str	r0, [sp, #24]
   24680:	bl	23cf8 <__assert_fail@plt+0x12058>
   24684:	cmn	r0, #1
   24688:	beq	24934 <__assert_fail@plt+0x12c94>
   2468c:	add	r1, r0, r0, lsl #1
   24690:	str	r5, [sp, #16]
   24694:	str	r6, [sp, #12]
   24698:	str	r4, [sp, #8]
   2469c:	str	r1, [sp]
   246a0:	b	246a8 <__assert_fail@plt+0x12a08>
   246a4:	ldr	r1, [sp]
   246a8:	ldr	r0, [sp, #24]
   246ac:	ldr	r0, [r0, #116]	; 0x74
   246b0:	add	r0, r0, r1, lsl #3
   246b4:	add	r0, r0, #8
   246b8:	ldr	r7, [r0, #-8]
   246bc:	mov	sl, r0
   246c0:	mov	r0, r4
   246c4:	mov	r1, r7
   246c8:	bl	222e4 <__assert_fail@plt+0x10644>
   246cc:	cmp	r0, #0
   246d0:	beq	24898 <__assert_fail@plt+0x12bf8>
   246d4:	ldm	sl, {r0, r1}
   246d8:	add	r1, r1, r5
   246dc:	sub	r9, r1, r0
   246e0:	cmp	r9, r5
   246e4:	bne	2478c <__assert_fail@plt+0x12aec>
   246e8:	ldr	r0, [r6, #20]
   246ec:	add	r1, r7, r7, lsl #1
   246f0:	add	r0, r0, r1, lsl #2
   246f4:	ldr	r0, [r0, #8]
   246f8:	ldr	r7, [r0]
   246fc:	mov	r0, r4
   24700:	mov	r1, r7
   24704:	bl	222e4 <__assert_fail@plt+0x10644>
   24708:	mov	r1, #4
   2470c:	cmp	r0, #0
   24710:	bne	24784 <__assert_fail@plt+0x12ae4>
   24714:	mov	r0, #1
   24718:	str	r0, [sp, #32]
   2471c:	str	r0, [sp, #28]
   24720:	mov	r0, #4
   24724:	bl	1a224 <__assert_fail@plt+0x8584>
   24728:	cmp	r0, #0
   2472c:	str	r0, [sp, #36]	; 0x24
   24730:	beq	248ac <__assert_fail@plt+0x12c0c>
   24734:	mov	r5, #0
   24738:	str	r7, [r0]
   2473c:	ldr	r2, [sp, #4]
   24740:	ldr	r3, [fp, #8]
   24744:	add	r7, sp, #28
   24748:	mov	r0, r6
   2474c:	str	r5, [fp, #-32]	; 0xffffffe0
   24750:	mov	r1, r7
   24754:	bl	24524 <__assert_fail@plt+0x12884>
   24758:	mov	r9, r0
   2475c:	mov	r0, r4
   24760:	mov	r1, r7
   24764:	bl	21eb8 <__assert_fail@plt+0x10218>
   24768:	mov	r8, r0
   2476c:	ldr	r0, [sp, #36]	; 0x24
   24770:	bl	1a158 <__assert_fail@plt+0x84b8>
   24774:	orr	r0, r9, r5
   24778:	mov	r1, #2
   2477c:	orrs	r0, r0, r8
   24780:	bne	248c0 <__assert_fail@plt+0x12c20>
   24784:	ldr	r5, [sp, #16]
   24788:	b	2488c <__assert_fail@plt+0x12bec>
   2478c:	ldr	r0, [sp, #24]
   24790:	ldr	r1, [r6, #12]
   24794:	ldr	r0, [r0, #100]	; 0x64
   24798:	ldr	r8, [r1, r7, lsl #2]
   2479c:	ldr	r0, [r0, r9, lsl #2]
   247a0:	cmp	r0, #0
   247a4:	beq	247cc <__assert_fail@plt+0x12b2c>
   247a8:	add	r4, r0, #4
   247ac:	mov	r1, r8
   247b0:	mov	r0, r4
   247b4:	bl	222e4 <__assert_fail@plt+0x10644>
   247b8:	mov	r1, #4
   247bc:	cmp	r0, #0
   247c0:	beq	247fc <__assert_fail@plt+0x12b5c>
   247c4:	ldr	r6, [sp, #12]
   247c8:	b	24888 <__assert_fail@plt+0x12be8>
   247cc:	mov	r0, #1
   247d0:	str	r0, [sp, #32]
   247d4:	str	r0, [sp, #28]
   247d8:	mov	r0, #4
   247dc:	bl	1a224 <__assert_fail@plt+0x8584>
   247e0:	cmp	r0, #0
   247e4:	str	r0, [sp, #36]	; 0x24
   247e8:	beq	248e0 <__assert_fail@plt+0x12c40>
   247ec:	str	r8, [r0]
   247f0:	mov	r0, #0
   247f4:	str	r0, [fp, #-32]	; 0xffffffe0
   247f8:	b	24830 <__assert_fail@plt+0x12b90>
   247fc:	add	r6, sp, #28
   24800:	mov	r1, r4
   24804:	mov	r0, r6
   24808:	bl	22268 <__assert_fail@plt+0x105c8>
   2480c:	mov	r4, r0
   24810:	str	r0, [fp, #-32]	; 0xffffffe0
   24814:	mov	r0, r6
   24818:	mov	r1, r8
   2481c:	bl	220cc <__assert_fail@plt+0x1042c>
   24820:	cmp	r4, #0
   24824:	bne	24904 <__assert_fail@plt+0x12c64>
   24828:	cmp	r0, #0
   2482c:	beq	24904 <__assert_fail@plt+0x12c64>
   24830:	ldr	r6, [sp, #12]
   24834:	sub	r0, fp, #32
   24838:	add	r2, sp, #28
   2483c:	mov	r1, r6
   24840:	bl	24a44 <__assert_fail@plt+0x12da4>
   24844:	ldr	r4, [sp, #24]
   24848:	ldr	r1, [r4, #100]	; 0x64
   2484c:	str	r0, [r1, r9, lsl #2]
   24850:	ldr	r0, [sp, #36]	; 0x24
   24854:	bl	1a158 <__assert_fail@plt+0x84b8>
   24858:	ldr	r0, [r4, #100]	; 0x64
   2485c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   24860:	ldr	r0, [r0, r9, lsl #2]
   24864:	cmp	r2, #0
   24868:	mov	r1, r2
   2486c:	movwne	r1, #1
   24870:	clz	r0, r0
   24874:	lsr	r0, r0, #5
   24878:	ands	r1, r0, r1
   2487c:	ldr	r0, [sp, #20]
   24880:	movne	r0, r2
   24884:	str	r0, [sp, #20]
   24888:	ldr	r4, [sp, #8]
   2488c:	cmp	r1, #0
   24890:	cmpne	r1, #4
   24894:	bne	24924 <__assert_fail@plt+0x12c84>
   24898:	ldrb	r1, [sl, #12]
   2489c:	add	r0, sl, #24
   248a0:	cmp	r1, #0
   248a4:	bne	246b8 <__assert_fail@plt+0x12a18>
   248a8:	b	24934 <__assert_fail@plt+0x12c94>
   248ac:	mov	r0, #0
   248b0:	mov	r5, #12
   248b4:	str	r0, [sp, #28]
   248b8:	str	r0, [sp, #32]
   248bc:	b	2473c <__assert_fail@plt+0x12a9c>
   248c0:	cmp	r9, #0
   248c4:	mov	r1, #1
   248c8:	movne	r8, r9
   248cc:	cmp	r5, #0
   248d0:	movne	r8, r5
   248d4:	str	r8, [fp, #-32]	; 0xffffffe0
   248d8:	str	r8, [sp, #20]
   248dc:	b	24784 <__assert_fail@plt+0x12ae4>
   248e0:	mov	r0, #0
   248e4:	mov	r1, #12
   248e8:	str	r0, [sp, #28]
   248ec:	str	r0, [sp, #32]
   248f0:	mov	r0, #12
   248f4:	str	r1, [fp, #-32]	; 0xffffffe0
   248f8:	mov	r1, #1
   248fc:	str	r0, [sp, #20]
   24900:	b	247c4 <__assert_fail@plt+0x12b24>
   24904:	ldr	r0, [sp, #36]	; 0x24
   24908:	bl	1a158 <__assert_fail@plt+0x84b8>
   2490c:	cmp	r4, #0
   24910:	mov	r1, #1
   24914:	movweq	r4, #12
   24918:	str	r4, [fp, #-32]	; 0xffffffe0
   2491c:	str	r4, [sp, #20]
   24920:	b	247c4 <__assert_fail@plt+0x12b24>
   24924:	cmp	r1, #2
   24928:	beq	246a4 <__assert_fail@plt+0x12a04>
   2492c:	ldr	r0, [sp, #20]
   24930:	b	24938 <__assert_fail@plt+0x12c98>
   24934:	mov	r0, #0
   24938:	sub	sp, fp, #28
   2493c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24940:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24944:	add	fp, sp, #24
   24948:	sub	sp, sp, #8
   2494c:	mov	r6, r0
   24950:	mov	r4, r1
   24954:	mov	r0, r1
   24958:	mov	r1, r2
   2495c:	mov	r5, r3
   24960:	mov	r7, r2
   24964:	bl	222e4 <__assert_fail@plt+0x10644>
   24968:	cmp	r0, #0
   2496c:	beq	2497c <__assert_fail@plt+0x12cdc>
   24970:	mov	r0, #0
   24974:	sub	sp, fp, #24
   24978:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2497c:	ldr	r8, [fp, #8]
   24980:	ldr	r0, [r6]
   24984:	add	r1, r0, r7, lsl #3
   24988:	ldrb	r1, [r1, #4]
   2498c:	cmp	r1, r8
   24990:	ldreq	r0, [r0, r7, lsl #3]
   24994:	cmpeq	r0, r5
   24998:	beq	24a20 <__assert_fail@plt+0x12d80>
   2499c:	mov	r0, r4
   249a0:	mov	r1, r7
   249a4:	bl	220cc <__assert_fail@plt+0x1042c>
   249a8:	cmp	r0, #0
   249ac:	beq	24a3c <__assert_fail@plt+0x12d9c>
   249b0:	ldr	r0, [r6, #20]
   249b4:	add	r7, r7, r7, lsl #1
   249b8:	add	r1, r0, r7, lsl #2
   249bc:	ldr	r2, [r1, #4]
   249c0:	cmp	r2, #2
   249c4:	beq	249d4 <__assert_fail@plt+0x12d34>
   249c8:	cmp	r2, #0
   249cc:	bne	249fc <__assert_fail@plt+0x12d5c>
   249d0:	b	24970 <__assert_fail@plt+0x12cd0>
   249d4:	ldr	r0, [r1, #8]
   249d8:	mov	r1, r4
   249dc:	mov	r3, r5
   249e0:	ldr	r2, [r0, #4]
   249e4:	mov	r0, r6
   249e8:	str	r8, [sp]
   249ec:	bl	24940 <__assert_fail@plt+0x12ca0>
   249f0:	cmp	r0, #0
   249f4:	bne	24974 <__assert_fail@plt+0x12cd4>
   249f8:	ldr	r0, [r6, #20]
   249fc:	add	r0, r0, r7, lsl #2
   24a00:	ldr	r0, [r0, #8]
   24a04:	ldr	r7, [r0]
   24a08:	mov	r0, r4
   24a0c:	mov	r1, r7
   24a10:	bl	222e4 <__assert_fail@plt+0x10644>
   24a14:	cmp	r0, #0
   24a18:	beq	24980 <__assert_fail@plt+0x12ce0>
   24a1c:	b	24970 <__assert_fail@plt+0x12cd0>
   24a20:	cmp	r8, #9
   24a24:	bne	24970 <__assert_fail@plt+0x12cd0>
   24a28:	mov	r0, r4
   24a2c:	mov	r1, r7
   24a30:	bl	220cc <__assert_fail@plt+0x1042c>
   24a34:	cmp	r0, #0
   24a38:	bne	24970 <__assert_fail@plt+0x12cd0>
   24a3c:	mov	r0, #12
   24a40:	b	24974 <__assert_fail@plt+0x12cd4>
   24a44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a48:	add	fp, sp, #28
   24a4c:	sub	sp, sp, #4
   24a50:	ldr	sl, [r2, #4]
   24a54:	cmp	sl, #0
   24a58:	beq	24c0c <__assert_fail@plt+0x12f6c>
   24a5c:	mov	r4, r2
   24a60:	mov	r9, r1
   24a64:	cmp	sl, #1
   24a68:	mov	r6, sl
   24a6c:	str	r0, [sp]
   24a70:	blt	24a90 <__assert_fail@plt+0x12df0>
   24a74:	ldr	r1, [r4, #8]
   24a78:	mov	r2, sl
   24a7c:	mov	r6, sl
   24a80:	ldr	r3, [r1], #4
   24a84:	subs	r2, r2, #1
   24a88:	add	r6, r3, r6
   24a8c:	bne	24a80 <__assert_fail@plt+0x12de0>
   24a90:	ldr	r1, [r9, #68]	; 0x44
   24a94:	ldr	r2, [r9, #32]
   24a98:	and	r1, r1, r6
   24a9c:	add	r3, r1, r1, lsl #1
   24aa0:	ldr	r1, [r2, r3, lsl #2]
   24aa4:	cmp	r1, #1
   24aa8:	blt	24b1c <__assert_fail@plt+0x12e7c>
   24aac:	add	r2, r2, r3, lsl #2
   24ab0:	sub	ip, sl, #1
   24ab4:	mov	r5, #0
   24ab8:	ldr	lr, [r2, #8]
   24abc:	b	24af0 <__assert_fail@plt+0x12e50>
   24ac0:	mov	r3, ip
   24ac4:	add	r2, r3, #1
   24ac8:	cmp	r2, #1
   24acc:	blt	24c00 <__assert_fail@plt+0x12f60>
   24ad0:	ldr	r2, [r4, #8]
   24ad4:	ldr	r0, [r7, #12]
   24ad8:	ldr	r2, [r2, r3, lsl #2]
   24adc:	ldr	r0, [r0, r3, lsl #2]
   24ae0:	sub	r3, r3, #1
   24ae4:	cmp	r0, r2
   24ae8:	beq	24ac4 <__assert_fail@plt+0x12e24>
   24aec:	b	24b10 <__assert_fail@plt+0x12e70>
   24af0:	cmp	r4, #0
   24af4:	beq	24b10 <__assert_fail@plt+0x12e70>
   24af8:	ldr	r7, [lr, r5, lsl #2]
   24afc:	ldr	r3, [r7]
   24b00:	cmp	r6, r3
   24b04:	ldreq	r3, [r7, #8]
   24b08:	cmpeq	r3, sl
   24b0c:	beq	24ac0 <__assert_fail@plt+0x12e20>
   24b10:	add	r5, r5, #1
   24b14:	cmp	r5, r1
   24b18:	blt	24af0 <__assert_fail@plt+0x12e50>
   24b1c:	mov	r0, #56	; 0x38
   24b20:	mov	r1, #1
   24b24:	bl	19ed0 <__assert_fail@plt+0x8230>
   24b28:	cmp	r0, #0
   24b2c:	beq	24c2c <__assert_fail@plt+0x12f8c>
   24b30:	add	r5, r0, #4
   24b34:	mov	r7, r0
   24b38:	mov	r1, r4
   24b3c:	mov	r0, r5
   24b40:	bl	22268 <__assert_fail@plt+0x105c8>
   24b44:	cmp	r0, #0
   24b48:	bne	24c18 <__assert_fail@plt+0x12f78>
   24b4c:	str	r5, [r7, #40]	; 0x28
   24b50:	ldr	r0, [r4, #4]
   24b54:	cmp	r0, #1
   24b58:	blt	24be8 <__assert_fail@plt+0x12f48>
   24b5c:	ldr	r1, [r4, #8]
   24b60:	ldr	sl, [r9]
   24b64:	movw	ip, #65280	; 0xff00
   24b68:	mov	lr, #32
   24b6c:	movt	ip, #3
   24b70:	add	r5, ip, #255	; 0xff
   24b74:	ldr	r2, [r1]
   24b78:	add	r3, sl, r2, lsl #3
   24b7c:	ldr	r2, [r3, #4]!
   24b80:	and	r4, r2, r5
   24b84:	cmp	r4, #1
   24b88:	beq	24bdc <__assert_fail@plt+0x12f3c>
   24b8c:	ldrb	r8, [r7, #52]	; 0x34
   24b90:	and	r4, lr, r2, lsr #15
   24b94:	uxtb	r2, r2
   24b98:	cmp	r2, #12
   24b9c:	orr	r4, r8, r4
   24ba0:	strb	r4, [r7, #52]	; 0x34
   24ba4:	beq	24bd4 <__assert_fail@plt+0x12f34>
   24ba8:	cmp	r2, #4
   24bac:	beq	24bc0 <__assert_fail@plt+0x12f20>
   24bb0:	cmp	r2, #2
   24bb4:	bne	24bc8 <__assert_fail@plt+0x12f28>
   24bb8:	orr	r2, r4, #16
   24bbc:	b	24bd8 <__assert_fail@plt+0x12f38>
   24bc0:	orr	r2, r4, #64	; 0x40
   24bc4:	b	24bd8 <__assert_fail@plt+0x12f38>
   24bc8:	ldr	r2, [r3]
   24bcc:	tst	r2, ip
   24bd0:	beq	24bdc <__assert_fail@plt+0x12f3c>
   24bd4:	orr	r2, r4, #128	; 0x80
   24bd8:	strb	r2, [r7, #52]	; 0x34
   24bdc:	add	r1, r1, #4
   24be0:	subs	r0, r0, #1
   24be4:	bne	24b74 <__assert_fail@plt+0x12ed4>
   24be8:	mov	r0, r9
   24bec:	mov	r1, r7
   24bf0:	mov	r2, r6
   24bf4:	bl	22684 <__assert_fail@plt+0x109e4>
   24bf8:	cmp	r0, #0
   24bfc:	bne	24c24 <__assert_fail@plt+0x12f84>
   24c00:	mov	r0, r7
   24c04:	sub	sp, fp, #28
   24c08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24c0c:	mov	r7, #0
   24c10:	str	r7, [r0]
   24c14:	b	24c00 <__assert_fail@plt+0x12f60>
   24c18:	mov	r0, r7
   24c1c:	bl	1a158 <__assert_fail@plt+0x84b8>
   24c20:	b	24c2c <__assert_fail@plt+0x12f8c>
   24c24:	mov	r0, r7
   24c28:	bl	1d7b4 <__assert_fail@plt+0xbb14>
   24c2c:	ldr	r1, [sp]
   24c30:	mov	r0, #12
   24c34:	mov	r7, #0
   24c38:	str	r0, [r1]
   24c3c:	b	24c00 <__assert_fail@plt+0x12f60>
   24c40:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   24c44:	add	fp, sp, #24
   24c48:	ldr	lr, [r0]
   24c4c:	add	r7, lr, r1, lsl #3
   24c50:	ldrb	r9, [r7, #4]
   24c54:	cmp	r9, #7
   24c58:	beq	24e28 <__assert_fail@plt+0x13188>
   24c5c:	ldr	ip, [r2, #80]	; 0x50
   24c60:	mov	r6, #1
   24c64:	cmp	ip, #1
   24c68:	beq	24ca4 <__assert_fail@plt+0x13004>
   24c6c:	ldr	r5, [r2, #28]
   24c70:	add	r7, r3, #1
   24c74:	cmp	r7, r5
   24c78:	bge	24ca4 <__assert_fail@plt+0x13004>
   24c7c:	ldr	r6, [r2, #8]
   24c80:	add	r7, r6, r3, lsl #2
   24c84:	mov	r6, #1
   24c88:	ldr	r4, [r7, r6, lsl #2]
   24c8c:	cmn	r4, #1
   24c90:	bne	24ca4 <__assert_fail@plt+0x13004>
   24c94:	add	r6, r6, #1
   24c98:	add	r4, r3, r6
   24c9c:	cmp	r4, r5
   24ca0:	blt	24c88 <__assert_fail@plt+0x12fe8>
   24ca4:	mov	r8, #0
   24ca8:	cmp	r9, #5
   24cac:	bne	24cf0 <__assert_fail@plt+0x13050>
   24cb0:	cmp	r6, #2
   24cb4:	blt	24e18 <__assert_fail@plt+0x13178>
   24cb8:	ldr	r0, [r0, #128]	; 0x80
   24cbc:	tst	r0, #64	; 0x40
   24cc0:	bne	24cd4 <__assert_fail@plt+0x13034>
   24cc4:	ldr	r1, [r2, #4]
   24cc8:	ldrb	r1, [r1, r3]
   24ccc:	cmp	r1, #10
   24cd0:	beq	24e18 <__assert_fail@plt+0x13178>
   24cd4:	tst	r0, #128	; 0x80
   24cd8:	beq	24e14 <__assert_fail@plt+0x13174>
   24cdc:	ldr	r0, [r2, #4]
   24ce0:	ldrb	r0, [r0, r3]
   24ce4:	cmp	r0, #0
   24ce8:	movne	r8, r6
   24cec:	b	24e18 <__assert_fail@plt+0x13178>
   24cf0:	cmp	r9, #6
   24cf4:	bne	24e18 <__assert_fail@plt+0x13178>
   24cf8:	cmp	r6, #2
   24cfc:	blt	24e18 <__assert_fail@plt+0x13178>
   24d00:	ldr	r7, [lr, r1, lsl #3]
   24d04:	ldr	r0, [r7, #32]
   24d08:	cmp	r0, #0
   24d0c:	bne	24d28 <__assert_fail@plt+0x13088>
   24d10:	ldr	r1, [r7, #36]	; 0x24
   24d14:	cmp	r1, #0
   24d18:	bne	24d28 <__assert_fail@plt+0x13088>
   24d1c:	ldr	r1, [r7, #20]
   24d20:	cmp	r1, #0
   24d24:	beq	24e20 <__assert_fail@plt+0x13180>
   24d28:	cmp	ip, #1
   24d2c:	bne	24d3c <__assert_fail@plt+0x1309c>
   24d30:	ldr	r1, [r2, #4]
   24d34:	ldrb	r5, [r1, r3]
   24d38:	b	24d44 <__assert_fail@plt+0x130a4>
   24d3c:	ldr	r1, [r2, #8]
   24d40:	ldr	r5, [r1, r3, lsl #2]
   24d44:	ldr	r1, [r7, #20]
   24d48:	cmp	r1, #1
   24d4c:	blt	24d70 <__assert_fail@plt+0x130d0>
   24d50:	ldr	r2, [r7]
   24d54:	mov	r3, #0
   24d58:	ldr	r4, [r2, r3, lsl #2]
   24d5c:	cmp	r5, r4
   24d60:	beq	24dec <__assert_fail@plt+0x1314c>
   24d64:	add	r3, r3, #1
   24d68:	cmp	r3, r1
   24d6c:	blt	24d58 <__assert_fail@plt+0x130b8>
   24d70:	ldr	r1, [r7, #36]	; 0x24
   24d74:	cmp	r1, #1
   24d78:	blt	24dac <__assert_fail@plt+0x1310c>
   24d7c:	mov	r4, #0
   24d80:	ldr	r0, [r7, #12]
   24d84:	ldr	r1, [r0, r4, lsl #2]
   24d88:	mov	r0, r5
   24d8c:	bl	11844 <iswctype@plt>
   24d90:	cmp	r0, #0
   24d94:	bne	24dec <__assert_fail@plt+0x1314c>
   24d98:	ldr	r0, [r7, #36]	; 0x24
   24d9c:	add	r4, r4, #1
   24da0:	cmp	r4, r0
   24da4:	blt	24d80 <__assert_fail@plt+0x130e0>
   24da8:	ldr	r0, [r7, #32]
   24dac:	cmp	r0, #1
   24db0:	blt	24de4 <__assert_fail@plt+0x13144>
   24db4:	ldr	r1, [r7, #4]
   24db8:	mov	r2, #0
   24dbc:	ldr	r3, [r1, r2, lsl #2]
   24dc0:	cmp	r3, r5
   24dc4:	bhi	24dd8 <__assert_fail@plt+0x13138>
   24dc8:	ldr	r3, [r7, #8]
   24dcc:	ldr	r3, [r3, r2, lsl #2]
   24dd0:	cmp	r5, r3
   24dd4:	bls	24dec <__assert_fail@plt+0x1314c>
   24dd8:	add	r2, r2, #1
   24ddc:	cmp	r2, r0
   24de0:	blt	24dbc <__assert_fail@plt+0x1311c>
   24de4:	mov	r0, #0
   24de8:	b	24df0 <__assert_fail@plt+0x13150>
   24dec:	mov	r0, r6
   24df0:	ldrb	r1, [r7, #16]
   24df4:	tst	r1, #1
   24df8:	bne	24e04 <__assert_fail@plt+0x13164>
   24dfc:	mov	r8, r0
   24e00:	b	24e18 <__assert_fail@plt+0x13178>
   24e04:	cmp	r0, #0
   24e08:	bgt	24e18 <__assert_fail@plt+0x13178>
   24e0c:	cmp	r6, #1
   24e10:	movle	r6, #1
   24e14:	mov	r8, r6
   24e18:	mov	r0, r8
   24e1c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24e20:	mov	r5, #0
   24e24:	b	24d44 <__assert_fail@plt+0x130a4>
   24e28:	ldr	r0, [r2, #4]
   24e2c:	mov	r8, #0
   24e30:	ldrb	r6, [r0, r3]
   24e34:	cmp	r6, #194	; 0xc2
   24e38:	bcc	24e18 <__assert_fail@plt+0x13178>
   24e3c:	ldr	r1, [r2, #48]	; 0x30
   24e40:	add	r2, r3, #2
   24e44:	cmp	r2, r1
   24e48:	bgt	24e18 <__assert_fail@plt+0x13178>
   24e4c:	add	r0, r0, r3
   24e50:	cmp	r6, #223	; 0xdf
   24e54:	ldrb	r7, [r0, #1]
   24e58:	bhi	24e78 <__assert_fail@plt+0x131d8>
   24e5c:	mov	r8, #2
   24e60:	cmp	r7, #191	; 0xbf
   24e64:	sxtb	r0, r7
   24e68:	movwhi	r8, #0
   24e6c:	cmn	r0, #1
   24e70:	movwgt	r8, #0
   24e74:	b	24e18 <__assert_fail@plt+0x13178>
   24e78:	cmp	r6, #239	; 0xef
   24e7c:	bhi	24e98 <__assert_fail@plt+0x131f8>
   24e80:	mov	r2, #3
   24e84:	cmp	r6, #224	; 0xe0
   24e88:	bne	24ef4 <__assert_fail@plt+0x13254>
   24e8c:	cmp	r7, #160	; 0xa0
   24e90:	bcc	24e18 <__assert_fail@plt+0x13178>
   24e94:	b	24ef4 <__assert_fail@plt+0x13254>
   24e98:	cmp	r6, #247	; 0xf7
   24e9c:	bhi	24eb8 <__assert_fail@plt+0x13218>
   24ea0:	mov	r2, #4
   24ea4:	cmp	r6, #240	; 0xf0
   24ea8:	bne	24ef4 <__assert_fail@plt+0x13254>
   24eac:	cmp	r7, #144	; 0x90
   24eb0:	bcc	24e18 <__assert_fail@plt+0x13178>
   24eb4:	b	24ef4 <__assert_fail@plt+0x13254>
   24eb8:	cmp	r6, #251	; 0xfb
   24ebc:	bhi	24ed8 <__assert_fail@plt+0x13238>
   24ec0:	mov	r2, #5
   24ec4:	cmp	r6, #248	; 0xf8
   24ec8:	bne	24ef4 <__assert_fail@plt+0x13254>
   24ecc:	cmp	r7, #136	; 0x88
   24ed0:	bcc	24e18 <__assert_fail@plt+0x13178>
   24ed4:	b	24ef4 <__assert_fail@plt+0x13254>
   24ed8:	cmp	r6, #253	; 0xfd
   24edc:	bhi	24e18 <__assert_fail@plt+0x13178>
   24ee0:	mov	r2, #6
   24ee4:	cmp	r6, #252	; 0xfc
   24ee8:	bne	24ef4 <__assert_fail@plt+0x13254>
   24eec:	cmp	r7, #132	; 0x84
   24ef0:	bcc	24e18 <__assert_fail@plt+0x13178>
   24ef4:	add	r3, r2, r3
   24ef8:	cmp	r3, r1
   24efc:	bgt	24e18 <__assert_fail@plt+0x13178>
   24f00:	mov	r1, #1
   24f04:	ldrb	r3, [r0, r1]
   24f08:	sxtb	r7, r3
   24f0c:	cmn	r7, #1
   24f10:	bgt	24e18 <__assert_fail@plt+0x13178>
   24f14:	cmp	r3, #191	; 0xbf
   24f18:	bhi	24e18 <__assert_fail@plt+0x13178>
   24f1c:	add	r1, r1, #1
   24f20:	cmp	r1, r2
   24f24:	bcc	24f04 <__assert_fail@plt+0x13264>
   24f28:	mov	r8, r2
   24f2c:	b	24e18 <__assert_fail@plt+0x13178>
   24f30:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24f34:	add	fp, sp, #24
   24f38:	ldr	r5, [r1, #4]
   24f3c:	mvn	r3, #0
   24f40:	mov	r8, #0
   24f44:	uxtab	r4, r3, r5
   24f48:	cmp	r4, #6
   24f4c:	bhi	2505c <__assert_fail@plt+0x133bc>
   24f50:	ldr	r3, [r0, #4]
   24f54:	ldrb	r3, [r3, r2]
   24f58:	add	r7, pc, #4
   24f5c:	sxtb	r6, r3
   24f60:	ldr	pc, [r7, r4, lsl #2]
   24f64:	andeq	r4, r2, r0, lsl #31
   24f68:	andeq	r5, r2, ip, asr r0
   24f6c:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   24f70:	andeq	r5, r2, ip, asr r0
   24f74:			; <UNDEFINED> instruction: 0x00024fbc
   24f78:	andeq	r5, r2, ip, asr r0
   24f7c:			; <UNDEFINED> instruction: 0x00024fb4
   24f80:	ldrb	r1, [r1]
   24f84:	uxtb	r3, r6
   24f88:	cmp	r1, r3
   24f8c:	beq	24ff0 <__assert_fail@plt+0x13350>
   24f90:	b	2505c <__assert_fail@plt+0x133bc>
   24f94:	ldr	r1, [r1]
   24f98:	ubfx	r7, r3, #5, #3
   24f9c:	and	r3, r3, #31
   24fa0:	ldr	r1, [r1, r7, lsl #2]
   24fa4:	mov	r7, #1
   24fa8:	tst	r1, r7, lsl r3
   24fac:	bne	24ff0 <__assert_fail@plt+0x13350>
   24fb0:	b	2505c <__assert_fail@plt+0x133bc>
   24fb4:	cmp	r6, #0
   24fb8:	blt	2505c <__assert_fail@plt+0x133bc>
   24fbc:	cmp	r3, #0
   24fc0:	beq	24fe0 <__assert_fail@plt+0x13340>
   24fc4:	cmp	r3, #10
   24fc8:	bne	24ff0 <__assert_fail@plt+0x13350>
   24fcc:	ldr	r1, [r0, #84]	; 0x54
   24fd0:	ldrb	r1, [r1, #128]	; 0x80
   24fd4:	tst	r1, #64	; 0x40
   24fd8:	bne	24ff0 <__assert_fail@plt+0x13350>
   24fdc:	b	2505c <__assert_fail@plt+0x133bc>
   24fe0:	ldr	r1, [r0, #84]	; 0x54
   24fe4:	ldrb	r1, [r1, #128]	; 0x80
   24fe8:	tst	r1, #128	; 0x80
   24fec:	bne	2505c <__assert_fail@plt+0x133bc>
   24ff0:	movw	r1, #65280	; 0xff00
   24ff4:	movt	r1, #3
   24ff8:	tst	r5, r1
   24ffc:	beq	25058 <__assert_fail@plt+0x133b8>
   25000:	ldr	r3, [r0, #88]	; 0x58
   25004:	mov	r1, r2
   25008:	mov	r2, r3
   2500c:	bl	22fb8 <__assert_fail@plt+0x11318>
   25010:	and	r1, r0, #1
   25014:	tst	r5, #1024	; 0x400
   25018:	beq	25024 <__assert_fail@plt+0x13384>
   2501c:	cmp	r1, #0
   25020:	beq	2505c <__assert_fail@plt+0x133bc>
   25024:	tst	r5, #2048	; 0x800
   25028:	cmpne	r1, #0
   2502c:	bne	2505c <__assert_fail@plt+0x133bc>
   25030:	tst	r5, #8192	; 0x2000
   25034:	beq	25040 <__assert_fail@plt+0x133a0>
   25038:	ands	r1, r0, #2
   2503c:	beq	2505c <__assert_fail@plt+0x133bc>
   25040:	and	r1, r5, #32768	; 0x8000
   25044:	mov	r2, #1
   25048:	and	r0, r0, #8
   2504c:	eor	r1, r2, r1, lsr #15
   25050:	orr	r0, r1, r0, lsr #3
   25054:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   25058:	mov	r8, #1
   2505c:	mov	r0, r8
   25060:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   25064:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25068:	add	fp, sp, #28
   2506c:	sub	sp, sp, #4
   25070:	vpush	{d8-d11}
   25074:	sub	sp, sp, #2128	; 0x850
   25078:	sub	sp, sp, #12288	; 0x3000
   2507c:	sub	lr, fp, #1024	; 0x400
   25080:	mov	r8, #0
   25084:	vmov.i32	q4, #0	; 0x00000000
   25088:	sub	r4, lr, #72	; 0x48
   2508c:	str	r8, [r1, #44]	; 0x2c
   25090:	str	r8, [r1, #48]	; 0x30
   25094:	mov	r2, r4
   25098:	vst1.64	{d8-d9}, [r2]!
   2509c:	vst1.64	{d8-d9}, [r2]
   250a0:	ldr	r2, [r1, #8]
   250a4:	cmp	r2, #1
   250a8:	blt	25a5c <__assert_fail@plt+0x13dbc>
   250ac:	sub	lr, fp, #2048	; 0x800
   250b0:	add	sl, r0, #96	; 0x60
   250b4:	mov	r3, #0
   250b8:	mov	r8, #0
   250bc:	str	r1, [sp, #12]
   250c0:	str	r0, [sp, #20]
   250c4:	sub	r9, lr, #72	; 0x48
   250c8:	str	sl, [sp]
   250cc:	ldr	r2, [r1, #12]
   250d0:	ldr	r5, [r0]
   250d4:	str	r3, [sp, #16]
   250d8:	ldr	r6, [r2, r3, lsl #2]
   250dc:	add	r2, r5, r6, lsl #3
   250e0:	ldr	r7, [r2, #4]
   250e4:	uxtb	ip, r7
   250e8:	cmp	ip, #1
   250ec:	bne	251c4 <__assert_fail@plt+0x13524>
   250f0:	ldrb	r0, [r5, r6, lsl #3]
   250f4:	mov	r3, #1
   250f8:	ubfx	r1, r0, #5, #3
   250fc:	and	r0, r0, #31
   25100:	ldr	r2, [r4, r1, lsl #2]
   25104:	orr	r0, r2, r3, lsl r0
   25108:	str	r0, [r4, r1, lsl #2]
   2510c:	movw	r0, #65280	; 0xff00
   25110:	sub	lr, fp, #3072	; 0xc00
   25114:	movt	r0, #3
   25118:	sub	r3, lr, #72	; 0x48
   2511c:	ands	r0, r7, r0
   25120:	beq	253f8 <__assert_fail@plt+0x13758>
   25124:	tst	r7, #8192	; 0x2000
   25128:	beq	2514c <__assert_fail@plt+0x134ac>
   2512c:	ldr	r0, [fp, #-1096]	; 0xfffffbb8
   25130:	mov	r1, r4
   25134:	vst1.64	{d8-d9}, [r1]!
   25138:	vst1.64	{d8-d9}, [r1]
   2513c:	tst	r0, #1024	; 0x400
   25140:	beq	2534c <__assert_fail@plt+0x136ac>
   25144:	mov	r0, #1024	; 0x400
   25148:	str	r0, [fp, #-1096]	; 0xfffffbb8
   2514c:	tst	r7, #32768	; 0x8000
   25150:	bne	25340 <__assert_fail@plt+0x136a0>
   25154:	tst	r7, #1024	; 0x400
   25158:	beq	25328 <__assert_fail@plt+0x13688>
   2515c:	movw	r0, #255	; 0xff
   25160:	movt	r0, #64	; 0x40
   25164:	and	r0, r7, r0
   25168:	cmp	r0, #1
   2516c:	beq	25340 <__assert_fail@plt+0x136a0>
   25170:	ldr	r1, [sp, #20]
   25174:	vmov.i32	q8, #0	; 0x00000000
   25178:	ldr	r0, [r1, #92]	; 0x5c
   2517c:	cmp	r0, #1
   25180:	ble	252d8 <__assert_fail@plt+0x13638>
   25184:	ldr	r0, [r1, #60]	; 0x3c
   25188:	mov	r1, #0
   2518c:	add	r2, sl, r1
   25190:	add	r3, r0, r1
   25194:	vld1.32	{d20-d21}, [r2]
   25198:	vld1.32	{d18-d19}, [r3]
   2519c:	add	r2, r4, r1
   251a0:	add	r1, r1, #16
   251a4:	vld1.32	{d22-d23}, [r2]
   251a8:	cmp	r1, #32
   251ac:	vorn	q9, q10, q9
   251b0:	vand	q9, q11, q9
   251b4:	vorr	q8, q9, q8
   251b8:	vst1.32	{d18-d19}, [r2]
   251bc:	bne	2518c <__assert_fail@plt+0x134ec>
   251c0:	b	25304 <__assert_fail@plt+0x13664>
   251c4:	cmp	ip, #7
   251c8:	beq	2520c <__assert_fail@plt+0x1356c>
   251cc:	cmp	ip, #5
   251d0:	beq	25258 <__assert_fail@plt+0x135b8>
   251d4:	cmp	ip, #3
   251d8:	bne	2565c <__assert_fail@plt+0x139bc>
   251dc:	ldr	r0, [r5, r6, lsl #3]
   251e0:	mov	r1, #0
   251e4:	add	r2, r4, r1
   251e8:	add	r3, r0, r1
   251ec:	add	r1, r1, #16
   251f0:	vld1.32	{d16-d17}, [r3]
   251f4:	vld1.32	{d18-d19}, [r2]
   251f8:	cmp	r1, #32
   251fc:	vorr	q8, q9, q8
   25200:	vst1.32	{d16-d17}, [r2]
   25204:	bne	251e4 <__assert_fail@plt+0x13544>
   25208:	b	2510c <__assert_fail@plt+0x1346c>
   2520c:	mvn	r1, #0
   25210:	str	r1, [fp, #-1084]	; 0xfffffbc4
   25214:	str	r1, [fp, #-1088]	; 0xfffffbc0
   25218:	str	r1, [fp, #-1092]	; 0xfffffbbc
   2521c:	str	r1, [fp, #-1096]	; 0xfffffbb8
   25220:	ldr	r1, [r0, #128]	; 0x80
   25224:	and	r0, r1, #128	; 0x80
   25228:	ands	r1, r1, #64	; 0x40
   2522c:	beq	25238 <__assert_fail@plt+0x13598>
   25230:	cmp	r0, #0
   25234:	beq	2510c <__assert_fail@plt+0x1346c>
   25238:	cmp	r1, #0
   2523c:	mvn	r1, #1
   25240:	movweq	r1, #64510	; 0xfbfe
   25244:	movteq	r1, #65535	; 0xffff
   25248:	cmp	r0, #0
   2524c:	mvneq	r1, #1024	; 0x400
   25250:	str	r1, [fp, #-1096]	; 0xfffffbb8
   25254:	b	2510c <__assert_fail@plt+0x1346c>
   25258:	ldr	r1, [r0, #92]	; 0x5c
   2525c:	cmp	r1, #2
   25260:	blt	25294 <__assert_fail@plt+0x135f4>
   25264:	ldr	r0, [r0, #60]	; 0x3c
   25268:	mov	r1, #0
   2526c:	add	r2, r4, r1
   25270:	add	r3, r0, r1
   25274:	add	r1, r1, #16
   25278:	vld1.32	{d16-d17}, [r3]
   2527c:	vld1.32	{d18-d19}, [r2]
   25280:	cmp	r1, #32
   25284:	vorr	q8, q9, q8
   25288:	vst1.32	{d16-d17}, [r2]
   2528c:	bne	2526c <__assert_fail@plt+0x135cc>
   25290:	b	252ac <__assert_fail@plt+0x1360c>
   25294:	mov	r0, r4
   25298:	mov	r1, #255	; 0xff
   2529c:	mov	r2, #32
   252a0:	str	ip, [sp, #8]
   252a4:	bl	11b08 <memset@plt>
   252a8:	ldr	ip, [sp, #8]
   252ac:	ldr	r0, [sp, #20]
   252b0:	ldr	r0, [r0, #128]	; 0x80
   252b4:	tst	r0, #64	; 0x40
   252b8:	ldreq	r1, [fp, #-1096]	; 0xfffffbb8
   252bc:	biceq	r1, r1, #1024	; 0x400
   252c0:	streq	r1, [fp, #-1096]	; 0xfffffbb8
   252c4:	tst	r0, #128	; 0x80
   252c8:	ldrne	r0, [fp, #-1096]	; 0xfffffbb8
   252cc:	bicne	r0, r0, #1
   252d0:	strne	r0, [fp, #-1096]	; 0xfffffbb8
   252d4:	b	2510c <__assert_fail@plt+0x1346c>
   252d8:	mov	r0, #0
   252dc:	add	r1, r4, r0
   252e0:	add	r2, sl, r0
   252e4:	add	r0, r0, #16
   252e8:	vld1.32	{d18-d19}, [r2]
   252ec:	vld1.32	{d20-d21}, [r1]
   252f0:	cmp	r0, #32
   252f4:	vand	q9, q10, q9
   252f8:	vorr	q8, q9, q8
   252fc:	vst1.32	{d18-d19}, [r1]
   25300:	bne	252dc <__assert_fail@plt+0x1363c>
   25304:	vext.8	q9, q8, q8, #8
   25308:	sub	lr, fp, #3072	; 0xc00
   2530c:	vorr	q8, q8, q9
   25310:	sub	r3, lr, #72	; 0x48
   25314:	vdup.32	q9, d16[1]
   25318:	vorr	q8, q8, q9
   2531c:	vmov.32	r0, d16[0]
   25320:	cmp	r0, #0
   25324:	beq	2534c <__assert_fail@plt+0x136ac>
   25328:	tst	r7, #2048	; 0x800
   2532c:	beq	253f8 <__assert_fail@plt+0x13758>
   25330:	tst	r7, #4194304	; 0x400000
   25334:	beq	25354 <__assert_fail@plt+0x136b4>
   25338:	cmp	ip, #1
   2533c:	bne	25354 <__assert_fail@plt+0x136b4>
   25340:	mov	r0, r4
   25344:	vst1.64	{d8-d9}, [r0]!
   25348:	vst1.64	{d8-d9}, [r0]
   2534c:	ldr	r1, [sp, #12]
   25350:	b	2565c <__assert_fail@plt+0x139bc>
   25354:	ldr	r1, [sp, #20]
   25358:	vmov.i32	q8, #0	; 0x00000000
   2535c:	ldr	r0, [r1, #92]	; 0x5c
   25360:	cmp	r0, #1
   25364:	ble	253a8 <__assert_fail@plt+0x13708>
   25368:	ldr	r0, [r1, #60]	; 0x3c
   2536c:	mov	r1, #0
   25370:	add	r2, r0, r1
   25374:	add	r3, sl, r1
   25378:	vld1.32	{d20-d21}, [r2]
   2537c:	vld1.32	{d18-d19}, [r3]
   25380:	add	r2, r4, r1
   25384:	add	r1, r1, #16
   25388:	vld1.32	{d22-d23}, [r2]
   2538c:	cmp	r1, #32
   25390:	vand	q9, q10, q9
   25394:	vbic	q9, q11, q9
   25398:	vorr	q8, q9, q8
   2539c:	vst1.32	{d18-d19}, [r2]
   253a0:	bne	25370 <__assert_fail@plt+0x136d0>
   253a4:	b	253d4 <__assert_fail@plt+0x13734>
   253a8:	mov	r0, #0
   253ac:	add	r1, r4, r0
   253b0:	add	r2, sl, r0
   253b4:	add	r0, r0, #16
   253b8:	vld1.32	{d18-d19}, [r2]
   253bc:	vld1.32	{d20-d21}, [r1]
   253c0:	cmp	r0, #32
   253c4:	vbic	q9, q10, q9
   253c8:	vorr	q8, q9, q8
   253cc:	vst1.32	{d18-d19}, [r1]
   253d0:	bne	253ac <__assert_fail@plt+0x1370c>
   253d4:	vext.8	q9, q8, q8, #8
   253d8:	sub	lr, fp, #3072	; 0xc00
   253dc:	vorr	q8, q8, q9
   253e0:	sub	r3, lr, #72	; 0x48
   253e4:	vdup.32	q9, d16[1]
   253e8:	vorr	q8, q8, q9
   253ec:	vmov.32	r0, d16[0]
   253f0:	cmp	r0, #0
   253f4:	beq	2534c <__assert_fail@plt+0x136ac>
   253f8:	mov	r7, #0
   253fc:	cmp	r8, #1
   25400:	blt	255d4 <__assert_fail@plt+0x13934>
   25404:	add	sl, sp, #24
   25408:	stmib	sp, {r5, ip}
   2540c:	cmp	ip, #1
   25410:	bne	25438 <__assert_fail@plt+0x13798>
   25414:	ldrb	r1, [r5, r6, lsl #3]
   25418:	add	r0, sp, #24
   2541c:	add	r0, r0, r7, lsl #5
   25420:	ubfx	r2, r1, #5, #3
   25424:	and	r1, r1, #31
   25428:	ldr	r0, [r0, r2, lsl #2]
   2542c:	mov	r2, #1
   25430:	tst	r0, r2, lsl r1
   25434:	beq	255b8 <__assert_fail@plt+0x13918>
   25438:	vmov.i32	q8, #0	; 0x00000000
   2543c:	mov	r0, #0
   25440:	add	r1, sl, r0
   25444:	add	r2, r4, r0
   25448:	vld1.32	{d20-d21}, [r1]
   2544c:	vld1.32	{d18-d19}, [r2]
   25450:	add	r1, r9, r0
   25454:	add	r0, r0, #16
   25458:	cmp	r0, #32
   2545c:	vand	q9, q10, q9
   25460:	vorr	q8, q9, q8
   25464:	vst1.32	{d18-d19}, [r1]
   25468:	bne	25440 <__assert_fail@plt+0x137a0>
   2546c:	vext.8	q9, q8, q8, #8
   25470:	vorr	q8, q8, q9
   25474:	vdup.32	q9, d16[1]
   25478:	vorr	q8, q8, q9
   2547c:	vmov.32	r0, d16[0]
   25480:	cmp	r0, #0
   25484:	beq	255b8 <__assert_fail@plt+0x13918>
   25488:	vmov.i32	q5, #0	; 0x00000000
   2548c:	mov	r0, #0
   25490:	vmov.i32	q8, #0	; 0x00000000
   25494:	add	r1, r4, r0
   25498:	add	r2, sl, r0
   2549c:	vld1.32	{d18-d19}, [r2]
   254a0:	vld1.32	{d20-d21}, [r1]
   254a4:	add	r2, r3, r0
   254a8:	add	r0, r0, #16
   254ac:	cmp	r0, #32
   254b0:	vbic	q11, q10, q9
   254b4:	vbic	q9, q9, q10
   254b8:	vorr	q5, q11, q5
   254bc:	vorr	q8, q9, q8
   254c0:	vst1.32	{d18-d19}, [r2]
   254c4:	vst1.32	{d22-d23}, [r1]
   254c8:	bne	25494 <__assert_fail@plt+0x137f4>
   254cc:	vext.8	q9, q8, q8, #8
   254d0:	vorr	q8, q8, q9
   254d4:	vdup.32	q9, d16[1]
   254d8:	vorr	q8, q8, q9
   254dc:	vmov.32	r0, d16[0]
   254e0:	cmp	r0, #0
   254e4:	beq	25554 <__assert_fail@plt+0x138b4>
   254e8:	mov	r0, r3
   254ec:	mov	r1, r9
   254f0:	add	r2, sp, #24
   254f4:	sub	lr, fp, #6144	; 0x1800
   254f8:	vld1.32	{d16-d17}, [r0]!
   254fc:	vld1.32	{d18-d19}, [r1]!
   25500:	mov	r3, r2
   25504:	add	r2, r2, r8, lsl #5
   25508:	vld1.64	{d20-d21}, [r0]
   2550c:	vst1.32	{d16-d17}, [r2]!
   25510:	vld1.64	{d16-d17}, [r1]
   25514:	add	r0, r3, r7, lsl #5
   25518:	sub	r1, lr, #120	; 0x78
   2551c:	vst1.32	{d20-d21}, [r2]
   25520:	vst1.32	{d18-d19}, [r0]!
   25524:	mov	r2, r1
   25528:	vst1.32	{d16-d17}, [r0]
   2552c:	add	r0, r8, r8, lsl #1
   25530:	add	r0, r1, r0, lsl #2
   25534:	add	r1, r7, r7, lsl #1
   25538:	add	r5, r2, r1, lsl #2
   2553c:	mov	r1, r5
   25540:	bl	22268 <__assert_fail@plt+0x105c8>
   25544:	cmp	r0, #0
   25548:	bne	25a28 <__assert_fail@plt+0x13d88>
   2554c:	add	r8, r8, #1
   25550:	b	25564 <__assert_fail@plt+0x138c4>
   25554:	sub	lr, fp, #6144	; 0x1800
   25558:	add	r0, r7, r7, lsl #1
   2555c:	sub	r1, lr, #120	; 0x78
   25560:	add	r5, r1, r0, lsl #2
   25564:	ldr	r0, [sp, #12]
   25568:	ldr	r1, [sp, #16]
   2556c:	ldr	r0, [r0, #12]
   25570:	ldr	r1, [r0, r1, lsl #2]
   25574:	mov	r0, r5
   25578:	bl	220cc <__assert_fail@plt+0x1042c>
   2557c:	cmp	r0, #0
   25580:	beq	25a28 <__assert_fail@plt+0x13d88>
   25584:	vext.8	q8, q5, q8, #8
   25588:	mov	r1, #0
   2558c:	vorr	q8, q5, q8
   25590:	vdup.32	q9, d16[1]
   25594:	vorr	q8, q8, q9
   25598:	vmov.32	r0, d16[0]
   2559c:	cmp	r0, #0
   255a0:	movweq	r1, #17
   255a4:	cmp	r1, #0
   255a8:	bne	255cc <__assert_fail@plt+0x1392c>
   255ac:	ldmib	sp, {r5, ip}
   255b0:	sub	lr, fp, #3072	; 0xc00
   255b4:	sub	r3, lr, #72	; 0x48
   255b8:	add	r7, r7, #1
   255bc:	add	sl, sl, #32
   255c0:	cmp	r7, r8
   255c4:	blt	2540c <__assert_fail@plt+0x1376c>
   255c8:	b	255d4 <__assert_fail@plt+0x13934>
   255cc:	cmp	r1, #17
   255d0:	bne	25678 <__assert_fail@plt+0x139d8>
   255d4:	ldr	r1, [sp, #12]
   255d8:	ldr	sl, [sp]
   255dc:	cmp	r7, r8
   255e0:	bne	2565c <__assert_fail@plt+0x139bc>
   255e4:	mov	r0, r4
   255e8:	sub	lr, fp, #6144	; 0x1800
   255ec:	vld1.32	{d16-d17}, [r0]!
   255f0:	sub	r2, lr, #120	; 0x78
   255f4:	vld1.64	{d18-d19}, [r0]
   255f8:	add	r0, sp, #24
   255fc:	add	r0, r0, r7, lsl #5
   25600:	vst1.32	{d16-d17}, [r0]!
   25604:	vst1.32	{d18-d19}, [r0]
   25608:	ldr	r0, [r1, #12]
   2560c:	ldr	r1, [sp, #16]
   25610:	ldr	r8, [r0, r1, lsl #2]
   25614:	add	r0, r7, r7, lsl #1
   25618:	mov	r1, #1
   2561c:	add	r5, r2, r0, lsl #2
   25620:	str	r1, [r2, r0, lsl #2]
   25624:	mov	r0, #4
   25628:	mov	r6, r5
   2562c:	str	r1, [r6, #4]!
   25630:	bl	1a224 <__assert_fail@plt+0x8584>
   25634:	cmp	r0, #0
   25638:	str	r0, [r5, #8]
   2563c:	beq	25a94 <__assert_fail@plt+0x13df4>
   25640:	ldr	r1, [sp, #12]
   25644:	ldr	sl, [sp]
   25648:	str	r8, [r0]
   2564c:	mov	r0, r4
   25650:	add	r8, r7, #1
   25654:	vst1.64	{d8-d9}, [r0]!
   25658:	vst1.64	{d8-d9}, [r0]
   2565c:	ldr	r3, [sp, #16]
   25660:	ldr	r0, [r1, #8]
   25664:	add	r3, r3, #1
   25668:	cmp	r3, r0
   2566c:	ldr	r0, [sp, #20]
   25670:	blt	250cc <__assert_fail@plt+0x1342c>
   25674:	b	2568c <__assert_fail@plt+0x139ec>
   25678:	ldr	r1, [sp, #12]
   2567c:	ldr	sl, [sp]
   25680:	cmp	r0, #0
   25684:	bne	2565c <__assert_fail@plt+0x139bc>
   25688:	b	25694 <__assert_fail@plt+0x139f4>
   2568c:	cmp	r8, #0
   25690:	ble	25a5c <__assert_fail@plt+0x13dbc>
   25694:	mov	r0, #0
   25698:	str	r0, [fp, #-3152]	; 0xfffff3b0
   2569c:	add	r0, r8, #1
   256a0:	str	r0, [fp, #-3156]	; 0xfffff3ac
   256a4:	lsl	r0, r0, #2
   256a8:	bl	1a224 <__assert_fail@plt+0x8584>
   256ac:	cmp	r0, #0
   256b0:	str	r0, [fp, #-3148]	; 0xfffff3b4
   256b4:	mov	r0, #0
   256b8:	movweq	r0, #12
   256bc:	str	r0, [fp, #-72]	; 0xffffffb8
   256c0:	beq	25aa4 <__assert_fail@plt+0x13e04>
   256c4:	sub	lr, fp, #3072	; 0xc00
   256c8:	vmov.i32	q8, #0	; 0x00000000
   256cc:	add	r7, sp, #24
   256d0:	mov	r6, #0
   256d4:	mov	r1, #0
   256d8:	sub	sl, lr, #120	; 0x78
   256dc:	mov	r0, sl
   256e0:	vst1.64	{d16-d17}, [r0]!
   256e4:	vst1.64	{d16-d17}, [r0]
   256e8:	mov	r0, #0
   256ec:	stmib	sp, {r0, r8}
   256f0:	mov	r0, #0
   256f4:	sub	lr, fp, #6144	; 0x1800
   256f8:	str	r1, [sp, #16]
   256fc:	str	r0, [fp, #-3152]	; 0xfffff3b0
   25700:	add	r0, r1, r1, lsl #1
   25704:	sub	r2, lr, #120	; 0x78
   25708:	ldr	r1, [sp, #20]
   2570c:	add	r0, r2, r0, lsl #2
   25710:	ldr	r5, [r0, #4]
   25714:	cmp	r5, #1
   25718:	blt	2577c <__assert_fail@plt+0x13adc>
   2571c:	ldr	sl, [r0, #8]
   25720:	mov	r8, #0
   25724:	ldr	r0, [sl, r8, lsl #2]
   25728:	ldr	r2, [r1, #12]
   2572c:	ldr	r0, [r2, r0, lsl #2]
   25730:	cmn	r0, #1
   25734:	beq	25760 <__assert_fail@plt+0x13ac0>
   25738:	ldr	r1, [r1, #24]
   2573c:	add	r0, r0, r0, lsl #1
   25740:	sub	lr, fp, #3072	; 0xc00
   25744:	add	r1, r1, r0, lsl #2
   25748:	sub	r0, lr, #84	; 0x54
   2574c:	bl	21eb8 <__assert_fail@plt+0x10218>
   25750:	ldr	r1, [sp, #20]
   25754:	mov	r6, #0
   25758:	cmp	r0, #0
   2575c:	bne	259ec <__assert_fail@plt+0x13d4c>
   25760:	add	r8, r8, #1
   25764:	cmp	r8, r5
   25768:	blt	25724 <__assert_fail@plt+0x13a84>
   2576c:	ldr	r8, [sp, #8]
   25770:	sub	lr, fp, #3072	; 0xc00
   25774:	str	r6, [fp, #-72]	; 0xffffffb8
   25778:	sub	sl, lr, #120	; 0x78
   2577c:	sub	lr, fp, #3072	; 0xc00
   25780:	sub	r0, fp, #72	; 0x48
   25784:	mov	r3, #0
   25788:	sub	r2, lr, #84	; 0x54
   2578c:	bl	22348 <__assert_fail@plt+0x106a8>
   25790:	ldr	r1, [sp, #16]
   25794:	ldr	r6, [fp, #-72]	; 0xffffffb8
   25798:	mov	r5, r0
   2579c:	cmp	r0, #0
   257a0:	str	r0, [r4, r1, lsl #2]
   257a4:	bne	257b0 <__assert_fail@plt+0x13b10>
   257a8:	cmp	r6, #0
   257ac:	bne	259f4 <__assert_fail@plt+0x13d54>
   257b0:	ldrsb	r0, [r5, #52]	; 0x34
   257b4:	cmn	r0, #1
   257b8:	ble	257d0 <__assert_fail@plt+0x13b30>
   257bc:	sub	lr, fp, #3072	; 0xc00
   257c0:	str	r5, [r9, r1, lsl #2]
   257c4:	sub	r0, lr, #72	; 0x48
   257c8:	str	r5, [r0, r1, lsl #2]
   257cc:	b	25870 <__assert_fail@plt+0x13bd0>
   257d0:	ldr	r1, [sp, #20]
   257d4:	sub	lr, fp, #3072	; 0xc00
   257d8:	sub	r0, fp, #72	; 0x48
   257dc:	mov	r3, #1
   257e0:	sub	r2, lr, #84	; 0x54
   257e4:	bl	22348 <__assert_fail@plt+0x106a8>
   257e8:	ldr	r1, [sp, #16]
   257ec:	cmp	r0, #0
   257f0:	str	r0, [r9, r1, lsl #2]
   257f4:	bne	25804 <__assert_fail@plt+0x13b64>
   257f8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   257fc:	cmp	r1, #0
   25800:	bne	259f4 <__assert_fail@plt+0x13d54>
   25804:	cmp	r5, r0
   25808:	beq	25830 <__assert_fail@plt+0x13b90>
   2580c:	ldr	r1, [sp, #20]
   25810:	ldr	r2, [sp, #4]
   25814:	ldr	r0, [r1, #92]	; 0x5c
   25818:	cmp	r0, #1
   2581c:	mov	r0, #0
   25820:	movwgt	r0, #1
   25824:	orr	r2, r2, r0
   25828:	str	r2, [sp, #4]
   2582c:	b	25834 <__assert_fail@plt+0x13b94>
   25830:	ldr	r1, [sp, #20]
   25834:	sub	lr, fp, #3072	; 0xc00
   25838:	sub	r0, fp, #72	; 0x48
   2583c:	mov	r3, #2
   25840:	sub	r2, lr, #84	; 0x54
   25844:	bl	22348 <__assert_fail@plt+0x106a8>
   25848:	ldr	r2, [sp, #16]
   2584c:	ldr	r6, [fp, #-72]	; 0xffffffb8
   25850:	sub	lr, fp, #3072	; 0xc00
   25854:	cmp	r0, #0
   25858:	sub	r1, lr, #72	; 0x48
   2585c:	str	r0, [r1, r2, lsl #2]
   25860:	mov	r1, r2
   25864:	bne	25870 <__assert_fail@plt+0x13bd0>
   25868:	cmp	r6, #0
   2586c:	bne	259f4 <__assert_fail@plt+0x13d54>
   25870:	mov	r0, #0
   25874:	add	r2, sl, r0
   25878:	add	r3, r7, r0
   2587c:	add	r0, r0, #16
   25880:	vld1.32	{d16-d17}, [r3]
   25884:	vld1.32	{d18-d19}, [r2]
   25888:	cmp	r0, #32
   2588c:	vorr	q8, q9, q8
   25890:	vst1.32	{d16-d17}, [r2]
   25894:	bne	25874 <__assert_fail@plt+0x13bd4>
   25898:	add	r1, r1, #1
   2589c:	add	r7, r7, #32
   258a0:	cmp	r1, r8
   258a4:	blt	256f0 <__assert_fail@plt+0x13a50>
   258a8:	ldr	r0, [sp, #4]
   258ac:	tst	r0, #1
   258b0:	bne	25ab0 <__assert_fail@plt+0x13e10>
   258b4:	mov	r0, #4
   258b8:	mov	r1, #256	; 0x100
   258bc:	bl	19ed0 <__assert_fail@plt+0x8230>
   258c0:	ldr	r1, [sp, #12]
   258c4:	cmp	r0, #0
   258c8:	str	r0, [r1, #44]	; 0x2c
   258cc:	beq	259f4 <__assert_fail@plt+0x13d54>
   258d0:	mov	r1, #0
   258d4:	add	sl, sp, #24
   258d8:	mov	r3, #0
   258dc:	sub	lr, fp, #3072	; 0xc00
   258e0:	sub	r2, lr, #120	; 0x78
   258e4:	ldr	r7, [r2, r3, lsl #2]
   258e8:	cmp	r7, #0
   258ec:	beq	25960 <__assert_fail@plt+0x13cc0>
   258f0:	ldr	r2, [sp, #20]
   258f4:	lsl	r5, r3, #5
   258f8:	add	r6, r2, r3, lsl #2
   258fc:	add	ip, r6, #96	; 0x60
   25900:	mov	r6, #1
   25904:	b	25940 <__assert_fail@plt+0x13ca0>
   25908:	mov	lr, #0
   2590c:	ldr	r8, [sl, lr, lsl #3]
   25910:	add	lr, lr, #4
   25914:	tst	r8, r6
   25918:	beq	2590c <__assert_fail@plt+0x13c6c>
   2591c:	ldr	r2, [ip]
   25920:	ldr	r8, [sp, #8]
   25924:	tst	r2, r6
   25928:	mov	r2, r9
   2592c:	moveq	r2, r4
   25930:	add	r2, r2, lr
   25934:	ldr	r2, [r2, #-4]
   25938:	str	r2, [r0, r5, lsl #2]
   2593c:	b	25948 <__assert_fail@plt+0x13ca8>
   25940:	tst	r7, #1
   25944:	bne	25908 <__assert_fail@plt+0x13c68>
   25948:	lsr	r2, r7, #1
   2594c:	cmp	r1, r7, lsr #1
   25950:	add	r5, r5, #1
   25954:	lsl	r6, r6, #1
   25958:	mov	r7, r2
   2595c:	bne	25940 <__assert_fail@plt+0x13ca0>
   25960:	add	r3, r3, #1
   25964:	add	sl, sl, #4
   25968:	cmp	r3, #8
   2596c:	bne	258dc <__assert_fail@plt+0x13c3c>
   25970:	ldrb	r1, [fp, #-3191]	; 0xfffff389
   25974:	sub	lr, fp, #6144	; 0x1800
   25978:	sub	r4, lr, #120	; 0x78
   2597c:	tst	r1, #4
   25980:	beq	259c8 <__assert_fail@plt+0x13d28>
   25984:	mov	r1, #0
   25988:	add	r2, sp, #24
   2598c:	add	r3, r2, r1, lsl #5
   25990:	ldrb	r3, [r3, #1]
   25994:	tst	r3, #4
   25998:	bne	259ac <__assert_fail@plt+0x13d0c>
   2599c:	add	r1, r1, #1
   259a0:	cmp	r1, r8
   259a4:	blt	2598c <__assert_fail@plt+0x13cec>
   259a8:	b	259c8 <__assert_fail@plt+0x13d28>
   259ac:	sub	lr, fp, #3072	; 0xc00
   259b0:	sub	r2, lr, #72	; 0x48
   259b4:	ldr	r1, [r2, r1, lsl #2]
   259b8:	ldr	r2, [sp, #4]
   259bc:	tst	r2, #1
   259c0:	str	r1, [r0, #40]	; 0x28
   259c4:	strne	r1, [r0, #1064]	; 0x428
   259c8:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   259cc:	bl	1a158 <__assert_fail@plt+0x84b8>
   259d0:	add	r4, r4, #8
   259d4:	ldr	r0, [r4], #12
   259d8:	bl	1a158 <__assert_fail@plt+0x84b8>
   259dc:	subs	r8, r8, #1
   259e0:	bne	259d4 <__assert_fail@plt+0x13d34>
   259e4:	mov	r0, #1
   259e8:	b	25a84 <__assert_fail@plt+0x13de4>
   259ec:	ldr	r8, [sp, #8]
   259f0:	str	r0, [fp, #-72]	; 0xffffffb8
   259f4:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   259f8:	bl	1a158 <__assert_fail@plt+0x84b8>
   259fc:	cmp	r8, #1
   25a00:	blt	25a20 <__assert_fail@plt+0x13d80>
   25a04:	sub	lr, fp, #6144	; 0x1800
   25a08:	sub	r0, lr, #120	; 0x78
   25a0c:	add	r4, r0, #8
   25a10:	ldr	r0, [r4], #12
   25a14:	bl	1a158 <__assert_fail@plt+0x84b8>
   25a18:	subs	r8, r8, #1
   25a1c:	bne	25a10 <__assert_fail@plt+0x13d70>
   25a20:	mov	r0, #0
   25a24:	b	25a84 <__assert_fail@plt+0x13de4>
   25a28:	mov	r7, r8
   25a2c:	ldr	r1, [sp, #12]
   25a30:	mvn	r8, #0
   25a34:	cmp	r7, #1
   25a38:	blt	25a5c <__assert_fail@plt+0x13dbc>
   25a3c:	sub	lr, fp, #6144	; 0x1800
   25a40:	sub	r0, lr, #120	; 0x78
   25a44:	add	r4, r0, #8
   25a48:	ldr	r0, [r4], #12
   25a4c:	bl	1a158 <__assert_fail@plt+0x84b8>
   25a50:	subs	r7, r7, #1
   25a54:	bne	25a48 <__assert_fail@plt+0x13da8>
   25a58:	ldr	r1, [sp, #12]
   25a5c:	mov	r0, #0
   25a60:	cmp	r8, #0
   25a64:	bne	25a84 <__assert_fail@plt+0x13de4>
   25a68:	mov	r4, r1
   25a6c:	mov	r0, #4
   25a70:	mov	r1, #256	; 0x100
   25a74:	bl	19ed0 <__assert_fail@plt+0x8230>
   25a78:	cmp	r0, #0
   25a7c:	str	r0, [r4, #44]	; 0x2c
   25a80:	movwne	r0, #1
   25a84:	sub	sp, fp, #64	; 0x40
   25a88:	vpop	{d8-d11}
   25a8c:	add	sp, sp, #4
   25a90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25a94:	mov	r0, #0
   25a98:	str	r0, [r6]
   25a9c:	str	r0, [r5]
   25aa0:	b	25a2c <__assert_fail@plt+0x13d8c>
   25aa4:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   25aa8:	bl	1a158 <__assert_fail@plt+0x84b8>
   25aac:	b	25a04 <__assert_fail@plt+0x13d64>
   25ab0:	mov	r0, #4
   25ab4:	mov	r1, #512	; 0x200
   25ab8:	bl	19ed0 <__assert_fail@plt+0x8230>
   25abc:	ldr	r1, [sp, #12]
   25ac0:	cmp	r0, #0
   25ac4:	str	r0, [r1, #48]	; 0x30
   25ac8:	beq	259f4 <__assert_fail@plt+0x13d54>
   25acc:	sub	ip, r4, #4
   25ad0:	sub	lr, r9, #4
   25ad4:	mov	r3, #0
   25ad8:	add	r7, sp, #24
   25adc:	mov	r6, #0
   25ae0:	ldr	r5, [sl, r6, lsl #2]
   25ae4:	cmp	r5, #0
   25ae8:	beq	25b5c <__assert_fail@plt+0x13ebc>
   25aec:	lsl	r4, r6, #5
   25af0:	mov	r1, #1
   25af4:	b	25b3c <__assert_fail@plt+0x13e9c>
   25af8:	mov	sl, r7
   25afc:	mov	r9, ip
   25b00:	mov	r8, lr
   25b04:	ldr	r2, [sl], #32
   25b08:	add	r9, r9, #4
   25b0c:	add	r8, r8, #4
   25b10:	tst	r2, r1
   25b14:	beq	25b04 <__assert_fail@plt+0x13e64>
   25b18:	ldr	r9, [r9]
   25b1c:	mov	sl, r0
   25b20:	str	r9, [sl, r4, lsl #2]!
   25b24:	ldr	r2, [r8]
   25b28:	ldr	r8, [sp, #8]
   25b2c:	str	r2, [sl, #1024]	; 0x400
   25b30:	sub	r2, fp, #3072	; 0xc00
   25b34:	sub	sl, r2, #120	; 0x78
   25b38:	b	25b44 <__assert_fail@plt+0x13ea4>
   25b3c:	tst	r5, #1
   25b40:	bne	25af8 <__assert_fail@plt+0x13e58>
   25b44:	lsr	r2, r5, #1
   25b48:	cmp	r3, r5, lsr #1
   25b4c:	add	r4, r4, #1
   25b50:	lsl	r1, r1, #1
   25b54:	mov	r5, r2
   25b58:	bne	25b3c <__assert_fail@plt+0x13e9c>
   25b5c:	add	r6, r6, #1
   25b60:	add	r7, r7, #4
   25b64:	cmp	r6, #8
   25b68:	bne	25ae0 <__assert_fail@plt+0x13e40>
   25b6c:	b	25970 <__assert_fail@plt+0x13cd0>
   25b70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25b74:	add	fp, sp, #28
   25b78:	sub	sp, sp, #44	; 0x2c
   25b7c:	ldr	r4, [r1, #8]
   25b80:	ldr	r6, [r1, #12]
   25b84:	mov	r9, r0
   25b88:	mov	r0, #1
   25b8c:	mov	sl, r1
   25b90:	str	r0, [sp, #36]	; 0x24
   25b94:	str	r0, [sp, #32]
   25b98:	mov	r0, #4
   25b9c:	bl	1a224 <__assert_fail@plt+0x8584>
   25ba0:	cmp	r0, #0
   25ba4:	str	r0, [sp, #40]	; 0x28
   25ba8:	beq	25df4 <__assert_fail@plt+0x14154>
   25bac:	str	r4, [r0]
   25bb0:	add	r3, sp, #32
   25bb4:	mov	r0, r9
   25bb8:	mov	r1, sl
   25bbc:	mov	r2, r6
   25bc0:	bl	25eb4 <__assert_fail@plt+0x14214>
   25bc4:	cmp	r0, #0
   25bc8:	bne	25db8 <__assert_fail@plt+0x14118>
   25bcc:	add	r0, sl, #16
   25bd0:	mov	r1, #0
   25bd4:	str	r0, [sp, #12]
   25bd8:	cmp	r6, #1
   25bdc:	blt	25dc8 <__assert_fail@plt+0x14128>
   25be0:	ldr	r0, [sl]
   25be4:	ldr	r2, [r0, r6, lsl #2]
   25be8:	cmp	r2, #0
   25bec:	mov	r2, #0
   25bf0:	addeq	r2, r1, #1
   25bf4:	ldr	r1, [r9, #120]	; 0x78
   25bf8:	cmp	r2, r1
   25bfc:	bgt	25dd0 <__assert_fail@plt+0x14130>
   25c00:	mov	r0, #0
   25c04:	str	r6, [sp, #16]
   25c08:	sub	r6, r6, #1
   25c0c:	str	r2, [sp, #8]
   25c10:	str	r0, [sp, #36]	; 0x24
   25c14:	ldr	r0, [r9, #100]	; 0x64
   25c18:	ldr	r1, [r0, r6, lsl #2]
   25c1c:	cmp	r1, #0
   25c20:	beq	25d98 <__assert_fail@plt+0x140f8>
   25c24:	ldr	r0, [r1, #20]
   25c28:	cmp	r0, #1
   25c2c:	blt	25d98 <__assert_fail@plt+0x140f8>
   25c30:	ldr	r0, [r9, #84]	; 0x54
   25c34:	mov	r5, #0
   25c38:	str	r1, [sp, #24]
   25c3c:	str	r0, [sp, #28]
   25c40:	ldr	r0, [r1, #24]
   25c44:	ldr	r7, [r0, r5, lsl #2]
   25c48:	ldr	r0, [sp, #28]
   25c4c:	ldr	r0, [r0]
   25c50:	add	r0, r0, r7, lsl #3
   25c54:	ldrb	r0, [r0, #6]
   25c58:	tst	r0, #16
   25c5c:	bne	25cb8 <__assert_fail@plt+0x14018>
   25c60:	ldr	r0, [sp, #28]
   25c64:	mov	r2, r6
   25c68:	ldr	r0, [r0]
   25c6c:	add	r1, r0, r7, lsl #3
   25c70:	mov	r0, r9
   25c74:	bl	24f30 <__assert_fail@plt+0x13290>
   25c78:	cmp	r0, #0
   25c7c:	beq	25d84 <__assert_fail@plt+0x140e4>
   25c80:	ldr	r0, [sl]
   25c84:	ldr	r1, [sp, #16]
   25c88:	ldr	r0, [r0, r1, lsl #2]
   25c8c:	cmp	r0, #0
   25c90:	beq	25d84 <__assert_fail@plt+0x140e4>
   25c94:	ldr	r1, [sp, #28]
   25c98:	add	r0, r0, #4
   25c9c:	ldr	r1, [r1, #12]
   25ca0:	ldr	r1, [r1, r7, lsl #2]
   25ca4:	bl	222e4 <__assert_fail@plt+0x10644>
   25ca8:	mov	r4, #1
   25cac:	cmp	r0, #0
   25cb0:	bne	25d38 <__assert_fail@plt+0x14098>
   25cb4:	b	25d84 <__assert_fail@plt+0x140e4>
   25cb8:	ldr	r0, [sl, #12]
   25cbc:	ldr	r8, [r9, #84]	; 0x54
   25cc0:	mov	r2, r9
   25cc4:	mov	r1, r7
   25cc8:	mov	r3, r6
   25ccc:	str	r0, [sp, #20]
   25cd0:	mov	r0, r8
   25cd4:	bl	24c40 <__assert_fail@plt+0x12fa0>
   25cd8:	mov	r4, r0
   25cdc:	cmp	r0, #1
   25ce0:	blt	25d00 <__assert_fail@plt+0x14060>
   25ce4:	ldr	r1, [sp, #20]
   25ce8:	add	r0, r4, r6
   25cec:	mov	r2, r6
   25cf0:	cmp	r0, r1
   25cf4:	ble	25d0c <__assert_fail@plt+0x1406c>
   25cf8:	mov	r6, r2
   25cfc:	b	25d38 <__assert_fail@plt+0x14098>
   25d00:	cmp	r4, #0
   25d04:	bne	25d38 <__assert_fail@plt+0x14098>
   25d08:	b	25c60 <__assert_fail@plt+0x13fc0>
   25d0c:	ldr	r1, [sl]
   25d10:	mov	r6, r2
   25d14:	ldr	r0, [r1, r0, lsl #2]
   25d18:	cmp	r0, #0
   25d1c:	beq	25c60 <__assert_fail@plt+0x13fc0>
   25d20:	ldr	r1, [r8, #12]
   25d24:	add	r0, r0, #4
   25d28:	ldr	r1, [r1, r7, lsl #2]
   25d2c:	bl	222e4 <__assert_fail@plt+0x10644>
   25d30:	cmp	r0, #0
   25d34:	beq	25c60 <__assert_fail@plt+0x13fc0>
   25d38:	ldr	r0, [sl, #20]
   25d3c:	cmp	r0, #0
   25d40:	beq	25d70 <__assert_fail@plt+0x140d0>
   25d44:	ldr	r0, [sp, #28]
   25d48:	ldr	r1, [sp, #12]
   25d4c:	add	r3, r4, r6
   25d50:	ldr	r0, [r0, #12]
   25d54:	ldr	r2, [r0, r7, lsl #2]
   25d58:	mov	r0, r9
   25d5c:	str	r7, [sp]
   25d60:	str	r6, [sp, #4]
   25d64:	bl	269e0 <__assert_fail@plt+0x14d40>
   25d68:	cmp	r0, #0
   25d6c:	bne	25d84 <__assert_fail@plt+0x140e4>
   25d70:	add	r0, sp, #32
   25d74:	mov	r1, r7
   25d78:	bl	220cc <__assert_fail@plt+0x1042c>
   25d7c:	cmp	r0, #0
   25d80:	beq	25dc0 <__assert_fail@plt+0x14120>
   25d84:	ldr	r1, [sp, #24]
   25d88:	add	r5, r5, #1
   25d8c:	ldr	r0, [r1, #20]
   25d90:	cmp	r5, r0
   25d94:	blt	25c40 <__assert_fail@plt+0x13fa0>
   25d98:	mov	r0, r9
   25d9c:	mov	r1, sl
   25da0:	mov	r2, r6
   25da4:	add	r3, sp, #32
   25da8:	bl	25eb4 <__assert_fail@plt+0x14214>
   25dac:	ldr	r1, [sp, #8]
   25db0:	cmp	r0, #0
   25db4:	beq	25bd8 <__assert_fail@plt+0x13f38>
   25db8:	mov	r4, r0
   25dbc:	b	25de0 <__assert_fail@plt+0x14140>
   25dc0:	mov	r4, #12
   25dc4:	b	25de0 <__assert_fail@plt+0x14140>
   25dc8:	mov	r4, #0
   25dcc:	b	25de0 <__assert_fail@plt+0x14140>
   25dd0:	lsl	r2, r6, #2
   25dd4:	mov	r1, #0
   25dd8:	mov	r4, #0
   25ddc:	bl	11b08 <memset@plt>
   25de0:	ldr	r0, [sp, #40]	; 0x28
   25de4:	bl	1a158 <__assert_fail@plt+0x84b8>
   25de8:	mov	r0, r4
   25dec:	sub	sp, fp, #28
   25df0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25df4:	mov	r0, #0
   25df8:	mov	r4, #12
   25dfc:	str	r0, [sp, #32]
   25e00:	str	r0, [sp, #36]	; 0x24
   25e04:	b	25de8 <__assert_fail@plt+0x14148>
   25e08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25e0c:	add	fp, sp, #28
   25e10:	sub	sp, sp, #20
   25e14:	cmp	r3, #1
   25e18:	blt	25ea8 <__assert_fail@plt+0x14208>
   25e1c:	mov	r4, r3
   25e20:	mov	r5, r2
   25e24:	mov	r6, r1
   25e28:	mov	sl, r0
   25e2c:	mov	r7, #0
   25e30:	add	r8, sp, #4
   25e34:	add	r9, sp, #16
   25e38:	ldr	r1, [r6, r7, lsl #2]
   25e3c:	ldr	r0, [r5, r7, lsl #2]
   25e40:	cmp	r1, #0
   25e44:	beq	25e98 <__assert_fail@plt+0x141f8>
   25e48:	cmp	r0, #0
   25e4c:	beq	25e9c <__assert_fail@plt+0x141fc>
   25e50:	add	r2, r0, #4
   25e54:	add	r1, r1, #4
   25e58:	mov	r0, r8
   25e5c:	bl	23af4 <__assert_fail@plt+0x11e54>
   25e60:	cmp	r0, #0
   25e64:	str	r0, [sp, #16]
   25e68:	bne	25eac <__assert_fail@plt+0x1420c>
   25e6c:	mov	r0, r9
   25e70:	mov	r1, sl
   25e74:	mov	r2, r8
   25e78:	bl	24a44 <__assert_fail@plt+0x12da4>
   25e7c:	str	r0, [r6, r7, lsl #2]
   25e80:	ldr	r0, [sp, #12]
   25e84:	bl	1a158 <__assert_fail@plt+0x84b8>
   25e88:	ldr	r0, [sp, #16]
   25e8c:	cmp	r0, #0
   25e90:	beq	25e9c <__assert_fail@plt+0x141fc>
   25e94:	b	25eac <__assert_fail@plt+0x1420c>
   25e98:	str	r0, [r6, r7, lsl #2]
   25e9c:	add	r7, r7, #1
   25ea0:	cmp	r7, r4
   25ea4:	blt	25e38 <__assert_fail@plt+0x14198>
   25ea8:	mov	r0, #0
   25eac:	sub	sp, fp, #28
   25eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25eb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25eb8:	add	fp, sp, #28
   25ebc:	sub	sp, sp, #84	; 0x54
   25ec0:	mov	r6, r3
   25ec4:	mov	r3, #0
   25ec8:	ldr	r7, [r0, #84]	; 0x54
   25ecc:	mov	r4, r2
   25ed0:	str	r0, [sp, #44]	; 0x2c
   25ed4:	str	r1, [sp, #48]	; 0x30
   25ed8:	str	r3, [sp, #52]	; 0x34
   25edc:	str	r4, [sp, #40]	; 0x28
   25ee0:	ldr	r2, [r0, #100]	; 0x64
   25ee4:	ldr	r8, [r2, r4, lsl #2]
   25ee8:	ldr	r2, [r6, #4]
   25eec:	cmp	r8, #0
   25ef0:	mov	r0, r8
   25ef4:	addne	r0, r0, #4
   25ef8:	cmp	r2, #0
   25efc:	str	r0, [sp, #36]	; 0x24
   25f00:	beq	26280 <__assert_fail@plt+0x145e0>
   25f04:	cmp	r8, #0
   25f08:	beq	26254 <__assert_fail@plt+0x145b4>
   25f0c:	mov	r0, #0
   25f10:	mov	r1, r7
   25f14:	mov	r2, r6
   25f18:	str	r7, [sp, #28]
   25f1c:	str	r6, [sp, #20]
   25f20:	str	r0, [sp, #56]	; 0x38
   25f24:	add	r0, sp, #56	; 0x38
   25f28:	bl	24a44 <__assert_fail@plt+0x12da4>
   25f2c:	ldr	r9, [sp, #56]	; 0x38
   25f30:	cmp	r9, #0
   25f34:	bne	2659c <__assert_fail@plt+0x148fc>
   25f38:	mov	r6, r0
   25f3c:	mov	r5, r0
   25f40:	ldr	r2, [sp, #20]
   25f44:	ldr	r0, [r6, #28]!
   25f48:	cmp	r0, #0
   25f4c:	bne	25fe0 <__assert_fail@plt+0x14340>
   25f50:	ldr	r0, [r2, #4]
   25f54:	mov	r4, #0
   25f58:	mov	r7, r2
   25f5c:	str	r0, [r5, #28]
   25f60:	lsl	r0, r0, #2
   25f64:	str	r4, [r5, #32]
   25f68:	bl	1a224 <__assert_fail@plt+0x8584>
   25f6c:	cmp	r0, #0
   25f70:	mov	r9, #12
   25f74:	str	r0, [r5, #36]	; 0x24
   25f78:	movweq	r4, #12
   25f7c:	str	r4, [sp, #56]	; 0x38
   25f80:	beq	2659c <__assert_fail@plt+0x148fc>
   25f84:	ldr	r0, [r7, #4]
   25f88:	mov	r2, r7
   25f8c:	cmp	r0, #1
   25f90:	blt	25fe0 <__assert_fail@plt+0x14340>
   25f94:	mov	r5, #0
   25f98:	ldr	r0, [r2, #8]
   25f9c:	ldr	r1, [sp, #28]
   25fa0:	mov	r4, r2
   25fa4:	ldr	r0, [r0, r5, lsl #2]
   25fa8:	ldr	r1, [r1, #28]
   25fac:	add	r0, r0, r0, lsl #1
   25fb0:	add	r1, r1, r0, lsl #2
   25fb4:	mov	r0, r6
   25fb8:	bl	21eb8 <__assert_fail@plt+0x10218>
   25fbc:	cmp	r0, #0
   25fc0:	bne	265ac <__assert_fail@plt+0x1490c>
   25fc4:	ldr	r0, [r4, #4]
   25fc8:	add	r5, r5, #1
   25fcc:	mov	r2, r4
   25fd0:	cmp	r5, r0
   25fd4:	blt	25f98 <__assert_fail@plt+0x142f8>
   25fd8:	mov	r0, #0
   25fdc:	str	r0, [sp, #56]	; 0x38
   25fe0:	ldr	r1, [sp, #36]	; 0x24
   25fe4:	mov	r0, r2
   25fe8:	mov	r2, r6
   25fec:	bl	265c8 <__assert_fail@plt+0x14928>
   25ff0:	cmp	r0, #0
   25ff4:	str	r0, [sp, #52]	; 0x34
   25ff8:	bne	265c0 <__assert_fail@plt+0x14920>
   25ffc:	ldr	ip, [sp, #48]	; 0x30
   26000:	ldr	r4, [sp, #40]	; 0x28
   26004:	ldr	r7, [sp, #28]
   26008:	ldr	r6, [sp, #20]
   2600c:	ldr	r0, [ip, #20]
   26010:	cmp	r0, #0
   26014:	beq	26254 <__assert_fail@plt+0x145b4>
   26018:	cmp	r0, #1
   2601c:	str	r8, [sp, #12]
   26020:	blt	26248 <__assert_fail@plt+0x145a8>
   26024:	ldr	r0, [sp, #44]	; 0x2c
   26028:	mov	r8, #0
   2602c:	ldr	r0, [r0, #116]	; 0x74
   26030:	str	r0, [sp, #24]
   26034:	ldr	r0, [ip, #24]
   26038:	ldr	r1, [sp, #24]
   2603c:	ldr	r0, [r0, r8, lsl #2]
   26040:	add	r0, r0, r0, lsl #1
   26044:	add	r1, r1, r0, lsl #3
   26048:	ldr	r2, [r1, #8]
   2604c:	cmp	r2, r4
   26050:	bge	26238 <__assert_fail@plt+0x14598>
   26054:	ldr	r1, [r1, #4]
   26058:	cmp	r1, r4
   2605c:	blt	26238 <__assert_fail@plt+0x14598>
   26060:	ldr	r1, [sp, #24]
   26064:	ldr	r2, [r7]
   26068:	ldr	r0, [r1, r0, lsl #3]!
   2606c:	ldr	r1, [r1, #12]
   26070:	ldr	sl, [r2, r0, lsl #3]
   26074:	ldr	r0, [r6, #4]
   26078:	cmp	r1, r4
   2607c:	bne	26138 <__assert_fail@plt+0x14498>
   26080:	cmp	r0, #1
   26084:	blt	26238 <__assert_fail@plt+0x14598>
   26088:	ldr	r3, [r6, #8]
   2608c:	mvn	r1, #0
   26090:	str	r1, [sp, #32]
   26094:	mvn	r1, #0
   26098:	ldr	r5, [r3]
   2609c:	add	r4, r2, r5, lsl #3
   260a0:	ldrb	r4, [r4, #4]
   260a4:	cmp	r4, #9
   260a8:	beq	260c4 <__assert_fail@plt+0x14424>
   260ac:	cmp	r4, #8
   260b0:	bne	260d8 <__assert_fail@plt+0x14438>
   260b4:	ldr	r4, [r2, r5, lsl #3]
   260b8:	cmp	sl, r4
   260bc:	moveq	r1, r5
   260c0:	b	260d8 <__assert_fail@plt+0x14438>
   260c4:	ldr	r4, [r2, r5, lsl #3]
   260c8:	cmp	sl, r4
   260cc:	ldr	r4, [sp, #32]
   260d0:	moveq	r4, r5
   260d4:	str	r4, [sp, #32]
   260d8:	add	r3, r3, #4
   260dc:	subs	r0, r0, #1
   260e0:	bne	26098 <__assert_fail@plt+0x143f8>
   260e4:	cmp	r1, #0
   260e8:	blt	26110 <__assert_fail@plt+0x14470>
   260ec:	ldr	r3, [sp, #36]	; 0x24
   260f0:	mov	r0, r7
   260f4:	mov	r2, r6
   260f8:	bl	267d0 <__assert_fail@plt+0x14b30>
   260fc:	ldr	r6, [sp, #20]
   26100:	ldr	r7, [sp, #28]
   26104:	ldr	ip, [sp, #48]	; 0x30
   26108:	cmp	r0, #0
   2610c:	bne	26598 <__assert_fail@plt+0x148f8>
   26110:	ldr	sl, [sp, #32]
   26114:	ldr	r4, [sp, #40]	; 0x28
   26118:	cmp	sl, #0
   2611c:	blt	26238 <__assert_fail@plt+0x14598>
   26120:	ldr	r0, [r6, #4]
   26124:	cmp	r0, #1
   26128:	str	r0, [sp, #16]
   2612c:	blt	26238 <__assert_fail@plt+0x14598>
   26130:	mov	r5, #0
   26134:	b	261e0 <__assert_fail@plt+0x14540>
   26138:	cmp	r0, #1
   2613c:	blt	26238 <__assert_fail@plt+0x14598>
   26140:	mov	r5, #0
   26144:	ldr	r1, [r6, #8]
   26148:	ldr	r1, [r1, r5, lsl #2]
   2614c:	add	r3, r2, r1, lsl #3
   26150:	ldr	r3, [r3, #4]
   26154:	and	r3, r3, #254	; 0xfe
   26158:	orr	r3, r3, #1
   2615c:	cmp	r3, #9
   26160:	ldreq	r2, [r2, r1, lsl #3]
   26164:	cmpeq	sl, r2
   26168:	beq	26180 <__assert_fail@plt+0x144e0>
   2616c:	add	r5, r5, #1
   26170:	cmp	r5, r0
   26174:	bge	26238 <__assert_fail@plt+0x14598>
   26178:	ldr	r2, [r7]
   2617c:	b	26144 <__assert_fail@plt+0x144a4>
   26180:	ldr	r3, [sp, #36]	; 0x24
   26184:	mov	r0, r7
   26188:	mov	r2, r6
   2618c:	bl	267d0 <__assert_fail@plt+0x14b30>
   26190:	cmp	r0, #0
   26194:	bne	26598 <__assert_fail@plt+0x148f8>
   26198:	ldr	r0, [r6, #4]
   2619c:	ldr	r4, [sp, #40]	; 0x28
   261a0:	ldr	ip, [sp, #48]	; 0x30
   261a4:	ldr	r7, [sp, #28]
   261a8:	b	2616c <__assert_fail@plt+0x144cc>
   261ac:	mov	r1, r6
   261b0:	ldr	r6, [sp, #20]
   261b4:	ldr	r3, [sp, #36]	; 0x24
   261b8:	mov	r0, r7
   261bc:	mov	r2, r6
   261c0:	bl	267d0 <__assert_fail@plt+0x14b30>
   261c4:	cmp	r0, #0
   261c8:	bne	26598 <__assert_fail@plt+0x148f8>
   261cc:	ldr	r0, [r6, #4]
   261d0:	ldr	r7, [sp, #28]
   261d4:	sub	r5, r5, #1
   261d8:	str	r0, [sp, #16]
   261dc:	b	26220 <__assert_fail@plt+0x14580>
   261e0:	ldr	r0, [r6, #8]
   261e4:	mov	r1, sl
   261e8:	ldr	r6, [r0, r5, lsl #2]
   261ec:	ldr	r0, [r7, #28]
   261f0:	add	r9, r6, r6, lsl #1
   261f4:	add	r0, r0, r9, lsl #2
   261f8:	bl	222e4 <__assert_fail@plt+0x10644>
   261fc:	cmp	r0, #0
   26200:	bne	2621c <__assert_fail@plt+0x1457c>
   26204:	ldr	r0, [r7, #24]
   26208:	mov	r1, sl
   2620c:	add	r0, r0, r9, lsl #2
   26210:	bl	222e4 <__assert_fail@plt+0x10644>
   26214:	cmp	r0, #0
   26218:	beq	261ac <__assert_fail@plt+0x1450c>
   2621c:	ldr	r6, [sp, #20]
   26220:	ldr	r0, [sp, #16]
   26224:	ldr	r4, [sp, #40]	; 0x28
   26228:	ldr	ip, [sp, #48]	; 0x30
   2622c:	add	r5, r5, #1
   26230:	cmp	r5, r0
   26234:	blt	261e0 <__assert_fail@plt+0x14540>
   26238:	ldr	r0, [ip, #20]
   2623c:	add	r8, r8, #1
   26240:	cmp	r8, r0
   26244:	blt	26034 <__assert_fail@plt+0x14394>
   26248:	ldr	r8, [sp, #12]
   2624c:	mov	r0, #0
   26250:	str	r0, [sp, #52]	; 0x34
   26254:	add	r0, sp, #52	; 0x34
   26258:	mov	r1, r7
   2625c:	mov	r2, r6
   26260:	bl	24a44 <__assert_fail@plt+0x12da4>
   26264:	ldr	r1, [sp, #48]	; 0x30
   26268:	ldr	r1, [r1]
   2626c:	str	r0, [r1, r4, lsl #2]
   26270:	ldr	r9, [sp, #52]	; 0x34
   26274:	cmp	r9, #0
   26278:	beq	26288 <__assert_fail@plt+0x145e8>
   2627c:	b	2658c <__assert_fail@plt+0x148ec>
   26280:	ldr	r1, [r1]
   26284:	str	r3, [r1, r4, lsl #2]
   26288:	cmp	r8, #0
   2628c:	beq	26588 <__assert_fail@plt+0x148e8>
   26290:	ldr	r0, [sp, #44]	; 0x2c
   26294:	ldr	r1, [sp, #40]	; 0x28
   26298:	ldr	r0, [r0, #100]	; 0x64
   2629c:	ldr	r0, [r0, r1, lsl #2]
   262a0:	ldrb	r0, [r0, #52]	; 0x34
   262a4:	tst	r0, #64	; 0x40
   262a8:	beq	26588 <__assert_fail@plt+0x148e8>
   262ac:	ldr	r0, [sp, #44]	; 0x2c
   262b0:	ldr	r9, [sp, #40]	; 0x28
   262b4:	ldr	r8, [r0, #84]	; 0x54
   262b8:	mov	r1, r9
   262bc:	bl	23cf8 <__assert_fail@plt+0x12058>
   262c0:	cmn	r0, #1
   262c4:	str	r0, [sp, #16]
   262c8:	beq	26578 <__assert_fail@plt+0x148d8>
   262cc:	ldr	r0, [sp, #36]	; 0x24
   262d0:	mov	r6, #0
   262d4:	str	r6, [sp, #56]	; 0x38
   262d8:	ldr	r0, [r0, #4]
   262dc:	cmp	r0, #0
   262e0:	ble	26584 <__assert_fail@plt+0x148e4>
   262e4:	ldr	r3, [sp, #48]	; 0x30
   262e8:	add	r1, r9, #1
   262ec:	mov	r7, #0
   262f0:	str	r1, [sp, #8]
   262f4:	add	r1, sp, #56	; 0x38
   262f8:	add	r1, r1, #16
   262fc:	str	r1, [sp, #24]
   26300:	add	r1, r3, #16
   26304:	str	r1, [sp, #28]
   26308:	ldr	r1, [sp, #16]
   2630c:	add	r1, r1, r1, lsl #1
   26310:	str	r1, [sp, #12]
   26314:	ldr	r1, [sp, #36]	; 0x24
   26318:	ldr	r2, [r3, #8]
   2631c:	ldr	r1, [r1, #8]
   26320:	ldr	sl, [r1, r7, lsl #2]
   26324:	ldr	r1, [r8]
   26328:	add	r1, r1, sl, lsl #3
   2632c:	cmp	sl, r2
   26330:	ldrb	r1, [r1, #4]
   26334:	bne	26350 <__assert_fail@plt+0x146b0>
   26338:	cmp	r1, #4
   2633c:	bne	26548 <__assert_fail@plt+0x148a8>
   26340:	ldr	r1, [r3, #12]
   26344:	cmp	r1, r9
   26348:	bne	26358 <__assert_fail@plt+0x146b8>
   2634c:	b	26548 <__assert_fail@plt+0x148a8>
   26350:	cmp	r1, #4
   26354:	bne	26548 <__assert_fail@plt+0x148a8>
   26358:	ldr	r0, [sp, #44]	; 0x2c
   2635c:	ldr	r1, [sp, #12]
   26360:	str	r7, [sp, #20]
   26364:	ldr	r7, [sp, #16]
   26368:	str	r6, [sp, #32]
   2636c:	ldr	r0, [r0, #116]	; 0x74
   26370:	add	r5, r0, r1, lsl #3
   26374:	b	26488 <__assert_fail@plt+0x147e8>
   26378:	ldr	r0, [sp, #32]
   2637c:	cmp	r0, #0
   26380:	bne	263b4 <__assert_fail@plt+0x14714>
   26384:	ldr	r0, [sp, #48]	; 0x30
   26388:	mov	r1, #12
   2638c:	vld1.32	{d16-d17}, [r0], r1
   26390:	vld1.32	{d18-d19}, [r0]
   26394:	add	r0, sp, #56	; 0x38
   26398:	vst1.64	{d16-d17}, [r0], r1
   2639c:	ldr	r1, [sp, #28]
   263a0:	vst1.32	{d18-d19}, [r0]
   263a4:	ldr	r0, [sp, #24]
   263a8:	bl	22268 <__assert_fail@plt+0x105c8>
   263ac:	cmp	r0, #0
   263b0:	bne	265a4 <__assert_fail@plt+0x14904>
   263b4:	ldr	r4, [sp, #40]	; 0x28
   263b8:	ldr	r0, [sp, #24]
   263bc:	mov	r1, r7
   263c0:	str	r4, [sp, #68]	; 0x44
   263c4:	str	sl, [sp, #64]	; 0x40
   263c8:	bl	220cc <__assert_fail@plt+0x1042c>
   263cc:	cmp	r0, #0
   263d0:	beq	265b4 <__assert_fail@plt+0x14914>
   263d4:	ldr	r5, [sp, #56]	; 0x38
   263d8:	ldr	r0, [sp, #44]	; 0x2c
   263dc:	add	r1, sp, #56	; 0x38
   263e0:	ldr	r4, [r5, r4, lsl #2]
   263e4:	bl	25b70 <__assert_fail@plt+0x13ed0>
   263e8:	cmp	r0, #0
   263ec:	bne	265a4 <__assert_fail@plt+0x14904>
   263f0:	ldr	r0, [sp, #48]	; 0x30
   263f4:	ldr	r1, [r0, #4]
   263f8:	cmp	r1, #0
   263fc:	beq	26418 <__assert_fail@plt+0x14778>
   26400:	ldr	r3, [sp, #8]
   26404:	mov	r0, r8
   26408:	mov	r2, r5
   2640c:	bl	25e08 <__assert_fail@plt+0x14168>
   26410:	cmp	r0, #0
   26414:	bne	265a4 <__assert_fail@plt+0x14904>
   26418:	ldr	r9, [sp, #40]	; 0x28
   2641c:	ldr	r0, [sp, #24]
   26420:	mov	r1, r7
   26424:	str	r5, [sp, #32]
   26428:	str	r4, [r5, r9, lsl #2]
   2642c:	bl	222e4 <__assert_fail@plt+0x10644>
   26430:	subs	r1, r0, #1
   26434:	blt	2644c <__assert_fail@plt+0x147ac>
   26438:	ldr	r2, [sp, #76]	; 0x4c
   2643c:	cmp	r2, r0
   26440:	subge	r2, r2, #1
   26444:	strge	r2, [sp, #76]	; 0x4c
   26448:	bgt	26464 <__assert_fail@plt+0x147c4>
   2644c:	ldr	r0, [sp, #44]	; 0x2c
   26450:	add	r1, r7, r7, lsl #1
   26454:	ldr	r0, [r0, #116]	; 0x74
   26458:	add	r0, r0, r1, lsl #3
   2645c:	ldr	r3, [sp, #48]	; 0x30
   26460:	b	26524 <__assert_fail@plt+0x14884>
   26464:	ldr	r3, [sp, #80]	; 0x50
   26468:	add	r0, r3, r0, lsl #2
   2646c:	ldr	r3, [r0]
   26470:	add	r1, r1, #1
   26474:	cmp	r1, r2
   26478:	str	r3, [r0, #-4]
   2647c:	add	r0, r0, #4
   26480:	blt	2646c <__assert_fail@plt+0x147cc>
   26484:	b	2644c <__assert_fail@plt+0x147ac>
   26488:	ldr	r0, [r5]
   2648c:	cmp	r0, sl
   26490:	bne	26520 <__assert_fail@plt+0x14880>
   26494:	ldr	r0, [r5, #8]
   26498:	ldr	r1, [r5, #12]
   2649c:	subs	r0, r1, r0
   264a0:	add	r6, r0, r9
   264a4:	beq	264b4 <__assert_fail@plt+0x14814>
   264a8:	ldr	r0, [r8, #12]
   264ac:	add	r0, r0, sl, lsl #2
   264b0:	b	264c4 <__assert_fail@plt+0x14824>
   264b4:	ldr	r0, [r8, #20]
   264b8:	add	r1, sl, sl, lsl #1
   264bc:	add	r0, r0, r1, lsl #2
   264c0:	ldr	r0, [r0, #8]
   264c4:	ldr	r1, [r3, #12]
   264c8:	cmp	r6, r1
   264cc:	bgt	26520 <__assert_fail@plt+0x14880>
   264d0:	ldr	r1, [r3]
   264d4:	ldr	r1, [r1, r6, lsl #2]
   264d8:	cmp	r1, #0
   264dc:	beq	26520 <__assert_fail@plt+0x14880>
   264e0:	ldr	r4, [r0]
   264e4:	add	r0, r1, #4
   264e8:	mov	r1, r4
   264ec:	bl	222e4 <__assert_fail@plt+0x10644>
   264f0:	cmp	r0, #0
   264f4:	beq	26518 <__assert_fail@plt+0x14878>
   264f8:	stm	sp, {r4, r6}
   264fc:	mov	r2, sl
   26500:	mov	r3, r9
   26504:	ldr	r0, [sp, #44]	; 0x2c
   26508:	ldr	r1, [sp, #28]
   2650c:	bl	269e0 <__assert_fail@plt+0x14d40>
   26510:	cmp	r0, #0
   26514:	beq	26378 <__assert_fail@plt+0x146d8>
   26518:	mov	r0, r5
   2651c:	b	2645c <__assert_fail@plt+0x147bc>
   26520:	mov	r0, r5
   26524:	add	r5, r0, #24
   26528:	ldrb	r0, [r0, #20]
   2652c:	add	r7, r7, #1
   26530:	cmp	r0, #0
   26534:	bne	26488 <__assert_fail@plt+0x147e8>
   26538:	ldr	r0, [sp, #36]	; 0x24
   2653c:	ldr	r7, [sp, #20]
   26540:	ldr	r6, [sp, #32]
   26544:	ldr	r0, [r0, #4]
   26548:	add	r7, r7, #1
   2654c:	cmp	r7, r0
   26550:	blt	26314 <__assert_fail@plt+0x14674>
   26554:	mov	r9, #0
   26558:	cmp	r6, #0
   2655c:	beq	26568 <__assert_fail@plt+0x148c8>
   26560:	ldr	r0, [sp, #80]	; 0x50
   26564:	bl	1a158 <__assert_fail@plt+0x84b8>
   26568:	cmp	r9, #0
   2656c:	str	r9, [sp, #52]	; 0x34
   26570:	moveq	r9, #0
   26574:	b	2658c <__assert_fail@plt+0x148ec>
   26578:	mov	r0, #0
   2657c:	str	r0, [sp, #52]	; 0x34
   26580:	b	26588 <__assert_fail@plt+0x148e8>
   26584:	str	r6, [sp, #52]	; 0x34
   26588:	mov	r9, #0
   2658c:	mov	r0, r9
   26590:	sub	sp, fp, #28
   26594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26598:	mov	r9, r0
   2659c:	str	r9, [sp, #52]	; 0x34
   265a0:	b	2658c <__assert_fail@plt+0x148ec>
   265a4:	mov	r9, r0
   265a8:	b	265b8 <__assert_fail@plt+0x14918>
   265ac:	str	r0, [sp, #56]	; 0x38
   265b0:	b	2659c <__assert_fail@plt+0x148fc>
   265b4:	mov	r9, #12
   265b8:	ldr	r6, [sp, #56]	; 0x38
   265bc:	b	26558 <__assert_fail@plt+0x148b8>
   265c0:	mov	r9, r0
   265c4:	b	2658c <__assert_fail@plt+0x148ec>
   265c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   265cc:	add	fp, sp, #28
   265d0:	sub	sp, sp, #12
   265d4:	ldr	ip, [r1, #4]
   265d8:	mov	sl, r0
   265dc:	mov	r0, #0
   265e0:	cmp	ip, #0
   265e4:	ldrne	lr, [r2, #4]
   265e8:	cmpne	lr, #0
   265ec:	beq	267c0 <__assert_fail@plt+0x14b20>
   265f0:	mov	r7, r1
   265f4:	ldr	r1, [sl, #4]
   265f8:	ldr	r6, [sl]
   265fc:	add	r3, lr, ip
   26600:	add	r4, r1, r3
   26604:	cmp	r4, r6
   26608:	ble	2664c <__assert_fail@plt+0x149ac>
   2660c:	mov	r5, r2
   26610:	mov	r2, sl
   26614:	add	r4, r6, r3
   26618:	ldr	r0, [r2, #8]!
   2661c:	lsl	r1, r4, #2
   26620:	str	r2, [sp, #8]
   26624:	bl	1a2b4 <__assert_fail@plt+0x8614>
   26628:	cmp	r0, #0
   2662c:	beq	267c8 <__assert_fail@plt+0x14b28>
   26630:	str	r4, [sl]
   26634:	str	r0, [sl, #8]
   26638:	mov	r2, r5
   2663c:	ldr	r1, [sl, #4]
   26640:	ldr	lr, [r5, #4]
   26644:	ldr	ip, [r7, #4]
   26648:	b	26654 <__assert_fail@plt+0x149b4>
   2664c:	add	r0, sl, #8
   26650:	str	r0, [sp, #8]
   26654:	str	r2, [sp, #4]
   26658:	ldr	r2, [r2, #8]
   2665c:	ldr	r4, [r7, #8]
   26660:	add	r3, ip, r1
   26664:	sub	r8, r1, #1
   26668:	add	r9, r3, lr
   2666c:	sub	ip, ip, #1
   26670:	sub	r3, lr, #1
   26674:	ldr	r1, [r2, r3, lsl #2]
   26678:	ldr	r6, [r4, ip, lsl #2]
   2667c:	cmp	r6, r1
   26680:	beq	266ac <__assert_fail@plt+0x14a0c>
   26684:	blt	2669c <__assert_fail@plt+0x149fc>
   26688:	sub	r5, ip, #1
   2668c:	cmp	ip, #0
   26690:	mov	ip, r5
   26694:	bgt	26678 <__assert_fail@plt+0x149d8>
   26698:	b	26720 <__assert_fail@plt+0x14a80>
   2669c:	cmp	lr, #2
   266a0:	mov	lr, r3
   266a4:	bge	26670 <__assert_fail@plt+0x149d0>
   266a8:	b	26720 <__assert_fail@plt+0x14a80>
   266ac:	mov	r0, r9
   266b0:	cmp	r8, #0
   266b4:	blt	266f8 <__assert_fail@plt+0x14a58>
   266b8:	ldr	r1, [sp, #8]
   266bc:	ldr	r9, [r1]
   266c0:	mov	r1, r8
   266c4:	ldr	r5, [r9, r1, lsl #2]
   266c8:	cmp	r5, r6
   266cc:	ble	266e4 <__assert_fail@plt+0x14a44>
   266d0:	sub	r8, r1, #1
   266d4:	cmp	r1, #0
   266d8:	mov	r1, r8
   266dc:	bgt	266c4 <__assert_fail@plt+0x14a24>
   266e0:	b	266f8 <__assert_fail@plt+0x14a58>
   266e4:	mov	r8, r1
   266e8:	bne	266f8 <__assert_fail@plt+0x14a58>
   266ec:	mov	r8, r1
   266f0:	mov	r9, r0
   266f4:	b	2670c <__assert_fail@plt+0x14a6c>
   266f8:	ldr	r1, [sp, #8]
   266fc:	mov	r9, r0
   26700:	sub	r9, r0, #1
   26704:	ldr	r1, [r1]
   26708:	str	r6, [r1, r9, lsl #2]
   2670c:	cmp	ip, #1
   26710:	blt	26720 <__assert_fail@plt+0x14a80>
   26714:	cmp	lr, #2
   26718:	mov	lr, r3
   2671c:	bge	2666c <__assert_fail@plt+0x149cc>
   26720:	ldr	lr, [r7, #4]
   26724:	ldr	r7, [sp, #4]
   26728:	ldr	r2, [sl, #4]
   2672c:	ldr	r0, [sl, #8]
   26730:	ldr	r4, [r7, #4]
   26734:	subs	r1, r2, #1
   26738:	add	r3, r1, lr
   2673c:	add	r3, r3, r4
   26740:	sub	r5, r3, r9
   26744:	add	r6, r5, #1
   26748:	cmpge	r5, #0
   2674c:	add	r7, r6, r2
   26750:	str	r7, [sl, #4]
   26754:	blt	267ac <__assert_fail@plt+0x14b0c>
   26758:	add	r2, r2, r4
   2675c:	add	r2, r2, lr
   26760:	sub	r2, r2, r9
   26764:	add	r7, r0, r2, lsl #2
   26768:	ldr	r2, [r0, r1, lsl #2]
   2676c:	ldr	r5, [r0, r3, lsl #2]
   26770:	cmp	r5, r2
   26774:	bgt	26790 <__assert_fail@plt+0x14af0>
   26778:	str	r2, [r7, r1, lsl #2]
   2677c:	sub	r2, r1, #1
   26780:	cmp	r1, #0
   26784:	mov	r1, r2
   26788:	bgt	26768 <__assert_fail@plt+0x14ac8>
   2678c:	b	267ac <__assert_fail@plt+0x14b0c>
   26790:	str	r5, [r7, r1, lsl #2]
   26794:	sub	r7, r7, #4
   26798:	subs	r6, r6, #1
   2679c:	sub	r3, r3, #1
   267a0:	mov	r2, #0
   267a4:	bne	26768 <__assert_fail@plt+0x14ac8>
   267a8:	b	267b0 <__assert_fail@plt+0x14b10>
   267ac:	mov	r2, r6
   267b0:	add	r1, r0, r9, lsl #2
   267b4:	lsl	r2, r2, #2
   267b8:	bl	118e0 <memcpy@plt>
   267bc:	mov	r0, #0
   267c0:	sub	sp, fp, #28
   267c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   267c8:	mov	r0, #12
   267cc:	b	267c0 <__assert_fail@plt+0x14b20>
   267d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   267d4:	add	fp, sp, #28
   267d8:	sub	sp, sp, #36	; 0x24
   267dc:	mov	r5, r2
   267e0:	mov	r2, r0
   267e4:	ldr	r0, [r0, #28]
   267e8:	str	r1, [sp, #20]
   267ec:	add	r1, r1, r1, lsl #1
   267f0:	mov	r9, #0
   267f4:	str	r3, [sp, #4]
   267f8:	str	r9, [sp, #28]
   267fc:	str	r9, [sp, #24]
   26800:	str	r9, [sp, #32]
   26804:	add	r1, r0, r1, lsl #2
   26808:	mov	r0, r1
   2680c:	ldr	r4, [r0, #4]!
   26810:	cmp	r4, #1
   26814:	blt	269b8 <__assert_fail@plt+0x14d18>
   26818:	add	r9, r1, #8
   2681c:	mov	r6, #0
   26820:	str	r0, [sp, #8]
   26824:	str	r1, [sp, #16]
   26828:	ldr	r0, [r9]
   2682c:	ldr	r1, [sp, #20]
   26830:	ldr	r0, [r0, r6, lsl #2]
   26834:	cmp	r0, r1
   26838:	beq	26910 <__assert_fail@plt+0x14c70>
   2683c:	ldr	r1, [r2]
   26840:	add	r1, r1, r0, lsl #3
   26844:	ldrb	r1, [r1, #4]
   26848:	tst	r1, #8
   2684c:	beq	26910 <__assert_fail@plt+0x14c70>
   26850:	ldr	r1, [r2, #20]
   26854:	add	r0, r0, r0, lsl #1
   26858:	mvn	sl, #0
   2685c:	mov	r7, r2
   26860:	str	r0, [sp, #12]
   26864:	add	r0, r1, r0, lsl #2
   26868:	ldr	r1, [r0, #4]
   2686c:	ldr	r0, [r0, #8]
   26870:	cmp	r1, #2
   26874:	ldr	r8, [r0]
   26878:	ldrge	sl, [r0, #4]
   2687c:	ldr	r0, [sp, #16]
   26880:	mov	r1, r8
   26884:	bl	222e4 <__assert_fail@plt+0x10644>
   26888:	cmp	r0, #0
   2688c:	mov	r2, r7
   26890:	beq	268cc <__assert_fail@plt+0x14c2c>
   26894:	cmp	sl, #1
   26898:	blt	26910 <__assert_fail@plt+0x14c70>
   2689c:	ldr	r0, [sp, #16]
   268a0:	mov	r1, sl
   268a4:	bl	222e4 <__assert_fail@plt+0x10644>
   268a8:	cmp	r0, #0
   268ac:	bne	2690c <__assert_fail@plt+0x14c6c>
   268b0:	mov	r0, r5
   268b4:	mov	r1, sl
   268b8:	bl	222e4 <__assert_fail@plt+0x10644>
   268bc:	cmp	r0, #0
   268c0:	mov	r2, r7
   268c4:	bne	268e4 <__assert_fail@plt+0x14c44>
   268c8:	b	26910 <__assert_fail@plt+0x14c70>
   268cc:	mov	r0, r5
   268d0:	mov	r1, r8
   268d4:	bl	222e4 <__assert_fail@plt+0x10644>
   268d8:	mov	r2, r7
   268dc:	cmp	r0, #0
   268e0:	beq	26894 <__assert_fail@plt+0x14bf4>
   268e4:	ldr	r0, [r2, #28]
   268e8:	ldr	r1, [sp, #12]
   268ec:	add	r2, r0, r1, lsl #2
   268f0:	ldr	r1, [sp, #4]
   268f4:	add	r0, sp, #24
   268f8:	bl	265c8 <__assert_fail@plt+0x14928>
   268fc:	cmp	r0, #0
   26900:	bne	269cc <__assert_fail@plt+0x14d2c>
   26904:	ldr	r0, [sp, #8]
   26908:	ldr	r4, [r0]
   2690c:	mov	r2, r7
   26910:	add	r6, r6, #1
   26914:	cmp	r6, r4
   26918:	blt	26828 <__assert_fail@plt+0x14b88>
   2691c:	ldr	sl, [sp, #8]
   26920:	ldr	r0, [sp, #16]
   26924:	cmp	r4, #1
   26928:	mov	r9, #0
   2692c:	blt	269b8 <__assert_fail@plt+0x14d18>
   26930:	ldr	r7, [r0, #8]
   26934:	mov	r4, #0
   26938:	add	r8, sp, #24
   2693c:	b	26968 <__assert_fail@plt+0x14cc8>
   26940:	ldr	r2, [r5, #8]
   26944:	add	r0, r2, r0, lsl #2
   26948:	ldr	r2, [r0]
   2694c:	add	r1, r1, #1
   26950:	str	r2, [r0, #-4]
   26954:	add	r0, r0, #4
   26958:	ldr	r2, [r5, #4]
   2695c:	cmp	r1, r2
   26960:	blt	26948 <__assert_fail@plt+0x14ca8>
   26964:	b	269a8 <__assert_fail@plt+0x14d08>
   26968:	ldr	r6, [r7, r4, lsl #2]
   2696c:	mov	r0, r8
   26970:	mov	r1, r6
   26974:	bl	222e4 <__assert_fail@plt+0x10644>
   26978:	cmp	r0, #0
   2697c:	bne	269a8 <__assert_fail@plt+0x14d08>
   26980:	mov	r0, r5
   26984:	mov	r1, r6
   26988:	bl	222e4 <__assert_fail@plt+0x10644>
   2698c:	subs	r1, r0, #1
   26990:	blt	269a8 <__assert_fail@plt+0x14d08>
   26994:	ldr	r2, [r5, #4]
   26998:	cmp	r2, r0
   2699c:	subge	r2, r2, #1
   269a0:	strge	r2, [r5, #4]
   269a4:	bgt	26940 <__assert_fail@plt+0x14ca0>
   269a8:	ldr	r0, [sl]
   269ac:	add	r4, r4, #1
   269b0:	cmp	r4, r0
   269b4:	blt	26968 <__assert_fail@plt+0x14cc8>
   269b8:	ldr	r0, [sp, #32]
   269bc:	bl	1a158 <__assert_fail@plt+0x84b8>
   269c0:	mov	r0, r9
   269c4:	sub	sp, fp, #28
   269c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   269cc:	mov	r4, r0
   269d0:	ldr	r0, [sp, #32]
   269d4:	bl	1a158 <__assert_fail@plt+0x84b8>
   269d8:	mov	r9, r4
   269dc:	b	269c0 <__assert_fail@plt+0x14d20>
   269e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   269e4:	add	fp, sp, #28
   269e8:	sub	sp, sp, #20
   269ec:	mov	r6, r1
   269f0:	mov	r1, r3
   269f4:	str	r2, [sp, #12]
   269f8:	mov	r7, r0
   269fc:	str	r3, [sp, #16]
   26a00:	bl	23cf8 <__assert_fail@plt+0x12058>
   26a04:	ldr	r1, [fp, #12]
   26a08:	str	r0, [sp, #8]
   26a0c:	mov	r0, r7
   26a10:	bl	23cf8 <__assert_fail@plt+0x12058>
   26a14:	mov	r4, r0
   26a18:	ldr	r0, [r6, #4]
   26a1c:	cmp	r0, #1
   26a20:	blt	26aa4 <__assert_fail@plt+0x14e04>
   26a24:	ldr	sl, [r7, #84]	; 0x54
   26a28:	mov	r5, #0
   26a2c:	ldr	r0, [r6, #8]
   26a30:	ldr	r2, [r7, #116]	; 0x74
   26a34:	ldr	r3, [sp, #12]
   26a38:	ldr	r1, [r0, r5, lsl #2]
   26a3c:	add	r0, r1, r1, lsl #1
   26a40:	ldr	r0, [r2, r0, lsl #3]
   26a44:	ldr	r2, [sl]
   26a48:	ldr	r9, [r2, r0, lsl #3]
   26a4c:	ldr	r0, [sp, #16]
   26a50:	str	r0, [sp]
   26a54:	ldr	r0, [sp, #8]
   26a58:	mov	r2, r9
   26a5c:	str	r0, [sp, #4]
   26a60:	mov	r0, r7
   26a64:	bl	26ab8 <__assert_fail@plt+0x14e18>
   26a68:	mov	r8, r0
   26a6c:	ldr	r0, [r6, #8]
   26a70:	ldr	r3, [fp, #8]
   26a74:	mov	r2, r9
   26a78:	ldr	r1, [r0, r5, lsl #2]
   26a7c:	ldr	r0, [fp, #12]
   26a80:	stm	sp, {r0, r4}
   26a84:	mov	r0, r7
   26a88:	bl	26ab8 <__assert_fail@plt+0x14e18>
   26a8c:	cmp	r0, r8
   26a90:	bne	26aac <__assert_fail@plt+0x14e0c>
   26a94:	ldr	r0, [r6, #4]
   26a98:	add	r5, r5, #1
   26a9c:	cmp	r5, r0
   26aa0:	blt	26a2c <__assert_fail@plt+0x14d8c>
   26aa4:	mov	r0, #0
   26aa8:	b	26ab0 <__assert_fail@plt+0x14e10>
   26aac:	mov	r0, #1
   26ab0:	sub	sp, fp, #28
   26ab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26ab8:	push	{r4, r5, fp, lr}
   26abc:	add	fp, sp, #8
   26ac0:	sub	sp, sp, #8
   26ac4:	ldr	r4, [r0, #116]	; 0x74
   26ac8:	add	r1, r1, r1, lsl #1
   26acc:	ldr	lr, [fp, #8]
   26ad0:	add	r4, r4, r1, lsl #3
   26ad4:	mvn	r1, #0
   26ad8:	ldr	ip, [r4, #8]
   26adc:	cmp	ip, lr
   26ae0:	bgt	26b30 <__assert_fail@plt+0x14e90>
   26ae4:	ldr	r4, [r4, #12]
   26ae8:	mov	r1, #1
   26aec:	cmp	r4, lr
   26af0:	blt	26b30 <__assert_fail@plt+0x14e90>
   26af4:	sub	r1, r4, lr
   26af8:	mov	r5, #1
   26afc:	cmp	ip, lr
   26b00:	clz	r1, r1
   26b04:	lsr	r4, r1, #5
   26b08:	lsl	r1, r4, #1
   26b0c:	orreq	r1, r5, r4, lsl #1
   26b10:	cmp	r1, #0
   26b14:	beq	26b2c <__assert_fail@plt+0x14e8c>
   26b18:	ldr	r5, [fp, #12]
   26b1c:	str	r5, [sp]
   26b20:	bl	26b3c <__assert_fail@plt+0x14e9c>
   26b24:	sub	sp, fp, #8
   26b28:	pop	{r4, r5, fp, pc}
   26b2c:	mov	r1, #0
   26b30:	mov	r0, r1
   26b34:	sub	sp, fp, #8
   26b38:	pop	{r4, r5, fp, pc}
   26b3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26b40:	add	fp, sp, #28
   26b44:	sub	sp, sp, #36	; 0x24
   26b48:	ldr	r4, [r0, #84]	; 0x54
   26b4c:	mov	r7, r0
   26b50:	mov	r5, r1
   26b54:	add	r1, r3, r3, lsl #1
   26b58:	str	r3, [sp, #32]
   26b5c:	ldr	r0, [r4, #24]
   26b60:	add	r1, r0, r1, lsl #2
   26b64:	mov	lr, r1
   26b68:	ldr	r0, [lr, #4]!
   26b6c:	cmp	r0, #1
   26b70:	blt	26d0c <__assert_fail@plt+0x1506c>
   26b74:	mov	ip, #1
   26b78:	mov	r6, r2
   26b7c:	and	r3, r5, #2
   26b80:	mov	sl, #0
   26b84:	mvn	r2, ip, lsl r2
   26b88:	cmp	r6, #31
   26b8c:	str	r3, [sp, #16]
   26b90:	str	r2, [sp, #24]
   26b94:	lsl	r2, ip, r6
   26b98:	and	ip, r5, #1
   26b9c:	str	r2, [sp, #28]
   26ba0:	mov	r2, #0
   26ba4:	str	ip, [sp, #12]
   26ba8:	movwgt	r2, #1
   26bac:	orr	r2, r2, r3, lsr #1
   26bb0:	add	r3, r1, #8
   26bb4:	str	r2, [sp, #20]
   26bb8:	stmib	sp, {r3, lr}
   26bbc:	ldr	r1, [r3]
   26bc0:	ldr	r9, [r1, sl, lsl #2]
   26bc4:	ldr	r1, [r4]
   26bc8:	add	r2, r1, r9, lsl #3
   26bcc:	ldrb	r2, [r2, #4]
   26bd0:	cmp	r2, #9
   26bd4:	beq	26cd0 <__assert_fail@plt+0x15030>
   26bd8:	cmp	r2, #8
   26bdc:	beq	26cec <__assert_fail@plt+0x1504c>
   26be0:	cmp	r2, #4
   26be4:	bne	26d00 <__assert_fail@plt+0x15060>
   26be8:	ldr	r1, [fp, #8]
   26bec:	cmn	r1, #1
   26bf0:	beq	26d00 <__assert_fail@plt+0x15060>
   26bf4:	ldr	r1, [fp, #8]
   26bf8:	ldr	r0, [r7, #116]	; 0x74
   26bfc:	add	r1, r1, r1, lsl #1
   26c00:	add	r0, r0, r1, lsl #3
   26c04:	add	r8, r0, #16
   26c08:	ldr	r0, [r8, #-16]
   26c0c:	cmp	r0, r9
   26c10:	bne	26cac <__assert_fail@plt+0x1500c>
   26c14:	cmp	r6, #31
   26c18:	bgt	26c2c <__assert_fail@plt+0x14f8c>
   26c1c:	ldr	r0, [r8]
   26c20:	ldr	r1, [sp, #28]
   26c24:	tst	r0, r1
   26c28:	beq	26cac <__assert_fail@plt+0x1500c>
   26c2c:	ldr	r0, [r4, #20]
   26c30:	add	r1, r9, r9, lsl #1
   26c34:	add	r0, r0, r1, lsl #2
   26c38:	ldr	r0, [r0, #8]
   26c3c:	ldr	r3, [r0]
   26c40:	ldr	r0, [sp, #32]
   26c44:	cmp	r3, r0
   26c48:	beq	26d14 <__assert_fail@plt+0x15074>
   26c4c:	ldr	r0, [fp, #8]
   26c50:	mov	r1, r5
   26c54:	mov	r2, r6
   26c58:	str	r0, [sp]
   26c5c:	mov	r0, r7
   26c60:	bl	26b3c <__assert_fail@plt+0x14e9c>
   26c64:	cmp	r0, #0
   26c68:	beq	26c80 <__assert_fail@plt+0x14fe0>
   26c6c:	cmn	r0, #1
   26c70:	beq	26d2c <__assert_fail@plt+0x1508c>
   26c74:	cmp	r6, #31
   26c78:	ble	26c9c <__assert_fail@plt+0x14ffc>
   26c7c:	b	26cac <__assert_fail@plt+0x1500c>
   26c80:	ldr	r0, [sp, #20]
   26c84:	cmp	r0, #0
   26c88:	beq	26c9c <__assert_fail@plt+0x14ffc>
   26c8c:	ldr	r0, [sp, #16]
   26c90:	cmp	r0, #0
   26c94:	beq	26cac <__assert_fail@plt+0x1500c>
   26c98:	b	26d20 <__assert_fail@plt+0x15080>
   26c9c:	ldr	r0, [r8]
   26ca0:	ldr	r1, [sp, #24]
   26ca4:	and	r0, r0, r1
   26ca8:	str	r0, [r8]
   26cac:	ldrb	r0, [r8, #4]
   26cb0:	add	r8, r8, #24
   26cb4:	cmp	r0, #0
   26cb8:	bne	26c08 <__assert_fail@plt+0x14f68>
   26cbc:	ldr	lr, [sp, #8]
   26cc0:	ldr	ip, [sp, #12]
   26cc4:	ldr	r3, [sp, #4]
   26cc8:	ldr	r0, [lr]
   26ccc:	b	26d00 <__assert_fail@plt+0x15060>
   26cd0:	ldr	r2, [sp, #16]
   26cd4:	cmp	r2, #0
   26cd8:	beq	26d00 <__assert_fail@plt+0x15060>
   26cdc:	ldr	r1, [r1, r9, lsl #3]
   26ce0:	cmp	r1, r6
   26ce4:	bne	26d00 <__assert_fail@plt+0x15060>
   26ce8:	b	26d20 <__assert_fail@plt+0x15080>
   26cec:	cmp	ip, #0
   26cf0:	beq	26d00 <__assert_fail@plt+0x15060>
   26cf4:	ldr	r1, [r1, r9, lsl #3]
   26cf8:	cmp	r1, r6
   26cfc:	beq	26d28 <__assert_fail@plt+0x15088>
   26d00:	add	sl, sl, #1
   26d04:	cmp	sl, r0
   26d08:	blt	26bbc <__assert_fail@plt+0x14f1c>
   26d0c:	ubfx	r0, r5, #1, #1
   26d10:	b	26d2c <__assert_fail@plt+0x1508c>
   26d14:	ldr	r0, [sp, #12]
   26d18:	rsb	r0, r0, #0
   26d1c:	b	26d2c <__assert_fail@plt+0x1508c>
   26d20:	mov	r0, #0
   26d24:	b	26d2c <__assert_fail@plt+0x1508c>
   26d28:	mvn	r0, #0
   26d2c:	sub	sp, fp, #28
   26d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26d34:	cmp	r0, #0
   26d38:	bxeq	lr
   26d3c:	push	{r4, r5, r6, sl, fp, lr}
   26d40:	add	fp, sp, #16
   26d44:	ldr	r1, [r0]
   26d48:	mov	r4, r0
   26d4c:	ldr	r0, [r0, #8]
   26d50:	cmp	r1, #1
   26d54:	blt	26d94 <__assert_fail@plt+0x150f4>
   26d58:	mov	r5, #0
   26d5c:	mov	r6, #0
   26d60:	add	r0, r0, r5
   26d64:	ldr	r0, [r0, #20]
   26d68:	bl	1a158 <__assert_fail@plt+0x84b8>
   26d6c:	ldr	r0, [r4, #8]
   26d70:	add	r0, r0, r5
   26d74:	ldr	r0, [r0, #8]
   26d78:	bl	1a158 <__assert_fail@plt+0x84b8>
   26d7c:	ldr	r1, [r4]
   26d80:	ldr	r0, [r4, #8]
   26d84:	add	r6, r6, #1
   26d88:	add	r5, r5, #24
   26d8c:	cmp	r6, r1
   26d90:	blt	26d60 <__assert_fail@plt+0x150c0>
   26d94:	pop	{r4, r5, r6, sl, fp, lr}
   26d98:	b	1a158 <__assert_fail@plt+0x84b8>
   26d9c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   26da0:	add	fp, sp, #24
   26da4:	mov	r4, r0
   26da8:	mvn	r0, #0
   26dac:	cmp	r4, #0
   26db0:	beq	26e50 <__assert_fail@plt+0x151b0>
   26db4:	mov	r5, r2
   26db8:	ldr	r2, [r4]
   26dbc:	cmp	r2, #0
   26dc0:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   26dc4:	sub	r0, r2, #1
   26dc8:	ldr	r9, [fp, #12]
   26dcc:	ldr	r8, [fp, #8]
   26dd0:	lsl	r7, r5, #3
   26dd4:	str	r0, [r4]
   26dd8:	add	r6, r0, r0, lsl #1
   26ddc:	ldr	r2, [r4, #8]
   26de0:	ldr	r0, [r2, r6, lsl #3]!
   26de4:	str	r0, [r1]
   26de8:	mov	r0, r3
   26dec:	ldr	r1, [r2, #8]
   26df0:	mov	r2, r7
   26df4:	bl	118e0 <memcpy@plt>
   26df8:	ldr	r0, [r4, #8]
   26dfc:	mov	r2, r7
   26e00:	add	r0, r0, r6, lsl #3
   26e04:	ldr	r0, [r0, #8]
   26e08:	add	r1, r0, r5, lsl #3
   26e0c:	mov	r0, r8
   26e10:	bl	118e0 <memcpy@plt>
   26e14:	ldr	r0, [r9, #8]
   26e18:	bl	1a158 <__assert_fail@plt+0x84b8>
   26e1c:	ldr	r0, [r4, #8]
   26e20:	add	r0, r0, r6, lsl #3
   26e24:	ldr	r0, [r0, #8]
   26e28:	bl	1a158 <__assert_fail@plt+0x84b8>
   26e2c:	ldr	r0, [r4, #8]
   26e30:	add	r0, r0, r6, lsl #3
   26e34:	vldr	d16, [r0, #12]
   26e38:	ldr	r0, [r0, #20]
   26e3c:	str	r0, [r9, #8]
   26e40:	vstr	d16, [r9]
   26e44:	ldr	r0, [r4, #8]
   26e48:	add	r0, r0, r6, lsl #3
   26e4c:	ldr	r0, [r0, #4]
   26e50:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26e54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26e58:	add	fp, sp, #28
   26e5c:	sub	sp, sp, #60	; 0x3c
   26e60:	sub	sp, sp, #1024	; 0x400
   26e64:	mov	r9, r0
   26e68:	ldrb	r0, [r0]
   26e6c:	mov	sl, r1
   26e70:	cmp	r0, #0
   26e74:	beq	2710c <__assert_fail@plt+0x1546c>
   26e78:	mov	r8, #1
   26e7c:	mov	r4, #0
   26e80:	ldrb	r7, [sl, r4]
   26e84:	cmp	r7, #0
   26e88:	beq	26ef4 <__assert_fail@plt+0x15254>
   26e8c:	uxtb	r6, r0
   26e90:	bl	11a6c <__ctype_b_loc@plt>
   26e94:	ldr	r5, [r0]
   26e98:	add	r0, r5, r6, lsl #1
   26e9c:	ldrb	r0, [r0, #1]
   26ea0:	tst	r0, #1
   26ea4:	beq	26eb4 <__assert_fail@plt+0x15214>
   26ea8:	bl	11a48 <__ctype_tolower_loc@plt>
   26eac:	ldr	r0, [r0]
   26eb0:	ldr	r6, [r0, r6, lsl #2]
   26eb4:	add	r0, r5, r7, lsl #1
   26eb8:	ldrb	r0, [r0, #1]
   26ebc:	tst	r0, #1
   26ec0:	beq	26ed0 <__assert_fail@plt+0x15230>
   26ec4:	bl	11a48 <__ctype_tolower_loc@plt>
   26ec8:	ldr	r0, [r0]
   26ecc:	ldr	r7, [r0, r7, lsl #2]
   26ed0:	sub	r0, r6, r7
   26ed4:	clz	r0, r0
   26ed8:	lsr	r0, r0, #5
   26edc:	and	r8, r8, r0
   26ee0:	add	r0, r9, r4
   26ee4:	add	r4, r4, #1
   26ee8:	ldrb	r0, [r0, #1]
   26eec:	cmp	r0, #0
   26ef0:	bne	26e80 <__assert_fail@plt+0x151e0>
   26ef4:	add	r0, sl, r4
   26ef8:	mov	r4, r9
   26efc:	ldrb	r1, [r0]
   26f00:	cmp	r1, #0
   26f04:	movwne	r4, #0
   26f08:	tst	r8, #1
   26f0c:	cmpeq	r1, #0
   26f10:	bne	2711c <__assert_fail@plt+0x1547c>
   26f14:	sub	r6, r0, sl
   26f18:	add	r0, r9, #1
   26f1c:	cmp	r6, #31
   26f20:	str	r0, [sp, #32]
   26f24:	str	r6, [sp, #44]	; 0x2c
   26f28:	bhi	27128 <__assert_fail@plt+0x15488>
   26f2c:	add	r2, sp, #52	; 0x34
   26f30:	mov	r0, sl
   26f34:	mov	r1, r6
   26f38:	bl	277d0 <__assert_fail@plt+0x15b30>
   26f3c:	ldr	r4, [sp, #52]	; 0x34
   26f40:	mov	r7, r0
   26f44:	mov	r0, sl
   26f48:	mov	r2, r7
   26f4c:	add	r1, sl, r4
   26f50:	bl	11ae4 <strncasecmp@plt>
   26f54:	cmp	r0, #0
   26f58:	beq	273a8 <__assert_fail@plt+0x15708>
   26f5c:	sub	r0, r6, r7
   26f60:	mov	r1, #0
   26f64:	mov	r2, #1
   26f68:	mov	r4, #0
   26f6c:	cmp	r7, r0
   26f70:	movcs	r0, r7
   26f74:	add	r0, r0, #1
   26f78:	str	r0, [sp, #20]
   26f7c:	str	r0, [sp, #52]	; 0x34
   26f80:	add	r0, r9, r6
   26f84:	bl	11b5c <memchr@plt>
   26f88:	cmp	r6, #0
   26f8c:	beq	2711c <__assert_fail@plt+0x1547c>
   26f90:	cmp	r0, #0
   26f94:	str	r9, [sp, #36]	; 0x24
   26f98:	bne	2711c <__assert_fail@plt+0x1547c>
   26f9c:	add	r0, sl, r7
   26fa0:	sub	sl, sl, #1
   26fa4:	mov	r5, r6
   26fa8:	str	r0, [sp, #48]	; 0x30
   26fac:	ldr	r0, [sp, #36]	; 0x24
   26fb0:	add	r0, r0, r7
   26fb4:	add	r0, r0, #1
   26fb8:	str	r0, [sp, #16]
   26fbc:	mov	r0, #0
   26fc0:	str	r0, [sp, #40]	; 0x28
   26fc4:	mov	r8, r7
   26fc8:	cmp	r6, r7
   26fcc:	str	r5, [sp, #28]
   26fd0:	bls	2704c <__assert_fail@plt+0x153ac>
   26fd4:	ldr	r0, [sp, #16]
   26fd8:	ldr	r1, [sp, #40]	; 0x28
   26fdc:	add	r4, r0, r1
   26fe0:	bl	11a6c <__ctype_b_loc@plt>
   26fe4:	ldr	r9, [r0]
   26fe8:	mov	r7, #0
   26fec:	ldr	r0, [sp, #48]	; 0x30
   26ff0:	ldrb	r6, [r0, r7]
   26ff4:	add	r0, r9, r6, lsl #1
   26ff8:	ldrb	r0, [r0, #1]
   26ffc:	tst	r0, #1
   27000:	beq	27010 <__assert_fail@plt+0x15370>
   27004:	bl	11a48 <__ctype_tolower_loc@plt>
   27008:	ldr	r0, [r0]
   2700c:	ldr	r6, [r0, r6, lsl #2]
   27010:	ldrb	r5, [r4, r7]
   27014:	add	r0, r9, r5, lsl #1
   27018:	ldrb	r0, [r0, #1]
   2701c:	tst	r0, #1
   27020:	beq	27030 <__assert_fail@plt+0x15390>
   27024:	bl	11a48 <__ctype_tolower_loc@plt>
   27028:	ldr	r0, [r0]
   2702c:	ldr	r5, [r0, r5, lsl #2]
   27030:	cmp	r6, r5
   27034:	bne	270c0 <__assert_fail@plt+0x15420>
   27038:	ldr	r1, [sp, #44]	; 0x2c
   2703c:	add	r7, r7, #1
   27040:	add	r0, r8, r7
   27044:	cmp	r0, r1
   27048:	bcc	26fec <__assert_fail@plt+0x1534c>
   2704c:	ldr	r0, [sp, #36]	; 0x24
   27050:	ldr	r1, [sp, #40]	; 0x28
   27054:	mov	r7, r8
   27058:	add	r9, r0, r1
   2705c:	cmp	r7, #0
   27060:	beq	27574 <__assert_fail@plt+0x158d4>
   27064:	bl	11a6c <__ctype_b_loc@plt>
   27068:	ldrb	r6, [sl, r7]
   2706c:	ldr	r5, [r0]
   27070:	add	r0, r5, r6, lsl #1
   27074:	ldrb	r0, [r0, #1]
   27078:	tst	r0, #1
   2707c:	beq	2708c <__assert_fail@plt+0x153ec>
   27080:	bl	11a48 <__ctype_tolower_loc@plt>
   27084:	ldr	r0, [r0]
   27088:	ldr	r6, [r0, r6, lsl #2]
   2708c:	ldrb	r4, [r9, r7]
   27090:	add	r0, r5, r4, lsl #1
   27094:	ldrb	r0, [r0, #1]
   27098:	tst	r0, #1
   2709c:	beq	270ac <__assert_fail@plt+0x1540c>
   270a0:	bl	11a48 <__ctype_tolower_loc@plt>
   270a4:	ldr	r0, [r0]
   270a8:	ldr	r4, [r0, r4, lsl #2]
   270ac:	sub	r7, r7, #1
   270b0:	cmp	r6, r4
   270b4:	beq	2705c <__assert_fail@plt+0x153bc>
   270b8:	ldr	r1, [sp, #20]
   270bc:	b	270c4 <__assert_fail@plt+0x15424>
   270c0:	add	r1, r7, #1
   270c4:	ldr	r2, [sp, #40]	; 0x28
   270c8:	ldr	r6, [sp, #44]	; 0x2c
   270cc:	ldr	r0, [sp, #32]
   270d0:	ldr	r3, [sp, #28]
   270d4:	mov	r4, #0
   270d8:	add	r2, r1, r2
   270dc:	add	r0, r0, r3
   270e0:	mov	r1, #0
   270e4:	add	r5, r2, r6
   270e8:	str	r2, [sp, #40]	; 0x28
   270ec:	sub	r2, r5, r3
   270f0:	bl	11b5c <memchr@plt>
   270f4:	cmp	r0, #0
   270f8:	bne	2711c <__assert_fail@plt+0x1547c>
   270fc:	mov	r7, r8
   27100:	cmp	r5, #0
   27104:	bne	26fc4 <__assert_fail@plt+0x15324>
   27108:	b	2711c <__assert_fail@plt+0x1547c>
   2710c:	ldrb	r0, [sl]
   27110:	cmp	r0, #0
   27114:	movne	r9, #0
   27118:	mov	r4, r9
   2711c:	mov	r0, r4
   27120:	sub	sp, fp, #28
   27124:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27128:	sub	r0, r6, #1
   2712c:	sub	r2, fp, #36	; 0x24
   27130:	mov	r1, r6
   27134:	str	r0, [sp, #20]
   27138:	mov	r0, sl
   2713c:	bl	277d0 <__assert_fail@plt+0x15b30>
   27140:	str	r0, [sp, #28]
   27144:	mov	r0, #0
   27148:	vdup.32	q8, r6
   2714c:	add	r8, sp, #52	; 0x34
   27150:	add	r1, r8, r0
   27154:	add	r0, r0, #16
   27158:	cmp	r0, #1024	; 0x400
   2715c:	vst1.32	{d16-d17}, [r1]
   27160:	bne	27150 <__assert_fail@plt+0x154b0>
   27164:	cmp	r6, #0
   27168:	beq	271b0 <__assert_fail@plt+0x15510>
   2716c:	bl	11a6c <__ctype_b_loc@plt>
   27170:	ldr	r4, [r0]
   27174:	ldr	r6, [sp, #20]
   27178:	mov	r5, sl
   2717c:	ldrb	r7, [r5]
   27180:	add	r0, r4, r7, lsl #1
   27184:	ldrb	r0, [r0, #1]
   27188:	tst	r0, #1
   2718c:	beq	2719c <__assert_fail@plt+0x154fc>
   27190:	bl	11a48 <__ctype_tolower_loc@plt>
   27194:	ldr	r0, [r0]
   27198:	ldr	r7, [r0, r7, lsl #2]
   2719c:	str	r6, [r8, r7, lsl #2]
   271a0:	sub	r6, r6, #1
   271a4:	add	r5, r5, #1
   271a8:	cmn	r6, #1
   271ac:	bne	2717c <__assert_fail@plt+0x154dc>
   271b0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   271b4:	ldr	r4, [sp, #28]
   271b8:	mov	r0, sl
   271bc:	add	r1, sl, r7
   271c0:	mov	r2, r4
   271c4:	bl	11ae4 <strncasecmp@plt>
   271c8:	cmp	r0, #0
   271cc:	beq	27584 <__assert_fail@plt+0x158e4>
   271d0:	ldr	r7, [sp, #44]	; 0x2c
   271d4:	mov	r1, #0
   271d8:	mov	r2, #1
   271dc:	sub	r0, r7, r4
   271e0:	cmp	r4, r0
   271e4:	movcs	r0, r4
   271e8:	mov	r4, #0
   271ec:	add	r0, r0, #1
   271f0:	str	r0, [sp, #24]
   271f4:	str	r0, [fp, #-36]	; 0xffffffdc
   271f8:	add	r0, r9, r7
   271fc:	bl	11b5c <memchr@plt>
   27200:	cmp	r7, #0
   27204:	beq	2711c <__assert_fail@plt+0x1547c>
   27208:	cmp	r0, #0
   2720c:	str	r9, [sp, #36]	; 0x24
   27210:	bne	2711c <__assert_fail@plt+0x1547c>
   27214:	ldr	r1, [sp, #28]
   27218:	add	r0, sl, r1
   2721c:	str	r0, [sp, #40]	; 0x28
   27220:	ldr	r0, [sp, #36]	; 0x24
   27224:	add	r0, r0, r1
   27228:	add	r0, r0, #1
   2722c:	str	r0, [sp, #16]
   27230:	sub	r0, sl, #1
   27234:	str	r0, [sp, #48]	; 0x30
   27238:	bl	11a6c <__ctype_b_loc@plt>
   2723c:	ldr	r6, [r0]
   27240:	mov	sl, #0
   27244:	mov	r8, r7
   27248:	ldr	r0, [sp, #36]	; 0x24
   2724c:	ldrb	r4, [r0, r8]
   27250:	add	r0, r6, r4, lsl #1
   27254:	ldrb	r0, [r0, #1]
   27258:	tst	r0, #1
   2725c:	beq	2726c <__assert_fail@plt+0x155cc>
   27260:	bl	11a48 <__ctype_tolower_loc@plt>
   27264:	ldr	r0, [r0]
   27268:	ldr	r4, [r0, r4, lsl #2]
   2726c:	add	r0, sp, #52	; 0x34
   27270:	ldr	r1, [r0, r4, lsl #2]
   27274:	cmp	r1, #0
   27278:	bne	27370 <__assert_fail@plt+0x156d0>
   2727c:	ldr	r0, [sp, #20]
   27280:	ldr	r1, [sp, #28]
   27284:	cmp	r1, r0
   27288:	bcs	272fc <__assert_fail@plt+0x1565c>
   2728c:	ldr	r0, [sp, #16]
   27290:	mov	r4, #0
   27294:	add	r9, r0, sl
   27298:	ldr	r0, [sp, #40]	; 0x28
   2729c:	ldrb	r5, [r0, r4]
   272a0:	add	r0, r6, r5, lsl #1
   272a4:	ldrb	r0, [r0, #1]
   272a8:	tst	r0, #1
   272ac:	beq	272bc <__assert_fail@plt+0x1561c>
   272b0:	bl	11a48 <__ctype_tolower_loc@plt>
   272b4:	ldr	r0, [r0]
   272b8:	ldr	r5, [r0, r5, lsl #2]
   272bc:	ldrb	r7, [r9, r4]
   272c0:	add	r0, r6, r7, lsl #1
   272c4:	ldrb	r0, [r0, #1]
   272c8:	tst	r0, #1
   272cc:	beq	272dc <__assert_fail@plt+0x1563c>
   272d0:	bl	11a48 <__ctype_tolower_loc@plt>
   272d4:	ldr	r0, [r0]
   272d8:	ldr	r7, [r0, r7, lsl #2]
   272dc:	cmp	r5, r7
   272e0:	bne	27368 <__assert_fail@plt+0x156c8>
   272e4:	ldr	r0, [sp, #28]
   272e8:	ldr	r1, [sp, #20]
   272ec:	add	r4, r4, #1
   272f0:	add	r0, r0, r4
   272f4:	cmp	r0, r1
   272f8:	bcc	27298 <__assert_fail@plt+0x155f8>
   272fc:	ldr	r0, [sp, #36]	; 0x24
   27300:	ldr	r7, [sp, #28]
   27304:	add	r4, r0, sl
   27308:	cmp	r7, #0
   2730c:	beq	277b8 <__assert_fail@plt+0x15b18>
   27310:	ldr	r0, [sp, #48]	; 0x30
   27314:	ldrb	r9, [r0, r7]
   27318:	add	r0, r6, r9, lsl #1
   2731c:	ldrb	r0, [r0, #1]
   27320:	tst	r0, #1
   27324:	beq	27334 <__assert_fail@plt+0x15694>
   27328:	bl	11a48 <__ctype_tolower_loc@plt>
   2732c:	ldr	r0, [r0]
   27330:	ldr	r9, [r0, r9, lsl #2]
   27334:	ldrb	r5, [r4, r7]
   27338:	add	r0, r6, r5, lsl #1
   2733c:	ldrb	r0, [r0, #1]
   27340:	tst	r0, #1
   27344:	beq	27354 <__assert_fail@plt+0x156b4>
   27348:	bl	11a48 <__ctype_tolower_loc@plt>
   2734c:	ldr	r0, [r0]
   27350:	ldr	r5, [r0, r5, lsl #2]
   27354:	sub	r7, r7, #1
   27358:	cmp	r9, r5
   2735c:	beq	27308 <__assert_fail@plt+0x15668>
   27360:	ldr	r1, [sp, #24]
   27364:	b	2736c <__assert_fail@plt+0x156cc>
   27368:	add	r1, r4, #1
   2736c:	ldr	r7, [sp, #44]	; 0x2c
   27370:	ldr	r0, [sp, #32]
   27374:	add	sl, r1, sl
   27378:	mov	r1, #0
   2737c:	mov	r4, #0
   27380:	add	r5, sl, r7
   27384:	sub	r2, r5, r8
   27388:	add	r0, r0, r8
   2738c:	bl	11b5c <memchr@plt>
   27390:	cmp	r0, #0
   27394:	bne	2711c <__assert_fail@plt+0x1547c>
   27398:	cmp	r5, #0
   2739c:	mov	r8, r5
   273a0:	bne	27248 <__assert_fail@plt+0x155a8>
   273a4:	b	2711c <__assert_fail@plt+0x1547c>
   273a8:	add	r0, r9, r6
   273ac:	mov	r1, #0
   273b0:	mov	r2, #1
   273b4:	str	r4, [sp, #20]
   273b8:	mov	r4, #0
   273bc:	bl	11b5c <memchr@plt>
   273c0:	cmp	r6, #0
   273c4:	beq	2711c <__assert_fail@plt+0x1547c>
   273c8:	cmp	r0, #0
   273cc:	str	sl, [sp, #48]	; 0x30
   273d0:	str	r9, [sp, #36]	; 0x24
   273d4:	bne	2711c <__assert_fail@plt+0x1547c>
   273d8:	ldr	r0, [sp, #20]
   273dc:	mov	r5, r6
   273e0:	mov	r9, #0
   273e4:	str	r7, [sp, #24]
   273e8:	sub	r0, r6, r0
   273ec:	str	r0, [sp, #16]
   273f0:	ldr	r0, [sp, #48]	; 0x30
   273f4:	sub	sl, r0, #1
   273f8:	rsb	r0, r7, #0
   273fc:	str	r0, [sp, #12]
   27400:	mov	r0, #0
   27404:	str	r0, [sp, #40]	; 0x28
   27408:	cmp	r7, r9
   2740c:	mov	r4, r7
   27410:	str	r5, [sp, #28]
   27414:	movcc	r4, r9
   27418:	cmp	r4, r6
   2741c:	bcs	27494 <__assert_fail@plt+0x157f4>
   27420:	ldr	r0, [sp, #36]	; 0x24
   27424:	ldr	r1, [sp, #40]	; 0x28
   27428:	add	r8, r0, r1
   2742c:	bl	11a6c <__ctype_b_loc@plt>
   27430:	ldr	r7, [r0]
   27434:	ldr	r0, [sp, #48]	; 0x30
   27438:	ldrb	r6, [r0, r4]
   2743c:	add	r0, r7, r6, lsl #1
   27440:	ldrb	r0, [r0, #1]
   27444:	tst	r0, #1
   27448:	beq	27458 <__assert_fail@plt+0x157b8>
   2744c:	bl	11a48 <__ctype_tolower_loc@plt>
   27450:	ldr	r0, [r0]
   27454:	ldr	r6, [r0, r6, lsl #2]
   27458:	add	r0, r8, r4
   2745c:	ldrb	r5, [r0, #1]
   27460:	add	r0, r7, r5, lsl #1
   27464:	ldrb	r0, [r0, #1]
   27468:	tst	r0, #1
   2746c:	beq	2747c <__assert_fail@plt+0x157dc>
   27470:	bl	11a48 <__ctype_tolower_loc@plt>
   27474:	ldr	r0, [r0]
   27478:	ldr	r5, [r0, r5, lsl #2]
   2747c:	cmp	r6, r5
   27480:	bne	2751c <__assert_fail@plt+0x1587c>
   27484:	ldr	r0, [sp, #44]	; 0x2c
   27488:	add	r4, r4, #1
   2748c:	cmp	r4, r0
   27490:	bcc	27434 <__assert_fail@plt+0x15794>
   27494:	ldr	r0, [sp, #36]	; 0x24
   27498:	ldr	r1, [sp, #40]	; 0x28
   2749c:	add	r8, r0, r1
   274a0:	ldr	r0, [sp, #24]
   274a4:	mov	r7, r0
   274a8:	cmp	r9, r0
   274ac:	bcs	27504 <__assert_fail@plt+0x15864>
   274b0:	bl	11a6c <__ctype_b_loc@plt>
   274b4:	ldrb	r6, [sl, r7]
   274b8:	ldr	r5, [r0]
   274bc:	add	r0, r5, r6, lsl #1
   274c0:	ldrb	r0, [r0, #1]
   274c4:	tst	r0, #1
   274c8:	beq	274d8 <__assert_fail@plt+0x15838>
   274cc:	bl	11a48 <__ctype_tolower_loc@plt>
   274d0:	ldr	r0, [r0]
   274d4:	ldr	r6, [r0, r6, lsl #2]
   274d8:	ldrb	r4, [r8, r7]
   274dc:	add	r0, r5, r4, lsl #1
   274e0:	ldrb	r0, [r0, #1]
   274e4:	tst	r0, #1
   274e8:	beq	274f8 <__assert_fail@plt+0x15858>
   274ec:	bl	11a48 <__ctype_tolower_loc@plt>
   274f0:	ldr	r0, [r0]
   274f4:	ldr	r4, [r0, r4, lsl #2]
   274f8:	sub	r0, r7, #1
   274fc:	cmp	r6, r4
   27500:	beq	274a4 <__assert_fail@plt+0x15804>
   27504:	add	r0, r9, #1
   27508:	ldr	r9, [sp, #16]
   2750c:	ldr	r1, [sp, #20]
   27510:	cmp	r7, r0
   27514:	bcs	2752c <__assert_fail@plt+0x1588c>
   27518:	b	27574 <__assert_fail@plt+0x158d4>
   2751c:	ldr	r0, [sp, #12]
   27520:	mov	r9, #0
   27524:	add	r0, r0, r4
   27528:	add	r1, r0, #1
   2752c:	ldr	r2, [sp, #40]	; 0x28
   27530:	ldr	r6, [sp, #44]	; 0x2c
   27534:	ldr	r0, [sp, #32]
   27538:	ldr	r3, [sp, #28]
   2753c:	mov	r4, #0
   27540:	add	r2, r1, r2
   27544:	add	r0, r0, r3
   27548:	mov	r1, #0
   2754c:	add	r5, r2, r6
   27550:	str	r2, [sp, #40]	; 0x28
   27554:	sub	r2, r5, r3
   27558:	bl	11b5c <memchr@plt>
   2755c:	cmp	r0, #0
   27560:	bne	2711c <__assert_fail@plt+0x1547c>
   27564:	ldr	r7, [sp, #24]
   27568:	cmp	r5, #0
   2756c:	bne	27408 <__assert_fail@plt+0x15768>
   27570:	b	2711c <__assert_fail@plt+0x1547c>
   27574:	ldr	r0, [sp, #32]
   27578:	ldr	r1, [sp, #40]	; 0x28
   2757c:	add	r4, r0, r1
   27580:	b	2711c <__assert_fail@plt+0x1547c>
   27584:	ldr	r6, [sp, #44]	; 0x2c
   27588:	mov	r1, #0
   2758c:	mov	r2, #1
   27590:	mov	r4, #0
   27594:	add	r0, r9, r6
   27598:	bl	11b5c <memchr@plt>
   2759c:	cmp	r6, #0
   275a0:	beq	2711c <__assert_fail@plt+0x1547c>
   275a4:	cmp	r0, #0
   275a8:	str	sl, [sp, #48]	; 0x30
   275ac:	str	r9, [sp, #36]	; 0x24
   275b0:	bne	2711c <__assert_fail@plt+0x1547c>
   275b4:	ldr	r0, [sp, #48]	; 0x30
   275b8:	sub	r8, r6, r7
   275bc:	sub	r0, r0, #1
   275c0:	str	r0, [sp, #40]	; 0x28
   275c4:	ldr	r0, [sp, #28]
   275c8:	rsb	r0, r0, #0
   275cc:	str	r0, [sp, #4]
   275d0:	bl	11a6c <__ctype_b_loc@plt>
   275d4:	ldr	r9, [r0]
   275d8:	mov	r0, #0
   275dc:	mov	r5, r6
   275e0:	mov	sl, #0
   275e4:	str	r7, [sp, #12]
   275e8:	str	r8, [sp, #8]
   275ec:	str	r0, [sp, #24]
   275f0:	ldr	r0, [sp, #36]	; 0x24
   275f4:	ldrb	r4, [r0, r5]
   275f8:	add	r0, r9, r4, lsl #1
   275fc:	ldrb	r0, [r0, #1]
   27600:	tst	r0, #1
   27604:	beq	27614 <__assert_fail@plt+0x15974>
   27608:	bl	11a48 <__ctype_tolower_loc@plt>
   2760c:	ldr	r0, [r0]
   27610:	ldr	r4, [r0, r4, lsl #2]
   27614:	add	r0, sp, #52	; 0x34
   27618:	ldr	r0, [r0, r4, lsl #2]
   2761c:	cmp	r0, #0
   27620:	beq	27640 <__assert_fail@plt+0x159a0>
   27624:	cmp	r0, r7
   27628:	mov	r1, r0
   2762c:	movcc	r1, r8
   27630:	cmp	sl, #0
   27634:	mov	sl, #0
   27638:	moveq	r1, r0
   2763c:	b	27778 <__assert_fail@plt+0x15ad8>
   27640:	ldr	r4, [sp, #28]
   27644:	ldr	r6, [sp, #20]
   27648:	str	r5, [sp, #16]
   2764c:	cmp	r4, sl
   27650:	movcc	r4, sl
   27654:	cmp	r4, r6
   27658:	bcs	276c4 <__assert_fail@plt+0x15a24>
   2765c:	ldr	r0, [sp, #36]	; 0x24
   27660:	ldr	r1, [sp, #24]
   27664:	add	r7, r0, r1
   27668:	ldr	r0, [sp, #48]	; 0x30
   2766c:	ldrb	r8, [r0, r4]
   27670:	add	r0, r9, r8, lsl #1
   27674:	ldrb	r0, [r0, #1]
   27678:	tst	r0, #1
   2767c:	beq	2768c <__assert_fail@plt+0x159ec>
   27680:	bl	11a48 <__ctype_tolower_loc@plt>
   27684:	ldr	r0, [r0]
   27688:	ldr	r8, [r0, r8, lsl #2]
   2768c:	add	r0, r7, r4
   27690:	ldrb	r5, [r0, #1]
   27694:	add	r0, r9, r5, lsl #1
   27698:	ldrb	r0, [r0, #1]
   2769c:	tst	r0, #1
   276a0:	beq	276b0 <__assert_fail@plt+0x15a10>
   276a4:	bl	11a48 <__ctype_tolower_loc@plt>
   276a8:	ldr	r0, [r0]
   276ac:	ldr	r5, [r0, r5, lsl #2]
   276b0:	cmp	r8, r5
   276b4:	bne	27758 <__assert_fail@plt+0x15ab8>
   276b8:	add	r4, r4, #1
   276bc:	cmp	r4, r6
   276c0:	bcc	27668 <__assert_fail@plt+0x159c8>
   276c4:	ldr	r0, [sp, #36]	; 0x24
   276c8:	ldr	r1, [sp, #24]
   276cc:	ldr	r8, [sp, #8]
   276d0:	add	r4, r0, r1
   276d4:	ldr	r0, [sp, #28]
   276d8:	mov	r7, r0
   276dc:	cmp	sl, r0
   276e0:	bcs	27734 <__assert_fail@plt+0x15a94>
   276e4:	ldr	r0, [sp, #40]	; 0x28
   276e8:	ldrb	r6, [r0, r7]
   276ec:	add	r0, r9, r6, lsl #1
   276f0:	ldrb	r0, [r0, #1]
   276f4:	tst	r0, #1
   276f8:	beq	27708 <__assert_fail@plt+0x15a68>
   276fc:	bl	11a48 <__ctype_tolower_loc@plt>
   27700:	ldr	r0, [r0]
   27704:	ldr	r6, [r0, r6, lsl #2]
   27708:	ldrb	r5, [r4, r7]
   2770c:	add	r0, r9, r5, lsl #1
   27710:	ldrb	r0, [r0, #1]
   27714:	tst	r0, #1
   27718:	beq	27728 <__assert_fail@plt+0x15a88>
   2771c:	bl	11a48 <__ctype_tolower_loc@plt>
   27720:	ldr	r0, [r0]
   27724:	ldr	r5, [r0, r5, lsl #2]
   27728:	sub	r0, r7, #1
   2772c:	cmp	r6, r5
   27730:	beq	276d8 <__assert_fail@plt+0x15a38>
   27734:	add	r0, sl, #1
   27738:	ldr	r6, [sp, #44]	; 0x2c
   2773c:	ldr	r5, [sp, #16]
   27740:	mov	sl, r8
   27744:	cmp	r7, r0
   27748:	ldr	r7, [sp, #12]
   2774c:	mov	r1, r7
   27750:	bcs	27778 <__assert_fail@plt+0x15ad8>
   27754:	b	277c4 <__assert_fail@plt+0x15b24>
   27758:	ldr	r0, [sp, #4]
   2775c:	ldr	r6, [sp, #44]	; 0x2c
   27760:	ldr	r7, [sp, #12]
   27764:	ldr	r8, [sp, #8]
   27768:	ldr	r5, [sp, #16]
   2776c:	mov	sl, #0
   27770:	add	r0, r0, r4
   27774:	add	r1, r0, #1
   27778:	ldr	r2, [sp, #24]
   2777c:	ldr	r0, [sp, #32]
   27780:	mov	r4, #0
   27784:	add	r2, r1, r2
   27788:	add	r0, r0, r5
   2778c:	mov	r1, r5
   27790:	add	r5, r2, r6
   27794:	str	r2, [sp, #24]
   27798:	sub	r2, r5, r1
   2779c:	mov	r1, #0
   277a0:	bl	11b5c <memchr@plt>
   277a4:	cmp	r0, #0
   277a8:	bne	2711c <__assert_fail@plt+0x1547c>
   277ac:	cmp	r5, #0
   277b0:	bne	275f0 <__assert_fail@plt+0x15950>
   277b4:	b	2711c <__assert_fail@plt+0x1547c>
   277b8:	ldr	r0, [sp, #32]
   277bc:	add	r4, r0, sl
   277c0:	b	2711c <__assert_fail@plt+0x1547c>
   277c4:	ldr	r0, [sp, #32]
   277c8:	ldr	r1, [sp, #24]
   277cc:	b	2757c <__assert_fail@plt+0x158dc>
   277d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   277d4:	add	fp, sp, #28
   277d8:	sub	sp, sp, #20
   277dc:	mov	r6, r1
   277e0:	cmp	r1, #3
   277e4:	str	r0, [sp, #16]
   277e8:	bcs	277fc <__assert_fail@plt+0x15b5c>
   277ec:	mov	r0, #1
   277f0:	str	r0, [r2]
   277f4:	sub	r0, r6, #1
   277f8:	b	27a1c <__assert_fail@plt+0x15d7c>
   277fc:	str	r2, [sp]
   27800:	bl	11a6c <__ctype_b_loc@plt>
   27804:	ldr	r2, [r0]
   27808:	mov	r0, #0
   2780c:	mvn	r4, #0
   27810:	mov	r7, #1
   27814:	mov	r5, #1
   27818:	mov	r1, #1
   2781c:	str	r6, [sp, #12]
   27820:	str	r2, [sp, #4]
   27824:	mov	r6, r0
   27828:	ldr	r0, [sp, #16]
   2782c:	str	r1, [sp, #8]
   27830:	ldrb	r8, [r0, r7]
   27834:	add	r0, r2, r8, lsl #1
   27838:	ldrb	r0, [r0, #1]
   2783c:	tst	r0, #1
   27840:	beq	27854 <__assert_fail@plt+0x15bb4>
   27844:	bl	11a48 <__ctype_tolower_loc@plt>
   27848:	ldr	r0, [r0]
   2784c:	ldr	r2, [sp, #4]
   27850:	ldrb	r8, [r0, r8, lsl #2]
   27854:	ldr	r1, [sp, #16]
   27858:	add	r0, r4, r5
   2785c:	mov	r9, r4
   27860:	ldrb	sl, [r1, r0]
   27864:	add	r0, r2, sl, lsl #1
   27868:	ldrb	r0, [r0, #1]
   2786c:	tst	r0, #1
   27870:	beq	27884 <__assert_fail@plt+0x15be4>
   27874:	bl	11a48 <__ctype_tolower_loc@plt>
   27878:	ldr	r0, [r0]
   2787c:	ldr	r2, [sp, #4]
   27880:	ldrb	sl, [r0, sl, lsl #2]
   27884:	cmp	r8, sl
   27888:	bcs	278a0 <__assert_fail@plt+0x15c00>
   2788c:	mov	r4, r9
   27890:	sub	r1, r7, r9
   27894:	mov	r5, #1
   27898:	mov	r0, r7
   2789c:	b	278d0 <__assert_fail@plt+0x15c30>
   278a0:	bne	278c0 <__assert_fail@plt+0x15c20>
   278a4:	ldr	r1, [sp, #8]
   278a8:	cmp	r5, r1
   278ac:	bne	278d8 <__assert_fail@plt+0x15c38>
   278b0:	add	r0, r6, r5
   278b4:	mov	r1, r5
   278b8:	mov	r5, #1
   278bc:	b	278e0 <__assert_fail@plt+0x15c40>
   278c0:	add	r0, r6, #1
   278c4:	mov	r1, #1
   278c8:	mov	r5, #1
   278cc:	mov	r4, r6
   278d0:	ldr	r6, [sp, #12]
   278d4:	b	278e8 <__assert_fail@plt+0x15c48>
   278d8:	add	r5, r5, #1
   278dc:	mov	r0, r6
   278e0:	ldr	r6, [sp, #12]
   278e4:	mov	r4, r9
   278e8:	add	r7, r0, r5
   278ec:	cmp	r7, r6
   278f0:	bcc	27824 <__assert_fail@plt+0x15b84>
   278f4:	ldr	r0, [sp]
   278f8:	cmp	r6, #2
   278fc:	str	r4, [sp, #4]
   27900:	str	r1, [r0]
   27904:	bcc	279f8 <__assert_fail@plt+0x15d58>
   27908:	bl	11a6c <__ctype_b_loc@plt>
   2790c:	ldr	r3, [r0]
   27910:	mov	r0, #0
   27914:	mvn	r5, #0
   27918:	mov	r7, #1
   2791c:	mov	sl, #1
   27920:	mov	r9, #1
   27924:	str	r3, [sp, #8]
   27928:	mov	r4, r0
   2792c:	ldr	r0, [sp, #16]
   27930:	ldrb	r6, [r0, r7]
   27934:	add	r0, r3, r6, lsl #1
   27938:	ldrb	r0, [r0, #1]
   2793c:	tst	r0, #1
   27940:	beq	27954 <__assert_fail@plt+0x15cb4>
   27944:	bl	11a48 <__ctype_tolower_loc@plt>
   27948:	ldr	r0, [r0]
   2794c:	ldr	r3, [sp, #8]
   27950:	ldrb	r6, [r0, r6, lsl #2]
   27954:	ldr	r1, [sp, #16]
   27958:	add	r0, r5, sl
   2795c:	mov	r8, r5
   27960:	ldrb	r5, [r1, r0]
   27964:	add	r0, r3, r5, lsl #1
   27968:	ldrb	r0, [r0, #1]
   2796c:	tst	r0, #1
   27970:	beq	27984 <__assert_fail@plt+0x15ce4>
   27974:	bl	11a48 <__ctype_tolower_loc@plt>
   27978:	ldr	r0, [r0]
   2797c:	ldr	r3, [sp, #8]
   27980:	ldrb	r5, [r0, r5, lsl #2]
   27984:	cmp	r5, r6
   27988:	bcs	279a0 <__assert_fail@plt+0x15d00>
   2798c:	mov	r5, r8
   27990:	sub	r9, r7, r8
   27994:	mov	sl, #1
   27998:	mov	r0, r7
   2799c:	b	279d0 <__assert_fail@plt+0x15d30>
   279a0:	cmp	r6, r5
   279a4:	bne	279c0 <__assert_fail@plt+0x15d20>
   279a8:	cmp	sl, r9
   279ac:	bne	279d8 <__assert_fail@plt+0x15d38>
   279b0:	add	r0, r4, sl
   279b4:	mov	r9, sl
   279b8:	mov	sl, #1
   279bc:	b	279e0 <__assert_fail@plt+0x15d40>
   279c0:	add	r0, r4, #1
   279c4:	mov	r9, #1
   279c8:	mov	sl, #1
   279cc:	mov	r5, r4
   279d0:	ldr	r1, [sp, #12]
   279d4:	b	279e8 <__assert_fail@plt+0x15d48>
   279d8:	add	sl, sl, #1
   279dc:	mov	r0, r4
   279e0:	ldr	r1, [sp, #12]
   279e4:	mov	r5, r8
   279e8:	add	r7, r0, sl
   279ec:	cmp	r7, r1
   279f0:	bcc	27928 <__assert_fail@plt+0x15c88>
   279f4:	b	27a00 <__assert_fail@plt+0x15d60>
   279f8:	mvn	r5, #0
   279fc:	mov	r9, #1
   27a00:	ldr	r0, [sp, #4]
   27a04:	add	r1, r5, #1
   27a08:	add	r0, r0, #1
   27a0c:	cmp	r1, r0
   27a10:	ldrcs	r0, [sp]
   27a14:	strcs	r9, [r0]
   27a18:	movcs	r0, r1
   27a1c:	sub	sp, fp, #28
   27a20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27a24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27a28:	add	fp, sp, #28
   27a2c:	sub	sp, sp, #44	; 0x2c
   27a30:	sub	sp, sp, #1024	; 0x400
   27a34:	ldrb	r3, [r0]
   27a38:	mov	r6, r0
   27a3c:	cmp	r3, #0
   27a40:	beq	27c28 <__assert_fail@plt+0x15f88>
   27a44:	mov	r0, #1
   27a48:	mov	r2, #0
   27a4c:	ldrb	r7, [r1, r2]
   27a50:	cmp	r7, #0
   27a54:	uxtbne	r3, r3
   27a58:	subne	r3, r3, r7
   27a5c:	clzne	r3, r3
   27a60:	lsrne	r3, r3, #5
   27a64:	andne	r0, r0, r3
   27a68:	addne	r3, r6, r2
   27a6c:	addne	r2, r2, #1
   27a70:	ldrbne	r3, [r3, #1]
   27a74:	cmpne	r3, #0
   27a78:	bne	27a4c <__assert_fail@plt+0x15dac>
   27a7c:	add	r7, r1, r2
   27a80:	mov	r5, r6
   27a84:	ldrb	r2, [r7]
   27a88:	cmp	r2, #0
   27a8c:	movwne	r5, #0
   27a90:	tst	r0, #1
   27a94:	cmpeq	r2, #0
   27a98:	bne	27c38 <__assert_fail@plt+0x15f98>
   27a9c:	sub	r4, r7, r1
   27aa0:	ldrb	r1, [r1]
   27aa4:	add	r0, r6, #1
   27aa8:	bl	11aa8 <strchr@plt>
   27aac:	cmp	r4, #1
   27ab0:	beq	27c44 <__assert_fail@plt+0x15fa4>
   27ab4:	cmp	r0, #0
   27ab8:	mov	r5, r0
   27abc:	beq	27c38 <__assert_fail@plt+0x15f98>
   27ac0:	add	r1, r6, r4
   27ac4:	sub	r6, r7, r4
   27ac8:	str	r0, [sp, #32]
   27acc:	subs	r5, r1, r0
   27ad0:	movwcc	r5, #1
   27ad4:	cmp	r4, #31
   27ad8:	bhi	27c4c <__assert_fail@plt+0x15fac>
   27adc:	add	r2, sp, #36	; 0x24
   27ae0:	mov	r0, r6
   27ae4:	mov	r1, r4
   27ae8:	bl	28054 <__assert_fail@plt+0x163b4>
   27aec:	ldr	r7, [sp, #36]	; 0x24
   27af0:	mov	r2, r6
   27af4:	mov	r6, r0
   27af8:	str	r2, [sp, #24]
   27afc:	mov	r0, r2
   27b00:	add	r1, r2, r7
   27b04:	mov	r2, r6
   27b08:	bl	11928 <memcmp@plt>
   27b0c:	cmp	r0, #0
   27b10:	str	r6, [sp, #20]
   27b14:	beq	27ddc <__assert_fail@plt+0x1613c>
   27b18:	sub	r0, r4, r6
   27b1c:	sub	r2, r4, r5
   27b20:	mov	r1, #0
   27b24:	cmp	r6, r0
   27b28:	movcs	r0, r6
   27b2c:	add	r0, r0, #1
   27b30:	str	r0, [sp, #16]
   27b34:	str	r0, [sp, #36]	; 0x24
   27b38:	ldr	r0, [sp, #32]
   27b3c:	add	r0, r0, r5
   27b40:	mov	r5, #0
   27b44:	bl	11b5c <memchr@plt>
   27b48:	cmp	r4, #0
   27b4c:	beq	27c38 <__assert_fail@plt+0x15f98>
   27b50:	ldr	r1, [sp, #32]
   27b54:	cmp	r0, #0
   27b58:	bne	27c38 <__assert_fail@plt+0x15f98>
   27b5c:	ldr	r0, [sp, #24]
   27b60:	mov	sl, #0
   27b64:	mov	ip, r4
   27b68:	add	r9, r0, r6
   27b6c:	add	r0, r1, r6
   27b70:	str	r0, [sp, #8]
   27b74:	rsb	r0, r6, #1
   27b78:	str	r0, [sp, #12]
   27b7c:	cmp	r4, r6
   27b80:	bls	27bb0 <__assert_fail@plt+0x15f10>
   27b84:	ldr	r0, [sp, #8]
   27b88:	add	r2, r0, sl
   27b8c:	mov	r0, #0
   27b90:	ldrb	r3, [r2, r0]
   27b94:	ldrb	r7, [r9, r0]
   27b98:	cmp	r7, r3
   27b9c:	bne	27be0 <__assert_fail@plt+0x15f40>
   27ba0:	add	r0, r0, #1
   27ba4:	add	r3, r6, r0
   27ba8:	cmp	r3, r4
   27bac:	bcc	27b90 <__assert_fail@plt+0x15ef0>
   27bb0:	ldr	r0, [sp, #12]
   27bb4:	ldr	r7, [sp, #24]
   27bb8:	add	r5, r1, sl
   27bbc:	cmp	r0, #1
   27bc0:	beq	27c38 <__assert_fail@plt+0x15f98>
   27bc4:	ldrb	r2, [r5, -r0]
   27bc8:	ldrb	r3, [r7, -r0]
   27bcc:	add	r0, r0, #1
   27bd0:	cmp	r3, r2
   27bd4:	beq	27bbc <__assert_fail@plt+0x15f1c>
   27bd8:	ldr	r2, [sp, #16]
   27bdc:	b	27be4 <__assert_fail@plt+0x15f44>
   27be0:	add	r2, r0, #1
   27be4:	add	sl, r2, sl
   27be8:	add	r0, r1, ip
   27bec:	mov	r1, #0
   27bf0:	mov	r7, r4
   27bf4:	mov	r5, #0
   27bf8:	add	r8, sl, r4
   27bfc:	sub	r2, r8, ip
   27c00:	bl	11b5c <memchr@plt>
   27c04:	cmp	r0, #0
   27c08:	bne	27c38 <__assert_fail@plt+0x15f98>
   27c0c:	ldr	r1, [sp, #32]
   27c10:	ldr	r6, [sp, #20]
   27c14:	cmp	r8, #0
   27c18:	mov	ip, r8
   27c1c:	mov	r4, r7
   27c20:	bne	27b7c <__assert_fail@plt+0x15edc>
   27c24:	b	27c38 <__assert_fail@plt+0x15f98>
   27c28:	ldrb	r0, [r1]
   27c2c:	cmp	r0, #0
   27c30:	movne	r6, #0
   27c34:	mov	r5, r6
   27c38:	mov	r0, r5
   27c3c:	sub	sp, fp, #28
   27c40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27c44:	mov	r5, r0
   27c48:	b	27c38 <__assert_fail@plt+0x15f98>
   27c4c:	sub	r2, fp, #36	; 0x24
   27c50:	mov	r0, r6
   27c54:	mov	r1, r4
   27c58:	bl	28054 <__assert_fail@plt+0x163b4>
   27c5c:	mov	r8, r0
   27c60:	mov	r0, #0
   27c64:	vdup.32	q8, r4
   27c68:	add	r2, sp, #36	; 0x24
   27c6c:	add	r1, r2, r0
   27c70:	add	r0, r0, #16
   27c74:	cmp	r0, #1024	; 0x400
   27c78:	vst1.32	{d16-d17}, [r1]
   27c7c:	bne	27c6c <__assert_fail@plt+0x15fcc>
   27c80:	cmp	r4, #0
   27c84:	beq	27c9c <__assert_fail@plt+0x15ffc>
   27c88:	mov	r0, r4
   27c8c:	ldrb	r1, [r7, -r0]
   27c90:	subs	r0, r0, #1
   27c94:	str	r0, [r2, r1, lsl #2]
   27c98:	bne	27c8c <__assert_fail@plt+0x15fec>
   27c9c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   27ca0:	mov	r0, r6
   27ca4:	mov	r2, r8
   27ca8:	add	r1, r6, r7
   27cac:	bl	11928 <memcmp@plt>
   27cb0:	cmp	r0, #0
   27cb4:	str	r4, [sp, #28]
   27cb8:	str	r8, [sp, #16]
   27cbc:	beq	27f00 <__assert_fail@plt+0x16260>
   27cc0:	sub	r0, r4, r8
   27cc4:	sub	r2, r4, r5
   27cc8:	mov	r1, #0
   27ccc:	cmp	r8, r0
   27cd0:	movcs	r0, r8
   27cd4:	add	r0, r0, #1
   27cd8:	str	r0, [sp, #24]
   27cdc:	str	r0, [fp, #-36]	; 0xffffffdc
   27ce0:	ldr	r0, [sp, #32]
   27ce4:	add	r0, r0, r5
   27ce8:	mov	r5, #0
   27cec:	bl	11b5c <memchr@plt>
   27cf0:	cmp	r4, #0
   27cf4:	beq	27c38 <__assert_fail@plt+0x15f98>
   27cf8:	ldr	lr, [sp, #32]
   27cfc:	cmp	r0, #0
   27d00:	bne	27c38 <__assert_fail@plt+0x15f98>
   27d04:	ldr	r0, [sp, #16]
   27d08:	sub	r8, r4, #1
   27d0c:	mov	r9, #0
   27d10:	mov	ip, r4
   27d14:	add	r7, r6, r0
   27d18:	add	r1, lr, r0
   27d1c:	rsb	r0, r0, #1
   27d20:	str	r1, [sp, #12]
   27d24:	str	r0, [sp, #20]
   27d28:	mov	r1, r4
   27d2c:	add	r0, lr, ip
   27d30:	add	r1, sp, #36	; 0x24
   27d34:	ldrb	r2, [r0, #-1]
   27d38:	ldr	r2, [r1, r2, lsl #2]
   27d3c:	cmp	r2, #0
   27d40:	bne	27da8 <__assert_fail@plt+0x16108>
   27d44:	ldr	r1, [sp, #16]
   27d48:	cmp	r1, r8
   27d4c:	bcs	27d7c <__assert_fail@plt+0x160dc>
   27d50:	ldr	r2, [sp, #12]
   27d54:	add	r3, r2, r9
   27d58:	mov	r2, #0
   27d5c:	ldrb	r5, [r3, r2]
   27d60:	ldrb	r4, [r7, r2]
   27d64:	add	r2, r2, #1
   27d68:	cmp	r4, r5
   27d6c:	bne	27da4 <__assert_fail@plt+0x16104>
   27d70:	add	r5, r1, r2
   27d74:	cmp	r5, r8
   27d78:	bcc	27d5c <__assert_fail@plt+0x160bc>
   27d7c:	ldr	r2, [sp, #20]
   27d80:	add	r5, lr, r9
   27d84:	cmp	r2, #1
   27d88:	beq	27c38 <__assert_fail@plt+0x15f98>
   27d8c:	ldrb	r3, [r5, -r2]
   27d90:	ldrb	r4, [r6, -r2]
   27d94:	add	r2, r2, #1
   27d98:	cmp	r4, r3
   27d9c:	beq	27d84 <__assert_fail@plt+0x160e4>
   27da0:	ldr	r2, [sp, #24]
   27da4:	ldr	r4, [sp, #28]
   27da8:	add	r9, r2, r9
   27dac:	mov	r1, #0
   27db0:	mov	r5, #0
   27db4:	add	sl, r9, r4
   27db8:	sub	r2, sl, ip
   27dbc:	bl	11b5c <memchr@plt>
   27dc0:	cmp	r0, #0
   27dc4:	bne	27c38 <__assert_fail@plt+0x15f98>
   27dc8:	ldr	lr, [sp, #32]
   27dcc:	cmp	sl, #0
   27dd0:	mov	ip, sl
   27dd4:	bne	27d2c <__assert_fail@plt+0x1608c>
   27dd8:	b	27c38 <__assert_fail@plt+0x15f98>
   27ddc:	ldr	r0, [sp, #32]
   27de0:	sub	r2, r4, r5
   27de4:	mov	r1, #0
   27de8:	add	r0, r0, r5
   27dec:	mov	r5, #0
   27df0:	bl	11b5c <memchr@plt>
   27df4:	cmp	r4, #0
   27df8:	beq	27c38 <__assert_fail@plt+0x15f98>
   27dfc:	ldr	r1, [sp, #32]
   27e00:	cmp	r0, #0
   27e04:	str	r7, [sp, #16]
   27e08:	bne	27c38 <__assert_fail@plt+0x15f98>
   27e0c:	ldr	r0, [sp, #16]
   27e10:	mov	sl, #0
   27e14:	mov	ip, r4
   27e18:	mov	r9, #0
   27e1c:	sub	r0, r4, r0
   27e20:	str	r0, [sp, #12]
   27e24:	sub	r0, r6, #1
   27e28:	str	r0, [sp, #8]
   27e2c:	rsb	r0, r6, #0
   27e30:	str	r0, [sp, #4]
   27e34:	cmp	r6, sl
   27e38:	mov	r0, r6
   27e3c:	ldr	r6, [sp, #24]
   27e40:	movcc	r0, sl
   27e44:	cmp	r0, r4
   27e48:	bcs	27e6c <__assert_fail@plt+0x161cc>
   27e4c:	add	r2, r1, r9
   27e50:	ldrb	r3, [r2, r0]
   27e54:	ldrb	r5, [r6, r0]
   27e58:	cmp	r5, r3
   27e5c:	bne	27eac <__assert_fail@plt+0x1620c>
   27e60:	add	r0, r0, #1
   27e64:	cmp	r0, r4
   27e68:	bcc	27e50 <__assert_fail@plt+0x161b0>
   27e6c:	ldr	r0, [sp, #8]
   27e70:	add	r5, r1, r9
   27e74:	add	r2, r0, #1
   27e78:	cmp	sl, r2
   27e7c:	bcs	27e94 <__assert_fail@plt+0x161f4>
   27e80:	ldrb	r3, [r5, r0]
   27e84:	ldrb	r7, [r6, r0]
   27e88:	sub	r0, r0, #1
   27e8c:	cmp	r7, r3
   27e90:	beq	27e74 <__assert_fail@plt+0x161d4>
   27e94:	add	r0, sl, #1
   27e98:	ldr	sl, [sp, #12]
   27e9c:	cmp	r2, r0
   27ea0:	ldr	r2, [sp, #16]
   27ea4:	bcs	27ebc <__assert_fail@plt+0x1621c>
   27ea8:	b	27c38 <__assert_fail@plt+0x15f98>
   27eac:	ldr	r2, [sp, #4]
   27eb0:	mov	sl, #0
   27eb4:	add	r0, r2, r0
   27eb8:	add	r2, r0, #1
   27ebc:	add	r9, r2, r9
   27ec0:	add	r0, r1, ip
   27ec4:	mov	r1, #0
   27ec8:	mov	r7, r4
   27ecc:	mov	r5, #0
   27ed0:	add	r8, r9, r4
   27ed4:	sub	r2, r8, ip
   27ed8:	bl	11b5c <memchr@plt>
   27edc:	cmp	r8, #0
   27ee0:	beq	27c38 <__assert_fail@plt+0x15f98>
   27ee4:	ldr	r1, [sp, #32]
   27ee8:	ldr	r6, [sp, #20]
   27eec:	cmp	r0, #0
   27ef0:	mov	ip, r8
   27ef4:	mov	r4, r7
   27ef8:	beq	27e34 <__assert_fail@plt+0x16194>
   27efc:	b	27c38 <__assert_fail@plt+0x15f98>
   27f00:	ldr	r0, [sp, #32]
   27f04:	sub	r2, r4, r5
   27f08:	mov	r1, #0
   27f0c:	add	r0, r0, r5
   27f10:	mov	r5, #0
   27f14:	bl	11b5c <memchr@plt>
   27f18:	cmp	r4, #0
   27f1c:	beq	27c38 <__assert_fail@plt+0x15f98>
   27f20:	ldr	r4, [sp, #32]
   27f24:	cmp	r0, #0
   27f28:	str	r7, [sp, #24]
   27f2c:	bne	27c38 <__assert_fail@plt+0x15f98>
   27f30:	ldr	r1, [sp, #28]
   27f34:	ldr	r0, [sp, #24]
   27f38:	mov	r9, #0
   27f3c:	mov	r8, #0
   27f40:	sub	r0, r1, r0
   27f44:	sub	sl, r1, #1
   27f48:	str	r0, [sp, #20]
   27f4c:	ldr	r0, [sp, #16]
   27f50:	sub	r2, r0, #1
   27f54:	rsb	r0, r0, #0
   27f58:	str	r2, [sp, #12]
   27f5c:	str	r0, [sp, #8]
   27f60:	add	r0, r4, r1
   27f64:	add	r3, sp, #36	; 0x24
   27f68:	ldrb	r2, [r0, #-1]
   27f6c:	ldr	r3, [r3, r2, lsl #2]
   27f70:	cmp	r3, #0
   27f74:	beq	27f9c <__assert_fail@plt+0x162fc>
   27f78:	ldr	r2, [sp, #24]
   27f7c:	ldr	r7, [sp, #20]
   27f80:	cmp	r3, r2
   27f84:	mov	r2, r3
   27f88:	movcc	r2, r7
   27f8c:	cmp	r9, #0
   27f90:	moveq	r2, r3
   27f94:	mov	r9, #0
   27f98:	b	2800c <__assert_fail@plt+0x1636c>
   27f9c:	ldr	r2, [sp, #16]
   27fa0:	cmp	r2, r9
   27fa4:	movcc	r2, r9
   27fa8:	cmp	r2, sl
   27fac:	bcs	27fd0 <__assert_fail@plt+0x16330>
   27fb0:	add	r3, r4, r8
   27fb4:	ldrb	r7, [r3, r2]
   27fb8:	ldrb	r5, [r6, r2]
   27fbc:	cmp	r5, r7
   27fc0:	bne	28044 <__assert_fail@plt+0x163a4>
   27fc4:	add	r2, r2, #1
   27fc8:	cmp	r2, sl
   27fcc:	bcc	27fb4 <__assert_fail@plt+0x16314>
   27fd0:	ldr	r2, [sp, #12]
   27fd4:	add	r5, r4, r8
   27fd8:	add	r3, r2, #1
   27fdc:	cmp	r9, r3
   27fe0:	bcs	27ff8 <__assert_fail@plt+0x16358>
   27fe4:	ldrb	r7, [r5, r2]
   27fe8:	ldrb	r4, [r6, r2]
   27fec:	sub	r2, r2, #1
   27ff0:	cmp	r4, r7
   27ff4:	beq	27fd8 <__assert_fail@plt+0x16338>
   27ff8:	add	r2, r9, #1
   27ffc:	ldr	r9, [sp, #20]
   28000:	cmp	r3, r2
   28004:	ldr	r2, [sp, #24]
   28008:	bcc	27c38 <__assert_fail@plt+0x15f98>
   2800c:	add	r8, r2, r8
   28010:	ldr	r2, [sp, #28]
   28014:	mov	r5, #0
   28018:	add	r7, r8, r2
   2801c:	sub	r2, r7, r1
   28020:	mov	r1, #0
   28024:	bl	11b5c <memchr@plt>
   28028:	cmp	r7, #0
   2802c:	beq	27c38 <__assert_fail@plt+0x15f98>
   28030:	ldr	r4, [sp, #32]
   28034:	cmp	r0, #0
   28038:	mov	r1, r7
   2803c:	beq	27f60 <__assert_fail@plt+0x162c0>
   28040:	b	27c38 <__assert_fail@plt+0x15f98>
   28044:	ldr	r3, [sp, #8]
   28048:	add	r2, r3, r2
   2804c:	add	r2, r2, #1
   28050:	b	27f94 <__assert_fail@plt+0x162f4>
   28054:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   28058:	add	fp, sp, #24
   2805c:	cmp	r1, #3
   28060:	movcc	r0, #1
   28064:	strcc	r0, [r2]
   28068:	subcc	r0, r1, #1
   2806c:	popcc	{r4, r5, r6, r7, r8, sl, fp, pc}
   28070:	mvn	r8, #0
   28074:	mov	r6, #0
   28078:	mov	r3, #1
   2807c:	mov	ip, #1
   28080:	mov	r5, #1
   28084:	b	28090 <__assert_fail@plt+0x163f0>
   28088:	add	r5, r5, #1
   2808c:	b	280dc <__assert_fail@plt+0x1643c>
   28090:	add	r4, r5, r8
   28094:	ldrb	r7, [r0, r3]
   28098:	ldrb	r4, [r0, r4]
   2809c:	cmp	r7, r4
   280a0:	bcs	280b0 <__assert_fail@plt+0x16410>
   280a4:	sub	ip, r3, r8
   280a8:	mov	r5, #1
   280ac:	b	280d8 <__assert_fail@plt+0x16438>
   280b0:	bne	280c8 <__assert_fail@plt+0x16428>
   280b4:	cmp	r5, ip
   280b8:	bne	28088 <__assert_fail@plt+0x163e8>
   280bc:	add	r6, ip, r6
   280c0:	mov	r5, #1
   280c4:	b	280dc <__assert_fail@plt+0x1643c>
   280c8:	add	r3, r6, #1
   280cc:	mov	r8, r6
   280d0:	mov	r5, #1
   280d4:	mov	ip, #1
   280d8:	mov	r6, r3
   280dc:	add	r3, r5, r6
   280e0:	cmp	r3, r1
   280e4:	bcc	28090 <__assert_fail@plt+0x163f0>
   280e8:	cmp	r1, #2
   280ec:	str	ip, [r2]
   280f0:	bcc	28174 <__assert_fail@plt+0x164d4>
   280f4:	mvn	ip, #0
   280f8:	mov	r4, #0
   280fc:	mov	r5, #1
   28100:	mov	lr, #1
   28104:	mov	r3, #1
   28108:	add	r7, r3, ip
   2810c:	ldrb	r6, [r0, r5]
   28110:	ldrb	r7, [r0, r7]
   28114:	cmp	r7, r6
   28118:	bcs	2812c <__assert_fail@plt+0x1648c>
   2811c:	sub	lr, r5, ip
   28120:	mov	r3, #1
   28124:	mov	r4, r5
   28128:	b	28164 <__assert_fail@plt+0x164c4>
   2812c:	cmp	r6, r7
   28130:	bne	28148 <__assert_fail@plt+0x164a8>
   28134:	cmp	r3, lr
   28138:	bne	28160 <__assert_fail@plt+0x164c0>
   2813c:	add	r4, lr, r4
   28140:	mov	r3, #1
   28144:	b	28164 <__assert_fail@plt+0x164c4>
   28148:	add	r7, r4, #1
   2814c:	mov	ip, r4
   28150:	mov	r3, #1
   28154:	mov	lr, #1
   28158:	mov	r4, r7
   2815c:	b	28164 <__assert_fail@plt+0x164c4>
   28160:	add	r3, r3, #1
   28164:	add	r5, r3, r4
   28168:	cmp	r5, r1
   2816c:	bcc	28108 <__assert_fail@plt+0x16468>
   28170:	b	2817c <__assert_fail@plt+0x164dc>
   28174:	mov	lr, #1
   28178:	mvn	ip, #0
   2817c:	add	r0, r8, #1
   28180:	add	r1, ip, #1
   28184:	cmp	r1, r0
   28188:	movcs	r0, r1
   2818c:	strcs	lr, [r2]
   28190:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   28194:	push	{fp, lr}
   28198:	mov	fp, sp
   2819c:	movw	r0, #45488	; 0xb1b0
   281a0:	movt	r0, #3
   281a4:	ldr	r0, [r0]
   281a8:	bl	11a78 <exit@plt>
   281ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   281b0:	add	fp, sp, #28
   281b4:	sub	sp, sp, #12
   281b8:	mov	r4, r3
   281bc:	mov	r6, r2
   281c0:	mov	r5, r1
   281c4:	mov	sl, r0
   281c8:	bl	11a9c <strlen@plt>
   281cc:	ldr	r8, [r5]
   281d0:	cmp	r8, #0
   281d4:	beq	28290 <__assert_fail@plt+0x165f0>
   281d8:	mov	r7, r0
   281dc:	mov	r0, #0
   281e0:	add	r9, r5, #4
   281e4:	mov	r5, #0
   281e8:	str	r6, [sp, #4]
   281ec:	str	r0, [sp]
   281f0:	mvn	r0, #0
   281f4:	str	r0, [sp, #8]
   281f8:	mov	r0, r8
   281fc:	mov	r1, sl
   28200:	mov	r2, r7
   28204:	bl	11c58 <strncmp@plt>
   28208:	cmp	r0, #0
   2820c:	bne	28264 <__assert_fail@plt+0x165c4>
   28210:	mov	r0, r8
   28214:	bl	11a9c <strlen@plt>
   28218:	cmp	r0, r7
   2821c:	beq	28294 <__assert_fail@plt+0x165f4>
   28220:	ldr	r0, [sp, #8]
   28224:	cmn	r0, #1
   28228:	beq	28260 <__assert_fail@plt+0x165c0>
   2822c:	ldr	r0, [sp, #4]
   28230:	cmp	r0, #0
   28234:	beq	28254 <__assert_fail@plt+0x165b4>
   28238:	ldr	r1, [sp, #8]
   2823c:	mov	r2, r4
   28240:	mla	r0, r1, r4, r0
   28244:	mov	r1, r6
   28248:	bl	11928 <memcmp@plt>
   2824c:	cmp	r0, #0
   28250:	beq	28264 <__assert_fail@plt+0x165c4>
   28254:	mov	r0, #1
   28258:	str	r0, [sp]
   2825c:	b	28264 <__assert_fail@plt+0x165c4>
   28260:	str	r5, [sp, #8]
   28264:	ldr	r8, [r9, r5, lsl #2]
   28268:	add	r6, r6, r4
   2826c:	add	r5, r5, #1
   28270:	cmp	r8, #0
   28274:	bne	281f8 <__assert_fail@plt+0x16558>
   28278:	ldr	r0, [sp]
   2827c:	tst	r0, #1
   28280:	ldr	r0, [sp, #8]
   28284:	mvnne	r0, #1
   28288:	sub	sp, fp, #28
   2828c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28290:	mvn	r5, #0
   28294:	mov	r0, r5
   28298:	sub	sp, fp, #28
   2829c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   282a0:	push	{r4, r5, r6, sl, fp, lr}
   282a4:	add	fp, sp, #16
   282a8:	sub	sp, sp, #8
   282ac:	mov	r4, r1
   282b0:	movw	r1, #43152	; 0xa890
   282b4:	mov	r5, r0
   282b8:	movw	r0, #43125	; 0xa875
   282bc:	cmn	r2, #1
   282c0:	mov	r2, #5
   282c4:	movt	r0, #2
   282c8:	movt	r1, #2
   282cc:	moveq	r1, r0
   282d0:	mov	r0, #0
   282d4:	bl	11934 <dcgettext@plt>
   282d8:	mov	r6, r0
   282dc:	mov	r0, #0
   282e0:	mov	r1, #8
   282e4:	mov	r2, r4
   282e8:	bl	18898 <__assert_fail@plt+0x6bf8>
   282ec:	mov	r4, r0
   282f0:	mov	r0, #1
   282f4:	mov	r1, r5
   282f8:	bl	18c68 <__assert_fail@plt+0x6fc8>
   282fc:	str	r0, [sp]
   28300:	mov	r0, #0
   28304:	mov	r1, #0
   28308:	mov	r2, r6
   2830c:	mov	r3, r4
   28310:	bl	119d0 <error@plt>
   28314:	sub	sp, fp, #16
   28318:	pop	{r4, r5, r6, sl, fp, pc}
   2831c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28320:	add	fp, sp, #28
   28324:	sub	sp, sp, #4
   28328:	mov	r5, r1
   2832c:	movw	r1, #43181	; 0xa8ad
   28330:	mov	r9, r2
   28334:	mov	r7, r0
   28338:	mov	r0, #0
   2833c:	mov	r2, #5
   28340:	mov	r8, #0
   28344:	movt	r1, #2
   28348:	bl	11934 <dcgettext@plt>
   2834c:	movw	sl, #45584	; 0xb210
   28350:	movt	sl, #3
   28354:	ldr	r1, [sl]
   28358:	bl	11c4c <fputs@plt>
   2835c:	ldr	r6, [r7]
   28360:	cmp	r6, #0
   28364:	bne	2837c <__assert_fail@plt+0x166dc>
   28368:	ldr	r1, [sl]
   2836c:	mov	r0, #10
   28370:	sub	sp, fp, #28
   28374:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28378:	b	11bf8 <putc@plt>
   2837c:	add	r4, r7, #4
   28380:	mov	r7, #0
   28384:	str	r4, [sp]
   28388:	cmp	r8, #0
   2838c:	beq	283d0 <__assert_fail@plt+0x16730>
   28390:	mov	r0, r7
   28394:	mov	r1, r5
   28398:	mov	r2, r9
   2839c:	bl	11928 <memcmp@plt>
   283a0:	cmp	r0, #0
   283a4:	bne	283d0 <__assert_fail@plt+0x16730>
   283a8:	ldr	r4, [sl]
   283ac:	mov	r0, r6
   283b0:	bl	18c78 <__assert_fail@plt+0x6fd8>
   283b4:	mov	r2, r0
   283b8:	mov	r0, r4
   283bc:	ldr	r4, [sp]
   283c0:	movw	r1, #43210	; 0xa8ca
   283c4:	movt	r1, #2
   283c8:	bl	11ab4 <fprintf@plt>
   283cc:	b	283f4 <__assert_fail@plt+0x16754>
   283d0:	ldr	r7, [sl]
   283d4:	mov	r0, r6
   283d8:	bl	18c78 <__assert_fail@plt+0x6fd8>
   283dc:	movw	r1, #43202	; 0xa8c2
   283e0:	mov	r2, r0
   283e4:	mov	r0, r7
   283e8:	movt	r1, #2
   283ec:	bl	11ab4 <fprintf@plt>
   283f0:	mov	r7, r5
   283f4:	ldr	r6, [r4, -r8, lsl #2]
   283f8:	add	r5, r5, r9
   283fc:	sub	r8, r8, #1
   28400:	cmp	r6, #0
   28404:	bne	28388 <__assert_fail@plt+0x166e8>
   28408:	b	28368 <__assert_fail@plt+0x166c8>
   2840c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   28410:	add	fp, sp, #24
   28414:	ldr	r8, [fp, #8]
   28418:	mov	r6, r0
   2841c:	mov	r4, r3
   28420:	mov	r5, r2
   28424:	mov	r7, r1
   28428:	mov	r0, r1
   2842c:	mov	r1, r2
   28430:	mov	r2, r3
   28434:	mov	r3, r8
   28438:	bl	281ac <__assert_fail@plt+0x1650c>
   2843c:	mov	r2, r0
   28440:	cmn	r0, #1
   28444:	bgt	28470 <__assert_fail@plt+0x167d0>
   28448:	ldr	r9, [fp, #12]
   2844c:	mov	r0, r6
   28450:	mov	r1, r7
   28454:	bl	282a0 <__assert_fail@plt+0x16600>
   28458:	mov	r0, r5
   2845c:	mov	r1, r4
   28460:	mov	r2, r8
   28464:	bl	2831c <__assert_fail@plt+0x1667c>
   28468:	blx	r9
   2846c:	mvn	r2, #0
   28470:	mov	r0, r2
   28474:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   28478:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2847c:	add	fp, sp, #24
   28480:	ldr	r6, [r1]
   28484:	cmp	r6, #0
   28488:	beq	284e8 <__assert_fail@plt+0x16848>
   2848c:	mov	r8, r1
   28490:	mov	r7, r2
   28494:	mov	r1, r2
   28498:	mov	r2, r3
   2849c:	mov	r4, r3
   284a0:	mov	r9, r0
   284a4:	bl	11928 <memcmp@plt>
   284a8:	cmp	r0, #0
   284ac:	beq	284ec <__assert_fail@plt+0x1684c>
   284b0:	add	r7, r7, r4
   284b4:	add	r5, r8, #4
   284b8:	ldr	r6, [r5]
   284bc:	cmp	r6, #0
   284c0:	beq	284e8 <__assert_fail@plt+0x16848>
   284c4:	mov	r0, r9
   284c8:	mov	r1, r7
   284cc:	mov	r2, r4
   284d0:	bl	11928 <memcmp@plt>
   284d4:	add	r7, r7, r4
   284d8:	add	r5, r5, #4
   284dc:	cmp	r0, #0
   284e0:	bne	284b8 <__assert_fail@plt+0x16818>
   284e4:	b	284ec <__assert_fail@plt+0x1684c>
   284e8:	mov	r6, #0
   284ec:	mov	r0, r6
   284f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   284f4:	push	{r4, r5, r6, sl, fp, lr}
   284f8:	add	fp, sp, #16
   284fc:	mov	r4, r0
   28500:	bl	119b8 <__fpending@plt>
   28504:	mov	r5, r0
   28508:	mov	r0, r4
   2850c:	bl	118bc <ferror@plt>
   28510:	mov	r6, r0
   28514:	mov	r0, r4
   28518:	bl	11b68 <fclose@plt>
   2851c:	cmp	r6, #0
   28520:	beq	28540 <__assert_fail@plt+0x168a0>
   28524:	mvn	r4, #0
   28528:	cmp	r0, #0
   2852c:	bne	2856c <__assert_fail@plt+0x168cc>
   28530:	bl	11acc <__errno_location@plt>
   28534:	mov	r1, #0
   28538:	str	r1, [r0]
   2853c:	b	2856c <__assert_fail@plt+0x168cc>
   28540:	cmp	r0, #0
   28544:	mov	r4, r0
   28548:	mvnne	r4, #0
   2854c:	cmp	r5, #0
   28550:	bne	2856c <__assert_fail@plt+0x168cc>
   28554:	cmp	r0, #0
   28558:	beq	2856c <__assert_fail@plt+0x168cc>
   2855c:	bl	11acc <__errno_location@plt>
   28560:	ldr	r0, [r0]
   28564:	subs	r4, r0, #9
   28568:	mvnne	r4, #0
   2856c:	mov	r0, r4
   28570:	pop	{r4, r5, r6, sl, fp, pc}
   28574:	push	{r4, r5, r6, r7, fp, lr}
   28578:	add	fp, sp, #16
   2857c:	mov	r4, r0
   28580:	ldr	r0, [r0, #4]
   28584:	mov	r5, r1
   28588:	cmp	r0, r1
   2858c:	bcs	285bc <__assert_fail@plt+0x1691c>
   28590:	mov	r6, r3
   28594:	cmp	r3, #0
   28598:	beq	285c4 <__assert_fail@plt+0x16924>
   2859c:	mvn	r0, #0
   285a0:	udiv	r0, r0, r6
   285a4:	cmp	r0, r5
   285a8:	bcs	285c4 <__assert_fail@plt+0x16924>
   285ac:	bl	11acc <__errno_location@plt>
   285b0:	mov	r1, #12
   285b4:	str	r1, [r0]
   285b8:	b	28628 <__assert_fail@plt+0x16988>
   285bc:	str	r5, [r4]
   285c0:	b	28620 <__assert_fail@plt+0x16980>
   285c4:	ldr	r0, [r4, #8]
   285c8:	mul	r1, r6, r5
   285cc:	cmp	r0, r2
   285d0:	beq	285e8 <__assert_fail@plt+0x16948>
   285d4:	bl	1a2b4 <__assert_fail@plt+0x8614>
   285d8:	mov	r7, r0
   285dc:	cmp	r0, #0
   285e0:	bne	28618 <__assert_fail@plt+0x16978>
   285e4:	b	28628 <__assert_fail@plt+0x16988>
   285e8:	mov	r0, r1
   285ec:	bl	1a224 <__assert_fail@plt+0x8584>
   285f0:	cmp	r0, #0
   285f4:	beq	28628 <__assert_fail@plt+0x16988>
   285f8:	ldr	r1, [r4, #8]
   285fc:	mov	r7, r0
   28600:	cmp	r1, #0
   28604:	beq	28618 <__assert_fail@plt+0x16978>
   28608:	ldr	r0, [r4]
   2860c:	mul	r2, r0, r6
   28610:	mov	r0, r7
   28614:	bl	118e0 <memcpy@plt>
   28618:	str	r5, [r4]
   2861c:	stmib	r4, {r5, r7}
   28620:	mov	r0, #1
   28624:	pop	{r4, r5, r6, r7, fp, pc}
   28628:	mov	r0, #0
   2862c:	pop	{r4, r5, r6, r7, fp, pc}
   28630:	push	{r4, sl, fp, lr}
   28634:	add	fp, sp, #8
   28638:	sub	sp, sp, #264	; 0x108
   2863c:	add	r1, sp, #7
   28640:	movw	r2, #257	; 0x101
   28644:	bl	2880c <__assert_fail@plt+0x16b6c>
   28648:	mov	r4, #0
   2864c:	cmp	r0, #0
   28650:	bne	28688 <__assert_fail@plt+0x169e8>
   28654:	movw	r1, #43215	; 0xa8cf
   28658:	add	r0, sp, #7
   2865c:	movt	r1, #2
   28660:	bl	11850 <strcmp@plt>
   28664:	cmp	r0, #0
   28668:	beq	28688 <__assert_fail@plt+0x169e8>
   2866c:	movw	r1, #43217	; 0xa8d1
   28670:	add	r0, sp, #7
   28674:	movt	r1, #2
   28678:	bl	11850 <strcmp@plt>
   2867c:	mov	r4, r0
   28680:	cmp	r0, #0
   28684:	movwne	r4, #1
   28688:	mov	r0, r4
   2868c:	sub	sp, fp, #8
   28690:	pop	{r4, sl, fp, pc}
   28694:	push	{fp, lr}
   28698:	mov	fp, sp
   2869c:	mov	r0, #14
   286a0:	bl	11bbc <nl_langinfo@plt>
   286a4:	movw	r1, #39775	; 0x9b5f
   286a8:	cmp	r0, #0
   286ac:	movt	r1, #2
   286b0:	movne	r1, r0
   286b4:	movw	r0, #43223	; 0xa8d7
   286b8:	ldrb	r2, [r1]
   286bc:	movt	r0, #2
   286c0:	cmp	r2, #0
   286c4:	movne	r0, r1
   286c8:	pop	{fp, pc}
   286cc:	push	{r4, sl, fp, lr}
   286d0:	add	fp, sp, #8
   286d4:	mov	r4, #0
   286d8:	adds	r0, r0, #16
   286dc:	adc	r1, r4, #0
   286e0:	rsb	r2, r1, #0
   286e4:	eors	r2, r2, r1
   286e8:	movwne	r2, #1
   286ec:	cmp	r0, #0
   286f0:	blt	2872c <__assert_fail@plt+0x16a8c>
   286f4:	cmp	r2, #0
   286f8:	asreq	r2, r0, #31
   286fc:	eoreq	r3, r0, r0
   28700:	andeq	r2, r2, #1
   28704:	eoreq	r1, r1, r2
   28708:	orrseq	r1, r3, r1
   2870c:	bne	2872c <__assert_fail@plt+0x16a8c>
   28710:	bl	11a0c <malloc@plt>
   28714:	cmp	r0, #0
   28718:	addne	r4, r0, #8
   2871c:	movne	r1, #8
   28720:	bfine	r4, r1, #0, #4
   28724:	subne	r0, r4, r0
   28728:	strbne	r0, [r4, #-1]
   2872c:	mov	r0, r4
   28730:	pop	{r4, sl, fp, pc}
   28734:	tst	r0, #7
   28738:	bne	28750 <__assert_fail@plt+0x16ab0>
   2873c:	tst	r0, #8
   28740:	bxeq	lr
   28744:	ldrb	r1, [r0, #-1]
   28748:	sub	r0, r0, r1
   2874c:	b	1a158 <__assert_fail@plt+0x84b8>
   28750:	push	{fp, lr}
   28754:	mov	fp, sp
   28758:	bl	11c64 <abort@plt>
   2875c:	push	{r4, sl, fp, lr}
   28760:	add	fp, sp, #8
   28764:	mov	r4, r0
   28768:	bl	11880 <wcwidth@plt>
   2876c:	cmn	r0, #1
   28770:	popgt	{r4, sl, fp, pc}
   28774:	mov	r0, r4
   28778:	bl	11958 <iswcntrl@plt>
   2877c:	clz	r0, r0
   28780:	lsr	r0, r0, #5
   28784:	pop	{r4, sl, fp, pc}
   28788:	push	{r4, r5, r6, sl, fp, lr}
   2878c:	add	fp, sp, #16
   28790:	mov	r4, r0
   28794:	mov	r0, r1
   28798:	mov	r5, r1
   2879c:	ldr	r1, [r0], #16
   287a0:	cmp	r1, r0
   287a4:	beq	287b0 <__assert_fail@plt+0x16b10>
   287a8:	mov	r6, r1
   287ac:	b	287c0 <__assert_fail@plt+0x16b20>
   287b0:	ldr	r2, [r5, #4]
   287b4:	add	r6, r4, #16
   287b8:	mov	r0, r6
   287bc:	bl	118e0 <memcpy@plt>
   287c0:	str	r6, [r4]
   287c4:	ldr	r0, [r5, #4]
   287c8:	str	r0, [r4, #4]
   287cc:	ldrb	r0, [r5, #8]
   287d0:	strb	r0, [r4, #8]
   287d4:	cmp	r0, #0
   287d8:	ldrne	r0, [r5, #12]
   287dc:	strne	r0, [r4, #12]
   287e0:	pop	{r4, r5, r6, sl, fp, pc}
   287e4:	movw	r2, #43232	; 0xa8e0
   287e8:	ubfx	r1, r0, #5, #3
   287ec:	and	r0, r0, #31
   287f0:	movt	r2, #2
   287f4:	ldr	r1, [r2, r1, lsl #2]
   287f8:	mov	r2, #1
   287fc:	and	r0, r1, r2, lsl r0
   28800:	cmp	r0, #0
   28804:	movwne	r0, #1
   28808:	bx	lr
   2880c:	push	{r4, r5, r6, r7, fp, lr}
   28810:	add	fp, sp, #16
   28814:	mov	r4, r1
   28818:	mov	r1, #0
   2881c:	mov	r6, r2
   28820:	bl	11b98 <setlocale@plt>
   28824:	cmp	r0, #0
   28828:	beq	28854 <__assert_fail@plt+0x16bb4>
   2882c:	mov	r7, r0
   28830:	bl	11a9c <strlen@plt>
   28834:	cmp	r0, r6
   28838:	bcs	28868 <__assert_fail@plt+0x16bc8>
   2883c:	add	r2, r0, #1
   28840:	mov	r0, r4
   28844:	mov	r1, r7
   28848:	bl	118e0 <memcpy@plt>
   2884c:	mov	r5, #0
   28850:	b	28890 <__assert_fail@plt+0x16bf0>
   28854:	cmp	r6, #0
   28858:	mov	r5, #22
   2885c:	movne	r0, #0
   28860:	strbne	r0, [r4]
   28864:	b	28890 <__assert_fail@plt+0x16bf0>
   28868:	mov	r5, #34	; 0x22
   2886c:	cmp	r6, #0
   28870:	beq	28890 <__assert_fail@plt+0x16bf0>
   28874:	sub	r6, r6, #1
   28878:	mov	r0, r4
   2887c:	mov	r1, r7
   28880:	mov	r2, r6
   28884:	bl	118e0 <memcpy@plt>
   28888:	mov	r0, #0
   2888c:	strb	r0, [r4, r6]
   28890:	mov	r0, r5
   28894:	pop	{r4, r5, r6, r7, fp, pc}
   28898:	mov	r1, #0
   2889c:	b	11b98 <setlocale@plt>
   288a0:	mov	r1, #0
   288a4:	mov	r2, #3
   288a8:	b	19f24 <__assert_fail@plt+0x8284>
   288ac:	eor	r1, r1, #-2147483648	; 0x80000000
   288b0:	b	288b8 <__assert_fail@plt+0x16c18>
   288b4:	eor	r3, r3, #-2147483648	; 0x80000000
   288b8:	push	{r4, r5, lr}
   288bc:	lsl	r4, r1, #1
   288c0:	lsl	r5, r3, #1
   288c4:	teq	r4, r5
   288c8:	teqeq	r0, r2
   288cc:	orrsne	ip, r4, r0
   288d0:	orrsne	ip, r5, r2
   288d4:	mvnsne	ip, r4, asr #21
   288d8:	mvnsne	ip, r5, asr #21
   288dc:	beq	28ac8 <__assert_fail@plt+0x16e28>
   288e0:	lsr	r4, r4, #21
   288e4:	rsbs	r5, r4, r5, lsr #21
   288e8:	rsblt	r5, r5, #0
   288ec:	ble	2890c <__assert_fail@plt+0x16c6c>
   288f0:	add	r4, r4, r5
   288f4:	eor	r2, r0, r2
   288f8:	eor	r3, r1, r3
   288fc:	eor	r0, r2, r0
   28900:	eor	r1, r3, r1
   28904:	eor	r2, r0, r2
   28908:	eor	r3, r1, r3
   2890c:	cmp	r5, #54	; 0x36
   28910:	pophi	{r4, r5, pc}
   28914:	tst	r1, #-2147483648	; 0x80000000
   28918:	lsl	r1, r1, #12
   2891c:	mov	ip, #1048576	; 0x100000
   28920:	orr	r1, ip, r1, lsr #12
   28924:	beq	28930 <__assert_fail@plt+0x16c90>
   28928:	rsbs	r0, r0, #0
   2892c:	rsc	r1, r1, #0
   28930:	tst	r3, #-2147483648	; 0x80000000
   28934:	lsl	r3, r3, #12
   28938:	orr	r3, ip, r3, lsr #12
   2893c:	beq	28948 <__assert_fail@plt+0x16ca8>
   28940:	rsbs	r2, r2, #0
   28944:	rsc	r3, r3, #0
   28948:	teq	r4, r5
   2894c:	beq	28ab0 <__assert_fail@plt+0x16e10>
   28950:	sub	r4, r4, #1
   28954:	rsbs	lr, r5, #32
   28958:	blt	28974 <__assert_fail@plt+0x16cd4>
   2895c:	lsl	ip, r2, lr
   28960:	adds	r0, r0, r2, lsr r5
   28964:	adc	r1, r1, #0
   28968:	adds	r0, r0, r3, lsl lr
   2896c:	adcs	r1, r1, r3, asr r5
   28970:	b	28990 <__assert_fail@plt+0x16cf0>
   28974:	sub	r5, r5, #32
   28978:	add	lr, lr, #32
   2897c:	cmp	r2, #1
   28980:	lsl	ip, r3, lr
   28984:	orrcs	ip, ip, #2
   28988:	adds	r0, r0, r3, asr r5
   2898c:	adcs	r1, r1, r3, asr #31
   28990:	and	r5, r1, #-2147483648	; 0x80000000
   28994:	bpl	289a4 <__assert_fail@plt+0x16d04>
   28998:	rsbs	ip, ip, #0
   2899c:	rscs	r0, r0, #0
   289a0:	rsc	r1, r1, #0
   289a4:	cmp	r1, #1048576	; 0x100000
   289a8:	bcc	289e8 <__assert_fail@plt+0x16d48>
   289ac:	cmp	r1, #2097152	; 0x200000
   289b0:	bcc	289d0 <__assert_fail@plt+0x16d30>
   289b4:	lsrs	r1, r1, #1
   289b8:	rrxs	r0, r0
   289bc:	rrx	ip, ip
   289c0:	add	r4, r4, #1
   289c4:	lsl	r2, r4, #21
   289c8:	cmn	r2, #4194304	; 0x400000
   289cc:	bcs	28b28 <__assert_fail@plt+0x16e88>
   289d0:	cmp	ip, #-2147483648	; 0x80000000
   289d4:	lsrseq	ip, r0, #1
   289d8:	adcs	r0, r0, #0
   289dc:	adc	r1, r1, r4, lsl #20
   289e0:	orr	r1, r1, r5
   289e4:	pop	{r4, r5, pc}
   289e8:	lsls	ip, ip, #1
   289ec:	adcs	r0, r0, r0
   289f0:	adc	r1, r1, r1
   289f4:	tst	r1, #1048576	; 0x100000
   289f8:	sub	r4, r4, #1
   289fc:	bne	289d0 <__assert_fail@plt+0x16d30>
   28a00:	teq	r1, #0
   28a04:	moveq	r1, r0
   28a08:	moveq	r0, #0
   28a0c:	clz	r3, r1
   28a10:	addeq	r3, r3, #32
   28a14:	sub	r3, r3, #11
   28a18:	subs	r2, r3, #32
   28a1c:	bge	28a40 <__assert_fail@plt+0x16da0>
   28a20:	adds	r2, r2, #12
   28a24:	ble	28a3c <__assert_fail@plt+0x16d9c>
   28a28:	add	ip, r2, #20
   28a2c:	rsb	r2, r2, #12
   28a30:	lsl	r0, r1, ip
   28a34:	lsr	r1, r1, r2
   28a38:	b	28a50 <__assert_fail@plt+0x16db0>
   28a3c:	add	r2, r2, #20
   28a40:	rsble	ip, r2, #32
   28a44:	lsl	r1, r1, r2
   28a48:	orrle	r1, r1, r0, lsr ip
   28a4c:	lslle	r0, r0, r2
   28a50:	subs	r4, r4, r3
   28a54:	addge	r1, r1, r4, lsl #20
   28a58:	orrge	r1, r1, r5
   28a5c:	popge	{r4, r5, pc}
   28a60:	mvn	r4, r4
   28a64:	subs	r4, r4, #31
   28a68:	bge	28aa4 <__assert_fail@plt+0x16e04>
   28a6c:	adds	r4, r4, #12
   28a70:	bgt	28a8c <__assert_fail@plt+0x16dec>
   28a74:	add	r4, r4, #20
   28a78:	rsb	r2, r4, #32
   28a7c:	lsr	r0, r0, r4
   28a80:	orr	r0, r0, r1, lsl r2
   28a84:	orr	r1, r5, r1, lsr r4
   28a88:	pop	{r4, r5, pc}
   28a8c:	rsb	r4, r4, #12
   28a90:	rsb	r2, r4, #32
   28a94:	lsr	r0, r0, r2
   28a98:	orr	r0, r0, r1, lsl r4
   28a9c:	mov	r1, r5
   28aa0:	pop	{r4, r5, pc}
   28aa4:	lsr	r0, r1, r4
   28aa8:	mov	r1, r5
   28aac:	pop	{r4, r5, pc}
   28ab0:	teq	r4, #0
   28ab4:	eor	r3, r3, #1048576	; 0x100000
   28ab8:	eoreq	r1, r1, #1048576	; 0x100000
   28abc:	addeq	r4, r4, #1
   28ac0:	subne	r5, r5, #1
   28ac4:	b	28950 <__assert_fail@plt+0x16cb0>
   28ac8:	mvns	ip, r4, asr #21
   28acc:	mvnsne	ip, r5, asr #21
   28ad0:	beq	28b38 <__assert_fail@plt+0x16e98>
   28ad4:	teq	r4, r5
   28ad8:	teqeq	r0, r2
   28adc:	beq	28af0 <__assert_fail@plt+0x16e50>
   28ae0:	orrs	ip, r4, r0
   28ae4:	moveq	r1, r3
   28ae8:	moveq	r0, r2
   28aec:	pop	{r4, r5, pc}
   28af0:	teq	r1, r3
   28af4:	movne	r1, #0
   28af8:	movne	r0, #0
   28afc:	popne	{r4, r5, pc}
   28b00:	lsrs	ip, r4, #21
   28b04:	bne	28b18 <__assert_fail@plt+0x16e78>
   28b08:	lsls	r0, r0, #1
   28b0c:	adcs	r1, r1, r1
   28b10:	orrcs	r1, r1, #-2147483648	; 0x80000000
   28b14:	pop	{r4, r5, pc}
   28b18:	adds	r4, r4, #4194304	; 0x400000
   28b1c:	addcc	r1, r1, #1048576	; 0x100000
   28b20:	popcc	{r4, r5, pc}
   28b24:	and	r5, r1, #-2147483648	; 0x80000000
   28b28:	orr	r1, r5, #2130706432	; 0x7f000000
   28b2c:	orr	r1, r1, #15728640	; 0xf00000
   28b30:	mov	r0, #0
   28b34:	pop	{r4, r5, pc}
   28b38:	mvns	ip, r4, asr #21
   28b3c:	movne	r1, r3
   28b40:	movne	r0, r2
   28b44:	mvnseq	ip, r5, asr #21
   28b48:	movne	r3, r1
   28b4c:	movne	r2, r0
   28b50:	orrs	r4, r0, r1, lsl #12
   28b54:	orrseq	r5, r2, r3, lsl #12
   28b58:	teqeq	r1, r3
   28b5c:	orrne	r1, r1, #524288	; 0x80000
   28b60:	pop	{r4, r5, pc}
   28b64:	teq	r0, #0
   28b68:	moveq	r1, #0
   28b6c:	bxeq	lr
   28b70:	push	{r4, r5, lr}
   28b74:	mov	r4, #1024	; 0x400
   28b78:	add	r4, r4, #50	; 0x32
   28b7c:	mov	r5, #0
   28b80:	mov	r1, #0
   28b84:	b	28a00 <__assert_fail@plt+0x16d60>
   28b88:	teq	r0, #0
   28b8c:	moveq	r1, #0
   28b90:	bxeq	lr
   28b94:	push	{r4, r5, lr}
   28b98:	mov	r4, #1024	; 0x400
   28b9c:	add	r4, r4, #50	; 0x32
   28ba0:	ands	r5, r0, #-2147483648	; 0x80000000
   28ba4:	rsbmi	r0, r0, #0
   28ba8:	mov	r1, #0
   28bac:	b	28a00 <__assert_fail@plt+0x16d60>
   28bb0:	lsls	r2, r0, #1
   28bb4:	asr	r1, r2, #3
   28bb8:	rrx	r1, r1
   28bbc:	lsl	r0, r2, #28
   28bc0:	andsne	r3, r2, #-16777216	; 0xff000000
   28bc4:	teqne	r3, #-16777216	; 0xff000000
   28bc8:	eorne	r1, r1, #939524096	; 0x38000000
   28bcc:	bxne	lr
   28bd0:	bics	r2, r2, #-16777216	; 0xff000000
   28bd4:	bxeq	lr
   28bd8:	teq	r3, #-16777216	; 0xff000000
   28bdc:	orreq	r1, r1, #524288	; 0x80000
   28be0:	bxeq	lr
   28be4:	push	{r4, r5, lr}
   28be8:	mov	r4, #896	; 0x380
   28bec:	and	r5, r1, #-2147483648	; 0x80000000
   28bf0:	bic	r1, r1, #-2147483648	; 0x80000000
   28bf4:	b	28a00 <__assert_fail@plt+0x16d60>
   28bf8:	orrs	r2, r0, r1
   28bfc:	bxeq	lr
   28c00:	push	{r4, r5, lr}
   28c04:	mov	r5, #0
   28c08:	b	28c28 <__assert_fail@plt+0x16f88>
   28c0c:	orrs	r2, r0, r1
   28c10:	bxeq	lr
   28c14:	push	{r4, r5, lr}
   28c18:	ands	r5, r1, #-2147483648	; 0x80000000
   28c1c:	bpl	28c28 <__assert_fail@plt+0x16f88>
   28c20:	rsbs	r0, r0, #0
   28c24:	rsc	r1, r1, #0
   28c28:	mov	r4, #1024	; 0x400
   28c2c:	add	r4, r4, #50	; 0x32
   28c30:	lsrs	ip, r1, #22
   28c34:	beq	289a4 <__assert_fail@plt+0x16d04>
   28c38:	mov	r2, #3
   28c3c:	lsrs	ip, ip, #3
   28c40:	addne	r2, r2, #3
   28c44:	lsrs	ip, ip, #3
   28c48:	addne	r2, r2, #3
   28c4c:	add	r2, r2, ip, lsr #3
   28c50:	rsb	r3, r2, #32
   28c54:	lsl	ip, r0, r3
   28c58:	lsr	r0, r0, r2
   28c5c:	orr	r0, r0, r1, lsl r3
   28c60:	lsr	r1, r1, r2
   28c64:	add	r4, r4, r2
   28c68:	b	289a4 <__assert_fail@plt+0x16d04>
   28c6c:	cmp	r3, #0
   28c70:	cmpeq	r2, #0
   28c74:	bne	28c8c <__assert_fail@plt+0x16fec>
   28c78:	cmp	r1, #0
   28c7c:	cmpeq	r0, #0
   28c80:	mvnne	r1, #0
   28c84:	mvnne	r0, #0
   28c88:	b	28ca8 <__assert_fail@plt+0x17008>
   28c8c:	sub	sp, sp, #8
   28c90:	push	{sp, lr}
   28c94:	bl	28cf8 <__assert_fail@plt+0x17058>
   28c98:	ldr	lr, [sp, #4]
   28c9c:	add	sp, sp, #8
   28ca0:	pop	{r2, r3}
   28ca4:	bx	lr
   28ca8:	push	{r1, lr}
   28cac:	mov	r0, #8
   28cb0:	bl	1182c <raise@plt>
   28cb4:	pop	{r1, pc}
   28cb8:	vmov	d6, r0, r1
   28cbc:	vldr	d7, [pc, #36]	; 28ce8 <__assert_fail@plt+0x17048>
   28cc0:	vldr	d5, [pc, #40]	; 28cf0 <__assert_fail@plt+0x17050>
   28cc4:	vmul.f64	d7, d6, d7
   28cc8:	vcvt.u32.f64	s14, d7
   28ccc:	vcvt.f64.u32	d4, s14
   28cd0:	vmov	r1, s14
   28cd4:	vmls.f64	d6, d4, d5
   28cd8:	vcvt.u32.f64	s15, d6
   28cdc:	vmov	r0, s15
   28ce0:	bx	lr
   28ce4:	nop			; (mov r0, r0)
   28ce8:	andeq	r0, r0, r0
   28cec:	ldclcc	0, cr0, [r0]
   28cf0:	andeq	r0, r0, r0
   28cf4:	mvnsmi	r0, r0
   28cf8:	cmp	r1, r3
   28cfc:	cmpeq	r0, r2
   28d00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28d04:	mov	r4, r0
   28d08:	movcc	r0, #0
   28d0c:	mov	r5, r1
   28d10:	ldr	lr, [sp, #36]	; 0x24
   28d14:	movcc	r1, r0
   28d18:	bcc	28e14 <__assert_fail@plt+0x17174>
   28d1c:	cmp	r3, #0
   28d20:	clzeq	ip, r2
   28d24:	clzne	ip, r3
   28d28:	addeq	ip, ip, #32
   28d2c:	cmp	r5, #0
   28d30:	clzeq	r1, r4
   28d34:	addeq	r1, r1, #32
   28d38:	clzne	r1, r5
   28d3c:	sub	ip, ip, r1
   28d40:	sub	sl, ip, #32
   28d44:	lsl	r9, r3, ip
   28d48:	rsb	fp, ip, #32
   28d4c:	orr	r9, r9, r2, lsl sl
   28d50:	orr	r9, r9, r2, lsr fp
   28d54:	lsl	r8, r2, ip
   28d58:	cmp	r5, r9
   28d5c:	cmpeq	r4, r8
   28d60:	movcc	r0, #0
   28d64:	movcc	r1, r0
   28d68:	bcc	28d84 <__assert_fail@plt+0x170e4>
   28d6c:	mov	r0, #1
   28d70:	subs	r4, r4, r8
   28d74:	lsl	r1, r0, sl
   28d78:	orr	r1, r1, r0, lsr fp
   28d7c:	lsl	r0, r0, ip
   28d80:	sbc	r5, r5, r9
   28d84:	cmp	ip, #0
   28d88:	beq	28e14 <__assert_fail@plt+0x17174>
   28d8c:	lsr	r6, r8, #1
   28d90:	orr	r6, r6, r9, lsl #31
   28d94:	lsr	r7, r9, #1
   28d98:	mov	r2, ip
   28d9c:	b	28dc0 <__assert_fail@plt+0x17120>
   28da0:	subs	r3, r4, r6
   28da4:	sbc	r8, r5, r7
   28da8:	adds	r3, r3, r3
   28dac:	adc	r8, r8, r8
   28db0:	adds	r4, r3, #1
   28db4:	adc	r5, r8, #0
   28db8:	subs	r2, r2, #1
   28dbc:	beq	28ddc <__assert_fail@plt+0x1713c>
   28dc0:	cmp	r5, r7
   28dc4:	cmpeq	r4, r6
   28dc8:	bcs	28da0 <__assert_fail@plt+0x17100>
   28dcc:	adds	r4, r4, r4
   28dd0:	adc	r5, r5, r5
   28dd4:	subs	r2, r2, #1
   28dd8:	bne	28dc0 <__assert_fail@plt+0x17120>
   28ddc:	lsr	r3, r4, ip
   28de0:	orr	r3, r3, r5, lsl fp
   28de4:	lsr	r2, r5, ip
   28de8:	orr	r3, r3, r5, lsr sl
   28dec:	adds	r0, r0, r4
   28df0:	mov	r4, r3
   28df4:	lsl	r3, r2, ip
   28df8:	orr	r3, r3, r4, lsl sl
   28dfc:	lsl	ip, r4, ip
   28e00:	orr	r3, r3, r4, lsr fp
   28e04:	adc	r1, r1, r5
   28e08:	subs	r0, r0, ip
   28e0c:	mov	r5, r2
   28e10:	sbc	r1, r1, r3
   28e14:	cmp	lr, #0
   28e18:	strdne	r4, [lr]
   28e1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28e20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   28e24:	mov	r7, r0
   28e28:	ldr	r6, [pc, #72]	; 28e78 <__assert_fail@plt+0x171d8>
   28e2c:	ldr	r5, [pc, #72]	; 28e7c <__assert_fail@plt+0x171dc>
   28e30:	add	r6, pc, r6
   28e34:	add	r5, pc, r5
   28e38:	sub	r6, r6, r5
   28e3c:	mov	r8, r1
   28e40:	mov	r9, r2
   28e44:	bl	117dc <pthread_mutex_unlock@plt-0x20>
   28e48:	asrs	r6, r6, #2
   28e4c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   28e50:	mov	r4, #0
   28e54:	add	r4, r4, #1
   28e58:	ldr	r3, [r5], #4
   28e5c:	mov	r2, r9
   28e60:	mov	r1, r8
   28e64:	mov	r0, r7
   28e68:	blx	r3
   28e6c:	cmp	r6, r4
   28e70:	bne	28e54 <__assert_fail@plt+0x171b4>
   28e74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   28e78:	ldrdeq	r2, [r1], -r4
   28e7c:	andeq	r2, r1, ip, asr #1
   28e80:	bx	lr
   28e84:	ldr	r3, [pc, #12]	; 28e98 <__assert_fail@plt+0x171f8>
   28e88:	mov	r1, #0
   28e8c:	add	r3, pc, r3
   28e90:	ldr	r2, [r3]
   28e94:	b	11af0 <__cxa_atexit@plt>
   28e98:	andeq	r2, r1, r0, lsl r3
   28e9c:	mov	r2, r1
   28ea0:	mov	r1, r0
   28ea4:	mov	r0, #3
   28ea8:	b	11c28 <__xstat64@plt>
   28eac:	mov	r2, r1
   28eb0:	mov	r1, r0
   28eb4:	mov	r0, #3
   28eb8:	b	11988 <__fxstat64@plt>
   28ebc:	mov	r2, r1
   28ec0:	mov	r1, r0
   28ec4:	mov	r0, #3
   28ec8:	b	11c88 <__lxstat64@plt>

Disassembly of section .fini:

00028ecc <.fini>:
   28ecc:	push	{r3, lr}
   28ed0:	pop	{r3, pc}
