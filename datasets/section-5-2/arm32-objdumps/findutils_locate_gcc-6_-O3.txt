
../repos/findutils/locate/locate:     file format elf32-littlearm


Disassembly of section .init:

000114d0 <.init>:
   114d0:	push	{r3, lr}
   114d4:	bl	12850 <__assert_fail@plt+0xeb0>
   114d8:	pop	{r3, pc}

Disassembly of section .plt:

000114dc <pthread_mutex_unlock@plt-0x14>:
   114dc:	push	{lr}		; (str lr, [sp, #-4]!)
   114e0:	ldr	lr, [pc, #4]	; 114ec <pthread_mutex_unlock@plt-0x4>
   114e4:	add	lr, pc, lr
   114e8:	ldr	pc, [lr, #8]!
   114ec:	andeq	r3, r3, r4, lsl fp

000114f0 <pthread_mutex_unlock@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #208896	; 0x33000
   114f8:	ldr	pc, [ip, #2836]!	; 0xb14

000114fc <fdopen@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #208896	; 0x33000
   11504:	ldr	pc, [ip, #2828]!	; 0xb0c

00011508 <calloc@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #208896	; 0x33000
   11510:	ldr	pc, [ip, #2820]!	; 0xb04

00011514 <wctype@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #208896	; 0x33000
   1151c:	ldr	pc, [ip, #2812]!	; 0xafc

00011520 <raise@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #208896	; 0x33000
   11528:	ldr	pc, [ip, #2804]!	; 0xaf4

0001152c <wcrtomb@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #208896	; 0x33000
   11534:	ldr	pc, [ip, #2796]!	; 0xaec

00011538 <iswctype@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #208896	; 0x33000
   11540:	ldr	pc, [ip, #2788]!	; 0xae4

00011544 <strcmp@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #208896	; 0x33000
   1154c:	ldr	pc, [ip, #2780]!	; 0xadc

00011550 <printf@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #208896	; 0x33000
   11558:	ldr	pc, [ip, #2772]!	; 0xad4

0001155c <pthread_mutex_destroy@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #208896	; 0x33000
   11564:	ldr	pc, [ip, #2764]!	; 0xacc

00011568 <fflush@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #208896	; 0x33000
   11570:	ldr	pc, [ip, #2756]!	; 0xac4

00011574 <wcwidth@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #208896	; 0x33000
   1157c:	ldr	pc, [ip, #2748]!	; 0xabc

00011580 <getuid@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #208896	; 0x33000
   11588:	ldr	pc, [ip, #2740]!	; 0xab4

0001158c <memmove@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #208896	; 0x33000
   11594:	ldr	pc, [ip, #2732]!	; 0xaac

00011598 <free@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #208896	; 0x33000
   115a0:	ldr	pc, [ip, #2724]!	; 0xaa4

000115a4 <pthread_mutex_lock@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #208896	; 0x33000
   115ac:	ldr	pc, [ip, #2716]!	; 0xa9c

000115b0 <ferror@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #208896	; 0x33000
   115b8:	ldr	pc, [ip, #2708]!	; 0xa94

000115bc <strndup@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #208896	; 0x33000
   115c4:	ldr	pc, [ip, #2700]!	; 0xa8c

000115c8 <_exit@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #208896	; 0x33000
   115d0:	ldr	pc, [ip, #2692]!	; 0xa84

000115d4 <memcpy@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #208896	; 0x33000
   115dc:	ldr	pc, [ip, #2684]!	; 0xa7c

000115e0 <pthread_mutex_init@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #208896	; 0x33000
   115e8:	ldr	pc, [ip, #2676]!	; 0xa74

000115ec <__strtoull_internal@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #208896	; 0x33000
   115f4:	ldr	pc, [ip, #2668]!	; 0xa6c

000115f8 <towlower@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #208896	; 0x33000
   11600:	ldr	pc, [ip, #2660]!	; 0xa64

00011604 <mbsinit@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #208896	; 0x33000
   1160c:	ldr	pc, [ip, #2652]!	; 0xa5c

00011610 <time@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #208896	; 0x33000
   11618:	ldr	pc, [ip, #2644]!	; 0xa54

0001161c <memcmp@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #208896	; 0x33000
   11624:	ldr	pc, [ip, #2636]!	; 0xa4c

00011628 <dcgettext@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #208896	; 0x33000
   11630:	ldr	pc, [ip, #2628]!	; 0xa44

00011634 <realloc@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #208896	; 0x33000
   1163c:	ldr	pc, [ip, #2620]!	; 0xa3c

00011640 <textdomain@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #208896	; 0x33000
   11648:	ldr	pc, [ip, #2612]!	; 0xa34

0001164c <iswcntrl@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #208896	; 0x33000
   11654:	ldr	pc, [ip, #2604]!	; 0xa2c

00011658 <geteuid@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #208896	; 0x33000
   11660:	ldr	pc, [ip, #2596]!	; 0xa24

00011664 <iswprint@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #208896	; 0x33000
   1166c:	ldr	pc, [ip, #2588]!	; 0xa1c

00011670 <setgroups@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #208896	; 0x33000
   11678:	ldr	pc, [ip, #2580]!	; 0xa14

0001167c <__fxstat64@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #208896	; 0x33000
   11684:	ldr	pc, [ip, #2572]!	; 0xa0c

00011688 <fwrite@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #208896	; 0x33000
   11690:	ldr	pc, [ip, #2564]!	; 0xa04

00011694 <lseek64@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #208896	; 0x33000
   1169c:	ldr	pc, [ip, #2556]!	; 0x9fc

000116a0 <__ctype_get_mb_cur_max@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #208896	; 0x33000
   116a8:	ldr	pc, [ip, #2548]!	; 0x9f4

000116ac <fread@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #208896	; 0x33000
   116b4:	ldr	pc, [ip, #2540]!	; 0x9ec

000116b8 <__fpending@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #208896	; 0x33000
   116c0:	ldr	pc, [ip, #2532]!	; 0x9e4

000116c4 <mbrtowc@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #208896	; 0x33000
   116cc:	ldr	pc, [ip, #2524]!	; 0x9dc

000116d0 <error@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #208896	; 0x33000
   116d8:	ldr	pc, [ip, #2516]!	; 0x9d4

000116dc <fnmatch@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #208896	; 0x33000
   116e4:	ldr	pc, [ip, #2508]!	; 0x9cc

000116e8 <open64@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #208896	; 0x33000
   116f0:	ldr	pc, [ip, #2500]!	; 0x9c4

000116f4 <getenv@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #208896	; 0x33000
   116fc:	ldr	pc, [ip, #2492]!	; 0x9bc

00011700 <setgid@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #208896	; 0x33000
   11708:	ldr	pc, [ip, #2484]!	; 0x9b4

0001170c <malloc@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #208896	; 0x33000
   11714:	ldr	pc, [ip, #2476]!	; 0x9ac

00011718 <__libc_start_main@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #208896	; 0x33000
   11720:	ldr	pc, [ip, #2468]!	; 0x9a4

00011724 <strftime@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #208896	; 0x33000
   1172c:	ldr	pc, [ip, #2460]!	; 0x99c

00011730 <__freading@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #208896	; 0x33000
   11738:	ldr	pc, [ip, #2452]!	; 0x994

0001173c <localtime@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #208896	; 0x33000
   11744:	ldr	pc, [ip, #2444]!	; 0x98c

00011748 <__ctype_tolower_loc@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #208896	; 0x33000
   11750:	ldr	pc, [ip, #2436]!	; 0x984

00011754 <__ctype_toupper_loc@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #208896	; 0x33000
   1175c:	ldr	pc, [ip, #2428]!	; 0x97c

00011760 <__gmon_start__@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #208896	; 0x33000
   11768:	ldr	pc, [ip, #2420]!	; 0x974

0001176c <getopt_long@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #208896	; 0x33000
   11774:	ldr	pc, [ip, #2412]!	; 0x96c

00011778 <__ctype_b_loc@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #208896	; 0x33000
   11780:	ldr	pc, [ip, #2404]!	; 0x964

00011784 <exit@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #208896	; 0x33000
   1178c:	ldr	pc, [ip, #2396]!	; 0x95c

00011790 <feof@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #208896	; 0x33000
   11798:	ldr	pc, [ip, #2388]!	; 0x954

0001179c <strtoul@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #208896	; 0x33000
   117a4:	ldr	pc, [ip, #2380]!	; 0x94c

000117a8 <strlen@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #208896	; 0x33000
   117b0:	ldr	pc, [ip, #2372]!	; 0x944

000117b4 <strchr@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #208896	; 0x33000
   117bc:	ldr	pc, [ip, #2364]!	; 0x93c

000117c0 <fprintf@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #208896	; 0x33000
   117c8:	ldr	pc, [ip, #2356]!	; 0x934

000117cc <ungetc@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #208896	; 0x33000
   117d4:	ldr	pc, [ip, #2348]!	; 0x92c

000117d8 <__errno_location@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #208896	; 0x33000
   117e0:	ldr	pc, [ip, #2340]!	; 0x924

000117e4 <iswalnum@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #208896	; 0x33000
   117ec:	ldr	pc, [ip, #2332]!	; 0x91c

000117f0 <strncasecmp@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #208896	; 0x33000
   117f8:	ldr	pc, [ip, #2324]!	; 0x914

000117fc <__cxa_atexit@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #208896	; 0x33000
   11804:	ldr	pc, [ip, #2316]!	; 0x90c

00011808 <getgid@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #208896	; 0x33000
   11810:	ldr	pc, [ip, #2308]!	; 0x904

00011814 <memset@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #208896	; 0x33000
   1181c:	ldr	pc, [ip, #2300]!	; 0x8fc

00011820 <putchar@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #208896	; 0x33000
   11828:	ldr	pc, [ip, #2292]!	; 0x8f4

0001182c <btowc@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #208896	; 0x33000
   11834:	ldr	pc, [ip, #2284]!	; 0x8ec

00011838 <fgetc@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #208896	; 0x33000
   11840:	ldr	pc, [ip, #2276]!	; 0x8e4

00011844 <fileno@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #208896	; 0x33000
   1184c:	ldr	pc, [ip, #2268]!	; 0x8dc

00011850 <difftime@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #208896	; 0x33000
   11858:	ldr	pc, [ip, #2260]!	; 0x8d4

0001185c <memchr@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #208896	; 0x33000
   11864:	ldr	pc, [ip, #2252]!	; 0x8cc

00011868 <fclose@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #208896	; 0x33000
   11870:	ldr	pc, [ip, #2244]!	; 0x8c4

00011874 <strnlen@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #208896	; 0x33000
   1187c:	ldr	pc, [ip, #2236]!	; 0x8bc

00011880 <fseeko64@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #208896	; 0x33000
   11888:	ldr	pc, [ip, #2228]!	; 0x8b4

0001188c <fcntl64@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #208896	; 0x33000
   11894:	ldr	pc, [ip, #2220]!	; 0x8ac

00011898 <setlocale@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #208896	; 0x33000
   118a0:	ldr	pc, [ip, #2212]!	; 0x8a4

000118a4 <strrchr@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #208896	; 0x33000
   118ac:	ldr	pc, [ip, #2204]!	; 0x89c

000118b0 <nl_langinfo@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #208896	; 0x33000
   118b8:	ldr	pc, [ip, #2196]!	; 0x894

000118bc <fputc@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #208896	; 0x33000
   118c4:	ldr	pc, [ip, #2188]!	; 0x88c

000118c8 <setuid@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #208896	; 0x33000
   118d0:	ldr	pc, [ip, #2180]!	; 0x884

000118d4 <localeconv@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #208896	; 0x33000
   118dc:	ldr	pc, [ip, #2172]!	; 0x87c

000118e0 <clearerr@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #208896	; 0x33000
   118e8:	ldr	pc, [ip, #2164]!	; 0x874

000118ec <sprintf@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #208896	; 0x33000
   118f4:	ldr	pc, [ip, #2156]!	; 0x86c

000118f8 <putc@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #208896	; 0x33000
   11900:	ldr	pc, [ip, #2148]!	; 0x864

00011904 <strpbrk@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #208896	; 0x33000
   1190c:	ldr	pc, [ip, #2140]!	; 0x85c

00011910 <bindtextdomain@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #208896	; 0x33000
   11918:	ldr	pc, [ip, #2132]!	; 0x854

0001191c <getdelim@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #208896	; 0x33000
   11924:	ldr	pc, [ip, #2124]!	; 0x84c

00011928 <__xstat64@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #208896	; 0x33000
   11930:	ldr	pc, [ip, #2116]!	; 0x844

00011934 <isatty@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #208896	; 0x33000
   1193c:	ldr	pc, [ip, #2108]!	; 0x83c

00011940 <towupper@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #208896	; 0x33000
   11948:	ldr	pc, [ip, #2100]!	; 0x834

0001194c <fputs@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #208896	; 0x33000
   11954:	ldr	pc, [ip, #2092]!	; 0x82c

00011958 <strncmp@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #208896	; 0x33000
   11960:	ldr	pc, [ip, #2084]!	; 0x824

00011964 <abort@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #208896	; 0x33000
   1196c:	ldr	pc, [ip, #2076]!	; 0x81c

00011970 <getc@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #208896	; 0x33000
   11978:	ldr	pc, [ip, #2068]!	; 0x814

0001197c <close@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #208896	; 0x33000
   11984:	ldr	pc, [ip, #2060]!	; 0x80c

00011988 <__lxstat64@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #208896	; 0x33000
   11990:	ldr	pc, [ip, #2052]!	; 0x804

00011994 <dcngettext@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #208896	; 0x33000
   1199c:	ldr	pc, [ip, #2044]!	; 0x7fc

000119a0 <__assert_fail@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #208896	; 0x33000
   119a8:	ldr	pc, [ip, #2036]!	; 0x7f4

Disassembly of section .text:

000119b0 <.text>:
   119b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119b4:	vpush	{d8-d9}
   119b8:	ldr	r3, [pc, #3024]	; 12590 <__assert_fail@plt+0xbf0>
   119bc:	mov	sl, r1
   119c0:	sub	sp, sp, #268	; 0x10c
   119c4:	str	r0, [sp, #56]	; 0x38
   119c8:	ldm	r3, {r0, r1, r2}
   119cc:	add	r3, sp, #160	; 0xa0
   119d0:	cmp	r0, #0
   119d4:	stm	r3, {r0, r1, r2}
   119d8:	beq	11ec8 <__assert_fail@plt+0x528>
   119dc:	mov	r8, r0
   119e0:	add	r4, sp, #164	; 0xa4
   119e4:	mov	r5, #131072	; 0x20000
   119e8:	mov	r7, #1
   119ec:	mov	r6, #2
   119f0:	mov	r1, r5
   119f4:	mov	r0, r8
   119f8:	bl	14e78 <__assert_fail@plt+0x34d8>
   119fc:	subs	r9, r0, #0
   11a00:	blt	11ebc <__assert_fail@plt+0x51c>
   11a04:	mov	r2, r7
   11a08:	mov	r1, r6
   11a0c:	bl	1ede4 <__assert_fail@plt+0xd444>
   11a10:	cmp	r0, #0
   11a14:	bne	11eb4 <__assert_fail@plt+0x514>
   11a18:	ldr	r3, [pc, #2932]	; 12594 <__assert_fail@plt+0xbf4>
   11a1c:	str	r8, [r3, #108]	; 0x6c
   11a20:	bl	11658 <geteuid@plt>
   11a24:	mov	r6, r0
   11a28:	bl	11580 <getuid@plt>
   11a2c:	mov	r4, r0
   11a30:	bl	11808 <getgid@plt>
   11a34:	cmp	r6, #0
   11a38:	mov	r5, r0
   11a3c:	beq	120c4 <__assert_fail@plt+0x724>
   11a40:	cmp	r4, #0
   11a44:	cmpne	r6, r4
   11a48:	moveq	r4, #1
   11a4c:	movne	r4, #0
   11a50:	bne	120f4 <__assert_fail@plt+0x754>
   11a54:	bl	117d8 <__errno_location@plt>
   11a58:	mov	r4, #0
   11a5c:	mov	r3, r0
   11a60:	str	r0, [sp, #68]	; 0x44
   11a64:	str	r4, [r3]
   11a68:	mov	r0, r5
   11a6c:	bl	11700 <setgid@plt>
   11a70:	cmp	r0, r4
   11a74:	bne	1278c <__assert_fail@plt+0xdec>
   11a78:	ldr	r0, [sl]
   11a7c:	cmp	r0, #0
   11a80:	beq	1215c <__assert_fail@plt+0x7bc>
   11a84:	bl	18ee8 <__assert_fail@plt+0x7548>
   11a88:	ldr	r1, [pc, #2824]	; 12598 <__assert_fail@plt+0xbf8>
   11a8c:	mov	r0, #6
   11a90:	bl	11898 <setlocale@plt>
   11a94:	ldr	r1, [pc, #2816]	; 1259c <__assert_fail@plt+0xbfc>
   11a98:	ldr	r0, [pc, #2816]	; 125a0 <__assert_fail@plt+0xc00>
   11a9c:	bl	11910 <bindtextdomain@plt>
   11aa0:	ldr	r0, [pc, #2808]	; 125a0 <__assert_fail@plt+0xc00>
   11aa4:	bl	11640 <textdomain@plt>
   11aa8:	mov	r0, #0
   11aac:	bl	1a640 <__assert_fail@plt+0x8ca0>
   11ab0:	ldr	r8, [pc, #2780]	; 12594 <__assert_fail@plt+0xbf4>
   11ab4:	str	r0, [r8, #4]
   11ab8:	ldr	r0, [pc, #2788]	; 125a4 <__assert_fail@plt+0xc04>
   11abc:	bl	326bc <__assert_fail@plt+0x20d1c>
   11ac0:	cmp	r0, #0
   11ac4:	bne	12754 <__assert_fail@plt+0xdb4>
   11ac8:	ldr	r0, [pc, #2776]	; 125a8 <__assert_fail@plt+0xc08>
   11acc:	bl	326bc <__assert_fail@plt+0x20d1c>
   11ad0:	subs	fp, r0, #0
   11ad4:	bne	12754 <__assert_fail@plt+0xdb4>
   11ad8:	mov	r2, #0
   11adc:	mov	r3, #0
   11ae0:	mov	r7, #1
   11ae4:	ldr	r0, [pc, #2752]	; 125ac <__assert_fail@plt+0xc0c>
   11ae8:	strb	r7, [r8, #80]	; 0x50
   11aec:	str	r7, [sp, #48]	; 0x30
   11af0:	strd	r2, [r8, #88]	; 0x58
   11af4:	strd	r2, [r8, #96]	; 0x60
   11af8:	bl	116f4 <getenv@plt>
   11afc:	ldr	r6, [pc, #2840]	; 1261c <__assert_fail@plt+0xc7c>
   11b00:	ldr	r5, [pc, #2728]	; 125b0 <__assert_fail@plt+0xc10>
   11b04:	add	r7, sp, #152	; 0x98
   11b08:	str	fp, [sp, #76]	; 0x4c
   11b0c:	str	fp, [sp, #64]	; 0x40
   11b10:	str	fp, [sp, #88]	; 0x58
   11b14:	str	fp, [sp, #84]	; 0x54
   11b18:	str	fp, [sp, #96]	; 0x60
   11b1c:	str	fp, [sp, #60]	; 0x3c
   11b20:	str	fp, [sp, #100]	; 0x64
   11b24:	str	fp, [sp, #72]	; 0x48
   11b28:	str	fp, [sp, #80]	; 0x50
   11b2c:	str	fp, [r8, #16]
   11b30:	str	r0, [sp, #92]	; 0x5c
   11b34:	mvn	ip, #0
   11b38:	str	r7, [sp]
   11b3c:	mov	r3, r6
   11b40:	mov	r2, r5
   11b44:	mov	r1, sl
   11b48:	ldr	r0, [sp, #56]	; 0x38
   11b4c:	str	ip, [sp, #152]	; 0x98
   11b50:	bl	1176c <getopt_long@plt>
   11b54:	cmn	r0, #1
   11b58:	beq	12164 <__assert_fail@plt+0x7c4>
   11b5c:	sub	r0, r0, #48	; 0x30
   11b60:	cmp	r0, #209	; 0xd1
   11b64:	ldrls	pc, [pc, r0, lsl #2]
   11b68:	b	120bc <__assert_fail@plt+0x71c>
   11b6c:	ldrdeq	r1, [r1], -ip
   11b70:	strheq	r2, [r1], -ip
   11b74:	strheq	r2, [r1], -ip
   11b78:	strheq	r2, [r1], -ip
   11b7c:	strheq	r2, [r1], -ip
   11b80:	strheq	r2, [r1], -ip
   11b84:	strheq	r2, [r1], -ip
   11b88:	strheq	r2, [r1], -ip
   11b8c:	strheq	r2, [r1], -ip
   11b90:	strheq	r2, [r1], -ip
   11b94:	strheq	r2, [r1], -ip
   11b98:	strheq	r2, [r1], -ip
   11b9c:	strheq	r2, [r1], -ip
   11ba0:	strheq	r2, [r1], -ip
   11ba4:	strheq	r2, [r1], -ip
   11ba8:	strheq	r2, [r1], -ip
   11bac:	strheq	r2, [r1], -ip
   11bb0:	ldrdeq	r1, [r1], -r0
   11bb4:	strheq	r2, [r1], -ip
   11bb8:	strheq	r2, [r1], -ip
   11bbc:	strheq	r2, [r1], -ip
   11bc0:	andeq	r1, r1, ip, ror #31
   11bc4:	strheq	r2, [r1], -ip
   11bc8:	strheq	r2, [r1], -ip
   11bcc:	ldrdeq	r1, [r1], -ip
   11bd0:	strheq	r2, [r1], -ip
   11bd4:	strheq	r2, [r1], -ip
   11bd8:	strheq	r2, [r1], -ip
   11bdc:	andeq	r1, r1, ip, asr #31
   11be0:	strheq	r2, [r1], -ip
   11be4:	strheq	r2, [r1], -ip
   11be8:	strheq	r2, [r1], -ip
   11bec:	ldrdeq	r1, [r1], -ip
   11bf0:	strheq	r2, [r1], -ip
   11bf4:	strheq	r2, [r1], -ip
   11bf8:	andeq	r1, r1, r0, asr #31
   11bfc:	strheq	r2, [r1], -ip
   11c00:	strheq	r2, [r1], -ip
   11c04:	strheq	r2, [r1], -ip
   11c08:	strheq	r2, [r1], -ip
   11c0c:	strheq	r2, [r1], -ip
   11c10:	strheq	r2, [r1], -ip
   11c14:	strheq	r2, [r1], -ip
   11c18:	strheq	r2, [r1], -ip
   11c1c:	strheq	r2, [r1], -ip
   11c20:	strheq	r2, [r1], -ip
   11c24:	strheq	r2, [r1], -ip
   11c28:	strheq	r2, [r1], -ip
   11c2c:	strheq	r2, [r1], -ip
   11c30:	strheq	r2, [r1], -ip
   11c34:			; <UNDEFINED> instruction: 0x00011fb4
   11c38:	andeq	r1, r1, r8, lsr #31
   11c3c:	andeq	r1, r1, r0, lsl #31
   11c40:	andeq	r1, r1, r4, ror pc
   11c44:	strheq	r2, [r1], -ip
   11c48:	strheq	r2, [r1], -ip
   11c4c:	andeq	r2, r1, ip, asr #32
   11c50:	andeq	r2, r1, r0, asr #32
   11c54:	strheq	r2, [r1], -ip
   11c58:	strheq	r2, [r1], -ip
   11c5c:	andeq	r2, r1, r4
   11c60:	andeq	r1, r1, r4, lsr fp
   11c64:	strheq	r2, [r1], -ip
   11c68:	strheq	r2, [r1], -ip
   11c6c:	strdeq	r1, [r1], -r8
   11c70:	strheq	r2, [r1], -ip
   11c74:	andeq	r2, r1, ip, rrx
   11c78:	andeq	r1, r1, r4, lsr fp
   11c7c:	strheq	r2, [r1], -ip
   11c80:	strheq	r2, [r1], -ip
   11c84:	andeq	r2, r1, r4, asr r0
   11c88:	andeq	r2, r1, r8, ror r0
   11c8c:	strheq	r2, [r1], -ip
   11c90:	strheq	r2, [r1], -ip
   11c94:	strheq	r2, [r1], -ip
   11c98:	strheq	r2, [r1], -ip
   11c9c:	strheq	r2, [r1], -ip
   11ca0:	strheq	r2, [r1], -ip
   11ca4:	strheq	r2, [r1], -ip
   11ca8:	strheq	r2, [r1], -ip
   11cac:	strheq	r2, [r1], -ip
   11cb0:	strheq	r2, [r1], -ip
   11cb4:	strheq	r2, [r1], -ip
   11cb8:	strheq	r2, [r1], -ip
   11cbc:	strheq	r2, [r1], -ip
   11cc0:	strheq	r2, [r1], -ip
   11cc4:	strheq	r2, [r1], -ip
   11cc8:	strheq	r2, [r1], -ip
   11ccc:	strheq	r2, [r1], -ip
   11cd0:	strheq	r2, [r1], -ip
   11cd4:	strheq	r2, [r1], -ip
   11cd8:	strheq	r2, [r1], -ip
   11cdc:	strheq	r2, [r1], -ip
   11ce0:	strheq	r2, [r1], -ip
   11ce4:	strheq	r2, [r1], -ip
   11ce8:	strheq	r2, [r1], -ip
   11cec:	strheq	r2, [r1], -ip
   11cf0:	strheq	r2, [r1], -ip
   11cf4:	strheq	r2, [r1], -ip
   11cf8:	strheq	r2, [r1], -ip
   11cfc:	strheq	r2, [r1], -ip
   11d00:	strheq	r2, [r1], -ip
   11d04:	strheq	r2, [r1], -ip
   11d08:	strheq	r2, [r1], -ip
   11d0c:	strheq	r2, [r1], -ip
   11d10:	strheq	r2, [r1], -ip
   11d14:	strheq	r2, [r1], -ip
   11d18:	strheq	r2, [r1], -ip
   11d1c:	strheq	r2, [r1], -ip
   11d20:	strheq	r2, [r1], -ip
   11d24:	strheq	r2, [r1], -ip
   11d28:	strheq	r2, [r1], -ip
   11d2c:	strheq	r2, [r1], -ip
   11d30:	strheq	r2, [r1], -ip
   11d34:	strheq	r2, [r1], -ip
   11d38:	strheq	r2, [r1], -ip
   11d3c:	strheq	r2, [r1], -ip
   11d40:	strheq	r2, [r1], -ip
   11d44:	strheq	r2, [r1], -ip
   11d48:	strheq	r2, [r1], -ip
   11d4c:	strheq	r2, [r1], -ip
   11d50:	strheq	r2, [r1], -ip
   11d54:	strheq	r2, [r1], -ip
   11d58:	strheq	r2, [r1], -ip
   11d5c:	strheq	r2, [r1], -ip
   11d60:	strheq	r2, [r1], -ip
   11d64:	strheq	r2, [r1], -ip
   11d68:	strheq	r2, [r1], -ip
   11d6c:	strheq	r2, [r1], -ip
   11d70:	strheq	r2, [r1], -ip
   11d74:	strheq	r2, [r1], -ip
   11d78:	strheq	r2, [r1], -ip
   11d7c:	strheq	r2, [r1], -ip
   11d80:	strheq	r2, [r1], -ip
   11d84:	strheq	r2, [r1], -ip
   11d88:	strheq	r2, [r1], -ip
   11d8c:	strheq	r2, [r1], -ip
   11d90:	strheq	r2, [r1], -ip
   11d94:	strheq	r2, [r1], -ip
   11d98:	strheq	r2, [r1], -ip
   11d9c:	strheq	r2, [r1], -ip
   11da0:	strheq	r2, [r1], -ip
   11da4:	strheq	r2, [r1], -ip
   11da8:	strheq	r2, [r1], -ip
   11dac:	strheq	r2, [r1], -ip
   11db0:	strheq	r2, [r1], -ip
   11db4:	strheq	r2, [r1], -ip
   11db8:	strheq	r2, [r1], -ip
   11dbc:	strheq	r2, [r1], -ip
   11dc0:	strheq	r2, [r1], -ip
   11dc4:	strheq	r2, [r1], -ip
   11dc8:	strheq	r2, [r1], -ip
   11dcc:	strheq	r2, [r1], -ip
   11dd0:	strheq	r2, [r1], -ip
   11dd4:	strheq	r2, [r1], -ip
   11dd8:	strheq	r2, [r1], -ip
   11ddc:	strheq	r2, [r1], -ip
   11de0:	strheq	r2, [r1], -ip
   11de4:	strheq	r2, [r1], -ip
   11de8:	strheq	r2, [r1], -ip
   11dec:	strheq	r2, [r1], -ip
   11df0:	strheq	r2, [r1], -ip
   11df4:	strheq	r2, [r1], -ip
   11df8:	strheq	r2, [r1], -ip
   11dfc:	strheq	r2, [r1], -ip
   11e00:	strheq	r2, [r1], -ip
   11e04:	strheq	r2, [r1], -ip
   11e08:	strheq	r2, [r1], -ip
   11e0c:	strheq	r2, [r1], -ip
   11e10:	strheq	r2, [r1], -ip
   11e14:	strheq	r2, [r1], -ip
   11e18:	strheq	r2, [r1], -ip
   11e1c:	strheq	r2, [r1], -ip
   11e20:	strheq	r2, [r1], -ip
   11e24:	strheq	r2, [r1], -ip
   11e28:	strheq	r2, [r1], -ip
   11e2c:	strheq	r2, [r1], -ip
   11e30:	strheq	r2, [r1], -ip
   11e34:	strheq	r2, [r1], -ip
   11e38:	strheq	r2, [r1], -ip
   11e3c:	strheq	r2, [r1], -ip
   11e40:	strheq	r2, [r1], -ip
   11e44:	strheq	r2, [r1], -ip
   11e48:	strheq	r2, [r1], -ip
   11e4c:	strheq	r2, [r1], -ip
   11e50:	strheq	r2, [r1], -ip
   11e54:	strheq	r2, [r1], -ip
   11e58:	strheq	r2, [r1], -ip
   11e5c:	strheq	r2, [r1], -ip
   11e60:	strheq	r2, [r1], -ip
   11e64:	strheq	r2, [r1], -ip
   11e68:	strheq	r2, [r1], -ip
   11e6c:	strheq	r2, [r1], -ip
   11e70:	strheq	r2, [r1], -ip
   11e74:	strheq	r2, [r1], -ip
   11e78:	strheq	r2, [r1], -ip
   11e7c:	strheq	r2, [r1], -ip
   11e80:	strheq	r2, [r1], -ip
   11e84:	strheq	r2, [r1], -ip
   11e88:	strheq	r2, [r1], -ip
   11e8c:	strheq	r2, [r1], -ip
   11e90:	strheq	r2, [r1], -ip
   11e94:	strheq	r2, [r1], -ip
   11e98:	strheq	r2, [r1], -ip
   11e9c:	strheq	r2, [r1], -ip
   11ea0:	strheq	r2, [r1], -ip
   11ea4:	strheq	r2, [r1], -ip
   11ea8:	strheq	r2, [r1], -ip
   11eac:	andeq	r1, r1, r0, ror #30
   11eb0:	strdeq	r1, [r1], -r4
   11eb4:	mov	r0, r9
   11eb8:	bl	1197c <close@plt>
   11ebc:	ldr	r8, [r4], #4
   11ec0:	cmp	r8, #0
   11ec4:	bne	119f0 <__assert_fail@plt+0x50>
   11ec8:	mvn	r9, #0
   11ecc:	b	11a20 <__assert_fail@plt+0x80>
   11ed0:	ldr	r3, [sp, #48]	; 0x30
   11ed4:	str	r3, [sp, #76]	; 0x4c
   11ed8:	b	11b34 <__assert_fail@plt+0x194>
   11edc:	ldr	r3, [pc, #1744]	; 125b4 <__assert_fail@plt+0xc14>
   11ee0:	mov	r2, #0
   11ee4:	str	r2, [r3]
   11ee8:	mov	r3, #0
   11eec:	strb	r3, [r8, #80]	; 0x50
   11ef0:	b	11b34 <__assert_fail@plt+0x194>
   11ef4:	ldr	r3, [pc, #1820]	; 12618 <__assert_fail@plt+0xc78>
   11ef8:	ldr	r4, [r3]
   11efc:	ldrb	r3, [r4]
   11f00:	cmp	r3, #0
   11f04:	beq	1277c <__assert_fail@plt+0xddc>
   11f08:	ldr	r3, [sp, #68]	; 0x44
   11f0c:	mov	r2, #0
   11f10:	add	r1, sp, #160	; 0xa0
   11f14:	str	r2, [r3]
   11f18:	mov	r0, r4
   11f1c:	mov	r2, #10
   11f20:	bl	1179c <strtoul@plt>
   11f24:	cmn	r0, #1
   11f28:	beq	12628 <__assert_fail@plt+0xc88>
   11f2c:	cmp	r0, #0
   11f30:	bne	11f44 <__assert_fail@plt+0x5a4>
   11f34:	ldr	r3, [sp, #68]	; 0x44
   11f38:	ldr	r3, [r3]
   11f3c:	cmp	r3, #22
   11f40:	beq	12638 <__assert_fail@plt+0xc98>
   11f44:	ldr	r3, [sp, #160]	; 0xa0
   11f48:	ldrb	r3, [r3]
   11f4c:	cmp	r3, #0
   11f50:	bne	127c0 <__assert_fail@plt+0xe20>
   11f54:	ldr	r3, [pc, #1624]	; 125b4 <__assert_fail@plt+0xc14>
   11f58:	str	r0, [r3, #8]
   11f5c:	b	11b34 <__assert_fail@plt+0x194>
   11f60:	ldr	r3, [pc, #1712]	; 12618 <__assert_fail@plt+0xc78>
   11f64:	ldr	r0, [r3]
   11f68:	bl	14834 <__assert_fail@plt+0x2e94>
   11f6c:	str	r0, [sp, #88]	; 0x58
   11f70:	b	11b34 <__assert_fail@plt+0x194>
   11f74:	ldr	r3, [sp, #48]	; 0x30
   11f78:	str	r3, [r8, #16]
   11f7c:	b	11b34 <__assert_fail@plt+0x194>
   11f80:	ldr	r3, [pc, #1680]	; 12618 <__assert_fail@plt+0xc78>
   11f84:	ldr	r3, [r3]
   11f88:	cmp	r3, #0
   11f8c:	str	r3, [sp, #92]	; 0x5c
   11f90:	bne	11b34 <__assert_fail@plt+0x194>
   11f94:	ldr	r3, [pc, #1564]	; 125b8 <__assert_fail@plt+0xc18>
   11f98:	ldr	r2, [pc, #1564]	; 125bc <__assert_fail@plt+0xc1c>
   11f9c:	ldr	r1, [pc, #1564]	; 125c0 <__assert_fail@plt+0xc20>
   11fa0:	ldr	r0, [pc, #1564]	; 125c4 <__assert_fail@plt+0xc24>
   11fa4:	bl	119a0 <__assert_fail@plt>
   11fa8:	ldr	r3, [sp, #48]	; 0x30
   11fac:	str	r3, [sp, #100]	; 0x64
   11fb0:	b	11b34 <__assert_fail@plt+0x194>
   11fb4:	ldr	r3, [sp, #48]	; 0x30
   11fb8:	str	r3, [sp, #60]	; 0x3c
   11fbc:	b	11b34 <__assert_fail@plt+0x194>
   11fc0:	ldr	r3, [sp, #48]	; 0x30
   11fc4:	str	r3, [sp, #64]	; 0x40
   11fc8:	b	11b34 <__assert_fail@plt+0x194>
   11fcc:	ldr	r3, [pc, #1504]	; 125b4 <__assert_fail@plt+0xc14>
   11fd0:	ldr	r2, [sp, #48]	; 0x30
   11fd4:	str	r2, [r3, #4]
   11fd8:	b	11b34 <__assert_fail@plt+0x194>
   11fdc:	ldr	r3, [pc, #1488]	; 125b4 <__assert_fail@plt+0xc14>
   11fe0:	mov	r2, #0
   11fe4:	str	r2, [r3, #4]
   11fe8:	b	11b34 <__assert_fail@plt+0x194>
   11fec:	mov	r3, #2
   11ff0:	str	r3, [r8, #16]
   11ff4:	b	11b34 <__assert_fail@plt+0x194>
   11ff8:	ldr	r3, [sp, #48]	; 0x30
   11ffc:	str	r3, [sp, #72]	; 0x48
   12000:	b	11b34 <__assert_fail@plt+0x194>
   12004:	ldr	r3, [pc, #1548]	; 12618 <__assert_fail@plt+0xc78>
   12008:	mov	r2, #10
   1200c:	add	r1, sp, #160	; 0xa0
   12010:	ldr	ip, [r3]
   12014:	mov	r3, #0
   12018:	str	r3, [sp]
   1201c:	mov	r0, ip
   12020:	ldr	r3, [pc, #1440]	; 125c8 <__assert_fail@plt+0xc28>
   12024:	str	ip, [sp, #160]	; 0xa0
   12028:	bl	1e028 <__assert_fail@plt+0xc688>
   1202c:	cmp	r0, #0
   12030:	bne	127a4 <__assert_fail@plt+0xe04>
   12034:	mov	r3, #1
   12038:	str	r3, [sp, #96]	; 0x60
   1203c:	b	11b34 <__assert_fail@plt+0x194>
   12040:	ldr	r3, [sp, #48]	; 0x30
   12044:	str	r3, [sp, #80]	; 0x50
   12048:	b	11b34 <__assert_fail@plt+0x194>
   1204c:	mov	r0, #0
   12050:	bl	129f0 <__assert_fail@plt+0x1050>
   12054:	ldr	r0, [pc, #1392]	; 125cc <__assert_fail@plt+0xc2c>
   12058:	bl	1439c <__assert_fail@plt+0x29fc>
   1205c:	mov	r0, fp
   12060:	add	sp, sp, #268	; 0x10c
   12064:	vpop	{d8-d9}
   12068:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1206c:	ldr	r3, [sp, #48]	; 0x30
   12070:	str	r3, [sp, #84]	; 0x54
   12074:	b	11b34 <__assert_fail@plt+0x194>
   12078:	str	fp, [sp, #60]	; 0x3c
   1207c:	b	11b34 <__assert_fail@plt+0x194>
   12080:	ldr	r3, [pc, #1352]	; 125d0 <__assert_fail@plt+0xc30>
   12084:	ldr	r2, [sp, #56]	; 0x38
   12088:	ldr	r3, [r3]
   1208c:	cmp	r2, r3
   12090:	movne	r3, #1
   12094:	strne	r3, [sp, #72]	; 0x48
   12098:	bne	121c0 <__assert_fail@plt+0x820>
   1209c:	mov	r2, #5
   120a0:	ldr	r1, [pc, #1324]	; 125d4 <__assert_fail@plt+0xc34>
   120a4:	mov	r0, r5
   120a8:	bl	11628 <dcgettext@plt>
   120ac:	mov	r1, r5
   120b0:	mov	r2, r0
   120b4:	mov	r0, r5
   120b8:	bl	116d0 <error@plt>
   120bc:	mov	r0, #1
   120c0:	bl	129f0 <__assert_fail@plt+0x1050>
   120c4:	add	r1, sp, #160	; 0xa0
   120c8:	mov	r0, #1
   120cc:	str	r5, [sp, #160]	; 0xa0
   120d0:	bl	11670 <setgroups@plt>
   120d4:	cmp	r0, #0
   120d8:	beq	11a40 <__assert_fail@plt+0xa0>
   120dc:	mov	r0, r6
   120e0:	mov	r2, #5
   120e4:	ldr	r1, [pc, #1260]	; 125d8 <__assert_fail@plt+0xc38>
   120e8:	bl	11628 <dcgettext@plt>
   120ec:	mov	r5, r0
   120f0:	b	12130 <__assert_fail@plt+0x790>
   120f4:	bl	117d8 <__errno_location@plt>
   120f8:	str	r4, [r0]
   120fc:	mov	r6, r0
   12100:	bl	11580 <getuid@plt>
   12104:	bl	118c8 <setuid@plt>
   12108:	cmp	r0, #0
   1210c:	bne	127fc <__assert_fail@plt+0xe5c>
   12110:	bl	118c8 <setuid@plt>
   12114:	subs	r4, r0, #0
   12118:	bne	11a54 <__assert_fail@plt+0xb4>
   1211c:	mov	r2, #5
   12120:	ldr	r1, [pc, #1204]	; 125dc <__assert_fail@plt+0xc3c>
   12124:	bl	11628 <dcgettext@plt>
   12128:	str	r4, [r6]
   1212c:	mov	r5, r0
   12130:	bl	117d8 <__errno_location@plt>
   12134:	mov	r2, r5
   12138:	mov	r1, #8
   1213c:	ldr	r4, [r0]
   12140:	mov	r0, #0
   12144:	bl	1b064 <__assert_fail@plt+0x96c4>
   12148:	mov	r1, r4
   1214c:	ldr	r2, [pc, #1164]	; 125e0 <__assert_fail@plt+0xc40>
   12150:	mov	r3, r0
   12154:	mov	r0, #1
   12158:	bl	116d0 <error@plt>
   1215c:	ldr	r0, [pc, #1128]	; 125cc <__assert_fail@plt+0xc2c>
   12160:	b	11a84 <__assert_fail@plt+0xe4>
   12164:	ldr	r3, [sp, #92]	; 0x5c
   12168:	mov	r4, r0
   1216c:	cmp	r3, #0
   12170:	beq	12188 <__assert_fail@plt+0x7e8>
   12174:	cmn	r9, #1
   12178:	beq	12188 <__assert_fail@plt+0x7e8>
   1217c:	mov	r0, r9
   12180:	bl	1197c <close@plt>
   12184:	mov	r9, r4
   12188:	ldr	r3, [sp, #100]	; 0x64
   1218c:	ldr	r2, [sp, #64]	; 0x40
   12190:	orrs	r5, r3, r2
   12194:	beq	12080 <__assert_fail@plt+0x6e0>
   12198:	ldr	r3, [sp, #64]	; 0x40
   1219c:	cmp	r3, #0
   121a0:	beq	121c0 <__assert_fail@plt+0x820>
   121a4:	ldr	r3, [pc, #1060]	; 125d0 <__assert_fail@plt+0xc30>
   121a8:	ldr	r1, [sp, #56]	; 0x38
   121ac:	ldr	r2, [sp, #96]	; 0x60
   121b0:	ldr	r3, [r3]
   121b4:	cmp	r1, r3
   121b8:	moveq	r2, #0
   121bc:	str	r2, [sp, #96]	; 0x60
   121c0:	mov	r0, #1
   121c4:	bl	11934 <isatty@plt>
   121c8:	ldr	ip, [sp, #92]	; 0x5c
   121cc:	cmp	ip, #0
   121d0:	sub	r0, r0, #1
   121d4:	clz	r0, r0
   121d8:	lsr	r0, r0, #5
   121dc:	strb	r0, [r8, #8]
   121e0:	beq	12200 <__assert_fail@plt+0x860>
   121e4:	add	r3, sp, #144	; 0x90
   121e8:	str	r3, [sp]
   121ec:	mov	r2, #1
   121f0:	add	r3, sp, #140	; 0x8c
   121f4:	ldr	r1, [pc, #1000]	; 125e4 <__assert_fail@plt+0xc44>
   121f8:	mov	r0, ip
   121fc:	bl	14bcc <__assert_fail@plt+0x322c>
   12200:	mov	r3, #0
   12204:	str	fp, [sp, #104]	; 0x68
   12208:	str	r3, [sp, #132]	; 0x84
   1220c:	ldr	fp, [sp, #92]	; 0x5c
   12210:	vldr	d9, [pc, #880]	; 12588 <__assert_fail@plt+0xbe8>
   12214:	str	sl, [sp, #92]	; 0x5c
   12218:	str	r4, [sp, #112]	; 0x70
   1221c:	mov	r5, r3
   12220:	str	r9, [sp, #108]	; 0x6c
   12224:	ldr	sl, [sp, #96]	; 0x60
   12228:	b	12338 <__assert_fail@plt+0x998>
   1222c:	ldr	r3, [sp, #68]	; 0x44
   12230:	mov	r2, r6
   12234:	mov	r1, #8
   12238:	mov	r0, #0
   1223c:	ldr	r9, [r3]
   12240:	bl	1b064 <__assert_fail@plt+0x96c4>
   12244:	mov	r1, r9
   12248:	ldr	r2, [pc, #912]	; 125e0 <__assert_fail@plt+0xc40>
   1224c:	mov	r3, r0
   12250:	mov	r0, #0
   12254:	bl	116d0 <error@plt>
   12258:	mov	r0, r5
   1225c:	ldr	r1, [pc, #900]	; 125e8 <__assert_fail@plt+0xc48>
   12260:	bl	114fc <fdopen@plt>
   12264:	subs	r9, r0, #0
   12268:	beq	12480 <__assert_fail@plt+0xae0>
   1226c:	ldr	r3, [pc, #860]	; 125d0 <__assert_fail@plt+0xc30>
   12270:	mov	r2, #0
   12274:	ldr	r1, [r3]
   12278:	mov	r3, #0
   1227c:	strd	r2, [sp, #48]	; 0x30
   12280:	ldr	r3, [sp, #56]	; 0x38
   12284:	sub	r0, r3, r1
   12288:	ldr	r3, [sp, #92]	; 0x5c
   1228c:	add	r1, r3, r1, lsl #2
   12290:	mov	r3, #0
   12294:	ldr	r2, [sp, #88]	; 0x58
   12298:	str	r3, [sp, #8]
   1229c:	str	r2, [sp, #40]	; 0x28
   122a0:	ldr	r2, [sp, #84]	; 0x54
   122a4:	str	sl, [sp, #24]
   122a8:	str	r2, [sp, #36]	; 0x24
   122ac:	ldr	r2, [sp, #76]	; 0x4c
   122b0:	str	r2, [sp, #32]
   122b4:	ldr	r2, [sp, #64]	; 0x40
   122b8:	str	r2, [sp, #28]
   122bc:	ldr	r2, [sp, #60]	; 0x3c
   122c0:	str	r2, [sp, #20]
   122c4:	ldr	r2, [sp, #72]	; 0x48
   122c8:	str	r2, [sp, #16]
   122cc:	ldr	r2, [sp, #80]	; 0x50
   122d0:	str	r2, [sp, #12]
   122d4:	ldrd	r2, [sp, #48]	; 0x30
   122d8:	strd	r2, [sp]
   122dc:	mov	r3, r9
   122e0:	mov	r2, r6
   122e4:	bl	1344c <__assert_fail@plt+0x1aac>
   122e8:	mov	r5, r0
   122ec:	mov	r0, r9
   122f0:	bl	11868 <fclose@plt>
   122f4:	cmn	r0, #1
   122f8:	beq	12480 <__assert_fail@plt+0xae0>
   122fc:	cmp	r4, #0
   12300:	beq	1230c <__assert_fail@plt+0x96c>
   12304:	mov	r0, r4
   12308:	bl	1f018 <__assert_fail@plt+0xd678>
   1230c:	cmp	fp, #0
   12310:	beq	126cc <__assert_fail@plt+0xd2c>
   12314:	add	r3, sp, #144	; 0x90
   12318:	str	r3, [sp]
   1231c:	mov	r2, #0
   12320:	add	r3, sp, #140	; 0x8c
   12324:	ldr	r1, [pc, #696]	; 125e4 <__assert_fail@plt+0xc44>
   12328:	mov	r0, fp
   1232c:	bl	14bcc <__assert_fail@plt+0x322c>
   12330:	cmp	r0, #0
   12334:	beq	126cc <__assert_fail@plt+0xd2c>
   12338:	cmp	sl, #0
   1233c:	beq	12354 <__assert_fail@plt+0x9b4>
   12340:	ldrd	r0, [r8, #88]	; 0x58
   12344:	ldrd	r2, [r8, #96]	; 0x60
   12348:	cmp	r1, r3
   1234c:	cmpeq	r0, r2
   12350:	bls	126cc <__assert_fail@plt+0xd2c>
   12354:	mov	r2, #0
   12358:	mov	r3, #0
   1235c:	cmp	fp, #0
   12360:	strd	r2, [r8, #72]	; 0x48
   12364:	strd	r2, [r8, #64]	; 0x40
   12368:	strd	r2, [r8, #56]	; 0x38
   1236c:	strd	r2, [r8, #48]	; 0x30
   12370:	strd	r2, [r8, #40]	; 0x28
   12374:	strd	r2, [r8, #32]
   12378:	beq	124d8 <__assert_fail@plt+0xb38>
   1237c:	ldr	r1, [sp, #144]	; 0x90
   12380:	cmp	r1, #1
   12384:	beq	124b4 <__assert_fail@plt+0xb14>
   12388:	cmp	r1, #0
   1238c:	ldrne	r0, [sp, #140]	; 0x8c
   12390:	bne	1246c <__assert_fail@plt+0xacc>
   12394:	ldr	r6, [pc, #592]	; 125ec <__assert_fail@plt+0xc4c>
   12398:	mov	r4, r1
   1239c:	mov	r1, #131072	; 0x20000
   123a0:	mov	r0, r6
   123a4:	bl	14e78 <__assert_fail@plt+0x34d8>
   123a8:	subs	r5, r0, #0
   123ac:	blt	12480 <__assert_fail@plt+0xae0>
   123b0:	mov	r2, #1
   123b4:	mov	r1, #2
   123b8:	bl	1ede4 <__assert_fail@plt+0xd444>
   123bc:	cmp	r0, #0
   123c0:	bne	1271c <__assert_fail@plt+0xd7c>
   123c4:	add	r2, sp, #160	; 0xa0
   123c8:	mov	r1, r5
   123cc:	mov	r0, #3
   123d0:	bl	1167c <__fxstat64@plt>
   123d4:	subs	r9, r0, #0
   123d8:	bne	1222c <__assert_fail@plt+0x88c>
   123dc:	ldr	r2, [sp, #244]	; 0xf4
   123e0:	ldr	r3, [sp, #240]	; 0xf0
   123e4:	str	r2, [sp, #156]	; 0x9c
   123e8:	str	r3, [sp, #152]	; 0x98
   123ec:	ldrd	r2, [sp, #208]	; 0xd0
   123f0:	add	r0, sp, #148	; 0x94
   123f4:	strd	r2, [sp, #48]	; 0x30
   123f8:	bl	11610 <time@plt>
   123fc:	cmn	r0, #1
   12400:	beq	12698 <__assert_fail@plt+0xcf8>
   12404:	ldr	r1, [sp, #240]	; 0xf0
   12408:	ldr	r0, [sp, #148]	; 0x94
   1240c:	bl	11850 <difftime@plt>
   12410:	ldr	r3, [pc, #412]	; 125b4 <__assert_fail@plt+0xc14>
   12414:	ldr	r2, [r3, #8]
   12418:	ldr	r3, [pc, #464]	; 125f0 <__assert_fail@plt+0xc50>
   1241c:	mul	r3, r3, r2
   12420:	vmov	s15, r3
   12424:	vcvt.f64.u32	d7, s15
   12428:	vcmpe.f64	d0, d7
   1242c:	vmov.f64	d8, d0
   12430:	vmrs	APSR_nzcv, fpscr
   12434:	bgt	124fc <__assert_fail@plt+0xb5c>
   12438:	mov	r0, r5
   1243c:	ldr	r1, [pc, #420]	; 125e8 <__assert_fail@plt+0xc48>
   12440:	bl	114fc <fdopen@plt>
   12444:	subs	r9, r0, #0
   12448:	beq	12480 <__assert_fail@plt+0xae0>
   1244c:	ldr	r3, [pc, #380]	; 125d0 <__assert_fail@plt+0xc30>
   12450:	ldr	r2, [sp, #56]	; 0x38
   12454:	ldr	r1, [r3]
   12458:	mov	r3, r7
   1245c:	sub	r0, r2, r1
   12460:	ldr	r2, [sp, #92]	; 0x5c
   12464:	add	r1, r2, r1, lsl #2
   12468:	b	12294 <__assert_fail@plt+0x8f4>
   1246c:	add	r0, fp, r0
   12470:	bl	115bc <strndup@plt>
   12474:	mov	r4, r0
   12478:	mov	r6, r0
   1247c:	b	1239c <__assert_fail@plt+0x9fc>
   12480:	ldr	fp, [sp, #104]	; 0x68
   12484:	ldr	r3, [sp, #68]	; 0x44
   12488:	mov	r2, r6
   1248c:	mov	r1, #8
   12490:	mov	r0, #0
   12494:	ldr	r4, [r3]
   12498:	bl	1b064 <__assert_fail@plt+0x96c4>
   1249c:	mov	r1, r4
   124a0:	ldr	r2, [pc, #312]	; 125e0 <__assert_fail@plt+0xc40>
   124a4:	mov	r3, r0
   124a8:	mov	r0, #0
   124ac:	bl	116d0 <error@plt>
   124b0:	b	1205c <__assert_fail@plt+0x6bc>
   124b4:	ldr	r0, [sp, #140]	; 0x8c
   124b8:	ldrb	r3, [fp, r0]
   124bc:	cmp	r3, #45	; 0x2d
   124c0:	beq	12678 <__assert_fail@plt+0xcd8>
   124c4:	cmp	r3, #46	; 0x2e
   124c8:	bne	1246c <__assert_fail@plt+0xacc>
   124cc:	ldr	r6, [pc, #280]	; 125ec <__assert_fail@plt+0xc4c>
   124d0:	mov	r4, #0
   124d4:	b	1239c <__assert_fail@plt+0x9fc>
   124d8:	ldr	r3, [sp, #108]	; 0x6c
   124dc:	cmn	r3, #1
   124e0:	beq	126cc <__assert_fail@plt+0xd2c>
   124e4:	mov	r5, r3
   124e8:	ldr	r3, [sp, #112]	; 0x70
   124ec:	ldr	r6, [r8, #108]	; 0x6c
   124f0:	str	r3, [sp, #108]	; 0x6c
   124f4:	mov	r4, fp
   124f8:	b	123c4 <__assert_fail@plt+0xa24>
   124fc:	mov	r2, #5
   12500:	ldr	r1, [pc, #236]	; 125f4 <__assert_fail@plt+0xc54>
   12504:	mov	r0, r9
   12508:	bl	11628 <dcgettext@plt>
   1250c:	mov	r2, r6
   12510:	mov	r1, #8
   12514:	str	r0, [sp, #116]	; 0x74
   12518:	mov	r0, r9
   1251c:	bl	1b064 <__assert_fail@plt+0x96c4>
   12520:	ldr	r3, [pc, #140]	; 125b4 <__assert_fail@plt+0xc14>
   12524:	mov	r2, #5
   12528:	ldr	r1, [pc, #200]	; 125f8 <__assert_fail@plt+0xc58>
   1252c:	ldr	r3, [r3, #8]
   12530:	str	r3, [sp, #120]	; 0x78
   12534:	str	r0, [sp, #128]	; 0x80
   12538:	mov	r0, r9
   1253c:	bl	11628 <dcgettext@plt>
   12540:	mov	r2, #5
   12544:	ldr	r1, [pc, #172]	; 125f8 <__assert_fail@plt+0xc58>
   12548:	str	r0, [sp, #124]	; 0x7c
   1254c:	mov	r0, r9
   12550:	bl	11628 <dcgettext@plt>
   12554:	vdiv.f64	d7, d8, d9
   12558:	ldr	r1, [sp, #124]	; 0x7c
   1255c:	ldr	r3, [sp, #120]	; 0x78
   12560:	str	r1, [sp, #4]
   12564:	str	r3, [sp]
   12568:	ldr	r2, [sp, #116]	; 0x74
   1256c:	ldr	r3, [sp, #128]	; 0x80
   12570:	mov	r1, r9
   12574:	str	r0, [sp, #16]
   12578:	mov	r0, r9
   1257c:	vstr	d7, [sp, #8]
   12580:	bl	116d0 <error@plt>
   12584:	b	12438 <__assert_fail@plt+0xa98>
   12588:	andeq	r0, r0, r0
   1258c:	rscsmi	r1, r5, r0, lsl #16
   12590:	andeq	r2, r3, r0, lsr #15
   12594:	andeq	r5, r4, r8, lsr #4
   12598:	andeq	r2, r3, ip, lsl #31
   1259c:	andeq	r3, r3, r8, lsl #4
   125a0:	andeq	r3, r3, r4, asr r5
   125a4:	muleq	r1, r4, sp
   125a8:	andeq	r2, r1, r0, ror #19
   125ac:	andeq	r3, r3, r4, asr #4
   125b0:	andeq	r3, r3, r0, asr r2
   125b4:	andeq	r5, r4, ip, lsr #3
   125b8:	andeq	r2, r3, ip, lsl r9
   125bc:	andeq	r0, r0, sp, asr #12
   125c0:	strdeq	r2, [r3], -r8
   125c4:	andeq	r3, r3, r8, ror #4
   125c8:	andeq	r5, r4, r0, lsl #5
   125cc:	andeq	r3, r3, r0, lsl #4
   125d0:	andeq	r5, r4, r0, lsl r2
   125d4:	andeq	r3, r3, ip, ror #5
   125d8:	andeq	r3, r3, r8, ror r1
   125dc:			; <UNDEFINED> instruction: 0x000331bc
   125e0:	andeq	r3, r3, r8, lsl r8
   125e4:	andeq	r3, r3, r8, lsl #6
   125e8:	andeq	r3, r3, ip, lsl r5
   125ec:	andeq	r3, r3, r8, asr r1
   125f0:	andeq	r5, r1, r0, lsl #3
   125f4:	andeq	r3, r3, r4, ror #6
   125f8:	andeq	r2, r3, r8, lsr #18
   125fc:	andeq	r3, r3, r0, ror r1
   12600:	andeq	r3, r3, ip, asr #6
   12604:	andeq	r3, r3, r8, lsr #7
   12608:	andeq	r3, r3, ip, lsl #6
   1260c:	andeq	r3, r3, r0, lsr #4
   12610:	andeq	r3, r3, r8, ror r2
   12614:	ldrdeq	r3, [r3], -ip
   12618:	andeq	r5, r4, r0, lsr #4
   1261c:	andeq	r2, r3, ip, lsr #15
   12620:			; <UNDEFINED> instruction: 0x000332b8
   12624:	muleq	r3, r8, r1
   12628:	ldr	r3, [sp, #68]	; 0x44
   1262c:	ldr	r3, [r3]
   12630:	cmp	r3, #34	; 0x22
   12634:	bne	11f44 <__assert_fail@plt+0x5a4>
   12638:	mov	r2, #5
   1263c:	ldr	r1, [pc, #-36]	; 12620 <__assert_fail@plt+0xc80>
   12640:	mov	r0, #0
   12644:	mov	r6, r4
   12648:	mov	r4, r3
   1264c:	bl	11628 <dcgettext@plt>
   12650:	mov	r2, r6
   12654:	mov	r1, #8
   12658:	mov	r5, r0
   1265c:	mov	r0, #0
   12660:	bl	1b064 <__assert_fail@plt+0x96c4>
   12664:	mov	r2, r5
   12668:	mov	r1, r4
   1266c:	mov	r3, r0
   12670:	mov	r0, #1
   12674:	bl	116d0 <error@plt>
   12678:	ldr	r3, [sp, #132]	; 0x84
   1267c:	cmp	r3, #0
   12680:	bne	1272c <__assert_fail@plt+0xd8c>
   12684:	str	r1, [sp, #132]	; 0x84
   12688:	ldr	r5, [sp, #104]	; 0x68
   1268c:	ldr	r6, [pc, #-152]	; 125fc <__assert_fail@plt+0xc5c>
   12690:	mov	r4, #0
   12694:	b	123c4 <__assert_fail@plt+0xa24>
   12698:	ldr	r3, [sp, #68]	; 0x44
   1269c:	mov	r2, #5
   126a0:	ldr	r1, [pc, #-168]	; 12600 <__assert_fail@plt+0xc60>
   126a4:	ldr	r3, [r3]
   126a8:	mov	r0, r9
   126ac:	str	r3, [sp, #116]	; 0x74
   126b0:	bl	11628 <dcgettext@plt>
   126b4:	ldr	r3, [sp, #116]	; 0x74
   126b8:	mov	r1, r3
   126bc:	mov	r2, r0
   126c0:	mov	r0, r9
   126c4:	bl	116d0 <error@plt>
   126c8:	b	12438 <__assert_fail@plt+0xa98>
   126cc:	ldr	r3, [sp, #100]	; 0x64
   126d0:	mov	r4, r5
   126d4:	cmp	r3, #0
   126d8:	ldr	fp, [sp, #104]	; 0x68
   126dc:	bne	1270c <__assert_fail@plt+0xd6c>
   126e0:	cmp	r4, #0
   126e4:	bne	1205c <__assert_fail@plt+0x6bc>
   126e8:	ldr	r3, [sp, #96]	; 0x60
   126ec:	cmp	r3, #0
   126f0:	beq	12700 <__assert_fail@plt+0xd60>
   126f4:	ldrd	r2, [r8, #88]	; 0x58
   126f8:	orrs	r3, r2, r3
   126fc:	beq	1205c <__assert_fail@plt+0x6bc>
   12700:	ldr	r3, [sp, #64]	; 0x40
   12704:	eor	fp, r3, #1
   12708:	b	1205c <__assert_fail@plt+0x6bc>
   1270c:	mov	r1, r5
   12710:	ldr	r0, [pc, #-276]	; 12604 <__assert_fail@plt+0xc64>
   12714:	bl	11550 <printf@plt>
   12718:	b	126e0 <__assert_fail@plt+0xd40>
   1271c:	mov	r0, r5
   12720:	ldr	fp, [sp, #104]	; 0x68
   12724:	bl	1197c <close@plt>
   12728:	b	12484 <__assert_fail@plt+0xae4>
   1272c:	mov	r2, #5
   12730:	ldr	r1, [pc, #-304]	; 12608 <__assert_fail@plt+0xc68>
   12734:	mov	r0, #0
   12738:	ldr	fp, [sp, #104]	; 0x68
   1273c:	bl	11628 <dcgettext@plt>
   12740:	mov	r1, #0
   12744:	mov	r2, r0
   12748:	mov	r0, r1
   1274c:	bl	116d0 <error@plt>
   12750:	b	1205c <__assert_fail@plt+0x6bc>
   12754:	ldr	r3, [sp, #68]	; 0x44
   12758:	ldr	r1, [pc, #-340]	; 1260c <__assert_fail@plt+0xc6c>
   1275c:	mov	r2, #5
   12760:	ldr	r4, [r3]
   12764:	mov	r0, #0
   12768:	bl	11628 <dcgettext@plt>
   1276c:	mov	r1, r4
   12770:	mov	r2, r0
   12774:	mov	r0, #1
   12778:	bl	116d0 <error@plt>
   1277c:	mov	r4, r3
   12780:	mov	r2, #5
   12784:	ldr	r1, [pc, #-380]	; 12610 <__assert_fail@plt+0xc70>
   12788:	b	12764 <__assert_fail@plt+0xdc4>
   1278c:	mov	r0, r4
   12790:	mov	r2, #5
   12794:	ldr	r1, [pc, #-392]	; 12614 <__assert_fail@plt+0xc74>
   12798:	bl	11628 <dcgettext@plt>
   1279c:	mov	r5, r0
   127a0:	b	12130 <__assert_fail@plt+0x790>
   127a4:	ldr	r3, [pc, #-404]	; 12618 <__assert_fail@plt+0xc78>
   127a8:	ldr	r1, [sp, #152]	; 0x98
   127ac:	ldr	r2, [r3]
   127b0:	ldr	r3, [pc, #-412]	; 1261c <__assert_fail@plt+0xc7c>
   127b4:	str	r2, [sp]
   127b8:	mov	r2, #108	; 0x6c
   127bc:	bl	1df78 <__assert_fail@plt+0xc5d8>
   127c0:	mov	r2, #5
   127c4:	ldr	r1, [pc, #-428]	; 12620 <__assert_fail@plt+0xc80>
   127c8:	mov	r0, #0
   127cc:	bl	11628 <dcgettext@plt>
   127d0:	mov	r5, r4
   127d4:	mov	r2, r5
   127d8:	mov	r1, #8
   127dc:	mov	r4, r0
   127e0:	mov	r0, #0
   127e4:	bl	1b064 <__assert_fail@plt+0x96c4>
   127e8:	mov	r2, r4
   127ec:	mov	r1, #0
   127f0:	mov	r3, r0
   127f4:	mov	r0, #1
   127f8:	bl	116d0 <error@plt>
   127fc:	mov	r0, r4
   12800:	mov	r2, #5
   12804:	ldr	r1, [pc, #-488]	; 12624 <__assert_fail@plt+0xc84>
   12808:	bl	11628 <dcgettext@plt>
   1280c:	mov	r5, r0
   12810:	b	12130 <__assert_fail@plt+0x790>
   12814:	mov	fp, #0
   12818:	mov	lr, #0
   1281c:	pop	{r1}		; (ldr r1, [sp], #4)
   12820:	mov	r2, sp
   12824:	push	{r2}		; (str r2, [sp, #-4]!)
   12828:	push	{r0}		; (str r0, [sp, #-4]!)
   1282c:	ldr	ip, [pc, #16]	; 12844 <__assert_fail@plt+0xea4>
   12830:	push	{ip}		; (str ip, [sp, #-4]!)
   12834:	ldr	r0, [pc, #12]	; 12848 <__assert_fail@plt+0xea8>
   12838:	ldr	r3, [pc, #12]	; 1284c <__assert_fail@plt+0xeac>
   1283c:	bl	11718 <__libc_start_main@plt>
   12840:	bl	11964 <abort@plt>
   12844:			; <UNDEFINED> instruction: 0x000326b8
   12848:			; <UNDEFINED> instruction: 0x000119b0
   1284c:	andeq	r2, r3, r8, asr r6
   12850:	ldr	r3, [pc, #20]	; 1286c <__assert_fail@plt+0xecc>
   12854:	ldr	r2, [pc, #20]	; 12870 <__assert_fail@plt+0xed0>
   12858:	add	r3, pc, r3
   1285c:	ldr	r2, [r3, r2]
   12860:	cmp	r2, #0
   12864:	bxeq	lr
   12868:	b	11760 <__gmon_start__@plt>
   1286c:	andeq	r2, r3, r0, lsr #15
   12870:	andeq	r0, r0, r0, lsr #3
   12874:	ldr	r3, [pc, #28]	; 12898 <__assert_fail@plt+0xef8>
   12878:	ldr	r0, [pc, #28]	; 1289c <__assert_fail@plt+0xefc>
   1287c:	sub	r3, r3, r0
   12880:	cmp	r3, #6
   12884:	bxls	lr
   12888:	ldr	r3, [pc, #16]	; 128a0 <__assert_fail@plt+0xf00>
   1288c:	cmp	r3, #0
   12890:	bxeq	lr
   12894:	bx	r3
   12898:	andeq	r5, r4, r7, lsl #4
   1289c:	andeq	r5, r4, r4, lsl #4
   128a0:	andeq	r0, r0, r0
   128a4:	ldr	r1, [pc, #36]	; 128d0 <__assert_fail@plt+0xf30>
   128a8:	ldr	r0, [pc, #36]	; 128d4 <__assert_fail@plt+0xf34>
   128ac:	sub	r1, r1, r0
   128b0:	asr	r1, r1, #2
   128b4:	add	r1, r1, r1, lsr #31
   128b8:	asrs	r1, r1, #1
   128bc:	bxeq	lr
   128c0:	ldr	r3, [pc, #16]	; 128d8 <__assert_fail@plt+0xf38>
   128c4:	cmp	r3, #0
   128c8:	bxeq	lr
   128cc:	bx	r3
   128d0:	andeq	r5, r4, r4, lsl #4
   128d4:	andeq	r5, r4, r4, lsl #4
   128d8:	andeq	r0, r0, r0
   128dc:	push	{r4, lr}
   128e0:	ldr	r4, [pc, #24]	; 12900 <__assert_fail@plt+0xf60>
   128e4:	ldrb	r3, [r4]
   128e8:	cmp	r3, #0
   128ec:	popne	{r4, pc}
   128f0:	bl	12874 <__assert_fail@plt+0xed4>
   128f4:	mov	r3, #1
   128f8:	strb	r3, [r4]
   128fc:	pop	{r4, pc}
   12900:	andeq	r5, r4, r4, lsr #4
   12904:	ldr	r0, [pc, #40]	; 12934 <__assert_fail@plt+0xf94>
   12908:	ldr	r3, [r0]
   1290c:	cmp	r3, #0
   12910:	bne	12918 <__assert_fail@plt+0xf78>
   12914:	b	128a4 <__assert_fail@plt+0xf04>
   12918:	ldr	r3, [pc, #24]	; 12938 <__assert_fail@plt+0xf98>
   1291c:	cmp	r3, #0
   12920:	beq	12914 <__assert_fail@plt+0xf74>
   12924:	push	{r4, lr}
   12928:	blx	r3
   1292c:	pop	{r4, lr}
   12930:	b	128a4 <__assert_fail@plt+0xf04>
   12934:	andeq	r4, r4, r4, lsl pc
	...
   12940:	ldr	r3, [pc, #76]	; 12994 <__assert_fail@plt+0xff4>
   12944:	push	{r4, r5, r6, lr}
   12948:	ldr	r4, [r3]
   1294c:	cmp	r4, #0
   12950:	beq	1298c <__assert_fail@plt+0xfec>
   12954:	mov	r5, r0
   12958:	ldr	r3, [r4]
   1295c:	ldr	r1, [r4, #4]
   12960:	mov	r0, r5
   12964:	blx	r3
   12968:	ldr	r4, [r4, #8]
   1296c:	ands	r3, r0, #3
   12970:	movne	r3, #1
   12974:	cmp	r4, #0
   12978:	moveq	r3, #0
   1297c:	andne	r3, r3, #1
   12980:	cmp	r3, #0
   12984:	bne	12958 <__assert_fail@plt+0xfb8>
   12988:	pop	{r4, r5, r6, pc}
   1298c:	mov	r0, #3
   12990:	pop	{r4, r5, r6, pc}
   12994:	andeq	r5, r4, r8, lsr #4
   12998:	ldrd	r2, [r1, #8]
   1299c:	push	{r4, r5}
   129a0:	ldrd	r4, [r1]
   129a4:	adds	r2, r2, #1
   129a8:	adc	r3, r3, #0
   129ac:	cmp	r3, r5
   129b0:	cmpeq	r2, r4
   129b4:	movcs	r0, #8
   129b8:	movcc	r0, #1
   129bc:	strd	r2, [r1, #8]
   129c0:	pop	{r4, r5}
   129c4:	bx	lr
   129c8:	ldrd	r2, [r1, #8]
   129cc:	mov	r0, #1
   129d0:	adds	r2, r2, #1
   129d4:	adc	r3, r3, #0
   129d8:	strd	r2, [r1, #8]
   129dc:	bx	lr
   129e0:	ldr	r3, [pc, #4]	; 129ec <__assert_fail@plt+0x104c>
   129e4:	ldr	r0, [r3, #4]
   129e8:	b	1f018 <__assert_fail@plt+0xd678>
   129ec:	andeq	r5, r4, r8, lsr #4
   129f0:	subs	r4, r0, #0
   129f4:	push	{r7, lr}
   129f8:	beq	12a30 <__assert_fail@plt+0x1090>
   129fc:	ldr	r3, [pc, #104]	; 12a6c <__assert_fail@plt+0x10cc>
   12a00:	mov	r2, #5
   12a04:	ldr	r1, [pc, #100]	; 12a70 <__assert_fail@plt+0x10d0>
   12a08:	mov	r0, #0
   12a0c:	ldr	r5, [r3]
   12a10:	bl	11628 <dcgettext@plt>
   12a14:	ldr	r3, [pc, #88]	; 12a74 <__assert_fail@plt+0x10d4>
   12a18:	ldr	r2, [r3]
   12a1c:	mov	r1, r0
   12a20:	mov	r0, r5
   12a24:	bl	117c0 <fprintf@plt>
   12a28:	mov	r0, r4
   12a2c:	bl	11784 <exit@plt>
   12a30:	ldr	r5, [pc, #64]	; 12a78 <__assert_fail@plt+0x10d8>
   12a34:	mov	r2, #5
   12a38:	ldr	r1, [pc, #60]	; 12a7c <__assert_fail@plt+0x10dc>
   12a3c:	ldr	r7, [r5]
   12a40:	bl	11628 <dcgettext@plt>
   12a44:	ldr	r6, [pc, #40]	; 12a74 <__assert_fail@plt+0x10d4>
   12a48:	ldr	r2, [r6]
   12a4c:	mov	r1, r0
   12a50:	mov	r0, r7
   12a54:	bl	117c0 <fprintf@plt>
   12a58:	ldr	r1, [r6]
   12a5c:	ldr	r0, [r5]
   12a60:	bl	14c64 <__assert_fail@plt+0x32c4>
   12a64:	mov	r0, r4
   12a68:	bl	11784 <exit@plt>
   12a6c:	andeq	r5, r4, r8, lsl r2
   12a70:	andeq	r2, r3, r0, lsr r9
   12a74:	andeq	r5, r4, r0, lsr #5
   12a78:	andeq	r5, r4, ip, lsl r2
   12a7c:	andeq	r2, r3, r8, asr r9
   12a80:	push	{r4, lr}
   12a84:	ldr	r4, [pc, #32]	; 12aac <__assert_fail@plt+0x110c>
   12a88:	ldr	r0, [r0, #12]
   12a8c:	ldr	r1, [r4]
   12a90:	bl	1194c <fputs@plt>
   12a94:	ldr	r3, [pc, #20]	; 12ab0 <__assert_fail@plt+0x1110>
   12a98:	ldr	r1, [r4]
   12a9c:	ldr	r0, [r3]
   12aa0:	bl	118f8 <putc@plt>
   12aa4:	mov	r0, #1
   12aa8:	pop	{r4, pc}
   12aac:	andeq	r5, r4, ip, lsl r2
   12ab0:	andeq	r5, r4, ip, lsr #3
   12ab4:	push	{r4, lr}
   12ab8:	sub	sp, sp, #8
   12abc:	ldr	r3, [pc, #56]	; 12afc <__assert_fail@plt+0x115c>
   12ac0:	ldr	r4, [pc, #56]	; 12b00 <__assert_fail@plt+0x1160>
   12ac4:	ldr	ip, [r0, #12]
   12ac8:	ldrb	r2, [r3, #8]
   12acc:	ldr	r1, [r3, #4]
   12ad0:	ldr	r0, [r4]
   12ad4:	str	ip, [sp]
   12ad8:	ldr	r3, [pc, #36]	; 12b04 <__assert_fail@plt+0x1164>
   12adc:	bl	14448 <__assert_fail@plt+0x2aa8>
   12ae0:	ldr	r3, [pc, #32]	; 12b08 <__assert_fail@plt+0x1168>
   12ae4:	ldr	r1, [r4]
   12ae8:	ldr	r0, [r3]
   12aec:	bl	118f8 <putc@plt>
   12af0:	mov	r0, #1
   12af4:	add	sp, sp, #8
   12af8:	pop	{r4, pc}
   12afc:	andeq	r5, r4, r8, lsr #4
   12b00:	andeq	r5, r4, ip, lsl r2
   12b04:	andeq	r3, r3, r8, lsl r8
   12b08:	andeq	r5, r4, ip, lsr #3
   12b0c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12b10:	mov	r6, r1
   12b14:	ldr	r7, [r0, #12]
   12b18:	mov	r0, r7
   12b1c:	bl	117a8 <strlen@plt>
   12b20:	ldrd	r4, [r6, #8]
   12b24:	ldrd	r2, [r6, #16]
   12b28:	adds	r4, r4, #1
   12b2c:	adc	r5, r5, #0
   12b30:	strd	r4, [r6, #8]
   12b34:	adds	r4, r2, r0
   12b38:	adc	r5, r3, #0
   12b3c:	mov	r0, r4
   12b40:	mov	r1, r5
   12b44:	strd	r0, [r6, #16]
   12b48:	ldrb	r4, [r7]
   12b4c:	cmp	r4, #0
   12b50:	beq	12bfc <__assert_fail@plt+0x125c>
   12b54:	mov	r9, #0
   12b58:	mov	r5, r7
   12b5c:	mov	sl, r9
   12b60:	mov	r7, r9
   12b64:	mov	r8, #1
   12b68:	b	12b90 <__assert_fail@plt+0x11f0>
   12b6c:	bl	11778 <__ctype_b_loc@plt>
   12b70:	lsl	r4, r4, #1
   12b74:	ldr	r3, [r0]
   12b78:	ldrh	r3, [r3, r4]
   12b7c:	ldrb	r4, [r5, #1]!
   12b80:	tst	r3, #8192	; 0x2000
   12b84:	movne	r7, #1
   12b88:	cmp	r4, #0
   12b8c:	beq	12bb4 <__assert_fail@plt+0x1214>
   12b90:	tst	r4, #128	; 0x80
   12b94:	bne	12c04 <__assert_fail@plt+0x1264>
   12b98:	cmp	r4, #10
   12b9c:	bne	12b6c <__assert_fail@plt+0x11cc>
   12ba0:	ldrb	r4, [r5, #1]!
   12ba4:	mov	r9, r8
   12ba8:	mov	r7, #1
   12bac:	cmp	r4, #0
   12bb0:	bne	12b90 <__assert_fail@plt+0x11f0>
   12bb4:	cmp	sl, #0
   12bb8:	beq	12bcc <__assert_fail@plt+0x122c>
   12bbc:	ldrd	r2, [r6, #40]	; 0x28
   12bc0:	adds	r2, r2, #1
   12bc4:	adc	r3, r3, #0
   12bc8:	strd	r2, [r6, #40]	; 0x28
   12bcc:	cmp	r7, #0
   12bd0:	beq	12be4 <__assert_fail@plt+0x1244>
   12bd4:	ldrd	r2, [r6, #24]
   12bd8:	adds	r2, r2, #1
   12bdc:	adc	r3, r3, #0
   12be0:	strd	r2, [r6, #24]
   12be4:	cmp	r9, #0
   12be8:	beq	12bfc <__assert_fail@plt+0x125c>
   12bec:	ldrd	r2, [r6, #32]
   12bf0:	adds	r2, r2, #1
   12bf4:	adc	r3, r3, #0
   12bf8:	strd	r2, [r6, #32]
   12bfc:	mov	r0, #1
   12c00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12c04:	mov	sl, r8
   12c08:	b	12b6c <__assert_fail@plt+0x11cc>
   12c0c:	push	{lr}		; (str lr, [sp, #-4]!)
   12c10:	sub	sp, sp, #108	; 0x6c
   12c14:	ldr	r1, [r0, #12]
   12c18:	mov	r2, sp
   12c1c:	mov	r0, #3
   12c20:	bl	11988 <__lxstat64@plt>
   12c24:	cmp	r0, #0
   12c28:	movne	r0, #4
   12c2c:	moveq	r0, #1
   12c30:	add	sp, sp, #108	; 0x6c
   12c34:	pop	{pc}		; (ldr pc, [sp], #4)
   12c38:	push	{lr}		; (str lr, [sp, #-4]!)
   12c3c:	sub	sp, sp, #108	; 0x6c
   12c40:	ldr	r1, [r0, #12]
   12c44:	mov	r2, sp
   12c48:	mov	r0, #3
   12c4c:	bl	11988 <__lxstat64@plt>
   12c50:	cmp	r0, #0
   12c54:	moveq	r0, #4
   12c58:	movne	r0, #1
   12c5c:	add	sp, sp, #108	; 0x6c
   12c60:	pop	{pc}		; (ldr pc, [sp], #4)
   12c64:	push	{lr}		; (str lr, [sp, #-4]!)
   12c68:	sub	sp, sp, #108	; 0x6c
   12c6c:	ldr	r1, [r0, #12]
   12c70:	mov	r2, sp
   12c74:	mov	r0, #3
   12c78:	bl	11928 <__xstat64@plt>
   12c7c:	cmp	r0, #0
   12c80:	movne	r0, #4
   12c84:	moveq	r0, #1
   12c88:	add	sp, sp, #108	; 0x6c
   12c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   12c90:	push	{lr}		; (str lr, [sp, #-4]!)
   12c94:	sub	sp, sp, #108	; 0x6c
   12c98:	ldr	r1, [r0, #12]
   12c9c:	mov	r2, sp
   12ca0:	mov	r0, #3
   12ca4:	bl	11928 <__xstat64@plt>
   12ca8:	cmp	r0, #0
   12cac:	moveq	r0, #4
   12cb0:	movne	r0, #1
   12cb4:	add	sp, sp, #108	; 0x6c
   12cb8:	pop	{pc}		; (ldr pc, [sp], #4)
   12cbc:	push	{r4, lr}
   12cc0:	ldr	r0, [r0, #20]
   12cc4:	bl	182e0 <__assert_fail@plt+0x6940>
   12cc8:	cmp	r0, #0
   12ccc:	movne	r0, #2
   12cd0:	moveq	r0, #4
   12cd4:	pop	{r4, pc}
   12cd8:	push	{r4, lr}
   12cdc:	ldr	r0, [r0, #20]
   12ce0:	bl	169b8 <__assert_fail@plt+0x5018>
   12ce4:	cmp	r0, #0
   12ce8:	movne	r0, #2
   12cec:	moveq	r0, #4
   12cf0:	pop	{r4, pc}
   12cf4:	mov	r3, r1
   12cf8:	push	{r4, lr}
   12cfc:	mov	r2, #0
   12d00:	ldr	r1, [r0, #20]
   12d04:	mov	r0, r3
   12d08:	bl	116dc <fnmatch@plt>
   12d0c:	cmp	r0, #0
   12d10:	movne	r0, #4
   12d14:	moveq	r0, #2
   12d18:	pop	{r4, pc}
   12d1c:	mov	r3, r1
   12d20:	push	{r4, lr}
   12d24:	mov	r2, #16
   12d28:	ldr	r1, [r0, #20]
   12d2c:	mov	r0, r3
   12d30:	bl	116dc <fnmatch@plt>
   12d34:	cmp	r0, #0
   12d38:	movne	r0, #4
   12d3c:	moveq	r0, #2
   12d40:	pop	{r4, pc}
   12d44:	push	{r4, r5, lr}
   12d48:	sub	sp, sp, #12
   12d4c:	ldr	r4, [r0, #20]
   12d50:	mov	r5, r1
   12d54:	mov	r0, r4
   12d58:	bl	117a8 <strlen@plt>
   12d5c:	mov	r3, #0
   12d60:	mov	r1, r4
   12d64:	str	r3, [sp, #4]
   12d68:	mov	r2, r0
   12d6c:	str	r0, [sp]
   12d70:	mov	r0, r5
   12d74:	bl	2facc <__assert_fail@plt+0x1e12c>
   12d78:	cmp	r0, #0
   12d7c:	movlt	r0, #4
   12d80:	movge	r0, #2
   12d84:	add	sp, sp, #12
   12d88:	pop	{r4, r5, pc}
   12d8c:	push	{r4, lr}
   12d90:	mov	r4, r0
   12d94:	ldr	r0, [r0, #12]
   12d98:	bl	14cc8 <__assert_fail@plt+0x3328>
   12d9c:	str	r0, [r4, #20]
   12da0:	mov	r0, #1
   12da4:	pop	{r4, pc}
   12da8:	push	{r4, r5, r6, r7, r8, lr}
   12dac:	mov	r5, r0
   12db0:	ldr	r7, [pc, #152]	; 12e50 <__assert_fail@plt+0x14b0>
   12db4:	ldr	r4, [r7]
   12db8:	ldr	r6, [r7, #12]
   12dbc:	cmp	r4, r6
   12dc0:	beq	12e04 <__assert_fail@plt+0x1464>
   12dc4:	ldr	r3, [r4]
   12dc8:	ldr	r1, [r4, #4]
   12dcc:	mov	r0, r5
   12dd0:	blx	r3
   12dd4:	ldr	r4, [r4, #8]
   12dd8:	ands	r3, r0, #3
   12ddc:	movne	r3, #1
   12de0:	cmp	r6, r4
   12de4:	moveq	r3, #0
   12de8:	andne	r3, r3, #1
   12dec:	cmp	r3, #0
   12df0:	bne	12dc4 <__assert_fail@plt+0x1424>
   12df4:	cmp	r0, #1
   12df8:	beq	12e48 <__assert_fail@plt+0x14a8>
   12dfc:	tst	r0, #12
   12e00:	popne	{r4, r5, r6, r7, r8, pc}
   12e04:	ldr	r4, [r7, #12]
   12e08:	cmp	r4, #0
   12e0c:	beq	12e40 <__assert_fail@plt+0x14a0>
   12e10:	ldr	r3, [r4]
   12e14:	ldr	r1, [r4, #4]
   12e18:	mov	r0, r5
   12e1c:	blx	r3
   12e20:	ldr	r4, [r4, #8]
   12e24:	cmp	r4, #0
   12e28:	moveq	r3, #0
   12e2c:	andne	r3, r0, #1
   12e30:	cmp	r3, #0
   12e34:	bne	12e10 <__assert_fail@plt+0x1470>
   12e38:	cmp	r0, #1
   12e3c:	popne	{r4, r5, r6, r7, r8, pc}
   12e40:	mov	r0, #2
   12e44:	pop	{r4, r5, r6, r7, r8, pc}
   12e48:	mov	r0, #4
   12e4c:	pop	{r4, r5, r6, r7, r8, pc}
   12e50:	andeq	r5, r4, r8, lsr #4
   12e54:	push	{r4, r5, r6, lr}
   12e58:	mov	r4, r0
   12e5c:	mov	r5, r1
   12e60:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   12e64:	cmp	r0, #1
   12e68:	bne	12e88 <__assert_fail@plt+0x14e8>
   12e6c:	mov	r1, r5
   12e70:	ldr	r0, [r4, #20]
   12e74:	bl	30f74 <__assert_fail@plt+0x1f5d4>
   12e78:	cmp	r0, #0
   12e7c:	movne	r0, #2
   12e80:	moveq	r0, #4
   12e84:	pop	{r4, r5, r6, pc}
   12e88:	ldr	r3, [pc, #12]	; 12e9c <__assert_fail@plt+0x14fc>
   12e8c:	ldr	r2, [pc, #12]	; 12ea0 <__assert_fail@plt+0x1500>
   12e90:	ldr	r1, [pc, #12]	; 12ea4 <__assert_fail@plt+0x1504>
   12e94:	ldr	r0, [pc, #12]	; 12ea8 <__assert_fail@plt+0x1508>
   12e98:	bl	119a0 <__assert_fail@plt>
   12e9c:	andeq	r2, r3, r0, ror #13
   12ea0:			; <UNDEFINED> instruction: 0x000002b2
   12ea4:	strdeq	r2, [r3], -r8
   12ea8:	andeq	r2, r3, r4, lsl #22
   12eac:	push	{r4, r5, r6, lr}
   12eb0:	mov	r4, r0
   12eb4:	mov	r5, r1
   12eb8:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   12ebc:	cmp	r0, #1
   12ec0:	bne	12ee0 <__assert_fail@plt+0x1540>
   12ec4:	mov	r1, r5
   12ec8:	ldr	r0, [r4, #20]
   12ecc:	bl	30538 <__assert_fail@plt+0x1eb98>
   12ed0:	cmp	r0, #0
   12ed4:	movne	r0, #2
   12ed8:	moveq	r0, #4
   12edc:	pop	{r4, r5, r6, pc}
   12ee0:	ldr	r3, [pc, #12]	; 12ef4 <__assert_fail@plt+0x1554>
   12ee4:	ldr	r2, [pc, #12]	; 12ef8 <__assert_fail@plt+0x1558>
   12ee8:	ldr	r1, [pc, #12]	; 12efc <__assert_fail@plt+0x155c>
   12eec:	ldr	r0, [pc, #12]	; 12f00 <__assert_fail@plt+0x1560>
   12ef0:	bl	119a0 <__assert_fail@plt>
   12ef4:	andeq	r2, r3, r8, lsl #14
   12ef8:	andeq	r0, r0, sl, asr #5
   12efc:	strdeq	r2, [r3], -r8
   12f00:	andeq	r2, r3, r4, lsl #22
   12f04:	push	{r4, r5, r6, r7, lr}
   12f08:	mov	r5, r0
   12f0c:	ldr	r4, [r0]
   12f10:	sub	sp, sp, #12
   12f14:	cmp	r4, #128	; 0x80
   12f18:	beq	1304c <__assert_fail@plt+0x16ac>
   12f1c:	ldr	r0, [r0, #4]
   12f20:	cmp	r4, #127	; 0x7f
   12f24:	subgt	r4, r4, #256	; 0x100
   12f28:	add	r4, r4, r0
   12f2c:	str	r4, [r5, #4]
   12f30:	ldr	r3, [r5, #8]
   12f34:	lsr	ip, r4, #31
   12f38:	cmp	r3, r4
   12f3c:	orrlt	ip, ip, #1
   12f40:	cmp	ip, #0
   12f44:	bne	130c0 <__assert_fail@plt+0x1720>
   12f48:	add	r1, sp, #8
   12f4c:	ldr	r3, [r5, #24]
   12f50:	str	ip, [r1, #-4]!
   12f54:	mov	r2, ip
   12f58:	mov	r0, sp
   12f5c:	str	ip, [sp]
   12f60:	bl	1191c <getdelim@plt>
   12f64:	subs	r6, r0, #0
   12f68:	blt	1301c <__assert_fail@plt+0x167c>
   12f6c:	ldr	r1, [sp]
   12f70:	cmp	r1, #0
   12f74:	beq	130f8 <__assert_fail@plt+0x1758>
   12f78:	add	r7, r4, r6
   12f7c:	ldr	r3, [r5, #16]
   12f80:	add	r7, r7, #1
   12f84:	cmp	r7, r3
   12f88:	bhi	13028 <__assert_fail@plt+0x1688>
   12f8c:	ldr	r0, [r5, #12]
   12f90:	add	r2, r6, #1
   12f94:	add	r0, r0, r4
   12f98:	bl	115d4 <memcpy@plt>
   12f9c:	ldr	r0, [sp]
   12fa0:	bl	1f018 <__assert_fail@plt+0xd678>
   12fa4:	cmp	r6, #0
   12fa8:	beq	1301c <__assert_fail@plt+0x167c>
   12fac:	ldr	r0, [r5, #24]
   12fb0:	bl	11970 <getc@plt>
   12fb4:	ldr	r3, [r5, #4]
   12fb8:	add	r6, r6, r3
   12fbc:	sub	r6, r6, #1
   12fc0:	cmp	r6, #0
   12fc4:	str	r6, [r5, #8]
   12fc8:	str	r0, [r5]
   12fcc:	ble	13080 <__assert_fail@plt+0x16e0>
   12fd0:	ldr	r3, [r5, #12]
   12fd4:	sub	r6, r6, #1
   12fd8:	add	r2, r3, r6
   12fdc:	ldrb	r1, [r3, r6]
   12fe0:	cmp	r1, #0
   12fe4:	beq	1310c <__assert_fail@plt+0x176c>
   12fe8:	ldrb	r1, [r2, #1]
   12fec:	cmp	r1, #0
   12ff0:	bne	13120 <__assert_fail@plt+0x1780>
   12ff4:	ldrb	r2, [r2, #2]
   12ff8:	cmp	r2, #0
   12ffc:	streq	r3, [r5, #20]
   13000:	moveq	r0, #1
   13004:	beq	13020 <__assert_fail@plt+0x1680>
   13008:	ldr	r3, [pc, #292]	; 13134 <__assert_fail@plt+0x1794>
   1300c:	ldr	r2, [pc, #292]	; 13138 <__assert_fail@plt+0x1798>
   13010:	ldr	r1, [pc, #292]	; 1313c <__assert_fail@plt+0x179c>
   13014:	ldr	r0, [pc, #292]	; 13140 <__assert_fail@plt+0x17a0>
   13018:	bl	119a0 <__assert_fail@plt>
   1301c:	mov	r0, #8
   13020:	add	sp, sp, #12
   13024:	pop	{r4, r5, r6, r7, pc}
   13028:	mov	r1, r7
   1302c:	ldr	r0, [r5, #12]
   13030:	bl	1f190 <__assert_fail@plt+0xd7f0>
   13034:	cmp	r0, #0
   13038:	beq	1301c <__assert_fail@plt+0x167c>
   1303c:	ldr	r1, [sp]
   13040:	str	r7, [r5, #16]
   13044:	str	r0, [r5, #12]
   13048:	b	12f90 <__assert_fail@plt+0x15f0>
   1304c:	ldr	r4, [r0, #24]
   13050:	mov	r0, r4
   13054:	bl	11838 <fgetc@plt>
   13058:	sxtb	r6, r0
   1305c:	mov	r0, r4
   13060:	bl	11838 <fgetc@plt>
   13064:	lsl	r6, r6, #8
   13068:	ldr	r3, [r5, #4]
   1306c:	uxtb	r4, r0
   13070:	orr	r4, r6, r4
   13074:	add	r4, r4, r3
   13078:	str	r4, [r5, #4]
   1307c:	b	12f30 <__assert_fail@plt+0x1590>
   13080:	mov	r2, #5
   13084:	ldr	r1, [pc, #184]	; 13144 <__assert_fail@plt+0x17a4>
   13088:	mov	r0, #0
   1308c:	bl	11628 <dcgettext@plt>
   13090:	ldr	r2, [r5, #28]
   13094:	mov	r1, #8
   13098:	mov	r4, r0
   1309c:	mov	r0, #0
   130a0:	bl	1b064 <__assert_fail@plt+0x96c4>
   130a4:	mov	r2, r4
   130a8:	mov	r1, #0
   130ac:	mov	r3, r0
   130b0:	mov	r0, #1
   130b4:	bl	116d0 <error@plt>
   130b8:	ldr	r6, [r5, #8]
   130bc:	b	12fd0 <__assert_fail@plt+0x1630>
   130c0:	mov	r2, #5
   130c4:	ldr	r1, [pc, #120]	; 13144 <__assert_fail@plt+0x17a4>
   130c8:	mov	r0, #0
   130cc:	bl	11628 <dcgettext@plt>
   130d0:	ldr	r2, [r5, #28]
   130d4:	mov	r1, #8
   130d8:	mov	r4, r0
   130dc:	mov	r0, #0
   130e0:	bl	1b064 <__assert_fail@plt+0x96c4>
   130e4:	mov	r2, r4
   130e8:	mov	r1, #0
   130ec:	mov	r3, r0
   130f0:	mov	r0, #1
   130f4:	bl	116d0 <error@plt>
   130f8:	ldr	r3, [pc, #72]	; 13148 <__assert_fail@plt+0x17a8>
   130fc:	mov	r2, #245	; 0xf5
   13100:	ldr	r1, [pc, #52]	; 1313c <__assert_fail@plt+0x179c>
   13104:	ldr	r0, [pc, #64]	; 1314c <__assert_fail@plt+0x17ac>
   13108:	bl	119a0 <__assert_fail@plt>
   1310c:	ldr	r3, [pc, #32]	; 13134 <__assert_fail@plt+0x1794>
   13110:	mov	r2, #568	; 0x238
   13114:	ldr	r1, [pc, #32]	; 1313c <__assert_fail@plt+0x179c>
   13118:	ldr	r0, [pc, #48]	; 13150 <__assert_fail@plt+0x17b0>
   1311c:	bl	119a0 <__assert_fail@plt>
   13120:	ldr	r3, [pc, #12]	; 13134 <__assert_fail@plt+0x1794>
   13124:	ldr	r2, [pc, #40]	; 13154 <__assert_fail@plt+0x17b4>
   13128:	ldr	r1, [pc, #12]	; 1313c <__assert_fail@plt+0x179c>
   1312c:	ldr	r0, [pc, #36]	; 13158 <__assert_fail@plt+0x17b8>
   13130:	bl	119a0 <__assert_fail@plt>
   13134:	andeq	r2, r3, r0, asr #14
   13138:	andeq	r0, r0, sl, lsr r2
   1313c:	strdeq	r2, [r3], -r8
   13140:	andeq	r2, r3, ip, ror #22
   13144:	andeq	r2, r3, r4, lsl fp
   13148:	andeq	r2, r3, r0, lsr r7
   1314c:	andeq	r2, r3, r0, asr #22
   13150:	andeq	r2, r3, ip, asr #22
   13154:	andeq	r0, r0, r9, lsr r2
   13158:	andeq	r2, r3, ip, asr fp
   1315c:	push	{r4, r5, r6, r7, r8, lr}
   13160:	ldr	r7, [pc, #152]	; 13200 <__assert_fail@plt+0x1860>
   13164:	ldr	r4, [r7]
   13168:	ldr	r6, [r7, #12]
   1316c:	cmp	r4, r6
   13170:	beq	131f8 <__assert_fail@plt+0x1858>
   13174:	mov	r5, r0
   13178:	ldr	r3, [r4]
   1317c:	ldr	r1, [r4, #4]
   13180:	mov	r0, r5
   13184:	blx	r3
   13188:	ldr	r4, [r4, #8]
   1318c:	and	r3, r0, #5
   13190:	cmp	r6, r4
   13194:	cmpne	r3, #0
   13198:	bne	13178 <__assert_fail@plt+0x17d8>
   1319c:	cmp	r0, #1
   131a0:	beq	131f0 <__assert_fail@plt+0x1850>
   131a4:	tst	r0, #12
   131a8:	popne	{r4, r5, r6, r7, r8, pc}
   131ac:	ldr	r4, [r7, #12]
   131b0:	cmp	r4, #0
   131b4:	beq	131e8 <__assert_fail@plt+0x1848>
   131b8:	ldr	r3, [r4]
   131bc:	ldr	r1, [r4, #4]
   131c0:	mov	r0, r5
   131c4:	blx	r3
   131c8:	ldr	r4, [r4, #8]
   131cc:	cmp	r4, #0
   131d0:	moveq	r3, #0
   131d4:	andne	r3, r0, #1
   131d8:	cmp	r3, #0
   131dc:	bne	131b8 <__assert_fail@plt+0x1818>
   131e0:	cmp	r0, #1
   131e4:	popne	{r4, r5, r6, r7, r8, pc}
   131e8:	mov	r0, #2
   131ec:	pop	{r4, r5, r6, r7, r8, pc}
   131f0:	mov	r0, #4
   131f4:	pop	{r4, r5, r6, r7, r8, pc}
   131f8:	mov	r0, #5
   131fc:	pop	{r4, r5, r6, r7, r8, pc}
   13200:	andeq	r5, r4, r8, lsr #4
   13204:	ldr	r3, [r0]
   13208:	cmn	r3, #1
   1320c:	beq	1335c <__assert_fail@plt+0x19bc>
   13210:	cmp	r3, #30
   13214:	push	{r4, r5, r6, r7, r8, lr}
   13218:	mov	r4, r0
   1321c:	beq	13384 <__assert_fail@plt+0x19e4>
   13220:	ldr	r0, [r0, #4]
   13224:	sub	r5, r3, #14
   13228:	add	r5, r5, r0
   1322c:	cmp	r5, #0
   13230:	str	r5, [r4, #4]
   13234:	blt	1341c <__assert_fail@plt+0x1a7c>
   13238:	add	r7, r4, #16
   1323c:	mov	r6, #1
   13240:	ldr	r0, [r4, #24]
   13244:	bl	11970 <getc@plt>
   13248:	cmp	r0, #30
   1324c:	str	r0, [r4]
   13250:	ble	13324 <__assert_fail@plt+0x1984>
   13254:	cmp	r0, #127	; 0x7f
   13258:	bgt	13284 <__assert_fail@plt+0x18e4>
   1325c:	cmn	r5, #1
   13260:	beq	133e4 <__assert_fail@plt+0x1a44>
   13264:	ldr	r3, [r4, #16]
   13268:	add	r8, r5, #1
   1326c:	cmp	r3, r8
   13270:	bcc	132d4 <__assert_fail@plt+0x1934>
   13274:	ldr	r3, [r4, #12]
   13278:	strb	r0, [r3, r5]
   1327c:	mov	r5, r8
   13280:	b	13240 <__assert_fail@plt+0x18a0>
   13284:	cmn	r5, #3
   13288:	bhi	133e4 <__assert_fail@plt+0x1a44>
   1328c:	ldr	r3, [r4, #16]
   13290:	add	r8, r5, #2
   13294:	cmp	r3, r8
   13298:	bcc	132fc <__assert_fail@plt+0x195c>
   1329c:	ldr	r2, [r4, #12]
   132a0:	mov	r3, r4
   132a4:	and	r0, r0, #127	; 0x7f
   132a8:	str	r0, [r3], r0
   132ac:	ldrb	r3, [r3, #36]	; 0x24
   132b0:	strb	r3, [r2, r5]
   132b4:	ldr	r2, [r4]
   132b8:	ldr	r3, [r4, #12]
   132bc:	add	r2, r4, r2
   132c0:	add	r3, r3, r5
   132c4:	ldrb	r2, [r2, #164]	; 0xa4
   132c8:	mov	r5, r8
   132cc:	strb	r2, [r3, #1]
   132d0:	b	13240 <__assert_fail@plt+0x18a0>
   132d4:	mov	r2, r6
   132d8:	str	r8, [r4, #16]
   132dc:	mov	r1, r7
   132e0:	ldr	r0, [r4, #12]
   132e4:	bl	1daa0 <__assert_fail@plt+0xc100>
   132e8:	mov	r2, r0
   132ec:	mov	r3, r2
   132f0:	ldr	r0, [r4]
   132f4:	str	r2, [r4, #12]
   132f8:	b	13278 <__assert_fail@plt+0x18d8>
   132fc:	mov	r2, r6
   13300:	str	r8, [r4, #16]
   13304:	mov	r1, r7
   13308:	ldr	r0, [r4, #12]
   1330c:	bl	1daa0 <__assert_fail@plt+0xc100>
   13310:	mov	r3, r0
   13314:	mov	r2, r3
   13318:	ldr	r0, [r4]
   1331c:	str	r3, [r4, #12]
   13320:	b	132a0 <__assert_fail@plt+0x1900>
   13324:	cmn	r5, #1
   13328:	beq	133e4 <__assert_fail@plt+0x1a44>
   1332c:	ldr	r2, [r4, #16]
   13330:	add	r3, r5, #1
   13334:	cmp	r2, r3
   13338:	bcc	13364 <__assert_fail@plt+0x19c4>
   1333c:	ldr	r3, [r4, #12]
   13340:	mov	r2, #0
   13344:	strb	r2, [r3, r5]
   13348:	ldr	r3, [r4, #12]
   1334c:	str	r5, [r4, #8]
   13350:	str	r3, [r4, #20]
   13354:	mov	r0, #1
   13358:	pop	{r4, r5, r6, r7, r8, pc}
   1335c:	mov	r0, #8
   13360:	bx	lr
   13364:	mov	r1, r4
   13368:	mov	r2, #1
   1336c:	str	r3, [r1, #16]!
   13370:	ldr	r0, [r4, #12]
   13374:	bl	1daa0 <__assert_fail@plt+0xc100>
   13378:	mov	r3, r0
   1337c:	str	r0, [r4, #12]
   13380:	b	13340 <__assert_fail@plt+0x19a0>
   13384:	ldr	r3, [r0, #4]
   13388:	ldr	r1, [r0, #28]
   1338c:	sub	r2, r3, #14
   13390:	cmp	r2, #0
   13394:	rsb	r5, r3, #14
   13398:	ldrge	r3, [r0, #8]
   1339c:	str	r2, [r0, #4]
   133a0:	subge	r2, r3, r2
   133a4:	ldrlt	r2, [r0, #8]
   133a8:	add	r3, r0, #32
   133ac:	ldr	r0, [r0, #24]
   133b0:	bl	14258 <__assert_fail@plt+0x28b8>
   133b4:	cmp	r5, r0
   133b8:	bgt	13408 <__assert_fail@plt+0x1a68>
   133bc:	ldr	r5, [r4, #4]
   133c0:	add	r5, r0, r5
   133c4:	cmp	r5, #0
   133c8:	str	r5, [r4, #4]
   133cc:	bge	13238 <__assert_fail@plt+0x1898>
   133d0:	ldr	r3, [pc, #88]	; 13430 <__assert_fail@plt+0x1a90>
   133d4:	mov	r2, #480	; 0x1e0
   133d8:	ldr	r1, [pc, #84]	; 13434 <__assert_fail@plt+0x1a94>
   133dc:	ldr	r0, [pc, #84]	; 13438 <__assert_fail@plt+0x1a98>
   133e0:	bl	119a0 <__assert_fail@plt>
   133e4:	mov	r2, #5
   133e8:	ldr	r1, [pc, #76]	; 1343c <__assert_fail@plt+0x1a9c>
   133ec:	mov	r0, #0
   133f0:	bl	11628 <dcgettext@plt>
   133f4:	ldr	r3, [r4, #28]
   133f8:	mov	r1, #0
   133fc:	mov	r2, r0
   13400:	mov	r0, #1
   13404:	bl	116d0 <error@plt>
   13408:	ldr	r3, [pc, #32]	; 13430 <__assert_fail@plt+0x1a90>
   1340c:	ldr	r2, [pc, #44]	; 13440 <__assert_fail@plt+0x1aa0>
   13410:	ldr	r1, [pc, #28]	; 13434 <__assert_fail@plt+0x1a94>
   13414:	ldr	r0, [pc, #40]	; 13444 <__assert_fail@plt+0x1aa4>
   13418:	bl	119a0 <__assert_fail@plt>
   1341c:	ldr	r3, [pc, #12]	; 13430 <__assert_fail@plt+0x1a90>
   13420:	ldr	r2, [pc, #32]	; 13448 <__assert_fail@plt+0x1aa8>
   13424:	ldr	r1, [pc, #8]	; 13434 <__assert_fail@plt+0x1a94>
   13428:	ldr	r0, [pc, #8]	; 13438 <__assert_fail@plt+0x1a98>
   1342c:	bl	119a0 <__assert_fail@plt>
   13430:	andeq	r2, r3, r8, asr r7
   13434:	strdeq	r2, [r3], -r8
   13438:	andeq	r2, r3, ip, lsl #23
   1343c:	andeq	r2, r3, r4, lsr #23
   13440:	ldrdeq	r0, [r0], -lr
   13444:	andeq	r2, r3, ip, ror fp
   13448:	andeq	r0, r0, r5, ror #3
   1344c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13450:	sub	sp, sp, #2944	; 0xb80
   13454:	ldr	r4, [pc, #3316]	; 14150 <__assert_fail@plt+0x27b0>
   13458:	sub	sp, sp, #4
   1345c:	mov	r7, r2
   13460:	ldr	r2, [r4, #16]
   13464:	ldr	ip, [sp, #2996]	; 0xbb4
   13468:	str	r2, [sp, #16]
   1346c:	ldr	r2, [sp, #2984]	; 0xba8
   13470:	cmp	ip, #0
   13474:	str	r2, [sp, #20]
   13478:	ldr	r2, [sp, #2988]	; 0xbac
   1347c:	mov	r8, r1
   13480:	str	r2, [sp, #24]
   13484:	ldrne	r2, [sp, #3024]	; 0xbd0
   13488:	mov	r1, #128	; 0x80
   1348c:	orrne	r2, r2, #4194304	; 0x400000
   13490:	strne	r2, [sp, #3024]	; 0xbd0
   13494:	mov	fp, r0
   13498:	mov	r2, #0
   1349c:	mov	r0, r1
   134a0:	str	r3, [sp, #68]	; 0x44
   134a4:	str	r1, [sp, #60]	; 0x3c
   134a8:	str	r2, [sp, #76]	; 0x4c
   134ac:	str	r2, [sp, #48]	; 0x30
   134b0:	str	r2, [sp, #52]	; 0x34
   134b4:	str	r2, [r4]
   134b8:	str	r2, [r4, #20]
   134bc:	str	r2, [r4, #12]
   134c0:	strb	r2, [r4, #24]
   134c4:	ldr	sl, [sp, #3020]	; 0xbcc
   134c8:	str	r7, [sp, #72]	; 0x48
   134cc:	bl	1d8f0 <__assert_fail@plt+0xbf50>
   134d0:	ldr	r3, [sp, #68]	; 0x44
   134d4:	mov	r2, #2
   134d8:	mov	r1, #1
   134dc:	str	r0, [sp, #56]	; 0x38
   134e0:	bl	116ac <fread@plt>
   134e4:	ldr	r9, [sp, #56]	; 0x38
   134e8:	cmp	r0, #2
   134ec:	mov	r6, r0
   134f0:	bhi	140e4 <__assert_fail@plt+0x2744>
   134f4:	bne	135bc <__assert_fail@plt+0x1c1c>
   134f8:	ldrb	r5, [r9, #1]
   134fc:	cmp	r5, #0
   13500:	bne	135bc <__assert_fail@plt+0x1c1c>
   13504:	bl	11778 <__ctype_b_loc@plt>
   13508:	ldrb	r3, [r9]
   1350c:	lsl	r2, r3, #1
   13510:	ldr	r1, [r0]
   13514:	ldrh	r2, [r1, r2]
   13518:	tst	r2, #2048	; 0x800
   1351c:	beq	135bc <__assert_fail@plt+0x1c1c>
   13520:	sub	r6, r3, #48	; 0x30
   13524:	cmp	r6, #1
   13528:	ble	13718 <__assert_fail@plt+0x1d78>
   1352c:	mov	r2, #5
   13530:	ldr	r1, [pc, #3100]	; 14154 <__assert_fail@plt+0x27b4>
   13534:	mov	r0, r5
   13538:	ldr	r7, [sp, #72]	; 0x48
   1353c:	bl	11628 <dcgettext@plt>
   13540:	mov	r2, r7
   13544:	mov	r1, #8
   13548:	mov	r4, r0
   1354c:	mov	r0, r5
   13550:	bl	1b064 <__assert_fail@plt+0x96c4>
   13554:	ldrb	r3, [r9, #1]
   13558:	mov	r2, r4
   1355c:	mov	r1, r5
   13560:	str	r3, [sp]
   13564:	mov	r3, r0
   13568:	mov	r0, r5
   1356c:	bl	116d0 <error@plt>
   13570:	mov	r2, #5
   13574:	ldr	r1, [pc, #3036]	; 14158 <__assert_fail@plt+0x27b8>
   13578:	mov	r0, r5
   1357c:	bl	11628 <dcgettext@plt>
   13580:	ldr	r2, [sp, #72]	; 0x48
   13584:	mov	r1, #8
   13588:	mov	r4, r0
   1358c:	mov	r0, r5
   13590:	bl	1b064 <__assert_fail@plt+0x96c4>
   13594:	mov	r2, r4
   13598:	str	r6, [sp]
   1359c:	mov	r1, r5
   135a0:	mov	r3, r0
   135a4:	mov	r0, r5
   135a8:	bl	116d0 <error@plt>
   135ac:	mov	r0, r5
   135b0:	add	sp, sp, #2944	; 0xb80
   135b4:	add	sp, sp, #4
   135b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135bc:	ldr	r3, [sp, #60]	; 0x3c
   135c0:	cmp	r3, #9
   135c4:	bls	13c14 <__assert_fail@plt+0x2274>
   135c8:	add	r0, r9, r6
   135cc:	rsb	r2, r6, #10
   135d0:	ldr	r3, [sp, #68]	; 0x44
   135d4:	mov	r1, #1
   135d8:	bl	116ac <fread@plt>
   135dc:	ldr	r5, [sp, #56]	; 0x38
   135e0:	add	r6, r6, r0
   135e4:	cmp	r6, #9
   135e8:	bls	13690 <__assert_fail@plt+0x1cf0>
   135ec:	mov	r2, #10
   135f0:	ldr	r1, [pc, #2916]	; 1415c <__assert_fail@plt+0x27bc>
   135f4:	mov	r0, r5
   135f8:	bl	1161c <memcmp@plt>
   135fc:	subs	r3, r0, #0
   13600:	str	r3, [sp, #32]
   13604:	bne	13690 <__assert_fail@plt+0x1cf0>
   13608:	mov	r0, #12
   1360c:	bl	1d8f0 <__assert_fail@plt+0xbf50>
   13610:	ldr	r3, [r4, #20]
   13614:	ldr	r1, [sp, #32]
   13618:	ldr	r2, [pc, #2880]	; 14160 <__assert_fail@plt+0x27c0>
   1361c:	cmp	r3, #0
   13620:	mov	r9, r0
   13624:	str	r1, [r0, #4]
   13628:	str	r1, [r0, #8]
   1362c:	str	r2, [r0]
   13630:	beq	1407c <__assert_fail@plt+0x26dc>
   13634:	str	r9, [r3, #8]
   13638:	ldr	r3, [sp, #32]
   1363c:	str	r9, [r4, #20]
   13640:	str	r3, [sp, #28]
   13644:	ldr	r3, [pc, #2840]	; 14164 <__assert_fail@plt+0x27c4>
   13648:	str	r3, [sp, #36]	; 0x24
   1364c:	ldr	r3, [sp, #3004]	; 0xbbc
   13650:	cmp	r3, #0
   13654:	beq	137a0 <__assert_fail@plt+0x1e00>
   13658:	mov	r0, #12
   1365c:	bl	1d8f0 <__assert_fail@plt+0xbf50>
   13660:	ldr	r2, [r4, #20]
   13664:	ldr	r3, [pc, #2812]	; 14168 <__assert_fail@plt+0x27c8>
   13668:	cmp	r2, #0
   1366c:	str	r3, [r0]
   13670:	mov	r3, #0
   13674:	str	r3, [r0, #4]
   13678:	str	r3, [r0, #8]
   1367c:	mov	r9, r0
   13680:	streq	r0, [r4]
   13684:	strne	r0, [r2, #8]
   13688:	str	r0, [r4, #20]
   1368c:	b	137a0 <__assert_fail@plt+0x1e00>
   13690:	ldr	r3, [sp, #60]	; 0x3c
   13694:	cmp	r3, #255	; 0xff
   13698:	bls	13c8c <__assert_fail@plt+0x22ec>
   1369c:	cmp	r6, #255	; 0xff
   136a0:	ble	13fbc <__assert_fail@plt+0x261c>
   136a4:	add	r3, sp, #48	; 0x30
   136a8:	add	ip, sp, #207	; 0xcf
   136ac:	add	r2, r5, #1
   136b0:	add	r3, r3, #31
   136b4:	mov	r1, ip
   136b8:	ldrb	r0, [r2, #-1]
   136bc:	strb	r0, [r3, #1]!
   136c0:	ldrb	r0, [r2], #2
   136c4:	cmp	ip, r3
   136c8:	strb	r0, [r1, #1]!
   136cc:	bne	136b8 <__assert_fail@plt+0x1d18>
   136d0:	mov	r0, #12
   136d4:	bl	1d8f0 <__assert_fail@plt+0xbf50>
   136d8:	ldr	r2, [r4, #20]
   136dc:	ldr	r1, [pc, #2696]	; 1416c <__assert_fail@plt+0x27cc>
   136e0:	mov	r3, #0
   136e4:	cmp	r2, #0
   136e8:	mov	r9, r0
   136ec:	stm	r0, {r1, r3}
   136f0:	str	r3, [r0, #8]
   136f4:	beq	1405c <__assert_fail@plt+0x26bc>
   136f8:	ldr	r1, [pc, #2672]	; 14170 <__assert_fail@plt+0x27d0>
   136fc:	str	r3, [sp, #28]
   13700:	mov	r3, #1
   13704:	str	r1, [sp, #36]	; 0x24
   13708:	str	r3, [sp, #32]
   1370c:	str	r0, [r2, #8]
   13710:	str	r0, [r4, #20]
   13714:	b	13794 <__assert_fail@plt+0x1df4>
   13718:	bne	13748 <__assert_fail@plt+0x1da8>
   1371c:	ldr	r3, [r4, #16]
   13720:	cmp	r3, #2
   13724:	beq	13fe4 <__assert_fail@plt+0x2644>
   13728:	ldr	r3, [sp, #16]
   1372c:	cmp	r3, #1
   13730:	beq	13748 <__assert_fail@plt+0x1da8>
   13734:	ldr	r3, [sp, #3000]	; 0xbb8
   13738:	ldr	r2, [sp, #3012]	; 0xbc4
   1373c:	orrs	r3, r3, r2
   13740:	streq	r6, [sp, #16]
   13744:	bne	13cb0 <__assert_fail@plt+0x2310>
   13748:	mov	r0, #12
   1374c:	bl	1d8f0 <__assert_fail@plt+0xbf50>
   13750:	ldr	r2, [r4, #20]
   13754:	ldr	r1, [pc, #2564]	; 14160 <__assert_fail@plt+0x27c0>
   13758:	mov	r3, #0
   1375c:	cmp	r2, #0
   13760:	strne	r3, [sp, #32]
   13764:	streq	r2, [sp, #32]
   13768:	stm	r0, {r1, r3}
   1376c:	str	r3, [r0, #8]
   13770:	mov	r3, #1
   13774:	str	r3, [sp, #28]
   13778:	mov	r9, r0
   1377c:	ldr	r3, [pc, #2544]	; 14174 <__assert_fail@plt+0x27d4>
   13780:	streq	r0, [r4]
   13784:	streq	r0, [r4, #20]
   13788:	strne	r0, [r2, #8]
   1378c:	strne	r0, [r4, #20]
   13790:	str	r3, [sp, #36]	; 0x24
   13794:	ldr	r3, [sp, #3004]	; 0xbbc
   13798:	cmp	r3, #0
   1379c:	bne	13658 <__assert_fail@plt+0x1cb8>
   137a0:	cmp	fp, #0
   137a4:	ble	1385c <__assert_fail@plt+0x1ebc>
   137a8:	sub	r8, r8, #4
   137ac:	mov	r5, #0
   137b0:	b	137e8 <__assert_fail@plt+0x1e48>
   137b4:	mov	r0, #12
   137b8:	bl	1d8f0 <__assert_fail@plt+0xbf50>
   137bc:	ldr	r3, [r4, #20]
   137c0:	ldr	r2, [pc, #2480]	; 14178 <__assert_fail@plt+0x27d8>
   137c4:	cmp	r3, #0
   137c8:	str	r2, [r0]
   137cc:	stmib	r0, {r6, sl}
   137d0:	beq	13844 <__assert_fail@plt+0x1ea4>
   137d4:	add	r5, r5, #1
   137d8:	cmp	r5, fp
   137dc:	str	r0, [r3, #8]
   137e0:	str	r0, [r4, #20]
   137e4:	beq	13858 <__assert_fail@plt+0x1eb8>
   137e8:	mov	r9, #1
   137ec:	cmp	sl, #0
   137f0:	strb	r9, [r4, #24]
   137f4:	ldr	r6, [r8, #4]!
   137f8:	bne	13a58 <__assert_fail@plt+0x20b8>
   137fc:	ldr	r1, [pc, #2424]	; 1417c <__assert_fail@plt+0x27dc>
   13800:	mov	r0, r6
   13804:	bl	11904 <strpbrk@plt>
   13808:	cmp	r0, #0
   1380c:	beq	13af0 <__assert_fail@plt+0x2150>
   13810:	ldr	r3, [sp, #2996]	; 0xbb4
   13814:	cmp	r3, #0
   13818:	bne	137b4 <__assert_fail@plt+0x1e14>
   1381c:	mov	r0, #12
   13820:	bl	1d8f0 <__assert_fail@plt+0xbf50>
   13824:	ldr	r2, [pc, #2388]	; 14180 <__assert_fail@plt+0x27e0>
   13828:	ldr	r3, [r4, #20]
   1382c:	cmp	r3, #0
   13830:	str	r2, [r0]
   13834:	ldr	r2, [sp, #2996]	; 0xbb4
   13838:	str	r6, [r0, #4]
   1383c:	str	r2, [r0, #8]
   13840:	bne	137d4 <__assert_fail@plt+0x1e34>
   13844:	str	r0, [r4]
   13848:	str	r0, [r4, #20]
   1384c:	add	r5, r5, #1
   13850:	cmp	r5, fp
   13854:	bne	137e8 <__assert_fail@plt+0x1e48>
   13858:	mov	r9, r0
   1385c:	ldr	r3, [sp, #16]
   13860:	cmp	r3, #1
   13864:	beq	13b8c <__assert_fail@plt+0x21ec>
   13868:	cmp	r3, #2
   1386c:	bne	138b4 <__assert_fail@plt+0x1f14>
   13870:	ldr	r3, [pc, #2316]	; 14184 <__assert_fail@plt+0x27e4>
   13874:	mov	r2, #1
   13878:	strb	r2, [r4, #24]
   1387c:	ldr	r5, [r3, #4]
   13880:	mov	r0, #12
   13884:	cmp	r5, #0
   13888:	bne	13c6c <__assert_fail@plt+0x22cc>
   1388c:	bl	1d8f0 <__assert_fail@plt+0xbf50>
   13890:	ldr	r3, [r4, #20]
   13894:	ldr	r2, [pc, #2284]	; 14188 <__assert_fail@plt+0x27e8>
   13898:	cmp	r3, #0
   1389c:	str	r5, [r0, #4]
   138a0:	str	r5, [r0, #8]
   138a4:	str	r2, [r0]
   138a8:	strne	r0, [r3, #8]
   138ac:	strne	r0, [r4, #20]
   138b0:	beq	13f98 <__assert_fail@plt+0x25f8>
   138b4:	ldr	r3, [sp, #3012]	; 0xbc4
   138b8:	cmp	r3, #0
   138bc:	bne	13be0 <__assert_fail@plt+0x2240>
   138c0:	ldr	r3, [sp, #3000]	; 0xbb8
   138c4:	cmp	r3, #0
   138c8:	beq	13908 <__assert_fail@plt+0x1f68>
   138cc:	ldrb	r5, [r4, #80]	; 0x50
   138d0:	mov	r0, #12
   138d4:	cmp	r5, #0
   138d8:	beq	13c38 <__assert_fail@plt+0x2298>
   138dc:	bl	1d8f0 <__assert_fail@plt+0xbf50>
   138e0:	ldr	r3, [pc, #2212]	; 1418c <__assert_fail@plt+0x27ec>
   138e4:	ldr	r2, [r4, #20]
   138e8:	cmp	r2, #0
   138ec:	str	r3, [r0]
   138f0:	mov	r3, #0
   138f4:	str	r3, [r0, #4]
   138f8:	str	r3, [r0, #8]
   138fc:	beq	13c60 <__assert_fail@plt+0x22c0>
   13900:	str	r0, [r2, #8]
   13904:	str	r0, [r4, #20]
   13908:	ldr	r3, [sp, #3008]	; 0xbc0
   1390c:	mov	r0, #12
   13910:	cmp	r3, #0
   13914:	beq	13b58 <__assert_fail@plt+0x21b8>
   13918:	bl	1d8f0 <__assert_fail@plt+0xbf50>
   1391c:	ldr	r2, [pc, #2156]	; 14190 <__assert_fail@plt+0x27f0>
   13920:	ldr	r3, [r4, #20]
   13924:	ldr	r1, [pc, #2152]	; 14194 <__assert_fail@plt+0x27f4>
   13928:	cmp	r3, #0
   1392c:	str	r2, [r0]
   13930:	mov	r2, #0
   13934:	stmib	r0, {r1, r2}
   13938:	beq	13b80 <__assert_fail@plt+0x21e0>
   1393c:	str	r0, [r3, #8]
   13940:	str	r0, [r4, #20]
   13944:	cmp	fp, #1
   13948:	ble	13d10 <__assert_fail@plt+0x2370>
   1394c:	ldr	r2, [sp, #3016]	; 0xbc8
   13950:	ldr	r3, [r9, #8]
   13954:	cmp	r2, #0
   13958:	str	r3, [r4, #12]
   1395c:	ldrne	r3, [pc, #2100]	; 14198 <__assert_fail@plt+0x27f8>
   13960:	ldreq	r3, [pc, #2100]	; 1419c <__assert_fail@plt+0x27fc>
   13964:	str	r3, [r4, #104]	; 0x68
   13968:	ldr	r3, [sp, #3012]	; 0xbc4
   1396c:	cmp	r3, #0
   13970:	bne	13cf0 <__assert_fail@plt+0x2350>
   13974:	ldr	r0, [sp, #68]	; 0x44
   13978:	bl	11970 <getc@plt>
   1397c:	ldr	r1, [sp, #28]
   13980:	adds	r2, r0, #1
   13984:	movne	r2, #1
   13988:	tst	r1, r2
   1398c:	mov	r3, r0
   13990:	str	r0, [sp, #44]	; 0x2c
   13994:	beq	139ac <__assert_fail@plt+0x200c>
   13998:	ldr	r1, [sp, #68]	; 0x44
   1399c:	bl	117cc <ungetc@plt>
   139a0:	mov	r2, #0
   139a4:	mov	r3, r2
   139a8:	str	r2, [sp, #44]	; 0x2c
   139ac:	add	r5, sp, #44	; 0x2c
   139b0:	b	139cc <__assert_fail@plt+0x202c>
   139b4:	ldr	r3, [r4, #104]	; 0x68
   139b8:	mov	r0, r5
   139bc:	blx	r3
   139c0:	cmp	r0, #8
   139c4:	beq	139d4 <__assert_fail@plt+0x2034>
   139c8:	ldr	r3, [sp, #44]	; 0x2c
   139cc:	cmn	r3, #1
   139d0:	bne	139b4 <__assert_fail@plt+0x2014>
   139d4:	ldr	r3, [sp, #3012]	; 0xbc4
   139d8:	cmp	r3, #0
   139dc:	beq	13a08 <__assert_fail@plt+0x2068>
   139e0:	ldr	r3, [sp, #32]
   139e4:	cmp	r3, #0
   139e8:	bne	13f38 <__assert_fail@plt+0x2598>
   139ec:	ldr	r2, [sp, #24]
   139f0:	ldr	r3, [sp, #20]
   139f4:	orr	r3, r3, r2
   139f8:	ldr	r2, [sp, #2992]	; 0xbb0
   139fc:	cmp	r3, #0
   13a00:	cmpeq	r2, #0
   13a04:	bne	13d1c <__assert_fail@plt+0x237c>
   13a08:	ldr	r0, [sp, #68]	; 0x44
   13a0c:	bl	115b0 <ferror@plt>
   13a10:	cmp	r0, #0
   13a14:	ldreq	r0, [r4, #96]	; 0x60
   13a18:	beq	135b0 <__assert_fail@plt+0x1c10>
   13a1c:	bl	117d8 <__errno_location@plt>
   13a20:	ldr	r2, [sp, #72]	; 0x48
   13a24:	mov	r1, #8
   13a28:	ldr	r4, [r0]
   13a2c:	mov	r0, #0
   13a30:	bl	1b064 <__assert_fail@plt+0x96c4>
   13a34:	mov	r1, r4
   13a38:	ldr	r2, [pc, #1888]	; 141a0 <__assert_fail@plt+0x2800>
   13a3c:	mov	r3, r0
   13a40:	mov	r0, #0
   13a44:	bl	116d0 <error@plt>
   13a48:	mov	r0, #0
   13a4c:	add	sp, sp, #2944	; 0xb80
   13a50:	add	sp, sp, #4
   13a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a58:	mov	r0, #32
   13a5c:	bl	1d8f0 <__assert_fail@plt+0xbf50>
   13a60:	mov	r2, #32
   13a64:	mov	r1, #0
   13a68:	mov	r7, r0
   13a6c:	bl	11814 <memset@plt>
   13a70:	ldr	r0, [sp, #3024]	; 0xbd0
   13a74:	bl	2f254 <__assert_fail@plt+0x1d8b4>
   13a78:	mov	r3, #100	; 0x64
   13a7c:	mov	r0, r3
   13a80:	str	r3, [r7, #4]
   13a84:	bl	1d8f0 <__assert_fail@plt+0xbf50>
   13a88:	ldr	r3, [sp, #3024]	; 0xbd0
   13a8c:	str	r3, [r7, #12]
   13a90:	mov	r3, #0
   13a94:	str	r3, [r7, #16]
   13a98:	str	r3, [r7, #20]
   13a9c:	str	r0, [r7]
   13aa0:	mov	r0, r6
   13aa4:	bl	117a8 <strlen@plt>
   13aa8:	mov	r2, r7
   13aac:	mov	r1, r0
   13ab0:	mov	r0, r6
   13ab4:	bl	2f1e4 <__assert_fail@plt+0x1d844>
   13ab8:	subs	r6, r0, #0
   13abc:	bne	14094 <__assert_fail@plt+0x26f4>
   13ac0:	mov	r0, #12
   13ac4:	bl	1d8f0 <__assert_fail@plt+0xbf50>
   13ac8:	ldr	r3, [r4, #20]
   13acc:	ldr	r2, [pc, #1744]	; 141a4 <__assert_fail@plt+0x2804>
   13ad0:	cmp	r3, #0
   13ad4:	str	r7, [r0, #4]
   13ad8:	str	r6, [r0, #8]
   13adc:	str	r2, [r0]
   13ae0:	bne	137d4 <__assert_fail@plt+0x1e34>
   13ae4:	str	r0, [r4]
   13ae8:	str	r0, [r4, #20]
   13aec:	b	1384c <__assert_fail@plt+0x1eac>
   13af0:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   13af4:	cmp	r0, #1
   13af8:	beq	13b40 <__assert_fail@plt+0x21a0>
   13afc:	ldr	r2, [sp, #2996]	; 0xbb4
   13b00:	ldr	r3, [pc, #1696]	; 141a8 <__assert_fail@plt+0x2808>
   13b04:	cmp	r2, #0
   13b08:	ldr	r7, [pc, #1692]	; 141ac <__assert_fail@plt+0x280c>
   13b0c:	movne	r7, r3
   13b10:	mov	r0, #12
   13b14:	bl	1d8f0 <__assert_fail@plt+0xbf50>
   13b18:	ldr	r3, [r4, #20]
   13b1c:	mov	r2, #0
   13b20:	cmp	r3, #0
   13b24:	str	r7, [r0]
   13b28:	str	r6, [r0, #4]
   13b2c:	str	r2, [r0, #8]
   13b30:	bne	137d4 <__assert_fail@plt+0x1e34>
   13b34:	str	r0, [r4]
   13b38:	str	r0, [r4, #20]
   13b3c:	b	1384c <__assert_fail@plt+0x1eac>
   13b40:	ldr	r2, [sp, #2996]	; 0xbb4
   13b44:	ldr	r3, [pc, #1636]	; 141b0 <__assert_fail@plt+0x2810>
   13b48:	cmp	r2, #0
   13b4c:	ldr	r7, [pc, #1632]	; 141b4 <__assert_fail@plt+0x2814>
   13b50:	moveq	r7, r3
   13b54:	b	13b10 <__assert_fail@plt+0x2170>
   13b58:	bl	1d8f0 <__assert_fail@plt+0xbf50>
   13b5c:	ldr	r2, [sp, #3008]	; 0xbc0
   13b60:	ldr	r3, [r4, #20]
   13b64:	cmp	r3, #0
   13b68:	str	r2, [r0, #8]
   13b6c:	ldr	r2, [pc, #1604]	; 141b8 <__assert_fail@plt+0x2818>
   13b70:	str	r2, [r0]
   13b74:	ldr	r2, [pc, #1560]	; 14194 <__assert_fail@plt+0x27f4>
   13b78:	str	r2, [r0, #4]
   13b7c:	bne	1393c <__assert_fail@plt+0x1f9c>
   13b80:	str	r0, [r4]
   13b84:	str	r0, [r4, #20]
   13b88:	b	13944 <__assert_fail@plt+0x1fa4>
   13b8c:	ldr	r3, [pc, #1520]	; 14184 <__assert_fail@plt+0x27e4>
   13b90:	ldrb	r2, [sp, #16]
   13b94:	mov	r0, #12
   13b98:	ldr	r5, [r3, #4]
   13b9c:	strb	r2, [r4, #24]
   13ba0:	cmp	r5, #0
   13ba4:	beq	13c7c <__assert_fail@plt+0x22dc>
   13ba8:	bl	1d8f0 <__assert_fail@plt+0xbf50>
   13bac:	ldr	r2, [r4, #20]
   13bb0:	ldr	r3, [pc, #1540]	; 141bc <__assert_fail@plt+0x281c>
   13bb4:	str	r3, [r0]
   13bb8:	cmp	r2, #0
   13bbc:	mov	r3, #0
   13bc0:	str	r3, [r0, #4]
   13bc4:	str	r3, [r0, #8]
   13bc8:	beq	13f98 <__assert_fail@plt+0x25f8>
   13bcc:	ldr	r3, [sp, #3012]	; 0xbc4
   13bd0:	str	r0, [r2, #8]
   13bd4:	cmp	r3, #0
   13bd8:	str	r0, [r4, #20]
   13bdc:	beq	138c0 <__assert_fail@plt+0x1f20>
   13be0:	mov	r0, #12
   13be4:	bl	1d8f0 <__assert_fail@plt+0xbf50>
   13be8:	ldr	r2, [pc, #1488]	; 141c0 <__assert_fail@plt+0x2820>
   13bec:	ldr	r3, [r4, #20]
   13bf0:	ldr	r1, [pc, #1484]	; 141c4 <__assert_fail@plt+0x2824>
   13bf4:	cmp	r3, #0
   13bf8:	str	r2, [r0]
   13bfc:	mov	r2, #0
   13c00:	streq	r0, [r4]
   13c04:	stmib	r0, {r1, r2}
   13c08:	str	r0, [r4, #20]
   13c0c:	strne	r0, [r3, #8]
   13c10:	b	138c0 <__assert_fail@plt+0x1f20>
   13c14:	mov	r0, r9
   13c18:	mov	r3, #10
   13c1c:	add	r1, sp, #60	; 0x3c
   13c20:	mov	r2, #1
   13c24:	str	r3, [sp, #60]	; 0x3c
   13c28:	bl	1daa0 <__assert_fail@plt+0xc100>
   13c2c:	mov	r9, r0
   13c30:	str	r0, [sp, #56]	; 0x38
   13c34:	b	135c8 <__assert_fail@plt+0x1c28>
   13c38:	bl	1d8f0 <__assert_fail@plt+0xbf50>
   13c3c:	ldr	r3, [r4, #20]
   13c40:	ldr	r2, [pc, #1408]	; 141c8 <__assert_fail@plt+0x2828>
   13c44:	cmp	r3, #0
   13c48:	str	r5, [r0, #4]
   13c4c:	str	r5, [r0, #8]
   13c50:	str	r2, [r0]
   13c54:	strne	r0, [r4, #20]
   13c58:	strne	r0, [r3, #8]
   13c5c:	bne	13908 <__assert_fail@plt+0x1f68>
   13c60:	str	r0, [r4]
   13c64:	str	r0, [r4, #20]
   13c68:	b	13908 <__assert_fail@plt+0x1f68>
   13c6c:	bl	1d8f0 <__assert_fail@plt+0xbf50>
   13c70:	ldr	r2, [r4, #20]
   13c74:	ldr	r3, [pc, #1360]	; 141cc <__assert_fail@plt+0x282c>
   13c78:	b	13bb4 <__assert_fail@plt+0x2214>
   13c7c:	bl	1d8f0 <__assert_fail@plt+0xbf50>
   13c80:	ldr	r3, [r4, #20]
   13c84:	ldr	r2, [pc, #1348]	; 141d0 <__assert_fail@plt+0x2830>
   13c88:	b	13898 <__assert_fail@plt+0x1ef8>
   13c8c:	mov	r0, r5
   13c90:	mov	r3, #256	; 0x100
   13c94:	add	r1, sp, #60	; 0x3c
   13c98:	mov	r2, #1
   13c9c:	str	r3, [sp, #60]	; 0x3c
   13ca0:	bl	1daa0 <__assert_fail@plt+0xc100>
   13ca4:	mov	r5, r0
   13ca8:	str	r0, [sp, #56]	; 0x38
   13cac:	b	1369c <__assert_fail@plt+0x1cfc>
   13cb0:	mov	r2, #5
   13cb4:	ldr	r1, [pc, #1304]	; 141d4 <__assert_fail@plt+0x2834>
   13cb8:	mov	r0, r5
   13cbc:	bl	11628 <dcgettext@plt>
   13cc0:	ldr	r2, [sp, #72]	; 0x48
   13cc4:	mov	r1, #8
   13cc8:	mov	r7, r0
   13ccc:	mov	r0, r5
   13cd0:	bl	1b064 <__assert_fail@plt+0x96c4>
   13cd4:	mov	r2, r7
   13cd8:	mov	r1, r5
   13cdc:	str	r6, [sp, #16]
   13ce0:	mov	r3, r0
   13ce4:	mov	r0, r5
   13ce8:	bl	116d0 <error@plt>
   13cec:	b	13748 <__assert_fail@plt+0x1da8>
   13cf0:	mov	r2, #5
   13cf4:	ldr	r1, [pc, #1244]	; 141d8 <__assert_fail@plt+0x2838>
   13cf8:	mov	r0, #0
   13cfc:	bl	11628 <dcgettext@plt>
   13d00:	ldr	r2, [sp, #36]	; 0x24
   13d04:	ldr	r1, [sp, #72]	; 0x48
   13d08:	bl	11550 <printf@plt>
   13d0c:	b	13974 <__assert_fail@plt+0x1fd4>
   13d10:	ldr	r3, [pc, #1220]	; 141dc <__assert_fail@plt+0x283c>
   13d14:	str	r3, [r4, #104]	; 0x68
   13d18:	b	13968 <__assert_fail@plt+0x1fc8>
   13d1c:	cmp	r2, #0
   13d20:	addeq	r5, sp, #2288	; 0x8f0
   13d24:	addeq	r5, r5, #4
   13d28:	beq	13dbc <__assert_fail@plt+0x241c>
   13d2c:	mov	r0, r2
   13d30:	bl	1173c <localtime@plt>
   13d34:	add	r5, sp, #2288	; 0x8f0
   13d38:	add	r5, r5, #4
   13d3c:	subs	r6, r0, #0
   13d40:	beq	13dbc <__assert_fail@plt+0x241c>
   13d44:	mov	r0, r5
   13d48:	mov	r3, r6
   13d4c:	ldr	r2, [pc, #1164]	; 141e0 <__assert_fail@plt+0x2840>
   13d50:	mov	r1, #20
   13d54:	bl	11724 <strftime@plt>
   13d58:	cmp	r0, #19
   13d5c:	bne	14130 <__assert_fail@plt+0x2790>
   13d60:	ldrb	r0, [sp, #2311]	; 0x907
   13d64:	cmp	r0, #0
   13d68:	bne	140bc <__assert_fail@plt+0x271c>
   13d6c:	ldrb	r3, [sp, #2310]	; 0x906
   13d70:	cmp	r3, #0
   13d74:	beq	140a8 <__assert_fail@plt+0x2708>
   13d78:	mov	r2, #5
   13d7c:	ldr	r1, [pc, #1120]	; 141e4 <__assert_fail@plt+0x2844>
   13d80:	bl	11628 <dcgettext@plt>
   13d84:	ldr	r3, [sp, #2992]	; 0xbb0
   13d88:	mov	r1, r5
   13d8c:	ldr	r2, [r3, #4]
   13d90:	bl	11550 <printf@plt>
   13d94:	mov	r3, r6
   13d98:	ldr	r2, [pc, #1096]	; 141e8 <__assert_fail@plt+0x2848>
   13d9c:	mov	r1, #20
   13da0:	mov	r0, r5
   13da4:	bl	11724 <strftime@plt>
   13da8:	cmp	r0, #5
   13dac:	bne	140d0 <__assert_fail@plt+0x2730>
   13db0:	mov	r1, r5
   13db4:	ldr	r0, [pc, #1072]	; 141ec <__assert_fail@plt+0x284c>
   13db8:	bl	11550 <printf@plt>
   13dbc:	ldr	r8, [sp, #20]
   13dc0:	mov	r6, #5
   13dc4:	mov	r3, r8
   13dc8:	str	r6, [sp]
   13dcc:	ldr	r2, [pc, #1052]	; 141f0 <__assert_fail@plt+0x2850>
   13dd0:	ldr	r1, [pc, #1052]	; 141f4 <__assert_fail@plt+0x2854>
   13dd4:	mov	r0, #0
   13dd8:	bl	11994 <dcngettext@plt>
   13ddc:	mov	r2, #1
   13de0:	mov	r3, #0
   13de4:	mov	r1, #0
   13de8:	strd	r2, [sp, #8]
   13dec:	strd	r2, [sp]
   13df0:	mov	r3, #0
   13df4:	add	r2, sp, #336	; 0x150
   13df8:	mov	r7, r0
   13dfc:	mov	r0, r8
   13e00:	bl	14eb0 <__assert_fail@plt+0x3510>
   13e04:	mov	r1, r0
   13e08:	mov	r0, r7
   13e0c:	bl	11550 <printf@plt>
   13e10:	ldrb	r0, [r4, #24]
   13e14:	mov	r2, r6
   13e18:	mov	r7, #0
   13e1c:	cmp	r0, #0
   13e20:	movne	r0, #0
   13e24:	ldrne	r1, [pc, #972]	; 141f8 <__assert_fail@plt+0x2858>
   13e28:	ldreq	r1, [pc, #972]	; 141fc <__assert_fail@plt+0x285c>
   13e2c:	bl	11628 <dcgettext@plt>
   13e30:	mov	r6, #1
   13e34:	mov	r3, #0
   13e38:	add	r2, sp, #336	; 0x150
   13e3c:	mov	r8, r0
   13e40:	ldrd	r0, [r4, #40]	; 0x28
   13e44:	strd	r6, [sp, #8]
   13e48:	strd	r6, [sp]
   13e4c:	bl	14eb0 <__assert_fail@plt+0x3510>
   13e50:	mov	r1, r0
   13e54:	mov	r0, r8
   13e58:	bl	11550 <printf@plt>
   13e5c:	mov	r2, #5
   13e60:	ldr	r1, [pc, #920]	; 14200 <__assert_fail@plt+0x2860>
   13e64:	mov	r0, #0
   13e68:	bl	11628 <dcgettext@plt>
   13e6c:	add	r2, sp, #336	; 0x150
   13e70:	mov	r3, #0
   13e74:	mov	r8, r0
   13e78:	ldrd	r0, [r4, #48]	; 0x30
   13e7c:	strd	r6, [sp, #8]
   13e80:	strd	r6, [sp]
   13e84:	bl	14eb0 <__assert_fail@plt+0x3510>
   13e88:	add	r2, sp, #988	; 0x3dc
   13e8c:	mov	r3, #0
   13e90:	mov	r9, r0
   13e94:	ldrd	r0, [r4, #56]	; 0x38
   13e98:	strd	r6, [sp, #8]
   13e9c:	strd	r6, [sp]
   13ea0:	bl	14eb0 <__assert_fail@plt+0x3510>
   13ea4:	add	r3, sp, #1648	; 0x670
   13ea8:	sub	r2, r3, #8
   13eac:	mov	r3, #0
   13eb0:	mov	sl, r0
   13eb4:	ldrd	r0, [r4, #64]	; 0x40
   13eb8:	strd	r6, [sp, #8]
   13ebc:	strd	r6, [sp]
   13ec0:	bl	14eb0 <__assert_fail@plt+0x3510>
   13ec4:	mov	r2, r5
   13ec8:	mov	r3, #0
   13ecc:	str	r0, [sp, #16]
   13ed0:	ldrd	r0, [r4, #72]	; 0x48
   13ed4:	strd	r6, [sp, #8]
   13ed8:	strd	r6, [sp]
   13edc:	bl	14eb0 <__assert_fail@plt+0x3510>
   13ee0:	ldr	r3, [sp, #16]
   13ee4:	mov	r2, sl
   13ee8:	mov	r1, r9
   13eec:	str	r0, [sp]
   13ef0:	mov	r0, r8
   13ef4:	bl	11550 <printf@plt>
   13ef8:	cmp	fp, #0
   13efc:	bne	13f2c <__assert_fail@plt+0x258c>
   13f00:	ldrb	r3, [r4, #24]
   13f04:	cmp	r3, #0
   13f08:	bne	13fa4 <__assert_fail@plt+0x2604>
   13f0c:	ldrd	r2, [r4, #48]	; 0x30
   13f10:	mov	r0, fp
   13f14:	orrs	r3, r2, r3
   13f18:	mov	r2, #5
   13f1c:	bne	1401c <__assert_fail@plt+0x267c>
   13f20:	ldr	r1, [pc, #732]	; 14204 <__assert_fail@plt+0x2864>
   13f24:	bl	11628 <dcgettext@plt>
   13f28:	bl	11550 <printf@plt>
   13f2c:	mov	r0, #10
   13f30:	bl	11820 <putchar@plt>
   13f34:	b	13a08 <__assert_fail@plt+0x2068>
   13f38:	mov	r2, #5
   13f3c:	ldr	r1, [pc, #708]	; 14208 <__assert_fail@plt+0x2868>
   13f40:	mov	r0, #0
   13f44:	bl	11628 <dcgettext@plt>
   13f48:	mov	r2, #5
   13f4c:	ldr	r1, [pc, #696]	; 1420c <__assert_fail@plt+0x286c>
   13f50:	mov	r5, r0
   13f54:	mov	r0, #0
   13f58:	bl	11628 <dcgettext@plt>
   13f5c:	ldr	r3, [sp, #76]	; 0x4c
   13f60:	cmp	r3, #1
   13f64:	beq	1400c <__assert_fail@plt+0x266c>
   13f68:	cmp	r3, #2
   13f6c:	beq	13f88 <__assert_fail@plt+0x25e8>
   13f70:	mov	r2, #5
   13f74:	ldr	r1, [pc, #660]	; 14210 <__assert_fail@plt+0x2870>
   13f78:	mov	r0, #0
   13f7c:	bl	11628 <dcgettext@plt>
   13f80:	bl	11550 <printf@plt>
   13f84:	b	139ec <__assert_fail@plt+0x204c>
   13f88:	mov	r1, r0
   13f8c:	ldr	r0, [pc, #524]	; 141a0 <__assert_fail@plt+0x2800>
   13f90:	bl	11550 <printf@plt>
   13f94:	b	139ec <__assert_fail@plt+0x204c>
   13f98:	str	r0, [r4]
   13f9c:	str	r0, [r4, #20]
   13fa0:	b	138b4 <__assert_fail@plt+0x1f14>
   13fa4:	mov	r2, #5
   13fa8:	ldr	r1, [pc, #612]	; 14214 <__assert_fail@plt+0x2874>
   13fac:	mov	r0, fp
   13fb0:	bl	11628 <dcgettext@plt>
   13fb4:	bl	11550 <printf@plt>
   13fb8:	b	13f2c <__assert_fail@plt+0x258c>
   13fbc:	add	r0, r5, r6
   13fc0:	rsb	r2, r6, #256	; 0x100
   13fc4:	ldr	r3, [sp, #68]	; 0x44
   13fc8:	mov	r1, #1
   13fcc:	bl	116ac <fread@plt>
   13fd0:	add	r6, r0, r6
   13fd4:	cmp	r6, #256	; 0x100
   13fd8:	bne	140f8 <__assert_fail@plt+0x2758>
   13fdc:	ldr	r5, [sp, #56]	; 0x38
   13fe0:	b	136a4 <__assert_fail@plt+0x1d04>
   13fe4:	mov	r2, #5
   13fe8:	ldr	r1, [pc, #552]	; 14218 <__assert_fail@plt+0x2878>
   13fec:	mov	r0, r5
   13ff0:	bl	11628 <dcgettext@plt>
   13ff4:	mov	r1, r5
   13ff8:	mov	r2, r0
   13ffc:	mov	r0, r5
   14000:	bl	116d0 <error@plt>
   14004:	mov	r0, r5
   14008:	b	135b0 <__assert_fail@plt+0x1c10>
   1400c:	mov	r1, r5
   14010:	ldr	r0, [pc, #392]	; 141a0 <__assert_fail@plt+0x2800>
   14014:	bl	11550 <printf@plt>
   14018:	b	139ec <__assert_fail@plt+0x204c>
   1401c:	ldr	r1, [pc, #504]	; 1421c <__assert_fail@plt+0x287c>
   14020:	bl	11628 <dcgettext@plt>
   14024:	mov	r5, r0
   14028:	ldrd	r0, [r4, #48]	; 0x30
   1402c:	bl	32424 <__assert_fail@plt+0x20a84>
   14030:	vldr	s15, [sp, #20]
   14034:	vldr	d5, [pc, #268]	; 14148 <__assert_fail@plt+0x27a8>
   14038:	vcvt.f64.u32	d7, s15
   1403c:	vmov	d6, r0, r1
   14040:	mov	r0, r5
   14044:	vsub.f64	d7, d6, d7
   14048:	vmul.f64	d7, d7, d5
   1404c:	vdiv.f64	d5, d7, d6
   14050:	vmov	r2, r3, d5
   14054:	bl	11550 <printf@plt>
   14058:	b	13f2c <__assert_fail@plt+0x258c>
   1405c:	ldr	r3, [pc, #268]	; 14170 <__assert_fail@plt+0x27d0>
   14060:	str	r0, [r4]
   14064:	str	r3, [sp, #36]	; 0x24
   14068:	mov	r3, #1
   1406c:	str	r0, [r4, #20]
   14070:	str	r2, [sp, #28]
   14074:	str	r3, [sp, #32]
   14078:	b	13794 <__assert_fail@plt+0x1df4>
   1407c:	ldr	r3, [pc, #224]	; 14164 <__assert_fail@plt+0x27c4>
   14080:	str	r9, [r4]
   14084:	str	r9, [r4, #20]
   14088:	str	r1, [sp, #28]
   1408c:	str	r3, [sp, #36]	; 0x24
   14090:	b	13794 <__assert_fail@plt+0x1df4>
   14094:	mov	r3, r6
   14098:	mov	r1, #0
   1409c:	mov	r0, r9
   140a0:	ldr	r2, [pc, #248]	; 141a0 <__assert_fail@plt+0x2800>
   140a4:	bl	116d0 <error@plt>
   140a8:	ldr	r3, [pc, #368]	; 14220 <__assert_fail@plt+0x2880>
   140ac:	ldr	r2, [pc, #368]	; 14224 <__assert_fail@plt+0x2884>
   140b0:	ldr	r1, [pc, #368]	; 14228 <__assert_fail@plt+0x2888>
   140b4:	ldr	r0, [pc, #368]	; 1422c <__assert_fail@plt+0x288c>
   140b8:	bl	119a0 <__assert_fail@plt>
   140bc:	ldr	r3, [pc, #348]	; 14220 <__assert_fail@plt+0x2880>
   140c0:	ldr	r2, [pc, #360]	; 14230 <__assert_fail@plt+0x2890>
   140c4:	ldr	r1, [pc, #348]	; 14228 <__assert_fail@plt+0x2888>
   140c8:	ldr	r0, [pc, #356]	; 14234 <__assert_fail@plt+0x2894>
   140cc:	bl	119a0 <__assert_fail@plt>
   140d0:	ldr	r3, [pc, #328]	; 14220 <__assert_fail@plt+0x2880>
   140d4:	ldr	r2, [pc, #348]	; 14238 <__assert_fail@plt+0x2898>
   140d8:	ldr	r1, [pc, #328]	; 14228 <__assert_fail@plt+0x2888>
   140dc:	ldr	r0, [pc, #344]	; 1423c <__assert_fail@plt+0x289c>
   140e0:	bl	119a0 <__assert_fail@plt>
   140e4:	ldr	r3, [pc, #340]	; 14240 <__assert_fail@plt+0x28a0>
   140e8:	ldr	r2, [pc, #340]	; 14244 <__assert_fail@plt+0x28a4>
   140ec:	ldr	r1, [pc, #308]	; 14228 <__assert_fail@plt+0x2888>
   140f0:	ldr	r0, [pc, #336]	; 14248 <__assert_fail@plt+0x28a8>
   140f4:	bl	119a0 <__assert_fail@plt>
   140f8:	mov	r2, #5
   140fc:	ldr	r1, [pc, #328]	; 1424c <__assert_fail@plt+0x28ac>
   14100:	mov	r0, #0
   14104:	bl	11628 <dcgettext@plt>
   14108:	mov	r2, r7
   1410c:	mov	r1, #8
   14110:	mov	r4, r0
   14114:	mov	r0, #0
   14118:	bl	1b064 <__assert_fail@plt+0x96c4>
   1411c:	mov	r2, r4
   14120:	mov	r1, #0
   14124:	mov	r3, r0
   14128:	mov	r0, #1
   1412c:	bl	116d0 <error@plt>
   14130:	ldr	r3, [pc, #232]	; 14220 <__assert_fail@plt+0x2880>
   14134:	ldr	r2, [pc, #276]	; 14250 <__assert_fail@plt+0x28b0>
   14138:	ldr	r1, [pc, #232]	; 14228 <__assert_fail@plt+0x2888>
   1413c:	ldr	r0, [pc, #272]	; 14254 <__assert_fail@plt+0x28b4>
   14140:	bl	119a0 <__assert_fail@plt>
   14144:	nop			; (mov r0, r0)
   14148:	andeq	r0, r0, r0
   1414c:	subsmi	r0, r9, r0
   14150:	andeq	r5, r4, r8, lsr #4
   14154:	andeq	r2, r3, r4, lsl ip
   14158:	andeq	r2, r3, r0, lsr #25
   1415c:	andeq	r2, r3, r8, lsl #15
   14160:	andeq	r2, r1, r4, lsl #30
   14164:	strdeq	r2, [r3], -r4
   14168:	andeq	r2, r1, ip, lsl #27
   1416c:	andeq	r3, r1, r4, lsl #4
   14170:	andeq	r2, r3, r4, lsl #24
   14174:	andeq	r2, r3, ip, ror #23
   14178:	andeq	r2, r1, ip, lsl sp
   1417c:	andeq	r2, r3, r8, lsl #28
   14180:	strdeq	r2, [r1], -r4
   14184:	andeq	r5, r4, ip, lsr #3
   14188:	andeq	r2, r1, r8, lsr ip
   1418c:			; <UNDEFINED> instruction: 0x00012ab4
   14190:	muleq	r1, r8, r9
   14194:	andeq	r5, r4, r0, lsl #5
   14198:	andeq	r2, r1, r8, lsr #27
   1419c:	andeq	r3, r1, ip, asr r1
   141a0:	andeq	r3, r3, r8, lsl r8
   141a4:	andeq	r2, r1, r4, asr #26
   141a8:	ldrdeq	r2, [r1], -r8
   141ac:			; <UNDEFINED> instruction: 0x00012cbc
   141b0:	andeq	r2, r1, r4, asr lr
   141b4:	andeq	r2, r1, ip, lsr #29
   141b8:	andeq	r2, r1, r8, asr #19
   141bc:	andeq	r2, r1, r4, ror #24
   141c0:	andeq	r2, r1, ip, lsl #22
   141c4:	andeq	r5, r4, r8, asr #4
   141c8:	andeq	r2, r1, r0, lsl #21
   141cc:	muleq	r1, r0, ip
   141d0:	andeq	r2, r1, ip, lsl #24
   141d4:	muleq	r3, r8, sp
   141d8:	andeq	r2, r3, r0, lsl lr
   141dc:	andeq	r2, r1, r0, asr #18
   141e0:	ldrdeq	r2, [r3], -ip
   141e4:	andeq	r2, r3, ip, asr #30
   141e8:	andeq	r2, r3, r4, ror pc
   141ec:	andeq	r2, r3, r8, lsl #31
   141f0:	muleq	r3, r0, pc	; <UNPREDICTABLE>
   141f4:			; <UNDEFINED> instruction: 0x00032fb0
   141f8:	ldrdeq	r2, [r3], -r0
   141fc:	andeq	r2, r3, r8, ror #31
   14200:	strdeq	r2, [r3], -ip
   14204:	andeq	r3, r3, r8, lsr r1
   14208:	andeq	r2, r3, r4, lsr lr
   1420c:	andeq	r2, r3, ip, ror #28
   14210:	andeq	r2, r3, r0, lsr #29
   14214:	strheq	r3, [r3], -r0
   14218:	andeq	r2, r3, ip, ror #25
   1421c:	andeq	r3, r3, r8, lsl #2
   14220:	muleq	r3, r4, r7
   14224:	andeq	r0, r0, pc, asr #6
   14228:	strdeq	r2, [r3], -r8
   1422c:	andeq	r2, r3, ip, lsr #30
   14230:	andeq	r0, r0, lr, asr #6
   14234:	andeq	r2, r3, ip, lsl #30
   14238:	andeq	r0, r0, r3, asr r3
   1423c:	andeq	r2, r3, r8, ror pc
   14240:	andeq	r2, r3, ip, ror #14
   14244:	andeq	r0, r0, r7, lsr #7
   14248:	andeq	r2, r3, r8, lsl #24
   1424c:	ldrdeq	r2, [r3], -r0
   14250:	andeq	r0, r0, sp, asr #6
   14254:	strdeq	r2, [r3], -r0
   14258:	push	{r4, r5, r6, r7, r8, lr}
   1425c:	sub	sp, sp, #8
   14260:	mov	r4, r0
   14264:	mov	r5, r1
   14268:	mov	r7, r2
   1426c:	mov	r6, r3
   14270:	bl	118e0 <clearerr@plt>
   14274:	mov	r1, #4
   14278:	mov	r3, r4
   1427c:	mov	r2, #1
   14280:	add	r0, sp, r1
   14284:	bl	116ac <fread@plt>
   14288:	cmp	r0, #1
   1428c:	beq	14304 <__assert_fail@plt+0x2964>
   14290:	mov	r2, r5
   14294:	mov	r1, #8
   14298:	mov	r0, #0
   1429c:	bl	1b064 <__assert_fail@plt+0x96c4>
   142a0:	mov	r5, r0
   142a4:	mov	r0, r4
   142a8:	bl	11790 <feof@plt>
   142ac:	subs	r4, r0, #0
   142b0:	beq	142d8 <__assert_fail@plt+0x2938>
   142b4:	mov	r2, #5
   142b8:	ldr	r1, [pc, #208]	; 14390 <__assert_fail@plt+0x29f0>
   142bc:	mov	r0, #0
   142c0:	bl	11628 <dcgettext@plt>
   142c4:	mov	r3, r5
   142c8:	mov	r1, #0
   142cc:	mov	r2, r0
   142d0:	mov	r0, #1
   142d4:	bl	116d0 <error@plt>
   142d8:	bl	117d8 <__errno_location@plt>
   142dc:	mov	r2, #5
   142e0:	ldr	r1, [pc, #172]	; 14394 <__assert_fail@plt+0x29f4>
   142e4:	ldr	r6, [r0]
   142e8:	mov	r0, r4
   142ec:	bl	11628 <dcgettext@plt>
   142f0:	mov	r3, r5
   142f4:	mov	r1, r6
   142f8:	mov	r2, r0
   142fc:	mov	r0, #1
   14300:	bl	116d0 <error@plt>
   14304:	ldr	r4, [r6]
   14308:	mov	r3, r0
   1430c:	ldr	r0, [sp, #4]
   14310:	cmp	r4, #0
   14314:	rev	r8, r0
   14318:	bne	14374 <__assert_fail@plt+0x29d4>
   1431c:	cmp	r7, r0
   14320:	bge	14384 <__assert_fail@plt+0x29e4>
   14324:	cmp	r7, r8
   14328:	blt	1437c <__assert_fail@plt+0x29dc>
   1432c:	mov	r2, #5
   14330:	ldr	r1, [pc, #96]	; 14398 <__assert_fail@plt+0x29f8>
   14334:	mov	r0, r4
   14338:	bl	11628 <dcgettext@plt>
   1433c:	mov	r2, r5
   14340:	mov	r1, #8
   14344:	mov	r7, r0
   14348:	mov	r0, r4
   1434c:	bl	1b064 <__assert_fail@plt+0x96c4>
   14350:	mov	r2, r7
   14354:	mov	r1, r4
   14358:	mov	r3, r0
   1435c:	mov	r0, r4
   14360:	bl	116d0 <error@plt>
   14364:	mov	r3, #2
   14368:	mov	r0, r8
   1436c:	str	r3, [r6]
   14370:	b	1437c <__assert_fail@plt+0x29dc>
   14374:	cmp	r4, #2
   14378:	moveq	r0, r8
   1437c:	add	sp, sp, #8
   14380:	pop	{r4, r5, r6, r7, r8, pc}
   14384:	cmp	r7, r8
   14388:	bge	1437c <__assert_fail@plt+0x29dc>
   1438c:	b	1436c <__assert_fail@plt+0x29cc>
   14390:	andeq	r3, r3, r4, lsr #9
   14394:			; <UNDEFINED> instruction: 0x000334bc
   14398:	ldrdeq	r3, [r3], -ip
   1439c:	ldr	r3, [pc, #136]	; 1442c <__assert_fail@plt+0x2a8c>
   143a0:	push	{r4, r5, r6, r7, r8, lr}
   143a4:	mov	r5, r0
   143a8:	sub	sp, sp, #16
   143ac:	ldr	r0, [r3]
   143b0:	bl	1efb8 <__assert_fail@plt+0xd618>
   143b4:	ldr	ip, [pc, #116]	; 14430 <__assert_fail@plt+0x2a90>
   143b8:	ldr	r3, [pc, #116]	; 14434 <__assert_fail@plt+0x2a94>
   143bc:	mov	r2, #5
   143c0:	ldr	r1, [pc, #112]	; 14438 <__assert_fail@plt+0x2a98>
   143c4:	mov	r0, #0
   143c8:	ldr	r4, [ip]
   143cc:	ldr	r7, [r3]
   143d0:	bl	11628 <dcgettext@plt>
   143d4:	mov	r2, #5
   143d8:	ldr	r1, [pc, #92]	; 1443c <__assert_fail@plt+0x2a9c>
   143dc:	mov	r8, r0
   143e0:	mov	r0, #0
   143e4:	bl	11628 <dcgettext@plt>
   143e8:	mov	r2, #5
   143ec:	ldr	r1, [pc, #76]	; 14440 <__assert_fail@plt+0x2aa0>
   143f0:	mov	r6, r0
   143f4:	mov	r0, #0
   143f8:	bl	11628 <dcgettext@plt>
   143fc:	mov	r2, #0
   14400:	str	r2, [sp, #12]
   14404:	str	r8, [sp]
   14408:	mov	r3, r7
   1440c:	str	r6, [sp, #4]
   14410:	mov	r1, r5
   14414:	ldr	r2, [pc, #40]	; 14444 <__assert_fail@plt+0x2aa4>
   14418:	str	r0, [sp, #8]
   1441c:	mov	r0, r4
   14420:	bl	1d720 <__assert_fail@plt+0xbd80>
   14424:	add	sp, sp, #16
   14428:	pop	{r4, r5, r6, r7, r8, pc}
   1442c:	andeq	r5, r4, r8, lsl r2
   14430:	andeq	r5, r4, ip, lsl r2
   14434:			; <UNDEFINED> instruction: 0x000451b8
   14438:	andeq	r3, r3, r0, lsr #10
   1443c:	andeq	r3, r3, r0, lsr r5
   14440:	andeq	r3, r3, r0, asr #10
   14444:	andeq	r3, r3, r0, asr r5
   14448:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1444c:	cmp	r2, #0
   14450:	sub	sp, sp, #8192	; 0x2000
   14454:	sub	sp, sp, #8
   14458:	mov	r5, r3
   1445c:	beq	144d4 <__assert_fail@plt+0x2b34>
   14460:	add	r2, sp, #8192	; 0x2000
   14464:	add	r2, r2, #40	; 0x28
   14468:	add	r4, sp, #8
   1446c:	str	r1, [sp]
   14470:	mov	r7, r1
   14474:	mov	r8, r0
   14478:	mvn	r3, #0
   1447c:	mov	r0, r4
   14480:	ldr	r2, [r2]
   14484:	mov	r1, #8192	; 0x2000
   14488:	bl	1a738 <__assert_fail@plt+0x8d98>
   1448c:	cmp	r0, #8192	; 0x2000
   14490:	mov	r6, r0
   14494:	bcs	144fc <__assert_fail@plt+0x2b5c>
   14498:	mov	r1, r0
   1449c:	mov	r0, r4
   144a0:	bl	14574 <__assert_fail@plt+0x2bd4>
   144a4:	mov	r1, r5
   144a8:	mov	ip, #0
   144ac:	mov	r2, r4
   144b0:	mov	r3, r0
   144b4:	mov	r0, r8
   144b8:	strb	ip, [r4, r3]
   144bc:	bl	117c0 <fprintf@plt>
   144c0:	mov	r5, r0
   144c4:	mov	r0, r5
   144c8:	add	sp, sp, #8192	; 0x2000
   144cc:	add	sp, sp, #8
   144d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   144d4:	mov	r1, r3
   144d8:	add	r3, sp, #8192	; 0x2000
   144dc:	add	r3, r3, #40	; 0x28
   144e0:	ldr	r2, [r3]
   144e4:	bl	117c0 <fprintf@plt>
   144e8:	mov	r5, r0
   144ec:	mov	r0, r5
   144f0:	add	sp, sp, #8192	; 0x2000
   144f4:	add	sp, sp, #8
   144f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   144fc:	add	sl, r0, #1
   14500:	mov	r0, sl
   14504:	bl	1d8f0 <__assert_fail@plt+0xbf50>
   14508:	add	r2, sp, #8192	; 0x2000
   1450c:	add	r2, r2, #40	; 0x28
   14510:	mvn	r3, #0
   14514:	mov	r1, sl
   14518:	str	r7, [sp]
   1451c:	ldr	r2, [r2]
   14520:	mov	r9, r0
   14524:	bl	1a738 <__assert_fail@plt+0x8d98>
   14528:	mov	r1, r6
   1452c:	mov	r0, r9
   14530:	bl	14574 <__assert_fail@plt+0x2bd4>
   14534:	mov	r1, r5
   14538:	mov	ip, #0
   1453c:	mov	r2, r9
   14540:	mov	r3, r0
   14544:	mov	r0, r8
   14548:	strb	ip, [r9, r3]
   1454c:	bl	117c0 <fprintf@plt>
   14550:	cmp	r9, r4
   14554:	mov	r5, r0
   14558:	beq	144ec <__assert_fail@plt+0x2b4c>
   1455c:	mov	r0, r9
   14560:	bl	1f018 <__assert_fail@plt+0xd678>
   14564:	mov	r0, r5
   14568:	add	sp, sp, #8192	; 0x2000
   1456c:	add	sp, sp, #8
   14570:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14574:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14578:	sub	sp, sp, #28
   1457c:	mov	r7, r1
   14580:	str	r0, [sp, #4]
   14584:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   14588:	cmp	r0, #1
   1458c:	bls	147e0 <__assert_fail@plt+0x2e40>
   14590:	ldr	r4, [sp, #4]
   14594:	add	r7, r4, r7
   14598:	cmp	r4, r7
   1459c:	bcs	14828 <__assert_fail@plt+0x2e88>
   145a0:	mov	r6, r4
   145a4:	b	145d0 <__assert_fail@plt+0x2c30>
   145a8:	cmp	r3, #37	; 0x25
   145ac:	bcs	145bc <__assert_fail@plt+0x2c1c>
   145b0:	sub	r2, r3, #32
   145b4:	cmp	r2, #3
   145b8:	bhi	145f8 <__assert_fail@plt+0x2c58>
   145bc:	strb	r3, [r6]
   145c0:	add	r4, r4, #1
   145c4:	add	r6, r6, #1
   145c8:	cmp	r4, r7
   145cc:	bcs	147d0 <__assert_fail@plt+0x2e30>
   145d0:	ldrb	r3, [r4]
   145d4:	cmp	r3, #63	; 0x3f
   145d8:	bls	145a8 <__assert_fail@plt+0x2c08>
   145dc:	cmp	r3, #65	; 0x41
   145e0:	bcc	145f8 <__assert_fail@plt+0x2c58>
   145e4:	cmp	r3, #95	; 0x5f
   145e8:	bls	145bc <__assert_fail@plt+0x2c1c>
   145ec:	sub	r2, r3, #97	; 0x61
   145f0:	cmp	r2, #29
   145f4:	bls	145bc <__assert_fail@plt+0x2c1c>
   145f8:	mov	r3, #0
   145fc:	str	r3, [sp, #16]
   14600:	str	r3, [sp, #20]
   14604:	b	14724 <__assert_fail@plt+0x2d84>
   14608:	bl	11574 <wcwidth@plt>
   1460c:	cmp	r0, #0
   14610:	blt	14768 <__assert_fail@plt+0x2dc8>
   14614:	add	r3, r6, #4
   14618:	add	r2, r4, #4
   1461c:	cmp	r6, r2
   14620:	cmpcc	r4, r3
   14624:	movcs	r3, #1
   14628:	movcc	r3, #0
   1462c:	cmp	r5, #11
   14630:	movls	r3, #0
   14634:	andhi	r3, r3, #1
   14638:	cmp	r3, #0
   1463c:	beq	14794 <__assert_fail@plt+0x2df4>
   14640:	rsb	r3, r4, #0
   14644:	ands	r3, r3, #3
   14648:	beq	14784 <__assert_fail@plt+0x2de4>
   1464c:	ldrb	r2, [r4]
   14650:	cmp	r3, #1
   14654:	add	ip, r6, #1
   14658:	strb	r2, [r6]
   1465c:	add	lr, r4, #1
   14660:	sub	r1, r5, #1
   14664:	beq	14698 <__assert_fail@plt+0x2cf8>
   14668:	ldrb	r2, [r4, #1]
   1466c:	cmp	r3, #3
   14670:	add	ip, r6, #2
   14674:	strb	r2, [r6, #1]
   14678:	add	lr, r4, #2
   1467c:	sub	r1, r5, #2
   14680:	bne	14698 <__assert_fail@plt+0x2cf8>
   14684:	ldrb	r2, [r4, #2]
   14688:	add	ip, r6, #3
   1468c:	add	lr, r4, #3
   14690:	sub	r1, r5, #3
   14694:	strb	r2, [r6, #2]
   14698:	sub	r9, r5, r3
   1469c:	sub	r2, r9, #4
   146a0:	add	r8, r4, r3
   146a4:	lsr	r2, r2, #2
   146a8:	add	r2, r2, #1
   146ac:	add	r3, r6, r3
   146b0:	lsl	sl, r2, #2
   146b4:	mov	r0, #0
   146b8:	add	r0, r0, #1
   146bc:	ldr	fp, [r8], #4
   146c0:	cmp	r2, r0
   146c4:	str	fp, [r3], #4
   146c8:	bhi	146b8 <__assert_fail@plt+0x2d18>
   146cc:	cmp	r9, sl
   146d0:	sub	r1, r1, sl
   146d4:	add	r0, lr, sl
   146d8:	add	r3, ip, sl
   146dc:	beq	1477c <__assert_fail@plt+0x2ddc>
   146e0:	ldrb	lr, [lr, r2, lsl #2]
   146e4:	cmp	r1, #1
   146e8:	strb	lr, [ip, r2, lsl #2]
   146ec:	beq	1477c <__assert_fail@plt+0x2ddc>
   146f0:	ldrb	r2, [r0, #1]
   146f4:	cmp	r1, #2
   146f8:	strb	r2, [r3, #1]
   146fc:	beq	1477c <__assert_fail@plt+0x2ddc>
   14700:	ldrb	r1, [r0, #2]
   14704:	add	r2, r4, r5
   14708:	strb	r1, [r3, #2]
   1470c:	add	r6, r6, r5
   14710:	mov	r4, r2
   14714:	add	r0, sp, #16
   14718:	bl	11604 <mbsinit@plt>
   1471c:	cmp	r0, #0
   14720:	bne	145c8 <__assert_fail@plt+0x2c28>
   14724:	add	r3, sp, #16
   14728:	sub	r2, r7, r4
   1472c:	mov	r1, r4
   14730:	add	r0, sp, #12
   14734:	bl	1f13c <__assert_fail@plt+0xd79c>
   14738:	cmn	r0, #1
   1473c:	mov	r5, r0
   14740:	beq	147b0 <__assert_fail@plt+0x2e10>
   14744:	cmn	r0, #2
   14748:	beq	147b8 <__assert_fail@plt+0x2e18>
   1474c:	cmp	r5, #0
   14750:	ldr	r0, [sp, #12]
   14754:	bne	14608 <__assert_fail@plt+0x2c68>
   14758:	bl	11574 <wcwidth@plt>
   1475c:	mov	r5, #1
   14760:	cmp	r0, #0
   14764:	bge	14794 <__assert_fail@plt+0x2df4>
   14768:	mov	r3, #63	; 0x3f
   1476c:	strb	r3, [r6]
   14770:	add	r4, r4, r5
   14774:	add	r6, r6, #1
   14778:	b	14714 <__assert_fail@plt+0x2d74>
   1477c:	add	r2, r4, r5
   14780:	b	1470c <__assert_fail@plt+0x2d6c>
   14784:	mov	r1, r5
   14788:	mov	ip, r6
   1478c:	mov	lr, r4
   14790:	b	14698 <__assert_fail@plt+0x2cf8>
   14794:	sub	r3, r6, #1
   14798:	add	r2, r4, r5
   1479c:	ldrb	r1, [r4], #1
   147a0:	cmp	r4, r2
   147a4:	strb	r1, [r3, #1]!
   147a8:	bne	1479c <__assert_fail@plt+0x2dfc>
   147ac:	b	1470c <__assert_fail@plt+0x2d6c>
   147b0:	mov	r3, #63	; 0x3f
   147b4:	b	145bc <__assert_fail@plt+0x2c1c>
   147b8:	mov	r4, r7
   147bc:	mov	r3, #63	; 0x3f
   147c0:	cmp	r4, r7
   147c4:	strb	r3, [r6]
   147c8:	add	r6, r6, #1
   147cc:	bcc	145d0 <__assert_fail@plt+0x2c30>
   147d0:	ldr	r3, [sp, #4]
   147d4:	sub	r0, r6, r3
   147d8:	add	sp, sp, #28
   147dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147e0:	ldr	r3, [sp, #4]
   147e4:	add	r4, r3, r7
   147e8:	cmp	r3, r4
   147ec:	bcs	14820 <__assert_fail@plt+0x2e80>
   147f0:	bl	11778 <__ctype_b_loc@plt>
   147f4:	ldr	r3, [sp, #4]
   147f8:	mov	r1, #63	; 0x3f
   147fc:	ldrb	r2, [r3]
   14800:	ldr	ip, [r0]
   14804:	add	r3, r3, #1
   14808:	lsl	r2, r2, #1
   1480c:	ldrh	r2, [ip, r2]
   14810:	tst	r2, #16384	; 0x4000
   14814:	strbeq	r1, [r3, #-1]
   14818:	cmp	r4, r3
   1481c:	bne	147fc <__assert_fail@plt+0x2e5c>
   14820:	mov	r0, r7
   14824:	b	147d8 <__assert_fail@plt+0x2e38>
   14828:	mov	r0, #0
   1482c:	add	sp, sp, #28
   14830:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14834:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14838:	mov	r4, #0
   1483c:	ldr	r7, [pc, #296]	; 1496c <__assert_fail@plt+0x2fcc>
   14840:	sub	sp, sp, #20
   14844:	mov	r8, r0
   14848:	mov	r9, r4
   1484c:	mov	r5, r4
   14850:	ldr	r6, [r7, r4]
   14854:	mov	r1, r8
   14858:	mov	r0, r6
   1485c:	bl	11544 <strcmp@plt>
   14860:	cmp	r0, #0
   14864:	beq	1492c <__assert_fail@plt+0x2f8c>
   14868:	mov	r0, r6
   1486c:	bl	1cdb4 <__assert_fail@plt+0xb414>
   14870:	bl	117a8 <strlen@plt>
   14874:	add	r5, r5, #1
   14878:	cmp	r5, #13
   1487c:	add	r4, r4, #12
   14880:	add	r0, r0, #2
   14884:	add	r9, r9, r0
   14888:	bne	14850 <__assert_fail@plt+0x2eb0>
   1488c:	add	r0, r9, #1
   14890:	bl	1d8f0 <__assert_fail@plt+0xbf50>
   14894:	mov	r6, #0
   14898:	mov	r5, #1
   1489c:	ldr	fp, [pc, #204]	; 14970 <__assert_fail@plt+0x2fd0>
   148a0:	ldr	r9, [pc, #204]	; 14974 <__assert_fail@plt+0x2fd4>
   148a4:	mov	sl, r0
   148a8:	mov	r3, r0
   148ac:	b	148b8 <__assert_fail@plt+0x2f18>
   148b0:	add	r5, r5, #1
   148b4:	add	r6, r6, #12
   148b8:	cmp	r5, #1
   148bc:	beq	14940 <__assert_fail@plt+0x2fa0>
   148c0:	ldrh	r1, [fp]
   148c4:	ldrb	r2, [fp, #2]
   148c8:	mov	r4, r3
   148cc:	strh	r1, [r3]
   148d0:	ldr	r0, [r7, r6]
   148d4:	strb	r2, [r4, #2]!
   148d8:	bl	1cdb4 <__assert_fail@plt+0xb414>
   148dc:	mov	r1, r9
   148e0:	mov	r2, r0
   148e4:	mov	r0, r4
   148e8:	bl	118ec <sprintf@plt>
   148ec:	cmp	r5, #13
   148f0:	add	r3, r4, r0
   148f4:	bne	148b0 <__assert_fail@plt+0x2f10>
   148f8:	mov	r2, #5
   148fc:	ldr	r1, [pc, #116]	; 14978 <__assert_fail@plt+0x2fd8>
   14900:	mov	r0, #0
   14904:	bl	11628 <dcgettext@plt>
   14908:	mov	r4, r0
   1490c:	mov	r0, r8
   14910:	bl	1cdb4 <__assert_fail@plt+0xb414>
   14914:	mov	r2, r4
   14918:	str	sl, [sp]
   1491c:	mov	r1, #0
   14920:	mov	r3, r0
   14924:	mov	r0, #1
   14928:	bl	116d0 <error@plt>
   1492c:	add	r5, r5, r5, lsl #1
   14930:	add	r7, r7, r5, lsl #2
   14934:	ldr	r0, [r7, #8]
   14938:	add	sp, sp, #20
   1493c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14940:	ldr	r0, [r7, r6]
   14944:	str	r3, [sp, #12]
   14948:	bl	1cdb4 <__assert_fail@plt+0xb414>
   1494c:	ldr	r3, [sp, #12]
   14950:	mov	r1, r9
   14954:	mov	r2, r0
   14958:	mov	r0, r3
   1495c:	bl	118ec <sprintf@plt>
   14960:	ldr	r3, [sp, #12]
   14964:	add	r3, r3, r0
   14968:	b	148b0 <__assert_fail@plt+0x2f10>
   1496c:	andeq	r3, r3, r0, ror r5
   14970:	andeq	r3, r3, ip, lsl #12
   14974:	andeq	r3, r3, r8, lsl r8
   14978:	andeq	r3, r3, r0, lsl r6
   1497c:	cmp	r0, #12
   14980:	addls	r0, r0, r0, lsl #1
   14984:	ldrls	r3, [pc, #8]	; 14994 <__assert_fail@plt+0x2ff4>
   14988:	ldrls	r0, [r3, r0, lsl #2]
   1498c:	movhi	r0, #0
   14990:	bx	lr
   14994:	andeq	r3, r3, r0, ror r5
   14998:	cmp	r0, #12
   1499c:	addls	r0, r0, r0, lsl #1
   149a0:	ldrls	r3, [pc, #12]	; 149b4 <__assert_fail@plt+0x3014>
   149a4:	addls	r0, r3, r0, lsl #2
   149a8:	ldrls	r0, [r0, #8]
   149ac:	mvnhi	r0, #0
   149b0:	bx	lr
   149b4:	andeq	r3, r3, r0, ror r5
   149b8:	cmp	r0, #12
   149bc:	addls	r0, r0, r0, lsl #1
   149c0:	ldrls	r3, [pc, #12]	; 149d4 <__assert_fail@plt+0x3034>
   149c4:	addls	r0, r3, r0, lsl #2
   149c8:	ldrls	r0, [r0, #4]
   149cc:	movhi	r0, #0
   149d0:	bx	lr
   149d4:	andeq	r3, r3, r0, ror r5
   149d8:	cmp	r0, #12
   149dc:	bhi	14adc <__assert_fail@plt+0x313c>
   149e0:	ldr	r2, [pc, #448]	; 14ba8 <__assert_fail@plt+0x3208>
   149e4:	add	r3, r0, r0, lsl #1
   149e8:	cmp	r0, #0
   149ec:	add	r3, r2, r3, lsl #2
   149f0:	ldr	r3, [r3, #8]
   149f4:	beq	14adc <__assert_fail@plt+0x313c>
   149f8:	tst	r1, #1
   149fc:	bne	14b28 <__assert_fail@plt+0x3188>
   14a00:	cmp	r0, #1
   14a04:	beq	14adc <__assert_fail@plt+0x313c>
   14a08:	ands	r2, r1, #2
   14a0c:	bne	14b14 <__assert_fail@plt+0x3174>
   14a10:	cmp	r0, #2
   14a14:	beq	14adc <__assert_fail@plt+0x313c>
   14a18:	ands	r1, r1, #3
   14a1c:	bne	14b04 <__assert_fail@plt+0x3164>
   14a20:	cmp	r0, #3
   14a24:	beq	14adc <__assert_fail@plt+0x313c>
   14a28:	cmp	r1, #0
   14a2c:	bne	14af0 <__assert_fail@plt+0x3150>
   14a30:	cmp	r0, #4
   14a34:	beq	14adc <__assert_fail@plt+0x313c>
   14a38:	cmp	r1, #0
   14a3c:	bne	14b4c <__assert_fail@plt+0x31ac>
   14a40:	cmp	r0, #5
   14a44:	beq	14adc <__assert_fail@plt+0x313c>
   14a48:	cmp	r1, #0
   14a4c:	bne	14b38 <__assert_fail@plt+0x3198>
   14a50:	cmp	r0, #6
   14a54:	beq	14adc <__assert_fail@plt+0x313c>
   14a58:	cmp	r1, #0
   14a5c:	bne	14b60 <__assert_fail@plt+0x31c0>
   14a60:	cmp	r0, #7
   14a64:	beq	14adc <__assert_fail@plt+0x313c>
   14a68:	cmp	r1, #0
   14a6c:	beq	14ae4 <__assert_fail@plt+0x3144>
   14a70:	ldr	ip, [pc, #308]	; 14bac <__assert_fail@plt+0x320c>
   14a74:	cmp	r3, ip
   14a78:	beq	14ba0 <__assert_fail@plt+0x3200>
   14a7c:	cmp	r0, #8
   14a80:	beq	14adc <__assert_fail@plt+0x313c>
   14a84:	ldr	ip, [pc, #292]	; 14bb0 <__assert_fail@plt+0x3210>
   14a88:	cmp	r3, ip
   14a8c:	beq	14b88 <__assert_fail@plt+0x31e8>
   14a90:	cmp	r0, #9
   14a94:	bls	14adc <__assert_fail@plt+0x313c>
   14a98:	cmp	r1, #0
   14a9c:	beq	14b74 <__assert_fail@plt+0x31d4>
   14aa0:	ldr	r1, [pc, #264]	; 14bb0 <__assert_fail@plt+0x3210>
   14aa4:	cmp	r3, r1
   14aa8:	beq	14b98 <__assert_fail@plt+0x31f8>
   14aac:	cmp	r0, #10
   14ab0:	beq	14adc <__assert_fail@plt+0x313c>
   14ab4:	ldr	r1, [pc, #248]	; 14bb4 <__assert_fail@plt+0x3214>
   14ab8:	cmp	r3, r1
   14abc:	beq	14b90 <__assert_fail@plt+0x31f0>
   14ac0:	cmp	r0, #12
   14ac4:	bne	14adc <__assert_fail@plt+0x313c>
   14ac8:	cmp	r2, #0
   14acc:	beq	14adc <__assert_fail@plt+0x313c>
   14ad0:	ldr	r2, [pc, #224]	; 14bb8 <__assert_fail@plt+0x3218>
   14ad4:	cmp	r3, r2
   14ad8:	beq	14b80 <__assert_fail@plt+0x31e0>
   14adc:	mvn	r0, #0
   14ae0:	bx	lr
   14ae4:	cmp	r0, #8
   14ae8:	bne	14a90 <__assert_fail@plt+0x30f0>
   14aec:	b	14adc <__assert_fail@plt+0x313c>
   14af0:	ldr	ip, [pc, #196]	; 14bbc <__assert_fail@plt+0x321c>
   14af4:	cmp	r3, ip
   14af8:	bne	14a30 <__assert_fail@plt+0x3090>
   14afc:	mov	r0, #3
   14b00:	bx	lr
   14b04:	cmp	r3, #0
   14b08:	bne	14a20 <__assert_fail@plt+0x3080>
   14b0c:	mov	r0, #2
   14b10:	bx	lr
   14b14:	ldr	ip, [pc, #144]	; 14bac <__assert_fail@plt+0x320c>
   14b18:	cmp	r3, ip
   14b1c:	bne	14a10 <__assert_fail@plt+0x3070>
   14b20:	mov	r0, #1
   14b24:	bx	lr
   14b28:	cmp	r3, #64	; 0x40
   14b2c:	bne	14a00 <__assert_fail@plt+0x3060>
   14b30:	mov	r0, #0
   14b34:	bx	lr
   14b38:	ldr	ip, [pc, #128]	; 14bc0 <__assert_fail@plt+0x3220>
   14b3c:	cmp	r3, ip
   14b40:	bne	14a50 <__assert_fail@plt+0x30b0>
   14b44:	mov	r0, #5
   14b48:	bx	lr
   14b4c:	ldr	ip, [pc, #112]	; 14bc4 <__assert_fail@plt+0x3224>
   14b50:	cmp	r3, ip
   14b54:	bne	14a40 <__assert_fail@plt+0x30a0>
   14b58:	mov	r0, #4
   14b5c:	bx	lr
   14b60:	ldr	ip, [pc, #96]	; 14bc8 <__assert_fail@plt+0x3228>
   14b64:	cmp	r3, ip
   14b68:	bne	14a60 <__assert_fail@plt+0x30c0>
   14b6c:	mov	r0, #6
   14b70:	bx	lr
   14b74:	cmp	r0, #10
   14b78:	bne	14ac0 <__assert_fail@plt+0x3120>
   14b7c:	b	14adc <__assert_fail@plt+0x313c>
   14b80:	mov	r0, #11
   14b84:	bx	lr
   14b88:	mov	r0, #8
   14b8c:	bx	lr
   14b90:	mov	r0, #10
   14b94:	bx	lr
   14b98:	mov	r0, #9
   14b9c:	bx	lr
   14ba0:	mov	r0, #7
   14ba4:	bx	lr
   14ba8:	andeq	r3, r3, r0, ror r5
   14bac:	smlabteq	r1, r6, r2, r0
   14bb0:	eoreq	fp, r3, ip, asr sl
   14bb4:	strdeq	fp, [r3], -ip
   14bb8:	andeq	r0, r1, r4, asr #13
   14bbc:	eoreq	fp, r3, sp, asr #4
   14bc0:	strdeq	fp, [fp], -sp	; <UNPREDICTABLE>
   14bc4:	andeq	r0, r1, r6, asr #20
   14bc8:	andeq	lr, fp, sp, asr #1
   14bcc:	push	{r4, r5, r6, lr}
   14bd0:	cmp	r2, #0
   14bd4:	ldr	r5, [sp, #16]
   14bd8:	beq	14c14 <__assert_fail@plt+0x3274>
   14bdc:	mov	r2, #0
   14be0:	str	r2, [r3]
   14be4:	str	r2, [r5]
   14be8:	ldr	r4, [r3]
   14bec:	ldrb	r3, [r1]
   14bf0:	add	r4, r0, r4
   14bf4:	cmp	r3, #0
   14bf8:	beq	14c48 <__assert_fail@plt+0x32a8>
   14bfc:	mov	r0, r4
   14c00:	bl	11904 <strpbrk@plt>
   14c04:	cmp	r0, #0
   14c08:	beq	14c48 <__assert_fail@plt+0x32a8>
   14c0c:	sub	r0, r0, r4
   14c10:	b	14c50 <__assert_fail@plt+0x32b0>
   14c14:	ldr	r2, [r5]
   14c18:	ldr	r4, [r3]
   14c1c:	add	r4, r4, r2
   14c20:	str	r4, [r3]
   14c24:	ldrb	r2, [r0, r4]
   14c28:	cmp	r2, #0
   14c2c:	beq	14c5c <__assert_fail@plt+0x32bc>
   14c30:	add	r4, r4, #1
   14c34:	str	r4, [r3]
   14c38:	ldrb	r3, [r1]
   14c3c:	add	r4, r0, r4
   14c40:	cmp	r3, #0
   14c44:	bne	14bfc <__assert_fail@plt+0x325c>
   14c48:	mov	r0, r4
   14c4c:	bl	117a8 <strlen@plt>
   14c50:	str	r0, [r5]
   14c54:	mov	r0, #1
   14c58:	pop	{r4, r5, r6, pc}
   14c5c:	mov	r0, r2
   14c60:	pop	{r4, r5, r6, pc}
   14c64:	push	{r4, r5, lr}
   14c68:	mov	r2, #5
   14c6c:	sub	sp, sp, #20
   14c70:	mov	r4, r0
   14c74:	mov	r5, r1
   14c78:	mov	r0, #0
   14c7c:	ldr	r1, [pc, #48]	; 14cb4 <__assert_fail@plt+0x3314>
   14c80:	bl	11628 <dcgettext@plt>
   14c84:	ldr	ip, [pc, #44]	; 14cb8 <__assert_fail@plt+0x3318>
   14c88:	ldr	r1, [pc, #44]	; 14cbc <__assert_fail@plt+0x331c>
   14c8c:	ldr	r2, [pc, #44]	; 14cc0 <__assert_fail@plt+0x3320>
   14c90:	mov	r3, r5
   14c94:	stmib	sp, {r1, ip}
   14c98:	str	r2, [sp]
   14c9c:	ldr	r2, [pc, #32]	; 14cc4 <__assert_fail@plt+0x3324>
   14ca0:	mov	r1, r0
   14ca4:	mov	r0, r4
   14ca8:	bl	117c0 <fprintf@plt>
   14cac:	add	sp, sp, #20
   14cb0:	pop	{r4, r5, pc}
   14cb4:	andeq	r3, r3, r8, asr #13
   14cb8:	andeq	r3, r3, r0, asr #15
   14cbc:	ldrdeq	r3, [r3], -r8
   14cc0:	andeq	r3, r3, r0, asr r5
   14cc4:	muleq	r3, r8, r7
   14cc8:	ldrb	r3, [r0]
   14ccc:	cmp	r3, #47	; 0x2f
   14cd0:	bne	14ce0 <__assert_fail@plt+0x3340>
   14cd4:	ldrb	r3, [r0, #1]!
   14cd8:	cmp	r3, #47	; 0x2f
   14cdc:	beq	14cd4 <__assert_fail@plt+0x3334>
   14ce0:	cmp	r3, #0
   14ce4:	bxeq	lr
   14ce8:	mov	r2, #0
   14cec:	push	{lr}		; (str lr, [sp, #-4]!)
   14cf0:	mov	ip, r2
   14cf4:	mov	r1, r0
   14cf8:	mov	lr, #1
   14cfc:	cmp	r3, #47	; 0x2f
   14d00:	moveq	r2, lr
   14d04:	beq	14d14 <__assert_fail@plt+0x3374>
   14d08:	cmp	r2, #0
   14d0c:	movne	r0, r1
   14d10:	movne	r2, ip
   14d14:	ldrb	r3, [r1, #1]!
   14d18:	cmp	r3, #0
   14d1c:	bne	14cfc <__assert_fail@plt+0x335c>
   14d20:	pop	{pc}		; (ldr pc, [sp], #4)
   14d24:	push	{r4, lr}
   14d28:	mov	r4, r0
   14d2c:	bl	117a8 <strlen@plt>
   14d30:	cmp	r0, #1
   14d34:	popls	{r4, pc}
   14d38:	sub	r3, r0, #1
   14d3c:	add	r2, r4, r3
   14d40:	ldrb	r1, [r4, r3]
   14d44:	cmp	r1, #47	; 0x2f
   14d48:	popne	{r4, pc}
   14d4c:	cmp	r3, #1
   14d50:	beq	14d64 <__assert_fail@plt+0x33c4>
   14d54:	ldrb	r1, [r2, #-1]!
   14d58:	sub	r0, r3, #1
   14d5c:	cmp	r1, #47	; 0x2f
   14d60:	beq	14d6c <__assert_fail@plt+0x33cc>
   14d64:	mov	r0, r3
   14d68:	pop	{r4, pc}
   14d6c:	mov	r3, r0
   14d70:	b	14d4c <__assert_fail@plt+0x33ac>
   14d74:	ldr	r3, [pc, #4]	; 14d80 <__assert_fail@plt+0x33e0>
   14d78:	str	r0, [r3]
   14d7c:	bx	lr
   14d80:	muleq	r4, r8, r2
   14d84:	ldr	r3, [pc, #4]	; 14d90 <__assert_fail@plt+0x33f0>
   14d88:	strb	r0, [r3, #4]
   14d8c:	bx	lr
   14d90:	muleq	r4, r8, r2
   14d94:	ldr	r3, [pc, #192]	; 14e5c <__assert_fail@plt+0x34bc>
   14d98:	push	{r4, r5, r6, lr}
   14d9c:	sub	sp, sp, #8
   14da0:	ldr	r0, [r3]
   14da4:	bl	31904 <__assert_fail@plt+0x1ff64>
   14da8:	cmp	r0, #0
   14dac:	beq	14dd0 <__assert_fail@plt+0x3430>
   14db0:	ldr	r4, [pc, #168]	; 14e60 <__assert_fail@plt+0x34c0>
   14db4:	ldrb	r3, [r4, #4]
   14db8:	cmp	r3, #0
   14dbc:	beq	14dec <__assert_fail@plt+0x344c>
   14dc0:	bl	117d8 <__errno_location@plt>
   14dc4:	ldr	r3, [r0]
   14dc8:	cmp	r3, #32
   14dcc:	bne	14dec <__assert_fail@plt+0x344c>
   14dd0:	ldr	r3, [pc, #140]	; 14e64 <__assert_fail@plt+0x34c4>
   14dd4:	ldr	r0, [r3]
   14dd8:	bl	31904 <__assert_fail@plt+0x1ff64>
   14ddc:	cmp	r0, #0
   14de0:	bne	14e34 <__assert_fail@plt+0x3494>
   14de4:	add	sp, sp, #8
   14de8:	pop	{r4, r5, r6, pc}
   14dec:	mov	r2, #5
   14df0:	ldr	r1, [pc, #112]	; 14e68 <__assert_fail@plt+0x34c8>
   14df4:	mov	r0, #0
   14df8:	bl	11628 <dcgettext@plt>
   14dfc:	ldr	r4, [r4]
   14e00:	cmp	r4, #0
   14e04:	mov	r5, r0
   14e08:	beq	14e40 <__assert_fail@plt+0x34a0>
   14e0c:	bl	117d8 <__errno_location@plt>
   14e10:	ldr	r6, [r0]
   14e14:	mov	r0, r4
   14e18:	bl	1bb54 <__assert_fail@plt+0xa1b4>
   14e1c:	mov	r1, r6
   14e20:	str	r5, [sp]
   14e24:	ldr	r2, [pc, #64]	; 14e6c <__assert_fail@plt+0x34cc>
   14e28:	mov	r3, r0
   14e2c:	mov	r0, #0
   14e30:	bl	116d0 <error@plt>
   14e34:	ldr	r3, [pc, #52]	; 14e70 <__assert_fail@plt+0x34d0>
   14e38:	ldr	r0, [r3]
   14e3c:	bl	115c8 <_exit@plt>
   14e40:	bl	117d8 <__errno_location@plt>
   14e44:	mov	r3, r5
   14e48:	ldr	r2, [pc, #36]	; 14e74 <__assert_fail@plt+0x34d4>
   14e4c:	ldr	r1, [r0]
   14e50:	mov	r0, r4
   14e54:	bl	116d0 <error@plt>
   14e58:	b	14e34 <__assert_fail@plt+0x3494>
   14e5c:	andeq	r5, r4, ip, lsl r2
   14e60:	muleq	r4, r8, r2
   14e64:	andeq	r5, r4, r8, lsl r2
   14e68:	andeq	r3, r3, r8, lsl #16
   14e6c:	andeq	r3, r3, r4, lsl r8
   14e70:			; <UNDEFINED> instruction: 0x000451bc
   14e74:	andeq	r3, r3, r8, lsl r8
   14e78:	push	{r1, r2, r3}
   14e7c:	push	{lr}		; (str lr, [sp, #-4]!)
   14e80:	sub	sp, sp, #8
   14e84:	ldr	r1, [sp, #12]
   14e88:	ands	r2, r1, #64	; 0x40
   14e8c:	addne	r3, sp, #16
   14e90:	ldrne	r2, [sp, #16]
   14e94:	strne	r3, [sp, #4]
   14e98:	bl	116e8 <open64@plt>
   14e9c:	bl	1cf60 <__assert_fail@plt+0xb5c0>
   14ea0:	add	sp, sp, #8
   14ea4:	pop	{lr}		; (ldr lr, [sp], #4)
   14ea8:	add	sp, sp, #12
   14eac:	bx	lr
   14eb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14eb4:	vpush	{d8-d9}
   14eb8:	mov	r4, r3
   14ebc:	ands	r3, r3, #32
   14ec0:	mov	r9, r1
   14ec4:	sub	sp, sp, #100	; 0x64
   14ec8:	mov	r8, r0
   14ecc:	str	r3, [sp, #28]
   14ed0:	and	r3, r4, #3
   14ed4:	str	r3, [sp]
   14ed8:	movne	r3, #1024	; 0x400
   14edc:	moveq	r3, #1000	; 0x3e8
   14ee0:	str	r2, [sp, #4]
   14ee4:	strne	r3, [sp, #32]
   14ee8:	movne	r2, #1024	; 0x400
   14eec:	moveq	r2, #1000	; 0x3e8
   14ef0:	strne	r3, [sp, #20]
   14ef4:	streq	r3, [sp, #32]
   14ef8:	streq	r3, [sp, #20]
   14efc:	mov	r3, #0
   14f00:	ldrd	r6, [sp, #152]	; 0x98
   14f04:	strd	r2, [sp, #8]
   14f08:	bl	118d4 <localeconv@plt>
   14f0c:	ldr	r3, [sp, #4]
   14f10:	add	r3, r3, #644	; 0x284
   14f14:	str	r3, [sp, #16]
   14f18:	ldr	fp, [r0]
   14f1c:	mov	r5, r0
   14f20:	mov	r0, fp
   14f24:	bl	117a8 <strlen@plt>
   14f28:	ldr	sl, [r5, #4]
   14f2c:	ldr	r1, [pc, #676]	; 151d8 <__assert_fail@plt+0x3838>
   14f30:	mov	r2, r0
   14f34:	sub	r0, r0, #1
   14f38:	cmp	r0, #16
   14f3c:	movcs	r2, #1
   14f40:	str	r2, [sp, #40]	; 0x28
   14f44:	mov	r0, sl
   14f48:	movcc	r2, fp
   14f4c:	movcs	r2, r1
   14f50:	str	r2, [sp, #44]	; 0x2c
   14f54:	bl	117a8 <strlen@plt>
   14f58:	ldr	r3, [sp, #16]
   14f5c:	ldr	r2, [pc, #632]	; 151dc <__assert_fail@plt+0x383c>
   14f60:	add	r3, r3, #3
   14f64:	str	r3, [sp]
   14f68:	ldr	r5, [r5, #8]
   14f6c:	cmp	r0, #16
   14f70:	movhi	sl, r2
   14f74:	ldrd	r2, [sp, #160]	; 0xa0
   14f78:	str	sl, [sp, #24]
   14f7c:	cmp	r3, r7
   14f80:	cmpeq	r2, r6
   14f84:	bhi	151e8 <__assert_fail@plt+0x3848>
   14f88:	mov	r0, r6
   14f8c:	mov	r1, r7
   14f90:	bl	32498 <__assert_fail@plt+0x20af8>
   14f94:	orrs	r3, r2, r3
   14f98:	bne	14fdc <__assert_fail@plt+0x363c>
   14f9c:	ldrd	r2, [sp, #160]	; 0xa0
   14fa0:	mov	r0, r6
   14fa4:	mov	r1, r7
   14fa8:	bl	32498 <__assert_fail@plt+0x20af8>
   14fac:	mov	r2, r0
   14fb0:	mul	r0, r0, r9
   14fb4:	umull	sl, fp, r2, r8
   14fb8:	mla	r0, r8, r1, r0
   14fbc:	mov	r3, r1
   14fc0:	add	fp, r0, fp
   14fc4:	mov	r1, fp
   14fc8:	mov	r0, sl
   14fcc:	bl	32498 <__assert_fail@plt+0x20af8>
   14fd0:	cmp	r9, r1
   14fd4:	cmpeq	r8, r0
   14fd8:	beq	1588c <__assert_fail@plt+0x3eec>
   14fdc:	mov	r0, r6
   14fe0:	mov	r1, r7
   14fe4:	bl	32424 <__assert_fail@plt+0x20a84>
   14fe8:	vmov	d9, r0, r1
   14fec:	ldrd	r0, [sp, #160]	; 0xa0
   14ff0:	bl	32424 <__assert_fail@plt+0x20a84>
   14ff4:	vmov	d7, r0, r1
   14ff8:	mov	r0, r8
   14ffc:	mov	r1, r9
   15000:	vdiv.f64	d8, d9, d7
   15004:	bl	32424 <__assert_fail@plt+0x20a84>
   15008:	ands	r8, r4, #16
   1500c:	vmov	d7, r0, r1
   15010:	vmul.f64	d8, d8, d7
   15014:	beq	15618 <__assert_fail@plt+0x3c78>
   15018:	vldr	s15, [sp, #32]
   1501c:	vcvt.f64.s32	d7, s15
   15020:	vmul.f64	d6, d7, d7
   15024:	vcmpe.f64	d8, d6
   15028:	vmrs	APSR_nzcv, fpscr
   1502c:	blt	15b68 <__assert_fail@plt+0x41c8>
   15030:	vmul.f64	d5, d7, d6
   15034:	vcmpe.f64	d8, d5
   15038:	vmrs	APSR_nzcv, fpscr
   1503c:	blt	15b74 <__assert_fail@plt+0x41d4>
   15040:	vmul.f64	d6, d7, d5
   15044:	vcmpe.f64	d8, d6
   15048:	vmrs	APSR_nzcv, fpscr
   1504c:	blt	15b7c <__assert_fail@plt+0x41dc>
   15050:	vmul.f64	d5, d7, d6
   15054:	vcmpe.f64	d8, d5
   15058:	vmrs	APSR_nzcv, fpscr
   1505c:	blt	15b88 <__assert_fail@plt+0x41e8>
   15060:	vmul.f64	d6, d7, d5
   15064:	vcmpe.f64	d8, d6
   15068:	vmrs	APSR_nzcv, fpscr
   1506c:	blt	15b90 <__assert_fail@plt+0x41f0>
   15070:	vmul.f64	d5, d7, d6
   15074:	vcmpe.f64	d8, d5
   15078:	vmrs	APSR_nzcv, fpscr
   1507c:	blt	15b9c <__assert_fail@plt+0x41fc>
   15080:	vmul.f64	d6, d7, d5
   15084:	vcmpe.f64	d8, d6
   15088:	vmrs	APSR_nzcv, fpscr
   1508c:	blt	15ba4 <__assert_fail@plt+0x4204>
   15090:	mov	r9, #8
   15094:	and	r8, r4, #3
   15098:	cmp	r8, #1
   1509c:	vdiv.f64	d9, d8, d6
   150a0:	beq	1573c <__assert_fail@plt+0x3d9c>
   150a4:	vldr	d7, [pc, #284]	; 151c8 <__assert_fail@plt+0x3828>
   150a8:	vcmpe.f64	d9, d7
   150ac:	vmrs	APSR_nzcv, fpscr
   150b0:	vmovpl	r2, r3, d9
   150b4:	bpl	15108 <__assert_fail@plt+0x3768>
   150b8:	vmov	r0, r1, d9
   150bc:	bl	324e8 <__assert_fail@plt+0x20b48>
   150c0:	cmp	r8, #0
   150c4:	mov	r6, r0
   150c8:	mov	r7, r1
   150cc:	movne	r0, #0
   150d0:	bne	150ec <__assert_fail@plt+0x374c>
   150d4:	bl	32424 <__assert_fail@plt+0x20a84>
   150d8:	vmov	d7, r0, r1
   150dc:	vcmp.f64	d7, d9
   150e0:	vmrs	APSR_nzcv, fpscr
   150e4:	movne	r0, #1
   150e8:	moveq	r0, #0
   150ec:	adds	r2, r6, r0
   150f0:	adc	r3, r7, #0
   150f4:	mov	r0, r2
   150f8:	mov	r1, r3
   150fc:	bl	32424 <__assert_fail@plt+0x20a84>
   15100:	mov	r2, r0
   15104:	mov	r3, r1
   15108:	ldr	r6, [sp, #4]
   1510c:	ldr	r1, [pc, #204]	; 151e0 <__assert_fail@plt+0x3840>
   15110:	mov	r0, r6
   15114:	bl	118ec <sprintf@plt>
   15118:	ldr	r3, [sp, #40]	; 0x28
   1511c:	mov	r0, r6
   15120:	add	r6, r3, #1
   15124:	bl	117a8 <strlen@plt>
   15128:	ands	r3, r4, #32
   1512c:	cmp	r3, #0
   15130:	movne	r3, #1
   15134:	moveq	r3, #2
   15138:	add	r3, r3, r6
   1513c:	cmp	r0, r3
   15140:	mov	r7, r0
   15144:	bls	15780 <__assert_fail@plt+0x3de0>
   15148:	vldr	d7, [pc, #128]	; 151d0 <__assert_fail@plt+0x3830>
   1514c:	vmul.f64	d9, d9, d7
   15150:	vldr	d7, [pc, #112]	; 151c8 <__assert_fail@plt+0x3828>
   15154:	vcmpe.f64	d9, d7
   15158:	vmrs	APSR_nzcv, fpscr
   1515c:	bpl	15198 <__assert_fail@plt+0x37f8>
   15160:	vmov	r0, r1, d9
   15164:	bl	324e8 <__assert_fail@plt+0x20b48>
   15168:	and	r3, r4, #3
   1516c:	cmp	r3, #0
   15170:	mov	r6, r0
   15174:	mov	r7, r1
   15178:	movne	r0, #0
   1517c:	beq	15ab4 <__assert_fail@plt+0x4114>
   15180:	adds	r2, r6, r0
   15184:	adc	r3, r7, #0
   15188:	mov	r0, r2
   1518c:	mov	r1, r3
   15190:	bl	32424 <__assert_fail@plt+0x20a84>
   15194:	vmov	d9, r0, r1
   15198:	vldr	d7, [pc, #48]	; 151d0 <__assert_fail@plt+0x3830>
   1519c:	ldr	r7, [sp, #4]
   151a0:	ldr	r1, [pc, #60]	; 151e4 <__assert_fail@plt+0x3844>
   151a4:	mov	r0, r7
   151a8:	vdiv.f64	d6, d9, d7
   151ac:	mov	r6, #0
   151b0:	vmov	r2, r3, d6
   151b4:	bl	118ec <sprintf@plt>
   151b8:	mov	r0, r7
   151bc:	bl	117a8 <strlen@plt>
   151c0:	mov	r7, r0
   151c4:	b	1565c <__assert_fail@plt+0x3cbc>
   151c8:	andeq	r0, r0, r0
   151cc:	mvnsmi	r0, #0
   151d0:	andeq	r0, r0, r0
   151d4:	eormi	r0, r4, r0
   151d8:	andeq	r3, r3, ip, lsr r8
   151dc:	andeq	r2, r3, ip, lsl #31
   151e0:	andeq	r3, r3, r8, asr #16
   151e4:	andeq	r3, r3, r0, asr #16
   151e8:	orrs	r3, r6, r7
   151ec:	beq	14fdc <__assert_fail@plt+0x363c>
   151f0:	mov	r2, r6
   151f4:	mov	r3, r7
   151f8:	ldrd	r0, [sp, #160]	; 0xa0
   151fc:	bl	32498 <__assert_fail@plt+0x20af8>
   15200:	orrs	r3, r2, r3
   15204:	bne	14fdc <__assert_fail@plt+0x363c>
   15208:	mov	r2, r6
   1520c:	mov	r3, r7
   15210:	ldrd	r0, [sp, #160]	; 0xa0
   15214:	bl	32498 <__assert_fail@plt+0x20af8>
   15218:	mov	sl, r0
   1521c:	mov	fp, r1
   15220:	mov	r2, r0
   15224:	mov	r3, r1
   15228:	mov	r0, r8
   1522c:	mov	r1, r9
   15230:	bl	32498 <__assert_fail@plt+0x20af8>
   15234:	mov	r1, #10
   15238:	umull	r6, r7, r2, r1
   1523c:	mla	r7, r1, r3, r7
   15240:	mov	r2, sl
   15244:	mov	r3, fp
   15248:	mov	r0, r6
   1524c:	mov	r1, r7
   15250:	bl	32498 <__assert_fail@plt+0x20af8>
   15254:	mov	r0, r8
   15258:	mov	r1, r9
   1525c:	strd	sl, [sp, #32]
   15260:	lsls	r8, r2, #1
   15264:	adc	r9, r3, r3
   15268:	mov	r2, sl
   1526c:	mov	r3, fp
   15270:	bl	32498 <__assert_fail@plt+0x20af8>
   15274:	ldrd	r2, [sp, #32]
   15278:	mov	sl, r0
   1527c:	mov	fp, r1
   15280:	mov	r0, r6
   15284:	mov	r1, r7
   15288:	bl	32498 <__assert_fail@plt+0x20af8>
   1528c:	ldrd	r2, [sp, #32]
   15290:	cmp	r3, r9
   15294:	cmpeq	r2, r8
   15298:	mov	r6, r0
   1529c:	bls	15a98 <__assert_fail@plt+0x40f8>
   152a0:	orrs	r3, r8, r9
   152a4:	movne	r8, #1
   152a8:	moveq	r8, #0
   152ac:	ands	r3, r4, #16
   152b0:	str	r3, [sp, #32]
   152b4:	beq	159a4 <__assert_fail@plt+0x4004>
   152b8:	ldrd	r2, [sp, #8]
   152bc:	cmp	fp, r3
   152c0:	cmpeq	sl, r2
   152c4:	bcc	15aa4 <__assert_fail@plt+0x4104>
   152c8:	mov	r0, sl
   152cc:	mov	r1, fp
   152d0:	bl	32498 <__assert_fail@plt+0x20af8>
   152d4:	ldr	r1, [sp, #20]
   152d8:	add	r2, r2, r2, lsl #2
   152dc:	add	r7, r6, r2, lsl #1
   152e0:	mov	r0, r7
   152e4:	bl	31e80 <__assert_fail@plt+0x204e0>
   152e8:	asr	r6, r8, #1
   152ec:	ldrd	r2, [sp, #8]
   152f0:	mov	r0, sl
   152f4:	add	r9, r6, r1, lsl #1
   152f8:	mov	r1, fp
   152fc:	bl	32498 <__assert_fail@plt+0x20af8>
   15300:	mov	sl, r0
   15304:	mov	fp, r1
   15308:	mov	r0, r7
   1530c:	ldr	r1, [sp, #20]
   15310:	bl	31c94 <__assert_fail@plt+0x202f4>
   15314:	ldr	r3, [sp, #20]
   15318:	cmp	r3, r9
   1531c:	mov	r6, r0
   15320:	bls	15adc <__assert_fail@plt+0x413c>
   15324:	cmn	r8, r9
   15328:	movne	r8, #1
   1532c:	moveq	r8, #0
   15330:	ldrd	r2, [sp, #8]
   15334:	cmp	fp, r3
   15338:	cmpeq	sl, r2
   1533c:	bcc	15c50 <__assert_fail@plt+0x42b0>
   15340:	mov	r0, sl
   15344:	mov	r1, fp
   15348:	bl	32498 <__assert_fail@plt+0x20af8>
   1534c:	ldr	r1, [sp, #20]
   15350:	add	r2, r2, r2, lsl #2
   15354:	add	r7, r6, r2, lsl #1
   15358:	mov	r0, r7
   1535c:	bl	31e80 <__assert_fail@plt+0x204e0>
   15360:	asr	r6, r8, #1
   15364:	ldrd	r2, [sp, #8]
   15368:	mov	r0, sl
   1536c:	add	r9, r6, r1, lsl #1
   15370:	mov	r1, fp
   15374:	bl	32498 <__assert_fail@plt+0x20af8>
   15378:	mov	sl, r0
   1537c:	mov	fp, r1
   15380:	mov	r0, r7
   15384:	ldr	r1, [sp, #20]
   15388:	bl	31c94 <__assert_fail@plt+0x202f4>
   1538c:	ldr	r3, [sp, #20]
   15390:	cmp	r3, r9
   15394:	mov	r6, r0
   15398:	mov	r7, r0
   1539c:	bls	15af4 <__assert_fail@plt+0x4154>
   153a0:	cmn	r8, r9
   153a4:	movne	r8, #1
   153a8:	moveq	r8, #0
   153ac:	ldrd	r2, [sp, #8]
   153b0:	cmp	fp, r3
   153b4:	cmpeq	sl, r2
   153b8:	bcc	15c58 <__assert_fail@plt+0x42b8>
   153bc:	mov	r0, sl
   153c0:	mov	r1, fp
   153c4:	bl	32498 <__assert_fail@plt+0x20af8>
   153c8:	ldr	r9, [sp, #20]
   153cc:	mov	r1, r9
   153d0:	add	r2, r2, r2, lsl #2
   153d4:	add	r6, r7, r2, lsl #1
   153d8:	mov	r0, r6
   153dc:	bl	31e80 <__assert_fail@plt+0x204e0>
   153e0:	asr	r7, r8, #1
   153e4:	ldrd	r2, [sp, #8]
   153e8:	mov	r0, sl
   153ec:	add	r7, r7, r1, lsl #1
   153f0:	mov	r1, fp
   153f4:	bl	32498 <__assert_fail@plt+0x20af8>
   153f8:	mov	sl, r0
   153fc:	mov	fp, r1
   15400:	mov	r0, r6
   15404:	mov	r1, r9
   15408:	bl	31c94 <__assert_fail@plt+0x202f4>
   1540c:	cmp	r9, r7
   15410:	mov	r6, r0
   15414:	mov	r9, r0
   15418:	bls	15b0c <__assert_fail@plt+0x416c>
   1541c:	cmn	r8, r7
   15420:	movne	r8, #1
   15424:	moveq	r8, #0
   15428:	ldrd	r2, [sp, #8]
   1542c:	cmp	fp, r3
   15430:	cmpeq	sl, r2
   15434:	bcc	15c60 <__assert_fail@plt+0x42c0>
   15438:	mov	r0, sl
   1543c:	mov	r1, fp
   15440:	bl	32498 <__assert_fail@plt+0x20af8>
   15444:	ldr	r1, [sp, #20]
   15448:	asr	r7, r8, #1
   1544c:	add	r2, r2, r2, lsl #2
   15450:	add	r6, r9, r2, lsl #1
   15454:	mov	r0, r6
   15458:	bl	31e80 <__assert_fail@plt+0x204e0>
   1545c:	ldrd	r2, [sp, #8]
   15460:	mov	r0, sl
   15464:	add	r7, r7, r1, lsl #1
   15468:	mov	r1, fp
   1546c:	bl	32498 <__assert_fail@plt+0x20af8>
   15470:	ldr	r9, [sp, #20]
   15474:	mov	sl, r0
   15478:	mov	fp, r1
   1547c:	mov	r0, r6
   15480:	mov	r1, r9
   15484:	bl	31c94 <__assert_fail@plt+0x202f4>
   15488:	cmp	r9, r7
   1548c:	mov	r6, r0
   15490:	mov	r9, r0
   15494:	bls	15b24 <__assert_fail@plt+0x4184>
   15498:	cmn	r8, r7
   1549c:	movne	r8, #1
   154a0:	moveq	r8, #0
   154a4:	ldrd	r2, [sp, #8]
   154a8:	cmp	fp, r3
   154ac:	cmpeq	sl, r2
   154b0:	bcc	15c98 <__assert_fail@plt+0x42f8>
   154b4:	mov	r0, sl
   154b8:	mov	r1, fp
   154bc:	bl	32498 <__assert_fail@plt+0x20af8>
   154c0:	ldr	r1, [sp, #20]
   154c4:	asr	r7, r8, #1
   154c8:	add	r2, r2, r2, lsl #2
   154cc:	add	r6, r9, r2, lsl #1
   154d0:	mov	r0, r6
   154d4:	bl	31e80 <__assert_fail@plt+0x204e0>
   154d8:	ldrd	r2, [sp, #8]
   154dc:	mov	r0, sl
   154e0:	add	r7, r7, r1, lsl #1
   154e4:	mov	r1, fp
   154e8:	bl	32498 <__assert_fail@plt+0x20af8>
   154ec:	ldr	r9, [sp, #20]
   154f0:	mov	sl, r0
   154f4:	mov	fp, r1
   154f8:	mov	r0, r6
   154fc:	mov	r1, r9
   15500:	bl	31c94 <__assert_fail@plt+0x202f4>
   15504:	cmp	r9, r7
   15508:	mov	r6, r0
   1550c:	mov	r9, r0
   15510:	bls	15b3c <__assert_fail@plt+0x419c>
   15514:	cmn	r8, r7
   15518:	movne	r8, #1
   1551c:	moveq	r8, #0
   15520:	ldrd	r2, [sp, #8]
   15524:	cmp	r3, fp
   15528:	cmpeq	r2, sl
   1552c:	bhi	15ca0 <__assert_fail@plt+0x4300>
   15530:	mov	r0, sl
   15534:	mov	r1, fp
   15538:	bl	32498 <__assert_fail@plt+0x20af8>
   1553c:	ldr	r1, [sp, #20]
   15540:	asr	r7, r8, #1
   15544:	add	r2, r2, r2, lsl #2
   15548:	add	r6, r9, r2, lsl #1
   1554c:	mov	r0, r6
   15550:	bl	31e80 <__assert_fail@plt+0x204e0>
   15554:	ldrd	r2, [sp, #8]
   15558:	mov	r0, sl
   1555c:	add	r7, r7, r1, lsl #1
   15560:	mov	r1, fp
   15564:	bl	32498 <__assert_fail@plt+0x20af8>
   15568:	ldr	r9, [sp, #20]
   1556c:	mov	sl, r0
   15570:	mov	fp, r1
   15574:	mov	r0, r6
   15578:	mov	r1, r9
   1557c:	bl	31c94 <__assert_fail@plt+0x202f4>
   15580:	cmp	r9, r7
   15584:	mov	r6, r0
   15588:	bls	15b54 <__assert_fail@plt+0x41b4>
   1558c:	cmn	r8, r7
   15590:	movne	r8, #1
   15594:	moveq	r8, #0
   15598:	mov	r9, #6
   1559c:	cmp	fp, #0
   155a0:	cmpeq	sl, #9
   155a4:	bhi	15c44 <__assert_fail@plt+0x42a4>
   155a8:	and	r3, r4, #3
   155ac:	cmp	r3, #1
   155b0:	beq	15bd8 <__assert_fail@plt+0x4238>
   155b4:	cmp	r8, #0
   155b8:	and	r3, r4, #3
   155bc:	clz	r3, r3
   155c0:	lsr	r3, r3, #5
   155c4:	moveq	r3, #0
   155c8:	cmp	r3, #0
   155cc:	beq	15bb0 <__assert_fail@plt+0x4210>
   155d0:	add	r6, r6, #1
   155d4:	cmp	r6, #10
   155d8:	beq	15c28 <__assert_fail@plt+0x4288>
   155dc:	add	r7, r6, #48	; 0x30
   155e0:	uxtb	r3, r7
   155e4:	ldr	r2, [sp, #16]
   155e8:	ldr	r0, [sp, #4]
   155ec:	add	r7, r2, #2
   155f0:	ldr	r2, [sp, #40]	; 0x28
   155f4:	strb	r3, [r0, #646]	; 0x286
   155f8:	sub	r1, r7, r2
   155fc:	str	r1, [sp, #16]
   15600:	mov	r0, r1
   15604:	mov	r8, #0
   15608:	ldr	r1, [sp, #44]	; 0x2c
   1560c:	bl	115d4 <memcpy@plt>
   15610:	mov	r6, r8
   15614:	b	159b0 <__assert_fail@plt+0x4010>
   15618:	and	r9, r4, #3
   1561c:	cmp	r9, #1
   15620:	beq	15634 <__assert_fail@plt+0x3c94>
   15624:	vldr	d7, [pc, #860]	; 15988 <__assert_fail@plt+0x3fe8>
   15628:	vcmpe.f64	d8, d7
   1562c:	vmrs	APSR_nzcv, fpscr
   15630:	bmi	15848 <__assert_fail@plt+0x3ea8>
   15634:	ldr	r6, [sp, #4]
   15638:	vmov	r2, r3, d8
   1563c:	ldr	r1, [pc, #852]	; 15998 <__assert_fail@plt+0x3ff8>
   15640:	mov	r0, r6
   15644:	bl	118ec <sprintf@plt>
   15648:	mov	r0, r6
   1564c:	bl	117a8 <strlen@plt>
   15650:	mov	r6, #0
   15654:	mvn	r9, #0
   15658:	mov	r7, r0
   1565c:	ldr	r3, [sp]
   15660:	mov	r2, r7
   15664:	sub	r8, r3, r7
   15668:	mov	r0, r8
   1566c:	ldr	r1, [sp, #4]
   15670:	bl	1158c <memmove@plt>
   15674:	sub	r7, r7, r6
   15678:	add	r7, r8, r7
   1567c:	tst	r4, #4
   15680:	bne	157b4 <__assert_fail@plt+0x3e14>
   15684:	tst	r4, #128	; 0x80
   15688:	beq	15720 <__assert_fail@plt+0x3d80>
   1568c:	cmn	r9, #1
   15690:	beq	15898 <__assert_fail@plt+0x3ef8>
   15694:	and	r3, r4, #256	; 0x100
   15698:	orrs	r2, r9, r3
   1569c:	beq	15720 <__assert_fail@plt+0x3d80>
   156a0:	tst	r4, #64	; 0x40
   156a4:	ldrne	r1, [sp, #4]
   156a8:	addne	r2, r1, #648	; 0x288
   156ac:	strne	r2, [sp]
   156b0:	movne	r2, #32
   156b4:	strbne	r2, [r1, #647]	; 0x287
   156b8:	cmp	r9, #0
   156bc:	beq	15ca8 <__assert_fail@plt+0x4308>
   156c0:	ldr	r2, [sp, #28]
   156c4:	ldr	r0, [sp]
   156c8:	cmp	r2, #0
   156cc:	cmpeq	r9, #1
   156d0:	ldr	r2, [sp]
   156d4:	ldrne	r1, [pc, #704]	; 1599c <__assert_fail@plt+0x3ffc>
   156d8:	moveq	r1, #107	; 0x6b
   156dc:	add	r2, r2, #1
   156e0:	ldrbne	r1, [r1, r9]
   156e4:	cmp	r3, #0
   156e8:	streq	r2, [sp]
   156ec:	strb	r1, [r0]
   156f0:	beq	15720 <__assert_fail@plt+0x3d80>
   156f4:	ldr	r3, [sp, #28]
   156f8:	cmp	r9, #0
   156fc:	cmpne	r3, #0
   15700:	movne	r2, r0
   15704:	movne	r3, #105	; 0x69
   15708:	strbne	r3, [r2, #1]
   1570c:	addne	r2, r2, #2
   15710:	mov	r3, #66	; 0x42
   15714:	strb	r3, [r2]
   15718:	add	r3, r2, #1
   1571c:	str	r3, [sp]
   15720:	ldr	r2, [sp]
   15724:	mov	r3, #0
   15728:	mov	r0, r8
   1572c:	strb	r3, [r2]
   15730:	add	sp, sp, #100	; 0x64
   15734:	vpop	{d8-d9}
   15738:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1573c:	ldr	r6, [sp, #4]
   15740:	vmov	r2, r3, d9
   15744:	ldr	r1, [pc, #596]	; 159a0 <__assert_fail@plt+0x4000>
   15748:	mov	r0, r6
   1574c:	bl	118ec <sprintf@plt>
   15750:	ldr	r3, [sp, #40]	; 0x28
   15754:	mov	r0, r6
   15758:	add	r6, r3, #1
   1575c:	bl	117a8 <strlen@plt>
   15760:	ands	r3, r4, #32
   15764:	cmp	r3, #0
   15768:	movne	r3, #1
   1576c:	moveq	r3, #2
   15770:	add	r3, r3, r6
   15774:	cmp	r3, r0
   15778:	mov	r7, r0
   1577c:	bcc	15ad0 <__assert_fail@plt+0x4130>
   15780:	tst	r4, #8
   15784:	beq	1565c <__assert_fail@plt+0x3cbc>
   15788:	ldr	r3, [sp, #4]
   1578c:	add	r3, r3, r7
   15790:	ldrb	r3, [r3, #-1]
   15794:	cmp	r3, #48	; 0x30
   15798:	bne	1565c <__assert_fail@plt+0x3cbc>
   1579c:	vldr	d7, [pc, #492]	; 15990 <__assert_fail@plt+0x3ff0>
   157a0:	and	r3, r4, #3
   157a4:	cmp	r3, #1
   157a8:	vmul.f64	d9, d9, d7
   157ac:	beq	15198 <__assert_fail@plt+0x37f8>
   157b0:	b	15150 <__assert_fail@plt+0x37b0>
   157b4:	ldr	r0, [sp, #24]
   157b8:	bl	117a8 <strlen@plt>
   157bc:	sub	r6, r7, r8
   157c0:	mov	r1, r8
   157c4:	mov	r2, r6
   157c8:	mvn	sl, #0
   157cc:	mov	fp, r0
   157d0:	add	r0, sp, #52	; 0x34
   157d4:	bl	115d4 <memcpy@plt>
   157d8:	ldr	r8, [sp, #24]
   157dc:	b	157e4 <__assert_fail@plt+0x3e44>
   157e0:	bl	115d4 <memcpy@plt>
   157e4:	ldrb	r3, [r5]
   157e8:	cmp	r3, #0
   157ec:	beq	15800 <__assert_fail@plt+0x3e60>
   157f0:	cmp	r3, #255	; 0xff
   157f4:	movne	sl, r3
   157f8:	moveq	sl, r6
   157fc:	add	r5, r5, #1
   15800:	cmp	sl, r6
   15804:	movcs	sl, r6
   15808:	sub	r3, r7, sl
   1580c:	sub	r6, r6, sl
   15810:	add	r2, sp, #52	; 0x34
   15814:	add	r1, r2, r6
   15818:	mov	r0, r3
   1581c:	mov	r2, sl
   15820:	sub	r7, r3, fp
   15824:	bl	115d4 <memcpy@plt>
   15828:	cmp	r6, #0
   1582c:	mov	r2, fp
   15830:	mov	r1, r8
   15834:	mov	r3, r0
   15838:	mov	r0, r7
   1583c:	bne	157e0 <__assert_fail@plt+0x3e40>
   15840:	mov	r8, r3
   15844:	b	15684 <__assert_fail@plt+0x3ce4>
   15848:	vmov	r0, r1, d8
   1584c:	bl	324e8 <__assert_fail@plt+0x20b48>
   15850:	cmp	r9, #0
   15854:	mov	r6, r0
   15858:	mov	r7, r1
   1585c:	bne	15878 <__assert_fail@plt+0x3ed8>
   15860:	bl	32424 <__assert_fail@plt+0x20a84>
   15864:	vmov	d7, r0, r1
   15868:	vcmp.f64	d7, d8
   1586c:	vmrs	APSR_nzcv, fpscr
   15870:	movne	r8, #1
   15874:	moveq	r8, #0
   15878:	adds	r0, r6, r8
   1587c:	adc	r1, r7, #0
   15880:	bl	32424 <__assert_fail@plt+0x20a84>
   15884:	vmov	d8, r0, r1
   15888:	b	15634 <__assert_fail@plt+0x3c94>
   1588c:	mov	r8, #0
   15890:	mov	r6, r8
   15894:	b	152ac <__assert_fail@plt+0x390c>
   15898:	ldrd	r2, [sp, #160]	; 0xa0
   1589c:	cmp	r3, #0
   158a0:	cmpeq	r2, #1
   158a4:	bls	15bc8 <__assert_fail@plt+0x4228>
   158a8:	ldrd	r6, [sp, #8]
   158ac:	mov	r1, r3
   158b0:	mov	r0, r2
   158b4:	cmp	r1, r7
   158b8:	cmpeq	r0, r6
   158bc:	bls	15bd0 <__assert_fail@plt+0x4230>
   158c0:	mul	r1, r6, r7
   158c4:	umull	r2, r3, r6, r6
   158c8:	add	r3, r3, r1, lsl #1
   158cc:	ldrd	r0, [sp, #160]	; 0xa0
   158d0:	cmp	r1, r3
   158d4:	cmpeq	r0, r2
   158d8:	bls	15bf0 <__assert_fail@plt+0x4250>
   158dc:	mul	ip, r2, r7
   158e0:	umull	r0, r1, r2, r6
   158e4:	mla	r3, r6, r3, ip
   158e8:	mov	lr, r6
   158ec:	add	r1, r3, r1
   158f0:	ldrd	r2, [sp, #160]	; 0xa0
   158f4:	cmp	r3, r1
   158f8:	cmpeq	r2, r0
   158fc:	bls	15bf8 <__assert_fail@plt+0x4258>
   15900:	mul	ip, r0, r7
   15904:	umull	r2, r3, r0, r6
   15908:	mla	r1, r6, r1, ip
   1590c:	add	r3, r1, r3
   15910:	ldrd	r0, [sp, #160]	; 0xa0
   15914:	cmp	r1, r3
   15918:	cmpeq	r0, r2
   1591c:	bls	15c00 <__assert_fail@plt+0x4260>
   15920:	mul	ip, r2, r7
   15924:	umull	r0, r1, r2, r6
   15928:	mla	r3, r6, r3, ip
   1592c:	add	r1, r3, r1
   15930:	ldrd	r2, [sp, #160]	; 0xa0
   15934:	cmp	r3, r1
   15938:	cmpeq	r2, r0
   1593c:	bls	15c08 <__assert_fail@plt+0x4268>
   15940:	mul	ip, r0, r7
   15944:	umull	r2, r3, r0, r6
   15948:	mla	r1, r6, r1, ip
   1594c:	add	r3, r1, r3
   15950:	ldrd	r0, [sp, #160]	; 0xa0
   15954:	cmp	r1, r3
   15958:	cmpeq	r0, r2
   1595c:	bls	15c10 <__assert_fail@plt+0x4270>
   15960:	mul	ip, r2, r7
   15964:	umull	r0, r1, r2, r6
   15968:	mla	r3, r6, r3, ip
   1596c:	add	r1, r3, r1
   15970:	ldrd	r2, [sp, #160]	; 0xa0
   15974:	cmp	r3, r1
   15978:	cmpeq	r2, r0
   1597c:	movhi	r9, #8
   15980:	movls	r9, #7
   15984:	b	15694 <__assert_fail@plt+0x3cf4>
   15988:	andeq	r0, r0, r0
   1598c:	mvnsmi	r0, #0
   15990:	andeq	r0, r0, r0
   15994:	eormi	r0, r4, r0
   15998:	andeq	r3, r3, r0, asr #16
   1599c:	andeq	r3, r3, ip, lsl r8
   159a0:	andeq	r3, r3, r8, asr #16
   159a4:	ldr	r3, [sp]
   159a8:	mvn	r9, #0
   159ac:	str	r3, [sp, #16]
   159b0:	and	r3, r4, #3
   159b4:	cmp	r3, #1
   159b8:	beq	15a1c <__assert_fail@plt+0x407c>
   159bc:	and	r3, r4, #3
   159c0:	cmp	r3, #0
   159c4:	bne	15a44 <__assert_fail@plt+0x40a4>
   159c8:	add	r7, r6, r8
   159cc:	cmp	r7, #0
   159d0:	ble	15a44 <__assert_fail@plt+0x40a4>
   159d4:	adds	sl, sl, #1
   159d8:	adc	fp, fp, #0
   159dc:	ands	r3, r4, #16
   159e0:	cmp	r3, #0
   159e4:	beq	15a44 <__assert_fail@plt+0x40a4>
   159e8:	ldrd	r2, [sp, #8]
   159ec:	cmp	fp, r3
   159f0:	cmpeq	sl, r2
   159f4:	bne	15a44 <__assert_fail@plt+0x40a4>
   159f8:	tst	r4, #8
   159fc:	add	r9, r9, #1
   15a00:	beq	15c68 <__assert_fail@plt+0x42c8>
   15a04:	ldr	r2, [sp, #16]
   15a08:	mov	r3, #49	; 0x31
   15a0c:	sub	r8, r2, #1
   15a10:	strb	r3, [r2, #-1]
   15a14:	mov	r7, r2
   15a18:	b	1567c <__assert_fail@plt+0x3cdc>
   15a1c:	and	r2, sl, #1
   15a20:	adds	r2, r2, r8
   15a24:	mov	r3, #0
   15a28:	adc	r3, r3, r8, asr #31
   15a2c:	orr	r7, r2, r3
   15a30:	cmp	r7, #0
   15a34:	moveq	r7, r6
   15a38:	addne	r7, r6, #1
   15a3c:	cmp	r7, #5
   15a40:	bgt	159d4 <__assert_fail@plt+0x4034>
   15a44:	ldr	r8, [sp, #16]
   15a48:	mov	r6, #10
   15a4c:	mov	r7, #0
   15a50:	mov	r0, sl
   15a54:	mov	r1, fp
   15a58:	mov	r2, r6
   15a5c:	mov	r3, r7
   15a60:	bl	32498 <__assert_fail@plt+0x20af8>
   15a64:	mov	r0, sl
   15a68:	mov	r1, fp
   15a6c:	mov	r3, r7
   15a70:	add	r2, r2, #48	; 0x30
   15a74:	strb	r2, [r8, #-1]!
   15a78:	mov	r2, r6
   15a7c:	bl	32498 <__assert_fail@plt+0x20af8>
   15a80:	mov	sl, r0
   15a84:	mov	fp, r1
   15a88:	orrs	r3, sl, fp
   15a8c:	bne	15a50 <__assert_fail@plt+0x40b0>
   15a90:	ldr	r7, [sp, #16]
   15a94:	b	1567c <__assert_fail@plt+0x3cdc>
   15a98:	movcc	r8, #3
   15a9c:	movcs	r8, #2
   15aa0:	b	152ac <__assert_fail@plt+0x390c>
   15aa4:	ldr	r3, [sp]
   15aa8:	mov	r9, #0
   15aac:	str	r3, [sp, #16]
   15ab0:	b	159b0 <__assert_fail@plt+0x4010>
   15ab4:	bl	32424 <__assert_fail@plt+0x20a84>
   15ab8:	vmov	d7, r0, r1
   15abc:	vcmp.f64	d7, d9
   15ac0:	vmrs	APSR_nzcv, fpscr
   15ac4:	movne	r0, #1
   15ac8:	moveq	r0, #0
   15acc:	b	15180 <__assert_fail@plt+0x37e0>
   15ad0:	vldr	d7, [pc, #480]	; 15cb8 <__assert_fail@plt+0x4318>
   15ad4:	vmul.f64	d9, d9, d7
   15ad8:	b	15198 <__assert_fail@plt+0x37f8>
   15adc:	mov	r2, r3
   15ae0:	add	r3, r8, r9
   15ae4:	cmp	r2, r3
   15ae8:	movcs	r8, #2
   15aec:	movcc	r8, #3
   15af0:	b	15330 <__assert_fail@plt+0x3990>
   15af4:	mov	r2, r3
   15af8:	add	r3, r8, r9
   15afc:	cmp	r2, r3
   15b00:	movcs	r8, #2
   15b04:	movcc	r8, #3
   15b08:	b	153ac <__assert_fail@plt+0x3a0c>
   15b0c:	ldr	r3, [sp, #20]
   15b10:	add	r7, r8, r7
   15b14:	cmp	r3, r7
   15b18:	movcs	r8, #2
   15b1c:	movcc	r8, #3
   15b20:	b	15428 <__assert_fail@plt+0x3a88>
   15b24:	ldr	r3, [sp, #20]
   15b28:	add	r7, r8, r7
   15b2c:	cmp	r3, r7
   15b30:	movcs	r8, #2
   15b34:	movcc	r8, #3
   15b38:	b	154a4 <__assert_fail@plt+0x3b04>
   15b3c:	ldr	r3, [sp, #20]
   15b40:	add	r7, r8, r7
   15b44:	cmp	r3, r7
   15b48:	movcs	r8, #2
   15b4c:	movcc	r8, #3
   15b50:	b	15520 <__assert_fail@plt+0x3b80>
   15b54:	add	r7, r8, r7
   15b58:	cmp	r9, r7
   15b5c:	movcs	r8, #2
   15b60:	movcc	r8, #3
   15b64:	b	15598 <__assert_fail@plt+0x3bf8>
   15b68:	vmov.f64	d6, d7
   15b6c:	mov	r9, #1
   15b70:	b	15094 <__assert_fail@plt+0x36f4>
   15b74:	mov	r9, #2
   15b78:	b	15094 <__assert_fail@plt+0x36f4>
   15b7c:	vmov.f64	d6, d5
   15b80:	mov	r9, #3
   15b84:	b	15094 <__assert_fail@plt+0x36f4>
   15b88:	mov	r9, #4
   15b8c:	b	15094 <__assert_fail@plt+0x36f4>
   15b90:	vmov.f64	d6, d5
   15b94:	mov	r9, #5
   15b98:	b	15094 <__assert_fail@plt+0x36f4>
   15b9c:	mov	r9, #6
   15ba0:	b	15094 <__assert_fail@plt+0x36f4>
   15ba4:	vmov.f64	d6, d5
   15ba8:	mov	r9, #7
   15bac:	b	15094 <__assert_fail@plt+0x36f4>
   15bb0:	cmp	r6, #0
   15bb4:	bne	155dc <__assert_fail@plt+0x3c3c>
   15bb8:	tst	r4, #8
   15bbc:	bne	15c18 <__assert_fail@plt+0x4278>
   15bc0:	mov	r3, #48	; 0x30
   15bc4:	b	155e4 <__assert_fail@plt+0x3c44>
   15bc8:	mov	r9, #0
   15bcc:	b	15694 <__assert_fail@plt+0x3cf4>
   15bd0:	mov	r9, #1
   15bd4:	b	15694 <__assert_fail@plt+0x3cf4>
   15bd8:	and	r3, r6, #1
   15bdc:	add	r3, r3, r8
   15be0:	cmp	r3, #2
   15be4:	movle	r3, #0
   15be8:	movgt	r3, #1
   15bec:	b	155c8 <__assert_fail@plt+0x3c28>
   15bf0:	mov	r9, #2
   15bf4:	b	15694 <__assert_fail@plt+0x3cf4>
   15bf8:	mov	r9, #3
   15bfc:	b	15694 <__assert_fail@plt+0x3cf4>
   15c00:	mov	r9, #4
   15c04:	b	15694 <__assert_fail@plt+0x3cf4>
   15c08:	mov	r9, #5
   15c0c:	b	15694 <__assert_fail@plt+0x3cf4>
   15c10:	mov	r9, #6
   15c14:	b	15694 <__assert_fail@plt+0x3cf4>
   15c18:	ldr	r3, [sp]
   15c1c:	mov	r6, #0
   15c20:	str	r3, [sp, #16]
   15c24:	b	159b0 <__assert_fail@plt+0x4010>
   15c28:	adds	sl, sl, #1
   15c2c:	adc	fp, fp, #0
   15c30:	cmp	fp, #0
   15c34:	cmpeq	sl, #10
   15c38:	mov	r8, #0
   15c3c:	moveq	r6, r8
   15c40:	bne	15bb8 <__assert_fail@plt+0x4218>
   15c44:	ldr	r3, [sp]
   15c48:	str	r3, [sp, #16]
   15c4c:	b	159b0 <__assert_fail@plt+0x4010>
   15c50:	mov	r9, #1
   15c54:	b	1559c <__assert_fail@plt+0x3bfc>
   15c58:	mov	r9, #2
   15c5c:	b	1559c <__assert_fail@plt+0x3bfc>
   15c60:	mov	r9, #3
   15c64:	b	1559c <__assert_fail@plt+0x3bfc>
   15c68:	ldr	ip, [sp, #40]	; 0x28
   15c6c:	ldr	r1, [sp, #16]
   15c70:	mvn	r3, ip
   15c74:	add	r3, r1, r3
   15c78:	mov	r2, #48	; 0x30
   15c7c:	strb	r2, [r1, #-1]
   15c80:	mov	r0, r3
   15c84:	ldr	r1, [sp, #44]	; 0x2c
   15c88:	mov	r2, ip
   15c8c:	str	r3, [sp, #16]
   15c90:	bl	115d4 <memcpy@plt>
   15c94:	b	15a04 <__assert_fail@plt+0x4064>
   15c98:	mov	r9, #4
   15c9c:	b	1559c <__assert_fail@plt+0x3bfc>
   15ca0:	mov	r9, #5
   15ca4:	b	1559c <__assert_fail@plt+0x3bfc>
   15ca8:	cmp	r3, #0
   15cac:	ldrne	r2, [sp]
   15cb0:	bne	15710 <__assert_fail@plt+0x3d70>
   15cb4:	b	15720 <__assert_fail@plt+0x3d80>
   15cb8:	andeq	r0, r0, r0
   15cbc:	eormi	r0, r4, r0
   15cc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cc4:	subs	r4, r0, #0
   15cc8:	sub	sp, sp, #20
   15ccc:	mov	r8, r1
   15cd0:	mov	r7, r2
   15cd4:	beq	15de4 <__assert_fail@plt+0x4444>
   15cd8:	ldrb	r3, [r4]
   15cdc:	ldr	r5, [pc, #384]	; 15e64 <__assert_fail@plt+0x44c4>
   15ce0:	cmp	r3, #39	; 0x27
   15ce4:	addeq	r4, r4, #1
   15ce8:	mov	r3, #4
   15cec:	add	r2, r5, #12
   15cf0:	add	r1, r5, #20
   15cf4:	mov	r0, r4
   15cf8:	moveq	r9, #164	; 0xa4
   15cfc:	moveq	fp, #420	; 0x1a4
   15d00:	moveq	sl, #388	; 0x184
   15d04:	moveq	r6, #4
   15d08:	movne	r9, #160	; 0xa0
   15d0c:	movne	fp, #416	; 0x1a0
   15d10:	movne	sl, #384	; 0x180
   15d14:	movne	r6, #0
   15d18:	bl	31434 <__assert_fail@plt+0x1fa94>
   15d1c:	cmp	r0, #0
   15d20:	blt	15d80 <__assert_fail@plt+0x43e0>
   15d24:	add	r5, r5, r0, lsl #2
   15d28:	mov	r1, #0
   15d2c:	ldr	ip, [r5, #12]
   15d30:	mov	r0, #1
   15d34:	mov	r2, r0
   15d38:	orr	r6, r6, ip
   15d3c:	mov	r3, r1
   15d40:	str	r0, [r7]
   15d44:	str	r1, [r7, #4]
   15d48:	mov	r0, #0
   15d4c:	str	r6, [r8]
   15d50:	orrs	r3, r2, r3
   15d54:	bne	15d78 <__assert_fail@plt+0x43d8>
   15d58:	ldr	r0, [pc, #264]	; 15e68 <__assert_fail@plt+0x44c8>
   15d5c:	bl	116f4 <getenv@plt>
   15d60:	mov	r3, #0
   15d64:	cmp	r0, #0
   15d68:	movne	r2, #512	; 0x200
   15d6c:	moveq	r2, #1024	; 0x400
   15d70:	mov	r0, #4
   15d74:	strd	r2, [r7]
   15d78:	add	sp, sp, #20
   15d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d80:	ldr	r2, [pc, #228]	; 15e6c <__assert_fail@plt+0x44cc>
   15d84:	mov	r3, r7
   15d88:	str	r2, [sp]
   15d8c:	add	r1, sp, #12
   15d90:	mov	r2, #0
   15d94:	mov	r0, r4
   15d98:	bl	1e028 <__assert_fail@plt+0xc688>
   15d9c:	cmp	r0, #0
   15da0:	bne	15e28 <__assert_fail@plt+0x4488>
   15da4:	ldrb	r3, [r4]
   15da8:	sub	r3, r3, #48	; 0x30
   15dac:	cmp	r3, #9
   15db0:	bls	15ddc <__assert_fail@plt+0x443c>
   15db4:	ldr	r2, [sp, #12]
   15db8:	cmp	r4, r2
   15dbc:	bne	15dcc <__assert_fail@plt+0x442c>
   15dc0:	b	15e38 <__assert_fail@plt+0x4498>
   15dc4:	cmp	r2, r4
   15dc8:	beq	15e38 <__assert_fail@plt+0x4498>
   15dcc:	ldrb	r3, [r4, #1]!
   15dd0:	sub	r3, r3, #48	; 0x30
   15dd4:	cmp	r3, #9
   15dd8:	bhi	15dc4 <__assert_fail@plt+0x4424>
   15ddc:	ldrd	r2, [r7]
   15de0:	b	15d48 <__assert_fail@plt+0x43a8>
   15de4:	ldr	r0, [pc, #132]	; 15e70 <__assert_fail@plt+0x44d0>
   15de8:	bl	116f4 <getenv@plt>
   15dec:	subs	r4, r0, #0
   15df0:	bne	15cd8 <__assert_fail@plt+0x4338>
   15df4:	ldr	r0, [pc, #120]	; 15e74 <__assert_fail@plt+0x44d4>
   15df8:	bl	116f4 <getenv@plt>
   15dfc:	subs	r4, r0, #0
   15e00:	bne	15cd8 <__assert_fail@plt+0x4338>
   15e04:	ldr	r0, [pc, #92]	; 15e68 <__assert_fail@plt+0x44c8>
   15e08:	bl	116f4 <getenv@plt>
   15e0c:	mov	r3, #0
   15e10:	mov	r6, #0
   15e14:	cmp	r0, #0
   15e18:	movne	r2, #512	; 0x200
   15e1c:	moveq	r2, #1024	; 0x400
   15e20:	strd	r2, [r7]
   15e24:	b	15d48 <__assert_fail@plt+0x43a8>
   15e28:	mov	r3, #0
   15e2c:	str	r3, [r8]
   15e30:	ldrd	r2, [r7]
   15e34:	b	15d50 <__assert_fail@plt+0x43b0>
   15e38:	ldrb	r3, [r2, #-1]
   15e3c:	cmp	r3, #66	; 0x42
   15e40:	beq	15e4c <__assert_fail@plt+0x44ac>
   15e44:	mov	r6, r9
   15e48:	b	15ddc <__assert_fail@plt+0x443c>
   15e4c:	ldrb	r3, [r2, #-2]
   15e50:	cmp	r3, #105	; 0x69
   15e54:	movne	r6, sl
   15e58:	bne	15ddc <__assert_fail@plt+0x443c>
   15e5c:	mov	r9, fp
   15e60:	b	15e44 <__assert_fail@plt+0x44a4>
   15e64:	andeq	r3, r3, ip, lsl r8
   15e68:	andeq	r3, r3, r8, ror #16
   15e6c:	andeq	r3, r3, r8, ror r8
   15e70:	andeq	r3, r3, r0, asr r8
   15e74:	andeq	r3, r3, ip, asr r8
   15e78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e7c:	add	fp, sp, #32
   15e80:	lsrs	ip, r2, #30
   15e84:	sub	sp, sp, #28
   15e88:	movne	ip, #1
   15e8c:	moveq	ip, #0
   15e90:	str	r2, [fp, #-52]	; 0xffffffcc
   15e94:	lsls	r2, r2, #2
   15e98:	str	r0, [fp, #-44]	; 0xffffffd4
   15e9c:	str	r3, [fp, #-60]	; 0xffffffc4
   15ea0:	bmi	15eac <__assert_fail@plt+0x450c>
   15ea4:	cmp	ip, #0
   15ea8:	beq	15eb8 <__assert_fail@plt+0x4518>
   15eac:	mov	r0, #0
   15eb0:	sub	sp, fp, #32
   15eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15eb8:	cmp	r2, #4016	; 0xfb0
   15ebc:	mov	r6, r1
   15ec0:	bls	16084 <__assert_fail@plt+0x46e4>
   15ec4:	mov	r0, r2
   15ec8:	bl	31adc <__assert_fail@plt+0x2013c>
   15ecc:	mov	r9, r0
   15ed0:	cmp	r9, #0
   15ed4:	beq	15eac <__assert_fail@plt+0x450c>
   15ed8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15edc:	cmp	r3, #2
   15ee0:	mov	r3, #1
   15ee4:	str	r3, [r9, #4]
   15ee8:	bls	15fb8 <__assert_fail@plt+0x4618>
   15eec:	bl	11778 <__ctype_b_loc@plt>
   15ef0:	mov	r5, #0
   15ef4:	mov	r7, #2
   15ef8:	add	r3, r9, #8
   15efc:	str	r6, [fp, #-48]	; 0xffffffd0
   15f00:	str	r3, [fp, #-40]	; 0xffffffd8
   15f04:	ldr	sl, [r0]
   15f08:	mov	r8, sl
   15f0c:	mov	sl, r9
   15f10:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15f14:	ldrb	r9, [r3, #1]!
   15f18:	str	r3, [fp, #-48]	; 0xffffffd0
   15f1c:	sxth	r3, r9
   15f20:	str	r3, [fp, #-56]	; 0xffffffc8
   15f24:	lsl	r0, r3, #1
   15f28:	ldrh	r0, [r8, r0]
   15f2c:	tst	r0, #256	; 0x100
   15f30:	beq	15f58 <__assert_fail@plt+0x45b8>
   15f34:	bl	11748 <__ctype_tolower_loc@plt>
   15f38:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15f3c:	ldr	r0, [r0]
   15f40:	ldrb	r9, [r0, r3, lsl #2]
   15f44:	b	15f58 <__assert_fail@plt+0x45b8>
   15f48:	cmp	r5, #0
   15f4c:	beq	1609c <__assert_fail@plt+0x46fc>
   15f50:	ldr	r3, [sl, r5, lsl #2]
   15f54:	sub	r5, r5, r3
   15f58:	ldrb	r3, [r6, r5]
   15f5c:	mov	r2, r3
   15f60:	sxth	r4, r3
   15f64:	lsl	r3, r4, #1
   15f68:	ldrh	r3, [r8, r3]
   15f6c:	tst	r3, #256	; 0x100
   15f70:	beq	15f80 <__assert_fail@plt+0x45e0>
   15f74:	bl	11748 <__ctype_tolower_loc@plt>
   15f78:	ldr	r3, [r0]
   15f7c:	ldr	r2, [r3, r4, lsl #2]
   15f80:	cmp	r2, r9
   15f84:	bne	15f48 <__assert_fail@plt+0x45a8>
   15f88:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15f8c:	add	r5, r5, #1
   15f90:	sub	r3, r7, r5
   15f94:	str	r3, [r2]
   15f98:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15f9c:	add	r7, r7, #1
   15fa0:	cmp	r3, r7
   15fa4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15fa8:	add	r3, r3, #4
   15fac:	str	r3, [fp, #-40]	; 0xffffffd8
   15fb0:	bne	15f10 <__assert_fail@plt+0x4570>
   15fb4:	mov	r9, sl
   15fb8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15fbc:	mov	r8, #0
   15fc0:	str	r8, [r3]
   15fc4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15fc8:	mov	r7, r3
   15fcc:	ldrb	r5, [r3]
   15fd0:	cmp	r5, #0
   15fd4:	beq	16070 <__assert_fail@plt+0x46d0>
   15fd8:	bl	11778 <__ctype_b_loc@plt>
   15fdc:	ldrb	r3, [r6, r8]
   15fe0:	sxth	r4, r3
   15fe4:	lsl	r1, r4, #1
   15fe8:	ldr	r2, [r0]
   15fec:	ldrh	r1, [r2, r1]
   15ff0:	tst	r1, #256	; 0x100
   15ff4:	moveq	r4, r3
   15ff8:	beq	16010 <__assert_fail@plt+0x4670>
   15ffc:	str	r2, [fp, #-40]	; 0xffffffd8
   16000:	bl	11748 <__ctype_tolower_loc@plt>
   16004:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16008:	ldr	r3, [r0]
   1600c:	ldr	r4, [r3, r4, lsl #2]
   16010:	sxth	sl, r5
   16014:	lsl	r1, sl, #1
   16018:	ldrh	r2, [r2, r1]
   1601c:	tst	r2, #256	; 0x100
   16020:	moveq	r3, r5
   16024:	beq	16034 <__assert_fail@plt+0x4694>
   16028:	bl	11748 <__ctype_tolower_loc@plt>
   1602c:	ldr	r2, [r0]
   16030:	ldr	r3, [r2, sl, lsl #2]
   16034:	cmp	r4, r3
   16038:	beq	160a8 <__assert_fail@plt+0x4708>
   1603c:	cmp	r8, #0
   16040:	ldrne	r3, [r9, r8, lsl #2]
   16044:	ldrne	r2, [fp, #-44]	; 0xffffffd4
   16048:	ldreq	r3, [fp, #-44]	; 0xffffffd4
   1604c:	ldrbeq	r5, [r7, #1]
   16050:	addne	r2, r2, r3
   16054:	addeq	r3, r3, #1
   16058:	strne	r2, [fp, #-44]	; 0xffffffd4
   1605c:	subne	r8, r8, r3
   16060:	streq	r3, [fp, #-44]	; 0xffffffd4
   16064:	addeq	r7, r7, #1
   16068:	cmp	r5, #0
   1606c:	bne	15fd8 <__assert_fail@plt+0x4638>
   16070:	mov	r0, r9
   16074:	bl	31b2c <__assert_fail@plt+0x2018c>
   16078:	mov	r0, #1
   1607c:	sub	sp, fp, #32
   16080:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16084:	add	r3, r2, #29
   16088:	bic	r3, r3, #7
   1608c:	sub	sp, sp, r3
   16090:	add	r1, sp, #15
   16094:	bic	r9, r1, #15
   16098:	b	15ed0 <__assert_fail@plt+0x4530>
   1609c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   160a0:	str	r7, [r3]
   160a4:	b	15f98 <__assert_fail@plt+0x45f8>
   160a8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   160ac:	add	r8, r8, #1
   160b0:	cmp	r3, r8
   160b4:	add	r3, r7, #1
   160b8:	ldrbne	r5, [r7, #1]
   160bc:	movne	r7, r3
   160c0:	bne	15fd0 <__assert_fail@plt+0x4630>
   160c4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   160c8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   160cc:	mov	r0, r9
   160d0:	str	r2, [r3]
   160d4:	bl	31b2c <__assert_fail@plt+0x2018c>
   160d8:	mov	r0, #1
   160dc:	b	1607c <__assert_fail@plt+0x46dc>
   160e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160e4:	add	fp, sp, #32
   160e8:	sub	sp, sp, #228	; 0xe4
   160ec:	str	r0, [fp, #-256]	; 0xffffff00
   160f0:	mov	r0, r1
   160f4:	mov	r4, r1
   160f8:	str	r2, [fp, #-260]	; 0xfffffefc
   160fc:	bl	17740 <__assert_fail@plt+0x5da0>
   16100:	mov	r3, #44	; 0x2c
   16104:	str	r0, [fp, #-248]	; 0xffffff08
   16108:	umull	r0, r1, r0, r3
   1610c:	adds	r2, r1, #0
   16110:	movne	r2, #1
   16114:	cmp	r0, #0
   16118:	blt	16124 <__assert_fail@plt+0x4784>
   1611c:	cmp	r2, #0
   16120:	beq	16130 <__assert_fail@plt+0x4790>
   16124:	mov	r0, #0
   16128:	sub	sp, fp, #32
   1612c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16130:	ldr	r2, [fp, #-248]	; 0xffffff08
   16134:	mul	r0, r3, r2
   16138:	cmp	r0, #4016	; 0xfb0
   1613c:	bls	16470 <__assert_fail@plt+0x4ad0>
   16140:	bl	31adc <__assert_fail@plt+0x2013c>
   16144:	mov	sl, r0
   16148:	cmp	sl, #0
   1614c:	beq	16124 <__assert_fail@plt+0x4784>
   16150:	ldr	r3, [fp, #-248]	; 0xffffff08
   16154:	add	r6, sl, #16
   16158:	mov	r8, #1
   1615c:	add	r7, r3, r3, lsl #2
   16160:	mov	r9, #0
   16164:	add	r7, sl, r7, lsl #3
   16168:	str	r4, [fp, #-188]	; 0xffffff44
   1616c:	str	r9, [fp, #-196]	; 0xffffff3c
   16170:	strb	r9, [fp, #-204]	; 0xffffff34
   16174:	str	r9, [fp, #-200]	; 0xffffff38
   16178:	strb	r9, [fp, #-192]	; 0xffffff40
   1617c:	ldrb	r3, [fp, #-204]	; 0xffffff34
   16180:	cmp	r3, #0
   16184:	bne	16684 <__assert_fail@plt+0x4ce4>
   16188:	ldrb	r3, [r4]
   1618c:	ldr	r1, [pc, #2060]	; 169a0 <__assert_fail@plt+0x5000>
   16190:	and	r2, r3, #31
   16194:	lsr	r3, r3, #5
   16198:	ldr	r3, [r1, r3, lsl #2]
   1619c:	lsr	r3, r3, r2
   161a0:	tst	r3, #1
   161a4:	beq	16670 <__assert_fail@plt+0x4cd0>
   161a8:	str	r8, [fp, #-184]	; 0xffffff48
   161ac:	ldrb	r4, [r4]
   161b0:	strb	r8, [fp, #-180]	; 0xffffff4c
   161b4:	strb	r8, [fp, #-192]	; 0xffffff40
   161b8:	cmp	r4, #0
   161bc:	str	r4, [fp, #-176]	; 0xffffff50
   161c0:	bne	166f0 <__assert_fail@plt+0x4d50>
   161c4:	ldr	r3, [fp, #-248]	; 0xffffff08
   161c8:	str	r8, [r7, #4]
   161cc:	cmp	r3, #2
   161d0:	movhi	r5, sl
   161d4:	addhi	r8, r7, #8
   161d8:	movhi	r6, #2
   161dc:	bls	162c0 <__assert_fail@plt+0x4920>
   161e0:	ldrb	r3, [r5, #48]	; 0x30
   161e4:	cmp	r3, #0
   161e8:	bne	16264 <__assert_fail@plt+0x48c4>
   161ec:	ldr	r9, [r5, #44]	; 0x2c
   161f0:	b	16204 <__assert_fail@plt+0x4864>
   161f4:	cmp	r4, #0
   161f8:	beq	16238 <__assert_fail@plt+0x4898>
   161fc:	ldr	r3, [r7, r4, lsl #2]
   16200:	sub	r4, r4, r3
   16204:	add	r3, r4, r4, lsl #2
   16208:	add	r2, sl, r3, lsl #3
   1620c:	ldr	r2, [r2, #4]
   16210:	cmp	r2, r9
   16214:	bne	161f4 <__assert_fail@plt+0x4854>
   16218:	ldr	r1, [sl, r3, lsl #3]
   1621c:	mov	r2, r9
   16220:	ldr	r0, [r5, #40]	; 0x28
   16224:	bl	1161c <memcmp@plt>
   16228:	cmp	r0, #0
   1622c:	beq	1629c <__assert_fail@plt+0x48fc>
   16230:	cmp	r4, #0
   16234:	bne	161fc <__assert_fail@plt+0x485c>
   16238:	str	r6, [r8]
   1623c:	mov	r4, #0
   16240:	b	162a8 <__assert_fail@plt+0x4908>
   16244:	ldr	r3, [r3, #12]
   16248:	ldr	r2, [r5, #52]	; 0x34
   1624c:	cmp	r2, r3
   16250:	beq	1629c <__assert_fail@plt+0x48fc>
   16254:	cmp	r4, #0
   16258:	beq	16238 <__assert_fail@plt+0x4898>
   1625c:	ldr	r3, [r7, r4, lsl #2]
   16260:	sub	r4, r4, r3
   16264:	add	r3, r4, r4, lsl #2
   16268:	add	r3, sl, r3, lsl #3
   1626c:	ldrb	r2, [r3, #8]
   16270:	cmp	r2, #0
   16274:	bne	16244 <__assert_fail@plt+0x48a4>
   16278:	ldr	r2, [r5, #44]	; 0x2c
   1627c:	ldr	r1, [r3, #4]
   16280:	cmp	r2, r1
   16284:	bne	16254 <__assert_fail@plt+0x48b4>
   16288:	ldr	r1, [r3]
   1628c:	ldr	r0, [r5, #40]	; 0x28
   16290:	bl	1161c <memcmp@plt>
   16294:	cmp	r0, #0
   16298:	bne	16254 <__assert_fail@plt+0x48b4>
   1629c:	add	r4, r4, #1
   162a0:	sub	r3, r6, r4
   162a4:	str	r3, [r8]
   162a8:	ldr	r3, [fp, #-248]	; 0xffffff08
   162ac:	add	r6, r6, #1
   162b0:	cmp	r3, r6
   162b4:	add	r5, r5, #40	; 0x28
   162b8:	add	r8, r8, #4
   162bc:	bne	161e0 <__assert_fail@plt+0x4840>
   162c0:	ldr	r1, [fp, #-256]	; 0xffffff00
   162c4:	mov	r2, #0
   162c8:	str	r1, [fp, #-132]	; 0xffffff7c
   162cc:	str	r1, [fp, #-76]	; 0xffffffb4
   162d0:	ldr	r1, [fp, #-260]	; 0xfffffefc
   162d4:	mov	r3, r2
   162d8:	cmp	r3, #0
   162dc:	str	r2, [r1]
   162e0:	strb	r2, [fp, #-148]	; 0xffffff6c
   162e4:	str	r2, [fp, #-144]	; 0xffffff70
   162e8:	strb	r2, [fp, #-136]	; 0xffffff78
   162ec:	strb	r2, [fp, #-92]	; 0xffffffa4
   162f0:	str	r2, [fp, #-88]	; 0xffffffa8
   162f4:	strb	r2, [fp, #-80]	; 0xffffffb0
   162f8:	mov	r9, r2
   162fc:	mov	r8, r2
   16300:	str	r2, [fp, #-140]	; 0xffffff74
   16304:	str	r2, [fp, #-84]	; 0xffffffac
   16308:	mov	r6, #1
   1630c:	str	r7, [fp, #-252]	; 0xffffff04
   16310:	bne	165a8 <__assert_fail@plt+0x4c08>
   16314:	ldr	r5, [fp, #-76]	; 0xffffffb4
   16318:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   1631c:	cmp	r3, #0
   16320:	bne	16358 <__assert_fail@plt+0x49b8>
   16324:	ldrb	r3, [r5]
   16328:	ldr	r1, [pc, #1648]	; 169a0 <__assert_fail@plt+0x5000>
   1632c:	and	r2, r3, #31
   16330:	lsr	r3, r3, #5
   16334:	ldr	r3, [r1, r3, lsl #2]
   16338:	lsr	r3, r3, r2
   1633c:	tst	r3, #1
   16340:	bne	16740 <__assert_fail@plt+0x4da0>
   16344:	sub	r0, fp, #88	; 0x58
   16348:	bl	11604 <mbsinit@plt>
   1634c:	cmp	r0, #0
   16350:	beq	16978 <__assert_fail@plt+0x4fd8>
   16354:	strb	r6, [fp, #-92]	; 0xffffffa4
   16358:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   1635c:	mov	r1, r0
   16360:	mov	r0, r5
   16364:	bl	1cf34 <__assert_fail@plt+0xb594>
   16368:	sub	r3, fp, #88	; 0x58
   1636c:	mov	r1, r5
   16370:	mov	r2, r0
   16374:	sub	r0, fp, #64	; 0x40
   16378:	bl	1f13c <__assert_fail@plt+0xd79c>
   1637c:	cmn	r0, #1
   16380:	str	r0, [fp, #-72]	; 0xffffffb8
   16384:	beq	167dc <__assert_fail@plt+0x4e3c>
   16388:	cmn	r0, #2
   1638c:	beq	163d4 <__assert_fail@plt+0x4a34>
   16390:	cmp	r0, #0
   16394:	beq	16900 <__assert_fail@plt+0x4f60>
   16398:	ldr	r4, [fp, #-64]	; 0xffffffc0
   1639c:	sub	r0, fp, #88	; 0x58
   163a0:	strb	r6, [fp, #-68]	; 0xffffffbc
   163a4:	bl	11604 <mbsinit@plt>
   163a8:	strb	r6, [fp, #-80]	; 0xffffffb0
   163ac:	cmp	r0, #0
   163b0:	strbne	r8, [fp, #-92]	; 0xffffffa4
   163b4:	cmp	r4, #0
   163b8:	mov	r3, r6
   163bc:	bne	163ec <__assert_fail@plt+0x4a4c>
   163c0:	mov	r0, sl
   163c4:	bl	31b2c <__assert_fail@plt+0x2018c>
   163c8:	mov	r0, #1
   163cc:	sub	sp, fp, #32
   163d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163d4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   163d8:	bl	117a8 <strlen@plt>
   163dc:	mov	r3, #0
   163e0:	strb	r8, [fp, #-68]	; 0xffffffbc
   163e4:	strb	r6, [fp, #-80]	; 0xffffffb0
   163e8:	str	r0, [fp, #-72]	; 0xffffffb8
   163ec:	ldr	r4, [fp, #-76]	; 0xffffffb4
   163f0:	sub	r2, fp, #60	; 0x3c
   163f4:	cmp	r4, r2
   163f8:	beq	165c8 <__assert_fail@plt+0x4c28>
   163fc:	ldr	r5, [fp, #-72]	; 0xffffffb8
   16400:	mov	r7, r4
   16404:	str	r4, [fp, #-244]	; 0xffffff0c
   16408:	cmp	r3, #0
   1640c:	str	r5, [fp, #-240]	; 0xffffff10
   16410:	strb	r3, [fp, #-236]	; 0xffffff14
   16414:	beq	16488 <__assert_fail@plt+0x4ae8>
   16418:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1641c:	bl	115f8 <towlower@plt>
   16420:	add	r3, r9, r9, lsl #2
   16424:	add	r3, sl, r3, lsl #3
   16428:	ldrb	r2, [r3, #8]
   1642c:	cmp	r2, #0
   16430:	str	r0, [fp, #-232]	; 0xffffff18
   16434:	beq	16490 <__assert_fail@plt+0x4af0>
   16438:	ldr	r3, [r3, #12]
   1643c:	cmp	r0, r3
   16440:	bne	1649c <__assert_fail@plt+0x4afc>
   16444:	ldr	r3, [fp, #-248]	; 0xffffff08
   16448:	add	r9, r9, #1
   1644c:	add	r5, r4, r5
   16450:	cmp	r3, r9
   16454:	str	r5, [fp, #-76]	; 0xffffffb4
   16458:	strb	r8, [fp, #-80]	; 0xffffffb0
   1645c:	bne	16318 <__assert_fail@plt+0x4978>
   16460:	ldr	r2, [fp, #-260]	; 0xfffffefc
   16464:	ldr	r3, [fp, #-132]	; 0xffffff7c
   16468:	str	r3, [r2]
   1646c:	b	163c0 <__assert_fail@plt+0x4a20>
   16470:	add	r3, r0, #29
   16474:	bic	r3, r3, #7
   16478:	sub	sp, sp, r3
   1647c:	add	r3, sp, #15
   16480:	bic	sl, r3, #15
   16484:	b	16148 <__assert_fail@plt+0x47a8>
   16488:	add	r3, r9, r9, lsl #2
   1648c:	add	r3, sl, r3, lsl #3
   16490:	ldr	r2, [r3, #4]
   16494:	cmp	r2, r5
   16498:	beq	167c0 <__assert_fail@plt+0x4e20>
   1649c:	cmp	r9, #0
   164a0:	beq	16778 <__assert_fail@plt+0x4dd8>
   164a4:	ldr	r3, [fp, #-252]	; 0xffffff04
   164a8:	ldr	r5, [r3, r9, lsl #2]
   164ac:	cmp	r5, #0
   164b0:	sub	r9, r9, r5
   164b4:	beq	1659c <__assert_fail@plt+0x4bfc>
   164b8:	ldrb	r3, [fp, #-136]	; 0xffffff78
   164bc:	cmp	r3, #0
   164c0:	bne	16570 <__assert_fail@plt+0x4bd0>
   164c4:	ldr	r4, [fp, #-132]	; 0xffffff7c
   164c8:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   164cc:	cmp	r3, #0
   164d0:	bne	16508 <__assert_fail@plt+0x4b68>
   164d4:	ldrb	r3, [r4]
   164d8:	ldr	r1, [pc, #1216]	; 169a0 <__assert_fail@plt+0x5000>
   164dc:	and	r2, r3, #31
   164e0:	lsr	r3, r3, #5
   164e4:	ldr	r3, [r1, r3, lsl #2]
   164e8:	lsr	r3, r3, r2
   164ec:	tst	r3, #1
   164f0:	bne	165f0 <__assert_fail@plt+0x4c50>
   164f4:	sub	r0, fp, #144	; 0x90
   164f8:	bl	11604 <mbsinit@plt>
   164fc:	cmp	r0, #0
   16500:	beq	16978 <__assert_fail@plt+0x4fd8>
   16504:	strb	r6, [fp, #-148]	; 0xffffff6c
   16508:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   1650c:	mov	r1, r0
   16510:	mov	r0, r4
   16514:	bl	1cf34 <__assert_fail@plt+0xb594>
   16518:	sub	r3, fp, #144	; 0x90
   1651c:	mov	r1, r4
   16520:	mov	r2, r0
   16524:	sub	r0, fp, #120	; 0x78
   16528:	bl	1f13c <__assert_fail@plt+0xd79c>
   1652c:	cmn	r0, #1
   16530:	str	r0, [fp, #-128]	; 0xffffff80
   16534:	beq	1660c <__assert_fail@plt+0x4c6c>
   16538:	cmn	r0, #2
   1653c:	beq	16620 <__assert_fail@plt+0x4c80>
   16540:	cmp	r0, #0
   16544:	beq	1663c <__assert_fail@plt+0x4c9c>
   16548:	ldr	r4, [fp, #-120]	; 0xffffff88
   1654c:	sub	r0, fp, #144	; 0x90
   16550:	strb	r6, [fp, #-124]	; 0xffffff84
   16554:	bl	11604 <mbsinit@plt>
   16558:	strb	r6, [fp, #-136]	; 0xffffff78
   1655c:	cmp	r0, #0
   16560:	strbne	r8, [fp, #-148]	; 0xffffff6c
   16564:	cmp	r4, #0
   16568:	bne	16580 <__assert_fail@plt+0x4be0>
   1656c:	bl	11964 <abort@plt>
   16570:	ldrb	r3, [fp, #-124]	; 0xffffff84
   16574:	cmp	r3, #0
   16578:	ldrne	r4, [fp, #-120]	; 0xffffff88
   1657c:	bne	16564 <__assert_fail@plt+0x4bc4>
   16580:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16584:	ldr	r3, [fp, #-128]	; 0xffffff80
   16588:	add	r4, r4, r3
   1658c:	subs	r5, r5, #1
   16590:	strb	r8, [fp, #-136]	; 0xffffff78
   16594:	str	r4, [fp, #-132]	; 0xffffff7c
   16598:	bne	164c8 <__assert_fail@plt+0x4b28>
   1659c:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   165a0:	cmp	r3, #0
   165a4:	beq	16314 <__assert_fail@plt+0x4974>
   165a8:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   165ac:	cmp	r3, #0
   165b0:	ldrne	r4, [fp, #-64]	; 0xffffffc0
   165b4:	bne	163b4 <__assert_fail@plt+0x4a14>
   165b8:	ldr	r4, [fp, #-76]	; 0xffffffb4
   165bc:	sub	r2, fp, #60	; 0x3c
   165c0:	cmp	r4, r2
   165c4:	bne	163fc <__assert_fail@plt+0x4a5c>
   165c8:	ldr	r5, [fp, #-72]	; 0xffffffb8
   165cc:	sub	r1, fp, #60	; 0x3c
   165d0:	mov	r2, r5
   165d4:	sub	r0, fp, #228	; 0xe4
   165d8:	sub	r7, fp, #228	; 0xe4
   165dc:	str	r3, [fp, #-256]	; 0xffffff00
   165e0:	bl	115d4 <memcpy@plt>
   165e4:	str	r7, [fp, #-244]	; 0xffffff0c
   165e8:	ldr	r3, [fp, #-256]	; 0xffffff00
   165ec:	b	16408 <__assert_fail@plt+0x4a68>
   165f0:	str	r6, [fp, #-128]	; 0xffffff80
   165f4:	ldrb	r3, [r4]
   165f8:	strb	r6, [fp, #-124]	; 0xffffff84
   165fc:	strb	r6, [fp, #-136]	; 0xffffff78
   16600:	str	r3, [fp, #-120]	; 0xffffff88
   16604:	mov	r4, r3
   16608:	b	16564 <__assert_fail@plt+0x4bc4>
   1660c:	str	r6, [fp, #-128]	; 0xffffff80
   16610:	strb	r8, [fp, #-124]	; 0xffffff84
   16614:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16618:	mov	r3, r6
   1661c:	b	16588 <__assert_fail@plt+0x4be8>
   16620:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16624:	mov	r0, r4
   16628:	bl	117a8 <strlen@plt>
   1662c:	strb	r8, [fp, #-124]	; 0xffffff84
   16630:	str	r0, [fp, #-128]	; 0xffffff80
   16634:	mov	r3, r0
   16638:	b	16588 <__assert_fail@plt+0x4be8>
   1663c:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16640:	str	r6, [fp, #-128]	; 0xffffff80
   16644:	ldrb	r3, [r4]
   16648:	cmp	r3, #0
   1664c:	bne	1698c <__assert_fail@plt+0x4fec>
   16650:	ldr	r4, [fp, #-120]	; 0xffffff88
   16654:	cmp	r4, #0
   16658:	beq	1654c <__assert_fail@plt+0x4bac>
   1665c:	ldr	r3, [pc, #832]	; 169a4 <__assert_fail@plt+0x5004>
   16660:	mov	r2, #172	; 0xac
   16664:	ldr	r1, [pc, #828]	; 169a8 <__assert_fail@plt+0x5008>
   16668:	ldr	r0, [pc, #828]	; 169ac <__assert_fail@plt+0x500c>
   1666c:	bl	119a0 <__assert_fail@plt>
   16670:	sub	r0, fp, #200	; 0xc8
   16674:	bl	11604 <mbsinit@plt>
   16678:	cmp	r0, #0
   1667c:	beq	16978 <__assert_fail@plt+0x4fd8>
   16680:	strb	r8, [fp, #-204]	; 0xffffff34
   16684:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16688:	mov	r1, r0
   1668c:	mov	r0, r4
   16690:	bl	1cf34 <__assert_fail@plt+0xb594>
   16694:	sub	r3, fp, #200	; 0xc8
   16698:	mov	r1, r4
   1669c:	mov	r2, r0
   166a0:	sub	r0, fp, #176	; 0xb0
   166a4:	bl	1f13c <__assert_fail@plt+0xd79c>
   166a8:	cmn	r0, #1
   166ac:	str	r0, [fp, #-184]	; 0xffffff48
   166b0:	strbeq	r9, [fp, #-180]	; 0xffffff4c
   166b4:	streq	r8, [fp, #-184]	; 0xffffff48
   166b8:	beq	1676c <__assert_fail@plt+0x4dcc>
   166bc:	cmn	r0, #2
   166c0:	beq	1675c <__assert_fail@plt+0x4dbc>
   166c4:	cmp	r0, #0
   166c8:	beq	167f0 <__assert_fail@plt+0x4e50>
   166cc:	ldr	r4, [fp, #-176]	; 0xffffff50
   166d0:	sub	r0, fp, #200	; 0xc8
   166d4:	strb	r8, [fp, #-180]	; 0xffffff4c
   166d8:	bl	11604 <mbsinit@plt>
   166dc:	strb	r8, [fp, #-192]	; 0xffffff40
   166e0:	cmp	r0, #0
   166e4:	strbne	r9, [fp, #-204]	; 0xffffff34
   166e8:	cmp	r4, #0
   166ec:	beq	161c4 <__assert_fail@plt+0x4824>
   166f0:	mov	r3, r8
   166f4:	ldr	r4, [fp, #-188]	; 0xffffff44
   166f8:	sub	r2, fp, #172	; 0xac
   166fc:	cmp	r4, r2
   16700:	strne	r4, [r6, #-16]
   16704:	ldrne	r5, [fp, #-184]	; 0xffffff48
   16708:	beq	168c0 <__assert_fail@plt+0x4f20>
   1670c:	cmp	r3, #0
   16710:	str	r5, [r6, #-12]
   16714:	strb	r3, [r6, #-8]
   16718:	beq	1672c <__assert_fail@plt+0x4d8c>
   1671c:	ldr	r0, [fp, #-176]	; 0xffffff50
   16720:	str	r0, [r6, #-4]
   16724:	bl	115f8 <towlower@plt>
   16728:	str	r0, [r6, #-4]
   1672c:	add	r4, r4, r5
   16730:	add	r6, r6, #40	; 0x28
   16734:	str	r4, [fp, #-188]	; 0xffffff44
   16738:	strb	r9, [fp, #-192]	; 0xffffff40
   1673c:	b	1617c <__assert_fail@plt+0x47dc>
   16740:	str	r6, [fp, #-72]	; 0xffffffb8
   16744:	ldrb	r3, [r5]
   16748:	strb	r6, [fp, #-68]	; 0xffffffbc
   1674c:	strb	r6, [fp, #-80]	; 0xffffffb0
   16750:	str	r3, [fp, #-64]	; 0xffffffc0
   16754:	mov	r4, r3
   16758:	b	163b4 <__assert_fail@plt+0x4a14>
   1675c:	ldr	r0, [fp, #-188]	; 0xffffff44
   16760:	bl	117a8 <strlen@plt>
   16764:	strb	r9, [fp, #-180]	; 0xffffff4c
   16768:	str	r0, [fp, #-184]	; 0xffffff48
   1676c:	strb	r8, [fp, #-192]	; 0xffffff40
   16770:	mov	r3, r9
   16774:	b	166f4 <__assert_fail@plt+0x4d54>
   16778:	ldrb	r3, [fp, #-136]	; 0xffffff78
   1677c:	cmp	r3, #0
   16780:	beq	16814 <__assert_fail@plt+0x4e74>
   16784:	ldrb	r3, [fp, #-124]	; 0xffffff84
   16788:	cmp	r3, #0
   1678c:	ldrne	r4, [fp, #-120]	; 0xffffff88
   16790:	bne	168b4 <__assert_fail@plt+0x4f14>
   16794:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16798:	ldr	r3, [fp, #-128]	; 0xffffff80
   1679c:	ldr	r5, [fp, #-76]	; 0xffffffb4
   167a0:	add	r4, r4, r3
   167a4:	ldr	r3, [fp, #-72]	; 0xffffffb8
   167a8:	strb	r8, [fp, #-136]	; 0xffffff78
   167ac:	add	r5, r5, r3
   167b0:	strb	r8, [fp, #-80]	; 0xffffffb0
   167b4:	str	r4, [fp, #-132]	; 0xffffff7c
   167b8:	str	r5, [fp, #-76]	; 0xffffffb4
   167bc:	b	16318 <__assert_fail@plt+0x4978>
   167c0:	mov	r1, r7
   167c4:	ldr	r0, [r3]
   167c8:	mov	r2, r5
   167cc:	bl	1161c <memcmp@plt>
   167d0:	cmp	r0, #0
   167d4:	bne	1649c <__assert_fail@plt+0x4afc>
   167d8:	b	16444 <__assert_fail@plt+0x4aa4>
   167dc:	str	r6, [fp, #-72]	; 0xffffffb8
   167e0:	strb	r8, [fp, #-68]	; 0xffffffbc
   167e4:	strb	r6, [fp, #-80]	; 0xffffffb0
   167e8:	mov	r3, #0
   167ec:	b	163ec <__assert_fail@plt+0x4a4c>
   167f0:	ldr	r3, [fp, #-188]	; 0xffffff44
   167f4:	str	r8, [fp, #-184]	; 0xffffff48
   167f8:	ldrb	r3, [r3]
   167fc:	cmp	r3, #0
   16800:	bne	1698c <__assert_fail@plt+0x4fec>
   16804:	ldr	r4, [fp, #-176]	; 0xffffff50
   16808:	cmp	r4, #0
   1680c:	beq	166d0 <__assert_fail@plt+0x4d30>
   16810:	b	1665c <__assert_fail@plt+0x4cbc>
   16814:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   16818:	ldr	r4, [fp, #-132]	; 0xffffff7c
   1681c:	cmp	r3, #0
   16820:	bne	16858 <__assert_fail@plt+0x4eb8>
   16824:	ldrb	r3, [r4]
   16828:	ldr	r1, [pc, #368]	; 169a0 <__assert_fail@plt+0x5000>
   1682c:	and	r2, r3, #31
   16830:	lsr	r3, r3, #5
   16834:	ldr	r3, [r1, r3, lsl #2]
   16838:	lsr	r3, r3, r2
   1683c:	tst	r3, #1
   16840:	bne	168e4 <__assert_fail@plt+0x4f44>
   16844:	sub	r0, fp, #144	; 0x90
   16848:	bl	11604 <mbsinit@plt>
   1684c:	cmp	r0, #0
   16850:	beq	16978 <__assert_fail@plt+0x4fd8>
   16854:	strb	r6, [fp, #-148]	; 0xffffff6c
   16858:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   1685c:	mov	r1, r0
   16860:	mov	r0, r4
   16864:	bl	1cf34 <__assert_fail@plt+0xb594>
   16868:	sub	r3, fp, #144	; 0x90
   1686c:	mov	r1, r4
   16870:	mov	r2, r0
   16874:	sub	r0, fp, #120	; 0x78
   16878:	bl	1f13c <__assert_fail@plt+0xd79c>
   1687c:	cmn	r0, #1
   16880:	str	r0, [fp, #-128]	; 0xffffff80
   16884:	beq	16924 <__assert_fail@plt+0x4f84>
   16888:	cmn	r0, #2
   1688c:	beq	16938 <__assert_fail@plt+0x4f98>
   16890:	cmp	r0, #0
   16894:	beq	16954 <__assert_fail@plt+0x4fb4>
   16898:	ldr	r4, [fp, #-120]	; 0xffffff88
   1689c:	sub	r0, fp, #144	; 0x90
   168a0:	strb	r6, [fp, #-124]	; 0xffffff84
   168a4:	bl	11604 <mbsinit@plt>
   168a8:	strb	r6, [fp, #-136]	; 0xffffff78
   168ac:	cmp	r0, #0
   168b0:	strbne	r8, [fp, #-148]	; 0xffffff6c
   168b4:	cmp	r4, #0
   168b8:	beq	1656c <__assert_fail@plt+0x4bcc>
   168bc:	b	16794 <__assert_fail@plt+0x4df4>
   168c0:	ldr	r5, [fp, #-184]	; 0xffffff48
   168c4:	sub	r1, fp, #172	; 0xac
   168c8:	mov	r2, r5
   168cc:	mov	r0, r6
   168d0:	str	r3, [fp, #-252]	; 0xffffff04
   168d4:	bl	115d4 <memcpy@plt>
   168d8:	str	r6, [r6, #-16]
   168dc:	ldr	r3, [fp, #-252]	; 0xffffff04
   168e0:	b	1670c <__assert_fail@plt+0x4d6c>
   168e4:	str	r6, [fp, #-128]	; 0xffffff80
   168e8:	ldrb	r3, [r4]
   168ec:	strb	r6, [fp, #-124]	; 0xffffff84
   168f0:	strb	r6, [fp, #-136]	; 0xffffff78
   168f4:	str	r3, [fp, #-120]	; 0xffffff88
   168f8:	mov	r4, r3
   168fc:	b	168b4 <__assert_fail@plt+0x4f14>
   16900:	ldr	r5, [fp, #-76]	; 0xffffffb4
   16904:	str	r6, [fp, #-72]	; 0xffffffb8
   16908:	ldrb	r3, [r5]
   1690c:	cmp	r3, #0
   16910:	bne	1698c <__assert_fail@plt+0x4fec>
   16914:	ldr	r4, [fp, #-64]	; 0xffffffc0
   16918:	cmp	r4, #0
   1691c:	beq	1639c <__assert_fail@plt+0x49fc>
   16920:	b	1665c <__assert_fail@plt+0x4cbc>
   16924:	str	r6, [fp, #-128]	; 0xffffff80
   16928:	strb	r8, [fp, #-124]	; 0xffffff84
   1692c:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16930:	mov	r3, r6
   16934:	b	1679c <__assert_fail@plt+0x4dfc>
   16938:	ldr	r4, [fp, #-132]	; 0xffffff7c
   1693c:	mov	r0, r4
   16940:	bl	117a8 <strlen@plt>
   16944:	strb	r8, [fp, #-124]	; 0xffffff84
   16948:	str	r0, [fp, #-128]	; 0xffffff80
   1694c:	mov	r3, r0
   16950:	b	1679c <__assert_fail@plt+0x4dfc>
   16954:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16958:	str	r6, [fp, #-128]	; 0xffffff80
   1695c:	ldrb	r3, [r4]
   16960:	cmp	r3, #0
   16964:	bne	1698c <__assert_fail@plt+0x4fec>
   16968:	ldr	r4, [fp, #-120]	; 0xffffff88
   1696c:	cmp	r4, #0
   16970:	beq	1689c <__assert_fail@plt+0x4efc>
   16974:	b	1665c <__assert_fail@plt+0x4cbc>
   16978:	ldr	r3, [pc, #36]	; 169a4 <__assert_fail@plt+0x5004>
   1697c:	mov	r2, #143	; 0x8f
   16980:	ldr	r1, [pc, #32]	; 169a8 <__assert_fail@plt+0x5008>
   16984:	ldr	r0, [pc, #36]	; 169b0 <__assert_fail@plt+0x5010>
   16988:	bl	119a0 <__assert_fail@plt>
   1698c:	ldr	r3, [pc, #16]	; 169a4 <__assert_fail@plt+0x5004>
   16990:	mov	r2, #171	; 0xab
   16994:	ldr	r1, [pc, #12]	; 169a8 <__assert_fail@plt+0x5008>
   16998:	ldr	r0, [pc, #20]	; 169b4 <__assert_fail@plt+0x5014>
   1699c:	bl	119a0 <__assert_fail@plt>
   169a0:	andeq	r4, r3, r0, asr #1
   169a4:	andeq	r3, r3, r0, lsr #17
   169a8:			; <UNDEFINED> instruction: 0x000338b4
   169ac:	strdeq	r3, [r3], -r0
   169b0:	andeq	r3, r3, r0, asr #17
   169b4:	ldrdeq	r3, [r3], -r8
   169b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169bc:	sub	sp, sp, #396	; 0x18c
   169c0:	mov	r8, r1
   169c4:	str	r0, [sp, #4]
   169c8:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   169cc:	cmp	r0, #1
   169d0:	bls	16d90 <__assert_fail@plt+0x53f0>
   169d4:	ldrb	r2, [r8]
   169d8:	ldr	r9, [pc, #3400]	; 17728 <__assert_fail@plt+0x5d88>
   169dc:	mov	r1, #0
   169e0:	and	r0, r2, #31
   169e4:	lsr	r3, r2, #5
   169e8:	str	r8, [sp, #128]	; 0x80
   169ec:	ldr	r3, [r9, r3, lsl #2]
   169f0:	str	r1, [sp, #120]	; 0x78
   169f4:	strb	r1, [sp, #112]	; 0x70
   169f8:	lsr	r3, r3, r0
   169fc:	ands	r4, r3, #1
   16a00:	str	r1, [sp, #116]	; 0x74
   16a04:	strb	r1, [sp, #124]	; 0x7c
   16a08:	beq	16cf4 <__assert_fail@plt+0x5354>
   16a0c:	mov	r3, #1
   16a10:	mov	r4, r2
   16a14:	str	r3, [sp, #132]	; 0x84
   16a18:	strb	r3, [sp, #136]	; 0x88
   16a1c:	cmp	r4, #0
   16a20:	mov	r3, #1
   16a24:	str	r2, [sp, #140]	; 0x8c
   16a28:	strb	r3, [sp, #124]	; 0x7c
   16a2c:	beq	16d84 <__assert_fail@plt+0x53e4>
   16a30:	mov	r4, r3
   16a34:	ldr	r1, [sp, #128]	; 0x80
   16a38:	add	r3, sp, #144	; 0x90
   16a3c:	cmp	r1, r3
   16a40:	mov	r3, #0
   16a44:	str	r8, [sp, #184]	; 0xb8
   16a48:	str	r3, [sp, #176]	; 0xb0
   16a4c:	strb	r3, [sp, #168]	; 0xa8
   16a50:	str	r3, [sp, #172]	; 0xac
   16a54:	strb	r3, [sp, #180]	; 0xb4
   16a58:	ldrne	r5, [sp, #132]	; 0x84
   16a5c:	strne	r1, [sp, #32]
   16a60:	beq	176ac <__assert_fail@plt+0x5d0c>
   16a64:	cmp	r4, #0
   16a68:	str	r5, [sp, #36]	; 0x24
   16a6c:	strb	r4, [sp, #40]	; 0x28
   16a70:	beq	16a80 <__assert_fail@plt+0x50e0>
   16a74:	ldr	r0, [sp, #140]	; 0x8c
   16a78:	bl	115f8 <towlower@plt>
   16a7c:	str	r0, [sp, #44]	; 0x2c
   16a80:	mov	r3, #0
   16a84:	str	r3, [sp, #12]
   16a88:	str	r3, [sp]
   16a8c:	mov	fp, r3
   16a90:	mov	r7, r3
   16a94:	strb	r3, [sp, #224]	; 0xe0
   16a98:	str	r3, [sp, #228]	; 0xe4
   16a9c:	strb	r3, [sp, #236]	; 0xec
   16aa0:	str	r3, [sp, #232]	; 0xe8
   16aa4:	ldrb	r3, [sp, #224]	; 0xe0
   16aa8:	ldr	r2, [sp, #4]
   16aac:	mov	sl, #1
   16ab0:	cmp	r3, #0
   16ab4:	mov	r5, sl
   16ab8:	mov	r4, r2
   16abc:	str	r2, [sp, #240]	; 0xf0
   16ac0:	mov	r6, sl
   16ac4:	str	r8, [sp, #8]
   16ac8:	bne	16c7c <__assert_fail@plt+0x52dc>
   16acc:	ldrb	r3, [r4]
   16ad0:	and	r2, r3, #31
   16ad4:	lsr	r3, r3, #5
   16ad8:	ldr	r3, [r9, r3, lsl #2]
   16adc:	lsr	r3, r3, r2
   16ae0:	tst	r3, #1
   16ae4:	beq	17178 <__assert_fail@plt+0x57d8>
   16ae8:	str	r5, [sp, #244]	; 0xf4
   16aec:	ldrb	r4, [r4]
   16af0:	strb	r5, [sp, #248]	; 0xf8
   16af4:	strb	r5, [sp, #236]	; 0xec
   16af8:	cmp	r4, #0
   16afc:	str	r4, [sp, #252]	; 0xfc
   16b00:	beq	16ce8 <__assert_fail@plt+0x5348>
   16b04:	cmp	fp, #9
   16b08:	movls	sl, #0
   16b0c:	andhi	sl, r6, #1
   16b10:	cmp	sl, #0
   16b14:	beq	16c00 <__assert_fail@plt+0x5260>
   16b18:	ldr	r2, [sp]
   16b1c:	add	r3, fp, fp, lsl #2
   16b20:	cmp	r2, r3
   16b24:	bcc	17170 <__assert_fail@plt+0x57d0>
   16b28:	ldr	r3, [sp, #12]
   16b2c:	subs	r6, r2, r3
   16b30:	beq	17700 <__assert_fail@plt+0x5d60>
   16b34:	ldrb	r3, [sp, #180]	; 0xb4
   16b38:	cmp	r3, #0
   16b3c:	bne	16fd0 <__assert_fail@plt+0x5630>
   16b40:	ldr	r4, [sp, #184]	; 0xb8
   16b44:	ldrb	r3, [sp, #168]	; 0xa8
   16b48:	cmp	r3, #0
   16b4c:	bne	16b80 <__assert_fail@plt+0x51e0>
   16b50:	ldrb	r3, [r4]
   16b54:	and	r2, r3, #31
   16b58:	lsr	r3, r3, #5
   16b5c:	ldr	r3, [r9, r3, lsl #2]
   16b60:	lsr	r3, r3, r2
   16b64:	tst	r3, #1
   16b68:	bne	17050 <__assert_fail@plt+0x56b0>
   16b6c:	add	r0, sp, #172	; 0xac
   16b70:	bl	11604 <mbsinit@plt>
   16b74:	cmp	r0, #0
   16b78:	beq	176d0 <__assert_fail@plt+0x5d30>
   16b7c:	strb	r5, [sp, #168]	; 0xa8
   16b80:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16b84:	mov	r1, r0
   16b88:	mov	r0, r4
   16b8c:	bl	1cf34 <__assert_fail@plt+0xb594>
   16b90:	add	r3, sp, #172	; 0xac
   16b94:	mov	r1, r4
   16b98:	mov	r2, r0
   16b9c:	add	r0, sp, #196	; 0xc4
   16ba0:	bl	1f13c <__assert_fail@plt+0xd79c>
   16ba4:	cmn	r0, #1
   16ba8:	str	r0, [sp, #188]	; 0xbc
   16bac:	beq	1706c <__assert_fail@plt+0x56cc>
   16bb0:	cmn	r0, #2
   16bb4:	beq	17080 <__assert_fail@plt+0x56e0>
   16bb8:	cmp	r0, #0
   16bbc:	beq	1714c <__assert_fail@plt+0x57ac>
   16bc0:	ldr	r4, [sp, #196]	; 0xc4
   16bc4:	add	r0, sp, #172	; 0xac
   16bc8:	strb	r5, [sp, #192]	; 0xc0
   16bcc:	bl	11604 <mbsinit@plt>
   16bd0:	strb	r5, [sp, #180]	; 0xb4
   16bd4:	cmp	r0, #0
   16bd8:	strbne	r7, [sp, #168]	; 0xa8
   16bdc:	cmp	r4, #0
   16be0:	bne	16fe0 <__assert_fail@plt+0x5640>
   16be4:	add	r2, sp, #336	; 0x150
   16be8:	ldmib	sp, {r0, r1}
   16bec:	bl	160e0 <__assert_fail@plt+0x4740>
   16bf0:	subs	r6, r0, #0
   16bf4:	bne	176e4 <__assert_fail@plt+0x5d44>
   16bf8:	ldr	r3, [sp]
   16bfc:	str	r3, [sp, #12]
   16c00:	ldr	sl, [sp, #240]	; 0xf0
   16c04:	add	r3, sp, #256	; 0x100
   16c08:	cmp	sl, r3
   16c0c:	ldr	r3, [sp]
   16c10:	add	fp, fp, #1
   16c14:	ldr	r4, [sp, #244]	; 0xf4
   16c18:	add	r8, r3, #1
   16c1c:	strne	sl, [sp, #72]	; 0x48
   16c20:	beq	175dc <__assert_fail@plt+0x5c3c>
   16c24:	ldrb	r3, [sp, #248]	; 0xf8
   16c28:	str	r4, [sp, #76]	; 0x4c
   16c2c:	cmp	r3, #0
   16c30:	strb	r3, [sp, #80]	; 0x50
   16c34:	beq	1709c <__assert_fail@plt+0x56fc>
   16c38:	ldr	r0, [sp, #252]	; 0xfc
   16c3c:	bl	115f8 <towlower@plt>
   16c40:	ldrb	r3, [sp, #40]	; 0x28
   16c44:	cmp	r3, #0
   16c48:	str	r0, [sp, #84]	; 0x54
   16c4c:	beq	1709c <__assert_fail@plt+0x56fc>
   16c50:	ldr	r3, [sp, #44]	; 0x2c
   16c54:	cmp	r0, r3
   16c58:	beq	170c0 <__assert_fail@plt+0x5720>
   16c5c:	ldr	r3, [sp, #240]	; 0xf0
   16c60:	strb	r7, [sp, #236]	; 0xec
   16c64:	add	r4, r3, r4
   16c68:	ldrb	r3, [sp, #224]	; 0xe0
   16c6c:	str	r8, [sp]
   16c70:	str	r4, [sp, #240]	; 0xf0
   16c74:	cmp	r3, #0
   16c78:	beq	16acc <__assert_fail@plt+0x512c>
   16c7c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16c80:	mov	r1, r0
   16c84:	mov	r0, r4
   16c88:	bl	1cf34 <__assert_fail@plt+0xb594>
   16c8c:	add	r3, sp, #228	; 0xe4
   16c90:	mov	r1, r4
   16c94:	mov	r2, r0
   16c98:	add	r0, sp, #252	; 0xfc
   16c9c:	bl	1f13c <__assert_fail@plt+0xd79c>
   16ca0:	cmn	r0, #1
   16ca4:	str	r0, [sp, #244]	; 0xf4
   16ca8:	strbeq	r7, [sp, #248]	; 0xf8
   16cac:	streq	r5, [sp, #244]	; 0xf4
   16cb0:	beq	171a0 <__assert_fail@plt+0x5800>
   16cb4:	cmn	r0, #2
   16cb8:	beq	17190 <__assert_fail@plt+0x57f0>
   16cbc:	cmp	r0, #0
   16cc0:	beq	17520 <__assert_fail@plt+0x5b80>
   16cc4:	ldr	r4, [sp, #252]	; 0xfc
   16cc8:	add	r0, sp, #228	; 0xe4
   16ccc:	strb	r5, [sp, #248]	; 0xf8
   16cd0:	bl	11604 <mbsinit@plt>
   16cd4:	strb	r5, [sp, #236]	; 0xec
   16cd8:	cmp	r0, #0
   16cdc:	strbne	r7, [sp, #224]	; 0xe0
   16ce0:	cmp	r4, #0
   16ce4:	bne	16b04 <__assert_fail@plt+0x5164>
   16ce8:	mov	r0, #0
   16cec:	add	sp, sp, #396	; 0x18c
   16cf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cf4:	add	r0, sp, #116	; 0x74
   16cf8:	bl	11604 <mbsinit@plt>
   16cfc:	cmp	r0, #0
   16d00:	beq	176d0 <__assert_fail@plt+0x5d30>
   16d04:	mov	r5, #1
   16d08:	strb	r5, [sp, #112]	; 0x70
   16d0c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16d10:	mov	r1, r0
   16d14:	mov	r0, r8
   16d18:	bl	1cf34 <__assert_fail@plt+0xb594>
   16d1c:	add	r3, sp, #116	; 0x74
   16d20:	mov	r1, r8
   16d24:	mov	r2, r0
   16d28:	add	r0, sp, #140	; 0x8c
   16d2c:	bl	1f13c <__assert_fail@plt+0xd79c>
   16d30:	cmn	r0, #1
   16d34:	str	r0, [sp, #132]	; 0x84
   16d38:	strbeq	r4, [sp, #136]	; 0x88
   16d3c:	streq	r5, [sp, #132]	; 0x84
   16d40:	beq	16fc0 <__assert_fail@plt+0x5620>
   16d44:	cmn	r0, #2
   16d48:	beq	16fb0 <__assert_fail@plt+0x5610>
   16d4c:	cmp	r0, #0
   16d50:	beq	175b8 <__assert_fail@plt+0x5c18>
   16d54:	ldr	r4, [sp, #140]	; 0x8c
   16d58:	mov	r3, #1
   16d5c:	add	r0, sp, #116	; 0x74
   16d60:	strb	r3, [sp, #136]	; 0x88
   16d64:	bl	11604 <mbsinit@plt>
   16d68:	cmp	r0, #0
   16d6c:	movne	r3, #0
   16d70:	strbne	r3, [sp, #112]	; 0x70
   16d74:	mov	r3, #1
   16d78:	cmp	r4, #0
   16d7c:	strb	r3, [sp, #124]	; 0x7c
   16d80:	bne	16a30 <__assert_fail@plt+0x5090>
   16d84:	ldr	r0, [sp, #4]
   16d88:	add	sp, sp, #396	; 0x18c
   16d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d90:	ldrb	r4, [r8]
   16d94:	cmp	r4, #0
   16d98:	beq	16d84 <__assert_fail@plt+0x53e4>
   16d9c:	bl	11778 <__ctype_b_loc@plt>
   16da0:	sxth	r5, r4
   16da4:	lsl	r3, r5, #1
   16da8:	ldr	r6, [r0]
   16dac:	str	r0, [sp, #28]
   16db0:	ldrh	r3, [r6, r3]
   16db4:	tst	r3, #256	; 0x100
   16db8:	streq	r4, [sp, #8]
   16dbc:	bne	16f9c <__assert_fail@plt+0x55fc>
   16dc0:	ldr	fp, [sp, #4]
   16dc4:	ldrb	r3, [fp]
   16dc8:	cmp	r3, #0
   16dcc:	beq	16ce8 <__assert_fail@plt+0x5348>
   16dd0:	mov	sl, #0
   16dd4:	mov	r9, sl
   16dd8:	mov	r3, #1
   16ddc:	str	sl, [sp, #16]
   16de0:	str	r8, [sp, #12]
   16de4:	str	r3, [sp, #4]
   16de8:	str	r8, [sp]
   16dec:	mov	r7, fp
   16df0:	ldrb	r3, [fp], #1
   16df4:	add	sl, sl, #1
   16df8:	add	r5, r9, #1
   16dfc:	sxth	r4, r3
   16e00:	lsl	r2, r4, #1
   16e04:	ldrh	r2, [r6, r2]
   16e08:	tst	r2, #256	; 0x100
   16e0c:	beq	16e1c <__assert_fail@plt+0x547c>
   16e10:	bl	11748 <__ctype_tolower_loc@plt>
   16e14:	ldr	r3, [r0]
   16e18:	ldr	r3, [r3, r4, lsl #2]
   16e1c:	ldr	r2, [sp, #8]
   16e20:	cmp	r3, r2
   16e24:	beq	16ed8 <__assert_fail@plt+0x5538>
   16e28:	ldrb	r3, [fp]
   16e2c:	cmp	r3, #0
   16e30:	beq	16ce8 <__assert_fail@plt+0x5348>
   16e34:	ldr	r4, [sp, #4]
   16e38:	cmp	sl, #9
   16e3c:	movls	r4, #0
   16e40:	andhi	r4, r4, #1
   16e44:	cmp	r4, #0
   16e48:	beq	16ed0 <__assert_fail@plt+0x5530>
   16e4c:	add	r3, sl, sl, lsl #2
   16e50:	cmp	r3, r5
   16e54:	bhi	16f90 <__assert_fail@plt+0x55f0>
   16e58:	ldr	r7, [sp, #12]
   16e5c:	cmp	r7, #0
   16e60:	beq	16e94 <__assert_fail@plt+0x54f4>
   16e64:	ldr	r2, [sp, #16]
   16e68:	mov	r0, r7
   16e6c:	sub	r1, r5, r2
   16e70:	bl	11874 <strnlen@plt>
   16e74:	mov	r2, r7
   16e78:	ldrb	r3, [r2, r0]!
   16e7c:	cmp	r3, #0
   16e80:	str	r2, [sp, #12]
   16e84:	strne	r4, [sp, #4]
   16e88:	strne	r5, [sp, #16]
   16e8c:	bne	16ed0 <__assert_fail@plt+0x5530>
   16e90:	str	r5, [sp, #16]
   16e94:	ldr	r4, [sp]
   16e98:	mov	r0, r4
   16e9c:	bl	117a8 <strlen@plt>
   16ea0:	add	r3, sp, #336	; 0x150
   16ea4:	mov	r1, r4
   16ea8:	mov	r2, r0
   16eac:	mov	r0, fp
   16eb0:	bl	15e78 <__assert_fail@plt+0x44d8>
   16eb4:	subs	r3, r0, #0
   16eb8:	str	r3, [sp, #4]
   16ebc:	bne	176e4 <__assert_fail@plt+0x5d44>
   16ec0:	ldr	r3, [sp, #28]
   16ec4:	ldr	r6, [r3]
   16ec8:	ldr	r3, [sp, #4]
   16ecc:	str	r3, [sp, #12]
   16ed0:	mov	r9, r5
   16ed4:	b	16dec <__assert_fail@plt+0x544c>
   16ed8:	ldr	r3, [sp]
   16edc:	ldrb	r4, [r3, #1]
   16ee0:	cmp	r4, #0
   16ee4:	beq	176c8 <__assert_fail@plt+0x5d28>
   16ee8:	ldrb	r3, [fp]
   16eec:	cmp	r3, #0
   16ef0:	beq	16ce8 <__assert_fail@plt+0x5348>
   16ef4:	mov	r8, #2
   16ef8:	str	sl, [sp, #20]
   16efc:	str	fp, [sp, #24]
   16f00:	mov	sl, r8
   16f04:	mov	fp, r6
   16f08:	b	16f30 <__assert_fail@plt+0x5590>
   16f0c:	ldr	r3, [sp]
   16f10:	ldrb	r4, [r3, sl]
   16f14:	cmp	r4, #0
   16f18:	beq	17234 <__assert_fail@plt+0x5894>
   16f1c:	add	sl, sl, #1
   16f20:	add	r3, r7, sl
   16f24:	ldrb	r3, [r3, #-1]
   16f28:	cmp	r3, #0
   16f2c:	beq	16ce8 <__assert_fail@plt+0x5348>
   16f30:	sxth	r6, r3
   16f34:	add	r5, sl, r9
   16f38:	lsl	r0, r6, #1
   16f3c:	ldrh	r0, [fp, r0]
   16f40:	tst	r0, #256	; 0x100
   16f44:	moveq	r6, r3
   16f48:	beq	16f58 <__assert_fail@plt+0x55b8>
   16f4c:	bl	11748 <__ctype_tolower_loc@plt>
   16f50:	ldr	r3, [r0]
   16f54:	ldr	r6, [r3, r6, lsl #2]
   16f58:	sxth	r8, r4
   16f5c:	lsl	r0, r8, #1
   16f60:	ldrh	r0, [fp, r0]
   16f64:	tst	r0, #256	; 0x100
   16f68:	beq	16f78 <__assert_fail@plt+0x55d8>
   16f6c:	bl	11748 <__ctype_tolower_loc@plt>
   16f70:	ldr	r0, [r0]
   16f74:	ldr	r4, [r0, r8, lsl #2]
   16f78:	cmp	r6, r4
   16f7c:	beq	16f0c <__assert_fail@plt+0x556c>
   16f80:	mov	r6, fp
   16f84:	ldr	sl, [sp, #20]
   16f88:	ldr	fp, [sp, #24]
   16f8c:	b	16e34 <__assert_fail@plt+0x5494>
   16f90:	str	r4, [sp, #4]
   16f94:	mov	r9, r5
   16f98:	b	16dec <__assert_fail@plt+0x544c>
   16f9c:	bl	11748 <__ctype_tolower_loc@plt>
   16fa0:	ldr	r3, [r0]
   16fa4:	ldrb	r3, [r3, r5, lsl #2]
   16fa8:	str	r3, [sp, #8]
   16fac:	b	16dc0 <__assert_fail@plt+0x5420>
   16fb0:	ldr	r0, [sp, #128]	; 0x80
   16fb4:	bl	117a8 <strlen@plt>
   16fb8:	strb	r4, [sp, #136]	; 0x88
   16fbc:	str	r0, [sp, #132]	; 0x84
   16fc0:	mov	r3, #1
   16fc4:	strb	r3, [sp, #124]	; 0x7c
   16fc8:	mov	r4, #0
   16fcc:	b	16a34 <__assert_fail@plt+0x5094>
   16fd0:	ldrb	r3, [sp, #192]	; 0xc0
   16fd4:	cmp	r3, #0
   16fd8:	ldrne	r4, [sp, #196]	; 0xc4
   16fdc:	bne	16bdc <__assert_fail@plt+0x523c>
   16fe0:	ldr	r4, [sp, #184]	; 0xb8
   16fe4:	ldr	r3, [sp, #188]	; 0xbc
   16fe8:	add	r4, r4, r3
   16fec:	subs	r6, r6, #1
   16ff0:	strb	r7, [sp, #180]	; 0xb4
   16ff4:	str	r4, [sp, #184]	; 0xb8
   16ff8:	mov	r8, r4
   16ffc:	bne	16b44 <__assert_fail@plt+0x51a4>
   17000:	ldrb	r3, [sp, #168]	; 0xa8
   17004:	cmp	r3, #0
   17008:	bne	17558 <__assert_fail@plt+0x5bb8>
   1700c:	ldrb	r3, [r8]
   17010:	and	r2, r3, #31
   17014:	lsr	r3, r3, #5
   17018:	ldr	r3, [r9, r3, lsl #2]
   1701c:	lsr	r3, r3, r2
   17020:	tst	r3, #1
   17024:	beq	17544 <__assert_fail@plt+0x5ba4>
   17028:	str	r5, [sp, #188]	; 0xbc
   1702c:	ldrb	r3, [r8]
   17030:	strb	r5, [sp, #192]	; 0xc0
   17034:	strb	r5, [sp, #180]	; 0xb4
   17038:	mov	r4, r3
   1703c:	str	r3, [sp, #196]	; 0xc4
   17040:	cmp	r4, #0
   17044:	beq	16be4 <__assert_fail@plt+0x5244>
   17048:	mov	r6, sl
   1704c:	b	16bf8 <__assert_fail@plt+0x5258>
   17050:	str	r5, [sp, #188]	; 0xbc
   17054:	ldrb	r3, [r4]
   17058:	strb	r5, [sp, #192]	; 0xc0
   1705c:	strb	r5, [sp, #180]	; 0xb4
   17060:	str	r3, [sp, #196]	; 0xc4
   17064:	mov	r4, r3
   17068:	b	16bdc <__assert_fail@plt+0x523c>
   1706c:	str	r5, [sp, #188]	; 0xbc
   17070:	strb	r7, [sp, #192]	; 0xc0
   17074:	ldr	r4, [sp, #184]	; 0xb8
   17078:	mov	r3, r5
   1707c:	b	16fe8 <__assert_fail@plt+0x5648>
   17080:	ldr	r4, [sp, #184]	; 0xb8
   17084:	mov	r0, r4
   17088:	bl	117a8 <strlen@plt>
   1708c:	strb	r7, [sp, #192]	; 0xc0
   17090:	str	r0, [sp, #188]	; 0xbc
   17094:	mov	r3, r0
   17098:	b	16fe8 <__assert_fail@plt+0x5648>
   1709c:	ldr	r3, [sp, #36]	; 0x24
   170a0:	cmp	r3, r4
   170a4:	bne	16c5c <__assert_fail@plt+0x52bc>
   170a8:	mov	r0, sl
   170ac:	mov	r2, r4
   170b0:	ldr	r1, [sp, #32]
   170b4:	bl	1161c <memcmp@plt>
   170b8:	cmp	r0, #0
   170bc:	bne	16c5c <__assert_fail@plt+0x52bc>
   170c0:	add	lr, sp, #224	; 0xe0
   170c4:	add	ip, sp, #280	; 0x118
   170c8:	ldm	lr!, {r0, r1, r2, r3}
   170cc:	ldr	sl, [sp, #8]
   170d0:	stmia	ip!, {r0, r1, r2, r3}
   170d4:	ldm	lr!, {r0, r1, r2, r3}
   170d8:	str	sl, [sp, #352]	; 0x160
   170dc:	strb	r7, [sp, #292]	; 0x124
   170e0:	stmia	ip!, {r0, r1, r2, r3}
   170e4:	ldm	lr!, {r0, r1, r2, r3}
   170e8:	ldr	r8, [sp, #296]	; 0x128
   170ec:	stmia	ip!, {r0, r1, r2, r3}
   170f0:	add	r4, r8, r4
   170f4:	ldm	lr, {r0, r1}
   170f8:	str	r4, [sp, #296]	; 0x128
   170fc:	stm	ip, {r0, r1}
   17100:	ldrb	r3, [sl]
   17104:	strb	r7, [sp, #336]	; 0x150
   17108:	str	r7, [sp, #340]	; 0x154
   1710c:	and	r2, r3, #31
   17110:	lsr	r1, r3, #5
   17114:	strb	r7, [sp, #348]	; 0x15c
   17118:	ldr	r8, [r9, r1, lsl #2]
   1711c:	str	r7, [sp, #344]	; 0x158
   17120:	lsr	r8, r8, r2
   17124:	ands	r8, r8, #1
   17128:	beq	171a8 <__assert_fail@plt+0x5808>
   1712c:	mov	r4, r3
   17130:	str	r5, [sp, #356]	; 0x164
   17134:	str	r3, [sp, #364]	; 0x16c
   17138:	strb	r5, [sp, #360]	; 0x168
   1713c:	cmp	r4, #0
   17140:	strb	r5, [sp, #348]	; 0x15c
   17144:	bne	17240 <__assert_fail@plt+0x58a0>
   17148:	bl	11964 <abort@plt>
   1714c:	ldr	r4, [sp, #184]	; 0xb8
   17150:	str	r5, [sp, #188]	; 0xbc
   17154:	ldrb	r3, [r4]
   17158:	cmp	r3, #0
   1715c:	bne	176ec <__assert_fail@plt+0x5d4c>
   17160:	ldr	r4, [sp, #196]	; 0xc4
   17164:	cmp	r4, #0
   17168:	beq	16bc4 <__assert_fail@plt+0x5224>
   1716c:	b	17220 <__assert_fail@plt+0x5880>
   17170:	mov	r6, sl
   17174:	b	16c00 <__assert_fail@plt+0x5260>
   17178:	add	r0, sp, #228	; 0xe4
   1717c:	bl	11604 <mbsinit@plt>
   17180:	cmp	r0, #0
   17184:	beq	176d0 <__assert_fail@plt+0x5d30>
   17188:	strb	r5, [sp, #224]	; 0xe0
   1718c:	b	16c7c <__assert_fail@plt+0x52dc>
   17190:	ldr	r0, [sp, #240]	; 0xf0
   17194:	bl	117a8 <strlen@plt>
   17198:	strb	r7, [sp, #248]	; 0xf8
   1719c:	str	r0, [sp, #244]	; 0xf4
   171a0:	strb	r5, [sp, #236]	; 0xec
   171a4:	b	16b04 <__assert_fail@plt+0x5164>
   171a8:	add	r0, sp, #340	; 0x154
   171ac:	bl	11604 <mbsinit@plt>
   171b0:	cmp	r0, #0
   171b4:	beq	176d0 <__assert_fail@plt+0x5d30>
   171b8:	strb	r5, [sp, #336]	; 0x150
   171bc:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   171c0:	ldr	r4, [sp, #8]
   171c4:	mov	r1, r0
   171c8:	mov	r0, r4
   171cc:	bl	1cf34 <__assert_fail@plt+0xb594>
   171d0:	add	r3, sp, #340	; 0x154
   171d4:	mov	r1, r4
   171d8:	mov	r2, r0
   171dc:	add	r0, sp, #364	; 0x16c
   171e0:	bl	1f13c <__assert_fail@plt+0xd79c>
   171e4:	cmn	r0, #1
   171e8:	str	r0, [sp, #356]	; 0x164
   171ec:	beq	1763c <__assert_fail@plt+0x5c9c>
   171f0:	cmn	r0, #2
   171f4:	beq	17650 <__assert_fail@plt+0x5cb0>
   171f8:	cmp	r0, #0
   171fc:	bne	175fc <__assert_fail@plt+0x5c5c>
   17200:	ldr	r4, [sp, #352]	; 0x160
   17204:	str	r5, [sp, #356]	; 0x164
   17208:	ldrb	r3, [r4]
   1720c:	cmp	r3, #0
   17210:	bne	176ec <__assert_fail@plt+0x5d4c>
   17214:	ldr	r4, [sp, #364]	; 0x16c
   17218:	cmp	r4, #0
   1721c:	beq	17600 <__assert_fail@plt+0x5c60>
   17220:	ldr	r3, [pc, #1284]	; 1772c <__assert_fail@plt+0x5d8c>
   17224:	mov	r2, #172	; 0xac
   17228:	ldr	r1, [pc, #1280]	; 17730 <__assert_fail@plt+0x5d90>
   1722c:	ldr	r0, [pc, #1280]	; 17734 <__assert_fail@plt+0x5d94>
   17230:	bl	119a0 <__assert_fail@plt>
   17234:	mov	r0, r7
   17238:	add	sp, sp, #396	; 0x18c
   1723c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17240:	ldr	r4, [sp, #352]	; 0x160
   17244:	ldr	r3, [sp, #356]	; 0x164
   17248:	add	r4, r4, r3
   1724c:	ldr	r3, [sp]
   17250:	strb	r7, [sp, #348]	; 0x15c
   17254:	add	r8, r3, #2
   17258:	ldrb	r3, [sp, #336]	; 0x150
   1725c:	str	r4, [sp, #352]	; 0x160
   17260:	cmp	r3, #0
   17264:	bne	17410 <__assert_fail@plt+0x5a70>
   17268:	ldrb	r3, [r4]
   1726c:	and	r2, r3, #31
   17270:	lsr	r3, r3, #5
   17274:	ldr	r3, [r9, r3, lsl #2]
   17278:	lsr	r3, r3, r2
   1727c:	tst	r3, #1
   17280:	beq	174a8 <__assert_fail@plt+0x5b08>
   17284:	str	r5, [sp, #356]	; 0x164
   17288:	ldrb	r4, [r4]
   1728c:	strb	r5, [sp, #360]	; 0x168
   17290:	str	r4, [sp, #364]	; 0x16c
   17294:	cmp	r4, #0
   17298:	strb	r5, [sp, #348]	; 0x15c
   1729c:	bne	172c0 <__assert_fail@plt+0x5920>
   172a0:	ldr	r0, [sp, #240]	; 0xf0
   172a4:	add	sp, sp, #396	; 0x18c
   172a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172ac:	ldr	r0, [sp, #352]	; 0x160
   172b0:	bl	117a8 <strlen@plt>
   172b4:	strb	r7, [sp, #360]	; 0x168
   172b8:	str	r0, [sp, #356]	; 0x164
   172bc:	strb	r5, [sp, #348]	; 0x15c
   172c0:	ldrb	r3, [sp, #292]	; 0x124
   172c4:	cmp	r3, #0
   172c8:	beq	172f4 <__assert_fail@plt+0x5954>
   172cc:	ldrb	r3, [sp, #304]	; 0x130
   172d0:	cmp	r3, #0
   172d4:	ldrne	r4, [sp, #308]	; 0x134
   172d8:	bne	1739c <__assert_fail@plt+0x59fc>
   172dc:	ldr	r2, [sp, #300]	; 0x12c
   172e0:	ldr	r3, [sp, #356]	; 0x164
   172e4:	cmp	r2, r3
   172e8:	beq	17490 <__assert_fail@plt+0x5af0>
   172ec:	ldr	r4, [sp, #244]	; 0xf4
   172f0:	b	16c5c <__assert_fail@plt+0x52bc>
   172f4:	ldrb	r3, [sp, #280]	; 0x118
   172f8:	ldr	r4, [sp, #296]	; 0x128
   172fc:	cmp	r3, #0
   17300:	bne	17334 <__assert_fail@plt+0x5994>
   17304:	ldrb	r3, [r4]
   17308:	and	r2, r3, #31
   1730c:	lsr	r3, r3, #5
   17310:	ldr	r3, [r9, r3, lsl #2]
   17314:	lsr	r3, r3, r2
   17318:	tst	r3, #1
   1731c:	bne	17474 <__assert_fail@plt+0x5ad4>
   17320:	add	r0, sp, #284	; 0x11c
   17324:	bl	11604 <mbsinit@plt>
   17328:	cmp	r0, #0
   1732c:	beq	176d0 <__assert_fail@plt+0x5d30>
   17330:	strb	r5, [sp, #280]	; 0x118
   17334:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17338:	mov	r1, r0
   1733c:	mov	r0, r4
   17340:	bl	1cf34 <__assert_fail@plt+0xb594>
   17344:	add	r3, sp, #284	; 0x11c
   17348:	mov	r1, r4
   1734c:	mov	r2, r0
   17350:	add	r0, sp, #308	; 0x134
   17354:	bl	1f13c <__assert_fail@plt+0xd79c>
   17358:	cmn	r0, #1
   1735c:	str	r0, [sp, #300]	; 0x12c
   17360:	strbeq	r7, [sp, #304]	; 0x130
   17364:	streq	r5, [sp, #300]	; 0x12c
   17368:	strbeq	r5, [sp, #292]	; 0x124
   1736c:	beq	172dc <__assert_fail@plt+0x593c>
   17370:	cmn	r0, #2
   17374:	beq	174c0 <__assert_fail@plt+0x5b20>
   17378:	cmp	r0, #0
   1737c:	beq	174fc <__assert_fail@plt+0x5b5c>
   17380:	ldr	r4, [sp, #308]	; 0x134
   17384:	add	r0, sp, #284	; 0x11c
   17388:	strb	r5, [sp, #304]	; 0x130
   1738c:	bl	11604 <mbsinit@plt>
   17390:	strb	r5, [sp, #292]	; 0x124
   17394:	cmp	r0, #0
   17398:	strbne	r7, [sp, #280]	; 0x118
   1739c:	cmp	r4, #0
   173a0:	beq	16ce8 <__assert_fail@plt+0x5348>
   173a4:	ldrb	r3, [sp, #360]	; 0x168
   173a8:	cmp	r3, #0
   173ac:	beq	172dc <__assert_fail@plt+0x593c>
   173b0:	mov	r0, r4
   173b4:	bl	115f8 <towlower@plt>
   173b8:	mov	r4, r0
   173bc:	ldr	r0, [sp, #364]	; 0x16c
   173c0:	bl	115f8 <towlower@plt>
   173c4:	subs	r0, r4, r0
   173c8:	movne	r0, #1
   173cc:	cmp	r0, #0
   173d0:	add	r1, r8, #1
   173d4:	bne	172ec <__assert_fail@plt+0x594c>
   173d8:	ldr	r3, [sp, #296]	; 0x128
   173dc:	ldr	r2, [sp, #300]	; 0x12c
   173e0:	ldr	r4, [sp, #352]	; 0x160
   173e4:	add	r3, r3, r2
   173e8:	str	r3, [sp, #296]	; 0x128
   173ec:	ldrb	r3, [sp, #336]	; 0x150
   173f0:	ldr	r2, [sp, #356]	; 0x164
   173f4:	strb	r0, [sp, #292]	; 0x124
   173f8:	add	r4, r4, r2
   173fc:	cmp	r3, #0
   17400:	strb	r0, [sp, #348]	; 0x15c
   17404:	mov	r8, r1
   17408:	str	r4, [sp, #352]	; 0x160
   1740c:	beq	17268 <__assert_fail@plt+0x58c8>
   17410:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17414:	mov	r1, r0
   17418:	mov	r0, r4
   1741c:	bl	1cf34 <__assert_fail@plt+0xb594>
   17420:	add	r3, sp, #340	; 0x154
   17424:	mov	r1, r4
   17428:	mov	r2, r0
   1742c:	add	r0, sp, #364	; 0x16c
   17430:	bl	1f13c <__assert_fail@plt+0xd79c>
   17434:	cmn	r0, #1
   17438:	str	r0, [sp, #356]	; 0x164
   1743c:	strbeq	r7, [sp, #360]	; 0x168
   17440:	streq	r5, [sp, #356]	; 0x164
   17444:	beq	172bc <__assert_fail@plt+0x591c>
   17448:	cmn	r0, #2
   1744c:	beq	172ac <__assert_fail@plt+0x590c>
   17450:	cmp	r0, #0
   17454:	beq	174d8 <__assert_fail@plt+0x5b38>
   17458:	ldr	r4, [sp, #364]	; 0x16c
   1745c:	add	r0, sp, #340	; 0x154
   17460:	strb	r5, [sp, #360]	; 0x168
   17464:	bl	11604 <mbsinit@plt>
   17468:	cmp	r0, #0
   1746c:	strbne	r7, [sp, #336]	; 0x150
   17470:	b	17294 <__assert_fail@plt+0x58f4>
   17474:	str	r5, [sp, #300]	; 0x12c
   17478:	ldrb	r0, [r4]
   1747c:	strb	r5, [sp, #304]	; 0x130
   17480:	strb	r5, [sp, #292]	; 0x124
   17484:	str	r0, [sp, #308]	; 0x134
   17488:	mov	r4, r0
   1748c:	b	1739c <__assert_fail@plt+0x59fc>
   17490:	ldr	r1, [sp, #352]	; 0x160
   17494:	ldr	r0, [sp, #296]	; 0x128
   17498:	bl	1161c <memcmp@plt>
   1749c:	adds	r0, r0, #0
   174a0:	movne	r0, #1
   174a4:	b	173cc <__assert_fail@plt+0x5a2c>
   174a8:	add	r0, sp, #340	; 0x154
   174ac:	bl	11604 <mbsinit@plt>
   174b0:	cmp	r0, #0
   174b4:	beq	176d0 <__assert_fail@plt+0x5d30>
   174b8:	strb	r5, [sp, #336]	; 0x150
   174bc:	b	17410 <__assert_fail@plt+0x5a70>
   174c0:	ldr	r0, [sp, #296]	; 0x128
   174c4:	bl	117a8 <strlen@plt>
   174c8:	strb	r7, [sp, #304]	; 0x130
   174cc:	strb	r5, [sp, #292]	; 0x124
   174d0:	str	r0, [sp, #300]	; 0x12c
   174d4:	b	172dc <__assert_fail@plt+0x593c>
   174d8:	ldr	r3, [sp, #352]	; 0x160
   174dc:	str	r5, [sp, #356]	; 0x164
   174e0:	ldrb	r3, [r3]
   174e4:	cmp	r3, #0
   174e8:	bne	176ec <__assert_fail@plt+0x5d4c>
   174ec:	ldr	r4, [sp, #364]	; 0x16c
   174f0:	cmp	r4, #0
   174f4:	beq	1745c <__assert_fail@plt+0x5abc>
   174f8:	b	17220 <__assert_fail@plt+0x5880>
   174fc:	ldr	r3, [sp, #296]	; 0x128
   17500:	str	r5, [sp, #300]	; 0x12c
   17504:	ldrb	r3, [r3]
   17508:	cmp	r3, #0
   1750c:	bne	176ec <__assert_fail@plt+0x5d4c>
   17510:	ldr	r4, [sp, #308]	; 0x134
   17514:	cmp	r4, #0
   17518:	beq	17384 <__assert_fail@plt+0x59e4>
   1751c:	b	17220 <__assert_fail@plt+0x5880>
   17520:	ldr	r3, [sp, #240]	; 0xf0
   17524:	str	r5, [sp, #244]	; 0xf4
   17528:	ldrb	r3, [r3]
   1752c:	cmp	r3, #0
   17530:	bne	176ec <__assert_fail@plt+0x5d4c>
   17534:	ldr	r4, [sp, #252]	; 0xfc
   17538:	cmp	r4, #0
   1753c:	beq	16cc8 <__assert_fail@plt+0x5328>
   17540:	b	17220 <__assert_fail@plt+0x5880>
   17544:	add	r0, sp, #172	; 0xac
   17548:	bl	11604 <mbsinit@plt>
   1754c:	cmp	r0, #0
   17550:	beq	176d0 <__assert_fail@plt+0x5d30>
   17554:	strb	r5, [sp, #168]	; 0xa8
   17558:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   1755c:	mov	r1, r0
   17560:	mov	r0, r8
   17564:	bl	1cf34 <__assert_fail@plt+0xb594>
   17568:	add	r3, sp, #172	; 0xac
   1756c:	mov	r1, r8
   17570:	mov	r2, r0
   17574:	add	r0, sp, #196	; 0xc4
   17578:	bl	1f13c <__assert_fail@plt+0xd79c>
   1757c:	cmn	r0, #1
   17580:	str	r0, [sp, #188]	; 0xbc
   17584:	beq	1766c <__assert_fail@plt+0x5ccc>
   17588:	cmn	r0, #2
   1758c:	beq	17618 <__assert_fail@plt+0x5c78>
   17590:	cmp	r0, #0
   17594:	beq	17688 <__assert_fail@plt+0x5ce8>
   17598:	ldr	r4, [sp, #196]	; 0xc4
   1759c:	add	r0, sp, #172	; 0xac
   175a0:	strb	r5, [sp, #192]	; 0xc0
   175a4:	bl	11604 <mbsinit@plt>
   175a8:	strb	r5, [sp, #180]	; 0xb4
   175ac:	cmp	r0, #0
   175b0:	strbne	r7, [sp, #168]	; 0xa8
   175b4:	b	17040 <__assert_fail@plt+0x56a0>
   175b8:	ldr	r3, [sp, #128]	; 0x80
   175bc:	str	r5, [sp, #132]	; 0x84
   175c0:	ldrb	r3, [r3]
   175c4:	cmp	r3, #0
   175c8:	bne	176ec <__assert_fail@plt+0x5d4c>
   175cc:	ldr	r4, [sp, #140]	; 0x8c
   175d0:	cmp	r4, #0
   175d4:	beq	16d58 <__assert_fail@plt+0x53b8>
   175d8:	b	17220 <__assert_fail@plt+0x5880>
   175dc:	add	r3, sp, #88	; 0x58
   175e0:	mov	r2, r4
   175e4:	mov	r0, r3
   175e8:	add	r1, sp, #256	; 0x100
   175ec:	bl	115d4 <memcpy@plt>
   175f0:	mov	sl, r0
   175f4:	str	r0, [sp, #72]	; 0x48
   175f8:	b	16c24 <__assert_fail@plt+0x5284>
   175fc:	ldr	r4, [sp, #364]	; 0x16c
   17600:	add	r0, sp, #340	; 0x154
   17604:	strb	r5, [sp, #360]	; 0x168
   17608:	bl	11604 <mbsinit@plt>
   1760c:	cmp	r0, #0
   17610:	strbne	r7, [sp, #336]	; 0x150
   17614:	b	1713c <__assert_fail@plt+0x579c>
   17618:	ldr	r0, [sp, #184]	; 0xb8
   1761c:	bl	117a8 <strlen@plt>
   17620:	ldr	r3, [sp]
   17624:	mov	r6, sl
   17628:	strb	r7, [sp, #192]	; 0xc0
   1762c:	strb	r5, [sp, #180]	; 0xb4
   17630:	str	r3, [sp, #12]
   17634:	str	r0, [sp, #188]	; 0xbc
   17638:	b	16c00 <__assert_fail@plt+0x5260>
   1763c:	str	r5, [sp, #356]	; 0x164
   17640:	strb	r8, [sp, #360]	; 0x168
   17644:	ldr	r4, [sp, #352]	; 0x160
   17648:	mov	r3, r5
   1764c:	b	17248 <__assert_fail@plt+0x58a8>
   17650:	ldr	r4, [sp, #352]	; 0x160
   17654:	mov	r0, r4
   17658:	bl	117a8 <strlen@plt>
   1765c:	strb	r8, [sp, #360]	; 0x168
   17660:	str	r0, [sp, #356]	; 0x164
   17664:	mov	r3, r0
   17668:	b	17248 <__assert_fail@plt+0x58a8>
   1766c:	ldr	r3, [sp]
   17670:	str	r5, [sp, #188]	; 0xbc
   17674:	strb	r7, [sp, #192]	; 0xc0
   17678:	strb	r5, [sp, #180]	; 0xb4
   1767c:	mov	r6, sl
   17680:	str	r3, [sp, #12]
   17684:	b	16c00 <__assert_fail@plt+0x5260>
   17688:	ldr	r4, [sp, #184]	; 0xb8
   1768c:	str	r5, [sp, #188]	; 0xbc
   17690:	ldrb	r3, [r4]
   17694:	cmp	r3, #0
   17698:	bne	176ec <__assert_fail@plt+0x5d4c>
   1769c:	ldr	r4, [sp, #196]	; 0xc4
   176a0:	cmp	r4, #0
   176a4:	beq	1759c <__assert_fail@plt+0x5bfc>
   176a8:	b	17220 <__assert_fail@plt+0x5880>
   176ac:	ldr	r5, [sp, #132]	; 0x84
   176b0:	add	r3, sp, #48	; 0x30
   176b4:	mov	r2, r5
   176b8:	mov	r0, r3
   176bc:	bl	115d4 <memcpy@plt>
   176c0:	str	r0, [sp, #32]
   176c4:	b	16a64 <__assert_fail@plt+0x50c4>
   176c8:	mov	r0, r7
   176cc:	b	16d88 <__assert_fail@plt+0x53e8>
   176d0:	ldr	r3, [pc, #84]	; 1772c <__assert_fail@plt+0x5d8c>
   176d4:	mov	r2, #143	; 0x8f
   176d8:	ldr	r1, [pc, #80]	; 17730 <__assert_fail@plt+0x5d90>
   176dc:	ldr	r0, [pc, #84]	; 17738 <__assert_fail@plt+0x5d98>
   176e0:	bl	119a0 <__assert_fail@plt>
   176e4:	ldr	r0, [sp, #336]	; 0x150
   176e8:	b	16d88 <__assert_fail@plt+0x53e8>
   176ec:	ldr	r3, [pc, #56]	; 1772c <__assert_fail@plt+0x5d8c>
   176f0:	mov	r2, #171	; 0xab
   176f4:	ldr	r1, [pc, #52]	; 17730 <__assert_fail@plt+0x5d90>
   176f8:	ldr	r0, [pc, #60]	; 1773c <__assert_fail@plt+0x5d9c>
   176fc:	bl	119a0 <__assert_fail@plt>
   17700:	ldrb	r6, [sp, #180]	; 0xb4
   17704:	cmp	r6, #0
   17708:	beq	17720 <__assert_fail@plt+0x5d80>
   1770c:	ldrb	r3, [sp, #192]	; 0xc0
   17710:	cmp	r3, #0
   17714:	ldrne	r4, [sp, #196]	; 0xc4
   17718:	beq	16bf8 <__assert_fail@plt+0x5258>
   1771c:	b	17040 <__assert_fail@plt+0x56a0>
   17720:	ldr	r8, [sp, #184]	; 0xb8
   17724:	b	17000 <__assert_fail@plt+0x5660>
   17728:	andeq	r4, r3, r0, asr #1
   1772c:	andeq	r3, r3, r0, lsr #17
   17730:			; <UNDEFINED> instruction: 0x000338b4
   17734:	strdeq	r3, [r3], -r0
   17738:	andeq	r3, r3, r0, asr #17
   1773c:	ldrdeq	r3, [r3], -r8
   17740:	push	{r4, r5, r6, r7, r8, lr}
   17744:	sub	sp, sp, #56	; 0x38
   17748:	mov	r4, r0
   1774c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17750:	cmp	r0, #1
   17754:	bls	178c0 <__assert_fail@plt+0x5f20>
   17758:	mov	r3, #0
   1775c:	ldr	r8, [pc, #412]	; 17900 <__assert_fail@plt+0x5f60>
   17760:	mov	r5, r3
   17764:	mov	r6, r3
   17768:	mov	r7, #1
   1776c:	str	r4, [sp, #16]
   17770:	strb	r3, [sp]
   17774:	str	r3, [sp, #4]
   17778:	strb	r3, [sp, #12]
   1777c:	str	r3, [sp, #8]
   17780:	ldrb	r3, [sp]
   17784:	cmp	r3, #0
   17788:	bne	177e0 <__assert_fail@plt+0x5e40>
   1778c:	ldrb	r3, [r4]
   17790:	and	r2, r3, #31
   17794:	lsr	r3, r3, #5
   17798:	ldr	r3, [r8, r3, lsl #2]
   1779c:	lsr	r3, r3, r2
   177a0:	tst	r3, #1
   177a4:	beq	177cc <__assert_fail@plt+0x5e2c>
   177a8:	str	r7, [sp, #20]
   177ac:	ldrb	r4, [r4]
   177b0:	strb	r7, [sp, #24]
   177b4:	cmp	r4, #0
   177b8:	str	r4, [sp, #28]
   177bc:	bne	17840 <__assert_fail@plt+0x5ea0>
   177c0:	mov	r0, r5
   177c4:	add	sp, sp, #56	; 0x38
   177c8:	pop	{r4, r5, r6, r7, r8, pc}
   177cc:	add	r0, sp, #4
   177d0:	bl	11604 <mbsinit@plt>
   177d4:	cmp	r0, #0
   177d8:	beq	178d8 <__assert_fail@plt+0x5f38>
   177dc:	strb	r7, [sp]
   177e0:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   177e4:	mov	r1, r0
   177e8:	mov	r0, r4
   177ec:	bl	1cf34 <__assert_fail@plt+0xb594>
   177f0:	add	r3, sp, #4
   177f4:	mov	r1, r4
   177f8:	mov	r2, r0
   177fc:	add	r0, sp, #28
   17800:	bl	1f13c <__assert_fail@plt+0xd79c>
   17804:	cmn	r0, #1
   17808:	str	r0, [sp, #20]
   1780c:	beq	1785c <__assert_fail@plt+0x5ebc>
   17810:	cmn	r0, #2
   17814:	beq	178a4 <__assert_fail@plt+0x5f04>
   17818:	cmp	r0, #0
   1781c:	beq	17870 <__assert_fail@plt+0x5ed0>
   17820:	ldr	r4, [sp, #28]
   17824:	add	r0, sp, #4
   17828:	strb	r7, [sp, #24]
   1782c:	bl	11604 <mbsinit@plt>
   17830:	cmp	r0, #0
   17834:	strbne	r6, [sp]
   17838:	cmp	r4, #0
   1783c:	beq	177c0 <__assert_fail@plt+0x5e20>
   17840:	ldr	r4, [sp, #16]
   17844:	ldr	r3, [sp, #20]
   17848:	add	r4, r4, r3
   1784c:	add	r5, r5, #1
   17850:	strb	r6, [sp, #12]
   17854:	str	r4, [sp, #16]
   17858:	b	17780 <__assert_fail@plt+0x5de0>
   1785c:	str	r7, [sp, #20]
   17860:	strb	r6, [sp, #24]
   17864:	ldr	r4, [sp, #16]
   17868:	mov	r3, r7
   1786c:	b	17848 <__assert_fail@plt+0x5ea8>
   17870:	ldr	r4, [sp, #16]
   17874:	str	r7, [sp, #20]
   17878:	ldrb	r3, [r4]
   1787c:	cmp	r3, #0
   17880:	bne	178ec <__assert_fail@plt+0x5f4c>
   17884:	ldr	r4, [sp, #28]
   17888:	cmp	r4, #0
   1788c:	beq	17824 <__assert_fail@plt+0x5e84>
   17890:	ldr	r3, [pc, #108]	; 17904 <__assert_fail@plt+0x5f64>
   17894:	mov	r2, #172	; 0xac
   17898:	ldr	r1, [pc, #104]	; 17908 <__assert_fail@plt+0x5f68>
   1789c:	ldr	r0, [pc, #104]	; 1790c <__assert_fail@plt+0x5f6c>
   178a0:	bl	119a0 <__assert_fail@plt>
   178a4:	ldr	r4, [sp, #16]
   178a8:	mov	r0, r4
   178ac:	bl	117a8 <strlen@plt>
   178b0:	strb	r6, [sp, #24]
   178b4:	str	r0, [sp, #20]
   178b8:	mov	r3, r0
   178bc:	b	17848 <__assert_fail@plt+0x5ea8>
   178c0:	mov	r0, r4
   178c4:	bl	117a8 <strlen@plt>
   178c8:	mov	r5, r0
   178cc:	mov	r0, r5
   178d0:	add	sp, sp, #56	; 0x38
   178d4:	pop	{r4, r5, r6, r7, r8, pc}
   178d8:	ldr	r3, [pc, #36]	; 17904 <__assert_fail@plt+0x5f64>
   178dc:	mov	r2, #143	; 0x8f
   178e0:	ldr	r1, [pc, #32]	; 17908 <__assert_fail@plt+0x5f68>
   178e4:	ldr	r0, [pc, #36]	; 17910 <__assert_fail@plt+0x5f70>
   178e8:	bl	119a0 <__assert_fail@plt>
   178ec:	ldr	r3, [pc, #16]	; 17904 <__assert_fail@plt+0x5f64>
   178f0:	mov	r2, #171	; 0xab
   178f4:	ldr	r1, [pc, #12]	; 17908 <__assert_fail@plt+0x5f68>
   178f8:	ldr	r0, [pc, #20]	; 17914 <__assert_fail@plt+0x5f74>
   178fc:	bl	119a0 <__assert_fail@plt>
   17900:	andeq	r4, r3, r0, asr #1
   17904:	andeq	r3, r3, r4, lsl #18
   17908:			; <UNDEFINED> instruction: 0x000338b4
   1790c:	strdeq	r3, [r3], -r0
   17910:	andeq	r3, r3, r0, asr #17
   17914:	ldrdeq	r3, [r3], -r8
   17918:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1791c:	mov	r6, r2
   17920:	lsrs	r2, r6, #30
   17924:	movne	ip, #1
   17928:	moveq	ip, #0
   1792c:	lsls	r2, r6, #2
   17930:	add	fp, sp, #28
   17934:	bmi	17940 <__assert_fail@plt+0x5fa0>
   17938:	cmp	ip, #0
   1793c:	beq	1794c <__assert_fail@plt+0x5fac>
   17940:	mov	r0, #0
   17944:	sub	sp, fp, #28
   17948:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1794c:	cmp	r2, #4016	; 0xfb0
   17950:	mov	r5, r0
   17954:	mov	r4, r1
   17958:	mov	r7, r3
   1795c:	bls	17a30 <__assert_fail@plt+0x6090>
   17960:	mov	r0, r2
   17964:	bl	31adc <__assert_fail@plt+0x2013c>
   17968:	cmp	r0, #0
   1796c:	beq	17940 <__assert_fail@plt+0x5fa0>
   17970:	cmp	r6, #2
   17974:	mov	r3, #1
   17978:	str	r3, [r0, #4]
   1797c:	movhi	r8, r4
   17980:	addhi	r2, r0, #8
   17984:	movhi	ip, #0
   17988:	movhi	r3, #2
   1798c:	bls	179d8 <__assert_fail@plt+0x6038>
   17990:	ldrb	r1, [r8, #1]!
   17994:	ldrb	lr, [r4, ip]
   17998:	cmp	lr, r1
   1799c:	bne	179b8 <__assert_fail@plt+0x6018>
   179a0:	b	17a48 <__assert_fail@plt+0x60a8>
   179a4:	ldr	lr, [r0, ip, lsl #2]
   179a8:	sub	ip, ip, lr
   179ac:	ldrb	lr, [r4, ip]
   179b0:	cmp	lr, r1
   179b4:	beq	17a48 <__assert_fail@plt+0x60a8>
   179b8:	cmp	ip, #0
   179bc:	bne	179a4 <__assert_fail@plt+0x6004>
   179c0:	mov	ip, #0
   179c4:	str	r3, [r2]
   179c8:	add	r3, r3, #1
   179cc:	cmp	r6, r3
   179d0:	add	r2, r2, #4
   179d4:	bne	17990 <__assert_fail@plt+0x5ff0>
   179d8:	mov	r2, #0
   179dc:	str	r2, [r7]
   179e0:	ldrb	r3, [r5]
   179e4:	mov	ip, r5
   179e8:	cmp	r3, #0
   179ec:	beq	17a20 <__assert_fail@plt+0x6080>
   179f0:	ldrb	r1, [r4, r2]
   179f4:	cmp	r1, r3
   179f8:	beq	17a58 <__assert_fail@plt+0x60b8>
   179fc:	cmp	r2, #0
   17a00:	addeq	r5, r5, #1
   17a04:	ldrbeq	r3, [ip, #1]
   17a08:	ldrne	r1, [r0, r2, lsl #2]
   17a0c:	addeq	ip, ip, #1
   17a10:	addne	r5, r5, r1
   17a14:	subne	r2, r2, r1
   17a18:	cmp	r3, #0
   17a1c:	bne	179f0 <__assert_fail@plt+0x6050>
   17a20:	bl	31b2c <__assert_fail@plt+0x2018c>
   17a24:	mov	r0, #1
   17a28:	sub	sp, fp, #28
   17a2c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17a30:	add	r3, r2, #29
   17a34:	bic	r3, r3, #7
   17a38:	sub	sp, sp, r3
   17a3c:	add	r0, sp, #15
   17a40:	bic	r0, r0, #15
   17a44:	b	17968 <__assert_fail@plt+0x5fc8>
   17a48:	add	ip, ip, #1
   17a4c:	sub	r1, r3, ip
   17a50:	str	r1, [r2]
   17a54:	b	179c8 <__assert_fail@plt+0x6028>
   17a58:	add	r2, r2, #1
   17a5c:	cmp	r6, r2
   17a60:	add	r1, ip, #1
   17a64:	ldrbne	r3, [ip, #1]
   17a68:	movne	ip, r1
   17a6c:	bne	179e8 <__assert_fail@plt+0x6048>
   17a70:	str	r5, [r7]
   17a74:	bl	31b2c <__assert_fail@plt+0x2018c>
   17a78:	mov	r0, #1
   17a7c:	b	17a28 <__assert_fail@plt+0x6088>
   17a80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a84:	add	fp, sp, #32
   17a88:	sub	sp, sp, #188	; 0xbc
   17a8c:	str	r0, [fp, #-212]	; 0xffffff2c
   17a90:	mov	r0, r1
   17a94:	mov	r4, r1
   17a98:	str	r2, [fp, #-220]	; 0xffffff24
   17a9c:	bl	17740 <__assert_fail@plt+0x5da0>
   17aa0:	mov	r3, #44	; 0x2c
   17aa4:	str	r0, [fp, #-208]	; 0xffffff30
   17aa8:	umull	r0, r1, r0, r3
   17aac:	adds	r2, r1, #0
   17ab0:	movne	r2, #1
   17ab4:	cmp	r0, #0
   17ab8:	blt	17ac4 <__assert_fail@plt+0x6124>
   17abc:	cmp	r2, #0
   17ac0:	beq	17ad0 <__assert_fail@plt+0x6130>
   17ac4:	mov	r0, #0
   17ac8:	sub	sp, fp, #32
   17acc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ad0:	ldr	r2, [fp, #-208]	; 0xffffff30
   17ad4:	mul	r0, r3, r2
   17ad8:	cmp	r0, #4016	; 0xfb0
   17adc:	bls	17d88 <__assert_fail@plt+0x63e8>
   17ae0:	bl	31adc <__assert_fail@plt+0x2013c>
   17ae4:	mov	r3, r0
   17ae8:	str	r0, [fp, #-216]	; 0xffffff28
   17aec:	cmp	r3, #0
   17af0:	beq	17ac4 <__assert_fail@plt+0x6124>
   17af4:	ldr	r2, [fp, #-208]	; 0xffffff30
   17af8:	add	r6, r3, #16
   17afc:	mov	r7, #1
   17b00:	add	sl, r2, r2, lsl #2
   17b04:	mov	r8, #0
   17b08:	add	sl, r3, sl, lsl #3
   17b0c:	str	r4, [fp, #-188]	; 0xffffff44
   17b10:	str	r8, [fp, #-196]	; 0xffffff3c
   17b14:	strb	r8, [fp, #-204]	; 0xffffff34
   17b18:	str	r8, [fp, #-200]	; 0xffffff38
   17b1c:	strb	r8, [fp, #-192]	; 0xffffff40
   17b20:	ldrb	r3, [fp, #-204]	; 0xffffff34
   17b24:	cmp	r3, #0
   17b28:	bne	17f64 <__assert_fail@plt+0x65c4>
   17b2c:	ldrb	r3, [r4]
   17b30:	ldr	r1, [pc, #1936]	; 182c8 <__assert_fail@plt+0x6928>
   17b34:	and	r2, r3, #31
   17b38:	lsr	r3, r3, #5
   17b3c:	ldr	r3, [r1, r3, lsl #2]
   17b40:	lsr	r3, r3, r2
   17b44:	tst	r3, #1
   17b48:	beq	17f50 <__assert_fail@plt+0x65b0>
   17b4c:	str	r7, [fp, #-184]	; 0xffffff48
   17b50:	ldrb	r4, [r4]
   17b54:	strb	r7, [fp, #-180]	; 0xffffff4c
   17b58:	strb	r7, [fp, #-192]	; 0xffffff40
   17b5c:	cmp	r4, #0
   17b60:	str	r4, [fp, #-176]	; 0xffffff50
   17b64:	bne	17fd0 <__assert_fail@plt+0x6630>
   17b68:	ldr	r3, [fp, #-208]	; 0xffffff30
   17b6c:	str	r7, [sl, #4]
   17b70:	cmp	r3, #2
   17b74:	bls	17c68 <__assert_fail@plt+0x62c8>
   17b78:	ldr	r8, [fp, #-216]	; 0xffffff28
   17b7c:	add	r7, sl, #8
   17b80:	mov	r5, r8
   17b84:	mov	r6, #2
   17b88:	ldrb	r3, [r5, #48]	; 0x30
   17b8c:	cmp	r3, #0
   17b90:	bne	17c0c <__assert_fail@plt+0x626c>
   17b94:	ldr	r9, [r5, #44]	; 0x2c
   17b98:	b	17bac <__assert_fail@plt+0x620c>
   17b9c:	cmp	r4, #0
   17ba0:	beq	17be0 <__assert_fail@plt+0x6240>
   17ba4:	ldr	r3, [sl, r4, lsl #2]
   17ba8:	sub	r4, r4, r3
   17bac:	add	r3, r4, r4, lsl #2
   17bb0:	add	r2, r8, r3, lsl #3
   17bb4:	ldr	r2, [r2, #4]
   17bb8:	cmp	r2, r9
   17bbc:	bne	17b9c <__assert_fail@plt+0x61fc>
   17bc0:	ldr	r1, [r8, r3, lsl #3]
   17bc4:	mov	r2, r9
   17bc8:	ldr	r0, [r5, #40]	; 0x28
   17bcc:	bl	1161c <memcmp@plt>
   17bd0:	cmp	r0, #0
   17bd4:	beq	17c44 <__assert_fail@plt+0x62a4>
   17bd8:	cmp	r4, #0
   17bdc:	bne	17ba4 <__assert_fail@plt+0x6204>
   17be0:	str	r6, [r7]
   17be4:	mov	r4, #0
   17be8:	b	17c50 <__assert_fail@plt+0x62b0>
   17bec:	ldr	r3, [r3, #12]
   17bf0:	ldr	r2, [r5, #52]	; 0x34
   17bf4:	cmp	r2, r3
   17bf8:	beq	17c44 <__assert_fail@plt+0x62a4>
   17bfc:	cmp	r4, #0
   17c00:	beq	17be0 <__assert_fail@plt+0x6240>
   17c04:	ldr	r3, [sl, r4, lsl #2]
   17c08:	sub	r4, r4, r3
   17c0c:	add	r3, r4, r4, lsl #2
   17c10:	add	r3, r8, r3, lsl #3
   17c14:	ldrb	r2, [r3, #8]
   17c18:	cmp	r2, #0
   17c1c:	bne	17bec <__assert_fail@plt+0x624c>
   17c20:	ldr	r2, [r5, #44]	; 0x2c
   17c24:	ldr	r1, [r3, #4]
   17c28:	cmp	r2, r1
   17c2c:	bne	17bfc <__assert_fail@plt+0x625c>
   17c30:	ldr	r1, [r3]
   17c34:	ldr	r0, [r5, #40]	; 0x28
   17c38:	bl	1161c <memcmp@plt>
   17c3c:	cmp	r0, #0
   17c40:	bne	17bfc <__assert_fail@plt+0x625c>
   17c44:	add	r4, r4, #1
   17c48:	sub	r3, r6, r4
   17c4c:	str	r3, [r7]
   17c50:	ldr	r3, [fp, #-208]	; 0xffffff30
   17c54:	add	r6, r6, #1
   17c58:	cmp	r3, r6
   17c5c:	add	r5, r5, #40	; 0x28
   17c60:	add	r7, r7, #4
   17c64:	bne	17b88 <__assert_fail@plt+0x61e8>
   17c68:	ldr	r1, [fp, #-212]	; 0xffffff2c
   17c6c:	mov	r2, #0
   17c70:	str	r1, [fp, #-132]	; 0xffffff7c
   17c74:	str	r1, [fp, #-76]	; 0xffffffb4
   17c78:	str	sl, [fp, #-212]	; 0xffffff2c
   17c7c:	ldr	r1, [fp, #-220]	; 0xffffff24
   17c80:	ldr	r9, [pc, #1600]	; 182c8 <__assert_fail@plt+0x6928>
   17c84:	ldr	sl, [fp, #-216]	; 0xffffff28
   17c88:	mov	r3, r2
   17c8c:	mov	r8, r2
   17c90:	mov	r7, r2
   17c94:	mov	r6, #1
   17c98:	str	r2, [r1]
   17c9c:	strb	r2, [fp, #-148]	; 0xffffff6c
   17ca0:	str	r2, [fp, #-144]	; 0xffffff70
   17ca4:	strb	r2, [fp, #-136]	; 0xffffff78
   17ca8:	strb	r2, [fp, #-92]	; 0xffffffa4
   17cac:	str	r2, [fp, #-88]	; 0xffffffa8
   17cb0:	strb	r2, [fp, #-80]	; 0xffffffb0
   17cb4:	str	r2, [fp, #-140]	; 0xffffff74
   17cb8:	str	r2, [fp, #-84]	; 0xffffffac
   17cbc:	cmp	r3, #0
   17cc0:	bne	17da4 <__assert_fail@plt+0x6404>
   17cc4:	ldr	r5, [fp, #-76]	; 0xffffffb4
   17cc8:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   17ccc:	cmp	r3, #0
   17cd0:	bne	17d04 <__assert_fail@plt+0x6364>
   17cd4:	ldrb	r3, [r5]
   17cd8:	and	r2, r3, #31
   17cdc:	lsr	r3, r3, #5
   17ce0:	ldr	r3, [r9, r3, lsl #2]
   17ce4:	lsr	r3, r3, r2
   17ce8:	tst	r3, #1
   17cec:	bne	18014 <__assert_fail@plt+0x6674>
   17cf0:	sub	r0, fp, #88	; 0x58
   17cf4:	bl	11604 <mbsinit@plt>
   17cf8:	cmp	r0, #0
   17cfc:	beq	182a0 <__assert_fail@plt+0x6900>
   17d00:	strb	r6, [fp, #-92]	; 0xffffffa4
   17d04:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17d08:	mov	r1, r0
   17d0c:	mov	r0, r5
   17d10:	bl	1cf34 <__assert_fail@plt+0xb594>
   17d14:	sub	r3, fp, #88	; 0x58
   17d18:	mov	r1, r5
   17d1c:	mov	r2, r0
   17d20:	sub	r0, fp, #64	; 0x40
   17d24:	bl	1f13c <__assert_fail@plt+0xd79c>
   17d28:	cmn	r0, #1
   17d2c:	str	r0, [fp, #-72]	; 0xffffffb8
   17d30:	strbeq	r7, [fp, #-68]	; 0xffffffbc
   17d34:	streq	r6, [fp, #-72]	; 0xffffffb8
   17d38:	strbeq	r6, [fp, #-80]	; 0xffffffb0
   17d3c:	beq	17db4 <__assert_fail@plt+0x6414>
   17d40:	cmn	r0, #2
   17d44:	beq	18130 <__assert_fail@plt+0x6790>
   17d48:	cmp	r0, #0
   17d4c:	beq	18228 <__assert_fail@plt+0x6888>
   17d50:	ldr	r4, [fp, #-64]	; 0xffffffc0
   17d54:	sub	r0, fp, #88	; 0x58
   17d58:	strb	r6, [fp, #-68]	; 0xffffffbc
   17d5c:	bl	11604 <mbsinit@plt>
   17d60:	strb	r6, [fp, #-80]	; 0xffffffb0
   17d64:	cmp	r0, #0
   17d68:	strbne	r7, [fp, #-92]	; 0xffffffa4
   17d6c:	cmp	r4, #0
   17d70:	bne	18034 <__assert_fail@plt+0x6694>
   17d74:	ldr	r0, [fp, #-216]	; 0xffffff28
   17d78:	bl	31b2c <__assert_fail@plt+0x2018c>
   17d7c:	mov	r0, #1
   17d80:	sub	sp, fp, #32
   17d84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d88:	add	r3, r0, #29
   17d8c:	bic	r3, r3, #7
   17d90:	sub	sp, sp, r3
   17d94:	add	r3, sp, #15
   17d98:	bic	r3, r3, #15
   17d9c:	str	r3, [fp, #-216]	; 0xffffff28
   17da0:	b	17aec <__assert_fail@plt+0x614c>
   17da4:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   17da8:	cmp	r3, #0
   17dac:	ldrne	r4, [fp, #-64]	; 0xffffffc0
   17db0:	bne	17d6c <__assert_fail@plt+0x63cc>
   17db4:	add	r3, r8, r8, lsl #2
   17db8:	add	r3, sl, r3, lsl #3
   17dbc:	ldr	r2, [r3, #4]
   17dc0:	ldr	r4, [fp, #-72]	; 0xffffffb8
   17dc4:	cmp	r2, r4
   17dc8:	beq	180c4 <__assert_fail@plt+0x6724>
   17dcc:	cmp	r8, #0
   17dd0:	beq	1807c <__assert_fail@plt+0x66dc>
   17dd4:	ldr	r3, [fp, #-212]	; 0xffffff2c
   17dd8:	ldr	r5, [r3, r8, lsl #2]
   17ddc:	cmp	r5, #0
   17de0:	sub	r8, r8, r5
   17de4:	beq	17da4 <__assert_fail@plt+0x6404>
   17de8:	ldrb	r3, [fp, #-136]	; 0xffffff78
   17dec:	cmp	r3, #0
   17df0:	bne	17e9c <__assert_fail@plt+0x64fc>
   17df4:	ldr	r4, [fp, #-132]	; 0xffffff7c
   17df8:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   17dfc:	cmp	r3, #0
   17e00:	bne	17e34 <__assert_fail@plt+0x6494>
   17e04:	ldrb	r3, [r4]
   17e08:	and	r2, r3, #31
   17e0c:	lsr	r3, r3, #5
   17e10:	ldr	r3, [r9, r3, lsl #2]
   17e14:	lsr	r3, r3, r2
   17e18:	tst	r3, #1
   17e1c:	bne	17ed0 <__assert_fail@plt+0x6530>
   17e20:	sub	r0, fp, #144	; 0x90
   17e24:	bl	11604 <mbsinit@plt>
   17e28:	cmp	r0, #0
   17e2c:	beq	182a0 <__assert_fail@plt+0x6900>
   17e30:	strb	r6, [fp, #-148]	; 0xffffff6c
   17e34:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17e38:	mov	r1, r0
   17e3c:	mov	r0, r4
   17e40:	bl	1cf34 <__assert_fail@plt+0xb594>
   17e44:	sub	r3, fp, #144	; 0x90
   17e48:	mov	r1, r4
   17e4c:	mov	r2, r0
   17e50:	sub	r0, fp, #120	; 0x78
   17e54:	bl	1f13c <__assert_fail@plt+0xd79c>
   17e58:	cmn	r0, #1
   17e5c:	str	r0, [fp, #-128]	; 0xffffff80
   17e60:	beq	17eec <__assert_fail@plt+0x654c>
   17e64:	cmn	r0, #2
   17e68:	beq	17f00 <__assert_fail@plt+0x6560>
   17e6c:	cmp	r0, #0
   17e70:	beq	17f1c <__assert_fail@plt+0x657c>
   17e74:	ldr	r4, [fp, #-120]	; 0xffffff88
   17e78:	sub	r0, fp, #144	; 0x90
   17e7c:	strb	r6, [fp, #-124]	; 0xffffff84
   17e80:	bl	11604 <mbsinit@plt>
   17e84:	strb	r6, [fp, #-136]	; 0xffffff78
   17e88:	cmp	r0, #0
   17e8c:	strbne	r7, [fp, #-148]	; 0xffffff6c
   17e90:	cmp	r4, #0
   17e94:	bne	17eac <__assert_fail@plt+0x650c>
   17e98:	bl	11964 <abort@plt>
   17e9c:	ldrb	r3, [fp, #-124]	; 0xffffff84
   17ea0:	cmp	r3, #0
   17ea4:	ldrne	r4, [fp, #-120]	; 0xffffff88
   17ea8:	bne	17e90 <__assert_fail@plt+0x64f0>
   17eac:	ldr	r4, [fp, #-132]	; 0xffffff7c
   17eb0:	ldr	r3, [fp, #-128]	; 0xffffff80
   17eb4:	subs	r5, r5, #1
   17eb8:	add	r4, r4, r3
   17ebc:	strb	r7, [fp, #-136]	; 0xffffff78
   17ec0:	str	r4, [fp, #-132]	; 0xffffff7c
   17ec4:	ldrbeq	r3, [fp, #-80]	; 0xffffffb0
   17ec8:	bne	17df8 <__assert_fail@plt+0x6458>
   17ecc:	b	17cbc <__assert_fail@plt+0x631c>
   17ed0:	str	r6, [fp, #-128]	; 0xffffff80
   17ed4:	ldrb	r3, [r4]
   17ed8:	strb	r6, [fp, #-124]	; 0xffffff84
   17edc:	strb	r6, [fp, #-136]	; 0xffffff78
   17ee0:	str	r3, [fp, #-120]	; 0xffffff88
   17ee4:	mov	r4, r3
   17ee8:	b	17e90 <__assert_fail@plt+0x64f0>
   17eec:	str	r6, [fp, #-128]	; 0xffffff80
   17ef0:	strb	r7, [fp, #-124]	; 0xffffff84
   17ef4:	ldr	r4, [fp, #-132]	; 0xffffff7c
   17ef8:	mov	r3, r6
   17efc:	b	17eb4 <__assert_fail@plt+0x6514>
   17f00:	ldr	r4, [fp, #-132]	; 0xffffff7c
   17f04:	mov	r0, r4
   17f08:	bl	117a8 <strlen@plt>
   17f0c:	strb	r7, [fp, #-124]	; 0xffffff84
   17f10:	str	r0, [fp, #-128]	; 0xffffff80
   17f14:	mov	r3, r0
   17f18:	b	17eb4 <__assert_fail@plt+0x6514>
   17f1c:	ldr	r4, [fp, #-132]	; 0xffffff7c
   17f20:	str	r6, [fp, #-128]	; 0xffffff80
   17f24:	ldrb	r3, [r4]
   17f28:	cmp	r3, #0
   17f2c:	bne	182b4 <__assert_fail@plt+0x6914>
   17f30:	ldr	r4, [fp, #-120]	; 0xffffff88
   17f34:	cmp	r4, #0
   17f38:	beq	17e78 <__assert_fail@plt+0x64d8>
   17f3c:	ldr	r3, [pc, #904]	; 182cc <__assert_fail@plt+0x692c>
   17f40:	mov	r2, #172	; 0xac
   17f44:	ldr	r1, [pc, #900]	; 182d0 <__assert_fail@plt+0x6930>
   17f48:	ldr	r0, [pc, #900]	; 182d4 <__assert_fail@plt+0x6934>
   17f4c:	bl	119a0 <__assert_fail@plt>
   17f50:	sub	r0, fp, #200	; 0xc8
   17f54:	bl	11604 <mbsinit@plt>
   17f58:	cmp	r0, #0
   17f5c:	beq	182a0 <__assert_fail@plt+0x6900>
   17f60:	strb	r7, [fp, #-204]	; 0xffffff34
   17f64:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17f68:	mov	r1, r0
   17f6c:	mov	r0, r4
   17f70:	bl	1cf34 <__assert_fail@plt+0xb594>
   17f74:	sub	r3, fp, #200	; 0xc8
   17f78:	mov	r1, r4
   17f7c:	mov	r2, r0
   17f80:	sub	r0, fp, #176	; 0xb0
   17f84:	bl	1f13c <__assert_fail@plt+0xd79c>
   17f88:	cmn	r0, #1
   17f8c:	str	r0, [fp, #-184]	; 0xffffff48
   17f90:	strbeq	r8, [fp, #-180]	; 0xffffff4c
   17f94:	streq	r7, [fp, #-184]	; 0xffffff48
   17f98:	beq	18070 <__assert_fail@plt+0x66d0>
   17f9c:	cmn	r0, #2
   17fa0:	beq	18060 <__assert_fail@plt+0x66c0>
   17fa4:	cmp	r0, #0
   17fa8:	beq	1810c <__assert_fail@plt+0x676c>
   17fac:	ldr	r4, [fp, #-176]	; 0xffffff50
   17fb0:	sub	r0, fp, #200	; 0xc8
   17fb4:	strb	r7, [fp, #-180]	; 0xffffff4c
   17fb8:	bl	11604 <mbsinit@plt>
   17fbc:	strb	r7, [fp, #-192]	; 0xffffff40
   17fc0:	cmp	r0, #0
   17fc4:	strbne	r8, [fp, #-204]	; 0xffffff34
   17fc8:	cmp	r4, #0
   17fcc:	beq	17b68 <__assert_fail@plt+0x61c8>
   17fd0:	mov	r9, r7
   17fd4:	ldr	r4, [fp, #-188]	; 0xffffff44
   17fd8:	sub	r3, fp, #172	; 0xac
   17fdc:	cmp	r4, r3
   17fe0:	strne	r4, [r6, #-16]
   17fe4:	ldrne	r5, [fp, #-184]	; 0xffffff48
   17fe8:	beq	181f0 <__assert_fail@plt+0x6850>
   17fec:	cmp	r9, #0
   17ff0:	add	r4, r4, r5
   17ff4:	ldrne	r3, [fp, #-176]	; 0xffffff50
   17ff8:	str	r5, [r6, #-12]
   17ffc:	strb	r9, [r6, #-8]
   18000:	strne	r3, [r6, #-4]
   18004:	str	r4, [fp, #-188]	; 0xffffff44
   18008:	add	r6, r6, #40	; 0x28
   1800c:	strb	r8, [fp, #-192]	; 0xffffff40
   18010:	b	17b20 <__assert_fail@plt+0x6180>
   18014:	str	r6, [fp, #-72]	; 0xffffffb8
   18018:	ldrb	r3, [r5]
   1801c:	strb	r6, [fp, #-68]	; 0xffffffbc
   18020:	strb	r6, [fp, #-80]	; 0xffffffb0
   18024:	mov	r4, r3
   18028:	cmp	r4, #0
   1802c:	str	r3, [fp, #-64]	; 0xffffffc0
   18030:	beq	17d74 <__assert_fail@plt+0x63d4>
   18034:	add	r3, r8, r8, lsl #2
   18038:	add	r3, sl, r3, lsl #3
   1803c:	ldrb	r2, [r3, #8]
   18040:	cmp	r2, #0
   18044:	beq	17dbc <__assert_fail@plt+0x641c>
   18048:	ldr	r3, [r3, #12]
   1804c:	cmp	r4, r3
   18050:	bne	17dcc <__assert_fail@plt+0x642c>
   18054:	ldr	r4, [fp, #-72]	; 0xffffffb8
   18058:	ldr	r5, [fp, #-76]	; 0xffffffb4
   1805c:	b	180e0 <__assert_fail@plt+0x6740>
   18060:	ldr	r0, [fp, #-188]	; 0xffffff44
   18064:	bl	117a8 <strlen@plt>
   18068:	strb	r8, [fp, #-180]	; 0xffffff4c
   1806c:	str	r0, [fp, #-184]	; 0xffffff48
   18070:	strb	r7, [fp, #-192]	; 0xffffff40
   18074:	mov	r9, r8
   18078:	b	17fd4 <__assert_fail@plt+0x6634>
   1807c:	ldrb	r3, [fp, #-136]	; 0xffffff78
   18080:	cmp	r3, #0
   18084:	beq	18148 <__assert_fail@plt+0x67a8>
   18088:	ldrb	r3, [fp, #-124]	; 0xffffff84
   1808c:	cmp	r3, #0
   18090:	ldrne	r4, [fp, #-120]	; 0xffffff88
   18094:	bne	181e4 <__assert_fail@plt+0x6844>
   18098:	ldr	r4, [fp, #-132]	; 0xffffff7c
   1809c:	ldr	r3, [fp, #-128]	; 0xffffff80
   180a0:	ldr	r5, [fp, #-76]	; 0xffffffb4
   180a4:	add	r4, r4, r3
   180a8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   180ac:	strb	r7, [fp, #-136]	; 0xffffff78
   180b0:	add	r5, r5, r3
   180b4:	strb	r7, [fp, #-80]	; 0xffffffb0
   180b8:	str	r4, [fp, #-132]	; 0xffffff7c
   180bc:	str	r5, [fp, #-76]	; 0xffffffb4
   180c0:	b	17cc8 <__assert_fail@plt+0x6328>
   180c4:	ldr	r5, [fp, #-76]	; 0xffffffb4
   180c8:	ldr	r0, [r3]
   180cc:	mov	r1, r5
   180d0:	mov	r2, r4
   180d4:	bl	1161c <memcmp@plt>
   180d8:	cmp	r0, #0
   180dc:	bne	17dcc <__assert_fail@plt+0x642c>
   180e0:	ldr	r3, [fp, #-208]	; 0xffffff30
   180e4:	add	r8, r8, #1
   180e8:	add	r5, r5, r4
   180ec:	cmp	r3, r8
   180f0:	str	r5, [fp, #-76]	; 0xffffffb4
   180f4:	strb	r7, [fp, #-80]	; 0xffffffb0
   180f8:	bne	17cc8 <__assert_fail@plt+0x6328>
   180fc:	ldr	r2, [fp, #-220]	; 0xffffff24
   18100:	ldr	r3, [fp, #-132]	; 0xffffff7c
   18104:	str	r3, [r2]
   18108:	b	17d74 <__assert_fail@plt+0x63d4>
   1810c:	ldr	r3, [fp, #-188]	; 0xffffff44
   18110:	str	r7, [fp, #-184]	; 0xffffff48
   18114:	ldrb	r3, [r3]
   18118:	cmp	r3, #0
   1811c:	bne	182b4 <__assert_fail@plt+0x6914>
   18120:	ldr	r4, [fp, #-176]	; 0xffffff50
   18124:	cmp	r4, #0
   18128:	beq	17fb0 <__assert_fail@plt+0x6610>
   1812c:	b	17f3c <__assert_fail@plt+0x659c>
   18130:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18134:	bl	117a8 <strlen@plt>
   18138:	strb	r7, [fp, #-68]	; 0xffffffbc
   1813c:	strb	r6, [fp, #-80]	; 0xffffffb0
   18140:	str	r0, [fp, #-72]	; 0xffffffb8
   18144:	b	17db4 <__assert_fail@plt+0x6414>
   18148:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   1814c:	ldr	r4, [fp, #-132]	; 0xffffff7c
   18150:	cmp	r3, #0
   18154:	bne	18188 <__assert_fail@plt+0x67e8>
   18158:	ldrb	r3, [r4]
   1815c:	and	r2, r3, #31
   18160:	lsr	r3, r3, #5
   18164:	ldr	r3, [r9, r3, lsl #2]
   18168:	lsr	r3, r3, r2
   1816c:	tst	r3, #1
   18170:	bne	1820c <__assert_fail@plt+0x686c>
   18174:	sub	r0, fp, #144	; 0x90
   18178:	bl	11604 <mbsinit@plt>
   1817c:	cmp	r0, #0
   18180:	beq	182a0 <__assert_fail@plt+0x6900>
   18184:	strb	r6, [fp, #-148]	; 0xffffff6c
   18188:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   1818c:	mov	r1, r0
   18190:	mov	r0, r4
   18194:	bl	1cf34 <__assert_fail@plt+0xb594>
   18198:	sub	r3, fp, #144	; 0x90
   1819c:	mov	r1, r4
   181a0:	mov	r2, r0
   181a4:	sub	r0, fp, #120	; 0x78
   181a8:	bl	1f13c <__assert_fail@plt+0xd79c>
   181ac:	cmn	r0, #1
   181b0:	str	r0, [fp, #-128]	; 0xffffff80
   181b4:	beq	1824c <__assert_fail@plt+0x68ac>
   181b8:	cmn	r0, #2
   181bc:	beq	18260 <__assert_fail@plt+0x68c0>
   181c0:	cmp	r0, #0
   181c4:	beq	1827c <__assert_fail@plt+0x68dc>
   181c8:	ldr	r4, [fp, #-120]	; 0xffffff88
   181cc:	sub	r0, fp, #144	; 0x90
   181d0:	strb	r6, [fp, #-124]	; 0xffffff84
   181d4:	bl	11604 <mbsinit@plt>
   181d8:	strb	r6, [fp, #-136]	; 0xffffff78
   181dc:	cmp	r0, #0
   181e0:	strbne	r7, [fp, #-148]	; 0xffffff6c
   181e4:	cmp	r4, #0
   181e8:	beq	17e98 <__assert_fail@plt+0x64f8>
   181ec:	b	18098 <__assert_fail@plt+0x66f8>
   181f0:	ldr	r5, [fp, #-184]	; 0xffffff48
   181f4:	sub	r1, fp, #172	; 0xac
   181f8:	mov	r2, r5
   181fc:	mov	r0, r6
   18200:	bl	115d4 <memcpy@plt>
   18204:	str	r6, [r6, #-16]
   18208:	b	17fec <__assert_fail@plt+0x664c>
   1820c:	str	r6, [fp, #-128]	; 0xffffff80
   18210:	ldrb	r3, [r4]
   18214:	strb	r6, [fp, #-124]	; 0xffffff84
   18218:	strb	r6, [fp, #-136]	; 0xffffff78
   1821c:	str	r3, [fp, #-120]	; 0xffffff88
   18220:	mov	r4, r3
   18224:	b	181e4 <__assert_fail@plt+0x6844>
   18228:	ldr	r5, [fp, #-76]	; 0xffffffb4
   1822c:	str	r6, [fp, #-72]	; 0xffffffb8
   18230:	ldrb	r3, [r5]
   18234:	cmp	r3, #0
   18238:	bne	182b4 <__assert_fail@plt+0x6914>
   1823c:	ldr	r4, [fp, #-64]	; 0xffffffc0
   18240:	cmp	r4, #0
   18244:	beq	17d54 <__assert_fail@plt+0x63b4>
   18248:	b	17f3c <__assert_fail@plt+0x659c>
   1824c:	str	r6, [fp, #-128]	; 0xffffff80
   18250:	strb	r7, [fp, #-124]	; 0xffffff84
   18254:	ldr	r4, [fp, #-132]	; 0xffffff7c
   18258:	mov	r3, r6
   1825c:	b	180a0 <__assert_fail@plt+0x6700>
   18260:	ldr	r4, [fp, #-132]	; 0xffffff7c
   18264:	mov	r0, r4
   18268:	bl	117a8 <strlen@plt>
   1826c:	strb	r7, [fp, #-124]	; 0xffffff84
   18270:	str	r0, [fp, #-128]	; 0xffffff80
   18274:	mov	r3, r0
   18278:	b	180a0 <__assert_fail@plt+0x6700>
   1827c:	ldr	r4, [fp, #-132]	; 0xffffff7c
   18280:	str	r6, [fp, #-128]	; 0xffffff80
   18284:	ldrb	r3, [r4]
   18288:	cmp	r3, #0
   1828c:	bne	182b4 <__assert_fail@plt+0x6914>
   18290:	ldr	r4, [fp, #-120]	; 0xffffff88
   18294:	cmp	r4, #0
   18298:	beq	181cc <__assert_fail@plt+0x682c>
   1829c:	b	17f3c <__assert_fail@plt+0x659c>
   182a0:	ldr	r3, [pc, #36]	; 182cc <__assert_fail@plt+0x692c>
   182a4:	mov	r2, #143	; 0x8f
   182a8:	ldr	r1, [pc, #32]	; 182d0 <__assert_fail@plt+0x6930>
   182ac:	ldr	r0, [pc, #36]	; 182d8 <__assert_fail@plt+0x6938>
   182b0:	bl	119a0 <__assert_fail@plt>
   182b4:	ldr	r3, [pc, #16]	; 182cc <__assert_fail@plt+0x692c>
   182b8:	mov	r2, #171	; 0xab
   182bc:	ldr	r1, [pc, #12]	; 182d0 <__assert_fail@plt+0x6930>
   182c0:	ldr	r0, [pc, #20]	; 182dc <__assert_fail@plt+0x693c>
   182c4:	bl	119a0 <__assert_fail@plt>
   182c8:	andeq	r4, r3, r0, asr #1
   182cc:	andeq	r3, r3, r8, lsl r9
   182d0:			; <UNDEFINED> instruction: 0x000338b4
   182d4:	strdeq	r3, [r3], -r0
   182d8:	andeq	r3, r3, r0, asr #17
   182dc:	ldrdeq	r3, [r3], -r8
   182e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182e4:	sub	sp, sp, #300	; 0x12c
   182e8:	mov	fp, r1
   182ec:	str	r0, [sp, #4]
   182f0:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   182f4:	cmp	r0, #1
   182f8:	bls	184b8 <__assert_fail@plt+0x6b18>
   182fc:	ldrb	r2, [fp]
   18300:	ldr	r9, [pc, #3016]	; 18ed0 <__assert_fail@plt+0x7530>
   18304:	mov	r1, #0
   18308:	and	r0, r2, #31
   1830c:	lsr	r3, r2, #5
   18310:	str	fp, [sp, #32]
   18314:	ldr	r3, [r9, r3, lsl #2]
   18318:	str	r1, [sp, #24]
   1831c:	strb	r1, [sp, #16]
   18320:	lsr	r3, r3, r0
   18324:	ands	r4, r3, #1
   18328:	str	r1, [sp, #20]
   1832c:	strb	r1, [sp, #28]
   18330:	beq	1841c <__assert_fail@plt+0x6a7c>
   18334:	mov	r3, #1
   18338:	mov	r4, r2
   1833c:	str	r3, [sp, #36]	; 0x24
   18340:	strb	r3, [sp, #40]	; 0x28
   18344:	cmp	r4, #0
   18348:	mov	r3, #1
   1834c:	str	r2, [sp, #44]	; 0x2c
   18350:	strb	r3, [sp, #28]
   18354:	beq	184ac <__assert_fail@plt+0x6b0c>
   18358:	ldr	r1, [sp, #4]
   1835c:	mov	r3, #0
   18360:	mov	sl, #1
   18364:	str	fp, [sp, #88]	; 0x58
   18368:	str	fp, [sp, #12]
   1836c:	mov	r8, r3
   18370:	mov	r7, r3
   18374:	mov	r5, sl
   18378:	mov	r4, r1
   1837c:	mov	fp, r3
   18380:	str	r1, [sp, #144]	; 0x90
   18384:	strb	r3, [sp, #72]	; 0x48
   18388:	str	r3, [sp, #76]	; 0x4c
   1838c:	strb	r3, [sp, #84]	; 0x54
   18390:	strb	r3, [sp, #128]	; 0x80
   18394:	str	r3, [sp, #132]	; 0x84
   18398:	strb	r3, [sp, #140]	; 0x8c
   1839c:	str	r3, [sp, #8]
   183a0:	str	r3, [sp, #80]	; 0x50
   183a4:	str	r3, [sp, #136]	; 0x88
   183a8:	ldrb	r3, [sp, #128]	; 0x80
   183ac:	cmp	r3, #0
   183b0:	bne	18604 <__assert_fail@plt+0x6c64>
   183b4:	ldrb	r3, [r4]
   183b8:	and	r2, r3, #31
   183bc:	lsr	r3, r3, #5
   183c0:	ldr	r3, [r9, r3, lsl #2]
   183c4:	lsr	r3, r3, r2
   183c8:	tst	r3, #1
   183cc:	beq	185f0 <__assert_fail@plt+0x6c50>
   183d0:	str	r5, [sp, #148]	; 0x94
   183d4:	ldrb	r4, [r4]
   183d8:	strb	r5, [sp, #152]	; 0x98
   183dc:	str	r4, [sp, #156]	; 0x9c
   183e0:	cmp	r4, #0
   183e4:	strb	r5, [sp, #140]	; 0x8c
   183e8:	beq	185dc <__assert_fail@plt+0x6c3c>
   183ec:	cmp	fp, #9
   183f0:	movls	r2, #0
   183f4:	andhi	r2, sl, #1
   183f8:	cmp	r2, #0
   183fc:	beq	18e20 <__assert_fail@plt+0x7480>
   18400:	add	r3, fp, fp, lsl #2
   18404:	cmp	r8, r3
   18408:	bcs	186c8 <__assert_fail@plt+0x6d28>
   1840c:	add	r3, r8, #1
   18410:	mov	sl, r2
   18414:	ldr	r8, [sp, #8]
   18418:	b	187d8 <__assert_fail@plt+0x6e38>
   1841c:	add	r0, sp, #20
   18420:	bl	11604 <mbsinit@plt>
   18424:	cmp	r0, #0
   18428:	beq	18e80 <__assert_fail@plt+0x74e0>
   1842c:	mov	r5, #1
   18430:	strb	r5, [sp, #16]
   18434:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18438:	mov	r1, r0
   1843c:	mov	r0, fp
   18440:	bl	1cf34 <__assert_fail@plt+0xb594>
   18444:	add	r3, sp, #20
   18448:	mov	r1, fp
   1844c:	mov	r2, r0
   18450:	add	r0, sp, #44	; 0x2c
   18454:	bl	1f13c <__assert_fail@plt+0xd79c>
   18458:	cmn	r0, #1
   1845c:	str	r0, [sp, #36]	; 0x24
   18460:	strbeq	r4, [sp, #40]	; 0x28
   18464:	streq	r5, [sp, #36]	; 0x24
   18468:	beq	188a0 <__assert_fail@plt+0x6f00>
   1846c:	cmn	r0, #2
   18470:	beq	18890 <__assert_fail@plt+0x6ef0>
   18474:	cmp	r0, #0
   18478:	beq	18dc0 <__assert_fail@plt+0x7420>
   1847c:	ldr	r4, [sp, #44]	; 0x2c
   18480:	mov	r3, #1
   18484:	add	r0, sp, #20
   18488:	strb	r3, [sp, #40]	; 0x28
   1848c:	bl	11604 <mbsinit@plt>
   18490:	cmp	r0, #0
   18494:	movne	r3, #0
   18498:	strbne	r3, [sp, #16]
   1849c:	mov	r3, #1
   184a0:	cmp	r4, #0
   184a4:	strb	r3, [sp, #28]
   184a8:	bne	18358 <__assert_fail@plt+0x69b8>
   184ac:	ldr	r0, [sp, #4]
   184b0:	add	sp, sp, #300	; 0x12c
   184b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184b8:	ldrb	r7, [fp]
   184bc:	cmp	r7, #0
   184c0:	beq	184ac <__assert_fail@plt+0x6b0c>
   184c4:	ldr	r5, [sp, #4]
   184c8:	add	r8, fp, #1
   184cc:	ldrb	r3, [r5]
   184d0:	cmp	r3, #0
   184d4:	beq	185dc <__assert_fail@plt+0x6c3c>
   184d8:	mov	r6, #0
   184dc:	mov	r4, r6
   184e0:	mov	r9, r6
   184e4:	mov	sl, fp
   184e8:	mov	lr, #1
   184ec:	ldrb	r3, [r5]
   184f0:	mov	r0, r5
   184f4:	add	r6, r6, #1
   184f8:	cmp	r3, r7
   184fc:	add	r5, r5, #1
   18500:	beq	18588 <__assert_fail@plt+0x6be8>
   18504:	ldrb	r3, [r5]
   18508:	cmp	r3, #0
   1850c:	beq	185dc <__assert_fail@plt+0x6c3c>
   18510:	add	r4, r4, #1
   18514:	cmp	r6, #9
   18518:	movls	r3, #0
   1851c:	andhi	r3, lr, #1
   18520:	cmp	r3, #0
   18524:	beq	184ec <__assert_fail@plt+0x6b4c>
   18528:	add	r2, r6, r6, lsl #2
   1852c:	cmp	r4, r2
   18530:	bcc	185e8 <__assert_fail@plt+0x6c48>
   18534:	cmp	sl, #0
   18538:	str	r3, [sp, #4]
   1853c:	beq	1855c <__assert_fail@plt+0x6bbc>
   18540:	mov	r0, sl
   18544:	sub	r1, r4, r9
   18548:	bl	11874 <strnlen@plt>
   1854c:	ldrb	r2, [sl, r0]!
   18550:	cmp	r2, #0
   18554:	bne	18878 <__assert_fail@plt+0x6ed8>
   18558:	mov	r9, r4
   1855c:	mov	r0, fp
   18560:	bl	117a8 <strlen@plt>
   18564:	add	r3, sp, #240	; 0xf0
   18568:	mov	r1, fp
   1856c:	mov	r2, r0
   18570:	mov	r0, r5
   18574:	bl	17918 <__assert_fail@plt+0x5f78>
   18578:	subs	lr, r0, #0
   1857c:	bne	18e18 <__assert_fail@plt+0x7478>
   18580:	mov	sl, lr
   18584:	b	184ec <__assert_fail@plt+0x6b4c>
   18588:	ldrb	r3, [fp, #1]
   1858c:	cmp	r3, #0
   18590:	beq	184b0 <__assert_fail@plt+0x6b10>
   18594:	ldrb	r2, [r5]
   18598:	cmp	r2, #0
   1859c:	beq	185dc <__assert_fail@plt+0x6c3c>
   185a0:	cmp	r2, r3
   185a4:	add	r4, r4, #2
   185a8:	bne	18514 <__assert_fail@plt+0x6b74>
   185ac:	mov	ip, r5
   185b0:	mov	r1, r8
   185b4:	b	185c4 <__assert_fail@plt+0x6c24>
   185b8:	cmp	r3, r2
   185bc:	add	r4, r4, #1
   185c0:	bne	18514 <__assert_fail@plt+0x6b74>
   185c4:	ldrb	r3, [r1, #1]!
   185c8:	cmp	r3, #0
   185cc:	beq	184b0 <__assert_fail@plt+0x6b10>
   185d0:	ldrb	r2, [ip, #1]!
   185d4:	cmp	r2, #0
   185d8:	bne	185b8 <__assert_fail@plt+0x6c18>
   185dc:	mov	r0, #0
   185e0:	add	sp, sp, #300	; 0x12c
   185e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185e8:	mov	lr, r3
   185ec:	b	184ec <__assert_fail@plt+0x6b4c>
   185f0:	add	r0, sp, #132	; 0x84
   185f4:	bl	11604 <mbsinit@plt>
   185f8:	cmp	r0, #0
   185fc:	beq	18e80 <__assert_fail@plt+0x74e0>
   18600:	strb	r5, [sp, #128]	; 0x80
   18604:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18608:	mov	r1, r0
   1860c:	mov	r0, r4
   18610:	bl	1cf34 <__assert_fail@plt+0xb594>
   18614:	add	r3, sp, #132	; 0x84
   18618:	mov	r1, r4
   1861c:	mov	r2, r0
   18620:	add	r0, sp, #156	; 0x9c
   18624:	bl	1f13c <__assert_fail@plt+0xd79c>
   18628:	cmn	r0, #1
   1862c:	str	r0, [sp, #148]	; 0x94
   18630:	strbeq	r7, [sp, #152]	; 0x98
   18634:	streq	r5, [sp, #148]	; 0x94
   18638:	beq	18678 <__assert_fail@plt+0x6cd8>
   1863c:	cmn	r0, #2
   18640:	beq	18668 <__assert_fail@plt+0x6cc8>
   18644:	cmp	r0, #0
   18648:	beq	18d14 <__assert_fail@plt+0x7374>
   1864c:	ldr	r4, [sp, #156]	; 0x9c
   18650:	add	r0, sp, #132	; 0x84
   18654:	strb	r5, [sp, #152]	; 0x98
   18658:	bl	11604 <mbsinit@plt>
   1865c:	cmp	r0, #0
   18660:	strbne	r7, [sp, #128]	; 0x80
   18664:	b	183e0 <__assert_fail@plt+0x6a40>
   18668:	ldr	r0, [sp, #144]	; 0x90
   1866c:	bl	117a8 <strlen@plt>
   18670:	strb	r7, [sp, #152]	; 0x98
   18674:	str	r0, [sp, #148]	; 0x94
   18678:	cmp	fp, #9
   1867c:	movls	r3, #0
   18680:	andhi	r3, sl, #1
   18684:	cmp	r3, #0
   18688:	strb	r5, [sp, #140]	; 0x8c
   1868c:	addeq	r8, r8, #1
   18690:	bne	186bc <__assert_fail@plt+0x6d1c>
   18694:	ldr	r4, [sp, #148]	; 0x94
   18698:	ldr	r3, [sp, #36]	; 0x24
   1869c:	ldr	r6, [sp, #144]	; 0x90
   186a0:	cmp	r4, r3
   186a4:	beq	188b8 <__assert_fail@plt+0x6f18>
   186a8:	add	r4, r6, r4
   186ac:	str	r4, [sp, #144]	; 0x90
   186b0:	strb	r7, [sp, #140]	; 0x8c
   186b4:	add	fp, fp, #1
   186b8:	b	183a8 <__assert_fail@plt+0x6a08>
   186bc:	add	r2, fp, fp, lsl #2
   186c0:	cmp	r8, r2
   186c4:	bcc	18e94 <__assert_fail@plt+0x74f4>
   186c8:	ldr	r3, [sp, #8]
   186cc:	subs	r6, r8, r3
   186d0:	ldrb	r3, [sp, #84]	; 0x54
   186d4:	beq	18eb4 <__assert_fail@plt+0x7514>
   186d8:	cmp	r3, #0
   186dc:	beq	18888 <__assert_fail@plt+0x6ee8>
   186e0:	ldrb	r3, [sp, #96]	; 0x60
   186e4:	cmp	r3, #0
   186e8:	ldrne	r4, [sp, #100]	; 0x64
   186ec:	bne	187a8 <__assert_fail@plt+0x6e08>
   186f0:	ldr	r4, [sp, #88]	; 0x58
   186f4:	ldr	r3, [sp, #92]	; 0x5c
   186f8:	add	r4, r4, r3
   186fc:	subs	r6, r6, #1
   18700:	strb	r7, [sp, #84]	; 0x54
   18704:	str	r4, [sp, #88]	; 0x58
   18708:	mov	sl, r4
   1870c:	beq	189f0 <__assert_fail@plt+0x7050>
   18710:	ldrb	r3, [sp, #72]	; 0x48
   18714:	cmp	r3, #0
   18718:	bne	1874c <__assert_fail@plt+0x6dac>
   1871c:	ldrb	r3, [r4]
   18720:	and	r2, r3, #31
   18724:	lsr	r3, r3, #5
   18728:	ldr	r3, [r9, r3, lsl #2]
   1872c:	lsr	r3, r3, r2
   18730:	tst	r3, #1
   18734:	bne	18808 <__assert_fail@plt+0x6e68>
   18738:	add	r0, sp, #76	; 0x4c
   1873c:	bl	11604 <mbsinit@plt>
   18740:	cmp	r0, #0
   18744:	beq	18e80 <__assert_fail@plt+0x74e0>
   18748:	strb	r5, [sp, #72]	; 0x48
   1874c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18750:	mov	r1, r0
   18754:	mov	r0, r4
   18758:	bl	1cf34 <__assert_fail@plt+0xb594>
   1875c:	add	r3, sp, #76	; 0x4c
   18760:	mov	r1, r4
   18764:	mov	r2, r0
   18768:	add	r0, sp, #100	; 0x64
   1876c:	bl	1f13c <__assert_fail@plt+0xd79c>
   18770:	cmn	r0, #1
   18774:	str	r0, [sp, #92]	; 0x5c
   18778:	beq	18824 <__assert_fail@plt+0x6e84>
   1877c:	cmn	r0, #2
   18780:	beq	18838 <__assert_fail@plt+0x6e98>
   18784:	cmp	r0, #0
   18788:	beq	18854 <__assert_fail@plt+0x6eb4>
   1878c:	ldr	r4, [sp, #100]	; 0x64
   18790:	add	r0, sp, #76	; 0x4c
   18794:	strb	r5, [sp, #96]	; 0x60
   18798:	bl	11604 <mbsinit@plt>
   1879c:	strb	r5, [sp, #84]	; 0x54
   187a0:	cmp	r0, #0
   187a4:	strbne	r7, [sp, #72]	; 0x48
   187a8:	cmp	r4, #0
   187ac:	bne	186f0 <__assert_fail@plt+0x6d50>
   187b0:	add	r2, sp, #240	; 0xf0
   187b4:	ldr	r1, [sp, #12]
   187b8:	ldr	r0, [sp, #4]
   187bc:	bl	17a80 <__assert_fail@plt+0x60e0>
   187c0:	subs	sl, r0, #0
   187c4:	bne	18e18 <__assert_fail@plt+0x7478>
   187c8:	ldrb	r3, [sp, #152]	; 0x98
   187cc:	cmp	r3, #0
   187d0:	add	r3, r8, #1
   187d4:	beq	188ac <__assert_fail@plt+0x6f0c>
   187d8:	ldrb	r2, [sp, #40]	; 0x28
   187dc:	cmp	r2, #0
   187e0:	beq	188ac <__assert_fail@plt+0x6f0c>
   187e4:	ldr	r1, [sp, #156]	; 0x9c
   187e8:	ldr	r2, [sp, #44]	; 0x2c
   187ec:	str	r8, [sp, #8]
   187f0:	cmp	r1, r2
   187f4:	beq	18db8 <__assert_fail@plt+0x7418>
   187f8:	ldr	r6, [sp, #144]	; 0x90
   187fc:	mov	r8, r3
   18800:	ldr	r4, [sp, #148]	; 0x94
   18804:	b	186a8 <__assert_fail@plt+0x6d08>
   18808:	str	r5, [sp, #92]	; 0x5c
   1880c:	ldrb	r3, [r4]
   18810:	strb	r5, [sp, #96]	; 0x60
   18814:	strb	r5, [sp, #84]	; 0x54
   18818:	str	r3, [sp, #100]	; 0x64
   1881c:	mov	r4, r3
   18820:	b	187a8 <__assert_fail@plt+0x6e08>
   18824:	str	r5, [sp, #92]	; 0x5c
   18828:	strb	r7, [sp, #96]	; 0x60
   1882c:	ldr	r4, [sp, #88]	; 0x58
   18830:	mov	r3, r5
   18834:	b	186f8 <__assert_fail@plt+0x6d58>
   18838:	ldr	r4, [sp, #88]	; 0x58
   1883c:	mov	r0, r4
   18840:	bl	117a8 <strlen@plt>
   18844:	strb	r7, [sp, #96]	; 0x60
   18848:	str	r0, [sp, #92]	; 0x5c
   1884c:	mov	r3, r0
   18850:	b	186f8 <__assert_fail@plt+0x6d58>
   18854:	ldr	r4, [sp, #88]	; 0x58
   18858:	str	r5, [sp, #92]	; 0x5c
   1885c:	ldrb	r3, [r4]
   18860:	cmp	r3, #0
   18864:	bne	18ea0 <__assert_fail@plt+0x7500>
   18868:	ldr	r4, [sp, #100]	; 0x64
   1886c:	cmp	r4, #0
   18870:	beq	18790 <__assert_fail@plt+0x6df0>
   18874:	b	189d8 <__assert_fail@plt+0x7038>
   18878:	ldr	r3, [sp, #4]
   1887c:	mov	r9, r4
   18880:	mov	lr, r3
   18884:	b	184ec <__assert_fail@plt+0x6b4c>
   18888:	ldr	r4, [sp, #88]	; 0x58
   1888c:	b	18710 <__assert_fail@plt+0x6d70>
   18890:	ldr	r0, [sp, #32]
   18894:	bl	117a8 <strlen@plt>
   18898:	strb	r4, [sp, #40]	; 0x28
   1889c:	str	r0, [sp, #36]	; 0x24
   188a0:	mov	r3, #1
   188a4:	strb	r3, [sp, #28]
   188a8:	b	18358 <__assert_fail@plt+0x69b8>
   188ac:	str	r8, [sp, #8]
   188b0:	mov	r8, r3
   188b4:	b	18694 <__assert_fail@plt+0x6cf4>
   188b8:	mov	r2, r4
   188bc:	mov	r0, r6
   188c0:	ldr	r1, [sp, #32]
   188c4:	bl	1161c <memcmp@plt>
   188c8:	cmp	r0, #0
   188cc:	bne	186a8 <__assert_fail@plt+0x6d08>
   188d0:	add	lr, sp, #128	; 0x80
   188d4:	add	ip, sp, #184	; 0xb8
   188d8:	ldm	lr!, {r0, r1, r2, r3}
   188dc:	stmia	ip!, {r0, r1, r2, r3}
   188e0:	ldm	lr!, {r0, r1, r2, r3}
   188e4:	strb	r7, [sp, #196]	; 0xc4
   188e8:	stmia	ip!, {r0, r1, r2, r3}
   188ec:	ldm	lr!, {r0, r1, r2, r3}
   188f0:	ldr	r4, [sp, #200]	; 0xc8
   188f4:	stmia	ip!, {r0, r1, r2, r3}
   188f8:	ldm	lr, {r0, r1}
   188fc:	ldr	r3, [sp, #204]	; 0xcc
   18900:	add	r4, r4, r3
   18904:	stm	ip, {r0, r1}
   18908:	str	r4, [sp, #200]	; 0xc8
   1890c:	ldr	r3, [sp, #12]
   18910:	strb	r7, [sp, #240]	; 0xf0
   18914:	str	r3, [sp, #256]	; 0x100
   18918:	ldrb	r3, [r3]
   1891c:	str	r7, [sp, #244]	; 0xf4
   18920:	str	r7, [sp, #248]	; 0xf8
   18924:	and	r2, r3, #31
   18928:	lsr	r1, r3, #5
   1892c:	strb	r7, [sp, #252]	; 0xfc
   18930:	ldr	r6, [r9, r1, lsl #2]
   18934:	lsr	r6, r6, r2
   18938:	ands	r6, r6, #1
   1893c:	beq	18960 <__assert_fail@plt+0x6fc0>
   18940:	mov	r4, r3
   18944:	str	r5, [sp, #260]	; 0x104
   18948:	str	r3, [sp, #268]	; 0x10c
   1894c:	strb	r5, [sp, #264]	; 0x108
   18950:	cmp	r4, #0
   18954:	strb	r5, [sp, #252]	; 0xfc
   18958:	bne	18a44 <__assert_fail@plt+0x70a4>
   1895c:	bl	11964 <abort@plt>
   18960:	add	r0, sp, #244	; 0xf4
   18964:	bl	11604 <mbsinit@plt>
   18968:	cmp	r0, #0
   1896c:	beq	18e80 <__assert_fail@plt+0x74e0>
   18970:	strb	r5, [sp, #240]	; 0xf0
   18974:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18978:	ldr	r4, [sp, #12]
   1897c:	mov	r1, r0
   18980:	mov	r0, r4
   18984:	bl	1cf34 <__assert_fail@plt+0xb594>
   18988:	add	r3, sp, #244	; 0xf4
   1898c:	mov	r1, r4
   18990:	mov	r2, r0
   18994:	add	r0, sp, #268	; 0x10c
   18998:	bl	1f13c <__assert_fail@plt+0xd79c>
   1899c:	cmn	r0, #1
   189a0:	str	r0, [sp, #260]	; 0x104
   189a4:	beq	18e2c <__assert_fail@plt+0x748c>
   189a8:	cmn	r0, #2
   189ac:	beq	18e40 <__assert_fail@plt+0x74a0>
   189b0:	cmp	r0, #0
   189b4:	bne	18de4 <__assert_fail@plt+0x7444>
   189b8:	ldr	r4, [sp, #256]	; 0x100
   189bc:	str	r5, [sp, #260]	; 0x104
   189c0:	ldrb	r3, [r4]
   189c4:	cmp	r3, #0
   189c8:	bne	18ea0 <__assert_fail@plt+0x7500>
   189cc:	ldr	r4, [sp, #268]	; 0x10c
   189d0:	cmp	r4, #0
   189d4:	beq	18de8 <__assert_fail@plt+0x7448>
   189d8:	ldr	r3, [pc, #1268]	; 18ed4 <__assert_fail@plt+0x7534>
   189dc:	mov	r2, #172	; 0xac
   189e0:	ldr	r1, [pc, #1264]	; 18ed8 <__assert_fail@plt+0x7538>
   189e4:	ldr	r0, [pc, #1264]	; 18edc <__assert_fail@plt+0x753c>
   189e8:	bl	119a0 <__assert_fail@plt>
   189ec:	ldr	sl, [sp, #88]	; 0x58
   189f0:	ldrb	r3, [sp, #72]	; 0x48
   189f4:	cmp	r3, #0
   189f8:	bne	18d4c <__assert_fail@plt+0x73ac>
   189fc:	ldrb	r3, [sl]
   18a00:	and	r2, r3, #31
   18a04:	lsr	r3, r3, #5
   18a08:	ldr	r3, [r9, r3, lsl #2]
   18a0c:	lsr	r3, r3, r2
   18a10:	tst	r3, #1
   18a14:	beq	18d38 <__assert_fail@plt+0x7398>
   18a18:	str	r5, [sp, #92]	; 0x5c
   18a1c:	ldrb	r3, [sl]
   18a20:	strb	r5, [sp, #96]	; 0x60
   18a24:	strb	r5, [sp, #84]	; 0x54
   18a28:	mov	r4, r3
   18a2c:	str	r3, [sp, #100]	; 0x64
   18a30:	cmp	r4, #0
   18a34:	beq	187b0 <__assert_fail@plt+0x6e10>
   18a38:	ldrb	r3, [sp, #152]	; 0x98
   18a3c:	mov	sl, r5
   18a40:	b	187cc <__assert_fail@plt+0x6e2c>
   18a44:	ldr	r4, [sp, #256]	; 0x100
   18a48:	ldr	r3, [sp, #260]	; 0x104
   18a4c:	add	r4, r4, r3
   18a50:	ldrb	r3, [sp, #240]	; 0xf0
   18a54:	strb	r7, [sp, #252]	; 0xfc
   18a58:	add	r8, r8, #1
   18a5c:	cmp	r3, #0
   18a60:	str	r4, [sp, #256]	; 0x100
   18a64:	bne	18c04 <__assert_fail@plt+0x7264>
   18a68:	ldrb	r3, [r4]
   18a6c:	and	r2, r3, #31
   18a70:	lsr	r3, r3, #5
   18a74:	ldr	r3, [r9, r3, lsl #2]
   18a78:	lsr	r3, r3, r2
   18a7c:	tst	r3, #1
   18a80:	beq	18c9c <__assert_fail@plt+0x72fc>
   18a84:	str	r5, [sp, #260]	; 0x104
   18a88:	ldrb	r4, [r4]
   18a8c:	strb	r5, [sp, #264]	; 0x108
   18a90:	str	r4, [sp, #268]	; 0x10c
   18a94:	cmp	r4, #0
   18a98:	strb	r5, [sp, #252]	; 0xfc
   18a9c:	bne	18ac0 <__assert_fail@plt+0x7120>
   18aa0:	ldr	r0, [sp, #144]	; 0x90
   18aa4:	add	sp, sp, #300	; 0x12c
   18aa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18aac:	ldr	r0, [sp, #256]	; 0x100
   18ab0:	bl	117a8 <strlen@plt>
   18ab4:	strb	r7, [sp, #264]	; 0x108
   18ab8:	str	r0, [sp, #260]	; 0x104
   18abc:	strb	r5, [sp, #252]	; 0xfc
   18ac0:	ldrb	r3, [sp, #196]	; 0xc4
   18ac4:	cmp	r3, #0
   18ac8:	beq	18af8 <__assert_fail@plt+0x7158>
   18acc:	ldrb	r3, [sp, #208]	; 0xd0
   18ad0:	cmp	r3, #0
   18ad4:	ldrne	r4, [sp, #212]	; 0xd4
   18ad8:	bne	18ba0 <__assert_fail@plt+0x7200>
   18adc:	ldr	r2, [sp, #204]	; 0xcc
   18ae0:	ldr	r3, [sp, #260]	; 0x104
   18ae4:	cmp	r2, r3
   18ae8:	beq	18c84 <__assert_fail@plt+0x72e4>
   18aec:	ldr	r6, [sp, #144]	; 0x90
   18af0:	ldr	r4, [sp, #148]	; 0x94
   18af4:	b	186a8 <__assert_fail@plt+0x6d08>
   18af8:	ldrb	r3, [sp, #184]	; 0xb8
   18afc:	ldr	r4, [sp, #200]	; 0xc8
   18b00:	cmp	r3, #0
   18b04:	bne	18b38 <__assert_fail@plt+0x7198>
   18b08:	ldrb	r3, [r4]
   18b0c:	and	r2, r3, #31
   18b10:	lsr	r3, r3, #5
   18b14:	ldr	r3, [r9, r3, lsl #2]
   18b18:	lsr	r3, r3, r2
   18b1c:	tst	r3, #1
   18b20:	bne	18c68 <__assert_fail@plt+0x72c8>
   18b24:	add	r0, sp, #188	; 0xbc
   18b28:	bl	11604 <mbsinit@plt>
   18b2c:	cmp	r0, #0
   18b30:	beq	18e80 <__assert_fail@plt+0x74e0>
   18b34:	strb	r5, [sp, #184]	; 0xb8
   18b38:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18b3c:	mov	r1, r0
   18b40:	mov	r0, r4
   18b44:	bl	1cf34 <__assert_fail@plt+0xb594>
   18b48:	add	r3, sp, #188	; 0xbc
   18b4c:	mov	r1, r4
   18b50:	mov	r2, r0
   18b54:	add	r0, sp, #212	; 0xd4
   18b58:	bl	1f13c <__assert_fail@plt+0xd79c>
   18b5c:	cmn	r0, #1
   18b60:	str	r0, [sp, #204]	; 0xcc
   18b64:	strbeq	r7, [sp, #208]	; 0xd0
   18b68:	streq	r5, [sp, #204]	; 0xcc
   18b6c:	strbeq	r5, [sp, #196]	; 0xc4
   18b70:	beq	18adc <__assert_fail@plt+0x713c>
   18b74:	cmn	r0, #2
   18b78:	beq	18cb4 <__assert_fail@plt+0x7314>
   18b7c:	cmp	r0, #0
   18b80:	beq	18cf0 <__assert_fail@plt+0x7350>
   18b84:	ldr	r4, [sp, #212]	; 0xd4
   18b88:	add	r0, sp, #188	; 0xbc
   18b8c:	strb	r5, [sp, #208]	; 0xd0
   18b90:	bl	11604 <mbsinit@plt>
   18b94:	strb	r5, [sp, #196]	; 0xc4
   18b98:	cmp	r0, #0
   18b9c:	strbne	r7, [sp, #184]	; 0xb8
   18ba0:	cmp	r4, #0
   18ba4:	beq	185dc <__assert_fail@plt+0x6c3c>
   18ba8:	ldrb	r3, [sp, #264]	; 0x108
   18bac:	cmp	r3, #0
   18bb0:	beq	18adc <__assert_fail@plt+0x713c>
   18bb4:	ldr	r0, [sp, #268]	; 0x10c
   18bb8:	subs	r0, r0, r4
   18bbc:	movne	r0, #1
   18bc0:	cmp	r0, #0
   18bc4:	add	r1, r8, #1
   18bc8:	bne	18aec <__assert_fail@plt+0x714c>
   18bcc:	ldr	r3, [sp, #200]	; 0xc8
   18bd0:	ldr	r2, [sp, #204]	; 0xcc
   18bd4:	ldr	r4, [sp, #256]	; 0x100
   18bd8:	add	r3, r3, r2
   18bdc:	str	r3, [sp, #200]	; 0xc8
   18be0:	ldrb	r3, [sp, #240]	; 0xf0
   18be4:	ldr	r2, [sp, #260]	; 0x104
   18be8:	strb	r0, [sp, #196]	; 0xc4
   18bec:	add	r4, r4, r2
   18bf0:	cmp	r3, #0
   18bf4:	strb	r0, [sp, #252]	; 0xfc
   18bf8:	mov	r8, r1
   18bfc:	str	r4, [sp, #256]	; 0x100
   18c00:	beq	18a68 <__assert_fail@plt+0x70c8>
   18c04:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18c08:	mov	r1, r0
   18c0c:	mov	r0, r4
   18c10:	bl	1cf34 <__assert_fail@plt+0xb594>
   18c14:	add	r3, sp, #244	; 0xf4
   18c18:	mov	r1, r4
   18c1c:	mov	r2, r0
   18c20:	add	r0, sp, #268	; 0x10c
   18c24:	bl	1f13c <__assert_fail@plt+0xd79c>
   18c28:	cmn	r0, #1
   18c2c:	str	r0, [sp, #260]	; 0x104
   18c30:	strbeq	r7, [sp, #264]	; 0x108
   18c34:	streq	r5, [sp, #260]	; 0x104
   18c38:	beq	18abc <__assert_fail@plt+0x711c>
   18c3c:	cmn	r0, #2
   18c40:	beq	18aac <__assert_fail@plt+0x710c>
   18c44:	cmp	r0, #0
   18c48:	beq	18ccc <__assert_fail@plt+0x732c>
   18c4c:	ldr	r4, [sp, #268]	; 0x10c
   18c50:	add	r0, sp, #244	; 0xf4
   18c54:	strb	r5, [sp, #264]	; 0x108
   18c58:	bl	11604 <mbsinit@plt>
   18c5c:	cmp	r0, #0
   18c60:	strbne	r7, [sp, #240]	; 0xf0
   18c64:	b	18a94 <__assert_fail@plt+0x70f4>
   18c68:	str	r5, [sp, #204]	; 0xcc
   18c6c:	ldrb	r0, [r4]
   18c70:	strb	r5, [sp, #208]	; 0xd0
   18c74:	strb	r5, [sp, #196]	; 0xc4
   18c78:	str	r0, [sp, #212]	; 0xd4
   18c7c:	mov	r4, r0
   18c80:	b	18ba0 <__assert_fail@plt+0x7200>
   18c84:	ldr	r1, [sp, #256]	; 0x100
   18c88:	ldr	r0, [sp, #200]	; 0xc8
   18c8c:	bl	1161c <memcmp@plt>
   18c90:	adds	r0, r0, #0
   18c94:	movne	r0, #1
   18c98:	b	18bc0 <__assert_fail@plt+0x7220>
   18c9c:	add	r0, sp, #244	; 0xf4
   18ca0:	bl	11604 <mbsinit@plt>
   18ca4:	cmp	r0, #0
   18ca8:	beq	18e80 <__assert_fail@plt+0x74e0>
   18cac:	strb	r5, [sp, #240]	; 0xf0
   18cb0:	b	18c04 <__assert_fail@plt+0x7264>
   18cb4:	ldr	r0, [sp, #200]	; 0xc8
   18cb8:	bl	117a8 <strlen@plt>
   18cbc:	strb	r7, [sp, #208]	; 0xd0
   18cc0:	strb	r5, [sp, #196]	; 0xc4
   18cc4:	str	r0, [sp, #204]	; 0xcc
   18cc8:	b	18adc <__assert_fail@plt+0x713c>
   18ccc:	ldr	r3, [sp, #256]	; 0x100
   18cd0:	str	r5, [sp, #260]	; 0x104
   18cd4:	ldrb	r3, [r3]
   18cd8:	cmp	r3, #0
   18cdc:	bne	18ea0 <__assert_fail@plt+0x7500>
   18ce0:	ldr	r4, [sp, #268]	; 0x10c
   18ce4:	cmp	r4, #0
   18ce8:	beq	18c50 <__assert_fail@plt+0x72b0>
   18cec:	b	189d8 <__assert_fail@plt+0x7038>
   18cf0:	ldr	r3, [sp, #200]	; 0xc8
   18cf4:	str	r5, [sp, #204]	; 0xcc
   18cf8:	ldrb	r3, [r3]
   18cfc:	cmp	r3, #0
   18d00:	bne	18ea0 <__assert_fail@plt+0x7500>
   18d04:	ldr	r4, [sp, #212]	; 0xd4
   18d08:	cmp	r4, #0
   18d0c:	beq	18b88 <__assert_fail@plt+0x71e8>
   18d10:	b	189d8 <__assert_fail@plt+0x7038>
   18d14:	ldr	r6, [sp, #144]	; 0x90
   18d18:	str	r5, [sp, #148]	; 0x94
   18d1c:	ldrb	r3, [r6]
   18d20:	cmp	r3, #0
   18d24:	bne	18ea0 <__assert_fail@plt+0x7500>
   18d28:	ldr	r4, [sp, #156]	; 0x9c
   18d2c:	cmp	r4, #0
   18d30:	beq	18650 <__assert_fail@plt+0x6cb0>
   18d34:	b	189d8 <__assert_fail@plt+0x7038>
   18d38:	add	r0, sp, #76	; 0x4c
   18d3c:	bl	11604 <mbsinit@plt>
   18d40:	cmp	r0, #0
   18d44:	beq	18e80 <__assert_fail@plt+0x74e0>
   18d48:	strb	r5, [sp, #72]	; 0x48
   18d4c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18d50:	mov	r1, r0
   18d54:	mov	r0, sl
   18d58:	bl	1cf34 <__assert_fail@plt+0xb594>
   18d5c:	add	r3, sp, #76	; 0x4c
   18d60:	mov	r1, sl
   18d64:	mov	r2, r0
   18d68:	add	r0, sp, #100	; 0x64
   18d6c:	bl	1f13c <__assert_fail@plt+0xd79c>
   18d70:	cmn	r0, #1
   18d74:	str	r0, [sp, #92]	; 0x5c
   18d78:	strbeq	r7, [sp, #96]	; 0x60
   18d7c:	streq	r5, [sp, #92]	; 0x5c
   18d80:	strbeq	r5, [sp, #84]	; 0x54
   18d84:	beq	18a38 <__assert_fail@plt+0x7098>
   18d88:	cmn	r0, #2
   18d8c:	beq	18e00 <__assert_fail@plt+0x7460>
   18d90:	cmp	r0, #0
   18d94:	beq	18e5c <__assert_fail@plt+0x74bc>
   18d98:	ldr	r4, [sp, #100]	; 0x64
   18d9c:	add	r0, sp, #76	; 0x4c
   18da0:	strb	r5, [sp, #96]	; 0x60
   18da4:	bl	11604 <mbsinit@plt>
   18da8:	strb	r5, [sp, #84]	; 0x54
   18dac:	cmp	r0, #0
   18db0:	strbne	r7, [sp, #72]	; 0x48
   18db4:	b	18a30 <__assert_fail@plt+0x7090>
   18db8:	mov	r8, r3
   18dbc:	b	188d0 <__assert_fail@plt+0x6f30>
   18dc0:	ldr	r3, [sp, #32]
   18dc4:	str	r5, [sp, #36]	; 0x24
   18dc8:	ldrb	r3, [r3]
   18dcc:	cmp	r3, #0
   18dd0:	bne	18ea0 <__assert_fail@plt+0x7500>
   18dd4:	ldr	r4, [sp, #44]	; 0x2c
   18dd8:	cmp	r4, #0
   18ddc:	beq	18480 <__assert_fail@plt+0x6ae0>
   18de0:	b	189d8 <__assert_fail@plt+0x7038>
   18de4:	ldr	r4, [sp, #268]	; 0x10c
   18de8:	add	r0, sp, #244	; 0xf4
   18dec:	strb	r5, [sp, #264]	; 0x108
   18df0:	bl	11604 <mbsinit@plt>
   18df4:	cmp	r0, #0
   18df8:	strbne	r7, [sp, #240]	; 0xf0
   18dfc:	b	18950 <__assert_fail@plt+0x6fb0>
   18e00:	ldr	r0, [sp, #88]	; 0x58
   18e04:	bl	117a8 <strlen@plt>
   18e08:	strb	r7, [sp, #96]	; 0x60
   18e0c:	strb	r5, [sp, #84]	; 0x54
   18e10:	str	r0, [sp, #92]	; 0x5c
   18e14:	b	18a38 <__assert_fail@plt+0x7098>
   18e18:	ldr	r0, [sp, #240]	; 0xf0
   18e1c:	b	184b0 <__assert_fail@plt+0x6b10>
   18e20:	add	r3, r8, #1
   18e24:	ldr	r8, [sp, #8]
   18e28:	b	187d8 <__assert_fail@plt+0x6e38>
   18e2c:	str	r5, [sp, #260]	; 0x104
   18e30:	strb	r6, [sp, #264]	; 0x108
   18e34:	ldr	r4, [sp, #256]	; 0x100
   18e38:	mov	r3, r5
   18e3c:	b	18a4c <__assert_fail@plt+0x70ac>
   18e40:	ldr	r4, [sp, #256]	; 0x100
   18e44:	mov	r0, r4
   18e48:	bl	117a8 <strlen@plt>
   18e4c:	strb	r6, [sp, #264]	; 0x108
   18e50:	str	r0, [sp, #260]	; 0x104
   18e54:	mov	r3, r0
   18e58:	b	18a4c <__assert_fail@plt+0x70ac>
   18e5c:	ldr	r4, [sp, #88]	; 0x58
   18e60:	str	r5, [sp, #92]	; 0x5c
   18e64:	ldrb	r3, [r4]
   18e68:	cmp	r3, #0
   18e6c:	bne	18ea0 <__assert_fail@plt+0x7500>
   18e70:	ldr	r4, [sp, #100]	; 0x64
   18e74:	cmp	r4, #0
   18e78:	beq	18d9c <__assert_fail@plt+0x73fc>
   18e7c:	b	189d8 <__assert_fail@plt+0x7038>
   18e80:	ldr	r3, [pc, #76]	; 18ed4 <__assert_fail@plt+0x7534>
   18e84:	mov	r2, #143	; 0x8f
   18e88:	ldr	r1, [pc, #72]	; 18ed8 <__assert_fail@plt+0x7538>
   18e8c:	ldr	r0, [pc, #76]	; 18ee0 <__assert_fail@plt+0x7540>
   18e90:	bl	119a0 <__assert_fail@plt>
   18e94:	add	r8, r8, #1
   18e98:	mov	sl, r3
   18e9c:	b	18694 <__assert_fail@plt+0x6cf4>
   18ea0:	ldr	r3, [pc, #44]	; 18ed4 <__assert_fail@plt+0x7534>
   18ea4:	mov	r2, #171	; 0xab
   18ea8:	ldr	r1, [pc, #40]	; 18ed8 <__assert_fail@plt+0x7538>
   18eac:	ldr	r0, [pc, #48]	; 18ee4 <__assert_fail@plt+0x7544>
   18eb0:	bl	119a0 <__assert_fail@plt>
   18eb4:	cmp	r3, #0
   18eb8:	beq	189ec <__assert_fail@plt+0x704c>
   18ebc:	ldrb	r3, [sp, #96]	; 0x60
   18ec0:	cmp	r3, #0
   18ec4:	ldrne	r4, [sp, #100]	; 0x64
   18ec8:	beq	18a38 <__assert_fail@plt+0x7098>
   18ecc:	b	18a30 <__assert_fail@plt+0x7090>
   18ed0:	andeq	r4, r3, r0, asr #1
   18ed4:	andeq	r3, r3, r8, lsl r9
   18ed8:			; <UNDEFINED> instruction: 0x000338b4
   18edc:	strdeq	r3, [r3], -r0
   18ee0:	andeq	r3, r3, r0, asr #17
   18ee4:	ldrdeq	r3, [r3], -r8
   18ee8:	push	{r4, r5, r6, lr}
   18eec:	subs	r4, r0, #0
   18ef0:	beq	18f64 <__assert_fail@plt+0x75c4>
   18ef4:	mov	r1, #47	; 0x2f
   18ef8:	bl	118a4 <strrchr@plt>
   18efc:	subs	r5, r0, #0
   18f00:	beq	18f50 <__assert_fail@plt+0x75b0>
   18f04:	add	r6, r5, #1
   18f08:	sub	r3, r6, r4
   18f0c:	cmp	r3, #6
   18f10:	ble	18f50 <__assert_fail@plt+0x75b0>
   18f14:	mov	r2, #7
   18f18:	ldr	r1, [pc, #96]	; 18f80 <__assert_fail@plt+0x75e0>
   18f1c:	sub	r0, r5, #6
   18f20:	bl	11958 <strncmp@plt>
   18f24:	cmp	r0, #0
   18f28:	bne	18f50 <__assert_fail@plt+0x75b0>
   18f2c:	mov	r2, #3
   18f30:	ldr	r1, [pc, #76]	; 18f84 <__assert_fail@plt+0x75e4>
   18f34:	mov	r0, r6
   18f38:	bl	11958 <strncmp@plt>
   18f3c:	cmp	r0, #0
   18f40:	movne	r4, r6
   18f44:	ldreq	r3, [pc, #60]	; 18f88 <__assert_fail@plt+0x75e8>
   18f48:	addeq	r4, r5, #4
   18f4c:	streq	r4, [r3]
   18f50:	ldr	r2, [pc, #52]	; 18f8c <__assert_fail@plt+0x75ec>
   18f54:	ldr	r3, [pc, #52]	; 18f90 <__assert_fail@plt+0x75f0>
   18f58:	str	r4, [r2]
   18f5c:	str	r4, [r3]
   18f60:	pop	{r4, r5, r6, pc}
   18f64:	ldr	r3, [pc, #40]	; 18f94 <__assert_fail@plt+0x75f4>
   18f68:	mov	r2, #55	; 0x37
   18f6c:	mov	r1, #1
   18f70:	ldr	r3, [r3]
   18f74:	ldr	r0, [pc, #28]	; 18f98 <__assert_fail@plt+0x75f8>
   18f78:	bl	11688 <fwrite@plt>
   18f7c:	bl	11964 <abort@plt>
   18f80:	andeq	r3, r3, r4, ror #18
   18f84:	andeq	r3, r3, ip, ror #18
   18f88:	andeq	r5, r4, r8, lsl #4
   18f8c:	andeq	r5, r4, r0, lsr #5
   18f90:	andeq	r5, r4, ip, lsl #4
   18f94:	andeq	r5, r4, r8, lsl r2
   18f98:	andeq	r3, r3, ip, lsr #18
   18f9c:	push	{r4, r5, r6, lr}
   18fa0:	mov	r4, r0
   18fa4:	mov	r5, r1
   18fa8:	bl	31aa8 <__assert_fail@plt+0x20108>
   18fac:	ldrb	r3, [r0]
   18fb0:	bic	r3, r3, #32
   18fb4:	cmp	r3, #85	; 0x55
   18fb8:	bne	19018 <__assert_fail@plt+0x7678>
   18fbc:	ldrb	r3, [r0, #1]
   18fc0:	bic	r3, r3, #32
   18fc4:	cmp	r3, #84	; 0x54
   18fc8:	bne	19054 <__assert_fail@plt+0x76b4>
   18fcc:	ldrb	r3, [r0, #2]
   18fd0:	bic	r3, r3, #32
   18fd4:	cmp	r3, #70	; 0x46
   18fd8:	bne	19054 <__assert_fail@plt+0x76b4>
   18fdc:	ldrb	r3, [r0, #3]
   18fe0:	cmp	r3, #45	; 0x2d
   18fe4:	bne	19054 <__assert_fail@plt+0x76b4>
   18fe8:	ldrb	r3, [r0, #4]
   18fec:	cmp	r3, #56	; 0x38
   18ff0:	bne	19054 <__assert_fail@plt+0x76b4>
   18ff4:	ldrb	r3, [r0, #5]
   18ff8:	cmp	r3, #0
   18ffc:	bne	19054 <__assert_fail@plt+0x76b4>
   19000:	ldrb	r2, [r4]
   19004:	ldr	r3, [pc, #152]	; 190a4 <__assert_fail@plt+0x7704>
   19008:	ldr	r0, [pc, #152]	; 190a8 <__assert_fail@plt+0x7708>
   1900c:	cmp	r2, #96	; 0x60
   19010:	movne	r0, r3
   19014:	pop	{r4, r5, r6, pc}
   19018:	cmp	r3, #71	; 0x47
   1901c:	bne	19054 <__assert_fail@plt+0x76b4>
   19020:	ldrb	r3, [r0, #1]
   19024:	bic	r3, r3, #32
   19028:	cmp	r3, #66	; 0x42
   1902c:	bne	19054 <__assert_fail@plt+0x76b4>
   19030:	ldrb	r3, [r0, #2]
   19034:	cmp	r3, #49	; 0x31
   19038:	bne	19054 <__assert_fail@plt+0x76b4>
   1903c:	ldrb	r3, [r0, #3]
   19040:	cmp	r3, #56	; 0x38
   19044:	bne	19054 <__assert_fail@plt+0x76b4>
   19048:	ldrb	r3, [r0, #4]
   1904c:	cmp	r3, #48	; 0x30
   19050:	beq	19068 <__assert_fail@plt+0x76c8>
   19054:	ldr	r3, [pc, #80]	; 190ac <__assert_fail@plt+0x770c>
   19058:	cmp	r5, #9
   1905c:	ldr	r0, [pc, #76]	; 190b0 <__assert_fail@plt+0x7710>
   19060:	movne	r0, r3
   19064:	pop	{r4, r5, r6, pc}
   19068:	ldrb	r3, [r0, #5]
   1906c:	cmp	r3, #51	; 0x33
   19070:	bne	19054 <__assert_fail@plt+0x76b4>
   19074:	ldrb	r3, [r0, #6]
   19078:	cmp	r3, #48	; 0x30
   1907c:	bne	19054 <__assert_fail@plt+0x76b4>
   19080:	ldrb	r3, [r0, #7]
   19084:	cmp	r3, #0
   19088:	bne	19054 <__assert_fail@plt+0x76b4>
   1908c:	ldrb	r2, [r4]
   19090:	ldr	r3, [pc, #28]	; 190b4 <__assert_fail@plt+0x7714>
   19094:	ldr	r0, [pc, #28]	; 190b8 <__assert_fail@plt+0x7718>
   19098:	cmp	r2, #96	; 0x60
   1909c:	movne	r0, r3
   190a0:	pop	{r4, r5, r6, pc}
   190a4:	andeq	r3, r3, r8, asr #19
   190a8:	andeq	r3, r3, r4, asr #19
   190ac:	ldrdeq	r3, [r3], -r8
   190b0:	ldrdeq	r3, [r3], -r4
   190b4:	ldrdeq	r3, [r3], -r0
   190b8:	andeq	r3, r3, ip, asr #19
   190bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190c0:	sub	sp, sp, #140	; 0x8c
   190c4:	mov	r9, r1
   190c8:	str	r3, [sp, #24]
   190cc:	mov	r3, #1
   190d0:	mov	sl, r0
   190d4:	str	r2, [sp, #44]	; 0x2c
   190d8:	str	r3, [sp, #28]
   190dc:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   190e0:	ldr	r3, [sp, #180]	; 0xb4
   190e4:	mov	fp, r9
   190e8:	mov	r9, sl
   190ec:	lsr	r3, r3, #1
   190f0:	and	r3, r3, #1
   190f4:	str	r3, [sp, #40]	; 0x28
   190f8:	ldr	r3, [sp, #180]	; 0xb4
   190fc:	mov	r2, #0
   19100:	and	r3, r3, #4
   19104:	str	r3, [sp, #100]	; 0x64
   19108:	ldr	r3, [sp, #180]	; 0xb4
   1910c:	str	r2, [sp, #76]	; 0x4c
   19110:	and	r3, r3, #1
   19114:	str	r3, [sp, #96]	; 0x60
   19118:	str	r2, [sp, #36]	; 0x24
   1911c:	str	r2, [sp, #56]	; 0x38
   19120:	str	r2, [sp, #68]	; 0x44
   19124:	str	r2, [sp, #72]	; 0x48
   19128:	str	r2, [sp, #84]	; 0x54
   1912c:	str	r0, [sp, #80]	; 0x50
   19130:	ldr	r3, [sp, #176]	; 0xb0
   19134:	cmp	r3, #10
   19138:	ldrls	pc, [pc, r3, lsl #2]
   1913c:	b	1a314 <__assert_fail@plt+0x8974>
   19140:	andeq	r9, r1, ip, ror #2
   19144:	andeq	r9, r1, ip, lsl #9
   19148:	andeq	r9, r1, r4, ror #11
   1914c:	andeq	r9, r1, r0, asr #9
   19150:	andeq	r9, r1, r8, lsr r6
   19154:	andeq	r9, r1, r8, lsl r6
   19158:	andeq	r9, r1, r0, ror #9
   1915c:	andeq	r9, r1, r4, lsl #10
   19160:	andeq	r9, r1, ip, lsr #10
   19164:	andeq	r9, r1, ip, lsr #10
   19168:	andeq	r9, r1, ip, lsr #10
   1916c:	mov	r3, #0
   19170:	ldr	r1, [sp, #56]	; 0x38
   19174:	ldr	r2, [sp, #176]	; 0xb0
   19178:	ldr	lr, [sp, #176]	; 0xb0
   1917c:	mov	r8, r3
   19180:	mov	ip, r3
   19184:	str	r3, [sp, #40]	; 0x28
   19188:	mov	r3, r1
   1918c:	cmp	r2, #2
   19190:	moveq	r3, #0
   19194:	andne	r3, r3, #1
   19198:	mov	r0, r3
   1919c:	str	r3, [sp, #92]	; 0x5c
   191a0:	ldr	r3, [sp, #68]	; 0x44
   191a4:	sub	lr, lr, #2
   191a8:	adds	r2, r3, #0
   191ac:	movne	r2, #1
   191b0:	and	r3, r1, ip
   191b4:	and	r3, r2, r3
   191b8:	clz	lr, lr
   191bc:	str	r3, [sp, #88]	; 0x58
   191c0:	lsr	lr, lr, #5
   191c4:	mov	r3, ip
   191c8:	and	r3, r3, lr
   191cc:	mov	sl, #0
   191d0:	and	r0, r2, r0
   191d4:	str	r3, [sp, #64]	; 0x40
   191d8:	eor	r3, r1, #1
   191dc:	str	lr, [sp, #52]	; 0x34
   191e0:	str	r0, [sp, #48]	; 0x30
   191e4:	str	r3, [sp, #60]	; 0x3c
   191e8:	ldr	r3, [sp, #24]
   191ec:	cmn	r3, #1
   191f0:	beq	19720 <__assert_fail@plt+0x7d80>
   191f4:	subs	r7, r3, sl
   191f8:	movne	r7, #1
   191fc:	cmp	r7, #0
   19200:	beq	19738 <__assert_fail@plt+0x7d98>
   19204:	ldr	r3, [sp, #48]	; 0x30
   19208:	cmp	r3, #0
   1920c:	beq	19aa4 <__assert_fail@plt+0x8104>
   19210:	ldr	r2, [sp, #68]	; 0x44
   19214:	ldr	r1, [sp, #24]
   19218:	cmp	r2, #1
   1921c:	mov	r3, r2
   19220:	movls	r3, #0
   19224:	movhi	r3, #1
   19228:	cmn	r1, #1
   1922c:	movne	r3, #0
   19230:	cmp	r3, #0
   19234:	add	r4, sl, r2
   19238:	beq	19248 <__assert_fail@plt+0x78a8>
   1923c:	ldr	r0, [sp, #44]	; 0x2c
   19240:	bl	117a8 <strlen@plt>
   19244:	str	r0, [sp, #24]
   19248:	ldr	r3, [sp, #24]
   1924c:	cmp	r3, r4
   19250:	ldr	r3, [sp, #44]	; 0x2c
   19254:	add	r5, r3, sl
   19258:	bcc	19aac <__assert_fail@plt+0x810c>
   1925c:	mov	r0, r5
   19260:	ldr	r2, [sp, #68]	; 0x44
   19264:	ldr	r1, [sp, #72]	; 0x48
   19268:	bl	1161c <memcmp@plt>
   1926c:	cmp	r0, #0
   19270:	bne	19aac <__assert_fail@plt+0x810c>
   19274:	ldr	r3, [sp, #40]	; 0x28
   19278:	cmp	r3, #0
   1927c:	bne	1a468 <__assert_fail@plt+0x8ac8>
   19280:	ldrb	r4, [r5]
   19284:	cmp	r4, #126	; 0x7e
   19288:	ldrls	pc, [pc, r4, lsl #2]
   1928c:	b	1a3a4 <__assert_fail@plt+0x8a04>
   19290:	andeq	r9, r1, r4, ror #18
   19294:	andeq	sl, r1, r4, lsr #7
   19298:	andeq	sl, r1, r4, lsr #7
   1929c:	andeq	sl, r1, r4, lsr #7
   192a0:	andeq	sl, r1, r4, lsr #7
   192a4:	andeq	sl, r1, r4, lsr #7
   192a8:	andeq	sl, r1, r4, lsr #7
   192ac:	andeq	r9, r1, r0, asr r9
   192b0:	andeq	r9, r1, ip, lsr r9
   192b4:	andeq	r9, r1, r8, lsl r9
   192b8:	strdeq	r9, [r1], -r8
   192bc:	andeq	r9, r1, r8, lsr #18
   192c0:	andeq	r9, r1, r0, ror #16
   192c4:	muleq	r1, r4, sl
   192c8:	andeq	sl, r1, r4, lsr #7
   192cc:	andeq	sl, r1, r4, lsr #7
   192d0:	andeq	sl, r1, r4, lsr #7
   192d4:	andeq	sl, r1, r4, lsr #7
   192d8:	andeq	sl, r1, r4, lsr #7
   192dc:	andeq	sl, r1, r4, lsr #7
   192e0:	andeq	sl, r1, r4, lsr #7
   192e4:	andeq	sl, r1, r4, lsr #7
   192e8:	andeq	sl, r1, r4, lsr #7
   192ec:	andeq	sl, r1, r4, lsr #7
   192f0:	andeq	sl, r1, r4, lsr #7
   192f4:	andeq	sl, r1, r4, lsr #7
   192f8:	andeq	sl, r1, r4, lsr #7
   192fc:	andeq	sl, r1, r4, lsr #7
   19300:	andeq	sl, r1, r4, lsr #7
   19304:	andeq	sl, r1, r4, lsr #7
   19308:	andeq	sl, r1, r4, lsr #7
   1930c:	andeq	sl, r1, r4, lsr #7
   19310:	andeq	r9, r1, r4, lsl #21
   19314:	andeq	r9, r1, r4, ror #20
   19318:	andeq	r9, r1, r4, ror #20
   1931c:	andeq	r9, r1, r4, asr #20
   19320:	andeq	r9, r1, r4, ror #20
   19324:	andeq	r9, r1, r0, asr r8
   19328:	andeq	r9, r1, r4, ror #20
   1932c:	andeq	r9, r1, ip, lsr #16
   19330:	andeq	r9, r1, r4, ror #20
   19334:	andeq	r9, r1, r4, ror #20
   19338:	andeq	r9, r1, r4, ror #20
   1933c:	andeq	r9, r1, r0, asr r8
   19340:	andeq	r9, r1, r0, asr r8
   19344:	andeq	r9, r1, r0, asr r8
   19348:	andeq	r9, r1, r0, asr r8
   1934c:	andeq	r9, r1, r0, asr r8
   19350:	andeq	r9, r1, r0, asr r8
   19354:	andeq	r9, r1, r0, asr r8
   19358:	andeq	r9, r1, r0, asr r8
   1935c:	andeq	r9, r1, r0, asr r8
   19360:	andeq	r9, r1, r0, asr r8
   19364:	andeq	r9, r1, r0, asr r8
   19368:	andeq	r9, r1, r0, asr r8
   1936c:	andeq	r9, r1, r0, asr r8
   19370:	andeq	r9, r1, r0, asr r8
   19374:	andeq	r9, r1, r0, asr r8
   19378:	andeq	r9, r1, r0, asr r8
   1937c:	andeq	r9, r1, r4, ror #20
   19380:	andeq	r9, r1, r4, ror #20
   19384:	andeq	r9, r1, r4, ror #20
   19388:	andeq	r9, r1, r4, ror #20
   1938c:	ldrdeq	r9, [r1], -ip
   19390:	andeq	sl, r1, r4, lsr #7
   19394:	andeq	r9, r1, r0, asr r8
   19398:	andeq	r9, r1, r0, asr r8
   1939c:	andeq	r9, r1, r0, asr r8
   193a0:	andeq	r9, r1, r0, asr r8
   193a4:	andeq	r9, r1, r0, asr r8
   193a8:	andeq	r9, r1, r0, asr r8
   193ac:	andeq	r9, r1, r0, asr r8
   193b0:	andeq	r9, r1, r0, asr r8
   193b4:	andeq	r9, r1, r0, asr r8
   193b8:	andeq	r9, r1, r0, asr r8
   193bc:	andeq	r9, r1, r0, asr r8
   193c0:	andeq	r9, r1, r0, asr r8
   193c4:	andeq	r9, r1, r0, asr r8
   193c8:	andeq	r9, r1, r0, asr r8
   193cc:	andeq	r9, r1, r0, asr r8
   193d0:	andeq	r9, r1, r0, asr r8
   193d4:	andeq	r9, r1, r0, asr r8
   193d8:	andeq	r9, r1, r0, asr r8
   193dc:	andeq	r9, r1, r0, asr r8
   193e0:	andeq	r9, r1, r0, asr r8
   193e4:	andeq	r9, r1, r0, asr r8
   193e8:	andeq	r9, r1, r0, asr r8
   193ec:	andeq	r9, r1, r0, asr r8
   193f0:	andeq	r9, r1, r0, asr r8
   193f4:	andeq	r9, r1, r0, asr r8
   193f8:	andeq	r9, r1, r0, asr r8
   193fc:	andeq	r9, r1, r4, ror #20
   19400:	andeq	r9, r1, r8, lsr #15
   19404:	andeq	r9, r1, r0, asr r8
   19408:	andeq	r9, r1, r4, ror #20
   1940c:	andeq	r9, r1, r0, asr r8
   19410:	andeq	r9, r1, r4, ror #20
   19414:	andeq	r9, r1, r0, asr r8
   19418:	andeq	r9, r1, r0, asr r8
   1941c:	andeq	r9, r1, r0, asr r8
   19420:	andeq	r9, r1, r0, asr r8
   19424:	andeq	r9, r1, r0, asr r8
   19428:	andeq	r9, r1, r0, asr r8
   1942c:	andeq	r9, r1, r0, asr r8
   19430:	andeq	r9, r1, r0, asr r8
   19434:	andeq	r9, r1, r0, asr r8
   19438:	andeq	r9, r1, r0, asr r8
   1943c:	andeq	r9, r1, r0, asr r8
   19440:	andeq	r9, r1, r0, asr r8
   19444:	andeq	r9, r1, r0, asr r8
   19448:	andeq	r9, r1, r0, asr r8
   1944c:	andeq	r9, r1, r0, asr r8
   19450:	andeq	r9, r1, r0, asr r8
   19454:	andeq	r9, r1, r0, asr r8
   19458:	andeq	r9, r1, r0, asr r8
   1945c:	andeq	r9, r1, r0, asr r8
   19460:	andeq	r9, r1, r0, asr r8
   19464:	andeq	r9, r1, r0, asr r8
   19468:	andeq	r9, r1, r0, asr r8
   1946c:	andeq	r9, r1, r0, asr r8
   19470:	andeq	r9, r1, r0, asr r8
   19474:	andeq	r9, r1, r0, asr r8
   19478:	andeq	r9, r1, r0, asr r8
   1947c:	andeq	r9, r1, r0, ror #12
   19480:	andeq	r9, r1, r4, ror #20
   19484:	andeq	r9, r1, r0, ror #12
   19488:	andeq	r9, r1, r4, asr #20
   1948c:	mov	r3, #1
   19490:	str	r3, [sp, #40]	; 0x28
   19494:	str	r3, [sp, #68]	; 0x44
   19498:	mov	r8, #0
   1949c:	ldr	r3, [pc, #4056]	; 1a47c <__assert_fail@plt+0x8adc>
   194a0:	str	r3, [sp, #72]	; 0x48
   194a4:	mov	r3, #2
   194a8:	str	r3, [sp, #176]	; 0xb0
   194ac:	ldr	r1, [sp, #56]	; 0x38
   194b0:	mov	r2, r3
   194b4:	ldr	ip, [sp, #40]	; 0x28
   194b8:	mov	lr, r3
   194bc:	b	19188 <__assert_fail@plt+0x77e8>
   194c0:	mov	r3, #1
   194c4:	str	r3, [sp, #56]	; 0x38
   194c8:	str	r3, [sp, #68]	; 0x44
   194cc:	str	r3, [sp, #40]	; 0x28
   194d0:	ldr	r3, [pc, #4004]	; 1a47c <__assert_fail@plt+0x8adc>
   194d4:	mov	r8, #0
   194d8:	str	r3, [sp, #72]	; 0x48
   194dc:	b	194a4 <__assert_fail@plt+0x7b04>
   194e0:	mov	r3, #1
   194e4:	str	r3, [sp, #56]	; 0x38
   194e8:	str	r3, [sp, #68]	; 0x44
   194ec:	str	r3, [sp, #40]	; 0x28
   194f0:	ldr	r3, [pc, #3976]	; 1a480 <__assert_fail@plt+0x8ae0>
   194f4:	mov	r8, #0
   194f8:	str	r3, [sp, #72]	; 0x48
   194fc:	mov	r3, #5
   19500:	b	194a8 <__assert_fail@plt+0x7b08>
   19504:	mov	r3, #0
   19508:	str	r3, [sp, #40]	; 0x28
   1950c:	mov	r3, #1
   19510:	str	r3, [sp, #56]	; 0x38
   19514:	mov	r8, #0
   19518:	mov	r1, r3
   1951c:	ldr	r2, [sp, #176]	; 0xb0
   19520:	ldr	ip, [sp, #40]	; 0x28
   19524:	ldr	lr, [sp, #176]	; 0xb0
   19528:	b	19188 <__assert_fail@plt+0x77e8>
   1952c:	ldr	r3, [sp, #176]	; 0xb0
   19530:	cmp	r3, #10
   19534:	beq	19578 <__assert_fail@plt+0x7bd8>
   19538:	mov	r2, #5
   1953c:	ldr	r1, [pc, #3904]	; 1a484 <__assert_fail@plt+0x8ae4>
   19540:	mov	r0, #0
   19544:	bl	11628 <dcgettext@plt>
   19548:	ldr	r2, [pc, #3892]	; 1a484 <__assert_fail@plt+0x8ae4>
   1954c:	cmp	r0, r2
   19550:	str	r0, [sp, #188]	; 0xbc
   19554:	beq	1a610 <__assert_fail@plt+0x8c70>
   19558:	mov	r2, #5
   1955c:	ldr	r1, [pc, #3864]	; 1a47c <__assert_fail@plt+0x8adc>
   19560:	mov	r0, #0
   19564:	bl	11628 <dcgettext@plt>
   19568:	ldr	r2, [pc, #3852]	; 1a47c <__assert_fail@plt+0x8adc>
   1956c:	cmp	r0, r2
   19570:	str	r0, [sp, #192]	; 0xc0
   19574:	beq	1a600 <__assert_fail@plt+0x8c60>
   19578:	ldr	r8, [sp, #40]	; 0x28
   1957c:	cmp	r8, #0
   19580:	movne	r8, #0
   19584:	bne	195b4 <__assert_fail@plt+0x7c14>
   19588:	ldr	r3, [sp, #188]	; 0xbc
   1958c:	ldrb	r3, [r3]
   19590:	cmp	r3, #0
   19594:	beq	195b4 <__assert_fail@plt+0x7c14>
   19598:	ldr	r2, [sp, #188]	; 0xbc
   1959c:	cmp	fp, r8
   195a0:	strbhi	r3, [r9, r8]
   195a4:	ldrb	r3, [r2, #1]!
   195a8:	add	r8, r8, #1
   195ac:	cmp	r3, #0
   195b0:	bne	1959c <__assert_fail@plt+0x7bfc>
   195b4:	ldr	r0, [sp, #192]	; 0xc0
   195b8:	bl	117a8 <strlen@plt>
   195bc:	ldr	r3, [sp, #192]	; 0xc0
   195c0:	ldr	r2, [sp, #176]	; 0xb0
   195c4:	str	r3, [sp, #72]	; 0x48
   195c8:	mov	r3, #1
   195cc:	str	r3, [sp, #56]	; 0x38
   195d0:	mov	r1, r3
   195d4:	ldr	ip, [sp, #40]	; 0x28
   195d8:	ldr	lr, [sp, #176]	; 0xb0
   195dc:	str	r0, [sp, #68]	; 0x44
   195e0:	b	19188 <__assert_fail@plt+0x77e8>
   195e4:	ldr	r3, [sp, #40]	; 0x28
   195e8:	cmp	r3, #0
   195ec:	beq	1a294 <__assert_fail@plt+0x88f4>
   195f0:	mov	r3, #1
   195f4:	str	r3, [sp, #68]	; 0x44
   195f8:	ldr	r3, [pc, #3708]	; 1a47c <__assert_fail@plt+0x8adc>
   195fc:	str	r3, [sp, #72]	; 0x48
   19600:	mov	r8, #0
   19604:	ldr	r1, [sp, #56]	; 0x38
   19608:	ldr	r2, [sp, #176]	; 0xb0
   1960c:	ldr	ip, [sp, #40]	; 0x28
   19610:	ldr	lr, [sp, #176]	; 0xb0
   19614:	b	19188 <__assert_fail@plt+0x77e8>
   19618:	ldr	r3, [sp, #40]	; 0x28
   1961c:	cmp	r3, #0
   19620:	beq	1a318 <__assert_fail@plt+0x8978>
   19624:	str	r3, [sp, #56]	; 0x38
   19628:	mov	r3, #1
   1962c:	str	r3, [sp, #68]	; 0x44
   19630:	ldr	r3, [pc, #3656]	; 1a480 <__assert_fail@plt+0x8ae0>
   19634:	b	195fc <__assert_fail@plt+0x7c5c>
   19638:	ldr	r3, [sp, #40]	; 0x28
   1963c:	cmp	r3, #0
   19640:	mov	r3, #1
   19644:	streq	r3, [sp, #56]	; 0x38
   19648:	beq	1a294 <__assert_fail@plt+0x88f4>
   1964c:	str	r3, [sp, #68]	; 0x44
   19650:	ldr	r3, [pc, #3620]	; 1a47c <__assert_fail@plt+0x8adc>
   19654:	mov	r8, #0
   19658:	str	r3, [sp, #72]	; 0x48
   1965c:	b	194a4 <__assert_fail@plt+0x7b04>
   19660:	ldr	r3, [sp, #24]
   19664:	ldr	r6, [sp, #48]	; 0x30
   19668:	cmn	r3, #1
   1966c:	beq	19cc8 <__assert_fail@plt+0x8328>
   19670:	subs	r3, r3, #1
   19674:	movne	r3, #1
   19678:	cmp	r3, #0
   1967c:	beq	19a48 <__assert_fail@plt+0x80a8>
   19680:	ldr	r1, [sp, #52]	; 0x34
   19684:	mov	r7, r3
   19688:	mov	r3, #0
   1968c:	str	r3, [sp, #32]
   19690:	ldr	r3, [sp, #60]	; 0x3c
   19694:	orr	r2, r1, r3
   19698:	ldr	r3, [sp, #40]	; 0x28
   1969c:	eor	r2, r2, #1
   196a0:	orr	r2, r3, r2
   196a4:	tst	r2, #255	; 0xff
   196a8:	bne	19fcc <__assert_fail@plt+0x862c>
   196ac:	cmp	r6, #0
   196b0:	bne	1988c <__assert_fail@plt+0x7eec>
   196b4:	ldr	r3, [sp, #36]	; 0x24
   196b8:	add	sl, sl, #1
   196bc:	and	r3, r3, r7
   196c0:	uxtb	r6, r3
   196c4:	cmp	r6, #0
   196c8:	beq	196f4 <__assert_fail@plt+0x7d54>
   196cc:	cmp	fp, r8
   196d0:	movhi	r3, #39	; 0x27
   196d4:	strbhi	r3, [r9, r8]
   196d8:	add	r3, r8, #1
   196dc:	cmp	fp, r3
   196e0:	movhi	r2, #39	; 0x27
   196e4:	add	r8, r8, #2
   196e8:	strbhi	r2, [r9, r3]
   196ec:	mov	r3, #0
   196f0:	str	r3, [sp, #36]	; 0x24
   196f4:	ldr	r2, [sp, #32]
   196f8:	cmp	r8, fp
   196fc:	ldr	r3, [sp, #28]
   19700:	strbcc	r4, [r9, r8]
   19704:	cmp	r2, #0
   19708:	moveq	r3, #0
   1970c:	str	r3, [sp, #28]
   19710:	ldr	r3, [sp, #24]
   19714:	add	r8, r8, #1
   19718:	cmn	r3, #1
   1971c:	bne	191f4 <__assert_fail@plt+0x7854>
   19720:	ldr	r3, [sp, #44]	; 0x2c
   19724:	ldrb	r3, [r3, sl]
   19728:	adds	r7, r3, #0
   1972c:	movne	r7, #1
   19730:	cmp	r7, #0
   19734:	bne	19204 <__assert_fail@plt+0x7864>
   19738:	ldr	r3, [sp, #64]	; 0x40
   1973c:	cmp	r8, #0
   19740:	movne	r3, #0
   19744:	andeq	r3, r3, #1
   19748:	cmp	r3, #0
   1974c:	str	r3, [sp, #64]	; 0x40
   19750:	bne	1a1f4 <__assert_fail@plt+0x8854>
   19754:	ldr	r3, [sp, #40]	; 0x28
   19758:	ldr	r2, [sp, #52]	; 0x34
   1975c:	eor	r3, r3, #1
   19760:	ands	r2, r2, r3
   19764:	beq	1a620 <__assert_fail@plt+0x8c80>
   19768:	ldr	r3, [sp, #76]	; 0x4c
   1976c:	cmp	r3, #0
   19770:	beq	1a5f0 <__assert_fail@plt+0x8c50>
   19774:	ldr	r3, [sp, #28]
   19778:	cmp	r3, #0
   1977c:	bne	1a5ac <__assert_fail@plt+0x8c0c>
   19780:	ldr	r2, [sp, #84]	; 0x54
   19784:	clz	r3, fp
   19788:	cmp	r2, #0
   1978c:	lsr	r3, r3, #5
   19790:	moveq	r3, #0
   19794:	cmp	r3, #0
   19798:	beq	1a54c <__assert_fail@plt+0x8bac>
   1979c:	mov	fp, r2
   197a0:	str	r3, [sp, #76]	; 0x4c
   197a4:	b	19130 <__assert_fail@plt+0x7790>
   197a8:	ldr	r3, [sp, #176]	; 0xb0
   197ac:	ldr	r6, [sp, #48]	; 0x30
   197b0:	cmp	r3, #2
   197b4:	beq	19cec <__assert_fail@plt+0x834c>
   197b8:	ldr	r3, [sp, #88]	; 0x58
   197bc:	cmp	r3, #0
   197c0:	beq	1a270 <__assert_fail@plt+0x88d0>
   197c4:	mov	r3, #0
   197c8:	add	sl, sl, #1
   197cc:	ldr	r6, [sp, #36]	; 0x24
   197d0:	str	r3, [sp, #32]
   197d4:	mov	r4, #92	; 0x5c
   197d8:	b	196c4 <__assert_fail@plt+0x7d24>
   197dc:	ldr	r3, [sp, #176]	; 0xb0
   197e0:	ldr	r6, [sp, #48]	; 0x30
   197e4:	cmp	r3, #2
   197e8:	beq	19d1c <__assert_fail@plt+0x837c>
   197ec:	cmp	r3, #5
   197f0:	bne	1a280 <__assert_fail@plt+0x88e0>
   197f4:	ldr	r3, [sp, #100]	; 0x64
   197f8:	cmp	r3, #0
   197fc:	beq	1a2e4 <__assert_fail@plt+0x8944>
   19800:	ldr	r2, [sp, #24]
   19804:	add	r3, sl, #2
   19808:	cmp	r2, r3
   1980c:	bls	1981c <__assert_fail@plt+0x7e7c>
   19810:	ldrb	r4, [r5, #1]
   19814:	cmp	r4, #63	; 0x3f
   19818:	beq	1a48c <__assert_fail@plt+0x8aec>
   1981c:	mov	r1, #0
   19820:	str	r1, [sp, #32]
   19824:	mov	r4, #63	; 0x3f
   19828:	b	19690 <__assert_fail@plt+0x7cf0>
   1982c:	ldr	r3, [sp, #176]	; 0xb0
   19830:	ldr	r6, [sp, #48]	; 0x30
   19834:	cmp	r3, #2
   19838:	beq	19d48 <__assert_fail@plt+0x83a8>
   1983c:	str	r7, [sp, #32]
   19840:	str	r7, [sp, #76]	; 0x4c
   19844:	mov	r1, #0
   19848:	mov	r4, #39	; 0x27
   1984c:	b	19690 <__assert_fail@plt+0x7cf0>
   19850:	ldr	r6, [sp, #48]	; 0x30
   19854:	ldr	r1, [sp, #52]	; 0x34
   19858:	str	r7, [sp, #32]
   1985c:	b	19690 <__assert_fail@plt+0x7cf0>
   19860:	ldr	r6, [sp, #48]	; 0x30
   19864:	ldr	r1, [sp, #52]	; 0x34
   19868:	mov	r4, #12
   1986c:	mov	r3, #102	; 0x66
   19870:	ldr	r2, [sp, #56]	; 0x38
   19874:	cmp	r2, #0
   19878:	streq	r2, [sp, #32]
   1987c:	beq	19690 <__assert_fail@plt+0x7cf0>
   19880:	mov	r4, r3
   19884:	mov	r3, #0
   19888:	str	r3, [sp, #32]
   1988c:	ldr	r3, [sp, #40]	; 0x28
   19890:	cmp	r3, #0
   19894:	bne	1a004 <__assert_fail@plt+0x8664>
   19898:	ldr	r3, [sp, #36]	; 0x24
   1989c:	eor	r3, r3, #1
   198a0:	and	r3, r3, r1
   198a4:	ands	r3, r3, #255	; 0xff
   198a8:	beq	198e0 <__assert_fail@plt+0x7f40>
   198ac:	cmp	fp, r8
   198b0:	movhi	r2, #39	; 0x27
   198b4:	strbhi	r2, [r9, r8]
   198b8:	add	r2, r8, #1
   198bc:	cmp	fp, r2
   198c0:	movhi	r1, #36	; 0x24
   198c4:	strbhi	r1, [r9, r2]
   198c8:	add	r2, r8, #2
   198cc:	cmp	fp, r2
   198d0:	add	r8, r8, #3
   198d4:	movhi	r1, #39	; 0x27
   198d8:	strbhi	r1, [r9, r2]
   198dc:	str	r3, [sp, #36]	; 0x24
   198e0:	cmp	fp, r8
   198e4:	movhi	r3, #92	; 0x5c
   198e8:	strbhi	r3, [r9, r8]
   198ec:	add	sl, sl, #1
   198f0:	add	r8, r8, #1
   198f4:	b	196f4 <__assert_fail@plt+0x7d54>
   198f8:	ldr	r6, [sp, #48]	; 0x30
   198fc:	mov	r4, #10
   19900:	mov	r3, #110	; 0x6e
   19904:	ldr	r2, [sp, #64]	; 0x40
   19908:	cmp	r2, #0
   1990c:	bne	1a38c <__assert_fail@plt+0x89ec>
   19910:	ldr	r1, [sp, #52]	; 0x34
   19914:	b	19870 <__assert_fail@plt+0x7ed0>
   19918:	ldr	r6, [sp, #48]	; 0x30
   1991c:	ldr	r1, [sp, #52]	; 0x34
   19920:	mov	r3, #116	; 0x74
   19924:	b	19870 <__assert_fail@plt+0x7ed0>
   19928:	ldr	r6, [sp, #48]	; 0x30
   1992c:	ldr	r1, [sp, #52]	; 0x34
   19930:	mov	r4, #11
   19934:	mov	r3, #118	; 0x76
   19938:	b	19870 <__assert_fail@plt+0x7ed0>
   1993c:	ldr	r6, [sp, #48]	; 0x30
   19940:	ldr	r1, [sp, #52]	; 0x34
   19944:	mov	r4, #8
   19948:	mov	r3, #98	; 0x62
   1994c:	b	19870 <__assert_fail@plt+0x7ed0>
   19950:	ldr	r6, [sp, #48]	; 0x30
   19954:	ldr	r1, [sp, #52]	; 0x34
   19958:	mov	r4, #7
   1995c:	mov	r3, #97	; 0x61
   19960:	b	19870 <__assert_fail@plt+0x7ed0>
   19964:	ldr	r3, [sp, #56]	; 0x38
   19968:	ldr	r6, [sp, #48]	; 0x30
   1996c:	cmp	r3, #0
   19970:	beq	19e34 <__assert_fail@plt+0x8494>
   19974:	ldr	r3, [sp, #40]	; 0x28
   19978:	cmp	r3, #0
   1997c:	bne	1a468 <__assert_fail@plt+0x8ac8>
   19980:	ldr	r3, [sp, #36]	; 0x24
   19984:	ldr	r2, [sp, #52]	; 0x34
   19988:	eor	r3, r3, #1
   1998c:	ands	r3, r2, r3
   19990:	moveq	r2, r8
   19994:	beq	199cc <__assert_fail@plt+0x802c>
   19998:	cmp	fp, r8
   1999c:	movhi	r2, #39	; 0x27
   199a0:	strbhi	r2, [r9, r8]
   199a4:	add	r2, r8, #1
   199a8:	cmp	fp, r2
   199ac:	movhi	r1, #36	; 0x24
   199b0:	strbhi	r1, [r9, r2]
   199b4:	add	r2, r8, #2
   199b8:	cmp	fp, r2
   199bc:	movhi	r1, #39	; 0x27
   199c0:	strbhi	r1, [r9, r2]
   199c4:	add	r2, r8, #3
   199c8:	str	r3, [sp, #36]	; 0x24
   199cc:	cmp	fp, r2
   199d0:	movhi	r3, #92	; 0x5c
   199d4:	strbhi	r3, [r9, r2]
   199d8:	ldr	r3, [sp, #92]	; 0x5c
   199dc:	add	r8, r2, #1
   199e0:	cmp	r3, #0
   199e4:	beq	1a368 <__assert_fail@plt+0x89c8>
   199e8:	ldr	r1, [sp, #24]
   199ec:	add	r3, sl, #1
   199f0:	cmp	r1, r3
   199f4:	bls	19a2c <__assert_fail@plt+0x808c>
   199f8:	ldr	r1, [sp, #44]	; 0x2c
   199fc:	ldrb	r3, [r1, r3]
   19a00:	sub	r3, r3, #48	; 0x30
   19a04:	cmp	r3, #9
   19a08:	bhi	19a2c <__assert_fail@plt+0x808c>
   19a0c:	cmp	fp, r8
   19a10:	movhi	r3, #48	; 0x30
   19a14:	strbhi	r3, [r9, r8]
   19a18:	add	r3, r2, #2
   19a1c:	cmp	fp, r3
   19a20:	add	r8, r2, #3
   19a24:	movhi	r1, #48	; 0x30
   19a28:	strbhi	r1, [r9, r3]
   19a2c:	ldr	r3, [sp, #40]	; 0x28
   19a30:	ldr	r1, [sp, #52]	; 0x34
   19a34:	mov	r7, r3
   19a38:	str	r3, [sp, #32]
   19a3c:	mov	r4, #48	; 0x30
   19a40:	b	19690 <__assert_fail@plt+0x7cf0>
   19a44:	ldr	r6, [sp, #48]	; 0x30
   19a48:	cmp	sl, #0
   19a4c:	streq	r7, [sp, #32]
   19a50:	beq	19a70 <__assert_fail@plt+0x80d0>
   19a54:	mov	r3, #0
   19a58:	ldr	r1, [sp, #52]	; 0x34
   19a5c:	str	r3, [sp, #32]
   19a60:	b	19690 <__assert_fail@plt+0x7cf0>
   19a64:	ldr	r6, [sp, #48]	; 0x30
   19a68:	mov	r3, #0
   19a6c:	str	r3, [sp, #32]
   19a70:	ldr	r3, [sp, #64]	; 0x40
   19a74:	cmp	r3, #0
   19a78:	bne	1a1f4 <__assert_fail@plt+0x8854>
   19a7c:	ldr	r1, [sp, #52]	; 0x34
   19a80:	b	19690 <__assert_fail@plt+0x7cf0>
   19a84:	ldr	r3, [sp, #48]	; 0x30
   19a88:	mov	r6, r3
   19a8c:	str	r3, [sp, #32]
   19a90:	b	19a70 <__assert_fail@plt+0x80d0>
   19a94:	ldr	r6, [sp, #48]	; 0x30
   19a98:	mov	r4, #13
   19a9c:	mov	r3, #114	; 0x72
   19aa0:	b	19904 <__assert_fail@plt+0x7f64>
   19aa4:	ldr	r3, [sp, #44]	; 0x2c
   19aa8:	add	r5, r3, sl
   19aac:	ldrb	r4, [r5]
   19ab0:	cmp	r4, #126	; 0x7e
   19ab4:	ldrls	pc, [pc, r4, lsl #2]
   19ab8:	b	19e54 <__assert_fail@plt+0x84b4>
   19abc:	andeq	r9, r1, r4, lsr #28
   19ac0:	andeq	r9, r1, r4, asr lr
   19ac4:	andeq	r9, r1, r4, asr lr
   19ac8:	andeq	r9, r1, r4, asr lr
   19acc:	andeq	r9, r1, r4, asr lr
   19ad0:	andeq	r9, r1, r4, asr lr
   19ad4:	andeq	r9, r1, r4, asr lr
   19ad8:	andeq	r9, r1, ip, lsl lr
   19adc:	andeq	r9, r1, r4, lsl lr
   19ae0:	andeq	r9, r1, r8, lsl #28
   19ae4:	andeq	r9, r1, r0, lsl #28
   19ae8:	strdeq	r9, [r1], -r8
   19aec:	strdeq	r9, [r1], -r0
   19af0:	andeq	r9, r1, r8, ror #27
   19af4:	andeq	r9, r1, r4, asr lr
   19af8:	andeq	r9, r1, r4, asr lr
   19afc:	andeq	r9, r1, r4, asr lr
   19b00:	andeq	r9, r1, r4, asr lr
   19b04:	andeq	r9, r1, r4, asr lr
   19b08:	andeq	r9, r1, r4, asr lr
   19b0c:	andeq	r9, r1, r4, asr lr
   19b10:	andeq	r9, r1, r4, asr lr
   19b14:	andeq	r9, r1, r4, asr lr
   19b18:	andeq	r9, r1, r4, asr lr
   19b1c:	andeq	r9, r1, r4, asr lr
   19b20:	andeq	r9, r1, r4, asr lr
   19b24:	andeq	r9, r1, r4, asr lr
   19b28:	andeq	r9, r1, r4, asr lr
   19b2c:	andeq	r9, r1, r4, asr lr
   19b30:	andeq	r9, r1, r4, asr lr
   19b34:	andeq	r9, r1, r4, asr lr
   19b38:	andeq	r9, r1, r4, asr lr
   19b3c:	ldrdeq	r9, [r1], -ip
   19b40:	ldrdeq	r9, [r1], -r4
   19b44:	ldrdeq	r9, [r1], -r4
   19b48:	andeq	r9, r1, ip, asr #27
   19b4c:	ldrdeq	r9, [r1], -r4
   19b50:	andeq	r9, r1, r4, asr #27
   19b54:	ldrdeq	r9, [r1], -r4
   19b58:	andeq	r9, r1, r8, lsr sp
   19b5c:	ldrdeq	r9, [r1], -r4
   19b60:	ldrdeq	r9, [r1], -r4
   19b64:	ldrdeq	r9, [r1], -r4
   19b68:	andeq	r9, r1, r4, asr #27
   19b6c:	andeq	r9, r1, r4, asr #27
   19b70:	andeq	r9, r1, r4, asr #27
   19b74:	andeq	r9, r1, r4, asr #27
   19b78:	andeq	r9, r1, r4, asr #27
   19b7c:	andeq	r9, r1, r4, asr #27
   19b80:	andeq	r9, r1, r4, asr #27
   19b84:	andeq	r9, r1, r4, asr #27
   19b88:	andeq	r9, r1, r4, asr #27
   19b8c:	andeq	r9, r1, r4, asr #27
   19b90:	andeq	r9, r1, r4, asr #27
   19b94:	andeq	r9, r1, r4, asr #27
   19b98:	andeq	r9, r1, r4, asr #27
   19b9c:	andeq	r9, r1, r4, asr #27
   19ba0:	andeq	r9, r1, r4, asr #27
   19ba4:	andeq	r9, r1, r4, asr #27
   19ba8:	ldrdeq	r9, [r1], -r4
   19bac:	ldrdeq	r9, [r1], -r4
   19bb0:	ldrdeq	r9, [r1], -r4
   19bb4:	ldrdeq	r9, [r1], -r4
   19bb8:	andeq	r9, r1, ip, lsl #26
   19bbc:	andeq	r9, r1, r4, asr lr
   19bc0:	andeq	r9, r1, r4, asr #27
   19bc4:	andeq	r9, r1, r4, asr #27
   19bc8:	andeq	r9, r1, r4, asr #27
   19bcc:	andeq	r9, r1, r4, asr #27
   19bd0:	andeq	r9, r1, r4, asr #27
   19bd4:	andeq	r9, r1, r4, asr #27
   19bd8:	andeq	r9, r1, r4, asr #27
   19bdc:	andeq	r9, r1, r4, asr #27
   19be0:	andeq	r9, r1, r4, asr #27
   19be4:	andeq	r9, r1, r4, asr #27
   19be8:	andeq	r9, r1, r4, asr #27
   19bec:	andeq	r9, r1, r4, asr #27
   19bf0:	andeq	r9, r1, r4, asr #27
   19bf4:	andeq	r9, r1, r4, asr #27
   19bf8:	andeq	r9, r1, r4, asr #27
   19bfc:	andeq	r9, r1, r4, asr #27
   19c00:	andeq	r9, r1, r4, asr #27
   19c04:	andeq	r9, r1, r4, asr #27
   19c08:	andeq	r9, r1, r4, asr #27
   19c0c:	andeq	r9, r1, r4, asr #27
   19c10:	andeq	r9, r1, r4, asr #27
   19c14:	andeq	r9, r1, r4, asr #27
   19c18:	andeq	r9, r1, r4, asr #27
   19c1c:	andeq	r9, r1, r4, asr #27
   19c20:	andeq	r9, r1, r4, asr #27
   19c24:	andeq	r9, r1, r4, asr #27
   19c28:	ldrdeq	r9, [r1], -r4
   19c2c:	ldrdeq	r9, [r1], -ip
   19c30:	andeq	r9, r1, r4, asr #27
   19c34:	ldrdeq	r9, [r1], -r4
   19c38:	andeq	r9, r1, r4, asr #27
   19c3c:	ldrdeq	r9, [r1], -r4
   19c40:	andeq	r9, r1, r4, asr #27
   19c44:	andeq	r9, r1, r4, asr #27
   19c48:	andeq	r9, r1, r4, asr #27
   19c4c:	andeq	r9, r1, r4, asr #27
   19c50:	andeq	r9, r1, r4, asr #27
   19c54:	andeq	r9, r1, r4, asr #27
   19c58:	andeq	r9, r1, r4, asr #27
   19c5c:	andeq	r9, r1, r4, asr #27
   19c60:	andeq	r9, r1, r4, asr #27
   19c64:	andeq	r9, r1, r4, asr #27
   19c68:	andeq	r9, r1, r4, asr #27
   19c6c:	andeq	r9, r1, r4, asr #27
   19c70:	andeq	r9, r1, r4, asr #27
   19c74:	andeq	r9, r1, r4, asr #27
   19c78:	andeq	r9, r1, r4, asr #27
   19c7c:	andeq	r9, r1, r4, asr #27
   19c80:	andeq	r9, r1, r4, asr #27
   19c84:	andeq	r9, r1, r4, asr #27
   19c88:	andeq	r9, r1, r4, asr #27
   19c8c:	andeq	r9, r1, r4, asr #27
   19c90:	andeq	r9, r1, r4, asr #27
   19c94:	andeq	r9, r1, r4, asr #27
   19c98:	andeq	r9, r1, r4, asr #27
   19c9c:	andeq	r9, r1, r4, asr #27
   19ca0:	andeq	r9, r1, r4, asr #27
   19ca4:	andeq	r9, r1, r4, asr #27
   19ca8:			; <UNDEFINED> instruction: 0x00019cb8
   19cac:	ldrdeq	r9, [r1], -r4
   19cb0:			; <UNDEFINED> instruction: 0x00019cb8
   19cb4:	andeq	r9, r1, ip, asr #27
   19cb8:	ldr	r3, [sp, #24]
   19cbc:	mov	r6, #0
   19cc0:	cmn	r3, #1
   19cc4:	bne	19670 <__assert_fail@plt+0x7cd0>
   19cc8:	ldr	r3, [sp, #44]	; 0x2c
   19ccc:	ldrb	r3, [r3, #1]
   19cd0:	adds	r3, r3, #0
   19cd4:	movne	r3, #1
   19cd8:	b	19678 <__assert_fail@plt+0x7cd8>
   19cdc:	ldr	r3, [sp, #176]	; 0xb0
   19ce0:	mov	r6, #0
   19ce4:	cmp	r3, #2
   19ce8:	bne	197b8 <__assert_fail@plt+0x7e18>
   19cec:	ldr	r3, [sp, #64]	; 0x40
   19cf0:	cmp	r3, #0
   19cf4:	bne	1a52c <__assert_fail@plt+0x8b8c>
   19cf8:	add	sl, sl, #1
   19cfc:	ldr	r6, [sp, #36]	; 0x24
   19d00:	str	r3, [sp, #32]
   19d04:	mov	r4, #92	; 0x5c
   19d08:	b	196c4 <__assert_fail@plt+0x7d24>
   19d0c:	ldr	r3, [sp, #176]	; 0xb0
   19d10:	mov	r6, #0
   19d14:	cmp	r3, #2
   19d18:	bne	197ec <__assert_fail@plt+0x7e4c>
   19d1c:	ldr	r3, [sp, #40]	; 0x28
   19d20:	cmp	r3, #0
   19d24:	bne	1a008 <__assert_fail@plt+0x8668>
   19d28:	mov	r1, r7
   19d2c:	str	r3, [sp, #32]
   19d30:	mov	r4, #63	; 0x3f
   19d34:	b	19690 <__assert_fail@plt+0x7cf0>
   19d38:	ldr	r3, [sp, #176]	; 0xb0
   19d3c:	mov	r6, #0
   19d40:	cmp	r3, #2
   19d44:	bne	1983c <__assert_fail@plt+0x7e9c>
   19d48:	ldr	r3, [sp, #64]	; 0x40
   19d4c:	cmp	r3, #0
   19d50:	bne	1a52c <__assert_fail@plt+0x8b8c>
   19d54:	ldr	r2, [sp, #84]	; 0x54
   19d58:	adds	r3, fp, #0
   19d5c:	movne	r3, #1
   19d60:	cmp	r2, #0
   19d64:	movne	r3, #0
   19d68:	cmp	r3, #0
   19d6c:	strne	fp, [sp, #84]	; 0x54
   19d70:	movne	fp, #0
   19d74:	bne	19da4 <__assert_fail@plt+0x8404>
   19d78:	cmp	fp, r8
   19d7c:	movhi	r3, #39	; 0x27
   19d80:	strbhi	r3, [r9, r8]
   19d84:	add	r3, r8, #1
   19d88:	cmp	fp, r3
   19d8c:	movhi	r2, #92	; 0x5c
   19d90:	strbhi	r2, [r9, r3]
   19d94:	add	r3, r8, #2
   19d98:	cmp	fp, r3
   19d9c:	movhi	r2, #39	; 0x27
   19da0:	strbhi	r2, [r9, r3]
   19da4:	ldr	r3, [sp, #64]	; 0x40
   19da8:	add	r8, r8, #3
   19dac:	mov	r1, r7
   19db0:	str	r7, [sp, #32]
   19db4:	str	r7, [sp, #76]	; 0x4c
   19db8:	str	r3, [sp, #36]	; 0x24
   19dbc:	mov	r4, #39	; 0x27
   19dc0:	b	19690 <__assert_fail@plt+0x7cf0>
   19dc4:	mov	r6, #0
   19dc8:	b	19854 <__assert_fail@plt+0x7eb4>
   19dcc:	mov	r6, #0
   19dd0:	b	19a48 <__assert_fail@plt+0x80a8>
   19dd4:	mov	r6, #0
   19dd8:	b	19a68 <__assert_fail@plt+0x80c8>
   19ddc:	str	r7, [sp, #32]
   19de0:	mov	r6, #0
   19de4:	b	19a70 <__assert_fail@plt+0x80d0>
   19de8:	mov	r6, #0
   19dec:	b	19a98 <__assert_fail@plt+0x80f8>
   19df0:	mov	r6, #0
   19df4:	b	19864 <__assert_fail@plt+0x7ec4>
   19df8:	mov	r6, #0
   19dfc:	b	1992c <__assert_fail@plt+0x7f8c>
   19e00:	mov	r6, #0
   19e04:	b	198fc <__assert_fail@plt+0x7f5c>
   19e08:	mov	r6, #0
   19e0c:	mov	r3, #116	; 0x74
   19e10:	b	19904 <__assert_fail@plt+0x7f64>
   19e14:	mov	r6, #0
   19e18:	b	19940 <__assert_fail@plt+0x7fa0>
   19e1c:	mov	r6, #0
   19e20:	b	19954 <__assert_fail@plt+0x7fb4>
   19e24:	ldr	r3, [sp, #56]	; 0x38
   19e28:	mov	r6, #0
   19e2c:	cmp	r3, #0
   19e30:	bne	19974 <__assert_fail@plt+0x7fd4>
   19e34:	ldr	r3, [sp, #96]	; 0x60
   19e38:	cmp	r3, #0
   19e3c:	addne	sl, sl, #1
   19e40:	bne	191e8 <__assert_fail@plt+0x7848>
   19e44:	ldr	r1, [sp, #52]	; 0x34
   19e48:	str	r3, [sp, #32]
   19e4c:	mov	r4, r3
   19e50:	b	19690 <__assert_fail@plt+0x7cf0>
   19e54:	mov	r6, #0
   19e58:	ldr	r3, [sp, #80]	; 0x50
   19e5c:	cmp	r3, #1
   19e60:	bne	1a050 <__assert_fail@plt+0x86b0>
   19e64:	bl	11778 <__ctype_b_loc@plt>
   19e68:	ldr	r2, [sp, #80]	; 0x50
   19e6c:	sxth	r3, r4
   19e70:	mov	r1, r2
   19e74:	lsl	r3, r3, #1
   19e78:	ldr	r2, [r0]
   19e7c:	ldrh	r3, [r2, r3]
   19e80:	and	r3, r3, #16384	; 0x4000
   19e84:	cmp	r3, #0
   19e88:	movne	r3, #1
   19e8c:	moveq	r3, #0
   19e90:	str	r3, [sp, #32]
   19e94:	moveq	r3, #1
   19e98:	movne	r3, #0
   19e9c:	ldr	r2, [sp, #56]	; 0x38
   19ea0:	and	r3, r3, r2
   19ea4:	ands	r3, r3, #255	; 0xff
   19ea8:	beq	19a7c <__assert_fail@plt+0x80dc>
   19eac:	add	r1, sl, r1
   19eb0:	mov	r0, #0
   19eb4:	ldr	r7, [sp, #40]	; 0x28
   19eb8:	ldr	r2, [sp, #36]	; 0x24
   19ebc:	ldr	lr, [sp, #52]	; 0x34
   19ec0:	b	19f70 <__assert_fail@plt+0x85d0>
   19ec4:	cmp	r7, #0
   19ec8:	bne	1a2c4 <__assert_fail@plt+0x8924>
   19ecc:	eor	r0, r2, #1
   19ed0:	ands	r0, lr, r0
   19ed4:	beq	19f0c <__assert_fail@plt+0x856c>
   19ed8:	cmp	fp, r8
   19edc:	movhi	r2, #39	; 0x27
   19ee0:	strbhi	r2, [r9, r8]
   19ee4:	add	r2, r8, #1
   19ee8:	cmp	fp, r2
   19eec:	movhi	ip, #36	; 0x24
   19ef0:	strbhi	ip, [r9, r2]
   19ef4:	add	r2, r8, #2
   19ef8:	cmp	fp, r2
   19efc:	movhi	ip, #39	; 0x27
   19f00:	strbhi	ip, [r9, r2]
   19f04:	add	r8, r8, #3
   19f08:	mov	r2, r0
   19f0c:	cmp	fp, r8
   19f10:	movhi	r0, #92	; 0x5c
   19f14:	strbhi	r0, [r9, r8]
   19f18:	add	r0, r8, #1
   19f1c:	cmp	fp, r0
   19f20:	lsrhi	ip, r4, #6
   19f24:	addhi	ip, ip, #48	; 0x30
   19f28:	strbhi	ip, [r9, r0]
   19f2c:	add	ip, r8, #2
   19f30:	cmp	fp, ip
   19f34:	lsrhi	r0, r4, #3
   19f38:	andhi	r0, r0, #7
   19f3c:	addhi	r0, r0, #48	; 0x30
   19f40:	add	sl, sl, #1
   19f44:	strbhi	r0, [r9, ip]
   19f48:	and	r4, r4, #7
   19f4c:	cmp	sl, r1
   19f50:	add	r4, r4, #48	; 0x30
   19f54:	add	r8, r8, #3
   19f58:	bcs	1a2dc <__assert_fail@plt+0x893c>
   19f5c:	mov	r0, r3
   19f60:	cmp	fp, r8
   19f64:	strbhi	r4, [r9, r8]
   19f68:	ldrb	r4, [r5, #1]!
   19f6c:	add	r8, r8, #1
   19f70:	cmp	r3, #0
   19f74:	bne	19ec4 <__assert_fail@plt+0x8524>
   19f78:	cmp	r6, #0
   19f7c:	bne	1a020 <__assert_fail@plt+0x8680>
   19f80:	eor	r6, r0, #1
   19f84:	and	r6, r6, r2
   19f88:	add	sl, sl, #1
   19f8c:	cmp	r1, sl
   19f90:	uxtb	r6, r6
   19f94:	bls	1a048 <__assert_fail@plt+0x86a8>
   19f98:	cmp	r6, #0
   19f9c:	beq	19f60 <__assert_fail@plt+0x85c0>
   19fa0:	cmp	fp, r8
   19fa4:	movhi	r2, #39	; 0x27
   19fa8:	strbhi	r2, [r9, r8]
   19fac:	add	r2, r8, #1
   19fb0:	cmp	fp, r2
   19fb4:	movhi	ip, #39	; 0x27
   19fb8:	strbhi	ip, [r9, r2]
   19fbc:	add	r8, r8, #2
   19fc0:	mov	r6, r3
   19fc4:	mov	r2, r3
   19fc8:	b	19f60 <__assert_fail@plt+0x85c0>
   19fcc:	ldr	r3, [sp, #184]	; 0xb8
   19fd0:	cmp	r3, #0
   19fd4:	beq	196ac <__assert_fail@plt+0x7d0c>
   19fd8:	lsr	r2, r4, #5
   19fdc:	mov	r0, r3
   19fe0:	uxtb	r2, r2
   19fe4:	and	r3, r4, #31
   19fe8:	ldr	r2, [r0, r2, lsl #2]
   19fec:	lsr	r3, r2, r3
   19ff0:	tst	r3, #1
   19ff4:	beq	196ac <__assert_fail@plt+0x7d0c>
   19ff8:	ldr	r3, [sp, #40]	; 0x28
   19ffc:	cmp	r3, #0
   1a000:	beq	19898 <__assert_fail@plt+0x7ef8>
   1a004:	mov	r3, r1
   1a008:	str	r3, [sp, #64]	; 0x40
   1a00c:	mov	sl, r9
   1a010:	ldr	r3, [sp, #56]	; 0x38
   1a014:	mov	r9, fp
   1a018:	ldr	r2, [sp, #64]	; 0x40
   1a01c:	b	1a20c <__assert_fail@plt+0x886c>
   1a020:	cmp	fp, r8
   1a024:	eor	r6, r0, #1
   1a028:	movhi	ip, #92	; 0x5c
   1a02c:	and	r6, r6, r2
   1a030:	add	sl, sl, #1
   1a034:	strbhi	ip, [r9, r8]
   1a038:	cmp	r1, sl
   1a03c:	add	r8, r8, #1
   1a040:	uxtb	r6, r6
   1a044:	bhi	19f98 <__assert_fail@plt+0x85f8>
   1a048:	str	r2, [sp, #36]	; 0x24
   1a04c:	b	196c4 <__assert_fail@plt+0x7d24>
   1a050:	ldr	r3, [sp, #24]
   1a054:	cmn	r3, #1
   1a058:	mov	r3, #0
   1a05c:	str	r3, [sp, #128]	; 0x80
   1a060:	str	r3, [sp, #132]	; 0x84
   1a064:	beq	1a358 <__assert_fail@plt+0x89b8>
   1a068:	mov	r2, r7
   1a06c:	mov	r3, #0
   1a070:	str	r7, [sp, #104]	; 0x68
   1a074:	str	r5, [sp, #116]	; 0x74
   1a078:	mov	r7, r3
   1a07c:	mov	r5, r2
   1a080:	str	r4, [sp, #32]
   1a084:	str	r6, [sp, #108]	; 0x6c
   1a088:	str	r8, [sp, #112]	; 0x70
   1a08c:	ldr	r3, [sp, #44]	; 0x2c
   1a090:	add	r6, sl, r7
   1a094:	add	r4, r3, r6
   1a098:	ldr	r3, [sp, #24]
   1a09c:	mov	r1, r4
   1a0a0:	sub	r2, r3, r6
   1a0a4:	add	r0, sp, #124	; 0x7c
   1a0a8:	add	r3, sp, #128	; 0x80
   1a0ac:	bl	1f13c <__assert_fail@plt+0xd79c>
   1a0b0:	subs	r8, r0, #0
   1a0b4:	beq	1a43c <__assert_fail@plt+0x8a9c>
   1a0b8:	cmn	r8, #1
   1a0bc:	beq	1a414 <__assert_fail@plt+0x8a74>
   1a0c0:	cmn	r8, #2
   1a0c4:	beq	1a3ac <__assert_fail@plt+0x8a0c>
   1a0c8:	ldr	r3, [sp, #64]	; 0x40
   1a0cc:	cmp	r3, #0
   1a0d0:	beq	1a190 <__assert_fail@plt+0x87f0>
   1a0d4:	cmp	r8, #1
   1a0d8:	beq	1a190 <__assert_fail@plt+0x87f0>
   1a0dc:	sub	r3, r8, #1
   1a0e0:	add	r6, r3, r6
   1a0e4:	ldr	r3, [sp, #44]	; 0x2c
   1a0e8:	add	r6, r3, r6
   1a0ec:	ldrb	r3, [r4, #1]!
   1a0f0:	sub	r3, r3, #91	; 0x5b
   1a0f4:	cmp	r3, #33	; 0x21
   1a0f8:	ldrls	pc, [pc, r3, lsl #2]
   1a0fc:	b	1a188 <__assert_fail@plt+0x87e8>
   1a100:	strdeq	sl, [r1], -r4
   1a104:	strdeq	sl, [r1], -r4
   1a108:	andeq	sl, r1, r8, lsl #3
   1a10c:	strdeq	sl, [r1], -r4
   1a110:	andeq	sl, r1, r8, lsl #3
   1a114:	strdeq	sl, [r1], -r4
   1a118:	andeq	sl, r1, r8, lsl #3
   1a11c:	andeq	sl, r1, r8, lsl #3
   1a120:	andeq	sl, r1, r8, lsl #3
   1a124:	andeq	sl, r1, r8, lsl #3
   1a128:	andeq	sl, r1, r8, lsl #3
   1a12c:	andeq	sl, r1, r8, lsl #3
   1a130:	andeq	sl, r1, r8, lsl #3
   1a134:	andeq	sl, r1, r8, lsl #3
   1a138:	andeq	sl, r1, r8, lsl #3
   1a13c:	andeq	sl, r1, r8, lsl #3
   1a140:	andeq	sl, r1, r8, lsl #3
   1a144:	andeq	sl, r1, r8, lsl #3
   1a148:	andeq	sl, r1, r8, lsl #3
   1a14c:	andeq	sl, r1, r8, lsl #3
   1a150:	andeq	sl, r1, r8, lsl #3
   1a154:	andeq	sl, r1, r8, lsl #3
   1a158:	andeq	sl, r1, r8, lsl #3
   1a15c:	andeq	sl, r1, r8, lsl #3
   1a160:	andeq	sl, r1, r8, lsl #3
   1a164:	andeq	sl, r1, r8, lsl #3
   1a168:	andeq	sl, r1, r8, lsl #3
   1a16c:	andeq	sl, r1, r8, lsl #3
   1a170:	andeq	sl, r1, r8, lsl #3
   1a174:	andeq	sl, r1, r8, lsl #3
   1a178:	andeq	sl, r1, r8, lsl #3
   1a17c:	andeq	sl, r1, r8, lsl #3
   1a180:	andeq	sl, r1, r8, lsl #3
   1a184:	strdeq	sl, [r1], -r4
   1a188:	cmp	r6, r4
   1a18c:	bne	1a0ec <__assert_fail@plt+0x874c>
   1a190:	ldr	r0, [sp, #124]	; 0x7c
   1a194:	bl	11664 <iswprint@plt>
   1a198:	add	r7, r7, r8
   1a19c:	cmp	r0, #0
   1a1a0:	add	r0, sp, #128	; 0x80
   1a1a4:	moveq	r5, #0
   1a1a8:	bl	11604 <mbsinit@plt>
   1a1ac:	cmp	r0, #0
   1a1b0:	beq	1a08c <__assert_fail@plt+0x86ec>
   1a1b4:	ldr	r4, [sp, #32]
   1a1b8:	str	r5, [sp, #32]
   1a1bc:	ldr	r3, [sp, #32]
   1a1c0:	mov	r1, r7
   1a1c4:	eor	r3, r3, #1
   1a1c8:	ldr	r7, [sp, #104]	; 0x68
   1a1cc:	ldr	r6, [sp, #108]	; 0x6c
   1a1d0:	ldr	r8, [sp, #112]	; 0x70
   1a1d4:	ldr	r5, [sp, #116]	; 0x74
   1a1d8:	uxtb	r3, r3
   1a1dc:	cmp	r1, #1
   1a1e0:	bls	19e9c <__assert_fail@plt+0x84fc>
   1a1e4:	ldr	r2, [sp, #56]	; 0x38
   1a1e8:	and	r3, r3, r2
   1a1ec:	uxtb	r3, r3
   1a1f0:	b	19eac <__assert_fail@plt+0x850c>
   1a1f4:	mov	r3, #2
   1a1f8:	str	r3, [sp, #176]	; 0xb0
   1a1fc:	ldr	r2, [sp, #64]	; 0x40
   1a200:	ldr	r3, [sp, #56]	; 0x38
   1a204:	mov	sl, r9
   1a208:	mov	r9, fp
   1a20c:	and	r3, r3, r2
   1a210:	tst	r3, #255	; 0xff
   1a214:	ldr	r3, [sp, #176]	; 0xb0
   1a218:	movne	r3, #4
   1a21c:	str	r3, [sp, #176]	; 0xb0
   1a220:	ldr	r3, [sp, #180]	; 0xb4
   1a224:	mov	ip, #0
   1a228:	bic	r3, r3, #2
   1a22c:	str	r3, [sp, #4]
   1a230:	ldr	r3, [sp, #192]	; 0xc0
   1a234:	ldr	r2, [sp, #44]	; 0x2c
   1a238:	str	r3, [sp, #16]
   1a23c:	ldr	r3, [sp, #188]	; 0xbc
   1a240:	mov	r1, r9
   1a244:	str	r3, [sp, #12]
   1a248:	ldr	r3, [sp, #176]	; 0xb0
   1a24c:	mov	r0, sl
   1a250:	str	r3, [sp]
   1a254:	str	ip, [sp, #8]
   1a258:	ldr	r3, [sp, #24]
   1a25c:	bl	190bc <__assert_fail@plt+0x771c>
   1a260:	mov	fp, r0
   1a264:	mov	r0, fp
   1a268:	add	sp, sp, #140	; 0x8c
   1a26c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a270:	mov	r4, #92	; 0x5c
   1a274:	mov	r1, #0
   1a278:	mov	r3, r4
   1a27c:	b	19870 <__assert_fail@plt+0x7ed0>
   1a280:	mov	r3, #0
   1a284:	ldr	r1, [sp, #52]	; 0x34
   1a288:	str	r3, [sp, #32]
   1a28c:	mov	r4, #63	; 0x3f
   1a290:	b	19690 <__assert_fail@plt+0x7cf0>
   1a294:	cmp	fp, #0
   1a298:	beq	1a2f4 <__assert_fail@plt+0x8954>
   1a29c:	mov	r3, #39	; 0x27
   1a2a0:	strb	r3, [r9]
   1a2a4:	mov	r3, #0
   1a2a8:	str	r3, [sp, #40]	; 0x28
   1a2ac:	mov	r3, #1
   1a2b0:	str	r3, [sp, #68]	; 0x44
   1a2b4:	ldr	r3, [pc, #448]	; 1a47c <__assert_fail@plt+0x8adc>
   1a2b8:	mov	r8, #1
   1a2bc:	str	r3, [sp, #72]	; 0x48
   1a2c0:	b	194a4 <__assert_fail@plt+0x7b04>
   1a2c4:	ldr	r3, [sp, #40]	; 0x28
   1a2c8:	mov	sl, r9
   1a2cc:	str	r3, [sp, #56]	; 0x38
   1a2d0:	mov	r9, fp
   1a2d4:	ldr	r2, [sp, #64]	; 0x40
   1a2d8:	b	1a20c <__assert_fail@plt+0x886c>
   1a2dc:	str	r2, [sp, #36]	; 0x24
   1a2e0:	b	196f4 <__assert_fail@plt+0x7d54>
   1a2e4:	mov	r1, #0
   1a2e8:	str	r3, [sp, #32]
   1a2ec:	mov	r4, #63	; 0x3f
   1a2f0:	b	19690 <__assert_fail@plt+0x7cf0>
   1a2f4:	ldr	r3, [pc, #384]	; 1a47c <__assert_fail@plt+0x8adc>
   1a2f8:	str	r3, [sp, #72]	; 0x48
   1a2fc:	mov	r3, #0
   1a300:	str	r3, [sp, #40]	; 0x28
   1a304:	mov	r3, #1
   1a308:	str	r3, [sp, #68]	; 0x44
   1a30c:	mov	r8, r3
   1a310:	b	194a4 <__assert_fail@plt+0x7b04>
   1a314:	bl	11964 <abort@plt>
   1a318:	cmp	fp, #0
   1a31c:	beq	1a37c <__assert_fail@plt+0x89dc>
   1a320:	mov	r2, #1
   1a324:	mov	r3, #34	; 0x22
   1a328:	strb	r3, [r9]
   1a32c:	mov	r8, r2
   1a330:	mov	r3, r2
   1a334:	str	r2, [sp, #68]	; 0x44
   1a338:	str	r3, [sp, #56]	; 0x38
   1a33c:	ldr	r3, [pc, #316]	; 1a480 <__assert_fail@plt+0x8ae0>
   1a340:	ldr	r1, [sp, #56]	; 0x38
   1a344:	str	r3, [sp, #72]	; 0x48
   1a348:	ldr	r2, [sp, #176]	; 0xb0
   1a34c:	ldr	ip, [sp, #40]	; 0x28
   1a350:	ldr	lr, [sp, #176]	; 0xb0
   1a354:	b	19188 <__assert_fail@plt+0x77e8>
   1a358:	ldr	r0, [sp, #44]	; 0x2c
   1a35c:	bl	117a8 <strlen@plt>
   1a360:	str	r0, [sp, #24]
   1a364:	b	1a068 <__assert_fail@plt+0x86c8>
   1a368:	mov	r7, #0
   1a36c:	ldr	r1, [sp, #52]	; 0x34
   1a370:	str	r3, [sp, #32]
   1a374:	mov	r4, #48	; 0x30
   1a378:	b	19690 <__assert_fail@plt+0x7cf0>
   1a37c:	mov	r3, #1
   1a380:	str	r3, [sp, #68]	; 0x44
   1a384:	mov	r8, r3
   1a388:	b	1a338 <__assert_fail@plt+0x8998>
   1a38c:	mov	r3, #2
   1a390:	mov	sl, r9
   1a394:	str	r3, [sp, #176]	; 0xb0
   1a398:	mov	r9, fp
   1a39c:	ldr	r3, [sp, #56]	; 0x38
   1a3a0:	b	1a20c <__assert_fail@plt+0x886c>
   1a3a4:	ldr	r6, [sp, #48]	; 0x30
   1a3a8:	b	19e58 <__assert_fail@plt+0x84b8>
   1a3ac:	ldr	r0, [sp, #24]
   1a3b0:	mov	ip, r6
   1a3b4:	cmp	r0, ip
   1a3b8:	mov	r1, r7
   1a3bc:	mov	r2, r4
   1a3c0:	ldr	r7, [sp, #104]	; 0x68
   1a3c4:	ldr	r4, [sp, #32]
   1a3c8:	ldr	r6, [sp, #108]	; 0x6c
   1a3cc:	ldr	r8, [sp, #112]	; 0x70
   1a3d0:	ldr	r5, [sp, #116]	; 0x74
   1a3d4:	bls	1a404 <__assert_fail@plt+0x8a64>
   1a3d8:	ldrb	r3, [r2]
   1a3dc:	cmp	r3, #0
   1a3e0:	bne	1a3f4 <__assert_fail@plt+0x8a54>
   1a3e4:	b	1a514 <__assert_fail@plt+0x8b74>
   1a3e8:	ldrb	r3, [r2, #1]!
   1a3ec:	cmp	r3, #0
   1a3f0:	beq	1a514 <__assert_fail@plt+0x8b74>
   1a3f4:	add	r1, r1, #1
   1a3f8:	add	r3, sl, r1
   1a3fc:	cmp	r0, r3
   1a400:	bhi	1a3e8 <__assert_fail@plt+0x8a48>
   1a404:	mov	r2, #0
   1a408:	mov	r3, r7
   1a40c:	str	r2, [sp, #32]
   1a410:	b	1a1dc <__assert_fail@plt+0x883c>
   1a414:	mov	r1, r7
   1a418:	ldr	r7, [sp, #104]	; 0x68
   1a41c:	mov	r2, #0
   1a420:	ldr	r4, [sp, #32]
   1a424:	ldr	r6, [sp, #108]	; 0x6c
   1a428:	ldr	r8, [sp, #112]	; 0x70
   1a42c:	ldr	r5, [sp, #116]	; 0x74
   1a430:	mov	r3, r7
   1a434:	str	r2, [sp, #32]
   1a438:	b	1a1dc <__assert_fail@plt+0x883c>
   1a43c:	mov	r3, r5
   1a440:	eor	r3, r3, #1
   1a444:	ldr	r4, [sp, #32]
   1a448:	mov	r1, r7
   1a44c:	str	r5, [sp, #32]
   1a450:	ldr	r7, [sp, #104]	; 0x68
   1a454:	ldr	r6, [sp, #108]	; 0x6c
   1a458:	ldr	r8, [sp, #112]	; 0x70
   1a45c:	ldr	r5, [sp, #116]	; 0x74
   1a460:	uxtb	r3, r3
   1a464:	b	1a1dc <__assert_fail@plt+0x883c>
   1a468:	mov	sl, r9
   1a46c:	str	r3, [sp, #56]	; 0x38
   1a470:	mov	r9, fp
   1a474:	ldr	r2, [sp, #64]	; 0x40
   1a478:	b	1a20c <__assert_fail@plt+0x886c>
   1a47c:	ldrdeq	r3, [r3], -r8
   1a480:	ldrdeq	r3, [r3], -r4
   1a484:	ldrdeq	r3, [r3], -ip
   1a488:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1a48c:	ldr	r2, [sp, #44]	; 0x2c
   1a490:	ldrb	r1, [r2, r3]
   1a494:	sub	r2, r1, #33	; 0x21
   1a498:	uxtb	r2, r2
   1a49c:	cmp	r2, #29
   1a4a0:	bhi	1a520 <__assert_fail@plt+0x8b80>
   1a4a4:	ldr	r0, [pc, #-36]	; 1a488 <__assert_fail@plt+0x8ae8>
   1a4a8:	mov	ip, #1
   1a4ac:	ands	r2, r0, ip, lsl r2
   1a4b0:	beq	1a540 <__assert_fail@plt+0x8ba0>
   1a4b4:	ldr	r2, [sp, #40]	; 0x28
   1a4b8:	cmp	r2, #0
   1a4bc:	bne	1a634 <__assert_fail@plt+0x8c94>
   1a4c0:	add	r2, r8, #1
   1a4c4:	cmp	fp, r8
   1a4c8:	strbhi	r4, [r9, r8]
   1a4cc:	cmp	fp, r2
   1a4d0:	movhi	r0, #34	; 0x22
   1a4d4:	strbhi	r0, [r9, r2]
   1a4d8:	add	r2, r8, #2
   1a4dc:	cmp	fp, r2
   1a4e0:	movhi	r0, #34	; 0x22
   1a4e4:	strbhi	r0, [r9, r2]
   1a4e8:	add	r2, r8, #3
   1a4ec:	cmp	fp, r2
   1a4f0:	mov	sl, r3
   1a4f4:	ldr	r3, [sp, #40]	; 0x28
   1a4f8:	movhi	r0, #63	; 0x3f
   1a4fc:	mov	r4, r1
   1a500:	strbhi	r0, [r9, r2]
   1a504:	add	r8, r8, #4
   1a508:	mov	r1, r3
   1a50c:	str	r3, [sp, #32]
   1a510:	b	19690 <__assert_fail@plt+0x7cf0>
   1a514:	str	r3, [sp, #32]
   1a518:	mov	r3, r7
   1a51c:	b	1a1dc <__assert_fail@plt+0x883c>
   1a520:	mov	r1, #0
   1a524:	str	r1, [sp, #32]
   1a528:	b	19690 <__assert_fail@plt+0x7cf0>
   1a52c:	mov	sl, r9
   1a530:	ldr	r3, [sp, #56]	; 0x38
   1a534:	mov	r9, fp
   1a538:	ldr	r2, [sp, #64]	; 0x40
   1a53c:	b	1a20c <__assert_fail@plt+0x886c>
   1a540:	str	r2, [sp, #32]
   1a544:	mov	r1, #0
   1a548:	b	19690 <__assert_fail@plt+0x7cf0>
   1a54c:	ldr	r2, [sp, #76]	; 0x4c
   1a550:	mov	sl, r9
   1a554:	mov	r9, fp
   1a558:	mov	fp, r8
   1a55c:	ldr	r1, [sp, #72]	; 0x48
   1a560:	cmp	r1, #0
   1a564:	moveq	r3, #0
   1a568:	andne	r3, r2, #1
   1a56c:	cmp	r3, #0
   1a570:	beq	1a59c <__assert_fail@plt+0x8bfc>
   1a574:	ldrb	r3, [r1]
   1a578:	cmp	r3, #0
   1a57c:	beq	1a59c <__assert_fail@plt+0x8bfc>
   1a580:	mov	r2, r1
   1a584:	cmp	r9, fp
   1a588:	strbhi	r3, [sl, fp]
   1a58c:	ldrb	r3, [r2, #1]!
   1a590:	add	fp, fp, #1
   1a594:	cmp	r3, #0
   1a598:	bne	1a584 <__assert_fail@plt+0x8be4>
   1a59c:	cmp	r9, fp
   1a5a0:	movhi	r3, #0
   1a5a4:	strbhi	r3, [sl, fp]
   1a5a8:	b	1a264 <__assert_fail@plt+0x88c4>
   1a5ac:	ldr	r3, [sp, #192]	; 0xc0
   1a5b0:	mov	ip, #5
   1a5b4:	str	r3, [sp, #16]
   1a5b8:	ldr	r3, [sp, #188]	; 0xbc
   1a5bc:	ldr	r2, [sp, #44]	; 0x2c
   1a5c0:	str	r3, [sp, #12]
   1a5c4:	ldr	r3, [sp, #184]	; 0xb8
   1a5c8:	ldr	r1, [sp, #84]	; 0x54
   1a5cc:	str	r3, [sp, #8]
   1a5d0:	ldr	r3, [sp, #180]	; 0xb4
   1a5d4:	mov	r0, r9
   1a5d8:	str	r3, [sp, #4]
   1a5dc:	str	ip, [sp]
   1a5e0:	ldr	r3, [sp, #24]
   1a5e4:	bl	190bc <__assert_fail@plt+0x771c>
   1a5e8:	mov	fp, r0
   1a5ec:	b	1a264 <__assert_fail@plt+0x88c4>
   1a5f0:	mov	sl, r9
   1a5f4:	mov	r9, fp
   1a5f8:	mov	fp, r8
   1a5fc:	b	1a55c <__assert_fail@plt+0x8bbc>
   1a600:	ldr	r1, [sp, #176]	; 0xb0
   1a604:	bl	18f9c <__assert_fail@plt+0x75fc>
   1a608:	str	r0, [sp, #192]	; 0xc0
   1a60c:	b	19578 <__assert_fail@plt+0x7bd8>
   1a610:	ldr	r1, [sp, #176]	; 0xb0
   1a614:	bl	18f9c <__assert_fail@plt+0x75fc>
   1a618:	str	r0, [sp, #188]	; 0xbc
   1a61c:	b	19558 <__assert_fail@plt+0x7bb8>
   1a620:	mov	sl, r9
   1a624:	mov	r2, r3
   1a628:	mov	r9, fp
   1a62c:	mov	fp, r8
   1a630:	b	1a55c <__assert_fail@plt+0x8bbc>
   1a634:	mov	sl, r9
   1a638:	mov	r9, fp
   1a63c:	b	1a220 <__assert_fail@plt+0x8880>
   1a640:	push	{r4, r5, r6, lr}
   1a644:	mov	r5, r0
   1a648:	bl	117d8 <__errno_location@plt>
   1a64c:	cmp	r5, #0
   1a650:	mov	r1, #48	; 0x30
   1a654:	mov	r4, r0
   1a658:	ldr	r0, [pc, #16]	; 1a670 <__assert_fail@plt+0x8cd0>
   1a65c:	ldr	r6, [r4]
   1a660:	movne	r0, r5
   1a664:	bl	1de5c <__assert_fail@plt+0xc4bc>
   1a668:	str	r6, [r4]
   1a66c:	pop	{r4, r5, r6, pc}
   1a670:	andeq	r5, r4, r4, lsr #5
   1a674:	ldr	r3, [pc, #12]	; 1a688 <__assert_fail@plt+0x8ce8>
   1a678:	cmp	r0, #0
   1a67c:	moveq	r0, r3
   1a680:	ldr	r0, [r0]
   1a684:	bx	lr
   1a688:	andeq	r5, r4, r4, lsr #5
   1a68c:	ldr	r3, [pc, #12]	; 1a6a0 <__assert_fail@plt+0x8d00>
   1a690:	cmp	r0, #0
   1a694:	moveq	r0, r3
   1a698:	str	r1, [r0]
   1a69c:	bx	lr
   1a6a0:	andeq	r5, r4, r4, lsr #5
   1a6a4:	ldr	r3, [pc, #52]	; 1a6e0 <__assert_fail@plt+0x8d40>
   1a6a8:	cmp	r0, #0
   1a6ac:	moveq	r0, r3
   1a6b0:	add	r3, r0, #8
   1a6b4:	push	{lr}		; (str lr, [sp, #-4]!)
   1a6b8:	lsr	lr, r1, #5
   1a6bc:	and	r1, r1, #31
   1a6c0:	ldr	ip, [r3, lr, lsl #2]
   1a6c4:	lsr	r0, ip, r1
   1a6c8:	eor	r2, r2, r0
   1a6cc:	and	r2, r2, #1
   1a6d0:	and	r0, r0, #1
   1a6d4:	eor	r1, ip, r2, lsl r1
   1a6d8:	str	r1, [r3, lr, lsl #2]
   1a6dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6e0:	andeq	r5, r4, r4, lsr #5
   1a6e4:	ldr	r3, [pc, #16]	; 1a6fc <__assert_fail@plt+0x8d5c>
   1a6e8:	cmp	r0, #0
   1a6ec:	movne	r3, r0
   1a6f0:	ldr	r0, [r3, #4]
   1a6f4:	str	r1, [r3, #4]
   1a6f8:	bx	lr
   1a6fc:	andeq	r5, r4, r4, lsr #5
   1a700:	ldr	r3, [pc, #44]	; 1a734 <__assert_fail@plt+0x8d94>
   1a704:	cmp	r0, #0
   1a708:	moveq	r0, r3
   1a70c:	mov	ip, #10
   1a710:	cmp	r2, #0
   1a714:	cmpne	r1, #0
   1a718:	str	ip, [r0]
   1a71c:	beq	1a72c <__assert_fail@plt+0x8d8c>
   1a720:	str	r1, [r0, #40]	; 0x28
   1a724:	str	r2, [r0, #44]	; 0x2c
   1a728:	bx	lr
   1a72c:	push	{r4, lr}
   1a730:	bl	11964 <abort@plt>
   1a734:	andeq	r5, r4, r4, lsr #5
   1a738:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a73c:	sub	sp, sp, #24
   1a740:	ldr	ip, [pc, #108]	; 1a7b4 <__assert_fail@plt+0x8e14>
   1a744:	ldr	r4, [sp, #56]	; 0x38
   1a748:	mov	r9, r2
   1a74c:	cmp	r4, #0
   1a750:	moveq	r4, ip
   1a754:	mov	sl, r3
   1a758:	mov	r7, r0
   1a75c:	mov	r8, r1
   1a760:	bl	117d8 <__errno_location@plt>
   1a764:	ldr	r3, [r4, #44]	; 0x2c
   1a768:	mov	r1, r8
   1a76c:	ldr	r6, [r0]
   1a770:	str	r3, [sp, #16]
   1a774:	ldr	r2, [r4, #40]	; 0x28
   1a778:	add	r3, r4, #8
   1a77c:	str	r3, [sp, #8]
   1a780:	str	r2, [sp, #12]
   1a784:	ldr	r2, [r4, #4]
   1a788:	mov	r5, r0
   1a78c:	str	r2, [sp, #4]
   1a790:	ldr	ip, [r4]
   1a794:	mov	r3, sl
   1a798:	mov	r2, r9
   1a79c:	mov	r0, r7
   1a7a0:	str	ip, [sp]
   1a7a4:	bl	190bc <__assert_fail@plt+0x771c>
   1a7a8:	str	r6, [r5]
   1a7ac:	add	sp, sp, #24
   1a7b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a7b4:	andeq	r5, r4, r4, lsr #5
   1a7b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a7bc:	cmp	r2, #0
   1a7c0:	sub	sp, sp, #36	; 0x24
   1a7c4:	ldr	r4, [pc, #164]	; 1a870 <__assert_fail@plt+0x8ed0>
   1a7c8:	mov	r8, r1
   1a7cc:	movne	r4, r2
   1a7d0:	mov	r7, r0
   1a7d4:	bl	117d8 <__errno_location@plt>
   1a7d8:	ldr	r3, [r4, #44]	; 0x2c
   1a7dc:	ldr	r5, [r4, #4]
   1a7e0:	add	r9, r4, #8
   1a7e4:	orr	r5, r5, #1
   1a7e8:	mov	r1, #0
   1a7ec:	mov	r2, r7
   1a7f0:	ldr	fp, [r0]
   1a7f4:	str	r3, [sp, #16]
   1a7f8:	ldr	r3, [r4, #40]	; 0x28
   1a7fc:	stmib	sp, {r5, r9}
   1a800:	str	r3, [sp, #12]
   1a804:	ldr	r3, [r4]
   1a808:	mov	r6, r0
   1a80c:	str	r3, [sp]
   1a810:	mov	r0, r1
   1a814:	mov	r3, r8
   1a818:	bl	190bc <__assert_fail@plt+0x771c>
   1a81c:	add	r1, r0, #1
   1a820:	mov	r0, r1
   1a824:	str	r1, [sp, #28]
   1a828:	bl	1d918 <__assert_fail@plt+0xbf78>
   1a82c:	ldr	r3, [r4, #44]	; 0x2c
   1a830:	ldr	r1, [sp, #28]
   1a834:	str	r3, [sp, #16]
   1a838:	ldr	r3, [r4, #40]	; 0x28
   1a83c:	str	r5, [sp, #4]
   1a840:	str	r3, [sp, #12]
   1a844:	str	r9, [sp, #8]
   1a848:	ldr	ip, [r4]
   1a84c:	mov	r3, r8
   1a850:	mov	r2, r7
   1a854:	str	ip, [sp]
   1a858:	mov	sl, r0
   1a85c:	bl	190bc <__assert_fail@plt+0x771c>
   1a860:	mov	r0, sl
   1a864:	str	fp, [r6]
   1a868:	add	sp, sp, #36	; 0x24
   1a86c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a870:	andeq	r5, r4, r4, lsr #5
   1a874:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a878:	cmp	r3, #0
   1a87c:	sub	sp, sp, #44	; 0x2c
   1a880:	ldr	r4, [pc, #192]	; 1a948 <__assert_fail@plt+0x8fa8>
   1a884:	mov	r6, r2
   1a888:	movne	r4, r3
   1a88c:	mov	r9, r1
   1a890:	mov	r8, r0
   1a894:	bl	117d8 <__errno_location@plt>
   1a898:	ldr	r3, [r4, #44]	; 0x2c
   1a89c:	ldr	r5, [r4, #4]
   1a8a0:	add	sl, r4, #8
   1a8a4:	cmp	r6, #0
   1a8a8:	orreq	r5, r5, #1
   1a8ac:	mov	r1, #0
   1a8b0:	ldr	r2, [r0]
   1a8b4:	str	r3, [sp, #16]
   1a8b8:	ldr	r3, [r4, #40]	; 0x28
   1a8bc:	stmib	sp, {r5, sl}
   1a8c0:	str	r3, [sp, #12]
   1a8c4:	ldr	r3, [r4]
   1a8c8:	mov	r7, r0
   1a8cc:	str	r2, [sp, #28]
   1a8d0:	str	r3, [sp]
   1a8d4:	mov	r2, r8
   1a8d8:	mov	r3, r9
   1a8dc:	mov	r0, r1
   1a8e0:	bl	190bc <__assert_fail@plt+0x771c>
   1a8e4:	add	r1, r0, #1
   1a8e8:	mov	fp, r0
   1a8ec:	mov	r0, r1
   1a8f0:	str	r1, [sp, #36]	; 0x24
   1a8f4:	bl	1d918 <__assert_fail@plt+0xbf78>
   1a8f8:	ldr	r3, [r4, #44]	; 0x2c
   1a8fc:	mov	r2, r8
   1a900:	str	r3, [sp, #16]
   1a904:	ldr	r3, [r4, #40]	; 0x28
   1a908:	str	r5, [sp, #4]
   1a90c:	str	r3, [sp, #12]
   1a910:	str	sl, [sp, #8]
   1a914:	ldr	ip, [r4]
   1a918:	ldr	r1, [sp, #36]	; 0x24
   1a91c:	mov	r3, r9
   1a920:	str	ip, [sp]
   1a924:	str	r0, [sp, #32]
   1a928:	bl	190bc <__assert_fail@plt+0x771c>
   1a92c:	ldr	r2, [sp, #28]
   1a930:	cmp	r6, #0
   1a934:	str	r2, [r7]
   1a938:	ldr	r0, [sp, #32]
   1a93c:	strne	fp, [r6]
   1a940:	add	sp, sp, #44	; 0x2c
   1a944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a948:	andeq	r5, r4, r4, lsr #5
   1a94c:	push	{r4, r5, r6, r7, r8, lr}
   1a950:	ldr	r6, [pc, #116]	; 1a9cc <__assert_fail@plt+0x902c>
   1a954:	ldr	r3, [r6, #4]
   1a958:	ldr	r7, [r6]
   1a95c:	cmp	r3, #1
   1a960:	movgt	r5, r7
   1a964:	movgt	r4, #1
   1a968:	ble	1a988 <__assert_fail@plt+0x8fe8>
   1a96c:	ldr	r0, [r5, #12]
   1a970:	bl	1f018 <__assert_fail@plt+0xd678>
   1a974:	ldr	r3, [r6, #4]
   1a978:	add	r4, r4, #1
   1a97c:	cmp	r3, r4
   1a980:	add	r5, r5, #8
   1a984:	bgt	1a96c <__assert_fail@plt+0x8fcc>
   1a988:	ldr	r0, [r7, #4]
   1a98c:	ldr	r4, [pc, #60]	; 1a9d0 <__assert_fail@plt+0x9030>
   1a990:	cmp	r0, r4
   1a994:	beq	1a9a8 <__assert_fail@plt+0x9008>
   1a998:	bl	1f018 <__assert_fail@plt+0xd678>
   1a99c:	mov	r3, #256	; 0x100
   1a9a0:	str	r4, [r6, #12]
   1a9a4:	str	r3, [r6, #8]
   1a9a8:	ldr	r4, [pc, #36]	; 1a9d4 <__assert_fail@plt+0x9034>
   1a9ac:	cmp	r7, r4
   1a9b0:	beq	1a9c0 <__assert_fail@plt+0x9020>
   1a9b4:	mov	r0, r7
   1a9b8:	bl	1f018 <__assert_fail@plt+0xd678>
   1a9bc:	str	r4, [r6]
   1a9c0:	mov	r3, #1
   1a9c4:	str	r3, [r6, #4]
   1a9c8:	pop	{r4, r5, r6, r7, r8, pc}
   1a9cc:	andeq	r5, r4, r0, asr #3
   1a9d0:	ldrdeq	r5, [r4], -r4
   1a9d4:	andeq	r5, r4, r8, asr #3
   1a9d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a9dc:	sub	sp, sp, #44	; 0x2c
   1a9e0:	mov	r5, r0
   1a9e4:	mov	sl, r1
   1a9e8:	bl	117d8 <__errno_location@plt>
   1a9ec:	ldr	r4, [pc, #400]	; 1ab84 <__assert_fail@plt+0x91e4>
   1a9f0:	cmn	r5, #-2147483647	; 0x80000001
   1a9f4:	ldr	r6, [r4]
   1a9f8:	mov	r8, r0
   1a9fc:	movne	r0, #0
   1aa00:	moveq	r0, #1
   1aa04:	ldr	r3, [r8]
   1aa08:	orrs	r0, r0, r5, lsr #31
   1aa0c:	str	r3, [sp, #24]
   1aa10:	bne	1ab80 <__assert_fail@plt+0x91e0>
   1aa14:	ldr	r2, [r4, #4]
   1aa18:	cmp	r5, r2
   1aa1c:	blt	1aa7c <__assert_fail@plt+0x90dc>
   1aa20:	add	r7, r4, #8
   1aa24:	cmp	r6, r7
   1aa28:	str	r2, [sp, #36]	; 0x24
   1aa2c:	beq	1ab50 <__assert_fail@plt+0x91b0>
   1aa30:	mov	r3, #8
   1aa34:	sub	r2, r5, r2
   1aa38:	mov	r0, r6
   1aa3c:	str	r3, [sp]
   1aa40:	add	r2, r2, #1
   1aa44:	mvn	r3, #-2147483648	; 0x80000000
   1aa48:	add	r1, sp, #36	; 0x24
   1aa4c:	bl	1db34 <__assert_fail@plt+0xc194>
   1aa50:	mov	r6, r0
   1aa54:	str	r0, [r4]
   1aa58:	ldr	r0, [r4, #4]
   1aa5c:	ldr	r2, [sp, #36]	; 0x24
   1aa60:	mov	r1, #0
   1aa64:	sub	r2, r2, r0
   1aa68:	add	r0, r6, r0, lsl #3
   1aa6c:	lsl	r2, r2, #3
   1aa70:	bl	11814 <memset@plt>
   1aa74:	ldr	r3, [sp, #36]	; 0x24
   1aa78:	str	r3, [r4, #4]
   1aa7c:	ldr	r4, [pc, #260]	; 1ab88 <__assert_fail@plt+0x91e8>
   1aa80:	add	fp, r6, r5, lsl #3
   1aa84:	ldr	r9, [r6, r5, lsl #3]
   1aa88:	ldr	r0, [r4, #4]
   1aa8c:	ldr	r3, [r4]
   1aa90:	ldr	r7, [fp, #4]
   1aa94:	ldr	r1, [r4, #44]	; 0x2c
   1aa98:	ldr	r2, [r4, #40]	; 0x28
   1aa9c:	orr	r0, r0, #1
   1aaa0:	str	r3, [sp]
   1aaa4:	add	r3, r4, #8
   1aaa8:	str	r0, [sp, #28]
   1aaac:	str	r0, [sp, #4]
   1aab0:	str	r1, [sp, #16]
   1aab4:	str	r2, [sp, #12]
   1aab8:	str	r3, [sp, #8]
   1aabc:	mov	r0, r7
   1aac0:	mov	r1, r9
   1aac4:	mvn	r3, #0
   1aac8:	mov	r2, sl
   1aacc:	bl	190bc <__assert_fail@plt+0x771c>
   1aad0:	cmp	r9, r0
   1aad4:	bhi	1ab3c <__assert_fail@plt+0x919c>
   1aad8:	add	r3, r4, #48	; 0x30
   1aadc:	add	r9, r0, #1
   1aae0:	cmp	r7, r3
   1aae4:	str	r9, [r6, r5, lsl #3]
   1aae8:	beq	1aaf4 <__assert_fail@plt+0x9154>
   1aaec:	mov	r0, r7
   1aaf0:	bl	1f018 <__assert_fail@plt+0xd678>
   1aaf4:	mov	r0, r9
   1aaf8:	bl	1d918 <__assert_fail@plt+0xbf78>
   1aafc:	ldr	ip, [r4, #44]	; 0x2c
   1ab00:	ldr	r3, [r4]
   1ab04:	ldr	lr, [r4, #40]	; 0x28
   1ab08:	ldr	r4, [pc, #124]	; 1ab8c <__assert_fail@plt+0x91ec>
   1ab0c:	mov	r2, sl
   1ab10:	mov	r1, r9
   1ab14:	str	r0, [fp, #4]
   1ab18:	str	r4, [sp, #8]
   1ab1c:	ldr	r4, [sp, #28]
   1ab20:	str	r3, [sp]
   1ab24:	str	r4, [sp, #4]
   1ab28:	str	ip, [sp, #16]
   1ab2c:	str	lr, [sp, #12]
   1ab30:	mvn	r3, #0
   1ab34:	mov	r7, r0
   1ab38:	bl	190bc <__assert_fail@plt+0x771c>
   1ab3c:	ldr	r3, [sp, #24]
   1ab40:	mov	r0, r7
   1ab44:	str	r3, [r8]
   1ab48:	add	sp, sp, #44	; 0x2c
   1ab4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab50:	mov	r3, #8
   1ab54:	sub	r2, r5, r2
   1ab58:	str	r3, [sp]
   1ab5c:	add	r1, sp, #36	; 0x24
   1ab60:	add	r2, r2, #1
   1ab64:	mvn	r3, #-2147483648	; 0x80000000
   1ab68:	bl	1db34 <__assert_fail@plt+0xc194>
   1ab6c:	mov	r6, r0
   1ab70:	ldm	r7, {r0, r1}
   1ab74:	str	r6, [r4]
   1ab78:	stm	r6, {r0, r1}
   1ab7c:	b	1aa58 <__assert_fail@plt+0x90b8>
   1ab80:	bl	11964 <abort@plt>
   1ab84:	andeq	r5, r4, r0, asr #3
   1ab88:	andeq	r5, r4, r4, lsr #5
   1ab8c:	andeq	r5, r4, ip, lsr #5
   1ab90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab94:	sub	sp, sp, #52	; 0x34
   1ab98:	mov	r5, r0
   1ab9c:	mov	sl, r1
   1aba0:	mov	fp, r2
   1aba4:	bl	117d8 <__errno_location@plt>
   1aba8:	ldr	r4, [pc, #408]	; 1ad48 <__assert_fail@plt+0x93a8>
   1abac:	cmn	r5, #-2147483647	; 0x80000001
   1abb0:	ldr	r6, [r4]
   1abb4:	mov	r8, r0
   1abb8:	movne	r0, #0
   1abbc:	moveq	r0, #1
   1abc0:	ldr	r3, [r8]
   1abc4:	orrs	r0, r0, r5, lsr #31
   1abc8:	str	r3, [sp, #28]
   1abcc:	bne	1ad44 <__assert_fail@plt+0x93a4>
   1abd0:	ldr	r2, [r4, #4]
   1abd4:	cmp	r5, r2
   1abd8:	blt	1ac38 <__assert_fail@plt+0x9298>
   1abdc:	add	r7, r4, #8
   1abe0:	cmp	r6, r7
   1abe4:	str	r2, [sp, #44]	; 0x2c
   1abe8:	beq	1ad14 <__assert_fail@plt+0x9374>
   1abec:	mov	r3, #8
   1abf0:	sub	r2, r5, r2
   1abf4:	mov	r0, r6
   1abf8:	str	r3, [sp]
   1abfc:	add	r2, r2, #1
   1ac00:	mvn	r3, #-2147483648	; 0x80000000
   1ac04:	add	r1, sp, #44	; 0x2c
   1ac08:	bl	1db34 <__assert_fail@plt+0xc194>
   1ac0c:	mov	r6, r0
   1ac10:	str	r0, [r4]
   1ac14:	ldr	r0, [r4, #4]
   1ac18:	ldr	r2, [sp, #44]	; 0x2c
   1ac1c:	mov	r1, #0
   1ac20:	sub	r2, r2, r0
   1ac24:	add	r0, r6, r0, lsl #3
   1ac28:	lsl	r2, r2, #3
   1ac2c:	bl	11814 <memset@plt>
   1ac30:	ldr	r3, [sp, #44]	; 0x2c
   1ac34:	str	r3, [r4, #4]
   1ac38:	ldr	r4, [pc, #268]	; 1ad4c <__assert_fail@plt+0x93ac>
   1ac3c:	add	r3, r6, r5, lsl #3
   1ac40:	str	r3, [sp, #32]
   1ac44:	ldr	r7, [r3, #4]
   1ac48:	ldr	r0, [r4, #4]
   1ac4c:	ldr	r3, [r4]
   1ac50:	ldr	r9, [r6, r5, lsl #3]
   1ac54:	ldr	r1, [r4, #44]	; 0x2c
   1ac58:	ldr	r2, [r4, #40]	; 0x28
   1ac5c:	orr	r0, r0, #1
   1ac60:	str	r3, [sp]
   1ac64:	add	r3, r4, #8
   1ac68:	str	r0, [sp, #36]	; 0x24
   1ac6c:	str	r0, [sp, #4]
   1ac70:	str	r1, [sp, #16]
   1ac74:	str	r2, [sp, #12]
   1ac78:	str	r3, [sp, #8]
   1ac7c:	mov	r0, r7
   1ac80:	mov	r1, r9
   1ac84:	mov	r3, fp
   1ac88:	mov	r2, sl
   1ac8c:	bl	190bc <__assert_fail@plt+0x771c>
   1ac90:	cmp	r9, r0
   1ac94:	bhi	1ad00 <__assert_fail@plt+0x9360>
   1ac98:	add	r3, r4, #48	; 0x30
   1ac9c:	add	r9, r0, #1
   1aca0:	cmp	r7, r3
   1aca4:	str	r9, [r6, r5, lsl #3]
   1aca8:	beq	1acb4 <__assert_fail@plt+0x9314>
   1acac:	mov	r0, r7
   1acb0:	bl	1f018 <__assert_fail@plt+0xd678>
   1acb4:	mov	r0, r9
   1acb8:	bl	1d918 <__assert_fail@plt+0xbf78>
   1acbc:	ldr	ip, [sp, #32]
   1acc0:	ldr	lr, [r4, #44]	; 0x2c
   1acc4:	ldr	r5, [r4, #40]	; 0x28
   1acc8:	mov	r3, fp
   1accc:	mov	r2, sl
   1acd0:	mov	r1, r9
   1acd4:	str	r0, [ip, #4]
   1acd8:	ldr	ip, [r4]
   1acdc:	ldr	r4, [pc, #108]	; 1ad50 <__assert_fail@plt+0x93b0>
   1ace0:	str	lr, [sp, #16]
   1ace4:	str	r4, [sp, #8]
   1ace8:	ldr	r4, [sp, #36]	; 0x24
   1acec:	str	r5, [sp, #12]
   1acf0:	str	r4, [sp, #4]
   1acf4:	str	ip, [sp]
   1acf8:	mov	r7, r0
   1acfc:	bl	190bc <__assert_fail@plt+0x771c>
   1ad00:	ldr	r3, [sp, #28]
   1ad04:	mov	r0, r7
   1ad08:	str	r3, [r8]
   1ad0c:	add	sp, sp, #52	; 0x34
   1ad10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad14:	mov	r3, #8
   1ad18:	sub	r2, r5, r2
   1ad1c:	str	r3, [sp]
   1ad20:	add	r1, sp, #44	; 0x2c
   1ad24:	add	r2, r2, #1
   1ad28:	mvn	r3, #-2147483648	; 0x80000000
   1ad2c:	bl	1db34 <__assert_fail@plt+0xc194>
   1ad30:	mov	r6, r0
   1ad34:	ldm	r7, {r0, r1}
   1ad38:	str	r6, [r4]
   1ad3c:	stm	r6, {r0, r1}
   1ad40:	b	1ac14 <__assert_fail@plt+0x9274>
   1ad44:	bl	11964 <abort@plt>
   1ad48:	andeq	r5, r4, r0, asr #3
   1ad4c:	andeq	r5, r4, r4, lsr #5
   1ad50:	andeq	r5, r4, ip, lsr #5
   1ad54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad58:	sub	sp, sp, #44	; 0x2c
   1ad5c:	mov	sl, r0
   1ad60:	bl	117d8 <__errno_location@plt>
   1ad64:	ldr	r4, [pc, #352]	; 1aecc <__assert_fail@plt+0x952c>
   1ad68:	ldr	r2, [r4, #4]
   1ad6c:	ldr	r5, [r4]
   1ad70:	cmp	r2, #0
   1ad74:	ldr	r3, [r0]
   1ad78:	mov	r8, r0
   1ad7c:	str	r3, [sp, #28]
   1ad80:	bgt	1addc <__assert_fail@plt+0x943c>
   1ad84:	add	r6, r4, #8
   1ad88:	cmp	r5, r6
   1ad8c:	str	r2, [sp, #36]	; 0x24
   1ad90:	beq	1ae9c <__assert_fail@plt+0x94fc>
   1ad94:	mov	r3, #8
   1ad98:	mov	r0, r5
   1ad9c:	str	r3, [sp]
   1ada0:	rsb	r2, r2, #1
   1ada4:	mvn	r3, #-2147483648	; 0x80000000
   1ada8:	add	r1, sp, #36	; 0x24
   1adac:	bl	1db34 <__assert_fail@plt+0xc194>
   1adb0:	mov	r5, r0
   1adb4:	str	r0, [r4]
   1adb8:	ldr	r0, [r4, #4]
   1adbc:	ldr	r2, [sp, #36]	; 0x24
   1adc0:	mov	r1, #0
   1adc4:	sub	r2, r2, r0
   1adc8:	add	r0, r5, r0, lsl #3
   1adcc:	lsl	r2, r2, #3
   1add0:	bl	11814 <memset@plt>
   1add4:	ldr	r3, [sp, #36]	; 0x24
   1add8:	str	r3, [r4, #4]
   1addc:	ldr	r4, [pc, #236]	; 1aed0 <__assert_fail@plt+0x9530>
   1ade0:	ldr	r9, [r5]
   1ade4:	ldr	r6, [r5, #4]
   1ade8:	ldr	r7, [r4, #4]
   1adec:	ldr	r1, [r4, #44]	; 0x2c
   1adf0:	ldr	r2, [r4, #40]	; 0x28
   1adf4:	ldr	r3, [r4]
   1adf8:	orr	r7, r7, #1
   1adfc:	add	fp, r4, #8
   1ae00:	str	r1, [sp, #16]
   1ae04:	str	r2, [sp, #12]
   1ae08:	str	r3, [sp]
   1ae0c:	str	r7, [sp, #4]
   1ae10:	str	fp, [sp, #8]
   1ae14:	mov	r1, r9
   1ae18:	mov	r0, r6
   1ae1c:	mvn	r3, #0
   1ae20:	mov	r2, sl
   1ae24:	bl	190bc <__assert_fail@plt+0x771c>
   1ae28:	cmp	r9, r0
   1ae2c:	bhi	1ae88 <__assert_fail@plt+0x94e8>
   1ae30:	add	r3, r4, #48	; 0x30
   1ae34:	add	r9, r0, #1
   1ae38:	cmp	r6, r3
   1ae3c:	str	r9, [r5]
   1ae40:	beq	1ae4c <__assert_fail@plt+0x94ac>
   1ae44:	mov	r0, r6
   1ae48:	bl	1f018 <__assert_fail@plt+0xd678>
   1ae4c:	mov	r0, r9
   1ae50:	bl	1d918 <__assert_fail@plt+0xbf78>
   1ae54:	ldr	ip, [r4, #44]	; 0x2c
   1ae58:	ldr	r3, [r4]
   1ae5c:	ldr	lr, [r4, #40]	; 0x28
   1ae60:	mov	r2, sl
   1ae64:	mov	r1, r9
   1ae68:	str	r0, [r5, #4]
   1ae6c:	str	r3, [sp]
   1ae70:	stmib	sp, {r7, fp}
   1ae74:	str	ip, [sp, #16]
   1ae78:	str	lr, [sp, #12]
   1ae7c:	mvn	r3, #0
   1ae80:	mov	r6, r0
   1ae84:	bl	190bc <__assert_fail@plt+0x771c>
   1ae88:	ldr	r3, [sp, #28]
   1ae8c:	mov	r0, r6
   1ae90:	str	r3, [r8]
   1ae94:	add	sp, sp, #44	; 0x2c
   1ae98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae9c:	mov	r3, #8
   1aea0:	str	r3, [sp]
   1aea4:	add	r1, sp, #36	; 0x24
   1aea8:	rsb	r2, r2, #1
   1aeac:	mvn	r3, #-2147483648	; 0x80000000
   1aeb0:	mov	r0, #0
   1aeb4:	bl	1db34 <__assert_fail@plt+0xc194>
   1aeb8:	mov	r5, r0
   1aebc:	ldm	r6, {r0, r1}
   1aec0:	str	r5, [r4]
   1aec4:	stm	r5, {r0, r1}
   1aec8:	b	1adb8 <__assert_fail@plt+0x9418>
   1aecc:	andeq	r5, r4, r0, asr #3
   1aed0:	andeq	r5, r4, r4, lsr #5
   1aed4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aed8:	sub	sp, sp, #44	; 0x2c
   1aedc:	mov	r9, r0
   1aee0:	mov	sl, r1
   1aee4:	bl	117d8 <__errno_location@plt>
   1aee8:	ldr	r4, [pc, #364]	; 1b05c <__assert_fail@plt+0x96bc>
   1aeec:	ldr	r2, [r4, #4]
   1aef0:	ldr	r5, [r4]
   1aef4:	cmp	r2, #0
   1aef8:	ldr	r3, [r0]
   1aefc:	mov	r7, r0
   1af00:	str	r3, [sp, #24]
   1af04:	bgt	1af60 <__assert_fail@plt+0x95c0>
   1af08:	add	r6, r4, #8
   1af0c:	cmp	r5, r6
   1af10:	str	r2, [sp, #36]	; 0x24
   1af14:	beq	1b02c <__assert_fail@plt+0x968c>
   1af18:	mov	r3, #8
   1af1c:	mov	r0, r5
   1af20:	str	r3, [sp]
   1af24:	rsb	r2, r2, #1
   1af28:	mvn	r3, #-2147483648	; 0x80000000
   1af2c:	add	r1, sp, #36	; 0x24
   1af30:	bl	1db34 <__assert_fail@plt+0xc194>
   1af34:	mov	r5, r0
   1af38:	str	r0, [r4]
   1af3c:	ldr	r0, [r4, #4]
   1af40:	ldr	r2, [sp, #36]	; 0x24
   1af44:	mov	r1, #0
   1af48:	sub	r2, r2, r0
   1af4c:	add	r0, r5, r0, lsl #3
   1af50:	lsl	r2, r2, #3
   1af54:	bl	11814 <memset@plt>
   1af58:	ldr	r3, [sp, #36]	; 0x24
   1af5c:	str	r3, [r4, #4]
   1af60:	ldr	r4, [pc, #248]	; 1b060 <__assert_fail@plt+0x96c0>
   1af64:	ldr	r8, [r5]
   1af68:	ldr	r6, [r5, #4]
   1af6c:	ldr	r0, [r4, #4]
   1af70:	ldr	r1, [r4, #44]	; 0x2c
   1af74:	ldr	r2, [r4, #40]	; 0x28
   1af78:	ldr	r3, [r4]
   1af7c:	orr	r0, r0, #1
   1af80:	add	fp, r4, #8
   1af84:	str	r0, [sp, #28]
   1af88:	str	r0, [sp, #4]
   1af8c:	str	r1, [sp, #16]
   1af90:	str	r2, [sp, #12]
   1af94:	str	r3, [sp]
   1af98:	str	fp, [sp, #8]
   1af9c:	mov	r1, r8
   1afa0:	mov	r0, r6
   1afa4:	mov	r3, sl
   1afa8:	mov	r2, r9
   1afac:	bl	190bc <__assert_fail@plt+0x771c>
   1afb0:	cmp	r8, r0
   1afb4:	bhi	1b018 <__assert_fail@plt+0x9678>
   1afb8:	add	r3, r4, #48	; 0x30
   1afbc:	add	r8, r0, #1
   1afc0:	cmp	r6, r3
   1afc4:	str	r8, [r5]
   1afc8:	beq	1afd4 <__assert_fail@plt+0x9634>
   1afcc:	mov	r0, r6
   1afd0:	bl	1f018 <__assert_fail@plt+0xd678>
   1afd4:	mov	r0, r8
   1afd8:	bl	1d918 <__assert_fail@plt+0xbf78>
   1afdc:	ldr	lr, [r4, #44]	; 0x2c
   1afe0:	ldr	ip, [r4]
   1afe4:	mov	r3, sl
   1afe8:	mov	r2, r9
   1afec:	mov	r1, r8
   1aff0:	str	r0, [r5, #4]
   1aff4:	ldr	r5, [r4, #40]	; 0x28
   1aff8:	ldr	r4, [sp, #28]
   1affc:	str	fp, [sp, #8]
   1b000:	str	r4, [sp, #4]
   1b004:	str	lr, [sp, #16]
   1b008:	str	r5, [sp, #12]
   1b00c:	str	ip, [sp]
   1b010:	mov	r6, r0
   1b014:	bl	190bc <__assert_fail@plt+0x771c>
   1b018:	ldr	r3, [sp, #24]
   1b01c:	mov	r0, r6
   1b020:	str	r3, [r7]
   1b024:	add	sp, sp, #44	; 0x2c
   1b028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b02c:	mov	r3, #8
   1b030:	str	r3, [sp]
   1b034:	add	r1, sp, #36	; 0x24
   1b038:	rsb	r2, r2, #1
   1b03c:	mvn	r3, #-2147483648	; 0x80000000
   1b040:	mov	r0, #0
   1b044:	bl	1db34 <__assert_fail@plt+0xc194>
   1b048:	mov	r5, r0
   1b04c:	ldm	r6, {r0, r1}
   1b050:	str	r5, [r4]
   1b054:	stm	r5, {r0, r1}
   1b058:	b	1af3c <__assert_fail@plt+0x959c>
   1b05c:	andeq	r5, r4, r0, asr #3
   1b060:	andeq	r5, r4, r4, lsr #5
   1b064:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b068:	sub	sp, sp, #132	; 0x84
   1b06c:	mov	r5, r1
   1b070:	mov	r4, r0
   1b074:	mov	r9, r2
   1b078:	add	r0, sp, #80	; 0x50
   1b07c:	mov	r2, #48	; 0x30
   1b080:	mov	r1, #0
   1b084:	bl	11814 <memset@plt>
   1b088:	cmp	r5, #10
   1b08c:	beq	1b244 <__assert_fail@plt+0x98a4>
   1b090:	add	lr, sp, #80	; 0x50
   1b094:	str	r5, [sp, #80]	; 0x50
   1b098:	ldm	lr!, {r0, r1, r2, r3}
   1b09c:	add	ip, sp, #32
   1b0a0:	ldr	r6, [pc, #416]	; 1b248 <__assert_fail@plt+0x98a8>
   1b0a4:	stmia	ip!, {r0, r1, r2, r3}
   1b0a8:	ldm	lr!, {r0, r1, r2, r3}
   1b0ac:	stmia	ip!, {r0, r1, r2, r3}
   1b0b0:	ldm	lr, {r0, r1, r2, r3}
   1b0b4:	stm	ip, {r0, r1, r2, r3}
   1b0b8:	bl	117d8 <__errno_location@plt>
   1b0bc:	cmn	r4, #-2147483647	; 0x80000001
   1b0c0:	ldr	r5, [r6]
   1b0c4:	mov	r7, r0
   1b0c8:	movne	r0, #0
   1b0cc:	moveq	r0, #1
   1b0d0:	ldr	r3, [r7]
   1b0d4:	orrs	r0, r0, r4, lsr #31
   1b0d8:	str	r3, [sp, #24]
   1b0dc:	bne	1b244 <__assert_fail@plt+0x98a4>
   1b0e0:	ldr	r2, [r6, #4]
   1b0e4:	cmp	r4, r2
   1b0e8:	blt	1b148 <__assert_fail@plt+0x97a8>
   1b0ec:	add	r8, r6, #8
   1b0f0:	cmp	r5, r8
   1b0f4:	str	r2, [sp, #80]	; 0x50
   1b0f8:	beq	1b214 <__assert_fail@plt+0x9874>
   1b0fc:	mov	r3, #8
   1b100:	sub	r2, r4, r2
   1b104:	mov	r0, r5
   1b108:	str	r3, [sp]
   1b10c:	add	r2, r2, #1
   1b110:	add	r1, sp, #80	; 0x50
   1b114:	mvn	r3, #-2147483648	; 0x80000000
   1b118:	bl	1db34 <__assert_fail@plt+0xc194>
   1b11c:	mov	r5, r0
   1b120:	str	r0, [r6]
   1b124:	ldr	r0, [r6, #4]
   1b128:	ldr	r2, [sp, #80]	; 0x50
   1b12c:	mov	r1, #0
   1b130:	sub	r2, r2, r0
   1b134:	add	r0, r5, r0, lsl #3
   1b138:	lsl	r2, r2, #3
   1b13c:	bl	11814 <memset@plt>
   1b140:	ldr	r3, [sp, #80]	; 0x50
   1b144:	str	r3, [r6, #4]
   1b148:	add	fp, r5, r4, lsl #3
   1b14c:	ldr	r1, [sp, #36]	; 0x24
   1b150:	ldr	r8, [r5, r4, lsl #3]
   1b154:	ldr	r6, [fp, #4]
   1b158:	ldr	r2, [sp, #72]	; 0x48
   1b15c:	ldr	r3, [sp, #32]
   1b160:	ldr	ip, [sp, #76]	; 0x4c
   1b164:	orr	r1, r1, #1
   1b168:	add	sl, sp, #40	; 0x28
   1b16c:	str	r1, [sp, #28]
   1b170:	str	r1, [sp, #4]
   1b174:	str	r2, [sp, #12]
   1b178:	str	r3, [sp]
   1b17c:	mov	r0, r6
   1b180:	mov	r1, r8
   1b184:	str	ip, [sp, #16]
   1b188:	str	sl, [sp, #8]
   1b18c:	mvn	r3, #0
   1b190:	mov	r2, r9
   1b194:	bl	190bc <__assert_fail@plt+0x771c>
   1b198:	cmp	r8, r0
   1b19c:	bhi	1b200 <__assert_fail@plt+0x9860>
   1b1a0:	ldr	r3, [pc, #164]	; 1b24c <__assert_fail@plt+0x98ac>
   1b1a4:	add	r8, r0, #1
   1b1a8:	cmp	r6, r3
   1b1ac:	str	r8, [r5, r4, lsl #3]
   1b1b0:	beq	1b1bc <__assert_fail@plt+0x981c>
   1b1b4:	mov	r0, r6
   1b1b8:	bl	1f018 <__assert_fail@plt+0xd678>
   1b1bc:	mov	r0, r8
   1b1c0:	bl	1d918 <__assert_fail@plt+0xbf78>
   1b1c4:	ldr	lr, [sp, #76]	; 0x4c
   1b1c8:	ldr	r3, [sp, #32]
   1b1cc:	ldr	ip, [sp, #72]	; 0x48
   1b1d0:	ldr	r4, [sp, #28]
   1b1d4:	mov	r2, r9
   1b1d8:	mov	r1, r8
   1b1dc:	str	r0, [fp, #4]
   1b1e0:	str	r3, [sp]
   1b1e4:	str	sl, [sp, #8]
   1b1e8:	str	r4, [sp, #4]
   1b1ec:	str	lr, [sp, #16]
   1b1f0:	str	ip, [sp, #12]
   1b1f4:	mvn	r3, #0
   1b1f8:	mov	r6, r0
   1b1fc:	bl	190bc <__assert_fail@plt+0x771c>
   1b200:	ldr	r3, [sp, #24]
   1b204:	mov	r0, r6
   1b208:	str	r3, [r7]
   1b20c:	add	sp, sp, #132	; 0x84
   1b210:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b214:	mov	r3, #8
   1b218:	sub	r2, r4, r2
   1b21c:	add	r1, sp, #80	; 0x50
   1b220:	str	r3, [sp]
   1b224:	add	r2, r2, #1
   1b228:	mvn	r3, #-2147483648	; 0x80000000
   1b22c:	bl	1db34 <__assert_fail@plt+0xc194>
   1b230:	mov	r5, r0
   1b234:	ldm	r8, {r0, r1}
   1b238:	str	r5, [r6]
   1b23c:	stm	r5, {r0, r1}
   1b240:	b	1b124 <__assert_fail@plt+0x9784>
   1b244:	bl	11964 <abort@plt>
   1b248:	andeq	r5, r4, r0, asr #3
   1b24c:	ldrdeq	r5, [r4], -r4
   1b250:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b254:	sub	sp, sp, #132	; 0x84
   1b258:	mov	r5, r1
   1b25c:	mov	r4, r0
   1b260:	mov	r9, r2
   1b264:	add	r0, sp, #80	; 0x50
   1b268:	mov	r2, #48	; 0x30
   1b26c:	mov	r1, #0
   1b270:	mov	sl, r3
   1b274:	bl	11814 <memset@plt>
   1b278:	cmp	r5, #10
   1b27c:	beq	1b438 <__assert_fail@plt+0x9a98>
   1b280:	add	lr, sp, #80	; 0x50
   1b284:	str	r5, [sp, #80]	; 0x50
   1b288:	ldm	lr!, {r0, r1, r2, r3}
   1b28c:	add	ip, sp, #32
   1b290:	ldr	r6, [pc, #420]	; 1b43c <__assert_fail@plt+0x9a9c>
   1b294:	stmia	ip!, {r0, r1, r2, r3}
   1b298:	ldm	lr!, {r0, r1, r2, r3}
   1b29c:	stmia	ip!, {r0, r1, r2, r3}
   1b2a0:	ldm	lr, {r0, r1, r2, r3}
   1b2a4:	stm	ip, {r0, r1, r2, r3}
   1b2a8:	bl	117d8 <__errno_location@plt>
   1b2ac:	cmn	r4, #-2147483647	; 0x80000001
   1b2b0:	ldr	r5, [r6]
   1b2b4:	mov	r7, r0
   1b2b8:	movne	r0, #0
   1b2bc:	moveq	r0, #1
   1b2c0:	ldr	r3, [r7]
   1b2c4:	orrs	r0, r0, r4, lsr #31
   1b2c8:	str	r3, [sp, #24]
   1b2cc:	bne	1b438 <__assert_fail@plt+0x9a98>
   1b2d0:	ldr	r2, [r6, #4]
   1b2d4:	cmp	r4, r2
   1b2d8:	blt	1b338 <__assert_fail@plt+0x9998>
   1b2dc:	add	r8, r6, #8
   1b2e0:	cmp	r5, r8
   1b2e4:	str	r2, [sp, #80]	; 0x50
   1b2e8:	beq	1b408 <__assert_fail@plt+0x9a68>
   1b2ec:	mov	r3, #8
   1b2f0:	sub	r2, r4, r2
   1b2f4:	mov	r0, r5
   1b2f8:	str	r3, [sp]
   1b2fc:	add	r2, r2, #1
   1b300:	add	r1, sp, #80	; 0x50
   1b304:	mvn	r3, #-2147483648	; 0x80000000
   1b308:	bl	1db34 <__assert_fail@plt+0xc194>
   1b30c:	mov	r5, r0
   1b310:	str	r0, [r6]
   1b314:	ldr	r0, [r6, #4]
   1b318:	ldr	r2, [sp, #80]	; 0x50
   1b31c:	mov	r1, #0
   1b320:	sub	r2, r2, r0
   1b324:	add	r0, r5, r0, lsl #3
   1b328:	lsl	r2, r2, #3
   1b32c:	bl	11814 <memset@plt>
   1b330:	ldr	r3, [sp, #80]	; 0x50
   1b334:	str	r3, [r6, #4]
   1b338:	add	fp, r5, r4, lsl #3
   1b33c:	ldr	r3, [sp, #32]
   1b340:	ldr	r1, [sp, #36]	; 0x24
   1b344:	ldr	r8, [r5, r4, lsl #3]
   1b348:	ldr	r6, [fp, #4]
   1b34c:	ldr	r2, [sp, #72]	; 0x48
   1b350:	ldr	ip, [sp, #76]	; 0x4c
   1b354:	orr	r1, r1, #1
   1b358:	str	r3, [sp]
   1b35c:	add	r3, sp, #40	; 0x28
   1b360:	str	r1, [sp, #28]
   1b364:	str	r1, [sp, #4]
   1b368:	str	r2, [sp, #12]
   1b36c:	str	r3, [sp, #8]
   1b370:	mov	r0, r6
   1b374:	mov	r1, r8
   1b378:	str	ip, [sp, #16]
   1b37c:	mov	r3, sl
   1b380:	mov	r2, r9
   1b384:	bl	190bc <__assert_fail@plt+0x771c>
   1b388:	cmp	r8, r0
   1b38c:	bhi	1b3f4 <__assert_fail@plt+0x9a54>
   1b390:	ldr	r3, [pc, #168]	; 1b440 <__assert_fail@plt+0x9aa0>
   1b394:	add	r8, r0, #1
   1b398:	cmp	r6, r3
   1b39c:	str	r8, [r5, r4, lsl #3]
   1b3a0:	beq	1b3ac <__assert_fail@plt+0x9a0c>
   1b3a4:	mov	r0, r6
   1b3a8:	bl	1f018 <__assert_fail@plt+0xd678>
   1b3ac:	mov	r0, r8
   1b3b0:	bl	1d918 <__assert_fail@plt+0xbf78>
   1b3b4:	add	lr, sp, #40	; 0x28
   1b3b8:	ldr	ip, [sp, #76]	; 0x4c
   1b3bc:	ldr	r4, [sp, #72]	; 0x48
   1b3c0:	ldr	r5, [sp, #28]
   1b3c4:	mov	r3, sl
   1b3c8:	mov	r2, r9
   1b3cc:	mov	r1, r8
   1b3d0:	str	r0, [fp, #4]
   1b3d4:	str	lr, [sp, #8]
   1b3d8:	ldr	lr, [sp, #32]
   1b3dc:	str	r5, [sp, #4]
   1b3e0:	str	ip, [sp, #16]
   1b3e4:	str	r4, [sp, #12]
   1b3e8:	str	lr, [sp]
   1b3ec:	mov	r6, r0
   1b3f0:	bl	190bc <__assert_fail@plt+0x771c>
   1b3f4:	ldr	r3, [sp, #24]
   1b3f8:	mov	r0, r6
   1b3fc:	str	r3, [r7]
   1b400:	add	sp, sp, #132	; 0x84
   1b404:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b408:	mov	r3, #8
   1b40c:	sub	r2, r4, r2
   1b410:	add	r1, sp, #80	; 0x50
   1b414:	str	r3, [sp]
   1b418:	add	r2, r2, #1
   1b41c:	mvn	r3, #-2147483648	; 0x80000000
   1b420:	bl	1db34 <__assert_fail@plt+0xc194>
   1b424:	mov	r5, r0
   1b428:	ldm	r8, {r0, r1}
   1b42c:	str	r5, [r6]
   1b430:	stm	r5, {r0, r1}
   1b434:	b	1b314 <__assert_fail@plt+0x9974>
   1b438:	bl	11964 <abort@plt>
   1b43c:	andeq	r5, r4, r0, asr #3
   1b440:	ldrdeq	r5, [r4], -r4
   1b444:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b448:	sub	sp, sp, #124	; 0x7c
   1b44c:	mov	r4, r0
   1b450:	mov	r9, r1
   1b454:	add	r0, sp, #72	; 0x48
   1b458:	mov	r2, #48	; 0x30
   1b45c:	mov	r1, #0
   1b460:	bl	11814 <memset@plt>
   1b464:	cmp	r4, #10
   1b468:	beq	1b5f4 <__assert_fail@plt+0x9c54>
   1b46c:	add	lr, sp, #72	; 0x48
   1b470:	str	r4, [sp, #72]	; 0x48
   1b474:	ldm	lr!, {r0, r1, r2, r3}
   1b478:	add	ip, sp, #24
   1b47c:	ldr	r5, [pc, #372]	; 1b5f8 <__assert_fail@plt+0x9c58>
   1b480:	stmia	ip!, {r0, r1, r2, r3}
   1b484:	ldm	lr!, {r0, r1, r2, r3}
   1b488:	stmia	ip!, {r0, r1, r2, r3}
   1b48c:	ldm	lr, {r0, r1, r2, r3}
   1b490:	stm	ip, {r0, r1, r2, r3}
   1b494:	bl	117d8 <__errno_location@plt>
   1b498:	ldr	r2, [r5, #4]
   1b49c:	ldr	r4, [r5]
   1b4a0:	cmp	r2, #0
   1b4a4:	mov	r7, r0
   1b4a8:	ldr	fp, [r0]
   1b4ac:	bgt	1b508 <__assert_fail@plt+0x9b68>
   1b4b0:	add	r6, r5, #8
   1b4b4:	cmp	r4, r6
   1b4b8:	str	r2, [sp, #72]	; 0x48
   1b4bc:	beq	1b5c4 <__assert_fail@plt+0x9c24>
   1b4c0:	mov	r3, #8
   1b4c4:	mov	r0, r4
   1b4c8:	str	r3, [sp]
   1b4cc:	rsb	r2, r2, #1
   1b4d0:	add	r1, sp, #72	; 0x48
   1b4d4:	mvn	r3, #-2147483648	; 0x80000000
   1b4d8:	bl	1db34 <__assert_fail@plt+0xc194>
   1b4dc:	mov	r4, r0
   1b4e0:	str	r0, [r5]
   1b4e4:	ldr	r0, [r5, #4]
   1b4e8:	ldr	r2, [sp, #72]	; 0x48
   1b4ec:	mov	r1, #0
   1b4f0:	sub	r2, r2, r0
   1b4f4:	add	r0, r4, r0, lsl #3
   1b4f8:	lsl	r2, r2, #3
   1b4fc:	bl	11814 <memset@plt>
   1b500:	ldr	r3, [sp, #72]	; 0x48
   1b504:	str	r3, [r5, #4]
   1b508:	ldr	r6, [sp, #28]
   1b50c:	ldr	r8, [r4]
   1b510:	ldr	r5, [r4, #4]
   1b514:	ldr	r2, [sp, #64]	; 0x40
   1b518:	ldr	r3, [sp, #24]
   1b51c:	ldr	ip, [sp, #68]	; 0x44
   1b520:	orr	r6, r6, #1
   1b524:	add	sl, sp, #32
   1b528:	str	r2, [sp, #12]
   1b52c:	str	r3, [sp]
   1b530:	str	r6, [sp, #4]
   1b534:	mov	r1, r8
   1b538:	mov	r0, r5
   1b53c:	str	ip, [sp, #16]
   1b540:	str	sl, [sp, #8]
   1b544:	mvn	r3, #0
   1b548:	mov	r2, r9
   1b54c:	bl	190bc <__assert_fail@plt+0x771c>
   1b550:	cmp	r8, r0
   1b554:	bhi	1b5b4 <__assert_fail@plt+0x9c14>
   1b558:	ldr	r3, [pc, #156]	; 1b5fc <__assert_fail@plt+0x9c5c>
   1b55c:	add	r8, r0, #1
   1b560:	cmp	r5, r3
   1b564:	str	r8, [r4]
   1b568:	beq	1b574 <__assert_fail@plt+0x9bd4>
   1b56c:	mov	r0, r5
   1b570:	bl	1f018 <__assert_fail@plt+0xd678>
   1b574:	mov	r0, r8
   1b578:	bl	1d918 <__assert_fail@plt+0xbf78>
   1b57c:	ldr	lr, [sp, #68]	; 0x44
   1b580:	ldr	r3, [sp, #24]
   1b584:	ldr	ip, [sp, #64]	; 0x40
   1b588:	mov	r2, r9
   1b58c:	mov	r1, r8
   1b590:	str	r0, [r4, #4]
   1b594:	str	r3, [sp]
   1b598:	str	sl, [sp, #8]
   1b59c:	str	r6, [sp, #4]
   1b5a0:	str	lr, [sp, #16]
   1b5a4:	str	ip, [sp, #12]
   1b5a8:	mvn	r3, #0
   1b5ac:	mov	r5, r0
   1b5b0:	bl	190bc <__assert_fail@plt+0x771c>
   1b5b4:	mov	r0, r5
   1b5b8:	str	fp, [r7]
   1b5bc:	add	sp, sp, #124	; 0x7c
   1b5c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5c4:	mov	r3, #8
   1b5c8:	add	r1, sp, #72	; 0x48
   1b5cc:	str	r3, [sp]
   1b5d0:	rsb	r2, r2, #1
   1b5d4:	mvn	r3, #-2147483648	; 0x80000000
   1b5d8:	mov	r0, #0
   1b5dc:	bl	1db34 <__assert_fail@plt+0xc194>
   1b5e0:	mov	r4, r0
   1b5e4:	ldm	r6, {r0, r1}
   1b5e8:	str	r4, [r5]
   1b5ec:	stm	r4, {r0, r1}
   1b5f0:	b	1b4e4 <__assert_fail@plt+0x9b44>
   1b5f4:	bl	11964 <abort@plt>
   1b5f8:	andeq	r5, r4, r0, asr #3
   1b5fc:	ldrdeq	r5, [r4], -r4
   1b600:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b604:	sub	sp, sp, #132	; 0x84
   1b608:	mov	r4, r0
   1b60c:	mov	r9, r1
   1b610:	mov	sl, r2
   1b614:	add	r0, sp, #80	; 0x50
   1b618:	mov	r2, #48	; 0x30
   1b61c:	mov	r1, #0
   1b620:	bl	11814 <memset@plt>
   1b624:	cmp	r4, #10
   1b628:	beq	1b7bc <__assert_fail@plt+0x9e1c>
   1b62c:	add	lr, sp, #80	; 0x50
   1b630:	str	r4, [sp, #80]	; 0x50
   1b634:	ldm	lr!, {r0, r1, r2, r3}
   1b638:	add	ip, sp, #32
   1b63c:	ldr	r5, [pc, #380]	; 1b7c0 <__assert_fail@plt+0x9e20>
   1b640:	stmia	ip!, {r0, r1, r2, r3}
   1b644:	ldm	lr!, {r0, r1, r2, r3}
   1b648:	stmia	ip!, {r0, r1, r2, r3}
   1b64c:	ldm	lr, {r0, r1, r2, r3}
   1b650:	stm	ip, {r0, r1, r2, r3}
   1b654:	bl	117d8 <__errno_location@plt>
   1b658:	ldr	r2, [r5, #4]
   1b65c:	ldr	r4, [r5]
   1b660:	cmp	r2, #0
   1b664:	ldr	r3, [r0]
   1b668:	mov	r7, r0
   1b66c:	str	r3, [sp, #28]
   1b670:	bgt	1b6cc <__assert_fail@plt+0x9d2c>
   1b674:	add	r6, r5, #8
   1b678:	cmp	r4, r6
   1b67c:	str	r2, [sp, #80]	; 0x50
   1b680:	beq	1b78c <__assert_fail@plt+0x9dec>
   1b684:	mov	r3, #8
   1b688:	mov	r0, r4
   1b68c:	str	r3, [sp]
   1b690:	rsb	r2, r2, #1
   1b694:	add	r1, sp, #80	; 0x50
   1b698:	mvn	r3, #-2147483648	; 0x80000000
   1b69c:	bl	1db34 <__assert_fail@plt+0xc194>
   1b6a0:	mov	r4, r0
   1b6a4:	str	r0, [r5]
   1b6a8:	ldr	r0, [r5, #4]
   1b6ac:	ldr	r2, [sp, #80]	; 0x50
   1b6b0:	mov	r1, #0
   1b6b4:	sub	r2, r2, r0
   1b6b8:	add	r0, r4, r0, lsl #3
   1b6bc:	lsl	r2, r2, #3
   1b6c0:	bl	11814 <memset@plt>
   1b6c4:	ldr	r3, [sp, #80]	; 0x50
   1b6c8:	str	r3, [r5, #4]
   1b6cc:	ldr	r6, [sp, #36]	; 0x24
   1b6d0:	ldr	r8, [r4]
   1b6d4:	ldr	r5, [r4, #4]
   1b6d8:	ldr	r2, [sp, #72]	; 0x48
   1b6dc:	ldr	r3, [sp, #32]
   1b6e0:	ldr	ip, [sp, #76]	; 0x4c
   1b6e4:	orr	r6, r6, #1
   1b6e8:	add	fp, sp, #40	; 0x28
   1b6ec:	str	r2, [sp, #12]
   1b6f0:	str	r3, [sp]
   1b6f4:	str	r6, [sp, #4]
   1b6f8:	mov	r1, r8
   1b6fc:	mov	r0, r5
   1b700:	str	ip, [sp, #16]
   1b704:	str	fp, [sp, #8]
   1b708:	mov	r3, sl
   1b70c:	mov	r2, r9
   1b710:	bl	190bc <__assert_fail@plt+0x771c>
   1b714:	cmp	r8, r0
   1b718:	bhi	1b778 <__assert_fail@plt+0x9dd8>
   1b71c:	ldr	r3, [pc, #160]	; 1b7c4 <__assert_fail@plt+0x9e24>
   1b720:	add	r8, r0, #1
   1b724:	cmp	r5, r3
   1b728:	str	r8, [r4]
   1b72c:	beq	1b738 <__assert_fail@plt+0x9d98>
   1b730:	mov	r0, r5
   1b734:	bl	1f018 <__assert_fail@plt+0xd678>
   1b738:	mov	r0, r8
   1b73c:	bl	1d918 <__assert_fail@plt+0xbf78>
   1b740:	ldr	ip, [sp, #76]	; 0x4c
   1b744:	ldr	lr, [sp, #32]
   1b748:	mov	r3, sl
   1b74c:	mov	r2, r9
   1b750:	mov	r1, r8
   1b754:	str	r0, [r4, #4]
   1b758:	ldr	r4, [sp, #72]	; 0x48
   1b75c:	str	fp, [sp, #8]
   1b760:	str	r6, [sp, #4]
   1b764:	str	ip, [sp, #16]
   1b768:	str	r4, [sp, #12]
   1b76c:	str	lr, [sp]
   1b770:	mov	r5, r0
   1b774:	bl	190bc <__assert_fail@plt+0x771c>
   1b778:	ldr	r3, [sp, #28]
   1b77c:	mov	r0, r5
   1b780:	str	r3, [r7]
   1b784:	add	sp, sp, #132	; 0x84
   1b788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b78c:	mov	r3, #8
   1b790:	add	r1, sp, #80	; 0x50
   1b794:	str	r3, [sp]
   1b798:	rsb	r2, r2, #1
   1b79c:	mvn	r3, #-2147483648	; 0x80000000
   1b7a0:	mov	r0, #0
   1b7a4:	bl	1db34 <__assert_fail@plt+0xc194>
   1b7a8:	mov	r4, r0
   1b7ac:	ldm	r6, {r0, r1}
   1b7b0:	str	r4, [r5]
   1b7b4:	stm	r4, {r0, r1}
   1b7b8:	b	1b6a8 <__assert_fail@plt+0x9d08>
   1b7bc:	bl	11964 <abort@plt>
   1b7c0:	andeq	r5, r4, r0, asr #3
   1b7c4:	ldrdeq	r5, [r4], -r4
   1b7c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b7cc:	mov	r4, r2
   1b7d0:	ldr	lr, [pc, #432]	; 1b988 <__assert_fail@plt+0x9fe8>
   1b7d4:	mov	sl, r0
   1b7d8:	mov	fp, r1
   1b7dc:	ldm	lr!, {r0, r1, r2, r3}
   1b7e0:	sub	sp, sp, #92	; 0x5c
   1b7e4:	add	ip, sp, #40	; 0x28
   1b7e8:	lsr	r7, r4, #5
   1b7ec:	stmia	ip!, {r0, r1, r2, r3}
   1b7f0:	add	r6, sp, #48	; 0x30
   1b7f4:	ldm	lr!, {r0, r1, r2, r3}
   1b7f8:	and	r4, r4, #31
   1b7fc:	ldr	r5, [pc, #392]	; 1b98c <__assert_fail@plt+0x9fec>
   1b800:	stmia	ip!, {r0, r1, r2, r3}
   1b804:	ldm	lr, {r0, r1, r2, r3}
   1b808:	stm	ip, {r0, r1, r2, r3}
   1b80c:	ldr	r2, [r6, r7, lsl #2]
   1b810:	lsr	r3, r2, r4
   1b814:	eor	r3, r3, #1
   1b818:	and	r3, r3, #1
   1b81c:	eor	r4, r2, r3, lsl r4
   1b820:	str	r4, [r6, r7, lsl #2]
   1b824:	bl	117d8 <__errno_location@plt>
   1b828:	ldr	r2, [r5, #4]
   1b82c:	ldr	r4, [r5]
   1b830:	cmp	r2, #0
   1b834:	ldr	r3, [r0]
   1b838:	mov	r8, r0
   1b83c:	str	r3, [sp, #28]
   1b840:	bgt	1b89c <__assert_fail@plt+0x9efc>
   1b844:	add	r7, r5, #8
   1b848:	cmp	r4, r7
   1b84c:	str	r2, [sp, #36]	; 0x24
   1b850:	beq	1b958 <__assert_fail@plt+0x9fb8>
   1b854:	mov	r3, #8
   1b858:	mov	r0, r4
   1b85c:	str	r3, [sp]
   1b860:	rsb	r2, r2, #1
   1b864:	mvn	r3, #-2147483648	; 0x80000000
   1b868:	add	r1, sp, #36	; 0x24
   1b86c:	bl	1db34 <__assert_fail@plt+0xc194>
   1b870:	mov	r4, r0
   1b874:	str	r0, [r5]
   1b878:	ldr	r0, [r5, #4]
   1b87c:	ldr	r2, [sp, #36]	; 0x24
   1b880:	mov	r1, #0
   1b884:	sub	r2, r2, r0
   1b888:	add	r0, r4, r0, lsl #3
   1b88c:	lsl	r2, r2, #3
   1b890:	bl	11814 <memset@plt>
   1b894:	ldr	r3, [sp, #36]	; 0x24
   1b898:	str	r3, [r5, #4]
   1b89c:	ldr	r7, [sp, #44]	; 0x2c
   1b8a0:	ldr	r9, [r4]
   1b8a4:	ldr	r5, [r4, #4]
   1b8a8:	ldr	r2, [sp, #80]	; 0x50
   1b8ac:	ldr	r3, [sp, #40]	; 0x28
   1b8b0:	ldr	ip, [sp, #84]	; 0x54
   1b8b4:	orr	r7, r7, #1
   1b8b8:	str	r2, [sp, #12]
   1b8bc:	str	r3, [sp]
   1b8c0:	str	r7, [sp, #4]
   1b8c4:	str	r6, [sp, #8]
   1b8c8:	mov	r1, r9
   1b8cc:	mov	r0, r5
   1b8d0:	str	ip, [sp, #16]
   1b8d4:	mov	r3, fp
   1b8d8:	mov	r2, sl
   1b8dc:	bl	190bc <__assert_fail@plt+0x771c>
   1b8e0:	cmp	r9, r0
   1b8e4:	bhi	1b944 <__assert_fail@plt+0x9fa4>
   1b8e8:	ldr	r3, [pc, #160]	; 1b990 <__assert_fail@plt+0x9ff0>
   1b8ec:	add	r9, r0, #1
   1b8f0:	cmp	r5, r3
   1b8f4:	str	r9, [r4]
   1b8f8:	beq	1b904 <__assert_fail@plt+0x9f64>
   1b8fc:	mov	r0, r5
   1b900:	bl	1f018 <__assert_fail@plt+0xd678>
   1b904:	mov	r0, r9
   1b908:	bl	1d918 <__assert_fail@plt+0xbf78>
   1b90c:	ldr	ip, [sp, #84]	; 0x54
   1b910:	ldr	lr, [sp, #40]	; 0x28
   1b914:	mov	r3, fp
   1b918:	mov	r2, sl
   1b91c:	mov	r1, r9
   1b920:	str	r0, [r4, #4]
   1b924:	ldr	r4, [sp, #80]	; 0x50
   1b928:	str	r6, [sp, #8]
   1b92c:	str	r7, [sp, #4]
   1b930:	str	ip, [sp, #16]
   1b934:	str	r4, [sp, #12]
   1b938:	str	lr, [sp]
   1b93c:	mov	r5, r0
   1b940:	bl	190bc <__assert_fail@plt+0x771c>
   1b944:	ldr	r3, [sp, #28]
   1b948:	mov	r0, r5
   1b94c:	str	r3, [r8]
   1b950:	add	sp, sp, #92	; 0x5c
   1b954:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b958:	mov	r3, #8
   1b95c:	str	r3, [sp]
   1b960:	add	r1, sp, #36	; 0x24
   1b964:	rsb	r2, r2, #1
   1b968:	mvn	r3, #-2147483648	; 0x80000000
   1b96c:	mov	r0, #0
   1b970:	bl	1db34 <__assert_fail@plt+0xc194>
   1b974:	mov	r4, r0
   1b978:	ldm	r7, {r0, r1}
   1b97c:	str	r4, [r5]
   1b980:	stm	r4, {r0, r1}
   1b984:	b	1b878 <__assert_fail@plt+0x9ed8>
   1b988:	andeq	r5, r4, r4, lsr #5
   1b98c:	andeq	r5, r4, r0, asr #3
   1b990:	ldrdeq	r5, [r4], -r4
   1b994:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b998:	mov	r4, r1
   1b99c:	ldr	lr, [pc, #420]	; 1bb48 <__assert_fail@plt+0xa1a8>
   1b9a0:	mov	r6, r0
   1b9a4:	sub	sp, sp, #84	; 0x54
   1b9a8:	ldm	lr!, {r0, r1, r2, r3}
   1b9ac:	add	ip, sp, #32
   1b9b0:	lsr	r8, r4, #5
   1b9b4:	add	r5, sp, #40	; 0x28
   1b9b8:	stmia	ip!, {r0, r1, r2, r3}
   1b9bc:	and	r4, r4, #31
   1b9c0:	ldm	lr!, {r0, r1, r2, r3}
   1b9c4:	ldr	r7, [pc, #384]	; 1bb4c <__assert_fail@plt+0xa1ac>
   1b9c8:	stmia	ip!, {r0, r1, r2, r3}
   1b9cc:	ldm	lr, {r0, r1, r2, r3}
   1b9d0:	stm	ip, {r0, r1, r2, r3}
   1b9d4:	ldr	r2, [r5, r8, lsl #2]
   1b9d8:	lsr	r3, r2, r4
   1b9dc:	eor	r3, r3, #1
   1b9e0:	and	r3, r3, #1
   1b9e4:	eor	r4, r2, r3, lsl r4
   1b9e8:	str	r4, [r5, r8, lsl #2]
   1b9ec:	bl	117d8 <__errno_location@plt>
   1b9f0:	ldr	r2, [r7, #4]
   1b9f4:	ldr	r4, [r7]
   1b9f8:	cmp	r2, #0
   1b9fc:	mov	r9, r0
   1ba00:	ldr	sl, [r0]
   1ba04:	bgt	1ba60 <__assert_fail@plt+0xa0c0>
   1ba08:	add	r8, r7, #8
   1ba0c:	cmp	r4, r8
   1ba10:	str	r2, [sp, #28]
   1ba14:	beq	1bb18 <__assert_fail@plt+0xa178>
   1ba18:	mov	r3, #8
   1ba1c:	mov	r0, r4
   1ba20:	str	r3, [sp]
   1ba24:	rsb	r2, r2, #1
   1ba28:	mvn	r3, #-2147483648	; 0x80000000
   1ba2c:	add	r1, sp, #28
   1ba30:	bl	1db34 <__assert_fail@plt+0xc194>
   1ba34:	mov	r4, r0
   1ba38:	str	r0, [r7]
   1ba3c:	ldr	r0, [r7, #4]
   1ba40:	ldr	r2, [sp, #28]
   1ba44:	mov	r1, #0
   1ba48:	sub	r2, r2, r0
   1ba4c:	add	r0, r4, r0, lsl #3
   1ba50:	lsl	r2, r2, #3
   1ba54:	bl	11814 <memset@plt>
   1ba58:	ldr	r3, [sp, #28]
   1ba5c:	str	r3, [r7, #4]
   1ba60:	ldr	r8, [sp, #36]	; 0x24
   1ba64:	ldr	fp, [r4]
   1ba68:	ldr	r7, [r4, #4]
   1ba6c:	ldr	r2, [sp, #72]	; 0x48
   1ba70:	ldr	r3, [sp, #32]
   1ba74:	ldr	ip, [sp, #76]	; 0x4c
   1ba78:	orr	r8, r8, #1
   1ba7c:	str	r2, [sp, #12]
   1ba80:	str	r3, [sp]
   1ba84:	str	r8, [sp, #4]
   1ba88:	str	r5, [sp, #8]
   1ba8c:	mov	r1, fp
   1ba90:	mov	r0, r7
   1ba94:	str	ip, [sp, #16]
   1ba98:	mvn	r3, #0
   1ba9c:	mov	r2, r6
   1baa0:	bl	190bc <__assert_fail@plt+0x771c>
   1baa4:	cmp	fp, r0
   1baa8:	bhi	1bb08 <__assert_fail@plt+0xa168>
   1baac:	ldr	r3, [pc, #156]	; 1bb50 <__assert_fail@plt+0xa1b0>
   1bab0:	add	fp, r0, #1
   1bab4:	cmp	r7, r3
   1bab8:	str	fp, [r4]
   1babc:	beq	1bac8 <__assert_fail@plt+0xa128>
   1bac0:	mov	r0, r7
   1bac4:	bl	1f018 <__assert_fail@plt+0xd678>
   1bac8:	mov	r0, fp
   1bacc:	bl	1d918 <__assert_fail@plt+0xbf78>
   1bad0:	ldr	lr, [sp, #76]	; 0x4c
   1bad4:	ldr	r3, [sp, #32]
   1bad8:	ldr	ip, [sp, #72]	; 0x48
   1badc:	mov	r2, r6
   1bae0:	mov	r1, fp
   1bae4:	str	r0, [r4, #4]
   1bae8:	str	r3, [sp]
   1baec:	str	r5, [sp, #8]
   1baf0:	str	r8, [sp, #4]
   1baf4:	str	lr, [sp, #16]
   1baf8:	str	ip, [sp, #12]
   1bafc:	mvn	r3, #0
   1bb00:	mov	r7, r0
   1bb04:	bl	190bc <__assert_fail@plt+0x771c>
   1bb08:	mov	r0, r7
   1bb0c:	str	sl, [r9]
   1bb10:	add	sp, sp, #84	; 0x54
   1bb14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb18:	mov	r3, #8
   1bb1c:	str	r3, [sp]
   1bb20:	add	r1, sp, #28
   1bb24:	rsb	r2, r2, #1
   1bb28:	mvn	r3, #-2147483648	; 0x80000000
   1bb2c:	mov	r0, #0
   1bb30:	bl	1db34 <__assert_fail@plt+0xc194>
   1bb34:	mov	r4, r0
   1bb38:	ldm	r8, {r0, r1}
   1bb3c:	str	r4, [r7]
   1bb40:	stm	r4, {r0, r1}
   1bb44:	b	1ba3c <__assert_fail@plt+0xa09c>
   1bb48:	andeq	r5, r4, r4, lsr #5
   1bb4c:	andeq	r5, r4, r0, asr #3
   1bb50:	ldrdeq	r5, [r4], -r4
   1bb54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb58:	mov	r6, r0
   1bb5c:	ldr	lr, [pc, #404]	; 1bcf8 <__assert_fail@plt+0xa358>
   1bb60:	sub	sp, sp, #84	; 0x54
   1bb64:	add	ip, sp, #32
   1bb68:	ldm	lr!, {r0, r1, r2, r3}
   1bb6c:	ldr	r5, [pc, #392]	; 1bcfc <__assert_fail@plt+0xa35c>
   1bb70:	stmia	ip!, {r0, r1, r2, r3}
   1bb74:	ldm	lr!, {r0, r1, r2, r3}
   1bb78:	ldr	r4, [sp, #44]	; 0x2c
   1bb7c:	stmia	ip!, {r0, r1, r2, r3}
   1bb80:	ldm	lr, {r0, r1, r2, r3}
   1bb84:	mvn	lr, r4
   1bb88:	and	lr, lr, #67108864	; 0x4000000
   1bb8c:	eor	lr, lr, r4
   1bb90:	stm	ip, {r0, r1, r2, r3}
   1bb94:	str	lr, [sp, #44]	; 0x2c
   1bb98:	bl	117d8 <__errno_location@plt>
   1bb9c:	ldr	r2, [r5, #4]
   1bba0:	ldr	r4, [r5]
   1bba4:	cmp	r2, #0
   1bba8:	mov	r8, r0
   1bbac:	ldr	sl, [r0]
   1bbb0:	bgt	1bc0c <__assert_fail@plt+0xa26c>
   1bbb4:	add	r7, r5, #8
   1bbb8:	cmp	r4, r7
   1bbbc:	str	r2, [sp, #28]
   1bbc0:	beq	1bcc8 <__assert_fail@plt+0xa328>
   1bbc4:	mov	r3, #8
   1bbc8:	mov	r0, r4
   1bbcc:	str	r3, [sp]
   1bbd0:	rsb	r2, r2, #1
   1bbd4:	mvn	r3, #-2147483648	; 0x80000000
   1bbd8:	add	r1, sp, #28
   1bbdc:	bl	1db34 <__assert_fail@plt+0xc194>
   1bbe0:	mov	r4, r0
   1bbe4:	str	r0, [r5]
   1bbe8:	ldr	r0, [r5, #4]
   1bbec:	ldr	r2, [sp, #28]
   1bbf0:	mov	r1, #0
   1bbf4:	sub	r2, r2, r0
   1bbf8:	add	r0, r4, r0, lsl #3
   1bbfc:	lsl	r2, r2, #3
   1bc00:	bl	11814 <memset@plt>
   1bc04:	ldr	r3, [sp, #28]
   1bc08:	str	r3, [r5, #4]
   1bc0c:	ldr	r7, [sp, #36]	; 0x24
   1bc10:	ldr	r9, [r4]
   1bc14:	ldr	r5, [r4, #4]
   1bc18:	ldr	r2, [sp, #72]	; 0x48
   1bc1c:	ldr	r3, [sp, #32]
   1bc20:	ldr	ip, [sp, #76]	; 0x4c
   1bc24:	orr	r7, r7, #1
   1bc28:	add	fp, sp, #40	; 0x28
   1bc2c:	str	r2, [sp, #12]
   1bc30:	str	r3, [sp]
   1bc34:	str	r7, [sp, #4]
   1bc38:	mov	r1, r9
   1bc3c:	mov	r0, r5
   1bc40:	str	ip, [sp, #16]
   1bc44:	str	fp, [sp, #8]
   1bc48:	mvn	r3, #0
   1bc4c:	mov	r2, r6
   1bc50:	bl	190bc <__assert_fail@plt+0x771c>
   1bc54:	cmp	r9, r0
   1bc58:	bhi	1bcb8 <__assert_fail@plt+0xa318>
   1bc5c:	ldr	r3, [pc, #156]	; 1bd00 <__assert_fail@plt+0xa360>
   1bc60:	add	r9, r0, #1
   1bc64:	cmp	r5, r3
   1bc68:	str	r9, [r4]
   1bc6c:	beq	1bc78 <__assert_fail@plt+0xa2d8>
   1bc70:	mov	r0, r5
   1bc74:	bl	1f018 <__assert_fail@plt+0xd678>
   1bc78:	mov	r0, r9
   1bc7c:	bl	1d918 <__assert_fail@plt+0xbf78>
   1bc80:	ldr	lr, [sp, #76]	; 0x4c
   1bc84:	ldr	r3, [sp, #32]
   1bc88:	ldr	ip, [sp, #72]	; 0x48
   1bc8c:	mov	r2, r6
   1bc90:	mov	r1, r9
   1bc94:	str	r0, [r4, #4]
   1bc98:	str	r3, [sp]
   1bc9c:	str	fp, [sp, #8]
   1bca0:	str	r7, [sp, #4]
   1bca4:	str	lr, [sp, #16]
   1bca8:	str	ip, [sp, #12]
   1bcac:	mvn	r3, #0
   1bcb0:	mov	r5, r0
   1bcb4:	bl	190bc <__assert_fail@plt+0x771c>
   1bcb8:	mov	r0, r5
   1bcbc:	str	sl, [r8]
   1bcc0:	add	sp, sp, #84	; 0x54
   1bcc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bcc8:	mov	r3, #8
   1bccc:	str	r3, [sp]
   1bcd0:	add	r1, sp, #28
   1bcd4:	rsb	r2, r2, #1
   1bcd8:	mvn	r3, #-2147483648	; 0x80000000
   1bcdc:	mov	r0, #0
   1bce0:	bl	1db34 <__assert_fail@plt+0xc194>
   1bce4:	mov	r4, r0
   1bce8:	ldm	r7, {r0, r1}
   1bcec:	str	r4, [r5]
   1bcf0:	stm	r4, {r0, r1}
   1bcf4:	b	1bbe8 <__assert_fail@plt+0xa248>
   1bcf8:	andeq	r5, r4, r4, lsr #5
   1bcfc:	andeq	r5, r4, r0, asr #3
   1bd00:	ldrdeq	r5, [r4], -r4
   1bd04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd08:	mov	r9, r0
   1bd0c:	ldr	lr, [pc, #416]	; 1beb4 <__assert_fail@plt+0xa514>
   1bd10:	mov	sl, r1
   1bd14:	sub	sp, sp, #92	; 0x5c
   1bd18:	ldm	lr!, {r0, r1, r2, r3}
   1bd1c:	add	ip, sp, #40	; 0x28
   1bd20:	ldr	r5, [pc, #400]	; 1beb8 <__assert_fail@plt+0xa518>
   1bd24:	stmia	ip!, {r0, r1, r2, r3}
   1bd28:	ldm	lr!, {r0, r1, r2, r3}
   1bd2c:	ldr	r4, [sp, #52]	; 0x34
   1bd30:	stmia	ip!, {r0, r1, r2, r3}
   1bd34:	ldm	lr, {r0, r1, r2, r3}
   1bd38:	mvn	lr, r4
   1bd3c:	and	lr, lr, #67108864	; 0x4000000
   1bd40:	eor	lr, lr, r4
   1bd44:	stm	ip, {r0, r1, r2, r3}
   1bd48:	str	lr, [sp, #52]	; 0x34
   1bd4c:	bl	117d8 <__errno_location@plt>
   1bd50:	ldr	r2, [r5, #4]
   1bd54:	ldr	r4, [r5]
   1bd58:	cmp	r2, #0
   1bd5c:	ldr	r3, [r0]
   1bd60:	mov	r7, r0
   1bd64:	str	r3, [sp, #28]
   1bd68:	bgt	1bdc4 <__assert_fail@plt+0xa424>
   1bd6c:	add	r6, r5, #8
   1bd70:	cmp	r4, r6
   1bd74:	str	r2, [sp, #36]	; 0x24
   1bd78:	beq	1be84 <__assert_fail@plt+0xa4e4>
   1bd7c:	mov	r3, #8
   1bd80:	mov	r0, r4
   1bd84:	str	r3, [sp]
   1bd88:	rsb	r2, r2, #1
   1bd8c:	mvn	r3, #-2147483648	; 0x80000000
   1bd90:	add	r1, sp, #36	; 0x24
   1bd94:	bl	1db34 <__assert_fail@plt+0xc194>
   1bd98:	mov	r4, r0
   1bd9c:	str	r0, [r5]
   1bda0:	ldr	r0, [r5, #4]
   1bda4:	ldr	r2, [sp, #36]	; 0x24
   1bda8:	mov	r1, #0
   1bdac:	sub	r2, r2, r0
   1bdb0:	add	r0, r4, r0, lsl #3
   1bdb4:	lsl	r2, r2, #3
   1bdb8:	bl	11814 <memset@plt>
   1bdbc:	ldr	r3, [sp, #36]	; 0x24
   1bdc0:	str	r3, [r5, #4]
   1bdc4:	ldr	r6, [sp, #44]	; 0x2c
   1bdc8:	ldr	r8, [r4]
   1bdcc:	ldr	r5, [r4, #4]
   1bdd0:	ldr	r2, [sp, #80]	; 0x50
   1bdd4:	ldr	r3, [sp, #40]	; 0x28
   1bdd8:	ldr	ip, [sp, #84]	; 0x54
   1bddc:	orr	r6, r6, #1
   1bde0:	add	fp, sp, #48	; 0x30
   1bde4:	str	r2, [sp, #12]
   1bde8:	str	r3, [sp]
   1bdec:	str	r6, [sp, #4]
   1bdf0:	mov	r1, r8
   1bdf4:	mov	r0, r5
   1bdf8:	str	ip, [sp, #16]
   1bdfc:	str	fp, [sp, #8]
   1be00:	mov	r3, sl
   1be04:	mov	r2, r9
   1be08:	bl	190bc <__assert_fail@plt+0x771c>
   1be0c:	cmp	r8, r0
   1be10:	bhi	1be70 <__assert_fail@plt+0xa4d0>
   1be14:	ldr	r3, [pc, #160]	; 1bebc <__assert_fail@plt+0xa51c>
   1be18:	add	r8, r0, #1
   1be1c:	cmp	r5, r3
   1be20:	str	r8, [r4]
   1be24:	beq	1be30 <__assert_fail@plt+0xa490>
   1be28:	mov	r0, r5
   1be2c:	bl	1f018 <__assert_fail@plt+0xd678>
   1be30:	mov	r0, r8
   1be34:	bl	1d918 <__assert_fail@plt+0xbf78>
   1be38:	ldr	ip, [sp, #84]	; 0x54
   1be3c:	ldr	lr, [sp, #40]	; 0x28
   1be40:	mov	r3, sl
   1be44:	mov	r2, r9
   1be48:	mov	r1, r8
   1be4c:	str	r0, [r4, #4]
   1be50:	ldr	r4, [sp, #80]	; 0x50
   1be54:	str	fp, [sp, #8]
   1be58:	str	r6, [sp, #4]
   1be5c:	str	ip, [sp, #16]
   1be60:	str	r4, [sp, #12]
   1be64:	str	lr, [sp]
   1be68:	mov	r5, r0
   1be6c:	bl	190bc <__assert_fail@plt+0x771c>
   1be70:	ldr	r3, [sp, #28]
   1be74:	mov	r0, r5
   1be78:	str	r3, [r7]
   1be7c:	add	sp, sp, #92	; 0x5c
   1be80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be84:	mov	r3, #8
   1be88:	str	r3, [sp]
   1be8c:	add	r1, sp, #36	; 0x24
   1be90:	rsb	r2, r2, #1
   1be94:	mvn	r3, #-2147483648	; 0x80000000
   1be98:	mov	r0, #0
   1be9c:	bl	1db34 <__assert_fail@plt+0xc194>
   1bea0:	mov	r4, r0
   1bea4:	ldm	r6, {r0, r1}
   1bea8:	str	r4, [r5]
   1beac:	stm	r4, {r0, r1}
   1beb0:	b	1bda0 <__assert_fail@plt+0xa400>
   1beb4:	andeq	r5, r4, r4, lsr #5
   1beb8:	andeq	r5, r4, r0, asr #3
   1bebc:	ldrdeq	r5, [r4], -r4
   1bec0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bec4:	sub	sp, sp, #180	; 0xb4
   1bec8:	mov	r6, r1
   1becc:	mov	r4, r0
   1bed0:	mov	r9, r2
   1bed4:	add	r0, sp, #80	; 0x50
   1bed8:	mov	r2, #48	; 0x30
   1bedc:	mov	r1, #0
   1bee0:	bl	11814 <memset@plt>
   1bee4:	cmp	r6, #10
   1bee8:	beq	1c0c8 <__assert_fail@plt+0xa728>
   1beec:	add	r5, sp, #80	; 0x50
   1bef0:	str	r6, [sp, #80]	; 0x50
   1bef4:	ldm	r5!, {r0, r1, r2, r3}
   1bef8:	add	ip, sp, #128	; 0x80
   1befc:	mov	r7, ip
   1bf00:	add	lr, sp, #32
   1bf04:	stmia	ip!, {r0, r1, r2, r3}
   1bf08:	mov	r8, #67108864	; 0x4000000
   1bf0c:	ldm	r5!, {r0, r1, r2, r3}
   1bf10:	ldr	r6, [pc, #436]	; 1c0cc <__assert_fail@plt+0xa72c>
   1bf14:	stmia	ip!, {r0, r1, r2, r3}
   1bf18:	ldm	r5, {r0, r1, r2, r3}
   1bf1c:	stm	ip, {r0, r1, r2, r3}
   1bf20:	ldm	r7!, {r0, r1, r2, r3}
   1bf24:	stmia	lr!, {r0, r1, r2, r3}
   1bf28:	ldm	r7!, {r0, r1, r2, r3}
   1bf2c:	str	r8, [sp, #44]	; 0x2c
   1bf30:	stmia	lr!, {r0, r1, r2, r3}
   1bf34:	ldm	ip, {r0, r1, r2, r3}
   1bf38:	stm	lr, {r0, r1, r2, r3}
   1bf3c:	bl	117d8 <__errno_location@plt>
   1bf40:	cmn	r4, #-2147483647	; 0x80000001
   1bf44:	ldr	r5, [r6]
   1bf48:	mov	r7, r0
   1bf4c:	movne	r0, #0
   1bf50:	moveq	r0, #1
   1bf54:	ldr	r3, [r7]
   1bf58:	orrs	r0, r0, r4, lsr #31
   1bf5c:	str	r3, [sp, #24]
   1bf60:	bne	1c0c8 <__assert_fail@plt+0xa728>
   1bf64:	ldr	r2, [r6, #4]
   1bf68:	cmp	r4, r2
   1bf6c:	blt	1bfcc <__assert_fail@plt+0xa62c>
   1bf70:	add	r8, r6, #8
   1bf74:	cmp	r5, r8
   1bf78:	str	r2, [sp, #80]	; 0x50
   1bf7c:	beq	1c098 <__assert_fail@plt+0xa6f8>
   1bf80:	mov	r3, #8
   1bf84:	sub	r2, r4, r2
   1bf88:	mov	r0, r5
   1bf8c:	str	r3, [sp]
   1bf90:	add	r2, r2, #1
   1bf94:	add	r1, sp, #80	; 0x50
   1bf98:	mvn	r3, #-2147483648	; 0x80000000
   1bf9c:	bl	1db34 <__assert_fail@plt+0xc194>
   1bfa0:	mov	r5, r0
   1bfa4:	str	r0, [r6]
   1bfa8:	ldr	r0, [r6, #4]
   1bfac:	ldr	r2, [sp, #80]	; 0x50
   1bfb0:	mov	r1, #0
   1bfb4:	sub	r2, r2, r0
   1bfb8:	add	r0, r5, r0, lsl #3
   1bfbc:	lsl	r2, r2, #3
   1bfc0:	bl	11814 <memset@plt>
   1bfc4:	ldr	r3, [sp, #80]	; 0x50
   1bfc8:	str	r3, [r6, #4]
   1bfcc:	add	fp, r5, r4, lsl #3
   1bfd0:	ldr	r1, [sp, #36]	; 0x24
   1bfd4:	ldr	r8, [r5, r4, lsl #3]
   1bfd8:	ldr	r6, [fp, #4]
   1bfdc:	ldr	r2, [sp, #72]	; 0x48
   1bfe0:	ldr	r3, [sp, #32]
   1bfe4:	ldr	ip, [sp, #76]	; 0x4c
   1bfe8:	orr	r1, r1, #1
   1bfec:	add	sl, sp, #40	; 0x28
   1bff0:	str	r1, [sp, #28]
   1bff4:	str	r1, [sp, #4]
   1bff8:	str	r2, [sp, #12]
   1bffc:	str	r3, [sp]
   1c000:	mov	r0, r6
   1c004:	mov	r1, r8
   1c008:	str	ip, [sp, #16]
   1c00c:	str	sl, [sp, #8]
   1c010:	mvn	r3, #0
   1c014:	mov	r2, r9
   1c018:	bl	190bc <__assert_fail@plt+0x771c>
   1c01c:	cmp	r8, r0
   1c020:	bhi	1c084 <__assert_fail@plt+0xa6e4>
   1c024:	ldr	r3, [pc, #164]	; 1c0d0 <__assert_fail@plt+0xa730>
   1c028:	add	r8, r0, #1
   1c02c:	cmp	r6, r3
   1c030:	str	r8, [r5, r4, lsl #3]
   1c034:	beq	1c040 <__assert_fail@plt+0xa6a0>
   1c038:	mov	r0, r6
   1c03c:	bl	1f018 <__assert_fail@plt+0xd678>
   1c040:	mov	r0, r8
   1c044:	bl	1d918 <__assert_fail@plt+0xbf78>
   1c048:	ldr	lr, [sp, #76]	; 0x4c
   1c04c:	ldr	r3, [sp, #32]
   1c050:	ldr	ip, [sp, #72]	; 0x48
   1c054:	ldr	r4, [sp, #28]
   1c058:	mov	r2, r9
   1c05c:	mov	r1, r8
   1c060:	str	r0, [fp, #4]
   1c064:	str	r3, [sp]
   1c068:	str	sl, [sp, #8]
   1c06c:	str	r4, [sp, #4]
   1c070:	str	lr, [sp, #16]
   1c074:	str	ip, [sp, #12]
   1c078:	mvn	r3, #0
   1c07c:	mov	r6, r0
   1c080:	bl	190bc <__assert_fail@plt+0x771c>
   1c084:	ldr	r3, [sp, #24]
   1c088:	mov	r0, r6
   1c08c:	str	r3, [r7]
   1c090:	add	sp, sp, #180	; 0xb4
   1c094:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c098:	mov	r3, #8
   1c09c:	sub	r2, r4, r2
   1c0a0:	add	r1, sp, #80	; 0x50
   1c0a4:	str	r3, [sp]
   1c0a8:	add	r2, r2, #1
   1c0ac:	mvn	r3, #-2147483648	; 0x80000000
   1c0b0:	bl	1db34 <__assert_fail@plt+0xc194>
   1c0b4:	mov	r5, r0
   1c0b8:	ldm	r8, {r0, r1}
   1c0bc:	str	r5, [r6]
   1c0c0:	stm	r5, {r0, r1}
   1c0c4:	b	1bfa8 <__assert_fail@plt+0xa608>
   1c0c8:	bl	11964 <abort@plt>
   1c0cc:	andeq	r5, r4, r0, asr #3
   1c0d0:	ldrdeq	r5, [r4], -r4
   1c0d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0d8:	mov	r7, r1
   1c0dc:	ldr	lr, [pc, #492]	; 1c2d0 <__assert_fail@plt+0xa930>
   1c0e0:	mov	r8, r2
   1c0e4:	mov	r4, r0
   1c0e8:	mov	fp, r3
   1c0ec:	ldm	lr!, {r0, r1, r2, r3}
   1c0f0:	sub	sp, sp, #100	; 0x64
   1c0f4:	add	ip, sp, #48	; 0x30
   1c0f8:	mov	sl, #10
   1c0fc:	stmia	ip!, {r0, r1, r2, r3}
   1c100:	cmp	r8, #0
   1c104:	cmpne	r7, #0
   1c108:	ldm	lr!, {r0, r1, r2, r3}
   1c10c:	str	sl, [sp, #48]	; 0x30
   1c110:	stmia	ip!, {r0, r1, r2, r3}
   1c114:	ldm	lr, {r0, r1, r2, r3}
   1c118:	stm	ip, {r0, r1, r2, r3}
   1c11c:	beq	1c2cc <__assert_fail@plt+0xa92c>
   1c120:	str	r7, [sp, #88]	; 0x58
   1c124:	str	r8, [sp, #92]	; 0x5c
   1c128:	bl	117d8 <__errno_location@plt>
   1c12c:	ldr	r6, [pc, #416]	; 1c2d4 <__assert_fail@plt+0xa934>
   1c130:	cmn	r4, #-2147483647	; 0x80000001
   1c134:	ldr	r5, [r6]
   1c138:	mov	r9, r0
   1c13c:	movne	r0, #0
   1c140:	moveq	r0, #1
   1c144:	ldr	r3, [r9]
   1c148:	orrs	r0, r0, r4, lsr #31
   1c14c:	str	r3, [sp, #28]
   1c150:	bne	1c2cc <__assert_fail@plt+0xa92c>
   1c154:	ldr	r2, [r6, #4]
   1c158:	cmp	r4, r2
   1c15c:	movlt	r3, sl
   1c160:	blt	1c1cc <__assert_fail@plt+0xa82c>
   1c164:	add	r7, r6, #8
   1c168:	cmp	r5, r7
   1c16c:	str	r2, [sp, #44]	; 0x2c
   1c170:	beq	1c29c <__assert_fail@plt+0xa8fc>
   1c174:	mov	r3, #8
   1c178:	sub	r2, r4, r2
   1c17c:	mov	r0, r5
   1c180:	str	r3, [sp]
   1c184:	add	r2, r2, #1
   1c188:	mvn	r3, #-2147483648	; 0x80000000
   1c18c:	add	r1, sp, #44	; 0x2c
   1c190:	bl	1db34 <__assert_fail@plt+0xc194>
   1c194:	mov	r5, r0
   1c198:	str	r0, [r6]
   1c19c:	ldr	r0, [r6, #4]
   1c1a0:	ldr	r2, [sp, #44]	; 0x2c
   1c1a4:	mov	r1, #0
   1c1a8:	sub	r2, r2, r0
   1c1ac:	add	r0, r5, r0, lsl #3
   1c1b0:	lsl	r2, r2, #3
   1c1b4:	bl	11814 <memset@plt>
   1c1b8:	ldr	r3, [sp, #48]	; 0x30
   1c1bc:	ldr	r7, [sp, #88]	; 0x58
   1c1c0:	ldr	r8, [sp, #92]	; 0x5c
   1c1c4:	ldr	r2, [sp, #44]	; 0x2c
   1c1c8:	str	r2, [r6, #4]
   1c1cc:	add	r2, r5, r4, lsl #3
   1c1d0:	mov	r1, r2
   1c1d4:	str	r2, [sp, #32]
   1c1d8:	ldr	r2, [sp, #52]	; 0x34
   1c1dc:	ldr	r6, [r1, #4]
   1c1e0:	ldr	sl, [r5, r4, lsl #3]
   1c1e4:	orr	r2, r2, #1
   1c1e8:	str	r3, [sp]
   1c1ec:	add	r3, sp, #56	; 0x38
   1c1f0:	str	r2, [sp, #36]	; 0x24
   1c1f4:	str	r2, [sp, #4]
   1c1f8:	str	r3, [sp, #8]
   1c1fc:	mov	r0, r6
   1c200:	str	r8, [sp, #16]
   1c204:	str	r7, [sp, #12]
   1c208:	mov	r1, sl
   1c20c:	mvn	r3, #0
   1c210:	mov	r2, fp
   1c214:	bl	190bc <__assert_fail@plt+0x771c>
   1c218:	cmp	sl, r0
   1c21c:	bhi	1c288 <__assert_fail@plt+0xa8e8>
   1c220:	ldr	r3, [pc, #176]	; 1c2d8 <__assert_fail@plt+0xa938>
   1c224:	add	r7, r0, #1
   1c228:	cmp	r6, r3
   1c22c:	str	r7, [r5, r4, lsl #3]
   1c230:	beq	1c23c <__assert_fail@plt+0xa89c>
   1c234:	mov	r0, r6
   1c238:	bl	1f018 <__assert_fail@plt+0xd678>
   1c23c:	mov	r0, r7
   1c240:	bl	1d918 <__assert_fail@plt+0xbf78>
   1c244:	ldr	r3, [sp, #32]
   1c248:	ldr	lr, [sp, #92]	; 0x5c
   1c24c:	ldr	ip, [sp, #88]	; 0x58
   1c250:	ldr	r4, [sp, #36]	; 0x24
   1c254:	mov	r2, fp
   1c258:	mov	r1, r7
   1c25c:	str	r0, [r3, #4]
   1c260:	add	r3, sp, #56	; 0x38
   1c264:	str	r3, [sp, #8]
   1c268:	ldr	r3, [sp, #48]	; 0x30
   1c26c:	str	r4, [sp, #4]
   1c270:	str	r3, [sp]
   1c274:	str	lr, [sp, #16]
   1c278:	str	ip, [sp, #12]
   1c27c:	mvn	r3, #0
   1c280:	mov	r6, r0
   1c284:	bl	190bc <__assert_fail@plt+0x771c>
   1c288:	ldr	r3, [sp, #28]
   1c28c:	mov	r0, r6
   1c290:	str	r3, [r9]
   1c294:	add	sp, sp, #100	; 0x64
   1c298:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c29c:	mov	r3, #8
   1c2a0:	sub	r2, r4, r2
   1c2a4:	str	r3, [sp]
   1c2a8:	add	r1, sp, #44	; 0x2c
   1c2ac:	add	r2, r2, #1
   1c2b0:	mvn	r3, #-2147483648	; 0x80000000
   1c2b4:	bl	1db34 <__assert_fail@plt+0xc194>
   1c2b8:	mov	r5, r0
   1c2bc:	ldm	r7, {r0, r1}
   1c2c0:	str	r5, [r6]
   1c2c4:	stm	r5, {r0, r1}
   1c2c8:	b	1c19c <__assert_fail@plt+0xa7fc>
   1c2cc:	bl	11964 <abort@plt>
   1c2d0:	andeq	r5, r4, r4, lsr #5
   1c2d4:	andeq	r5, r4, r0, asr #3
   1c2d8:	ldrdeq	r5, [r4], -r4
   1c2dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c2e0:	mov	r7, r1
   1c2e4:	ldr	lr, [pc, #492]	; 1c4d8 <__assert_fail@plt+0xab38>
   1c2e8:	mov	r8, r2
   1c2ec:	mov	r4, r0
   1c2f0:	mov	fp, r3
   1c2f4:	ldm	lr!, {r0, r1, r2, r3}
   1c2f8:	sub	sp, sp, #100	; 0x64
   1c2fc:	add	ip, sp, #48	; 0x30
   1c300:	mov	sl, #10
   1c304:	stmia	ip!, {r0, r1, r2, r3}
   1c308:	cmp	r8, #0
   1c30c:	cmpne	r7, #0
   1c310:	ldm	lr!, {r0, r1, r2, r3}
   1c314:	str	sl, [sp, #48]	; 0x30
   1c318:	stmia	ip!, {r0, r1, r2, r3}
   1c31c:	ldm	lr, {r0, r1, r2, r3}
   1c320:	stm	ip, {r0, r1, r2, r3}
   1c324:	beq	1c4d4 <__assert_fail@plt+0xab34>
   1c328:	str	r7, [sp, #88]	; 0x58
   1c32c:	str	r8, [sp, #92]	; 0x5c
   1c330:	bl	117d8 <__errno_location@plt>
   1c334:	ldr	r6, [pc, #416]	; 1c4dc <__assert_fail@plt+0xab3c>
   1c338:	cmn	r4, #-2147483647	; 0x80000001
   1c33c:	ldr	r5, [r6]
   1c340:	mov	r9, r0
   1c344:	movne	r0, #0
   1c348:	moveq	r0, #1
   1c34c:	ldr	r3, [r9]
   1c350:	orrs	r0, r0, r4, lsr #31
   1c354:	str	r3, [sp, #28]
   1c358:	bne	1c4d4 <__assert_fail@plt+0xab34>
   1c35c:	ldr	r2, [r6, #4]
   1c360:	cmp	r4, r2
   1c364:	movlt	r3, sl
   1c368:	blt	1c3d4 <__assert_fail@plt+0xaa34>
   1c36c:	add	r7, r6, #8
   1c370:	cmp	r5, r7
   1c374:	str	r2, [sp, #44]	; 0x2c
   1c378:	beq	1c4a4 <__assert_fail@plt+0xab04>
   1c37c:	mov	r3, #8
   1c380:	sub	r2, r4, r2
   1c384:	mov	r0, r5
   1c388:	str	r3, [sp]
   1c38c:	add	r2, r2, #1
   1c390:	mvn	r3, #-2147483648	; 0x80000000
   1c394:	add	r1, sp, #44	; 0x2c
   1c398:	bl	1db34 <__assert_fail@plt+0xc194>
   1c39c:	mov	r5, r0
   1c3a0:	str	r0, [r6]
   1c3a4:	ldr	r0, [r6, #4]
   1c3a8:	ldr	r2, [sp, #44]	; 0x2c
   1c3ac:	mov	r1, #0
   1c3b0:	sub	r2, r2, r0
   1c3b4:	add	r0, r5, r0, lsl #3
   1c3b8:	lsl	r2, r2, #3
   1c3bc:	bl	11814 <memset@plt>
   1c3c0:	ldr	r3, [sp, #48]	; 0x30
   1c3c4:	ldr	r7, [sp, #88]	; 0x58
   1c3c8:	ldr	r8, [sp, #92]	; 0x5c
   1c3cc:	ldr	r2, [sp, #44]	; 0x2c
   1c3d0:	str	r2, [r6, #4]
   1c3d4:	add	r2, r5, r4, lsl #3
   1c3d8:	mov	r1, r2
   1c3dc:	str	r2, [sp, #32]
   1c3e0:	ldr	r2, [sp, #52]	; 0x34
   1c3e4:	ldr	r6, [r1, #4]
   1c3e8:	ldr	sl, [r5, r4, lsl #3]
   1c3ec:	orr	r2, r2, #1
   1c3f0:	str	r3, [sp]
   1c3f4:	add	r3, sp, #56	; 0x38
   1c3f8:	str	r2, [sp, #36]	; 0x24
   1c3fc:	str	r2, [sp, #4]
   1c400:	str	r3, [sp, #8]
   1c404:	mov	r0, r6
   1c408:	str	r8, [sp, #16]
   1c40c:	str	r7, [sp, #12]
   1c410:	mov	r1, sl
   1c414:	ldr	r3, [sp, #136]	; 0x88
   1c418:	mov	r2, fp
   1c41c:	bl	190bc <__assert_fail@plt+0x771c>
   1c420:	cmp	sl, r0
   1c424:	bhi	1c490 <__assert_fail@plt+0xaaf0>
   1c428:	ldr	r3, [pc, #176]	; 1c4e0 <__assert_fail@plt+0xab40>
   1c42c:	add	r7, r0, #1
   1c430:	cmp	r6, r3
   1c434:	str	r7, [r5, r4, lsl #3]
   1c438:	beq	1c444 <__assert_fail@plt+0xaaa4>
   1c43c:	mov	r0, r6
   1c440:	bl	1f018 <__assert_fail@plt+0xd678>
   1c444:	mov	r0, r7
   1c448:	bl	1d918 <__assert_fail@plt+0xbf78>
   1c44c:	ldr	r3, [sp, #32]
   1c450:	ldr	lr, [sp, #92]	; 0x5c
   1c454:	ldr	ip, [sp, #88]	; 0x58
   1c458:	ldr	r4, [sp, #36]	; 0x24
   1c45c:	mov	r2, fp
   1c460:	mov	r1, r7
   1c464:	str	r0, [r3, #4]
   1c468:	add	r3, sp, #56	; 0x38
   1c46c:	str	r3, [sp, #8]
   1c470:	ldr	r3, [sp, #48]	; 0x30
   1c474:	str	r4, [sp, #4]
   1c478:	str	r3, [sp]
   1c47c:	str	lr, [sp, #16]
   1c480:	str	ip, [sp, #12]
   1c484:	ldr	r3, [sp, #136]	; 0x88
   1c488:	mov	r6, r0
   1c48c:	bl	190bc <__assert_fail@plt+0x771c>
   1c490:	ldr	r3, [sp, #28]
   1c494:	mov	r0, r6
   1c498:	str	r3, [r9]
   1c49c:	add	sp, sp, #100	; 0x64
   1c4a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c4a4:	mov	r3, #8
   1c4a8:	sub	r2, r4, r2
   1c4ac:	str	r3, [sp]
   1c4b0:	add	r1, sp, #44	; 0x2c
   1c4b4:	add	r2, r2, #1
   1c4b8:	mvn	r3, #-2147483648	; 0x80000000
   1c4bc:	bl	1db34 <__assert_fail@plt+0xc194>
   1c4c0:	mov	r5, r0
   1c4c4:	ldm	r7, {r0, r1}
   1c4c8:	str	r5, [r6]
   1c4cc:	stm	r5, {r0, r1}
   1c4d0:	b	1c3a4 <__assert_fail@plt+0xaa04>
   1c4d4:	bl	11964 <abort@plt>
   1c4d8:	andeq	r5, r4, r4, lsr #5
   1c4dc:	andeq	r5, r4, r0, asr #3
   1c4e0:	ldrdeq	r5, [r4], -r4
   1c4e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c4e8:	mov	r5, r0
   1c4ec:	ldr	lr, [pc, #452]	; 1c6b8 <__assert_fail@plt+0xad18>
   1c4f0:	mov	r6, r1
   1c4f4:	mov	sl, r2
   1c4f8:	ldm	lr!, {r0, r1, r2, r3}
   1c4fc:	sub	sp, sp, #92	; 0x5c
   1c500:	add	ip, sp, #40	; 0x28
   1c504:	cmp	r6, #0
   1c508:	cmpne	r5, #0
   1c50c:	stmia	ip!, {r0, r1, r2, r3}
   1c510:	mov	r9, #10
   1c514:	ldm	lr!, {r0, r1, r2, r3}
   1c518:	moveq	fp, #1
   1c51c:	movne	fp, #0
   1c520:	str	r9, [sp, #40]	; 0x28
   1c524:	stmia	ip!, {r0, r1, r2, r3}
   1c528:	ldm	lr, {r0, r1, r2, r3}
   1c52c:	stm	ip, {r0, r1, r2, r3}
   1c530:	beq	1c6b4 <__assert_fail@plt+0xad14>
   1c534:	str	r5, [sp, #80]	; 0x50
   1c538:	str	r6, [sp, #84]	; 0x54
   1c53c:	bl	117d8 <__errno_location@plt>
   1c540:	ldr	r7, [pc, #372]	; 1c6bc <__assert_fail@plt+0xad1c>
   1c544:	ldr	r2, [r7, #4]
   1c548:	ldr	r4, [r7]
   1c54c:	cmp	r2, #0
   1c550:	ldr	r3, [r0]
   1c554:	mov	r8, r0
   1c558:	str	r3, [sp, #24]
   1c55c:	movgt	r3, r9
   1c560:	bgt	1c5c8 <__assert_fail@plt+0xac28>
   1c564:	add	r5, r7, #8
   1c568:	cmp	r4, r5
   1c56c:	str	r2, [sp, #36]	; 0x24
   1c570:	beq	1c684 <__assert_fail@plt+0xace4>
   1c574:	mov	r3, #8
   1c578:	mov	r0, r4
   1c57c:	str	r3, [sp]
   1c580:	rsb	r2, r2, #1
   1c584:	mvn	r3, #-2147483648	; 0x80000000
   1c588:	add	r1, sp, #36	; 0x24
   1c58c:	bl	1db34 <__assert_fail@plt+0xc194>
   1c590:	mov	r4, r0
   1c594:	str	r0, [r7]
   1c598:	ldr	r0, [r7, #4]
   1c59c:	ldr	r2, [sp, #36]	; 0x24
   1c5a0:	mov	r1, #0
   1c5a4:	sub	r2, r2, r0
   1c5a8:	add	r0, r4, r0, lsl #3
   1c5ac:	lsl	r2, r2, #3
   1c5b0:	bl	11814 <memset@plt>
   1c5b4:	ldr	r3, [sp, #40]	; 0x28
   1c5b8:	ldr	r5, [sp, #80]	; 0x50
   1c5bc:	ldr	r6, [sp, #84]	; 0x54
   1c5c0:	ldr	r2, [sp, #36]	; 0x24
   1c5c4:	str	r2, [r7, #4]
   1c5c8:	ldr	r2, [sp, #44]	; 0x2c
   1c5cc:	ldr	r9, [r4]
   1c5d0:	ldr	r7, [r4, #4]
   1c5d4:	orr	r2, r2, #1
   1c5d8:	add	fp, sp, #48	; 0x30
   1c5dc:	str	r2, [sp, #28]
   1c5e0:	str	r2, [sp, #4]
   1c5e4:	str	r3, [sp]
   1c5e8:	str	r6, [sp, #16]
   1c5ec:	str	r5, [sp, #12]
   1c5f0:	mov	r1, r9
   1c5f4:	mov	r0, r7
   1c5f8:	str	fp, [sp, #8]
   1c5fc:	mvn	r3, #0
   1c600:	mov	r2, sl
   1c604:	bl	190bc <__assert_fail@plt+0x771c>
   1c608:	cmp	r9, r0
   1c60c:	bhi	1c670 <__assert_fail@plt+0xacd0>
   1c610:	ldr	r3, [pc, #168]	; 1c6c0 <__assert_fail@plt+0xad20>
   1c614:	add	r5, r0, #1
   1c618:	cmp	r7, r3
   1c61c:	str	r5, [r4]
   1c620:	beq	1c62c <__assert_fail@plt+0xac8c>
   1c624:	mov	r0, r7
   1c628:	bl	1f018 <__assert_fail@plt+0xd678>
   1c62c:	mov	r0, r5
   1c630:	bl	1d918 <__assert_fail@plt+0xbf78>
   1c634:	ldr	lr, [sp, #84]	; 0x54
   1c638:	ldr	r3, [sp, #40]	; 0x28
   1c63c:	ldr	ip, [sp, #80]	; 0x50
   1c640:	mov	r2, sl
   1c644:	mov	r1, r5
   1c648:	str	r0, [r4, #4]
   1c64c:	ldr	r4, [sp, #28]
   1c650:	str	r3, [sp]
   1c654:	str	fp, [sp, #8]
   1c658:	str	r4, [sp, #4]
   1c65c:	str	lr, [sp, #16]
   1c660:	str	ip, [sp, #12]
   1c664:	mvn	r3, #0
   1c668:	mov	r7, r0
   1c66c:	bl	190bc <__assert_fail@plt+0x771c>
   1c670:	ldr	r3, [sp, #24]
   1c674:	mov	r0, r7
   1c678:	str	r3, [r8]
   1c67c:	add	sp, sp, #92	; 0x5c
   1c680:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c684:	mov	r3, #8
   1c688:	str	r3, [sp]
   1c68c:	add	r1, sp, #36	; 0x24
   1c690:	rsb	r2, r2, #1
   1c694:	mov	r0, fp
   1c698:	mvn	r3, #-2147483648	; 0x80000000
   1c69c:	bl	1db34 <__assert_fail@plt+0xc194>
   1c6a0:	mov	r4, r0
   1c6a4:	ldm	r5, {r0, r1}
   1c6a8:	str	r4, [r7]
   1c6ac:	stm	r4, {r0, r1}
   1c6b0:	b	1c598 <__assert_fail@plt+0xabf8>
   1c6b4:	bl	11964 <abort@plt>
   1c6b8:	andeq	r5, r4, r4, lsr #5
   1c6bc:	andeq	r5, r4, r0, asr #3
   1c6c0:	ldrdeq	r5, [r4], -r4
   1c6c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c6c8:	mov	r5, r0
   1c6cc:	ldr	lr, [pc, #464]	; 1c8a4 <__assert_fail@plt+0xaf04>
   1c6d0:	mov	r6, r1
   1c6d4:	mov	sl, r2
   1c6d8:	mov	fp, r3
   1c6dc:	ldm	lr!, {r0, r1, r2, r3}
   1c6e0:	sub	sp, sp, #92	; 0x5c
   1c6e4:	add	ip, sp, #40	; 0x28
   1c6e8:	cmp	r6, #0
   1c6ec:	cmpne	r5, #0
   1c6f0:	stmia	ip!, {r0, r1, r2, r3}
   1c6f4:	moveq	r4, #1
   1c6f8:	ldm	lr!, {r0, r1, r2, r3}
   1c6fc:	movne	r4, #0
   1c700:	mov	r9, #10
   1c704:	str	r4, [sp, #28]
   1c708:	stmia	ip!, {r0, r1, r2, r3}
   1c70c:	ldm	lr, {r0, r1, r2, r3}
   1c710:	str	r9, [sp, #40]	; 0x28
   1c714:	stm	ip, {r0, r1, r2, r3}
   1c718:	beq	1c8a0 <__assert_fail@plt+0xaf00>
   1c71c:	str	r5, [sp, #80]	; 0x50
   1c720:	str	r6, [sp, #84]	; 0x54
   1c724:	bl	117d8 <__errno_location@plt>
   1c728:	ldr	r7, [pc, #376]	; 1c8a8 <__assert_fail@plt+0xaf08>
   1c72c:	ldr	r2, [r7, #4]
   1c730:	ldr	r4, [r7]
   1c734:	cmp	r2, #0
   1c738:	ldr	r3, [r0]
   1c73c:	mov	r8, r0
   1c740:	str	r3, [sp, #24]
   1c744:	movgt	r3, r9
   1c748:	bgt	1c7b0 <__assert_fail@plt+0xae10>
   1c74c:	add	r5, r7, #8
   1c750:	cmp	r4, r5
   1c754:	str	r2, [sp, #36]	; 0x24
   1c758:	beq	1c870 <__assert_fail@plt+0xaed0>
   1c75c:	mov	r3, #8
   1c760:	mov	r0, r4
   1c764:	str	r3, [sp]
   1c768:	rsb	r2, r2, #1
   1c76c:	mvn	r3, #-2147483648	; 0x80000000
   1c770:	add	r1, sp, #36	; 0x24
   1c774:	bl	1db34 <__assert_fail@plt+0xc194>
   1c778:	mov	r4, r0
   1c77c:	str	r0, [r7]
   1c780:	ldr	r0, [r7, #4]
   1c784:	ldr	r2, [sp, #36]	; 0x24
   1c788:	mov	r1, #0
   1c78c:	sub	r2, r2, r0
   1c790:	add	r0, r4, r0, lsl #3
   1c794:	lsl	r2, r2, #3
   1c798:	bl	11814 <memset@plt>
   1c79c:	ldr	r3, [sp, #40]	; 0x28
   1c7a0:	ldr	r5, [sp, #80]	; 0x50
   1c7a4:	ldr	r6, [sp, #84]	; 0x54
   1c7a8:	ldr	r2, [sp, #36]	; 0x24
   1c7ac:	str	r2, [r7, #4]
   1c7b0:	ldr	r2, [sp, #44]	; 0x2c
   1c7b4:	ldr	r9, [r4]
   1c7b8:	ldr	r7, [r4, #4]
   1c7bc:	orr	r2, r2, #1
   1c7c0:	str	r3, [sp]
   1c7c4:	add	r3, sp, #48	; 0x30
   1c7c8:	str	r2, [sp, #28]
   1c7cc:	str	r2, [sp, #4]
   1c7d0:	str	r3, [sp, #8]
   1c7d4:	str	r6, [sp, #16]
   1c7d8:	str	r5, [sp, #12]
   1c7dc:	mov	r1, r9
   1c7e0:	mov	r0, r7
   1c7e4:	mov	r3, fp
   1c7e8:	mov	r2, sl
   1c7ec:	bl	190bc <__assert_fail@plt+0x771c>
   1c7f0:	cmp	r9, r0
   1c7f4:	bhi	1c85c <__assert_fail@plt+0xaebc>
   1c7f8:	ldr	r3, [pc, #172]	; 1c8ac <__assert_fail@plt+0xaf0c>
   1c7fc:	add	r5, r0, #1
   1c800:	cmp	r7, r3
   1c804:	str	r5, [r4]
   1c808:	beq	1c814 <__assert_fail@plt+0xae74>
   1c80c:	mov	r0, r7
   1c810:	bl	1f018 <__assert_fail@plt+0xd678>
   1c814:	mov	r0, r5
   1c818:	bl	1d918 <__assert_fail@plt+0xbf78>
   1c81c:	add	lr, sp, #48	; 0x30
   1c820:	ldr	ip, [sp, #84]	; 0x54
   1c824:	mov	r1, r5
   1c828:	ldr	r5, [sp, #28]
   1c82c:	mov	r3, fp
   1c830:	mov	r2, sl
   1c834:	str	r0, [r4, #4]
   1c838:	ldr	r4, [sp, #80]	; 0x50
   1c83c:	str	lr, [sp, #8]
   1c840:	ldr	lr, [sp, #40]	; 0x28
   1c844:	str	r5, [sp, #4]
   1c848:	str	ip, [sp, #16]
   1c84c:	str	r4, [sp, #12]
   1c850:	str	lr, [sp]
   1c854:	mov	r7, r0
   1c858:	bl	190bc <__assert_fail@plt+0x771c>
   1c85c:	ldr	r3, [sp, #24]
   1c860:	mov	r0, r7
   1c864:	str	r3, [r8]
   1c868:	add	sp, sp, #92	; 0x5c
   1c86c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c870:	mov	r3, #8
   1c874:	str	r3, [sp]
   1c878:	add	r1, sp, #36	; 0x24
   1c87c:	rsb	r2, r2, #1
   1c880:	ldr	r0, [sp, #28]
   1c884:	mvn	r3, #-2147483648	; 0x80000000
   1c888:	bl	1db34 <__assert_fail@plt+0xc194>
   1c88c:	mov	r4, r0
   1c890:	ldm	r5, {r0, r1}
   1c894:	str	r4, [r7]
   1c898:	stm	r4, {r0, r1}
   1c89c:	b	1c780 <__assert_fail@plt+0xade0>
   1c8a0:	bl	11964 <abort@plt>
   1c8a4:	andeq	r5, r4, r4, lsr #5
   1c8a8:	andeq	r5, r4, r0, asr #3
   1c8ac:	ldrdeq	r5, [r4], -r4
   1c8b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c8b4:	sub	sp, sp, #52	; 0x34
   1c8b8:	mov	r5, r0
   1c8bc:	mov	sl, r1
   1c8c0:	mov	fp, r2
   1c8c4:	bl	117d8 <__errno_location@plt>
   1c8c8:	ldr	r4, [pc, #404]	; 1ca64 <__assert_fail@plt+0xb0c4>
   1c8cc:	cmn	r5, #-2147483647	; 0x80000001
   1c8d0:	ldr	r6, [r4]
   1c8d4:	mov	r8, r0
   1c8d8:	movne	r0, #0
   1c8dc:	moveq	r0, #1
   1c8e0:	ldr	r3, [r8]
   1c8e4:	orrs	r0, r0, r5, lsr #31
   1c8e8:	str	r3, [sp, #28]
   1c8ec:	bne	1ca60 <__assert_fail@plt+0xb0c0>
   1c8f0:	ldr	r2, [r4, #4]
   1c8f4:	cmp	r5, r2
   1c8f8:	blt	1c958 <__assert_fail@plt+0xafb8>
   1c8fc:	add	r7, r4, #8
   1c900:	cmp	r6, r7
   1c904:	str	r2, [sp, #44]	; 0x2c
   1c908:	beq	1ca30 <__assert_fail@plt+0xb090>
   1c90c:	mov	r3, #8
   1c910:	sub	r2, r5, r2
   1c914:	mov	r0, r6
   1c918:	str	r3, [sp]
   1c91c:	add	r2, r2, #1
   1c920:	mvn	r3, #-2147483648	; 0x80000000
   1c924:	add	r1, sp, #44	; 0x2c
   1c928:	bl	1db34 <__assert_fail@plt+0xc194>
   1c92c:	mov	r6, r0
   1c930:	str	r0, [r4]
   1c934:	ldr	r0, [r4, #4]
   1c938:	ldr	r2, [sp, #44]	; 0x2c
   1c93c:	mov	r1, #0
   1c940:	sub	r2, r2, r0
   1c944:	add	r0, r6, r0, lsl #3
   1c948:	lsl	r2, r2, #3
   1c94c:	bl	11814 <memset@plt>
   1c950:	ldr	r3, [sp, #44]	; 0x2c
   1c954:	str	r3, [r4, #4]
   1c958:	ldr	r2, [r4, #56]	; 0x38
   1c95c:	add	r3, r6, r5, lsl #3
   1c960:	ldr	r1, [r4, #20]
   1c964:	ldr	r7, [r3, #4]
   1c968:	ldr	r9, [r6, r5, lsl #3]
   1c96c:	ldr	ip, [r4, #60]	; 0x3c
   1c970:	str	r3, [sp, #32]
   1c974:	ldr	r3, [r4, #16]
   1c978:	str	r2, [sp, #12]
   1c97c:	ldr	r2, [pc, #228]	; 1ca68 <__assert_fail@plt+0xb0c8>
   1c980:	orr	r1, r1, #1
   1c984:	str	r1, [sp, #36]	; 0x24
   1c988:	str	r1, [sp, #4]
   1c98c:	str	r2, [sp, #8]
   1c990:	str	r3, [sp]
   1c994:	mov	r0, r7
   1c998:	mov	r1, r9
   1c99c:	str	ip, [sp, #16]
   1c9a0:	mov	r3, fp
   1c9a4:	mov	r2, sl
   1c9a8:	bl	190bc <__assert_fail@plt+0x771c>
   1c9ac:	cmp	r9, r0
   1c9b0:	bhi	1ca1c <__assert_fail@plt+0xb07c>
   1c9b4:	ldr	r3, [pc, #176]	; 1ca6c <__assert_fail@plt+0xb0cc>
   1c9b8:	add	r9, r0, #1
   1c9bc:	cmp	r7, r3
   1c9c0:	str	r9, [r6, r5, lsl #3]
   1c9c4:	beq	1c9d0 <__assert_fail@plt+0xb030>
   1c9c8:	mov	r0, r7
   1c9cc:	bl	1f018 <__assert_fail@plt+0xd678>
   1c9d0:	mov	r0, r9
   1c9d4:	bl	1d918 <__assert_fail@plt+0xbf78>
   1c9d8:	ldr	ip, [sp, #32]
   1c9dc:	ldr	lr, [r4, #60]	; 0x3c
   1c9e0:	ldr	r5, [r4, #56]	; 0x38
   1c9e4:	mov	r3, fp
   1c9e8:	mov	r2, sl
   1c9ec:	mov	r1, r9
   1c9f0:	str	r0, [ip, #4]
   1c9f4:	ldr	ip, [r4, #16]
   1c9f8:	ldr	r4, [pc, #104]	; 1ca68 <__assert_fail@plt+0xb0c8>
   1c9fc:	str	lr, [sp, #16]
   1ca00:	str	r4, [sp, #8]
   1ca04:	ldr	r4, [sp, #36]	; 0x24
   1ca08:	str	r5, [sp, #12]
   1ca0c:	str	r4, [sp, #4]
   1ca10:	str	ip, [sp]
   1ca14:	mov	r7, r0
   1ca18:	bl	190bc <__assert_fail@plt+0x771c>
   1ca1c:	ldr	r3, [sp, #28]
   1ca20:	mov	r0, r7
   1ca24:	str	r3, [r8]
   1ca28:	add	sp, sp, #52	; 0x34
   1ca2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca30:	mov	r3, #8
   1ca34:	sub	r2, r5, r2
   1ca38:	str	r3, [sp]
   1ca3c:	add	r1, sp, #44	; 0x2c
   1ca40:	add	r2, r2, #1
   1ca44:	mvn	r3, #-2147483648	; 0x80000000
   1ca48:	bl	1db34 <__assert_fail@plt+0xc194>
   1ca4c:	mov	r6, r0
   1ca50:	ldm	r7, {r0, r1}
   1ca54:	str	r6, [r4]
   1ca58:	stm	r6, {r0, r1}
   1ca5c:	b	1c934 <__assert_fail@plt+0xaf94>
   1ca60:	bl	11964 <abort@plt>
   1ca64:	andeq	r5, r4, r0, asr #3
   1ca68:	ldrdeq	r5, [r4], -r8
   1ca6c:	ldrdeq	r5, [r4], -r4
   1ca70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca74:	sub	sp, sp, #44	; 0x2c
   1ca78:	mov	r9, r0
   1ca7c:	mov	sl, r1
   1ca80:	bl	117d8 <__errno_location@plt>
   1ca84:	ldr	r4, [pc, #360]	; 1cbf4 <__assert_fail@plt+0xb254>
   1ca88:	ldr	r2, [r4, #4]
   1ca8c:	ldr	r5, [r4]
   1ca90:	cmp	r2, #0
   1ca94:	ldr	r3, [r0]
   1ca98:	mov	r7, r0
   1ca9c:	str	r3, [sp, #24]
   1caa0:	bgt	1cafc <__assert_fail@plt+0xb15c>
   1caa4:	add	r6, r4, #8
   1caa8:	cmp	r5, r6
   1caac:	str	r2, [sp, #36]	; 0x24
   1cab0:	beq	1cbc4 <__assert_fail@plt+0xb224>
   1cab4:	mov	r3, #8
   1cab8:	mov	r0, r5
   1cabc:	str	r3, [sp]
   1cac0:	rsb	r2, r2, #1
   1cac4:	mvn	r3, #-2147483648	; 0x80000000
   1cac8:	add	r1, sp, #36	; 0x24
   1cacc:	bl	1db34 <__assert_fail@plt+0xc194>
   1cad0:	mov	r5, r0
   1cad4:	str	r0, [r4]
   1cad8:	ldr	r0, [r4, #4]
   1cadc:	ldr	r2, [sp, #36]	; 0x24
   1cae0:	mov	r1, #0
   1cae4:	sub	r2, r2, r0
   1cae8:	add	r0, r5, r0, lsl #3
   1caec:	lsl	r2, r2, #3
   1caf0:	bl	11814 <memset@plt>
   1caf4:	ldr	r3, [sp, #36]	; 0x24
   1caf8:	str	r3, [r4, #4]
   1cafc:	ldr	r1, [r4, #20]
   1cb00:	ldr	r8, [r5]
   1cb04:	ldr	r6, [r5, #4]
   1cb08:	ldr	r2, [r4, #56]	; 0x38
   1cb0c:	ldr	r3, [r4, #16]
   1cb10:	ldr	ip, [r4, #60]	; 0x3c
   1cb14:	ldr	fp, [pc, #220]	; 1cbf8 <__assert_fail@plt+0xb258>
   1cb18:	orr	r1, r1, #1
   1cb1c:	str	r1, [sp, #28]
   1cb20:	str	r1, [sp, #4]
   1cb24:	str	r2, [sp, #12]
   1cb28:	str	r3, [sp]
   1cb2c:	mov	r1, r8
   1cb30:	mov	r0, r6
   1cb34:	str	ip, [sp, #16]
   1cb38:	str	fp, [sp, #8]
   1cb3c:	mov	r3, sl
   1cb40:	mov	r2, r9
   1cb44:	bl	190bc <__assert_fail@plt+0x771c>
   1cb48:	cmp	r8, r0
   1cb4c:	bhi	1cbb0 <__assert_fail@plt+0xb210>
   1cb50:	ldr	r3, [pc, #164]	; 1cbfc <__assert_fail@plt+0xb25c>
   1cb54:	add	r8, r0, #1
   1cb58:	cmp	r6, r3
   1cb5c:	str	r8, [r5]
   1cb60:	beq	1cb6c <__assert_fail@plt+0xb1cc>
   1cb64:	mov	r0, r6
   1cb68:	bl	1f018 <__assert_fail@plt+0xd678>
   1cb6c:	mov	r0, r8
   1cb70:	bl	1d918 <__assert_fail@plt+0xbf78>
   1cb74:	ldr	lr, [r4, #60]	; 0x3c
   1cb78:	ldr	ip, [r4, #16]
   1cb7c:	mov	r3, sl
   1cb80:	mov	r2, r9
   1cb84:	mov	r1, r8
   1cb88:	str	r0, [r5, #4]
   1cb8c:	ldr	r5, [r4, #56]	; 0x38
   1cb90:	ldr	r4, [sp, #28]
   1cb94:	str	fp, [sp, #8]
   1cb98:	str	r4, [sp, #4]
   1cb9c:	str	lr, [sp, #16]
   1cba0:	str	r5, [sp, #12]
   1cba4:	str	ip, [sp]
   1cba8:	mov	r6, r0
   1cbac:	bl	190bc <__assert_fail@plt+0x771c>
   1cbb0:	ldr	r3, [sp, #24]
   1cbb4:	mov	r0, r6
   1cbb8:	str	r3, [r7]
   1cbbc:	add	sp, sp, #44	; 0x2c
   1cbc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cbc4:	mov	r3, #8
   1cbc8:	str	r3, [sp]
   1cbcc:	add	r1, sp, #36	; 0x24
   1cbd0:	rsb	r2, r2, #1
   1cbd4:	mvn	r3, #-2147483648	; 0x80000000
   1cbd8:	mov	r0, #0
   1cbdc:	bl	1db34 <__assert_fail@plt+0xc194>
   1cbe0:	mov	r5, r0
   1cbe4:	ldm	r6, {r0, r1}
   1cbe8:	str	r5, [r4]
   1cbec:	stm	r5, {r0, r1}
   1cbf0:	b	1cad8 <__assert_fail@plt+0xb138>
   1cbf4:	andeq	r5, r4, r0, asr #3
   1cbf8:	ldrdeq	r5, [r4], -r8
   1cbfc:	ldrdeq	r5, [r4], -r4
   1cc00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc04:	sub	sp, sp, #44	; 0x2c
   1cc08:	mov	r5, r0
   1cc0c:	mov	sl, r1
   1cc10:	bl	117d8 <__errno_location@plt>
   1cc14:	ldr	r4, [pc, #396]	; 1cda8 <__assert_fail@plt+0xb408>
   1cc18:	cmn	r5, #-2147483647	; 0x80000001
   1cc1c:	ldr	r6, [r4]
   1cc20:	mov	r8, r0
   1cc24:	movne	r0, #0
   1cc28:	moveq	r0, #1
   1cc2c:	ldr	r3, [r8]
   1cc30:	orrs	r0, r0, r5, lsr #31
   1cc34:	str	r3, [sp, #24]
   1cc38:	bne	1cda4 <__assert_fail@plt+0xb404>
   1cc3c:	ldr	r2, [r4, #4]
   1cc40:	cmp	r5, r2
   1cc44:	blt	1cca4 <__assert_fail@plt+0xb304>
   1cc48:	add	r7, r4, #8
   1cc4c:	cmp	r6, r7
   1cc50:	str	r2, [sp, #36]	; 0x24
   1cc54:	beq	1cd74 <__assert_fail@plt+0xb3d4>
   1cc58:	mov	r3, #8
   1cc5c:	sub	r2, r5, r2
   1cc60:	mov	r0, r6
   1cc64:	str	r3, [sp]
   1cc68:	add	r2, r2, #1
   1cc6c:	mvn	r3, #-2147483648	; 0x80000000
   1cc70:	add	r1, sp, #36	; 0x24
   1cc74:	bl	1db34 <__assert_fail@plt+0xc194>
   1cc78:	mov	r6, r0
   1cc7c:	str	r0, [r4]
   1cc80:	ldr	r0, [r4, #4]
   1cc84:	ldr	r2, [sp, #36]	; 0x24
   1cc88:	mov	r1, #0
   1cc8c:	sub	r2, r2, r0
   1cc90:	add	r0, r6, r0, lsl #3
   1cc94:	lsl	r2, r2, #3
   1cc98:	bl	11814 <memset@plt>
   1cc9c:	ldr	r3, [sp, #36]	; 0x24
   1cca0:	str	r3, [r4, #4]
   1cca4:	ldr	r2, [r4, #56]	; 0x38
   1cca8:	add	fp, r6, r5, lsl #3
   1ccac:	ldr	r1, [r4, #20]
   1ccb0:	ldr	r9, [r6, r5, lsl #3]
   1ccb4:	ldr	r7, [fp, #4]
   1ccb8:	ldr	r3, [r4, #16]
   1ccbc:	ldr	ip, [r4, #60]	; 0x3c
   1ccc0:	str	r2, [sp, #12]
   1ccc4:	ldr	r2, [pc, #224]	; 1cdac <__assert_fail@plt+0xb40c>
   1ccc8:	orr	r1, r1, #1
   1cccc:	str	r1, [sp, #28]
   1ccd0:	str	r1, [sp, #4]
   1ccd4:	str	r2, [sp, #8]
   1ccd8:	str	r3, [sp]
   1ccdc:	mov	r0, r7
   1cce0:	mov	r1, r9
   1cce4:	str	ip, [sp, #16]
   1cce8:	mvn	r3, #0
   1ccec:	mov	r2, sl
   1ccf0:	bl	190bc <__assert_fail@plt+0x771c>
   1ccf4:	cmp	r9, r0
   1ccf8:	bhi	1cd60 <__assert_fail@plt+0xb3c0>
   1ccfc:	ldr	r3, [pc, #172]	; 1cdb0 <__assert_fail@plt+0xb410>
   1cd00:	add	r9, r0, #1
   1cd04:	cmp	r7, r3
   1cd08:	str	r9, [r6, r5, lsl #3]
   1cd0c:	beq	1cd18 <__assert_fail@plt+0xb378>
   1cd10:	mov	r0, r7
   1cd14:	bl	1f018 <__assert_fail@plt+0xd678>
   1cd18:	mov	r0, r9
   1cd1c:	bl	1d918 <__assert_fail@plt+0xbf78>
   1cd20:	ldr	ip, [r4, #60]	; 0x3c
   1cd24:	ldr	r3, [r4, #16]
   1cd28:	ldr	lr, [r4, #56]	; 0x38
   1cd2c:	ldr	r4, [pc, #120]	; 1cdac <__assert_fail@plt+0xb40c>
   1cd30:	mov	r2, sl
   1cd34:	mov	r1, r9
   1cd38:	str	r0, [fp, #4]
   1cd3c:	str	r4, [sp, #8]
   1cd40:	ldr	r4, [sp, #28]
   1cd44:	str	r3, [sp]
   1cd48:	str	r4, [sp, #4]
   1cd4c:	str	ip, [sp, #16]
   1cd50:	str	lr, [sp, #12]
   1cd54:	mvn	r3, #0
   1cd58:	mov	r7, r0
   1cd5c:	bl	190bc <__assert_fail@plt+0x771c>
   1cd60:	ldr	r3, [sp, #24]
   1cd64:	mov	r0, r7
   1cd68:	str	r3, [r8]
   1cd6c:	add	sp, sp, #44	; 0x2c
   1cd70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd74:	mov	r3, #8
   1cd78:	sub	r2, r5, r2
   1cd7c:	str	r3, [sp]
   1cd80:	add	r1, sp, #36	; 0x24
   1cd84:	add	r2, r2, #1
   1cd88:	mvn	r3, #-2147483648	; 0x80000000
   1cd8c:	bl	1db34 <__assert_fail@plt+0xc194>
   1cd90:	mov	r6, r0
   1cd94:	ldm	r7, {r0, r1}
   1cd98:	str	r6, [r4]
   1cd9c:	stm	r6, {r0, r1}
   1cda0:	b	1cc80 <__assert_fail@plt+0xb2e0>
   1cda4:	bl	11964 <abort@plt>
   1cda8:	andeq	r5, r4, r0, asr #3
   1cdac:	ldrdeq	r5, [r4], -r8
   1cdb0:	ldrdeq	r5, [r4], -r4
   1cdb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cdb8:	sub	sp, sp, #44	; 0x2c
   1cdbc:	mov	sl, r0
   1cdc0:	bl	117d8 <__errno_location@plt>
   1cdc4:	ldr	r4, [pc, #348]	; 1cf28 <__assert_fail@plt+0xb588>
   1cdc8:	ldr	r2, [r4, #4]
   1cdcc:	ldr	r5, [r4]
   1cdd0:	cmp	r2, #0
   1cdd4:	ldr	r3, [r0]
   1cdd8:	mov	r8, r0
   1cddc:	str	r3, [sp, #28]
   1cde0:	bgt	1ce3c <__assert_fail@plt+0xb49c>
   1cde4:	add	r6, r4, #8
   1cde8:	cmp	r5, r6
   1cdec:	str	r2, [sp, #36]	; 0x24
   1cdf0:	beq	1cef8 <__assert_fail@plt+0xb558>
   1cdf4:	mov	r3, #8
   1cdf8:	mov	r0, r5
   1cdfc:	str	r3, [sp]
   1ce00:	rsb	r2, r2, #1
   1ce04:	mvn	r3, #-2147483648	; 0x80000000
   1ce08:	add	r1, sp, #36	; 0x24
   1ce0c:	bl	1db34 <__assert_fail@plt+0xc194>
   1ce10:	mov	r5, r0
   1ce14:	str	r0, [r4]
   1ce18:	ldr	r0, [r4, #4]
   1ce1c:	ldr	r2, [sp, #36]	; 0x24
   1ce20:	mov	r1, #0
   1ce24:	sub	r2, r2, r0
   1ce28:	add	r0, r5, r0, lsl #3
   1ce2c:	lsl	r2, r2, #3
   1ce30:	bl	11814 <memset@plt>
   1ce34:	ldr	r3, [sp, #36]	; 0x24
   1ce38:	str	r3, [r4, #4]
   1ce3c:	ldr	r7, [r4, #20]
   1ce40:	ldr	r9, [r5]
   1ce44:	ldr	r6, [r5, #4]
   1ce48:	ldr	r2, [r4, #56]	; 0x38
   1ce4c:	ldr	r3, [r4, #16]
   1ce50:	ldr	ip, [r4, #60]	; 0x3c
   1ce54:	ldr	fp, [pc, #208]	; 1cf2c <__assert_fail@plt+0xb58c>
   1ce58:	orr	r7, r7, #1
   1ce5c:	str	r2, [sp, #12]
   1ce60:	str	r3, [sp]
   1ce64:	str	r7, [sp, #4]
   1ce68:	mov	r1, r9
   1ce6c:	mov	r0, r6
   1ce70:	str	ip, [sp, #16]
   1ce74:	str	fp, [sp, #8]
   1ce78:	mvn	r3, #0
   1ce7c:	mov	r2, sl
   1ce80:	bl	190bc <__assert_fail@plt+0x771c>
   1ce84:	cmp	r9, r0
   1ce88:	bhi	1cee4 <__assert_fail@plt+0xb544>
   1ce8c:	ldr	r3, [pc, #156]	; 1cf30 <__assert_fail@plt+0xb590>
   1ce90:	add	r9, r0, #1
   1ce94:	cmp	r6, r3
   1ce98:	str	r9, [r5]
   1ce9c:	beq	1cea8 <__assert_fail@plt+0xb508>
   1cea0:	mov	r0, r6
   1cea4:	bl	1f018 <__assert_fail@plt+0xd678>
   1cea8:	mov	r0, r9
   1ceac:	bl	1d918 <__assert_fail@plt+0xbf78>
   1ceb0:	ldr	ip, [r4, #60]	; 0x3c
   1ceb4:	ldr	r3, [r4, #16]
   1ceb8:	ldr	lr, [r4, #56]	; 0x38
   1cebc:	mov	r2, sl
   1cec0:	mov	r1, r9
   1cec4:	str	r0, [r5, #4]
   1cec8:	str	r3, [sp]
   1cecc:	stmib	sp, {r7, fp}
   1ced0:	str	ip, [sp, #16]
   1ced4:	str	lr, [sp, #12]
   1ced8:	mvn	r3, #0
   1cedc:	mov	r6, r0
   1cee0:	bl	190bc <__assert_fail@plt+0x771c>
   1cee4:	ldr	r3, [sp, #28]
   1cee8:	mov	r0, r6
   1ceec:	str	r3, [r8]
   1cef0:	add	sp, sp, #44	; 0x2c
   1cef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cef8:	mov	r3, #8
   1cefc:	str	r3, [sp]
   1cf00:	add	r1, sp, #36	; 0x24
   1cf04:	rsb	r2, r2, #1
   1cf08:	mvn	r3, #-2147483648	; 0x80000000
   1cf0c:	mov	r0, #0
   1cf10:	bl	1db34 <__assert_fail@plt+0xc194>
   1cf14:	mov	r5, r0
   1cf18:	ldm	r6, {r0, r1}
   1cf1c:	str	r5, [r4]
   1cf20:	stm	r5, {r0, r1}
   1cf24:	b	1ce18 <__assert_fail@plt+0xb478>
   1cf28:	andeq	r5, r4, r0, asr #3
   1cf2c:	ldrdeq	r5, [r4], -r8
   1cf30:	ldrdeq	r5, [r4], -r4
   1cf34:	push	{r4, r5, r6, lr}
   1cf38:	mov	r2, r1
   1cf3c:	mov	r4, r1
   1cf40:	mov	r1, #0
   1cf44:	mov	r5, r0
   1cf48:	bl	1185c <memchr@plt>
   1cf4c:	cmp	r0, #0
   1cf50:	subne	r0, r0, r5
   1cf54:	addne	r0, r0, #1
   1cf58:	moveq	r0, r4
   1cf5c:	pop	{r4, r5, r6, pc}
   1cf60:	cmp	r0, #2
   1cf64:	push	{r4, r5, r6, r7, r8, lr}
   1cf68:	mov	r4, r0
   1cf6c:	bhi	1cf94 <__assert_fail@plt+0xb5f4>
   1cf70:	bl	31c88 <__assert_fail@plt+0x202e8>
   1cf74:	mov	r7, r0
   1cf78:	bl	117d8 <__errno_location@plt>
   1cf7c:	mov	r5, r0
   1cf80:	mov	r0, r4
   1cf84:	ldr	r6, [r5]
   1cf88:	mov	r4, r7
   1cf8c:	bl	1197c <close@plt>
   1cf90:	str	r6, [r5]
   1cf94:	mov	r0, r4
   1cf98:	pop	{r4, r5, r6, r7, r8, pc}
   1cf9c:	push	{r4, r5, r6, lr}
   1cfa0:	sub	sp, sp, #32
   1cfa4:	cmp	r1, #0
   1cfa8:	mov	r4, r0
   1cfac:	ldr	r5, [sp, #48]	; 0x30
   1cfb0:	ldr	r6, [sp, #52]	; 0x34
   1cfb4:	beq	1d260 <__assert_fail@plt+0xb8c0>
   1cfb8:	str	r3, [sp]
   1cfbc:	mov	r3, r2
   1cfc0:	mov	r2, r1
   1cfc4:	ldr	r1, [pc, #684]	; 1d278 <__assert_fail@plt+0xb8d8>
   1cfc8:	bl	117c0 <fprintf@plt>
   1cfcc:	mov	r2, #5
   1cfd0:	ldr	r1, [pc, #676]	; 1d27c <__assert_fail@plt+0xb8dc>
   1cfd4:	mov	r0, #0
   1cfd8:	bl	11628 <dcgettext@plt>
   1cfdc:	ldr	r3, [pc, #668]	; 1d280 <__assert_fail@plt+0xb8e0>
   1cfe0:	ldr	r1, [pc, #668]	; 1d284 <__assert_fail@plt+0xb8e4>
   1cfe4:	mov	r2, r0
   1cfe8:	mov	r0, r4
   1cfec:	bl	117c0 <fprintf@plt>
   1cff0:	mov	r1, r4
   1cff4:	mov	r0, #10
   1cff8:	bl	118bc <fputc@plt>
   1cffc:	mov	r2, #5
   1d000:	ldr	r1, [pc, #640]	; 1d288 <__assert_fail@plt+0xb8e8>
   1d004:	mov	r0, #0
   1d008:	bl	11628 <dcgettext@plt>
   1d00c:	ldr	r2, [pc, #632]	; 1d28c <__assert_fail@plt+0xb8ec>
   1d010:	mov	r1, r0
   1d014:	mov	r0, r4
   1d018:	bl	117c0 <fprintf@plt>
   1d01c:	mov	r1, r4
   1d020:	mov	r0, #10
   1d024:	bl	118bc <fputc@plt>
   1d028:	cmp	r6, #9
   1d02c:	ldrls	pc, [pc, r6, lsl #2]
   1d030:	b	1d26c <__assert_fail@plt+0xb8cc>
   1d034:	andeq	sp, r1, r8, lsr #1
   1d038:	strheq	sp, [r1], -r0
   1d03c:	ldrdeq	sp, [r1], -r8
   1d040:	andeq	sp, r1, r0, lsl #2
   1d044:	andeq	sp, r1, r0, lsr r1
   1d048:	andeq	sp, r1, r8, ror #2
   1d04c:	muleq	r1, r8, r1
   1d050:	ldrdeq	sp, [r1], -r0
   1d054:	andeq	sp, r1, r4, lsl r2
   1d058:	andeq	sp, r1, ip, asr r0
   1d05c:	ldr	r1, [pc, #556]	; 1d290 <__assert_fail@plt+0xb8f0>
   1d060:	mov	r2, #5
   1d064:	mov	r0, #0
   1d068:	bl	11628 <dcgettext@plt>
   1d06c:	add	r1, r5, #24
   1d070:	ldm	r5, {r2, r3}
   1d074:	ldm	r1, {r1, ip, lr}
   1d078:	str	lr, [sp, #24]
   1d07c:	ldr	r6, [r5, #20]
   1d080:	str	ip, [sp, #20]
   1d084:	ldr	lr, [r5, #16]
   1d088:	str	r1, [sp, #16]
   1d08c:	ldr	r1, [r5, #8]
   1d090:	ldr	ip, [r5, #12]
   1d094:	str	r6, [sp, #12]
   1d098:	stm	sp, {r1, ip, lr}
   1d09c:	mov	r1, r0
   1d0a0:	mov	r0, r4
   1d0a4:	bl	117c0 <fprintf@plt>
   1d0a8:	add	sp, sp, #32
   1d0ac:	pop	{r4, r5, r6, pc}
   1d0b0:	mov	r2, #5
   1d0b4:	ldr	r1, [pc, #472]	; 1d294 <__assert_fail@plt+0xb8f4>
   1d0b8:	mov	r0, #0
   1d0bc:	bl	11628 <dcgettext@plt>
   1d0c0:	ldr	r2, [r5]
   1d0c4:	mov	r1, r0
   1d0c8:	mov	r0, r4
   1d0cc:	add	sp, sp, #32
   1d0d0:	pop	{r4, r5, r6, lr}
   1d0d4:	b	117c0 <fprintf@plt>
   1d0d8:	mov	r2, #5
   1d0dc:	ldr	r1, [pc, #436]	; 1d298 <__assert_fail@plt+0xb8f8>
   1d0e0:	mov	r0, #0
   1d0e4:	bl	11628 <dcgettext@plt>
   1d0e8:	ldm	r5, {r2, r3}
   1d0ec:	mov	r1, r0
   1d0f0:	mov	r0, r4
   1d0f4:	add	sp, sp, #32
   1d0f8:	pop	{r4, r5, r6, lr}
   1d0fc:	b	117c0 <fprintf@plt>
   1d100:	mov	r2, #5
   1d104:	ldr	r1, [pc, #400]	; 1d29c <__assert_fail@plt+0xb8fc>
   1d108:	mov	r0, #0
   1d10c:	bl	11628 <dcgettext@plt>
   1d110:	ldr	r1, [r5, #8]
   1d114:	ldm	r5, {r2, r3}
   1d118:	str	r1, [sp, #48]	; 0x30
   1d11c:	mov	r1, r0
   1d120:	mov	r0, r4
   1d124:	add	sp, sp, #32
   1d128:	pop	{r4, r5, r6, lr}
   1d12c:	b	117c0 <fprintf@plt>
   1d130:	mov	r2, #5
   1d134:	ldr	r1, [pc, #356]	; 1d2a0 <__assert_fail@plt+0xb900>
   1d138:	mov	r0, #0
   1d13c:	bl	11628 <dcgettext@plt>
   1d140:	ldr	r1, [r5, #8]
   1d144:	ldr	ip, [r5, #12]
   1d148:	ldm	r5, {r2, r3}
   1d14c:	str	r1, [sp, #48]	; 0x30
   1d150:	str	ip, [sp, #52]	; 0x34
   1d154:	mov	r1, r0
   1d158:	mov	r0, r4
   1d15c:	add	sp, sp, #32
   1d160:	pop	{r4, r5, r6, lr}
   1d164:	b	117c0 <fprintf@plt>
   1d168:	mov	r2, #5
   1d16c:	ldr	r1, [pc, #304]	; 1d2a4 <__assert_fail@plt+0xb904>
   1d170:	mov	r0, #0
   1d174:	bl	11628 <dcgettext@plt>
   1d178:	add	r1, r5, #8
   1d17c:	ldm	r5, {r2, r3}
   1d180:	ldm	r1, {r1, ip, lr}
   1d184:	stm	sp, {r1, ip, lr}
   1d188:	mov	r1, r0
   1d18c:	mov	r0, r4
   1d190:	bl	117c0 <fprintf@plt>
   1d194:	b	1d0a8 <__assert_fail@plt+0xb708>
   1d198:	mov	r2, #5
   1d19c:	ldr	r1, [pc, #260]	; 1d2a8 <__assert_fail@plt+0xb908>
   1d1a0:	mov	r0, #0
   1d1a4:	bl	11628 <dcgettext@plt>
   1d1a8:	add	r1, r5, #8
   1d1ac:	ldr	r6, [r5, #20]
   1d1b0:	ldm	r1, {r1, ip, lr}
   1d1b4:	ldm	r5, {r2, r3}
   1d1b8:	str	r6, [sp, #12]
   1d1bc:	stm	sp, {r1, ip, lr}
   1d1c0:	mov	r1, r0
   1d1c4:	mov	r0, r4
   1d1c8:	bl	117c0 <fprintf@plt>
   1d1cc:	b	1d0a8 <__assert_fail@plt+0xb708>
   1d1d0:	mov	r2, #5
   1d1d4:	ldr	r1, [pc, #208]	; 1d2ac <__assert_fail@plt+0xb90c>
   1d1d8:	mov	r0, #0
   1d1dc:	bl	11628 <dcgettext@plt>
   1d1e0:	ldr	r1, [r5, #24]
   1d1e4:	ldm	r5, {r2, r3}
   1d1e8:	ldr	r6, [r5, #20]
   1d1ec:	ldr	lr, [r5, #16]
   1d1f0:	str	r1, [sp, #16]
   1d1f4:	ldr	r1, [r5, #8]
   1d1f8:	ldr	ip, [r5, #12]
   1d1fc:	str	r6, [sp, #12]
   1d200:	stm	sp, {r1, ip, lr}
   1d204:	mov	r1, r0
   1d208:	mov	r0, r4
   1d20c:	bl	117c0 <fprintf@plt>
   1d210:	b	1d0a8 <__assert_fail@plt+0xb708>
   1d214:	mov	r2, #5
   1d218:	ldr	r1, [pc, #144]	; 1d2b0 <__assert_fail@plt+0xb910>
   1d21c:	mov	r0, #0
   1d220:	bl	11628 <dcgettext@plt>
   1d224:	ldr	ip, [r5, #28]
   1d228:	ldr	r1, [r5, #24]
   1d22c:	ldm	r5, {r2, r3}
   1d230:	ldr	r6, [r5, #20]
   1d234:	str	ip, [sp, #20]
   1d238:	ldr	lr, [r5, #16]
   1d23c:	str	r1, [sp, #16]
   1d240:	ldr	r1, [r5, #8]
   1d244:	ldr	ip, [r5, #12]
   1d248:	str	r6, [sp, #12]
   1d24c:	stm	sp, {r1, ip, lr}
   1d250:	mov	r1, r0
   1d254:	mov	r0, r4
   1d258:	bl	117c0 <fprintf@plt>
   1d25c:	b	1d0a8 <__assert_fail@plt+0xb708>
   1d260:	ldr	r1, [pc, #76]	; 1d2b4 <__assert_fail@plt+0xb914>
   1d264:	bl	117c0 <fprintf@plt>
   1d268:	b	1cfcc <__assert_fail@plt+0xb62c>
   1d26c:	mov	r2, #5
   1d270:	ldr	r1, [pc, #64]	; 1d2b8 <__assert_fail@plt+0xb918>
   1d274:	b	1d064 <__assert_fail@plt+0xb6c4>
   1d278:	andeq	r3, r3, r4, asr #20
   1d27c:	andeq	r3, r3, r8, asr sl
   1d280:	andeq	r0, r0, r6, ror #15
   1d284:	andeq	r3, r3, r8, lsl sp
   1d288:	andeq	r3, r3, ip, asr sl
   1d28c:	andeq	r3, r3, r8, lsl #22
   1d290:	andeq	r3, r3, r8, lsr ip
   1d294:	andeq	r3, r3, ip, lsr #22
   1d298:	andeq	r3, r3, ip, lsr fp
   1d29c:	andeq	r3, r3, r4, asr fp
   1d2a0:	andeq	r3, r3, r0, ror fp
   1d2a4:	muleq	r3, r0, fp
   1d2a8:			; <UNDEFINED> instruction: 0x00033bb4
   1d2ac:	ldrdeq	r3, [r3], -ip
   1d2b0:	andeq	r3, r3, r8, lsl #24
   1d2b4:	andeq	r3, r3, r0, asr sl
   1d2b8:	andeq	r3, r3, ip, ror #24
   1d2bc:	push	{r4, r5, lr}
   1d2c0:	sub	sp, sp, #12
   1d2c4:	ldr	r5, [sp, #24]
   1d2c8:	ldr	ip, [r5]
   1d2cc:	cmp	ip, #0
   1d2d0:	beq	1d2ec <__assert_fail@plt+0xb94c>
   1d2d4:	mov	lr, r5
   1d2d8:	mov	ip, #0
   1d2dc:	ldr	r4, [lr, #4]!
   1d2e0:	add	ip, ip, #1
   1d2e4:	cmp	r4, #0
   1d2e8:	bne	1d2dc <__assert_fail@plt+0xb93c>
   1d2ec:	stm	sp, {r5, ip}
   1d2f0:	bl	1cf9c <__assert_fail@plt+0xb5fc>
   1d2f4:	add	sp, sp, #12
   1d2f8:	pop	{r4, r5, pc}
   1d2fc:	push	{r4, r5, lr}
   1d300:	sub	sp, sp, #76	; 0x4c
   1d304:	mov	r5, r0
   1d308:	ldr	ip, [sp, #88]	; 0x58
   1d30c:	ldr	r0, [ip]
   1d310:	cmp	r0, #0
   1d314:	str	r0, [sp, #32]
   1d318:	beq	1d694 <__assert_fail@plt+0xbcf4>
   1d31c:	ldr	r0, [ip, #4]
   1d320:	cmp	r0, #0
   1d324:	str	r0, [sp, #36]	; 0x24
   1d328:	beq	1d69c <__assert_fail@plt+0xbcfc>
   1d32c:	ldr	r0, [ip, #8]
   1d330:	cmp	r0, #0
   1d334:	str	r0, [sp, #40]	; 0x28
   1d338:	beq	1d6a4 <__assert_fail@plt+0xbd04>
   1d33c:	ldr	r0, [ip, #12]
   1d340:	cmp	r0, #0
   1d344:	str	r0, [sp, #44]	; 0x2c
   1d348:	beq	1d6ac <__assert_fail@plt+0xbd0c>
   1d34c:	ldr	r0, [ip, #16]
   1d350:	cmp	r0, #0
   1d354:	str	r0, [sp, #48]	; 0x30
   1d358:	beq	1d6b4 <__assert_fail@plt+0xbd14>
   1d35c:	ldr	r0, [ip, #20]
   1d360:	cmp	r0, #0
   1d364:	str	r0, [sp, #52]	; 0x34
   1d368:	beq	1d6bc <__assert_fail@plt+0xbd1c>
   1d36c:	ldr	r0, [ip, #24]
   1d370:	cmp	r0, #0
   1d374:	str	r0, [sp, #56]	; 0x38
   1d378:	beq	1d6c4 <__assert_fail@plt+0xbd24>
   1d37c:	ldr	r0, [ip, #28]
   1d380:	cmp	r0, #0
   1d384:	str	r0, [sp, #60]	; 0x3c
   1d388:	beq	1d6cc <__assert_fail@plt+0xbd2c>
   1d38c:	ldr	r0, [ip, #32]
   1d390:	cmp	r0, #0
   1d394:	str	r0, [sp, #64]	; 0x40
   1d398:	beq	1d6d4 <__assert_fail@plt+0xbd34>
   1d39c:	ldr	r0, [ip, #36]	; 0x24
   1d3a0:	cmp	r0, #0
   1d3a4:	movne	r4, #10
   1d3a8:	moveq	r4, #9
   1d3ac:	cmp	r1, #0
   1d3b0:	beq	1d678 <__assert_fail@plt+0xbcd8>
   1d3b4:	str	r3, [sp]
   1d3b8:	mov	r0, r5
   1d3bc:	mov	r3, r2
   1d3c0:	mov	r2, r1
   1d3c4:	ldr	r1, [pc, #784]	; 1d6dc <__assert_fail@plt+0xbd3c>
   1d3c8:	bl	117c0 <fprintf@plt>
   1d3cc:	mov	r2, #5
   1d3d0:	ldr	r1, [pc, #776]	; 1d6e0 <__assert_fail@plt+0xbd40>
   1d3d4:	mov	r0, #0
   1d3d8:	bl	11628 <dcgettext@plt>
   1d3dc:	ldr	r3, [pc, #768]	; 1d6e4 <__assert_fail@plt+0xbd44>
   1d3e0:	ldr	r1, [pc, #768]	; 1d6e8 <__assert_fail@plt+0xbd48>
   1d3e4:	mov	r2, r0
   1d3e8:	mov	r0, r5
   1d3ec:	bl	117c0 <fprintf@plt>
   1d3f0:	mov	r1, r5
   1d3f4:	mov	r0, #10
   1d3f8:	bl	118bc <fputc@plt>
   1d3fc:	mov	r2, #5
   1d400:	ldr	r1, [pc, #740]	; 1d6ec <__assert_fail@plt+0xbd4c>
   1d404:	mov	r0, #0
   1d408:	bl	11628 <dcgettext@plt>
   1d40c:	ldr	r2, [pc, #732]	; 1d6f0 <__assert_fail@plt+0xbd50>
   1d410:	mov	r1, r0
   1d414:	mov	r0, r5
   1d418:	bl	117c0 <fprintf@plt>
   1d41c:	mov	r1, r5
   1d420:	mov	r0, #10
   1d424:	bl	118bc <fputc@plt>
   1d428:	cmp	r4, #9
   1d42c:	ldrls	pc, [pc, r4, lsl #2]
   1d430:	b	1d688 <__assert_fail@plt+0xbce8>
   1d434:	andeq	sp, r1, ip, lsr #9
   1d438:			; <UNDEFINED> instruction: 0x0001d4b4
   1d43c:	ldrdeq	sp, [r1], -ip
   1d440:	andeq	sp, r1, r8, lsl #10
   1d444:	andeq	sp, r1, ip, lsr r5
   1d448:	andeq	sp, r1, r0, ror r5
   1d44c:	andeq	sp, r1, r4, lsr #11
   1d450:	andeq	sp, r1, r0, ror #11
   1d454:	andeq	sp, r1, r8, lsr #12
   1d458:	andeq	sp, r1, ip, asr r4
   1d45c:	ldr	r1, [pc, #656]	; 1d6f4 <__assert_fail@plt+0xbd54>
   1d460:	mov	r2, #5
   1d464:	mov	r0, #0
   1d468:	bl	11628 <dcgettext@plt>
   1d46c:	add	r1, sp, #56	; 0x38
   1d470:	ldr	r4, [sp, #52]	; 0x34
   1d474:	ldm	r1, {r1, ip, lr}
   1d478:	ldr	r3, [sp, #36]	; 0x24
   1d47c:	ldr	r2, [sp, #32]
   1d480:	str	lr, [sp, #24]
   1d484:	str	ip, [sp, #20]
   1d488:	ldr	lr, [sp, #48]	; 0x30
   1d48c:	ldr	ip, [sp, #44]	; 0x2c
   1d490:	str	r1, [sp, #16]
   1d494:	ldr	r1, [sp, #40]	; 0x28
   1d498:	str	r4, [sp, #12]
   1d49c:	stm	sp, {r1, ip, lr}
   1d4a0:	mov	r1, r0
   1d4a4:	mov	r0, r5
   1d4a8:	bl	117c0 <fprintf@plt>
   1d4ac:	add	sp, sp, #76	; 0x4c
   1d4b0:	pop	{r4, r5, pc}
   1d4b4:	mov	r2, #5
   1d4b8:	ldr	r1, [pc, #568]	; 1d6f8 <__assert_fail@plt+0xbd58>
   1d4bc:	mov	r0, #0
   1d4c0:	bl	11628 <dcgettext@plt>
   1d4c4:	ldr	r2, [sp, #32]
   1d4c8:	mov	r1, r0
   1d4cc:	mov	r0, r5
   1d4d0:	add	sp, sp, #76	; 0x4c
   1d4d4:	pop	{r4, r5, lr}
   1d4d8:	b	117c0 <fprintf@plt>
   1d4dc:	mov	r2, #5
   1d4e0:	ldr	r1, [pc, #532]	; 1d6fc <__assert_fail@plt+0xbd5c>
   1d4e4:	mov	r0, #0
   1d4e8:	bl	11628 <dcgettext@plt>
   1d4ec:	ldr	r3, [sp, #36]	; 0x24
   1d4f0:	ldr	r2, [sp, #32]
   1d4f4:	mov	r1, r0
   1d4f8:	mov	r0, r5
   1d4fc:	add	sp, sp, #76	; 0x4c
   1d500:	pop	{r4, r5, lr}
   1d504:	b	117c0 <fprintf@plt>
   1d508:	mov	r2, #5
   1d50c:	ldr	r1, [pc, #492]	; 1d700 <__assert_fail@plt+0xbd60>
   1d510:	mov	r0, #0
   1d514:	bl	11628 <dcgettext@plt>
   1d518:	ldr	r1, [sp, #40]	; 0x28
   1d51c:	ldr	r3, [sp, #36]	; 0x24
   1d520:	str	r1, [sp, #88]	; 0x58
   1d524:	ldr	r2, [sp, #32]
   1d528:	mov	r1, r0
   1d52c:	mov	r0, r5
   1d530:	add	sp, sp, #76	; 0x4c
   1d534:	pop	{r4, r5, lr}
   1d538:	b	117c0 <fprintf@plt>
   1d53c:	mov	r2, #5
   1d540:	ldr	r1, [pc, #444]	; 1d704 <__assert_fail@plt+0xbd64>
   1d544:	mov	r0, #0
   1d548:	bl	11628 <dcgettext@plt>
   1d54c:	ldr	r1, [sp, #40]	; 0x28
   1d550:	ldr	ip, [sp, #44]	; 0x2c
   1d554:	ldr	r3, [sp, #36]	; 0x24
   1d558:	ldr	r2, [sp, #32]
   1d55c:	stm	sp, {r1, ip}
   1d560:	mov	r1, r0
   1d564:	mov	r0, r5
   1d568:	bl	117c0 <fprintf@plt>
   1d56c:	b	1d4ac <__assert_fail@plt+0xbb0c>
   1d570:	mov	r2, #5
   1d574:	ldr	r1, [pc, #396]	; 1d708 <__assert_fail@plt+0xbd68>
   1d578:	mov	r0, #0
   1d57c:	bl	11628 <dcgettext@plt>
   1d580:	add	r1, sp, #40	; 0x28
   1d584:	ldr	r3, [sp, #36]	; 0x24
   1d588:	ldm	r1, {r1, ip, lr}
   1d58c:	ldr	r2, [sp, #32]
   1d590:	stm	sp, {r1, ip, lr}
   1d594:	mov	r1, r0
   1d598:	mov	r0, r5
   1d59c:	bl	117c0 <fprintf@plt>
   1d5a0:	b	1d4ac <__assert_fail@plt+0xbb0c>
   1d5a4:	mov	r2, #5
   1d5a8:	ldr	r1, [pc, #348]	; 1d70c <__assert_fail@plt+0xbd6c>
   1d5ac:	mov	r0, #0
   1d5b0:	bl	11628 <dcgettext@plt>
   1d5b4:	add	r1, sp, #40	; 0x28
   1d5b8:	ldr	r4, [sp, #52]	; 0x34
   1d5bc:	ldm	r1, {r1, ip, lr}
   1d5c0:	ldr	r3, [sp, #36]	; 0x24
   1d5c4:	ldr	r2, [sp, #32]
   1d5c8:	stm	sp, {r1, ip, lr}
   1d5cc:	str	r4, [sp, #12]
   1d5d0:	mov	r1, r0
   1d5d4:	mov	r0, r5
   1d5d8:	bl	117c0 <fprintf@plt>
   1d5dc:	b	1d4ac <__assert_fail@plt+0xbb0c>
   1d5e0:	mov	r2, #5
   1d5e4:	ldr	r1, [pc, #292]	; 1d710 <__assert_fail@plt+0xbd70>
   1d5e8:	mov	r0, #0
   1d5ec:	bl	11628 <dcgettext@plt>
   1d5f0:	ldr	r1, [sp, #56]	; 0x38
   1d5f4:	ldr	lr, [sp, #48]	; 0x30
   1d5f8:	ldr	ip, [sp, #44]	; 0x2c
   1d5fc:	str	r1, [sp, #16]
   1d600:	ldr	r1, [sp, #40]	; 0x28
   1d604:	ldr	r4, [sp, #52]	; 0x34
   1d608:	ldr	r3, [sp, #36]	; 0x24
   1d60c:	stm	sp, {r1, ip, lr}
   1d610:	ldr	r2, [sp, #32]
   1d614:	str	r4, [sp, #12]
   1d618:	mov	r1, r0
   1d61c:	mov	r0, r5
   1d620:	bl	117c0 <fprintf@plt>
   1d624:	b	1d4ac <__assert_fail@plt+0xbb0c>
   1d628:	mov	r2, #5
   1d62c:	ldr	r1, [pc, #224]	; 1d714 <__assert_fail@plt+0xbd74>
   1d630:	mov	r0, #0
   1d634:	bl	11628 <dcgettext@plt>
   1d638:	ldr	ip, [sp, #60]	; 0x3c
   1d63c:	ldr	r1, [sp, #56]	; 0x38
   1d640:	ldr	lr, [sp, #48]	; 0x30
   1d644:	str	ip, [sp, #20]
   1d648:	str	r1, [sp, #16]
   1d64c:	ldr	ip, [sp, #44]	; 0x2c
   1d650:	ldr	r1, [sp, #40]	; 0x28
   1d654:	ldr	r4, [sp, #52]	; 0x34
   1d658:	ldr	r3, [sp, #36]	; 0x24
   1d65c:	stm	sp, {r1, ip, lr}
   1d660:	ldr	r2, [sp, #32]
   1d664:	str	r4, [sp, #12]
   1d668:	mov	r1, r0
   1d66c:	mov	r0, r5
   1d670:	bl	117c0 <fprintf@plt>
   1d674:	b	1d4ac <__assert_fail@plt+0xbb0c>
   1d678:	ldr	r1, [pc, #152]	; 1d718 <__assert_fail@plt+0xbd78>
   1d67c:	mov	r0, r5
   1d680:	bl	117c0 <fprintf@plt>
   1d684:	b	1d3cc <__assert_fail@plt+0xba2c>
   1d688:	mov	r2, #5
   1d68c:	ldr	r1, [pc, #136]	; 1d71c <__assert_fail@plt+0xbd7c>
   1d690:	b	1d464 <__assert_fail@plt+0xbac4>
   1d694:	mov	r4, r0
   1d698:	b	1d3ac <__assert_fail@plt+0xba0c>
   1d69c:	mov	r4, #1
   1d6a0:	b	1d3ac <__assert_fail@plt+0xba0c>
   1d6a4:	mov	r4, #2
   1d6a8:	b	1d3ac <__assert_fail@plt+0xba0c>
   1d6ac:	mov	r4, #3
   1d6b0:	b	1d3ac <__assert_fail@plt+0xba0c>
   1d6b4:	mov	r4, #4
   1d6b8:	b	1d3ac <__assert_fail@plt+0xba0c>
   1d6bc:	mov	r4, #5
   1d6c0:	b	1d3ac <__assert_fail@plt+0xba0c>
   1d6c4:	mov	r4, #6
   1d6c8:	b	1d3ac <__assert_fail@plt+0xba0c>
   1d6cc:	mov	r4, #7
   1d6d0:	b	1d3ac <__assert_fail@plt+0xba0c>
   1d6d4:	mov	r4, #8
   1d6d8:	b	1d3ac <__assert_fail@plt+0xba0c>
   1d6dc:	andeq	r3, r3, r4, asr #20
   1d6e0:	andeq	r3, r3, r8, asr sl
   1d6e4:	andeq	r0, r0, r6, ror #15
   1d6e8:	andeq	r3, r3, r8, lsl sp
   1d6ec:	andeq	r3, r3, ip, asr sl
   1d6f0:	andeq	r3, r3, r8, lsl #22
   1d6f4:	andeq	r3, r3, r8, lsr ip
   1d6f8:	andeq	r3, r3, ip, lsr #22
   1d6fc:	andeq	r3, r3, ip, lsr fp
   1d700:	andeq	r3, r3, r4, asr fp
   1d704:	andeq	r3, r3, r0, ror fp
   1d708:	muleq	r3, r0, fp
   1d70c:			; <UNDEFINED> instruction: 0x00033bb4
   1d710:	ldrdeq	r3, [r3], -ip
   1d714:	andeq	r3, r3, r8, lsl #24
   1d718:	andeq	r3, r3, r0, asr sl
   1d71c:	andeq	r3, r3, ip, ror #24
   1d720:	push	{r3}		; (str r3, [sp, #-4]!)
   1d724:	push	{lr}		; (str lr, [sp, #-4]!)
   1d728:	sub	sp, sp, #56	; 0x38
   1d72c:	add	r3, sp, #64	; 0x40
   1d730:	ldr	ip, [sp, #64]	; 0x40
   1d734:	str	r3, [sp, #12]
   1d738:	cmp	ip, #0
   1d73c:	str	ip, [sp, #16]
   1d740:	beq	1d7d8 <__assert_fail@plt+0xbe38>
   1d744:	ldr	ip, [sp, #68]	; 0x44
   1d748:	cmp	ip, #0
   1d74c:	str	ip, [sp, #20]
   1d750:	beq	1d7f8 <__assert_fail@plt+0xbe58>
   1d754:	ldr	ip, [sp, #72]	; 0x48
   1d758:	cmp	ip, #0
   1d75c:	str	ip, [sp, #24]
   1d760:	beq	1d800 <__assert_fail@plt+0xbe60>
   1d764:	ldr	ip, [sp, #76]	; 0x4c
   1d768:	cmp	ip, #0
   1d76c:	str	ip, [sp, #28]
   1d770:	beq	1d808 <__assert_fail@plt+0xbe68>
   1d774:	ldr	ip, [sp, #80]	; 0x50
   1d778:	cmp	ip, #0
   1d77c:	str	ip, [sp, #32]
   1d780:	beq	1d810 <__assert_fail@plt+0xbe70>
   1d784:	ldr	ip, [sp, #84]	; 0x54
   1d788:	cmp	ip, #0
   1d78c:	str	ip, [sp, #36]	; 0x24
   1d790:	beq	1d818 <__assert_fail@plt+0xbe78>
   1d794:	ldr	ip, [sp, #88]	; 0x58
   1d798:	cmp	ip, #0
   1d79c:	str	ip, [sp, #40]	; 0x28
   1d7a0:	beq	1d820 <__assert_fail@plt+0xbe80>
   1d7a4:	ldr	ip, [sp, #92]	; 0x5c
   1d7a8:	cmp	ip, #0
   1d7ac:	str	ip, [sp, #44]	; 0x2c
   1d7b0:	beq	1d828 <__assert_fail@plt+0xbe88>
   1d7b4:	ldr	ip, [sp, #96]	; 0x60
   1d7b8:	cmp	ip, #0
   1d7bc:	str	ip, [sp, #48]	; 0x30
   1d7c0:	beq	1d830 <__assert_fail@plt+0xbe90>
   1d7c4:	ldr	ip, [sp, #100]	; 0x64
   1d7c8:	cmp	ip, #0
   1d7cc:	str	ip, [sp, #52]	; 0x34
   1d7d0:	movne	ip, #10
   1d7d4:	moveq	ip, #9
   1d7d8:	add	r3, sp, #16
   1d7dc:	stm	sp, {r3, ip}
   1d7e0:	ldr	r3, [sp, #60]	; 0x3c
   1d7e4:	bl	1cf9c <__assert_fail@plt+0xb5fc>
   1d7e8:	add	sp, sp, #56	; 0x38
   1d7ec:	pop	{lr}		; (ldr lr, [sp], #4)
   1d7f0:	add	sp, sp, #4
   1d7f4:	bx	lr
   1d7f8:	mov	ip, #1
   1d7fc:	b	1d7d8 <__assert_fail@plt+0xbe38>
   1d800:	mov	ip, #2
   1d804:	b	1d7d8 <__assert_fail@plt+0xbe38>
   1d808:	mov	ip, #3
   1d80c:	b	1d7d8 <__assert_fail@plt+0xbe38>
   1d810:	mov	ip, #4
   1d814:	b	1d7d8 <__assert_fail@plt+0xbe38>
   1d818:	mov	ip, #5
   1d81c:	b	1d7d8 <__assert_fail@plt+0xbe38>
   1d820:	mov	ip, #6
   1d824:	b	1d7d8 <__assert_fail@plt+0xbe38>
   1d828:	mov	ip, #7
   1d82c:	b	1d7d8 <__assert_fail@plt+0xbe38>
   1d830:	mov	ip, #8
   1d834:	b	1d7d8 <__assert_fail@plt+0xbe38>
   1d838:	ldr	r3, [pc, #92]	; 1d89c <__assert_fail@plt+0xbefc>
   1d83c:	push	{r4, lr}
   1d840:	mov	r0, #10
   1d844:	ldr	r1, [r3]
   1d848:	bl	118bc <fputc@plt>
   1d84c:	mov	r2, #5
   1d850:	ldr	r1, [pc, #72]	; 1d8a0 <__assert_fail@plt+0xbf00>
   1d854:	mov	r0, #0
   1d858:	bl	11628 <dcgettext@plt>
   1d85c:	ldr	r1, [pc, #64]	; 1d8a4 <__assert_fail@plt+0xbf04>
   1d860:	bl	11550 <printf@plt>
   1d864:	mov	r2, #5
   1d868:	ldr	r1, [pc, #56]	; 1d8a8 <__assert_fail@plt+0xbf08>
   1d86c:	mov	r0, #0
   1d870:	bl	11628 <dcgettext@plt>
   1d874:	ldr	r2, [pc, #48]	; 1d8ac <__assert_fail@plt+0xbf0c>
   1d878:	ldr	r1, [pc, #48]	; 1d8b0 <__assert_fail@plt+0xbf10>
   1d87c:	bl	11550 <printf@plt>
   1d880:	ldr	r1, [pc, #44]	; 1d8b4 <__assert_fail@plt+0xbf14>
   1d884:	mov	r2, #5
   1d888:	mov	r0, #0
   1d88c:	bl	11628 <dcgettext@plt>
   1d890:	ldr	r1, [pc, #32]	; 1d8b8 <__assert_fail@plt+0xbf18>
   1d894:	pop	{r4, lr}
   1d898:	b	11550 <printf@plt>
   1d89c:	andeq	r5, r4, ip, lsl r2
   1d8a0:	andeq	r3, r3, r8, lsr #25
   1d8a4:	andeq	r3, r3, r0, asr #15
   1d8a8:			; <UNDEFINED> instruction: 0x00033cbc
   1d8ac:	muleq	r3, r8, r7
   1d8b0:	andeq	r3, r3, r0, asr r5
   1d8b4:	ldrdeq	r3, [r3], -r0
   1d8b8:	strdeq	r3, [r3], -r8
   1d8bc:	push	{r4, r5, r6, lr}
   1d8c0:	mov	r6, r0
   1d8c4:	mov	r5, r1
   1d8c8:	mov	r4, r2
   1d8cc:	bl	1f1ec <__assert_fail@plt+0xd84c>
   1d8d0:	cmp	r0, #0
   1d8d4:	popne	{r4, r5, r6, pc}
   1d8d8:	cmp	r6, #0
   1d8dc:	beq	1d8ec <__assert_fail@plt+0xbf4c>
   1d8e0:	cmp	r5, #0
   1d8e4:	cmpne	r4, #0
   1d8e8:	popeq	{r4, r5, r6, pc}
   1d8ec:	bl	1df38 <__assert_fail@plt+0xc598>
   1d8f0:	push	{r4, lr}
   1d8f4:	bl	1f110 <__assert_fail@plt+0xd770>
   1d8f8:	cmp	r0, #0
   1d8fc:	popne	{r4, pc}
   1d900:	bl	1df38 <__assert_fail@plt+0xc598>
   1d904:	push	{r4, lr}
   1d908:	bl	1f110 <__assert_fail@plt+0xd770>
   1d90c:	cmp	r0, #0
   1d910:	popne	{r4, pc}
   1d914:	bl	1df38 <__assert_fail@plt+0xc598>
   1d918:	push	{r4, lr}
   1d91c:	bl	1f110 <__assert_fail@plt+0xd770>
   1d920:	cmp	r0, #0
   1d924:	popne	{r4, pc}
   1d928:	bl	1df38 <__assert_fail@plt+0xc598>
   1d92c:	push	{r4, r5, r6, lr}
   1d930:	mov	r5, r0
   1d934:	mov	r4, r1
   1d938:	bl	1f190 <__assert_fail@plt+0xd7f0>
   1d93c:	cmp	r0, #0
   1d940:	popne	{r4, r5, r6, pc}
   1d944:	adds	r4, r4, #0
   1d948:	movne	r4, #1
   1d94c:	cmp	r5, #0
   1d950:	orreq	r4, r4, #1
   1d954:	cmp	r4, #0
   1d958:	popeq	{r4, r5, r6, pc}
   1d95c:	bl	1df38 <__assert_fail@plt+0xc598>
   1d960:	push	{r4, lr}
   1d964:	cmp	r1, #0
   1d968:	orreq	r1, r1, #1
   1d96c:	bl	1f190 <__assert_fail@plt+0xd7f0>
   1d970:	cmp	r0, #0
   1d974:	popne	{r4, pc}
   1d978:	bl	1df38 <__assert_fail@plt+0xc598>
   1d97c:	push	{r4, r5, r6, lr}
   1d980:	mov	r6, r0
   1d984:	mov	r5, r1
   1d988:	mov	r4, r2
   1d98c:	bl	1f1ec <__assert_fail@plt+0xd84c>
   1d990:	cmp	r0, #0
   1d994:	popne	{r4, r5, r6, pc}
   1d998:	cmp	r6, #0
   1d99c:	beq	1d9ac <__assert_fail@plt+0xc00c>
   1d9a0:	cmp	r5, #0
   1d9a4:	cmpne	r4, #0
   1d9a8:	popeq	{r4, r5, r6, pc}
   1d9ac:	bl	1df38 <__assert_fail@plt+0xc598>
   1d9b0:	cmp	r2, #0
   1d9b4:	cmpne	r1, #0
   1d9b8:	moveq	r2, #1
   1d9bc:	moveq	r1, r2
   1d9c0:	push	{r4, lr}
   1d9c4:	bl	1f1ec <__assert_fail@plt+0xd84c>
   1d9c8:	cmp	r0, #0
   1d9cc:	popne	{r4, pc}
   1d9d0:	bl	1df38 <__assert_fail@plt+0xc598>
   1d9d4:	push	{r4, lr}
   1d9d8:	mov	r2, r1
   1d9dc:	mov	r1, r0
   1d9e0:	mov	r0, #0
   1d9e4:	bl	1f1ec <__assert_fail@plt+0xd84c>
   1d9e8:	cmp	r0, #0
   1d9ec:	popne	{r4, pc}
   1d9f0:	bl	1df38 <__assert_fail@plt+0xc598>
   1d9f4:	cmp	r1, #0
   1d9f8:	cmpne	r0, #0
   1d9fc:	moveq	r2, #1
   1da00:	movne	r2, r1
   1da04:	moveq	r1, r2
   1da08:	movne	r1, r0
   1da0c:	push	{r4, lr}
   1da10:	mov	r0, #0
   1da14:	bl	1f1ec <__assert_fail@plt+0xd84c>
   1da18:	cmp	r0, #0
   1da1c:	popne	{r4, pc}
   1da20:	bl	1df38 <__assert_fail@plt+0xc598>
   1da24:	cmp	r0, #0
   1da28:	push	{r4, r5, r6, lr}
   1da2c:	mov	r5, r1
   1da30:	ldr	r4, [r1]
   1da34:	beq	1da70 <__assert_fail@plt+0xc0d0>
   1da38:	lsr	r2, r4, #1
   1da3c:	add	r3, r2, #1
   1da40:	mvn	r3, r3
   1da44:	cmp	r4, r3
   1da48:	bhi	1da8c <__assert_fail@plt+0xc0ec>
   1da4c:	add	r4, r4, #1
   1da50:	add	r4, r4, r2
   1da54:	mov	r1, r4
   1da58:	mov	r2, #1
   1da5c:	bl	1f1ec <__assert_fail@plt+0xd84c>
   1da60:	cmp	r0, #0
   1da64:	beq	1da90 <__assert_fail@plt+0xc0f0>
   1da68:	str	r4, [r5]
   1da6c:	pop	{r4, r5, r6, pc}
   1da70:	cmp	r4, #0
   1da74:	moveq	r4, #64	; 0x40
   1da78:	mov	r1, r4
   1da7c:	mov	r2, #1
   1da80:	bl	1f1ec <__assert_fail@plt+0xd84c>
   1da84:	cmp	r0, #0
   1da88:	bne	1da68 <__assert_fail@plt+0xc0c8>
   1da8c:	bl	1df38 <__assert_fail@plt+0xc598>
   1da90:	cmp	r4, #0
   1da94:	bne	1da8c <__assert_fail@plt+0xc0ec>
   1da98:	str	r4, [r5]
   1da9c:	pop	{r4, r5, r6, pc}
   1daa0:	cmp	r0, #0
   1daa4:	push	{r4, r5, r6, lr}
   1daa8:	mov	r5, r1
   1daac:	ldr	r4, [r1]
   1dab0:	mov	r6, r2
   1dab4:	beq	1daf8 <__assert_fail@plt+0xc158>
   1dab8:	lsr	r1, r4, #1
   1dabc:	add	r3, r1, #1
   1dac0:	mvn	r3, r3
   1dac4:	cmp	r4, r3
   1dac8:	bhi	1db30 <__assert_fail@plt+0xc190>
   1dacc:	add	r4, r4, #1
   1dad0:	add	r4, r4, r1
   1dad4:	mov	r1, r4
   1dad8:	bl	1f1ec <__assert_fail@plt+0xd84c>
   1dadc:	cmp	r0, #0
   1dae0:	bne	1daf0 <__assert_fail@plt+0xc150>
   1dae4:	cmp	r4, #0
   1dae8:	cmpne	r6, #0
   1daec:	bne	1db30 <__assert_fail@plt+0xc190>
   1daf0:	str	r4, [r5]
   1daf4:	pop	{r4, r5, r6, pc}
   1daf8:	cmp	r4, #0
   1dafc:	bne	1db18 <__assert_fail@plt+0xc178>
   1db00:	mov	r1, r2
   1db04:	mov	r0, #64	; 0x40
   1db08:	bl	31c94 <__assert_fail@plt+0x202f4>
   1db0c:	cmp	r0, #0
   1db10:	movne	r4, r0
   1db14:	addeq	r4, r0, #1
   1db18:	mov	r2, r6
   1db1c:	mov	r1, r4
   1db20:	mov	r0, #0
   1db24:	bl	1f1ec <__assert_fail@plt+0xd84c>
   1db28:	cmp	r0, #0
   1db2c:	bne	1daf0 <__assert_fail@plt+0xc150>
   1db30:	bl	1df38 <__assert_fail@plt+0xc598>
   1db34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db38:	sub	sp, sp, #12
   1db3c:	ldr	r6, [r1]
   1db40:	mov	r8, r1
   1db44:	mov	r9, r0
   1db48:	asrs	r4, r6, #1
   1db4c:	mov	sl, r2
   1db50:	mov	fp, r3
   1db54:	ldr	r7, [sp, #48]	; 0x30
   1db58:	bmi	1dcd4 <__assert_fail@plt+0xc334>
   1db5c:	mvn	r1, #-2147483648	; 0x80000000
   1db60:	sub	r1, r1, r4
   1db64:	cmp	r6, r1
   1db68:	movle	r1, #0
   1db6c:	movgt	r1, #1
   1db70:	mvn	r3, fp
   1db74:	cmp	r1, #0
   1db78:	addeq	r4, r4, r6
   1db7c:	mvnne	r4, #-2147483648	; 0x80000000
   1db80:	lsr	r3, r3, #31
   1db84:	cmp	fp, r4
   1db88:	movge	r2, #0
   1db8c:	andlt	r2, r3, #1
   1db90:	cmp	r2, #0
   1db94:	beq	1dc84 <__assert_fail@plt+0xc2e4>
   1db98:	cmp	r7, #0
   1db9c:	blt	1dd6c <__assert_fail@plt+0xc3cc>
   1dba0:	bne	1dd64 <__assert_fail@plt+0xc3c4>
   1dba4:	mov	r5, #64	; 0x40
   1dba8:	mov	r1, r7
   1dbac:	mov	r0, r5
   1dbb0:	str	r3, [sp, #4]
   1dbb4:	bl	31ea0 <__assert_fail@plt+0x20500>
   1dbb8:	mov	r1, r7
   1dbbc:	mov	r4, r0
   1dbc0:	mov	r0, r5
   1dbc4:	bl	320c0 <__assert_fail@plt+0x20720>
   1dbc8:	ldr	r3, [sp, #4]
   1dbcc:	sub	r5, r5, r1
   1dbd0:	cmp	r9, #0
   1dbd4:	sub	r2, r4, r6
   1dbd8:	streq	r9, [r8]
   1dbdc:	cmp	r2, sl
   1dbe0:	bge	1dc64 <__assert_fail@plt+0xc2c4>
   1dbe4:	cmp	sl, #0
   1dbe8:	blt	1dd04 <__assert_fail@plt+0xc364>
   1dbec:	cmp	r6, #0
   1dbf0:	blt	1dc10 <__assert_fail@plt+0xc270>
   1dbf4:	mvn	r2, #-2147483648	; 0x80000000
   1dbf8:	sub	r2, r2, sl
   1dbfc:	cmp	r6, r2
   1dc00:	movle	r2, #0
   1dc04:	movgt	r2, #1
   1dc08:	cmp	r2, #0
   1dc0c:	bne	1dd00 <__assert_fail@plt+0xc360>
   1dc10:	add	r6, r6, sl
   1dc14:	cmp	fp, r6
   1dc18:	movge	r3, #0
   1dc1c:	andlt	r3, r3, #1
   1dc20:	cmp	r3, #0
   1dc24:	mov	r4, r6
   1dc28:	bne	1dd00 <__assert_fail@plt+0xc360>
   1dc2c:	cmp	r7, #0
   1dc30:	blt	1dd18 <__assert_fail@plt+0xc378>
   1dc34:	beq	1dc60 <__assert_fail@plt+0xc2c0>
   1dc38:	cmp	r6, #0
   1dc3c:	blt	1ddbc <__assert_fail@plt+0xc41c>
   1dc40:	mov	r1, r7
   1dc44:	mvn	r0, #-2147483648	; 0x80000000
   1dc48:	bl	31ea0 <__assert_fail@plt+0x20500>
   1dc4c:	cmp	r6, r0
   1dc50:	movle	r0, #0
   1dc54:	movgt	r0, #1
   1dc58:	cmp	r0, #0
   1dc5c:	bne	1dd00 <__assert_fail@plt+0xc360>
   1dc60:	mul	r5, r6, r7
   1dc64:	mov	r1, r5
   1dc68:	mov	r0, r9
   1dc6c:	bl	1f190 <__assert_fail@plt+0xd7f0>
   1dc70:	cmp	r0, #0
   1dc74:	beq	1dce8 <__assert_fail@plt+0xc348>
   1dc78:	str	r4, [r8]
   1dc7c:	add	sp, sp, #12
   1dc80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc84:	cmp	r7, #0
   1dc88:	blt	1dd44 <__assert_fail@plt+0xc3a4>
   1dc8c:	beq	1dba4 <__assert_fail@plt+0xc204>
   1dc90:	cmp	r4, #0
   1dc94:	blt	1dd74 <__assert_fail@plt+0xc3d4>
   1dc98:	mov	r1, r7
   1dc9c:	mvn	r0, #-2147483648	; 0x80000000
   1dca0:	str	r3, [sp, #4]
   1dca4:	bl	31ea0 <__assert_fail@plt+0x20500>
   1dca8:	ldr	r3, [sp, #4]
   1dcac:	cmp	r0, r4
   1dcb0:	movge	r0, #0
   1dcb4:	movlt	r0, #1
   1dcb8:	cmp	r0, #0
   1dcbc:	mvnne	r5, #-2147483648	; 0x80000000
   1dcc0:	bne	1dba8 <__assert_fail@plt+0xc208>
   1dcc4:	mul	r5, r7, r4
   1dcc8:	cmp	r5, #63	; 0x3f
   1dccc:	bgt	1dbd0 <__assert_fail@plt+0xc230>
   1dcd0:	b	1dba4 <__assert_fail@plt+0xc204>
   1dcd4:	rsb	r1, r4, #-2147483648	; 0x80000000
   1dcd8:	cmp	r6, r1
   1dcdc:	movge	r1, #0
   1dce0:	movlt	r1, #1
   1dce4:	b	1db70 <__assert_fail@plt+0xc1d0>
   1dce8:	adds	r5, r5, #0
   1dcec:	movne	r5, #1
   1dcf0:	cmp	r9, #0
   1dcf4:	orreq	r5, r5, #1
   1dcf8:	cmp	r5, #0
   1dcfc:	beq	1dc78 <__assert_fail@plt+0xc2d8>
   1dd00:	bl	1df38 <__assert_fail@plt+0xc598>
   1dd04:	rsb	r2, sl, #-2147483648	; 0x80000000
   1dd08:	cmp	r6, r2
   1dd0c:	movge	r2, #0
   1dd10:	movlt	r2, #1
   1dd14:	b	1dc08 <__assert_fail@plt+0xc268>
   1dd18:	cmp	r6, #0
   1dd1c:	blt	1dda0 <__assert_fail@plt+0xc400>
   1dd20:	cmn	r7, #1
   1dd24:	beq	1dc60 <__assert_fail@plt+0xc2c0>
   1dd28:	mov	r1, r7
   1dd2c:	mov	r0, #-2147483648	; 0x80000000
   1dd30:	bl	31ea0 <__assert_fail@plt+0x20500>
   1dd34:	cmp	r6, r0
   1dd38:	movle	r0, #0
   1dd3c:	movgt	r0, #1
   1dd40:	b	1dc58 <__assert_fail@plt+0xc2b8>
   1dd44:	cmp	r4, #0
   1dd48:	blt	1dde0 <__assert_fail@plt+0xc440>
   1dd4c:	cmn	r7, #1
   1dd50:	beq	1dcc4 <__assert_fail@plt+0xc324>
   1dd54:	str	r3, [sp, #4]
   1dd58:	mov	r1, r7
   1dd5c:	mov	r0, #-2147483648	; 0x80000000
   1dd60:	b	1dca4 <__assert_fail@plt+0xc304>
   1dd64:	mov	r4, fp
   1dd68:	b	1dc98 <__assert_fail@plt+0xc2f8>
   1dd6c:	mov	r4, fp
   1dd70:	b	1dd4c <__assert_fail@plt+0xc3ac>
   1dd74:	cmn	r4, #1
   1dd78:	beq	1dcc4 <__assert_fail@plt+0xc324>
   1dd7c:	mov	r1, r4
   1dd80:	mov	r0, #-2147483648	; 0x80000000
   1dd84:	str	r3, [sp, #4]
   1dd88:	bl	31ea0 <__assert_fail@plt+0x20500>
   1dd8c:	ldr	r3, [sp, #4]
   1dd90:	cmp	r7, r0
   1dd94:	movle	r0, #0
   1dd98:	movgt	r0, #1
   1dd9c:	b	1dcb8 <__assert_fail@plt+0xc318>
   1dda0:	mov	r1, r7
   1dda4:	mvn	r0, #-2147483648	; 0x80000000
   1dda8:	bl	31ea0 <__assert_fail@plt+0x20500>
   1ddac:	cmp	r6, r0
   1ddb0:	movge	r0, #0
   1ddb4:	movlt	r0, #1
   1ddb8:	b	1dc58 <__assert_fail@plt+0xc2b8>
   1ddbc:	cmn	r6, #1
   1ddc0:	beq	1dc60 <__assert_fail@plt+0xc2c0>
   1ddc4:	mov	r1, r6
   1ddc8:	mov	r0, #-2147483648	; 0x80000000
   1ddcc:	bl	31ea0 <__assert_fail@plt+0x20500>
   1ddd0:	cmp	r7, r0
   1ddd4:	movle	r0, #0
   1ddd8:	movgt	r0, #1
   1dddc:	b	1dc58 <__assert_fail@plt+0xc2b8>
   1dde0:	mov	r1, r7
   1dde4:	mvn	r0, #-2147483648	; 0x80000000
   1dde8:	str	r3, [sp, #4]
   1ddec:	bl	31ea0 <__assert_fail@plt+0x20500>
   1ddf0:	ldr	r3, [sp, #4]
   1ddf4:	cmp	r0, r4
   1ddf8:	movle	r0, #0
   1ddfc:	movgt	r0, #1
   1de00:	b	1dcb8 <__assert_fail@plt+0xc318>
   1de04:	push	{r4, lr}
   1de08:	mov	r1, #1
   1de0c:	bl	1ed9c <__assert_fail@plt+0xd3fc>
   1de10:	cmp	r0, #0
   1de14:	popne	{r4, pc}
   1de18:	bl	1df38 <__assert_fail@plt+0xc598>
   1de1c:	push	{r4, lr}
   1de20:	mov	r1, #1
   1de24:	bl	1ed9c <__assert_fail@plt+0xd3fc>
   1de28:	cmp	r0, #0
   1de2c:	popne	{r4, pc}
   1de30:	bl	1df38 <__assert_fail@plt+0xc598>
   1de34:	push	{r4, lr}
   1de38:	bl	1ed9c <__assert_fail@plt+0xd3fc>
   1de3c:	cmp	r0, #0
   1de40:	popne	{r4, pc}
   1de44:	bl	1df38 <__assert_fail@plt+0xc598>
   1de48:	push	{r4, lr}
   1de4c:	bl	1ed9c <__assert_fail@plt+0xd3fc>
   1de50:	cmp	r0, #0
   1de54:	popne	{r4, pc}
   1de58:	bl	1df38 <__assert_fail@plt+0xc598>
   1de5c:	push	{r4, r5, r6, lr}
   1de60:	mov	r6, r0
   1de64:	mov	r0, r1
   1de68:	mov	r4, r1
   1de6c:	bl	1f110 <__assert_fail@plt+0xd770>
   1de70:	subs	r5, r0, #0
   1de74:	beq	1de8c <__assert_fail@plt+0xc4ec>
   1de78:	mov	r2, r4
   1de7c:	mov	r1, r6
   1de80:	bl	115d4 <memcpy@plt>
   1de84:	mov	r0, r5
   1de88:	pop	{r4, r5, r6, pc}
   1de8c:	bl	1df38 <__assert_fail@plt+0xc598>
   1de90:	push	{r4, r5, r6, lr}
   1de94:	mov	r6, r0
   1de98:	mov	r0, r1
   1de9c:	mov	r4, r1
   1dea0:	bl	1f110 <__assert_fail@plt+0xd770>
   1dea4:	subs	r5, r0, #0
   1dea8:	beq	1dec0 <__assert_fail@plt+0xc520>
   1deac:	mov	r2, r4
   1deb0:	mov	r1, r6
   1deb4:	bl	115d4 <memcpy@plt>
   1deb8:	mov	r0, r5
   1debc:	pop	{r4, r5, r6, pc}
   1dec0:	bl	1df38 <__assert_fail@plt+0xc598>
   1dec4:	push	{r4, r5, r6, lr}
   1dec8:	mov	r6, r0
   1decc:	add	r0, r1, #1
   1ded0:	mov	r4, r1
   1ded4:	bl	1f110 <__assert_fail@plt+0xd770>
   1ded8:	subs	r5, r0, #0
   1dedc:	beq	1defc <__assert_fail@plt+0xc55c>
   1dee0:	mov	r3, #0
   1dee4:	mov	r1, r6
   1dee8:	strb	r3, [r5, r4]
   1deec:	mov	r2, r4
   1def0:	bl	115d4 <memcpy@plt>
   1def4:	mov	r0, r5
   1def8:	pop	{r4, r5, r6, pc}
   1defc:	bl	1df38 <__assert_fail@plt+0xc598>
   1df00:	push	{r4, r5, r6, lr}
   1df04:	mov	r6, r0
   1df08:	bl	117a8 <strlen@plt>
   1df0c:	add	r4, r0, #1
   1df10:	mov	r0, r4
   1df14:	bl	1f110 <__assert_fail@plt+0xd770>
   1df18:	subs	r5, r0, #0
   1df1c:	beq	1df34 <__assert_fail@plt+0xc594>
   1df20:	mov	r2, r4
   1df24:	mov	r1, r6
   1df28:	bl	115d4 <memcpy@plt>
   1df2c:	mov	r0, r5
   1df30:	pop	{r4, r5, r6, pc}
   1df34:	bl	1df38 <__assert_fail@plt+0xc598>
   1df38:	ldr	r3, [pc, #44]	; 1df6c <__assert_fail@plt+0xc5cc>
   1df3c:	push	{r4, lr}
   1df40:	mov	r2, #5
   1df44:	ldr	r1, [pc, #36]	; 1df70 <__assert_fail@plt+0xc5d0>
   1df48:	mov	r0, #0
   1df4c:	ldr	r4, [r3]
   1df50:	bl	11628 <dcgettext@plt>
   1df54:	ldr	r2, [pc, #24]	; 1df74 <__assert_fail@plt+0xc5d4>
   1df58:	mov	r1, #0
   1df5c:	mov	r3, r0
   1df60:	mov	r0, r4
   1df64:	bl	116d0 <error@plt>
   1df68:	bl	11964 <abort@plt>
   1df6c:			; <UNDEFINED> instruction: 0x000451bc
   1df70:	andeq	r3, r3, r8, asr #26
   1df74:	andeq	r3, r3, r8, lsl r8
   1df78:	ldr	ip, [pc, #148]	; 1e014 <__assert_fail@plt+0xc674>
   1df7c:	sub	r0, r0, #1
   1df80:	push	{lr}		; (str lr, [sp, #-4]!)
   1df84:	sub	sp, sp, #20
   1df88:	ldr	r5, [ip]
   1df8c:	cmp	r0, #3
   1df90:	ldrls	pc, [pc, r0, lsl #2]
   1df94:	b	1e000 <__assert_fail@plt+0xc660>
   1df98:	andeq	lr, r1, ip
   1df9c:	andeq	lr, r1, r4
   1dfa0:	andeq	lr, r1, r4
   1dfa4:	andeq	sp, r1, r8, lsr #31
   1dfa8:	ldr	r0, [pc, #104]	; 1e018 <__assert_fail@plt+0xc678>
   1dfac:	cmp	r1, #0
   1dfb0:	movlt	r3, #0
   1dfb4:	ldrlt	r4, [pc, #96]	; 1e01c <__assert_fail@plt+0xc67c>
   1dfb8:	ldrge	r6, [r3, r1, lsl #4]
   1dfbc:	sublt	r4, r4, r1
   1dfc0:	strblt	r2, [sp, #12]
   1dfc4:	mov	r1, r0
   1dfc8:	mov	r2, #5
   1dfcc:	mov	r0, #0
   1dfd0:	strblt	r3, [sp, #13]
   1dfd4:	addlt	r6, sp, #12
   1dfd8:	ldrge	r4, [pc, #60]	; 1e01c <__assert_fail@plt+0xc67c>
   1dfdc:	bl	11628 <dcgettext@plt>
   1dfe0:	ldr	r3, [sp, #24]
   1dfe4:	str	r6, [sp]
   1dfe8:	str	r3, [sp, #4]
   1dfec:	mov	r1, #0
   1dff0:	mov	r3, r4
   1dff4:	mov	r2, r0
   1dff8:	mov	r0, r5
   1dffc:	bl	116d0 <error@plt>
   1e000:	bl	11964 <abort@plt>
   1e004:	ldr	r0, [pc, #20]	; 1e020 <__assert_fail@plt+0xc680>
   1e008:	b	1dfac <__assert_fail@plt+0xc60c>
   1e00c:	ldr	r0, [pc, #16]	; 1e024 <__assert_fail@plt+0xc684>
   1e010:	b	1dfac <__assert_fail@plt+0xc60c>
   1e014:			; <UNDEFINED> instruction: 0x000451bc
   1e018:	andeq	r3, r3, ip, asr sp
   1e01c:	andeq	r3, r3, r0, asr #27
   1e020:	andeq	r3, r3, r8, ror sp
   1e024:	andeq	r3, r3, r0, lsr #27
   1e028:	cmp	r2, #36	; 0x24
   1e02c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e030:	sub	sp, sp, #52	; 0x34
   1e034:	bhi	1ed6c <__assert_fail@plt+0xd3cc>
   1e038:	cmp	r1, #0
   1e03c:	mov	r6, r2
   1e040:	mov	sl, r0
   1e044:	mov	r5, r1
   1e048:	mov	r8, r3
   1e04c:	addeq	r5, sp, #44	; 0x2c
   1e050:	bl	117d8 <__errno_location@plt>
   1e054:	mov	r3, #0
   1e058:	str	r3, [r0]
   1e05c:	mov	fp, r0
   1e060:	bl	11778 <__ctype_b_loc@plt>
   1e064:	ldrb	r3, [sl]
   1e068:	mov	r2, sl
   1e06c:	ldr	r0, [r0]
   1e070:	b	1e078 <__assert_fail@plt+0xc6d8>
   1e074:	ldrb	r3, [r2, #1]!
   1e078:	lsl	r1, r3, #1
   1e07c:	ldrh	r4, [r0, r1]
   1e080:	ands	r4, r4, #8192	; 0x2000
   1e084:	bne	1e074 <__assert_fail@plt+0xc6d4>
   1e088:	cmp	r3, #45	; 0x2d
   1e08c:	bne	1e0a0 <__assert_fail@plt+0xc700>
   1e090:	mov	r4, #4
   1e094:	mov	r0, r4
   1e098:	add	sp, sp, #52	; 0x34
   1e09c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0a0:	mov	r2, r6
   1e0a4:	mov	r3, r4
   1e0a8:	mov	r1, r5
   1e0ac:	mov	r0, sl
   1e0b0:	bl	115ec <__strtoull_internal@plt>
   1e0b4:	ldr	r9, [r5]
   1e0b8:	cmp	sl, r9
   1e0bc:	mov	r6, r0
   1e0c0:	mov	r7, r1
   1e0c4:	beq	1e10c <__assert_fail@plt+0xc76c>
   1e0c8:	ldr	r4, [fp]
   1e0cc:	cmp	r4, #0
   1e0d0:	bne	1e0fc <__assert_fail@plt+0xc75c>
   1e0d4:	ldr	r3, [sp, #88]	; 0x58
   1e0d8:	cmp	r3, #0
   1e0dc:	beq	1e0ec <__assert_fail@plt+0xc74c>
   1e0e0:	ldrb	sl, [r9]
   1e0e4:	cmp	sl, #0
   1e0e8:	bne	1e140 <__assert_fail@plt+0xc7a0>
   1e0ec:	mov	r0, r4
   1e0f0:	strd	r6, [r8]
   1e0f4:	add	sp, sp, #52	; 0x34
   1e0f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0fc:	cmp	r4, #34	; 0x22
   1e100:	bne	1e090 <__assert_fail@plt+0xc6f0>
   1e104:	mov	r4, #1
   1e108:	b	1e0d4 <__assert_fail@plt+0xc734>
   1e10c:	ldr	r3, [sp, #88]	; 0x58
   1e110:	cmp	r3, #0
   1e114:	beq	1e090 <__assert_fail@plt+0xc6f0>
   1e118:	ldrb	sl, [r9]
   1e11c:	cmp	sl, #0
   1e120:	beq	1e090 <__assert_fail@plt+0xc6f0>
   1e124:	mov	r1, sl
   1e128:	mov	r0, r3
   1e12c:	bl	117b4 <strchr@plt>
   1e130:	cmp	r0, #0
   1e134:	movne	r6, #1
   1e138:	movne	r7, #0
   1e13c:	beq	1e090 <__assert_fail@plt+0xc6f0>
   1e140:	mov	r1, sl
   1e144:	ldr	r0, [sp, #88]	; 0x58
   1e148:	bl	117b4 <strchr@plt>
   1e14c:	cmp	r0, #0
   1e150:	beq	1ec60 <__assert_fail@plt+0xd2c0>
   1e154:	sub	r3, sl, #69	; 0x45
   1e158:	cmp	r3, #47	; 0x2f
   1e15c:	ldrls	pc, [pc, r3, lsl #2]
   1e160:	b	1e254 <__assert_fail@plt+0xc8b4>
   1e164:	andeq	lr, r1, r4, lsr #4
   1e168:	andeq	lr, r1, r4, asr r2
   1e16c:	andeq	lr, r1, r4, lsr #4
   1e170:	andeq	lr, r1, r4, asr r2
   1e174:	andeq	lr, r1, r4, asr r2
   1e178:	andeq	lr, r1, r4, asr r2
   1e17c:	andeq	lr, r1, r4, lsr #4
   1e180:	andeq	lr, r1, r4, asr r2
   1e184:	andeq	lr, r1, r4, lsr #4
   1e188:	andeq	lr, r1, r4, asr r2
   1e18c:	andeq	lr, r1, r4, asr r2
   1e190:	andeq	lr, r1, r4, lsr #4
   1e194:	andeq	lr, r1, r4, asr r2
   1e198:	andeq	lr, r1, r4, asr r2
   1e19c:	andeq	lr, r1, r4, asr r2
   1e1a0:	andeq	lr, r1, r4, lsr #4
   1e1a4:	andeq	lr, r1, r4, asr r2
   1e1a8:	andeq	lr, r1, r4, asr r2
   1e1ac:	andeq	lr, r1, r4, asr r2
   1e1b0:	andeq	lr, r1, r4, asr r2
   1e1b4:	andeq	lr, r1, r4, lsr #4
   1e1b8:	andeq	lr, r1, r4, lsr #4
   1e1bc:	andeq	lr, r1, r4, asr r2
   1e1c0:	andeq	lr, r1, r4, asr r2
   1e1c4:	andeq	lr, r1, r4, asr r2
   1e1c8:	andeq	lr, r1, r4, asr r2
   1e1cc:	andeq	lr, r1, r4, asr r2
   1e1d0:	andeq	lr, r1, r4, asr r2
   1e1d4:	andeq	lr, r1, r4, asr r2
   1e1d8:	andeq	lr, r1, r4, asr r2
   1e1dc:	andeq	lr, r1, r4, asr r2
   1e1e0:	andeq	lr, r1, r4, asr r2
   1e1e4:	andeq	lr, r1, r4, asr r2
   1e1e8:	andeq	lr, r1, r4, asr r2
   1e1ec:	andeq	lr, r1, r4, lsr #4
   1e1f0:	andeq	lr, r1, r4, asr r2
   1e1f4:	andeq	lr, r1, r4, asr r2
   1e1f8:	andeq	lr, r1, r4, asr r2
   1e1fc:	andeq	lr, r1, r4, lsr #4
   1e200:	andeq	lr, r1, r4, asr r2
   1e204:	andeq	lr, r1, r4, lsr #4
   1e208:	andeq	lr, r1, r4, asr r2
   1e20c:	andeq	lr, r1, r4, asr r2
   1e210:	andeq	lr, r1, r4, asr r2
   1e214:	andeq	lr, r1, r4, asr r2
   1e218:	andeq	lr, r1, r4, asr r2
   1e21c:	andeq	lr, r1, r4, asr r2
   1e220:	andeq	lr, r1, r4, lsr #4
   1e224:	mov	r1, #48	; 0x30
   1e228:	ldr	r0, [sp, #88]	; 0x58
   1e22c:	bl	117b4 <strchr@plt>
   1e230:	cmp	r0, #0
   1e234:	beq	1eccc <__assert_fail@plt+0xd32c>
   1e238:	ldrb	r3, [r9, #1]
   1e23c:	cmp	r3, #68	; 0x44
   1e240:	beq	1ec7c <__assert_fail@plt+0xd2dc>
   1e244:	cmp	r3, #105	; 0x69
   1e248:	beq	1ec9c <__assert_fail@plt+0xd2fc>
   1e24c:	cmp	r3, #66	; 0x42
   1e250:	beq	1ec7c <__assert_fail@plt+0xd2dc>
   1e254:	ldr	r3, [pc, #2860]	; 1ed88 <__assert_fail@plt+0xd3e8>
   1e258:	mvn	r2, #0
   1e25c:	mov	r1, #1024	; 0x400
   1e260:	mov	ip, #0
   1e264:	strd	r2, [sp]
   1e268:	mov	r3, #1
   1e26c:	str	r3, [sp, #32]
   1e270:	sub	sl, sl, #66	; 0x42
   1e274:	cmp	sl, #53	; 0x35
   1e278:	ldrls	pc, [pc, sl, lsl #2]
   1e27c:	b	1ec60 <__assert_fail@plt+0xd2c0>
   1e280:	andeq	lr, r1, r4, lsr #12
   1e284:	andeq	lr, r1, r0, ror #24
   1e288:	andeq	lr, r1, r0, ror #24
   1e28c:	andeq	lr, r1, r8, lsl #9
   1e290:	andeq	lr, r1, r0, ror #24
   1e294:	andeq	lr, r1, r0, asr #7
   1e298:	andeq	lr, r1, r0, ror #24
   1e29c:	andeq	lr, r1, r0, ror #24
   1e2a0:	andeq	lr, r1, r0, ror #24
   1e2a4:	muleq	r1, r8, r3
   1e2a8:	andeq	lr, r1, r0, ror #24
   1e2ac:	andeq	lr, r1, ip, asr #20
   1e2b0:	andeq	lr, r1, r0, ror #24
   1e2b4:	andeq	lr, r1, r0, ror #24
   1e2b8:	andeq	lr, r1, ip, asr #18
   1e2bc:	andeq	lr, r1, r0, ror #24
   1e2c0:	andeq	lr, r1, r0, ror #24
   1e2c4:	andeq	lr, r1, r0, ror #24
   1e2c8:	andeq	lr, r1, r8, ror r8
   1e2cc:	andeq	lr, r1, r0, ror #24
   1e2d0:	andeq	lr, r1, r0, ror #24
   1e2d4:	andeq	lr, r1, r0, ror #24
   1e2d8:	andeq	lr, r1, r0, ror #24
   1e2dc:	andeq	lr, r1, r4, asr r6
   1e2e0:	andeq	lr, r1, r0, asr #21
   1e2e4:	andeq	lr, r1, r0, ror #24
   1e2e8:	andeq	lr, r1, r0, ror #24
   1e2ec:	andeq	lr, r1, r0, ror #24
   1e2f0:	andeq	lr, r1, r0, ror #24
   1e2f4:	andeq	lr, r1, r0, ror #24
   1e2f8:	andeq	lr, r1, r0, ror #24
   1e2fc:	andeq	lr, r1, r0, ror #24
   1e300:	muleq	r1, r0, sl
   1e304:	muleq	r1, r0, r3
   1e308:	andeq	lr, r1, r0, ror #24
   1e30c:	andeq	lr, r1, r0, ror #24
   1e310:	andeq	lr, r1, r0, ror #24
   1e314:	andeq	lr, r1, r0, asr #7
   1e318:	andeq	lr, r1, r0, ror #24
   1e31c:	andeq	lr, r1, r0, ror #24
   1e320:	andeq	lr, r1, r0, ror #24
   1e324:	muleq	r1, r8, r3
   1e328:	andeq	lr, r1, r0, ror #24
   1e32c:	andeq	lr, r1, ip, asr #20
   1e330:	andeq	lr, r1, r0, ror #24
   1e334:	andeq	lr, r1, r0, ror #24
   1e338:	andeq	lr, r1, r0, ror #24
   1e33c:	andeq	lr, r1, r0, ror #24
   1e340:	andeq	lr, r1, r0, ror #24
   1e344:	andeq	lr, r1, r0, ror #24
   1e348:	andeq	lr, r1, r8, ror r8
   1e34c:	andeq	lr, r1, r0, ror #24
   1e350:	andeq	lr, r1, r0, ror #24
   1e354:	andeq	lr, r1, r8, asr r3
   1e358:	cmp	r6, #0
   1e35c:	sbcs	r3, r7, #0
   1e360:	blt	1ec6c <__assert_fail@plt+0xd2cc>
   1e364:	adds	r6, r6, r6
   1e368:	adc	r7, r7, r7
   1e36c:	mov	lr, #0
   1e370:	ldr	r2, [sp, #32]
   1e374:	orr	r4, r4, lr
   1e378:	add	r3, r9, r2
   1e37c:	str	r3, [r5]
   1e380:	ldrb	r3, [r9, r2]
   1e384:	cmp	r3, #0
   1e388:	orrne	r4, r4, #2
   1e38c:	b	1e0ec <__assert_fail@plt+0xc74c>
   1e390:	mov	lr, #0
   1e394:	b	1e370 <__assert_fail@plt+0xc9d0>
   1e398:	ldrd	r2, [sp]
   1e39c:	cmp	r7, r3
   1e3a0:	cmpeq	r6, r2
   1e3a4:	bhi	1ec6c <__assert_fail@plt+0xd2cc>
   1e3a8:	mul	r3, r6, ip
   1e3ac:	mov	lr, #0
   1e3b0:	mla	r3, r1, r7, r3
   1e3b4:	umull	r6, r7, r6, r1
   1e3b8:	add	r7, r3, r7
   1e3bc:	b	1e370 <__assert_fail@plt+0xc9d0>
   1e3c0:	mul	r0, r1, r7
   1e3c4:	ldrd	sl, [sp]
   1e3c8:	umull	r2, r3, r1, r6
   1e3cc:	mla	r0, ip, r6, r0
   1e3d0:	cmp	r7, fp
   1e3d4:	cmpeq	r6, sl
   1e3d8:	add	r3, r0, r3
   1e3dc:	mvnhi	r2, #0
   1e3e0:	mvnhi	r3, #0
   1e3e4:	mov	sl, r2
   1e3e8:	mov	fp, r3
   1e3ec:	mul	r0, r1, r3
   1e3f0:	strd	r2, [sp, #16]
   1e3f4:	umull	r2, r3, r1, r2
   1e3f8:	mla	r0, ip, sl, r0
   1e3fc:	strd	r2, [sp, #8]
   1e400:	ldrd	r2, [sp]
   1e404:	cmp	fp, r3
   1e408:	ldr	r3, [sp, #12]
   1e40c:	cmpeq	sl, r2
   1e410:	add	r3, r0, r3
   1e414:	str	r3, [sp, #12]
   1e418:	mvnhi	sl, #0
   1e41c:	mvnhi	fp, #0
   1e420:	ldrdls	sl, [sp, #8]
   1e424:	ldrd	r2, [sp]
   1e428:	mul	r0, r1, fp
   1e42c:	cmp	r7, r3
   1e430:	mla	lr, ip, sl, r0
   1e434:	cmpeq	r6, r2
   1e438:	ldrd	r6, [sp]
   1e43c:	umull	r2, r3, r1, sl
   1e440:	ldrd	r0, [sp, #16]
   1e444:	movhi	ip, #1
   1e448:	movls	ip, #0
   1e44c:	cmp	r1, r7
   1e450:	cmpeq	r0, r6
   1e454:	orrhi	ip, ip, #1
   1e458:	cmp	r7, fp
   1e45c:	cmpeq	r6, sl
   1e460:	mvncc	r2, #0
   1e464:	add	r3, lr, r3
   1e468:	movcc	r3, r2
   1e46c:	cmp	r7, fp
   1e470:	cmpeq	r6, sl
   1e474:	mov	r7, r3
   1e478:	mov	r6, r2
   1e47c:	movcs	lr, ip
   1e480:	orrcc	lr, ip, #1
   1e484:	b	1e370 <__assert_fail@plt+0xc9d0>
   1e488:	ldrd	sl, [sp]
   1e48c:	umull	r2, r3, r1, r6
   1e490:	mul	r0, r1, r7
   1e494:	cmp	r7, fp
   1e498:	cmpeq	r6, sl
   1e49c:	mvnhi	r2, #0
   1e4a0:	mla	r0, ip, r6, r0
   1e4a4:	umull	sl, fp, r1, r2
   1e4a8:	add	r3, r0, r3
   1e4ac:	mvnhi	r3, #0
   1e4b0:	strd	sl, [sp, #8]
   1e4b4:	mul	r0, r1, r3
   1e4b8:	ldrd	sl, [sp]
   1e4bc:	mla	r0, ip, r2, r0
   1e4c0:	ldr	lr, [sp, #12]
   1e4c4:	cmp	r3, fp
   1e4c8:	add	r0, r0, lr
   1e4cc:	cmpeq	r2, sl
   1e4d0:	str	r0, [sp, #12]
   1e4d4:	bls	1e4ec <__assert_fail@plt+0xcb4c>
   1e4d8:	mvn	sl, #0
   1e4dc:	mvn	fp, #0
   1e4e0:	strd	sl, [sp, #8]
   1e4e4:	ldr	r0, [sp, #12]
   1e4e8:	ldrd	sl, [sp]
   1e4ec:	cmp	r7, fp
   1e4f0:	cmpeq	r6, sl
   1e4f4:	mul	r0, r1, r0
   1e4f8:	ldrd	r6, [sp, #8]
   1e4fc:	mla	lr, ip, r6, r0
   1e500:	mov	r0, r6
   1e504:	movhi	r0, #1
   1e508:	movls	r0, #0
   1e50c:	cmp	r3, fp
   1e510:	cmpeq	r2, sl
   1e514:	ldrd	r2, [sp, #8]
   1e518:	umull	r6, r7, r1, r6
   1e51c:	orrhi	r0, r0, #1
   1e520:	cmp	fp, r3
   1e524:	cmpeq	sl, r2
   1e528:	add	r7, lr, r7
   1e52c:	bcc	1ed54 <__assert_fail@plt+0xd3b4>
   1e530:	mov	sl, r6
   1e534:	mov	fp, r7
   1e538:	strd	r6, [sp, #16]
   1e53c:	mul	r3, r1, fp
   1e540:	umull	r6, r7, r1, sl
   1e544:	mla	r3, ip, sl, r3
   1e548:	str	r3, [sp, #36]	; 0x24
   1e54c:	ldrd	r2, [sp]
   1e550:	mov	sl, r2
   1e554:	mov	fp, r3
   1e558:	strd	r2, [sp, #24]
   1e55c:	ldrd	r2, [sp, #8]
   1e560:	cmp	fp, r3
   1e564:	cmpeq	sl, r2
   1e568:	ldrd	r2, [sp, #24]
   1e56c:	ldrd	sl, [sp, #16]
   1e570:	movcs	lr, r0
   1e574:	orrcc	lr, r0, #1
   1e578:	cmp	fp, r3
   1e57c:	cmpeq	sl, r2
   1e580:	mvnhi	r6, #0
   1e584:	ldr	r3, [sp, #36]	; 0x24
   1e588:	umull	sl, fp, r1, r6
   1e58c:	add	r7, r3, r7
   1e590:	mvnhi	r7, #0
   1e594:	strd	sl, [sp, #8]
   1e598:	mul	r3, r1, r7
   1e59c:	ldrd	sl, [sp, #16]
   1e5a0:	mla	r0, ip, r6, r3
   1e5a4:	ldrd	r2, [sp]
   1e5a8:	cmp	fp, r3
   1e5ac:	cmpeq	sl, r2
   1e5b0:	orrhi	lr, lr, #1
   1e5b4:	cmp	r7, r3
   1e5b8:	ldr	r3, [sp, #12]
   1e5bc:	cmpeq	r6, r2
   1e5c0:	add	r3, r0, r3
   1e5c4:	str	r3, [sp, #12]
   1e5c8:	mvnhi	r2, #0
   1e5cc:	mvnhi	r3, #0
   1e5d0:	ldrdls	r2, [sp, #8]
   1e5d4:	mul	r0, r1, r3
   1e5d8:	ldrd	sl, [sp]
   1e5dc:	str	r0, [sp, #8]
   1e5e0:	cmp	r7, fp
   1e5e4:	cmpeq	r6, sl
   1e5e8:	ldr	r6, [sp, #8]
   1e5ec:	umull	r0, r1, r1, r2
   1e5f0:	mla	ip, ip, r2, r6
   1e5f4:	orrhi	lr, lr, #1
   1e5f8:	cmp	r3, fp
   1e5fc:	cmpeq	r2, sl
   1e600:	mvnhi	r0, #0
   1e604:	add	r1, ip, r1
   1e608:	movhi	r1, r0
   1e60c:	cmp	r3, fp
   1e610:	cmpeq	r2, sl
   1e614:	mov	r6, r0
   1e618:	mov	r7, r1
   1e61c:	orrhi	lr, lr, #1
   1e620:	b	1e370 <__assert_fail@plt+0xc9d0>
   1e624:	ldr	r3, [pc, #1884]	; 1ed88 <__assert_fail@plt+0xd3e8>
   1e628:	mvn	r2, #0
   1e62c:	cmp	r7, r3
   1e630:	cmpeq	r6, r2
   1e634:	bhi	1ec6c <__assert_fail@plt+0xd2cc>
   1e638:	lsl	r3, r7, #10
   1e63c:	orr	r3, r3, r6, lsr #22
   1e640:	lsl	r2, r6, #10
   1e644:	mov	r6, r2
   1e648:	mov	r7, r3
   1e64c:	mov	lr, #0
   1e650:	b	1e370 <__assert_fail@plt+0xc9d0>
   1e654:	ldrd	sl, [sp]
   1e658:	umull	r2, r3, r1, r6
   1e65c:	mul	r0, r1, r7
   1e660:	cmp	r7, fp
   1e664:	cmpeq	r6, sl
   1e668:	mvnhi	r2, #0
   1e66c:	mla	r0, ip, r6, r0
   1e670:	umull	sl, fp, r1, r2
   1e674:	add	r3, r0, r3
   1e678:	mvnhi	r3, #0
   1e67c:	strd	sl, [sp, #8]
   1e680:	mul	r0, r1, r3
   1e684:	ldrd	sl, [sp]
   1e688:	mla	r0, ip, r2, r0
   1e68c:	ldr	lr, [sp, #12]
   1e690:	cmp	fp, r3
   1e694:	add	r0, r0, lr
   1e698:	cmpeq	sl, r2
   1e69c:	str	r0, [sp, #12]
   1e6a0:	bcs	1e6b8 <__assert_fail@plt+0xcd18>
   1e6a4:	mvn	sl, #0
   1e6a8:	mvn	fp, #0
   1e6ac:	strd	sl, [sp, #8]
   1e6b0:	ldr	r0, [sp, #12]
   1e6b4:	ldrd	sl, [sp]
   1e6b8:	cmp	r7, fp
   1e6bc:	cmpeq	r6, sl
   1e6c0:	mul	r0, r1, r0
   1e6c4:	ldrd	r6, [sp, #8]
   1e6c8:	mla	lr, ip, r6, r0
   1e6cc:	mov	r0, r6
   1e6d0:	movhi	r0, #1
   1e6d4:	movls	r0, #0
   1e6d8:	cmp	fp, r3
   1e6dc:	cmpeq	sl, r2
   1e6e0:	ldrd	r2, [sp, #8]
   1e6e4:	umull	r6, r7, r1, r6
   1e6e8:	orrcc	r0, r0, #1
   1e6ec:	cmp	fp, r3
   1e6f0:	cmpeq	sl, r2
   1e6f4:	add	r7, lr, r7
   1e6f8:	bcc	1ed28 <__assert_fail@plt+0xd388>
   1e6fc:	strd	r6, [sp, #16]
   1e700:	mov	r6, r2
   1e704:	mov	r7, r3
   1e708:	ldr	r3, [sp, #20]
   1e70c:	ldr	r2, [sp, #16]
   1e710:	mul	r3, r1, r3
   1e714:	umull	sl, fp, r1, r2
   1e718:	mla	lr, ip, r2, r3
   1e71c:	ldrd	r2, [sp]
   1e720:	cmp	r3, r7
   1e724:	cmpeq	r2, r6
   1e728:	ldrd	r6, [sp, #16]
   1e72c:	orrcc	r0, r0, #1
   1e730:	cmp	r3, r7
   1e734:	cmpeq	r2, r6
   1e738:	add	r3, lr, fp
   1e73c:	mov	fp, r3
   1e740:	bcc	1ed10 <__assert_fail@plt+0xd370>
   1e744:	strd	sl, [sp, #24]
   1e748:	umull	r2, r3, r1, sl
   1e74c:	mul	lr, r1, fp
   1e750:	strd	r2, [sp, #8]
   1e754:	mov	r6, sl
   1e758:	ldrd	r2, [sp, #16]
   1e75c:	mov	r7, fp
   1e760:	mla	lr, ip, sl, lr
   1e764:	ldrd	sl, [sp]
   1e768:	cmp	fp, r3
   1e76c:	cmpeq	sl, r2
   1e770:	ldr	r2, [sp, #12]
   1e774:	orrcc	r0, r0, #1
   1e778:	cmp	fp, r7
   1e77c:	add	r3, lr, r2
   1e780:	cmpeq	sl, r6
   1e784:	str	r3, [sp, #12]
   1e788:	bcc	1ed3c <__assert_fail@plt+0xd39c>
   1e78c:	ldrd	r2, [sp, #8]
   1e790:	mov	sl, r2
   1e794:	mov	fp, r3
   1e798:	mul	r3, r1, fp
   1e79c:	umull	r6, r7, r1, sl
   1e7a0:	mla	r3, ip, sl, r3
   1e7a4:	ldrd	sl, [sp]
   1e7a8:	str	r3, [sp, #16]
   1e7ac:	ldrd	r2, [sp, #24]
   1e7b0:	cmp	fp, r3
   1e7b4:	cmpeq	sl, r2
   1e7b8:	mov	r3, fp
   1e7bc:	mov	r2, sl
   1e7c0:	ldrd	sl, [sp, #8]
   1e7c4:	movcs	lr, r0
   1e7c8:	orrcc	lr, r0, #1
   1e7cc:	cmp	r3, fp
   1e7d0:	cmpeq	r2, sl
   1e7d4:	mvncc	r6, #0
   1e7d8:	ldr	r3, [sp, #16]
   1e7dc:	umull	sl, fp, r1, r6
   1e7e0:	add	r7, r3, r7
   1e7e4:	mvncc	r7, #0
   1e7e8:	strd	sl, [sp, #16]
   1e7ec:	mul	r3, r1, r7
   1e7f0:	ldrd	sl, [sp, #8]
   1e7f4:	mla	r0, ip, r6, r3
   1e7f8:	ldrd	r2, [sp]
   1e7fc:	cmp	r3, fp
   1e800:	cmpeq	r2, sl
   1e804:	orrcc	lr, lr, #1
   1e808:	cmp	r3, r7
   1e80c:	ldr	r3, [sp, #20]
   1e810:	cmpeq	r2, r6
   1e814:	add	r3, r0, r3
   1e818:	str	r3, [sp, #20]
   1e81c:	mvncc	r2, #0
   1e820:	mvncc	r3, #0
   1e824:	ldrdcs	r2, [sp, #16]
   1e828:	mul	r0, r1, r3
   1e82c:	ldrd	sl, [sp]
   1e830:	str	r0, [sp, #8]
   1e834:	umull	r0, r1, r1, r2
   1e838:	cmp	fp, r7
   1e83c:	cmpeq	sl, r6
   1e840:	ldr	r6, [sp, #8]
   1e844:	mla	ip, ip, r2, r6
   1e848:	orrcc	lr, lr, #1
   1e84c:	cmp	fp, r3
   1e850:	cmpeq	sl, r2
   1e854:	mvncc	r0, #0
   1e858:	add	r1, ip, r1
   1e85c:	movcc	r1, r0
   1e860:	cmp	fp, r3
   1e864:	cmpeq	sl, r2
   1e868:	mov	r6, r0
   1e86c:	mov	r7, r1
   1e870:	orrcc	lr, lr, #1
   1e874:	b	1e370 <__assert_fail@plt+0xc9d0>
   1e878:	ldrd	sl, [sp]
   1e87c:	umull	r2, r3, r1, r6
   1e880:	mul	r0, r1, r7
   1e884:	cmp	r7, fp
   1e888:	cmpeq	r6, sl
   1e88c:	mvnhi	r2, #0
   1e890:	mla	r0, ip, r6, r0
   1e894:	umull	sl, fp, r1, r2
   1e898:	add	r3, r0, r3
   1e89c:	mvnhi	r3, #0
   1e8a0:	strd	sl, [sp, #8]
   1e8a4:	mul	r0, r1, r3
   1e8a8:	ldrd	sl, [sp]
   1e8ac:	mla	r0, ip, r2, r0
   1e8b0:	ldr	lr, [sp, #12]
   1e8b4:	cmp	fp, r3
   1e8b8:	add	r0, r0, lr
   1e8bc:	cmpeq	sl, r2
   1e8c0:	str	r0, [sp, #12]
   1e8c4:	bcs	1e8dc <__assert_fail@plt+0xcf3c>
   1e8c8:	mvn	sl, #0
   1e8cc:	mvn	fp, #0
   1e8d0:	strd	sl, [sp, #8]
   1e8d4:	ldr	r0, [sp, #12]
   1e8d8:	ldrd	sl, [sp]
   1e8dc:	cmp	r7, fp
   1e8e0:	cmpeq	r6, sl
   1e8e4:	ldrd	r6, [sp, #8]
   1e8e8:	mul	r0, r1, r0
   1e8ec:	mov	lr, r6
   1e8f0:	movhi	lr, #1
   1e8f4:	movls	lr, #0
   1e8f8:	cmp	fp, r3
   1e8fc:	mla	r0, ip, r6, r0
   1e900:	cmpeq	sl, r2
   1e904:	umull	r6, r7, r1, r6
   1e908:	ldrd	r2, [sp, #8]
   1e90c:	orrcc	lr, lr, #1
   1e910:	add	r7, r0, r7
   1e914:	cmp	fp, r3
   1e918:	cmpeq	sl, r2
   1e91c:	movcs	r3, r7
   1e920:	mvncc	r3, #0
   1e924:	movcs	r2, r6
   1e928:	mul	r0, r1, r3
   1e92c:	mvncc	r2, #0
   1e930:	str	r0, [sp, #16]
   1e934:	ldrd	r6, [sp, #8]
   1e938:	umull	r0, r1, r1, r2
   1e93c:	cmp	fp, r7
   1e940:	cmpeq	sl, r6
   1e944:	ldr	r6, [sp, #16]
   1e948:	b	1e844 <__assert_fail@plt+0xcea4>
   1e94c:	ldrd	sl, [sp]
   1e950:	umull	r2, r3, r1, r6
   1e954:	mul	r0, r1, r7
   1e958:	cmp	r7, fp
   1e95c:	cmpeq	r6, sl
   1e960:	mvnhi	r2, #0
   1e964:	mla	r0, ip, r6, r0
   1e968:	umull	sl, fp, r1, r2
   1e96c:	add	r3, r0, r3
   1e970:	mvnhi	r3, #0
   1e974:	strd	sl, [sp, #8]
   1e978:	mul	r0, r1, r3
   1e97c:	ldrd	sl, [sp]
   1e980:	mla	r0, ip, r2, r0
   1e984:	ldr	lr, [sp, #12]
   1e988:	cmp	fp, r3
   1e98c:	add	r0, r0, lr
   1e990:	cmpeq	sl, r2
   1e994:	str	r0, [sp, #12]
   1e998:	bcs	1e9b0 <__assert_fail@plt+0xd010>
   1e99c:	mvn	sl, #0
   1e9a0:	mvn	fp, #0
   1e9a4:	strd	sl, [sp, #8]
   1e9a8:	ldr	r0, [sp, #12]
   1e9ac:	ldrd	sl, [sp]
   1e9b0:	cmp	fp, r3
   1e9b4:	cmpeq	sl, r2
   1e9b8:	mul	r0, r1, r0
   1e9bc:	ldr	r2, [sp, #8]
   1e9c0:	movcc	lr, #1
   1e9c4:	movcs	lr, #0
   1e9c8:	cmp	r7, fp
   1e9cc:	cmpeq	r6, sl
   1e9d0:	ldrd	r6, [sp, #8]
   1e9d4:	mla	r0, ip, r2, r0
   1e9d8:	umull	r2, r3, r1, r2
   1e9dc:	orrhi	lr, lr, #1
   1e9e0:	cmp	r7, fp
   1e9e4:	cmpeq	r6, sl
   1e9e8:	add	r3, r0, r3
   1e9ec:	mvnhi	r2, #0
   1e9f0:	mvnhi	r3, #0
   1e9f4:	strd	r2, [sp, #16]
   1e9f8:	ldr	r3, [sp, #20]
   1e9fc:	ldr	r2, [sp, #16]
   1ea00:	mul	r3, r1, r3
   1ea04:	umull	sl, fp, r1, r2
   1ea08:	mla	r0, ip, r2, r3
   1ea0c:	ldrd	r2, [sp]
   1ea10:	cmp	r7, r3
   1ea14:	cmpeq	r6, r2
   1ea18:	ldrd	r6, [sp, #16]
   1ea1c:	orrhi	lr, lr, #1
   1ea20:	cmp	r7, r3
   1ea24:	cmpeq	r6, r2
   1ea28:	add	r3, r0, fp
   1ea2c:	mvnhi	r3, #0
   1ea30:	movls	r2, sl
   1ea34:	mul	r6, r1, r3
   1ea38:	mvnhi	r2, #0
   1ea3c:	str	r6, [sp, #8]
   1ea40:	ldrd	sl, [sp]
   1ea44:	ldrd	r6, [sp, #16]
   1ea48:	b	1e5e0 <__assert_fail@plt+0xcc40>
   1ea4c:	ldrd	sl, [sp]
   1ea50:	cmp	r7, fp
   1ea54:	cmpeq	r6, sl
   1ea58:	bhi	1ed00 <__assert_fail@plt+0xd360>
   1ea5c:	mul	r0, r1, r7
   1ea60:	umull	r2, r3, r1, r6
   1ea64:	mla	r6, ip, r6, r0
   1ea68:	add	r3, r6, r3
   1ea6c:	cmp	fp, r3
   1ea70:	cmpeq	sl, r2
   1ea74:	bcc	1ed00 <__assert_fail@plt+0xd360>
   1ea78:	mul	r3, r1, r3
   1ea7c:	umull	r6, r7, r1, r2
   1ea80:	mla	r2, ip, r2, r3
   1ea84:	mov	lr, #0
   1ea88:	add	r7, r2, r7
   1ea8c:	b	1e370 <__assert_fail@plt+0xc9d0>
   1ea90:	ldr	r3, [pc, #756]	; 1ed8c <__assert_fail@plt+0xd3ec>
   1ea94:	mvn	r2, #0
   1ea98:	cmp	r7, r3
   1ea9c:	cmpeq	r6, r2
   1eaa0:	bhi	1ec6c <__assert_fail@plt+0xd2cc>
   1eaa4:	lsl	r3, r7, #9
   1eaa8:	orr	r3, r3, r6, lsr #23
   1eaac:	lsl	r2, r6, #9
   1eab0:	mov	r6, r2
   1eab4:	mov	r7, r3
   1eab8:	mov	lr, #0
   1eabc:	b	1e370 <__assert_fail@plt+0xc9d0>
   1eac0:	ldrd	sl, [sp]
   1eac4:	umull	r2, r3, r1, r6
   1eac8:	mul	r0, r1, r7
   1eacc:	cmp	r7, fp
   1ead0:	cmpeq	r6, sl
   1ead4:	mvnhi	r2, #0
   1ead8:	mla	r0, ip, r6, r0
   1eadc:	umull	sl, fp, r1, r2
   1eae0:	add	r3, r0, r3
   1eae4:	mvnhi	r3, #0
   1eae8:	strd	sl, [sp, #8]
   1eaec:	mul	r0, r1, r3
   1eaf0:	ldrd	sl, [sp]
   1eaf4:	mla	r0, ip, r2, r0
   1eaf8:	ldr	lr, [sp, #12]
   1eafc:	cmp	fp, r3
   1eb00:	add	r0, r0, lr
   1eb04:	cmpeq	sl, r2
   1eb08:	str	r0, [sp, #12]
   1eb0c:	bcs	1eb24 <__assert_fail@plt+0xd184>
   1eb10:	mvn	sl, #0
   1eb14:	mvn	fp, #0
   1eb18:	strd	sl, [sp, #8]
   1eb1c:	ldr	r0, [sp, #12]
   1eb20:	ldrd	sl, [sp]
   1eb24:	cmp	r7, fp
   1eb28:	cmpeq	r6, sl
   1eb2c:	mul	r0, r1, r0
   1eb30:	ldrd	r6, [sp, #8]
   1eb34:	mla	lr, ip, r6, r0
   1eb38:	mov	r0, r6
   1eb3c:	movhi	r0, #1
   1eb40:	movls	r0, #0
   1eb44:	cmp	fp, r3
   1eb48:	cmpeq	sl, r2
   1eb4c:	ldrd	r2, [sp, #8]
   1eb50:	umull	r6, r7, r1, r6
   1eb54:	orrcc	r0, r0, #1
   1eb58:	cmp	fp, r3
   1eb5c:	cmpeq	sl, r2
   1eb60:	add	r7, lr, r7
   1eb64:	bcc	1ecec <__assert_fail@plt+0xd34c>
   1eb68:	strd	r6, [sp, #16]
   1eb6c:	mov	r6, r2
   1eb70:	mov	r7, r3
   1eb74:	ldr	r3, [sp, #20]
   1eb78:	ldr	r2, [sp, #16]
   1eb7c:	mul	r3, r1, r3
   1eb80:	umull	sl, fp, r1, r2
   1eb84:	mla	lr, ip, r2, r3
   1eb88:	ldrd	r2, [sp]
   1eb8c:	cmp	r3, r7
   1eb90:	cmpeq	r2, r6
   1eb94:	ldrd	r6, [sp, #16]
   1eb98:	orrcc	r0, r0, #1
   1eb9c:	cmp	r3, r7
   1eba0:	cmpeq	r2, r6
   1eba4:	mvncc	r2, #0
   1eba8:	movcs	r6, sl
   1ebac:	movcc	r6, r2
   1ebb0:	add	r3, lr, fp
   1ebb4:	mvncc	r3, #0
   1ebb8:	movcs	r7, r3
   1ebbc:	movcc	r7, r3
   1ebc0:	umull	r2, r3, r1, r6
   1ebc4:	mul	lr, r1, r7
   1ebc8:	strd	r2, [sp, #8]
   1ebcc:	mla	r3, ip, r6, lr
   1ebd0:	ldrd	sl, [sp]
   1ebd4:	str	r3, [sp, #24]
   1ebd8:	ldrd	r2, [sp, #16]
   1ebdc:	cmp	fp, r3
   1ebe0:	cmpeq	sl, r2
   1ebe4:	ldr	r3, [sp, #24]
   1ebe8:	ldr	r2, [sp, #12]
   1ebec:	movcs	lr, r0
   1ebf0:	orrcc	lr, r0, #1
   1ebf4:	cmp	fp, r7
   1ebf8:	add	r3, r3, r2
   1ebfc:	cmpeq	sl, r6
   1ec00:	str	r3, [sp, #12]
   1ec04:	mvncc	r3, #0
   1ec08:	mvncc	r2, #0
   1ec0c:	strdcc	r2, [sp, #8]
   1ec10:	ldrcc	r3, [sp, #12]
   1ec14:	ldr	r2, [sp, #8]
   1ec18:	mul	r3, r1, r3
   1ec1c:	umull	sl, fp, r1, r2
   1ec20:	mla	r0, ip, r2, r3
   1ec24:	ldrd	r2, [sp]
   1ec28:	cmp	r3, r7
   1ec2c:	cmpeq	r2, r6
   1ec30:	ldrd	r6, [sp, #8]
   1ec34:	orrcc	lr, lr, #1
   1ec38:	cmp	r3, r7
   1ec3c:	cmpeq	r2, r6
   1ec40:	add	r3, r0, fp
   1ec44:	mvncc	r3, #0
   1ec48:	movcs	r2, sl
   1ec4c:	mul	r6, r1, r3
   1ec50:	mvncc	r2, #0
   1ec54:	str	r6, [sp, #16]
   1ec58:	ldrd	sl, [sp]
   1ec5c:	b	1e934 <__assert_fail@plt+0xcf94>
   1ec60:	strd	r6, [r8]
   1ec64:	orr	r4, r4, #2
   1ec68:	b	1e094 <__assert_fail@plt+0xc6f4>
   1ec6c:	mvn	r6, #0
   1ec70:	mvn	r7, #0
   1ec74:	mov	lr, #1
   1ec78:	b	1e370 <__assert_fail@plt+0xc9d0>
   1ec7c:	add	r3, pc, #252	; 0xfc
   1ec80:	ldrd	r2, [r3]
   1ec84:	mov	r1, #1000	; 0x3e8
   1ec88:	mov	ip, #0
   1ec8c:	strd	r2, [sp]
   1ec90:	mov	r3, #2
   1ec94:	str	r3, [sp, #32]
   1ec98:	b	1e270 <__assert_fail@plt+0xc8d0>
   1ec9c:	ldrb	r3, [r9, #2]
   1eca0:	mvn	r2, #0
   1eca4:	mov	r1, #1024	; 0x400
   1eca8:	cmp	r3, #66	; 0x42
   1ecac:	ldr	r3, [pc, #212]	; 1ed88 <__assert_fail@plt+0xd3e8>
   1ecb0:	mov	ip, #0
   1ecb4:	strd	r2, [sp]
   1ecb8:	moveq	r3, #3
   1ecbc:	streq	r3, [sp, #32]
   1ecc0:	movne	r3, #1
   1ecc4:	strne	r3, [sp, #32]
   1ecc8:	b	1e270 <__assert_fail@plt+0xc8d0>
   1eccc:	ldr	r3, [pc, #180]	; 1ed88 <__assert_fail@plt+0xd3e8>
   1ecd0:	mvn	r2, #0
   1ecd4:	mov	ip, r0
   1ecd8:	strd	r2, [sp]
   1ecdc:	mov	r3, #1
   1ece0:	mov	r1, #1024	; 0x400
   1ece4:	str	r3, [sp, #32]
   1ece8:	b	1e270 <__assert_fail@plt+0xc8d0>
   1ecec:	mvn	r2, #0
   1ecf0:	mvn	r3, #0
   1ecf4:	ldrd	r6, [sp, #8]
   1ecf8:	strd	r2, [sp, #16]
   1ecfc:	b	1eb74 <__assert_fail@plt+0xd1d4>
   1ed00:	mov	lr, #1
   1ed04:	mvn	r6, #0
   1ed08:	mvn	r7, #0
   1ed0c:	b	1e370 <__assert_fail@plt+0xc9d0>
   1ed10:	mvn	r2, #0
   1ed14:	mvn	r3, #0
   1ed18:	mov	sl, r2
   1ed1c:	strd	r2, [sp, #24]
   1ed20:	mov	fp, r3
   1ed24:	b	1e748 <__assert_fail@plt+0xcda8>
   1ed28:	mvn	r2, #0
   1ed2c:	mvn	r3, #0
   1ed30:	ldrd	r6, [sp, #8]
   1ed34:	strd	r2, [sp, #16]
   1ed38:	b	1e708 <__assert_fail@plt+0xcd68>
   1ed3c:	mvn	r2, #0
   1ed40:	mvn	r3, #0
   1ed44:	mov	sl, r2
   1ed48:	strd	r2, [sp, #8]
   1ed4c:	mov	fp, r3
   1ed50:	b	1e798 <__assert_fail@plt+0xcdf8>
   1ed54:	mvn	r2, #0
   1ed58:	mvn	r3, #0
   1ed5c:	mov	sl, r2
   1ed60:	strd	r2, [sp, #16]
   1ed64:	mov	fp, r3
   1ed68:	b	1e53c <__assert_fail@plt+0xcb9c>
   1ed6c:	ldr	r3, [pc, #28]	; 1ed90 <__assert_fail@plt+0xd3f0>
   1ed70:	mov	r2, #84	; 0x54
   1ed74:	ldr	r1, [pc, #24]	; 1ed94 <__assert_fail@plt+0xd3f4>
   1ed78:	ldr	r0, [pc, #24]	; 1ed98 <__assert_fail@plt+0xd3f8>
   1ed7c:	bl	119a0 <__assert_fail@plt>
   1ed80:	blmi	ff1c8d44 <optarg@@GLIBC_2.4+0xff183b24>
   1ed84:	subeq	r8, r1, r7, lsr r9
   1ed88:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   1ed8c:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   1ed90:	andeq	r3, r3, r4, asr #27
   1ed94:	ldrdeq	r3, [r3], -r0
   1ed98:	ldrdeq	r3, [r3], -ip
   1ed9c:	cmp	r1, #0
   1eda0:	cmpne	r0, #0
   1eda4:	moveq	r1, #1
   1eda8:	moveq	r0, r1
   1edac:	umull	r2, r3, r0, r1
   1edb0:	adds	r3, r3, #0
   1edb4:	movne	r3, #1
   1edb8:	cmp	r2, #0
   1edbc:	blt	1edcc <__assert_fail@plt+0xd42c>
   1edc0:	cmp	r3, #0
   1edc4:	bne	1edcc <__assert_fail@plt+0xd42c>
   1edc8:	b	11508 <calloc@plt>
   1edcc:	push	{r4, lr}
   1edd0:	bl	117d8 <__errno_location@plt>
   1edd4:	mov	r3, #12
   1edd8:	str	r3, [r0]
   1eddc:	mov	r0, #0
   1ede0:	pop	{r4, pc}
   1ede4:	push	{r1, r2, r3}
   1ede8:	push	{r4, r5, r6, r7, lr}
   1edec:	sub	sp, sp, #8
   1edf0:	add	r3, sp, #32
   1edf4:	ldr	r1, [sp, #28]
   1edf8:	str	r3, [sp, #4]
   1edfc:	cmp	r1, #0
   1ee00:	beq	1ee98 <__assert_fail@plt+0xd4f8>
   1ee04:	ldr	r2, [pc, #412]	; 1efa8 <__assert_fail@plt+0xd608>
   1ee08:	mov	r5, r0
   1ee0c:	cmp	r1, r2
   1ee10:	bne	1ee5c <__assert_fail@plt+0xd4bc>
   1ee14:	ldr	r6, [pc, #400]	; 1efac <__assert_fail@plt+0xd60c>
   1ee18:	ldr	r7, [r3]
   1ee1c:	add	r2, sp, #36	; 0x24
   1ee20:	ldr	r3, [r6]
   1ee24:	str	r2, [sp, #4]
   1ee28:	cmp	r3, #0
   1ee2c:	mov	r2, r7
   1ee30:	blt	1ef5c <__assert_fail@plt+0xd5bc>
   1ee34:	bl	1188c <fcntl64@plt>
   1ee38:	subs	r4, r0, #0
   1ee3c:	blt	1eee0 <__assert_fail@plt+0xd540>
   1ee40:	mov	r3, #1
   1ee44:	str	r3, [r6]
   1ee48:	mov	r0, r4
   1ee4c:	add	sp, sp, #8
   1ee50:	pop	{r4, r5, r6, r7, lr}
   1ee54:	add	sp, sp, #12
   1ee58:	bx	lr
   1ee5c:	cmp	r1, #11
   1ee60:	beq	1ee88 <__assert_fail@plt+0xd4e8>
   1ee64:	bgt	1eea8 <__assert_fail@plt+0xd508>
   1ee68:	cmp	r1, #3
   1ee6c:	beq	1ee88 <__assert_fail@plt+0xd4e8>
   1ee70:	ble	1ef9c <__assert_fail@plt+0xd5fc>
   1ee74:	cmp	r1, #8
   1ee78:	beq	1eec8 <__assert_fail@plt+0xd528>
   1ee7c:	ble	1eec8 <__assert_fail@plt+0xd528>
   1ee80:	cmp	r1, #9
   1ee84:	bne	1eec8 <__assert_fail@plt+0xd528>
   1ee88:	mov	r0, r5
   1ee8c:	bl	1188c <fcntl64@plt>
   1ee90:	mov	r4, r0
   1ee94:	b	1ee48 <__assert_fail@plt+0xd4a8>
   1ee98:	ldr	r2, [sp, #32]
   1ee9c:	bl	1188c <fcntl64@plt>
   1eea0:	mov	r4, r0
   1eea4:	b	1ee48 <__assert_fail@plt+0xd4a8>
   1eea8:	ldr	r3, [pc, #256]	; 1efb0 <__assert_fail@plt+0xd610>
   1eeac:	cmp	r1, r3
   1eeb0:	bgt	1ef7c <__assert_fail@plt+0xd5dc>
   1eeb4:	cmp	r1, r2
   1eeb8:	bge	1eec8 <__assert_fail@plt+0xd528>
   1eebc:	sub	r3, r3, #6
   1eec0:	cmp	r1, r3
   1eec4:	beq	1ee88 <__assert_fail@plt+0xd4e8>
   1eec8:	ldr	r3, [sp, #4]
   1eecc:	mov	r0, r5
   1eed0:	ldr	r2, [r3]
   1eed4:	bl	1188c <fcntl64@plt>
   1eed8:	mov	r4, r0
   1eedc:	b	1ee48 <__assert_fail@plt+0xd4a8>
   1eee0:	bl	117d8 <__errno_location@plt>
   1eee4:	ldr	r3, [r0]
   1eee8:	cmp	r3, #22
   1eeec:	bne	1ee40 <__assert_fail@plt+0xd4a0>
   1eef0:	mov	r2, r7
   1eef4:	mov	r0, r5
   1eef8:	mov	r1, #0
   1eefc:	bl	1188c <fcntl64@plt>
   1ef00:	subs	r4, r0, #0
   1ef04:	blt	1ee48 <__assert_fail@plt+0xd4a8>
   1ef08:	mvn	r3, #0
   1ef0c:	str	r3, [r6]
   1ef10:	mov	r1, #1
   1ef14:	mov	r0, r4
   1ef18:	bl	1188c <fcntl64@plt>
   1ef1c:	subs	r2, r0, #0
   1ef20:	blt	1ef3c <__assert_fail@plt+0xd59c>
   1ef24:	orr	r2, r2, #1
   1ef28:	mov	r1, #2
   1ef2c:	mov	r0, r4
   1ef30:	bl	1188c <fcntl64@plt>
   1ef34:	cmn	r0, #1
   1ef38:	bne	1ee48 <__assert_fail@plt+0xd4a8>
   1ef3c:	bl	117d8 <__errno_location@plt>
   1ef40:	mov	r5, r0
   1ef44:	mov	r0, r4
   1ef48:	ldr	r6, [r5]
   1ef4c:	mvn	r4, #0
   1ef50:	bl	1197c <close@plt>
   1ef54:	str	r6, [r5]
   1ef58:	b	1ee48 <__assert_fail@plt+0xd4a8>
   1ef5c:	mov	r1, #0
   1ef60:	bl	1188c <fcntl64@plt>
   1ef64:	subs	r4, r0, #0
   1ef68:	blt	1ee48 <__assert_fail@plt+0xd4a8>
   1ef6c:	ldr	r3, [r6]
   1ef70:	cmn	r3, #1
   1ef74:	beq	1ef10 <__assert_fail@plt+0xd570>
   1ef78:	b	1ee48 <__assert_fail@plt+0xd4a8>
   1ef7c:	ldr	r3, [pc, #48]	; 1efb4 <__assert_fail@plt+0xd614>
   1ef80:	cmp	r1, r3
   1ef84:	beq	1eec8 <__assert_fail@plt+0xd528>
   1ef88:	blt	1ee88 <__assert_fail@plt+0xd4e8>
   1ef8c:	add	r3, r3, #1
   1ef90:	cmp	r1, r3
   1ef94:	bne	1eec8 <__assert_fail@plt+0xd528>
   1ef98:	b	1ee88 <__assert_fail@plt+0xd4e8>
   1ef9c:	cmp	r1, #1
   1efa0:	bne	1eec8 <__assert_fail@plt+0xd528>
   1efa4:	b	1ee88 <__assert_fail@plt+0xd4e8>
   1efa8:	andeq	r0, r0, r6, lsl #8
   1efac:	ldrdeq	r5, [r4], -r4
   1efb0:	andeq	r0, r0, r7, lsl #8
   1efb4:	andeq	r0, r0, r9, lsl #8
   1efb8:	push	{r4, lr}
   1efbc:	subs	r4, r0, #0
   1efc0:	sub	sp, sp, #8
   1efc4:	beq	1efe0 <__assert_fail@plt+0xd640>
   1efc8:	bl	11730 <__freading@plt>
   1efcc:	cmp	r0, #0
   1efd0:	beq	1efe0 <__assert_fail@plt+0xd640>
   1efd4:	ldr	r3, [r4]
   1efd8:	tst	r3, #256	; 0x100
   1efdc:	bne	1eff0 <__assert_fail@plt+0xd650>
   1efe0:	mov	r0, r4
   1efe4:	add	sp, sp, #8
   1efe8:	pop	{r4, lr}
   1efec:	b	11568 <fflush@plt>
   1eff0:	mov	r3, #1
   1eff4:	str	r3, [sp]
   1eff8:	mov	r2, #0
   1effc:	mov	r3, #0
   1f000:	mov	r0, r4
   1f004:	bl	1f070 <__assert_fail@plt+0xd6d0>
   1f008:	mov	r0, r4
   1f00c:	add	sp, sp, #8
   1f010:	pop	{r4, lr}
   1f014:	b	11568 <fflush@plt>
   1f018:	push	{r4, r5, lr}
   1f01c:	sub	sp, sp, #12
   1f020:	mov	r5, r0
   1f024:	bl	117d8 <__errno_location@plt>
   1f028:	mov	r2, #0
   1f02c:	mov	r4, r0
   1f030:	ldr	r3, [r0]
   1f034:	str	r2, [r4]
   1f038:	mov	r0, r5
   1f03c:	str	r3, [sp]
   1f040:	str	r3, [sp, #4]
   1f044:	bl	11598 <free@plt>
   1f048:	ldr	r3, [r4]
   1f04c:	add	r2, sp, #8
   1f050:	cmp	r3, #0
   1f054:	moveq	r3, #4
   1f058:	movne	r3, #0
   1f05c:	add	r3, r2, r3
   1f060:	ldr	r3, [r3, #-8]
   1f064:	str	r3, [r4]
   1f068:	add	sp, sp, #12
   1f06c:	pop	{r4, r5, pc}
   1f070:	push	{r4, r5, r6, r7, r8, lr}
   1f074:	sub	sp, sp, #8
   1f078:	ldmib	r0, {ip, lr}
   1f07c:	mov	r4, r0
   1f080:	ldr	r5, [sp, #32]
   1f084:	cmp	lr, ip
   1f088:	beq	1f0a0 <__assert_fail@plt+0xd700>
   1f08c:	str	r5, [sp, #32]
   1f090:	mov	r0, r4
   1f094:	add	sp, sp, #8
   1f098:	pop	{r4, r5, r6, r7, r8, lr}
   1f09c:	b	11880 <fseeko64@plt>
   1f0a0:	ldr	lr, [r0, #20]
   1f0a4:	ldr	ip, [r0, #16]
   1f0a8:	cmp	lr, ip
   1f0ac:	bne	1f08c <__assert_fail@plt+0xd6ec>
   1f0b0:	ldr	r8, [r0, #36]	; 0x24
   1f0b4:	cmp	r8, #0
   1f0b8:	bne	1f08c <__assert_fail@plt+0xd6ec>
   1f0bc:	mov	r6, r2
   1f0c0:	mov	r7, r3
   1f0c4:	bl	11844 <fileno@plt>
   1f0c8:	mov	r2, r6
   1f0cc:	mov	r3, r7
   1f0d0:	str	r5, [sp]
   1f0d4:	bl	11694 <lseek64@plt>
   1f0d8:	mvn	r3, #0
   1f0dc:	mvn	r2, #0
   1f0e0:	cmp	r1, r3
   1f0e4:	cmpeq	r0, r2
   1f0e8:	beq	1f108 <__assert_fail@plt+0xd768>
   1f0ec:	ldr	r3, [r4]
   1f0f0:	strd	r0, [r4, #80]	; 0x50
   1f0f4:	mov	r0, r8
   1f0f8:	bic	r3, r3, #16
   1f0fc:	str	r3, [r4]
   1f100:	add	sp, sp, #8
   1f104:	pop	{r4, r5, r6, r7, r8, pc}
   1f108:	mvn	r0, #0
   1f10c:	b	1f100 <__assert_fail@plt+0xd760>
   1f110:	cmp	r0, #0
   1f114:	moveq	r0, #1
   1f118:	cmp	r0, #0
   1f11c:	blt	1f124 <__assert_fail@plt+0xd784>
   1f120:	b	1170c <malloc@plt>
   1f124:	push	{r4, lr}
   1f128:	bl	117d8 <__errno_location@plt>
   1f12c:	mov	r3, #12
   1f130:	str	r3, [r0]
   1f134:	mov	r0, #0
   1f138:	pop	{r4, pc}
   1f13c:	push	{r4, r5, r6, r7, lr}
   1f140:	subs	r6, r0, #0
   1f144:	sub	sp, sp, #12
   1f148:	addeq	r6, sp, #4
   1f14c:	mov	r0, r6
   1f150:	mov	r5, r2
   1f154:	mov	r7, r1
   1f158:	bl	116c4 <mbrtowc@plt>
   1f15c:	cmp	r5, #0
   1f160:	cmnne	r0, #3
   1f164:	mov	r4, r0
   1f168:	bls	1f184 <__assert_fail@plt+0xd7e4>
   1f16c:	mov	r0, #0
   1f170:	bl	31a4c <__assert_fail@plt+0x200ac>
   1f174:	cmp	r0, #0
   1f178:	moveq	r4, #1
   1f17c:	ldrbeq	r3, [r7]
   1f180:	streq	r3, [r6]
   1f184:	mov	r0, r4
   1f188:	add	sp, sp, #12
   1f18c:	pop	{r4, r5, r6, r7, pc}
   1f190:	cmp	r0, #0
   1f194:	beq	1f1b8 <__assert_fail@plt+0xd818>
   1f198:	cmp	r1, #0
   1f19c:	push	{lr}		; (str lr, [sp, #-4]!)
   1f1a0:	sub	sp, sp, #12
   1f1a4:	beq	1f1c0 <__assert_fail@plt+0xd820>
   1f1a8:	blt	1f1d8 <__assert_fail@plt+0xd838>
   1f1ac:	add	sp, sp, #12
   1f1b0:	pop	{lr}		; (ldr lr, [sp], #4)
   1f1b4:	b	11634 <realloc@plt>
   1f1b8:	mov	r0, r1
   1f1bc:	b	1f110 <__assert_fail@plt+0xd770>
   1f1c0:	str	r1, [sp, #4]
   1f1c4:	bl	1f018 <__assert_fail@plt+0xd678>
   1f1c8:	ldr	r3, [sp, #4]
   1f1cc:	mov	r0, r3
   1f1d0:	add	sp, sp, #12
   1f1d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f1d8:	bl	117d8 <__errno_location@plt>
   1f1dc:	mov	r2, #12
   1f1e0:	mov	r3, #0
   1f1e4:	str	r2, [r0]
   1f1e8:	b	1f1cc <__assert_fail@plt+0xd82c>
   1f1ec:	push	{r4, r5, r6, lr}
   1f1f0:	subs	r4, r2, #0
   1f1f4:	mov	r6, r0
   1f1f8:	mov	r5, r1
   1f1fc:	beq	1f228 <__assert_fail@plt+0xd888>
   1f200:	mov	r1, r4
   1f204:	mvn	r0, #0
   1f208:	bl	31c94 <__assert_fail@plt+0x202f4>
   1f20c:	cmp	r0, r5
   1f210:	bcs	1f228 <__assert_fail@plt+0xd888>
   1f214:	bl	117d8 <__errno_location@plt>
   1f218:	mov	r3, #12
   1f21c:	str	r3, [r0]
   1f220:	mov	r0, #0
   1f224:	pop	{r4, r5, r6, pc}
   1f228:	mul	r1, r5, r4
   1f22c:	mov	r0, r6
   1f230:	pop	{r4, r5, r6, lr}
   1f234:	b	1f190 <__assert_fail@plt+0xd7f0>
   1f238:	mov	ip, r0
   1f23c:	ldr	r3, [r1, #40]	; 0x28
   1f240:	ldr	r0, [r1, #56]	; 0x38
   1f244:	cmp	r0, r3
   1f248:	ble	1f2bc <__assert_fail@plt+0xd91c>
   1f24c:	push	{r4, lr}
   1f250:	ldr	lr, [r1, #4]
   1f254:	ldrb	r0, [lr, r3]
   1f258:	strb	r0, [ip]
   1f25c:	ldr	r4, [r1, #80]	; 0x50
   1f260:	cmp	r4, #1
   1f264:	ble	1f284 <__assert_fail@plt+0xd8e4>
   1f268:	ldr	r4, [r1, #28]
   1f26c:	cmp	r3, r4
   1f270:	beq	1f284 <__assert_fail@plt+0xd8e4>
   1f274:	ldr	r4, [r1, #8]
   1f278:	ldr	r4, [r4, r3, lsl #2]
   1f27c:	cmn	r4, #1
   1f280:	beq	1f304 <__assert_fail@plt+0xd964>
   1f284:	cmp	r0, #92	; 0x5c
   1f288:	beq	1f2cc <__assert_fail@plt+0xd92c>
   1f28c:	cmp	r0, #91	; 0x5b
   1f290:	beq	1f310 <__assert_fail@plt+0xd970>
   1f294:	cmp	r0, #93	; 0x5d
   1f298:	beq	1f2f4 <__assert_fail@plt+0xd954>
   1f29c:	cmp	r0, #94	; 0x5e
   1f2a0:	beq	1f334 <__assert_fail@plt+0xd994>
   1f2a4:	cmp	r0, #45	; 0x2d
   1f2a8:	bne	1f2e4 <__assert_fail@plt+0xd944>
   1f2ac:	mov	r3, #22
   1f2b0:	strb	r3, [ip, #4]
   1f2b4:	mov	r0, #1
   1f2b8:	pop	{r4, pc}
   1f2bc:	mov	r3, #2
   1f2c0:	strb	r3, [ip, #4]
   1f2c4:	mov	r0, #0
   1f2c8:	bx	lr
   1f2cc:	tst	r2, #1
   1f2d0:	beq	1f2e4 <__assert_fail@plt+0xd944>
   1f2d4:	ldr	r2, [r1, #48]	; 0x30
   1f2d8:	add	r3, r3, #1
   1f2dc:	cmp	r3, r2
   1f2e0:	blt	1f378 <__assert_fail@plt+0xd9d8>
   1f2e4:	mov	r3, #1
   1f2e8:	mov	r0, r3
   1f2ec:	strb	r3, [ip, #4]
   1f2f0:	pop	{r4, pc}
   1f2f4:	mov	r3, #21
   1f2f8:	strb	r3, [ip, #4]
   1f2fc:	mov	r0, #1
   1f300:	pop	{r4, pc}
   1f304:	mov	r0, #1
   1f308:	strb	r0, [ip, #4]
   1f30c:	pop	{r4, pc}
   1f310:	ldr	r1, [r1, #48]	; 0x30
   1f314:	add	r0, r3, #1
   1f318:	cmp	r0, r1
   1f31c:	blt	1f344 <__assert_fail@plt+0xd9a4>
   1f320:	mov	r0, #1
   1f324:	mov	r3, #91	; 0x5b
   1f328:	strb	r0, [ip, #4]
   1f32c:	strb	r3, [ip]
   1f330:	pop	{r4, pc}
   1f334:	mov	r3, #25
   1f338:	strb	r3, [ip, #4]
   1f33c:	mov	r0, #1
   1f340:	pop	{r4, pc}
   1f344:	add	r3, lr, r3
   1f348:	ldrb	r3, [r3, #1]
   1f34c:	cmp	r3, #58	; 0x3a
   1f350:	strb	r3, [ip]
   1f354:	beq	1f390 <__assert_fail@plt+0xd9f0>
   1f358:	cmp	r3, #61	; 0x3d
   1f35c:	beq	1f3a8 <__assert_fail@plt+0xda08>
   1f360:	cmp	r3, #46	; 0x2e
   1f364:	bne	1f320 <__assert_fail@plt+0xd980>
   1f368:	mov	r3, #26
   1f36c:	strb	r3, [ip, #4]
   1f370:	mov	r0, #2
   1f374:	pop	{r4, pc}
   1f378:	str	r3, [r1, #40]	; 0x28
   1f37c:	ldrb	r3, [lr, r3]
   1f380:	mov	r0, #1
   1f384:	strb	r0, [ip, #4]
   1f388:	strb	r3, [ip]
   1f38c:	pop	{r4, pc}
   1f390:	tst	r2, #4
   1f394:	beq	1f320 <__assert_fail@plt+0xd980>
   1f398:	mov	r3, #30
   1f39c:	strb	r3, [ip, #4]
   1f3a0:	mov	r0, #2
   1f3a4:	pop	{r4, pc}
   1f3a8:	mov	r3, #28
   1f3ac:	strb	r3, [ip, #4]
   1f3b0:	mov	r0, #2
   1f3b4:	pop	{r4, pc}
   1f3b8:	ldr	r3, [r1, #8]
   1f3bc:	push	{r4, r5, r6, r7, r8, lr}
   1f3c0:	mov	r4, #0
   1f3c4:	str	r2, [r1]
   1f3c8:	mov	r8, r0
   1f3cc:	str	r3, [r1, #16]
   1f3d0:	lsl	r0, r3, #2
   1f3d4:	str	r4, [r1, #20]
   1f3d8:	mov	r5, r1
   1f3dc:	mov	r7, r2
   1f3e0:	bl	1f110 <__assert_fail@plt+0xd770>
   1f3e4:	cmp	r0, r4
   1f3e8:	str	r0, [r5, #24]
   1f3ec:	beq	1f4c0 <__assert_fail@plt+0xdb20>
   1f3f0:	ldr	r1, [r5, #8]
   1f3f4:	cmp	r1, #0
   1f3f8:	bgt	1f40c <__assert_fail@plt+0xda6c>
   1f3fc:	b	1f458 <__assert_fail@plt+0xdab8>
   1f400:	add	r4, r4, #1
   1f404:	cmp	r4, r1
   1f408:	bge	1f458 <__assert_fail@plt+0xdab8>
   1f40c:	ldr	r2, [r5, #12]
   1f410:	ldr	r3, [r8]
   1f414:	ldr	r6, [r2, r4, lsl #2]
   1f418:	add	r3, r3, r6, lsl #3
   1f41c:	ldrb	r3, [r3, #4]
   1f420:	tst	r3, #8
   1f424:	bne	1f400 <__assert_fail@plt+0xda60>
   1f428:	ldr	r1, [r5, #20]
   1f42c:	ldr	r3, [r5, #16]
   1f430:	cmp	r3, r1
   1f434:	beq	1f498 <__assert_fail@plt+0xdaf8>
   1f438:	ldr	r0, [r5, #24]
   1f43c:	add	r3, r1, #1
   1f440:	str	r3, [r5, #20]
   1f444:	str	r6, [r0, r1, lsl #2]
   1f448:	ldr	r1, [r5, #8]
   1f44c:	add	r4, r4, #1
   1f450:	cmp	r4, r1
   1f454:	blt	1f40c <__assert_fail@plt+0xda6c>
   1f458:	ldr	r4, [r8, #68]	; 0x44
   1f45c:	ldr	r6, [r8, #32]
   1f460:	and	r7, r7, r4
   1f464:	add	r7, r7, r7, lsl #1
   1f468:	lsl	r4, r7, #2
   1f46c:	add	r7, r6, r4
   1f470:	ldr	r3, [r6, r4]
   1f474:	ldr	r2, [r7, #4]
   1f478:	cmp	r2, r3
   1f47c:	ldrgt	r2, [r7, #8]
   1f480:	ble	1f4c8 <__assert_fail@plt+0xdb28>
   1f484:	add	r1, r3, #1
   1f488:	str	r1, [r6, r4]
   1f48c:	mov	r0, #0
   1f490:	str	r5, [r2, r3, lsl #2]
   1f494:	pop	{r4, r5, r6, r7, r8, pc}
   1f498:	add	r1, r1, #1
   1f49c:	ldr	r0, [r5, #24]
   1f4a0:	lsl	r3, r1, #1
   1f4a4:	str	r3, [r5, #16]
   1f4a8:	lsl	r1, r1, #3
   1f4ac:	bl	1f190 <__assert_fail@plt+0xd7f0>
   1f4b0:	cmp	r0, #0
   1f4b4:	ldrne	r1, [r5, #20]
   1f4b8:	strne	r0, [r5, #24]
   1f4bc:	bne	1f43c <__assert_fail@plt+0xda9c>
   1f4c0:	mov	r0, #12
   1f4c4:	pop	{r4, r5, r6, r7, r8, pc}
   1f4c8:	add	r3, r3, #1
   1f4cc:	ldr	r0, [r7, #8]
   1f4d0:	lsl	r1, r3, #3
   1f4d4:	lsl	r8, r3, #1
   1f4d8:	bl	1f190 <__assert_fail@plt+0xd7f0>
   1f4dc:	subs	r2, r0, #0
   1f4e0:	beq	1f4c0 <__assert_fail@plt+0xdb20>
   1f4e4:	ldr	r3, [r6, r4]
   1f4e8:	str	r2, [r7, #8]
   1f4ec:	str	r8, [r7, #4]
   1f4f0:	b	1f484 <__assert_fail@plt+0xdae4>
   1f4f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f4f8:	mov	r5, r0
   1f4fc:	ldr	r8, [r0, #36]	; 0x24
   1f500:	ldr	r3, [r0, #48]	; 0x30
   1f504:	ldr	r4, [r0, #28]
   1f508:	cmp	r8, r3
   1f50c:	movge	r8, r3
   1f510:	cmp	r8, r4
   1f514:	sub	sp, sp, #92	; 0x5c
   1f518:	ble	1f67c <__assert_fail@plt+0xdcdc>
   1f51c:	add	r6, r0, #16
   1f520:	add	r7, sp, #16
   1f524:	mov	fp, #1
   1f528:	mvn	sl, #-1073741824	; 0xc0000000
   1f52c:	mov	r9, #255	; 0xff
   1f530:	b	1f5b0 <__assert_fail@plt+0xdc10>
   1f534:	ldr	r3, [r5, #24]
   1f538:	ldr	r1, [r5]
   1f53c:	add	r3, r4, r3
   1f540:	add	r1, r1, r3
   1f544:	mov	r3, r6
   1f548:	add	r0, sp, #12
   1f54c:	bl	1f13c <__assert_fail@plt+0xd79c>
   1f550:	sub	r2, r0, #1
   1f554:	cmn	r2, #3
   1f558:	mov	r3, r0
   1f55c:	bhi	1f630 <__assert_fail@plt+0xdc90>
   1f560:	cmn	r0, #2
   1f564:	ldrne	r2, [sp, #12]
   1f568:	beq	1f664 <__assert_fail@plt+0xdcc4>
   1f56c:	ldr	r0, [r5, #8]
   1f570:	add	r3, r4, r3
   1f574:	add	ip, r4, #1
   1f578:	cmp	ip, r3
   1f57c:	str	r2, [r0, r4, lsl #2]
   1f580:	lsl	r1, r4, #2
   1f584:	bge	1f68c <__assert_fail@plt+0xdcec>
   1f588:	sub	r2, sl, r4
   1f58c:	add	r2, r2, r3
   1f590:	add	r1, r1, #4
   1f594:	add	r0, r0, r1
   1f598:	lsl	r2, r2, #2
   1f59c:	mov	r1, r9
   1f5a0:	mov	r4, r3
   1f5a4:	bl	11814 <memset@plt>
   1f5a8:	cmp	r8, r4
   1f5ac:	ble	1f67c <__assert_fail@plt+0xdcdc>
   1f5b0:	ldm	r6, {r0, r1}
   1f5b4:	ldr	ip, [r5, #64]	; 0x40
   1f5b8:	sub	r2, r8, r4
   1f5bc:	cmp	ip, #0
   1f5c0:	stm	r7, {r0, r1}
   1f5c4:	beq	1f534 <__assert_fail@plt+0xdb94>
   1f5c8:	ldr	r3, [r5, #80]	; 0x50
   1f5cc:	cmp	r3, #0
   1f5d0:	ble	1f628 <__assert_fail@plt+0xdc88>
   1f5d4:	add	r0, sp, #23
   1f5d8:	mov	r3, #0
   1f5dc:	str	r6, [sp, #4]
   1f5e0:	b	1f5e8 <__assert_fail@plt+0xdc48>
   1f5e4:	ldr	ip, [r5, #64]	; 0x40
   1f5e8:	ldr	r1, [r5]
   1f5ec:	ldr	r6, [r5, #24]
   1f5f0:	add	r1, r1, r4
   1f5f4:	add	r1, r1, r3
   1f5f8:	ldr	lr, [r5, #4]
   1f5fc:	ldrb	r1, [r1, r6]
   1f600:	add	lr, lr, r4
   1f604:	ldrb	r1, [ip, r1]
   1f608:	strb	r1, [lr, r3]
   1f60c:	ldr	ip, [r5, #80]	; 0x50
   1f610:	add	r3, r3, #1
   1f614:	cmp	ip, r3
   1f618:	cmpgt	r2, r3
   1f61c:	strb	r1, [r0, #1]!
   1f620:	bgt	1f5e4 <__assert_fail@plt+0xdc44>
   1f624:	ldr	r6, [sp, #4]
   1f628:	add	r1, sp, #24
   1f62c:	b	1f544 <__assert_fail@plt+0xdba4>
   1f630:	ldr	r3, [r5]
   1f634:	ldr	r2, [r5, #24]
   1f638:	add	r3, r3, r4
   1f63c:	ldr	r1, [r5, #64]	; 0x40
   1f640:	ldrb	r2, [r3, r2]
   1f644:	cmp	r1, #0
   1f648:	mov	r3, fp
   1f64c:	str	r2, [sp, #12]
   1f650:	ldrbne	r2, [r1, r2]
   1f654:	ldm	r7, {r0, r1}
   1f658:	strne	r2, [sp, #12]
   1f65c:	stm	r6, {r0, r1}
   1f660:	b	1f56c <__assert_fail@plt+0xdbcc>
   1f664:	ldr	r2, [r5, #36]	; 0x24
   1f668:	ldr	r3, [r5, #48]	; 0x30
   1f66c:	cmp	r2, r3
   1f670:	bge	1f630 <__assert_fail@plt+0xdc90>
   1f674:	ldm	r7, {r0, r1}
   1f678:	stm	r6, {r0, r1}
   1f67c:	str	r4, [r5, #28]
   1f680:	str	r4, [r5, #32]
   1f684:	add	sp, sp, #92	; 0x5c
   1f688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f68c:	mov	r4, ip
   1f690:	b	1f5a8 <__assert_fail@plt+0xdc08>
   1f694:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f698:	mov	r4, r0
   1f69c:	ldr	r6, [r0, #36]	; 0x24
   1f6a0:	ldr	r3, [r0, #48]	; 0x30
   1f6a4:	ldrb	r2, [r0, #74]	; 0x4a
   1f6a8:	cmp	r6, r3
   1f6ac:	movge	r6, r3
   1f6b0:	cmp	r2, #0
   1f6b4:	sub	sp, sp, #100	; 0x64
   1f6b8:	ldr	r5, [r0, #28]
   1f6bc:	bne	1f6cc <__assert_fail@plt+0xdd2c>
   1f6c0:	ldr	r3, [r0, #64]	; 0x40
   1f6c4:	cmp	r3, #0
   1f6c8:	beq	1f7fc <__assert_fail@plt+0xde5c>
   1f6cc:	ldr	r7, [r4, #32]
   1f6d0:	cmp	r5, r6
   1f6d4:	bge	1f7e8 <__assert_fail@plt+0xde48>
   1f6d8:	add	r3, sp, #24
   1f6dc:	add	r9, r4, #16
   1f6e0:	sub	sl, r6, r5
   1f6e4:	str	r3, [sp, #4]
   1f6e8:	add	r3, sp, #20
   1f6ec:	str	r3, [sp, #8]
   1f6f0:	ldm	r9, {r0, r1}
   1f6f4:	ldr	r2, [r4, #64]	; 0x40
   1f6f8:	ldr	r3, [sp, #4]
   1f6fc:	cmp	r2, #0
   1f700:	stm	r3, {r0, r1}
   1f704:	bne	1f94c <__assert_fail@plt+0xdfac>
   1f708:	ldr	r3, [r4, #24]
   1f70c:	ldr	r2, [r4]
   1f710:	add	r3, r7, r3
   1f714:	add	r3, r2, r3
   1f718:	mov	r1, r3
   1f71c:	str	r3, [sp, #12]
   1f720:	mov	r3, r9
   1f724:	mov	r2, sl
   1f728:	ldr	r0, [sp, #8]
   1f72c:	bl	1f13c <__assert_fail@plt+0xd79c>
   1f730:	sub	r3, r0, #1
   1f734:	cmn	r3, #4
   1f738:	mov	r8, r0
   1f73c:	str	r3, [sp, #8]
   1f740:	bhi	1fa5c <__assert_fail@plt+0xe0bc>
   1f744:	ldr	fp, [sp, #20]
   1f748:	mov	r0, fp
   1f74c:	bl	11940 <towupper@plt>
   1f750:	cmp	fp, r0
   1f754:	mov	sl, r0
   1f758:	beq	1fa44 <__assert_fail@plt+0xe0a4>
   1f75c:	add	r0, sp, #32
   1f760:	ldr	r2, [sp, #4]
   1f764:	mov	r1, sl
   1f768:	bl	1152c <wcrtomb@plt>
   1f76c:	cmp	r8, r0
   1f770:	mov	fp, r0
   1f774:	bne	1faf0 <__assert_fail@plt+0xe150>
   1f778:	ldr	r0, [r4, #4]
   1f77c:	add	r1, sp, #32
   1f780:	add	r0, r0, r5
   1f784:	mov	r2, r8
   1f788:	bl	115d4 <memcpy@plt>
   1f78c:	ldrb	r3, [r4, #76]	; 0x4c
   1f790:	cmp	r3, #0
   1f794:	bne	1fad0 <__assert_fail@plt+0xe130>
   1f798:	add	r3, r8, r7
   1f79c:	ldr	r0, [r4, #8]
   1f7a0:	add	r8, r5, r8
   1f7a4:	add	r2, r5, #1
   1f7a8:	cmp	r2, r8
   1f7ac:	mov	r7, r3
   1f7b0:	str	sl, [r0, r5, lsl #2]
   1f7b4:	bge	1fbec <__assert_fail@plt+0xe24c>
   1f7b8:	mvn	r3, #-1073741824	; 0xc0000000
   1f7bc:	sub	r3, r3, r5
   1f7c0:	add	r3, r3, r8
   1f7c4:	add	r0, r0, r2, lsl #2
   1f7c8:	mov	r1, #255	; 0xff
   1f7cc:	lsl	r2, r3, #2
   1f7d0:	mov	r5, r8
   1f7d4:	bl	11814 <memset@plt>
   1f7d8:	b	1f6d0 <__assert_fail@plt+0xdd30>
   1f7dc:	ldr	r3, [sp, #4]
   1f7e0:	ldm	r3, {r0, r1}
   1f7e4:	stm	r9, {r0, r1}
   1f7e8:	mov	r0, #0
   1f7ec:	str	r5, [r4, #28]
   1f7f0:	str	r7, [r4, #32]
   1f7f4:	add	sp, sp, #100	; 0x64
   1f7f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f7fc:	ldrb	r3, [r0, #76]	; 0x4c
   1f800:	cmp	r3, #0
   1f804:	bne	1f6cc <__assert_fail@plt+0xdd2c>
   1f808:	cmp	r5, r6
   1f80c:	bge	1fa34 <__assert_fail@plt+0xe094>
   1f810:	add	r9, r0, #16
   1f814:	b	1f844 <__assert_fail@plt+0xdea4>
   1f818:	mov	r0, fp
   1f81c:	bl	11940 <towupper@plt>
   1f820:	bics	r3, r0, #127	; 0x7f
   1f824:	bne	1f86c <__assert_fail@plt+0xdecc>
   1f828:	ldr	r3, [r4, #4]
   1f82c:	strb	r0, [r3, r5]
   1f830:	ldr	r3, [r4, #8]
   1f834:	str	r0, [r3, r5, lsl #2]
   1f838:	add	r5, r5, #1
   1f83c:	cmp	r6, r5
   1f840:	ble	1fa34 <__assert_fail@plt+0xe094>
   1f844:	ldr	r8, [r4]
   1f848:	ldr	r7, [r4, #24]
   1f84c:	add	r3, r8, r7
   1f850:	ldrb	fp, [r3, r5]
   1f854:	tst	fp, #128	; 0x80
   1f858:	bne	1f86c <__assert_fail@plt+0xdecc>
   1f85c:	mov	r0, r9
   1f860:	bl	11604 <mbsinit@plt>
   1f864:	cmp	r0, #0
   1f868:	bne	1f818 <__assert_fail@plt+0xde78>
   1f86c:	ldm	r9, {r0, r1}
   1f870:	add	r3, sp, #24
   1f874:	add	r7, r7, r5
   1f878:	sub	sl, r6, r5
   1f87c:	stm	r3, {r0, r1}
   1f880:	mov	r2, sl
   1f884:	add	r1, r8, r7
   1f888:	mov	r3, r9
   1f88c:	add	r0, sp, #20
   1f890:	bl	1f13c <__assert_fail@plt+0xd79c>
   1f894:	add	r2, sp, #24
   1f898:	str	r2, [sp, #4]
   1f89c:	add	r2, sp, #20
   1f8a0:	mov	r7, r5
   1f8a4:	str	r2, [sp, #8]
   1f8a8:	sub	r3, r0, #1
   1f8ac:	cmn	r3, #4
   1f8b0:	mov	r8, r0
   1f8b4:	bhi	1f9c8 <__assert_fail@plt+0xe028>
   1f8b8:	ldr	r3, [sp, #20]
   1f8bc:	mov	r0, r3
   1f8c0:	str	r3, [sp, #12]
   1f8c4:	bl	11940 <towupper@plt>
   1f8c8:	ldr	r3, [sp, #12]
   1f8cc:	cmp	r3, r0
   1f8d0:	mov	fp, r0
   1f8d4:	beq	1f9a4 <__assert_fail@plt+0xe004>
   1f8d8:	mov	r1, r0
   1f8dc:	add	r2, sp, #24
   1f8e0:	add	r0, sp, #32
   1f8e4:	bl	1152c <wcrtomb@plt>
   1f8e8:	cmp	r8, r0
   1f8ec:	bne	1f9f8 <__assert_fail@plt+0xe058>
   1f8f0:	ldr	r0, [r4, #4]
   1f8f4:	mov	r2, r8
   1f8f8:	add	r0, r0, r5
   1f8fc:	add	r1, sp, #32
   1f900:	bl	115d4 <memcpy@plt>
   1f904:	add	r5, r5, #1
   1f908:	sub	r3, r5, #1
   1f90c:	ldr	r0, [r4, #8]
   1f910:	add	r8, r3, r8
   1f914:	cmp	r5, r8
   1f918:	str	fp, [r0, r7, lsl #2]
   1f91c:	lsl	r3, r7, #2
   1f920:	bge	1f83c <__assert_fail@plt+0xde9c>
   1f924:	mvn	r2, #-1073741824	; 0xc0000000
   1f928:	sub	r2, r2, r7
   1f92c:	add	r2, r2, r8
   1f930:	add	r3, r3, #4
   1f934:	lsl	r2, r2, #2
   1f938:	add	r0, r0, r3
   1f93c:	mov	r1, #255	; 0xff
   1f940:	mov	r5, r8
   1f944:	bl	11814 <memset@plt>
   1f948:	b	1f83c <__assert_fail@plt+0xde9c>
   1f94c:	ldr	lr, [r4, #80]	; 0x50
   1f950:	cmp	lr, #0
   1f954:	ble	1f994 <__assert_fail@plt+0xdff4>
   1f958:	ldr	r3, [r4, #24]
   1f95c:	ldr	r1, [r4]
   1f960:	add	r3, r7, r3
   1f964:	sub	r3, r3, #1
   1f968:	cmp	lr, sl
   1f96c:	add	r1, r1, r3
   1f970:	movge	lr, sl
   1f974:	add	r0, sp, #31
   1f978:	mov	r3, #0
   1f97c:	ldrb	ip, [r1, #1]!
   1f980:	add	r3, r3, #1
   1f984:	cmp	r3, lr
   1f988:	ldrb	ip, [r2, ip]
   1f98c:	strb	ip, [r0, #1]!
   1f990:	blt	1f97c <__assert_fail@plt+0xdfdc>
   1f994:	add	r3, sp, #32
   1f998:	str	r3, [sp, #12]
   1f99c:	mov	r1, r3
   1f9a0:	b	1f720 <__assert_fail@plt+0xdd80>
   1f9a4:	ldr	r3, [r4, #24]
   1f9a8:	ldr	r1, [r4]
   1f9ac:	ldr	r0, [r4, #4]
   1f9b0:	add	r3, r5, r3
   1f9b4:	add	r1, r1, r3
   1f9b8:	add	r0, r0, r5
   1f9bc:	mov	r2, r8
   1f9c0:	bl	115d4 <memcpy@plt>
   1f9c4:	b	1f904 <__assert_fail@plt+0xdf64>
   1f9c8:	cmn	r3, #3
   1f9cc:	bne	1fa00 <__assert_fail@plt+0xe060>
   1f9d0:	ldr	r2, [r4, #36]	; 0x24
   1f9d4:	ldr	r3, [r4, #48]	; 0x30
   1f9d8:	cmp	r2, r3
   1f9dc:	blt	1fa28 <__assert_fail@plt+0xe088>
   1f9e0:	ldr	r3, [r4, #4]
   1f9e4:	strb	fp, [r3, r5]
   1f9e8:	ldr	r3, [r4, #8]
   1f9ec:	add	r5, r5, #1
   1f9f0:	str	fp, [r3, r7, lsl #2]
   1f9f4:	b	1f83c <__assert_fail@plt+0xde9c>
   1f9f8:	mov	r7, r5
   1f9fc:	b	1f6f0 <__assert_fail@plt+0xdd50>
   1fa00:	ldr	r3, [r4, #4]
   1fa04:	cmn	r0, #1
   1fa08:	strb	fp, [r3, r5]
   1fa0c:	ldr	r3, [r4, #8]
   1fa10:	add	r5, r5, #1
   1fa14:	str	fp, [r3, r7, lsl #2]
   1fa18:	addeq	r3, sp, #24
   1fa1c:	ldmeq	r3, {r0, r1}
   1fa20:	stmeq	r9, {r0, r1}
   1fa24:	b	1f83c <__assert_fail@plt+0xde9c>
   1fa28:	add	r3, sp, #24
   1fa2c:	ldm	r3, {r0, r1}
   1fa30:	stm	r9, {r0, r1}
   1fa34:	str	r5, [r4, #28]
   1fa38:	str	r5, [r4, #32]
   1fa3c:	mov	r0, #0
   1fa40:	b	1f7f4 <__assert_fail@plt+0xde54>
   1fa44:	ldr	r0, [r4, #4]
   1fa48:	ldr	r1, [sp, #12]
   1fa4c:	add	r0, r0, r5
   1fa50:	mov	r2, r8
   1fa54:	bl	115d4 <memcpy@plt>
   1fa58:	b	1f78c <__assert_fail@plt+0xddec>
   1fa5c:	cmn	r3, #3
   1fa60:	bne	1fa74 <__assert_fail@plt+0xe0d4>
   1fa64:	ldr	r2, [r4, #36]	; 0x24
   1fa68:	ldr	r3, [r4, #48]	; 0x30
   1fa6c:	cmp	r2, r3
   1fa70:	blt	1f7dc <__assert_fail@plt+0xde3c>
   1fa74:	ldr	r3, [r4]
   1fa78:	ldr	r1, [r4, #24]
   1fa7c:	add	r3, r3, r7
   1fa80:	ldr	r2, [r4, #64]	; 0x40
   1fa84:	ldrb	r3, [r3, r1]
   1fa88:	cmp	r2, #0
   1fa8c:	mov	r1, r5
   1fa90:	ldrbne	r3, [r2, r3]
   1fa94:	ldr	r2, [r4, #4]
   1fa98:	strb	r3, [r2, r5]
   1fa9c:	ldrb	r2, [r4, #76]	; 0x4c
   1faa0:	cmp	r2, #0
   1faa4:	ldrne	r2, [r4, #12]
   1faa8:	strne	r7, [r2, r5, lsl #2]
   1faac:	ldr	r2, [r4, #8]
   1fab0:	cmn	r8, #1
   1fab4:	add	r7, r7, #1
   1fab8:	add	r5, r5, #1
   1fabc:	str	r3, [r2, r1, lsl #2]
   1fac0:	ldreq	r3, [sp, #4]
   1fac4:	ldmeq	r3, {r0, r1}
   1fac8:	stmeq	r9, {r0, r1}
   1facc:	b	1f6d0 <__assert_fail@plt+0xdd30>
   1fad0:	ldr	r2, [r4, #12]
   1fad4:	add	r3, r8, r7
   1fad8:	add	r2, r2, r5, lsl #2
   1fadc:	str	r7, [r2], #4
   1fae0:	add	r7, r7, #1
   1fae4:	cmp	r3, r7
   1fae8:	bne	1fadc <__assert_fail@plt+0xe13c>
   1faec:	b	1f79c <__assert_fail@plt+0xddfc>
   1faf0:	cmn	r0, #1
   1faf4:	beq	1fa44 <__assert_fail@plt+0xe0a4>
   1faf8:	ldr	r0, [r4, #36]	; 0x24
   1fafc:	add	r6, fp, r5
   1fb00:	cmp	r6, r0
   1fb04:	bhi	1f7dc <__assert_fail@plt+0xde3c>
   1fb08:	ldr	r3, [r4, #12]
   1fb0c:	cmp	r3, #0
   1fb10:	beq	1fbf4 <__assert_fail@plt+0xe254>
   1fb14:	ldrb	r3, [r4, #76]	; 0x4c
   1fb18:	cmp	r3, #0
   1fb1c:	bne	1fb48 <__assert_fail@plt+0xe1a8>
   1fb20:	cmp	r5, #0
   1fb24:	ldrne	r2, [r4, #12]
   1fb28:	subne	r2, r2, #4
   1fb2c:	beq	1fb40 <__assert_fail@plt+0xe1a0>
   1fb30:	str	r3, [r2, #4]!
   1fb34:	add	r3, r3, #1
   1fb38:	cmp	r5, r3
   1fb3c:	bne	1fb30 <__assert_fail@plt+0xe190>
   1fb40:	mov	r3, #1
   1fb44:	strb	r3, [r4, #76]	; 0x4c
   1fb48:	ldr	r0, [r4, #4]
   1fb4c:	add	r1, sp, #32
   1fb50:	mov	r2, fp
   1fb54:	add	r0, r0, r5
   1fb58:	bl	115d4 <memcpy@plt>
   1fb5c:	ldr	r3, [r4, #8]
   1fb60:	ldr	r1, [r4, #12]
   1fb64:	lsl	r2, r5, #2
   1fb68:	cmp	fp, #1
   1fb6c:	str	sl, [r3, r5, lsl #2]
   1fb70:	add	r3, r3, r2
   1fb74:	str	r7, [r1, r5, lsl #2]
   1fb78:	add	r2, r1, r2
   1fb7c:	bls	1fbac <__assert_fail@plt+0xe20c>
   1fb80:	mov	r1, #1
   1fb84:	mvn	ip, #0
   1fb88:	cmp	r1, r8
   1fb8c:	ldr	r0, [sp, #8]
   1fb90:	movcc	r0, r1
   1fb94:	add	r1, r1, #1
   1fb98:	add	r0, r0, r7
   1fb9c:	cmp	fp, r1
   1fba0:	str	r0, [r2, #4]!
   1fba4:	str	ip, [r3, #4]!
   1fba8:	bne	1fb88 <__assert_fail@plt+0xe1e8>
   1fbac:	ldr	r2, [r4, #52]	; 0x34
   1fbb0:	ldr	r3, [r4, #48]	; 0x30
   1fbb4:	cmp	r7, r2
   1fbb8:	sub	fp, fp, r8
   1fbbc:	ldrlt	r2, [r4, #56]	; 0x38
   1fbc0:	add	r3, fp, r3
   1fbc4:	addlt	fp, r2, fp
   1fbc8:	ldr	r2, [r4, #36]	; 0x24
   1fbcc:	strlt	fp, [r4, #56]	; 0x38
   1fbd0:	cmp	r3, r2
   1fbd4:	mov	r5, r6
   1fbd8:	str	r3, [r4, #48]	; 0x30
   1fbdc:	add	r7, r8, r7
   1fbe0:	movlt	r6, r3
   1fbe4:	movge	r6, r2
   1fbe8:	b	1f6d0 <__assert_fail@plt+0xdd30>
   1fbec:	mov	r5, r2
   1fbf0:	b	1f6d0 <__assert_fail@plt+0xdd30>
   1fbf4:	lsl	r0, r0, #2
   1fbf8:	bl	1f110 <__assert_fail@plt+0xd770>
   1fbfc:	cmp	r0, #0
   1fc00:	str	r0, [r4, #12]
   1fc04:	moveq	r0, #12
   1fc08:	bne	1fb14 <__assert_fail@plt+0xe174>
   1fc0c:	b	1f7f4 <__assert_fail@plt+0xde54>
   1fc10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc14:	sub	sp, sp, #12
   1fc18:	ldmib	r0, {r5, ip}
   1fc1c:	stm	sp, {r1, r2}
   1fc20:	mov	r4, r0
   1fc24:	cmp	ip, r5
   1fc28:	mov	r8, sp
   1fc2c:	ldrb	r6, [sp, #4]
   1fc30:	bcs	1fcf0 <__assert_fail@plt+0xe350>
   1fc34:	ldr	r7, [r0, #12]
   1fc38:	ldr	r5, [r0, #20]
   1fc3c:	ldm	r8, {r0, r1}
   1fc40:	ldr	r3, [r4]
   1fc44:	cmp	r6, #5
   1fc48:	add	r3, r3, ip, lsl #3
   1fc4c:	bic	r2, r1, #261120	; 0x3fc00
   1fc50:	bic	r2, r2, #768	; 0x300
   1fc54:	stm	r3, {r0, r1}
   1fc58:	str	r2, [r3, #4]
   1fc5c:	beq	1fcdc <__assert_fail@plt+0xe33c>
   1fc60:	sub	r6, r6, #6
   1fc64:	clz	r6, r6
   1fc68:	lsr	r6, r6, #5
   1fc6c:	ldrb	r2, [r3, #6]
   1fc70:	mvn	r1, #0
   1fc74:	bic	r2, r2, #16
   1fc78:	orr	r2, r2, r6, lsl #4
   1fc7c:	strb	r2, [r3, #6]
   1fc80:	str	r1, [r7, ip, lsl #2]
   1fc84:	ldr	r3, [r4, #8]
   1fc88:	mov	r2, #0
   1fc8c:	add	r3, r3, r3, lsl #1
   1fc90:	lsl	r3, r3, #2
   1fc94:	add	r1, r5, r3
   1fc98:	str	r2, [r5, r3]
   1fc9c:	str	r2, [r1, #4]
   1fca0:	str	r2, [r1, #8]
   1fca4:	ldr	r3, [r4, #8]
   1fca8:	ldr	r0, [r4, #24]
   1fcac:	add	r3, r3, r3, lsl #1
   1fcb0:	lsl	r3, r3, #2
   1fcb4:	add	r1, r0, r3
   1fcb8:	str	r2, [r0, r3]
   1fcbc:	str	r2, [r1, #4]
   1fcc0:	str	r2, [r1, #8]
   1fcc4:	ldr	r3, [r4, #8]
   1fcc8:	mov	r0, r3
   1fccc:	add	r3, r3, #1
   1fcd0:	str	r3, [r4, #8]
   1fcd4:	add	sp, sp, #12
   1fcd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fcdc:	ldr	r6, [r4, #92]	; 0x5c
   1fce0:	cmp	r6, #1
   1fce4:	movle	r6, #0
   1fce8:	movgt	r6, #1
   1fcec:	b	1fc6c <__assert_fail@plt+0xe2cc>
   1fcf0:	ldr	r3, [pc, #200]	; 1fdc0 <__assert_fail@plt+0xe420>
   1fcf4:	lsl	r9, r5, #1
   1fcf8:	cmp	r9, r3
   1fcfc:	bhi	1fdb8 <__assert_fail@plt+0xe418>
   1fd00:	lsl	r1, r5, #4
   1fd04:	ldr	r0, [r0]
   1fd08:	bl	1f190 <__assert_fail@plt+0xd7f0>
   1fd0c:	cmp	r0, #0
   1fd10:	beq	1fdb8 <__assert_fail@plt+0xe418>
   1fd14:	lsl	sl, r5, #3
   1fd18:	mov	r1, sl
   1fd1c:	str	r0, [r4]
   1fd20:	ldr	r0, [r4, #12]
   1fd24:	bl	1f190 <__assert_fail@plt+0xd7f0>
   1fd28:	mov	r1, sl
   1fd2c:	add	r5, r9, r5, lsl #2
   1fd30:	lsl	sl, r5, #2
   1fd34:	mov	r7, r0
   1fd38:	ldr	r0, [r4, #16]
   1fd3c:	bl	1f190 <__assert_fail@plt+0xd7f0>
   1fd40:	mov	r1, sl
   1fd44:	mov	fp, r0
   1fd48:	ldr	r0, [r4, #20]
   1fd4c:	bl	1f190 <__assert_fail@plt+0xd7f0>
   1fd50:	mov	r1, sl
   1fd54:	mov	r5, r0
   1fd58:	ldr	r0, [r4, #24]
   1fd5c:	bl	1f190 <__assert_fail@plt+0xd7f0>
   1fd60:	cmp	fp, #0
   1fd64:	cmpne	r7, #0
   1fd68:	mov	sl, r0
   1fd6c:	beq	1fd98 <__assert_fail@plt+0xe3f8>
   1fd70:	cmp	r0, #0
   1fd74:	cmpne	r5, #0
   1fd78:	beq	1fd98 <__assert_fail@plt+0xe3f8>
   1fd7c:	ldr	ip, [r4, #8]
   1fd80:	str	r7, [r4, #12]
   1fd84:	str	fp, [r4, #16]
   1fd88:	str	r5, [r4, #20]
   1fd8c:	str	r0, [r4, #24]
   1fd90:	str	r9, [r4, #4]
   1fd94:	b	1fc3c <__assert_fail@plt+0xe29c>
   1fd98:	mov	r0, r7
   1fd9c:	bl	1f018 <__assert_fail@plt+0xd678>
   1fda0:	mov	r0, fp
   1fda4:	bl	1f018 <__assert_fail@plt+0xd678>
   1fda8:	mov	r0, r5
   1fdac:	bl	1f018 <__assert_fail@plt+0xd678>
   1fdb0:	mov	r0, sl
   1fdb4:	bl	1f018 <__assert_fail@plt+0xd678>
   1fdb8:	mvn	r0, #0
   1fdbc:	b	1fcd4 <__assert_fail@plt+0xe334>
   1fdc0:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   1fdc4:	ldr	r3, [r0]
   1fdc8:	push	{r4, r5, r6, lr}
   1fdcc:	cmp	r3, #0
   1fdd0:	mov	r4, r0
   1fdd4:	mov	r6, r1
   1fdd8:	beq	1fe04 <__assert_fail@plt+0xe464>
   1fddc:	ldr	r2, [r0, #4]
   1fde0:	cmp	r2, #0
   1fde4:	bne	1fe34 <__assert_fail@plt+0xe494>
   1fde8:	ldr	r3, [r0, #8]
   1fdec:	mov	r0, #1
   1fdf0:	str	r1, [r3]
   1fdf4:	ldr	r3, [r4, #4]
   1fdf8:	add	r3, r3, r0
   1fdfc:	str	r3, [r4, #4]
   1fe00:	pop	{r4, r5, r6, pc}
   1fe04:	mov	r5, #1
   1fe08:	str	r5, [r0]
   1fe0c:	str	r5, [r0, #4]
   1fe10:	mov	r0, #4
   1fe14:	bl	1f110 <__assert_fail@plt+0xd770>
   1fe18:	cmp	r0, #0
   1fe1c:	str	r0, [r4, #8]
   1fe20:	strne	r6, [r0]
   1fe24:	streq	r0, [r4, #4]
   1fe28:	streq	r0, [r4]
   1fe2c:	movne	r0, r5
   1fe30:	pop	{r4, r5, r6, pc}
   1fe34:	cmp	r3, r2
   1fe38:	beq	1feb4 <__assert_fail@plt+0xe514>
   1fe3c:	ldr	r5, [r0, #8]
   1fe40:	ldr	r3, [r5]
   1fe44:	cmp	r6, r3
   1fe48:	bge	1fe80 <__assert_fail@plt+0xe4e0>
   1fe4c:	cmp	r2, #0
   1fe50:	ble	1fe68 <__assert_fail@plt+0xe4c8>
   1fe54:	lsl	r2, r2, #2
   1fe58:	mov	r1, r5
   1fe5c:	add	r0, r5, #4
   1fe60:	bl	1158c <memmove@plt>
   1fe64:	mov	r2, #0
   1fe68:	str	r6, [r5, r2, lsl #2]
   1fe6c:	ldr	r3, [r4, #4]
   1fe70:	mov	r0, #1
   1fe74:	add	r3, r3, r0
   1fe78:	str	r3, [r4, #4]
   1fe7c:	pop	{r4, r5, r6, pc}
   1fe80:	sub	r3, r2, #-1073741823	; 0xc0000001
   1fe84:	ldr	r1, [r5, r3, lsl #2]
   1fe88:	lsl	r3, r3, #2
   1fe8c:	cmp	r6, r1
   1fe90:	bge	1fe68 <__assert_fail@plt+0xe4c8>
   1fe94:	add	r3, r3, #4
   1fe98:	add	r3, r5, r3
   1fe9c:	str	r1, [r3], #-4
   1fea0:	ldr	r1, [r3, #-4]
   1fea4:	sub	r2, r2, #1
   1fea8:	cmp	r6, r1
   1feac:	blt	1fe9c <__assert_fail@plt+0xe4fc>
   1feb0:	b	1fe68 <__assert_fail@plt+0xe4c8>
   1feb4:	lsl	r3, r2, #1
   1feb8:	str	r3, [r0]
   1febc:	lsl	r1, r2, #3
   1fec0:	ldr	r0, [r0, #8]
   1fec4:	bl	1f190 <__assert_fail@plt+0xd7f0>
   1fec8:	subs	r5, r0, #0
   1fecc:	ldrne	r2, [r4, #4]
   1fed0:	strne	r5, [r4, #8]
   1fed4:	bne	1fe40 <__assert_fail@plt+0xe4a0>
   1fed8:	mov	r0, r5
   1fedc:	pop	{r4, r5, r6, pc}
   1fee0:	cmp	r0, #0
   1fee4:	ble	1ff68 <__assert_fail@plt+0xe5c8>
   1fee8:	push	{lr}		; (str lr, [sp, #-4]!)
   1feec:	sub	ip, r0, #1
   1fef0:	ldr	lr, [r1]
   1fef4:	mov	r0, #0
   1fef8:	cmp	r0, ip
   1fefc:	bcs	1ff38 <__assert_fail@plt+0xe598>
   1ff00:	add	r1, r0, ip
   1ff04:	lsr	r1, r1, #1
   1ff08:	ldr	r3, [lr, r1, lsl #2]
   1ff0c:	cmp	r2, r3
   1ff10:	ble	1ff28 <__assert_fail@plt+0xe588>
   1ff14:	b	1ff4c <__assert_fail@plt+0xe5ac>
   1ff18:	ldr	ip, [lr, r3, lsl #2]
   1ff1c:	cmp	ip, r2
   1ff20:	blt	1ff54 <__assert_fail@plt+0xe5b4>
   1ff24:	mov	r1, r3
   1ff28:	add	r3, r0, r1
   1ff2c:	cmp	r0, r1
   1ff30:	lsr	r3, r3, #1
   1ff34:	bcc	1ff18 <__assert_fail@plt+0xe578>
   1ff38:	ldr	r3, [lr, r0, lsl #2]
   1ff3c:	cmp	r2, r3
   1ff40:	beq	1ff60 <__assert_fail@plt+0xe5c0>
   1ff44:	mov	r0, #0
   1ff48:	pop	{pc}		; (ldr pc, [sp], #4)
   1ff4c:	mov	r3, r1
   1ff50:	mov	r1, ip
   1ff54:	add	r0, r3, #1
   1ff58:	mov	ip, r1
   1ff5c:	b	1fef8 <__assert_fail@plt+0xe558>
   1ff60:	add	r0, r0, #1
   1ff64:	pop	{pc}		; (ldr pc, [sp], #4)
   1ff68:	mov	r0, #0
   1ff6c:	bx	lr
   1ff70:	push	{r4, r5, r6, lr}
   1ff74:	mov	r5, r0
   1ff78:	ldr	r0, [r1]
   1ff7c:	sub	sp, sp, #16
   1ff80:	cmp	r0, #31
   1ff84:	beq	1fff8 <__assert_fail@plt+0xe658>
   1ff88:	lsl	ip, r0, #5
   1ff8c:	ldr	r4, [r5]
   1ff90:	add	r0, r0, #1
   1ff94:	add	r6, ip, #4
   1ff98:	str	r0, [r1]
   1ff9c:	ldr	r1, [sp, #32]
   1ffa0:	add	ip, r4, ip
   1ffa4:	mov	r5, #0
   1ffa8:	str	r2, [ip, #8]
   1ffac:	str	r3, [ip, #12]
   1ffb0:	str	r5, [ip, #4]
   1ffb4:	ldm	r1, {r0, r1}
   1ffb8:	add	lr, ip, #24
   1ffbc:	cmp	r2, r5
   1ffc0:	stm	lr, {r0, r1}
   1ffc4:	ldrb	r1, [ip, #30]
   1ffc8:	mvn	lr, #0
   1ffcc:	add	r0, r4, r6
   1ffd0:	and	r1, r1, #243	; 0xf3
   1ffd4:	str	r5, [ip, #16]
   1ffd8:	str	r5, [ip, #20]
   1ffdc:	strb	r1, [ip, #30]
   1ffe0:	str	lr, [ip, #32]
   1ffe4:	strne	r0, [r2]
   1ffe8:	cmp	r3, #0
   1ffec:	strne	r0, [r3]
   1fff0:	add	sp, sp, #16
   1fff4:	pop	{r4, r5, r6, pc}
   1fff8:	mov	r0, #996	; 0x3e4
   1fffc:	stmib	sp, {r1, r2, r3}
   20000:	bl	1f110 <__assert_fail@plt+0xd770>
   20004:	subs	r4, r0, #0
   20008:	beq	2002c <__assert_fail@plt+0xe68c>
   2000c:	ldr	ip, [r5]
   20010:	mov	r6, #4
   20014:	str	ip, [r4]
   20018:	mov	r0, #1
   2001c:	mov	ip, #0
   20020:	str	r4, [r5]
   20024:	ldmib	sp, {r1, r2, r3}
   20028:	b	1ff98 <__assert_fail@plt+0xe5f8>
   2002c:	mov	r0, r4
   20030:	b	1fff0 <__assert_fail@plt+0xe650>
   20034:	push	{r4, r5, r6, lr}
   20038:	mov	r4, r0
   2003c:	ldr	r0, [r1, #4]
   20040:	str	r0, [r4, #4]
   20044:	ldr	r2, [r1, #4]
   20048:	cmp	r2, #0
   2004c:	ble	20084 <__assert_fail@plt+0xe6e4>
   20050:	str	r0, [r4]
   20054:	lsl	r0, r0, #2
   20058:	mov	r5, r1
   2005c:	bl	1f110 <__assert_fail@plt+0xd770>
   20060:	cmp	r0, #0
   20064:	str	r0, [r4, #8]
   20068:	beq	2009c <__assert_fail@plt+0xe6fc>
   2006c:	ldr	r2, [r5, #4]
   20070:	ldr	r1, [r5, #8]
   20074:	lsl	r2, r2, #2
   20078:	bl	115d4 <memcpy@plt>
   2007c:	mov	r0, #0
   20080:	pop	{r4, r5, r6, pc}
   20084:	mov	r2, #0
   20088:	mov	r0, r2
   2008c:	str	r2, [r4]
   20090:	str	r2, [r4, #4]
   20094:	str	r2, [r4, #8]
   20098:	pop	{r4, r5, r6, pc}
   2009c:	str	r0, [r4, #4]
   200a0:	str	r0, [r4]
   200a4:	mov	r0, #12
   200a8:	pop	{r4, r5, r6, pc}
   200ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   200b0:	mov	sl, r0
   200b4:	ldr	r7, [r2, #4]
   200b8:	ldr	r0, [r1, #4]
   200bc:	ldr	r3, [sl, #4]
   200c0:	ldr	r9, [r1, #8]
   200c4:	ldr	r8, [r2, #8]
   200c8:	sub	r5, r0, #1
   200cc:	sub	r6, r7, #1
   200d0:	add	r0, r3, r0
   200d4:	add	r7, r0, r7
   200d8:	ldr	ip, [r9, r5, lsl #2]
   200dc:	ldr	r4, [r8, r6, lsl #2]
   200e0:	ldr	r0, [sl, #8]
   200e4:	sub	r3, r3, #1
   200e8:	cmp	ip, r4
   200ec:	beq	20108 <__assert_fail@plt+0xe768>
   200f0:	bge	20158 <__assert_fail@plt+0xe7b8>
   200f4:	subs	r6, r6, #1
   200f8:	bmi	20178 <__assert_fail@plt+0xe7d8>
   200fc:	ldr	r4, [r8, r6, lsl #2]
   20100:	cmp	ip, r4
   20104:	bne	200f0 <__assert_fail@plt+0xe750>
   20108:	cmp	r3, #0
   2010c:	blt	20138 <__assert_fail@plt+0xe798>
   20110:	ldr	lr, [r0, r3, lsl #2]
   20114:	add	ip, r0, r3, lsl #2
   20118:	cmp	lr, r4
   2011c:	bgt	20130 <__assert_fail@plt+0xe790>
   20120:	b	20168 <__assert_fail@plt+0xe7c8>
   20124:	ldr	lr, [ip, #-4]!
   20128:	cmp	lr, r4
   2012c:	ble	20168 <__assert_fail@plt+0xe7c8>
   20130:	subs	r3, r3, #1
   20134:	bcs	20124 <__assert_fail@plt+0xe784>
   20138:	sub	r7, r7, #1
   2013c:	subs	r5, r5, #1
   20140:	str	r4, [r0, r7, lsl #2]
   20144:	bmi	20178 <__assert_fail@plt+0xe7d8>
   20148:	subs	r6, r6, #1
   2014c:	bmi	20178 <__assert_fail@plt+0xe7d8>
   20150:	ldr	ip, [r9, r5, lsl #2]
   20154:	b	200fc <__assert_fail@plt+0xe75c>
   20158:	subs	r5, r5, #1
   2015c:	bmi	20178 <__assert_fail@plt+0xe7d8>
   20160:	ldr	ip, [r9, r5, lsl #2]
   20164:	b	200e8 <__assert_fail@plt+0xe748>
   20168:	cmp	lr, r4
   2016c:	bne	20138 <__assert_fail@plt+0xe798>
   20170:	subs	r5, r5, #1
   20174:	bpl	20148 <__assert_fail@plt+0xe7a8>
   20178:	ldr	ip, [sl, #4]
   2017c:	ldr	r1, [r1, #4]
   20180:	ldr	r3, [r2, #4]
   20184:	add	r1, ip, r1
   20188:	add	r1, r1, r3
   2018c:	sub	r2, r1, r7
   20190:	sub	r3, ip, #1
   20194:	cmp	r3, #0
   20198:	cmpge	r2, #0
   2019c:	add	ip, ip, r2
   201a0:	sub	r1, r1, #1
   201a4:	str	ip, [sl, #4]
   201a8:	bgt	201d0 <__assert_fail@plt+0xe830>
   201ac:	lsl	r2, r2, #2
   201b0:	add	r1, r0, r7, lsl #2
   201b4:	bl	115d4 <memcpy@plt>
   201b8:	mov	r0, #0
   201bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   201c0:	sub	r3, r3, #1
   201c4:	cmn	r3, #1
   201c8:	str	ip, [r0, r5, lsl #2]
   201cc:	beq	201ac <__assert_fail@plt+0xe80c>
   201d0:	ldr	lr, [r0, r1, lsl #2]
   201d4:	ldr	ip, [r0, r3, lsl #2]
   201d8:	add	r5, r3, r2
   201dc:	cmp	lr, ip
   201e0:	mov	r4, r5
   201e4:	ble	201c0 <__assert_fail@plt+0xe820>
   201e8:	subs	r2, r2, #1
   201ec:	sub	r1, r1, #1
   201f0:	str	lr, [r0, r5, lsl #2]
   201f4:	bne	201d0 <__assert_fail@plt+0xe830>
   201f8:	b	201b0 <__assert_fail@plt+0xe810>
   201fc:	push	{r4, r5, r6, r7, r8, lr}
   20200:	mov	r5, r0
   20204:	ldr	r4, [r0, #4]
   20208:	mov	r6, r1
   2020c:	cmp	r4, #0
   20210:	beq	2031c <__assert_fail@plt+0xe97c>
   20214:	ldr	r1, [r1, #4]
   20218:	sub	r3, r4, #1
   2021c:	sub	r2, r1, #1
   20220:	add	r4, r4, r1, lsl #1
   20224:	mvn	r7, r2
   20228:	mvn	lr, r3
   2022c:	tst	r7, lr
   20230:	bpl	2026c <__assert_fail@plt+0xe8cc>
   20234:	ldr	r1, [r5, #8]
   20238:	ldr	r0, [r6, #8]
   2023c:	ldr	ip, [r1, r3, lsl #2]
   20240:	ldr	r0, [r0, r2, lsl #2]
   20244:	cmp	ip, r0
   20248:	beq	20308 <__assert_fail@plt+0xe968>
   2024c:	sublt	r4, r4, #1
   20250:	sublt	r2, r2, #1
   20254:	subge	r3, r3, #1
   20258:	mvnlt	r7, r2
   2025c:	mvnge	lr, r3
   20260:	strlt	r0, [r1, r4, lsl #2]
   20264:	tst	r7, lr
   20268:	bmi	20234 <__assert_fail@plt+0xe894>
   2026c:	cmp	r2, #0
   20270:	blt	20290 <__assert_fail@plt+0xe8f0>
   20274:	add	r2, r2, #1
   20278:	sub	r4, r4, r2
   2027c:	ldr	r0, [r5, #8]
   20280:	lsl	r2, r2, #2
   20284:	add	r0, r0, r4, lsl #2
   20288:	ldr	r1, [r6, #8]
   2028c:	bl	115d4 <memcpy@plt>
   20290:	ldr	r1, [r6, #4]
   20294:	ldr	ip, [r5, #4]
   20298:	add	r1, ip, r1, lsl #1
   2029c:	subs	r2, r1, r4
   202a0:	sub	r1, r1, #1
   202a4:	beq	202e0 <__assert_fail@plt+0xe940>
   202a8:	ldr	r0, [r5, #8]
   202ac:	sub	r3, ip, #1
   202b0:	add	ip, ip, r2
   202b4:	str	ip, [r5, #4]
   202b8:	ldr	lr, [r0, r1, lsl #2]
   202bc:	ldr	ip, [r0, r3, lsl #2]
   202c0:	add	r6, r3, r2
   202c4:	cmp	lr, ip
   202c8:	mov	r5, r6
   202cc:	ble	202e8 <__assert_fail@plt+0xe948>
   202d0:	subs	r2, r2, #1
   202d4:	sub	r1, r1, #1
   202d8:	str	lr, [r0, r6, lsl #2]
   202dc:	bne	202b8 <__assert_fail@plt+0xe918>
   202e0:	mov	r0, #0
   202e4:	pop	{r4, r5, r6, r7, r8, pc}
   202e8:	subs	r3, r3, #1
   202ec:	str	ip, [r0, r6, lsl #2]
   202f0:	bpl	202b8 <__assert_fail@plt+0xe918>
   202f4:	lsl	r2, r2, #2
   202f8:	add	r1, r0, r4, lsl #2
   202fc:	bl	115d4 <memcpy@plt>
   20300:	mov	r0, #0
   20304:	pop	{r4, r5, r6, r7, r8, pc}
   20308:	sub	r2, r2, #1
   2030c:	sub	r3, r3, #1
   20310:	mvn	r7, r2
   20314:	mvn	lr, r3
   20318:	b	2022c <__assert_fail@plt+0xe88c>
   2031c:	ldr	r3, [r1, #4]
   20320:	ldr	r0, [r0, #8]
   20324:	str	r3, [r5, #4]
   20328:	ldr	r2, [r1, #4]
   2032c:	ldr	r1, [r1, #8]
   20330:	lsl	r2, r2, #2
   20334:	bl	115d4 <memcpy@plt>
   20338:	mov	r0, #0
   2033c:	pop	{r4, r5, r6, r7, r8, pc}
   20340:	cmp	r1, #0
   20344:	push	{r4, r5, r6, lr}
   20348:	mov	r5, r0
   2034c:	blt	203a8 <__assert_fail@plt+0xea08>
   20350:	ldr	r3, [r0, #48]	; 0x30
   20354:	cmp	r1, r3
   20358:	beq	2041c <__assert_fail@plt+0xea7c>
   2035c:	ldr	r3, [r0, #80]	; 0x50
   20360:	cmp	r3, #1
   20364:	ble	203b0 <__assert_fail@plt+0xea10>
   20368:	ldr	r3, [r0, #8]
   2036c:	add	r3, r3, r1, lsl #2
   20370:	b	2037c <__assert_fail@plt+0xe9dc>
   20374:	cmn	r1, #1
   20378:	beq	203a8 <__assert_fail@plt+0xea08>
   2037c:	ldr	r4, [r3], #-4
   20380:	sub	r1, r1, #1
   20384:	cmn	r4, #1
   20388:	beq	20374 <__assert_fail@plt+0xe9d4>
   2038c:	ldrb	r3, [r5, #78]	; 0x4e
   20390:	cmp	r3, #0
   20394:	bne	203f0 <__assert_fail@plt+0xea50>
   20398:	cmp	r4, #10
   2039c:	beq	203dc <__assert_fail@plt+0xea3c>
   203a0:	mov	r0, #0
   203a4:	pop	{r4, r5, r6, pc}
   203a8:	ldr	r0, [r5, #60]	; 0x3c
   203ac:	pop	{r4, r5, r6, pc}
   203b0:	ldr	r3, [r0, #4]
   203b4:	ldr	r0, [r0, #68]	; 0x44
   203b8:	ldrb	r3, [r3, r1]
   203bc:	and	r2, r3, #31
   203c0:	asr	r1, r3, #5
   203c4:	ldr	r0, [r0, r1, lsl #2]
   203c8:	lsr	r0, r0, r2
   203cc:	ands	r0, r0, #1
   203d0:	bne	20414 <__assert_fail@plt+0xea74>
   203d4:	cmp	r3, #10
   203d8:	popne	{r4, r5, r6, pc}
   203dc:	ldrb	r0, [r5, #77]	; 0x4d
   203e0:	cmp	r0, #0
   203e4:	movne	r0, #2
   203e8:	moveq	r0, #0
   203ec:	pop	{r4, r5, r6, pc}
   203f0:	mov	r0, r4
   203f4:	bl	117e4 <iswalnum@plt>
   203f8:	sub	r3, r4, #95	; 0x5f
   203fc:	clz	r3, r3
   20400:	lsr	r3, r3, #5
   20404:	cmp	r0, #0
   20408:	orrne	r3, r3, #1
   2040c:	cmp	r3, #0
   20410:	beq	20398 <__assert_fail@plt+0xe9f8>
   20414:	mov	r0, #1
   20418:	pop	{r4, r5, r6, pc}
   2041c:	tst	r2, #2
   20420:	moveq	r0, #10
   20424:	movne	r0, #8
   20428:	pop	{r4, r5, r6, pc}
   2042c:	push	{r4, r5, r6, lr}
   20430:	mov	r4, r1
   20434:	mov	r1, r2
   20438:	ldr	r2, [r0, #88]	; 0x58
   2043c:	mov	r5, r0
   20440:	bl	20340 <__assert_fail@plt+0xe9a0>
   20444:	ldr	r2, [r4, #8]
   20448:	cmp	r2, #0
   2044c:	ble	2050c <__assert_fail@plt+0xeb6c>
   20450:	ldr	r1, [r5, #84]	; 0x54
   20454:	ands	r3, r0, #1
   20458:	ldr	lr, [r4, #12]
   2045c:	ldr	ip, [r1]
   20460:	and	r1, r0, #2
   20464:	and	r0, r0, #8
   20468:	bne	205bc <__assert_fail@plt+0xec1c>
   2046c:	cmp	r1, #0
   20470:	ldr	r5, [pc, #700]	; 20734 <__assert_fail@plt+0xed94>
   20474:	sub	lr, lr, #4
   20478:	beq	20514 <__assert_fail@plt+0xeb74>
   2047c:	cmp	r0, #0
   20480:	bne	204e8 <__assert_fail@plt+0xeb48>
   20484:	mov	r3, r0
   20488:	b	20494 <__assert_fail@plt+0xeaf4>
   2048c:	cmp	r2, r3
   20490:	beq	2050c <__assert_fail@plt+0xeb6c>
   20494:	ldr	r0, [lr, #4]!
   20498:	add	r3, r3, #1
   2049c:	add	r1, ip, r0, lsl #3
   204a0:	ldrb	r4, [r1, #4]
   204a4:	ldr	r1, [r1, #4]
   204a8:	cmp	r4, #2
   204ac:	and	r1, r5, r1, lsr #8
   204b0:	bne	2048c <__assert_fail@plt+0xeaec>
   204b4:	cmp	r1, #0
   204b8:	popeq	{r4, r5, r6, pc}
   204bc:	tst	r1, #4
   204c0:	bne	2048c <__assert_fail@plt+0xeaec>
   204c4:	tst	r1, #128	; 0x80
   204c8:	popeq	{r4, r5, r6, pc}
   204cc:	b	2048c <__assert_fail@plt+0xeaec>
   204d0:	cmp	r1, #0
   204d4:	popeq	{r4, r5, r6, pc}
   204d8:	tst	r1, #4
   204dc:	popeq	{r4, r5, r6, pc}
   204e0:	cmp	r2, r3
   204e4:	beq	2050c <__assert_fail@plt+0xeb6c>
   204e8:	ldr	r0, [lr, #4]!
   204ec:	add	r3, r3, #1
   204f0:	add	r1, ip, r0, lsl #3
   204f4:	ldrb	r4, [r1, #4]
   204f8:	ldr	r1, [r1, #4]
   204fc:	cmp	r4, #2
   20500:	and	r1, r5, r1, lsr #8
   20504:	bne	204e0 <__assert_fail@plt+0xeb40>
   20508:	b	204d0 <__assert_fail@plt+0xeb30>
   2050c:	mov	r0, #0
   20510:	pop	{r4, r5, r6, pc}
   20514:	cmp	r0, #0
   20518:	beq	20568 <__assert_fail@plt+0xebc8>
   2051c:	mov	r3, r1
   20520:	b	2052c <__assert_fail@plt+0xeb8c>
   20524:	cmp	r2, r3
   20528:	beq	2050c <__assert_fail@plt+0xeb6c>
   2052c:	ldr	r0, [lr, #4]!
   20530:	add	r3, r3, #1
   20534:	add	r1, ip, r0, lsl #3
   20538:	ldrb	r4, [r1, #4]
   2053c:	ldr	r1, [r1, #4]
   20540:	cmp	r4, #2
   20544:	and	r1, r5, r1, lsr #8
   20548:	bne	20524 <__assert_fail@plt+0xeb84>
   2054c:	cmp	r1, #0
   20550:	popeq	{r4, r5, r6, pc}
   20554:	tst	r1, #4
   20558:	bne	20524 <__assert_fail@plt+0xeb84>
   2055c:	tst	r1, #32
   20560:	popeq	{r4, r5, r6, pc}
   20564:	b	20524 <__assert_fail@plt+0xeb84>
   20568:	mov	r3, r0
   2056c:	b	2057c <__assert_fail@plt+0xebdc>
   20570:	add	r3, r3, #1
   20574:	cmp	r3, r2
   20578:	beq	2050c <__assert_fail@plt+0xeb6c>
   2057c:	ldr	r0, [lr, #4]!
   20580:	add	r1, ip, r0, lsl #3
   20584:	ldrb	r4, [r1, #4]
   20588:	ldr	r1, [r1, #4]
   2058c:	cmp	r4, #2
   20590:	and	r1, r5, r1, lsr #8
   20594:	bne	20570 <__assert_fail@plt+0xebd0>
   20598:	cmp	r1, #0
   2059c:	popeq	{r4, r5, r6, pc}
   205a0:	tst	r1, #4
   205a4:	bne	20570 <__assert_fail@plt+0xebd0>
   205a8:	tst	r1, #32
   205ac:	bne	20570 <__assert_fail@plt+0xebd0>
   205b0:	tst	r1, #128	; 0x80
   205b4:	bne	20570 <__assert_fail@plt+0xebd0>
   205b8:	pop	{r4, r5, r6, pc}
   205bc:	cmp	r1, #0
   205c0:	beq	20620 <__assert_fail@plt+0xec80>
   205c4:	cmp	r0, #0
   205c8:	ldr	r5, [pc, #356]	; 20734 <__assert_fail@plt+0xed94>
   205cc:	sub	lr, lr, #4
   205d0:	beq	206e4 <__assert_fail@plt+0xed44>
   205d4:	mov	r1, #0
   205d8:	b	205e4 <__assert_fail@plt+0xec44>
   205dc:	cmp	r2, r1
   205e0:	beq	2050c <__assert_fail@plt+0xeb6c>
   205e4:	ldr	r0, [lr, #4]!
   205e8:	add	r1, r1, #1
   205ec:	add	r3, ip, r0, lsl #3
   205f0:	ldrb	r4, [r3, #4]
   205f4:	ldr	r3, [r3, #4]
   205f8:	cmp	r4, #2
   205fc:	and	r3, r5, r3, lsr #8
   20600:	bne	205dc <__assert_fail@plt+0xec3c>
   20604:	cmp	r3, #0
   20608:	popeq	{r4, r5, r6, pc}
   2060c:	tst	r3, #4
   20610:	beq	2067c <__assert_fail@plt+0xecdc>
   20614:	tst	r3, #8
   20618:	popeq	{r4, r5, r6, pc}
   2061c:	b	205dc <__assert_fail@plt+0xec3c>
   20620:	cmp	r0, #0
   20624:	beq	20688 <__assert_fail@plt+0xece8>
   20628:	ldr	r5, [pc, #260]	; 20734 <__assert_fail@plt+0xed94>
   2062c:	sub	lr, lr, #4
   20630:	mov	r3, r1
   20634:	b	20644 <__assert_fail@plt+0xeca4>
   20638:	add	r3, r3, #1
   2063c:	cmp	r2, r3
   20640:	beq	2050c <__assert_fail@plt+0xeb6c>
   20644:	ldr	r0, [lr, #4]!
   20648:	add	r1, ip, r0, lsl #3
   2064c:	ldrb	r4, [r1, #4]
   20650:	ldr	r1, [r1, #4]
   20654:	cmp	r4, #2
   20658:	and	r1, r5, r1, lsr #8
   2065c:	bne	20638 <__assert_fail@plt+0xec98>
   20660:	cmp	r1, #0
   20664:	popeq	{r4, r5, r6, pc}
   20668:	tst	r1, #8
   2066c:	bne	20638 <__assert_fail@plt+0xec98>
   20670:	tst	r1, #32
   20674:	popeq	{r4, r5, r6, pc}
   20678:	b	20638 <__assert_fail@plt+0xec98>
   2067c:	tst	r3, #8
   20680:	bne	205dc <__assert_fail@plt+0xec3c>
   20684:	pop	{r4, r5, r6, pc}
   20688:	ldr	r4, [pc, #164]	; 20734 <__assert_fail@plt+0xed94>
   2068c:	sub	lr, lr, #4
   20690:	mov	r3, r0
   20694:	b	206a4 <__assert_fail@plt+0xed04>
   20698:	add	r3, r3, #1
   2069c:	cmp	r2, r3
   206a0:	beq	2050c <__assert_fail@plt+0xeb6c>
   206a4:	ldr	r0, [lr, #4]!
   206a8:	add	r1, ip, r0, lsl #3
   206ac:	ldrb	r5, [r1, #4]
   206b0:	ldr	r1, [r1, #4]
   206b4:	cmp	r5, #2
   206b8:	and	r1, r4, r1, lsr #8
   206bc:	bne	20698 <__assert_fail@plt+0xecf8>
   206c0:	cmp	r1, #0
   206c4:	beq	20730 <__assert_fail@plt+0xed90>
   206c8:	tst	r1, #8
   206cc:	bne	20698 <__assert_fail@plt+0xecf8>
   206d0:	tst	r1, #32
   206d4:	bne	20698 <__assert_fail@plt+0xecf8>
   206d8:	tst	r1, #128	; 0x80
   206dc:	bne	20698 <__assert_fail@plt+0xecf8>
   206e0:	pop	{r4, r5, r6, pc}
   206e4:	mov	r3, r0
   206e8:	b	206f8 <__assert_fail@plt+0xed58>
   206ec:	add	r3, r3, #1
   206f0:	cmp	r2, r3
   206f4:	beq	2050c <__assert_fail@plt+0xeb6c>
   206f8:	ldr	r0, [lr, #4]!
   206fc:	add	r1, ip, r0, lsl #3
   20700:	ldrb	r4, [r1, #4]
   20704:	ldr	r1, [r1, #4]
   20708:	cmp	r4, #2
   2070c:	and	r1, r5, r1, lsr #8
   20710:	bne	206ec <__assert_fail@plt+0xed4c>
   20714:	cmp	r1, #0
   20718:	popeq	{r4, r5, r6, pc}
   2071c:	tst	r1, #8
   20720:	bne	206ec <__assert_fail@plt+0xed4c>
   20724:	tst	r1, #128	; 0x80
   20728:	popeq	{r4, r5, r6, pc}
   2072c:	b	206ec <__assert_fail@plt+0xed4c>
   20730:	pop	{r4, r5, r6, pc}
   20734:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   20738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2073c:	mov	r4, r0
   20740:	ldr	r6, [r0, #24]
   20744:	sub	sp, sp, #36	; 0x24
   20748:	cmp	r6, r1
   2074c:	mov	r7, r1
   20750:	mov	r8, r2
   20754:	suble	r5, r1, r6
   20758:	ble	207bc <__assert_fail@plt+0xee1c>
   2075c:	ldr	r3, [r0, #80]	; 0x50
   20760:	ldr	r1, [r0, #44]	; 0x2c
   20764:	cmp	r3, #1
   20768:	ldrb	r3, [r0, #75]	; 0x4b
   2076c:	movgt	r2, #0
   20770:	strgt	r2, [r0, #16]
   20774:	strgt	r2, [r0, #20]
   20778:	tst	r8, #1
   2077c:	ldr	r2, [r0, #52]	; 0x34
   20780:	moveq	r0, #6
   20784:	movne	r0, #4
   20788:	cmp	r3, #0
   2078c:	mov	r6, #0
   20790:	str	r2, [r4, #56]	; 0x38
   20794:	str	r6, [r4, #28]
   20798:	str	r6, [r4, #24]
   2079c:	str	r6, [r4, #32]
   207a0:	strb	r6, [r4, #76]	; 0x4c
   207a4:	ldreq	r2, [r4]
   207a8:	moveq	r6, r3
   207ac:	mov	r5, r7
   207b0:	str	r0, [r4, #60]	; 0x3c
   207b4:	str	r1, [r4, #48]	; 0x30
   207b8:	streq	r2, [r4, #4]
   207bc:	cmp	r5, #0
   207c0:	ldreq	r3, [r4, #80]	; 0x50
   207c4:	beq	20854 <__assert_fail@plt+0xeeb4>
   207c8:	ldr	r2, [r4, #32]
   207cc:	ldrb	r3, [r4, #76]	; 0x4c
   207d0:	cmp	r5, r2
   207d4:	bge	20924 <__assert_fail@plt+0xef84>
   207d8:	cmp	r3, #0
   207dc:	bne	20a40 <__assert_fail@plt+0xf0a0>
   207e0:	mov	r2, r8
   207e4:	sub	r1, r5, #1
   207e8:	mov	r0, r4
   207ec:	bl	20340 <__assert_fail@plt+0xe9a0>
   207f0:	ldr	r3, [r4, #80]	; 0x50
   207f4:	cmp	r3, #1
   207f8:	str	r0, [r4, #60]	; 0x3c
   207fc:	ble	20818 <__assert_fail@plt+0xee78>
   20800:	ldr	r2, [r4, #28]
   20804:	ldr	r0, [r4, #8]
   20808:	sub	r2, r2, r5
   2080c:	add	r1, r0, r5, lsl #2
   20810:	lsl	r2, r2, #2
   20814:	bl	1158c <memmove@plt>
   20818:	ldrb	r3, [r4, #75]	; 0x4b
   2081c:	cmp	r3, #0
   20820:	bne	20b80 <__assert_fail@plt+0xf1e0>
   20824:	ldr	r0, [r4, #28]
   20828:	ldr	r1, [r4, #32]
   2082c:	mov	r2, r3
   20830:	ldr	r3, [r4, #80]	; 0x50
   20834:	sub	r0, r0, r5
   20838:	sub	r1, r1, r5
   2083c:	str	r0, [r4, #28]
   20840:	str	r1, [r4, #32]
   20844:	cmp	r2, #0
   20848:	ldreq	r2, [r4, #4]
   2084c:	addeq	r2, r2, r5
   20850:	streq	r2, [r4, #4]
   20854:	ldr	r2, [r4, #48]	; 0x30
   20858:	ldr	r1, [r4, #56]	; 0x38
   2085c:	cmp	r3, #1
   20860:	sub	r3, r2, r5
   20864:	sub	r5, r1, r5
   20868:	str	r7, [r4, #24]
   2086c:	str	r3, [r4, #48]	; 0x30
   20870:	str	r5, [r4, #56]	; 0x38
   20874:	ble	208ac <__assert_fail@plt+0xef0c>
   20878:	ldrb	r3, [r4, #72]	; 0x48
   2087c:	mov	r0, r4
   20880:	cmp	r3, #0
   20884:	bne	2089c <__assert_fail@plt+0xeefc>
   20888:	bl	1f4f4 <__assert_fail@plt+0xdb54>
   2088c:	mov	r0, #0
   20890:	str	r0, [r4, #40]	; 0x28
   20894:	add	sp, sp, #36	; 0x24
   20898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2089c:	bl	1f694 <__assert_fail@plt+0xdcf4>
   208a0:	cmp	r0, #0
   208a4:	beq	2088c <__assert_fail@plt+0xeeec>
   208a8:	b	20894 <__assert_fail@plt+0xeef4>
   208ac:	ldrb	r2, [r4, #75]	; 0x4b
   208b0:	cmp	r2, #0
   208b4:	streq	r3, [r4, #28]
   208b8:	beq	2088c <__assert_fail@plt+0xeeec>
   208bc:	ldrb	r2, [r4, #72]	; 0x48
   208c0:	cmp	r2, #0
   208c4:	bne	20df4 <__assert_fail@plt+0xf454>
   208c8:	ldr	r0, [r4, #64]	; 0x40
   208cc:	cmp	r0, #0
   208d0:	beq	2088c <__assert_fail@plt+0xeeec>
   208d4:	ldr	r1, [r4, #36]	; 0x24
   208d8:	ldr	r2, [r4, #28]
   208dc:	cmp	r3, r1
   208e0:	movge	r3, r1
   208e4:	cmp	r3, r2
   208e8:	bgt	208f8 <__assert_fail@plt+0xef58>
   208ec:	b	20918 <__assert_fail@plt+0xef78>
   208f0:	ldr	r7, [r4, #24]
   208f4:	ldr	r0, [r4, #64]	; 0x40
   208f8:	ldm	r4, {r1, ip}
   208fc:	add	r1, r1, r2
   20900:	ldrb	r1, [r1, r7]
   20904:	ldrb	r1, [r0, r1]
   20908:	strb	r1, [ip, r2]
   2090c:	add	r2, r2, #1
   20910:	cmp	r3, r2
   20914:	bne	208f0 <__assert_fail@plt+0xef50>
   20918:	str	r2, [r4, #28]
   2091c:	str	r2, [r4, #32]
   20920:	b	2088c <__assert_fail@plt+0xeeec>
   20924:	ldr	r1, [r4, #28]
   20928:	cmp	r3, #0
   2092c:	str	r1, [sp, #4]
   20930:	bne	20d38 <__assert_fail@plt+0xf398>
   20934:	ldr	r3, [r4, #80]	; 0x50
   20938:	mov	r1, #0
   2093c:	cmp	r3, #1
   20940:	str	r1, [r4, #28]
   20944:	ble	20bf4 <__assert_fail@plt+0xf254>
   20948:	ldrb	r1, [r4, #73]	; 0x49
   2094c:	cmp	r1, #0
   20950:	beq	209b8 <__assert_fail@plt+0xf018>
   20954:	ldr	ip, [r4]
   20958:	sub	r3, r5, r3
   2095c:	add	r9, ip, r6
   20960:	add	r3, r9, r3
   20964:	cmp	ip, r3
   20968:	sub	r0, r5, #1
   2096c:	movcc	ip, r3
   20970:	add	r1, r9, r0
   20974:	cmp	r1, ip
   20978:	bcc	209b8 <__assert_fail@plt+0xf018>
   2097c:	ldrb	r3, [r9, r0]
   20980:	and	r3, r3, #192	; 0xc0
   20984:	cmp	r3, #128	; 0x80
   20988:	subeq	r3, r1, #1
   2098c:	subeq	ip, ip, #1
   20990:	beq	209ac <__assert_fail@plt+0xf00c>
   20994:	b	20c48 <__assert_fail@plt+0xf2a8>
   20998:	ldrb	r0, [r1]
   2099c:	sub	r3, r3, #1
   209a0:	and	r0, r0, #192	; 0xc0
   209a4:	cmp	r0, #128	; 0x80
   209a8:	bne	20c48 <__assert_fail@plt+0xf2a8>
   209ac:	cmp	ip, r3
   209b0:	mov	r1, r3
   209b4:	bne	20998 <__assert_fail@plt+0xeff8>
   209b8:	add	r6, r6, r2
   209bc:	cmp	r7, r6
   209c0:	ble	20fc4 <__assert_fail@plt+0xf624>
   209c4:	add	sl, r4, #16
   209c8:	add	fp, sp, #24
   209cc:	b	209dc <__assert_fail@plt+0xf03c>
   209d0:	add	r6, r6, r3
   209d4:	cmp	r7, r6
   209d8:	ble	20d64 <__assert_fail@plt+0xf3c4>
   209dc:	ldm	sl, {r0, r1}
   209e0:	ldr	r9, [r4, #44]	; 0x2c
   209e4:	ldr	ip, [r4]
   209e8:	sub	r9, r9, r6
   209ec:	mov	r2, r9
   209f0:	stm	fp, {r0, r1}
   209f4:	mov	r3, sl
   209f8:	add	r1, ip, r6
   209fc:	add	r0, sp, #16
   20a00:	bl	1f13c <__assert_fail@plt+0xd79c>
   20a04:	sub	r2, r0, #1
   20a08:	cmn	r2, #4
   20a0c:	mov	r3, r0
   20a10:	ldrls	r9, [sp, #16]
   20a14:	bls	209d0 <__assert_fail@plt+0xf030>
   20a18:	mov	r2, #0
   20a1c:	cmp	r9, r2
   20a20:	cmpne	r0, r2
   20a24:	ldm	fp, {r0, r1}
   20a28:	ldrne	r3, [r4]
   20a2c:	ldrbne	r2, [r3, r6]
   20a30:	mov	r3, #1
   20a34:	stm	sl, {r0, r1}
   20a38:	mov	r9, r2
   20a3c:	b	209d0 <__assert_fail@plt+0xf030>
   20a40:	ldr	sl, [r4, #28]
   20a44:	ldr	r9, [r4, #12]
   20a48:	mov	r3, sl
   20a4c:	mov	r2, #0
   20a50:	b	20a64 <__assert_fail@plt+0xf0c4>
   20a54:	ble	20a8c <__assert_fail@plt+0xf0ec>
   20a58:	add	r2, r6, #1
   20a5c:	cmp	r2, r3
   20a60:	bge	20a84 <__assert_fail@plt+0xf0e4>
   20a64:	add	r1, r2, r3
   20a68:	add	r1, r1, r1, lsr #31
   20a6c:	asr	r6, r1, #1
   20a70:	ldr	r1, [r9, r6, lsl #2]
   20a74:	cmp	r5, r1
   20a78:	bge	20a54 <__assert_fail@plt+0xf0b4>
   20a7c:	mov	r3, r6
   20a80:	b	20a5c <__assert_fail@plt+0xf0bc>
   20a84:	cmp	r5, r1
   20a88:	addgt	r6, r6, #1
   20a8c:	sub	fp, r6, #1
   20a90:	mov	r2, r8
   20a94:	mov	r1, fp
   20a98:	mov	r0, r4
   20a9c:	bl	20340 <__assert_fail@plt+0xe9a0>
   20aa0:	cmp	r5, sl
   20aa4:	movge	r3, #0
   20aa8:	movlt	r3, #1
   20aac:	cmp	r5, r6
   20ab0:	movne	r3, #0
   20ab4:	cmp	r3, #0
   20ab8:	str	r0, [r4, #60]	; 0x3c
   20abc:	bne	20cb0 <__assert_fail@plt+0xf310>
   20ac0:	ldr	r2, [r4, #44]	; 0x2c
   20ac4:	ldr	r3, [r4, #52]	; 0x34
   20ac8:	sub	r2, r2, r7
   20acc:	add	r2, r2, r5
   20ad0:	sub	r3, r3, r7
   20ad4:	add	r3, r3, r5
   20ad8:	str	r2, [r4, #48]	; 0x30
   20adc:	cmp	r6, #0
   20ae0:	mov	r2, #0
   20ae4:	str	r3, [r4, #56]	; 0x38
   20ae8:	strb	r2, [r4, #76]	; 0x4c
   20aec:	ble	20b24 <__assert_fail@plt+0xf184>
   20af0:	sub	r3, r6, #-1073741823	; 0xc0000001
   20af4:	ldr	r2, [r9, r3, lsl #2]
   20af8:	add	r3, r9, r3, lsl #2
   20afc:	cmp	r5, r2
   20b00:	beq	20b18 <__assert_fail@plt+0xf178>
   20b04:	b	20b24 <__assert_fail@plt+0xf184>
   20b08:	ldr	r2, [r3, #-4]!
   20b0c:	sub	fp, fp, #1
   20b10:	cmp	r5, r2
   20b14:	bne	20b24 <__assert_fail@plt+0xf184>
   20b18:	cmp	fp, #0
   20b1c:	mov	r6, fp
   20b20:	bne	20b08 <__assert_fail@plt+0xf168>
   20b24:	cmp	sl, r6
   20b28:	ble	20b9c <__assert_fail@plt+0xf1fc>
   20b2c:	ldr	r1, [r4, #8]
   20b30:	lsl	r0, r6, #2
   20b34:	add	r3, r1, r0
   20b38:	ldr	r2, [r1, r6, lsl #2]
   20b3c:	cmn	r2, #1
   20b40:	rsbeq	r1, r1, #4
   20b44:	beq	20b58 <__assert_fail@plt+0xf1b8>
   20b48:	b	20ba4 <__assert_fail@plt+0xf204>
   20b4c:	ldr	r2, [r3, #4]!
   20b50:	cmn	r2, #1
   20b54:	bne	20ba4 <__assert_fail@plt+0xf204>
   20b58:	add	r6, r6, #1
   20b5c:	cmp	sl, r6
   20b60:	add	r0, r1, r3
   20b64:	bne	20b4c <__assert_fail@plt+0xf1ac>
   20b68:	mov	r2, #0
   20b6c:	str	r2, [r4, #28]
   20b70:	str	r2, [r4, #32]
   20b74:	ldrb	r2, [r4, #75]	; 0x4b
   20b78:	ldr	r3, [r4, #80]	; 0x50
   20b7c:	b	20844 <__assert_fail@plt+0xeea4>
   20b80:	ldr	r0, [r4, #4]
   20b84:	ldr	r2, [r4, #28]
   20b88:	add	r1, r0, r5
   20b8c:	sub	r2, r2, r5
   20b90:	bl	1158c <memmove@plt>
   20b94:	ldrb	r3, [r4, #75]	; 0x4b
   20b98:	b	20824 <__assert_fail@plt+0xee84>
   20b9c:	beq	20b68 <__assert_fail@plt+0xf1c8>
   20ba0:	lsl	r0, r6, #2
   20ba4:	ldr	r2, [r9, r0]
   20ba8:	sub	r2, r2, r5
   20bac:	cmp	r2, #0
   20bb0:	str	r2, [r4, #28]
   20bb4:	beq	20b70 <__assert_fail@plt+0xf1d0>
   20bb8:	ble	20be0 <__assert_fail@plt+0xf240>
   20bbc:	ldr	r1, [r4, #8]
   20bc0:	mov	r3, #0
   20bc4:	sub	r1, r1, #4
   20bc8:	mvn	r0, #0
   20bcc:	str	r0, [r1, #4]!
   20bd0:	ldr	r2, [r4, #28]
   20bd4:	add	r3, r3, #1
   20bd8:	cmp	r2, r3
   20bdc:	bgt	20bcc <__assert_fail@plt+0xf22c>
   20be0:	mov	r1, #255	; 0xff
   20be4:	ldr	r0, [r4, #4]
   20be8:	bl	11814 <memset@plt>
   20bec:	ldr	r2, [r4, #28]
   20bf0:	b	20b70 <__assert_fail@plt+0xf1d0>
   20bf4:	ldr	r2, [r4]
   20bf8:	ldr	ip, [r4, #64]	; 0x40
   20bfc:	add	r2, r2, r5
   20c00:	add	r6, r2, r6
   20c04:	cmp	ip, #0
   20c08:	ldrb	r0, [r6, #-1]
   20c0c:	str	r1, [r4, #32]
   20c10:	ldrbne	r0, [ip, r0]
   20c14:	ldr	ip, [r4, #68]	; 0x44
   20c18:	and	r2, r0, #31
   20c1c:	asr	r1, r0, #5
   20c20:	ldr	r1, [ip, r1, lsl #2]
   20c24:	lsr	r2, r1, r2
   20c28:	ands	r1, r2, #1
   20c2c:	movne	r1, #1
   20c30:	bne	20c3c <__assert_fail@plt+0xf29c>
   20c34:	cmp	r0, #10
   20c38:	beq	20ef0 <__assert_fail@plt+0xf550>
   20c3c:	ldrb	r2, [r4, #75]	; 0x4b
   20c40:	str	r1, [r4, #60]	; 0x3c
   20c44:	b	20844 <__assert_fail@plt+0xeea4>
   20c48:	ldr	r2, [r4, #48]	; 0x30
   20c4c:	ldr	r3, [r4, #64]	; 0x40
   20c50:	add	r2, r9, r2
   20c54:	cmp	r3, #0
   20c58:	mov	r6, r1
   20c5c:	sub	r2, r2, r1
   20c60:	bne	20f04 <__assert_fail@plt+0xf564>
   20c64:	add	fp, sp, #24
   20c68:	mov	r3, fp
   20c6c:	mov	sl, #0
   20c70:	add	r0, sp, #12
   20c74:	str	sl, [sp, #24]
   20c78:	str	sl, [sp, #28]
   20c7c:	bl	1f13c <__assert_fail@plt+0xd79c>
   20c80:	add	r9, r9, r5
   20c84:	sub	r6, r9, r6
   20c88:	cmp	r0, r6
   20c8c:	movcc	r3, #0
   20c90:	movcs	r3, #1
   20c94:	cmn	r0, #3
   20c98:	movhi	r3, #0
   20c9c:	cmp	r3, sl
   20ca0:	bne	20da4 <__assert_fail@plt+0xf404>
   20ca4:	ldr	r6, [r4, #24]
   20ca8:	ldr	r2, [r4, #32]
   20cac:	b	209b8 <__assert_fail@plt+0xf018>
   20cb0:	ldr	r3, [r9, r6, lsl #2]
   20cb4:	cmp	r5, r3
   20cb8:	bne	20ac0 <__assert_fail@plt+0xf120>
   20cbc:	ldr	r0, [r4, #8]
   20cc0:	sub	r2, sl, r5
   20cc4:	lsl	r6, r5, #2
   20cc8:	lsl	r2, r2, #2
   20ccc:	add	r1, r0, r6
   20cd0:	bl	1158c <memmove@plt>
   20cd4:	ldr	r0, [r4, #4]
   20cd8:	ldr	r2, [r4, #28]
   20cdc:	add	r1, r0, r5
   20ce0:	sub	r2, r2, r5
   20ce4:	bl	1158c <memmove@plt>
   20ce8:	ldr	r3, [r4, #28]
   20cec:	ldr	r2, [r4, #32]
   20cf0:	sub	r3, r3, r5
   20cf4:	sub	r2, r2, r5
   20cf8:	cmp	r3, #0
   20cfc:	str	r3, [r4, #28]
   20d00:	str	r2, [r4, #32]
   20d04:	ble	20b74 <__assert_fail@plt+0xf1d4>
   20d08:	ldr	r1, [r4, #12]
   20d0c:	mov	r2, #0
   20d10:	add	r0, r1, r6
   20d14:	sub	r1, r1, #4
   20d18:	ldr	r3, [r0], #4
   20d1c:	add	r2, r2, #1
   20d20:	sub	r3, r3, r5
   20d24:	str	r3, [r1, #4]!
   20d28:	ldr	r3, [r4, #28]
   20d2c:	cmp	r3, r2
   20d30:	bgt	20d18 <__assert_fail@plt+0xf378>
   20d34:	b	20b74 <__assert_fail@plt+0xf1d4>
   20d38:	ldr	r1, [r4, #44]	; 0x2c
   20d3c:	ldr	r3, [r4, #52]	; 0x34
   20d40:	sub	r1, r1, r7
   20d44:	add	r1, r1, r5
   20d48:	sub	r3, r3, r7
   20d4c:	add	r3, r3, r5
   20d50:	str	r1, [r4, #48]	; 0x30
   20d54:	mov	r1, #0
   20d58:	str	r3, [r4, #56]	; 0x38
   20d5c:	strb	r1, [r4, #76]	; 0x4c
   20d60:	b	20934 <__assert_fail@plt+0xef94>
   20d64:	sub	r6, r6, r7
   20d68:	cmn	r9, #1
   20d6c:	str	r6, [r4, #28]
   20d70:	bne	20dc0 <__assert_fail@plt+0xf420>
   20d74:	ldr	r3, [sp, #4]
   20d78:	mov	r2, r8
   20d7c:	sub	r1, r3, #1
   20d80:	mov	r0, r4
   20d84:	bl	20340 <__assert_fail@plt+0xe9a0>
   20d88:	str	r0, [r4, #60]	; 0x3c
   20d8c:	cmp	r6, #0
   20d90:	bne	20e78 <__assert_fail@plt+0xf4d8>
   20d94:	ldrb	r2, [r4, #75]	; 0x4b
   20d98:	str	r6, [r4, #32]
   20d9c:	ldr	r3, [r4, #80]	; 0x50
   20da0:	b	20844 <__assert_fail@plt+0xeea4>
   20da4:	ldr	r9, [sp, #12]
   20da8:	sub	r6, r0, r6
   20dac:	cmn	r9, #1
   20db0:	str	sl, [r4, #16]
   20db4:	str	sl, [r4, #20]
   20db8:	str	r6, [r4, #28]
   20dbc:	beq	20ca4 <__assert_fail@plt+0xf304>
   20dc0:	ldrb	r3, [r4, #78]	; 0x4e
   20dc4:	cmp	r3, #0
   20dc8:	bne	20ec8 <__assert_fail@plt+0xf528>
   20dcc:	cmp	r9, #10
   20dd0:	movne	r3, #0
   20dd4:	beq	20de0 <__assert_fail@plt+0xf440>
   20dd8:	str	r3, [r4, #60]	; 0x3c
   20ddc:	b	20d8c <__assert_fail@plt+0xf3ec>
   20de0:	ldrb	r3, [r4, #77]	; 0x4d
   20de4:	cmp	r3, #0
   20de8:	movne	r3, #2
   20dec:	moveq	r3, #0
   20df0:	b	20dd8 <__assert_fail@plt+0xf438>
   20df4:	ldr	r5, [r4, #36]	; 0x24
   20df8:	ldr	r6, [r4, #28]
   20dfc:	cmp	r3, r5
   20e00:	movlt	r5, r3
   20e04:	cmp	r5, r6
   20e08:	ble	20fd0 <__assert_fail@plt+0xf630>
   20e0c:	bl	11754 <__ctype_toupper_loc@plt>
   20e10:	b	20e34 <__assert_fail@plt+0xf494>
   20e14:	ldr	r1, [r0]
   20e18:	ldr	r2, [r4, #4]
   20e1c:	ldr	r3, [r1, r3, lsl #2]
   20e20:	strb	r3, [r2, r6]
   20e24:	add	r6, r6, #1
   20e28:	cmp	r6, r5
   20e2c:	beq	20e6c <__assert_fail@plt+0xf4cc>
   20e30:	ldr	r7, [r4, #24]
   20e34:	ldr	r3, [r4]
   20e38:	ldr	r2, [r4, #64]	; 0x40
   20e3c:	add	r3, r3, r6
   20e40:	cmp	r2, #0
   20e44:	ldrb	r3, [r3, r7]
   20e48:	beq	20e14 <__assert_fail@plt+0xf474>
   20e4c:	ldrb	r3, [r2, r3]
   20e50:	ldr	ip, [r0]
   20e54:	ldr	r1, [r4, #4]
   20e58:	ldr	r3, [ip, r3, lsl #2]
   20e5c:	strb	r3, [r1, r6]
   20e60:	add	r6, r6, #1
   20e64:	cmp	r5, r6
   20e68:	bne	20e30 <__assert_fail@plt+0xf490>
   20e6c:	str	r5, [r4, #28]
   20e70:	str	r5, [r4, #32]
   20e74:	b	2088c <__assert_fail@plt+0xeeec>
   20e78:	ble	20ea0 <__assert_fail@plt+0xf500>
   20e7c:	ldr	r2, [r4, #8]
   20e80:	mov	r3, #0
   20e84:	sub	r2, r2, #4
   20e88:	mvn	r1, #0
   20e8c:	str	r1, [r2, #4]!
   20e90:	ldr	r6, [r4, #28]
   20e94:	add	r3, r3, #1
   20e98:	cmp	r6, r3
   20e9c:	bgt	20e8c <__assert_fail@plt+0xf4ec>
   20ea0:	ldrb	r2, [r4, #75]	; 0x4b
   20ea4:	cmp	r2, #0
   20ea8:	beq	20d98 <__assert_fail@plt+0xf3f8>
   20eac:	mov	r2, r6
   20eb0:	mov	r1, #255	; 0xff
   20eb4:	ldr	r0, [r4, #4]
   20eb8:	bl	11814 <memset@plt>
   20ebc:	ldrb	r2, [r4, #75]	; 0x4b
   20ec0:	ldr	r6, [r4, #28]
   20ec4:	b	20d98 <__assert_fail@plt+0xf3f8>
   20ec8:	mov	r0, r9
   20ecc:	bl	117e4 <iswalnum@plt>
   20ed0:	cmp	r9, #95	; 0x5f
   20ed4:	clz	r0, r0
   20ed8:	lsr	r0, r0, #5
   20edc:	moveq	r0, #0
   20ee0:	cmp	r0, #0
   20ee4:	moveq	r3, #1
   20ee8:	bne	20dcc <__assert_fail@plt+0xf42c>
   20eec:	b	20dd8 <__assert_fail@plt+0xf438>
   20ef0:	ldrb	r1, [r4, #77]	; 0x4d
   20ef4:	cmp	r1, #0
   20ef8:	movne	r1, #2
   20efc:	moveq	r1, #0
   20f00:	b	20c3c <__assert_fail@plt+0xf29c>
   20f04:	cmp	r2, #6
   20f08:	movlt	r1, r2
   20f0c:	movge	r1, #6
   20f10:	subs	r0, r1, #1
   20f14:	bmi	20fbc <__assert_fail@plt+0xf61c>
   20f18:	ldrb	lr, [r6, r0]
   20f1c:	add	ip, sp, #32
   20f20:	add	ip, ip, r0
   20f24:	sub	r0, r1, #2
   20f28:	ldrb	lr, [r3, lr]
   20f2c:	cmn	r0, #1
   20f30:	strb	lr, [ip, #-16]
   20f34:	beq	20fbc <__assert_fail@plt+0xf61c>
   20f38:	ldrb	lr, [r6, r0]
   20f3c:	add	ip, sp, #32
   20f40:	add	ip, ip, r0
   20f44:	sub	r0, r1, #3
   20f48:	ldrb	lr, [r3, lr]
   20f4c:	cmn	r0, #1
   20f50:	strb	lr, [ip, #-16]
   20f54:	beq	20fbc <__assert_fail@plt+0xf61c>
   20f58:	ldrb	lr, [r6, r0]
   20f5c:	add	ip, sp, #32
   20f60:	add	ip, ip, r0
   20f64:	sub	r0, r1, #4
   20f68:	ldrb	lr, [r3, lr]
   20f6c:	cmn	r0, #1
   20f70:	strb	lr, [ip, #-16]
   20f74:	beq	20fbc <__assert_fail@plt+0xf61c>
   20f78:	ldrb	lr, [r6, r0]
   20f7c:	add	ip, sp, #32
   20f80:	add	ip, ip, r0
   20f84:	sub	r0, r1, #5
   20f88:	ldrb	lr, [r3, lr]
   20f8c:	cmn	r0, #1
   20f90:	strb	lr, [ip, #-16]
   20f94:	beq	20fbc <__assert_fail@plt+0xf61c>
   20f98:	ldrb	ip, [r6, r0]
   20f9c:	add	lr, sp, #32
   20fa0:	cmp	r1, #6
   20fa4:	add	r0, lr, r0
   20fa8:	ldrb	r1, [r3, ip]
   20fac:	strb	r1, [r0, #-16]
   20fb0:	ldrbeq	r1, [r6]
   20fb4:	ldrbeq	r3, [r3, r1]
   20fb8:	strbeq	r3, [sp, #16]
   20fbc:	add	r1, sp, #16
   20fc0:	b	20c64 <__assert_fail@plt+0xf2c4>
   20fc4:	sub	r6, r6, r7
   20fc8:	str	r6, [r4, #28]
   20fcc:	b	20d74 <__assert_fail@plt+0xf3d4>
   20fd0:	mov	r5, r6
   20fd4:	b	20e6c <__assert_fail@plt+0xf4cc>
   20fd8:	ldr	ip, [r1]
   20fdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20fe0:	cmp	ip, #0
   20fe4:	sub	sp, sp, #20
   20fe8:	ldr	r6, [r0, #84]	; 0x54
   20fec:	ble	210b8 <__assert_fail@plt+0xf718>
   20ff0:	mov	r7, r2
   20ff4:	str	r3, [sp, #8]
   20ff8:	mov	r8, r0
   20ffc:	str	r1, [sp, #4]
   21000:	mov	r4, #0
   21004:	mov	r2, #24
   21008:	mov	r9, #1
   2100c:	b	21018 <__assert_fail@plt+0xf678>
   21010:	cmp	r4, ip
   21014:	bge	210b8 <__assert_fail@plt+0xf718>
   21018:	ldr	r1, [r7]
   2101c:	ldr	r3, [r6]
   21020:	ldr	r5, [r1, r4, lsl #2]
   21024:	add	r4, r4, #1
   21028:	add	r1, r3, r5, lsl #3
   2102c:	ldrb	r1, [r1, #4]
   21030:	cmp	r1, #8
   21034:	bne	21010 <__assert_fail@plt+0xf670>
   21038:	ldr	r3, [r3, r5, lsl #3]
   2103c:	cmp	r3, #31
   21040:	bgt	21010 <__assert_fail@plt+0xf670>
   21044:	ldr	r1, [r6, #80]	; 0x50
   21048:	lsr	r3, r1, r3
   2104c:	tst	r3, #1
   21050:	beq	21010 <__assert_fail@plt+0xf670>
   21054:	ldr	sl, [r8, #124]	; 0x7c
   21058:	ldr	r3, [r8, #128]	; 0x80
   2105c:	ldr	fp, [r8, #132]	; 0x84
   21060:	cmp	r3, sl
   21064:	beq	210cc <__assert_fail@plt+0xf72c>
   21068:	mov	r1, r2
   2106c:	mov	r0, r9
   21070:	str	r2, [sp, #12]
   21074:	bl	1ed9c <__assert_fail@plt+0xd3fc>
   21078:	ldr	r3, [r8, #124]	; 0x7c
   2107c:	ldr	r1, [r8, #132]	; 0x84
   21080:	add	ip, r3, #1
   21084:	str	r0, [fp, sl, lsl #2]
   21088:	ldr	r3, [r1, r3, lsl #2]
   2108c:	cmp	r3, #0
   21090:	beq	210c4 <__assert_fail@plt+0xf724>
   21094:	ldr	r2, [sp, #8]
   21098:	str	r5, [r3, #4]
   2109c:	str	ip, [r8, #124]	; 0x7c
   210a0:	str	r2, [r3]
   210a4:	ldr	r3, [sp, #4]
   210a8:	ldr	r2, [sp, #12]
   210ac:	ldr	ip, [r3]
   210b0:	cmp	r4, ip
   210b4:	blt	21018 <__assert_fail@plt+0xf678>
   210b8:	mov	r0, #0
   210bc:	add	sp, sp, #20
   210c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   210c4:	mov	r0, #12
   210c8:	b	210bc <__assert_fail@plt+0xf71c>
   210cc:	mov	r0, fp
   210d0:	lsl	r1, sl, #3
   210d4:	str	r2, [sp, #12]
   210d8:	bl	1f190 <__assert_fail@plt+0xd7f0>
   210dc:	lsl	r3, sl, #1
   210e0:	ldr	r2, [sp, #12]
   210e4:	subs	fp, r0, #0
   210e8:	beq	210c4 <__assert_fail@plt+0xf724>
   210ec:	ldr	sl, [r8, #124]	; 0x7c
   210f0:	str	fp, [r8, #132]	; 0x84
   210f4:	str	r3, [r8, #128]	; 0x80
   210f8:	b	21068 <__assert_fail@plt+0xf6c8>
   210fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21100:	mov	r6, r0
   21104:	ldr	ip, [sp, #40]	; 0x28
   21108:	mov	r5, r1
   2110c:	tst	ip, #4194304	; 0x400000
   21110:	mov	sl, r2
   21114:	mov	r7, r3
   21118:	ldr	r9, [sp, #32]
   2111c:	beq	2113c <__assert_fail@plt+0xf79c>
   21120:	ldr	r1, [pc, #2196]	; 219bc <__assert_fail@plt+0x1001c>
   21124:	ldr	r0, [sp, #36]	; 0x24
   21128:	bl	11544 <strcmp@plt>
   2112c:	cmp	r0, #0
   21130:	bne	2121c <__assert_fail@plt+0xf87c>
   21134:	ldr	r3, [pc, #2180]	; 219c0 <__assert_fail@plt+0x10020>
   21138:	str	r3, [sp, #36]	; 0x24
   2113c:	ldr	r4, [r7]
   21140:	ldr	r3, [r9]
   21144:	cmp	r3, r4
   21148:	beq	2124c <__assert_fail@plt+0xf8ac>
   2114c:	ldr	r8, [sl]
   21150:	add	r3, r4, #1
   21154:	str	r3, [r7]
   21158:	ldr	r0, [sp, #36]	; 0x24
   2115c:	bl	11514 <wctype@plt>
   21160:	ldr	r1, [pc, #2140]	; 219c4 <__assert_fail@plt+0x10024>
   21164:	str	r0, [r8, r4, lsl #2]
   21168:	ldr	r0, [sp, #36]	; 0x24
   2116c:	bl	11544 <strcmp@plt>
   21170:	subs	r4, r0, #0
   21174:	beq	211d4 <__assert_fail@plt+0xf834>
   21178:	ldr	r1, [pc, #2120]	; 219c8 <__assert_fail@plt+0x10028>
   2117c:	ldr	r0, [sp, #36]	; 0x24
   21180:	bl	11544 <strcmp@plt>
   21184:	subs	r4, r0, #0
   21188:	bne	21278 <__assert_fail@plt+0xf8d8>
   2118c:	cmp	r6, #0
   21190:	bne	2142c <__assert_fail@plt+0xfa8c>
   21194:	bl	11778 <__ctype_b_loc@plt>
   21198:	mov	ip, #1
   2119c:	ldr	r3, [r0]
   211a0:	sub	r3, r3, #2
   211a4:	ldrh	r2, [r3, #2]!
   211a8:	asr	r1, r4, #5
   211ac:	and	r0, r4, #31
   211b0:	tst	r2, #2
   211b4:	add	r4, r4, #1
   211b8:	ldrne	r2, [r5, r1, lsl #2]
   211bc:	orrne	r2, r2, ip, lsl r0
   211c0:	strne	r2, [r5, r1, lsl #2]
   211c4:	cmp	r4, #256	; 0x100
   211c8:	bne	211a4 <__assert_fail@plt+0xf804>
   211cc:	mov	r0, #0
   211d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   211d4:	cmp	r6, #0
   211d8:	bne	21398 <__assert_fail@plt+0xf9f8>
   211dc:	bl	11778 <__ctype_b_loc@plt>
   211e0:	mov	lr, #1
   211e4:	ldr	r3, [r0]
   211e8:	sub	r3, r3, #2
   211ec:	ldrh	r0, [r3, #2]!
   211f0:	asr	r2, r4, #5
   211f4:	and	ip, r4, #31
   211f8:	tst	r0, #8
   211fc:	add	r4, r4, #1
   21200:	ldrne	r1, [r5, r2, lsl #2]
   21204:	orrne	r1, r1, lr, lsl ip
   21208:	strne	r1, [r5, r2, lsl #2]
   2120c:	cmp	r4, #256	; 0x100
   21210:	bne	211ec <__assert_fail@plt+0xf84c>
   21214:	mov	r0, #0
   21218:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2121c:	ldr	r0, [sp, #36]	; 0x24
   21220:	ldr	r1, [pc, #1956]	; 219cc <__assert_fail@plt+0x1002c>
   21224:	bl	11544 <strcmp@plt>
   21228:	ldr	r3, [pc, #1936]	; 219c0 <__assert_fail@plt+0x10020>
   2122c:	ldr	r2, [sp, #36]	; 0x24
   21230:	ldr	r4, [r7]
   21234:	cmp	r0, #0
   21238:	moveq	r2, r3
   2123c:	ldr	r3, [r9]
   21240:	str	r2, [sp, #36]	; 0x24
   21244:	cmp	r3, r4
   21248:	bne	2114c <__assert_fail@plt+0xf7ac>
   2124c:	lsl	r4, r4, #1
   21250:	add	r4, r4, #1
   21254:	ldr	r0, [sl]
   21258:	lsl	r1, r4, #2
   2125c:	bl	1f190 <__assert_fail@plt+0xd7f0>
   21260:	subs	r8, r0, #0
   21264:	beq	21524 <__assert_fail@plt+0xfb84>
   21268:	str	r8, [sl]
   2126c:	str	r4, [r9]
   21270:	ldr	r4, [r7]
   21274:	b	21150 <__assert_fail@plt+0xf7b0>
   21278:	ldr	r1, [pc, #1868]	; 219cc <__assert_fail@plt+0x1002c>
   2127c:	ldr	r0, [sp, #36]	; 0x24
   21280:	bl	11544 <strcmp@plt>
   21284:	subs	r4, r0, #0
   21288:	beq	212e4 <__assert_fail@plt+0xf944>
   2128c:	ldr	r1, [pc, #1852]	; 219d0 <__assert_fail@plt+0x10030>
   21290:	ldr	r0, [sp, #36]	; 0x24
   21294:	bl	11544 <strcmp@plt>
   21298:	subs	r4, r0, #0
   2129c:	bne	2132c <__assert_fail@plt+0xf98c>
   212a0:	cmp	r6, #0
   212a4:	bne	21584 <__assert_fail@plt+0xfbe4>
   212a8:	bl	11778 <__ctype_b_loc@plt>
   212ac:	mov	ip, #1
   212b0:	ldr	r3, [r0]
   212b4:	sub	r3, r3, #2
   212b8:	ldrh	r2, [r3, #2]!
   212bc:	asr	r1, r4, #5
   212c0:	and	r0, r4, #31
   212c4:	tst	r2, #8192	; 0x2000
   212c8:	add	r4, r4, #1
   212cc:	ldrne	r2, [r5, r1, lsl #2]
   212d0:	orrne	r2, r2, ip, lsl r0
   212d4:	strne	r2, [r5, r1, lsl #2]
   212d8:	cmp	r4, #256	; 0x100
   212dc:	bne	212b8 <__assert_fail@plt+0xf918>
   212e0:	b	211cc <__assert_fail@plt+0xf82c>
   212e4:	cmp	r6, #0
   212e8:	bne	214d4 <__assert_fail@plt+0xfb34>
   212ec:	bl	11778 <__ctype_b_loc@plt>
   212f0:	mov	ip, #1
   212f4:	ldr	r3, [r0]
   212f8:	sub	r3, r3, #2
   212fc:	ldrh	r2, [r3, #2]!
   21300:	asr	r1, r4, #5
   21304:	and	r0, r4, #31
   21308:	tst	r2, #512	; 0x200
   2130c:	add	r4, r4, #1
   21310:	ldrne	r2, [r5, r1, lsl #2]
   21314:	orrne	r2, r2, ip, lsl r0
   21318:	strne	r2, [r5, r1, lsl #2]
   2131c:	cmp	r4, #256	; 0x100
   21320:	bne	212fc <__assert_fail@plt+0xf95c>
   21324:	mov	r0, #0
   21328:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2132c:	ldr	r1, [pc, #1676]	; 219c0 <__assert_fail@plt+0x10020>
   21330:	ldr	r0, [sp, #36]	; 0x24
   21334:	bl	11544 <strcmp@plt>
   21338:	subs	r4, r0, #0
   2133c:	beq	213e8 <__assert_fail@plt+0xfa48>
   21340:	ldr	r1, [pc, #1676]	; 219d4 <__assert_fail@plt+0x10034>
   21344:	ldr	r0, [sp, #36]	; 0x24
   21348:	bl	11544 <strcmp@plt>
   2134c:	subs	r4, r0, #0
   21350:	bne	2147c <__assert_fail@plt+0xfadc>
   21354:	cmp	r6, #0
   21358:	bne	21774 <__assert_fail@plt+0xfdd4>
   2135c:	bl	11778 <__ctype_b_loc@plt>
   21360:	mov	ip, #1
   21364:	ldr	r3, [r0]
   21368:	sub	r3, r3, #2
   2136c:	ldrh	r1, [r3, #2]!
   21370:	asr	r2, r4, #5
   21374:	and	r0, r4, #31
   21378:	tst	r1, #2048	; 0x800
   2137c:	add	r4, r4, #1
   21380:	ldrne	r1, [r5, r2, lsl #2]
   21384:	orrne	r1, r1, ip, lsl r0
   21388:	strne	r1, [r5, r2, lsl #2]
   2138c:	cmp	r4, #256	; 0x100
   21390:	bne	2136c <__assert_fail@plt+0xf9cc>
   21394:	b	211cc <__assert_fail@plt+0xf82c>
   21398:	bl	11778 <__ctype_b_loc@plt>
   2139c:	mov	r4, #1
   213a0:	mov	r1, r6
   213a4:	ldr	r3, [r0]
   213a8:	add	ip, r3, #508	; 0x1fc
   213ac:	add	ip, ip, #2
   213b0:	sub	r3, r3, #2
   213b4:	ldrh	r2, [r3, #2]!
   213b8:	tst	r2, #8
   213bc:	beq	213d8 <__assert_fail@plt+0xfa38>
   213c0:	ldrb	r2, [r1]
   213c4:	and	lr, r2, #31
   213c8:	asr	r2, r2, #5
   213cc:	ldr	r0, [r5, r2, lsl #2]
   213d0:	orr	r0, r0, r4, lsl lr
   213d4:	str	r0, [r5, r2, lsl #2]
   213d8:	cmp	ip, r3
   213dc:	add	r1, r1, #1
   213e0:	bne	213b4 <__assert_fail@plt+0xfa14>
   213e4:	b	211cc <__assert_fail@plt+0xf82c>
   213e8:	cmp	r6, #0
   213ec:	bne	215d4 <__assert_fail@plt+0xfc34>
   213f0:	bl	11778 <__ctype_b_loc@plt>
   213f4:	mov	ip, #1
   213f8:	ldr	r3, [r0]
   213fc:	sub	r3, r3, #2
   21400:	ldrh	r2, [r3, #2]!
   21404:	asr	r1, r4, #5
   21408:	and	r0, r4, #31
   2140c:	tst	r2, #1024	; 0x400
   21410:	add	r4, r4, #1
   21414:	ldrne	r2, [r5, r1, lsl #2]
   21418:	orrne	r2, r2, ip, lsl r0
   2141c:	strne	r2, [r5, r1, lsl #2]
   21420:	cmp	r4, #256	; 0x100
   21424:	bne	21400 <__assert_fail@plt+0xfa60>
   21428:	b	211cc <__assert_fail@plt+0xf82c>
   2142c:	bl	11778 <__ctype_b_loc@plt>
   21430:	mov	r4, #1
   21434:	mov	r1, r6
   21438:	ldr	r3, [r0]
   2143c:	add	ip, r3, #508	; 0x1fc
   21440:	add	ip, ip, #2
   21444:	sub	r3, r3, #2
   21448:	ldrh	r2, [r3, #2]!
   2144c:	tst	r2, #2
   21450:	beq	2146c <__assert_fail@plt+0xfacc>
   21454:	ldrb	r2, [r1]
   21458:	and	lr, r2, #31
   2145c:	asr	r2, r2, #5
   21460:	ldr	r0, [r5, r2, lsl #2]
   21464:	orr	r0, r0, r4, lsl lr
   21468:	str	r0, [r5, r2, lsl #2]
   2146c:	cmp	ip, r3
   21470:	add	r1, r1, #1
   21474:	bne	21448 <__assert_fail@plt+0xfaa8>
   21478:	b	211cc <__assert_fail@plt+0xf82c>
   2147c:	ldr	r1, [pc, #1364]	; 219d8 <__assert_fail@plt+0x10038>
   21480:	ldr	r0, [sp, #36]	; 0x24
   21484:	bl	11544 <strcmp@plt>
   21488:	subs	r4, r0, #0
   2148c:	bne	2152c <__assert_fail@plt+0xfb8c>
   21490:	cmp	r6, #0
   21494:	bne	217c4 <__assert_fail@plt+0xfe24>
   21498:	bl	11778 <__ctype_b_loc@plt>
   2149c:	mov	ip, #1
   214a0:	ldr	r3, [r0]
   214a4:	sub	r3, r3, #2
   214a8:	ldrh	r2, [r3, #2]!
   214ac:	asr	r1, r4, #5
   214b0:	and	r0, r4, #31
   214b4:	tst	r2, #16384	; 0x4000
   214b8:	add	r4, r4, #1
   214bc:	ldrne	r2, [r5, r1, lsl #2]
   214c0:	orrne	r2, r2, ip, lsl r0
   214c4:	strne	r2, [r5, r1, lsl #2]
   214c8:	cmp	r4, #256	; 0x100
   214cc:	bne	214a8 <__assert_fail@plt+0xfb08>
   214d0:	b	211cc <__assert_fail@plt+0xf82c>
   214d4:	bl	11778 <__ctype_b_loc@plt>
   214d8:	mov	r4, #1
   214dc:	mov	r1, r6
   214e0:	ldr	r3, [r0]
   214e4:	add	ip, r3, #508	; 0x1fc
   214e8:	add	ip, ip, #2
   214ec:	sub	r3, r3, #2
   214f0:	ldrh	r2, [r3, #2]!
   214f4:	tst	r2, #512	; 0x200
   214f8:	beq	21514 <__assert_fail@plt+0xfb74>
   214fc:	ldrb	r2, [r1]
   21500:	and	lr, r2, #31
   21504:	asr	r2, r2, #5
   21508:	ldr	r0, [r5, r2, lsl #2]
   2150c:	orr	r0, r0, r4, lsl lr
   21510:	str	r0, [r5, r2, lsl #2]
   21514:	cmp	ip, r3
   21518:	add	r1, r1, #1
   2151c:	bne	214f0 <__assert_fail@plt+0xfb50>
   21520:	b	211cc <__assert_fail@plt+0xf82c>
   21524:	mov	r0, #12
   21528:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2152c:	ldr	r1, [pc, #1160]	; 219bc <__assert_fail@plt+0x1001c>
   21530:	ldr	r0, [sp, #36]	; 0x24
   21534:	bl	11544 <strcmp@plt>
   21538:	subs	r4, r0, #0
   2153c:	bne	21624 <__assert_fail@plt+0xfc84>
   21540:	cmp	r6, #0
   21544:	bne	2167c <__assert_fail@plt+0xfcdc>
   21548:	bl	11778 <__ctype_b_loc@plt>
   2154c:	mov	ip, #1
   21550:	ldr	r3, [r0]
   21554:	sub	r3, r3, #2
   21558:	ldrh	r2, [r3, #2]!
   2155c:	asr	r1, r4, #5
   21560:	and	r0, r4, #31
   21564:	tst	r2, #256	; 0x100
   21568:	add	r4, r4, #1
   2156c:	ldrne	r2, [r5, r1, lsl #2]
   21570:	orrne	r2, r2, ip, lsl r0
   21574:	strne	r2, [r5, r1, lsl #2]
   21578:	cmp	r4, #256	; 0x100
   2157c:	bne	21558 <__assert_fail@plt+0xfbb8>
   21580:	b	211cc <__assert_fail@plt+0xf82c>
   21584:	bl	11778 <__ctype_b_loc@plt>
   21588:	mov	r4, #1
   2158c:	mov	r1, r6
   21590:	ldr	r3, [r0]
   21594:	add	ip, r3, #508	; 0x1fc
   21598:	add	ip, ip, #2
   2159c:	sub	r3, r3, #2
   215a0:	ldrh	r2, [r3, #2]!
   215a4:	tst	r2, #8192	; 0x2000
   215a8:	beq	215c4 <__assert_fail@plt+0xfc24>
   215ac:	ldrb	r2, [r1]
   215b0:	and	lr, r2, #31
   215b4:	asr	r2, r2, #5
   215b8:	ldr	r0, [r5, r2, lsl #2]
   215bc:	orr	r0, r0, r4, lsl lr
   215c0:	str	r0, [r5, r2, lsl #2]
   215c4:	cmp	ip, r3
   215c8:	add	r1, r1, #1
   215cc:	bne	215a0 <__assert_fail@plt+0xfc00>
   215d0:	b	211cc <__assert_fail@plt+0xf82c>
   215d4:	bl	11778 <__ctype_b_loc@plt>
   215d8:	mov	r4, #1
   215dc:	mov	r1, r6
   215e0:	ldr	r3, [r0]
   215e4:	add	ip, r3, #508	; 0x1fc
   215e8:	add	ip, ip, #2
   215ec:	sub	r3, r3, #2
   215f0:	ldrh	r2, [r3, #2]!
   215f4:	tst	r2, #1024	; 0x400
   215f8:	beq	21614 <__assert_fail@plt+0xfc74>
   215fc:	ldrb	r2, [r1]
   21600:	and	lr, r2, #31
   21604:	asr	r2, r2, #5
   21608:	ldr	r0, [r5, r2, lsl #2]
   2160c:	orr	r0, r0, r4, lsl lr
   21610:	str	r0, [r5, r2, lsl #2]
   21614:	cmp	ip, r3
   21618:	add	r1, r1, #1
   2161c:	bne	215f0 <__assert_fail@plt+0xfc50>
   21620:	b	211cc <__assert_fail@plt+0xf82c>
   21624:	ldr	r1, [pc, #944]	; 219dc <__assert_fail@plt+0x1003c>
   21628:	ldr	r0, [sp, #36]	; 0x24
   2162c:	bl	11544 <strcmp@plt>
   21630:	subs	r4, r0, #0
   21634:	bne	2171c <__assert_fail@plt+0xfd7c>
   21638:	cmp	r6, #0
   2163c:	bne	216cc <__assert_fail@plt+0xfd2c>
   21640:	bl	11778 <__ctype_b_loc@plt>
   21644:	mov	ip, #1
   21648:	ldr	r3, [r0]
   2164c:	sub	r3, r3, #2
   21650:	ldrh	r2, [r3, #2]!
   21654:	asr	r1, r4, #5
   21658:	and	r0, r4, #31
   2165c:	tst	r2, #1
   21660:	add	r4, r4, #1
   21664:	ldrne	r2, [r5, r1, lsl #2]
   21668:	orrne	r2, r2, ip, lsl r0
   2166c:	strne	r2, [r5, r1, lsl #2]
   21670:	cmp	r4, #256	; 0x100
   21674:	bne	21650 <__assert_fail@plt+0xfcb0>
   21678:	b	211cc <__assert_fail@plt+0xf82c>
   2167c:	bl	11778 <__ctype_b_loc@plt>
   21680:	mov	r1, r6
   21684:	mov	lr, #1
   21688:	ldr	r3, [r0]
   2168c:	add	r0, r3, #508	; 0x1fc
   21690:	add	r0, r0, #2
   21694:	sub	r3, r3, #2
   21698:	ldrh	r2, [r3, #2]!
   2169c:	tst	r2, #256	; 0x100
   216a0:	beq	216bc <__assert_fail@plt+0xfd1c>
   216a4:	ldrb	r2, [r1]
   216a8:	and	r4, r2, #31
   216ac:	asr	r2, r2, #5
   216b0:	ldr	ip, [r5, r2, lsl #2]
   216b4:	orr	ip, ip, lr, lsl r4
   216b8:	str	ip, [r5, r2, lsl #2]
   216bc:	cmp	r0, r3
   216c0:	add	r1, r1, #1
   216c4:	bne	21698 <__assert_fail@plt+0xfcf8>
   216c8:	b	211cc <__assert_fail@plt+0xf82c>
   216cc:	bl	11778 <__ctype_b_loc@plt>
   216d0:	mov	r1, r6
   216d4:	mov	lr, #1
   216d8:	ldr	r3, [r0]
   216dc:	add	r0, r3, #508	; 0x1fc
   216e0:	add	r0, r0, #2
   216e4:	sub	r3, r3, #2
   216e8:	ldrh	r2, [r3, #2]!
   216ec:	tst	r2, #1
   216f0:	beq	2170c <__assert_fail@plt+0xfd6c>
   216f4:	ldrb	r2, [r1]
   216f8:	and	r4, r2, #31
   216fc:	asr	r2, r2, #5
   21700:	ldr	ip, [r5, r2, lsl #2]
   21704:	orr	ip, ip, lr, lsl r4
   21708:	str	ip, [r5, r2, lsl #2]
   2170c:	cmp	r0, r3
   21710:	add	r1, r1, #1
   21714:	bne	216e8 <__assert_fail@plt+0xfd48>
   21718:	b	211cc <__assert_fail@plt+0xf82c>
   2171c:	ldr	r1, [pc, #700]	; 219e0 <__assert_fail@plt+0x10040>
   21720:	ldr	r0, [sp, #36]	; 0x24
   21724:	bl	11544 <strcmp@plt>
   21728:	subs	r4, r0, #0
   2172c:	bne	21864 <__assert_fail@plt+0xfec4>
   21730:	cmp	r6, #0
   21734:	bne	21814 <__assert_fail@plt+0xfe74>
   21738:	bl	11778 <__ctype_b_loc@plt>
   2173c:	mov	ip, #1
   21740:	ldr	r3, [r0]
   21744:	sub	r3, r3, #2
   21748:	ldrsh	r2, [r3, #2]!
   2174c:	cmp	r2, #0
   21750:	asrlt	r0, r4, #5
   21754:	andlt	r1, r4, #31
   21758:	ldrlt	r2, [r5, r0, lsl #2]
   2175c:	add	r4, r4, #1
   21760:	orrlt	r2, r2, ip, lsl r1
   21764:	strlt	r2, [r5, r0, lsl #2]
   21768:	cmp	r4, #256	; 0x100
   2176c:	bne	21748 <__assert_fail@plt+0xfda8>
   21770:	b	211cc <__assert_fail@plt+0xf82c>
   21774:	bl	11778 <__ctype_b_loc@plt>
   21778:	mov	r1, r6
   2177c:	mov	lr, #1
   21780:	ldr	r3, [r0]
   21784:	add	r2, r3, #508	; 0x1fc
   21788:	add	r2, r2, #2
   2178c:	sub	r3, r3, #2
   21790:	ldrh	r0, [r3, #2]!
   21794:	tst	r0, #2048	; 0x800
   21798:	beq	217b4 <__assert_fail@plt+0xfe14>
   2179c:	ldrb	r0, [r1]
   217a0:	and	r4, r0, #31
   217a4:	asr	r0, r0, #5
   217a8:	ldr	ip, [r5, r0, lsl #2]
   217ac:	orr	ip, ip, lr, lsl r4
   217b0:	str	ip, [r5, r0, lsl #2]
   217b4:	cmp	r2, r3
   217b8:	add	r1, r1, #1
   217bc:	bne	21790 <__assert_fail@plt+0xfdf0>
   217c0:	b	211cc <__assert_fail@plt+0xf82c>
   217c4:	bl	11778 <__ctype_b_loc@plt>
   217c8:	mov	r1, r6
   217cc:	mov	lr, #1
   217d0:	ldr	r3, [r0]
   217d4:	add	r0, r3, #508	; 0x1fc
   217d8:	add	r0, r0, #2
   217dc:	sub	r3, r3, #2
   217e0:	ldrh	r2, [r3, #2]!
   217e4:	tst	r2, #16384	; 0x4000
   217e8:	beq	21804 <__assert_fail@plt+0xfe64>
   217ec:	ldrb	r2, [r1]
   217f0:	and	r4, r2, #31
   217f4:	asr	r2, r2, #5
   217f8:	ldr	ip, [r5, r2, lsl #2]
   217fc:	orr	ip, ip, lr, lsl r4
   21800:	str	ip, [r5, r2, lsl #2]
   21804:	cmp	r3, r0
   21808:	add	r1, r1, #1
   2180c:	bne	217e0 <__assert_fail@plt+0xfe40>
   21810:	b	211cc <__assert_fail@plt+0xf82c>
   21814:	bl	11778 <__ctype_b_loc@plt>
   21818:	mov	r1, r6
   2181c:	mov	lr, #1
   21820:	ldr	r3, [r0]
   21824:	add	r0, r3, #508	; 0x1fc
   21828:	add	r0, r0, #2
   2182c:	sub	r3, r3, #2
   21830:	ldrsh	r2, [r3, #2]!
   21834:	cmp	r2, #0
   21838:	bge	21854 <__assert_fail@plt+0xfeb4>
   2183c:	ldrb	r2, [r1]
   21840:	and	r4, r2, #31
   21844:	asr	r2, r2, #5
   21848:	ldr	ip, [r5, r2, lsl #2]
   2184c:	orr	ip, ip, lr, lsl r4
   21850:	str	ip, [r5, r2, lsl #2]
   21854:	cmp	r0, r3
   21858:	add	r1, r1, #1
   2185c:	bne	21830 <__assert_fail@plt+0xfe90>
   21860:	b	211cc <__assert_fail@plt+0xf82c>
   21864:	ldr	r1, [pc, #376]	; 219e4 <__assert_fail@plt+0x10044>
   21868:	ldr	r0, [sp, #36]	; 0x24
   2186c:	bl	11544 <strcmp@plt>
   21870:	subs	r4, r0, #0
   21874:	bne	218bc <__assert_fail@plt+0xff1c>
   21878:	cmp	r6, #0
   2187c:	bne	218d8 <__assert_fail@plt+0xff38>
   21880:	bl	11778 <__ctype_b_loc@plt>
   21884:	mov	ip, #1
   21888:	ldr	r3, [r0]
   2188c:	sub	r3, r3, #2
   21890:	ldrh	r2, [r3, #2]!
   21894:	asr	r1, r4, #5
   21898:	and	r0, r4, #31
   2189c:	tst	r2, #4
   218a0:	add	r4, r4, #1
   218a4:	ldrne	r2, [r5, r1, lsl #2]
   218a8:	orrne	r2, r2, ip, lsl r0
   218ac:	strne	r2, [r5, r1, lsl #2]
   218b0:	cmp	r4, #256	; 0x100
   218b4:	bne	21890 <__assert_fail@plt+0xfef0>
   218b8:	b	211cc <__assert_fail@plt+0xf82c>
   218bc:	ldr	r1, [pc, #292]	; 219e8 <__assert_fail@plt+0x10048>
   218c0:	ldr	r0, [sp, #36]	; 0x24
   218c4:	bl	11544 <strcmp@plt>
   218c8:	subs	r4, r0, #0
   218cc:	beq	21928 <__assert_fail@plt+0xff88>
   218d0:	mov	r0, #4
   218d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   218d8:	bl	11778 <__ctype_b_loc@plt>
   218dc:	mov	r1, r6
   218e0:	mov	lr, #1
   218e4:	ldr	r3, [r0]
   218e8:	add	r0, r3, #508	; 0x1fc
   218ec:	add	r0, r0, #2
   218f0:	sub	r3, r3, #2
   218f4:	ldrh	r2, [r3, #2]!
   218f8:	tst	r2, #4
   218fc:	beq	21918 <__assert_fail@plt+0xff78>
   21900:	ldrb	r2, [r1]
   21904:	and	r4, r2, #31
   21908:	asr	r2, r2, #5
   2190c:	ldr	ip, [r5, r2, lsl #2]
   21910:	orr	ip, ip, lr, lsl r4
   21914:	str	ip, [r5, r2, lsl #2]
   21918:	cmp	r0, r3
   2191c:	add	r1, r1, #1
   21920:	bne	218f4 <__assert_fail@plt+0xff54>
   21924:	b	211cc <__assert_fail@plt+0xf82c>
   21928:	cmp	r6, #0
   2192c:	bne	2196c <__assert_fail@plt+0xffcc>
   21930:	bl	11778 <__ctype_b_loc@plt>
   21934:	mov	ip, #1
   21938:	ldr	r3, [r0]
   2193c:	sub	r3, r3, #2
   21940:	ldrh	r2, [r3, #2]!
   21944:	asr	r1, r4, #5
   21948:	and	r0, r4, #31
   2194c:	tst	r2, #4096	; 0x1000
   21950:	add	r4, r4, #1
   21954:	ldrne	r2, [r5, r1, lsl #2]
   21958:	orrne	r2, r2, ip, lsl r0
   2195c:	strne	r2, [r5, r1, lsl #2]
   21960:	cmp	r4, #256	; 0x100
   21964:	bne	21940 <__assert_fail@plt+0xffa0>
   21968:	b	211cc <__assert_fail@plt+0xf82c>
   2196c:	bl	11778 <__ctype_b_loc@plt>
   21970:	mov	r1, r6
   21974:	mov	lr, #1
   21978:	ldr	r3, [r0]
   2197c:	add	r0, r3, #508	; 0x1fc
   21980:	add	r0, r0, #2
   21984:	sub	r3, r3, #2
   21988:	ldrh	r2, [r3, #2]!
   2198c:	tst	r2, #4096	; 0x1000
   21990:	beq	219ac <__assert_fail@plt+0x1000c>
   21994:	ldrb	r2, [r1]
   21998:	and	r4, r2, #31
   2199c:	asr	r2, r2, #5
   219a0:	ldr	ip, [r5, r2, lsl #2]
   219a4:	orr	ip, ip, lr, lsl r4
   219a8:	str	ip, [r5, r2, lsl #2]
   219ac:	cmp	r3, r0
   219b0:	add	r1, r1, #1
   219b4:	bne	21988 <__assert_fail@plt+0xffe8>
   219b8:	b	211cc <__assert_fail@plt+0xf82c>
   219bc:	strdeq	r3, [r3], -r0
   219c0:	andeq	r3, r3, r8, ror #31
   219c4:	andeq	r4, r3, r0
   219c8:	andeq	r4, r3, r8
   219cc:	strdeq	r3, [r3], -r8
   219d0:	andeq	r4, r3, r0, lsl r0
   219d4:	andeq	r4, r3, r8, lsl r0
   219d8:	andeq	r3, r3, ip, lsr r4
   219dc:	andeq	r4, r3, r0, lsr #32
   219e0:	andeq	r4, r3, r8, lsr #32
   219e4:	andeq	r4, r3, r0, lsr r0
   219e8:	andeq	r4, r3, r8, lsr r0
   219ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   219f0:	sub	sp, sp, #308	; 0x134
   219f4:	ldr	r9, [r0]
   219f8:	ldr	ip, [r9, #92]	; 0x5c
   219fc:	cmp	ip, #1
   21a00:	movne	ip, #0
   21a04:	ldreq	ip, [r0, #12]
   21a08:	lsreq	ip, ip, #22
   21a0c:	andeq	ip, ip, #1
   21a10:	str	ip, [sp, #20]
   21a14:	ldr	ip, [r1]
   21a18:	cmp	ip, #0
   21a1c:	ble	21dc0 <__assert_fail@plt+0x10420>
   21a20:	mov	r6, r3
   21a24:	mov	r3, #0
   21a28:	str	r2, [sp, #16]
   21a2c:	str	r1, [sp, #24]
   21a30:	str	r0, [sp, #28]
   21a34:	str	r3, [sp, #4]
   21a38:	mov	r5, #1
   21a3c:	b	21a78 <__assert_fail@plt+0x100d8>
   21a40:	cmp	r4, #3
   21a44:	beq	21bb8 <__assert_fail@plt+0x10218>
   21a48:	cmp	r4, #6
   21a4c:	beq	21c6c <__assert_fail@plt+0x102cc>
   21a50:	and	r3, r4, #253	; 0xfd
   21a54:	cmp	r3, #5
   21a58:	beq	21df8 <__assert_fail@plt+0x10458>
   21a5c:	cmp	r4, #2
   21a60:	beq	21da0 <__assert_fail@plt+0x10400>
   21a64:	ldr	r3, [sp, #4]
   21a68:	add	r3, r3, #1
   21a6c:	cmp	r3, ip
   21a70:	str	r3, [sp, #4]
   21a74:	bge	21dc0 <__assert_fail@plt+0x10420>
   21a78:	ldr	r3, [sp, #16]
   21a7c:	ldr	r1, [sp, #4]
   21a80:	ldr	r2, [r3]
   21a84:	ldr	r3, [r9]
   21a88:	ldr	r7, [r2, r1, lsl #2]
   21a8c:	lsl	r2, r7, #3
   21a90:	str	r2, [sp, #8]
   21a94:	add	r2, r3, r2
   21a98:	ldrb	r4, [r2, #4]
   21a9c:	cmp	r4, #1
   21aa0:	bne	21a40 <__assert_fail@plt+0x100a0>
   21aa4:	ldrb	r3, [r3, r7, lsl #3]
   21aa8:	ldr	r2, [sp, #20]
   21aac:	cmp	r2, #0
   21ab0:	strb	r4, [r6, r3]
   21ab4:	str	r3, [sp, #12]
   21ab8:	beq	21ad0 <__assert_fail@plt+0x10130>
   21abc:	bl	11748 <__ctype_tolower_loc@plt>
   21ac0:	ldr	r3, [sp, #12]
   21ac4:	ldr	r2, [r0]
   21ac8:	ldr	r3, [r2, r3, lsl #2]
   21acc:	strb	r4, [r6, r3]
   21ad0:	ldr	r3, [sp, #28]
   21ad4:	ldr	r3, [r3, #12]
   21ad8:	tst	r3, #4194304	; 0x400000
   21adc:	beq	21bac <__assert_fail@plt+0x1020c>
   21ae0:	ldr	r3, [r9, #92]	; 0x5c
   21ae4:	cmp	r3, #1
   21ae8:	ble	21bac <__assert_fail@plt+0x1020c>
   21aec:	ldr	r3, [r9]
   21af0:	add	r1, r7, #1
   21af4:	ldrb	r2, [r3, r7, lsl #3]
   21af8:	strb	r2, [sp, #48]	; 0x30
   21afc:	ldr	r2, [r9, #8]
   21b00:	cmp	r2, r1
   21b04:	bls	21df0 <__assert_fail@plt+0x10450>
   21b08:	ldr	r0, [sp, #8]
   21b0c:	ldr	ip, [pc, #772]	; 21e18 <__assert_fail@plt+0x10478>
   21b10:	add	r2, r0, #8
   21b14:	add	r3, r3, r2
   21b18:	ldr	r2, [r3, #4]
   21b1c:	bic	r2, r2, #-16777216	; 0xff000000
   21b20:	bic	r2, r2, #14614528	; 0xdf0000
   21b24:	bic	r2, r2, #65280	; 0xff00
   21b28:	cmp	r2, ip
   21b2c:	bne	21df0 <__assert_fail@plt+0x10450>
   21b30:	add	r8, r0, #16
   21b34:	add	r4, sp, #49	; 0x31
   21b38:	b	21b64 <__assert_fail@plt+0x101c4>
   21b3c:	ldr	r3, [r9]
   21b40:	ldr	r0, [pc, #720]	; 21e18 <__assert_fail@plt+0x10478>
   21b44:	add	r3, r3, r8
   21b48:	add	r8, r8, #8
   21b4c:	ldr	r2, [r3, #4]
   21b50:	bic	r2, r2, #-16777216	; 0xff000000
   21b54:	bic	r2, r2, #14614528	; 0xdf0000
   21b58:	bic	r2, r2, #65280	; 0xff00
   21b5c:	cmp	r2, r0
   21b60:	bne	21b7c <__assert_fail@plt+0x101dc>
   21b64:	ldrb	r3, [r3]
   21b68:	add	r1, r1, #1
   21b6c:	strb	r3, [r4], #1
   21b70:	ldr	r3, [r9, #8]
   21b74:	cmp	r1, r3
   21b78:	bcc	21b3c <__assert_fail@plt+0x1019c>
   21b7c:	add	r3, sp, #48	; 0x30
   21b80:	sub	r4, r4, r3
   21b84:	mov	ip, #0
   21b88:	mov	r2, r4
   21b8c:	add	r3, sp, #40	; 0x28
   21b90:	add	r1, sp, #48	; 0x30
   21b94:	add	r0, sp, #36	; 0x24
   21b98:	str	ip, [sp, #40]	; 0x28
   21b9c:	str	ip, [sp, #44]	; 0x2c
   21ba0:	bl	1f13c <__assert_fail@plt+0xd79c>
   21ba4:	cmp	r4, r0
   21ba8:	beq	21dc8 <__assert_fail@plt+0x10428>
   21bac:	ldr	r3, [sp, #24]
   21bb0:	ldr	ip, [r3]
   21bb4:	b	21a64 <__assert_fail@plt+0x100c4>
   21bb8:	ldr	r8, [sp, #20]
   21bbc:	mov	r7, #0
   21bc0:	str	r9, [sp, #12]
   21bc4:	ldr	r2, [sp, #8]
   21bc8:	cmp	r8, #0
   21bcc:	ldr	r3, [r3, r2]
   21bd0:	ldr	r9, [r3, r7]
   21bd4:	bne	21c10 <__assert_fail@plt+0x10270>
   21bd8:	add	r0, r6, r7, lsl #3
   21bdc:	mov	r3, r8
   21be0:	lsr	r2, r9, r3
   21be4:	tst	r2, #1
   21be8:	strbne	r5, [r0, r3]
   21bec:	add	r3, r3, #1
   21bf0:	cmp	r3, #32
   21bf4:	bne	21be0 <__assert_fail@plt+0x10240>
   21bf8:	add	r7, r7, #4
   21bfc:	cmp	r7, #32
   21c00:	beq	21c5c <__assert_fail@plt+0x102bc>
   21c04:	ldr	r3, [sp, #12]
   21c08:	ldr	r3, [r3]
   21c0c:	b	21bc4 <__assert_fail@plt+0x10224>
   21c10:	add	sl, r6, r7, lsl #3
   21c14:	lsl	fp, r7, #5
   21c18:	mov	r4, #0
   21c1c:	lsr	r3, r9, r4
   21c20:	tst	r3, #1
   21c24:	add	r4, r4, #1
   21c28:	beq	21c40 <__assert_fail@plt+0x102a0>
   21c2c:	strb	r5, [sl]
   21c30:	bl	11748 <__ctype_tolower_loc@plt>
   21c34:	ldr	r3, [r0]
   21c38:	ldr	r3, [r3, fp]
   21c3c:	strb	r5, [r6, r3]
   21c40:	cmp	r4, #32
   21c44:	add	sl, sl, #1
   21c48:	add	fp, fp, #4
   21c4c:	bne	21c1c <__assert_fail@plt+0x1027c>
   21c50:	add	r7, r7, #4
   21c54:	cmp	r7, #32
   21c58:	bne	21c04 <__assert_fail@plt+0x10264>
   21c5c:	ldr	r3, [sp, #24]
   21c60:	ldr	r9, [sp, #12]
   21c64:	ldr	ip, [r3]
   21c68:	b	21a64 <__assert_fail@plt+0x100c4>
   21c6c:	ldr	r3, [r9, #92]	; 0x5c
   21c70:	ldr	r7, [r2]
   21c74:	cmp	r3, #1
   21c78:	ble	21ca0 <__assert_fail@plt+0x10300>
   21c7c:	ldr	r3, [r7, #36]	; 0x24
   21c80:	cmp	r3, #0
   21c84:	bne	21d58 <__assert_fail@plt+0x103b8>
   21c88:	ldrb	r3, [r7, #16]
   21c8c:	tst	r3, #1
   21c90:	bne	21d58 <__assert_fail@plt+0x103b8>
   21c94:	ldr	r3, [r7, #32]
   21c98:	cmp	r3, #0
   21c9c:	bne	21d58 <__assert_fail@plt+0x103b8>
   21ca0:	ldr	r3, [r7, #20]
   21ca4:	cmp	r3, #0
   21ca8:	movgt	r4, #0
   21cac:	ldrgt	r8, [sp, #28]
   21cb0:	ble	21a64 <__assert_fail@plt+0x100c4>
   21cb4:	mov	r3, #0
   21cb8:	str	r3, [sp, #40]	; 0x28
   21cbc:	str	r3, [sp, #44]	; 0x2c
   21cc0:	ldr	r3, [r7]
   21cc4:	add	r2, sp, #40	; 0x28
   21cc8:	add	r0, sp, #48	; 0x30
   21ccc:	ldr	r1, [r3, r4, lsl #2]
   21cd0:	bl	1152c <wcrtomb@plt>
   21cd4:	lsl	sl, r4, #2
   21cd8:	add	r4, r4, #1
   21cdc:	cmn	r0, #1
   21ce0:	beq	21d08 <__assert_fail@plt+0x10368>
   21ce4:	ldrb	fp, [sp, #48]	; 0x30
   21ce8:	ldr	r3, [sp, #20]
   21cec:	cmp	r3, #0
   21cf0:	strb	r5, [r6, fp]
   21cf4:	beq	21d08 <__assert_fail@plt+0x10368>
   21cf8:	bl	11748 <__ctype_tolower_loc@plt>
   21cfc:	ldr	r3, [r0]
   21d00:	ldr	r3, [r3, fp, lsl #2]
   21d04:	strb	r5, [r6, r3]
   21d08:	ldr	r3, [r8, #12]
   21d0c:	tst	r3, #4194304	; 0x400000
   21d10:	beq	21d48 <__assert_fail@plt+0x103a8>
   21d14:	ldr	r3, [r9, #92]	; 0x5c
   21d18:	cmp	r3, #1
   21d1c:	ble	21d48 <__assert_fail@plt+0x103a8>
   21d20:	ldr	r3, [r7]
   21d24:	ldr	r0, [r3, sl]
   21d28:	bl	115f8 <towlower@plt>
   21d2c:	add	r2, sp, #40	; 0x28
   21d30:	mov	r1, r0
   21d34:	add	r0, sp, #48	; 0x30
   21d38:	bl	1152c <wcrtomb@plt>
   21d3c:	cmn	r0, #1
   21d40:	ldrbne	r3, [sp, #48]	; 0x30
   21d44:	strbne	r5, [r6, r3]
   21d48:	ldr	r3, [r7, #20]
   21d4c:	cmp	r4, r3
   21d50:	blt	21cb4 <__assert_fail@plt+0x10314>
   21d54:	b	21bac <__assert_fail@plt+0x1020c>
   21d58:	mov	r3, #0
   21d5c:	strb	r3, [sp, #40]	; 0x28
   21d60:	mov	r0, #0
   21d64:	add	r3, sp, #48	; 0x30
   21d68:	mov	r2, r5
   21d6c:	add	r1, sp, #40	; 0x28
   21d70:	str	r0, [sp, #48]	; 0x30
   21d74:	str	r0, [sp, #52]	; 0x34
   21d78:	bl	1f13c <__assert_fail@plt+0xd79c>
   21d7c:	ldrb	r3, [sp, #40]	; 0x28
   21d80:	cmn	r0, #2
   21d84:	strbeq	r5, [r6, r3]
   21d88:	add	r3, r3, #1
   21d8c:	uxtb	r3, r3
   21d90:	cmp	r3, #0
   21d94:	strb	r3, [sp, #40]	; 0x28
   21d98:	bne	21d60 <__assert_fail@plt+0x103c0>
   21d9c:	b	21bac <__assert_fail@plt+0x1020c>
   21da0:	mov	r0, r6
   21da4:	mov	r2, #256	; 0x100
   21da8:	mov	r1, #1
   21dac:	bl	11814 <memset@plt>
   21db0:	ldr	r2, [sp, #28]
   21db4:	ldrb	r3, [r2, #28]
   21db8:	orr	r3, r3, #1
   21dbc:	strb	r3, [r2, #28]
   21dc0:	add	sp, sp, #308	; 0x134
   21dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21dc8:	ldr	r0, [sp, #36]	; 0x24
   21dcc:	bl	115f8 <towlower@plt>
   21dd0:	add	r2, sp, #40	; 0x28
   21dd4:	mov	r1, r0
   21dd8:	add	r0, sp, #48	; 0x30
   21ddc:	bl	1152c <wcrtomb@plt>
   21de0:	cmn	r0, #1
   21de4:	ldrbne	r3, [sp, #48]	; 0x30
   21de8:	strbne	r5, [r6, r3]
   21dec:	b	21bac <__assert_fail@plt+0x1020c>
   21df0:	add	r4, sp, #49	; 0x31
   21df4:	b	21b7c <__assert_fail@plt+0x101dc>
   21df8:	mov	r0, r6
   21dfc:	mov	r2, #256	; 0x100
   21e00:	mov	r1, #1
   21e04:	bl	11814 <memset@plt>
   21e08:	cmp	r4, #2
   21e0c:	beq	21db0 <__assert_fail@plt+0x10410>
   21e10:	add	sp, sp, #308	; 0x134
   21e14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e18:	eoreq	r0, r0, r1
   21e1c:	add	ip, r0, r2, lsl #3
   21e20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21e24:	ldrb	r6, [ip, #4]
   21e28:	ldr	r7, [sp, #32]
   21e2c:	cmp	r6, #7
   21e30:	beq	21f10 <__assert_fail@plt+0x10570>
   21e34:	ldr	ip, [r3, #80]	; 0x50
   21e38:	cmp	ip, #1
   21e3c:	beq	21f20 <__assert_fail@plt+0x10580>
   21e40:	ldr	r5, [r3, #28]
   21e44:	add	lr, r7, #1
   21e48:	cmp	r5, lr
   21e4c:	ble	21f20 <__assert_fail@plt+0x10580>
   21e50:	ldr	r8, [r3, #8]
   21e54:	add	ip, r8, lr, lsl #2
   21e58:	ldr	lr, [r8, lr, lsl #2]
   21e5c:	cmn	lr, #1
   21e60:	subeq	r5, r5, r7
   21e64:	moveq	r4, #1
   21e68:	beq	21e7c <__assert_fail@plt+0x104dc>
   21e6c:	b	21f20 <__assert_fail@plt+0x10580>
   21e70:	ldr	lr, [ip, #4]!
   21e74:	cmn	lr, #1
   21e78:	bne	21e88 <__assert_fail@plt+0x104e8>
   21e7c:	add	r4, r4, #1
   21e80:	cmp	r4, r5
   21e84:	bne	21e70 <__assert_fail@plt+0x104d0>
   21e88:	cmp	r6, #5
   21e8c:	beq	21f2c <__assert_fail@plt+0x1058c>
   21e90:	cmp	r4, #1
   21e94:	sub	r6, r6, #6
   21e98:	clz	r6, r6
   21e9c:	lsr	r6, r6, #5
   21ea0:	moveq	r6, #0
   21ea4:	cmp	r6, #0
   21ea8:	beq	21f20 <__assert_fail@plt+0x10580>
   21eac:	ldr	r9, [r0, r2, lsl #3]
   21eb0:	ldr	ip, [r9, #32]
   21eb4:	cmp	ip, #0
   21eb8:	beq	21f68 <__assert_fail@plt+0x105c8>
   21ebc:	ldr	r0, [r9, #20]
   21ec0:	cmp	r0, #0
   21ec4:	ldr	r5, [r8, r7, lsl #2]
   21ec8:	ble	21efc <__assert_fail@plt+0x1055c>
   21ecc:	ldr	r2, [r9]
   21ed0:	ldr	r3, [r2]
   21ed4:	cmp	r5, r3
   21ed8:	movne	r3, #0
   21edc:	bne	21ef0 <__assert_fail@plt+0x10550>
   21ee0:	b	21fb8 <__assert_fail@plt+0x10618>
   21ee4:	ldr	r1, [r2, #4]!
   21ee8:	cmp	r5, r1
   21eec:	beq	21fb8 <__assert_fail@plt+0x10618>
   21ef0:	add	r3, r3, #1
   21ef4:	cmp	r3, r0
   21ef8:	bne	21ee4 <__assert_fail@plt+0x10544>
   21efc:	ldr	r3, [r9, #36]	; 0x24
   21f00:	cmp	r3, #0
   21f04:	ble	22000 <__assert_fail@plt+0x10660>
   21f08:	mov	r6, #0
   21f0c:	b	21f9c <__assert_fail@plt+0x105fc>
   21f10:	ldr	r1, [r3, #4]
   21f14:	ldrb	r2, [r1, r7]
   21f18:	cmp	r2, #193	; 0xc1
   21f1c:	bhi	21fc8 <__assert_fail@plt+0x10628>
   21f20:	mov	r4, #0
   21f24:	mov	r0, r4
   21f28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21f2c:	ldr	r2, [r1]
   21f30:	tst	r2, #64	; 0x40
   21f34:	beq	21f54 <__assert_fail@plt+0x105b4>
   21f38:	tst	r2, #128	; 0x80
   21f3c:	beq	21f24 <__assert_fail@plt+0x10584>
   21f40:	ldr	r3, [r3, #4]
   21f44:	ldrb	r3, [r3, r7]
   21f48:	cmp	r3, #0
   21f4c:	beq	21f20 <__assert_fail@plt+0x10580>
   21f50:	b	21f24 <__assert_fail@plt+0x10584>
   21f54:	ldr	r1, [r3, #4]
   21f58:	ldrb	r1, [r1, r7]
   21f5c:	cmp	r1, #10
   21f60:	bne	21f38 <__assert_fail@plt+0x10598>
   21f64:	b	21f20 <__assert_fail@plt+0x10580>
   21f68:	ldr	r3, [r9, #36]	; 0x24
   21f6c:	ldr	r0, [r9, #20]
   21f70:	cmp	r3, #0
   21f74:	bne	21ec0 <__assert_fail@plt+0x10520>
   21f78:	cmp	r0, #0
   21f7c:	bne	21ec0 <__assert_fail@plt+0x10520>
   21f80:	ldrb	r3, [r9, #16]
   21f84:	tst	r3, #1
   21f88:	bne	21f24 <__assert_fail@plt+0x10584>
   21f8c:	b	21f20 <__assert_fail@plt+0x10580>
   21f90:	ldr	r3, [r9, #36]	; 0x24
   21f94:	cmp	r6, r3
   21f98:	bge	21ffc <__assert_fail@plt+0x1065c>
   21f9c:	ldr	r3, [r9, #12]
   21fa0:	mov	r0, r5
   21fa4:	ldr	r1, [r3, r6, lsl #2]
   21fa8:	bl	11538 <iswctype@plt>
   21fac:	add	r6, r6, #1
   21fb0:	cmp	r0, #0
   21fb4:	beq	21f90 <__assert_fail@plt+0x105f0>
   21fb8:	ldrb	r3, [r9, #16]
   21fbc:	tst	r3, #1
   21fc0:	beq	21f24 <__assert_fail@plt+0x10584>
   21fc4:	b	21f20 <__assert_fail@plt+0x10580>
   21fc8:	ldr	lr, [r3, #48]	; 0x30
   21fcc:	add	ip, r7, #1
   21fd0:	cmp	ip, lr
   21fd4:	bge	21f20 <__assert_fail@plt+0x10580>
   21fd8:	add	r0, r1, r7
   21fdc:	cmp	r2, #223	; 0xdf
   21fe0:	ldrb	r3, [r0, #1]
   21fe4:	bhi	22044 <__assert_fail@plt+0x106a4>
   21fe8:	eor	r3, r3, #128	; 0x80
   21fec:	cmp	r3, #63	; 0x3f
   21ff0:	movls	r4, #2
   21ff4:	bls	21f24 <__assert_fail@plt+0x10584>
   21ff8:	b	21f20 <__assert_fail@plt+0x10580>
   21ffc:	ldr	ip, [r9, #32]
   22000:	cmp	ip, #0
   22004:	ble	21f80 <__assert_fail@plt+0x105e0>
   22008:	ldr	r2, [r9, #4]
   2200c:	mov	r3, #0
   22010:	sub	r2, r2, #4
   22014:	b	22024 <__assert_fail@plt+0x10684>
   22018:	add	r3, r3, #1
   2201c:	cmp	r3, ip
   22020:	beq	21f80 <__assert_fail@plt+0x105e0>
   22024:	ldr	r1, [r2, #4]!
   22028:	cmp	r5, r1
   2202c:	bcc	22018 <__assert_fail@plt+0x10678>
   22030:	ldr	r1, [r9, #8]
   22034:	ldr	r1, [r1, r3, lsl #2]
   22038:	cmp	r5, r1
   2203c:	bhi	22018 <__assert_fail@plt+0x10678>
   22040:	b	21fb8 <__assert_fail@plt+0x10618>
   22044:	cmp	r2, #239	; 0xef
   22048:	bhi	220d4 <__assert_fail@plt+0x10734>
   2204c:	cmp	r3, #159	; 0x9f
   22050:	cmpls	r2, #224	; 0xe0
   22054:	movne	r4, #3
   22058:	beq	21f20 <__assert_fail@plt+0x10580>
   2205c:	add	r7, r7, r4
   22060:	cmp	lr, r7
   22064:	blt	21f20 <__assert_fail@plt+0x10580>
   22068:	ldrb	r3, [r1, ip]
   2206c:	eor	r3, r3, #128	; 0x80
   22070:	cmp	r3, #63	; 0x3f
   22074:	bhi	21f20 <__assert_fail@plt+0x10580>
   22078:	ldrb	r3, [r0, #2]
   2207c:	eor	r3, r3, #128	; 0x80
   22080:	cmp	r3, #63	; 0x3f
   22084:	bhi	21f20 <__assert_fail@plt+0x10580>
   22088:	cmp	r4, #3
   2208c:	beq	21f24 <__assert_fail@plt+0x10584>
   22090:	ldrb	r3, [r0, #3]
   22094:	eor	r3, r3, #128	; 0x80
   22098:	cmp	r3, #63	; 0x3f
   2209c:	bhi	21f20 <__assert_fail@plt+0x10580>
   220a0:	cmp	r4, #4
   220a4:	beq	21f24 <__assert_fail@plt+0x10584>
   220a8:	ldrb	r3, [r0, #4]
   220ac:	eor	r3, r3, #128	; 0x80
   220b0:	cmp	r3, #63	; 0x3f
   220b4:	bhi	21f20 <__assert_fail@plt+0x10580>
   220b8:	cmp	r4, #6
   220bc:	bne	22128 <__assert_fail@plt+0x10788>
   220c0:	ldrb	r3, [r0, #5]
   220c4:	eor	r3, r3, #128	; 0x80
   220c8:	cmp	r3, #63	; 0x3f
   220cc:	bls	21f24 <__assert_fail@plt+0x10584>
   220d0:	b	21f20 <__assert_fail@plt+0x10580>
   220d4:	cmp	r2, #247	; 0xf7
   220d8:	bhi	220f0 <__assert_fail@plt+0x10750>
   220dc:	cmp	r3, #143	; 0x8f
   220e0:	cmpls	r2, #240	; 0xf0
   220e4:	movne	r4, #4
   220e8:	bne	2205c <__assert_fail@plt+0x106bc>
   220ec:	b	21f20 <__assert_fail@plt+0x10580>
   220f0:	cmp	r2, #251	; 0xfb
   220f4:	bhi	2210c <__assert_fail@plt+0x1076c>
   220f8:	cmp	r3, #135	; 0x87
   220fc:	cmpls	r2, #248	; 0xf8
   22100:	movne	r4, #5
   22104:	bne	2205c <__assert_fail@plt+0x106bc>
   22108:	b	21f20 <__assert_fail@plt+0x10580>
   2210c:	cmp	r2, #253	; 0xfd
   22110:	bhi	21f20 <__assert_fail@plt+0x10580>
   22114:	cmp	r3, #131	; 0x83
   22118:	cmpls	r2, #252	; 0xfc
   2211c:	beq	21f20 <__assert_fail@plt+0x10580>
   22120:	mov	r4, #6
   22124:	b	2205c <__assert_fail@plt+0x106bc>
   22128:	mov	r4, #5
   2212c:	b	21f24 <__assert_fail@plt+0x10584>
   22130:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22134:	sub	sp, sp, #8
   22138:	ldr	r6, [r1, #40]	; 0x28
   2213c:	ldr	r3, [r1, #56]	; 0x38
   22140:	cmp	r3, r6
   22144:	ble	223b8 <__assert_fail@plt+0x10a18>
   22148:	ldr	sl, [r1, #4]
   2214c:	ldrb	r3, [r0, #6]
   22150:	mov	r8, r2
   22154:	ldrb	r7, [sl, r6]
   22158:	and	r3, r3, #159	; 0x9f
   2215c:	strb	r3, [r0, #6]
   22160:	strb	r7, [r0]
   22164:	ldr	r3, [r1, #80]	; 0x50
   22168:	mov	r5, r0
   2216c:	cmp	r3, #1
   22170:	mov	r4, r1
   22174:	ble	223cc <__assert_fail@plt+0x10a2c>
   22178:	ldr	r2, [r1, #28]
   2217c:	cmp	r6, r2
   22180:	beq	22194 <__assert_fail@plt+0x107f4>
   22184:	ldr	r2, [r1, #8]
   22188:	ldr	r2, [r2, r6, lsl #2]
   2218c:	cmn	r2, #1
   22190:	beq	2262c <__assert_fail@plt+0x10c8c>
   22194:	cmp	r7, #92	; 0x5c
   22198:	beq	22434 <__assert_fail@plt+0x10a94>
   2219c:	ldr	r3, [r4, #8]
   221a0:	mov	r2, #1
   221a4:	strb	r2, [r5, #4]
   221a8:	ldr	r9, [r3, r6, lsl #2]
   221ac:	mov	r0, r9
   221b0:	bl	117e4 <iswalnum@plt>
   221b4:	ldrb	r3, [r5, #6]
   221b8:	sub	r9, r9, #95	; 0x5f
   221bc:	clz	r9, r9
   221c0:	lsr	r9, r9, #5
   221c4:	bic	r3, r3, #64	; 0x40
   221c8:	cmp	r0, #0
   221cc:	orrne	r9, r9, #1
   221d0:	orr	r9, r3, r9, lsl #6
   221d4:	strb	r9, [r5, #6]
   221d8:	sub	r7, r7, #10
   221dc:	cmp	r7, #115	; 0x73
   221e0:	ldrls	pc, [pc, r7, lsl #2]
   221e4:	b	22428 <__assert_fail@plt+0x10a88>
   221e8:	andeq	r2, r2, r0, ror r6
   221ec:	andeq	r2, r2, r8, lsr #8
   221f0:	andeq	r2, r2, r8, lsr #8
   221f4:	andeq	r2, r2, r8, lsr #8
   221f8:	andeq	r2, r2, r8, lsr #8
   221fc:	andeq	r2, r2, r8, lsr #8
   22200:	andeq	r2, r2, r8, lsr #8
   22204:	andeq	r2, r2, r8, lsr #8
   22208:	andeq	r2, r2, r8, lsr #8
   2220c:	andeq	r2, r2, r8, lsr #8
   22210:	andeq	r2, r2, r8, lsr #8
   22214:	andeq	r2, r2, r8, lsr #8
   22218:	andeq	r2, r2, r8, lsr #8
   2221c:	andeq	r2, r2, r8, lsr #8
   22220:	andeq	r2, r2, r8, lsr #8
   22224:	andeq	r2, r2, r8, lsr #8
   22228:	andeq	r2, r2, r8, lsr #8
   2222c:	andeq	r2, r2, r8, lsr #8
   22230:	andeq	r2, r2, r8, lsr #8
   22234:	andeq	r2, r2, r8, lsr #8
   22238:	andeq	r2, r2, r8, lsr #8
   2223c:	andeq	r2, r2, r8, lsr #8
   22240:	andeq	r2, r2, r8, lsr #8
   22244:	andeq	r2, r2, r8, lsr #8
   22248:	andeq	r2, r2, r8, lsr #8
   2224c:	andeq	r2, r2, r8, lsr #8
   22250:	andeq	r2, r2, r8, lsl #13
   22254:	andeq	r2, r2, r8, lsr #8
   22258:	andeq	r2, r2, r8, lsr #8
   2225c:	andeq	r2, r2, r8, lsr #8
   22260:	andeq	r2, r2, r8, ror #13
   22264:	andeq	r2, r2, r0, lsl #14
   22268:	andeq	r2, r2, r8, lsl r7
   2226c:	andeq	r2, r2, r8, lsr #14
   22270:	andeq	r2, r2, r8, lsr #8
   22274:	andeq	r2, r2, r8, lsr #8
   22278:	andeq	r2, r2, r8, asr #14
   2227c:	andeq	r2, r2, r8, lsr #8
   22280:	andeq	r2, r2, r8, lsr #8
   22284:	andeq	r2, r2, r8, lsr #8
   22288:	andeq	r2, r2, r8, lsr #8
   2228c:	andeq	r2, r2, r8, lsr #8
   22290:	andeq	r2, r2, r8, lsr #8
   22294:	andeq	r2, r2, r8, lsr #8
   22298:	andeq	r2, r2, r8, lsr #8
   2229c:	andeq	r2, r2, r8, lsr #8
   222a0:	andeq	r2, r2, r8, lsr #8
   222a4:	andeq	r2, r2, r8, lsr #8
   222a8:	andeq	r2, r2, r8, lsr #8
   222ac:	andeq	r2, r2, r8, lsr #8
   222b0:	andeq	r2, r2, r8, lsr #8
   222b4:	andeq	r2, r2, r8, lsr #8
   222b8:	andeq	r2, r2, r8, lsr #8
   222bc:	andeq	r2, r2, r8, asr r7
   222c0:	andeq	r2, r2, r8, lsr #8
   222c4:	andeq	r2, r2, r8, lsr #8
   222c8:	andeq	r2, r2, r8, lsr #8
   222cc:	andeq	r2, r2, r8, lsr #8
   222d0:	andeq	r2, r2, r8, lsr #8
   222d4:	andeq	r2, r2, r8, lsr #8
   222d8:	andeq	r2, r2, r8, lsr #8
   222dc:	andeq	r2, r2, r8, lsr #8
   222e0:	andeq	r2, r2, r8, lsr #8
   222e4:	andeq	r2, r2, r8, lsr #8
   222e8:	andeq	r2, r2, r8, lsr #8
   222ec:	andeq	r2, r2, r8, lsr #8
   222f0:	andeq	r2, r2, r8, lsr #8
   222f4:	andeq	r2, r2, r8, lsr #8
   222f8:	andeq	r2, r2, r8, lsr #8
   222fc:	andeq	r2, r2, r8, lsr #8
   22300:	andeq	r2, r2, r8, lsr #8
   22304:	andeq	r2, r2, r8, lsr #8
   22308:	andeq	r2, r2, r8, lsr #8
   2230c:	andeq	r2, r2, r8, lsr #8
   22310:	andeq	r2, r2, r8, lsr #8
   22314:	andeq	r2, r2, r8, lsr #8
   22318:	andeq	r2, r2, r8, lsr #8
   2231c:	andeq	r2, r2, r8, lsr #8
   22320:	andeq	r2, r2, r8, lsr #8
   22324:	andeq	r2, r2, r8, lsr #8
   22328:	andeq	r2, r2, r8, lsr #8
   2232c:	andeq	r2, r2, r8, ror r7
   22330:	andeq	r2, r2, r8, lsr #8
   22334:	andeq	r2, r2, r8, lsr #8
   22338:	andeq	r2, r2, r8, lsl #15
   2233c:	andeq	r2, r2, r8, lsr #8
   22340:	andeq	r2, r2, r8, lsr #8
   22344:	andeq	r2, r2, r8, lsr #8
   22348:	andeq	r2, r2, r8, lsr #8
   2234c:	andeq	r2, r2, r8, lsr #8
   22350:	andeq	r2, r2, r8, lsr #8
   22354:	andeq	r2, r2, r8, lsr #8
   22358:	andeq	r2, r2, r8, lsr #8
   2235c:	andeq	r2, r2, r8, lsr #8
   22360:	andeq	r2, r2, r8, lsr #8
   22364:	andeq	r2, r2, r8, lsr #8
   22368:	andeq	r2, r2, r8, lsr #8
   2236c:	andeq	r2, r2, r8, lsr #8
   22370:	andeq	r2, r2, r8, lsr #8
   22374:	andeq	r2, r2, r8, lsr #8
   22378:	andeq	r2, r2, r8, lsr #8
   2237c:	andeq	r2, r2, r8, lsr #8
   22380:	andeq	r2, r2, r8, lsr #8
   22384:	andeq	r2, r2, r8, lsr #8
   22388:	andeq	r2, r2, r8, lsr #8
   2238c:	andeq	r2, r2, r8, lsr #8
   22390:	andeq	r2, r2, r8, lsr #8
   22394:	andeq	r2, r2, r8, lsr #8
   22398:	andeq	r2, r2, r8, lsr #8
   2239c:	andeq	r2, r2, r8, lsr #8
   223a0:	andeq	r2, r2, r8, lsr #8
   223a4:	andeq	r2, r2, r8, lsr #8
   223a8:	andeq	r2, r2, r8, lsr #8
   223ac:	andeq	r2, r2, r0, lsl r4
   223b0:	andeq	r2, r2, r0, ror #15
   223b4:	andeq	r2, r2, r4, asr r6
   223b8:	mov	r3, #2
   223bc:	strb	r3, [r0, #4]
   223c0:	mov	r0, #0
   223c4:	add	sp, sp, #8
   223c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   223cc:	cmp	r7, #92	; 0x5c
   223d0:	beq	22434 <__assert_fail@plt+0x10a94>
   223d4:	mov	r3, #1
   223d8:	strb	r3, [r5, #4]
   223dc:	bl	11778 <__ctype_b_loc@plt>
   223e0:	lsl	r1, r7, #1
   223e4:	ldrb	r2, [r5, #6]
   223e8:	bic	r2, r2, #64	; 0x40
   223ec:	ldr	r3, [r0]
   223f0:	ldrh	r3, [r3, r1]
   223f4:	lsr	r3, r3, #3
   223f8:	and	r3, r3, #1
   223fc:	cmp	r7, #95	; 0x5f
   22400:	orreq	r3, r3, #1
   22404:	orr	r3, r2, r3, lsl #6
   22408:	strb	r3, [r5, #6]
   2240c:	b	221d8 <__assert_fail@plt+0x10838>
   22410:	and	r8, r8, #4608	; 0x1200
   22414:	cmp	r8, #4608	; 0x1200
   22418:	moveq	r3, #23
   2241c:	strbeq	r3, [r5, #4]
   22420:	moveq	r0, #1
   22424:	beq	223c4 <__assert_fail@plt+0x10a24>
   22428:	mov	r0, #1
   2242c:	add	sp, sp, #8
   22430:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22434:	ldr	r1, [r4, #48]	; 0x30
   22438:	add	r2, r6, #1
   2243c:	cmp	r2, r1
   22440:	bge	22644 <__assert_fail@plt+0x10ca4>
   22444:	ldrb	r1, [r4, #75]	; 0x4b
   22448:	cmp	r1, #0
   2244c:	bne	22a00 <__assert_fail@plt+0x11060>
   22450:	ldrb	r6, [sl, r2]
   22454:	cmp	r3, #1
   22458:	mov	r3, #1
   2245c:	strb	r6, [r5]
   22460:	strb	r3, [r5, #4]
   22464:	ble	229cc <__assert_fail@plt+0x1102c>
   22468:	ldr	r1, [r4, #8]
   2246c:	add	r1, r1, r2, lsl #2
   22470:	ldr	r4, [r1]
   22474:	mov	r0, r4
   22478:	bl	117e4 <iswalnum@plt>
   2247c:	ldrb	r3, [r5, #6]
   22480:	sub	r4, r4, #95	; 0x5f
   22484:	clz	r4, r4
   22488:	lsr	r4, r4, #5
   2248c:	bic	r3, r3, #64	; 0x40
   22490:	cmp	r0, #0
   22494:	orrne	r4, r4, #1
   22498:	orr	r4, r3, r4, lsl #6
   2249c:	strb	r4, [r5, #6]
   224a0:	sub	r3, r6, #39	; 0x27
   224a4:	cmp	r3, #86	; 0x56
   224a8:	ldrls	pc, [pc, r3, lsl #2]
   224ac:	b	22624 <__assert_fail@plt+0x10c84>
   224b0:	andeq	r2, r2, r8, lsl #16
   224b4:	strdeq	r2, [r2], -r0
   224b8:			; <UNDEFINED> instruction: 0x000229b4
   224bc:	andeq	r2, r2, r4, lsr #12
   224c0:	muleq	r2, r8, r9
   224c4:	andeq	r2, r2, r4, lsr #12
   224c8:	andeq	r2, r2, r4, lsr #12
   224cc:	andeq	r2, r2, r4, lsr #12
   224d0:	andeq	r2, r2, r4, lsr #12
   224d4:	andeq	r2, r2, r4, lsr #12
   224d8:	andeq	r2, r2, r8, ror r9
   224dc:	andeq	r2, r2, r8, ror r9
   224e0:	andeq	r2, r2, r8, ror r9
   224e4:	andeq	r2, r2, r8, ror r9
   224e8:	andeq	r2, r2, r8, ror r9
   224ec:	andeq	r2, r2, r8, ror r9
   224f0:	andeq	r2, r2, r8, ror r9
   224f4:	andeq	r2, r2, r8, ror r9
   224f8:	andeq	r2, r2, r8, ror r9
   224fc:	andeq	r2, r2, r4, lsr #12
   22500:	andeq	r2, r2, r4, lsr #12
   22504:	andeq	r2, r2, r8, asr r9
   22508:	andeq	r2, r2, r4, lsr #12
   2250c:	andeq	r2, r2, r8, lsr r9
   22510:	andeq	r2, r2, ip, lsl r9
   22514:	andeq	r2, r2, r4, lsr #12
   22518:	andeq	r2, r2, r4, lsr #12
   2251c:	strdeq	r2, [r2], -ip
   22520:	andeq	r2, r2, r4, lsr #12
   22524:	andeq	r2, r2, r4, lsr #12
   22528:	andeq	r2, r2, r4, lsr #12
   2252c:	andeq	r2, r2, r4, lsr #12
   22530:	andeq	r2, r2, r4, lsr #12
   22534:	andeq	r2, r2, r4, lsr #12
   22538:	andeq	r2, r2, r4, lsr #12
   2253c:	andeq	r2, r2, r4, lsr #12
   22540:	andeq	r2, r2, r4, lsr #12
   22544:	andeq	r2, r2, r4, lsr #12
   22548:	andeq	r2, r2, r4, lsr #12
   2254c:	andeq	r2, r2, r4, lsr #12
   22550:	andeq	r2, r2, r4, lsr #12
   22554:	andeq	r2, r2, r4, lsr #12
   22558:	andeq	r2, r2, r4, lsr #12
   2255c:	andeq	r2, r2, r4, lsr #12
   22560:	andeq	r2, r2, r4, ror #17
   22564:	andeq	r2, r2, r4, lsr #12
   22568:	andeq	r2, r2, r4, lsr #12
   2256c:	andeq	r2, r2, r4, lsr #12
   22570:	andeq	r2, r2, ip, asr #17
   22574:	andeq	r2, r2, r4, lsr #12
   22578:	andeq	r2, r2, r4, lsr #12
   2257c:	andeq	r2, r2, r4, lsr #12
   22580:	andeq	r2, r2, r4, lsr #12
   22584:	andeq	r2, r2, r4, lsr #12
   22588:	andeq	r2, r2, r4, lsr #12
   2258c:	andeq	r2, r2, r4, lsr #12
   22590:	andeq	r2, r2, r4, lsr #12
   22594:	andeq	r2, r2, ip, lsr #17
   22598:	andeq	r2, r2, r4, lsr #12
   2259c:	andeq	r2, r2, ip, lsl #17
   225a0:	andeq	r2, r2, r4, lsr #12
   225a4:	andeq	r2, r2, r4, lsr #12
   225a8:	andeq	r2, r2, r4, lsr #12
   225ac:	andeq	r2, r2, r4, lsr #12
   225b0:	andeq	r2, r2, r4, lsr #12
   225b4:	andeq	r2, r2, r4, lsr #12
   225b8:	andeq	r2, r2, r4, lsr #12
   225bc:	andeq	r2, r2, r4, lsr #12
   225c0:	andeq	r2, r2, r4, lsr #12
   225c4:	andeq	r2, r2, r4, lsr #12
   225c8:	andeq	r2, r2, r4, lsr #12
   225cc:	andeq	r2, r2, r4, lsr #12
   225d0:	andeq	r2, r2, r4, lsr #12
   225d4:	andeq	r2, r2, r4, lsr #12
   225d8:	andeq	r2, r2, r4, lsr #12
   225dc:	andeq	r2, r2, r4, lsr #12
   225e0:	andeq	r2, r2, r4, ror r8
   225e4:	andeq	r2, r2, r4, lsr #12
   225e8:	andeq	r2, r2, r4, lsr #12
   225ec:	andeq	r2, r2, r4, lsr #12
   225f0:	andeq	r2, r2, ip, asr r8
   225f4:	andeq	r2, r2, r4, lsr #12
   225f8:	andeq	r2, r2, r4, lsr #12
   225fc:	andeq	r2, r2, r4, lsr #12
   22600:	andeq	r2, r2, ip, lsl #12
   22604:	andeq	r2, r2, r4, asr #16
   22608:	andeq	r2, r2, r8, lsr #16
   2260c:	and	r8, r8, #4608	; 0x1200
   22610:	cmp	r8, #512	; 0x200
   22614:	moveq	r3, #23
   22618:	strbeq	r3, [r5, #4]
   2261c:	moveq	r0, #2
   22620:	beq	223c4 <__assert_fail@plt+0x10a24>
   22624:	mov	r0, #2
   22628:	b	223c4 <__assert_fail@plt+0x10a24>
   2262c:	ldrb	r3, [r0, #6]
   22630:	mov	r0, #1
   22634:	strb	r0, [r5, #4]
   22638:	orr	r3, r3, #32
   2263c:	strb	r3, [r5, #6]
   22640:	b	223c4 <__assert_fail@plt+0x10a24>
   22644:	mov	r3, #36	; 0x24
   22648:	strb	r3, [r5, #4]
   2264c:	mov	r0, #1
   22650:	b	223c4 <__assert_fail@plt+0x10a24>
   22654:	and	r8, r8, #4608	; 0x1200
   22658:	cmp	r8, #4608	; 0x1200
   2265c:	moveq	r3, #24
   22660:	strbeq	r3, [r5, #4]
   22664:	moveq	r0, #1
   22668:	bne	22428 <__assert_fail@plt+0x10a88>
   2266c:	b	223c4 <__assert_fail@plt+0x10a24>
   22670:	tst	r8, #2048	; 0x800
   22674:	beq	22428 <__assert_fail@plt+0x10a88>
   22678:	mov	r3, #10
   2267c:	strb	r3, [r5, #4]
   22680:	mov	r0, #1
   22684:	b	223c4 <__assert_fail@plt+0x10a24>
   22688:	tst	r8, #8
   2268c:	bne	226d0 <__assert_fail@plt+0x10d30>
   22690:	ldr	r3, [r4, #48]	; 0x30
   22694:	add	r6, r6, #1
   22698:	cmp	r6, r3
   2269c:	beq	226d0 <__assert_fail@plt+0x10d30>
   226a0:	mov	r2, r8
   226a4:	str	r6, [r4, #40]	; 0x28
   226a8:	mov	r1, r4
   226ac:	mov	r0, sp
   226b0:	bl	22130 <__assert_fail@plt+0x10790>
   226b4:	ldrb	r2, [sp, #4]
   226b8:	ldr	r3, [r4, #40]	; 0x28
   226bc:	sub	r2, r2, #9
   226c0:	sub	r3, r3, #1
   226c4:	cmp	r2, #1
   226c8:	str	r3, [r4, #40]	; 0x28
   226cc:	bhi	22428 <__assert_fail@plt+0x10a88>
   226d0:	mov	r2, #12
   226d4:	mov	r3, #32
   226d8:	strb	r2, [r5, #4]
   226dc:	str	r3, [r5]
   226e0:	mov	r0, #1
   226e4:	b	223c4 <__assert_fail@plt+0x10a24>
   226e8:	tst	r8, #8192	; 0x2000
   226ec:	beq	22428 <__assert_fail@plt+0x10a88>
   226f0:	mov	r3, #8
   226f4:	strb	r3, [r5, #4]
   226f8:	mov	r0, #1
   226fc:	b	223c4 <__assert_fail@plt+0x10a24>
   22700:	tst	r8, #8192	; 0x2000
   22704:	beq	22428 <__assert_fail@plt+0x10a88>
   22708:	mov	r3, #9
   2270c:	strb	r3, [r5, #4]
   22710:	mov	r0, #1
   22714:	b	223c4 <__assert_fail@plt+0x10a24>
   22718:	mov	r3, #11
   2271c:	strb	r3, [r5, #4]
   22720:	mov	r0, #1
   22724:	b	223c4 <__assert_fail@plt+0x10a24>
   22728:	ldr	r3, [pc, #864]	; 22a90 <__assert_fail@plt+0x110f0>
   2272c:	and	r3, r3, r8
   22730:	cmp	r3, #0
   22734:	bne	22428 <__assert_fail@plt+0x10a88>
   22738:	mov	r3, #18
   2273c:	strb	r3, [r5, #4]
   22740:	mov	r0, #1
   22744:	b	223c4 <__assert_fail@plt+0x10a24>
   22748:	mov	r3, #5
   2274c:	strb	r3, [r5, #4]
   22750:	mov	r0, #1
   22754:	b	223c4 <__assert_fail@plt+0x10a24>
   22758:	ldr	r3, [pc, #816]	; 22a90 <__assert_fail@plt+0x110f0>
   2275c:	and	r3, r3, r8
   22760:	cmp	r3, #0
   22764:	bne	22428 <__assert_fail@plt+0x10a88>
   22768:	mov	r3, #19
   2276c:	strb	r3, [r5, #4]
   22770:	mov	r0, #1
   22774:	b	223c4 <__assert_fail@plt+0x10a24>
   22778:	mov	r3, #20
   2277c:	strb	r3, [r5, #4]
   22780:	mov	r0, #1
   22784:	b	223c4 <__assert_fail@plt+0x10a24>
   22788:	ldr	r3, [pc, #772]	; 22a94 <__assert_fail@plt+0x110f4>
   2278c:	cmp	r6, #0
   22790:	and	r3, r3, r8
   22794:	clz	r3, r3
   22798:	lsr	r3, r3, #5
   2279c:	moveq	r3, #0
   227a0:	cmp	r3, #0
   227a4:	beq	227c8 <__assert_fail@plt+0x10e28>
   227a8:	add	r6, sl, r6
   227ac:	lsr	r3, r8, #11
   227b0:	ldrb	r2, [r6, #-1]
   227b4:	eor	r3, r3, #1
   227b8:	cmp	r2, #10
   227bc:	orrne	r3, r3, #1
   227c0:	tst	r3, #1
   227c4:	bne	22428 <__assert_fail@plt+0x10a88>
   227c8:	mov	r2, #12
   227cc:	mov	r3, #16
   227d0:	strb	r2, [r5, #4]
   227d4:	str	r3, [r5]
   227d8:	mov	r0, #1
   227dc:	b	223c4 <__assert_fail@plt+0x10a24>
   227e0:	and	r8, r8, #33792	; 0x8400
   227e4:	cmp	r8, #32768	; 0x8000
   227e8:	bne	22428 <__assert_fail@plt+0x10a88>
   227ec:	b	22678 <__assert_fail@plt+0x10cd8>
   227f0:	tst	r8, #8192	; 0x2000
   227f4:	bne	22624 <__assert_fail@plt+0x10c84>
   227f8:	mov	r3, #8
   227fc:	strb	r3, [r5, #4]
   22800:	mov	r0, #2
   22804:	b	223c4 <__assert_fail@plt+0x10a24>
   22808:	tst	r8, #524288	; 0x80000
   2280c:	bne	22624 <__assert_fail@plt+0x10c84>
   22810:	mov	r2, #12
   22814:	mov	r3, #128	; 0x80
   22818:	strb	r2, [r5, #4]
   2281c:	str	r3, [r5]
   22820:	mov	r0, #2
   22824:	b	223c4 <__assert_fail@plt+0x10a24>
   22828:	and	r8, r8, #4608	; 0x1200
   2282c:	cmp	r8, #512	; 0x200
   22830:	moveq	r3, #24
   22834:	strbeq	r3, [r5, #4]
   22838:	moveq	r0, #2
   2283c:	bne	22624 <__assert_fail@plt+0x10c84>
   22840:	b	223c4 <__assert_fail@plt+0x10a24>
   22844:	tst	r8, #33792	; 0x8400
   22848:	bne	22624 <__assert_fail@plt+0x10c84>
   2284c:	mov	r3, #10
   22850:	strb	r3, [r5, #4]
   22854:	mov	r0, #2
   22858:	b	223c4 <__assert_fail@plt+0x10a24>
   2285c:	tst	r8, #524288	; 0x80000
   22860:	bne	22624 <__assert_fail@plt+0x10c84>
   22864:	mov	r3, #32
   22868:	strb	r3, [r5, #4]
   2286c:	mov	r0, #2
   22870:	b	223c4 <__assert_fail@plt+0x10a24>
   22874:	tst	r8, #524288	; 0x80000
   22878:	bne	22624 <__assert_fail@plt+0x10c84>
   2287c:	mov	r3, #34	; 0x22
   22880:	strb	r3, [r5, #4]
   22884:	mov	r0, #2
   22888:	b	223c4 <__assert_fail@plt+0x10a24>
   2288c:	tst	r8, #524288	; 0x80000
   22890:	bne	22624 <__assert_fail@plt+0x10c84>
   22894:	mov	r2, #12
   22898:	mov	r3, #256	; 0x100
   2289c:	strb	r2, [r5, #4]
   228a0:	str	r3, [r5]
   228a4:	mov	r0, #2
   228a8:	b	223c4 <__assert_fail@plt+0x10a24>
   228ac:	tst	r8, #524288	; 0x80000
   228b0:	bne	22624 <__assert_fail@plt+0x10c84>
   228b4:	mov	r2, #12
   228b8:	mov	r3, #64	; 0x40
   228bc:	strb	r2, [r5, #4]
   228c0:	str	r3, [r5]
   228c4:	mov	r0, #2
   228c8:	b	223c4 <__assert_fail@plt+0x10a24>
   228cc:	tst	r8, #524288	; 0x80000
   228d0:	bne	22624 <__assert_fail@plt+0x10c84>
   228d4:	mov	r3, #33	; 0x21
   228d8:	strb	r3, [r5, #4]
   228dc:	mov	r0, #2
   228e0:	b	223c4 <__assert_fail@plt+0x10a24>
   228e4:	tst	r8, #524288	; 0x80000
   228e8:	bne	22624 <__assert_fail@plt+0x10c84>
   228ec:	mov	r3, #35	; 0x23
   228f0:	strb	r3, [r5, #4]
   228f4:	mov	r0, #2
   228f8:	b	223c4 <__assert_fail@plt+0x10a24>
   228fc:	tst	r8, #524288	; 0x80000
   22900:	bne	22624 <__assert_fail@plt+0x10c84>
   22904:	mov	r2, #12
   22908:	mov	r3, #512	; 0x200
   2290c:	strb	r2, [r5, #4]
   22910:	str	r3, [r5]
   22914:	mov	r0, #2
   22918:	b	223c4 <__assert_fail@plt+0x10a24>
   2291c:	ldr	r0, [pc, #364]	; 22a90 <__assert_fail@plt+0x110f0>
   22920:	and	r0, r0, r8
   22924:	cmp	r0, #2
   22928:	moveq	r3, #19
   2292c:	strbeq	r3, [r5, #4]
   22930:	bne	22624 <__assert_fail@plt+0x10c84>
   22934:	b	223c4 <__assert_fail@plt+0x10a24>
   22938:	tst	r8, #524288	; 0x80000
   2293c:	bne	22624 <__assert_fail@plt+0x10c84>
   22940:	mov	r2, #12
   22944:	mov	r3, #9
   22948:	strb	r2, [r5, #4]
   2294c:	str	r3, [r5]
   22950:	mov	r0, #2
   22954:	b	223c4 <__assert_fail@plt+0x10a24>
   22958:	tst	r8, #524288	; 0x80000
   2295c:	bne	22624 <__assert_fail@plt+0x10c84>
   22960:	mov	r2, #12
   22964:	mov	r3, #6
   22968:	strb	r2, [r5, #4]
   2296c:	str	r3, [r5]
   22970:	mov	r0, #2
   22974:	b	223c4 <__assert_fail@plt+0x10a24>
   22978:	tst	r8, #16384	; 0x4000
   2297c:	bne	22624 <__assert_fail@plt+0x10c84>
   22980:	sub	r6, r6, #49	; 0x31
   22984:	mov	r3, #4
   22988:	str	r6, [r5]
   2298c:	strb	r3, [r5, #4]
   22990:	mov	r0, #2
   22994:	b	223c4 <__assert_fail@plt+0x10a24>
   22998:	ldr	r0, [pc, #240]	; 22a90 <__assert_fail@plt+0x110f0>
   2299c:	and	r0, r0, r8
   229a0:	cmp	r0, #2
   229a4:	moveq	r3, #18
   229a8:	strbeq	r3, [r5, #4]
   229ac:	bne	22624 <__assert_fail@plt+0x10c84>
   229b0:	b	223c4 <__assert_fail@plt+0x10a24>
   229b4:	tst	r8, #8192	; 0x2000
   229b8:	bne	22624 <__assert_fail@plt+0x10c84>
   229bc:	mov	r3, #9
   229c0:	strb	r3, [r5, #4]
   229c4:	mov	r0, #2
   229c8:	b	223c4 <__assert_fail@plt+0x10a24>
   229cc:	bl	11778 <__ctype_b_loc@plt>
   229d0:	lsl	r3, r6, #1
   229d4:	ldrb	r2, [r5, #6]
   229d8:	bic	r2, r2, #64	; 0x40
   229dc:	ldr	r1, [r0]
   229e0:	ldrh	r3, [r1, r3]
   229e4:	lsr	r3, r3, #3
   229e8:	and	r3, r3, #1
   229ec:	cmp	r6, #95	; 0x5f
   229f0:	orreq	r3, r3, #1
   229f4:	orr	r3, r2, r3, lsl #6
   229f8:	strb	r3, [r5, #6]
   229fc:	b	224a0 <__assert_fail@plt+0x10b00>
   22a00:	cmp	r3, #1
   22a04:	ble	22a38 <__assert_fail@plt+0x11098>
   22a08:	ldr	r0, [r4, #8]
   22a0c:	add	r1, r0, r2, lsl #2
   22a10:	ldr	r0, [r0, r2, lsl #2]
   22a14:	cmn	r0, #1
   22a18:	beq	22a7c <__assert_fail@plt+0x110dc>
   22a1c:	ldr	r0, [r4, #28]
   22a20:	add	r6, r6, #2
   22a24:	cmp	r0, r6
   22a28:	beq	22a38 <__assert_fail@plt+0x11098>
   22a2c:	ldr	r0, [r1, #4]
   22a30:	cmn	r0, #1
   22a34:	beq	22a7c <__assert_fail@plt+0x110dc>
   22a38:	ldrb	r1, [r4, #76]	; 0x4c
   22a3c:	cmp	r1, #0
   22a40:	bne	22a58 <__assert_fail@plt+0x110b8>
   22a44:	ldr	r1, [r4]
   22a48:	ldr	r0, [r4, #24]
   22a4c:	add	r1, r1, r2
   22a50:	ldrb	r6, [r1, r0]
   22a54:	b	22454 <__assert_fail@plt+0x10ab4>
   22a58:	ldr	ip, [r4, #12]
   22a5c:	ldr	r1, [r4]
   22a60:	ldr	r0, [r4, #24]
   22a64:	ldr	ip, [ip, r2, lsl #2]
   22a68:	add	r1, r1, ip
   22a6c:	ldrb	r6, [r1, r0]
   22a70:	tst	r6, #128	; 0x80
   22a74:	bne	22450 <__assert_fail@plt+0x10ab0>
   22a78:	b	22454 <__assert_fail@plt+0x10ab4>
   22a7c:	ldrb	r6, [sl, r2]
   22a80:	mov	r3, #1
   22a84:	strb	r3, [r5, #4]
   22a88:	strb	r6, [r5]
   22a8c:	b	22470 <__assert_fail@plt+0x10ad0>
   22a90:	andeq	r0, r0, r2, lsl #8
   22a94:	addeq	r0, r0, r8
   22a98:	ldr	ip, [r1]
   22a9c:	push	{r4, r5, r6, lr}
   22aa0:	cmp	ip, #31
   22aa4:	sub	sp, sp, #8
   22aa8:	mov	r5, r0
   22aac:	beq	22b10 <__assert_fail@plt+0x11170>
   22ab0:	lsl	r3, ip, #5
   22ab4:	ldr	r4, [r0]
   22ab8:	add	lr, ip, #1
   22abc:	add	r6, r3, #4
   22ac0:	add	r3, r4, r3
   22ac4:	mov	ip, #0
   22ac8:	str	lr, [r1]
   22acc:	str	ip, [r3, #4]
   22ad0:	str	ip, [r3, #8]
   22ad4:	str	ip, [r3, #12]
   22ad8:	ldm	r2, {r0, r1}
   22adc:	add	r2, r3, #24
   22ae0:	add	r4, r4, r6
   22ae4:	stm	r2, {r0, r1}
   22ae8:	ldrb	r2, [r3, #30]
   22aec:	mvn	r1, #0
   22af0:	str	ip, [r3, #16]
   22af4:	and	r2, r2, #243	; 0xf3
   22af8:	str	ip, [r3, #20]
   22afc:	strb	r2, [r3, #30]
   22b00:	str	r1, [r3, #32]
   22b04:	mov	r0, r4
   22b08:	add	sp, sp, #8
   22b0c:	pop	{r4, r5, r6, pc}
   22b10:	mov	r0, #996	; 0x3e4
   22b14:	stm	sp, {r1, r2}
   22b18:	bl	1f110 <__assert_fail@plt+0xd770>
   22b1c:	subs	r4, r0, #0
   22b20:	beq	22b04 <__assert_fail@plt+0x11164>
   22b24:	ldr	r0, [r5]
   22b28:	mov	r6, #4
   22b2c:	mov	lr, #1
   22b30:	mov	r3, #0
   22b34:	str	r0, [r4]
   22b38:	str	r4, [r5]
   22b3c:	ldm	sp, {r1, r2}
   22b40:	b	22ac0 <__assert_fail@plt+0x11120>
   22b44:	push	{r4, r5, r6, lr}
   22b48:	mov	r4, r0
   22b4c:	ldr	r5, [pc, #168]	; 22bfc <__assert_fail@plt+0x1125c>
   22b50:	b	22b58 <__assert_fail@plt+0x111b8>
   22b54:	mov	r4, r3
   22b58:	ldr	r3, [r4, #4]
   22b5c:	cmp	r3, #0
   22b60:	bne	22b54 <__assert_fail@plt+0x111b4>
   22b64:	ldr	r3, [r4, #8]
   22b68:	cmp	r3, #0
   22b6c:	bne	22b54 <__assert_fail@plt+0x111b4>
   22b70:	ldr	r3, [r4, #24]
   22b74:	and	r3, r3, r5
   22b78:	cmp	r3, #6
   22b7c:	bne	22be8 <__assert_fail@plt+0x11248>
   22b80:	ldr	r6, [r4, #20]
   22b84:	ldr	r0, [r6]
   22b88:	bl	1f018 <__assert_fail@plt+0xd678>
   22b8c:	ldr	r0, [r6, #4]
   22b90:	bl	1f018 <__assert_fail@plt+0xd678>
   22b94:	ldr	r0, [r6, #8]
   22b98:	bl	1f018 <__assert_fail@plt+0xd678>
   22b9c:	ldr	r0, [r6, #12]
   22ba0:	bl	1f018 <__assert_fail@plt+0xd678>
   22ba4:	mov	r0, r6
   22ba8:	bl	1f018 <__assert_fail@plt+0xd678>
   22bac:	ldr	r0, [r4]
   22bb0:	cmp	r0, #0
   22bb4:	popeq	{r4, r5, r6, pc}
   22bb8:	ldr	r3, [r0, #8]
   22bbc:	cmp	r4, r3
   22bc0:	cmpne	r3, #0
   22bc4:	moveq	r4, #1
   22bc8:	movne	r4, #0
   22bcc:	cmp	r4, #0
   22bd0:	mov	r4, r0
   22bd4:	beq	22b54 <__assert_fail@plt+0x111b4>
   22bd8:	ldr	r3, [r4, #24]
   22bdc:	and	r3, r3, r5
   22be0:	cmp	r3, #6
   22be4:	beq	22b80 <__assert_fail@plt+0x111e0>
   22be8:	cmp	r3, #3
   22bec:	bne	22bac <__assert_fail@plt+0x1120c>
   22bf0:	ldr	r0, [r4, #20]
   22bf4:	bl	1f018 <__assert_fail@plt+0xd678>
   22bf8:	b	22bac <__assert_fail@plt+0x1120c>
   22bfc:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   22c00:	ldr	r2, [r0]
   22c04:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22c08:	cmp	r2, #0
   22c0c:	mov	r7, r0
   22c10:	beq	22c70 <__assert_fail@plt+0x112d0>
   22c14:	ldr	r0, [r0, #8]
   22c18:	cmp	r0, #0
   22c1c:	beq	22c70 <__assert_fail@plt+0x112d0>
   22c20:	ldr	r5, [pc, #500]	; 22e1c <__assert_fail@plt+0x1147c>
   22c24:	mov	r4, #0
   22c28:	b	22c3c <__assert_fail@plt+0x1129c>
   22c2c:	add	r4, r4, #1
   22c30:	cmp	r4, r0
   22c34:	bcs	22c70 <__assert_fail@plt+0x112d0>
   22c38:	ldr	r2, [r7]
   22c3c:	add	r1, r2, r4, lsl #3
   22c40:	ldr	r3, [r1, #4]
   22c44:	and	r3, r3, r5
   22c48:	cmp	r3, #6
   22c4c:	beq	22de8 <__assert_fail@plt+0x11448>
   22c50:	cmp	r3, #3
   22c54:	bne	22c2c <__assert_fail@plt+0x1128c>
   22c58:	ldr	r0, [r1]
   22c5c:	bl	1f018 <__assert_fail@plt+0xd678>
   22c60:	ldr	r0, [r7, #8]
   22c64:	add	r4, r4, #1
   22c68:	cmp	r4, r0
   22c6c:	bcc	22c38 <__assert_fail@plt+0x11298>
   22c70:	ldr	r0, [r7, #12]
   22c74:	bl	1f018 <__assert_fail@plt+0xd678>
   22c78:	ldr	r3, [r7, #8]
   22c7c:	cmp	r3, #0
   22c80:	movne	r4, #0
   22c84:	movne	r5, r4
   22c88:	beq	22ce8 <__assert_fail@plt+0x11348>
   22c8c:	ldr	r3, [r7, #24]
   22c90:	add	r5, r5, #1
   22c94:	cmp	r3, #0
   22c98:	add	r2, r3, r4
   22c9c:	beq	22ca8 <__assert_fail@plt+0x11308>
   22ca0:	ldr	r0, [r2, #8]
   22ca4:	bl	1f018 <__assert_fail@plt+0xd678>
   22ca8:	ldr	r3, [r7, #28]
   22cac:	cmp	r3, #0
   22cb0:	add	r2, r3, r4
   22cb4:	beq	22cc0 <__assert_fail@plt+0x11320>
   22cb8:	ldr	r0, [r2, #8]
   22cbc:	bl	1f018 <__assert_fail@plt+0xd678>
   22cc0:	ldr	r3, [r7, #20]
   22cc4:	cmp	r3, #0
   22cc8:	add	r2, r3, r4
   22ccc:	beq	22cd8 <__assert_fail@plt+0x11338>
   22cd0:	ldr	r0, [r2, #8]
   22cd4:	bl	1f018 <__assert_fail@plt+0xd678>
   22cd8:	ldr	r3, [r7, #8]
   22cdc:	add	r4, r4, #12
   22ce0:	cmp	r3, r5
   22ce4:	bhi	22c8c <__assert_fail@plt+0x112ec>
   22ce8:	ldr	r0, [r7, #20]
   22cec:	bl	1f018 <__assert_fail@plt+0xd678>
   22cf0:	ldr	r0, [r7, #24]
   22cf4:	bl	1f018 <__assert_fail@plt+0xd678>
   22cf8:	ldr	r0, [r7, #28]
   22cfc:	bl	1f018 <__assert_fail@plt+0xd678>
   22d00:	ldr	r0, [r7]
   22d04:	bl	1f018 <__assert_fail@plt+0xd678>
   22d08:	ldr	r0, [r7, #32]
   22d0c:	cmp	r0, #0
   22d10:	beq	22dbc <__assert_fail@plt+0x1141c>
   22d14:	mov	r8, #0
   22d18:	mov	r9, r8
   22d1c:	ldr	r3, [r0, r8]
   22d20:	add	r6, r0, r8
   22d24:	cmp	r3, #0
   22d28:	movgt	r5, #0
   22d2c:	ble	22d98 <__assert_fail@plt+0x113f8>
   22d30:	ldr	r3, [r6, #8]
   22d34:	ldr	r4, [r3, r5, lsl #2]
   22d38:	add	r5, r5, #1
   22d3c:	ldr	r0, [r4, #24]
   22d40:	bl	1f018 <__assert_fail@plt+0xd678>
   22d44:	ldr	r0, [r4, #36]	; 0x24
   22d48:	bl	1f018 <__assert_fail@plt+0xd678>
   22d4c:	ldr	r3, [r4, #40]	; 0x28
   22d50:	add	r2, r4, #4
   22d54:	cmp	r3, r2
   22d58:	beq	22d6c <__assert_fail@plt+0x113cc>
   22d5c:	ldr	r0, [r3, #8]
   22d60:	bl	1f018 <__assert_fail@plt+0xd678>
   22d64:	ldr	r0, [r4, #40]	; 0x28
   22d68:	bl	1f018 <__assert_fail@plt+0xd678>
   22d6c:	ldr	r0, [r4, #12]
   22d70:	bl	1f018 <__assert_fail@plt+0xd678>
   22d74:	ldr	r0, [r4, #48]	; 0x30
   22d78:	bl	1f018 <__assert_fail@plt+0xd678>
   22d7c:	ldr	r0, [r4, #44]	; 0x2c
   22d80:	bl	1f018 <__assert_fail@plt+0xd678>
   22d84:	mov	r0, r4
   22d88:	bl	1f018 <__assert_fail@plt+0xd678>
   22d8c:	ldr	r3, [r6]
   22d90:	cmp	r3, r5
   22d94:	bgt	22d30 <__assert_fail@plt+0x11390>
   22d98:	ldr	r0, [r6, #8]
   22d9c:	bl	1f018 <__assert_fail@plt+0xd678>
   22da0:	ldr	r3, [r7, #68]	; 0x44
   22da4:	add	r9, r9, #1
   22da8:	cmp	r3, r9
   22dac:	add	r8, r8, #12
   22db0:	ldrcs	r0, [r7, #32]
   22db4:	bcs	22d1c <__assert_fail@plt+0x1137c>
   22db8:	ldr	r0, [r7, #32]
   22dbc:	bl	1f018 <__assert_fail@plt+0xd678>
   22dc0:	ldr	r0, [r7, #60]	; 0x3c
   22dc4:	ldr	r3, [pc, #84]	; 22e20 <__assert_fail@plt+0x11480>
   22dc8:	cmp	r0, r3
   22dcc:	beq	22dd4 <__assert_fail@plt+0x11434>
   22dd0:	bl	1f018 <__assert_fail@plt+0xd678>
   22dd4:	ldr	r0, [r7, #132]	; 0x84
   22dd8:	bl	1f018 <__assert_fail@plt+0xd678>
   22ddc:	mov	r0, r7
   22de0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   22de4:	b	1f018 <__assert_fail@plt+0xd678>
   22de8:	ldr	r6, [r2, r4, lsl #3]
   22dec:	ldr	r0, [r6]
   22df0:	bl	1f018 <__assert_fail@plt+0xd678>
   22df4:	ldr	r0, [r6, #4]
   22df8:	bl	1f018 <__assert_fail@plt+0xd678>
   22dfc:	ldr	r0, [r6, #8]
   22e00:	bl	1f018 <__assert_fail@plt+0xd678>
   22e04:	ldr	r0, [r6, #12]
   22e08:	bl	1f018 <__assert_fail@plt+0xd678>
   22e0c:	mov	r0, r6
   22e10:	bl	1f018 <__assert_fail@plt+0xd678>
   22e14:	ldr	r0, [r7, #8]
   22e18:	b	22c2c <__assert_fail@plt+0x1128c>
   22e1c:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   22e20:	andeq	r3, r3, r4, lsl #28
   22e24:	ldr	r3, [pc, #96]	; 22e8c <__assert_fail@plt+0x114ec>
   22e28:	ldr	r2, [r1, #24]
   22e2c:	push	{r4, lr}
   22e30:	and	r3, r3, r2
   22e34:	cmp	r3, #6
   22e38:	beq	22e5c <__assert_fail@plt+0x114bc>
   22e3c:	cmp	r3, #3
   22e40:	beq	22e4c <__assert_fail@plt+0x114ac>
   22e44:	mov	r0, #0
   22e48:	pop	{r4, pc}
   22e4c:	ldr	r0, [r1, #20]
   22e50:	bl	1f018 <__assert_fail@plt+0xd678>
   22e54:	mov	r0, #0
   22e58:	pop	{r4, pc}
   22e5c:	ldr	r4, [r1, #20]
   22e60:	ldr	r0, [r4]
   22e64:	bl	1f018 <__assert_fail@plt+0xd678>
   22e68:	ldr	r0, [r4, #4]
   22e6c:	bl	1f018 <__assert_fail@plt+0xd678>
   22e70:	ldr	r0, [r4, #8]
   22e74:	bl	1f018 <__assert_fail@plt+0xd678>
   22e78:	ldr	r0, [r4, #12]
   22e7c:	bl	1f018 <__assert_fail@plt+0xd678>
   22e80:	mov	r0, r4
   22e84:	bl	1f018 <__assert_fail@plt+0xd678>
   22e88:	b	22e44 <__assert_fail@plt+0x114a4>
   22e8c:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   22e90:	push	{r4, r5, r6, r7, r8, r9, lr}
   22e94:	sub	sp, sp, #12
   22e98:	mov	r5, r0
   22e9c:	ldr	r6, [sp, #40]	; 0x28
   22ea0:	mov	r4, r1
   22ea4:	mov	r9, r2
   22ea8:	mov	r8, r3
   22eac:	mov	r7, #0
   22eb0:	ldr	r0, [r4, #4]
   22eb4:	cmp	r0, #0
   22eb8:	ble	22f14 <__assert_fail@plt+0x11574>
   22ebc:	ldr	ip, [r4, #8]
   22ec0:	sub	r0, r0, #1
   22ec4:	mov	r1, r7
   22ec8:	cmp	r1, r0
   22ecc:	bcs	22f08 <__assert_fail@plt+0x11568>
   22ed0:	add	r2, r1, r0
   22ed4:	lsr	r2, r2, #1
   22ed8:	ldr	r3, [ip, r2, lsl #2]
   22edc:	cmp	r9, r3
   22ee0:	ble	22ef8 <__assert_fail@plt+0x11558>
   22ee4:	b	22f78 <__assert_fail@plt+0x115d8>
   22ee8:	ldr	r0, [ip, r3, lsl #2]
   22eec:	cmp	r9, r0
   22ef0:	bgt	22f80 <__assert_fail@plt+0x115e0>
   22ef4:	mov	r2, r3
   22ef8:	add	r3, r2, r1
   22efc:	cmp	r2, r1
   22f00:	lsr	r3, r3, #1
   22f04:	bhi	22ee8 <__assert_fail@plt+0x11548>
   22f08:	ldr	r3, [ip, r1, lsl #2]
   22f0c:	cmp	r9, r3
   22f10:	beq	22fa8 <__assert_fail@plt+0x11608>
   22f14:	ldr	r3, [r5]
   22f18:	add	r2, r3, r9, lsl #3
   22f1c:	ldrb	r2, [r2, #4]
   22f20:	cmp	r2, r6
   22f24:	bne	22f34 <__assert_fail@plt+0x11594>
   22f28:	ldr	r3, [r3, r9, lsl #3]
   22f2c:	cmp	r8, r3
   22f30:	beq	22f8c <__assert_fail@plt+0x115ec>
   22f34:	mov	r1, r9
   22f38:	mov	r0, r4
   22f3c:	bl	1fdc4 <__assert_fail@plt+0xe424>
   22f40:	cmp	r0, #0
   22f44:	beq	22fe4 <__assert_fail@plt+0x11644>
   22f48:	add	r9, r9, r9, lsl #1
   22f4c:	ldr	r3, [r5, #20]
   22f50:	lsl	r9, r9, #2
   22f54:	add	r3, r3, r9
   22f58:	ldr	r2, [r3, #4]
   22f5c:	cmp	r2, #0
   22f60:	beq	22fa8 <__assert_fail@plt+0x11608>
   22f64:	cmp	r2, #2
   22f68:	beq	22fb4 <__assert_fail@plt+0x11614>
   22f6c:	ldr	r3, [r3, #8]
   22f70:	ldr	r9, [r3]
   22f74:	b	22eb0 <__assert_fail@plt+0x11510>
   22f78:	mov	r3, r2
   22f7c:	mov	r2, r0
   22f80:	add	r1, r3, #1
   22f84:	mov	r0, r2
   22f88:	b	22ec8 <__assert_fail@plt+0x11528>
   22f8c:	cmp	r6, #9
   22f90:	bne	22fa8 <__assert_fail@plt+0x11608>
   22f94:	mov	r1, r9
   22f98:	mov	r0, r4
   22f9c:	bl	1fdc4 <__assert_fail@plt+0xe424>
   22fa0:	cmp	r0, #0
   22fa4:	beq	22fe4 <__assert_fail@plt+0x11644>
   22fa8:	mov	r0, #0
   22fac:	add	sp, sp, #12
   22fb0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   22fb4:	ldr	r2, [r3, #8]
   22fb8:	mov	r1, r4
   22fbc:	mov	r3, r8
   22fc0:	ldr	r2, [r2, #4]
   22fc4:	mov	r0, r5
   22fc8:	str	r6, [sp]
   22fcc:	bl	22e90 <__assert_fail@plt+0x114f0>
   22fd0:	cmp	r0, #0
   22fd4:	bne	22fac <__assert_fail@plt+0x1160c>
   22fd8:	ldr	r3, [r5, #20]
   22fdc:	add	r3, r3, r9
   22fe0:	b	22f6c <__assert_fail@plt+0x115cc>
   22fe4:	mov	r0, #12
   22fe8:	add	sp, sp, #12
   22fec:	pop	{r4, r5, r6, r7, r8, r9, pc}
   22ff0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22ff4:	sub	sp, sp, #20
   22ff8:	ldr	r8, [pc, #940]	; 233ac <__assert_fail@plt+0x11a0c>
   22ffc:	ldr	fp, [sp, #56]	; 0x38
   23000:	mov	r7, r1
   23004:	mov	r5, r0
   23008:	mov	r4, r2
   2300c:	lsl	r6, r1, #3
   23010:	str	r3, [sp, #8]
   23014:	ldr	lr, [r5]
   23018:	add	r6, lr, r6
   2301c:	ldrb	r3, [r6, #4]
   23020:	cmp	r3, #4
   23024:	beq	232b8 <__assert_fail@plt+0x11918>
   23028:	add	sl, r7, r7, lsl #1
   2302c:	ldr	r0, [r5, #20]
   23030:	lsl	sl, sl, #2
   23034:	add	ip, r0, sl
   23038:	ldr	r3, [ip, #4]
   2303c:	cmp	r3, #0
   23040:	beq	23380 <__assert_fail@plt+0x119e0>
   23044:	cmp	r3, #1
   23048:	beq	2324c <__assert_fail@plt+0x118ac>
   2304c:	ldr	r2, [r5, #8]
   23050:	add	r4, r4, r4, lsl #1
   23054:	sub	r1, r2, #1
   23058:	cmp	r1, #0
   2305c:	add	r3, lr, r1, lsl #3
   23060:	lsl	r9, r4, #2
   23064:	ldrb	r6, [r3, #6]
   23068:	ldr	r4, [ip, #8]
   2306c:	add	r0, r0, r9
   23070:	movle	ip, #0
   23074:	movgt	ip, #1
   23078:	ands	ip, ip, r6, lsr #2
   2307c:	mov	ip, #0
   23080:	ldr	r4, [r4]
   23084:	str	ip, [r0, #4]
   23088:	beq	23198 <__assert_fail@plt+0x117f8>
   2308c:	ldr	ip, [r5, #16]
   23090:	rsb	r7, r3, r2, lsl #3
   23094:	sub	r7, r7, #16
   23098:	add	r2, ip, r2, lsl #2
   2309c:	b	230c0 <__assert_fail@plt+0x11720>
   230a0:	add	r3, lr, r6
   230a4:	sub	r1, r1, #1
   230a8:	ldrb	r6, [r3, #6]
   230ac:	cmp	r1, #0
   230b0:	movle	ip, #0
   230b4:	movgt	ip, #1
   230b8:	ands	ip, ip, r6, lsr #2
   230bc:	beq	23198 <__assert_fail@plt+0x117f8>
   230c0:	ldr	ip, [r2, #-4]!
   230c4:	add	r6, r3, r7
   230c8:	cmp	r4, ip
   230cc:	bne	230a0 <__assert_fail@plt+0x11700>
   230d0:	ldr	r3, [r3, #4]
   230d4:	and	r3, r8, r3, lsr #8
   230d8:	cmp	fp, r3
   230dc:	bne	230a0 <__assert_fail@plt+0x11700>
   230e0:	bl	1fdc4 <__assert_fail@plt+0xe424>
   230e4:	cmp	r0, #0
   230e8:	beq	2318c <__assert_fail@plt+0x117ec>
   230ec:	ldr	r2, [r5, #20]
   230f0:	ldr	r3, [r5]
   230f4:	add	sl, r2, sl
   230f8:	mov	r0, r5
   230fc:	ldr	r2, [sl, #8]
   23100:	ldr	r7, [r2, #4]
   23104:	lsl	r6, r7, #3
   23108:	add	r3, r3, r6
   2310c:	ldm	r3, {r1, r2}
   23110:	bl	1fc10 <__assert_fail@plt+0xe270>
   23114:	cmn	r0, #1
   23118:	mov	r4, r0
   2311c:	beq	2318c <__assert_fail@plt+0x117ec>
   23120:	ldr	r1, [r5]
   23124:	ldr	lr, [pc, #644]	; 233b0 <__assert_fail@plt+0x11a10>
   23128:	add	r2, r1, r4, lsl #3
   2312c:	and	r0, fp, r8
   23130:	ldr	r3, [r2, #4]
   23134:	add	ip, r1, r6
   23138:	bic	r3, r3, lr
   2313c:	orr	r3, r3, r0, lsl #8
   23140:	str	r3, [r2, #4]
   23144:	ldr	ip, [ip, #4]
   23148:	bic	r3, r3, lr
   2314c:	mov	r1, r4
   23150:	and	ip, r8, ip, lsr #8
   23154:	orr	r0, r0, ip
   23158:	orr	r3, r3, r0, lsl #8
   2315c:	str	r3, [r2, #4]
   23160:	lsr	r3, r3, #16
   23164:	uxtb	r3, r3
   23168:	orr	r3, r3, #4
   2316c:	strb	r3, [r2, #6]
   23170:	ldr	r3, [r5, #16]
   23174:	ldr	r0, [r5, #20]
   23178:	str	r7, [r3, r4, lsl #2]
   2317c:	add	r0, r0, r9
   23180:	bl	1fdc4 <__assert_fail@plt+0xe424>
   23184:	cmp	r0, #0
   23188:	bne	23014 <__assert_fail@plt+0x11674>
   2318c:	mov	r0, #12
   23190:	add	sp, sp, #20
   23194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23198:	lsl	r6, r4, #3
   2319c:	add	lr, lr, r6
   231a0:	mov	r0, r5
   231a4:	ldm	lr, {r1, r2}
   231a8:	bl	1fc10 <__assert_fail@plt+0xe270>
   231ac:	cmn	r0, #1
   231b0:	mov	r7, r0
   231b4:	beq	2318c <__assert_fail@plt+0x117ec>
   231b8:	ldr	r3, [r5]
   231bc:	ldr	ip, [pc, #492]	; 233b0 <__assert_fail@plt+0x11a10>
   231c0:	add	r2, r3, r7, lsl #3
   231c4:	add	r6, r3, r6
   231c8:	ldr	r3, [r2, #4]
   231cc:	and	r0, fp, r8
   231d0:	bic	r3, r3, ip
   231d4:	orr	r3, r3, r0, lsl #8
   231d8:	str	r3, [r2, #4]
   231dc:	ldr	ip, [r6, #4]
   231e0:	ldr	lr, [pc, #456]	; 233b0 <__assert_fail@plt+0x11a10>
   231e4:	mov	r1, r7
   231e8:	and	ip, r8, ip, lsr #8
   231ec:	orr	r0, r0, ip
   231f0:	bic	r3, r3, lr
   231f4:	orr	r3, r3, r0, lsl #8
   231f8:	str	r3, [r2, #4]
   231fc:	lsr	r3, r3, #16
   23200:	uxtb	r3, r3
   23204:	orr	r3, r3, #4
   23208:	strb	r3, [r2, #6]
   2320c:	ldr	r3, [r5, #16]
   23210:	ldr	r0, [r5, #20]
   23214:	str	r4, [r3, r7, lsl #2]
   23218:	add	r0, r0, r9
   2321c:	bl	1fdc4 <__assert_fail@plt+0xe424>
   23220:	cmp	r0, #0
   23224:	beq	2318c <__assert_fail@plt+0x117ec>
   23228:	str	fp, [sp]
   2322c:	mov	r2, r7
   23230:	mov	r1, r4
   23234:	ldr	r3, [sp, #8]
   23238:	mov	r0, r5
   2323c:	bl	22ff0 <__assert_fail@plt+0x11650>
   23240:	cmp	r0, #0
   23244:	beq	230ec <__assert_fail@plt+0x1174c>
   23248:	b	23190 <__assert_fail@plt+0x117f0>
   2324c:	add	r9, r4, r4, lsl #1
   23250:	ldr	r3, [ip, #8]
   23254:	ldr	r2, [sp, #8]
   23258:	cmp	r7, r4
   2325c:	lsl	r9, r9, #2
   23260:	sub	r2, r7, r2
   23264:	add	r0, r0, r9
   23268:	clz	r2, r2
   2326c:	lsr	r2, r2, #5
   23270:	moveq	r2, #0
   23274:	ldr	r7, [r3]
   23278:	cmp	r2, #0
   2327c:	mov	r3, #0
   23280:	str	r3, [r0, #4]
   23284:	bne	23394 <__assert_fail@plt+0x119f4>
   23288:	ldr	r3, [r6, #4]
   2328c:	lsl	r6, r7, #3
   23290:	add	lr, lr, r6
   23294:	and	r3, r8, r3, lsr #8
   23298:	ldm	lr, {r1, r2}
   2329c:	mov	r0, r5
   232a0:	orr	fp, fp, r3
   232a4:	bl	1fc10 <__assert_fail@plt+0xe270>
   232a8:	cmn	r0, #1
   232ac:	mov	r4, r0
   232b0:	bne	23120 <__assert_fail@plt+0x11780>
   232b4:	b	2318c <__assert_fail@plt+0x117ec>
   232b8:	ldr	r3, [r5, #12]
   232bc:	lsl	sl, r7, #2
   232c0:	add	r9, r4, r4, lsl #1
   232c4:	ldr	r7, [r3, r7, lsl #2]
   232c8:	ldr	r3, [r5, #20]
   232cc:	lsl	r9, r9, #2
   232d0:	lsl	r6, r7, #3
   232d4:	add	lr, lr, r6
   232d8:	add	r3, r3, r9
   232dc:	mov	r0, #0
   232e0:	ldm	lr, {r1, r2}
   232e4:	str	r0, [r3, #4]
   232e8:	mov	r0, r5
   232ec:	str	r4, [sp, #12]
   232f0:	bl	1fc10 <__assert_fail@plt+0xe270>
   232f4:	cmn	r0, #1
   232f8:	mov	r4, r0
   232fc:	beq	2318c <__assert_fail@plt+0x117ec>
   23300:	ldr	ip, [r5]
   23304:	ldr	lr, [pc, #164]	; 233b0 <__assert_fail@plt+0x11a10>
   23308:	add	r0, ip, r0, lsl #3
   2330c:	and	r2, fp, r8
   23310:	ldr	r3, [r0, #4]
   23314:	add	ip, ip, r6
   23318:	bic	r3, r3, lr
   2331c:	orr	r3, r3, r2, lsl #8
   23320:	str	r3, [r0, #4]
   23324:	ldr	ip, [ip, #4]
   23328:	bic	r3, r3, lr
   2332c:	mov	r1, r4
   23330:	and	ip, r8, ip, lsr #8
   23334:	orr	r2, r2, ip
   23338:	orr	r3, r3, r2, lsl #8
   2333c:	str	r3, [r0, #4]
   23340:	lsr	r3, r3, #16
   23344:	uxtb	r3, r3
   23348:	orr	r3, r3, #4
   2334c:	strb	r3, [r0, #6]
   23350:	ldr	r2, [r5, #16]
   23354:	ldr	r3, [r5, #12]
   23358:	ldr	ip, [sp, #12]
   2335c:	ldr	r0, [r5, #20]
   23360:	str	r7, [r2, r4, lsl #2]
   23364:	ldr	r2, [r3, sl]
   23368:	add	r0, r0, r9
   2336c:	str	r2, [r3, ip, lsl #2]
   23370:	bl	1fdc4 <__assert_fail@plt+0xe424>
   23374:	cmp	r0, #0
   23378:	bne	23014 <__assert_fail@plt+0x11674>
   2337c:	b	2318c <__assert_fail@plt+0x117ec>
   23380:	ldr	r2, [r5, #12]
   23384:	mov	r0, r3
   23388:	ldr	r3, [r2, r7, lsl #2]
   2338c:	str	r3, [r2, r4, lsl #2]
   23390:	b	23190 <__assert_fail@plt+0x117f0>
   23394:	mov	r1, r7
   23398:	bl	1fdc4 <__assert_fail@plt+0xe424>
   2339c:	cmp	r0, #0
   233a0:	movne	r0, #0
   233a4:	bne	23190 <__assert_fail@plt+0x117f0>
   233a8:	b	2318c <__assert_fail@plt+0x117ec>
   233ac:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   233b0:	andeq	pc, r3, r0, lsl #30
   233b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   233b8:	add	r8, r2, r2, lsl #1
   233bc:	mov	r4, r2
   233c0:	ldr	r2, [r1, #20]
   233c4:	lsl	r8, r8, #2
   233c8:	add	r2, r2, r8
   233cc:	mov	r7, r1
   233d0:	ldr	r1, [r2, #4]
   233d4:	sub	sp, sp, #44	; 0x2c
   233d8:	add	r1, r1, #1
   233dc:	str	r0, [sp, #8]
   233e0:	mov	r2, #0
   233e4:	lsl	r0, r1, #2
   233e8:	str	r3, [sp, #12]
   233ec:	str	r1, [sp, #16]
   233f0:	str	r2, [sp, #20]
   233f4:	bl	1f110 <__assert_fail@plt+0xd770>
   233f8:	cmp	r0, #0
   233fc:	str	r0, [sp, #24]
   23400:	beq	23620 <__assert_fail@plt+0x11c80>
   23404:	ldr	r6, [r7]
   23408:	ldr	r3, [sp, #20]
   2340c:	lsl	r5, r4, #3
   23410:	add	lr, r6, r5
   23414:	str	r4, [r0, r3, lsl #2]
   23418:	ldr	r1, [r7, #24]
   2341c:	ldr	r0, [lr, #4]
   23420:	ldr	r2, [pc, #520]	; 23630 <__assert_fail@plt+0x11c90>
   23424:	add	ip, r1, r8
   23428:	and	r2, r2, r0
   2342c:	add	r3, r3, #1
   23430:	cmp	r2, #0
   23434:	mvn	r2, #0
   23438:	str	r3, [sp, #20]
   2343c:	str	r2, [ip, #4]
   23440:	beq	23470 <__assert_fail@plt+0x11ad0>
   23444:	ldr	r3, [r7, #20]
   23448:	add	r3, r3, r8
   2344c:	ldr	r2, [r3, #4]
   23450:	cmp	r2, #0
   23454:	beq	23584 <__assert_fail@plt+0x11be4>
   23458:	ldr	r3, [r3, #8]
   2345c:	ldr	r3, [r3]
   23460:	add	r6, r6, r3, lsl #3
   23464:	ldrb	r3, [r6, #6]
   23468:	tst	r3, #4
   2346c:	beq	235e8 <__assert_fail@plt+0x11c48>
   23470:	ldrb	r3, [lr, #4]
   23474:	tst	r3, #8
   23478:	beq	23580 <__assert_fail@plt+0x11be0>
   2347c:	ldr	ip, [r7, #20]
   23480:	add	r3, ip, r8
   23484:	ldr	r2, [r3, #4]
   23488:	cmp	r2, #0
   2348c:	ble	23580 <__assert_fail@plt+0x11be0>
   23490:	mov	sl, #0
   23494:	mov	r5, sl
   23498:	mov	fp, #1
   2349c:	add	r9, sp, #28
   234a0:	b	2350c <__assert_fail@plt+0x11b6c>
   234a4:	ldm	r3, {r0, r1, r2}
   234a8:	stm	r9, {r0, r1, r2}
   234ac:	ldr	r3, [sp, #32]
   234b0:	cmp	r3, #0
   234b4:	beq	234e0 <__assert_fail@plt+0x11b40>
   234b8:	ldr	r2, [sp, #20]
   234bc:	ldr	r1, [sp, #16]
   234c0:	add	r2, r2, r3, lsl #1
   234c4:	cmp	r1, r2
   234c8:	blt	235c0 <__assert_fail@plt+0x11c20>
   234cc:	mov	r1, r9
   234d0:	add	r0, sp, #16
   234d4:	bl	201fc <__assert_fail@plt+0xe85c>
   234d8:	cmp	r0, #0
   234dc:	bne	23550 <__assert_fail@plt+0x11bb0>
   234e0:	ldr	r1, [r7, #24]
   234e4:	add	r4, r1, r4
   234e8:	ldr	r3, [r4, #4]
   234ec:	cmp	r3, #0
   234f0:	beq	235ac <__assert_fail@plt+0x11c0c>
   234f4:	ldr	ip, [r7, #20]
   234f8:	add	r3, ip, r8
   234fc:	add	r5, r5, #1
   23500:	ldr	r2, [r3, #4]
   23504:	cmp	r2, r5
   23508:	ble	23560 <__assert_fail@plt+0x11bc0>
   2350c:	ldr	r3, [r3, #8]
   23510:	ldr	r2, [r3, r5, lsl #2]
   23514:	add	r4, r2, r2, lsl #1
   23518:	lsl	r4, r4, #2
   2351c:	add	r3, r1, r4
   23520:	ldr	r0, [r3, #4]
   23524:	cmn	r0, #1
   23528:	moveq	sl, fp
   2352c:	beq	234f8 <__assert_fail@plt+0x11b58>
   23530:	cmp	r0, #0
   23534:	bne	234a4 <__assert_fail@plt+0x11b04>
   23538:	mov	r3, #0
   2353c:	mov	r1, r7
   23540:	mov	r0, r9
   23544:	bl	233b4 <__assert_fail@plt+0x11a14>
   23548:	cmp	r0, #0
   2354c:	beq	234ac <__assert_fail@plt+0x11b0c>
   23550:	mov	r3, r0
   23554:	mov	r0, r3
   23558:	add	sp, sp, #44	; 0x2c
   2355c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23560:	ldr	r3, [sp, #12]
   23564:	eor	r3, r3, #1
   23568:	tst	sl, r3
   2356c:	addne	r8, r1, r8
   23570:	movne	r3, #0
   23574:	strne	r3, [r8, #4]
   23578:	addne	lr, sp, #16
   2357c:	bne	23590 <__assert_fail@plt+0x11bf0>
   23580:	add	ip, r1, r8
   23584:	add	lr, sp, #16
   23588:	ldm	lr, {r0, r1, r2}
   2358c:	stm	ip, {r0, r1, r2}
   23590:	mov	r3, #0
   23594:	ldm	lr, {r0, r1, r2}
   23598:	ldr	ip, [sp, #8]
   2359c:	stm	ip, {r0, r1, r2}
   235a0:	mov	r0, r3
   235a4:	add	sp, sp, #44	; 0x2c
   235a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   235ac:	ldr	r0, [sp, #36]	; 0x24
   235b0:	bl	1f018 <__assert_fail@plt+0xd678>
   235b4:	mov	sl, fp
   235b8:	ldr	r1, [r7, #24]
   235bc:	b	234f4 <__assert_fail@plt+0x11b54>
   235c0:	add	r3, r1, r3
   235c4:	ldr	r0, [sp, #24]
   235c8:	lsl	r1, r3, #3
   235cc:	lsl	r6, r3, #1
   235d0:	bl	1f190 <__assert_fail@plt+0xd7f0>
   235d4:	cmp	r0, #0
   235d8:	beq	23620 <__assert_fail@plt+0x11c80>
   235dc:	str	r0, [sp, #24]
   235e0:	str	r6, [sp, #16]
   235e4:	b	234cc <__assert_fail@plt+0x11b2c>
   235e8:	ldr	r2, [pc, #68]	; 23634 <__assert_fail@plt+0x11c94>
   235ec:	mov	r3, r4
   235f0:	and	r0, r2, r0, lsr #8
   235f4:	str	r0, [sp]
   235f8:	mov	r2, r4
   235fc:	mov	r1, r4
   23600:	mov	r0, r7
   23604:	bl	22ff0 <__assert_fail@plt+0x11650>
   23608:	subs	r3, r0, #0
   2360c:	bne	235a0 <__assert_fail@plt+0x11c00>
   23610:	ldr	lr, [r7]
   23614:	ldr	r1, [r7, #24]
   23618:	add	lr, lr, r5
   2361c:	b	23470 <__assert_fail@plt+0x11ad0>
   23620:	mov	r3, #12
   23624:	mov	r0, r3
   23628:	add	sp, sp, #44	; 0x2c
   2362c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23630:	andeq	pc, r3, r0, lsl #30
   23634:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   23638:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2363c:	mov	r8, r1
   23640:	ldr	r1, [r1, #4]
   23644:	sub	sp, sp, #24
   23648:	mov	r6, #0
   2364c:	mov	r7, r0
   23650:	lsl	r0, r1, #2
   23654:	mov	r5, r2
   23658:	mov	r4, r3
   2365c:	str	r1, [sp, #12]
   23660:	str	r6, [sp, #16]
   23664:	bl	1f110 <__assert_fail@plt+0xd770>
   23668:	cmp	r0, r6
   2366c:	str	r0, [sp, #20]
   23670:	beq	237a0 <__assert_fail@plt+0x11e00>
   23674:	ldr	r1, [r8, #4]
   23678:	ldr	r0, [r8, #8]
   2367c:	cmp	r1, r6
   23680:	ble	23718 <__assert_fail@plt+0x11d78>
   23684:	ldr	r2, [r0, r6, lsl #2]
   23688:	ldr	r9, [r7, #24]
   2368c:	add	r3, r2, r2, lsl #1
   23690:	add	r9, r9, r3, lsl #2
   23694:	ldr	sl, [r9, #4]
   23698:	cmp	sl, #0
   2369c:	ble	23738 <__assert_fail@plt+0x11d98>
   236a0:	ldr	r0, [r9, #8]
   236a4:	ldr	lr, [r7]
   236a8:	sub	r0, r0, #4
   236ac:	mov	r3, #0
   236b0:	b	236bc <__assert_fail@plt+0x11d1c>
   236b4:	cmp	sl, r3
   236b8:	beq	2373c <__assert_fail@plt+0x11d9c>
   236bc:	ldr	r1, [r0, #4]!
   236c0:	add	r3, r3, #1
   236c4:	add	ip, lr, r1, lsl #3
   236c8:	ldrb	ip, [ip, #4]
   236cc:	cmp	r4, ip
   236d0:	bne	236b4 <__assert_fail@plt+0x11d14>
   236d4:	ldr	ip, [lr, r1, lsl #3]
   236d8:	cmp	r5, ip
   236dc:	bne	236b4 <__assert_fail@plt+0x11d14>
   236e0:	cmn	r1, #1
   236e4:	beq	2373c <__assert_fail@plt+0x11d9c>
   236e8:	str	r4, [sp]
   236ec:	mov	r3, r5
   236f0:	add	r1, sp, #12
   236f4:	mov	r0, r7
   236f8:	bl	22e90 <__assert_fail@plt+0x114f0>
   236fc:	subs	r9, r0, #0
   23700:	bne	23764 <__assert_fail@plt+0x11dc4>
   23704:	ldr	r0, [r8, #8]
   23708:	ldr	r1, [r8, #4]
   2370c:	add	r6, r6, #1
   23710:	cmp	r6, r1
   23714:	blt	23684 <__assert_fail@plt+0x11ce4>
   23718:	bl	1f018 <__assert_fail@plt+0xd678>
   2371c:	add	r3, sp, #24
   23720:	mov	r9, #0
   23724:	ldmdb	r3, {r0, r1, r2}
   23728:	stm	r8, {r0, r1, r2}
   2372c:	mov	r0, r9
   23730:	add	sp, sp, #24
   23734:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23738:	beq	2370c <__assert_fail@plt+0x11d6c>
   2373c:	ldr	r3, [sp, #16]
   23740:	ldr	r2, [sp, #12]
   23744:	add	r3, r3, sl, lsl #1
   23748:	cmp	r2, r3
   2374c:	blt	23778 <__assert_fail@plt+0x11dd8>
   23750:	mov	r1, r9
   23754:	add	r0, sp, #12
   23758:	bl	201fc <__assert_fail@plt+0xe85c>
   2375c:	subs	r9, r0, #0
   23760:	beq	23704 <__assert_fail@plt+0x11d64>
   23764:	ldr	r0, [sp, #20]
   23768:	bl	1f018 <__assert_fail@plt+0xd678>
   2376c:	mov	r0, r9
   23770:	add	sp, sp, #24
   23774:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23778:	add	r2, sl, r2
   2377c:	ldr	r0, [sp, #20]
   23780:	lsl	r1, r2, #3
   23784:	lsl	sl, r2, #1
   23788:	bl	1f190 <__assert_fail@plt+0xd7f0>
   2378c:	cmp	r0, #0
   23790:	beq	237b0 <__assert_fail@plt+0x11e10>
   23794:	str	r0, [sp, #20]
   23798:	str	sl, [sp, #12]
   2379c:	b	23750 <__assert_fail@plt+0x11db0>
   237a0:	mov	r9, #12
   237a4:	mov	r0, r9
   237a8:	add	sp, sp, #24
   237ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   237b0:	mov	r9, #12
   237b4:	b	23764 <__assert_fail@plt+0x11dc4>
   237b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   237bc:	sub	sp, sp, #172	; 0xac
   237c0:	mov	ip, r3
   237c4:	str	r0, [sp, #64]	; 0x40
   237c8:	ldr	r0, [r0, #84]	; 0x54
   237cc:	str	r3, [sp, #152]	; 0x98
   237d0:	mov	r3, r0
   237d4:	str	r0, [sp, #120]	; 0x78
   237d8:	ldr	r3, [r3, #24]
   237dc:	add	r0, ip, ip, lsl #1
   237e0:	str	r1, [sp, #20]
   237e4:	add	r3, r3, r0, lsl #2
   237e8:	str	r3, [sp, #124]	; 0x7c
   237ec:	ldr	r3, [r3, #4]
   237f0:	cmp	r3, #0
   237f4:	ble	23894 <__assert_fail@plt+0x11ef4>
   237f8:	mov	fp, r2
   237fc:	ldr	r2, [sp, #208]	; 0xd0
   23800:	mov	r1, #1
   23804:	add	r2, r2, r2, lsl r1
   23808:	lsl	r1, r1, fp
   2380c:	lsl	r2, r2, #3
   23810:	str	r2, [sp, #44]	; 0x2c
   23814:	add	r2, r2, #24
   23818:	str	r2, [sp, #96]	; 0x60
   2381c:	ldr	r2, [sp, #20]
   23820:	str	r1, [sp, #24]
   23824:	mvn	r1, r1
   23828:	str	r1, [sp, #36]	; 0x24
   2382c:	and	r1, r2, #2
   23830:	and	r2, r2, #1
   23834:	str	r2, [sp, #32]
   23838:	mov	r2, #0
   2383c:	str	r1, [sp, #16]
   23840:	str	r2, [sp, #108]	; 0x6c
   23844:	ldr	r2, [sp, #124]	; 0x7c
   23848:	ldr	r0, [sp, #108]	; 0x6c
   2384c:	ldr	r1, [r2, #8]
   23850:	ldr	r2, [sp, #120]	; 0x78
   23854:	ldr	r1, [r1, r0, lsl #2]
   23858:	ldr	r2, [r2]
   2385c:	str	r1, [sp, #100]	; 0x64
   23860:	add	r1, r2, r1, lsl #3
   23864:	ldrb	r1, [r1, #4]
   23868:	cmp	r1, #8
   2386c:	beq	23934 <__assert_fail@plt+0x11f94>
   23870:	cmp	r1, #9
   23874:	beq	23910 <__assert_fail@plt+0x11f70>
   23878:	cmp	r1, #4
   2387c:	beq	238a8 <__assert_fail@plt+0x11f08>
   23880:	ldr	r2, [sp, #108]	; 0x6c
   23884:	add	r2, r2, #1
   23888:	cmp	r2, r3
   2388c:	str	r2, [sp, #108]	; 0x6c
   23890:	blt	23844 <__assert_fail@plt+0x11ea4>
   23894:	ldr	r3, [sp, #20]
   23898:	lsr	r0, r3, #1
   2389c:	and	r0, r0, #1
   238a0:	add	sp, sp, #172	; 0xac
   238a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   238a8:	ldr	r2, [sp, #208]	; 0xd0
   238ac:	cmn	r2, #1
   238b0:	beq	23880 <__assert_fail@plt+0x11ee0>
   238b4:	ldr	r3, [sp, #100]	; 0x64
   238b8:	ldr	r2, [sp, #64]	; 0x40
   238bc:	add	r3, r3, r3, lsl #1
   238c0:	ldr	r2, [r2, #116]	; 0x74
   238c4:	lsl	r3, r3, #2
   238c8:	str	r3, [sp, #156]	; 0x9c
   238cc:	ldr	r3, [sp, #96]	; 0x60
   238d0:	add	r3, r2, r3
   238d4:	str	r3, [sp, #88]	; 0x58
   238d8:	ldr	r3, [sp, #88]	; 0x58
   238dc:	ldr	r2, [sp, #100]	; 0x64
   238e0:	ldr	r3, [r3, #-24]	; 0xffffffe8
   238e4:	cmp	r2, r3
   238e8:	beq	23958 <__assert_fail@plt+0x11fb8>
   238ec:	ldr	r3, [sp, #88]	; 0x58
   238f0:	add	r3, r3, #24
   238f4:	str	r3, [sp, #88]	; 0x58
   238f8:	ldrb	r3, [r3, #-28]	; 0xffffffe4
   238fc:	cmp	r3, #0
   23900:	bne	238d8 <__assert_fail@plt+0x11f38>
   23904:	ldr	r3, [sp, #124]	; 0x7c
   23908:	ldr	r3, [r3, #4]
   2390c:	b	23880 <__assert_fail@plt+0x11ee0>
   23910:	ldr	r1, [sp, #16]
   23914:	cmp	r1, #0
   23918:	beq	23880 <__assert_fail@plt+0x11ee0>
   2391c:	ldr	r1, [sp, #100]	; 0x64
   23920:	ldr	r2, [r2, r1, lsl #3]
   23924:	cmp	fp, r2
   23928:	bne	23880 <__assert_fail@plt+0x11ee0>
   2392c:	mov	r0, #0
   23930:	b	238a0 <__assert_fail@plt+0x11f00>
   23934:	ldr	r1, [sp, #32]
   23938:	cmp	r1, #0
   2393c:	beq	23880 <__assert_fail@plt+0x11ee0>
   23940:	ldr	r1, [sp, #100]	; 0x64
   23944:	ldr	r2, [r2, r1, lsl #3]
   23948:	cmp	r2, fp
   2394c:	bne	23880 <__assert_fail@plt+0x11ee0>
   23950:	mvn	r0, #0
   23954:	b	238a0 <__assert_fail@plt+0x11f00>
   23958:	cmp	fp, #31
   2395c:	bgt	23974 <__assert_fail@plt+0x11fd4>
   23960:	ldr	r3, [sp, #88]	; 0x58
   23964:	ldr	r2, [sp, #24]
   23968:	ldr	r3, [r3, #-8]
   2396c:	tst	r2, r3
   23970:	beq	238ec <__assert_fail@plt+0x11f4c>
   23974:	ldr	r3, [sp, #120]	; 0x78
   23978:	ldr	r2, [sp, #156]	; 0x9c
   2397c:	ldr	r3, [r3, #20]
   23980:	add	r3, r3, r2
   23984:	ldr	r2, [sp, #152]	; 0x98
   23988:	ldr	r3, [r3, #8]
   2398c:	ldr	r3, [r3]
   23990:	cmp	r2, r3
   23994:	str	r3, [sp, #128]	; 0x80
   23998:	beq	23a4c <__assert_fail@plt+0x120ac>
   2399c:	ldr	r3, [sp, #64]	; 0x40
   239a0:	ldr	r3, [r3, #84]	; 0x54
   239a4:	mov	r2, r3
   239a8:	str	r3, [sp, #132]	; 0x84
   239ac:	ldr	r3, [sp, #128]	; 0x80
   239b0:	ldr	r2, [r2, #24]
   239b4:	add	r3, r3, r3, lsl #1
   239b8:	add	r3, r2, r3, lsl #2
   239bc:	str	r3, [sp, #136]	; 0x88
   239c0:	ldr	r3, [r3, #4]
   239c4:	cmp	r3, #0
   239c8:	ble	2417c <__assert_fail@plt+0x127dc>
   239cc:	mov	r2, #0
   239d0:	str	r2, [sp, #112]	; 0x70
   239d4:	b	239fc <__assert_fail@plt+0x1205c>
   239d8:	cmp	r1, #9
   239dc:	beq	2419c <__assert_fail@plt+0x127fc>
   239e0:	cmp	r1, #4
   239e4:	beq	23a58 <__assert_fail@plt+0x120b8>
   239e8:	ldr	r2, [sp, #112]	; 0x70
   239ec:	add	r2, r2, #1
   239f0:	cmp	r2, r3
   239f4:	str	r2, [sp, #112]	; 0x70
   239f8:	bge	2417c <__assert_fail@plt+0x127dc>
   239fc:	ldr	r2, [sp, #136]	; 0x88
   23a00:	ldr	r0, [sp, #112]	; 0x70
   23a04:	ldr	r1, [r2, #8]
   23a08:	ldr	r2, [sp, #132]	; 0x84
   23a0c:	ldr	r1, [r1, r0, lsl #2]
   23a10:	ldr	r2, [r2]
   23a14:	str	r1, [sp, #104]	; 0x68
   23a18:	add	r1, r2, r1, lsl #3
   23a1c:	ldrb	r1, [r1, #4]
   23a20:	cmp	r1, #8
   23a24:	bne	239d8 <__assert_fail@plt+0x12038>
   23a28:	ldr	r1, [sp, #32]
   23a2c:	cmp	r1, #0
   23a30:	beq	239e8 <__assert_fail@plt+0x12048>
   23a34:	ldr	r1, [sp, #104]	; 0x68
   23a38:	ldr	r2, [r2, r1, lsl #3]
   23a3c:	cmp	fp, r2
   23a40:	bne	239e8 <__assert_fail@plt+0x12048>
   23a44:	mvn	r0, #0
   23a48:	b	238a0 <__assert_fail@plt+0x11f00>
   23a4c:	ldr	r3, [sp, #32]
   23a50:	rsb	r0, r3, #0
   23a54:	b	238a0 <__assert_fail@plt+0x11f00>
   23a58:	ldr	r3, [sp, #104]	; 0x68
   23a5c:	ldr	r2, [sp, #64]	; 0x40
   23a60:	add	r3, r3, r3, lsl #1
   23a64:	ldr	r2, [r2, #116]	; 0x74
   23a68:	lsl	r3, r3, #2
   23a6c:	str	r3, [sp, #160]	; 0xa0
   23a70:	ldr	r3, [sp, #96]	; 0x60
   23a74:	add	r3, r2, r3
   23a78:	str	r3, [sp, #92]	; 0x5c
   23a7c:	b	23a98 <__assert_fail@plt+0x120f8>
   23a80:	ldr	r3, [sp, #92]	; 0x5c
   23a84:	add	r3, r3, #24
   23a88:	str	r3, [sp, #92]	; 0x5c
   23a8c:	ldrb	r3, [r3, #-28]	; 0xffffffe4
   23a90:	cmp	r3, #0
   23a94:	beq	241bc <__assert_fail@plt+0x1281c>
   23a98:	ldr	r3, [sp, #92]	; 0x5c
   23a9c:	ldr	r2, [sp, #104]	; 0x68
   23aa0:	ldr	r3, [r3, #-24]	; 0xffffffe8
   23aa4:	cmp	r2, r3
   23aa8:	bne	23a80 <__assert_fail@plt+0x120e0>
   23aac:	cmp	fp, #31
   23ab0:	bgt	23ac8 <__assert_fail@plt+0x12128>
   23ab4:	ldr	r3, [sp, #92]	; 0x5c
   23ab8:	ldr	r2, [sp, #24]
   23abc:	ldr	r3, [r3, #-8]
   23ac0:	tst	r2, r3
   23ac4:	beq	23a80 <__assert_fail@plt+0x120e0>
   23ac8:	ldr	r3, [sp, #132]	; 0x84
   23acc:	ldr	r2, [sp, #160]	; 0xa0
   23ad0:	ldr	r3, [r3, #20]
   23ad4:	add	r3, r3, r2
   23ad8:	ldr	r2, [sp, #128]	; 0x80
   23adc:	ldr	r3, [r3, #8]
   23ae0:	ldr	r3, [r3]
   23ae4:	cmp	r2, r3
   23ae8:	str	r3, [sp, #140]	; 0x8c
   23aec:	beq	24164 <__assert_fail@plt+0x127c4>
   23af0:	ldr	r3, [sp, #64]	; 0x40
   23af4:	ldr	r3, [r3, #84]	; 0x54
   23af8:	mov	r2, r3
   23afc:	str	r3, [sp, #144]	; 0x90
   23b00:	ldr	r3, [sp, #140]	; 0x8c
   23b04:	ldr	r2, [r2, #24]
   23b08:	add	r3, r3, r3, lsl #1
   23b0c:	add	r3, r2, r3, lsl #2
   23b10:	str	r3, [sp, #148]	; 0x94
   23b14:	ldr	r3, [r3, #4]
   23b18:	cmp	r3, #0
   23b1c:	ble	24138 <__assert_fail@plt+0x12798>
   23b20:	mov	r2, #0
   23b24:	str	r2, [sp, #116]	; 0x74
   23b28:	b	23b50 <__assert_fail@plt+0x121b0>
   23b2c:	cmp	r1, #9
   23b30:	beq	23b9c <__assert_fail@plt+0x121fc>
   23b34:	cmp	r1, #4
   23b38:	beq	23bbc <__assert_fail@plt+0x1221c>
   23b3c:	ldr	r2, [sp, #116]	; 0x74
   23b40:	add	r2, r2, #1
   23b44:	cmp	r2, r3
   23b48:	str	r2, [sp, #116]	; 0x74
   23b4c:	bge	24138 <__assert_fail@plt+0x12798>
   23b50:	ldr	r2, [sp, #148]	; 0x94
   23b54:	ldr	r0, [sp, #116]	; 0x74
   23b58:	ldr	r1, [r2, #8]
   23b5c:	ldr	r2, [sp, #144]	; 0x90
   23b60:	ldr	r1, [r1, r0, lsl #2]
   23b64:	ldr	r2, [r2]
   23b68:	str	r1, [sp, #84]	; 0x54
   23b6c:	add	r1, r2, r1, lsl #3
   23b70:	ldrb	r1, [r1, #4]
   23b74:	cmp	r1, #8
   23b78:	bne	23b2c <__assert_fail@plt+0x1218c>
   23b7c:	ldr	r1, [sp, #32]
   23b80:	cmp	r1, #0
   23b84:	beq	23b3c <__assert_fail@plt+0x1219c>
   23b88:	ldr	r1, [sp, #84]	; 0x54
   23b8c:	ldr	r2, [r2, r1, lsl #3]
   23b90:	cmp	fp, r2
   23b94:	bne	23b3c <__assert_fail@plt+0x1219c>
   23b98:	b	23950 <__assert_fail@plt+0x11fb0>
   23b9c:	ldr	r1, [sp, #16]
   23ba0:	cmp	r1, #0
   23ba4:	beq	23b3c <__assert_fail@plt+0x1219c>
   23ba8:	ldr	r1, [sp, #84]	; 0x54
   23bac:	ldr	r2, [r2, r1, lsl #3]
   23bb0:	cmp	fp, r2
   23bb4:	bne	23b3c <__assert_fail@plt+0x1219c>
   23bb8:	b	2392c <__assert_fail@plt+0x11f8c>
   23bbc:	ldr	r3, [sp, #84]	; 0x54
   23bc0:	ldr	r2, [sp, #64]	; 0x40
   23bc4:	add	r3, r3, r3, lsl #1
   23bc8:	ldr	r2, [r2, #116]	; 0x74
   23bcc:	lsl	r3, r3, #2
   23bd0:	str	r3, [sp, #164]	; 0xa4
   23bd4:	ldr	r3, [sp, #96]	; 0x60
   23bd8:	add	r3, r2, r3
   23bdc:	str	r3, [sp, #68]	; 0x44
   23be0:	b	23bfc <__assert_fail@plt+0x1225c>
   23be4:	ldr	r3, [sp, #68]	; 0x44
   23be8:	add	r3, r3, #24
   23bec:	str	r3, [sp, #68]	; 0x44
   23bf0:	ldrb	r3, [r3, #-28]	; 0xffffffe4
   23bf4:	cmp	r3, #0
   23bf8:	beq	24158 <__assert_fail@plt+0x127b8>
   23bfc:	ldr	r3, [sp, #68]	; 0x44
   23c00:	ldr	r2, [sp, #84]	; 0x54
   23c04:	ldr	r3, [r3, #-24]	; 0xffffffe8
   23c08:	cmp	r2, r3
   23c0c:	bne	23be4 <__assert_fail@plt+0x12244>
   23c10:	cmp	fp, #31
   23c14:	bgt	23c2c <__assert_fail@plt+0x1228c>
   23c18:	ldr	r3, [sp, #68]	; 0x44
   23c1c:	ldr	r2, [sp, #24]
   23c20:	ldr	r3, [r3, #-8]
   23c24:	tst	r2, r3
   23c28:	beq	23be4 <__assert_fail@plt+0x12244>
   23c2c:	ldr	r3, [sp, #144]	; 0x90
   23c30:	ldr	r2, [sp, #164]	; 0xa4
   23c34:	ldr	r3, [r3, #20]
   23c38:	add	r3, r3, r2
   23c3c:	ldr	r2, [sp, #140]	; 0x8c
   23c40:	ldr	r3, [r3, #8]
   23c44:	ldr	r3, [r3]
   23c48:	cmp	r2, r3
   23c4c:	str	r3, [sp, #72]	; 0x48
   23c50:	beq	24120 <__assert_fail@plt+0x12780>
   23c54:	ldr	r3, [sp, #64]	; 0x40
   23c58:	ldr	r3, [r3, #84]	; 0x54
   23c5c:	mov	r2, r3
   23c60:	str	r3, [sp, #48]	; 0x30
   23c64:	ldr	r3, [sp, #72]	; 0x48
   23c68:	ldr	r2, [r2, #24]
   23c6c:	add	r3, r3, r3, lsl #1
   23c70:	add	r3, r2, r3, lsl #2
   23c74:	str	r3, [sp, #80]	; 0x50
   23c78:	ldr	r1, [r3, #4]
   23c7c:	cmp	r1, #0
   23c80:	ble	24100 <__assert_fail@plt+0x12760>
   23c84:	mov	r3, #0
   23c88:	str	r3, [sp, #40]	; 0x28
   23c8c:	b	23cb4 <__assert_fail@plt+0x12314>
   23c90:	cmp	r3, #9
   23c94:	beq	23d00 <__assert_fail@plt+0x12360>
   23c98:	cmp	r3, #4
   23c9c:	beq	23d20 <__assert_fail@plt+0x12380>
   23ca0:	ldr	r3, [sp, #40]	; 0x28
   23ca4:	add	r3, r3, #1
   23ca8:	cmp	r3, r1
   23cac:	str	r3, [sp, #40]	; 0x28
   23cb0:	bge	24100 <__assert_fail@plt+0x12760>
   23cb4:	ldr	r3, [sp, #80]	; 0x50
   23cb8:	ldr	r0, [sp, #40]	; 0x28
   23cbc:	ldr	r2, [sp, #48]	; 0x30
   23cc0:	ldr	r3, [r3, #8]
   23cc4:	ldr	r2, [r2]
   23cc8:	ldr	r3, [r3, r0, lsl #2]
   23ccc:	str	r3, [sp, #12]
   23cd0:	add	r3, r2, r3, lsl #3
   23cd4:	ldrb	r3, [r3, #4]
   23cd8:	cmp	r3, #8
   23cdc:	bne	23c90 <__assert_fail@plt+0x122f0>
   23ce0:	ldr	r3, [sp, #32]
   23ce4:	cmp	r3, #0
   23ce8:	beq	23ca0 <__assert_fail@plt+0x12300>
   23cec:	ldr	r3, [sp, #12]
   23cf0:	ldr	r3, [r2, r3, lsl #3]
   23cf4:	cmp	fp, r3
   23cf8:	bne	23ca0 <__assert_fail@plt+0x12300>
   23cfc:	b	23950 <__assert_fail@plt+0x11fb0>
   23d00:	ldr	r3, [sp, #16]
   23d04:	cmp	r3, #0
   23d08:	beq	23ca0 <__assert_fail@plt+0x12300>
   23d0c:	ldr	r3, [sp, #12]
   23d10:	ldr	r3, [r2, r3, lsl #3]
   23d14:	cmp	fp, r3
   23d18:	bne	23ca0 <__assert_fail@plt+0x12300>
   23d1c:	b	2392c <__assert_fail@plt+0x11f8c>
   23d20:	ldr	r3, [sp, #12]
   23d24:	ldr	r2, [sp, #64]	; 0x40
   23d28:	add	r3, r3, r3, lsl #1
   23d2c:	ldr	r9, [r2, #116]	; 0x74
   23d30:	lsl	r3, r3, #2
   23d34:	str	r3, [sp, #76]	; 0x4c
   23d38:	ldr	r3, [sp, #96]	; 0x60
   23d3c:	add	r9, r9, r3
   23d40:	b	23d54 <__assert_fail@plt+0x123b4>
   23d44:	add	r9, r9, #24
   23d48:	ldrb	r3, [r9, #-28]	; 0xffffffe4
   23d4c:	cmp	r3, #0
   23d50:	beq	23fa8 <__assert_fail@plt+0x12608>
   23d54:	ldr	r3, [r9, #-24]	; 0xffffffe8
   23d58:	ldr	r2, [sp, #12]
   23d5c:	cmp	r2, r3
   23d60:	bne	23d44 <__assert_fail@plt+0x123a4>
   23d64:	cmp	fp, #31
   23d68:	bgt	23d7c <__assert_fail@plt+0x123dc>
   23d6c:	ldr	r3, [r9, #-8]
   23d70:	ldr	r2, [sp, #24]
   23d74:	tst	r2, r3
   23d78:	beq	23d44 <__assert_fail@plt+0x123a4>
   23d7c:	ldr	r3, [sp, #48]	; 0x30
   23d80:	ldr	r2, [sp, #76]	; 0x4c
   23d84:	ldr	r3, [r3, #20]
   23d88:	add	r3, r3, r2
   23d8c:	ldr	r2, [sp, #72]	; 0x48
   23d90:	ldr	r3, [r3, #8]
   23d94:	ldr	r3, [r3]
   23d98:	cmp	r2, r3
   23d9c:	str	r3, [sp, #28]
   23da0:	beq	240e8 <__assert_fail@plt+0x12748>
   23da4:	ldr	r2, [sp, #64]	; 0x40
   23da8:	ldr	r3, [sp, #28]
   23dac:	ldr	r7, [r2, #84]	; 0x54
   23db0:	add	sl, r3, r3, lsl #1
   23db4:	ldr	r3, [r7, #24]
   23db8:	add	sl, r3, sl, lsl #2
   23dbc:	ldr	r1, [sl, #4]
   23dc0:	cmp	r1, #0
   23dc4:	ble	23f80 <__assert_fail@plt+0x125e0>
   23dc8:	str	r9, [sp, #52]	; 0x34
   23dcc:	mov	r6, #0
   23dd0:	mov	r9, r2
   23dd4:	b	23df4 <__assert_fail@plt+0x12454>
   23dd8:	cmp	r3, #9
   23ddc:	beq	23e3c <__assert_fail@plt+0x1249c>
   23de0:	cmp	r3, #4
   23de4:	beq	23e58 <__assert_fail@plt+0x124b8>
   23de8:	add	r6, r6, #1
   23dec:	cmp	r6, r1
   23df0:	bge	23e34 <__assert_fail@plt+0x12494>
   23df4:	ldr	r3, [sl, #8]
   23df8:	ldr	r2, [r7]
   23dfc:	ldr	r5, [r3, r6, lsl #2]
   23e00:	add	r3, r2, r5, lsl #3
   23e04:	ldrb	r3, [r3, #4]
   23e08:	cmp	r3, #8
   23e0c:	bne	23dd8 <__assert_fail@plt+0x12438>
   23e10:	ldr	r3, [sp, #32]
   23e14:	cmp	r3, #0
   23e18:	beq	23de8 <__assert_fail@plt+0x12448>
   23e1c:	ldr	r3, [r2, r5, lsl #3]
   23e20:	cmp	fp, r3
   23e24:	beq	23950 <__assert_fail@plt+0x11fb0>
   23e28:	add	r6, r6, #1
   23e2c:	cmp	r6, r1
   23e30:	blt	23df4 <__assert_fail@plt+0x12454>
   23e34:	ldr	r9, [sp, #52]	; 0x34
   23e38:	b	23f80 <__assert_fail@plt+0x125e0>
   23e3c:	ldr	r3, [sp, #16]
   23e40:	cmp	r3, #0
   23e44:	beq	23de8 <__assert_fail@plt+0x12448>
   23e48:	ldr	r3, [r2, r5, lsl #3]
   23e4c:	cmp	fp, r3
   23e50:	bne	23de8 <__assert_fail@plt+0x12448>
   23e54:	b	2392c <__assert_fail@plt+0x11f8c>
   23e58:	ldr	r3, [sp, #44]	; 0x2c
   23e5c:	ldr	r4, [r9, #116]	; 0x74
   23e60:	add	r8, r5, r5, lsl #1
   23e64:	add	r4, r4, r3
   23e68:	cmp	fp, #31
   23e6c:	lsl	r8, r8, #2
   23e70:	ldr	r3, [sp, #16]
   23e74:	add	r4, r4, #24
   23e78:	ble	23fb4 <__assert_fail@plt+0x12614>
   23e7c:	cmp	r3, #0
   23e80:	bne	23f18 <__assert_fail@plt+0x12578>
   23e84:	str	sl, [sp, #56]	; 0x38
   23e88:	str	r6, [sp, #60]	; 0x3c
   23e8c:	ldr	sl, [sp, #20]
   23e90:	ldr	r6, [sp, #28]
   23e94:	b	23ea4 <__assert_fail@plt+0x12504>
   23e98:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   23e9c:	cmp	r3, #0
   23ea0:	beq	23efc <__assert_fail@plt+0x1255c>
   23ea4:	ldr	r3, [r4, #-24]	; 0xffffffe8
   23ea8:	add	r4, r4, #24
   23eac:	cmp	r5, r3
   23eb0:	bne	23e98 <__assert_fail@plt+0x124f8>
   23eb4:	ldr	r3, [r7, #20]
   23eb8:	mov	r2, fp
   23ebc:	add	r3, r3, r8
   23ec0:	mov	r1, sl
   23ec4:	ldr	r3, [r3, #8]
   23ec8:	mov	r0, r9
   23ecc:	ldr	ip, [r3]
   23ed0:	cmp	ip, r6
   23ed4:	mov	r3, ip
   23ed8:	beq	240d0 <__assert_fail@plt+0x12730>
   23edc:	ldr	ip, [sp, #208]	; 0xd0
   23ee0:	str	ip, [sp]
   23ee4:	bl	237b8 <__assert_fail@plt+0x11e18>
   23ee8:	cmn	r0, #1
   23eec:	beq	23950 <__assert_fail@plt+0x11fb0>
   23ef0:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   23ef4:	cmp	r3, #0
   23ef8:	bne	23ea4 <__assert_fail@plt+0x12504>
   23efc:	ldr	sl, [sp, #56]	; 0x38
   23f00:	ldr	r6, [sp, #60]	; 0x3c
   23f04:	ldr	r1, [sl, #4]
   23f08:	b	23de8 <__assert_fail@plt+0x12448>
   23f0c:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   23f10:	cmp	r3, #0
   23f14:	beq	23f04 <__assert_fail@plt+0x12564>
   23f18:	ldr	r3, [r4, #-24]	; 0xffffffe8
   23f1c:	add	r4, r4, #24
   23f20:	cmp	r5, r3
   23f24:	bne	23f0c <__assert_fail@plt+0x1256c>
   23f28:	ldr	r3, [r7, #20]
   23f2c:	ldr	lr, [sp, #28]
   23f30:	add	r3, r3, r8
   23f34:	mov	r2, fp
   23f38:	ldr	r3, [r3, #8]
   23f3c:	ldr	r1, [sp, #20]
   23f40:	mov	r0, r9
   23f44:	ldr	ip, [r3]
   23f48:	cmp	ip, lr
   23f4c:	mov	r3, ip
   23f50:	beq	240d0 <__assert_fail@plt+0x12730>
   23f54:	ldr	ip, [sp, #208]	; 0xd0
   23f58:	str	ip, [sp]
   23f5c:	bl	237b8 <__assert_fail@plt+0x11e18>
   23f60:	cmn	r0, #1
   23f64:	beq	23950 <__assert_fail@plt+0x11fb0>
   23f68:	cmp	r0, #0
   23f6c:	bne	23f0c <__assert_fail@plt+0x1256c>
   23f70:	ldr	r9, [sp, #52]	; 0x34
   23f74:	ldr	r3, [sp, #16]
   23f78:	cmp	r3, #0
   23f7c:	bne	2392c <__assert_fail@plt+0x11f8c>
   23f80:	cmp	fp, #31
   23f84:	bgt	23d44 <__assert_fail@plt+0x123a4>
   23f88:	ldr	r3, [r9, #-8]
   23f8c:	ldr	r2, [sp, #36]	; 0x24
   23f90:	add	r9, r9, #24
   23f94:	and	r3, r3, r2
   23f98:	str	r3, [r9, #-32]	; 0xffffffe0
   23f9c:	ldrb	r3, [r9, #-28]	; 0xffffffe4
   23fa0:	cmp	r3, #0
   23fa4:	bne	23d54 <__assert_fail@plt+0x123b4>
   23fa8:	ldr	r3, [sp, #80]	; 0x50
   23fac:	ldr	r1, [r3, #4]
   23fb0:	b	23ca0 <__assert_fail@plt+0x12300>
   23fb4:	cmp	r3, #0
   23fb8:	bne	240c0 <__assert_fail@plt+0x12720>
   23fbc:	str	sl, [sp, #56]	; 0x38
   23fc0:	str	r6, [sp, #60]	; 0x3c
   23fc4:	ldr	sl, [sp, #208]	; 0xd0
   23fc8:	ldr	r6, [sp, #28]
   23fcc:	b	23fe0 <__assert_fail@plt+0x12640>
   23fd0:	add	r4, r4, #24
   23fd4:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   23fd8:	cmp	r3, #0
   23fdc:	beq	23efc <__assert_fail@plt+0x1255c>
   23fe0:	ldr	r3, [r4, #-24]	; 0xffffffe8
   23fe4:	cmp	r5, r3
   23fe8:	bne	23fd0 <__assert_fail@plt+0x12630>
   23fec:	ldr	r3, [r4, #-8]
   23ff0:	ldr	ip, [sp, #24]
   23ff4:	mov	r2, fp
   23ff8:	tst	ip, r3
   23ffc:	ldr	r1, [sp, #20]
   24000:	mov	r0, r9
   24004:	beq	23fd0 <__assert_fail@plt+0x12630>
   24008:	ldr	r3, [r7, #20]
   2400c:	add	r3, r3, r8
   24010:	ldr	r3, [r3, #8]
   24014:	ldr	ip, [r3]
   24018:	cmp	r6, ip
   2401c:	mov	r3, ip
   24020:	beq	240d0 <__assert_fail@plt+0x12730>
   24024:	str	sl, [sp]
   24028:	bl	237b8 <__assert_fail@plt+0x11e18>
   2402c:	cmn	r0, #1
   24030:	beq	23950 <__assert_fail@plt+0x11fb0>
   24034:	ldr	r3, [r4, #-8]
   24038:	ldr	r2, [sp, #36]	; 0x24
   2403c:	and	r3, r3, r2
   24040:	str	r3, [r4, #-8]
   24044:	b	23fd0 <__assert_fail@plt+0x12630>
   24048:	ldr	r3, [r4, #-8]
   2404c:	ldr	ip, [sp, #24]
   24050:	mov	r2, fp
   24054:	tst	ip, r3
   24058:	ldr	r1, [sp, #20]
   2405c:	mov	r0, r9
   24060:	beq	240b0 <__assert_fail@plt+0x12710>
   24064:	ldr	r3, [r7, #20]
   24068:	ldr	lr, [sp, #28]
   2406c:	add	r3, r3, r8
   24070:	ldr	r3, [r3, #8]
   24074:	ldr	ip, [r3]
   24078:	cmp	lr, ip
   2407c:	mov	r3, ip
   24080:	beq	240d0 <__assert_fail@plt+0x12730>
   24084:	ldr	ip, [sp, #208]	; 0xd0
   24088:	str	ip, [sp]
   2408c:	bl	237b8 <__assert_fail@plt+0x11e18>
   24090:	cmn	r0, #1
   24094:	beq	23950 <__assert_fail@plt+0x11fb0>
   24098:	cmp	r0, #0
   2409c:	beq	23f70 <__assert_fail@plt+0x125d0>
   240a0:	ldr	r3, [r4, #-8]
   240a4:	ldr	r2, [sp, #36]	; 0x24
   240a8:	and	r3, r3, r2
   240ac:	str	r3, [r4, #-8]
   240b0:	add	r4, r4, #24
   240b4:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   240b8:	cmp	r3, #0
   240bc:	beq	23f04 <__assert_fail@plt+0x12564>
   240c0:	ldr	r3, [r4, #-24]	; 0xffffffe8
   240c4:	cmp	r5, r3
   240c8:	bne	240b0 <__assert_fail@plt+0x12710>
   240cc:	b	24048 <__assert_fail@plt+0x126a8>
   240d0:	ldr	r3, [sp, #32]
   240d4:	ldr	r9, [sp, #52]	; 0x34
   240d8:	cmp	r3, #0
   240dc:	beq	23f74 <__assert_fail@plt+0x125d4>
   240e0:	mvn	r0, #0
   240e4:	b	238a0 <__assert_fail@plt+0x11f00>
   240e8:	ldr	r3, [sp, #32]
   240ec:	cmp	r3, #0
   240f0:	bne	23950 <__assert_fail@plt+0x11fb0>
   240f4:	ldr	r3, [sp, #16]
   240f8:	cmp	r3, #0
   240fc:	bne	2392c <__assert_fail@plt+0x11f8c>
   24100:	cmp	fp, #31
   24104:	bgt	23be4 <__assert_fail@plt+0x12244>
   24108:	ldr	r2, [sp, #68]	; 0x44
   2410c:	ldr	r1, [sp, #36]	; 0x24
   24110:	ldr	r3, [r2, #-8]
   24114:	and	r3, r3, r1
   24118:	str	r3, [r2, #-8]
   2411c:	b	23be4 <__assert_fail@plt+0x12244>
   24120:	ldr	r3, [sp, #32]
   24124:	cmp	r3, #0
   24128:	bne	23950 <__assert_fail@plt+0x11fb0>
   2412c:	ldr	r3, [sp, #16]
   24130:	cmp	r3, #0
   24134:	bne	2392c <__assert_fail@plt+0x11f8c>
   24138:	cmp	fp, #31
   2413c:	bgt	23a80 <__assert_fail@plt+0x120e0>
   24140:	ldr	r2, [sp, #92]	; 0x5c
   24144:	ldr	r1, [sp, #36]	; 0x24
   24148:	ldr	r3, [r2, #-8]
   2414c:	and	r3, r3, r1
   24150:	str	r3, [r2, #-8]
   24154:	b	23a80 <__assert_fail@plt+0x120e0>
   24158:	ldr	r3, [sp, #148]	; 0x94
   2415c:	ldr	r3, [r3, #4]
   24160:	b	23b3c <__assert_fail@plt+0x1219c>
   24164:	ldr	r3, [sp, #32]
   24168:	cmp	r3, #0
   2416c:	bne	23950 <__assert_fail@plt+0x11fb0>
   24170:	ldr	r3, [sp, #16]
   24174:	cmp	r3, #0
   24178:	bne	2392c <__assert_fail@plt+0x11f8c>
   2417c:	cmp	fp, #31
   24180:	bgt	238ec <__assert_fail@plt+0x11f4c>
   24184:	ldr	r2, [sp, #88]	; 0x58
   24188:	ldr	r1, [sp, #36]	; 0x24
   2418c:	ldr	r3, [r2, #-8]
   24190:	and	r3, r3, r1
   24194:	str	r3, [r2, #-8]
   24198:	b	238ec <__assert_fail@plt+0x11f4c>
   2419c:	ldr	r1, [sp, #16]
   241a0:	cmp	r1, #0
   241a4:	beq	239e8 <__assert_fail@plt+0x12048>
   241a8:	ldr	r1, [sp, #104]	; 0x68
   241ac:	ldr	r2, [r2, r1, lsl #3]
   241b0:	cmp	fp, r2
   241b4:	bne	239e8 <__assert_fail@plt+0x12048>
   241b8:	b	2392c <__assert_fail@plt+0x11f8c>
   241bc:	ldr	r3, [sp, #136]	; 0x88
   241c0:	ldr	r3, [r3, #4]
   241c4:	b	239e8 <__assert_fail@plt+0x12048>
   241c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   241cc:	sub	sp, sp, #36	; 0x24
   241d0:	ldr	fp, [r0, #108]	; 0x6c
   241d4:	ldr	r6, [sp, #72]	; 0x48
   241d8:	ldr	r7, [sp, #80]	; 0x50
   241dc:	ldr	lr, [r0, #84]	; 0x54
   241e0:	mov	ip, fp
   241e4:	mov	r4, #0
   241e8:	str	lr, [sp, #12]
   241ec:	cmp	r4, ip
   241f0:	bge	2424c <__assert_fail@plt+0x128ac>
   241f4:	add	lr, r4, ip
   241f8:	ldr	r5, [r0, #116]	; 0x74
   241fc:	add	lr, lr, lr, lsr #31
   24200:	asr	lr, lr, #1
   24204:	add	r8, lr, lr, lsl #1
   24208:	add	r8, r5, r8, lsl #3
   2420c:	ldr	r8, [r8, #4]
   24210:	cmp	r6, r8
   24214:	ble	2423c <__assert_fail@plt+0x1289c>
   24218:	b	243e8 <__assert_fail@plt+0x12a48>
   2421c:	asr	ip, ip, #1
   24220:	mov	r9, ip
   24224:	add	r8, ip, ip, lsl #1
   24228:	add	r8, r5, r8, lsl #3
   2422c:	ldr	r8, [r8, #4]
   24230:	cmp	r8, r6
   24234:	blt	243f0 <__assert_fail@plt+0x12a50>
   24238:	mov	lr, ip
   2423c:	add	ip, r4, lr
   24240:	cmp	r4, lr
   24244:	add	ip, ip, ip, lsr #31
   24248:	blt	2421c <__assert_fail@plt+0x1287c>
   2424c:	cmp	fp, r4
   24250:	mvnle	r4, #0
   24254:	ble	24270 <__assert_fail@plt+0x128d0>
   24258:	add	lr, r4, r4, lsl #1
   2425c:	ldr	ip, [r0, #116]	; 0x74
   24260:	add	ip, ip, lr, lsl #3
   24264:	ldr	ip, [ip, #4]
   24268:	cmp	r6, ip
   2426c:	mvnne	r4, #0
   24270:	mov	ip, fp
   24274:	mov	r5, #0
   24278:	cmp	r5, ip
   2427c:	bge	242d8 <__assert_fail@plt+0x12938>
   24280:	add	lr, r5, ip
   24284:	ldr	r8, [r0, #116]	; 0x74
   24288:	add	lr, lr, lr, lsr #31
   2428c:	asr	lr, lr, #1
   24290:	add	r9, lr, lr, lsl #1
   24294:	add	r9, r8, r9, lsl #3
   24298:	ldr	r9, [r9, #4]
   2429c:	cmp	r7, r9
   242a0:	ble	242c8 <__assert_fail@plt+0x12928>
   242a4:	b	243fc <__assert_fail@plt+0x12a5c>
   242a8:	asr	ip, ip, #1
   242ac:	mov	sl, ip
   242b0:	add	r9, ip, ip, lsl #1
   242b4:	add	r9, r8, r9, lsl #3
   242b8:	ldr	r9, [r9, #4]
   242bc:	cmp	r9, r7
   242c0:	blt	24404 <__assert_fail@plt+0x12a64>
   242c4:	mov	lr, ip
   242c8:	add	ip, r5, lr
   242cc:	cmp	r5, lr
   242d0:	add	ip, ip, ip, lsr #31
   242d4:	blt	242a8 <__assert_fail@plt+0x12908>
   242d8:	cmp	fp, r5
   242dc:	mvnle	r5, #0
   242e0:	ble	242fc <__assert_fail@plt+0x1295c>
   242e4:	add	lr, r5, r5, lsl #1
   242e8:	ldr	ip, [r0, #116]	; 0x74
   242ec:	add	ip, ip, lr, lsl #3
   242f0:	ldr	ip, [ip, #4]
   242f4:	cmp	r7, ip
   242f8:	mvnne	r5, #0
   242fc:	ldr	ip, [r1]
   24300:	cmp	ip, #0
   24304:	ble	24424 <__assert_fail@plt+0x12a84>
   24308:	ldr	r8, [sp, #12]
   2430c:	mov	sl, r2
   24310:	mov	fp, r0
   24314:	mov	r9, #0
   24318:	str	r3, [sp, #20]
   2431c:	str	r1, [sp, #16]
   24320:	str	r4, [sp, #24]
   24324:	str	r5, [sp, #28]
   24328:	ldr	r3, [sl]
   2432c:	ldr	r2, [fp, #116]	; 0x74
   24330:	lsl	r1, r9, #2
   24334:	ldr	r3, [r3, r9, lsl #2]
   24338:	ldr	r0, [r8]
   2433c:	str	r1, [sp, #12]
   24340:	add	r3, r3, r3, lsl #1
   24344:	add	lr, r2, r3, lsl #3
   24348:	ldr	r3, [r2, r3, lsl #3]
   2434c:	ldr	r1, [lr, #8]
   24350:	cmp	r6, r1
   24354:	ldr	r5, [r0, r3, lsl #3]
   24358:	blt	24484 <__assert_fail@plt+0x12ae4>
   2435c:	ldr	r3, [lr, #12]
   24360:	cmp	r6, r3
   24364:	bgt	2442c <__assert_fail@plt+0x12a8c>
   24368:	cmp	r6, r3
   2436c:	moveq	r4, #2
   24370:	movne	r4, #0
   24374:	cmp	r6, r1
   24378:	orreq	r4, r4, #1
   2437c:	cmp	r4, #0
   24380:	bne	24434 <__assert_fail@plt+0x12a94>
   24384:	cmp	r7, r1
   24388:	blt	243dc <__assert_fail@plt+0x12a3c>
   2438c:	cmp	r7, r3
   24390:	movgt	r1, #1
   24394:	bgt	243d4 <__assert_fail@plt+0x12a34>
   24398:	cmp	r7, r3
   2439c:	moveq	r3, #2
   243a0:	movne	r3, #0
   243a4:	cmp	r7, r1
   243a8:	movne	r1, r3
   243ac:	orreq	r1, r3, #1
   243b0:	cmp	r1, #0
   243b4:	beq	243d4 <__assert_fail@plt+0x12a34>
   243b8:	ldr	r3, [sp, #28]
   243bc:	mov	r2, r5
   243c0:	str	r3, [sp]
   243c4:	mov	r0, fp
   243c8:	ldr	r3, [sp, #76]	; 0x4c
   243cc:	bl	237b8 <__assert_fail@plt+0x11e18>
   243d0:	mov	r1, r0
   243d4:	cmp	r1, r4
   243d8:	beq	24410 <__assert_fail@plt+0x12a70>
   243dc:	mov	r0, #1
   243e0:	add	sp, sp, #36	; 0x24
   243e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   243e8:	mov	r9, lr
   243ec:	mov	lr, ip
   243f0:	add	r4, r9, #1
   243f4:	mov	ip, lr
   243f8:	b	241ec <__assert_fail@plt+0x1284c>
   243fc:	mov	sl, lr
   24400:	mov	lr, ip
   24404:	add	r5, sl, #1
   24408:	mov	ip, lr
   2440c:	b	24278 <__assert_fail@plt+0x128d8>
   24410:	ldr	r3, [sp, #16]
   24414:	ldr	ip, [r3]
   24418:	add	r9, r9, #1
   2441c:	cmp	r9, ip
   24420:	blt	24328 <__assert_fail@plt+0x12988>
   24424:	mov	r0, #0
   24428:	b	243e0 <__assert_fail@plt+0x12a40>
   2442c:	mov	r4, #1
   24430:	b	24384 <__assert_fail@plt+0x129e4>
   24434:	ldr	r3, [sp, #24]
   24438:	mov	r1, r4
   2443c:	str	r3, [sp]
   24440:	mov	r2, r5
   24444:	ldr	r3, [sp, #20]
   24448:	mov	r0, fp
   2444c:	bl	237b8 <__assert_fail@plt+0x11e18>
   24450:	ldr	r2, [sl]
   24454:	lsl	r1, r9, #2
   24458:	ldr	r3, [fp, #116]	; 0x74
   2445c:	ldr	r2, [r2, r1]
   24460:	add	r2, r2, r2, lsl #1
   24464:	add	r3, r3, r2, lsl #3
   24468:	ldr	r1, [r3, #8]
   2446c:	cmp	r7, r1
   24470:	mvnlt	r1, #0
   24474:	mov	r4, r0
   24478:	blt	243d4 <__assert_fail@plt+0x12a34>
   2447c:	ldr	r3, [r3, #12]
   24480:	b	2438c <__assert_fail@plt+0x129ec>
   24484:	cmp	r7, r1
   24488:	blt	24418 <__assert_fail@plt+0x12a78>
   2448c:	ldr	r3, [lr, #12]
   24490:	cmp	r7, r3
   24494:	bgt	243dc <__assert_fail@plt+0x12a3c>
   24498:	mvn	r4, #0
   2449c:	b	24398 <__assert_fail@plt+0x129f8>
   244a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   244a4:	mov	r8, r1
   244a8:	mov	r6, r0
   244ac:	ldr	r1, [r0, #28]
   244b0:	add	r0, r8, r8, lsl #1
   244b4:	sub	sp, sp, #36	; 0x24
   244b8:	add	r1, r1, r0, lsl #2
   244bc:	mov	r4, #0
   244c0:	str	r4, [sp, #24]
   244c4:	str	r4, [sp, #20]
   244c8:	str	r4, [sp, #28]
   244cc:	ldr	lr, [r1, #4]
   244d0:	str	r1, [sp, #12]
   244d4:	cmp	lr, r4
   244d8:	str	r3, [sp, #8]
   244dc:	ble	24984 <__assert_fail@plt+0x12fe4>
   244e0:	mov	r5, r1
   244e4:	str	r2, [sp]
   244e8:	ldr	r2, [r5, #8]
   244ec:	ldr	r3, [r2, r4, lsl #2]
   244f0:	cmp	r8, r3
   244f4:	beq	246d0 <__assert_fail@plt+0x12d30>
   244f8:	ldr	r1, [r6]
   244fc:	add	r1, r1, r3, lsl #3
   24500:	ldrb	r1, [r1, #4]
   24504:	tst	r1, #8
   24508:	beq	246d0 <__assert_fail@plt+0x12d30>
   2450c:	add	r3, r3, r3, lsl #1
   24510:	ldr	r1, [r6, #20]
   24514:	lsl	r3, r3, #2
   24518:	str	r3, [sp, #4]
   2451c:	add	r3, r1, r3
   24520:	ldr	r0, [r3, #8]
   24524:	ldr	r3, [r3, #4]
   24528:	cmp	r3, #1
   2452c:	ldr	r1, [r0]
   24530:	ble	24908 <__assert_fail@plt+0x12f68>
   24534:	cmp	lr, #0
   24538:	ldr	r7, [r0, #4]
   2453c:	ble	24598 <__assert_fail@plt+0x12bf8>
   24540:	sub	sl, lr, #1
   24544:	mov	r9, sl
   24548:	mov	ip, #0
   2454c:	cmp	ip, r9
   24550:	bcs	2458c <__assert_fail@plt+0x12bec>
   24554:	add	r0, ip, r9
   24558:	lsr	r0, r0, #1
   2455c:	ldr	r3, [r2, r0, lsl #2]
   24560:	cmp	r1, r3
   24564:	ble	2457c <__assert_fail@plt+0x12bdc>
   24568:	b	24808 <__assert_fail@plt+0x12e68>
   2456c:	ldr	r9, [r2, r3, lsl #2]
   24570:	cmp	r1, r9
   24574:	bgt	24810 <__assert_fail@plt+0x12e70>
   24578:	mov	r0, r3
   2457c:	add	r3, ip, r0
   24580:	cmp	ip, r0
   24584:	lsr	r3, r3, #1
   24588:	bcc	2456c <__assert_fail@plt+0x12bcc>
   2458c:	ldr	r3, [r2, ip, lsl #2]
   24590:	cmp	r1, r3
   24594:	beq	248fc <__assert_fail@plt+0x12f5c>
   24598:	ldr	r3, [sp]
   2459c:	ldr	fp, [r3, #4]
   245a0:	cmp	fp, #0
   245a4:	ble	24600 <__assert_fail@plt+0x12c60>
   245a8:	ldr	sl, [r3, #8]
   245ac:	sub	r9, fp, #1
   245b0:	mov	ip, #0
   245b4:	cmp	ip, r9
   245b8:	bcs	245f4 <__assert_fail@plt+0x12c54>
   245bc:	add	r0, ip, r9
   245c0:	lsr	r0, r0, #1
   245c4:	ldr	r3, [sl, r0, lsl #2]
   245c8:	cmp	r1, r3
   245cc:	ble	245e4 <__assert_fail@plt+0x12c44>
   245d0:	b	248e8 <__assert_fail@plt+0x12f48>
   245d4:	ldr	r9, [sl, r3, lsl #2]
   245d8:	cmp	r1, r9
   245dc:	bgt	248f0 <__assert_fail@plt+0x12f50>
   245e0:	mov	r0, r3
   245e4:	add	r3, ip, r0
   245e8:	cmp	ip, r0
   245ec:	lsr	r3, r3, #1
   245f0:	bcc	245d4 <__assert_fail@plt+0x12c34>
   245f4:	ldr	r3, [sl, ip, lsl #2]
   245f8:	cmp	r1, r3
   245fc:	beq	2488c <__assert_fail@plt+0x12eec>
   24600:	cmp	r7, #0
   24604:	ble	246d0 <__assert_fail@plt+0x12d30>
   24608:	cmp	lr, #0
   2460c:	ble	2466c <__assert_fail@plt+0x12ccc>
   24610:	sub	sl, lr, #1
   24614:	mov	r0, #0
   24618:	cmp	r0, sl
   2461c:	bcs	24658 <__assert_fail@plt+0x12cb8>
   24620:	add	r1, r0, sl
   24624:	lsr	r1, r1, #1
   24628:	ldr	r3, [r2, r1, lsl #2]
   2462c:	cmp	r3, r7
   24630:	bge	24648 <__assert_fail@plt+0x12ca8>
   24634:	b	24878 <__assert_fail@plt+0x12ed8>
   24638:	ldr	ip, [r2, r3, lsl #2]
   2463c:	cmp	ip, r7
   24640:	blt	24880 <__assert_fail@plt+0x12ee0>
   24644:	mov	r1, r3
   24648:	add	r3, r0, r1
   2464c:	cmp	r0, r1
   24650:	lsr	r3, r3, #1
   24654:	bcc	24638 <__assert_fail@plt+0x12c98>
   24658:	ldr	r3, [r2, r0, lsl #2]
   2465c:	cmp	r3, r7
   24660:	beq	246d0 <__assert_fail@plt+0x12d30>
   24664:	ldr	r3, [sp]
   24668:	ldr	fp, [r3, #4]
   2466c:	cmp	fp, #0
   24670:	ble	246d0 <__assert_fail@plt+0x12d30>
   24674:	ldr	r3, [sp]
   24678:	sub	fp, fp, #1
   2467c:	mov	r1, #0
   24680:	ldr	r0, [r3, #8]
   24684:	cmp	r1, fp
   24688:	bcs	246c4 <__assert_fail@plt+0x12d24>
   2468c:	add	r2, r1, fp
   24690:	lsr	r2, r2, #1
   24694:	ldr	r3, [r0, r2, lsl #2]
   24698:	cmp	r7, r3
   2469c:	ble	246b4 <__assert_fail@plt+0x12d14>
   246a0:	b	2492c <__assert_fail@plt+0x12f8c>
   246a4:	ldr	ip, [r0, r3, lsl #2]
   246a8:	cmp	ip, r7
   246ac:	blt	24934 <__assert_fail@plt+0x12f94>
   246b0:	mov	r2, r3
   246b4:	add	r3, r1, r2
   246b8:	cmp	r1, r2
   246bc:	lsr	r3, r3, #1
   246c0:	bcc	246a4 <__assert_fail@plt+0x12d04>
   246c4:	ldr	r3, [r0, r1, lsl #2]
   246c8:	cmp	r3, r7
   246cc:	beq	2488c <__assert_fail@plt+0x12eec>
   246d0:	add	r4, r4, #1
   246d4:	cmp	r4, lr
   246d8:	blt	244e8 <__assert_fail@plt+0x12b48>
   246dc:	cmp	lr, #0
   246e0:	ldr	r5, [sp]
   246e4:	ldrle	r0, [sp, #28]
   246e8:	ble	247e0 <__assert_fail@plt+0x12e40>
   246ec:	ldr	r3, [sp, #12]
   246f0:	mov	r7, #0
   246f4:	ldr	r0, [sp, #28]
   246f8:	ldr	r9, [r3, #8]
   246fc:	mov	sl, r7
   24700:	sub	r9, r9, #4
   24704:	ldr	r4, [sp, #24]
   24708:	ldr	r2, [r9, #4]!
   2470c:	cmp	r4, #0
   24710:	ble	24768 <__assert_fail@plt+0x12dc8>
   24714:	sub	r4, r4, #1
   24718:	mov	ip, sl
   2471c:	cmp	ip, r4
   24720:	bcs	2475c <__assert_fail@plt+0x12dbc>
   24724:	add	r1, ip, r4
   24728:	lsr	r1, r1, #1
   2472c:	ldr	r3, [r0, r1, lsl #2]
   24730:	cmp	r2, r3
   24734:	ble	2474c <__assert_fail@plt+0x12dac>
   24738:	b	247f4 <__assert_fail@plt+0x12e54>
   2473c:	ldr	r4, [r0, r3, lsl #2]
   24740:	cmp	r2, r4
   24744:	bgt	247fc <__assert_fail@plt+0x12e5c>
   24748:	mov	r1, r3
   2474c:	add	r3, r1, ip
   24750:	cmp	r1, ip
   24754:	lsr	r3, r3, #1
   24758:	bhi	2473c <__assert_fail@plt+0x12d9c>
   2475c:	ldr	r3, [r0, ip, lsl #2]
   24760:	cmp	r2, r3
   24764:	beq	247d4 <__assert_fail@plt+0x12e34>
   24768:	ldr	r8, [r5, #4]
   2476c:	cmp	r8, #0
   24770:	ble	247d4 <__assert_fail@plt+0x12e34>
   24774:	sub	fp, r8, #1
   24778:	ldr	r6, [r5, #8]
   2477c:	mov	r4, fp
   24780:	mov	ip, sl
   24784:	cmp	ip, r4
   24788:	bcs	247c4 <__assert_fail@plt+0x12e24>
   2478c:	add	r1, ip, r4
   24790:	lsr	r1, r1, #1
   24794:	ldr	r3, [r6, r1, lsl #2]
   24798:	cmp	r3, r2
   2479c:	bge	247b4 <__assert_fail@plt+0x12e14>
   247a0:	b	2481c <__assert_fail@plt+0x12e7c>
   247a4:	ldr	r4, [r6, r3, lsl #2]
   247a8:	cmp	r2, r4
   247ac:	bgt	24824 <__assert_fail@plt+0x12e84>
   247b0:	mov	r1, r3
   247b4:	add	r3, ip, r1
   247b8:	cmp	ip, r1
   247bc:	lsr	r3, r3, #1
   247c0:	bcc	247a4 <__assert_fail@plt+0x12e04>
   247c4:	ldr	r3, [r6, ip, lsl #2]
   247c8:	add	r6, r6, ip, lsl #2
   247cc:	cmp	r2, r3
   247d0:	beq	24830 <__assert_fail@plt+0x12e90>
   247d4:	add	r7, r7, #1
   247d8:	cmp	r7, lr
   247dc:	blt	24704 <__assert_fail@plt+0x12d64>
   247e0:	bl	1f018 <__assert_fail@plt+0xd678>
   247e4:	mov	r7, #0
   247e8:	mov	r0, r7
   247ec:	add	sp, sp, #36	; 0x24
   247f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   247f4:	mov	r3, r1
   247f8:	mov	r1, r4
   247fc:	add	ip, r3, #1
   24800:	mov	r4, r1
   24804:	b	2471c <__assert_fail@plt+0x12d7c>
   24808:	mov	r3, r0
   2480c:	mov	r0, r9
   24810:	add	ip, r3, #1
   24814:	mov	r9, r0
   24818:	b	2454c <__assert_fail@plt+0x12bac>
   2481c:	mov	r3, r1
   24820:	mov	r1, r4
   24824:	add	ip, r3, #1
   24828:	mov	r4, r1
   2482c:	b	24784 <__assert_fail@plt+0x12de4>
   24830:	cmp	ip, r8
   24834:	movlt	r8, #0
   24838:	movge	r8, #1
   2483c:	orrs	r3, r8, ip, lsr #31
   24840:	mov	r3, ip
   24844:	bne	247d4 <__assert_fail@plt+0x12e34>
   24848:	cmp	ip, fp
   2484c:	str	fp, [r5, #4]
   24850:	bge	2486c <__assert_fail@plt+0x12ecc>
   24854:	ldr	r2, [r6, #4]
   24858:	add	r3, r3, #1
   2485c:	str	r2, [r6], #4
   24860:	ldr	r2, [r5, #4]
   24864:	cmp	r3, r2
   24868:	blt	24854 <__assert_fail@plt+0x12eb4>
   2486c:	ldr	r3, [sp, #12]
   24870:	ldr	lr, [r3, #4]
   24874:	b	247d4 <__assert_fail@plt+0x12e34>
   24878:	mov	r3, r1
   2487c:	mov	r1, sl
   24880:	add	r0, r3, #1
   24884:	mov	sl, r1
   24888:	b	24618 <__assert_fail@plt+0x12c78>
   2488c:	ldr	r3, [sp, #8]
   24890:	ldr	r3, [r3, #4]
   24894:	cmp	r3, #0
   24898:	beq	246d0 <__assert_fail@plt+0x12d30>
   2489c:	ldr	r2, [r6, #28]
   248a0:	ldr	r1, [sp, #4]
   248a4:	add	r2, r2, r1
   248a8:	ldr	r0, [r2, #4]
   248ac:	cmp	r0, #0
   248b0:	beq	246d0 <__assert_fail@plt+0x12d30>
   248b4:	ldr	r1, [sp, #24]
   248b8:	add	r3, r3, r0
   248bc:	ldr	r7, [sp, #20]
   248c0:	add	r1, r3, r1
   248c4:	cmp	r1, r7
   248c8:	bgt	24940 <__assert_fail@plt+0x12fa0>
   248cc:	ldr	r1, [sp, #8]
   248d0:	add	r0, sp, #20
   248d4:	bl	200ac <__assert_fail@plt+0xe70c>
   248d8:	cmp	r0, #0
   248dc:	bne	2496c <__assert_fail@plt+0x12fcc>
   248e0:	ldr	lr, [r5, #4]
   248e4:	b	246d0 <__assert_fail@plt+0x12d30>
   248e8:	mov	r3, r0
   248ec:	mov	r0, r9
   248f0:	add	ip, r3, #1
   248f4:	mov	r9, r0
   248f8:	b	245b4 <__assert_fail@plt+0x12c14>
   248fc:	cmp	r7, #0
   24900:	bgt	24614 <__assert_fail@plt+0x12c74>
   24904:	b	246d0 <__assert_fail@plt+0x12d30>
   24908:	cmp	lr, #0
   2490c:	mvngt	r7, #0
   24910:	bgt	24540 <__assert_fail@plt+0x12ba0>
   24914:	ldr	r3, [sp]
   24918:	ldr	fp, [r3, #4]
   2491c:	cmp	fp, #0
   24920:	ble	246dc <__assert_fail@plt+0x12d3c>
   24924:	mvn	r7, #0
   24928:	b	245a8 <__assert_fail@plt+0x12c08>
   2492c:	mov	r3, r2
   24930:	mov	r2, fp
   24934:	add	r1, r3, #1
   24938:	mov	fp, r2
   2493c:	b	24684 <__assert_fail@plt+0x12ce4>
   24940:	add	r7, r3, r7
   24944:	ldr	r0, [sp, #28]
   24948:	lsl	r1, r7, #2
   2494c:	str	r2, [sp, #4]
   24950:	bl	1f190 <__assert_fail@plt+0xd7f0>
   24954:	cmp	r0, #0
   24958:	beq	2498c <__assert_fail@plt+0x12fec>
   2495c:	str	r0, [sp, #28]
   24960:	str	r7, [sp, #20]
   24964:	ldr	r2, [sp, #4]
   24968:	b	248cc <__assert_fail@plt+0x12f2c>
   2496c:	mov	r7, r0
   24970:	ldr	r0, [sp, #28]
   24974:	bl	1f018 <__assert_fail@plt+0xd678>
   24978:	mov	r0, r7
   2497c:	add	sp, sp, #36	; 0x24
   24980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24984:	mov	r0, r4
   24988:	b	247e0 <__assert_fail@plt+0x12e40>
   2498c:	mov	r7, #12
   24990:	b	24970 <__assert_fail@plt+0x12fd0>
   24994:	ldr	r3, [r0, #36]	; 0x24
   24998:	cmn	r3, #-536870910	; 0xe0000002
   2499c:	bhi	24b98 <__assert_fail@plt+0x131f8>
   249a0:	ldr	r2, [r0, #48]	; 0x30
   249a4:	push	{r4, r5, r6, lr}
   249a8:	lsl	r5, r3, #1
   249ac:	cmp	r5, r2
   249b0:	movge	r5, r2
   249b4:	ldr	r3, [r0, #80]	; 0x50
   249b8:	cmp	r5, r1
   249bc:	movlt	r5, r1
   249c0:	cmp	r3, #1
   249c4:	mov	r4, r0
   249c8:	ble	24a10 <__assert_fail@plt+0x13070>
   249cc:	cmn	r5, #-1073741823	; 0xc0000001
   249d0:	bhi	24aec <__assert_fail@plt+0x1314c>
   249d4:	lsl	r6, r5, #2
   249d8:	mov	r1, r6
   249dc:	ldr	r0, [r0, #8]
   249e0:	bl	1f190 <__assert_fail@plt+0xd7f0>
   249e4:	subs	r3, r0, #0
   249e8:	beq	24aec <__assert_fail@plt+0x1314c>
   249ec:	ldr	r0, [r4, #12]
   249f0:	str	r3, [r4, #8]
   249f4:	cmp	r0, #0
   249f8:	beq	24a10 <__assert_fail@plt+0x13070>
   249fc:	mov	r1, r6
   24a00:	bl	1f190 <__assert_fail@plt+0xd7f0>
   24a04:	cmp	r0, #0
   24a08:	beq	24aec <__assert_fail@plt+0x1314c>
   24a0c:	str	r0, [r4, #12]
   24a10:	ldrb	r3, [r4, #75]	; 0x4b
   24a14:	cmp	r3, #0
   24a18:	bne	24ad8 <__assert_fail@plt+0x13138>
   24a1c:	ldr	r0, [r4, #100]	; 0x64
   24a20:	str	r5, [r4, #36]	; 0x24
   24a24:	cmp	r0, #0
   24a28:	beq	24a44 <__assert_fail@plt+0x130a4>
   24a2c:	add	r1, r5, #1
   24a30:	lsl	r1, r1, #2
   24a34:	bl	1f190 <__assert_fail@plt+0xd7f0>
   24a38:	cmp	r0, #0
   24a3c:	beq	24aec <__assert_fail@plt+0x1314c>
   24a40:	str	r0, [r4, #100]	; 0x64
   24a44:	ldrb	r5, [r4, #72]	; 0x48
   24a48:	ldr	r3, [r4, #80]	; 0x50
   24a4c:	cmp	r5, #0
   24a50:	beq	24a68 <__assert_fail@plt+0x130c8>
   24a54:	cmp	r3, #1
   24a58:	ble	24b0c <__assert_fail@plt+0x1316c>
   24a5c:	mov	r0, r4
   24a60:	pop	{r4, r5, r6, lr}
   24a64:	b	1f694 <__assert_fail@plt+0xdcf4>
   24a68:	cmp	r3, #1
   24a6c:	bgt	24afc <__assert_fail@plt+0x1315c>
   24a70:	ldr	r0, [r4, #64]	; 0x40
   24a74:	cmp	r0, #0
   24a78:	popeq	{r4, r5, r6, pc}
   24a7c:	ldr	lr, [r4, #36]	; 0x24
   24a80:	ldr	r2, [r4, #48]	; 0x30
   24a84:	ldr	r3, [r4, #28]
   24a88:	cmp	lr, r2
   24a8c:	movge	lr, r2
   24a90:	cmp	lr, r3
   24a94:	bgt	24aa0 <__assert_fail@plt+0x13100>
   24a98:	b	24ac8 <__assert_fail@plt+0x13128>
   24a9c:	ldr	r0, [r4, #64]	; 0x40
   24aa0:	ldr	r2, [r4]
   24aa4:	ldr	ip, [r4, #24]
   24aa8:	add	r2, r2, r3
   24aac:	ldr	r1, [r4, #4]
   24ab0:	ldrb	r2, [r2, ip]
   24ab4:	ldrb	r2, [r0, r2]
   24ab8:	strb	r2, [r1, r3]
   24abc:	add	r3, r3, #1
   24ac0:	cmp	lr, r3
   24ac4:	bne	24a9c <__assert_fail@plt+0x130fc>
   24ac8:	str	r3, [r4, #28]
   24acc:	str	r3, [r4, #32]
   24ad0:	mov	r0, #0
   24ad4:	pop	{r4, r5, r6, pc}
   24ad8:	mov	r1, r5
   24adc:	ldr	r0, [r4, #4]
   24ae0:	bl	1f190 <__assert_fail@plt+0xd7f0>
   24ae4:	cmp	r0, #0
   24ae8:	bne	24af4 <__assert_fail@plt+0x13154>
   24aec:	mov	r0, #12
   24af0:	pop	{r4, r5, r6, pc}
   24af4:	str	r0, [r4, #4]
   24af8:	b	24a1c <__assert_fail@plt+0x1307c>
   24afc:	mov	r0, r4
   24b00:	bl	1f4f4 <__assert_fail@plt+0xdb54>
   24b04:	mov	r0, r5
   24b08:	pop	{r4, r5, r6, pc}
   24b0c:	ldr	r6, [r4, #36]	; 0x24
   24b10:	ldr	r3, [r4, #48]	; 0x30
   24b14:	ldr	r5, [r4, #28]
   24b18:	cmp	r6, r3
   24b1c:	movge	r6, r3
   24b20:	cmp	r6, r5
   24b24:	ble	24ba0 <__assert_fail@plt+0x13200>
   24b28:	bl	11754 <__ctype_toupper_loc@plt>
   24b2c:	b	24b4c <__assert_fail@plt+0x131ac>
   24b30:	ldr	r1, [r0]
   24b34:	ldr	r2, [r4, #4]
   24b38:	ldr	r3, [r1, r3, lsl #2]
   24b3c:	strb	r3, [r2, r5]
   24b40:	add	r5, r5, #1
   24b44:	cmp	r6, r5
   24b48:	beq	24b88 <__assert_fail@plt+0x131e8>
   24b4c:	ldr	r3, [r4]
   24b50:	ldr	r1, [r4, #24]
   24b54:	ldr	r2, [r4, #64]	; 0x40
   24b58:	add	r3, r3, r5
   24b5c:	cmp	r2, #0
   24b60:	ldrb	r3, [r3, r1]
   24b64:	beq	24b30 <__assert_fail@plt+0x13190>
   24b68:	ldrb	r3, [r2, r3]
   24b6c:	ldr	ip, [r0]
   24b70:	ldr	r1, [r4, #4]
   24b74:	ldr	r3, [ip, r3, lsl #2]
   24b78:	strb	r3, [r1, r5]
   24b7c:	add	r5, r5, #1
   24b80:	cmp	r6, r5
   24b84:	bne	24b4c <__assert_fail@plt+0x131ac>
   24b88:	str	r6, [r4, #28]
   24b8c:	str	r6, [r4, #32]
   24b90:	mov	r0, #0
   24b94:	pop	{r4, r5, r6, pc}
   24b98:	mov	r0, #12
   24b9c:	bx	lr
   24ba0:	mov	r6, r5
   24ba4:	b	24b88 <__assert_fail@plt+0x131e8>
   24ba8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24bac:	ldr	r7, [r2, #4]
   24bb0:	cmp	r7, #0
   24bb4:	streq	r7, [r0]
   24bb8:	moveq	r4, r7
   24bbc:	beq	24d9c <__assert_fail@plt+0x133fc>
   24bc0:	ble	24e58 <__assert_fail@plt+0x134b8>
   24bc4:	ldr	r3, [r2, #8]
   24bc8:	mov	r5, r7
   24bcc:	add	lr, r3, r7, lsl #2
   24bd0:	ldr	ip, [r3], #4
   24bd4:	cmp	lr, r3
   24bd8:	add	r5, r5, ip
   24bdc:	bne	24bd0 <__assert_fail@plt+0x13230>
   24be0:	ldr	r3, [r1, #68]	; 0x44
   24be4:	ldr	ip, [r1, #32]
   24be8:	and	r3, r3, r5
   24bec:	add	r3, r3, r3, lsl #1
   24bf0:	lsl	r3, r3, #2
   24bf4:	add	lr, ip, r3
   24bf8:	ldr	r6, [ip, r3]
   24bfc:	cmp	r6, #0
   24c00:	ble	24c58 <__assert_fail@plt+0x132b8>
   24c04:	ldr	lr, [lr, #8]
   24c08:	sub	sl, r7, #1
   24c0c:	sub	lr, lr, #4
   24c10:	lsl	sl, sl, #2
   24c14:	mov	r3, #0
   24c18:	b	24c28 <__assert_fail@plt+0x13288>
   24c1c:	add	r3, r3, #1
   24c20:	cmp	r3, r6
   24c24:	beq	24c58 <__assert_fail@plt+0x132b8>
   24c28:	ldr	r4, [lr, #4]!
   24c2c:	ldr	ip, [r4]
   24c30:	cmp	r5, ip
   24c34:	bne	24c1c <__assert_fail@plt+0x1327c>
   24c38:	ldr	ip, [r4, #8]
   24c3c:	cmp	r7, ip
   24c40:	moveq	ip, sl
   24c44:	moveq	r8, r7
   24c48:	beq	24dc0 <__assert_fail@plt+0x13420>
   24c4c:	add	r3, r3, #1
   24c50:	cmp	r3, r6
   24c54:	bne	24c28 <__assert_fail@plt+0x13288>
   24c58:	mov	r6, r1
   24c5c:	mov	r7, r0
   24c60:	mov	r1, #1
   24c64:	mov	r0, #56	; 0x38
   24c68:	mov	r9, r2
   24c6c:	bl	1ed9c <__assert_fail@plt+0xd3fc>
   24c70:	subs	r4, r0, #0
   24c74:	beq	24e44 <__assert_fail@plt+0x134a4>
   24c78:	ldr	r0, [r9, #4]
   24c7c:	add	r8, r4, #4
   24c80:	cmp	r0, #0
   24c84:	str	r0, [r4, #8]
   24c88:	ble	24de0 <__assert_fail@plt+0x13440>
   24c8c:	str	r0, [r4, #4]
   24c90:	lsl	r0, r0, #2
   24c94:	bl	1f110 <__assert_fail@plt+0xd770>
   24c98:	cmp	r0, #0
   24c9c:	str	r0, [r4, #12]
   24ca0:	beq	24e60 <__assert_fail@plt+0x134c0>
   24ca4:	ldr	fp, [r9, #4]
   24ca8:	ldr	r1, [r9, #8]
   24cac:	lsl	sl, fp, #2
   24cb0:	mov	r2, sl
   24cb4:	bl	115d4 <memcpy@plt>
   24cb8:	cmp	fp, #0
   24cbc:	str	r8, [r4, #40]	; 0x28
   24cc0:	ble	24d84 <__assert_fail@plt+0x133e4>
   24cc4:	ldr	ip, [r9, #8]
   24cc8:	ldr	r9, [r6]
   24ccc:	add	lr, ip, sl
   24cd0:	ldr	sl, [pc, #412]	; 24e74 <__assert_fail@plt+0x134d4>
   24cd4:	b	24d30 <__assert_fail@plt+0x13390>
   24cd8:	ldrb	r3, [r2, #6]
   24cdc:	ldrb	r1, [r4, #52]	; 0x34
   24ce0:	cmp	r0, #2
   24ce4:	lsr	r3, r3, #4
   24ce8:	orr	r3, r3, r1, lsr #5
   24cec:	and	r3, r3, #1
   24cf0:	bic	r1, r1, #32
   24cf4:	orr	r3, r1, r3, lsl #5
   24cf8:	strb	r3, [r4, #52]	; 0x34
   24cfc:	uxtbeq	r3, r3
   24d00:	orreq	r3, r3, #16
   24d04:	strbeq	r3, [r4, #52]	; 0x34
   24d08:	beq	24d28 <__assert_fail@plt+0x13388>
   24d0c:	cmp	r0, #4
   24d10:	beq	24dd0 <__assert_fail@plt+0x13430>
   24d14:	cmp	r0, #12
   24d18:	beq	24d70 <__assert_fail@plt+0x133d0>
   24d1c:	ldr	r3, [r2, #4]
   24d20:	tst	r3, sl
   24d24:	bne	24d70 <__assert_fail@plt+0x133d0>
   24d28:	cmp	lr, ip
   24d2c:	beq	24d84 <__assert_fail@plt+0x133e4>
   24d30:	ldr	r2, [ip], #4
   24d34:	add	r2, r9, r2, lsl #3
   24d38:	ldrb	r0, [r2, #4]
   24d3c:	cmp	r0, #1
   24d40:	bne	24cd8 <__assert_fail@plt+0x13338>
   24d44:	ldr	r3, [r2, #4]
   24d48:	tst	r3, sl
   24d4c:	beq	24d28 <__assert_fail@plt+0x13388>
   24d50:	ldrb	r3, [r2, #6]
   24d54:	ldrb	r2, [r4, #52]	; 0x34
   24d58:	lsr	r3, r3, #4
   24d5c:	orr	r3, r3, r2, lsr #5
   24d60:	and	r3, r3, #1
   24d64:	bic	r2, r2, #32
   24d68:	orr	r3, r2, r3, lsl #5
   24d6c:	strb	r3, [r4, #52]	; 0x34
   24d70:	ldrb	r3, [r4, #52]	; 0x34
   24d74:	cmp	lr, ip
   24d78:	orr	r3, r3, #128	; 0x80
   24d7c:	strb	r3, [r4, #52]	; 0x34
   24d80:	bne	24d30 <__assert_fail@plt+0x13390>
   24d84:	mov	r2, r5
   24d88:	mov	r0, r6
   24d8c:	mov	r1, r4
   24d90:	bl	1f3b8 <__assert_fail@plt+0xda18>
   24d94:	cmp	r0, #0
   24d98:	bne	24df8 <__assert_fail@plt+0x13458>
   24d9c:	mov	r0, r4
   24da0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24da4:	ldr	fp, [r4, #12]
   24da8:	ldr	r9, [r2, #8]
   24dac:	ldr	fp, [fp, ip]
   24db0:	ldr	r9, [r9, ip]
   24db4:	sub	ip, ip, #4
   24db8:	cmp	fp, r9
   24dbc:	bne	24c1c <__assert_fail@plt+0x1327c>
   24dc0:	subs	r8, r8, #1
   24dc4:	bpl	24da4 <__assert_fail@plt+0x13404>
   24dc8:	mov	r0, r4
   24dcc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24dd0:	ldrb	r3, [r4, #52]	; 0x34
   24dd4:	orr	r3, r3, #64	; 0x40
   24dd8:	strb	r3, [r4, #52]	; 0x34
   24ddc:	b	24d28 <__assert_fail@plt+0x13388>
   24de0:	mov	r3, #0
   24de4:	str	r3, [r4, #4]
   24de8:	str	r3, [r8, #4]
   24dec:	str	r3, [r8, #8]
   24df0:	str	r8, [r4, #40]	; 0x28
   24df4:	b	24d84 <__assert_fail@plt+0x133e4>
   24df8:	ldr	r0, [r4, #24]
   24dfc:	bl	1f018 <__assert_fail@plt+0xd678>
   24e00:	ldr	r0, [r4, #36]	; 0x24
   24e04:	bl	1f018 <__assert_fail@plt+0xd678>
   24e08:	ldr	r3, [r4, #40]	; 0x28
   24e0c:	cmp	r8, r3
   24e10:	beq	24e24 <__assert_fail@plt+0x13484>
   24e14:	ldr	r0, [r3, #8]
   24e18:	bl	1f018 <__assert_fail@plt+0xd678>
   24e1c:	ldr	r0, [r4, #40]	; 0x28
   24e20:	bl	1f018 <__assert_fail@plt+0xd678>
   24e24:	ldr	r0, [r4, #12]
   24e28:	bl	1f018 <__assert_fail@plt+0xd678>
   24e2c:	ldr	r0, [r4, #48]	; 0x30
   24e30:	bl	1f018 <__assert_fail@plt+0xd678>
   24e34:	ldr	r0, [r4, #44]	; 0x2c
   24e38:	bl	1f018 <__assert_fail@plt+0xd678>
   24e3c:	mov	r0, r4
   24e40:	bl	1f018 <__assert_fail@plt+0xd678>
   24e44:	mov	r4, #0
   24e48:	mov	r3, #12
   24e4c:	str	r3, [r7]
   24e50:	mov	r0, r4
   24e54:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24e58:	mov	r5, r7
   24e5c:	b	24be0 <__assert_fail@plt+0x13240>
   24e60:	str	r0, [r4, #8]
   24e64:	str	r0, [r4, #4]
   24e68:	mov	r0, r4
   24e6c:	bl	1f018 <__assert_fail@plt+0xd678>
   24e70:	b	24e44 <__assert_fail@plt+0x134a4>
   24e74:	andeq	pc, r3, r0, lsl #30
   24e78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e7c:	mov	r6, #0
   24e80:	ldr	r5, [r0, #108]	; 0x6c
   24e84:	sub	sp, sp, #36	; 0x24
   24e88:	mov	r4, r5
   24e8c:	cmp	r6, r4
   24e90:	bge	24eec <__assert_fail@plt+0x1354c>
   24e94:	add	lr, r6, r4
   24e98:	ldr	r7, [r0, #116]	; 0x74
   24e9c:	add	lr, lr, lr, lsr #31
   24ea0:	asr	lr, lr, #1
   24ea4:	add	ip, lr, lr, lsl #1
   24ea8:	add	ip, r7, ip, lsl #3
   24eac:	ldr	ip, [ip, #4]
   24eb0:	cmp	r2, ip
   24eb4:	ble	24edc <__assert_fail@plt+0x1353c>
   24eb8:	b	2524c <__assert_fail@plt+0x138ac>
   24ebc:	asr	ip, ip, #1
   24ec0:	mov	r8, ip
   24ec4:	add	r4, ip, ip, lsl #1
   24ec8:	add	r4, r7, r4, lsl #3
   24ecc:	ldr	r4, [r4, #4]
   24ed0:	cmp	r2, r4
   24ed4:	bgt	25254 <__assert_fail@plt+0x138b4>
   24ed8:	mov	lr, ip
   24edc:	add	ip, lr, r6
   24ee0:	cmp	lr, r6
   24ee4:	add	ip, ip, ip, lsr #31
   24ee8:	bgt	24ebc <__assert_fail@plt+0x1351c>
   24eec:	cmp	r5, r6
   24ef0:	ble	24fc0 <__assert_fail@plt+0x13620>
   24ef4:	add	ip, r6, r6, lsl #1
   24ef8:	ldr	r5, [r0, #116]	; 0x74
   24efc:	lsl	ip, ip, #3
   24f00:	add	lr, r5, ip
   24f04:	cmn	r6, #1
   24f08:	ldr	lr, [lr, #4]
   24f0c:	movne	r6, #0
   24f10:	moveq	r6, #1
   24f14:	cmp	lr, r2
   24f18:	orrne	r6, r6, #1
   24f1c:	cmp	r6, #0
   24f20:	bne	24fc0 <__assert_fail@plt+0x13620>
   24f24:	ldr	r9, [r0, #84]	; 0x54
   24f28:	mov	r7, r1
   24f2c:	mov	r8, r0
   24f30:	str	r3, [sp, #12]
   24f34:	add	r3, ip, #24
   24f38:	str	r2, [sp, #4]
   24f3c:	str	r3, [sp, #8]
   24f40:	add	r5, r5, r3
   24f44:	ldr	ip, [r7, #4]
   24f48:	cmp	ip, #0
   24f4c:	ble	24fb0 <__assert_fail@plt+0x13610>
   24f50:	sub	ip, ip, #1
   24f54:	ldr	r0, [r5, #-24]	; 0xffffffe8
   24f58:	ldr	r1, [r7, #8]
   24f5c:	mov	r4, ip
   24f60:	mov	lr, r6
   24f64:	cmp	lr, r4
   24f68:	bcs	24fa4 <__assert_fail@plt+0x13604>
   24f6c:	add	r2, lr, r4
   24f70:	lsr	r2, r2, #1
   24f74:	ldr	r3, [r1, r2, lsl #2]
   24f78:	cmp	r0, r3
   24f7c:	ble	24f94 <__assert_fail@plt+0x135f4>
   24f80:	b	24fd0 <__assert_fail@plt+0x13630>
   24f84:	ldr	r4, [r1, r3, lsl #2]
   24f88:	cmp	r0, r4
   24f8c:	bgt	24fd8 <__assert_fail@plt+0x13638>
   24f90:	mov	r2, r3
   24f94:	add	r3, lr, r2
   24f98:	cmp	lr, r2
   24f9c:	lsr	r3, r3, #1
   24fa0:	bcc	24f84 <__assert_fail@plt+0x135e4>
   24fa4:	ldr	r3, [r1, lr, lsl #2]
   24fa8:	cmp	r0, r3
   24fac:	beq	24fe4 <__assert_fail@plt+0x13644>
   24fb0:	add	r5, r5, #24
   24fb4:	ldrb	r3, [r5, #-28]	; 0xffffffe4
   24fb8:	cmp	r3, #0
   24fbc:	bne	24f44 <__assert_fail@plt+0x135a4>
   24fc0:	mov	sl, #0
   24fc4:	mov	r0, sl
   24fc8:	add	sp, sp, #36	; 0x24
   24fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24fd0:	mov	r3, r2
   24fd4:	mov	r2, r4
   24fd8:	add	lr, r3, #1
   24fdc:	mov	r4, r2
   24fe0:	b	24f64 <__assert_fail@plt+0x135c4>
   24fe4:	ldr	r2, [sp, #4]
   24fe8:	ldr	sl, [r5, #-12]
   24fec:	ldr	r3, [r5, #-16]
   24ff0:	add	sl, r2, sl
   24ff4:	sub	sl, sl, r3
   24ff8:	cmp	r2, sl
   24ffc:	beq	2512c <__assert_fail@plt+0x1378c>
   25000:	ldr	r2, [r8, #100]	; 0x64
   25004:	ldr	r3, [r9, #12]
   25008:	ldr	fp, [r2, sl, lsl #2]
   2500c:	ldr	r4, [r3, r0, lsl #2]
   25010:	cmp	fp, #0
   25014:	beq	25260 <__assert_fail@plt+0x138c0>
   25018:	ldr	ip, [fp, #8]
   2501c:	cmp	ip, #0
   25020:	ble	25238 <__assert_fail@plt+0x13898>
   25024:	ldr	lr, [fp, #12]
   25028:	sub	r0, ip, #1
   2502c:	mov	r1, r6
   25030:	cmp	r1, r0
   25034:	bcs	25070 <__assert_fail@plt+0x136d0>
   25038:	add	r2, r1, r0
   2503c:	lsr	r2, r2, #1
   25040:	ldr	r3, [lr, r2, lsl #2]
   25044:	cmp	r4, r3
   25048:	ble	25060 <__assert_fail@plt+0x136c0>
   2504c:	b	25118 <__assert_fail@plt+0x13778>
   25050:	ldr	r0, [lr, r3, lsl #2]
   25054:	cmp	r4, r0
   25058:	bgt	25120 <__assert_fail@plt+0x13780>
   2505c:	mov	r2, r3
   25060:	add	r3, r2, r1
   25064:	cmp	r2, r1
   25068:	lsr	r3, r3, #1
   2506c:	bhi	25050 <__assert_fail@plt+0x136b0>
   25070:	ldr	r3, [lr, r1, lsl #2]
   25074:	cmp	r4, r3
   25078:	beq	24fb0 <__assert_fail@plt+0x13610>
   2507c:	lsl	r0, ip, #2
   25080:	str	ip, [sp, #24]
   25084:	str	ip, [sp, #20]
   25088:	bl	1f110 <__assert_fail@plt+0xd770>
   2508c:	cmp	r0, #0
   25090:	mov	r3, r0
   25094:	str	r0, [sp, #28]
   25098:	beq	252d8 <__assert_fail@plt+0x13938>
   2509c:	ldr	r2, [fp, #8]
   250a0:	ldr	r1, [fp, #12]
   250a4:	lsl	r2, r2, #2
   250a8:	bl	115d4 <memcpy@plt>
   250ac:	mov	r3, r6
   250b0:	mov	r1, r4
   250b4:	add	r0, sp, #20
   250b8:	str	r3, [sp, #16]
   250bc:	bl	1fdc4 <__assert_fail@plt+0xe424>
   250c0:	ldr	r2, [sp, #16]
   250c4:	eor	r3, r0, #1
   250c8:	cmp	r2, #0
   250cc:	orrne	r3, r3, #1
   250d0:	tst	r3, #255	; 0xff
   250d4:	bne	2528c <__assert_fail@plt+0x138ec>
   250d8:	add	r2, sp, #20
   250dc:	mov	r1, r9
   250e0:	add	r0, sp, #16
   250e4:	ldr	r4, [r8, #100]	; 0x64
   250e8:	bl	24ba8 <__assert_fail@plt+0x13208>
   250ec:	str	r0, [r4, sl, lsl #2]
   250f0:	ldr	r0, [sp, #28]
   250f4:	bl	1f018 <__assert_fail@plt+0xd678>
   250f8:	ldr	r3, [r8, #100]	; 0x64
   250fc:	ldr	r3, [r3, sl, lsl #2]
   25100:	cmp	r3, #0
   25104:	bne	24fb0 <__assert_fail@plt+0x13610>
   25108:	ldr	sl, [sp, #16]
   2510c:	cmp	sl, #0
   25110:	beq	24fb0 <__assert_fail@plt+0x13610>
   25114:	b	24fc4 <__assert_fail@plt+0x13624>
   25118:	mov	r3, r2
   2511c:	mov	r2, r0
   25120:	add	r1, r3, #1
   25124:	mov	r0, r2
   25128:	b	25030 <__assert_fail@plt+0x13690>
   2512c:	add	r0, r0, r0, lsl #1
   25130:	ldr	r3, [r9, #20]
   25134:	mov	lr, r6
   25138:	add	r3, r3, r0, lsl #2
   2513c:	ldr	r3, [r3, #8]
   25140:	ldr	r4, [r3]
   25144:	cmp	lr, ip
   25148:	bcs	25184 <__assert_fail@plt+0x137e4>
   2514c:	add	r2, lr, ip
   25150:	lsr	r2, r2, #1
   25154:	ldr	r3, [r1, r2, lsl #2]
   25158:	cmp	r4, r3
   2515c:	ble	25174 <__assert_fail@plt+0x137d4>
   25160:	b	25224 <__assert_fail@plt+0x13884>
   25164:	ldr	r0, [r1, r3, lsl #2]
   25168:	cmp	r4, r0
   2516c:	bgt	2522c <__assert_fail@plt+0x1388c>
   25170:	mov	r2, r3
   25174:	add	r3, lr, r2
   25178:	cmp	lr, r2
   2517c:	lsr	r3, r3, #1
   25180:	bcc	25164 <__assert_fail@plt+0x137c4>
   25184:	ldr	r3, [r1, lr, lsl #2]
   25188:	cmp	r4, r3
   2518c:	beq	24fb0 <__assert_fail@plt+0x13610>
   25190:	mov	r3, #1
   25194:	mov	r0, #4
   25198:	str	r3, [sp, #20]
   2519c:	str	r3, [sp, #24]
   251a0:	bl	1f110 <__assert_fail@plt+0xd770>
   251a4:	cmp	r0, #0
   251a8:	str	r0, [sp, #28]
   251ac:	movne	ip, r6
   251b0:	strne	r4, [r0]
   251b4:	beq	252e8 <__assert_fail@plt+0x13948>
   251b8:	ldr	r3, [sp, #72]	; 0x48
   251bc:	ldr	r2, [sp, #12]
   251c0:	add	r1, sp, #20
   251c4:	mov	r0, r9
   251c8:	str	ip, [sp, #16]
   251cc:	bl	23638 <__assert_fail@plt+0x11c98>
   251d0:	ldr	sl, [sp, #24]
   251d4:	cmp	sl, #0
   251d8:	mov	r4, r0
   251dc:	beq	25200 <__assert_fail@plt+0x13860>
   251e0:	ldm	r7, {r2, r3}
   251e4:	add	r3, r3, sl, lsl #1
   251e8:	cmp	r2, r3
   251ec:	blt	252b0 <__assert_fail@plt+0x13910>
   251f0:	add	r1, sp, #20
   251f4:	mov	r0, r7
   251f8:	bl	201fc <__assert_fail@plt+0xe85c>
   251fc:	mov	sl, r0
   25200:	ldr	r0, [sp, #28]
   25204:	bl	1f018 <__assert_fail@plt+0xd678>
   25208:	ldr	r3, [sp, #16]
   2520c:	orr	r2, r4, r3
   25210:	orrs	r2, r2, sl
   25214:	bne	252f8 <__assert_fail@plt+0x13958>
   25218:	ldr	r5, [r8, #116]	; 0x74
   2521c:	ldr	r3, [sp, #8]
   25220:	b	24f40 <__assert_fail@plt+0x135a0>
   25224:	mov	r3, r2
   25228:	mov	r2, ip
   2522c:	add	lr, r3, #1
   25230:	mov	ip, r2
   25234:	b	25144 <__assert_fail@plt+0x137a4>
   25238:	str	r6, [sp, #20]
   2523c:	str	r6, [sp, #24]
   25240:	str	r6, [sp, #28]
   25244:	mov	r3, #0
   25248:	b	250b0 <__assert_fail@plt+0x13710>
   2524c:	mov	r8, lr
   25250:	mov	lr, r4
   25254:	add	r6, r8, #1
   25258:	mov	r4, lr
   2525c:	b	24e8c <__assert_fail@plt+0x134ec>
   25260:	mov	r3, #1
   25264:	mov	r0, #4
   25268:	str	r3, [sp, #20]
   2526c:	str	r3, [sp, #24]
   25270:	bl	1f110 <__assert_fail@plt+0xd770>
   25274:	cmp	r0, #0
   25278:	str	r0, [sp, #28]
   2527c:	beq	252a0 <__assert_fail@plt+0x13900>
   25280:	str	r4, [r0]
   25284:	str	fp, [sp, #16]
   25288:	b	250d8 <__assert_fail@plt+0x13738>
   2528c:	ldr	r0, [sp, #28]
   25290:	bl	1f018 <__assert_fail@plt+0xd678>
   25294:	ldr	sl, [sp, #16]
   25298:	cmp	sl, #0
   2529c:	bne	24fc4 <__assert_fail@plt+0x13624>
   252a0:	mov	sl, #12
   252a4:	mov	r0, sl
   252a8:	add	sp, sp, #36	; 0x24
   252ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   252b0:	add	sl, sl, r2
   252b4:	ldr	r0, [r7, #8]
   252b8:	lsl	r1, sl, #3
   252bc:	bl	1f190 <__assert_fail@plt+0xd7f0>
   252c0:	lsl	sl, sl, #1
   252c4:	cmp	r0, #0
   252c8:	beq	25310 <__assert_fail@plt+0x13970>
   252cc:	str	r0, [r7, #8]
   252d0:	str	sl, [r7]
   252d4:	b	251f0 <__assert_fail@plt+0x13850>
   252d8:	str	r3, [sp, #24]
   252dc:	str	r3, [sp, #20]
   252e0:	mov	r3, #12
   252e4:	b	250b0 <__assert_fail@plt+0x13710>
   252e8:	str	r0, [sp, #24]
   252ec:	str	r0, [sp, #20]
   252f0:	mov	ip, #12
   252f4:	b	251b8 <__assert_fail@plt+0x13818>
   252f8:	cmp	r3, #0
   252fc:	movne	sl, r3
   25300:	bne	24fc4 <__assert_fail@plt+0x13624>
   25304:	cmp	r4, #0
   25308:	movne	sl, r4
   2530c:	b	24fc4 <__assert_fail@plt+0x13624>
   25310:	mov	sl, #12
   25314:	b	25200 <__assert_fail@plt+0x13860>
   25318:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2531c:	sub	sp, sp, #20
   25320:	ldrb	ip, [r1, #28]
   25324:	ldr	sl, [r2, #4]
   25328:	ldr	r4, [r1]
   2532c:	adds	r3, sl, #0
   25330:	movne	r3, #1
   25334:	ands	r3, r3, ip, lsr #4
   25338:	beq	25358 <__assert_fail@plt+0x139b8>
   2533c:	ldr	r3, [r2, #20]
   25340:	cmp	r3, #31
   25344:	bgt	25558 <__assert_fail@plt+0x13bb8>
   25348:	ldr	r1, [r4, #80]	; 0x50
   2534c:	lsr	r3, r1, r3
   25350:	tst	r3, #1
   25354:	beq	25558 <__assert_fail@plt+0x13bb8>
   25358:	add	r5, sp, #8
   2535c:	mov	r9, #0
   25360:	mov	r7, r2
   25364:	str	r9, [r5, #4]
   25368:	str	r9, [sp, #8]
   2536c:	ldr	r2, [r4, #64]	; 0x40
   25370:	mov	r8, r0
   25374:	cmp	r2, #31
   25378:	beq	2557c <__assert_fail@plt+0x13bdc>
   2537c:	lsl	r3, r2, #5
   25380:	ldr	r6, [r4, #56]	; 0x38
   25384:	add	r1, r2, #1
   25388:	add	lr, r3, #4
   2538c:	add	r3, r6, r3
   25390:	mov	r2, #0
   25394:	mov	r0, #8
   25398:	str	r1, [r4, #64]	; 0x40
   2539c:	str	r2, [r3, #4]
   253a0:	str	r2, [r3, #8]
   253a4:	str	r2, [r3, #12]
   253a8:	strb	r0, [sp, #12]
   253ac:	ldm	r5, {r0, r1}
   253b0:	add	ip, r3, #24
   253b4:	add	r6, r6, lr
   253b8:	stm	ip, {r0, r1}
   253bc:	ldrb	r1, [r3, #30]
   253c0:	mvn	r0, #0
   253c4:	str	r2, [r3, #16]
   253c8:	and	r1, r1, #243	; 0xf3
   253cc:	str	r2, [r3, #20]
   253d0:	strb	r1, [r3, #30]
   253d4:	str	r0, [r3, #32]
   253d8:	mov	fp, #0
   253dc:	str	fp, [sp, #8]
   253e0:	str	fp, [r5, #4]
   253e4:	ldr	r3, [r4, #64]	; 0x40
   253e8:	cmp	r3, #31
   253ec:	beq	255a8 <__assert_fail@plt+0x13c08>
   253f0:	lsl	ip, r3, #5
   253f4:	ldr	r9, [r4, #56]	; 0x38
   253f8:	add	r2, r3, #1
   253fc:	add	lr, ip, #4
   25400:	add	ip, r9, ip
   25404:	mov	r3, #0
   25408:	mov	r1, #9
   2540c:	str	r2, [r4, #64]	; 0x40
   25410:	str	r3, [ip, #4]
   25414:	str	r3, [ip, #8]
   25418:	str	r3, [ip, #12]
   2541c:	strb	r1, [sp, #12]
   25420:	ldm	r5, {r0, r1}
   25424:	add	r2, ip, #24
   25428:	add	r9, r9, lr
   2542c:	stm	r2, {r0, r1}
   25430:	ldrb	r2, [ip, #30]
   25434:	mvn	r1, #0
   25438:	str	r3, [ip, #16]
   2543c:	and	r2, r2, #243	; 0xf3
   25440:	str	r3, [ip, #20]
   25444:	strb	r2, [ip, #30]
   25448:	str	r1, [ip, #32]
   2544c:	cmp	sl, #0
   25450:	moveq	fp, r9
   25454:	beq	25488 <__assert_fail@plt+0x13ae8>
   25458:	mov	r0, #0
   2545c:	str	r5, [sp]
   25460:	mov	ip, #16
   25464:	str	r0, [r5, #4]
   25468:	str	r0, [sp, #8]
   2546c:	mov	r2, sl
   25470:	mov	r3, r9
   25474:	add	r1, r4, #64	; 0x40
   25478:	add	r0, r4, #56	; 0x38
   2547c:	strb	ip, [sp, #12]
   25480:	bl	1ff70 <__assert_fail@plt+0xe5d0>
   25484:	mov	fp, r0
   25488:	mov	sl, #0
   2548c:	str	sl, [sp, #8]
   25490:	str	sl, [r5, #4]
   25494:	ldr	r2, [r4, #64]	; 0x40
   25498:	cmp	r2, #31
   2549c:	beq	255d4 <__assert_fail@plt+0x13c34>
   254a0:	lsl	r3, r2, #5
   254a4:	ldr	lr, [r4, #56]	; 0x38
   254a8:	add	r2, r2, #1
   254ac:	add	sl, r3, #4
   254b0:	add	r3, lr, r3
   254b4:	str	r2, [r4, #64]	; 0x40
   254b8:	mov	ip, #0
   254bc:	mov	r2, #16
   254c0:	str	r6, [r3, #8]
   254c4:	str	fp, [r3, #12]
   254c8:	str	ip, [r3, #4]
   254cc:	strb	r2, [sp, #12]
   254d0:	ldm	r5, {r0, r1}
   254d4:	add	r2, r3, #24
   254d8:	cmp	r6, ip
   254dc:	stm	r2, {r0, r1}
   254e0:	ldrb	r2, [r3, #30]
   254e4:	mvn	r1, #0
   254e8:	add	sl, lr, sl
   254ec:	and	r2, r2, #243	; 0xf3
   254f0:	str	ip, [r3, #16]
   254f4:	str	ip, [r3, #20]
   254f8:	strb	r2, [r3, #30]
   254fc:	str	r1, [r3, #32]
   25500:	strne	sl, [r6]
   25504:	cmp	fp, #0
   25508:	beq	25564 <__assert_fail@plt+0x13bc4>
   2550c:	cmp	sl, #0
   25510:	str	sl, [fp]
   25514:	beq	25564 <__assert_fail@plt+0x13bc4>
   25518:	cmp	r9, #0
   2551c:	cmpne	r6, #0
   25520:	beq	25564 <__assert_fail@plt+0x13bc4>
   25524:	ldr	r3, [r7, #20]
   25528:	str	r3, [r9, #20]
   2552c:	str	r3, [r6, #20]
   25530:	ldrb	r3, [r7, #26]
   25534:	ldrb	r2, [r9, #26]
   25538:	and	r3, r3, #8
   2553c:	bic	r2, r2, #8
   25540:	orr	r2, r3, r2
   25544:	strb	r2, [r9, #26]
   25548:	ldrb	r2, [r6, #26]
   2554c:	bic	r2, r2, #8
   25550:	orr	r3, r3, r2
   25554:	strb	r3, [r6, #26]
   25558:	mov	r0, sl
   2555c:	add	sp, sp, #20
   25560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25564:	mov	r3, #12
   25568:	mov	sl, #0
   2556c:	mov	r0, sl
   25570:	str	r3, [r8]
   25574:	add	sp, sp, #20
   25578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2557c:	mov	r0, #996	; 0x3e4
   25580:	bl	1f110 <__assert_fail@plt+0xd770>
   25584:	subs	r6, r0, #0
   25588:	beq	253d8 <__assert_fail@plt+0x13a38>
   2558c:	ldr	r2, [r4, #56]	; 0x38
   25590:	mov	r3, r9
   25594:	str	r2, [r6]
   25598:	mov	lr, #4
   2559c:	mov	r1, #1
   255a0:	str	r6, [r4, #56]	; 0x38
   255a4:	b	2538c <__assert_fail@plt+0x139ec>
   255a8:	mov	r0, #996	; 0x3e4
   255ac:	bl	1f110 <__assert_fail@plt+0xd770>
   255b0:	subs	r9, r0, #0
   255b4:	beq	2544c <__assert_fail@plt+0x13aac>
   255b8:	ldr	r3, [r4, #56]	; 0x38
   255bc:	mov	ip, fp
   255c0:	str	r3, [r9]
   255c4:	mov	lr, #4
   255c8:	mov	r2, #1
   255cc:	str	r9, [r4, #56]	; 0x38
   255d0:	b	25400 <__assert_fail@plt+0x13a60>
   255d4:	mov	r0, #996	; 0x3e4
   255d8:	bl	1f110 <__assert_fail@plt+0xd770>
   255dc:	subs	lr, r0, #0
   255e0:	beq	25564 <__assert_fail@plt+0x13bc4>
   255e4:	ldr	r1, [r4, #56]	; 0x38
   255e8:	mov	r3, sl
   255ec:	str	r1, [lr]
   255f0:	mov	sl, #4
   255f4:	mov	r2, #1
   255f8:	str	lr, [r4, #56]	; 0x38
   255fc:	b	254b0 <__assert_fail@plt+0x13b10>
   25600:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25604:	subs	r7, r1, #0
   25608:	mov	r8, r0
   2560c:	mov	r5, r2
   25610:	beq	2570c <__assert_fail@plt+0x13d6c>
   25614:	ldr	r0, [r7, #4]
   25618:	cmp	r2, #0
   2561c:	cmpne	r0, #0
   25620:	ble	256c4 <__assert_fail@plt+0x13d24>
   25624:	ldr	r3, [r2, #4]
   25628:	cmp	r3, #0
   2562c:	ble	256cc <__assert_fail@plt+0x13d2c>
   25630:	add	r0, r0, r3
   25634:	str	r0, [r8]
   25638:	lsl	r0, r0, #2
   2563c:	bl	1f110 <__assert_fail@plt+0xd770>
   25640:	cmp	r0, #0
   25644:	str	r0, [r8, #8]
   25648:	beq	257c8 <__assert_fail@plt+0x13e28>
   2564c:	mov	r3, #0
   25650:	mov	ip, r3
   25654:	ldr	r9, [r7, #4]
   25658:	ldr	sl, [r5, #4]
   2565c:	mov	r4, r0
   25660:	mov	lr, #1
   25664:	b	256a4 <__assert_fail@plt+0x13d04>
   25668:	cmp	r3, sl
   2566c:	bge	25774 <__assert_fail@plt+0x13dd4>
   25670:	ldr	r2, [r7, #8]
   25674:	ldr	r1, [r5, #8]
   25678:	ldr	r2, [r2, ip, lsl #2]
   2567c:	ldr	r6, [r1, r3, lsl #2]
   25680:	cmp	r2, r6
   25684:	addgt	r3, r3, #1
   25688:	strgt	r6, [r4]
   2568c:	bgt	2569c <__assert_fail@plt+0x13cfc>
   25690:	add	ip, ip, #1
   25694:	addeq	r3, r3, #1
   25698:	str	r2, [r4]
   2569c:	add	lr, lr, #1
   256a0:	add	r4, r4, #4
   256a4:	cmp	ip, r9
   256a8:	sub	r6, lr, #1
   256ac:	blt	25668 <__assert_fail@plt+0x13cc8>
   256b0:	cmp	r3, sl
   256b4:	blt	25794 <__assert_fail@plt+0x13df4>
   256b8:	str	r6, [r8, #4]
   256bc:	mov	r0, #0
   256c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   256c4:	cmp	r0, #0
   256c8:	ble	2570c <__assert_fail@plt+0x13d6c>
   256cc:	str	r0, [r8, #4]
   256d0:	ldr	r3, [r7, #4]
   256d4:	cmp	r3, #0
   256d8:	ble	25730 <__assert_fail@plt+0x13d90>
   256dc:	str	r0, [r8]
   256e0:	lsl	r0, r0, #2
   256e4:	bl	1f110 <__assert_fail@plt+0xd770>
   256e8:	cmp	r0, #0
   256ec:	str	r0, [r8, #8]
   256f0:	beq	257b4 <__assert_fail@plt+0x13e14>
   256f4:	ldr	r2, [r7, #4]
   256f8:	ldr	r1, [r7, #8]
   256fc:	lsl	r2, r2, #2
   25700:	bl	115d4 <memcpy@plt>
   25704:	mov	r0, #0
   25708:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2570c:	cmp	r5, #0
   25710:	beq	25730 <__assert_fail@plt+0x13d90>
   25714:	ldr	r0, [r5, #4]
   25718:	cmp	r0, #0
   2571c:	ble	25730 <__assert_fail@plt+0x13d90>
   25720:	str	r0, [r8, #4]
   25724:	ldr	r3, [r5, #4]
   25728:	cmp	r3, #0
   2572c:	bgt	25744 <__assert_fail@plt+0x13da4>
   25730:	mov	r0, #0
   25734:	str	r0, [r8]
   25738:	str	r0, [r8, #4]
   2573c:	str	r0, [r8, #8]
   25740:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25744:	str	r0, [r8]
   25748:	lsl	r0, r0, #2
   2574c:	bl	1f110 <__assert_fail@plt+0xd770>
   25750:	cmp	r0, #0
   25754:	str	r0, [r8, #8]
   25758:	beq	257b4 <__assert_fail@plt+0x13e14>
   2575c:	ldr	r2, [r5, #4]
   25760:	ldr	r1, [r5, #8]
   25764:	lsl	r2, r2, #2
   25768:	bl	115d4 <memcpy@plt>
   2576c:	mov	r0, #0
   25770:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25774:	sub	r9, r9, ip
   25778:	ldr	r1, [r7, #8]
   2577c:	add	r0, r0, r6, lsl #2
   25780:	add	r1, r1, ip, lsl #2
   25784:	lsl	r2, r9, #2
   25788:	add	r6, r6, r9
   2578c:	bl	115d4 <memcpy@plt>
   25790:	b	256b8 <__assert_fail@plt+0x13d18>
   25794:	sub	sl, sl, r3
   25798:	ldr	r1, [r5, #8]
   2579c:	add	r0, r0, r6, lsl #2
   257a0:	add	r1, r1, r3, lsl #2
   257a4:	lsl	r2, sl, #2
   257a8:	bl	115d4 <memcpy@plt>
   257ac:	add	r6, r6, sl
   257b0:	b	256b8 <__assert_fail@plt+0x13d18>
   257b4:	mov	r3, #0
   257b8:	str	r3, [r8, #4]
   257bc:	str	r3, [r8]
   257c0:	mov	r0, #12
   257c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   257c8:	mov	r0, #12
   257cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   257d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   257d4:	mov	sl, r2
   257d8:	ldr	r2, [r0, #100]	; 0x64
   257dc:	sub	sp, sp, #116	; 0x74
   257e0:	mov	ip, #0
   257e4:	ldr	r8, [r2, sl, lsl #2]
   257e8:	mov	r5, r3
   257ec:	cmp	r8, ip
   257f0:	lsl	r3, sl, #2
   257f4:	str	r3, [sp, #36]	; 0x24
   257f8:	str	r0, [sp, #32]
   257fc:	mov	fp, r1
   25800:	ldr	r6, [r0, #84]	; 0x54
   25804:	str	ip, [sp, #64]	; 0x40
   25808:	ldr	r3, [r5, #4]
   2580c:	beq	25fe8 <__assert_fail@plt+0x14648>
   25810:	add	r2, r8, #4
   25814:	cmp	r3, ip
   25818:	str	r2, [sp, #20]
   2581c:	bne	2585c <__assert_fail@plt+0x13ebc>
   25820:	ldr	r3, [fp]
   25824:	mov	r2, #0
   25828:	str	r2, [r3, sl, lsl #2]
   2582c:	ldr	r3, [sp, #20]
   25830:	cmp	r3, #0
   25834:	beq	25850 <__assert_fail@plt+0x13eb0>
   25838:	ldr	r3, [sp, #32]
   2583c:	ldr	r3, [r3, #100]	; 0x64
   25840:	ldr	r3, [r3, sl, lsl #2]
   25844:	ldrb	r3, [r3, #52]	; 0x34
   25848:	ands	r3, r3, #64	; 0x40
   2584c:	bne	25948 <__assert_fail@plt+0x13fa8>
   25850:	mov	r0, r3
   25854:	add	sp, sp, #116	; 0x74
   25858:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2585c:	add	r0, sp, #112	; 0x70
   25860:	mov	r2, r5
   25864:	str	ip, [r0, #-28]!	; 0xffffffe4
   25868:	mov	r1, r6
   2586c:	bl	24ba8 <__assert_fail@plt+0x13208>
   25870:	ldr	r3, [sp, #84]	; 0x54
   25874:	cmp	r3, #0
   25878:	mov	r9, r0
   2587c:	bne	25850 <__assert_fail@plt+0x13eb0>
   25880:	ldr	r7, [r0, #28]
   25884:	cmp	r7, #0
   25888:	addne	r3, r0, #28
   2588c:	strne	r3, [sp, #16]
   25890:	bne	25ce0 <__assert_fail@plt+0x14340>
   25894:	ldr	r0, [r5, #4]
   25898:	str	r7, [r9, #32]
   2589c:	str	r0, [r9, #28]
   258a0:	lsl	r0, r0, #2
   258a4:	bl	1f110 <__assert_fail@plt+0xd770>
   258a8:	add	r3, r9, #28
   258ac:	str	r3, [sp, #16]
   258b0:	cmp	r0, #0
   258b4:	str	r0, [r9, #36]	; 0x24
   258b8:	beq	25e5c <__assert_fail@plt+0x144bc>
   258bc:	ldr	r2, [r5, #4]
   258c0:	str	r7, [sp, #84]	; 0x54
   258c4:	cmp	r2, #0
   258c8:	movgt	r4, r3
   258cc:	strgt	r8, [sp, #24]
   258d0:	strgt	sl, [sp, #28]
   258d4:	bgt	25918 <__assert_fail@plt+0x13f78>
   258d8:	b	25ce0 <__assert_fail@plt+0x14340>
   258dc:	ldr	r2, [r9, #32]
   258e0:	ldr	r0, [r9, #28]
   258e4:	add	r2, r2, r1, lsl #1
   258e8:	cmp	r0, r2
   258ec:	blt	25fc0 <__assert_fail@plt+0x14620>
   258f0:	mov	r1, r8
   258f4:	mov	r0, r4
   258f8:	bl	201fc <__assert_fail@plt+0xe85c>
   258fc:	cmp	r0, #0
   25900:	str	r0, [sp, #84]	; 0x54
   25904:	bne	25e5c <__assert_fail@plt+0x144bc>
   25908:	ldr	r2, [r5, #4]
   2590c:	add	r7, r7, #1
   25910:	cmp	r7, r2
   25914:	bge	25cd8 <__assert_fail@plt+0x14338>
   25918:	ldr	r3, [r5, #8]
   2591c:	ldr	r1, [r6, #28]
   25920:	ldr	r3, [r3, r7, lsl #2]
   25924:	add	r3, r3, r3, lsl #1
   25928:	adds	r8, r1, r3, lsl #2
   2592c:	beq	2593c <__assert_fail@plt+0x13f9c>
   25930:	ldr	r1, [r8, #4]
   25934:	cmp	r1, #0
   25938:	bne	258dc <__assert_fail@plt+0x13f3c>
   2593c:	mov	r3, #0
   25940:	str	r3, [sp, #84]	; 0x54
   25944:	b	2590c <__assert_fail@plt+0x13f6c>
   25948:	ldr	r4, [sp, #32]
   2594c:	mov	r3, #0
   25950:	mov	r0, r3
   25954:	ldr	ip, [r4, #108]	; 0x6c
   25958:	mov	r3, ip
   2595c:	cmp	r0, r3
   25960:	bge	259bc <__assert_fail@plt+0x1401c>
   25964:	add	r2, r0, r3
   25968:	ldr	lr, [r4, #116]	; 0x74
   2596c:	add	r2, r2, r2, lsr #31
   25970:	asr	r2, r2, #1
   25974:	add	r1, r2, r2, lsl #1
   25978:	add	r1, lr, r1, lsl #3
   2597c:	ldr	r1, [r1, #4]
   25980:	cmp	sl, r1
   25984:	ble	259ac <__assert_fail@plt+0x1400c>
   25988:	b	25cc4 <__assert_fail@plt+0x14324>
   2598c:	asr	r3, r3, #1
   25990:	mov	r5, r3
   25994:	add	r1, r3, r3, lsl #1
   25998:	add	r1, lr, r1, lsl #3
   2599c:	ldr	r1, [r1, #4]
   259a0:	cmp	sl, r1
   259a4:	bgt	25ccc <__assert_fail@plt+0x1432c>
   259a8:	mov	r2, r3
   259ac:	add	r3, r2, r0
   259b0:	cmp	r2, r0
   259b4:	add	r3, r3, r3, lsr #31
   259b8:	bgt	2598c <__assert_fail@plt+0x13fec>
   259bc:	cmp	ip, r0
   259c0:	str	r0, [sp, #40]	; 0x28
   259c4:	ble	25cb4 <__assert_fail@plt+0x14314>
   259c8:	ldr	r3, [sp, #32]
   259cc:	add	r2, r0, r0, lsl #1
   259d0:	ldr	r3, [r3, #116]	; 0x74
   259d4:	lsl	r2, r2, #3
   259d8:	add	r3, r3, r2
   259dc:	str	r2, [sp, #56]	; 0x38
   259e0:	ldr	r3, [r3, #4]
   259e4:	cmp	sl, r3
   259e8:	bne	25cb4 <__assert_fail@plt+0x14314>
   259ec:	ldr	r3, [sp, #40]	; 0x28
   259f0:	cmn	r3, #1
   259f4:	beq	25cb4 <__assert_fail@plt+0x14314>
   259f8:	ldr	r3, [sp, #20]
   259fc:	ldr	r2, [sp, #32]
   25a00:	ldr	r0, [r3, #4]
   25a04:	mov	r3, #0
   25a08:	cmp	r0, r3
   25a0c:	str	r3, [sp, #84]	; 0x54
   25a10:	ldr	r8, [r2, #84]	; 0x54
   25a14:	ble	25cb4 <__assert_fail@plt+0x14314>
   25a18:	str	r3, [sp, #16]
   25a1c:	add	r3, fp, #24
   25a20:	str	r3, [sp, #44]	; 0x2c
   25a24:	add	r3, fp, #20
   25a28:	str	r3, [sp, #48]	; 0x30
   25a2c:	b	25a4c <__assert_fail@plt+0x140ac>
   25a30:	cmp	r3, #4
   25a34:	beq	25a88 <__assert_fail@plt+0x140e8>
   25a38:	ldr	r3, [sp, #16]
   25a3c:	add	r3, r3, #1
   25a40:	cmp	r3, r0
   25a44:	str	r3, [sp, #16]
   25a48:	bge	25ca4 <__assert_fail@plt+0x14304>
   25a4c:	ldr	r3, [sp, #20]
   25a50:	ldr	ip, [sp, #16]
   25a54:	ldr	r2, [fp, #8]
   25a58:	ldr	r1, [r3, #8]
   25a5c:	ldr	r3, [r8]
   25a60:	ldr	r6, [r1, ip, lsl #2]
   25a64:	cmp	r6, r2
   25a68:	add	r3, r3, r6, lsl #3
   25a6c:	ldrb	r3, [r3, #4]
   25a70:	bne	25a30 <__assert_fail@plt+0x14090>
   25a74:	ldr	r2, [fp, #12]
   25a78:	cmp	sl, r2
   25a7c:	beq	25a38 <__assert_fail@plt+0x14098>
   25a80:	cmp	r3, #4
   25a84:	bne	25a38 <__assert_fail@plt+0x14098>
   25a88:	ldr	r3, [sp, #32]
   25a8c:	ldr	r2, [sp, #56]	; 0x38
   25a90:	ldr	r4, [sp, #40]	; 0x28
   25a94:	ldr	r7, [r3, #116]	; 0x74
   25a98:	add	r3, r6, r6, lsl #1
   25a9c:	add	r7, r7, r2
   25aa0:	lsl	r3, r3, #2
   25aa4:	str	r3, [sp, #28]
   25aa8:	lsl	r3, r6, #2
   25aac:	str	r3, [sp, #24]
   25ab0:	mov	r5, r2
   25ab4:	b	25ad0 <__assert_fail@plt+0x14130>
   25ab8:	ldrb	r3, [r7, #20]
   25abc:	add	r4, r4, #1
   25ac0:	add	r5, r5, #24
   25ac4:	cmp	r3, #0
   25ac8:	add	r7, r7, #24
   25acc:	beq	25e80 <__assert_fail@plt+0x144e0>
   25ad0:	ldr	r3, [r7]
   25ad4:	cmp	r6, r3
   25ad8:	bne	25ab8 <__assert_fail@plt+0x14118>
   25adc:	ldr	r3, [r7, #8]
   25ae0:	ldr	r9, [r7, #12]
   25ae4:	sub	r9, r9, r3
   25ae8:	cmp	r9, #0
   25aec:	add	r9, sl, r9
   25af0:	ldreq	r3, [r8, #20]
   25af4:	ldreq	r2, [sp, #28]
   25af8:	ldrne	r3, [r8, #12]
   25afc:	addeq	r3, r3, r2
   25b00:	ldrne	r2, [sp, #24]
   25b04:	ldreq	r3, [r3, #8]
   25b08:	ldrne	ip, [r3, r2]
   25b0c:	ldreq	ip, [r3]
   25b10:	ldr	r3, [fp, #12]
   25b14:	cmp	r9, r3
   25b18:	bgt	25ab8 <__assert_fail@plt+0x14118>
   25b1c:	ldr	r3, [fp]
   25b20:	ldr	r3, [r3, r9, lsl #2]
   25b24:	cmp	r3, #0
   25b28:	beq	25ab8 <__assert_fail@plt+0x14118>
   25b2c:	ldr	r0, [r3, #8]
   25b30:	cmp	r0, #0
   25b34:	ble	25ab8 <__assert_fail@plt+0x14118>
   25b38:	ldr	lr, [r3, #12]
   25b3c:	sub	r0, r0, #1
   25b40:	mov	r1, #0
   25b44:	cmp	r1, r0
   25b48:	bcs	25b84 <__assert_fail@plt+0x141e4>
   25b4c:	add	r2, r1, r0
   25b50:	lsr	r2, r2, #1
   25b54:	ldr	r3, [lr, r2, lsl #2]
   25b58:	cmp	r3, ip
   25b5c:	bge	25b74 <__assert_fail@plt+0x141d4>
   25b60:	b	25e6c <__assert_fail@plt+0x144cc>
   25b64:	ldr	r0, [lr, r3, lsl #2]
   25b68:	cmp	ip, r0
   25b6c:	bgt	25e74 <__assert_fail@plt+0x144d4>
   25b70:	mov	r2, r3
   25b74:	add	r3, r1, r2
   25b78:	cmp	r1, r2
   25b7c:	lsr	r3, r3, #1
   25b80:	bcc	25b64 <__assert_fail@plt+0x141c4>
   25b84:	ldr	r3, [lr, r1, lsl #2]
   25b88:	cmp	ip, r3
   25b8c:	bne	25ab8 <__assert_fail@plt+0x14118>
   25b90:	str	r9, [sp, #8]
   25b94:	stm	sp, {sl, ip}
   25b98:	mov	r3, r6
   25b9c:	ldr	r2, [sp, #44]	; 0x2c
   25ba0:	ldr	r1, [sp, #48]	; 0x30
   25ba4:	ldr	r0, [sp, #32]
   25ba8:	bl	241c8 <__assert_fail@plt+0x12828>
   25bac:	cmp	r0, #0
   25bb0:	bne	25ab8 <__assert_fail@plt+0x14118>
   25bb4:	ldr	r3, [sp, #84]	; 0x54
   25bb8:	cmp	r3, #0
   25bbc:	beq	25f68 <__assert_fail@plt+0x145c8>
   25bc0:	mov	r1, r4
   25bc4:	add	r0, sp, #100	; 0x64
   25bc8:	str	r6, [sp, #92]	; 0x5c
   25bcc:	str	sl, [sp, #96]	; 0x60
   25bd0:	bl	1fdc4 <__assert_fail@plt+0xe424>
   25bd4:	cmp	r0, #0
   25bd8:	beq	26228 <__assert_fail@plt+0x14888>
   25bdc:	ldr	r3, [sp, #84]	; 0x54
   25be0:	ldr	r2, [sp, #36]	; 0x24
   25be4:	add	r1, sp, #84	; 0x54
   25be8:	ldr	r0, [sp, #32]
   25bec:	ldr	r3, [r3, r2]
   25bf0:	str	r3, [sp, #52]	; 0x34
   25bf4:	bl	26270 <__assert_fail@plt+0x148d0>
   25bf8:	subs	ip, r0, #0
   25bfc:	bne	25f94 <__assert_fail@plt+0x145f4>
   25c00:	ldr	r7, [fp, #4]
   25c04:	cmp	r7, #0
   25c08:	beq	25e8c <__assert_fail@plt+0x144ec>
   25c0c:	cmp	sl, #0
   25c10:	ldr	r9, [sp, #84]	; 0x54
   25c14:	blt	25e90 <__assert_fail@plt+0x144f0>
   25c18:	str	r4, [sp, #60]	; 0x3c
   25c1c:	mov	r4, ip
   25c20:	b	25c84 <__assert_fail@plt+0x142e4>
   25c24:	ldr	ip, [r9]
   25c28:	cmp	ip, #0
   25c2c:	add	r2, ip, #4
   25c30:	beq	25c70 <__assert_fail@plt+0x142d0>
   25c34:	bl	25600 <__assert_fail@plt+0x13c60>
   25c38:	add	r2, sp, #72	; 0x48
   25c3c:	mov	r1, r8
   25c40:	mov	ip, r0
   25c44:	cmp	ip, #0
   25c48:	add	r0, sp, #68	; 0x44
   25c4c:	str	ip, [sp, #68]	; 0x44
   25c50:	bne	25f94 <__assert_fail@plt+0x145f4>
   25c54:	bl	24ba8 <__assert_fail@plt+0x13208>
   25c58:	str	r0, [r7]
   25c5c:	ldr	r0, [sp, #80]	; 0x50
   25c60:	bl	1f018 <__assert_fail@plt+0xd678>
   25c64:	ldr	ip, [sp, #68]	; 0x44
   25c68:	cmp	ip, #0
   25c6c:	bne	25f94 <__assert_fail@plt+0x145f4>
   25c70:	add	r4, r4, #1
   25c74:	cmp	sl, r4
   25c78:	add	r7, r7, #4
   25c7c:	add	r9, r9, #4
   25c80:	blt	26230 <__assert_fail@plt+0x14890>
   25c84:	ldr	r2, [r7]
   25c88:	add	r0, sp, #72	; 0x48
   25c8c:	cmp	r2, #0
   25c90:	add	r1, r2, #4
   25c94:	bne	25c24 <__assert_fail@plt+0x14284>
   25c98:	ldr	r2, [r9]
   25c9c:	str	r2, [r7]
   25ca0:	b	25c70 <__assert_fail@plt+0x142d0>
   25ca4:	ldr	r3, [sp, #84]	; 0x54
   25ca8:	cmp	r3, #0
   25cac:	movne	r3, #0
   25cb0:	bne	25fa4 <__assert_fail@plt+0x14604>
   25cb4:	mov	r3, #0
   25cb8:	mov	r0, r3
   25cbc:	add	sp, sp, #116	; 0x74
   25cc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25cc4:	mov	r5, r2
   25cc8:	mov	r2, r3
   25ccc:	add	r0, r5, #1
   25cd0:	mov	r3, r2
   25cd4:	b	2595c <__assert_fail@plt+0x13fbc>
   25cd8:	ldr	r8, [sp, #24]
   25cdc:	ldr	sl, [sp, #28]
   25ce0:	ldr	r3, [r8, #8]
   25ce4:	cmp	r3, #0
   25ce8:	beq	25d64 <__assert_fail@plt+0x143c4>
   25cec:	ldr	r4, [r9, #32]
   25cf0:	cmp	r4, #0
   25cf4:	beq	25d64 <__assert_fail@plt+0x143c4>
   25cf8:	ldr	r2, [r5, #4]
   25cfc:	add	r3, r3, r4
   25d00:	ldr	r4, [r5]
   25d04:	add	r2, r3, r2
   25d08:	cmp	r2, r4
   25d0c:	bgt	2624c <__assert_fail@plt+0x148ac>
   25d10:	ldr	r2, [sp, #16]
   25d14:	ldr	r1, [sp, #20]
   25d18:	mov	r0, r5
   25d1c:	bl	200ac <__assert_fail@plt+0xe70c>
   25d20:	cmp	r0, #0
   25d24:	mov	r3, r0
   25d28:	str	r0, [sp, #64]	; 0x40
   25d2c:	bne	25850 <__assert_fail@plt+0x13eb0>
   25d30:	ldr	r1, [fp, #20]
   25d34:	cmp	r1, #0
   25d38:	bne	25d78 <__assert_fail@plt+0x143d8>
   25d3c:	mov	r2, r5
   25d40:	mov	r1, r6
   25d44:	add	r0, sp, #64	; 0x40
   25d48:	ldr	r4, [fp]
   25d4c:	bl	24ba8 <__assert_fail@plt+0x13208>
   25d50:	ldr	r3, [sp, #64]	; 0x40
   25d54:	cmp	r3, #0
   25d58:	str	r0, [r4, sl, lsl #2]
   25d5c:	beq	2582c <__assert_fail@plt+0x13e8c>
   25d60:	b	25850 <__assert_fail@plt+0x13eb0>
   25d64:	ldr	r1, [fp, #20]
   25d68:	mov	r3, #0
   25d6c:	cmp	r1, #0
   25d70:	str	r3, [sp, #64]	; 0x40
   25d74:	beq	25d3c <__assert_fail@plt+0x1439c>
   25d78:	ldr	r3, [sp, #32]
   25d7c:	ldr	r3, [r3, #116]	; 0x74
   25d80:	str	r3, [sp, #16]
   25d84:	ble	25e50 <__assert_fail@plt+0x144b0>
   25d88:	mov	r9, #0
   25d8c:	ldr	r3, [fp, #24]
   25d90:	ldr	ip, [sp, #16]
   25d94:	ldr	r3, [r3, r9, lsl #2]
   25d98:	add	r3, r3, r3, lsl #1
   25d9c:	add	r2, ip, r3, lsl #3
   25da0:	ldr	r0, [r2, #8]
   25da4:	cmp	sl, r0
   25da8:	ble	25e44 <__assert_fail@plt+0x144a4>
   25dac:	ldr	r0, [r2, #4]
   25db0:	cmp	sl, r0
   25db4:	bgt	25e44 <__assert_fail@plt+0x144a4>
   25db8:	ldr	r0, [ip, r3, lsl #3]
   25dbc:	ldr	r2, [r2, #12]
   25dc0:	ldr	r3, [r6]
   25dc4:	cmp	sl, r2
   25dc8:	ldr	r7, [r3, r0, lsl #3]
   25dcc:	beq	25ffc <__assert_fail@plt+0x1465c>
   25dd0:	ldr	r0, [r5, #4]
   25dd4:	cmp	r0, #0
   25dd8:	ble	25e44 <__assert_fail@plt+0x144a4>
   25ddc:	mov	r4, #0
   25de0:	b	25df0 <__assert_fail@plt+0x14450>
   25de4:	cmp	r4, r0
   25de8:	bge	25e40 <__assert_fail@plt+0x144a0>
   25dec:	ldr	r3, [r6]
   25df0:	ldr	r2, [r5, #8]
   25df4:	ldr	r1, [r2, r4, lsl #2]
   25df8:	add	r4, r4, #1
   25dfc:	add	r2, r3, r1, lsl #3
   25e00:	ldrb	r2, [r2, #4]
   25e04:	sub	r2, r2, #8
   25e08:	cmp	r2, #1
   25e0c:	bhi	25de4 <__assert_fail@plt+0x14444>
   25e10:	ldr	r3, [r3, r1, lsl #3]
   25e14:	cmp	r7, r3
   25e18:	bne	25de4 <__assert_fail@plt+0x14444>
   25e1c:	ldr	r3, [sp, #20]
   25e20:	mov	r2, r5
   25e24:	mov	r0, r6
   25e28:	bl	244a0 <__assert_fail@plt+0x12b00>
   25e2c:	cmp	r0, #0
   25e30:	bne	26208 <__assert_fail@plt+0x14868>
   25e34:	ldr	r0, [r5, #4]
   25e38:	cmp	r4, r0
   25e3c:	blt	25dec <__assert_fail@plt+0x1444c>
   25e40:	ldr	r1, [fp, #20]
   25e44:	add	r9, r9, #1
   25e48:	cmp	r9, r1
   25e4c:	blt	25d8c <__assert_fail@plt+0x143ec>
   25e50:	mov	r3, #0
   25e54:	str	r3, [sp, #64]	; 0x40
   25e58:	b	25d3c <__assert_fail@plt+0x1439c>
   25e5c:	mov	r3, #12
   25e60:	mov	r0, r3
   25e64:	add	sp, sp, #116	; 0x74
   25e68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25e6c:	mov	r3, r2
   25e70:	mov	r2, r0
   25e74:	add	r1, r3, #1
   25e78:	mov	r0, r2
   25e7c:	b	25b44 <__assert_fail@plt+0x141a4>
   25e80:	ldr	r3, [sp, #20]
   25e84:	ldr	r0, [r3, #4]
   25e88:	b	25a38 <__assert_fail@plt+0x14098>
   25e8c:	ldr	r9, [sp, #84]	; 0x54
   25e90:	ldr	lr, [sp, #104]	; 0x68
   25e94:	ldr	r3, [sp, #36]	; 0x24
   25e98:	ldr	r2, [sp, #52]	; 0x34
   25e9c:	cmp	lr, #0
   25ea0:	str	r2, [r9, r3]
   25ea4:	ble	25f08 <__assert_fail@plt+0x14568>
   25ea8:	sub	r7, lr, #1
   25eac:	ldr	ip, [sp, #108]	; 0x6c
   25eb0:	mov	r0, r7
   25eb4:	mov	r1, #0
   25eb8:	cmp	r1, r0
   25ebc:	bcs	25ef8 <__assert_fail@plt+0x14558>
   25ec0:	add	r2, r1, r0
   25ec4:	lsr	r2, r2, #1
   25ec8:	ldr	r3, [ip, r2, lsl #2]
   25ecc:	cmp	r4, r3
   25ed0:	ble	25ee8 <__assert_fail@plt+0x14548>
   25ed4:	b	25f18 <__assert_fail@plt+0x14578>
   25ed8:	ldr	r0, [ip, r3, lsl #2]
   25edc:	cmp	r4, r0
   25ee0:	bgt	25f20 <__assert_fail@plt+0x14580>
   25ee4:	mov	r2, r3
   25ee8:	add	r3, r2, r1
   25eec:	cmp	r2, r1
   25ef0:	lsr	r3, r3, #1
   25ef4:	bhi	25ed8 <__assert_fail@plt+0x14538>
   25ef8:	ldr	r2, [ip, r1, lsl #2]
   25efc:	add	r3, ip, r1, lsl #2
   25f00:	cmp	r4, r2
   25f04:	beq	25f2c <__assert_fail@plt+0x1458c>
   25f08:	ldr	r3, [sp, #32]
   25f0c:	ldr	r7, [r3, #116]	; 0x74
   25f10:	add	r7, r7, r5
   25f14:	b	25ab8 <__assert_fail@plt+0x14118>
   25f18:	mov	r3, r2
   25f1c:	mov	r2, r0
   25f20:	add	r1, r3, #1
   25f24:	mov	r0, r2
   25f28:	b	25eb8 <__assert_fail@plt+0x14518>
   25f2c:	cmp	lr, r1
   25f30:	movgt	lr, #0
   25f34:	movle	lr, #1
   25f38:	orrs	r2, lr, r1, lsr #31
   25f3c:	bne	25f08 <__assert_fail@plt+0x14568>
   25f40:	cmp	r1, r7
   25f44:	str	r7, [sp, #104]	; 0x68
   25f48:	bge	25f08 <__assert_fail@plt+0x14568>
   25f4c:	ldr	r2, [r3, #4]
   25f50:	add	r1, r1, #1
   25f54:	str	r2, [r3], #4
   25f58:	ldr	r2, [sp, #104]	; 0x68
   25f5c:	cmp	r1, r2
   25f60:	blt	25f4c <__assert_fail@plt+0x145ac>
   25f64:	b	25f08 <__assert_fail@plt+0x14568>
   25f68:	mov	ip, fp
   25f6c:	add	lr, sp, #84	; 0x54
   25f70:	ldm	ip!, {r0, r1, r2, r3}
   25f74:	stmia	lr!, {r0, r1, r2, r3}
   25f78:	ldm	ip, {r0, r1, r2}
   25f7c:	stm	lr, {r0, r1, r2}
   25f80:	mov	r1, ip
   25f84:	add	r0, sp, #100	; 0x64
   25f88:	bl	20034 <__assert_fail@plt+0xe694>
   25f8c:	subs	ip, r0, #0
   25f90:	beq	25bc0 <__assert_fail@plt+0x14220>
   25f94:	mov	r3, ip
   25f98:	ldr	r2, [sp, #84]	; 0x54
   25f9c:	cmp	r2, #0
   25fa0:	beq	25850 <__assert_fail@plt+0x13eb0>
   25fa4:	ldr	r0, [sp, #108]	; 0x6c
   25fa8:	str	r3, [sp, #16]
   25fac:	bl	1f018 <__assert_fail@plt+0xd678>
   25fb0:	ldr	r3, [sp, #16]
   25fb4:	mov	r0, r3
   25fb8:	add	sp, sp, #116	; 0x74
   25fbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25fc0:	add	r2, r1, r0
   25fc4:	ldr	r0, [r9, #36]	; 0x24
   25fc8:	lsl	r1, r2, #3
   25fcc:	lsl	sl, r2, #1
   25fd0:	bl	1f190 <__assert_fail@plt+0xd7f0>
   25fd4:	cmp	r0, #0
   25fd8:	beq	25e5c <__assert_fail@plt+0x144bc>
   25fdc:	str	r0, [r9, #36]	; 0x24
   25fe0:	str	sl, [r9, #28]
   25fe4:	b	258f0 <__assert_fail@plt+0x13f50>
   25fe8:	cmp	r3, #0
   25fec:	strne	r8, [sp, #20]
   25ff0:	bne	25d3c <__assert_fail@plt+0x1439c>
   25ff4:	str	r3, [sp, #20]
   25ff8:	b	25820 <__assert_fail@plt+0x13e80>
   25ffc:	ldr	r2, [r5, #4]
   26000:	cmp	r2, #0
   26004:	mov	r1, r2
   26008:	str	r2, [sp, #24]
   2600c:	ble	25e40 <__assert_fail@plt+0x144a0>
   26010:	ldr	lr, [r5, #8]
   26014:	mvn	r4, #0
   26018:	mov	r2, lr
   2601c:	add	r1, lr, r1, lsl #2
   26020:	mov	r8, r4
   26024:	str	r6, [sp, #28]
   26028:	b	26048 <__assert_fail@plt+0x146a8>
   2602c:	cmp	ip, #9
   26030:	bne	26040 <__assert_fail@plt+0x146a0>
   26034:	ldr	ip, [r6]
   26038:	cmp	r7, ip
   2603c:	moveq	r4, r0
   26040:	cmp	r1, r2
   26044:	beq	26070 <__assert_fail@plt+0x146d0>
   26048:	ldr	r0, [r2], #4
   2604c:	add	r6, r3, r0, lsl #3
   26050:	ldrb	ip, [r6, #4]
   26054:	cmp	ip, #8
   26058:	bne	2602c <__assert_fail@plt+0x1468c>
   2605c:	ldr	ip, [r3, r0, lsl #3]
   26060:	cmp	r7, ip
   26064:	moveq	r8, r0
   26068:	cmp	r1, r2
   2606c:	bne	26048 <__assert_fail@plt+0x146a8>
   26070:	cmp	r8, #0
   26074:	ldr	r6, [sp, #28]
   26078:	mov	r3, r8
   2607c:	blt	2623c <__assert_fail@plt+0x1489c>
   26080:	mov	r1, r8
   26084:	ldr	r3, [sp, #20]
   26088:	mov	r2, r5
   2608c:	mov	r0, r6
   26090:	bl	244a0 <__assert_fail@plt+0x12b00>
   26094:	cmp	r0, #0
   26098:	bne	26208 <__assert_fail@plt+0x14868>
   2609c:	cmp	r4, #0
   260a0:	blt	25e40 <__assert_fail@plt+0x144a0>
   260a4:	ldr	r3, [r5, #4]
   260a8:	cmp	r3, #0
   260ac:	ble	25e40 <__assert_fail@plt+0x144a0>
   260b0:	ldr	lr, [r5, #8]
   260b4:	str	sl, [sp, #28]
   260b8:	ldr	sl, [sp, #20]
   260bc:	str	r9, [sp, #24]
   260c0:	mov	r7, #0
   260c4:	mov	r9, r3
   260c8:	ldr	r1, [lr, r7, lsl #2]
   260cc:	ldr	r3, [r6, #28]
   260d0:	add	r8, r1, r1, lsl #1
   260d4:	lsl	r8, r8, #2
   260d8:	add	r3, r3, r8
   260dc:	ldr	ip, [r3, #4]
   260e0:	cmp	ip, #0
   260e4:	ble	26140 <__assert_fail@plt+0x147a0>
   260e8:	ldr	lr, [r3, #8]
   260ec:	sub	ip, ip, #1
   260f0:	mov	r0, #0
   260f4:	cmp	r0, ip
   260f8:	bcs	26134 <__assert_fail@plt+0x14794>
   260fc:	add	r2, r0, ip
   26100:	lsr	r2, r2, #1
   26104:	ldr	r3, [lr, r2, lsl #2]
   26108:	cmp	r4, r3
   2610c:	ble	26124 <__assert_fail@plt+0x14784>
   26110:	b	261e0 <__assert_fail@plt+0x14840>
   26114:	ldr	ip, [lr, r3, lsl #2]
   26118:	cmp	r4, ip
   2611c:	bgt	261e8 <__assert_fail@plt+0x14848>
   26120:	mov	r2, r3
   26124:	add	r3, r2, r0
   26128:	cmp	r2, r0
   2612c:	lsr	r3, r3, #1
   26130:	bhi	26114 <__assert_fail@plt+0x14774>
   26134:	ldr	r3, [lr, r0, lsl #2]
   26138:	cmp	r4, r3
   2613c:	beq	261cc <__assert_fail@plt+0x1482c>
   26140:	ldr	r3, [r6, #24]
   26144:	add	r8, r3, r8
   26148:	ldr	ip, [r8, #4]
   2614c:	cmp	ip, #0
   26150:	ble	261ac <__assert_fail@plt+0x1480c>
   26154:	ldr	lr, [r8, #8]
   26158:	sub	ip, ip, #1
   2615c:	mov	r0, #0
   26160:	cmp	r0, ip
   26164:	bcs	261a0 <__assert_fail@plt+0x14800>
   26168:	add	r2, r0, ip
   2616c:	lsr	r2, r2, #1
   26170:	ldr	r3, [lr, r2, lsl #2]
   26174:	cmp	r3, r4
   26178:	bge	26190 <__assert_fail@plt+0x147f0>
   2617c:	b	261f4 <__assert_fail@plt+0x14854>
   26180:	ldr	ip, [lr, r3, lsl #2]
   26184:	cmp	r4, ip
   26188:	bgt	261fc <__assert_fail@plt+0x1485c>
   2618c:	mov	r2, r3
   26190:	add	r3, r0, r2
   26194:	cmp	r0, r2
   26198:	lsr	r3, r3, #1
   2619c:	bcc	26180 <__assert_fail@plt+0x147e0>
   261a0:	ldr	r3, [lr, r0, lsl #2]
   261a4:	cmp	r4, r3
   261a8:	beq	261cc <__assert_fail@plt+0x1482c>
   261ac:	mov	r3, sl
   261b0:	mov	r2, r5
   261b4:	mov	r0, r6
   261b8:	bl	244a0 <__assert_fail@plt+0x12b00>
   261bc:	cmp	r0, #0
   261c0:	bne	26208 <__assert_fail@plt+0x14868>
   261c4:	ldr	r9, [r5, #4]
   261c8:	sub	r7, r7, #1
   261cc:	add	r7, r7, #1
   261d0:	cmp	r7, r9
   261d4:	bge	26218 <__assert_fail@plt+0x14878>
   261d8:	ldr	lr, [r5, #8]
   261dc:	b	260c8 <__assert_fail@plt+0x14728>
   261e0:	mov	r3, r2
   261e4:	mov	r2, ip
   261e8:	add	r0, r3, #1
   261ec:	mov	ip, r2
   261f0:	b	260f4 <__assert_fail@plt+0x14754>
   261f4:	mov	r3, r2
   261f8:	mov	r2, ip
   261fc:	add	r0, r3, #1
   26200:	mov	ip, r2
   26204:	b	26160 <__assert_fail@plt+0x147c0>
   26208:	mov	r3, r0
   2620c:	mov	r0, r3
   26210:	add	sp, sp, #116	; 0x74
   26214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26218:	ldr	r9, [sp, #24]
   2621c:	ldr	sl, [sp, #28]
   26220:	ldr	r1, [fp, #20]
   26224:	b	25e44 <__assert_fail@plt+0x144a4>
   26228:	mov	r3, #12
   2622c:	b	25f98 <__assert_fail@plt+0x145f8>
   26230:	ldr	r4, [sp, #60]	; 0x3c
   26234:	ldr	r9, [sp, #84]	; 0x54
   26238:	b	25e90 <__assert_fail@plt+0x144f0>
   2623c:	cmp	r4, #0
   26240:	ldrge	r3, [sp, #24]
   26244:	bge	260b4 <__assert_fail@plt+0x14714>
   26248:	b	25e40 <__assert_fail@plt+0x144a0>
   2624c:	add	r4, r3, r4
   26250:	ldr	r0, [r5, #8]
   26254:	lsl	r1, r4, #2
   26258:	bl	1f190 <__assert_fail@plt+0xd7f0>
   2625c:	cmp	r0, #0
   26260:	beq	25e5c <__assert_fail@plt+0x144bc>
   26264:	str	r0, [r5, #8]
   26268:	str	r4, [r5]
   2626c:	b	25d10 <__assert_fail@plt+0x14370>
   26270:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26274:	sub	sp, sp, #68	; 0x44
   26278:	mov	r4, #1
   2627c:	mov	r7, r0
   26280:	mov	r0, #4
   26284:	ldr	fp, [r1, #12]
   26288:	mov	r9, r1
   2628c:	ldr	r5, [r1, #8]
   26290:	str	r4, [sp, #52]	; 0x34
   26294:	str	r4, [sp, #56]	; 0x38
   26298:	bl	1f110 <__assert_fail@plt+0xd770>
   2629c:	lsl	r3, fp, #2
   262a0:	str	r3, [sp, #20]
   262a4:	cmp	r0, #0
   262a8:	str	r0, [sp, #60]	; 0x3c
   262ac:	beq	26708 <__assert_fail@plt+0x14d68>
   262b0:	add	r3, sp, #52	; 0x34
   262b4:	str	r5, [r0]
   262b8:	mov	r2, fp
   262bc:	mov	r1, r9
   262c0:	mov	r0, r7
   262c4:	bl	257d0 <__assert_fail@plt+0x13e30>
   262c8:	subs	r3, r0, #0
   262cc:	str	r3, [sp, #40]	; 0x28
   262d0:	bne	26718 <__assert_fail@plt+0x14d78>
   262d4:	cmp	fp, #0
   262d8:	ble	26590 <__assert_fail@plt+0x14bf0>
   262dc:	str	r3, [sp, #36]	; 0x24
   262e0:	add	r3, r9, #24
   262e4:	str	r3, [sp, #28]
   262e8:	add	r3, r9, #20
   262ec:	str	r3, [sp, #32]
   262f0:	ldr	r3, [sp, #20]
   262f4:	mov	sl, r9
   262f8:	str	r4, [sp, #44]	; 0x2c
   262fc:	ldr	r0, [sl]
   26300:	ldr	r3, [r0, r3]
   26304:	cmp	r3, #0
   26308:	movne	r3, #0
   2630c:	ldreq	r3, [sp, #36]	; 0x24
   26310:	addeq	r3, r3, #1
   26314:	mov	r2, r3
   26318:	str	r3, [sp, #36]	; 0x24
   2631c:	ldr	r3, [r7, #120]	; 0x78
   26320:	cmp	r2, r3
   26324:	bgt	26720 <__assert_fail@plt+0x14d80>
   26328:	mov	r2, #0
   2632c:	ldr	r3, [r7, #100]	; 0x64
   26330:	str	r2, [sp, #56]	; 0x38
   26334:	ldr	r2, [sp, #20]
   26338:	sub	fp, fp, #1
   2633c:	add	r3, r3, r2
   26340:	ldr	r6, [r3, #-4]
   26344:	cmp	r6, #0
   26348:	beq	26560 <__assert_fail@plt+0x14bc0>
   2634c:	ldr	r3, [r6, #20]
   26350:	ldr	r2, [r7, #84]	; 0x54
   26354:	cmp	r3, #0
   26358:	mov	r1, r2
   2635c:	str	r2, [sp, #16]
   26360:	ble	26560 <__assert_fail@plt+0x14bc0>
   26364:	ldr	r2, [r6, #24]
   26368:	ldr	r3, [r1]
   2636c:	mov	r4, #0
   26370:	ldr	r5, [r2]
   26374:	lsl	r8, r5, #3
   26378:	add	r3, r3, r8
   2637c:	ldrb	r1, [r3, #6]
   26380:	ldrb	r2, [r3, #4]
   26384:	tst	r1, #16
   26388:	bne	265dc <__assert_fail@plt+0x14c3c>
   2638c:	ldr	r1, [r7, #4]
   26390:	sub	r2, r2, #1
   26394:	ldrb	r1, [r1, fp]
   26398:	cmp	r2, #6
   2639c:	ldrls	pc, [pc, r2, lsl #2]
   263a0:	b	265a4 <__assert_fail@plt+0x14c04>
   263a4:	muleq	r2, r8, r5
   263a8:	andeq	r6, r2, r4, lsr #11
   263ac:	andeq	r6, r2, r4, lsr r5
   263b0:	andeq	r6, r2, r4, lsr #11
   263b4:	andeq	r6, r2, r8, asr #7
   263b8:	andeq	r6, r2, r4, lsr #11
   263bc:	andeq	r6, r2, r0, asr #7
   263c0:	tst	r1, #128	; 0x80
   263c4:	bne	265a4 <__assert_fail@plt+0x14c04>
   263c8:	cmp	r1, #10
   263cc:	beq	266ec <__assert_fail@plt+0x14d4c>
   263d0:	cmp	r1, #0
   263d4:	bne	263e8 <__assert_fail@plt+0x14a48>
   263d8:	ldr	r2, [r7, #84]	; 0x54
   263dc:	ldr	r2, [r2, #128]	; 0x80
   263e0:	tst	r2, #128	; 0x80
   263e4:	bne	265a4 <__assert_fail@plt+0x14c04>
   263e8:	ldr	r8, [r3, #4]
   263ec:	ldr	r3, [pc, #848]	; 26744 <__assert_fail@plt+0x14da4>
   263f0:	tst	r8, r3
   263f4:	beq	26448 <__assert_fail@plt+0x14aa8>
   263f8:	ldr	r2, [r7, #88]	; 0x58
   263fc:	mov	r1, fp
   26400:	mov	r0, r7
   26404:	bl	20340 <__assert_fail@plt+0xe9a0>
   26408:	ldr	r3, [pc, #824]	; 26748 <__assert_fail@plt+0x14da8>
   2640c:	and	r8, r3, r8, lsr #8
   26410:	tst	r8, #4
   26414:	beq	266d8 <__assert_fail@plt+0x14d38>
   26418:	tst	r0, #1
   2641c:	beq	265a4 <__assert_fail@plt+0x14c04>
   26420:	tst	r8, #8
   26424:	bne	265a4 <__assert_fail@plt+0x14c04>
   26428:	tst	r8, #32
   2642c:	beq	26438 <__assert_fail@plt+0x14a98>
   26430:	tst	r0, #2
   26434:	beq	265a4 <__assert_fail@plt+0x14c04>
   26438:	tst	r8, #128	; 0x80
   2643c:	beq	26448 <__assert_fail@plt+0x14aa8>
   26440:	tst	r0, #8
   26444:	beq	265a4 <__assert_fail@plt+0x14c04>
   26448:	ldr	r3, [sl]
   2644c:	ldr	r2, [sp, #20]
   26450:	ldr	r3, [r3, r2]
   26454:	cmp	r3, #0
   26458:	beq	265a4 <__assert_fail@plt+0x14c04>
   2645c:	ldr	lr, [r3, #8]
   26460:	ldr	r2, [sp, #16]
   26464:	cmp	lr, #0
   26468:	ldr	r2, [r2, #12]
   2646c:	ble	265a4 <__assert_fail@plt+0x14c04>
   26470:	ldr	r0, [r2, r5, lsl #2]
   26474:	ldr	ip, [r3, #12]
   26478:	sub	lr, lr, #1
   2647c:	mov	r1, #0
   26480:	cmp	r1, lr
   26484:	bcs	264c0 <__assert_fail@plt+0x14b20>
   26488:	add	r2, r1, lr
   2648c:	lsr	r2, r2, #1
   26490:	ldr	r3, [ip, r2, lsl #2]
   26494:	cmp	r3, r0
   26498:	bge	264b0 <__assert_fail@plt+0x14b10>
   2649c:	b	266a8 <__assert_fail@plt+0x14d08>
   264a0:	ldr	lr, [ip, r3, lsl #2]
   264a4:	cmp	r0, lr
   264a8:	bgt	266b0 <__assert_fail@plt+0x14d10>
   264ac:	mov	r2, r3
   264b0:	add	r3, r2, r1
   264b4:	cmp	r2, r1
   264b8:	lsr	r3, r3, #1
   264bc:	bhi	264a0 <__assert_fail@plt+0x14b00>
   264c0:	ldr	r3, [ip, r1, lsl #2]
   264c4:	cmp	r0, r3
   264c8:	bne	265a4 <__assert_fail@plt+0x14c04>
   264cc:	ldr	r0, [sp, #44]	; 0x2c
   264d0:	ldr	r3, [sl, #20]
   264d4:	cmp	r3, #0
   264d8:	beq	26508 <__assert_fail@plt+0x14b68>
   264dc:	ldr	r3, [sp, #16]
   264e0:	add	r0, fp, r0
   264e4:	ldr	r2, [sp, #28]
   264e8:	ldr	r3, [r3, #12]
   264ec:	ldr	r1, [sp, #32]
   264f0:	ldr	r3, [r3, r5, lsl #2]
   264f4:	stm	sp, {r0, r5, fp}
   264f8:	mov	r0, r7
   264fc:	bl	241c8 <__assert_fail@plt+0x12828>
   26500:	cmp	r0, #0
   26504:	bne	265a4 <__assert_fail@plt+0x14c04>
   26508:	mov	r1, r5
   2650c:	add	r0, sp, #52	; 0x34
   26510:	bl	1fdc4 <__assert_fail@plt+0xe424>
   26514:	cmp	r0, #0
   26518:	bne	265a4 <__assert_fail@plt+0x14c04>
   2651c:	mov	r4, #12
   26520:	ldr	r0, [sp, #60]	; 0x3c
   26524:	bl	1f018 <__assert_fail@plt+0xd678>
   26528:	mov	r0, r4
   2652c:	add	sp, sp, #68	; 0x44
   26530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26534:	ldr	r2, [r3]
   26538:	asr	r0, r1, #5
   2653c:	and	r1, r1, #31
   26540:	ldr	r2, [r2, r0, lsl #2]
   26544:	lsr	r1, r2, r1
   26548:	tst	r1, #1
   2654c:	bne	263e8 <__assert_fail@plt+0x14a48>
   26550:	ldr	r3, [r6, #20]
   26554:	add	r4, r4, #1
   26558:	cmp	r4, r3
   2655c:	blt	265b4 <__assert_fail@plt+0x14c14>
   26560:	add	r3, sp, #52	; 0x34
   26564:	mov	r2, fp
   26568:	mov	r1, sl
   2656c:	mov	r0, r7
   26570:	bl	257d0 <__assert_fail@plt+0x13e30>
   26574:	cmp	r0, #0
   26578:	bne	26700 <__assert_fail@plt+0x14d60>
   2657c:	ldr	r3, [sp, #20]
   26580:	cmp	fp, #0
   26584:	sub	r3, r3, #4
   26588:	str	r3, [sp, #20]
   2658c:	bne	262fc <__assert_fail@plt+0x1495c>
   26590:	ldr	r4, [sp, #40]	; 0x28
   26594:	b	26520 <__assert_fail@plt+0x14b80>
   26598:	ldrb	r2, [r3]
   2659c:	cmp	r2, r1
   265a0:	beq	263e8 <__assert_fail@plt+0x14a48>
   265a4:	ldr	r3, [r6, #20]
   265a8:	add	r4, r4, #1
   265ac:	cmp	r4, r3
   265b0:	bge	26560 <__assert_fail@plt+0x14bc0>
   265b4:	ldr	r2, [r6, #24]
   265b8:	ldr	r3, [sp, #16]
   265bc:	ldr	r5, [r2, r4, lsl #2]
   265c0:	ldr	r3, [r3]
   265c4:	lsl	r8, r5, #3
   265c8:	add	r3, r3, r8
   265cc:	ldrb	r1, [r3, #6]
   265d0:	ldrb	r2, [r3, #4]
   265d4:	tst	r1, #16
   265d8:	beq	2638c <__assert_fail@plt+0x149ec>
   265dc:	ldr	r9, [r7, #84]	; 0x54
   265e0:	mov	r3, r7
   265e4:	add	r1, r9, #128	; 0x80
   265e8:	ldr	r0, [r9]
   265ec:	str	fp, [sp]
   265f0:	ldr	ip, [sl, #12]
   265f4:	mov	r2, r5
   265f8:	str	ip, [sp, #24]
   265fc:	bl	21e1c <__assert_fail@plt+0x1047c>
   26600:	cmp	r0, #0
   26604:	ble	266d0 <__assert_fail@plt+0x14d30>
   26608:	ldr	ip, [sp, #24]
   2660c:	add	r3, fp, r0
   26610:	cmp	ip, r3
   26614:	blt	264d0 <__assert_fail@plt+0x14b30>
   26618:	ldr	r2, [sl]
   2661c:	ldr	r3, [r2, r3, lsl #2]
   26620:	cmp	r3, #0
   26624:	beq	26694 <__assert_fail@plt+0x14cf4>
   26628:	ldr	ip, [r3, #8]
   2662c:	ldr	r2, [r9, #12]
   26630:	cmp	ip, #0
   26634:	ble	26694 <__assert_fail@plt+0x14cf4>
   26638:	ldr	lr, [r2, r5, lsl #2]
   2663c:	ldr	r9, [r3, #12]
   26640:	sub	ip, ip, #1
   26644:	mov	r1, #0
   26648:	cmp	r1, ip
   2664c:	bcs	26688 <__assert_fail@plt+0x14ce8>
   26650:	add	r2, r1, ip
   26654:	lsr	r2, r2, #1
   26658:	ldr	r3, [r9, r2, lsl #2]
   2665c:	cmp	r3, lr
   26660:	bge	26678 <__assert_fail@plt+0x14cd8>
   26664:	b	266bc <__assert_fail@plt+0x14d1c>
   26668:	ldr	ip, [r9, r3, lsl #2]
   2666c:	cmp	lr, ip
   26670:	bgt	266c4 <__assert_fail@plt+0x14d24>
   26674:	mov	r2, r3
   26678:	add	r3, r2, r1
   2667c:	cmp	r2, r1
   26680:	lsr	r3, r3, #1
   26684:	bhi	26668 <__assert_fail@plt+0x14cc8>
   26688:	ldr	r3, [r9, r1, lsl #2]
   2668c:	cmp	lr, r3
   26690:	beq	264d0 <__assert_fail@plt+0x14b30>
   26694:	ldr	r3, [sp, #16]
   26698:	ldr	r3, [r3]
   2669c:	add	r3, r3, r8
   266a0:	ldrb	r2, [r3, #4]
   266a4:	b	2638c <__assert_fail@plt+0x149ec>
   266a8:	mov	r3, r2
   266ac:	mov	r2, lr
   266b0:	add	r1, r3, #1
   266b4:	mov	lr, r2
   266b8:	b	26480 <__assert_fail@plt+0x14ae0>
   266bc:	mov	r3, r2
   266c0:	mov	r2, ip
   266c4:	add	r1, r3, #1
   266c8:	mov	ip, r2
   266cc:	b	26648 <__assert_fail@plt+0x14ca8>
   266d0:	beq	26694 <__assert_fail@plt+0x14cf4>
   266d4:	b	264d0 <__assert_fail@plt+0x14b30>
   266d8:	tst	r8, #8
   266dc:	beq	26428 <__assert_fail@plt+0x14a88>
   266e0:	tst	r0, #1
   266e4:	beq	26428 <__assert_fail@plt+0x14a88>
   266e8:	b	265a4 <__assert_fail@plt+0x14c04>
   266ec:	ldr	r2, [r7, #84]	; 0x54
   266f0:	ldr	r2, [r2, #128]	; 0x80
   266f4:	tst	r2, #64	; 0x40
   266f8:	bne	263e8 <__assert_fail@plt+0x14a48>
   266fc:	b	265a4 <__assert_fail@plt+0x14c04>
   26700:	mov	r4, r0
   26704:	b	26520 <__assert_fail@plt+0x14b80>
   26708:	mov	r4, #12
   2670c:	mov	r0, r4
   26710:	add	sp, sp, #68	; 0x44
   26714:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26718:	mov	r4, r3
   2671c:	b	26520 <__assert_fail@plt+0x14b80>
   26720:	ldr	r2, [sp, #20]
   26724:	mov	r1, #0
   26728:	bl	11814 <memset@plt>
   2672c:	ldr	r0, [sp, #60]	; 0x3c
   26730:	ldr	r4, [sp, #40]	; 0x28
   26734:	bl	1f018 <__assert_fail@plt+0xd678>
   26738:	mov	r0, r4
   2673c:	add	sp, sp, #68	; 0x44
   26740:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26744:	andeq	pc, r3, r0, lsl #30
   26748:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2674c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26750:	sub	sp, sp, #44	; 0x2c
   26754:	mov	r6, r0
   26758:	mov	fp, r1
   2675c:	mov	r9, #0
   26760:	mov	r1, #1
   26764:	mov	r0, #32
   26768:	mov	sl, r2
   2676c:	mov	r5, r3
   26770:	str	r9, [sp, #20]
   26774:	ldrb	r8, [sp, #80]	; 0x50
   26778:	bl	1ed9c <__assert_fail@plt+0xd3fc>
   2677c:	subs	r4, r0, #0
   26780:	beq	26ad8 <__assert_fail@plt+0x15138>
   26784:	mov	r1, #1
   26788:	mov	r0, #40	; 0x28
   2678c:	bl	1ed9c <__assert_fail@plt+0xd3fc>
   26790:	subs	r7, r0, #0
   26794:	beq	26af4 <__assert_fail@plt+0x15154>
   26798:	ldrb	r2, [r7, #16]
   2679c:	and	r3, r8, #1
   267a0:	mov	r0, fp
   267a4:	bic	r2, r2, #1
   267a8:	orr	r3, r3, r2
   267ac:	add	r2, sp, #20
   267b0:	strb	r3, [r7, #16]
   267b4:	mov	r1, r4
   267b8:	stm	sp, {r2, sl}
   267bc:	add	r3, r7, #36	; 0x24
   267c0:	str	r9, [sp, #8]
   267c4:	add	r2, r7, #12
   267c8:	bl	210fc <__assert_fail@plt+0xf75c>
   267cc:	subs	sl, r0, #0
   267d0:	bne	26b10 <__assert_fail@plt+0x15170>
   267d4:	ldrb	r3, [r5]
   267d8:	cmp	r3, #0
   267dc:	movne	ip, #1
   267e0:	beq	26804 <__assert_fail@plt+0x14e64>
   267e4:	asr	r1, r3, #5
   267e8:	and	r0, r3, #31
   267ec:	ldr	r2, [r4, r1, lsl #2]
   267f0:	ldrb	r3, [r5, #1]!
   267f4:	orr	r2, r2, ip, lsl r0
   267f8:	cmp	r3, #0
   267fc:	str	r2, [r4, r1, lsl #2]
   26800:	bne	267e4 <__assert_fail@plt+0x14e44>
   26804:	cmp	r8, #0
   26808:	bne	269d0 <__assert_fail@plt+0x15030>
   2680c:	ldr	r3, [r6, #92]	; 0x5c
   26810:	cmp	r3, #1
   26814:	ble	26898 <__assert_fail@plt+0x14ef8>
   26818:	ldr	r3, [r6, #60]	; 0x3c
   2681c:	ldm	r4, {r1, r2}
   26820:	ldr	r0, [r4, #8]
   26824:	ldr	ip, [r3]
   26828:	and	r1, r1, ip
   2682c:	str	r1, [r4]
   26830:	ldr	ip, [r3, #4]
   26834:	ldr	r1, [r4, #12]
   26838:	and	r2, r2, ip
   2683c:	str	r2, [r4, #4]
   26840:	ldr	ip, [r3, #8]
   26844:	ldr	r2, [r4, #16]
   26848:	and	r0, r0, ip
   2684c:	str	r0, [r4, #8]
   26850:	ldr	ip, [r3, #12]
   26854:	ldr	r0, [r4, #20]
   26858:	and	r1, r1, ip
   2685c:	str	r1, [r4, #12]
   26860:	ldr	ip, [r3, #16]
   26864:	ldr	r1, [r4, #24]
   26868:	and	r2, r2, ip
   2686c:	str	r2, [r4, #16]
   26870:	ldr	ip, [r3, #20]
   26874:	ldr	r2, [r4, #28]
   26878:	and	r0, r0, ip
   2687c:	str	r0, [r4, #20]
   26880:	ldr	r0, [r3, #24]
   26884:	and	r1, r1, r0
   26888:	str	r1, [r4, #24]
   2688c:	ldr	r3, [r3, #28]
   26890:	and	r3, r3, r2
   26894:	str	r3, [r4, #28]
   26898:	ldr	r3, [r6, #64]	; 0x40
   2689c:	add	r8, sp, #24
   268a0:	mov	r5, #0
   268a4:	cmp	r3, #31
   268a8:	str	r5, [r8, #4]
   268ac:	beq	26b4c <__assert_fail@plt+0x151ac>
   268b0:	lsl	ip, r3, #5
   268b4:	add	lr, r3, #1
   268b8:	ldr	r3, [r6, #56]	; 0x38
   268bc:	add	r9, ip, #4
   268c0:	mov	r2, #3
   268c4:	add	ip, r3, ip
   268c8:	str	r4, [sp, #24]
   268cc:	strb	r2, [sp, #28]
   268d0:	ldm	r8, {r0, r1}
   268d4:	add	sl, ip, #24
   268d8:	mov	r5, #0
   268dc:	str	lr, [r6, #64]	; 0x40
   268e0:	str	r5, [ip, #4]
   268e4:	str	r5, [ip, #8]
   268e8:	str	r5, [ip, #12]
   268ec:	stm	sl, {r0, r1}
   268f0:	ldrb	r2, [ip, #30]
   268f4:	mvn	r1, #0
   268f8:	adds	r9, r3, r9
   268fc:	and	r2, r2, #243	; 0xf3
   26900:	str	r5, [ip, #16]
   26904:	str	r5, [ip, #20]
   26908:	strb	r2, [ip, #30]
   2690c:	str	r1, [ip, #32]
   26910:	beq	26a58 <__assert_fail@plt+0x150b8>
   26914:	ldr	r2, [r6, #92]	; 0x5c
   26918:	cmp	r2, #1
   2691c:	ble	26aa4 <__assert_fail@plt+0x15104>
   26920:	ldrb	r2, [r6, #88]	; 0x58
   26924:	ldr	r1, [r6, #64]	; 0x40
   26928:	orr	r2, r2, #2
   2692c:	cmp	r1, #31
   26930:	strb	r2, [r6, #88]	; 0x58
   26934:	beq	26a2c <__assert_fail@plt+0x1508c>
   26938:	lsl	ip, r1, #5
   2693c:	add	r2, r1, #1
   26940:	add	r5, ip, #4
   26944:	mov	r1, #6
   26948:	add	ip, r3, ip
   2694c:	str	r7, [sp, #24]
   26950:	strb	r1, [sp, #28]
   26954:	ldm	r8, {r0, r1}
   26958:	add	r8, ip, #24
   2695c:	mov	lr, #0
   26960:	str	r2, [r6, #64]	; 0x40
   26964:	str	lr, [ip, #4]
   26968:	str	lr, [ip, #8]
   2696c:	str	lr, [ip, #12]
   26970:	stm	r8, {r0, r1}
   26974:	ldrb	r2, [ip, #30]
   26978:	mvn	r1, #0
   2697c:	adds	r3, r3, r5
   26980:	and	r2, r2, #243	; 0xf3
   26984:	str	lr, [ip, #16]
   26988:	str	lr, [ip, #20]
   2698c:	strb	r2, [ip, #30]
   26990:	str	r1, [ip, #32]
   26994:	beq	26a58 <__assert_fail@plt+0x150b8>
   26998:	add	ip, sp, #32
   2699c:	mov	r2, r9
   269a0:	str	ip, [sp]
   269a4:	mov	r4, #10
   269a8:	add	r1, r6, #64	; 0x40
   269ac:	add	r0, r6, #56	; 0x38
   269b0:	str	lr, [sp, #36]	; 0x24
   269b4:	str	lr, [sp, #32]
   269b8:	strb	r4, [sp, #36]	; 0x24
   269bc:	bl	1ff70 <__assert_fail@plt+0xe5d0>
   269c0:	mov	r9, r0
   269c4:	mov	r0, r9
   269c8:	add	sp, sp, #44	; 0x2c
   269cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   269d0:	ldm	r4, {r2, r3, lr}
   269d4:	ldr	ip, [r4, #12]
   269d8:	ldr	r0, [r4, #16]
   269dc:	mvn	r2, r2
   269e0:	mvn	r3, r3
   269e4:	ldr	r1, [r4, #20]
   269e8:	str	r2, [r4]
   269ec:	str	r3, [r4, #4]
   269f0:	ldr	r2, [r4, #24]
   269f4:	ldr	r3, [r4, #28]
   269f8:	mvn	lr, lr
   269fc:	mvn	ip, ip
   26a00:	mvn	r0, r0
   26a04:	mvn	r1, r1
   26a08:	mvn	r2, r2
   26a0c:	mvn	r3, r3
   26a10:	str	lr, [r4, #8]
   26a14:	str	ip, [r4, #12]
   26a18:	str	r0, [r4, #16]
   26a1c:	str	r1, [r4, #20]
   26a20:	str	r2, [r4, #24]
   26a24:	str	r3, [r4, #28]
   26a28:	b	2680c <__assert_fail@plt+0x14e6c>
   26a2c:	mov	r0, #996	; 0x3e4
   26a30:	bl	1f110 <__assert_fail@plt+0xd770>
   26a34:	subs	r3, r0, #0
   26a38:	beq	26a58 <__assert_fail@plt+0x150b8>
   26a3c:	ldr	r1, [r6, #56]	; 0x38
   26a40:	mov	ip, r5
   26a44:	mov	r2, #1
   26a48:	mov	r5, #4
   26a4c:	str	r1, [r3]
   26a50:	str	r3, [r6, #56]	; 0x38
   26a54:	b	26944 <__assert_fail@plt+0x14fa4>
   26a58:	mov	r0, r4
   26a5c:	bl	1f018 <__assert_fail@plt+0xd678>
   26a60:	ldr	r0, [r7]
   26a64:	bl	1f018 <__assert_fail@plt+0xd678>
   26a68:	ldr	r0, [r7, #4]
   26a6c:	bl	1f018 <__assert_fail@plt+0xd678>
   26a70:	ldr	r0, [r7, #8]
   26a74:	bl	1f018 <__assert_fail@plt+0xd678>
   26a78:	ldr	r0, [r7, #12]
   26a7c:	bl	1f018 <__assert_fail@plt+0xd678>
   26a80:	mov	r0, r7
   26a84:	bl	1f018 <__assert_fail@plt+0xd678>
   26a88:	ldr	r2, [sp, #84]	; 0x54
   26a8c:	mov	r9, #0
   26a90:	mov	r3, #12
   26a94:	mov	r0, r9
   26a98:	str	r3, [r2]
   26a9c:	add	sp, sp, #44	; 0x2c
   26aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26aa4:	ldr	r0, [r7]
   26aa8:	bl	1f018 <__assert_fail@plt+0xd678>
   26aac:	ldr	r0, [r7, #4]
   26ab0:	bl	1f018 <__assert_fail@plt+0xd678>
   26ab4:	ldr	r0, [r7, #8]
   26ab8:	bl	1f018 <__assert_fail@plt+0xd678>
   26abc:	ldr	r0, [r7, #12]
   26ac0:	bl	1f018 <__assert_fail@plt+0xd678>
   26ac4:	mov	r0, r7
   26ac8:	bl	1f018 <__assert_fail@plt+0xd678>
   26acc:	mov	r0, r9
   26ad0:	add	sp, sp, #44	; 0x2c
   26ad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26ad8:	ldr	r2, [sp, #84]	; 0x54
   26adc:	mov	r3, #12
   26ae0:	mov	r9, r4
   26ae4:	mov	r0, r9
   26ae8:	str	r3, [r2]
   26aec:	add	sp, sp, #44	; 0x2c
   26af0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26af4:	mov	r0, r4
   26af8:	bl	1f018 <__assert_fail@plt+0xd678>
   26afc:	ldr	r2, [sp, #84]	; 0x54
   26b00:	mov	r3, #12
   26b04:	mov	r9, r7
   26b08:	str	r3, [r2]
   26b0c:	b	269c4 <__assert_fail@plt+0x15024>
   26b10:	mov	r0, r4
   26b14:	bl	1f018 <__assert_fail@plt+0xd678>
   26b18:	ldr	r0, [r7]
   26b1c:	bl	1f018 <__assert_fail@plt+0xd678>
   26b20:	ldr	r0, [r7, #4]
   26b24:	bl	1f018 <__assert_fail@plt+0xd678>
   26b28:	ldr	r0, [r7, #8]
   26b2c:	bl	1f018 <__assert_fail@plt+0xd678>
   26b30:	ldr	r0, [r7, #12]
   26b34:	bl	1f018 <__assert_fail@plt+0xd678>
   26b38:	mov	r0, r7
   26b3c:	bl	1f018 <__assert_fail@plt+0xd678>
   26b40:	ldr	r3, [sp, #84]	; 0x54
   26b44:	str	sl, [r3]
   26b48:	b	269c4 <__assert_fail@plt+0x15024>
   26b4c:	mov	r0, #996	; 0x3e4
   26b50:	bl	1f110 <__assert_fail@plt+0xd770>
   26b54:	subs	r3, r0, #0
   26b58:	beq	26a58 <__assert_fail@plt+0x150b8>
   26b5c:	ldr	r2, [r6, #56]	; 0x38
   26b60:	mov	ip, r5
   26b64:	mov	lr, #1
   26b68:	mov	r9, #4
   26b6c:	str	r2, [r3]
   26b70:	str	r3, [r6, #56]	; 0x38
   26b74:	b	268c0 <__assert_fail@plt+0x14f20>
   26b78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26b7c:	sub	sp, sp, #172	; 0xac
   26b80:	mov	r4, r1
   26b84:	str	r2, [sp, #32]
   26b88:	ldrb	r2, [r2, #4]
   26b8c:	str	r3, [sp, #40]	; 0x28
   26b90:	str	r0, [sp, #44]	; 0x2c
   26b94:	sub	r3, r2, #1
   26b98:	ldr	sl, [r1]
   26b9c:	ldr	r6, [sp, #208]	; 0xd0
   26ba0:	cmp	r3, #35	; 0x23
   26ba4:	ldrls	pc, [pc, r3, lsl #2]
   26ba8:	b	27f14 <__assert_fail@plt+0x16574>
   26bac:	andeq	r7, r2, r0, lsl #21
   26bb0:	andeq	r6, r2, r4, lsr sp
   26bb4:	andeq	r7, r2, r4, lsl pc
   26bb8:	andeq	r7, r2, r8, ror #18
   26bbc:	andeq	r7, r2, r0, lsr #20
   26bc0:	andeq	r7, r2, r4, lsl pc
   26bc4:	andeq	r7, r2, r4, lsl pc
   26bc8:	andeq	r7, r2, r0, asr lr
   26bcc:	strdeq	r7, [r2], -r4
   26bd0:	andeq	r6, r2, r4, lsr sp
   26bd4:	andeq	r6, r2, r8, asr #24
   26bd8:	andeq	r7, r2, ip, ror #22
   26bdc:	andeq	r7, r2, r4, lsl pc
   26be0:	andeq	r7, r2, r4, lsl pc
   26be4:	andeq	r7, r2, r4, lsl pc
   26be8:	andeq	r7, r2, r4, lsl pc
   26bec:	andeq	r7, r2, r4, lsl pc
   26bf0:	andeq	r6, r2, r8, asr #24
   26bf4:	andeq	r6, r2, r8, asr #24
   26bf8:	andeq	r7, r2, ip, lsl #25
   26bfc:	andeq	r7, r2, r4, lsl pc
   26c00:	andeq	r7, r2, r4, lsl pc
   26c04:	andeq	r6, r2, ip, lsr ip
   26c08:	andeq	r6, r2, r4, ror #24
   26c0c:	andeq	r7, r2, r4, lsl pc
   26c10:	andeq	r7, r2, r4, lsl pc
   26c14:	andeq	r7, r2, r4, lsl pc
   26c18:	andeq	r7, r2, r4, lsl pc
   26c1c:	andeq	r7, r2, r4, lsl pc
   26c20:	andeq	r7, r2, r4, lsl pc
   26c24:	andeq	r7, r2, r4, lsl pc
   26c28:	andeq	r7, r2, r8, asr #19
   26c2c:	andeq	r7, r2, r8, asr #19
   26c30:	andeq	r7, r2, r4, asr sl
   26c34:	andeq	r7, r2, r4, asr sl
   26c38:	andeq	r7, r2, r0, lsr lr
   26c3c:	ldr	r3, [sp, #40]	; 0x28
   26c40:	tst	r3, #16777216	; 0x1000000
   26c44:	bne	27258 <__assert_fail@plt+0x158b8>
   26c48:	ldr	r3, [sp, #40]	; 0x28
   26c4c:	tst	r3, #32
   26c50:	bne	27258 <__assert_fail@plt+0x158b8>
   26c54:	tst	r3, #16
   26c58:	bne	28904 <__assert_fail@plt+0x16f64>
   26c5c:	cmp	r2, #9
   26c60:	beq	27ef4 <__assert_fail@plt+0x16554>
   26c64:	ldr	r2, [sp, #32]
   26c68:	mov	r3, #1
   26c6c:	add	r1, sl, #64	; 0x40
   26c70:	strb	r3, [r2, #4]
   26c74:	add	r0, sl, #56	; 0x38
   26c78:	bl	22a98 <__assert_fail@plt+0x110f8>
   26c7c:	subs	r3, r0, #0
   26c80:	str	r3, [sp, #36]	; 0x24
   26c84:	beq	27b54 <__assert_fail@plt+0x161b4>
   26c88:	ldr	r5, [sp, #40]	; 0x28
   26c8c:	ldr	r4, [sp, #44]	; 0x2c
   26c90:	ldr	r6, [sp, #32]
   26c94:	mov	r2, r5
   26c98:	mov	r1, r4
   26c9c:	mov	r0, r6
   26ca0:	bl	22130 <__assert_fail@plt+0x10790>
   26ca4:	ldr	r3, [r4, #40]	; 0x28
   26ca8:	mov	fp, #0
   26cac:	and	lr, r5, #2097152	; 0x200000
   26cb0:	and	ip, r5, #16777216	; 0x1000000
   26cb4:	ldrb	r2, [r6, #4]
   26cb8:	str	lr, [sp, #60]	; 0x3c
   26cbc:	str	ip, [sp, #52]	; 0x34
   26cc0:	add	r3, r3, r0
   26cc4:	str	r3, [r4, #40]	; 0x28
   26cc8:	cmp	r2, #23
   26ccc:	bls	26d48 <__assert_fail@plt+0x153a8>
   26cd0:	ldr	r0, [sp, #36]	; 0x24
   26cd4:	add	sp, sp, #172	; 0xac
   26cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26cdc:	ldr	r3, [sp, #212]	; 0xd4
   26ce0:	mov	r2, r8
   26ce4:	str	r3, [sp, #4]
   26ce8:	str	r6, [sp]
   26cec:	mov	r3, r9
   26cf0:	mov	r1, r4
   26cf4:	bl	28f80 <__assert_fail@plt+0x175e0>
   26cf8:	ldr	r3, [sp, #212]	; 0xd4
   26cfc:	ldr	r3, [r3]
   26d00:	cmp	r3, #0
   26d04:	mov	r2, r0
   26d08:	bne	26d34 <__assert_fail@plt+0x15394>
   26d0c:	ldr	r3, [sp, #32]
   26d10:	ldrb	r3, [r3, #4]
   26d14:	cmp	r3, #9
   26d18:	beq	27ea0 <__assert_fail@plt+0x16500>
   26d1c:	cmp	r0, #0
   26d20:	beq	26d28 <__assert_fail@plt+0x15388>
   26d24:	bl	22b44 <__assert_fail@plt+0x111a4>
   26d28:	ldr	r2, [sp, #212]	; 0xd4
   26d2c:	mov	r3, #8
   26d30:	str	r3, [r2]
   26d34:	mov	r3, #0
   26d38:	str	r3, [sp, #36]	; 0x24
   26d3c:	ldr	r0, [sp, #36]	; 0x24
   26d40:	add	sp, sp, #172	; 0xac
   26d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26d48:	ldr	r3, [pc, #3864]	; 27c68 <__assert_fail@plt+0x162c8>
   26d4c:	sub	r9, r2, #18
   26d50:	clz	r9, r9
   26d54:	mvn	r4, r3, lsr r2
   26d58:	ands	r4, r4, #1
   26d5c:	lsr	r9, r9, #5
   26d60:	bne	26cd0 <__assert_fail@plt+0x15330>
   26d64:	ldr	r3, [sp, #32]
   26d68:	cmp	r2, #23
   26d6c:	ldm	r3, {r0, r1}
   26d70:	ldr	r3, [sp, #44]	; 0x2c
   26d74:	ldr	r5, [r3, #40]	; 0x28
   26d78:	add	r3, sp, #104	; 0x68
   26d7c:	stm	r3, {r0, r1}
   26d80:	beq	27154 <__assert_fail@plt+0x157b4>
   26d84:	ldr	r4, [sp, #44]	; 0x2c
   26d88:	cmp	r2, #19
   26d8c:	moveq	r3, #1
   26d90:	mvnne	r3, #0
   26d94:	mov	r1, r4
   26d98:	ldr	r2, [sp, #40]	; 0x28
   26d9c:	ldr	r0, [sp, #32]
   26da0:	str	r3, [sp, #24]
   26da4:	bl	22130 <__assert_fail@plt+0x10790>
   26da8:	ldr	r3, [r4, #40]	; 0x28
   26dac:	ldr	r1, [sp, #36]	; 0x24
   26db0:	cmp	r1, #0
   26db4:	add	r0, r3, r0
   26db8:	str	r0, [r4, #40]	; 0x28
   26dbc:	beq	27210 <__assert_fail@plt+0x15870>
   26dc0:	cmp	r9, #0
   26dc4:	bgt	27388 <__assert_fail@plt+0x159e8>
   26dc8:	ldr	r5, [sp, #36]	; 0x24
   26dcc:	mov	r8, #0
   26dd0:	add	r3, sp, #136	; 0x88
   26dd4:	str	r3, [sp, #48]	; 0x30
   26dd8:	ldrb	r3, [r5, #24]
   26ddc:	cmp	r3, #17
   26de0:	beq	27278 <__assert_fail@plt+0x158d8>
   26de4:	ldr	r3, [sp, #48]	; 0x30
   26de8:	str	fp, [r3]
   26dec:	str	fp, [r3, #4]
   26df0:	ldr	r3, [sp, #24]
   26df4:	ldr	r1, [sl, #64]	; 0x40
   26df8:	cmn	r3, #1
   26dfc:	movne	r4, #10
   26e00:	moveq	r4, #11
   26e04:	cmp	r1, #31
   26e08:	beq	2769c <__assert_fail@plt+0x15cfc>
   26e0c:	lsl	r2, r1, #5
   26e10:	ldr	r3, [sl, #56]	; 0x38
   26e14:	add	r1, r1, #1
   26e18:	add	lr, r2, #4
   26e1c:	add	r2, r3, r2
   26e20:	str	r1, [sl, #64]	; 0x40
   26e24:	str	fp, [r2, #4]
   26e28:	str	r5, [r2, #8]
   26e2c:	str	fp, [r2, #12]
   26e30:	strb	r4, [sp, #140]	; 0x8c
   26e34:	ldr	r4, [sp, #48]	; 0x30
   26e38:	add	ip, r2, #24
   26e3c:	add	r3, r3, lr
   26e40:	ldm	r4, {r0, r1}
   26e44:	cmp	r3, #0
   26e48:	stm	ip, {r0, r1}
   26e4c:	ldrb	r1, [r2, #30]
   26e50:	mvn	r0, #0
   26e54:	str	fp, [r2, #16]
   26e58:	and	r1, r1, #243	; 0xf3
   26e5c:	str	fp, [r2, #20]
   26e60:	strb	r1, [r2, #30]
   26e64:	str	r0, [r2, #32]
   26e68:	str	r3, [r5]
   26e6c:	beq	270c8 <__assert_fail@plt+0x15728>
   26e70:	ldr	r1, [sp, #24]
   26e74:	add	r2, r9, #2
   26e78:	cmp	r2, r1
   26e7c:	str	r2, [sp, #20]
   26e80:	bgt	27330 <__assert_fail@plt+0x15990>
   26e84:	str	r8, [sp, #56]	; 0x38
   26e88:	mov	r9, r0
   26e8c:	mov	r6, r3
   26e90:	mov	r8, r4
   26e94:	mov	r4, r5
   26e98:	mov	r7, r8
   26e9c:	b	26ea8 <__assert_fail@plt+0x15508>
   26ea0:	mov	r4, r2
   26ea4:	add	r7, r6, #4
   26ea8:	ldr	r1, [sl, #64]	; 0x40
   26eac:	cmp	r1, #31
   26eb0:	beq	26f74 <__assert_fail@plt+0x155d4>
   26eb4:	lsl	r2, r1, #5
   26eb8:	ldr	ip, [sl, #56]	; 0x38
   26ebc:	add	r0, r1, #1
   26ec0:	add	lr, r2, #4
   26ec4:	add	r2, ip, r2
   26ec8:	add	r1, r4, #20
   26ecc:	str	r0, [sl, #64]	; 0x40
   26ed0:	str	fp, [r2, #4]
   26ed4:	str	fp, [r2, #8]
   26ed8:	str	fp, [r2, #12]
   26edc:	ldm	r1, {r0, r1}
   26ee0:	add	r5, r2, #24
   26ee4:	add	ip, ip, lr
   26ee8:	stm	r5, {r0, r1}
   26eec:	ldrb	r1, [r2, #30]
   26ef0:	cmp	ip, #0
   26ef4:	str	fp, [r2, #16]
   26ef8:	and	r1, r1, #243	; 0xf3
   26efc:	str	fp, [r2, #20]
   26f00:	str	r9, [r2, #32]
   26f04:	strb	r1, [r2, #30]
   26f08:	str	ip, [r7]
   26f0c:	beq	270bc <__assert_fail@plt+0x1571c>
   26f10:	str	r6, [r2, #4]
   26f14:	ldr	r6, [r7]
   26f18:	ldrb	r2, [r6, #26]
   26f1c:	orr	r2, r2, #4
   26f20:	strb	r2, [r6, #26]
   26f24:	ldr	r2, [r4, #4]
   26f28:	cmp	r2, #0
   26f2c:	bne	26ea0 <__assert_fail@plt+0x15500>
   26f30:	mov	r1, fp
   26f34:	b	26f50 <__assert_fail@plt+0x155b0>
   26f38:	ldr	r2, [r4]
   26f3c:	ldr	r6, [r6]
   26f40:	cmp	r2, #0
   26f44:	mov	r1, r4
   26f48:	beq	26fa8 <__assert_fail@plt+0x15608>
   26f4c:	mov	r4, r2
   26f50:	ldr	r2, [r4, #8]
   26f54:	cmp	r2, r1
   26f58:	cmpne	r2, #0
   26f5c:	beq	26f38 <__assert_fail@plt+0x15598>
   26f60:	ldr	r1, [sl, #64]	; 0x40
   26f64:	mov	r4, r2
   26f68:	cmp	r1, #31
   26f6c:	add	r7, r6, #8
   26f70:	bne	26eb4 <__assert_fail@plt+0x15514>
   26f74:	mov	r0, #996	; 0x3e4
   26f78:	str	r3, [sp, #28]
   26f7c:	bl	1f110 <__assert_fail@plt+0xd770>
   26f80:	ldr	r3, [sp, #28]
   26f84:	subs	ip, r0, #0
   26f88:	beq	276fc <__assert_fail@plt+0x15d5c>
   26f8c:	ldr	r1, [sl, #56]	; 0x38
   26f90:	mov	lr, #4
   26f94:	str	r1, [ip]
   26f98:	mov	r0, #1
   26f9c:	mov	r2, fp
   26fa0:	str	ip, [sl, #56]	; 0x38
   26fa4:	b	26ec4 <__assert_fail@plt+0x15524>
   26fa8:	ldr	r5, [sp, #136]	; 0x88
   26fac:	str	fp, [r8]
   26fb0:	str	fp, [r8, #4]
   26fb4:	ldr	r2, [sl, #64]	; 0x40
   26fb8:	cmp	r2, #31
   26fbc:	beq	270f4 <__assert_fail@plt+0x15754>
   26fc0:	lsl	r4, r2, #5
   26fc4:	ldr	ip, [sl, #56]	; 0x38
   26fc8:	add	r2, r2, #1
   26fcc:	add	r6, r4, #4
   26fd0:	add	r4, ip, r4
   26fd4:	str	r2, [sl, #64]	; 0x40
   26fd8:	mov	r2, #16
   26fdc:	str	fp, [r4, #4]
   26fe0:	str	r3, [r4, #8]
   26fe4:	str	r5, [r4, #12]
   26fe8:	strb	r2, [sp, #140]	; 0x8c
   26fec:	ldm	r8, {r0, r1}
   26ff0:	add	r2, r4, #24
   26ff4:	add	r6, ip, r6
   26ff8:	stm	r2, {r0, r1}
   26ffc:	ldrb	r2, [r4, #30]
   27000:	cmp	r5, #0
   27004:	str	fp, [r4, #16]
   27008:	and	r2, r2, #243	; 0xf3
   2700c:	str	fp, [r4, #20]
   27010:	str	r9, [r4, #32]
   27014:	strb	r2, [r4, #30]
   27018:	str	r6, [r3]
   2701c:	beq	270c8 <__assert_fail@plt+0x15728>
   27020:	cmp	r6, #0
   27024:	str	r6, [r5]
   27028:	beq	270c8 <__assert_fail@plt+0x15728>
   2702c:	str	fp, [r8]
   27030:	str	fp, [r8, #4]
   27034:	ldr	r1, [sl, #64]	; 0x40
   27038:	cmp	r1, #31
   2703c:	beq	27128 <__assert_fail@plt+0x15788>
   27040:	lsl	r2, r1, #5
   27044:	add	r3, r2, #4
   27048:	add	r1, r1, #1
   2704c:	add	r2, ip, r2
   27050:	mov	r0, #10
   27054:	str	r1, [sl, #64]	; 0x40
   27058:	str	fp, [r2, #4]
   2705c:	str	r6, [r2, #8]
   27060:	str	fp, [r2, #12]
   27064:	strb	r0, [sp, #140]	; 0x8c
   27068:	ldm	r8, {r0, r1}
   2706c:	add	lr, r2, #24
   27070:	add	r3, ip, r3
   27074:	stm	lr, {r0, r1}
   27078:	ldrb	r1, [r2, #30]
   2707c:	cmp	r3, #0
   27080:	str	fp, [r2, #16]
   27084:	and	r1, r1, #243	; 0xf3
   27088:	str	fp, [r2, #20]
   2708c:	str	r9, [r2, #32]
   27090:	strb	r1, [r2, #30]
   27094:	str	r3, [r4, #4]
   27098:	beq	270c8 <__assert_fail@plt+0x15728>
   2709c:	ldr	r2, [sp, #20]
   270a0:	ldr	r1, [sp, #24]
   270a4:	add	r2, r2, #1
   270a8:	cmp	r2, r1
   270ac:	str	r2, [sp, #20]
   270b0:	bgt	2732c <__assert_fail@plt+0x1598c>
   270b4:	ldr	r6, [r5]
   270b8:	b	26e94 <__assert_fail@plt+0x154f4>
   270bc:	mov	r5, ip
   270c0:	b	26fac <__assert_fail@plt+0x1560c>
   270c4:	str	lr, [r6]
   270c8:	ldr	r2, [sp, #212]	; 0xd4
   270cc:	mov	r3, #12
   270d0:	str	r3, [r2]
   270d4:	ldr	r3, [sp, #36]	; 0x24
   270d8:	cmp	r3, #0
   270dc:	beq	26d34 <__assert_fail@plt+0x15394>
   270e0:	mov	r0, r3
   270e4:	bl	22b44 <__assert_fail@plt+0x111a4>
   270e8:	mov	r3, #0
   270ec:	str	r3, [sp, #36]	; 0x24
   270f0:	b	26d3c <__assert_fail@plt+0x1539c>
   270f4:	mov	r0, #996	; 0x3e4
   270f8:	str	r3, [sp, #28]
   270fc:	bl	1f110 <__assert_fail@plt+0xd770>
   27100:	subs	ip, r0, #0
   27104:	beq	270c8 <__assert_fail@plt+0x15728>
   27108:	ldr	r1, [sl, #56]	; 0x38
   2710c:	mov	r6, #4
   27110:	str	r1, [ip]
   27114:	mov	r2, #1
   27118:	mov	r4, fp
   2711c:	str	ip, [sl, #56]	; 0x38
   27120:	ldr	r3, [sp, #28]
   27124:	b	26fd0 <__assert_fail@plt+0x15630>
   27128:	mov	r0, #996	; 0x3e4
   2712c:	bl	1f110 <__assert_fail@plt+0xd770>
   27130:	subs	ip, r0, #0
   27134:	beq	270c8 <__assert_fail@plt+0x15728>
   27138:	ldr	r0, [sl, #56]	; 0x38
   2713c:	mov	r1, #1
   27140:	str	r0, [ip]
   27144:	mov	r3, #4
   27148:	mov	r2, fp
   2714c:	str	ip, [sl, #56]	; 0x38
   27150:	b	2704c <__assert_fail@plt+0x156ac>
   27154:	str	r4, [sp, #20]
   27158:	ldr	r8, [sp, #44]	; 0x2c
   2715c:	ldr	r4, [sp, #32]
   27160:	mvn	r9, #0
   27164:	mov	r7, #32768	; 0x8000
   27168:	mvn	r6, #1
   2716c:	mov	r1, r8
   27170:	ldr	r2, [sp, #40]	; 0x28
   27174:	mov	r0, r4
   27178:	bl	22130 <__assert_fail@plt+0x10790>
   2717c:	ldrb	ip, [r4, #4]
   27180:	ldr	r2, [r8, #40]	; 0x28
   27184:	cmn	r9, #2
   27188:	movne	r1, #0
   2718c:	moveq	r1, #1
   27190:	cmp	ip, #2
   27194:	add	r0, r2, r0
   27198:	str	r0, [r8, #40]	; 0x28
   2719c:	ldrb	r2, [r4]
   271a0:	beq	272f4 <__assert_fail@plt+0x15954>
   271a4:	cmp	ip, #24
   271a8:	beq	27714 <__assert_fail@plt+0x15d74>
   271ac:	cmp	r2, #44	; 0x2c
   271b0:	beq	27834 <__assert_fail@plt+0x15e94>
   271b4:	cmp	ip, #1
   271b8:	beq	271c4 <__assert_fail@plt+0x15824>
   271bc:	mov	r9, r6
   271c0:	b	2716c <__assert_fail@plt+0x157cc>
   271c4:	sub	r0, r2, #48	; 0x30
   271c8:	uxtb	r1, r0
   271cc:	cmp	r1, #9
   271d0:	movhi	r1, #0
   271d4:	movls	r1, #1
   271d8:	cmn	r9, #2
   271dc:	moveq	r1, #0
   271e0:	cmp	r1, #0
   271e4:	beq	271bc <__assert_fail@plt+0x1581c>
   271e8:	cmn	r9, #1
   271ec:	moveq	r9, r0
   271f0:	beq	2716c <__assert_fail@plt+0x157cc>
   271f4:	add	r3, r9, r9, lsl #2
   271f8:	add	r3, r2, r3, lsl #1
   271fc:	ldr	r2, [pc, #2664]	; 27c6c <__assert_fail@plt+0x162cc>
   27200:	cmp	r3, r2
   27204:	suble	r9, r3, #48	; 0x30
   27208:	movgt	r9, r7
   2720c:	b	2716c <__assert_fail@plt+0x157cc>
   27210:	ldr	r3, [sp, #212]	; 0xd4
   27214:	ldr	r3, [r3]
   27218:	cmp	r3, #0
   2721c:	bne	270d4 <__assert_fail@plt+0x15734>
   27220:	str	fp, [sp, #36]	; 0x24
   27224:	ldr	r3, [sp, #52]	; 0x34
   27228:	cmp	r3, #0
   2722c:	ldr	r3, [sp, #32]
   27230:	ldrb	r2, [r3, #4]
   27234:	beq	26cc8 <__assert_fail@plt+0x15328>
   27238:	cmp	r2, #23
   2723c:	cmpne	r2, #11
   27240:	bne	26cc8 <__assert_fail@plt+0x15328>
   27244:	ldr	r3, [sp, #36]	; 0x24
   27248:	cmp	r3, #0
   2724c:	beq	27258 <__assert_fail@plt+0x158b8>
   27250:	mov	r0, r3
   27254:	bl	22b44 <__assert_fail@plt+0x111a4>
   27258:	ldr	r2, [sp, #212]	; 0xd4
   2725c:	mov	r3, #13
   27260:	str	r3, [r2]
   27264:	mov	r3, #0
   27268:	str	r3, [sp, #36]	; 0x24
   2726c:	ldr	r0, [sp, #36]	; 0x24
   27270:	add	sp, sp, #172	; 0xac
   27274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27278:	ldr	r1, [r5, #20]
   2727c:	mov	r3, r5
   27280:	b	27288 <__assert_fail@plt+0x158e8>
   27284:	mov	r3, r2
   27288:	ldr	r2, [r3, #4]
   2728c:	cmp	r2, #0
   27290:	bne	27284 <__assert_fail@plt+0x158e4>
   27294:	ldr	r2, [r3, #8]
   27298:	cmp	r2, #0
   2729c:	bne	27284 <__assert_fail@plt+0x158e4>
   272a0:	b	272c4 <__assert_fail@plt+0x15924>
   272a4:	ldr	r2, [r0, #8]
   272a8:	cmp	r3, r2
   272ac:	cmpne	r2, #0
   272b0:	moveq	r3, #1
   272b4:	movne	r3, #0
   272b8:	cmp	r3, #0
   272bc:	mov	r3, r0
   272c0:	beq	27284 <__assert_fail@plt+0x158e4>
   272c4:	ldrb	r2, [r3, #24]
   272c8:	cmp	r2, #17
   272cc:	bne	272e4 <__assert_fail@plt+0x15944>
   272d0:	ldr	r2, [r3, #20]
   272d4:	cmp	r1, r2
   272d8:	ldrbeq	r2, [r3, #26]
   272dc:	orreq	r2, r2, #8
   272e0:	strbeq	r2, [r3, #26]
   272e4:	ldr	r0, [r3]
   272e8:	cmp	r0, #0
   272ec:	bne	272a4 <__assert_fail@plt+0x15904>
   272f0:	b	26de4 <__assert_fail@plt+0x15444>
   272f4:	mov	r3, ip
   272f8:	ldr	r2, [sp, #60]	; 0x3c
   272fc:	cmp	r2, #0
   27300:	beq	27fcc <__assert_fail@plt+0x1662c>
   27304:	add	r3, sp, #104	; 0x68
   27308:	ldr	r2, [sp, #32]
   2730c:	ldm	r3, {r0, r1}
   27310:	ldr	r3, [sp, #44]	; 0x2c
   27314:	str	r5, [r3, #40]	; 0x28
   27318:	mov	r3, #1
   2731c:	stm	r2, {r0, r1}
   27320:	ldr	r0, [sp, #36]	; 0x24
   27324:	strb	r3, [r2, #4]
   27328:	b	27360 <__assert_fail@plt+0x159c0>
   2732c:	ldr	r8, [sp, #56]	; 0x38
   27330:	cmp	r8, #0
   27334:	beq	2770c <__assert_fail@plt+0x15d6c>
   27338:	ldr	r0, [sp, #48]	; 0x30
   2733c:	mov	ip, #16
   27340:	str	r0, [sp]
   27344:	mov	r2, r8
   27348:	str	fp, [r0, #4]
   2734c:	str	fp, [r0]
   27350:	add	r1, sl, #64	; 0x40
   27354:	add	r0, sl, #56	; 0x38
   27358:	strb	ip, [sp, #140]	; 0x8c
   2735c:	bl	1ff70 <__assert_fail@plt+0xe5d0>
   27360:	ldr	r3, [sp, #212]	; 0xd4
   27364:	ldr	r3, [r3]
   27368:	adds	r3, r3, #0
   2736c:	movne	r3, #1
   27370:	cmp	r0, #0
   27374:	movne	r3, #0
   27378:	cmp	r3, #0
   2737c:	bne	270d4 <__assert_fail@plt+0x15734>
   27380:	str	r0, [sp, #36]	; 0x24
   27384:	b	27224 <__assert_fail@plt+0x15884>
   27388:	cmp	r9, #1
   2738c:	beq	27f20 <__assert_fail@plt+0x16580>
   27390:	ldr	r3, [sp, #36]	; 0x24
   27394:	str	r9, [sp, #48]	; 0x30
   27398:	mov	r2, r3
   2739c:	ldr	r8, [r3]
   273a0:	mov	r5, r3
   273a4:	mov	r3, #2
   273a8:	str	r3, [sp, #20]
   273ac:	add	r3, sp, #136	; 0x88
   273b0:	mvn	r7, #0
   273b4:	mov	r9, r3
   273b8:	mov	r4, r5
   273bc:	mov	r6, r9
   273c0:	b	273cc <__assert_fail@plt+0x15a2c>
   273c4:	mov	r4, r3
   273c8:	add	r6, r8, #4
   273cc:	ldr	r1, [sl, #64]	; 0x40
   273d0:	cmp	r1, #31
   273d4:	beq	27498 <__assert_fail@plt+0x15af8>
   273d8:	lsl	r3, r1, #5
   273dc:	ldr	ip, [sl, #56]	; 0x38
   273e0:	add	r0, r1, #1
   273e4:	add	lr, r3, #4
   273e8:	add	r3, ip, r3
   273ec:	add	r1, r4, #20
   273f0:	str	r0, [sl, #64]	; 0x40
   273f4:	str	fp, [r3, #4]
   273f8:	str	fp, [r3, #8]
   273fc:	str	fp, [r3, #12]
   27400:	ldm	r1, {r0, r1}
   27404:	add	r5, r3, #24
   27408:	add	ip, ip, lr
   2740c:	stm	r5, {r0, r1}
   27410:	ldrb	r1, [r3, #30]
   27414:	cmp	ip, #0
   27418:	str	fp, [r3, #16]
   2741c:	and	r1, r1, #243	; 0xf3
   27420:	str	fp, [r3, #20]
   27424:	str	r7, [r3, #32]
   27428:	strb	r1, [r3, #30]
   2742c:	str	ip, [r6]
   27430:	beq	27694 <__assert_fail@plt+0x15cf4>
   27434:	str	r8, [r3, #4]
   27438:	ldr	r8, [r6]
   2743c:	ldrb	r3, [r8, #26]
   27440:	orr	r3, r3, #4
   27444:	strb	r3, [r8, #26]
   27448:	ldr	r3, [r4, #4]
   2744c:	cmp	r3, #0
   27450:	bne	273c4 <__assert_fail@plt+0x15a24>
   27454:	mov	r1, fp
   27458:	b	27474 <__assert_fail@plt+0x15ad4>
   2745c:	ldr	r3, [r4]
   27460:	ldr	r8, [r8]
   27464:	cmp	r3, #0
   27468:	mov	r1, r4
   2746c:	beq	274cc <__assert_fail@plt+0x15b2c>
   27470:	mov	r4, r3
   27474:	ldr	r3, [r4, #8]
   27478:	cmp	r3, #0
   2747c:	cmpne	r3, r1
   27480:	beq	2745c <__assert_fail@plt+0x15abc>
   27484:	ldr	r1, [sl, #64]	; 0x40
   27488:	mov	r4, r3
   2748c:	cmp	r1, #31
   27490:	add	r6, r8, #8
   27494:	bne	273d8 <__assert_fail@plt+0x15a38>
   27498:	mov	r0, #996	; 0x3e4
   2749c:	str	r2, [sp, #28]
   274a0:	bl	1f110 <__assert_fail@plt+0xd770>
   274a4:	ldr	r2, [sp, #28]
   274a8:	subs	ip, r0, #0
   274ac:	beq	27f14 <__assert_fail@plt+0x16574>
   274b0:	ldr	r1, [sl, #56]	; 0x38
   274b4:	mov	lr, #4
   274b8:	str	r1, [ip]
   274bc:	mov	r0, #1
   274c0:	mov	r3, fp
   274c4:	str	ip, [sl, #56]	; 0x38
   274c8:	b	273e8 <__assert_fail@plt+0x15a48>
   274cc:	ldr	r5, [sp, #136]	; 0x88
   274d0:	str	fp, [r9]
   274d4:	str	fp, [r9, #4]
   274d8:	ldr	r1, [sl, #64]	; 0x40
   274dc:	cmp	r1, #31
   274e0:	beq	276c8 <__assert_fail@plt+0x15d28>
   274e4:	lsl	r3, r1, #5
   274e8:	ldr	r8, [sl, #56]	; 0x38
   274ec:	add	r1, r1, #1
   274f0:	add	lr, r3, #4
   274f4:	add	r3, r8, r3
   274f8:	str	r1, [sl, #64]	; 0x40
   274fc:	mov	r1, #16
   27500:	str	fp, [r3, #4]
   27504:	str	r2, [r3, #8]
   27508:	str	r5, [r3, #12]
   2750c:	strb	r1, [sp, #140]	; 0x8c
   27510:	ldm	r9, {r0, r1}
   27514:	add	ip, r3, #24
   27518:	add	r8, r8, lr
   2751c:	stm	ip, {r0, r1}
   27520:	ldrb	r1, [r3, #30]
   27524:	cmp	r5, #0
   27528:	str	fp, [r3, #16]
   2752c:	and	r1, r1, #243	; 0xf3
   27530:	str	fp, [r3, #20]
   27534:	str	r7, [r3, #32]
   27538:	strb	r1, [r3, #30]
   2753c:	str	r8, [r2]
   27540:	beq	270c8 <__assert_fail@plt+0x15728>
   27544:	cmp	r8, #0
   27548:	str	r8, [r5]
   2754c:	beq	270c8 <__assert_fail@plt+0x15728>
   27550:	ldr	r3, [sp, #20]
   27554:	ldr	r2, [sp, #48]	; 0x30
   27558:	add	r3, r3, #1
   2755c:	cmp	r3, r2
   27560:	str	r3, [sp, #20]
   27564:	mov	r2, r8
   27568:	ble	273b8 <__assert_fail@plt+0x15a18>
   2756c:	ldr	r9, [sp, #48]	; 0x30
   27570:	ldr	r3, [sp, #24]
   27574:	cmp	r9, r3
   27578:	beq	27708 <__assert_fail@plt+0x15d68>
   2757c:	add	r3, sp, #136	; 0x88
   27580:	str	r3, [sp, #48]	; 0x30
   27584:	ldr	r4, [r5]
   27588:	mov	r6, r3
   2758c:	mvn	r7, #0
   27590:	b	2759c <__assert_fail@plt+0x15bfc>
   27594:	mov	r5, r3
   27598:	add	r6, r4, #4
   2759c:	ldr	r2, [sl, #64]	; 0x40
   275a0:	cmp	r2, #31
   275a4:	beq	27668 <__assert_fail@plt+0x15cc8>
   275a8:	lsl	r3, r2, #5
   275ac:	ldr	lr, [sl, #56]	; 0x38
   275b0:	add	r1, r2, #1
   275b4:	add	ip, r3, #4
   275b8:	add	r3, lr, r3
   275bc:	add	r2, r5, #20
   275c0:	str	r1, [sl, #64]	; 0x40
   275c4:	str	fp, [r3, #4]
   275c8:	str	fp, [r3, #8]
   275cc:	str	fp, [r3, #12]
   275d0:	ldm	r2, {r0, r1}
   275d4:	add	r2, r3, #24
   275d8:	add	ip, lr, ip
   275dc:	stm	r2, {r0, r1}
   275e0:	ldrb	r2, [r3, #30]
   275e4:	cmp	ip, #0
   275e8:	str	fp, [r3, #16]
   275ec:	and	r2, r2, #243	; 0xf3
   275f0:	str	fp, [r3, #20]
   275f4:	str	r7, [r3, #32]
   275f8:	strb	r2, [r3, #30]
   275fc:	str	ip, [r6]
   27600:	beq	270c8 <__assert_fail@plt+0x15728>
   27604:	str	r4, [r3, #4]
   27608:	ldr	r4, [r6]
   2760c:	ldrb	r3, [r4, #26]
   27610:	orr	r3, r3, #4
   27614:	strb	r3, [r4, #26]
   27618:	ldr	r3, [r5, #4]
   2761c:	cmp	r3, #0
   27620:	bne	27594 <__assert_fail@plt+0x15bf4>
   27624:	mov	r2, fp
   27628:	b	27644 <__assert_fail@plt+0x15ca4>
   2762c:	ldr	r3, [r5]
   27630:	ldr	r4, [r4]
   27634:	cmp	r3, #0
   27638:	mov	r2, r5
   2763c:	beq	27958 <__assert_fail@plt+0x15fb8>
   27640:	mov	r5, r3
   27644:	ldr	r3, [r5, #8]
   27648:	cmp	r3, r2
   2764c:	cmpne	r3, #0
   27650:	beq	2762c <__assert_fail@plt+0x15c8c>
   27654:	ldr	r2, [sl, #64]	; 0x40
   27658:	mov	r5, r3
   2765c:	cmp	r2, #31
   27660:	add	r6, r4, #8
   27664:	bne	275a8 <__assert_fail@plt+0x15c08>
   27668:	mov	r0, #996	; 0x3e4
   2766c:	bl	1f110 <__assert_fail@plt+0xd770>
   27670:	subs	lr, r0, #0
   27674:	beq	270c4 <__assert_fail@plt+0x15724>
   27678:	ldr	r2, [sl, #56]	; 0x38
   2767c:	mov	r1, #1
   27680:	str	r2, [lr]
   27684:	mov	ip, #4
   27688:	mov	r3, fp
   2768c:	str	lr, [sl, #56]	; 0x38
   27690:	b	275b8 <__assert_fail@plt+0x15c18>
   27694:	mov	r5, ip
   27698:	b	274d0 <__assert_fail@plt+0x15b30>
   2769c:	mov	r0, #996	; 0x3e4
   276a0:	bl	1f110 <__assert_fail@plt+0xd770>
   276a4:	subs	r3, r0, #0
   276a8:	beq	270c8 <__assert_fail@plt+0x15728>
   276ac:	ldr	r0, [sl, #56]	; 0x38
   276b0:	mov	lr, #4
   276b4:	str	r0, [r3]
   276b8:	mov	r1, #1
   276bc:	mov	r2, fp
   276c0:	str	r3, [sl, #56]	; 0x38
   276c4:	b	26e1c <__assert_fail@plt+0x1547c>
   276c8:	mov	r0, #996	; 0x3e4
   276cc:	str	r2, [sp, #28]
   276d0:	bl	1f110 <__assert_fail@plt+0xd770>
   276d4:	subs	r8, r0, #0
   276d8:	beq	270c8 <__assert_fail@plt+0x15728>
   276dc:	ldr	r0, [sl, #56]	; 0x38
   276e0:	mov	lr, #4
   276e4:	str	r0, [r8]
   276e8:	mov	r1, #1
   276ec:	mov	r3, fp
   276f0:	str	r8, [sl, #56]	; 0x38
   276f4:	ldr	r2, [sp, #28]
   276f8:	b	274f4 <__assert_fail@plt+0x15b54>
   276fc:	str	ip, [r7]
   27700:	mov	r5, fp
   27704:	b	26fac <__assert_fail@plt+0x1560c>
   27708:	mov	r3, r8
   2770c:	str	r3, [sp, #36]	; 0x24
   27710:	b	27224 <__assert_fail@plt+0x15884>
   27714:	cmn	r9, #1
   27718:	beq	27860 <__assert_fail@plt+0x15ec0>
   2771c:	cmn	r9, #2
   27720:	strne	r9, [sp, #24]
   27724:	beq	27854 <__assert_fail@plt+0x15eb4>
   27728:	ldr	r3, [sp, #24]
   2772c:	cmn	r3, #1
   27730:	beq	27870 <__assert_fail@plt+0x15ed0>
   27734:	ldr	r2, [pc, #1332]	; 27c70 <__assert_fail@plt+0x162d0>
   27738:	cmp	r3, r2
   2773c:	movle	r3, #0
   27740:	movgt	r3, #1
   27744:	cmp	r3, #0
   27748:	bne	27888 <__assert_fail@plt+0x15ee8>
   2774c:	ldr	r4, [sp, #44]	; 0x2c
   27750:	ldr	r2, [sp, #40]	; 0x28
   27754:	mov	r1, r4
   27758:	ldr	r0, [sp, #32]
   2775c:	bl	22130 <__assert_fail@plt+0x10790>
   27760:	ldr	r3, [r4, #40]	; 0x28
   27764:	mov	r2, r4
   27768:	ldr	r4, [sp, #36]	; 0x24
   2776c:	cmp	r4, #0
   27770:	add	r3, r3, r0
   27774:	str	r3, [r2, #40]	; 0x28
   27778:	beq	27210 <__assert_fail@plt+0x15870>
   2777c:	ldr	r3, [sp, #24]
   27780:	orrs	r3, r9, r3
   27784:	beq	27790 <__assert_fail@plt+0x15df0>
   27788:	b	26dc0 <__assert_fail@plt+0x15420>
   2778c:	mov	r4, r3
   27790:	ldr	r3, [r4, #4]
   27794:	cmp	r3, #0
   27798:	bne	2778c <__assert_fail@plt+0x15dec>
   2779c:	ldr	r3, [r4, #8]
   277a0:	cmp	r3, #0
   277a4:	bne	2778c <__assert_fail@plt+0x15dec>
   277a8:	b	277e0 <__assert_fail@plt+0x15e40>
   277ac:	ldr	r0, [r4, #20]
   277b0:	bl	1f018 <__assert_fail@plt+0xd678>
   277b4:	ldr	r2, [r4]
   277b8:	cmp	r2, #0
   277bc:	beq	27210 <__assert_fail@plt+0x15870>
   277c0:	ldr	r3, [r2, #8]
   277c4:	cmp	r3, #0
   277c8:	cmpne	r4, r3
   277cc:	moveq	r4, #1
   277d0:	movne	r4, #0
   277d4:	cmp	r4, #0
   277d8:	mov	r4, r2
   277dc:	beq	2778c <__assert_fail@plt+0x15dec>
   277e0:	ldr	r3, [r4, #24]
   277e4:	bic	r3, r3, #-16777216	; 0xff000000
   277e8:	bic	r3, r3, #16449536	; 0xfb0000
   277ec:	bic	r3, r3, #65280	; 0xff00
   277f0:	cmp	r3, #6
   277f4:	beq	27804 <__assert_fail@plt+0x15e64>
   277f8:	cmp	r3, #3
   277fc:	bne	277b4 <__assert_fail@plt+0x15e14>
   27800:	b	277ac <__assert_fail@plt+0x15e0c>
   27804:	ldr	r5, [r4, #20]
   27808:	ldr	r0, [r5]
   2780c:	bl	1f018 <__assert_fail@plt+0xd678>
   27810:	ldr	r0, [r5, #4]
   27814:	bl	1f018 <__assert_fail@plt+0xd678>
   27818:	ldr	r0, [r5, #8]
   2781c:	bl	1f018 <__assert_fail@plt+0xd678>
   27820:	ldr	r0, [r5, #12]
   27824:	bl	1f018 <__assert_fail@plt+0xd678>
   27828:	mov	r0, r5
   2782c:	bl	1f018 <__assert_fail@plt+0xd678>
   27830:	b	277b4 <__assert_fail@plt+0x15e14>
   27834:	cmn	r9, #1
   27838:	ldr	r4, [sp, #20]
   2783c:	beq	27898 <__assert_fail@plt+0x15ef8>
   27840:	cmn	r9, #2
   27844:	beq	27854 <__assert_fail@plt+0x15eb4>
   27848:	cmp	ip, #1
   2784c:	moveq	r4, r1
   27850:	beq	278a4 <__assert_fail@plt+0x15f04>
   27854:	ldr	r3, [sp, #60]	; 0x3c
   27858:	cmp	r3, #0
   2785c:	bne	27304 <__assert_fail@plt+0x15964>
   27860:	ldr	r2, [sp, #212]	; 0xd4
   27864:	mov	r3, #10
   27868:	str	r3, [r2]
   2786c:	b	270d4 <__assert_fail@plt+0x15734>
   27870:	add	r3, r3, #32768	; 0x8000
   27874:	cmp	r9, r3
   27878:	movle	r3, #0
   2787c:	movgt	r3, #1
   27880:	cmp	r3, #0
   27884:	beq	2774c <__assert_fail@plt+0x15dac>
   27888:	ldr	r2, [sp, #212]	; 0xd4
   2788c:	mov	r3, #15
   27890:	str	r3, [r2]
   27894:	b	270d4 <__assert_fail@plt+0x15734>
   27898:	cmp	ip, #1
   2789c:	bne	27860 <__assert_fail@plt+0x15ec0>
   278a0:	mov	r9, fp
   278a4:	mvn	r3, #0
   278a8:	str	r5, [sp, #20]
   278ac:	ldr	r0, [sp, #32]
   278b0:	mov	r5, r4
   278b4:	ldr	r4, [sp, #44]	; 0x2c
   278b8:	mov	r7, #32768	; 0x8000
   278bc:	mvn	r6, #1
   278c0:	mov	r8, r3
   278c4:	ldr	r2, [sp, #40]	; 0x28
   278c8:	mov	r1, r4
   278cc:	bl	22130 <__assert_fail@plt+0x10790>
   278d0:	ldr	r1, [sp, #32]
   278d4:	ldr	r2, [r4, #40]	; 0x28
   278d8:	ldrb	r3, [r1, #4]
   278dc:	cmp	r3, #2
   278e0:	add	r2, r2, r0
   278e4:	str	r2, [r4, #40]	; 0x28
   278e8:	beq	27f2c <__assert_fail@plt+0x1658c>
   278ec:	ldrb	r2, [r1]
   278f0:	cmp	r2, #44	; 0x2c
   278f4:	cmpne	r3, #24
   278f8:	beq	27f80 <__assert_fail@plt+0x165e0>
   278fc:	cmp	r3, #1
   27900:	movne	r8, r6
   27904:	movne	r0, r1
   27908:	bne	278c4 <__assert_fail@plt+0x15f24>
   2790c:	sub	r1, r2, #48	; 0x30
   27910:	uxtb	r3, r1
   27914:	cmp	r3, #9
   27918:	movhi	r3, #0
   2791c:	movls	r3, #1
   27920:	cmn	r8, #2
   27924:	moveq	r3, #0
   27928:	cmp	r3, #0
   2792c:	beq	28974 <__assert_fail@plt+0x16fd4>
   27930:	cmn	r8, #1
   27934:	beq	28968 <__assert_fail@plt+0x16fc8>
   27938:	add	r8, r8, r8, lsl #2
   2793c:	ldr	r3, [pc, #808]	; 27c6c <__assert_fail@plt+0x162cc>
   27940:	add	r2, r2, r8, lsl #1
   27944:	cmp	r2, r3
   27948:	bgt	27fe4 <__assert_fail@plt+0x16644>
   2794c:	sub	r8, r2, #48	; 0x30
   27950:	ldr	r0, [sp, #32]
   27954:	b	278c4 <__assert_fail@plt+0x15f24>
   27958:	ldr	r5, [sp, #136]	; 0x88
   2795c:	cmp	r5, #0
   27960:	bne	26dd8 <__assert_fail@plt+0x15438>
   27964:	b	270c8 <__assert_fail@plt+0x15728>
   27968:	ldr	r3, [sp, #32]
   2796c:	ldr	r2, [sl, #84]	; 0x54
   27970:	ldr	r1, [r3]
   27974:	mov	r3, #1
   27978:	lsl	r3, r3, r1
   2797c:	ands	r2, r3, r2
   27980:	beq	28954 <__assert_fail@plt+0x16fb4>
   27984:	ldr	r1, [sl, #80]	; 0x50
   27988:	ldr	r2, [sp, #32]
   2798c:	orr	r3, r1, r3
   27990:	str	r3, [sl, #80]	; 0x50
   27994:	add	r1, sl, #64	; 0x40
   27998:	add	r0, sl, #56	; 0x38
   2799c:	bl	22a98 <__assert_fail@plt+0x110f8>
   279a0:	subs	r3, r0, #0
   279a4:	str	r3, [sp, #36]	; 0x24
   279a8:	beq	27b54 <__assert_fail@plt+0x161b4>
   279ac:	ldrb	r2, [sl, #88]	; 0x58
   279b0:	ldr	r3, [sl, #76]	; 0x4c
   279b4:	orr	r2, r2, #2
   279b8:	add	r3, r3, #1
   279bc:	strb	r2, [sl, #88]	; 0x58
   279c0:	str	r3, [sl, #76]	; 0x4c
   279c4:	b	26c88 <__assert_fail@plt+0x152e8>
   279c8:	ldr	r3, [sp, #44]	; 0x2c
   279cc:	sub	r2, r2, #33	; 0x21
   279d0:	clz	r2, r2
   279d4:	ldr	r1, [r3, #64]	; 0x40
   279d8:	ldr	r3, [sp, #212]	; 0xd4
   279dc:	lsr	r2, r2, #5
   279e0:	str	r2, [sp]
   279e4:	str	r3, [sp, #4]
   279e8:	ldr	r2, [pc, #644]	; 27c74 <__assert_fail@plt+0x162d4>
   279ec:	ldr	r3, [pc, #644]	; 27c78 <__assert_fail@plt+0x162d8>
   279f0:	mov	r0, sl
   279f4:	bl	2674c <__assert_fail@plt+0x14dac>
   279f8:	ldr	r3, [sp, #212]	; 0xd4
   279fc:	ldr	r3, [r3]
   27a00:	adds	r3, r3, #0
   27a04:	movne	r3, #1
   27a08:	cmp	r0, #0
   27a0c:	movne	r3, #0
   27a10:	cmp	r3, #0
   27a14:	str	r0, [sp, #36]	; 0x24
   27a18:	beq	26c88 <__assert_fail@plt+0x152e8>
   27a1c:	b	26d34 <__assert_fail@plt+0x15394>
   27a20:	ldr	r2, [sp, #32]
   27a24:	add	r1, sl, #64	; 0x40
   27a28:	add	r0, sl, #56	; 0x38
   27a2c:	bl	22a98 <__assert_fail@plt+0x110f8>
   27a30:	subs	r3, r0, #0
   27a34:	str	r3, [sp, #36]	; 0x24
   27a38:	beq	27b54 <__assert_fail@plt+0x161b4>
   27a3c:	ldr	r3, [sl, #92]	; 0x5c
   27a40:	cmp	r3, #1
   27a44:	ldrbgt	r3, [sl, #88]	; 0x58
   27a48:	orrgt	r3, r3, #2
   27a4c:	strbgt	r3, [sl, #88]	; 0x58
   27a50:	b	26c88 <__assert_fail@plt+0x152e8>
   27a54:	ldr	r3, [sp, #44]	; 0x2c
   27a58:	sub	r2, r2, #35	; 0x23
   27a5c:	clz	r2, r2
   27a60:	ldr	r1, [r3, #64]	; 0x40
   27a64:	ldr	r3, [sp, #212]	; 0xd4
   27a68:	lsr	r2, r2, #5
   27a6c:	str	r2, [sp]
   27a70:	str	r3, [sp, #4]
   27a74:	ldr	r2, [pc, #512]	; 27c7c <__assert_fail@plt+0x162dc>
   27a78:	ldr	r3, [pc, #512]	; 27c80 <__assert_fail@plt+0x162e0>
   27a7c:	b	279f0 <__assert_fail@plt+0x16050>
   27a80:	add	r5, sl, #56	; 0x38
   27a84:	add	r6, sl, #64	; 0x40
   27a88:	mov	r0, r5
   27a8c:	mov	r1, r6
   27a90:	ldr	r2, [sp, #32]
   27a94:	bl	22a98 <__assert_fail@plt+0x110f8>
   27a98:	subs	r3, r0, #0
   27a9c:	str	r3, [sp, #36]	; 0x24
   27aa0:	beq	27b54 <__assert_fail@plt+0x161b4>
   27aa4:	ldr	r3, [sl, #92]	; 0x5c
   27aa8:	cmp	r3, #1
   27aac:	ble	26c88 <__assert_fail@plt+0x152e8>
   27ab0:	ldr	r8, [sp, #44]	; 0x2c
   27ab4:	add	r4, sp, #136	; 0x88
   27ab8:	mov	r7, #0
   27abc:	mov	r9, #16
   27ac0:	ldr	r3, [r8, #40]	; 0x28
   27ac4:	ldr	r2, [r8, #56]	; 0x38
   27ac8:	cmp	r2, r3
   27acc:	ble	26c88 <__assert_fail@plt+0x152e8>
   27ad0:	ldr	r2, [r8, #28]
   27ad4:	cmp	r3, r2
   27ad8:	beq	26c88 <__assert_fail@plt+0x152e8>
   27adc:	ldr	r2, [r8, #8]
   27ae0:	ldr	r3, [r2, r3, lsl #2]
   27ae4:	cmn	r3, #1
   27ae8:	bne	26c88 <__assert_fail@plt+0x152e8>
   27aec:	ldr	fp, [sp, #32]
   27af0:	ldr	r2, [sp, #40]	; 0x28
   27af4:	mov	r1, r8
   27af8:	mov	r0, fp
   27afc:	bl	22130 <__assert_fail@plt+0x10790>
   27b00:	ldr	r3, [r8, #40]	; 0x28
   27b04:	mov	r2, fp
   27b08:	mov	r1, r6
   27b0c:	add	r3, r3, r0
   27b10:	str	r3, [r8, #40]	; 0x28
   27b14:	mov	r0, r5
   27b18:	bl	22a98 <__assert_fail@plt+0x110f8>
   27b1c:	str	r4, [sp]
   27b20:	ldr	r2, [sp, #36]	; 0x24
   27b24:	str	r7, [r4, #4]
   27b28:	mov	r1, r6
   27b2c:	str	r7, [r4]
   27b30:	strb	r9, [sp, #140]	; 0x8c
   27b34:	mov	fp, r0
   27b38:	mov	r3, r0
   27b3c:	mov	r0, r5
   27b40:	bl	1ff70 <__assert_fail@plt+0xe5d0>
   27b44:	cmp	r0, #0
   27b48:	cmpne	fp, #0
   27b4c:	str	r0, [sp, #36]	; 0x24
   27b50:	bne	27ac0 <__assert_fail@plt+0x16120>
   27b54:	ldr	r2, [sp, #212]	; 0xd4
   27b58:	mov	r3, #12
   27b5c:	str	r3, [r2]
   27b60:	mov	r3, #0
   27b64:	str	r3, [sp, #36]	; 0x24
   27b68:	b	26cd0 <__assert_fail@plt+0x15330>
   27b6c:	ldr	r3, [sp, #32]
   27b70:	ldr	r2, [r3]
   27b74:	ldr	r3, [pc, #264]	; 27c84 <__assert_fail@plt+0x162e4>
   27b78:	and	r3, r3, r2
   27b7c:	cmp	r3, #0
   27b80:	beq	27b90 <__assert_fail@plt+0x161f0>
   27b84:	ldrb	r3, [sl, #88]	; 0x58
   27b88:	ands	r4, r3, #16
   27b8c:	beq	280b8 <__assert_fail@plt+0x16718>
   27b90:	sub	r3, r2, #256	; 0x100
   27b94:	bics	r3, r3, #256	; 0x100
   27b98:	bne	28af8 <__assert_fail@plt+0x17158>
   27b9c:	cmp	r2, #256	; 0x100
   27ba0:	beq	28ac4 <__assert_fail@plt+0x17124>
   27ba4:	ldr	r6, [sp, #32]
   27ba8:	mov	r3, #5
   27bac:	add	r5, sl, #56	; 0x38
   27bb0:	add	sl, sl, #64	; 0x40
   27bb4:	str	r3, [r6]
   27bb8:	mov	r2, r6
   27bbc:	mov	r1, sl
   27bc0:	mov	r0, r5
   27bc4:	bl	22a98 <__assert_fail@plt+0x110f8>
   27bc8:	mov	r3, #10
   27bcc:	str	r3, [r6]
   27bd0:	mov	r4, r0
   27bd4:	ldr	r2, [sp, #32]
   27bd8:	mov	r1, sl
   27bdc:	mov	r0, r5
   27be0:	bl	22a98 <__assert_fail@plt+0x110f8>
   27be4:	mov	r2, #0
   27be8:	add	ip, sp, #136	; 0x88
   27bec:	str	r2, [sp, #140]	; 0x8c
   27bf0:	str	ip, [sp]
   27bf4:	str	r2, [sp, #136]	; 0x88
   27bf8:	mov	ip, #10
   27bfc:	mov	r1, sl
   27c00:	mov	r2, r4
   27c04:	strb	ip, [sp, #140]	; 0x8c
   27c08:	mov	r7, r0
   27c0c:	mov	r3, r7
   27c10:	mov	r0, r5
   27c14:	bl	1ff70 <__assert_fail@plt+0xe5d0>
   27c18:	cmp	r7, #0
   27c1c:	cmpne	r4, #0
   27c20:	moveq	r3, #1
   27c24:	movne	r3, #0
   27c28:	cmp	r0, #0
   27c2c:	orreq	r3, r3, #1
   27c30:	cmp	r3, #0
   27c34:	str	r0, [sp, #36]	; 0x24
   27c38:	bne	27b54 <__assert_fail@plt+0x161b4>
   27c3c:	ldr	r4, [sp, #44]	; 0x2c
   27c40:	ldr	r2, [sp, #40]	; 0x28
   27c44:	ldr	r0, [sp, #32]
   27c48:	mov	r1, r4
   27c4c:	bl	22130 <__assert_fail@plt+0x10790>
   27c50:	ldr	r3, [r4, #40]	; 0x28
   27c54:	add	r3, r3, r0
   27c58:	str	r3, [r4, #40]	; 0x28
   27c5c:	ldr	r0, [sp, #36]	; 0x24
   27c60:	add	sp, sp, #172	; 0xac
   27c64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27c68:	addeq	r0, ip, r0, lsl #16
   27c6c:	andeq	r8, r0, r0, lsr r0
   27c70:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   27c74:	andeq	r4, r3, r0
   27c78:	andeq	r4, r3, r0, asr #32
   27c7c:	andeq	r4, r3, r0, lsl r0
   27c80:	andeq	r2, r3, ip, lsl #31
   27c84:	andeq	r0, r0, pc, lsl #6
   27c88:	mvnseq	r0, #0
   27c8c:	mov	r3, #0
   27c90:	mov	r1, #1
   27c94:	mov	r0, #32
   27c98:	str	r3, [sp, #76]	; 0x4c
   27c9c:	bl	1ed9c <__assert_fail@plt+0xd3fc>
   27ca0:	mov	r1, #1
   27ca4:	mov	fp, r0
   27ca8:	mov	r0, #40	; 0x28
   27cac:	bl	1ed9c <__assert_fail@plt+0xd3fc>
   27cb0:	cmp	r0, #0
   27cb4:	cmpne	fp, #0
   27cb8:	moveq	r3, #1
   27cbc:	movne	r3, #0
   27cc0:	mov	r9, r0
   27cc4:	str	r3, [sp, #24]
   27cc8:	beq	28098 <__assert_fail@plt+0x166f8>
   27ccc:	ldr	r4, [sp, #32]
   27cd0:	ldr	r2, [sp, #40]	; 0x28
   27cd4:	ldr	r1, [sp, #44]	; 0x2c
   27cd8:	mov	r0, r4
   27cdc:	bl	1f238 <__assert_fail@plt+0xd898>
   27ce0:	ldrb	r3, [r4, #4]
   27ce4:	cmp	r3, #2
   27ce8:	mov	r8, r0
   27cec:	beq	28044 <__assert_fail@plt+0x166a4>
   27cf0:	cmp	r3, #25
   27cf4:	beq	27ff0 <__assert_fail@plt+0x16650>
   27cf8:	ldr	r2, [sp, #24]
   27cfc:	str	r2, [sp, #48]	; 0x30
   27d00:	cmp	r3, #21
   27d04:	moveq	r3, #1
   27d08:	ldreq	r2, [sp, #32]
   27d0c:	ldr	r6, [sp, #44]	; 0x2c
   27d10:	ldr	r4, [sp, #32]
   27d14:	strbeq	r3, [r2, #4]
   27d18:	mov	r3, #0
   27d1c:	mov	r2, r3
   27d20:	str	r3, [sp, #36]	; 0x24
   27d24:	ldr	r3, [sp, #40]	; 0x28
   27d28:	mov	lr, #1
   27d2c:	str	r2, [sp, #28]
   27d30:	lsr	r3, r3, #16
   27d34:	and	r3, r3, lr
   27d38:	str	r3, [sp, #68]	; 0x44
   27d3c:	ldr	r3, [r6, #80]	; 0x50
   27d40:	add	r2, sp, #104	; 0x68
   27d44:	cmp	r3, #1
   27d48:	str	r3, [sp, #52]	; 0x34
   27d4c:	str	r2, [sp, #84]	; 0x54
   27d50:	ldr	r3, [r6, #40]	; 0x28
   27d54:	beq	27f40 <__assert_fail@plt+0x165a0>
   27d58:	ldr	r2, [r6, #28]
   27d5c:	add	r1, r3, #1
   27d60:	cmp	r1, r2
   27d64:	bge	27f40 <__assert_fail@plt+0x165a0>
   27d68:	ldr	ip, [r6, #8]
   27d6c:	add	r0, ip, r1, lsl #2
   27d70:	ldr	r1, [ip, r1, lsl #2]
   27d74:	cmn	r1, #1
   27d78:	subeq	r2, r2, r3
   27d7c:	moveq	ip, r0
   27d80:	moveq	r1, #1
   27d84:	beq	27d98 <__assert_fail@plt+0x163f8>
   27d88:	b	27f40 <__assert_fail@plt+0x165a0>
   27d8c:	ldr	r5, [ip, #4]!
   27d90:	cmn	r5, #1
   27d94:	bne	27da8 <__assert_fail@plt+0x16408>
   27d98:	add	r1, r1, #1
   27d9c:	cmp	r1, r2
   27da0:	add	lr, r1, r3
   27da4:	bne	27d8c <__assert_fail@plt+0x163ec>
   27da8:	ldr	r3, [r0, #-4]
   27dac:	mov	r5, #1
   27db0:	str	lr, [r6, #40]	; 0x28
   27db4:	str	r3, [sp, #84]	; 0x54
   27db8:	ldr	r2, [sp, #40]	; 0x28
   27dbc:	mov	r1, r6
   27dc0:	mov	r0, r4
   27dc4:	bl	1f238 <__assert_fail@plt+0xd898>
   27dc8:	mov	r8, r0
   27dcc:	ldrb	r3, [r4, #4]
   27dd0:	cmp	r3, #2
   27dd4:	beq	286ac <__assert_fail@plt+0x16d0c>
   27dd8:	cmp	r3, #22
   27ddc:	beq	28478 <__assert_fail@plt+0x16ad8>
   27de0:	cmp	r5, #2
   27de4:	beq	28600 <__assert_fail@plt+0x16c60>
   27de8:	cmp	r5, #3
   27dec:	beq	28600 <__assert_fail@plt+0x16c60>
   27df0:	cmp	r5, #1
   27df4:	beq	28450 <__assert_fail@plt+0x16ab0>
   27df8:	ldrb	r3, [sp, #84]	; 0x54
   27dfc:	mov	r0, #1
   27e00:	and	r1, r3, #31
   27e04:	asr	r3, r3, #5
   27e08:	ldr	r2, [fp, r3, lsl #2]
   27e0c:	orr	r2, r2, r0, lsl r1
   27e10:	str	r2, [fp, r3, lsl #2]
   27e14:	ldrb	r3, [r4, #4]
   27e18:	cmp	r3, #2
   27e1c:	beq	286ac <__assert_fail@plt+0x16d0c>
   27e20:	cmp	r3, #21
   27e24:	beq	2810c <__assert_fail@plt+0x1676c>
   27e28:	ldr	lr, [sp, #24]
   27e2c:	b	27d3c <__assert_fail@plt+0x1639c>
   27e30:	ldr	r2, [sp, #212]	; 0xd4
   27e34:	mov	r3, #5
   27e38:	str	r3, [r2]
   27e3c:	mov	r3, #0
   27e40:	str	r3, [sp, #36]	; 0x24
   27e44:	ldr	r0, [sp, #36]	; 0x24
   27e48:	add	sp, sp, #172	; 0xac
   27e4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27e50:	ldr	r5, [r1, #24]
   27e54:	ldr	r7, [sp, #44]	; 0x2c
   27e58:	ldr	r8, [sp, #32]
   27e5c:	ldr	r9, [sp, #40]	; 0x28
   27e60:	add	r3, r5, #1
   27e64:	str	r3, [r1, #24]
   27e68:	orr	r2, r9, #8388608	; 0x800000
   27e6c:	mov	r1, r7
   27e70:	mov	r0, r8
   27e74:	bl	22130 <__assert_fail@plt+0x10790>
   27e78:	ldrb	r2, [r8, #4]
   27e7c:	ldr	r3, [r7, #40]	; 0x28
   27e80:	mov	r1, r7
   27e84:	cmp	r2, #9
   27e88:	add	r6, r6, #1
   27e8c:	add	r3, r3, r0
   27e90:	str	r3, [r7, #40]	; 0x28
   27e94:	mov	r0, r7
   27e98:	bne	26cdc <__assert_fail@plt+0x1533c>
   27e9c:	mov	r2, #0
   27ea0:	cmp	r5, #8
   27ea4:	movls	r1, #1
   27ea8:	ldrls	r3, [sl, #84]	; 0x54
   27eac:	mov	r0, #0
   27eb0:	orrls	r3, r3, r1, lsl r5
   27eb4:	add	ip, sp, #136	; 0x88
   27eb8:	strls	r3, [sl, #84]	; 0x54
   27ebc:	mov	lr, #17
   27ec0:	mov	r3, r0
   27ec4:	str	r0, [sp, #140]	; 0x8c
   27ec8:	str	r0, [sp, #136]	; 0x88
   27ecc:	str	ip, [sp]
   27ed0:	add	r1, sl, #64	; 0x40
   27ed4:	add	r0, sl, #56	; 0x38
   27ed8:	strb	lr, [sp, #140]	; 0x8c
   27edc:	bl	1ff70 <__assert_fail@plt+0xe5d0>
   27ee0:	subs	r3, r0, #0
   27ee4:	str	r3, [sp, #36]	; 0x24
   27ee8:	beq	27b54 <__assert_fail@plt+0x161b4>
   27eec:	str	r5, [r3, #20]
   27ef0:	b	26c88 <__assert_fail@plt+0x152e8>
   27ef4:	ldr	r3, [sp, #40]	; 0x28
   27ef8:	ands	r2, r3, #131072	; 0x20000
   27efc:	bne	26c64 <__assert_fail@plt+0x152c4>
   27f00:	str	r2, [sp, #36]	; 0x24
   27f04:	ldr	r2, [sp, #212]	; 0xd4
   27f08:	mov	r3, #16
   27f0c:	str	r3, [r2]
   27f10:	b	26cd0 <__assert_fail@plt+0x15330>
   27f14:	str	ip, [r6]
   27f18:	mov	r5, fp
   27f1c:	b	274d0 <__assert_fail@plt+0x15b30>
   27f20:	ldr	r5, [sp, #36]	; 0x24
   27f24:	mov	r8, r5
   27f28:	b	27570 <__assert_fail@plt+0x15bd0>
   27f2c:	ldr	r3, [sp, #60]	; 0x3c
   27f30:	ldr	r5, [sp, #20]
   27f34:	cmp	r3, #0
   27f38:	bne	27304 <__assert_fail@plt+0x15964>
   27f3c:	b	27fd4 <__assert_fail@plt+0x16634>
   27f40:	ldrb	r2, [r4, #4]
   27f44:	add	r8, r8, r3
   27f48:	str	r8, [r6, #40]	; 0x28
   27f4c:	and	r3, r2, #251	; 0xfb
   27f50:	cmp	r2, #28
   27f54:	cmpne	r3, #26
   27f58:	beq	289a0 <__assert_fail@plt+0x17000>
   27f5c:	cmp	r2, #22
   27f60:	moveq	r2, lr
   27f64:	orrne	r2, lr, #1
   27f68:	cmp	r2, #0
   27f6c:	beq	28980 <__assert_fail@plt+0x16fe0>
   27f70:	ldrb	r3, [r4]
   27f74:	mov	r5, #0
   27f78:	strb	r3, [sp, #84]	; 0x54
   27f7c:	b	27db8 <__assert_fail@plt+0x16418>
   27f80:	cmn	r8, #2
   27f84:	mov	r2, r8
   27f88:	mov	r4, r5
   27f8c:	movne	r2, #0
   27f90:	moveq	r2, #1
   27f94:	orrs	r2, r4, r2
   27f98:	ldr	r5, [sp, #20]
   27f9c:	str	r8, [sp, #24]
   27fa0:	bne	272f8 <__assert_fail@plt+0x15958>
   27fa4:	ldr	r2, [sp, #24]
   27fa8:	cmn	r2, #1
   27fac:	cmpne	r9, r2
   27fb0:	bgt	27860 <__assert_fail@plt+0x15ec0>
   27fb4:	cmp	r3, #24
   27fb8:	beq	27728 <__assert_fail@plt+0x15d88>
   27fbc:	ldr	r2, [sp, #212]	; 0xd4
   27fc0:	mov	r3, #10
   27fc4:	str	r3, [r2]
   27fc8:	b	270d4 <__assert_fail@plt+0x15734>
   27fcc:	cmp	r3, #2
   27fd0:	bne	27860 <__assert_fail@plt+0x15ec0>
   27fd4:	ldr	r2, [sp, #212]	; 0xd4
   27fd8:	mov	r3, #9
   27fdc:	str	r3, [r2]
   27fe0:	b	270d4 <__assert_fail@plt+0x15734>
   27fe4:	mov	r8, r7
   27fe8:	ldr	r0, [sp, #32]
   27fec:	b	278c4 <__assert_fail@plt+0x15f24>
   27ff0:	ldrb	r3, [r9, #16]
   27ff4:	ldr	r2, [sp, #40]	; 0x28
   27ff8:	ldr	r1, [sp, #44]	; 0x2c
   27ffc:	tst	r2, #256	; 0x100
   28000:	orr	r3, r3, #1
   28004:	strb	r3, [r9, #16]
   28008:	ldrne	r3, [fp]
   2800c:	ldr	r4, [sp, #32]
   28010:	orrne	r3, r3, #1024	; 0x400
   28014:	strne	r3, [fp]
   28018:	ldr	r3, [r1, #40]	; 0x28
   2801c:	add	r3, r3, r0
   28020:	str	r3, [r1, #40]	; 0x28
   28024:	mov	r0, r4
   28028:	bl	1f238 <__assert_fail@plt+0xd898>
   2802c:	ldrb	r3, [r4, #4]
   28030:	cmp	r3, #2
   28034:	mov	r8, r0
   28038:	movne	r2, #1
   2803c:	strne	r2, [sp, #48]	; 0x30
   28040:	bne	27d00 <__assert_fail@plt+0x16360>
   28044:	ldr	r2, [sp, #212]	; 0xd4
   28048:	mov	r3, #2
   2804c:	str	r3, [r2]
   28050:	mov	r0, fp
   28054:	bl	1f018 <__assert_fail@plt+0xd678>
   28058:	ldr	r0, [r9]
   2805c:	bl	1f018 <__assert_fail@plt+0xd678>
   28060:	ldr	r0, [r9, #4]
   28064:	bl	1f018 <__assert_fail@plt+0xd678>
   28068:	ldr	r0, [r9, #8]
   2806c:	bl	1f018 <__assert_fail@plt+0xd678>
   28070:	ldr	r0, [r9, #12]
   28074:	bl	1f018 <__assert_fail@plt+0xd678>
   28078:	mov	r0, r9
   2807c:	bl	1f018 <__assert_fail@plt+0xd678>
   28080:	ldr	r3, [sp, #212]	; 0xd4
   28084:	ldr	r3, [r3]
   28088:	cmp	r3, #0
   2808c:	bne	26d34 <__assert_fail@plt+0x15394>
   28090:	str	r3, [sp, #36]	; 0x24
   28094:	b	26c88 <__assert_fail@plt+0x152e8>
   28098:	mov	r0, fp
   2809c:	bl	1f018 <__assert_fail@plt+0xd678>
   280a0:	mov	r0, r9
   280a4:	bl	1f018 <__assert_fail@plt+0xd678>
   280a8:	ldr	r2, [sp, #212]	; 0xd4
   280ac:	mov	r3, #12
   280b0:	str	r3, [r2]
   280b4:	b	26d34 <__assert_fail@plt+0x15394>
   280b8:	orr	r3, r3, #16
   280bc:	ands	r2, r3, #8
   280c0:	mov	r1, r3
   280c4:	strb	r3, [sl, #88]	; 0x58
   280c8:	bne	28448 <__assert_fail@plt+0x16aa8>
   280cc:	ldr	r3, [pc, #-1100]	; 27c88 <__assert_fail@plt+0x162e8>
   280d0:	tst	r1, #4
   280d4:	str	r3, [sl, #100]	; 0x64
   280d8:	mvn	r1, #2013265921	; 0x78000001
   280dc:	mvn	r3, #-134217727	; 0xf8000001
   280e0:	str	r2, [sl, #96]	; 0x60
   280e4:	str	r1, [sl, #104]	; 0x68
   280e8:	str	r3, [sl, #108]	; 0x6c
   280ec:	beq	283c8 <__assert_fail@plt+0x16a28>
   280f0:	ldr	r3, [sp, #32]
   280f4:	str	r2, [sl, #112]	; 0x70
   280f8:	str	r2, [sl, #116]	; 0x74
   280fc:	str	r2, [sl, #120]	; 0x78
   28100:	str	r2, [sl, #124]	; 0x7c
   28104:	ldr	r2, [r3]
   28108:	b	27b90 <__assert_fail@plt+0x161f0>
   2810c:	ldr	r2, [sp, #44]	; 0x2c
   28110:	ldr	r1, [sp, #48]	; 0x30
   28114:	ldr	r3, [r2, #40]	; 0x28
   28118:	cmp	r1, #0
   2811c:	add	r3, r3, r8
   28120:	str	r3, [r2, #40]	; 0x28
   28124:	beq	28184 <__assert_fail@plt+0x167e4>
   28128:	ldm	fp, {r2, r3}
   2812c:	ldr	r1, [fp, #8]
   28130:	mvn	r2, r2
   28134:	mvn	r3, r3
   28138:	str	r2, [fp]
   2813c:	str	r3, [fp, #4]
   28140:	ldr	r2, [fp, #12]
   28144:	ldr	r3, [fp, #16]
   28148:	mvn	r1, r1
   2814c:	mvn	r2, r2
   28150:	mvn	r3, r3
   28154:	str	r1, [fp, #8]
   28158:	str	r2, [fp, #12]
   2815c:	ldr	r1, [fp, #20]
   28160:	ldr	r2, [fp, #24]
   28164:	str	r3, [fp, #16]
   28168:	ldr	r3, [fp, #28]
   2816c:	mvn	r1, r1
   28170:	mvn	r2, r2
   28174:	mvn	r3, r3
   28178:	str	r1, [fp, #20]
   2817c:	str	r2, [fp, #24]
   28180:	str	r3, [fp, #28]
   28184:	ldr	r0, [sl, #92]	; 0x5c
   28188:	cmp	r0, #1
   2818c:	ble	28210 <__assert_fail@plt+0x16870>
   28190:	ldr	r3, [sl, #60]	; 0x3c
   28194:	ldm	fp, {r1, r2}
   28198:	ldr	ip, [r3]
   2819c:	and	r1, r1, ip
   281a0:	str	r1, [fp]
   281a4:	ldr	ip, [r3, #4]
   281a8:	ldr	r1, [fp, #8]
   281ac:	and	r2, r2, ip
   281b0:	str	r2, [fp, #4]
   281b4:	ldr	ip, [r3, #8]
   281b8:	ldr	r2, [fp, #12]
   281bc:	and	r1, r1, ip
   281c0:	str	r1, [fp, #8]
   281c4:	ldr	ip, [r3, #12]
   281c8:	ldr	r1, [fp, #16]
   281cc:	and	r2, r2, ip
   281d0:	str	r2, [fp, #12]
   281d4:	ldr	ip, [r3, #16]
   281d8:	ldr	r2, [fp, #20]
   281dc:	and	r1, r1, ip
   281e0:	str	r1, [fp, #16]
   281e4:	ldr	ip, [r3, #20]
   281e8:	ldr	r1, [fp, #24]
   281ec:	and	r2, r2, ip
   281f0:	str	r2, [fp, #20]
   281f4:	ldr	ip, [r3, #24]
   281f8:	ldr	r2, [fp, #28]
   281fc:	and	r1, r1, ip
   28200:	str	r1, [fp, #24]
   28204:	ldr	r3, [r3, #28]
   28208:	and	r3, r3, r2
   2820c:	str	r3, [fp, #28]
   28210:	ldr	r3, [r9, #20]
   28214:	cmp	r3, #0
   28218:	bne	28260 <__assert_fail@plt+0x168c0>
   2821c:	ldr	r3, [r9, #24]
   28220:	cmp	r3, #0
   28224:	bne	28260 <__assert_fail@plt+0x168c0>
   28228:	ldr	r3, [r9, #28]
   2822c:	cmp	r3, #0
   28230:	bne	28260 <__assert_fail@plt+0x168c0>
   28234:	ldr	r3, [r9, #32]
   28238:	cmp	r3, #0
   2823c:	bne	28260 <__assert_fail@plt+0x168c0>
   28240:	cmp	r0, #1
   28244:	ble	28308 <__assert_fail@plt+0x16968>
   28248:	ldr	r3, [r9, #36]	; 0x24
   2824c:	cmp	r3, #0
   28250:	bne	28260 <__assert_fail@plt+0x168c0>
   28254:	ldrb	r3, [r9, #16]
   28258:	tst	r3, #1
   2825c:	beq	28308 <__assert_fail@plt+0x16968>
   28260:	ldrb	r3, [sl, #88]	; 0x58
   28264:	add	r4, sl, #56	; 0x38
   28268:	add	r5, sl, #64	; 0x40
   2826c:	orr	r3, r3, #2
   28270:	strb	r3, [sl, #88]	; 0x58
   28274:	mov	r0, r4
   28278:	mov	r3, #6
   2827c:	mov	r1, r5
   28280:	add	r2, sp, #104	; 0x68
   28284:	strb	r3, [sp, #108]	; 0x6c
   28288:	str	r9, [sp, #104]	; 0x68
   2828c:	bl	22a98 <__assert_fail@plt+0x110f8>
   28290:	subs	r3, r0, #0
   28294:	str	r3, [sp, #36]	; 0x24
   28298:	beq	28358 <__assert_fail@plt+0x169b8>
   2829c:	ldr	r3, [fp]
   282a0:	cmp	r3, #0
   282a4:	bne	28368 <__assert_fail@plt+0x169c8>
   282a8:	ldr	r3, [fp, #4]
   282ac:	cmp	r3, #0
   282b0:	bne	28368 <__assert_fail@plt+0x169c8>
   282b4:	ldr	r3, [fp, #8]
   282b8:	cmp	r3, #0
   282bc:	bne	28368 <__assert_fail@plt+0x169c8>
   282c0:	ldr	r3, [fp, #12]
   282c4:	cmp	r3, #0
   282c8:	bne	28368 <__assert_fail@plt+0x169c8>
   282cc:	ldr	r3, [fp, #16]
   282d0:	cmp	r3, #0
   282d4:	bne	28368 <__assert_fail@plt+0x169c8>
   282d8:	ldr	r3, [fp, #20]
   282dc:	cmp	r3, #0
   282e0:	bne	28368 <__assert_fail@plt+0x169c8>
   282e4:	ldr	r3, [fp, #24]
   282e8:	cmp	r3, #0
   282ec:	bne	28368 <__assert_fail@plt+0x169c8>
   282f0:	ldr	r3, [fp, #28]
   282f4:	cmp	r3, #0
   282f8:	bne	28368 <__assert_fail@plt+0x169c8>
   282fc:	mov	r0, fp
   28300:	bl	1f018 <__assert_fail@plt+0xd678>
   28304:	b	26c88 <__assert_fail@plt+0x152e8>
   28308:	ldr	r0, [r9]
   2830c:	bl	1f018 <__assert_fail@plt+0xd678>
   28310:	ldr	r0, [r9, #4]
   28314:	bl	1f018 <__assert_fail@plt+0xd678>
   28318:	ldr	r0, [r9, #8]
   2831c:	bl	1f018 <__assert_fail@plt+0xd678>
   28320:	ldr	r0, [r9, #12]
   28324:	bl	1f018 <__assert_fail@plt+0xd678>
   28328:	mov	r0, r9
   2832c:	bl	1f018 <__assert_fail@plt+0xd678>
   28330:	mov	r3, #3
   28334:	add	r2, sp, #104	; 0x68
   28338:	add	r1, sl, #64	; 0x40
   2833c:	add	r0, sl, #56	; 0x38
   28340:	strb	r3, [sp, #108]	; 0x6c
   28344:	str	fp, [sp, #104]	; 0x68
   28348:	bl	22a98 <__assert_fail@plt+0x110f8>
   2834c:	subs	r3, r0, #0
   28350:	str	r3, [sp, #36]	; 0x24
   28354:	bne	26c88 <__assert_fail@plt+0x152e8>
   28358:	mov	r3, #12
   2835c:	ldr	r2, [sp, #212]	; 0xd4
   28360:	str	r3, [r2]
   28364:	b	28050 <__assert_fail@plt+0x166b0>
   28368:	add	r2, sp, #104	; 0x68
   2836c:	mov	r3, #3
   28370:	mov	r1, r5
   28374:	mov	r0, r4
   28378:	str	fp, [sp, #104]	; 0x68
   2837c:	strb	r3, [sp, #108]	; 0x6c
   28380:	bl	22a98 <__assert_fail@plt+0x110f8>
   28384:	subs	r2, r0, #0
   28388:	beq	28358 <__assert_fail@plt+0x169b8>
   2838c:	add	ip, sp, #136	; 0x88
   28390:	mov	lr, #0
   28394:	ldr	r3, [sp, #36]	; 0x24
   28398:	mov	r0, r4
   2839c:	mov	r1, r5
   283a0:	str	ip, [sp]
   283a4:	mov	r4, #10
   283a8:	str	lr, [sp, #140]	; 0x8c
   283ac:	str	lr, [sp, #136]	; 0x88
   283b0:	strb	r4, [sp, #140]	; 0x8c
   283b4:	bl	1ff70 <__assert_fail@plt+0xe5d0>
   283b8:	subs	r3, r0, #0
   283bc:	str	r3, [sp, #36]	; 0x24
   283c0:	bne	26c88 <__assert_fail@plt+0x152e8>
   283c4:	b	28358 <__assert_fail@plt+0x169b8>
   283c8:	mov	r4, #128	; 0x80
   283cc:	mov	r5, #4
   283d0:	bl	11778 <__ctype_b_loc@plt>
   283d4:	sub	r3, r4, #-2147483647	; 0x80000001
   283d8:	mov	ip, #1
   283dc:	add	r2, r5, #24
   283e0:	add	r2, sl, r2, lsl #2
   283e4:	ldr	r1, [r0]
   283e8:	add	r1, r1, r3, lsl ip
   283ec:	mov	r6, r1
   283f0:	mov	r3, #0
   283f4:	ldrh	r0, [r6, #2]!
   283f8:	add	lr, r3, r4
   283fc:	lsr	r0, r0, #3
   28400:	cmp	lr, #95	; 0x5f
   28404:	orreq	r0, r0, #1
   28408:	tst	r0, #1
   2840c:	ldrne	r0, [r2]
   28410:	orrne	r0, r0, ip, lsl r3
   28414:	add	r3, r3, #1
   28418:	strne	r0, [r2]
   2841c:	cmp	r3, #32
   28420:	bne	283f4 <__assert_fail@plt+0x16a54>
   28424:	add	r5, r5, #1
   28428:	cmp	r5, #8
   2842c:	add	r4, r4, #32
   28430:	add	r1, r1, #64	; 0x40
   28434:	add	r2, r2, #4
   28438:	bne	283ec <__assert_fail@plt+0x16a4c>
   2843c:	ldr	r3, [sp, #32]
   28440:	ldr	r2, [r3]
   28444:	b	27b90 <__assert_fail@plt+0x161f0>
   28448:	mov	r5, r4
   2844c:	b	283d0 <__assert_fail@plt+0x16a30>
   28450:	ldr	r3, [r9, #20]
   28454:	ldr	r2, [sp, #28]
   28458:	cmp	r3, r2
   2845c:	beq	286b4 <__assert_fail@plt+0x16d14>
   28460:	ldr	r0, [r9]
   28464:	ldr	r2, [sp, #84]	; 0x54
   28468:	add	r1, r3, #1
   2846c:	str	r1, [r9, #20]
   28470:	str	r2, [r0, r3, lsl #2]
   28474:	b	27e14 <__assert_fail@plt+0x16474>
   28478:	ldr	r3, [r6, #40]	; 0x28
   2847c:	mov	r1, r6
   28480:	add	r3, r3, r8
   28484:	ldr	r2, [sp, #40]	; 0x28
   28488:	str	r3, [r6, #40]	; 0x28
   2848c:	add	r0, sp, #96	; 0x60
   28490:	bl	1f238 <__assert_fail@plt+0xd898>
   28494:	ldrb	r1, [sp, #100]	; 0x64
   28498:	cmp	r1, #2
   2849c:	mov	r7, r0
   284a0:	beq	286ac <__assert_fail@plt+0x16d0c>
   284a4:	cmp	r1, #21
   284a8:	beq	288ec <__assert_fail@plt+0x16f4c>
   284ac:	ldr	r3, [r6, #80]	; 0x50
   284b0:	add	r2, sp, #136	; 0x88
   284b4:	cmp	r3, #1
   284b8:	str	r3, [sp, #56]	; 0x38
   284bc:	str	r2, [sp, #92]	; 0x5c
   284c0:	ldr	r3, [r6, #40]	; 0x28
   284c4:	beq	288b0 <__assert_fail@plt+0x16f10>
   284c8:	ldr	r2, [r6, #28]
   284cc:	add	r0, r3, #1
   284d0:	cmp	r2, r0
   284d4:	ble	288b0 <__assert_fail@plt+0x16f10>
   284d8:	ldr	lr, [r6, #8]
   284dc:	add	ip, lr, r0, lsl #2
   284e0:	ldr	r0, [lr, r0, lsl #2]
   284e4:	cmn	r0, #1
   284e8:	subeq	r2, r2, r3
   284ec:	moveq	r0, ip
   284f0:	moveq	r1, #1
   284f4:	bne	288b0 <__assert_fail@plt+0x16f10>
   284f8:	add	r1, r1, #1
   284fc:	cmp	r1, r2
   28500:	add	lr, r1, r3
   28504:	beq	28514 <__assert_fail@plt+0x16b74>
   28508:	ldr	r7, [r0, #4]!
   2850c:	cmn	r7, #1
   28510:	beq	284f8 <__assert_fail@plt+0x16b58>
   28514:	ldr	r3, [ip, #-4]
   28518:	mov	r7, #1
   2851c:	str	r3, [sp, #92]	; 0x5c
   28520:	ldr	r3, [sp, #24]
   28524:	str	lr, [r6, #40]	; 0x28
   28528:	str	r3, [sp, #20]
   2852c:	ldr	r2, [sp, #40]	; 0x28
   28530:	mov	r1, r6
   28534:	mov	r0, r4
   28538:	bl	1f238 <__assert_fail@plt+0xd898>
   2853c:	sub	r3, r5, #2
   28540:	bics	r3, r3, #2
   28544:	mov	r8, r0
   28548:	beq	288a8 <__assert_fail@plt+0x16f08>
   2854c:	cmp	r5, #3
   28550:	moveq	r3, #1
   28554:	movne	r3, #0
   28558:	str	r3, [sp, #52]	; 0x34
   2855c:	beq	28890 <__assert_fail@plt+0x16ef0>
   28560:	cmp	r7, #3
   28564:	beq	28874 <__assert_fail@plt+0x16ed4>
   28568:	cmp	r5, #0
   2856c:	bne	28860 <__assert_fail@plt+0x16ec0>
   28570:	ldrb	r3, [sp, #84]	; 0x54
   28574:	cmp	r7, #0
   28578:	bne	2884c <__assert_fail@plt+0x16eac>
   2857c:	ldrb	r7, [sp, #92]	; 0x5c
   28580:	ldr	r2, [sp, #52]	; 0x34
   28584:	cmp	r5, #0
   28588:	orreq	r2, r2, #1
   2858c:	cmp	r2, #0
   28590:	beq	28844 <__assert_fail@plt+0x16ea4>
   28594:	ldr	r2, [sl, #92]	; 0x5c
   28598:	cmp	r2, #1
   2859c:	ble	286f8 <__assert_fail@plt+0x16d58>
   285a0:	mov	r0, r3
   285a4:	bl	1182c <btowc@plt>
   285a8:	mov	r3, r0
   285ac:	ldr	r2, [sp, #20]
   285b0:	cmp	r2, #0
   285b4:	beq	286f0 <__assert_fail@plt+0x16d50>
   285b8:	ldr	r2, [sl, #92]	; 0x5c
   285bc:	cmp	r2, #1
   285c0:	ble	285d8 <__assert_fail@plt+0x16c38>
   285c4:	mov	r0, r7
   285c8:	str	r3, [sp, #20]
   285cc:	bl	1182c <btowc@plt>
   285d0:	ldr	r3, [sp, #20]
   285d4:	mov	r7, r0
   285d8:	cmn	r3, #1
   285dc:	cmnne	r7, #1
   285e0:	bne	28704 <__assert_fail@plt+0x16d64>
   285e4:	mov	r3, #3
   285e8:	b	2835c <__assert_fail@plt+0x169bc>
   285ec:	ldr	r2, [sp, #40]	; 0x28
   285f0:	mov	r1, r6
   285f4:	mov	r0, r4
   285f8:	bl	1f238 <__assert_fail@plt+0xd898>
   285fc:	mov	r8, r0
   28600:	ldr	r5, [sp, #84]	; 0x54
   28604:	mov	r0, r5
   28608:	bl	117a8 <strlen@plt>
   2860c:	cmp	r0, #1
   28610:	bne	286e0 <__assert_fail@plt+0x16d40>
   28614:	ldrb	r3, [r5]
   28618:	ldr	r2, [sp, #212]	; 0xd4
   2861c:	mov	r1, #0
   28620:	str	r1, [r2]
   28624:	and	r1, r3, #31
   28628:	asr	r3, r3, #5
   2862c:	ldr	r2, [fp, r3, lsl #2]
   28630:	orr	r2, r2, r0, lsl r1
   28634:	str	r2, [fp, r3, lsl #2]
   28638:	b	27e14 <__assert_fail@plt+0x16474>
   2863c:	ldr	r2, [r6, #56]	; 0x38
   28640:	ldrb	r0, [sp, #96]	; 0x60
   28644:	cmp	r3, r2
   28648:	str	r2, [sp, #64]	; 0x40
   2864c:	str	r0, [sp, #60]	; 0x3c
   28650:	bge	286ac <__assert_fail@plt+0x16d0c>
   28654:	mov	lr, #0
   28658:	add	r2, sp, #136	; 0x88
   2865c:	str	r2, [sp, #52]	; 0x34
   28660:	cmp	r1, #30
   28664:	beq	28b58 <__assert_fail@plt+0x171b8>
   28668:	ldr	r2, [r6, #4]
   2866c:	add	r0, r3, #1
   28670:	str	r0, [r6, #40]	; 0x28
   28674:	ldrb	r2, [r2, r3]
   28678:	mov	r3, r0
   2867c:	ldr	r0, [sp, #64]	; 0x40
   28680:	cmp	r3, r0
   28684:	bge	286ac <__assert_fail@plt+0x16d0c>
   28688:	ldr	r0, [sp, #60]	; 0x3c
   2868c:	cmp	r0, r2
   28690:	beq	28b18 <__assert_fail@plt+0x17178>
   28694:	ldr	r0, [sp, #52]	; 0x34
   28698:	add	lr, lr, #1
   2869c:	cmp	lr, #32
   286a0:	strb	r2, [r0], #1
   286a4:	str	r0, [sp, #52]	; 0x34
   286a8:	bne	28660 <__assert_fail@plt+0x16cc0>
   286ac:	mov	r3, #7
   286b0:	b	2835c <__assert_fail@plt+0x169bc>
   286b4:	lsl	r3, r2, #1
   286b8:	add	r3, r3, #1
   286bc:	ldr	r0, [r9]
   286c0:	lsl	r1, r3, #2
   286c4:	str	r3, [sp, #28]
   286c8:	bl	1f190 <__assert_fail@plt+0xd7f0>
   286cc:	cmp	r0, #0
   286d0:	beq	28358 <__assert_fail@plt+0x169b8>
   286d4:	ldr	r3, [r9, #20]
   286d8:	str	r0, [r9]
   286dc:	b	28464 <__assert_fail@plt+0x16ac4>
   286e0:	ldr	r2, [sp, #212]	; 0xd4
   286e4:	mov	r3, #3
   286e8:	str	r3, [r2]
   286ec:	b	28050 <__assert_fail@plt+0x166b0>
   286f0:	ldr	r7, [sp, #92]	; 0x5c
   286f4:	b	285d8 <__assert_fail@plt+0x16c38>
   286f8:	ldr	r2, [sp, #20]
   286fc:	cmp	r2, #0
   28700:	beq	286f0 <__assert_fail@plt+0x16d50>
   28704:	ldr	r2, [sp, #68]	; 0x44
   28708:	cmp	r7, r3
   2870c:	movcs	r2, #0
   28710:	andcc	r2, r2, #1
   28714:	cmp	r2, #0
   28718:	bne	287c4 <__assert_fail@plt+0x16e24>
   2871c:	ldr	r2, [sl, #92]	; 0x5c
   28720:	cmp	r2, #1
   28724:	ble	28754 <__assert_fail@plt+0x16db4>
   28728:	ldr	r2, [r9, #32]
   2872c:	ldr	r1, [sp, #36]	; 0x24
   28730:	cmp	r2, r1
   28734:	beq	287cc <__assert_fail@plt+0x16e2c>
   28738:	ldr	r5, [r9, #4]
   2873c:	ldr	r0, [r9, #8]
   28740:	str	r3, [r5, r2, lsl #2]
   28744:	ldr	r2, [r9, #32]
   28748:	add	r1, r2, #1
   2874c:	str	r1, [r9, #32]
   28750:	str	r7, [r0, r2, lsl #2]
   28754:	mov	r2, #0
   28758:	cmp	r2, r3
   2875c:	movcc	r1, #0
   28760:	movcs	r1, #1
   28764:	cmp	r2, r7
   28768:	movhi	r1, #0
   2876c:	cmp	r1, #0
   28770:	beq	2878c <__assert_fail@plt+0x16dec>
   28774:	asr	ip, r2, #5
   28778:	and	r0, r2, #31
   2877c:	ldr	r1, [fp, ip, lsl #2]
   28780:	mov	lr, #1
   28784:	orr	r1, r1, lr, lsl r0
   28788:	str	r1, [fp, ip, lsl #2]
   2878c:	add	r2, r2, #1
   28790:	cmp	r2, #256	; 0x100
   28794:	bne	28758 <__assert_fail@plt+0x16db8>
   28798:	ldr	r3, [sp, #212]	; 0xd4
   2879c:	mov	r2, #0
   287a0:	str	r2, [r3]
   287a4:	b	27e14 <__assert_fail@plt+0x16474>
   287a8:	ldr	r2, [sp, #40]	; 0x28
   287ac:	ldr	r1, [sp, #44]	; 0x2c
   287b0:	ldr	r0, [sp, #32]
   287b4:	bl	1f238 <__assert_fail@plt+0xd898>
   287b8:	sub	r3, r5, #2
   287bc:	bics	r3, r3, #2
   287c0:	beq	288a8 <__assert_fail@plt+0x16f08>
   287c4:	mov	r3, #11
   287c8:	b	2835c <__assert_fail@plt+0x169bc>
   287cc:	str	r3, [sp, #52]	; 0x34
   287d0:	ldr	r3, [sp, #36]	; 0x24
   287d4:	ldr	r0, [r9, #4]
   287d8:	lsl	r2, r3, #1
   287dc:	add	r3, r2, #1
   287e0:	str	r3, [sp, #36]	; 0x24
   287e4:	lsl	r2, r3, #2
   287e8:	mov	r1, r2
   287ec:	str	r2, [sp, #20]
   287f0:	bl	1f190 <__assert_fail@plt+0xd7f0>
   287f4:	ldr	r2, [sp, #20]
   287f8:	mov	r1, r2
   287fc:	mov	r5, r0
   28800:	ldr	r0, [r9, #8]
   28804:	bl	1f190 <__assert_fail@plt+0xd7f0>
   28808:	ldr	r3, [sp, #52]	; 0x34
   2880c:	cmp	r0, #0
   28810:	cmpne	r5, #0
   28814:	ldrne	r2, [r9, #32]
   28818:	strne	r5, [r9, #4]
   2881c:	strne	r0, [r9, #8]
   28820:	bne	28740 <__assert_fail@plt+0x16da0>
   28824:	mov	r4, r5
   28828:	mov	r5, r0
   2882c:	mov	r0, r4
   28830:	bl	1f018 <__assert_fail@plt+0xd678>
   28834:	mov	r0, r5
   28838:	bl	1f018 <__assert_fail@plt+0xd678>
   2883c:	mov	r3, #12
   28840:	b	2835c <__assert_fail@plt+0x169bc>
   28844:	ldr	r3, [sp, #84]	; 0x54
   28848:	b	285ac <__assert_fail@plt+0x16c0c>
   2884c:	cmp	r7, #3
   28850:	movne	r7, #0
   28854:	ldreq	r2, [sp, #92]	; 0x5c
   28858:	ldrbeq	r7, [r2]
   2885c:	b	28580 <__assert_fail@plt+0x16be0>
   28860:	cmp	r5, #3
   28864:	movne	r3, #0
   28868:	ldreq	r3, [sp, #84]	; 0x54
   2886c:	ldrbeq	r3, [r3]
   28870:	b	28574 <__assert_fail@plt+0x16bd4>
   28874:	ldr	r0, [sp, #92]	; 0x5c
   28878:	bl	117a8 <strlen@plt>
   2887c:	cmp	r0, #1
   28880:	bls	28568 <__assert_fail@plt+0x16bc8>
   28884:	ldr	r3, [sp, #212]	; 0xd4
   28888:	str	r7, [r3]
   2888c:	b	28050 <__assert_fail@plt+0x166b0>
   28890:	ldr	r0, [sp, #84]	; 0x54
   28894:	bl	117a8 <strlen@plt>
   28898:	cmp	r0, #1
   2889c:	bls	28560 <__assert_fail@plt+0x16bc0>
   288a0:	mov	r7, r5
   288a4:	b	28884 <__assert_fail@plt+0x16ee4>
   288a8:	mov	r7, #11
   288ac:	b	28884 <__assert_fail@plt+0x16ee4>
   288b0:	and	r2, r1, #251	; 0xfb
   288b4:	cmp	r1, #28
   288b8:	cmpne	r2, #26
   288bc:	add	r3, r7, r3
   288c0:	moveq	r2, #1
   288c4:	movne	r2, #0
   288c8:	str	r2, [sp, #20]
   288cc:	str	r3, [r6, #40]	; 0x28
   288d0:	beq	2863c <__assert_fail@plt+0x16c9c>
   288d4:	ldrb	r3, [sp, #96]	; 0x60
   288d8:	mov	r2, #1
   288dc:	str	r2, [sp, #20]
   288e0:	mov	r7, #0
   288e4:	strb	r3, [sp, #92]	; 0x5c
   288e8:	b	2852c <__assert_fail@plt+0x16b8c>
   288ec:	ldr	r3, [r6, #40]	; 0x28
   288f0:	sub	r3, r3, r8
   288f4:	str	r3, [r6, #40]	; 0x28
   288f8:	mov	r3, #1
   288fc:	strb	r3, [r4, #4]
   28900:	b	27de0 <__assert_fail@plt+0x16440>
   28904:	ldr	r5, [sp, #44]	; 0x2c
   28908:	ldr	r7, [sp, #32]
   2890c:	mov	r2, r3
   28910:	mov	r1, r5
   28914:	mov	r0, r7
   28918:	mov	r8, r3
   2891c:	bl	22130 <__assert_fail@plt+0x10790>
   28920:	ldr	ip, [r5, #40]	; 0x28
   28924:	ldr	r3, [sp, #212]	; 0xd4
   28928:	str	r6, [sp]
   2892c:	str	r3, [sp, #4]
   28930:	mov	r2, r7
   28934:	mov	r3, r8
   28938:	mov	r1, r4
   2893c:	add	r0, ip, r0
   28940:	str	r0, [r5, #40]	; 0x28
   28944:	mov	r0, r5
   28948:	bl	26b78 <__assert_fail@plt+0x151d8>
   2894c:	str	r0, [sp, #36]	; 0x24
   28950:	b	26cd0 <__assert_fail@plt+0x15330>
   28954:	str	r2, [sp, #36]	; 0x24
   28958:	ldr	r2, [sp, #212]	; 0xd4
   2895c:	mov	r3, #6
   28960:	str	r3, [r2]
   28964:	b	26cd0 <__assert_fail@plt+0x15330>
   28968:	mov	r8, r1
   2896c:	ldr	r0, [sp, #32]
   28970:	b	278c4 <__assert_fail@plt+0x15f24>
   28974:	mov	r8, r6
   28978:	ldr	r0, [sp, #32]
   2897c:	b	278c4 <__assert_fail@plt+0x15f24>
   28980:	ldr	r2, [sp, #40]	; 0x28
   28984:	mov	r1, r6
   28988:	add	r0, sp, #136	; 0x88
   2898c:	bl	1f238 <__assert_fail@plt+0xd898>
   28990:	ldrb	r3, [sp, #140]	; 0x8c
   28994:	cmp	r3, #21
   28998:	bne	287c4 <__assert_fail@plt+0x16e24>
   2899c:	b	27f70 <__assert_fail@plt+0x165d0>
   289a0:	ldr	r7, [r6, #56]	; 0x38
   289a4:	ldrb	r3, [r4]
   289a8:	cmp	r8, r7
   289ac:	str	r3, [sp, #56]	; 0x38
   289b0:	bge	286ac <__assert_fail@plt+0x16d0c>
   289b4:	add	r3, sp, #104	; 0x68
   289b8:	str	r3, [sp, #20]
   289bc:	mov	ip, #0
   289c0:	b	28a04 <__assert_fail@plt+0x17064>
   289c4:	ldr	r3, [r6, #4]
   289c8:	add	r1, r8, #1
   289cc:	str	r1, [r6, #40]	; 0x28
   289d0:	ldrb	r3, [r3, r8]
   289d4:	mov	r8, r1
   289d8:	cmp	r7, r8
   289dc:	ble	286ac <__assert_fail@plt+0x16d0c>
   289e0:	ldr	r1, [sp, #56]	; 0x38
   289e4:	cmp	r1, r3
   289e8:	beq	28c78 <__assert_fail@plt+0x172d8>
   289ec:	ldr	r1, [sp, #20]
   289f0:	add	ip, ip, #1
   289f4:	cmp	ip, #32
   289f8:	strb	r3, [r1], #1
   289fc:	str	r1, [sp, #20]
   28a00:	beq	286ac <__assert_fail@plt+0x16d0c>
   28a04:	cmp	r2, #30
   28a08:	bne	289c4 <__assert_fail@plt+0x17024>
   28a0c:	ldrb	r3, [r6, #75]	; 0x4b
   28a10:	cmp	r3, #0
   28a14:	beq	289c4 <__assert_fail@plt+0x17024>
   28a18:	ldrb	r3, [r6, #76]	; 0x4c
   28a1c:	cmp	r3, #0
   28a20:	beq	28d64 <__assert_fail@plt+0x173c4>
   28a24:	ldr	lr, [r6, #28]
   28a28:	cmp	r8, lr
   28a2c:	beq	28d58 <__assert_fail@plt+0x173b8>
   28a30:	ldr	r1, [r6, #8]
   28a34:	mov	r3, r8
   28a38:	lsl	r0, r8, #2
   28a3c:	ldr	r1, [r1, r8, lsl #2]
   28a40:	cmn	r1, #1
   28a44:	movne	r1, r8
   28a48:	beq	28d44 <__assert_fail@plt+0x173a4>
   28a4c:	ldr	r5, [r6, #12]
   28a50:	ldr	r3, [r6]
   28a54:	ldr	r5, [r5, r0]
   28a58:	ldr	r0, [r6, #24]
   28a5c:	add	r3, r3, r5
   28a60:	ldrb	r3, [r3, r0]
   28a64:	tst	r3, #128	; 0x80
   28a68:	bne	28d30 <__assert_fail@plt+0x17390>
   28a6c:	ldr	r1, [sp, #52]	; 0x34
   28a70:	cmp	r1, #1
   28a74:	add	r1, r8, #1
   28a78:	beq	28ab8 <__assert_fail@plt+0x17118>
   28a7c:	cmp	lr, r1
   28a80:	ble	28ab8 <__assert_fail@plt+0x17118>
   28a84:	ldr	r5, [r6, #8]
   28a88:	add	r0, r5, r1, lsl #2
   28a8c:	ldr	r5, [r5, r1, lsl #2]
   28a90:	cmn	r5, #1
   28a94:	addeq	r8, r8, #2
   28a98:	bne	28ab8 <__assert_fail@plt+0x17118>
   28a9c:	cmp	lr, r8
   28aa0:	mov	r1, r8
   28aa4:	beq	28ab8 <__assert_fail@plt+0x17118>
   28aa8:	ldr	r5, [r0, #4]!
   28aac:	add	r8, r8, #1
   28ab0:	cmn	r5, #1
   28ab4:	beq	28a9c <__assert_fail@plt+0x170fc>
   28ab8:	str	r1, [r6, #40]	; 0x28
   28abc:	mov	r8, r1
   28ac0:	b	289d8 <__assert_fail@plt+0x17038>
   28ac4:	ldr	r6, [sp, #32]
   28ac8:	mov	r3, #6
   28acc:	add	r5, sl, #56	; 0x38
   28ad0:	add	sl, sl, #64	; 0x40
   28ad4:	str	r3, [r6]
   28ad8:	mov	r2, r6
   28adc:	mov	r1, sl
   28ae0:	mov	r0, r5
   28ae4:	bl	22a98 <__assert_fail@plt+0x110f8>
   28ae8:	mov	r3, #9
   28aec:	str	r3, [r6]
   28af0:	mov	r4, r0
   28af4:	b	27bd4 <__assert_fail@plt+0x16234>
   28af8:	ldr	r2, [sp, #32]
   28afc:	add	r1, sl, #64	; 0x40
   28b00:	add	r0, sl, #56	; 0x38
   28b04:	bl	22a98 <__assert_fail@plt+0x110f8>
   28b08:	subs	r3, r0, #0
   28b0c:	str	r3, [sp, #36]	; 0x24
   28b10:	bne	27c3c <__assert_fail@plt+0x1629c>
   28b14:	b	27b54 <__assert_fail@plt+0x161b4>
   28b18:	ldr	r0, [r6, #4]
   28b1c:	ldrb	r0, [r0, r3]
   28b20:	cmp	r0, #93	; 0x5d
   28b24:	bne	28694 <__assert_fail@plt+0x16cf4>
   28b28:	add	r2, sp, #168	; 0xa8
   28b2c:	add	lr, r2, lr
   28b30:	add	r3, r3, #1
   28b34:	mov	r2, #0
   28b38:	cmp	r1, #28
   28b3c:	strb	r2, [lr, #-32]	; 0xffffffe0
   28b40:	str	r3, [r6, #40]	; 0x28
   28b44:	beq	28c10 <__assert_fail@plt+0x17270>
   28b48:	cmp	r1, #30
   28b4c:	beq	287a8 <__assert_fail@plt+0x16e08>
   28b50:	mov	r7, #3
   28b54:	b	2852c <__assert_fail@plt+0x16b8c>
   28b58:	ldrb	r2, [r6, #75]	; 0x4b
   28b5c:	cmp	r2, #0
   28b60:	beq	28668 <__assert_fail@plt+0x16cc8>
   28b64:	ldrb	r2, [r6, #76]	; 0x4c
   28b68:	cmp	r2, #0
   28b6c:	beq	28c5c <__assert_fail@plt+0x172bc>
   28b70:	ldr	r7, [r6, #28]
   28b74:	cmp	r3, r7
   28b78:	beq	28c50 <__assert_fail@plt+0x172b0>
   28b7c:	ldr	r0, [r6, #8]
   28b80:	mov	r2, r3
   28b84:	lsl	ip, r3, #2
   28b88:	ldr	r0, [r0, r3, lsl #2]
   28b8c:	cmn	r0, #1
   28b90:	movne	r0, r3
   28b94:	beq	28c3c <__assert_fail@plt+0x1729c>
   28b98:	ldr	r8, [r6, #12]
   28b9c:	ldr	r2, [r6]
   28ba0:	ldr	r8, [r8, ip]
   28ba4:	ldr	ip, [r6, #24]
   28ba8:	add	r2, r2, r8
   28bac:	ldrb	r2, [r2, ip]
   28bb0:	tst	r2, #128	; 0x80
   28bb4:	bne	28c28 <__assert_fail@plt+0x17288>
   28bb8:	ldr	r0, [sp, #56]	; 0x38
   28bbc:	cmp	r0, #1
   28bc0:	add	r0, r3, #1
   28bc4:	beq	28c04 <__assert_fail@plt+0x17264>
   28bc8:	cmp	r7, r0
   28bcc:	ble	28c04 <__assert_fail@plt+0x17264>
   28bd0:	ldr	r8, [r6, #8]
   28bd4:	add	ip, r8, r0, lsl #2
   28bd8:	ldr	r8, [r8, r0, lsl #2]
   28bdc:	cmn	r8, #1
   28be0:	addeq	r3, r3, #2
   28be4:	bne	28c04 <__assert_fail@plt+0x17264>
   28be8:	cmp	r7, r3
   28bec:	mov	r0, r3
   28bf0:	beq	28c04 <__assert_fail@plt+0x17264>
   28bf4:	ldr	r8, [ip, #4]!
   28bf8:	add	r3, r3, #1
   28bfc:	cmn	r8, #1
   28c00:	beq	28be8 <__assert_fail@plt+0x17248>
   28c04:	str	r0, [r6, #40]	; 0x28
   28c08:	mov	r3, r0
   28c0c:	b	2867c <__assert_fail@plt+0x16cdc>
   28c10:	ldr	r2, [sp, #40]	; 0x28
   28c14:	ldr	r1, [sp, #44]	; 0x2c
   28c18:	ldr	r0, [sp, #32]
   28c1c:	bl	1f238 <__assert_fail@plt+0xd898>
   28c20:	mov	r7, #11
   28c24:	b	28884 <__assert_fail@plt+0x16ee4>
   28c28:	ldr	r2, [r6, #4]
   28c2c:	add	r3, r3, #1
   28c30:	str	r3, [r6, #40]	; 0x28
   28c34:	ldrb	r2, [r2, r0]
   28c38:	b	2867c <__assert_fail@plt+0x16cdc>
   28c3c:	ldr	r0, [r6, #4]
   28c40:	add	r3, r3, #1
   28c44:	str	r3, [r6, #40]	; 0x28
   28c48:	ldrb	r2, [r0, r2]
   28c4c:	b	2867c <__assert_fail@plt+0x16cdc>
   28c50:	mov	r0, r3
   28c54:	lsl	ip, r3, #2
   28c58:	b	28b98 <__assert_fail@plt+0x171f8>
   28c5c:	ldr	r2, [r6]
   28c60:	ldr	r0, [r6, #24]
   28c64:	add	r2, r2, r3
   28c68:	add	r3, r3, #1
   28c6c:	str	r3, [r6, #40]	; 0x28
   28c70:	ldrb	r2, [r2, r0]
   28c74:	b	2867c <__assert_fail@plt+0x16cdc>
   28c78:	ldr	r1, [r6, #4]
   28c7c:	ldrb	r1, [r1, r8]
   28c80:	cmp	r1, #93	; 0x5d
   28c84:	bne	289ec <__assert_fail@plt+0x1704c>
   28c88:	add	r3, sp, #168	; 0xa8
   28c8c:	add	ip, r3, ip
   28c90:	add	r8, r8, #1
   28c94:	mov	r3, #0
   28c98:	cmp	r2, #28
   28c9c:	strb	r3, [ip, #-64]	; 0xffffffc0
   28ca0:	str	r8, [r6, #40]	; 0x28
   28ca4:	beq	285ec <__assert_fail@plt+0x16c4c>
   28ca8:	cmp	r2, #30
   28cac:	beq	28cdc <__assert_fail@plt+0x1733c>
   28cb0:	cmp	r2, #26
   28cb4:	beq	28cd4 <__assert_fail@plt+0x17334>
   28cb8:	ldr	r2, [sp, #40]	; 0x28
   28cbc:	mov	r1, r6
   28cc0:	mov	r0, r4
   28cc4:	bl	1f238 <__assert_fail@plt+0xd898>
   28cc8:	mov	r5, #3
   28ccc:	mov	r8, r0
   28cd0:	b	27dcc <__assert_fail@plt+0x1642c>
   28cd4:	mov	r5, #3
   28cd8:	b	27db8 <__assert_fail@plt+0x16418>
   28cdc:	ldr	r5, [sp, #40]	; 0x28
   28ce0:	mov	r1, r6
   28ce4:	mov	r2, r5
   28ce8:	mov	r0, r4
   28cec:	bl	1f238 <__assert_fail@plt+0xd898>
   28cf0:	ldr	r2, [sp, #84]	; 0x54
   28cf4:	add	r3, sp, #76	; 0x4c
   28cf8:	mov	r1, fp
   28cfc:	mov	r8, r0
   28d00:	ldr	r0, [r6, #64]	; 0x40
   28d04:	str	r2, [sp, #4]
   28d08:	str	r3, [sp]
   28d0c:	str	r5, [sp, #8]
   28d10:	add	r3, r9, #36	; 0x24
   28d14:	add	r2, r9, #12
   28d18:	bl	210fc <__assert_fail@plt+0xf75c>
   28d1c:	ldr	r3, [sp, #212]	; 0xd4
   28d20:	cmp	r0, #0
   28d24:	str	r0, [r3]
   28d28:	beq	27e14 <__assert_fail@plt+0x16474>
   28d2c:	b	28050 <__assert_fail@plt+0x166b0>
   28d30:	ldr	r3, [r6, #4]
   28d34:	add	r8, r8, #1
   28d38:	str	r8, [r6, #40]	; 0x28
   28d3c:	ldrb	r3, [r3, r1]
   28d40:	b	289d8 <__assert_fail@plt+0x17038>
   28d44:	ldr	r1, [r6, #4]
   28d48:	add	r8, r8, #1
   28d4c:	str	r8, [r6, #40]	; 0x28
   28d50:	ldrb	r3, [r1, r3]
   28d54:	b	289d8 <__assert_fail@plt+0x17038>
   28d58:	mov	r1, r8
   28d5c:	lsl	r0, r8, #2
   28d60:	b	28a4c <__assert_fail@plt+0x170ac>
   28d64:	ldr	r3, [r6]
   28d68:	ldr	r1, [r6, #24]
   28d6c:	add	r3, r3, r8
   28d70:	add	r8, r8, #1
   28d74:	str	r8, [r6, #40]	; 0x28
   28d78:	ldrb	r3, [r3, r1]
   28d7c:	b	289d8 <__assert_fail@plt+0x17038>
   28d80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28d84:	sub	sp, sp, #36	; 0x24
   28d88:	mov	sl, r3
   28d8c:	ldr	r5, [sp, #76]	; 0x4c
   28d90:	ldr	r7, [sp, #72]	; 0x48
   28d94:	str	r5, [sp, #4]
   28d98:	str	r7, [sp]
   28d9c:	ldr	ip, [r1]
   28da0:	mov	r8, r1
   28da4:	str	ip, [sp, #16]
   28da8:	mov	r9, r0
   28dac:	mov	r6, r2
   28db0:	bl	26b78 <__assert_fail@plt+0x151d8>
   28db4:	ldr	r3, [r5]
   28db8:	adds	r3, r3, #0
   28dbc:	movne	r3, #1
   28dc0:	cmp	r0, #0
   28dc4:	movne	r3, #0
   28dc8:	cmp	r3, #0
   28dcc:	bne	28f50 <__assert_fail@plt+0x175b0>
   28dd0:	mov	r4, r0
   28dd4:	str	r3, [sp, #20]
   28dd8:	str	r8, [sp, #12]
   28ddc:	ldrb	r3, [r6, #4]
   28de0:	and	r2, r3, #247	; 0xf7
   28de4:	cmp	r2, #2
   28de8:	beq	28e64 <__assert_fail@plt+0x174c4>
   28dec:	subs	r3, r3, #9
   28df0:	movne	r3, #1
   28df4:	cmp	r7, #0
   28df8:	orreq	r3, r3, #1
   28dfc:	cmp	r3, #0
   28e00:	beq	28e64 <__assert_fail@plt+0x174c4>
   28e04:	mov	r3, sl
   28e08:	str	r5, [sp, #4]
   28e0c:	str	r7, [sp]
   28e10:	mov	r2, r6
   28e14:	ldr	r1, [sp, #12]
   28e18:	mov	r0, r9
   28e1c:	bl	26b78 <__assert_fail@plt+0x151d8>
   28e20:	ldr	r3, [r5]
   28e24:	adds	r3, r3, #0
   28e28:	movne	r3, #1
   28e2c:	cmp	r0, #0
   28e30:	movne	r3, #0
   28e34:	cmp	r3, #0
   28e38:	mov	fp, r0
   28e3c:	bne	28f60 <__assert_fail@plt+0x175c0>
   28e40:	cmp	r4, #0
   28e44:	cmpne	r0, #0
   28e48:	bne	28e70 <__assert_fail@plt+0x174d0>
   28e4c:	ldrb	r3, [r6, #4]
   28e50:	cmp	r4, #0
   28e54:	moveq	r4, r0
   28e58:	and	r2, r3, #247	; 0xf7
   28e5c:	cmp	r2, #2
   28e60:	bne	28dec <__assert_fail@plt+0x1744c>
   28e64:	mov	r0, r4
   28e68:	add	sp, sp, #36	; 0x24
   28e6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28e70:	ldr	r1, [sp, #16]
   28e74:	str	r3, [sp, #24]
   28e78:	str	r3, [sp, #28]
   28e7c:	ldr	r2, [r1, #64]	; 0x40
   28e80:	cmp	r2, #31
   28e84:	beq	28f04 <__assert_fail@plt+0x17564>
   28e88:	lsl	r3, r2, #5
   28e8c:	add	lr, r2, #1
   28e90:	ldr	r2, [r1, #56]	; 0x38
   28e94:	add	ip, r3, #4
   28e98:	mov	r8, r1
   28e9c:	mov	r1, #16
   28ea0:	strb	r1, [sp, #28]
   28ea4:	add	r1, sp, #24
   28ea8:	add	r3, r2, r3
   28eac:	ldm	r1, {r0, r1}
   28eb0:	str	lr, [r8, #64]	; 0x40
   28eb4:	ldr	r8, [sp, #20]
   28eb8:	add	lr, r3, #24
   28ebc:	str	r8, [r3, #4]
   28ec0:	str	r4, [r3, #8]
   28ec4:	str	fp, [r3, #12]
   28ec8:	stm	lr, {r0, r1}
   28ecc:	ldrb	r1, [r3, #30]
   28ed0:	add	r2, r2, ip
   28ed4:	mvn	r0, #0
   28ed8:	and	r1, r1, #243	; 0xf3
   28edc:	cmp	r2, #0
   28ee0:	str	r8, [r3, #16]
   28ee4:	str	r8, [r3, #20]
   28ee8:	str	r0, [r3, #32]
   28eec:	strb	r1, [r3, #30]
   28ef0:	str	r2, [r4]
   28ef4:	str	r2, [fp]
   28ef8:	beq	28f38 <__assert_fail@plt+0x17598>
   28efc:	mov	r4, r2
   28f00:	b	28ddc <__assert_fail@plt+0x1743c>
   28f04:	mov	r0, #996	; 0x3e4
   28f08:	bl	1f110 <__assert_fail@plt+0xd770>
   28f0c:	subs	r2, r0, #0
   28f10:	beq	28f38 <__assert_fail@plt+0x17598>
   28f14:	ldr	r0, [sp, #16]
   28f18:	mov	lr, #1
   28f1c:	mov	ip, #4
   28f20:	ldr	r1, [r0, #56]	; 0x38
   28f24:	ldr	r3, [sp, #20]
   28f28:	str	r1, [r2]
   28f2c:	mov	r8, r0
   28f30:	str	r2, [r0, #56]	; 0x38
   28f34:	b	28e9c <__assert_fail@plt+0x174fc>
   28f38:	mov	r0, fp
   28f3c:	bl	22b44 <__assert_fail@plt+0x111a4>
   28f40:	mov	r0, r4
   28f44:	bl	22b44 <__assert_fail@plt+0x111a4>
   28f48:	mov	r3, #12
   28f4c:	str	r3, [r5]
   28f50:	mov	r4, #0
   28f54:	mov	r0, r4
   28f58:	add	sp, sp, #36	; 0x24
   28f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28f60:	cmp	r4, #0
   28f64:	beq	28f50 <__assert_fail@plt+0x175b0>
   28f68:	mov	r0, r4
   28f6c:	bl	22b44 <__assert_fail@plt+0x111a4>
   28f70:	mov	r4, #0
   28f74:	mov	r0, r4
   28f78:	add	sp, sp, #36	; 0x24
   28f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28f80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28f84:	sub	sp, sp, #44	; 0x2c
   28f88:	ldr	r5, [r1]
   28f8c:	ldr	sl, [sp, #84]	; 0x54
   28f90:	str	r1, [sp, #24]
   28f94:	ldr	ip, [r5, #84]	; 0x54
   28f98:	str	sl, [sp, #4]
   28f9c:	str	ip, [sp, #20]
   28fa0:	ldr	ip, [sp, #80]	; 0x50
   28fa4:	mov	r9, r0
   28fa8:	str	ip, [sp]
   28fac:	mov	r8, r2
   28fb0:	str	r3, [sp, #16]
   28fb4:	bl	28d80 <__assert_fail@plt+0x173e0>
   28fb8:	ldr	r4, [sl]
   28fbc:	adds	r4, r4, #0
   28fc0:	movne	r4, #1
   28fc4:	cmp	r0, #0
   28fc8:	movne	r4, #0
   28fcc:	cmp	r4, #0
   28fd0:	bne	29130 <__assert_fail@plt+0x17790>
   28fd4:	ldr	r3, [sp, #16]
   28fd8:	mov	r6, r0
   28fdc:	orr	r3, r3, #8388608	; 0x800000
   28fe0:	str	r3, [sp, #12]
   28fe4:	add	r7, sp, #32
   28fe8:	b	290e0 <__assert_fail@plt+0x17740>
   28fec:	ldr	r3, [sp, #80]	; 0x50
   28ff0:	clz	r3, r3
   28ff4:	lsr	r3, r3, #5
   28ff8:	cmp	r2, #9
   28ffc:	orrne	r3, r3, #1
   29000:	cmp	r3, #0
   29004:	beq	29118 <__assert_fail@plt+0x17778>
   29008:	ldr	r2, [sp, #20]
   2900c:	ldr	r1, [sp, #80]	; 0x50
   29010:	ldr	fp, [r5, #84]	; 0x54
   29014:	ldr	r3, [sp, #16]
   29018:	str	r2, [r5, #84]	; 0x54
   2901c:	mov	r0, r9
   29020:	mov	r2, r8
   29024:	str	r1, [sp]
   29028:	str	sl, [sp, #4]
   2902c:	ldr	r1, [sp, #24]
   29030:	bl	28d80 <__assert_fail@plt+0x173e0>
   29034:	ldr	r3, [sl]
   29038:	adds	r3, r3, #0
   2903c:	movne	r3, #1
   29040:	cmp	r0, #0
   29044:	movne	r3, #0
   29048:	cmp	r3, #0
   2904c:	mov	r2, r0
   29050:	bne	29120 <__assert_fail@plt+0x17780>
   29054:	ldr	r3, [r5, #84]	; 0x54
   29058:	orr	fp, r3, fp
   2905c:	str	fp, [r5, #84]	; 0x54
   29060:	ldr	lr, [r5, #64]	; 0x40
   29064:	str	r4, [r7]
   29068:	cmp	lr, #31
   2906c:	str	r4, [r7, #4]
   29070:	beq	29158 <__assert_fail@plt+0x177b8>
   29074:	lsl	r3, lr, #5
   29078:	ldr	ip, [r5, #56]	; 0x38
   2907c:	add	lr, lr, #1
   29080:	add	fp, r3, #4
   29084:	mov	r1, #10
   29088:	add	r3, ip, r3
   2908c:	strb	r1, [sp, #36]	; 0x24
   29090:	ldm	r7, {r0, r1}
   29094:	str	lr, [r5, #64]	; 0x40
   29098:	add	lr, r3, #24
   2909c:	stmib	r3, {r4, r6}
   290a0:	str	r2, [r3, #12]
   290a4:	stm	lr, {r0, r1}
   290a8:	ldrb	r1, [r3, #30]
   290ac:	cmp	r6, #0
   290b0:	add	ip, ip, fp
   290b4:	mvn	r0, #0
   290b8:	and	r1, r1, #243	; 0xf3
   290bc:	str	r4, [r3, #16]
   290c0:	str	r4, [r3, #20]
   290c4:	strb	r1, [r3, #30]
   290c8:	str	r0, [r3, #32]
   290cc:	strne	ip, [r6]
   290d0:	cmp	r2, #0
   290d4:	strne	ip, [r2]
   290d8:	subs	r6, ip, #0
   290dc:	beq	29140 <__assert_fail@plt+0x177a0>
   290e0:	ldrb	r3, [r8, #4]
   290e4:	cmp	r3, #10
   290e8:	bne	29134 <__assert_fail@plt+0x17794>
   290ec:	ldr	r2, [sp, #12]
   290f0:	mov	r1, r9
   290f4:	mov	r0, r8
   290f8:	bl	22130 <__assert_fail@plt+0x10790>
   290fc:	ldrb	r2, [r8, #4]
   29100:	ldr	r3, [r9, #40]	; 0x28
   29104:	and	r1, r2, #247	; 0xf7
   29108:	cmp	r1, #2
   2910c:	add	r0, r3, r0
   29110:	str	r0, [r9, #40]	; 0x28
   29114:	bne	28fec <__assert_fail@plt+0x1764c>
   29118:	mov	r2, r4
   2911c:	b	29060 <__assert_fail@plt+0x176c0>
   29120:	cmp	r6, #0
   29124:	beq	29130 <__assert_fail@plt+0x17790>
   29128:	mov	r0, r6
   2912c:	bl	22b44 <__assert_fail@plt+0x111a4>
   29130:	mov	r6, #0
   29134:	mov	r0, r6
   29138:	add	sp, sp, #44	; 0x2c
   2913c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29140:	mov	r3, #12
   29144:	mov	r6, #0
   29148:	mov	r0, r6
   2914c:	str	r3, [sl]
   29150:	add	sp, sp, #44	; 0x2c
   29154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29158:	mov	r0, #996	; 0x3e4
   2915c:	str	r2, [sp, #28]
   29160:	bl	1f110 <__assert_fail@plt+0xd770>
   29164:	subs	ip, r0, #0
   29168:	beq	29140 <__assert_fail@plt+0x177a0>
   2916c:	ldr	r1, [r5, #56]	; 0x38
   29170:	mov	lr, #1
   29174:	str	r1, [ip]
   29178:	mov	fp, #4
   2917c:	mov	r3, r4
   29180:	str	ip, [r5, #56]	; 0x38
   29184:	ldr	r2, [sp, #28]
   29188:	b	29084 <__assert_fail@plt+0x176e4>
   2918c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29190:	sub	sp, sp, #28
   29194:	ldr	r9, [r2, #4]
   29198:	str	r0, [sp]
   2919c:	cmp	r9, #0
   291a0:	moveq	r3, r0
   291a4:	moveq	r4, r9
   291a8:	streq	r9, [r3]
   291ac:	beq	29284 <__assert_fail@plt+0x178e4>
   291b0:	add	fp, r3, r9
   291b4:	ble	291d0 <__assert_fail@plt+0x17830>
   291b8:	ldr	ip, [r2, #8]
   291bc:	add	r4, ip, r9, lsl #2
   291c0:	ldr	r0, [ip], #4
   291c4:	cmp	r4, ip
   291c8:	add	fp, fp, r0
   291cc:	bne	291c0 <__assert_fail@plt+0x17820>
   291d0:	ldr	ip, [r1, #68]	; 0x44
   291d4:	ldr	lr, [r1, #32]
   291d8:	and	ip, ip, fp
   291dc:	add	ip, ip, ip, lsl #1
   291e0:	lsl	ip, ip, #2
   291e4:	add	r4, lr, ip
   291e8:	ldr	r5, [lr, ip]
   291ec:	cmp	r5, #0
   291f0:	ble	29290 <__assert_fail@plt+0x178f0>
   291f4:	sub	ip, r9, #1
   291f8:	ldr	lr, [r4, #8]
   291fc:	lsl	r0, ip, #2
   29200:	sub	lr, lr, #4
   29204:	str	r0, [sp, #4]
   29208:	mov	ip, #0
   2920c:	b	2921c <__assert_fail@plt+0x1787c>
   29210:	add	ip, ip, #1
   29214:	cmp	ip, r5
   29218:	beq	29290 <__assert_fail@plt+0x178f0>
   2921c:	ldr	r4, [lr, #4]!
   29220:	ldr	r0, [r4]
   29224:	cmp	r0, fp
   29228:	bne	29210 <__assert_fail@plt+0x17870>
   2922c:	ldrb	r0, [r4, #52]	; 0x34
   29230:	and	r0, r0, #15
   29234:	cmp	r3, r0
   29238:	bne	29210 <__assert_fail@plt+0x17870>
   2923c:	ldr	r7, [r4, #40]	; 0x28
   29240:	cmp	r7, #0
   29244:	beq	29210 <__assert_fail@plt+0x17870>
   29248:	ldr	r0, [r7, #4]
   2924c:	cmp	r9, r0
   29250:	bne	29210 <__assert_fail@plt+0x17870>
   29254:	ldr	r0, [sp, #4]
   29258:	mov	r6, r9
   2925c:	b	2927c <__assert_fail@plt+0x178dc>
   29260:	ldr	sl, [r7, #8]
   29264:	ldr	r8, [r2, #8]
   29268:	ldr	sl, [sl, r0]
   2926c:	ldr	r8, [r8, r0]
   29270:	sub	r0, r0, #4
   29274:	cmp	sl, r8
   29278:	bne	29210 <__assert_fail@plt+0x17870>
   2927c:	subs	r6, r6, #1
   29280:	bpl	29260 <__assert_fail@plt+0x178c0>
   29284:	mov	r0, r4
   29288:	add	sp, sp, #28
   2928c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29290:	mov	r7, r3
   29294:	ldr	r3, [sp]
   29298:	mov	r9, r1
   2929c:	mov	r0, #56	; 0x38
   292a0:	mov	r1, #1
   292a4:	str	r3, [sp, #12]
   292a8:	mov	r8, r2
   292ac:	bl	1ed9c <__assert_fail@plt+0xd3fc>
   292b0:	subs	r4, r0, #0
   292b4:	beq	294f8 <__assert_fail@plt+0x17b58>
   292b8:	ldr	r0, [r8, #4]
   292bc:	add	r3, r4, #4
   292c0:	cmp	r0, #0
   292c4:	str	r3, [sp, #16]
   292c8:	str	r0, [r4, #8]
   292cc:	ble	2957c <__assert_fail@plt+0x17bdc>
   292d0:	str	r0, [r4, #4]
   292d4:	lsl	r0, r0, #2
   292d8:	bl	1f110 <__assert_fail@plt+0xd770>
   292dc:	cmp	r0, #0
   292e0:	str	r0, [r4, #12]
   292e4:	beq	295ac <__assert_fail@plt+0x17c0c>
   292e8:	ldr	sl, [r8, #4]
   292ec:	ldr	r1, [r8, #8]
   292f0:	lsl	r2, sl, #2
   292f4:	bl	115d4 <memcpy@plt>
   292f8:	ldrb	r2, [r4, #52]	; 0x34
   292fc:	and	r3, r7, #15
   29300:	cmp	sl, #0
   29304:	bic	r2, r2, #15
   29308:	orr	r3, r3, r2
   2930c:	add	r2, r4, #4
   29310:	str	r2, [r4, #40]	; 0x28
   29314:	strb	r3, [r4, #52]	; 0x34
   29318:	ble	29490 <__assert_fail@plt+0x17af0>
   2931c:	and	r2, r7, #2
   29320:	str	r2, [sp]
   29324:	and	r2, r7, #4
   29328:	mov	r0, #0
   2932c:	and	r3, r7, #1
   29330:	stmib	sp, {r2, fp}
   29334:	mov	ip, sl
   29338:	ldr	r6, [pc, #676]	; 295e4 <__assert_fail@plt+0x17c44>
   2933c:	mov	r5, r0
   29340:	mov	fp, r3
   29344:	add	sl, r4, #4
   29348:	b	293ac <__assert_fail@plt+0x17a0c>
   2934c:	cmp	fp, #0
   29350:	beq	29384 <__assert_fail@plt+0x179e4>
   29354:	tst	r7, #2
   29358:	bne	29384 <__assert_fail@plt+0x179e4>
   2935c:	tst	r7, #16
   29360:	beq	29370 <__assert_fail@plt+0x179d0>
   29364:	ldr	r3, [sp]
   29368:	cmp	r3, #0
   2936c:	beq	29384 <__assert_fail@plt+0x179e4>
   29370:	tst	r7, #64	; 0x40
   29374:	beq	2939c <__assert_fail@plt+0x179fc>
   29378:	ldr	r3, [sp, #4]
   2937c:	cmp	r3, #0
   29380:	bne	2939c <__assert_fail@plt+0x179fc>
   29384:	subs	r2, r5, r0
   29388:	bmi	29398 <__assert_fail@plt+0x179f8>
   2938c:	ldr	r1, [r4, #8]
   29390:	cmp	r2, r1
   29394:	blt	29458 <__assert_fail@plt+0x17ab8>
   29398:	add	r0, r0, #1
   2939c:	ldr	ip, [r8, #4]
   293a0:	add	r5, r5, #1
   293a4:	cmp	r5, ip
   293a8:	bge	2948c <__assert_fail@plt+0x17aec>
   293ac:	ldr	r1, [r8, #8]
   293b0:	ldr	r2, [r9]
   293b4:	ldr	r1, [r1, r5, lsl #2]
   293b8:	add	r2, r2, r1, lsl #3
   293bc:	ldr	r7, [r2, #4]
   293c0:	ldrb	r1, [r2, #4]
   293c4:	ands	r7, r6, r7, lsr #8
   293c8:	moveq	lr, #1
   293cc:	movne	lr, #0
   293d0:	cmp	r1, #1
   293d4:	movne	lr, #0
   293d8:	andeq	lr, lr, #1
   293dc:	cmp	lr, #0
   293e0:	bne	293a0 <__assert_fail@plt+0x17a00>
   293e4:	ldrb	r2, [r2, #6]
   293e8:	ldrb	lr, [r4, #52]	; 0x34
   293ec:	cmp	r1, #2
   293f0:	lsr	r2, r2, #4
   293f4:	orr	r2, r2, lr, lsr #5
   293f8:	and	r2, r2, #1
   293fc:	bic	lr, lr, #32
   29400:	orr	r2, lr, r2, lsl #5
   29404:	strb	r2, [r4, #52]	; 0x34
   29408:	uxtbeq	r2, r2
   2940c:	orreq	r2, r2, #16
   29410:	strbeq	r2, [r4, #52]	; 0x34
   29414:	beq	29428 <__assert_fail@plt+0x17a88>
   29418:	cmp	r1, #4
   2941c:	ldrbeq	r2, [r4, #52]	; 0x34
   29420:	orreq	r2, r2, #64	; 0x40
   29424:	strbeq	r2, [r4, #52]	; 0x34
   29428:	cmp	r7, #0
   2942c:	beq	293a0 <__assert_fail@plt+0x17a00>
   29430:	ldr	r2, [r4, #40]	; 0x28
   29434:	cmp	sl, r2
   29438:	beq	29514 <__assert_fail@plt+0x17b74>
   2943c:	tst	r7, #1
   29440:	bne	2934c <__assert_fail@plt+0x179ac>
   29444:	tst	r7, #2
   29448:	beq	2935c <__assert_fail@plt+0x179bc>
   2944c:	cmp	fp, #0
   29450:	beq	2935c <__assert_fail@plt+0x179bc>
   29454:	b	29384 <__assert_fail@plt+0x179e4>
   29458:	sub	r1, r1, #1
   2945c:	cmp	r2, r1
   29460:	str	r1, [r4, #8]
   29464:	bge	29398 <__assert_fail@plt+0x179f8>
   29468:	ldr	r1, [r4, #12]
   2946c:	add	r1, r1, r2, lsl #2
   29470:	ldr	r3, [r1, #4]
   29474:	add	r2, r2, #1
   29478:	str	r3, [r1], #4
   2947c:	ldr	r3, [r4, #8]
   29480:	cmp	r2, r3
   29484:	blt	29470 <__assert_fail@plt+0x17ad0>
   29488:	b	29398 <__assert_fail@plt+0x179f8>
   2948c:	ldr	fp, [sp, #8]
   29490:	mov	r2, fp
   29494:	mov	r0, r9
   29498:	mov	r1, r4
   2949c:	bl	1f3b8 <__assert_fail@plt+0xda18>
   294a0:	cmp	r0, #0
   294a4:	beq	29284 <__assert_fail@plt+0x178e4>
   294a8:	ldr	r0, [r4, #24]
   294ac:	bl	1f018 <__assert_fail@plt+0xd678>
   294b0:	ldr	r0, [r4, #36]	; 0x24
   294b4:	bl	1f018 <__assert_fail@plt+0xd678>
   294b8:	ldr	r3, [r4, #40]	; 0x28
   294bc:	ldr	r2, [sp, #16]
   294c0:	cmp	r2, r3
   294c4:	beq	294d8 <__assert_fail@plt+0x17b38>
   294c8:	ldr	r0, [r3, #8]
   294cc:	bl	1f018 <__assert_fail@plt+0xd678>
   294d0:	ldr	r0, [r4, #40]	; 0x28
   294d4:	bl	1f018 <__assert_fail@plt+0xd678>
   294d8:	ldr	r0, [r4, #12]
   294dc:	bl	1f018 <__assert_fail@plt+0xd678>
   294e0:	ldr	r0, [r4, #48]	; 0x30
   294e4:	bl	1f018 <__assert_fail@plt+0xd678>
   294e8:	ldr	r0, [r4, #44]	; 0x2c
   294ec:	bl	1f018 <__assert_fail@plt+0xd678>
   294f0:	mov	r0, r4
   294f4:	bl	1f018 <__assert_fail@plt+0xd678>
   294f8:	ldr	r2, [sp, #12]
   294fc:	mov	r3, #12
   29500:	mov	r4, #0
   29504:	mov	r0, r4
   29508:	str	r3, [r2]
   2950c:	add	sp, sp, #28
   29510:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29514:	mov	r0, #12
   29518:	bl	1f110 <__assert_fail@plt+0xd770>
   2951c:	subs	r1, r0, #0
   29520:	beq	294a8 <__assert_fail@plt+0x17b08>
   29524:	ldr	r0, [r8, #4]
   29528:	str	r1, [r4, #40]	; 0x28
   2952c:	cmp	r0, #0
   29530:	str	r0, [r1, #4]
   29534:	ble	295c0 <__assert_fail@plt+0x17c20>
   29538:	str	r0, [r1]
   2953c:	lsl	r0, r0, #2
   29540:	str	r1, [sp, #20]
   29544:	bl	1f110 <__assert_fail@plt+0xd770>
   29548:	ldr	r1, [sp, #20]
   2954c:	cmp	r0, #0
   29550:	str	r0, [r1, #8]
   29554:	beq	295d4 <__assert_fail@plt+0x17c34>
   29558:	ldr	r2, [r8, #4]
   2955c:	ldr	r1, [r8, #8]
   29560:	lsl	r2, r2, #2
   29564:	bl	115d4 <memcpy@plt>
   29568:	ldrb	r2, [r4, #52]	; 0x34
   2956c:	mov	r0, #0
   29570:	orr	r2, r2, #128	; 0x80
   29574:	strb	r2, [r4, #52]	; 0x34
   29578:	b	2943c <__assert_fail@plt+0x17a9c>
   2957c:	add	r1, r4, #4
   29580:	mov	r3, #0
   29584:	str	r3, [r4, #4]
   29588:	str	r3, [r1, #4]
   2958c:	str	r3, [r1, #8]
   29590:	ldrb	r2, [r4, #52]	; 0x34
   29594:	and	r3, r7, #15
   29598:	str	r1, [r4, #40]	; 0x28
   2959c:	bic	r2, r2, #15
   295a0:	orr	r3, r3, r2
   295a4:	strb	r3, [r4, #52]	; 0x34
   295a8:	b	29490 <__assert_fail@plt+0x17af0>
   295ac:	str	r0, [r4, #8]
   295b0:	str	r0, [r4, #4]
   295b4:	mov	r0, r4
   295b8:	bl	1f018 <__assert_fail@plt+0xd678>
   295bc:	b	294f8 <__assert_fail@plt+0x17b58>
   295c0:	mov	r3, #0
   295c4:	str	r3, [r1]
   295c8:	str	r3, [r1, #4]
   295cc:	str	r3, [r1, #8]
   295d0:	b	29568 <__assert_fail@plt+0x17bc8>
   295d4:	mov	sl, r1
   295d8:	str	r0, [sl, #4]
   295dc:	str	r0, [sl]
   295e0:	b	294a8 <__assert_fail@plt+0x17b08>
   295e4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   295e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   295ec:	mov	r8, r0
   295f0:	ldrb	r0, [r0, #28]
   295f4:	ldr	ip, [r8, #4]
   295f8:	sub	sp, sp, #148	; 0x94
   295fc:	mov	r7, r3
   29600:	and	r0, r0, #144	; 0x90
   29604:	mov	r3, #0
   29608:	cmp	ip, #159	; 0x9f
   2960c:	str	r7, [r8, #12]
   29610:	str	r1, [sp, #12]
   29614:	mov	r5, r2
   29618:	strb	r0, [r8, #28]
   2961c:	str	r3, [r8, #8]
   29620:	str	r3, [sp, #36]	; 0x24
   29624:	str	r3, [r8, #24]
   29628:	ldr	r4, [r8]
   2962c:	bls	2a0cc <__assert_fail@plt+0x1872c>
   29630:	mov	r2, #160	; 0xa0
   29634:	str	r2, [r8, #8]
   29638:	mov	r1, #0
   2963c:	mov	r0, r4
   29640:	bl	11814 <memset@plt>
   29644:	ldr	r2, [pc, #4084]	; 2a640 <__assert_fail@plt+0x18ca0>
   29648:	mov	r3, #31
   2964c:	cmp	r5, r2
   29650:	str	r3, [r4, #64]	; 0x40
   29654:	bhi	299f0 <__assert_fail@plt+0x18050>
   29658:	add	r3, r5, #1
   2965c:	str	r3, [r4, #4]
   29660:	lsl	r0, r3, #3
   29664:	str	r3, [sp, #16]
   29668:	bl	1f110 <__assert_fail@plt+0xd770>
   2966c:	cmp	r5, #0
   29670:	str	r0, [r4]
   29674:	beq	2a148 <__assert_fail@plt+0x187a8>
   29678:	mov	r1, #1
   2967c:	lsl	r1, r1, #1
   29680:	cmp	r5, r1
   29684:	bcs	2967c <__assert_fail@plt+0x17cdc>
   29688:	sub	sl, r1, #1
   2968c:	mov	r0, #12
   29690:	bl	1ed9c <__assert_fail@plt+0xd3fc>
   29694:	str	sl, [r4, #68]	; 0x44
   29698:	str	r0, [r4, #32]
   2969c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   296a0:	str	r0, [r4, #92]	; 0x5c
   296a4:	mov	r0, #14
   296a8:	bl	118b0 <nl_langinfo@plt>
   296ac:	ldrb	r3, [r0]
   296b0:	and	r3, r3, #223	; 0xdf
   296b4:	cmp	r3, #85	; 0x55
   296b8:	bne	296dc <__assert_fail@plt+0x17d3c>
   296bc:	ldrb	r3, [r0, #1]
   296c0:	and	r3, r3, #223	; 0xdf
   296c4:	cmp	r3, #84	; 0x54
   296c8:	bne	296dc <__assert_fail@plt+0x17d3c>
   296cc:	ldrb	r3, [r0, #2]
   296d0:	and	r3, r3, #223	; 0xdf
   296d4:	cmp	r3, #70	; 0x46
   296d8:	beq	29e5c <__assert_fail@plt+0x184bc>
   296dc:	ldrb	r3, [r4, #88]	; 0x58
   296e0:	ldr	r2, [r4, #92]	; 0x5c
   296e4:	bic	r3, r3, #8
   296e8:	cmp	r2, #1
   296ec:	strb	r3, [r4, #88]	; 0x58
   296f0:	ble	29708 <__assert_fail@plt+0x17d68>
   296f4:	uxtb	r3, r3
   296f8:	ands	r6, r3, #4
   296fc:	beq	29de4 <__assert_fail@plt+0x18444>
   29700:	ldr	r3, [pc, #3900]	; 2a644 <__assert_fail@plt+0x18ca4>
   29704:	str	r3, [r4, #60]	; 0x3c
   29708:	ldr	r3, [r4]
   2970c:	cmp	r3, #0
   29710:	beq	299f0 <__assert_fail@plt+0x18050>
   29714:	ldr	r3, [r4, #32]
   29718:	cmp	r3, #0
   2971c:	beq	299f0 <__assert_fail@plt+0x18050>
   29720:	ldr	r2, [pc, #3872]	; 2a648 <__assert_fail@plt+0x18ca8>
   29724:	mov	r3, #0
   29728:	ldr	r1, [pc, #3868]	; 2a64c <__assert_fail@plt+0x18cac>
   2972c:	cmp	r2, r3
   29730:	str	r3, [sp, #36]	; 0x24
   29734:	mov	r3, #1
   29738:	moveq	r3, r2
   2973c:	cmp	r1, #0
   29740:	mov	r2, #1
   29744:	moveq	r2, r1
   29748:	orr	r3, r3, r2
   2974c:	ands	r3, r3, #255	; 0xff
   29750:	str	r3, [sp, #24]
   29754:	beq	29778 <__assert_fail@plt+0x17dd8>
   29758:	mov	r1, #0
   2975c:	add	r0, r4, #136	; 0x88
   29760:	bl	115e0 <pthread_mutex_init@plt>
   29764:	cmp	r0, #0
   29768:	bne	299f0 <__assert_fail@plt+0x18050>
   2976c:	ldr	r3, [sp, #36]	; 0x24
   29770:	cmp	r3, #0
   29774:	bne	298fc <__assert_fail@plt+0x17f5c>
   29778:	ands	r3, r7, #4194304	; 0x400000
   2977c:	mov	r1, #0
   29780:	mov	r2, #84	; 0x54
   29784:	add	r0, sp, #60	; 0x3c
   29788:	moveq	fp, r1
   2978c:	movne	fp, #1
   29790:	ldr	sl, [r8, #20]
   29794:	str	r3, [sp, #20]
   29798:	bl	11814 <memset@plt>
   2979c:	ldrb	r2, [r4, #88]	; 0x58
   297a0:	ldr	ip, [sp, #12]
   297a4:	ldr	r1, [r4, #92]	; 0x5c
   297a8:	cmp	sl, #0
   297ac:	moveq	r3, fp
   297b0:	orrne	r3, fp, #1
   297b4:	lsr	r0, r2, #2
   297b8:	lsr	r2, r2, #3
   297bc:	and	r0, r0, #1
   297c0:	and	r2, r2, #1
   297c4:	cmp	r5, #0
   297c8:	str	ip, [sp, #60]	; 0x3c
   297cc:	strb	fp, [sp, #132]	; 0x84
   297d0:	strb	r3, [sp, #135]	; 0x87
   297d4:	str	sl, [sp, #124]	; 0x7c
   297d8:	str	r5, [sp, #108]	; 0x6c
   297dc:	str	r5, [sp, #104]	; 0x68
   297e0:	str	r5, [sp, #116]	; 0x74
   297e4:	str	r5, [sp, #112]	; 0x70
   297e8:	mov	ip, r3
   297ec:	strb	r0, [sp, #133]	; 0x85
   297f0:	strb	r2, [sp, #134]	; 0x86
   297f4:	str	r1, [sp, #140]	; 0x8c
   297f8:	beq	2991c <__assert_fail@plt+0x17f7c>
   297fc:	ldr	r2, [sp, #16]
   29800:	cmp	r1, #1
   29804:	mov	sl, r2
   29808:	ble	29860 <__assert_fail@plt+0x17ec0>
   2980c:	lsl	fp, r2, #2
   29810:	mov	r1, fp
   29814:	mov	r0, #0
   29818:	str	r3, [sp, #28]
   2981c:	bl	1f190 <__assert_fail@plt+0xd7f0>
   29820:	subs	r2, r0, #0
   29824:	beq	2987c <__assert_fail@plt+0x17edc>
   29828:	ldr	r0, [sp, #72]	; 0x48
   2982c:	str	r2, [sp, #68]	; 0x44
   29830:	cmp	r0, #0
   29834:	ldr	r3, [sp, #28]
   29838:	ldrbeq	ip, [sp, #135]	; 0x87
   2983c:	beq	29860 <__assert_fail@plt+0x17ec0>
   29840:	mov	r1, fp
   29844:	str	r3, [sp, #28]
   29848:	bl	1f190 <__assert_fail@plt+0xd7f0>
   2984c:	cmp	r0, #0
   29850:	beq	2987c <__assert_fail@plt+0x17edc>
   29854:	ldrb	ip, [sp, #135]	; 0x87
   29858:	ldr	r3, [sp, #28]
   2985c:	str	r0, [sp, #72]	; 0x48
   29860:	cmp	ip, #0
   29864:	bne	2a0a4 <__assert_fail@plt+0x18704>
   29868:	ldr	r2, [sp, #16]
   2986c:	ldr	r1, [r4, #92]	; 0x5c
   29870:	str	r2, [sp, #96]	; 0x60
   29874:	b	29920 <__assert_fail@plt+0x17f80>
   29878:	ldr	r4, [sp, #16]
   2987c:	mov	r0, #12
   29880:	str	r0, [sp, #36]	; 0x24
   29884:	ldr	r6, [r8]
   29888:	ldr	r0, [r6, #56]	; 0x38
   2988c:	cmp	r0, #0
   29890:	beq	298a4 <__assert_fail@plt+0x17f04>
   29894:	ldr	r5, [r0]
   29898:	bl	1f018 <__assert_fail@plt+0xd678>
   2989c:	subs	r0, r5, #0
   298a0:	bne	29894 <__assert_fail@plt+0x17ef4>
   298a4:	mov	r3, #31
   298a8:	mov	r5, #0
   298ac:	str	r3, [r6, #64]	; 0x40
   298b0:	ldr	r0, [r6, #16]
   298b4:	str	r5, [r6, #56]	; 0x38
   298b8:	str	r5, [r6, #52]	; 0x34
   298bc:	bl	1f018 <__assert_fail@plt+0xd678>
   298c0:	ldr	r0, [sp, #68]	; 0x44
   298c4:	str	r5, [r6, #16]
   298c8:	bl	1f018 <__assert_fail@plt+0xd678>
   298cc:	ldr	r0, [sp, #72]	; 0x48
   298d0:	bl	1f018 <__assert_fail@plt+0xd678>
   298d4:	ldrb	r3, [sp, #135]	; 0x87
   298d8:	cmp	r3, r5
   298dc:	beq	298e8 <__assert_fail@plt+0x17f48>
   298e0:	ldr	r0, [sp, #64]	; 0x40
   298e4:	bl	1f018 <__assert_fail@plt+0xd678>
   298e8:	ldr	r3, [sp, #24]
   298ec:	cmp	r3, #0
   298f0:	beq	298fc <__assert_fail@plt+0x17f5c>
   298f4:	add	r0, r4, #136	; 0x88
   298f8:	bl	1155c <pthread_mutex_destroy@plt>
   298fc:	mov	r0, r4
   29900:	bl	22c00 <__assert_fail@plt+0x11260>
   29904:	ldr	r0, [sp, #36]	; 0x24
   29908:	mov	r3, #0
   2990c:	str	r3, [r8]
   29910:	str	r3, [r8, #4]
   29914:	add	sp, sp, #148	; 0x94
   29918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2991c:	mov	sl, r5
   29920:	cmp	ip, #0
   29924:	ldrne	r6, [sp, #64]	; 0x40
   29928:	ldreq	r6, [sp, #12]
   2992c:	ands	r2, r7, #4194304	; 0x400000
   29930:	cmp	r2, #0
   29934:	str	r6, [sp, #64]	; 0x40
   29938:	beq	29d5c <__assert_fail@plt+0x183bc>
   2993c:	cmp	r1, #1
   29940:	ble	2a8a8 <__assert_fail@plt+0x18f08>
   29944:	add	r0, sp, #60	; 0x3c
   29948:	bl	1f694 <__assert_fail@plt+0xdcf4>
   2994c:	cmp	r0, #0
   29950:	bne	29880 <__assert_fail@plt+0x17ee0>
   29954:	ldr	r3, [sp, #92]	; 0x5c
   29958:	cmp	r5, r3
   2995c:	ble	29a04 <__assert_fail@plt+0x18064>
   29960:	ldr	r2, [sp, #88]	; 0x58
   29964:	ldr	r1, [r4, #92]	; 0x5c
   29968:	ldr	r3, [sp, #96]	; 0x60
   2996c:	add	r2, r2, r1
   29970:	cmp	r3, r2
   29974:	bgt	29a04 <__assert_fail@plt+0x18064>
   29978:	ldr	r2, [sp, #140]	; 0x8c
   2997c:	lsl	r9, r3, #1
   29980:	cmp	r2, #1
   29984:	ble	299cc <__assert_fail@plt+0x1802c>
   29988:	cmn	r9, #-1073741823	; 0xc0000001
   2998c:	bhi	2987c <__assert_fail@plt+0x17edc>
   29990:	lsl	r6, r3, #3
   29994:	mov	r1, r6
   29998:	ldr	r0, [sp, #68]	; 0x44
   2999c:	bl	1f190 <__assert_fail@plt+0xd7f0>
   299a0:	subs	r3, r0, #0
   299a4:	beq	2987c <__assert_fail@plt+0x17edc>
   299a8:	ldr	r0, [sp, #72]	; 0x48
   299ac:	str	r3, [sp, #68]	; 0x44
   299b0:	cmp	r0, #0
   299b4:	beq	299cc <__assert_fail@plt+0x1802c>
   299b8:	mov	r1, r6
   299bc:	bl	1f190 <__assert_fail@plt+0xd7f0>
   299c0:	cmp	r0, #0
   299c4:	beq	2987c <__assert_fail@plt+0x17edc>
   299c8:	str	r0, [sp, #72]	; 0x48
   299cc:	ldrb	r3, [sp, #135]	; 0x87
   299d0:	cmp	r3, #0
   299d4:	bne	29dc8 <__assert_fail@plt+0x18428>
   299d8:	add	r0, sp, #60	; 0x3c
   299dc:	str	r9, [sp, #96]	; 0x60
   299e0:	bl	1f694 <__assert_fail@plt+0xdcf4>
   299e4:	cmp	r0, #0
   299e8:	beq	29954 <__assert_fail@plt+0x17fb4>
   299ec:	b	29880 <__assert_fail@plt+0x17ee0>
   299f0:	mov	r3, #12
   299f4:	str	r3, [sp, #36]	; 0x24
   299f8:	b	298fc <__assert_fail@plt+0x17f5c>
   299fc:	add	r0, sp, #60	; 0x3c
   29a00:	bl	1f4f4 <__assert_fail@plt+0xdb54>
   29a04:	ldr	r5, [r8]
   29a08:	mov	r6, #0
   29a0c:	str	r6, [r8, #24]
   29a10:	orr	r2, r7, #8388608	; 0x800000
   29a14:	add	r1, sp, #60	; 0x3c
   29a18:	add	r0, sp, #40	; 0x28
   29a1c:	str	r7, [r5, #128]	; 0x80
   29a20:	str	r6, [sp, #36]	; 0x24
   29a24:	bl	22130 <__assert_fail@plt+0x10790>
   29a28:	ldr	ip, [sp, #100]	; 0x64
   29a2c:	add	r1, sp, #36	; 0x24
   29a30:	str	r6, [sp]
   29a34:	add	r2, sp, #40	; 0x28
   29a38:	str	r1, [sp, #4]
   29a3c:	mov	r3, r7
   29a40:	mov	r1, r8
   29a44:	add	ip, ip, r0
   29a48:	add	r0, sp, #60	; 0x3c
   29a4c:	str	ip, [sp, #100]	; 0x64
   29a50:	bl	28f80 <__assert_fail@plt+0x175e0>
   29a54:	ldr	r6, [sp, #36]	; 0x24
   29a58:	adds	r6, r6, #0
   29a5c:	movne	r6, #1
   29a60:	cmp	r0, #0
   29a64:	movne	r6, #0
   29a68:	cmp	r6, #0
   29a6c:	mov	r2, r0
   29a70:	bne	2a108 <__assert_fail@plt+0x18768>
   29a74:	add	fp, sp, #48	; 0x30
   29a78:	str	r6, [sp, #48]	; 0x30
   29a7c:	str	r6, [fp, #4]
   29a80:	ldr	r3, [r5, #64]	; 0x40
   29a84:	cmp	r3, #31
   29a88:	beq	2a114 <__assert_fail@plt+0x18774>
   29a8c:	lsl	ip, r3, #5
   29a90:	ldr	lr, [r5, #56]	; 0x38
   29a94:	add	r1, r3, #1
   29a98:	add	r3, ip, #4
   29a9c:	add	ip, lr, ip
   29aa0:	mov	r6, #0
   29aa4:	mov	r0, #2
   29aa8:	str	r1, [r5, #64]	; 0x40
   29aac:	str	r6, [ip, #4]
   29ab0:	str	r6, [ip, #8]
   29ab4:	str	r6, [ip, #12]
   29ab8:	strb	r0, [sp, #52]	; 0x34
   29abc:	ldm	fp, {r0, r1}
   29ac0:	add	r7, ip, #24
   29ac4:	cmp	r2, r6
   29ac8:	stm	r7, {r0, r1}
   29acc:	ldrb	r1, [ip, #30]
   29ad0:	mvn	r0, #0
   29ad4:	add	r3, lr, r3
   29ad8:	and	r1, r1, #243	; 0xf3
   29adc:	str	r6, [ip, #16]
   29ae0:	str	r6, [ip, #20]
   29ae4:	clz	r6, r3
   29ae8:	lsr	r6, r6, #5
   29aec:	strb	r1, [ip, #30]
   29af0:	str	r0, [ip, #32]
   29af4:	moveq	r2, r6
   29af8:	beq	29b2c <__assert_fail@plt+0x1818c>
   29afc:	mov	r1, #0
   29b00:	str	fp, [sp]
   29b04:	mov	ip, #16
   29b08:	str	r1, [fp, #4]
   29b0c:	str	r1, [sp, #48]	; 0x30
   29b10:	add	r0, r5, #56	; 0x38
   29b14:	add	r1, r5, #64	; 0x40
   29b18:	strb	ip, [sp, #52]	; 0x34
   29b1c:	bl	1ff70 <__assert_fail@plt+0xe5d0>
   29b20:	clz	r2, r0
   29b24:	mov	r3, r0
   29b28:	lsr	r2, r2, #5
   29b2c:	orrs	r2, r6, r2
   29b30:	str	r2, [sp, #12]
   29b34:	bne	2a100 <__assert_fail@plt+0x18760>
   29b38:	ldr	r6, [r8]
   29b3c:	str	r3, [r4, #52]	; 0x34
   29b40:	ldr	r0, [r6, #4]
   29b44:	lsl	r0, r0, #2
   29b48:	bl	1f110 <__assert_fail@plt+0xd770>
   29b4c:	ldr	r3, [r6, #4]
   29b50:	str	r0, [r6, #12]
   29b54:	lsl	r0, r3, #2
   29b58:	bl	1f110 <__assert_fail@plt+0xd770>
   29b5c:	ldr	r3, [r6, #4]
   29b60:	add	r3, r3, r3, lsl #1
   29b64:	str	r0, [r6, #16]
   29b68:	lsl	r0, r3, #2
   29b6c:	bl	1f110 <__assert_fail@plt+0xd770>
   29b70:	ldr	r3, [r6, #4]
   29b74:	add	r3, r3, r3, lsl #1
   29b78:	str	r0, [r6, #20]
   29b7c:	lsl	r0, r3, #2
   29b80:	bl	1f110 <__assert_fail@plt+0xd770>
   29b84:	ldr	r3, [r6, #12]
   29b88:	cmp	r3, #0
   29b8c:	str	r0, [r6, #24]
   29b90:	beq	2987c <__assert_fail@plt+0x17edc>
   29b94:	ldr	r3, [r6, #16]
   29b98:	cmp	r3, #0
   29b9c:	beq	2987c <__assert_fail@plt+0x17edc>
   29ba0:	ldr	r3, [r6, #20]
   29ba4:	cmp	r3, #0
   29ba8:	beq	29fdc <__assert_fail@plt+0x1863c>
   29bac:	cmp	r0, #0
   29bb0:	beq	2987c <__assert_fail@plt+0x17edc>
   29bb4:	ldr	r0, [r8, #24]
   29bb8:	lsl	r0, r0, #2
   29bbc:	bl	1f110 <__assert_fail@plt+0xd770>
   29bc0:	cmp	r0, #0
   29bc4:	str	r0, [r6, #132]	; 0x84
   29bc8:	ldreq	r5, [r6, #52]	; 0x34
   29bcc:	beq	29cb8 <__assert_fail@plt+0x18318>
   29bd0:	ldr	r2, [r8, #24]
   29bd4:	cmp	r2, #0
   29bd8:	subne	r1, r0, #4
   29bdc:	ldrne	r3, [sp, #12]
   29be0:	beq	29bf4 <__assert_fail@plt+0x18254>
   29be4:	str	r3, [r1, #4]!
   29be8:	add	r3, r3, #1
   29bec:	cmp	r3, r2
   29bf0:	bne	29be4 <__assert_fail@plt+0x18244>
   29bf4:	ldr	r5, [r6, #52]	; 0x34
   29bf8:	mov	r9, #0
   29bfc:	mov	r3, r5
   29c00:	ldrb	ip, [r5, #24]
   29c04:	mov	lr, #1
   29c08:	cmp	ip, #4
   29c0c:	beq	29c34 <__assert_fail@plt+0x18294>
   29c10:	cmp	ip, #17
   29c14:	beq	29e8c <__assert_fail@plt+0x184ec>
   29c18:	ldr	r1, [r3, #4]
   29c1c:	cmp	r1, #0
   29c20:	beq	29c58 <__assert_fail@plt+0x182b8>
   29c24:	ldrb	ip, [r1, #24]
   29c28:	mov	r3, r1
   29c2c:	cmp	ip, #4
   29c30:	bne	29c10 <__assert_fail@plt+0x18270>
   29c34:	ldr	ip, [r3, #20]
   29c38:	ldr	r1, [r3, #4]
   29c3c:	ldr	r7, [r0, ip, lsl #2]
   29c40:	cmp	r1, #0
   29c44:	str	r7, [r3, #20]
   29c48:	ldr	ip, [r6, #80]	; 0x50
   29c4c:	orr	ip, ip, lr, lsl r7
   29c50:	str	ip, [r6, #80]	; 0x50
   29c54:	bne	29c24 <__assert_fail@plt+0x18284>
   29c58:	mov	ip, r9
   29c5c:	b	29c64 <__assert_fail@plt+0x182c4>
   29c60:	mov	r3, r1
   29c64:	ldr	r1, [r3, #8]
   29c68:	cmp	r1, #0
   29c6c:	cmpne	r1, ip
   29c70:	bne	29c24 <__assert_fail@plt+0x18284>
   29c74:	ldr	r1, [r3]
   29c78:	mov	ip, r3
   29c7c:	cmp	r1, #0
   29c80:	bne	29c60 <__assert_fail@plt+0x182c0>
   29c84:	cmp	r2, #0
   29c88:	beq	2a880 <__assert_fail@plt+0x18ee0>
   29c8c:	ldr	r3, [r0]
   29c90:	cmp	r3, #0
   29c94:	beq	29ca8 <__assert_fail@plt+0x18308>
   29c98:	b	29cb8 <__assert_fail@plt+0x18318>
   29c9c:	ldr	r1, [r0, r3, lsl #2]
   29ca0:	cmp	r1, r3
   29ca4:	bne	29cb8 <__assert_fail@plt+0x18318>
   29ca8:	add	r3, r3, #1
   29cac:	cmp	r3, r2
   29cb0:	bcc	29c9c <__assert_fail@plt+0x182fc>
   29cb4:	beq	2a880 <__assert_fail@plt+0x18ee0>
   29cb8:	mov	r7, #0
   29cbc:	b	29cc4 <__assert_fail@plt+0x18324>
   29cc0:	mov	r5, r3
   29cc4:	ldr	r3, [r5, #4]
   29cc8:	cmp	r3, #0
   29ccc:	bne	29cc0 <__assert_fail@plt+0x18320>
   29cd0:	ldr	r3, [r5, #8]
   29cd4:	cmp	r3, #0
   29cd8:	bne	29cc0 <__assert_fail@plt+0x18320>
   29cdc:	mov	r2, r7
   29ce0:	b	29d14 <__assert_fail@plt+0x18374>
   29ce4:	ldr	r0, [sp, #48]	; 0x30
   29ce8:	cmp	r0, #0
   29cec:	bne	29880 <__assert_fail@plt+0x17ee0>
   29cf0:	ldr	r1, [r5]
   29cf4:	cmp	r1, #0
   29cf8:	beq	29f08 <__assert_fail@plt+0x18568>
   29cfc:	ldr	r2, [r1, #8]
   29d00:	cmp	r5, r2
   29d04:	cmpne	r2, #0
   29d08:	bne	2a894 <__assert_fail@plt+0x18ef4>
   29d0c:	ldr	r3, [r1, #4]
   29d10:	mov	r5, r1
   29d14:	cmp	r3, #0
   29d18:	str	r7, [sp, #48]	; 0x30
   29d1c:	beq	29d2c <__assert_fail@plt+0x1838c>
   29d20:	ldrb	r1, [r3, #24]
   29d24:	cmp	r1, #17
   29d28:	beq	29edc <__assert_fail@plt+0x1853c>
   29d2c:	cmp	r2, #0
   29d30:	beq	29cf0 <__assert_fail@plt+0x18350>
   29d34:	ldrb	r3, [r2, #24]
   29d38:	cmp	r3, #17
   29d3c:	bne	29ce4 <__assert_fail@plt+0x18344>
   29d40:	mov	r1, r8
   29d44:	mov	r0, fp
   29d48:	bl	25318 <__assert_fail@plt+0x13978>
   29d4c:	cmp	r0, #0
   29d50:	str	r0, [r5, #8]
   29d54:	strne	r5, [r0]
   29d58:	b	29ce4 <__assert_fail@plt+0x18344>
   29d5c:	cmp	r1, #1
   29d60:	bgt	299fc <__assert_fail@plt+0x1805c>
   29d64:	cmp	r3, #0
   29d68:	beq	2a89c <__assert_fail@plt+0x18efc>
   29d6c:	ldr	r2, [sp, #108]	; 0x6c
   29d70:	ldr	r3, [sp, #88]	; 0x58
   29d74:	cmp	sl, r2
   29d78:	movge	sl, r2
   29d7c:	cmp	sl, r3
   29d80:	bgt	29d94 <__assert_fail@plt+0x183f4>
   29d84:	str	r3, [sp, #88]	; 0x58
   29d88:	str	r3, [sp, #92]	; 0x5c
   29d8c:	b	29a04 <__assert_fail@plt+0x18064>
   29d90:	ldr	r6, [sp, #64]	; 0x40
   29d94:	ldr	r2, [sp, #60]	; 0x3c
   29d98:	ldr	r0, [sp, #84]	; 0x54
   29d9c:	add	r2, r2, r3
   29da0:	ldr	r1, [sp, #124]	; 0x7c
   29da4:	ldrb	r2, [r2, r0]
   29da8:	ldrb	r2, [r1, r2]
   29dac:	strb	r2, [r6, r3]
   29db0:	add	r3, r3, #1
   29db4:	cmp	sl, r3
   29db8:	bne	29d90 <__assert_fail@plt+0x183f0>
   29dbc:	str	r3, [sp, #88]	; 0x58
   29dc0:	str	r3, [sp, #92]	; 0x5c
   29dc4:	b	29a04 <__assert_fail@plt+0x18064>
   29dc8:	mov	r1, r9
   29dcc:	ldr	r0, [sp, #64]	; 0x40
   29dd0:	bl	1f190 <__assert_fail@plt+0xd7f0>
   29dd4:	cmp	r0, #0
   29dd8:	beq	2987c <__assert_fail@plt+0x17edc>
   29ddc:	str	r0, [sp, #64]	; 0x40
   29de0:	b	299d8 <__assert_fail@plt+0x18038>
   29de4:	mov	r1, #1
   29de8:	mov	r0, #32
   29dec:	bl	1ed9c <__assert_fail@plt+0xd3fc>
   29df0:	cmp	r0, #0
   29df4:	str	r0, [r4, #60]	; 0x3c
   29df8:	beq	299f0 <__assert_fail@plt+0x18050>
   29dfc:	mov	fp, #1
   29e00:	lsl	r9, r6, #3
   29e04:	mov	sl, #0
   29e08:	mov	r0, r9
   29e0c:	bl	1182c <btowc@plt>
   29e10:	cmn	r0, #1
   29e14:	ldrne	r2, [r4, #60]	; 0x3c
   29e18:	ldrne	r3, [r2, r6]
   29e1c:	orrne	r3, r3, fp, lsl sl
   29e20:	strne	r3, [r2, r6]
   29e24:	bics	r3, r9, #127	; 0x7f
   29e28:	bne	29e3c <__assert_fail@plt+0x1849c>
   29e2c:	cmp	r0, r9
   29e30:	ldrbne	r3, [r4, #88]	; 0x58
   29e34:	orrne	r3, r3, #8
   29e38:	strbne	r3, [r4, #88]	; 0x58
   29e3c:	add	sl, sl, #1
   29e40:	cmp	sl, #32
   29e44:	add	r9, r9, #1
   29e48:	bne	29e08 <__assert_fail@plt+0x18468>
   29e4c:	add	r6, r6, #4
   29e50:	cmp	r6, #32
   29e54:	bne	29e00 <__assert_fail@plt+0x18460>
   29e58:	b	29708 <__assert_fail@plt+0x17d68>
   29e5c:	ldrb	r3, [r0, #3]
   29e60:	ldr	r1, [pc, #2024]	; 2a650 <__assert_fail@plt+0x18cb0>
   29e64:	cmp	r3, #45	; 0x2d
   29e68:	moveq	r3, #4
   29e6c:	movne	r3, #3
   29e70:	add	r0, r0, r3
   29e74:	bl	11544 <strcmp@plt>
   29e78:	cmp	r0, #0
   29e7c:	ldrbeq	r3, [r4, #88]	; 0x58
   29e80:	orreq	r3, r3, #4
   29e84:	strbeq	r3, [r4, #88]	; 0x58
   29e88:	b	296dc <__assert_fail@plt+0x17d3c>
   29e8c:	ldr	r7, [r3, #4]
   29e90:	cmp	r7, #0
   29e94:	beq	29c58 <__assert_fail@plt+0x182b8>
   29e98:	ldrb	ip, [r7, #24]
   29e9c:	cmp	ip, #17
   29ea0:	movne	r3, r7
   29ea4:	bne	29c08 <__assert_fail@plt+0x18268>
   29ea8:	ldr	r1, [r7, #4]
   29eac:	ldr	ip, [r7, #20]
   29eb0:	cmp	r1, #0
   29eb4:	str	r1, [r3, #4]
   29eb8:	strne	r3, [r1]
   29ebc:	ldr	r7, [r3, #20]
   29ec0:	cmp	ip, #31
   29ec4:	ldr	r7, [r0, r7, lsl #2]
   29ec8:	str	r7, [r0, ip, lsl #2]
   29ecc:	ldrle	r7, [r6, #80]	; 0x50
   29ed0:	bicle	ip, r7, lr, lsl ip
   29ed4:	strle	ip, [r6, #80]	; 0x50
   29ed8:	b	29c1c <__assert_fail@plt+0x1827c>
   29edc:	mov	r2, r3
   29ee0:	mov	r1, r8
   29ee4:	mov	r0, fp
   29ee8:	bl	25318 <__assert_fail@plt+0x13978>
   29eec:	ldr	r2, [r5, #8]
   29ef0:	cmp	r0, #0
   29ef4:	str	r0, [r5, #4]
   29ef8:	strne	r5, [r0]
   29efc:	cmp	r2, #0
   29f00:	bne	29d34 <__assert_fail@plt+0x18394>
   29f04:	b	29ce4 <__assert_fail@plt+0x18344>
   29f08:	ldr	r9, [r6, #52]	; 0x34
   29f0c:	ldr	r7, [pc, #1856]	; 2a654 <__assert_fail@plt+0x18cb4>
   29f10:	ldr	r5, [pc, #1856]	; 2a658 <__assert_fail@plt+0x18cb8>
   29f14:	b	29f1c <__assert_fail@plt+0x1857c>
   29f18:	mov	r9, r3
   29f1c:	ldr	r3, [r9, #4]
   29f20:	cmp	r3, #0
   29f24:	bne	29f18 <__assert_fail@plt+0x18578>
   29f28:	ldr	r3, [r9, #8]
   29f2c:	cmp	r3, #0
   29f30:	bne	29f18 <__assert_fail@plt+0x18578>
   29f34:	b	29fb0 <__assert_fail@plt+0x18610>
   29f38:	add	r3, r9, #20
   29f3c:	str	r9, [r9, #12]
   29f40:	ldm	r3, {r1, r2}
   29f44:	mov	r0, r6
   29f48:	bl	1fc10 <__assert_fail@plt+0xe270>
   29f4c:	cmn	r0, #1
   29f50:	str	r0, [r9, #28]
   29f54:	beq	2987c <__assert_fail@plt+0x17edc>
   29f58:	ldrb	r3, [r9, #24]
   29f5c:	cmp	r3, #12
   29f60:	bne	29f84 <__assert_fail@plt+0x185e4>
   29f64:	ldr	r3, [r6]
   29f68:	ldr	r2, [r9, #20]
   29f6c:	add	r0, r3, r0, lsl #3
   29f70:	and	r2, r2, r7
   29f74:	ldr	r3, [r0, #4]
   29f78:	bic	r3, r3, r5
   29f7c:	orr	r3, r3, r2, lsl #8
   29f80:	str	r3, [r0, #4]
   29f84:	ldr	r2, [r9]
   29f88:	cmp	r2, #0
   29f8c:	beq	29fe8 <__assert_fail@plt+0x18648>
   29f90:	ldr	r3, [r2, #8]
   29f94:	cmp	r3, #0
   29f98:	cmpne	r9, r3
   29f9c:	moveq	r9, #1
   29fa0:	movne	r9, #0
   29fa4:	cmp	r9, #0
   29fa8:	mov	r9, r2
   29fac:	beq	29f18 <__assert_fail@plt+0x18578>
   29fb0:	ldrb	r3, [r9, #24]
   29fb4:	cmp	r3, #16
   29fb8:	bne	29f38 <__assert_fail@plt+0x18598>
   29fbc:	ldr	r3, [r9, #4]
   29fc0:	ldr	r2, [r3, #12]
   29fc4:	ldr	r3, [r3, #28]
   29fc8:	str	r2, [r9, #12]
   29fcc:	str	r3, [r9, #28]
   29fd0:	b	29f84 <__assert_fail@plt+0x185e4>
   29fd4:	ldr	r4, [sp, #12]
   29fd8:	ldr	r8, [sp, #16]
   29fdc:	mov	r3, #12
   29fe0:	str	r3, [sp, #36]	; 0x24
   29fe4:	b	29884 <__assert_fail@plt+0x17ee4>
   29fe8:	ldr	r7, [r6, #52]	; 0x34
   29fec:	mov	r3, r7
   29ff0:	ldrb	r1, [r3, #24]
   29ff4:	cmp	r1, #11
   29ff8:	beq	2a028 <__assert_fail@plt+0x18688>
   29ffc:	cmp	r1, #16
   2a000:	bne	2a038 <__assert_fail@plt+0x18698>
   2a004:	ldmib	r3, {r0, r1}
   2a008:	ldr	ip, [r1, #12]
   2a00c:	str	ip, [r0, #16]
   2a010:	ldr	ip, [r3, #16]
   2a014:	mov	r3, r0
   2a018:	str	ip, [r1, #16]
   2a01c:	ldrb	r1, [r3, #24]
   2a020:	cmp	r1, #11
   2a024:	bne	29ffc <__assert_fail@plt+0x1865c>
   2a028:	ldr	r1, [r3, #4]
   2a02c:	str	r3, [r1, #16]
   2a030:	mov	r3, r1
   2a034:	b	29ff0 <__assert_fail@plt+0x18650>
   2a038:	ldmib	r3, {r0, ip}
   2a03c:	cmp	r0, #0
   2a040:	beq	2a860 <__assert_fail@plt+0x18ec0>
   2a044:	ldr	r1, [r3, #16]
   2a048:	cmp	ip, #0
   2a04c:	str	r1, [r0, #16]
   2a050:	beq	2a064 <__assert_fail@plt+0x186c4>
   2a054:	ldr	r1, [r3, #16]
   2a058:	cmp	r0, #0
   2a05c:	str	r1, [ip, #16]
   2a060:	beq	2a06c <__assert_fail@plt+0x186cc>
   2a064:	mov	r3, r0
   2a068:	b	29ff0 <__assert_fail@plt+0x18650>
   2a06c:	mov	r1, ip
   2a070:	mov	r0, r2
   2a074:	b	2a090 <__assert_fail@plt+0x186f0>
   2a078:	ldr	r9, [r3]
   2a07c:	cmp	r9, #0
   2a080:	beq	2a154 <__assert_fail@plt+0x187b4>
   2a084:	ldr	r1, [r9, #8]
   2a088:	mov	r0, r3
   2a08c:	mov	r3, r9
   2a090:	cmp	r1, r0
   2a094:	cmpne	r1, #0
   2a098:	beq	2a078 <__assert_fail@plt+0x186d8>
   2a09c:	mov	r3, r1
   2a0a0:	b	29ff0 <__assert_fail@plt+0x18650>
   2a0a4:	ldr	r1, [sp, #16]
   2a0a8:	ldr	r0, [sp, #64]	; 0x40
   2a0ac:	str	r3, [sp, #28]
   2a0b0:	bl	1f190 <__assert_fail@plt+0xd7f0>
   2a0b4:	cmp	r0, #0
   2a0b8:	beq	2987c <__assert_fail@plt+0x17edc>
   2a0bc:	ldrb	ip, [sp, #135]	; 0x87
   2a0c0:	str	r0, [sp, #64]	; 0x40
   2a0c4:	ldr	r3, [sp, #28]
   2a0c8:	b	29868 <__assert_fail@plt+0x17ec8>
   2a0cc:	mov	r0, r4
   2a0d0:	mov	r1, #160	; 0xa0
   2a0d4:	bl	1f190 <__assert_fail@plt+0xd7f0>
   2a0d8:	subs	r4, r0, #0
   2a0dc:	beq	2a90c <__assert_fail@plt+0x18f6c>
   2a0e0:	mov	r3, #160	; 0xa0
   2a0e4:	str	r4, [r8]
   2a0e8:	str	r3, [r8, #4]
   2a0ec:	b	29630 <__assert_fail@plt+0x17c90>
   2a0f0:	cmp	r2, #0
   2a0f4:	movne	r3, lr
   2a0f8:	movne	r6, #1
   2a0fc:	bne	29afc <__assert_fail@plt+0x1815c>
   2a100:	mov	r3, #12
   2a104:	str	r3, [sp, #36]	; 0x24
   2a108:	mov	r3, #0
   2a10c:	str	r3, [r4, #52]	; 0x34
   2a110:	b	29884 <__assert_fail@plt+0x17ee4>
   2a114:	mov	r0, #996	; 0x3e4
   2a118:	str	r2, [sp, #12]
   2a11c:	bl	1f110 <__assert_fail@plt+0xd770>
   2a120:	ldr	r2, [sp, #12]
   2a124:	subs	lr, r0, #0
   2a128:	beq	2a0f0 <__assert_fail@plt+0x18750>
   2a12c:	ldr	r0, [r5, #56]	; 0x38
   2a130:	mov	ip, r6
   2a134:	str	r0, [lr]
   2a138:	mov	r1, #1
   2a13c:	mov	r3, #4
   2a140:	str	lr, [r5, #56]	; 0x38
   2a144:	b	29a9c <__assert_fail@plt+0x180fc>
   2a148:	mov	sl, r5
   2a14c:	mov	r1, #1
   2a150:	b	2968c <__assert_fail@plt+0x17cec>
   2a154:	str	r4, [sp, #16]
   2a158:	ldrb	r3, [r7, #24]
   2a15c:	ldr	r2, [r7, #28]
   2a160:	sub	r3, r3, #2
   2a164:	cmp	r3, #14
   2a168:	ldrls	pc, [pc, r3, lsl #2]
   2a16c:	b	2a328 <__assert_fail@plt+0x18988>
   2a170:	andeq	sl, r2, r0, lsr r2
   2a174:	andeq	sl, r2, r8, lsr #6
   2a178:	strdeq	sl, [r2], -r8
   2a17c:	andeq	sl, r2, r8, lsr #6
   2a180:	andeq	sl, r2, r8, lsr #6
   2a184:	andeq	sl, r2, r8, lsr #6
   2a188:			; <UNDEFINED> instruction: 0x0002a2bc
   2a18c:			; <UNDEFINED> instruction: 0x0002a2bc
   2a190:	andeq	sl, r2, ip, lsr #3
   2a194:	andeq	sl, r2, ip, lsr #3
   2a198:			; <UNDEFINED> instruction: 0x0002a2bc
   2a19c:	andeq	sl, r2, r8, lsr #6
   2a1a0:	andeq	sl, r2, r8, lsr #6
   2a1a4:	andeq	sl, r2, r8, lsr #6
   2a1a8:	andeq	sl, r2, r0, lsr r2
   2a1ac:	ldrb	r3, [r6, #88]	; 0x58
   2a1b0:	ldr	r5, [r6, #20]
   2a1b4:	add	r2, r2, r2, lsl #1
   2a1b8:	orr	r3, r3, #1
   2a1bc:	strb	r3, [r6, #88]	; 0x58
   2a1c0:	ldr	r3, [r7, #4]
   2a1c4:	mov	r0, #8
   2a1c8:	cmp	r3, #0
   2a1cc:	ldrne	r3, [r3, #12]
   2a1d0:	ldreq	r3, [r7, #16]
   2a1d4:	ldr	sl, [r3, #28]
   2a1d8:	ldr	r3, [r7, #8]
   2a1dc:	cmp	r3, #0
   2a1e0:	ldrne	r3, [r3, #12]
   2a1e4:	ldreq	r3, [r7, #16]
   2a1e8:	ldr	r4, [r3, #28]
   2a1ec:	mov	r3, #2
   2a1f0:	str	r3, [r5, r2, lsl #2]
   2a1f4:	add	r5, r5, r2, lsl r3
   2a1f8:	bl	1f110 <__assert_fail@plt+0xd770>
   2a1fc:	cmp	r0, #0
   2a200:	str	r0, [r5, #8]
   2a204:	beq	29878 <__assert_fail@plt+0x17ed8>
   2a208:	cmp	sl, r4
   2a20c:	moveq	r3, #1
   2a210:	streq	r3, [r5, #4]
   2a214:	streq	sl, [r0]
   2a218:	beq	2a230 <__assert_fail@plt+0x18890>
   2a21c:	mov	r3, #2
   2a220:	str	r3, [r5, #4]
   2a224:	strlt	sl, [r0]
   2a228:	strlt	r4, [r0, #4]
   2a22c:	stmge	r0, {r4, sl}
   2a230:	ldr	r3, [r7, #4]
   2a234:	cmp	r3, #0
   2a238:	moveq	r2, r9
   2a23c:	beq	2a24c <__assert_fail@plt+0x188ac>
   2a240:	mov	r7, r3
   2a244:	b	2a158 <__assert_fail@plt+0x187b8>
   2a248:	mov	r7, r5
   2a24c:	ldr	r3, [r7, #8]
   2a250:	cmp	r3, #0
   2a254:	cmpne	r3, r2
   2a258:	moveq	sl, #1
   2a25c:	movne	sl, #0
   2a260:	bne	2a240 <__assert_fail@plt+0x188a0>
   2a264:	ldr	r5, [r7]
   2a268:	mov	r2, r7
   2a26c:	cmp	r5, #0
   2a270:	bne	2a248 <__assert_fail@plt+0x188a8>
   2a274:	ldr	r4, [sp, #16]
   2a278:	ldr	r2, [r6, #24]
   2a27c:	ldr	r9, [sp, #12]
   2a280:	add	r7, r5, r5, lsl #1
   2a284:	lsl	r7, r7, #2
   2a288:	add	r3, r2, r7
   2a28c:	ldr	r3, [r3, #4]
   2a290:	cmp	r3, #0
   2a294:	beq	2a33c <__assert_fail@plt+0x1899c>
   2a298:	ldr	r0, [r6, #8]
   2a29c:	add	r5, r5, #1
   2a2a0:	cmp	r0, r5
   2a2a4:	bne	2a280 <__assert_fail@plt+0x188e0>
   2a2a8:	cmp	r9, #0
   2a2ac:	beq	2a39c <__assert_fail@plt+0x189fc>
   2a2b0:	ldr	r9, [sp, #12]
   2a2b4:	mov	r5, #0
   2a2b8:	b	2a280 <__assert_fail@plt+0x188e0>
   2a2bc:	ldr	r1, [r7, #16]
   2a2c0:	add	r2, r2, r2, lsl #1
   2a2c4:	ldr	r3, [r6, #20]
   2a2c8:	ldr	sl, [r1, #28]
   2a2cc:	add	r5, r3, r2, lsl #2
   2a2d0:	mov	r0, #4
   2a2d4:	mov	r1, #1
   2a2d8:	str	r1, [r3, r2, lsl #2]
   2a2dc:	str	r1, [r5, #4]
   2a2e0:	bl	1f110 <__assert_fail@plt+0xd770>
   2a2e4:	cmp	r0, #0
   2a2e8:	str	r0, [r5, #8]
   2a2ec:	beq	2a914 <__assert_fail@plt+0x18f74>
   2a2f0:	str	sl, [r0]
   2a2f4:	b	2a230 <__assert_fail@plt+0x18890>
   2a2f8:	ldr	r1, [r7, #16]
   2a2fc:	ldr	r3, [r6, #12]
   2a300:	ldr	sl, [r1, #28]
   2a304:	str	sl, [r3, r2, lsl #2]
   2a308:	ldrb	r3, [r7, #24]
   2a30c:	cmp	r3, #4
   2a310:	bne	2a230 <__assert_fail@plt+0x18890>
   2a314:	add	r2, r2, r2, lsl #1
   2a318:	ldr	r3, [r6, #20]
   2a31c:	mov	r0, #4
   2a320:	add	r5, r3, r2, lsl #2
   2a324:	b	2a2d4 <__assert_fail@plt+0x18934>
   2a328:	ldr	r1, [r7, #16]
   2a32c:	ldr	r3, [r6, #12]
   2a330:	ldr	r1, [r1, #28]
   2a334:	str	r1, [r3, r2, lsl #2]
   2a338:	b	2a230 <__assert_fail@plt+0x18890>
   2a33c:	mov	r3, #1
   2a340:	mov	r2, r5
   2a344:	mov	r1, r6
   2a348:	mov	r0, fp
   2a34c:	bl	233b4 <__assert_fail@plt+0x11a14>
   2a350:	cmp	r0, #0
   2a354:	bne	29880 <__assert_fail@plt+0x17ee0>
   2a358:	ldr	r2, [r6, #24]
   2a35c:	add	r7, r2, r7
   2a360:	ldr	r7, [r7, #4]
   2a364:	cmp	r7, #0
   2a368:	bne	2a298 <__assert_fail@plt+0x188f8>
   2a36c:	ldr	r0, [sp, #56]	; 0x38
   2a370:	bl	1f018 <__assert_fail@plt+0xd678>
   2a374:	ldr	r3, [r6, #8]
   2a378:	add	r5, r5, #1
   2a37c:	cmp	r3, r5
   2a380:	movne	r9, sl
   2a384:	beq	2a390 <__assert_fail@plt+0x189f0>
   2a388:	ldr	r2, [r6, #24]
   2a38c:	b	2a280 <__assert_fail@plt+0x188e0>
   2a390:	mov	r5, r7
   2a394:	ldr	r9, [sp, #12]
   2a398:	b	2a388 <__assert_fail@plt+0x189e8>
   2a39c:	ldrb	r3, [r8, #28]
   2a3a0:	tst	r3, #16
   2a3a4:	bne	2a3b4 <__assert_fail@plt+0x18a14>
   2a3a8:	ldr	r3, [r8, #24]
   2a3ac:	cmp	r3, #0
   2a3b0:	bne	2a870 <__assert_fail@plt+0x18ed0>
   2a3b4:	ldr	r3, [r6, #76]	; 0x4c
   2a3b8:	cmp	r3, #0
   2a3bc:	beq	2a4ec <__assert_fail@plt+0x18b4c>
   2a3c0:	add	r0, r0, r0, lsl #1
   2a3c4:	lsl	r0, r0, #2
   2a3c8:	bl	1f110 <__assert_fail@plt+0xd770>
   2a3cc:	cmp	r0, #0
   2a3d0:	str	r0, [r6, #28]
   2a3d4:	beq	2987c <__assert_fail@plt+0x17edc>
   2a3d8:	ldr	r3, [r6, #8]
   2a3dc:	cmp	r3, #0
   2a3e0:	beq	2a4ec <__assert_fail@plt+0x18b4c>
   2a3e4:	mov	r3, #0
   2a3e8:	mov	r2, r0
   2a3ec:	mov	r1, r3
   2a3f0:	mov	r0, r3
   2a3f4:	b	2a3fc <__assert_fail@plt+0x18a5c>
   2a3f8:	ldr	r2, [r6, #28]
   2a3fc:	add	ip, r2, r3
   2a400:	str	r1, [r2, r3]
   2a404:	str	r1, [ip, #4]
   2a408:	str	r1, [ip, #8]
   2a40c:	ldr	r2, [r6, #8]
   2a410:	add	r0, r0, #1
   2a414:	cmp	r0, r2
   2a418:	add	r3, r3, #12
   2a41c:	bcc	2a3f8 <__assert_fail@plt+0x18a58>
   2a420:	cmp	r2, #0
   2a424:	beq	2a4ec <__assert_fail@plt+0x18b4c>
   2a428:	mov	r3, #0
   2a42c:	ldr	lr, [r6, #24]
   2a430:	str	r8, [sp, #16]
   2a434:	mov	sl, r3
   2a438:	mov	r8, r3
   2a43c:	str	r4, [sp, #12]
   2a440:	add	r0, lr, r8
   2a444:	ldmib	r0, {r3, r7}
   2a448:	cmp	r3, #0
   2a44c:	ble	2a4d4 <__assert_fail@plt+0x18b34>
   2a450:	sub	r7, r7, #4
   2a454:	mov	r5, #0
   2a458:	b	2a47c <__assert_fail@plt+0x18adc>
   2a45c:	ldr	r3, [r4, #8]
   2a460:	add	r1, r2, #1
   2a464:	str	r1, [r4, #4]
   2a468:	str	sl, [r3, r2, lsl #2]
   2a46c:	ldr	r3, [r0, #4]
   2a470:	add	r5, r5, #1
   2a474:	cmp	r5, r3
   2a478:	bge	2a4d0 <__assert_fail@plt+0x18b30>
   2a47c:	ldr	r3, [r7, #4]!
   2a480:	ldr	ip, [r6, #28]
   2a484:	add	r3, r3, r3, lsl #1
   2a488:	add	r4, ip, r3, lsl #2
   2a48c:	ldr	r1, [ip, r3, lsl #2]
   2a490:	ldr	r2, [r4, #4]
   2a494:	cmp	r1, r2
   2a498:	bne	2a45c <__assert_fail@plt+0x18abc>
   2a49c:	add	r2, r2, #1
   2a4a0:	ldr	r0, [r4, #8]
   2a4a4:	lsl	r1, r2, #1
   2a4a8:	str	r1, [ip, r3, lsl #2]
   2a4ac:	lsl	r1, r2, #3
   2a4b0:	bl	1f190 <__assert_fail@plt+0xd7f0>
   2a4b4:	subs	r3, r0, #0
   2a4b8:	beq	29fd4 <__assert_fail@plt+0x18634>
   2a4bc:	ldr	lr, [r6, #24]
   2a4c0:	ldr	r2, [r4, #4]
   2a4c4:	add	r0, lr, r8
   2a4c8:	str	r3, [r4, #8]
   2a4cc:	b	2a460 <__assert_fail@plt+0x18ac0>
   2a4d0:	ldr	r2, [r6, #8]
   2a4d4:	add	sl, sl, #1
   2a4d8:	cmp	sl, r2
   2a4dc:	add	r8, r8, #12
   2a4e0:	bcc	2a440 <__assert_fail@plt+0x18aa0>
   2a4e4:	ldr	r4, [sp, #12]
   2a4e8:	ldr	r8, [sp, #16]
   2a4ec:	ldrb	r2, [r4, #88]	; 0x58
   2a4f0:	ldr	r3, [sp, #20]
   2a4f4:	clz	r3, r3
   2a4f8:	lsr	r3, r3, #5
   2a4fc:	mov	r1, #0
   2a500:	ands	r3, r3, r2, lsr #2
   2a504:	str	r1, [sp, #36]	; 0x24
   2a508:	beq	2a518 <__assert_fail@plt+0x18b78>
   2a50c:	ldr	r2, [r8, #20]
   2a510:	cmp	r2, #0
   2a514:	beq	2a928 <__assert_fail@plt+0x18f88>
   2a518:	ldr	r3, [r4, #52]	; 0x34
   2a51c:	ldr	r5, [r4, #24]
   2a520:	ldr	r3, [r3, #12]
   2a524:	ldr	r3, [r3, #28]
   2a528:	str	r3, [r4, #72]	; 0x48
   2a52c:	add	r3, r3, r3, lsl #1
   2a530:	add	r5, r5, r3, lsl #2
   2a534:	ldr	r3, [r5, #4]
   2a538:	str	r3, [sp, #52]	; 0x34
   2a53c:	ldr	r2, [r5, #4]
   2a540:	cmp	r2, #0
   2a544:	ble	2a7b4 <__assert_fail@plt+0x18e14>
   2a548:	lsl	r0, r3, #2
   2a54c:	str	r3, [sp, #48]	; 0x30
   2a550:	bl	1f110 <__assert_fail@plt+0xd770>
   2a554:	cmp	r0, #0
   2a558:	mov	r6, r0
   2a55c:	str	r0, [sp, #56]	; 0x38
   2a560:	beq	2a858 <__assert_fail@plt+0x18eb8>
   2a564:	ldr	r2, [r5, #4]
   2a568:	ldr	r1, [r5, #8]
   2a56c:	lsl	r2, r2, #2
   2a570:	bl	115d4 <memcpy@plt>
   2a574:	mov	r0, r6
   2a578:	ldr	r3, [r4, #76]	; 0x4c
   2a57c:	mov	r7, #0
   2a580:	cmp	r3, r7
   2a584:	str	r7, [sp, #40]	; 0x28
   2a588:	ble	2a6d8 <__assert_fail@plt+0x18d38>
   2a58c:	ldr	r6, [sp, #52]	; 0x34
   2a590:	cmp	r6, r7
   2a594:	ble	2a6d8 <__assert_fail@plt+0x18d38>
   2a598:	mov	r5, r7
   2a59c:	b	2a5b0 <__assert_fail@plt+0x18c10>
   2a5a0:	add	r7, r7, #1
   2a5a4:	cmp	r6, r7
   2a5a8:	ble	2a6d8 <__assert_fail@plt+0x18d38>
   2a5ac:	ldr	r0, [sp, #56]	; 0x38
   2a5b0:	ldr	sl, [r0, r7, lsl #2]
   2a5b4:	ldr	lr, [r4]
   2a5b8:	add	r9, lr, sl, lsl #3
   2a5bc:	ldrb	r3, [r9, #4]
   2a5c0:	cmp	r3, #4
   2a5c4:	bne	2a5a0 <__assert_fail@plt+0x18c00>
   2a5c8:	sub	r1, r0, #4
   2a5cc:	mov	r3, #0
   2a5d0:	b	2a5e0 <__assert_fail@plt+0x18c40>
   2a5d4:	add	r3, r3, #1
   2a5d8:	cmp	r6, r3
   2a5dc:	beq	2a5a0 <__assert_fail@plt+0x18c00>
   2a5e0:	ldr	r2, [r1, #4]!
   2a5e4:	add	ip, lr, r2, lsl #3
   2a5e8:	ldrb	ip, [ip, #4]
   2a5ec:	cmp	ip, #9
   2a5f0:	bne	2a5d4 <__assert_fail@plt+0x18c34>
   2a5f4:	ldr	ip, [lr, r2, lsl #3]
   2a5f8:	ldr	r2, [r9]
   2a5fc:	cmp	ip, r2
   2a600:	bne	2a5d4 <__assert_fail@plt+0x18c34>
   2a604:	ldr	r3, [r4, #20]
   2a608:	add	sl, sl, sl, lsl #1
   2a60c:	sub	ip, r6, #1
   2a610:	add	sl, r3, sl, lsl #2
   2a614:	mov	r1, r5
   2a618:	ldr	r3, [sl, #8]
   2a61c:	ldr	lr, [r3]
   2a620:	cmp	r1, ip
   2a624:	bcs	2a67c <__assert_fail@plt+0x18cdc>
   2a628:	add	r2, r1, ip
   2a62c:	lsr	r2, r2, #1
   2a630:	ldr	r3, [r0, r2, lsl #2]
   2a634:	cmp	lr, r3
   2a638:	ble	2a674 <__assert_fail@plt+0x18cd4>
   2a63c:	b	2a798 <__assert_fail@plt+0x18df8>
   2a640:	beq	fead50ec <optarg@@GLIBC_2.4+0xfea8fecc>
   2a644:	andeq	r3, r3, r4, lsl #28
	...
   2a650:	andeq	r4, r3, r4, asr #32
   2a654:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2a658:	andeq	pc, r3, r0, lsl #30
   2a65c:	add	r3, r2, r1
   2a660:	lsr	r3, r3, #1
   2a664:	ldr	ip, [r0, r3, lsl #2]
   2a668:	cmp	lr, ip
   2a66c:	bgt	2a7a0 <__assert_fail@plt+0x18e00>
   2a670:	mov	r2, r3
   2a674:	cmp	r2, r1
   2a678:	bhi	2a65c <__assert_fail@plt+0x18cbc>
   2a67c:	ldr	r3, [r0, r1, lsl #2]
   2a680:	cmp	lr, r3
   2a684:	beq	2a5a0 <__assert_fail@plt+0x18c00>
   2a688:	add	lr, lr, lr, lsl #1
   2a68c:	ldr	r3, [r4, #24]
   2a690:	adds	r7, r3, lr, lsl #2
   2a694:	beq	2a7ac <__assert_fail@plt+0x18e0c>
   2a698:	ldr	r3, [r7, #4]
   2a69c:	cmp	r3, #0
   2a6a0:	beq	2a7ac <__assert_fail@plt+0x18e0c>
   2a6a4:	ldr	r2, [sp, #48]	; 0x30
   2a6a8:	add	r6, r6, r3, lsl #1
   2a6ac:	cmp	r2, r6
   2a6b0:	blt	2a7c8 <__assert_fail@plt+0x18e28>
   2a6b4:	mov	r1, r7
   2a6b8:	mov	r0, fp
   2a6bc:	bl	201fc <__assert_fail@plt+0xe85c>
   2a6c0:	cmp	r0, #0
   2a6c4:	bne	2a71c <__assert_fail@plt+0x18d7c>
   2a6c8:	ldr	r6, [sp, #52]	; 0x34
   2a6cc:	mov	r7, #1
   2a6d0:	cmp	r6, r7
   2a6d4:	bgt	2a5ac <__assert_fail@plt+0x18c0c>
   2a6d8:	mov	r3, #0
   2a6dc:	mov	r2, fp
   2a6e0:	mov	r1, r4
   2a6e4:	add	r0, sp, #40	; 0x28
   2a6e8:	bl	2918c <__assert_fail@plt+0x177ec>
   2a6ec:	cmp	r0, #0
   2a6f0:	str	r0, [r4, #36]	; 0x24
   2a6f4:	beq	2a850 <__assert_fail@plt+0x18eb0>
   2a6f8:	ldrsb	r3, [r0, #52]	; 0x34
   2a6fc:	cmp	r3, #0
   2a700:	strge	r0, [r4, #48]	; 0x30
   2a704:	strge	r0, [r4, #44]	; 0x2c
   2a708:	strge	r0, [r4, #40]	; 0x28
   2a70c:	blt	2a7ec <__assert_fail@plt+0x18e4c>
   2a710:	ldr	r0, [sp, #56]	; 0x38
   2a714:	bl	1f018 <__assert_fail@plt+0xd678>
   2a718:	mov	r0, #0
   2a71c:	ldr	r6, [r8]
   2a720:	str	r0, [sp, #36]	; 0x24
   2a724:	ldr	r0, [r6, #56]	; 0x38
   2a728:	cmp	r0, #0
   2a72c:	beq	2a740 <__assert_fail@plt+0x18da0>
   2a730:	ldr	r5, [r0]
   2a734:	bl	1f018 <__assert_fail@plt+0xd678>
   2a738:	subs	r0, r5, #0
   2a73c:	bne	2a730 <__assert_fail@plt+0x18d90>
   2a740:	mov	r3, #31
   2a744:	mov	r5, #0
   2a748:	str	r3, [r6, #64]	; 0x40
   2a74c:	ldr	r0, [r6, #16]
   2a750:	str	r5, [r6, #56]	; 0x38
   2a754:	str	r5, [r6, #52]	; 0x34
   2a758:	bl	1f018 <__assert_fail@plt+0xd678>
   2a75c:	ldr	r0, [sp, #68]	; 0x44
   2a760:	str	r5, [r6, #16]
   2a764:	bl	1f018 <__assert_fail@plt+0xd678>
   2a768:	ldr	r0, [sp, #72]	; 0x48
   2a76c:	bl	1f018 <__assert_fail@plt+0xd678>
   2a770:	ldrb	r3, [sp, #135]	; 0x87
   2a774:	cmp	r3, r5
   2a778:	beq	2a784 <__assert_fail@plt+0x18de4>
   2a77c:	ldr	r0, [sp, #64]	; 0x40
   2a780:	bl	1f018 <__assert_fail@plt+0xd678>
   2a784:	ldr	r0, [sp, #36]	; 0x24
   2a788:	cmp	r0, #0
   2a78c:	bne	298e8 <__assert_fail@plt+0x17f48>
   2a790:	add	sp, sp, #148	; 0x94
   2a794:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a798:	mov	r3, r2
   2a79c:	mov	r2, ip
   2a7a0:	add	r1, r3, #1
   2a7a4:	mov	ip, r2
   2a7a8:	b	2a620 <__assert_fail@plt+0x18c80>
   2a7ac:	mov	r7, #1
   2a7b0:	b	2a5a4 <__assert_fail@plt+0x18c04>
   2a7b4:	mov	r0, #0
   2a7b8:	str	r0, [sp, #48]	; 0x30
   2a7bc:	str	r0, [fp, #4]
   2a7c0:	str	r0, [fp, #8]
   2a7c4:	b	2a578 <__assert_fail@plt+0x18bd8>
   2a7c8:	add	r3, r3, r2
   2a7cc:	lsl	r1, r3, #3
   2a7d0:	lsl	r6, r3, #1
   2a7d4:	bl	1f190 <__assert_fail@plt+0xd7f0>
   2a7d8:	cmp	r0, #0
   2a7dc:	beq	2a858 <__assert_fail@plt+0x18eb8>
   2a7e0:	str	r0, [sp, #56]	; 0x38
   2a7e4:	str	r6, [sp, #48]	; 0x30
   2a7e8:	b	2a6b4 <__assert_fail@plt+0x18d14>
   2a7ec:	mov	r3, #1
   2a7f0:	mov	r2, fp
   2a7f4:	mov	r1, r4
   2a7f8:	add	r0, sp, #40	; 0x28
   2a7fc:	bl	2918c <__assert_fail@plt+0x177ec>
   2a800:	mov	r3, #2
   2a804:	mov	r2, fp
   2a808:	mov	r1, r4
   2a80c:	str	r0, [r4, #40]	; 0x28
   2a810:	add	r0, sp, #40	; 0x28
   2a814:	bl	2918c <__assert_fail@plt+0x177ec>
   2a818:	mov	r3, #6
   2a81c:	mov	r2, fp
   2a820:	mov	r1, r4
   2a824:	str	r0, [r4, #44]	; 0x2c
   2a828:	add	r0, sp, #40	; 0x28
   2a82c:	bl	2918c <__assert_fail@plt+0x177ec>
   2a830:	ldr	r3, [r4, #40]	; 0x28
   2a834:	cmp	r3, #0
   2a838:	str	r0, [r4, #48]	; 0x30
   2a83c:	beq	2a850 <__assert_fail@plt+0x18eb0>
   2a840:	ldr	r3, [r4, #44]	; 0x2c
   2a844:	cmp	r0, #0
   2a848:	cmpne	r3, #0
   2a84c:	bne	2a710 <__assert_fail@plt+0x18d70>
   2a850:	ldr	r0, [sp, #40]	; 0x28
   2a854:	b	2a71c <__assert_fail@plt+0x18d7c>
   2a858:	mov	r0, #12
   2a85c:	b	2a71c <__assert_fail@plt+0x18d7c>
   2a860:	cmp	ip, #0
   2a864:	mov	r1, ip
   2a868:	beq	2a070 <__assert_fail@plt+0x186d0>
   2a86c:	b	2a054 <__assert_fail@plt+0x186b4>
   2a870:	ldrb	r3, [r6, #88]	; 0x58
   2a874:	tst	r3, #1
   2a878:	bne	2a3c0 <__assert_fail@plt+0x18a20>
   2a87c:	b	2a3b4 <__assert_fail@plt+0x18a14>
   2a880:	bl	1f018 <__assert_fail@plt+0xd678>
   2a884:	mov	r3, #0
   2a888:	ldr	r5, [r6, #52]	; 0x34
   2a88c:	str	r3, [r6, #132]	; 0x84
   2a890:	b	29cb8 <__assert_fail@plt+0x18318>
   2a894:	mov	r3, r2
   2a898:	b	29cc0 <__assert_fail@plt+0x18320>
   2a89c:	str	sl, [sp, #88]	; 0x58
   2a8a0:	str	sl, [sp, #92]	; 0x5c
   2a8a4:	b	29a04 <__assert_fail@plt+0x18064>
   2a8a8:	ldr	r3, [sp, #108]	; 0x6c
   2a8ac:	ldr	r5, [sp, #88]	; 0x58
   2a8b0:	cmp	sl, r3
   2a8b4:	movge	sl, r3
   2a8b8:	cmp	sl, r5
   2a8bc:	ble	2a900 <__assert_fail@plt+0x18f60>
   2a8c0:	bl	11754 <__ctype_toupper_loc@plt>
   2a8c4:	b	2a8cc <__assert_fail@plt+0x18f2c>
   2a8c8:	ldr	r6, [sp, #64]	; 0x40
   2a8cc:	ldr	r3, [sp, #60]	; 0x3c
   2a8d0:	ldr	r1, [sp, #84]	; 0x54
   2a8d4:	add	r3, r3, r5
   2a8d8:	ldr	r2, [sp, #124]	; 0x7c
   2a8dc:	ldrb	r3, [r3, r1]
   2a8e0:	cmp	r2, #0
   2a8e4:	ldrbne	r3, [r2, r3]
   2a8e8:	ldr	r2, [r0]
   2a8ec:	ldr	r3, [r2, r3, lsl #2]
   2a8f0:	strb	r3, [r6, r5]
   2a8f4:	add	r5, r5, #1
   2a8f8:	cmp	sl, r5
   2a8fc:	bne	2a8c8 <__assert_fail@plt+0x18f28>
   2a900:	str	r5, [sp, #88]	; 0x58
   2a904:	str	r5, [sp, #92]	; 0x5c
   2a908:	b	29a04 <__assert_fail@plt+0x18064>
   2a90c:	mov	r0, #12
   2a910:	b	29914 <__assert_fail@plt+0x17f74>
   2a914:	ldr	r4, [sp, #16]
   2a918:	str	r0, [r5, #4]
   2a91c:	str	r0, [r5]
   2a920:	mov	r0, #12
   2a924:	b	29880 <__assert_fail@plt+0x17ee0>
   2a928:	ldr	r5, [r4, #8]
   2a92c:	cmp	r5, #0
   2a930:	beq	2aa60 <__assert_fail@plt+0x190c0>
   2a934:	ldr	r0, [r4]
   2a938:	mov	r1, r2
   2a93c:	mov	ip, r0
   2a940:	mov	r6, r0
   2a944:	mov	r2, r9
   2a948:	ldrb	lr, [r6, #4]
   2a94c:	sub	lr, lr, #1
   2a950:	cmp	lr, #11
   2a954:	ldrls	pc, [pc, lr, lsl #2]
   2a958:	b	2aa00 <__assert_fail@plt+0x19060>
   2a95c:	strdeq	sl, [r2], -r0
   2a960:	muleq	r2, r0, r9
   2a964:	andeq	sl, r2, r4, lsl #20
   2a968:	muleq	r2, r0, r9
   2a96c:	andeq	sl, r2, ip, lsl #19
   2a970:	andeq	sl, r2, r8, lsl r5
   2a974:	andeq	sl, r2, r0, lsl #20
   2a978:	muleq	r2, r0, r9
   2a97c:	muleq	r2, r0, r9
   2a980:	muleq	r2, r0, r9
   2a984:	muleq	r2, r0, r9
   2a988:	andeq	sl, r2, ip, lsr sl
   2a98c:	mov	r9, r3
   2a990:	add	r1, r1, #1
   2a994:	cmp	r1, r5
   2a998:	add	r6, r6, #8
   2a99c:	bne	2a948 <__assert_fail@plt+0x18fa8>
   2a9a0:	orr	r3, r2, r9
   2a9a4:	ands	r3, r3, #255	; 0xff
   2a9a8:	beq	2aa64 <__assert_fail@plt+0x190c4>
   2a9ac:	add	r1, r0, r1, lsl #3
   2a9b0:	mov	r2, #7
   2a9b4:	b	2a9cc <__assert_fail@plt+0x1902c>
   2a9b8:	cmp	r3, #5
   2a9bc:	strbeq	r2, [ip, #4]
   2a9c0:	add	ip, ip, #8
   2a9c4:	cmp	ip, r1
   2a9c8:	beq	2aa60 <__assert_fail@plt+0x190c0>
   2a9cc:	ldrb	r3, [ip, #4]
   2a9d0:	cmp	r3, #1
   2a9d4:	bne	2a9b8 <__assert_fail@plt+0x19018>
   2a9d8:	ldrsb	r3, [ip]
   2a9dc:	cmp	r3, #0
   2a9e0:	ldrblt	r3, [ip, #6]
   2a9e4:	biclt	r3, r3, #32
   2a9e8:	strblt	r3, [ip, #6]
   2a9ec:	b	2a9c0 <__assert_fail@plt+0x19020>
   2a9f0:	ldrb	lr, [r0, r1, lsl #3]
   2a9f4:	lsrs	lr, lr, #7
   2a9f8:	movne	r2, r3
   2a9fc:	b	2a990 <__assert_fail@plt+0x18ff0>
   2aa00:	bl	11964 <abort@plt>
   2aa04:	ldr	lr, [r0, r1, lsl #3]
   2aa08:	ldr	r7, [lr, #16]
   2aa0c:	cmp	r7, #0
   2aa10:	bne	2a518 <__assert_fail@plt+0x18b78>
   2aa14:	ldr	r7, [lr, #20]
   2aa18:	cmp	r7, #0
   2aa1c:	bne	2a518 <__assert_fail@plt+0x18b78>
   2aa20:	ldr	r7, [lr, #24]
   2aa24:	cmp	r7, #0
   2aa28:	bne	2a518 <__assert_fail@plt+0x18b78>
   2aa2c:	ldr	lr, [lr, #28]
   2aa30:	cmp	lr, #0
   2aa34:	beq	2a990 <__assert_fail@plt+0x18ff0>
   2aa38:	b	2a518 <__assert_fail@plt+0x18b78>
   2aa3c:	ldr	lr, [r0, r1, lsl #3]
   2aa40:	cmp	lr, #32
   2aa44:	beq	2a990 <__assert_fail@plt+0x18ff0>
   2aa48:	bls	2aa90 <__assert_fail@plt+0x190f0>
   2aa4c:	cmp	lr, #64	; 0x40
   2aa50:	beq	2a990 <__assert_fail@plt+0x18ff0>
   2aa54:	cmp	lr, #128	; 0x80
   2aa58:	beq	2a990 <__assert_fail@plt+0x18ff0>
   2aa5c:	b	2a518 <__assert_fail@plt+0x18b78>
   2aa60:	mov	r3, r9
   2aa64:	ldr	r1, [r4, #76]	; 0x4c
   2aa68:	ldrb	r2, [r4, #88]	; 0x58
   2aa6c:	cmp	r1, #0
   2aa70:	orrgt	r3, r3, #1
   2aa74:	and	r3, r3, #1
   2aa78:	and	r2, r2, #249	; 0xf9
   2aa7c:	orr	r3, r2, r3, lsl #1
   2aa80:	mov	r2, #1
   2aa84:	strb	r3, [r4, #88]	; 0x58
   2aa88:	str	r2, [r4, #92]	; 0x5c
   2aa8c:	b	2a518 <__assert_fail@plt+0x18b78>
   2aa90:	cmp	lr, #16
   2aa94:	beq	2a990 <__assert_fail@plt+0x18ff0>
   2aa98:	b	2a518 <__assert_fail@plt+0x18b78>
   2aa9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aaa0:	sub	sp, sp, #14464	; 0x3880
   2aaa4:	sub	sp, sp, #36	; 0x24
   2aaa8:	mov	r4, #0
   2aaac:	mov	r5, r1
   2aab0:	add	r9, sp, #2208	; 0x8a0
   2aab4:	str	r1, [sp, #72]	; 0x48
   2aab8:	str	r0, [sp, #104]	; 0x68
   2aabc:	str	r4, [r1, #44]	; 0x2c
   2aac0:	str	r4, [r1, #48]	; 0x30
   2aac4:	mov	r0, r9
   2aac8:	mov	r1, r4
   2aacc:	mov	r2, #32
   2aad0:	bl	11814 <memset@plt>
   2aad4:	ldr	r1, [r5, #8]
   2aad8:	cmp	r1, r4
   2aadc:	ble	2b9b8 <__assert_fail@plt+0x1a018>
   2aae0:	str	r4, [sp, #20]
   2aae4:	str	r4, [sp, #96]	; 0x60
   2aae8:	ldr	r3, [sp, #72]	; 0x48
   2aaec:	ldr	r0, [sp, #96]	; 0x60
   2aaf0:	ldr	r2, [r3, #12]
   2aaf4:	ldr	r3, [sp, #104]	; 0x68
   2aaf8:	lsl	ip, r0, #2
   2aafc:	ldr	r2, [r2, r0, lsl #2]
   2ab00:	ldr	r3, [r3]
   2ab04:	str	ip, [sp, #92]	; 0x5c
   2ab08:	add	r0, r3, r2, lsl #3
   2ab0c:	str	r0, [sp, #100]	; 0x64
   2ab10:	ldrb	ip, [r0, #4]
   2ab14:	ldr	r4, [r0, #4]
   2ab18:	ldr	r0, [pc, #3984]	; 2bab0 <__assert_fail@plt+0x1a110>
   2ab1c:	cmp	ip, #1
   2ab20:	str	ip, [sp, #28]
   2ab24:	and	r4, r0, r4, lsr #8
   2ab28:	beq	2acac <__assert_fail@plt+0x1930c>
   2ab2c:	cmp	ip, #3
   2ab30:	beq	2b2d4 <__assert_fail@plt+0x19934>
   2ab34:	cmp	ip, #5
   2ab38:	beq	2b42c <__assert_fail@plt+0x19a8c>
   2ab3c:	cmp	ip, #7
   2ab40:	beq	2b820 <__assert_fail@plt+0x19e80>
   2ab44:	ldr	r3, [sp, #96]	; 0x60
   2ab48:	add	r3, r3, #1
   2ab4c:	cmp	r3, r1
   2ab50:	str	r3, [sp, #96]	; 0x60
   2ab54:	blt	2aae8 <__assert_fail@plt+0x19148>
   2ab58:	ldr	r3, [sp, #20]
   2ab5c:	cmp	r3, #0
   2ab60:	ble	2b9b4 <__assert_fail@plt+0x1a014>
   2ab64:	add	r3, r3, #1
   2ab68:	mov	r4, #0
   2ab6c:	lsl	r0, r3, #2
   2ab70:	str	r3, [r9, #-2092]	; 0xfffff7d4
   2ab74:	str	r4, [r9, #-2088]	; 0xfffff7d8
   2ab78:	bl	1f110 <__assert_fail@plt+0xd770>
   2ab7c:	cmp	r0, r4
   2ab80:	str	r0, [r9, #-2084]	; 0xfffff7dc
   2ab84:	beq	2b878 <__assert_fail@plt+0x19ed8>
   2ab88:	add	r3, sp, #3232	; 0xca0
   2ab8c:	str	r3, [sp, #12]
   2ab90:	mov	r6, r3
   2ab94:	add	r3, sp, #6272	; 0x1880
   2ab98:	add	r3, r3, #32
   2ab9c:	mov	r7, r3
   2aba0:	str	r3, [sp, #28]
   2aba4:	add	r0, sp, #128	; 0x80
   2aba8:	add	r3, sp, #156	; 0x9c
   2abac:	mov	r2, #32
   2abb0:	mov	r1, r4
   2abb4:	str	r3, [sp, #4]
   2abb8:	str	r4, [sp, #24]
   2abbc:	str	r4, [r9, #-2096]	; 0xfffff7d0
   2abc0:	bl	11814 <memset@plt>
   2abc4:	add	r3, sp, #160	; 0xa0
   2abc8:	ldr	fp, [sp, #104]	; 0x68
   2abcc:	sub	r3, r3, #48	; 0x30
   2abd0:	mov	sl, r4
   2abd4:	add	r8, sp, #116	; 0x74
   2abd8:	mov	r5, r7
   2abdc:	str	r3, [sp, #16]
   2abe0:	add	r3, sp, #1184	; 0x4a0
   2abe4:	str	r3, [sp]
   2abe8:	str	r7, [sp, #32]
   2abec:	ldr	r0, [r6, #4]
   2abf0:	mov	r3, #0
   2abf4:	cmp	r0, r3
   2abf8:	str	r3, [r9, #-2088]	; 0xfffff7d8
   2abfc:	movgt	r5, #0
   2ac00:	strgt	r7, [sp, #8]
   2ac04:	bgt	2ac34 <__assert_fail@plt+0x19294>
   2ac08:	b	2b5bc <__assert_fail@plt+0x19c1c>
   2ac0c:	mov	r1, r7
   2ac10:	mov	r0, r8
   2ac14:	bl	201fc <__assert_fail@plt+0xe85c>
   2ac18:	cmp	r0, #0
   2ac1c:	str	r0, [r9, #-2096]	; 0xfffff7d0
   2ac20:	bne	2b7f0 <__assert_fail@plt+0x19e50>
   2ac24:	ldr	r0, [r6, #4]
   2ac28:	add	r5, r5, #1
   2ac2c:	cmp	r5, r0
   2ac30:	bge	2b5b8 <__assert_fail@plt+0x19c18>
   2ac34:	ldr	r2, [r6, #8]
   2ac38:	ldr	r3, [fp, #12]
   2ac3c:	ldr	r2, [r2, r5, lsl #2]
   2ac40:	ldr	r3, [r3, r2, lsl #2]
   2ac44:	cmn	r3, #1
   2ac48:	beq	2ac28 <__assert_fail@plt+0x19288>
   2ac4c:	add	r3, r3, r3, lsl #1
   2ac50:	ldr	r2, [fp, #24]
   2ac54:	adds	r7, r2, r3, lsl #2
   2ac58:	streq	r7, [r9, #-2096]	; 0xfffff7d0
   2ac5c:	beq	2ac28 <__assert_fail@plt+0x19288>
   2ac60:	ldr	r2, [r7, #4]
   2ac64:	cmp	r2, #0
   2ac68:	streq	r2, [r9, #-2096]	; 0xfffff7d0
   2ac6c:	beq	2ac28 <__assert_fail@plt+0x19288>
   2ac70:	ldr	r1, [r9, #-2088]	; 0xfffff7d8
   2ac74:	ldr	r4, [r9, #-2092]	; 0xfffff7d4
   2ac78:	add	r1, r1, r2, lsl #1
   2ac7c:	cmp	r4, r1
   2ac80:	bge	2ac0c <__assert_fail@plt+0x1926c>
   2ac84:	add	r2, r2, r4
   2ac88:	ldr	r0, [r9, #-2084]	; 0xfffff7dc
   2ac8c:	lsl	r1, r2, #3
   2ac90:	lsl	r4, r2, #1
   2ac94:	bl	1f190 <__assert_fail@plt+0xd7f0>
   2ac98:	cmp	r0, #0
   2ac9c:	beq	2b854 <__assert_fail@plt+0x19eb4>
   2aca0:	str	r0, [r9, #-2084]	; 0xfffff7dc
   2aca4:	str	r4, [r9, #-2092]	; 0xfffff7d4
   2aca8:	b	2ac0c <__assert_fail@plt+0x1926c>
   2acac:	ldrb	r3, [r3, r2, lsl #3]
   2acb0:	and	r1, r3, #31
   2acb4:	asr	r3, r3, #5
   2acb8:	ldr	r2, [r9, r3, lsl #2]
   2acbc:	orr	r2, r2, ip, lsl r1
   2acc0:	str	r2, [r9, r3, lsl #2]
   2acc4:	cmp	r4, #0
   2acc8:	beq	2af1c <__assert_fail@plt+0x1957c>
   2accc:	tst	r4, #32
   2acd0:	bne	2b4ec <__assert_fail@plt+0x19b4c>
   2acd4:	tst	r4, #128	; 0x80
   2acd8:	bne	2b36c <__assert_fail@plt+0x199cc>
   2acdc:	tst	r4, #4
   2ace0:	beq	2ae0c <__assert_fail@plt+0x1946c>
   2ace4:	ldr	r3, [sp, #28]
   2ace8:	cmp	r3, #1
   2acec:	beq	2b864 <__assert_fail@plt+0x19ec4>
   2acf0:	ldr	r3, [sp, #104]	; 0x68
   2acf4:	ldr	r3, [r3, #92]	; 0x5c
   2acf8:	cmp	r3, #1
   2acfc:	ble	2b8fc <__assert_fail@plt+0x19f5c>
   2ad00:	ldr	r6, [sp, #104]	; 0x68
   2ad04:	ldr	r3, [r6, #60]	; 0x3c
   2ad08:	ldr	r0, [r6, #96]	; 0x60
   2ad0c:	ldr	r2, [r6, #100]	; 0x64
   2ad10:	ldr	lr, [r3]
   2ad14:	ldr	r1, [r3, #4]
   2ad18:	mvn	lr, lr
   2ad1c:	orr	lr, lr, r0
   2ad20:	ldr	r0, [r9]
   2ad24:	mvn	r1, r1
   2ad28:	and	lr, lr, r0
   2ad2c:	ldr	r0, [r9, #4]
   2ad30:	orr	r1, r1, r2
   2ad34:	ldr	r2, [r3, #8]
   2ad38:	and	r1, r1, r0
   2ad3c:	ldr	ip, [r3, #12]
   2ad40:	ldr	r0, [r6, #104]	; 0x68
   2ad44:	mvn	r2, r2
   2ad48:	orr	r2, r2, r0
   2ad4c:	mvn	r0, ip
   2ad50:	ldr	ip, [r9, #8]
   2ad54:	str	lr, [r9]
   2ad58:	and	r2, r2, ip
   2ad5c:	ldr	ip, [r6, #108]	; 0x6c
   2ad60:	orr	lr, lr, r1
   2ad64:	str	r1, [r9, #4]
   2ad68:	ldr	r1, [r9, #12]
   2ad6c:	orr	r0, r0, ip
   2ad70:	ldr	ip, [r3, #16]
   2ad74:	and	r1, r1, r0
   2ad78:	orr	lr, lr, r2
   2ad7c:	ldr	r0, [r3, #20]
   2ad80:	str	r2, [r9, #8]
   2ad84:	ldr	r2, [r6, #112]	; 0x70
   2ad88:	mvn	ip, ip
   2ad8c:	orr	ip, ip, r2
   2ad90:	mvn	r2, r0
   2ad94:	ldr	r0, [r9, #16]
   2ad98:	orr	lr, lr, r1
   2ad9c:	and	ip, ip, r0
   2ada0:	ldr	r0, [r6, #116]	; 0x74
   2ada4:	str	r1, [r9, #12]
   2ada8:	orr	r2, r2, r0
   2adac:	ldr	r0, [r3, #24]
   2adb0:	ldr	r3, [r3, #28]
   2adb4:	mvn	r0, r0
   2adb8:	mvn	r5, r3
   2adbc:	ldr	r3, [r9, #20]
   2adc0:	ldr	r1, [r9, #28]
   2adc4:	and	r2, r2, r3
   2adc8:	ldr	r3, [r6, #120]	; 0x78
   2adcc:	orr	lr, lr, ip
   2add0:	orr	r0, r0, r3
   2add4:	ldr	r3, [r9, #24]
   2add8:	orr	lr, lr, r2
   2addc:	and	r0, r0, r3
   2ade0:	ldr	r3, [r6, #124]	; 0x7c
   2ade4:	orr	lr, lr, r0
   2ade8:	orr	r3, r5, r3
   2adec:	and	r3, r3, r1
   2adf0:	str	r2, [r9, #20]
   2adf4:	orr	r2, lr, r3
   2adf8:	str	ip, [r9, #16]
   2adfc:	str	r0, [r9, #24]
   2ae00:	str	r3, [r9, #28]
   2ae04:	cmp	r2, #0
   2ae08:	beq	2b37c <__assert_fail@plt+0x199dc>
   2ae0c:	tst	r4, #8
   2ae10:	beq	2af1c <__assert_fail@plt+0x1957c>
   2ae14:	ldr	r3, [sp, #28]
   2ae18:	cmp	r3, #1
   2ae1c:	beq	2b35c <__assert_fail@plt+0x199bc>
   2ae20:	ldr	r3, [sp, #104]	; 0x68
   2ae24:	ldr	r4, [sp, #104]	; 0x68
   2ae28:	ldr	r3, [r3, #92]	; 0x5c
   2ae2c:	cmp	r3, #1
   2ae30:	ble	2b518 <__assert_fail@plt+0x19b78>
   2ae34:	ldr	r1, [r4, #60]	; 0x3c
   2ae38:	ldr	r0, [r4, #96]	; 0x60
   2ae3c:	ldr	ip, [r4, #100]	; 0x64
   2ae40:	ldr	r3, [r1]
   2ae44:	ldr	r2, [r1, #4]
   2ae48:	and	r3, r3, r0
   2ae4c:	and	r2, r2, ip
   2ae50:	ldr	r0, [r9]
   2ae54:	ldr	ip, [r9, #4]
   2ae58:	bic	r3, r0, r3
   2ae5c:	bic	r2, ip, r2
   2ae60:	ldr	r0, [r1, #8]
   2ae64:	ldr	ip, [r4, #104]	; 0x68
   2ae68:	ldr	lr, [r1, #12]
   2ae6c:	and	r0, r0, ip
   2ae70:	ldr	ip, [r9, #8]
   2ae74:	str	r3, [r9]
   2ae78:	bic	r0, ip, r0
   2ae7c:	ldr	ip, [r4, #108]	; 0x6c
   2ae80:	orr	r3, r3, r2
   2ae84:	and	ip, ip, lr
   2ae88:	ldr	lr, [r9, #12]
   2ae8c:	str	r2, [r9, #4]
   2ae90:	bic	ip, lr, ip
   2ae94:	ldr	r2, [r4, #112]	; 0x70
   2ae98:	ldr	lr, [r1, #16]
   2ae9c:	orr	r3, r3, r0
   2aea0:	and	r2, r2, lr
   2aea4:	ldr	lr, [r9, #16]
   2aea8:	str	r0, [r9, #8]
   2aeac:	bic	r2, lr, r2
   2aeb0:	ldr	r0, [r4, #116]	; 0x74
   2aeb4:	ldr	lr, [r1, #20]
   2aeb8:	orr	r3, r3, ip
   2aebc:	and	r0, r0, lr
   2aec0:	ldr	lr, [r9, #20]
   2aec4:	str	ip, [r9, #12]
   2aec8:	bic	r0, lr, r0
   2aecc:	ldr	ip, [r1, #28]
   2aed0:	ldr	lr, [r1, #24]
   2aed4:	ldr	r1, [r4, #120]	; 0x78
   2aed8:	orr	r3, r3, r2
   2aedc:	str	r2, [r9, #16]
   2aee0:	ldr	r2, [r4, #124]	; 0x7c
   2aee4:	and	r1, r1, lr
   2aee8:	ldr	lr, [r9, #24]
   2aeec:	and	ip, ip, r2
   2aef0:	ldr	r2, [r9, #28]
   2aef4:	bic	r1, lr, r1
   2aef8:	orr	r3, r3, r0
   2aefc:	bic	r2, r2, ip
   2af00:	orr	r3, r3, r1
   2af04:	orr	r3, r3, r2
   2af08:	str	r0, [r9, #20]
   2af0c:	str	r1, [r9, #24]
   2af10:	str	r2, [r9, #28]
   2af14:	cmp	r3, #0
   2af18:	beq	2b37c <__assert_fail@plt+0x199dc>
   2af1c:	ldr	r3, [sp, #20]
   2af20:	cmp	r3, #0
   2af24:	movle	r3, #0
   2af28:	strle	r3, [sp, #4]
   2af2c:	ble	2b388 <__assert_fail@plt+0x199e8>
   2af30:	add	r3, sp, #6272	; 0x1880
   2af34:	add	r3, r3, #32
   2af38:	str	r3, [sp, #108]	; 0x6c
   2af3c:	mov	r4, r3
   2af40:	add	r3, sp, #3232	; 0xca0
   2af44:	str	r3, [sp]
   2af48:	mov	r3, #0
   2af4c:	str	r3, [sp, #4]
   2af50:	b	2b22c <__assert_fail@plt+0x1988c>
   2af54:	ldr	sl, [r9]
   2af58:	ldr	fp, [r4]
   2af5c:	ldr	r7, [r9, #4]
   2af60:	ldr	r8, [r4, #4]
   2af64:	ldr	r1, [r9, #12]
   2af68:	ldr	r5, [r9, #8]
   2af6c:	ldr	r6, [r4, #8]
   2af70:	and	r2, r7, r8
   2af74:	and	r3, sl, fp
   2af78:	mov	r0, r1
   2af7c:	ldr	lr, [r4, #12]
   2af80:	and	r1, r5, r6
   2af84:	str	r3, [sp, #44]	; 0x2c
   2af88:	orr	r3, r3, r2
   2af8c:	ldr	ip, [r4, #16]
   2af90:	str	r1, [sp, #52]	; 0x34
   2af94:	orr	r3, r3, r1
   2af98:	ldr	r1, [r9, #20]
   2af9c:	str	r0, [sp, #32]
   2afa0:	and	r0, r0, lr
   2afa4:	str	ip, [sp, #8]
   2afa8:	mov	ip, r0
   2afac:	mov	r0, r1
   2afb0:	ldr	r1, [r4, #20]
   2afb4:	str	r0, [sp, #40]	; 0x28
   2afb8:	and	r0, r0, r1
   2afbc:	str	r0, [sp, #24]
   2afc0:	ldr	r0, [r9, #28]
   2afc4:	str	r2, [sp, #48]	; 0x30
   2afc8:	str	ip, [sp, #56]	; 0x38
   2afcc:	ldr	r2, [r9, #16]
   2afd0:	orr	r3, r3, ip
   2afd4:	ldr	ip, [sp, #8]
   2afd8:	str	r0, [sp, #16]
   2afdc:	ldr	r0, [r4, #28]
   2afe0:	and	ip, r2, ip
   2afe4:	str	r2, [sp, #36]	; 0x24
   2afe8:	ldr	r2, [r9, #24]
   2afec:	str	ip, [sp, #60]	; 0x3c
   2aff0:	orr	r3, r3, ip
   2aff4:	mov	ip, r0
   2aff8:	ldr	r0, [sp, #24]
   2affc:	str	r2, [sp, #12]
   2b000:	orr	r3, r3, r0
   2b004:	ldr	r2, [r4, #24]
   2b008:	ldr	r0, [sp, #12]
   2b00c:	and	r0, r0, r2
   2b010:	orr	r3, r3, r0
   2b014:	str	r0, [sp, #64]	; 0x40
   2b018:	ldr	r0, [sp, #16]
   2b01c:	and	r0, r0, ip
   2b020:	orrs	r3, r3, r0
   2b024:	str	r0, [sp, #68]	; 0x44
   2b028:	beq	2b204 <__assert_fail@plt+0x19864>
   2b02c:	bic	r0, r8, r7
   2b030:	bic	r3, fp, sl
   2b034:	bic	r7, r7, r8
   2b038:	str	r3, [sp, #76]	; 0x4c
   2b03c:	bic	r8, r6, r5
   2b040:	orr	r3, r3, r0
   2b044:	bic	sl, sl, fp
   2b048:	orr	r3, r3, r8
   2b04c:	str	r8, [sp, #84]	; 0x54
   2b050:	ldr	r8, [sp, #32]
   2b054:	bic	r6, r5, r6
   2b058:	orr	r5, sl, r7
   2b05c:	bic	fp, lr, r8
   2b060:	orr	r5, r5, r6
   2b064:	bic	lr, r8, lr
   2b068:	str	lr, [sp, #32]
   2b06c:	orr	r5, r5, lr
   2b070:	str	r0, [sp, #80]	; 0x50
   2b074:	ldr	lr, [sp, #36]	; 0x24
   2b078:	ldr	r0, [sp, #8]
   2b07c:	orr	r3, r3, fp
   2b080:	bic	r8, r0, lr
   2b084:	bic	r0, lr, r0
   2b088:	ldr	lr, [sp, #40]	; 0x28
   2b08c:	orr	r3, r3, r8
   2b090:	str	r8, [sp, #8]
   2b094:	ldr	r8, [sp, #12]
   2b098:	str	fp, [sp, #88]	; 0x58
   2b09c:	str	sl, [r9]
   2b0a0:	bic	fp, r1, lr
   2b0a4:	ldr	sl, [sp, #16]
   2b0a8:	bic	r1, lr, r1
   2b0ac:	orr	r3, r3, fp
   2b0b0:	bic	lr, r2, r8
   2b0b4:	orr	r3, r3, lr
   2b0b8:	bic	r2, r8, r2
   2b0bc:	orr	r5, r5, r0
   2b0c0:	bic	r8, ip, sl
   2b0c4:	orr	r5, r5, r1
   2b0c8:	orrs	r3, r3, r8
   2b0cc:	bic	r3, sl, ip
   2b0d0:	ldr	ip, [sp, #32]
   2b0d4:	orr	r5, r5, r2
   2b0d8:	str	r7, [r9, #4]
   2b0dc:	str	r6, [r9, #8]
   2b0e0:	str	ip, [r9, #12]
   2b0e4:	str	r0, [r9, #16]
   2b0e8:	str	r1, [r9, #20]
   2b0ec:	str	r2, [r9, #24]
   2b0f0:	orr	r5, r5, r3
   2b0f4:	str	r3, [r9, #28]
   2b0f8:	beq	2b1dc <__assert_fail@plt+0x1983c>
   2b0fc:	ldr	sl, [sp, #20]
   2b100:	ldr	r3, [sp, #108]	; 0x6c
   2b104:	ldr	r6, [sp, #76]	; 0x4c
   2b108:	ldr	r1, [sp]
   2b10c:	str	r6, [r3, sl, lsl #5]
   2b110:	add	r3, r3, sl, lsl #5
   2b114:	ldr	r6, [sp, #80]	; 0x50
   2b118:	add	ip, sl, sl, lsl #1
   2b11c:	str	r6, [r3, #4]
   2b120:	ldr	r6, [sp, #84]	; 0x54
   2b124:	add	r7, sp, #3232	; 0xca0
   2b128:	str	r6, [r3, #8]
   2b12c:	ldr	r6, [sp, #88]	; 0x58
   2b130:	str	fp, [r3, #20]
   2b134:	str	r6, [r3, #12]
   2b138:	ldr	r6, [sp, #8]
   2b13c:	str	lr, [r3, #24]
   2b140:	str	r6, [r3, #16]
   2b144:	str	r8, [r3, #28]
   2b148:	ldr	r2, [r1, #4]
   2b14c:	ldr	r3, [sp, #44]	; 0x2c
   2b150:	ldr	r0, [sp, #56]	; 0x38
   2b154:	add	r7, r7, ip, lsl #2
   2b158:	str	r3, [r4]
   2b15c:	str	r2, [r7, #4]
   2b160:	ldr	r3, [sp, #48]	; 0x30
   2b164:	ldr	r1, [r1, #4]
   2b168:	str	r0, [r4, #12]
   2b16c:	ldr	r0, [sp, #24]
   2b170:	str	r3, [r4, #4]
   2b174:	str	r0, [r4, #20]
   2b178:	ldr	r3, [sp, #60]	; 0x3c
   2b17c:	ldr	r0, [sp, #64]	; 0x40
   2b180:	cmp	r1, #0
   2b184:	ldr	r1, [sp, #52]	; 0x34
   2b188:	str	r3, [r4, #16]
   2b18c:	str	r1, [r4, #8]
   2b190:	str	r0, [r4, #24]
   2b194:	ldr	r0, [sp, #68]	; 0x44
   2b198:	str	r0, [r4, #28]
   2b19c:	ble	2b278 <__assert_fail@plt+0x198d8>
   2b1a0:	add	r3, sp, #3232	; 0xca0
   2b1a4:	lsl	r0, r2, #2
   2b1a8:	str	r2, [r3, ip, lsl #2]
   2b1ac:	bl	1f110 <__assert_fail@plt+0xd770>
   2b1b0:	cmp	r0, #0
   2b1b4:	str	r0, [r7, #8]
   2b1b8:	beq	2b294 <__assert_fail@plt+0x198f4>
   2b1bc:	ldr	r3, [sp]
   2b1c0:	ldr	r2, [r3, #4]
   2b1c4:	ldr	r1, [r3, #8]
   2b1c8:	lsl	r2, r2, #2
   2b1cc:	bl	115d4 <memcpy@plt>
   2b1d0:	ldr	r3, [sp, #20]
   2b1d4:	add	r3, r3, #1
   2b1d8:	str	r3, [sp, #20]
   2b1dc:	ldr	r3, [sp, #72]	; 0x48
   2b1e0:	ldr	r2, [sp, #92]	; 0x5c
   2b1e4:	ldr	r0, [sp]
   2b1e8:	ldr	r3, [r3, #12]
   2b1ec:	ldr	r1, [r3, r2]
   2b1f0:	bl	1fdc4 <__assert_fail@plt+0xe424>
   2b1f4:	cmp	r0, #0
   2b1f8:	beq	2b2a0 <__assert_fail@plt+0x19900>
   2b1fc:	cmp	r5, #0
   2b200:	beq	2b388 <__assert_fail@plt+0x199e8>
   2b204:	ldr	r3, [sp, #4]
   2b208:	ldr	r2, [sp, #20]
   2b20c:	add	r3, r3, #1
   2b210:	str	r3, [sp, #4]
   2b214:	cmp	r3, r2
   2b218:	ldr	r3, [sp]
   2b21c:	add	r4, r4, #32
   2b220:	add	r3, r3, #12
   2b224:	str	r3, [sp]
   2b228:	bge	2b388 <__assert_fail@plt+0x199e8>
   2b22c:	ldr	r3, [sp, #28]
   2b230:	cmp	r3, #1
   2b234:	bne	2af54 <__assert_fail@plt+0x195b4>
   2b238:	ldr	r3, [sp, #100]	; 0x64
   2b23c:	ldrb	r1, [r3]
   2b240:	ldr	r3, [sp, #4]
   2b244:	and	r2, r1, #31
   2b248:	asr	r1, r1, #5
   2b24c:	lsl	r3, r3, #5
   2b250:	add	r3, r3, r1, lsl #2
   2b254:	add	r1, sp, #14464	; 0x3880
   2b258:	add	r1, r1, #32
   2b25c:	add	r3, r1, r3
   2b260:	sub	r3, r3, #8192	; 0x2000
   2b264:	ldr	r3, [r3]
   2b268:	lsr	r2, r3, r2
   2b26c:	tst	r2, #1
   2b270:	beq	2b204 <__assert_fail@plt+0x19864>
   2b274:	b	2af54 <__assert_fail@plt+0x195b4>
   2b278:	add	r3, sp, #3232	; 0xca0
   2b27c:	mov	r2, #0
   2b280:	str	r2, [r3, ip, lsl #2]
   2b284:	str	r2, [r7, #4]
   2b288:	str	r2, [r7, #8]
   2b28c:	mov	r3, sl
   2b290:	b	2b1d4 <__assert_fail@plt+0x19834>
   2b294:	mov	r2, r7
   2b298:	str	r0, [r2, #4]
   2b29c:	str	r0, [r2]
   2b2a0:	ldr	r6, [sp, #20]
   2b2a4:	add	r4, sp, #3232	; 0xca0
   2b2a8:	mov	r5, #0
   2b2ac:	ldr	r0, [r4, #8]
   2b2b0:	add	r5, r5, #1
   2b2b4:	bl	1f018 <__assert_fail@plt+0xd678>
   2b2b8:	cmp	r5, r6
   2b2bc:	add	r4, r4, #12
   2b2c0:	bne	2b2ac <__assert_fail@plt+0x1990c>
   2b2c4:	mov	r0, #0
   2b2c8:	add	sp, sp, #14464	; 0x3880
   2b2cc:	add	sp, sp, #36	; 0x24
   2b2d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b2d4:	ldr	r3, [r3, r2, lsl #3]
   2b2d8:	ldr	ip, [r9]
   2b2dc:	ldr	r0, [r9, #4]
   2b2e0:	ldr	r1, [r3, #4]
   2b2e4:	ldr	r2, [r3]
   2b2e8:	orr	r0, r0, r1
   2b2ec:	orr	r2, ip, r2
   2b2f0:	ldr	r1, [r3, #8]
   2b2f4:	ldr	ip, [r9, #8]
   2b2f8:	str	r2, [r9]
   2b2fc:	orr	r1, ip, r1
   2b300:	ldr	r2, [r3, #12]
   2b304:	ldr	ip, [r9, #12]
   2b308:	str	r0, [r9, #4]
   2b30c:	orr	r2, ip, r2
   2b310:	ldr	r0, [r3, #16]
   2b314:	ldr	ip, [r9, #16]
   2b318:	str	r1, [r9, #8]
   2b31c:	orr	r0, ip, r0
   2b320:	ldr	r1, [r3, #20]
   2b324:	ldr	ip, [r9, #20]
   2b328:	str	r2, [r9, #12]
   2b32c:	orr	r1, ip, r1
   2b330:	ldr	r2, [r3, #24]
   2b334:	ldr	ip, [r3, #28]
   2b338:	ldr	r3, [r9, #24]
   2b33c:	str	r0, [r9, #16]
   2b340:	orr	r2, r3, r2
   2b344:	ldr	r3, [r9, #28]
   2b348:	str	r1, [r9, #20]
   2b34c:	orr	r3, r3, ip
   2b350:	str	r2, [r9, #24]
   2b354:	str	r3, [r9, #28]
   2b358:	b	2acc4 <__assert_fail@plt+0x19324>
   2b35c:	ldr	r3, [sp, #100]	; 0x64
   2b360:	ldrb	r3, [r3, #6]
   2b364:	tst	r3, #64	; 0x40
   2b368:	beq	2ae20 <__assert_fail@plt+0x19480>
   2b36c:	mov	r2, #32
   2b370:	mov	r1, #0
   2b374:	mov	r0, r9
   2b378:	bl	11814 <memset@plt>
   2b37c:	ldr	r3, [sp, #72]	; 0x48
   2b380:	ldr	r1, [r3, #8]
   2b384:	b	2ab44 <__assert_fail@plt+0x191a4>
   2b388:	ldr	r3, [sp, #20]
   2b38c:	ldr	r2, [sp, #4]
   2b390:	cmp	r3, r2
   2b394:	bne	2b37c <__assert_fail@plt+0x199dc>
   2b398:	mov	lr, r9
   2b39c:	mov	r4, r3
   2b3a0:	add	r5, sp, #14464	; 0x3880
   2b3a4:	ldm	lr!, {r0, r1, r2, r3}
   2b3a8:	add	r5, r5, #32
   2b3ac:	add	ip, r5, r4, lsl #5
   2b3b0:	sub	ip, ip, #8192	; 0x2000
   2b3b4:	add	r5, r4, r4, lsl #1
   2b3b8:	stmia	ip!, {r0, r1, r2, r3}
   2b3bc:	add	r3, sp, #3232	; 0xca0
   2b3c0:	add	r4, r3, r5, lsl #2
   2b3c4:	ldm	lr, {r0, r1, r2, r3}
   2b3c8:	ldr	lr, [sp, #72]	; 0x48
   2b3cc:	stm	ip, {r0, r1, r2, r3}
   2b3d0:	mov	r2, #1
   2b3d4:	ldr	r3, [sp, #92]	; 0x5c
   2b3d8:	ldr	lr, [lr, #12]
   2b3dc:	mov	r0, #4
   2b3e0:	ldr	r6, [lr, r3]
   2b3e4:	add	r3, sp, #3232	; 0xca0
   2b3e8:	str	r2, [r3, r5, lsl #2]
   2b3ec:	str	r2, [r4, #4]
   2b3f0:	bl	1f110 <__assert_fail@plt+0xd770>
   2b3f4:	cmp	r0, #0
   2b3f8:	str	r0, [r4, #8]
   2b3fc:	beq	2b9d8 <__assert_fail@plt+0x1a038>
   2b400:	mov	r1, #0
   2b404:	str	r6, [r0]
   2b408:	mov	r2, #32
   2b40c:	mov	r0, r9
   2b410:	bl	11814 <memset@plt>
   2b414:	ldr	r3, [sp, #72]	; 0x48
   2b418:	ldr	r1, [r3, #8]
   2b41c:	ldr	r3, [sp, #20]
   2b420:	add	r3, r3, #1
   2b424:	str	r3, [sp, #20]
   2b428:	b	2ab44 <__assert_fail@plt+0x191a4>
   2b42c:	ldr	r2, [sp, #104]	; 0x68
   2b430:	ldr	r3, [r2, #92]	; 0x5c
   2b434:	cmp	r3, #1
   2b438:	ble	2b9a0 <__assert_fail@plt+0x1a000>
   2b43c:	ldr	r2, [r2, #60]	; 0x3c
   2b440:	ldr	ip, [r9]
   2b444:	ldr	r1, [r9, #4]
   2b448:	ldm	r2, {r0, r3}
   2b44c:	orr	r0, ip, r0
   2b450:	orr	r3, r1, r3
   2b454:	ldr	ip, [r9, #8]
   2b458:	ldr	r1, [r2, #8]
   2b45c:	str	r0, [r9]
   2b460:	orr	r1, ip, r1
   2b464:	ldr	r0, [r2, #12]
   2b468:	ldr	ip, [r9, #12]
   2b46c:	str	r3, [r9, #4]
   2b470:	orr	r0, ip, r0
   2b474:	ldr	r3, [r2, #16]
   2b478:	ldr	ip, [r9, #16]
   2b47c:	str	r1, [r9, #8]
   2b480:	orr	r3, ip, r3
   2b484:	ldr	r1, [r2, #20]
   2b488:	ldr	ip, [r9, #20]
   2b48c:	str	r0, [r9, #12]
   2b490:	orr	r1, ip, r1
   2b494:	ldr	r0, [r2, #28]
   2b498:	ldr	ip, [r2, #24]
   2b49c:	str	r3, [r9, #16]
   2b4a0:	ldr	r2, [r9, #24]
   2b4a4:	ldr	r3, [r9, #28]
   2b4a8:	orr	r2, r2, ip
   2b4ac:	orr	r3, r3, r0
   2b4b0:	str	r1, [r9, #20]
   2b4b4:	str	r2, [r9, #24]
   2b4b8:	str	r3, [r9, #28]
   2b4bc:	ldr	r3, [sp, #104]	; 0x68
   2b4c0:	ldr	r3, [r3, #128]	; 0x80
   2b4c4:	tst	r3, #64	; 0x40
   2b4c8:	ldreq	r2, [r9]
   2b4cc:	biceq	r2, r2, #1024	; 0x400
   2b4d0:	streq	r2, [r9]
   2b4d4:	tst	r3, #128	; 0x80
   2b4d8:	beq	2acc4 <__assert_fail@plt+0x19324>
   2b4dc:	ldr	r3, [r9]
   2b4e0:	bic	r3, r3, #1
   2b4e4:	str	r3, [r9]
   2b4e8:	b	2acc4 <__assert_fail@plt+0x19324>
   2b4ec:	ldr	r5, [r9]
   2b4f0:	mov	r2, #32
   2b4f4:	and	r5, r5, #1024	; 0x400
   2b4f8:	mov	r1, #0
   2b4fc:	mov	r0, r9
   2b500:	bl	11814 <memset@plt>
   2b504:	cmp	r5, #0
   2b508:	beq	2b37c <__assert_fail@plt+0x199dc>
   2b50c:	mov	r3, #1024	; 0x400
   2b510:	str	r3, [r9]
   2b514:	b	2acd4 <__assert_fail@plt+0x19334>
   2b518:	ldr	r2, [r4, #96]	; 0x60
   2b51c:	ldr	r3, [r9]
   2b520:	ldr	r1, [r4, #100]	; 0x64
   2b524:	ldr	r0, [r9, #4]
   2b528:	bic	r3, r3, r2
   2b52c:	bic	r0, r0, r1
   2b530:	ldr	r2, [r4, #104]	; 0x68
   2b534:	ldr	r1, [r9, #8]
   2b538:	ldr	ip, [r9, #12]
   2b53c:	bic	r1, r1, r2
   2b540:	ldr	r2, [r4, #108]	; 0x6c
   2b544:	ldr	lr, [r9, #16]
   2b548:	bic	ip, ip, r2
   2b54c:	ldr	r2, [r4, #112]	; 0x70
   2b550:	str	r3, [r9]
   2b554:	bic	r2, lr, r2
   2b558:	orr	r3, r3, r0
   2b55c:	ldr	lr, [r9, #20]
   2b560:	str	r0, [r9, #4]
   2b564:	ldr	r0, [r4, #116]	; 0x74
   2b568:	orr	r3, r3, r1
   2b56c:	bic	r0, lr, r0
   2b570:	orr	r3, r3, ip
   2b574:	ldr	lr, [r9, #24]
   2b578:	str	r1, [r9, #8]
   2b57c:	ldr	r1, [r4, #120]	; 0x78
   2b580:	orr	r3, r3, r2
   2b584:	str	ip, [r9, #12]
   2b588:	str	r2, [r9, #16]
   2b58c:	ldr	ip, [r4, #124]	; 0x7c
   2b590:	ldr	r2, [r9, #28]
   2b594:	bic	r1, lr, r1
   2b598:	orr	r3, r3, r0
   2b59c:	bic	r2, r2, ip
   2b5a0:	orr	r3, r3, r1
   2b5a4:	str	r0, [r9, #20]
   2b5a8:	str	r1, [r9, #24]
   2b5ac:	orr	r3, r3, r2
   2b5b0:	str	r2, [r9, #28]
   2b5b4:	b	2af14 <__assert_fail@plt+0x19574>
   2b5b8:	ldr	r7, [sp, #8]
   2b5bc:	mov	r3, #0
   2b5c0:	mov	r2, r8
   2b5c4:	mov	r1, fp
   2b5c8:	ldr	r0, [sp, #16]
   2b5cc:	bl	2918c <__assert_fail@plt+0x177ec>
   2b5d0:	ldr	r3, [sp, #4]
   2b5d4:	cmp	r0, #0
   2b5d8:	str	r0, [r3, #4]!
   2b5dc:	mov	r4, r0
   2b5e0:	str	r3, [sp, #4]
   2b5e4:	beq	2b7e4 <__assert_fail@plt+0x19e44>
   2b5e8:	ldrsb	r3, [r4, #52]	; 0x34
   2b5ec:	cmp	r3, #0
   2b5f0:	blt	2b88c <__assert_fail@plt+0x19eec>
   2b5f4:	ldr	r3, [sp]
   2b5f8:	str	r4, [r9, sl, lsl #2]
   2b5fc:	str	r4, [r3]
   2b600:	ldr	r3, [r7, #4]
   2b604:	ldr	r0, [r9, #-2076]	; 0xfffff7e4
   2b608:	ldr	r1, [sp, #20]
   2b60c:	add	sl, sl, #1
   2b610:	ldr	r2, [r7]
   2b614:	orr	r0, r0, r3
   2b618:	ldr	r4, [r9, #-2080]	; 0xfffff7e0
   2b61c:	ldr	r3, [r7, #8]
   2b620:	cmp	sl, r1
   2b624:	ldr	r1, [r9, #-2072]	; 0xfffff7e8
   2b628:	orr	r4, r4, r2
   2b62c:	orr	r1, r1, r3
   2b630:	ldr	r2, [r9, #-2068]	; 0xfffff7ec
   2b634:	ldr	r3, [r7, #12]
   2b638:	str	r0, [r9, #-2076]	; 0xfffff7e4
   2b63c:	orr	r2, r2, r3
   2b640:	ldr	r3, [sp]
   2b644:	ldr	r0, [r9, #-2060]	; 0xfffff7f4
   2b648:	add	r3, r3, #4
   2b64c:	str	r1, [r9, #-2072]	; 0xfffff7e8
   2b650:	ldr	r1, [r7, #20]
   2b654:	ldr	ip, [r9, #-2064]	; 0xfffff7f0
   2b658:	str	r3, [sp]
   2b65c:	ldr	r3, [r7, #16]
   2b660:	orr	r1, r0, r1
   2b664:	str	r2, [r9, #-2068]	; 0xfffff7ec
   2b668:	ldr	r0, [r7, #24]
   2b66c:	ldr	r2, [r9, #-2056]	; 0xfffff7f8
   2b670:	orr	r3, ip, r3
   2b674:	orr	r2, r2, r0
   2b678:	str	r3, [r9, #-2064]	; 0xfffff7f0
   2b67c:	ldr	r0, [r7, #28]
   2b680:	ldr	r3, [r9, #-2052]	; 0xfffff7fc
   2b684:	add	r6, r6, #12
   2b688:	orr	r3, r3, r0
   2b68c:	str	r4, [r9, #-2080]	; 0xfffff7e0
   2b690:	str	r1, [r9, #-2060]	; 0xfffff7f4
   2b694:	str	r2, [r9, #-2056]	; 0xfffff7f8
   2b698:	str	r3, [r9, #-2052]	; 0xfffff7fc
   2b69c:	add	r7, r7, #32
   2b6a0:	bne	2abec <__assert_fail@plt+0x1924c>
   2b6a4:	ldr	r3, [sp, #24]
   2b6a8:	ldr	r5, [sp, #32]
   2b6ac:	cmp	r3, #0
   2b6b0:	bne	2ba08 <__assert_fail@plt+0x1a068>
   2b6b4:	mov	r1, #256	; 0x100
   2b6b8:	mov	r0, #4
   2b6bc:	bl	1ed9c <__assert_fail@plt+0xd3fc>
   2b6c0:	ldr	r3, [sp, #72]	; 0x48
   2b6c4:	cmp	r0, #0
   2b6c8:	str	r0, [r3, #44]	; 0x2c
   2b6cc:	beq	2b7f0 <__assert_fail@plt+0x19e50>
   2b6d0:	ldr	r3, [sp, #104]	; 0x68
   2b6d4:	add	r8, sp, #128	; 0x80
   2b6d8:	add	r6, r3, #96	; 0x60
   2b6dc:	mov	r7, r0
   2b6e0:	add	fp, r0, #1024	; 0x400
   2b6e4:	ldr	r1, [r8], #4
   2b6e8:	cmp	r1, #0
   2b6ec:	movne	ip, r7
   2b6f0:	movne	r2, #1
   2b6f4:	bne	2b70c <__assert_fail@plt+0x19d6c>
   2b6f8:	b	2b758 <__assert_fail@plt+0x19db8>
   2b6fc:	lsrs	r1, r1, #1
   2b700:	lsl	r2, r2, #1
   2b704:	add	ip, ip, #4
   2b708:	beq	2b758 <__assert_fail@plt+0x19db8>
   2b70c:	tst	r1, #1
   2b710:	beq	2b6fc <__assert_fail@plt+0x19d5c>
   2b714:	ldr	r3, [r5]
   2b718:	ands	r3, r2, r3
   2b71c:	bne	2ba00 <__assert_fail@plt+0x1a060>
   2b720:	add	r3, r3, #1
   2b724:	ldr	lr, [r5, r3, lsl #5]
   2b728:	tst	r2, lr
   2b72c:	beq	2b720 <__assert_fail@plt+0x19d80>
   2b730:	ldr	lr, [r6]
   2b734:	add	r3, r9, r3, lsl #2
   2b738:	tst	r2, lr
   2b73c:	add	ip, ip, #4
   2b740:	ldrne	r3, [r3, #-1024]	; 0xfffffc00
   2b744:	ldreq	r3, [r3, #-2048]	; 0xfffff800
   2b748:	lsrs	r1, r1, #1
   2b74c:	str	r3, [ip, #-4]
   2b750:	lsl	r2, r2, #1
   2b754:	bne	2b70c <__assert_fail@plt+0x19d6c>
   2b758:	add	r7, r7, #128	; 0x80
   2b75c:	cmp	fp, r7
   2b760:	add	r6, r6, #4
   2b764:	add	r5, r5, #4
   2b768:	bne	2b6e4 <__assert_fail@plt+0x19d44>
   2b76c:	tst	r4, #1024	; 0x400
   2b770:	beq	2b7ac <__assert_fail@plt+0x19e0c>
   2b774:	mov	r3, #0
   2b778:	ldr	r1, [sp, #28]
   2b77c:	b	2b78c <__assert_fail@plt+0x19dec>
   2b780:	add	r3, r3, #1
   2b784:	cmp	sl, r3
   2b788:	beq	2b7ac <__assert_fail@plt+0x19e0c>
   2b78c:	ldr	r2, [r1, r3, lsl #5]
   2b790:	tst	r2, #1024	; 0x400
   2b794:	beq	2b780 <__assert_fail@plt+0x19de0>
   2b798:	ldr	r2, [sp, #24]
   2b79c:	ldr	r3, [r9, r3, lsl #2]
   2b7a0:	cmp	r2, #0
   2b7a4:	str	r3, [r0, #40]	; 0x28
   2b7a8:	strne	r3, [r0, #1064]	; 0x428
   2b7ac:	ldr	r0, [r9, #-2084]	; 0xfffff7dc
   2b7b0:	add	r9, sl, sl, lsl #1
   2b7b4:	bl	1f018 <__assert_fail@plt+0xd678>
   2b7b8:	ldr	r5, [sp, #12]
   2b7bc:	mov	r4, #0
   2b7c0:	lsl	r9, r9, #2
   2b7c4:	add	r3, r5, r4
   2b7c8:	add	r4, r4, #12
   2b7cc:	ldr	r0, [r3, #8]
   2b7d0:	bl	1f018 <__assert_fail@plt+0xd678>
   2b7d4:	cmp	r4, r9
   2b7d8:	bne	2b7c4 <__assert_fail@plt+0x19e24>
   2b7dc:	mov	r0, #1
   2b7e0:	b	2b2c8 <__assert_fail@plt+0x19928>
   2b7e4:	ldr	r3, [r9, #-2096]	; 0xfffff7d0
   2b7e8:	cmp	r3, #0
   2b7ec:	beq	2b5e8 <__assert_fail@plt+0x19c48>
   2b7f0:	ldr	r0, [r9, #-2084]	; 0xfffff7dc
   2b7f4:	bl	1f018 <__assert_fail@plt+0xd678>
   2b7f8:	ldr	r5, [sp, #12]
   2b7fc:	ldr	r6, [sp, #20]
   2b800:	mov	r4, #0
   2b804:	ldr	r0, [r5, #8]
   2b808:	add	r4, r4, #1
   2b80c:	bl	1f018 <__assert_fail@plt+0xd678>
   2b810:	cmp	r4, r6
   2b814:	add	r5, r5, #12
   2b818:	bne	2b804 <__assert_fail@plt+0x19e64>
   2b81c:	b	2b2c4 <__assert_fail@plt+0x19924>
   2b820:	ldr	r3, [sp, #104]	; 0x68
   2b824:	ldr	r2, [r3, #128]	; 0x80
   2b828:	mvn	r3, #0
   2b82c:	tst	r2, #64	; 0x40
   2b830:	str	r3, [r9]
   2b834:	str	r3, [r9, #4]
   2b838:	str	r3, [r9, #8]
   2b83c:	str	r3, [r9, #12]
   2b840:	mvneq	r3, #1024	; 0x400
   2b844:	streq	r3, [r9]
   2b848:	tst	r2, #128	; 0x80
   2b84c:	beq	2acc4 <__assert_fail@plt+0x19324>
   2b850:	b	2b4dc <__assert_fail@plt+0x19b3c>
   2b854:	mov	r3, #12
   2b858:	str	r3, [r9, #-2096]	; 0xfffff7d0
   2b85c:	ldr	r0, [r9, #-2084]	; 0xfffff7dc
   2b860:	b	2b7f4 <__assert_fail@plt+0x19e54>
   2b864:	ldr	r3, [sp, #100]	; 0x64
   2b868:	ldrb	r3, [r3, #6]
   2b86c:	tst	r3, #64	; 0x40
   2b870:	bne	2acf0 <__assert_fail@plt+0x19350>
   2b874:	b	2b36c <__assert_fail@plt+0x199cc>
   2b878:	mov	r3, #12
   2b87c:	str	r3, [r9, #-2096]	; 0xfffff7d0
   2b880:	add	r3, sp, #3232	; 0xca0
   2b884:	str	r3, [sp, #12]
   2b888:	b	2b7f4 <__assert_fail@plt+0x19e54>
   2b88c:	mov	r3, #1
   2b890:	mov	r2, r8
   2b894:	mov	r1, fp
   2b898:	ldr	r0, [sp, #16]
   2b89c:	bl	2918c <__assert_fail@plt+0x177ec>
   2b8a0:	ldr	r3, [sp]
   2b8a4:	cmp	r0, #0
   2b8a8:	str	r0, [r3]
   2b8ac:	beq	2b9f0 <__assert_fail@plt+0x1a050>
   2b8b0:	cmp	r4, r0
   2b8b4:	beq	2b8cc <__assert_fail@plt+0x19f2c>
   2b8b8:	ldr	r3, [fp, #92]	; 0x5c
   2b8bc:	ldr	r2, [sp, #24]
   2b8c0:	cmp	r3, #1
   2b8c4:	movgt	r2, #1
   2b8c8:	str	r2, [sp, #24]
   2b8cc:	mov	r3, #2
   2b8d0:	mov	r2, r8
   2b8d4:	mov	r1, fp
   2b8d8:	ldr	r0, [sp, #16]
   2b8dc:	bl	2918c <__assert_fail@plt+0x177ec>
   2b8e0:	cmp	r0, #0
   2b8e4:	str	r0, [r9, sl, lsl #2]
   2b8e8:	bne	2b600 <__assert_fail@plt+0x19c60>
   2b8ec:	ldr	r3, [r9, #-2096]	; 0xfffff7d0
   2b8f0:	cmp	r3, #0
   2b8f4:	beq	2b600 <__assert_fail@plt+0x19c60>
   2b8f8:	b	2b7f0 <__assert_fail@plt+0x19e50>
   2b8fc:	ldr	r5, [sp, #104]	; 0x68
   2b900:	ldr	ip, [r9, #4]
   2b904:	ldr	r1, [r9]
   2b908:	ldr	r2, [r5, #100]	; 0x64
   2b90c:	ldr	r0, [r9, #8]
   2b910:	and	ip, ip, r2
   2b914:	ldr	r3, [r5, #96]	; 0x60
   2b918:	ldr	r2, [r5, #104]	; 0x68
   2b91c:	and	r3, r3, r1
   2b920:	and	r0, r0, r2
   2b924:	ldr	r1, [r9, #12]
   2b928:	ldr	r2, [r5, #108]	; 0x6c
   2b92c:	ldr	lr, [r9, #16]
   2b930:	and	r1, r1, r2
   2b934:	ldr	r2, [r5, #112]	; 0x70
   2b938:	str	r3, [r9]
   2b93c:	and	r2, r2, lr
   2b940:	orr	r3, r3, ip
   2b944:	ldr	lr, [r9, #20]
   2b948:	str	ip, [r9, #4]
   2b94c:	ldr	ip, [r5, #116]	; 0x74
   2b950:	orr	r3, r3, r0
   2b954:	and	ip, ip, lr
   2b958:	orr	r3, r3, r1
   2b95c:	ldr	lr, [r9, #24]
   2b960:	str	r0, [r9, #8]
   2b964:	ldr	r0, [r5, #120]	; 0x78
   2b968:	orr	r3, r3, r2
   2b96c:	str	r1, [r9, #12]
   2b970:	str	r2, [r9, #16]
   2b974:	ldr	r1, [r9, #28]
   2b978:	ldr	r2, [r5, #124]	; 0x7c
   2b97c:	and	r0, r0, lr
   2b980:	orr	r3, r3, ip
   2b984:	and	r1, r1, r2
   2b988:	orr	r3, r3, r0
   2b98c:	str	ip, [r9, #20]
   2b990:	str	r0, [r9, #24]
   2b994:	orr	r2, r3, r1
   2b998:	str	r1, [r9, #28]
   2b99c:	b	2ae04 <__assert_fail@plt+0x19464>
   2b9a0:	mov	r2, #32
   2b9a4:	mvn	r1, #0
   2b9a8:	mov	r0, r9
   2b9ac:	bl	11814 <memset@plt>
   2b9b0:	b	2b4bc <__assert_fail@plt+0x19b1c>
   2b9b4:	bne	2b2c4 <__assert_fail@plt+0x19924>
   2b9b8:	mov	r1, #256	; 0x100
   2b9bc:	mov	r0, #4
   2b9c0:	bl	1ed9c <__assert_fail@plt+0xd3fc>
   2b9c4:	ldr	r3, [sp, #72]	; 0x48
   2b9c8:	str	r0, [r3, #44]	; 0x2c
   2b9cc:	adds	r0, r0, #0
   2b9d0:	movne	r0, #1
   2b9d4:	b	2b2c8 <__assert_fail@plt+0x19928>
   2b9d8:	ldr	r3, [sp, #20]
   2b9dc:	str	r0, [r4, #4]
   2b9e0:	cmp	r3, #0
   2b9e4:	str	r0, [r4]
   2b9e8:	beq	2b2c4 <__assert_fail@plt+0x19924>
   2b9ec:	b	2b2a0 <__assert_fail@plt+0x19900>
   2b9f0:	ldr	r3, [r9, #-2096]	; 0xfffff7d0
   2b9f4:	cmp	r3, #0
   2b9f8:	beq	2b8b8 <__assert_fail@plt+0x19f18>
   2b9fc:	b	2b7f0 <__assert_fail@plt+0x19e50>
   2ba00:	mov	r3, #0
   2ba04:	b	2b730 <__assert_fail@plt+0x19d90>
   2ba08:	mov	r1, #512	; 0x200
   2ba0c:	mov	r0, #4
   2ba10:	bl	1ed9c <__assert_fail@plt+0xd3fc>
   2ba14:	ldr	r3, [sp, #72]	; 0x48
   2ba18:	cmp	r0, #0
   2ba1c:	str	r0, [r3, #48]	; 0x30
   2ba20:	beq	2b7f0 <__assert_fail@plt+0x19e50>
   2ba24:	add	r7, sp, #128	; 0x80
   2ba28:	mov	lr, r0
   2ba2c:	add	r8, r0, #1024	; 0x400
   2ba30:	ldr	r1, [r7], #4
   2ba34:	cmp	r1, #0
   2ba38:	movne	ip, lr
   2ba3c:	movne	r2, #1
   2ba40:	bne	2ba58 <__assert_fail@plt+0x1a0b8>
   2ba44:	b	2ba94 <__assert_fail@plt+0x1a0f4>
   2ba48:	lsrs	r1, r1, #1
   2ba4c:	lsl	r2, r2, #1
   2ba50:	add	ip, ip, #4
   2ba54:	beq	2ba94 <__assert_fail@plt+0x1a0f4>
   2ba58:	tst	r1, #1
   2ba5c:	beq	2ba48 <__assert_fail@plt+0x1a0a8>
   2ba60:	ldr	r3, [r5]
   2ba64:	ands	r3, r2, r3
   2ba68:	bne	2baa8 <__assert_fail@plt+0x1a108>
   2ba6c:	add	r3, r3, #1
   2ba70:	ldr	r6, [r5, r3, lsl #5]
   2ba74:	tst	r2, r6
   2ba78:	beq	2ba6c <__assert_fail@plt+0x1a0cc>
   2ba7c:	add	r3, r9, r3, lsl #2
   2ba80:	ldr	r6, [r3, #-2048]	; 0xfffff800
   2ba84:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   2ba88:	str	r6, [ip]
   2ba8c:	str	r3, [ip, #1024]	; 0x400
   2ba90:	b	2ba48 <__assert_fail@plt+0x1a0a8>
   2ba94:	add	lr, lr, #128	; 0x80
   2ba98:	cmp	r8, lr
   2ba9c:	add	r5, r5, #4
   2baa0:	bne	2ba30 <__assert_fail@plt+0x1a090>
   2baa4:	b	2b76c <__assert_fail@plt+0x19dcc>
   2baa8:	mov	r3, #0
   2baac:	b	2ba7c <__assert_fail@plt+0x1a0dc>
   2bab0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2bab4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bab8:	mov	r5, r0
   2babc:	ldr	r0, [r0, #84]	; 0x54
   2bac0:	sub	sp, sp, #92	; 0x5c
   2bac4:	mov	ip, r1
   2bac8:	str	r0, [sp, #28]
   2bacc:	ldr	r0, [r0]
   2bad0:	mov	r7, r2
   2bad4:	str	r1, [sp, #40]	; 0x28
   2bad8:	ldr	r2, [sp, #132]	; 0x84
   2badc:	ldr	r1, [r5, #120]	; 0x78
   2bae0:	ldr	r6, [ip, #4]
   2bae4:	mov	r8, #0
   2bae8:	add	r2, r2, r1
   2baec:	mov	r4, r3
   2baf0:	str	r8, [sp, #56]	; 0x38
   2baf4:	ldr	r3, [r0, r7, lsl #3]
   2baf8:	cmp	r2, r6
   2bafc:	str	r3, [sp, #32]
   2bb00:	bge	2c2b0 <__assert_fail@plt+0x1a910>
   2bb04:	ldr	r3, [sp, #40]	; 0x28
   2bb08:	ldr	r6, [r3]
   2bb0c:	cmp	r6, #0
   2bb10:	beq	2bce8 <__assert_fail@plt+0x1a348>
   2bb14:	ldr	r9, [r3, #8]
   2bb18:	ldr	r3, [r5, #100]	; 0x64
   2bb1c:	ldr	r2, [r5, #88]	; 0x58
   2bb20:	str	r3, [sp, #44]	; 0x2c
   2bb24:	ldr	r3, [r5, #40]	; 0x28
   2bb28:	str	r9, [r5, #100]	; 0x64
   2bb2c:	str	r6, [r5, #40]	; 0x28
   2bb30:	sub	r1, r6, #1
   2bb34:	mov	r0, r5
   2bb38:	str	r3, [sp, #48]	; 0x30
   2bb3c:	bl	20340 <__assert_fail@plt+0xe9a0>
   2bb40:	cmp	r6, r4
   2bb44:	mov	r8, r0
   2bb48:	beq	2bd18 <__assert_fail@plt+0x1a378>
   2bb4c:	ldr	r7, [r9, r6, lsl #2]
   2bb50:	cmp	r7, #0
   2bb54:	beq	2c304 <__assert_fail@plt+0x1a964>
   2bb58:	ldrb	r3, [r7, #52]	; 0x34
   2bb5c:	ands	r2, r3, #64	; 0x40
   2bb60:	bne	2c260 <__assert_fail@plt+0x1a8c0>
   2bb64:	add	r1, sp, #64	; 0x40
   2bb68:	str	r1, [sp, #16]
   2bb6c:	str	r2, [sp, #64]	; 0x40
   2bb70:	str	r2, [sp, #68]	; 0x44
   2bb74:	str	r2, [sp, #72]	; 0x48
   2bb78:	tst	r3, #64	; 0x40
   2bb7c:	beq	2bbd8 <__assert_fail@plt+0x1a238>
   2bb80:	ldr	r3, [sp, #68]	; 0x44
   2bb84:	cmp	r3, #0
   2bb88:	beq	2bbb4 <__assert_fail@plt+0x1a214>
   2bb8c:	ldr	r3, [sp, #136]	; 0x88
   2bb90:	mov	r2, r6
   2bb94:	str	r3, [sp]
   2bb98:	ldr	r1, [sp, #16]
   2bb9c:	ldr	r3, [sp, #32]
   2bba0:	mov	r0, r5
   2bba4:	bl	24e78 <__assert_fail@plt+0x134d8>
   2bba8:	cmp	r0, #0
   2bbac:	str	r0, [sp, #56]	; 0x38
   2bbb0:	bne	2c108 <__assert_fail@plt+0x1a768>
   2bbb4:	mov	r3, r8
   2bbb8:	ldr	r2, [sp, #16]
   2bbbc:	ldr	r1, [sp, #28]
   2bbc0:	add	r0, sp, #56	; 0x38
   2bbc4:	bl	2918c <__assert_fail@plt+0x177ec>
   2bbc8:	subs	r7, r0, #0
   2bbcc:	beq	2c31c <__assert_fail@plt+0x1a97c>
   2bbd0:	ldr	r3, [r5, #100]	; 0x64
   2bbd4:	str	r7, [r3, r6, lsl #2]
   2bbd8:	ldr	r3, [sp, #132]	; 0x84
   2bbdc:	cmp	r3, r6
   2bbe0:	ble	2c010 <__assert_fail@plt+0x1a670>
   2bbe4:	ldr	r3, [r5, #120]	; 0x78
   2bbe8:	cmp	r3, #0
   2bbec:	blt	2c010 <__assert_fail@plt+0x1a670>
   2bbf0:	mov	r3, #0
   2bbf4:	add	r2, r6, #1
   2bbf8:	str	r3, [sp, #24]
   2bbfc:	ldr	r3, [r5, #100]	; 0x64
   2bc00:	mov	fp, r6
   2bc04:	lsl	r2, r2, #2
   2bc08:	str	r2, [sp, #12]
   2bc0c:	ldr	r2, [sp, #12]
   2bc10:	ldr	r6, [r3, r2]
   2bc14:	mov	r3, #0
   2bc18:	cmp	r6, r3
   2bc1c:	str	r3, [sp, #68]	; 0x44
   2bc20:	beq	2c0dc <__assert_fail@plt+0x1a73c>
   2bc24:	ldr	r4, [r6, #8]
   2bc28:	cmp	r4, r3
   2bc2c:	streq	r4, [sp, #56]	; 0x38
   2bc30:	beq	2c0dc <__assert_fail@plt+0x1a73c>
   2bc34:	ldr	r3, [sp, #64]	; 0x40
   2bc38:	cmp	r3, r4, lsl #1
   2bc3c:	blt	2c210 <__assert_fail@plt+0x1a870>
   2bc40:	add	r1, r6, #4
   2bc44:	ldr	r0, [sp, #16]
   2bc48:	bl	201fc <__assert_fail@plt+0xe85c>
   2bc4c:	cmp	r0, #0
   2bc50:	str	r0, [sp, #56]	; 0x38
   2bc54:	bne	2c108 <__assert_fail@plt+0x1a768>
   2bc58:	cmp	r7, #0
   2bc5c:	beq	2bf48 <__assert_fail@plt+0x1a5a8>
   2bc60:	ldr	r3, [r7, #20]
   2bc64:	mov	r2, #0
   2bc68:	cmp	r3, r2
   2bc6c:	str	r2, [sp, #60]	; 0x3c
   2bc70:	str	r2, [sp, #76]	; 0x4c
   2bc74:	str	r2, [sp, #80]	; 0x50
   2bc78:	str	r2, [sp, #84]	; 0x54
   2bc7c:	ldr	r8, [r5, #84]	; 0x54
   2bc80:	ble	2c340 <__assert_fail@plt+0x1a9a0>
   2bc84:	ldr	r3, [r7, #24]
   2bc88:	mov	r4, #0
   2bc8c:	ldr	r6, [r3]
   2bc90:	mov	r3, r8
   2bc94:	ldr	r0, [r3], #128	; 0x80
   2bc98:	lsl	sl, r6, #3
   2bc9c:	str	r3, [sp, #20]
   2bca0:	add	r3, r0, sl
   2bca4:	ldrb	r1, [r3, #6]
   2bca8:	ldrb	r2, [r3, #4]
   2bcac:	tst	r1, #16
   2bcb0:	bne	2be68 <__assert_fail@plt+0x1a4c8>
   2bcb4:	ldr	r1, [r5, #4]
   2bcb8:	sub	r2, r2, #1
   2bcbc:	ldrb	r1, [r1, fp]
   2bcc0:	cmp	r2, #6
   2bcc4:	ldrls	pc, [pc, r2, lsl #2]
   2bcc8:	b	2be34 <__assert_fail@plt+0x1a494>
   2bccc:	andeq	ip, r2, r4, lsr #1
   2bcd0:	andeq	fp, r2, r4, lsr lr
   2bcd4:	andeq	ip, r2, r4, rrx
   2bcd8:	andeq	fp, r2, r4, lsr lr
   2bcdc:	andeq	fp, r2, ip, ror sp
   2bce0:	andeq	fp, r2, r4, lsr lr
   2bce4:	andeq	fp, r2, r4, ror sp
   2bce8:	ldr	r2, [r5, #100]	; 0x64
   2bcec:	ldr	r3, [r3, #8]
   2bcf0:	str	r2, [sp, #44]	; 0x2c
   2bcf4:	ldr	r2, [r5, #40]	; 0x28
   2bcf8:	str	r3, [r5, #100]	; 0x64
   2bcfc:	str	r2, [sp, #48]	; 0x30
   2bd00:	str	r4, [r5, #40]	; 0x28
   2bd04:	ldr	r2, [r5, #88]	; 0x58
   2bd08:	sub	r1, r4, #1
   2bd0c:	mov	r0, r5
   2bd10:	bl	20340 <__assert_fail@plt+0xe9a0>
   2bd14:	mov	r8, r0
   2bd18:	mov	r3, #1
   2bd1c:	mov	r0, #4
   2bd20:	str	r3, [sp, #64]	; 0x40
   2bd24:	str	r3, [sp, #68]	; 0x44
   2bd28:	bl	1f110 <__assert_fail@plt+0xd770>
   2bd2c:	cmp	r0, #0
   2bd30:	str	r0, [sp, #72]	; 0x48
   2bd34:	beq	2c338 <__assert_fail@plt+0x1a998>
   2bd38:	add	r3, sp, #64	; 0x40
   2bd3c:	str	r3, [sp, #16]
   2bd40:	mov	r1, r3
   2bd44:	mov	ip, #0
   2bd48:	str	r7, [r0]
   2bd4c:	ldr	r3, [sp, #136]	; 0x88
   2bd50:	ldr	r2, [sp, #32]
   2bd54:	ldr	r0, [sp, #28]
   2bd58:	str	ip, [sp, #56]	; 0x38
   2bd5c:	bl	23638 <__assert_fail@plt+0x11c98>
   2bd60:	cmp	r0, #0
   2bd64:	str	r0, [sp, #56]	; 0x38
   2bd68:	moveq	r6, r4
   2bd6c:	beq	2bb80 <__assert_fail@plt+0x1a1e0>
   2bd70:	b	2c108 <__assert_fail@plt+0x1a768>
   2bd74:	tst	r1, #128	; 0x80
   2bd78:	bne	2be34 <__assert_fail@plt+0x1a494>
   2bd7c:	cmp	r1, #10
   2bd80:	beq	2c148 <__assert_fail@plt+0x1a7a8>
   2bd84:	cmp	r1, #0
   2bd88:	bne	2bd9c <__assert_fail@plt+0x1a3fc>
   2bd8c:	ldr	r2, [r5, #84]	; 0x54
   2bd90:	ldr	r2, [r2, #128]	; 0x80
   2bd94:	tst	r2, #128	; 0x80
   2bd98:	bne	2be34 <__assert_fail@plt+0x1a494>
   2bd9c:	ldr	r9, [r3, #4]
   2bda0:	ldr	r3, [pc, #1472]	; 2c368 <__assert_fail@plt+0x1a9c8>
   2bda4:	tst	r9, r3
   2bda8:	beq	2bdfc <__assert_fail@plt+0x1a45c>
   2bdac:	ldr	r2, [r5, #88]	; 0x58
   2bdb0:	mov	r1, fp
   2bdb4:	mov	r0, r5
   2bdb8:	bl	20340 <__assert_fail@plt+0xe9a0>
   2bdbc:	ldr	r3, [pc, #1448]	; 2c36c <__assert_fail@plt+0x1a9cc>
   2bdc0:	and	r9, r3, r9, lsr #8
   2bdc4:	tst	r9, #4
   2bdc8:	beq	2c134 <__assert_fail@plt+0x1a794>
   2bdcc:	tst	r0, #1
   2bdd0:	beq	2be34 <__assert_fail@plt+0x1a494>
   2bdd4:	tst	r9, #8
   2bdd8:	bne	2be34 <__assert_fail@plt+0x1a494>
   2bddc:	tst	r9, #32
   2bde0:	beq	2bdec <__assert_fail@plt+0x1a44c>
   2bde4:	tst	r0, #2
   2bde8:	beq	2be34 <__assert_fail@plt+0x1a494>
   2bdec:	tst	r9, #128	; 0x80
   2bdf0:	beq	2bdfc <__assert_fail@plt+0x1a45c>
   2bdf4:	tst	r0, #8
   2bdf8:	beq	2be34 <__assert_fail@plt+0x1a494>
   2bdfc:	lsl	sl, r6, #2
   2be00:	ldr	r2, [r8, #12]
   2be04:	ldr	r3, [sp, #64]	; 0x40
   2be08:	cmp	r3, #0
   2be0c:	ldr	r6, [r2, sl]
   2be10:	beq	2c0b4 <__assert_fail@plt+0x1a714>
   2be14:	ldr	r2, [sp, #68]	; 0x44
   2be18:	cmp	r2, #0
   2be1c:	bne	2c15c <__assert_fail@plt+0x1a7bc>
   2be20:	ldr	r3, [sp, #72]	; 0x48
   2be24:	str	r6, [r3]
   2be28:	ldr	r3, [sp, #68]	; 0x44
   2be2c:	add	r3, r3, #1
   2be30:	str	r3, [sp, #68]	; 0x44
   2be34:	ldr	r3, [r7, #20]
   2be38:	add	r4, r4, #1
   2be3c:	cmp	r4, r3
   2be40:	bge	2c090 <__assert_fail@plt+0x1a6f0>
   2be44:	ldr	r3, [r7, #24]
   2be48:	ldr	r0, [r8]
   2be4c:	ldr	r6, [r3, r4, lsl #2]
   2be50:	lsl	sl, r6, #3
   2be54:	add	r3, r0, sl
   2be58:	ldrb	r1, [r3, #6]
   2be5c:	ldrb	r2, [r3, #4]
   2be60:	tst	r1, #16
   2be64:	beq	2bcb4 <__assert_fail@plt+0x1a314>
   2be68:	str	fp, [sp]
   2be6c:	mov	r3, r5
   2be70:	mov	r2, r6
   2be74:	ldr	r1, [sp, #20]
   2be78:	bl	21e1c <__assert_fail@plt+0x1047c>
   2be7c:	cmp	r0, #1
   2be80:	ble	2c11c <__assert_fail@plt+0x1a77c>
   2be84:	ldr	r3, [r5, #100]	; 0x64
   2be88:	add	r9, r0, fp
   2be8c:	ldr	r2, [r8, #12]
   2be90:	ldr	r3, [r3, r9, lsl #2]
   2be94:	mov	r1, #0
   2be98:	cmp	r3, #0
   2be9c:	ldr	r2, [r2, r6, lsl #2]
   2bea0:	lsl	sl, r6, #2
   2bea4:	str	r1, [sp, #80]	; 0x50
   2bea8:	beq	2bee8 <__assert_fail@plt+0x1a548>
   2beac:	ldr	r6, [r3, #8]
   2beb0:	cmp	r6, r1
   2beb4:	streq	r6, [sp, #60]	; 0x3c
   2beb8:	beq	2bee8 <__assert_fail@plt+0x1a548>
   2bebc:	ldr	r1, [sp, #76]	; 0x4c
   2bec0:	cmp	r1, r6, lsl #1
   2bec4:	blt	2c1a4 <__assert_fail@plt+0x1a804>
   2bec8:	add	r1, r3, #4
   2becc:	add	r0, sp, #76	; 0x4c
   2bed0:	str	r2, [sp, #36]	; 0x24
   2bed4:	bl	201fc <__assert_fail@plt+0xe85c>
   2bed8:	ldr	r2, [sp, #36]	; 0x24
   2bedc:	cmp	r0, #0
   2bee0:	str	r0, [sp, #60]	; 0x3c
   2bee4:	bne	2bf30 <__assert_fail@plt+0x1a590>
   2bee8:	mov	r1, r2
   2beec:	add	r0, sp, #76	; 0x4c
   2bef0:	bl	1fdc4 <__assert_fail@plt+0xe424>
   2bef4:	cmp	r0, #0
   2bef8:	beq	2c0f8 <__assert_fail@plt+0x1a758>
   2befc:	add	r2, sp, #76	; 0x4c
   2bf00:	mov	r1, r8
   2bf04:	add	r0, sp, #60	; 0x3c
   2bf08:	ldr	r6, [r5, #100]	; 0x64
   2bf0c:	bl	24ba8 <__assert_fail@plt+0x13208>
   2bf10:	ldr	r3, [r5, #100]	; 0x64
   2bf14:	str	r0, [r6, r9, lsl #2]
   2bf18:	ldr	r3, [r3, r9, lsl #2]
   2bf1c:	cmp	r3, #0
   2bf20:	bne	2be00 <__assert_fail@plt+0x1a460>
   2bf24:	ldr	r3, [sp, #60]	; 0x3c
   2bf28:	cmp	r3, #0
   2bf2c:	beq	2be00 <__assert_fail@plt+0x1a460>
   2bf30:	ldr	r0, [sp, #84]	; 0x54
   2bf34:	bl	1f018 <__assert_fail@plt+0xd678>
   2bf38:	ldr	r3, [sp, #60]	; 0x3c
   2bf3c:	cmp	r3, #0
   2bf40:	str	r3, [sp, #56]	; 0x38
   2bf44:	bne	2c108 <__assert_fail@plt+0x1a768>
   2bf48:	ldr	r3, [sp, #68]	; 0x44
   2bf4c:	add	r4, fp, #1
   2bf50:	cmp	r3, #0
   2bf54:	mov	r6, r4
   2bf58:	beq	2bfa4 <__assert_fail@plt+0x1a604>
   2bf5c:	ldr	r3, [sp, #136]	; 0x88
   2bf60:	ldr	r2, [sp, #32]
   2bf64:	ldr	r1, [sp, #16]
   2bf68:	ldr	r0, [sp, #28]
   2bf6c:	bl	23638 <__assert_fail@plt+0x11c98>
   2bf70:	cmp	r0, #0
   2bf74:	str	r0, [sp, #56]	; 0x38
   2bf78:	bne	2c108 <__assert_fail@plt+0x1a768>
   2bf7c:	ldr	r3, [sp, #136]	; 0x88
   2bf80:	mov	r2, r4
   2bf84:	str	r3, [sp]
   2bf88:	ldr	r1, [sp, #16]
   2bf8c:	ldr	r3, [sp, #32]
   2bf90:	mov	r0, r5
   2bf94:	bl	24e78 <__assert_fail@plt+0x134d8>
   2bf98:	cmp	r0, #0
   2bf9c:	str	r0, [sp, #56]	; 0x38
   2bfa0:	bne	2c108 <__assert_fail@plt+0x1a768>
   2bfa4:	ldr	r2, [r5, #88]	; 0x58
   2bfa8:	mov	r1, fp
   2bfac:	mov	r0, r5
   2bfb0:	bl	20340 <__assert_fail@plt+0xe9a0>
   2bfb4:	ldr	r2, [sp, #16]
   2bfb8:	ldr	r1, [sp, #28]
   2bfbc:	mov	r3, r0
   2bfc0:	add	r0, sp, #56	; 0x38
   2bfc4:	bl	2918c <__assert_fail@plt+0x177ec>
   2bfc8:	subs	r7, r0, #0
   2bfcc:	beq	2c238 <__assert_fail@plt+0x1a898>
   2bfd0:	mov	r2, #0
   2bfd4:	str	r2, [sp, #24]
   2bfd8:	ldr	r3, [r5, #100]	; 0x64
   2bfdc:	ldr	r2, [sp, #12]
   2bfe0:	str	r7, [r3, r2]
   2bfe4:	ldr	r2, [sp, #132]	; 0x84
   2bfe8:	cmp	r2, r4
   2bfec:	ble	2c010 <__assert_fail@plt+0x1a670>
   2bff0:	ldr	r1, [sp, #12]
   2bff4:	ldr	r2, [r5, #120]	; 0x78
   2bff8:	add	r1, r1, #4
   2bffc:	str	r1, [sp, #12]
   2c000:	ldr	r1, [sp, #24]
   2c004:	mov	fp, r4
   2c008:	cmp	r1, r2
   2c00c:	ble	2bc0c <__assert_fail@plt+0x1a26c>
   2c010:	ldr	r0, [sp, #72]	; 0x48
   2c014:	bl	1f018 <__assert_fail@plt+0xd678>
   2c018:	ldr	r3, [r5, #100]	; 0x64
   2c01c:	ldr	r2, [sp, #132]	; 0x84
   2c020:	ldr	r3, [r3, r2, lsl #2]
   2c024:	cmp	r3, #0
   2c028:	beq	2c348 <__assert_fail@plt+0x1a9a8>
   2c02c:	ldr	r2, [sp, #40]	; 0x28
   2c030:	add	r1, r3, #12
   2c034:	str	r6, [r2]
   2c038:	ldr	r2, [sp, #48]	; 0x30
   2c03c:	str	r2, [r5, #40]	; 0x28
   2c040:	ldr	r2, [sp, #44]	; 0x2c
   2c044:	ldr	r0, [r3, #8]
   2c048:	str	r2, [r5, #100]	; 0x64
   2c04c:	ldr	r2, [sp, #128]	; 0x80
   2c050:	bl	1fee0 <__assert_fail@plt+0xe540>
   2c054:	clz	r0, r0
   2c058:	lsr	r0, r0, #5
   2c05c:	add	sp, sp, #92	; 0x5c
   2c060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c064:	ldr	r2, [r3]
   2c068:	asr	r0, r1, #5
   2c06c:	and	r1, r1, #31
   2c070:	ldr	r2, [r2, r0, lsl #2]
   2c074:	lsr	r1, r2, r1
   2c078:	tst	r1, #1
   2c07c:	bne	2bd9c <__assert_fail@plt+0x1a3fc>
   2c080:	ldr	r3, [r7, #20]
   2c084:	add	r4, r4, #1
   2c088:	cmp	r4, r3
   2c08c:	blt	2be44 <__assert_fail@plt+0x1a4a4>
   2c090:	ldr	r0, [sp, #84]	; 0x54
   2c094:	bl	1f018 <__assert_fail@plt+0xd678>
   2c098:	mov	r3, #0
   2c09c:	str	r3, [sp, #56]	; 0x38
   2c0a0:	b	2bf48 <__assert_fail@plt+0x1a5a8>
   2c0a4:	ldrb	r2, [r3]
   2c0a8:	cmp	r2, r1
   2c0ac:	bne	2be34 <__assert_fail@plt+0x1a494>
   2c0b0:	b	2bd9c <__assert_fail@plt+0x1a3fc>
   2c0b4:	mov	r3, #1
   2c0b8:	mov	r0, #4
   2c0bc:	str	r3, [sp, #64]	; 0x40
   2c0c0:	str	r3, [sp, #68]	; 0x44
   2c0c4:	bl	1f110 <__assert_fail@plt+0xd770>
   2c0c8:	cmp	r0, #0
   2c0cc:	str	r0, [sp, #72]	; 0x48
   2c0d0:	beq	2c0f0 <__assert_fail@plt+0x1a750>
   2c0d4:	str	r6, [r0]
   2c0d8:	b	2be34 <__assert_fail@plt+0x1a494>
   2c0dc:	cmp	r7, #0
   2c0e0:	bne	2bc60 <__assert_fail@plt+0x1a2c0>
   2c0e4:	add	r4, fp, #1
   2c0e8:	mov	r6, r4
   2c0ec:	b	2bfa4 <__assert_fail@plt+0x1a604>
   2c0f0:	str	r0, [sp, #68]	; 0x44
   2c0f4:	str	r0, [sp, #64]	; 0x40
   2c0f8:	ldr	r0, [sp, #84]	; 0x54
   2c0fc:	bl	1f018 <__assert_fail@plt+0xd678>
   2c100:	mov	r3, #12
   2c104:	str	r3, [sp, #56]	; 0x38
   2c108:	ldr	r0, [sp, #72]	; 0x48
   2c10c:	bl	1f018 <__assert_fail@plt+0xd678>
   2c110:	ldr	r0, [sp, #56]	; 0x38
   2c114:	add	sp, sp, #92	; 0x5c
   2c118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c11c:	cmp	r0, #0
   2c120:	bne	2bdfc <__assert_fail@plt+0x1a45c>
   2c124:	ldr	r3, [r8]
   2c128:	add	r3, r3, sl
   2c12c:	ldrb	r2, [r3, #4]
   2c130:	b	2bcb4 <__assert_fail@plt+0x1a314>
   2c134:	tst	r9, #8
   2c138:	beq	2bddc <__assert_fail@plt+0x1a43c>
   2c13c:	tst	r0, #1
   2c140:	beq	2bddc <__assert_fail@plt+0x1a43c>
   2c144:	b	2be34 <__assert_fail@plt+0x1a494>
   2c148:	ldr	r2, [r5, #84]	; 0x54
   2c14c:	ldr	r2, [r2, #128]	; 0x80
   2c150:	tst	r2, #64	; 0x40
   2c154:	bne	2bd9c <__assert_fail@plt+0x1a3fc>
   2c158:	b	2be34 <__assert_fail@plt+0x1a494>
   2c15c:	cmp	r3, r2
   2c160:	beq	2c288 <__assert_fail@plt+0x1a8e8>
   2c164:	ldr	r9, [sp, #72]	; 0x48
   2c168:	ldr	r3, [r9]
   2c16c:	cmp	r6, r3
   2c170:	bge	2c1dc <__assert_fail@plt+0x1a83c>
   2c174:	cmp	r2, #0
   2c178:	ble	2c190 <__assert_fail@plt+0x1a7f0>
   2c17c:	lsl	r2, r2, #2
   2c180:	mov	r1, r9
   2c184:	add	r0, r9, #4
   2c188:	bl	1158c <memmove@plt>
   2c18c:	mov	r2, #0
   2c190:	str	r6, [r9, r2, lsl #2]
   2c194:	ldr	r3, [sp, #68]	; 0x44
   2c198:	add	r3, r3, #1
   2c19c:	str	r3, [sp, #68]	; 0x44
   2c1a0:	b	2be34 <__assert_fail@plt+0x1a494>
   2c1a4:	add	r6, r6, r1
   2c1a8:	ldr	r0, [sp, #84]	; 0x54
   2c1ac:	lsl	r1, r6, #3
   2c1b0:	str	r3, [sp, #52]	; 0x34
   2c1b4:	str	r2, [sp, #36]	; 0x24
   2c1b8:	bl	1f190 <__assert_fail@plt+0xd7f0>
   2c1bc:	lsl	r6, r6, #1
   2c1c0:	ldr	r2, [sp, #36]	; 0x24
   2c1c4:	ldr	r3, [sp, #52]	; 0x34
   2c1c8:	cmp	r0, #0
   2c1cc:	beq	2c32c <__assert_fail@plt+0x1a98c>
   2c1d0:	str	r0, [sp, #84]	; 0x54
   2c1d4:	str	r6, [sp, #76]	; 0x4c
   2c1d8:	b	2bec8 <__assert_fail@plt+0x1a528>
   2c1dc:	sub	r3, r2, #-1073741823	; 0xc0000001
   2c1e0:	ldr	r1, [r9, r3, lsl #2]
   2c1e4:	lsl	r3, r3, #2
   2c1e8:	cmp	r6, r1
   2c1ec:	bge	2c190 <__assert_fail@plt+0x1a7f0>
   2c1f0:	add	r3, r3, #4
   2c1f4:	add	r3, r9, r3
   2c1f8:	str	r1, [r3], #-4
   2c1fc:	ldr	r1, [r3, #-4]
   2c200:	sub	r2, r2, #1
   2c204:	cmp	r6, r1
   2c208:	blt	2c1f8 <__assert_fail@plt+0x1a858>
   2c20c:	b	2c190 <__assert_fail@plt+0x1a7f0>
   2c210:	add	r4, r4, r3
   2c214:	ldr	r0, [sp, #72]	; 0x48
   2c218:	lsl	r1, r4, #3
   2c21c:	bl	1f190 <__assert_fail@plt+0xd7f0>
   2c220:	lsl	r4, r4, #1
   2c224:	cmp	r0, #0
   2c228:	beq	2c100 <__assert_fail@plt+0x1a760>
   2c22c:	str	r0, [sp, #72]	; 0x48
   2c230:	str	r4, [sp, #64]	; 0x40
   2c234:	b	2bc40 <__assert_fail@plt+0x1a2a0>
   2c238:	ldr	r3, [sp, #56]	; 0x38
   2c23c:	cmp	r3, #0
   2c240:	bne	2c108 <__assert_fail@plt+0x1a768>
   2c244:	ldr	r2, [sp, #24]
   2c248:	ldr	r3, [r5, #100]	; 0x64
   2c24c:	add	r2, r2, #1
   2c250:	str	r2, [sp, #24]
   2c254:	ldr	r2, [sp, #12]
   2c258:	str	r7, [r3, r2]
   2c25c:	b	2bfe4 <__assert_fail@plt+0x1a644>
   2c260:	add	r3, sp, #64	; 0x40
   2c264:	mov	r0, r3
   2c268:	add	r1, r7, #4
   2c26c:	str	r3, [sp, #16]
   2c270:	bl	20034 <__assert_fail@plt+0xe694>
   2c274:	cmp	r0, #0
   2c278:	str	r0, [sp, #56]	; 0x38
   2c27c:	bne	2c114 <__assert_fail@plt+0x1a774>
   2c280:	ldrb	r3, [r7, #52]	; 0x34
   2c284:	b	2bb78 <__assert_fail@plt+0x1a1d8>
   2c288:	lsl	r3, r2, #1
   2c28c:	lsl	r1, r2, #3
   2c290:	ldr	r0, [sp, #72]	; 0x48
   2c294:	str	r3, [sp, #64]	; 0x40
   2c298:	bl	1f190 <__assert_fail@plt+0xd7f0>
   2c29c:	subs	r9, r0, #0
   2c2a0:	beq	2c0f8 <__assert_fail@plt+0x1a758>
   2c2a4:	ldr	r2, [sp, #68]	; 0x44
   2c2a8:	str	r9, [sp, #72]	; 0x48
   2c2ac:	b	2c168 <__assert_fail@plt+0x1a7c8>
   2c2b0:	mvn	r3, #-2147483648	; 0x80000000
   2c2b4:	add	r9, r2, #1
   2c2b8:	sub	r3, r3, r6
   2c2bc:	cmp	r9, r3
   2c2c0:	bgt	2c338 <__assert_fail@plt+0x1a998>
   2c2c4:	add	sl, r6, r9
   2c2c8:	cmn	sl, #-1073741823	; 0xc0000001
   2c2cc:	bhi	2c338 <__assert_fail@plt+0x1a998>
   2c2d0:	lsl	r1, sl, #2
   2c2d4:	ldr	r0, [ip, #8]
   2c2d8:	mov	fp, ip
   2c2dc:	bl	1f190 <__assert_fail@plt+0xd7f0>
   2c2e0:	cmp	r0, #0
   2c2e4:	beq	2c338 <__assert_fail@plt+0x1a998>
   2c2e8:	str	r0, [fp, #8]
   2c2ec:	str	sl, [fp, #4]
   2c2f0:	lsl	r2, r9, #2
   2c2f4:	mov	r1, r8
   2c2f8:	add	r0, r0, r6, lsl #2
   2c2fc:	bl	11814 <memset@plt>
   2c300:	b	2bb04 <__assert_fail@plt+0x1a164>
   2c304:	add	r3, sp, #64	; 0x40
   2c308:	str	r3, [sp, #16]
   2c30c:	str	r7, [sp, #64]	; 0x40
   2c310:	str	r7, [sp, #68]	; 0x44
   2c314:	str	r7, [sp, #72]	; 0x48
   2c318:	b	2bbd8 <__assert_fail@plt+0x1a238>
   2c31c:	ldr	r3, [sp, #56]	; 0x38
   2c320:	cmp	r3, #0
   2c324:	beq	2bbd0 <__assert_fail@plt+0x1a230>
   2c328:	b	2c108 <__assert_fail@plt+0x1a768>
   2c32c:	mov	r3, #12
   2c330:	str	r3, [sp, #60]	; 0x3c
   2c334:	b	2bf30 <__assert_fail@plt+0x1a590>
   2c338:	mov	r0, #12
   2c33c:	b	2c114 <__assert_fail@plt+0x1a774>
   2c340:	mov	r0, #0
   2c344:	b	2c094 <__assert_fail@plt+0x1a6f4>
   2c348:	ldr	r3, [sp, #40]	; 0x28
   2c34c:	mov	r0, #1
   2c350:	str	r6, [r3]
   2c354:	ldr	r3, [sp, #44]	; 0x2c
   2c358:	str	r3, [r5, #100]	; 0x64
   2c35c:	ldr	r3, [sp, #48]	; 0x30
   2c360:	str	r3, [r5, #40]	; 0x28
   2c364:	b	2c114 <__assert_fail@plt+0x1a774>
   2c368:	andeq	pc, r3, r0, lsl #30
   2c36c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2c370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c374:	sub	sp, sp, #20
   2c378:	mov	ip, r2
   2c37c:	ldr	r5, [sp, #56]	; 0x38
   2c380:	ldr	r4, [r2, #4]
   2c384:	mov	lr, #8
   2c388:	mov	r6, r2
   2c38c:	ldr	r2, [ip], #8
   2c390:	mov	r7, r3
   2c394:	str	r3, [sp]
   2c398:	mov	r9, r1
   2c39c:	mov	r3, r4
   2c3a0:	mov	r1, ip
   2c3a4:	stmib	sp, {r5, lr}
   2c3a8:	mov	r4, r0
   2c3ac:	bl	2bab4 <__assert_fail@plt+0x1a114>
   2c3b0:	subs	r8, r0, #0
   2c3b4:	beq	2c3c4 <__assert_fail@plt+0x1aa24>
   2c3b8:	mov	r0, r8
   2c3bc:	add	sp, sp, #20
   2c3c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c3c4:	ldr	r3, [r4, #108]	; 0x6c
   2c3c8:	ldr	r1, [r4, #112]	; 0x70
   2c3cc:	ldr	sl, [r6, #4]
   2c3d0:	cmp	r3, r1
   2c3d4:	ldr	fp, [r9]
   2c3d8:	movlt	ip, sl
   2c3dc:	bge	2c4d8 <__assert_fail@plt+0x1ab38>
   2c3e0:	add	r2, r3, r3, lsl #1
   2c3e4:	cmp	r3, #0
   2c3e8:	ldr	r0, [r4, #116]	; 0x74
   2c3ec:	lsl	r2, r2, #3
   2c3f0:	ble	2c40c <__assert_fail@plt+0x1aa6c>
   2c3f4:	sub	r1, r2, #24
   2c3f8:	add	r1, r0, r1
   2c3fc:	ldr	lr, [r1, #4]
   2c400:	cmp	r5, lr
   2c404:	moveq	lr, #1
   2c408:	strbeq	lr, [r1, #20]
   2c40c:	add	r1, r0, r2
   2c410:	cmp	fp, sl
   2c414:	str	r7, [r0, r2]
   2c418:	add	r3, r3, #1
   2c41c:	movne	r0, #0
   2c420:	mvneq	r0, #0
   2c424:	mov	r2, #0
   2c428:	stmib	r1, {r5, fp}
   2c42c:	str	sl, [r1, #12]
   2c430:	str	r0, [r1, #16]
   2c434:	str	r3, [r4, #108]	; 0x6c
   2c438:	strb	r2, [r1, #20]
   2c43c:	ldr	r3, [r4, #120]	; 0x78
   2c440:	sub	sl, sl, fp
   2c444:	cmp	r3, sl
   2c448:	strlt	sl, [r4, #120]	; 0x78
   2c44c:	ldr	r2, [r9]
   2c450:	add	r5, r5, ip
   2c454:	ldr	r3, [r4, #36]	; 0x24
   2c458:	sub	r5, r5, r2
   2c45c:	cmp	r5, r3
   2c460:	ldr	r6, [r4, #104]	; 0x68
   2c464:	blt	2c4bc <__assert_fail@plt+0x1ab1c>
   2c468:	ldr	r2, [r4, #48]	; 0x30
   2c46c:	cmp	r3, r2
   2c470:	bge	2c4bc <__assert_fail@plt+0x1ab1c>
   2c474:	add	r1, r5, #1
   2c478:	mov	r0, r4
   2c47c:	bl	24994 <__assert_fail@plt+0x12ff4>
   2c480:	cmp	r0, #0
   2c484:	bne	2c52c <__assert_fail@plt+0x1ab8c>
   2c488:	cmp	r5, r6
   2c48c:	ble	2c3b8 <__assert_fail@plt+0x1aa18>
   2c490:	sub	r2, r5, r6
   2c494:	ldr	r0, [r4, #100]	; 0x64
   2c498:	add	r6, r6, #1
   2c49c:	lsl	r2, r2, #2
   2c4a0:	add	r0, r0, r6, lsl #2
   2c4a4:	mov	r1, #0
   2c4a8:	bl	11814 <memset@plt>
   2c4ac:	mov	r0, r8
   2c4b0:	str	r5, [r4, #104]	; 0x68
   2c4b4:	add	sp, sp, #20
   2c4b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c4bc:	ldr	r3, [r4, #28]
   2c4c0:	cmp	r5, r3
   2c4c4:	blt	2c488 <__assert_fail@plt+0x1aae8>
   2c4c8:	ldr	r2, [r4, #48]	; 0x30
   2c4cc:	cmp	r3, r2
   2c4d0:	bge	2c488 <__assert_fail@plt+0x1aae8>
   2c4d4:	b	2c474 <__assert_fail@plt+0x1aad4>
   2c4d8:	add	r1, r1, r1, lsl #1
   2c4dc:	ldr	r0, [r4, #116]	; 0x74
   2c4e0:	lsl	r1, r1, #4
   2c4e4:	bl	1f190 <__assert_fail@plt+0xd7f0>
   2c4e8:	cmp	r0, #0
   2c4ec:	beq	2c534 <__assert_fail@plt+0x1ab94>
   2c4f0:	ldr	r2, [r4, #112]	; 0x70
   2c4f4:	ldr	r3, [r4, #108]	; 0x6c
   2c4f8:	str	r0, [r4, #116]	; 0x74
   2c4fc:	add	r2, r2, r2, lsl #1
   2c500:	add	r3, r3, r3, lsl #1
   2c504:	lsl	r2, r2, #3
   2c508:	add	r0, r0, r3, lsl #3
   2c50c:	mov	r1, r8
   2c510:	bl	11814 <memset@plt>
   2c514:	ldr	r2, [r4, #112]	; 0x70
   2c518:	ldr	ip, [r6, #4]
   2c51c:	ldr	r3, [r4, #108]	; 0x6c
   2c520:	lsl	r2, r2, #1
   2c524:	str	r2, [r4, #112]	; 0x70
   2c528:	b	2c3e0 <__assert_fail@plt+0x1aa40>
   2c52c:	mov	r8, r0
   2c530:	b	2c3b8 <__assert_fail@plt+0x1aa18>
   2c534:	ldr	r0, [r4, #116]	; 0x74
   2c538:	bl	1f018 <__assert_fail@plt+0xd678>
   2c53c:	mov	r8, #12
   2c540:	b	2c3b8 <__assert_fail@plt+0x1aa18>
   2c544:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c548:	sub	sp, sp, #92	; 0x5c
   2c54c:	ldr	r6, [r1]
   2c550:	ldr	r3, [r0, #84]	; 0x54
   2c554:	cmp	r6, #0
   2c558:	str	r3, [sp, #36]	; 0x24
   2c55c:	ldr	fp, [r0, #40]	; 0x28
   2c560:	ble	2caec <__assert_fail@plt+0x1b14c>
   2c564:	mov	r3, #0
   2c568:	str	r3, [sp, #20]
   2c56c:	lsl	r3, fp, #2
   2c570:	str	r2, [sp, #40]	; 0x28
   2c574:	mov	sl, r0
   2c578:	str	r1, [sp, #64]	; 0x40
   2c57c:	str	r3, [sp, #52]	; 0x34
   2c580:	mov	r9, fp
   2c584:	b	2c59c <__assert_fail@plt+0x1abfc>
   2c588:	ldr	r3, [sp, #20]
   2c58c:	add	r3, r3, #1
   2c590:	cmp	r3, r6
   2c594:	str	r3, [sp, #20]
   2c598:	bge	2caec <__assert_fail@plt+0x1b14c>
   2c59c:	ldr	r3, [sp, #40]	; 0x28
   2c5a0:	ldr	r1, [sp, #20]
   2c5a4:	ldr	r2, [r3]
   2c5a8:	ldr	r3, [sp, #36]	; 0x24
   2c5ac:	ldr	fp, [r2, r1, lsl #2]
   2c5b0:	ldr	r3, [r3]
   2c5b4:	add	r3, r3, fp, lsl #3
   2c5b8:	ldrb	r2, [r3, #4]
   2c5bc:	cmp	r2, #4
   2c5c0:	bne	2c588 <__assert_fail@plt+0x1abe8>
   2c5c4:	ldr	r4, [r3, #4]
   2c5c8:	ldr	r3, [pc, #1924]	; 2cd54 <__assert_fail@plt+0x1b3b4>
   2c5cc:	tst	r4, r3
   2c5d0:	beq	2c624 <__assert_fail@plt+0x1ac84>
   2c5d4:	ldr	r2, [sl, #88]	; 0x58
   2c5d8:	mov	r1, r9
   2c5dc:	mov	r0, sl
   2c5e0:	bl	20340 <__assert_fail@plt+0xe9a0>
   2c5e4:	ldr	r3, [pc, #1900]	; 2cd58 <__assert_fail@plt+0x1b3b8>
   2c5e8:	and	r4, r3, r4, lsr #8
   2c5ec:	tst	r4, #4
   2c5f0:	beq	2c884 <__assert_fail@plt+0x1aee4>
   2c5f4:	tst	r0, #1
   2c5f8:	beq	2c588 <__assert_fail@plt+0x1abe8>
   2c5fc:	tst	r4, #8
   2c600:	bne	2c588 <__assert_fail@plt+0x1abe8>
   2c604:	tst	r4, #32
   2c608:	beq	2c614 <__assert_fail@plt+0x1ac74>
   2c60c:	tst	r0, #2
   2c610:	beq	2c588 <__assert_fail@plt+0x1abe8>
   2c614:	tst	r4, #128	; 0x80
   2c618:	beq	2c624 <__assert_fail@plt+0x1ac84>
   2c61c:	tst	r0, #8
   2c620:	beq	2c588 <__assert_fail@plt+0x1abe8>
   2c624:	ldr	ip, [sl, #108]	; 0x6c
   2c628:	mov	r0, #0
   2c62c:	mov	r8, ip
   2c630:	mov	r3, ip
   2c634:	cmp	r0, r3
   2c638:	bge	2c694 <__assert_fail@plt+0x1acf4>
   2c63c:	add	r2, r0, r3
   2c640:	ldr	lr, [sl, #116]	; 0x74
   2c644:	add	r2, r2, r2, lsr #31
   2c648:	asr	r2, r2, #1
   2c64c:	add	r1, r2, r2, lsl #1
   2c650:	add	r1, lr, r1, lsl #3
   2c654:	ldr	r1, [r1, #4]
   2c658:	cmp	r9, r1
   2c65c:	ble	2c684 <__assert_fail@plt+0x1ace4>
   2c660:	b	2c870 <__assert_fail@plt+0x1aed0>
   2c664:	asr	r3, r3, #1
   2c668:	mov	r4, r3
   2c66c:	add	r1, r3, r3, lsl #1
   2c670:	add	r1, lr, r1, lsl #3
   2c674:	ldr	r1, [r1, #4]
   2c678:	cmp	r9, r1
   2c67c:	bgt	2c878 <__assert_fail@plt+0x1aed8>
   2c680:	mov	r2, r3
   2c684:	add	r3, r0, r2
   2c688:	cmp	r0, r2
   2c68c:	add	r3, r3, r3, lsr #31
   2c690:	blt	2c664 <__assert_fail@plt+0x1acc4>
   2c694:	cmp	ip, r0
   2c698:	ble	2c898 <__assert_fail@plt+0x1aef8>
   2c69c:	add	r2, r0, r0, lsl #1
   2c6a0:	ldr	r3, [sl, #116]	; 0x74
   2c6a4:	cmn	r0, #1
   2c6a8:	add	r3, r3, r2, lsl #3
   2c6ac:	ldr	r2, [r3, #4]
   2c6b0:	sub	r2, r2, r9
   2c6b4:	clz	r2, r2
   2c6b8:	lsr	r2, r2, #5
   2c6bc:	moveq	r2, #0
   2c6c0:	cmp	r2, #0
   2c6c4:	beq	2c898 <__assert_fail@plt+0x1aef8>
   2c6c8:	add	r3, r3, #24
   2c6cc:	b	2c6dc <__assert_fail@plt+0x1ad3c>
   2c6d0:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   2c6d4:	cmp	r2, #0
   2c6d8:	beq	2c898 <__assert_fail@plt+0x1aef8>
   2c6dc:	ldr	r2, [r3, #-24]	; 0xffffffe8
   2c6e0:	add	r3, r3, #24
   2c6e4:	cmp	fp, r2
   2c6e8:	bne	2c6d0 <__assert_fail@plt+0x1ad30>
   2c6ec:	mov	r3, #0
   2c6f0:	str	r3, [sp, #72]	; 0x48
   2c6f4:	cmp	r8, ip
   2c6f8:	lsl	r3, fp, #2
   2c6fc:	str	r3, [sp, #48]	; 0x30
   2c700:	bge	2c864 <__assert_fail@plt+0x1aec4>
   2c704:	add	r3, fp, fp, lsl #1
   2c708:	add	r4, r8, r8, lsl #1
   2c70c:	lsl	r3, r3, #2
   2c710:	str	r3, [sp, #56]	; 0x38
   2c714:	lsl	r4, r4, #3
   2c718:	ldr	r6, [sp, #36]	; 0x24
   2c71c:	b	2c730 <__assert_fail@plt+0x1ad90>
   2c720:	add	r8, r8, #1
   2c724:	cmp	r8, ip
   2c728:	add	r4, r4, #24
   2c72c:	bge	2c864 <__assert_fail@plt+0x1aec4>
   2c730:	ldr	r3, [sl, #116]	; 0x74
   2c734:	add	r2, r3, r4
   2c738:	ldr	r3, [r3, r4]
   2c73c:	cmp	fp, r3
   2c740:	bne	2c720 <__assert_fail@plt+0x1ad80>
   2c744:	ldr	r3, [r2, #4]
   2c748:	cmp	r9, r3
   2c74c:	bne	2c720 <__assert_fail@plt+0x1ad80>
   2c750:	ldr	r3, [r2, #12]
   2c754:	ldr	r5, [r2, #8]
   2c758:	subs	r2, r3, r5
   2c75c:	str	r2, [sp, #28]
   2c760:	ldreq	r0, [sp, #56]	; 0x38
   2c764:	ldreq	r2, [r6, #20]
   2c768:	ldrne	r2, [r6, #12]
   2c76c:	addeq	r2, r2, r0
   2c770:	ldrne	r0, [sp, #48]	; 0x30
   2c774:	ldreq	r2, [r2, #8]
   2c778:	ldreq	r1, [r6, #24]
   2c77c:	ldrne	r2, [r2, r0]
   2c780:	ldreq	r2, [r2]
   2c784:	ldrne	r1, [r6, #24]
   2c788:	add	r3, r9, r3
   2c78c:	add	r2, r2, r2, lsl #1
   2c790:	sub	r5, r3, r5
   2c794:	add	r2, r1, r2, lsl #2
   2c798:	str	r2, [sp, #24]
   2c79c:	sub	r1, r5, #1
   2c7a0:	ldr	r2, [sl, #88]	; 0x58
   2c7a4:	mov	r0, sl
   2c7a8:	bl	20340 <__assert_fail@plt+0xe9a0>
   2c7ac:	ldr	r7, [sl, #100]	; 0x64
   2c7b0:	ldr	r2, [sp, #52]	; 0x34
   2c7b4:	ldr	r1, [r7, r2]
   2c7b8:	ldr	r2, [r7, r5, lsl #2]
   2c7bc:	cmp	r1, #0
   2c7c0:	moveq	r1, #0
   2c7c4:	ldrne	r1, [r1, #8]
   2c7c8:	cmp	r2, #0
   2c7cc:	str	r1, [sp, #44]	; 0x2c
   2c7d0:	mov	r3, r0
   2c7d4:	beq	2ca38 <__assert_fail@plt+0x1b098>
   2c7d8:	str	r0, [sp, #32]
   2c7dc:	ldr	r1, [r2, #40]	; 0x28
   2c7e0:	add	r0, sp, #76	; 0x4c
   2c7e4:	ldr	r2, [sp, #24]
   2c7e8:	bl	25600 <__assert_fail@plt+0x13c60>
   2c7ec:	ldr	r3, [sp, #32]
   2c7f0:	cmp	r0, #0
   2c7f4:	str	r0, [sp, #72]	; 0x48
   2c7f8:	bne	2cad8 <__assert_fail@plt+0x1b138>
   2c7fc:	add	r2, sp, #76	; 0x4c
   2c800:	mov	r1, r6
   2c804:	add	r0, sp, #72	; 0x48
   2c808:	ldr	r7, [sl, #100]	; 0x64
   2c80c:	bl	2918c <__assert_fail@plt+0x177ec>
   2c810:	str	r0, [r7, r5, lsl #2]
   2c814:	ldr	r0, [sp, #84]	; 0x54
   2c818:	bl	1f018 <__assert_fail@plt+0xd678>
   2c81c:	ldr	r3, [sl, #100]	; 0x64
   2c820:	ldr	r2, [r3, r5, lsl #2]
   2c824:	cmp	r2, #0
   2c828:	beq	2ca5c <__assert_fail@plt+0x1b0bc>
   2c82c:	ldr	r2, [sp, #28]
   2c830:	cmp	r2, #0
   2c834:	bne	2c850 <__assert_fail@plt+0x1aeb0>
   2c838:	ldr	r2, [sp, #52]	; 0x34
   2c83c:	ldr	r3, [r3, r2]
   2c840:	ldr	r2, [sp, #44]	; 0x2c
   2c844:	ldr	r3, [r3, #8]
   2c848:	cmp	r3, r2
   2c84c:	bgt	2ca6c <__assert_fail@plt+0x1b0cc>
   2c850:	ldr	ip, [sl, #108]	; 0x6c
   2c854:	add	r8, r8, #1
   2c858:	cmp	r8, ip
   2c85c:	add	r4, r4, #24
   2c860:	blt	2c730 <__assert_fail@plt+0x1ad90>
   2c864:	ldr	r3, [sp, #64]	; 0x40
   2c868:	ldr	r6, [r3]
   2c86c:	b	2c588 <__assert_fail@plt+0x1abe8>
   2c870:	mov	r4, r2
   2c874:	mov	r2, r3
   2c878:	add	r0, r4, #1
   2c87c:	mov	r3, r2
   2c880:	b	2c634 <__assert_fail@plt+0x1ac94>
   2c884:	tst	r4, #8
   2c888:	beq	2c604 <__assert_fail@plt+0x1ac64>
   2c88c:	tst	r0, #1
   2c890:	beq	2c604 <__assert_fail@plt+0x1ac64>
   2c894:	b	2c588 <__assert_fail@plt+0x1abe8>
   2c898:	ldr	r3, [sl, #84]	; 0x54
   2c89c:	ldr	r1, [sl, #124]	; 0x7c
   2c8a0:	str	r3, [sp, #60]	; 0x3c
   2c8a4:	ldr	r3, [r3]
   2c8a8:	cmp	r1, #0
   2c8ac:	ldr	r2, [r3, fp, lsl #3]
   2c8b0:	str	r2, [sp, #56]	; 0x38
   2c8b4:	ble	2c6ec <__assert_fail@plt+0x1ad4c>
   2c8b8:	ldr	r2, [sl, #4]
   2c8bc:	str	r9, [sp, #32]
   2c8c0:	mov	ip, r2
   2c8c4:	mov	r2, #0
   2c8c8:	mov	r0, r2
   2c8cc:	str	r2, [sp, #44]	; 0x2c
   2c8d0:	str	fp, [sp, #48]	; 0x30
   2c8d4:	str	r8, [sp, #68]	; 0x44
   2c8d8:	ldr	r2, [sl, #132]	; 0x84
   2c8dc:	ldr	r4, [r2, r0, lsl #2]
   2c8e0:	ldr	r2, [r4, #4]
   2c8e4:	ldr	r3, [r3, r2, lsl #3]
   2c8e8:	ldr	r2, [sp, #56]	; 0x38
   2c8ec:	cmp	r2, r3
   2c8f0:	beq	2c918 <__assert_fail@plt+0x1af78>
   2c8f4:	ldr	r3, [sp, #44]	; 0x2c
   2c8f8:	add	r3, r3, #1
   2c8fc:	cmp	r3, r1
   2c900:	str	r3, [sp, #44]	; 0x2c
   2c904:	bge	2ccf8 <__assert_fail@plt+0x1b358>
   2c908:	ldr	r3, [sp, #60]	; 0x3c
   2c90c:	ldr	r0, [sp, #44]	; 0x2c
   2c910:	ldr	r3, [r3]
   2c914:	b	2c8d8 <__assert_fail@plt+0x1af38>
   2c918:	ldr	r2, [r4, #16]
   2c91c:	ldr	r7, [r4]
   2c920:	cmp	r2, #0
   2c924:	ble	2cd3c <__assert_fail@plt+0x1b39c>
   2c928:	ldr	r3, [sp, #32]
   2c92c:	mov	r6, #0
   2c930:	str	r7, [sp, #24]
   2c934:	mov	fp, ip
   2c938:	b	2c954 <__assert_fail@plt+0x1afb4>
   2c93c:	ldr	r2, [r4, #16]
   2c940:	add	r6, r6, #1
   2c944:	cmp	r6, r2
   2c948:	str	r7, [sp, #24]
   2c94c:	mov	r3, r8
   2c950:	bge	2caf8 <__assert_fail@plt+0x1b158>
   2c954:	ldr	r1, [r4, #20]
   2c958:	ldr	r9, [r1, r6, lsl #2]
   2c95c:	ldr	r1, [sp, #24]
   2c960:	ldr	r7, [r9, #4]
   2c964:	sub	r5, r7, r1
   2c968:	cmp	r5, #0
   2c96c:	addle	r8, r5, r3
   2c970:	ble	2c9a8 <__assert_fail@plt+0x1b008>
   2c974:	ldr	r1, [sl, #28]
   2c978:	add	r8, r5, r3
   2c97c:	cmp	r8, r1
   2c980:	bgt	2c9d8 <__assert_fail@plt+0x1b038>
   2c984:	ldr	r1, [sp, #24]
   2c988:	add	r0, fp, r3
   2c98c:	mov	r2, r5
   2c990:	add	r1, fp, r1
   2c994:	str	r3, [sp, #28]
   2c998:	bl	1161c <memcmp@plt>
   2c99c:	ldr	r3, [sp, #28]
   2c9a0:	cmp	r0, #0
   2c9a4:	bne	2cc78 <__assert_fail@plt+0x1b2d8>
   2c9a8:	ldr	r3, [sp, #32]
   2c9ac:	mov	r2, r9
   2c9b0:	str	r3, [sp]
   2c9b4:	mov	r1, r4
   2c9b8:	ldr	r3, [sp, #48]	; 0x30
   2c9bc:	mov	r0, sl
   2c9c0:	bl	2c370 <__assert_fail@plt+0x1a9d0>
   2c9c4:	ldr	fp, [sl, #4]
   2c9c8:	cmp	r0, #1
   2c9cc:	bls	2c93c <__assert_fail@plt+0x1af9c>
   2c9d0:	add	sp, sp, #92	; 0x5c
   2c9d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c9d8:	ldr	r0, [sl, #48]	; 0x30
   2c9dc:	cmp	r8, r0
   2c9e0:	bgt	2cd48 <__assert_fail@plt+0x1b3a8>
   2c9e4:	ldr	r2, [sl, #36]	; 0x24
   2c9e8:	ldr	fp, [sl, #104]	; 0x68
   2c9ec:	cmp	r8, r2
   2c9f0:	cmpge	r0, r2
   2c9f4:	bgt	2cab8 <__assert_fail@plt+0x1b118>
   2c9f8:	cmp	r1, r0
   2c9fc:	blt	2cab8 <__assert_fail@plt+0x1b118>
   2ca00:	cmp	r8, fp
   2ca04:	ble	2ca30 <__assert_fail@plt+0x1b090>
   2ca08:	sub	r2, r8, fp
   2ca0c:	ldr	r0, [sl, #100]	; 0x64
   2ca10:	add	fp, fp, #1
   2ca14:	lsl	r2, r2, #2
   2ca18:	add	r0, r0, fp, lsl #2
   2ca1c:	mov	r1, #0
   2ca20:	str	r3, [sp, #28]
   2ca24:	bl	11814 <memset@plt>
   2ca28:	ldr	r3, [sp, #28]
   2ca2c:	str	r8, [sl, #104]	; 0x68
   2ca30:	ldr	fp, [sl, #4]
   2ca34:	b	2c984 <__assert_fail@plt+0x1afe4>
   2ca38:	ldr	r2, [sp, #24]
   2ca3c:	mov	r1, r6
   2ca40:	add	r0, sp, #72	; 0x48
   2ca44:	bl	2918c <__assert_fail@plt+0x177ec>
   2ca48:	ldr	r3, [sl, #100]	; 0x64
   2ca4c:	str	r0, [r7, r5, lsl #2]
   2ca50:	ldr	r2, [r3, r5, lsl #2]
   2ca54:	cmp	r2, #0
   2ca58:	bne	2c82c <__assert_fail@plt+0x1ae8c>
   2ca5c:	ldr	r0, [sp, #72]	; 0x48
   2ca60:	cmp	r0, #0
   2ca64:	beq	2c82c <__assert_fail@plt+0x1ae8c>
   2ca68:	b	2c9d0 <__assert_fail@plt+0x1b030>
   2ca6c:	ldr	r3, [sp, #24]
   2ca70:	mov	r0, sl
   2ca74:	add	r5, r3, #4
   2ca78:	add	r7, r3, #8
   2ca7c:	mov	r2, r7
   2ca80:	mov	r1, r5
   2ca84:	mov	r3, r9
   2ca88:	bl	20fd8 <__assert_fail@plt+0xf638>
   2ca8c:	cmp	r0, #0
   2ca90:	str	r0, [sp, #72]	; 0x48
   2ca94:	bne	2c9d0 <__assert_fail@plt+0x1b030>
   2ca98:	mov	r2, r7
   2ca9c:	mov	r1, r5
   2caa0:	mov	r0, sl
   2caa4:	bl	2c544 <__assert_fail@plt+0x1aba4>
   2caa8:	cmp	r0, #0
   2caac:	str	r0, [sp, #72]	; 0x48
   2cab0:	beq	2c850 <__assert_fail@plt+0x1aeb0>
   2cab4:	b	2c9d0 <__assert_fail@plt+0x1b030>
   2cab8:	add	r1, r8, #1
   2cabc:	mov	r0, sl
   2cac0:	str	r3, [sp, #28]
   2cac4:	bl	24994 <__assert_fail@plt+0x12ff4>
   2cac8:	ldr	r3, [sp, #28]
   2cacc:	cmp	r0, #0
   2cad0:	beq	2ca00 <__assert_fail@plt+0x1b060>
   2cad4:	b	2c9d0 <__assert_fail@plt+0x1b030>
   2cad8:	ldr	r0, [sp, #84]	; 0x54
   2cadc:	bl	1f018 <__assert_fail@plt+0xd678>
   2cae0:	ldr	r0, [sp, #72]	; 0x48
   2cae4:	add	sp, sp, #92	; 0x5c
   2cae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2caec:	mov	r0, #0
   2caf0:	add	sp, sp, #92	; 0x5c
   2caf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2caf8:	mov	ip, fp
   2cafc:	mov	fp, r7
   2cb00:	ldr	r3, [sp, #32]
   2cb04:	add	r7, fp, #1
   2cb08:	cmp	r3, r7
   2cb0c:	blt	2cc70 <__assert_fail@plt+0x1b2d0>
   2cb10:	ldr	r9, [sp, #56]	; 0x38
   2cb14:	lsl	r6, r7, #2
   2cb18:	mov	fp, ip
   2cb1c:	ldr	r3, [r4]
   2cb20:	sub	r3, r7, r3
   2cb24:	cmp	r3, #0
   2cb28:	ble	2cb54 <__assert_fail@plt+0x1b1b4>
   2cb2c:	ldr	r3, [sl, #28]
   2cb30:	cmp	r3, r8
   2cb34:	ble	2cccc <__assert_fail@plt+0x1b32c>
   2cb38:	add	r5, r8, #1
   2cb3c:	add	r3, fp, r7
   2cb40:	ldrb	r2, [fp, r8]
   2cb44:	ldrb	r3, [r3, #-1]
   2cb48:	cmp	r2, r3
   2cb4c:	bne	2cc6c <__assert_fail@plt+0x1b2cc>
   2cb50:	mov	r8, r5
   2cb54:	ldr	r3, [sl, #100]	; 0x64
   2cb58:	ldr	r3, [r3, r6]
   2cb5c:	cmp	r3, #0
   2cb60:	beq	2cc58 <__assert_fail@plt+0x1b2b8>
   2cb64:	ldr	ip, [r3, #8]
   2cb68:	cmp	ip, #0
   2cb6c:	ble	2cc58 <__assert_fail@plt+0x1b2b8>
   2cb70:	ldr	r2, [r3, #12]
   2cb74:	ldr	r3, [sp, #60]	; 0x3c
   2cb78:	sub	r2, r2, #4
   2cb7c:	ldr	r0, [r3]
   2cb80:	mov	r3, #0
   2cb84:	b	2cb90 <__assert_fail@plt+0x1b1f0>
   2cb88:	cmp	ip, r3
   2cb8c:	beq	2cc58 <__assert_fail@plt+0x1b2b8>
   2cb90:	ldr	r5, [r2, #4]!
   2cb94:	add	r3, r3, #1
   2cb98:	add	r1, r0, r5, lsl #3
   2cb9c:	ldrb	r1, [r1, #4]
   2cba0:	cmp	r1, #9
   2cba4:	bne	2cb88 <__assert_fail@plt+0x1b1e8>
   2cba8:	ldr	r1, [r0, r5, lsl #3]
   2cbac:	cmp	r9, r1
   2cbb0:	bne	2cb88 <__assert_fail@plt+0x1b1e8>
   2cbb4:	cmn	r5, #1
   2cbb8:	beq	2cc58 <__assert_fail@plt+0x1b2b8>
   2cbbc:	ldr	r1, [r4, #8]
   2cbc0:	cmp	r1, #0
   2cbc4:	beq	2cca4 <__assert_fail@plt+0x1b304>
   2cbc8:	mov	r0, #9
   2cbcc:	ldr	r3, [r4]
   2cbd0:	ldr	r2, [r4, #4]
   2cbd4:	str	r0, [sp, #8]
   2cbd8:	stm	sp, {r5, r7}
   2cbdc:	mov	r0, sl
   2cbe0:	bl	2bab4 <__assert_fail@plt+0x1a114>
   2cbe4:	cmp	r0, #1
   2cbe8:	beq	2cc58 <__assert_fail@plt+0x1b2b8>
   2cbec:	cmp	r0, #0
   2cbf0:	bne	2c9d0 <__assert_fail@plt+0x1b030>
   2cbf4:	ldr	r3, [r4, #16]
   2cbf8:	ldr	r2, [r4, #12]
   2cbfc:	cmp	r3, r2
   2cc00:	beq	2cd14 <__assert_fail@plt+0x1b374>
   2cc04:	mov	r1, #20
   2cc08:	mov	r0, #1
   2cc0c:	bl	1ed9c <__assert_fail@plt+0xd3fc>
   2cc10:	cmp	r0, #0
   2cc14:	beq	2cd0c <__assert_fail@plt+0x1b36c>
   2cc18:	ldr	r3, [r4, #16]
   2cc1c:	ldr	r2, [r4, #20]
   2cc20:	add	r1, r3, #1
   2cc24:	str	r0, [r2, r3, lsl #2]
   2cc28:	stm	r0, {r5, r7}
   2cc2c:	mov	r2, r0
   2cc30:	ldr	r0, [sp, #32]
   2cc34:	str	r1, [r4, #16]
   2cc38:	ldr	r3, [sp, #48]	; 0x30
   2cc3c:	str	r0, [sp]
   2cc40:	mov	r1, r4
   2cc44:	mov	r0, sl
   2cc48:	bl	2c370 <__assert_fail@plt+0x1a9d0>
   2cc4c:	ldr	fp, [sl, #4]
   2cc50:	cmp	r0, #1
   2cc54:	bhi	2c9d0 <__assert_fail@plt+0x1b030>
   2cc58:	ldr	r3, [sp, #32]
   2cc5c:	add	r7, r7, #1
   2cc60:	cmp	r3, r7
   2cc64:	add	r6, r6, #4
   2cc68:	bge	2cb1c <__assert_fail@plt+0x1b17c>
   2cc6c:	mov	ip, fp
   2cc70:	ldr	r1, [sl, #124]	; 0x7c
   2cc74:	b	2c8f4 <__assert_fail@plt+0x1af54>
   2cc78:	ldr	r7, [sp, #24]
   2cc7c:	ldr	r2, [r4, #16]
   2cc80:	mov	ip, fp
   2cc84:	cmp	r6, r2
   2cc88:	blt	2cc70 <__assert_fail@plt+0x1b2d0>
   2cc8c:	cmp	r6, #0
   2cc90:	mov	r8, r3
   2cc94:	ldrle	r3, [sp, #32]
   2cc98:	ble	2cb08 <__assert_fail@plt+0x1b168>
   2cc9c:	mov	fp, r7
   2cca0:	b	2cb00 <__assert_fail@plt+0x1b160>
   2cca4:	ldr	r1, [r4]
   2cca8:	mov	r0, #12
   2ccac:	sub	r1, r7, r1
   2ccb0:	add	r1, r1, #1
   2ccb4:	bl	1ed9c <__assert_fail@plt+0xd3fc>
   2ccb8:	cmp	r0, #0
   2ccbc:	str	r0, [r4, #8]
   2ccc0:	beq	2cd0c <__assert_fail@plt+0x1b36c>
   2ccc4:	mov	r1, r0
   2ccc8:	b	2cbc8 <__assert_fail@plt+0x1b228>
   2cccc:	ldr	r3, [sl, #48]	; 0x30
   2ccd0:	cmp	r3, r8
   2ccd4:	ble	2cc6c <__assert_fail@plt+0x1b2cc>
   2ccd8:	add	r5, r8, #1
   2ccdc:	mov	r1, r5
   2cce0:	mov	r0, sl
   2cce4:	bl	24994 <__assert_fail@plt+0x12ff4>
   2cce8:	cmp	r0, #0
   2ccec:	bne	2c9d0 <__assert_fail@plt+0x1b030>
   2ccf0:	ldr	fp, [sl, #4]
   2ccf4:	b	2cb3c <__assert_fail@plt+0x1b19c>
   2ccf8:	ldr	r9, [sp, #32]
   2ccfc:	ldr	fp, [sp, #48]	; 0x30
   2cd00:	ldr	r8, [sp, #68]	; 0x44
   2cd04:	ldr	ip, [sl, #108]	; 0x6c
   2cd08:	b	2c6ec <__assert_fail@plt+0x1ad4c>
   2cd0c:	mov	r0, #12
   2cd10:	b	2c9d0 <__assert_fail@plt+0x1b030>
   2cd14:	lsl	r3, r3, #1
   2cd18:	add	fp, r3, #1
   2cd1c:	ldr	r0, [r4, #20]
   2cd20:	lsl	r1, fp, #2
   2cd24:	bl	1f190 <__assert_fail@plt+0xd7f0>
   2cd28:	cmp	r0, #0
   2cd2c:	beq	2cd0c <__assert_fail@plt+0x1b36c>
   2cd30:	str	r0, [r4, #20]
   2cd34:	str	fp, [r4, #12]
   2cd38:	b	2cc04 <__assert_fail@plt+0x1b264>
   2cd3c:	ldr	r8, [sp, #32]
   2cd40:	mov	r3, r8
   2cd44:	b	2cb08 <__assert_fail@plt+0x1b168>
   2cd48:	ldr	r7, [sp, #24]
   2cd4c:	mov	ip, fp
   2cd50:	b	2cc84 <__assert_fail@plt+0x1b2e4>
   2cd54:	andeq	pc, r3, r0, lsl #30
   2cd58:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2cd5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cd60:	mov	r4, r1
   2cd64:	ldr	r3, [r1, #104]	; 0x68
   2cd68:	ldr	r5, [r1, #40]	; 0x28
   2cd6c:	sub	sp, sp, #20
   2cd70:	cmp	r5, r3
   2cd74:	mov	r8, r0
   2cd78:	ldr	r7, [r1, #84]	; 0x54
   2cd7c:	ldr	r3, [r1, #100]	; 0x64
   2cd80:	ble	2cdac <__assert_fail@plt+0x1b40c>
   2cd84:	mov	r6, r2
   2cd88:	lsl	r9, r5, #2
   2cd8c:	str	r2, [r3, r5, lsl #2]
   2cd90:	str	r5, [r1, #104]	; 0x68
   2cd94:	ldr	r3, [r7, #76]	; 0x4c
   2cd98:	cmp	r3, #0
   2cd9c:	bne	2ce78 <__assert_fail@plt+0x1b4d8>
   2cda0:	mov	r0, r6
   2cda4:	add	sp, sp, #20
   2cda8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cdac:	ldr	r1, [r3, r5, lsl #2]
   2cdb0:	lsl	r9, r5, #2
   2cdb4:	cmp	r1, #0
   2cdb8:	add	sl, r3, r9
   2cdbc:	streq	r2, [r3, r5, lsl #2]
   2cdc0:	moveq	r6, r2
   2cdc4:	beq	2cd94 <__assert_fail@plt+0x1b3f4>
   2cdc8:	cmp	r2, #0
   2cdcc:	ldr	r3, [r1, #40]	; 0x28
   2cdd0:	beq	2ce3c <__assert_fail@plt+0x1b49c>
   2cdd4:	ldr	sl, [r2, #40]	; 0x28
   2cdd8:	add	r0, sp, #4
   2cddc:	mov	r2, r3
   2cde0:	mov	r1, sl
   2cde4:	bl	25600 <__assert_fail@plt+0x13c60>
   2cde8:	cmp	r0, #0
   2cdec:	str	r0, [r8]
   2cdf0:	bne	2ced8 <__assert_fail@plt+0x1b538>
   2cdf4:	ldr	r1, [r4, #40]	; 0x28
   2cdf8:	ldr	r2, [r4, #88]	; 0x58
   2cdfc:	sub	r1, r1, #1
   2ce00:	mov	r0, r4
   2ce04:	bl	20340 <__assert_fail@plt+0xe9a0>
   2ce08:	add	r2, sp, #4
   2ce0c:	mov	r1, r7
   2ce10:	ldr	fp, [r4, #100]	; 0x64
   2ce14:	mov	r3, r0
   2ce18:	mov	r0, r8
   2ce1c:	bl	2918c <__assert_fail@plt+0x177ec>
   2ce20:	cmp	sl, #0
   2ce24:	mov	r6, r0
   2ce28:	str	r0, [fp, r5, lsl #2]
   2ce2c:	beq	2cd94 <__assert_fail@plt+0x1b3f4>
   2ce30:	ldr	r0, [sp, #12]
   2ce34:	bl	1f018 <__assert_fail@plt+0xd678>
   2ce38:	b	2cd94 <__assert_fail@plt+0x1b3f4>
   2ce3c:	ldm	r3, {r0, r1, r2}
   2ce40:	add	r6, sp, #4
   2ce44:	stm	r6, {r0, r1, r2}
   2ce48:	sub	r1, r5, #1
   2ce4c:	ldr	r2, [r4, #88]	; 0x58
   2ce50:	mov	r0, r4
   2ce54:	bl	20340 <__assert_fail@plt+0xe9a0>
   2ce58:	mov	r2, r6
   2ce5c:	mov	r1, r7
   2ce60:	mov	r3, r0
   2ce64:	mov	r0, r8
   2ce68:	bl	2918c <__assert_fail@plt+0x177ec>
   2ce6c:	mov	r6, r0
   2ce70:	str	r0, [sl]
   2ce74:	b	2cd94 <__assert_fail@plt+0x1b3f4>
   2ce78:	cmp	r6, #0
   2ce7c:	beq	2ced8 <__assert_fail@plt+0x1b538>
   2ce80:	add	r7, r6, #8
   2ce84:	add	sl, r6, #12
   2ce88:	mov	r3, r5
   2ce8c:	mov	r1, r7
   2ce90:	mov	r2, sl
   2ce94:	mov	r0, r4
   2ce98:	bl	20fd8 <__assert_fail@plt+0xf638>
   2ce9c:	cmp	r0, #0
   2cea0:	str	r0, [r8]
   2cea4:	bne	2ced8 <__assert_fail@plt+0x1b538>
   2cea8:	ldrb	r3, [r6, #52]	; 0x34
   2ceac:	tst	r3, #64	; 0x40
   2ceb0:	beq	2cda0 <__assert_fail@plt+0x1b400>
   2ceb4:	mov	r2, sl
   2ceb8:	mov	r1, r7
   2cebc:	mov	r0, r4
   2cec0:	bl	2c544 <__assert_fail@plt+0x1aba4>
   2cec4:	cmp	r0, #0
   2cec8:	str	r0, [r8]
   2cecc:	ldreq	r3, [r4, #100]	; 0x64
   2ced0:	ldreq	r6, [r3, r9]
   2ced4:	beq	2cda0 <__assert_fail@plt+0x1b400>
   2ced8:	mov	r6, #0
   2cedc:	b	2cda0 <__assert_fail@plt+0x1b400>
   2cee0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cee4:	mov	r7, r0
   2cee8:	sub	sp, sp, #420	; 0x1a4
   2ceec:	mov	r5, r3
   2cef0:	ldr	r3, [r7]
   2cef4:	str	r0, [sp, #44]	; 0x2c
   2cef8:	str	r1, [sp, #60]	; 0x3c
   2cefc:	str	r2, [sp, #72]	; 0x48
   2cf00:	mov	r1, #0
   2cf04:	add	r0, sp, #140	; 0x8c
   2cf08:	mov	r2, #136	; 0x88
   2cf0c:	mov	r8, r3
   2cf10:	str	r3, [sp, #28]
   2cf14:	ldr	r4, [sp, #456]	; 0x1c8
   2cf18:	ldr	r6, [sp, #464]	; 0x1d0
   2cf1c:	bl	11814 <memset@plt>
   2cf20:	ldr	r1, [r7, #16]
   2cf24:	str	r8, [sp, #224]	; 0xe0
   2cf28:	cmp	r1, #0
   2cf2c:	streq	r1, [sp, #64]	; 0x40
   2cf30:	beq	2cf5c <__assert_fail@plt+0x1b5bc>
   2cf34:	ldrb	r2, [r7, #28]
   2cf38:	subs	r3, r5, r4
   2cf3c:	movne	r3, #1
   2cf40:	ands	r3, r3, r2, lsr #3
   2cf44:	streq	r3, [sp, #64]	; 0x40
   2cf48:	beq	2cf5c <__assert_fail@plt+0x1b5bc>
   2cf4c:	tst	r2, #1
   2cf50:	moveq	r3, r1
   2cf54:	movne	r3, #0
   2cf58:	str	r3, [sp, #64]	; 0x40
   2cf5c:	ldr	r3, [sp, #44]	; 0x2c
   2cf60:	ldr	r3, [r3, #24]
   2cf64:	cmp	r3, r6
   2cf68:	subcc	r2, r6, #1
   2cf6c:	subcc	r3, r2, r3
   2cf70:	ldr	r2, [sp, #44]	; 0x2c
   2cf74:	movcs	r3, #0
   2cf78:	str	r3, [sp, #96]	; 0x60
   2cf7c:	ldr	r2, [r2, #8]
   2cf80:	cmp	r2, #0
   2cf84:	beq	2d674 <__assert_fail@plt+0x1bcd4>
   2cf88:	ldr	r2, [sp, #28]
   2cf8c:	ldr	r2, [r2, #36]	; 0x24
   2cf90:	cmp	r2, #0
   2cf94:	beq	2d674 <__assert_fail@plt+0x1bcd4>
   2cf98:	ldr	r1, [sp, #28]
   2cf9c:	ldr	r1, [r1, #40]	; 0x28
   2cfa0:	cmp	r1, #0
   2cfa4:	beq	2d674 <__assert_fail@plt+0x1bcd4>
   2cfa8:	ldr	r0, [sp, #28]
   2cfac:	ldr	ip, [r0, #44]	; 0x2c
   2cfb0:	cmp	ip, #0
   2cfb4:	beq	2d674 <__assert_fail@plt+0x1bcd4>
   2cfb8:	ldr	r0, [r0, #48]	; 0x30
   2cfbc:	cmp	r0, #0
   2cfc0:	beq	2d674 <__assert_fail@plt+0x1bcd4>
   2cfc4:	ldr	r2, [r2, #8]
   2cfc8:	cmp	r2, #0
   2cfcc:	bne	2d010 <__assert_fail@plt+0x1b670>
   2cfd0:	ldr	r2, [r1, #8]
   2cfd4:	cmp	r2, #0
   2cfd8:	bne	2d010 <__assert_fail@plt+0x1b670>
   2cfdc:	ldr	r2, [ip, #8]
   2cfe0:	cmp	r2, #0
   2cfe4:	beq	2cff8 <__assert_fail@plt+0x1b658>
   2cfe8:	ldr	r2, [sp, #44]	; 0x2c
   2cfec:	ldrsb	r2, [r2, #28]
   2cff0:	cmp	r2, #0
   2cff4:	blt	2d010 <__assert_fail@plt+0x1b670>
   2cff8:	cmp	r5, #0
   2cffc:	cmpne	r4, #0
   2d000:	movne	r4, #1
   2d004:	moveq	r4, #0
   2d008:	bne	2d674 <__assert_fail@plt+0x1bcd4>
   2d00c:	mov	r5, r4
   2d010:	subs	r3, r6, r3
   2d014:	str	r3, [sp, #56]	; 0x38
   2d018:	movne	r3, #1
   2d01c:	strne	r3, [sp, #36]	; 0x24
   2d020:	beq	2d31c <__assert_fail@plt+0x1b97c>
   2d024:	ldr	r2, [sp, #28]
   2d028:	ldr	lr, [sp, #44]	; 0x2c
   2d02c:	ldr	ip, [sp, #72]	; 0x48
   2d030:	ldr	r3, [r2, #8]
   2d034:	ldr	r0, [r2, #92]	; 0x5c
   2d038:	add	r3, r3, #1
   2d03c:	cmp	r3, r0
   2d040:	ldr	r1, [lr, #12]
   2d044:	ldrb	r2, [r2, #88]	; 0x58
   2d048:	movlt	r3, r0
   2d04c:	add	r6, ip, #1
   2d050:	ldr	lr, [lr, #20]
   2d054:	cmp	r3, r6
   2d058:	movlt	r6, r3
   2d05c:	lsr	r1, r1, #22
   2d060:	adds	r8, lr, #0
   2d064:	and	r1, r1, #1
   2d068:	movne	r8, #1
   2d06c:	lsr	r3, r2, #2
   2d070:	ldr	r7, [sp, #60]	; 0x3c
   2d074:	lsr	r2, r2, #3
   2d078:	and	r3, r3, #1
   2d07c:	and	r2, r2, #1
   2d080:	str	ip, [sp, #188]	; 0xbc
   2d084:	str	ip, [sp, #184]	; 0xb8
   2d088:	str	ip, [sp, #196]	; 0xc4
   2d08c:	str	ip, [sp, #192]	; 0xc0
   2d090:	cmp	r0, #1
   2d094:	orr	ip, r1, r8
   2d098:	str	lr, [sp, #80]	; 0x50
   2d09c:	str	r7, [sp, #140]	; 0x8c
   2d0a0:	str	r0, [sp, #220]	; 0xdc
   2d0a4:	str	lr, [sp, #204]	; 0xcc
   2d0a8:	strb	r1, [sp, #212]	; 0xd4
   2d0ac:	strb	ip, [sp, #215]	; 0xd7
   2d0b0:	strb	r3, [sp, #213]	; 0xd5
   2d0b4:	strb	r2, [sp, #214]	; 0xd6
   2d0b8:	ble	2d108 <__assert_fail@plt+0x1b768>
   2d0bc:	cmn	r6, #-1073741823	; 0xc0000001
   2d0c0:	bhi	2e424 <__assert_fail@plt+0x1ca84>
   2d0c4:	lsl	r7, r6, #2
   2d0c8:	mov	r1, r7
   2d0cc:	mov	r0, #0
   2d0d0:	bl	1f190 <__assert_fail@plt+0xd7f0>
   2d0d4:	subs	r3, r0, #0
   2d0d8:	beq	2d6ac <__assert_fail@plt+0x1bd0c>
   2d0dc:	ldr	r0, [sp, #152]	; 0x98
   2d0e0:	str	r3, [sp, #148]	; 0x94
   2d0e4:	cmp	r0, #0
   2d0e8:	ldrbeq	ip, [sp, #215]	; 0xd7
   2d0ec:	beq	2d108 <__assert_fail@plt+0x1b768>
   2d0f0:	mov	r1, r7
   2d0f4:	bl	1f190 <__assert_fail@plt+0xd7f0>
   2d0f8:	cmp	r0, #0
   2d0fc:	beq	2d6ac <__assert_fail@plt+0x1bd0c>
   2d100:	ldrb	ip, [sp, #215]	; 0xd7
   2d104:	str	r0, [sp, #152]	; 0x98
   2d108:	cmp	ip, #0
   2d10c:	bne	2e214 <__assert_fail@plt+0x1c874>
   2d110:	ldr	r2, [sp, #28]
   2d114:	str	r6, [sp, #176]	; 0xb0
   2d118:	add	r2, r2, #96	; 0x60
   2d11c:	ldrb	r3, [r2, #-8]
   2d120:	str	r2, [sp, #208]	; 0xd0
   2d124:	lsr	r3, r3, #4
   2d128:	and	r3, r3, #1
   2d12c:	strb	r3, [sp, #218]	; 0xda
   2d130:	ldr	r3, [sp, #28]
   2d134:	ldr	r2, [sp, #60]	; 0x3c
   2d138:	ldr	r3, [r3, #92]	; 0x5c
   2d13c:	str	r2, [sp, #144]	; 0x90
   2d140:	cmp	r3, #1
   2d144:	ble	2e070 <__assert_fail@plt+0x1c6d0>
   2d148:	mov	r1, #0
   2d14c:	ldr	r3, [sp, #44]	; 0x2c
   2d150:	mvn	r2, #0
   2d154:	str	r1, [sp, #168]	; 0xa8
   2d158:	ldrb	r3, [r3, #28]
   2d15c:	str	r1, [sp, #172]	; 0xac
   2d160:	lsr	r3, r3, #7
   2d164:	strb	r3, [sp, #217]	; 0xd9
   2d168:	ldr	r3, [sp, #28]
   2d16c:	ldr	r7, [r3, #76]	; 0x4c
   2d170:	ldr	r3, [sp, #460]	; 0x1cc
   2d174:	str	r2, [sp, #232]	; 0xe8
   2d178:	str	r3, [sp, #196]	; 0xc4
   2d17c:	str	r3, [sp, #192]	; 0xc0
   2d180:	lsl	r6, r7, #1
   2d184:	ldr	r3, [sp, #472]	; 0x1d8
   2d188:	cmp	r6, #0
   2d18c:	str	r3, [sp, #228]	; 0xe4
   2d190:	ble	2d1cc <__assert_fail@plt+0x1b82c>
   2d194:	ldr	r3, [pc, #4032]	; 2e15c <__assert_fail@plt+0x1c7bc>
   2d198:	cmp	r6, r3
   2d19c:	bgt	2d6ac <__assert_fail@plt+0x1bd0c>
   2d1a0:	add	r0, r6, r7, lsl #2
   2d1a4:	lsl	r0, r0, #3
   2d1a8:	bl	1f110 <__assert_fail@plt+0xd770>
   2d1ac:	str	r0, [sp, #256]	; 0x100
   2d1b0:	lsl	r0, r7, #3
   2d1b4:	bl	1f110 <__assert_fail@plt+0xd770>
   2d1b8:	ldr	r3, [sp, #256]	; 0x100
   2d1bc:	cmp	r0, #0
   2d1c0:	cmpne	r3, #0
   2d1c4:	str	r0, [sp, #272]	; 0x110
   2d1c8:	beq	2d6ac <__assert_fail@plt+0x1bd0c>
   2d1cc:	ldr	r3, [sp, #56]	; 0x38
   2d1d0:	str	r6, [sp, #252]	; 0xfc
   2d1d4:	cmp	r3, #1
   2d1d8:	mov	r3, #1
   2d1dc:	str	r6, [sp, #268]	; 0x10c
   2d1e0:	str	r3, [sp, #260]	; 0x104
   2d1e4:	bls	2e25c <__assert_fail@plt+0x1c8bc>
   2d1e8:	ldr	r3, [sp, #176]	; 0xb0
   2d1ec:	cmn	r3, #-1073741822	; 0xc0000002
   2d1f0:	bhi	2d6ac <__assert_fail@plt+0x1bd0c>
   2d1f4:	add	r3, r3, #1
   2d1f8:	lsl	r0, r3, #2
   2d1fc:	bl	1f110 <__assert_fail@plt+0xd770>
   2d200:	cmp	r0, #0
   2d204:	str	r0, [sp, #240]	; 0xf0
   2d208:	beq	2dc74 <__assert_fail@plt+0x1c2d4>
   2d20c:	ldr	r3, [sp, #472]	; 0x1d8
   2d210:	str	r5, [sp, #112]	; 0x70
   2d214:	tst	r3, #1
   2d218:	moveq	r3, #6
   2d21c:	movne	r3, #4
   2d220:	cmp	r5, r4
   2d224:	movle	r2, #1
   2d228:	mvngt	r2, #0
   2d22c:	str	r2, [sp, #92]	; 0x5c
   2d230:	str	r3, [sp, #200]	; 0xc8
   2d234:	movlt	r2, r5
   2d238:	movge	r2, r4
   2d23c:	ldr	r3, [sp, #28]
   2d240:	str	r2, [sp, #68]	; 0x44
   2d244:	movge	r2, r5
   2d248:	movlt	r2, r4
   2d24c:	str	r2, [sp, #52]	; 0x34
   2d250:	ldr	r2, [sp, #64]	; 0x40
   2d254:	ldr	r3, [r3, #92]	; 0x5c
   2d258:	cmp	r2, #0
   2d25c:	str	r3, [sp, #84]	; 0x54
   2d260:	beq	2e3a4 <__assert_fail@plt+0x1ca04>
   2d264:	cmp	r3, #1
   2d268:	moveq	r3, #4
   2d26c:	beq	2d294 <__assert_fail@plt+0x1b8f4>
   2d270:	ldr	r3, [sp, #44]	; 0x2c
   2d274:	ldr	r2, [sp, #80]	; 0x50
   2d278:	ldr	r3, [r3, #12]
   2d27c:	lsr	r3, r3, #22
   2d280:	eor	r3, r3, #1
   2d284:	cmp	r2, #0
   2d288:	movne	r3, #0
   2d28c:	andeq	r3, r3, #1
   2d290:	lsl	r3, r3, #2
   2d294:	cmp	r5, r4
   2d298:	orr	r3, r8, r3
   2d29c:	movle	r2, #2
   2d2a0:	movgt	r2, #0
   2d2a4:	orr	r3, r3, r2
   2d2a8:	ldr	r2, [sp, #68]	; 0x44
   2d2ac:	ldr	r1, [sp, #52]	; 0x34
   2d2b0:	cmp	r5, r2
   2d2b4:	movge	r2, #0
   2d2b8:	movlt	r2, #1
   2d2bc:	cmp	r5, r1
   2d2c0:	orrgt	r2, r2, #1
   2d2c4:	cmp	r2, #0
   2d2c8:	str	r2, [sp, #108]	; 0x6c
   2d2cc:	bne	2d664 <__assert_fail@plt+0x1bcc4>
   2d2d0:	sub	r3, r3, #4
   2d2d4:	cmp	r5, r4
   2d2d8:	str	r3, [sp, #88]	; 0x58
   2d2dc:	add	r3, sp, #416	; 0x1a0
   2d2e0:	suble	r3, r3, #304	; 0x130
   2d2e4:	movgt	r3, #0
   2d2e8:	str	r3, [sp, #100]	; 0x64
   2d2ec:	movle	r3, #1
   2d2f0:	movgt	r3, #0
   2d2f4:	str	r3, [sp, #104]	; 0x68
   2d2f8:	ldr	r3, [sp, #88]	; 0x58
   2d2fc:	cmp	r3, #4
   2d300:	ldrls	pc, [pc, r3, lsl #2]
   2d304:	b	2e0a0 <__assert_fail@plt+0x1c700>
   2d308:	andeq	sp, r2, r8, ror #31
   2d30c:	andeq	sp, r2, r8, ror #31
   2d310:	andeq	sp, r2, r4, lsr r3
   2d314:	andeq	sp, r2, ip, ror pc
   2d318:	ldrdeq	sp, [r2], -r8
   2d31c:	ldr	r3, [sp, #28]
   2d320:	ldr	r3, [r3, #76]	; 0x4c
   2d324:	adds	r3, r3, #0
   2d328:	movne	r3, #1
   2d32c:	str	r3, [sp, #36]	; 0x24
   2d330:	b	2d024 <__assert_fail@plt+0x1b684>
   2d334:	ldr	r3, [sp, #52]	; 0x34
   2d338:	cmp	r3, r5
   2d33c:	ble	2d394 <__assert_fail@plt+0x1b9f4>
   2d340:	ldr	r3, [sp, #60]	; 0x3c
   2d344:	ldr	r1, [sp, #64]	; 0x40
   2d348:	ldrb	r2, [r3, r5]
   2d34c:	add	r3, r3, r5
   2d350:	ldrb	r2, [r1, r2]
   2d354:	cmp	r2, #0
   2d358:	bne	2d3d8 <__assert_fail@plt+0x1ba38>
   2d35c:	mov	ip, r1
   2d360:	add	r2, r5, #1
   2d364:	ldr	r0, [sp, #52]	; 0x34
   2d368:	b	2d380 <__assert_fail@plt+0x1b9e0>
   2d36c:	ldrb	r1, [r3, #1]!
   2d370:	add	r2, r2, #1
   2d374:	ldrb	r1, [ip, r1]
   2d378:	cmp	r1, #0
   2d37c:	bne	2e270 <__assert_fail@plt+0x1c8d0>
   2d380:	cmp	r0, r2
   2d384:	mov	r5, r2
   2d388:	bne	2d36c <__assert_fail@plt+0x1b9cc>
   2d38c:	ldr	r3, [sp, #52]	; 0x34
   2d390:	str	r3, [sp, #112]	; 0x70
   2d394:	cmp	r3, r5
   2d398:	bne	2d3d8 <__assert_fail@plt+0x1ba38>
   2d39c:	ldr	r2, [sp, #72]	; 0x48
   2d3a0:	ldr	r1, [sp, #80]	; 0x50
   2d3a4:	cmp	r2, r3
   2d3a8:	movle	r3, #0
   2d3ac:	ldrgt	r2, [sp, #60]	; 0x3c
   2d3b0:	ldrbgt	r3, [r2, r3]
   2d3b4:	cmp	r1, #0
   2d3b8:	mov	r2, r3
   2d3bc:	movne	r2, r1
   2d3c0:	ldrbne	r2, [r2, r3]
   2d3c4:	ldr	r3, [sp, #64]	; 0x40
   2d3c8:	ldrb	r3, [r3, r2]
   2d3cc:	cmp	r3, #0
   2d3d0:	beq	2d664 <__assert_fail@plt+0x1bcc4>
   2d3d4:	ldr	r5, [sp, #52]	; 0x34
   2d3d8:	ldr	r2, [sp, #472]	; 0x1d8
   2d3dc:	mov	r1, r5
   2d3e0:	add	r0, sp, #140	; 0x8c
   2d3e4:	bl	20738 <__assert_fail@plt+0xed98>
   2d3e8:	subs	r3, r0, #0
   2d3ec:	str	r3, [sp, #48]	; 0x30
   2d3f0:	bne	2e300 <__assert_fail@plt+0x1c960>
   2d3f4:	ldr	r3, [sp, #84]	; 0x54
   2d3f8:	cmp	r3, #1
   2d3fc:	beq	2d41c <__assert_fail@plt+0x1ba7c>
   2d400:	ldr	r3, [sp, #168]	; 0xa8
   2d404:	cmp	r3, #0
   2d408:	beq	2d41c <__assert_fail@plt+0x1ba7c>
   2d40c:	ldr	r3, [sp, #148]	; 0x94
   2d410:	ldr	r3, [r3]
   2d414:	cmn	r3, #1
   2d418:	beq	2d634 <__assert_fail@plt+0x1bc94>
   2d41c:	ldr	r4, [sp, #224]	; 0xe0
   2d420:	mov	r3, #0
   2d424:	str	r3, [sp, #260]	; 0x104
   2d428:	ldr	fp, [r4, #36]	; 0x24
   2d42c:	str	r3, [sp, #248]	; 0xf8
   2d430:	str	r3, [sp, #244]	; 0xf4
   2d434:	str	r3, [sp, #116]	; 0x74
   2d438:	ldrsb	r3, [fp, #52]	; 0x34
   2d43c:	ldr	r2, [sp, #180]	; 0xb4
   2d440:	cmp	r3, #0
   2d444:	str	r2, [sp, #12]
   2d448:	blt	2e130 <__assert_fail@plt+0x1c790>
   2d44c:	ldr	r3, [sp, #240]	; 0xf0
   2d450:	cmp	r3, #0
   2d454:	beq	2e2a4 <__assert_fail@plt+0x1c904>
   2d458:	ldr	r2, [r4, #76]	; 0x4c
   2d45c:	ldr	r1, [sp, #12]
   2d460:	cmp	r2, #0
   2d464:	str	fp, [r3, r1, lsl #2]
   2d468:	bne	2e344 <__assert_fail@plt+0x1c9a4>
   2d46c:	ldrb	r3, [fp, #52]	; 0x34
   2d470:	ldr	r2, [sp, #104]	; 0x68
   2d474:	str	r2, [sp, #16]
   2d478:	tst	r3, #16
   2d47c:	bne	2e310 <__assert_fail@plt+0x1c970>
   2d480:	mvn	r3, #0
   2d484:	str	r3, [sp, #20]
   2d488:	mov	r3, #0
   2d48c:	str	r3, [sp, #40]	; 0x28
   2d490:	ldr	r3, [sp, #100]	; 0x64
   2d494:	ldr	r5, [sp, #180]	; 0xb4
   2d498:	str	r3, [sp, #32]
   2d49c:	b	2d4a8 <__assert_fail@plt+0x1bb08>
   2d4a0:	ldr	r5, [sp, #180]	; 0xb4
   2d4a4:	mov	fp, r4
   2d4a8:	ldr	r3, [sp, #196]	; 0xc4
   2d4ac:	cmp	r3, r5
   2d4b0:	ble	2d76c <__assert_fail@plt+0x1bdcc>
   2d4b4:	ldr	r3, [sp, #176]	; 0xb0
   2d4b8:	add	r9, r5, #1
   2d4bc:	cmp	r9, r3
   2d4c0:	bge	2db84 <__assert_fail@plt+0x1c1e4>
   2d4c4:	ldr	r3, [sp, #168]	; 0xa8
   2d4c8:	cmp	r9, r3
   2d4cc:	bge	2dbe0 <__assert_fail@plt+0x1c240>
   2d4d0:	ldrb	r3, [fp, #52]	; 0x34
   2d4d4:	tst	r3, #32
   2d4d8:	bne	2d958 <__assert_fail@plt+0x1bfb8>
   2d4dc:	ldr	r3, [sp, #144]	; 0x90
   2d4e0:	add	r2, r5, #1
   2d4e4:	str	r2, [sp, #180]	; 0xb4
   2d4e8:	ldrb	r4, [r3, r5]
   2d4ec:	ldr	r3, [fp, #44]	; 0x2c
   2d4f0:	cmp	r3, #0
   2d4f4:	beq	2dbb0 <__assert_fail@plt+0x1c210>
   2d4f8:	ldr	r4, [r3, r4, lsl #2]
   2d4fc:	ldr	r3, [sp, #240]	; 0xf0
   2d500:	cmp	r3, #0
   2d504:	beq	2d51c <__assert_fail@plt+0x1bb7c>
   2d508:	mov	r2, r4
   2d50c:	add	r1, sp, #140	; 0x8c
   2d510:	add	r0, sp, #116	; 0x74
   2d514:	bl	2cd5c <__assert_fail@plt+0x1b3bc>
   2d518:	mov	r4, r0
   2d51c:	cmp	r4, #0
   2d520:	beq	2d700 <__assert_fail@plt+0x1bd60>
   2d524:	ldr	r2, [sp, #16]
   2d528:	ldrb	r3, [r4, #52]	; 0x34
   2d52c:	cmp	fp, r4
   2d530:	movne	r2, #0
   2d534:	andeq	r2, r2, #1
   2d538:	ldr	r1, [sp, #12]
   2d53c:	cmp	r2, #0
   2d540:	movne	r1, r9
   2d544:	tst	r3, #16
   2d548:	str	r2, [sp, #16]
   2d54c:	str	r1, [sp, #12]
   2d550:	beq	2d4a0 <__assert_fail@plt+0x1bb00>
   2d554:	tst	r3, #128	; 0x80
   2d558:	bne	2d904 <__assert_fail@plt+0x1bf64>
   2d55c:	ldr	r3, [sp, #180]	; 0xb4
   2d560:	str	r3, [sp, #20]
   2d564:	ldr	r3, [sp, #36]	; 0x24
   2d568:	cmp	r3, #0
   2d56c:	beq	2d78c <__assert_fail@plt+0x1bdec>
   2d570:	mov	r3, #1
   2d574:	str	r3, [sp, #40]	; 0x28
   2d578:	mov	r3, #0
   2d57c:	ldr	r5, [sp, #20]
   2d580:	str	r3, [sp, #32]
   2d584:	b	2d4a4 <__assert_fail@plt+0x1bb04>
   2d588:	ldr	r0, [sp, #12]
   2d58c:	bl	1f018 <__assert_fail@plt+0xd678>
   2d590:	mov	r0, #0
   2d594:	bl	1f018 <__assert_fail@plt+0xd678>
   2d598:	ldr	r3, [sp, #264]	; 0x108
   2d59c:	cmp	r3, #0
   2d5a0:	movgt	r4, #0
   2d5a4:	ble	2d624 <__assert_fail@plt+0x1bc84>
   2d5a8:	ldr	r3, [sp, #272]	; 0x110
   2d5ac:	ldr	r7, [r3, r4, lsl #2]
   2d5b0:	ldr	r3, [r7, #16]
   2d5b4:	cmp	r3, #0
   2d5b8:	movgt	r5, #0
   2d5bc:	ble	2d5e8 <__assert_fail@plt+0x1bc48>
   2d5c0:	ldr	r3, [r7, #20]
   2d5c4:	ldr	r6, [r3, r5, lsl #2]
   2d5c8:	add	r5, r5, #1
   2d5cc:	ldr	r0, [r6, #16]
   2d5d0:	bl	1f018 <__assert_fail@plt+0xd678>
   2d5d4:	mov	r0, r6
   2d5d8:	bl	1f018 <__assert_fail@plt+0xd678>
   2d5dc:	ldr	r3, [r7, #16]
   2d5e0:	cmp	r5, r3
   2d5e4:	blt	2d5c0 <__assert_fail@plt+0x1bc20>
   2d5e8:	ldr	r0, [r7, #20]
   2d5ec:	bl	1f018 <__assert_fail@plt+0xd678>
   2d5f0:	ldr	r3, [r7, #8]
   2d5f4:	cmp	r3, #0
   2d5f8:	beq	2d60c <__assert_fail@plt+0x1bc6c>
   2d5fc:	ldr	r0, [r3, #8]
   2d600:	bl	1f018 <__assert_fail@plt+0xd678>
   2d604:	ldr	r0, [r7, #8]
   2d608:	bl	1f018 <__assert_fail@plt+0xd678>
   2d60c:	mov	r0, r7
   2d610:	bl	1f018 <__assert_fail@plt+0xd678>
   2d614:	ldr	r3, [sp, #264]	; 0x108
   2d618:	add	r4, r4, #1
   2d61c:	cmp	r4, r3
   2d620:	blt	2d5a8 <__assert_fail@plt+0x1bc08>
   2d624:	ldr	r5, [sp, #112]	; 0x70
   2d628:	mov	r3, #0
   2d62c:	str	r3, [sp, #264]	; 0x108
   2d630:	str	r3, [sp, #248]	; 0xf8
   2d634:	ldr	r3, [sp, #92]	; 0x5c
   2d638:	ldr	r2, [sp, #68]	; 0x44
   2d63c:	add	r5, r5, r3
   2d640:	ldr	r3, [sp, #52]	; 0x34
   2d644:	str	r5, [sp, #112]	; 0x70
   2d648:	cmp	r3, r5
   2d64c:	movge	r3, #0
   2d650:	movlt	r3, #1
   2d654:	cmp	r2, r5
   2d658:	orrgt	r3, r3, #1
   2d65c:	cmp	r3, #0
   2d660:	beq	2d2f8 <__assert_fail@plt+0x1b958>
   2d664:	mov	r3, #1
   2d668:	ldr	r7, [sp, #240]	; 0xf0
   2d66c:	str	r3, [sp, #48]	; 0x30
   2d670:	b	2d6b8 <__assert_fail@plt+0x1bd18>
   2d674:	mov	r3, #1
   2d678:	str	r3, [sp, #48]	; 0x30
   2d67c:	ldr	r0, [sp, #48]	; 0x30
   2d680:	add	sp, sp, #420	; 0x1a4
   2d684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d688:	tst	r0, #4
   2d68c:	beq	2d44c <__assert_fail@plt+0x1baac>
   2d690:	mov	r3, r0
   2d694:	ldr	r2, [fp, #40]	; 0x28
   2d698:	mov	r1, r4
   2d69c:	add	r0, sp, #116	; 0x74
   2d6a0:	bl	2918c <__assert_fail@plt+0x177ec>
   2d6a4:	subs	fp, r0, #0
   2d6a8:	bne	2d44c <__assert_fail@plt+0x1baac>
   2d6ac:	ldr	r7, [sp, #240]	; 0xf0
   2d6b0:	mov	r3, #12
   2d6b4:	str	r3, [sp, #48]	; 0x30
   2d6b8:	mov	r0, r7
   2d6bc:	bl	1f018 <__assert_fail@plt+0xd678>
   2d6c0:	ldr	r3, [sp, #28]
   2d6c4:	ldr	r3, [r3, #76]	; 0x4c
   2d6c8:	cmp	r3, #0
   2d6cc:	bne	2e168 <__assert_fail@plt+0x1c7c8>
   2d6d0:	ldr	r0, [sp, #148]	; 0x94
   2d6d4:	bl	1f018 <__assert_fail@plt+0xd678>
   2d6d8:	ldr	r0, [sp, #152]	; 0x98
   2d6dc:	bl	1f018 <__assert_fail@plt+0xd678>
   2d6e0:	ldrb	r3, [sp, #215]	; 0xd7
   2d6e4:	cmp	r3, #0
   2d6e8:	beq	2d67c <__assert_fail@plt+0x1bcdc>
   2d6ec:	ldr	r0, [sp, #144]	; 0x90
   2d6f0:	bl	1f018 <__assert_fail@plt+0xd678>
   2d6f4:	ldr	r0, [sp, #48]	; 0x30
   2d6f8:	add	sp, sp, #420	; 0x1a4
   2d6fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d700:	ldr	r3, [sp, #116]	; 0x74
   2d704:	cmp	r3, #0
   2d708:	bne	2e33c <__assert_fail@plt+0x1c99c>
   2d70c:	ldr	r2, [sp, #240]	; 0xf0
   2d710:	cmp	r2, #0
   2d714:	beq	2d76c <__assert_fail@plt+0x1bdcc>
   2d718:	ldr	r3, [sp, #36]	; 0x24
   2d71c:	eor	r5, r3, #1
   2d720:	ldr	r3, [sp, #40]	; 0x28
   2d724:	ands	r5, r5, r3
   2d728:	bne	2d76c <__assert_fail@plt+0x1bdcc>
   2d72c:	ldr	r3, [sp, #180]	; 0xb4
   2d730:	ldr	lr, [sp, #244]	; 0xf4
   2d734:	mov	r0, r3
   2d738:	add	r2, r2, r3, lsl #2
   2d73c:	mov	ip, r5
   2d740:	b	2d758 <__assert_fail@plt+0x1bdb8>
   2d744:	ldr	r1, [r2, #4]!
   2d748:	mov	r0, r3
   2d74c:	cmp	r1, #0
   2d750:	mov	ip, #1
   2d754:	bne	2d928 <__assert_fail@plt+0x1bf88>
   2d758:	add	r3, r3, #1
   2d75c:	cmp	lr, r3
   2d760:	bge	2d744 <__assert_fail@plt+0x1bda4>
   2d764:	cmp	ip, #0
   2d768:	strne	r0, [sp, #180]	; 0xb4
   2d76c:	ldr	r3, [sp, #32]
   2d770:	cmp	r3, #0
   2d774:	beq	2d78c <__assert_fail@plt+0x1bdec>
   2d778:	mov	r2, r3
   2d77c:	ldr	r1, [sp, #12]
   2d780:	ldr	r3, [r3]
   2d784:	add	r3, r3, r1
   2d788:	str	r3, [r2]
   2d78c:	ldr	r3, [sp, #20]
   2d790:	cmn	r3, #1
   2d794:	beq	2d598 <__assert_fail@plt+0x1bbf8>
   2d798:	cmn	r3, #2
   2d79c:	beq	2d6ac <__assert_fail@plt+0x1bd0c>
   2d7a0:	mov	r2, r3
   2d7a4:	ldr	r3, [sp, #44]	; 0x2c
   2d7a8:	str	r2, [sp, #232]	; 0xe8
   2d7ac:	ldr	r2, [sp, #56]	; 0x38
   2d7b0:	ldrb	r3, [r3, #28]
   2d7b4:	lsr	r3, r3, #4
   2d7b8:	eor	r3, r3, #1
   2d7bc:	cmp	r2, #1
   2d7c0:	movls	r3, #0
   2d7c4:	andhi	r3, r3, #1
   2d7c8:	cmp	r3, #0
   2d7cc:	beq	2dc28 <__assert_fail@plt+0x1c288>
   2d7d0:	ldr	r3, [sp, #20]
   2d7d4:	ldr	r7, [sp, #240]	; 0xf0
   2d7d8:	mov	r2, r3
   2d7dc:	add	r0, sp, #140	; 0x8c
   2d7e0:	ldr	r1, [r7, r3, lsl #2]
   2d7e4:	bl	2042c <__assert_fail@plt+0xea8c>
   2d7e8:	ldr	r3, [sp, #28]
   2d7ec:	ldrb	r3, [r3, #88]	; 0x58
   2d7f0:	tst	r3, #1
   2d7f4:	str	r0, [sp, #236]	; 0xec
   2d7f8:	beq	2e05c <__assert_fail@plt+0x1c6bc>
   2d7fc:	ldr	r3, [sp, #20]
   2d800:	ldr	r8, [sp, #224]	; 0xe0
   2d804:	cmn	r3, #-1073741822	; 0xc0000002
   2d808:	ldr	r9, [sp, #236]	; 0xec
   2d80c:	bhi	2dc78 <__assert_fail@plt+0x1c2d8>
   2d810:	add	r4, r3, #1
   2d814:	lsl	r5, r4, #2
   2d818:	mov	r0, r5
   2d81c:	bl	1f110 <__assert_fail@plt+0xd770>
   2d820:	subs	r3, r0, #0
   2d824:	str	r3, [sp, #12]
   2d828:	beq	2e384 <__assert_fail@plt+0x1c9e4>
   2d82c:	ldr	r3, [r8, #76]	; 0x4c
   2d830:	cmp	r3, #0
   2d834:	beq	2dc84 <__assert_fail@plt+0x1c2e4>
   2d838:	mov	r0, r5
   2d83c:	bl	1f110 <__assert_fail@plt+0xd770>
   2d840:	subs	sl, r0, #0
   2d844:	beq	2e3ac <__assert_fail@plt+0x1ca0c>
   2d848:	ldr	r6, [sp, #20]
   2d84c:	ldr	fp, [sp, #12]
   2d850:	add	r5, sp, #292	; 0x124
   2d854:	lsl	r4, r4, #2
   2d858:	mov	r2, r4
   2d85c:	mov	r1, #0
   2d860:	mov	r0, sl
   2d864:	bl	11814 <memset@plt>
   2d868:	mov	r3, #0
   2d86c:	str	fp, [sp, #276]	; 0x114
   2d870:	str	sl, [sp, #280]	; 0x118
   2d874:	str	r9, [sp, #284]	; 0x11c
   2d878:	str	r6, [sp, #288]	; 0x120
   2d87c:	add	r1, sp, #276	; 0x114
   2d880:	str	r3, [r5]
   2d884:	str	r3, [r5, #4]
   2d888:	str	r3, [r5, #8]
   2d88c:	add	r0, sp, #140	; 0x8c
   2d890:	bl	26270 <__assert_fail@plt+0x148d0>
   2d894:	mov	r7, r0
   2d898:	ldr	r0, [sp, #300]	; 0x12c
   2d89c:	bl	1f018 <__assert_fail@plt+0xd678>
   2d8a0:	cmp	r7, #0
   2d8a4:	bne	2e07c <__assert_fail@plt+0x1c6dc>
   2d8a8:	ldr	r3, [fp]
   2d8ac:	cmp	r3, #0
   2d8b0:	bne	2e490 <__assert_fail@plt+0x1caf0>
   2d8b4:	ldr	r3, [sl]
   2d8b8:	cmp	r3, #0
   2d8bc:	bne	2e490 <__assert_fail@plt+0x1caf0>
   2d8c0:	ldr	r3, [sp, #240]	; 0xf0
   2d8c4:	sub	r4, r4, #4
   2d8c8:	add	r3, r3, r4
   2d8cc:	subs	r6, r6, #1
   2d8d0:	bcc	2e154 <__assert_fail@plt+0x1c7b4>
   2d8d4:	ldr	r1, [r3, #-4]!
   2d8d8:	cmp	r1, #0
   2d8dc:	beq	2d8cc <__assert_fail@plt+0x1bf2c>
   2d8e0:	ldrb	r2, [r1, #52]	; 0x34
   2d8e4:	tst	r2, #16
   2d8e8:	beq	2d8cc <__assert_fail@plt+0x1bf2c>
   2d8ec:	mov	r2, r6
   2d8f0:	add	r0, sp, #140	; 0x8c
   2d8f4:	bl	2042c <__assert_fail@plt+0xea8c>
   2d8f8:	add	r4, r6, #1
   2d8fc:	mov	r9, r0
   2d900:	b	2d854 <__assert_fail@plt+0x1beb4>
   2d904:	ldr	r5, [sp, #180]	; 0xb4
   2d908:	mov	r1, r4
   2d90c:	mov	r2, r5
   2d910:	add	r0, sp, #140	; 0x8c
   2d914:	bl	2042c <__assert_fail@plt+0xea8c>
   2d918:	cmp	r0, #0
   2d91c:	beq	2d4a4 <__assert_fail@plt+0x1bb04>
   2d920:	str	r5, [sp, #20]
   2d924:	b	2d564 <__assert_fail@plt+0x1bbc4>
   2d928:	mov	r2, #0
   2d92c:	add	r1, sp, #140	; 0x8c
   2d930:	add	r0, sp, #116	; 0x74
   2d934:	str	r3, [sp, #180]	; 0xb4
   2d938:	bl	2cd5c <__assert_fail@plt+0x1b3bc>
   2d93c:	ldr	r3, [sp, #116]	; 0x74
   2d940:	cmp	r3, #0
   2d944:	bne	2e414 <__assert_fail@plt+0x1ca74>
   2d948:	cmp	r0, #0
   2d94c:	bne	2e47c <__assert_fail@plt+0x1cadc>
   2d950:	ldr	r2, [sp, #240]	; 0xf0
   2d954:	b	2d72c <__assert_fail@plt+0x1bd8c>
   2d958:	ldr	r3, [fp, #8]
   2d95c:	ldr	sl, [sp, #224]	; 0xe0
   2d960:	cmp	r3, #0
   2d964:	ble	2da50 <__assert_fail@plt+0x1c0b0>
   2d968:	add	r2, sl, #128	; 0x80
   2d96c:	str	r9, [sp, #76]	; 0x4c
   2d970:	mov	r4, #0
   2d974:	str	r2, [sp, #24]
   2d978:	mov	r9, r3
   2d97c:	b	2d9e4 <__assert_fail@plt+0x1c044>
   2d980:	tst	r0, #1
   2d984:	beq	2d9d8 <__assert_fail@plt+0x1c038>
   2d988:	tst	r6, #8
   2d98c:	bne	2d9d8 <__assert_fail@plt+0x1c038>
   2d990:	tst	r6, #32
   2d994:	beq	2d9a0 <__assert_fail@plt+0x1c000>
   2d998:	tst	r0, #2
   2d99c:	beq	2d9d8 <__assert_fail@plt+0x1c038>
   2d9a0:	tst	r6, #128	; 0x80
   2d9a4:	beq	2d9b0 <__assert_fail@plt+0x1c010>
   2d9a8:	tst	r0, #8
   2d9ac:	beq	2d9d8 <__assert_fail@plt+0x1c038>
   2d9b0:	str	r5, [sp]
   2d9b4:	mov	r0, r8
   2d9b8:	add	r3, sp, #140	; 0x8c
   2d9bc:	mov	r2, r7
   2d9c0:	ldr	r1, [sp, #24]
   2d9c4:	bl	21e1c <__assert_fail@plt+0x1047c>
   2d9c8:	cmp	r0, #0
   2d9cc:	bne	2da5c <__assert_fail@plt+0x1c0bc>
   2d9d0:	ldr	r5, [sp, #180]	; 0xb4
   2d9d4:	ldr	r9, [fp, #8]
   2d9d8:	add	r4, r4, #1
   2d9dc:	cmp	r4, r9
   2d9e0:	bge	2da4c <__assert_fail@plt+0x1c0ac>
   2d9e4:	ldr	r2, [fp, #12]
   2d9e8:	ldr	r8, [sl]
   2d9ec:	ldr	r7, [r2, r4, lsl #2]
   2d9f0:	add	r2, r8, r7, lsl #3
   2d9f4:	ldrb	r1, [r2, #6]
   2d9f8:	tst	r1, #16
   2d9fc:	beq	2d9d8 <__assert_fail@plt+0x1c038>
   2da00:	ldr	r6, [r2, #4]
   2da04:	ldr	r3, [pc, #1876]	; 2e160 <__assert_fail@plt+0x1c7c0>
   2da08:	tst	r6, r3
   2da0c:	beq	2d9b0 <__assert_fail@plt+0x1c010>
   2da10:	ldr	r2, [sp, #228]	; 0xe4
   2da14:	mov	r1, r5
   2da18:	add	r0, sp, #140	; 0x8c
   2da1c:	bl	20340 <__assert_fail@plt+0xe9a0>
   2da20:	ldr	r3, [pc, #1852]	; 2e164 <__assert_fail@plt+0x1c7c4>
   2da24:	and	r6, r3, r6, lsr #8
   2da28:	tst	r6, #4
   2da2c:	bne	2d980 <__assert_fail@plt+0x1bfe0>
   2da30:	tst	r6, #8
   2da34:	beq	2d990 <__assert_fail@plt+0x1bff0>
   2da38:	tst	r0, #1
   2da3c:	beq	2d990 <__assert_fail@plt+0x1bff0>
   2da40:	add	r4, r4, #1
   2da44:	cmp	r4, r9
   2da48:	blt	2d9e4 <__assert_fail@plt+0x1c044>
   2da4c:	ldr	r9, [sp, #76]	; 0x4c
   2da50:	mov	r3, #0
   2da54:	str	r3, [sp, #116]	; 0x74
   2da58:	b	2d4dc <__assert_fail@plt+0x1bb3c>
   2da5c:	ldr	r3, [sp, #260]	; 0x104
   2da60:	ldr	r6, [sp, #180]	; 0xb4
   2da64:	ldr	r2, [sp, #176]	; 0xb0
   2da68:	cmp	r3, r0
   2da6c:	add	r6, r0, r6
   2da70:	movge	r0, r3
   2da74:	cmp	r6, r2
   2da78:	str	r0, [sp, #260]	; 0x104
   2da7c:	ldr	r8, [sp, #244]	; 0xf4
   2da80:	blt	2db68 <__assert_fail@plt+0x1c1c8>
   2da84:	ldr	r3, [sp, #188]	; 0xbc
   2da88:	cmp	r2, r3
   2da8c:	bge	2db68 <__assert_fail@plt+0x1c1c8>
   2da90:	add	r1, r6, #1
   2da94:	add	r0, sp, #140	; 0x8c
   2da98:	bl	24994 <__assert_fail@plt+0x12ff4>
   2da9c:	cmp	r0, #0
   2daa0:	bne	2dc58 <__assert_fail@plt+0x1c2b8>
   2daa4:	cmp	r6, r8
   2daa8:	ble	2dacc <__assert_fail@plt+0x1c12c>
   2daac:	sub	r2, r6, r8
   2dab0:	ldr	r0, [sp, #240]	; 0xf0
   2dab4:	add	r8, r8, #1
   2dab8:	lsl	r2, r2, #2
   2dabc:	add	r0, r0, r8, lsl #2
   2dac0:	mov	r1, #0
   2dac4:	bl	11814 <memset@plt>
   2dac8:	str	r6, [sp, #244]	; 0xf4
   2dacc:	ldr	r3, [sl, #12]
   2dad0:	ldr	r8, [sp, #240]	; 0xf0
   2dad4:	mov	r2, #0
   2dad8:	ldr	r3, [r3, r7, lsl #2]
   2dadc:	ldr	r1, [r8, r6, lsl #2]
   2dae0:	str	r2, [sp, #128]	; 0x80
   2dae4:	add	r3, r3, r3, lsl #1
   2dae8:	ldr	r2, [sl, #24]
   2daec:	cmp	r1, #0
   2daf0:	add	r2, r2, r3, lsl #2
   2daf4:	beq	2dbf0 <__assert_fail@plt+0x1c250>
   2daf8:	ldr	r1, [r1, #40]	; 0x28
   2dafc:	add	r0, sp, #276	; 0x114
   2db00:	bl	25600 <__assert_fail@plt+0x13c60>
   2db04:	cmp	r0, #0
   2db08:	str	r0, [sp, #128]	; 0x80
   2db0c:	bne	2dc58 <__assert_fail@plt+0x1c2b8>
   2db10:	ldr	r2, [sp, #228]	; 0xe4
   2db14:	sub	r1, r6, #1
   2db18:	add	r0, sp, #140	; 0x8c
   2db1c:	bl	20340 <__assert_fail@plt+0xe9a0>
   2db20:	add	r2, sp, #276	; 0x114
   2db24:	mov	r1, sl
   2db28:	ldr	r7, [sp, #240]	; 0xf0
   2db2c:	mov	r3, r0
   2db30:	add	r0, sp, #128	; 0x80
   2db34:	bl	2918c <__assert_fail@plt+0x177ec>
   2db38:	str	r0, [r7, r6, lsl #2]
   2db3c:	ldr	r0, [sp, #284]	; 0x11c
   2db40:	bl	1f018 <__assert_fail@plt+0xd678>
   2db44:	ldr	r7, [sp, #240]	; 0xf0
   2db48:	ldr	r3, [r7, r6, lsl #2]
   2db4c:	cmp	r3, #0
   2db50:	bne	2d9d0 <__assert_fail@plt+0x1c030>
   2db54:	ldr	r0, [sp, #128]	; 0x80
   2db58:	cmp	r0, #0
   2db5c:	beq	2d9d0 <__assert_fail@plt+0x1c030>
   2db60:	ldr	r9, [sp, #76]	; 0x4c
   2db64:	b	2dc60 <__assert_fail@plt+0x1c2c0>
   2db68:	ldr	r3, [sp, #168]	; 0xa8
   2db6c:	cmp	r6, r3
   2db70:	blt	2daa4 <__assert_fail@plt+0x1c104>
   2db74:	ldr	r2, [sp, #188]	; 0xbc
   2db78:	cmp	r3, r2
   2db7c:	bge	2daa4 <__assert_fail@plt+0x1c104>
   2db80:	b	2da90 <__assert_fail@plt+0x1c0f0>
   2db84:	ldr	r2, [sp, #188]	; 0xbc
   2db88:	cmp	r3, r2
   2db8c:	bge	2d4c4 <__assert_fail@plt+0x1bb24>
   2db90:	add	r1, r5, #2
   2db94:	add	r0, sp, #140	; 0x8c
   2db98:	bl	24994 <__assert_fail@plt+0x12ff4>
   2db9c:	cmp	r0, #0
   2dba0:	str	r0, [sp, #116]	; 0x74
   2dba4:	bne	2d6ac <__assert_fail@plt+0x1bd0c>
   2dba8:	ldr	r5, [sp, #180]	; 0xb4
   2dbac:	b	2d4d0 <__assert_fail@plt+0x1bb30>
   2dbb0:	ldr	r5, [fp, #48]	; 0x30
   2dbb4:	cmp	r5, #0
   2dbb8:	beq	2e278 <__assert_fail@plt+0x1c8d8>
   2dbbc:	ldr	r1, [sp, #180]	; 0xb4
   2dbc0:	ldr	r2, [sp, #228]	; 0xe4
   2dbc4:	sub	r1, r1, #1
   2dbc8:	add	r0, sp, #140	; 0x8c
   2dbcc:	bl	20340 <__assert_fail@plt+0xe9a0>
   2dbd0:	tst	r0, #1
   2dbd4:	addne	r4, r4, #256	; 0x100
   2dbd8:	ldr	r4, [r5, r4, lsl #2]
   2dbdc:	b	2d4fc <__assert_fail@plt+0x1bb5c>
   2dbe0:	ldr	r2, [sp, #188]	; 0xbc
   2dbe4:	cmp	r3, r2
   2dbe8:	bge	2d4d0 <__assert_fail@plt+0x1bb30>
   2dbec:	b	2db90 <__assert_fail@plt+0x1c1f0>
   2dbf0:	ldm	r2, {r0, r1, r2}
   2dbf4:	add	r3, sp, #276	; 0x114
   2dbf8:	stm	r3, {r0, r1, r2}
   2dbfc:	sub	r1, r6, #1
   2dc00:	ldr	r2, [sp, #228]	; 0xe4
   2dc04:	add	r0, sp, #140	; 0x8c
   2dc08:	bl	20340 <__assert_fail@plt+0xe9a0>
   2dc0c:	add	r2, sp, #276	; 0x114
   2dc10:	mov	r1, sl
   2dc14:	mov	r3, r0
   2dc18:	add	r0, sp, #128	; 0x80
   2dc1c:	bl	2918c <__assert_fail@plt+0x177ec>
   2dc20:	str	r0, [r8, r6, lsl #2]
   2dc24:	b	2db44 <__assert_fail@plt+0x1c1a4>
   2dc28:	ldr	r3, [sp, #28]
   2dc2c:	ldr	r7, [sp, #240]	; 0xf0
   2dc30:	ldr	r4, [r3, #76]	; 0x4c
   2dc34:	cmp	r4, #0
   2dc38:	beq	2dd04 <__assert_fail@plt+0x1c364>
   2dc3c:	ldr	r3, [sp, #20]
   2dc40:	add	r0, sp, #140	; 0x8c
   2dc44:	mov	r2, r3
   2dc48:	ldr	r1, [r7, r3, lsl #2]
   2dc4c:	bl	2042c <__assert_fail@plt+0xea8c>
   2dc50:	str	r0, [sp, #236]	; 0xec
   2dc54:	b	2e064 <__assert_fail@plt+0x1c6c4>
   2dc58:	ldr	r9, [sp, #76]	; 0x4c
   2dc5c:	ldr	r7, [sp, #240]	; 0xf0
   2dc60:	cmp	r7, #0
   2dc64:	str	r0, [sp, #116]	; 0x74
   2dc68:	beq	2dc78 <__assert_fail@plt+0x1c2d8>
   2dc6c:	mov	r4, #0
   2dc70:	b	2d508 <__assert_fail@plt+0x1bb68>
   2dc74:	mov	r7, r0
   2dc78:	mov	r3, #12
   2dc7c:	str	r3, [sp, #48]	; 0x30
   2dc80:	b	2d6b8 <__assert_fail@plt+0x1bd18>
   2dc84:	ldr	r2, [sp, #20]
   2dc88:	ldr	r4, [sp, #12]
   2dc8c:	add	r1, sp, #276	; 0x114
   2dc90:	add	r0, sp, #140	; 0x8c
   2dc94:	str	r3, [sp, #280]	; 0x118
   2dc98:	str	r2, [sp, #288]	; 0x120
   2dc9c:	str	r3, [sp, #292]	; 0x124
   2dca0:	str	r3, [sp, #296]	; 0x128
   2dca4:	str	r3, [sp, #300]	; 0x12c
   2dca8:	str	r4, [sp, #276]	; 0x114
   2dcac:	str	r9, [sp, #284]	; 0x11c
   2dcb0:	bl	26270 <__assert_fail@plt+0x148d0>
   2dcb4:	mov	r7, r0
   2dcb8:	ldr	r0, [sp, #300]	; 0x12c
   2dcbc:	bl	1f018 <__assert_fail@plt+0xd678>
   2dcc0:	cmp	r7, #0
   2dcc4:	bne	2e078 <__assert_fail@plt+0x1c6d8>
   2dcc8:	ldr	r3, [r4]
   2dccc:	cmp	r3, #0
   2dcd0:	beq	2d588 <__assert_fail@plt+0x1bbe8>
   2dcd4:	ldr	fp, [sp, #12]
   2dcd8:	ldr	r0, [sp, #240]	; 0xf0
   2dcdc:	bl	1f018 <__assert_fail@plt+0xd678>
   2dce0:	ldr	r3, [sp, #20]
   2dce4:	mov	r0, #0
   2dce8:	str	r3, [sp, #232]	; 0xe8
   2dcec:	str	fp, [sp, #240]	; 0xf0
   2dcf0:	str	r9, [sp, #236]	; 0xec
   2dcf4:	bl	1f018 <__assert_fail@plt+0xd678>
   2dcf8:	mov	r0, #0
   2dcfc:	bl	1f018 <__assert_fail@plt+0xd678>
   2dd00:	ldr	r7, [sp, #240]	; 0xf0
   2dd04:	ldr	r3, [sp, #56]	; 0x38
   2dd08:	cmp	r3, #0
   2dd0c:	beq	2d6b8 <__assert_fail@plt+0x1bd18>
   2dd10:	cmp	r3, #1
   2dd14:	bls	2dd38 <__assert_fail@plt+0x1c398>
   2dd18:	sub	r3, r3, #-536870911	; 0xe0000001
   2dd1c:	ldr	r2, [sp, #468]	; 0x1d4
   2dd20:	mvn	r1, #0
   2dd24:	add	r3, r2, r3, lsl #3
   2dd28:	str	r1, [r2, #12]
   2dd2c:	str	r1, [r2, #8]!
   2dd30:	cmp	r3, r2
   2dd34:	bne	2dd28 <__assert_fail@plt+0x1c388>
   2dd38:	ldr	r3, [sp, #44]	; 0x2c
   2dd3c:	ldr	r1, [sp, #468]	; 0x1d4
   2dd40:	ldr	r2, [sp, #232]	; 0xe8
   2dd44:	ldrb	r3, [r3, #28]
   2dd48:	str	r2, [r1, #4]
   2dd4c:	ldr	r2, [sp, #56]	; 0x38
   2dd50:	mov	r4, #0
   2dd54:	lsr	r3, r3, #4
   2dd58:	eor	r3, r3, #1
   2dd5c:	cmp	r2, #1
   2dd60:	moveq	r3, #0
   2dd64:	andne	r3, r3, #1
   2dd68:	cmp	r3, #0
   2dd6c:	mov	r3, r1
   2dd70:	moveq	r3, r2
   2dd74:	str	r4, [r1]
   2dd78:	lsleq	r9, r3, #3
   2dd7c:	beq	2e8c4 <__assert_fail@plt+0x1cf24>
   2dd80:	ldr	r2, [sp, #28]
   2dd84:	ldrb	r3, [r2, #88]	; 0x58
   2dd88:	tst	r3, #1
   2dd8c:	beq	2efac <__assert_fail@plt+0x1d60c>
   2dd90:	ldr	r3, [r2, #76]	; 0x4c
   2dd94:	cmp	r3, #0
   2dd98:	ble	2efac <__assert_fail@plt+0x1d60c>
   2dd9c:	ldr	r1, [sp, #44]	; 0x2c
   2dda0:	mov	r2, #2
   2dda4:	mov	r3, #16
   2dda8:	ldr	r1, [r1]
   2ddac:	add	r8, sp, #288	; 0x120
   2ddb0:	mov	r0, #48	; 0x30
   2ddb4:	str	r1, [sp, #20]
   2ddb8:	str	r4, [sp, #128]	; 0x80
   2ddbc:	str	r4, [sp, #276]	; 0x114
   2ddc0:	str	r2, [sp, #132]	; 0x84
   2ddc4:	str	r3, [sp, #280]	; 0x118
   2ddc8:	str	r8, [sp, #284]	; 0x11c
   2ddcc:	bl	1f110 <__assert_fail@plt+0xd770>
   2ddd0:	cmp	r0, #0
   2ddd4:	str	r0, [sp, #136]	; 0x88
   2ddd8:	beq	2efa0 <__assert_fail@plt+0x1d600>
   2dddc:	ldr	r3, [sp, #276]	; 0x114
   2dde0:	ldr	r1, [sp, #56]	; 0x38
   2dde4:	add	r2, sp, #116	; 0x74
   2dde8:	cmp	r1, r3
   2ddec:	ldr	r3, [sp, #20]
   2ddf0:	str	r2, [sp, #16]
   2ddf4:	addls	sl, sp, #128	; 0x80
   2ddf8:	ldr	fp, [r3, #72]	; 0x48
   2ddfc:	movls	r3, r1
   2de00:	str	r4, [sp, #116]	; 0x74
   2de04:	str	r4, [sp, #120]	; 0x78
   2de08:	str	r4, [sp, #124]	; 0x7c
   2de0c:	strls	r3, [sp, #276]	; 0x114
   2de10:	bhi	2f198 <__assert_fail@plt+0x1d7f8>
   2de14:	ldr	r5, [sp, #56]	; 0x38
   2de18:	ldr	r3, [sp, #284]	; 0x11c
   2de1c:	ldr	r1, [sp, #468]	; 0x1d4
   2de20:	lsl	r9, r5, #3
   2de24:	mov	r0, r3
   2de28:	mov	r2, r9
   2de2c:	mov	r4, r3
   2de30:	bl	115d4 <memcpy@plt>
   2de34:	lsl	r3, r5, #4
   2de38:	str	r3, [sp, #32]
   2de3c:	ldr	r3, [sp, #468]	; 0x1d4
   2de40:	str	r8, [sp, #12]
   2de44:	mov	r5, r3
   2de48:	ldr	r7, [r3]
   2de4c:	mov	r8, r4
   2de50:	ldr	r2, [r5, #4]
   2de54:	cmp	r2, r7
   2de58:	blt	2f128 <__assert_fail@plt+0x1d788>
   2de5c:	ldr	r3, [sp, #20]
   2de60:	lsl	r6, fp, #3
   2de64:	str	fp, [sp, #24]
   2de68:	ldr	r0, [r3]
   2de6c:	add	r1, r0, r6
   2de70:	ldrb	r3, [r1, #4]
   2de74:	cmp	r3, #8
   2de78:	beq	2f1a0 <__assert_fail@plt+0x1d800>
   2de7c:	cmp	r3, #9
   2de80:	beq	2eeec <__assert_fail@plt+0x1d54c>
   2de84:	cmp	r7, r2
   2de88:	beq	2e838 <__assert_fail@plt+0x1ce98>
   2de8c:	cmp	sl, #0
   2de90:	beq	2def8 <__assert_fail@plt+0x1c558>
   2de94:	ldr	r3, [sp, #120]	; 0x78
   2de98:	cmp	r3, #0
   2de9c:	ble	2def8 <__assert_fail@plt+0x1c558>
   2dea0:	ldr	r0, [sp, #124]	; 0x7c
   2dea4:	sub	ip, r3, #1
   2dea8:	mov	r1, #0
   2deac:	cmp	r1, ip
   2deb0:	bcs	2deec <__assert_fail@plt+0x1c54c>
   2deb4:	add	r3, r1, ip
   2deb8:	lsr	r3, r3, #1
   2debc:	ldr	r2, [r0, r3, lsl #2]
   2dec0:	cmp	fp, r2
   2dec4:	ble	2dedc <__assert_fail@plt+0x1c53c>
   2dec8:	b	2e664 <__assert_fail@plt+0x1ccc4>
   2decc:	ldr	ip, [r0, r2, lsl #2]
   2ded0:	cmp	fp, ip
   2ded4:	bgt	2e66c <__assert_fail@plt+0x1cccc>
   2ded8:	mov	r3, r2
   2dedc:	add	r2, r1, r3
   2dee0:	cmp	r1, r3
   2dee4:	lsr	r2, r2, #1
   2dee8:	bcc	2decc <__assert_fail@plt+0x1c52c>
   2deec:	ldr	r3, [r0, r1, lsl #2]
   2def0:	cmp	fp, r3
   2def4:	beq	2ea1c <__assert_fail@plt+0x1d07c>
   2def8:	ldr	r4, [sp, #224]	; 0xe0
   2defc:	ldr	r0, [r4]
   2df00:	add	r3, r0, r6
   2df04:	ldrb	r2, [r3, #4]
   2df08:	tst	r2, #8
   2df0c:	beq	2eacc <__assert_fail@plt+0x1d12c>
   2df10:	ldr	r1, [sp, #240]	; 0xf0
   2df14:	add	r3, fp, fp, lsl #1
   2df18:	ldr	r4, [r4, #20]
   2df1c:	ldr	r2, [sp, #120]	; 0x78
   2df20:	add	r4, r4, r3, lsl #2
   2df24:	ldr	r3, [r1, r7, lsl #2]
   2df28:	cmp	r2, #0
   2df2c:	str	r3, [sp, #24]
   2df30:	ble	2e6cc <__assert_fail@plt+0x1cd2c>
   2df34:	ldr	r0, [sp, #124]	; 0x7c
   2df38:	sub	r2, r2, #1
   2df3c:	mov	r1, #0
   2df40:	cmp	r1, r2
   2df44:	bcs	2e6c0 <__assert_fail@plt+0x1cd20>
   2df48:	add	r3, r1, r2
   2df4c:	lsr	r3, r3, #1
   2df50:	b	2df68 <__assert_fail@plt+0x1c5c8>
   2df54:	add	ip, r1, r3
   2df58:	cmp	r1, r3
   2df5c:	mov	r2, r3
   2df60:	lsr	r3, ip, #1
   2df64:	bcs	2e6c0 <__assert_fail@plt+0x1cd20>
   2df68:	ldr	ip, [r0, r3, lsl #2]
   2df6c:	cmp	fp, ip
   2df70:	ble	2df54 <__assert_fail@plt+0x1c5b4>
   2df74:	add	r1, r3, #1
   2df78:	b	2df40 <__assert_fail@plt+0x1c5a0>
   2df7c:	ldr	r3, [sp, #52]	; 0x34
   2df80:	cmp	r3, r5
   2df84:	ble	2d394 <__assert_fail@plt+0x1b9f4>
   2df88:	ldr	r3, [sp, #60]	; 0x3c
   2df8c:	ldr	r1, [sp, #80]	; 0x50
   2df90:	ldrb	r2, [r3, r5]
   2df94:	add	r3, r3, r5
   2df98:	ldrb	r2, [r1, r2]
   2df9c:	ldr	r1, [sp, #64]	; 0x40
   2dfa0:	ldrb	r2, [r1, r2]
   2dfa4:	cmp	r2, #0
   2dfa8:	bne	2d3d8 <__assert_fail@plt+0x1ba38>
   2dfac:	mov	ip, r1
   2dfb0:	add	r2, r5, #1
   2dfb4:	ldr	lr, [sp, #80]	; 0x50
   2dfb8:	ldr	r0, [sp, #52]	; 0x34
   2dfbc:	b	2dfd8 <__assert_fail@plt+0x1c638>
   2dfc0:	ldrb	r1, [r3, #1]!
   2dfc4:	add	r2, r2, #1
   2dfc8:	ldrb	r1, [lr, r1]
   2dfcc:	ldrb	r1, [ip, r1]
   2dfd0:	cmp	r1, #0
   2dfd4:	bne	2e270 <__assert_fail@plt+0x1c8d0>
   2dfd8:	cmp	r0, r2
   2dfdc:	mov	r5, r2
   2dfe0:	bne	2dfc0 <__assert_fail@plt+0x1c620>
   2dfe4:	b	2d38c <__assert_fail@plt+0x1b9ec>
   2dfe8:	ldr	r3, [sp, #68]	; 0x44
   2dfec:	cmp	r3, r5
   2dff0:	bgt	2d664 <__assert_fail@plt+0x1bcc4>
   2dff4:	ldr	r3, [sp, #80]	; 0x50
   2dff8:	ldr	r2, [sp, #112]	; 0x70
   2dffc:	cmp	r3, #0
   2e000:	beq	2e434 <__assert_fail@plt+0x1ca94>
   2e004:	mov	ip, r3
   2e008:	ldr	r1, [sp, #108]	; 0x6c
   2e00c:	ldr	r0, [sp, #64]	; 0x40
   2e010:	ldr	r4, [sp, #68]	; 0x44
   2e014:	ldr	r6, [sp, #60]	; 0x3c
   2e018:	ldr	lr, [sp, #72]	; 0x48
   2e01c:	b	2e034 <__assert_fail@plt+0x1c694>
   2e020:	sub	r5, r5, #1
   2e024:	cmp	r4, r5
   2e028:	mov	r2, r5
   2e02c:	mov	r1, #1
   2e030:	bgt	2e308 <__assert_fail@plt+0x1c968>
   2e034:	cmp	lr, r5
   2e038:	mov	r3, #0
   2e03c:	ldrbgt	r3, [r6, r5]
   2e040:	ldrb	r3, [ip, r3]
   2e044:	ldrb	r3, [r0, r3]
   2e048:	cmp	r3, #0
   2e04c:	beq	2e020 <__assert_fail@plt+0x1c680>
   2e050:	cmp	r1, #0
   2e054:	strne	r2, [sp, #112]	; 0x70
   2e058:	b	2d3d8 <__assert_fail@plt+0x1ba38>
   2e05c:	ldr	r3, [sp, #28]
   2e060:	ldr	r4, [r3, #76]	; 0x4c
   2e064:	cmp	r4, #0
   2e068:	bne	2d7fc <__assert_fail@plt+0x1be5c>
   2e06c:	b	2dd04 <__assert_fail@plt+0x1c364>
   2e070:	ldr	r1, [sp, #72]	; 0x48
   2e074:	b	2d14c <__assert_fail@plt+0x1b7ac>
   2e078:	mov	sl, #0
   2e07c:	ldr	r0, [sp, #12]
   2e080:	bl	1f018 <__assert_fail@plt+0xd678>
   2e084:	mov	r0, sl
   2e088:	bl	1f018 <__assert_fail@plt+0xd678>
   2e08c:	cmp	r7, #1
   2e090:	beq	2d598 <__assert_fail@plt+0x1bbf8>
   2e094:	str	r7, [sp, #48]	; 0x30
   2e098:	ldr	r7, [sp, #240]	; 0xf0
   2e09c:	b	2d6b8 <__assert_fail@plt+0x1bd18>
   2e0a0:	ldr	r1, [sp, #164]	; 0xa4
   2e0a4:	ldr	r4, [sp, #64]	; 0x40
   2e0a8:	ldr	r6, [sp, #92]	; 0x5c
   2e0ac:	ldr	r7, [sp, #68]	; 0x44
   2e0b0:	ldr	r8, [sp, #52]	; 0x34
   2e0b4:	b	2e0fc <__assert_fail@plt+0x1c75c>
   2e0b8:	ldr	r0, [sp, #168]	; 0xa8
   2e0bc:	mov	r2, #0
   2e0c0:	cmp	r3, r0
   2e0c4:	ldrcc	r2, [sp, #144]	; 0x90
   2e0c8:	ldrbcc	r2, [r2, r3]
   2e0cc:	ldrb	r3, [r4, r2]
   2e0d0:	cmp	r3, #0
   2e0d4:	bne	2d3d8 <__assert_fail@plt+0x1ba38>
   2e0d8:	add	r5, r5, r6
   2e0dc:	cmp	r8, r5
   2e0e0:	movge	r3, #0
   2e0e4:	movlt	r3, #1
   2e0e8:	cmp	r7, r5
   2e0ec:	orrgt	r3, r3, #1
   2e0f0:	cmp	r3, #0
   2e0f4:	str	r5, [sp, #112]	; 0x70
   2e0f8:	bne	2d664 <__assert_fail@plt+0x1bcc4>
   2e0fc:	ldr	r2, [sp, #172]	; 0xac
   2e100:	sub	r3, r5, r1
   2e104:	cmp	r3, r2
   2e108:	bcc	2e0b8 <__assert_fail@plt+0x1c718>
   2e10c:	ldr	r2, [sp, #472]	; 0x1d8
   2e110:	mov	r1, r5
   2e114:	add	r0, sp, #140	; 0x8c
   2e118:	bl	20738 <__assert_fail@plt+0xed98>
   2e11c:	cmp	r0, #0
   2e120:	bne	2e484 <__assert_fail@plt+0x1cae4>
   2e124:	ldr	r1, [sp, #164]	; 0xa4
   2e128:	sub	r3, r5, r1
   2e12c:	b	2e0b8 <__assert_fail@plt+0x1c718>
   2e130:	mov	r3, r2
   2e134:	sub	r1, r3, #1
   2e138:	ldr	r2, [sp, #228]	; 0xe4
   2e13c:	add	r0, sp, #140	; 0x8c
   2e140:	bl	20340 <__assert_fail@plt+0xe9a0>
   2e144:	tst	r0, #1
   2e148:	beq	2e2b4 <__assert_fail@plt+0x1c914>
   2e14c:	ldr	fp, [r4, #40]	; 0x28
   2e150:	b	2d44c <__assert_fail@plt+0x1baac>
   2e154:	mov	r7, #1
   2e158:	b	2e07c <__assert_fail@plt+0x1c6dc>
   2e15c:	beq	fead8c0c <optarg@@GLIBC_2.4+0xfea939ec>
   2e160:	andeq	pc, r3, r0, lsl #30
   2e164:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2e168:	ldr	r3, [sp, #264]	; 0x108
   2e16c:	cmp	r3, #0
   2e170:	movgt	r7, #0
   2e174:	ble	2e1f4 <__assert_fail@plt+0x1c854>
   2e178:	ldr	r3, [sp, #272]	; 0x110
   2e17c:	ldr	r6, [r3, r7, lsl #2]
   2e180:	ldr	r3, [r6, #16]
   2e184:	cmp	r3, #0
   2e188:	movgt	r4, #0
   2e18c:	ble	2e1b8 <__assert_fail@plt+0x1c818>
   2e190:	ldr	r3, [r6, #20]
   2e194:	ldr	r5, [r3, r4, lsl #2]
   2e198:	add	r4, r4, #1
   2e19c:	ldr	r0, [r5, #16]
   2e1a0:	bl	1f018 <__assert_fail@plt+0xd678>
   2e1a4:	mov	r0, r5
   2e1a8:	bl	1f018 <__assert_fail@plt+0xd678>
   2e1ac:	ldr	r3, [r6, #16]
   2e1b0:	cmp	r4, r3
   2e1b4:	blt	2e190 <__assert_fail@plt+0x1c7f0>
   2e1b8:	ldr	r0, [r6, #20]
   2e1bc:	bl	1f018 <__assert_fail@plt+0xd678>
   2e1c0:	ldr	r3, [r6, #8]
   2e1c4:	cmp	r3, #0
   2e1c8:	beq	2e1dc <__assert_fail@plt+0x1c83c>
   2e1cc:	ldr	r0, [r3, #8]
   2e1d0:	bl	1f018 <__assert_fail@plt+0xd678>
   2e1d4:	ldr	r0, [r6, #8]
   2e1d8:	bl	1f018 <__assert_fail@plt+0xd678>
   2e1dc:	mov	r0, r6
   2e1e0:	bl	1f018 <__assert_fail@plt+0xd678>
   2e1e4:	ldr	r3, [sp, #264]	; 0x108
   2e1e8:	add	r7, r7, #1
   2e1ec:	cmp	r7, r3
   2e1f0:	blt	2e178 <__assert_fail@plt+0x1c7d8>
   2e1f4:	mov	r3, #0
   2e1f8:	ldr	r0, [sp, #272]	; 0x110
   2e1fc:	str	r3, [sp, #264]	; 0x108
   2e200:	str	r3, [sp, #248]	; 0xf8
   2e204:	bl	1f018 <__assert_fail@plt+0xd678>
   2e208:	ldr	r0, [sp, #256]	; 0x100
   2e20c:	bl	1f018 <__assert_fail@plt+0xd678>
   2e210:	b	2d6d0 <__assert_fail@plt+0x1bd30>
   2e214:	mov	r1, r6
   2e218:	ldr	r0, [sp, #144]	; 0x90
   2e21c:	bl	1f190 <__assert_fail@plt+0xd7f0>
   2e220:	cmp	r0, #0
   2e224:	beq	2d6ac <__assert_fail@plt+0x1bd0c>
   2e228:	ldr	r1, [sp, #28]
   2e22c:	ldrb	r2, [sp, #215]	; 0xd7
   2e230:	str	r0, [sp, #144]	; 0x90
   2e234:	ldrb	r3, [r1, #88]	; 0x58
   2e238:	cmp	r2, #0
   2e23c:	add	r2, r1, #96	; 0x60
   2e240:	str	r6, [sp, #176]	; 0xb0
   2e244:	lsr	r3, r3, #4
   2e248:	and	r3, r3, #1
   2e24c:	strb	r3, [sp, #218]	; 0xda
   2e250:	str	r2, [sp, #208]	; 0xd0
   2e254:	bne	2d148 <__assert_fail@plt+0x1b7a8>
   2e258:	b	2d130 <__assert_fail@plt+0x1b790>
   2e25c:	ldr	r3, [sp, #28]
   2e260:	ldrb	r3, [r3, #88]	; 0x58
   2e264:	tst	r3, #2
   2e268:	bne	2d1e8 <__assert_fail@plt+0x1b848>
   2e26c:	b	2d20c <__assert_fail@plt+0x1b86c>
   2e270:	str	r5, [sp, #112]	; 0x70
   2e274:	b	2d3d8 <__assert_fail@plt+0x1ba38>
   2e278:	mov	r1, fp
   2e27c:	ldr	r0, [sp, #224]	; 0xe0
   2e280:	bl	2aa9c <__assert_fail@plt+0x190fc>
   2e284:	cmp	r0, #0
   2e288:	bne	2d4ec <__assert_fail@plt+0x1bb4c>
   2e28c:	ldr	r7, [sp, #240]	; 0xf0
   2e290:	mov	r3, #12
   2e294:	cmp	r7, #0
   2e298:	str	r3, [sp, #116]	; 0x74
   2e29c:	bne	2dc6c <__assert_fail@plt+0x1c2cc>
   2e2a0:	b	2dc78 <__assert_fail@plt+0x1c2d8>
   2e2a4:	ldr	r3, [sp, #104]	; 0x68
   2e2a8:	str	r3, [sp, #16]
   2e2ac:	ldrb	r3, [fp, #52]	; 0x34
   2e2b0:	b	2d478 <__assert_fail@plt+0x1bad8>
   2e2b4:	cmp	r0, #0
   2e2b8:	beq	2d44c <__assert_fail@plt+0x1baac>
   2e2bc:	and	r3, r0, #6
   2e2c0:	cmp	r3, #6
   2e2c4:	ldreq	fp, [r4, #48]	; 0x30
   2e2c8:	beq	2d44c <__assert_fail@plt+0x1baac>
   2e2cc:	tst	r0, #2
   2e2d0:	beq	2d688 <__assert_fail@plt+0x1bce8>
   2e2d4:	ldr	fp, [r4, #44]	; 0x2c
   2e2d8:	b	2d44c <__assert_fail@plt+0x1baac>
   2e2dc:	ldr	r0, [sp, #124]	; 0x7c
   2e2e0:	ldr	r8, [sp, #12]
   2e2e4:	bl	1f018 <__assert_fail@plt+0xd678>
   2e2e8:	ldr	r0, [sp, #284]	; 0x11c
   2e2ec:	cmp	r0, r8
   2e2f0:	beq	2e2f8 <__assert_fail@plt+0x1c958>
   2e2f4:	bl	1f018 <__assert_fail@plt+0xd678>
   2e2f8:	mov	r3, #1
   2e2fc:	str	r3, [sp, #48]	; 0x30
   2e300:	ldr	r7, [sp, #240]	; 0xf0
   2e304:	b	2d6b8 <__assert_fail@plt+0x1bd18>
   2e308:	str	r5, [sp, #112]	; 0x70
   2e30c:	b	2d664 <__assert_fail@plt+0x1bcc4>
   2e310:	ldrsb	r3, [fp, #52]	; 0x34
   2e314:	cmp	r3, #0
   2e318:	blt	2e3d0 <__assert_fail@plt+0x1ca30>
   2e31c:	ldr	r3, [sp, #36]	; 0x24
   2e320:	cmp	r3, #0
   2e324:	ldr	r3, [sp, #12]
   2e328:	str	r3, [sp, #20]
   2e32c:	movne	r3, #1
   2e330:	strne	r3, [sp, #40]	; 0x28
   2e334:	bne	2d490 <__assert_fail@plt+0x1baf0>
   2e338:	b	2d78c <__assert_fail@plt+0x1bdec>
   2e33c:	ldr	r7, [sp, #240]	; 0xf0
   2e340:	b	2dc78 <__assert_fail@plt+0x1c2d8>
   2e344:	add	r4, fp, #8
   2e348:	add	r5, fp, #12
   2e34c:	mov	r1, r4
   2e350:	mov	r2, r5
   2e354:	mov	r3, #0
   2e358:	add	r0, sp, #140	; 0x8c
   2e35c:	bl	20fd8 <__assert_fail@plt+0xf638>
   2e360:	cmp	r0, #0
   2e364:	str	r0, [sp, #116]	; 0x74
   2e368:	bne	2e40c <__assert_fail@plt+0x1ca6c>
   2e36c:	ldrb	r3, [fp, #52]	; 0x34
   2e370:	tst	r3, #64	; 0x40
   2e374:	bne	2e3ec <__assert_fail@plt+0x1ca4c>
   2e378:	ldr	r2, [sp, #108]	; 0x6c
   2e37c:	str	r2, [sp, #16]
   2e380:	b	2d478 <__assert_fail@plt+0x1bad8>
   2e384:	mov	fp, r3
   2e388:	bl	1f018 <__assert_fail@plt+0xd678>
   2e38c:	mov	r0, fp
   2e390:	bl	1f018 <__assert_fail@plt+0xd678>
   2e394:	mov	r3, #12
   2e398:	str	r3, [sp, #48]	; 0x30
   2e39c:	ldr	r7, [sp, #240]	; 0xf0
   2e3a0:	b	2d6b8 <__assert_fail@plt+0x1bd18>
   2e3a4:	mov	r3, #8
   2e3a8:	b	2d2a8 <__assert_fail@plt+0x1b908>
   2e3ac:	ldr	fp, [sp, #12]
   2e3b0:	mov	r0, fp
   2e3b4:	bl	1f018 <__assert_fail@plt+0xd678>
   2e3b8:	mov	r0, sl
   2e3bc:	bl	1f018 <__assert_fail@plt+0xd678>
   2e3c0:	mov	r3, #12
   2e3c4:	str	r3, [sp, #48]	; 0x30
   2e3c8:	ldr	r7, [sp, #240]	; 0xf0
   2e3cc:	b	2d6b8 <__assert_fail@plt+0x1bd18>
   2e3d0:	ldr	r2, [sp, #12]
   2e3d4:	mov	r1, fp
   2e3d8:	add	r0, sp, #140	; 0x8c
   2e3dc:	bl	2042c <__assert_fail@plt+0xea8c>
   2e3e0:	cmp	r0, #0
   2e3e4:	beq	2d480 <__assert_fail@plt+0x1bae0>
   2e3e8:	b	2e31c <__assert_fail@plt+0x1c97c>
   2e3ec:	mov	r2, r5
   2e3f0:	mov	r1, r4
   2e3f4:	add	r0, sp, #140	; 0x8c
   2e3f8:	bl	2c544 <__assert_fail@plt+0x1aba4>
   2e3fc:	cmp	r0, #0
   2e400:	str	r0, [sp, #116]	; 0x74
   2e404:	ldrbeq	r3, [fp, #52]	; 0x34
   2e408:	beq	2e378 <__assert_fail@plt+0x1c9d8>
   2e40c:	str	r0, [sp, #20]
   2e410:	b	2d78c <__assert_fail@plt+0x1bdec>
   2e414:	cmp	r0, #0
   2e418:	mov	r4, r0
   2e41c:	bne	2d524 <__assert_fail@plt+0x1bb84>
   2e420:	b	2d76c <__assert_fail@plt+0x1bdcc>
   2e424:	mov	r3, #12
   2e428:	mov	r7, #0
   2e42c:	str	r3, [sp, #48]	; 0x30
   2e430:	b	2d6b8 <__assert_fail@plt+0x1bd18>
   2e434:	ldr	r1, [sp, #108]	; 0x6c
   2e438:	ldr	r0, [sp, #64]	; 0x40
   2e43c:	ldr	lr, [sp, #68]	; 0x44
   2e440:	ldr	r4, [sp, #60]	; 0x3c
   2e444:	ldr	ip, [sp, #72]	; 0x48
   2e448:	b	2e460 <__assert_fail@plt+0x1cac0>
   2e44c:	sub	r5, r5, #1
   2e450:	cmp	lr, r5
   2e454:	mov	r2, r5
   2e458:	mov	r1, #1
   2e45c:	bgt	2e308 <__assert_fail@plt+0x1c968>
   2e460:	cmp	ip, r5
   2e464:	mov	r3, #0
   2e468:	ldrbgt	r3, [r4, r5]
   2e46c:	ldrb	r3, [r0, r3]
   2e470:	cmp	r3, #0
   2e474:	beq	2e44c <__assert_fail@plt+0x1caac>
   2e478:	b	2e050 <__assert_fail@plt+0x1c6b0>
   2e47c:	mov	r4, r0
   2e480:	b	2d524 <__assert_fail@plt+0x1bb84>
   2e484:	str	r0, [sp, #48]	; 0x30
   2e488:	ldr	r7, [sp, #240]	; 0xf0
   2e48c:	b	2d6b8 <__assert_fail@plt+0x1bd18>
   2e490:	ldr	r3, [sp, #12]
   2e494:	str	r9, [sp, #32]
   2e498:	mov	fp, r3
   2e49c:	mov	r9, sl
   2e4a0:	add	r2, r3, r4
   2e4a4:	str	r6, [sp, #20]
   2e4a8:	str	r2, [sp, #24]
   2e4ac:	str	sl, [sp, #16]
   2e4b0:	ldr	r6, [fp]
   2e4b4:	cmp	r6, #0
   2e4b8:	beq	2e658 <__assert_fail@plt+0x1ccb8>
   2e4bc:	ldr	r5, [r9]
   2e4c0:	cmp	r5, #0
   2e4c4:	beq	2e5a0 <__assert_fail@plt+0x1cc00>
   2e4c8:	ldr	r3, [r6, #8]
   2e4cc:	cmp	r3, #0
   2e4d0:	ble	2e5cc <__assert_fail@plt+0x1cc2c>
   2e4d4:	ldr	r2, [r5, #8]
   2e4d8:	cmp	r2, #0
   2e4dc:	ble	2e60c <__assert_fail@plt+0x1cc6c>
   2e4e0:	add	r3, r3, r2
   2e4e4:	str	r3, [sp, #128]	; 0x80
   2e4e8:	lsl	r0, r3, #2
   2e4ec:	bl	1f110 <__assert_fail@plt+0xd770>
   2e4f0:	cmp	r0, #0
   2e4f4:	str	r0, [sp, #136]	; 0x88
   2e4f8:	beq	2ef50 <__assert_fail@plt+0x1d5b0>
   2e4fc:	mov	r4, #0
   2e500:	mov	r7, r4
   2e504:	mov	ip, r0
   2e508:	mov	r1, #1
   2e50c:	b	2e550 <__assert_fail@plt+0x1cbb0>
   2e510:	ldr	r3, [r5, #8]
   2e514:	cmp	r4, r3
   2e518:	bge	2e678 <__assert_fail@plt+0x1ccd8>
   2e51c:	ldr	r3, [r6, #12]
   2e520:	ldr	r2, [r5, #12]
   2e524:	ldr	r3, [r3, r7, lsl #2]
   2e528:	ldr	r2, [r2, r4, lsl #2]
   2e52c:	cmp	r3, r2
   2e530:	addgt	r4, r4, #1
   2e534:	strgt	r2, [ip]
   2e538:	bgt	2e548 <__assert_fail@plt+0x1cba8>
   2e53c:	add	r7, r7, #1
   2e540:	addeq	r4, r4, #1
   2e544:	str	r3, [ip]
   2e548:	add	r1, r1, #1
   2e54c:	add	ip, ip, #4
   2e550:	ldr	r2, [r6, #8]
   2e554:	sub	sl, r1, #1
   2e558:	cmp	r7, r2
   2e55c:	blt	2e510 <__assert_fail@plt+0x1cb70>
   2e560:	ldr	r2, [r5, #8]
   2e564:	cmp	r4, r2
   2e568:	blt	2ef78 <__assert_fail@plt+0x1d5d8>
   2e56c:	add	r2, sp, #128	; 0x80
   2e570:	str	sl, [sp, #132]	; 0x84
   2e574:	mov	r3, #0
   2e578:	mov	r1, r8
   2e57c:	add	r0, sp, #116	; 0x74
   2e580:	str	r3, [sp, #116]	; 0x74
   2e584:	bl	24ba8 <__assert_fail@plt+0x13208>
   2e588:	str	r0, [fp]
   2e58c:	ldr	r0, [sp, #136]	; 0x88
   2e590:	bl	1f018 <__assert_fail@plt+0xd678>
   2e594:	ldr	r7, [sp, #116]	; 0x74
   2e598:	cmp	r7, #0
   2e59c:	bne	2e6a0 <__assert_fail@plt+0x1cd00>
   2e5a0:	ldr	r3, [sp, #24]
   2e5a4:	add	fp, fp, #4
   2e5a8:	cmp	r3, fp
   2e5ac:	add	r9, r9, #4
   2e5b0:	bne	2e4b0 <__assert_fail@plt+0x1cb10>
   2e5b4:	ldr	sl, [sp, #16]
   2e5b8:	ldr	r9, [sp, #32]
   2e5bc:	mov	r0, sl
   2e5c0:	ldr	fp, [sp, #12]
   2e5c4:	bl	1f018 <__assert_fail@plt+0xd678>
   2e5c8:	b	2dcd8 <__assert_fail@plt+0x1c338>
   2e5cc:	ldr	r3, [r5, #8]
   2e5d0:	cmp	r3, #0
   2e5d4:	ble	2e640 <__assert_fail@plt+0x1cca0>
   2e5d8:	lsl	r0, r3, #2
   2e5dc:	str	r3, [sp, #132]	; 0x84
   2e5e0:	str	r3, [sp, #128]	; 0x80
   2e5e4:	bl	1f110 <__assert_fail@plt+0xd770>
   2e5e8:	cmp	r0, #0
   2e5ec:	str	r0, [sp, #136]	; 0x88
   2e5f0:	beq	2ef50 <__assert_fail@plt+0x1d5b0>
   2e5f4:	ldr	r2, [r5, #8]
   2e5f8:	ldr	r1, [r5, #12]
   2e5fc:	lsl	r2, r2, #2
   2e600:	bl	115d4 <memcpy@plt>
   2e604:	add	r2, sp, #128	; 0x80
   2e608:	b	2e574 <__assert_fail@plt+0x1cbd4>
   2e60c:	lsl	r0, r3, #2
   2e610:	str	r3, [sp, #132]	; 0x84
   2e614:	str	r3, [sp, #128]	; 0x80
   2e618:	bl	1f110 <__assert_fail@plt+0xd770>
   2e61c:	cmp	r0, #0
   2e620:	str	r0, [sp, #136]	; 0x88
   2e624:	beq	2ef50 <__assert_fail@plt+0x1d5b0>
   2e628:	ldr	r2, [r6, #8]
   2e62c:	ldr	r1, [r6, #12]
   2e630:	lsl	r2, r2, #2
   2e634:	bl	115d4 <memcpy@plt>
   2e638:	add	r2, sp, #128	; 0x80
   2e63c:	b	2e574 <__assert_fail@plt+0x1cbd4>
   2e640:	add	r2, sp, #128	; 0x80
   2e644:	mov	r3, #0
   2e648:	str	r3, [sp, #128]	; 0x80
   2e64c:	str	r3, [r2, #4]
   2e650:	str	r3, [r2, #8]
   2e654:	b	2e574 <__assert_fail@plt+0x1cbd4>
   2e658:	ldr	r3, [r9]
   2e65c:	str	r3, [fp]
   2e660:	b	2e5a0 <__assert_fail@plt+0x1cc00>
   2e664:	mov	r2, r3
   2e668:	mov	r3, ip
   2e66c:	add	r1, r2, #1
   2e670:	mov	ip, r3
   2e674:	b	2deac <__assert_fail@plt+0x1c50c>
   2e678:	sub	r2, r2, r7
   2e67c:	ldr	r1, [r6, #12]
   2e680:	lsl	r2, r2, #2
   2e684:	add	r0, r0, sl, lsl #2
   2e688:	add	r1, r1, r7, lsl #2
   2e68c:	bl	115d4 <memcpy@plt>
   2e690:	ldr	r2, [r6, #8]
   2e694:	sub	r7, r2, r7
   2e698:	add	sl, sl, r7
   2e69c:	b	2e56c <__assert_fail@plt+0x1cbcc>
   2e6a0:	ldr	sl, [sp, #16]
   2e6a4:	mov	r0, sl
   2e6a8:	bl	1f018 <__assert_fail@plt+0xd678>
   2e6ac:	ldr	r0, [sp, #12]
   2e6b0:	bl	1f018 <__assert_fail@plt+0xd678>
   2e6b4:	mov	r0, #0
   2e6b8:	bl	1f018 <__assert_fail@plt+0xd678>
   2e6bc:	b	2e08c <__assert_fail@plt+0x1c6ec>
   2e6c0:	ldr	r3, [r0, r1, lsl #2]
   2e6c4:	cmp	fp, r3
   2e6c8:	beq	2e6e0 <__assert_fail@plt+0x1cd40>
   2e6cc:	mov	r1, fp
   2e6d0:	ldr	r0, [sp, #16]
   2e6d4:	bl	1fdc4 <__assert_fail@plt+0xe424>
   2e6d8:	cmp	r0, #0
   2e6dc:	beq	2ee3c <__assert_fail@plt+0x1d49c>
   2e6e0:	ldr	r6, [r4, #4]
   2e6e4:	cmp	r6, #0
   2e6e8:	ble	2e79c <__assert_fail@plt+0x1cdfc>
   2e6ec:	ldr	r3, [sp, #24]
   2e6f0:	ldr	r2, [r4, #8]
   2e6f4:	mvn	fp, #0
   2e6f8:	ldr	r3, [r3, #8]
   2e6fc:	mov	lr, #0
   2e700:	str	r3, [sp, #40]	; 0x28
   2e704:	sub	r3, r3, #1
   2e708:	str	r2, [sp, #36]	; 0x24
   2e70c:	str	r3, [sp, #44]	; 0x2c
   2e710:	ldr	r3, [sp, #40]	; 0x28
   2e714:	cmp	r3, #0
   2e718:	ble	2e780 <__assert_fail@plt+0x1cde0>
   2e71c:	ldr	r3, [sp, #36]	; 0x24
   2e720:	ldr	ip, [sp, #44]	; 0x2c
   2e724:	mov	r1, #0
   2e728:	ldr	r4, [r3, lr, lsl #2]
   2e72c:	ldr	r3, [sp, #24]
   2e730:	ldr	r0, [r3, #12]
   2e734:	cmp	r1, ip
   2e738:	bcs	2e774 <__assert_fail@plt+0x1cdd4>
   2e73c:	add	r2, r1, ip
   2e740:	lsr	r2, r2, #1
   2e744:	ldr	r3, [r0, r2, lsl #2]
   2e748:	cmp	r4, r3
   2e74c:	ble	2e764 <__assert_fail@plt+0x1cdc4>
   2e750:	b	2e814 <__assert_fail@plt+0x1ce74>
   2e754:	ldr	ip, [r0, r3, lsl #2]
   2e758:	cmp	r4, ip
   2e75c:	bgt	2e81c <__assert_fail@plt+0x1ce7c>
   2e760:	mov	r2, r3
   2e764:	add	r3, r1, r2
   2e768:	cmp	r1, r2
   2e76c:	lsr	r3, r3, #1
   2e770:	bcc	2e754 <__assert_fail@plt+0x1cdb4>
   2e774:	ldr	r3, [r0, r1, lsl #2]
   2e778:	cmp	r4, r3
   2e77c:	beq	2e828 <__assert_fail@plt+0x1ce88>
   2e780:	add	lr, lr, #1
   2e784:	cmp	r6, lr
   2e788:	bne	2e710 <__assert_fail@plt+0x1cd70>
   2e78c:	cmp	fp, #0
   2e790:	bge	2de50 <__assert_fail@plt+0x1c4b0>
   2e794:	cmn	fp, #2
   2e798:	beq	2ee3c <__assert_fail@plt+0x1d49c>
   2e79c:	cmp	sl, #0
   2e7a0:	beq	2e2dc <__assert_fail@plt+0x1c93c>
   2e7a4:	ldr	r4, [sl]
   2e7a8:	cmp	r4, #0
   2e7ac:	beq	2f08c <__assert_fail@plt+0x1d6ec>
   2e7b0:	sub	r3, r4, #1
   2e7b4:	ldr	ip, [sl, #8]
   2e7b8:	add	lr, r3, r3, lsl #1
   2e7bc:	str	r3, [sl]
   2e7c0:	add	r4, ip, lr, lsl #3
   2e7c4:	mov	r2, r9
   2e7c8:	ldr	r1, [r4, #8]
   2e7cc:	mov	r0, r5
   2e7d0:	ldr	r7, [ip, lr, lsl #3]
   2e7d4:	bl	115d4 <memcpy@plt>
   2e7d8:	ldr	r1, [r4, #8]
   2e7dc:	mov	r2, r9
   2e7e0:	add	r1, r1, r9
   2e7e4:	mov	r0, r8
   2e7e8:	bl	115d4 <memcpy@plt>
   2e7ec:	ldr	r0, [sp, #124]	; 0x7c
   2e7f0:	bl	1f018 <__assert_fail@plt+0xd678>
   2e7f4:	ldr	r0, [r4, #8]
   2e7f8:	bl	1f018 <__assert_fail@plt+0xd678>
   2e7fc:	add	r3, r4, #12
   2e800:	ldr	fp, [r4, #4]
   2e804:	ldm	r3, {r0, r1, r2}
   2e808:	ldr	r3, [sp, #16]
   2e80c:	stm	r3, {r0, r1, r2}
   2e810:	b	2de50 <__assert_fail@plt+0x1c4b0>
   2e814:	mov	r3, r2
   2e818:	mov	r2, ip
   2e81c:	add	r1, r3, #1
   2e820:	mov	ip, r2
   2e824:	b	2e734 <__assert_fail@plt+0x1cd94>
   2e828:	cmn	fp, #1
   2e82c:	bne	2eda8 <__assert_fail@plt+0x1d408>
   2e830:	mov	fp, r4
   2e834:	b	2e780 <__assert_fail@plt+0x1cde0>
   2e838:	ldr	r3, [sp, #236]	; 0xec
   2e83c:	cmp	fp, r3
   2e840:	bne	2de8c <__assert_fail@plt+0x1c4ec>
   2e844:	cmp	sl, #0
   2e848:	bne	2ea1c <__assert_fail@plt+0x1d07c>
   2e84c:	ldr	r0, [sp, #124]	; 0x7c
   2e850:	ldr	r8, [sp, #12]
   2e854:	bl	1f018 <__assert_fail@plt+0xd678>
   2e858:	ldr	r0, [sp, #284]	; 0x11c
   2e85c:	cmp	r0, r8
   2e860:	beq	2e8c0 <__assert_fail@plt+0x1cf20>
   2e864:	bl	1f018 <__assert_fail@plt+0xd678>
   2e868:	mov	r4, #0
   2e86c:	mov	r3, #16
   2e870:	cmp	sl, #0
   2e874:	str	r8, [sp, #284]	; 0x11c
   2e878:	str	r4, [sp, #276]	; 0x114
   2e87c:	str	r3, [sp, #280]	; 0x118
   2e880:	beq	2e8c0 <__assert_fail@plt+0x1cf20>
   2e884:	ldr	r6, [sl]
   2e888:	ldr	r7, [sl, #8]
   2e88c:	cmp	r6, r4
   2e890:	ble	2e8b8 <__assert_fail@plt+0x1cf18>
   2e894:	mov	r5, r7
   2e898:	ldr	r0, [r5, #20]
   2e89c:	bl	1f018 <__assert_fail@plt+0xd678>
   2e8a0:	add	r4, r4, #1
   2e8a4:	ldr	r0, [r5, #8]
   2e8a8:	bl	1f018 <__assert_fail@plt+0xd678>
   2e8ac:	cmp	r6, r4
   2e8b0:	add	r5, r5, #24
   2e8b4:	bne	2e898 <__assert_fail@plt+0x1cef8>
   2e8b8:	mov	r0, r7
   2e8bc:	bl	1f018 <__assert_fail@plt+0xd678>
   2e8c0:	ldr	r7, [sp, #240]	; 0xf0
   2e8c4:	ldrb	r3, [sp, #216]	; 0xd8
   2e8c8:	ldr	r2, [sp, #468]	; 0x1d4
   2e8cc:	ldr	r5, [sp, #168]	; 0xa8
   2e8d0:	cmp	r3, #0
   2e8d4:	movne	r1, r2
   2e8d8:	mov	r3, r2
   2e8dc:	ldr	r4, [sp, #152]	; 0x98
   2e8e0:	ldr	lr, [sp, #172]	; 0xac
   2e8e4:	ldr	r0, [sp, #112]	; 0x70
   2e8e8:	addne	r3, r2, #4
   2e8ec:	addne	r6, r1, r9
   2e8f0:	bne	2e9cc <__assert_fail@plt+0x1d02c>
   2e8f4:	add	r1, r3, #4
   2e8f8:	add	ip, r3, r9
   2e8fc:	ldr	r3, [r1, #-4]
   2e900:	add	r2, r2, #8
   2e904:	cmn	r3, #1
   2e908:	add	r3, r0, r3
   2e90c:	ldrne	lr, [r2, #-4]
   2e910:	strne	r3, [r1, #-4]
   2e914:	addne	r3, r0, lr
   2e918:	strne	r3, [r2, #-4]
   2e91c:	cmp	ip, r2
   2e920:	add	r1, r1, #8
   2e924:	bne	2e8fc <__assert_fail@plt+0x1cf5c>
   2e928:	ldr	r3, [sp, #96]	; 0x60
   2e92c:	cmp	r3, #0
   2e930:	ble	2e964 <__assert_fail@plt+0x1cfc4>
   2e934:	ldr	r2, [sp, #56]	; 0x38
   2e938:	ldr	r1, [sp, #468]	; 0x1d4
   2e93c:	add	r2, r3, r2
   2e940:	ldr	r3, [sp, #468]	; 0x1d4
   2e944:	add	r2, r1, r2, lsl #3
   2e948:	add	r3, r3, r9
   2e94c:	mvn	r1, #0
   2e950:	str	r1, [r3]
   2e954:	str	r1, [r3, #4]
   2e958:	add	r3, r3, #8
   2e95c:	cmp	r3, r2
   2e960:	bne	2e950 <__assert_fail@plt+0x1cfb0>
   2e964:	ldr	r3, [sp, #28]
   2e968:	ldr	r3, [r3, #132]	; 0x84
   2e96c:	cmp	r3, #0
   2e970:	beq	2d6b8 <__assert_fail@plt+0x1bd18>
   2e974:	ldr	r0, [sp, #468]	; 0x1d4
   2e978:	mov	ip, #0
   2e97c:	mov	lr, r0
   2e980:	b	2e9b8 <__assert_fail@plt+0x1d018>
   2e984:	ldr	r1, [r3]
   2e988:	cmp	ip, r1
   2e98c:	add	r4, r1, #1
   2e990:	mov	ip, r2
   2e994:	beq	2e9b0 <__assert_fail@plt+0x1d010>
   2e998:	ldr	r2, [lr, r4, lsl #3]
   2e99c:	str	r2, [r0, #8]
   2e9a0:	ldr	r2, [r3]
   2e9a4:	add	r2, lr, r2, lsl #3
   2e9a8:	ldr	r2, [r2, #12]
   2e9ac:	str	r2, [r0, #12]
   2e9b0:	add	r3, r3, #4
   2e9b4:	add	r0, r0, #8
   2e9b8:	ldr	r1, [sp, #56]	; 0x38
   2e9bc:	add	r2, ip, #1
   2e9c0:	cmp	r2, r1
   2e9c4:	bne	2e984 <__assert_fail@plt+0x1cfe4>
   2e9c8:	b	2d6b8 <__assert_fail@plt+0x1bd18>
   2e9cc:	ldr	r1, [r3, #-4]
   2e9d0:	cmn	r1, #1
   2e9d4:	beq	2ea08 <__assert_fail@plt+0x1d068>
   2e9d8:	cmp	r1, r5
   2e9dc:	moveq	r1, lr
   2e9e0:	ldrne	r1, [r4, r1, lsl #2]
   2e9e4:	str	r1, [r3, #-4]
   2e9e8:	ldr	ip, [r2, #4]
   2e9ec:	add	r1, r1, r0
   2e9f0:	cmp	r5, ip
   2e9f4:	moveq	ip, lr
   2e9f8:	ldrne	ip, [r4, ip, lsl #2]
   2e9fc:	str	r1, [r3, #-4]
   2ea00:	add	ip, ip, r0
   2ea04:	str	ip, [r2, #4]
   2ea08:	add	r2, r2, #8
   2ea0c:	cmp	r2, r6
   2ea10:	add	r3, r3, #8
   2ea14:	bne	2e9cc <__assert_fail@plt+0x1d02c>
   2ea18:	b	2e928 <__assert_fail@plt+0x1cf88>
   2ea1c:	mov	r2, r5
   2ea20:	mov	r3, #0
   2ea24:	b	2ea38 <__assert_fail@plt+0x1d098>
   2ea28:	ldr	r1, [sp, #56]	; 0x38
   2ea2c:	add	r2, r2, #8
   2ea30:	cmp	r1, r3
   2ea34:	beq	2f10c <__assert_fail@plt+0x1d76c>
   2ea38:	ldr	r1, [r5, r3, lsl #3]
   2ea3c:	add	r3, r3, #1
   2ea40:	cmp	r1, #0
   2ea44:	blt	2ea28 <__assert_fail@plt+0x1d088>
   2ea48:	ldr	r1, [r2, #4]
   2ea4c:	cmn	r1, #1
   2ea50:	bne	2ea28 <__assert_fail@plt+0x1d088>
   2ea54:	ldr	r3, [sl]
   2ea58:	cmp	r3, #0
   2ea5c:	beq	2f10c <__assert_fail@plt+0x1d76c>
   2ea60:	sub	r3, r3, #1
   2ea64:	ldr	ip, [sl, #8]
   2ea68:	add	lr, r3, r3, lsl #1
   2ea6c:	str	r3, [sl]
   2ea70:	add	r4, ip, lr, lsl #3
   2ea74:	mov	r2, r9
   2ea78:	ldr	r1, [r4, #8]
   2ea7c:	mov	r0, r5
   2ea80:	ldr	r7, [ip, lr, lsl #3]
   2ea84:	bl	115d4 <memcpy@plt>
   2ea88:	ldr	r1, [r4, #8]
   2ea8c:	mov	r2, r9
   2ea90:	add	r1, r1, r9
   2ea94:	mov	r0, r8
   2ea98:	bl	115d4 <memcpy@plt>
   2ea9c:	ldr	r0, [sp, #124]	; 0x7c
   2eaa0:	bl	1f018 <__assert_fail@plt+0xd678>
   2eaa4:	ldr	r0, [r4, #8]
   2eaa8:	bl	1f018 <__assert_fail@plt+0xd678>
   2eaac:	add	r3, r4, #12
   2eab0:	ldr	fp, [r4, #4]
   2eab4:	ldm	r3, {r0, r1, r2}
   2eab8:	ldr	r3, [sp, #16]
   2eabc:	str	fp, [sp, #24]
   2eac0:	lsl	r6, fp, #3
   2eac4:	stm	r3, {r0, r1, r2}
   2eac8:	b	2def8 <__assert_fail@plt+0x1c558>
   2eacc:	ldrb	r1, [r3, #6]
   2ead0:	tst	r1, #16
   2ead4:	bne	2ecf4 <__assert_fail@plt+0x1d354>
   2ead8:	cmp	r2, #4
   2eadc:	beq	2ec6c <__assert_fail@plt+0x1d2cc>
   2eae0:	ldr	r0, [sp, #144]	; 0x90
   2eae4:	sub	r1, r2, #1
   2eae8:	ldrb	r2, [r0, r7]
   2eaec:	cmp	r1, #6
   2eaf0:	ldrls	pc, [pc, r1, lsl #2]
   2eaf4:	b	2e79c <__assert_fail@plt+0x1cdfc>
   2eaf8:	andeq	lr, r2, ip, asr ip
   2eafc:	muleq	r2, ip, r7
   2eb00:	andeq	lr, r2, ip, lsr ip
   2eb04:	muleq	r2, ip, r7
   2eb08:	andeq	lr, r2, ip, lsl fp
   2eb0c:	muleq	r2, ip, r7
   2eb10:	andeq	lr, r2, r4, lsl fp
   2eb14:	tst	r2, #128	; 0x80
   2eb18:	bne	2e79c <__assert_fail@plt+0x1cdfc>
   2eb1c:	cmp	r2, #10
   2eb20:	beq	2ed94 <__assert_fail@plt+0x1d3f4>
   2eb24:	cmp	r2, #0
   2eb28:	bne	2eb3c <__assert_fail@plt+0x1d19c>
   2eb2c:	ldr	r2, [sp, #224]	; 0xe0
   2eb30:	ldr	r2, [r2, #128]	; 0x80
   2eb34:	tst	r2, #128	; 0x80
   2eb38:	bne	2e79c <__assert_fail@plt+0x1cdfc>
   2eb3c:	ldr	r6, [r3, #4]
   2eb40:	ldr	r3, [pc, #-2536]	; 2e160 <__assert_fail@plt+0x1c7c0>
   2eb44:	tst	r6, r3
   2eb48:	beq	2eb9c <__assert_fail@plt+0x1d1fc>
   2eb4c:	ldr	r2, [sp, #228]	; 0xe4
   2eb50:	mov	r1, r7
   2eb54:	add	r0, sp, #140	; 0x8c
   2eb58:	bl	20340 <__assert_fail@plt+0xe9a0>
   2eb5c:	ldr	r3, [pc, #-2560]	; 2e164 <__assert_fail@plt+0x1c7c4>
   2eb60:	and	r3, r3, r6, lsr #8
   2eb64:	tst	r3, #4
   2eb68:	beq	2ed80 <__assert_fail@plt+0x1d3e0>
   2eb6c:	tst	r0, #1
   2eb70:	beq	2e79c <__assert_fail@plt+0x1cdfc>
   2eb74:	tst	r3, #8
   2eb78:	bne	2e79c <__assert_fail@plt+0x1cdfc>
   2eb7c:	tst	r3, #32
   2eb80:	beq	2eb8c <__assert_fail@plt+0x1d1ec>
   2eb84:	tst	r0, #2
   2eb88:	beq	2e79c <__assert_fail@plt+0x1cdfc>
   2eb8c:	tst	r3, #128	; 0x80
   2eb90:	beq	2eb9c <__assert_fail@plt+0x1d1fc>
   2eb94:	tst	r0, #8
   2eb98:	beq	2e79c <__assert_fail@plt+0x1cdfc>
   2eb9c:	ldr	r3, [r4, #12]
   2eba0:	ldr	r2, [sp, #24]
   2eba4:	add	r7, r7, #1
   2eba8:	ldr	fp, [r3, r2, lsl #2]
   2ebac:	cmp	sl, #0
   2ebb0:	beq	2ec30 <__assert_fail@plt+0x1d290>
   2ebb4:	ldr	r3, [sp, #232]	; 0xe8
   2ebb8:	cmp	r7, r3
   2ebbc:	bgt	2e7a4 <__assert_fail@plt+0x1ce04>
   2ebc0:	ldr	r3, [sp, #240]	; 0xf0
   2ebc4:	ldr	r3, [r3, r7, lsl #2]
   2ebc8:	cmp	r3, #0
   2ebcc:	beq	2e7a4 <__assert_fail@plt+0x1ce04>
   2ebd0:	ldr	r2, [r3, #8]
   2ebd4:	cmp	r2, #0
   2ebd8:	ble	2e7a4 <__assert_fail@plt+0x1ce04>
   2ebdc:	ldr	ip, [r3, #12]
   2ebe0:	sub	r2, r2, #1
   2ebe4:	mov	r0, #0
   2ebe8:	cmp	r0, r2
   2ebec:	bcs	2ec24 <__assert_fail@plt+0x1d284>
   2ebf0:	add	r3, r0, r2
   2ebf4:	lsr	r3, r3, #1
   2ebf8:	b	2ec10 <__assert_fail@plt+0x1d270>
   2ebfc:	add	r1, r3, r0
   2ec00:	cmp	r3, r0
   2ec04:	mov	r2, r3
   2ec08:	lsr	r3, r1, #1
   2ec0c:	bls	2ec24 <__assert_fail@plt+0x1d284>
   2ec10:	ldr	r1, [ip, r3, lsl #2]
   2ec14:	cmp	r1, fp
   2ec18:	bge	2ebfc <__assert_fail@plt+0x1d25c>
   2ec1c:	add	r0, r3, #1
   2ec20:	b	2ebe8 <__assert_fail@plt+0x1d248>
   2ec24:	ldr	r3, [ip, r0, lsl #2]
   2ec28:	cmp	r3, fp
   2ec2c:	bne	2e7a4 <__assert_fail@plt+0x1ce04>
   2ec30:	mov	r3, #0
   2ec34:	str	r3, [sp, #120]	; 0x78
   2ec38:	b	2e78c <__assert_fail@plt+0x1cdec>
   2ec3c:	ldr	r1, [r3]
   2ec40:	asr	r0, r2, #5
   2ec44:	and	r2, r2, #31
   2ec48:	ldr	r1, [r1, r0, lsl #2]
   2ec4c:	lsr	r2, r1, r2
   2ec50:	tst	r2, #1
   2ec54:	bne	2eb3c <__assert_fail@plt+0x1d19c>
   2ec58:	b	2e79c <__assert_fail@plt+0x1cdfc>
   2ec5c:	ldrb	r1, [r3]
   2ec60:	cmp	r1, r2
   2ec64:	bne	2e79c <__assert_fail@plt+0x1cdfc>
   2ec68:	b	2eb3c <__assert_fail@plt+0x1d19c>
   2ec6c:	ldr	r3, [r3]
   2ec70:	ldr	r2, [sp, #56]	; 0x38
   2ec74:	add	r3, r3, #1
   2ec78:	cmp	r2, r3
   2ec7c:	ble	2ed74 <__assert_fail@plt+0x1d3d4>
   2ec80:	add	r2, r5, r3, lsl #3
   2ec84:	ldr	r0, [r5, r3, lsl #3]
   2ec88:	ldr	r2, [r2, #4]
   2ec8c:	cmp	sl, #0
   2ec90:	sub	r3, r2, r0
   2ec94:	beq	2ed20 <__assert_fail@plt+0x1d380>
   2ec98:	cmn	r0, #1
   2ec9c:	beq	2e7a4 <__assert_fail@plt+0x1ce04>
   2eca0:	cmn	r2, #1
   2eca4:	beq	2e7a4 <__assert_fail@plt+0x1ce04>
   2eca8:	cmp	r3, #0
   2ecac:	beq	2ed28 <__assert_fail@plt+0x1d388>
   2ecb0:	ldr	r2, [sp, #168]	; 0xa8
   2ecb4:	ldr	r1, [sp, #144]	; 0x90
   2ecb8:	sub	r2, r2, r7
   2ecbc:	cmp	r3, r2
   2ecc0:	bgt	2e7a4 <__assert_fail@plt+0x1ce04>
   2ecc4:	add	r0, r1, r0
   2ecc8:	mov	r2, r3
   2eccc:	add	r1, r1, r7
   2ecd0:	str	r3, [sp, #24]
   2ecd4:	bl	1161c <memcmp@plt>
   2ecd8:	ldr	r3, [sp, #24]
   2ecdc:	cmp	r0, #0
   2ece0:	bne	2e7a4 <__assert_fail@plt+0x1ce04>
   2ece4:	ldr	r2, [r4, #12]
   2ece8:	add	r7, r7, r3
   2ecec:	ldr	fp, [r2, fp, lsl #2]
   2ecf0:	b	2ebac <__assert_fail@plt+0x1d20c>
   2ecf4:	add	r3, sp, #140	; 0x8c
   2ecf8:	str	r7, [sp]
   2ecfc:	mov	r2, fp
   2ed00:	add	r1, r4, #128	; 0x80
   2ed04:	bl	21e1c <__assert_fail@plt+0x1047c>
   2ed08:	subs	r3, r0, #0
   2ed0c:	bne	2ece4 <__assert_fail@plt+0x1d344>
   2ed10:	ldr	r3, [r4]
   2ed14:	add	r3, r3, r6
   2ed18:	ldrb	r2, [r3, #4]
   2ed1c:	b	2eae0 <__assert_fail@plt+0x1d140>
   2ed20:	cmp	r3, #0
   2ed24:	bne	2ece4 <__assert_fail@plt+0x1d344>
   2ed28:	mov	r1, fp
   2ed2c:	ldr	r0, [sp, #16]
   2ed30:	bl	1fdc4 <__assert_fail@plt+0xe424>
   2ed34:	cmp	r0, #0
   2ed38:	beq	2ee3c <__assert_fail@plt+0x1d49c>
   2ed3c:	add	fp, fp, fp, lsl #1
   2ed40:	ldr	r3, [r4, #20]
   2ed44:	ldr	r1, [sp, #240]	; 0xf0
   2ed48:	add	r3, r3, fp, lsl #2
   2ed4c:	ldr	r2, [r3, #8]
   2ed50:	ldr	r3, [r1, r7, lsl #2]
   2ed54:	ldr	fp, [r2]
   2ed58:	add	r1, r3, #12
   2ed5c:	mov	r2, fp
   2ed60:	ldr	r0, [r3, #8]
   2ed64:	bl	1fee0 <__assert_fail@plt+0xe540>
   2ed68:	cmp	r0, #0
   2ed6c:	beq	2ed10 <__assert_fail@plt+0x1d370>
   2ed70:	b	2e78c <__assert_fail@plt+0x1cdec>
   2ed74:	cmp	sl, #0
   2ed78:	bne	2e7a4 <__assert_fail@plt+0x1ce04>
   2ed7c:	b	2ed28 <__assert_fail@plt+0x1d388>
   2ed80:	tst	r3, #8
   2ed84:	beq	2eb7c <__assert_fail@plt+0x1d1dc>
   2ed88:	tst	r0, #1
   2ed8c:	beq	2eb7c <__assert_fail@plt+0x1d1dc>
   2ed90:	b	2e79c <__assert_fail@plt+0x1cdfc>
   2ed94:	ldr	r2, [sp, #224]	; 0xe0
   2ed98:	ldr	r2, [r2, #128]	; 0x80
   2ed9c:	tst	r2, #64	; 0x40
   2eda0:	bne	2eb3c <__assert_fail@plt+0x1d19c>
   2eda4:	b	2e79c <__assert_fail@plt+0x1cdfc>
   2eda8:	mov	r2, fp
   2edac:	add	r1, sp, #124	; 0x7c
   2edb0:	ldr	r0, [sp, #120]	; 0x78
   2edb4:	bl	1fee0 <__assert_fail@plt+0xe540>
   2edb8:	cmp	r0, #0
   2edbc:	bne	2f084 <__assert_fail@plt+0x1d6e4>
   2edc0:	cmp	sl, #0
   2edc4:	beq	2e78c <__assert_fail@plt+0x1cdec>
   2edc8:	ldr	r6, [sl]
   2edcc:	ldr	r3, [sl, #4]
   2edd0:	add	r2, r6, #1
   2edd4:	cmp	r2, r3
   2edd8:	str	r2, [sl]
   2eddc:	ldrne	r2, [sl, #8]
   2ede0:	beq	2eebc <__assert_fail@plt+0x1d51c>
   2ede4:	add	r3, r6, r6, lsl #1
   2ede8:	ldr	r0, [sp, #32]
   2edec:	add	r6, r2, r3, lsl #3
   2edf0:	str	r7, [r2, r3, lsl #3]
   2edf4:	str	r4, [r6, #4]
   2edf8:	bl	1f110 <__assert_fail@plt+0xd770>
   2edfc:	cmp	r0, #0
   2ee00:	str	r0, [r6, #8]
   2ee04:	beq	2ee3c <__assert_fail@plt+0x1d49c>
   2ee08:	mov	r2, r9
   2ee0c:	mov	r1, r5
   2ee10:	bl	115d4 <memcpy@plt>
   2ee14:	ldr	r0, [r6, #8]
   2ee18:	mov	r2, r9
   2ee1c:	mov	r1, r8
   2ee20:	add	r0, r0, r9
   2ee24:	bl	115d4 <memcpy@plt>
   2ee28:	ldr	r1, [sp, #16]
   2ee2c:	add	r0, r6, #12
   2ee30:	bl	20034 <__assert_fail@plt+0xe694>
   2ee34:	cmp	r0, #0
   2ee38:	beq	2e78c <__assert_fail@plt+0x1cdec>
   2ee3c:	ldr	r0, [sp, #124]	; 0x7c
   2ee40:	ldr	r8, [sp, #12]
   2ee44:	bl	1f018 <__assert_fail@plt+0xd678>
   2ee48:	ldr	r0, [sp, #284]	; 0x11c
   2ee4c:	cmp	r0, r8
   2ee50:	beq	2ee58 <__assert_fail@plt+0x1d4b8>
   2ee54:	bl	1f018 <__assert_fail@plt+0xd678>
   2ee58:	mov	r4, #0
   2ee5c:	mov	r3, #16
   2ee60:	cmp	sl, #0
   2ee64:	str	r8, [sp, #284]	; 0x11c
   2ee68:	str	r4, [sp, #276]	; 0x114
   2ee6c:	str	r3, [sp, #280]	; 0x118
   2ee70:	beq	2efa0 <__assert_fail@plt+0x1d600>
   2ee74:	ldr	r7, [sl]
   2ee78:	ldr	r6, [sl, #8]
   2ee7c:	cmp	r7, r4
   2ee80:	ble	2eea8 <__assert_fail@plt+0x1d508>
   2ee84:	mov	r5, r6
   2ee88:	ldr	r0, [r5, #20]
   2ee8c:	bl	1f018 <__assert_fail@plt+0xd678>
   2ee90:	add	r4, r4, #1
   2ee94:	ldr	r0, [r5, #8]
   2ee98:	bl	1f018 <__assert_fail@plt+0xd678>
   2ee9c:	cmp	r7, r4
   2eea0:	add	r5, r5, #24
   2eea4:	bne	2ee88 <__assert_fail@plt+0x1d4e8>
   2eea8:	mov	r0, r6
   2eeac:	bl	1f018 <__assert_fail@plt+0xd678>
   2eeb0:	mov	r3, #12
   2eeb4:	str	r3, [sp, #48]	; 0x30
   2eeb8:	b	2e300 <__assert_fail@plt+0x1c960>
   2eebc:	lsl	r3, r2, #1
   2eec0:	add	r2, r3, r2
   2eec4:	ldr	r0, [sl, #8]
   2eec8:	lsl	r1, r2, #4
   2eecc:	str	r3, [sp, #24]
   2eed0:	bl	1f190 <__assert_fail@plt+0xd7f0>
   2eed4:	subs	r2, r0, #0
   2eed8:	beq	2ee3c <__assert_fail@plt+0x1d49c>
   2eedc:	ldr	r3, [sp, #24]
   2eee0:	str	r2, [sl, #8]
   2eee4:	str	r3, [sl, #4]
   2eee8:	b	2ede4 <__assert_fail@plt+0x1d444>
   2eeec:	ldr	r3, [r1]
   2eef0:	ldr	r0, [sp, #56]	; 0x38
   2eef4:	add	r3, r3, #1
   2eef8:	cmp	r0, r3
   2eefc:	ble	2de84 <__assert_fail@plt+0x1c4e4>
   2ef00:	ldr	r0, [r5, r3, lsl #3]
   2ef04:	add	r2, r5, r3, lsl #3
   2ef08:	cmp	r0, r7
   2ef0c:	blt	2ef34 <__assert_fail@plt+0x1d594>
   2ef10:	ldrb	r1, [r1, #6]
   2ef14:	tst	r1, #8
   2ef18:	beq	2ef28 <__assert_fail@plt+0x1d588>
   2ef1c:	ldr	r3, [r8, r3, lsl #3]
   2ef20:	cmn	r3, #1
   2ef24:	bne	2f1cc <__assert_fail@plt+0x1d82c>
   2ef28:	str	r7, [r2, #4]
   2ef2c:	ldr	r2, [r5, #4]
   2ef30:	b	2de84 <__assert_fail@plt+0x1c4e4>
   2ef34:	str	r7, [r2, #4]
   2ef38:	mov	r1, r5
   2ef3c:	mov	r2, r9
   2ef40:	mov	r0, r8
   2ef44:	bl	115d4 <memcpy@plt>
   2ef48:	ldr	r2, [r5, #4]
   2ef4c:	b	2de84 <__assert_fail@plt+0x1c4e4>
   2ef50:	ldr	sl, [sp, #16]
   2ef54:	ldr	fp, [sp, #12]
   2ef58:	mov	r0, sl
   2ef5c:	bl	1f018 <__assert_fail@plt+0xd678>
   2ef60:	mov	r0, fp
   2ef64:	bl	1f018 <__assert_fail@plt+0xd678>
   2ef68:	mov	r0, #0
   2ef6c:	bl	1f018 <__assert_fail@plt+0xd678>
   2ef70:	mov	r7, #12
   2ef74:	b	2e094 <__assert_fail@plt+0x1c6f4>
   2ef78:	sub	r2, r2, r4
   2ef7c:	ldr	r1, [r5, #12]
   2ef80:	lsl	r2, r2, #2
   2ef84:	add	r0, r0, sl, lsl #2
   2ef88:	add	r1, r1, r4, lsl #2
   2ef8c:	bl	115d4 <memcpy@plt>
   2ef90:	ldr	r2, [r5, #8]
   2ef94:	sub	r4, r2, r4
   2ef98:	add	sl, sl, r4
   2ef9c:	b	2e56c <__assert_fail@plt+0x1cbcc>
   2efa0:	mov	r3, #12
   2efa4:	str	r3, [sp, #48]	; 0x30
   2efa8:	b	2e300 <__assert_fail@plt+0x1c960>
   2efac:	ldr	r3, [sp, #44]	; 0x2c
   2efb0:	mov	r1, #16
   2efb4:	str	r1, [sp, #280]	; 0x118
   2efb8:	ldr	r3, [r3]
   2efbc:	ldr	r1, [sp, #56]	; 0x38
   2efc0:	mov	ip, r3
   2efc4:	str	r3, [sp, #20]
   2efc8:	add	r3, sp, #116	; 0x74
   2efcc:	mov	r0, r3
   2efd0:	str	r3, [sp, #16]
   2efd4:	mov	r3, #0
   2efd8:	mov	sl, r3
   2efdc:	add	r8, sp, #288	; 0x120
   2efe0:	mov	r2, #2
   2efe4:	str	r3, [sp, #276]	; 0x114
   2efe8:	str	r8, [sp, #284]	; 0x11c
   2efec:	str	r3, [sp, #128]	; 0x80
   2eff0:	ldr	fp, [ip, #72]	; 0x48
   2eff4:	str	r3, [sp, #136]	; 0x88
   2eff8:	str	r3, [sp, #116]	; 0x74
   2effc:	str	r2, [sp, #132]	; 0x84
   2f000:	str	r3, [r0, #4]
   2f004:	str	r3, [r0, #8]
   2f008:	mov	r3, #8
   2f00c:	mov	r2, r8
   2f010:	add	r0, sp, #276	; 0x114
   2f014:	bl	31984 <__assert_fail@plt+0x1ffe4>
   2f018:	cmp	r0, #0
   2f01c:	bne	2de14 <__assert_fail@plt+0x1c474>
   2f020:	ldr	r0, [sp, #284]	; 0x11c
   2f024:	cmp	r0, r8
   2f028:	beq	2f030 <__assert_fail@plt+0x1d690>
   2f02c:	bl	1f018 <__assert_fail@plt+0xd678>
   2f030:	mov	r4, #0
   2f034:	mov	r3, #16
   2f038:	cmp	sl, #0
   2f03c:	str	r8, [sp, #284]	; 0x11c
   2f040:	str	r4, [sp, #276]	; 0x114
   2f044:	str	r3, [sp, #280]	; 0x118
   2f048:	beq	2efa0 <__assert_fail@plt+0x1d600>
   2f04c:	ldr	r7, [sl]
   2f050:	ldr	r6, [sl, #8]
   2f054:	cmp	r7, #0
   2f058:	ble	2eea8 <__assert_fail@plt+0x1d508>
   2f05c:	mov	r5, r6
   2f060:	ldr	r0, [r5, #20]
   2f064:	bl	1f018 <__assert_fail@plt+0xd678>
   2f068:	add	r4, r4, #1
   2f06c:	ldr	r0, [r5, #8]
   2f070:	bl	1f018 <__assert_fail@plt+0xd678>
   2f074:	cmp	r7, r4
   2f078:	add	r5, r5, #24
   2f07c:	bne	2f060 <__assert_fail@plt+0x1d6c0>
   2f080:	b	2eea8 <__assert_fail@plt+0x1d508>
   2f084:	mov	fp, r4
   2f088:	b	2e78c <__assert_fail@plt+0x1cdec>
   2f08c:	ldr	r0, [sp, #124]	; 0x7c
   2f090:	ldr	r8, [sp, #12]
   2f094:	bl	1f018 <__assert_fail@plt+0xd678>
   2f098:	ldr	r0, [sp, #284]	; 0x11c
   2f09c:	cmp	r0, r8
   2f0a0:	beq	2f0f4 <__assert_fail@plt+0x1d754>
   2f0a4:	bl	1f018 <__assert_fail@plt+0xd678>
   2f0a8:	ldr	r7, [sl]
   2f0ac:	mov	r3, #16
   2f0b0:	cmp	r7, #0
   2f0b4:	str	r4, [sp, #276]	; 0x114
   2f0b8:	ldrgt	r6, [sl, #8]
   2f0bc:	str	r8, [sp, #284]	; 0x11c
   2f0c0:	str	r3, [sp, #280]	; 0x118
   2f0c4:	movgt	r5, r6
   2f0c8:	ble	2f104 <__assert_fail@plt+0x1d764>
   2f0cc:	ldr	r0, [r5, #20]
   2f0d0:	bl	1f018 <__assert_fail@plt+0xd678>
   2f0d4:	add	r4, r4, #1
   2f0d8:	ldr	r0, [r5, #8]
   2f0dc:	bl	1f018 <__assert_fail@plt+0xd678>
   2f0e0:	cmp	r4, r7
   2f0e4:	add	r5, r5, #24
   2f0e8:	bne	2f0cc <__assert_fail@plt+0x1d72c>
   2f0ec:	mov	r0, r6
   2f0f0:	b	2e2f4 <__assert_fail@plt+0x1c954>
   2f0f4:	mov	r3, #16
   2f0f8:	str	r4, [sp, #276]	; 0x114
   2f0fc:	str	r8, [sp, #284]	; 0x11c
   2f100:	str	r3, [sp, #280]	; 0x118
   2f104:	ldr	r6, [sl, #8]
   2f108:	b	2f0ec <__assert_fail@plt+0x1d74c>
   2f10c:	ldr	r0, [sp, #124]	; 0x7c
   2f110:	ldr	r8, [sp, #12]
   2f114:	bl	1f018 <__assert_fail@plt+0xd678>
   2f118:	ldr	r0, [sp, #284]	; 0x11c
   2f11c:	cmp	r0, r8
   2f120:	bne	2e864 <__assert_fail@plt+0x1cec4>
   2f124:	b	2e868 <__assert_fail@plt+0x1cec8>
   2f128:	ldr	r0, [sp, #124]	; 0x7c
   2f12c:	ldr	r8, [sp, #12]
   2f130:	bl	1f018 <__assert_fail@plt+0xd678>
   2f134:	ldr	r0, [sp, #284]	; 0x11c
   2f138:	cmp	r0, r8
   2f13c:	beq	2f144 <__assert_fail@plt+0x1d7a4>
   2f140:	bl	1f018 <__assert_fail@plt+0xd678>
   2f144:	mov	r4, #0
   2f148:	mov	r3, #16
   2f14c:	cmp	sl, #0
   2f150:	str	r8, [sp, #284]	; 0x11c
   2f154:	str	r4, [sp, #276]	; 0x114
   2f158:	str	r3, [sp, #280]	; 0x118
   2f15c:	beq	2e8c0 <__assert_fail@plt+0x1cf20>
   2f160:	ldr	r6, [sl]
   2f164:	ldr	r7, [sl, #8]
   2f168:	cmp	r6, r4
   2f16c:	ble	2e8b8 <__assert_fail@plt+0x1cf18>
   2f170:	mov	r5, r7
   2f174:	ldr	r0, [r5, #20]
   2f178:	bl	1f018 <__assert_fail@plt+0xd678>
   2f17c:	add	r4, r4, #1
   2f180:	ldr	r0, [r5, #8]
   2f184:	bl	1f018 <__assert_fail@plt+0xd678>
   2f188:	cmp	r4, r6
   2f18c:	add	r5, r5, #24
   2f190:	bne	2f174 <__assert_fail@plt+0x1d7d4>
   2f194:	b	2e8b8 <__assert_fail@plt+0x1cf18>
   2f198:	add	sl, sp, #128	; 0x80
   2f19c:	b	2f008 <__assert_fail@plt+0x1d668>
   2f1a0:	ldr	r3, [r0, fp, lsl #3]
   2f1a4:	ldr	r1, [sp, #56]	; 0x38
   2f1a8:	add	r3, r3, #1
   2f1ac:	cmp	r1, r3
   2f1b0:	ble	2de84 <__assert_fail@plt+0x1c4e4>
   2f1b4:	add	r2, r5, r3, lsl #3
   2f1b8:	str	r7, [r5, r3, lsl #3]
   2f1bc:	mvn	r3, #0
   2f1c0:	str	r3, [r2, #4]
   2f1c4:	ldr	r2, [r5, #4]
   2f1c8:	b	2de84 <__assert_fail@plt+0x1c4e4>
   2f1cc:	mov	r2, r9
   2f1d0:	mov	r1, r8
   2f1d4:	mov	r0, r5
   2f1d8:	bl	115d4 <memcpy@plt>
   2f1dc:	ldr	r2, [r5, #4]
   2f1e0:	b	2de84 <__assert_fail@plt+0x1c4e4>
   2f1e4:	ldr	r3, [pc, #96]	; 2f24c <__assert_fail@plt+0x1d8ac>
   2f1e8:	push	{r4, lr}
   2f1ec:	mov	lr, r2
   2f1f0:	ldr	r3, [r3]
   2f1f4:	ldrb	ip, [lr, #28]
   2f1f8:	mov	r2, r1
   2f1fc:	mov	r1, r0
   2f200:	lsr	r0, r3, #21
   2f204:	and	r4, r0, #16
   2f208:	and	r0, ip, #239	; 0xef
   2f20c:	orr	r0, r0, r4
   2f210:	orr	r0, r0, #128	; 0x80
   2f214:	strb	r0, [lr, #28]
   2f218:	mov	r0, lr
   2f21c:	bl	295e8 <__assert_fail@plt+0x17c48>
   2f220:	subs	r3, r0, #0
   2f224:	popeq	{r4, pc}
   2f228:	ldr	r1, [pc, #32]	; 2f250 <__assert_fail@plt+0x1d8b0>
   2f22c:	mov	r2, #5
   2f230:	add	r3, r1, r3, lsl #2
   2f234:	add	r1, r1, #32
   2f238:	ldr	r3, [r3, #416]	; 0x1a0
   2f23c:	mov	r0, #0
   2f240:	add	r1, r1, r3
   2f244:	pop	{r4, lr}
   2f248:	b	11628 <dcgettext@plt>
   2f24c:	ldrdeq	r5, [r4], -r8
   2f250:	andeq	r3, r3, r4, lsl #28
   2f254:	ldr	r3, [pc, #12]	; 2f268 <__assert_fail@plt+0x1d8c8>
   2f258:	ldr	r2, [r3]
   2f25c:	str	r0, [r3]
   2f260:	mov	r0, r2
   2f264:	bx	lr
   2f268:	ldrdeq	r5, [r4], -r8
   2f26c:	push	{r4, r5, r6, lr}
   2f270:	mov	r2, #256	; 0x100
   2f274:	ldr	r5, [r0]
   2f278:	ldr	r6, [r0, #16]
   2f27c:	mov	r4, r0
   2f280:	mov	r1, #0
   2f284:	mov	r0, r6
   2f288:	bl	11814 <memset@plt>
   2f28c:	ldr	r1, [r5, #36]	; 0x24
   2f290:	mov	r3, r6
   2f294:	add	r2, r1, #12
   2f298:	mov	r0, r4
   2f29c:	add	r1, r1, #8
   2f2a0:	bl	219ec <__assert_fail@plt+0x1004c>
   2f2a4:	ldr	r0, [r5, #40]	; 0x28
   2f2a8:	ldr	r3, [r5, #36]	; 0x24
   2f2ac:	cmp	r3, r0
   2f2b0:	beq	2f2cc <__assert_fail@plt+0x1d92c>
   2f2b4:	add	r2, r0, #12
   2f2b8:	add	r1, r0, #8
   2f2bc:	mov	r3, r6
   2f2c0:	mov	r0, r4
   2f2c4:	bl	219ec <__assert_fail@plt+0x1004c>
   2f2c8:	ldr	r0, [r5, #36]	; 0x24
   2f2cc:	ldr	r1, [r5, #44]	; 0x2c
   2f2d0:	cmp	r1, r0
   2f2d4:	beq	2f2f0 <__assert_fail@plt+0x1d950>
   2f2d8:	add	r2, r1, #12
   2f2dc:	mov	r0, r4
   2f2e0:	mov	r3, r6
   2f2e4:	add	r1, r1, #8
   2f2e8:	bl	219ec <__assert_fail@plt+0x1004c>
   2f2ec:	ldr	r0, [r5, #36]	; 0x24
   2f2f0:	ldr	r1, [r5, #48]	; 0x30
   2f2f4:	cmp	r1, r0
   2f2f8:	beq	2f310 <__assert_fail@plt+0x1d970>
   2f2fc:	add	r2, r1, #12
   2f300:	mov	r3, r6
   2f304:	add	r1, r1, #8
   2f308:	mov	r0, r4
   2f30c:	bl	219ec <__assert_fail@plt+0x1004c>
   2f310:	ldrb	r3, [r4, #28]
   2f314:	mov	r0, #0
   2f318:	orr	r3, r3, #8
   2f31c:	strb	r3, [r4, #28]
   2f320:	pop	{r4, r5, r6, pc}
   2f324:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f328:	cmp	r3, r2
   2f32c:	mov	r5, r3
   2f330:	sub	sp, sp, #52	; 0x34
   2f334:	movle	r3, #0
   2f338:	movgt	r3, #1
   2f33c:	orrs	r3, r3, r5, lsr #31
   2f340:	ldrb	r3, [sp, #100]	; 0x64
   2f344:	ldr	ip, [sp, #88]	; 0x58
   2f348:	ldr	sl, [r0]
   2f34c:	add	r8, r5, ip
   2f350:	ldr	r7, [sp, #96]	; 0x60
   2f354:	str	r3, [sp, #32]
   2f358:	bne	2f604 <__assert_fail@plt+0x1dc64>
   2f35c:	cmp	r8, r2
   2f360:	bgt	2f5fc <__assert_fail@plt+0x1dc5c>
   2f364:	cmp	ip, #0
   2f368:	cmpge	r5, r8
   2f36c:	movgt	lr, #1
   2f370:	movle	lr, #0
   2f374:	bgt	2f5fc <__assert_fail@plt+0x1dc5c>
   2f378:	cmp	r8, #0
   2f37c:	blt	2f698 <__assert_fail@plt+0x1dcf8>
   2f380:	cmp	r5, r8
   2f384:	movgt	lr, #0
   2f388:	movle	lr, #1
   2f38c:	ands	r3, lr, ip, lsr #31
   2f390:	movne	r8, #0
   2f394:	ldr	lr, [pc, #812]	; 2f6c8 <__assert_fail@plt+0x1dd28>
   2f398:	ldr	r4, [pc, #812]	; 2f6cc <__assert_fail@plt+0x1dd2c>
   2f39c:	cmp	lr, #0
   2f3a0:	mov	ip, #1
   2f3a4:	moveq	ip, lr
   2f3a8:	cmp	r4, #0
   2f3ac:	mov	lr, #1
   2f3b0:	moveq	lr, r4
   2f3b4:	str	r2, [sp, #40]	; 0x28
   2f3b8:	orr	r2, ip, lr
   2f3bc:	ands	r3, r2, #255	; 0xff
   2f3c0:	str	r1, [sp, #44]	; 0x2c
   2f3c4:	mov	r6, r0
   2f3c8:	str	r3, [sp, #28]
   2f3cc:	beq	2f3d8 <__assert_fail@plt+0x1da38>
   2f3d0:	add	r0, sl, #136	; 0x88
   2f3d4:	bl	115a4 <pthread_mutex_lock@plt>
   2f3d8:	ldrb	r2, [r6, #28]
   2f3dc:	cmp	r8, r5
   2f3e0:	lsr	fp, r2, #5
   2f3e4:	and	r3, fp, #3
   2f3e8:	str	r3, [sp, #36]	; 0x24
   2f3ec:	bgt	2f4a0 <__assert_fail@plt+0x1db00>
   2f3f0:	lsr	r1, r2, #4
   2f3f4:	and	r1, r1, #1
   2f3f8:	cmp	r7, #0
   2f3fc:	orreq	r1, r1, #1
   2f400:	cmp	r1, #0
   2f404:	bne	2f6a0 <__assert_fail@plt+0x1dd00>
   2f408:	and	r2, r2, #6
   2f40c:	cmp	r2, #4
   2f410:	ldrne	r0, [r6, #24]
   2f414:	beq	2f668 <__assert_fail@plt+0x1dcc8>
   2f418:	add	fp, r0, #1
   2f41c:	mov	r4, fp
   2f420:	lsl	r0, fp, #3
   2f424:	bl	1f110 <__assert_fail@plt+0xd770>
   2f428:	subs	r9, r0, #0
   2f42c:	beq	2f614 <__assert_fail@plt+0x1dc74>
   2f430:	ldr	r3, [sp, #36]	; 0x24
   2f434:	str	r9, [sp, #12]
   2f438:	str	r3, [sp, #16]
   2f43c:	ldr	r3, [sp, #92]	; 0x5c
   2f440:	str	fp, [sp, #8]
   2f444:	str	r3, [sp, #4]
   2f448:	str	r8, [sp]
   2f44c:	ldr	r2, [sp, #40]	; 0x28
   2f450:	ldr	r1, [sp, #44]	; 0x2c
   2f454:	mov	r3, r5
   2f458:	mov	r0, r6
   2f45c:	bl	2cee0 <__assert_fail@plt+0x1b540>
   2f460:	cmp	r0, #0
   2f464:	beq	2f4c4 <__assert_fail@plt+0x1db24>
   2f468:	cmp	r0, #1
   2f46c:	mvneq	r5, #0
   2f470:	beq	2f478 <__assert_fail@plt+0x1dad8>
   2f474:	mvn	r5, #1
   2f478:	mov	r0, r9
   2f47c:	bl	1f018 <__assert_fail@plt+0xd678>
   2f480:	ldr	r3, [sp, #28]
   2f484:	cmp	r3, #0
   2f488:	beq	2f494 <__assert_fail@plt+0x1daf4>
   2f48c:	add	r0, sl, #136	; 0x88
   2f490:	bl	114f0 <pthread_mutex_unlock@plt>
   2f494:	mov	r0, r5
   2f498:	add	sp, sp, #52	; 0x34
   2f49c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f4a0:	ldr	r1, [r6, #16]
   2f4a4:	cmp	r1, #0
   2f4a8:	beq	2f3f0 <__assert_fail@plt+0x1da50>
   2f4ac:	tst	r2, #8
   2f4b0:	bne	2f3f0 <__assert_fail@plt+0x1da50>
   2f4b4:	mov	r0, r6
   2f4b8:	bl	2f26c <__assert_fail@plt+0x1d8cc>
   2f4bc:	ldrb	r2, [r6, #28]
   2f4c0:	b	2f3f0 <__assert_fail@plt+0x1da50>
   2f4c4:	cmp	r7, #0
   2f4c8:	beq	2f574 <__assert_fail@plt+0x1dbd4>
   2f4cc:	ldrb	r8, [r6, #28]
   2f4d0:	add	fp, r4, #1
   2f4d4:	lsr	r8, r8, #1
   2f4d8:	ands	r8, r8, #3
   2f4dc:	beq	2f61c <__assert_fail@plt+0x1dc7c>
   2f4e0:	cmp	r8, #1
   2f4e4:	ldr	r2, [r7]
   2f4e8:	movne	r8, #2
   2f4ec:	beq	2f590 <__assert_fail@plt+0x1dbf0>
   2f4f0:	cmp	r4, #0
   2f4f4:	ble	2f6b4 <__assert_fail@plt+0x1dd14>
   2f4f8:	ldmib	r7, {r1, r2}
   2f4fc:	mov	r3, r9
   2f500:	add	ip, r9, r4, lsl #3
   2f504:	sub	r1, r1, #4
   2f508:	sub	r2, r2, #4
   2f50c:	ldr	r0, [r3]
   2f510:	add	r3, r3, #8
   2f514:	str	r0, [r1, #4]!
   2f518:	ldr	r0, [r3, #-4]
   2f51c:	cmp	ip, r3
   2f520:	str	r0, [r2, #4]!
   2f524:	bne	2f50c <__assert_fail@plt+0x1db6c>
   2f528:	ldr	r2, [r7]
   2f52c:	mov	r3, r4
   2f530:	cmp	r3, r2
   2f534:	bcs	2f55c <__assert_fail@plt+0x1dbbc>
   2f538:	ldmib	r7, {r0, r1}
   2f53c:	mvn	r2, #0
   2f540:	str	r2, [r1, r3, lsl #2]
   2f544:	str	r2, [r0, r3, lsl #2]
   2f548:	ldr	r3, [r7]
   2f54c:	add	r4, r4, #1
   2f550:	cmp	r4, r3
   2f554:	mov	r3, r4
   2f558:	bcc	2f540 <__assert_fail@plt+0x1dba0>
   2f55c:	ldrb	r3, [r6, #28]
   2f560:	bic	r3, r3, #6
   2f564:	orr	r8, r3, r8, lsl #1
   2f568:	tst	r8, #6
   2f56c:	strb	r8, [r6, #28]
   2f570:	beq	2f474 <__assert_fail@plt+0x1dad4>
   2f574:	ldr	r3, [sp, #32]
   2f578:	cmp	r3, #0
   2f57c:	ldrne	r3, [r9, #4]
   2f580:	subne	r5, r3, r5
   2f584:	bne	2f478 <__assert_fail@plt+0x1dad8>
   2f588:	ldr	r5, [r9]
   2f58c:	b	2f478 <__assert_fail@plt+0x1dad8>
   2f590:	cmp	r2, fp
   2f594:	bcs	2f4f0 <__assert_fail@plt+0x1db50>
   2f598:	lsl	r2, fp, #2
   2f59c:	mov	r1, r2
   2f5a0:	ldr	r0, [r7, #4]
   2f5a4:	str	r2, [sp, #40]	; 0x28
   2f5a8:	bl	1f190 <__assert_fail@plt+0xd7f0>
   2f5ac:	subs	r3, r0, #0
   2f5b0:	str	r3, [sp, #36]	; 0x24
   2f5b4:	beq	2f6c0 <__assert_fail@plt+0x1dd20>
   2f5b8:	ldr	r2, [sp, #40]	; 0x28
   2f5bc:	ldr	r0, [r7, #8]
   2f5c0:	mov	r1, r2
   2f5c4:	bl	1f190 <__assert_fail@plt+0xd7f0>
   2f5c8:	ldr	r3, [sp, #36]	; 0x24
   2f5cc:	subs	r2, r0, #0
   2f5d0:	strne	r2, [r7, #8]
   2f5d4:	strne	r3, [r7, #4]
   2f5d8:	strne	fp, [r7]
   2f5dc:	movne	r2, fp
   2f5e0:	bne	2f4f0 <__assert_fail@plt+0x1db50>
   2f5e4:	mov	r0, r3
   2f5e8:	str	r2, [sp, #36]	; 0x24
   2f5ec:	bl	1f018 <__assert_fail@plt+0xd678>
   2f5f0:	ldr	r2, [sp, #36]	; 0x24
   2f5f4:	mov	r8, r2
   2f5f8:	b	2f55c <__assert_fail@plt+0x1dbbc>
   2f5fc:	mov	r8, r2
   2f600:	b	2f394 <__assert_fail@plt+0x1d9f4>
   2f604:	mvn	r5, #0
   2f608:	mov	r0, r5
   2f60c:	add	sp, sp, #52	; 0x34
   2f610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f614:	mvn	r5, #1
   2f618:	b	2f480 <__assert_fail@plt+0x1dae0>
   2f61c:	lsl	r8, fp, #2
   2f620:	mov	r0, r8
   2f624:	bl	1f110 <__assert_fail@plt+0xd770>
   2f628:	cmp	r0, #0
   2f62c:	str	r0, [r7, #4]
   2f630:	beq	2f6c0 <__assert_fail@plt+0x1dd20>
   2f634:	mov	r0, r8
   2f638:	str	fp, [sp, #36]	; 0x24
   2f63c:	bl	1f110 <__assert_fail@plt+0xd770>
   2f640:	ldr	r2, [sp, #36]	; 0x24
   2f644:	cmp	r0, #0
   2f648:	mov	r8, r0
   2f64c:	str	r0, [r7, #8]
   2f650:	strne	r2, [r7]
   2f654:	movne	r8, #1
   2f658:	bne	2f4f0 <__assert_fail@plt+0x1db50>
   2f65c:	ldr	r0, [r7, #4]
   2f660:	bl	1f018 <__assert_fail@plt+0xd678>
   2f664:	b	2f55c <__assert_fail@plt+0x1dbbc>
   2f668:	ldr	fp, [r7]
   2f66c:	ldr	r0, [r6, #24]
   2f670:	cmp	fp, r0
   2f674:	bhi	2f418 <__assert_fail@plt+0x1da78>
   2f678:	cmp	fp, #0
   2f67c:	mov	r4, fp
   2f680:	bgt	2f420 <__assert_fail@plt+0x1da80>
   2f684:	mov	fp, #1
   2f688:	mov	r7, r1
   2f68c:	mov	r4, fp
   2f690:	mov	r0, #8
   2f694:	b	2f424 <__assert_fail@plt+0x1da84>
   2f698:	mov	r8, lr
   2f69c:	b	2f394 <__assert_fail@plt+0x1d9f4>
   2f6a0:	mov	fp, #1
   2f6a4:	mov	r4, fp
   2f6a8:	mov	r0, #8
   2f6ac:	mov	r7, #0
   2f6b0:	b	2f424 <__assert_fail@plt+0x1da84>
   2f6b4:	mov	r4, #0
   2f6b8:	mov	r3, r4
   2f6bc:	b	2f530 <__assert_fail@plt+0x1db90>
   2f6c0:	mov	r8, #0
   2f6c4:	b	2f55c <__assert_fail@plt+0x1dbbc>
	...
   2f6d0:	push	{r4, r5, r6, r7, r8, lr}
   2f6d4:	mov	r5, r2
   2f6d8:	and	r2, r2, #1
   2f6dc:	cmp	r2, #0
   2f6e0:	ldr	ip, [pc, #404]	; 2f87c <__assert_fail@plt+0x1dedc>
   2f6e4:	mov	r2, #0
   2f6e8:	ldr	r3, [pc, #400]	; 2f880 <__assert_fail@plt+0x1dee0>
   2f6ec:	mov	r4, r0
   2f6f0:	str	r2, [r0]
   2f6f4:	str	r2, [r0, #4]
   2f6f8:	str	r2, [r0, #8]
   2f6fc:	sub	sp, sp, #8
   2f700:	mov	r0, #256	; 0x100
   2f704:	ldr	r8, [pc, #376]	; 2f884 <__assert_fail@plt+0x1dee4>
   2f708:	ldr	r6, [pc, #376]	; 2f888 <__assert_fail@plt+0x1dee8>
   2f70c:	moveq	r8, ip
   2f710:	movne	r6, r3
   2f714:	mov	r7, r1
   2f718:	bl	1f110 <__assert_fail@plt+0xd770>
   2f71c:	cmp	r0, #0
   2f720:	str	r0, [r4, #16]
   2f724:	beq	2f870 <__assert_fail@plt+0x1ded0>
   2f728:	tst	r5, #2
   2f72c:	movne	r6, r8
   2f730:	ands	r2, r5, #4
   2f734:	moveq	r3, r2
   2f738:	ldrb	r2, [r4, #28]
   2f73c:	movne	r3, #1
   2f740:	lsl	r5, r5, #1
   2f744:	bic	r2, r2, #128	; 0x80
   2f748:	orr	r2, r2, r3, lsl #7
   2f74c:	bic	r2, r2, #16
   2f750:	and	r5, r5, #16
   2f754:	orr	r5, r5, r2
   2f758:	mov	r3, #0
   2f75c:	bicne	r6, r6, #64	; 0x40
   2f760:	str	r3, [r4, #20]
   2f764:	strb	r5, [r4, #28]
   2f768:	mov	r0, r7
   2f76c:	orrne	r6, r6, #256	; 0x100
   2f770:	bl	117a8 <strlen@plt>
   2f774:	mov	r1, r7
   2f778:	mov	r3, r6
   2f77c:	mov	r2, r0
   2f780:	mov	r0, r4
   2f784:	bl	295e8 <__assert_fail@plt+0x17c48>
   2f788:	cmp	r0, #16
   2f78c:	mov	r1, r0
   2f790:	beq	2f84c <__assert_fail@plt+0x1deac>
   2f794:	cmp	r0, #0
   2f798:	bne	2f850 <__assert_fail@plt+0x1deb0>
   2f79c:	ldr	r5, [r4]
   2f7a0:	ldr	r6, [r4, #16]
   2f7a4:	mov	r2, #256	; 0x100
   2f7a8:	mov	r0, r6
   2f7ac:	bl	11814 <memset@plt>
   2f7b0:	ldr	r1, [r5, #36]	; 0x24
   2f7b4:	mov	r3, r6
   2f7b8:	add	r2, r1, #12
   2f7bc:	mov	r0, r4
   2f7c0:	add	r1, r1, #8
   2f7c4:	bl	219ec <__assert_fail@plt+0x1004c>
   2f7c8:	ldr	r1, [r5, #40]	; 0x28
   2f7cc:	ldr	r3, [r5, #36]	; 0x24
   2f7d0:	cmp	r3, r1
   2f7d4:	beq	2f7f0 <__assert_fail@plt+0x1de50>
   2f7d8:	add	r2, r1, #12
   2f7dc:	mov	r3, r6
   2f7e0:	add	r1, r1, #8
   2f7e4:	mov	r0, r4
   2f7e8:	bl	219ec <__assert_fail@plt+0x1004c>
   2f7ec:	ldr	r1, [r5, #36]	; 0x24
   2f7f0:	ldr	r0, [r5, #44]	; 0x2c
   2f7f4:	cmp	r1, r0
   2f7f8:	beq	2f814 <__assert_fail@plt+0x1de74>
   2f7fc:	add	r2, r0, #12
   2f800:	add	r1, r0, #8
   2f804:	mov	r3, r6
   2f808:	mov	r0, r4
   2f80c:	bl	219ec <__assert_fail@plt+0x1004c>
   2f810:	ldr	r0, [r5, #36]	; 0x24
   2f814:	ldr	r1, [r5, #48]	; 0x30
   2f818:	cmp	r1, r0
   2f81c:	beq	2f834 <__assert_fail@plt+0x1de94>
   2f820:	add	r2, r1, #12
   2f824:	mov	r3, r6
   2f828:	add	r1, r1, #8
   2f82c:	mov	r0, r4
   2f830:	bl	219ec <__assert_fail@plt+0x1004c>
   2f834:	ldrb	r3, [r4, #28]
   2f838:	mov	r0, #0
   2f83c:	orr	r3, r3, #8
   2f840:	strb	r3, [r4, #28]
   2f844:	add	sp, sp, #8
   2f848:	pop	{r4, r5, r6, r7, r8, pc}
   2f84c:	mov	r1, #8
   2f850:	ldr	r0, [r4, #16]
   2f854:	str	r1, [sp, #4]
   2f858:	bl	1f018 <__assert_fail@plt+0xd678>
   2f85c:	ldr	r1, [sp, #4]
   2f860:	mov	r3, #0
   2f864:	mov	r0, r1
   2f868:	str	r3, [r4, #16]
   2f86c:	b	2f844 <__assert_fail@plt+0x1dea4>
   2f870:	mov	r0, #12
   2f874:	add	sp, sp, #8
   2f878:	pop	{r4, r5, r6, r7, r8, pc}
   2f87c:	smlalbteq	r0, r1, r6, r2
   2f880:	strdeq	fp, [r3], -ip
   2f884:	strdeq	fp, [r3], #-44	; 0xffffffd4
   2f888:	smlabteq	r1, r6, r2, r0
   2f88c:	cmp	r0, #16
   2f890:	push	{r4, r5, r6, r7, r8, lr}
   2f894:	bhi	2f8fc <__assert_fail@plt+0x1df5c>
   2f898:	ldr	r1, [pc, #96]	; 2f900 <__assert_fail@plt+0x1df60>
   2f89c:	mov	r4, r3
   2f8a0:	add	r0, r1, r0, lsl #2
   2f8a4:	add	r1, r1, #32
   2f8a8:	ldr	r3, [r0, #416]	; 0x1a0
   2f8ac:	mov	r6, r2
   2f8b0:	add	r1, r1, r3
   2f8b4:	mov	r2, #5
   2f8b8:	mov	r0, #0
   2f8bc:	bl	11628 <dcgettext@plt>
   2f8c0:	mov	r7, r0
   2f8c4:	bl	117a8 <strlen@plt>
   2f8c8:	cmp	r4, #0
   2f8cc:	add	r5, r0, #1
   2f8d0:	beq	2f8f4 <__assert_fail@plt+0x1df54>
   2f8d4:	cmp	r5, r4
   2f8d8:	subhi	r2, r4, #1
   2f8dc:	movhi	r3, #0
   2f8e0:	strbhi	r3, [r6, r2]
   2f8e4:	movls	r2, r5
   2f8e8:	mov	r1, r7
   2f8ec:	mov	r0, r6
   2f8f0:	bl	115d4 <memcpy@plt>
   2f8f4:	mov	r0, r5
   2f8f8:	pop	{r4, r5, r6, r7, r8, pc}
   2f8fc:	bl	11964 <abort@plt>
   2f900:	andeq	r3, r3, r4, lsl #28
   2f904:	push	{r4, r5, r6, lr}
   2f908:	mov	r4, r0
   2f90c:	ldr	r5, [r0]
   2f910:	cmp	r5, #0
   2f914:	beq	2f954 <__assert_fail@plt+0x1dfb4>
   2f918:	ldr	r2, [pc, #92]	; 2f97c <__assert_fail@plt+0x1dfdc>
   2f91c:	ldr	r1, [pc, #92]	; 2f980 <__assert_fail@plt+0x1dfe0>
   2f920:	cmp	r2, #0
   2f924:	mov	r3, #1
   2f928:	moveq	r3, r2
   2f92c:	cmp	r1, #0
   2f930:	mov	r2, #1
   2f934:	moveq	r2, r1
   2f938:	orr	r3, r3, r2
   2f93c:	tst	r3, #1
   2f940:	beq	2f94c <__assert_fail@plt+0x1dfac>
   2f944:	add	r0, r5, #136	; 0x88
   2f948:	bl	1155c <pthread_mutex_destroy@plt>
   2f94c:	mov	r0, r5
   2f950:	bl	22c00 <__assert_fail@plt+0x11260>
   2f954:	mov	r5, #0
   2f958:	ldr	r0, [r4, #16]
   2f95c:	str	r5, [r4]
   2f960:	str	r5, [r4, #4]
   2f964:	bl	1f018 <__assert_fail@plt+0xd678>
   2f968:	str	r5, [r4, #16]
   2f96c:	ldr	r0, [r4, #20]
   2f970:	bl	1f018 <__assert_fail@plt+0xd678>
   2f974:	str	r5, [r4, #20]
   2f978:	pop	{r4, r5, r6, pc}
	...
   2f984:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f988:	sub	sp, sp, #36	; 0x24
   2f98c:	ldr	r4, [sp, #72]	; 0x48
   2f990:	bics	ip, r4, #7
   2f994:	movne	r0, #2
   2f998:	beq	2f9a4 <__assert_fail@plt+0x1e004>
   2f99c:	add	sp, sp, #36	; 0x24
   2f9a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f9a4:	ands	fp, r4, #4
   2f9a8:	mov	r8, r3
   2f9ac:	str	r2, [sp, #28]
   2f9b0:	mov	r7, r1
   2f9b4:	mov	r5, r0
   2f9b8:	bne	2fa5c <__assert_fail@plt+0x1e0bc>
   2f9bc:	mov	r0, r1
   2f9c0:	bl	117a8 <strlen@plt>
   2f9c4:	mov	r9, r0
   2f9c8:	ldr	r3, [pc, #204]	; 2fa9c <__assert_fail@plt+0x1e0fc>
   2f9cc:	ldr	r1, [pc, #204]	; 2faa0 <__assert_fail@plt+0x1e100>
   2f9d0:	cmp	r3, #0
   2f9d4:	mov	r6, #1
   2f9d8:	moveq	r6, r3
   2f9dc:	cmp	r1, #0
   2f9e0:	mov	r3, #1
   2f9e4:	moveq	r3, r1
   2f9e8:	orr	r6, r6, r3
   2f9ec:	ands	r6, r6, #255	; 0xff
   2f9f0:	ldr	sl, [r5]
   2f9f4:	beq	2fa00 <__assert_fail@plt+0x1e060>
   2f9f8:	add	r0, sl, #136	; 0x88
   2f9fc:	bl	115a4 <pthread_mutex_lock@plt>
   2fa00:	ldrb	r3, [r5, #28]
   2fa04:	tst	r3, #16
   2fa08:	beq	2fa68 <__assert_fail@plt+0x1e0c8>
   2fa0c:	mov	ip, #0
   2fa10:	str	r4, [sp, #16]
   2fa14:	str	r9, [sp, #4]
   2fa18:	str	r9, [sp]
   2fa1c:	mov	r3, fp
   2fa20:	mov	r2, r9
   2fa24:	mov	r1, r7
   2fa28:	mov	r0, r5
   2fa2c:	str	ip, [sp, #12]
   2fa30:	str	ip, [sp, #8]
   2fa34:	bl	2cee0 <__assert_fail@plt+0x1b540>
   2fa38:	mov	r4, r0
   2fa3c:	cmp	r6, #0
   2fa40:	beq	2fa4c <__assert_fail@plt+0x1e0ac>
   2fa44:	add	r0, sl, #136	; 0x88
   2fa48:	bl	114f0 <pthread_mutex_unlock@plt>
   2fa4c:	adds	r0, r4, #0
   2fa50:	movne	r0, #1
   2fa54:	add	sp, sp, #36	; 0x24
   2fa58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fa5c:	ldr	fp, [r3]
   2fa60:	ldr	r9, [r3, #4]
   2fa64:	b	2f9c8 <__assert_fail@plt+0x1e028>
   2fa68:	ldr	r3, [sp, #28]
   2fa6c:	str	r4, [sp, #16]
   2fa70:	str	r3, [sp, #8]
   2fa74:	str	r8, [sp, #12]
   2fa78:	str	r9, [sp, #4]
   2fa7c:	str	r9, [sp]
   2fa80:	mov	r3, fp
   2fa84:	mov	r2, r9
   2fa88:	mov	r1, r7
   2fa8c:	mov	r0, r5
   2fa90:	bl	2cee0 <__assert_fail@plt+0x1b540>
   2fa94:	mov	r4, r0
   2fa98:	b	2fa3c <__assert_fail@plt+0x1e09c>
	...
   2faa4:	push	{r4, lr}
   2faa8:	sub	sp, sp, #16
   2faac:	mov	lr, #1
   2fab0:	ldr	r4, [sp, #24]
   2fab4:	mov	ip, #0
   2fab8:	str	ip, [sp]
   2fabc:	stmib	sp, {r2, r4, lr}
   2fac0:	bl	2f324 <__assert_fail@plt+0x1d984>
   2fac4:	add	sp, sp, #16
   2fac8:	pop	{r4, pc}
   2facc:	push	{r4, lr}
   2fad0:	sub	sp, sp, #16
   2fad4:	mov	ip, #0
   2fad8:	ldr	r4, [sp, #24]
   2fadc:	ldr	lr, [sp, #28]
   2fae0:	str	r2, [sp, #4]
   2fae4:	str	r4, [sp]
   2fae8:	str	lr, [sp, #8]
   2faec:	str	ip, [sp, #12]
   2faf0:	bl	2f324 <__assert_fail@plt+0x1d984>
   2faf4:	add	sp, sp, #16
   2faf8:	pop	{r4, pc}
   2fafc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fb00:	sub	sp, sp, #20
   2fb04:	mov	r5, r2
   2fb08:	ldr	r6, [sp, #68]	; 0x44
   2fb0c:	ldr	r4, [sp, #56]	; 0x38
   2fb10:	orr	r2, r2, r6
   2fb14:	orrs	r2, r2, r4
   2fb18:	bmi	2fb40 <__assert_fail@plt+0x1e1a0>
   2fb1c:	cmp	r4, #0
   2fb20:	mov	sl, r0
   2fb24:	mov	fp, r1
   2fb28:	mov	r7, r3
   2fb2c:	blt	2fb50 <__assert_fail@plt+0x1e1b0>
   2fb30:	mvn	r3, #-2147483648	; 0x80000000
   2fb34:	sub	r3, r3, r4
   2fb38:	cmp	r5, r3
   2fb3c:	ble	2fb50 <__assert_fail@plt+0x1e1b0>
   2fb40:	mvn	r4, #1
   2fb44:	mov	r0, r4
   2fb48:	add	sp, sp, #20
   2fb4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fb50:	cmp	r4, #0
   2fb54:	add	r9, r5, r4
   2fb58:	ble	2fbe4 <__assert_fail@plt+0x1e244>
   2fb5c:	cmp	r5, #0
   2fb60:	beq	2fbdc <__assert_fail@plt+0x1e23c>
   2fb64:	mov	r0, r9
   2fb68:	bl	1f110 <__assert_fail@plt+0xd770>
   2fb6c:	subs	r8, r0, #0
   2fb70:	beq	2fb40 <__assert_fail@plt+0x1e1a0>
   2fb74:	mov	r1, fp
   2fb78:	mov	r2, r5
   2fb7c:	bl	115d4 <memcpy@plt>
   2fb80:	mov	r1, r7
   2fb84:	mov	r2, r4
   2fb88:	add	r0, r8, r5
   2fb8c:	bl	115d4 <memcpy@plt>
   2fb90:	mov	r7, r8
   2fb94:	ldr	r2, [sp, #64]	; 0x40
   2fb98:	mov	ip, #1
   2fb9c:	mov	r3, #0
   2fba0:	str	r2, [sp, #8]
   2fba4:	mov	r1, r7
   2fba8:	mov	r2, r9
   2fbac:	str	ip, [sp, #12]
   2fbb0:	str	r3, [sp]
   2fbb4:	str	r6, [sp, #4]
   2fbb8:	ldr	r3, [sp, #60]	; 0x3c
   2fbbc:	mov	r0, sl
   2fbc0:	bl	2f324 <__assert_fail@plt+0x1d984>
   2fbc4:	mov	r4, r0
   2fbc8:	mov	r0, r8
   2fbcc:	bl	1f018 <__assert_fail@plt+0xd678>
   2fbd0:	mov	r0, r4
   2fbd4:	add	sp, sp, #20
   2fbd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fbdc:	mov	r8, r5
   2fbe0:	b	2fb94 <__assert_fail@plt+0x1e1f4>
   2fbe4:	mov	r7, fp
   2fbe8:	mov	r8, #0
   2fbec:	b	2fb94 <__assert_fail@plt+0x1e1f4>
   2fbf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fbf4:	sub	sp, sp, #20
   2fbf8:	mov	r5, r2
   2fbfc:	ldr	r6, [sp, #72]	; 0x48
   2fc00:	ldr	r4, [sp, #56]	; 0x38
   2fc04:	orr	r2, r2, r6
   2fc08:	orrs	r2, r2, r4
   2fc0c:	bmi	2fc34 <__assert_fail@plt+0x1e294>
   2fc10:	cmp	r4, #0
   2fc14:	mov	sl, r0
   2fc18:	mov	fp, r1
   2fc1c:	mov	r7, r3
   2fc20:	blt	2fc44 <__assert_fail@plt+0x1e2a4>
   2fc24:	mvn	r3, #-2147483648	; 0x80000000
   2fc28:	sub	r3, r3, r4
   2fc2c:	cmp	r5, r3
   2fc30:	ble	2fc44 <__assert_fail@plt+0x1e2a4>
   2fc34:	mvn	r4, #1
   2fc38:	mov	r0, r4
   2fc3c:	add	sp, sp, #20
   2fc40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fc44:	cmp	r4, #0
   2fc48:	add	r9, r5, r4
   2fc4c:	ble	2fcd8 <__assert_fail@plt+0x1e338>
   2fc50:	cmp	r5, #0
   2fc54:	beq	2fcd0 <__assert_fail@plt+0x1e330>
   2fc58:	mov	r0, r9
   2fc5c:	bl	1f110 <__assert_fail@plt+0xd770>
   2fc60:	subs	r8, r0, #0
   2fc64:	beq	2fc34 <__assert_fail@plt+0x1e294>
   2fc68:	mov	r1, fp
   2fc6c:	mov	r2, r5
   2fc70:	bl	115d4 <memcpy@plt>
   2fc74:	mov	r1, r7
   2fc78:	mov	r2, r4
   2fc7c:	add	r0, r8, r5
   2fc80:	bl	115d4 <memcpy@plt>
   2fc84:	mov	r7, r8
   2fc88:	ldr	r2, [sp, #68]	; 0x44
   2fc8c:	mov	r3, #0
   2fc90:	str	r2, [sp, #8]
   2fc94:	ldr	r2, [sp, #64]	; 0x40
   2fc98:	mov	r1, r7
   2fc9c:	str	r2, [sp]
   2fca0:	str	r3, [sp, #12]
   2fca4:	mov	r2, r9
   2fca8:	ldr	r3, [sp, #60]	; 0x3c
   2fcac:	str	r6, [sp, #4]
   2fcb0:	mov	r0, sl
   2fcb4:	bl	2f324 <__assert_fail@plt+0x1d984>
   2fcb8:	mov	r4, r0
   2fcbc:	mov	r0, r8
   2fcc0:	bl	1f018 <__assert_fail@plt+0xd678>
   2fcc4:	mov	r0, r4
   2fcc8:	add	sp, sp, #20
   2fccc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fcd0:	mov	r8, r5
   2fcd4:	b	2fc88 <__assert_fail@plt+0x1e2e8>
   2fcd8:	mov	r7, fp
   2fcdc:	mov	r8, #0
   2fce0:	b	2fc88 <__assert_fail@plt+0x1e2e8>
   2fce4:	cmp	r2, #0
   2fce8:	bne	2fd08 <__assert_fail@plt+0x1e368>
   2fcec:	ldrb	r3, [r0, #28]
   2fcf0:	bic	r3, r3, #6
   2fcf4:	strb	r3, [r0, #28]
   2fcf8:	str	r2, [r1]
   2fcfc:	str	r2, [r1, #8]
   2fd00:	str	r2, [r1, #4]
   2fd04:	bx	lr
   2fd08:	ldrb	ip, [r0, #28]
   2fd0c:	bic	ip, ip, #4
   2fd10:	orr	ip, ip, #2
   2fd14:	strb	ip, [r0, #28]
   2fd18:	stm	r1, {r2, r3}
   2fd1c:	ldr	r3, [sp]
   2fd20:	str	r3, [r1, #8]
   2fd24:	bx	lr
   2fd28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fd2c:	mov	r9, #1
   2fd30:	sub	sp, sp, #20
   2fd34:	mov	r5, r0
   2fd38:	mov	sl, r1
   2fd3c:	mov	r6, r9
   2fd40:	mov	r7, #0
   2fd44:	mvn	r8, #0
   2fd48:	str	r2, [sp, #8]
   2fd4c:	add	r4, r6, r7
   2fd50:	cmp	r4, sl
   2fd54:	bcs	2fde4 <__assert_fail@plt+0x1e444>
   2fd58:	bl	11778 <__ctype_b_loc@plt>
   2fd5c:	ldrb	fp, [r5, r4]
   2fd60:	sxth	r3, fp
   2fd64:	str	r3, [sp]
   2fd68:	lsl	r1, r3, #1
   2fd6c:	ldr	r2, [r0]
   2fd70:	ldrh	r1, [r2, r1]
   2fd74:	tst	r1, #256	; 0x100
   2fd78:	beq	2fd94 <__assert_fail@plt+0x1e3f4>
   2fd7c:	str	r2, [sp, #4]
   2fd80:	bl	11748 <__ctype_tolower_loc@plt>
   2fd84:	ldr	r3, [sp]
   2fd88:	ldr	r2, [sp, #4]
   2fd8c:	ldr	r1, [r0]
   2fd90:	ldrb	fp, [r1, r3, lsl #2]
   2fd94:	add	r3, r5, r8
   2fd98:	ldrb	r3, [r3, r6]
   2fd9c:	sxth	r1, r3
   2fda0:	str	r1, [sp]
   2fda4:	lsl	r0, r1, #1
   2fda8:	ldrh	r2, [r2, r0]
   2fdac:	tst	r2, #256	; 0x100
   2fdb0:	beq	2fdc4 <__assert_fail@plt+0x1e424>
   2fdb4:	bl	11748 <__ctype_tolower_loc@plt>
   2fdb8:	ldr	r1, [sp]
   2fdbc:	ldr	r3, [r0]
   2fdc0:	ldrb	r3, [r3, r1, lsl #2]
   2fdc4:	cmp	fp, r3
   2fdc8:	bcs	2fed8 <__assert_fail@plt+0x1e538>
   2fdcc:	mov	r7, r4
   2fdd0:	mov	r6, #1
   2fdd4:	sub	r9, r4, r8
   2fdd8:	add	r4, r6, r7
   2fddc:	cmp	r4, sl
   2fde0:	bcc	2fd58 <__assert_fail@plt+0x1e3b8>
   2fde4:	ldr	r3, [sp, #8]
   2fde8:	mov	fp, #1
   2fdec:	str	r8, [sp, #12]
   2fdf0:	str	r9, [r3]
   2fdf4:	mov	r7, #0
   2fdf8:	mvn	r9, #0
   2fdfc:	mov	r8, fp
   2fe00:	mov	r6, r5
   2fe04:	add	r4, r8, r7
   2fe08:	cmp	sl, r4
   2fe0c:	bls	2fe9c <__assert_fail@plt+0x1e4fc>
   2fe10:	bl	11778 <__ctype_b_loc@plt>
   2fe14:	ldrb	r5, [r6, r4]
   2fe18:	sxth	r1, r5
   2fe1c:	str	r1, [sp]
   2fe20:	lsl	ip, r1, #1
   2fe24:	ldr	r2, [r0]
   2fe28:	ldrh	r0, [r2, ip]
   2fe2c:	tst	r0, #256	; 0x100
   2fe30:	beq	2fe4c <__assert_fail@plt+0x1e4ac>
   2fe34:	str	r2, [sp, #4]
   2fe38:	bl	11748 <__ctype_tolower_loc@plt>
   2fe3c:	ldr	r1, [sp]
   2fe40:	ldr	r2, [sp, #4]
   2fe44:	ldr	r0, [r0]
   2fe48:	ldrb	r5, [r0, r1, lsl #2]
   2fe4c:	add	r1, r6, r9
   2fe50:	ldrb	r0, [r1, r8]
   2fe54:	sxth	r1, r0
   2fe58:	str	r1, [sp]
   2fe5c:	lsl	ip, r1, #1
   2fe60:	ldrh	r2, [r2, ip]
   2fe64:	tst	r2, #256	; 0x100
   2fe68:	beq	2fe7c <__assert_fail@plt+0x1e4dc>
   2fe6c:	bl	11748 <__ctype_tolower_loc@plt>
   2fe70:	ldr	r1, [sp]
   2fe74:	ldr	r2, [r0]
   2fe78:	ldrb	r0, [r2, r1, lsl #2]
   2fe7c:	cmp	r5, r0
   2fe80:	bls	2fec0 <__assert_fail@plt+0x1e520>
   2fe84:	mov	r7, r4
   2fe88:	mov	r8, #1
   2fe8c:	sub	fp, r4, r9
   2fe90:	add	r4, r8, r7
   2fe94:	cmp	sl, r4
   2fe98:	bhi	2fe10 <__assert_fail@plt+0x1e470>
   2fe9c:	ldr	r8, [sp, #12]
   2fea0:	add	r9, r9, #1
   2fea4:	add	r0, r8, #1
   2fea8:	cmp	r9, r0
   2feac:	movcs	r0, r9
   2feb0:	ldrcs	r3, [sp, #8]
   2feb4:	strcs	fp, [r3]
   2feb8:	add	sp, sp, #20
   2febc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fec0:	beq	2fef0 <__assert_fail@plt+0x1e550>
   2fec4:	mov	fp, #1
   2fec8:	mov	r9, r7
   2fecc:	mov	r8, fp
   2fed0:	add	r7, r7, fp
   2fed4:	b	2fe04 <__assert_fail@plt+0x1e464>
   2fed8:	beq	2ff04 <__assert_fail@plt+0x1e564>
   2fedc:	mov	r9, #1
   2fee0:	mov	r8, r7
   2fee4:	mov	r6, r9
   2fee8:	add	r7, r7, r9
   2feec:	b	2fd4c <__assert_fail@plt+0x1e3ac>
   2fef0:	cmp	r8, fp
   2fef4:	addne	r8, r8, #1
   2fef8:	moveq	r7, r4
   2fefc:	moveq	r8, #1
   2ff00:	b	2fe04 <__assert_fail@plt+0x1e464>
   2ff04:	cmp	r6, r9
   2ff08:	addne	r6, r6, #1
   2ff0c:	moveq	r7, r4
   2ff10:	moveq	r6, #1
   2ff14:	b	2fd4c <__assert_fail@plt+0x1e3ac>
   2ff18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ff1c:	sub	sp, sp, #1072	; 0x430
   2ff20:	sub	sp, sp, #12
   2ff24:	cmp	r3, #2
   2ff28:	mov	r5, r3
   2ff2c:	str	r0, [sp]
   2ff30:	mov	r4, r1
   2ff34:	str	r2, [sp, #16]
   2ff38:	bhi	30514 <__assert_fail@plt+0x1eb74>
   2ff3c:	add	r6, sp, #56	; 0x38
   2ff40:	mov	r3, #1
   2ff44:	sub	r2, r5, #1
   2ff48:	str	r3, [sp, #28]
   2ff4c:	str	r2, [sp, #8]
   2ff50:	str	r3, [sp, #52]	; 0x34
   2ff54:	add	r2, sp, #1072	; 0x430
   2ff58:	sub	r3, r6, #4
   2ff5c:	add	r2, r2, #4
   2ff60:	str	r5, [r3, #4]!
   2ff64:	cmp	r2, r3
   2ff68:	bne	2ff60 <__assert_fail@plt+0x1e5c0>
   2ff6c:	cmp	r5, #0
   2ff70:	beq	2ffd0 <__assert_fail@plt+0x1e630>
   2ff74:	bl	11778 <__ctype_b_loc@plt>
   2ff78:	ldr	r3, [sp, #16]
   2ff7c:	sub	r6, r5, #1
   2ff80:	sub	r8, r3, #1
   2ff84:	ldr	r9, [r0]
   2ff88:	ldrb	r3, [r8, #1]!
   2ff8c:	add	r2, sp, #1072	; 0x430
   2ff90:	add	r2, r2, #8
   2ff94:	sxth	r7, r3
   2ff98:	add	r3, r2, r3, lsl #2
   2ff9c:	lsl	r2, r7, #1
   2ffa0:	ldrh	r2, [r9, r2]
   2ffa4:	tst	r2, #256	; 0x100
   2ffa8:	beq	301a8 <__assert_fail@plt+0x1e808>
   2ffac:	bl	11748 <__ctype_tolower_loc@plt>
   2ffb0:	add	r2, sp, #1072	; 0x430
   2ffb4:	add	r2, r2, #8
   2ffb8:	ldr	r3, [r0]
   2ffbc:	ldr	r3, [r3, r7, lsl #2]
   2ffc0:	add	r3, r2, r3, lsl #2
   2ffc4:	str	r6, [r3, #-1024]	; 0xfffffc00
   2ffc8:	subs	r6, r6, #1
   2ffcc:	bcs	2ff88 <__assert_fail@plt+0x1e5e8>
   2ffd0:	ldr	r3, [sp, #16]
   2ffd4:	ldr	r6, [sp, #8]
   2ffd8:	ldr	r7, [sp, #28]
   2ffdc:	mov	r2, r6
   2ffe0:	add	r1, r3, r7
   2ffe4:	mov	r0, r3
   2ffe8:	bl	117f0 <strncasecmp@plt>
   2ffec:	cmp	r0, #0
   2fff0:	bne	302d4 <__assert_fail@plt+0x1e934>
   2fff4:	sub	r2, r6, #1
   2fff8:	str	r2, [sp, #40]	; 0x28
   2fffc:	rsb	r3, r6, #1
   30000:	sub	r2, r5, r7
   30004:	str	r0, [sp, #12]
   30008:	str	r0, [sp, #4]
   3000c:	str	r2, [sp, #36]	; 0x24
   30010:	sub	r8, r5, #1
   30014:	str	r3, [sp, #44]	; 0x2c
   30018:	mov	r0, r4
   3001c:	str	r5, [sp, #24]
   30020:	mov	r2, r5
   30024:	b	30060 <__assert_fail@plt+0x1e6c0>
   30028:	ldr	r2, [sp, #28]
   3002c:	ldr	r1, [sp, #12]
   30030:	cmp	r1, #0
   30034:	cmpne	r3, r2
   30038:	ldrcc	r3, [sp, #36]	; 0x24
   3003c:	strcc	r3, [sp, #20]
   30040:	ldr	r3, [sp, #4]
   30044:	ldr	r2, [sp, #20]
   30048:	add	r3, r3, r2
   3004c:	str	r3, [sp, #4]
   30050:	mov	r3, #0
   30054:	str	r3, [sp, #12]
   30058:	ldr	r2, [sp, #24]
   3005c:	mov	r0, r7
   30060:	ldr	r3, [sp, #4]
   30064:	mov	r1, #0
   30068:	add	r7, r3, r2
   3006c:	ldr	r3, [sp]
   30070:	sub	r2, r7, r0
   30074:	add	r0, r3, r0
   30078:	bl	1185c <memchr@plt>
   3007c:	adds	r3, r7, #0
   30080:	movne	r3, #1
   30084:	cmp	r0, #0
   30088:	movne	r3, #0
   3008c:	cmp	r3, #0
   30090:	beq	30504 <__assert_fail@plt+0x1eb64>
   30094:	bl	11778 <__ctype_b_loc@plt>
   30098:	ldr	r3, [sp]
   3009c:	add	r3, r3, r7
   300a0:	ldrb	r3, [r3, #-1]
   300a4:	sxth	r5, r3
   300a8:	lsl	r2, r5, #1
   300ac:	ldr	r4, [r0]
   300b0:	ldrh	r2, [r4, r2]
   300b4:	tst	r2, #256	; 0x100
   300b8:	beq	300c8 <__assert_fail@plt+0x1e728>
   300bc:	bl	11748 <__ctype_tolower_loc@plt>
   300c0:	ldr	r3, [r0]
   300c4:	ldr	r3, [r3, r5, lsl #2]
   300c8:	add	r2, sp, #1072	; 0x430
   300cc:	add	r2, r2, #8
   300d0:	add	r3, r2, r3, lsl #2
   300d4:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   300d8:	cmp	r3, #0
   300dc:	str	r3, [sp, #20]
   300e0:	bne	30028 <__assert_fail@plt+0x1e688>
   300e4:	ldr	r3, [sp, #12]
   300e8:	ldr	r2, [sp, #8]
   300ec:	cmp	r3, r2
   300f0:	movcs	r6, r3
   300f4:	movcc	r6, r2
   300f8:	cmp	r6, r8
   300fc:	bcs	301b8 <__assert_fail@plt+0x1e818>
   30100:	ldr	r3, [sp, #4]
   30104:	ldr	r2, [sp]
   30108:	add	r3, r3, r6
   3010c:	add	r9, r2, r3
   30110:	ldr	r3, [sp, #16]
   30114:	add	sl, r3, r6
   30118:	b	30128 <__assert_fail@plt+0x1e788>
   3011c:	add	r6, r6, #1
   30120:	cmp	r6, r8
   30124:	bcs	301b8 <__assert_fail@plt+0x1e818>
   30128:	ldrb	r3, [sl], #1
   3012c:	mov	fp, r3
   30130:	sxth	r5, r3
   30134:	lsl	r3, r5, #1
   30138:	ldrh	r3, [r4, r3]
   3013c:	tst	r3, #256	; 0x100
   30140:	beq	30150 <__assert_fail@plt+0x1e7b0>
   30144:	bl	11748 <__ctype_tolower_loc@plt>
   30148:	ldr	r3, [r0]
   3014c:	ldr	fp, [r3, r5, lsl #2]
   30150:	ldrb	r3, [r9], #1
   30154:	mov	r2, r3
   30158:	sxth	r5, r3
   3015c:	lsl	r3, r5, #1
   30160:	ldrh	r3, [r4, r3]
   30164:	tst	r3, #256	; 0x100
   30168:	beq	30178 <__assert_fail@plt+0x1e7d8>
   3016c:	bl	11748 <__ctype_tolower_loc@plt>
   30170:	ldr	r3, [r0]
   30174:	ldr	r2, [r3, r5, lsl #2]
   30178:	cmp	fp, r2
   3017c:	beq	3011c <__assert_fail@plt+0x1e77c>
   30180:	cmp	r8, r6
   30184:	bls	301b8 <__assert_fail@plt+0x1e818>
   30188:	ldr	r3, [sp, #44]	; 0x2c
   3018c:	ldr	r2, [sp, #4]
   30190:	add	r9, r3, r2
   30194:	add	r3, r6, r9
   30198:	str	r3, [sp, #4]
   3019c:	ldr	r3, [sp, #20]
   301a0:	str	r3, [sp, #12]
   301a4:	b	30058 <__assert_fail@plt+0x1e6b8>
   301a8:	str	r6, [r3, #-1024]	; 0xfffffc00
   301ac:	subs	r6, r6, #1
   301b0:	bcs	2ff88 <__assert_fail@plt+0x1e5e8>
   301b4:	b	2ffd0 <__assert_fail@plt+0x1e630>
   301b8:	ldr	r3, [sp, #12]
   301bc:	ldr	r2, [sp, #8]
   301c0:	ldr	r6, [sp, #40]	; 0x28
   301c4:	cmp	r3, r2
   301c8:	mov	r3, r2
   301cc:	bcs	30284 <__assert_fail@plt+0x1e8e4>
   301d0:	ldr	r2, [sp, #4]
   301d4:	ldr	r1, [sp]
   301d8:	add	r2, r2, r3
   301dc:	add	sl, r1, r2
   301e0:	ldr	r2, [sp, #16]
   301e4:	str	r7, [sp, #20]
   301e8:	add	fp, r2, r3
   301ec:	ldr	r3, [sp, #12]
   301f0:	mov	r7, fp
   301f4:	sub	r3, r3, #1
   301f8:	str	r8, [sp, #32]
   301fc:	mov	fp, r4
   30200:	mov	r8, sl
   30204:	mov	sl, r3
   30208:	b	30218 <__assert_fail@plt+0x1e878>
   3020c:	cmp	r3, sl
   30210:	beq	302c4 <__assert_fail@plt+0x1e924>
   30214:	mov	r6, r3
   30218:	ldrb	r3, [r7, #-1]!
   3021c:	add	r4, r6, #1
   30220:	mov	r9, r3
   30224:	sxth	r5, r3
   30228:	lsl	r3, r5, #1
   3022c:	ldrh	r3, [fp, r3]
   30230:	tst	r3, #256	; 0x100
   30234:	beq	30244 <__assert_fail@plt+0x1e8a4>
   30238:	bl	11748 <__ctype_tolower_loc@plt>
   3023c:	ldr	r3, [r0]
   30240:	ldr	r9, [r3, r5, lsl #2]
   30244:	ldrb	r3, [r8, #-1]!
   30248:	mov	r0, r3
   3024c:	sxth	r5, r3
   30250:	lsl	r3, r5, #1
   30254:	ldrh	r3, [fp, r3]
   30258:	tst	r3, #256	; 0x100
   3025c:	beq	3026c <__assert_fail@plt+0x1e8cc>
   30260:	bl	11748 <__ctype_tolower_loc@plt>
   30264:	ldr	r3, [r0]
   30268:	ldr	r0, [r3, r5, lsl #2]
   3026c:	cmp	r9, r0
   30270:	sub	r3, r6, #1
   30274:	beq	3020c <__assert_fail@plt+0x1e86c>
   30278:	ldr	r7, [sp, #20]
   3027c:	ldr	r8, [sp, #32]
   30280:	mov	r2, r4
   30284:	ldr	r3, [sp, #12]
   30288:	add	r3, r3, #1
   3028c:	cmp	r3, r2
   30290:	bhi	302b0 <__assert_fail@plt+0x1e910>
   30294:	ldr	r3, [sp, #4]
   30298:	ldr	r2, [sp, #28]
   3029c:	add	r3, r3, r2
   302a0:	str	r3, [sp, #4]
   302a4:	ldr	r3, [sp, #36]	; 0x24
   302a8:	str	r3, [sp, #12]
   302ac:	b	30058 <__assert_fail@plt+0x1e6b8>
   302b0:	ldm	sp, {r2, r3}
   302b4:	add	r0, r3, r2
   302b8:	add	sp, sp, #1072	; 0x430
   302bc:	add	sp, sp, #12
   302c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   302c4:	ldr	r7, [sp, #20]
   302c8:	ldr	r8, [sp, #32]
   302cc:	mov	r2, r6
   302d0:	b	30284 <__assert_fail@plt+0x1e8e4>
   302d4:	sub	r3, r5, r6
   302d8:	cmp	r3, r6
   302dc:	movcc	r3, r6
   302e0:	add	r3, r3, #1
   302e4:	str	r3, [sp, #24]
   302e8:	str	r3, [sp, #52]	; 0x34
   302ec:	sub	r3, r6, #1
   302f0:	mov	r1, #0
   302f4:	str	r3, [sp, #20]
   302f8:	rsb	r3, r6, #1
   302fc:	str	r3, [sp, #28]
   30300:	sub	r8, r5, #1
   30304:	mov	r0, r4
   30308:	mov	r3, r1
   3030c:	mov	r2, r5
   30310:	str	r1, [sp, #4]
   30314:	str	r5, [sp, #12]
   30318:	add	r7, r3, r2
   3031c:	ldr	r3, [sp]
   30320:	sub	r2, r7, r0
   30324:	mov	r1, #0
   30328:	add	r0, r3, r0
   3032c:	bl	1185c <memchr@plt>
   30330:	cmp	r7, #0
   30334:	clz	r0, r0
   30338:	lsr	r0, r0, #5
   3033c:	moveq	r0, #0
   30340:	cmp	r0, #0
   30344:	beq	30504 <__assert_fail@plt+0x1eb64>
   30348:	bl	11778 <__ctype_b_loc@plt>
   3034c:	ldr	r3, [sp]
   30350:	add	r3, r3, r7
   30354:	ldrb	r3, [r3, #-1]
   30358:	sxth	r4, r3
   3035c:	lsl	r2, r4, #1
   30360:	ldr	r5, [r0]
   30364:	ldrh	r2, [r5, r2]
   30368:	tst	r2, #256	; 0x100
   3036c:	beq	3037c <__assert_fail@plt+0x1e9dc>
   30370:	bl	11748 <__ctype_tolower_loc@plt>
   30374:	ldr	r3, [r0]
   30378:	ldr	r3, [r3, r4, lsl #2]
   3037c:	add	r2, sp, #1072	; 0x430
   30380:	add	r2, r2, #8
   30384:	add	r3, r2, r3, lsl #2
   30388:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   3038c:	cmp	r3, #0
   30390:	bne	30450 <__assert_fail@plt+0x1eab0>
   30394:	ldr	r3, [sp, #8]
   30398:	cmp	r3, r8
   3039c:	bcs	30460 <__assert_fail@plt+0x1eac0>
   303a0:	ldr	r2, [sp, #4]
   303a4:	ldr	r1, [sp]
   303a8:	add	r2, r2, r3
   303ac:	add	fp, r1, r2
   303b0:	ldr	r2, [sp, #16]
   303b4:	mov	r6, r3
   303b8:	add	sl, r2, r3
   303bc:	b	303cc <__assert_fail@plt+0x1ea2c>
   303c0:	add	r6, r6, #1
   303c4:	cmp	r6, r8
   303c8:	bcs	30460 <__assert_fail@plt+0x1eac0>
   303cc:	ldrb	r3, [sl], #1
   303d0:	mov	r9, r3
   303d4:	sxth	r4, r3
   303d8:	lsl	r3, r4, #1
   303dc:	ldrh	r3, [r5, r3]
   303e0:	tst	r3, #256	; 0x100
   303e4:	beq	303f4 <__assert_fail@plt+0x1ea54>
   303e8:	bl	11748 <__ctype_tolower_loc@plt>
   303ec:	ldr	r3, [r0]
   303f0:	ldr	r9, [r3, r4, lsl #2]
   303f4:	ldrb	r3, [fp], #1
   303f8:	mov	r2, r3
   303fc:	sxth	r4, r3
   30400:	lsl	r3, r4, #1
   30404:	ldrh	r3, [r5, r3]
   30408:	tst	r3, #256	; 0x100
   3040c:	beq	3041c <__assert_fail@plt+0x1ea7c>
   30410:	bl	11748 <__ctype_tolower_loc@plt>
   30414:	ldr	r3, [r0]
   30418:	ldr	r2, [r3, r4, lsl #2]
   3041c:	cmp	r9, r2
   30420:	beq	303c0 <__assert_fail@plt+0x1ea20>
   30424:	cmp	r8, r6
   30428:	bls	30460 <__assert_fail@plt+0x1eac0>
   3042c:	ldr	r3, [sp, #28]
   30430:	ldr	r2, [sp, #4]
   30434:	add	r9, r3, r2
   30438:	add	r3, r9, r6
   3043c:	str	r3, [sp, #4]
   30440:	mov	r0, r7
   30444:	ldr	r3, [sp, #4]
   30448:	ldr	r2, [sp, #12]
   3044c:	b	30318 <__assert_fail@plt+0x1e978>
   30450:	ldr	r2, [sp, #4]
   30454:	add	r3, r2, r3
   30458:	str	r3, [sp, #4]
   3045c:	b	30440 <__assert_fail@plt+0x1eaa0>
   30460:	ldr	r3, [sp, #20]
   30464:	cmn	r3, #1
   30468:	beq	302b0 <__assert_fail@plt+0x1e910>
   3046c:	mov	r6, r3
   30470:	ldmib	sp, {r2, r3}
   30474:	ldr	r1, [sp]
   30478:	add	r2, r2, r3
   3047c:	add	sl, r1, r2
   30480:	ldr	r2, [sp, #16]
   30484:	add	fp, r2, r3
   30488:	b	30494 <__assert_fail@plt+0x1eaf4>
   3048c:	cmn	r6, #1
   30490:	beq	302b0 <__assert_fail@plt+0x1e910>
   30494:	ldrb	r3, [fp, #-1]!
   30498:	mov	r9, r3
   3049c:	sxth	r4, r3
   304a0:	lsl	r3, r4, #1
   304a4:	ldrh	r3, [r5, r3]
   304a8:	tst	r3, #256	; 0x100
   304ac:	beq	304bc <__assert_fail@plt+0x1eb1c>
   304b0:	bl	11748 <__ctype_tolower_loc@plt>
   304b4:	ldr	r3, [r0]
   304b8:	ldr	r9, [r3, r4, lsl #2]
   304bc:	ldrb	r3, [sl, #-1]!
   304c0:	mov	r2, r3
   304c4:	sxth	r4, r3
   304c8:	lsl	r3, r4, #1
   304cc:	ldrh	r3, [r5, r3]
   304d0:	tst	r3, #256	; 0x100
   304d4:	beq	304e4 <__assert_fail@plt+0x1eb44>
   304d8:	bl	11748 <__ctype_tolower_loc@plt>
   304dc:	ldr	r3, [r0]
   304e0:	ldr	r2, [r3, r4, lsl #2]
   304e4:	cmp	r9, r2
   304e8:	sub	r6, r6, #1
   304ec:	beq	3048c <__assert_fail@plt+0x1eaec>
   304f0:	ldr	r3, [sp, #4]
   304f4:	ldr	r2, [sp, #24]
   304f8:	add	r3, r3, r2
   304fc:	str	r3, [sp, #4]
   30500:	b	30440 <__assert_fail@plt+0x1eaa0>
   30504:	mov	r0, #0
   30508:	add	sp, sp, #1072	; 0x430
   3050c:	add	sp, sp, #12
   30510:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30514:	add	r6, sp, #56	; 0x38
   30518:	mov	r0, r2
   3051c:	mov	r1, r3
   30520:	sub	r2, r6, #4
   30524:	bl	2fd28 <__assert_fail@plt+0x1e388>
   30528:	ldr	r3, [sp, #52]	; 0x34
   3052c:	str	r3, [sp, #28]
   30530:	str	r0, [sp, #8]
   30534:	b	2ff54 <__assert_fail@plt+0x1e5b4>
   30538:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3053c:	sub	sp, sp, #60	; 0x3c
   30540:	ldrb	r6, [r0]
   30544:	str	r0, [sp, #4]
   30548:	mov	r4, r1
   3054c:	cmp	r6, #0
   30550:	str	r1, [sp, #12]
   30554:	beq	30ab4 <__assert_fail@plt+0x1f114>
   30558:	ldrb	r5, [r1]
   3055c:	mov	fp, r0
   30560:	cmp	r5, #0
   30564:	beq	30630 <__assert_fail@plt+0x1ec90>
   30568:	bl	11778 <__ctype_b_loc@plt>
   3056c:	add	r8, r4, #1
   30570:	mov	r9, #1
   30574:	ldr	sl, [r0]
   30578:	b	30588 <__assert_fail@plt+0x1ebe8>
   3057c:	ldrb	r5, [r8], #1
   30580:	cmp	r5, #0
   30584:	beq	305f4 <__assert_fail@plt+0x1ec54>
   30588:	sxth	r7, r6
   3058c:	mov	r4, r6
   30590:	lsl	r3, r7, #1
   30594:	ldrh	r3, [sl, r3]
   30598:	tst	r3, #256	; 0x100
   3059c:	beq	305ac <__assert_fail@plt+0x1ec0c>
   305a0:	bl	11748 <__ctype_tolower_loc@plt>
   305a4:	ldr	r3, [r0]
   305a8:	ldr	r4, [r3, r7, lsl #2]
   305ac:	sxth	r6, r5
   305b0:	lsl	r3, r6, #1
   305b4:	ldrh	r3, [sl, r3]
   305b8:	tst	r3, #256	; 0x100
   305bc:	beq	305cc <__assert_fail@plt+0x1ec2c>
   305c0:	bl	11748 <__ctype_tolower_loc@plt>
   305c4:	ldr	r3, [r0]
   305c8:	ldr	r5, [r3, r6, lsl #2]
   305cc:	ldrb	r6, [fp, #1]!
   305d0:	cmp	r4, r5
   305d4:	movne	r9, #0
   305d8:	andeq	r9, r9, #1
   305dc:	mov	r4, r8
   305e0:	cmp	r6, #0
   305e4:	bne	3057c <__assert_fail@plt+0x1ebdc>
   305e8:	ldrb	r3, [r4]
   305ec:	cmp	r3, #0
   305f0:	bne	307b0 <__assert_fail@plt+0x1ee10>
   305f4:	cmp	r9, #0
   305f8:	bne	307a4 <__assert_fail@plt+0x1ee04>
   305fc:	ldr	r3, [sp, #12]
   30600:	sub	r4, r4, r3
   30604:	ldr	r3, [sp, #4]
   30608:	cmp	r4, #31
   3060c:	add	r3, r3, #1
   30610:	str	r3, [sp, #4]
   30614:	sub	r5, r4, #1
   30618:	bls	30638 <__assert_fail@plt+0x1ec98>
   3061c:	mov	r0, r3
   30620:	ldr	r2, [sp, #12]
   30624:	mov	r3, r4
   30628:	mov	r1, r5
   3062c:	bl	2ff18 <__assert_fail@plt+0x1e578>
   30630:	add	sp, sp, #60	; 0x3c
   30634:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30638:	cmp	r4, #2
   3063c:	bhi	307bc <__assert_fail@plt+0x1ee1c>
   30640:	mov	r3, #1
   30644:	mov	r8, r5
   30648:	mov	r6, r3
   3064c:	str	r3, [sp, #32]
   30650:	str	r3, [sp, #52]	; 0x34
   30654:	ldr	r3, [sp, #12]
   30658:	mov	r2, r8
   3065c:	add	r1, r3, r6
   30660:	mov	r0, r3
   30664:	bl	117f0 <strncasecmp@plt>
   30668:	subs	fp, r0, #0
   3066c:	bne	308e8 <__assert_fail@plt+0x1ef48>
   30670:	sub	r3, r8, #1
   30674:	str	r3, [sp, #36]	; 0x24
   30678:	mov	r0, r5
   3067c:	sub	r3, r4, r6
   30680:	str	r3, [sp, #44]	; 0x2c
   30684:	rsb	r3, r8, #1
   30688:	str	fp, [sp, #16]
   3068c:	str	fp, [sp, #8]
   30690:	str	r3, [sp, #40]	; 0x28
   30694:	str	r8, [sp, #24]
   30698:	ldr	r3, [sp, #8]
   3069c:	mov	r1, #0
   306a0:	add	r3, r4, r3
   306a4:	sub	r2, r3, r0
   306a8:	mov	r5, r3
   306ac:	str	r3, [sp, #20]
   306b0:	ldr	r3, [sp, #4]
   306b4:	add	r0, r3, r0
   306b8:	bl	1185c <memchr@plt>
   306bc:	adds	r3, r5, #0
   306c0:	movne	r3, #1
   306c4:	cmp	r0, #0
   306c8:	movne	r3, #0
   306cc:	cmp	r3, #0
   306d0:	beq	307b0 <__assert_fail@plt+0x1ee10>
   306d4:	ldr	r3, [sp, #24]
   306d8:	ldr	r2, [sp, #16]
   306dc:	cmp	r3, r2
   306e0:	movcs	r6, r3
   306e4:	movcc	r6, r2
   306e8:	cmp	r4, r6
   306ec:	bls	307e0 <__assert_fail@plt+0x1ee40>
   306f0:	bl	11778 <__ctype_b_loc@plt>
   306f4:	ldr	r3, [sp, #8]
   306f8:	add	r8, r6, r3
   306fc:	ldr	r3, [sp, #4]
   30700:	add	r8, r3, r8
   30704:	ldr	r3, [sp, #12]
   30708:	add	sl, r3, r6
   3070c:	ldr	r9, [r0]
   30710:	b	30720 <__assert_fail@plt+0x1ed80>
   30714:	add	r6, r6, #1
   30718:	cmp	r4, r6
   3071c:	beq	307e0 <__assert_fail@plt+0x1ee40>
   30720:	ldrb	r3, [sl], #1
   30724:	mov	r7, r3
   30728:	sxth	r5, r3
   3072c:	lsl	r3, r5, #1
   30730:	ldrh	r3, [r9, r3]
   30734:	tst	r3, #256	; 0x100
   30738:	beq	30748 <__assert_fail@plt+0x1eda8>
   3073c:	bl	11748 <__ctype_tolower_loc@plt>
   30740:	ldr	r3, [r0]
   30744:	ldr	r7, [r3, r5, lsl #2]
   30748:	ldrb	r3, [r8], #1
   3074c:	mov	r2, r3
   30750:	sxth	r5, r3
   30754:	lsl	r3, r5, #1
   30758:	ldrh	r3, [r9, r3]
   3075c:	tst	r3, #256	; 0x100
   30760:	beq	30770 <__assert_fail@plt+0x1edd0>
   30764:	bl	11748 <__ctype_tolower_loc@plt>
   30768:	ldr	r3, [r0]
   3076c:	ldr	r2, [r3, r5, lsl #2]
   30770:	cmp	r7, r2
   30774:	beq	30714 <__assert_fail@plt+0x1ed74>
   30778:	cmp	r4, r6
   3077c:	bls	307e0 <__assert_fail@plt+0x1ee40>
   30780:	ldr	r3, [sp, #40]	; 0x28
   30784:	ldr	r2, [sp, #8]
   30788:	add	fp, r3, r2
   3078c:	add	r3, fp, r6
   30790:	str	r3, [sp, #8]
   30794:	mov	r3, #0
   30798:	str	r3, [sp, #16]
   3079c:	ldr	r0, [sp, #20]
   307a0:	b	30698 <__assert_fail@plt+0x1ecf8>
   307a4:	ldr	r0, [sp, #4]
   307a8:	add	sp, sp, #60	; 0x3c
   307ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   307b0:	mov	r0, #0
   307b4:	add	sp, sp, #60	; 0x3c
   307b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   307bc:	add	r2, sp, #52	; 0x34
   307c0:	mov	r1, r4
   307c4:	ldr	r0, [sp, #12]
   307c8:	bl	2fd28 <__assert_fail@plt+0x1e388>
   307cc:	ldr	r3, [sp, #52]	; 0x34
   307d0:	str	r3, [sp, #32]
   307d4:	mov	r6, r3
   307d8:	mov	r8, r0
   307dc:	b	30654 <__assert_fail@plt+0x1ecb4>
   307e0:	ldr	r5, [sp, #24]
   307e4:	ldr	r7, [sp, #16]
   307e8:	ldr	r6, [sp, #36]	; 0x24
   307ec:	cmp	r5, r7
   307f0:	bls	30abc <__assert_fail@plt+0x1f11c>
   307f4:	bl	11778 <__ctype_b_loc@plt>
   307f8:	ldr	r1, [sp, #8]
   307fc:	str	r4, [sp, #28]
   30800:	add	r3, r5, r1
   30804:	ldr	r1, [sp, #4]
   30808:	add	r9, r1, r3
   3080c:	ldr	r1, [sp, #12]
   30810:	sub	r3, r7, #1
   30814:	add	fp, r1, r5
   30818:	mov	r4, fp
   3081c:	mov	fp, r9
   30820:	mov	r9, r3
   30824:	ldr	sl, [r0]
   30828:	b	30838 <__assert_fail@plt+0x1ee98>
   3082c:	cmp	r3, r9
   30830:	beq	308d8 <__assert_fail@plt+0x1ef38>
   30834:	mov	r6, r3
   30838:	ldrb	r3, [r4, #-1]!
   3083c:	add	r8, r6, #1
   30840:	mov	r7, r3
   30844:	sxth	r5, r3
   30848:	lsl	r3, r5, #1
   3084c:	ldrh	r3, [sl, r3]
   30850:	tst	r3, #256	; 0x100
   30854:	beq	30864 <__assert_fail@plt+0x1eec4>
   30858:	bl	11748 <__ctype_tolower_loc@plt>
   3085c:	ldr	r3, [r0]
   30860:	ldr	r7, [r3, r5, lsl #2]
   30864:	ldrb	r3, [fp, #-1]!
   30868:	mov	r1, r3
   3086c:	sxth	r5, r3
   30870:	lsl	r3, r5, #1
   30874:	ldrh	r3, [sl, r3]
   30878:	tst	r3, #256	; 0x100
   3087c:	beq	3088c <__assert_fail@plt+0x1eeec>
   30880:	bl	11748 <__ctype_tolower_loc@plt>
   30884:	ldr	r3, [r0]
   30888:	ldr	r1, [r3, r5, lsl #2]
   3088c:	cmp	r7, r1
   30890:	sub	r3, r6, #1
   30894:	beq	3082c <__assert_fail@plt+0x1ee8c>
   30898:	ldr	r4, [sp, #28]
   3089c:	ldr	r3, [sp, #16]
   308a0:	add	sl, r3, #1
   308a4:	cmp	sl, r8
   308a8:	bhi	308c8 <__assert_fail@plt+0x1ef28>
   308ac:	ldr	r3, [sp, #8]
   308b0:	ldr	r2, [sp, #32]
   308b4:	add	r3, r3, r2
   308b8:	str	r3, [sp, #8]
   308bc:	ldr	r3, [sp, #44]	; 0x2c
   308c0:	str	r3, [sp, #16]
   308c4:	b	3079c <__assert_fail@plt+0x1edfc>
   308c8:	ldmib	sp, {r2, r3}
   308cc:	add	r0, r3, r2
   308d0:	add	sp, sp, #60	; 0x3c
   308d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   308d8:	ldr	r4, [sp, #28]
   308dc:	mov	r8, r6
   308e0:	ldr	r3, [sp, #16]
   308e4:	b	308a0 <__assert_fail@plt+0x1ef00>
   308e8:	sub	r3, r4, r8
   308ec:	cmp	r3, r8
   308f0:	movcc	r3, r8
   308f4:	add	r3, r3, #1
   308f8:	mov	r2, #0
   308fc:	str	r3, [sp, #28]
   30900:	str	r3, [sp, #52]	; 0x34
   30904:	mov	r0, r5
   30908:	sub	r3, r8, #1
   3090c:	mov	r6, r2
   30910:	str	r3, [sp, #20]
   30914:	rsb	r3, r8, #1
   30918:	str	r2, [sp, #8]
   3091c:	str	r3, [sp, #24]
   30920:	ldr	r7, [sp, #4]
   30924:	add	r3, r4, r6
   30928:	sub	r2, r3, r0
   3092c:	mov	r1, #0
   30930:	add	r0, r7, r0
   30934:	mov	r5, r3
   30938:	str	r3, [sp, #16]
   3093c:	bl	1185c <memchr@plt>
   30940:	adds	r3, r5, #0
   30944:	movne	r3, #1
   30948:	cmp	r0, #0
   3094c:	movne	r3, #0
   30950:	cmp	r3, #0
   30954:	beq	307b0 <__assert_fail@plt+0x1ee10>
   30958:	cmp	r4, r8
   3095c:	bls	30a0c <__assert_fail@plt+0x1f06c>
   30960:	bl	11778 <__ctype_b_loc@plt>
   30964:	add	r3, r8, r6
   30968:	add	r9, r7, r3
   3096c:	ldr	r3, [sp, #12]
   30970:	mov	r6, r8
   30974:	add	sl, r3, r8
   30978:	ldr	fp, [r0]
   3097c:	b	3098c <__assert_fail@plt+0x1efec>
   30980:	add	r6, r6, #1
   30984:	cmp	r4, r6
   30988:	bls	30a0c <__assert_fail@plt+0x1f06c>
   3098c:	ldrb	r3, [sl], #1
   30990:	mov	r7, r3
   30994:	sxth	r5, r3
   30998:	lsl	r3, r5, #1
   3099c:	ldrh	r3, [fp, r3]
   309a0:	tst	r3, #256	; 0x100
   309a4:	beq	309b4 <__assert_fail@plt+0x1f014>
   309a8:	bl	11748 <__ctype_tolower_loc@plt>
   309ac:	ldr	r3, [r0]
   309b0:	ldr	r7, [r3, r5, lsl #2]
   309b4:	ldrb	r3, [r9], #1
   309b8:	mov	r2, r3
   309bc:	sxth	r5, r3
   309c0:	lsl	r3, r5, #1
   309c4:	ldrh	r3, [fp, r3]
   309c8:	tst	r3, #256	; 0x100
   309cc:	beq	309dc <__assert_fail@plt+0x1f03c>
   309d0:	bl	11748 <__ctype_tolower_loc@plt>
   309d4:	ldr	r3, [r0]
   309d8:	ldr	r2, [r3, r5, lsl #2]
   309dc:	cmp	r7, r2
   309e0:	beq	30980 <__assert_fail@plt+0x1efe0>
   309e4:	cmp	r4, r6
   309e8:	bls	30a0c <__assert_fail@plt+0x1f06c>
   309ec:	ldr	r3, [sp, #24]
   309f0:	ldr	r2, [sp, #8]
   309f4:	add	r9, r3, r2
   309f8:	add	r3, r9, r6
   309fc:	str	r3, [sp, #8]
   30a00:	ldr	r0, [sp, #16]
   30a04:	ldr	r6, [sp, #8]
   30a08:	b	30920 <__assert_fail@plt+0x1ef80>
   30a0c:	ldr	r6, [sp, #20]
   30a10:	cmn	r6, #1
   30a14:	beq	308c8 <__assert_fail@plt+0x1ef28>
   30a18:	bl	11778 <__ctype_b_loc@plt>
   30a1c:	ldr	r3, [sp, #8]
   30a20:	ldr	r2, [sp, #4]
   30a24:	add	r3, r8, r3
   30a28:	add	fp, r2, r3
   30a2c:	ldr	r3, [sp, #12]
   30a30:	add	sl, r3, r8
   30a34:	ldr	r9, [r0]
   30a38:	b	30a44 <__assert_fail@plt+0x1f0a4>
   30a3c:	cmn	r6, #1
   30a40:	beq	308c8 <__assert_fail@plt+0x1ef28>
   30a44:	ldrb	r3, [sl, #-1]!
   30a48:	mov	r7, r3
   30a4c:	sxth	r5, r3
   30a50:	lsl	r3, r5, #1
   30a54:	ldrh	r3, [r9, r3]
   30a58:	tst	r3, #256	; 0x100
   30a5c:	beq	30a6c <__assert_fail@plt+0x1f0cc>
   30a60:	bl	11748 <__ctype_tolower_loc@plt>
   30a64:	ldr	r3, [r0]
   30a68:	ldr	r7, [r3, r5, lsl #2]
   30a6c:	ldrb	r3, [fp, #-1]!
   30a70:	mov	r2, r3
   30a74:	sxth	r5, r3
   30a78:	lsl	r3, r5, #1
   30a7c:	ldrh	r3, [r9, r3]
   30a80:	tst	r3, #256	; 0x100
   30a84:	beq	30a94 <__assert_fail@plt+0x1f0f4>
   30a88:	bl	11748 <__ctype_tolower_loc@plt>
   30a8c:	ldr	r3, [r0]
   30a90:	ldr	r2, [r3, r5, lsl #2]
   30a94:	cmp	r7, r2
   30a98:	sub	r6, r6, #1
   30a9c:	beq	30a3c <__assert_fail@plt+0x1f09c>
   30aa0:	ldr	r3, [sp, #8]
   30aa4:	ldr	r2, [sp, #28]
   30aa8:	add	r3, r3, r2
   30aac:	str	r3, [sp, #8]
   30ab0:	b	30a00 <__assert_fail@plt+0x1f060>
   30ab4:	mov	r9, #1
   30ab8:	b	305e8 <__assert_fail@plt+0x1ec48>
   30abc:	mov	r8, r5
   30ac0:	mov	r3, r7
   30ac4:	b	308a0 <__assert_fail@plt+0x1ef00>
   30ac8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30acc:	cmp	r3, #2
   30ad0:	sub	sp, sp, #1040	; 0x410
   30ad4:	sub	sp, sp, #12
   30ad8:	mov	r4, r3
   30adc:	mov	r5, r0
   30ae0:	mov	fp, r1
   30ae4:	mov	r6, r2
   30ae8:	bhi	30e44 <__assert_fail@plt+0x1f4a4>
   30aec:	sub	r3, r3, #1
   30af0:	mov	r7, r3
   30af4:	mov	r3, #1
   30af8:	str	r3, [sp]
   30afc:	add	r2, sp, #1040	; 0x410
   30b00:	add	r3, sp, #20
   30b04:	add	r2, r2, #4
   30b08:	str	r4, [r3, #4]!
   30b0c:	cmp	r2, r3
   30b10:	bne	30b08 <__assert_fail@plt+0x1f168>
   30b14:	cmp	r4, #0
   30b18:	subne	r3, r4, #1
   30b1c:	subne	r1, r6, #1
   30b20:	beq	30b40 <__assert_fail@plt+0x1f1a0>
   30b24:	ldrb	r2, [r1, #1]!
   30b28:	add	r0, sp, #1040	; 0x410
   30b2c:	add	r0, r0, #8
   30b30:	add	r2, r0, r2, lsl #2
   30b34:	str	r3, [r2, #-1024]	; 0xfffffc00
   30b38:	subs	r3, r3, #1
   30b3c:	bcs	30b24 <__assert_fail@plt+0x1f184>
   30b40:	ldr	r8, [sp]
   30b44:	mov	r2, r7
   30b48:	add	r1, r6, r8
   30b4c:	mov	r0, r6
   30b50:	bl	1161c <memcmp@plt>
   30b54:	subs	sl, r0, #0
   30b58:	bne	30cd8 <__assert_fail@plt+0x1f338>
   30b5c:	sub	r2, r7, #1
   30b60:	str	r2, [sp, #4]
   30b64:	add	r2, r6, r2
   30b68:	mov	r3, r7
   30b6c:	str	r2, [sp, #16]
   30b70:	sub	r2, r4, r8
   30b74:	str	r2, [sp, #12]
   30b78:	rsb	r2, r3, #1
   30b7c:	str	r6, [sp, #8]
   30b80:	mov	r9, sl
   30b84:	sub	r7, r4, #1
   30b88:	str	r2, [sp, #20]
   30b8c:	mov	r0, fp
   30b90:	mov	r6, r3
   30b94:	b	30bb4 <__assert_fail@plt+0x1f214>
   30b98:	ldr	r3, [sp]
   30b9c:	cmp	sl, #0
   30ba0:	cmpne	ip, r3
   30ba4:	mov	sl, #0
   30ba8:	ldrcc	ip, [sp, #12]
   30bac:	add	r9, r9, ip
   30bb0:	mov	r0, r8
   30bb4:	add	r8, r9, r4
   30bb8:	sub	r2, r8, r0
   30bbc:	mov	r1, #0
   30bc0:	add	r0, r5, r0
   30bc4:	bl	1185c <memchr@plt>
   30bc8:	cmp	r8, #0
   30bcc:	clz	r0, r0
   30bd0:	lsr	r0, r0, #5
   30bd4:	moveq	r0, #0
   30bd8:	cmp	r0, #0
   30bdc:	beq	30e18 <__assert_fail@plt+0x1f478>
   30be0:	add	r3, r5, r8
   30be4:	add	r2, sp, #1040	; 0x410
   30be8:	ldrb	r3, [r3, #-1]
   30bec:	add	r2, r2, #8
   30bf0:	add	r3, r2, r3, lsl #2
   30bf4:	ldr	ip, [r3, #-1024]	; 0xfffffc00
   30bf8:	cmp	ip, #0
   30bfc:	bne	30b98 <__assert_fail@plt+0x1f1f8>
   30c00:	cmp	sl, r6
   30c04:	movcs	r3, sl
   30c08:	movcc	r3, r6
   30c0c:	cmp	r7, r3
   30c10:	bls	30c54 <__assert_fail@plt+0x1f2b4>
   30c14:	ldr	r1, [sp, #8]
   30c18:	add	r2, r9, r3
   30c1c:	ldrb	lr, [r1, r3]
   30c20:	ldrb	r0, [r5, r2]
   30c24:	add	r1, r1, r3
   30c28:	add	r2, r5, r2
   30c2c:	cmp	lr, r0
   30c30:	beq	30c48 <__assert_fail@plt+0x1f2a8>
   30c34:	b	30cc4 <__assert_fail@plt+0x1f324>
   30c38:	ldrb	lr, [r1, #1]!
   30c3c:	ldrb	r0, [r2, #1]!
   30c40:	cmp	lr, r0
   30c44:	bne	30cc4 <__assert_fail@plt+0x1f324>
   30c48:	add	r3, r3, #1
   30c4c:	cmp	r7, r3
   30c50:	bhi	30c38 <__assert_fail@plt+0x1f298>
   30c54:	cmp	sl, r6
   30c58:	ldr	r1, [sp, #4]
   30c5c:	bcs	30f6c <__assert_fail@plt+0x1f5cc>
   30c60:	ldr	ip, [sp, #16]
   30c64:	add	r2, r9, r1
   30c68:	ldrb	r3, [ip]
   30c6c:	ldrb	r0, [r5, r2]
   30c70:	add	r2, r5, r2
   30c74:	cmp	r0, r3
   30c78:	bne	30f6c <__assert_fail@plt+0x1f5cc>
   30c7c:	mov	r0, ip
   30c80:	sub	fp, sl, #1
   30c84:	b	30c9c <__assert_fail@plt+0x1f2fc>
   30c88:	ldrb	lr, [r0, #-1]!
   30c8c:	ldrb	ip, [r2, #-1]!
   30c90:	cmp	lr, ip
   30c94:	bne	30ca8 <__assert_fail@plt+0x1f308>
   30c98:	mov	r1, r3
   30c9c:	sub	r3, r1, #1
   30ca0:	cmp	r3, fp
   30ca4:	bne	30c88 <__assert_fail@plt+0x1f2e8>
   30ca8:	add	sl, sl, #1
   30cac:	cmp	sl, r1
   30cb0:	bhi	30e14 <__assert_fail@plt+0x1f474>
   30cb4:	ldr	r3, [sp]
   30cb8:	ldr	sl, [sp, #12]
   30cbc:	add	r9, r9, r3
   30cc0:	b	30bb0 <__assert_fail@plt+0x1f210>
   30cc4:	ldr	r2, [sp, #20]
   30cc8:	mov	sl, ip
   30ccc:	add	r9, r2, r9
   30cd0:	add	r9, r3, r9
   30cd4:	b	30bb0 <__assert_fail@plt+0x1f210>
   30cd8:	sub	r3, r4, r7
   30cdc:	cmp	r3, r7
   30ce0:	movcc	r3, r7
   30ce4:	sub	r1, r7, #1
   30ce8:	add	r3, r3, #1
   30cec:	mov	r2, r7
   30cf0:	mov	r9, #0
   30cf4:	str	r3, [sp, #8]
   30cf8:	add	r3, r6, r1
   30cfc:	str	r3, [sp, #12]
   30d00:	sub	r7, r4, #1
   30d04:	add	r3, r6, r2
   30d08:	mov	r0, fp
   30d0c:	mov	sl, r9
   30d10:	mov	fp, r6
   30d14:	mov	r6, r4
   30d18:	mov	r4, r2
   30d1c:	str	r3, [sp]
   30d20:	rsb	r3, r2, #1
   30d24:	str	r1, [sp, #4]
   30d28:	str	r3, [sp, #16]
   30d2c:	add	r8, r9, r6
   30d30:	sub	r2, r8, r0
   30d34:	mov	r1, sl
   30d38:	add	r0, r5, r0
   30d3c:	bl	1185c <memchr@plt>
   30d40:	adds	r3, r8, #0
   30d44:	movne	r3, #1
   30d48:	cmp	r0, #0
   30d4c:	movne	r3, #0
   30d50:	cmp	r3, #0
   30d54:	mov	r0, r3
   30d58:	beq	30e18 <__assert_fail@plt+0x1f478>
   30d5c:	add	r2, r5, r8
   30d60:	add	r3, sp, #1040	; 0x410
   30d64:	ldrb	r2, [r2, #-1]
   30d68:	add	r3, r3, #8
   30d6c:	add	r2, r3, r2, lsl #2
   30d70:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   30d74:	cmp	r2, #0
   30d78:	bne	30e2c <__assert_fail@plt+0x1f48c>
   30d7c:	cmp	r4, r7
   30d80:	bcs	30dcc <__assert_fail@plt+0x1f42c>
   30d84:	ldr	r3, [sp]
   30d88:	add	r1, r9, r4
   30d8c:	ldrb	r0, [r3]
   30d90:	ldrb	r2, [r5, r1]
   30d94:	add	r1, r5, r1
   30d98:	cmp	r0, r2
   30d9c:	movne	r2, r4
   30da0:	bne	30e24 <__assert_fail@plt+0x1f484>
   30da4:	mov	r0, r3
   30da8:	mov	r2, r4
   30dac:	b	30dc0 <__assert_fail@plt+0x1f420>
   30db0:	ldrb	ip, [r0, #1]!
   30db4:	ldrb	r3, [r1, #1]!
   30db8:	cmp	ip, r3
   30dbc:	bne	30e24 <__assert_fail@plt+0x1f484>
   30dc0:	add	r2, r2, #1
   30dc4:	cmp	r2, r7
   30dc8:	bcc	30db0 <__assert_fail@plt+0x1f410>
   30dcc:	ldr	r3, [sp, #4]
   30dd0:	cmn	r3, #1
   30dd4:	beq	30e14 <__assert_fail@plt+0x1f474>
   30dd8:	add	r1, r9, r3
   30ddc:	ldr	r3, [sp, #12]
   30de0:	ldrb	r2, [r5, r1]
   30de4:	add	r1, r5, r1
   30de8:	ldrb	r0, [r3]
   30dec:	cmp	r0, r2
   30df0:	bne	30e38 <__assert_fail@plt+0x1f498>
   30df4:	mov	r2, r3
   30df8:	b	30e0c <__assert_fail@plt+0x1f46c>
   30dfc:	ldrb	r0, [r2, #-1]!
   30e00:	ldrb	r3, [r1, #-1]!
   30e04:	cmp	r0, r3
   30e08:	bne	30e38 <__assert_fail@plt+0x1f498>
   30e0c:	cmp	fp, r2
   30e10:	bne	30dfc <__assert_fail@plt+0x1f45c>
   30e14:	add	r0, r5, r9
   30e18:	add	sp, sp, #1040	; 0x410
   30e1c:	add	sp, sp, #12
   30e20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30e24:	ldr	r3, [sp, #16]
   30e28:	add	r9, r3, r9
   30e2c:	add	r9, r2, r9
   30e30:	mov	r0, r8
   30e34:	b	30d2c <__assert_fail@plt+0x1f38c>
   30e38:	ldr	r3, [sp, #8]
   30e3c:	add	r9, r9, r3
   30e40:	b	30e30 <__assert_fail@plt+0x1f490>
   30e44:	mov	ip, #1
   30e48:	mov	r2, ip
   30e4c:	mov	r8, ip
   30e50:	mov	r1, #0
   30e54:	mvn	r0, #0
   30e58:	add	r3, r2, r1
   30e5c:	cmp	r4, r3
   30e60:	add	lr, r6, r0
   30e64:	bls	30e94 <__assert_fail@plt+0x1f4f4>
   30e68:	ldrb	lr, [lr, r2]
   30e6c:	ldrb	r7, [r6, r3]
   30e70:	cmp	r7, lr
   30e74:	bcs	30f28 <__assert_fail@plt+0x1f588>
   30e78:	mov	r1, r3
   30e7c:	mov	r2, #1
   30e80:	sub	ip, r3, r0
   30e84:	add	r3, r2, r1
   30e88:	cmp	r4, r3
   30e8c:	add	lr, r6, r0
   30e90:	bhi	30e68 <__assert_fail@plt+0x1f4c8>
   30e94:	mov	r3, #1
   30e98:	mov	r8, r3
   30e9c:	mov	r2, r3
   30ea0:	mov	r1, #0
   30ea4:	mvn	r7, #0
   30ea8:	str	r3, [sp]
   30eac:	add	r3, r2, r1
   30eb0:	cmp	r4, r3
   30eb4:	add	lr, r6, r7
   30eb8:	bls	30eec <__assert_fail@plt+0x1f54c>
   30ebc:	ldrb	lr, [lr, r2]
   30ec0:	ldrb	r9, [r6, r3]
   30ec4:	cmp	r9, lr
   30ec8:	bls	30f10 <__assert_fail@plt+0x1f570>
   30ecc:	sub	r2, r3, r7
   30ed0:	str	r2, [sp]
   30ed4:	mov	r1, r3
   30ed8:	mov	r2, #1
   30edc:	add	r3, r2, r1
   30ee0:	cmp	r4, r3
   30ee4:	add	lr, r6, r7
   30ee8:	bhi	30ebc <__assert_fail@plt+0x1f51c>
   30eec:	add	r3, r7, #1
   30ef0:	add	r0, r0, #1
   30ef4:	cmp	r3, r0
   30ef8:	ldr	r2, [sp]
   30efc:	movcc	r3, r0
   30f00:	movcc	r2, ip
   30f04:	str	r2, [sp]
   30f08:	mov	r7, r3
   30f0c:	b	30afc <__assert_fail@plt+0x1f15c>
   30f10:	beq	30f40 <__assert_fail@plt+0x1f5a0>
   30f14:	mov	r7, r1
   30f18:	str	r8, [sp]
   30f1c:	add	r1, r1, #1
   30f20:	mov	r2, #1
   30f24:	b	30eac <__assert_fail@plt+0x1f50c>
   30f28:	beq	30f58 <__assert_fail@plt+0x1f5b8>
   30f2c:	mov	r0, r1
   30f30:	mov	ip, r8
   30f34:	add	r1, r1, #1
   30f38:	mov	r2, #1
   30f3c:	b	30e58 <__assert_fail@plt+0x1f4b8>
   30f40:	ldr	lr, [sp]
   30f44:	cmp	r2, lr
   30f48:	addne	r2, r2, #1
   30f4c:	moveq	r1, r3
   30f50:	moveq	r2, #1
   30f54:	b	30eac <__assert_fail@plt+0x1f50c>
   30f58:	cmp	r2, ip
   30f5c:	addne	r2, r2, #1
   30f60:	moveq	r1, r3
   30f64:	moveq	r2, #1
   30f68:	b	30e58 <__assert_fail@plt+0x1f4b8>
   30f6c:	mov	r1, r6
   30f70:	b	30ca8 <__assert_fail@plt+0x1f308>
   30f74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30f78:	sub	sp, sp, #28
   30f7c:	ldrb	r2, [r0]
   30f80:	cmp	r2, #0
   30f84:	beq	3140c <__assert_fail@plt+0x1fa6c>
   30f88:	ldrb	ip, [r1]
   30f8c:	cmp	ip, #0
   30f90:	beq	31044 <__assert_fail@plt+0x1f6a4>
   30f94:	mov	r8, r0
   30f98:	add	lr, r1, #1
   30f9c:	mov	sl, #1
   30fa0:	b	30fb0 <__assert_fail@plt+0x1f610>
   30fa4:	ldrb	ip, [lr], #1
   30fa8:	cmp	ip, #0
   30fac:	beq	30fd8 <__assert_fail@plt+0x1f638>
   30fb0:	cmp	ip, r2
   30fb4:	movne	sl, #0
   30fb8:	andeq	sl, sl, #1
   30fbc:	ldrb	r2, [r8, #1]!
   30fc0:	mov	r6, lr
   30fc4:	cmp	r2, #0
   30fc8:	bne	30fa4 <__assert_fail@plt+0x1f604>
   30fcc:	ldrb	r3, [r6]
   30fd0:	cmp	r3, #0
   30fd4:	bne	31040 <__assert_fail@plt+0x1f6a0>
   30fd8:	cmp	sl, #0
   30fdc:	bne	31044 <__assert_fail@plt+0x1f6a4>
   30fe0:	mov	r4, r1
   30fe4:	mov	r5, r0
   30fe8:	ldrb	r1, [r1]
   30fec:	add	r0, r0, #1
   30ff0:	bl	117b4 <strchr@plt>
   30ff4:	sub	r4, r6, r4
   30ff8:	subs	r7, r0, #0
   30ffc:	beq	31040 <__assert_fail@plt+0x1f6a0>
   31000:	cmp	r4, #1
   31004:	beq	31404 <__assert_fail@plt+0x1fa64>
   31008:	add	r0, r5, r4
   3100c:	cmp	r7, r0
   31010:	subls	r1, r0, r7
   31014:	movhi	r1, #1
   31018:	cmp	r4, #31
   3101c:	sub	r6, r6, r4
   31020:	mov	r9, r1
   31024:	bls	3104c <__assert_fail@plt+0x1f6ac>
   31028:	mov	r3, r4
   3102c:	mov	r2, r6
   31030:	mov	r0, r7
   31034:	add	sp, sp, #28
   31038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3103c:	b	30ac8 <__assert_fail@plt+0x1f128>
   31040:	mov	r0, #0
   31044:	add	sp, sp, #28
   31048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3104c:	cmp	r4, #2
   31050:	bhi	312d4 <__assert_fail@plt+0x1f934>
   31054:	mov	r3, #1
   31058:	sub	r8, r4, #1
   3105c:	mov	r5, r3
   31060:	str	r3, [sp, #4]
   31064:	mov	r2, r8
   31068:	add	r1, r6, r5
   3106c:	mov	r0, r6
   31070:	bl	1161c <memcmp@plt>
   31074:	subs	fp, r0, #0
   31078:	bne	311b0 <__assert_fail@plt+0x1f810>
   3107c:	sub	r3, r8, #1
   31080:	str	r3, [sp, #8]
   31084:	add	r3, r6, r3
   31088:	str	r3, [sp, #20]
   3108c:	mov	sl, fp
   31090:	sub	r3, r4, r5
   31094:	mov	r0, r9
   31098:	str	r3, [sp, #16]
   3109c:	rsb	r3, r8, #1
   310a0:	str	r3, [sp, #12]
   310a4:	add	r5, r4, sl
   310a8:	sub	r2, r5, r0
   310ac:	mov	r1, #0
   310b0:	add	r0, r7, r0
   310b4:	bl	1185c <memchr@plt>
   310b8:	adds	r3, r5, #0
   310bc:	movne	r3, #1
   310c0:	cmp	r0, #0
   310c4:	movne	r3, #0
   310c8:	cmp	r3, #0
   310cc:	mov	r0, r3
   310d0:	beq	31044 <__assert_fail@plt+0x1f6a4>
   310d4:	cmp	r8, fp
   310d8:	movcs	r3, r8
   310dc:	movcc	r3, fp
   310e0:	cmp	r4, r3
   310e4:	bls	31124 <__assert_fail@plt+0x1f784>
   310e8:	add	r2, r3, sl
   310ec:	ldrb	r1, [r6, r3]
   310f0:	ldrb	r0, [r7, r2]
   310f4:	add	ip, r6, r3
   310f8:	add	r2, r7, r2
   310fc:	cmp	r1, r0
   31100:	beq	31118 <__assert_fail@plt+0x1f778>
   31104:	b	3119c <__assert_fail@plt+0x1f7fc>
   31108:	ldrb	r0, [ip, #1]!
   3110c:	ldrb	r1, [r2, #1]!
   31110:	cmp	r0, r1
   31114:	bne	3119c <__assert_fail@plt+0x1f7fc>
   31118:	add	r3, r3, #1
   3111c:	cmp	r4, r3
   31120:	bne	31108 <__assert_fail@plt+0x1f768>
   31124:	ldr	r3, [sp, #8]
   31128:	cmp	r8, fp
   3112c:	mov	r1, r3
   31130:	bls	313fc <__assert_fail@plt+0x1fa5c>
   31134:	ldr	ip, [sp, #20]
   31138:	add	r2, sl, r3
   3113c:	ldrb	r3, [ip]
   31140:	ldrb	r0, [r7, r2]
   31144:	add	r2, r7, r2
   31148:	cmp	r0, r3
   3114c:	bne	313fc <__assert_fail@plt+0x1fa5c>
   31150:	mov	r0, ip
   31154:	sub	r9, fp, #1
   31158:	b	31170 <__assert_fail@plt+0x1f7d0>
   3115c:	ldrb	lr, [r0, #-1]!
   31160:	ldrb	ip, [r2, #-1]!
   31164:	cmp	lr, ip
   31168:	bne	3117c <__assert_fail@plt+0x1f7dc>
   3116c:	mov	r1, r3
   31170:	sub	r3, r1, #1
   31174:	cmp	r3, r9
   31178:	bne	3115c <__assert_fail@plt+0x1f7bc>
   3117c:	add	fp, fp, #1
   31180:	cmp	fp, r1
   31184:	bhi	31418 <__assert_fail@plt+0x1fa78>
   31188:	ldr	r3, [sp, #4]
   3118c:	ldr	fp, [sp, #16]
   31190:	add	sl, sl, r3
   31194:	mov	r0, r5
   31198:	b	310a4 <__assert_fail@plt+0x1f704>
   3119c:	ldr	r2, [sp, #12]
   311a0:	mov	fp, #0
   311a4:	add	sl, r2, sl
   311a8:	add	sl, sl, r3
   311ac:	b	31194 <__assert_fail@plt+0x1f7f4>
   311b0:	sub	r3, r4, r8
   311b4:	cmp	r3, r8
   311b8:	movcc	r3, r8
   311bc:	sub	r2, r8, #1
   311c0:	add	r3, r3, #1
   311c4:	str	r3, [sp, #8]
   311c8:	add	r3, r6, r2
   311cc:	str	r3, [sp, #12]
   311d0:	add	sl, r6, r8
   311d4:	rsb	r3, r8, #1
   311d8:	mov	r0, r9
   311dc:	mov	r5, #0
   311e0:	mov	r9, r8
   311e4:	mov	r8, r2
   311e8:	str	r3, [sp, #4]
   311ec:	add	fp, r4, r5
   311f0:	sub	r2, fp, r0
   311f4:	mov	r1, #0
   311f8:	add	r0, r7, r0
   311fc:	bl	1185c <memchr@plt>
   31200:	cmp	fp, #0
   31204:	clz	r0, r0
   31208:	lsr	r0, r0, #5
   3120c:	moveq	r0, #0
   31210:	cmp	r0, #0
   31214:	beq	31044 <__assert_fail@plt+0x1f6a4>
   31218:	cmp	r4, r9
   3121c:	bls	31264 <__assert_fail@plt+0x1f8c4>
   31220:	add	r1, r9, r5
   31224:	ldrb	r0, [sl]
   31228:	ldrb	r2, [r7, r1]
   3122c:	add	r1, r7, r1
   31230:	cmp	r0, r2
   31234:	movne	r2, r9
   31238:	bne	312b4 <__assert_fail@plt+0x1f914>
   3123c:	mov	r0, sl
   31240:	mov	r2, r9
   31244:	b	31258 <__assert_fail@plt+0x1f8b8>
   31248:	ldrb	ip, [r0, #1]!
   3124c:	ldrb	r3, [r1, #1]!
   31250:	cmp	ip, r3
   31254:	bne	312b4 <__assert_fail@plt+0x1f914>
   31258:	add	r2, r2, #1
   3125c:	cmp	r4, r2
   31260:	bhi	31248 <__assert_fail@plt+0x1f8a8>
   31264:	cmn	r8, #1
   31268:	beq	312a8 <__assert_fail@plt+0x1f908>
   3126c:	ldr	r3, [sp, #12]
   31270:	add	r1, r5, r8
   31274:	ldrb	r2, [r3]
   31278:	ldrb	r0, [r7, r1]
   3127c:	add	r1, r7, r1
   31280:	cmp	r0, r2
   31284:	bne	312c8 <__assert_fail@plt+0x1f928>
   31288:	mov	r2, r3
   3128c:	b	312a0 <__assert_fail@plt+0x1f900>
   31290:	ldrb	r0, [r2, #-1]!
   31294:	ldrb	r3, [r1, #-1]!
   31298:	cmp	r0, r3
   3129c:	bne	312c8 <__assert_fail@plt+0x1f928>
   312a0:	cmp	r6, r2
   312a4:	bne	31290 <__assert_fail@plt+0x1f8f0>
   312a8:	add	r0, r7, r5
   312ac:	add	sp, sp, #28
   312b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   312b4:	ldr	r3, [sp, #4]
   312b8:	add	r5, r3, r5
   312bc:	add	r5, r5, r2
   312c0:	mov	r0, fp
   312c4:	b	311ec <__assert_fail@plt+0x1f84c>
   312c8:	ldr	r3, [sp, #8]
   312cc:	add	r5, r5, r3
   312d0:	b	312c0 <__assert_fail@plt+0x1f920>
   312d4:	mov	ip, #1
   312d8:	mov	r2, ip
   312dc:	mov	r8, ip
   312e0:	mov	r1, #0
   312e4:	mvn	r0, #0
   312e8:	add	r3, r2, r1
   312ec:	cmp	r4, r3
   312f0:	add	lr, r6, r2
   312f4:	bls	31324 <__assert_fail@plt+0x1f984>
   312f8:	ldrb	lr, [lr, r0]
   312fc:	ldrb	r5, [r6, r3]
   31300:	cmp	r5, lr
   31304:	bcs	313b8 <__assert_fail@plt+0x1fa18>
   31308:	mov	r2, #1
   3130c:	mov	r1, r3
   31310:	sub	ip, r3, r0
   31314:	add	r3, r2, r1
   31318:	cmp	r4, r3
   3131c:	add	lr, r6, r2
   31320:	bhi	312f8 <__assert_fail@plt+0x1f958>
   31324:	mov	r3, #1
   31328:	mov	r5, r3
   3132c:	mov	r2, r3
   31330:	mov	r1, #0
   31334:	mvn	r8, #0
   31338:	str	r3, [sp, #4]
   3133c:	add	r3, r2, r1
   31340:	cmp	r4, r3
   31344:	add	lr, r6, r8
   31348:	bls	3137c <__assert_fail@plt+0x1f9dc>
   3134c:	ldrb	lr, [lr, r2]
   31350:	ldrb	sl, [r6, r3]
   31354:	cmp	sl, lr
   31358:	bls	313a0 <__assert_fail@plt+0x1fa00>
   3135c:	sub	r2, r3, r8
   31360:	str	r2, [sp, #4]
   31364:	mov	r1, r3
   31368:	mov	r2, #1
   3136c:	add	r3, r2, r1
   31370:	cmp	r4, r3
   31374:	add	lr, r6, r8
   31378:	bhi	3134c <__assert_fail@plt+0x1f9ac>
   3137c:	add	r8, r8, #1
   31380:	add	r0, r0, #1
   31384:	ldr	r3, [sp, #4]
   31388:	cmp	r8, r0
   3138c:	movcc	r3, ip
   31390:	str	r3, [sp, #4]
   31394:	movcc	r8, r0
   31398:	mov	r5, r3
   3139c:	b	31064 <__assert_fail@plt+0x1f6c4>
   313a0:	beq	313d0 <__assert_fail@plt+0x1fa30>
   313a4:	mov	r8, r1
   313a8:	str	r5, [sp, #4]
   313ac:	add	r1, r1, #1
   313b0:	mov	r2, #1
   313b4:	b	3133c <__assert_fail@plt+0x1f99c>
   313b8:	beq	313e8 <__assert_fail@plt+0x1fa48>
   313bc:	mov	r0, r1
   313c0:	mov	ip, r8
   313c4:	add	r1, r1, #1
   313c8:	mov	r2, #1
   313cc:	b	312e8 <__assert_fail@plt+0x1f948>
   313d0:	ldr	lr, [sp, #4]
   313d4:	cmp	r2, lr
   313d8:	addne	r2, r2, #1
   313dc:	moveq	r1, r3
   313e0:	moveq	r2, #1
   313e4:	b	3133c <__assert_fail@plt+0x1f99c>
   313e8:	cmp	r2, ip
   313ec:	addne	r2, r2, #1
   313f0:	moveq	r1, r3
   313f4:	moveq	r2, #1
   313f8:	b	312e8 <__assert_fail@plt+0x1f948>
   313fc:	mov	r1, r8
   31400:	b	3117c <__assert_fail@plt+0x1f7dc>
   31404:	mov	r0, r7
   31408:	b	31044 <__assert_fail@plt+0x1f6a4>
   3140c:	mov	r6, r1
   31410:	mov	sl, #1
   31414:	b	30fcc <__assert_fail@plt+0x1f62c>
   31418:	add	r0, r7, sl
   3141c:	b	31044 <__assert_fail@plt+0x1f6a4>
   31420:	ldr	r3, [pc, #8]	; 31430 <__assert_fail@plt+0x1fa90>
   31424:	push	{r4, lr}
   31428:	ldr	r0, [r3]
   3142c:	bl	11784 <exit@plt>
   31430:			; <UNDEFINED> instruction: 0x000451bc
   31434:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31438:	mov	r4, r1
   3143c:	sub	sp, sp, #12
   31440:	mov	r5, r2
   31444:	str	r2, [sp, #4]
   31448:	mov	r7, r3
   3144c:	mov	sl, r0
   31450:	bl	117a8 <strlen@plt>
   31454:	ldr	fp, [r4]
   31458:	cmp	fp, #0
   3145c:	beq	31570 <__assert_fail@plt+0x1fbd0>
   31460:	cmp	r5, #0
   31464:	mov	r8, r0
   31468:	mov	r3, r5
   3146c:	beq	31518 <__assert_fail@plt+0x1fb78>
   31470:	mov	r2, #0
   31474:	mov	r5, r2
   31478:	mov	r6, r3
   3147c:	mvn	r9, #0
   31480:	str	r2, [sp]
   31484:	mov	r2, r8
   31488:	mov	r1, sl
   3148c:	mov	r0, fp
   31490:	bl	11958 <strncmp@plt>
   31494:	cmp	r0, #0
   31498:	mov	r0, fp
   3149c:	bne	314dc <__assert_fail@plt+0x1fb3c>
   314a0:	bl	117a8 <strlen@plt>
   314a4:	ldr	r3, [sp, #4]
   314a8:	mov	r2, r7
   314ac:	mov	r1, r6
   314b0:	cmp	r8, r0
   314b4:	mla	r0, r7, r9, r3
   314b8:	beq	31508 <__assert_fail@plt+0x1fb68>
   314bc:	cmn	r9, #1
   314c0:	moveq	r9, r5
   314c4:	beq	314dc <__assert_fail@plt+0x1fb3c>
   314c8:	bl	1161c <memcmp@plt>
   314cc:	ldr	r3, [sp]
   314d0:	cmp	r0, #0
   314d4:	movne	r3, #1
   314d8:	str	r3, [sp]
   314dc:	ldr	fp, [r4, #4]!
   314e0:	add	r5, r5, #1
   314e4:	cmp	fp, #0
   314e8:	add	r6, r6, r7
   314ec:	bne	31484 <__assert_fail@plt+0x1fae4>
   314f0:	ldr	r3, [sp]
   314f4:	cmp	r3, #0
   314f8:	mvnne	r9, #1
   314fc:	mov	r0, r9
   31500:	add	sp, sp, #12
   31504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31508:	mov	r9, r5
   3150c:	mov	r0, r9
   31510:	add	sp, sp, #12
   31514:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31518:	mov	r6, r5
   3151c:	mvn	r9, #0
   31520:	mov	r2, r8
   31524:	mov	r1, sl
   31528:	mov	r0, fp
   3152c:	bl	11958 <strncmp@plt>
   31530:	cmp	r0, #0
   31534:	mov	r0, fp
   31538:	bne	31554 <__assert_fail@plt+0x1fbb4>
   3153c:	bl	117a8 <strlen@plt>
   31540:	cmp	r8, r0
   31544:	beq	31508 <__assert_fail@plt+0x1fb68>
   31548:	cmn	r9, #1
   3154c:	moveq	r9, r5
   31550:	movne	r6, #1
   31554:	ldr	fp, [r4, #4]!
   31558:	add	r5, r5, #1
   3155c:	cmp	fp, #0
   31560:	bne	31520 <__assert_fail@plt+0x1fb80>
   31564:	str	r6, [sp]
   31568:	mov	r3, r6
   3156c:	b	314f4 <__assert_fail@plt+0x1fb54>
   31570:	mvn	r9, #0
   31574:	b	314fc <__assert_fail@plt+0x1fb5c>
   31578:	cmn	r2, #1
   3157c:	push	{r4, r5, r6, lr}
   31580:	mov	r2, #5
   31584:	sub	sp, sp, #8
   31588:	mov	r4, r1
   3158c:	mov	r5, r0
   31590:	ldreq	r1, [pc, #76]	; 315e4 <__assert_fail@plt+0x1fc44>
   31594:	ldrne	r1, [pc, #76]	; 315e8 <__assert_fail@plt+0x1fc48>
   31598:	mov	r0, #0
   3159c:	bl	11628 <dcgettext@plt>
   315a0:	mov	r2, r4
   315a4:	mov	r1, #8
   315a8:	mov	r6, r0
   315ac:	mov	r0, #0
   315b0:	bl	1b064 <__assert_fail@plt+0x96c4>
   315b4:	mov	r1, r5
   315b8:	mov	r4, r0
   315bc:	mov	r0, #1
   315c0:	bl	1cc00 <__assert_fail@plt+0xb260>
   315c4:	mov	r1, #0
   315c8:	mov	r3, r4
   315cc:	mov	r2, r6
   315d0:	str	r0, [sp]
   315d4:	mov	r0, r1
   315d8:	bl	116d0 <error@plt>
   315dc:	add	sp, sp, #8
   315e0:	pop	{r4, r5, r6, pc}
   315e4:	andeq	r4, r3, r8, asr #32
   315e8:	andeq	r4, r3, r4, rrx
   315ec:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   315f0:	mov	r7, r0
   315f4:	ldr	r9, [pc, #188]	; 316b8 <__assert_fail@plt+0x1fd18>
   315f8:	mov	r4, r1
   315fc:	mov	r8, r2
   31600:	ldr	r1, [pc, #180]	; 316bc <__assert_fail@plt+0x1fd1c>
   31604:	mov	r2, #5
   31608:	mov	r0, #0
   3160c:	bl	11628 <dcgettext@plt>
   31610:	ldr	r1, [r9]
   31614:	bl	1194c <fputs@plt>
   31618:	ldr	r5, [r7]
   3161c:	cmp	r5, #0
   31620:	beq	316a8 <__assert_fail@plt+0x1fd08>
   31624:	mov	fp, #0
   31628:	ldr	sl, [pc, #144]	; 316c0 <__assert_fail@plt+0x1fd20>
   3162c:	mov	r6, fp
   31630:	b	31668 <__assert_fail@plt+0x1fcc8>
   31634:	mov	r0, r5
   31638:	ldr	r5, [r9]
   3163c:	bl	1cdb4 <__assert_fail@plt+0xb414>
   31640:	mov	r1, sl
   31644:	mov	fp, r4
   31648:	mov	r2, r0
   3164c:	mov	r0, r5
   31650:	bl	117c0 <fprintf@plt>
   31654:	ldr	r5, [r7, #4]!
   31658:	add	r6, r6, #1
   3165c:	cmp	r5, #0
   31660:	add	r4, r4, r8
   31664:	beq	316a8 <__assert_fail@plt+0x1fd08>
   31668:	cmp	r6, #0
   3166c:	mov	r1, r4
   31670:	mov	r2, r8
   31674:	mov	r0, fp
   31678:	beq	31634 <__assert_fail@plt+0x1fc94>
   3167c:	bl	1161c <memcmp@plt>
   31680:	cmp	r0, #0
   31684:	bne	31634 <__assert_fail@plt+0x1fc94>
   31688:	mov	r0, r5
   3168c:	ldr	r5, [r9]
   31690:	bl	1cdb4 <__assert_fail@plt+0xb414>
   31694:	ldr	r1, [pc, #40]	; 316c4 <__assert_fail@plt+0x1fd24>
   31698:	mov	r2, r0
   3169c:	mov	r0, r5
   316a0:	bl	117c0 <fprintf@plt>
   316a4:	b	31654 <__assert_fail@plt+0x1fcb4>
   316a8:	ldr	r1, [r9]
   316ac:	mov	r0, #10
   316b0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   316b4:	b	118f8 <putc@plt>
   316b8:	andeq	r5, r4, r8, lsl r2
   316bc:	andeq	r4, r3, r4, lsl #1
   316c0:	muleq	r3, ip, r0
   316c4:	andeq	r4, r3, r4, lsr #1
   316c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   316cc:	sub	sp, sp, #28
   316d0:	mov	r4, r2
   316d4:	str	r0, [sp, #20]
   316d8:	mov	r0, r1
   316dc:	mov	sl, r1
   316e0:	str	r2, [sp, #16]
   316e4:	mov	r5, r3
   316e8:	str	r3, [sp, #12]
   316ec:	bl	117a8 <strlen@plt>
   316f0:	ldr	fp, [r4]
   316f4:	ldr	r6, [sp, #64]	; 0x40
   316f8:	cmp	fp, #0
   316fc:	beq	31890 <__assert_fail@plt+0x1fef0>
   31700:	cmp	r5, #0
   31704:	mov	r8, r0
   31708:	beq	317c0 <__assert_fail@plt+0x1fe20>
   3170c:	mov	r2, r4
   31710:	mov	r1, #0
   31714:	mov	r4, r1
   31718:	mov	r7, r2
   3171c:	mvn	r9, #0
   31720:	str	r1, [sp, #8]
   31724:	mov	r2, r8
   31728:	mov	r1, sl
   3172c:	mov	r0, fp
   31730:	bl	11958 <strncmp@plt>
   31734:	cmp	r0, #0
   31738:	mov	r0, fp
   3173c:	bne	3177c <__assert_fail@plt+0x1fddc>
   31740:	bl	117a8 <strlen@plt>
   31744:	ldr	r3, [sp, #12]
   31748:	mov	r2, r6
   3174c:	mov	r1, r5
   31750:	cmp	r8, r0
   31754:	mla	r0, r6, r9, r3
   31758:	beq	317b0 <__assert_fail@plt+0x1fe10>
   3175c:	cmn	r9, #1
   31760:	moveq	r9, r4
   31764:	beq	3177c <__assert_fail@plt+0x1fddc>
   31768:	bl	1161c <memcmp@plt>
   3176c:	ldr	r3, [sp, #8]
   31770:	cmp	r0, #0
   31774:	movne	r3, #1
   31778:	str	r3, [sp, #8]
   3177c:	ldr	fp, [r7, #4]!
   31780:	add	r4, r4, #1
   31784:	cmp	fp, #0
   31788:	add	r5, r5, r6
   3178c:	bne	31724 <__assert_fail@plt+0x1fd84>
   31790:	ldr	r3, [sp, #8]
   31794:	cmp	r3, #0
   31798:	bne	31824 <__assert_fail@plt+0x1fe84>
   3179c:	cmn	r9, #1
   317a0:	beq	31890 <__assert_fail@plt+0x1fef0>
   317a4:	mov	r0, r9
   317a8:	add	sp, sp, #28
   317ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   317b0:	mov	r9, r4
   317b4:	mov	r0, r9
   317b8:	add	sp, sp, #28
   317bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   317c0:	ldr	r3, [sp, #12]
   317c4:	mov	r5, r4
   317c8:	mov	r7, r3
   317cc:	mvn	r9, #0
   317d0:	mov	r4, r3
   317d4:	mov	r2, r8
   317d8:	mov	r1, sl
   317dc:	mov	r0, fp
   317e0:	bl	11958 <strncmp@plt>
   317e4:	cmp	r0, #0
   317e8:	mov	r0, fp
   317ec:	bne	31808 <__assert_fail@plt+0x1fe68>
   317f0:	bl	117a8 <strlen@plt>
   317f4:	cmp	r8, r0
   317f8:	beq	317b0 <__assert_fail@plt+0x1fe10>
   317fc:	cmn	r9, #1
   31800:	moveq	r9, r4
   31804:	movne	r7, #1
   31808:	ldr	fp, [r5, #4]!
   3180c:	add	r4, r4, #1
   31810:	cmp	fp, #0
   31814:	bne	317d4 <__assert_fail@plt+0x1fe34>
   31818:	str	r7, [sp, #8]
   3181c:	mov	r3, r7
   31820:	b	31794 <__assert_fail@plt+0x1fdf4>
   31824:	mov	r2, #5
   31828:	ldr	r1, [pc, #120]	; 318a8 <__assert_fail@plt+0x1ff08>
   3182c:	mov	r0, #0
   31830:	bl	11628 <dcgettext@plt>
   31834:	mov	r4, r0
   31838:	mov	r2, sl
   3183c:	mov	r1, #8
   31840:	mov	r0, #0
   31844:	bl	1b064 <__assert_fail@plt+0x96c4>
   31848:	ldr	r1, [sp, #20]
   3184c:	mvn	r9, #0
   31850:	mov	r5, r0
   31854:	mov	r0, #1
   31858:	bl	1cc00 <__assert_fail@plt+0xb260>
   3185c:	mov	r1, #0
   31860:	mov	r3, r5
   31864:	mov	r2, r4
   31868:	str	r0, [sp]
   3186c:	mov	r0, r1
   31870:	bl	116d0 <error@plt>
   31874:	mov	r2, r6
   31878:	ldr	r1, [sp, #12]
   3187c:	ldr	r0, [sp, #16]
   31880:	bl	315ec <__assert_fail@plt+0x1fc4c>
   31884:	ldr	r3, [sp, #68]	; 0x44
   31888:	blx	r3
   3188c:	b	317a4 <__assert_fail@plt+0x1fe04>
   31890:	mov	r2, #5
   31894:	ldr	r1, [pc, #16]	; 318ac <__assert_fail@plt+0x1ff0c>
   31898:	mov	r0, #0
   3189c:	bl	11628 <dcgettext@plt>
   318a0:	mov	r4, r0
   318a4:	b	31838 <__assert_fail@plt+0x1fe98>
   318a8:	andeq	r4, r3, r4, rrx
   318ac:	andeq	r4, r3, r8, asr #32
   318b0:	push	{r4, r5, r6, r7, r8, lr}
   318b4:	ldr	r7, [r1]
   318b8:	cmp	r7, #0
   318bc:	beq	318fc <__assert_fail@plt+0x1ff5c>
   318c0:	mov	r6, r3
   318c4:	mov	r8, r0
   318c8:	mov	r4, r2
   318cc:	mov	r5, r1
   318d0:	b	318e0 <__assert_fail@plt+0x1ff40>
   318d4:	ldr	r7, [r5, #4]!
   318d8:	cmp	r7, #0
   318dc:	beq	318fc <__assert_fail@plt+0x1ff5c>
   318e0:	mov	r1, r4
   318e4:	mov	r2, r6
   318e8:	mov	r0, r8
   318ec:	bl	1161c <memcmp@plt>
   318f0:	add	r4, r4, r6
   318f4:	cmp	r0, #0
   318f8:	bne	318d4 <__assert_fail@plt+0x1ff34>
   318fc:	mov	r0, r7
   31900:	pop	{r4, r5, r6, r7, r8, pc}
   31904:	push	{r4, r5, r6, lr}
   31908:	mov	r4, r0
   3190c:	bl	116b8 <__fpending@plt>
   31910:	mov	r6, r0
   31914:	mov	r0, r4
   31918:	bl	115b0 <ferror@plt>
   3191c:	mov	r5, r0
   31920:	mov	r0, r4
   31924:	bl	11868 <fclose@plt>
   31928:	cmp	r5, #0
   3192c:	mov	r4, r0
   31930:	bne	31950 <__assert_fail@plt+0x1ffb0>
   31934:	cmp	r0, #0
   31938:	beq	31948 <__assert_fail@plt+0x1ffa8>
   3193c:	cmp	r6, #0
   31940:	beq	3196c <__assert_fail@plt+0x1ffcc>
   31944:	mvn	r4, #0
   31948:	mov	r0, r4
   3194c:	pop	{r4, r5, r6, pc}
   31950:	cmp	r0, #0
   31954:	bne	31944 <__assert_fail@plt+0x1ffa4>
   31958:	bl	117d8 <__errno_location@plt>
   3195c:	str	r4, [r0]
   31960:	mvn	r4, #0
   31964:	mov	r0, r4
   31968:	pop	{r4, r5, r6, pc}
   3196c:	bl	117d8 <__errno_location@plt>
   31970:	ldr	r4, [r0]
   31974:	subs	r4, r4, #9
   31978:	mvnne	r4, #0
   3197c:	mov	r0, r4
   31980:	pop	{r4, r5, r6, pc}
   31984:	ldr	ip, [r0, #4]
   31988:	cmp	ip, r1
   3198c:	bcs	31a08 <__assert_fail@plt+0x20068>
   31990:	cmp	r3, #0
   31994:	push	{r4, r5, r6, r7, r8, lr}
   31998:	mov	r6, r3
   3199c:	mov	r7, r2
   319a0:	mov	r5, r1
   319a4:	mov	r4, r0
   319a8:	bne	319dc <__assert_fail@plt+0x2003c>
   319ac:	ldr	r0, [r4, #8]
   319b0:	mul	r1, r6, r5
   319b4:	cmp	r0, r7
   319b8:	beq	31a18 <__assert_fail@plt+0x20078>
   319bc:	bl	1f190 <__assert_fail@plt+0xd7f0>
   319c0:	subs	r7, r0, #0
   319c4:	beq	31a44 <__assert_fail@plt+0x200a4>
   319c8:	mov	r3, #1
   319cc:	stmib	r4, {r5, r7}
   319d0:	str	r5, [r4]
   319d4:	mov	r0, r3
   319d8:	pop	{r4, r5, r6, r7, r8, pc}
   319dc:	mov	r1, r3
   319e0:	mvn	r0, #0
   319e4:	bl	31c94 <__assert_fail@plt+0x202f4>
   319e8:	cmp	r5, r0
   319ec:	bls	319ac <__assert_fail@plt+0x2000c>
   319f0:	bl	117d8 <__errno_location@plt>
   319f4:	mov	r3, #0
   319f8:	mov	r2, #12
   319fc:	str	r2, [r0]
   31a00:	mov	r0, r3
   31a04:	pop	{r4, r5, r6, r7, r8, pc}
   31a08:	mov	r3, #1
   31a0c:	str	r1, [r0]
   31a10:	mov	r0, r3
   31a14:	bx	lr
   31a18:	mov	r0, r1
   31a1c:	bl	1f110 <__assert_fail@plt+0xd770>
   31a20:	subs	r7, r0, #0
   31a24:	beq	31a44 <__assert_fail@plt+0x200a4>
   31a28:	ldr	r1, [r4, #8]
   31a2c:	cmp	r1, #0
   31a30:	beq	319c8 <__assert_fail@plt+0x20028>
   31a34:	ldr	r2, [r4]
   31a38:	mul	r2, r2, r6
   31a3c:	bl	115d4 <memcpy@plt>
   31a40:	b	319c8 <__assert_fail@plt+0x20028>
   31a44:	mov	r3, #0
   31a48:	b	319d4 <__assert_fail@plt+0x20034>
   31a4c:	push	{lr}		; (str lr, [sp, #-4]!)
   31a50:	sub	sp, sp, #268	; 0x10c
   31a54:	add	r1, sp, #4
   31a58:	ldr	r2, [pc, #60]	; 31a9c <__assert_fail@plt+0x200fc>
   31a5c:	bl	31bf0 <__assert_fail@plt+0x20250>
   31a60:	cmp	r0, #0
   31a64:	movne	r0, #0
   31a68:	bne	31a94 <__assert_fail@plt+0x200f4>
   31a6c:	ldr	r1, [pc, #44]	; 31aa0 <__assert_fail@plt+0x20100>
   31a70:	add	r0, sp, #4
   31a74:	bl	11544 <strcmp@plt>
   31a78:	cmp	r0, #0
   31a7c:	beq	31a94 <__assert_fail@plt+0x200f4>
   31a80:	add	r0, sp, #4
   31a84:	ldr	r1, [pc, #24]	; 31aa4 <__assert_fail@plt+0x20104>
   31a88:	bl	11544 <strcmp@plt>
   31a8c:	adds	r0, r0, #0
   31a90:	movne	r0, #1
   31a94:	add	sp, sp, #268	; 0x10c
   31a98:	pop	{pc}		; (ldr pc, [sp], #4)
   31a9c:	andeq	r0, r0, r1, lsl #2
   31aa0:	andeq	r4, r3, ip, lsr #1
   31aa4:	strheq	r4, [r3], -r0
   31aa8:	push	{r4, lr}
   31aac:	mov	r0, #14
   31ab0:	bl	118b0 <nl_langinfo@plt>
   31ab4:	cmp	r0, #0
   31ab8:	beq	31ad0 <__assert_fail@plt+0x20130>
   31abc:	ldrb	r2, [r0]
   31ac0:	ldr	r3, [pc, #16]	; 31ad8 <__assert_fail@plt+0x20138>
   31ac4:	cmp	r2, #0
   31ac8:	moveq	r0, r3
   31acc:	pop	{r4, pc}
   31ad0:	ldr	r0, [pc]	; 31ad8 <__assert_fail@plt+0x20138>
   31ad4:	pop	{r4, pc}
   31ad8:	strheq	r4, [r3], -r8
   31adc:	cmn	r0, #-2147483631	; 0x80000011
   31ae0:	bls	31aec <__assert_fail@plt+0x2014c>
   31ae4:	mov	r0, #0
   31ae8:	bx	lr
   31aec:	push	{r4, lr}
   31af0:	add	r0, r0, #16
   31af4:	bl	1170c <malloc@plt>
   31af8:	cmp	r0, #0
   31afc:	beq	31b24 <__assert_fail@plt+0x20184>
   31b00:	cmn	r0, #9
   31b04:	addls	r3, r0, #8
   31b08:	bicls	r2, r3, #15
   31b0c:	movhi	r2, #0
   31b10:	rsb	r3, r0, #8
   31b14:	add	r3, r3, r2
   31b18:	add	r0, r0, r3
   31b1c:	strb	r3, [r0, #-1]
   31b20:	pop	{r4, pc}
   31b24:	mov	r0, #0
   31b28:	pop	{r4, pc}
   31b2c:	tst	r0, #7
   31b30:	bne	31b48 <__assert_fail@plt+0x201a8>
   31b34:	tst	r0, #8
   31b38:	bxeq	lr
   31b3c:	ldrb	r3, [r0, #-1]
   31b40:	sub	r0, r0, r3
   31b44:	b	1f018 <__assert_fail@plt+0xd678>
   31b48:	push	{r4, lr}
   31b4c:	bl	11964 <abort@plt>
   31b50:	push	{r4, lr}
   31b54:	mov	r4, r0
   31b58:	bl	11574 <wcwidth@plt>
   31b5c:	cmp	r0, #0
   31b60:	popge	{r4, pc}
   31b64:	mov	r0, r4
   31b68:	bl	1164c <iswcntrl@plt>
   31b6c:	clz	r0, r0
   31b70:	lsr	r0, r0, #5
   31b74:	pop	{r4, pc}
   31b78:	mov	r3, r1
   31b7c:	push	{r4, r5, r6, lr}
   31b80:	mov	r4, r1
   31b84:	ldr	r1, [r3], #16
   31b88:	mov	r5, r0
   31b8c:	cmp	r1, r3
   31b90:	strne	r1, [r0]
   31b94:	beq	31bb8 <__assert_fail@plt+0x20218>
   31b98:	ldrb	r3, [r4, #8]
   31b9c:	ldr	r2, [r4, #4]
   31ba0:	cmp	r3, #0
   31ba4:	strb	r3, [r5, #8]
   31ba8:	ldrne	r3, [r4, #12]
   31bac:	str	r2, [r5, #4]
   31bb0:	strne	r3, [r5, #12]
   31bb4:	pop	{r4, r5, r6, pc}
   31bb8:	add	r3, r0, #16
   31bbc:	mov	r0, r3
   31bc0:	ldr	r2, [r4, #4]
   31bc4:	bl	115d4 <memcpy@plt>
   31bc8:	str	r0, [r5]
   31bcc:	b	31b98 <__assert_fail@plt+0x201f8>
   31bd0:	ldr	r3, [pc, #20]	; 31bec <__assert_fail@plt+0x2024c>
   31bd4:	lsr	r2, r0, #5
   31bd8:	and	r0, r0, #31
   31bdc:	ldr	r3, [r3, r2, lsl #2]
   31be0:	lsr	r0, r3, r0
   31be4:	and	r0, r0, #1
   31be8:	bx	lr
   31bec:	andeq	r4, r3, r0, asr #1
   31bf0:	push	{r4, r5, r6, lr}
   31bf4:	mov	r5, r1
   31bf8:	mov	r1, #0
   31bfc:	mov	r4, r2
   31c00:	bl	11898 <setlocale@plt>
   31c04:	subs	r6, r0, #0
   31c08:	beq	31c64 <__assert_fail@plt+0x202c4>
   31c0c:	bl	117a8 <strlen@plt>
   31c10:	cmp	r4, r0
   31c14:	bhi	31c4c <__assert_fail@plt+0x202ac>
   31c18:	cmp	r4, #0
   31c1c:	bne	31c28 <__assert_fail@plt+0x20288>
   31c20:	mov	r0, #34	; 0x22
   31c24:	pop	{r4, r5, r6, pc}
   31c28:	sub	r4, r4, #1
   31c2c:	mov	r1, r6
   31c30:	mov	r2, r4
   31c34:	mov	r0, r5
   31c38:	bl	115d4 <memcpy@plt>
   31c3c:	mov	r3, #0
   31c40:	strb	r3, [r5, r4]
   31c44:	mov	r0, #34	; 0x22
   31c48:	pop	{r4, r5, r6, pc}
   31c4c:	add	r2, r0, #1
   31c50:	mov	r1, r6
   31c54:	mov	r0, r5
   31c58:	bl	115d4 <memcpy@plt>
   31c5c:	mov	r0, #0
   31c60:	pop	{r4, r5, r6, pc}
   31c64:	cmp	r4, #0
   31c68:	beq	31c78 <__assert_fail@plt+0x202d8>
   31c6c:	strb	r6, [r5]
   31c70:	mov	r0, #22
   31c74:	pop	{r4, r5, r6, pc}
   31c78:	mov	r0, #22
   31c7c:	pop	{r4, r5, r6, pc}
   31c80:	mov	r1, #0
   31c84:	b	11898 <setlocale@plt>
   31c88:	mov	r2, #3
   31c8c:	mov	r1, #0
   31c90:	b	1ede4 <__assert_fail@plt+0xd444>
   31c94:	subs	r2, r1, #1
   31c98:	bxeq	lr
   31c9c:	bcc	31e74 <__assert_fail@plt+0x204d4>
   31ca0:	cmp	r0, r1
   31ca4:	bls	31e58 <__assert_fail@plt+0x204b8>
   31ca8:	tst	r1, r2
   31cac:	beq	31e64 <__assert_fail@plt+0x204c4>
   31cb0:	clz	r3, r0
   31cb4:	clz	r2, r1
   31cb8:	sub	r3, r2, r3
   31cbc:	rsbs	r3, r3, #31
   31cc0:	addne	r3, r3, r3, lsl #1
   31cc4:	mov	r2, #0
   31cc8:	addne	pc, pc, r3, lsl #2
   31ccc:	nop			; (mov r0, r0)
   31cd0:	cmp	r0, r1, lsl #31
   31cd4:	adc	r2, r2, r2
   31cd8:	subcs	r0, r0, r1, lsl #31
   31cdc:	cmp	r0, r1, lsl #30
   31ce0:	adc	r2, r2, r2
   31ce4:	subcs	r0, r0, r1, lsl #30
   31ce8:	cmp	r0, r1, lsl #29
   31cec:	adc	r2, r2, r2
   31cf0:	subcs	r0, r0, r1, lsl #29
   31cf4:	cmp	r0, r1, lsl #28
   31cf8:	adc	r2, r2, r2
   31cfc:	subcs	r0, r0, r1, lsl #28
   31d00:	cmp	r0, r1, lsl #27
   31d04:	adc	r2, r2, r2
   31d08:	subcs	r0, r0, r1, lsl #27
   31d0c:	cmp	r0, r1, lsl #26
   31d10:	adc	r2, r2, r2
   31d14:	subcs	r0, r0, r1, lsl #26
   31d18:	cmp	r0, r1, lsl #25
   31d1c:	adc	r2, r2, r2
   31d20:	subcs	r0, r0, r1, lsl #25
   31d24:	cmp	r0, r1, lsl #24
   31d28:	adc	r2, r2, r2
   31d2c:	subcs	r0, r0, r1, lsl #24
   31d30:	cmp	r0, r1, lsl #23
   31d34:	adc	r2, r2, r2
   31d38:	subcs	r0, r0, r1, lsl #23
   31d3c:	cmp	r0, r1, lsl #22
   31d40:	adc	r2, r2, r2
   31d44:	subcs	r0, r0, r1, lsl #22
   31d48:	cmp	r0, r1, lsl #21
   31d4c:	adc	r2, r2, r2
   31d50:	subcs	r0, r0, r1, lsl #21
   31d54:	cmp	r0, r1, lsl #20
   31d58:	adc	r2, r2, r2
   31d5c:	subcs	r0, r0, r1, lsl #20
   31d60:	cmp	r0, r1, lsl #19
   31d64:	adc	r2, r2, r2
   31d68:	subcs	r0, r0, r1, lsl #19
   31d6c:	cmp	r0, r1, lsl #18
   31d70:	adc	r2, r2, r2
   31d74:	subcs	r0, r0, r1, lsl #18
   31d78:	cmp	r0, r1, lsl #17
   31d7c:	adc	r2, r2, r2
   31d80:	subcs	r0, r0, r1, lsl #17
   31d84:	cmp	r0, r1, lsl #16
   31d88:	adc	r2, r2, r2
   31d8c:	subcs	r0, r0, r1, lsl #16
   31d90:	cmp	r0, r1, lsl #15
   31d94:	adc	r2, r2, r2
   31d98:	subcs	r0, r0, r1, lsl #15
   31d9c:	cmp	r0, r1, lsl #14
   31da0:	adc	r2, r2, r2
   31da4:	subcs	r0, r0, r1, lsl #14
   31da8:	cmp	r0, r1, lsl #13
   31dac:	adc	r2, r2, r2
   31db0:	subcs	r0, r0, r1, lsl #13
   31db4:	cmp	r0, r1, lsl #12
   31db8:	adc	r2, r2, r2
   31dbc:	subcs	r0, r0, r1, lsl #12
   31dc0:	cmp	r0, r1, lsl #11
   31dc4:	adc	r2, r2, r2
   31dc8:	subcs	r0, r0, r1, lsl #11
   31dcc:	cmp	r0, r1, lsl #10
   31dd0:	adc	r2, r2, r2
   31dd4:	subcs	r0, r0, r1, lsl #10
   31dd8:	cmp	r0, r1, lsl #9
   31ddc:	adc	r2, r2, r2
   31de0:	subcs	r0, r0, r1, lsl #9
   31de4:	cmp	r0, r1, lsl #8
   31de8:	adc	r2, r2, r2
   31dec:	subcs	r0, r0, r1, lsl #8
   31df0:	cmp	r0, r1, lsl #7
   31df4:	adc	r2, r2, r2
   31df8:	subcs	r0, r0, r1, lsl #7
   31dfc:	cmp	r0, r1, lsl #6
   31e00:	adc	r2, r2, r2
   31e04:	subcs	r0, r0, r1, lsl #6
   31e08:	cmp	r0, r1, lsl #5
   31e0c:	adc	r2, r2, r2
   31e10:	subcs	r0, r0, r1, lsl #5
   31e14:	cmp	r0, r1, lsl #4
   31e18:	adc	r2, r2, r2
   31e1c:	subcs	r0, r0, r1, lsl #4
   31e20:	cmp	r0, r1, lsl #3
   31e24:	adc	r2, r2, r2
   31e28:	subcs	r0, r0, r1, lsl #3
   31e2c:	cmp	r0, r1, lsl #2
   31e30:	adc	r2, r2, r2
   31e34:	subcs	r0, r0, r1, lsl #2
   31e38:	cmp	r0, r1, lsl #1
   31e3c:	adc	r2, r2, r2
   31e40:	subcs	r0, r0, r1, lsl #1
   31e44:	cmp	r0, r1
   31e48:	adc	r2, r2, r2
   31e4c:	subcs	r0, r0, r1
   31e50:	mov	r0, r2
   31e54:	bx	lr
   31e58:	moveq	r0, #1
   31e5c:	movne	r0, #0
   31e60:	bx	lr
   31e64:	clz	r2, r1
   31e68:	rsb	r2, r2, #31
   31e6c:	lsr	r0, r0, r2
   31e70:	bx	lr
   31e74:	cmp	r0, #0
   31e78:	mvnne	r0, #0
   31e7c:	b	324d4 <__assert_fail@plt+0x20b34>
   31e80:	cmp	r1, #0
   31e84:	beq	31e74 <__assert_fail@plt+0x204d4>
   31e88:	push	{r0, r1, lr}
   31e8c:	bl	31c94 <__assert_fail@plt+0x202f4>
   31e90:	pop	{r1, r2, lr}
   31e94:	mul	r3, r2, r0
   31e98:	sub	r1, r1, r3
   31e9c:	bx	lr
   31ea0:	cmp	r1, #0
   31ea4:	beq	320b0 <__assert_fail@plt+0x20710>
   31ea8:	eor	ip, r0, r1
   31eac:	rsbmi	r1, r1, #0
   31eb0:	subs	r2, r1, #1
   31eb4:	beq	3207c <__assert_fail@plt+0x206dc>
   31eb8:	movs	r3, r0
   31ebc:	rsbmi	r3, r0, #0
   31ec0:	cmp	r3, r1
   31ec4:	bls	32088 <__assert_fail@plt+0x206e8>
   31ec8:	tst	r1, r2
   31ecc:	beq	32098 <__assert_fail@plt+0x206f8>
   31ed0:	clz	r2, r3
   31ed4:	clz	r0, r1
   31ed8:	sub	r2, r0, r2
   31edc:	rsbs	r2, r2, #31
   31ee0:	addne	r2, r2, r2, lsl #1
   31ee4:	mov	r0, #0
   31ee8:	addne	pc, pc, r2, lsl #2
   31eec:	nop			; (mov r0, r0)
   31ef0:	cmp	r3, r1, lsl #31
   31ef4:	adc	r0, r0, r0
   31ef8:	subcs	r3, r3, r1, lsl #31
   31efc:	cmp	r3, r1, lsl #30
   31f00:	adc	r0, r0, r0
   31f04:	subcs	r3, r3, r1, lsl #30
   31f08:	cmp	r3, r1, lsl #29
   31f0c:	adc	r0, r0, r0
   31f10:	subcs	r3, r3, r1, lsl #29
   31f14:	cmp	r3, r1, lsl #28
   31f18:	adc	r0, r0, r0
   31f1c:	subcs	r3, r3, r1, lsl #28
   31f20:	cmp	r3, r1, lsl #27
   31f24:	adc	r0, r0, r0
   31f28:	subcs	r3, r3, r1, lsl #27
   31f2c:	cmp	r3, r1, lsl #26
   31f30:	adc	r0, r0, r0
   31f34:	subcs	r3, r3, r1, lsl #26
   31f38:	cmp	r3, r1, lsl #25
   31f3c:	adc	r0, r0, r0
   31f40:	subcs	r3, r3, r1, lsl #25
   31f44:	cmp	r3, r1, lsl #24
   31f48:	adc	r0, r0, r0
   31f4c:	subcs	r3, r3, r1, lsl #24
   31f50:	cmp	r3, r1, lsl #23
   31f54:	adc	r0, r0, r0
   31f58:	subcs	r3, r3, r1, lsl #23
   31f5c:	cmp	r3, r1, lsl #22
   31f60:	adc	r0, r0, r0
   31f64:	subcs	r3, r3, r1, lsl #22
   31f68:	cmp	r3, r1, lsl #21
   31f6c:	adc	r0, r0, r0
   31f70:	subcs	r3, r3, r1, lsl #21
   31f74:	cmp	r3, r1, lsl #20
   31f78:	adc	r0, r0, r0
   31f7c:	subcs	r3, r3, r1, lsl #20
   31f80:	cmp	r3, r1, lsl #19
   31f84:	adc	r0, r0, r0
   31f88:	subcs	r3, r3, r1, lsl #19
   31f8c:	cmp	r3, r1, lsl #18
   31f90:	adc	r0, r0, r0
   31f94:	subcs	r3, r3, r1, lsl #18
   31f98:	cmp	r3, r1, lsl #17
   31f9c:	adc	r0, r0, r0
   31fa0:	subcs	r3, r3, r1, lsl #17
   31fa4:	cmp	r3, r1, lsl #16
   31fa8:	adc	r0, r0, r0
   31fac:	subcs	r3, r3, r1, lsl #16
   31fb0:	cmp	r3, r1, lsl #15
   31fb4:	adc	r0, r0, r0
   31fb8:	subcs	r3, r3, r1, lsl #15
   31fbc:	cmp	r3, r1, lsl #14
   31fc0:	adc	r0, r0, r0
   31fc4:	subcs	r3, r3, r1, lsl #14
   31fc8:	cmp	r3, r1, lsl #13
   31fcc:	adc	r0, r0, r0
   31fd0:	subcs	r3, r3, r1, lsl #13
   31fd4:	cmp	r3, r1, lsl #12
   31fd8:	adc	r0, r0, r0
   31fdc:	subcs	r3, r3, r1, lsl #12
   31fe0:	cmp	r3, r1, lsl #11
   31fe4:	adc	r0, r0, r0
   31fe8:	subcs	r3, r3, r1, lsl #11
   31fec:	cmp	r3, r1, lsl #10
   31ff0:	adc	r0, r0, r0
   31ff4:	subcs	r3, r3, r1, lsl #10
   31ff8:	cmp	r3, r1, lsl #9
   31ffc:	adc	r0, r0, r0
   32000:	subcs	r3, r3, r1, lsl #9
   32004:	cmp	r3, r1, lsl #8
   32008:	adc	r0, r0, r0
   3200c:	subcs	r3, r3, r1, lsl #8
   32010:	cmp	r3, r1, lsl #7
   32014:	adc	r0, r0, r0
   32018:	subcs	r3, r3, r1, lsl #7
   3201c:	cmp	r3, r1, lsl #6
   32020:	adc	r0, r0, r0
   32024:	subcs	r3, r3, r1, lsl #6
   32028:	cmp	r3, r1, lsl #5
   3202c:	adc	r0, r0, r0
   32030:	subcs	r3, r3, r1, lsl #5
   32034:	cmp	r3, r1, lsl #4
   32038:	adc	r0, r0, r0
   3203c:	subcs	r3, r3, r1, lsl #4
   32040:	cmp	r3, r1, lsl #3
   32044:	adc	r0, r0, r0
   32048:	subcs	r3, r3, r1, lsl #3
   3204c:	cmp	r3, r1, lsl #2
   32050:	adc	r0, r0, r0
   32054:	subcs	r3, r3, r1, lsl #2
   32058:	cmp	r3, r1, lsl #1
   3205c:	adc	r0, r0, r0
   32060:	subcs	r3, r3, r1, lsl #1
   32064:	cmp	r3, r1
   32068:	adc	r0, r0, r0
   3206c:	subcs	r3, r3, r1
   32070:	cmp	ip, #0
   32074:	rsbmi	r0, r0, #0
   32078:	bx	lr
   3207c:	teq	ip, r0
   32080:	rsbmi	r0, r0, #0
   32084:	bx	lr
   32088:	movcc	r0, #0
   3208c:	asreq	r0, ip, #31
   32090:	orreq	r0, r0, #1
   32094:	bx	lr
   32098:	clz	r2, r1
   3209c:	rsb	r2, r2, #31
   320a0:	cmp	ip, #0
   320a4:	lsr	r0, r3, r2
   320a8:	rsbmi	r0, r0, #0
   320ac:	bx	lr
   320b0:	cmp	r0, #0
   320b4:	mvngt	r0, #-2147483648	; 0x80000000
   320b8:	movlt	r0, #-2147483648	; 0x80000000
   320bc:	b	324d4 <__assert_fail@plt+0x20b34>
   320c0:	cmp	r1, #0
   320c4:	beq	320b0 <__assert_fail@plt+0x20710>
   320c8:	push	{r0, r1, lr}
   320cc:	bl	31ea8 <__assert_fail@plt+0x20508>
   320d0:	pop	{r1, r2, lr}
   320d4:	mul	r3, r2, r0
   320d8:	sub	r1, r1, r3
   320dc:	bx	lr
   320e0:	eor	r1, r1, #-2147483648	; 0x80000000
   320e4:	b	320ec <__assert_fail@plt+0x2074c>
   320e8:	eor	r3, r3, #-2147483648	; 0x80000000
   320ec:	push	{r4, r5, lr}
   320f0:	lsl	r4, r1, #1
   320f4:	lsl	r5, r3, #1
   320f8:	teq	r4, r5
   320fc:	teqeq	r0, r2
   32100:	orrsne	ip, r4, r0
   32104:	orrsne	ip, r5, r2
   32108:	mvnsne	ip, r4, asr #21
   3210c:	mvnsne	ip, r5, asr #21
   32110:	beq	322fc <__assert_fail@plt+0x2095c>
   32114:	lsr	r4, r4, #21
   32118:	rsbs	r5, r4, r5, lsr #21
   3211c:	rsblt	r5, r5, #0
   32120:	ble	32140 <__assert_fail@plt+0x207a0>
   32124:	add	r4, r4, r5
   32128:	eor	r2, r0, r2
   3212c:	eor	r3, r1, r3
   32130:	eor	r0, r2, r0
   32134:	eor	r1, r3, r1
   32138:	eor	r2, r0, r2
   3213c:	eor	r3, r1, r3
   32140:	cmp	r5, #54	; 0x36
   32144:	pophi	{r4, r5, pc}
   32148:	tst	r1, #-2147483648	; 0x80000000
   3214c:	lsl	r1, r1, #12
   32150:	mov	ip, #1048576	; 0x100000
   32154:	orr	r1, ip, r1, lsr #12
   32158:	beq	32164 <__assert_fail@plt+0x207c4>
   3215c:	rsbs	r0, r0, #0
   32160:	rsc	r1, r1, #0
   32164:	tst	r3, #-2147483648	; 0x80000000
   32168:	lsl	r3, r3, #12
   3216c:	orr	r3, ip, r3, lsr #12
   32170:	beq	3217c <__assert_fail@plt+0x207dc>
   32174:	rsbs	r2, r2, #0
   32178:	rsc	r3, r3, #0
   3217c:	teq	r4, r5
   32180:	beq	322e4 <__assert_fail@plt+0x20944>
   32184:	sub	r4, r4, #1
   32188:	rsbs	lr, r5, #32
   3218c:	blt	321a8 <__assert_fail@plt+0x20808>
   32190:	lsl	ip, r2, lr
   32194:	adds	r0, r0, r2, lsr r5
   32198:	adc	r1, r1, #0
   3219c:	adds	r0, r0, r3, lsl lr
   321a0:	adcs	r1, r1, r3, asr r5
   321a4:	b	321c4 <__assert_fail@plt+0x20824>
   321a8:	sub	r5, r5, #32
   321ac:	add	lr, lr, #32
   321b0:	cmp	r2, #1
   321b4:	lsl	ip, r3, lr
   321b8:	orrcs	ip, ip, #2
   321bc:	adds	r0, r0, r3, asr r5
   321c0:	adcs	r1, r1, r3, asr #31
   321c4:	and	r5, r1, #-2147483648	; 0x80000000
   321c8:	bpl	321d8 <__assert_fail@plt+0x20838>
   321cc:	rsbs	ip, ip, #0
   321d0:	rscs	r0, r0, #0
   321d4:	rsc	r1, r1, #0
   321d8:	cmp	r1, #1048576	; 0x100000
   321dc:	bcc	3221c <__assert_fail@plt+0x2087c>
   321e0:	cmp	r1, #2097152	; 0x200000
   321e4:	bcc	32204 <__assert_fail@plt+0x20864>
   321e8:	lsrs	r1, r1, #1
   321ec:	rrxs	r0, r0
   321f0:	rrx	ip, ip
   321f4:	add	r4, r4, #1
   321f8:	lsl	r2, r4, #21
   321fc:	cmn	r2, #4194304	; 0x400000
   32200:	bcs	3235c <__assert_fail@plt+0x209bc>
   32204:	cmp	ip, #-2147483648	; 0x80000000
   32208:	lsrseq	ip, r0, #1
   3220c:	adcs	r0, r0, #0
   32210:	adc	r1, r1, r4, lsl #20
   32214:	orr	r1, r1, r5
   32218:	pop	{r4, r5, pc}
   3221c:	lsls	ip, ip, #1
   32220:	adcs	r0, r0, r0
   32224:	adc	r1, r1, r1
   32228:	tst	r1, #1048576	; 0x100000
   3222c:	sub	r4, r4, #1
   32230:	bne	32204 <__assert_fail@plt+0x20864>
   32234:	teq	r1, #0
   32238:	moveq	r1, r0
   3223c:	moveq	r0, #0
   32240:	clz	r3, r1
   32244:	addeq	r3, r3, #32
   32248:	sub	r3, r3, #11
   3224c:	subs	r2, r3, #32
   32250:	bge	32274 <__assert_fail@plt+0x208d4>
   32254:	adds	r2, r2, #12
   32258:	ble	32270 <__assert_fail@plt+0x208d0>
   3225c:	add	ip, r2, #20
   32260:	rsb	r2, r2, #12
   32264:	lsl	r0, r1, ip
   32268:	lsr	r1, r1, r2
   3226c:	b	32284 <__assert_fail@plt+0x208e4>
   32270:	add	r2, r2, #20
   32274:	rsble	ip, r2, #32
   32278:	lsl	r1, r1, r2
   3227c:	orrle	r1, r1, r0, lsr ip
   32280:	lslle	r0, r0, r2
   32284:	subs	r4, r4, r3
   32288:	addge	r1, r1, r4, lsl #20
   3228c:	orrge	r1, r1, r5
   32290:	popge	{r4, r5, pc}
   32294:	mvn	r4, r4
   32298:	subs	r4, r4, #31
   3229c:	bge	322d8 <__assert_fail@plt+0x20938>
   322a0:	adds	r4, r4, #12
   322a4:	bgt	322c0 <__assert_fail@plt+0x20920>
   322a8:	add	r4, r4, #20
   322ac:	rsb	r2, r4, #32
   322b0:	lsr	r0, r0, r4
   322b4:	orr	r0, r0, r1, lsl r2
   322b8:	orr	r1, r5, r1, lsr r4
   322bc:	pop	{r4, r5, pc}
   322c0:	rsb	r4, r4, #12
   322c4:	rsb	r2, r4, #32
   322c8:	lsr	r0, r0, r2
   322cc:	orr	r0, r0, r1, lsl r4
   322d0:	mov	r1, r5
   322d4:	pop	{r4, r5, pc}
   322d8:	lsr	r0, r1, r4
   322dc:	mov	r1, r5
   322e0:	pop	{r4, r5, pc}
   322e4:	teq	r4, #0
   322e8:	eor	r3, r3, #1048576	; 0x100000
   322ec:	eoreq	r1, r1, #1048576	; 0x100000
   322f0:	addeq	r4, r4, #1
   322f4:	subne	r5, r5, #1
   322f8:	b	32184 <__assert_fail@plt+0x207e4>
   322fc:	mvns	ip, r4, asr #21
   32300:	mvnsne	ip, r5, asr #21
   32304:	beq	3236c <__assert_fail@plt+0x209cc>
   32308:	teq	r4, r5
   3230c:	teqeq	r0, r2
   32310:	beq	32324 <__assert_fail@plt+0x20984>
   32314:	orrs	ip, r4, r0
   32318:	moveq	r1, r3
   3231c:	moveq	r0, r2
   32320:	pop	{r4, r5, pc}
   32324:	teq	r1, r3
   32328:	movne	r1, #0
   3232c:	movne	r0, #0
   32330:	popne	{r4, r5, pc}
   32334:	lsrs	ip, r4, #21
   32338:	bne	3234c <__assert_fail@plt+0x209ac>
   3233c:	lsls	r0, r0, #1
   32340:	adcs	r1, r1, r1
   32344:	orrcs	r1, r1, #-2147483648	; 0x80000000
   32348:	pop	{r4, r5, pc}
   3234c:	adds	r4, r4, #4194304	; 0x400000
   32350:	addcc	r1, r1, #1048576	; 0x100000
   32354:	popcc	{r4, r5, pc}
   32358:	and	r5, r1, #-2147483648	; 0x80000000
   3235c:	orr	r1, r5, #2130706432	; 0x7f000000
   32360:	orr	r1, r1, #15728640	; 0xf00000
   32364:	mov	r0, #0
   32368:	pop	{r4, r5, pc}
   3236c:	mvns	ip, r4, asr #21
   32370:	movne	r1, r3
   32374:	movne	r0, r2
   32378:	mvnseq	ip, r5, asr #21
   3237c:	movne	r3, r1
   32380:	movne	r2, r0
   32384:	orrs	r4, r0, r1, lsl #12
   32388:	orrseq	r5, r2, r3, lsl #12
   3238c:	teqeq	r1, r3
   32390:	orrne	r1, r1, #524288	; 0x80000
   32394:	pop	{r4, r5, pc}
   32398:	teq	r0, #0
   3239c:	moveq	r1, #0
   323a0:	bxeq	lr
   323a4:	push	{r4, r5, lr}
   323a8:	mov	r4, #1024	; 0x400
   323ac:	add	r4, r4, #50	; 0x32
   323b0:	mov	r5, #0
   323b4:	mov	r1, #0
   323b8:	b	32234 <__assert_fail@plt+0x20894>
   323bc:	teq	r0, #0
   323c0:	moveq	r1, #0
   323c4:	bxeq	lr
   323c8:	push	{r4, r5, lr}
   323cc:	mov	r4, #1024	; 0x400
   323d0:	add	r4, r4, #50	; 0x32
   323d4:	ands	r5, r0, #-2147483648	; 0x80000000
   323d8:	rsbmi	r0, r0, #0
   323dc:	mov	r1, #0
   323e0:	b	32234 <__assert_fail@plt+0x20894>
   323e4:	lsls	r2, r0, #1
   323e8:	asr	r1, r2, #3
   323ec:	rrx	r1, r1
   323f0:	lsl	r0, r2, #28
   323f4:	andsne	r3, r2, #-16777216	; 0xff000000
   323f8:	teqne	r3, #-16777216	; 0xff000000
   323fc:	eorne	r1, r1, #939524096	; 0x38000000
   32400:	bxne	lr
   32404:	teq	r2, #0
   32408:	teqne	r3, #-16777216	; 0xff000000
   3240c:	bxeq	lr
   32410:	push	{r4, r5, lr}
   32414:	mov	r4, #896	; 0x380
   32418:	and	r5, r1, #-2147483648	; 0x80000000
   3241c:	bic	r1, r1, #-2147483648	; 0x80000000
   32420:	b	32234 <__assert_fail@plt+0x20894>
   32424:	orrs	r2, r0, r1
   32428:	bxeq	lr
   3242c:	push	{r4, r5, lr}
   32430:	mov	r5, #0
   32434:	b	32454 <__assert_fail@plt+0x20ab4>
   32438:	orrs	r2, r0, r1
   3243c:	bxeq	lr
   32440:	push	{r4, r5, lr}
   32444:	ands	r5, r1, #-2147483648	; 0x80000000
   32448:	bpl	32454 <__assert_fail@plt+0x20ab4>
   3244c:	rsbs	r0, r0, #0
   32450:	rsc	r1, r1, #0
   32454:	mov	r4, #1024	; 0x400
   32458:	add	r4, r4, #50	; 0x32
   3245c:	lsrs	ip, r1, #22
   32460:	beq	321d8 <__assert_fail@plt+0x20838>
   32464:	mov	r2, #3
   32468:	lsrs	ip, ip, #3
   3246c:	addne	r2, r2, #3
   32470:	lsrs	ip, ip, #3
   32474:	addne	r2, r2, #3
   32478:	add	r2, r2, ip, lsr #3
   3247c:	rsb	r3, r2, #32
   32480:	lsl	ip, r0, r3
   32484:	lsr	r0, r0, r2
   32488:	orr	r0, r0, r1, lsl r3
   3248c:	lsr	r1, r1, r2
   32490:	add	r4, r4, r2
   32494:	b	321d8 <__assert_fail@plt+0x20838>
   32498:	cmp	r3, #0
   3249c:	cmpeq	r2, #0
   324a0:	bne	324b8 <__assert_fail@plt+0x20b18>
   324a4:	cmp	r1, #0
   324a8:	cmpeq	r0, #0
   324ac:	mvnne	r1, #0
   324b0:	mvnne	r0, #0
   324b4:	b	324d4 <__assert_fail@plt+0x20b34>
   324b8:	sub	sp, sp, #8
   324bc:	push	{sp, lr}
   324c0:	bl	32530 <__assert_fail@plt+0x20b90>
   324c4:	ldr	lr, [sp, #4]
   324c8:	add	sp, sp, #8
   324cc:	pop	{r2, r3}
   324d0:	bx	lr
   324d4:	push	{r1, lr}
   324d8:	mov	r0, #8
   324dc:	bl	11520 <raise@plt>
   324e0:	pop	{r1, pc}
   324e4:	andeq	r0, r0, r0
   324e8:	vmov	d7, r0, r1
   324ec:	vldr	d6, [pc, #44]	; 32520 <__assert_fail@plt+0x20b80>
   324f0:	vldr	d5, [pc, #48]	; 32528 <__assert_fail@plt+0x20b88>
   324f4:	mov	r0, #0
   324f8:	vmul.f64	d6, d7, d6
   324fc:	vcvt.u32.f64	s12, d6
   32500:	vcvt.f64.u32	d4, s12
   32504:	vmov	r1, s12
   32508:	vmls.f64	d7, d4, d5
   3250c:	vcvt.u32.f64	s14, d7
   32510:	vmov	r3, s14
   32514:	orr	r0, r0, r3
   32518:	bx	lr
   3251c:	nop			; (mov r0, r0)
   32520:	andeq	r0, r0, r0
   32524:	ldclcc	0, cr0, [r0]
   32528:	andeq	r0, r0, r0
   3252c:	mvnsmi	r0, r0
   32530:	cmp	r1, r3
   32534:	push	{r4, r5, r6, r7, r8, r9, lr}
   32538:	cmpeq	r0, r2
   3253c:	mov	r4, r0
   32540:	mov	r5, r1
   32544:	ldr	r9, [sp, #28]
   32548:	movcc	r0, #0
   3254c:	movcc	r1, #0
   32550:	bcc	32648 <__assert_fail@plt+0x20ca8>
   32554:	cmp	r3, #0
   32558:	clzeq	ip, r2
   3255c:	clzne	ip, r3
   32560:	addeq	ip, ip, #32
   32564:	cmp	r5, #0
   32568:	clzeq	r1, r4
   3256c:	addeq	r1, r1, #32
   32570:	clzne	r1, r5
   32574:	sub	ip, ip, r1
   32578:	sub	lr, ip, #32
   3257c:	lsl	r7, r3, ip
   32580:	rsb	r8, ip, #32
   32584:	orr	r7, r7, r2, lsl lr
   32588:	orr	r7, r7, r2, lsr r8
   3258c:	lsl	r6, r2, ip
   32590:	cmp	r5, r7
   32594:	cmpeq	r4, r6
   32598:	movcc	r0, #0
   3259c:	movcc	r1, #0
   325a0:	bcc	325bc <__assert_fail@plt+0x20c1c>
   325a4:	mov	r3, #1
   325a8:	subs	r4, r4, r6
   325ac:	lsl	r1, r3, lr
   325b0:	lsl	r0, r3, ip
   325b4:	orr	r1, r1, r3, lsr r8
   325b8:	sbc	r5, r5, r7
   325bc:	cmp	ip, #0
   325c0:	beq	32648 <__assert_fail@plt+0x20ca8>
   325c4:	lsrs	r3, r7, #1
   325c8:	rrx	r2, r6
   325cc:	mov	r6, ip
   325d0:	b	325f4 <__assert_fail@plt+0x20c54>
   325d4:	subs	r4, r4, r2
   325d8:	sbc	r5, r5, r3
   325dc:	adds	r4, r4, r4
   325e0:	adc	r5, r5, r5
   325e4:	adds	r4, r4, #1
   325e8:	adc	r5, r5, #0
   325ec:	subs	r6, r6, #1
   325f0:	beq	32610 <__assert_fail@plt+0x20c70>
   325f4:	cmp	r5, r3
   325f8:	cmpeq	r4, r2
   325fc:	bcs	325d4 <__assert_fail@plt+0x20c34>
   32600:	adds	r4, r4, r4
   32604:	adc	r5, r5, r5
   32608:	subs	r6, r6, #1
   3260c:	bne	325f4 <__assert_fail@plt+0x20c54>
   32610:	lsr	r6, r4, ip
   32614:	lsr	r7, r5, ip
   32618:	orr	r6, r6, r5, lsl r8
   3261c:	adds	r2, r0, r4
   32620:	orr	r6, r6, r5, lsr lr
   32624:	adc	r3, r1, r5
   32628:	lsl	r1, r7, ip
   3262c:	orr	r1, r1, r6, lsl lr
   32630:	lsl	r0, r6, ip
   32634:	orr	r1, r1, r6, lsr r8
   32638:	subs	r0, r2, r0
   3263c:	mov	r4, r6
   32640:	mov	r5, r7
   32644:	sbc	r1, r3, r1
   32648:	cmp	r9, #0
   3264c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   32650:	strd	r4, [r9]
   32654:	pop	{r4, r5, r6, r7, r8, r9, pc}
   32658:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3265c:	mov	r7, r0
   32660:	ldr	r6, [pc, #72]	; 326b0 <__assert_fail@plt+0x20d10>
   32664:	ldr	r5, [pc, #72]	; 326b4 <__assert_fail@plt+0x20d14>
   32668:	add	r6, pc, r6
   3266c:	add	r5, pc, r5
   32670:	sub	r6, r6, r5
   32674:	mov	r8, r1
   32678:	mov	r9, r2
   3267c:	bl	114d0 <pthread_mutex_unlock@plt-0x20>
   32680:	asrs	r6, r6, #2
   32684:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   32688:	mov	r4, #0
   3268c:	add	r4, r4, #1
   32690:	ldr	r3, [r5], #4
   32694:	mov	r2, r9
   32698:	mov	r1, r8
   3269c:	mov	r0, r7
   326a0:	blx	r3
   326a4:	cmp	r6, r4
   326a8:	bne	3268c <__assert_fail@plt+0x20cec>
   326ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   326b0:	andeq	r2, r1, r0, lsr #17
   326b4:	muleq	r1, r8, r8
   326b8:	bx	lr
   326bc:	ldr	r3, [pc, #12]	; 326d0 <__assert_fail@plt+0x20d30>
   326c0:	mov	r1, #0
   326c4:	add	r3, pc, r3
   326c8:	ldr	r2, [r3]
   326cc:	b	117fc <__cxa_atexit@plt>
   326d0:	ldrdeq	r2, [r1], -ip

Disassembly of section .fini:

000326d4 <.fini>:
   326d4:	push	{r3, lr}
   326d8:	pop	{r3, pc}
