
../compcert-repos/prog2/CMakeFiles/4.dir/Aula04_Listas_T1/lista-teste.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_l>:
   0:	sub	sp, sp, #12
   4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8:	add	fp, sp, #28
   c:	sub	sp, sp, #8
  10:	mov	r9, r0
  14:	add	r0, fp, #8
  18:	stm	r0, {r1, r2, r3}
  1c:	mov	r0, #12
  20:	bl	0 <malloc>
  24:	mov	r1, #0
  28:	mov	r8, r0
  2c:	cmp	r9, #1
  30:	str	r1, [r0]
  34:	stmib	r0, {r1, r9}
  38:	add	r0, fp, #8
  3c:	str	r0, [sp, #4]
  40:	blt	b4 <_l+0xb4>
  44:	mov	r5, #0
  48:	ldr	r0, [sp, #4]
  4c:	cmp	r5, #0
  50:	mov	sl, r8
  54:	addne	sl, r6, #4
  58:	add	r1, r0, #4
  5c:	str	r1, [sp, #4]
  60:	ldr	r7, [r0]
  64:	mov	r0, #12
  68:	bl	0 <malloc>
  6c:	cmp	r5, #0
  70:	mov	r4, r0
  74:	str	r0, [sl]
  78:	moveq	r6, r5
  7c:	str	r6, [r0, #8]
  80:	mov	r0, r7
  84:	bl	0 <strlen>
  88:	add	r0, r0, #1
  8c:	bl	0 <malloc>
  90:	mov	r1, r7
  94:	str	r0, [r4]
  98:	bl	0 <strcpy>
  9c:	add	r5, r5, #1
  a0:	mov	r6, r4
  a4:	cmp	r9, r5
  a8:	bne	48 <_l+0x48>
  ac:	mov	r1, #0
  b0:	b	b4 <_l+0xb4>
  b4:	str	r1, [r4, #4]
  b8:	str	r4, [r8, #4]
  bc:	mov	r0, r8
  c0:	sub	sp, fp, #28
  c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  c8:	add	sp, sp, #12
  cc:	bx	lr

000000d0 <_f>:
  d0:	cmp	r0, #0
  d4:	moveq	r0, #0
  d8:	bxeq	lr
  dc:	ldr	r0, [r0]
  e0:	mov	r2, #0
  e4:	cmp	r1, #1
  e8:	blt	110 <_f+0x40>
  ec:	cmp	r0, #0
  f0:	beq	110 <_f+0x40>
  f4:	mov	r2, #0
  f8:	ldr	r0, [r0, #4]
  fc:	add	r2, r2, #1
 100:	cmp	r2, r1
 104:	bge	110 <_f+0x40>
 108:	cmp	r0, #0
 10c:	bne	f8 <_f+0x28>
 110:	cmp	r2, r1
 114:	movwne	r0, #0
 118:	movtne	r0, #0
 11c:	bxne	lr
 120:	ldr	r0, [r0]
 124:	bx	lr

00000128 <teste_lista_nova>:
 128:	push	{r4, sl, fp, lr}
 12c:	add	fp, sp, #8
 130:	movw	r0, #0
 134:	movt	r0, #0
 138:	bl	0 <printf>
 13c:	bl	0 <lista_nova>
 140:	cmp	r0, #0
 144:	beq	170 <teste_lista_nova+0x48>
 148:	mov	r4, r0
 14c:	ldr	r0, [r0, #8]
 150:	cmp	r0, #0
 154:	beq	18c <teste_lista_nova+0x64>
 158:	movw	r0, #0
 15c:	movt	r0, #0
 160:	bl	0 <printf>
 164:	mov	r0, r4
 168:	bl	0 <lista_apaga>
 16c:	b	17c <teste_lista_nova+0x54>
 170:	movw	r0, #0
 174:	movt	r0, #0
 178:	bl	0 <printf>
 17c:	mov	r0, #10
 180:	bl	0 <putchar>
 184:	mov	r0, #1
 188:	pop	{r4, sl, fp, pc}
 18c:	mov	r0, r4
 190:	bl	0 <lista_apaga>
 194:	movw	r0, #0
 198:	movt	r0, #0
 19c:	bl	0 <puts>
 1a0:	mov	r0, #0
 1a4:	pop	{r4, sl, fp, pc}

000001a8 <teste_lista_insere>:
 1a8:	push	{r4, r5, r6, r7, fp, lr}
 1ac:	add	fp, sp, #16
 1b0:	movw	r1, #0
 1b4:	mov	r0, #2
 1b8:	movt	r1, #0
 1bc:	mov	r2, r1
 1c0:	bl	0 <_l>
 1c4:	mov	r5, r0
 1c8:	movw	r0, #0
 1cc:	movt	r0, #0
 1d0:	bl	0 <printf>
 1d4:	ldr	r0, [r5]
 1d8:	movw	r1, #0
 1dc:	movt	r1, #0
 1e0:	ldr	r2, [r0, #4]
 1e4:	mov	r0, r5
 1e8:	bl	0 <lista_insere>
 1ec:	mov	r4, #0
 1f0:	cmp	r0, #0
 1f4:	bne	208 <teste_lista_insere+0x60>
 1f8:	movw	r0, #0
 1fc:	movt	r0, #0
 200:	bl	0 <printf>
 204:	mov	r4, #1
 208:	ldr	r0, [r5, #8]
 20c:	cmp	r0, #3
 210:	beq	230 <teste_lista_insere+0x88>
 214:	movw	r0, #0
 218:	movt	r0, #0
 21c:	bl	0 <printf>
 220:	ldr	r0, [r5, #8]
 224:	add	r4, r4, #1
 228:	cmp	r0, #3
 22c:	bne	47c <teste_lista_insere+0x2d4>
 230:	ldr	r6, [r5]
 234:	movw	r1, #0
 238:	movt	r1, #0
 23c:	ldr	r0, [r6]
 240:	bl	0 <strcmp>
 244:	cmp	r0, #0
 248:	bne	284 <teste_lista_insere+0xdc>
 24c:	ldr	r7, [r6, #4]
 250:	movw	r1, #0
 254:	movt	r1, #0
 258:	ldr	r0, [r7]
 25c:	bl	0 <strcmp>
 260:	cmp	r0, #0
 264:	bne	284 <teste_lista_insere+0xdc>
 268:	ldr	r0, [r7, #4]
 26c:	movw	r1, #0
 270:	movt	r1, #0
 274:	ldr	r0, [r0]
 278:	bl	0 <strcmp>
 27c:	cmp	r0, #0
 280:	beq	298 <teste_lista_insere+0xf0>
 284:	movw	r0, #0
 288:	movt	r0, #0
 28c:	bl	0 <printf>
 290:	ldr	r6, [r5]
 294:	add	r4, r4, #1
 298:	movw	r1, #0
 29c:	mov	r0, r5
 2a0:	mov	r2, r6
 2a4:	movt	r1, #0
 2a8:	bl	0 <lista_insere>
 2ac:	ldr	r1, [r5]
 2b0:	cmp	r0, r1
 2b4:	beq	2c8 <teste_lista_insere+0x120>
 2b8:	movw	r0, #0
 2bc:	movt	r0, #0
 2c0:	bl	0 <printf>
 2c4:	add	r4, r4, #1
 2c8:	ldr	r0, [r5, #8]
 2cc:	cmp	r0, #4
 2d0:	beq	2f0 <teste_lista_insere+0x148>
 2d4:	movw	r0, #0
 2d8:	movt	r0, #0
 2dc:	bl	0 <printf>
 2e0:	ldr	r0, [r5, #8]
 2e4:	add	r4, r4, #1
 2e8:	cmp	r0, #4
 2ec:	bne	47c <teste_lista_insere+0x2d4>
 2f0:	ldr	r6, [r5]
 2f4:	movw	r1, #0
 2f8:	movt	r1, #0
 2fc:	ldr	r0, [r6]
 300:	bl	0 <strcmp>
 304:	cmp	r0, #0
 308:	bne	360 <teste_lista_insere+0x1b8>
 30c:	ldr	r6, [r6, #4]
 310:	movw	r1, #0
 314:	movt	r1, #0
 318:	ldr	r0, [r6]
 31c:	bl	0 <strcmp>
 320:	cmp	r0, #0
 324:	bne	360 <teste_lista_insere+0x1b8>
 328:	ldr	r6, [r6, #4]
 32c:	movw	r1, #0
 330:	movt	r1, #0
 334:	ldr	r0, [r6]
 338:	bl	0 <strcmp>
 33c:	cmp	r0, #0
 340:	bne	360 <teste_lista_insere+0x1b8>
 344:	ldr	r0, [r6, #4]
 348:	movw	r1, #0
 34c:	movt	r1, #0
 350:	ldr	r0, [r0]
 354:	bl	0 <strcmp>
 358:	cmp	r0, #0
 35c:	beq	370 <teste_lista_insere+0x1c8>
 360:	movw	r0, #0
 364:	movt	r0, #0
 368:	bl	0 <printf>
 36c:	add	r4, r4, #1
 370:	movw	r1, #0
 374:	mov	r0, r5
 378:	mov	r2, #0
 37c:	movt	r1, #0
 380:	bl	0 <lista_insere>
 384:	ldr	r0, [r5, #8]
 388:	cmp	r0, #5
 38c:	beq	3ac <teste_lista_insere+0x204>
 390:	movw	r0, #0
 394:	movt	r0, #0
 398:	bl	0 <printf>
 39c:	ldr	r0, [r5, #8]
 3a0:	add	r4, r4, #1
 3a4:	cmp	r0, #5
 3a8:	bne	47c <teste_lista_insere+0x2d4>
 3ac:	ldr	r0, [r5]
 3b0:	movw	r1, #0
 3b4:	movt	r1, #0
 3b8:	ldr	r0, [r0, #4]
 3bc:	ldr	r0, [r0, #4]
 3c0:	ldr	r0, [r0, #4]
 3c4:	ldr	r0, [r0, #4]
 3c8:	ldr	r0, [r0]
 3cc:	bl	0 <strcmp>
 3d0:	cmp	r0, #0
 3d4:	beq	3e8 <teste_lista_insere+0x240>
 3d8:	movw	r0, #0
 3dc:	movt	r0, #0
 3e0:	bl	0 <printf>
 3e4:	add	r4, r4, #1
 3e8:	mov	r0, r5
 3ec:	bl	0 <lista_apaga>
 3f0:	bl	0 <lista_nova>
 3f4:	movw	r1, #0
 3f8:	mov	r2, #0
 3fc:	mov	r5, r0
 400:	movt	r1, #0
 404:	bl	0 <lista_insere>
 408:	ldr	r0, [r5, #8]
 40c:	cmp	r0, #1
 410:	beq	424 <teste_lista_insere+0x27c>
 414:	movw	r0, #0
 418:	movt	r0, #0
 41c:	bl	0 <printf>
 420:	add	r4, r4, #1
 424:	mov	r0, r5
 428:	bl	0 <lista_tamanho>
 42c:	cmp	r0, #1
 430:	bne	474 <teste_lista_insere+0x2cc>
 434:	ldr	r0, [r5]
 438:	movw	r1, #0
 43c:	movt	r1, #0
 440:	ldr	r0, [r0]
 444:	bl	0 <strcmp>
 448:	cmp	r0, #0
 44c:	beq	46c <teste_lista_insere+0x2c4>
 450:	movw	r0, #0
 454:	movt	r0, #0
 458:	bl	0 <printf>
 45c:	mov	r0, r5
 460:	bl	0 <lista_apaga>
 464:	add	r4, r4, #1
 468:	b	47c <teste_lista_insere+0x2d4>
 46c:	mov	r0, r5
 470:	bl	0 <lista_apaga>
 474:	cmp	r4, #0
 478:	beq	48c <teste_lista_insere+0x2e4>
 47c:	mov	r0, #10
 480:	bl	0 <putchar>
 484:	mov	r0, r4
 488:	pop	{r4, r5, r6, r7, fp, pc}
 48c:	movw	r0, #0
 490:	movt	r0, #0
 494:	bl	0 <puts>
 498:	mov	r4, #0
 49c:	mov	r0, r4
 4a0:	pop	{r4, r5, r6, r7, fp, pc}

000004a4 <teste_lista_remove>:
 4a4:	push	{r4, r5, r6, sl, fp, lr}
 4a8:	add	fp, sp, #16
 4ac:	sub	sp, sp, #8
 4b0:	movw	r1, #0
 4b4:	movw	r0, #0
 4b8:	movw	r2, #0
 4bc:	movw	r3, #0
 4c0:	movt	r1, #0
 4c4:	movt	r0, #0
 4c8:	movt	r2, #0
 4cc:	movt	r3, #0
 4d0:	str	r1, [sp]
 4d4:	movw	r1, #0
 4d8:	str	r0, [sp, #4]
 4dc:	mov	r0, #5
 4e0:	movt	r1, #0
 4e4:	bl	0 <_l>
 4e8:	mov	r4, r0
 4ec:	movw	r0, #0
 4f0:	movt	r0, #0
 4f4:	bl	0 <printf>
 4f8:	ldr	r0, [r4]
 4fc:	ldr	r0, [r0, #4]
 500:	ldr	r0, [r0, #4]
 504:	ldr	r1, [r0, #4]
 508:	mov	r0, r4
 50c:	bl	0 <lista_remove>
 510:	ldr	r1, [r4, #4]
 514:	cmp	r0, r1
 518:	beq	530 <teste_lista_remove+0x8c>
 51c:	movw	r0, #0
 520:	movt	r0, #0
 524:	bl	0 <printf>
 528:	mov	r5, #1
 52c:	b	534 <teste_lista_remove+0x90>
 530:	mov	r5, #0
 534:	ldr	r0, [r4, #8]
 538:	cmp	r0, #4
 53c:	beq	550 <teste_lista_remove+0xac>
 540:	movw	r0, #0
 544:	movt	r0, #0
 548:	bl	0 <printf>
 54c:	add	r5, r5, #1
 550:	ldr	r6, [r4]
 554:	movw	r1, #0
 558:	movt	r1, #0
 55c:	ldr	r0, [r6]
 560:	bl	0 <strcmp>
 564:	cmp	r0, #0
 568:	bne	5c0 <teste_lista_remove+0x11c>
 56c:	ldr	r6, [r6, #4]
 570:	movw	r1, #0
 574:	movt	r1, #0
 578:	ldr	r0, [r6]
 57c:	bl	0 <strcmp>
 580:	cmp	r0, #0
 584:	bne	5c0 <teste_lista_remove+0x11c>
 588:	ldr	r6, [r6, #4]
 58c:	movw	r1, #0
 590:	movt	r1, #0
 594:	ldr	r0, [r6]
 598:	bl	0 <strcmp>
 59c:	cmp	r0, #0
 5a0:	bne	5c0 <teste_lista_remove+0x11c>
 5a4:	ldr	r0, [r6, #4]
 5a8:	movw	r1, #0
 5ac:	movt	r1, #0
 5b0:	ldr	r0, [r0]
 5b4:	bl	0 <strcmp>
 5b8:	cmp	r0, #0
 5bc:	beq	5d0 <teste_lista_remove+0x12c>
 5c0:	movw	r0, #0
 5c4:	movt	r0, #0
 5c8:	bl	0 <printf>
 5cc:	add	r5, r5, #1
 5d0:	mov	r0, r4
 5d4:	mov	r1, #0
 5d8:	bl	0 <lista_remove>
 5dc:	cmp	r0, #0
 5e0:	beq	600 <teste_lista_remove+0x15c>
 5e4:	movw	r0, #0
 5e8:	movt	r0, #0
 5ec:	bl	0 <printf>
 5f0:	mov	r0, r4
 5f4:	bl	0 <lista_apaga>
 5f8:	add	r5, r5, #1
 5fc:	b	610 <teste_lista_remove+0x16c>
 600:	mov	r0, r4
 604:	bl	0 <lista_apaga>
 608:	cmp	r5, #0
 60c:	beq	624 <teste_lista_remove+0x180>
 610:	mov	r0, #10
 614:	bl	0 <putchar>
 618:	mov	r0, r5
 61c:	sub	sp, fp, #16
 620:	pop	{r4, r5, r6, sl, fp, pc}
 624:	movw	r0, #0
 628:	movt	r0, #0
 62c:	bl	0 <puts>
 630:	mov	r5, #0
 634:	b	618 <teste_lista_remove+0x174>

00000638 <teste_lista_pesquisa>:
 638:	push	{r4, r5, r6, sl, fp, lr}
 63c:	add	fp, sp, #16
 640:	sub	sp, sp, #16
 644:	movw	r1, #0
 648:	movw	r6, #0
 64c:	mov	r0, #7
 650:	movt	r1, #0
 654:	movt	r6, #0
 658:	mov	r2, r1
 65c:	mov	r3, r1
 660:	stm	sp, {r1, r6}
 664:	str	r1, [sp, #8]
 668:	str	r1, [sp, #12]
 66c:	bl	0 <_l>
 670:	mov	r5, r0
 674:	movw	r0, #0
 678:	movt	r0, #0
 67c:	bl	0 <printf>
 680:	mov	r0, r5
 684:	mov	r1, r6
 688:	mov	r2, #0
 68c:	mov	r4, #0
 690:	bl	0 <lista_pesquisa>
 694:	ldr	r1, [r5]
 698:	ldr	r1, [r1, #4]
 69c:	ldr	r1, [r1, #4]
 6a0:	ldr	r1, [r1, #4]
 6a4:	ldr	r1, [r1, #4]
 6a8:	cmp	r0, r1
 6ac:	beq	6c0 <teste_lista_pesquisa+0x88>
 6b0:	movw	r0, #0
 6b4:	movt	r0, #0
 6b8:	bl	0 <printf>
 6bc:	mov	r4, #1
 6c0:	movw	r1, #0
 6c4:	mov	r0, r5
 6c8:	mov	r2, #0
 6cc:	movt	r1, #0
 6d0:	bl	0 <lista_pesquisa>
 6d4:	cmp	r0, #0
 6d8:	beq	6ec <teste_lista_pesquisa+0xb4>
 6dc:	movw	r0, #0
 6e0:	movt	r0, #0
 6e4:	bl	0 <printf>
 6e8:	add	r4, r4, #1
 6ec:	movw	r1, #0
 6f0:	mov	r0, r5
 6f4:	mov	r2, #1
 6f8:	movt	r1, #0
 6fc:	bl	0 <lista_pesquisa>
 700:	ldr	r1, [r5]
 704:	ldr	r1, [r1, #4]
 708:	ldr	r1, [r1, #4]
 70c:	ldr	r1, [r1, #4]
 710:	ldr	r1, [r1, #4]
 714:	ldr	r1, [r1, #4]
 718:	ldr	r1, [r1, #4]
 71c:	cmp	r0, r1
 720:	beq	734 <teste_lista_pesquisa+0xfc>
 724:	movw	r0, #0
 728:	movt	r0, #0
 72c:	bl	0 <printf>
 730:	add	r4, r4, #1
 734:	movw	r1, #0
 738:	mov	r0, r5
 73c:	mov	r2, #1
 740:	movt	r1, #0
 744:	bl	0 <lista_pesquisa>
 748:	cmp	r0, #0
 74c:	beq	76c <teste_lista_pesquisa+0x134>
 750:	movw	r0, #0
 754:	movt	r0, #0
 758:	bl	0 <printf>
 75c:	mov	r0, r5
 760:	bl	0 <lista_apaga>
 764:	add	r4, r4, #1
 768:	b	77c <teste_lista_pesquisa+0x144>
 76c:	mov	r0, r5
 770:	bl	0 <lista_apaga>
 774:	cmp	r4, #0
 778:	beq	790 <teste_lista_pesquisa+0x158>
 77c:	mov	r0, #10
 780:	bl	0 <putchar>
 784:	mov	r0, r4
 788:	sub	sp, fp, #16
 78c:	pop	{r4, r5, r6, sl, fp, pc}
 790:	movw	r0, #0
 794:	movt	r0, #0
 798:	bl	0 <puts>
 79c:	mov	r4, #0
 7a0:	b	784 <teste_lista_pesquisa+0x14c>

000007a4 <teste_lista_ordena>:
 7a4:	push	{r4, r5, r6, sl, fp, lr}
 7a8:	add	fp, sp, #16
 7ac:	sub	sp, sp, #8
 7b0:	movw	r1, #0
 7b4:	movw	r0, #0
 7b8:	movw	r2, #0
 7bc:	movw	r3, #0
 7c0:	movt	r1, #0
 7c4:	movt	r0, #0
 7c8:	movt	r2, #0
 7cc:	movt	r3, #0
 7d0:	str	r1, [sp]
 7d4:	movw	r1, #0
 7d8:	str	r0, [sp, #4]
 7dc:	mov	r0, #5
 7e0:	movt	r1, #0
 7e4:	bl	0 <_l>
 7e8:	mov	r5, r0
 7ec:	movw	r0, #0
 7f0:	movt	r0, #0
 7f4:	bl	0 <printf>
 7f8:	mov	r0, #0
 7fc:	mov	r4, #0
 800:	bl	0 <lista_ordena>
 804:	cmn	r0, #1
 808:	beq	81c <teste_lista_ordena+0x78>
 80c:	movw	r0, #0
 810:	movt	r0, #0
 814:	bl	0 <printf>
 818:	mov	r4, #1
 81c:	mov	r0, r5
 820:	bl	0 <lista_ordena>
 824:	ldr	r6, [r5]
 828:	movw	r1, #0
 82c:	movt	r1, #0
 830:	ldr	r0, [r6]
 834:	bl	0 <strcmp>
 838:	cmp	r0, #0
 83c:	bne	8b0 <teste_lista_ordena+0x10c>
 840:	ldr	r6, [r6, #4]
 844:	movw	r1, #0
 848:	movt	r1, #0
 84c:	ldr	r0, [r6]
 850:	bl	0 <strcmp>
 854:	cmp	r0, #0
 858:	bne	8b0 <teste_lista_ordena+0x10c>
 85c:	ldr	r6, [r6, #4]
 860:	movw	r1, #0
 864:	movt	r1, #0
 868:	ldr	r0, [r6]
 86c:	bl	0 <strcmp>
 870:	cmp	r0, #0
 874:	bne	8b0 <teste_lista_ordena+0x10c>
 878:	ldr	r6, [r6, #4]
 87c:	movw	r1, #0
 880:	movt	r1, #0
 884:	ldr	r0, [r6]
 888:	bl	0 <strcmp>
 88c:	cmp	r0, #0
 890:	bne	8b0 <teste_lista_ordena+0x10c>
 894:	ldr	r0, [r6, #4]
 898:	movw	r1, #0
 89c:	movt	r1, #0
 8a0:	ldr	r0, [r0]
 8a4:	bl	0 <strcmp>
 8a8:	cmp	r0, #0
 8ac:	beq	8c0 <teste_lista_ordena+0x11c>
 8b0:	movw	r0, #0
 8b4:	movt	r0, #0
 8b8:	bl	0 <printf>
 8bc:	add	r4, r4, #1
 8c0:	ldr	r6, [r5, #4]
 8c4:	movw	r1, #0
 8c8:	movt	r1, #0
 8cc:	ldr	r0, [r6]
 8d0:	bl	0 <strcmp>
 8d4:	cmp	r0, #0
 8d8:	bne	94c <teste_lista_ordena+0x1a8>
 8dc:	ldr	r6, [r6, #8]
 8e0:	movw	r1, #0
 8e4:	movt	r1, #0
 8e8:	ldr	r0, [r6]
 8ec:	bl	0 <strcmp>
 8f0:	cmp	r0, #0
 8f4:	bne	94c <teste_lista_ordena+0x1a8>
 8f8:	ldr	r6, [r6, #8]
 8fc:	movw	r1, #0
 900:	movt	r1, #0
 904:	ldr	r0, [r6]
 908:	bl	0 <strcmp>
 90c:	cmp	r0, #0
 910:	bne	94c <teste_lista_ordena+0x1a8>
 914:	ldr	r6, [r6, #8]
 918:	movw	r1, #0
 91c:	movt	r1, #0
 920:	ldr	r0, [r6]
 924:	bl	0 <strcmp>
 928:	cmp	r0, #0
 92c:	bne	94c <teste_lista_ordena+0x1a8>
 930:	ldr	r0, [r6, #8]
 934:	movw	r1, #0
 938:	movt	r1, #0
 93c:	ldr	r0, [r0]
 940:	bl	0 <strcmp>
 944:	cmp	r0, #0
 948:	beq	978 <teste_lista_ordena+0x1d4>
 94c:	movw	r0, #0
 950:	movt	r0, #0
 954:	bl	0 <printf>
 958:	mov	r0, r5
 95c:	bl	0 <lista_apaga>
 960:	add	r4, r4, #1
 964:	mov	r0, #10
 968:	bl	0 <putchar>
 96c:	mov	r0, r4
 970:	sub	sp, fp, #16
 974:	pop	{r4, r5, r6, sl, fp, pc}
 978:	mov	r0, r5
 97c:	bl	0 <lista_apaga>
 980:	cmp	r4, #0
 984:	bne	964 <teste_lista_ordena+0x1c0>
 988:	movw	r0, #0
 98c:	movt	r0, #0
 990:	bl	0 <puts>
 994:	mov	r4, #0
 998:	b	96c <teste_lista_ordena+0x1c8>

0000099c <teste_lista_inverte>:
 99c:	push	{r4, r5, r6, sl, fp, lr}
 9a0:	add	fp, sp, #16
 9a4:	sub	sp, sp, #8
 9a8:	movw	r1, #0
 9ac:	movw	r0, #0
 9b0:	movw	r2, #0
 9b4:	movw	r3, #0
 9b8:	movt	r1, #0
 9bc:	movt	r0, #0
 9c0:	movt	r2, #0
 9c4:	movt	r3, #0
 9c8:	str	r1, [sp]
 9cc:	movw	r1, #0
 9d0:	str	r0, [sp, #4]
 9d4:	mov	r0, #5
 9d8:	movt	r1, #0
 9dc:	bl	0 <_l>
 9e0:	mov	r5, r0
 9e4:	movw	r0, #0
 9e8:	movt	r0, #0
 9ec:	bl	0 <printf>
 9f0:	mov	r0, #0
 9f4:	mov	r4, #0
 9f8:	bl	0 <lista_inverte>
 9fc:	cmn	r0, #1
 a00:	beq	a14 <teste_lista_inverte+0x78>
 a04:	movw	r0, #0
 a08:	movt	r0, #0
 a0c:	bl	0 <printf>
 a10:	mov	r4, #1
 a14:	mov	r0, r5
 a18:	bl	0 <lista_inverte>
 a1c:	ldr	r0, [r5, #8]
 a20:	cmp	r0, #5
 a24:	beq	a38 <teste_lista_inverte+0x9c>
 a28:	movw	r0, #0
 a2c:	movt	r0, #0
 a30:	bl	0 <printf>
 a34:	add	r4, r4, #1
 a38:	ldr	r6, [r5]
 a3c:	movw	r1, #0
 a40:	movt	r1, #0
 a44:	ldr	r0, [r6]
 a48:	bl	0 <strcmp>
 a4c:	cmp	r0, #0
 a50:	bne	ac4 <teste_lista_inverte+0x128>
 a54:	ldr	r6, [r6, #4]
 a58:	movw	r1, #0
 a5c:	movt	r1, #0
 a60:	ldr	r0, [r6]
 a64:	bl	0 <strcmp>
 a68:	cmp	r0, #0
 a6c:	bne	ac4 <teste_lista_inverte+0x128>
 a70:	ldr	r6, [r6, #4]
 a74:	movw	r1, #0
 a78:	movt	r1, #0
 a7c:	ldr	r0, [r6]
 a80:	bl	0 <strcmp>
 a84:	cmp	r0, #0
 a88:	bne	ac4 <teste_lista_inverte+0x128>
 a8c:	ldr	r6, [r6, #4]
 a90:	movw	r1, #0
 a94:	movt	r1, #0
 a98:	ldr	r0, [r6]
 a9c:	bl	0 <strcmp>
 aa0:	cmp	r0, #0
 aa4:	bne	ac4 <teste_lista_inverte+0x128>
 aa8:	ldr	r0, [r6, #4]
 aac:	movw	r1, #0
 ab0:	movt	r1, #0
 ab4:	ldr	r0, [r0]
 ab8:	bl	0 <strcmp>
 abc:	cmp	r0, #0
 ac0:	beq	ad4 <teste_lista_inverte+0x138>
 ac4:	movw	r0, #0
 ac8:	movt	r0, #0
 acc:	bl	0 <printf>
 ad0:	add	r4, r4, #1
 ad4:	ldr	r6, [r5, #4]
 ad8:	movw	r1, #0
 adc:	movt	r1, #0
 ae0:	ldr	r0, [r6]
 ae4:	bl	0 <strcmp>
 ae8:	cmp	r0, #0
 aec:	bne	b60 <teste_lista_inverte+0x1c4>
 af0:	ldr	r6, [r6, #8]
 af4:	movw	r1, #0
 af8:	movt	r1, #0
 afc:	ldr	r0, [r6]
 b00:	bl	0 <strcmp>
 b04:	cmp	r0, #0
 b08:	bne	b60 <teste_lista_inverte+0x1c4>
 b0c:	ldr	r6, [r6, #8]
 b10:	movw	r1, #0
 b14:	movt	r1, #0
 b18:	ldr	r0, [r6]
 b1c:	bl	0 <strcmp>
 b20:	cmp	r0, #0
 b24:	bne	b60 <teste_lista_inverte+0x1c4>
 b28:	ldr	r6, [r6, #8]
 b2c:	movw	r1, #0
 b30:	movt	r1, #0
 b34:	ldr	r0, [r6]
 b38:	bl	0 <strcmp>
 b3c:	cmp	r0, #0
 b40:	bne	b60 <teste_lista_inverte+0x1c4>
 b44:	ldr	r0, [r6, #8]
 b48:	movw	r1, #0
 b4c:	movt	r1, #0
 b50:	ldr	r0, [r0]
 b54:	bl	0 <strcmp>
 b58:	cmp	r0, #0
 b5c:	beq	b8c <teste_lista_inverte+0x1f0>
 b60:	movw	r0, #0
 b64:	movt	r0, #0
 b68:	bl	0 <printf>
 b6c:	mov	r0, r5
 b70:	bl	0 <lista_apaga>
 b74:	add	r4, r4, #1
 b78:	mov	r0, #10
 b7c:	bl	0 <putchar>
 b80:	mov	r0, r4
 b84:	sub	sp, fp, #16
 b88:	pop	{r4, r5, r6, sl, fp, pc}
 b8c:	mov	r0, r5
 b90:	bl	0 <lista_apaga>
 b94:	cmp	r4, #0
 b98:	bne	b78 <teste_lista_inverte+0x1dc>
 b9c:	movw	r0, #0
 ba0:	movt	r0, #0
 ba4:	bl	0 <puts>
 ba8:	mov	r4, #0
 bac:	b	b80 <teste_lista_inverte+0x1e4>

00000bb0 <main>:
 bb0:	push	{r4, sl, fp, lr}
 bb4:	add	fp, sp, #8
 bb8:	movw	r0, #0
 bbc:	mov	r1, #0
 bc0:	mov	r2, #2
 bc4:	mov	r3, #0
 bc8:	movt	r0, #0
 bcc:	ldr	r0, [r0]
 bd0:	bl	0 <setvbuf>
 bd4:	movw	r0, #0
 bd8:	mov	r1, #0
 bdc:	mov	r2, #2
 be0:	mov	r3, #0
 be4:	movt	r0, #0
 be8:	ldr	r0, [r0]
 bec:	bl	0 <setvbuf>
 bf0:	bl	128 <teste_lista_nova>
 bf4:	mov	r4, r0
 bf8:	bl	1a8 <teste_lista_insere>
 bfc:	add	r4, r0, r4
 c00:	bl	4a4 <teste_lista_remove>
 c04:	add	r4, r4, r0
 c08:	bl	638 <teste_lista_pesquisa>
 c0c:	add	r4, r4, r0
 c10:	bl	7a4 <teste_lista_ordena>
 c14:	add	r4, r4, r0
 c18:	bl	99c <teste_lista_inverte>
 c1c:	adds	r1, r4, r0
 c20:	beq	c38 <main+0x88>
 c24:	movw	r0, #0
 c28:	movt	r0, #0
 c2c:	bl	0 <printf>
 c30:	mov	r0, #0
 c34:	pop	{r4, sl, fp, pc}
 c38:	movw	r0, #0
 c3c:	movt	r0, #0
 c40:	bl	0 <puts>
 c44:	mov	r0, #0
 c48:	pop	{r4, sl, fp, pc}
