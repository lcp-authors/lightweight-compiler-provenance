
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-grib-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #112	; 0x70
       8:	str	ip, [sp, #4]
       c:	str	lr, [sp, #8]
      10:	str	r4, [sp, #16]
      14:	str	r5, [sp, #20]
      18:	str	r6, [sp, #24]
      1c:	str	r7, [sp, #28]
      20:	str	r8, [sp, #32]
      24:	str	r9, [sp, #36]	; 0x24
      28:	ldr	r7, [ip, #8]
      2c:	ldr	r9, [ip, #4]
      30:	ldr	r6, [ip]
      34:	mov	r8, r3
      38:	mov	r5, r2
      3c:	mov	r4, r0
      40:	ldr	r1, [r4, #48]	; 0x30
      44:	cmp	r1, #0
      48:	bne	110 <read_bytes+0x110>
      4c:	ldr	r0, [r4, #16]
      50:	cmp	r0, #0
      54:	beq	6c <read_bytes+0x6c>
      58:	ldr	r2, [r4, #16]
      5c:	cmp	r2, #1
      60:	moveq	r0, #1
      64:	movne	r0, #0
      68:	b	70 <read_bytes+0x70>
      6c:	mov	r0, #1
      70:	cmp	r0, #0
      74:	bne	8c <read_bytes+0x8c>
      78:	ldr	r0, [pc, #408]	; 218 <read_bytes+0x218>
      7c:	ldr	r1, [pc, #412]	; 220 <read_bytes+0x220>
      80:	mov	r2, #83	; 0x53
      84:	ldr	r3, [pc, #388]	; 210 <read_bytes+0x210>
      88:	bl	0 <__assert_fail>
      8c:	adds	r0, r5, r6
      90:	adc	r3, r8, r9
      94:	ldr	r1, [r4, #8]
      98:	ldr	ip, [r4, #12]
      9c:	cmp	r3, ip
      a0:	bne	b0 <read_bytes+0xb0>
      a4:	cmp	r0, r1
      a8:	bhi	b8 <read_bytes+0xb8>
      ac:	b	cc <read_bytes+0xcc>
      b0:	cmp	r3, ip
      b4:	bls	cc <read_bytes+0xcc>
      b8:	mvn	r0, #300	; 0x12c
      bc:	ldr	r1, [pc, #328]	; 20c <read_bytes+0x20c>
      c0:	bl	0 <coda_set_error>
      c4:	mvn	r0, #0
      c8:	b	1e8 <read_bytes+0x1e8>
      cc:	ldr	r0, [r4, #56]	; 0x38
      d0:	mov	r2, r6
      d4:	mov	r3, r5
      d8:	mov	r1, r7
      dc:	bl	0 <pread>
      e0:	cmp	r0, #0
      e4:	bge	1e4 <read_bytes+0x1e4>
      e8:	bl	0 <__errno_location>
      ec:	ldr	r0, [r0]
      f0:	bl	0 <strerror>
      f4:	mvn	r3, #21
      f8:	ldr	r1, [pc, #276]	; 214 <read_bytes+0x214>
      fc:	mov	r2, r0
     100:	mov	r0, r3
     104:	bl	0 <coda_set_error>
     108:	mvn	r0, #0
     10c:	b	1e8 <read_bytes+0x1e8>
     110:	adds	ip, r5, r6
     114:	adc	r1, r8, r9
     118:	ldr	r2, [r4, #40]	; 0x28
     11c:	ldr	r3, [r4, #44]	; 0x2c
     120:	cmp	r1, r3
     124:	bne	134 <read_bytes+0x134>
     128:	cmp	ip, r2
     12c:	bhi	13c <read_bytes+0x13c>
     130:	b	1d0 <read_bytes+0x1d0>
     134:	cmp	r1, r3
     138:	bls	1d0 <read_bytes+0x1d0>
     13c:	ldr	r1, [r4, #16]
     140:	cmp	r1, #0
     144:	beq	15c <read_bytes+0x15c>
     148:	ldr	r2, [r4, #16]
     14c:	cmp	r2, #1
     150:	moveq	ip, #1
     154:	movne	ip, #0
     158:	b	160 <read_bytes+0x160>
     15c:	mov	ip, #1
     160:	cmp	ip, #0
     164:	bne	1bc <read_bytes+0x1bc>
     168:	add	r2, sp, #64	; 0x40
     16c:	mov	r1, r9
     170:	mov	r0, r6
     174:	bl	0 <coda_str64>
     178:	add	r2, sp, #88	; 0x58
     17c:	mov	r1, r8
     180:	mov	r0, r5
     184:	bl	0 <coda_str64>
     188:	ldr	r0, [r4, #40]	; 0x28
     18c:	ldr	r1, [r4, #44]	; 0x2c
     190:	add	r2, sp, #40	; 0x28
     194:	bl	0 <coda_str64>
     198:	mvn	r0, #300	; 0x12c
     19c:	ldr	r1, [pc, #120]	; 21c <read_bytes+0x21c>
     1a0:	add	r2, sp, #64	; 0x40
     1a4:	add	r3, sp, #88	; 0x58
     1a8:	add	r4, sp, #40	; 0x28
     1ac:	str	r4, [sp]
     1b0:	bl	0 <coda_set_error>
     1b4:	mvn	r0, #0
     1b8:	b	1e8 <read_bytes+0x1e8>
     1bc:	mvn	r0, #300	; 0x12c
     1c0:	ldr	r1, [pc, #68]	; 20c <read_bytes+0x20c>
     1c4:	bl	0 <coda_set_error>
     1c8:	mvn	r0, #0
     1cc:	b	1e8 <read_bytes+0x1e8>
     1d0:	ldr	r2, [r4, #48]	; 0x30
     1d4:	add	r1, r2, r5
     1d8:	mov	r2, r6
     1dc:	mov	r0, r7
     1e0:	bl	0 <memcpy>
     1e4:	mov	r0, #0
     1e8:	ldr	r4, [sp, #16]
     1ec:	ldr	r5, [sp, #20]
     1f0:	ldr	r6, [sp, #24]
     1f4:	ldr	r7, [sp, #28]
     1f8:	ldr	r8, [sp, #32]
     1fc:	ldr	r9, [sp, #36]	; 0x24
     200:	ldr	lr, [sp, #8]
     204:	add	sp, sp, #112	; 0x70
     208:	bx	lr
     20c:	.word	0x00000148
     210:	.word	0x00000252
     214:	.word	0x00000082
     218:	.word	0x000001a4
     21c:	.word	0x000000ff
     220:	.word	0x000000a0

00000224 <read_bits>:
     224:	mov	ip, sp
     228:	sub	sp, sp, #80	; 0x50
     22c:	str	ip, [sp, #12]
     230:	str	lr, [sp, #16]
     234:	str	r4, [sp, #32]
     238:	str	r5, [sp, #36]	; 0x24
     23c:	str	r6, [sp, #40]	; 0x28
     240:	str	r7, [sp, #44]	; 0x2c
     244:	str	r8, [sp, #48]	; 0x30
     248:	str	r9, [sp, #52]	; 0x34
     24c:	str	sl, [sp, #56]	; 0x38
     250:	str	fp, [sp, #60]	; 0x3c
     254:	ldr	fp, [ip, #8]
     258:	ldr	r6, [ip, #4]
     25c:	ldr	r9, [ip]
     260:	mov	sl, r3
     264:	mov	r7, r2
     268:	str	r0, [sp, #24]
     26c:	mov	r3, #0
     270:	mov	r2, r7
     274:	and	r1, r2, #7
     278:	adds	r1, r1, r9
     27c:	adc	r3, r3, r6
     280:	rsbs	r0, r1, #0
     284:	rsc	r2, r3, #0
     288:	and	r4, r0, #7
     28c:	mov	r2, #0
     290:	cmp	r3, r2
     294:	bne	2a8 <read_bits+0x84>
     298:	mov	r2, #8
     29c:	cmp	r1, r2
     2a0:	bls	6c0 <read_bits+0x49c>
     2a4:	b	2b4 <read_bits+0x90>
     2a8:	mov	ip, #0
     2ac:	cmp	r3, ip
     2b0:	blt	6c0 <read_bits+0x49c>
     2b4:	cmp	r4, #0
     2b8:	beq	5b4 <read_bits+0x390>
     2bc:	mov	r5, r6
     2c0:	movw	r3, #43690	; 0xaaaa
     2c4:	movt	r3, #10922	; 0x2aaa
     2c8:	movw	r2, #43691	; 0xaaab
     2cc:	movt	r2, #43690	; 0xaaaa
     2d0:	mov	r1, r5
     2d4:	mov	r0, r9
     2d8:	bl	0 <__compcert_i64_smulh>
     2dc:	asr	ip, r1, #2
     2e0:	lsr	r2, r0, #2
     2e4:	orr	r3, r2, r1, lsl #30
     2e8:	mov	r1, #0
     2ec:	lsr	r2, r5, #31
     2f0:	adds	lr, r3, r2
     2f4:	adc	ip, ip, r1
     2f8:	mov	r1, lr
     2fc:	mov	r0, #24
     300:	umull	r2, r3, r1, r0
     304:	lsl	r0, ip, #4
     308:	add	ip, r0, ip, lsl #3
     30c:	add	r3, r3, ip
     310:	subs	r0, r9, r2
     314:	sbc	ip, r5, r3
     318:	orr	r1, ip, r0
     31c:	cmp	r1, #0
     320:	beq	4b8 <read_bits+0x294>
     324:	mov	r5, r6
     328:	movw	r3, #43690	; 0xaaaa
     32c:	movt	r3, #10922	; 0x2aaa
     330:	movw	r2, #43691	; 0xaaab
     334:	movt	r2, #43690	; 0xaaaa
     338:	mov	r1, r5
     33c:	mov	r0, r9
     340:	bl	0 <__compcert_i64_smulh>
     344:	asr	r3, r1, #2
     348:	lsr	ip, r0, #2
     34c:	orr	ip, ip, r1, lsl #30
     350:	mov	r0, #0
     354:	lsr	r1, r5, #31
     358:	adds	lr, ip, r1
     35c:	adc	r2, r3, r0
     360:	mov	r3, lr
     364:	mov	ip, #24
     368:	umull	r0, r1, r3, ip
     36c:	lsl	ip, r2, #4
     370:	add	r2, ip, r2, lsl #3
     374:	add	r1, r1, r2
     378:	subs	lr, r9, r0
     37c:	sbc	r3, r5, r1
     380:	mov	r5, lr
     384:	mov	r2, r7
     388:	and	r0, r2, #7
     38c:	add	r3, r0, r5
     390:	and	r2, r3, #7
     394:	cmp	r2, #0
     398:	movne	r1, #1
     39c:	moveq	r1, #0
     3a0:	mov	r3, r7
     3a4:	and	r3, r3, #7
     3a8:	add	r2, r3, r5
     3ac:	add	r0, r1, r2, lsr #3
     3b0:	str	r0, [sp, #28]
     3b4:	and	ip, r5, #7
     3b8:	cmp	ip, #0
     3bc:	movne	r1, #1
     3c0:	moveq	r1, #0
     3c4:	add	r8, r1, r5, lsr #3
     3c8:	mov	r3, sl
     3cc:	asr	r3, r3, #3
     3d0:	mov	ip, r7
     3d4:	lsr	r0, ip, #3
     3d8:	mov	ip, sl
     3dc:	orr	r2, r0, ip, lsl #29
     3e0:	mov	ip, #0
     3e4:	add	r0, sp, #72	; 0x48
     3e8:	str	r0, [sp, #8]
     3ec:	str	ip, [sp, #4]
     3f0:	ldr	r1, [sp, #28]
     3f4:	str	r1, [sp]
     3f8:	ldr	r0, [sp, #24]
     3fc:	bl	0 <read_bytes>
     400:	cmp	r0, #0
     404:	beq	410 <read_bits+0x1ec>
     408:	mvn	r0, #0
     40c:	b	748 <read_bits+0x524>
     410:	mov	r3, #0
     414:	str	r3, [sp, #68]	; 0x44
     418:	mov	ip, #0
     41c:	ldr	r0, [sp, #28]
     420:	cmp	ip, r0
     424:	bcs	448 <read_bits+0x224>
     428:	add	r1, sp, #68	; 0x44
     42c:	rsb	r0, ip, #3
     430:	add	r2, sp, #72	; 0x48
     434:	ldrb	r3, [r2, ip]
     438:	and	r3, r3, #255	; 0xff
     43c:	strb	r3, [r1, r0]
     440:	add	ip, ip, #1
     444:	b	41c <read_bits+0x1f8>
     448:	ldr	r2, [sp, #68]	; 0x44
     44c:	rsb	ip, r0, #4
     450:	add	r0, r4, ip, lsl #3
     454:	lsr	ip, r2, r0
     458:	mov	r0, #1
     45c:	lsl	r0, r0, r5
     460:	sub	r3, r0, #1
     464:	and	r0, ip, r3
     468:	str	r0, [sp, #68]	; 0x44
     46c:	mov	r2, #0
     470:	cmp	r2, r8
     474:	bcs	49c <read_bits+0x278>
     478:	add	r3, sp, #68	; 0x44
     47c:	sub	ip, r8, r2
     480:	add	r0, r3, ip
     484:	sub	lr, r0, #4096	; 0x1000
     488:	ldrb	r3, [lr, #4095]	; 0xfff
     48c:	and	ip, r3, #255	; 0xff
     490:	strb	ip, [fp, r2]
     494:	add	r2, r2, #1
     498:	b	470 <read_bits+0x24c>
     49c:	add	fp, fp, r8
     4a0:	mov	ip, #0
     4a4:	adds	r7, r7, r5
     4a8:	adc	sl, sl, ip
     4ac:	mov	r3, #0
     4b0:	subs	r9, r9, r5
     4b4:	sbc	r6, r6, r3
     4b8:	mov	r1, r6
     4bc:	mov	r0, r9
     4c0:	mov	r2, #0
     4c4:	cmp	r1, r2
     4c8:	bne	4dc <read_bits+0x2b8>
     4cc:	mov	r1, #0
     4d0:	cmp	r0, r1
     4d4:	bhi	4e8 <read_bits+0x2c4>
     4d8:	b	744 <read_bits+0x520>
     4dc:	mov	ip, #0
     4e0:	cmp	r1, ip
     4e4:	ble	744 <read_bits+0x520>
     4e8:	mov	r1, sl
     4ec:	mov	r0, r7
     4f0:	asr	r3, r1, #3
     4f4:	lsr	ip, r0, #3
     4f8:	orr	r2, ip, r1, lsl #29
     4fc:	mov	ip, #0
     500:	mov	r0, #4
     504:	add	r5, sp, #72	; 0x48
     508:	str	r5, [sp, #8]
     50c:	str	ip, [sp, #4]
     510:	str	r0, [sp]
     514:	ldr	r0, [sp, #24]
     518:	bl	0 <read_bytes>
     51c:	cmp	r0, #0
     520:	beq	52c <read_bits+0x308>
     524:	mvn	r0, #0
     528:	b	748 <read_bits+0x524>
     52c:	ldrb	r1, [sp, #75]	; 0x4b
     530:	and	r1, r1, #255	; 0xff
     534:	strb	r1, [sp, #68]	; 0x44
     538:	ldrb	r1, [sp, #74]	; 0x4a
     53c:	and	r0, r1, #255	; 0xff
     540:	strb	r0, [sp, #69]	; 0x45
     544:	ldrb	r2, [sp, #73]	; 0x49
     548:	and	r0, r2, #255	; 0xff
     54c:	strb	r0, [sp, #70]	; 0x46
     550:	ldrb	ip, [sp, #72]	; 0x48
     554:	and	r1, ip, #255	; 0xff
     558:	strb	r1, [sp, #71]	; 0x47
     55c:	ldr	ip, [sp, #68]	; 0x44
     560:	lsr	r3, ip, r4
     564:	str	r3, [sp, #68]	; 0x44
     568:	ldrb	r2, [sp, #70]	; 0x46
     56c:	and	r0, r2, #255	; 0xff
     570:	strb	r0, [fp]
     574:	ldrb	r2, [sp, #69]	; 0x45
     578:	and	r3, r2, #255	; 0xff
     57c:	strb	r3, [fp, #1]
     580:	ldrb	r0, [sp, #68]	; 0x44
     584:	and	r0, r0, #255	; 0xff
     588:	strb	r0, [fp, #2]
     58c:	add	fp, fp, #3
     590:	mov	ip, #0
     594:	mov	r3, #24
     598:	adds	r7, r7, r3
     59c:	adc	sl, sl, ip
     5a0:	mov	r0, #0
     5a4:	mov	ip, #24
     5a8:	subs	r9, r9, ip
     5ac:	sbc	r6, r6, r0
     5b0:	b	4b8 <read_bits+0x294>
     5b4:	mov	r3, r9
     5b8:	mov	r2, #0
     5bc:	and	r3, r3, #7
     5c0:	orr	r0, r2, r3
     5c4:	cmp	r0, #0
     5c8:	beq	654 <read_bits+0x430>
     5cc:	mov	r1, sl
     5d0:	asr	r3, r1, #3
     5d4:	mov	r2, r7
     5d8:	lsr	r0, r2, #3
     5dc:	mov	r2, sl
     5e0:	orr	r2, r0, r2, lsl #29
     5e4:	mov	r0, #0
     5e8:	mov	ip, #1
     5ec:	add	r4, sp, #64	; 0x40
     5f0:	str	r4, [sp, #8]
     5f4:	str	r0, [sp, #4]
     5f8:	str	ip, [sp]
     5fc:	ldr	r0, [sp, #24]
     600:	bl	0 <read_bytes>
     604:	cmp	r0, #0
     608:	beq	614 <read_bits+0x3f0>
     60c:	mvn	r0, #0
     610:	b	748 <read_bits+0x524>
     614:	mov	r3, r9
     618:	and	ip, r3, #7
     61c:	ldrb	r0, [sp, #64]	; 0x40
     620:	mov	r3, #1
     624:	lsl	r3, r3, ip
     628:	sub	r2, r3, #1
     62c:	and	r3, r0, r2
     630:	and	r1, r3, #255	; 0xff
     634:	strb	r1, [fp]
     638:	add	fp, fp, #1
     63c:	mov	r0, #0
     640:	adds	r7, r7, ip
     644:	adc	sl, sl, r0
     648:	mov	r0, #0
     64c:	subs	r9, r9, ip
     650:	sbc	r6, r6, r0
     654:	mov	r2, r6
     658:	mov	r3, #0
     65c:	cmp	r2, r3
     660:	bne	678 <read_bits+0x454>
     664:	mov	r0, r9
     668:	mov	ip, #0
     66c:	cmp	r0, ip
     670:	bhi	684 <read_bits+0x460>
     674:	b	744 <read_bits+0x520>
     678:	mov	r0, #0
     67c:	cmp	r2, r0
     680:	ble	744 <read_bits+0x520>
     684:	asr	r3, sl, #3
     688:	lsr	r2, r7, #3
     68c:	orr	r2, r2, sl, lsl #29
     690:	asr	r0, r6, #3
     694:	lsr	ip, r9, #3
     698:	orr	ip, ip, r6, lsl #29
     69c:	str	fp, [sp, #8]
     6a0:	str	r0, [sp, #4]
     6a4:	str	ip, [sp]
     6a8:	ldr	r0, [sp, #24]
     6ac:	bl	0 <read_bytes>
     6b0:	cmp	r0, #0
     6b4:	beq	744 <read_bits+0x520>
     6b8:	mvn	r0, #0
     6bc:	b	748 <read_bits+0x524>
     6c0:	asr	r3, sl, #3
     6c4:	lsr	ip, r7, #3
     6c8:	orr	r2, ip, sl, lsl #29
     6cc:	mov	r1, #0
     6d0:	mov	r0, #1
     6d4:	str	fp, [sp, #8]
     6d8:	str	r1, [sp, #4]
     6dc:	str	r0, [sp]
     6e0:	ldr	r0, [sp, #24]
     6e4:	bl	0 <read_bytes>
     6e8:	cmp	r0, #0
     6ec:	beq	6f8 <read_bits+0x4d4>
     6f0:	mvn	r0, #0
     6f4:	b	748 <read_bits+0x524>
     6f8:	cmp	r4, #0
     6fc:	beq	710 <read_bits+0x4ec>
     700:	ldrb	r1, [fp]
     704:	asr	r1, r1, r4
     708:	and	r2, r1, #255	; 0xff
     70c:	strb	r2, [fp]
     710:	mov	r0, #0
     714:	mov	ip, r9
     718:	and	r1, ip, #7
     71c:	orr	r2, r0, r1
     720:	cmp	r2, #0
     724:	beq	744 <read_bits+0x520>
     728:	ldrb	r2, [fp]
     72c:	mov	r1, #1
     730:	lsl	r1, r1, r9
     734:	sub	r0, r1, #1
     738:	and	ip, r2, r0
     73c:	and	ip, ip, #255	; 0xff
     740:	strb	ip, [fp]
     744:	mov	r0, #0
     748:	ldr	r4, [sp, #32]
     74c:	ldr	r5, [sp, #36]	; 0x24
     750:	ldr	r6, [sp, #40]	; 0x28
     754:	ldr	r7, [sp, #44]	; 0x2c
     758:	ldr	r8, [sp, #48]	; 0x30
     75c:	ldr	r9, [sp, #52]	; 0x34
     760:	ldr	sl, [sp, #56]	; 0x38
     764:	ldr	fp, [sp, #60]	; 0x3c
     768:	ldr	lr, [sp, #16]
     76c:	add	sp, sp, #80	; 0x50
     770:	bx	lr

00000774 <swap4>:
     774:	mov	ip, sp
     778:	sub	sp, sp, #8
     77c:	str	ip, [sp]
     780:	str	lr, [sp, #4]
     784:	ldrb	ip, [r0]
     788:	ldrb	r3, [r0, #3]
     78c:	eor	r2, ip, r3
     790:	and	r1, r2, #255	; 0xff
     794:	strb	r1, [r0]
     798:	ldrb	r1, [r0]
     79c:	ldrb	r2, [r0, #3]
     7a0:	eor	r1, r1, r2
     7a4:	and	r2, r1, #255	; 0xff
     7a8:	strb	r2, [r0, #3]
     7ac:	ldrb	ip, [r0]
     7b0:	ldrb	r1, [r0, #3]
     7b4:	eor	r1, ip, r1
     7b8:	and	ip, r1, #255	; 0xff
     7bc:	strb	ip, [r0]
     7c0:	ldrb	ip, [r0, #1]
     7c4:	ldrb	r3, [r0, #2]
     7c8:	eor	ip, ip, r3
     7cc:	and	r1, ip, #255	; 0xff
     7d0:	strb	r1, [r0, #1]
     7d4:	ldrb	r3, [r0, #1]
     7d8:	ldrb	r1, [r0, #2]
     7dc:	eor	ip, r3, r1
     7e0:	and	r1, ip, #255	; 0xff
     7e4:	strb	r1, [r0, #2]
     7e8:	ldrb	r2, [r0, #1]
     7ec:	ldrb	r1, [r0, #2]
     7f0:	eor	r2, r2, r1
     7f4:	and	r1, r2, #255	; 0xff
     7f8:	strb	r1, [r0, #1]
     7fc:	ldr	lr, [sp, #4]
     800:	add	sp, sp, #8
     804:	bx	lr

00000808 <swap8>:
     808:	mov	ip, sp
     80c:	sub	sp, sp, #8
     810:	str	ip, [sp]
     814:	str	lr, [sp, #4]
     818:	ldrb	r1, [r0]
     81c:	ldrb	r2, [r0, #7]
     820:	eor	r1, r1, r2
     824:	and	r2, r1, #255	; 0xff
     828:	strb	r2, [r0]
     82c:	ldrb	ip, [r0]
     830:	ldrb	r1, [r0, #7]
     834:	eor	r3, ip, r1
     838:	and	r1, r3, #255	; 0xff
     83c:	strb	r1, [r0, #7]
     840:	ldrb	r1, [r0]
     844:	ldrb	r3, [r0, #7]
     848:	eor	r3, r1, r3
     84c:	and	r1, r3, #255	; 0xff
     850:	strb	r1, [r0]
     854:	ldrb	r2, [r0, #1]
     858:	ldrb	ip, [r0, #6]
     85c:	eor	r1, r2, ip
     860:	and	r2, r1, #255	; 0xff
     864:	strb	r2, [r0, #1]
     868:	ldrb	r1, [r0, #1]
     86c:	ldrb	ip, [r0, #6]
     870:	eor	r2, r1, ip
     874:	and	r3, r2, #255	; 0xff
     878:	strb	r3, [r0, #6]
     87c:	ldrb	r3, [r0, #1]
     880:	ldrb	r2, [r0, #6]
     884:	eor	ip, r3, r2
     888:	and	ip, ip, #255	; 0xff
     88c:	strb	ip, [r0, #1]
     890:	ldrb	r3, [r0, #2]
     894:	ldrb	r1, [r0, #5]
     898:	eor	ip, r3, r1
     89c:	and	r3, ip, #255	; 0xff
     8a0:	strb	r3, [r0, #2]
     8a4:	ldrb	r2, [r0, #2]
     8a8:	ldrb	r1, [r0, #5]
     8ac:	eor	r1, r2, r1
     8b0:	and	r1, r1, #255	; 0xff
     8b4:	strb	r1, [r0, #5]
     8b8:	ldrb	r1, [r0, #2]
     8bc:	ldrb	r3, [r0, #5]
     8c0:	eor	ip, r1, r3
     8c4:	and	r2, ip, #255	; 0xff
     8c8:	strb	r2, [r0, #2]
     8cc:	ldrb	ip, [r0, #3]
     8d0:	ldrb	r2, [r0, #4]
     8d4:	eor	r1, ip, r2
     8d8:	and	r1, r1, #255	; 0xff
     8dc:	strb	r1, [r0, #3]
     8e0:	ldrb	r1, [r0, #3]
     8e4:	ldrb	r2, [r0, #4]
     8e8:	eor	r2, r1, r2
     8ec:	and	r1, r2, #255	; 0xff
     8f0:	strb	r1, [r0, #4]
     8f4:	ldrb	ip, [r0, #3]
     8f8:	ldrb	r1, [r0, #4]
     8fc:	eor	r1, ip, r1
     900:	and	r3, r1, #255	; 0xff
     904:	strb	r3, [r0, #3]
     908:	ldr	lr, [sp, #4]
     90c:	add	sp, sp, #8
     910:	bx	lr

00000914 <coda_grib_cursor_set_product>:
     914:	mov	ip, sp
     918:	sub	sp, sp, #8
     91c:	str	ip, [sp]
     920:	str	lr, [sp, #4]
     924:	str	r1, [r0]
     928:	mov	r3, #1
     92c:	str	r3, [r0, #4]
     930:	ldr	r2, [r1, #20]
     934:	str	r2, [r0, #8]
     938:	mvn	ip, #0
     93c:	str	ip, [r0, #12]
     940:	mvn	r2, #0
     944:	mvn	r1, #0
     948:	str	r1, [r0, #16]
     94c:	str	r2, [r0, #20]
     950:	mov	r0, #0
     954:	ldr	lr, [sp, #4]
     958:	add	sp, sp, #8
     95c:	bx	lr

00000960 <coda_grib_cursor_goto_array_element>:
     960:	mov	ip, sp
     964:	sub	sp, sp, #24
     968:	str	ip, [sp, #4]
     96c:	str	lr, [sp, #8]
     970:	str	r4, [sp, #16]
     974:	mov	r3, r2
     978:	mov	r2, r1
     97c:	mov	r1, r3
     980:	cmp	r2, #1
     984:	beq	9a8 <coda_grib_cursor_goto_array_element+0x48>
     988:	mvn	r0, #105	; 0x69
     98c:	ldr	r1, [pc, #44]	; 9c0 <coda_grib_cursor_goto_array_element+0x60>
     990:	ldr	r3, [pc, #44]	; 9c4 <coda_grib_cursor_goto_array_element+0x64>
     994:	mov	r4, #68	; 0x44
     998:	str	r4, [sp]
     99c:	bl	0 <coda_set_error>
     9a0:	mvn	r0, #0
     9a4:	b	9b0 <coda_grib_cursor_goto_array_element+0x50>
     9a8:	ldr	r1, [r1]
     9ac:	bl	9c8 <coda_grib_cursor_goto_array_element_by_index>
     9b0:	ldr	r4, [sp, #16]
     9b4:	ldr	lr, [sp, #8]
     9b8:	add	sp, sp, #24
     9bc:	bx	lr
     9c0:	.word	0x00000036
     9c4:	.word	0x000001f2

000009c8 <coda_grib_cursor_goto_array_element_by_index>:
     9c8:	mov	ip, sp
     9cc:	sub	sp, sp, #24
     9d0:	str	ip, [sp, #8]
     9d4:	str	lr, [sp, #12]
     9d8:	str	r4, [sp, #16]
     9dc:	str	r5, [sp, #20]
     9e0:	mov	r2, r1
     9e4:	ldr	r1, [r0, #4]
     9e8:	lsl	r3, r1, #4
     9ec:	add	r3, r0, r3
     9f0:	sub	lr, r3, #4096	; 0x1000
     9f4:	ldr	r4, [lr, #4088]	; 0xff8
     9f8:	ldr	r1, [pc, #200]	; ac8 <coda_grib_cursor_goto_array_element_by_index+0x100>
     9fc:	ldr	ip, [r1]
     a00:	cmp	ip, #0
     a04:	beq	a58 <coda_grib_cursor_goto_array_element_by_index+0x90>
     a08:	cmp	r2, #0
     a0c:	blt	a24 <coda_grib_cursor_goto_array_element_by_index+0x5c>
     a10:	ldr	r1, [r4, #8]
     a14:	cmp	r2, r1
     a18:	movge	r1, #1
     a1c:	movlt	r1, #0
     a20:	b	a28 <coda_grib_cursor_goto_array_element_by_index+0x60>
     a24:	mov	r1, #1
     a28:	cmp	r1, #0
     a2c:	beq	a58 <coda_grib_cursor_goto_array_element_by_index+0x90>
     a30:	mvn	r0, #106	; 0x6a
     a34:	ldr	r1, [pc, #144]	; acc <coda_grib_cursor_goto_array_element_by_index+0x104>
     a38:	ldr	r3, [r4, #8]
     a3c:	ldr	r5, [pc, #128]	; ac4 <coda_grib_cursor_goto_array_element_by_index+0xfc>
     a40:	mov	r4, #84	; 0x54
     a44:	str	r4, [sp, #4]
     a48:	str	r5, [sp]
     a4c:	bl	0 <coda_set_error>
     a50:	mvn	r0, #0
     a54:	b	ab0 <coda_grib_cursor_goto_array_element_by_index+0xe8>
     a58:	ldr	ip, [r0, #4]
     a5c:	add	r1, ip, #1
     a60:	str	r1, [r0, #4]
     a64:	ldr	r3, [r0, #4]
     a68:	lsl	ip, r3, #4
     a6c:	add	r3, r0, ip
     a70:	ldr	r1, [r4, #12]
     a74:	sub	lr, r3, #4096	; 0x1000
     a78:	str	r1, [lr, #4088]	; 0xff8
     a7c:	ldr	r1, [r0, #4]
     a80:	lsl	ip, r1, #4
     a84:	add	r1, r0, ip
     a88:	sub	lr, r1, #4096	; 0x1000
     a8c:	str	r2, [lr, #4092]	; 0xffc
     a90:	ldr	r2, [r0, #4]
     a94:	lsl	r2, r2, #4
     a98:	add	r3, r0, r2
     a9c:	mvn	r1, #0
     aa0:	mvn	r0, #0
     aa4:	str	r0, [r3]
     aa8:	str	r1, [r3, #4]
     aac:	mov	r0, #0
     ab0:	ldr	r4, [sp, #16]
     ab4:	ldr	r5, [sp, #20]
     ab8:	ldr	lr, [sp, #12]
     abc:	add	sp, sp, #24
     ac0:	bx	lr
     ac4:	.word	0x000001f2
	...

00000ad0 <coda_grib_cursor_goto_next_array_element>:
     ad0:	mov	ip, sp
     ad4:	sub	sp, sp, #16
     ad8:	str	ip, [sp]
     adc:	str	lr, [sp, #4]
     ae0:	str	r4, [sp, #8]
     ae4:	mov	r4, r0
     ae8:	ldr	r3, [r4, #4]
     aec:	sub	r0, r3, #1
     af0:	str	r0, [r4, #4]
     af4:	ldr	r2, [r4, #4]
     af8:	lsl	r3, r2, #4
     afc:	add	ip, r4, r3
     b00:	ldr	r2, [ip, #12]
     b04:	add	r1, r2, #1
     b08:	mov	r0, r4
     b0c:	bl	9c8 <coda_grib_cursor_goto_array_element_by_index>
     b10:	cmp	r0, #0
     b14:	beq	b2c <coda_grib_cursor_goto_next_array_element+0x5c>
     b18:	ldr	r1, [r4, #4]
     b1c:	add	r0, r1, #1
     b20:	str	r0, [r4, #4]
     b24:	mvn	r0, #0
     b28:	b	b30 <coda_grib_cursor_goto_next_array_element+0x60>
     b2c:	mov	r0, #0
     b30:	ldr	r4, [sp, #8]
     b34:	ldr	lr, [sp, #4]
     b38:	add	sp, sp, #16
     b3c:	bx	lr

00000b40 <coda_grib_cursor_goto_attributes>:
     b40:	mov	ip, sp
     b44:	sub	sp, sp, #16
     b48:	str	ip, [sp]
     b4c:	str	lr, [sp, #4]
     b50:	str	r4, [sp, #8]
     b54:	mov	r4, r0
     b58:	ldr	r2, [r4, #4]
     b5c:	lsl	ip, r2, #4
     b60:	add	ip, r4, ip
     b64:	sub	lr, ip, #4096	; 0x1000
     b68:	ldr	r3, [lr, #4088]	; 0xff8
     b6c:	ldr	r0, [r3, #4]
     b70:	ldr	r0, [r0]
     b74:	ldr	ip, [r4, #4]
     b78:	add	r3, ip, #1
     b7c:	str	r3, [r4, #4]
     b80:	bl	0 <coda_mem_empty_record>
     b84:	ldr	r3, [r4, #4]
     b88:	lsl	r1, r3, #4
     b8c:	add	r1, r4, r1
     b90:	sub	lr, r1, #4096	; 0x1000
     b94:	str	r0, [lr, #4088]	; 0xff8
     b98:	ldr	r2, [r4, #4]
     b9c:	lsl	r2, r2, #4
     ba0:	add	r2, r4, r2
     ba4:	mvn	r1, #0
     ba8:	sub	lr, r2, #4096	; 0x1000
     bac:	str	r1, [lr, #4092]	; 0xffc
     bb0:	ldr	r3, [r4, #4]
     bb4:	lsl	r1, r3, #4
     bb8:	add	r2, r4, r1
     bbc:	mvn	r1, #0
     bc0:	mvn	r0, #0
     bc4:	str	r0, [r2]
     bc8:	str	r1, [r2, #4]
     bcc:	mov	r0, #0
     bd0:	ldr	r4, [sp, #8]
     bd4:	ldr	lr, [sp, #4]
     bd8:	add	sp, sp, #16
     bdc:	bx	lr

00000be0 <coda_grib_cursor_get_num_elements>:
     be0:	mov	ip, sp
     be4:	sub	sp, sp, #8
     be8:	str	ip, [sp]
     bec:	str	lr, [sp, #4]
     bf0:	ldr	r2, [r0, #4]
     bf4:	lsl	r2, r2, #4
     bf8:	add	ip, r0, r2
     bfc:	sub	lr, ip, #4096	; 0x1000
     c00:	ldr	r2, [lr, #4088]	; 0xff8
     c04:	ldr	r2, [r2, #4]
     c08:	ldr	r2, [r2, #8]
     c0c:	cmp	r2, #1
     c10:	bne	c34 <coda_grib_cursor_get_num_elements+0x54>
     c14:	ldr	r3, [r0, #4]
     c18:	lsl	r2, r3, #4
     c1c:	add	ip, r0, r2
     c20:	sub	lr, ip, #4096	; 0x1000
     c24:	ldr	r3, [lr, #4088]	; 0xff8
     c28:	ldr	r0, [r3, #8]
     c2c:	str	r0, [r1]
     c30:	b	c3c <coda_grib_cursor_get_num_elements+0x5c>
     c34:	mov	r2, #1
     c38:	str	r2, [r1]
     c3c:	mov	r0, #0
     c40:	ldr	lr, [sp, #4]
     c44:	add	sp, sp, #8
     c48:	bx	lr

00000c4c <coda_grib_cursor_get_array_dim>:
     c4c:	mov	ip, sp
     c50:	sub	sp, sp, #8
     c54:	str	ip, [sp]
     c58:	str	lr, [sp, #4]
     c5c:	mov	r3, r2
     c60:	mov	r2, r1
     c64:	mov	r1, r3
     c68:	mov	r3, #1
     c6c:	str	r3, [r2]
     c70:	bl	be0 <coda_grib_cursor_get_num_elements>
     c74:	ldr	lr, [sp, #4]
     c78:	add	sp, sp, #8
     c7c:	bx	lr

00000c80 <coda_grib_cursor_read_float>:
     c80:	mov	ip, sp
     c84:	sub	sp, sp, #48	; 0x30
     c88:	str	ip, [sp, #12]
     c8c:	str	lr, [sp, #16]
     c90:	str	r4, [sp, #24]
     c94:	str	r5, [sp, #28]
     c98:	str	r6, [sp, #32]
     c9c:	str	r7, [sp, #36]	; 0x24
     ca0:	mov	r4, r1
     ca4:	mov	r6, r0
     ca8:	ldr	r0, [r6, #4]
     cac:	cmp	r0, #1
     cb0:	bgt	cc8 <coda_grib_cursor_read_float+0x48>
     cb4:	ldr	r0, [pc, #660]	; f50 <coda_grib_cursor_read_float+0x2d0>
     cb8:	ldr	r1, [pc, #664]	; f58 <coda_grib_cursor_read_float+0x2d8>
     cbc:	mov	r2, #144	; 0x90
     cc0:	ldr	r3, [pc, #660]	; f5c <coda_grib_cursor_read_float+0x2dc>
     cc4:	bl	0 <__assert_fail>
     cc8:	ldr	ip, [r6, #4]
     ccc:	lsl	r0, ip, #4
     cd0:	add	r1, r6, r0
     cd4:	sub	lr, r1, #4096	; 0x1000
     cd8:	ldr	r5, [lr, #4072]	; 0xfe8
     cdc:	ldr	ip, [r5, #4]
     ce0:	ldr	r2, [ip, #8]
     ce4:	cmp	r2, #1
     ce8:	beq	d00 <coda_grib_cursor_read_float+0x80>
     cec:	ldr	r0, [pc, #608]	; f54 <coda_grib_cursor_read_float+0x2d4>
     cf0:	ldr	r1, [pc, #608]	; f58 <coda_grib_cursor_read_float+0x2d8>
     cf4:	mov	r2, #146	; 0x92
     cf8:	ldr	r3, [pc, #604]	; f5c <coda_grib_cursor_read_float+0x2dc>
     cfc:	bl	0 <__assert_fail>
     d00:	ldr	r2, [r6, #4]
     d04:	lsl	r0, r2, #4
     d08:	add	ip, r6, r0
     d0c:	sub	lr, ip, #4096	; 0x1000
     d10:	ldr	ip, [lr, #4092]	; 0xffc
     d14:	ldr	r1, [r5, #24]
     d18:	cmp	r1, #0
     d1c:	beq	ed0 <coda_grib_cursor_read_float+0x250>
     d20:	mov	r2, #0
     d24:	mov	r1, #0
     d28:	str	r1, [sp, #40]	; 0x28
     d2c:	str	r2, [sp, #44]	; 0x2c
     d30:	ldr	r0, [r5, #28]
     d34:	cmp	r0, #0
     d38:	bne	d4c <coda_grib_cursor_read_float+0xcc>
     d3c:	vldr	s6, [r5, #36]	; 0x24
     d40:	vstr	s6, [r4]
     d44:	mov	r0, #0
     d48:	b	f34 <coda_grib_cursor_read_float+0x2b4>
     d4c:	ldr	r0, [r5, #56]	; 0x38
     d50:	cmp	r0, #0
     d54:	beq	e2c <coda_grib_cursor_read_float+0x1ac>
     d58:	mov	r3, #0
     d5c:	asr	r0, ip, #3
     d60:	ldr	r1, [r5, #56]	; 0x38
     d64:	ldrb	r1, [r1, r0]
     d68:	and	r2, r1, #255	; 0xff
     d6c:	and	r1, ip, #7
     d70:	rsb	r1, r1, #7
     d74:	asr	r1, r2, r1
     d78:	and	r1, r1, #1
     d7c:	cmp	r1, #0
     d80:	bne	d98 <coda_grib_cursor_read_float+0x118>
     d84:	bl	0 <coda_NaN>
     d88:	vcvt.f32.f64	s6, d0
     d8c:	vstr	s6, [r4]
     d90:	mov	r0, #0
     d94:	b	f34 <coda_grib_cursor_read_float+0x2b4>
     d98:	mov	r2, #0
     d9c:	asr	r1, r0, #4
     da0:	cmp	r2, r1
     da4:	bge	dc4 <coda_grib_cursor_read_float+0x144>
     da8:	ldr	r7, [r5, #60]	; 0x3c
     dac:	lsl	r1, r2, #4
     db0:	add	r1, r7, r1
     db4:	ldrb	r1, [r1, #15]
     db8:	add	r3, r3, r1
     dbc:	add	r2, r2, #1
     dc0:	b	d9c <coda_grib_cursor_read_float+0x11c>
     dc4:	asr	lr, r0, #31
     dc8:	add	lr, r0, lr, lsr #28
     dcc:	asr	r1, lr, #4
     dd0:	lsl	r1, r1, #4
     dd4:	sub	r1, r0, r1
     dd8:	cmp	r1, #0
     ddc:	beq	df4 <coda_grib_cursor_read_float+0x174>
     de0:	ldr	r1, [r5, #60]	; 0x3c
     de4:	add	r2, r1, r0
     de8:	sub	lr, r2, #4096	; 0x1000
     dec:	ldrb	r1, [lr, #4095]	; 0xfff
     df0:	add	r3, r3, r1
     df4:	ldr	r2, [r5, #56]	; 0x38
     df8:	ldrb	r1, [r2, r0]
     dfc:	and	r2, r1, #255	; 0xff
     e00:	mov	r1, #0
     e04:	and	r0, ip, #7
     e08:	cmp	r1, r0
     e0c:	bge	e28 <coda_grib_cursor_read_float+0x1a8>
     e10:	rsb	r0, r1, #7
     e14:	asr	r0, r2, r0
     e18:	and	r0, r0, #1
     e1c:	add	r3, r3, r0
     e20:	add	r1, r1, #1
     e24:	b	e04 <coda_grib_cursor_read_float+0x184>
     e28:	mov	ip, r3
     e2c:	add	r0, sp, #40	; 0x28
     e30:	ldr	r2, [r5, #28]
     e34:	and	r2, r2, #7
     e38:	cmp	r2, #0
     e3c:	movne	r1, #1
     e40:	moveq	r1, #0
     e44:	ldr	r3, [r5, #28]
     e48:	add	r3, r1, r3, asr #3
     e4c:	rsb	r1, r3, #8
     e50:	add	r7, r0, r1
     e54:	ldr	r0, [r6]
     e58:	ldr	r0, [r0, #52]	; 0x34
     e5c:	ldr	r2, [r5, #16]
     e60:	ldr	r3, [r5, #20]
     e64:	ldr	r1, [r5, #28]
     e68:	mul	ip, ip, r1
     e6c:	asr	r1, ip, #31
     e70:	adds	r2, r2, ip
     e74:	adc	r3, r3, r1
     e78:	ldr	r1, [r5, #28]
     e7c:	asr	ip, r1, #31
     e80:	str	r7, [sp, #8]
     e84:	str	ip, [sp, #4]
     e88:	str	r1, [sp]
     e8c:	bl	224 <read_bits>
     e90:	cmp	r0, #0
     e94:	beq	ea0 <coda_grib_cursor_read_float+0x220>
     e98:	mvn	r0, #0
     e9c:	b	f34 <coda_grib_cursor_read_float+0x2b4>
     ea0:	add	r0, sp, #40	; 0x28
     ea4:	bl	808 <swap8>
     ea8:	ldr	r0, [sp, #40]	; 0x28
     eac:	ldr	r1, [sp, #44]	; 0x2c
     eb0:	bl	0 <__compcert_i64_stod>
     eb4:	vldr	d5, [r5, #40]	; 0x28
     eb8:	vmul.f64	d1, d0, d5
     ebc:	vldr	d6, [r5, #48]	; 0x30
     ec0:	vadd.f64	d2, d1, d6
     ec4:	vcvt.f32.f64	s8, d2
     ec8:	vstr	s8, [r4]
     ecc:	b	f30 <coda_grib_cursor_read_float+0x2b0>
     ed0:	ldr	r1, [r6]
     ed4:	ldr	r0, [r1, #52]	; 0x34
     ed8:	ldr	r2, [r5, #16]
     edc:	ldr	r1, [r5, #20]
     ee0:	asr	r3, r1, #3
     ee4:	lsr	r2, r2, #3
     ee8:	orr	r1, r2, r1, lsl #29
     eec:	lsl	ip, ip, #2
     ef0:	asr	r2, ip, #31
     ef4:	adds	lr, r1, ip
     ef8:	adc	r3, r3, r2
     efc:	mov	r2, lr
     f00:	mov	ip, #0
     f04:	mov	r1, #4
     f08:	str	r4, [sp, #8]
     f0c:	str	ip, [sp, #4]
     f10:	str	r1, [sp]
     f14:	bl	0 <read_bytes>
     f18:	cmp	r0, #0
     f1c:	beq	f28 <coda_grib_cursor_read_float+0x2a8>
     f20:	mvn	r0, #0
     f24:	b	f34 <coda_grib_cursor_read_float+0x2b4>
     f28:	mov	r0, r4
     f2c:	bl	774 <swap4>
     f30:	mov	r0, #0
     f34:	ldr	r4, [sp, #24]
     f38:	ldr	r5, [sp, #28]
     f3c:	ldr	r6, [sp, #32]
     f40:	ldr	r7, [sp, #36]	; 0x24
     f44:	ldr	lr, [sp, #16]
     f48:	add	sp, sp, #48	; 0x30
     f4c:	bx	lr
     f50:	.word	0x0000013a
     f54:	.word	0x00000172
     f58:	.word	0x000001f2
     f5c:	.word	0x0000025d

00000f60 <coda_grib_cursor_read_float_array>:
     f60:	mov	ip, sp
     f64:	sub	sp, sp, #544	; 0x220
     f68:	str	ip, [sp]
     f6c:	str	lr, [sp, #4]
     f70:	str	r4, [sp, #8]
     f74:	str	r5, [sp, #12]
     f78:	str	r6, [sp, #16]
     f7c:	mov	r4, r1
     f80:	ldr	r3, [r0, #4]
     f84:	lsl	r1, r3, #4
     f88:	add	r1, r0, r1
     f8c:	sub	lr, r1, #4096	; 0x1000
     f90:	ldr	r5, [lr, #4088]	; 0xff8
     f94:	ldr	r2, [r5, #8]
     f98:	cmp	r2, #0
     f9c:	ble	1058 <coda_grib_cursor_read_float_array+0xf8>
     fa0:	mov	r2, r0
     fa4:	add	r3, sp, #24
     fa8:	mov	lr, #130	; 0x82
     fac:	ldr	ip, [r2], #4
     fb0:	subs	lr, lr, #1
     fb4:	str	ip, [r3], #4
     fb8:	bne	fac <coda_grib_cursor_read_float_array+0x4c>
     fbc:	ldr	r0, [sp, #28]
     fc0:	add	ip, r0, #1
     fc4:	str	ip, [sp, #28]
     fc8:	add	r1, sp, #32
     fcc:	ldr	r2, [sp, #28]
     fd0:	lsl	r0, r2, #4
     fd4:	add	ip, r1, r0
     fd8:	ldr	r3, [r5, #12]
     fdc:	sub	lr, ip, #4096	; 0x1000
     fe0:	str	r3, [lr, #4080]	; 0xff0
     fe4:	add	r3, sp, #32
     fe8:	ldr	r2, [sp, #28]
     fec:	lsl	r0, r2, #4
     ff0:	add	r2, r3, r0
     ff4:	mvn	r1, #0
     ff8:	mvn	r0, #0
     ffc:	sub	lr, r2, #4096	; 0x1000
    1000:	str	r0, [lr, #4088]	; 0xff8
    1004:	sub	lr, r2, #4096	; 0x1000
    1008:	str	r1, [lr, #4092]	; 0xffc
    100c:	mov	r6, #0
    1010:	ldr	r3, [r5, #8]
    1014:	cmp	r6, r3
    1018:	bge	1058 <coda_grib_cursor_read_float_array+0xf8>
    101c:	add	ip, sp, #32
    1020:	ldr	r3, [sp, #28]
    1024:	lsl	r0, r3, #4
    1028:	add	r3, ip, r0
    102c:	sub	lr, r3, #4096	; 0x1000
    1030:	str	r6, [lr, #4084]	; 0xff4
    1034:	add	r0, sp, #24
    1038:	add	r1, r4, r6, lsl #2
    103c:	bl	c80 <coda_grib_cursor_read_float>
    1040:	cmp	r0, #0
    1044:	beq	1050 <coda_grib_cursor_read_float_array+0xf0>
    1048:	mvn	r0, #0
    104c:	b	105c <coda_grib_cursor_read_float_array+0xfc>
    1050:	add	r6, r6, #1
    1054:	b	1010 <coda_grib_cursor_read_float_array+0xb0>
    1058:	mov	r0, #0
    105c:	ldr	r4, [sp, #8]
    1060:	ldr	r5, [sp, #12]
    1064:	ldr	r6, [sp, #16]
    1068:	ldr	lr, [sp, #4]
    106c:	add	sp, sp, #544	; 0x220
    1070:	bx	lr

00001074 <coda_grib_cursor_read_float_partial_array>:
    1074:	mov	ip, sp
    1078:	sub	sp, sp, #544	; 0x220
    107c:	str	ip, [sp]
    1080:	str	lr, [sp, #4]
    1084:	str	r4, [sp, #8]
    1088:	str	r5, [sp, #12]
    108c:	str	r6, [sp, #16]
    1090:	str	r7, [sp, #20]
    1094:	mov	r4, r3
    1098:	mov	r5, r2
    109c:	mov	r6, r1
    10a0:	ldr	r2, [r0, #4]
    10a4:	lsl	r2, r2, #4
    10a8:	add	ip, r0, r2
    10ac:	sub	lr, ip, #4096	; 0x1000
    10b0:	ldr	r7, [lr, #4088]	; 0xff8
    10b4:	ldr	r1, [r7, #8]
    10b8:	cmp	r1, #0
    10bc:	ble	1178 <coda_grib_cursor_read_float_partial_array+0x104>
    10c0:	mov	r2, r0
    10c4:	add	r3, sp, #24
    10c8:	mov	lr, #130	; 0x82
    10cc:	ldr	ip, [r2], #4
    10d0:	subs	lr, lr, #1
    10d4:	str	ip, [r3], #4
    10d8:	bne	10cc <coda_grib_cursor_read_float_partial_array+0x58>
    10dc:	ldr	r3, [sp, #28]
    10e0:	add	ip, r3, #1
    10e4:	str	ip, [sp, #28]
    10e8:	add	ip, sp, #32
    10ec:	ldr	r1, [sp, #28]
    10f0:	lsl	r0, r1, #4
    10f4:	add	r3, ip, r0
    10f8:	ldr	r0, [r7, #12]
    10fc:	sub	lr, r3, #4096	; 0x1000
    1100:	str	r0, [lr, #4080]	; 0xff0
    1104:	add	r0, sp, #32
    1108:	ldr	r2, [sp, #28]
    110c:	lsl	r3, r2, #4
    1110:	add	r2, r0, r3
    1114:	mvn	r1, #0
    1118:	mvn	r0, #0
    111c:	sub	lr, r2, #4096	; 0x1000
    1120:	str	r0, [lr, #4088]	; 0xff8
    1124:	sub	lr, r2, #4096	; 0x1000
    1128:	str	r1, [lr, #4092]	; 0xffc
    112c:	mov	r7, #0
    1130:	cmp	r7, r5
    1134:	bge	1178 <coda_grib_cursor_read_float_partial_array+0x104>
    1138:	add	ip, sp, #32
    113c:	ldr	r1, [sp, #28]
    1140:	lsl	r3, r1, #4
    1144:	add	r2, ip, r3
    1148:	add	r0, r6, r7
    114c:	sub	lr, r2, #4096	; 0x1000
    1150:	str	r0, [lr, #4084]	; 0xff4
    1154:	add	r0, sp, #24
    1158:	add	r1, r4, r7, lsl #2
    115c:	bl	c80 <coda_grib_cursor_read_float>
    1160:	cmp	r0, #0
    1164:	beq	1170 <coda_grib_cursor_read_float_partial_array+0xfc>
    1168:	mvn	r0, #0
    116c:	b	117c <coda_grib_cursor_read_float_partial_array+0x108>
    1170:	add	r7, r7, #1
    1174:	b	1130 <coda_grib_cursor_read_float_partial_array+0xbc>
    1178:	mov	r0, #0
    117c:	ldr	r4, [sp, #8]
    1180:	ldr	r5, [sp, #12]
    1184:	ldr	r6, [sp, #16]
    1188:	ldr	r7, [sp, #20]
    118c:	ldr	lr, [sp, #4]
    1190:	add	sp, sp, #544	; 0x220
    1194:	bx	lr
