
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/monster_test/CMakeFiles/monster_test.dir/monster_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <flatbuffers_uint8_cast_from_pe>:
       0:	push	{fp}		; (str fp, [sp, #-4]!)
       4:	add	fp, sp, #0
       8:	sub	sp, sp, #12
       c:	mov	r3, r0
      10:	strb	r3, [fp, #-5]
      14:	ldrb	r3, [fp, #-5]
      18:	mov	r0, r3
      1c:	add	sp, fp, #0
      20:	pop	{fp}		; (ldr fp, [sp], #4)
      24:	bx	lr

00000028 <flatbuffers_uint8_cast_to_pe>:
      28:	push	{fp}		; (str fp, [sp, #-4]!)
      2c:	add	fp, sp, #0
      30:	sub	sp, sp, #12
      34:	mov	r3, r0
      38:	strb	r3, [fp, #-5]
      3c:	ldrb	r3, [fp, #-5]
      40:	mov	r0, r3
      44:	add	sp, fp, #0
      48:	pop	{fp}		; (ldr fp, [sp], #4)
      4c:	bx	lr

00000050 <flatbuffers_uint8_read_from_pe>:
      50:	str	fp, [sp, #-8]!
      54:	str	lr, [sp, #4]
      58:	add	fp, sp, #4
      5c:	sub	sp, sp, #8
      60:	str	r0, [fp, #-8]
      64:	ldr	r3, [fp, #-8]
      68:	ldrb	r3, [r3]
      6c:	mov	r0, r3
      70:	bl	0 <flatbuffers_uint8_cast_from_pe>
      74:	mov	r3, r0
      78:	mov	r0, r3
      7c:	sub	sp, fp, #4
      80:	ldr	fp, [sp]
      84:	add	sp, sp, #4
      88:	pop	{pc}		; (ldr pc, [sp], #4)

0000008c <flatbuffers_uint16_cast_from_pe>:
      8c:	push	{fp}		; (str fp, [sp, #-4]!)
      90:	add	fp, sp, #0
      94:	sub	sp, sp, #12
      98:	mov	r3, r0
      9c:	strh	r3, [fp, #-6]
      a0:	ldrh	r3, [fp, #-6]
      a4:	mov	r0, r3
      a8:	add	sp, fp, #0
      ac:	pop	{fp}		; (ldr fp, [sp], #4)
      b0:	bx	lr

000000b4 <flatbuffers_uint16_cast_to_pe>:
      b4:	push	{fp}		; (str fp, [sp, #-4]!)
      b8:	add	fp, sp, #0
      bc:	sub	sp, sp, #12
      c0:	mov	r3, r0
      c4:	strh	r3, [fp, #-6]
      c8:	ldrh	r3, [fp, #-6]
      cc:	mov	r0, r3
      d0:	add	sp, fp, #0
      d4:	pop	{fp}		; (ldr fp, [sp], #4)
      d8:	bx	lr

000000dc <flatbuffers_uint16_read_from_pe>:
      dc:	str	fp, [sp, #-8]!
      e0:	str	lr, [sp, #4]
      e4:	add	fp, sp, #4
      e8:	sub	sp, sp, #8
      ec:	str	r0, [fp, #-8]
      f0:	ldr	r3, [fp, #-8]
      f4:	ldrh	r3, [r3]
      f8:	mov	r0, r3
      fc:	bl	8c <flatbuffers_uint16_cast_from_pe>
     100:	mov	r3, r0
     104:	mov	r0, r3
     108:	sub	sp, fp, #4
     10c:	ldr	fp, [sp]
     110:	add	sp, sp, #4
     114:	pop	{pc}		; (ldr pc, [sp], #4)

00000118 <flatbuffers_uint32_cast_from_pe>:
     118:	push	{fp}		; (str fp, [sp, #-4]!)
     11c:	add	fp, sp, #0
     120:	sub	sp, sp, #12
     124:	str	r0, [fp, #-8]
     128:	ldr	r3, [fp, #-8]
     12c:	mov	r0, r3
     130:	add	sp, fp, #0
     134:	pop	{fp}		; (ldr fp, [sp], #4)
     138:	bx	lr

0000013c <flatbuffers_uint32_cast_to_pe>:
     13c:	push	{fp}		; (str fp, [sp, #-4]!)
     140:	add	fp, sp, #0
     144:	sub	sp, sp, #12
     148:	str	r0, [fp, #-8]
     14c:	ldr	r3, [fp, #-8]
     150:	mov	r0, r3
     154:	add	sp, fp, #0
     158:	pop	{fp}		; (ldr fp, [sp], #4)
     15c:	bx	lr

00000160 <flatbuffers_uint32_read_from_pe>:
     160:	str	fp, [sp, #-8]!
     164:	str	lr, [sp, #4]
     168:	add	fp, sp, #4
     16c:	sub	sp, sp, #8
     170:	str	r0, [fp, #-8]
     174:	ldr	r3, [fp, #-8]
     178:	ldr	r3, [r3]
     17c:	mov	r0, r3
     180:	bl	118 <flatbuffers_uint32_cast_from_pe>
     184:	mov	r3, r0
     188:	mov	r0, r3
     18c:	sub	sp, fp, #4
     190:	ldr	fp, [sp]
     194:	add	sp, sp, #4
     198:	pop	{pc}		; (ldr pc, [sp], #4)

0000019c <flatbuffers_uint64_cast_from_pe>:
     19c:	push	{fp}		; (str fp, [sp, #-4]!)
     1a0:	add	fp, sp, #0
     1a4:	sub	sp, sp, #12
     1a8:	strd	r0, [fp, #-12]
     1ac:	ldrd	r2, [fp, #-12]
     1b0:	mov	r0, r2
     1b4:	mov	r1, r3
     1b8:	add	sp, fp, #0
     1bc:	pop	{fp}		; (ldr fp, [sp], #4)
     1c0:	bx	lr

000001c4 <flatbuffers_uint64_cast_to_pe>:
     1c4:	push	{fp}		; (str fp, [sp, #-4]!)
     1c8:	add	fp, sp, #0
     1cc:	sub	sp, sp, #12
     1d0:	strd	r0, [fp, #-12]
     1d4:	ldrd	r2, [fp, #-12]
     1d8:	mov	r0, r2
     1dc:	mov	r1, r3
     1e0:	add	sp, fp, #0
     1e4:	pop	{fp}		; (ldr fp, [sp], #4)
     1e8:	bx	lr

000001ec <flatbuffers_uint64_read_from_pe>:
     1ec:	str	fp, [sp, #-8]!
     1f0:	str	lr, [sp, #4]
     1f4:	add	fp, sp, #4
     1f8:	sub	sp, sp, #8
     1fc:	str	r0, [fp, #-8]
     200:	ldr	r3, [fp, #-8]
     204:	ldrd	r2, [r3]
     208:	mov	r0, r2
     20c:	mov	r1, r3
     210:	bl	19c <flatbuffers_uint64_cast_from_pe>
     214:	mov	r2, r0
     218:	mov	r3, r1
     21c:	mov	r0, r2
     220:	mov	r1, r3
     224:	sub	sp, fp, #4
     228:	ldr	fp, [sp]
     22c:	add	sp, sp, #4
     230:	pop	{pc}		; (ldr pc, [sp], #4)

00000234 <flatbuffers_int8_cast_from_pe>:
     234:	push	{fp}		; (str fp, [sp, #-4]!)
     238:	add	fp, sp, #0
     23c:	sub	sp, sp, #12
     240:	mov	r3, r0
     244:	strb	r3, [fp, #-5]
     248:	ldrsb	r3, [fp, #-5]
     24c:	mov	r0, r3
     250:	add	sp, fp, #0
     254:	pop	{fp}		; (ldr fp, [sp], #4)
     258:	bx	lr

0000025c <flatbuffers_int8_cast_to_pe>:
     25c:	push	{fp}		; (str fp, [sp, #-4]!)
     260:	add	fp, sp, #0
     264:	sub	sp, sp, #12
     268:	mov	r3, r0
     26c:	strb	r3, [fp, #-5]
     270:	ldrsb	r3, [fp, #-5]
     274:	mov	r0, r3
     278:	add	sp, fp, #0
     27c:	pop	{fp}		; (ldr fp, [sp], #4)
     280:	bx	lr

00000284 <flatbuffers_int8_read_from_pe>:
     284:	str	fp, [sp, #-8]!
     288:	str	lr, [sp, #4]
     28c:	add	fp, sp, #4
     290:	sub	sp, sp, #8
     294:	str	r0, [fp, #-8]
     298:	ldr	r3, [fp, #-8]
     29c:	ldrsb	r3, [r3]
     2a0:	mov	r0, r3
     2a4:	bl	234 <flatbuffers_int8_cast_from_pe>
     2a8:	mov	r3, r0
     2ac:	mov	r0, r3
     2b0:	sub	sp, fp, #4
     2b4:	ldr	fp, [sp]
     2b8:	add	sp, sp, #4
     2bc:	pop	{pc}		; (ldr pc, [sp], #4)

000002c0 <flatbuffers_int16_cast_from_pe>:
     2c0:	push	{fp}		; (str fp, [sp, #-4]!)
     2c4:	add	fp, sp, #0
     2c8:	sub	sp, sp, #12
     2cc:	mov	r3, r0
     2d0:	strh	r3, [fp, #-6]
     2d4:	ldrsh	r3, [fp, #-6]
     2d8:	mov	r0, r3
     2dc:	add	sp, fp, #0
     2e0:	pop	{fp}		; (ldr fp, [sp], #4)
     2e4:	bx	lr

000002e8 <flatbuffers_int16_cast_to_pe>:
     2e8:	push	{fp}		; (str fp, [sp, #-4]!)
     2ec:	add	fp, sp, #0
     2f0:	sub	sp, sp, #12
     2f4:	mov	r3, r0
     2f8:	strh	r3, [fp, #-6]
     2fc:	ldrsh	r3, [fp, #-6]
     300:	mov	r0, r3
     304:	add	sp, fp, #0
     308:	pop	{fp}		; (ldr fp, [sp], #4)
     30c:	bx	lr

00000310 <flatbuffers_int16_read_from_pe>:
     310:	str	fp, [sp, #-8]!
     314:	str	lr, [sp, #4]
     318:	add	fp, sp, #4
     31c:	sub	sp, sp, #8
     320:	str	r0, [fp, #-8]
     324:	ldr	r3, [fp, #-8]
     328:	ldrsh	r3, [r3]
     32c:	mov	r0, r3
     330:	bl	2c0 <flatbuffers_int16_cast_from_pe>
     334:	mov	r3, r0
     338:	mov	r0, r3
     33c:	sub	sp, fp, #4
     340:	ldr	fp, [sp]
     344:	add	sp, sp, #4
     348:	pop	{pc}		; (ldr pc, [sp], #4)

0000034c <flatbuffers_int32_cast_from_pe>:
     34c:	push	{fp}		; (str fp, [sp, #-4]!)
     350:	add	fp, sp, #0
     354:	sub	sp, sp, #12
     358:	str	r0, [fp, #-8]
     35c:	ldr	r3, [fp, #-8]
     360:	mov	r0, r3
     364:	add	sp, fp, #0
     368:	pop	{fp}		; (ldr fp, [sp], #4)
     36c:	bx	lr

00000370 <flatbuffers_int32_cast_to_pe>:
     370:	push	{fp}		; (str fp, [sp, #-4]!)
     374:	add	fp, sp, #0
     378:	sub	sp, sp, #12
     37c:	str	r0, [fp, #-8]
     380:	ldr	r3, [fp, #-8]
     384:	mov	r0, r3
     388:	add	sp, fp, #0
     38c:	pop	{fp}		; (ldr fp, [sp], #4)
     390:	bx	lr

00000394 <flatbuffers_int32_read_from_pe>:
     394:	str	fp, [sp, #-8]!
     398:	str	lr, [sp, #4]
     39c:	add	fp, sp, #4
     3a0:	sub	sp, sp, #8
     3a4:	str	r0, [fp, #-8]
     3a8:	ldr	r3, [fp, #-8]
     3ac:	ldr	r3, [r3]
     3b0:	mov	r0, r3
     3b4:	bl	34c <flatbuffers_int32_cast_from_pe>
     3b8:	mov	r3, r0
     3bc:	mov	r0, r3
     3c0:	sub	sp, fp, #4
     3c4:	ldr	fp, [sp]
     3c8:	add	sp, sp, #4
     3cc:	pop	{pc}		; (ldr pc, [sp], #4)

000003d0 <flatbuffers_int64_cast_from_pe>:
     3d0:	push	{fp}		; (str fp, [sp, #-4]!)
     3d4:	add	fp, sp, #0
     3d8:	sub	sp, sp, #12
     3dc:	strd	r0, [fp, #-12]
     3e0:	ldrd	r2, [fp, #-12]
     3e4:	mov	r0, r2
     3e8:	mov	r1, r3
     3ec:	add	sp, fp, #0
     3f0:	pop	{fp}		; (ldr fp, [sp], #4)
     3f4:	bx	lr

000003f8 <flatbuffers_int64_cast_to_pe>:
     3f8:	push	{fp}		; (str fp, [sp, #-4]!)
     3fc:	add	fp, sp, #0
     400:	sub	sp, sp, #12
     404:	strd	r0, [fp, #-12]
     408:	ldrd	r2, [fp, #-12]
     40c:	mov	r0, r2
     410:	mov	r1, r3
     414:	add	sp, fp, #0
     418:	pop	{fp}		; (ldr fp, [sp], #4)
     41c:	bx	lr

00000420 <flatbuffers_int64_read_from_pe>:
     420:	str	fp, [sp, #-8]!
     424:	str	lr, [sp, #4]
     428:	add	fp, sp, #4
     42c:	sub	sp, sp, #8
     430:	str	r0, [fp, #-8]
     434:	ldr	r3, [fp, #-8]
     438:	ldrd	r2, [r3]
     43c:	mov	r0, r2
     440:	mov	r1, r3
     444:	bl	3d0 <flatbuffers_int64_cast_from_pe>
     448:	mov	r2, r0
     44c:	mov	r3, r1
     450:	mov	r0, r2
     454:	mov	r1, r3
     458:	sub	sp, fp, #4
     45c:	ldr	fp, [sp]
     460:	add	sp, sp, #4
     464:	pop	{pc}		; (ldr pc, [sp], #4)

00000468 <flatbuffers_float_cast_from_pe>:
     468:	push	{fp}		; (str fp, [sp, #-4]!)
     46c:	add	fp, sp, #0
     470:	sub	sp, sp, #20
     474:	vstr	s0, [fp, #-16]
     478:	ldr	r3, [fp, #-16]
     47c:	str	r3, [fp, #-8]
     480:	ldr	r3, [fp, #-8]
     484:	str	r3, [fp, #-8]
     488:	ldr	r3, [fp, #-8]
     48c:	vmov	s15, r3
     490:	vmov.f32	s0, s15
     494:	add	sp, fp, #0
     498:	pop	{fp}		; (ldr fp, [sp], #4)
     49c:	bx	lr

000004a0 <flatbuffers_float_cast_to_pe>:
     4a0:	push	{fp}		; (str fp, [sp, #-4]!)
     4a4:	add	fp, sp, #0
     4a8:	sub	sp, sp, #20
     4ac:	vstr	s0, [fp, #-16]
     4b0:	ldr	r3, [fp, #-16]
     4b4:	str	r3, [fp, #-8]
     4b8:	ldr	r3, [fp, #-8]
     4bc:	str	r3, [fp, #-8]
     4c0:	ldr	r3, [fp, #-8]
     4c4:	vmov	s15, r3
     4c8:	vmov.f32	s0, s15
     4cc:	add	sp, fp, #0
     4d0:	pop	{fp}		; (ldr fp, [sp], #4)
     4d4:	bx	lr

000004d8 <flatbuffers_float_read_from_pe>:
     4d8:	str	fp, [sp, #-8]!
     4dc:	str	lr, [sp, #4]
     4e0:	add	fp, sp, #4
     4e4:	sub	sp, sp, #8
     4e8:	str	r0, [fp, #-8]
     4ec:	ldr	r3, [fp, #-8]
     4f0:	vldr	s15, [r3]
     4f4:	vmov.f32	s0, s15
     4f8:	bl	468 <flatbuffers_float_cast_from_pe>
     4fc:	vmov.f32	s15, s0
     500:	vmov.f32	s0, s15
     504:	sub	sp, fp, #4
     508:	ldr	fp, [sp]
     50c:	add	sp, sp, #4
     510:	pop	{pc}		; (ldr pc, [sp], #4)

00000514 <flatbuffers_double_cast_from_pe>:
     514:	push	{fp}		; (str fp, [sp, #-4]!)
     518:	add	fp, sp, #0
     51c:	sub	sp, sp, #20
     520:	vstr	d0, [fp, #-20]	; 0xffffffec
     524:	ldrd	r2, [fp, #-20]	; 0xffffffec
     528:	strd	r2, [fp, #-12]
     52c:	ldrd	r2, [fp, #-12]
     530:	strd	r2, [fp, #-12]
     534:	ldrd	r2, [fp, #-12]
     538:	vmov	d7, r2, r3
     53c:	vmov.f64	d0, d7
     540:	add	sp, fp, #0
     544:	pop	{fp}		; (ldr fp, [sp], #4)
     548:	bx	lr

0000054c <flatbuffers_double_cast_to_pe>:
     54c:	push	{fp}		; (str fp, [sp, #-4]!)
     550:	add	fp, sp, #0
     554:	sub	sp, sp, #20
     558:	vstr	d0, [fp, #-20]	; 0xffffffec
     55c:	ldrd	r2, [fp, #-20]	; 0xffffffec
     560:	strd	r2, [fp, #-12]
     564:	ldrd	r2, [fp, #-12]
     568:	strd	r2, [fp, #-12]
     56c:	ldrd	r2, [fp, #-12]
     570:	vmov	d7, r2, r3
     574:	vmov.f64	d0, d7
     578:	add	sp, fp, #0
     57c:	pop	{fp}		; (ldr fp, [sp], #4)
     580:	bx	lr

00000584 <flatbuffers_double_read_from_pe>:
     584:	str	fp, [sp, #-8]!
     588:	str	lr, [sp, #4]
     58c:	add	fp, sp, #4
     590:	sub	sp, sp, #8
     594:	str	r0, [fp, #-8]
     598:	ldr	r3, [fp, #-8]
     59c:	vldr	d7, [r3]
     5a0:	vmov.f64	d0, d7
     5a4:	bl	514 <flatbuffers_double_cast_from_pe>
     5a8:	vmov.f64	d7, d0
     5ac:	vmov.f64	d0, d7
     5b0:	sub	sp, fp, #4
     5b4:	ldr	fp, [sp]
     5b8:	add	sp, sp, #4
     5bc:	pop	{pc}		; (ldr pc, [sp], #4)

000005c0 <flatbuffers_bool_cast_from_pe>:
     5c0:	push	{fp}		; (str fp, [sp, #-4]!)
     5c4:	add	fp, sp, #0
     5c8:	sub	sp, sp, #12
     5cc:	mov	r3, r0
     5d0:	strb	r3, [fp, #-5]
     5d4:	ldrb	r3, [fp, #-5]
     5d8:	mov	r0, r3
     5dc:	add	sp, fp, #0
     5e0:	pop	{fp}		; (ldr fp, [sp], #4)
     5e4:	bx	lr

000005e8 <flatbuffers_bool_cast_to_pe>:
     5e8:	push	{fp}		; (str fp, [sp, #-4]!)
     5ec:	add	fp, sp, #0
     5f0:	sub	sp, sp, #12
     5f4:	mov	r3, r0
     5f8:	strb	r3, [fp, #-5]
     5fc:	ldrb	r3, [fp, #-5]
     600:	mov	r0, r3
     604:	add	sp, fp, #0
     608:	pop	{fp}		; (ldr fp, [sp], #4)
     60c:	bx	lr

00000610 <flatbuffers_bool__const_ptr_add>:
     610:	push	{fp}		; (str fp, [sp, #-4]!)
     614:	add	fp, sp, #0
     618:	sub	sp, sp, #12
     61c:	str	r0, [fp, #-8]
     620:	str	r1, [fp, #-12]
     624:	ldr	r2, [fp, #-8]
     628:	ldr	r3, [fp, #-12]
     62c:	add	r3, r2, r3
     630:	mov	r0, r3
     634:	add	sp, fp, #0
     638:	pop	{fp}		; (ldr fp, [sp], #4)
     63c:	bx	lr

00000640 <flatbuffers_bool_read_from_pe>:
     640:	str	fp, [sp, #-8]!
     644:	str	lr, [sp, #4]
     648:	add	fp, sp, #4
     64c:	sub	sp, sp, #8
     650:	str	r0, [fp, #-8]
     654:	ldr	r3, [fp, #-8]
     658:	ldrb	r3, [r3]
     65c:	mov	r0, r3
     660:	bl	5c0 <flatbuffers_bool_cast_from_pe>
     664:	mov	r3, r0
     668:	mov	r0, r3
     66c:	sub	sp, fp, #4
     670:	ldr	fp, [sp]
     674:	add	sp, sp, #4
     678:	pop	{pc}		; (ldr pc, [sp], #4)

0000067c <flatbuffers_union_type_cast_from_pe>:
     67c:	push	{fp}		; (str fp, [sp, #-4]!)
     680:	add	fp, sp, #0
     684:	sub	sp, sp, #12
     688:	mov	r3, r0
     68c:	strb	r3, [fp, #-5]
     690:	ldrb	r3, [fp, #-5]
     694:	mov	r0, r3
     698:	add	sp, fp, #0
     69c:	pop	{fp}		; (ldr fp, [sp], #4)
     6a0:	bx	lr

000006a4 <flatbuffers_union_type_read_from_pe>:
     6a4:	str	fp, [sp, #-8]!
     6a8:	str	lr, [sp, #4]
     6ac:	add	fp, sp, #4
     6b0:	sub	sp, sp, #8
     6b4:	str	r0, [fp, #-8]
     6b8:	ldr	r3, [fp, #-8]
     6bc:	ldrb	r3, [r3]
     6c0:	mov	r0, r3
     6c4:	bl	67c <flatbuffers_union_type_cast_from_pe>
     6c8:	mov	r3, r0
     6cc:	mov	r0, r3
     6d0:	sub	sp, fp, #4
     6d4:	ldr	fp, [sp]
     6d8:	add	sp, sp, #4
     6dc:	pop	{pc}		; (ldr pc, [sp], #4)

000006e0 <__flatbuffers_uoffset_cast_from_pe>:
     6e0:	push	{fp}		; (str fp, [sp, #-4]!)
     6e4:	add	fp, sp, #0
     6e8:	sub	sp, sp, #12
     6ec:	str	r0, [fp, #-8]
     6f0:	ldr	r3, [fp, #-8]
     6f4:	mov	r0, r3
     6f8:	add	sp, fp, #0
     6fc:	pop	{fp}		; (ldr fp, [sp], #4)
     700:	bx	lr

00000704 <__flatbuffers_uoffset_cast_to_pe>:
     704:	push	{fp}		; (str fp, [sp, #-4]!)
     708:	add	fp, sp, #0
     70c:	sub	sp, sp, #12
     710:	str	r0, [fp, #-8]
     714:	ldr	r3, [fp, #-8]
     718:	mov	r0, r3
     71c:	add	sp, fp, #0
     720:	pop	{fp}		; (ldr fp, [sp], #4)
     724:	bx	lr

00000728 <__flatbuffers_uoffset__size>:
     728:	push	{fp}		; (str fp, [sp, #-4]!)
     72c:	add	fp, sp, #0
     730:	mov	r3, #4
     734:	mov	r0, r3
     738:	add	sp, fp, #0
     73c:	pop	{fp}		; (ldr fp, [sp], #4)
     740:	bx	lr

00000744 <__flatbuffers_uoffset_read_from_pe>:
     744:	str	fp, [sp, #-8]!
     748:	str	lr, [sp, #4]
     74c:	add	fp, sp, #4
     750:	sub	sp, sp, #8
     754:	str	r0, [fp, #-8]
     758:	ldr	r3, [fp, #-8]
     75c:	ldr	r3, [r3]
     760:	mov	r0, r3
     764:	bl	6e0 <__flatbuffers_uoffset_cast_from_pe>
     768:	mov	r3, r0
     76c:	mov	r0, r3
     770:	sub	sp, fp, #4
     774:	ldr	fp, [sp]
     778:	add	sp, sp, #4
     77c:	pop	{pc}		; (ldr pc, [sp], #4)

00000780 <__flatbuffers_uoffset_write_to_pe>:
     780:	str	fp, [sp, #-8]!
     784:	str	lr, [sp, #4]
     788:	add	fp, sp, #4
     78c:	sub	sp, sp, #8
     790:	str	r0, [fp, #-8]
     794:	str	r1, [fp, #-12]
     798:	ldr	r0, [fp, #-12]
     79c:	bl	704 <__flatbuffers_uoffset_cast_to_pe>
     7a0:	mov	r2, r0
     7a4:	ldr	r3, [fp, #-8]
     7a8:	str	r2, [r3]
     7ac:	nop	{0}
     7b0:	sub	sp, fp, #4
     7b4:	ldr	fp, [sp]
     7b8:	add	sp, sp, #4
     7bc:	pop	{pc}		; (ldr pc, [sp], #4)

000007c0 <__flatbuffers_soffset_cast_from_pe>:
     7c0:	push	{fp}		; (str fp, [sp, #-4]!)
     7c4:	add	fp, sp, #0
     7c8:	sub	sp, sp, #12
     7cc:	str	r0, [fp, #-8]
     7d0:	ldr	r3, [fp, #-8]
     7d4:	mov	r0, r3
     7d8:	add	sp, fp, #0
     7dc:	pop	{fp}		; (ldr fp, [sp], #4)
     7e0:	bx	lr

000007e4 <__flatbuffers_soffset_read_from_pe>:
     7e4:	str	fp, [sp, #-8]!
     7e8:	str	lr, [sp, #4]
     7ec:	add	fp, sp, #4
     7f0:	sub	sp, sp, #8
     7f4:	str	r0, [fp, #-8]
     7f8:	ldr	r3, [fp, #-8]
     7fc:	ldr	r3, [r3]
     800:	mov	r0, r3
     804:	bl	7c0 <__flatbuffers_soffset_cast_from_pe>
     808:	mov	r3, r0
     80c:	mov	r0, r3
     810:	sub	sp, fp, #4
     814:	ldr	fp, [sp]
     818:	add	sp, sp, #4
     81c:	pop	{pc}		; (ldr pc, [sp], #4)

00000820 <__flatbuffers_voffset_cast_from_pe>:
     820:	push	{fp}		; (str fp, [sp, #-4]!)
     824:	add	fp, sp, #0
     828:	sub	sp, sp, #12
     82c:	mov	r3, r0
     830:	strh	r3, [fp, #-6]
     834:	ldrh	r3, [fp, #-6]
     838:	mov	r0, r3
     83c:	add	sp, fp, #0
     840:	pop	{fp}		; (ldr fp, [sp], #4)
     844:	bx	lr

00000848 <__flatbuffers_voffset_read_from_pe>:
     848:	str	fp, [sp, #-8]!
     84c:	str	lr, [sp, #4]
     850:	add	fp, sp, #4
     854:	sub	sp, sp, #8
     858:	str	r0, [fp, #-8]
     85c:	ldr	r3, [fp, #-8]
     860:	ldrh	r3, [r3]
     864:	mov	r0, r3
     868:	bl	820 <__flatbuffers_voffset_cast_from_pe>
     86c:	mov	r3, r0
     870:	mov	r0, r3
     874:	sub	sp, fp, #4
     878:	ldr	fp, [sp]
     87c:	add	sp, sp, #4
     880:	pop	{pc}		; (ldr pc, [sp], #4)

00000884 <__flatbuffers_utype_cast_from_pe>:
     884:	push	{fp}		; (str fp, [sp, #-4]!)
     888:	add	fp, sp, #0
     88c:	sub	sp, sp, #12
     890:	mov	r3, r0
     894:	strb	r3, [fp, #-5]
     898:	ldrb	r3, [fp, #-5]
     89c:	mov	r0, r3
     8a0:	add	sp, fp, #0
     8a4:	pop	{fp}		; (ldr fp, [sp], #4)
     8a8:	bx	lr

000008ac <__flatbuffers_utype_read_from_pe>:
     8ac:	str	fp, [sp, #-8]!
     8b0:	str	lr, [sp, #4]
     8b4:	add	fp, sp, #4
     8b8:	sub	sp, sp, #8
     8bc:	str	r0, [fp, #-8]
     8c0:	ldr	r3, [fp, #-8]
     8c4:	ldrb	r3, [r3]
     8c8:	mov	r0, r3
     8cc:	bl	884 <__flatbuffers_utype_cast_from_pe>
     8d0:	mov	r3, r0
     8d4:	mov	r0, r3
     8d8:	sub	sp, fp, #4
     8dc:	ldr	fp, [sp]
     8e0:	add	sp, sp, #4
     8e4:	pop	{pc}		; (ldr pc, [sp], #4)

000008e8 <__flatbuffers_thash_cast_from_pe>:
     8e8:	push	{fp}		; (str fp, [sp, #-4]!)
     8ec:	add	fp, sp, #0
     8f0:	sub	sp, sp, #12
     8f4:	str	r0, [fp, #-8]
     8f8:	ldr	r3, [fp, #-8]
     8fc:	mov	r0, r3
     900:	add	sp, fp, #0
     904:	pop	{fp}		; (ldr fp, [sp], #4)
     908:	bx	lr

0000090c <__flatbuffers_thash_cast_from_le>:
     90c:	push	{fp}		; (str fp, [sp, #-4]!)
     910:	add	fp, sp, #0
     914:	sub	sp, sp, #12
     918:	str	r0, [fp, #-8]
     91c:	ldr	r3, [fp, #-8]
     920:	mov	r0, r3
     924:	add	sp, fp, #0
     928:	pop	{fp}		; (ldr fp, [sp], #4)
     92c:	bx	lr

00000930 <__flatbuffers_thash_read_from_pe>:
     930:	str	fp, [sp, #-8]!
     934:	str	lr, [sp, #4]
     938:	add	fp, sp, #4
     93c:	sub	sp, sp, #8
     940:	str	r0, [fp, #-8]
     944:	ldr	r3, [fp, #-8]
     948:	ldr	r3, [r3]
     94c:	mov	r0, r3
     950:	bl	8e8 <__flatbuffers_thash_cast_from_pe>
     954:	mov	r3, r0
     958:	mov	r0, r3
     95c:	sub	sp, fp, #4
     960:	ldr	fp, [sp]
     964:	add	sp, sp, #4
     968:	pop	{pc}		; (ldr pc, [sp], #4)

0000096c <flatbuffers_type_hash_from_name>:
     96c:	push	{fp}		; (str fp, [sp, #-4]!)
     970:	add	fp, sp, #0
     974:	sub	sp, sp, #20
     978:	str	r0, [fp, #-16]
     97c:	movw	r3, #40389	; 0x9dc5
     980:	movt	r3, #33052	; 0x811c
     984:	str	r3, [fp, #-8]
     988:	b	9c4 <flatbuffers_type_hash_from_name+0x58>
     98c:	ldr	r3, [fp, #-16]
     990:	ldrb	r3, [r3]
     994:	mov	r2, r3
     998:	ldr	r3, [fp, #-8]
     99c:	eor	r3, r3, r2
     9a0:	str	r3, [fp, #-8]
     9a4:	ldr	r2, [fp, #-8]
     9a8:	movw	r3, #403	; 0x193
     9ac:	movt	r3, #256	; 0x100
     9b0:	mul	r3, r3, r2
     9b4:	str	r3, [fp, #-8]
     9b8:	ldr	r3, [fp, #-16]
     9bc:	add	r3, r3, #1
     9c0:	str	r3, [fp, #-16]
     9c4:	ldr	r3, [fp, #-16]
     9c8:	ldrb	r3, [r3]
     9cc:	cmp	r3, #0
     9d0:	bne	98c <flatbuffers_type_hash_from_name+0x20>
     9d4:	ldr	r3, [fp, #-8]
     9d8:	cmp	r3, #0
     9dc:	bne	9ec <flatbuffers_type_hash_from_name+0x80>
     9e0:	movw	r3, #40389	; 0x9dc5
     9e4:	movt	r3, #33052	; 0x811c
     9e8:	str	r3, [fp, #-8]
     9ec:	ldr	r3, [fp, #-8]
     9f0:	mov	r0, r3
     9f4:	add	sp, fp, #0
     9f8:	pop	{fp}		; (ldr fp, [sp], #4)
     9fc:	bx	lr

00000a00 <flatbuffers_identifier_from_type_hash>:
     a00:	push	{fp}		; (str fp, [sp, #-4]!)
     a04:	add	fp, sp, #0
     a08:	sub	sp, sp, #12
     a0c:	str	r0, [fp, #-8]
     a10:	str	r1, [fp, #-12]
     a14:	ldr	r3, [fp, #-8]
     a18:	uxtb	r2, r3
     a1c:	ldr	r3, [fp, #-12]
     a20:	strb	r2, [r3]
     a24:	ldr	r3, [fp, #-8]
     a28:	lsr	r3, r3, #8
     a2c:	str	r3, [fp, #-8]
     a30:	ldr	r3, [fp, #-12]
     a34:	add	r3, r3, #1
     a38:	ldr	r2, [fp, #-8]
     a3c:	uxtb	r2, r2
     a40:	strb	r2, [r3]
     a44:	ldr	r3, [fp, #-8]
     a48:	lsr	r3, r3, #8
     a4c:	str	r3, [fp, #-8]
     a50:	ldr	r3, [fp, #-12]
     a54:	add	r3, r3, #2
     a58:	ldr	r2, [fp, #-8]
     a5c:	uxtb	r2, r2
     a60:	strb	r2, [r3]
     a64:	ldr	r3, [fp, #-8]
     a68:	lsr	r3, r3, #8
     a6c:	str	r3, [fp, #-8]
     a70:	ldr	r3, [fp, #-12]
     a74:	add	r3, r3, #3
     a78:	ldr	r2, [fp, #-8]
     a7c:	uxtb	r2, r2
     a80:	strb	r2, [r3]
     a84:	nop	{0}
     a88:	add	sp, fp, #0
     a8c:	pop	{fp}		; (ldr fp, [sp], #4)
     a90:	bx	lr

00000a94 <flatbuffers_vec_len>:
     a94:	str	fp, [sp, #-8]!
     a98:	str	lr, [sp, #4]
     a9c:	add	fp, sp, #4
     aa0:	sub	sp, sp, #8
     aa4:	str	r0, [fp, #-8]
     aa8:	ldr	r3, [fp, #-8]
     aac:	cmp	r3, #0
     ab0:	beq	acc <flatbuffers_vec_len+0x38>
     ab4:	ldr	r3, [fp, #-8]
     ab8:	sub	r3, r3, #4
     abc:	mov	r0, r3
     ac0:	bl	744 <__flatbuffers_uoffset_read_from_pe>
     ac4:	mov	r3, r0
     ac8:	b	ad0 <flatbuffers_vec_len+0x3c>
     acc:	mov	r3, #0
     ad0:	mov	r0, r3
     ad4:	sub	sp, fp, #4
     ad8:	ldr	fp, [sp]
     adc:	add	sp, sp, #4
     ae0:	pop	{pc}		; (ldr pc, [sp], #4)

00000ae4 <flatbuffers_string_len>:
     ae4:	str	fp, [sp, #-8]!
     ae8:	str	lr, [sp, #4]
     aec:	add	fp, sp, #4
     af0:	sub	sp, sp, #8
     af4:	str	r0, [fp, #-8]
     af8:	ldr	r3, [fp, #-8]
     afc:	cmp	r3, #0
     b00:	beq	b1c <flatbuffers_string_len+0x38>
     b04:	ldr	r3, [fp, #-8]
     b08:	sub	r3, r3, #4
     b0c:	mov	r0, r3
     b10:	bl	744 <__flatbuffers_uoffset_read_from_pe>
     b14:	mov	r3, r0
     b18:	b	b20 <flatbuffers_string_len+0x3c>
     b1c:	mov	r3, #0
     b20:	mov	r0, r3
     b24:	sub	sp, fp, #4
     b28:	ldr	fp, [sp]
     b2c:	add	sp, sp, #4
     b30:	pop	{pc}		; (ldr pc, [sp], #4)

00000b34 <flatbuffers_string_vec_len>:
     b34:	str	fp, [sp, #-8]!
     b38:	str	lr, [sp, #4]
     b3c:	add	fp, sp, #4
     b40:	sub	sp, sp, #8
     b44:	str	r0, [fp, #-8]
     b48:	ldr	r3, [fp, #-8]
     b4c:	cmp	r3, #0
     b50:	beq	b6c <flatbuffers_string_vec_len+0x38>
     b54:	ldr	r3, [fp, #-8]
     b58:	sub	r3, r3, #4
     b5c:	mov	r0, r3
     b60:	bl	744 <__flatbuffers_uoffset_read_from_pe>
     b64:	mov	r3, r0
     b68:	b	b70 <flatbuffers_string_vec_len+0x3c>
     b6c:	mov	r3, #0
     b70:	mov	r0, r3
     b74:	sub	sp, fp, #4
     b78:	ldr	fp, [sp]
     b7c:	add	sp, sp, #4
     b80:	pop	{pc}		; (ldr pc, [sp], #4)

00000b84 <flatbuffers_string_vec_at>:
     b84:	str	fp, [sp, #-8]!
     b88:	str	lr, [sp, #4]
     b8c:	add	fp, sp, #4
     b90:	sub	sp, sp, #16
     b94:	str	r0, [fp, #-16]
     b98:	str	r1, [fp, #-20]	; 0xffffffec
     b9c:	ldr	r3, [fp, #-20]	; 0xffffffec
     ba0:	lsl	r3, r3, #2
     ba4:	ldr	r2, [fp, #-16]
     ba8:	add	r3, r2, r3
     bac:	str	r3, [fp, #-8]
     bb0:	ldr	r0, [fp, #-16]
     bb4:	bl	a94 <flatbuffers_vec_len>
     bb8:	mov	r2, r0
     bbc:	ldr	r3, [fp, #-20]	; 0xffffffec
     bc0:	cmp	r3, r2
     bc4:	bcc	be8 <flatbuffers_string_vec_at+0x64>
     bc8:	movw	r3, #0
     bcc:	movt	r3, #0
     bd0:	mov	r2, #108	; 0x6c
     bd4:	movw	r1, #0
     bd8:	movt	r1, #0
     bdc:	movw	r0, #0
     be0:	movt	r0, #0
     be4:	bl	0 <__assert_fail>
     be8:	ldr	r0, [fp, #-8]
     bec:	bl	744 <__flatbuffers_uoffset_read_from_pe>
     bf0:	mov	r3, r0
     bf4:	add	r3, r3, #4
     bf8:	ldr	r2, [fp, #-8]
     bfc:	add	r3, r2, r3
     c00:	mov	r0, r3
     c04:	sub	sp, fp, #4
     c08:	ldr	fp, [sp]
     c0c:	add	sp, sp, #4
     c10:	pop	{pc}		; (ldr pc, [sp], #4)

00000c14 <flatbuffers_string_cast_from_generic>:
     c14:	str	fp, [sp, #-8]!
     c18:	str	lr, [sp, #4]
     c1c:	add	fp, sp, #4
     c20:	sub	sp, sp, #8
     c24:	str	r0, [fp, #-8]
     c28:	ldr	r3, [fp, #-8]
     c2c:	cmp	r3, #0
     c30:	beq	c48 <flatbuffers_string_cast_from_generic+0x34>
     c34:	bl	728 <__flatbuffers_uoffset__size>
     c38:	mov	r2, r0
     c3c:	ldr	r3, [fp, #-8]
     c40:	add	r3, r3, r2
     c44:	b	c4c <flatbuffers_string_cast_from_generic+0x38>
     c48:	mov	r3, #0
     c4c:	mov	r0, r3
     c50:	sub	sp, fp, #4
     c54:	ldr	fp, [sp]
     c58:	add	sp, sp, #4
     c5c:	pop	{pc}		; (ldr pc, [sp], #4)

00000c60 <flatbuffers_generic_vec_at>:
     c60:	str	fp, [sp, #-8]!
     c64:	str	lr, [sp, #4]
     c68:	add	fp, sp, #4
     c6c:	sub	sp, sp, #16
     c70:	str	r0, [fp, #-16]
     c74:	str	r1, [fp, #-20]	; 0xffffffec
     c78:	ldr	r3, [fp, #-20]	; 0xffffffec
     c7c:	lsl	r3, r3, #2
     c80:	ldr	r2, [fp, #-16]
     c84:	add	r3, r2, r3
     c88:	str	r3, [fp, #-8]
     c8c:	ldr	r0, [fp, #-16]
     c90:	bl	a94 <flatbuffers_vec_len>
     c94:	mov	r2, r0
     c98:	ldr	r3, [fp, #-20]	; 0xffffffec
     c9c:	cmp	r3, r2
     ca0:	bcc	cc4 <flatbuffers_generic_vec_at+0x64>
     ca4:	movw	r3, #0
     ca8:	movt	r3, #0
     cac:	mov	r2, #117	; 0x75
     cb0:	movw	r1, #0
     cb4:	movt	r1, #0
     cb8:	movw	r0, #0
     cbc:	movt	r0, #0
     cc0:	bl	0 <__assert_fail>
     cc4:	ldr	r0, [fp, #-8]
     cc8:	bl	744 <__flatbuffers_uoffset_read_from_pe>
     ccc:	mov	r2, r0
     cd0:	ldr	r3, [fp, #-8]
     cd4:	add	r3, r3, r2
     cd8:	mov	r0, r3
     cdc:	sub	sp, fp, #4
     ce0:	ldr	fp, [sp]
     ce4:	add	sp, sp, #4
     ce8:	pop	{pc}		; (ldr pc, [sp], #4)

00000cec <flatbuffers_generic_vec_at_as_string>:
     cec:	str	fp, [sp, #-8]!
     cf0:	str	lr, [sp, #4]
     cf4:	add	fp, sp, #4
     cf8:	sub	sp, sp, #16
     cfc:	str	r0, [fp, #-16]
     d00:	str	r1, [fp, #-20]	; 0xffffffec
     d04:	ldr	r3, [fp, #-20]	; 0xffffffec
     d08:	lsl	r3, r3, #2
     d0c:	ldr	r2, [fp, #-16]
     d10:	add	r3, r2, r3
     d14:	str	r3, [fp, #-8]
     d18:	ldr	r0, [fp, #-16]
     d1c:	bl	a94 <flatbuffers_vec_len>
     d20:	mov	r2, r0
     d24:	ldr	r3, [fp, #-20]	; 0xffffffec
     d28:	cmp	r3, r2
     d2c:	bcc	d50 <flatbuffers_generic_vec_at_as_string+0x64>
     d30:	movw	r3, #0
     d34:	movt	r3, #0
     d38:	mov	r2, #119	; 0x77
     d3c:	movw	r1, #0
     d40:	movt	r1, #0
     d44:	movw	r0, #0
     d48:	movt	r0, #0
     d4c:	bl	0 <__assert_fail>
     d50:	ldr	r0, [fp, #-8]
     d54:	bl	744 <__flatbuffers_uoffset_read_from_pe>
     d58:	mov	r3, r0
     d5c:	add	r3, r3, #4
     d60:	ldr	r2, [fp, #-8]
     d64:	add	r3, r2, r3
     d68:	mov	r0, r3
     d6c:	sub	sp, fp, #4
     d70:	ldr	fp, [sp]
     d74:	add	sp, sp, #4
     d78:	pop	{pc}		; (ldr pc, [sp], #4)

00000d7c <flatbuffers_string_cast_from_union>:
     d7c:	str	fp, [sp, #-8]!
     d80:	str	lr, [sp, #4]
     d84:	add	fp, sp, #4
     d88:	sub	sp, sp, #8
     d8c:	sub	r3, fp, #12
     d90:	stm	r3, {r0, r1}
     d94:	ldr	r3, [fp, #-8]
     d98:	mov	r0, r3
     d9c:	bl	c14 <flatbuffers_string_cast_from_generic>
     da0:	mov	r3, r0
     da4:	mov	r0, r3
     da8:	sub	sp, fp, #4
     dac:	ldr	fp, [sp]
     db0:	add	sp, sp, #4
     db4:	pop	{pc}		; (ldr pc, [sp], #4)

00000db8 <__flatbuffers_string_n_cmp>:
     db8:	str	fp, [sp, #-8]!
     dbc:	str	lr, [sp, #4]
     dc0:	add	fp, sp, #4
     dc4:	sub	sp, sp, #24
     dc8:	str	r0, [fp, #-16]
     dcc:	str	r1, [fp, #-20]	; 0xffffffec
     dd0:	str	r2, [fp, #-24]	; 0xffffffe8
     dd4:	ldr	r0, [fp, #-16]
     dd8:	bl	ae4 <flatbuffers_string_len>
     ddc:	str	r0, [fp, #-8]
     de0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     de4:	ldr	r3, [fp, #-8]
     de8:	cmp	r2, r3
     dec:	movcc	r3, r2
     df0:	movcs	r3, r3
     df4:	mov	r2, r3
     df8:	ldr	r1, [fp, #-20]	; 0xffffffec
     dfc:	ldr	r0, [fp, #-16]
     e00:	bl	0 <strncmp>
     e04:	str	r0, [fp, #-12]
     e08:	ldr	r3, [fp, #-12]
     e0c:	cmp	r3, #0
     e10:	bne	e48 <__flatbuffers_string_n_cmp+0x90>
     e14:	ldr	r2, [fp, #-8]
     e18:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e1c:	cmp	r2, r3
     e20:	bcc	e40 <__flatbuffers_string_n_cmp+0x88>
     e24:	ldr	r2, [fp, #-8]
     e28:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e2c:	cmp	r2, r3
     e30:	movhi	r3, #1
     e34:	movls	r3, #0
     e38:	uxtb	r3, r3
     e3c:	b	e4c <__flatbuffers_string_n_cmp+0x94>
     e40:	mvn	r3, #0
     e44:	b	e4c <__flatbuffers_string_n_cmp+0x94>
     e48:	ldr	r3, [fp, #-12]
     e4c:	mov	r0, r3
     e50:	sub	sp, fp, #4
     e54:	ldr	fp, [sp]
     e58:	add	sp, sp, #4
     e5c:	pop	{pc}		; (ldr pc, [sp], #4)

00000e60 <__flatbuffers_string_cmp>:
     e60:	str	fp, [sp, #-8]!
     e64:	str	lr, [sp, #4]
     e68:	add	fp, sp, #4
     e6c:	sub	sp, sp, #16
     e70:	str	r0, [fp, #-8]
     e74:	str	r1, [fp, #-12]
     e78:	str	r2, [fp, #-16]
     e7c:	ldr	r1, [fp, #-12]
     e80:	ldr	r0, [fp, #-8]
     e84:	bl	0 <strcmp>
     e88:	mov	r3, r0
     e8c:	mov	r0, r3
     e90:	sub	sp, fp, #4
     e94:	ldr	fp, [sp]
     e98:	add	sp, sp, #4
     e9c:	pop	{pc}		; (ldr pc, [sp], #4)

00000ea0 <flatbuffers_bool_vec_len>:
     ea0:	str	fp, [sp, #-8]!
     ea4:	str	lr, [sp, #4]
     ea8:	add	fp, sp, #4
     eac:	sub	sp, sp, #8
     eb0:	str	r0, [fp, #-8]
     eb4:	ldr	r0, [fp, #-8]
     eb8:	bl	a94 <flatbuffers_vec_len>
     ebc:	mov	r3, r0
     ec0:	mov	r0, r3
     ec4:	sub	sp, fp, #4
     ec8:	ldr	fp, [sp]
     ecc:	add	sp, sp, #4
     ed0:	pop	{pc}		; (ldr pc, [sp], #4)

00000ed4 <flatbuffers_bool_vec_at>:
     ed4:	str	fp, [sp, #-8]!
     ed8:	str	lr, [sp, #4]
     edc:	add	fp, sp, #4
     ee0:	sub	sp, sp, #8
     ee4:	str	r0, [fp, #-8]
     ee8:	str	r1, [fp, #-12]
     eec:	ldr	r0, [fp, #-8]
     ef0:	bl	a94 <flatbuffers_vec_len>
     ef4:	mov	r2, r0
     ef8:	ldr	r3, [fp, #-12]
     efc:	cmp	r3, r2
     f00:	bcc	f24 <flatbuffers_bool_vec_at+0x50>
     f04:	movw	r3, #0
     f08:	movt	r3, #0
     f0c:	movw	r2, #394	; 0x18a
     f10:	movw	r1, #0
     f14:	movt	r1, #0
     f18:	movw	r0, #0
     f1c:	movt	r0, #0
     f20:	bl	0 <__assert_fail>
     f24:	ldr	r2, [fp, #-8]
     f28:	ldr	r3, [fp, #-12]
     f2c:	add	r3, r2, r3
     f30:	mov	r0, r3
     f34:	bl	640 <flatbuffers_bool_read_from_pe>
     f38:	mov	r3, r0
     f3c:	mov	r0, r3
     f40:	sub	sp, fp, #4
     f44:	ldr	fp, [sp]
     f48:	add	sp, sp, #4
     f4c:	pop	{pc}		; (ldr pc, [sp], #4)

00000f50 <flatbuffers_uint8_vec_len>:
     f50:	str	fp, [sp, #-8]!
     f54:	str	lr, [sp, #4]
     f58:	add	fp, sp, #4
     f5c:	sub	sp, sp, #8
     f60:	str	r0, [fp, #-8]
     f64:	ldr	r0, [fp, #-8]
     f68:	bl	a94 <flatbuffers_vec_len>
     f6c:	mov	r3, r0
     f70:	mov	r0, r3
     f74:	sub	sp, fp, #4
     f78:	ldr	fp, [sp]
     f7c:	add	sp, sp, #4
     f80:	pop	{pc}		; (ldr pc, [sp], #4)

00000f84 <flatbuffers_uint8_vec_at>:
     f84:	str	fp, [sp, #-8]!
     f88:	str	lr, [sp, #4]
     f8c:	add	fp, sp, #4
     f90:	sub	sp, sp, #8
     f94:	str	r0, [fp, #-8]
     f98:	str	r1, [fp, #-12]
     f9c:	ldr	r0, [fp, #-8]
     fa0:	bl	a94 <flatbuffers_vec_len>
     fa4:	mov	r2, r0
     fa8:	ldr	r3, [fp, #-12]
     fac:	cmp	r3, r2
     fb0:	bcc	fd4 <flatbuffers_uint8_vec_at+0x50>
     fb4:	movw	r3, #0
     fb8:	movt	r3, #0
     fbc:	movw	r2, #395	; 0x18b
     fc0:	movw	r1, #0
     fc4:	movt	r1, #0
     fc8:	movw	r0, #0
     fcc:	movt	r0, #0
     fd0:	bl	0 <__assert_fail>
     fd4:	ldr	r2, [fp, #-8]
     fd8:	ldr	r3, [fp, #-12]
     fdc:	add	r3, r2, r3
     fe0:	mov	r0, r3
     fe4:	bl	50 <flatbuffers_uint8_read_from_pe>
     fe8:	mov	r3, r0
     fec:	mov	r0, r3
     ff0:	sub	sp, fp, #4
     ff4:	ldr	fp, [sp]
     ff8:	add	sp, sp, #4
     ffc:	pop	{pc}		; (ldr pc, [sp], #4)

00001000 <flatbuffers_uint8_vec_find>:
    1000:	str	fp, [sp, #-8]!
    1004:	str	lr, [sp, #4]
    1008:	add	fp, sp, #4
    100c:	sub	sp, sp, #24
    1010:	str	r0, [fp, #-24]	; 0xffffffe8
    1014:	mov	r3, r1
    1018:	strb	r3, [fp, #-25]	; 0xffffffe7
    101c:	mov	r3, #0
    1020:	str	r3, [fp, #-8]
    1024:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1028:	bl	f50 <flatbuffers_uint8_vec_len>
    102c:	str	r0, [fp, #-12]
    1030:	ldr	r3, [fp, #-12]
    1034:	cmp	r3, #0
    1038:	bne	104c <flatbuffers_uint8_vec_find+0x4c>
    103c:	movw	r3, #0
    1040:	movt	r3, #0
    1044:	ldr	r3, [r3]
    1048:	b	111c <flatbuffers_uint8_vec_find+0x11c>
    104c:	ldr	r3, [fp, #-12]
    1050:	sub	r3, r3, #1
    1054:	str	r3, [fp, #-12]
    1058:	b	10b4 <flatbuffers_uint8_vec_find+0xb4>
    105c:	ldr	r2, [fp, #-12]
    1060:	ldr	r3, [fp, #-8]
    1064:	sub	r3, r2, r3
    1068:	lsr	r3, r3, #1
    106c:	ldr	r2, [fp, #-8]
    1070:	add	r3, r2, r3
    1074:	str	r3, [fp, #-16]
    1078:	ldr	r1, [fp, #-16]
    107c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1080:	bl	f84 <flatbuffers_uint8_vec_at>
    1084:	mov	r3, r0
    1088:	strb	r3, [fp, #-17]	; 0xffffffef
    108c:	ldrb	r2, [fp, #-17]	; 0xffffffef
    1090:	ldrb	r3, [fp, #-25]	; 0xffffffe7
    1094:	cmp	r2, r3
    1098:	bcs	10ac <flatbuffers_uint8_vec_find+0xac>
    109c:	ldr	r3, [fp, #-16]
    10a0:	add	r3, r3, #1
    10a4:	str	r3, [fp, #-8]
    10a8:	b	10b4 <flatbuffers_uint8_vec_find+0xb4>
    10ac:	ldr	r3, [fp, #-16]
    10b0:	str	r3, [fp, #-12]
    10b4:	ldr	r2, [fp, #-8]
    10b8:	ldr	r3, [fp, #-12]
    10bc:	cmp	r2, r3
    10c0:	bcc	105c <flatbuffers_uint8_vec_find+0x5c>
    10c4:	ldr	r2, [fp, #-8]
    10c8:	ldr	r3, [fp, #-12]
    10cc:	cmp	r2, r3
    10d0:	bne	1110 <flatbuffers_uint8_vec_find+0x110>
    10d4:	ldr	r1, [fp, #-8]
    10d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    10dc:	bl	f84 <flatbuffers_uint8_vec_at>
    10e0:	mov	r3, r0
    10e4:	strb	r3, [fp, #-17]	; 0xffffffef
    10e8:	ldrb	r2, [fp, #-17]	; 0xffffffef
    10ec:	ldrb	r3, [fp, #-25]	; 0xffffffe7
    10f0:	cmp	r2, r3
    10f4:	bcc	1110 <flatbuffers_uint8_vec_find+0x110>
    10f8:	ldrb	r2, [fp, #-17]	; 0xffffffef
    10fc:	ldrb	r3, [fp, #-25]	; 0xffffffe7
    1100:	cmp	r2, r3
    1104:	bhi	1110 <flatbuffers_uint8_vec_find+0x110>
    1108:	ldr	r3, [fp, #-8]
    110c:	b	111c <flatbuffers_uint8_vec_find+0x11c>
    1110:	movw	r3, #0
    1114:	movt	r3, #0
    1118:	ldr	r3, [r3]
    111c:	mov	r0, r3
    1120:	sub	sp, fp, #4
    1124:	ldr	fp, [sp]
    1128:	add	sp, sp, #4
    112c:	pop	{pc}		; (ldr pc, [sp], #4)

00001130 <flatbuffers_uint8_vec_scan>:
    1130:	str	fp, [sp, #-8]!
    1134:	str	lr, [sp, #4]
    1138:	add	fp, sp, #4
    113c:	sub	sp, sp, #16
    1140:	str	r0, [fp, #-16]
    1144:	mov	r3, r1
    1148:	strb	r3, [fp, #-17]	; 0xffffffef
    114c:	mov	r3, #0
    1150:	str	r3, [fp, #-8]
    1154:	b	11a0 <flatbuffers_uint8_vec_scan+0x70>
    1158:	ldr	r1, [fp, #-8]
    115c:	ldr	r0, [fp, #-16]
    1160:	bl	f84 <flatbuffers_uint8_vec_at>
    1164:	mov	r3, r0
    1168:	strb	r3, [fp, #-9]
    116c:	ldrb	r2, [fp, #-9]
    1170:	ldrb	r3, [fp, #-17]	; 0xffffffef
    1174:	cmp	r2, r3
    1178:	bcc	1194 <flatbuffers_uint8_vec_scan+0x64>
    117c:	ldrb	r2, [fp, #-9]
    1180:	ldrb	r3, [fp, #-17]	; 0xffffffef
    1184:	cmp	r2, r3
    1188:	bhi	1194 <flatbuffers_uint8_vec_scan+0x64>
    118c:	ldr	r3, [fp, #-8]
    1190:	b	11c4 <flatbuffers_uint8_vec_scan+0x94>
    1194:	ldr	r3, [fp, #-8]
    1198:	add	r3, r3, #1
    119c:	str	r3, [fp, #-8]
    11a0:	ldr	r0, [fp, #-16]
    11a4:	bl	f50 <flatbuffers_uint8_vec_len>
    11a8:	mov	r2, r0
    11ac:	ldr	r3, [fp, #-8]
    11b0:	cmp	r3, r2
    11b4:	bcc	1158 <flatbuffers_uint8_vec_scan+0x28>
    11b8:	movw	r3, #0
    11bc:	movt	r3, #0
    11c0:	ldr	r3, [r3]
    11c4:	mov	r0, r3
    11c8:	sub	sp, fp, #4
    11cc:	ldr	fp, [sp]
    11d0:	add	sp, sp, #4
    11d4:	pop	{pc}		; (ldr pc, [sp], #4)

000011d8 <flatbuffers_uint8_vec_scan_ex>:
    11d8:	str	fp, [sp, #-8]!
    11dc:	str	lr, [sp, #4]
    11e0:	add	fp, sp, #4
    11e4:	sub	sp, sp, #24
    11e8:	str	r0, [fp, #-16]
    11ec:	str	r1, [fp, #-20]	; 0xffffffec
    11f0:	str	r2, [fp, #-24]	; 0xffffffe8
    11f4:	strb	r3, [fp, #-25]	; 0xffffffe7
    11f8:	ldr	r3, [fp, #-20]	; 0xffffffec
    11fc:	str	r3, [fp, #-8]
    1200:	b	124c <flatbuffers_uint8_vec_scan_ex+0x74>
    1204:	ldr	r1, [fp, #-8]
    1208:	ldr	r0, [fp, #-16]
    120c:	bl	f84 <flatbuffers_uint8_vec_at>
    1210:	mov	r3, r0
    1214:	strb	r3, [fp, #-9]
    1218:	ldrb	r2, [fp, #-9]
    121c:	ldrb	r3, [fp, #-25]	; 0xffffffe7
    1220:	cmp	r2, r3
    1224:	bcc	1240 <flatbuffers_uint8_vec_scan_ex+0x68>
    1228:	ldrb	r2, [fp, #-9]
    122c:	ldrb	r3, [fp, #-25]	; 0xffffffe7
    1230:	cmp	r2, r3
    1234:	bhi	1240 <flatbuffers_uint8_vec_scan_ex+0x68>
    1238:	ldr	r3, [fp, #-8]
    123c:	b	1290 <flatbuffers_uint8_vec_scan_ex+0xb8>
    1240:	ldr	r3, [fp, #-8]
    1244:	add	r3, r3, #1
    1248:	str	r3, [fp, #-8]
    124c:	ldr	r0, [fp, #-16]
    1250:	bl	f50 <flatbuffers_uint8_vec_len>
    1254:	mov	r2, r0
    1258:	ldr	r3, [fp, #-24]	; 0xffffffe8
    125c:	cmp	r3, r2
    1260:	bcc	1274 <flatbuffers_uint8_vec_scan_ex+0x9c>
    1264:	ldr	r0, [fp, #-16]
    1268:	bl	f50 <flatbuffers_uint8_vec_len>
    126c:	mov	r3, r0
    1270:	b	1278 <flatbuffers_uint8_vec_scan_ex+0xa0>
    1274:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1278:	ldr	r2, [fp, #-8]
    127c:	cmp	r3, r2
    1280:	bhi	1204 <flatbuffers_uint8_vec_scan_ex+0x2c>
    1284:	movw	r3, #0
    1288:	movt	r3, #0
    128c:	ldr	r3, [r3]
    1290:	mov	r0, r3
    1294:	sub	sp, fp, #4
    1298:	ldr	fp, [sp]
    129c:	add	sp, sp, #4
    12a0:	pop	{pc}		; (ldr pc, [sp], #4)

000012a4 <flatbuffers_uint8_vec_rscan>:
    12a4:	str	fp, [sp, #-8]!
    12a8:	str	lr, [sp, #4]
    12ac:	add	fp, sp, #4
    12b0:	sub	sp, sp, #16
    12b4:	str	r0, [fp, #-16]
    12b8:	mov	r3, r1
    12bc:	strb	r3, [fp, #-17]	; 0xffffffef
    12c0:	ldr	r0, [fp, #-16]
    12c4:	bl	f50 <flatbuffers_uint8_vec_len>
    12c8:	str	r0, [fp, #-8]
    12cc:	b	130c <flatbuffers_uint8_vec_rscan+0x68>
    12d0:	ldr	r1, [fp, #-8]
    12d4:	ldr	r0, [fp, #-16]
    12d8:	bl	f84 <flatbuffers_uint8_vec_at>
    12dc:	mov	r3, r0
    12e0:	strb	r3, [fp, #-9]
    12e4:	ldrb	r2, [fp, #-9]
    12e8:	ldrb	r3, [fp, #-17]	; 0xffffffef
    12ec:	cmp	r2, r3
    12f0:	bcc	130c <flatbuffers_uint8_vec_rscan+0x68>
    12f4:	ldrb	r2, [fp, #-9]
    12f8:	ldrb	r3, [fp, #-17]	; 0xffffffef
    12fc:	cmp	r2, r3
    1300:	bhi	130c <flatbuffers_uint8_vec_rscan+0x68>
    1304:	ldr	r3, [fp, #-8]
    1308:	b	132c <flatbuffers_uint8_vec_rscan+0x88>
    130c:	ldr	r3, [fp, #-8]
    1310:	sub	r2, r3, #1
    1314:	str	r2, [fp, #-8]
    1318:	cmp	r3, #0
    131c:	bne	12d0 <flatbuffers_uint8_vec_rscan+0x2c>
    1320:	movw	r3, #0
    1324:	movt	r3, #0
    1328:	ldr	r3, [r3]
    132c:	mov	r0, r3
    1330:	sub	sp, fp, #4
    1334:	ldr	fp, [sp]
    1338:	add	sp, sp, #4
    133c:	pop	{pc}		; (ldr pc, [sp], #4)

00001340 <flatbuffers_uint8_vec_rscan_ex>:
    1340:	str	fp, [sp, #-8]!
    1344:	str	lr, [sp, #4]
    1348:	add	fp, sp, #4
    134c:	sub	sp, sp, #24
    1350:	str	r0, [fp, #-16]
    1354:	str	r1, [fp, #-20]	; 0xffffffec
    1358:	str	r2, [fp, #-24]	; 0xffffffe8
    135c:	strb	r3, [fp, #-25]	; 0xffffffe7
    1360:	ldr	r0, [fp, #-16]
    1364:	bl	f50 <flatbuffers_uint8_vec_len>
    1368:	mov	r2, r0
    136c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1370:	cmp	r3, r2
    1374:	bcc	1388 <flatbuffers_uint8_vec_rscan_ex+0x48>
    1378:	ldr	r0, [fp, #-16]
    137c:	bl	f50 <flatbuffers_uint8_vec_len>
    1380:	mov	r3, r0
    1384:	b	138c <flatbuffers_uint8_vec_rscan_ex+0x4c>
    1388:	ldr	r3, [fp, #-24]	; 0xffffffe8
    138c:	str	r3, [fp, #-8]
    1390:	b	13d0 <flatbuffers_uint8_vec_rscan_ex+0x90>
    1394:	ldr	r1, [fp, #-8]
    1398:	ldr	r0, [fp, #-16]
    139c:	bl	f84 <flatbuffers_uint8_vec_at>
    13a0:	mov	r3, r0
    13a4:	strb	r3, [fp, #-9]
    13a8:	ldrb	r2, [fp, #-9]
    13ac:	ldrb	r3, [fp, #-25]	; 0xffffffe7
    13b0:	cmp	r2, r3
    13b4:	bcc	13d0 <flatbuffers_uint8_vec_rscan_ex+0x90>
    13b8:	ldrb	r2, [fp, #-9]
    13bc:	ldrb	r3, [fp, #-25]	; 0xffffffe7
    13c0:	cmp	r2, r3
    13c4:	bhi	13d0 <flatbuffers_uint8_vec_rscan_ex+0x90>
    13c8:	ldr	r3, [fp, #-8]
    13cc:	b	13f4 <flatbuffers_uint8_vec_rscan_ex+0xb4>
    13d0:	ldr	r3, [fp, #-8]
    13d4:	sub	r2, r3, #1
    13d8:	str	r2, [fp, #-8]
    13dc:	ldr	r2, [fp, #-20]	; 0xffffffec
    13e0:	cmp	r2, r3
    13e4:	bcc	1394 <flatbuffers_uint8_vec_rscan_ex+0x54>
    13e8:	movw	r3, #0
    13ec:	movt	r3, #0
    13f0:	ldr	r3, [r3]
    13f4:	mov	r0, r3
    13f8:	sub	sp, fp, #4
    13fc:	ldr	fp, [sp]
    1400:	add	sp, sp, #4
    1404:	pop	{pc}		; (ldr pc, [sp], #4)

00001408 <__flatbuffers_uint8__heap_sift_down>:
    1408:	str	fp, [sp, #-8]!
    140c:	str	lr, [sp, #4]
    1410:	add	fp, sp, #4
    1414:	sub	sp, sp, #32
    1418:	str	r0, [fp, #-24]	; 0xffffffe8
    141c:	str	r1, [fp, #-28]	; 0xffffffe4
    1420:	str	r2, [fp, #-32]	; 0xffffffe0
    1424:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1428:	str	r3, [fp, #-12]
    142c:	b	1520 <__flatbuffers_uint8__heap_sift_down+0x118>
    1430:	ldr	r3, [fp, #-12]
    1434:	lsl	r3, r3, #1
    1438:	str	r3, [fp, #-8]
    143c:	ldr	r2, [fp, #-8]
    1440:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1444:	cmp	r2, r3
    1448:	bcs	1498 <__flatbuffers_uint8__heap_sift_down+0x90>
    144c:	ldr	r1, [fp, #-8]
    1450:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1454:	bl	f84 <flatbuffers_uint8_vec_at>
    1458:	mov	r3, r0
    145c:	strb	r3, [fp, #-13]
    1460:	ldr	r3, [fp, #-8]
    1464:	add	r3, r3, #1
    1468:	mov	r1, r3
    146c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1470:	bl	f84 <flatbuffers_uint8_vec_at>
    1474:	mov	r3, r0
    1478:	strb	r3, [fp, #-14]
    147c:	ldrb	r2, [fp, #-13]
    1480:	ldrb	r3, [fp, #-14]
    1484:	cmp	r2, r3
    1488:	bcs	1498 <__flatbuffers_uint8__heap_sift_down+0x90>
    148c:	ldr	r3, [fp, #-8]
    1490:	add	r3, r3, #1
    1494:	str	r3, [fp, #-8]
    1498:	ldr	r1, [fp, #-12]
    149c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    14a0:	bl	f84 <flatbuffers_uint8_vec_at>
    14a4:	mov	r3, r0
    14a8:	strb	r3, [fp, #-15]
    14ac:	ldr	r1, [fp, #-8]
    14b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    14b4:	bl	f84 <flatbuffers_uint8_vec_at>
    14b8:	mov	r3, r0
    14bc:	strb	r3, [fp, #-13]
    14c0:	ldrb	r2, [fp, #-15]
    14c4:	ldrb	r3, [fp, #-13]
    14c8:	cmp	r2, r3
    14cc:	bcs	1538 <__flatbuffers_uint8__heap_sift_down+0x130>
    14d0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    14d4:	ldr	r3, [fp, #-8]
    14d8:	add	r3, r2, r3
    14dc:	ldrb	r3, [r3]
    14e0:	strb	r3, [fp, #-16]
    14e4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    14e8:	ldr	r3, [fp, #-12]
    14ec:	add	r2, r2, r3
    14f0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    14f4:	ldr	r3, [fp, #-8]
    14f8:	add	r3, r1, r3
    14fc:	ldrb	r2, [r2]
    1500:	strb	r2, [r3]
    1504:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1508:	ldr	r3, [fp, #-12]
    150c:	add	r3, r2, r3
    1510:	ldrb	r2, [fp, #-16]
    1514:	strb	r2, [r3]
    1518:	ldr	r3, [fp, #-8]
    151c:	str	r3, [fp, #-12]
    1520:	ldr	r3, [fp, #-12]
    1524:	lsl	r3, r3, #1
    1528:	ldr	r2, [fp, #-32]	; 0xffffffe0
    152c:	cmp	r2, r3
    1530:	bcs	1430 <__flatbuffers_uint8__heap_sift_down+0x28>
    1534:	b	153c <__flatbuffers_uint8__heap_sift_down+0x134>
    1538:	nop	{0}
    153c:	sub	sp, fp, #4
    1540:	ldr	fp, [sp]
    1544:	add	sp, sp, #4
    1548:	pop	{pc}		; (ldr pc, [sp], #4)

0000154c <__flatbuffers_uint8__heap_sort>:
    154c:	str	fp, [sp, #-8]!
    1550:	str	lr, [sp, #4]
    1554:	add	fp, sp, #4
    1558:	sub	sp, sp, #24
    155c:	str	r0, [fp, #-24]	; 0xffffffe8
    1560:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1564:	bl	f50 <flatbuffers_uint8_vec_len>
    1568:	str	r0, [fp, #-16]
    156c:	ldr	r3, [fp, #-16]
    1570:	cmp	r3, #0
    1574:	beq	161c <__flatbuffers_uint8__heap_sort+0xd0>
    1578:	ldr	r3, [fp, #-16]
    157c:	sub	r3, r3, #1
    1580:	str	r3, [fp, #-12]
    1584:	ldr	r3, [fp, #-16]
    1588:	lsr	r3, r3, #1
    158c:	str	r3, [fp, #-8]
    1590:	ldr	r2, [fp, #-12]
    1594:	ldr	r1, [fp, #-8]
    1598:	ldr	r0, [fp, #-24]	; 0xffffffe8
    159c:	bl	1408 <__flatbuffers_uint8__heap_sift_down>
    15a0:	ldr	r3, [fp, #-8]
    15a4:	sub	r2, r3, #1
    15a8:	str	r2, [fp, #-8]
    15ac:	cmp	r3, #0
    15b0:	bne	1590 <__flatbuffers_uint8__heap_sort+0x44>
    15b4:	b	160c <__flatbuffers_uint8__heap_sort+0xc0>
    15b8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    15bc:	ldr	r3, [fp, #-12]
    15c0:	add	r3, r2, r3
    15c4:	ldrb	r3, [r3]
    15c8:	strb	r3, [fp, #-17]	; 0xffffffef
    15cc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    15d0:	ldr	r3, [fp, #-12]
    15d4:	add	r3, r2, r3
    15d8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    15dc:	ldrb	r2, [r2]
    15e0:	strb	r2, [r3]
    15e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    15e8:	ldrb	r2, [fp, #-17]	; 0xffffffef
    15ec:	strb	r2, [r3]
    15f0:	ldr	r3, [fp, #-12]
    15f4:	sub	r3, r3, #1
    15f8:	str	r3, [fp, #-12]
    15fc:	ldr	r2, [fp, #-12]
    1600:	mov	r1, #0
    1604:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1608:	bl	1408 <__flatbuffers_uint8__heap_sift_down>
    160c:	ldr	r3, [fp, #-12]
    1610:	cmp	r3, #0
    1614:	bne	15b8 <__flatbuffers_uint8__heap_sort+0x6c>
    1618:	b	1620 <__flatbuffers_uint8__heap_sort+0xd4>
    161c:	nop	{0}
    1620:	sub	sp, fp, #4
    1624:	ldr	fp, [sp]
    1628:	add	sp, sp, #4
    162c:	pop	{pc}		; (ldr pc, [sp], #4)

00001630 <flatbuffers_uint8_vec_sort>:
    1630:	str	fp, [sp, #-8]!
    1634:	str	lr, [sp, #4]
    1638:	add	fp, sp, #4
    163c:	sub	sp, sp, #8
    1640:	str	r0, [fp, #-8]
    1644:	ldr	r0, [fp, #-8]
    1648:	bl	154c <__flatbuffers_uint8__heap_sort>
    164c:	nop	{0}
    1650:	sub	sp, fp, #4
    1654:	ldr	fp, [sp]
    1658:	add	sp, sp, #4
    165c:	pop	{pc}		; (ldr pc, [sp], #4)

00001660 <flatbuffers_union_type_vec_at>:
    1660:	str	fp, [sp, #-8]!
    1664:	str	lr, [sp, #4]
    1668:	add	fp, sp, #4
    166c:	sub	sp, sp, #8
    1670:	str	r0, [fp, #-8]
    1674:	str	r1, [fp, #-12]
    1678:	ldr	r0, [fp, #-8]
    167c:	bl	a94 <flatbuffers_vec_len>
    1680:	mov	r2, r0
    1684:	ldr	r3, [fp, #-12]
    1688:	cmp	r3, r2
    168c:	bcc	16b0 <flatbuffers_union_type_vec_at+0x50>
    1690:	movw	r3, #0
    1694:	movt	r3, #0
    1698:	movw	r2, #405	; 0x195
    169c:	movw	r1, #0
    16a0:	movt	r1, #0
    16a4:	movw	r0, #0
    16a8:	movt	r0, #0
    16ac:	bl	0 <__assert_fail>
    16b0:	ldr	r2, [fp, #-8]
    16b4:	ldr	r3, [fp, #-12]
    16b8:	add	r3, r2, r3
    16bc:	mov	r0, r3
    16c0:	bl	6a4 <flatbuffers_union_type_read_from_pe>
    16c4:	mov	r3, r0
    16c8:	mov	r0, r3
    16cc:	sub	sp, fp, #4
    16d0:	ldr	fp, [sp]
    16d4:	add	sp, sp, #4
    16d8:	pop	{pc}		; (ldr pc, [sp], #4)

000016dc <flatbuffers_string_vec_scan>:
    16dc:	str	fp, [sp, #-8]!
    16e0:	str	lr, [sp, #4]
    16e4:	add	fp, sp, #4
    16e8:	sub	sp, sp, #16
    16ec:	str	r0, [fp, #-16]
    16f0:	str	r1, [fp, #-20]	; 0xffffffec
    16f4:	mov	r3, #0
    16f8:	str	r3, [fp, #-8]
    16fc:	b	1740 <flatbuffers_string_vec_scan+0x64>
    1700:	ldr	r1, [fp, #-8]
    1704:	ldr	r0, [fp, #-16]
    1708:	bl	b84 <flatbuffers_string_vec_at>
    170c:	str	r0, [fp, #-12]
    1710:	mov	r2, #0
    1714:	ldr	r1, [fp, #-20]	; 0xffffffec
    1718:	ldr	r0, [fp, #-12]
    171c:	bl	e60 <__flatbuffers_string_cmp>
    1720:	mov	r3, r0
    1724:	cmp	r3, #0
    1728:	bne	1734 <flatbuffers_string_vec_scan+0x58>
    172c:	ldr	r3, [fp, #-8]
    1730:	b	1764 <flatbuffers_string_vec_scan+0x88>
    1734:	ldr	r3, [fp, #-8]
    1738:	add	r3, r3, #1
    173c:	str	r3, [fp, #-8]
    1740:	ldr	r0, [fp, #-16]
    1744:	bl	b34 <flatbuffers_string_vec_len>
    1748:	mov	r2, r0
    174c:	ldr	r3, [fp, #-8]
    1750:	cmp	r3, r2
    1754:	bcc	1700 <flatbuffers_string_vec_scan+0x24>
    1758:	movw	r3, #0
    175c:	movt	r3, #0
    1760:	ldr	r3, [r3]
    1764:	mov	r0, r3
    1768:	sub	sp, fp, #4
    176c:	ldr	fp, [sp]
    1770:	add	sp, sp, #4
    1774:	pop	{pc}		; (ldr pc, [sp], #4)

00001778 <flatbuffers_string_vec_scan_n>:
    1778:	str	fp, [sp, #-8]!
    177c:	str	lr, [sp, #4]
    1780:	add	fp, sp, #4
    1784:	sub	sp, sp, #24
    1788:	str	r0, [fp, #-16]
    178c:	str	r1, [fp, #-20]	; 0xffffffec
    1790:	str	r2, [fp, #-24]	; 0xffffffe8
    1794:	mov	r3, #0
    1798:	str	r3, [fp, #-8]
    179c:	b	17e0 <flatbuffers_string_vec_scan_n+0x68>
    17a0:	ldr	r1, [fp, #-8]
    17a4:	ldr	r0, [fp, #-16]
    17a8:	bl	b84 <flatbuffers_string_vec_at>
    17ac:	str	r0, [fp, #-12]
    17b0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    17b4:	ldr	r1, [fp, #-20]	; 0xffffffec
    17b8:	ldr	r0, [fp, #-12]
    17bc:	bl	db8 <__flatbuffers_string_n_cmp>
    17c0:	mov	r3, r0
    17c4:	cmp	r3, #0
    17c8:	bne	17d4 <flatbuffers_string_vec_scan_n+0x5c>
    17cc:	ldr	r3, [fp, #-8]
    17d0:	b	1804 <flatbuffers_string_vec_scan_n+0x8c>
    17d4:	ldr	r3, [fp, #-8]
    17d8:	add	r3, r3, #1
    17dc:	str	r3, [fp, #-8]
    17e0:	ldr	r0, [fp, #-16]
    17e4:	bl	b34 <flatbuffers_string_vec_len>
    17e8:	mov	r2, r0
    17ec:	ldr	r3, [fp, #-8]
    17f0:	cmp	r3, r2
    17f4:	bcc	17a0 <flatbuffers_string_vec_scan_n+0x28>
    17f8:	movw	r3, #0
    17fc:	movt	r3, #0
    1800:	ldr	r3, [r3]
    1804:	mov	r0, r3
    1808:	sub	sp, fp, #4
    180c:	ldr	fp, [sp]
    1810:	add	sp, sp, #4
    1814:	pop	{pc}		; (ldr pc, [sp], #4)

00001818 <flatbuffers_string_vec_scan_ex>:
    1818:	str	fp, [sp, #-8]!
    181c:	str	lr, [sp, #4]
    1820:	add	fp, sp, #4
    1824:	sub	sp, sp, #24
    1828:	str	r0, [fp, #-16]
    182c:	str	r1, [fp, #-20]	; 0xffffffec
    1830:	str	r2, [fp, #-24]	; 0xffffffe8
    1834:	str	r3, [fp, #-28]	; 0xffffffe4
    1838:	ldr	r3, [fp, #-20]	; 0xffffffec
    183c:	str	r3, [fp, #-8]
    1840:	b	1884 <flatbuffers_string_vec_scan_ex+0x6c>
    1844:	ldr	r1, [fp, #-8]
    1848:	ldr	r0, [fp, #-16]
    184c:	bl	b84 <flatbuffers_string_vec_at>
    1850:	str	r0, [fp, #-12]
    1854:	mov	r2, #0
    1858:	ldr	r1, [fp, #-28]	; 0xffffffe4
    185c:	ldr	r0, [fp, #-12]
    1860:	bl	e60 <__flatbuffers_string_cmp>
    1864:	mov	r3, r0
    1868:	cmp	r3, #0
    186c:	bne	1878 <flatbuffers_string_vec_scan_ex+0x60>
    1870:	ldr	r3, [fp, #-8]
    1874:	b	18c8 <flatbuffers_string_vec_scan_ex+0xb0>
    1878:	ldr	r3, [fp, #-8]
    187c:	add	r3, r3, #1
    1880:	str	r3, [fp, #-8]
    1884:	ldr	r0, [fp, #-16]
    1888:	bl	b34 <flatbuffers_string_vec_len>
    188c:	mov	r2, r0
    1890:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1894:	cmp	r3, r2
    1898:	bcc	18ac <flatbuffers_string_vec_scan_ex+0x94>
    189c:	ldr	r0, [fp, #-16]
    18a0:	bl	b34 <flatbuffers_string_vec_len>
    18a4:	mov	r3, r0
    18a8:	b	18b0 <flatbuffers_string_vec_scan_ex+0x98>
    18ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    18b0:	ldr	r2, [fp, #-8]
    18b4:	cmp	r3, r2
    18b8:	bhi	1844 <flatbuffers_string_vec_scan_ex+0x2c>
    18bc:	movw	r3, #0
    18c0:	movt	r3, #0
    18c4:	ldr	r3, [r3]
    18c8:	mov	r0, r3
    18cc:	sub	sp, fp, #4
    18d0:	ldr	fp, [sp]
    18d4:	add	sp, sp, #4
    18d8:	pop	{pc}		; (ldr pc, [sp], #4)

000018dc <flatbuffers_string_vec_scan_ex_n>:
    18dc:	str	fp, [sp, #-8]!
    18e0:	str	lr, [sp, #4]
    18e4:	add	fp, sp, #4
    18e8:	sub	sp, sp, #24
    18ec:	str	r0, [fp, #-16]
    18f0:	str	r1, [fp, #-20]	; 0xffffffec
    18f4:	str	r2, [fp, #-24]	; 0xffffffe8
    18f8:	str	r3, [fp, #-28]	; 0xffffffe4
    18fc:	ldr	r3, [fp, #-20]	; 0xffffffec
    1900:	str	r3, [fp, #-8]
    1904:	b	1948 <flatbuffers_string_vec_scan_ex_n+0x6c>
    1908:	ldr	r1, [fp, #-8]
    190c:	ldr	r0, [fp, #-16]
    1910:	bl	b84 <flatbuffers_string_vec_at>
    1914:	str	r0, [fp, #-12]
    1918:	ldr	r2, [fp, #4]
    191c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1920:	ldr	r0, [fp, #-12]
    1924:	bl	db8 <__flatbuffers_string_n_cmp>
    1928:	mov	r3, r0
    192c:	cmp	r3, #0
    1930:	bne	193c <flatbuffers_string_vec_scan_ex_n+0x60>
    1934:	ldr	r3, [fp, #-8]
    1938:	b	198c <flatbuffers_string_vec_scan_ex_n+0xb0>
    193c:	ldr	r3, [fp, #-8]
    1940:	add	r3, r3, #1
    1944:	str	r3, [fp, #-8]
    1948:	ldr	r0, [fp, #-16]
    194c:	bl	b34 <flatbuffers_string_vec_len>
    1950:	mov	r2, r0
    1954:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1958:	cmp	r3, r2
    195c:	bcc	1970 <flatbuffers_string_vec_scan_ex_n+0x94>
    1960:	ldr	r0, [fp, #-16]
    1964:	bl	b34 <flatbuffers_string_vec_len>
    1968:	mov	r3, r0
    196c:	b	1974 <flatbuffers_string_vec_scan_ex_n+0x98>
    1970:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1974:	ldr	r2, [fp, #-8]
    1978:	cmp	r3, r2
    197c:	bhi	1908 <flatbuffers_string_vec_scan_ex_n+0x2c>
    1980:	movw	r3, #0
    1984:	movt	r3, #0
    1988:	ldr	r3, [r3]
    198c:	mov	r0, r3
    1990:	sub	sp, fp, #4
    1994:	ldr	fp, [sp]
    1998:	add	sp, sp, #4
    199c:	pop	{pc}		; (ldr pc, [sp], #4)

000019a0 <flatbuffers_string_vec_rscan>:
    19a0:	str	fp, [sp, #-8]!
    19a4:	str	lr, [sp, #4]
    19a8:	add	fp, sp, #4
    19ac:	sub	sp, sp, #16
    19b0:	str	r0, [fp, #-16]
    19b4:	str	r1, [fp, #-20]	; 0xffffffec
    19b8:	ldr	r0, [fp, #-16]
    19bc:	bl	b34 <flatbuffers_string_vec_len>
    19c0:	str	r0, [fp, #-8]
    19c4:	b	19fc <flatbuffers_string_vec_rscan+0x5c>
    19c8:	ldr	r1, [fp, #-8]
    19cc:	ldr	r0, [fp, #-16]
    19d0:	bl	b84 <flatbuffers_string_vec_at>
    19d4:	str	r0, [fp, #-12]
    19d8:	mov	r2, #0
    19dc:	ldr	r1, [fp, #-20]	; 0xffffffec
    19e0:	ldr	r0, [fp, #-12]
    19e4:	bl	e60 <__flatbuffers_string_cmp>
    19e8:	mov	r3, r0
    19ec:	cmp	r3, #0
    19f0:	bne	19fc <flatbuffers_string_vec_rscan+0x5c>
    19f4:	ldr	r3, [fp, #-8]
    19f8:	b	1a1c <flatbuffers_string_vec_rscan+0x7c>
    19fc:	ldr	r3, [fp, #-8]
    1a00:	sub	r2, r3, #1
    1a04:	str	r2, [fp, #-8]
    1a08:	cmp	r3, #0
    1a0c:	bne	19c8 <flatbuffers_string_vec_rscan+0x28>
    1a10:	movw	r3, #0
    1a14:	movt	r3, #0
    1a18:	ldr	r3, [r3]
    1a1c:	mov	r0, r3
    1a20:	sub	sp, fp, #4
    1a24:	ldr	fp, [sp]
    1a28:	add	sp, sp, #4
    1a2c:	pop	{pc}		; (ldr pc, [sp], #4)

00001a30 <flatbuffers_string_vec_rscan_n>:
    1a30:	str	fp, [sp, #-8]!
    1a34:	str	lr, [sp, #4]
    1a38:	add	fp, sp, #4
    1a3c:	sub	sp, sp, #24
    1a40:	str	r0, [fp, #-16]
    1a44:	str	r1, [fp, #-20]	; 0xffffffec
    1a48:	str	r2, [fp, #-24]	; 0xffffffe8
    1a4c:	ldr	r0, [fp, #-16]
    1a50:	bl	b34 <flatbuffers_string_vec_len>
    1a54:	str	r0, [fp, #-8]
    1a58:	b	1a90 <flatbuffers_string_vec_rscan_n+0x60>
    1a5c:	ldr	r1, [fp, #-8]
    1a60:	ldr	r0, [fp, #-16]
    1a64:	bl	b84 <flatbuffers_string_vec_at>
    1a68:	str	r0, [fp, #-12]
    1a6c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1a70:	ldr	r1, [fp, #-20]	; 0xffffffec
    1a74:	ldr	r0, [fp, #-12]
    1a78:	bl	db8 <__flatbuffers_string_n_cmp>
    1a7c:	mov	r3, r0
    1a80:	cmp	r3, #0
    1a84:	bne	1a90 <flatbuffers_string_vec_rscan_n+0x60>
    1a88:	ldr	r3, [fp, #-8]
    1a8c:	b	1ab0 <flatbuffers_string_vec_rscan_n+0x80>
    1a90:	ldr	r3, [fp, #-8]
    1a94:	sub	r2, r3, #1
    1a98:	str	r2, [fp, #-8]
    1a9c:	cmp	r3, #0
    1aa0:	bne	1a5c <flatbuffers_string_vec_rscan_n+0x2c>
    1aa4:	movw	r3, #0
    1aa8:	movt	r3, #0
    1aac:	ldr	r3, [r3]
    1ab0:	mov	r0, r3
    1ab4:	sub	sp, fp, #4
    1ab8:	ldr	fp, [sp]
    1abc:	add	sp, sp, #4
    1ac0:	pop	{pc}		; (ldr pc, [sp], #4)

00001ac4 <flatbuffers_string_vec_rscan_ex>:
    1ac4:	str	fp, [sp, #-8]!
    1ac8:	str	lr, [sp, #4]
    1acc:	add	fp, sp, #4
    1ad0:	sub	sp, sp, #24
    1ad4:	str	r0, [fp, #-16]
    1ad8:	str	r1, [fp, #-20]	; 0xffffffec
    1adc:	str	r2, [fp, #-24]	; 0xffffffe8
    1ae0:	str	r3, [fp, #-28]	; 0xffffffe4
    1ae4:	ldr	r0, [fp, #-16]
    1ae8:	bl	b34 <flatbuffers_string_vec_len>
    1aec:	mov	r2, r0
    1af0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1af4:	cmp	r3, r2
    1af8:	bcc	1b0c <flatbuffers_string_vec_rscan_ex+0x48>
    1afc:	ldr	r0, [fp, #-16]
    1b00:	bl	b34 <flatbuffers_string_vec_len>
    1b04:	mov	r3, r0
    1b08:	b	1b10 <flatbuffers_string_vec_rscan_ex+0x4c>
    1b0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1b10:	str	r3, [fp, #-8]
    1b14:	b	1b4c <flatbuffers_string_vec_rscan_ex+0x88>
    1b18:	ldr	r1, [fp, #-8]
    1b1c:	ldr	r0, [fp, #-16]
    1b20:	bl	b84 <flatbuffers_string_vec_at>
    1b24:	str	r0, [fp, #-12]
    1b28:	mov	r2, #0
    1b2c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1b30:	ldr	r0, [fp, #-12]
    1b34:	bl	e60 <__flatbuffers_string_cmp>
    1b38:	mov	r3, r0
    1b3c:	cmp	r3, #0
    1b40:	bne	1b4c <flatbuffers_string_vec_rscan_ex+0x88>
    1b44:	ldr	r3, [fp, #-8]
    1b48:	b	1b70 <flatbuffers_string_vec_rscan_ex+0xac>
    1b4c:	ldr	r3, [fp, #-8]
    1b50:	sub	r2, r3, #1
    1b54:	str	r2, [fp, #-8]
    1b58:	ldr	r2, [fp, #-20]	; 0xffffffec
    1b5c:	cmp	r2, r3
    1b60:	bcc	1b18 <flatbuffers_string_vec_rscan_ex+0x54>
    1b64:	movw	r3, #0
    1b68:	movt	r3, #0
    1b6c:	ldr	r3, [r3]
    1b70:	mov	r0, r3
    1b74:	sub	sp, fp, #4
    1b78:	ldr	fp, [sp]
    1b7c:	add	sp, sp, #4
    1b80:	pop	{pc}		; (ldr pc, [sp], #4)

00001b84 <flatbuffers_string_vec_rscan_ex_n>:
    1b84:	str	fp, [sp, #-8]!
    1b88:	str	lr, [sp, #4]
    1b8c:	add	fp, sp, #4
    1b90:	sub	sp, sp, #24
    1b94:	str	r0, [fp, #-16]
    1b98:	str	r1, [fp, #-20]	; 0xffffffec
    1b9c:	str	r2, [fp, #-24]	; 0xffffffe8
    1ba0:	str	r3, [fp, #-28]	; 0xffffffe4
    1ba4:	ldr	r0, [fp, #-16]
    1ba8:	bl	b34 <flatbuffers_string_vec_len>
    1bac:	mov	r2, r0
    1bb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1bb4:	cmp	r3, r2
    1bb8:	bcc	1bcc <flatbuffers_string_vec_rscan_ex_n+0x48>
    1bbc:	ldr	r0, [fp, #-16]
    1bc0:	bl	b34 <flatbuffers_string_vec_len>
    1bc4:	mov	r3, r0
    1bc8:	b	1bd0 <flatbuffers_string_vec_rscan_ex_n+0x4c>
    1bcc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1bd0:	str	r3, [fp, #-8]
    1bd4:	b	1c0c <flatbuffers_string_vec_rscan_ex_n+0x88>
    1bd8:	ldr	r1, [fp, #-8]
    1bdc:	ldr	r0, [fp, #-16]
    1be0:	bl	b84 <flatbuffers_string_vec_at>
    1be4:	str	r0, [fp, #-12]
    1be8:	ldr	r2, [fp, #4]
    1bec:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1bf0:	ldr	r0, [fp, #-12]
    1bf4:	bl	db8 <__flatbuffers_string_n_cmp>
    1bf8:	mov	r3, r0
    1bfc:	cmp	r3, #0
    1c00:	bne	1c0c <flatbuffers_string_vec_rscan_ex_n+0x88>
    1c04:	ldr	r3, [fp, #-8]
    1c08:	b	1c30 <flatbuffers_string_vec_rscan_ex_n+0xac>
    1c0c:	ldr	r3, [fp, #-8]
    1c10:	sub	r2, r3, #1
    1c14:	str	r2, [fp, #-8]
    1c18:	ldr	r2, [fp, #-20]	; 0xffffffec
    1c1c:	cmp	r2, r3
    1c20:	bcc	1bd8 <flatbuffers_string_vec_rscan_ex_n+0x54>
    1c24:	movw	r3, #0
    1c28:	movt	r3, #0
    1c2c:	ldr	r3, [r3]
    1c30:	mov	r0, r3
    1c34:	sub	sp, fp, #4
    1c38:	ldr	fp, [sp]
    1c3c:	add	sp, sp, #4
    1c40:	pop	{pc}		; (ldr pc, [sp], #4)

00001c44 <flatbuffers_has_identifier>:
    1c44:	str	fp, [sp, #-8]!
    1c48:	str	lr, [sp, #4]
    1c4c:	add	fp, sp, #4
    1c50:	sub	sp, sp, #16
    1c54:	str	r0, [fp, #-16]
    1c58:	str	r1, [fp, #-20]	; 0xffffffec
    1c5c:	mov	r3, #0
    1c60:	str	r3, [fp, #-12]
    1c64:	ldr	r3, [fp, #-20]	; 0xffffffec
    1c68:	cmp	r3, #0
    1c6c:	bne	1c78 <flatbuffers_has_identifier+0x34>
    1c70:	mov	r3, #1
    1c74:	b	1cdc <flatbuffers_has_identifier+0x98>
    1c78:	sub	r3, fp, #12
    1c7c:	mov	r2, #4
    1c80:	ldr	r1, [fp, #-20]	; 0xffffffec
    1c84:	mov	r0, r3
    1c88:	bl	0 <strncpy>
    1c8c:	ldr	r3, [fp, #-12]
    1c90:	mov	r0, r3
    1c94:	bl	90c <__flatbuffers_thash_cast_from_le>
    1c98:	mov	r3, r0
    1c9c:	str	r3, [fp, #-12]
    1ca0:	ldr	r3, [fp, #-16]
    1ca4:	add	r3, r3, #4
    1ca8:	mov	r0, r3
    1cac:	bl	930 <__flatbuffers_thash_read_from_pe>
    1cb0:	str	r0, [fp, #-8]
    1cb4:	ldr	r3, [fp, #-12]
    1cb8:	cmp	r3, #0
    1cbc:	beq	1cd0 <flatbuffers_has_identifier+0x8c>
    1cc0:	ldr	r3, [fp, #-12]
    1cc4:	ldr	r2, [fp, #-8]
    1cc8:	cmp	r2, r3
    1ccc:	bne	1cd8 <flatbuffers_has_identifier+0x94>
    1cd0:	mov	r3, #1
    1cd4:	b	1cdc <flatbuffers_has_identifier+0x98>
    1cd8:	mov	r3, #0
    1cdc:	mov	r0, r3
    1ce0:	sub	sp, fp, #4
    1ce4:	ldr	fp, [sp]
    1ce8:	add	sp, sp, #4
    1cec:	pop	{pc}		; (ldr pc, [sp], #4)

00001cf0 <flatbuffers_has_type_hash>:
    1cf0:	str	fp, [sp, #-8]!
    1cf4:	str	lr, [sp, #4]
    1cf8:	add	fp, sp, #4
    1cfc:	sub	sp, sp, #8
    1d00:	str	r0, [fp, #-8]
    1d04:	str	r1, [fp, #-12]
    1d08:	ldr	r3, [fp, #-12]
    1d0c:	cmp	r3, #0
    1d10:	beq	1d34 <flatbuffers_has_type_hash+0x44>
    1d14:	ldr	r3, [fp, #-8]
    1d18:	add	r3, r3, #4
    1d1c:	mov	r0, r3
    1d20:	bl	930 <__flatbuffers_thash_read_from_pe>
    1d24:	mov	r2, r0
    1d28:	ldr	r3, [fp, #-12]
    1d2c:	cmp	r3, r2
    1d30:	bne	1d3c <flatbuffers_has_type_hash+0x4c>
    1d34:	mov	r3, #1
    1d38:	b	1d40 <flatbuffers_has_type_hash+0x50>
    1d3c:	mov	r3, #0
    1d40:	mov	r0, r3
    1d44:	sub	sp, fp, #4
    1d48:	ldr	fp, [sp]
    1d4c:	add	sp, sp, #4
    1d50:	pop	{pc}		; (ldr pc, [sp], #4)

00001d54 <flatbuffers_get_type_hash>:
    1d54:	str	fp, [sp, #-8]!
    1d58:	str	lr, [sp, #4]
    1d5c:	add	fp, sp, #4
    1d60:	sub	sp, sp, #8
    1d64:	str	r0, [fp, #-8]
    1d68:	ldr	r3, [fp, #-8]
    1d6c:	add	r3, r3, #4
    1d70:	mov	r0, r3
    1d74:	bl	930 <__flatbuffers_thash_read_from_pe>
    1d78:	mov	r3, r0
    1d7c:	mov	r0, r3
    1d80:	sub	sp, fp, #4
    1d84:	ldr	fp, [sp]
    1d88:	add	sp, sp, #4
    1d8c:	pop	{pc}		; (ldr pc, [sp], #4)

00001d90 <flatbuffers_read_size_prefix>:
    1d90:	str	fp, [sp, #-8]!
    1d94:	str	lr, [sp, #4]
    1d98:	add	fp, sp, #4
    1d9c:	sub	sp, sp, #8
    1da0:	str	r0, [fp, #-8]
    1da4:	str	r1, [fp, #-12]
    1da8:	ldr	r3, [fp, #-12]
    1dac:	cmp	r3, #0
    1db0:	beq	1dc8 <flatbuffers_read_size_prefix+0x38>
    1db4:	ldr	r0, [fp, #-8]
    1db8:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    1dbc:	mov	r2, r0
    1dc0:	ldr	r3, [fp, #-12]
    1dc4:	str	r2, [r3]
    1dc8:	ldr	r3, [fp, #-8]
    1dcc:	add	r3, r3, #4
    1dd0:	mov	r0, r3
    1dd4:	sub	sp, fp, #4
    1dd8:	ldr	fp, [sp]
    1ddc:	add	sp, sp, #4
    1de0:	pop	{pc}		; (ldr pc, [sp], #4)

00001de4 <MyGame_Example_Color_cast_from_pe>:
    1de4:	push	{fp}		; (str fp, [sp, #-4]!)
    1de8:	add	fp, sp, #0
    1dec:	sub	sp, sp, #12
    1df0:	mov	r3, r0
    1df4:	strb	r3, [fp, #-5]
    1df8:	ldrsb	r3, [fp, #-5]
    1dfc:	mov	r0, r3
    1e00:	add	sp, fp, #0
    1e04:	pop	{fp}		; (ldr fp, [sp], #4)
    1e08:	bx	lr

00001e0c <MyGame_Example_Color_cast_to_pe>:
    1e0c:	push	{fp}		; (str fp, [sp, #-4]!)
    1e10:	add	fp, sp, #0
    1e14:	sub	sp, sp, #12
    1e18:	mov	r3, r0
    1e1c:	strb	r3, [fp, #-5]
    1e20:	ldrsb	r3, [fp, #-5]
    1e24:	mov	r0, r3
    1e28:	add	sp, fp, #0
    1e2c:	pop	{fp}		; (ldr fp, [sp], #4)
    1e30:	bx	lr

00001e34 <MyGame_Example_Color_read_from_pe>:
    1e34:	str	fp, [sp, #-8]!
    1e38:	str	lr, [sp, #4]
    1e3c:	add	fp, sp, #4
    1e40:	sub	sp, sp, #8
    1e44:	str	r0, [fp, #-8]
    1e48:	ldr	r3, [fp, #-8]
    1e4c:	ldrsb	r3, [r3]
    1e50:	mov	r0, r3
    1e54:	bl	1de4 <MyGame_Example_Color_cast_from_pe>
    1e58:	mov	r3, r0
    1e5c:	mov	r0, r3
    1e60:	sub	sp, fp, #4
    1e64:	ldr	fp, [sp]
    1e68:	add	sp, sp, #4
    1e6c:	pop	{pc}		; (ldr pc, [sp], #4)

00001e70 <MyGame_Example_Color_name>:
    1e70:	push	{fp}		; (str fp, [sp, #-4]!)
    1e74:	add	fp, sp, #0
    1e78:	sub	sp, sp, #12
    1e7c:	mov	r3, r0
    1e80:	strb	r3, [fp, #-5]
    1e84:	ldrsb	r3, [fp, #-5]
    1e88:	cmp	r3, #2
    1e8c:	beq	1eac <MyGame_Example_Color_name+0x3c>
    1e90:	cmp	r3, #8
    1e94:	beq	1eb8 <MyGame_Example_Color_name+0x48>
    1e98:	cmp	r3, #1
    1e9c:	bne	1ec4 <MyGame_Example_Color_name+0x54>
    1ea0:	movw	r3, #0
    1ea4:	movt	r3, #0
    1ea8:	b	1ecc <MyGame_Example_Color_name+0x5c>
    1eac:	movw	r3, #0
    1eb0:	movt	r3, #0
    1eb4:	b	1ecc <MyGame_Example_Color_name+0x5c>
    1eb8:	movw	r3, #0
    1ebc:	movt	r3, #0
    1ec0:	b	1ecc <MyGame_Example_Color_name+0x5c>
    1ec4:	movw	r3, #0
    1ec8:	movt	r3, #0
    1ecc:	mov	r0, r3
    1ed0:	add	sp, fp, #0
    1ed4:	pop	{fp}		; (ldr fp, [sp], #4)
    1ed8:	bx	lr

00001edc <MyGame_Example_Color_is_known_value>:
    1edc:	push	{fp}		; (str fp, [sp, #-4]!)
    1ee0:	add	fp, sp, #0
    1ee4:	sub	sp, sp, #12
    1ee8:	mov	r3, r0
    1eec:	strb	r3, [fp, #-5]
    1ef0:	ldrsb	r3, [fp, #-5]
    1ef4:	cmp	r3, #2
    1ef8:	beq	1f14 <MyGame_Example_Color_is_known_value+0x38>
    1efc:	cmp	r3, #8
    1f00:	beq	1f1c <MyGame_Example_Color_is_known_value+0x40>
    1f04:	cmp	r3, #1
    1f08:	bne	1f24 <MyGame_Example_Color_is_known_value+0x48>
    1f0c:	mov	r3, #1
    1f10:	b	1f28 <MyGame_Example_Color_is_known_value+0x4c>
    1f14:	mov	r3, #1
    1f18:	b	1f28 <MyGame_Example_Color_is_known_value+0x4c>
    1f1c:	mov	r3, #1
    1f20:	b	1f28 <MyGame_Example_Color_is_known_value+0x4c>
    1f24:	mov	r3, #0
    1f28:	mov	r0, r3
    1f2c:	add	sp, fp, #0
    1f30:	pop	{fp}		; (ldr fp, [sp], #4)
    1f34:	bx	lr

00001f38 <MyGame_Example_Test__const_ptr_add>:
    1f38:	push	{fp}		; (str fp, [sp, #-4]!)
    1f3c:	add	fp, sp, #0
    1f40:	sub	sp, sp, #12
    1f44:	str	r0, [fp, #-8]
    1f48:	str	r1, [fp, #-12]
    1f4c:	ldr	r3, [fp, #-12]
    1f50:	lsl	r3, r3, #2
    1f54:	ldr	r2, [fp, #-8]
    1f58:	add	r3, r2, r3
    1f5c:	mov	r0, r3
    1f60:	add	sp, fp, #0
    1f64:	pop	{fp}		; (ldr fp, [sp], #4)
    1f68:	bx	lr

00001f6c <MyGame_Example_Test_vec_at>:
    1f6c:	str	fp, [sp, #-8]!
    1f70:	str	lr, [sp, #4]
    1f74:	add	fp, sp, #4
    1f78:	sub	sp, sp, #8
    1f7c:	str	r0, [fp, #-8]
    1f80:	str	r1, [fp, #-12]
    1f84:	ldr	r0, [fp, #-8]
    1f88:	bl	a94 <flatbuffers_vec_len>
    1f8c:	mov	r2, r0
    1f90:	ldr	r3, [fp, #-12]
    1f94:	cmp	r3, r2
    1f98:	bcc	1fbc <MyGame_Example_Test_vec_at+0x50>
    1f9c:	movw	r3, #0
    1fa0:	movt	r3, #0
    1fa4:	mov	r2, #380	; 0x17c
    1fa8:	movw	r1, #0
    1fac:	movt	r1, #0
    1fb0:	movw	r0, #0
    1fb4:	movt	r0, #0
    1fb8:	bl	0 <__assert_fail>
    1fbc:	ldr	r3, [fp, #-12]
    1fc0:	lsl	r3, r3, #2
    1fc4:	ldr	r2, [fp, #-8]
    1fc8:	add	r3, r2, r3
    1fcc:	mov	r0, r3
    1fd0:	sub	sp, fp, #4
    1fd4:	ldr	fp, [sp]
    1fd8:	add	sp, sp, #4
    1fdc:	pop	{pc}		; (ldr pc, [sp], #4)

00001fe0 <MyGame_Example_Test__size>:
    1fe0:	push	{fp}		; (str fp, [sp, #-4]!)
    1fe4:	add	fp, sp, #0
    1fe8:	mov	r3, #4
    1fec:	mov	r0, r3
    1ff0:	add	sp, fp, #0
    1ff4:	pop	{fp}		; (ldr fp, [sp], #4)
    1ff8:	bx	lr

00001ffc <MyGame_Example_Test_vec_len>:
    1ffc:	str	fp, [sp, #-8]!
    2000:	str	lr, [sp, #4]
    2004:	add	fp, sp, #4
    2008:	sub	sp, sp, #8
    200c:	str	r0, [fp, #-8]
    2010:	ldr	r3, [fp, #-8]
    2014:	cmp	r3, #0
    2018:	beq	2034 <MyGame_Example_Test_vec_len+0x38>
    201c:	ldr	r3, [fp, #-8]
    2020:	sub	r3, r3, #4
    2024:	mov	r0, r3
    2028:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    202c:	mov	r3, r0
    2030:	b	2038 <MyGame_Example_Test_vec_len+0x3c>
    2034:	mov	r3, #0
    2038:	mov	r0, r3
    203c:	sub	sp, fp, #4
    2040:	ldr	fp, [sp]
    2044:	add	sp, sp, #4
    2048:	pop	{pc}		; (ldr pc, [sp], #4)

0000204c <MyGame_Example_Test_a>:
    204c:	str	fp, [sp, #-8]!
    2050:	str	lr, [sp, #4]
    2054:	add	fp, sp, #4
    2058:	sub	sp, sp, #8
    205c:	str	r0, [fp, #-8]
    2060:	ldr	r3, [fp, #-8]
    2064:	cmp	r3, #0
    2068:	beq	2080 <MyGame_Example_Test_a+0x34>
    206c:	ldr	r3, [fp, #-8]
    2070:	mov	r0, r3
    2074:	bl	310 <flatbuffers_int16_read_from_pe>
    2078:	mov	r3, r0
    207c:	b	2084 <MyGame_Example_Test_a+0x38>
    2080:	mov	r3, #0
    2084:	mov	r0, r3
    2088:	sub	sp, fp, #4
    208c:	ldr	fp, [sp]
    2090:	add	sp, sp, #4
    2094:	pop	{pc}		; (ldr pc, [sp], #4)

00002098 <MyGame_Example_Test_b>:
    2098:	str	fp, [sp, #-8]!
    209c:	str	lr, [sp, #4]
    20a0:	add	fp, sp, #4
    20a4:	sub	sp, sp, #8
    20a8:	str	r0, [fp, #-8]
    20ac:	ldr	r3, [fp, #-8]
    20b0:	cmp	r3, #0
    20b4:	beq	20d0 <MyGame_Example_Test_b+0x38>
    20b8:	ldr	r3, [fp, #-8]
    20bc:	add	r3, r3, #2
    20c0:	mov	r0, r3
    20c4:	bl	284 <flatbuffers_int8_read_from_pe>
    20c8:	mov	r3, r0
    20cc:	b	20d4 <MyGame_Example_Test_b+0x3c>
    20d0:	mov	r3, #0
    20d4:	mov	r0, r3
    20d8:	sub	sp, fp, #4
    20dc:	ldr	fp, [sp]
    20e0:	add	sp, sp, #4
    20e4:	pop	{pc}		; (ldr pc, [sp], #4)

000020e8 <MyGame_Example_emptystruct__size>:
    20e8:	push	{fp}		; (str fp, [sp, #-4]!)
    20ec:	add	fp, sp, #0
    20f0:	mov	r3, #0
    20f4:	mov	r0, r3
    20f8:	add	sp, fp, #0
    20fc:	pop	{fp}		; (ldr fp, [sp], #4)
    2100:	bx	lr

00002104 <MyGame_Example_Vec3__size>:
    2104:	push	{fp}		; (str fp, [sp, #-4]!)
    2108:	add	fp, sp, #0
    210c:	mov	r3, #32
    2110:	mov	r0, r3
    2114:	add	sp, fp, #0
    2118:	pop	{fp}		; (ldr fp, [sp], #4)
    211c:	bx	lr

00002120 <MyGame_Example_Vec3_as_root_with_identifier>:
    2120:	str	fp, [sp, #-8]!
    2124:	str	lr, [sp, #4]
    2128:	add	fp, sp, #4
    212c:	sub	sp, sp, #8
    2130:	str	r0, [fp, #-8]
    2134:	str	r1, [fp, #-12]
    2138:	ldr	r3, [fp, #-8]
    213c:	cmp	r3, #0
    2140:	beq	2174 <MyGame_Example_Vec3_as_root_with_identifier+0x54>
    2144:	ldr	r1, [fp, #-12]
    2148:	ldr	r0, [fp, #-8]
    214c:	bl	1c44 <flatbuffers_has_identifier>
    2150:	mov	r3, r0
    2154:	cmp	r3, #0
    2158:	beq	2174 <MyGame_Example_Vec3_as_root_with_identifier+0x54>
    215c:	ldr	r0, [fp, #-8]
    2160:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    2164:	mov	r2, r0
    2168:	ldr	r3, [fp, #-8]
    216c:	add	r3, r3, r2
    2170:	b	2178 <MyGame_Example_Vec3_as_root_with_identifier+0x58>
    2174:	mov	r3, #0
    2178:	mov	r0, r3
    217c:	sub	sp, fp, #4
    2180:	ldr	fp, [sp]
    2184:	add	sp, sp, #4
    2188:	pop	{pc}		; (ldr pc, [sp], #4)

0000218c <MyGame_Example_Vec3_as_root_with_type_hash>:
    218c:	str	fp, [sp, #-8]!
    2190:	str	lr, [sp, #4]
    2194:	add	fp, sp, #4
    2198:	sub	sp, sp, #8
    219c:	str	r0, [fp, #-8]
    21a0:	str	r1, [fp, #-12]
    21a4:	ldr	r3, [fp, #-8]
    21a8:	cmp	r3, #0
    21ac:	beq	21e0 <MyGame_Example_Vec3_as_root_with_type_hash+0x54>
    21b0:	ldr	r1, [fp, #-12]
    21b4:	ldr	r0, [fp, #-8]
    21b8:	bl	1cf0 <flatbuffers_has_type_hash>
    21bc:	mov	r3, r0
    21c0:	cmp	r3, #0
    21c4:	beq	21e0 <MyGame_Example_Vec3_as_root_with_type_hash+0x54>
    21c8:	ldr	r0, [fp, #-8]
    21cc:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    21d0:	mov	r2, r0
    21d4:	ldr	r3, [fp, #-8]
    21d8:	add	r3, r3, r2
    21dc:	b	21e4 <MyGame_Example_Vec3_as_root_with_type_hash+0x58>
    21e0:	mov	r3, #0
    21e4:	mov	r0, r3
    21e8:	sub	sp, fp, #4
    21ec:	ldr	fp, [sp]
    21f0:	add	sp, sp, #4
    21f4:	pop	{pc}		; (ldr pc, [sp], #4)

000021f8 <MyGame_Example_Vec3_as_root>:
    21f8:	str	fp, [sp, #-8]!
    21fc:	str	lr, [sp, #4]
    2200:	add	fp, sp, #4
    2204:	sub	sp, sp, #16
    2208:	str	r0, [fp, #-16]
    220c:	movw	r3, #0
    2210:	movt	r3, #0
    2214:	str	r3, [fp, #-8]
    2218:	ldr	r3, [fp, #-16]
    221c:	cmp	r3, #0
    2220:	beq	2254 <MyGame_Example_Vec3_as_root+0x5c>
    2224:	ldr	r1, [fp, #-8]
    2228:	ldr	r0, [fp, #-16]
    222c:	bl	1c44 <flatbuffers_has_identifier>
    2230:	mov	r3, r0
    2234:	cmp	r3, #0
    2238:	beq	2254 <MyGame_Example_Vec3_as_root+0x5c>
    223c:	ldr	r0, [fp, #-16]
    2240:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    2244:	mov	r2, r0
    2248:	ldr	r3, [fp, #-16]
    224c:	add	r3, r3, r2
    2250:	b	2258 <MyGame_Example_Vec3_as_root+0x60>
    2254:	mov	r3, #0
    2258:	mov	r0, r3
    225c:	sub	sp, fp, #4
    2260:	ldr	fp, [sp]
    2264:	add	sp, sp, #4
    2268:	pop	{pc}		; (ldr pc, [sp], #4)

0000226c <MyGame_Example_Vec3_as_typed_root>:
    226c:	str	fp, [sp, #-8]!
    2270:	str	lr, [sp, #4]
    2274:	add	fp, sp, #4
    2278:	sub	sp, sp, #8
    227c:	str	r0, [fp, #-8]
    2280:	ldr	r3, [fp, #-8]
    2284:	cmp	r3, #0
    2288:	beq	22c0 <MyGame_Example_Vec3_as_typed_root+0x54>
    228c:	movw	r1, #16082	; 0x3ed2
    2290:	movt	r1, #43253	; 0xa8f5
    2294:	ldr	r0, [fp, #-8]
    2298:	bl	1cf0 <flatbuffers_has_type_hash>
    229c:	mov	r3, r0
    22a0:	cmp	r3, #0
    22a4:	beq	22c0 <MyGame_Example_Vec3_as_typed_root+0x54>
    22a8:	ldr	r0, [fp, #-8]
    22ac:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    22b0:	mov	r2, r0
    22b4:	ldr	r3, [fp, #-8]
    22b8:	add	r3, r3, r2
    22bc:	b	22c4 <MyGame_Example_Vec3_as_typed_root+0x58>
    22c0:	mov	r3, #0
    22c4:	mov	r0, r3
    22c8:	sub	sp, fp, #4
    22cc:	ldr	fp, [sp]
    22d0:	add	sp, sp, #4
    22d4:	pop	{pc}		; (ldr pc, [sp], #4)

000022d8 <MyGame_Example_Vec3_z>:
    22d8:	str	fp, [sp, #-8]!
    22dc:	str	lr, [sp, #4]
    22e0:	add	fp, sp, #4
    22e4:	sub	sp, sp, #8
    22e8:	str	r0, [fp, #-8]
    22ec:	ldr	r3, [fp, #-8]
    22f0:	cmp	r3, #0
    22f4:	beq	2310 <MyGame_Example_Vec3_z+0x38>
    22f8:	ldr	r3, [fp, #-8]
    22fc:	add	r3, r3, #8
    2300:	mov	r0, r3
    2304:	bl	4d8 <flatbuffers_float_read_from_pe>
    2308:	vmov.f32	s15, s0
    230c:	b	2314 <MyGame_Example_Vec3_z+0x3c>
    2310:	vldr	s15, [pc, #16]	; 2328 <MyGame_Example_Vec3_z+0x50>
    2314:	vmov.f32	s0, s15
    2318:	sub	sp, fp, #4
    231c:	ldr	fp, [sp]
    2320:	add	sp, sp, #4
    2324:	pop	{pc}		; (ldr pc, [sp], #4)
    2328:	.word	0x00000000

0000232c <Fantasy_Rapunzel_hair_length>:
    232c:	str	fp, [sp, #-8]!
    2330:	str	lr, [sp, #4]
    2334:	add	fp, sp, #4
    2338:	sub	sp, sp, #8
    233c:	str	r0, [fp, #-8]
    2340:	ldr	r3, [fp, #-8]
    2344:	cmp	r3, #0
    2348:	beq	2360 <Fantasy_Rapunzel_hair_length+0x34>
    234c:	ldr	r3, [fp, #-8]
    2350:	mov	r0, r3
    2354:	bl	dc <flatbuffers_uint16_read_from_pe>
    2358:	mov	r3, r0
    235c:	b	2364 <Fantasy_Rapunzel_hair_length+0x38>
    2360:	mov	r3, #0
    2364:	mov	r0, r3
    2368:	sub	sp, fp, #4
    236c:	ldr	fp, [sp]
    2370:	add	sp, sp, #4
    2374:	pop	{pc}		; (ldr pc, [sp], #4)

00002378 <MyGame_Example_Any_vec_len>:
    2378:	str	fp, [sp, #-8]!
    237c:	str	lr, [sp, #4]
    2380:	add	fp, sp, #4
    2384:	sub	sp, sp, #8
    2388:	str	r0, [fp, #-8]
    238c:	ldr	r0, [fp, #-8]
    2390:	bl	a94 <flatbuffers_vec_len>
    2394:	mov	r3, r0
    2398:	mov	r0, r3
    239c:	sub	sp, fp, #4
    23a0:	ldr	fp, [sp]
    23a4:	add	sp, sp, #4
    23a8:	pop	{pc}		; (ldr pc, [sp], #4)

000023ac <MyGame_Example_Any_union_vec_len>:
    23ac:	str	fp, [sp, #-8]!
    23b0:	str	lr, [sp, #4]
    23b4:	add	fp, sp, #4
    23b8:	sub	sp, sp, #8
    23bc:	sub	r3, fp, #12
    23c0:	stm	r3, {r0, r1}
    23c4:	ldr	r3, [fp, #-12]
    23c8:	mov	r0, r3
    23cc:	bl	a94 <flatbuffers_vec_len>
    23d0:	mov	r3, r0
    23d4:	mov	r0, r3
    23d8:	sub	sp, fp, #4
    23dc:	ldr	fp, [sp]
    23e0:	add	sp, sp, #4
    23e4:	pop	{pc}		; (ldr pc, [sp], #4)

000023e8 <MyGame_Example_Any_union_vec_at>:
    23e8:	str	fp, [sp, #-8]!
    23ec:	str	lr, [sp, #4]
    23f0:	add	fp, sp, #4
    23f4:	sub	sp, sp, #32
    23f8:	str	r0, [fp, #-24]	; 0xffffffe8
    23fc:	sub	r0, fp, #32
    2400:	stm	r0, {r1, r2}
    2404:	str	r3, [fp, #-36]	; 0xffffffdc
    2408:	mov	r3, #0
    240c:	strb	r3, [fp, #-16]
    2410:	mov	r3, #0
    2414:	str	r3, [fp, #-12]
    2418:	ldr	r3, [fp, #-32]	; 0xffffffe0
    241c:	mov	r0, r3
    2420:	bl	a94 <flatbuffers_vec_len>
    2424:	str	r0, [fp, #-8]
    2428:	ldr	r2, [fp, #-8]
    242c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2430:	cmp	r2, r3
    2434:	bhi	2458 <MyGame_Example_Any_union_vec_at+0x70>
    2438:	movw	r3, #0
    243c:	movt	r3, #0
    2440:	mov	r2, #520	; 0x208
    2444:	movw	r1, #0
    2448:	movt	r1, #0
    244c:	movw	r0, #0
    2450:	movt	r0, #0
    2454:	bl	0 <__assert_fail>
    2458:	ldr	r2, [fp, #-32]	; 0xffffffe0
    245c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2460:	add	r3, r2, r3
    2464:	ldrb	r3, [r3]
    2468:	strb	r3, [fp, #-16]
    246c:	ldrb	r3, [fp, #-16]
    2470:	cmp	r3, #0
    2474:	bne	2490 <MyGame_Example_Any_union_vec_at+0xa8>
    2478:	ldr	r3, [fp, #-24]	; 0xffffffe8
    247c:	mov	r1, r3
    2480:	sub	r3, fp, #16
    2484:	ldrd	r2, [r3]
    2488:	strd	r2, [r1]
    248c:	b	24bc <MyGame_Example_Any_union_vec_at+0xd4>
    2490:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2494:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2498:	mov	r0, r3
    249c:	bl	c60 <flatbuffers_generic_vec_at>
    24a0:	mov	r3, r0
    24a4:	str	r3, [fp, #-12]
    24a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    24ac:	mov	r1, r3
    24b0:	sub	r3, fp, #16
    24b4:	ldrd	r2, [r3]
    24b8:	strd	r2, [r1]
    24bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    24c0:	sub	sp, fp, #4
    24c4:	ldr	fp, [sp]
    24c8:	add	sp, sp, #4
    24cc:	pop	{pc}		; (ldr pc, [sp], #4)

000024d0 <MyGame_Example_Any_is_known_type>:
    24d0:	push	{fp}		; (str fp, [sp, #-4]!)
    24d4:	add	fp, sp, #0
    24d8:	sub	sp, sp, #12
    24dc:	mov	r3, r0
    24e0:	strb	r3, [fp, #-5]
    24e4:	ldrb	r3, [fp, #-5]
    24e8:	cmp	r3, #4
    24ec:	ldrls	pc, [pc, r3, lsl #2]
    24f0:	b	2530 <MyGame_Example_Any_is_known_type+0x60>
    24f4:	.word	0x00002508
    24f8:	.word	0x00002510
    24fc:	.word	0x00002518
    2500:	.word	0x00002520
    2504:	.word	0x00002528
    2508:	mov	r3, #1
    250c:	b	2534 <MyGame_Example_Any_is_known_type+0x64>
    2510:	mov	r3, #1
    2514:	b	2534 <MyGame_Example_Any_is_known_type+0x64>
    2518:	mov	r3, #1
    251c:	b	2534 <MyGame_Example_Any_is_known_type+0x64>
    2520:	mov	r3, #1
    2524:	b	2534 <MyGame_Example_Any_is_known_type+0x64>
    2528:	mov	r3, #1
    252c:	b	2534 <MyGame_Example_Any_is_known_type+0x64>
    2530:	mov	r3, #0
    2534:	mov	r0, r3
    2538:	add	sp, fp, #0
    253c:	pop	{fp}		; (ldr fp, [sp], #4)
    2540:	bx	lr

00002544 <MyGame_Example_with_emptystruct_as_root_with_identifier>:
    2544:	str	fp, [sp, #-8]!
    2548:	str	lr, [sp, #4]
    254c:	add	fp, sp, #4
    2550:	sub	sp, sp, #8
    2554:	str	r0, [fp, #-8]
    2558:	str	r1, [fp, #-12]
    255c:	ldr	r3, [fp, #-8]
    2560:	cmp	r3, #0
    2564:	beq	2598 <MyGame_Example_with_emptystruct_as_root_with_identifier+0x54>
    2568:	ldr	r1, [fp, #-12]
    256c:	ldr	r0, [fp, #-8]
    2570:	bl	1c44 <flatbuffers_has_identifier>
    2574:	mov	r3, r0
    2578:	cmp	r3, #0
    257c:	beq	2598 <MyGame_Example_with_emptystruct_as_root_with_identifier+0x54>
    2580:	ldr	r0, [fp, #-8]
    2584:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    2588:	mov	r2, r0
    258c:	ldr	r3, [fp, #-8]
    2590:	add	r3, r3, r2
    2594:	b	259c <MyGame_Example_with_emptystruct_as_root_with_identifier+0x58>
    2598:	mov	r3, #0
    259c:	mov	r0, r3
    25a0:	sub	sp, fp, #4
    25a4:	ldr	fp, [sp]
    25a8:	add	sp, sp, #4
    25ac:	pop	{pc}		; (ldr pc, [sp], #4)

000025b0 <MyGame_Example_with_emptystruct_as_root_with_type_hash>:
    25b0:	str	fp, [sp, #-8]!
    25b4:	str	lr, [sp, #4]
    25b8:	add	fp, sp, #4
    25bc:	sub	sp, sp, #8
    25c0:	str	r0, [fp, #-8]
    25c4:	str	r1, [fp, #-12]
    25c8:	ldr	r3, [fp, #-8]
    25cc:	cmp	r3, #0
    25d0:	beq	2604 <MyGame_Example_with_emptystruct_as_root_with_type_hash+0x54>
    25d4:	ldr	r1, [fp, #-12]
    25d8:	ldr	r0, [fp, #-8]
    25dc:	bl	1cf0 <flatbuffers_has_type_hash>
    25e0:	mov	r3, r0
    25e4:	cmp	r3, #0
    25e8:	beq	2604 <MyGame_Example_with_emptystruct_as_root_with_type_hash+0x54>
    25ec:	ldr	r0, [fp, #-8]
    25f0:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    25f4:	mov	r2, r0
    25f8:	ldr	r3, [fp, #-8]
    25fc:	add	r3, r3, r2
    2600:	b	2608 <MyGame_Example_with_emptystruct_as_root_with_type_hash+0x58>
    2604:	mov	r3, #0
    2608:	mov	r0, r3
    260c:	sub	sp, fp, #4
    2610:	ldr	fp, [sp]
    2614:	add	sp, sp, #4
    2618:	pop	{pc}		; (ldr pc, [sp], #4)

0000261c <MyGame_Example_with_emptystruct_as_root>:
    261c:	str	fp, [sp, #-8]!
    2620:	str	lr, [sp, #4]
    2624:	add	fp, sp, #4
    2628:	sub	sp, sp, #16
    262c:	str	r0, [fp, #-16]
    2630:	movw	r3, #0
    2634:	movt	r3, #0
    2638:	str	r3, [fp, #-8]
    263c:	ldr	r3, [fp, #-16]
    2640:	cmp	r3, #0
    2644:	beq	2678 <MyGame_Example_with_emptystruct_as_root+0x5c>
    2648:	ldr	r1, [fp, #-8]
    264c:	ldr	r0, [fp, #-16]
    2650:	bl	1c44 <flatbuffers_has_identifier>
    2654:	mov	r3, r0
    2658:	cmp	r3, #0
    265c:	beq	2678 <MyGame_Example_with_emptystruct_as_root+0x5c>
    2660:	ldr	r0, [fp, #-16]
    2664:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    2668:	mov	r2, r0
    266c:	ldr	r3, [fp, #-16]
    2670:	add	r3, r3, r2
    2674:	b	267c <MyGame_Example_with_emptystruct_as_root+0x60>
    2678:	mov	r3, #0
    267c:	mov	r0, r3
    2680:	sub	sp, fp, #4
    2684:	ldr	fp, [sp]
    2688:	add	sp, sp, #4
    268c:	pop	{pc}		; (ldr pc, [sp], #4)

00002690 <MyGame_Example_with_emptystruct_as_typed_root>:
    2690:	str	fp, [sp, #-8]!
    2694:	str	lr, [sp, #4]
    2698:	add	fp, sp, #4
    269c:	sub	sp, sp, #8
    26a0:	str	r0, [fp, #-8]
    26a4:	ldr	r3, [fp, #-8]
    26a8:	cmp	r3, #0
    26ac:	beq	26e4 <MyGame_Example_with_emptystruct_as_typed_root+0x54>
    26b0:	movw	r1, #14262	; 0x37b6
    26b4:	movt	r1, #45277	; 0xb0dd
    26b8:	ldr	r0, [fp, #-8]
    26bc:	bl	1cf0 <flatbuffers_has_type_hash>
    26c0:	mov	r3, r0
    26c4:	cmp	r3, #0
    26c8:	beq	26e4 <MyGame_Example_with_emptystruct_as_typed_root+0x54>
    26cc:	ldr	r0, [fp, #-8]
    26d0:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    26d4:	mov	r2, r0
    26d8:	ldr	r3, [fp, #-8]
    26dc:	add	r3, r3, r2
    26e0:	b	26e8 <MyGame_Example_with_emptystruct_as_typed_root+0x58>
    26e4:	mov	r3, #0
    26e8:	mov	r0, r3
    26ec:	sub	sp, fp, #4
    26f0:	ldr	fp, [sp]
    26f4:	add	sp, sp, #4
    26f8:	pop	{pc}		; (ldr pc, [sp], #4)

000026fc <MyGame_Example_with_emptystruct_empty>:
    26fc:	str	fp, [sp, #-8]!
    2700:	str	lr, [sp, #4]
    2704:	add	fp, sp, #4
    2708:	sub	sp, sp, #16
    270c:	str	r0, [fp, #-16]
    2710:	mov	r3, #0
    2714:	strh	r3, [fp, #-6]
    2718:	ldr	r3, [fp, #-16]
    271c:	cmp	r3, #0
    2720:	bne	2744 <MyGame_Example_with_emptystruct_empty+0x48>
    2724:	movw	r3, #0
    2728:	movt	r3, #0
    272c:	movw	r2, #569	; 0x239
    2730:	movw	r1, #0
    2734:	movt	r1, #0
    2738:	movw	r0, #0
    273c:	movt	r0, #0
    2740:	bl	0 <__assert_fail>
    2744:	mov	r3, #0
    2748:	strh	r3, [fp, #-8]
    274c:	ldr	r0, [fp, #-16]
    2750:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    2754:	mov	r3, r0
    2758:	rsb	r3, r3, #0
    275c:	ldr	r2, [fp, #-16]
    2760:	add	r3, r2, r3
    2764:	str	r3, [fp, #-12]
    2768:	ldr	r0, [fp, #-12]
    276c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    2770:	mov	r3, r0
    2774:	mov	r2, r3
    2778:	ldrh	r3, [fp, #-8]
    277c:	add	r3, r3, #3
    2780:	lsl	r3, r3, #1
    2784:	cmp	r2, r3
    2788:	bcc	27b0 <MyGame_Example_with_emptystruct_empty+0xb4>
    278c:	ldrh	r3, [fp, #-8]
    2790:	add	r3, r3, #2
    2794:	lsl	r3, r3, #1
    2798:	ldr	r2, [fp, #-12]
    279c:	add	r3, r2, r3
    27a0:	mov	r0, r3
    27a4:	bl	848 <__flatbuffers_voffset_read_from_pe>
    27a8:	mov	r3, r0
    27ac:	strh	r3, [fp, #-6]
    27b0:	ldrh	r3, [fp, #-6]
    27b4:	cmp	r3, #0
    27b8:	beq	27cc <MyGame_Example_with_emptystruct_empty+0xd0>
    27bc:	ldrh	r3, [fp, #-6]
    27c0:	ldr	r2, [fp, #-16]
    27c4:	add	r3, r2, r3
    27c8:	b	27d0 <MyGame_Example_with_emptystruct_empty+0xd4>
    27cc:	mov	r3, #0
    27d0:	mov	r0, r3
    27d4:	sub	sp, fp, #4
    27d8:	ldr	fp, [sp]
    27dc:	add	sp, sp, #4
    27e0:	pop	{pc}		; (ldr pc, [sp], #4)

000027e4 <MyGame_Example_TestSimpleTableWithEnum_color>:
    27e4:	str	fp, [sp, #-8]!
    27e8:	str	lr, [sp, #4]
    27ec:	add	fp, sp, #4
    27f0:	sub	sp, sp, #16
    27f4:	str	r0, [fp, #-16]
    27f8:	mov	r3, #0
    27fc:	strh	r3, [fp, #-6]
    2800:	ldr	r3, [fp, #-16]
    2804:	cmp	r3, #0
    2808:	bne	282c <MyGame_Example_TestSimpleTableWithEnum_color+0x48>
    280c:	movw	r3, #0
    2810:	movt	r3, #0
    2814:	movw	r2, #579	; 0x243
    2818:	movw	r1, #0
    281c:	movt	r1, #0
    2820:	movw	r0, #0
    2824:	movt	r0, #0
    2828:	bl	0 <__assert_fail>
    282c:	mov	r3, #0
    2830:	strh	r3, [fp, #-8]
    2834:	ldr	r0, [fp, #-16]
    2838:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    283c:	mov	r3, r0
    2840:	rsb	r3, r3, #0
    2844:	ldr	r2, [fp, #-16]
    2848:	add	r3, r2, r3
    284c:	str	r3, [fp, #-12]
    2850:	ldr	r0, [fp, #-12]
    2854:	bl	848 <__flatbuffers_voffset_read_from_pe>
    2858:	mov	r3, r0
    285c:	mov	r2, r3
    2860:	ldrh	r3, [fp, #-8]
    2864:	add	r3, r3, #3
    2868:	lsl	r3, r3, #1
    286c:	cmp	r2, r3
    2870:	bcc	2898 <MyGame_Example_TestSimpleTableWithEnum_color+0xb4>
    2874:	ldrh	r3, [fp, #-8]
    2878:	add	r3, r3, #2
    287c:	lsl	r3, r3, #1
    2880:	ldr	r2, [fp, #-12]
    2884:	add	r3, r2, r3
    2888:	mov	r0, r3
    288c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    2890:	mov	r3, r0
    2894:	strh	r3, [fp, #-6]
    2898:	ldrh	r3, [fp, #-6]
    289c:	cmp	r3, #0
    28a0:	beq	28c0 <MyGame_Example_TestSimpleTableWithEnum_color+0xdc>
    28a4:	ldrh	r3, [fp, #-6]
    28a8:	ldr	r2, [fp, #-16]
    28ac:	add	r3, r2, r3
    28b0:	mov	r0, r3
    28b4:	bl	1e34 <MyGame_Example_Color_read_from_pe>
    28b8:	mov	r3, r0
    28bc:	b	28c4 <MyGame_Example_TestSimpleTableWithEnum_color+0xe0>
    28c0:	mov	r3, #2
    28c4:	mov	r0, r3
    28c8:	sub	sp, fp, #4
    28cc:	ldr	fp, [sp]
    28d0:	add	sp, sp, #4
    28d4:	pop	{pc}		; (ldr pc, [sp], #4)

000028d8 <MyGame_Example_Stat_id_is_present>:
    28d8:	str	fp, [sp, #-8]!
    28dc:	str	lr, [sp, #4]
    28e0:	add	fp, sp, #4
    28e4:	sub	sp, sp, #16
    28e8:	str	r0, [fp, #-16]
    28ec:	mov	r3, #0
    28f0:	strh	r3, [fp, #-6]
    28f4:	ldr	r3, [fp, #-16]
    28f8:	cmp	r3, #0
    28fc:	bne	2920 <MyGame_Example_Stat_id_is_present+0x48>
    2900:	movw	r3, #0
    2904:	movt	r3, #0
    2908:	movw	r2, #607	; 0x25f
    290c:	movw	r1, #0
    2910:	movt	r1, #0
    2914:	movw	r0, #0
    2918:	movt	r0, #0
    291c:	bl	0 <__assert_fail>
    2920:	mov	r3, #0
    2924:	strh	r3, [fp, #-8]
    2928:	ldr	r0, [fp, #-16]
    292c:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    2930:	mov	r3, r0
    2934:	rsb	r3, r3, #0
    2938:	ldr	r2, [fp, #-16]
    293c:	add	r3, r2, r3
    2940:	str	r3, [fp, #-12]
    2944:	ldr	r0, [fp, #-12]
    2948:	bl	848 <__flatbuffers_voffset_read_from_pe>
    294c:	mov	r3, r0
    2950:	mov	r2, r3
    2954:	ldrh	r3, [fp, #-8]
    2958:	add	r3, r3, #3
    295c:	lsl	r3, r3, #1
    2960:	cmp	r2, r3
    2964:	bcc	298c <MyGame_Example_Stat_id_is_present+0xb4>
    2968:	ldrh	r3, [fp, #-8]
    296c:	add	r3, r3, #2
    2970:	lsl	r3, r3, #1
    2974:	ldr	r2, [fp, #-12]
    2978:	add	r3, r2, r3
    297c:	mov	r0, r3
    2980:	bl	848 <__flatbuffers_voffset_read_from_pe>
    2984:	mov	r3, r0
    2988:	strh	r3, [fp, #-6]
    298c:	ldrh	r3, [fp, #-6]
    2990:	cmp	r3, #0
    2994:	movne	r3, #1
    2998:	moveq	r3, #0
    299c:	uxtb	r3, r3
    29a0:	mov	r0, r3
    29a4:	sub	sp, fp, #4
    29a8:	ldr	fp, [sp]
    29ac:	add	sp, sp, #4
    29b0:	pop	{pc}		; (ldr pc, [sp], #4)

000029b4 <MyGame_Example_Stat_val>:
    29b4:	str	fp, [sp, #-8]!
    29b8:	str	lr, [sp, #4]
    29bc:	add	fp, sp, #4
    29c0:	sub	sp, sp, #16
    29c4:	str	r0, [fp, #-16]
    29c8:	mov	r3, #0
    29cc:	strh	r3, [fp, #-6]
    29d0:	ldr	r3, [fp, #-16]
    29d4:	cmp	r3, #0
    29d8:	bne	29fc <MyGame_Example_Stat_val+0x48>
    29dc:	movw	r3, #0
    29e0:	movt	r3, #0
    29e4:	mov	r2, #608	; 0x260
    29e8:	movw	r1, #0
    29ec:	movt	r1, #0
    29f0:	movw	r0, #0
    29f4:	movt	r0, #0
    29f8:	bl	0 <__assert_fail>
    29fc:	mov	r3, #1
    2a00:	strh	r3, [fp, #-8]
    2a04:	ldr	r0, [fp, #-16]
    2a08:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    2a0c:	mov	r3, r0
    2a10:	rsb	r3, r3, #0
    2a14:	ldr	r2, [fp, #-16]
    2a18:	add	r3, r2, r3
    2a1c:	str	r3, [fp, #-12]
    2a20:	ldr	r0, [fp, #-12]
    2a24:	bl	848 <__flatbuffers_voffset_read_from_pe>
    2a28:	mov	r3, r0
    2a2c:	mov	r2, r3
    2a30:	ldrh	r3, [fp, #-8]
    2a34:	add	r3, r3, #3
    2a38:	lsl	r3, r3, #1
    2a3c:	cmp	r2, r3
    2a40:	bcc	2a68 <MyGame_Example_Stat_val+0xb4>
    2a44:	ldrh	r3, [fp, #-8]
    2a48:	add	r3, r3, #2
    2a4c:	lsl	r3, r3, #1
    2a50:	ldr	r2, [fp, #-12]
    2a54:	add	r3, r2, r3
    2a58:	mov	r0, r3
    2a5c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    2a60:	mov	r3, r0
    2a64:	strh	r3, [fp, #-6]
    2a68:	ldrh	r3, [fp, #-6]
    2a6c:	cmp	r3, #0
    2a70:	beq	2a94 <MyGame_Example_Stat_val+0xe0>
    2a74:	ldrh	r3, [fp, #-6]
    2a78:	ldr	r2, [fp, #-16]
    2a7c:	add	r3, r2, r3
    2a80:	mov	r0, r3
    2a84:	bl	420 <flatbuffers_int64_read_from_pe>
    2a88:	mov	r2, r0
    2a8c:	mov	r3, r1
    2a90:	b	2a9c <MyGame_Example_Stat_val+0xe8>
    2a94:	mov	r2, #0
    2a98:	mov	r3, #0
    2a9c:	mov	r0, r2
    2aa0:	mov	r1, r3
    2aa4:	sub	sp, fp, #4
    2aa8:	ldr	fp, [sp]
    2aac:	add	sp, sp, #4
    2ab0:	pop	{pc}		; (ldr pc, [sp], #4)

00002ab4 <MyGame_Example_Stat_val_is_present>:
    2ab4:	str	fp, [sp, #-8]!
    2ab8:	str	lr, [sp, #4]
    2abc:	add	fp, sp, #4
    2ac0:	sub	sp, sp, #16
    2ac4:	str	r0, [fp, #-16]
    2ac8:	mov	r3, #0
    2acc:	strh	r3, [fp, #-6]
    2ad0:	ldr	r3, [fp, #-16]
    2ad4:	cmp	r3, #0
    2ad8:	bne	2afc <MyGame_Example_Stat_val_is_present+0x48>
    2adc:	movw	r3, #0
    2ae0:	movt	r3, #0
    2ae4:	mov	r2, #608	; 0x260
    2ae8:	movw	r1, #0
    2aec:	movt	r1, #0
    2af0:	movw	r0, #0
    2af4:	movt	r0, #0
    2af8:	bl	0 <__assert_fail>
    2afc:	mov	r3, #1
    2b00:	strh	r3, [fp, #-8]
    2b04:	ldr	r0, [fp, #-16]
    2b08:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    2b0c:	mov	r3, r0
    2b10:	rsb	r3, r3, #0
    2b14:	ldr	r2, [fp, #-16]
    2b18:	add	r3, r2, r3
    2b1c:	str	r3, [fp, #-12]
    2b20:	ldr	r0, [fp, #-12]
    2b24:	bl	848 <__flatbuffers_voffset_read_from_pe>
    2b28:	mov	r3, r0
    2b2c:	mov	r2, r3
    2b30:	ldrh	r3, [fp, #-8]
    2b34:	add	r3, r3, #3
    2b38:	lsl	r3, r3, #1
    2b3c:	cmp	r2, r3
    2b40:	bcc	2b68 <MyGame_Example_Stat_val_is_present+0xb4>
    2b44:	ldrh	r3, [fp, #-8]
    2b48:	add	r3, r3, #2
    2b4c:	lsl	r3, r3, #1
    2b50:	ldr	r2, [fp, #-12]
    2b54:	add	r3, r2, r3
    2b58:	mov	r0, r3
    2b5c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    2b60:	mov	r3, r0
    2b64:	strh	r3, [fp, #-6]
    2b68:	ldrh	r3, [fp, #-6]
    2b6c:	cmp	r3, #0
    2b70:	movne	r3, #1
    2b74:	moveq	r3, #0
    2b78:	uxtb	r3, r3
    2b7c:	mov	r0, r3
    2b80:	sub	sp, fp, #4
    2b84:	ldr	fp, [sp]
    2b88:	add	sp, sp, #4
    2b8c:	pop	{pc}		; (ldr pc, [sp], #4)

00002b90 <MyGame_Example_Stat_count_is_present>:
    2b90:	str	fp, [sp, #-8]!
    2b94:	str	lr, [sp, #4]
    2b98:	add	fp, sp, #4
    2b9c:	sub	sp, sp, #16
    2ba0:	str	r0, [fp, #-16]
    2ba4:	mov	r3, #0
    2ba8:	strh	r3, [fp, #-6]
    2bac:	ldr	r3, [fp, #-16]
    2bb0:	cmp	r3, #0
    2bb4:	bne	2bd8 <MyGame_Example_Stat_count_is_present+0x48>
    2bb8:	movw	r3, #0
    2bbc:	movt	r3, #0
    2bc0:	movw	r2, #609	; 0x261
    2bc4:	movw	r1, #0
    2bc8:	movt	r1, #0
    2bcc:	movw	r0, #0
    2bd0:	movt	r0, #0
    2bd4:	bl	0 <__assert_fail>
    2bd8:	mov	r3, #2
    2bdc:	strh	r3, [fp, #-8]
    2be0:	ldr	r0, [fp, #-16]
    2be4:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    2be8:	mov	r3, r0
    2bec:	rsb	r3, r3, #0
    2bf0:	ldr	r2, [fp, #-16]
    2bf4:	add	r3, r2, r3
    2bf8:	str	r3, [fp, #-12]
    2bfc:	ldr	r0, [fp, #-12]
    2c00:	bl	848 <__flatbuffers_voffset_read_from_pe>
    2c04:	mov	r3, r0
    2c08:	mov	r2, r3
    2c0c:	ldrh	r3, [fp, #-8]
    2c10:	add	r3, r3, #3
    2c14:	lsl	r3, r3, #1
    2c18:	cmp	r2, r3
    2c1c:	bcc	2c44 <MyGame_Example_Stat_count_is_present+0xb4>
    2c20:	ldrh	r3, [fp, #-8]
    2c24:	add	r3, r3, #2
    2c28:	lsl	r3, r3, #1
    2c2c:	ldr	r2, [fp, #-12]
    2c30:	add	r3, r2, r3
    2c34:	mov	r0, r3
    2c38:	bl	848 <__flatbuffers_voffset_read_from_pe>
    2c3c:	mov	r3, r0
    2c40:	strh	r3, [fp, #-6]
    2c44:	ldrh	r3, [fp, #-6]
    2c48:	cmp	r3, #0
    2c4c:	movne	r3, #1
    2c50:	moveq	r3, #0
    2c54:	uxtb	r3, r3
    2c58:	mov	r0, r3
    2c5c:	sub	sp, fp, #4
    2c60:	ldr	fp, [sp]
    2c64:	add	sp, sp, #4
    2c68:	pop	{pc}		; (ldr pc, [sp], #4)

00002c6c <MyGame_Example_Alt_manyany_type>:
    2c6c:	str	fp, [sp, #-8]!
    2c70:	str	lr, [sp, #4]
    2c74:	add	fp, sp, #4
    2c78:	sub	sp, sp, #24
    2c7c:	str	r0, [fp, #-24]	; 0xffffffe8
    2c80:	mov	r3, #0
    2c84:	strh	r3, [fp, #-6]
    2c88:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2c8c:	cmp	r3, #0
    2c90:	bne	2cb4 <MyGame_Example_Alt_manyany_type+0x48>
    2c94:	movw	r3, #0
    2c98:	movt	r3, #0
    2c9c:	movw	r2, #621	; 0x26d
    2ca0:	movw	r1, #0
    2ca4:	movt	r1, #0
    2ca8:	movw	r0, #0
    2cac:	movt	r0, #0
    2cb0:	bl	0 <__assert_fail>
    2cb4:	mov	r3, #2
    2cb8:	strh	r3, [fp, #-8]
    2cbc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2cc0:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    2cc4:	mov	r3, r0
    2cc8:	rsb	r3, r3, #0
    2ccc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2cd0:	add	r3, r2, r3
    2cd4:	str	r3, [fp, #-12]
    2cd8:	ldr	r0, [fp, #-12]
    2cdc:	bl	848 <__flatbuffers_voffset_read_from_pe>
    2ce0:	mov	r3, r0
    2ce4:	mov	r2, r3
    2ce8:	ldrh	r3, [fp, #-8]
    2cec:	add	r3, r3, #3
    2cf0:	lsl	r3, r3, #1
    2cf4:	cmp	r2, r3
    2cf8:	bcc	2d20 <MyGame_Example_Alt_manyany_type+0xb4>
    2cfc:	ldrh	r3, [fp, #-8]
    2d00:	add	r3, r3, #2
    2d04:	lsl	r3, r3, #1
    2d08:	ldr	r2, [fp, #-12]
    2d0c:	add	r3, r2, r3
    2d10:	mov	r0, r3
    2d14:	bl	848 <__flatbuffers_voffset_read_from_pe>
    2d18:	mov	r3, r0
    2d1c:	strh	r3, [fp, #-6]
    2d20:	ldrh	r3, [fp, #-6]
    2d24:	cmp	r3, #0
    2d28:	beq	2d58 <MyGame_Example_Alt_manyany_type+0xec>
    2d2c:	ldrh	r3, [fp, #-6]
    2d30:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2d34:	add	r3, r2, r3
    2d38:	str	r3, [fp, #-16]
    2d3c:	ldr	r0, [fp, #-16]
    2d40:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    2d44:	mov	r3, r0
    2d48:	add	r3, r3, #4
    2d4c:	ldr	r2, [fp, #-16]
    2d50:	add	r3, r2, r3
    2d54:	b	2d5c <MyGame_Example_Alt_manyany_type+0xf0>
    2d58:	mov	r3, #0
    2d5c:	mov	r0, r3
    2d60:	sub	sp, fp, #4
    2d64:	ldr	fp, [sp]
    2d68:	add	sp, sp, #4
    2d6c:	pop	{pc}		; (ldr pc, [sp], #4)

00002d70 <MyGame_Example_Alt_manyany>:
    2d70:	str	fp, [sp, #-8]!
    2d74:	str	lr, [sp, #4]
    2d78:	add	fp, sp, #4
    2d7c:	sub	sp, sp, #24
    2d80:	str	r0, [fp, #-24]	; 0xffffffe8
    2d84:	mov	r3, #0
    2d88:	strh	r3, [fp, #-6]
    2d8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2d90:	cmp	r3, #0
    2d94:	bne	2db8 <MyGame_Example_Alt_manyany+0x48>
    2d98:	movw	r3, #0
    2d9c:	movt	r3, #0
    2da0:	movw	r2, #621	; 0x26d
    2da4:	movw	r1, #0
    2da8:	movt	r1, #0
    2dac:	movw	r0, #0
    2db0:	movt	r0, #0
    2db4:	bl	0 <__assert_fail>
    2db8:	mov	r3, #3
    2dbc:	strh	r3, [fp, #-8]
    2dc0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2dc4:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    2dc8:	mov	r3, r0
    2dcc:	rsb	r3, r3, #0
    2dd0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2dd4:	add	r3, r2, r3
    2dd8:	str	r3, [fp, #-12]
    2ddc:	ldr	r0, [fp, #-12]
    2de0:	bl	848 <__flatbuffers_voffset_read_from_pe>
    2de4:	mov	r3, r0
    2de8:	mov	r2, r3
    2dec:	ldrh	r3, [fp, #-8]
    2df0:	add	r3, r3, #3
    2df4:	lsl	r3, r3, #1
    2df8:	cmp	r2, r3
    2dfc:	bcc	2e24 <MyGame_Example_Alt_manyany+0xb4>
    2e00:	ldrh	r3, [fp, #-8]
    2e04:	add	r3, r3, #2
    2e08:	lsl	r3, r3, #1
    2e0c:	ldr	r2, [fp, #-12]
    2e10:	add	r3, r2, r3
    2e14:	mov	r0, r3
    2e18:	bl	848 <__flatbuffers_voffset_read_from_pe>
    2e1c:	mov	r3, r0
    2e20:	strh	r3, [fp, #-6]
    2e24:	ldrh	r3, [fp, #-6]
    2e28:	cmp	r3, #0
    2e2c:	beq	2e5c <MyGame_Example_Alt_manyany+0xec>
    2e30:	ldrh	r3, [fp, #-6]
    2e34:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2e38:	add	r3, r2, r3
    2e3c:	str	r3, [fp, #-16]
    2e40:	ldr	r0, [fp, #-16]
    2e44:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    2e48:	mov	r3, r0
    2e4c:	add	r3, r3, #4
    2e50:	ldr	r2, [fp, #-16]
    2e54:	add	r3, r2, r3
    2e58:	b	2e60 <MyGame_Example_Alt_manyany+0xf0>
    2e5c:	mov	r3, #0
    2e60:	mov	r0, r3
    2e64:	sub	sp, fp, #4
    2e68:	ldr	fp, [sp]
    2e6c:	add	sp, sp, #4
    2e70:	pop	{pc}		; (ldr pc, [sp], #4)

00002e74 <MyGame_Example_Alt_manyany_is_present>:
    2e74:	str	fp, [sp, #-8]!
    2e78:	str	lr, [sp, #4]
    2e7c:	add	fp, sp, #4
    2e80:	sub	sp, sp, #16
    2e84:	str	r0, [fp, #-16]
    2e88:	mov	r3, #0
    2e8c:	strh	r3, [fp, #-6]
    2e90:	ldr	r3, [fp, #-16]
    2e94:	cmp	r3, #0
    2e98:	bne	2ebc <MyGame_Example_Alt_manyany_is_present+0x48>
    2e9c:	movw	r3, #0
    2ea0:	movt	r3, #0
    2ea4:	movw	r2, #621	; 0x26d
    2ea8:	movw	r1, #0
    2eac:	movt	r1, #0
    2eb0:	movw	r0, #0
    2eb4:	movt	r0, #0
    2eb8:	bl	0 <__assert_fail>
    2ebc:	mov	r3, #3
    2ec0:	strh	r3, [fp, #-8]
    2ec4:	ldr	r0, [fp, #-16]
    2ec8:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    2ecc:	mov	r3, r0
    2ed0:	rsb	r3, r3, #0
    2ed4:	ldr	r2, [fp, #-16]
    2ed8:	add	r3, r2, r3
    2edc:	str	r3, [fp, #-12]
    2ee0:	ldr	r0, [fp, #-12]
    2ee4:	bl	848 <__flatbuffers_voffset_read_from_pe>
    2ee8:	mov	r3, r0
    2eec:	mov	r2, r3
    2ef0:	ldrh	r3, [fp, #-8]
    2ef4:	add	r3, r3, #3
    2ef8:	lsl	r3, r3, #1
    2efc:	cmp	r2, r3
    2f00:	bcc	2f28 <MyGame_Example_Alt_manyany_is_present+0xb4>
    2f04:	ldrh	r3, [fp, #-8]
    2f08:	add	r3, r3, #2
    2f0c:	lsl	r3, r3, #1
    2f10:	ldr	r2, [fp, #-12]
    2f14:	add	r3, r2, r3
    2f18:	mov	r0, r3
    2f1c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    2f20:	mov	r3, r0
    2f24:	strh	r3, [fp, #-6]
    2f28:	ldrh	r3, [fp, #-6]
    2f2c:	cmp	r3, #0
    2f30:	movne	r3, #1
    2f34:	moveq	r3, #0
    2f38:	uxtb	r3, r3
    2f3c:	mov	r0, r3
    2f40:	sub	sp, fp, #4
    2f44:	ldr	fp, [sp]
    2f48:	add	sp, sp, #4
    2f4c:	pop	{pc}		; (ldr pc, [sp], #4)

00002f50 <MyGame_Example_Alt_manyany_union>:
    2f50:	str	r4, [sp, #-12]!
    2f54:	str	fp, [sp, #4]
    2f58:	str	lr, [sp, #8]
    2f5c:	add	fp, sp, #8
    2f60:	sub	sp, sp, #20
    2f64:	str	r0, [fp, #-24]	; 0xffffffe8
    2f68:	str	r1, [fp, #-28]	; 0xffffffe4
    2f6c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2f70:	bl	2c6c <MyGame_Example_Alt_manyany_type>
    2f74:	mov	r3, r0
    2f78:	str	r3, [fp, #-20]	; 0xffffffec
    2f7c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2f80:	bl	2d70 <MyGame_Example_Alt_manyany>
    2f84:	mov	r3, r0
    2f88:	str	r3, [fp, #-16]
    2f8c:	ldr	r3, [fp, #-20]	; 0xffffffec
    2f90:	mov	r0, r3
    2f94:	bl	a94 <flatbuffers_vec_len>
    2f98:	mov	r4, r0
    2f9c:	ldr	r3, [fp, #-16]
    2fa0:	mov	r0, r3
    2fa4:	bl	a94 <flatbuffers_vec_len>
    2fa8:	mov	r3, r0
    2fac:	cmp	r4, r3
    2fb0:	beq	2fd4 <MyGame_Example_Alt_manyany_union+0x84>
    2fb4:	movw	r3, #0
    2fb8:	movt	r3, #0
    2fbc:	movw	r2, #621	; 0x26d
    2fc0:	movw	r1, #0
    2fc4:	movt	r1, #0
    2fc8:	movw	r0, #0
    2fcc:	movt	r0, #0
    2fd0:	bl	0 <__assert_fail>
    2fd4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2fd8:	mov	r1, r3
    2fdc:	sub	r3, fp, #20
    2fe0:	ldrd	r2, [r3]
    2fe4:	strd	r2, [r1]
    2fe8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2fec:	sub	sp, fp, #8
    2ff0:	ldr	r4, [sp]
    2ff4:	ldr	fp, [sp, #4]
    2ff8:	add	sp, sp, #8
    2ffc:	pop	{pc}		; (ldr pc, [sp], #4)

00003000 <MyGame_Example_Monster_vec_len>:
    3000:	str	fp, [sp, #-8]!
    3004:	str	lr, [sp, #4]
    3008:	add	fp, sp, #4
    300c:	sub	sp, sp, #8
    3010:	str	r0, [fp, #-8]
    3014:	ldr	r3, [fp, #-8]
    3018:	cmp	r3, #0
    301c:	beq	3038 <MyGame_Example_Monster_vec_len+0x38>
    3020:	ldr	r3, [fp, #-8]
    3024:	sub	r3, r3, #4
    3028:	mov	r0, r3
    302c:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    3030:	mov	r3, r0
    3034:	b	303c <MyGame_Example_Monster_vec_len+0x3c>
    3038:	mov	r3, #0
    303c:	mov	r0, r3
    3040:	sub	sp, fp, #4
    3044:	ldr	fp, [sp]
    3048:	add	sp, sp, #4
    304c:	pop	{pc}		; (ldr pc, [sp], #4)

00003050 <MyGame_Example_Monster_vec_at>:
    3050:	str	fp, [sp, #-8]!
    3054:	str	lr, [sp, #4]
    3058:	add	fp, sp, #4
    305c:	sub	sp, sp, #16
    3060:	str	r0, [fp, #-16]
    3064:	str	r1, [fp, #-20]	; 0xffffffec
    3068:	ldr	r3, [fp, #-20]	; 0xffffffec
    306c:	lsl	r3, r3, #2
    3070:	ldr	r2, [fp, #-16]
    3074:	add	r3, r2, r3
    3078:	str	r3, [fp, #-8]
    307c:	ldr	r0, [fp, #-16]
    3080:	bl	a94 <flatbuffers_vec_len>
    3084:	mov	r2, r0
    3088:	ldr	r3, [fp, #-20]	; 0xffffffec
    308c:	cmp	r3, r2
    3090:	bcc	30b4 <MyGame_Example_Monster_vec_at+0x64>
    3094:	movw	r3, #0
    3098:	movt	r3, #0
    309c:	movw	r2, #693	; 0x2b5
    30a0:	movw	r1, #0
    30a4:	movt	r1, #0
    30a8:	movw	r0, #0
    30ac:	movt	r0, #0
    30b0:	bl	0 <__assert_fail>
    30b4:	ldr	r0, [fp, #-8]
    30b8:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    30bc:	mov	r2, r0
    30c0:	ldr	r3, [fp, #-8]
    30c4:	add	r3, r3, r2
    30c8:	mov	r0, r3
    30cc:	sub	sp, fp, #4
    30d0:	ldr	fp, [sp]
    30d4:	add	sp, sp, #4
    30d8:	pop	{pc}		; (ldr pc, [sp], #4)

000030dc <MyGame_Example_Monster_as_root_with_identifier>:
    30dc:	str	fp, [sp, #-8]!
    30e0:	str	lr, [sp, #4]
    30e4:	add	fp, sp, #4
    30e8:	sub	sp, sp, #8
    30ec:	str	r0, [fp, #-8]
    30f0:	str	r1, [fp, #-12]
    30f4:	ldr	r3, [fp, #-8]
    30f8:	cmp	r3, #0
    30fc:	beq	3130 <MyGame_Example_Monster_as_root_with_identifier+0x54>
    3100:	ldr	r1, [fp, #-12]
    3104:	ldr	r0, [fp, #-8]
    3108:	bl	1c44 <flatbuffers_has_identifier>
    310c:	mov	r3, r0
    3110:	cmp	r3, #0
    3114:	beq	3130 <MyGame_Example_Monster_as_root_with_identifier+0x54>
    3118:	ldr	r0, [fp, #-8]
    311c:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    3120:	mov	r2, r0
    3124:	ldr	r3, [fp, #-8]
    3128:	add	r3, r3, r2
    312c:	b	3134 <MyGame_Example_Monster_as_root_with_identifier+0x58>
    3130:	mov	r3, #0
    3134:	mov	r0, r3
    3138:	sub	sp, fp, #4
    313c:	ldr	fp, [sp]
    3140:	add	sp, sp, #4
    3144:	pop	{pc}		; (ldr pc, [sp], #4)

00003148 <MyGame_Example_Monster_as_root>:
    3148:	str	fp, [sp, #-8]!
    314c:	str	lr, [sp, #4]
    3150:	add	fp, sp, #4
    3154:	sub	sp, sp, #16
    3158:	str	r0, [fp, #-16]
    315c:	movw	r3, #0
    3160:	movt	r3, #0
    3164:	str	r3, [fp, #-8]
    3168:	ldr	r3, [fp, #-16]
    316c:	cmp	r3, #0
    3170:	beq	31a4 <MyGame_Example_Monster_as_root+0x5c>
    3174:	ldr	r1, [fp, #-8]
    3178:	ldr	r0, [fp, #-16]
    317c:	bl	1c44 <flatbuffers_has_identifier>
    3180:	mov	r3, r0
    3184:	cmp	r3, #0
    3188:	beq	31a4 <MyGame_Example_Monster_as_root+0x5c>
    318c:	ldr	r0, [fp, #-16]
    3190:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    3194:	mov	r2, r0
    3198:	ldr	r3, [fp, #-16]
    319c:	add	r3, r3, r2
    31a0:	b	31a8 <MyGame_Example_Monster_as_root+0x60>
    31a4:	mov	r3, #0
    31a8:	mov	r0, r3
    31ac:	sub	sp, fp, #4
    31b0:	ldr	fp, [sp]
    31b4:	add	sp, sp, #4
    31b8:	pop	{pc}		; (ldr pc, [sp], #4)

000031bc <MyGame_Example_Monster_pos>:
    31bc:	str	fp, [sp, #-8]!
    31c0:	str	lr, [sp, #4]
    31c4:	add	fp, sp, #4
    31c8:	sub	sp, sp, #16
    31cc:	str	r0, [fp, #-16]
    31d0:	mov	r3, #0
    31d4:	strh	r3, [fp, #-6]
    31d8:	ldr	r3, [fp, #-16]
    31dc:	cmp	r3, #0
    31e0:	bne	3204 <MyGame_Example_Monster_pos+0x48>
    31e4:	movw	r3, #0
    31e8:	movt	r3, #0
    31ec:	mov	r2, #696	; 0x2b8
    31f0:	movw	r1, #0
    31f4:	movt	r1, #0
    31f8:	movw	r0, #0
    31fc:	movt	r0, #0
    3200:	bl	0 <__assert_fail>
    3204:	mov	r3, #0
    3208:	strh	r3, [fp, #-8]
    320c:	ldr	r0, [fp, #-16]
    3210:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    3214:	mov	r3, r0
    3218:	rsb	r3, r3, #0
    321c:	ldr	r2, [fp, #-16]
    3220:	add	r3, r2, r3
    3224:	str	r3, [fp, #-12]
    3228:	ldr	r0, [fp, #-12]
    322c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    3230:	mov	r3, r0
    3234:	mov	r2, r3
    3238:	ldrh	r3, [fp, #-8]
    323c:	add	r3, r3, #3
    3240:	lsl	r3, r3, #1
    3244:	cmp	r2, r3
    3248:	bcc	3270 <MyGame_Example_Monster_pos+0xb4>
    324c:	ldrh	r3, [fp, #-8]
    3250:	add	r3, r3, #2
    3254:	lsl	r3, r3, #1
    3258:	ldr	r2, [fp, #-12]
    325c:	add	r3, r2, r3
    3260:	mov	r0, r3
    3264:	bl	848 <__flatbuffers_voffset_read_from_pe>
    3268:	mov	r3, r0
    326c:	strh	r3, [fp, #-6]
    3270:	ldrh	r3, [fp, #-6]
    3274:	cmp	r3, #0
    3278:	beq	328c <MyGame_Example_Monster_pos+0xd0>
    327c:	ldrh	r3, [fp, #-6]
    3280:	ldr	r2, [fp, #-16]
    3284:	add	r3, r2, r3
    3288:	b	3290 <MyGame_Example_Monster_pos+0xd4>
    328c:	mov	r3, #0
    3290:	mov	r0, r3
    3294:	sub	sp, fp, #4
    3298:	ldr	fp, [sp]
    329c:	add	sp, sp, #4
    32a0:	pop	{pc}		; (ldr pc, [sp], #4)

000032a4 <MyGame_Example_Monster_pos_is_present>:
    32a4:	str	fp, [sp, #-8]!
    32a8:	str	lr, [sp, #4]
    32ac:	add	fp, sp, #4
    32b0:	sub	sp, sp, #16
    32b4:	str	r0, [fp, #-16]
    32b8:	mov	r3, #0
    32bc:	strh	r3, [fp, #-6]
    32c0:	ldr	r3, [fp, #-16]
    32c4:	cmp	r3, #0
    32c8:	bne	32ec <MyGame_Example_Monster_pos_is_present+0x48>
    32cc:	movw	r3, #0
    32d0:	movt	r3, #0
    32d4:	mov	r2, #696	; 0x2b8
    32d8:	movw	r1, #0
    32dc:	movt	r1, #0
    32e0:	movw	r0, #0
    32e4:	movt	r0, #0
    32e8:	bl	0 <__assert_fail>
    32ec:	mov	r3, #0
    32f0:	strh	r3, [fp, #-8]
    32f4:	ldr	r0, [fp, #-16]
    32f8:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    32fc:	mov	r3, r0
    3300:	rsb	r3, r3, #0
    3304:	ldr	r2, [fp, #-16]
    3308:	add	r3, r2, r3
    330c:	str	r3, [fp, #-12]
    3310:	ldr	r0, [fp, #-12]
    3314:	bl	848 <__flatbuffers_voffset_read_from_pe>
    3318:	mov	r3, r0
    331c:	mov	r2, r3
    3320:	ldrh	r3, [fp, #-8]
    3324:	add	r3, r3, #3
    3328:	lsl	r3, r3, #1
    332c:	cmp	r2, r3
    3330:	bcc	3358 <MyGame_Example_Monster_pos_is_present+0xb4>
    3334:	ldrh	r3, [fp, #-8]
    3338:	add	r3, r3, #2
    333c:	lsl	r3, r3, #1
    3340:	ldr	r2, [fp, #-12]
    3344:	add	r3, r2, r3
    3348:	mov	r0, r3
    334c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    3350:	mov	r3, r0
    3354:	strh	r3, [fp, #-6]
    3358:	ldrh	r3, [fp, #-6]
    335c:	cmp	r3, #0
    3360:	movne	r3, #1
    3364:	moveq	r3, #0
    3368:	uxtb	r3, r3
    336c:	mov	r0, r3
    3370:	sub	sp, fp, #4
    3374:	ldr	fp, [sp]
    3378:	add	sp, sp, #4
    337c:	pop	{pc}		; (ldr pc, [sp], #4)

00003380 <MyGame_Example_Monster_hp>:
    3380:	str	fp, [sp, #-8]!
    3384:	str	lr, [sp, #4]
    3388:	add	fp, sp, #4
    338c:	sub	sp, sp, #16
    3390:	str	r0, [fp, #-16]
    3394:	mov	r3, #0
    3398:	strh	r3, [fp, #-6]
    339c:	ldr	r3, [fp, #-16]
    33a0:	cmp	r3, #0
    33a4:	bne	33c8 <MyGame_Example_Monster_hp+0x48>
    33a8:	movw	r3, #0
    33ac:	movt	r3, #0
    33b0:	movw	r2, #697	; 0x2b9
    33b4:	movw	r1, #0
    33b8:	movt	r1, #0
    33bc:	movw	r0, #0
    33c0:	movt	r0, #0
    33c4:	bl	0 <__assert_fail>
    33c8:	mov	r3, #2
    33cc:	strh	r3, [fp, #-8]
    33d0:	ldr	r0, [fp, #-16]
    33d4:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    33d8:	mov	r3, r0
    33dc:	rsb	r3, r3, #0
    33e0:	ldr	r2, [fp, #-16]
    33e4:	add	r3, r2, r3
    33e8:	str	r3, [fp, #-12]
    33ec:	ldr	r0, [fp, #-12]
    33f0:	bl	848 <__flatbuffers_voffset_read_from_pe>
    33f4:	mov	r3, r0
    33f8:	mov	r2, r3
    33fc:	ldrh	r3, [fp, #-8]
    3400:	add	r3, r3, #3
    3404:	lsl	r3, r3, #1
    3408:	cmp	r2, r3
    340c:	bcc	3434 <MyGame_Example_Monster_hp+0xb4>
    3410:	ldrh	r3, [fp, #-8]
    3414:	add	r3, r3, #2
    3418:	lsl	r3, r3, #1
    341c:	ldr	r2, [fp, #-12]
    3420:	add	r3, r2, r3
    3424:	mov	r0, r3
    3428:	bl	848 <__flatbuffers_voffset_read_from_pe>
    342c:	mov	r3, r0
    3430:	strh	r3, [fp, #-6]
    3434:	ldrh	r3, [fp, #-6]
    3438:	cmp	r3, #0
    343c:	beq	345c <MyGame_Example_Monster_hp+0xdc>
    3440:	ldrh	r3, [fp, #-6]
    3444:	ldr	r2, [fp, #-16]
    3448:	add	r3, r2, r3
    344c:	mov	r0, r3
    3450:	bl	310 <flatbuffers_int16_read_from_pe>
    3454:	mov	r3, r0
    3458:	b	3460 <MyGame_Example_Monster_hp+0xe0>
    345c:	mov	r3, #100	; 0x64
    3460:	mov	r0, r3
    3464:	sub	sp, fp, #4
    3468:	ldr	fp, [sp]
    346c:	add	sp, sp, #4
    3470:	pop	{pc}		; (ldr pc, [sp], #4)

00003474 <MyGame_Example_Monster_hp_is_present>:
    3474:	str	fp, [sp, #-8]!
    3478:	str	lr, [sp, #4]
    347c:	add	fp, sp, #4
    3480:	sub	sp, sp, #16
    3484:	str	r0, [fp, #-16]
    3488:	mov	r3, #0
    348c:	strh	r3, [fp, #-6]
    3490:	ldr	r3, [fp, #-16]
    3494:	cmp	r3, #0
    3498:	bne	34bc <MyGame_Example_Monster_hp_is_present+0x48>
    349c:	movw	r3, #0
    34a0:	movt	r3, #0
    34a4:	movw	r2, #697	; 0x2b9
    34a8:	movw	r1, #0
    34ac:	movt	r1, #0
    34b0:	movw	r0, #0
    34b4:	movt	r0, #0
    34b8:	bl	0 <__assert_fail>
    34bc:	mov	r3, #2
    34c0:	strh	r3, [fp, #-8]
    34c4:	ldr	r0, [fp, #-16]
    34c8:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    34cc:	mov	r3, r0
    34d0:	rsb	r3, r3, #0
    34d4:	ldr	r2, [fp, #-16]
    34d8:	add	r3, r2, r3
    34dc:	str	r3, [fp, #-12]
    34e0:	ldr	r0, [fp, #-12]
    34e4:	bl	848 <__flatbuffers_voffset_read_from_pe>
    34e8:	mov	r3, r0
    34ec:	mov	r2, r3
    34f0:	ldrh	r3, [fp, #-8]
    34f4:	add	r3, r3, #3
    34f8:	lsl	r3, r3, #1
    34fc:	cmp	r2, r3
    3500:	bcc	3528 <MyGame_Example_Monster_hp_is_present+0xb4>
    3504:	ldrh	r3, [fp, #-8]
    3508:	add	r3, r3, #2
    350c:	lsl	r3, r3, #1
    3510:	ldr	r2, [fp, #-12]
    3514:	add	r3, r2, r3
    3518:	mov	r0, r3
    351c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    3520:	mov	r3, r0
    3524:	strh	r3, [fp, #-6]
    3528:	ldrh	r3, [fp, #-6]
    352c:	cmp	r3, #0
    3530:	movne	r3, #1
    3534:	moveq	r3, #0
    3538:	uxtb	r3, r3
    353c:	mov	r0, r3
    3540:	sub	sp, fp, #4
    3544:	ldr	fp, [sp]
    3548:	add	sp, sp, #4
    354c:	pop	{pc}		; (ldr pc, [sp], #4)

00003550 <MyGame_Example_Monster_vec_scan_by_hp>:
    3550:	str	fp, [sp, #-8]!
    3554:	str	lr, [sp, #4]
    3558:	add	fp, sp, #4
    355c:	sub	sp, sp, #16
    3560:	str	r0, [fp, #-16]
    3564:	mov	r3, r1
    3568:	strh	r3, [fp, #-18]	; 0xffffffee
    356c:	mov	r3, #0
    3570:	str	r3, [fp, #-8]
    3574:	b	35cc <MyGame_Example_Monster_vec_scan_by_hp+0x7c>
    3578:	ldr	r1, [fp, #-8]
    357c:	ldr	r0, [fp, #-16]
    3580:	bl	3050 <MyGame_Example_Monster_vec_at>
    3584:	mov	r3, r0
    3588:	mov	r0, r3
    358c:	bl	3380 <MyGame_Example_Monster_hp>
    3590:	mov	r3, r0
    3594:	strh	r3, [fp, #-10]
    3598:	ldrsh	r2, [fp, #-10]
    359c:	ldrsh	r3, [fp, #-18]	; 0xffffffee
    35a0:	cmp	r2, r3
    35a4:	blt	35c0 <MyGame_Example_Monster_vec_scan_by_hp+0x70>
    35a8:	ldrsh	r2, [fp, #-10]
    35ac:	ldrsh	r3, [fp, #-18]	; 0xffffffee
    35b0:	cmp	r2, r3
    35b4:	bgt	35c0 <MyGame_Example_Monster_vec_scan_by_hp+0x70>
    35b8:	ldr	r3, [fp, #-8]
    35bc:	b	35f0 <MyGame_Example_Monster_vec_scan_by_hp+0xa0>
    35c0:	ldr	r3, [fp, #-8]
    35c4:	add	r3, r3, #1
    35c8:	str	r3, [fp, #-8]
    35cc:	ldr	r0, [fp, #-16]
    35d0:	bl	3000 <MyGame_Example_Monster_vec_len>
    35d4:	mov	r2, r0
    35d8:	ldr	r3, [fp, #-8]
    35dc:	cmp	r3, r2
    35e0:	bcc	3578 <MyGame_Example_Monster_vec_scan_by_hp+0x28>
    35e4:	movw	r3, #0
    35e8:	movt	r3, #0
    35ec:	ldr	r3, [r3]
    35f0:	mov	r0, r3
    35f4:	sub	sp, fp, #4
    35f8:	ldr	fp, [sp]
    35fc:	add	sp, sp, #4
    3600:	pop	{pc}		; (ldr pc, [sp], #4)

00003604 <MyGame_Example_Monster_vec_scan_ex_by_hp>:
    3604:	str	fp, [sp, #-8]!
    3608:	str	lr, [sp, #4]
    360c:	add	fp, sp, #4
    3610:	sub	sp, sp, #24
    3614:	str	r0, [fp, #-16]
    3618:	str	r1, [fp, #-20]	; 0xffffffec
    361c:	str	r2, [fp, #-24]	; 0xffffffe8
    3620:	strh	r3, [fp, #-26]	; 0xffffffe6
    3624:	ldr	r3, [fp, #-20]	; 0xffffffec
    3628:	str	r3, [fp, #-8]
    362c:	b	3684 <MyGame_Example_Monster_vec_scan_ex_by_hp+0x80>
    3630:	ldr	r1, [fp, #-8]
    3634:	ldr	r0, [fp, #-16]
    3638:	bl	3050 <MyGame_Example_Monster_vec_at>
    363c:	mov	r3, r0
    3640:	mov	r0, r3
    3644:	bl	3380 <MyGame_Example_Monster_hp>
    3648:	mov	r3, r0
    364c:	strh	r3, [fp, #-10]
    3650:	ldrsh	r2, [fp, #-10]
    3654:	ldrsh	r3, [fp, #-26]	; 0xffffffe6
    3658:	cmp	r2, r3
    365c:	blt	3678 <MyGame_Example_Monster_vec_scan_ex_by_hp+0x74>
    3660:	ldrsh	r2, [fp, #-10]
    3664:	ldrsh	r3, [fp, #-26]	; 0xffffffe6
    3668:	cmp	r2, r3
    366c:	bgt	3678 <MyGame_Example_Monster_vec_scan_ex_by_hp+0x74>
    3670:	ldr	r3, [fp, #-8]
    3674:	b	36c8 <MyGame_Example_Monster_vec_scan_ex_by_hp+0xc4>
    3678:	ldr	r3, [fp, #-8]
    367c:	add	r3, r3, #1
    3680:	str	r3, [fp, #-8]
    3684:	ldr	r0, [fp, #-16]
    3688:	bl	3000 <MyGame_Example_Monster_vec_len>
    368c:	mov	r2, r0
    3690:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3694:	cmp	r3, r2
    3698:	bcc	36ac <MyGame_Example_Monster_vec_scan_ex_by_hp+0xa8>
    369c:	ldr	r0, [fp, #-16]
    36a0:	bl	3000 <MyGame_Example_Monster_vec_len>
    36a4:	mov	r3, r0
    36a8:	b	36b0 <MyGame_Example_Monster_vec_scan_ex_by_hp+0xac>
    36ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    36b0:	ldr	r2, [fp, #-8]
    36b4:	cmp	r3, r2
    36b8:	bhi	3630 <MyGame_Example_Monster_vec_scan_ex_by_hp+0x2c>
    36bc:	movw	r3, #0
    36c0:	movt	r3, #0
    36c4:	ldr	r3, [r3]
    36c8:	mov	r0, r3
    36cc:	sub	sp, fp, #4
    36d0:	ldr	fp, [sp]
    36d4:	add	sp, sp, #4
    36d8:	pop	{pc}		; (ldr pc, [sp], #4)

000036dc <MyGame_Example_Monster_vec_rscan_by_hp>:
    36dc:	str	fp, [sp, #-8]!
    36e0:	str	lr, [sp, #4]
    36e4:	add	fp, sp, #4
    36e8:	sub	sp, sp, #16
    36ec:	str	r0, [fp, #-16]
    36f0:	mov	r3, r1
    36f4:	strh	r3, [fp, #-18]	; 0xffffffee
    36f8:	ldr	r0, [fp, #-16]
    36fc:	bl	3000 <MyGame_Example_Monster_vec_len>
    3700:	str	r0, [fp, #-8]
    3704:	b	3750 <MyGame_Example_Monster_vec_rscan_by_hp+0x74>
    3708:	ldr	r1, [fp, #-8]
    370c:	ldr	r0, [fp, #-16]
    3710:	bl	3050 <MyGame_Example_Monster_vec_at>
    3714:	mov	r3, r0
    3718:	mov	r0, r3
    371c:	bl	3380 <MyGame_Example_Monster_hp>
    3720:	mov	r3, r0
    3724:	strh	r3, [fp, #-10]
    3728:	ldrsh	r2, [fp, #-10]
    372c:	ldrsh	r3, [fp, #-18]	; 0xffffffee
    3730:	cmp	r2, r3
    3734:	blt	3750 <MyGame_Example_Monster_vec_rscan_by_hp+0x74>
    3738:	ldrsh	r2, [fp, #-10]
    373c:	ldrsh	r3, [fp, #-18]	; 0xffffffee
    3740:	cmp	r2, r3
    3744:	bgt	3750 <MyGame_Example_Monster_vec_rscan_by_hp+0x74>
    3748:	ldr	r3, [fp, #-8]
    374c:	b	3770 <MyGame_Example_Monster_vec_rscan_by_hp+0x94>
    3750:	ldr	r3, [fp, #-8]
    3754:	sub	r2, r3, #1
    3758:	str	r2, [fp, #-8]
    375c:	cmp	r3, #0
    3760:	bne	3708 <MyGame_Example_Monster_vec_rscan_by_hp+0x2c>
    3764:	movw	r3, #0
    3768:	movt	r3, #0
    376c:	ldr	r3, [r3]
    3770:	mov	r0, r3
    3774:	sub	sp, fp, #4
    3778:	ldr	fp, [sp]
    377c:	add	sp, sp, #4
    3780:	pop	{pc}		; (ldr pc, [sp], #4)

00003784 <MyGame_Example_Monster_vec_rscan_ex_by_hp>:
    3784:	str	fp, [sp, #-8]!
    3788:	str	lr, [sp, #4]
    378c:	add	fp, sp, #4
    3790:	sub	sp, sp, #24
    3794:	str	r0, [fp, #-16]
    3798:	str	r1, [fp, #-20]	; 0xffffffec
    379c:	str	r2, [fp, #-24]	; 0xffffffe8
    37a0:	strh	r3, [fp, #-26]	; 0xffffffe6
    37a4:	ldr	r0, [fp, #-16]
    37a8:	bl	3000 <MyGame_Example_Monster_vec_len>
    37ac:	mov	r2, r0
    37b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    37b4:	cmp	r3, r2
    37b8:	bcc	37cc <MyGame_Example_Monster_vec_rscan_ex_by_hp+0x48>
    37bc:	ldr	r0, [fp, #-16]
    37c0:	bl	3000 <MyGame_Example_Monster_vec_len>
    37c4:	mov	r3, r0
    37c8:	b	37d0 <MyGame_Example_Monster_vec_rscan_ex_by_hp+0x4c>
    37cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    37d0:	str	r3, [fp, #-8]
    37d4:	b	3820 <MyGame_Example_Monster_vec_rscan_ex_by_hp+0x9c>
    37d8:	ldr	r1, [fp, #-8]
    37dc:	ldr	r0, [fp, #-16]
    37e0:	bl	3050 <MyGame_Example_Monster_vec_at>
    37e4:	mov	r3, r0
    37e8:	mov	r0, r3
    37ec:	bl	3380 <MyGame_Example_Monster_hp>
    37f0:	mov	r3, r0
    37f4:	strh	r3, [fp, #-10]
    37f8:	ldrsh	r2, [fp, #-10]
    37fc:	ldrsh	r3, [fp, #-26]	; 0xffffffe6
    3800:	cmp	r2, r3
    3804:	blt	3820 <MyGame_Example_Monster_vec_rscan_ex_by_hp+0x9c>
    3808:	ldrsh	r2, [fp, #-10]
    380c:	ldrsh	r3, [fp, #-26]	; 0xffffffe6
    3810:	cmp	r2, r3
    3814:	bgt	3820 <MyGame_Example_Monster_vec_rscan_ex_by_hp+0x9c>
    3818:	ldr	r3, [fp, #-8]
    381c:	b	3844 <MyGame_Example_Monster_vec_rscan_ex_by_hp+0xc0>
    3820:	ldr	r3, [fp, #-8]
    3824:	sub	r2, r3, #1
    3828:	str	r2, [fp, #-8]
    382c:	ldr	r2, [fp, #-20]	; 0xffffffec
    3830:	cmp	r2, r3
    3834:	bcc	37d8 <MyGame_Example_Monster_vec_rscan_ex_by_hp+0x54>
    3838:	movw	r3, #0
    383c:	movt	r3, #0
    3840:	ldr	r3, [r3]
    3844:	mov	r0, r3
    3848:	sub	sp, fp, #4
    384c:	ldr	fp, [sp]
    3850:	add	sp, sp, #4
    3854:	pop	{pc}		; (ldr pc, [sp], #4)

00003858 <MyGame_Example_Monster_mana>:
    3858:	str	fp, [sp, #-8]!
    385c:	str	lr, [sp, #4]
    3860:	add	fp, sp, #4
    3864:	sub	sp, sp, #16
    3868:	str	r0, [fp, #-16]
    386c:	mov	r3, #0
    3870:	strh	r3, [fp, #-6]
    3874:	ldr	r3, [fp, #-16]
    3878:	cmp	r3, #0
    387c:	bne	38a0 <MyGame_Example_Monster_mana+0x48>
    3880:	movw	r3, #0
    3884:	movt	r3, #0
    3888:	movw	r2, #698	; 0x2ba
    388c:	movw	r1, #0
    3890:	movt	r1, #0
    3894:	movw	r0, #0
    3898:	movt	r0, #0
    389c:	bl	0 <__assert_fail>
    38a0:	mov	r3, #1
    38a4:	strh	r3, [fp, #-8]
    38a8:	ldr	r0, [fp, #-16]
    38ac:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    38b0:	mov	r3, r0
    38b4:	rsb	r3, r3, #0
    38b8:	ldr	r2, [fp, #-16]
    38bc:	add	r3, r2, r3
    38c0:	str	r3, [fp, #-12]
    38c4:	ldr	r0, [fp, #-12]
    38c8:	bl	848 <__flatbuffers_voffset_read_from_pe>
    38cc:	mov	r3, r0
    38d0:	mov	r2, r3
    38d4:	ldrh	r3, [fp, #-8]
    38d8:	add	r3, r3, #3
    38dc:	lsl	r3, r3, #1
    38e0:	cmp	r2, r3
    38e4:	bcc	390c <MyGame_Example_Monster_mana+0xb4>
    38e8:	ldrh	r3, [fp, #-8]
    38ec:	add	r3, r3, #2
    38f0:	lsl	r3, r3, #1
    38f4:	ldr	r2, [fp, #-12]
    38f8:	add	r3, r2, r3
    38fc:	mov	r0, r3
    3900:	bl	848 <__flatbuffers_voffset_read_from_pe>
    3904:	mov	r3, r0
    3908:	strh	r3, [fp, #-6]
    390c:	ldrh	r3, [fp, #-6]
    3910:	cmp	r3, #0
    3914:	beq	3934 <MyGame_Example_Monster_mana+0xdc>
    3918:	ldrh	r3, [fp, #-6]
    391c:	ldr	r2, [fp, #-16]
    3920:	add	r3, r2, r3
    3924:	mov	r0, r3
    3928:	bl	310 <flatbuffers_int16_read_from_pe>
    392c:	mov	r3, r0
    3930:	b	3938 <MyGame_Example_Monster_mana+0xe0>
    3934:	mov	r3, #150	; 0x96
    3938:	mov	r0, r3
    393c:	sub	sp, fp, #4
    3940:	ldr	fp, [sp]
    3944:	add	sp, sp, #4
    3948:	pop	{pc}		; (ldr pc, [sp], #4)

0000394c <MyGame_Example_Monster_mana_is_present>:
    394c:	str	fp, [sp, #-8]!
    3950:	str	lr, [sp, #4]
    3954:	add	fp, sp, #4
    3958:	sub	sp, sp, #16
    395c:	str	r0, [fp, #-16]
    3960:	mov	r3, #0
    3964:	strh	r3, [fp, #-6]
    3968:	ldr	r3, [fp, #-16]
    396c:	cmp	r3, #0
    3970:	bne	3994 <MyGame_Example_Monster_mana_is_present+0x48>
    3974:	movw	r3, #0
    3978:	movt	r3, #0
    397c:	movw	r2, #698	; 0x2ba
    3980:	movw	r1, #0
    3984:	movt	r1, #0
    3988:	movw	r0, #0
    398c:	movt	r0, #0
    3990:	bl	0 <__assert_fail>
    3994:	mov	r3, #1
    3998:	strh	r3, [fp, #-8]
    399c:	ldr	r0, [fp, #-16]
    39a0:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    39a4:	mov	r3, r0
    39a8:	rsb	r3, r3, #0
    39ac:	ldr	r2, [fp, #-16]
    39b0:	add	r3, r2, r3
    39b4:	str	r3, [fp, #-12]
    39b8:	ldr	r0, [fp, #-12]
    39bc:	bl	848 <__flatbuffers_voffset_read_from_pe>
    39c0:	mov	r3, r0
    39c4:	mov	r2, r3
    39c8:	ldrh	r3, [fp, #-8]
    39cc:	add	r3, r3, #3
    39d0:	lsl	r3, r3, #1
    39d4:	cmp	r2, r3
    39d8:	bcc	3a00 <MyGame_Example_Monster_mana_is_present+0xb4>
    39dc:	ldrh	r3, [fp, #-8]
    39e0:	add	r3, r3, #2
    39e4:	lsl	r3, r3, #1
    39e8:	ldr	r2, [fp, #-12]
    39ec:	add	r3, r2, r3
    39f0:	mov	r0, r3
    39f4:	bl	848 <__flatbuffers_voffset_read_from_pe>
    39f8:	mov	r3, r0
    39fc:	strh	r3, [fp, #-6]
    3a00:	ldrh	r3, [fp, #-6]
    3a04:	cmp	r3, #0
    3a08:	movne	r3, #1
    3a0c:	moveq	r3, #0
    3a10:	uxtb	r3, r3
    3a14:	mov	r0, r3
    3a18:	sub	sp, fp, #4
    3a1c:	ldr	fp, [sp]
    3a20:	add	sp, sp, #4
    3a24:	pop	{pc}		; (ldr pc, [sp], #4)

00003a28 <MyGame_Example_Monster_name>:
    3a28:	str	fp, [sp, #-8]!
    3a2c:	str	lr, [sp, #4]
    3a30:	add	fp, sp, #4
    3a34:	sub	sp, sp, #24
    3a38:	str	r0, [fp, #-24]	; 0xffffffe8
    3a3c:	mov	r3, #0
    3a40:	strh	r3, [fp, #-6]
    3a44:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3a48:	cmp	r3, #0
    3a4c:	bne	3a70 <MyGame_Example_Monster_name+0x48>
    3a50:	movw	r3, #0
    3a54:	movt	r3, #0
    3a58:	movw	r2, #699	; 0x2bb
    3a5c:	movw	r1, #0
    3a60:	movt	r1, #0
    3a64:	movw	r0, #0
    3a68:	movt	r0, #0
    3a6c:	bl	0 <__assert_fail>
    3a70:	mov	r3, #3
    3a74:	strh	r3, [fp, #-8]
    3a78:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3a7c:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    3a80:	mov	r3, r0
    3a84:	rsb	r3, r3, #0
    3a88:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3a8c:	add	r3, r2, r3
    3a90:	str	r3, [fp, #-12]
    3a94:	ldr	r0, [fp, #-12]
    3a98:	bl	848 <__flatbuffers_voffset_read_from_pe>
    3a9c:	mov	r3, r0
    3aa0:	mov	r2, r3
    3aa4:	ldrh	r3, [fp, #-8]
    3aa8:	add	r3, r3, #3
    3aac:	lsl	r3, r3, #1
    3ab0:	cmp	r2, r3
    3ab4:	bcc	3adc <MyGame_Example_Monster_name+0xb4>
    3ab8:	ldrh	r3, [fp, #-8]
    3abc:	add	r3, r3, #2
    3ac0:	lsl	r3, r3, #1
    3ac4:	ldr	r2, [fp, #-12]
    3ac8:	add	r3, r2, r3
    3acc:	mov	r0, r3
    3ad0:	bl	848 <__flatbuffers_voffset_read_from_pe>
    3ad4:	mov	r3, r0
    3ad8:	strh	r3, [fp, #-6]
    3adc:	ldrh	r3, [fp, #-6]
    3ae0:	cmp	r3, #0
    3ae4:	beq	3b14 <MyGame_Example_Monster_name+0xec>
    3ae8:	ldrh	r3, [fp, #-6]
    3aec:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3af0:	add	r3, r2, r3
    3af4:	str	r3, [fp, #-16]
    3af8:	ldr	r0, [fp, #-16]
    3afc:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    3b00:	mov	r3, r0
    3b04:	add	r3, r3, #4
    3b08:	ldr	r2, [fp, #-16]
    3b0c:	add	r3, r2, r3
    3b10:	b	3b34 <MyGame_Example_Monster_name+0x10c>
    3b14:	movw	r3, #0
    3b18:	movt	r3, #0
    3b1c:	movw	r2, #699	; 0x2bb
    3b20:	movw	r1, #0
    3b24:	movt	r1, #0
    3b28:	movw	r0, #0
    3b2c:	movt	r0, #0
    3b30:	bl	0 <__assert_fail>
    3b34:	mov	r0, r3
    3b38:	sub	sp, fp, #4
    3b3c:	ldr	fp, [sp]
    3b40:	add	sp, sp, #4
    3b44:	pop	{pc}		; (ldr pc, [sp], #4)

00003b48 <MyGame_Example_Monster_vec_scan_by_name>:
    3b48:	str	fp, [sp, #-8]!
    3b4c:	str	lr, [sp, #4]
    3b50:	add	fp, sp, #4
    3b54:	sub	sp, sp, #16
    3b58:	str	r0, [fp, #-16]
    3b5c:	str	r1, [fp, #-20]	; 0xffffffec
    3b60:	mov	r3, #0
    3b64:	str	r3, [fp, #-8]
    3b68:	b	3bb8 <MyGame_Example_Monster_vec_scan_by_name+0x70>
    3b6c:	ldr	r1, [fp, #-8]
    3b70:	ldr	r0, [fp, #-16]
    3b74:	bl	3050 <MyGame_Example_Monster_vec_at>
    3b78:	mov	r3, r0
    3b7c:	mov	r0, r3
    3b80:	bl	3a28 <MyGame_Example_Monster_name>
    3b84:	str	r0, [fp, #-12]
    3b88:	mov	r2, #0
    3b8c:	ldr	r1, [fp, #-20]	; 0xffffffec
    3b90:	ldr	r0, [fp, #-12]
    3b94:	bl	e60 <__flatbuffers_string_cmp>
    3b98:	mov	r3, r0
    3b9c:	cmp	r3, #0
    3ba0:	bne	3bac <MyGame_Example_Monster_vec_scan_by_name+0x64>
    3ba4:	ldr	r3, [fp, #-8]
    3ba8:	b	3bdc <MyGame_Example_Monster_vec_scan_by_name+0x94>
    3bac:	ldr	r3, [fp, #-8]
    3bb0:	add	r3, r3, #1
    3bb4:	str	r3, [fp, #-8]
    3bb8:	ldr	r0, [fp, #-16]
    3bbc:	bl	3000 <MyGame_Example_Monster_vec_len>
    3bc0:	mov	r2, r0
    3bc4:	ldr	r3, [fp, #-8]
    3bc8:	cmp	r3, r2
    3bcc:	bcc	3b6c <MyGame_Example_Monster_vec_scan_by_name+0x24>
    3bd0:	movw	r3, #0
    3bd4:	movt	r3, #0
    3bd8:	ldr	r3, [r3]
    3bdc:	mov	r0, r3
    3be0:	sub	sp, fp, #4
    3be4:	ldr	fp, [sp]
    3be8:	add	sp, sp, #4
    3bec:	pop	{pc}		; (ldr pc, [sp], #4)

00003bf0 <MyGame_Example_Monster_vec_scan_n_by_name>:
    3bf0:	str	fp, [sp, #-8]!
    3bf4:	str	lr, [sp, #4]
    3bf8:	add	fp, sp, #4
    3bfc:	sub	sp, sp, #24
    3c00:	str	r0, [fp, #-16]
    3c04:	str	r1, [fp, #-20]	; 0xffffffec
    3c08:	str	r2, [fp, #-24]	; 0xffffffe8
    3c0c:	mov	r3, #0
    3c10:	str	r3, [fp, #-8]
    3c14:	b	3c68 <MyGame_Example_Monster_vec_scan_n_by_name+0x78>
    3c18:	ldr	r1, [fp, #-8]
    3c1c:	ldr	r0, [fp, #-16]
    3c20:	bl	3050 <MyGame_Example_Monster_vec_at>
    3c24:	mov	r3, r0
    3c28:	mov	r0, r3
    3c2c:	bl	3a28 <MyGame_Example_Monster_name>
    3c30:	str	r0, [fp, #-12]
    3c34:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3c38:	mov	r2, r3
    3c3c:	ldr	r1, [fp, #-20]	; 0xffffffec
    3c40:	ldr	r0, [fp, #-12]
    3c44:	bl	db8 <__flatbuffers_string_n_cmp>
    3c48:	mov	r3, r0
    3c4c:	cmp	r3, #0
    3c50:	bne	3c5c <MyGame_Example_Monster_vec_scan_n_by_name+0x6c>
    3c54:	ldr	r3, [fp, #-8]
    3c58:	b	3c8c <MyGame_Example_Monster_vec_scan_n_by_name+0x9c>
    3c5c:	ldr	r3, [fp, #-8]
    3c60:	add	r3, r3, #1
    3c64:	str	r3, [fp, #-8]
    3c68:	ldr	r0, [fp, #-16]
    3c6c:	bl	3000 <MyGame_Example_Monster_vec_len>
    3c70:	mov	r2, r0
    3c74:	ldr	r3, [fp, #-8]
    3c78:	cmp	r3, r2
    3c7c:	bcc	3c18 <MyGame_Example_Monster_vec_scan_n_by_name+0x28>
    3c80:	movw	r3, #0
    3c84:	movt	r3, #0
    3c88:	ldr	r3, [r3]
    3c8c:	mov	r0, r3
    3c90:	sub	sp, fp, #4
    3c94:	ldr	fp, [sp]
    3c98:	add	sp, sp, #4
    3c9c:	pop	{pc}		; (ldr pc, [sp], #4)

00003ca0 <MyGame_Example_Monster_vec_scan_ex_by_name>:
    3ca0:	str	fp, [sp, #-8]!
    3ca4:	str	lr, [sp, #4]
    3ca8:	add	fp, sp, #4
    3cac:	sub	sp, sp, #24
    3cb0:	str	r0, [fp, #-16]
    3cb4:	str	r1, [fp, #-20]	; 0xffffffec
    3cb8:	str	r2, [fp, #-24]	; 0xffffffe8
    3cbc:	str	r3, [fp, #-28]	; 0xffffffe4
    3cc0:	ldr	r3, [fp, #-20]	; 0xffffffec
    3cc4:	str	r3, [fp, #-8]
    3cc8:	b	3d18 <MyGame_Example_Monster_vec_scan_ex_by_name+0x78>
    3ccc:	ldr	r1, [fp, #-8]
    3cd0:	ldr	r0, [fp, #-16]
    3cd4:	bl	3050 <MyGame_Example_Monster_vec_at>
    3cd8:	mov	r3, r0
    3cdc:	mov	r0, r3
    3ce0:	bl	3a28 <MyGame_Example_Monster_name>
    3ce4:	str	r0, [fp, #-12]
    3ce8:	mov	r2, #0
    3cec:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3cf0:	ldr	r0, [fp, #-12]
    3cf4:	bl	e60 <__flatbuffers_string_cmp>
    3cf8:	mov	r3, r0
    3cfc:	cmp	r3, #0
    3d00:	bne	3d0c <MyGame_Example_Monster_vec_scan_ex_by_name+0x6c>
    3d04:	ldr	r3, [fp, #-8]
    3d08:	b	3d5c <MyGame_Example_Monster_vec_scan_ex_by_name+0xbc>
    3d0c:	ldr	r3, [fp, #-8]
    3d10:	add	r3, r3, #1
    3d14:	str	r3, [fp, #-8]
    3d18:	ldr	r0, [fp, #-16]
    3d1c:	bl	3000 <MyGame_Example_Monster_vec_len>
    3d20:	mov	r2, r0
    3d24:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3d28:	cmp	r3, r2
    3d2c:	bcc	3d40 <MyGame_Example_Monster_vec_scan_ex_by_name+0xa0>
    3d30:	ldr	r0, [fp, #-16]
    3d34:	bl	3000 <MyGame_Example_Monster_vec_len>
    3d38:	mov	r3, r0
    3d3c:	b	3d44 <MyGame_Example_Monster_vec_scan_ex_by_name+0xa4>
    3d40:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3d44:	ldr	r2, [fp, #-8]
    3d48:	cmp	r3, r2
    3d4c:	bhi	3ccc <MyGame_Example_Monster_vec_scan_ex_by_name+0x2c>
    3d50:	movw	r3, #0
    3d54:	movt	r3, #0
    3d58:	ldr	r3, [r3]
    3d5c:	mov	r0, r3
    3d60:	sub	sp, fp, #4
    3d64:	ldr	fp, [sp]
    3d68:	add	sp, sp, #4
    3d6c:	pop	{pc}		; (ldr pc, [sp], #4)

00003d70 <MyGame_Example_Monster_vec_scan_ex_n_by_name>:
    3d70:	str	fp, [sp, #-8]!
    3d74:	str	lr, [sp, #4]
    3d78:	add	fp, sp, #4
    3d7c:	sub	sp, sp, #24
    3d80:	str	r0, [fp, #-16]
    3d84:	str	r1, [fp, #-20]	; 0xffffffec
    3d88:	str	r2, [fp, #-24]	; 0xffffffe8
    3d8c:	str	r3, [fp, #-28]	; 0xffffffe4
    3d90:	ldr	r3, [fp, #-20]	; 0xffffffec
    3d94:	str	r3, [fp, #-8]
    3d98:	b	3dec <MyGame_Example_Monster_vec_scan_ex_n_by_name+0x7c>
    3d9c:	ldr	r1, [fp, #-8]
    3da0:	ldr	r0, [fp, #-16]
    3da4:	bl	3050 <MyGame_Example_Monster_vec_at>
    3da8:	mov	r3, r0
    3dac:	mov	r0, r3
    3db0:	bl	3a28 <MyGame_Example_Monster_name>
    3db4:	str	r0, [fp, #-12]
    3db8:	ldr	r3, [fp, #4]
    3dbc:	mov	r2, r3
    3dc0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3dc4:	ldr	r0, [fp, #-12]
    3dc8:	bl	db8 <__flatbuffers_string_n_cmp>
    3dcc:	mov	r3, r0
    3dd0:	cmp	r3, #0
    3dd4:	bne	3de0 <MyGame_Example_Monster_vec_scan_ex_n_by_name+0x70>
    3dd8:	ldr	r3, [fp, #-8]
    3ddc:	b	3e30 <MyGame_Example_Monster_vec_scan_ex_n_by_name+0xc0>
    3de0:	ldr	r3, [fp, #-8]
    3de4:	add	r3, r3, #1
    3de8:	str	r3, [fp, #-8]
    3dec:	ldr	r0, [fp, #-16]
    3df0:	bl	3000 <MyGame_Example_Monster_vec_len>
    3df4:	mov	r2, r0
    3df8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3dfc:	cmp	r3, r2
    3e00:	bcc	3e14 <MyGame_Example_Monster_vec_scan_ex_n_by_name+0xa4>
    3e04:	ldr	r0, [fp, #-16]
    3e08:	bl	3000 <MyGame_Example_Monster_vec_len>
    3e0c:	mov	r3, r0
    3e10:	b	3e18 <MyGame_Example_Monster_vec_scan_ex_n_by_name+0xa8>
    3e14:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3e18:	ldr	r2, [fp, #-8]
    3e1c:	cmp	r3, r2
    3e20:	bhi	3d9c <MyGame_Example_Monster_vec_scan_ex_n_by_name+0x2c>
    3e24:	movw	r3, #0
    3e28:	movt	r3, #0
    3e2c:	ldr	r3, [r3]
    3e30:	mov	r0, r3
    3e34:	sub	sp, fp, #4
    3e38:	ldr	fp, [sp]
    3e3c:	add	sp, sp, #4
    3e40:	pop	{pc}		; (ldr pc, [sp], #4)

00003e44 <MyGame_Example_Monster_vec_rscan_by_name>:
    3e44:	str	fp, [sp, #-8]!
    3e48:	str	lr, [sp, #4]
    3e4c:	add	fp, sp, #4
    3e50:	sub	sp, sp, #16
    3e54:	str	r0, [fp, #-16]
    3e58:	str	r1, [fp, #-20]	; 0xffffffec
    3e5c:	ldr	r0, [fp, #-16]
    3e60:	bl	3000 <MyGame_Example_Monster_vec_len>
    3e64:	str	r0, [fp, #-8]
    3e68:	b	3eac <MyGame_Example_Monster_vec_rscan_by_name+0x68>
    3e6c:	ldr	r1, [fp, #-8]
    3e70:	ldr	r0, [fp, #-16]
    3e74:	bl	3050 <MyGame_Example_Monster_vec_at>
    3e78:	mov	r3, r0
    3e7c:	mov	r0, r3
    3e80:	bl	3a28 <MyGame_Example_Monster_name>
    3e84:	str	r0, [fp, #-12]
    3e88:	mov	r2, #0
    3e8c:	ldr	r1, [fp, #-20]	; 0xffffffec
    3e90:	ldr	r0, [fp, #-12]
    3e94:	bl	e60 <__flatbuffers_string_cmp>
    3e98:	mov	r3, r0
    3e9c:	cmp	r3, #0
    3ea0:	bne	3eac <MyGame_Example_Monster_vec_rscan_by_name+0x68>
    3ea4:	ldr	r3, [fp, #-8]
    3ea8:	b	3ecc <MyGame_Example_Monster_vec_rscan_by_name+0x88>
    3eac:	ldr	r3, [fp, #-8]
    3eb0:	sub	r2, r3, #1
    3eb4:	str	r2, [fp, #-8]
    3eb8:	cmp	r3, #0
    3ebc:	bne	3e6c <MyGame_Example_Monster_vec_rscan_by_name+0x28>
    3ec0:	movw	r3, #0
    3ec4:	movt	r3, #0
    3ec8:	ldr	r3, [r3]
    3ecc:	mov	r0, r3
    3ed0:	sub	sp, fp, #4
    3ed4:	ldr	fp, [sp]
    3ed8:	add	sp, sp, #4
    3edc:	pop	{pc}		; (ldr pc, [sp], #4)

00003ee0 <MyGame_Example_Monster_vec_rscan_n_by_name>:
    3ee0:	str	fp, [sp, #-8]!
    3ee4:	str	lr, [sp, #4]
    3ee8:	add	fp, sp, #4
    3eec:	sub	sp, sp, #24
    3ef0:	str	r0, [fp, #-16]
    3ef4:	str	r1, [fp, #-20]	; 0xffffffec
    3ef8:	str	r2, [fp, #-24]	; 0xffffffe8
    3efc:	ldr	r0, [fp, #-16]
    3f00:	bl	3000 <MyGame_Example_Monster_vec_len>
    3f04:	str	r0, [fp, #-8]
    3f08:	b	3f50 <MyGame_Example_Monster_vec_rscan_n_by_name+0x70>
    3f0c:	ldr	r1, [fp, #-8]
    3f10:	ldr	r0, [fp, #-16]
    3f14:	bl	3050 <MyGame_Example_Monster_vec_at>
    3f18:	mov	r3, r0
    3f1c:	mov	r0, r3
    3f20:	bl	3a28 <MyGame_Example_Monster_name>
    3f24:	str	r0, [fp, #-12]
    3f28:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3f2c:	mov	r2, r3
    3f30:	ldr	r1, [fp, #-20]	; 0xffffffec
    3f34:	ldr	r0, [fp, #-12]
    3f38:	bl	db8 <__flatbuffers_string_n_cmp>
    3f3c:	mov	r3, r0
    3f40:	cmp	r3, #0
    3f44:	bne	3f50 <MyGame_Example_Monster_vec_rscan_n_by_name+0x70>
    3f48:	ldr	r3, [fp, #-8]
    3f4c:	b	3f70 <MyGame_Example_Monster_vec_rscan_n_by_name+0x90>
    3f50:	ldr	r3, [fp, #-8]
    3f54:	sub	r2, r3, #1
    3f58:	str	r2, [fp, #-8]
    3f5c:	cmp	r3, #0
    3f60:	bne	3f0c <MyGame_Example_Monster_vec_rscan_n_by_name+0x2c>
    3f64:	movw	r3, #0
    3f68:	movt	r3, #0
    3f6c:	ldr	r3, [r3]
    3f70:	mov	r0, r3
    3f74:	sub	sp, fp, #4
    3f78:	ldr	fp, [sp]
    3f7c:	add	sp, sp, #4
    3f80:	pop	{pc}		; (ldr pc, [sp], #4)

00003f84 <MyGame_Example_Monster_vec_rscan_ex_by_name>:
    3f84:	str	fp, [sp, #-8]!
    3f88:	str	lr, [sp, #4]
    3f8c:	add	fp, sp, #4
    3f90:	sub	sp, sp, #24
    3f94:	str	r0, [fp, #-16]
    3f98:	str	r1, [fp, #-20]	; 0xffffffec
    3f9c:	str	r2, [fp, #-24]	; 0xffffffe8
    3fa0:	str	r3, [fp, #-28]	; 0xffffffe4
    3fa4:	ldr	r0, [fp, #-16]
    3fa8:	bl	3000 <MyGame_Example_Monster_vec_len>
    3fac:	mov	r2, r0
    3fb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3fb4:	cmp	r3, r2
    3fb8:	bcc	3fcc <MyGame_Example_Monster_vec_rscan_ex_by_name+0x48>
    3fbc:	ldr	r0, [fp, #-16]
    3fc0:	bl	3000 <MyGame_Example_Monster_vec_len>
    3fc4:	mov	r3, r0
    3fc8:	b	3fd0 <MyGame_Example_Monster_vec_rscan_ex_by_name+0x4c>
    3fcc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3fd0:	str	r3, [fp, #-8]
    3fd4:	b	4018 <MyGame_Example_Monster_vec_rscan_ex_by_name+0x94>
    3fd8:	ldr	r1, [fp, #-8]
    3fdc:	ldr	r0, [fp, #-16]
    3fe0:	bl	3050 <MyGame_Example_Monster_vec_at>
    3fe4:	mov	r3, r0
    3fe8:	mov	r0, r3
    3fec:	bl	3a28 <MyGame_Example_Monster_name>
    3ff0:	str	r0, [fp, #-12]
    3ff4:	mov	r2, #0
    3ff8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3ffc:	ldr	r0, [fp, #-12]
    4000:	bl	e60 <__flatbuffers_string_cmp>
    4004:	mov	r3, r0
    4008:	cmp	r3, #0
    400c:	bne	4018 <MyGame_Example_Monster_vec_rscan_ex_by_name+0x94>
    4010:	ldr	r3, [fp, #-8]
    4014:	b	403c <MyGame_Example_Monster_vec_rscan_ex_by_name+0xb8>
    4018:	ldr	r3, [fp, #-8]
    401c:	sub	r2, r3, #1
    4020:	str	r2, [fp, #-8]
    4024:	ldr	r2, [fp, #-20]	; 0xffffffec
    4028:	cmp	r2, r3
    402c:	bcc	3fd8 <MyGame_Example_Monster_vec_rscan_ex_by_name+0x54>
    4030:	movw	r3, #0
    4034:	movt	r3, #0
    4038:	ldr	r3, [r3]
    403c:	mov	r0, r3
    4040:	sub	sp, fp, #4
    4044:	ldr	fp, [sp]
    4048:	add	sp, sp, #4
    404c:	pop	{pc}		; (ldr pc, [sp], #4)

00004050 <MyGame_Example_Monster_vec_rscan_ex_n_by_name>:
    4050:	str	fp, [sp, #-8]!
    4054:	str	lr, [sp, #4]
    4058:	add	fp, sp, #4
    405c:	sub	sp, sp, #24
    4060:	str	r0, [fp, #-16]
    4064:	str	r1, [fp, #-20]	; 0xffffffec
    4068:	str	r2, [fp, #-24]	; 0xffffffe8
    406c:	str	r3, [fp, #-28]	; 0xffffffe4
    4070:	ldr	r0, [fp, #-16]
    4074:	bl	3000 <MyGame_Example_Monster_vec_len>
    4078:	mov	r2, r0
    407c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4080:	cmp	r3, r2
    4084:	bcc	4098 <MyGame_Example_Monster_vec_rscan_ex_n_by_name+0x48>
    4088:	ldr	r0, [fp, #-16]
    408c:	bl	3000 <MyGame_Example_Monster_vec_len>
    4090:	mov	r3, r0
    4094:	b	409c <MyGame_Example_Monster_vec_rscan_ex_n_by_name+0x4c>
    4098:	ldr	r3, [fp, #-24]	; 0xffffffe8
    409c:	str	r3, [fp, #-8]
    40a0:	b	40e8 <MyGame_Example_Monster_vec_rscan_ex_n_by_name+0x98>
    40a4:	ldr	r1, [fp, #-8]
    40a8:	ldr	r0, [fp, #-16]
    40ac:	bl	3050 <MyGame_Example_Monster_vec_at>
    40b0:	mov	r3, r0
    40b4:	mov	r0, r3
    40b8:	bl	3a28 <MyGame_Example_Monster_name>
    40bc:	str	r0, [fp, #-12]
    40c0:	ldr	r3, [fp, #4]
    40c4:	mov	r2, r3
    40c8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    40cc:	ldr	r0, [fp, #-12]
    40d0:	bl	db8 <__flatbuffers_string_n_cmp>
    40d4:	mov	r3, r0
    40d8:	cmp	r3, #0
    40dc:	bne	40e8 <MyGame_Example_Monster_vec_rscan_ex_n_by_name+0x98>
    40e0:	ldr	r3, [fp, #-8]
    40e4:	b	410c <MyGame_Example_Monster_vec_rscan_ex_n_by_name+0xbc>
    40e8:	ldr	r3, [fp, #-8]
    40ec:	sub	r2, r3, #1
    40f0:	str	r2, [fp, #-8]
    40f4:	ldr	r2, [fp, #-20]	; 0xffffffec
    40f8:	cmp	r2, r3
    40fc:	bcc	40a4 <MyGame_Example_Monster_vec_rscan_ex_n_by_name+0x54>
    4100:	movw	r3, #0
    4104:	movt	r3, #0
    4108:	ldr	r3, [r3]
    410c:	mov	r0, r3
    4110:	sub	sp, fp, #4
    4114:	ldr	fp, [sp]
    4118:	add	sp, sp, #4
    411c:	pop	{pc}		; (ldr pc, [sp], #4)

00004120 <MyGame_Example_Monster_vec_find_by_name>:
    4120:	str	fp, [sp, #-8]!
    4124:	str	lr, [sp, #4]
    4128:	add	fp, sp, #4
    412c:	sub	sp, sp, #24
    4130:	str	r0, [fp, #-24]	; 0xffffffe8
    4134:	str	r1, [fp, #-28]	; 0xffffffe4
    4138:	mov	r3, #0
    413c:	str	r3, [fp, #-8]
    4140:	ldr	r0, [fp, #-24]	; 0xffffffe8
    4144:	bl	3000 <MyGame_Example_Monster_vec_len>
    4148:	str	r0, [fp, #-12]
    414c:	ldr	r3, [fp, #-12]
    4150:	cmp	r3, #0
    4154:	bne	4168 <MyGame_Example_Monster_vec_find_by_name+0x48>
    4158:	movw	r3, #0
    415c:	movt	r3, #0
    4160:	ldr	r3, [r3]
    4164:	b	4250 <MyGame_Example_Monster_vec_find_by_name+0x130>
    4168:	ldr	r3, [fp, #-12]
    416c:	sub	r3, r3, #1
    4170:	str	r3, [fp, #-12]
    4174:	b	41e4 <MyGame_Example_Monster_vec_find_by_name+0xc4>
    4178:	ldr	r2, [fp, #-12]
    417c:	ldr	r3, [fp, #-8]
    4180:	sub	r3, r2, r3
    4184:	lsr	r3, r3, #1
    4188:	ldr	r2, [fp, #-8]
    418c:	add	r3, r2, r3
    4190:	str	r3, [fp, #-16]
    4194:	ldr	r1, [fp, #-16]
    4198:	ldr	r0, [fp, #-24]	; 0xffffffe8
    419c:	bl	3050 <MyGame_Example_Monster_vec_at>
    41a0:	mov	r3, r0
    41a4:	mov	r0, r3
    41a8:	bl	3a28 <MyGame_Example_Monster_name>
    41ac:	str	r0, [fp, #-20]	; 0xffffffec
    41b0:	mov	r2, #0
    41b4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    41b8:	ldr	r0, [fp, #-20]	; 0xffffffec
    41bc:	bl	e60 <__flatbuffers_string_cmp>
    41c0:	mov	r3, r0
    41c4:	cmp	r3, #0
    41c8:	bge	41dc <MyGame_Example_Monster_vec_find_by_name+0xbc>
    41cc:	ldr	r3, [fp, #-16]
    41d0:	add	r3, r3, #1
    41d4:	str	r3, [fp, #-8]
    41d8:	b	41e4 <MyGame_Example_Monster_vec_find_by_name+0xc4>
    41dc:	ldr	r3, [fp, #-16]
    41e0:	str	r3, [fp, #-12]
    41e4:	ldr	r2, [fp, #-8]
    41e8:	ldr	r3, [fp, #-12]
    41ec:	cmp	r2, r3
    41f0:	bcc	4178 <MyGame_Example_Monster_vec_find_by_name+0x58>
    41f4:	ldr	r2, [fp, #-8]
    41f8:	ldr	r3, [fp, #-12]
    41fc:	cmp	r2, r3
    4200:	bne	4244 <MyGame_Example_Monster_vec_find_by_name+0x124>
    4204:	ldr	r1, [fp, #-8]
    4208:	ldr	r0, [fp, #-24]	; 0xffffffe8
    420c:	bl	3050 <MyGame_Example_Monster_vec_at>
    4210:	mov	r3, r0
    4214:	mov	r0, r3
    4218:	bl	3a28 <MyGame_Example_Monster_name>
    421c:	str	r0, [fp, #-20]	; 0xffffffec
    4220:	mov	r2, #0
    4224:	ldr	r1, [fp, #-28]	; 0xffffffe4
    4228:	ldr	r0, [fp, #-20]	; 0xffffffec
    422c:	bl	e60 <__flatbuffers_string_cmp>
    4230:	mov	r3, r0
    4234:	cmp	r3, #0
    4238:	bne	4244 <MyGame_Example_Monster_vec_find_by_name+0x124>
    423c:	ldr	r3, [fp, #-8]
    4240:	b	4250 <MyGame_Example_Monster_vec_find_by_name+0x130>
    4244:	movw	r3, #0
    4248:	movt	r3, #0
    424c:	ldr	r3, [r3]
    4250:	mov	r0, r3
    4254:	sub	sp, fp, #4
    4258:	ldr	fp, [sp]
    425c:	add	sp, sp, #4
    4260:	pop	{pc}		; (ldr pc, [sp], #4)

00004264 <MyGame_Example_Monster_vec_find_n_by_name>:
    4264:	str	fp, [sp, #-8]!
    4268:	str	lr, [sp, #4]
    426c:	add	fp, sp, #4
    4270:	sub	sp, sp, #32
    4274:	str	r0, [fp, #-24]	; 0xffffffe8
    4278:	str	r1, [fp, #-28]	; 0xffffffe4
    427c:	str	r2, [fp, #-32]	; 0xffffffe0
    4280:	mov	r3, #0
    4284:	str	r3, [fp, #-8]
    4288:	ldr	r0, [fp, #-24]	; 0xffffffe8
    428c:	bl	3000 <MyGame_Example_Monster_vec_len>
    4290:	str	r0, [fp, #-12]
    4294:	ldr	r3, [fp, #-12]
    4298:	cmp	r3, #0
    429c:	bne	42b0 <MyGame_Example_Monster_vec_find_n_by_name+0x4c>
    42a0:	movw	r3, #0
    42a4:	movt	r3, #0
    42a8:	ldr	r3, [r3]
    42ac:	b	43a0 <MyGame_Example_Monster_vec_find_n_by_name+0x13c>
    42b0:	ldr	r3, [fp, #-12]
    42b4:	sub	r3, r3, #1
    42b8:	str	r3, [fp, #-12]
    42bc:	b	4330 <MyGame_Example_Monster_vec_find_n_by_name+0xcc>
    42c0:	ldr	r2, [fp, #-12]
    42c4:	ldr	r3, [fp, #-8]
    42c8:	sub	r3, r2, r3
    42cc:	lsr	r3, r3, #1
    42d0:	ldr	r2, [fp, #-8]
    42d4:	add	r3, r2, r3
    42d8:	str	r3, [fp, #-16]
    42dc:	ldr	r1, [fp, #-16]
    42e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    42e4:	bl	3050 <MyGame_Example_Monster_vec_at>
    42e8:	mov	r3, r0
    42ec:	mov	r0, r3
    42f0:	bl	3a28 <MyGame_Example_Monster_name>
    42f4:	str	r0, [fp, #-20]	; 0xffffffec
    42f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    42fc:	mov	r2, r3
    4300:	ldr	r1, [fp, #-28]	; 0xffffffe4
    4304:	ldr	r0, [fp, #-20]	; 0xffffffec
    4308:	bl	db8 <__flatbuffers_string_n_cmp>
    430c:	mov	r3, r0
    4310:	cmp	r3, #0
    4314:	bge	4328 <MyGame_Example_Monster_vec_find_n_by_name+0xc4>
    4318:	ldr	r3, [fp, #-16]
    431c:	add	r3, r3, #1
    4320:	str	r3, [fp, #-8]
    4324:	b	4330 <MyGame_Example_Monster_vec_find_n_by_name+0xcc>
    4328:	ldr	r3, [fp, #-16]
    432c:	str	r3, [fp, #-12]
    4330:	ldr	r2, [fp, #-8]
    4334:	ldr	r3, [fp, #-12]
    4338:	cmp	r2, r3
    433c:	bcc	42c0 <MyGame_Example_Monster_vec_find_n_by_name+0x5c>
    4340:	ldr	r2, [fp, #-8]
    4344:	ldr	r3, [fp, #-12]
    4348:	cmp	r2, r3
    434c:	bne	4394 <MyGame_Example_Monster_vec_find_n_by_name+0x130>
    4350:	ldr	r1, [fp, #-8]
    4354:	ldr	r0, [fp, #-24]	; 0xffffffe8
    4358:	bl	3050 <MyGame_Example_Monster_vec_at>
    435c:	mov	r3, r0
    4360:	mov	r0, r3
    4364:	bl	3a28 <MyGame_Example_Monster_name>
    4368:	str	r0, [fp, #-20]	; 0xffffffec
    436c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    4370:	mov	r2, r3
    4374:	ldr	r1, [fp, #-28]	; 0xffffffe4
    4378:	ldr	r0, [fp, #-20]	; 0xffffffec
    437c:	bl	db8 <__flatbuffers_string_n_cmp>
    4380:	mov	r3, r0
    4384:	cmp	r3, #0
    4388:	bne	4394 <MyGame_Example_Monster_vec_find_n_by_name+0x130>
    438c:	ldr	r3, [fp, #-8]
    4390:	b	43a0 <MyGame_Example_Monster_vec_find_n_by_name+0x13c>
    4394:	movw	r3, #0
    4398:	movt	r3, #0
    439c:	ldr	r3, [r3]
    43a0:	mov	r0, r3
    43a4:	sub	sp, fp, #4
    43a8:	ldr	fp, [sp]
    43ac:	add	sp, sp, #4
    43b0:	pop	{pc}		; (ldr pc, [sp], #4)

000043b4 <__MyGame_Example_Monster_sort_by_name__heap_sift_down>:
    43b4:	str	fp, [sp, #-8]!
    43b8:	str	lr, [sp, #4]
    43bc:	add	fp, sp, #4
    43c0:	sub	sp, sp, #48	; 0x30
    43c4:	str	r0, [fp, #-40]	; 0xffffffd8
    43c8:	str	r1, [fp, #-44]	; 0xffffffd4
    43cc:	str	r2, [fp, #-48]	; 0xffffffd0
    43d0:	ldr	r3, [fp, #-44]	; 0xffffffd4
    43d4:	str	r3, [fp, #-12]
    43d8:	b	4570 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x1bc>
    43dc:	ldr	r3, [fp, #-12]
    43e0:	lsl	r3, r3, #1
    43e4:	str	r3, [fp, #-8]
    43e8:	ldr	r2, [fp, #-8]
    43ec:	ldr	r3, [fp, #-48]	; 0xffffffd0
    43f0:	cmp	r2, r3
    43f4:	bcs	446c <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0xb8>
    43f8:	ldr	r1, [fp, #-8]
    43fc:	ldr	r0, [fp, #-40]	; 0xffffffd8
    4400:	bl	3050 <MyGame_Example_Monster_vec_at>
    4404:	mov	r3, r0
    4408:	mov	r0, r3
    440c:	bl	3a28 <MyGame_Example_Monster_name>
    4410:	str	r0, [fp, #-16]
    4414:	ldr	r3, [fp, #-8]
    4418:	add	r3, r3, #1
    441c:	mov	r1, r3
    4420:	ldr	r0, [fp, #-40]	; 0xffffffd8
    4424:	bl	3050 <MyGame_Example_Monster_vec_at>
    4428:	mov	r3, r0
    442c:	mov	r0, r3
    4430:	bl	3a28 <MyGame_Example_Monster_name>
    4434:	str	r0, [fp, #-20]	; 0xffffffec
    4438:	ldr	r0, [fp, #-20]	; 0xffffffec
    443c:	bl	ae4 <flatbuffers_string_len>
    4440:	mov	r3, r0
    4444:	mov	r2, r3
    4448:	ldr	r1, [fp, #-20]	; 0xffffffec
    444c:	ldr	r0, [fp, #-16]
    4450:	bl	db8 <__flatbuffers_string_n_cmp>
    4454:	mov	r3, r0
    4458:	cmp	r3, #0
    445c:	bge	446c <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0xb8>
    4460:	ldr	r3, [fp, #-8]
    4464:	add	r3, r3, #1
    4468:	str	r3, [fp, #-8]
    446c:	ldr	r1, [fp, #-12]
    4470:	ldr	r0, [fp, #-40]	; 0xffffffd8
    4474:	bl	3050 <MyGame_Example_Monster_vec_at>
    4478:	mov	r3, r0
    447c:	mov	r0, r3
    4480:	bl	3a28 <MyGame_Example_Monster_name>
    4484:	str	r0, [fp, #-24]	; 0xffffffe8
    4488:	ldr	r1, [fp, #-8]
    448c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    4490:	bl	3050 <MyGame_Example_Monster_vec_at>
    4494:	mov	r3, r0
    4498:	mov	r0, r3
    449c:	bl	3a28 <MyGame_Example_Monster_name>
    44a0:	str	r0, [fp, #-16]
    44a4:	ldr	r0, [fp, #-16]
    44a8:	bl	ae4 <flatbuffers_string_len>
    44ac:	mov	r3, r0
    44b0:	mov	r2, r3
    44b4:	ldr	r1, [fp, #-16]
    44b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    44bc:	bl	db8 <__flatbuffers_string_n_cmp>
    44c0:	mov	r3, r0
    44c4:	cmp	r3, #0
    44c8:	bge	4588 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x1d4>
    44cc:	ldr	r2, [fp, #-12]
    44d0:	ldr	r3, [fp, #-8]
    44d4:	sub	r3, r2, r3
    44d8:	lsl	r3, r3, #2
    44dc:	str	r3, [fp, #-28]	; 0xffffffe4
    44e0:	ldr	r3, [fp, #-8]
    44e4:	lsl	r3, r3, #2
    44e8:	ldr	r2, [fp, #-40]	; 0xffffffd8
    44ec:	add	r3, r2, r3
    44f0:	mov	r0, r3
    44f4:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    44f8:	mov	r2, r0
    44fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4500:	sub	r3, r2, r3
    4504:	str	r3, [fp, #-32]	; 0xffffffe0
    4508:	ldr	r3, [fp, #-12]
    450c:	lsl	r3, r3, #2
    4510:	ldr	r2, [fp, #-40]	; 0xffffffd8
    4514:	add	r3, r2, r3
    4518:	mov	r0, r3
    451c:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    4520:	mov	r2, r0
    4524:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4528:	add	r3, r3, r2
    452c:	str	r3, [fp, #-36]	; 0xffffffdc
    4530:	ldr	r3, [fp, #-12]
    4534:	lsl	r3, r3, #2
    4538:	ldr	r2, [fp, #-40]	; 0xffffffd8
    453c:	add	r3, r2, r3
    4540:	ldr	r1, [fp, #-32]	; 0xffffffe0
    4544:	mov	r0, r3
    4548:	bl	780 <__flatbuffers_uoffset_write_to_pe>
    454c:	ldr	r3, [fp, #-8]
    4550:	lsl	r3, r3, #2
    4554:	ldr	r2, [fp, #-40]	; 0xffffffd8
    4558:	add	r3, r2, r3
    455c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    4560:	mov	r0, r3
    4564:	bl	780 <__flatbuffers_uoffset_write_to_pe>
    4568:	ldr	r3, [fp, #-8]
    456c:	str	r3, [fp, #-12]
    4570:	ldr	r3, [fp, #-12]
    4574:	lsl	r3, r3, #1
    4578:	ldr	r2, [fp, #-48]	; 0xffffffd0
    457c:	cmp	r2, r3
    4580:	bcs	43dc <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x28>
    4584:	b	458c <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x1d8>
    4588:	nop	{0}
    458c:	sub	sp, fp, #4
    4590:	ldr	fp, [sp]
    4594:	add	sp, sp, #4
    4598:	pop	{pc}		; (ldr pc, [sp], #4)

0000459c <__MyGame_Example_Monster_sort_by_name__heap_sort>:
    459c:	str	fp, [sp, #-8]!
    45a0:	str	lr, [sp, #4]
    45a4:	add	fp, sp, #4
    45a8:	sub	sp, sp, #32
    45ac:	str	r0, [fp, #-32]	; 0xffffffe0
    45b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    45b4:	bl	3000 <MyGame_Example_Monster_vec_len>
    45b8:	str	r0, [fp, #-16]
    45bc:	ldr	r3, [fp, #-16]
    45c0:	cmp	r3, #0
    45c4:	beq	46ac <__MyGame_Example_Monster_sort_by_name__heap_sort+0x110>
    45c8:	ldr	r3, [fp, #-16]
    45cc:	sub	r3, r3, #1
    45d0:	str	r3, [fp, #-12]
    45d4:	ldr	r3, [fp, #-16]
    45d8:	lsr	r3, r3, #1
    45dc:	str	r3, [fp, #-8]
    45e0:	ldr	r2, [fp, #-12]
    45e4:	ldr	r1, [fp, #-8]
    45e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    45ec:	bl	43b4 <__MyGame_Example_Monster_sort_by_name__heap_sift_down>
    45f0:	ldr	r3, [fp, #-8]
    45f4:	sub	r2, r3, #1
    45f8:	str	r2, [fp, #-8]
    45fc:	cmp	r3, #0
    4600:	bne	45e0 <__MyGame_Example_Monster_sort_by_name__heap_sort+0x44>
    4604:	b	469c <__MyGame_Example_Monster_sort_by_name__heap_sort+0x100>
    4608:	ldr	r3, [fp, #-12]
    460c:	lsl	r3, r3, #2
    4610:	rsb	r3, r3, #0
    4614:	str	r3, [fp, #-20]	; 0xffffffec
    4618:	ldr	r3, [fp, #-12]
    461c:	lsl	r3, r3, #2
    4620:	ldr	r2, [fp, #-32]	; 0xffffffe0
    4624:	add	r3, r2, r3
    4628:	mov	r0, r3
    462c:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    4630:	mov	r2, r0
    4634:	ldr	r3, [fp, #-20]	; 0xffffffec
    4638:	sub	r3, r2, r3
    463c:	str	r3, [fp, #-24]	; 0xffffffe8
    4640:	ldr	r0, [fp, #-32]	; 0xffffffe0
    4644:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    4648:	mov	r2, r0
    464c:	ldr	r3, [fp, #-20]	; 0xffffffec
    4650:	add	r3, r3, r2
    4654:	str	r3, [fp, #-28]	; 0xffffffe4
    4658:	ldr	r1, [fp, #-24]	; 0xffffffe8
    465c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    4660:	bl	780 <__flatbuffers_uoffset_write_to_pe>
    4664:	ldr	r3, [fp, #-12]
    4668:	lsl	r3, r3, #2
    466c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    4670:	add	r3, r2, r3
    4674:	ldr	r1, [fp, #-28]	; 0xffffffe4
    4678:	mov	r0, r3
    467c:	bl	780 <__flatbuffers_uoffset_write_to_pe>
    4680:	ldr	r3, [fp, #-12]
    4684:	sub	r3, r3, #1
    4688:	str	r3, [fp, #-12]
    468c:	ldr	r2, [fp, #-12]
    4690:	mov	r1, #0
    4694:	ldr	r0, [fp, #-32]	; 0xffffffe0
    4698:	bl	43b4 <__MyGame_Example_Monster_sort_by_name__heap_sift_down>
    469c:	ldr	r3, [fp, #-12]
    46a0:	cmp	r3, #0
    46a4:	bne	4608 <__MyGame_Example_Monster_sort_by_name__heap_sort+0x6c>
    46a8:	b	46b0 <__MyGame_Example_Monster_sort_by_name__heap_sort+0x114>
    46ac:	nop	{0}
    46b0:	sub	sp, fp, #4
    46b4:	ldr	fp, [sp]
    46b8:	add	sp, sp, #4
    46bc:	pop	{pc}		; (ldr pc, [sp], #4)

000046c0 <MyGame_Example_Monster_vec_sort_by_name>:
    46c0:	str	fp, [sp, #-8]!
    46c4:	str	lr, [sp, #4]
    46c8:	add	fp, sp, #4
    46cc:	sub	sp, sp, #8
    46d0:	str	r0, [fp, #-8]
    46d4:	ldr	r0, [fp, #-8]
    46d8:	bl	459c <__MyGame_Example_Monster_sort_by_name__heap_sort>
    46dc:	nop	{0}
    46e0:	sub	sp, fp, #4
    46e4:	ldr	fp, [sp]
    46e8:	add	sp, sp, #4
    46ec:	pop	{pc}		; (ldr pc, [sp], #4)

000046f0 <MyGame_Example_Monster_vec_find>:
    46f0:	str	fp, [sp, #-8]!
    46f4:	str	lr, [sp, #4]
    46f8:	add	fp, sp, #4
    46fc:	sub	sp, sp, #8
    4700:	str	r0, [fp, #-8]
    4704:	str	r1, [fp, #-12]
    4708:	ldr	r1, [fp, #-12]
    470c:	ldr	r0, [fp, #-8]
    4710:	bl	4120 <MyGame_Example_Monster_vec_find_by_name>
    4714:	mov	r3, r0
    4718:	mov	r0, r3
    471c:	sub	sp, fp, #4
    4720:	ldr	fp, [sp]
    4724:	add	sp, sp, #4
    4728:	pop	{pc}		; (ldr pc, [sp], #4)

0000472c <MyGame_Example_Monster_vec_find_n>:
    472c:	str	fp, [sp, #-8]!
    4730:	str	lr, [sp, #4]
    4734:	add	fp, sp, #4
    4738:	sub	sp, sp, #16
    473c:	str	r0, [fp, #-8]
    4740:	str	r1, [fp, #-12]
    4744:	str	r2, [fp, #-16]
    4748:	ldr	r2, [fp, #-16]
    474c:	ldr	r1, [fp, #-12]
    4750:	ldr	r0, [fp, #-8]
    4754:	bl	4264 <MyGame_Example_Monster_vec_find_n_by_name>
    4758:	mov	r3, r0
    475c:	mov	r0, r3
    4760:	sub	sp, fp, #4
    4764:	ldr	fp, [sp]
    4768:	add	sp, sp, #4
    476c:	pop	{pc}		; (ldr pc, [sp], #4)

00004770 <MyGame_Example_Monster_vec_scan>:
    4770:	str	fp, [sp, #-8]!
    4774:	str	lr, [sp, #4]
    4778:	add	fp, sp, #4
    477c:	sub	sp, sp, #8
    4780:	str	r0, [fp, #-8]
    4784:	str	r1, [fp, #-12]
    4788:	ldr	r1, [fp, #-12]
    478c:	ldr	r0, [fp, #-8]
    4790:	bl	3b48 <MyGame_Example_Monster_vec_scan_by_name>
    4794:	mov	r3, r0
    4798:	mov	r0, r3
    479c:	sub	sp, fp, #4
    47a0:	ldr	fp, [sp]
    47a4:	add	sp, sp, #4
    47a8:	pop	{pc}		; (ldr pc, [sp], #4)

000047ac <MyGame_Example_Monster_vec_scan_n>:
    47ac:	str	fp, [sp, #-8]!
    47b0:	str	lr, [sp, #4]
    47b4:	add	fp, sp, #4
    47b8:	sub	sp, sp, #16
    47bc:	str	r0, [fp, #-8]
    47c0:	str	r1, [fp, #-12]
    47c4:	str	r2, [fp, #-16]
    47c8:	ldr	r2, [fp, #-16]
    47cc:	ldr	r1, [fp, #-12]
    47d0:	ldr	r0, [fp, #-8]
    47d4:	bl	3bf0 <MyGame_Example_Monster_vec_scan_n_by_name>
    47d8:	mov	r3, r0
    47dc:	mov	r0, r3
    47e0:	sub	sp, fp, #4
    47e4:	ldr	fp, [sp]
    47e8:	add	sp, sp, #4
    47ec:	pop	{pc}		; (ldr pc, [sp], #4)

000047f0 <MyGame_Example_Monster_vec_scan_ex>:
    47f0:	str	fp, [sp, #-8]!
    47f4:	str	lr, [sp, #4]
    47f8:	add	fp, sp, #4
    47fc:	sub	sp, sp, #16
    4800:	str	r0, [fp, #-8]
    4804:	str	r1, [fp, #-12]
    4808:	str	r2, [fp, #-16]
    480c:	str	r3, [fp, #-20]	; 0xffffffec
    4810:	ldr	r3, [fp, #-20]	; 0xffffffec
    4814:	ldr	r2, [fp, #-16]
    4818:	ldr	r1, [fp, #-12]
    481c:	ldr	r0, [fp, #-8]
    4820:	bl	3ca0 <MyGame_Example_Monster_vec_scan_ex_by_name>
    4824:	mov	r3, r0
    4828:	mov	r0, r3
    482c:	sub	sp, fp, #4
    4830:	ldr	fp, [sp]
    4834:	add	sp, sp, #4
    4838:	pop	{pc}		; (ldr pc, [sp], #4)

0000483c <MyGame_Example_Monster_vec_rscan>:
    483c:	str	fp, [sp, #-8]!
    4840:	str	lr, [sp, #4]
    4844:	add	fp, sp, #4
    4848:	sub	sp, sp, #8
    484c:	str	r0, [fp, #-8]
    4850:	str	r1, [fp, #-12]
    4854:	ldr	r1, [fp, #-12]
    4858:	ldr	r0, [fp, #-8]
    485c:	bl	3e44 <MyGame_Example_Monster_vec_rscan_by_name>
    4860:	mov	r3, r0
    4864:	mov	r0, r3
    4868:	sub	sp, fp, #4
    486c:	ldr	fp, [sp]
    4870:	add	sp, sp, #4
    4874:	pop	{pc}		; (ldr pc, [sp], #4)

00004878 <MyGame_Example_Monster_vec_rscan_n>:
    4878:	str	fp, [sp, #-8]!
    487c:	str	lr, [sp, #4]
    4880:	add	fp, sp, #4
    4884:	sub	sp, sp, #16
    4888:	str	r0, [fp, #-8]
    488c:	str	r1, [fp, #-12]
    4890:	str	r2, [fp, #-16]
    4894:	ldr	r2, [fp, #-16]
    4898:	ldr	r1, [fp, #-12]
    489c:	ldr	r0, [fp, #-8]
    48a0:	bl	3ee0 <MyGame_Example_Monster_vec_rscan_n_by_name>
    48a4:	mov	r3, r0
    48a8:	mov	r0, r3
    48ac:	sub	sp, fp, #4
    48b0:	ldr	fp, [sp]
    48b4:	add	sp, sp, #4
    48b8:	pop	{pc}		; (ldr pc, [sp], #4)

000048bc <MyGame_Example_Monster_vec_rscan_ex>:
    48bc:	str	fp, [sp, #-8]!
    48c0:	str	lr, [sp, #4]
    48c4:	add	fp, sp, #4
    48c8:	sub	sp, sp, #16
    48cc:	str	r0, [fp, #-8]
    48d0:	str	r1, [fp, #-12]
    48d4:	str	r2, [fp, #-16]
    48d8:	str	r3, [fp, #-20]	; 0xffffffec
    48dc:	ldr	r3, [fp, #-20]	; 0xffffffec
    48e0:	ldr	r2, [fp, #-16]
    48e4:	ldr	r1, [fp, #-12]
    48e8:	ldr	r0, [fp, #-8]
    48ec:	bl	3f84 <MyGame_Example_Monster_vec_rscan_ex_by_name>
    48f0:	mov	r3, r0
    48f4:	mov	r0, r3
    48f8:	sub	sp, fp, #4
    48fc:	ldr	fp, [sp]
    4900:	add	sp, sp, #4
    4904:	pop	{pc}		; (ldr pc, [sp], #4)

00004908 <MyGame_Example_Monster_color>:
    4908:	str	fp, [sp, #-8]!
    490c:	str	lr, [sp, #4]
    4910:	add	fp, sp, #4
    4914:	sub	sp, sp, #16
    4918:	str	r0, [fp, #-16]
    491c:	mov	r3, #0
    4920:	strh	r3, [fp, #-6]
    4924:	ldr	r3, [fp, #-16]
    4928:	cmp	r3, #0
    492c:	bne	4950 <MyGame_Example_Monster_color+0x48>
    4930:	movw	r3, #0
    4934:	movt	r3, #0
    4938:	movw	r2, #705	; 0x2c1
    493c:	movw	r1, #0
    4940:	movt	r1, #0
    4944:	movw	r0, #0
    4948:	movt	r0, #0
    494c:	bl	0 <__assert_fail>
    4950:	mov	r3, #6
    4954:	strh	r3, [fp, #-8]
    4958:	ldr	r0, [fp, #-16]
    495c:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    4960:	mov	r3, r0
    4964:	rsb	r3, r3, #0
    4968:	ldr	r2, [fp, #-16]
    496c:	add	r3, r2, r3
    4970:	str	r3, [fp, #-12]
    4974:	ldr	r0, [fp, #-12]
    4978:	bl	848 <__flatbuffers_voffset_read_from_pe>
    497c:	mov	r3, r0
    4980:	mov	r2, r3
    4984:	ldrh	r3, [fp, #-8]
    4988:	add	r3, r3, #3
    498c:	lsl	r3, r3, #1
    4990:	cmp	r2, r3
    4994:	bcc	49bc <MyGame_Example_Monster_color+0xb4>
    4998:	ldrh	r3, [fp, #-8]
    499c:	add	r3, r3, #2
    49a0:	lsl	r3, r3, #1
    49a4:	ldr	r2, [fp, #-12]
    49a8:	add	r3, r2, r3
    49ac:	mov	r0, r3
    49b0:	bl	848 <__flatbuffers_voffset_read_from_pe>
    49b4:	mov	r3, r0
    49b8:	strh	r3, [fp, #-6]
    49bc:	ldrh	r3, [fp, #-6]
    49c0:	cmp	r3, #0
    49c4:	beq	49e4 <MyGame_Example_Monster_color+0xdc>
    49c8:	ldrh	r3, [fp, #-6]
    49cc:	ldr	r2, [fp, #-16]
    49d0:	add	r3, r2, r3
    49d4:	mov	r0, r3
    49d8:	bl	1e34 <MyGame_Example_Color_read_from_pe>
    49dc:	mov	r3, r0
    49e0:	b	49e8 <MyGame_Example_Monster_color+0xe0>
    49e4:	mov	r3, #8
    49e8:	mov	r0, r3
    49ec:	sub	sp, fp, #4
    49f0:	ldr	fp, [sp]
    49f4:	add	sp, sp, #4
    49f8:	pop	{pc}		; (ldr pc, [sp], #4)

000049fc <MyGame_Example_Monster_color_is_present>:
    49fc:	str	fp, [sp, #-8]!
    4a00:	str	lr, [sp, #4]
    4a04:	add	fp, sp, #4
    4a08:	sub	sp, sp, #16
    4a0c:	str	r0, [fp, #-16]
    4a10:	mov	r3, #0
    4a14:	strh	r3, [fp, #-6]
    4a18:	ldr	r3, [fp, #-16]
    4a1c:	cmp	r3, #0
    4a20:	bne	4a44 <MyGame_Example_Monster_color_is_present+0x48>
    4a24:	movw	r3, #0
    4a28:	movt	r3, #0
    4a2c:	movw	r2, #705	; 0x2c1
    4a30:	movw	r1, #0
    4a34:	movt	r1, #0
    4a38:	movw	r0, #0
    4a3c:	movt	r0, #0
    4a40:	bl	0 <__assert_fail>
    4a44:	mov	r3, #6
    4a48:	strh	r3, [fp, #-8]
    4a4c:	ldr	r0, [fp, #-16]
    4a50:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    4a54:	mov	r3, r0
    4a58:	rsb	r3, r3, #0
    4a5c:	ldr	r2, [fp, #-16]
    4a60:	add	r3, r2, r3
    4a64:	str	r3, [fp, #-12]
    4a68:	ldr	r0, [fp, #-12]
    4a6c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    4a70:	mov	r3, r0
    4a74:	mov	r2, r3
    4a78:	ldrh	r3, [fp, #-8]
    4a7c:	add	r3, r3, #3
    4a80:	lsl	r3, r3, #1
    4a84:	cmp	r2, r3
    4a88:	bcc	4ab0 <MyGame_Example_Monster_color_is_present+0xb4>
    4a8c:	ldrh	r3, [fp, #-8]
    4a90:	add	r3, r3, #2
    4a94:	lsl	r3, r3, #1
    4a98:	ldr	r2, [fp, #-12]
    4a9c:	add	r3, r2, r3
    4aa0:	mov	r0, r3
    4aa4:	bl	848 <__flatbuffers_voffset_read_from_pe>
    4aa8:	mov	r3, r0
    4aac:	strh	r3, [fp, #-6]
    4ab0:	ldrh	r3, [fp, #-6]
    4ab4:	cmp	r3, #0
    4ab8:	movne	r3, #1
    4abc:	moveq	r3, #0
    4ac0:	uxtb	r3, r3
    4ac4:	mov	r0, r3
    4ac8:	sub	sp, fp, #4
    4acc:	ldr	fp, [sp]
    4ad0:	add	sp, sp, #4
    4ad4:	pop	{pc}		; (ldr pc, [sp], #4)

00004ad8 <MyGame_Example_Monster_inventory>:
    4ad8:	str	fp, [sp, #-8]!
    4adc:	str	lr, [sp, #4]
    4ae0:	add	fp, sp, #4
    4ae4:	sub	sp, sp, #24
    4ae8:	str	r0, [fp, #-24]	; 0xffffffe8
    4aec:	mov	r3, #0
    4af0:	strh	r3, [fp, #-6]
    4af4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4af8:	cmp	r3, #0
    4afc:	bne	4b20 <MyGame_Example_Monster_inventory+0x48>
    4b00:	movw	r3, #0
    4b04:	movt	r3, #0
    4b08:	movw	r2, #706	; 0x2c2
    4b0c:	movw	r1, #0
    4b10:	movt	r1, #0
    4b14:	movw	r0, #0
    4b18:	movt	r0, #0
    4b1c:	bl	0 <__assert_fail>
    4b20:	mov	r3, #5
    4b24:	strh	r3, [fp, #-8]
    4b28:	ldr	r0, [fp, #-24]	; 0xffffffe8
    4b2c:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    4b30:	mov	r3, r0
    4b34:	rsb	r3, r3, #0
    4b38:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4b3c:	add	r3, r2, r3
    4b40:	str	r3, [fp, #-12]
    4b44:	ldr	r0, [fp, #-12]
    4b48:	bl	848 <__flatbuffers_voffset_read_from_pe>
    4b4c:	mov	r3, r0
    4b50:	mov	r2, r3
    4b54:	ldrh	r3, [fp, #-8]
    4b58:	add	r3, r3, #3
    4b5c:	lsl	r3, r3, #1
    4b60:	cmp	r2, r3
    4b64:	bcc	4b8c <MyGame_Example_Monster_inventory+0xb4>
    4b68:	ldrh	r3, [fp, #-8]
    4b6c:	add	r3, r3, #2
    4b70:	lsl	r3, r3, #1
    4b74:	ldr	r2, [fp, #-12]
    4b78:	add	r3, r2, r3
    4b7c:	mov	r0, r3
    4b80:	bl	848 <__flatbuffers_voffset_read_from_pe>
    4b84:	mov	r3, r0
    4b88:	strh	r3, [fp, #-6]
    4b8c:	ldrh	r3, [fp, #-6]
    4b90:	cmp	r3, #0
    4b94:	beq	4bc4 <MyGame_Example_Monster_inventory+0xec>
    4b98:	ldrh	r3, [fp, #-6]
    4b9c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4ba0:	add	r3, r2, r3
    4ba4:	str	r3, [fp, #-16]
    4ba8:	ldr	r0, [fp, #-16]
    4bac:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    4bb0:	mov	r3, r0
    4bb4:	add	r3, r3, #4
    4bb8:	ldr	r2, [fp, #-16]
    4bbc:	add	r3, r2, r3
    4bc0:	b	4bc8 <MyGame_Example_Monster_inventory+0xf0>
    4bc4:	mov	r3, #0
    4bc8:	mov	r0, r3
    4bcc:	sub	sp, fp, #4
    4bd0:	ldr	fp, [sp]
    4bd4:	add	sp, sp, #4
    4bd8:	pop	{pc}		; (ldr pc, [sp], #4)

00004bdc <MyGame_Example_Monster_testarrayoftables>:
    4bdc:	str	fp, [sp, #-8]!
    4be0:	str	lr, [sp, #4]
    4be4:	add	fp, sp, #4
    4be8:	sub	sp, sp, #24
    4bec:	str	r0, [fp, #-24]	; 0xffffffe8
    4bf0:	mov	r3, #0
    4bf4:	strh	r3, [fp, #-6]
    4bf8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4bfc:	cmp	r3, #0
    4c00:	bne	4c24 <MyGame_Example_Monster_testarrayoftables+0x48>
    4c04:	movw	r3, #0
    4c08:	movt	r3, #0
    4c0c:	movw	r2, #711	; 0x2c7
    4c10:	movw	r1, #0
    4c14:	movt	r1, #0
    4c18:	movw	r0, #0
    4c1c:	movt	r0, #0
    4c20:	bl	0 <__assert_fail>
    4c24:	mov	r3, #11
    4c28:	strh	r3, [fp, #-8]
    4c2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    4c30:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    4c34:	mov	r3, r0
    4c38:	rsb	r3, r3, #0
    4c3c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4c40:	add	r3, r2, r3
    4c44:	str	r3, [fp, #-12]
    4c48:	ldr	r0, [fp, #-12]
    4c4c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    4c50:	mov	r3, r0
    4c54:	mov	r2, r3
    4c58:	ldrh	r3, [fp, #-8]
    4c5c:	add	r3, r3, #3
    4c60:	lsl	r3, r3, #1
    4c64:	cmp	r2, r3
    4c68:	bcc	4c90 <MyGame_Example_Monster_testarrayoftables+0xb4>
    4c6c:	ldrh	r3, [fp, #-8]
    4c70:	add	r3, r3, #2
    4c74:	lsl	r3, r3, #1
    4c78:	ldr	r2, [fp, #-12]
    4c7c:	add	r3, r2, r3
    4c80:	mov	r0, r3
    4c84:	bl	848 <__flatbuffers_voffset_read_from_pe>
    4c88:	mov	r3, r0
    4c8c:	strh	r3, [fp, #-6]
    4c90:	ldrh	r3, [fp, #-6]
    4c94:	cmp	r3, #0
    4c98:	beq	4cc8 <MyGame_Example_Monster_testarrayoftables+0xec>
    4c9c:	ldrh	r3, [fp, #-6]
    4ca0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4ca4:	add	r3, r2, r3
    4ca8:	str	r3, [fp, #-16]
    4cac:	ldr	r0, [fp, #-16]
    4cb0:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    4cb4:	mov	r3, r0
    4cb8:	add	r3, r3, #4
    4cbc:	ldr	r2, [fp, #-16]
    4cc0:	add	r3, r2, r3
    4cc4:	b	4ccc <MyGame_Example_Monster_testarrayoftables+0xf0>
    4cc8:	mov	r3, #0
    4ccc:	mov	r0, r3
    4cd0:	sub	sp, fp, #4
    4cd4:	ldr	fp, [sp]
    4cd8:	add	sp, sp, #4
    4cdc:	pop	{pc}		; (ldr pc, [sp], #4)

00004ce0 <MyGame_Example_Monster_testarrayofstring>:
    4ce0:	str	fp, [sp, #-8]!
    4ce4:	str	lr, [sp, #4]
    4ce8:	add	fp, sp, #4
    4cec:	sub	sp, sp, #24
    4cf0:	str	r0, [fp, #-24]	; 0xffffffe8
    4cf4:	mov	r3, #0
    4cf8:	strh	r3, [fp, #-6]
    4cfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4d00:	cmp	r3, #0
    4d04:	bne	4d28 <MyGame_Example_Monster_testarrayofstring+0x48>
    4d08:	movw	r3, #0
    4d0c:	movt	r3, #0
    4d10:	mov	r2, #712	; 0x2c8
    4d14:	movw	r1, #0
    4d18:	movt	r1, #0
    4d1c:	movw	r0, #0
    4d20:	movt	r0, #0
    4d24:	bl	0 <__assert_fail>
    4d28:	mov	r3, #10
    4d2c:	strh	r3, [fp, #-8]
    4d30:	ldr	r0, [fp, #-24]	; 0xffffffe8
    4d34:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    4d38:	mov	r3, r0
    4d3c:	rsb	r3, r3, #0
    4d40:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4d44:	add	r3, r2, r3
    4d48:	str	r3, [fp, #-12]
    4d4c:	ldr	r0, [fp, #-12]
    4d50:	bl	848 <__flatbuffers_voffset_read_from_pe>
    4d54:	mov	r3, r0
    4d58:	mov	r2, r3
    4d5c:	ldrh	r3, [fp, #-8]
    4d60:	add	r3, r3, #3
    4d64:	lsl	r3, r3, #1
    4d68:	cmp	r2, r3
    4d6c:	bcc	4d94 <MyGame_Example_Monster_testarrayofstring+0xb4>
    4d70:	ldrh	r3, [fp, #-8]
    4d74:	add	r3, r3, #2
    4d78:	lsl	r3, r3, #1
    4d7c:	ldr	r2, [fp, #-12]
    4d80:	add	r3, r2, r3
    4d84:	mov	r0, r3
    4d88:	bl	848 <__flatbuffers_voffset_read_from_pe>
    4d8c:	mov	r3, r0
    4d90:	strh	r3, [fp, #-6]
    4d94:	ldrh	r3, [fp, #-6]
    4d98:	cmp	r3, #0
    4d9c:	beq	4dcc <MyGame_Example_Monster_testarrayofstring+0xec>
    4da0:	ldrh	r3, [fp, #-6]
    4da4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4da8:	add	r3, r2, r3
    4dac:	str	r3, [fp, #-16]
    4db0:	ldr	r0, [fp, #-16]
    4db4:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    4db8:	mov	r3, r0
    4dbc:	add	r3, r3, #4
    4dc0:	ldr	r2, [fp, #-16]
    4dc4:	add	r3, r2, r3
    4dc8:	b	4dd0 <MyGame_Example_Monster_testarrayofstring+0xf0>
    4dcc:	mov	r3, #0
    4dd0:	mov	r0, r3
    4dd4:	sub	sp, fp, #4
    4dd8:	ldr	fp, [sp]
    4ddc:	add	sp, sp, #4
    4de0:	pop	{pc}		; (ldr pc, [sp], #4)

00004de4 <MyGame_Example_Monster_testarrayofbools>:
    4de4:	str	fp, [sp, #-8]!
    4de8:	str	lr, [sp, #4]
    4dec:	add	fp, sp, #4
    4df0:	sub	sp, sp, #24
    4df4:	str	r0, [fp, #-24]	; 0xffffffe8
    4df8:	mov	r3, #0
    4dfc:	strh	r3, [fp, #-6]
    4e00:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4e04:	cmp	r3, #0
    4e08:	bne	4e2c <MyGame_Example_Monster_testarrayofbools+0x48>
    4e0c:	movw	r3, #0
    4e10:	movt	r3, #0
    4e14:	movw	r2, #714	; 0x2ca
    4e18:	movw	r1, #0
    4e1c:	movt	r1, #0
    4e20:	movw	r0, #0
    4e24:	movt	r0, #0
    4e28:	bl	0 <__assert_fail>
    4e2c:	mov	r3, #24
    4e30:	strh	r3, [fp, #-8]
    4e34:	ldr	r0, [fp, #-24]	; 0xffffffe8
    4e38:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    4e3c:	mov	r3, r0
    4e40:	rsb	r3, r3, #0
    4e44:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4e48:	add	r3, r2, r3
    4e4c:	str	r3, [fp, #-12]
    4e50:	ldr	r0, [fp, #-12]
    4e54:	bl	848 <__flatbuffers_voffset_read_from_pe>
    4e58:	mov	r3, r0
    4e5c:	mov	r2, r3
    4e60:	ldrh	r3, [fp, #-8]
    4e64:	add	r3, r3, #3
    4e68:	lsl	r3, r3, #1
    4e6c:	cmp	r2, r3
    4e70:	bcc	4e98 <MyGame_Example_Monster_testarrayofbools+0xb4>
    4e74:	ldrh	r3, [fp, #-8]
    4e78:	add	r3, r3, #2
    4e7c:	lsl	r3, r3, #1
    4e80:	ldr	r2, [fp, #-12]
    4e84:	add	r3, r2, r3
    4e88:	mov	r0, r3
    4e8c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    4e90:	mov	r3, r0
    4e94:	strh	r3, [fp, #-6]
    4e98:	ldrh	r3, [fp, #-6]
    4e9c:	cmp	r3, #0
    4ea0:	beq	4ed0 <MyGame_Example_Monster_testarrayofbools+0xec>
    4ea4:	ldrh	r3, [fp, #-6]
    4ea8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4eac:	add	r3, r2, r3
    4eb0:	str	r3, [fp, #-16]
    4eb4:	ldr	r0, [fp, #-16]
    4eb8:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    4ebc:	mov	r3, r0
    4ec0:	add	r3, r3, #4
    4ec4:	ldr	r2, [fp, #-16]
    4ec8:	add	r3, r2, r3
    4ecc:	b	4ed4 <MyGame_Example_Monster_testarrayofbools+0xf0>
    4ed0:	mov	r3, #0
    4ed4:	mov	r0, r3
    4ed8:	sub	sp, fp, #4
    4edc:	ldr	fp, [sp]
    4ee0:	add	sp, sp, #4
    4ee4:	pop	{pc}		; (ldr pc, [sp], #4)

00004ee8 <MyGame_Example_Monster_testarrayofbools_is_present>:
    4ee8:	str	fp, [sp, #-8]!
    4eec:	str	lr, [sp, #4]
    4ef0:	add	fp, sp, #4
    4ef4:	sub	sp, sp, #16
    4ef8:	str	r0, [fp, #-16]
    4efc:	mov	r3, #0
    4f00:	strh	r3, [fp, #-6]
    4f04:	ldr	r3, [fp, #-16]
    4f08:	cmp	r3, #0
    4f0c:	bne	4f30 <MyGame_Example_Monster_testarrayofbools_is_present+0x48>
    4f10:	movw	r3, #0
    4f14:	movt	r3, #0
    4f18:	movw	r2, #714	; 0x2ca
    4f1c:	movw	r1, #0
    4f20:	movt	r1, #0
    4f24:	movw	r0, #0
    4f28:	movt	r0, #0
    4f2c:	bl	0 <__assert_fail>
    4f30:	mov	r3, #24
    4f34:	strh	r3, [fp, #-8]
    4f38:	ldr	r0, [fp, #-16]
    4f3c:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    4f40:	mov	r3, r0
    4f44:	rsb	r3, r3, #0
    4f48:	ldr	r2, [fp, #-16]
    4f4c:	add	r3, r2, r3
    4f50:	str	r3, [fp, #-12]
    4f54:	ldr	r0, [fp, #-12]
    4f58:	bl	848 <__flatbuffers_voffset_read_from_pe>
    4f5c:	mov	r3, r0
    4f60:	mov	r2, r3
    4f64:	ldrh	r3, [fp, #-8]
    4f68:	add	r3, r3, #3
    4f6c:	lsl	r3, r3, #1
    4f70:	cmp	r2, r3
    4f74:	bcc	4f9c <MyGame_Example_Monster_testarrayofbools_is_present+0xb4>
    4f78:	ldrh	r3, [fp, #-8]
    4f7c:	add	r3, r3, #2
    4f80:	lsl	r3, r3, #1
    4f84:	ldr	r2, [fp, #-12]
    4f88:	add	r3, r2, r3
    4f8c:	mov	r0, r3
    4f90:	bl	848 <__flatbuffers_voffset_read_from_pe>
    4f94:	mov	r3, r0
    4f98:	strh	r3, [fp, #-6]
    4f9c:	ldrh	r3, [fp, #-6]
    4fa0:	cmp	r3, #0
    4fa4:	movne	r3, #1
    4fa8:	moveq	r3, #0
    4fac:	uxtb	r3, r3
    4fb0:	mov	r0, r3
    4fb4:	sub	sp, fp, #4
    4fb8:	ldr	fp, [sp]
    4fbc:	add	sp, sp, #4
    4fc0:	pop	{pc}		; (ldr pc, [sp], #4)

00004fc4 <MyGame_Example_Monster_enemy>:
    4fc4:	str	fp, [sp, #-8]!
    4fc8:	str	lr, [sp, #4]
    4fcc:	add	fp, sp, #4
    4fd0:	sub	sp, sp, #24
    4fd4:	str	r0, [fp, #-24]	; 0xffffffe8
    4fd8:	mov	r3, #0
    4fdc:	strh	r3, [fp, #-6]
    4fe0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4fe4:	cmp	r3, #0
    4fe8:	bne	500c <MyGame_Example_Monster_enemy+0x48>
    4fec:	movw	r3, #0
    4ff0:	movt	r3, #0
    4ff4:	mov	r2, #716	; 0x2cc
    4ff8:	movw	r1, #0
    4ffc:	movt	r1, #0
    5000:	movw	r0, #0
    5004:	movt	r0, #0
    5008:	bl	0 <__assert_fail>
    500c:	mov	r3, #12
    5010:	strh	r3, [fp, #-8]
    5014:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5018:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    501c:	mov	r3, r0
    5020:	rsb	r3, r3, #0
    5024:	ldr	r2, [fp, #-24]	; 0xffffffe8
    5028:	add	r3, r2, r3
    502c:	str	r3, [fp, #-12]
    5030:	ldr	r0, [fp, #-12]
    5034:	bl	848 <__flatbuffers_voffset_read_from_pe>
    5038:	mov	r3, r0
    503c:	mov	r2, r3
    5040:	ldrh	r3, [fp, #-8]
    5044:	add	r3, r3, #3
    5048:	lsl	r3, r3, #1
    504c:	cmp	r2, r3
    5050:	bcc	5078 <MyGame_Example_Monster_enemy+0xb4>
    5054:	ldrh	r3, [fp, #-8]
    5058:	add	r3, r3, #2
    505c:	lsl	r3, r3, #1
    5060:	ldr	r2, [fp, #-12]
    5064:	add	r3, r2, r3
    5068:	mov	r0, r3
    506c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    5070:	mov	r3, r0
    5074:	strh	r3, [fp, #-6]
    5078:	ldrh	r3, [fp, #-6]
    507c:	cmp	r3, #0
    5080:	beq	50ac <MyGame_Example_Monster_enemy+0xe8>
    5084:	ldrh	r3, [fp, #-6]
    5088:	ldr	r2, [fp, #-24]	; 0xffffffe8
    508c:	add	r3, r2, r3
    5090:	str	r3, [fp, #-16]
    5094:	ldr	r0, [fp, #-16]
    5098:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    509c:	mov	r2, r0
    50a0:	ldr	r3, [fp, #-16]
    50a4:	add	r3, r3, r2
    50a8:	b	50b0 <MyGame_Example_Monster_enemy+0xec>
    50ac:	mov	r3, #0
    50b0:	mov	r0, r3
    50b4:	sub	sp, fp, #4
    50b8:	ldr	fp, [sp]
    50bc:	add	sp, sp, #4
    50c0:	pop	{pc}		; (ldr pc, [sp], #4)

000050c4 <MyGame_Example_Monster_enemy_is_present>:
    50c4:	str	fp, [sp, #-8]!
    50c8:	str	lr, [sp, #4]
    50cc:	add	fp, sp, #4
    50d0:	sub	sp, sp, #16
    50d4:	str	r0, [fp, #-16]
    50d8:	mov	r3, #0
    50dc:	strh	r3, [fp, #-6]
    50e0:	ldr	r3, [fp, #-16]
    50e4:	cmp	r3, #0
    50e8:	bne	510c <MyGame_Example_Monster_enemy_is_present+0x48>
    50ec:	movw	r3, #0
    50f0:	movt	r3, #0
    50f4:	mov	r2, #716	; 0x2cc
    50f8:	movw	r1, #0
    50fc:	movt	r1, #0
    5100:	movw	r0, #0
    5104:	movt	r0, #0
    5108:	bl	0 <__assert_fail>
    510c:	mov	r3, #12
    5110:	strh	r3, [fp, #-8]
    5114:	ldr	r0, [fp, #-16]
    5118:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    511c:	mov	r3, r0
    5120:	rsb	r3, r3, #0
    5124:	ldr	r2, [fp, #-16]
    5128:	add	r3, r2, r3
    512c:	str	r3, [fp, #-12]
    5130:	ldr	r0, [fp, #-12]
    5134:	bl	848 <__flatbuffers_voffset_read_from_pe>
    5138:	mov	r3, r0
    513c:	mov	r2, r3
    5140:	ldrh	r3, [fp, #-8]
    5144:	add	r3, r3, #3
    5148:	lsl	r3, r3, #1
    514c:	cmp	r2, r3
    5150:	bcc	5178 <MyGame_Example_Monster_enemy_is_present+0xb4>
    5154:	ldrh	r3, [fp, #-8]
    5158:	add	r3, r3, #2
    515c:	lsl	r3, r3, #1
    5160:	ldr	r2, [fp, #-12]
    5164:	add	r3, r2, r3
    5168:	mov	r0, r3
    516c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    5170:	mov	r3, r0
    5174:	strh	r3, [fp, #-6]
    5178:	ldrh	r3, [fp, #-6]
    517c:	cmp	r3, #0
    5180:	movne	r3, #1
    5184:	moveq	r3, #0
    5188:	uxtb	r3, r3
    518c:	mov	r0, r3
    5190:	sub	sp, fp, #4
    5194:	ldr	fp, [sp]
    5198:	add	sp, sp, #4
    519c:	pop	{pc}		; (ldr pc, [sp], #4)

000051a0 <MyGame_Example_Monster_test_type>:
    51a0:	str	fp, [sp, #-8]!
    51a4:	str	lr, [sp, #4]
    51a8:	add	fp, sp, #4
    51ac:	sub	sp, sp, #16
    51b0:	str	r0, [fp, #-16]
    51b4:	mov	r3, #0
    51b8:	strh	r3, [fp, #-6]
    51bc:	ldr	r3, [fp, #-16]
    51c0:	cmp	r3, #0
    51c4:	bne	51e8 <MyGame_Example_Monster_test_type+0x48>
    51c8:	movw	r3, #0
    51cc:	movt	r3, #0
    51d0:	movw	r2, #717	; 0x2cd
    51d4:	movw	r1, #0
    51d8:	movt	r1, #0
    51dc:	movw	r0, #0
    51e0:	movt	r0, #0
    51e4:	bl	0 <__assert_fail>
    51e8:	mov	r3, #7
    51ec:	strh	r3, [fp, #-8]
    51f0:	ldr	r0, [fp, #-16]
    51f4:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    51f8:	mov	r3, r0
    51fc:	rsb	r3, r3, #0
    5200:	ldr	r2, [fp, #-16]
    5204:	add	r3, r2, r3
    5208:	str	r3, [fp, #-12]
    520c:	ldr	r0, [fp, #-12]
    5210:	bl	848 <__flatbuffers_voffset_read_from_pe>
    5214:	mov	r3, r0
    5218:	mov	r2, r3
    521c:	ldrh	r3, [fp, #-8]
    5220:	add	r3, r3, #3
    5224:	lsl	r3, r3, #1
    5228:	cmp	r2, r3
    522c:	bcc	5254 <MyGame_Example_Monster_test_type+0xb4>
    5230:	ldrh	r3, [fp, #-8]
    5234:	add	r3, r3, #2
    5238:	lsl	r3, r3, #1
    523c:	ldr	r2, [fp, #-12]
    5240:	add	r3, r2, r3
    5244:	mov	r0, r3
    5248:	bl	848 <__flatbuffers_voffset_read_from_pe>
    524c:	mov	r3, r0
    5250:	strh	r3, [fp, #-6]
    5254:	ldrh	r3, [fp, #-6]
    5258:	cmp	r3, #0
    525c:	beq	527c <MyGame_Example_Monster_test_type+0xdc>
    5260:	ldrh	r3, [fp, #-6]
    5264:	ldr	r2, [fp, #-16]
    5268:	add	r3, r2, r3
    526c:	mov	r0, r3
    5270:	bl	8ac <__flatbuffers_utype_read_from_pe>
    5274:	mov	r3, r0
    5278:	b	5280 <MyGame_Example_Monster_test_type+0xe0>
    527c:	mov	r3, #0
    5280:	mov	r0, r3
    5284:	sub	sp, fp, #4
    5288:	ldr	fp, [sp]
    528c:	add	sp, sp, #4
    5290:	pop	{pc}		; (ldr pc, [sp], #4)

00005294 <MyGame_Example_Monster_test>:
    5294:	str	fp, [sp, #-8]!
    5298:	str	lr, [sp, #4]
    529c:	add	fp, sp, #4
    52a0:	sub	sp, sp, #24
    52a4:	str	r0, [fp, #-24]	; 0xffffffe8
    52a8:	mov	r3, #0
    52ac:	strh	r3, [fp, #-6]
    52b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    52b4:	cmp	r3, #0
    52b8:	bne	52dc <MyGame_Example_Monster_test+0x48>
    52bc:	movw	r3, #0
    52c0:	movt	r3, #0
    52c4:	movw	r2, #717	; 0x2cd
    52c8:	movw	r1, #0
    52cc:	movt	r1, #0
    52d0:	movw	r0, #0
    52d4:	movt	r0, #0
    52d8:	bl	0 <__assert_fail>
    52dc:	mov	r3, #8
    52e0:	strh	r3, [fp, #-8]
    52e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    52e8:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    52ec:	mov	r3, r0
    52f0:	rsb	r3, r3, #0
    52f4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    52f8:	add	r3, r2, r3
    52fc:	str	r3, [fp, #-12]
    5300:	ldr	r0, [fp, #-12]
    5304:	bl	848 <__flatbuffers_voffset_read_from_pe>
    5308:	mov	r3, r0
    530c:	mov	r2, r3
    5310:	ldrh	r3, [fp, #-8]
    5314:	add	r3, r3, #3
    5318:	lsl	r3, r3, #1
    531c:	cmp	r2, r3
    5320:	bcc	5348 <MyGame_Example_Monster_test+0xb4>
    5324:	ldrh	r3, [fp, #-8]
    5328:	add	r3, r3, #2
    532c:	lsl	r3, r3, #1
    5330:	ldr	r2, [fp, #-12]
    5334:	add	r3, r2, r3
    5338:	mov	r0, r3
    533c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    5340:	mov	r3, r0
    5344:	strh	r3, [fp, #-6]
    5348:	ldrh	r3, [fp, #-6]
    534c:	cmp	r3, #0
    5350:	beq	537c <MyGame_Example_Monster_test+0xe8>
    5354:	ldrh	r3, [fp, #-6]
    5358:	ldr	r2, [fp, #-24]	; 0xffffffe8
    535c:	add	r3, r2, r3
    5360:	str	r3, [fp, #-16]
    5364:	ldr	r0, [fp, #-16]
    5368:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    536c:	mov	r2, r0
    5370:	ldr	r3, [fp, #-16]
    5374:	add	r3, r3, r2
    5378:	b	5380 <MyGame_Example_Monster_test+0xec>
    537c:	mov	r3, #0
    5380:	mov	r0, r3
    5384:	sub	sp, fp, #4
    5388:	ldr	fp, [sp]
    538c:	add	sp, sp, #4
    5390:	pop	{pc}		; (ldr pc, [sp], #4)

00005394 <MyGame_Example_Monster_test_union>:
    5394:	str	fp, [sp, #-8]!
    5398:	str	lr, [sp, #4]
    539c:	add	fp, sp, #4
    53a0:	sub	sp, sp, #16
    53a4:	str	r0, [fp, #-16]
    53a8:	str	r1, [fp, #-20]	; 0xffffffec
    53ac:	mov	r3, #0
    53b0:	strb	r3, [fp, #-12]
    53b4:	mov	r3, #0
    53b8:	str	r3, [fp, #-8]
    53bc:	ldr	r0, [fp, #-20]	; 0xffffffec
    53c0:	bl	51a0 <MyGame_Example_Monster_test_type>
    53c4:	mov	r3, r0
    53c8:	strb	r3, [fp, #-12]
    53cc:	ldrb	r3, [fp, #-12]
    53d0:	cmp	r3, #0
    53d4:	bne	53f0 <MyGame_Example_Monster_test_union+0x5c>
    53d8:	ldr	r3, [fp, #-16]
    53dc:	mov	r1, r3
    53e0:	sub	r3, fp, #12
    53e4:	ldrd	r2, [r3]
    53e8:	strd	r2, [r1]
    53ec:	b	5414 <MyGame_Example_Monster_test_union+0x80>
    53f0:	ldr	r0, [fp, #-20]	; 0xffffffec
    53f4:	bl	5294 <MyGame_Example_Monster_test>
    53f8:	mov	r3, r0
    53fc:	str	r3, [fp, #-8]
    5400:	ldr	r3, [fp, #-16]
    5404:	mov	r1, r3
    5408:	sub	r3, fp, #12
    540c:	ldrd	r2, [r3]
    5410:	strd	r2, [r1]
    5414:	ldr	r0, [fp, #-16]
    5418:	sub	sp, fp, #4
    541c:	ldr	fp, [sp]
    5420:	add	sp, sp, #4
    5424:	pop	{pc}		; (ldr pc, [sp], #4)

00005428 <MyGame_Example_Monster_test4>:
    5428:	str	fp, [sp, #-8]!
    542c:	str	lr, [sp, #4]
    5430:	add	fp, sp, #4
    5434:	sub	sp, sp, #24
    5438:	str	r0, [fp, #-24]	; 0xffffffe8
    543c:	mov	r3, #0
    5440:	strh	r3, [fp, #-6]
    5444:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5448:	cmp	r3, #0
    544c:	bne	5470 <MyGame_Example_Monster_test4+0x48>
    5450:	movw	r3, #0
    5454:	movt	r3, #0
    5458:	movw	r2, #718	; 0x2ce
    545c:	movw	r1, #0
    5460:	movt	r1, #0
    5464:	movw	r0, #0
    5468:	movt	r0, #0
    546c:	bl	0 <__assert_fail>
    5470:	mov	r3, #9
    5474:	strh	r3, [fp, #-8]
    5478:	ldr	r0, [fp, #-24]	; 0xffffffe8
    547c:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    5480:	mov	r3, r0
    5484:	rsb	r3, r3, #0
    5488:	ldr	r2, [fp, #-24]	; 0xffffffe8
    548c:	add	r3, r2, r3
    5490:	str	r3, [fp, #-12]
    5494:	ldr	r0, [fp, #-12]
    5498:	bl	848 <__flatbuffers_voffset_read_from_pe>
    549c:	mov	r3, r0
    54a0:	mov	r2, r3
    54a4:	ldrh	r3, [fp, #-8]
    54a8:	add	r3, r3, #3
    54ac:	lsl	r3, r3, #1
    54b0:	cmp	r2, r3
    54b4:	bcc	54dc <MyGame_Example_Monster_test4+0xb4>
    54b8:	ldrh	r3, [fp, #-8]
    54bc:	add	r3, r3, #2
    54c0:	lsl	r3, r3, #1
    54c4:	ldr	r2, [fp, #-12]
    54c8:	add	r3, r2, r3
    54cc:	mov	r0, r3
    54d0:	bl	848 <__flatbuffers_voffset_read_from_pe>
    54d4:	mov	r3, r0
    54d8:	strh	r3, [fp, #-6]
    54dc:	ldrh	r3, [fp, #-6]
    54e0:	cmp	r3, #0
    54e4:	beq	5514 <MyGame_Example_Monster_test4+0xec>
    54e8:	ldrh	r3, [fp, #-6]
    54ec:	ldr	r2, [fp, #-24]	; 0xffffffe8
    54f0:	add	r3, r2, r3
    54f4:	str	r3, [fp, #-16]
    54f8:	ldr	r0, [fp, #-16]
    54fc:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    5500:	mov	r3, r0
    5504:	add	r3, r3, #4
    5508:	ldr	r2, [fp, #-16]
    550c:	add	r3, r2, r3
    5510:	b	5518 <MyGame_Example_Monster_test4+0xf0>
    5514:	mov	r3, #0
    5518:	mov	r0, r3
    551c:	sub	sp, fp, #4
    5520:	ldr	fp, [sp]
    5524:	add	sp, sp, #4
    5528:	pop	{pc}		; (ldr pc, [sp], #4)

0000552c <MyGame_Example_Monster_testnestedflatbuffer>:
    552c:	str	fp, [sp, #-8]!
    5530:	str	lr, [sp, #4]
    5534:	add	fp, sp, #4
    5538:	sub	sp, sp, #24
    553c:	str	r0, [fp, #-24]	; 0xffffffe8
    5540:	mov	r3, #0
    5544:	strh	r3, [fp, #-6]
    5548:	ldr	r3, [fp, #-24]	; 0xffffffe8
    554c:	cmp	r3, #0
    5550:	bne	5574 <MyGame_Example_Monster_testnestedflatbuffer+0x48>
    5554:	movw	r3, #0
    5558:	movt	r3, #0
    555c:	mov	r2, #720	; 0x2d0
    5560:	movw	r1, #0
    5564:	movt	r1, #0
    5568:	movw	r0, #0
    556c:	movt	r0, #0
    5570:	bl	0 <__assert_fail>
    5574:	mov	r3, #13
    5578:	strh	r3, [fp, #-8]
    557c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5580:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    5584:	mov	r3, r0
    5588:	rsb	r3, r3, #0
    558c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    5590:	add	r3, r2, r3
    5594:	str	r3, [fp, #-12]
    5598:	ldr	r0, [fp, #-12]
    559c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    55a0:	mov	r3, r0
    55a4:	mov	r2, r3
    55a8:	ldrh	r3, [fp, #-8]
    55ac:	add	r3, r3, #3
    55b0:	lsl	r3, r3, #1
    55b4:	cmp	r2, r3
    55b8:	bcc	55e0 <MyGame_Example_Monster_testnestedflatbuffer+0xb4>
    55bc:	ldrh	r3, [fp, #-8]
    55c0:	add	r3, r3, #2
    55c4:	lsl	r3, r3, #1
    55c8:	ldr	r2, [fp, #-12]
    55cc:	add	r3, r2, r3
    55d0:	mov	r0, r3
    55d4:	bl	848 <__flatbuffers_voffset_read_from_pe>
    55d8:	mov	r3, r0
    55dc:	strh	r3, [fp, #-6]
    55e0:	ldrh	r3, [fp, #-6]
    55e4:	cmp	r3, #0
    55e8:	beq	5618 <MyGame_Example_Monster_testnestedflatbuffer+0xec>
    55ec:	ldrh	r3, [fp, #-6]
    55f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    55f4:	add	r3, r2, r3
    55f8:	str	r3, [fp, #-16]
    55fc:	ldr	r0, [fp, #-16]
    5600:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    5604:	mov	r3, r0
    5608:	add	r3, r3, #4
    560c:	ldr	r2, [fp, #-16]
    5610:	add	r3, r2, r3
    5614:	b	561c <MyGame_Example_Monster_testnestedflatbuffer+0xf0>
    5618:	mov	r3, #0
    561c:	mov	r0, r3
    5620:	sub	sp, fp, #4
    5624:	ldr	fp, [sp]
    5628:	add	sp, sp, #4
    562c:	pop	{pc}		; (ldr pc, [sp], #4)

00005630 <MyGame_Example_Monster_testnestedflatbuffer_as_root>:
    5630:	str	fp, [sp, #-8]!
    5634:	str	lr, [sp, #4]
    5638:	add	fp, sp, #4
    563c:	sub	sp, sp, #16
    5640:	str	r0, [fp, #-16]
    5644:	movw	r3, #0
    5648:	movt	r3, #0
    564c:	str	r3, [fp, #-8]
    5650:	ldr	r0, [fp, #-16]
    5654:	bl	552c <MyGame_Example_Monster_testnestedflatbuffer>
    5658:	str	r0, [fp, #-12]
    565c:	ldr	r3, [fp, #-12]
    5660:	cmp	r3, #0
    5664:	beq	5698 <MyGame_Example_Monster_testnestedflatbuffer_as_root+0x68>
    5668:	ldr	r1, [fp, #-8]
    566c:	ldr	r0, [fp, #-12]
    5670:	bl	1c44 <flatbuffers_has_identifier>
    5674:	mov	r3, r0
    5678:	cmp	r3, #0
    567c:	beq	5698 <MyGame_Example_Monster_testnestedflatbuffer_as_root+0x68>
    5680:	ldr	r0, [fp, #-12]
    5684:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    5688:	mov	r2, r0
    568c:	ldr	r3, [fp, #-12]
    5690:	add	r3, r3, r2
    5694:	b	569c <MyGame_Example_Monster_testnestedflatbuffer_as_root+0x6c>
    5698:	mov	r3, #0
    569c:	mov	r0, r3
    56a0:	sub	sp, fp, #4
    56a4:	ldr	fp, [sp]
    56a8:	add	sp, sp, #4
    56ac:	pop	{pc}		; (ldr pc, [sp], #4)

000056b0 <MyGame_Example_Monster_testempty>:
    56b0:	str	fp, [sp, #-8]!
    56b4:	str	lr, [sp, #4]
    56b8:	add	fp, sp, #4
    56bc:	sub	sp, sp, #24
    56c0:	str	r0, [fp, #-24]	; 0xffffffe8
    56c4:	mov	r3, #0
    56c8:	strh	r3, [fp, #-6]
    56cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    56d0:	cmp	r3, #0
    56d4:	bne	56f8 <MyGame_Example_Monster_testempty+0x48>
    56d8:	movw	r3, #0
    56dc:	movt	r3, #0
    56e0:	movw	r2, #722	; 0x2d2
    56e4:	movw	r1, #0
    56e8:	movt	r1, #0
    56ec:	movw	r0, #0
    56f0:	movt	r0, #0
    56f4:	bl	0 <__assert_fail>
    56f8:	mov	r3, #14
    56fc:	strh	r3, [fp, #-8]
    5700:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5704:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    5708:	mov	r3, r0
    570c:	rsb	r3, r3, #0
    5710:	ldr	r2, [fp, #-24]	; 0xffffffe8
    5714:	add	r3, r2, r3
    5718:	str	r3, [fp, #-12]
    571c:	ldr	r0, [fp, #-12]
    5720:	bl	848 <__flatbuffers_voffset_read_from_pe>
    5724:	mov	r3, r0
    5728:	mov	r2, r3
    572c:	ldrh	r3, [fp, #-8]
    5730:	add	r3, r3, #3
    5734:	lsl	r3, r3, #1
    5738:	cmp	r2, r3
    573c:	bcc	5764 <MyGame_Example_Monster_testempty+0xb4>
    5740:	ldrh	r3, [fp, #-8]
    5744:	add	r3, r3, #2
    5748:	lsl	r3, r3, #1
    574c:	ldr	r2, [fp, #-12]
    5750:	add	r3, r2, r3
    5754:	mov	r0, r3
    5758:	bl	848 <__flatbuffers_voffset_read_from_pe>
    575c:	mov	r3, r0
    5760:	strh	r3, [fp, #-6]
    5764:	ldrh	r3, [fp, #-6]
    5768:	cmp	r3, #0
    576c:	beq	5798 <MyGame_Example_Monster_testempty+0xe8>
    5770:	ldrh	r3, [fp, #-6]
    5774:	ldr	r2, [fp, #-24]	; 0xffffffe8
    5778:	add	r3, r2, r3
    577c:	str	r3, [fp, #-16]
    5780:	ldr	r0, [fp, #-16]
    5784:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    5788:	mov	r2, r0
    578c:	ldr	r3, [fp, #-16]
    5790:	add	r3, r3, r2
    5794:	b	579c <MyGame_Example_Monster_testempty+0xec>
    5798:	mov	r3, #0
    579c:	mov	r0, r3
    57a0:	sub	sp, fp, #4
    57a4:	ldr	fp, [sp]
    57a8:	add	sp, sp, #4
    57ac:	pop	{pc}		; (ldr pc, [sp], #4)

000057b0 <MyGame_Example_Monster_testempty_is_present>:
    57b0:	str	fp, [sp, #-8]!
    57b4:	str	lr, [sp, #4]
    57b8:	add	fp, sp, #4
    57bc:	sub	sp, sp, #16
    57c0:	str	r0, [fp, #-16]
    57c4:	mov	r3, #0
    57c8:	strh	r3, [fp, #-6]
    57cc:	ldr	r3, [fp, #-16]
    57d0:	cmp	r3, #0
    57d4:	bne	57f8 <MyGame_Example_Monster_testempty_is_present+0x48>
    57d8:	movw	r3, #0
    57dc:	movt	r3, #0
    57e0:	movw	r2, #722	; 0x2d2
    57e4:	movw	r1, #0
    57e8:	movt	r1, #0
    57ec:	movw	r0, #0
    57f0:	movt	r0, #0
    57f4:	bl	0 <__assert_fail>
    57f8:	mov	r3, #14
    57fc:	strh	r3, [fp, #-8]
    5800:	ldr	r0, [fp, #-16]
    5804:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    5808:	mov	r3, r0
    580c:	rsb	r3, r3, #0
    5810:	ldr	r2, [fp, #-16]
    5814:	add	r3, r2, r3
    5818:	str	r3, [fp, #-12]
    581c:	ldr	r0, [fp, #-12]
    5820:	bl	848 <__flatbuffers_voffset_read_from_pe>
    5824:	mov	r3, r0
    5828:	mov	r2, r3
    582c:	ldrh	r3, [fp, #-8]
    5830:	add	r3, r3, #3
    5834:	lsl	r3, r3, #1
    5838:	cmp	r2, r3
    583c:	bcc	5864 <MyGame_Example_Monster_testempty_is_present+0xb4>
    5840:	ldrh	r3, [fp, #-8]
    5844:	add	r3, r3, #2
    5848:	lsl	r3, r3, #1
    584c:	ldr	r2, [fp, #-12]
    5850:	add	r3, r2, r3
    5854:	mov	r0, r3
    5858:	bl	848 <__flatbuffers_voffset_read_from_pe>
    585c:	mov	r3, r0
    5860:	strh	r3, [fp, #-6]
    5864:	ldrh	r3, [fp, #-6]
    5868:	cmp	r3, #0
    586c:	movne	r3, #1
    5870:	moveq	r3, #0
    5874:	uxtb	r3, r3
    5878:	mov	r0, r3
    587c:	sub	sp, fp, #4
    5880:	ldr	fp, [sp]
    5884:	add	sp, sp, #4
    5888:	pop	{pc}		; (ldr pc, [sp], #4)

0000588c <MyGame_Example_Monster_testbool>:
    588c:	str	fp, [sp, #-8]!
    5890:	str	lr, [sp, #4]
    5894:	add	fp, sp, #4
    5898:	sub	sp, sp, #16
    589c:	str	r0, [fp, #-16]
    58a0:	mov	r3, #0
    58a4:	strh	r3, [fp, #-6]
    58a8:	ldr	r3, [fp, #-16]
    58ac:	cmp	r3, #0
    58b0:	bne	58d4 <MyGame_Example_Monster_testbool+0x48>
    58b4:	movw	r3, #0
    58b8:	movt	r3, #0
    58bc:	movw	r2, #723	; 0x2d3
    58c0:	movw	r1, #0
    58c4:	movt	r1, #0
    58c8:	movw	r0, #0
    58cc:	movt	r0, #0
    58d0:	bl	0 <__assert_fail>
    58d4:	mov	r3, #15
    58d8:	strh	r3, [fp, #-8]
    58dc:	ldr	r0, [fp, #-16]
    58e0:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    58e4:	mov	r3, r0
    58e8:	rsb	r3, r3, #0
    58ec:	ldr	r2, [fp, #-16]
    58f0:	add	r3, r2, r3
    58f4:	str	r3, [fp, #-12]
    58f8:	ldr	r0, [fp, #-12]
    58fc:	bl	848 <__flatbuffers_voffset_read_from_pe>
    5900:	mov	r3, r0
    5904:	mov	r2, r3
    5908:	ldrh	r3, [fp, #-8]
    590c:	add	r3, r3, #3
    5910:	lsl	r3, r3, #1
    5914:	cmp	r2, r3
    5918:	bcc	5940 <MyGame_Example_Monster_testbool+0xb4>
    591c:	ldrh	r3, [fp, #-8]
    5920:	add	r3, r3, #2
    5924:	lsl	r3, r3, #1
    5928:	ldr	r2, [fp, #-12]
    592c:	add	r3, r2, r3
    5930:	mov	r0, r3
    5934:	bl	848 <__flatbuffers_voffset_read_from_pe>
    5938:	mov	r3, r0
    593c:	strh	r3, [fp, #-6]
    5940:	ldrh	r3, [fp, #-6]
    5944:	cmp	r3, #0
    5948:	beq	5968 <MyGame_Example_Monster_testbool+0xdc>
    594c:	ldrh	r3, [fp, #-6]
    5950:	ldr	r2, [fp, #-16]
    5954:	add	r3, r2, r3
    5958:	mov	r0, r3
    595c:	bl	640 <flatbuffers_bool_read_from_pe>
    5960:	mov	r3, r0
    5964:	b	596c <MyGame_Example_Monster_testbool+0xe0>
    5968:	mov	r3, #1
    596c:	mov	r0, r3
    5970:	sub	sp, fp, #4
    5974:	ldr	fp, [sp]
    5978:	add	sp, sp, #4
    597c:	pop	{pc}		; (ldr pc, [sp], #4)

00005980 <MyGame_Example_TypeAliases_as_root>:
    5980:	str	fp, [sp, #-8]!
    5984:	str	lr, [sp, #4]
    5988:	add	fp, sp, #4
    598c:	sub	sp, sp, #16
    5990:	str	r0, [fp, #-16]
    5994:	movw	r3, #0
    5998:	movt	r3, #0
    599c:	str	r3, [fp, #-8]
    59a0:	ldr	r3, [fp, #-16]
    59a4:	cmp	r3, #0
    59a8:	beq	59dc <MyGame_Example_TypeAliases_as_root+0x5c>
    59ac:	ldr	r1, [fp, #-8]
    59b0:	ldr	r0, [fp, #-16]
    59b4:	bl	1c44 <flatbuffers_has_identifier>
    59b8:	mov	r3, r0
    59bc:	cmp	r3, #0
    59c0:	beq	59dc <MyGame_Example_TypeAliases_as_root+0x5c>
    59c4:	ldr	r0, [fp, #-16]
    59c8:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    59cc:	mov	r2, r0
    59d0:	ldr	r3, [fp, #-16]
    59d4:	add	r3, r3, r2
    59d8:	b	59e0 <MyGame_Example_TypeAliases_as_root+0x60>
    59dc:	mov	r3, #0
    59e0:	mov	r0, r3
    59e4:	sub	sp, fp, #4
    59e8:	ldr	fp, [sp]
    59ec:	add	sp, sp, #4
    59f0:	pop	{pc}		; (ldr pc, [sp], #4)

000059f4 <MyGame_Example_TypeAliases_i8>:
    59f4:	str	fp, [sp, #-8]!
    59f8:	str	lr, [sp, #4]
    59fc:	add	fp, sp, #4
    5a00:	sub	sp, sp, #16
    5a04:	str	r0, [fp, #-16]
    5a08:	mov	r3, #0
    5a0c:	strh	r3, [fp, #-6]
    5a10:	ldr	r3, [fp, #-16]
    5a14:	cmp	r3, #0
    5a18:	bne	5a3c <MyGame_Example_TypeAliases_i8+0x48>
    5a1c:	movw	r3, #0
    5a20:	movt	r3, #0
    5a24:	movw	r2, #749	; 0x2ed
    5a28:	movw	r1, #0
    5a2c:	movt	r1, #0
    5a30:	movw	r0, #0
    5a34:	movt	r0, #0
    5a38:	bl	0 <__assert_fail>
    5a3c:	mov	r3, #0
    5a40:	strh	r3, [fp, #-8]
    5a44:	ldr	r0, [fp, #-16]
    5a48:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    5a4c:	mov	r3, r0
    5a50:	rsb	r3, r3, #0
    5a54:	ldr	r2, [fp, #-16]
    5a58:	add	r3, r2, r3
    5a5c:	str	r3, [fp, #-12]
    5a60:	ldr	r0, [fp, #-12]
    5a64:	bl	848 <__flatbuffers_voffset_read_from_pe>
    5a68:	mov	r3, r0
    5a6c:	mov	r2, r3
    5a70:	ldrh	r3, [fp, #-8]
    5a74:	add	r3, r3, #3
    5a78:	lsl	r3, r3, #1
    5a7c:	cmp	r2, r3
    5a80:	bcc	5aa8 <MyGame_Example_TypeAliases_i8+0xb4>
    5a84:	ldrh	r3, [fp, #-8]
    5a88:	add	r3, r3, #2
    5a8c:	lsl	r3, r3, #1
    5a90:	ldr	r2, [fp, #-12]
    5a94:	add	r3, r2, r3
    5a98:	mov	r0, r3
    5a9c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    5aa0:	mov	r3, r0
    5aa4:	strh	r3, [fp, #-6]
    5aa8:	ldrh	r3, [fp, #-6]
    5aac:	cmp	r3, #0
    5ab0:	beq	5ad0 <MyGame_Example_TypeAliases_i8+0xdc>
    5ab4:	ldrh	r3, [fp, #-6]
    5ab8:	ldr	r2, [fp, #-16]
    5abc:	add	r3, r2, r3
    5ac0:	mov	r0, r3
    5ac4:	bl	284 <flatbuffers_int8_read_from_pe>
    5ac8:	mov	r3, r0
    5acc:	b	5ad4 <MyGame_Example_TypeAliases_i8+0xe0>
    5ad0:	mov	r3, #0
    5ad4:	mov	r0, r3
    5ad8:	sub	sp, fp, #4
    5adc:	ldr	fp, [sp]
    5ae0:	add	sp, sp, #4
    5ae4:	pop	{pc}		; (ldr pc, [sp], #4)

00005ae8 <MyGame_Example_TypeAliases_u8>:
    5ae8:	str	fp, [sp, #-8]!
    5aec:	str	lr, [sp, #4]
    5af0:	add	fp, sp, #4
    5af4:	sub	sp, sp, #16
    5af8:	str	r0, [fp, #-16]
    5afc:	mov	r3, #0
    5b00:	strh	r3, [fp, #-6]
    5b04:	ldr	r3, [fp, #-16]
    5b08:	cmp	r3, #0
    5b0c:	bne	5b30 <MyGame_Example_TypeAliases_u8+0x48>
    5b10:	movw	r3, #0
    5b14:	movt	r3, #0
    5b18:	movw	r2, #750	; 0x2ee
    5b1c:	movw	r1, #0
    5b20:	movt	r1, #0
    5b24:	movw	r0, #0
    5b28:	movt	r0, #0
    5b2c:	bl	0 <__assert_fail>
    5b30:	mov	r3, #1
    5b34:	strh	r3, [fp, #-8]
    5b38:	ldr	r0, [fp, #-16]
    5b3c:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    5b40:	mov	r3, r0
    5b44:	rsb	r3, r3, #0
    5b48:	ldr	r2, [fp, #-16]
    5b4c:	add	r3, r2, r3
    5b50:	str	r3, [fp, #-12]
    5b54:	ldr	r0, [fp, #-12]
    5b58:	bl	848 <__flatbuffers_voffset_read_from_pe>
    5b5c:	mov	r3, r0
    5b60:	mov	r2, r3
    5b64:	ldrh	r3, [fp, #-8]
    5b68:	add	r3, r3, #3
    5b6c:	lsl	r3, r3, #1
    5b70:	cmp	r2, r3
    5b74:	bcc	5b9c <MyGame_Example_TypeAliases_u8+0xb4>
    5b78:	ldrh	r3, [fp, #-8]
    5b7c:	add	r3, r3, #2
    5b80:	lsl	r3, r3, #1
    5b84:	ldr	r2, [fp, #-12]
    5b88:	add	r3, r2, r3
    5b8c:	mov	r0, r3
    5b90:	bl	848 <__flatbuffers_voffset_read_from_pe>
    5b94:	mov	r3, r0
    5b98:	strh	r3, [fp, #-6]
    5b9c:	ldrh	r3, [fp, #-6]
    5ba0:	cmp	r3, #0
    5ba4:	beq	5bc4 <MyGame_Example_TypeAliases_u8+0xdc>
    5ba8:	ldrh	r3, [fp, #-6]
    5bac:	ldr	r2, [fp, #-16]
    5bb0:	add	r3, r2, r3
    5bb4:	mov	r0, r3
    5bb8:	bl	50 <flatbuffers_uint8_read_from_pe>
    5bbc:	mov	r3, r0
    5bc0:	b	5bc8 <MyGame_Example_TypeAliases_u8+0xe0>
    5bc4:	mov	r3, #0
    5bc8:	mov	r0, r3
    5bcc:	sub	sp, fp, #4
    5bd0:	ldr	fp, [sp]
    5bd4:	add	sp, sp, #4
    5bd8:	pop	{pc}		; (ldr pc, [sp], #4)

00005bdc <MyGame_Example_TypeAliases_i16>:
    5bdc:	str	fp, [sp, #-8]!
    5be0:	str	lr, [sp, #4]
    5be4:	add	fp, sp, #4
    5be8:	sub	sp, sp, #16
    5bec:	str	r0, [fp, #-16]
    5bf0:	mov	r3, #0
    5bf4:	strh	r3, [fp, #-6]
    5bf8:	ldr	r3, [fp, #-16]
    5bfc:	cmp	r3, #0
    5c00:	bne	5c24 <MyGame_Example_TypeAliases_i16+0x48>
    5c04:	movw	r3, #0
    5c08:	movt	r3, #0
    5c0c:	movw	r2, #751	; 0x2ef
    5c10:	movw	r1, #0
    5c14:	movt	r1, #0
    5c18:	movw	r0, #0
    5c1c:	movt	r0, #0
    5c20:	bl	0 <__assert_fail>
    5c24:	mov	r3, #2
    5c28:	strh	r3, [fp, #-8]
    5c2c:	ldr	r0, [fp, #-16]
    5c30:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    5c34:	mov	r3, r0
    5c38:	rsb	r3, r3, #0
    5c3c:	ldr	r2, [fp, #-16]
    5c40:	add	r3, r2, r3
    5c44:	str	r3, [fp, #-12]
    5c48:	ldr	r0, [fp, #-12]
    5c4c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    5c50:	mov	r3, r0
    5c54:	mov	r2, r3
    5c58:	ldrh	r3, [fp, #-8]
    5c5c:	add	r3, r3, #3
    5c60:	lsl	r3, r3, #1
    5c64:	cmp	r2, r3
    5c68:	bcc	5c90 <MyGame_Example_TypeAliases_i16+0xb4>
    5c6c:	ldrh	r3, [fp, #-8]
    5c70:	add	r3, r3, #2
    5c74:	lsl	r3, r3, #1
    5c78:	ldr	r2, [fp, #-12]
    5c7c:	add	r3, r2, r3
    5c80:	mov	r0, r3
    5c84:	bl	848 <__flatbuffers_voffset_read_from_pe>
    5c88:	mov	r3, r0
    5c8c:	strh	r3, [fp, #-6]
    5c90:	ldrh	r3, [fp, #-6]
    5c94:	cmp	r3, #0
    5c98:	beq	5cb8 <MyGame_Example_TypeAliases_i16+0xdc>
    5c9c:	ldrh	r3, [fp, #-6]
    5ca0:	ldr	r2, [fp, #-16]
    5ca4:	add	r3, r2, r3
    5ca8:	mov	r0, r3
    5cac:	bl	310 <flatbuffers_int16_read_from_pe>
    5cb0:	mov	r3, r0
    5cb4:	b	5cbc <MyGame_Example_TypeAliases_i16+0xe0>
    5cb8:	mov	r3, #0
    5cbc:	mov	r0, r3
    5cc0:	sub	sp, fp, #4
    5cc4:	ldr	fp, [sp]
    5cc8:	add	sp, sp, #4
    5ccc:	pop	{pc}		; (ldr pc, [sp], #4)

00005cd0 <MyGame_Example_TypeAliases_u16>:
    5cd0:	str	fp, [sp, #-8]!
    5cd4:	str	lr, [sp, #4]
    5cd8:	add	fp, sp, #4
    5cdc:	sub	sp, sp, #16
    5ce0:	str	r0, [fp, #-16]
    5ce4:	mov	r3, #0
    5ce8:	strh	r3, [fp, #-6]
    5cec:	ldr	r3, [fp, #-16]
    5cf0:	cmp	r3, #0
    5cf4:	bne	5d18 <MyGame_Example_TypeAliases_u16+0x48>
    5cf8:	movw	r3, #0
    5cfc:	movt	r3, #0
    5d00:	mov	r2, #752	; 0x2f0
    5d04:	movw	r1, #0
    5d08:	movt	r1, #0
    5d0c:	movw	r0, #0
    5d10:	movt	r0, #0
    5d14:	bl	0 <__assert_fail>
    5d18:	mov	r3, #3
    5d1c:	strh	r3, [fp, #-8]
    5d20:	ldr	r0, [fp, #-16]
    5d24:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    5d28:	mov	r3, r0
    5d2c:	rsb	r3, r3, #0
    5d30:	ldr	r2, [fp, #-16]
    5d34:	add	r3, r2, r3
    5d38:	str	r3, [fp, #-12]
    5d3c:	ldr	r0, [fp, #-12]
    5d40:	bl	848 <__flatbuffers_voffset_read_from_pe>
    5d44:	mov	r3, r0
    5d48:	mov	r2, r3
    5d4c:	ldrh	r3, [fp, #-8]
    5d50:	add	r3, r3, #3
    5d54:	lsl	r3, r3, #1
    5d58:	cmp	r2, r3
    5d5c:	bcc	5d84 <MyGame_Example_TypeAliases_u16+0xb4>
    5d60:	ldrh	r3, [fp, #-8]
    5d64:	add	r3, r3, #2
    5d68:	lsl	r3, r3, #1
    5d6c:	ldr	r2, [fp, #-12]
    5d70:	add	r3, r2, r3
    5d74:	mov	r0, r3
    5d78:	bl	848 <__flatbuffers_voffset_read_from_pe>
    5d7c:	mov	r3, r0
    5d80:	strh	r3, [fp, #-6]
    5d84:	ldrh	r3, [fp, #-6]
    5d88:	cmp	r3, #0
    5d8c:	beq	5dac <MyGame_Example_TypeAliases_u16+0xdc>
    5d90:	ldrh	r3, [fp, #-6]
    5d94:	ldr	r2, [fp, #-16]
    5d98:	add	r3, r2, r3
    5d9c:	mov	r0, r3
    5da0:	bl	dc <flatbuffers_uint16_read_from_pe>
    5da4:	mov	r3, r0
    5da8:	b	5db0 <MyGame_Example_TypeAliases_u16+0xe0>
    5dac:	mov	r3, #0
    5db0:	mov	r0, r3
    5db4:	sub	sp, fp, #4
    5db8:	ldr	fp, [sp]
    5dbc:	add	sp, sp, #4
    5dc0:	pop	{pc}		; (ldr pc, [sp], #4)

00005dc4 <MyGame_Example_TypeAliases_i32>:
    5dc4:	str	fp, [sp, #-8]!
    5dc8:	str	lr, [sp, #4]
    5dcc:	add	fp, sp, #4
    5dd0:	sub	sp, sp, #16
    5dd4:	str	r0, [fp, #-16]
    5dd8:	mov	r3, #0
    5ddc:	strh	r3, [fp, #-6]
    5de0:	ldr	r3, [fp, #-16]
    5de4:	cmp	r3, #0
    5de8:	bne	5e0c <MyGame_Example_TypeAliases_i32+0x48>
    5dec:	movw	r3, #0
    5df0:	movt	r3, #0
    5df4:	movw	r2, #753	; 0x2f1
    5df8:	movw	r1, #0
    5dfc:	movt	r1, #0
    5e00:	movw	r0, #0
    5e04:	movt	r0, #0
    5e08:	bl	0 <__assert_fail>
    5e0c:	mov	r3, #4
    5e10:	strh	r3, [fp, #-8]
    5e14:	ldr	r0, [fp, #-16]
    5e18:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    5e1c:	mov	r3, r0
    5e20:	rsb	r3, r3, #0
    5e24:	ldr	r2, [fp, #-16]
    5e28:	add	r3, r2, r3
    5e2c:	str	r3, [fp, #-12]
    5e30:	ldr	r0, [fp, #-12]
    5e34:	bl	848 <__flatbuffers_voffset_read_from_pe>
    5e38:	mov	r3, r0
    5e3c:	mov	r2, r3
    5e40:	ldrh	r3, [fp, #-8]
    5e44:	add	r3, r3, #3
    5e48:	lsl	r3, r3, #1
    5e4c:	cmp	r2, r3
    5e50:	bcc	5e78 <MyGame_Example_TypeAliases_i32+0xb4>
    5e54:	ldrh	r3, [fp, #-8]
    5e58:	add	r3, r3, #2
    5e5c:	lsl	r3, r3, #1
    5e60:	ldr	r2, [fp, #-12]
    5e64:	add	r3, r2, r3
    5e68:	mov	r0, r3
    5e6c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    5e70:	mov	r3, r0
    5e74:	strh	r3, [fp, #-6]
    5e78:	ldrh	r3, [fp, #-6]
    5e7c:	cmp	r3, #0
    5e80:	beq	5ea0 <MyGame_Example_TypeAliases_i32+0xdc>
    5e84:	ldrh	r3, [fp, #-6]
    5e88:	ldr	r2, [fp, #-16]
    5e8c:	add	r3, r2, r3
    5e90:	mov	r0, r3
    5e94:	bl	394 <flatbuffers_int32_read_from_pe>
    5e98:	mov	r3, r0
    5e9c:	b	5ea4 <MyGame_Example_TypeAliases_i32+0xe0>
    5ea0:	mov	r3, #0
    5ea4:	mov	r0, r3
    5ea8:	sub	sp, fp, #4
    5eac:	ldr	fp, [sp]
    5eb0:	add	sp, sp, #4
    5eb4:	pop	{pc}		; (ldr pc, [sp], #4)

00005eb8 <MyGame_Example_TypeAliases_u32>:
    5eb8:	str	fp, [sp, #-8]!
    5ebc:	str	lr, [sp, #4]
    5ec0:	add	fp, sp, #4
    5ec4:	sub	sp, sp, #16
    5ec8:	str	r0, [fp, #-16]
    5ecc:	mov	r3, #0
    5ed0:	strh	r3, [fp, #-6]
    5ed4:	ldr	r3, [fp, #-16]
    5ed8:	cmp	r3, #0
    5edc:	bne	5f00 <MyGame_Example_TypeAliases_u32+0x48>
    5ee0:	movw	r3, #0
    5ee4:	movt	r3, #0
    5ee8:	movw	r2, #754	; 0x2f2
    5eec:	movw	r1, #0
    5ef0:	movt	r1, #0
    5ef4:	movw	r0, #0
    5ef8:	movt	r0, #0
    5efc:	bl	0 <__assert_fail>
    5f00:	mov	r3, #5
    5f04:	strh	r3, [fp, #-8]
    5f08:	ldr	r0, [fp, #-16]
    5f0c:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    5f10:	mov	r3, r0
    5f14:	rsb	r3, r3, #0
    5f18:	ldr	r2, [fp, #-16]
    5f1c:	add	r3, r2, r3
    5f20:	str	r3, [fp, #-12]
    5f24:	ldr	r0, [fp, #-12]
    5f28:	bl	848 <__flatbuffers_voffset_read_from_pe>
    5f2c:	mov	r3, r0
    5f30:	mov	r2, r3
    5f34:	ldrh	r3, [fp, #-8]
    5f38:	add	r3, r3, #3
    5f3c:	lsl	r3, r3, #1
    5f40:	cmp	r2, r3
    5f44:	bcc	5f6c <MyGame_Example_TypeAliases_u32+0xb4>
    5f48:	ldrh	r3, [fp, #-8]
    5f4c:	add	r3, r3, #2
    5f50:	lsl	r3, r3, #1
    5f54:	ldr	r2, [fp, #-12]
    5f58:	add	r3, r2, r3
    5f5c:	mov	r0, r3
    5f60:	bl	848 <__flatbuffers_voffset_read_from_pe>
    5f64:	mov	r3, r0
    5f68:	strh	r3, [fp, #-6]
    5f6c:	ldrh	r3, [fp, #-6]
    5f70:	cmp	r3, #0
    5f74:	beq	5f94 <MyGame_Example_TypeAliases_u32+0xdc>
    5f78:	ldrh	r3, [fp, #-6]
    5f7c:	ldr	r2, [fp, #-16]
    5f80:	add	r3, r2, r3
    5f84:	mov	r0, r3
    5f88:	bl	160 <flatbuffers_uint32_read_from_pe>
    5f8c:	mov	r3, r0
    5f90:	b	5f98 <MyGame_Example_TypeAliases_u32+0xe0>
    5f94:	mov	r3, #0
    5f98:	mov	r0, r3
    5f9c:	sub	sp, fp, #4
    5fa0:	ldr	fp, [sp]
    5fa4:	add	sp, sp, #4
    5fa8:	pop	{pc}		; (ldr pc, [sp], #4)

00005fac <MyGame_Example_TypeAliases_i64>:
    5fac:	str	fp, [sp, #-8]!
    5fb0:	str	lr, [sp, #4]
    5fb4:	add	fp, sp, #4
    5fb8:	sub	sp, sp, #16
    5fbc:	str	r0, [fp, #-16]
    5fc0:	mov	r3, #0
    5fc4:	strh	r3, [fp, #-6]
    5fc8:	ldr	r3, [fp, #-16]
    5fcc:	cmp	r3, #0
    5fd0:	bne	5ff4 <MyGame_Example_TypeAliases_i64+0x48>
    5fd4:	movw	r3, #0
    5fd8:	movt	r3, #0
    5fdc:	movw	r2, #755	; 0x2f3
    5fe0:	movw	r1, #0
    5fe4:	movt	r1, #0
    5fe8:	movw	r0, #0
    5fec:	movt	r0, #0
    5ff0:	bl	0 <__assert_fail>
    5ff4:	mov	r3, #6
    5ff8:	strh	r3, [fp, #-8]
    5ffc:	ldr	r0, [fp, #-16]
    6000:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    6004:	mov	r3, r0
    6008:	rsb	r3, r3, #0
    600c:	ldr	r2, [fp, #-16]
    6010:	add	r3, r2, r3
    6014:	str	r3, [fp, #-12]
    6018:	ldr	r0, [fp, #-12]
    601c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    6020:	mov	r3, r0
    6024:	mov	r2, r3
    6028:	ldrh	r3, [fp, #-8]
    602c:	add	r3, r3, #3
    6030:	lsl	r3, r3, #1
    6034:	cmp	r2, r3
    6038:	bcc	6060 <MyGame_Example_TypeAliases_i64+0xb4>
    603c:	ldrh	r3, [fp, #-8]
    6040:	add	r3, r3, #2
    6044:	lsl	r3, r3, #1
    6048:	ldr	r2, [fp, #-12]
    604c:	add	r3, r2, r3
    6050:	mov	r0, r3
    6054:	bl	848 <__flatbuffers_voffset_read_from_pe>
    6058:	mov	r3, r0
    605c:	strh	r3, [fp, #-6]
    6060:	ldrh	r3, [fp, #-6]
    6064:	cmp	r3, #0
    6068:	beq	608c <MyGame_Example_TypeAliases_i64+0xe0>
    606c:	ldrh	r3, [fp, #-6]
    6070:	ldr	r2, [fp, #-16]
    6074:	add	r3, r2, r3
    6078:	mov	r0, r3
    607c:	bl	420 <flatbuffers_int64_read_from_pe>
    6080:	mov	r2, r0
    6084:	mov	r3, r1
    6088:	b	6094 <MyGame_Example_TypeAliases_i64+0xe8>
    608c:	mov	r2, #0
    6090:	mov	r3, #0
    6094:	mov	r0, r2
    6098:	mov	r1, r3
    609c:	sub	sp, fp, #4
    60a0:	ldr	fp, [sp]
    60a4:	add	sp, sp, #4
    60a8:	pop	{pc}		; (ldr pc, [sp], #4)

000060ac <MyGame_Example_TypeAliases_u64>:
    60ac:	str	fp, [sp, #-8]!
    60b0:	str	lr, [sp, #4]
    60b4:	add	fp, sp, #4
    60b8:	sub	sp, sp, #16
    60bc:	str	r0, [fp, #-16]
    60c0:	mov	r3, #0
    60c4:	strh	r3, [fp, #-6]
    60c8:	ldr	r3, [fp, #-16]
    60cc:	cmp	r3, #0
    60d0:	bne	60f4 <MyGame_Example_TypeAliases_u64+0x48>
    60d4:	movw	r3, #0
    60d8:	movt	r3, #0
    60dc:	mov	r2, #756	; 0x2f4
    60e0:	movw	r1, #0
    60e4:	movt	r1, #0
    60e8:	movw	r0, #0
    60ec:	movt	r0, #0
    60f0:	bl	0 <__assert_fail>
    60f4:	mov	r3, #7
    60f8:	strh	r3, [fp, #-8]
    60fc:	ldr	r0, [fp, #-16]
    6100:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    6104:	mov	r3, r0
    6108:	rsb	r3, r3, #0
    610c:	ldr	r2, [fp, #-16]
    6110:	add	r3, r2, r3
    6114:	str	r3, [fp, #-12]
    6118:	ldr	r0, [fp, #-12]
    611c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    6120:	mov	r3, r0
    6124:	mov	r2, r3
    6128:	ldrh	r3, [fp, #-8]
    612c:	add	r3, r3, #3
    6130:	lsl	r3, r3, #1
    6134:	cmp	r2, r3
    6138:	bcc	6160 <MyGame_Example_TypeAliases_u64+0xb4>
    613c:	ldrh	r3, [fp, #-8]
    6140:	add	r3, r3, #2
    6144:	lsl	r3, r3, #1
    6148:	ldr	r2, [fp, #-12]
    614c:	add	r3, r2, r3
    6150:	mov	r0, r3
    6154:	bl	848 <__flatbuffers_voffset_read_from_pe>
    6158:	mov	r3, r0
    615c:	strh	r3, [fp, #-6]
    6160:	ldrh	r3, [fp, #-6]
    6164:	cmp	r3, #0
    6168:	beq	618c <MyGame_Example_TypeAliases_u64+0xe0>
    616c:	ldrh	r3, [fp, #-6]
    6170:	ldr	r2, [fp, #-16]
    6174:	add	r3, r2, r3
    6178:	mov	r0, r3
    617c:	bl	1ec <flatbuffers_uint64_read_from_pe>
    6180:	mov	r2, r0
    6184:	mov	r3, r1
    6188:	b	6194 <MyGame_Example_TypeAliases_u64+0xe8>
    618c:	mov	r2, #0
    6190:	mov	r3, #0
    6194:	mov	r0, r2
    6198:	mov	r1, r3
    619c:	sub	sp, fp, #4
    61a0:	ldr	fp, [sp]
    61a4:	add	sp, sp, #4
    61a8:	pop	{pc}		; (ldr pc, [sp], #4)

000061ac <MyGame_Example_TypeAliases_f32>:
    61ac:	str	fp, [sp, #-8]!
    61b0:	str	lr, [sp, #4]
    61b4:	add	fp, sp, #4
    61b8:	sub	sp, sp, #16
    61bc:	str	r0, [fp, #-16]
    61c0:	mov	r3, #0
    61c4:	strh	r3, [fp, #-6]
    61c8:	ldr	r3, [fp, #-16]
    61cc:	cmp	r3, #0
    61d0:	bne	61f4 <MyGame_Example_TypeAliases_f32+0x48>
    61d4:	movw	r3, #0
    61d8:	movt	r3, #0
    61dc:	movw	r2, #757	; 0x2f5
    61e0:	movw	r1, #0
    61e4:	movt	r1, #0
    61e8:	movw	r0, #0
    61ec:	movt	r0, #0
    61f0:	bl	0 <__assert_fail>
    61f4:	mov	r3, #8
    61f8:	strh	r3, [fp, #-8]
    61fc:	ldr	r0, [fp, #-16]
    6200:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    6204:	mov	r3, r0
    6208:	rsb	r3, r3, #0
    620c:	ldr	r2, [fp, #-16]
    6210:	add	r3, r2, r3
    6214:	str	r3, [fp, #-12]
    6218:	ldr	r0, [fp, #-12]
    621c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    6220:	mov	r3, r0
    6224:	mov	r2, r3
    6228:	ldrh	r3, [fp, #-8]
    622c:	add	r3, r3, #3
    6230:	lsl	r3, r3, #1
    6234:	cmp	r2, r3
    6238:	bcc	6260 <MyGame_Example_TypeAliases_f32+0xb4>
    623c:	ldrh	r3, [fp, #-8]
    6240:	add	r3, r3, #2
    6244:	lsl	r3, r3, #1
    6248:	ldr	r2, [fp, #-12]
    624c:	add	r3, r2, r3
    6250:	mov	r0, r3
    6254:	bl	848 <__flatbuffers_voffset_read_from_pe>
    6258:	mov	r3, r0
    625c:	strh	r3, [fp, #-6]
    6260:	ldrh	r3, [fp, #-6]
    6264:	cmp	r3, #0
    6268:	beq	6288 <MyGame_Example_TypeAliases_f32+0xdc>
    626c:	ldrh	r3, [fp, #-6]
    6270:	ldr	r2, [fp, #-16]
    6274:	add	r3, r2, r3
    6278:	mov	r0, r3
    627c:	bl	4d8 <flatbuffers_float_read_from_pe>
    6280:	vmov.f32	s15, s0
    6284:	b	628c <MyGame_Example_TypeAliases_f32+0xe0>
    6288:	vldr	s15, [pc, #16]	; 62a0 <MyGame_Example_TypeAliases_f32+0xf4>
    628c:	vmov.f32	s0, s15
    6290:	sub	sp, fp, #4
    6294:	ldr	fp, [sp]
    6298:	add	sp, sp, #4
    629c:	pop	{pc}		; (ldr pc, [sp], #4)
    62a0:	.word	0x00000000

000062a4 <MyGame_Example_TypeAliases_f64>:
    62a4:	str	fp, [sp, #-8]!
    62a8:	str	lr, [sp, #4]
    62ac:	add	fp, sp, #4
    62b0:	sub	sp, sp, #16
    62b4:	str	r0, [fp, #-16]
    62b8:	mov	r3, #0
    62bc:	strh	r3, [fp, #-6]
    62c0:	ldr	r3, [fp, #-16]
    62c4:	cmp	r3, #0
    62c8:	bne	62ec <MyGame_Example_TypeAliases_f64+0x48>
    62cc:	movw	r3, #0
    62d0:	movt	r3, #0
    62d4:	movw	r2, #758	; 0x2f6
    62d8:	movw	r1, #0
    62dc:	movt	r1, #0
    62e0:	movw	r0, #0
    62e4:	movt	r0, #0
    62e8:	bl	0 <__assert_fail>
    62ec:	mov	r3, #9
    62f0:	strh	r3, [fp, #-8]
    62f4:	ldr	r0, [fp, #-16]
    62f8:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    62fc:	mov	r3, r0
    6300:	rsb	r3, r3, #0
    6304:	ldr	r2, [fp, #-16]
    6308:	add	r3, r2, r3
    630c:	str	r3, [fp, #-12]
    6310:	ldr	r0, [fp, #-12]
    6314:	bl	848 <__flatbuffers_voffset_read_from_pe>
    6318:	mov	r3, r0
    631c:	mov	r2, r3
    6320:	ldrh	r3, [fp, #-8]
    6324:	add	r3, r3, #3
    6328:	lsl	r3, r3, #1
    632c:	cmp	r2, r3
    6330:	bcc	6358 <MyGame_Example_TypeAliases_f64+0xb4>
    6334:	ldrh	r3, [fp, #-8]
    6338:	add	r3, r3, #2
    633c:	lsl	r3, r3, #1
    6340:	ldr	r2, [fp, #-12]
    6344:	add	r3, r2, r3
    6348:	mov	r0, r3
    634c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    6350:	mov	r3, r0
    6354:	strh	r3, [fp, #-6]
    6358:	ldrh	r3, [fp, #-6]
    635c:	cmp	r3, #0
    6360:	beq	6380 <MyGame_Example_TypeAliases_f64+0xdc>
    6364:	ldrh	r3, [fp, #-6]
    6368:	ldr	r2, [fp, #-16]
    636c:	add	r3, r2, r3
    6370:	mov	r0, r3
    6374:	bl	584 <flatbuffers_double_read_from_pe>
    6378:	vmov.f64	d7, d0
    637c:	b	6384 <MyGame_Example_TypeAliases_f64+0xe0>
    6380:	vldr	d7, [pc, #16]	; 6398 <MyGame_Example_TypeAliases_f64+0xf4>
    6384:	vmov.f64	d0, d7
    6388:	sub	sp, fp, #4
    638c:	ldr	fp, [sp]
    6390:	add	sp, sp, #4
    6394:	pop	{pc}		; (ldr pc, [sp], #4)
	...

000063a0 <Fantasy_Attacker_sword_attack_damage>:
    63a0:	str	fp, [sp, #-8]!
    63a4:	str	lr, [sp, #4]
    63a8:	add	fp, sp, #4
    63ac:	sub	sp, sp, #16
    63b0:	str	r0, [fp, #-16]
    63b4:	mov	r3, #0
    63b8:	strh	r3, [fp, #-6]
    63bc:	ldr	r3, [fp, #-16]
    63c0:	cmp	r3, #0
    63c4:	bne	63e8 <Fantasy_Attacker_sword_attack_damage+0x48>
    63c8:	movw	r3, #0
    63cc:	movt	r3, #0
    63d0:	movw	r2, #770	; 0x302
    63d4:	movw	r1, #0
    63d8:	movt	r1, #0
    63dc:	movw	r0, #0
    63e0:	movt	r0, #0
    63e4:	bl	0 <__assert_fail>
    63e8:	mov	r3, #0
    63ec:	strh	r3, [fp, #-8]
    63f0:	ldr	r0, [fp, #-16]
    63f4:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    63f8:	mov	r3, r0
    63fc:	rsb	r3, r3, #0
    6400:	ldr	r2, [fp, #-16]
    6404:	add	r3, r2, r3
    6408:	str	r3, [fp, #-12]
    640c:	ldr	r0, [fp, #-12]
    6410:	bl	848 <__flatbuffers_voffset_read_from_pe>
    6414:	mov	r3, r0
    6418:	mov	r2, r3
    641c:	ldrh	r3, [fp, #-8]
    6420:	add	r3, r3, #3
    6424:	lsl	r3, r3, #1
    6428:	cmp	r2, r3
    642c:	bcc	6454 <Fantasy_Attacker_sword_attack_damage+0xb4>
    6430:	ldrh	r3, [fp, #-8]
    6434:	add	r3, r3, #2
    6438:	lsl	r3, r3, #1
    643c:	ldr	r2, [fp, #-12]
    6440:	add	r3, r2, r3
    6444:	mov	r0, r3
    6448:	bl	848 <__flatbuffers_voffset_read_from_pe>
    644c:	mov	r3, r0
    6450:	strh	r3, [fp, #-6]
    6454:	ldrh	r3, [fp, #-6]
    6458:	cmp	r3, #0
    645c:	beq	647c <Fantasy_Attacker_sword_attack_damage+0xdc>
    6460:	ldrh	r3, [fp, #-6]
    6464:	ldr	r2, [fp, #-16]
    6468:	add	r3, r2, r3
    646c:	mov	r0, r3
    6470:	bl	394 <flatbuffers_int32_read_from_pe>
    6474:	mov	r3, r0
    6478:	b	6480 <Fantasy_Attacker_sword_attack_damage+0xe0>
    647c:	mov	r3, #0
    6480:	mov	r0, r3
    6484:	sub	sp, fp, #4
    6488:	ldr	fp, [sp]
    648c:	add	sp, sp, #4
    6490:	pop	{pc}		; (ldr pc, [sp], #4)

00006494 <Fantasy_Character_union_vec_len>:
    6494:	str	fp, [sp, #-8]!
    6498:	str	lr, [sp, #4]
    649c:	add	fp, sp, #4
    64a0:	sub	sp, sp, #8
    64a4:	sub	r3, fp, #12
    64a8:	stm	r3, {r0, r1}
    64ac:	ldr	r3, [fp, #-12]
    64b0:	mov	r0, r3
    64b4:	bl	a94 <flatbuffers_vec_len>
    64b8:	mov	r3, r0
    64bc:	mov	r0, r3
    64c0:	sub	sp, fp, #4
    64c4:	ldr	fp, [sp]
    64c8:	add	sp, sp, #4
    64cc:	pop	{pc}		; (ldr pc, [sp], #4)

000064d0 <Fantasy_Character_union_vec_at>:
    64d0:	str	fp, [sp, #-8]!
    64d4:	str	lr, [sp, #4]
    64d8:	add	fp, sp, #4
    64dc:	sub	sp, sp, #32
    64e0:	str	r0, [fp, #-24]	; 0xffffffe8
    64e4:	sub	r0, fp, #32
    64e8:	stm	r0, {r1, r2}
    64ec:	str	r3, [fp, #-36]	; 0xffffffdc
    64f0:	mov	r3, #0
    64f4:	strb	r3, [fp, #-16]
    64f8:	mov	r3, #0
    64fc:	str	r3, [fp, #-12]
    6500:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6504:	mov	r0, r3
    6508:	bl	a94 <flatbuffers_vec_len>
    650c:	str	r0, [fp, #-8]
    6510:	ldr	r2, [fp, #-8]
    6514:	ldr	r3, [fp, #-36]	; 0xffffffdc
    6518:	cmp	r2, r3
    651c:	bhi	6540 <Fantasy_Character_union_vec_at+0x70>
    6520:	movw	r3, #0
    6524:	movt	r3, #0
    6528:	movw	r2, #773	; 0x305
    652c:	movw	r1, #0
    6530:	movt	r1, #0
    6534:	movw	r0, #0
    6538:	movt	r0, #0
    653c:	bl	0 <__assert_fail>
    6540:	ldr	r2, [fp, #-32]	; 0xffffffe0
    6544:	ldr	r3, [fp, #-36]	; 0xffffffdc
    6548:	add	r3, r2, r3
    654c:	ldrb	r3, [r3]
    6550:	strb	r3, [fp, #-16]
    6554:	ldrb	r3, [fp, #-16]
    6558:	cmp	r3, #0
    655c:	bne	6578 <Fantasy_Character_union_vec_at+0xa8>
    6560:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6564:	mov	r1, r3
    6568:	sub	r3, fp, #16
    656c:	ldrd	r2, [r3]
    6570:	strd	r2, [r1]
    6574:	b	65a4 <Fantasy_Character_union_vec_at+0xd4>
    6578:	ldr	r3, [fp, #-28]	; 0xffffffe4
    657c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    6580:	mov	r0, r3
    6584:	bl	c60 <flatbuffers_generic_vec_at>
    6588:	mov	r3, r0
    658c:	str	r3, [fp, #-12]
    6590:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6594:	mov	r1, r3
    6598:	sub	r3, fp, #16
    659c:	ldrd	r2, [r3]
    65a0:	strd	r2, [r1]
    65a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    65a8:	sub	sp, fp, #4
    65ac:	ldr	fp, [sp]
    65b0:	add	sp, sp, #4
    65b4:	pop	{pc}		; (ldr pc, [sp], #4)

000065b8 <Fantasy_Character_union_vec_at_as_string>:
    65b8:	str	fp, [sp, #-8]!
    65bc:	str	lr, [sp, #4]
    65c0:	add	fp, sp, #4
    65c4:	sub	sp, sp, #16
    65c8:	sub	r3, fp, #12
    65cc:	stm	r3, {r0, r1}
    65d0:	str	r2, [fp, #-16]
    65d4:	ldr	r3, [fp, #-8]
    65d8:	ldr	r1, [fp, #-16]
    65dc:	mov	r0, r3
    65e0:	bl	cec <flatbuffers_generic_vec_at_as_string>
    65e4:	mov	r3, r0
    65e8:	mov	r0, r3
    65ec:	sub	sp, fp, #4
    65f0:	ldr	fp, [sp]
    65f4:	add	sp, sp, #4
    65f8:	pop	{pc}		; (ldr pc, [sp], #4)

000065fc <Fantasy_Movie_as_root>:
    65fc:	str	fp, [sp, #-8]!
    6600:	str	lr, [sp, #4]
    6604:	add	fp, sp, #4
    6608:	sub	sp, sp, #16
    660c:	str	r0, [fp, #-16]
    6610:	movw	r3, #0
    6614:	movt	r3, #0
    6618:	str	r3, [fp, #-8]
    661c:	ldr	r3, [fp, #-16]
    6620:	cmp	r3, #0
    6624:	beq	6658 <Fantasy_Movie_as_root+0x5c>
    6628:	ldr	r1, [fp, #-8]
    662c:	ldr	r0, [fp, #-16]
    6630:	bl	1c44 <flatbuffers_has_identifier>
    6634:	mov	r3, r0
    6638:	cmp	r3, #0
    663c:	beq	6658 <Fantasy_Movie_as_root+0x5c>
    6640:	ldr	r0, [fp, #-16]
    6644:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    6648:	mov	r2, r0
    664c:	ldr	r3, [fp, #-16]
    6650:	add	r3, r3, r2
    6654:	b	665c <Fantasy_Movie_as_root+0x60>
    6658:	mov	r3, #0
    665c:	mov	r0, r3
    6660:	sub	sp, fp, #4
    6664:	ldr	fp, [sp]
    6668:	add	sp, sp, #4
    666c:	pop	{pc}		; (ldr pc, [sp], #4)

00006670 <Fantasy_Movie_main_character_type>:
    6670:	str	fp, [sp, #-8]!
    6674:	str	lr, [sp, #4]
    6678:	add	fp, sp, #4
    667c:	sub	sp, sp, #16
    6680:	str	r0, [fp, #-16]
    6684:	mov	r3, #0
    6688:	strh	r3, [fp, #-6]
    668c:	ldr	r3, [fp, #-16]
    6690:	cmp	r3, #0
    6694:	bne	66b8 <Fantasy_Movie_main_character_type+0x48>
    6698:	movw	r3, #0
    669c:	movt	r3, #0
    66a0:	movw	r2, #819	; 0x333
    66a4:	movw	r1, #0
    66a8:	movt	r1, #0
    66ac:	movw	r0, #0
    66b0:	movt	r0, #0
    66b4:	bl	0 <__assert_fail>
    66b8:	mov	r3, #0
    66bc:	strh	r3, [fp, #-8]
    66c0:	ldr	r0, [fp, #-16]
    66c4:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    66c8:	mov	r3, r0
    66cc:	rsb	r3, r3, #0
    66d0:	ldr	r2, [fp, #-16]
    66d4:	add	r3, r2, r3
    66d8:	str	r3, [fp, #-12]
    66dc:	ldr	r0, [fp, #-12]
    66e0:	bl	848 <__flatbuffers_voffset_read_from_pe>
    66e4:	mov	r3, r0
    66e8:	mov	r2, r3
    66ec:	ldrh	r3, [fp, #-8]
    66f0:	add	r3, r3, #3
    66f4:	lsl	r3, r3, #1
    66f8:	cmp	r2, r3
    66fc:	bcc	6724 <Fantasy_Movie_main_character_type+0xb4>
    6700:	ldrh	r3, [fp, #-8]
    6704:	add	r3, r3, #2
    6708:	lsl	r3, r3, #1
    670c:	ldr	r2, [fp, #-12]
    6710:	add	r3, r2, r3
    6714:	mov	r0, r3
    6718:	bl	848 <__flatbuffers_voffset_read_from_pe>
    671c:	mov	r3, r0
    6720:	strh	r3, [fp, #-6]
    6724:	ldrh	r3, [fp, #-6]
    6728:	cmp	r3, #0
    672c:	beq	674c <Fantasy_Movie_main_character_type+0xdc>
    6730:	ldrh	r3, [fp, #-6]
    6734:	ldr	r2, [fp, #-16]
    6738:	add	r3, r2, r3
    673c:	mov	r0, r3
    6740:	bl	8ac <__flatbuffers_utype_read_from_pe>
    6744:	mov	r3, r0
    6748:	b	6750 <Fantasy_Movie_main_character_type+0xe0>
    674c:	mov	r3, #0
    6750:	mov	r0, r3
    6754:	sub	sp, fp, #4
    6758:	ldr	fp, [sp]
    675c:	add	sp, sp, #4
    6760:	pop	{pc}		; (ldr pc, [sp], #4)

00006764 <Fantasy_Movie_main_character>:
    6764:	str	fp, [sp, #-8]!
    6768:	str	lr, [sp, #4]
    676c:	add	fp, sp, #4
    6770:	sub	sp, sp, #24
    6774:	str	r0, [fp, #-24]	; 0xffffffe8
    6778:	mov	r3, #0
    677c:	strh	r3, [fp, #-6]
    6780:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6784:	cmp	r3, #0
    6788:	bne	67ac <Fantasy_Movie_main_character+0x48>
    678c:	movw	r3, #0
    6790:	movt	r3, #0
    6794:	movw	r2, #819	; 0x333
    6798:	movw	r1, #0
    679c:	movt	r1, #0
    67a0:	movw	r0, #0
    67a4:	movt	r0, #0
    67a8:	bl	0 <__assert_fail>
    67ac:	mov	r3, #1
    67b0:	strh	r3, [fp, #-8]
    67b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    67b8:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    67bc:	mov	r3, r0
    67c0:	rsb	r3, r3, #0
    67c4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    67c8:	add	r3, r2, r3
    67cc:	str	r3, [fp, #-12]
    67d0:	ldr	r0, [fp, #-12]
    67d4:	bl	848 <__flatbuffers_voffset_read_from_pe>
    67d8:	mov	r3, r0
    67dc:	mov	r2, r3
    67e0:	ldrh	r3, [fp, #-8]
    67e4:	add	r3, r3, #3
    67e8:	lsl	r3, r3, #1
    67ec:	cmp	r2, r3
    67f0:	bcc	6818 <Fantasy_Movie_main_character+0xb4>
    67f4:	ldrh	r3, [fp, #-8]
    67f8:	add	r3, r3, #2
    67fc:	lsl	r3, r3, #1
    6800:	ldr	r2, [fp, #-12]
    6804:	add	r3, r2, r3
    6808:	mov	r0, r3
    680c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    6810:	mov	r3, r0
    6814:	strh	r3, [fp, #-6]
    6818:	ldrh	r3, [fp, #-6]
    681c:	cmp	r3, #0
    6820:	beq	684c <Fantasy_Movie_main_character+0xe8>
    6824:	ldrh	r3, [fp, #-6]
    6828:	ldr	r2, [fp, #-24]	; 0xffffffe8
    682c:	add	r3, r2, r3
    6830:	str	r3, [fp, #-16]
    6834:	ldr	r0, [fp, #-16]
    6838:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    683c:	mov	r2, r0
    6840:	ldr	r3, [fp, #-16]
    6844:	add	r3, r3, r2
    6848:	b	6850 <Fantasy_Movie_main_character+0xec>
    684c:	mov	r3, #0
    6850:	mov	r0, r3
    6854:	sub	sp, fp, #4
    6858:	ldr	fp, [sp]
    685c:	add	sp, sp, #4
    6860:	pop	{pc}		; (ldr pc, [sp], #4)

00006864 <Fantasy_Movie_main_character_is_present>:
    6864:	str	fp, [sp, #-8]!
    6868:	str	lr, [sp, #4]
    686c:	add	fp, sp, #4
    6870:	sub	sp, sp, #16
    6874:	str	r0, [fp, #-16]
    6878:	mov	r3, #0
    687c:	strh	r3, [fp, #-6]
    6880:	ldr	r3, [fp, #-16]
    6884:	cmp	r3, #0
    6888:	bne	68ac <Fantasy_Movie_main_character_is_present+0x48>
    688c:	movw	r3, #0
    6890:	movt	r3, #0
    6894:	movw	r2, #819	; 0x333
    6898:	movw	r1, #0
    689c:	movt	r1, #0
    68a0:	movw	r0, #0
    68a4:	movt	r0, #0
    68a8:	bl	0 <__assert_fail>
    68ac:	mov	r3, #1
    68b0:	strh	r3, [fp, #-8]
    68b4:	ldr	r0, [fp, #-16]
    68b8:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    68bc:	mov	r3, r0
    68c0:	rsb	r3, r3, #0
    68c4:	ldr	r2, [fp, #-16]
    68c8:	add	r3, r2, r3
    68cc:	str	r3, [fp, #-12]
    68d0:	ldr	r0, [fp, #-12]
    68d4:	bl	848 <__flatbuffers_voffset_read_from_pe>
    68d8:	mov	r3, r0
    68dc:	mov	r2, r3
    68e0:	ldrh	r3, [fp, #-8]
    68e4:	add	r3, r3, #3
    68e8:	lsl	r3, r3, #1
    68ec:	cmp	r2, r3
    68f0:	bcc	6918 <Fantasy_Movie_main_character_is_present+0xb4>
    68f4:	ldrh	r3, [fp, #-8]
    68f8:	add	r3, r3, #2
    68fc:	lsl	r3, r3, #1
    6900:	ldr	r2, [fp, #-12]
    6904:	add	r3, r2, r3
    6908:	mov	r0, r3
    690c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    6910:	mov	r3, r0
    6914:	strh	r3, [fp, #-6]
    6918:	ldrh	r3, [fp, #-6]
    691c:	cmp	r3, #0
    6920:	movne	r3, #1
    6924:	moveq	r3, #0
    6928:	uxtb	r3, r3
    692c:	mov	r0, r3
    6930:	sub	sp, fp, #4
    6934:	ldr	fp, [sp]
    6938:	add	sp, sp, #4
    693c:	pop	{pc}		; (ldr pc, [sp], #4)

00006940 <Fantasy_Movie_main_character_union>:
    6940:	str	fp, [sp, #-8]!
    6944:	str	lr, [sp, #4]
    6948:	add	fp, sp, #4
    694c:	sub	sp, sp, #16
    6950:	str	r0, [fp, #-16]
    6954:	str	r1, [fp, #-20]	; 0xffffffec
    6958:	mov	r3, #0
    695c:	strb	r3, [fp, #-12]
    6960:	mov	r3, #0
    6964:	str	r3, [fp, #-8]
    6968:	ldr	r0, [fp, #-20]	; 0xffffffec
    696c:	bl	6670 <Fantasy_Movie_main_character_type>
    6970:	mov	r3, r0
    6974:	strb	r3, [fp, #-12]
    6978:	ldrb	r3, [fp, #-12]
    697c:	cmp	r3, #0
    6980:	bne	699c <Fantasy_Movie_main_character_union+0x5c>
    6984:	ldr	r3, [fp, #-16]
    6988:	mov	r1, r3
    698c:	sub	r3, fp, #12
    6990:	ldrd	r2, [r3]
    6994:	strd	r2, [r1]
    6998:	b	69c0 <Fantasy_Movie_main_character_union+0x80>
    699c:	ldr	r0, [fp, #-20]	; 0xffffffec
    69a0:	bl	6764 <Fantasy_Movie_main_character>
    69a4:	mov	r3, r0
    69a8:	str	r3, [fp, #-8]
    69ac:	ldr	r3, [fp, #-16]
    69b0:	mov	r1, r3
    69b4:	sub	r3, fp, #12
    69b8:	ldrd	r2, [r3]
    69bc:	strd	r2, [r1]
    69c0:	ldr	r0, [fp, #-16]
    69c4:	sub	sp, fp, #4
    69c8:	ldr	fp, [sp]
    69cc:	add	sp, sp, #4
    69d0:	pop	{pc}		; (ldr pc, [sp], #4)

000069d4 <Fantasy_Movie_antagonist_type>:
    69d4:	str	fp, [sp, #-8]!
    69d8:	str	lr, [sp, #4]
    69dc:	add	fp, sp, #4
    69e0:	sub	sp, sp, #16
    69e4:	str	r0, [fp, #-16]
    69e8:	mov	r3, #0
    69ec:	strh	r3, [fp, #-6]
    69f0:	ldr	r3, [fp, #-16]
    69f4:	cmp	r3, #0
    69f8:	bne	6a1c <Fantasy_Movie_antagonist_type+0x48>
    69fc:	movw	r3, #0
    6a00:	movt	r3, #0
    6a04:	mov	r2, #820	; 0x334
    6a08:	movw	r1, #0
    6a0c:	movt	r1, #0
    6a10:	movw	r0, #0
    6a14:	movt	r0, #0
    6a18:	bl	0 <__assert_fail>
    6a1c:	mov	r3, #2
    6a20:	strh	r3, [fp, #-8]
    6a24:	ldr	r0, [fp, #-16]
    6a28:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    6a2c:	mov	r3, r0
    6a30:	rsb	r3, r3, #0
    6a34:	ldr	r2, [fp, #-16]
    6a38:	add	r3, r2, r3
    6a3c:	str	r3, [fp, #-12]
    6a40:	ldr	r0, [fp, #-12]
    6a44:	bl	848 <__flatbuffers_voffset_read_from_pe>
    6a48:	mov	r3, r0
    6a4c:	mov	r2, r3
    6a50:	ldrh	r3, [fp, #-8]
    6a54:	add	r3, r3, #3
    6a58:	lsl	r3, r3, #1
    6a5c:	cmp	r2, r3
    6a60:	bcc	6a88 <Fantasy_Movie_antagonist_type+0xb4>
    6a64:	ldrh	r3, [fp, #-8]
    6a68:	add	r3, r3, #2
    6a6c:	lsl	r3, r3, #1
    6a70:	ldr	r2, [fp, #-12]
    6a74:	add	r3, r2, r3
    6a78:	mov	r0, r3
    6a7c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    6a80:	mov	r3, r0
    6a84:	strh	r3, [fp, #-6]
    6a88:	ldrh	r3, [fp, #-6]
    6a8c:	cmp	r3, #0
    6a90:	beq	6ab0 <Fantasy_Movie_antagonist_type+0xdc>
    6a94:	ldrh	r3, [fp, #-6]
    6a98:	ldr	r2, [fp, #-16]
    6a9c:	add	r3, r2, r3
    6aa0:	mov	r0, r3
    6aa4:	bl	8ac <__flatbuffers_utype_read_from_pe>
    6aa8:	mov	r3, r0
    6aac:	b	6ab4 <Fantasy_Movie_antagonist_type+0xe0>
    6ab0:	mov	r3, #0
    6ab4:	mov	r0, r3
    6ab8:	sub	sp, fp, #4
    6abc:	ldr	fp, [sp]
    6ac0:	add	sp, sp, #4
    6ac4:	pop	{pc}		; (ldr pc, [sp], #4)

00006ac8 <Fantasy_Movie_antagonist>:
    6ac8:	str	fp, [sp, #-8]!
    6acc:	str	lr, [sp, #4]
    6ad0:	add	fp, sp, #4
    6ad4:	sub	sp, sp, #24
    6ad8:	str	r0, [fp, #-24]	; 0xffffffe8
    6adc:	mov	r3, #0
    6ae0:	strh	r3, [fp, #-6]
    6ae4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6ae8:	cmp	r3, #0
    6aec:	bne	6b10 <Fantasy_Movie_antagonist+0x48>
    6af0:	movw	r3, #0
    6af4:	movt	r3, #0
    6af8:	mov	r2, #820	; 0x334
    6afc:	movw	r1, #0
    6b00:	movt	r1, #0
    6b04:	movw	r0, #0
    6b08:	movt	r0, #0
    6b0c:	bl	0 <__assert_fail>
    6b10:	mov	r3, #3
    6b14:	strh	r3, [fp, #-8]
    6b18:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6b1c:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    6b20:	mov	r3, r0
    6b24:	rsb	r3, r3, #0
    6b28:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6b2c:	add	r3, r2, r3
    6b30:	str	r3, [fp, #-12]
    6b34:	ldr	r0, [fp, #-12]
    6b38:	bl	848 <__flatbuffers_voffset_read_from_pe>
    6b3c:	mov	r3, r0
    6b40:	mov	r2, r3
    6b44:	ldrh	r3, [fp, #-8]
    6b48:	add	r3, r3, #3
    6b4c:	lsl	r3, r3, #1
    6b50:	cmp	r2, r3
    6b54:	bcc	6b7c <Fantasy_Movie_antagonist+0xb4>
    6b58:	ldrh	r3, [fp, #-8]
    6b5c:	add	r3, r3, #2
    6b60:	lsl	r3, r3, #1
    6b64:	ldr	r2, [fp, #-12]
    6b68:	add	r3, r2, r3
    6b6c:	mov	r0, r3
    6b70:	bl	848 <__flatbuffers_voffset_read_from_pe>
    6b74:	mov	r3, r0
    6b78:	strh	r3, [fp, #-6]
    6b7c:	ldrh	r3, [fp, #-6]
    6b80:	cmp	r3, #0
    6b84:	beq	6bb0 <Fantasy_Movie_antagonist+0xe8>
    6b88:	ldrh	r3, [fp, #-6]
    6b8c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6b90:	add	r3, r2, r3
    6b94:	str	r3, [fp, #-16]
    6b98:	ldr	r0, [fp, #-16]
    6b9c:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    6ba0:	mov	r2, r0
    6ba4:	ldr	r3, [fp, #-16]
    6ba8:	add	r3, r3, r2
    6bac:	b	6bb4 <Fantasy_Movie_antagonist+0xec>
    6bb0:	mov	r3, #0
    6bb4:	mov	r0, r3
    6bb8:	sub	sp, fp, #4
    6bbc:	ldr	fp, [sp]
    6bc0:	add	sp, sp, #4
    6bc4:	pop	{pc}		; (ldr pc, [sp], #4)

00006bc8 <Fantasy_Movie_side_kick_type>:
    6bc8:	str	fp, [sp, #-8]!
    6bcc:	str	lr, [sp, #4]
    6bd0:	add	fp, sp, #4
    6bd4:	sub	sp, sp, #16
    6bd8:	str	r0, [fp, #-16]
    6bdc:	mov	r3, #0
    6be0:	strh	r3, [fp, #-6]
    6be4:	ldr	r3, [fp, #-16]
    6be8:	cmp	r3, #0
    6bec:	bne	6c10 <Fantasy_Movie_side_kick_type+0x48>
    6bf0:	movw	r3, #0
    6bf4:	movt	r3, #0
    6bf8:	movw	r2, #821	; 0x335
    6bfc:	movw	r1, #0
    6c00:	movt	r1, #0
    6c04:	movw	r0, #0
    6c08:	movt	r0, #0
    6c0c:	bl	0 <__assert_fail>
    6c10:	mov	r3, #4
    6c14:	strh	r3, [fp, #-8]
    6c18:	ldr	r0, [fp, #-16]
    6c1c:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    6c20:	mov	r3, r0
    6c24:	rsb	r3, r3, #0
    6c28:	ldr	r2, [fp, #-16]
    6c2c:	add	r3, r2, r3
    6c30:	str	r3, [fp, #-12]
    6c34:	ldr	r0, [fp, #-12]
    6c38:	bl	848 <__flatbuffers_voffset_read_from_pe>
    6c3c:	mov	r3, r0
    6c40:	mov	r2, r3
    6c44:	ldrh	r3, [fp, #-8]
    6c48:	add	r3, r3, #3
    6c4c:	lsl	r3, r3, #1
    6c50:	cmp	r2, r3
    6c54:	bcc	6c7c <Fantasy_Movie_side_kick_type+0xb4>
    6c58:	ldrh	r3, [fp, #-8]
    6c5c:	add	r3, r3, #2
    6c60:	lsl	r3, r3, #1
    6c64:	ldr	r2, [fp, #-12]
    6c68:	add	r3, r2, r3
    6c6c:	mov	r0, r3
    6c70:	bl	848 <__flatbuffers_voffset_read_from_pe>
    6c74:	mov	r3, r0
    6c78:	strh	r3, [fp, #-6]
    6c7c:	ldrh	r3, [fp, #-6]
    6c80:	cmp	r3, #0
    6c84:	beq	6ca4 <Fantasy_Movie_side_kick_type+0xdc>
    6c88:	ldrh	r3, [fp, #-6]
    6c8c:	ldr	r2, [fp, #-16]
    6c90:	add	r3, r2, r3
    6c94:	mov	r0, r3
    6c98:	bl	8ac <__flatbuffers_utype_read_from_pe>
    6c9c:	mov	r3, r0
    6ca0:	b	6ca8 <Fantasy_Movie_side_kick_type+0xe0>
    6ca4:	mov	r3, #0
    6ca8:	mov	r0, r3
    6cac:	sub	sp, fp, #4
    6cb0:	ldr	fp, [sp]
    6cb4:	add	sp, sp, #4
    6cb8:	pop	{pc}		; (ldr pc, [sp], #4)

00006cbc <Fantasy_Movie_side_kick>:
    6cbc:	str	fp, [sp, #-8]!
    6cc0:	str	lr, [sp, #4]
    6cc4:	add	fp, sp, #4
    6cc8:	sub	sp, sp, #24
    6ccc:	str	r0, [fp, #-24]	; 0xffffffe8
    6cd0:	mov	r3, #0
    6cd4:	strh	r3, [fp, #-6]
    6cd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6cdc:	cmp	r3, #0
    6ce0:	bne	6d04 <Fantasy_Movie_side_kick+0x48>
    6ce4:	movw	r3, #0
    6ce8:	movt	r3, #0
    6cec:	movw	r2, #821	; 0x335
    6cf0:	movw	r1, #0
    6cf4:	movt	r1, #0
    6cf8:	movw	r0, #0
    6cfc:	movt	r0, #0
    6d00:	bl	0 <__assert_fail>
    6d04:	mov	r3, #5
    6d08:	strh	r3, [fp, #-8]
    6d0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6d10:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    6d14:	mov	r3, r0
    6d18:	rsb	r3, r3, #0
    6d1c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6d20:	add	r3, r2, r3
    6d24:	str	r3, [fp, #-12]
    6d28:	ldr	r0, [fp, #-12]
    6d2c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    6d30:	mov	r3, r0
    6d34:	mov	r2, r3
    6d38:	ldrh	r3, [fp, #-8]
    6d3c:	add	r3, r3, #3
    6d40:	lsl	r3, r3, #1
    6d44:	cmp	r2, r3
    6d48:	bcc	6d70 <Fantasy_Movie_side_kick+0xb4>
    6d4c:	ldrh	r3, [fp, #-8]
    6d50:	add	r3, r3, #2
    6d54:	lsl	r3, r3, #1
    6d58:	ldr	r2, [fp, #-12]
    6d5c:	add	r3, r2, r3
    6d60:	mov	r0, r3
    6d64:	bl	848 <__flatbuffers_voffset_read_from_pe>
    6d68:	mov	r3, r0
    6d6c:	strh	r3, [fp, #-6]
    6d70:	ldrh	r3, [fp, #-6]
    6d74:	cmp	r3, #0
    6d78:	beq	6da4 <Fantasy_Movie_side_kick+0xe8>
    6d7c:	ldrh	r3, [fp, #-6]
    6d80:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6d84:	add	r3, r2, r3
    6d88:	str	r3, [fp, #-16]
    6d8c:	ldr	r0, [fp, #-16]
    6d90:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    6d94:	mov	r2, r0
    6d98:	ldr	r3, [fp, #-16]
    6d9c:	add	r3, r3, r2
    6da0:	b	6da8 <Fantasy_Movie_side_kick+0xec>
    6da4:	mov	r3, #0
    6da8:	mov	r0, r3
    6dac:	sub	sp, fp, #4
    6db0:	ldr	fp, [sp]
    6db4:	add	sp, sp, #4
    6db8:	pop	{pc}		; (ldr pc, [sp], #4)

00006dbc <Fantasy_Movie_side_kick_union>:
    6dbc:	str	fp, [sp, #-8]!
    6dc0:	str	lr, [sp, #4]
    6dc4:	add	fp, sp, #4
    6dc8:	sub	sp, sp, #16
    6dcc:	str	r0, [fp, #-16]
    6dd0:	str	r1, [fp, #-20]	; 0xffffffec
    6dd4:	mov	r3, #0
    6dd8:	strb	r3, [fp, #-12]
    6ddc:	mov	r3, #0
    6de0:	str	r3, [fp, #-8]
    6de4:	ldr	r0, [fp, #-20]	; 0xffffffec
    6de8:	bl	6bc8 <Fantasy_Movie_side_kick_type>
    6dec:	mov	r3, r0
    6df0:	strb	r3, [fp, #-12]
    6df4:	ldrb	r3, [fp, #-12]
    6df8:	cmp	r3, #0
    6dfc:	bne	6e18 <Fantasy_Movie_side_kick_union+0x5c>
    6e00:	ldr	r3, [fp, #-16]
    6e04:	mov	r1, r3
    6e08:	sub	r3, fp, #12
    6e0c:	ldrd	r2, [r3]
    6e10:	strd	r2, [r1]
    6e14:	b	6e3c <Fantasy_Movie_side_kick_union+0x80>
    6e18:	ldr	r0, [fp, #-20]	; 0xffffffec
    6e1c:	bl	6cbc <Fantasy_Movie_side_kick>
    6e20:	mov	r3, r0
    6e24:	str	r3, [fp, #-8]
    6e28:	ldr	r3, [fp, #-16]
    6e2c:	mov	r1, r3
    6e30:	sub	r3, fp, #12
    6e34:	ldrd	r2, [r3]
    6e38:	strd	r2, [r1]
    6e3c:	ldr	r0, [fp, #-16]
    6e40:	sub	sp, fp, #4
    6e44:	ldr	fp, [sp]
    6e48:	add	sp, sp, #4
    6e4c:	pop	{pc}		; (ldr pc, [sp], #4)

00006e50 <Fantasy_Movie_side_kick_as_string>:
    6e50:	str	fp, [sp, #-8]!
    6e54:	str	lr, [sp, #4]
    6e58:	add	fp, sp, #4
    6e5c:	sub	sp, sp, #8
    6e60:	str	r0, [fp, #-8]
    6e64:	ldr	r0, [fp, #-8]
    6e68:	bl	6cbc <Fantasy_Movie_side_kick>
    6e6c:	mov	r3, r0
    6e70:	mov	r0, r3
    6e74:	bl	c14 <flatbuffers_string_cast_from_generic>
    6e78:	mov	r3, r0
    6e7c:	mov	r0, r3
    6e80:	sub	sp, fp, #4
    6e84:	ldr	fp, [sp]
    6e88:	add	sp, sp, #4
    6e8c:	pop	{pc}		; (ldr pc, [sp], #4)

00006e90 <Fantasy_Movie_cameo_type>:
    6e90:	str	fp, [sp, #-8]!
    6e94:	str	lr, [sp, #4]
    6e98:	add	fp, sp, #4
    6e9c:	sub	sp, sp, #16
    6ea0:	str	r0, [fp, #-16]
    6ea4:	mov	r3, #0
    6ea8:	strh	r3, [fp, #-6]
    6eac:	ldr	r3, [fp, #-16]
    6eb0:	cmp	r3, #0
    6eb4:	bne	6ed8 <Fantasy_Movie_cameo_type+0x48>
    6eb8:	movw	r3, #0
    6ebc:	movt	r3, #0
    6ec0:	movw	r2, #822	; 0x336
    6ec4:	movw	r1, #0
    6ec8:	movt	r1, #0
    6ecc:	movw	r0, #0
    6ed0:	movt	r0, #0
    6ed4:	bl	0 <__assert_fail>
    6ed8:	mov	r3, #6
    6edc:	strh	r3, [fp, #-8]
    6ee0:	ldr	r0, [fp, #-16]
    6ee4:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    6ee8:	mov	r3, r0
    6eec:	rsb	r3, r3, #0
    6ef0:	ldr	r2, [fp, #-16]
    6ef4:	add	r3, r2, r3
    6ef8:	str	r3, [fp, #-12]
    6efc:	ldr	r0, [fp, #-12]
    6f00:	bl	848 <__flatbuffers_voffset_read_from_pe>
    6f04:	mov	r3, r0
    6f08:	mov	r2, r3
    6f0c:	ldrh	r3, [fp, #-8]
    6f10:	add	r3, r3, #3
    6f14:	lsl	r3, r3, #1
    6f18:	cmp	r2, r3
    6f1c:	bcc	6f44 <Fantasy_Movie_cameo_type+0xb4>
    6f20:	ldrh	r3, [fp, #-8]
    6f24:	add	r3, r3, #2
    6f28:	lsl	r3, r3, #1
    6f2c:	ldr	r2, [fp, #-12]
    6f30:	add	r3, r2, r3
    6f34:	mov	r0, r3
    6f38:	bl	848 <__flatbuffers_voffset_read_from_pe>
    6f3c:	mov	r3, r0
    6f40:	strh	r3, [fp, #-6]
    6f44:	ldrh	r3, [fp, #-6]
    6f48:	cmp	r3, #0
    6f4c:	beq	6f6c <Fantasy_Movie_cameo_type+0xdc>
    6f50:	ldrh	r3, [fp, #-6]
    6f54:	ldr	r2, [fp, #-16]
    6f58:	add	r3, r2, r3
    6f5c:	mov	r0, r3
    6f60:	bl	8ac <__flatbuffers_utype_read_from_pe>
    6f64:	mov	r3, r0
    6f68:	b	6f70 <Fantasy_Movie_cameo_type+0xe0>
    6f6c:	mov	r3, #0
    6f70:	mov	r0, r3
    6f74:	sub	sp, fp, #4
    6f78:	ldr	fp, [sp]
    6f7c:	add	sp, sp, #4
    6f80:	pop	{pc}		; (ldr pc, [sp], #4)

00006f84 <Fantasy_Movie_cameo>:
    6f84:	str	fp, [sp, #-8]!
    6f88:	str	lr, [sp, #4]
    6f8c:	add	fp, sp, #4
    6f90:	sub	sp, sp, #24
    6f94:	str	r0, [fp, #-24]	; 0xffffffe8
    6f98:	mov	r3, #0
    6f9c:	strh	r3, [fp, #-6]
    6fa0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6fa4:	cmp	r3, #0
    6fa8:	bne	6fcc <Fantasy_Movie_cameo+0x48>
    6fac:	movw	r3, #0
    6fb0:	movt	r3, #0
    6fb4:	movw	r2, #822	; 0x336
    6fb8:	movw	r1, #0
    6fbc:	movt	r1, #0
    6fc0:	movw	r0, #0
    6fc4:	movt	r0, #0
    6fc8:	bl	0 <__assert_fail>
    6fcc:	mov	r3, #7
    6fd0:	strh	r3, [fp, #-8]
    6fd4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6fd8:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    6fdc:	mov	r3, r0
    6fe0:	rsb	r3, r3, #0
    6fe4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6fe8:	add	r3, r2, r3
    6fec:	str	r3, [fp, #-12]
    6ff0:	ldr	r0, [fp, #-12]
    6ff4:	bl	848 <__flatbuffers_voffset_read_from_pe>
    6ff8:	mov	r3, r0
    6ffc:	mov	r2, r3
    7000:	ldrh	r3, [fp, #-8]
    7004:	add	r3, r3, #3
    7008:	lsl	r3, r3, #1
    700c:	cmp	r2, r3
    7010:	bcc	7038 <Fantasy_Movie_cameo+0xb4>
    7014:	ldrh	r3, [fp, #-8]
    7018:	add	r3, r3, #2
    701c:	lsl	r3, r3, #1
    7020:	ldr	r2, [fp, #-12]
    7024:	add	r3, r2, r3
    7028:	mov	r0, r3
    702c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    7030:	mov	r3, r0
    7034:	strh	r3, [fp, #-6]
    7038:	ldrh	r3, [fp, #-6]
    703c:	cmp	r3, #0
    7040:	beq	706c <Fantasy_Movie_cameo+0xe8>
    7044:	ldrh	r3, [fp, #-6]
    7048:	ldr	r2, [fp, #-24]	; 0xffffffe8
    704c:	add	r3, r2, r3
    7050:	str	r3, [fp, #-16]
    7054:	ldr	r0, [fp, #-16]
    7058:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    705c:	mov	r2, r0
    7060:	ldr	r3, [fp, #-16]
    7064:	add	r3, r3, r2
    7068:	b	7070 <Fantasy_Movie_cameo+0xec>
    706c:	mov	r3, #0
    7070:	mov	r0, r3
    7074:	sub	sp, fp, #4
    7078:	ldr	fp, [sp]
    707c:	add	sp, sp, #4
    7080:	pop	{pc}		; (ldr pc, [sp], #4)

00007084 <Fantasy_Movie_characters_type>:
    7084:	str	fp, [sp, #-8]!
    7088:	str	lr, [sp, #4]
    708c:	add	fp, sp, #4
    7090:	sub	sp, sp, #24
    7094:	str	r0, [fp, #-24]	; 0xffffffe8
    7098:	mov	r3, #0
    709c:	strh	r3, [fp, #-6]
    70a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    70a4:	cmp	r3, #0
    70a8:	bne	70cc <Fantasy_Movie_characters_type+0x48>
    70ac:	movw	r3, #0
    70b0:	movt	r3, #0
    70b4:	movw	r2, #823	; 0x337
    70b8:	movw	r1, #0
    70bc:	movt	r1, #0
    70c0:	movw	r0, #0
    70c4:	movt	r0, #0
    70c8:	bl	0 <__assert_fail>
    70cc:	mov	r3, #8
    70d0:	strh	r3, [fp, #-8]
    70d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    70d8:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    70dc:	mov	r3, r0
    70e0:	rsb	r3, r3, #0
    70e4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    70e8:	add	r3, r2, r3
    70ec:	str	r3, [fp, #-12]
    70f0:	ldr	r0, [fp, #-12]
    70f4:	bl	848 <__flatbuffers_voffset_read_from_pe>
    70f8:	mov	r3, r0
    70fc:	mov	r2, r3
    7100:	ldrh	r3, [fp, #-8]
    7104:	add	r3, r3, #3
    7108:	lsl	r3, r3, #1
    710c:	cmp	r2, r3
    7110:	bcc	7138 <Fantasy_Movie_characters_type+0xb4>
    7114:	ldrh	r3, [fp, #-8]
    7118:	add	r3, r3, #2
    711c:	lsl	r3, r3, #1
    7120:	ldr	r2, [fp, #-12]
    7124:	add	r3, r2, r3
    7128:	mov	r0, r3
    712c:	bl	848 <__flatbuffers_voffset_read_from_pe>
    7130:	mov	r3, r0
    7134:	strh	r3, [fp, #-6]
    7138:	ldrh	r3, [fp, #-6]
    713c:	cmp	r3, #0
    7140:	beq	7170 <Fantasy_Movie_characters_type+0xec>
    7144:	ldrh	r3, [fp, #-6]
    7148:	ldr	r2, [fp, #-24]	; 0xffffffe8
    714c:	add	r3, r2, r3
    7150:	str	r3, [fp, #-16]
    7154:	ldr	r0, [fp, #-16]
    7158:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    715c:	mov	r3, r0
    7160:	add	r3, r3, #4
    7164:	ldr	r2, [fp, #-16]
    7168:	add	r3, r2, r3
    716c:	b	7174 <Fantasy_Movie_characters_type+0xf0>
    7170:	mov	r3, #0
    7174:	mov	r0, r3
    7178:	sub	sp, fp, #4
    717c:	ldr	fp, [sp]
    7180:	add	sp, sp, #4
    7184:	pop	{pc}		; (ldr pc, [sp], #4)

00007188 <Fantasy_Movie_characters>:
    7188:	str	fp, [sp, #-8]!
    718c:	str	lr, [sp, #4]
    7190:	add	fp, sp, #4
    7194:	sub	sp, sp, #24
    7198:	str	r0, [fp, #-24]	; 0xffffffe8
    719c:	mov	r3, #0
    71a0:	strh	r3, [fp, #-6]
    71a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    71a8:	cmp	r3, #0
    71ac:	bne	71d0 <Fantasy_Movie_characters+0x48>
    71b0:	movw	r3, #0
    71b4:	movt	r3, #0
    71b8:	movw	r2, #823	; 0x337
    71bc:	movw	r1, #0
    71c0:	movt	r1, #0
    71c4:	movw	r0, #0
    71c8:	movt	r0, #0
    71cc:	bl	0 <__assert_fail>
    71d0:	mov	r3, #9
    71d4:	strh	r3, [fp, #-8]
    71d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    71dc:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    71e0:	mov	r3, r0
    71e4:	rsb	r3, r3, #0
    71e8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    71ec:	add	r3, r2, r3
    71f0:	str	r3, [fp, #-12]
    71f4:	ldr	r0, [fp, #-12]
    71f8:	bl	848 <__flatbuffers_voffset_read_from_pe>
    71fc:	mov	r3, r0
    7200:	mov	r2, r3
    7204:	ldrh	r3, [fp, #-8]
    7208:	add	r3, r3, #3
    720c:	lsl	r3, r3, #1
    7210:	cmp	r2, r3
    7214:	bcc	723c <Fantasy_Movie_characters+0xb4>
    7218:	ldrh	r3, [fp, #-8]
    721c:	add	r3, r3, #2
    7220:	lsl	r3, r3, #1
    7224:	ldr	r2, [fp, #-12]
    7228:	add	r3, r2, r3
    722c:	mov	r0, r3
    7230:	bl	848 <__flatbuffers_voffset_read_from_pe>
    7234:	mov	r3, r0
    7238:	strh	r3, [fp, #-6]
    723c:	ldrh	r3, [fp, #-6]
    7240:	cmp	r3, #0
    7244:	beq	7274 <Fantasy_Movie_characters+0xec>
    7248:	ldrh	r3, [fp, #-6]
    724c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7250:	add	r3, r2, r3
    7254:	str	r3, [fp, #-16]
    7258:	ldr	r0, [fp, #-16]
    725c:	bl	744 <__flatbuffers_uoffset_read_from_pe>
    7260:	mov	r3, r0
    7264:	add	r3, r3, #4
    7268:	ldr	r2, [fp, #-16]
    726c:	add	r3, r2, r3
    7270:	b	7278 <Fantasy_Movie_characters+0xf0>
    7274:	mov	r3, #0
    7278:	mov	r0, r3
    727c:	sub	sp, fp, #4
    7280:	ldr	fp, [sp]
    7284:	add	sp, sp, #4
    7288:	pop	{pc}		; (ldr pc, [sp], #4)

0000728c <Fantasy_Movie_characters_is_present>:
    728c:	str	fp, [sp, #-8]!
    7290:	str	lr, [sp, #4]
    7294:	add	fp, sp, #4
    7298:	sub	sp, sp, #16
    729c:	str	r0, [fp, #-16]
    72a0:	mov	r3, #0
    72a4:	strh	r3, [fp, #-6]
    72a8:	ldr	r3, [fp, #-16]
    72ac:	cmp	r3, #0
    72b0:	bne	72d4 <Fantasy_Movie_characters_is_present+0x48>
    72b4:	movw	r3, #0
    72b8:	movt	r3, #0
    72bc:	movw	r2, #823	; 0x337
    72c0:	movw	r1, #0
    72c4:	movt	r1, #0
    72c8:	movw	r0, #0
    72cc:	movt	r0, #0
    72d0:	bl	0 <__assert_fail>
    72d4:	mov	r3, #9
    72d8:	strh	r3, [fp, #-8]
    72dc:	ldr	r0, [fp, #-16]
    72e0:	bl	7e4 <__flatbuffers_soffset_read_from_pe>
    72e4:	mov	r3, r0
    72e8:	rsb	r3, r3, #0
    72ec:	ldr	r2, [fp, #-16]
    72f0:	add	r3, r2, r3
    72f4:	str	r3, [fp, #-12]
    72f8:	ldr	r0, [fp, #-12]
    72fc:	bl	848 <__flatbuffers_voffset_read_from_pe>
    7300:	mov	r3, r0
    7304:	mov	r2, r3
    7308:	ldrh	r3, [fp, #-8]
    730c:	add	r3, r3, #3
    7310:	lsl	r3, r3, #1
    7314:	cmp	r2, r3
    7318:	bcc	7340 <Fantasy_Movie_characters_is_present+0xb4>
    731c:	ldrh	r3, [fp, #-8]
    7320:	add	r3, r3, #2
    7324:	lsl	r3, r3, #1
    7328:	ldr	r2, [fp, #-12]
    732c:	add	r3, r2, r3
    7330:	mov	r0, r3
    7334:	bl	848 <__flatbuffers_voffset_read_from_pe>
    7338:	mov	r3, r0
    733c:	strh	r3, [fp, #-6]
    7340:	ldrh	r3, [fp, #-6]
    7344:	cmp	r3, #0
    7348:	movne	r3, #1
    734c:	moveq	r3, #0
    7350:	uxtb	r3, r3
    7354:	mov	r0, r3
    7358:	sub	sp, fp, #4
    735c:	ldr	fp, [sp]
    7360:	add	sp, sp, #4
    7364:	pop	{pc}		; (ldr pc, [sp], #4)

00007368 <Fantasy_Movie_characters_union>:
    7368:	str	r4, [sp, #-12]!
    736c:	str	fp, [sp, #4]
    7370:	str	lr, [sp, #8]
    7374:	add	fp, sp, #8
    7378:	sub	sp, sp, #20
    737c:	str	r0, [fp, #-24]	; 0xffffffe8
    7380:	str	r1, [fp, #-28]	; 0xffffffe4
    7384:	ldr	r0, [fp, #-28]	; 0xffffffe4
    7388:	bl	7084 <Fantasy_Movie_characters_type>
    738c:	mov	r3, r0
    7390:	str	r3, [fp, #-20]	; 0xffffffec
    7394:	ldr	r0, [fp, #-28]	; 0xffffffe4
    7398:	bl	7188 <Fantasy_Movie_characters>
    739c:	mov	r3, r0
    73a0:	str	r3, [fp, #-16]
    73a4:	ldr	r3, [fp, #-20]	; 0xffffffec
    73a8:	mov	r0, r3
    73ac:	bl	a94 <flatbuffers_vec_len>
    73b0:	mov	r4, r0
    73b4:	ldr	r3, [fp, #-16]
    73b8:	mov	r0, r3
    73bc:	bl	a94 <flatbuffers_vec_len>
    73c0:	mov	r3, r0
    73c4:	cmp	r4, r3
    73c8:	beq	73ec <Fantasy_Movie_characters_union+0x84>
    73cc:	movw	r3, #0
    73d0:	movt	r3, #0
    73d4:	movw	r2, #823	; 0x337
    73d8:	movw	r1, #0
    73dc:	movt	r1, #0
    73e0:	movw	r0, #0
    73e4:	movt	r0, #0
    73e8:	bl	0 <__assert_fail>
    73ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
    73f0:	mov	r1, r3
    73f4:	sub	r3, fp, #20
    73f8:	ldrd	r2, [r3]
    73fc:	strd	r2, [r1]
    7400:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7404:	sub	sp, fp, #8
    7408:	ldr	r4, [sp]
    740c:	ldr	fp, [sp, #4]
    7410:	add	sp, sp, #8
    7414:	pop	{pc}		; (ldr pc, [sp], #4)

00007418 <flatcc_emitter_get_buffer_size>:
    7418:	push	{fp}		; (str fp, [sp, #-4]!)
    741c:	add	fp, sp, #0
    7420:	sub	sp, sp, #12
    7424:	str	r0, [fp, #-8]
    7428:	ldr	r3, [fp, #-8]
    742c:	ldr	r3, [r3, #24]
    7430:	mov	r0, r3
    7434:	add	sp, fp, #0
    7438:	pop	{fp}		; (ldr fp, [sp], #4)
    743c:	bx	lr

00007440 <flatbuffers_uint8_assign_to_pe>:
    7440:	str	fp, [sp, #-8]!
    7444:	str	lr, [sp, #4]
    7448:	add	fp, sp, #4
    744c:	sub	sp, sp, #8
    7450:	str	r0, [fp, #-8]
    7454:	mov	r3, r1
    7458:	strb	r3, [fp, #-9]
    745c:	ldrb	r3, [fp, #-9]
    7460:	mov	r0, r3
    7464:	bl	28 <flatbuffers_uint8_cast_to_pe>
    7468:	mov	r3, r0
    746c:	mov	r2, r3
    7470:	ldr	r3, [fp, #-8]
    7474:	strb	r2, [r3]
    7478:	ldr	r3, [fp, #-8]
    747c:	mov	r0, r3
    7480:	sub	sp, fp, #4
    7484:	ldr	fp, [sp]
    7488:	add	sp, sp, #4
    748c:	pop	{pc}		; (ldr pc, [sp], #4)

00007490 <flatbuffers_uint8_vec_create>:
    7490:	str	fp, [sp, #-8]!
    7494:	str	lr, [sp, #4]
    7498:	add	fp, sp, #4
    749c:	sub	sp, sp, #24
    74a0:	str	r0, [fp, #-8]
    74a4:	str	r1, [fp, #-12]
    74a8:	str	r2, [fp, #-16]
    74ac:	mvn	r3, #0
    74b0:	str	r3, [sp, #4]
    74b4:	mov	r3, #1
    74b8:	str	r3, [sp]
    74bc:	mov	r3, #1
    74c0:	ldr	r2, [fp, #-16]
    74c4:	ldr	r1, [fp, #-12]
    74c8:	ldr	r0, [fp, #-8]
    74cc:	bl	0 <flatcc_builder_create_vector>
    74d0:	mov	r3, r0
    74d4:	mov	r0, r3
    74d8:	sub	sp, fp, #4
    74dc:	ldr	fp, [sp]
    74e0:	add	sp, sp, #4
    74e4:	pop	{pc}		; (ldr pc, [sp], #4)

000074e8 <flatbuffers_int8_assign_to_pe>:
    74e8:	str	fp, [sp, #-8]!
    74ec:	str	lr, [sp, #4]
    74f0:	add	fp, sp, #4
    74f4:	sub	sp, sp, #8
    74f8:	str	r0, [fp, #-8]
    74fc:	mov	r3, r1
    7500:	strb	r3, [fp, #-9]
    7504:	ldrsb	r3, [fp, #-9]
    7508:	mov	r0, r3
    750c:	bl	25c <flatbuffers_int8_cast_to_pe>
    7510:	mov	r3, r0
    7514:	mov	r2, r3
    7518:	ldr	r3, [fp, #-8]
    751c:	strb	r2, [r3]
    7520:	ldr	r3, [fp, #-8]
    7524:	mov	r0, r3
    7528:	sub	sp, fp, #4
    752c:	ldr	fp, [sp]
    7530:	add	sp, sp, #4
    7534:	pop	{pc}		; (ldr pc, [sp], #4)

00007538 <flatbuffers_bool_assign_to_pe>:
    7538:	str	fp, [sp, #-8]!
    753c:	str	lr, [sp, #4]
    7540:	add	fp, sp, #4
    7544:	sub	sp, sp, #8
    7548:	str	r0, [fp, #-8]
    754c:	mov	r3, r1
    7550:	strb	r3, [fp, #-9]
    7554:	ldrb	r3, [fp, #-9]
    7558:	mov	r0, r3
    755c:	bl	5e8 <flatbuffers_bool_cast_to_pe>
    7560:	mov	r3, r0
    7564:	mov	r2, r3
    7568:	ldr	r3, [fp, #-8]
    756c:	strb	r2, [r3]
    7570:	ldr	r3, [fp, #-8]
    7574:	mov	r0, r3
    7578:	sub	sp, fp, #4
    757c:	ldr	fp, [sp]
    7580:	add	sp, sp, #4
    7584:	pop	{pc}		; (ldr pc, [sp], #4)

00007588 <flatbuffers_bool_vec_start>:
    7588:	str	fp, [sp, #-8]!
    758c:	str	lr, [sp, #4]
    7590:	add	fp, sp, #4
    7594:	sub	sp, sp, #8
    7598:	str	r0, [fp, #-8]
    759c:	mvn	r3, #0
    75a0:	mov	r2, #1
    75a4:	mov	r1, #1
    75a8:	ldr	r0, [fp, #-8]
    75ac:	bl	0 <flatcc_builder_start_vector>
    75b0:	mov	r3, r0
    75b4:	mov	r0, r3
    75b8:	sub	sp, fp, #4
    75bc:	ldr	fp, [sp]
    75c0:	add	sp, sp, #4
    75c4:	pop	{pc}		; (ldr pc, [sp], #4)

000075c8 <flatbuffers_bool_vec_end>:
    75c8:	str	fp, [sp, #-8]!
    75cc:	str	lr, [sp, #4]
    75d0:	add	fp, sp, #4
    75d4:	sub	sp, sp, #8
    75d8:	str	r0, [fp, #-8]
    75dc:	ldr	r0, [fp, #-8]
    75e0:	bl	0 <flatcc_builder_end_vector>
    75e4:	mov	r3, r0
    75e8:	mov	r0, r3
    75ec:	sub	sp, fp, #4
    75f0:	ldr	fp, [sp]
    75f4:	add	sp, sp, #4
    75f8:	pop	{pc}		; (ldr pc, [sp], #4)

000075fc <flatbuffers_bool_vec_create>:
    75fc:	str	fp, [sp, #-8]!
    7600:	str	lr, [sp, #4]
    7604:	add	fp, sp, #4
    7608:	sub	sp, sp, #24
    760c:	str	r0, [fp, #-8]
    7610:	str	r1, [fp, #-12]
    7614:	str	r2, [fp, #-16]
    7618:	mvn	r3, #0
    761c:	str	r3, [sp, #4]
    7620:	mov	r3, #1
    7624:	str	r3, [sp]
    7628:	mov	r3, #1
    762c:	ldr	r2, [fp, #-16]
    7630:	ldr	r1, [fp, #-12]
    7634:	ldr	r0, [fp, #-8]
    7638:	bl	0 <flatcc_builder_create_vector>
    763c:	mov	r3, r0
    7640:	mov	r0, r3
    7644:	sub	sp, fp, #4
    7648:	ldr	fp, [sp]
    764c:	add	sp, sp, #4
    7650:	pop	{pc}		; (ldr pc, [sp], #4)

00007654 <flatbuffers_bool_vec_clone>:
    7654:	str	fp, [sp, #-8]!
    7658:	str	lr, [sp, #4]
    765c:	add	fp, sp, #4
    7660:	sub	sp, sp, #16
    7664:	str	r0, [fp, #-8]
    7668:	str	r1, [fp, #-12]
    766c:	ldr	r0, [fp, #-12]
    7670:	bl	ea0 <flatbuffers_bool_vec_len>
    7674:	mov	r2, r0
    7678:	mvn	r3, #0
    767c:	str	r3, [sp, #4]
    7680:	mov	r3, #1
    7684:	str	r3, [sp]
    7688:	mov	r3, #1
    768c:	ldr	r1, [fp, #-12]
    7690:	ldr	r0, [fp, #-8]
    7694:	bl	0 <flatcc_builder_create_vector>
    7698:	mov	r3, r0
    769c:	mov	r0, r3
    76a0:	sub	sp, fp, #4
    76a4:	ldr	fp, [sp]
    76a8:	add	sp, sp, #4
    76ac:	pop	{pc}		; (ldr pc, [sp], #4)

000076b0 <flatbuffers_bool_vec_slice>:
    76b0:	str	fp, [sp, #-8]!
    76b4:	str	lr, [sp, #4]
    76b8:	add	fp, sp, #4
    76bc:	sub	sp, sp, #32
    76c0:	str	r0, [fp, #-16]
    76c4:	str	r1, [fp, #-20]	; 0xffffffec
    76c8:	str	r2, [fp, #-24]	; 0xffffffe8
    76cc:	str	r3, [fp, #-28]	; 0xffffffe4
    76d0:	ldr	r0, [fp, #-20]	; 0xffffffec
    76d4:	bl	ea0 <flatbuffers_bool_vec_len>
    76d8:	str	r0, [fp, #-8]
    76dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    76e0:	ldr	r3, [fp, #-8]
    76e4:	cmp	r2, r3
    76e8:	bcc	76f4 <flatbuffers_bool_vec_slice+0x44>
    76ec:	ldr	r3, [fp, #-8]
    76f0:	str	r3, [fp, #-24]	; 0xffffffe8
    76f4:	ldr	r2, [fp, #-8]
    76f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    76fc:	sub	r3, r2, r3
    7700:	str	r3, [fp, #-8]
    7704:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7708:	ldr	r3, [fp, #-8]
    770c:	cmp	r2, r3
    7710:	bls	771c <flatbuffers_bool_vec_slice+0x6c>
    7714:	ldr	r3, [fp, #-8]
    7718:	str	r3, [fp, #-28]	; 0xffffffe4
    771c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7720:	ldr	r0, [fp, #-20]	; 0xffffffec
    7724:	bl	610 <flatbuffers_bool__const_ptr_add>
    7728:	mov	r1, r0
    772c:	mvn	r3, #0
    7730:	str	r3, [sp, #4]
    7734:	mov	r3, #1
    7738:	str	r3, [sp]
    773c:	mov	r3, #1
    7740:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7744:	ldr	r0, [fp, #-16]
    7748:	bl	0 <flatcc_builder_create_vector>
    774c:	mov	r3, r0
    7750:	mov	r0, r3
    7754:	sub	sp, fp, #4
    7758:	ldr	fp, [sp]
    775c:	add	sp, sp, #4
    7760:	pop	{pc}		; (ldr pc, [sp], #4)

00007764 <flatbuffers_uint16_assign_to_pe>:
    7764:	str	fp, [sp, #-8]!
    7768:	str	lr, [sp, #4]
    776c:	add	fp, sp, #4
    7770:	sub	sp, sp, #8
    7774:	str	r0, [fp, #-8]
    7778:	mov	r3, r1
    777c:	strh	r3, [fp, #-10]
    7780:	ldrh	r3, [fp, #-10]
    7784:	mov	r0, r3
    7788:	bl	b4 <flatbuffers_uint16_cast_to_pe>
    778c:	mov	r3, r0
    7790:	mov	r2, r3
    7794:	ldr	r3, [fp, #-8]
    7798:	strh	r2, [r3]
    779c:	ldr	r3, [fp, #-8]
    77a0:	mov	r0, r3
    77a4:	sub	sp, fp, #4
    77a8:	ldr	fp, [sp]
    77ac:	add	sp, sp, #4
    77b0:	pop	{pc}		; (ldr pc, [sp], #4)

000077b4 <flatbuffers_uint32_assign_to_pe>:
    77b4:	str	fp, [sp, #-8]!
    77b8:	str	lr, [sp, #4]
    77bc:	add	fp, sp, #4
    77c0:	sub	sp, sp, #8
    77c4:	str	r0, [fp, #-8]
    77c8:	str	r1, [fp, #-12]
    77cc:	ldr	r0, [fp, #-12]
    77d0:	bl	13c <flatbuffers_uint32_cast_to_pe>
    77d4:	mov	r2, r0
    77d8:	ldr	r3, [fp, #-8]
    77dc:	str	r2, [r3]
    77e0:	ldr	r3, [fp, #-8]
    77e4:	mov	r0, r3
    77e8:	sub	sp, fp, #4
    77ec:	ldr	fp, [sp]
    77f0:	add	sp, sp, #4
    77f4:	pop	{pc}		; (ldr pc, [sp], #4)

000077f8 <flatbuffers_uint64_assign_to_pe>:
    77f8:	str	fp, [sp, #-8]!
    77fc:	str	lr, [sp, #4]
    7800:	add	fp, sp, #4
    7804:	sub	sp, sp, #16
    7808:	str	r0, [fp, #-8]
    780c:	strd	r2, [fp, #-20]	; 0xffffffec
    7810:	ldrd	r0, [fp, #-20]	; 0xffffffec
    7814:	bl	1c4 <flatbuffers_uint64_cast_to_pe>
    7818:	mov	r2, r0
    781c:	mov	r3, r1
    7820:	ldr	r1, [fp, #-8]
    7824:	strd	r2, [r1]
    7828:	ldr	r3, [fp, #-8]
    782c:	mov	r0, r3
    7830:	sub	sp, fp, #4
    7834:	ldr	fp, [sp]
    7838:	add	sp, sp, #4
    783c:	pop	{pc}		; (ldr pc, [sp], #4)

00007840 <flatbuffers_int16_copy_from_pe>:
    7840:	str	fp, [sp, #-8]!
    7844:	str	lr, [sp, #4]
    7848:	add	fp, sp, #4
    784c:	sub	sp, sp, #8
    7850:	str	r0, [fp, #-8]
    7854:	str	r1, [fp, #-12]
    7858:	ldr	r3, [fp, #-12]
    785c:	ldrsh	r3, [r3]
    7860:	mov	r0, r3
    7864:	bl	2c0 <flatbuffers_int16_cast_from_pe>
    7868:	mov	r3, r0
    786c:	mov	r2, r3
    7870:	ldr	r3, [fp, #-8]
    7874:	strh	r2, [r3]
    7878:	ldr	r3, [fp, #-8]
    787c:	mov	r0, r3
    7880:	sub	sp, fp, #4
    7884:	ldr	fp, [sp]
    7888:	add	sp, sp, #4
    788c:	pop	{pc}		; (ldr pc, [sp], #4)

00007890 <flatbuffers_int16_assign_to_pe>:
    7890:	str	fp, [sp, #-8]!
    7894:	str	lr, [sp, #4]
    7898:	add	fp, sp, #4
    789c:	sub	sp, sp, #8
    78a0:	str	r0, [fp, #-8]
    78a4:	mov	r3, r1
    78a8:	strh	r3, [fp, #-10]
    78ac:	ldrsh	r3, [fp, #-10]
    78b0:	mov	r0, r3
    78b4:	bl	2e8 <flatbuffers_int16_cast_to_pe>
    78b8:	mov	r3, r0
    78bc:	mov	r2, r3
    78c0:	ldr	r3, [fp, #-8]
    78c4:	strh	r2, [r3]
    78c8:	ldr	r3, [fp, #-8]
    78cc:	mov	r0, r3
    78d0:	sub	sp, fp, #4
    78d4:	ldr	fp, [sp]
    78d8:	add	sp, sp, #4
    78dc:	pop	{pc}		; (ldr pc, [sp], #4)

000078e0 <flatbuffers_int32_assign_to_pe>:
    78e0:	str	fp, [sp, #-8]!
    78e4:	str	lr, [sp, #4]
    78e8:	add	fp, sp, #4
    78ec:	sub	sp, sp, #8
    78f0:	str	r0, [fp, #-8]
    78f4:	str	r1, [fp, #-12]
    78f8:	ldr	r0, [fp, #-12]
    78fc:	bl	370 <flatbuffers_int32_cast_to_pe>
    7900:	mov	r2, r0
    7904:	ldr	r3, [fp, #-8]
    7908:	str	r2, [r3]
    790c:	ldr	r3, [fp, #-8]
    7910:	mov	r0, r3
    7914:	sub	sp, fp, #4
    7918:	ldr	fp, [sp]
    791c:	add	sp, sp, #4
    7920:	pop	{pc}		; (ldr pc, [sp], #4)

00007924 <flatbuffers_int64_assign_to_pe>:
    7924:	str	fp, [sp, #-8]!
    7928:	str	lr, [sp, #4]
    792c:	add	fp, sp, #4
    7930:	sub	sp, sp, #16
    7934:	str	r0, [fp, #-8]
    7938:	strd	r2, [fp, #-20]	; 0xffffffec
    793c:	ldrd	r0, [fp, #-20]	; 0xffffffec
    7940:	bl	3f8 <flatbuffers_int64_cast_to_pe>
    7944:	mov	r2, r0
    7948:	mov	r3, r1
    794c:	ldr	r1, [fp, #-8]
    7950:	strd	r2, [r1]
    7954:	ldr	r3, [fp, #-8]
    7958:	mov	r0, r3
    795c:	sub	sp, fp, #4
    7960:	ldr	fp, [sp]
    7964:	add	sp, sp, #4
    7968:	pop	{pc}		; (ldr pc, [sp], #4)

0000796c <flatbuffers_float_copy_from_pe>:
    796c:	str	fp, [sp, #-8]!
    7970:	str	lr, [sp, #4]
    7974:	add	fp, sp, #4
    7978:	sub	sp, sp, #8
    797c:	str	r0, [fp, #-8]
    7980:	str	r1, [fp, #-12]
    7984:	ldr	r3, [fp, #-12]
    7988:	vldr	s15, [r3]
    798c:	vmov.f32	s0, s15
    7990:	bl	468 <flatbuffers_float_cast_from_pe>
    7994:	vmov.f32	s15, s0
    7998:	ldr	r3, [fp, #-8]
    799c:	vstr	s15, [r3]
    79a0:	ldr	r3, [fp, #-8]
    79a4:	mov	r0, r3
    79a8:	sub	sp, fp, #4
    79ac:	ldr	fp, [sp]
    79b0:	add	sp, sp, #4
    79b4:	pop	{pc}		; (ldr pc, [sp], #4)

000079b8 <flatbuffers_float_assign_to_pe>:
    79b8:	str	fp, [sp, #-8]!
    79bc:	str	lr, [sp, #4]
    79c0:	add	fp, sp, #4
    79c4:	sub	sp, sp, #8
    79c8:	str	r0, [fp, #-8]
    79cc:	vstr	s0, [fp, #-12]
    79d0:	vldr	s0, [fp, #-12]
    79d4:	bl	4a0 <flatbuffers_float_cast_to_pe>
    79d8:	vmov.f32	s15, s0
    79dc:	ldr	r3, [fp, #-8]
    79e0:	vstr	s15, [r3]
    79e4:	ldr	r3, [fp, #-8]
    79e8:	mov	r0, r3
    79ec:	sub	sp, fp, #4
    79f0:	ldr	fp, [sp]
    79f4:	add	sp, sp, #4
    79f8:	pop	{pc}		; (ldr pc, [sp], #4)

000079fc <flatbuffers_double_copy_from_pe>:
    79fc:	str	fp, [sp, #-8]!
    7a00:	str	lr, [sp, #4]
    7a04:	add	fp, sp, #4
    7a08:	sub	sp, sp, #8
    7a0c:	str	r0, [fp, #-8]
    7a10:	str	r1, [fp, #-12]
    7a14:	ldr	r3, [fp, #-12]
    7a18:	vldr	d7, [r3]
    7a1c:	vmov.f64	d0, d7
    7a20:	bl	514 <flatbuffers_double_cast_from_pe>
    7a24:	vmov.f64	d7, d0
    7a28:	ldr	r3, [fp, #-8]
    7a2c:	vstr	d7, [r3]
    7a30:	ldr	r3, [fp, #-8]
    7a34:	mov	r0, r3
    7a38:	sub	sp, fp, #4
    7a3c:	ldr	fp, [sp]
    7a40:	add	sp, sp, #4
    7a44:	pop	{pc}		; (ldr pc, [sp], #4)

00007a48 <flatbuffers_double_assign_to_pe>:
    7a48:	str	fp, [sp, #-8]!
    7a4c:	str	lr, [sp, #4]
    7a50:	add	fp, sp, #4
    7a54:	sub	sp, sp, #16
    7a58:	str	r0, [fp, #-8]
    7a5c:	vstr	d0, [fp, #-20]	; 0xffffffec
    7a60:	vldr	d0, [fp, #-20]	; 0xffffffec
    7a64:	bl	54c <flatbuffers_double_cast_to_pe>
    7a68:	vmov.f64	d7, d0
    7a6c:	ldr	r3, [fp, #-8]
    7a70:	vstr	d7, [r3]
    7a74:	ldr	r3, [fp, #-8]
    7a78:	mov	r0, r3
    7a7c:	sub	sp, fp, #4
    7a80:	ldr	fp, [sp]
    7a84:	add	sp, sp, #4
    7a88:	pop	{pc}		; (ldr pc, [sp], #4)

00007a8c <flatbuffers_double_vec_create>:
    7a8c:	str	fp, [sp, #-8]!
    7a90:	str	lr, [sp, #4]
    7a94:	add	fp, sp, #4
    7a98:	sub	sp, sp, #24
    7a9c:	str	r0, [fp, #-8]
    7aa0:	str	r1, [fp, #-12]
    7aa4:	str	r2, [fp, #-16]
    7aa8:	mvn	r3, #-536870912	; 0xe0000000
    7aac:	str	r3, [sp, #4]
    7ab0:	mov	r3, #8
    7ab4:	str	r3, [sp]
    7ab8:	mov	r3, #8
    7abc:	ldr	r2, [fp, #-16]
    7ac0:	ldr	r1, [fp, #-12]
    7ac4:	ldr	r0, [fp, #-8]
    7ac8:	bl	0 <flatcc_builder_create_vector>
    7acc:	mov	r3, r0
    7ad0:	mov	r0, r3
    7ad4:	sub	sp, fp, #4
    7ad8:	ldr	fp, [sp]
    7adc:	add	sp, sp, #4
    7ae0:	pop	{pc}		; (ldr pc, [sp], #4)

00007ae4 <flatbuffers_string_create>:
    7ae4:	str	fp, [sp, #-8]!
    7ae8:	str	lr, [sp, #4]
    7aec:	add	fp, sp, #4
    7af0:	sub	sp, sp, #16
    7af4:	str	r0, [fp, #-8]
    7af8:	str	r1, [fp, #-12]
    7afc:	str	r2, [fp, #-16]
    7b00:	ldr	r2, [fp, #-16]
    7b04:	ldr	r1, [fp, #-12]
    7b08:	ldr	r0, [fp, #-8]
    7b0c:	bl	0 <flatcc_builder_create_string>
    7b10:	mov	r3, r0
    7b14:	mov	r0, r3
    7b18:	sub	sp, fp, #4
    7b1c:	ldr	fp, [sp]
    7b20:	add	sp, sp, #4
    7b24:	pop	{pc}		; (ldr pc, [sp], #4)

00007b28 <flatbuffers_string_create_str>:
    7b28:	str	fp, [sp, #-8]!
    7b2c:	str	lr, [sp, #4]
    7b30:	add	fp, sp, #4
    7b34:	sub	sp, sp, #8
    7b38:	str	r0, [fp, #-8]
    7b3c:	str	r1, [fp, #-12]
    7b40:	ldr	r1, [fp, #-12]
    7b44:	ldr	r0, [fp, #-8]
    7b48:	bl	0 <flatcc_builder_create_string_str>
    7b4c:	mov	r3, r0
    7b50:	mov	r0, r3
    7b54:	sub	sp, fp, #4
    7b58:	ldr	fp, [sp]
    7b5c:	add	sp, sp, #4
    7b60:	pop	{pc}		; (ldr pc, [sp], #4)

00007b64 <flatbuffers_string_clone>:
    7b64:	str	fp, [sp, #-8]!
    7b68:	str	lr, [sp, #4]
    7b6c:	add	fp, sp, #4
    7b70:	sub	sp, sp, #8
    7b74:	str	r0, [fp, #-8]
    7b78:	str	r1, [fp, #-12]
    7b7c:	ldr	r0, [fp, #-12]
    7b80:	bl	ae4 <flatbuffers_string_len>
    7b84:	mov	r3, r0
    7b88:	mov	r2, r3
    7b8c:	ldr	r1, [fp, #-12]
    7b90:	ldr	r0, [fp, #-8]
    7b94:	bl	0 <flatcc_builder_create_string>
    7b98:	mov	r3, r0
    7b9c:	mov	r0, r3
    7ba0:	sub	sp, fp, #4
    7ba4:	ldr	fp, [sp]
    7ba8:	add	sp, sp, #4
    7bac:	pop	{pc}		; (ldr pc, [sp], #4)

00007bb0 <flatbuffers_string_slice>:
    7bb0:	str	fp, [sp, #-8]!
    7bb4:	str	lr, [sp, #4]
    7bb8:	add	fp, sp, #4
    7bbc:	sub	sp, sp, #24
    7bc0:	str	r0, [fp, #-16]
    7bc4:	str	r1, [fp, #-20]	; 0xffffffec
    7bc8:	str	r2, [fp, #-24]	; 0xffffffe8
    7bcc:	str	r3, [fp, #-28]	; 0xffffffe4
    7bd0:	ldr	r0, [fp, #-20]	; 0xffffffec
    7bd4:	bl	ae4 <flatbuffers_string_len>
    7bd8:	str	r0, [fp, #-8]
    7bdc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7be0:	ldr	r3, [fp, #-8]
    7be4:	cmp	r2, r3
    7be8:	bcc	7bf4 <flatbuffers_string_slice+0x44>
    7bec:	ldr	r3, [fp, #-8]
    7bf0:	str	r3, [fp, #-24]	; 0xffffffe8
    7bf4:	ldr	r2, [fp, #-8]
    7bf8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7bfc:	sub	r3, r2, r3
    7c00:	str	r3, [fp, #-8]
    7c04:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7c08:	ldr	r3, [fp, #-8]
    7c0c:	cmp	r2, r3
    7c10:	bls	7c1c <flatbuffers_string_slice+0x6c>
    7c14:	ldr	r3, [fp, #-8]
    7c18:	str	r3, [fp, #-28]	; 0xffffffe4
    7c1c:	ldr	r2, [fp, #-20]	; 0xffffffec
    7c20:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7c24:	add	r3, r2, r3
    7c28:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7c2c:	mov	r1, r3
    7c30:	ldr	r0, [fp, #-16]
    7c34:	bl	0 <flatcc_builder_create_string>
    7c38:	mov	r3, r0
    7c3c:	mov	r0, r3
    7c40:	sub	sp, fp, #4
    7c44:	ldr	fp, [sp]
    7c48:	add	sp, sp, #4
    7c4c:	pop	{pc}		; (ldr pc, [sp], #4)

00007c50 <flatbuffers_string_vec_push>:
    7c50:	str	fp, [sp, #-8]!
    7c54:	str	lr, [sp, #4]
    7c58:	add	fp, sp, #4
    7c5c:	sub	sp, sp, #8
    7c60:	str	r0, [fp, #-8]
    7c64:	str	r1, [fp, #-12]
    7c68:	ldr	r3, [fp, #-12]
    7c6c:	cmp	r3, #0
    7c70:	beq	7c88 <flatbuffers_string_vec_push+0x38>
    7c74:	ldr	r1, [fp, #-12]
    7c78:	ldr	r0, [fp, #-8]
    7c7c:	bl	0 <flatcc_builder_offset_vector_push>
    7c80:	mov	r3, r0
    7c84:	b	7c8c <flatbuffers_string_vec_push+0x3c>
    7c88:	mov	r3, #0
    7c8c:	mov	r0, r3
    7c90:	sub	sp, fp, #4
    7c94:	ldr	fp, [sp]
    7c98:	add	sp, sp, #4
    7c9c:	pop	{pc}		; (ldr pc, [sp], #4)

00007ca0 <flatbuffers_buffer_start>:
    7ca0:	str	fp, [sp, #-8]!
    7ca4:	str	lr, [sp, #4]
    7ca8:	add	fp, sp, #4
    7cac:	sub	sp, sp, #8
    7cb0:	str	r0, [fp, #-8]
    7cb4:	str	r1, [fp, #-12]
    7cb8:	mov	r3, #0
    7cbc:	mov	r2, #0
    7cc0:	ldr	r1, [fp, #-12]
    7cc4:	ldr	r0, [fp, #-8]
    7cc8:	bl	0 <flatcc_builder_start_buffer>
    7ccc:	mov	r3, r0
    7cd0:	mov	r0, r3
    7cd4:	sub	sp, fp, #4
    7cd8:	ldr	fp, [sp]
    7cdc:	add	sp, sp, #4
    7ce0:	pop	{pc}		; (ldr pc, [sp], #4)

00007ce4 <flatbuffers_buffer_start_with_size>:
    7ce4:	str	fp, [sp, #-8]!
    7ce8:	str	lr, [sp, #4]
    7cec:	add	fp, sp, #4
    7cf0:	sub	sp, sp, #8
    7cf4:	str	r0, [fp, #-8]
    7cf8:	str	r1, [fp, #-12]
    7cfc:	mov	r3, #2
    7d00:	mov	r2, #0
    7d04:	ldr	r1, [fp, #-12]
    7d08:	ldr	r0, [fp, #-8]
    7d0c:	bl	0 <flatcc_builder_start_buffer>
    7d10:	mov	r3, r0
    7d14:	mov	r0, r3
    7d18:	sub	sp, fp, #4
    7d1c:	ldr	fp, [sp]
    7d20:	add	sp, sp, #4
    7d24:	pop	{pc}		; (ldr pc, [sp], #4)

00007d28 <flatbuffers_buffer_end>:
    7d28:	str	fp, [sp, #-8]!
    7d2c:	str	lr, [sp, #4]
    7d30:	add	fp, sp, #4
    7d34:	sub	sp, sp, #8
    7d38:	str	r0, [fp, #-8]
    7d3c:	str	r1, [fp, #-12]
    7d40:	ldr	r1, [fp, #-12]
    7d44:	ldr	r0, [fp, #-8]
    7d48:	bl	0 <flatcc_builder_end_buffer>
    7d4c:	mov	r3, r0
    7d50:	mov	r0, r3
    7d54:	sub	sp, fp, #4
    7d58:	ldr	fp, [sp]
    7d5c:	add	sp, sp, #4
    7d60:	pop	{pc}		; (ldr pc, [sp], #4)

00007d64 <MyGame_Example_Color_assign_to_pe>:
    7d64:	str	fp, [sp, #-8]!
    7d68:	str	lr, [sp, #4]
    7d6c:	add	fp, sp, #4
    7d70:	sub	sp, sp, #8
    7d74:	str	r0, [fp, #-8]
    7d78:	mov	r3, r1
    7d7c:	strb	r3, [fp, #-9]
    7d80:	ldrsb	r3, [fp, #-9]
    7d84:	mov	r0, r3
    7d88:	bl	1e0c <MyGame_Example_Color_cast_to_pe>
    7d8c:	mov	r3, r0
    7d90:	mov	r2, r3
    7d94:	ldr	r3, [fp, #-8]
    7d98:	strb	r2, [r3]
    7d9c:	ldr	r3, [fp, #-8]
    7da0:	mov	r0, r3
    7da4:	sub	sp, fp, #4
    7da8:	ldr	fp, [sp]
    7dac:	add	sp, sp, #4
    7db0:	pop	{pc}		; (ldr pc, [sp], #4)

00007db4 <MyGame_Example_Test_assign>:
    7db4:	push	{fp}		; (str fp, [sp, #-4]!)
    7db8:	add	fp, sp, #0
    7dbc:	sub	sp, sp, #12
    7dc0:	str	r0, [fp, #-8]
    7dc4:	mov	r3, r1
    7dc8:	strh	r3, [fp, #-10]
    7dcc:	mov	r3, r2
    7dd0:	strb	r3, [fp, #-11]
    7dd4:	ldr	r3, [fp, #-8]
    7dd8:	ldrh	r2, [fp, #-10]
    7ddc:	strh	r2, [r3]
    7de0:	ldr	r3, [fp, #-8]
    7de4:	ldrb	r2, [fp, #-11]
    7de8:	strb	r2, [r3, #2]
    7dec:	ldr	r3, [fp, #-8]
    7df0:	mov	r0, r3
    7df4:	add	sp, fp, #0
    7df8:	pop	{fp}		; (ldr fp, [sp], #4)
    7dfc:	bx	lr

00007e00 <MyGame_Example_Test_assign_to_pe>:
    7e00:	str	fp, [sp, #-8]!
    7e04:	str	lr, [sp, #4]
    7e08:	add	fp, sp, #4
    7e0c:	sub	sp, sp, #8
    7e10:	str	r0, [fp, #-8]
    7e14:	mov	r3, r1
    7e18:	strh	r3, [fp, #-10]
    7e1c:	mov	r3, r2
    7e20:	strb	r3, [fp, #-11]
    7e24:	ldr	r3, [fp, #-8]
    7e28:	ldrsh	r2, [fp, #-10]
    7e2c:	mov	r1, r2
    7e30:	mov	r0, r3
    7e34:	bl	7890 <flatbuffers_int16_assign_to_pe>
    7e38:	ldr	r3, [fp, #-8]
    7e3c:	ldrb	r2, [fp, #-11]
    7e40:	strb	r2, [r3, #2]
    7e44:	ldr	r3, [fp, #-8]
    7e48:	mov	r0, r3
    7e4c:	sub	sp, fp, #4
    7e50:	ldr	fp, [sp]
    7e54:	add	sp, sp, #4
    7e58:	pop	{pc}		; (ldr pc, [sp], #4)

00007e5c <MyGame_Example_Test_copy_from_pe>:
    7e5c:	str	fp, [sp, #-8]!
    7e60:	str	lr, [sp, #4]
    7e64:	add	fp, sp, #4
    7e68:	sub	sp, sp, #8
    7e6c:	str	r0, [fp, #-8]
    7e70:	str	r1, [fp, #-12]
    7e74:	ldr	r3, [fp, #-8]
    7e78:	ldr	r2, [fp, #-12]
    7e7c:	mov	r1, r2
    7e80:	mov	r0, r3
    7e84:	bl	7840 <flatbuffers_int16_copy_from_pe>
    7e88:	ldr	r3, [fp, #-12]
    7e8c:	ldrsb	r2, [r3, #2]
    7e90:	ldr	r3, [fp, #-8]
    7e94:	strb	r2, [r3, #2]
    7e98:	ldr	r3, [fp, #-8]
    7e9c:	mov	r0, r3
    7ea0:	sub	sp, fp, #4
    7ea4:	ldr	fp, [sp]
    7ea8:	add	sp, sp, #4
    7eac:	pop	{pc}		; (ldr pc, [sp], #4)

00007eb0 <MyGame_Example_Test_vec_start>:
    7eb0:	str	fp, [sp, #-8]!
    7eb4:	str	lr, [sp, #4]
    7eb8:	add	fp, sp, #4
    7ebc:	sub	sp, sp, #8
    7ec0:	str	r0, [fp, #-8]
    7ec4:	mvn	r3, #-1073741824	; 0xc0000000
    7ec8:	mov	r2, #2
    7ecc:	mov	r1, #4
    7ed0:	ldr	r0, [fp, #-8]
    7ed4:	bl	0 <flatcc_builder_start_vector>
    7ed8:	mov	r3, r0
    7edc:	mov	r0, r3
    7ee0:	sub	sp, fp, #4
    7ee4:	ldr	fp, [sp]
    7ee8:	add	sp, sp, #4
    7eec:	pop	{pc}		; (ldr pc, [sp], #4)

00007ef0 <MyGame_Example_Test_vec_end>:
    7ef0:	str	fp, [sp, #-8]!
    7ef4:	str	lr, [sp, #4]
    7ef8:	add	fp, sp, #4
    7efc:	sub	sp, sp, #8
    7f00:	str	r0, [fp, #-8]
    7f04:	ldr	r0, [fp, #-8]
    7f08:	bl	0 <flatcc_builder_end_vector>
    7f0c:	mov	r3, r0
    7f10:	mov	r0, r3
    7f14:	sub	sp, fp, #4
    7f18:	ldr	fp, [sp]
    7f1c:	add	sp, sp, #4
    7f20:	pop	{pc}		; (ldr pc, [sp], #4)

00007f24 <MyGame_Example_Test_vec_clone>:
    7f24:	str	fp, [sp, #-8]!
    7f28:	str	lr, [sp, #4]
    7f2c:	add	fp, sp, #4
    7f30:	sub	sp, sp, #16
    7f34:	str	r0, [fp, #-8]
    7f38:	str	r1, [fp, #-12]
    7f3c:	ldr	r0, [fp, #-12]
    7f40:	bl	1ffc <MyGame_Example_Test_vec_len>
    7f44:	mov	r2, r0
    7f48:	mvn	r3, #-1073741824	; 0xc0000000
    7f4c:	str	r3, [sp, #4]
    7f50:	mov	r3, #2
    7f54:	str	r3, [sp]
    7f58:	mov	r3, #4
    7f5c:	ldr	r1, [fp, #-12]
    7f60:	ldr	r0, [fp, #-8]
    7f64:	bl	0 <flatcc_builder_create_vector>
    7f68:	mov	r3, r0
    7f6c:	mov	r0, r3
    7f70:	sub	sp, fp, #4
    7f74:	ldr	fp, [sp]
    7f78:	add	sp, sp, #4
    7f7c:	pop	{pc}		; (ldr pc, [sp], #4)

00007f80 <MyGame_Example_Test_vec_slice>:
    7f80:	str	fp, [sp, #-8]!
    7f84:	str	lr, [sp, #4]
    7f88:	add	fp, sp, #4
    7f8c:	sub	sp, sp, #32
    7f90:	str	r0, [fp, #-16]
    7f94:	str	r1, [fp, #-20]	; 0xffffffec
    7f98:	str	r2, [fp, #-24]	; 0xffffffe8
    7f9c:	str	r3, [fp, #-28]	; 0xffffffe4
    7fa0:	ldr	r0, [fp, #-20]	; 0xffffffec
    7fa4:	bl	1ffc <MyGame_Example_Test_vec_len>
    7fa8:	str	r0, [fp, #-8]
    7fac:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7fb0:	ldr	r3, [fp, #-8]
    7fb4:	cmp	r2, r3
    7fb8:	bcc	7fc4 <MyGame_Example_Test_vec_slice+0x44>
    7fbc:	ldr	r3, [fp, #-8]
    7fc0:	str	r3, [fp, #-24]	; 0xffffffe8
    7fc4:	ldr	r2, [fp, #-8]
    7fc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7fcc:	sub	r3, r2, r3
    7fd0:	str	r3, [fp, #-8]
    7fd4:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7fd8:	ldr	r3, [fp, #-8]
    7fdc:	cmp	r2, r3
    7fe0:	bls	7fec <MyGame_Example_Test_vec_slice+0x6c>
    7fe4:	ldr	r3, [fp, #-8]
    7fe8:	str	r3, [fp, #-28]	; 0xffffffe4
    7fec:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7ff0:	ldr	r0, [fp, #-20]	; 0xffffffec
    7ff4:	bl	1f38 <MyGame_Example_Test__const_ptr_add>
    7ff8:	mov	r1, r0
    7ffc:	mvn	r3, #-1073741824	; 0xc0000000
    8000:	str	r3, [sp, #4]
    8004:	mov	r3, #2
    8008:	str	r3, [sp]
    800c:	mov	r3, #4
    8010:	ldr	r2, [fp, #-28]	; 0xffffffe4
    8014:	ldr	r0, [fp, #-16]
    8018:	bl	0 <flatcc_builder_create_vector>
    801c:	mov	r3, r0
    8020:	mov	r0, r3
    8024:	sub	sp, fp, #4
    8028:	ldr	fp, [sp]
    802c:	add	sp, sp, #4
    8030:	pop	{pc}		; (ldr pc, [sp], #4)

00008034 <MyGame_Example_Test_vec_push>:
    8034:	str	fp, [sp, #-8]!
    8038:	str	lr, [sp, #4]
    803c:	add	fp, sp, #4
    8040:	sub	sp, sp, #16
    8044:	str	r0, [fp, #-16]
    8048:	str	r1, [fp, #-20]	; 0xffffffec
    804c:	mov	r1, #1
    8050:	ldr	r0, [fp, #-16]
    8054:	bl	0 <flatcc_builder_extend_vector>
    8058:	str	r0, [fp, #-8]
    805c:	ldr	r3, [fp, #-8]
    8060:	cmp	r3, #0
    8064:	beq	8088 <MyGame_Example_Test_vec_push+0x54>
    8068:	bl	1fe0 <MyGame_Example_Test__size>
    806c:	mov	r3, r0
    8070:	mov	r2, r3
    8074:	ldr	r1, [fp, #-20]	; 0xffffffec
    8078:	ldr	r0, [fp, #-8]
    807c:	bl	0 <memcpy>
    8080:	ldr	r3, [fp, #-8]
    8084:	b	808c <MyGame_Example_Test_vec_push+0x58>
    8088:	mov	r3, #0
    808c:	mov	r0, r3
    8090:	sub	sp, fp, #4
    8094:	ldr	fp, [sp]
    8098:	add	sp, sp, #4
    809c:	pop	{pc}		; (ldr pc, [sp], #4)

000080a0 <MyGame_Example_emptystruct_copy_to_pe>:
    80a0:	push	{fp}		; (str fp, [sp, #-4]!)
    80a4:	add	fp, sp, #0
    80a8:	sub	sp, sp, #12
    80ac:	str	r0, [fp, #-8]
    80b0:	str	r1, [fp, #-12]
    80b4:	ldr	r3, [fp, #-8]
    80b8:	mov	r0, r3
    80bc:	add	sp, fp, #0
    80c0:	pop	{fp}		; (ldr fp, [sp], #4)
    80c4:	bx	lr

000080c8 <MyGame_Example_Vec3_assign_to_pe>:
    80c8:	str	fp, [sp, #-8]!
    80cc:	str	lr, [sp, #4]
    80d0:	add	fp, sp, #4
    80d4:	sub	sp, sp, #32
    80d8:	str	r0, [fp, #-8]
    80dc:	vstr	s0, [fp, #-12]
    80e0:	vstr	s1, [fp, #-16]
    80e4:	vstr	s2, [fp, #-20]	; 0xffffffec
    80e8:	vstr	d2, [fp, #-28]	; 0xffffffe4
    80ec:	mov	r0, r1
    80f0:	mov	r1, r2
    80f4:	mov	r2, r3
    80f8:	mov	r3, r0
    80fc:	strb	r3, [fp, #-29]	; 0xffffffe3
    8100:	mov	r3, r1
    8104:	strh	r3, [fp, #-32]	; 0xffffffe0
    8108:	mov	r3, r2
    810c:	strb	r3, [fp, #-30]	; 0xffffffe2
    8110:	ldr	r3, [fp, #-8]
    8114:	vldr	s0, [fp, #-12]
    8118:	mov	r0, r3
    811c:	bl	79b8 <flatbuffers_float_assign_to_pe>
    8120:	ldr	r3, [fp, #-8]
    8124:	add	r3, r3, #4
    8128:	vldr	s0, [fp, #-16]
    812c:	mov	r0, r3
    8130:	bl	79b8 <flatbuffers_float_assign_to_pe>
    8134:	ldr	r3, [fp, #-8]
    8138:	add	r3, r3, #8
    813c:	vldr	s0, [fp, #-20]	; 0xffffffec
    8140:	mov	r0, r3
    8144:	bl	79b8 <flatbuffers_float_assign_to_pe>
    8148:	ldr	r3, [fp, #-8]
    814c:	add	r3, r3, #16
    8150:	vldr	d0, [fp, #-28]	; 0xffffffe4
    8154:	mov	r0, r3
    8158:	bl	7a48 <flatbuffers_double_assign_to_pe>
    815c:	ldr	r3, [fp, #-8]
    8160:	ldrb	r2, [fp, #-29]	; 0xffffffe3
    8164:	strb	r2, [r3, #24]
    8168:	ldr	r3, [fp, #-8]
    816c:	add	r3, r3, #26
    8170:	ldrsb	r2, [fp, #-30]	; 0xffffffe2
    8174:	ldrsh	r1, [fp, #-32]	; 0xffffffe0
    8178:	mov	r0, r3
    817c:	bl	7e00 <MyGame_Example_Test_assign_to_pe>
    8180:	ldr	r3, [fp, #-8]
    8184:	mov	r0, r3
    8188:	sub	sp, fp, #4
    818c:	ldr	fp, [sp]
    8190:	add	sp, sp, #4
    8194:	pop	{pc}		; (ldr pc, [sp], #4)

00008198 <MyGame_Example_Vec3_copy_from_pe>:
    8198:	str	fp, [sp, #-8]!
    819c:	str	lr, [sp, #4]
    81a0:	add	fp, sp, #4
    81a4:	sub	sp, sp, #8
    81a8:	str	r0, [fp, #-8]
    81ac:	str	r1, [fp, #-12]
    81b0:	ldr	r3, [fp, #-8]
    81b4:	ldr	r2, [fp, #-12]
    81b8:	mov	r1, r2
    81bc:	mov	r0, r3
    81c0:	bl	796c <flatbuffers_float_copy_from_pe>
    81c4:	ldr	r3, [fp, #-8]
    81c8:	add	r2, r3, #4
    81cc:	ldr	r3, [fp, #-12]
    81d0:	add	r3, r3, #4
    81d4:	mov	r1, r3
    81d8:	mov	r0, r2
    81dc:	bl	796c <flatbuffers_float_copy_from_pe>
    81e0:	ldr	r3, [fp, #-8]
    81e4:	add	r2, r3, #8
    81e8:	ldr	r3, [fp, #-12]
    81ec:	add	r3, r3, #8
    81f0:	mov	r1, r3
    81f4:	mov	r0, r2
    81f8:	bl	796c <flatbuffers_float_copy_from_pe>
    81fc:	ldr	r3, [fp, #-8]
    8200:	add	r2, r3, #16
    8204:	ldr	r3, [fp, #-12]
    8208:	add	r3, r3, #16
    820c:	mov	r1, r3
    8210:	mov	r0, r2
    8214:	bl	79fc <flatbuffers_double_copy_from_pe>
    8218:	ldr	r3, [fp, #-12]
    821c:	ldrsb	r2, [r3, #24]
    8220:	ldr	r3, [fp, #-8]
    8224:	strb	r2, [r3, #24]
    8228:	ldr	r3, [fp, #-8]
    822c:	add	r2, r3, #26
    8230:	ldr	r3, [fp, #-12]
    8234:	add	r3, r3, #26
    8238:	mov	r1, r3
    823c:	mov	r0, r2
    8240:	bl	7e5c <MyGame_Example_Test_copy_from_pe>
    8244:	ldr	r3, [fp, #-8]
    8248:	mov	r0, r3
    824c:	sub	sp, fp, #4
    8250:	ldr	fp, [sp]
    8254:	add	sp, sp, #4
    8258:	pop	{pc}		; (ldr pc, [sp], #4)

0000825c <MyGame_Example_Vec3_from_pe>:
    825c:	push	{fp}		; (str fp, [sp, #-4]!)
    8260:	add	fp, sp, #0
    8264:	sub	sp, sp, #12
    8268:	str	r0, [fp, #-8]
    826c:	ldr	r3, [fp, #-8]
    8270:	mov	r0, r3
    8274:	add	sp, fp, #0
    8278:	pop	{fp}		; (ldr fp, [sp], #4)
    827c:	bx	lr

00008280 <MyGame_Example_Vec3_clear>:
    8280:	str	fp, [sp, #-8]!
    8284:	str	lr, [sp, #4]
    8288:	add	fp, sp, #4
    828c:	sub	sp, sp, #8
    8290:	str	r0, [fp, #-8]
    8294:	bl	2104 <MyGame_Example_Vec3__size>
    8298:	mov	r3, r0
    829c:	mov	r2, r3
    82a0:	mov	r1, #0
    82a4:	ldr	r0, [fp, #-8]
    82a8:	bl	0 <memset>
    82ac:	mov	r3, r0
    82b0:	mov	r0, r3
    82b4:	sub	sp, fp, #4
    82b8:	ldr	fp, [sp]
    82bc:	add	sp, sp, #4
    82c0:	pop	{pc}		; (ldr pc, [sp], #4)

000082c4 <MyGame_Example_Vec3_start>:
    82c4:	str	fp, [sp, #-8]!
    82c8:	str	lr, [sp, #4]
    82cc:	add	fp, sp, #4
    82d0:	sub	sp, sp, #8
    82d4:	str	r0, [fp, #-8]
    82d8:	mov	r2, #16
    82dc:	mov	r1, #32
    82e0:	ldr	r0, [fp, #-8]
    82e4:	bl	0 <flatcc_builder_start_struct>
    82e8:	mov	r3, r0
    82ec:	mov	r0, r3
    82f0:	sub	sp, fp, #4
    82f4:	ldr	fp, [sp]
    82f8:	add	sp, sp, #4
    82fc:	pop	{pc}		; (ldr pc, [sp], #4)

00008300 <MyGame_Example_Vec3_end_pe>:
    8300:	str	fp, [sp, #-8]!
    8304:	str	lr, [sp, #4]
    8308:	add	fp, sp, #4
    830c:	sub	sp, sp, #8
    8310:	str	r0, [fp, #-8]
    8314:	ldr	r0, [fp, #-8]
    8318:	bl	0 <flatcc_builder_end_struct>
    831c:	mov	r3, r0
    8320:	mov	r0, r3
    8324:	sub	sp, fp, #4
    8328:	ldr	fp, [sp]
    832c:	add	sp, sp, #4
    8330:	pop	{pc}		; (ldr pc, [sp], #4)

00008334 <MyGame_Example_Vec3_create>:
    8334:	str	fp, [sp, #-8]!
    8338:	str	lr, [sp, #4]
    833c:	add	fp, sp, #4
    8340:	sub	sp, sp, #40	; 0x28
    8344:	str	r0, [fp, #-16]
    8348:	vstr	s0, [fp, #-20]	; 0xffffffec
    834c:	vstr	s1, [fp, #-24]	; 0xffffffe8
    8350:	vstr	s2, [fp, #-28]	; 0xffffffe4
    8354:	vstr	d2, [fp, #-36]	; 0xffffffdc
    8358:	mov	r0, r1
    835c:	mov	r1, r2
    8360:	mov	r2, r3
    8364:	mov	r3, r0
    8368:	strb	r3, [fp, #-37]	; 0xffffffdb
    836c:	mov	r3, r1
    8370:	strh	r3, [fp, #-40]	; 0xffffffd8
    8374:	mov	r3, r2
    8378:	strb	r3, [fp, #-38]	; 0xffffffda
    837c:	ldr	r0, [fp, #-16]
    8380:	bl	82c4 <MyGame_Example_Vec3_start>
    8384:	str	r0, [fp, #-8]
    8388:	ldr	r3, [fp, #-8]
    838c:	cmp	r3, #0
    8390:	bne	839c <MyGame_Example_Vec3_create+0x68>
    8394:	mov	r3, #0
    8398:	b	83cc <MyGame_Example_Vec3_create+0x98>
    839c:	ldrsb	r3, [fp, #-38]	; 0xffffffda
    83a0:	ldrsh	r2, [fp, #-40]	; 0xffffffd8
    83a4:	ldrsb	r1, [fp, #-37]	; 0xffffffdb
    83a8:	vldr	d2, [fp, #-36]	; 0xffffffdc
    83ac:	vldr	s2, [fp, #-28]	; 0xffffffe4
    83b0:	vldr	s1, [fp, #-24]	; 0xffffffe8
    83b4:	vldr	s0, [fp, #-20]	; 0xffffffec
    83b8:	ldr	r0, [fp, #-8]
    83bc:	bl	80c8 <MyGame_Example_Vec3_assign_to_pe>
    83c0:	ldr	r0, [fp, #-16]
    83c4:	bl	8300 <MyGame_Example_Vec3_end_pe>
    83c8:	mov	r3, r0
    83cc:	mov	r0, r3
    83d0:	sub	sp, fp, #4
    83d4:	ldr	fp, [sp]
    83d8:	add	sp, sp, #4
    83dc:	pop	{pc}		; (ldr pc, [sp], #4)

000083e0 <MyGame_Example_Vec3_create_as_root>:
    83e0:	str	fp, [sp, #-8]!
    83e4:	str	lr, [sp, #4]
    83e8:	add	fp, sp, #4
    83ec:	sub	sp, sp, #40	; 0x28
    83f0:	str	r0, [fp, #-8]
    83f4:	vstr	s0, [fp, #-12]
    83f8:	vstr	s1, [fp, #-16]
    83fc:	vstr	s2, [fp, #-20]	; 0xffffffec
    8400:	vstr	d2, [fp, #-28]	; 0xffffffe4
    8404:	mov	r0, r1
    8408:	mov	r1, r2
    840c:	mov	r2, r3
    8410:	mov	r3, r0
    8414:	strb	r3, [fp, #-29]	; 0xffffffe3
    8418:	mov	r3, r1
    841c:	strh	r3, [fp, #-32]	; 0xffffffe0
    8420:	mov	r3, r2
    8424:	strb	r3, [fp, #-30]	; 0xffffffe2
    8428:	ldrsb	r3, [fp, #-30]	; 0xffffffe2
    842c:	ldrsh	r2, [fp, #-32]	; 0xffffffe0
    8430:	ldrsb	r1, [fp, #-29]	; 0xffffffe3
    8434:	vldr	d2, [fp, #-28]	; 0xffffffe4
    8438:	vldr	s2, [fp, #-20]	; 0xffffffec
    843c:	vldr	s1, [fp, #-16]
    8440:	vldr	s0, [fp, #-12]
    8444:	ldr	r0, [fp, #-8]
    8448:	bl	8334 <MyGame_Example_Vec3_create>
    844c:	mov	r2, r0
    8450:	mov	r3, #0
    8454:	str	r3, [sp, #4]
    8458:	mov	r3, #16
    845c:	str	r3, [sp]
    8460:	mov	r3, r2
    8464:	mov	r2, #0
    8468:	movw	r1, #0
    846c:	movt	r1, #0
    8470:	ldr	r0, [fp, #-8]
    8474:	bl	0 <flatcc_builder_create_buffer>
    8478:	mov	r3, r0
    847c:	mov	r0, r3
    8480:	sub	sp, fp, #4
    8484:	ldr	fp, [sp]
    8488:	add	sp, sp, #4
    848c:	pop	{pc}		; (ldr pc, [sp], #4)

00008490 <MyGame_Example_Vec3_create_as_typed_root>:
    8490:	str	fp, [sp, #-8]!
    8494:	str	lr, [sp, #4]
    8498:	add	fp, sp, #4
    849c:	sub	sp, sp, #40	; 0x28
    84a0:	str	r0, [fp, #-8]
    84a4:	vstr	s0, [fp, #-12]
    84a8:	vstr	s1, [fp, #-16]
    84ac:	vstr	s2, [fp, #-20]	; 0xffffffec
    84b0:	vstr	d2, [fp, #-28]	; 0xffffffe4
    84b4:	mov	r0, r1
    84b8:	mov	r1, r2
    84bc:	mov	r2, r3
    84c0:	mov	r3, r0
    84c4:	strb	r3, [fp, #-29]	; 0xffffffe3
    84c8:	mov	r3, r1
    84cc:	strh	r3, [fp, #-32]	; 0xffffffe0
    84d0:	mov	r3, r2
    84d4:	strb	r3, [fp, #-30]	; 0xffffffe2
    84d8:	ldrsb	r3, [fp, #-30]	; 0xffffffe2
    84dc:	ldrsh	r2, [fp, #-32]	; 0xffffffe0
    84e0:	ldrsb	r1, [fp, #-29]	; 0xffffffe3
    84e4:	vldr	d2, [fp, #-28]	; 0xffffffe4
    84e8:	vldr	s2, [fp, #-20]	; 0xffffffec
    84ec:	vldr	s1, [fp, #-16]
    84f0:	vldr	s0, [fp, #-12]
    84f4:	ldr	r0, [fp, #-8]
    84f8:	bl	8334 <MyGame_Example_Vec3_create>
    84fc:	mov	r2, r0
    8500:	mov	r3, #0
    8504:	str	r3, [sp, #4]
    8508:	mov	r3, #16
    850c:	str	r3, [sp]
    8510:	mov	r3, r2
    8514:	mov	r2, #0
    8518:	movw	r1, #0
    851c:	movt	r1, #0
    8520:	ldr	r0, [fp, #-8]
    8524:	bl	0 <flatcc_builder_create_buffer>
    8528:	mov	r3, r0
    852c:	mov	r0, r3
    8530:	sub	sp, fp, #4
    8534:	ldr	fp, [sp]
    8538:	add	sp, sp, #4
    853c:	pop	{pc}		; (ldr pc, [sp], #4)

00008540 <Fantasy_Rapunzel_assign_to_pe>:
    8540:	str	fp, [sp, #-8]!
    8544:	str	lr, [sp, #4]
    8548:	add	fp, sp, #4
    854c:	sub	sp, sp, #8
    8550:	str	r0, [fp, #-8]
    8554:	mov	r3, r1
    8558:	strh	r3, [fp, #-10]
    855c:	ldr	r3, [fp, #-8]
    8560:	ldrh	r2, [fp, #-10]
    8564:	mov	r1, r2
    8568:	mov	r0, r3
    856c:	bl	7764 <flatbuffers_uint16_assign_to_pe>
    8570:	ldr	r3, [fp, #-8]
    8574:	mov	r0, r3
    8578:	sub	sp, fp, #4
    857c:	ldr	fp, [sp]
    8580:	add	sp, sp, #4
    8584:	pop	{pc}		; (ldr pc, [sp], #4)

00008588 <Fantasy_Rapunzel_start>:
    8588:	str	fp, [sp, #-8]!
    858c:	str	lr, [sp, #4]
    8590:	add	fp, sp, #4
    8594:	sub	sp, sp, #8
    8598:	str	r0, [fp, #-8]
    859c:	mov	r2, #2
    85a0:	mov	r1, #2
    85a4:	ldr	r0, [fp, #-8]
    85a8:	bl	0 <flatcc_builder_start_struct>
    85ac:	mov	r3, r0
    85b0:	mov	r0, r3
    85b4:	sub	sp, fp, #4
    85b8:	ldr	fp, [sp]
    85bc:	add	sp, sp, #4
    85c0:	pop	{pc}		; (ldr pc, [sp], #4)

000085c4 <Fantasy_Rapunzel_end_pe>:
    85c4:	str	fp, [sp, #-8]!
    85c8:	str	lr, [sp, #4]
    85cc:	add	fp, sp, #4
    85d0:	sub	sp, sp, #8
    85d4:	str	r0, [fp, #-8]
    85d8:	ldr	r0, [fp, #-8]
    85dc:	bl	0 <flatcc_builder_end_struct>
    85e0:	mov	r3, r0
    85e4:	mov	r0, r3
    85e8:	sub	sp, fp, #4
    85ec:	ldr	fp, [sp]
    85f0:	add	sp, sp, #4
    85f4:	pop	{pc}		; (ldr pc, [sp], #4)

000085f8 <Fantasy_Rapunzel_create>:
    85f8:	str	fp, [sp, #-8]!
    85fc:	str	lr, [sp, #4]
    8600:	add	fp, sp, #4
    8604:	sub	sp, sp, #16
    8608:	str	r0, [fp, #-16]
    860c:	mov	r3, r1
    8610:	strh	r3, [fp, #-18]	; 0xffffffee
    8614:	ldr	r0, [fp, #-16]
    8618:	bl	8588 <Fantasy_Rapunzel_start>
    861c:	str	r0, [fp, #-8]
    8620:	ldr	r3, [fp, #-8]
    8624:	cmp	r3, #0
    8628:	bne	8634 <Fantasy_Rapunzel_create+0x3c>
    862c:	mov	r3, #0
    8630:	b	8650 <Fantasy_Rapunzel_create+0x58>
    8634:	ldrh	r3, [fp, #-18]	; 0xffffffee
    8638:	mov	r1, r3
    863c:	ldr	r0, [fp, #-8]
    8640:	bl	8540 <Fantasy_Rapunzel_assign_to_pe>
    8644:	ldr	r0, [fp, #-16]
    8648:	bl	85c4 <Fantasy_Rapunzel_end_pe>
    864c:	mov	r3, r0
    8650:	mov	r0, r3
    8654:	sub	sp, fp, #4
    8658:	ldr	fp, [sp]
    865c:	add	sp, sp, #4
    8660:	pop	{pc}		; (ldr pc, [sp], #4)

00008664 <Fantasy_BookReader_assign_to_pe>:
    8664:	str	fp, [sp, #-8]!
    8668:	str	lr, [sp, #4]
    866c:	add	fp, sp, #4
    8670:	sub	sp, sp, #8
    8674:	str	r0, [fp, #-8]
    8678:	str	r1, [fp, #-12]
    867c:	ldr	r3, [fp, #-8]
    8680:	ldr	r1, [fp, #-12]
    8684:	mov	r0, r3
    8688:	bl	78e0 <flatbuffers_int32_assign_to_pe>
    868c:	ldr	r3, [fp, #-8]
    8690:	mov	r0, r3
    8694:	sub	sp, fp, #4
    8698:	ldr	fp, [sp]
    869c:	add	sp, sp, #4
    86a0:	pop	{pc}		; (ldr pc, [sp], #4)

000086a4 <Fantasy_BookReader_start>:
    86a4:	str	fp, [sp, #-8]!
    86a8:	str	lr, [sp, #4]
    86ac:	add	fp, sp, #4
    86b0:	sub	sp, sp, #8
    86b4:	str	r0, [fp, #-8]
    86b8:	mov	r2, #4
    86bc:	mov	r1, #4
    86c0:	ldr	r0, [fp, #-8]
    86c4:	bl	0 <flatcc_builder_start_struct>
    86c8:	mov	r3, r0
    86cc:	mov	r0, r3
    86d0:	sub	sp, fp, #4
    86d4:	ldr	fp, [sp]
    86d8:	add	sp, sp, #4
    86dc:	pop	{pc}		; (ldr pc, [sp], #4)

000086e0 <Fantasy_BookReader_end>:
    86e0:	str	fp, [sp, #-8]!
    86e4:	str	lr, [sp, #4]
    86e8:	add	fp, sp, #4
    86ec:	sub	sp, sp, #8
    86f0:	str	r0, [fp, #-8]
    86f4:	ldr	r0, [fp, #-8]
    86f8:	bl	0 <flatcc_builder_end_struct>
    86fc:	mov	r3, r0
    8700:	mov	r0, r3
    8704:	sub	sp, fp, #4
    8708:	ldr	fp, [sp]
    870c:	add	sp, sp, #4
    8710:	pop	{pc}		; (ldr pc, [sp], #4)

00008714 <Fantasy_BookReader_end_pe>:
    8714:	str	fp, [sp, #-8]!
    8718:	str	lr, [sp, #4]
    871c:	add	fp, sp, #4
    8720:	sub	sp, sp, #8
    8724:	str	r0, [fp, #-8]
    8728:	ldr	r0, [fp, #-8]
    872c:	bl	0 <flatcc_builder_end_struct>
    8730:	mov	r3, r0
    8734:	mov	r0, r3
    8738:	sub	sp, fp, #4
    873c:	ldr	fp, [sp]
    8740:	add	sp, sp, #4
    8744:	pop	{pc}		; (ldr pc, [sp], #4)

00008748 <Fantasy_BookReader_create>:
    8748:	str	fp, [sp, #-8]!
    874c:	str	lr, [sp, #4]
    8750:	add	fp, sp, #4
    8754:	sub	sp, sp, #16
    8758:	str	r0, [fp, #-16]
    875c:	str	r1, [fp, #-20]	; 0xffffffec
    8760:	ldr	r0, [fp, #-16]
    8764:	bl	86a4 <Fantasy_BookReader_start>
    8768:	str	r0, [fp, #-8]
    876c:	ldr	r3, [fp, #-8]
    8770:	cmp	r3, #0
    8774:	bne	8780 <Fantasy_BookReader_create+0x38>
    8778:	mov	r3, #0
    877c:	b	8798 <Fantasy_BookReader_create+0x50>
    8780:	ldr	r1, [fp, #-20]	; 0xffffffec
    8784:	ldr	r0, [fp, #-8]
    8788:	bl	8664 <Fantasy_BookReader_assign_to_pe>
    878c:	ldr	r0, [fp, #-16]
    8790:	bl	8714 <Fantasy_BookReader_end_pe>
    8794:	mov	r3, r0
    8798:	mov	r0, r3
    879c:	sub	sp, fp, #4
    87a0:	ldr	fp, [sp]
    87a4:	add	sp, sp, #4
    87a8:	pop	{pc}		; (ldr pc, [sp], #4)

000087ac <MyGame_Example_with_emptystruct_start>:
    87ac:	str	fp, [sp, #-8]!
    87b0:	str	lr, [sp, #4]
    87b4:	add	fp, sp, #4
    87b8:	sub	sp, sp, #8
    87bc:	str	r0, [fp, #-8]
    87c0:	mov	r1, #1
    87c4:	ldr	r0, [fp, #-8]
    87c8:	bl	0 <flatcc_builder_start_table>
    87cc:	mov	r3, r0
    87d0:	mov	r0, r3
    87d4:	sub	sp, fp, #4
    87d8:	ldr	fp, [sp]
    87dc:	add	sp, sp, #4
    87e0:	pop	{pc}		; (ldr pc, [sp], #4)

000087e4 <MyGame_Example_with_emptystruct_end>:
    87e4:	str	fp, [sp, #-8]!
    87e8:	str	lr, [sp, #4]
    87ec:	add	fp, sp, #4
    87f0:	sub	sp, sp, #8
    87f4:	str	r0, [fp, #-8]
    87f8:	mov	r2, #0
    87fc:	movw	r1, #0
    8800:	movt	r1, #0
    8804:	ldr	r0, [fp, #-8]
    8808:	bl	0 <flatcc_builder_check_required>
    880c:	mov	r3, r0
    8810:	cmp	r3, #0
    8814:	bne	8838 <MyGame_Example_with_emptystruct_end+0x54>
    8818:	movw	r3, #0
    881c:	movt	r3, #0
    8820:	mov	r2, #215	; 0xd7
    8824:	movw	r1, #0
    8828:	movt	r1, #0
    882c:	movw	r0, #0
    8830:	movt	r0, #0
    8834:	bl	0 <__assert_fail>
    8838:	ldr	r0, [fp, #-8]
    883c:	bl	0 <flatcc_builder_end_table>
    8840:	mov	r3, r0
    8844:	mov	r0, r3
    8848:	sub	sp, fp, #4
    884c:	ldr	fp, [sp]
    8850:	add	sp, sp, #4
    8854:	pop	{pc}		; (ldr pc, [sp], #4)

00008858 <MyGame_Example_TestSimpleTableWithEnum_start>:
    8858:	str	fp, [sp, #-8]!
    885c:	str	lr, [sp, #4]
    8860:	add	fp, sp, #4
    8864:	sub	sp, sp, #8
    8868:	str	r0, [fp, #-8]
    886c:	mov	r1, #4
    8870:	ldr	r0, [fp, #-8]
    8874:	bl	0 <flatcc_builder_start_table>
    8878:	mov	r3, r0
    887c:	mov	r0, r3
    8880:	sub	sp, fp, #4
    8884:	ldr	fp, [sp]
    8888:	add	sp, sp, #4
    888c:	pop	{pc}		; (ldr pc, [sp], #4)

00008890 <MyGame_Example_TestSimpleTableWithEnum_end>:
    8890:	str	fp, [sp, #-8]!
    8894:	str	lr, [sp, #4]
    8898:	add	fp, sp, #4
    889c:	sub	sp, sp, #8
    88a0:	str	r0, [fp, #-8]
    88a4:	mov	r2, #0
    88a8:	movw	r1, #0
    88ac:	movt	r1, #0
    88b0:	ldr	r0, [fp, #-8]
    88b4:	bl	0 <flatcc_builder_check_required>
    88b8:	mov	r3, r0
    88bc:	cmp	r3, #0
    88c0:	bne	88e4 <MyGame_Example_TestSimpleTableWithEnum_end+0x54>
    88c4:	movw	r3, #0
    88c8:	movt	r3, #0
    88cc:	mov	r2, #217	; 0xd9
    88d0:	movw	r1, #0
    88d4:	movt	r1, #0
    88d8:	movw	r0, #0
    88dc:	movt	r0, #0
    88e0:	bl	0 <__assert_fail>
    88e4:	ldr	r0, [fp, #-8]
    88e8:	bl	0 <flatcc_builder_end_table>
    88ec:	mov	r3, r0
    88f0:	mov	r0, r3
    88f4:	sub	sp, fp, #4
    88f8:	ldr	fp, [sp]
    88fc:	add	sp, sp, #4
    8900:	pop	{pc}		; (ldr pc, [sp], #4)

00008904 <MyGame_Example_Stat_start>:
    8904:	str	fp, [sp, #-8]!
    8908:	str	lr, [sp, #4]
    890c:	add	fp, sp, #4
    8910:	sub	sp, sp, #8
    8914:	str	r0, [fp, #-8]
    8918:	mov	r1, #3
    891c:	ldr	r0, [fp, #-8]
    8920:	bl	0 <flatcc_builder_start_table>
    8924:	mov	r3, r0
    8928:	mov	r0, r3
    892c:	sub	sp, fp, #4
    8930:	ldr	fp, [sp]
    8934:	add	sp, sp, #4
    8938:	pop	{pc}		; (ldr pc, [sp], #4)

0000893c <MyGame_Example_Stat_end>:
    893c:	str	fp, [sp, #-8]!
    8940:	str	lr, [sp, #4]
    8944:	add	fp, sp, #4
    8948:	sub	sp, sp, #8
    894c:	str	r0, [fp, #-8]
    8950:	mov	r2, #0
    8954:	movw	r1, #0
    8958:	movt	r1, #0
    895c:	ldr	r0, [fp, #-8]
    8960:	bl	0 <flatcc_builder_check_required>
    8964:	mov	r3, r0
    8968:	cmp	r3, #0
    896c:	bne	8990 <MyGame_Example_Stat_end+0x54>
    8970:	movw	r3, #0
    8974:	movt	r3, #0
    8978:	mov	r2, #221	; 0xdd
    897c:	movw	r1, #0
    8980:	movt	r1, #0
    8984:	movw	r0, #0
    8988:	movt	r0, #0
    898c:	bl	0 <__assert_fail>
    8990:	ldr	r0, [fp, #-8]
    8994:	bl	0 <flatcc_builder_end_table>
    8998:	mov	r3, r0
    899c:	mov	r0, r3
    89a0:	sub	sp, fp, #4
    89a4:	ldr	fp, [sp]
    89a8:	add	sp, sp, #4
    89ac:	pop	{pc}		; (ldr pc, [sp], #4)

000089b0 <MyGame_Example_Alt_start>:
    89b0:	str	fp, [sp, #-8]!
    89b4:	str	lr, [sp, #4]
    89b8:	add	fp, sp, #4
    89bc:	sub	sp, sp, #8
    89c0:	str	r0, [fp, #-8]
    89c4:	mov	r1, #4
    89c8:	ldr	r0, [fp, #-8]
    89cc:	bl	0 <flatcc_builder_start_table>
    89d0:	mov	r3, r0
    89d4:	mov	r0, r3
    89d8:	sub	sp, fp, #4
    89dc:	ldr	fp, [sp]
    89e0:	add	sp, sp, #4
    89e4:	pop	{pc}		; (ldr pc, [sp], #4)

000089e8 <MyGame_Example_Alt_end>:
    89e8:	str	fp, [sp, #-8]!
    89ec:	str	lr, [sp, #4]
    89f0:	add	fp, sp, #4
    89f4:	sub	sp, sp, #8
    89f8:	str	r0, [fp, #-8]
    89fc:	mov	r2, #0
    8a00:	movw	r1, #0
    8a04:	movt	r1, #0
    8a08:	ldr	r0, [fp, #-8]
    8a0c:	bl	0 <flatcc_builder_check_required>
    8a10:	mov	r3, r0
    8a14:	cmp	r3, #0
    8a18:	bne	8a3c <MyGame_Example_Alt_end+0x54>
    8a1c:	movw	r3, #0
    8a20:	movt	r3, #0
    8a24:	mov	r2, #223	; 0xdf
    8a28:	movw	r1, #0
    8a2c:	movt	r1, #0
    8a30:	movw	r0, #0
    8a34:	movt	r0, #0
    8a38:	bl	0 <__assert_fail>
    8a3c:	ldr	r0, [fp, #-8]
    8a40:	bl	0 <flatcc_builder_end_table>
    8a44:	mov	r3, r0
    8a48:	mov	r0, r3
    8a4c:	sub	sp, fp, #4
    8a50:	ldr	fp, [sp]
    8a54:	add	sp, sp, #4
    8a58:	pop	{pc}		; (ldr pc, [sp], #4)

00008a5c <MyGame_Example_Monster_start>:
    8a5c:	str	fp, [sp, #-8]!
    8a60:	str	lr, [sp, #4]
    8a64:	add	fp, sp, #4
    8a68:	sub	sp, sp, #8
    8a6c:	str	r0, [fp, #-8]
    8a70:	mov	r1, #36	; 0x24
    8a74:	ldr	r0, [fp, #-8]
    8a78:	bl	0 <flatcc_builder_start_table>
    8a7c:	mov	r3, r0
    8a80:	mov	r0, r3
    8a84:	sub	sp, fp, #4
    8a88:	ldr	fp, [sp]
    8a8c:	add	sp, sp, #4
    8a90:	pop	{pc}		; (ldr pc, [sp], #4)

00008a94 <MyGame_Example_Monster_end>:
    8a94:	str	fp, [sp, #-8]!
    8a98:	str	lr, [sp, #4]
    8a9c:	add	fp, sp, #4
    8aa0:	sub	sp, sp, #8
    8aa4:	str	r0, [fp, #-8]
    8aa8:	mov	r2, #1
    8aac:	movw	r1, #0
    8ab0:	movt	r1, #0
    8ab4:	ldr	r0, [fp, #-8]
    8ab8:	bl	0 <flatcc_builder_check_required>
    8abc:	mov	r3, r0
    8ac0:	cmp	r3, #0
    8ac4:	bne	8ae8 <MyGame_Example_Monster_end+0x54>
    8ac8:	movw	r3, #0
    8acc:	movt	r3, #0
    8ad0:	mov	r2, #235	; 0xeb
    8ad4:	movw	r1, #0
    8ad8:	movt	r1, #0
    8adc:	movw	r0, #0
    8ae0:	movt	r0, #0
    8ae4:	bl	0 <__assert_fail>
    8ae8:	ldr	r0, [fp, #-8]
    8aec:	bl	0 <flatcc_builder_end_table>
    8af0:	mov	r3, r0
    8af4:	mov	r0, r3
    8af8:	sub	sp, fp, #4
    8afc:	ldr	fp, [sp]
    8b00:	add	sp, sp, #4
    8b04:	pop	{pc}		; (ldr pc, [sp], #4)

00008b08 <MyGame_Example_Monster_vec_push>:
    8b08:	str	fp, [sp, #-8]!
    8b0c:	str	lr, [sp, #4]
    8b10:	add	fp, sp, #4
    8b14:	sub	sp, sp, #8
    8b18:	str	r0, [fp, #-8]
    8b1c:	str	r1, [fp, #-12]
    8b20:	ldr	r3, [fp, #-12]
    8b24:	cmp	r3, #0
    8b28:	beq	8b40 <MyGame_Example_Monster_vec_push+0x38>
    8b2c:	ldr	r1, [fp, #-12]
    8b30:	ldr	r0, [fp, #-8]
    8b34:	bl	0 <flatcc_builder_offset_vector_push>
    8b38:	mov	r3, r0
    8b3c:	b	8b44 <MyGame_Example_Monster_vec_push+0x3c>
    8b40:	mov	r3, #0
    8b44:	mov	r0, r3
    8b48:	sub	sp, fp, #4
    8b4c:	ldr	fp, [sp]
    8b50:	add	sp, sp, #4
    8b54:	pop	{pc}		; (ldr pc, [sp], #4)

00008b58 <MyGame_Example_TypeAliases_start>:
    8b58:	str	fp, [sp, #-8]!
    8b5c:	str	lr, [sp, #4]
    8b60:	add	fp, sp, #4
    8b64:	sub	sp, sp, #8
    8b68:	str	r0, [fp, #-8]
    8b6c:	mov	r1, #12
    8b70:	ldr	r0, [fp, #-8]
    8b74:	bl	0 <flatcc_builder_start_table>
    8b78:	mov	r3, r0
    8b7c:	mov	r0, r3
    8b80:	sub	sp, fp, #4
    8b84:	ldr	fp, [sp]
    8b88:	add	sp, sp, #4
    8b8c:	pop	{pc}		; (ldr pc, [sp], #4)

00008b90 <MyGame_Example_TypeAliases_end>:
    8b90:	str	fp, [sp, #-8]!
    8b94:	str	lr, [sp, #4]
    8b98:	add	fp, sp, #4
    8b9c:	sub	sp, sp, #8
    8ba0:	str	r0, [fp, #-8]
    8ba4:	mov	r2, #0
    8ba8:	movw	r1, #0
    8bac:	movt	r1, #0
    8bb0:	ldr	r0, [fp, #-8]
    8bb4:	bl	0 <flatcc_builder_check_required>
    8bb8:	mov	r3, r0
    8bbc:	cmp	r3, #0
    8bc0:	bne	8be4 <MyGame_Example_TypeAliases_end+0x54>
    8bc4:	movw	r3, #0
    8bc8:	movt	r3, #0
    8bcc:	mov	r2, #237	; 0xed
    8bd0:	movw	r1, #0
    8bd4:	movt	r1, #0
    8bd8:	movw	r0, #0
    8bdc:	movt	r0, #0
    8be0:	bl	0 <__assert_fail>
    8be4:	ldr	r0, [fp, #-8]
    8be8:	bl	0 <flatcc_builder_end_table>
    8bec:	mov	r3, r0
    8bf0:	mov	r0, r3
    8bf4:	sub	sp, fp, #4
    8bf8:	ldr	fp, [sp]
    8bfc:	add	sp, sp, #4
    8c00:	pop	{pc}		; (ldr pc, [sp], #4)

00008c04 <Fantasy_Attacker_start>:
    8c04:	str	fp, [sp, #-8]!
    8c08:	str	lr, [sp, #4]
    8c0c:	add	fp, sp, #4
    8c10:	sub	sp, sp, #8
    8c14:	str	r0, [fp, #-8]
    8c18:	mov	r1, #1
    8c1c:	ldr	r0, [fp, #-8]
    8c20:	bl	0 <flatcc_builder_start_table>
    8c24:	mov	r3, r0
    8c28:	mov	r0, r3
    8c2c:	sub	sp, fp, #4
    8c30:	ldr	fp, [sp]
    8c34:	add	sp, sp, #4
    8c38:	pop	{pc}		; (ldr pc, [sp], #4)

00008c3c <Fantasy_Attacker_end>:
    8c3c:	str	fp, [sp, #-8]!
    8c40:	str	lr, [sp, #4]
    8c44:	add	fp, sp, #4
    8c48:	sub	sp, sp, #8
    8c4c:	str	r0, [fp, #-8]
    8c50:	mov	r2, #0
    8c54:	movw	r1, #0
    8c58:	movt	r1, #0
    8c5c:	ldr	r0, [fp, #-8]
    8c60:	bl	0 <flatcc_builder_check_required>
    8c64:	mov	r3, r0
    8c68:	cmp	r3, #0
    8c6c:	bne	8c90 <Fantasy_Attacker_end+0x54>
    8c70:	movw	r3, #0
    8c74:	movt	r3, #0
    8c78:	mov	r2, #239	; 0xef
    8c7c:	movw	r1, #0
    8c80:	movt	r1, #0
    8c84:	movw	r0, #0
    8c88:	movt	r0, #0
    8c8c:	bl	0 <__assert_fail>
    8c90:	ldr	r0, [fp, #-8]
    8c94:	bl	0 <flatcc_builder_end_table>
    8c98:	mov	r3, r0
    8c9c:	mov	r0, r3
    8ca0:	sub	sp, fp, #4
    8ca4:	ldr	fp, [sp]
    8ca8:	add	sp, sp, #4
    8cac:	pop	{pc}		; (ldr pc, [sp], #4)

00008cb0 <Fantasy_Movie_start>:
    8cb0:	str	fp, [sp, #-8]!
    8cb4:	str	lr, [sp, #4]
    8cb8:	add	fp, sp, #4
    8cbc:	sub	sp, sp, #8
    8cc0:	str	r0, [fp, #-8]
    8cc4:	mov	r1, #10
    8cc8:	ldr	r0, [fp, #-8]
    8ccc:	bl	0 <flatcc_builder_start_table>
    8cd0:	mov	r3, r0
    8cd4:	mov	r0, r3
    8cd8:	sub	sp, fp, #4
    8cdc:	ldr	fp, [sp]
    8ce0:	add	sp, sp, #4
    8ce4:	pop	{pc}		; (ldr pc, [sp], #4)

00008ce8 <Fantasy_Movie_end>:
    8ce8:	str	fp, [sp, #-8]!
    8cec:	str	lr, [sp, #4]
    8cf0:	add	fp, sp, #4
    8cf4:	sub	sp, sp, #8
    8cf8:	str	r0, [fp, #-8]
    8cfc:	mov	r2, #0
    8d00:	movw	r1, #0
    8d04:	movt	r1, #0
    8d08:	ldr	r0, [fp, #-8]
    8d0c:	bl	0 <flatcc_builder_check_required>
    8d10:	mov	r3, r0
    8d14:	cmp	r3, #0
    8d18:	bne	8d3c <Fantasy_Movie_end+0x54>
    8d1c:	movw	r3, #0
    8d20:	movt	r3, #0
    8d24:	mov	r2, #241	; 0xf1
    8d28:	movw	r1, #0
    8d2c:	movt	r1, #0
    8d30:	movw	r0, #0
    8d34:	movt	r0, #0
    8d38:	bl	0 <__assert_fail>
    8d3c:	ldr	r0, [fp, #-8]
    8d40:	bl	0 <flatcc_builder_end_table>
    8d44:	mov	r3, r0
    8d48:	mov	r0, r3
    8d4c:	sub	sp, fp, #4
    8d50:	ldr	fp, [sp]
    8d54:	add	sp, sp, #4
    8d58:	pop	{pc}		; (ldr pc, [sp], #4)

00008d5c <MyGame_Example_Any_as_Monster>:
    8d5c:	push	{fp}		; (str fp, [sp, #-4]!)
    8d60:	add	fp, sp, #0
    8d64:	sub	sp, sp, #20
    8d68:	str	r0, [fp, #-16]
    8d6c:	str	r1, [fp, #-20]	; 0xffffffec
    8d70:	mov	r3, #1
    8d74:	strb	r3, [fp, #-12]
    8d78:	ldr	r3, [fp, #-20]	; 0xffffffec
    8d7c:	str	r3, [fp, #-8]
    8d80:	ldr	r3, [fp, #-16]
    8d84:	mov	r1, r3
    8d88:	sub	r3, fp, #12
    8d8c:	ldrd	r2, [r3]
    8d90:	strd	r2, [r1]
    8d94:	ldr	r0, [fp, #-16]
    8d98:	add	sp, fp, #0
    8d9c:	pop	{fp}		; (ldr fp, [sp], #4)
    8da0:	bx	lr

00008da4 <MyGame_Example_Any_as_TestSimpleTableWithEnum>:
    8da4:	push	{fp}		; (str fp, [sp, #-4]!)
    8da8:	add	fp, sp, #0
    8dac:	sub	sp, sp, #20
    8db0:	str	r0, [fp, #-16]
    8db4:	str	r1, [fp, #-20]	; 0xffffffec
    8db8:	mov	r3, #2
    8dbc:	strb	r3, [fp, #-12]
    8dc0:	ldr	r3, [fp, #-20]	; 0xffffffec
    8dc4:	str	r3, [fp, #-8]
    8dc8:	ldr	r3, [fp, #-16]
    8dcc:	mov	r1, r3
    8dd0:	sub	r3, fp, #12
    8dd4:	ldrd	r2, [r3]
    8dd8:	strd	r2, [r1]
    8ddc:	ldr	r0, [fp, #-16]
    8de0:	add	sp, fp, #0
    8de4:	pop	{fp}		; (ldr fp, [sp], #4)
    8de8:	bx	lr

00008dec <MyGame_Example_Any_as_Alt>:
    8dec:	push	{fp}		; (str fp, [sp, #-4]!)
    8df0:	add	fp, sp, #0
    8df4:	sub	sp, sp, #20
    8df8:	str	r0, [fp, #-16]
    8dfc:	str	r1, [fp, #-20]	; 0xffffffec
    8e00:	mov	r3, #4
    8e04:	strb	r3, [fp, #-12]
    8e08:	ldr	r3, [fp, #-20]	; 0xffffffec
    8e0c:	str	r3, [fp, #-8]
    8e10:	ldr	r3, [fp, #-16]
    8e14:	mov	r1, r3
    8e18:	sub	r3, fp, #12
    8e1c:	ldrd	r2, [r3]
    8e20:	strd	r2, [r1]
    8e24:	ldr	r0, [fp, #-16]
    8e28:	add	sp, fp, #0
    8e2c:	pop	{fp}		; (ldr fp, [sp], #4)
    8e30:	bx	lr

00008e34 <MyGame_Example_Any_vec_start>:
    8e34:	str	fp, [sp, #-8]!
    8e38:	str	lr, [sp, #4]
    8e3c:	add	fp, sp, #4
    8e40:	sub	sp, sp, #8
    8e44:	str	r0, [fp, #-8]
    8e48:	ldr	r0, [fp, #-8]
    8e4c:	bl	0 <flatcc_builder_start_union_vector>
    8e50:	mov	r3, r0
    8e54:	mov	r0, r3
    8e58:	sub	sp, fp, #4
    8e5c:	ldr	fp, [sp]
    8e60:	add	sp, sp, #4
    8e64:	pop	{pc}		; (ldr pc, [sp], #4)

00008e68 <MyGame_Example_Any_vec_end>:
    8e68:	str	fp, [sp, #-8]!
    8e6c:	str	lr, [sp, #4]
    8e70:	add	fp, sp, #4
    8e74:	sub	sp, sp, #8
    8e78:	str	r0, [fp, #-8]
    8e7c:	str	r1, [fp, #-12]
    8e80:	ldr	r3, [fp, #-8]
    8e84:	ldr	r1, [fp, #-12]
    8e88:	mov	r0, r3
    8e8c:	bl	0 <flatcc_builder_end_union_vector>
    8e90:	ldr	r0, [fp, #-8]
    8e94:	sub	sp, fp, #4
    8e98:	ldr	fp, [sp]
    8e9c:	add	sp, sp, #4
    8ea0:	pop	{pc}		; (ldr pc, [sp], #4)

00008ea4 <MyGame_Example_Any_vec_push>:
    8ea4:	str	fp, [sp, #-8]!
    8ea8:	str	lr, [sp, #4]
    8eac:	add	fp, sp, #4
    8eb0:	sub	sp, sp, #16
    8eb4:	str	r0, [fp, #-8]
    8eb8:	sub	r3, fp, #16
    8ebc:	stm	r3, {r1, r2}
    8ec0:	sub	r3, fp, #16
    8ec4:	ldm	r3, {r1, r2}
    8ec8:	ldr	r0, [fp, #-8]
    8ecc:	bl	0 <flatcc_builder_union_vector_push>
    8ed0:	mov	r3, r0
    8ed4:	mov	r0, r3
    8ed8:	sub	sp, fp, #4
    8edc:	ldr	fp, [sp]
    8ee0:	add	sp, sp, #4
    8ee4:	pop	{pc}		; (ldr pc, [sp], #4)

00008ee8 <Fantasy_Character_as_MuLan>:
    8ee8:	push	{fp}		; (str fp, [sp, #-4]!)
    8eec:	add	fp, sp, #0
    8ef0:	sub	sp, sp, #20
    8ef4:	str	r0, [fp, #-16]
    8ef8:	str	r1, [fp, #-20]	; 0xffffffec
    8efc:	mov	r3, #2
    8f00:	strb	r3, [fp, #-12]
    8f04:	ldr	r3, [fp, #-20]	; 0xffffffec
    8f08:	str	r3, [fp, #-8]
    8f0c:	ldr	r3, [fp, #-16]
    8f10:	mov	r1, r3
    8f14:	sub	r3, fp, #12
    8f18:	ldrd	r2, [r3]
    8f1c:	strd	r2, [r1]
    8f20:	ldr	r0, [fp, #-16]
    8f24:	add	sp, fp, #0
    8f28:	pop	{fp}		; (ldr fp, [sp], #4)
    8f2c:	bx	lr

00008f30 <Fantasy_Character_as_Rapunzel>:
    8f30:	push	{fp}		; (str fp, [sp, #-4]!)
    8f34:	add	fp, sp, #0
    8f38:	sub	sp, sp, #20
    8f3c:	str	r0, [fp, #-16]
    8f40:	str	r1, [fp, #-20]	; 0xffffffec
    8f44:	mov	r3, #8
    8f48:	strb	r3, [fp, #-12]
    8f4c:	ldr	r3, [fp, #-20]	; 0xffffffec
    8f50:	str	r3, [fp, #-8]
    8f54:	ldr	r3, [fp, #-16]
    8f58:	mov	r1, r3
    8f5c:	sub	r3, fp, #12
    8f60:	ldrd	r2, [r3]
    8f64:	strd	r2, [r1]
    8f68:	ldr	r0, [fp, #-16]
    8f6c:	add	sp, fp, #0
    8f70:	pop	{fp}		; (ldr fp, [sp], #4)
    8f74:	bx	lr

00008f78 <Fantasy_Character_as_Belle>:
    8f78:	push	{fp}		; (str fp, [sp, #-4]!)
    8f7c:	add	fp, sp, #0
    8f80:	sub	sp, sp, #20
    8f84:	str	r0, [fp, #-16]
    8f88:	str	r1, [fp, #-20]	; 0xffffffec
    8f8c:	mov	r3, #9
    8f90:	strb	r3, [fp, #-12]
    8f94:	ldr	r3, [fp, #-20]	; 0xffffffec
    8f98:	str	r3, [fp, #-8]
    8f9c:	ldr	r3, [fp, #-16]
    8fa0:	mov	r1, r3
    8fa4:	sub	r3, fp, #12
    8fa8:	ldrd	r2, [r3]
    8fac:	strd	r2, [r1]
    8fb0:	ldr	r0, [fp, #-16]
    8fb4:	add	sp, fp, #0
    8fb8:	pop	{fp}		; (ldr fp, [sp], #4)
    8fbc:	bx	lr

00008fc0 <Fantasy_Character_as_Other>:
    8fc0:	push	{fp}		; (str fp, [sp, #-4]!)
    8fc4:	add	fp, sp, #0
    8fc8:	sub	sp, sp, #20
    8fcc:	str	r0, [fp, #-16]
    8fd0:	str	r1, [fp, #-20]	; 0xffffffec
    8fd4:	mov	r3, #11
    8fd8:	strb	r3, [fp, #-12]
    8fdc:	ldr	r3, [fp, #-20]	; 0xffffffec
    8fe0:	str	r3, [fp, #-8]
    8fe4:	ldr	r3, [fp, #-16]
    8fe8:	mov	r1, r3
    8fec:	sub	r3, fp, #12
    8ff0:	ldrd	r2, [r3]
    8ff4:	strd	r2, [r1]
    8ff8:	ldr	r0, [fp, #-16]
    8ffc:	add	sp, fp, #0
    9000:	pop	{fp}		; (ldr fp, [sp], #4)
    9004:	bx	lr

00009008 <Fantasy_Character_vec_push>:
    9008:	str	fp, [sp, #-8]!
    900c:	str	lr, [sp, #4]
    9010:	add	fp, sp, #4
    9014:	sub	sp, sp, #16
    9018:	str	r0, [fp, #-8]
    901c:	sub	r3, fp, #16
    9020:	stm	r3, {r1, r2}
    9024:	sub	r3, fp, #16
    9028:	ldm	r3, {r1, r2}
    902c:	ldr	r0, [fp, #-8]
    9030:	bl	0 <flatcc_builder_union_vector_push>
    9034:	mov	r3, r0
    9038:	mov	r0, r3
    903c:	sub	sp, fp, #4
    9040:	ldr	fp, [sp]
    9044:	add	sp, sp, #4
    9048:	pop	{pc}		; (ldr pc, [sp], #4)

0000904c <MyGame_Example_with_emptystruct_empty_start>:
    904c:	str	fp, [sp, #-8]!
    9050:	str	lr, [sp, #4]
    9054:	add	fp, sp, #4
    9058:	sub	sp, sp, #8
    905c:	str	r0, [fp, #-8]
    9060:	mov	r3, #1
    9064:	mov	r2, #0
    9068:	mov	r1, #0
    906c:	ldr	r0, [fp, #-8]
    9070:	bl	0 <flatcc_builder_table_add>
    9074:	mov	r3, r0
    9078:	mov	r0, r3
    907c:	sub	sp, fp, #4
    9080:	ldr	fp, [sp]
    9084:	add	sp, sp, #4
    9088:	pop	{pc}		; (ldr pc, [sp], #4)

0000908c <MyGame_Example_with_emptystruct_empty_add>:
    908c:	str	fp, [sp, #-8]!
    9090:	str	lr, [sp, #4]
    9094:	add	fp, sp, #4
    9098:	sub	sp, sp, #16
    909c:	str	r0, [fp, #-16]
    90a0:	str	r1, [fp, #-20]	; 0xffffffec
    90a4:	ldr	r0, [fp, #-16]
    90a8:	bl	904c <MyGame_Example_with_emptystruct_empty_start>
    90ac:	str	r0, [fp, #-8]
    90b0:	ldr	r3, [fp, #-8]
    90b4:	cmp	r3, #0
    90b8:	bne	90c4 <MyGame_Example_with_emptystruct_empty_add+0x38>
    90bc:	mvn	r3, #0
    90c0:	b	90d4 <MyGame_Example_with_emptystruct_empty_add+0x48>
    90c4:	ldr	r1, [fp, #-20]	; 0xffffffec
    90c8:	ldr	r0, [fp, #-8]
    90cc:	bl	80a0 <MyGame_Example_emptystruct_copy_to_pe>
    90d0:	mov	r3, #0
    90d4:	mov	r0, r3
    90d8:	sub	sp, fp, #4
    90dc:	ldr	fp, [sp]
    90e0:	add	sp, sp, #4
    90e4:	pop	{pc}		; (ldr pc, [sp], #4)

000090e8 <MyGame_Example_with_emptystruct_create>:
    90e8:	str	fp, [sp, #-8]!
    90ec:	str	lr, [sp, #4]
    90f0:	add	fp, sp, #4
    90f4:	sub	sp, sp, #8
    90f8:	str	r0, [fp, #-8]
    90fc:	str	r1, [fp, #-12]
    9100:	ldr	r0, [fp, #-8]
    9104:	bl	87ac <MyGame_Example_with_emptystruct_start>
    9108:	mov	r3, r0
    910c:	cmp	r3, #0
    9110:	bne	912c <MyGame_Example_with_emptystruct_create+0x44>
    9114:	ldr	r1, [fp, #-12]
    9118:	ldr	r0, [fp, #-8]
    911c:	bl	908c <MyGame_Example_with_emptystruct_empty_add>
    9120:	mov	r3, r0
    9124:	cmp	r3, #0
    9128:	beq	9134 <MyGame_Example_with_emptystruct_create+0x4c>
    912c:	mov	r3, #0
    9130:	b	9140 <MyGame_Example_with_emptystruct_create+0x58>
    9134:	ldr	r0, [fp, #-8]
    9138:	bl	87e4 <MyGame_Example_with_emptystruct_end>
    913c:	mov	r3, r0
    9140:	mov	r0, r3
    9144:	sub	sp, fp, #4
    9148:	ldr	fp, [sp]
    914c:	add	sp, sp, #4
    9150:	pop	{pc}		; (ldr pc, [sp], #4)

00009154 <MyGame_Example_with_emptystruct_create_as_root>:
    9154:	str	fp, [sp, #-8]!
    9158:	str	lr, [sp, #4]
    915c:	add	fp, sp, #4
    9160:	sub	sp, sp, #8
    9164:	str	r0, [fp, #-8]
    9168:	str	r1, [fp, #-12]
    916c:	movw	r1, #0
    9170:	movt	r1, #0
    9174:	ldr	r0, [fp, #-8]
    9178:	bl	7ca0 <flatbuffers_buffer_start>
    917c:	mov	r3, r0
    9180:	cmp	r3, #0
    9184:	beq	9190 <MyGame_Example_with_emptystruct_create_as_root+0x3c>
    9188:	mov	r3, #0
    918c:	b	91b0 <MyGame_Example_with_emptystruct_create_as_root+0x5c>
    9190:	ldr	r1, [fp, #-12]
    9194:	ldr	r0, [fp, #-8]
    9198:	bl	90e8 <MyGame_Example_with_emptystruct_create>
    919c:	mov	r3, r0
    91a0:	mov	r1, r3
    91a4:	ldr	r0, [fp, #-8]
    91a8:	bl	7d28 <flatbuffers_buffer_end>
    91ac:	mov	r3, r0
    91b0:	mov	r0, r3
    91b4:	sub	sp, fp, #4
    91b8:	ldr	fp, [sp]
    91bc:	add	sp, sp, #4
    91c0:	pop	{pc}		; (ldr pc, [sp], #4)

000091c4 <MyGame_Example_with_emptystruct_create_as_typed_root>:
    91c4:	str	fp, [sp, #-8]!
    91c8:	str	lr, [sp, #4]
    91cc:	add	fp, sp, #4
    91d0:	sub	sp, sp, #8
    91d4:	str	r0, [fp, #-8]
    91d8:	str	r1, [fp, #-12]
    91dc:	movw	r1, #0
    91e0:	movt	r1, #0
    91e4:	ldr	r0, [fp, #-8]
    91e8:	bl	7ca0 <flatbuffers_buffer_start>
    91ec:	mov	r3, r0
    91f0:	cmp	r3, #0
    91f4:	beq	9200 <MyGame_Example_with_emptystruct_create_as_typed_root+0x3c>
    91f8:	mov	r3, #0
    91fc:	b	9220 <MyGame_Example_with_emptystruct_create_as_typed_root+0x5c>
    9200:	ldr	r1, [fp, #-12]
    9204:	ldr	r0, [fp, #-8]
    9208:	bl	90e8 <MyGame_Example_with_emptystruct_create>
    920c:	mov	r3, r0
    9210:	mov	r1, r3
    9214:	ldr	r0, [fp, #-8]
    9218:	bl	7d28 <flatbuffers_buffer_end>
    921c:	mov	r3, r0
    9220:	mov	r0, r3
    9224:	sub	sp, fp, #4
    9228:	ldr	fp, [sp]
    922c:	add	sp, sp, #4
    9230:	pop	{pc}		; (ldr pc, [sp], #4)

00009234 <MyGame_Example_TestSimpleTableWithEnum_color_add>:
    9234:	str	fp, [sp, #-8]!
    9238:	str	lr, [sp, #4]
    923c:	add	fp, sp, #4
    9240:	sub	sp, sp, #16
    9244:	str	r0, [fp, #-16]
    9248:	mov	r3, r1
    924c:	strb	r3, [fp, #-17]	; 0xffffffef
    9250:	ldrsb	r3, [fp, #-17]	; 0xffffffef
    9254:	cmp	r3, #2
    9258:	bne	9264 <MyGame_Example_TestSimpleTableWithEnum_color_add+0x30>
    925c:	mov	r3, #0
    9260:	b	92a4 <MyGame_Example_TestSimpleTableWithEnum_color_add+0x70>
    9264:	mov	r3, #1
    9268:	mov	r2, #1
    926c:	mov	r1, #0
    9270:	ldr	r0, [fp, #-16]
    9274:	bl	0 <flatcc_builder_table_add>
    9278:	str	r0, [fp, #-8]
    927c:	ldr	r3, [fp, #-8]
    9280:	cmp	r3, #0
    9284:	bne	9290 <MyGame_Example_TestSimpleTableWithEnum_color_add+0x5c>
    9288:	mvn	r3, #0
    928c:	b	92a4 <MyGame_Example_TestSimpleTableWithEnum_color_add+0x70>
    9290:	ldrsb	r3, [fp, #-17]	; 0xffffffef
    9294:	mov	r1, r3
    9298:	ldr	r0, [fp, #-8]
    929c:	bl	7d64 <MyGame_Example_Color_assign_to_pe>
    92a0:	mov	r3, #0
    92a4:	mov	r0, r3
    92a8:	sub	sp, fp, #4
    92ac:	ldr	fp, [sp]
    92b0:	add	sp, sp, #4
    92b4:	pop	{pc}		; (ldr pc, [sp], #4)

000092b8 <MyGame_Example_TestSimpleTableWithEnum_color2_add>:
    92b8:	str	fp, [sp, #-8]!
    92bc:	str	lr, [sp, #4]
    92c0:	add	fp, sp, #4
    92c4:	sub	sp, sp, #16
    92c8:	str	r0, [fp, #-16]
    92cc:	mov	r3, r1
    92d0:	strb	r3, [fp, #-17]	; 0xffffffef
    92d4:	ldrsb	r3, [fp, #-17]	; 0xffffffef
    92d8:	cmp	r3, #2
    92dc:	bne	92e8 <MyGame_Example_TestSimpleTableWithEnum_color2_add+0x30>
    92e0:	mov	r3, #0
    92e4:	b	9328 <MyGame_Example_TestSimpleTableWithEnum_color2_add+0x70>
    92e8:	mov	r3, #1
    92ec:	mov	r2, #1
    92f0:	mov	r1, #1
    92f4:	ldr	r0, [fp, #-16]
    92f8:	bl	0 <flatcc_builder_table_add>
    92fc:	str	r0, [fp, #-8]
    9300:	ldr	r3, [fp, #-8]
    9304:	cmp	r3, #0
    9308:	bne	9314 <MyGame_Example_TestSimpleTableWithEnum_color2_add+0x5c>
    930c:	mvn	r3, #0
    9310:	b	9328 <MyGame_Example_TestSimpleTableWithEnum_color2_add+0x70>
    9314:	ldrsb	r3, [fp, #-17]	; 0xffffffef
    9318:	mov	r1, r3
    931c:	ldr	r0, [fp, #-8]
    9320:	bl	7d64 <MyGame_Example_Color_assign_to_pe>
    9324:	mov	r3, #0
    9328:	mov	r0, r3
    932c:	sub	sp, fp, #4
    9330:	ldr	fp, [sp]
    9334:	add	sp, sp, #4
    9338:	pop	{pc}		; (ldr pc, [sp], #4)

0000933c <MyGame_Example_TestSimpleTableWithEnum_uc_add>:
    933c:	str	fp, [sp, #-8]!
    9340:	str	lr, [sp, #4]
    9344:	add	fp, sp, #4
    9348:	sub	sp, sp, #16
    934c:	str	r0, [fp, #-16]
    9350:	mov	r3, r1
    9354:	strb	r3, [fp, #-17]	; 0xffffffef
    9358:	ldrb	r3, [fp, #-17]	; 0xffffffef
    935c:	cmp	r3, #2
    9360:	bne	936c <MyGame_Example_TestSimpleTableWithEnum_uc_add+0x30>
    9364:	mov	r3, #0
    9368:	b	93ac <MyGame_Example_TestSimpleTableWithEnum_uc_add+0x70>
    936c:	mov	r3, #1
    9370:	mov	r2, #1
    9374:	mov	r1, #2
    9378:	ldr	r0, [fp, #-16]
    937c:	bl	0 <flatcc_builder_table_add>
    9380:	str	r0, [fp, #-8]
    9384:	ldr	r3, [fp, #-8]
    9388:	cmp	r3, #0
    938c:	bne	9398 <MyGame_Example_TestSimpleTableWithEnum_uc_add+0x5c>
    9390:	mvn	r3, #0
    9394:	b	93ac <MyGame_Example_TestSimpleTableWithEnum_uc_add+0x70>
    9398:	ldrb	r3, [fp, #-17]	; 0xffffffef
    939c:	mov	r1, r3
    93a0:	ldr	r0, [fp, #-8]
    93a4:	bl	7440 <flatbuffers_uint8_assign_to_pe>
    93a8:	mov	r3, #0
    93ac:	mov	r0, r3
    93b0:	sub	sp, fp, #4
    93b4:	ldr	fp, [sp]
    93b8:	add	sp, sp, #4
    93bc:	pop	{pc}		; (ldr pc, [sp], #4)

000093c0 <MyGame_Example_TestSimpleTableWithEnum_uc2_add>:
    93c0:	str	fp, [sp, #-8]!
    93c4:	str	lr, [sp, #4]
    93c8:	add	fp, sp, #4
    93cc:	sub	sp, sp, #16
    93d0:	str	r0, [fp, #-16]
    93d4:	mov	r3, r1
    93d8:	strb	r3, [fp, #-17]	; 0xffffffef
    93dc:	ldrb	r3, [fp, #-17]	; 0xffffffef
    93e0:	cmp	r3, #2
    93e4:	bne	93f0 <MyGame_Example_TestSimpleTableWithEnum_uc2_add+0x30>
    93e8:	mov	r3, #0
    93ec:	b	9430 <MyGame_Example_TestSimpleTableWithEnum_uc2_add+0x70>
    93f0:	mov	r3, #1
    93f4:	mov	r2, #1
    93f8:	mov	r1, #3
    93fc:	ldr	r0, [fp, #-16]
    9400:	bl	0 <flatcc_builder_table_add>
    9404:	str	r0, [fp, #-8]
    9408:	ldr	r3, [fp, #-8]
    940c:	cmp	r3, #0
    9410:	bne	941c <MyGame_Example_TestSimpleTableWithEnum_uc2_add+0x5c>
    9414:	mvn	r3, #0
    9418:	b	9430 <MyGame_Example_TestSimpleTableWithEnum_uc2_add+0x70>
    941c:	ldrb	r3, [fp, #-17]	; 0xffffffef
    9420:	mov	r1, r3
    9424:	ldr	r0, [fp, #-8]
    9428:	bl	7440 <flatbuffers_uint8_assign_to_pe>
    942c:	mov	r3, #0
    9430:	mov	r0, r3
    9434:	sub	sp, fp, #4
    9438:	ldr	fp, [sp]
    943c:	add	sp, sp, #4
    9440:	pop	{pc}		; (ldr pc, [sp], #4)

00009444 <MyGame_Example_TestSimpleTableWithEnum_create>:
    9444:	str	fp, [sp, #-8]!
    9448:	str	lr, [sp, #4]
    944c:	add	fp, sp, #4
    9450:	sub	sp, sp, #8
    9454:	str	r0, [fp, #-8]
    9458:	mov	r0, r1
    945c:	mov	r1, r2
    9460:	mov	r2, r3
    9464:	mov	r3, r0
    9468:	strb	r3, [fp, #-9]
    946c:	mov	r3, r1
    9470:	strb	r3, [fp, #-10]
    9474:	mov	r3, r2
    9478:	strb	r3, [fp, #-11]
    947c:	ldr	r0, [fp, #-8]
    9480:	bl	8858 <MyGame_Example_TestSimpleTableWithEnum_start>
    9484:	mov	r3, r0
    9488:	cmp	r3, #0
    948c:	bne	9500 <MyGame_Example_TestSimpleTableWithEnum_create+0xbc>
    9490:	ldrsb	r3, [fp, #-9]
    9494:	mov	r1, r3
    9498:	ldr	r0, [fp, #-8]
    949c:	bl	9234 <MyGame_Example_TestSimpleTableWithEnum_color_add>
    94a0:	mov	r3, r0
    94a4:	cmp	r3, #0
    94a8:	bne	9500 <MyGame_Example_TestSimpleTableWithEnum_create+0xbc>
    94ac:	ldrsb	r3, [fp, #-10]
    94b0:	mov	r1, r3
    94b4:	ldr	r0, [fp, #-8]
    94b8:	bl	92b8 <MyGame_Example_TestSimpleTableWithEnum_color2_add>
    94bc:	mov	r3, r0
    94c0:	cmp	r3, #0
    94c4:	bne	9500 <MyGame_Example_TestSimpleTableWithEnum_create+0xbc>
    94c8:	ldrb	r3, [fp, #-11]
    94cc:	mov	r1, r3
    94d0:	ldr	r0, [fp, #-8]
    94d4:	bl	933c <MyGame_Example_TestSimpleTableWithEnum_uc_add>
    94d8:	mov	r3, r0
    94dc:	cmp	r3, #0
    94e0:	bne	9500 <MyGame_Example_TestSimpleTableWithEnum_create+0xbc>
    94e4:	ldrb	r3, [fp, #4]
    94e8:	mov	r1, r3
    94ec:	ldr	r0, [fp, #-8]
    94f0:	bl	93c0 <MyGame_Example_TestSimpleTableWithEnum_uc2_add>
    94f4:	mov	r3, r0
    94f8:	cmp	r3, #0
    94fc:	beq	9508 <MyGame_Example_TestSimpleTableWithEnum_create+0xc4>
    9500:	mov	r3, #0
    9504:	b	9514 <MyGame_Example_TestSimpleTableWithEnum_create+0xd0>
    9508:	ldr	r0, [fp, #-8]
    950c:	bl	8890 <MyGame_Example_TestSimpleTableWithEnum_end>
    9510:	mov	r3, r0
    9514:	mov	r0, r3
    9518:	sub	sp, fp, #4
    951c:	ldr	fp, [sp]
    9520:	add	sp, sp, #4
    9524:	pop	{pc}		; (ldr pc, [sp], #4)

00009528 <MyGame_Example_Stat_id_add>:
    9528:	str	fp, [sp, #-8]!
    952c:	str	lr, [sp, #4]
    9530:	add	fp, sp, #4
    9534:	sub	sp, sp, #16
    9538:	str	r0, [fp, #-16]
    953c:	str	r1, [fp, #-20]	; 0xffffffec
    9540:	ldr	r3, [fp, #-20]	; 0xffffffec
    9544:	cmp	r3, #0
    9548:	beq	957c <MyGame_Example_Stat_id_add+0x54>
    954c:	mov	r1, #0
    9550:	ldr	r0, [fp, #-16]
    9554:	bl	0 <flatcc_builder_table_add_offset>
    9558:	str	r0, [fp, #-8]
    955c:	ldr	r3, [fp, #-8]
    9560:	cmp	r3, #0
    9564:	beq	957c <MyGame_Example_Stat_id_add+0x54>
    9568:	ldr	r3, [fp, #-8]
    956c:	ldr	r2, [fp, #-20]	; 0xffffffec
    9570:	str	r2, [r3]
    9574:	mov	r3, #0
    9578:	b	9580 <MyGame_Example_Stat_id_add+0x58>
    957c:	mvn	r3, #0
    9580:	mov	r0, r3
    9584:	sub	sp, fp, #4
    9588:	ldr	fp, [sp]
    958c:	add	sp, sp, #4
    9590:	pop	{pc}		; (ldr pc, [sp], #4)

00009594 <MyGame_Example_Stat_val_add>:
    9594:	str	fp, [sp, #-8]!
    9598:	str	lr, [sp, #4]
    959c:	add	fp, sp, #4
    95a0:	sub	sp, sp, #24
    95a4:	str	r0, [fp, #-16]
    95a8:	strd	r2, [fp, #-28]	; 0xffffffe4
    95ac:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    95b0:	orrs	r3, r2, r3
    95b4:	bne	95c0 <MyGame_Example_Stat_val_add+0x2c>
    95b8:	mov	r3, #0
    95bc:	b	95fc <MyGame_Example_Stat_val_add+0x68>
    95c0:	mov	r3, #8
    95c4:	mov	r2, #8
    95c8:	mov	r1, #1
    95cc:	ldr	r0, [fp, #-16]
    95d0:	bl	0 <flatcc_builder_table_add>
    95d4:	str	r0, [fp, #-8]
    95d8:	ldr	r3, [fp, #-8]
    95dc:	cmp	r3, #0
    95e0:	bne	95ec <MyGame_Example_Stat_val_add+0x58>
    95e4:	mvn	r3, #0
    95e8:	b	95fc <MyGame_Example_Stat_val_add+0x68>
    95ec:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    95f0:	ldr	r0, [fp, #-8]
    95f4:	bl	7924 <flatbuffers_int64_assign_to_pe>
    95f8:	mov	r3, #0
    95fc:	mov	r0, r3
    9600:	sub	sp, fp, #4
    9604:	ldr	fp, [sp]
    9608:	add	sp, sp, #4
    960c:	pop	{pc}		; (ldr pc, [sp], #4)

00009610 <MyGame_Example_Stat_count_add>:
    9610:	str	fp, [sp, #-8]!
    9614:	str	lr, [sp, #4]
    9618:	add	fp, sp, #4
    961c:	sub	sp, sp, #16
    9620:	str	r0, [fp, #-16]
    9624:	mov	r3, r1
    9628:	strh	r3, [fp, #-18]	; 0xffffffee
    962c:	ldrh	r3, [fp, #-18]	; 0xffffffee
    9630:	cmp	r3, #0
    9634:	bne	9640 <MyGame_Example_Stat_count_add+0x30>
    9638:	mov	r3, #0
    963c:	b	9680 <MyGame_Example_Stat_count_add+0x70>
    9640:	mov	r3, #2
    9644:	mov	r2, #2
    9648:	mov	r1, #2
    964c:	ldr	r0, [fp, #-16]
    9650:	bl	0 <flatcc_builder_table_add>
    9654:	str	r0, [fp, #-8]
    9658:	ldr	r3, [fp, #-8]
    965c:	cmp	r3, #0
    9660:	bne	966c <MyGame_Example_Stat_count_add+0x5c>
    9664:	mvn	r3, #0
    9668:	b	9680 <MyGame_Example_Stat_count_add+0x70>
    966c:	ldrh	r3, [fp, #-18]	; 0xffffffee
    9670:	mov	r1, r3
    9674:	ldr	r0, [fp, #-8]
    9678:	bl	7764 <flatbuffers_uint16_assign_to_pe>
    967c:	mov	r3, #0
    9680:	mov	r0, r3
    9684:	sub	sp, fp, #4
    9688:	ldr	fp, [sp]
    968c:	add	sp, sp, #4
    9690:	pop	{pc}		; (ldr pc, [sp], #4)

00009694 <MyGame_Example_Stat_create>:
    9694:	str	fp, [sp, #-8]!
    9698:	str	lr, [sp, #4]
    969c:	add	fp, sp, #4
    96a0:	sub	sp, sp, #16
    96a4:	str	r0, [fp, #-8]
    96a8:	str	r1, [fp, #-12]
    96ac:	strd	r2, [fp, #-20]	; 0xffffffec
    96b0:	ldr	r0, [fp, #-8]
    96b4:	bl	8904 <MyGame_Example_Stat_start>
    96b8:	mov	r3, r0
    96bc:	cmp	r3, #0
    96c0:	bne	9710 <MyGame_Example_Stat_create+0x7c>
    96c4:	ldrd	r2, [fp, #-20]	; 0xffffffec
    96c8:	ldr	r0, [fp, #-8]
    96cc:	bl	9594 <MyGame_Example_Stat_val_add>
    96d0:	mov	r3, r0
    96d4:	cmp	r3, #0
    96d8:	bne	9710 <MyGame_Example_Stat_create+0x7c>
    96dc:	ldr	r1, [fp, #-12]
    96e0:	ldr	r0, [fp, #-8]
    96e4:	bl	9528 <MyGame_Example_Stat_id_add>
    96e8:	mov	r3, r0
    96ec:	cmp	r3, #0
    96f0:	bne	9710 <MyGame_Example_Stat_create+0x7c>
    96f4:	ldrh	r3, [fp, #4]
    96f8:	mov	r1, r3
    96fc:	ldr	r0, [fp, #-8]
    9700:	bl	9610 <MyGame_Example_Stat_count_add>
    9704:	mov	r3, r0
    9708:	cmp	r3, #0
    970c:	beq	9718 <MyGame_Example_Stat_create+0x84>
    9710:	mov	r3, #0
    9714:	b	9724 <MyGame_Example_Stat_create+0x90>
    9718:	ldr	r0, [fp, #-8]
    971c:	bl	893c <MyGame_Example_Stat_end>
    9720:	mov	r3, r0
    9724:	mov	r0, r3
    9728:	sub	sp, fp, #4
    972c:	ldr	fp, [sp]
    9730:	add	sp, sp, #4
    9734:	pop	{pc}		; (ldr pc, [sp], #4)

00009738 <MyGame_Example_Alt_manyany_add>:
    9738:	str	fp, [sp, #-8]!
    973c:	str	lr, [sp, #4]
    9740:	add	fp, sp, #4
    9744:	sub	sp, sp, #24
    9748:	str	r0, [fp, #-16]
    974c:	sub	r3, fp, #24
    9750:	stm	r3, {r1, r2}
    9754:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9758:	cmp	r3, #0
    975c:	beq	976c <MyGame_Example_Alt_manyany_add+0x34>
    9760:	ldr	r3, [fp, #-20]	; 0xffffffec
    9764:	cmp	r3, #0
    9768:	bne	978c <MyGame_Example_Alt_manyany_add+0x54>
    976c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9770:	ldr	r3, [fp, #-20]	; 0xffffffec
    9774:	cmp	r2, r3
    9778:	bne	9784 <MyGame_Example_Alt_manyany_add+0x4c>
    977c:	mov	r3, #0
    9780:	b	97f0 <MyGame_Example_Alt_manyany_add+0xb8>
    9784:	mvn	r3, #0
    9788:	b	97f0 <MyGame_Example_Alt_manyany_add+0xb8>
    978c:	mov	r1, #2
    9790:	ldr	r0, [fp, #-16]
    9794:	bl	0 <flatcc_builder_table_add_offset>
    9798:	str	r0, [fp, #-8]
    979c:	ldr	r3, [fp, #-8]
    97a0:	cmp	r3, #0
    97a4:	bne	97b0 <MyGame_Example_Alt_manyany_add+0x78>
    97a8:	mvn	r3, #0
    97ac:	b	97f0 <MyGame_Example_Alt_manyany_add+0xb8>
    97b0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    97b4:	ldr	r3, [fp, #-8]
    97b8:	str	r2, [r3]
    97bc:	mov	r1, #3
    97c0:	ldr	r0, [fp, #-16]
    97c4:	bl	0 <flatcc_builder_table_add_offset>
    97c8:	str	r0, [fp, #-8]
    97cc:	ldr	r3, [fp, #-8]
    97d0:	cmp	r3, #0
    97d4:	bne	97e0 <MyGame_Example_Alt_manyany_add+0xa8>
    97d8:	mvn	r3, #0
    97dc:	b	97f0 <MyGame_Example_Alt_manyany_add+0xb8>
    97e0:	ldr	r2, [fp, #-20]	; 0xffffffec
    97e4:	ldr	r3, [fp, #-8]
    97e8:	str	r2, [r3]
    97ec:	mov	r3, #0
    97f0:	mov	r0, r3
    97f4:	sub	sp, fp, #4
    97f8:	ldr	fp, [sp]
    97fc:	add	sp, sp, #4
    9800:	pop	{pc}		; (ldr pc, [sp], #4)

00009804 <MyGame_Example_Monster_pos_start>:
    9804:	str	fp, [sp, #-8]!
    9808:	str	lr, [sp, #4]
    980c:	add	fp, sp, #4
    9810:	sub	sp, sp, #8
    9814:	str	r0, [fp, #-8]
    9818:	mov	r3, #16
    981c:	mov	r2, #32
    9820:	mov	r1, #0
    9824:	ldr	r0, [fp, #-8]
    9828:	bl	0 <flatcc_builder_table_add>
    982c:	mov	r3, r0
    9830:	mov	r0, r3
    9834:	sub	sp, fp, #4
    9838:	ldr	fp, [sp]
    983c:	add	sp, sp, #4
    9840:	pop	{pc}		; (ldr pc, [sp], #4)

00009844 <MyGame_Example_Monster_pos_end>:
    9844:	push	{fp}		; (str fp, [sp, #-4]!)
    9848:	add	fp, sp, #0
    984c:	sub	sp, sp, #12
    9850:	str	r0, [fp, #-8]
    9854:	mov	r3, #0
    9858:	mov	r0, r3
    985c:	add	sp, fp, #0
    9860:	pop	{fp}		; (ldr fp, [sp], #4)
    9864:	bx	lr

00009868 <MyGame_Example_Monster_pos_clone>:
    9868:	str	fp, [sp, #-8]!
    986c:	str	lr, [sp, #4]
    9870:	add	fp, sp, #4
    9874:	sub	sp, sp, #16
    9878:	str	r0, [fp, #-8]
    987c:	str	r1, [fp, #-12]
    9880:	mov	r3, #16
    9884:	str	r3, [sp]
    9888:	mov	r3, #32
    988c:	ldr	r2, [fp, #-12]
    9890:	mov	r1, #0
    9894:	ldr	r0, [fp, #-8]
    9898:	bl	0 <flatcc_builder_table_add_copy>
    989c:	mov	r3, r0
    98a0:	cmp	r3, #0
    98a4:	bne	98b0 <MyGame_Example_Monster_pos_clone+0x48>
    98a8:	mvn	r3, #0
    98ac:	b	98b4 <MyGame_Example_Monster_pos_clone+0x4c>
    98b0:	mov	r3, #0
    98b4:	mov	r0, r3
    98b8:	sub	sp, fp, #4
    98bc:	ldr	fp, [sp]
    98c0:	add	sp, sp, #4
    98c4:	pop	{pc}		; (ldr pc, [sp], #4)

000098c8 <MyGame_Example_Monster_hp_add>:
    98c8:	str	fp, [sp, #-8]!
    98cc:	str	lr, [sp, #4]
    98d0:	add	fp, sp, #4
    98d4:	sub	sp, sp, #16
    98d8:	str	r0, [fp, #-16]
    98dc:	mov	r3, r1
    98e0:	strh	r3, [fp, #-18]	; 0xffffffee
    98e4:	ldrsh	r3, [fp, #-18]	; 0xffffffee
    98e8:	cmp	r3, #100	; 0x64
    98ec:	bne	98f8 <MyGame_Example_Monster_hp_add+0x30>
    98f0:	mov	r3, #0
    98f4:	b	9938 <MyGame_Example_Monster_hp_add+0x70>
    98f8:	mov	r3, #2
    98fc:	mov	r2, #2
    9900:	mov	r1, #2
    9904:	ldr	r0, [fp, #-16]
    9908:	bl	0 <flatcc_builder_table_add>
    990c:	str	r0, [fp, #-8]
    9910:	ldr	r3, [fp, #-8]
    9914:	cmp	r3, #0
    9918:	bne	9924 <MyGame_Example_Monster_hp_add+0x5c>
    991c:	mvn	r3, #0
    9920:	b	9938 <MyGame_Example_Monster_hp_add+0x70>
    9924:	ldrsh	r3, [fp, #-18]	; 0xffffffee
    9928:	mov	r1, r3
    992c:	ldr	r0, [fp, #-8]
    9930:	bl	7890 <flatbuffers_int16_assign_to_pe>
    9934:	mov	r3, #0
    9938:	mov	r0, r3
    993c:	sub	sp, fp, #4
    9940:	ldr	fp, [sp]
    9944:	add	sp, sp, #4
    9948:	pop	{pc}		; (ldr pc, [sp], #4)

0000994c <MyGame_Example_Monster_hp_force_add>:
    994c:	str	fp, [sp, #-8]!
    9950:	str	lr, [sp, #4]
    9954:	add	fp, sp, #4
    9958:	sub	sp, sp, #16
    995c:	str	r0, [fp, #-16]
    9960:	mov	r3, r1
    9964:	strh	r3, [fp, #-18]	; 0xffffffee
    9968:	mov	r3, #2
    996c:	mov	r2, #2
    9970:	mov	r1, #2
    9974:	ldr	r0, [fp, #-16]
    9978:	bl	0 <flatcc_builder_table_add>
    997c:	str	r0, [fp, #-8]
    9980:	ldr	r3, [fp, #-8]
    9984:	cmp	r3, #0
    9988:	bne	9994 <MyGame_Example_Monster_hp_force_add+0x48>
    998c:	mvn	r3, #0
    9990:	b	99a8 <MyGame_Example_Monster_hp_force_add+0x5c>
    9994:	ldrsh	r3, [fp, #-18]	; 0xffffffee
    9998:	mov	r1, r3
    999c:	ldr	r0, [fp, #-8]
    99a0:	bl	7890 <flatbuffers_int16_assign_to_pe>
    99a4:	mov	r3, #0
    99a8:	mov	r0, r3
    99ac:	sub	sp, fp, #4
    99b0:	ldr	fp, [sp]
    99b4:	add	sp, sp, #4
    99b8:	pop	{pc}		; (ldr pc, [sp], #4)

000099bc <MyGame_Example_Monster_mana_add>:
    99bc:	str	fp, [sp, #-8]!
    99c0:	str	lr, [sp, #4]
    99c4:	add	fp, sp, #4
    99c8:	sub	sp, sp, #16
    99cc:	str	r0, [fp, #-16]
    99d0:	mov	r3, r1
    99d4:	strh	r3, [fp, #-18]	; 0xffffffee
    99d8:	ldrsh	r3, [fp, #-18]	; 0xffffffee
    99dc:	cmp	r3, #150	; 0x96
    99e0:	bne	99ec <MyGame_Example_Monster_mana_add+0x30>
    99e4:	mov	r3, #0
    99e8:	b	9a2c <MyGame_Example_Monster_mana_add+0x70>
    99ec:	mov	r3, #2
    99f0:	mov	r2, #2
    99f4:	mov	r1, #1
    99f8:	ldr	r0, [fp, #-16]
    99fc:	bl	0 <flatcc_builder_table_add>
    9a00:	str	r0, [fp, #-8]
    9a04:	ldr	r3, [fp, #-8]
    9a08:	cmp	r3, #0
    9a0c:	bne	9a18 <MyGame_Example_Monster_mana_add+0x5c>
    9a10:	mvn	r3, #0
    9a14:	b	9a2c <MyGame_Example_Monster_mana_add+0x70>
    9a18:	ldrsh	r3, [fp, #-18]	; 0xffffffee
    9a1c:	mov	r1, r3
    9a20:	ldr	r0, [fp, #-8]
    9a24:	bl	7890 <flatbuffers_int16_assign_to_pe>
    9a28:	mov	r3, #0
    9a2c:	mov	r0, r3
    9a30:	sub	sp, fp, #4
    9a34:	ldr	fp, [sp]
    9a38:	add	sp, sp, #4
    9a3c:	pop	{pc}		; (ldr pc, [sp], #4)

00009a40 <MyGame_Example_Monster_mana_force_add>:
    9a40:	str	fp, [sp, #-8]!
    9a44:	str	lr, [sp, #4]
    9a48:	add	fp, sp, #4
    9a4c:	sub	sp, sp, #16
    9a50:	str	r0, [fp, #-16]
    9a54:	mov	r3, r1
    9a58:	strh	r3, [fp, #-18]	; 0xffffffee
    9a5c:	mov	r3, #2
    9a60:	mov	r2, #2
    9a64:	mov	r1, #1
    9a68:	ldr	r0, [fp, #-16]
    9a6c:	bl	0 <flatcc_builder_table_add>
    9a70:	str	r0, [fp, #-8]
    9a74:	ldr	r3, [fp, #-8]
    9a78:	cmp	r3, #0
    9a7c:	bne	9a88 <MyGame_Example_Monster_mana_force_add+0x48>
    9a80:	mvn	r3, #0
    9a84:	b	9a9c <MyGame_Example_Monster_mana_force_add+0x5c>
    9a88:	ldrsh	r3, [fp, #-18]	; 0xffffffee
    9a8c:	mov	r1, r3
    9a90:	ldr	r0, [fp, #-8]
    9a94:	bl	7890 <flatbuffers_int16_assign_to_pe>
    9a98:	mov	r3, #0
    9a9c:	mov	r0, r3
    9aa0:	sub	sp, fp, #4
    9aa4:	ldr	fp, [sp]
    9aa8:	add	sp, sp, #4
    9aac:	pop	{pc}		; (ldr pc, [sp], #4)

00009ab0 <MyGame_Example_Monster_name_add>:
    9ab0:	str	fp, [sp, #-8]!
    9ab4:	str	lr, [sp, #4]
    9ab8:	add	fp, sp, #4
    9abc:	sub	sp, sp, #16
    9ac0:	str	r0, [fp, #-16]
    9ac4:	str	r1, [fp, #-20]	; 0xffffffec
    9ac8:	ldr	r3, [fp, #-20]	; 0xffffffec
    9acc:	cmp	r3, #0
    9ad0:	beq	9b04 <MyGame_Example_Monster_name_add+0x54>
    9ad4:	mov	r1, #3
    9ad8:	ldr	r0, [fp, #-16]
    9adc:	bl	0 <flatcc_builder_table_add_offset>
    9ae0:	str	r0, [fp, #-8]
    9ae4:	ldr	r3, [fp, #-8]
    9ae8:	cmp	r3, #0
    9aec:	beq	9b04 <MyGame_Example_Monster_name_add+0x54>
    9af0:	ldr	r3, [fp, #-8]
    9af4:	ldr	r2, [fp, #-20]	; 0xffffffec
    9af8:	str	r2, [r3]
    9afc:	mov	r3, #0
    9b00:	b	9b08 <MyGame_Example_Monster_name_add+0x58>
    9b04:	mvn	r3, #0
    9b08:	mov	r0, r3
    9b0c:	sub	sp, fp, #4
    9b10:	ldr	fp, [sp]
    9b14:	add	sp, sp, #4
    9b18:	pop	{pc}		; (ldr pc, [sp], #4)

00009b1c <MyGame_Example_Monster_name_start>:
    9b1c:	str	fp, [sp, #-8]!
    9b20:	str	lr, [sp, #4]
    9b24:	add	fp, sp, #4
    9b28:	sub	sp, sp, #8
    9b2c:	str	r0, [fp, #-8]
    9b30:	ldr	r0, [fp, #-8]
    9b34:	bl	0 <flatcc_builder_start_string>
    9b38:	mov	r3, r0
    9b3c:	mov	r0, r3
    9b40:	sub	sp, fp, #4
    9b44:	ldr	fp, [sp]
    9b48:	add	sp, sp, #4
    9b4c:	pop	{pc}		; (ldr pc, [sp], #4)

00009b50 <MyGame_Example_Monster_name_end>:
    9b50:	str	fp, [sp, #-8]!
    9b54:	str	lr, [sp, #4]
    9b58:	add	fp, sp, #4
    9b5c:	sub	sp, sp, #8
    9b60:	str	r0, [fp, #-8]
    9b64:	ldr	r0, [fp, #-8]
    9b68:	bl	0 <flatcc_builder_end_string>
    9b6c:	mov	r3, r0
    9b70:	mov	r1, r3
    9b74:	ldr	r0, [fp, #-8]
    9b78:	bl	9ab0 <MyGame_Example_Monster_name_add>
    9b7c:	mov	r3, r0
    9b80:	mov	r0, r3
    9b84:	sub	sp, fp, #4
    9b88:	ldr	fp, [sp]
    9b8c:	add	sp, sp, #4
    9b90:	pop	{pc}		; (ldr pc, [sp], #4)

00009b94 <MyGame_Example_Monster_name_create_str>:
    9b94:	str	fp, [sp, #-8]!
    9b98:	str	lr, [sp, #4]
    9b9c:	add	fp, sp, #4
    9ba0:	sub	sp, sp, #8
    9ba4:	str	r0, [fp, #-8]
    9ba8:	str	r1, [fp, #-12]
    9bac:	ldr	r1, [fp, #-12]
    9bb0:	ldr	r0, [fp, #-8]
    9bb4:	bl	0 <flatcc_builder_create_string_str>
    9bb8:	mov	r3, r0
    9bbc:	mov	r1, r3
    9bc0:	ldr	r0, [fp, #-8]
    9bc4:	bl	9ab0 <MyGame_Example_Monster_name_add>
    9bc8:	mov	r3, r0
    9bcc:	mov	r0, r3
    9bd0:	sub	sp, fp, #4
    9bd4:	ldr	fp, [sp]
    9bd8:	add	sp, sp, #4
    9bdc:	pop	{pc}		; (ldr pc, [sp], #4)

00009be0 <MyGame_Example_Monster_name_create_strn>:
    9be0:	str	fp, [sp, #-8]!
    9be4:	str	lr, [sp, #4]
    9be8:	add	fp, sp, #4
    9bec:	sub	sp, sp, #16
    9bf0:	str	r0, [fp, #-8]
    9bf4:	str	r1, [fp, #-12]
    9bf8:	str	r2, [fp, #-16]
    9bfc:	ldr	r2, [fp, #-16]
    9c00:	ldr	r1, [fp, #-12]
    9c04:	ldr	r0, [fp, #-8]
    9c08:	bl	0 <flatcc_builder_create_string_strn>
    9c0c:	mov	r3, r0
    9c10:	mov	r1, r3
    9c14:	ldr	r0, [fp, #-8]
    9c18:	bl	9ab0 <MyGame_Example_Monster_name_add>
    9c1c:	mov	r3, r0
    9c20:	mov	r0, r3
    9c24:	sub	sp, fp, #4
    9c28:	ldr	fp, [sp]
    9c2c:	add	sp, sp, #4
    9c30:	pop	{pc}		; (ldr pc, [sp], #4)

00009c34 <MyGame_Example_Monster_name_clone>:
    9c34:	str	fp, [sp, #-8]!
    9c38:	str	lr, [sp, #4]
    9c3c:	add	fp, sp, #4
    9c40:	sub	sp, sp, #8
    9c44:	str	r0, [fp, #-8]
    9c48:	str	r1, [fp, #-12]
    9c4c:	ldr	r1, [fp, #-12]
    9c50:	ldr	r0, [fp, #-8]
    9c54:	bl	7b64 <flatbuffers_string_clone>
    9c58:	mov	r3, r0
    9c5c:	mov	r1, r3
    9c60:	ldr	r0, [fp, #-8]
    9c64:	bl	9ab0 <MyGame_Example_Monster_name_add>
    9c68:	mov	r3, r0
    9c6c:	mov	r0, r3
    9c70:	sub	sp, fp, #4
    9c74:	ldr	fp, [sp]
    9c78:	add	sp, sp, #4
    9c7c:	pop	{pc}		; (ldr pc, [sp], #4)

00009c80 <MyGame_Example_Monster_name_slice>:
    9c80:	str	fp, [sp, #-8]!
    9c84:	str	lr, [sp, #4]
    9c88:	add	fp, sp, #4
    9c8c:	sub	sp, sp, #16
    9c90:	str	r0, [fp, #-8]
    9c94:	str	r1, [fp, #-12]
    9c98:	str	r2, [fp, #-16]
    9c9c:	str	r3, [fp, #-20]	; 0xffffffec
    9ca0:	ldr	r3, [fp, #-20]	; 0xffffffec
    9ca4:	ldr	r2, [fp, #-16]
    9ca8:	ldr	r1, [fp, #-12]
    9cac:	ldr	r0, [fp, #-8]
    9cb0:	bl	7bb0 <flatbuffers_string_slice>
    9cb4:	mov	r3, r0
    9cb8:	mov	r1, r3
    9cbc:	ldr	r0, [fp, #-8]
    9cc0:	bl	9ab0 <MyGame_Example_Monster_name_add>
    9cc4:	mov	r3, r0
    9cc8:	mov	r0, r3
    9ccc:	sub	sp, fp, #4
    9cd0:	ldr	fp, [sp]
    9cd4:	add	sp, sp, #4
    9cd8:	pop	{pc}		; (ldr pc, [sp], #4)

00009cdc <MyGame_Example_Monster_name_append>:
    9cdc:	str	fp, [sp, #-8]!
    9ce0:	str	lr, [sp, #4]
    9ce4:	add	fp, sp, #4
    9ce8:	sub	sp, sp, #16
    9cec:	str	r0, [fp, #-8]
    9cf0:	str	r1, [fp, #-12]
    9cf4:	str	r2, [fp, #-16]
    9cf8:	ldr	r2, [fp, #-16]
    9cfc:	ldr	r1, [fp, #-12]
    9d00:	ldr	r0, [fp, #-8]
    9d04:	bl	0 <flatcc_builder_append_string>
    9d08:	mov	r3, r0
    9d0c:	mov	r0, r3
    9d10:	sub	sp, fp, #4
    9d14:	ldr	fp, [sp]
    9d18:	add	sp, sp, #4
    9d1c:	pop	{pc}		; (ldr pc, [sp], #4)

00009d20 <MyGame_Example_Monster_name_append_str>:
    9d20:	str	fp, [sp, #-8]!
    9d24:	str	lr, [sp, #4]
    9d28:	add	fp, sp, #4
    9d2c:	sub	sp, sp, #8
    9d30:	str	r0, [fp, #-8]
    9d34:	str	r1, [fp, #-12]
    9d38:	ldr	r1, [fp, #-12]
    9d3c:	ldr	r0, [fp, #-8]
    9d40:	bl	0 <flatcc_builder_append_string_str>
    9d44:	mov	r3, r0
    9d48:	mov	r0, r3
    9d4c:	sub	sp, fp, #4
    9d50:	ldr	fp, [sp]
    9d54:	add	sp, sp, #4
    9d58:	pop	{pc}		; (ldr pc, [sp], #4)

00009d5c <MyGame_Example_Monster_name_append_strn>:
    9d5c:	str	fp, [sp, #-8]!
    9d60:	str	lr, [sp, #4]
    9d64:	add	fp, sp, #4
    9d68:	sub	sp, sp, #16
    9d6c:	str	r0, [fp, #-8]
    9d70:	str	r1, [fp, #-12]
    9d74:	str	r2, [fp, #-16]
    9d78:	ldr	r2, [fp, #-16]
    9d7c:	ldr	r1, [fp, #-12]
    9d80:	ldr	r0, [fp, #-8]
    9d84:	bl	0 <flatcc_builder_append_string_strn>
    9d88:	mov	r3, r0
    9d8c:	mov	r0, r3
    9d90:	sub	sp, fp, #4
    9d94:	ldr	fp, [sp]
    9d98:	add	sp, sp, #4
    9d9c:	pop	{pc}		; (ldr pc, [sp], #4)

00009da0 <MyGame_Example_Monster_name_reserved_len>:
    9da0:	str	fp, [sp, #-8]!
    9da4:	str	lr, [sp, #4]
    9da8:	add	fp, sp, #4
    9dac:	sub	sp, sp, #8
    9db0:	str	r0, [fp, #-8]
    9db4:	ldr	r0, [fp, #-8]
    9db8:	bl	0 <flatcc_builder_string_len>
    9dbc:	mov	r3, r0
    9dc0:	mov	r0, r3
    9dc4:	sub	sp, fp, #4
    9dc8:	ldr	fp, [sp]
    9dcc:	add	sp, sp, #4
    9dd0:	pop	{pc}		; (ldr pc, [sp], #4)

00009dd4 <MyGame_Example_Monster_name_extend>:
    9dd4:	str	fp, [sp, #-8]!
    9dd8:	str	lr, [sp, #4]
    9ddc:	add	fp, sp, #4
    9de0:	sub	sp, sp, #8
    9de4:	str	r0, [fp, #-8]
    9de8:	str	r1, [fp, #-12]
    9dec:	ldr	r1, [fp, #-12]
    9df0:	ldr	r0, [fp, #-8]
    9df4:	bl	0 <flatcc_builder_extend_string>
    9df8:	mov	r3, r0
    9dfc:	mov	r0, r3
    9e00:	sub	sp, fp, #4
    9e04:	ldr	fp, [sp]
    9e08:	add	sp, sp, #4
    9e0c:	pop	{pc}		; (ldr pc, [sp], #4)

00009e10 <MyGame_Example_Monster_name_edit>:
    9e10:	str	fp, [sp, #-8]!
    9e14:	str	lr, [sp, #4]
    9e18:	add	fp, sp, #4
    9e1c:	sub	sp, sp, #8
    9e20:	str	r0, [fp, #-8]
    9e24:	ldr	r0, [fp, #-8]
    9e28:	bl	0 <flatcc_builder_string_edit>
    9e2c:	mov	r3, r0
    9e30:	mov	r0, r3
    9e34:	sub	sp, fp, #4
    9e38:	ldr	fp, [sp]
    9e3c:	add	sp, sp, #4
    9e40:	pop	{pc}		; (ldr pc, [sp], #4)

00009e44 <MyGame_Example_Monster_name_truncate>:
    9e44:	str	fp, [sp, #-8]!
    9e48:	str	lr, [sp, #4]
    9e4c:	add	fp, sp, #4
    9e50:	sub	sp, sp, #8
    9e54:	str	r0, [fp, #-8]
    9e58:	str	r1, [fp, #-12]
    9e5c:	ldr	r1, [fp, #-12]
    9e60:	ldr	r0, [fp, #-8]
    9e64:	bl	0 <flatcc_builder_truncate_string>
    9e68:	mov	r3, r0
    9e6c:	mov	r0, r3
    9e70:	sub	sp, fp, #4
    9e74:	ldr	fp, [sp]
    9e78:	add	sp, sp, #4
    9e7c:	pop	{pc}		; (ldr pc, [sp], #4)

00009e80 <MyGame_Example_Monster_color_add>:
    9e80:	str	fp, [sp, #-8]!
    9e84:	str	lr, [sp, #4]
    9e88:	add	fp, sp, #4
    9e8c:	sub	sp, sp, #16
    9e90:	str	r0, [fp, #-16]
    9e94:	mov	r3, r1
    9e98:	strb	r3, [fp, #-17]	; 0xffffffef
    9e9c:	ldrsb	r3, [fp, #-17]	; 0xffffffef
    9ea0:	cmp	r3, #8
    9ea4:	bne	9eb0 <MyGame_Example_Monster_color_add+0x30>
    9ea8:	mov	r3, #0
    9eac:	b	9ef0 <MyGame_Example_Monster_color_add+0x70>
    9eb0:	mov	r3, #1
    9eb4:	mov	r2, #1
    9eb8:	mov	r1, #6
    9ebc:	ldr	r0, [fp, #-16]
    9ec0:	bl	0 <flatcc_builder_table_add>
    9ec4:	str	r0, [fp, #-8]
    9ec8:	ldr	r3, [fp, #-8]
    9ecc:	cmp	r3, #0
    9ed0:	bne	9edc <MyGame_Example_Monster_color_add+0x5c>
    9ed4:	mvn	r3, #0
    9ed8:	b	9ef0 <MyGame_Example_Monster_color_add+0x70>
    9edc:	ldrsb	r3, [fp, #-17]	; 0xffffffef
    9ee0:	mov	r1, r3
    9ee4:	ldr	r0, [fp, #-8]
    9ee8:	bl	7d64 <MyGame_Example_Color_assign_to_pe>
    9eec:	mov	r3, #0
    9ef0:	mov	r0, r3
    9ef4:	sub	sp, fp, #4
    9ef8:	ldr	fp, [sp]
    9efc:	add	sp, sp, #4
    9f00:	pop	{pc}		; (ldr pc, [sp], #4)

00009f04 <MyGame_Example_Monster_color_force_add>:
    9f04:	str	fp, [sp, #-8]!
    9f08:	str	lr, [sp, #4]
    9f0c:	add	fp, sp, #4
    9f10:	sub	sp, sp, #16
    9f14:	str	r0, [fp, #-16]
    9f18:	mov	r3, r1
    9f1c:	strb	r3, [fp, #-17]	; 0xffffffef
    9f20:	mov	r3, #1
    9f24:	mov	r2, #1
    9f28:	mov	r1, #6
    9f2c:	ldr	r0, [fp, #-16]
    9f30:	bl	0 <flatcc_builder_table_add>
    9f34:	str	r0, [fp, #-8]
    9f38:	ldr	r3, [fp, #-8]
    9f3c:	cmp	r3, #0
    9f40:	bne	9f4c <MyGame_Example_Monster_color_force_add+0x48>
    9f44:	mvn	r3, #0
    9f48:	b	9f60 <MyGame_Example_Monster_color_force_add+0x5c>
    9f4c:	ldrsb	r3, [fp, #-17]	; 0xffffffef
    9f50:	mov	r1, r3
    9f54:	ldr	r0, [fp, #-8]
    9f58:	bl	7d64 <MyGame_Example_Color_assign_to_pe>
    9f5c:	mov	r3, #0
    9f60:	mov	r0, r3
    9f64:	sub	sp, fp, #4
    9f68:	ldr	fp, [sp]
    9f6c:	add	sp, sp, #4
    9f70:	pop	{pc}		; (ldr pc, [sp], #4)

00009f74 <MyGame_Example_Monster_inventory_add>:
    9f74:	str	fp, [sp, #-8]!
    9f78:	str	lr, [sp, #4]
    9f7c:	add	fp, sp, #4
    9f80:	sub	sp, sp, #16
    9f84:	str	r0, [fp, #-16]
    9f88:	str	r1, [fp, #-20]	; 0xffffffec
    9f8c:	ldr	r3, [fp, #-20]	; 0xffffffec
    9f90:	cmp	r3, #0
    9f94:	beq	9fc8 <MyGame_Example_Monster_inventory_add+0x54>
    9f98:	mov	r1, #5
    9f9c:	ldr	r0, [fp, #-16]
    9fa0:	bl	0 <flatcc_builder_table_add_offset>
    9fa4:	str	r0, [fp, #-8]
    9fa8:	ldr	r3, [fp, #-8]
    9fac:	cmp	r3, #0
    9fb0:	beq	9fc8 <MyGame_Example_Monster_inventory_add+0x54>
    9fb4:	ldr	r3, [fp, #-8]
    9fb8:	ldr	r2, [fp, #-20]	; 0xffffffec
    9fbc:	str	r2, [r3]
    9fc0:	mov	r3, #0
    9fc4:	b	9fcc <MyGame_Example_Monster_inventory_add+0x58>
    9fc8:	mvn	r3, #0
    9fcc:	mov	r0, r3
    9fd0:	sub	sp, fp, #4
    9fd4:	ldr	fp, [sp]
    9fd8:	add	sp, sp, #4
    9fdc:	pop	{pc}		; (ldr pc, [sp], #4)

00009fe0 <MyGame_Example_Monster_inventory_create>:
    9fe0:	str	fp, [sp, #-8]!
    9fe4:	str	lr, [sp, #4]
    9fe8:	add	fp, sp, #4
    9fec:	sub	sp, sp, #16
    9ff0:	str	r0, [fp, #-8]
    9ff4:	str	r1, [fp, #-12]
    9ff8:	str	r2, [fp, #-16]
    9ffc:	ldr	r2, [fp, #-16]
    a000:	ldr	r1, [fp, #-12]
    a004:	ldr	r0, [fp, #-8]
    a008:	bl	7490 <flatbuffers_uint8_vec_create>
    a00c:	mov	r3, r0
    a010:	mov	r1, r3
    a014:	ldr	r0, [fp, #-8]
    a018:	bl	9f74 <MyGame_Example_Monster_inventory_add>
    a01c:	mov	r3, r0
    a020:	mov	r0, r3
    a024:	sub	sp, fp, #4
    a028:	ldr	fp, [sp]
    a02c:	add	sp, sp, #4
    a030:	pop	{pc}		; (ldr pc, [sp], #4)

0000a034 <MyGame_Example_Monster_testarrayoftables_add>:
    a034:	str	fp, [sp, #-8]!
    a038:	str	lr, [sp, #4]
    a03c:	add	fp, sp, #4
    a040:	sub	sp, sp, #16
    a044:	str	r0, [fp, #-16]
    a048:	str	r1, [fp, #-20]	; 0xffffffec
    a04c:	ldr	r3, [fp, #-20]	; 0xffffffec
    a050:	cmp	r3, #0
    a054:	beq	a088 <MyGame_Example_Monster_testarrayoftables_add+0x54>
    a058:	mov	r1, #11
    a05c:	ldr	r0, [fp, #-16]
    a060:	bl	0 <flatcc_builder_table_add_offset>
    a064:	str	r0, [fp, #-8]
    a068:	ldr	r3, [fp, #-8]
    a06c:	cmp	r3, #0
    a070:	beq	a088 <MyGame_Example_Monster_testarrayoftables_add+0x54>
    a074:	ldr	r3, [fp, #-8]
    a078:	ldr	r2, [fp, #-20]	; 0xffffffec
    a07c:	str	r2, [r3]
    a080:	mov	r3, #0
    a084:	b	a08c <MyGame_Example_Monster_testarrayoftables_add+0x58>
    a088:	mvn	r3, #0
    a08c:	mov	r0, r3
    a090:	sub	sp, fp, #4
    a094:	ldr	fp, [sp]
    a098:	add	sp, sp, #4
    a09c:	pop	{pc}		; (ldr pc, [sp], #4)

0000a0a0 <MyGame_Example_Monster_testarrayoftables_start>:
    a0a0:	str	fp, [sp, #-8]!
    a0a4:	str	lr, [sp, #4]
    a0a8:	add	fp, sp, #4
    a0ac:	sub	sp, sp, #8
    a0b0:	str	r0, [fp, #-8]
    a0b4:	ldr	r0, [fp, #-8]
    a0b8:	bl	0 <flatcc_builder_start_offset_vector>
    a0bc:	mov	r3, r0
    a0c0:	mov	r0, r3
    a0c4:	sub	sp, fp, #4
    a0c8:	ldr	fp, [sp]
    a0cc:	add	sp, sp, #4
    a0d0:	pop	{pc}		; (ldr pc, [sp], #4)

0000a0d4 <MyGame_Example_Monster_testarrayoftables_end>:
    a0d4:	str	fp, [sp, #-8]!
    a0d8:	str	lr, [sp, #4]
    a0dc:	add	fp, sp, #4
    a0e0:	sub	sp, sp, #8
    a0e4:	str	r0, [fp, #-8]
    a0e8:	ldr	r0, [fp, #-8]
    a0ec:	bl	0 <flatcc_builder_end_offset_vector>
    a0f0:	mov	r3, r0
    a0f4:	mov	r1, r3
    a0f8:	ldr	r0, [fp, #-8]
    a0fc:	bl	a034 <MyGame_Example_Monster_testarrayoftables_add>
    a100:	mov	r3, r0
    a104:	mov	r0, r3
    a108:	sub	sp, fp, #4
    a10c:	ldr	fp, [sp]
    a110:	add	sp, sp, #4
    a114:	pop	{pc}		; (ldr pc, [sp], #4)

0000a118 <MyGame_Example_Monster_testarrayoftables_extend>:
    a118:	str	fp, [sp, #-8]!
    a11c:	str	lr, [sp, #4]
    a120:	add	fp, sp, #4
    a124:	sub	sp, sp, #8
    a128:	str	r0, [fp, #-8]
    a12c:	str	r1, [fp, #-12]
    a130:	ldr	r1, [fp, #-12]
    a134:	ldr	r0, [fp, #-8]
    a138:	bl	0 <flatcc_builder_extend_offset_vector>
    a13c:	mov	r3, r0
    a140:	mov	r0, r3
    a144:	sub	sp, fp, #4
    a148:	ldr	fp, [sp]
    a14c:	add	sp, sp, #4
    a150:	pop	{pc}		; (ldr pc, [sp], #4)

0000a154 <MyGame_Example_Monster_testarrayoftables_append>:
    a154:	str	fp, [sp, #-8]!
    a158:	str	lr, [sp, #4]
    a15c:	add	fp, sp, #4
    a160:	sub	sp, sp, #16
    a164:	str	r0, [fp, #-8]
    a168:	str	r1, [fp, #-12]
    a16c:	str	r2, [fp, #-16]
    a170:	ldr	r2, [fp, #-16]
    a174:	ldr	r1, [fp, #-12]
    a178:	ldr	r0, [fp, #-8]
    a17c:	bl	0 <flatcc_builder_append_offset_vector>
    a180:	mov	r3, r0
    a184:	mov	r0, r3
    a188:	sub	sp, fp, #4
    a18c:	ldr	fp, [sp]
    a190:	add	sp, sp, #4
    a194:	pop	{pc}		; (ldr pc, [sp], #4)

0000a198 <MyGame_Example_Monster_testarrayoftables_truncate>:
    a198:	str	fp, [sp, #-8]!
    a19c:	str	lr, [sp, #4]
    a1a0:	add	fp, sp, #4
    a1a4:	sub	sp, sp, #8
    a1a8:	str	r0, [fp, #-8]
    a1ac:	str	r1, [fp, #-12]
    a1b0:	ldr	r1, [fp, #-12]
    a1b4:	ldr	r0, [fp, #-8]
    a1b8:	bl	0 <flatcc_builder_truncate_offset_vector>
    a1bc:	mov	r3, r0
    a1c0:	mov	r0, r3
    a1c4:	sub	sp, fp, #4
    a1c8:	ldr	fp, [sp]
    a1cc:	add	sp, sp, #4
    a1d0:	pop	{pc}		; (ldr pc, [sp], #4)

0000a1d4 <MyGame_Example_Monster_testarrayoftables_edit>:
    a1d4:	str	fp, [sp, #-8]!
    a1d8:	str	lr, [sp, #4]
    a1dc:	add	fp, sp, #4
    a1e0:	sub	sp, sp, #8
    a1e4:	str	r0, [fp, #-8]
    a1e8:	ldr	r0, [fp, #-8]
    a1ec:	bl	0 <flatcc_builder_offset_vector_edit>
    a1f0:	mov	r3, r0
    a1f4:	mov	r0, r3
    a1f8:	sub	sp, fp, #4
    a1fc:	ldr	fp, [sp]
    a200:	add	sp, sp, #4
    a204:	pop	{pc}		; (ldr pc, [sp], #4)

0000a208 <MyGame_Example_Monster_testarrayoftables_reserved_len>:
    a208:	str	fp, [sp, #-8]!
    a20c:	str	lr, [sp, #4]
    a210:	add	fp, sp, #4
    a214:	sub	sp, sp, #8
    a218:	str	r0, [fp, #-8]
    a21c:	ldr	r0, [fp, #-8]
    a220:	bl	0 <flatcc_builder_offset_vector_count>
    a224:	mov	r3, r0
    a228:	mov	r0, r3
    a22c:	sub	sp, fp, #4
    a230:	ldr	fp, [sp]
    a234:	add	sp, sp, #4
    a238:	pop	{pc}		; (ldr pc, [sp], #4)

0000a23c <MyGame_Example_Monster_testarrayoftables_push>:
    a23c:	str	fp, [sp, #-8]!
    a240:	str	lr, [sp, #4]
    a244:	add	fp, sp, #4
    a248:	sub	sp, sp, #8
    a24c:	str	r0, [fp, #-8]
    a250:	str	r1, [fp, #-12]
    a254:	ldr	r3, [fp, #-12]
    a258:	cmp	r3, #0
    a25c:	beq	a274 <MyGame_Example_Monster_testarrayoftables_push+0x38>
    a260:	ldr	r1, [fp, #-12]
    a264:	ldr	r0, [fp, #-8]
    a268:	bl	0 <flatcc_builder_offset_vector_push>
    a26c:	mov	r3, r0
    a270:	b	a278 <MyGame_Example_Monster_testarrayoftables_push+0x3c>
    a274:	mov	r3, #0
    a278:	mov	r0, r3
    a27c:	sub	sp, fp, #4
    a280:	ldr	fp, [sp]
    a284:	add	sp, sp, #4
    a288:	pop	{pc}		; (ldr pc, [sp], #4)

0000a28c <MyGame_Example_Monster_testarrayoftables_push_start>:
    a28c:	str	fp, [sp, #-8]!
    a290:	str	lr, [sp, #4]
    a294:	add	fp, sp, #4
    a298:	sub	sp, sp, #8
    a29c:	str	r0, [fp, #-8]
    a2a0:	ldr	r0, [fp, #-8]
    a2a4:	bl	8a5c <MyGame_Example_Monster_start>
    a2a8:	mov	r3, r0
    a2ac:	mov	r0, r3
    a2b0:	sub	sp, fp, #4
    a2b4:	ldr	fp, [sp]
    a2b8:	add	sp, sp, #4
    a2bc:	pop	{pc}		; (ldr pc, [sp], #4)

0000a2c0 <MyGame_Example_Monster_testarrayoftables_push_end>:
    a2c0:	str	fp, [sp, #-8]!
    a2c4:	str	lr, [sp, #4]
    a2c8:	add	fp, sp, #4
    a2cc:	sub	sp, sp, #8
    a2d0:	str	r0, [fp, #-8]
    a2d4:	ldr	r0, [fp, #-8]
    a2d8:	bl	8a94 <MyGame_Example_Monster_end>
    a2dc:	mov	r3, r0
    a2e0:	mov	r1, r3
    a2e4:	ldr	r0, [fp, #-8]
    a2e8:	bl	a23c <MyGame_Example_Monster_testarrayoftables_push>
    a2ec:	mov	r3, r0
    a2f0:	mov	r0, r3
    a2f4:	sub	sp, fp, #4
    a2f8:	ldr	fp, [sp]
    a2fc:	add	sp, sp, #4
    a300:	pop	{pc}		; (ldr pc, [sp], #4)

0000a304 <MyGame_Example_Monster_testarrayofstring_add>:
    a304:	str	fp, [sp, #-8]!
    a308:	str	lr, [sp, #4]
    a30c:	add	fp, sp, #4
    a310:	sub	sp, sp, #16
    a314:	str	r0, [fp, #-16]
    a318:	str	r1, [fp, #-20]	; 0xffffffec
    a31c:	ldr	r3, [fp, #-20]	; 0xffffffec
    a320:	cmp	r3, #0
    a324:	beq	a358 <MyGame_Example_Monster_testarrayofstring_add+0x54>
    a328:	mov	r1, #10
    a32c:	ldr	r0, [fp, #-16]
    a330:	bl	0 <flatcc_builder_table_add_offset>
    a334:	str	r0, [fp, #-8]
    a338:	ldr	r3, [fp, #-8]
    a33c:	cmp	r3, #0
    a340:	beq	a358 <MyGame_Example_Monster_testarrayofstring_add+0x54>
    a344:	ldr	r3, [fp, #-8]
    a348:	ldr	r2, [fp, #-20]	; 0xffffffec
    a34c:	str	r2, [r3]
    a350:	mov	r3, #0
    a354:	b	a35c <MyGame_Example_Monster_testarrayofstring_add+0x58>
    a358:	mvn	r3, #0
    a35c:	mov	r0, r3
    a360:	sub	sp, fp, #4
    a364:	ldr	fp, [sp]
    a368:	add	sp, sp, #4
    a36c:	pop	{pc}		; (ldr pc, [sp], #4)

0000a370 <MyGame_Example_Monster_testarrayofstring_start>:
    a370:	str	fp, [sp, #-8]!
    a374:	str	lr, [sp, #4]
    a378:	add	fp, sp, #4
    a37c:	sub	sp, sp, #8
    a380:	str	r0, [fp, #-8]
    a384:	ldr	r0, [fp, #-8]
    a388:	bl	0 <flatcc_builder_start_offset_vector>
    a38c:	mov	r3, r0
    a390:	mov	r0, r3
    a394:	sub	sp, fp, #4
    a398:	ldr	fp, [sp]
    a39c:	add	sp, sp, #4
    a3a0:	pop	{pc}		; (ldr pc, [sp], #4)

0000a3a4 <MyGame_Example_Monster_testarrayofstring_end>:
    a3a4:	str	fp, [sp, #-8]!
    a3a8:	str	lr, [sp, #4]
    a3ac:	add	fp, sp, #4
    a3b0:	sub	sp, sp, #8
    a3b4:	str	r0, [fp, #-8]
    a3b8:	ldr	r0, [fp, #-8]
    a3bc:	bl	0 <flatcc_builder_end_offset_vector>
    a3c0:	mov	r3, r0
    a3c4:	mov	r1, r3
    a3c8:	ldr	r0, [fp, #-8]
    a3cc:	bl	a304 <MyGame_Example_Monster_testarrayofstring_add>
    a3d0:	mov	r3, r0
    a3d4:	mov	r0, r3
    a3d8:	sub	sp, fp, #4
    a3dc:	ldr	fp, [sp]
    a3e0:	add	sp, sp, #4
    a3e4:	pop	{pc}		; (ldr pc, [sp], #4)

0000a3e8 <MyGame_Example_Monster_testarrayofstring_create>:
    a3e8:	str	fp, [sp, #-8]!
    a3ec:	str	lr, [sp, #4]
    a3f0:	add	fp, sp, #4
    a3f4:	sub	sp, sp, #16
    a3f8:	str	r0, [fp, #-8]
    a3fc:	str	r1, [fp, #-12]
    a400:	str	r2, [fp, #-16]
    a404:	ldr	r2, [fp, #-16]
    a408:	ldr	r1, [fp, #-12]
    a40c:	ldr	r0, [fp, #-8]
    a410:	bl	0 <flatcc_builder_create_offset_vector>
    a414:	mov	r3, r0
    a418:	mov	r1, r3
    a41c:	ldr	r0, [fp, #-8]
    a420:	bl	a304 <MyGame_Example_Monster_testarrayofstring_add>
    a424:	mov	r3, r0
    a428:	mov	r0, r3
    a42c:	sub	sp, fp, #4
    a430:	ldr	fp, [sp]
    a434:	add	sp, sp, #4
    a438:	pop	{pc}		; (ldr pc, [sp], #4)

0000a43c <MyGame_Example_Monster_testarrayofstring_push_clone>:
    a43c:	str	fp, [sp, #-8]!
    a440:	str	lr, [sp, #4]
    a444:	add	fp, sp, #4
    a448:	sub	sp, sp, #8
    a44c:	str	r0, [fp, #-8]
    a450:	str	r1, [fp, #-12]
    a454:	ldr	r1, [fp, #-12]
    a458:	ldr	r0, [fp, #-8]
    a45c:	bl	7b64 <flatbuffers_string_clone>
    a460:	mov	r3, r0
    a464:	mov	r1, r3
    a468:	ldr	r0, [fp, #-8]
    a46c:	bl	7c50 <flatbuffers_string_vec_push>
    a470:	mov	r3, r0
    a474:	mov	r0, r3
    a478:	sub	sp, fp, #4
    a47c:	ldr	fp, [sp]
    a480:	add	sp, sp, #4
    a484:	pop	{pc}		; (ldr pc, [sp], #4)

0000a488 <MyGame_Example_Monster_testarrayofstring_push_slice>:
    a488:	str	fp, [sp, #-8]!
    a48c:	str	lr, [sp, #4]
    a490:	add	fp, sp, #4
    a494:	sub	sp, sp, #16
    a498:	str	r0, [fp, #-8]
    a49c:	str	r1, [fp, #-12]
    a4a0:	str	r2, [fp, #-16]
    a4a4:	str	r3, [fp, #-20]	; 0xffffffec
    a4a8:	ldr	r3, [fp, #-20]	; 0xffffffec
    a4ac:	ldr	r2, [fp, #-16]
    a4b0:	ldr	r1, [fp, #-12]
    a4b4:	ldr	r0, [fp, #-8]
    a4b8:	bl	7bb0 <flatbuffers_string_slice>
    a4bc:	mov	r3, r0
    a4c0:	mov	r1, r3
    a4c4:	ldr	r0, [fp, #-8]
    a4c8:	bl	7c50 <flatbuffers_string_vec_push>
    a4cc:	mov	r3, r0
    a4d0:	mov	r0, r3
    a4d4:	sub	sp, fp, #4
    a4d8:	ldr	fp, [sp]
    a4dc:	add	sp, sp, #4
    a4e0:	pop	{pc}		; (ldr pc, [sp], #4)

0000a4e4 <MyGame_Example_Monster_testarrayofbools_add>:
    a4e4:	str	fp, [sp, #-8]!
    a4e8:	str	lr, [sp, #4]
    a4ec:	add	fp, sp, #4
    a4f0:	sub	sp, sp, #16
    a4f4:	str	r0, [fp, #-16]
    a4f8:	str	r1, [fp, #-20]	; 0xffffffec
    a4fc:	ldr	r3, [fp, #-20]	; 0xffffffec
    a500:	cmp	r3, #0
    a504:	beq	a538 <MyGame_Example_Monster_testarrayofbools_add+0x54>
    a508:	mov	r1, #24
    a50c:	ldr	r0, [fp, #-16]
    a510:	bl	0 <flatcc_builder_table_add_offset>
    a514:	str	r0, [fp, #-8]
    a518:	ldr	r3, [fp, #-8]
    a51c:	cmp	r3, #0
    a520:	beq	a538 <MyGame_Example_Monster_testarrayofbools_add+0x54>
    a524:	ldr	r3, [fp, #-8]
    a528:	ldr	r2, [fp, #-20]	; 0xffffffec
    a52c:	str	r2, [r3]
    a530:	mov	r3, #0
    a534:	b	a53c <MyGame_Example_Monster_testarrayofbools_add+0x58>
    a538:	mvn	r3, #0
    a53c:	mov	r0, r3
    a540:	sub	sp, fp, #4
    a544:	ldr	fp, [sp]
    a548:	add	sp, sp, #4
    a54c:	pop	{pc}		; (ldr pc, [sp], #4)

0000a550 <MyGame_Example_Monster_testarrayofbools_start>:
    a550:	str	fp, [sp, #-8]!
    a554:	str	lr, [sp, #4]
    a558:	add	fp, sp, #4
    a55c:	sub	sp, sp, #8
    a560:	str	r0, [fp, #-8]
    a564:	ldr	r0, [fp, #-8]
    a568:	bl	7588 <flatbuffers_bool_vec_start>
    a56c:	mov	r3, r0
    a570:	mov	r0, r3
    a574:	sub	sp, fp, #4
    a578:	ldr	fp, [sp]
    a57c:	add	sp, sp, #4
    a580:	pop	{pc}		; (ldr pc, [sp], #4)

0000a584 <MyGame_Example_Monster_testarrayofbools_end>:
    a584:	str	fp, [sp, #-8]!
    a588:	str	lr, [sp, #4]
    a58c:	add	fp, sp, #4
    a590:	sub	sp, sp, #8
    a594:	str	r0, [fp, #-8]
    a598:	ldr	r0, [fp, #-8]
    a59c:	bl	75c8 <flatbuffers_bool_vec_end>
    a5a0:	mov	r3, r0
    a5a4:	mov	r1, r3
    a5a8:	ldr	r0, [fp, #-8]
    a5ac:	bl	a4e4 <MyGame_Example_Monster_testarrayofbools_add>
    a5b0:	mov	r3, r0
    a5b4:	mov	r0, r3
    a5b8:	sub	sp, fp, #4
    a5bc:	ldr	fp, [sp]
    a5c0:	add	sp, sp, #4
    a5c4:	pop	{pc}		; (ldr pc, [sp], #4)

0000a5c8 <MyGame_Example_Monster_testarrayofbools_create>:
    a5c8:	str	fp, [sp, #-8]!
    a5cc:	str	lr, [sp, #4]
    a5d0:	add	fp, sp, #4
    a5d4:	sub	sp, sp, #16
    a5d8:	str	r0, [fp, #-8]
    a5dc:	str	r1, [fp, #-12]
    a5e0:	str	r2, [fp, #-16]
    a5e4:	ldr	r2, [fp, #-16]
    a5e8:	ldr	r1, [fp, #-12]
    a5ec:	ldr	r0, [fp, #-8]
    a5f0:	bl	75fc <flatbuffers_bool_vec_create>
    a5f4:	mov	r3, r0
    a5f8:	mov	r1, r3
    a5fc:	ldr	r0, [fp, #-8]
    a600:	bl	a4e4 <MyGame_Example_Monster_testarrayofbools_add>
    a604:	mov	r3, r0
    a608:	mov	r0, r3
    a60c:	sub	sp, fp, #4
    a610:	ldr	fp, [sp]
    a614:	add	sp, sp, #4
    a618:	pop	{pc}		; (ldr pc, [sp], #4)

0000a61c <MyGame_Example_Monster_testarrayofbools_clone>:
    a61c:	str	fp, [sp, #-8]!
    a620:	str	lr, [sp, #4]
    a624:	add	fp, sp, #4
    a628:	sub	sp, sp, #8
    a62c:	str	r0, [fp, #-8]
    a630:	str	r1, [fp, #-12]
    a634:	ldr	r1, [fp, #-12]
    a638:	ldr	r0, [fp, #-8]
    a63c:	bl	7654 <flatbuffers_bool_vec_clone>
    a640:	mov	r3, r0
    a644:	mov	r1, r3
    a648:	ldr	r0, [fp, #-8]
    a64c:	bl	a4e4 <MyGame_Example_Monster_testarrayofbools_add>
    a650:	mov	r3, r0
    a654:	mov	r0, r3
    a658:	sub	sp, fp, #4
    a65c:	ldr	fp, [sp]
    a660:	add	sp, sp, #4
    a664:	pop	{pc}		; (ldr pc, [sp], #4)

0000a668 <MyGame_Example_Monster_testarrayofbools_slice>:
    a668:	str	fp, [sp, #-8]!
    a66c:	str	lr, [sp, #4]
    a670:	add	fp, sp, #4
    a674:	sub	sp, sp, #16
    a678:	str	r0, [fp, #-8]
    a67c:	str	r1, [fp, #-12]
    a680:	str	r2, [fp, #-16]
    a684:	str	r3, [fp, #-20]	; 0xffffffec
    a688:	ldr	r3, [fp, #-20]	; 0xffffffec
    a68c:	ldr	r2, [fp, #-16]
    a690:	ldr	r1, [fp, #-12]
    a694:	ldr	r0, [fp, #-8]
    a698:	bl	76b0 <flatbuffers_bool_vec_slice>
    a69c:	mov	r3, r0
    a6a0:	mov	r1, r3
    a6a4:	ldr	r0, [fp, #-8]
    a6a8:	bl	a4e4 <MyGame_Example_Monster_testarrayofbools_add>
    a6ac:	mov	r3, r0
    a6b0:	mov	r0, r3
    a6b4:	sub	sp, fp, #4
    a6b8:	ldr	fp, [sp]
    a6bc:	add	sp, sp, #4
    a6c0:	pop	{pc}		; (ldr pc, [sp], #4)

0000a6c4 <MyGame_Example_Monster_testarrayofbools_append>:
    a6c4:	str	fp, [sp, #-8]!
    a6c8:	str	lr, [sp, #4]
    a6cc:	add	fp, sp, #4
    a6d0:	sub	sp, sp, #16
    a6d4:	str	r0, [fp, #-8]
    a6d8:	str	r1, [fp, #-12]
    a6dc:	str	r2, [fp, #-16]
    a6e0:	ldr	r2, [fp, #-16]
    a6e4:	ldr	r1, [fp, #-12]
    a6e8:	ldr	r0, [fp, #-8]
    a6ec:	bl	0 <flatcc_builder_append_vector>
    a6f0:	mov	r3, r0
    a6f4:	mov	r0, r3
    a6f8:	sub	sp, fp, #4
    a6fc:	ldr	fp, [sp]
    a700:	add	sp, sp, #4
    a704:	pop	{pc}		; (ldr pc, [sp], #4)

0000a708 <MyGame_Example_Monster_enemy_add>:
    a708:	str	fp, [sp, #-8]!
    a70c:	str	lr, [sp, #4]
    a710:	add	fp, sp, #4
    a714:	sub	sp, sp, #16
    a718:	str	r0, [fp, #-16]
    a71c:	str	r1, [fp, #-20]	; 0xffffffec
    a720:	ldr	r3, [fp, #-20]	; 0xffffffec
    a724:	cmp	r3, #0
    a728:	beq	a75c <MyGame_Example_Monster_enemy_add+0x54>
    a72c:	mov	r1, #12
    a730:	ldr	r0, [fp, #-16]
    a734:	bl	0 <flatcc_builder_table_add_offset>
    a738:	str	r0, [fp, #-8]
    a73c:	ldr	r3, [fp, #-8]
    a740:	cmp	r3, #0
    a744:	beq	a75c <MyGame_Example_Monster_enemy_add+0x54>
    a748:	ldr	r3, [fp, #-8]
    a74c:	ldr	r2, [fp, #-20]	; 0xffffffec
    a750:	str	r2, [r3]
    a754:	mov	r3, #0
    a758:	b	a760 <MyGame_Example_Monster_enemy_add+0x58>
    a75c:	mvn	r3, #0
    a760:	mov	r0, r3
    a764:	sub	sp, fp, #4
    a768:	ldr	fp, [sp]
    a76c:	add	sp, sp, #4
    a770:	pop	{pc}		; (ldr pc, [sp], #4)

0000a774 <MyGame_Example_Monster_enemy_start>:
    a774:	str	fp, [sp, #-8]!
    a778:	str	lr, [sp, #4]
    a77c:	add	fp, sp, #4
    a780:	sub	sp, sp, #8
    a784:	str	r0, [fp, #-8]
    a788:	ldr	r0, [fp, #-8]
    a78c:	bl	8a5c <MyGame_Example_Monster_start>
    a790:	mov	r3, r0
    a794:	mov	r0, r3
    a798:	sub	sp, fp, #4
    a79c:	ldr	fp, [sp]
    a7a0:	add	sp, sp, #4
    a7a4:	pop	{pc}		; (ldr pc, [sp], #4)

0000a7a8 <MyGame_Example_Monster_enemy_end>:
    a7a8:	str	fp, [sp, #-8]!
    a7ac:	str	lr, [sp, #4]
    a7b0:	add	fp, sp, #4
    a7b4:	sub	sp, sp, #8
    a7b8:	str	r0, [fp, #-8]
    a7bc:	ldr	r0, [fp, #-8]
    a7c0:	bl	8a94 <MyGame_Example_Monster_end>
    a7c4:	mov	r3, r0
    a7c8:	mov	r1, r3
    a7cc:	ldr	r0, [fp, #-8]
    a7d0:	bl	a708 <MyGame_Example_Monster_enemy_add>
    a7d4:	mov	r3, r0
    a7d8:	mov	r0, r3
    a7dc:	sub	sp, fp, #4
    a7e0:	ldr	fp, [sp]
    a7e4:	add	sp, sp, #4
    a7e8:	pop	{pc}		; (ldr pc, [sp], #4)

0000a7ec <MyGame_Example_Monster_test_add>:
    a7ec:	str	fp, [sp, #-8]!
    a7f0:	str	lr, [sp, #4]
    a7f4:	add	fp, sp, #4
    a7f8:	sub	sp, sp, #24
    a7fc:	str	r0, [fp, #-16]
    a800:	sub	r3, fp, #24
    a804:	stm	r3, {r1, r2}
    a808:	ldrb	r3, [fp, #-24]	; 0xffffffe8
    a80c:	cmp	r3, #0
    a810:	bne	a81c <MyGame_Example_Monster_test_add+0x30>
    a814:	mov	r3, #0
    a818:	b	a894 <MyGame_Example_Monster_test_add+0xa8>
    a81c:	ldr	r3, [fp, #-20]	; 0xffffffec
    a820:	cmp	r3, #0
    a824:	bne	a830 <MyGame_Example_Monster_test_add+0x44>
    a828:	mvn	r3, #0
    a82c:	b	a894 <MyGame_Example_Monster_test_add+0xa8>
    a830:	mov	r3, #1
    a834:	mov	r2, #1
    a838:	mov	r1, #7
    a83c:	ldr	r0, [fp, #-16]
    a840:	bl	0 <flatcc_builder_table_add>
    a844:	str	r0, [fp, #-8]
    a848:	ldr	r3, [fp, #-8]
    a84c:	cmp	r3, #0
    a850:	beq	a870 <MyGame_Example_Monster_test_add+0x84>
    a854:	mov	r1, #8
    a858:	ldr	r0, [fp, #-16]
    a85c:	bl	0 <flatcc_builder_table_add_offset>
    a860:	str	r0, [fp, #-12]
    a864:	ldr	r3, [fp, #-12]
    a868:	cmp	r3, #0
    a86c:	bne	a878 <MyGame_Example_Monster_test_add+0x8c>
    a870:	mvn	r3, #0
    a874:	b	a894 <MyGame_Example_Monster_test_add+0xa8>
    a878:	ldrb	r2, [fp, #-24]	; 0xffffffe8
    a87c:	ldr	r3, [fp, #-8]
    a880:	strb	r2, [r3]
    a884:	ldr	r2, [fp, #-20]	; 0xffffffec
    a888:	ldr	r3, [fp, #-12]
    a88c:	str	r2, [r3]
    a890:	mov	r3, #0
    a894:	mov	r0, r3
    a898:	sub	sp, fp, #4
    a89c:	ldr	fp, [sp]
    a8a0:	add	sp, sp, #4
    a8a4:	pop	{pc}		; (ldr pc, [sp], #4)

0000a8a8 <MyGame_Example_Monster_test_add_type>:
    a8a8:	str	fp, [sp, #-8]!
    a8ac:	str	lr, [sp, #4]
    a8b0:	add	fp, sp, #4
    a8b4:	sub	sp, sp, #16
    a8b8:	str	r0, [fp, #-16]
    a8bc:	mov	r3, r1
    a8c0:	strb	r3, [fp, #-17]	; 0xffffffef
    a8c4:	ldrb	r3, [fp, #-17]	; 0xffffffef
    a8c8:	cmp	r3, #0
    a8cc:	bne	a8d8 <MyGame_Example_Monster_test_add_type+0x30>
    a8d0:	mov	r3, #0
    a8d4:	b	a914 <MyGame_Example_Monster_test_add_type+0x6c>
    a8d8:	mov	r3, #1
    a8dc:	mov	r2, #1
    a8e0:	mov	r1, #7
    a8e4:	ldr	r0, [fp, #-16]
    a8e8:	bl	0 <flatcc_builder_table_add>
    a8ec:	str	r0, [fp, #-8]
    a8f0:	ldr	r3, [fp, #-8]
    a8f4:	cmp	r3, #0
    a8f8:	beq	a910 <MyGame_Example_Monster_test_add_type+0x68>
    a8fc:	ldr	r3, [fp, #-8]
    a900:	ldrb	r2, [fp, #-17]	; 0xffffffef
    a904:	strb	r2, [r3]
    a908:	mov	r3, #0
    a90c:	b	a914 <MyGame_Example_Monster_test_add_type+0x6c>
    a910:	mvn	r3, #0
    a914:	mov	r0, r3
    a918:	sub	sp, fp, #4
    a91c:	ldr	fp, [sp]
    a920:	add	sp, sp, #4
    a924:	pop	{pc}		; (ldr pc, [sp], #4)

0000a928 <MyGame_Example_Monster_test_add_value>:
    a928:	str	fp, [sp, #-8]!
    a92c:	str	lr, [sp, #4]
    a930:	add	fp, sp, #4
    a934:	sub	sp, sp, #24
    a938:	str	r0, [fp, #-16]
    a93c:	sub	r3, fp, #24
    a940:	stm	r3, {r1, r2}
    a944:	ldrb	r3, [fp, #-24]	; 0xffffffe8
    a948:	cmp	r3, #0
    a94c:	bne	a958 <MyGame_Example_Monster_test_add_value+0x30>
    a950:	mov	r3, #0
    a954:	b	a98c <MyGame_Example_Monster_test_add_value+0x64>
    a958:	mov	r1, #8
    a95c:	ldr	r0, [fp, #-16]
    a960:	bl	0 <flatcc_builder_table_add_offset>
    a964:	str	r0, [fp, #-8]
    a968:	ldr	r3, [fp, #-8]
    a96c:	cmp	r3, #0
    a970:	beq	a988 <MyGame_Example_Monster_test_add_value+0x60>
    a974:	ldr	r2, [fp, #-20]	; 0xffffffec
    a978:	ldr	r3, [fp, #-8]
    a97c:	str	r2, [r3]
    a980:	mov	r3, #0
    a984:	b	a98c <MyGame_Example_Monster_test_add_value+0x64>
    a988:	mvn	r3, #0
    a98c:	mov	r0, r3
    a990:	sub	sp, fp, #4
    a994:	ldr	fp, [sp]
    a998:	add	sp, sp, #4
    a99c:	pop	{pc}		; (ldr pc, [sp], #4)

0000a9a0 <MyGame_Example_Monster_test_Monster_add>:
    a9a0:	str	fp, [sp, #-8]!
    a9a4:	str	lr, [sp, #4]
    a9a8:	add	fp, sp, #4
    a9ac:	sub	sp, sp, #16
    a9b0:	str	r0, [fp, #-16]
    a9b4:	str	r1, [fp, #-20]	; 0xffffffec
    a9b8:	sub	r3, fp, #12
    a9bc:	ldr	r1, [fp, #-20]	; 0xffffffec
    a9c0:	mov	r0, r3
    a9c4:	bl	8d5c <MyGame_Example_Any_as_Monster>
    a9c8:	sub	r3, fp, #12
    a9cc:	ldm	r3, {r1, r2}
    a9d0:	ldr	r0, [fp, #-16]
    a9d4:	bl	a7ec <MyGame_Example_Monster_test_add>
    a9d8:	mov	r3, r0
    a9dc:	mov	r0, r3
    a9e0:	sub	sp, fp, #4
    a9e4:	ldr	fp, [sp]
    a9e8:	add	sp, sp, #4
    a9ec:	pop	{pc}		; (ldr pc, [sp], #4)

0000a9f0 <MyGame_Example_Monster_test_Alt_add>:
    a9f0:	str	fp, [sp, #-8]!
    a9f4:	str	lr, [sp, #4]
    a9f8:	add	fp, sp, #4
    a9fc:	sub	sp, sp, #16
    aa00:	str	r0, [fp, #-16]
    aa04:	str	r1, [fp, #-20]	; 0xffffffec
    aa08:	sub	r3, fp, #12
    aa0c:	ldr	r1, [fp, #-20]	; 0xffffffec
    aa10:	mov	r0, r3
    aa14:	bl	8dec <MyGame_Example_Any_as_Alt>
    aa18:	sub	r3, fp, #12
    aa1c:	ldm	r3, {r1, r2}
    aa20:	ldr	r0, [fp, #-16]
    aa24:	bl	a7ec <MyGame_Example_Monster_test_add>
    aa28:	mov	r3, r0
    aa2c:	mov	r0, r3
    aa30:	sub	sp, fp, #4
    aa34:	ldr	fp, [sp]
    aa38:	add	sp, sp, #4
    aa3c:	pop	{pc}		; (ldr pc, [sp], #4)

0000aa40 <MyGame_Example_Monster_test_Alt_start>:
    aa40:	str	fp, [sp, #-8]!
    aa44:	str	lr, [sp, #4]
    aa48:	add	fp, sp, #4
    aa4c:	sub	sp, sp, #8
    aa50:	str	r0, [fp, #-8]
    aa54:	ldr	r0, [fp, #-8]
    aa58:	bl	89b0 <MyGame_Example_Alt_start>
    aa5c:	mov	r3, r0
    aa60:	mov	r0, r3
    aa64:	sub	sp, fp, #4
    aa68:	ldr	fp, [sp]
    aa6c:	add	sp, sp, #4
    aa70:	pop	{pc}		; (ldr pc, [sp], #4)

0000aa74 <MyGame_Example_Monster_test_Alt_end>:
    aa74:	str	fp, [sp, #-8]!
    aa78:	str	lr, [sp, #4]
    aa7c:	add	fp, sp, #4
    aa80:	sub	sp, sp, #16
    aa84:	str	r0, [fp, #-16]
    aa88:	ldr	r0, [fp, #-16]
    aa8c:	bl	89e8 <MyGame_Example_Alt_end>
    aa90:	str	r0, [fp, #-8]
    aa94:	ldr	r3, [fp, #-8]
    aa98:	cmp	r3, #0
    aa9c:	beq	aab4 <MyGame_Example_Monster_test_Alt_end+0x40>
    aaa0:	ldr	r1, [fp, #-8]
    aaa4:	ldr	r0, [fp, #-16]
    aaa8:	bl	a9f0 <MyGame_Example_Monster_test_Alt_add>
    aaac:	mov	r3, r0
    aab0:	b	aab8 <MyGame_Example_Monster_test_Alt_end+0x44>
    aab4:	mvn	r3, #0
    aab8:	mov	r0, r3
    aabc:	sub	sp, fp, #4
    aac0:	ldr	fp, [sp]
    aac4:	add	sp, sp, #4
    aac8:	pop	{pc}		; (ldr pc, [sp], #4)

0000aacc <MyGame_Example_Monster_test4_add>:
    aacc:	str	fp, [sp, #-8]!
    aad0:	str	lr, [sp, #4]
    aad4:	add	fp, sp, #4
    aad8:	sub	sp, sp, #16
    aadc:	str	r0, [fp, #-16]
    aae0:	str	r1, [fp, #-20]	; 0xffffffec
    aae4:	ldr	r3, [fp, #-20]	; 0xffffffec
    aae8:	cmp	r3, #0
    aaec:	beq	ab20 <MyGame_Example_Monster_test4_add+0x54>
    aaf0:	mov	r1, #9
    aaf4:	ldr	r0, [fp, #-16]
    aaf8:	bl	0 <flatcc_builder_table_add_offset>
    aafc:	str	r0, [fp, #-8]
    ab00:	ldr	r3, [fp, #-8]
    ab04:	cmp	r3, #0
    ab08:	beq	ab20 <MyGame_Example_Monster_test4_add+0x54>
    ab0c:	ldr	r3, [fp, #-8]
    ab10:	ldr	r2, [fp, #-20]	; 0xffffffec
    ab14:	str	r2, [r3]
    ab18:	mov	r3, #0
    ab1c:	b	ab24 <MyGame_Example_Monster_test4_add+0x58>
    ab20:	mvn	r3, #0
    ab24:	mov	r0, r3
    ab28:	sub	sp, fp, #4
    ab2c:	ldr	fp, [sp]
    ab30:	add	sp, sp, #4
    ab34:	pop	{pc}		; (ldr pc, [sp], #4)

0000ab38 <MyGame_Example_Monster_test4_start>:
    ab38:	str	fp, [sp, #-8]!
    ab3c:	str	lr, [sp, #4]
    ab40:	add	fp, sp, #4
    ab44:	sub	sp, sp, #8
    ab48:	str	r0, [fp, #-8]
    ab4c:	ldr	r0, [fp, #-8]
    ab50:	bl	7eb0 <MyGame_Example_Test_vec_start>
    ab54:	mov	r3, r0
    ab58:	mov	r0, r3
    ab5c:	sub	sp, fp, #4
    ab60:	ldr	fp, [sp]
    ab64:	add	sp, sp, #4
    ab68:	pop	{pc}		; (ldr pc, [sp], #4)

0000ab6c <MyGame_Example_Monster_test4_end>:
    ab6c:	str	fp, [sp, #-8]!
    ab70:	str	lr, [sp, #4]
    ab74:	add	fp, sp, #4
    ab78:	sub	sp, sp, #8
    ab7c:	str	r0, [fp, #-8]
    ab80:	ldr	r0, [fp, #-8]
    ab84:	bl	7ef0 <MyGame_Example_Test_vec_end>
    ab88:	mov	r3, r0
    ab8c:	mov	r1, r3
    ab90:	ldr	r0, [fp, #-8]
    ab94:	bl	aacc <MyGame_Example_Monster_test4_add>
    ab98:	mov	r3, r0
    ab9c:	mov	r0, r3
    aba0:	sub	sp, fp, #4
    aba4:	ldr	fp, [sp]
    aba8:	add	sp, sp, #4
    abac:	pop	{pc}		; (ldr pc, [sp], #4)

0000abb0 <MyGame_Example_Monster_test4_clone>:
    abb0:	str	fp, [sp, #-8]!
    abb4:	str	lr, [sp, #4]
    abb8:	add	fp, sp, #4
    abbc:	sub	sp, sp, #8
    abc0:	str	r0, [fp, #-8]
    abc4:	str	r1, [fp, #-12]
    abc8:	ldr	r1, [fp, #-12]
    abcc:	ldr	r0, [fp, #-8]
    abd0:	bl	7f24 <MyGame_Example_Test_vec_clone>
    abd4:	mov	r3, r0
    abd8:	mov	r1, r3
    abdc:	ldr	r0, [fp, #-8]
    abe0:	bl	aacc <MyGame_Example_Monster_test4_add>
    abe4:	mov	r3, r0
    abe8:	mov	r0, r3
    abec:	sub	sp, fp, #4
    abf0:	ldr	fp, [sp]
    abf4:	add	sp, sp, #4
    abf8:	pop	{pc}		; (ldr pc, [sp], #4)

0000abfc <MyGame_Example_Monster_test4_slice>:
    abfc:	str	fp, [sp, #-8]!
    ac00:	str	lr, [sp, #4]
    ac04:	add	fp, sp, #4
    ac08:	sub	sp, sp, #16
    ac0c:	str	r0, [fp, #-8]
    ac10:	str	r1, [fp, #-12]
    ac14:	str	r2, [fp, #-16]
    ac18:	str	r3, [fp, #-20]	; 0xffffffec
    ac1c:	ldr	r3, [fp, #-20]	; 0xffffffec
    ac20:	ldr	r2, [fp, #-16]
    ac24:	ldr	r1, [fp, #-12]
    ac28:	ldr	r0, [fp, #-8]
    ac2c:	bl	7f80 <MyGame_Example_Test_vec_slice>
    ac30:	mov	r3, r0
    ac34:	mov	r1, r3
    ac38:	ldr	r0, [fp, #-8]
    ac3c:	bl	aacc <MyGame_Example_Monster_test4_add>
    ac40:	mov	r3, r0
    ac44:	mov	r0, r3
    ac48:	sub	sp, fp, #4
    ac4c:	ldr	fp, [sp]
    ac50:	add	sp, sp, #4
    ac54:	pop	{pc}		; (ldr pc, [sp], #4)

0000ac58 <MyGame_Example_Monster_test4_extend>:
    ac58:	str	fp, [sp, #-8]!
    ac5c:	str	lr, [sp, #4]
    ac60:	add	fp, sp, #4
    ac64:	sub	sp, sp, #8
    ac68:	str	r0, [fp, #-8]
    ac6c:	str	r1, [fp, #-12]
    ac70:	ldr	r1, [fp, #-12]
    ac74:	ldr	r0, [fp, #-8]
    ac78:	bl	0 <flatcc_builder_extend_vector>
    ac7c:	mov	r3, r0
    ac80:	mov	r0, r3
    ac84:	sub	sp, fp, #4
    ac88:	ldr	fp, [sp]
    ac8c:	add	sp, sp, #4
    ac90:	pop	{pc}		; (ldr pc, [sp], #4)

0000ac94 <MyGame_Example_Monster_test4_truncate>:
    ac94:	str	fp, [sp, #-8]!
    ac98:	str	lr, [sp, #4]
    ac9c:	add	fp, sp, #4
    aca0:	sub	sp, sp, #8
    aca4:	str	r0, [fp, #-8]
    aca8:	str	r1, [fp, #-12]
    acac:	ldr	r1, [fp, #-12]
    acb0:	ldr	r0, [fp, #-8]
    acb4:	bl	0 <flatcc_builder_truncate_vector>
    acb8:	mov	r3, r0
    acbc:	mov	r0, r3
    acc0:	sub	sp, fp, #4
    acc4:	ldr	fp, [sp]
    acc8:	add	sp, sp, #4
    accc:	pop	{pc}		; (ldr pc, [sp], #4)

0000acd0 <MyGame_Example_Monster_test4_edit>:
    acd0:	str	fp, [sp, #-8]!
    acd4:	str	lr, [sp, #4]
    acd8:	add	fp, sp, #4
    acdc:	sub	sp, sp, #8
    ace0:	str	r0, [fp, #-8]
    ace4:	ldr	r0, [fp, #-8]
    ace8:	bl	0 <flatcc_builder_vector_edit>
    acec:	mov	r3, r0
    acf0:	mov	r0, r3
    acf4:	sub	sp, fp, #4
    acf8:	ldr	fp, [sp]
    acfc:	add	sp, sp, #4
    ad00:	pop	{pc}		; (ldr pc, [sp], #4)

0000ad04 <MyGame_Example_Monster_test4_reserved_len>:
    ad04:	str	fp, [sp, #-8]!
    ad08:	str	lr, [sp, #4]
    ad0c:	add	fp, sp, #4
    ad10:	sub	sp, sp, #8
    ad14:	str	r0, [fp, #-8]
    ad18:	ldr	r0, [fp, #-8]
    ad1c:	bl	0 <flatcc_builder_vector_count>
    ad20:	mov	r3, r0
    ad24:	mov	r0, r3
    ad28:	sub	sp, fp, #4
    ad2c:	ldr	fp, [sp]
    ad30:	add	sp, sp, #4
    ad34:	pop	{pc}		; (ldr pc, [sp], #4)

0000ad38 <MyGame_Example_Monster_test4_push>:
    ad38:	str	fp, [sp, #-8]!
    ad3c:	str	lr, [sp, #4]
    ad40:	add	fp, sp, #4
    ad44:	sub	sp, sp, #16
    ad48:	str	r0, [fp, #-16]
    ad4c:	str	r1, [fp, #-20]	; 0xffffffec
    ad50:	mov	r1, #1
    ad54:	ldr	r0, [fp, #-16]
    ad58:	bl	0 <flatcc_builder_extend_vector>
    ad5c:	str	r0, [fp, #-8]
    ad60:	ldr	r3, [fp, #-8]
    ad64:	cmp	r3, #0
    ad68:	beq	ad8c <MyGame_Example_Monster_test4_push+0x54>
    ad6c:	bl	1fe0 <MyGame_Example_Test__size>
    ad70:	mov	r3, r0
    ad74:	mov	r2, r3
    ad78:	ldr	r1, [fp, #-20]	; 0xffffffec
    ad7c:	ldr	r0, [fp, #-8]
    ad80:	bl	0 <memcpy>
    ad84:	ldr	r3, [fp, #-8]
    ad88:	b	ad90 <MyGame_Example_Monster_test4_push+0x58>
    ad8c:	mov	r3, #0
    ad90:	mov	r0, r3
    ad94:	sub	sp, fp, #4
    ad98:	ldr	fp, [sp]
    ad9c:	add	sp, sp, #4
    ada0:	pop	{pc}		; (ldr pc, [sp], #4)

0000ada4 <MyGame_Example_Monster_test4_push_create>:
    ada4:	str	fp, [sp, #-8]!
    ada8:	str	lr, [sp, #4]
    adac:	add	fp, sp, #4
    adb0:	sub	sp, sp, #16
    adb4:	str	r0, [fp, #-16]
    adb8:	mov	r3, r1
    adbc:	strh	r3, [fp, #-18]	; 0xffffffee
    adc0:	mov	r3, r2
    adc4:	strb	r3, [fp, #-19]	; 0xffffffed
    adc8:	mov	r1, #1
    adcc:	ldr	r0, [fp, #-16]
    add0:	bl	0 <flatcc_builder_extend_vector>
    add4:	str	r0, [fp, #-8]
    add8:	ldr	r3, [fp, #-8]
    addc:	cmp	r3, #0
    ade0:	beq	ae00 <MyGame_Example_Monster_test4_push_create+0x5c>
    ade4:	ldrsb	r2, [fp, #-19]	; 0xffffffed
    ade8:	ldrsh	r3, [fp, #-18]	; 0xffffffee
    adec:	mov	r1, r3
    adf0:	ldr	r0, [fp, #-8]
    adf4:	bl	7db4 <MyGame_Example_Test_assign>
    adf8:	mov	r3, r0
    adfc:	b	ae04 <MyGame_Example_Monster_test4_push_create+0x60>
    ae00:	mov	r3, #0
    ae04:	mov	r0, r3
    ae08:	sub	sp, fp, #4
    ae0c:	ldr	fp, [sp]
    ae10:	add	sp, sp, #4
    ae14:	pop	{pc}		; (ldr pc, [sp], #4)

0000ae18 <MyGame_Example_Monster_testnestedflatbuffer_add>:
    ae18:	str	fp, [sp, #-8]!
    ae1c:	str	lr, [sp, #4]
    ae20:	add	fp, sp, #4
    ae24:	sub	sp, sp, #16
    ae28:	str	r0, [fp, #-16]
    ae2c:	str	r1, [fp, #-20]	; 0xffffffec
    ae30:	ldr	r3, [fp, #-20]	; 0xffffffec
    ae34:	cmp	r3, #0
    ae38:	beq	ae6c <MyGame_Example_Monster_testnestedflatbuffer_add+0x54>
    ae3c:	mov	r1, #13
    ae40:	ldr	r0, [fp, #-16]
    ae44:	bl	0 <flatcc_builder_table_add_offset>
    ae48:	str	r0, [fp, #-8]
    ae4c:	ldr	r3, [fp, #-8]
    ae50:	cmp	r3, #0
    ae54:	beq	ae6c <MyGame_Example_Monster_testnestedflatbuffer_add+0x54>
    ae58:	ldr	r3, [fp, #-8]
    ae5c:	ldr	r2, [fp, #-20]	; 0xffffffec
    ae60:	str	r2, [r3]
    ae64:	mov	r3, #0
    ae68:	b	ae70 <MyGame_Example_Monster_testnestedflatbuffer_add+0x58>
    ae6c:	mvn	r3, #0
    ae70:	mov	r0, r3
    ae74:	sub	sp, fp, #4
    ae78:	ldr	fp, [sp]
    ae7c:	add	sp, sp, #4
    ae80:	pop	{pc}		; (ldr pc, [sp], #4)

0000ae84 <MyGame_Example_Monster_testnestedflatbuffer_start_as_root>:
    ae84:	str	fp, [sp, #-8]!
    ae88:	str	lr, [sp, #4]
    ae8c:	add	fp, sp, #4
    ae90:	sub	sp, sp, #8
    ae94:	str	r0, [fp, #-8]
    ae98:	movw	r1, #0
    ae9c:	movt	r1, #0
    aea0:	ldr	r0, [fp, #-8]
    aea4:	bl	7ca0 <flatbuffers_buffer_start>
    aea8:	mov	r3, r0
    aeac:	cmp	r3, #0
    aeb0:	bne	aec4 <MyGame_Example_Monster_testnestedflatbuffer_start_as_root+0x40>
    aeb4:	ldr	r0, [fp, #-8]
    aeb8:	bl	8a5c <MyGame_Example_Monster_start>
    aebc:	mov	r3, r0
    aec0:	b	aec8 <MyGame_Example_Monster_testnestedflatbuffer_start_as_root+0x44>
    aec4:	mvn	r3, #0
    aec8:	mov	r0, r3
    aecc:	sub	sp, fp, #4
    aed0:	ldr	fp, [sp]
    aed4:	add	sp, sp, #4
    aed8:	pop	{pc}		; (ldr pc, [sp], #4)

0000aedc <MyGame_Example_Monster_testnestedflatbuffer_end_as_root>:
    aedc:	str	fp, [sp, #-8]!
    aee0:	str	lr, [sp, #4]
    aee4:	add	fp, sp, #4
    aee8:	sub	sp, sp, #8
    aeec:	str	r0, [fp, #-8]
    aef0:	ldr	r0, [fp, #-8]
    aef4:	bl	8a94 <MyGame_Example_Monster_end>
    aef8:	mov	r3, r0
    aefc:	mov	r1, r3
    af00:	ldr	r0, [fp, #-8]
    af04:	bl	7d28 <flatbuffers_buffer_end>
    af08:	mov	r3, r0
    af0c:	mov	r1, r3
    af10:	ldr	r0, [fp, #-8]
    af14:	bl	ae18 <MyGame_Example_Monster_testnestedflatbuffer_add>
    af18:	mov	r3, r0
    af1c:	mov	r0, r3
    af20:	sub	sp, fp, #4
    af24:	ldr	fp, [sp]
    af28:	add	sp, sp, #4
    af2c:	pop	{pc}		; (ldr pc, [sp], #4)

0000af30 <MyGame_Example_Monster_testnestedflatbuffer_nest>:
    af30:	str	fp, [sp, #-8]!
    af34:	str	lr, [sp, #4]
    af38:	add	fp, sp, #4
    af3c:	sub	sp, sp, #24
    af40:	str	r0, [fp, #-8]
    af44:	str	r1, [fp, #-12]
    af48:	str	r2, [fp, #-16]
    af4c:	strh	r3, [fp, #-18]	; 0xffffffee
    af50:	ldrh	r3, [fp, #-18]	; 0xffffffee
    af54:	cmp	r3, #0
    af58:	beq	af64 <MyGame_Example_Monster_testnestedflatbuffer_nest+0x34>
    af5c:	ldrh	r3, [fp, #-18]	; 0xffffffee
    af60:	b	af68 <MyGame_Example_Monster_testnestedflatbuffer_nest+0x38>
    af64:	mov	r3, #8
    af68:	mvn	r2, #0
    af6c:	str	r2, [sp, #4]
    af70:	str	r3, [sp]
    af74:	mov	r3, #1
    af78:	ldr	r2, [fp, #-16]
    af7c:	ldr	r1, [fp, #-12]
    af80:	ldr	r0, [fp, #-8]
    af84:	bl	0 <flatcc_builder_create_vector>
    af88:	mov	r3, r0
    af8c:	mov	r1, r3
    af90:	ldr	r0, [fp, #-8]
    af94:	bl	ae18 <MyGame_Example_Monster_testnestedflatbuffer_add>
    af98:	mov	r3, r0
    af9c:	mov	r0, r3
    afa0:	sub	sp, fp, #4
    afa4:	ldr	fp, [sp]
    afa8:	add	sp, sp, #4
    afac:	pop	{pc}		; (ldr pc, [sp], #4)

0000afb0 <MyGame_Example_Monster_testempty_add>:
    afb0:	str	fp, [sp, #-8]!
    afb4:	str	lr, [sp, #4]
    afb8:	add	fp, sp, #4
    afbc:	sub	sp, sp, #16
    afc0:	str	r0, [fp, #-16]
    afc4:	str	r1, [fp, #-20]	; 0xffffffec
    afc8:	ldr	r3, [fp, #-20]	; 0xffffffec
    afcc:	cmp	r3, #0
    afd0:	beq	b004 <MyGame_Example_Monster_testempty_add+0x54>
    afd4:	mov	r1, #14
    afd8:	ldr	r0, [fp, #-16]
    afdc:	bl	0 <flatcc_builder_table_add_offset>
    afe0:	str	r0, [fp, #-8]
    afe4:	ldr	r3, [fp, #-8]
    afe8:	cmp	r3, #0
    afec:	beq	b004 <MyGame_Example_Monster_testempty_add+0x54>
    aff0:	ldr	r3, [fp, #-8]
    aff4:	ldr	r2, [fp, #-20]	; 0xffffffec
    aff8:	str	r2, [r3]
    affc:	mov	r3, #0
    b000:	b	b008 <MyGame_Example_Monster_testempty_add+0x58>
    b004:	mvn	r3, #0
    b008:	mov	r0, r3
    b00c:	sub	sp, fp, #4
    b010:	ldr	fp, [sp]
    b014:	add	sp, sp, #4
    b018:	pop	{pc}		; (ldr pc, [sp], #4)

0000b01c <MyGame_Example_Monster_testempty_start>:
    b01c:	str	fp, [sp, #-8]!
    b020:	str	lr, [sp, #4]
    b024:	add	fp, sp, #4
    b028:	sub	sp, sp, #8
    b02c:	str	r0, [fp, #-8]
    b030:	ldr	r0, [fp, #-8]
    b034:	bl	8904 <MyGame_Example_Stat_start>
    b038:	mov	r3, r0
    b03c:	mov	r0, r3
    b040:	sub	sp, fp, #4
    b044:	ldr	fp, [sp]
    b048:	add	sp, sp, #4
    b04c:	pop	{pc}		; (ldr pc, [sp], #4)

0000b050 <MyGame_Example_Monster_testempty_end>:
    b050:	str	fp, [sp, #-8]!
    b054:	str	lr, [sp, #4]
    b058:	add	fp, sp, #4
    b05c:	sub	sp, sp, #8
    b060:	str	r0, [fp, #-8]
    b064:	ldr	r0, [fp, #-8]
    b068:	bl	893c <MyGame_Example_Stat_end>
    b06c:	mov	r3, r0
    b070:	mov	r1, r3
    b074:	ldr	r0, [fp, #-8]
    b078:	bl	afb0 <MyGame_Example_Monster_testempty_add>
    b07c:	mov	r3, r0
    b080:	mov	r0, r3
    b084:	sub	sp, fp, #4
    b088:	ldr	fp, [sp]
    b08c:	add	sp, sp, #4
    b090:	pop	{pc}		; (ldr pc, [sp], #4)

0000b094 <MyGame_Example_Monster_testempty_create>:
    b094:	str	fp, [sp, #-8]!
    b098:	str	lr, [sp, #4]
    b09c:	add	fp, sp, #4
    b0a0:	sub	sp, sp, #24
    b0a4:	str	r0, [fp, #-8]
    b0a8:	str	r1, [fp, #-12]
    b0ac:	strd	r2, [fp, #-20]	; 0xffffffec
    b0b0:	ldrh	r3, [fp, #4]
    b0b4:	str	r3, [sp]
    b0b8:	ldrd	r2, [fp, #-20]	; 0xffffffec
    b0bc:	ldr	r1, [fp, #-12]
    b0c0:	ldr	r0, [fp, #-8]
    b0c4:	bl	9694 <MyGame_Example_Stat_create>
    b0c8:	mov	r3, r0
    b0cc:	mov	r1, r3
    b0d0:	ldr	r0, [fp, #-8]
    b0d4:	bl	afb0 <MyGame_Example_Monster_testempty_add>
    b0d8:	mov	r3, r0
    b0dc:	mov	r0, r3
    b0e0:	sub	sp, fp, #4
    b0e4:	ldr	fp, [sp]
    b0e8:	add	sp, sp, #4
    b0ec:	pop	{pc}		; (ldr pc, [sp], #4)

0000b0f0 <MyGame_Example_Monster_testbool_add>:
    b0f0:	str	fp, [sp, #-8]!
    b0f4:	str	lr, [sp, #4]
    b0f8:	add	fp, sp, #4
    b0fc:	sub	sp, sp, #16
    b100:	str	r0, [fp, #-16]
    b104:	mov	r3, r1
    b108:	strb	r3, [fp, #-17]	; 0xffffffef
    b10c:	ldrb	r3, [fp, #-17]	; 0xffffffef
    b110:	cmp	r3, #1
    b114:	bne	b120 <MyGame_Example_Monster_testbool_add+0x30>
    b118:	mov	r3, #0
    b11c:	b	b160 <MyGame_Example_Monster_testbool_add+0x70>
    b120:	mov	r3, #1
    b124:	mov	r2, #1
    b128:	mov	r1, #15
    b12c:	ldr	r0, [fp, #-16]
    b130:	bl	0 <flatcc_builder_table_add>
    b134:	str	r0, [fp, #-8]
    b138:	ldr	r3, [fp, #-8]
    b13c:	cmp	r3, #0
    b140:	bne	b14c <MyGame_Example_Monster_testbool_add+0x5c>
    b144:	mvn	r3, #0
    b148:	b	b160 <MyGame_Example_Monster_testbool_add+0x70>
    b14c:	ldrb	r3, [fp, #-17]	; 0xffffffef
    b150:	mov	r1, r3
    b154:	ldr	r0, [fp, #-8]
    b158:	bl	7538 <flatbuffers_bool_assign_to_pe>
    b15c:	mov	r3, #0
    b160:	mov	r0, r3
    b164:	sub	sp, fp, #4
    b168:	ldr	fp, [sp]
    b16c:	add	sp, sp, #4
    b170:	pop	{pc}		; (ldr pc, [sp], #4)

0000b174 <MyGame_Example_Monster_vec_push_start>:
    b174:	str	fp, [sp, #-8]!
    b178:	str	lr, [sp, #4]
    b17c:	add	fp, sp, #4
    b180:	sub	sp, sp, #8
    b184:	str	r0, [fp, #-8]
    b188:	ldr	r0, [fp, #-8]
    b18c:	bl	8a5c <MyGame_Example_Monster_start>
    b190:	mov	r3, r0
    b194:	mov	r0, r3
    b198:	sub	sp, fp, #4
    b19c:	ldr	fp, [sp]
    b1a0:	add	sp, sp, #4
    b1a4:	pop	{pc}		; (ldr pc, [sp], #4)

0000b1a8 <MyGame_Example_Monster_vec_push_end>:
    b1a8:	str	fp, [sp, #-8]!
    b1ac:	str	lr, [sp, #4]
    b1b0:	add	fp, sp, #4
    b1b4:	sub	sp, sp, #8
    b1b8:	str	r0, [fp, #-8]
    b1bc:	ldr	r0, [fp, #-8]
    b1c0:	bl	8a94 <MyGame_Example_Monster_end>
    b1c4:	mov	r3, r0
    b1c8:	mov	r1, r3
    b1cc:	ldr	r0, [fp, #-8]
    b1d0:	bl	8b08 <MyGame_Example_Monster_vec_push>
    b1d4:	mov	r3, r0
    b1d8:	mov	r0, r3
    b1dc:	sub	sp, fp, #4
    b1e0:	ldr	fp, [sp]
    b1e4:	add	sp, sp, #4
    b1e8:	pop	{pc}		; (ldr pc, [sp], #4)

0000b1ec <MyGame_Example_Monster_start_as_root>:
    b1ec:	str	fp, [sp, #-8]!
    b1f0:	str	lr, [sp, #4]
    b1f4:	add	fp, sp, #4
    b1f8:	sub	sp, sp, #8
    b1fc:	str	r0, [fp, #-8]
    b200:	movw	r1, #0
    b204:	movt	r1, #0
    b208:	ldr	r0, [fp, #-8]
    b20c:	bl	7ca0 <flatbuffers_buffer_start>
    b210:	mov	r3, r0
    b214:	cmp	r3, #0
    b218:	bne	b22c <MyGame_Example_Monster_start_as_root+0x40>
    b21c:	ldr	r0, [fp, #-8]
    b220:	bl	8a5c <MyGame_Example_Monster_start>
    b224:	mov	r3, r0
    b228:	b	b230 <MyGame_Example_Monster_start_as_root+0x44>
    b22c:	mvn	r3, #0
    b230:	mov	r0, r3
    b234:	sub	sp, fp, #4
    b238:	ldr	fp, [sp]
    b23c:	add	sp, sp, #4
    b240:	pop	{pc}		; (ldr pc, [sp], #4)

0000b244 <MyGame_Example_Monster_start_as_root_with_size>:
    b244:	str	fp, [sp, #-8]!
    b248:	str	lr, [sp, #4]
    b24c:	add	fp, sp, #4
    b250:	sub	sp, sp, #8
    b254:	str	r0, [fp, #-8]
    b258:	movw	r1, #0
    b25c:	movt	r1, #0
    b260:	ldr	r0, [fp, #-8]
    b264:	bl	7ce4 <flatbuffers_buffer_start_with_size>
    b268:	mov	r3, r0
    b26c:	cmp	r3, #0
    b270:	bne	b284 <MyGame_Example_Monster_start_as_root_with_size+0x40>
    b274:	ldr	r0, [fp, #-8]
    b278:	bl	8a5c <MyGame_Example_Monster_start>
    b27c:	mov	r3, r0
    b280:	b	b288 <MyGame_Example_Monster_start_as_root_with_size+0x44>
    b284:	mvn	r3, #0
    b288:	mov	r0, r3
    b28c:	sub	sp, fp, #4
    b290:	ldr	fp, [sp]
    b294:	add	sp, sp, #4
    b298:	pop	{pc}		; (ldr pc, [sp], #4)

0000b29c <MyGame_Example_Monster_end_as_root>:
    b29c:	str	fp, [sp, #-8]!
    b2a0:	str	lr, [sp, #4]
    b2a4:	add	fp, sp, #4
    b2a8:	sub	sp, sp, #8
    b2ac:	str	r0, [fp, #-8]
    b2b0:	ldr	r0, [fp, #-8]
    b2b4:	bl	8a94 <MyGame_Example_Monster_end>
    b2b8:	mov	r3, r0
    b2bc:	mov	r1, r3
    b2c0:	ldr	r0, [fp, #-8]
    b2c4:	bl	7d28 <flatbuffers_buffer_end>
    b2c8:	mov	r3, r0
    b2cc:	mov	r0, r3
    b2d0:	sub	sp, fp, #4
    b2d4:	ldr	fp, [sp]
    b2d8:	add	sp, sp, #4
    b2dc:	pop	{pc}		; (ldr pc, [sp], #4)

0000b2e0 <MyGame_Example_TypeAliases_i8_add>:
    b2e0:	str	fp, [sp, #-8]!
    b2e4:	str	lr, [sp, #4]
    b2e8:	add	fp, sp, #4
    b2ec:	sub	sp, sp, #16
    b2f0:	str	r0, [fp, #-16]
    b2f4:	mov	r3, r1
    b2f8:	strb	r3, [fp, #-17]	; 0xffffffef
    b2fc:	ldrsb	r3, [fp, #-17]	; 0xffffffef
    b300:	cmp	r3, #0
    b304:	bne	b310 <MyGame_Example_TypeAliases_i8_add+0x30>
    b308:	mov	r3, #0
    b30c:	b	b350 <MyGame_Example_TypeAliases_i8_add+0x70>
    b310:	mov	r3, #1
    b314:	mov	r2, #1
    b318:	mov	r1, #0
    b31c:	ldr	r0, [fp, #-16]
    b320:	bl	0 <flatcc_builder_table_add>
    b324:	str	r0, [fp, #-8]
    b328:	ldr	r3, [fp, #-8]
    b32c:	cmp	r3, #0
    b330:	bne	b33c <MyGame_Example_TypeAliases_i8_add+0x5c>
    b334:	mvn	r3, #0
    b338:	b	b350 <MyGame_Example_TypeAliases_i8_add+0x70>
    b33c:	ldrsb	r3, [fp, #-17]	; 0xffffffef
    b340:	mov	r1, r3
    b344:	ldr	r0, [fp, #-8]
    b348:	bl	74e8 <flatbuffers_int8_assign_to_pe>
    b34c:	mov	r3, #0
    b350:	mov	r0, r3
    b354:	sub	sp, fp, #4
    b358:	ldr	fp, [sp]
    b35c:	add	sp, sp, #4
    b360:	pop	{pc}		; (ldr pc, [sp], #4)

0000b364 <MyGame_Example_TypeAliases_u8_add>:
    b364:	str	fp, [sp, #-8]!
    b368:	str	lr, [sp, #4]
    b36c:	add	fp, sp, #4
    b370:	sub	sp, sp, #16
    b374:	str	r0, [fp, #-16]
    b378:	mov	r3, r1
    b37c:	strb	r3, [fp, #-17]	; 0xffffffef
    b380:	ldrb	r3, [fp, #-17]	; 0xffffffef
    b384:	cmp	r3, #0
    b388:	bne	b394 <MyGame_Example_TypeAliases_u8_add+0x30>
    b38c:	mov	r3, #0
    b390:	b	b3d4 <MyGame_Example_TypeAliases_u8_add+0x70>
    b394:	mov	r3, #1
    b398:	mov	r2, #1
    b39c:	mov	r1, #1
    b3a0:	ldr	r0, [fp, #-16]
    b3a4:	bl	0 <flatcc_builder_table_add>
    b3a8:	str	r0, [fp, #-8]
    b3ac:	ldr	r3, [fp, #-8]
    b3b0:	cmp	r3, #0
    b3b4:	bne	b3c0 <MyGame_Example_TypeAliases_u8_add+0x5c>
    b3b8:	mvn	r3, #0
    b3bc:	b	b3d4 <MyGame_Example_TypeAliases_u8_add+0x70>
    b3c0:	ldrb	r3, [fp, #-17]	; 0xffffffef
    b3c4:	mov	r1, r3
    b3c8:	ldr	r0, [fp, #-8]
    b3cc:	bl	7440 <flatbuffers_uint8_assign_to_pe>
    b3d0:	mov	r3, #0
    b3d4:	mov	r0, r3
    b3d8:	sub	sp, fp, #4
    b3dc:	ldr	fp, [sp]
    b3e0:	add	sp, sp, #4
    b3e4:	pop	{pc}		; (ldr pc, [sp], #4)

0000b3e8 <MyGame_Example_TypeAliases_i16_add>:
    b3e8:	str	fp, [sp, #-8]!
    b3ec:	str	lr, [sp, #4]
    b3f0:	add	fp, sp, #4
    b3f4:	sub	sp, sp, #16
    b3f8:	str	r0, [fp, #-16]
    b3fc:	mov	r3, r1
    b400:	strh	r3, [fp, #-18]	; 0xffffffee
    b404:	ldrsh	r3, [fp, #-18]	; 0xffffffee
    b408:	cmp	r3, #0
    b40c:	bne	b418 <MyGame_Example_TypeAliases_i16_add+0x30>
    b410:	mov	r3, #0
    b414:	b	b458 <MyGame_Example_TypeAliases_i16_add+0x70>
    b418:	mov	r3, #2
    b41c:	mov	r2, #2
    b420:	mov	r1, #2
    b424:	ldr	r0, [fp, #-16]
    b428:	bl	0 <flatcc_builder_table_add>
    b42c:	str	r0, [fp, #-8]
    b430:	ldr	r3, [fp, #-8]
    b434:	cmp	r3, #0
    b438:	bne	b444 <MyGame_Example_TypeAliases_i16_add+0x5c>
    b43c:	mvn	r3, #0
    b440:	b	b458 <MyGame_Example_TypeAliases_i16_add+0x70>
    b444:	ldrsh	r3, [fp, #-18]	; 0xffffffee
    b448:	mov	r1, r3
    b44c:	ldr	r0, [fp, #-8]
    b450:	bl	7890 <flatbuffers_int16_assign_to_pe>
    b454:	mov	r3, #0
    b458:	mov	r0, r3
    b45c:	sub	sp, fp, #4
    b460:	ldr	fp, [sp]
    b464:	add	sp, sp, #4
    b468:	pop	{pc}		; (ldr pc, [sp], #4)

0000b46c <MyGame_Example_TypeAliases_u16_add>:
    b46c:	str	fp, [sp, #-8]!
    b470:	str	lr, [sp, #4]
    b474:	add	fp, sp, #4
    b478:	sub	sp, sp, #16
    b47c:	str	r0, [fp, #-16]
    b480:	mov	r3, r1
    b484:	strh	r3, [fp, #-18]	; 0xffffffee
    b488:	ldrh	r3, [fp, #-18]	; 0xffffffee
    b48c:	cmp	r3, #0
    b490:	bne	b49c <MyGame_Example_TypeAliases_u16_add+0x30>
    b494:	mov	r3, #0
    b498:	b	b4dc <MyGame_Example_TypeAliases_u16_add+0x70>
    b49c:	mov	r3, #2
    b4a0:	mov	r2, #2
    b4a4:	mov	r1, #3
    b4a8:	ldr	r0, [fp, #-16]
    b4ac:	bl	0 <flatcc_builder_table_add>
    b4b0:	str	r0, [fp, #-8]
    b4b4:	ldr	r3, [fp, #-8]
    b4b8:	cmp	r3, #0
    b4bc:	bne	b4c8 <MyGame_Example_TypeAliases_u16_add+0x5c>
    b4c0:	mvn	r3, #0
    b4c4:	b	b4dc <MyGame_Example_TypeAliases_u16_add+0x70>
    b4c8:	ldrh	r3, [fp, #-18]	; 0xffffffee
    b4cc:	mov	r1, r3
    b4d0:	ldr	r0, [fp, #-8]
    b4d4:	bl	7764 <flatbuffers_uint16_assign_to_pe>
    b4d8:	mov	r3, #0
    b4dc:	mov	r0, r3
    b4e0:	sub	sp, fp, #4
    b4e4:	ldr	fp, [sp]
    b4e8:	add	sp, sp, #4
    b4ec:	pop	{pc}		; (ldr pc, [sp], #4)

0000b4f0 <MyGame_Example_TypeAliases_i32_add>:
    b4f0:	str	fp, [sp, #-8]!
    b4f4:	str	lr, [sp, #4]
    b4f8:	add	fp, sp, #4
    b4fc:	sub	sp, sp, #16
    b500:	str	r0, [fp, #-16]
    b504:	str	r1, [fp, #-20]	; 0xffffffec
    b508:	ldr	r3, [fp, #-20]	; 0xffffffec
    b50c:	cmp	r3, #0
    b510:	bne	b51c <MyGame_Example_TypeAliases_i32_add+0x2c>
    b514:	mov	r3, #0
    b518:	b	b558 <MyGame_Example_TypeAliases_i32_add+0x68>
    b51c:	mov	r3, #4
    b520:	mov	r2, #4
    b524:	mov	r1, #4
    b528:	ldr	r0, [fp, #-16]
    b52c:	bl	0 <flatcc_builder_table_add>
    b530:	str	r0, [fp, #-8]
    b534:	ldr	r3, [fp, #-8]
    b538:	cmp	r3, #0
    b53c:	bne	b548 <MyGame_Example_TypeAliases_i32_add+0x58>
    b540:	mvn	r3, #0
    b544:	b	b558 <MyGame_Example_TypeAliases_i32_add+0x68>
    b548:	ldr	r1, [fp, #-20]	; 0xffffffec
    b54c:	ldr	r0, [fp, #-8]
    b550:	bl	78e0 <flatbuffers_int32_assign_to_pe>
    b554:	mov	r3, #0
    b558:	mov	r0, r3
    b55c:	sub	sp, fp, #4
    b560:	ldr	fp, [sp]
    b564:	add	sp, sp, #4
    b568:	pop	{pc}		; (ldr pc, [sp], #4)

0000b56c <MyGame_Example_TypeAliases_u32_add>:
    b56c:	str	fp, [sp, #-8]!
    b570:	str	lr, [sp, #4]
    b574:	add	fp, sp, #4
    b578:	sub	sp, sp, #16
    b57c:	str	r0, [fp, #-16]
    b580:	str	r1, [fp, #-20]	; 0xffffffec
    b584:	ldr	r3, [fp, #-20]	; 0xffffffec
    b588:	cmp	r3, #0
    b58c:	bne	b598 <MyGame_Example_TypeAliases_u32_add+0x2c>
    b590:	mov	r3, #0
    b594:	b	b5d4 <MyGame_Example_TypeAliases_u32_add+0x68>
    b598:	mov	r3, #4
    b59c:	mov	r2, #4
    b5a0:	mov	r1, #5
    b5a4:	ldr	r0, [fp, #-16]
    b5a8:	bl	0 <flatcc_builder_table_add>
    b5ac:	str	r0, [fp, #-8]
    b5b0:	ldr	r3, [fp, #-8]
    b5b4:	cmp	r3, #0
    b5b8:	bne	b5c4 <MyGame_Example_TypeAliases_u32_add+0x58>
    b5bc:	mvn	r3, #0
    b5c0:	b	b5d4 <MyGame_Example_TypeAliases_u32_add+0x68>
    b5c4:	ldr	r1, [fp, #-20]	; 0xffffffec
    b5c8:	ldr	r0, [fp, #-8]
    b5cc:	bl	77b4 <flatbuffers_uint32_assign_to_pe>
    b5d0:	mov	r3, #0
    b5d4:	mov	r0, r3
    b5d8:	sub	sp, fp, #4
    b5dc:	ldr	fp, [sp]
    b5e0:	add	sp, sp, #4
    b5e4:	pop	{pc}		; (ldr pc, [sp], #4)

0000b5e8 <MyGame_Example_TypeAliases_i64_add>:
    b5e8:	str	fp, [sp, #-8]!
    b5ec:	str	lr, [sp, #4]
    b5f0:	add	fp, sp, #4
    b5f4:	sub	sp, sp, #24
    b5f8:	str	r0, [fp, #-16]
    b5fc:	strd	r2, [fp, #-28]	; 0xffffffe4
    b600:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    b604:	orrs	r3, r2, r3
    b608:	bne	b614 <MyGame_Example_TypeAliases_i64_add+0x2c>
    b60c:	mov	r3, #0
    b610:	b	b650 <MyGame_Example_TypeAliases_i64_add+0x68>
    b614:	mov	r3, #8
    b618:	mov	r2, #8
    b61c:	mov	r1, #6
    b620:	ldr	r0, [fp, #-16]
    b624:	bl	0 <flatcc_builder_table_add>
    b628:	str	r0, [fp, #-8]
    b62c:	ldr	r3, [fp, #-8]
    b630:	cmp	r3, #0
    b634:	bne	b640 <MyGame_Example_TypeAliases_i64_add+0x58>
    b638:	mvn	r3, #0
    b63c:	b	b650 <MyGame_Example_TypeAliases_i64_add+0x68>
    b640:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    b644:	ldr	r0, [fp, #-8]
    b648:	bl	7924 <flatbuffers_int64_assign_to_pe>
    b64c:	mov	r3, #0
    b650:	mov	r0, r3
    b654:	sub	sp, fp, #4
    b658:	ldr	fp, [sp]
    b65c:	add	sp, sp, #4
    b660:	pop	{pc}		; (ldr pc, [sp], #4)

0000b664 <MyGame_Example_TypeAliases_u64_add>:
    b664:	str	fp, [sp, #-8]!
    b668:	str	lr, [sp, #4]
    b66c:	add	fp, sp, #4
    b670:	sub	sp, sp, #24
    b674:	str	r0, [fp, #-16]
    b678:	strd	r2, [fp, #-28]	; 0xffffffe4
    b67c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    b680:	orrs	r3, r2, r3
    b684:	bne	b690 <MyGame_Example_TypeAliases_u64_add+0x2c>
    b688:	mov	r3, #0
    b68c:	b	b6cc <MyGame_Example_TypeAliases_u64_add+0x68>
    b690:	mov	r3, #8
    b694:	mov	r2, #8
    b698:	mov	r1, #7
    b69c:	ldr	r0, [fp, #-16]
    b6a0:	bl	0 <flatcc_builder_table_add>
    b6a4:	str	r0, [fp, #-8]
    b6a8:	ldr	r3, [fp, #-8]
    b6ac:	cmp	r3, #0
    b6b0:	bne	b6bc <MyGame_Example_TypeAliases_u64_add+0x58>
    b6b4:	mvn	r3, #0
    b6b8:	b	b6cc <MyGame_Example_TypeAliases_u64_add+0x68>
    b6bc:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    b6c0:	ldr	r0, [fp, #-8]
    b6c4:	bl	77f8 <flatbuffers_uint64_assign_to_pe>
    b6c8:	mov	r3, #0
    b6cc:	mov	r0, r3
    b6d0:	sub	sp, fp, #4
    b6d4:	ldr	fp, [sp]
    b6d8:	add	sp, sp, #4
    b6dc:	pop	{pc}		; (ldr pc, [sp], #4)

0000b6e0 <MyGame_Example_TypeAliases_f32_add>:
    b6e0:	str	fp, [sp, #-8]!
    b6e4:	str	lr, [sp, #4]
    b6e8:	add	fp, sp, #4
    b6ec:	sub	sp, sp, #16
    b6f0:	str	r0, [fp, #-16]
    b6f4:	vstr	s0, [fp, #-20]	; 0xffffffec
    b6f8:	vldr	s15, [fp, #-20]	; 0xffffffec
    b6fc:	vcmp.f32	s15, #0.0
    b700:	vmrs	APSR_nzcv, fpscr
    b704:	bne	b710 <MyGame_Example_TypeAliases_f32_add+0x30>
    b708:	mov	r3, #0
    b70c:	b	b74c <MyGame_Example_TypeAliases_f32_add+0x6c>
    b710:	mov	r3, #4
    b714:	mov	r2, #4
    b718:	mov	r1, #8
    b71c:	ldr	r0, [fp, #-16]
    b720:	bl	0 <flatcc_builder_table_add>
    b724:	str	r0, [fp, #-8]
    b728:	ldr	r3, [fp, #-8]
    b72c:	cmp	r3, #0
    b730:	bne	b73c <MyGame_Example_TypeAliases_f32_add+0x5c>
    b734:	mvn	r3, #0
    b738:	b	b74c <MyGame_Example_TypeAliases_f32_add+0x6c>
    b73c:	vldr	s0, [fp, #-20]	; 0xffffffec
    b740:	ldr	r0, [fp, #-8]
    b744:	bl	79b8 <flatbuffers_float_assign_to_pe>
    b748:	mov	r3, #0
    b74c:	mov	r0, r3
    b750:	sub	sp, fp, #4
    b754:	ldr	fp, [sp]
    b758:	add	sp, sp, #4
    b75c:	pop	{pc}		; (ldr pc, [sp], #4)

0000b760 <MyGame_Example_TypeAliases_f64_add>:
    b760:	str	fp, [sp, #-8]!
    b764:	str	lr, [sp, #4]
    b768:	add	fp, sp, #4
    b76c:	sub	sp, sp, #24
    b770:	str	r0, [fp, #-16]
    b774:	vstr	d0, [fp, #-28]	; 0xffffffe4
    b778:	vldr	d7, [fp, #-28]	; 0xffffffe4
    b77c:	vcmp.f64	d7, #0.0
    b780:	vmrs	APSR_nzcv, fpscr
    b784:	bne	b790 <MyGame_Example_TypeAliases_f64_add+0x30>
    b788:	mov	r3, #0
    b78c:	b	b7cc <MyGame_Example_TypeAliases_f64_add+0x6c>
    b790:	mov	r3, #8
    b794:	mov	r2, #8
    b798:	mov	r1, #9
    b79c:	ldr	r0, [fp, #-16]
    b7a0:	bl	0 <flatcc_builder_table_add>
    b7a4:	str	r0, [fp, #-8]
    b7a8:	ldr	r3, [fp, #-8]
    b7ac:	cmp	r3, #0
    b7b0:	bne	b7bc <MyGame_Example_TypeAliases_f64_add+0x5c>
    b7b4:	mvn	r3, #0
    b7b8:	b	b7cc <MyGame_Example_TypeAliases_f64_add+0x6c>
    b7bc:	vldr	d0, [fp, #-28]	; 0xffffffe4
    b7c0:	ldr	r0, [fp, #-8]
    b7c4:	bl	7a48 <flatbuffers_double_assign_to_pe>
    b7c8:	mov	r3, #0
    b7cc:	mov	r0, r3
    b7d0:	sub	sp, fp, #4
    b7d4:	ldr	fp, [sp]
    b7d8:	add	sp, sp, #4
    b7dc:	pop	{pc}		; (ldr pc, [sp], #4)

0000b7e0 <MyGame_Example_TypeAliases_v8_add>:
    b7e0:	str	fp, [sp, #-8]!
    b7e4:	str	lr, [sp, #4]
    b7e8:	add	fp, sp, #4
    b7ec:	sub	sp, sp, #16
    b7f0:	str	r0, [fp, #-16]
    b7f4:	str	r1, [fp, #-20]	; 0xffffffec
    b7f8:	ldr	r3, [fp, #-20]	; 0xffffffec
    b7fc:	cmp	r3, #0
    b800:	beq	b834 <MyGame_Example_TypeAliases_v8_add+0x54>
    b804:	mov	r1, #10
    b808:	ldr	r0, [fp, #-16]
    b80c:	bl	0 <flatcc_builder_table_add_offset>
    b810:	str	r0, [fp, #-8]
    b814:	ldr	r3, [fp, #-8]
    b818:	cmp	r3, #0
    b81c:	beq	b834 <MyGame_Example_TypeAliases_v8_add+0x54>
    b820:	ldr	r3, [fp, #-8]
    b824:	ldr	r2, [fp, #-20]	; 0xffffffec
    b828:	str	r2, [r3]
    b82c:	mov	r3, #0
    b830:	b	b838 <MyGame_Example_TypeAliases_v8_add+0x58>
    b834:	mvn	r3, #0
    b838:	mov	r0, r3
    b83c:	sub	sp, fp, #4
    b840:	ldr	fp, [sp]
    b844:	add	sp, sp, #4
    b848:	pop	{pc}		; (ldr pc, [sp], #4)

0000b84c <MyGame_Example_TypeAliases_vf64_add>:
    b84c:	str	fp, [sp, #-8]!
    b850:	str	lr, [sp, #4]
    b854:	add	fp, sp, #4
    b858:	sub	sp, sp, #16
    b85c:	str	r0, [fp, #-16]
    b860:	str	r1, [fp, #-20]	; 0xffffffec
    b864:	ldr	r3, [fp, #-20]	; 0xffffffec
    b868:	cmp	r3, #0
    b86c:	beq	b8a0 <MyGame_Example_TypeAliases_vf64_add+0x54>
    b870:	mov	r1, #11
    b874:	ldr	r0, [fp, #-16]
    b878:	bl	0 <flatcc_builder_table_add_offset>
    b87c:	str	r0, [fp, #-8]
    b880:	ldr	r3, [fp, #-8]
    b884:	cmp	r3, #0
    b888:	beq	b8a0 <MyGame_Example_TypeAliases_vf64_add+0x54>
    b88c:	ldr	r3, [fp, #-8]
    b890:	ldr	r2, [fp, #-20]	; 0xffffffec
    b894:	str	r2, [r3]
    b898:	mov	r3, #0
    b89c:	b	b8a4 <MyGame_Example_TypeAliases_vf64_add+0x58>
    b8a0:	mvn	r3, #0
    b8a4:	mov	r0, r3
    b8a8:	sub	sp, fp, #4
    b8ac:	ldr	fp, [sp]
    b8b0:	add	sp, sp, #4
    b8b4:	pop	{pc}		; (ldr pc, [sp], #4)

0000b8b8 <MyGame_Example_TypeAliases_create>:
    b8b8:	str	fp, [sp, #-8]!
    b8bc:	str	lr, [sp, #4]
    b8c0:	add	fp, sp, #4
    b8c4:	sub	sp, sp, #24
    b8c8:	str	r0, [fp, #-8]
    b8cc:	mov	r0, r1
    b8d0:	mov	r1, r2
    b8d4:	mov	r2, r3
    b8d8:	vstr	s0, [fp, #-16]
    b8dc:	vstr	d1, [fp, #-28]	; 0xffffffe4
    b8e0:	mov	r3, r0
    b8e4:	strb	r3, [fp, #-9]
    b8e8:	mov	r3, r1
    b8ec:	strb	r3, [fp, #-10]
    b8f0:	mov	r3, r2
    b8f4:	strh	r3, [fp, #-12]
    b8f8:	ldr	r0, [fp, #-8]
    b8fc:	bl	8b58 <MyGame_Example_TypeAliases_start>
    b900:	mov	r3, r0
    b904:	cmp	r3, #0
    b908:	bne	ba3c <MyGame_Example_TypeAliases_create+0x184>
    b90c:	ldrd	r2, [fp, #20]
    b910:	ldr	r0, [fp, #-8]
    b914:	bl	b5e8 <MyGame_Example_TypeAliases_i64_add>
    b918:	mov	r3, r0
    b91c:	cmp	r3, #0
    b920:	bne	ba3c <MyGame_Example_TypeAliases_create+0x184>
    b924:	ldrd	r2, [fp, #28]
    b928:	ldr	r0, [fp, #-8]
    b92c:	bl	b664 <MyGame_Example_TypeAliases_u64_add>
    b930:	mov	r3, r0
    b934:	cmp	r3, #0
    b938:	bne	ba3c <MyGame_Example_TypeAliases_create+0x184>
    b93c:	vldr	d0, [fp, #-28]	; 0xffffffe4
    b940:	ldr	r0, [fp, #-8]
    b944:	bl	b760 <MyGame_Example_TypeAliases_f64_add>
    b948:	mov	r3, r0
    b94c:	cmp	r3, #0
    b950:	bne	ba3c <MyGame_Example_TypeAliases_create+0x184>
    b954:	ldr	r1, [fp, #8]
    b958:	ldr	r0, [fp, #-8]
    b95c:	bl	b4f0 <MyGame_Example_TypeAliases_i32_add>
    b960:	mov	r3, r0
    b964:	cmp	r3, #0
    b968:	bne	ba3c <MyGame_Example_TypeAliases_create+0x184>
    b96c:	ldr	r1, [fp, #12]
    b970:	ldr	r0, [fp, #-8]
    b974:	bl	b56c <MyGame_Example_TypeAliases_u32_add>
    b978:	mov	r3, r0
    b97c:	cmp	r3, #0
    b980:	bne	ba3c <MyGame_Example_TypeAliases_create+0x184>
    b984:	vldr	s0, [fp, #-16]
    b988:	ldr	r0, [fp, #-8]
    b98c:	bl	b6e0 <MyGame_Example_TypeAliases_f32_add>
    b990:	mov	r3, r0
    b994:	cmp	r3, #0
    b998:	bne	ba3c <MyGame_Example_TypeAliases_create+0x184>
    b99c:	ldr	r1, [fp, #36]	; 0x24
    b9a0:	ldr	r0, [fp, #-8]
    b9a4:	bl	b7e0 <MyGame_Example_TypeAliases_v8_add>
    b9a8:	mov	r3, r0
    b9ac:	cmp	r3, #0
    b9b0:	bne	ba3c <MyGame_Example_TypeAliases_create+0x184>
    b9b4:	ldr	r1, [fp, #40]	; 0x28
    b9b8:	ldr	r0, [fp, #-8]
    b9bc:	bl	b84c <MyGame_Example_TypeAliases_vf64_add>
    b9c0:	mov	r3, r0
    b9c4:	cmp	r3, #0
    b9c8:	bne	ba3c <MyGame_Example_TypeAliases_create+0x184>
    b9cc:	ldrsh	r3, [fp, #-12]
    b9d0:	mov	r1, r3
    b9d4:	ldr	r0, [fp, #-8]
    b9d8:	bl	b3e8 <MyGame_Example_TypeAliases_i16_add>
    b9dc:	mov	r3, r0
    b9e0:	cmp	r3, #0
    b9e4:	bne	ba3c <MyGame_Example_TypeAliases_create+0x184>
    b9e8:	ldrh	r3, [fp, #4]
    b9ec:	mov	r1, r3
    b9f0:	ldr	r0, [fp, #-8]
    b9f4:	bl	b46c <MyGame_Example_TypeAliases_u16_add>
    b9f8:	mov	r3, r0
    b9fc:	cmp	r3, #0
    ba00:	bne	ba3c <MyGame_Example_TypeAliases_create+0x184>
    ba04:	ldrsb	r3, [fp, #-9]
    ba08:	mov	r1, r3
    ba0c:	ldr	r0, [fp, #-8]
    ba10:	bl	b2e0 <MyGame_Example_TypeAliases_i8_add>
    ba14:	mov	r3, r0
    ba18:	cmp	r3, #0
    ba1c:	bne	ba3c <MyGame_Example_TypeAliases_create+0x184>
    ba20:	ldrb	r3, [fp, #-10]
    ba24:	mov	r1, r3
    ba28:	ldr	r0, [fp, #-8]
    ba2c:	bl	b364 <MyGame_Example_TypeAliases_u8_add>
    ba30:	mov	r3, r0
    ba34:	cmp	r3, #0
    ba38:	beq	ba44 <MyGame_Example_TypeAliases_create+0x18c>
    ba3c:	mov	r3, #0
    ba40:	b	ba50 <MyGame_Example_TypeAliases_create+0x198>
    ba44:	ldr	r0, [fp, #-8]
    ba48:	bl	8b90 <MyGame_Example_TypeAliases_end>
    ba4c:	mov	r3, r0
    ba50:	mov	r0, r3
    ba54:	sub	sp, fp, #4
    ba58:	ldr	fp, [sp]
    ba5c:	add	sp, sp, #4
    ba60:	pop	{pc}		; (ldr pc, [sp], #4)

0000ba64 <MyGame_Example_TypeAliases_create_as_root>:
    ba64:	str	fp, [sp, #-8]!
    ba68:	str	lr, [sp, #4]
    ba6c:	add	fp, sp, #4
    ba70:	sub	sp, sp, #64	; 0x40
    ba74:	str	r0, [fp, #-8]
    ba78:	mov	r0, r1
    ba7c:	mov	r1, r2
    ba80:	mov	r2, r3
    ba84:	vstr	s0, [fp, #-16]
    ba88:	vstr	d1, [fp, #-28]	; 0xffffffe4
    ba8c:	mov	r3, r0
    ba90:	strb	r3, [fp, #-9]
    ba94:	mov	r3, r1
    ba98:	strb	r3, [fp, #-10]
    ba9c:	mov	r3, r2
    baa0:	strh	r3, [fp, #-12]
    baa4:	movw	r1, #0
    baa8:	movt	r1, #0
    baac:	ldr	r0, [fp, #-8]
    bab0:	bl	7ca0 <flatbuffers_buffer_start>
    bab4:	mov	r3, r0
    bab8:	cmp	r3, #0
    babc:	beq	bac8 <MyGame_Example_TypeAliases_create_as_root+0x64>
    bac0:	mov	r3, #0
    bac4:	b	bb38 <MyGame_Example_TypeAliases_create_as_root+0xd4>
    bac8:	ldrsh	ip, [fp, #-12]
    bacc:	ldrb	r0, [fp, #-10]
    bad0:	ldrsb	r1, [fp, #-9]
    bad4:	ldr	r3, [fp, #40]	; 0x28
    bad8:	str	r3, [sp, #36]	; 0x24
    badc:	ldr	r3, [fp, #36]	; 0x24
    bae0:	str	r3, [sp, #32]
    bae4:	ldrd	r2, [fp, #28]
    bae8:	strd	r2, [sp, #24]
    baec:	ldrd	r2, [fp, #20]
    baf0:	strd	r2, [sp, #16]
    baf4:	ldr	r3, [fp, #12]
    baf8:	str	r3, [sp, #8]
    bafc:	ldr	r3, [fp, #8]
    bb00:	str	r3, [sp, #4]
    bb04:	ldrh	r3, [fp, #4]
    bb08:	str	r3, [sp]
    bb0c:	vldr	d1, [fp, #-28]	; 0xffffffe4
    bb10:	vldr	s0, [fp, #-16]
    bb14:	mov	r3, ip
    bb18:	mov	r2, r0
    bb1c:	ldr	r0, [fp, #-8]
    bb20:	bl	b8b8 <MyGame_Example_TypeAliases_create>
    bb24:	mov	r3, r0
    bb28:	mov	r1, r3
    bb2c:	ldr	r0, [fp, #-8]
    bb30:	bl	7d28 <flatbuffers_buffer_end>
    bb34:	mov	r3, r0
    bb38:	mov	r0, r3
    bb3c:	sub	sp, fp, #4
    bb40:	ldr	fp, [sp]
    bb44:	add	sp, sp, #4
    bb48:	pop	{pc}		; (ldr pc, [sp], #4)

0000bb4c <Fantasy_Attacker_sword_attack_damage_add>:
    bb4c:	str	fp, [sp, #-8]!
    bb50:	str	lr, [sp, #4]
    bb54:	add	fp, sp, #4
    bb58:	sub	sp, sp, #16
    bb5c:	str	r0, [fp, #-16]
    bb60:	str	r1, [fp, #-20]	; 0xffffffec
    bb64:	ldr	r3, [fp, #-20]	; 0xffffffec
    bb68:	cmp	r3, #0
    bb6c:	bne	bb78 <Fantasy_Attacker_sword_attack_damage_add+0x2c>
    bb70:	mov	r3, #0
    bb74:	b	bbb4 <Fantasy_Attacker_sword_attack_damage_add+0x68>
    bb78:	mov	r3, #4
    bb7c:	mov	r2, #4
    bb80:	mov	r1, #0
    bb84:	ldr	r0, [fp, #-16]
    bb88:	bl	0 <flatcc_builder_table_add>
    bb8c:	str	r0, [fp, #-8]
    bb90:	ldr	r3, [fp, #-8]
    bb94:	cmp	r3, #0
    bb98:	bne	bba4 <Fantasy_Attacker_sword_attack_damage_add+0x58>
    bb9c:	mvn	r3, #0
    bba0:	b	bbb4 <Fantasy_Attacker_sword_attack_damage_add+0x68>
    bba4:	ldr	r1, [fp, #-20]	; 0xffffffec
    bba8:	ldr	r0, [fp, #-8]
    bbac:	bl	78e0 <flatbuffers_int32_assign_to_pe>
    bbb0:	mov	r3, #0
    bbb4:	mov	r0, r3
    bbb8:	sub	sp, fp, #4
    bbbc:	ldr	fp, [sp]
    bbc0:	add	sp, sp, #4
    bbc4:	pop	{pc}		; (ldr pc, [sp], #4)

0000bbc8 <Fantasy_Attacker_create>:
    bbc8:	str	fp, [sp, #-8]!
    bbcc:	str	lr, [sp, #4]
    bbd0:	add	fp, sp, #4
    bbd4:	sub	sp, sp, #8
    bbd8:	str	r0, [fp, #-8]
    bbdc:	str	r1, [fp, #-12]
    bbe0:	ldr	r0, [fp, #-8]
    bbe4:	bl	8c04 <Fantasy_Attacker_start>
    bbe8:	mov	r3, r0
    bbec:	cmp	r3, #0
    bbf0:	bne	bc0c <Fantasy_Attacker_create+0x44>
    bbf4:	ldr	r1, [fp, #-12]
    bbf8:	ldr	r0, [fp, #-8]
    bbfc:	bl	bb4c <Fantasy_Attacker_sword_attack_damage_add>
    bc00:	mov	r3, r0
    bc04:	cmp	r3, #0
    bc08:	beq	bc14 <Fantasy_Attacker_create+0x4c>
    bc0c:	mov	r3, #0
    bc10:	b	bc20 <Fantasy_Attacker_create+0x58>
    bc14:	ldr	r0, [fp, #-8]
    bc18:	bl	8c3c <Fantasy_Attacker_end>
    bc1c:	mov	r3, r0
    bc20:	mov	r0, r3
    bc24:	sub	sp, fp, #4
    bc28:	ldr	fp, [sp]
    bc2c:	add	sp, sp, #4
    bc30:	pop	{pc}		; (ldr pc, [sp], #4)

0000bc34 <Fantasy_Movie_main_character_add>:
    bc34:	str	fp, [sp, #-8]!
    bc38:	str	lr, [sp, #4]
    bc3c:	add	fp, sp, #4
    bc40:	sub	sp, sp, #24
    bc44:	str	r0, [fp, #-16]
    bc48:	sub	r3, fp, #24
    bc4c:	stm	r3, {r1, r2}
    bc50:	ldrb	r3, [fp, #-24]	; 0xffffffe8
    bc54:	cmp	r3, #0
    bc58:	bne	bc64 <Fantasy_Movie_main_character_add+0x30>
    bc5c:	mov	r3, #0
    bc60:	b	bcdc <Fantasy_Movie_main_character_add+0xa8>
    bc64:	ldr	r3, [fp, #-20]	; 0xffffffec
    bc68:	cmp	r3, #0
    bc6c:	bne	bc78 <Fantasy_Movie_main_character_add+0x44>
    bc70:	mvn	r3, #0
    bc74:	b	bcdc <Fantasy_Movie_main_character_add+0xa8>
    bc78:	mov	r3, #1
    bc7c:	mov	r2, #1
    bc80:	mov	r1, #0
    bc84:	ldr	r0, [fp, #-16]
    bc88:	bl	0 <flatcc_builder_table_add>
    bc8c:	str	r0, [fp, #-8]
    bc90:	ldr	r3, [fp, #-8]
    bc94:	cmp	r3, #0
    bc98:	beq	bcb8 <Fantasy_Movie_main_character_add+0x84>
    bc9c:	mov	r1, #1
    bca0:	ldr	r0, [fp, #-16]
    bca4:	bl	0 <flatcc_builder_table_add_offset>
    bca8:	str	r0, [fp, #-12]
    bcac:	ldr	r3, [fp, #-12]
    bcb0:	cmp	r3, #0
    bcb4:	bne	bcc0 <Fantasy_Movie_main_character_add+0x8c>
    bcb8:	mvn	r3, #0
    bcbc:	b	bcdc <Fantasy_Movie_main_character_add+0xa8>
    bcc0:	ldrb	r2, [fp, #-24]	; 0xffffffe8
    bcc4:	ldr	r3, [fp, #-8]
    bcc8:	strb	r2, [r3]
    bccc:	ldr	r2, [fp, #-20]	; 0xffffffec
    bcd0:	ldr	r3, [fp, #-12]
    bcd4:	str	r2, [r3]
    bcd8:	mov	r3, #0
    bcdc:	mov	r0, r3
    bce0:	sub	sp, fp, #4
    bce4:	ldr	fp, [sp]
    bce8:	add	sp, sp, #4
    bcec:	pop	{pc}		; (ldr pc, [sp], #4)

0000bcf0 <Fantasy_Movie_main_character_Rapunzel_create>:
    bcf0:	str	fp, [sp, #-8]!
    bcf4:	str	lr, [sp, #4]
    bcf8:	add	fp, sp, #4
    bcfc:	sub	sp, sp, #24
    bd00:	str	r0, [fp, #-24]	; 0xffffffe8
    bd04:	mov	r3, r1
    bd08:	strh	r3, [fp, #-26]	; 0xffffffe6
    bd0c:	ldrh	r3, [fp, #-26]	; 0xffffffe6
    bd10:	mov	r1, r3
    bd14:	ldr	r0, [fp, #-24]	; 0xffffffe8
    bd18:	bl	85f8 <Fantasy_Rapunzel_create>
    bd1c:	str	r0, [fp, #-8]
    bd20:	ldr	r3, [fp, #-8]
    bd24:	cmp	r3, #0
    bd28:	beq	bd54 <Fantasy_Movie_main_character_Rapunzel_create+0x64>
    bd2c:	sub	r3, fp, #16
    bd30:	ldr	r1, [fp, #-8]
    bd34:	mov	r0, r3
    bd38:	bl	8f30 <Fantasy_Character_as_Rapunzel>
    bd3c:	sub	r3, fp, #16
    bd40:	ldm	r3, {r1, r2}
    bd44:	ldr	r0, [fp, #-24]	; 0xffffffe8
    bd48:	bl	bc34 <Fantasy_Movie_main_character_add>
    bd4c:	mov	r3, r0
    bd50:	b	bd58 <Fantasy_Movie_main_character_Rapunzel_create+0x68>
    bd54:	mvn	r3, #0
    bd58:	mov	r0, r3
    bd5c:	sub	sp, fp, #4
    bd60:	ldr	fp, [sp]
    bd64:	add	sp, sp, #4
    bd68:	pop	{pc}		; (ldr pc, [sp], #4)

0000bd6c <Fantasy_Movie_antagonist_add>:
    bd6c:	str	fp, [sp, #-8]!
    bd70:	str	lr, [sp, #4]
    bd74:	add	fp, sp, #4
    bd78:	sub	sp, sp, #24
    bd7c:	str	r0, [fp, #-16]
    bd80:	sub	r3, fp, #24
    bd84:	stm	r3, {r1, r2}
    bd88:	ldrb	r3, [fp, #-24]	; 0xffffffe8
    bd8c:	cmp	r3, #0
    bd90:	bne	bd9c <Fantasy_Movie_antagonist_add+0x30>
    bd94:	mov	r3, #0
    bd98:	b	be14 <Fantasy_Movie_antagonist_add+0xa8>
    bd9c:	ldr	r3, [fp, #-20]	; 0xffffffec
    bda0:	cmp	r3, #0
    bda4:	bne	bdb0 <Fantasy_Movie_antagonist_add+0x44>
    bda8:	mvn	r3, #0
    bdac:	b	be14 <Fantasy_Movie_antagonist_add+0xa8>
    bdb0:	mov	r3, #1
    bdb4:	mov	r2, #1
    bdb8:	mov	r1, #2
    bdbc:	ldr	r0, [fp, #-16]
    bdc0:	bl	0 <flatcc_builder_table_add>
    bdc4:	str	r0, [fp, #-8]
    bdc8:	ldr	r3, [fp, #-8]
    bdcc:	cmp	r3, #0
    bdd0:	beq	bdf0 <Fantasy_Movie_antagonist_add+0x84>
    bdd4:	mov	r1, #3
    bdd8:	ldr	r0, [fp, #-16]
    bddc:	bl	0 <flatcc_builder_table_add_offset>
    bde0:	str	r0, [fp, #-12]
    bde4:	ldr	r3, [fp, #-12]
    bde8:	cmp	r3, #0
    bdec:	bne	bdf8 <Fantasy_Movie_antagonist_add+0x8c>
    bdf0:	mvn	r3, #0
    bdf4:	b	be14 <Fantasy_Movie_antagonist_add+0xa8>
    bdf8:	ldrb	r2, [fp, #-24]	; 0xffffffe8
    bdfc:	ldr	r3, [fp, #-8]
    be00:	strb	r2, [r3]
    be04:	ldr	r2, [fp, #-20]	; 0xffffffec
    be08:	ldr	r3, [fp, #-12]
    be0c:	str	r2, [r3]
    be10:	mov	r3, #0
    be14:	mov	r0, r3
    be18:	sub	sp, fp, #4
    be1c:	ldr	fp, [sp]
    be20:	add	sp, sp, #4
    be24:	pop	{pc}		; (ldr pc, [sp], #4)

0000be28 <Fantasy_Movie_antagonist_MuLan_add>:
    be28:	str	fp, [sp, #-8]!
    be2c:	str	lr, [sp, #4]
    be30:	add	fp, sp, #4
    be34:	sub	sp, sp, #16
    be38:	str	r0, [fp, #-16]
    be3c:	str	r1, [fp, #-20]	; 0xffffffec
    be40:	sub	r3, fp, #12
    be44:	ldr	r1, [fp, #-20]	; 0xffffffec
    be48:	mov	r0, r3
    be4c:	bl	8ee8 <Fantasy_Character_as_MuLan>
    be50:	sub	r3, fp, #12
    be54:	ldm	r3, {r1, r2}
    be58:	ldr	r0, [fp, #-16]
    be5c:	bl	bd6c <Fantasy_Movie_antagonist_add>
    be60:	mov	r3, r0
    be64:	mov	r0, r3
    be68:	sub	sp, fp, #4
    be6c:	ldr	fp, [sp]
    be70:	add	sp, sp, #4
    be74:	pop	{pc}		; (ldr pc, [sp], #4)

0000be78 <Fantasy_Movie_side_kick_add>:
    be78:	str	fp, [sp, #-8]!
    be7c:	str	lr, [sp, #4]
    be80:	add	fp, sp, #4
    be84:	sub	sp, sp, #24
    be88:	str	r0, [fp, #-16]
    be8c:	sub	r3, fp, #24
    be90:	stm	r3, {r1, r2}
    be94:	ldrb	r3, [fp, #-24]	; 0xffffffe8
    be98:	cmp	r3, #0
    be9c:	bne	bea8 <Fantasy_Movie_side_kick_add+0x30>
    bea0:	mov	r3, #0
    bea4:	b	bf20 <Fantasy_Movie_side_kick_add+0xa8>
    bea8:	ldr	r3, [fp, #-20]	; 0xffffffec
    beac:	cmp	r3, #0
    beb0:	bne	bebc <Fantasy_Movie_side_kick_add+0x44>
    beb4:	mvn	r3, #0
    beb8:	b	bf20 <Fantasy_Movie_side_kick_add+0xa8>
    bebc:	mov	r3, #1
    bec0:	mov	r2, #1
    bec4:	mov	r1, #4
    bec8:	ldr	r0, [fp, #-16]
    becc:	bl	0 <flatcc_builder_table_add>
    bed0:	str	r0, [fp, #-8]
    bed4:	ldr	r3, [fp, #-8]
    bed8:	cmp	r3, #0
    bedc:	beq	befc <Fantasy_Movie_side_kick_add+0x84>
    bee0:	mov	r1, #5
    bee4:	ldr	r0, [fp, #-16]
    bee8:	bl	0 <flatcc_builder_table_add_offset>
    beec:	str	r0, [fp, #-12]
    bef0:	ldr	r3, [fp, #-12]
    bef4:	cmp	r3, #0
    bef8:	bne	bf04 <Fantasy_Movie_side_kick_add+0x8c>
    befc:	mvn	r3, #0
    bf00:	b	bf20 <Fantasy_Movie_side_kick_add+0xa8>
    bf04:	ldrb	r2, [fp, #-24]	; 0xffffffe8
    bf08:	ldr	r3, [fp, #-8]
    bf0c:	strb	r2, [r3]
    bf10:	ldr	r2, [fp, #-20]	; 0xffffffec
    bf14:	ldr	r3, [fp, #-12]
    bf18:	str	r2, [r3]
    bf1c:	mov	r3, #0
    bf20:	mov	r0, r3
    bf24:	sub	sp, fp, #4
    bf28:	ldr	fp, [sp]
    bf2c:	add	sp, sp, #4
    bf30:	pop	{pc}		; (ldr pc, [sp], #4)

0000bf34 <Fantasy_Movie_side_kick_Other_add>:
    bf34:	str	fp, [sp, #-8]!
    bf38:	str	lr, [sp, #4]
    bf3c:	add	fp, sp, #4
    bf40:	sub	sp, sp, #16
    bf44:	str	r0, [fp, #-16]
    bf48:	str	r1, [fp, #-20]	; 0xffffffec
    bf4c:	sub	r3, fp, #12
    bf50:	ldr	r1, [fp, #-20]	; 0xffffffec
    bf54:	mov	r0, r3
    bf58:	bl	8fc0 <Fantasy_Character_as_Other>
    bf5c:	sub	r3, fp, #12
    bf60:	ldm	r3, {r1, r2}
    bf64:	ldr	r0, [fp, #-16]
    bf68:	bl	be78 <Fantasy_Movie_side_kick_add>
    bf6c:	mov	r3, r0
    bf70:	mov	r0, r3
    bf74:	sub	sp, fp, #4
    bf78:	ldr	fp, [sp]
    bf7c:	add	sp, sp, #4
    bf80:	pop	{pc}		; (ldr pc, [sp], #4)

0000bf84 <Fantasy_Movie_side_kick_Other_create_str>:
    bf84:	str	fp, [sp, #-8]!
    bf88:	str	lr, [sp, #4]
    bf8c:	add	fp, sp, #4
    bf90:	sub	sp, sp, #8
    bf94:	str	r0, [fp, #-8]
    bf98:	str	r1, [fp, #-12]
    bf9c:	ldr	r1, [fp, #-12]
    bfa0:	ldr	r0, [fp, #-8]
    bfa4:	bl	0 <flatcc_builder_create_string_str>
    bfa8:	mov	r3, r0
    bfac:	mov	r1, r3
    bfb0:	ldr	r0, [fp, #-8]
    bfb4:	bl	bf34 <Fantasy_Movie_side_kick_Other_add>
    bfb8:	mov	r3, r0
    bfbc:	mov	r0, r3
    bfc0:	sub	sp, fp, #4
    bfc4:	ldr	fp, [sp]
    bfc8:	add	sp, sp, #4
    bfcc:	pop	{pc}		; (ldr pc, [sp], #4)

0000bfd0 <Fantasy_Movie_cameo_add>:
    bfd0:	str	fp, [sp, #-8]!
    bfd4:	str	lr, [sp, #4]
    bfd8:	add	fp, sp, #4
    bfdc:	sub	sp, sp, #24
    bfe0:	str	r0, [fp, #-16]
    bfe4:	sub	r3, fp, #24
    bfe8:	stm	r3, {r1, r2}
    bfec:	ldrb	r3, [fp, #-24]	; 0xffffffe8
    bff0:	cmp	r3, #0
    bff4:	bne	c000 <Fantasy_Movie_cameo_add+0x30>
    bff8:	mov	r3, #0
    bffc:	b	c078 <Fantasy_Movie_cameo_add+0xa8>
    c000:	ldr	r3, [fp, #-20]	; 0xffffffec
    c004:	cmp	r3, #0
    c008:	bne	c014 <Fantasy_Movie_cameo_add+0x44>
    c00c:	mvn	r3, #0
    c010:	b	c078 <Fantasy_Movie_cameo_add+0xa8>
    c014:	mov	r3, #1
    c018:	mov	r2, #1
    c01c:	mov	r1, #6
    c020:	ldr	r0, [fp, #-16]
    c024:	bl	0 <flatcc_builder_table_add>
    c028:	str	r0, [fp, #-8]
    c02c:	ldr	r3, [fp, #-8]
    c030:	cmp	r3, #0
    c034:	beq	c054 <Fantasy_Movie_cameo_add+0x84>
    c038:	mov	r1, #7
    c03c:	ldr	r0, [fp, #-16]
    c040:	bl	0 <flatcc_builder_table_add_offset>
    c044:	str	r0, [fp, #-12]
    c048:	ldr	r3, [fp, #-12]
    c04c:	cmp	r3, #0
    c050:	bne	c05c <Fantasy_Movie_cameo_add+0x8c>
    c054:	mvn	r3, #0
    c058:	b	c078 <Fantasy_Movie_cameo_add+0xa8>
    c05c:	ldrb	r2, [fp, #-24]	; 0xffffffe8
    c060:	ldr	r3, [fp, #-8]
    c064:	strb	r2, [r3]
    c068:	ldr	r2, [fp, #-20]	; 0xffffffec
    c06c:	ldr	r3, [fp, #-12]
    c070:	str	r2, [r3]
    c074:	mov	r3, #0
    c078:	mov	r0, r3
    c07c:	sub	sp, fp, #4
    c080:	ldr	fp, [sp]
    c084:	add	sp, sp, #4
    c088:	pop	{pc}		; (ldr pc, [sp], #4)

0000c08c <Fantasy_Movie_cameo_Rapunzel_add>:
    c08c:	str	fp, [sp, #-8]!
    c090:	str	lr, [sp, #4]
    c094:	add	fp, sp, #4
    c098:	sub	sp, sp, #16
    c09c:	str	r0, [fp, #-16]
    c0a0:	str	r1, [fp, #-20]	; 0xffffffec
    c0a4:	sub	r3, fp, #12
    c0a8:	ldr	r1, [fp, #-20]	; 0xffffffec
    c0ac:	mov	r0, r3
    c0b0:	bl	8f30 <Fantasy_Character_as_Rapunzel>
    c0b4:	sub	r3, fp, #12
    c0b8:	ldm	r3, {r1, r2}
    c0bc:	ldr	r0, [fp, #-16]
    c0c0:	bl	bfd0 <Fantasy_Movie_cameo_add>
    c0c4:	mov	r3, r0
    c0c8:	mov	r0, r3
    c0cc:	sub	sp, fp, #4
    c0d0:	ldr	fp, [sp]
    c0d4:	add	sp, sp, #4
    c0d8:	pop	{pc}		; (ldr pc, [sp], #4)

0000c0dc <Fantasy_Movie_characters_add>:
    c0dc:	str	fp, [sp, #-8]!
    c0e0:	str	lr, [sp, #4]
    c0e4:	add	fp, sp, #4
    c0e8:	sub	sp, sp, #24
    c0ec:	str	r0, [fp, #-16]
    c0f0:	sub	r3, fp, #24
    c0f4:	stm	r3, {r1, r2}
    c0f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c0fc:	cmp	r3, #0
    c100:	beq	c110 <Fantasy_Movie_characters_add+0x34>
    c104:	ldr	r3, [fp, #-20]	; 0xffffffec
    c108:	cmp	r3, #0
    c10c:	bne	c130 <Fantasy_Movie_characters_add+0x54>
    c110:	ldr	r2, [fp, #-24]	; 0xffffffe8
    c114:	ldr	r3, [fp, #-20]	; 0xffffffec
    c118:	cmp	r2, r3
    c11c:	bne	c128 <Fantasy_Movie_characters_add+0x4c>
    c120:	mov	r3, #0
    c124:	b	c194 <Fantasy_Movie_characters_add+0xb8>
    c128:	mvn	r3, #0
    c12c:	b	c194 <Fantasy_Movie_characters_add+0xb8>
    c130:	mov	r1, #8
    c134:	ldr	r0, [fp, #-16]
    c138:	bl	0 <flatcc_builder_table_add_offset>
    c13c:	str	r0, [fp, #-8]
    c140:	ldr	r3, [fp, #-8]
    c144:	cmp	r3, #0
    c148:	bne	c154 <Fantasy_Movie_characters_add+0x78>
    c14c:	mvn	r3, #0
    c150:	b	c194 <Fantasy_Movie_characters_add+0xb8>
    c154:	ldr	r2, [fp, #-24]	; 0xffffffe8
    c158:	ldr	r3, [fp, #-8]
    c15c:	str	r2, [r3]
    c160:	mov	r1, #9
    c164:	ldr	r0, [fp, #-16]
    c168:	bl	0 <flatcc_builder_table_add_offset>
    c16c:	str	r0, [fp, #-8]
    c170:	ldr	r3, [fp, #-8]
    c174:	cmp	r3, #0
    c178:	bne	c184 <Fantasy_Movie_characters_add+0xa8>
    c17c:	mvn	r3, #0
    c180:	b	c194 <Fantasy_Movie_characters_add+0xb8>
    c184:	ldr	r2, [fp, #-20]	; 0xffffffec
    c188:	ldr	r3, [fp, #-8]
    c18c:	str	r2, [r3]
    c190:	mov	r3, #0
    c194:	mov	r0, r3
    c198:	sub	sp, fp, #4
    c19c:	ldr	fp, [sp]
    c1a0:	add	sp, sp, #4
    c1a4:	pop	{pc}		; (ldr pc, [sp], #4)

0000c1a8 <Fantasy_Movie_characters_start>:
    c1a8:	str	fp, [sp, #-8]!
    c1ac:	str	lr, [sp, #4]
    c1b0:	add	fp, sp, #4
    c1b4:	sub	sp, sp, #8
    c1b8:	str	r0, [fp, #-8]
    c1bc:	ldr	r0, [fp, #-8]
    c1c0:	bl	0 <flatcc_builder_start_union_vector>
    c1c4:	mov	r3, r0
    c1c8:	mov	r0, r3
    c1cc:	sub	sp, fp, #4
    c1d0:	ldr	fp, [sp]
    c1d4:	add	sp, sp, #4
    c1d8:	pop	{pc}		; (ldr pc, [sp], #4)

0000c1dc <Fantasy_Movie_characters_end>:
    c1dc:	str	fp, [sp, #-8]!
    c1e0:	str	lr, [sp, #4]
    c1e4:	add	fp, sp, #4
    c1e8:	sub	sp, sp, #16
    c1ec:	str	r0, [fp, #-16]
    c1f0:	sub	r3, fp, #12
    c1f4:	ldr	r1, [fp, #-16]
    c1f8:	mov	r0, r3
    c1fc:	bl	0 <flatcc_builder_end_union_vector>
    c200:	sub	r3, fp, #12
    c204:	ldm	r3, {r1, r2}
    c208:	ldr	r0, [fp, #-16]
    c20c:	bl	c0dc <Fantasy_Movie_characters_add>
    c210:	mov	r3, r0
    c214:	mov	r0, r3
    c218:	sub	sp, fp, #4
    c21c:	ldr	fp, [sp]
    c220:	add	sp, sp, #4
    c224:	pop	{pc}		; (ldr pc, [sp], #4)

0000c228 <Fantasy_Movie_characters_push>:
    c228:	str	fp, [sp, #-8]!
    c22c:	str	lr, [sp, #4]
    c230:	add	fp, sp, #4
    c234:	sub	sp, sp, #16
    c238:	str	r0, [fp, #-8]
    c23c:	sub	r3, fp, #16
    c240:	stm	r3, {r1, r2}
    c244:	sub	r3, fp, #16
    c248:	ldm	r3, {r1, r2}
    c24c:	ldr	r0, [fp, #-8]
    c250:	bl	0 <flatcc_builder_union_vector_push>
    c254:	mov	r3, r0
    c258:	mov	r0, r3
    c25c:	sub	sp, fp, #4
    c260:	ldr	fp, [sp]
    c264:	add	sp, sp, #4
    c268:	pop	{pc}		; (ldr pc, [sp], #4)

0000c26c <Fantasy_Movie_characters_MuLan_push>:
    c26c:	str	fp, [sp, #-8]!
    c270:	str	lr, [sp, #4]
    c274:	add	fp, sp, #4
    c278:	sub	sp, sp, #16
    c27c:	str	r0, [fp, #-16]
    c280:	str	r1, [fp, #-20]	; 0xffffffec
    c284:	sub	r3, fp, #12
    c288:	ldr	r1, [fp, #-20]	; 0xffffffec
    c28c:	mov	r0, r3
    c290:	bl	8ee8 <Fantasy_Character_as_MuLan>
    c294:	sub	r3, fp, #12
    c298:	ldm	r3, {r1, r2}
    c29c:	ldr	r0, [fp, #-16]
    c2a0:	bl	9008 <Fantasy_Character_vec_push>
    c2a4:	mov	r3, r0
    c2a8:	mov	r0, r3
    c2ac:	sub	sp, fp, #4
    c2b0:	ldr	fp, [sp]
    c2b4:	add	sp, sp, #4
    c2b8:	pop	{pc}		; (ldr pc, [sp], #4)

0000c2bc <Fantasy_Movie_characters_MuLan_push_create>:
    c2bc:	str	fp, [sp, #-8]!
    c2c0:	str	lr, [sp, #4]
    c2c4:	add	fp, sp, #4
    c2c8:	sub	sp, sp, #16
    c2cc:	str	r0, [fp, #-16]
    c2d0:	str	r1, [fp, #-20]	; 0xffffffec
    c2d4:	ldr	r1, [fp, #-20]	; 0xffffffec
    c2d8:	ldr	r0, [fp, #-16]
    c2dc:	bl	bbc8 <Fantasy_Attacker_create>
    c2e0:	mov	r2, r0
    c2e4:	sub	r3, fp, #12
    c2e8:	mov	r1, r2
    c2ec:	mov	r0, r3
    c2f0:	bl	8ee8 <Fantasy_Character_as_MuLan>
    c2f4:	sub	r3, fp, #12
    c2f8:	ldm	r3, {r1, r2}
    c2fc:	ldr	r0, [fp, #-16]
    c300:	bl	9008 <Fantasy_Character_vec_push>
    c304:	mov	r3, r0
    c308:	mov	r0, r3
    c30c:	sub	sp, fp, #4
    c310:	ldr	fp, [sp]
    c314:	add	sp, sp, #4
    c318:	pop	{pc}		; (ldr pc, [sp], #4)

0000c31c <Fantasy_Movie_characters_Belle_push_start>:
    c31c:	str	fp, [sp, #-8]!
    c320:	str	lr, [sp, #4]
    c324:	add	fp, sp, #4
    c328:	sub	sp, sp, #8
    c32c:	str	r0, [fp, #-8]
    c330:	ldr	r0, [fp, #-8]
    c334:	bl	86a4 <Fantasy_BookReader_start>
    c338:	mov	r3, r0
    c33c:	mov	r0, r3
    c340:	sub	sp, fp, #4
    c344:	ldr	fp, [sp]
    c348:	add	sp, sp, #4
    c34c:	pop	{pc}		; (ldr pc, [sp], #4)

0000c350 <Fantasy_Movie_characters_Belle_push_end>:
    c350:	str	fp, [sp, #-8]!
    c354:	str	lr, [sp, #4]
    c358:	add	fp, sp, #4
    c35c:	sub	sp, sp, #16
    c360:	str	r0, [fp, #-16]
    c364:	ldr	r0, [fp, #-16]
    c368:	bl	86e0 <Fantasy_BookReader_end>
    c36c:	mov	r2, r0
    c370:	sub	r3, fp, #12
    c374:	mov	r1, r2
    c378:	mov	r0, r3
    c37c:	bl	8f78 <Fantasy_Character_as_Belle>
    c380:	sub	r3, fp, #12
    c384:	ldm	r3, {r1, r2}
    c388:	ldr	r0, [fp, #-16]
    c38c:	bl	9008 <Fantasy_Character_vec_push>
    c390:	mov	r3, r0
    c394:	mov	r0, r3
    c398:	sub	sp, fp, #4
    c39c:	ldr	fp, [sp]
    c3a0:	add	sp, sp, #4
    c3a4:	pop	{pc}		; (ldr pc, [sp], #4)

0000c3a8 <Fantasy_Movie_characters_Belle_push>:
    c3a8:	str	fp, [sp, #-8]!
    c3ac:	str	lr, [sp, #4]
    c3b0:	add	fp, sp, #4
    c3b4:	sub	sp, sp, #16
    c3b8:	str	r0, [fp, #-16]
    c3bc:	str	r1, [fp, #-20]	; 0xffffffec
    c3c0:	sub	r3, fp, #12
    c3c4:	ldr	r1, [fp, #-20]	; 0xffffffec
    c3c8:	mov	r0, r3
    c3cc:	bl	8f78 <Fantasy_Character_as_Belle>
    c3d0:	sub	r3, fp, #12
    c3d4:	ldm	r3, {r1, r2}
    c3d8:	ldr	r0, [fp, #-16]
    c3dc:	bl	9008 <Fantasy_Character_vec_push>
    c3e0:	mov	r3, r0
    c3e4:	mov	r0, r3
    c3e8:	sub	sp, fp, #4
    c3ec:	ldr	fp, [sp]
    c3f0:	add	sp, sp, #4
    c3f4:	pop	{pc}		; (ldr pc, [sp], #4)

0000c3f8 <Fantasy_Movie_characters_Belle_push_create>:
    c3f8:	str	fp, [sp, #-8]!
    c3fc:	str	lr, [sp, #4]
    c400:	add	fp, sp, #4
    c404:	sub	sp, sp, #16
    c408:	str	r0, [fp, #-16]
    c40c:	str	r1, [fp, #-20]	; 0xffffffec
    c410:	ldr	r1, [fp, #-20]	; 0xffffffec
    c414:	ldr	r0, [fp, #-16]
    c418:	bl	8748 <Fantasy_BookReader_create>
    c41c:	mov	r2, r0
    c420:	sub	r3, fp, #12
    c424:	mov	r1, r2
    c428:	mov	r0, r3
    c42c:	bl	8f78 <Fantasy_Character_as_Belle>
    c430:	sub	r3, fp, #12
    c434:	ldm	r3, {r1, r2}
    c438:	ldr	r0, [fp, #-16]
    c43c:	bl	9008 <Fantasy_Character_vec_push>
    c440:	mov	r3, r0
    c444:	mov	r0, r3
    c448:	sub	sp, fp, #4
    c44c:	ldr	fp, [sp]
    c450:	add	sp, sp, #4
    c454:	pop	{pc}		; (ldr pc, [sp], #4)

0000c458 <Fantasy_Movie_characters_Other_push>:
    c458:	str	fp, [sp, #-8]!
    c45c:	str	lr, [sp, #4]
    c460:	add	fp, sp, #4
    c464:	sub	sp, sp, #16
    c468:	str	r0, [fp, #-16]
    c46c:	str	r1, [fp, #-20]	; 0xffffffec
    c470:	sub	r3, fp, #12
    c474:	ldr	r1, [fp, #-20]	; 0xffffffec
    c478:	mov	r0, r3
    c47c:	bl	8fc0 <Fantasy_Character_as_Other>
    c480:	sub	r3, fp, #12
    c484:	ldm	r3, {r1, r2}
    c488:	ldr	r0, [fp, #-16]
    c48c:	bl	9008 <Fantasy_Character_vec_push>
    c490:	mov	r3, r0
    c494:	mov	r0, r3
    c498:	sub	sp, fp, #4
    c49c:	ldr	fp, [sp]
    c4a0:	add	sp, sp, #4
    c4a4:	pop	{pc}		; (ldr pc, [sp], #4)

0000c4a8 <Fantasy_Movie_characters_Other_push_create_str>:
    c4a8:	str	fp, [sp, #-8]!
    c4ac:	str	lr, [sp, #4]
    c4b0:	add	fp, sp, #4
    c4b4:	sub	sp, sp, #16
    c4b8:	str	r0, [fp, #-16]
    c4bc:	str	r1, [fp, #-20]	; 0xffffffec
    c4c0:	ldr	r1, [fp, #-20]	; 0xffffffec
    c4c4:	ldr	r0, [fp, #-16]
    c4c8:	bl	7b28 <flatbuffers_string_create_str>
    c4cc:	mov	r2, r0
    c4d0:	sub	r3, fp, #12
    c4d4:	mov	r1, r2
    c4d8:	mov	r0, r3
    c4dc:	bl	8fc0 <Fantasy_Character_as_Other>
    c4e0:	sub	r3, fp, #12
    c4e4:	ldm	r3, {r1, r2}
    c4e8:	ldr	r0, [fp, #-16]
    c4ec:	bl	9008 <Fantasy_Character_vec_push>
    c4f0:	mov	r3, r0
    c4f4:	mov	r0, r3
    c4f8:	sub	sp, fp, #4
    c4fc:	ldr	fp, [sp]
    c500:	add	sp, sp, #4
    c504:	pop	{pc}		; (ldr pc, [sp], #4)

0000c508 <Fantasy_Movie_start_as_root>:
    c508:	str	fp, [sp, #-8]!
    c50c:	str	lr, [sp, #4]
    c510:	add	fp, sp, #4
    c514:	sub	sp, sp, #8
    c518:	str	r0, [fp, #-8]
    c51c:	movw	r1, #0
    c520:	movt	r1, #0
    c524:	ldr	r0, [fp, #-8]
    c528:	bl	7ca0 <flatbuffers_buffer_start>
    c52c:	mov	r3, r0
    c530:	cmp	r3, #0
    c534:	bne	c548 <Fantasy_Movie_start_as_root+0x40>
    c538:	ldr	r0, [fp, #-8]
    c53c:	bl	8cb0 <Fantasy_Movie_start>
    c540:	mov	r3, r0
    c544:	b	c54c <Fantasy_Movie_start_as_root+0x44>
    c548:	mvn	r3, #0
    c54c:	mov	r0, r3
    c550:	sub	sp, fp, #4
    c554:	ldr	fp, [sp]
    c558:	add	sp, sp, #4
    c55c:	pop	{pc}		; (ldr pc, [sp], #4)

0000c560 <Fantasy_Movie_end_as_root>:
    c560:	str	fp, [sp, #-8]!
    c564:	str	lr, [sp, #4]
    c568:	add	fp, sp, #4
    c56c:	sub	sp, sp, #8
    c570:	str	r0, [fp, #-8]
    c574:	ldr	r0, [fp, #-8]
    c578:	bl	8ce8 <Fantasy_Movie_end>
    c57c:	mov	r3, r0
    c580:	mov	r1, r3
    c584:	ldr	r0, [fp, #-8]
    c588:	bl	7d28 <flatbuffers_buffer_end>
    c58c:	mov	r3, r0
    c590:	mov	r0, r3
    c594:	sub	sp, fp, #4
    c598:	ldr	fp, [sp]
    c59c:	add	sp, sp, #4
    c5a0:	pop	{pc}		; (ldr pc, [sp], #4)

0000c5a4 <MyGame_Example_Foo_union_verifier>:
    c5a4:	str	fp, [sp, #-8]!
    c5a8:	str	lr, [sp, #4]
    c5ac:	add	fp, sp, #4
    c5b0:	sub	sp, sp, #8
    c5b4:	str	r0, [fp, #-8]
    c5b8:	ldr	r3, [fp, #-8]
    c5bc:	ldrb	r3, [r3, #12]
    c5c0:	cmp	r3, #1
    c5c4:	bne	c5e0 <MyGame_Example_Foo_union_verifier+0x3c>
    c5c8:	movw	r1, #0
    c5cc:	movt	r1, #0
    c5d0:	ldr	r0, [fp, #-8]
    c5d4:	bl	0 <flatcc_verify_union_table>
    c5d8:	mov	r3, r0
    c5dc:	b	c5e4 <MyGame_Example_Foo_union_verifier+0x40>
    c5e0:	mov	r3, #0
    c5e4:	mov	r0, r3
    c5e8:	sub	sp, fp, #4
    c5ec:	ldr	fp, [sp]
    c5f0:	add	sp, sp, #4
    c5f4:	pop	{pc}		; (ldr pc, [sp], #4)

0000c5f8 <MyGame_Example_Any_union_verifier>:
    c5f8:	str	fp, [sp, #-8]!
    c5fc:	str	lr, [sp, #4]
    c600:	add	fp, sp, #4
    c604:	sub	sp, sp, #8
    c608:	str	r0, [fp, #-8]
    c60c:	ldr	r3, [fp, #-8]
    c610:	ldrb	r3, [r3, #12]
    c614:	sub	r3, r3, #1
    c618:	cmp	r3, #3
    c61c:	ldrls	pc, [pc, r3, lsl #2]
    c620:	b	c694 <MyGame_Example_Any_union_verifier+0x9c>
    c624:	.word	0x0000c634
    c628:	.word	0x0000c64c
    c62c:	.word	0x0000c664
    c630:	.word	0x0000c67c
    c634:	movw	r1, #0
    c638:	movt	r1, #0
    c63c:	ldr	r0, [fp, #-8]
    c640:	bl	0 <flatcc_verify_union_table>
    c644:	mov	r3, r0
    c648:	b	c698 <MyGame_Example_Any_union_verifier+0xa0>
    c64c:	movw	r1, #0
    c650:	movt	r1, #0
    c654:	ldr	r0, [fp, #-8]
    c658:	bl	0 <flatcc_verify_union_table>
    c65c:	mov	r3, r0
    c660:	b	c698 <MyGame_Example_Any_union_verifier+0xa0>
    c664:	movw	r1, #0
    c668:	movt	r1, #0
    c66c:	ldr	r0, [fp, #-8]
    c670:	bl	0 <flatcc_verify_union_table>
    c674:	mov	r3, r0
    c678:	b	c698 <MyGame_Example_Any_union_verifier+0xa0>
    c67c:	movw	r1, #0
    c680:	movt	r1, #0
    c684:	ldr	r0, [fp, #-8]
    c688:	bl	0 <flatcc_verify_union_table>
    c68c:	mov	r3, r0
    c690:	b	c698 <MyGame_Example_Any_union_verifier+0xa0>
    c694:	mov	r3, #0
    c698:	mov	r0, r3
    c69c:	sub	sp, fp, #4
    c6a0:	ldr	fp, [sp]
    c6a4:	add	sp, sp, #4
    c6a8:	pop	{pc}		; (ldr pc, [sp], #4)

0000c6ac <Fantasy_Character_union_verifier>:
    c6ac:	str	fp, [sp, #-8]!
    c6b0:	str	lr, [sp, #4]
    c6b4:	add	fp, sp, #4
    c6b8:	sub	sp, sp, #8
    c6bc:	str	r0, [fp, #-8]
    c6c0:	ldr	r3, [fp, #-8]
    c6c4:	ldrb	r3, [r3, #12]
    c6c8:	cmp	r3, #9
    c6cc:	beq	c738 <Fantasy_Character_union_verifier+0x8c>
    c6d0:	cmp	r3, #9
    c6d4:	bgt	c6ec <Fantasy_Character_union_verifier+0x40>
    c6d8:	cmp	r3, #2
    c6dc:	beq	c708 <Fantasy_Character_union_verifier+0x5c>
    c6e0:	cmp	r3, #8
    c6e4:	beq	c720 <Fantasy_Character_union_verifier+0x74>
    c6e8:	b	c788 <Fantasy_Character_union_verifier+0xdc>
    c6ec:	cmp	r3, #11
    c6f0:	beq	c768 <Fantasy_Character_union_verifier+0xbc>
    c6f4:	cmp	r3, #11
    c6f8:	blt	c750 <Fantasy_Character_union_verifier+0xa4>
    c6fc:	cmp	r3, #255	; 0xff
    c700:	beq	c778 <Fantasy_Character_union_verifier+0xcc>
    c704:	b	c788 <Fantasy_Character_union_verifier+0xdc>
    c708:	movw	r1, #0
    c70c:	movt	r1, #0
    c710:	ldr	r0, [fp, #-8]
    c714:	bl	0 <flatcc_verify_union_table>
    c718:	mov	r3, r0
    c71c:	b	c78c <Fantasy_Character_union_verifier+0xe0>
    c720:	mov	r2, #2
    c724:	mov	r1, #2
    c728:	ldr	r0, [fp, #-8]
    c72c:	bl	0 <flatcc_verify_union_struct>
    c730:	mov	r3, r0
    c734:	b	c78c <Fantasy_Character_union_verifier+0xe0>
    c738:	mov	r2, #4
    c73c:	mov	r1, #4
    c740:	ldr	r0, [fp, #-8]
    c744:	bl	0 <flatcc_verify_union_struct>
    c748:	mov	r3, r0
    c74c:	b	c78c <Fantasy_Character_union_verifier+0xe0>
    c750:	mov	r2, #4
    c754:	mov	r1, #4
    c758:	ldr	r0, [fp, #-8]
    c75c:	bl	0 <flatcc_verify_union_struct>
    c760:	mov	r3, r0
    c764:	b	c78c <Fantasy_Character_union_verifier+0xe0>
    c768:	ldr	r0, [fp, #-8]
    c76c:	bl	0 <flatcc_verify_union_string>
    c770:	mov	r3, r0
    c774:	b	c78c <Fantasy_Character_union_verifier+0xe0>
    c778:	ldr	r0, [fp, #-8]
    c77c:	bl	0 <flatcc_verify_union_string>
    c780:	mov	r3, r0
    c784:	b	c78c <Fantasy_Character_union_verifier+0xe0>
    c788:	mov	r3, #0
    c78c:	mov	r0, r3
    c790:	sub	sp, fp, #4
    c794:	ldr	fp, [sp]
    c798:	add	sp, sp, #4
    c79c:	pop	{pc}		; (ldr pc, [sp], #4)

0000c7a0 <MyGame_Example_Vec3_verify_as_typed_root>:
    c7a0:	str	fp, [sp, #-8]!
    c7a4:	str	lr, [sp, #4]
    c7a8:	add	fp, sp, #4
    c7ac:	sub	sp, sp, #16
    c7b0:	str	r0, [fp, #-8]
    c7b4:	str	r1, [fp, #-12]
    c7b8:	mov	r3, #16
    c7bc:	str	r3, [sp]
    c7c0:	mov	r3, #32
    c7c4:	movw	r2, #16082	; 0x3ed2
    c7c8:	movt	r2, #43253	; 0xa8f5
    c7cc:	ldr	r1, [fp, #-12]
    c7d0:	ldr	r0, [fp, #-8]
    c7d4:	bl	0 <flatcc_verify_struct_as_typed_root>
    c7d8:	mov	r3, r0
    c7dc:	mov	r0, r3
    c7e0:	sub	sp, fp, #4
    c7e4:	ldr	fp, [sp]
    c7e8:	add	sp, sp, #4
    c7ec:	pop	{pc}		; (ldr pc, [sp], #4)

0000c7f0 <MyGame_Example_Vec3_verify_as_root_with_type_hash>:
    c7f0:	str	fp, [sp, #-8]!
    c7f4:	str	lr, [sp, #4]
    c7f8:	add	fp, sp, #4
    c7fc:	sub	sp, sp, #24
    c800:	str	r0, [fp, #-8]
    c804:	str	r1, [fp, #-12]
    c808:	str	r2, [fp, #-16]
    c80c:	mov	r3, #16
    c810:	str	r3, [sp]
    c814:	mov	r3, #32
    c818:	ldr	r2, [fp, #-16]
    c81c:	ldr	r1, [fp, #-12]
    c820:	ldr	r0, [fp, #-8]
    c824:	bl	0 <flatcc_verify_struct_as_typed_root>
    c828:	mov	r3, r0
    c82c:	mov	r0, r3
    c830:	sub	sp, fp, #4
    c834:	ldr	fp, [sp]
    c838:	add	sp, sp, #4
    c83c:	pop	{pc}		; (ldr pc, [sp], #4)

0000c840 <MyGame_InParentNamespace_verify_table>:
    c840:	push	{fp}		; (str fp, [sp, #-4]!)
    c844:	add	fp, sp, #0
    c848:	sub	sp, sp, #12
    c84c:	str	r0, [fp, #-8]
    c850:	mov	r3, #0
    c854:	mov	r0, r3
    c858:	add	sp, fp, #0
    c85c:	pop	{fp}		; (ldr fp, [sp], #4)
    c860:	bx	lr

0000c864 <MyGame_Example2_Monster_verify_table>:
    c864:	push	{fp}		; (str fp, [sp, #-4]!)
    c868:	add	fp, sp, #0
    c86c:	sub	sp, sp, #12
    c870:	str	r0, [fp, #-8]
    c874:	mov	r3, #0
    c878:	mov	r0, r3
    c87c:	add	sp, fp, #0
    c880:	pop	{fp}		; (ldr fp, [sp], #4)
    c884:	bx	lr

0000c888 <MyGame_Example_emptytable_verify_table>:
    c888:	push	{fp}		; (str fp, [sp, #-4]!)
    c88c:	add	fp, sp, #0
    c890:	sub	sp, sp, #12
    c894:	str	r0, [fp, #-8]
    c898:	mov	r3, #0
    c89c:	mov	r0, r3
    c8a0:	add	sp, fp, #0
    c8a4:	pop	{fp}		; (ldr fp, [sp], #4)
    c8a8:	bx	lr

0000c8ac <MyGame_Example_with_emptystruct_verify_table>:
    c8ac:	str	fp, [sp, #-8]!
    c8b0:	str	lr, [sp, #4]
    c8b4:	add	fp, sp, #4
    c8b8:	sub	sp, sp, #16
    c8bc:	str	r0, [fp, #-16]
    c8c0:	mov	r3, #1
    c8c4:	mov	r2, #0
    c8c8:	mov	r1, #0
    c8cc:	ldr	r0, [fp, #-16]
    c8d0:	bl	0 <flatcc_verify_field>
    c8d4:	str	r0, [fp, #-8]
    c8d8:	ldr	r3, [fp, #-8]
    c8dc:	cmp	r3, #0
    c8e0:	beq	c8ec <MyGame_Example_with_emptystruct_verify_table+0x40>
    c8e4:	ldr	r3, [fp, #-8]
    c8e8:	b	c8f0 <MyGame_Example_with_emptystruct_verify_table+0x44>
    c8ec:	mov	r3, #0
    c8f0:	mov	r0, r3
    c8f4:	sub	sp, fp, #4
    c8f8:	ldr	fp, [sp]
    c8fc:	add	sp, sp, #4
    c900:	pop	{pc}		; (ldr pc, [sp], #4)

0000c904 <MyGame_Example_with_emptystruct_verify_as_typed_root>:
    c904:	str	fp, [sp, #-8]!
    c908:	str	lr, [sp, #4]
    c90c:	add	fp, sp, #4
    c910:	sub	sp, sp, #8
    c914:	str	r0, [fp, #-8]
    c918:	str	r1, [fp, #-12]
    c91c:	movw	r3, #0
    c920:	movt	r3, #0
    c924:	movw	r2, #0
    c928:	movt	r2, #0
    c92c:	ldr	r1, [fp, #-12]
    c930:	ldr	r0, [fp, #-8]
    c934:	bl	0 <flatcc_verify_table_as_root>
    c938:	mov	r3, r0
    c93c:	mov	r0, r3
    c940:	sub	sp, fp, #4
    c944:	ldr	fp, [sp]
    c948:	add	sp, sp, #4
    c94c:	pop	{pc}		; (ldr pc, [sp], #4)

0000c950 <MyGame_Example_with_emptystruct_verify_as_root_with_identifier>:
    c950:	str	fp, [sp, #-8]!
    c954:	str	lr, [sp, #4]
    c958:	add	fp, sp, #4
    c95c:	sub	sp, sp, #16
    c960:	str	r0, [fp, #-8]
    c964:	str	r1, [fp, #-12]
    c968:	str	r2, [fp, #-16]
    c96c:	movw	r3, #0
    c970:	movt	r3, #0
    c974:	ldr	r2, [fp, #-16]
    c978:	ldr	r1, [fp, #-12]
    c97c:	ldr	r0, [fp, #-8]
    c980:	bl	0 <flatcc_verify_table_as_root>
    c984:	mov	r3, r0
    c988:	mov	r0, r3
    c98c:	sub	sp, fp, #4
    c990:	ldr	fp, [sp]
    c994:	add	sp, sp, #4
    c998:	pop	{pc}		; (ldr pc, [sp], #4)

0000c99c <MyGame_Example_with_emptystruct_verify_as_root_with_type_hash>:
    c99c:	str	fp, [sp, #-8]!
    c9a0:	str	lr, [sp, #4]
    c9a4:	add	fp, sp, #4
    c9a8:	sub	sp, sp, #16
    c9ac:	str	r0, [fp, #-8]
    c9b0:	str	r1, [fp, #-12]
    c9b4:	str	r2, [fp, #-16]
    c9b8:	movw	r3, #0
    c9bc:	movt	r3, #0
    c9c0:	ldr	r2, [fp, #-16]
    c9c4:	ldr	r1, [fp, #-12]
    c9c8:	ldr	r0, [fp, #-8]
    c9cc:	bl	0 <flatcc_verify_table_as_typed_root>
    c9d0:	mov	r3, r0
    c9d4:	mov	r0, r3
    c9d8:	sub	sp, fp, #4
    c9dc:	ldr	fp, [sp]
    c9e0:	add	sp, sp, #4
    c9e4:	pop	{pc}		; (ldr pc, [sp], #4)

0000c9e8 <MyGame_Example_TestSimpleTableWithEnum_verify_table>:
    c9e8:	str	fp, [sp, #-8]!
    c9ec:	str	lr, [sp, #4]
    c9f0:	add	fp, sp, #4
    c9f4:	sub	sp, sp, #16
    c9f8:	str	r0, [fp, #-16]
    c9fc:	mov	r3, #1
    ca00:	mov	r2, #1
    ca04:	mov	r1, #0
    ca08:	ldr	r0, [fp, #-16]
    ca0c:	bl	0 <flatcc_verify_field>
    ca10:	str	r0, [fp, #-8]
    ca14:	ldr	r3, [fp, #-8]
    ca18:	cmp	r3, #0
    ca1c:	beq	ca28 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x40>
    ca20:	ldr	r3, [fp, #-8]
    ca24:	b	cab0 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xc8>
    ca28:	mov	r3, #1
    ca2c:	mov	r2, #1
    ca30:	mov	r1, #1
    ca34:	ldr	r0, [fp, #-16]
    ca38:	bl	0 <flatcc_verify_field>
    ca3c:	str	r0, [fp, #-8]
    ca40:	ldr	r3, [fp, #-8]
    ca44:	cmp	r3, #0
    ca48:	beq	ca54 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x6c>
    ca4c:	ldr	r3, [fp, #-8]
    ca50:	b	cab0 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xc8>
    ca54:	mov	r3, #1
    ca58:	mov	r2, #1
    ca5c:	mov	r1, #2
    ca60:	ldr	r0, [fp, #-16]
    ca64:	bl	0 <flatcc_verify_field>
    ca68:	str	r0, [fp, #-8]
    ca6c:	ldr	r3, [fp, #-8]
    ca70:	cmp	r3, #0
    ca74:	beq	ca80 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x98>
    ca78:	ldr	r3, [fp, #-8]
    ca7c:	b	cab0 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xc8>
    ca80:	mov	r3, #1
    ca84:	mov	r2, #1
    ca88:	mov	r1, #3
    ca8c:	ldr	r0, [fp, #-16]
    ca90:	bl	0 <flatcc_verify_field>
    ca94:	str	r0, [fp, #-8]
    ca98:	ldr	r3, [fp, #-8]
    ca9c:	cmp	r3, #0
    caa0:	beq	caac <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xc4>
    caa4:	ldr	r3, [fp, #-8]
    caa8:	b	cab0 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xc8>
    caac:	mov	r3, #0
    cab0:	mov	r0, r3
    cab4:	sub	sp, fp, #4
    cab8:	ldr	fp, [sp]
    cabc:	add	sp, sp, #4
    cac0:	pop	{pc}		; (ldr pc, [sp], #4)

0000cac4 <MyGame_Example_TestInclude_verify_table>:
    cac4:	str	fp, [sp, #-8]!
    cac8:	str	lr, [sp, #4]
    cacc:	add	fp, sp, #4
    cad0:	sub	sp, sp, #16
    cad4:	str	r0, [fp, #-16]
    cad8:	mov	r3, #1
    cadc:	mov	r2, #0
    cae0:	mov	r1, #0
    cae4:	ldr	r0, [fp, #-16]
    cae8:	bl	0 <flatcc_verify_field>
    caec:	str	r0, [fp, #-8]
    caf0:	ldr	r3, [fp, #-8]
    caf4:	cmp	r3, #0
    caf8:	beq	cb04 <MyGame_Example_TestInclude_verify_table+0x40>
    cafc:	ldr	r3, [fp, #-8]
    cb00:	b	cbe4 <MyGame_Example_TestInclude_verify_table+0x120>
    cb04:	mov	r3, #8
    cb08:	mov	r2, #8
    cb0c:	mov	r1, #1
    cb10:	ldr	r0, [fp, #-16]
    cb14:	bl	0 <flatcc_verify_field>
    cb18:	str	r0, [fp, #-8]
    cb1c:	ldr	r3, [fp, #-8]
    cb20:	cmp	r3, #0
    cb24:	beq	cb30 <MyGame_Example_TestInclude_verify_table+0x6c>
    cb28:	ldr	r3, [fp, #-8]
    cb2c:	b	cbe4 <MyGame_Example_TestInclude_verify_table+0x120>
    cb30:	mov	r3, #8
    cb34:	mov	r2, #8
    cb38:	mov	r1, #2
    cb3c:	ldr	r0, [fp, #-16]
    cb40:	bl	0 <flatcc_verify_field>
    cb44:	str	r0, [fp, #-8]
    cb48:	ldr	r3, [fp, #-8]
    cb4c:	cmp	r3, #0
    cb50:	beq	cb5c <MyGame_Example_TestInclude_verify_table+0x98>
    cb54:	ldr	r3, [fp, #-8]
    cb58:	b	cbe4 <MyGame_Example_TestInclude_verify_table+0x120>
    cb5c:	mov	r3, #4
    cb60:	mov	r2, #4
    cb64:	mov	r1, #3
    cb68:	ldr	r0, [fp, #-16]
    cb6c:	bl	0 <flatcc_verify_field>
    cb70:	str	r0, [fp, #-8]
    cb74:	ldr	r3, [fp, #-8]
    cb78:	cmp	r3, #0
    cb7c:	beq	cb88 <MyGame_Example_TestInclude_verify_table+0xc4>
    cb80:	ldr	r3, [fp, #-8]
    cb84:	b	cbe4 <MyGame_Example_TestInclude_verify_table+0x120>
    cb88:	mov	r3, #8
    cb8c:	mov	r2, #8
    cb90:	mov	r1, #4
    cb94:	ldr	r0, [fp, #-16]
    cb98:	bl	0 <flatcc_verify_field>
    cb9c:	str	r0, [fp, #-8]
    cba0:	ldr	r3, [fp, #-8]
    cba4:	cmp	r3, #0
    cba8:	beq	cbb4 <MyGame_Example_TestInclude_verify_table+0xf0>
    cbac:	ldr	r3, [fp, #-8]
    cbb0:	b	cbe4 <MyGame_Example_TestInclude_verify_table+0x120>
    cbb4:	mov	r3, #8
    cbb8:	mov	r2, #8
    cbbc:	mov	r1, #5
    cbc0:	ldr	r0, [fp, #-16]
    cbc4:	bl	0 <flatcc_verify_field>
    cbc8:	str	r0, [fp, #-8]
    cbcc:	ldr	r3, [fp, #-8]
    cbd0:	cmp	r3, #0
    cbd4:	beq	cbe0 <MyGame_Example_TestInclude_verify_table+0x11c>
    cbd8:	ldr	r3, [fp, #-8]
    cbdc:	b	cbe4 <MyGame_Example_TestInclude_verify_table+0x120>
    cbe0:	mov	r3, #0
    cbe4:	mov	r0, r3
    cbe8:	sub	sp, fp, #4
    cbec:	ldr	fp, [sp]
    cbf0:	add	sp, sp, #4
    cbf4:	pop	{pc}		; (ldr pc, [sp], #4)

0000cbf8 <MyGame_Example_Stat_verify_table>:
    cbf8:	str	fp, [sp, #-8]!
    cbfc:	str	lr, [sp, #4]
    cc00:	add	fp, sp, #4
    cc04:	sub	sp, sp, #16
    cc08:	str	r0, [fp, #-16]
    cc0c:	mov	r2, #0
    cc10:	mov	r1, #0
    cc14:	ldr	r0, [fp, #-16]
    cc18:	bl	0 <flatcc_verify_string_field>
    cc1c:	str	r0, [fp, #-8]
    cc20:	ldr	r3, [fp, #-8]
    cc24:	cmp	r3, #0
    cc28:	beq	cc34 <MyGame_Example_Stat_verify_table+0x3c>
    cc2c:	ldr	r3, [fp, #-8]
    cc30:	b	cc90 <MyGame_Example_Stat_verify_table+0x98>
    cc34:	mov	r3, #8
    cc38:	mov	r2, #8
    cc3c:	mov	r1, #1
    cc40:	ldr	r0, [fp, #-16]
    cc44:	bl	0 <flatcc_verify_field>
    cc48:	str	r0, [fp, #-8]
    cc4c:	ldr	r3, [fp, #-8]
    cc50:	cmp	r3, #0
    cc54:	beq	cc60 <MyGame_Example_Stat_verify_table+0x68>
    cc58:	ldr	r3, [fp, #-8]
    cc5c:	b	cc90 <MyGame_Example_Stat_verify_table+0x98>
    cc60:	mov	r3, #2
    cc64:	mov	r2, #2
    cc68:	mov	r1, #2
    cc6c:	ldr	r0, [fp, #-16]
    cc70:	bl	0 <flatcc_verify_field>
    cc74:	str	r0, [fp, #-8]
    cc78:	ldr	r3, [fp, #-8]
    cc7c:	cmp	r3, #0
    cc80:	beq	cc8c <MyGame_Example_Stat_verify_table+0x94>
    cc84:	ldr	r3, [fp, #-8]
    cc88:	b	cc90 <MyGame_Example_Stat_verify_table+0x98>
    cc8c:	mov	r3, #0
    cc90:	mov	r0, r3
    cc94:	sub	sp, fp, #4
    cc98:	ldr	fp, [sp]
    cc9c:	add	sp, sp, #4
    cca0:	pop	{pc}		; (ldr pc, [sp], #4)

0000cca4 <MyGame_Example_Alt_verify_table>:
    cca4:	str	fp, [sp, #-8]!
    cca8:	str	lr, [sp, #4]
    ccac:	add	fp, sp, #4
    ccb0:	sub	sp, sp, #16
    ccb4:	str	r0, [fp, #-16]
    ccb8:	movw	r3, #0
    ccbc:	movt	r3, #0
    ccc0:	mov	r2, #0
    ccc4:	mov	r1, #0
    ccc8:	ldr	r0, [fp, #-16]
    cccc:	bl	0 <flatcc_verify_table_field>
    ccd0:	str	r0, [fp, #-8]
    ccd4:	ldr	r3, [fp, #-8]
    ccd8:	cmp	r3, #0
    ccdc:	beq	cce8 <MyGame_Example_Alt_verify_table+0x44>
    cce0:	ldr	r3, [fp, #-8]
    cce4:	b	cd4c <MyGame_Example_Alt_verify_table+0xa8>
    cce8:	movw	r3, #0
    ccec:	movt	r3, #0
    ccf0:	mov	r2, #0
    ccf4:	mov	r1, #1
    ccf8:	ldr	r0, [fp, #-16]
    ccfc:	bl	0 <flatcc_verify_table_field>
    cd00:	str	r0, [fp, #-8]
    cd04:	ldr	r3, [fp, #-8]
    cd08:	cmp	r3, #0
    cd0c:	beq	cd18 <MyGame_Example_Alt_verify_table+0x74>
    cd10:	ldr	r3, [fp, #-8]
    cd14:	b	cd4c <MyGame_Example_Alt_verify_table+0xa8>
    cd18:	movw	r3, #0
    cd1c:	movt	r3, #0
    cd20:	mov	r2, #0
    cd24:	mov	r1, #3
    cd28:	ldr	r0, [fp, #-16]
    cd2c:	bl	0 <flatcc_verify_union_vector_field>
    cd30:	str	r0, [fp, #-8]
    cd34:	ldr	r3, [fp, #-8]
    cd38:	cmp	r3, #0
    cd3c:	beq	cd48 <MyGame_Example_Alt_verify_table+0xa4>
    cd40:	ldr	r3, [fp, #-8]
    cd44:	b	cd4c <MyGame_Example_Alt_verify_table+0xa8>
    cd48:	mov	r3, #0
    cd4c:	mov	r0, r3
    cd50:	sub	sp, fp, #4
    cd54:	ldr	fp, [sp]
    cd58:	add	sp, sp, #4
    cd5c:	pop	{pc}		; (ldr pc, [sp], #4)

0000cd60 <MyGame_Example_TestJSONPrefix_verify_table>:
    cd60:	str	fp, [sp, #-8]!
    cd64:	str	lr, [sp, #4]
    cd68:	add	fp, sp, #4
    cd6c:	sub	sp, sp, #16
    cd70:	str	r0, [fp, #-16]
    cd74:	movw	r3, #0
    cd78:	movt	r3, #0
    cd7c:	mov	r2, #0
    cd80:	mov	r1, #0
    cd84:	ldr	r0, [fp, #-16]
    cd88:	bl	0 <flatcc_verify_table_field>
    cd8c:	str	r0, [fp, #-8]
    cd90:	ldr	r3, [fp, #-8]
    cd94:	cmp	r3, #0
    cd98:	beq	cda4 <MyGame_Example_TestJSONPrefix_verify_table+0x44>
    cd9c:	ldr	r3, [fp, #-8]
    cda0:	b	ce08 <MyGame_Example_TestJSONPrefix_verify_table+0xa8>
    cda4:	movw	r3, #0
    cda8:	movt	r3, #0
    cdac:	mov	r2, #0
    cdb0:	mov	r1, #1
    cdb4:	ldr	r0, [fp, #-16]
    cdb8:	bl	0 <flatcc_verify_table_field>
    cdbc:	str	r0, [fp, #-8]
    cdc0:	ldr	r3, [fp, #-8]
    cdc4:	cmp	r3, #0
    cdc8:	beq	cdd4 <MyGame_Example_TestJSONPrefix_verify_table+0x74>
    cdcc:	ldr	r3, [fp, #-8]
    cdd0:	b	ce08 <MyGame_Example_TestJSONPrefix_verify_table+0xa8>
    cdd4:	movw	r3, #0
    cdd8:	movt	r3, #0
    cddc:	mov	r2, #0
    cde0:	mov	r1, #2
    cde4:	ldr	r0, [fp, #-16]
    cde8:	bl	0 <flatcc_verify_table_field>
    cdec:	str	r0, [fp, #-8]
    cdf0:	ldr	r3, [fp, #-8]
    cdf4:	cmp	r3, #0
    cdf8:	beq	ce04 <MyGame_Example_TestJSONPrefix_verify_table+0xa4>
    cdfc:	ldr	r3, [fp, #-8]
    ce00:	b	ce08 <MyGame_Example_TestJSONPrefix_verify_table+0xa8>
    ce04:	mov	r3, #0
    ce08:	mov	r0, r3
    ce0c:	sub	sp, fp, #4
    ce10:	ldr	fp, [sp]
    ce14:	add	sp, sp, #4
    ce18:	pop	{pc}		; (ldr pc, [sp], #4)

0000ce1c <MyGame_Example_TestJSONPrefixParsing_verify_table>:
    ce1c:	str	fp, [sp, #-8]!
    ce20:	str	lr, [sp, #4]
    ce24:	add	fp, sp, #4
    ce28:	sub	sp, sp, #16
    ce2c:	str	r0, [fp, #-16]
    ce30:	mov	r2, #0
    ce34:	mov	r1, #0
    ce38:	ldr	r0, [fp, #-16]
    ce3c:	bl	0 <flatcc_verify_string_field>
    ce40:	str	r0, [fp, #-8]
    ce44:	ldr	r3, [fp, #-8]
    ce48:	cmp	r3, #0
    ce4c:	beq	ce58 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x3c>
    ce50:	ldr	r3, [fp, #-8]
    ce54:	b	cfb4 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x198>
    ce58:	mov	r3, #4
    ce5c:	mov	r2, #4
    ce60:	mov	r1, #1
    ce64:	ldr	r0, [fp, #-16]
    ce68:	bl	0 <flatcc_verify_field>
    ce6c:	str	r0, [fp, #-8]
    ce70:	ldr	r3, [fp, #-8]
    ce74:	cmp	r3, #0
    ce78:	beq	ce84 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x68>
    ce7c:	ldr	r3, [fp, #-8]
    ce80:	b	cfb4 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x198>
    ce84:	mov	r2, #0
    ce88:	mov	r1, #2
    ce8c:	ldr	r0, [fp, #-16]
    ce90:	bl	0 <flatcc_verify_string_field>
    ce94:	str	r0, [fp, #-8]
    ce98:	ldr	r3, [fp, #-8]
    ce9c:	cmp	r3, #0
    cea0:	beq	ceac <MyGame_Example_TestJSONPrefixParsing_verify_table+0x90>
    cea4:	ldr	r3, [fp, #-8]
    cea8:	b	cfb4 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x198>
    ceac:	mov	r3, #8
    ceb0:	mov	r2, #8
    ceb4:	mov	r1, #3
    ceb8:	ldr	r0, [fp, #-16]
    cebc:	bl	0 <flatcc_verify_field>
    cec0:	str	r0, [fp, #-8]
    cec4:	ldr	r3, [fp, #-8]
    cec8:	cmp	r3, #0
    cecc:	beq	ced8 <MyGame_Example_TestJSONPrefixParsing_verify_table+0xbc>
    ced0:	ldr	r3, [fp, #-8]
    ced4:	b	cfb4 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x198>
    ced8:	mov	r2, #0
    cedc:	mov	r1, #4
    cee0:	ldr	r0, [fp, #-16]
    cee4:	bl	0 <flatcc_verify_string_field>
    cee8:	str	r0, [fp, #-8]
    ceec:	ldr	r3, [fp, #-8]
    cef0:	cmp	r3, #0
    cef4:	beq	cf00 <MyGame_Example_TestJSONPrefixParsing_verify_table+0xe4>
    cef8:	ldr	r3, [fp, #-8]
    cefc:	b	cfb4 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x198>
    cf00:	mov	r3, #8
    cf04:	mov	r2, #8
    cf08:	mov	r1, #5
    cf0c:	ldr	r0, [fp, #-16]
    cf10:	bl	0 <flatcc_verify_field>
    cf14:	str	r0, [fp, #-8]
    cf18:	ldr	r3, [fp, #-8]
    cf1c:	cmp	r3, #0
    cf20:	beq	cf2c <MyGame_Example_TestJSONPrefixParsing_verify_table+0x110>
    cf24:	ldr	r3, [fp, #-8]
    cf28:	b	cfb4 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x198>
    cf2c:	mov	r3, #4
    cf30:	mov	r2, #4
    cf34:	mov	r1, #6
    cf38:	ldr	r0, [fp, #-16]
    cf3c:	bl	0 <flatcc_verify_field>
    cf40:	str	r0, [fp, #-8]
    cf44:	ldr	r3, [fp, #-8]
    cf48:	cmp	r3, #0
    cf4c:	beq	cf58 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x13c>
    cf50:	ldr	r3, [fp, #-8]
    cf54:	b	cfb4 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x198>
    cf58:	mov	r3, #8
    cf5c:	mov	r2, #8
    cf60:	mov	r1, #7
    cf64:	ldr	r0, [fp, #-16]
    cf68:	bl	0 <flatcc_verify_field>
    cf6c:	str	r0, [fp, #-8]
    cf70:	ldr	r3, [fp, #-8]
    cf74:	cmp	r3, #0
    cf78:	beq	cf84 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x168>
    cf7c:	ldr	r3, [fp, #-8]
    cf80:	b	cfb4 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x198>
    cf84:	mov	r3, #4
    cf88:	mov	r2, #4
    cf8c:	mov	r1, #8
    cf90:	ldr	r0, [fp, #-16]
    cf94:	bl	0 <flatcc_verify_field>
    cf98:	str	r0, [fp, #-8]
    cf9c:	ldr	r3, [fp, #-8]
    cfa0:	cmp	r3, #0
    cfa4:	beq	cfb0 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x194>
    cfa8:	ldr	r3, [fp, #-8]
    cfac:	b	cfb4 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x198>
    cfb0:	mov	r3, #0
    cfb4:	mov	r0, r3
    cfb8:	sub	sp, fp, #4
    cfbc:	ldr	fp, [sp]
    cfc0:	add	sp, sp, #4
    cfc4:	pop	{pc}		; (ldr pc, [sp], #4)

0000cfc8 <MyGame_Example_TestJSONPrefixParsing2_verify_table>:
    cfc8:	str	fp, [sp, #-8]!
    cfcc:	str	lr, [sp, #4]
    cfd0:	add	fp, sp, #4
    cfd4:	sub	sp, sp, #16
    cfd8:	str	r0, [fp, #-16]
    cfdc:	mov	r3, #8
    cfe0:	mov	r2, #8
    cfe4:	mov	r1, #0
    cfe8:	ldr	r0, [fp, #-16]
    cfec:	bl	0 <flatcc_verify_field>
    cff0:	str	r0, [fp, #-8]
    cff4:	ldr	r3, [fp, #-8]
    cff8:	cmp	r3, #0
    cffc:	beq	d008 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x40>
    d000:	ldr	r3, [fp, #-8]
    d004:	b	d038 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x70>
    d008:	mov	r3, #4
    d00c:	mov	r2, #4
    d010:	mov	r1, #1
    d014:	ldr	r0, [fp, #-16]
    d018:	bl	0 <flatcc_verify_field>
    d01c:	str	r0, [fp, #-8]
    d020:	ldr	r3, [fp, #-8]
    d024:	cmp	r3, #0
    d028:	beq	d034 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x6c>
    d02c:	ldr	r3, [fp, #-8]
    d030:	b	d038 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x70>
    d034:	mov	r3, #0
    d038:	mov	r0, r3
    d03c:	sub	sp, fp, #4
    d040:	ldr	fp, [sp]
    d044:	add	sp, sp, #4
    d048:	pop	{pc}		; (ldr pc, [sp], #4)

0000d04c <MyGame_Example_TestJSONPrefixParsing3_verify_table>:
    d04c:	str	fp, [sp, #-8]!
    d050:	str	lr, [sp, #4]
    d054:	add	fp, sp, #4
    d058:	sub	sp, sp, #16
    d05c:	str	r0, [fp, #-16]
    d060:	mov	r3, #8
    d064:	mov	r2, #8
    d068:	mov	r1, #0
    d06c:	ldr	r0, [fp, #-16]
    d070:	bl	0 <flatcc_verify_field>
    d074:	str	r0, [fp, #-8]
    d078:	ldr	r3, [fp, #-8]
    d07c:	cmp	r3, #0
    d080:	beq	d08c <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x40>
    d084:	ldr	r3, [fp, #-8]
    d088:	b	d0bc <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x70>
    d08c:	mov	r3, #4
    d090:	mov	r2, #4
    d094:	mov	r1, #1
    d098:	ldr	r0, [fp, #-16]
    d09c:	bl	0 <flatcc_verify_field>
    d0a0:	str	r0, [fp, #-8]
    d0a4:	ldr	r3, [fp, #-8]
    d0a8:	cmp	r3, #0
    d0ac:	beq	d0b8 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x6c>
    d0b0:	ldr	r3, [fp, #-8]
    d0b4:	b	d0bc <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x70>
    d0b8:	mov	r3, #0
    d0bc:	mov	r0, r3
    d0c0:	sub	sp, fp, #4
    d0c4:	ldr	fp, [sp]
    d0c8:	add	sp, sp, #4
    d0cc:	pop	{pc}		; (ldr pc, [sp], #4)

0000d0d0 <MyGame_Example_TestBase64_verify_table>:
    d0d0:	str	fp, [sp, #-8]!
    d0d4:	str	lr, [sp, #4]
    d0d8:	add	fp, sp, #4
    d0dc:	sub	sp, sp, #24
    d0e0:	str	r0, [fp, #-16]
    d0e4:	mvn	r3, #0
    d0e8:	str	r3, [sp, #4]
    d0ec:	mov	r3, #1
    d0f0:	str	r3, [sp]
    d0f4:	mov	r3, #1
    d0f8:	mov	r2, #0
    d0fc:	mov	r1, #0
    d100:	ldr	r0, [fp, #-16]
    d104:	bl	0 <flatcc_verify_vector_field>
    d108:	str	r0, [fp, #-8]
    d10c:	ldr	r3, [fp, #-8]
    d110:	cmp	r3, #0
    d114:	beq	d120 <MyGame_Example_TestBase64_verify_table+0x50>
    d118:	ldr	r3, [fp, #-8]
    d11c:	b	d1a0 <MyGame_Example_TestBase64_verify_table+0xd0>
    d120:	mvn	r3, #0
    d124:	str	r3, [sp, #4]
    d128:	mov	r3, #1
    d12c:	str	r3, [sp]
    d130:	mov	r3, #1
    d134:	mov	r2, #0
    d138:	mov	r1, #1
    d13c:	ldr	r0, [fp, #-16]
    d140:	bl	0 <flatcc_verify_vector_field>
    d144:	str	r0, [fp, #-8]
    d148:	ldr	r3, [fp, #-8]
    d14c:	cmp	r3, #0
    d150:	beq	d15c <MyGame_Example_TestBase64_verify_table+0x8c>
    d154:	ldr	r3, [fp, #-8]
    d158:	b	d1a0 <MyGame_Example_TestBase64_verify_table+0xd0>
    d15c:	movw	r3, #0
    d160:	movt	r3, #0
    d164:	str	r3, [sp, #4]
    d168:	mov	r3, #1
    d16c:	str	r3, [sp]
    d170:	mov	r3, #0
    d174:	mov	r2, #0
    d178:	mov	r1, #2
    d17c:	ldr	r0, [fp, #-16]
    d180:	bl	0 <flatcc_verify_table_as_nested_root>
    d184:	str	r0, [fp, #-8]
    d188:	ldr	r3, [fp, #-8]
    d18c:	cmp	r3, #0
    d190:	beq	d19c <MyGame_Example_TestBase64_verify_table+0xcc>
    d194:	ldr	r3, [fp, #-8]
    d198:	b	d1a0 <MyGame_Example_TestBase64_verify_table+0xd0>
    d19c:	mov	r3, #0
    d1a0:	mov	r0, r3
    d1a4:	sub	sp, fp, #4
    d1a8:	ldr	fp, [sp]
    d1ac:	add	sp, sp, #4
    d1b0:	pop	{pc}		; (ldr pc, [sp], #4)

0000d1b4 <MyGame_Example_Monster_verify_table>:
    d1b4:	str	fp, [sp, #-8]!
    d1b8:	str	lr, [sp, #4]
    d1bc:	add	fp, sp, #4
    d1c0:	sub	sp, sp, #24
    d1c4:	str	r0, [fp, #-16]
    d1c8:	mov	r3, #16
    d1cc:	mov	r2, #32
    d1d0:	mov	r1, #0
    d1d4:	ldr	r0, [fp, #-16]
    d1d8:	bl	0 <flatcc_verify_field>
    d1dc:	str	r0, [fp, #-8]
    d1e0:	ldr	r3, [fp, #-8]
    d1e4:	cmp	r3, #0
    d1e8:	beq	d1f4 <MyGame_Example_Monster_verify_table+0x40>
    d1ec:	ldr	r3, [fp, #-8]
    d1f0:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d1f4:	mov	r3, #2
    d1f8:	mov	r2, #2
    d1fc:	mov	r1, #2
    d200:	ldr	r0, [fp, #-16]
    d204:	bl	0 <flatcc_verify_field>
    d208:	str	r0, [fp, #-8]
    d20c:	ldr	r3, [fp, #-8]
    d210:	cmp	r3, #0
    d214:	beq	d220 <MyGame_Example_Monster_verify_table+0x6c>
    d218:	ldr	r3, [fp, #-8]
    d21c:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d220:	mov	r3, #2
    d224:	mov	r2, #2
    d228:	mov	r1, #1
    d22c:	ldr	r0, [fp, #-16]
    d230:	bl	0 <flatcc_verify_field>
    d234:	str	r0, [fp, #-8]
    d238:	ldr	r3, [fp, #-8]
    d23c:	cmp	r3, #0
    d240:	beq	d24c <MyGame_Example_Monster_verify_table+0x98>
    d244:	ldr	r3, [fp, #-8]
    d248:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d24c:	mov	r2, #1
    d250:	mov	r1, #3
    d254:	ldr	r0, [fp, #-16]
    d258:	bl	0 <flatcc_verify_string_field>
    d25c:	str	r0, [fp, #-8]
    d260:	ldr	r3, [fp, #-8]
    d264:	cmp	r3, #0
    d268:	beq	d274 <MyGame_Example_Monster_verify_table+0xc0>
    d26c:	ldr	r3, [fp, #-8]
    d270:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d274:	mov	r3, #1
    d278:	mov	r2, #1
    d27c:	mov	r1, #6
    d280:	ldr	r0, [fp, #-16]
    d284:	bl	0 <flatcc_verify_field>
    d288:	str	r0, [fp, #-8]
    d28c:	ldr	r3, [fp, #-8]
    d290:	cmp	r3, #0
    d294:	beq	d2a0 <MyGame_Example_Monster_verify_table+0xec>
    d298:	ldr	r3, [fp, #-8]
    d29c:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d2a0:	mvn	r3, #0
    d2a4:	str	r3, [sp, #4]
    d2a8:	mov	r3, #1
    d2ac:	str	r3, [sp]
    d2b0:	mov	r3, #1
    d2b4:	mov	r2, #0
    d2b8:	mov	r1, #5
    d2bc:	ldr	r0, [fp, #-16]
    d2c0:	bl	0 <flatcc_verify_vector_field>
    d2c4:	str	r0, [fp, #-8]
    d2c8:	ldr	r3, [fp, #-8]
    d2cc:	cmp	r3, #0
    d2d0:	beq	d2dc <MyGame_Example_Monster_verify_table+0x128>
    d2d4:	ldr	r3, [fp, #-8]
    d2d8:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d2dc:	movw	r3, #0
    d2e0:	movt	r3, #0
    d2e4:	mov	r2, #0
    d2e8:	mov	r1, #11
    d2ec:	ldr	r0, [fp, #-16]
    d2f0:	bl	0 <flatcc_verify_table_vector_field>
    d2f4:	str	r0, [fp, #-8]
    d2f8:	ldr	r3, [fp, #-8]
    d2fc:	cmp	r3, #0
    d300:	beq	d30c <MyGame_Example_Monster_verify_table+0x158>
    d304:	ldr	r3, [fp, #-8]
    d308:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d30c:	mov	r2, #0
    d310:	mov	r1, #10
    d314:	ldr	r0, [fp, #-16]
    d318:	bl	0 <flatcc_verify_string_vector_field>
    d31c:	str	r0, [fp, #-8]
    d320:	ldr	r3, [fp, #-8]
    d324:	cmp	r3, #0
    d328:	beq	d334 <MyGame_Example_Monster_verify_table+0x180>
    d32c:	ldr	r3, [fp, #-8]
    d330:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d334:	mov	r2, #0
    d338:	mov	r1, #28
    d33c:	ldr	r0, [fp, #-16]
    d340:	bl	0 <flatcc_verify_string_vector_field>
    d344:	str	r0, [fp, #-8]
    d348:	ldr	r3, [fp, #-8]
    d34c:	cmp	r3, #0
    d350:	beq	d35c <MyGame_Example_Monster_verify_table+0x1a8>
    d354:	ldr	r3, [fp, #-8]
    d358:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d35c:	mvn	r3, #0
    d360:	str	r3, [sp, #4]
    d364:	mov	r3, #1
    d368:	str	r3, [sp]
    d36c:	mov	r3, #1
    d370:	mov	r2, #0
    d374:	mov	r1, #24
    d378:	ldr	r0, [fp, #-16]
    d37c:	bl	0 <flatcc_verify_vector_field>
    d380:	str	r0, [fp, #-8]
    d384:	ldr	r3, [fp, #-8]
    d388:	cmp	r3, #0
    d38c:	beq	d398 <MyGame_Example_Monster_verify_table+0x1e4>
    d390:	ldr	r3, [fp, #-8]
    d394:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d398:	mvn	r3, #-536870912	; 0xe0000000
    d39c:	str	r3, [sp, #4]
    d3a0:	mov	r3, #4
    d3a4:	str	r3, [sp]
    d3a8:	mov	r3, #8
    d3ac:	mov	r2, #0
    d3b0:	mov	r1, #29
    d3b4:	ldr	r0, [fp, #-16]
    d3b8:	bl	0 <flatcc_verify_vector_field>
    d3bc:	str	r0, [fp, #-8]
    d3c0:	ldr	r3, [fp, #-8]
    d3c4:	cmp	r3, #0
    d3c8:	beq	d3d4 <MyGame_Example_Monster_verify_table+0x220>
    d3cc:	ldr	r3, [fp, #-8]
    d3d0:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d3d4:	movw	r3, #0
    d3d8:	movt	r3, #0
    d3dc:	mov	r2, #0
    d3e0:	mov	r1, #12
    d3e4:	ldr	r0, [fp, #-16]
    d3e8:	bl	0 <flatcc_verify_table_field>
    d3ec:	str	r0, [fp, #-8]
    d3f0:	ldr	r3, [fp, #-8]
    d3f4:	cmp	r3, #0
    d3f8:	beq	d404 <MyGame_Example_Monster_verify_table+0x250>
    d3fc:	ldr	r3, [fp, #-8]
    d400:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d404:	movw	r3, #0
    d408:	movt	r3, #0
    d40c:	mov	r2, #0
    d410:	mov	r1, #8
    d414:	ldr	r0, [fp, #-16]
    d418:	bl	0 <flatcc_verify_union_field>
    d41c:	str	r0, [fp, #-8]
    d420:	ldr	r3, [fp, #-8]
    d424:	cmp	r3, #0
    d428:	beq	d434 <MyGame_Example_Monster_verify_table+0x280>
    d42c:	ldr	r3, [fp, #-8]
    d430:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d434:	mvn	r3, #-1073741824	; 0xc0000000
    d438:	str	r3, [sp, #4]
    d43c:	mov	r3, #2
    d440:	str	r3, [sp]
    d444:	mov	r3, #4
    d448:	mov	r2, #0
    d44c:	mov	r1, #9
    d450:	ldr	r0, [fp, #-16]
    d454:	bl	0 <flatcc_verify_vector_field>
    d458:	str	r0, [fp, #-8]
    d45c:	ldr	r3, [fp, #-8]
    d460:	cmp	r3, #0
    d464:	beq	d470 <MyGame_Example_Monster_verify_table+0x2bc>
    d468:	ldr	r3, [fp, #-8]
    d46c:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d470:	mvn	r3, #-1073741824	; 0xc0000000
    d474:	str	r3, [sp, #4]
    d478:	mov	r3, #2
    d47c:	str	r3, [sp]
    d480:	mov	r3, #4
    d484:	mov	r2, #0
    d488:	mov	r1, #31
    d48c:	ldr	r0, [fp, #-16]
    d490:	bl	0 <flatcc_verify_vector_field>
    d494:	str	r0, [fp, #-8]
    d498:	ldr	r3, [fp, #-8]
    d49c:	cmp	r3, #0
    d4a0:	beq	d4ac <MyGame_Example_Monster_verify_table+0x2f8>
    d4a4:	ldr	r3, [fp, #-8]
    d4a8:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d4ac:	movw	r3, #0
    d4b0:	movt	r3, #0
    d4b4:	str	r3, [sp, #4]
    d4b8:	mov	r3, #1
    d4bc:	str	r3, [sp]
    d4c0:	mov	r3, #0
    d4c4:	mov	r2, #0
    d4c8:	mov	r1, #13
    d4cc:	ldr	r0, [fp, #-16]
    d4d0:	bl	0 <flatcc_verify_table_as_nested_root>
    d4d4:	str	r0, [fp, #-8]
    d4d8:	ldr	r3, [fp, #-8]
    d4dc:	cmp	r3, #0
    d4e0:	beq	d4ec <MyGame_Example_Monster_verify_table+0x338>
    d4e4:	ldr	r3, [fp, #-8]
    d4e8:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d4ec:	movw	r3, #0
    d4f0:	movt	r3, #0
    d4f4:	mov	r2, #0
    d4f8:	mov	r1, #14
    d4fc:	ldr	r0, [fp, #-16]
    d500:	bl	0 <flatcc_verify_table_field>
    d504:	str	r0, [fp, #-8]
    d508:	ldr	r3, [fp, #-8]
    d50c:	cmp	r3, #0
    d510:	beq	d51c <MyGame_Example_Monster_verify_table+0x368>
    d514:	ldr	r3, [fp, #-8]
    d518:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d51c:	mov	r3, #1
    d520:	mov	r2, #1
    d524:	mov	r1, #15
    d528:	ldr	r0, [fp, #-16]
    d52c:	bl	0 <flatcc_verify_field>
    d530:	str	r0, [fp, #-8]
    d534:	ldr	r3, [fp, #-8]
    d538:	cmp	r3, #0
    d53c:	beq	d548 <MyGame_Example_Monster_verify_table+0x394>
    d540:	ldr	r3, [fp, #-8]
    d544:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d548:	mov	r3, #4
    d54c:	mov	r2, #4
    d550:	mov	r1, #16
    d554:	ldr	r0, [fp, #-16]
    d558:	bl	0 <flatcc_verify_field>
    d55c:	str	r0, [fp, #-8]
    d560:	ldr	r3, [fp, #-8]
    d564:	cmp	r3, #0
    d568:	beq	d574 <MyGame_Example_Monster_verify_table+0x3c0>
    d56c:	ldr	r3, [fp, #-8]
    d570:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d574:	mov	r3, #4
    d578:	mov	r2, #4
    d57c:	mov	r1, #17
    d580:	ldr	r0, [fp, #-16]
    d584:	bl	0 <flatcc_verify_field>
    d588:	str	r0, [fp, #-8]
    d58c:	ldr	r3, [fp, #-8]
    d590:	cmp	r3, #0
    d594:	beq	d5a0 <MyGame_Example_Monster_verify_table+0x3ec>
    d598:	ldr	r3, [fp, #-8]
    d59c:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d5a0:	mov	r3, #8
    d5a4:	mov	r2, #8
    d5a8:	mov	r1, #18
    d5ac:	ldr	r0, [fp, #-16]
    d5b0:	bl	0 <flatcc_verify_field>
    d5b4:	str	r0, [fp, #-8]
    d5b8:	ldr	r3, [fp, #-8]
    d5bc:	cmp	r3, #0
    d5c0:	beq	d5cc <MyGame_Example_Monster_verify_table+0x418>
    d5c4:	ldr	r3, [fp, #-8]
    d5c8:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d5cc:	mov	r3, #8
    d5d0:	mov	r2, #8
    d5d4:	mov	r1, #19
    d5d8:	ldr	r0, [fp, #-16]
    d5dc:	bl	0 <flatcc_verify_field>
    d5e0:	str	r0, [fp, #-8]
    d5e4:	ldr	r3, [fp, #-8]
    d5e8:	cmp	r3, #0
    d5ec:	beq	d5f8 <MyGame_Example_Monster_verify_table+0x444>
    d5f0:	ldr	r3, [fp, #-8]
    d5f4:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d5f8:	mov	r3, #4
    d5fc:	mov	r2, #4
    d600:	mov	r1, #20
    d604:	ldr	r0, [fp, #-16]
    d608:	bl	0 <flatcc_verify_field>
    d60c:	str	r0, [fp, #-8]
    d610:	ldr	r3, [fp, #-8]
    d614:	cmp	r3, #0
    d618:	beq	d624 <MyGame_Example_Monster_verify_table+0x470>
    d61c:	ldr	r3, [fp, #-8]
    d620:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d624:	mov	r3, #4
    d628:	mov	r2, #4
    d62c:	mov	r1, #21
    d630:	ldr	r0, [fp, #-16]
    d634:	bl	0 <flatcc_verify_field>
    d638:	str	r0, [fp, #-8]
    d63c:	ldr	r3, [fp, #-8]
    d640:	cmp	r3, #0
    d644:	beq	d650 <MyGame_Example_Monster_verify_table+0x49c>
    d648:	ldr	r3, [fp, #-8]
    d64c:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d650:	mov	r3, #8
    d654:	mov	r2, #8
    d658:	mov	r1, #22
    d65c:	ldr	r0, [fp, #-16]
    d660:	bl	0 <flatcc_verify_field>
    d664:	str	r0, [fp, #-8]
    d668:	ldr	r3, [fp, #-8]
    d66c:	cmp	r3, #0
    d670:	beq	d67c <MyGame_Example_Monster_verify_table+0x4c8>
    d674:	ldr	r3, [fp, #-8]
    d678:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d67c:	mov	r3, #8
    d680:	mov	r2, #8
    d684:	mov	r1, #23
    d688:	ldr	r0, [fp, #-16]
    d68c:	bl	0 <flatcc_verify_field>
    d690:	str	r0, [fp, #-8]
    d694:	ldr	r3, [fp, #-8]
    d698:	cmp	r3, #0
    d69c:	beq	d6a8 <MyGame_Example_Monster_verify_table+0x4f4>
    d6a0:	ldr	r3, [fp, #-8]
    d6a4:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d6a8:	mov	r3, #4
    d6ac:	mov	r2, #4
    d6b0:	mov	r1, #25
    d6b4:	ldr	r0, [fp, #-16]
    d6b8:	bl	0 <flatcc_verify_field>
    d6bc:	str	r0, [fp, #-8]
    d6c0:	ldr	r3, [fp, #-8]
    d6c4:	cmp	r3, #0
    d6c8:	beq	d6d4 <MyGame_Example_Monster_verify_table+0x520>
    d6cc:	ldr	r3, [fp, #-8]
    d6d0:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d6d4:	mov	r3, #4
    d6d8:	mov	r2, #4
    d6dc:	mov	r1, #26
    d6e0:	ldr	r0, [fp, #-16]
    d6e4:	bl	0 <flatcc_verify_field>
    d6e8:	str	r0, [fp, #-8]
    d6ec:	ldr	r3, [fp, #-8]
    d6f0:	cmp	r3, #0
    d6f4:	beq	d700 <MyGame_Example_Monster_verify_table+0x54c>
    d6f8:	ldr	r3, [fp, #-8]
    d6fc:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d700:	mov	r3, #4
    d704:	mov	r2, #4
    d708:	mov	r1, #27
    d70c:	ldr	r0, [fp, #-16]
    d710:	bl	0 <flatcc_verify_field>
    d714:	str	r0, [fp, #-8]
    d718:	ldr	r3, [fp, #-8]
    d71c:	cmp	r3, #0
    d720:	beq	d72c <MyGame_Example_Monster_verify_table+0x578>
    d724:	ldr	r3, [fp, #-8]
    d728:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d72c:	mvn	r3, #0
    d730:	str	r3, [sp, #4]
    d734:	mov	r3, #1
    d738:	str	r3, [sp]
    d73c:	mov	r3, #1
    d740:	mov	r2, #0
    d744:	mov	r1, #30
    d748:	ldr	r0, [fp, #-16]
    d74c:	bl	0 <flatcc_verify_vector_field>
    d750:	str	r0, [fp, #-8]
    d754:	ldr	r3, [fp, #-8]
    d758:	cmp	r3, #0
    d75c:	beq	d768 <MyGame_Example_Monster_verify_table+0x5b4>
    d760:	ldr	r3, [fp, #-8]
    d764:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d768:	mvn	r3, #-536870912	; 0xe0000000
    d76c:	str	r3, [sp, #4]
    d770:	mov	r3, #8
    d774:	str	r3, [sp]
    d778:	mov	r3, #8
    d77c:	mov	r2, #0
    d780:	mov	r1, #32
    d784:	ldr	r0, [fp, #-16]
    d788:	bl	0 <flatcc_verify_vector_field>
    d78c:	str	r0, [fp, #-8]
    d790:	ldr	r3, [fp, #-8]
    d794:	cmp	r3, #0
    d798:	beq	d7a4 <MyGame_Example_Monster_verify_table+0x5f0>
    d79c:	ldr	r3, [fp, #-8]
    d7a0:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d7a4:	mvn	r3, #-536870912	; 0xe0000000
    d7a8:	str	r3, [sp, #4]
    d7ac:	mov	r3, #8
    d7b0:	str	r3, [sp]
    d7b4:	mov	r3, #8
    d7b8:	mov	r2, #0
    d7bc:	mov	r1, #33	; 0x21
    d7c0:	ldr	r0, [fp, #-16]
    d7c4:	bl	0 <flatcc_verify_vector_field>
    d7c8:	str	r0, [fp, #-8]
    d7cc:	ldr	r3, [fp, #-8]
    d7d0:	cmp	r3, #0
    d7d4:	beq	d7e0 <MyGame_Example_Monster_verify_table+0x62c>
    d7d8:	ldr	r3, [fp, #-8]
    d7dc:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d7e0:	movw	r3, #0
    d7e4:	movt	r3, #0
    d7e8:	mov	r2, #0
    d7ec:	mov	r1, #34	; 0x22
    d7f0:	ldr	r0, [fp, #-16]
    d7f4:	bl	0 <flatcc_verify_table_field>
    d7f8:	str	r0, [fp, #-8]
    d7fc:	ldr	r3, [fp, #-8]
    d800:	cmp	r3, #0
    d804:	beq	d810 <MyGame_Example_Monster_verify_table+0x65c>
    d808:	ldr	r3, [fp, #-8]
    d80c:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d810:	movw	r3, #0
    d814:	movt	r3, #0
    d818:	mov	r2, #0
    d81c:	mov	r1, #35	; 0x23
    d820:	ldr	r0, [fp, #-16]
    d824:	bl	0 <flatcc_verify_table_field>
    d828:	str	r0, [fp, #-8]
    d82c:	ldr	r3, [fp, #-8]
    d830:	cmp	r3, #0
    d834:	beq	d840 <MyGame_Example_Monster_verify_table+0x68c>
    d838:	ldr	r3, [fp, #-8]
    d83c:	b	d844 <MyGame_Example_Monster_verify_table+0x690>
    d840:	mov	r3, #0
    d844:	mov	r0, r3
    d848:	sub	sp, fp, #4
    d84c:	ldr	fp, [sp]
    d850:	add	sp, sp, #4
    d854:	pop	{pc}		; (ldr pc, [sp], #4)

0000d858 <MyGame_Example_Monster_verify_as_root>:
    d858:	str	fp, [sp, #-8]!
    d85c:	str	lr, [sp, #4]
    d860:	add	fp, sp, #4
    d864:	sub	sp, sp, #8
    d868:	str	r0, [fp, #-8]
    d86c:	str	r1, [fp, #-12]
    d870:	movw	r3, #0
    d874:	movt	r3, #0
    d878:	movw	r2, #0
    d87c:	movt	r2, #0
    d880:	ldr	r1, [fp, #-12]
    d884:	ldr	r0, [fp, #-8]
    d888:	bl	0 <flatcc_verify_table_as_root>
    d88c:	mov	r3, r0
    d890:	mov	r0, r3
    d894:	sub	sp, fp, #4
    d898:	ldr	fp, [sp]
    d89c:	add	sp, sp, #4
    d8a0:	pop	{pc}		; (ldr pc, [sp], #4)

0000d8a4 <MyGame_Example_Monster_verify_as_typed_root>:
    d8a4:	str	fp, [sp, #-8]!
    d8a8:	str	lr, [sp, #4]
    d8ac:	add	fp, sp, #4
    d8b0:	sub	sp, sp, #8
    d8b4:	str	r0, [fp, #-8]
    d8b8:	str	r1, [fp, #-12]
    d8bc:	movw	r3, #0
    d8c0:	movt	r3, #0
    d8c4:	movw	r2, #0
    d8c8:	movt	r2, #0
    d8cc:	ldr	r1, [fp, #-12]
    d8d0:	ldr	r0, [fp, #-8]
    d8d4:	bl	0 <flatcc_verify_table_as_root>
    d8d8:	mov	r3, r0
    d8dc:	mov	r0, r3
    d8e0:	sub	sp, fp, #4
    d8e4:	ldr	fp, [sp]
    d8e8:	add	sp, sp, #4
    d8ec:	pop	{pc}		; (ldr pc, [sp], #4)

0000d8f0 <MyGame_Example_Monster_verify_as_root_with_identifier>:
    d8f0:	str	fp, [sp, #-8]!
    d8f4:	str	lr, [sp, #4]
    d8f8:	add	fp, sp, #4
    d8fc:	sub	sp, sp, #16
    d900:	str	r0, [fp, #-8]
    d904:	str	r1, [fp, #-12]
    d908:	str	r2, [fp, #-16]
    d90c:	movw	r3, #0
    d910:	movt	r3, #0
    d914:	ldr	r2, [fp, #-16]
    d918:	ldr	r1, [fp, #-12]
    d91c:	ldr	r0, [fp, #-8]
    d920:	bl	0 <flatcc_verify_table_as_root>
    d924:	mov	r3, r0
    d928:	mov	r0, r3
    d92c:	sub	sp, fp, #4
    d930:	ldr	fp, [sp]
    d934:	add	sp, sp, #4
    d938:	pop	{pc}		; (ldr pc, [sp], #4)

0000d93c <MyGame_Example_Monster_verify_as_root_with_type_hash>:
    d93c:	str	fp, [sp, #-8]!
    d940:	str	lr, [sp, #4]
    d944:	add	fp, sp, #4
    d948:	sub	sp, sp, #16
    d94c:	str	r0, [fp, #-8]
    d950:	str	r1, [fp, #-12]
    d954:	str	r2, [fp, #-16]
    d958:	movw	r3, #0
    d95c:	movt	r3, #0
    d960:	ldr	r2, [fp, #-16]
    d964:	ldr	r1, [fp, #-12]
    d968:	ldr	r0, [fp, #-8]
    d96c:	bl	0 <flatcc_verify_table_as_typed_root>
    d970:	mov	r3, r0
    d974:	mov	r0, r3
    d978:	sub	sp, fp, #4
    d97c:	ldr	fp, [sp]
    d980:	add	sp, sp, #4
    d984:	pop	{pc}		; (ldr pc, [sp], #4)

0000d988 <MyGame_Example_TypeAliases_verify_table>:
    d988:	str	fp, [sp, #-8]!
    d98c:	str	lr, [sp, #4]
    d990:	add	fp, sp, #4
    d994:	sub	sp, sp, #24
    d998:	str	r0, [fp, #-16]
    d99c:	mov	r3, #1
    d9a0:	mov	r2, #1
    d9a4:	mov	r1, #0
    d9a8:	ldr	r0, [fp, #-16]
    d9ac:	bl	0 <flatcc_verify_field>
    d9b0:	str	r0, [fp, #-8]
    d9b4:	ldr	r3, [fp, #-8]
    d9b8:	cmp	r3, #0
    d9bc:	beq	d9c8 <MyGame_Example_TypeAliases_verify_table+0x40>
    d9c0:	ldr	r3, [fp, #-8]
    d9c4:	b	dbd0 <MyGame_Example_TypeAliases_verify_table+0x248>
    d9c8:	mov	r3, #1
    d9cc:	mov	r2, #1
    d9d0:	mov	r1, #1
    d9d4:	ldr	r0, [fp, #-16]
    d9d8:	bl	0 <flatcc_verify_field>
    d9dc:	str	r0, [fp, #-8]
    d9e0:	ldr	r3, [fp, #-8]
    d9e4:	cmp	r3, #0
    d9e8:	beq	d9f4 <MyGame_Example_TypeAliases_verify_table+0x6c>
    d9ec:	ldr	r3, [fp, #-8]
    d9f0:	b	dbd0 <MyGame_Example_TypeAliases_verify_table+0x248>
    d9f4:	mov	r3, #2
    d9f8:	mov	r2, #2
    d9fc:	mov	r1, #2
    da00:	ldr	r0, [fp, #-16]
    da04:	bl	0 <flatcc_verify_field>
    da08:	str	r0, [fp, #-8]
    da0c:	ldr	r3, [fp, #-8]
    da10:	cmp	r3, #0
    da14:	beq	da20 <MyGame_Example_TypeAliases_verify_table+0x98>
    da18:	ldr	r3, [fp, #-8]
    da1c:	b	dbd0 <MyGame_Example_TypeAliases_verify_table+0x248>
    da20:	mov	r3, #2
    da24:	mov	r2, #2
    da28:	mov	r1, #3
    da2c:	ldr	r0, [fp, #-16]
    da30:	bl	0 <flatcc_verify_field>
    da34:	str	r0, [fp, #-8]
    da38:	ldr	r3, [fp, #-8]
    da3c:	cmp	r3, #0
    da40:	beq	da4c <MyGame_Example_TypeAliases_verify_table+0xc4>
    da44:	ldr	r3, [fp, #-8]
    da48:	b	dbd0 <MyGame_Example_TypeAliases_verify_table+0x248>
    da4c:	mov	r3, #4
    da50:	mov	r2, #4
    da54:	mov	r1, #4
    da58:	ldr	r0, [fp, #-16]
    da5c:	bl	0 <flatcc_verify_field>
    da60:	str	r0, [fp, #-8]
    da64:	ldr	r3, [fp, #-8]
    da68:	cmp	r3, #0
    da6c:	beq	da78 <MyGame_Example_TypeAliases_verify_table+0xf0>
    da70:	ldr	r3, [fp, #-8]
    da74:	b	dbd0 <MyGame_Example_TypeAliases_verify_table+0x248>
    da78:	mov	r3, #4
    da7c:	mov	r2, #4
    da80:	mov	r1, #5
    da84:	ldr	r0, [fp, #-16]
    da88:	bl	0 <flatcc_verify_field>
    da8c:	str	r0, [fp, #-8]
    da90:	ldr	r3, [fp, #-8]
    da94:	cmp	r3, #0
    da98:	beq	daa4 <MyGame_Example_TypeAliases_verify_table+0x11c>
    da9c:	ldr	r3, [fp, #-8]
    daa0:	b	dbd0 <MyGame_Example_TypeAliases_verify_table+0x248>
    daa4:	mov	r3, #8
    daa8:	mov	r2, #8
    daac:	mov	r1, #6
    dab0:	ldr	r0, [fp, #-16]
    dab4:	bl	0 <flatcc_verify_field>
    dab8:	str	r0, [fp, #-8]
    dabc:	ldr	r3, [fp, #-8]
    dac0:	cmp	r3, #0
    dac4:	beq	dad0 <MyGame_Example_TypeAliases_verify_table+0x148>
    dac8:	ldr	r3, [fp, #-8]
    dacc:	b	dbd0 <MyGame_Example_TypeAliases_verify_table+0x248>
    dad0:	mov	r3, #8
    dad4:	mov	r2, #8
    dad8:	mov	r1, #7
    dadc:	ldr	r0, [fp, #-16]
    dae0:	bl	0 <flatcc_verify_field>
    dae4:	str	r0, [fp, #-8]
    dae8:	ldr	r3, [fp, #-8]
    daec:	cmp	r3, #0
    daf0:	beq	dafc <MyGame_Example_TypeAliases_verify_table+0x174>
    daf4:	ldr	r3, [fp, #-8]
    daf8:	b	dbd0 <MyGame_Example_TypeAliases_verify_table+0x248>
    dafc:	mov	r3, #4
    db00:	mov	r2, #4
    db04:	mov	r1, #8
    db08:	ldr	r0, [fp, #-16]
    db0c:	bl	0 <flatcc_verify_field>
    db10:	str	r0, [fp, #-8]
    db14:	ldr	r3, [fp, #-8]
    db18:	cmp	r3, #0
    db1c:	beq	db28 <MyGame_Example_TypeAliases_verify_table+0x1a0>
    db20:	ldr	r3, [fp, #-8]
    db24:	b	dbd0 <MyGame_Example_TypeAliases_verify_table+0x248>
    db28:	mov	r3, #8
    db2c:	mov	r2, #8
    db30:	mov	r1, #9
    db34:	ldr	r0, [fp, #-16]
    db38:	bl	0 <flatcc_verify_field>
    db3c:	str	r0, [fp, #-8]
    db40:	ldr	r3, [fp, #-8]
    db44:	cmp	r3, #0
    db48:	beq	db54 <MyGame_Example_TypeAliases_verify_table+0x1cc>
    db4c:	ldr	r3, [fp, #-8]
    db50:	b	dbd0 <MyGame_Example_TypeAliases_verify_table+0x248>
    db54:	mvn	r3, #0
    db58:	str	r3, [sp, #4]
    db5c:	mov	r3, #1
    db60:	str	r3, [sp]
    db64:	mov	r3, #1
    db68:	mov	r2, #0
    db6c:	mov	r1, #10
    db70:	ldr	r0, [fp, #-16]
    db74:	bl	0 <flatcc_verify_vector_field>
    db78:	str	r0, [fp, #-8]
    db7c:	ldr	r3, [fp, #-8]
    db80:	cmp	r3, #0
    db84:	beq	db90 <MyGame_Example_TypeAliases_verify_table+0x208>
    db88:	ldr	r3, [fp, #-8]
    db8c:	b	dbd0 <MyGame_Example_TypeAliases_verify_table+0x248>
    db90:	mvn	r3, #-536870912	; 0xe0000000
    db94:	str	r3, [sp, #4]
    db98:	mov	r3, #8
    db9c:	str	r3, [sp]
    dba0:	mov	r3, #8
    dba4:	mov	r2, #0
    dba8:	mov	r1, #11
    dbac:	ldr	r0, [fp, #-16]
    dbb0:	bl	0 <flatcc_verify_vector_field>
    dbb4:	str	r0, [fp, #-8]
    dbb8:	ldr	r3, [fp, #-8]
    dbbc:	cmp	r3, #0
    dbc0:	beq	dbcc <MyGame_Example_TypeAliases_verify_table+0x244>
    dbc4:	ldr	r3, [fp, #-8]
    dbc8:	b	dbd0 <MyGame_Example_TypeAliases_verify_table+0x248>
    dbcc:	mov	r3, #0
    dbd0:	mov	r0, r3
    dbd4:	sub	sp, fp, #4
    dbd8:	ldr	fp, [sp]
    dbdc:	add	sp, sp, #4
    dbe0:	pop	{pc}		; (ldr pc, [sp], #4)

0000dbe4 <MyGame_Example_TypeAliases_verify_as_root>:
    dbe4:	str	fp, [sp, #-8]!
    dbe8:	str	lr, [sp, #4]
    dbec:	add	fp, sp, #4
    dbf0:	sub	sp, sp, #8
    dbf4:	str	r0, [fp, #-8]
    dbf8:	str	r1, [fp, #-12]
    dbfc:	movw	r3, #0
    dc00:	movt	r3, #0
    dc04:	movw	r2, #0
    dc08:	movt	r2, #0
    dc0c:	ldr	r1, [fp, #-12]
    dc10:	ldr	r0, [fp, #-8]
    dc14:	bl	0 <flatcc_verify_table_as_root>
    dc18:	mov	r3, r0
    dc1c:	mov	r0, r3
    dc20:	sub	sp, fp, #4
    dc24:	ldr	fp, [sp]
    dc28:	add	sp, sp, #4
    dc2c:	pop	{pc}		; (ldr pc, [sp], #4)

0000dc30 <Fantasy_Attacker_verify_table>:
    dc30:	str	fp, [sp, #-8]!
    dc34:	str	lr, [sp, #4]
    dc38:	add	fp, sp, #4
    dc3c:	sub	sp, sp, #16
    dc40:	str	r0, [fp, #-16]
    dc44:	mov	r3, #4
    dc48:	mov	r2, #4
    dc4c:	mov	r1, #0
    dc50:	ldr	r0, [fp, #-16]
    dc54:	bl	0 <flatcc_verify_field>
    dc58:	str	r0, [fp, #-8]
    dc5c:	ldr	r3, [fp, #-8]
    dc60:	cmp	r3, #0
    dc64:	beq	dc70 <Fantasy_Attacker_verify_table+0x40>
    dc68:	ldr	r3, [fp, #-8]
    dc6c:	b	dc74 <Fantasy_Attacker_verify_table+0x44>
    dc70:	mov	r3, #0
    dc74:	mov	r0, r3
    dc78:	sub	sp, fp, #4
    dc7c:	ldr	fp, [sp]
    dc80:	add	sp, sp, #4
    dc84:	pop	{pc}		; (ldr pc, [sp], #4)

0000dc88 <Fantasy_Movie_verify_table>:
    dc88:	str	fp, [sp, #-8]!
    dc8c:	str	lr, [sp, #4]
    dc90:	add	fp, sp, #4
    dc94:	sub	sp, sp, #16
    dc98:	str	r0, [fp, #-16]
    dc9c:	movw	r3, #0
    dca0:	movt	r3, #0
    dca4:	mov	r2, #0
    dca8:	mov	r1, #1
    dcac:	ldr	r0, [fp, #-16]
    dcb0:	bl	0 <flatcc_verify_union_field>
    dcb4:	str	r0, [fp, #-8]
    dcb8:	ldr	r3, [fp, #-8]
    dcbc:	cmp	r3, #0
    dcc0:	beq	dccc <Fantasy_Movie_verify_table+0x44>
    dcc4:	ldr	r3, [fp, #-8]
    dcc8:	b	dd90 <Fantasy_Movie_verify_table+0x108>
    dccc:	movw	r3, #0
    dcd0:	movt	r3, #0
    dcd4:	mov	r2, #0
    dcd8:	mov	r1, #3
    dcdc:	ldr	r0, [fp, #-16]
    dce0:	bl	0 <flatcc_verify_union_field>
    dce4:	str	r0, [fp, #-8]
    dce8:	ldr	r3, [fp, #-8]
    dcec:	cmp	r3, #0
    dcf0:	beq	dcfc <Fantasy_Movie_verify_table+0x74>
    dcf4:	ldr	r3, [fp, #-8]
    dcf8:	b	dd90 <Fantasy_Movie_verify_table+0x108>
    dcfc:	movw	r3, #0
    dd00:	movt	r3, #0
    dd04:	mov	r2, #0
    dd08:	mov	r1, #5
    dd0c:	ldr	r0, [fp, #-16]
    dd10:	bl	0 <flatcc_verify_union_field>
    dd14:	str	r0, [fp, #-8]
    dd18:	ldr	r3, [fp, #-8]
    dd1c:	cmp	r3, #0
    dd20:	beq	dd2c <Fantasy_Movie_verify_table+0xa4>
    dd24:	ldr	r3, [fp, #-8]
    dd28:	b	dd90 <Fantasy_Movie_verify_table+0x108>
    dd2c:	movw	r3, #0
    dd30:	movt	r3, #0
    dd34:	mov	r2, #0
    dd38:	mov	r1, #7
    dd3c:	ldr	r0, [fp, #-16]
    dd40:	bl	0 <flatcc_verify_union_field>
    dd44:	str	r0, [fp, #-8]
    dd48:	ldr	r3, [fp, #-8]
    dd4c:	cmp	r3, #0
    dd50:	beq	dd5c <Fantasy_Movie_verify_table+0xd4>
    dd54:	ldr	r3, [fp, #-8]
    dd58:	b	dd90 <Fantasy_Movie_verify_table+0x108>
    dd5c:	movw	r3, #0
    dd60:	movt	r3, #0
    dd64:	mov	r2, #0
    dd68:	mov	r1, #9
    dd6c:	ldr	r0, [fp, #-16]
    dd70:	bl	0 <flatcc_verify_union_vector_field>
    dd74:	str	r0, [fp, #-8]
    dd78:	ldr	r3, [fp, #-8]
    dd7c:	cmp	r3, #0
    dd80:	beq	dd8c <Fantasy_Movie_verify_table+0x104>
    dd84:	ldr	r3, [fp, #-8]
    dd88:	b	dd90 <Fantasy_Movie_verify_table+0x108>
    dd8c:	mov	r3, #0
    dd90:	mov	r0, r3
    dd94:	sub	sp, fp, #4
    dd98:	ldr	fp, [sp]
    dd9c:	add	sp, sp, #4
    dda0:	pop	{pc}		; (ldr pc, [sp], #4)

0000dda4 <Fantasy_Movie_verify_as_root>:
    dda4:	str	fp, [sp, #-8]!
    dda8:	str	lr, [sp, #4]
    ddac:	add	fp, sp, #4
    ddb0:	sub	sp, sp, #8
    ddb4:	str	r0, [fp, #-8]
    ddb8:	str	r1, [fp, #-12]
    ddbc:	movw	r3, #0
    ddc0:	movt	r3, #0
    ddc4:	movw	r2, #0
    ddc8:	movt	r2, #0
    ddcc:	ldr	r1, [fp, #-12]
    ddd0:	ldr	r0, [fp, #-8]
    ddd4:	bl	0 <flatcc_verify_table_as_root>
    ddd8:	mov	r3, r0
    dddc:	mov	r0, r3
    dde0:	sub	sp, fp, #4
    dde4:	ldr	fp, [sp]
    dde8:	add	sp, sp, #4
    ddec:	pop	{pc}		; (ldr pc, [sp], #4)

0000ddf0 <hexdump>:
    ddf0:	str	fp, [sp, #-8]!
    ddf4:	str	lr, [sp, #4]
    ddf8:	add	fp, sp, #4
    ddfc:	sub	sp, sp, #48	; 0x30
    de00:	str	r0, [fp, #-40]	; 0xffffffd8
    de04:	str	r1, [fp, #-44]	; 0xffffffd4
    de08:	str	r2, [fp, #-48]	; 0xffffffd0
    de0c:	str	r3, [fp, #-52]	; 0xffffffcc
    de10:	ldr	r3, [fp, #-44]	; 0xffffffd4
    de14:	str	r3, [fp, #-12]
    de18:	ldr	r3, [fp, #-40]	; 0xffffffd8
    de1c:	cmp	r3, #0
    de20:	beq	de38 <hexdump+0x48>
    de24:	ldr	r2, [fp, #-40]	; 0xffffffd8
    de28:	movw	r1, #0
    de2c:	movt	r1, #0
    de30:	ldr	r0, [fp, #-52]	; 0xffffffcc
    de34:	bl	0 <fprintf>
    de38:	mov	r3, #0
    de3c:	str	r3, [fp, #-8]
    de40:	b	df68 <hexdump+0x178>
    de44:	ldr	r3, [fp, #-8]
    de48:	and	r3, r3, #15
    de4c:	cmp	r3, #0
    de50:	bne	de90 <hexdump+0xa0>
    de54:	ldr	r3, [fp, #-8]
    de58:	cmp	r3, #0
    de5c:	beq	de78 <hexdump+0x88>
    de60:	sub	r3, fp, #32
    de64:	mov	r2, r3
    de68:	movw	r1, #0
    de6c:	movt	r1, #0
    de70:	ldr	r0, [fp, #-52]	; 0xffffffcc
    de74:	bl	0 <fprintf>
    de78:	ldr	r2, [fp, #-8]
    de7c:	movw	r1, #0
    de80:	movt	r1, #0
    de84:	ldr	r0, [fp, #-52]	; 0xffffffcc
    de88:	bl	0 <fprintf>
    de8c:	b	deac <hexdump+0xbc>
    de90:	ldr	r3, [fp, #-8]
    de94:	and	r3, r3, #7
    de98:	cmp	r3, #0
    de9c:	bne	deac <hexdump+0xbc>
    dea0:	ldr	r1, [fp, #-52]	; 0xffffffcc
    dea4:	mov	r0, #32
    dea8:	bl	0 <fputc>
    deac:	ldr	r2, [fp, #-12]
    deb0:	ldr	r3, [fp, #-8]
    deb4:	add	r3, r2, r3
    deb8:	ldrb	r3, [r3]
    debc:	mov	r2, r3
    dec0:	movw	r1, #0
    dec4:	movt	r1, #0
    dec8:	ldr	r0, [fp, #-52]	; 0xffffffcc
    decc:	bl	0 <fprintf>
    ded0:	ldr	r2, [fp, #-12]
    ded4:	ldr	r3, [fp, #-8]
    ded8:	add	r3, r2, r3
    dedc:	ldrb	r3, [r3]
    dee0:	cmp	r3, #31
    dee4:	bls	df00 <hexdump+0x110>
    dee8:	ldr	r2, [fp, #-12]
    deec:	ldr	r3, [fp, #-8]
    def0:	add	r3, r2, r3
    def4:	ldrb	r3, [r3]
    def8:	cmp	r3, #126	; 0x7e
    defc:	bls	df1c <hexdump+0x12c>
    df00:	ldr	r3, [fp, #-8]
    df04:	and	r3, r3, #15
    df08:	sub	r2, fp, #4
    df0c:	add	r3, r2, r3
    df10:	mov	r2, #46	; 0x2e
    df14:	strb	r2, [r3, #-28]	; 0xffffffe4
    df18:	b	df40 <hexdump+0x150>
    df1c:	ldr	r2, [fp, #-12]
    df20:	ldr	r3, [fp, #-8]
    df24:	add	r2, r2, r3
    df28:	ldr	r3, [fp, #-8]
    df2c:	and	r3, r3, #15
    df30:	ldrb	r2, [r2]
    df34:	sub	r1, fp, #4
    df38:	add	r3, r1, r3
    df3c:	strb	r2, [r3, #-28]	; 0xffffffe4
    df40:	ldr	r3, [fp, #-8]
    df44:	and	r3, r3, #15
    df48:	add	r3, r3, #1
    df4c:	sub	r2, fp, #4
    df50:	add	r3, r2, r3
    df54:	mov	r2, #0
    df58:	strb	r2, [r3, #-28]	; 0xffffffe4
    df5c:	ldr	r3, [fp, #-8]
    df60:	add	r3, r3, #1
    df64:	str	r3, [fp, #-8]
    df68:	ldr	r2, [fp, #-8]
    df6c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    df70:	cmp	r2, r3
    df74:	bcc	de44 <hexdump+0x54>
    df78:	b	dfa0 <hexdump+0x1b0>
    df7c:	ldr	r3, [fp, #-52]	; 0xffffffcc
    df80:	mov	r2, #3
    df84:	mov	r1, #1
    df88:	movw	r0, #0
    df8c:	movt	r0, #0
    df90:	bl	0 <fwrite>
    df94:	ldr	r3, [fp, #-8]
    df98:	add	r3, r3, #1
    df9c:	str	r3, [fp, #-8]
    dfa0:	ldr	r3, [fp, #-8]
    dfa4:	and	r3, r3, #15
    dfa8:	cmp	r3, #0
    dfac:	bne	df7c <hexdump+0x18c>
    dfb0:	sub	r3, fp, #32
    dfb4:	mov	r2, r3
    dfb8:	movw	r1, #0
    dfbc:	movt	r1, #0
    dfc0:	ldr	r0, [fp, #-52]	; 0xffffffcc
    dfc4:	bl	0 <fprintf>
    dfc8:	nop	{0}
    dfcc:	sub	sp, fp, #4
    dfd0:	ldr	fp, [sp]
    dfd4:	add	sp, sp, #4
    dfd8:	pop	{pc}		; (ldr pc, [sp], #4)

0000dfdc <elapsed_realtime>:
    dfdc:	str	fp, [sp, #-8]!
    dfe0:	str	lr, [sp, #4]
    dfe4:	add	fp, sp, #4
    dfe8:	sub	sp, sp, #8
    dfec:	sub	r3, fp, #12
    dff0:	mov	r1, #0
    dff4:	mov	r0, r3
    dff8:	bl	0 <gettimeofday>
    dffc:	movw	r3, #0
    e000:	movt	r3, #0
    e004:	ldr	r3, [r3]
    e008:	cmp	r3, #0
    e00c:	bne	e028 <elapsed_realtime+0x4c>
    e010:	movw	r3, #0
    e014:	movt	r3, #0
    e018:	mov	r1, r3
    e01c:	sub	r3, fp, #12
    e020:	ldrd	r2, [r3]
    e024:	strd	r2, [r1]
    e028:	ldr	r2, [fp, #-12]
    e02c:	movw	r3, #0
    e030:	movt	r3, #0
    e034:	ldr	r3, [r3]
    e038:	sub	r3, r2, r3
    e03c:	vmov	s15, r3
    e040:	vcvt.f64.s32	d6, s15
    e044:	ldr	r2, [fp, #-8]
    e048:	movw	r3, #0
    e04c:	movt	r3, #0
    e050:	ldr	r3, [r3, #4]
    e054:	sub	r3, r2, r3
    e058:	vmov	s15, r3
    e05c:	vcvt.f64.s32	d5, s15
    e060:	vldr	d4, [pc, #24]	; e080 <elapsed_realtime+0xa4>
    e064:	vdiv.f64	d7, d5, d4
    e068:	vadd.f64	d7, d6, d7
    e06c:	vmov.f64	d0, d7
    e070:	sub	sp, fp, #4
    e074:	ldr	fp, [sp]
    e078:	add	sp, sp, #4
    e07c:	pop	{pc}		; (ldr pc, [sp], #4)
    e080:	.word	0x00000000
    e084:	.word	0x412e8480

0000e088 <show_benchmark>:
    e088:	str	fp, [sp, #-8]!
    e08c:	str	lr, [sp, #4]
    e090:	add	fp, sp, #4
    e094:	sub	sp, sp, #48	; 0x30
    e098:	str	r0, [fp, #-24]	; 0xffffffe8
    e09c:	vstr	d0, [fp, #-36]	; 0xffffffdc
    e0a0:	vstr	d1, [fp, #-44]	; 0xffffffd4
    e0a4:	str	r1, [fp, #-28]	; 0xffffffe4
    e0a8:	str	r2, [fp, #-48]	; 0xffffffd0
    e0ac:	str	r3, [fp, #-52]	; 0xffffffcc
    e0b0:	vldr	d6, [fp, #-44]	; 0xffffffd4
    e0b4:	vldr	d7, [fp, #-36]	; 0xffffffdc
    e0b8:	vsub.f64	d7, d6, d7
    e0bc:	vstr	d7, [fp, #-12]
    e0c0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    e0c4:	movw	r0, #0
    e0c8:	movt	r0, #0
    e0cc:	bl	0 <printf>
    e0d0:	ldrd	r2, [fp, #-12]
    e0d4:	movw	r0, #0
    e0d8:	movt	r0, #0
    e0dc:	bl	0 <printf>
    e0e0:	ldr	r1, [fp, #-48]	; 0xffffffd0
    e0e4:	movw	r0, #0
    e0e8:	movt	r0, #0
    e0ec:	bl	0 <printf>
    e0f0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    e0f4:	movw	r0, #0
    e0f8:	movt	r0, #0
    e0fc:	bl	0 <printf>
    e100:	ldr	r3, [fp, #-48]	; 0xffffffd0
    e104:	vmov	s15, r3
    e108:	vcvt.f64.s32	d6, s15
    e10c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    e110:	vmov	s15, r3
    e114:	vcvt.f64.u32	d7, s15
    e118:	vmul.f64	d7, d6, d7
    e11c:	vldr	d5, [pc, #348]	; e280 <show_benchmark+0x1f8>
    e120:	vdiv.f64	d6, d7, d5
    e124:	vldr	d7, [fp, #-12]
    e128:	vdiv.f64	d5, d6, d7
    e12c:	vmov	r2, r3, d5
    e130:	movw	r0, #0
    e134:	movt	r0, #0
    e138:	bl	0 <printf>
    e13c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    e140:	vmov	s15, r3
    e144:	vcvt.f64.s32	d6, s15
    e148:	vldr	d7, [fp, #-12]
    e14c:	vdiv.f64	d5, d6, d7
    e150:	vmov	r2, r3, d5
    e154:	movw	r0, #0
    e158:	movt	r0, #0
    e15c:	bl	0 <printf>
    e160:	ldr	r3, [fp, #-52]	; 0xffffffcc
    e164:	cmp	r3, #0
    e168:	beq	e198 <show_benchmark+0x110>
    e16c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    e170:	cmp	r3, #1
    e174:	beq	e198 <show_benchmark+0x110>
    e178:	vldr	d6, [pc, #264]	; e288 <show_benchmark+0x200>
    e17c:	vldr	d7, [fp, #-12]
    e180:	vdiv.f64	d5, d6, d7
    e184:	vmov	r2, r3, d5
    e188:	ldr	r1, [fp, #-52]	; 0xffffffcc
    e18c:	movw	r0, #0
    e190:	movt	r0, #0
    e194:	bl	0 <printf>
    e198:	vldr	d7, [fp, #-12]
    e19c:	vldr	d6, [pc, #236]	; e290 <show_benchmark+0x208>
    e1a0:	vmul.f64	d5, d7, d6
    e1a4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    e1a8:	vmov	s15, r3
    e1ac:	vcvt.f64.s32	d6, s15
    e1b0:	vdiv.f64	d7, d5, d6
    e1b4:	vstr	d7, [fp, #-20]	; 0xffffffec
    e1b8:	vldr	d7, [fp, #-20]	; 0xffffffec
    e1bc:	vldr	d6, [pc, #212]	; e298 <show_benchmark+0x210>
    e1c0:	vcmpe.f64	d7, d6
    e1c4:	vmrs	APSR_nzcv, fpscr
    e1c8:	bpl	e1e0 <show_benchmark+0x158>
    e1cc:	ldrd	r2, [fp, #-20]	; 0xffffffec
    e1d0:	movw	r0, #0
    e1d4:	movt	r0, #0
    e1d8:	bl	0 <printf>
    e1dc:	b	e264 <show_benchmark+0x1dc>
    e1e0:	vldr	d7, [fp, #-20]	; 0xffffffec
    e1e4:	vldr	d6, [pc, #148]	; e280 <show_benchmark+0x1f8>
    e1e8:	vcmpe.f64	d7, d6
    e1ec:	vmrs	APSR_nzcv, fpscr
    e1f0:	bpl	e214 <show_benchmark+0x18c>
    e1f4:	vldr	d7, [fp, #-20]	; 0xffffffec
    e1f8:	vldr	d6, [pc, #152]	; e298 <show_benchmark+0x210>
    e1fc:	vdiv.f64	d5, d7, d6
    e200:	vmov	r2, r3, d5
    e204:	movw	r0, #0
    e208:	movt	r0, #0
    e20c:	bl	0 <printf>
    e210:	b	e264 <show_benchmark+0x1dc>
    e214:	vldr	d7, [fp, #-20]	; 0xffffffec
    e218:	vldr	d6, [pc, #112]	; e290 <show_benchmark+0x208>
    e21c:	vcmpe.f64	d7, d6
    e220:	vmrs	APSR_nzcv, fpscr
    e224:	bpl	e248 <show_benchmark+0x1c0>
    e228:	vldr	d7, [fp, #-20]	; 0xffffffec
    e22c:	vldr	d6, [pc, #76]	; e280 <show_benchmark+0x1f8>
    e230:	vdiv.f64	d5, d7, d6
    e234:	vmov	r2, r3, d5
    e238:	movw	r0, #0
    e23c:	movt	r0, #0
    e240:	bl	0 <printf>
    e244:	b	e264 <show_benchmark+0x1dc>
    e248:	vldr	d7, [fp, #-20]	; 0xffffffec
    e24c:	vldr	d6, [pc, #60]	; e290 <show_benchmark+0x208>
    e250:	vdiv.f64	d5, d7, d6
    e254:	vmov	r2, r3, d5
    e258:	movw	r0, #0
    e25c:	movt	r0, #0
    e260:	bl	0 <printf>
    e264:	mov	r3, #0
    e268:	mov	r0, r3
    e26c:	sub	sp, fp, #4
    e270:	ldr	fp, [sp]
    e274:	add	sp, sp, #4
    e278:	pop	{pc}		; (ldr pc, [sp], #4)
    e27c:	nop	{0}
    e280:	.word	0x00000000
    e284:	.word	0x412e8480
    e288:	.word	0x00000000
    e28c:	.word	0x3ff00000
    e290:	.word	0x00000000
    e294:	.word	0x41cdcd65
    e298:	.word	0x00000000
    e29c:	.word	0x408f4000

0000e2a0 <verify_empty_monster>:
    e2a0:	str	fp, [sp, #-8]!
    e2a4:	str	lr, [sp, #4]
    e2a8:	add	fp, sp, #4
    e2ac:	sub	sp, sp, #32
    e2b0:	str	r0, [fp, #-32]	; 0xffffffe0
    e2b4:	movw	r1, #0
    e2b8:	movt	r1, #0
    e2bc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    e2c0:	bl	30dc <MyGame_Example_Monster_as_root_with_identifier>
    e2c4:	str	r0, [fp, #-8]
    e2c8:	movw	r1, #0
    e2cc:	movt	r1, #0
    e2d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    e2d4:	bl	30dc <MyGame_Example_Monster_as_root_with_identifier>
    e2d8:	str	r0, [fp, #-12]
    e2dc:	mov	r1, #0
    e2e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    e2e4:	bl	30dc <MyGame_Example_Monster_as_root_with_identifier>
    e2e8:	str	r0, [fp, #-16]
    e2ec:	movw	r1, #0
    e2f0:	movt	r1, #0
    e2f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    e2f8:	bl	30dc <MyGame_Example_Monster_as_root_with_identifier>
    e2fc:	str	r0, [fp, #-20]	; 0xffffffec
    e300:	ldr	r0, [fp, #-32]	; 0xffffffe0
    e304:	bl	3148 <MyGame_Example_Monster_as_root>
    e308:	str	r0, [fp, #-24]	; 0xffffffe8
    e30c:	ldr	r3, [fp, #-8]
    e310:	cmp	r3, #0
    e314:	bne	e32c <verify_empty_monster+0x8c>
    e318:	movw	r0, #0
    e31c:	movt	r0, #0
    e320:	bl	0 <puts>
    e324:	mvn	r3, #0
    e328:	b	e45c <verify_empty_monster+0x1bc>
    e32c:	ldr	r3, [fp, #-12]
    e330:	cmp	r3, #0
    e334:	beq	e34c <verify_empty_monster+0xac>
    e338:	movw	r0, #0
    e33c:	movt	r0, #0
    e340:	bl	0 <puts>
    e344:	mvn	r3, #0
    e348:	b	e45c <verify_empty_monster+0x1bc>
    e34c:	ldr	r2, [fp, #-16]
    e350:	ldr	r3, [fp, #-8]
    e354:	cmp	r2, r3
    e358:	beq	e370 <verify_empty_monster+0xd0>
    e35c:	movw	r0, #0
    e360:	movt	r0, #0
    e364:	bl	0 <puts>
    e368:	mvn	r3, #0
    e36c:	b	e45c <verify_empty_monster+0x1bc>
    e370:	ldr	r2, [fp, #-20]	; 0xffffffec
    e374:	ldr	r3, [fp, #-8]
    e378:	cmp	r2, r3
    e37c:	beq	e394 <verify_empty_monster+0xf4>
    e380:	movw	r0, #0
    e384:	movt	r0, #0
    e388:	bl	0 <printf>
    e38c:	mvn	r3, #0
    e390:	b	e45c <verify_empty_monster+0x1bc>
    e394:	ldr	r2, [fp, #-24]	; 0xffffffe8
    e398:	ldr	r3, [fp, #-8]
    e39c:	cmp	r2, r3
    e3a0:	beq	e3b8 <verify_empty_monster+0x118>
    e3a4:	movw	r0, #0
    e3a8:	movt	r0, #0
    e3ac:	bl	0 <printf>
    e3b0:	mvn	r3, #0
    e3b4:	b	e45c <verify_empty_monster+0x1bc>
    e3b8:	ldr	r0, [fp, #-8]
    e3bc:	bl	3380 <MyGame_Example_Monster_hp>
    e3c0:	mov	r3, r0
    e3c4:	cmp	r3, #100	; 0x64
    e3c8:	beq	e3e0 <verify_empty_monster+0x140>
    e3cc:	movw	r0, #0
    e3d0:	movt	r0, #0
    e3d4:	bl	0 <puts>
    e3d8:	mvn	r3, #0
    e3dc:	b	e45c <verify_empty_monster+0x1bc>
    e3e0:	ldr	r0, [fp, #-8]
    e3e4:	bl	3474 <MyGame_Example_Monster_hp_is_present>
    e3e8:	mov	r3, r0
    e3ec:	cmp	r3, #0
    e3f0:	beq	e408 <verify_empty_monster+0x168>
    e3f4:	movw	r0, #0
    e3f8:	movt	r0, #0
    e3fc:	bl	0 <puts>
    e400:	mvn	r3, #0
    e404:	b	e45c <verify_empty_monster+0x1bc>
    e408:	ldr	r0, [fp, #-8]
    e40c:	bl	32a4 <MyGame_Example_Monster_pos_is_present>
    e410:	mov	r3, r0
    e414:	cmp	r3, #0
    e418:	beq	e430 <verify_empty_monster+0x190>
    e41c:	movw	r0, #0
    e420:	movt	r0, #0
    e424:	bl	0 <puts>
    e428:	mvn	r3, #0
    e42c:	b	e45c <verify_empty_monster+0x1bc>
    e430:	ldr	r0, [fp, #-8]
    e434:	bl	31bc <MyGame_Example_Monster_pos>
    e438:	mov	r3, r0
    e43c:	cmp	r3, #0
    e440:	beq	e458 <verify_empty_monster+0x1b8>
    e444:	movw	r0, #0
    e448:	movt	r0, #0
    e44c:	bl	0 <puts>
    e450:	mvn	r3, #0
    e454:	b	e45c <verify_empty_monster+0x1bc>
    e458:	mov	r3, #0
    e45c:	mov	r0, r3
    e460:	sub	sp, fp, #4
    e464:	ldr	fp, [sp]
    e468:	add	sp, sp, #4
    e46c:	pop	{pc}		; (ldr pc, [sp], #4)

0000e470 <test_enums>:
    e470:	push	{fp}		; (str fp, [sp, #-4]!)
    e474:	add	fp, sp, #0
    e478:	sub	sp, sp, #12
    e47c:	str	r0, [fp, #-8]
    e480:	mov	r3, #0
    e484:	mov	r0, r3
    e488:	add	sp, fp, #0
    e48c:	pop	{fp}		; (ldr fp, [sp], #4)
    e490:	bx	lr

0000e494 <test_type_aliases>:
    e494:	str	fp, [sp, #-8]!
    e498:	str	lr, [sp, #4]
    e49c:	add	fp, sp, #4
    e4a0:	sub	sp, sp, #72	; 0x48
    e4a4:	str	r0, [fp, #-32]	; 0xffffffe0
    e4a8:	mov	r3, #0
    e4ac:	str	r3, [fp, #-8]
    e4b0:	mov	r3, #0
    e4b4:	str	r3, [fp, #-12]
    e4b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    e4bc:	bl	0 <flatcc_builder_reset>
    e4c0:	mov	r2, #0
    e4c4:	mov	r1, #0
    e4c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    e4cc:	bl	7490 <flatbuffers_uint8_vec_create>
    e4d0:	str	r0, [fp, #-16]
    e4d4:	mov	r2, #0
    e4d8:	mov	r1, #0
    e4dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    e4e0:	bl	7a8c <flatbuffers_double_vec_create>
    e4e4:	str	r0, [fp, #-20]	; 0xffffffec
    e4e8:	ldr	r3, [fp, #-20]	; 0xffffffec
    e4ec:	str	r3, [sp, #36]	; 0x24
    e4f0:	ldr	r3, [fp, #-16]
    e4f4:	str	r3, [sp, #32]
    e4f8:	mvn	r2, #0
    e4fc:	mvn	r3, #0
    e500:	strd	r2, [sp, #24]
    e504:	mov	r2, #0
    e508:	mov	r3, #-2147483648	; 0x80000000
    e50c:	strd	r2, [sp, #16]
    e510:	mvn	r3, #0
    e514:	str	r3, [sp, #8]
    e518:	mov	r3, #-2147483648	; 0x80000000
    e51c:	str	r3, [sp, #4]
    e520:	movw	r3, #65535	; 0xffff
    e524:	str	r3, [sp]
    e528:	vldr	d1, [pc, #536]	; e748 <test_type_aliases+0x2b4>
    e52c:	vldr	s0, [pc, #540]	; e750 <test_type_aliases+0x2bc>
    e530:	mov	r3, #32768	; 0x8000
    e534:	movt	r3, #65535	; 0xffff
    e538:	mov	r2, #255	; 0xff
    e53c:	mvn	r1, #127	; 0x7f
    e540:	ldr	r0, [fp, #-32]	; 0xffffffe0
    e544:	bl	ba64 <MyGame_Example_TypeAliases_create_as_root>
    e548:	sub	r3, fp, #28
    e54c:	mov	r1, r3
    e550:	ldr	r0, [fp, #-32]	; 0xffffffe0
    e554:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    e558:	str	r0, [fp, #-12]
    e55c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    e560:	mov	r1, r3
    e564:	ldr	r0, [fp, #-12]
    e568:	bl	dbe4 <MyGame_Example_TypeAliases_verify_as_root>
    e56c:	str	r0, [fp, #-8]
    e570:	ldr	r3, [fp, #-8]
    e574:	cmp	r3, #0
    e578:	beq	e5bc <test_type_aliases+0x128>
    e57c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    e580:	movw	r3, #0
    e584:	movt	r3, #0
    e588:	ldr	r3, [r3]
    e58c:	ldr	r1, [fp, #-12]
    e590:	movw	r0, #0
    e594:	movt	r0, #0
    e598:	bl	ddf0 <hexdump>
    e59c:	ldr	r0, [fp, #-8]
    e5a0:	bl	0 <flatcc_verify_error_string>
    e5a4:	mov	r3, r0
    e5a8:	mov	r1, r3
    e5ac:	movw	r0, #0
    e5b0:	movt	r0, #0
    e5b4:	bl	0 <printf>
    e5b8:	b	e6bc <test_type_aliases+0x228>
    e5bc:	ldr	r0, [fp, #-12]
    e5c0:	bl	5980 <MyGame_Example_TypeAliases_as_root>
    e5c4:	str	r0, [fp, #-24]	; 0xffffffe8
    e5c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e5cc:	bl	59f4 <MyGame_Example_TypeAliases_i8>
    e5d0:	mov	r3, r0
    e5d4:	cmn	r3, #128	; 0x80
    e5d8:	bne	e6cc <test_type_aliases+0x238>
    e5dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e5e0:	bl	5bdc <MyGame_Example_TypeAliases_i16>
    e5e4:	mov	r3, r0
    e5e8:	cmn	r3, #32768	; 0x8000
    e5ec:	bne	e6d4 <test_type_aliases+0x240>
    e5f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e5f4:	bl	5dc4 <MyGame_Example_TypeAliases_i32>
    e5f8:	mov	r3, r0
    e5fc:	cmp	r3, #-2147483648	; 0x80000000
    e600:	bne	e6dc <test_type_aliases+0x248>
    e604:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e608:	bl	5fac <MyGame_Example_TypeAliases_i64>
    e60c:	mov	r2, r0
    e610:	mov	r3, r1
    e614:	cmp	r3, #-2147483648	; 0x80000000
    e618:	cmpeq	r2, #0
    e61c:	bne	e6e4 <test_type_aliases+0x250>
    e620:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e624:	bl	5ae8 <MyGame_Example_TypeAliases_u8>
    e628:	mov	r3, r0
    e62c:	cmp	r3, #255	; 0xff
    e630:	bne	e6ec <test_type_aliases+0x258>
    e634:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e638:	bl	5cd0 <MyGame_Example_TypeAliases_u16>
    e63c:	mov	r3, r0
    e640:	mov	r2, r3
    e644:	movw	r3, #65535	; 0xffff
    e648:	cmp	r2, r3
    e64c:	bne	e6f4 <test_type_aliases+0x260>
    e650:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e654:	bl	5eb8 <MyGame_Example_TypeAliases_u32>
    e658:	mov	r3, r0
    e65c:	cmn	r3, #1
    e660:	bne	e6fc <test_type_aliases+0x268>
    e664:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e668:	bl	60ac <MyGame_Example_TypeAliases_u64>
    e66c:	mvn	r2, #0
    e670:	mvn	r3, #0
    e674:	cmp	r1, r3
    e678:	cmpeq	r0, r2
    e67c:	bne	e704 <test_type_aliases+0x270>
    e680:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e684:	bl	61ac <MyGame_Example_TypeAliases_f32>
    e688:	vmov.f32	s14, s0
    e68c:	vldr	s15, [pc, #188]	; e750 <test_type_aliases+0x2bc>
    e690:	vcmp.f32	s14, s15
    e694:	vmrs	APSR_nzcv, fpscr
    e698:	bne	e70c <test_type_aliases+0x278>
    e69c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e6a0:	bl	62a4 <MyGame_Example_TypeAliases_f64>
    e6a4:	vmov.f64	d6, d0
    e6a8:	vldr	d7, [pc, #152]	; e748 <test_type_aliases+0x2b4>
    e6ac:	vcmp.f64	d6, d7
    e6b0:	vmrs	APSR_nzcv, fpscr
    e6b4:	bne	e714 <test_type_aliases+0x280>
    e6b8:	nop	{0}
    e6bc:	ldr	r0, [fp, #-12]
    e6c0:	bl	0 <flatcc_builder_aligned_free>
    e6c4:	ldr	r3, [fp, #-8]
    e6c8:	b	e730 <test_type_aliases+0x29c>
    e6cc:	nop	{0}
    e6d0:	b	e718 <test_type_aliases+0x284>
    e6d4:	nop	{0}
    e6d8:	b	e718 <test_type_aliases+0x284>
    e6dc:	nop	{0}
    e6e0:	b	e718 <test_type_aliases+0x284>
    e6e4:	nop	{0}
    e6e8:	b	e718 <test_type_aliases+0x284>
    e6ec:	nop	{0}
    e6f0:	b	e718 <test_type_aliases+0x284>
    e6f4:	nop	{0}
    e6f8:	b	e718 <test_type_aliases+0x284>
    e6fc:	nop	{0}
    e700:	b	e718 <test_type_aliases+0x284>
    e704:	nop	{0}
    e708:	b	e718 <test_type_aliases+0x284>
    e70c:	nop	{0}
    e710:	b	e718 <test_type_aliases+0x284>
    e714:	nop	{0}
    e718:	mvn	r3, #0
    e71c:	str	r3, [fp, #-8]
    e720:	movw	r0, #0
    e724:	movt	r0, #0
    e728:	bl	0 <puts>
    e72c:	b	e6bc <test_type_aliases+0x228>
    e730:	mov	r0, r3
    e734:	sub	sp, fp, #4
    e738:	ldr	fp, [sp]
    e73c:	add	sp, sp, #4
    e740:	pop	{pc}		; (ldr pc, [sp], #4)
    e744:	nop	{0}
    e748:	.word	0x66666666
    e74c:	.word	0x40026666
    e750:	.word	0x40133333

0000e754 <test_empty_monster>:
    e754:	str	fp, [sp, #-8]!
    e758:	str	lr, [sp, #4]
    e75c:	add	fp, sp, #4
    e760:	sub	sp, sp, #24
    e764:	str	r0, [fp, #-24]	; 0xffffffe8
    e768:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e76c:	bl	0 <flatcc_builder_reset>
    e770:	movw	r1, #0
    e774:	movt	r1, #0
    e778:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e77c:	bl	7ca0 <flatbuffers_buffer_start>
    e780:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e784:	bl	8a5c <MyGame_Example_Monster_start>
    e788:	movw	r1, #0
    e78c:	movt	r1, #0
    e790:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e794:	bl	9b94 <MyGame_Example_Monster_name_create_str>
    e798:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e79c:	bl	8a94 <MyGame_Example_Monster_end>
    e7a0:	str	r0, [fp, #-12]
    e7a4:	ldr	r1, [fp, #-12]
    e7a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e7ac:	bl	7d28 <flatbuffers_buffer_end>
    e7b0:	sub	r3, fp, #20
    e7b4:	mov	r1, r3
    e7b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e7bc:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    e7c0:	str	r0, [fp, #-16]
    e7c4:	ldr	r2, [fp, #-20]	; 0xffffffec
    e7c8:	movw	r3, #0
    e7cc:	movt	r3, #0
    e7d0:	ldr	r3, [r3]
    e7d4:	ldr	r1, [fp, #-16]
    e7d8:	movw	r0, #0
    e7dc:	movt	r0, #0
    e7e0:	bl	ddf0 <hexdump>
    e7e4:	ldr	r0, [fp, #-16]
    e7e8:	bl	e2a0 <verify_empty_monster>
    e7ec:	str	r0, [fp, #-8]
    e7f0:	ldr	r3, [fp, #-8]
    e7f4:	cmp	r3, #0
    e7f8:	bne	e87c <test_empty_monster+0x128>
    e7fc:	ldr	r3, [fp, #-20]	; 0xffffffec
    e800:	movw	r2, #0
    e804:	movt	r2, #0
    e808:	mov	r1, r3
    e80c:	ldr	r0, [fp, #-16]
    e810:	bl	d8f0 <MyGame_Example_Monster_verify_as_root_with_identifier>
    e814:	str	r0, [fp, #-8]
    e818:	ldr	r3, [fp, #-8]
    e81c:	cmp	r3, #0
    e820:	beq	e848 <test_empty_monster+0xf4>
    e824:	ldr	r0, [fp, #-8]
    e828:	bl	0 <flatcc_verify_error_string>
    e82c:	mov	r3, r0
    e830:	mov	r1, r3
    e834:	movw	r0, #0
    e838:	movt	r0, #0
    e83c:	bl	0 <printf>
    e840:	mvn	r3, #0
    e844:	b	e894 <test_empty_monster+0x140>
    e848:	ldr	r3, [fp, #-20]	; 0xffffffec
    e84c:	sub	r3, r3, #1
    e850:	mov	r1, r3
    e854:	ldr	r0, [fp, #-16]
    e858:	bl	d858 <MyGame_Example_Monster_verify_as_root>
    e85c:	mov	r3, r0
    e860:	cmp	r3, #0
    e864:	bne	e884 <test_empty_monster+0x130>
    e868:	movw	r0, #0
    e86c:	movt	r0, #0
    e870:	bl	0 <puts>
    e874:	mvn	r3, #0
    e878:	b	e894 <test_empty_monster+0x140>
    e87c:	nop	{0}
    e880:	b	e888 <test_empty_monster+0x134>
    e884:	nop	{0}
    e888:	ldr	r0, [fp, #-16]
    e88c:	bl	0 <flatcc_builder_aligned_free>
    e890:	ldr	r3, [fp, #-8]
    e894:	mov	r0, r3
    e898:	sub	sp, fp, #4
    e89c:	ldr	fp, [sp]
    e8a0:	add	sp, sp, #4
    e8a4:	pop	{pc}		; (ldr pc, [sp], #4)

0000e8a8 <test_typed_empty_monster>:
    e8a8:	str	r4, [sp, #-12]!
    e8ac:	str	fp, [sp, #4]
    e8b0:	str	lr, [sp, #8]
    e8b4:	add	fp, sp, #8
    e8b8:	sub	sp, sp, #36	; 0x24
    e8bc:	str	r0, [fp, #-40]	; 0xffffffd8
    e8c0:	mvn	r3, #0
    e8c4:	str	r3, [fp, #-16]
    e8c8:	mov	r3, #0
    e8cc:	str	r3, [fp, #-32]	; 0xffffffe0
    e8d0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    e8d4:	bl	0 <flatcc_builder_reset>
    e8d8:	movw	r1, #0
    e8dc:	movt	r1, #0
    e8e0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    e8e4:	bl	7ca0 <flatbuffers_buffer_start>
    e8e8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    e8ec:	bl	8a5c <MyGame_Example_Monster_start>
    e8f0:	movw	r1, #0
    e8f4:	movt	r1, #0
    e8f8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    e8fc:	bl	9b94 <MyGame_Example_Monster_name_create_str>
    e900:	ldr	r0, [fp, #-40]	; 0xffffffd8
    e904:	bl	8a94 <MyGame_Example_Monster_end>
    e908:	str	r0, [fp, #-20]	; 0xffffffec
    e90c:	ldr	r1, [fp, #-20]	; 0xffffffec
    e910:	ldr	r0, [fp, #-40]	; 0xffffffd8
    e914:	bl	7d28 <flatbuffers_buffer_end>
    e918:	sub	r3, fp, #28
    e91c:	mov	r1, r3
    e920:	ldr	r0, [fp, #-40]	; 0xffffffd8
    e924:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    e928:	str	r0, [fp, #-24]	; 0xffffffe8
    e92c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    e930:	movw	r3, #0
    e934:	movt	r3, #0
    e938:	ldr	r3, [r3]
    e93c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    e940:	movw	r0, #0
    e944:	movt	r0, #0
    e948:	bl	ddf0 <hexdump>
    e94c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e950:	bl	1d54 <flatbuffers_get_type_hash>
    e954:	mov	r4, r0
    e958:	movw	r0, #0
    e95c:	movt	r0, #0
    e960:	bl	96c <flatbuffers_type_hash_from_name>
    e964:	mov	r3, r0
    e968:	cmp	r4, r3
    e96c:	beq	e990 <test_typed_empty_monster+0xe8>
    e970:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e974:	bl	1d54 <flatbuffers_get_type_hash>
    e978:	mov	r3, r0
    e97c:	mov	r1, r3
    e980:	movw	r0, #0
    e984:	movt	r0, #0
    e988:	bl	0 <printf>
    e98c:	b	ebbc <test_typed_empty_monster+0x314>
    e990:	movw	r1, #62593	; 0xf481
    e994:	movt	r1, #13070	; 0x330e
    e998:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e99c:	bl	1cf0 <flatbuffers_has_type_hash>
    e9a0:	mov	r3, r0
    e9a4:	cmp	r3, #0
    e9a8:	bne	e9bc <test_typed_empty_monster+0x114>
    e9ac:	movw	r0, #0
    e9b0:	movt	r0, #0
    e9b4:	bl	0 <puts>
    e9b8:	b	ebbc <test_typed_empty_monster+0x314>
    e9bc:	movw	r1, #62593	; 0xf481
    e9c0:	movt	r1, #13070	; 0x330e
    e9c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e9c8:	bl	1cf0 <flatbuffers_has_type_hash>
    e9cc:	mov	r3, r0
    e9d0:	cmp	r3, #0
    e9d4:	bne	e9e8 <test_typed_empty_monster+0x140>
    e9d8:	movw	r0, #0
    e9dc:	movt	r0, #0
    e9e0:	bl	0 <puts>
    e9e4:	b	ebbc <test_typed_empty_monster+0x314>
    e9e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e9ec:	bl	e2a0 <verify_empty_monster>
    e9f0:	mov	r3, r0
    e9f4:	cmp	r3, #0
    e9f8:	bne	ea0c <test_typed_empty_monster+0x164>
    e9fc:	movw	r0, #0
    ea00:	movt	r0, #0
    ea04:	bl	0 <puts>
    ea08:	b	ebbc <test_typed_empty_monster+0x314>
    ea0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    ea10:	movw	r2, #0
    ea14:	movt	r2, #0
    ea18:	mov	r1, r3
    ea1c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ea20:	bl	d8f0 <MyGame_Example_Monster_verify_as_root_with_identifier>
    ea24:	str	r0, [fp, #-16]
    ea28:	ldr	r3, [fp, #-16]
    ea2c:	cmp	r3, #0
    ea30:	beq	ea54 <test_typed_empty_monster+0x1ac>
    ea34:	ldr	r0, [fp, #-16]
    ea38:	bl	0 <flatcc_verify_error_string>
    ea3c:	mov	r3, r0
    ea40:	mov	r1, r3
    ea44:	movw	r0, #0
    ea48:	movt	r0, #0
    ea4c:	bl	0 <printf>
    ea50:	b	ebbc <test_typed_empty_monster+0x314>
    ea54:	ldr	r3, [fp, #-28]	; 0xffffffe4
    ea58:	mov	r1, r3
    ea5c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ea60:	bl	d8a4 <MyGame_Example_Monster_verify_as_typed_root>
    ea64:	str	r0, [fp, #-16]
    ea68:	ldr	r3, [fp, #-16]
    ea6c:	cmp	r3, #0
    ea70:	beq	ea94 <test_typed_empty_monster+0x1ec>
    ea74:	ldr	r0, [fp, #-16]
    ea78:	bl	0 <flatcc_verify_error_string>
    ea7c:	mov	r3, r0
    ea80:	mov	r1, r3
    ea84:	movw	r0, #0
    ea88:	movt	r0, #0
    ea8c:	bl	0 <printf>
    ea90:	b	ebbc <test_typed_empty_monster+0x314>
    ea94:	ldr	r3, [fp, #-28]	; 0xffffffe4
    ea98:	movw	r2, #62593	; 0xf481
    ea9c:	movt	r2, #13070	; 0x330e
    eaa0:	mov	r1, r3
    eaa4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    eaa8:	bl	d93c <MyGame_Example_Monster_verify_as_root_with_type_hash>
    eaac:	str	r0, [fp, #-16]
    eab0:	ldr	r3, [fp, #-16]
    eab4:	cmp	r3, #0
    eab8:	beq	eadc <test_typed_empty_monster+0x234>
    eabc:	ldr	r0, [fp, #-16]
    eac0:	bl	0 <flatcc_verify_error_string>
    eac4:	mov	r3, r0
    eac8:	mov	r1, r3
    eacc:	movw	r0, #0
    ead0:	movt	r0, #0
    ead4:	bl	0 <printf>
    ead8:	b	ebbc <test_typed_empty_monster+0x314>
    eadc:	ldr	r4, [fp, #-28]	; 0xffffffe4
    eae0:	movw	r0, #0
    eae4:	movt	r0, #0
    eae8:	bl	96c <flatbuffers_type_hash_from_name>
    eaec:	mov	r3, r0
    eaf0:	mov	r2, r3
    eaf4:	mov	r1, r4
    eaf8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    eafc:	bl	d93c <MyGame_Example_Monster_verify_as_root_with_type_hash>
    eb00:	str	r0, [fp, #-16]
    eb04:	ldr	r3, [fp, #-16]
    eb08:	cmp	r3, #0
    eb0c:	beq	eb30 <test_typed_empty_monster+0x288>
    eb10:	ldr	r0, [fp, #-16]
    eb14:	bl	0 <flatcc_verify_error_string>
    eb18:	mov	r3, r0
    eb1c:	mov	r1, r3
    eb20:	movw	r0, #0
    eb24:	movt	r0, #0
    eb28:	bl	0 <printf>
    eb2c:	b	ebbc <test_typed_empty_monster+0x314>
    eb30:	sub	r3, fp, #32
    eb34:	mov	r1, r3
    eb38:	movw	r0, #62593	; 0xf481
    eb3c:	movt	r0, #13070	; 0x330e
    eb40:	bl	a00 <flatbuffers_identifier_from_type_hash>
    eb44:	ldr	r3, [fp, #-28]	; 0xffffffe4
    eb48:	sub	r2, fp, #32
    eb4c:	mov	r1, r3
    eb50:	ldr	r0, [fp, #-24]	; 0xffffffe8
    eb54:	bl	d8f0 <MyGame_Example_Monster_verify_as_root_with_identifier>
    eb58:	str	r0, [fp, #-16]
    eb5c:	ldr	r3, [fp, #-16]
    eb60:	cmp	r3, #0
    eb64:	beq	eb88 <test_typed_empty_monster+0x2e0>
    eb68:	ldr	r0, [fp, #-16]
    eb6c:	bl	0 <flatcc_verify_error_string>
    eb70:	mov	r3, r0
    eb74:	mov	r1, r3
    eb78:	movw	r0, #0
    eb7c:	movt	r0, #0
    eb80:	bl	0 <printf>
    eb84:	b	ebbc <test_typed_empty_monster+0x314>
    eb88:	ldr	r3, [fp, #-28]	; 0xffffffe4
    eb8c:	mov	r1, r3
    eb90:	ldr	r0, [fp, #-24]	; 0xffffffe8
    eb94:	bl	d858 <MyGame_Example_Monster_verify_as_root>
    eb98:	mov	r3, r0
    eb9c:	cmp	r3, #0
    eba0:	bne	ebb4 <test_typed_empty_monster+0x30c>
    eba4:	movw	r0, #0
    eba8:	movt	r0, #0
    ebac:	bl	0 <puts>
    ebb0:	b	ebbc <test_typed_empty_monster+0x314>
    ebb4:	mov	r3, #0
    ebb8:	str	r3, [fp, #-16]
    ebbc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ebc0:	bl	0 <flatcc_builder_aligned_free>
    ebc4:	ldr	r3, [fp, #-16]
    ebc8:	mov	r0, r3
    ebcc:	sub	sp, fp, #8
    ebd0:	ldr	r4, [sp]
    ebd4:	ldr	fp, [sp, #4]
    ebd8:	add	sp, sp, #8
    ebdc:	pop	{pc}		; (ldr pc, [sp], #4)

0000ebe0 <verify_table_with_emptystruct>:
    ebe0:	str	fp, [sp, #-8]!
    ebe4:	str	lr, [sp, #4]
    ebe8:	add	fp, sp, #4
    ebec:	sub	sp, sp, #16
    ebf0:	str	r0, [fp, #-16]
    ebf4:	ldr	r0, [fp, #-16]
    ebf8:	bl	261c <MyGame_Example_with_emptystruct_as_root>
    ebfc:	str	r0, [fp, #-8]
    ec00:	ldr	r3, [fp, #-8]
    ec04:	cmp	r3, #0
    ec08:	bne	ec20 <verify_table_with_emptystruct+0x40>
    ec0c:	movw	r0, #0
    ec10:	movt	r0, #0
    ec14:	bl	0 <puts>
    ec18:	mvn	r3, #0
    ec1c:	b	ec74 <verify_table_with_emptystruct+0x94>
    ec20:	ldr	r0, [fp, #-8]
    ec24:	bl	26fc <MyGame_Example_with_emptystruct_empty>
    ec28:	str	r0, [fp, #-12]
    ec2c:	ldr	r3, [fp, #-12]
    ec30:	cmp	r3, #0
    ec34:	bne	ec4c <verify_table_with_emptystruct+0x6c>
    ec38:	movw	r0, #0
    ec3c:	movt	r0, #0
    ec40:	bl	0 <puts>
    ec44:	mvn	r3, #0
    ec48:	b	ec74 <verify_table_with_emptystruct+0x94>
    ec4c:	bl	20e8 <MyGame_Example_emptystruct__size>
    ec50:	mov	r3, r0
    ec54:	cmp	r3, #0
    ec58:	beq	ec70 <verify_table_with_emptystruct+0x90>
    ec5c:	movw	r0, #0
    ec60:	movt	r0, #0
    ec64:	bl	0 <puts>
    ec68:	mvn	r3, #0
    ec6c:	b	ec74 <verify_table_with_emptystruct+0x94>
    ec70:	mov	r3, #0
    ec74:	mov	r0, r3
    ec78:	sub	sp, fp, #4
    ec7c:	ldr	fp, [sp]
    ec80:	add	sp, sp, #4
    ec84:	pop	{pc}		; (ldr pc, [sp], #4)

0000ec88 <test_table_with_emptystruct>:
    ec88:	str	fp, [sp, #-8]!
    ec8c:	str	lr, [sp, #4]
    ec90:	add	fp, sp, #4
    ec94:	sub	sp, sp, #24
    ec98:	str	r0, [fp, #-24]	; 0xffffffe8
    ec9c:	mov	r3, #0
    eca0:	str	r3, [fp, #-8]
    eca4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    eca8:	bl	0 <flatcc_builder_reset>
    ecac:	ldr	r1, [fp, #-8]
    ecb0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ecb4:	bl	9154 <MyGame_Example_with_emptystruct_create_as_root>
    ecb8:	sub	r3, fp, #20
    ecbc:	mov	r1, r3
    ecc0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ecc4:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    ecc8:	str	r0, [fp, #-12]
    eccc:	ldr	r2, [fp, #-20]	; 0xffffffec
    ecd0:	movw	r3, #0
    ecd4:	movt	r3, #0
    ecd8:	ldr	r3, [r3]
    ecdc:	ldr	r1, [fp, #-12]
    ece0:	movw	r0, #0
    ece4:	movt	r0, #0
    ece8:	bl	ddf0 <hexdump>
    ecec:	ldr	r0, [fp, #-12]
    ecf0:	bl	ebe0 <verify_table_with_emptystruct>
    ecf4:	str	r0, [fp, #-16]
    ecf8:	ldr	r0, [fp, #-12]
    ecfc:	bl	0 <flatcc_builder_aligned_free>
    ed00:	ldr	r3, [fp, #-16]
    ed04:	mov	r0, r3
    ed08:	sub	sp, fp, #4
    ed0c:	ldr	fp, [sp]
    ed10:	add	sp, sp, #4
    ed14:	pop	{pc}		; (ldr pc, [sp], #4)

0000ed18 <test_typed_table_with_emptystruct>:
    ed18:	str	fp, [sp, #-8]!
    ed1c:	str	lr, [sp, #4]
    ed20:	add	fp, sp, #4
    ed24:	sub	sp, sp, #24
    ed28:	str	r0, [fp, #-24]	; 0xffffffe8
    ed2c:	mov	r3, #0
    ed30:	str	r3, [fp, #-8]
    ed34:	mov	r3, #0
    ed38:	str	r3, [fp, #-12]
    ed3c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ed40:	bl	0 <flatcc_builder_reset>
    ed44:	ldr	r1, [fp, #-12]
    ed48:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ed4c:	bl	91c4 <MyGame_Example_with_emptystruct_create_as_typed_root>
    ed50:	sub	r3, fp, #20
    ed54:	mov	r1, r3
    ed58:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ed5c:	bl	0 <flatcc_builder_get_direct_buffer>
    ed60:	str	r0, [fp, #-16]
    ed64:	ldr	r2, [fp, #-20]	; 0xffffffec
    ed68:	movw	r3, #0
    ed6c:	movt	r3, #0
    ed70:	ldr	r3, [r3]
    ed74:	ldr	r1, [fp, #-16]
    ed78:	movw	r0, #0
    ed7c:	movt	r0, #0
    ed80:	bl	ddf0 <hexdump>
    ed84:	ldr	r3, [fp, #-20]	; 0xffffffec
    ed88:	movw	r2, #0
    ed8c:	movt	r2, #0
    ed90:	mov	r1, r3
    ed94:	ldr	r0, [fp, #-16]
    ed98:	bl	c950 <MyGame_Example_with_emptystruct_verify_as_root_with_identifier>
    ed9c:	mov	r3, r0
    eda0:	cmp	r3, #0
    eda4:	beq	edbc <test_typed_table_with_emptystruct+0xa4>
    eda8:	movw	r0, #0
    edac:	movt	r0, #0
    edb0:	bl	0 <puts>
    edb4:	mvn	r3, #0
    edb8:	b	f004 <test_typed_table_with_emptystruct+0x2ec>
    edbc:	ldr	r3, [fp, #-20]	; 0xffffffec
    edc0:	mov	r1, r3
    edc4:	ldr	r0, [fp, #-16]
    edc8:	bl	c904 <MyGame_Example_with_emptystruct_verify_as_typed_root>
    edcc:	mov	r3, r0
    edd0:	cmp	r3, #0
    edd4:	beq	edec <test_typed_table_with_emptystruct+0xd4>
    edd8:	movw	r0, #0
    eddc:	movt	r0, #0
    ede0:	bl	0 <puts>
    ede4:	mvn	r3, #0
    ede8:	b	f004 <test_typed_table_with_emptystruct+0x2ec>
    edec:	ldr	r3, [fp, #-20]	; 0xffffffec
    edf0:	movw	r2, #14262	; 0x37b6
    edf4:	movt	r2, #45277	; 0xb0dd
    edf8:	mov	r1, r3
    edfc:	ldr	r0, [fp, #-16]
    ee00:	bl	c99c <MyGame_Example_with_emptystruct_verify_as_root_with_type_hash>
    ee04:	mov	r3, r0
    ee08:	cmp	r3, #0
    ee0c:	beq	ee24 <test_typed_table_with_emptystruct+0x10c>
    ee10:	movw	r0, #0
    ee14:	movt	r0, #0
    ee18:	bl	0 <puts>
    ee1c:	mvn	r3, #0
    ee20:	b	f004 <test_typed_table_with_emptystruct+0x2ec>
    ee24:	ldr	r3, [fp, #-16]
    ee28:	cmp	r3, #0
    ee2c:	bne	ee44 <test_typed_table_with_emptystruct+0x12c>
    ee30:	movw	r0, #0
    ee34:	movt	r0, #0
    ee38:	bl	0 <puts>
    ee3c:	mvn	r3, #0
    ee40:	b	f004 <test_typed_table_with_emptystruct+0x2ec>
    ee44:	movw	r1, #14262	; 0x37b6
    ee48:	movt	r1, #45277	; 0xb0dd
    ee4c:	ldr	r0, [fp, #-16]
    ee50:	bl	1cf0 <flatbuffers_has_type_hash>
    ee54:	mov	r3, r0
    ee58:	cmp	r3, #0
    ee5c:	bne	ee74 <test_typed_table_with_emptystruct+0x15c>
    ee60:	movw	r0, #0
    ee64:	movt	r0, #0
    ee68:	bl	0 <puts>
    ee6c:	mvn	r3, #0
    ee70:	b	f004 <test_typed_table_with_emptystruct+0x2ec>
    ee74:	mov	r1, #0
    ee78:	ldr	r0, [fp, #-16]
    ee7c:	bl	1cf0 <flatbuffers_has_type_hash>
    ee80:	mov	r3, r0
    ee84:	cmp	r3, #0
    ee88:	bne	eea0 <test_typed_table_with_emptystruct+0x188>
    ee8c:	movw	r0, #0
    ee90:	movt	r0, #0
    ee94:	bl	0 <puts>
    ee98:	mvn	r3, #0
    ee9c:	b	f004 <test_typed_table_with_emptystruct+0x2ec>
    eea0:	mov	r1, #1
    eea4:	ldr	r0, [fp, #-16]
    eea8:	bl	1cf0 <flatbuffers_has_type_hash>
    eeac:	mov	r3, r0
    eeb0:	cmp	r3, #0
    eeb4:	beq	eecc <test_typed_table_with_emptystruct+0x1b4>
    eeb8:	movw	r0, #0
    eebc:	movt	r0, #0
    eec0:	bl	0 <puts>
    eec4:	mvn	r3, #0
    eec8:	b	f004 <test_typed_table_with_emptystruct+0x2ec>
    eecc:	mov	r1, #0
    eed0:	ldr	r0, [fp, #-16]
    eed4:	bl	1c44 <flatbuffers_has_identifier>
    eed8:	mov	r3, r0
    eedc:	cmp	r3, #0
    eee0:	bne	eef8 <test_typed_table_with_emptystruct+0x1e0>
    eee4:	movw	r0, #0
    eee8:	movt	r0, #0
    eeec:	bl	0 <puts>
    eef0:	mvn	r3, #0
    eef4:	b	f004 <test_typed_table_with_emptystruct+0x2ec>
    eef8:	movw	r1, #0
    eefc:	movt	r1, #0
    ef00:	ldr	r0, [fp, #-16]
    ef04:	bl	1c44 <flatbuffers_has_identifier>
    ef08:	mov	r3, r0
    ef0c:	cmp	r3, #0
    ef10:	bne	ef28 <test_typed_table_with_emptystruct+0x210>
    ef14:	movw	r0, #0
    ef18:	movt	r0, #0
    ef1c:	bl	0 <puts>
    ef20:	mvn	r3, #0
    ef24:	b	f004 <test_typed_table_with_emptystruct+0x2ec>
    ef28:	ldr	r0, [fp, #-16]
    ef2c:	bl	261c <MyGame_Example_with_emptystruct_as_root>
    ef30:	mov	r3, r0
    ef34:	cmp	r3, #0
    ef38:	beq	ef50 <test_typed_table_with_emptystruct+0x238>
    ef3c:	movw	r0, #0
    ef40:	movt	r0, #0
    ef44:	bl	0 <puts>
    ef48:	mvn	r3, #0
    ef4c:	b	f004 <test_typed_table_with_emptystruct+0x2ec>
    ef50:	mov	r1, #1
    ef54:	ldr	r0, [fp, #-16]
    ef58:	bl	25b0 <MyGame_Example_with_emptystruct_as_root_with_type_hash>
    ef5c:	mov	r3, r0
    ef60:	cmp	r3, #0
    ef64:	beq	ef7c <test_typed_table_with_emptystruct+0x264>
    ef68:	movw	r0, #0
    ef6c:	movt	r0, #0
    ef70:	bl	0 <puts>
    ef74:	mvn	r3, #0
    ef78:	b	f004 <test_typed_table_with_emptystruct+0x2ec>
    ef7c:	movw	r1, #0
    ef80:	movt	r1, #0
    ef84:	ldr	r0, [fp, #-16]
    ef88:	bl	2544 <MyGame_Example_with_emptystruct_as_root_with_identifier>
    ef8c:	mov	r3, r0
    ef90:	cmp	r3, #0
    ef94:	bne	efac <test_typed_table_with_emptystruct+0x294>
    ef98:	movw	r0, #0
    ef9c:	movt	r0, #0
    efa0:	bl	0 <puts>
    efa4:	mvn	r3, #0
    efa8:	b	f004 <test_typed_table_with_emptystruct+0x2ec>
    efac:	ldr	r0, [fp, #-16]
    efb0:	bl	2690 <MyGame_Example_with_emptystruct_as_typed_root>
    efb4:	mov	r3, r0
    efb8:	cmp	r3, #0
    efbc:	bne	efd4 <test_typed_table_with_emptystruct+0x2bc>
    efc0:	movw	r0, #0
    efc4:	movt	r0, #0
    efc8:	bl	0 <puts>
    efcc:	mvn	r3, #0
    efd0:	b	f004 <test_typed_table_with_emptystruct+0x2ec>
    efd4:	mov	r1, #0
    efd8:	ldr	r0, [fp, #-16]
    efdc:	bl	25b0 <MyGame_Example_with_emptystruct_as_root_with_type_hash>
    efe0:	mov	r3, r0
    efe4:	cmp	r3, #0
    efe8:	bne	f000 <test_typed_table_with_emptystruct+0x2e8>
    efec:	movw	r0, #0
    eff0:	movt	r0, #0
    eff4:	bl	0 <puts>
    eff8:	mvn	r3, #0
    effc:	b	f004 <test_typed_table_with_emptystruct+0x2ec>
    f000:	ldr	r3, [fp, #-8]
    f004:	mov	r0, r3
    f008:	sub	sp, fp, #4
    f00c:	ldr	fp, [sp]
    f010:	add	sp, sp, #4
    f014:	pop	{pc}		; (ldr pc, [sp], #4)

0000f018 <verify_monster>:
    f018:	str	r4, [sp, #-12]!
    f01c:	str	fp, [sp, #4]
    f020:	str	lr, [sp, #8]
    f024:	add	fp, sp, #8
    f028:	sub	sp, sp, #164	; 0xa4
    f02c:	str	r0, [fp, #-168]	; 0xffffff58
    f030:	sub	r3, fp, #12
    f034:	sub	r3, r3, #152	; 0x98
    f038:	add	r3, r3, #15
    f03c:	lsr	r3, r3, #4
    f040:	lsl	r4, r3, #4
    f044:	movw	r2, #0
    f048:	movt	r2, #0
    f04c:	sub	r3, fp, #104	; 0x68
    f050:	ldrd	r0, [r2]
    f054:	strd	r0, [r3]
    f058:	ldrd	r0, [r2, #8]
    f05c:	strd	r0, [r3, #8]
    f060:	ldr	r2, [r2, #16]
    f064:	str	r2, [r3, #16]
    f068:	movw	r3, #0
    f06c:	movt	r3, #0
    f070:	sub	r1, fp, #120	; 0x78
    f074:	mov	r0, r3
    f078:	ldrd	r2, [r0]
    f07c:	strd	r2, [r1]
    f080:	ldrd	r2, [r0, #8]
    f084:	strd	r2, [r1, #8]
    f088:	mov	r1, #0
    f08c:	ldr	r0, [fp, #-168]	; 0xffffff58
    f090:	bl	1c44 <flatbuffers_has_identifier>
    f094:	mov	r3, r0
    f098:	cmp	r3, #0
    f09c:	bne	f0b4 <verify_monster+0x9c>
    f0a0:	movw	r0, #0
    f0a4:	movt	r0, #0
    f0a8:	bl	0 <puts>
    f0ac:	mvn	r3, #0
    f0b0:	b	ff34 <verify_monster+0xf1c>
    f0b4:	movw	r1, #0
    f0b8:	movt	r1, #0
    f0bc:	ldr	r0, [fp, #-168]	; 0xffffff58
    f0c0:	bl	1c44 <flatbuffers_has_identifier>
    f0c4:	mov	r3, r0
    f0c8:	cmp	r3, #0
    f0cc:	bne	f0e4 <verify_monster+0xcc>
    f0d0:	movw	r0, #0
    f0d4:	movt	r0, #0
    f0d8:	bl	0 <puts>
    f0dc:	mvn	r3, #0
    f0e0:	b	ff34 <verify_monster+0xf1c>
    f0e4:	movw	r1, #0
    f0e8:	movt	r1, #0
    f0ec:	ldr	r0, [fp, #-168]	; 0xffffff58
    f0f0:	bl	1c44 <flatbuffers_has_identifier>
    f0f4:	mov	r3, r0
    f0f8:	cmp	r3, #0
    f0fc:	bne	f114 <verify_monster+0xfc>
    f100:	movw	r0, #0
    f104:	movt	r0, #0
    f108:	bl	0 <puts>
    f10c:	mvn	r3, #0
    f110:	b	ff34 <verify_monster+0xf1c>
    f114:	movw	r1, #0
    f118:	movt	r1, #0
    f11c:	ldr	r0, [fp, #-168]	; 0xffffff58
    f120:	bl	1c44 <flatbuffers_has_identifier>
    f124:	mov	r3, r0
    f128:	cmp	r3, #0
    f12c:	beq	f144 <verify_monster+0x12c>
    f130:	movw	r0, #0
    f134:	movt	r0, #0
    f138:	bl	0 <puts>
    f13c:	mvn	r3, #0
    f140:	b	ff34 <verify_monster+0xf1c>
    f144:	movw	r1, #0
    f148:	movt	r1, #0
    f14c:	ldr	r0, [fp, #-168]	; 0xffffff58
    f150:	bl	1c44 <flatbuffers_has_identifier>
    f154:	mov	r3, r0
    f158:	cmp	r3, #0
    f15c:	bne	f174 <verify_monster+0x15c>
    f160:	movw	r0, #0
    f164:	movt	r0, #0
    f168:	bl	0 <puts>
    f16c:	mvn	r3, #0
    f170:	b	ff34 <verify_monster+0xf1c>
    f174:	ldr	r0, [fp, #-168]	; 0xffffff58
    f178:	bl	3148 <MyGame_Example_Monster_as_root>
    f17c:	str	r0, [fp, #-20]	; 0xffffffec
    f180:	ldr	r3, [fp, #-20]	; 0xffffffec
    f184:	cmp	r3, #0
    f188:	bne	f1a0 <verify_monster+0x188>
    f18c:	movw	r0, #0
    f190:	movt	r0, #0
    f194:	bl	0 <puts>
    f198:	mvn	r3, #0
    f19c:	b	ff34 <verify_monster+0xf1c>
    f1a0:	ldr	r0, [fp, #-20]	; 0xffffffec
    f1a4:	bl	3380 <MyGame_Example_Monster_hp>
    f1a8:	mov	r3, r0
    f1ac:	cmp	r3, #80	; 0x50
    f1b0:	beq	f1c8 <verify_monster+0x1b0>
    f1b4:	movw	r0, #0
    f1b8:	movt	r0, #0
    f1bc:	bl	0 <puts>
    f1c0:	mvn	r3, #0
    f1c4:	b	ff34 <verify_monster+0xf1c>
    f1c8:	ldr	r0, [fp, #-20]	; 0xffffffec
    f1cc:	bl	31bc <MyGame_Example_Monster_pos>
    f1d0:	str	r0, [fp, #-24]	; 0xffffffe8
    f1d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    f1d8:	cmp	r3, #0
    f1dc:	bne	f1f4 <verify_monster+0x1dc>
    f1e0:	movw	r0, #0
    f1e4:	movt	r0, #0
    f1e8:	bl	0 <puts>
    f1ec:	mvn	r3, #0
    f1f0:	b	ff34 <verify_monster+0xf1c>
    f1f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    f1f8:	and	r3, r3, #15
    f1fc:	cmp	r3, #0
    f200:	beq	f210 <verify_monster+0x1f8>
    f204:	movw	r0, #0
    f208:	movt	r0, #0
    f20c:	bl	0 <puts>
    f210:	ldr	r0, [fp, #-24]	; 0xffffffe8
    f214:	bl	22d8 <MyGame_Example_Vec3_z>
    f218:	vmov.f32	s14, s0
    f21c:	vldr	s15, [pc, #968]	; f5ec <verify_monster+0x5d4>
    f220:	vcmp.f32	s14, s15
    f224:	vmrs	APSR_nzcv, fpscr
    f228:	beq	f240 <verify_monster+0x228>
    f22c:	movw	r0, #0
    f230:	movt	r0, #0
    f234:	bl	0 <puts>
    f238:	mvn	r3, #0
    f23c:	b	ff34 <verify_monster+0xf1c>
    f240:	ldr	r3, [fp, #-24]	; 0xffffffe8
    f244:	vldr	s15, [r3]
    f248:	vldr	s14, [pc, #928]	; f5f0 <verify_monster+0x5d8>
    f24c:	vcmp.f32	s15, s14
    f250:	vmrs	APSR_nzcv, fpscr
    f254:	bne	f288 <verify_monster+0x270>
    f258:	ldr	r3, [fp, #-24]	; 0xffffffe8
    f25c:	vldr	s15, [r3, #4]
    f260:	vldr	s14, [pc, #908]	; f5f4 <verify_monster+0x5dc>
    f264:	vcmp.f32	s15, s14
    f268:	vmrs	APSR_nzcv, fpscr
    f26c:	bne	f288 <verify_monster+0x270>
    f270:	ldr	r3, [fp, #-24]	; 0xffffffe8
    f274:	vldr	s15, [r3, #8]
    f278:	vldr	s14, [pc, #876]	; f5ec <verify_monster+0x5d4>
    f27c:	vcmp.f32	s15, s14
    f280:	vmrs	APSR_nzcv, fpscr
    f284:	beq	f29c <verify_monster+0x284>
    f288:	movw	r0, #0
    f28c:	movt	r0, #0
    f290:	bl	0 <puts>
    f294:	mvn	r3, #0
    f298:	b	ff34 <verify_monster+0xf1c>
    f29c:	mov	r0, r4
    f2a0:	bl	8280 <MyGame_Example_Vec3_clear>
    f2a4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    f2a8:	mov	r0, r4
    f2ac:	bl	8198 <MyGame_Example_Vec3_copy_from_pe>
    f2b0:	vldr	s15, [r4]
    f2b4:	vldr	s14, [pc, #820]	; f5f0 <verify_monster+0x5d8>
    f2b8:	vcmp.f32	s15, s14
    f2bc:	vmrs	APSR_nzcv, fpscr
    f2c0:	bne	f2ec <verify_monster+0x2d4>
    f2c4:	vldr	s15, [r4, #4]
    f2c8:	vldr	s14, [pc, #804]	; f5f4 <verify_monster+0x5dc>
    f2cc:	vcmp.f32	s15, s14
    f2d0:	vmrs	APSR_nzcv, fpscr
    f2d4:	bne	f2ec <verify_monster+0x2d4>
    f2d8:	vldr	s15, [r4, #8]
    f2dc:	vldr	s14, [pc, #776]	; f5ec <verify_monster+0x5d4>
    f2e0:	vcmp.f32	s15, s14
    f2e4:	vmrs	APSR_nzcv, fpscr
    f2e8:	beq	f300 <verify_monster+0x2e8>
    f2ec:	movw	r0, #0
    f2f0:	movt	r0, #0
    f2f4:	bl	0 <puts>
    f2f8:	mvn	r3, #0
    f2fc:	b	ff34 <verify_monster+0xf1c>
    f300:	ldr	r3, [fp, #-24]	; 0xffffffe8
    f304:	vldr	d7, [r3, #16]
    f308:	vcmp.f64	d7, #0.0
    f30c:	vmrs	APSR_nzcv, fpscr
    f310:	bne	f350 <verify_monster+0x338>
    f314:	ldr	r3, [fp, #-24]	; 0xffffffe8
    f318:	vldr	d7, [r3, #16]
    f31c:	vcmp.f64	d7, #0.0
    f320:	vmrs	APSR_nzcv, fpscr
    f324:	bne	f350 <verify_monster+0x338>
    f328:	ldr	r3, [fp, #-24]	; 0xffffffe8
    f32c:	add	r3, r3, #26
    f330:	mov	r2, #4
    f334:	movw	r1, #0
    f338:	movt	r1, #0
    f33c:	mov	r0, r3
    f340:	bl	0 <memcmp>
    f344:	mov	r3, r0
    f348:	cmp	r3, #0
    f34c:	beq	f364 <verify_monster+0x34c>
    f350:	movw	r0, #0
    f354:	movt	r0, #0
    f358:	bl	0 <puts>
    f35c:	mvn	r3, #0
    f360:	b	ff34 <verify_monster+0xf1c>
    f364:	ldr	r0, [fp, #-20]	; 0xffffffec
    f368:	bl	3a28 <MyGame_Example_Monster_name>
    f36c:	str	r0, [fp, #-28]	; 0xffffffe4
    f370:	ldr	r3, [fp, #-28]	; 0xffffffe4
    f374:	cmp	r3, #0
    f378:	beq	f398 <verify_monster+0x380>
    f37c:	movw	r1, #0
    f380:	movt	r1, #0
    f384:	ldr	r0, [fp, #-28]	; 0xffffffe4
    f388:	bl	0 <strcmp>
    f38c:	mov	r3, r0
    f390:	cmp	r3, #0
    f394:	beq	f3ac <verify_monster+0x394>
    f398:	movw	r0, #0
    f39c:	movt	r0, #0
    f3a0:	bl	0 <puts>
    f3a4:	mvn	r3, #0
    f3a8:	b	ff34 <verify_monster+0xf1c>
    f3ac:	ldr	r0, [fp, #-20]	; 0xffffffec
    f3b0:	bl	3a28 <MyGame_Example_Monster_name>
    f3b4:	str	r0, [fp, #-32]	; 0xffffffe0
    f3b8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    f3bc:	bl	ae4 <flatbuffers_string_len>
    f3c0:	mov	r3, r0
    f3c4:	cmp	r3, #9
    f3c8:	bne	f3e0 <verify_monster+0x3c8>
    f3cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    f3d0:	bl	ae4 <flatbuffers_string_len>
    f3d4:	mov	r3, r0
    f3d8:	cmp	r3, #9
    f3dc:	beq	f3f4 <verify_monster+0x3dc>
    f3e0:	movw	r0, #0
    f3e4:	movt	r0, #0
    f3e8:	bl	0 <puts>
    f3ec:	mvn	r3, #0
    f3f0:	b	ff34 <verify_monster+0xf1c>
    f3f4:	ldr	r0, [fp, #-20]	; 0xffffffec
    f3f8:	bl	4908 <MyGame_Example_Monster_color>
    f3fc:	mov	r3, r0
    f400:	cmp	r3, #2
    f404:	beq	f41c <verify_monster+0x404>
    f408:	movw	r0, #0
    f40c:	movt	r0, #0
    f410:	bl	0 <puts>
    f414:	mvn	r3, #0
    f418:	b	ff34 <verify_monster+0xf1c>
    f41c:	mov	r0, #2
    f420:	bl	1e70 <MyGame_Example_Color_name>
    f424:	mov	r3, r0
    f428:	movw	r1, #0
    f42c:	movt	r1, #0
    f430:	mov	r0, r3
    f434:	bl	0 <strcmp>
    f438:	mov	r3, r0
    f43c:	cmp	r3, #0
    f440:	beq	f458 <verify_monster+0x440>
    f444:	movw	r0, #0
    f448:	movt	r0, #0
    f44c:	bl	0 <puts>
    f450:	mvn	r3, #0
    f454:	b	ff34 <verify_monster+0xf1c>
    f458:	mov	r0, #2
    f45c:	bl	1edc <MyGame_Example_Color_is_known_value>
    f460:	mov	r3, r0
    f464:	cmp	r3, #0
    f468:	bne	f480 <verify_monster+0x468>
    f46c:	movw	r0, #0
    f470:	movt	r0, #0
    f474:	bl	0 <puts>
    f478:	mvn	r3, #0
    f47c:	b	ff34 <verify_monster+0xf1c>
    f480:	mov	r0, #1
    f484:	bl	1edc <MyGame_Example_Color_is_known_value>
    f488:	mov	r3, r0
    f48c:	cmp	r3, #0
    f490:	bne	f4a8 <verify_monster+0x490>
    f494:	movw	r0, #0
    f498:	movt	r0, #0
    f49c:	bl	0 <puts>
    f4a0:	mvn	r3, #0
    f4a4:	b	ff34 <verify_monster+0xf1c>
    f4a8:	mov	r0, #4
    f4ac:	bl	1edc <MyGame_Example_Color_is_known_value>
    f4b0:	mov	r3, r0
    f4b4:	cmp	r3, #0
    f4b8:	beq	f4d0 <verify_monster+0x4b8>
    f4bc:	movw	r0, #0
    f4c0:	movt	r0, #0
    f4c4:	bl	0 <puts>
    f4c8:	mvn	r3, #0
    f4cc:	b	ff34 <verify_monster+0xf1c>
    f4d0:	mov	r0, #8
    f4d4:	bl	1edc <MyGame_Example_Color_is_known_value>
    f4d8:	mov	r3, r0
    f4dc:	cmp	r3, #0
    f4e0:	bne	f4f8 <verify_monster+0x4e0>
    f4e4:	movw	r0, #0
    f4e8:	movt	r0, #0
    f4ec:	bl	0 <puts>
    f4f0:	mvn	r3, #0
    f4f4:	b	ff34 <verify_monster+0xf1c>
    f4f8:	mov	r0, #9
    f4fc:	bl	1edc <MyGame_Example_Color_is_known_value>
    f500:	mov	r3, r0
    f504:	cmp	r3, #0
    f508:	beq	f520 <verify_monster+0x508>
    f50c:	movw	r0, #0
    f510:	movt	r0, #0
    f514:	bl	0 <puts>
    f518:	mvn	r3, #0
    f51c:	b	ff34 <verify_monster+0xf1c>
    f520:	mov	r0, #1
    f524:	bl	24d0 <MyGame_Example_Any_is_known_type>
    f528:	mov	r3, r0
    f52c:	cmp	r3, #0
    f530:	bne	f548 <verify_monster+0x530>
    f534:	movw	r0, #0
    f538:	movt	r0, #0
    f53c:	bl	0 <puts>
    f540:	mvn	r3, #0
    f544:	b	ff34 <verify_monster+0xf1c>
    f548:	mov	r0, #42	; 0x2a
    f54c:	bl	24d0 <MyGame_Example_Any_is_known_type>
    f550:	mov	r3, r0
    f554:	cmp	r3, #0
    f558:	beq	f570 <verify_monster+0x558>
    f55c:	movw	r0, #0
    f560:	movt	r0, #0
    f564:	bl	0 <puts>
    f568:	mvn	r3, #0
    f56c:	b	ff34 <verify_monster+0xf1c>
    f570:	ldr	r0, [fp, #-20]	; 0xffffffec
    f574:	bl	4ad8 <MyGame_Example_Monster_inventory>
    f578:	str	r0, [fp, #-36]	; 0xffffffdc
    f57c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    f580:	bl	f50 <flatbuffers_uint8_vec_len>
    f584:	mov	r3, r0
    f588:	cmp	r3, #10
    f58c:	beq	f5a4 <verify_monster+0x58c>
    f590:	movw	r0, #0
    f594:	movt	r0, #0
    f598:	bl	0 <puts>
    f59c:	mvn	r3, #0
    f5a0:	b	ff34 <verify_monster+0xf1c>
    f5a4:	mov	r3, #0
    f5a8:	str	r3, [fp, #-16]
    f5ac:	b	f604 <verify_monster+0x5ec>
    f5b0:	ldr	r1, [fp, #-16]
    f5b4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    f5b8:	bl	f84 <flatbuffers_uint8_vec_at>
    f5bc:	mov	r3, r0
    f5c0:	mov	r2, r3
    f5c4:	ldr	r3, [fp, #-16]
    f5c8:	cmp	r3, r2
    f5cc:	beq	f5f8 <verify_monster+0x5e0>
    f5d0:	ldr	r3, [fp, #-16]
    f5d4:	mov	r1, r3
    f5d8:	movw	r0, #0
    f5dc:	movt	r0, #0
    f5e0:	bl	0 <printf>
    f5e4:	mvn	r3, #0
    f5e8:	b	ff34 <verify_monster+0xf1c>
    f5ec:	.word	0xc04ccccd
    f5f0:	.word	0x3f800000
    f5f4:	.word	0x40000000
    f5f8:	ldr	r3, [fp, #-16]
    f5fc:	add	r3, r3, #1
    f600:	str	r3, [fp, #-16]
    f604:	ldr	r0, [fp, #-36]	; 0xffffffdc
    f608:	bl	f50 <flatbuffers_uint8_vec_len>
    f60c:	mov	r2, r0
    f610:	ldr	r3, [fp, #-16]
    f614:	cmp	r3, r2
    f618:	bcc	f5b0 <verify_monster+0x598>
    f61c:	ldr	r0, [fp, #-20]	; 0xffffffec
    f620:	bl	3858 <MyGame_Example_Monster_mana>
    f624:	mov	r3, r0
    f628:	cmp	r3, #150	; 0x96
    f62c:	beq	f644 <verify_monster+0x62c>
    f630:	movw	r0, #0
    f634:	movt	r0, #0
    f638:	bl	0 <puts>
    f63c:	mvn	r3, #0
    f640:	b	ff34 <verify_monster+0xf1c>
    f644:	ldr	r0, [fp, #-20]	; 0xffffffec
    f648:	bl	394c <MyGame_Example_Monster_mana_is_present>
    f64c:	mov	r3, r0
    f650:	cmp	r3, #0
    f654:	beq	f66c <verify_monster+0x654>
    f658:	movw	r0, #0
    f65c:	movt	r0, #0
    f660:	bl	0 <puts>
    f664:	mvn	r3, #0
    f668:	b	ff34 <verify_monster+0xf1c>
    f66c:	ldr	r0, [fp, #-20]	; 0xffffffec
    f670:	bl	3474 <MyGame_Example_Monster_hp_is_present>
    f674:	mov	r3, r0
    f678:	cmp	r3, #0
    f67c:	bne	f694 <verify_monster+0x67c>
    f680:	movw	r0, #0
    f684:	movt	r0, #0
    f688:	bl	0 <puts>
    f68c:	mvn	r3, #0
    f690:	b	ff34 <verify_monster+0xf1c>
    f694:	ldr	r0, [fp, #-20]	; 0xffffffec
    f698:	bl	32a4 <MyGame_Example_Monster_pos_is_present>
    f69c:	mov	r3, r0
    f6a0:	cmp	r3, #0
    f6a4:	bne	f6bc <verify_monster+0x6a4>
    f6a8:	movw	r0, #0
    f6ac:	movt	r0, #0
    f6b0:	bl	0 <puts>
    f6b4:	mvn	r3, #0
    f6b8:	b	ff34 <verify_monster+0xf1c>
    f6bc:	ldr	r0, [fp, #-20]	; 0xffffffec
    f6c0:	bl	5428 <MyGame_Example_Monster_test4>
    f6c4:	str	r0, [fp, #-40]	; 0xffffffd8
    f6c8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    f6cc:	bl	1ffc <MyGame_Example_Test_vec_len>
    f6d0:	mov	r3, r0
    f6d4:	cmp	r3, #5
    f6d8:	beq	f6f0 <verify_monster+0x6d8>
    f6dc:	movw	r0, #0
    f6e0:	movt	r0, #0
    f6e4:	bl	0 <puts>
    f6e8:	mvn	r3, #0
    f6ec:	b	ff34 <verify_monster+0xf1c>
    f6f0:	mov	r3, #0
    f6f4:	str	r3, [fp, #-16]
    f6f8:	b	f7a4 <verify_monster+0x78c>
    f6fc:	ldr	r1, [fp, #-16]
    f700:	ldr	r0, [fp, #-40]	; 0xffffffd8
    f704:	bl	1f6c <MyGame_Example_Test_vec_at>
    f708:	str	r0, [fp, #-44]	; 0xffffffd4
    f70c:	ldr	r3, [fp, #-16]
    f710:	lsl	r3, r3, #2
    f714:	sub	r2, fp, #12
    f718:	add	r3, r2, r3
    f71c:	sub	r3, r3, #92	; 0x5c
    f720:	ldrsh	r4, [r3]
    f724:	ldr	r0, [fp, #-44]	; 0xffffffd4
    f728:	bl	204c <MyGame_Example_Test_a>
    f72c:	mov	r3, r0
    f730:	cmp	r4, r3
    f734:	beq	f754 <verify_monster+0x73c>
    f738:	ldr	r3, [fp, #-16]
    f73c:	mov	r1, r3
    f740:	movw	r0, #0
    f744:	movt	r0, #0
    f748:	bl	0 <printf>
    f74c:	mvn	r3, #0
    f750:	b	ff34 <verify_monster+0xf1c>
    f754:	ldr	r3, [fp, #-16]
    f758:	lsl	r3, r3, #2
    f75c:	sub	r2, fp, #12
    f760:	add	r3, r2, r3
    f764:	ldrsb	r4, [r3, #-90]	; 0xffffffa6
    f768:	ldr	r0, [fp, #-44]	; 0xffffffd4
    f76c:	bl	2098 <MyGame_Example_Test_b>
    f770:	mov	r3, r0
    f774:	cmp	r4, r3
    f778:	beq	f798 <verify_monster+0x780>
    f77c:	ldr	r3, [fp, #-16]
    f780:	mov	r1, r3
    f784:	movw	r0, #0
    f788:	movt	r0, #0
    f78c:	bl	0 <printf>
    f790:	mvn	r3, #0
    f794:	b	ff34 <verify_monster+0xf1c>
    f798:	ldr	r3, [fp, #-16]
    f79c:	add	r3, r3, #1
    f7a0:	str	r3, [fp, #-16]
    f7a4:	ldr	r3, [fp, #-16]
    f7a8:	cmp	r3, #4
    f7ac:	bls	f6fc <verify_monster+0x6e4>
    f7b0:	ldr	r0, [fp, #-20]	; 0xffffffec
    f7b4:	bl	4bdc <MyGame_Example_Monster_testarrayoftables>
    f7b8:	str	r0, [fp, #-48]	; 0xffffffd0
    f7bc:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f7c0:	bl	3000 <MyGame_Example_Monster_vec_len>
    f7c4:	mov	r3, r0
    f7c8:	cmp	r3, #8
    f7cc:	beq	f7e4 <verify_monster+0x7cc>
    f7d0:	movw	r0, #0
    f7d4:	movt	r0, #0
    f7d8:	bl	0 <puts>
    f7dc:	mvn	r3, #0
    f7e0:	b	ff34 <verify_monster+0xf1c>
    f7e4:	mov	r1, #5
    f7e8:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f7ec:	bl	3050 <MyGame_Example_Monster_vec_at>
    f7f0:	str	r0, [fp, #-52]	; 0xffffffcc
    f7f4:	ldr	r3, [fp, #-52]	; 0xffffffcc
    f7f8:	cmp	r3, #0
    f7fc:	bne	f820 <verify_monster+0x808>
    f800:	movw	r3, #0
    f804:	movt	r3, #0
    f808:	movw	r2, #662	; 0x296
    f80c:	movw	r1, #0
    f810:	movt	r1, #0
    f814:	movw	r0, #0
    f818:	movt	r0, #0
    f81c:	bl	0 <__assert_fail>
    f820:	ldr	r0, [fp, #-52]	; 0xffffffcc
    f824:	bl	3a28 <MyGame_Example_Monster_name>
    f828:	str	r0, [fp, #-28]	; 0xffffffe4
    f82c:	movw	r1, #0
    f830:	movt	r1, #0
    f834:	ldr	r0, [fp, #-28]	; 0xffffffe4
    f838:	bl	0 <strcmp>
    f83c:	mov	r3, r0
    f840:	cmp	r3, #0
    f844:	beq	f85c <verify_monster+0x844>
    f848:	movw	r0, #0
    f84c:	movt	r0, #0
    f850:	bl	0 <printf>
    f854:	mvn	r3, #0
    f858:	b	ff34 <verify_monster+0xf1c>
    f85c:	mov	r1, #1
    f860:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f864:	bl	3050 <MyGame_Example_Monster_vec_at>
    f868:	str	r0, [fp, #-56]	; 0xffffffc8
    f86c:	ldr	r2, [fp, #-56]	; 0xffffffc8
    f870:	ldr	r3, [fp, #-52]	; 0xffffffcc
    f874:	cmp	r2, r3
    f878:	beq	f890 <verify_monster+0x878>
    f87c:	movw	r0, #0
    f880:	movt	r0, #0
    f884:	bl	0 <puts>
    f888:	mvn	r3, #0
    f88c:	b	ff34 <verify_monster+0xf1c>
    f890:	ldr	r0, [fp, #-56]	; 0xffffffc8
    f894:	bl	3a28 <MyGame_Example_Monster_name>
    f898:	str	r0, [fp, #-28]	; 0xffffffe4
    f89c:	movw	r1, #0
    f8a0:	movt	r1, #0
    f8a4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    f8a8:	bl	0 <strcmp>
    f8ac:	mov	r3, r0
    f8b0:	cmp	r3, #0
    f8b4:	beq	f8d0 <verify_monster+0x8b8>
    f8b8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    f8bc:	movw	r0, #0
    f8c0:	movt	r0, #0
    f8c4:	bl	0 <printf>
    f8c8:	mvn	r3, #0
    f8cc:	b	ff34 <verify_monster+0xf1c>
    f8d0:	mov	r1, #2
    f8d4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f8d8:	bl	3050 <MyGame_Example_Monster_vec_at>
    f8dc:	str	r0, [fp, #-52]	; 0xffffffcc
    f8e0:	ldr	r0, [fp, #-52]	; 0xffffffcc
    f8e4:	bl	3a28 <MyGame_Example_Monster_name>
    f8e8:	str	r0, [fp, #-28]	; 0xffffffe4
    f8ec:	movw	r1, #0
    f8f0:	movt	r1, #0
    f8f4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    f8f8:	bl	0 <strcmp>
    f8fc:	mov	r3, r0
    f900:	cmp	r3, #0
    f904:	beq	f920 <verify_monster+0x908>
    f908:	ldr	r1, [fp, #-28]	; 0xffffffe4
    f90c:	movw	r0, #0
    f910:	movt	r0, #0
    f914:	bl	0 <printf>
    f918:	mvn	r3, #0
    f91c:	b	ff34 <verify_monster+0xf1c>
    f920:	mov	r1, #0
    f924:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f928:	bl	3050 <MyGame_Example_Monster_vec_at>
    f92c:	str	r0, [fp, #-52]	; 0xffffffcc
    f930:	ldr	r0, [fp, #-52]	; 0xffffffcc
    f934:	bl	3a28 <MyGame_Example_Monster_name>
    f938:	str	r0, [fp, #-28]	; 0xffffffe4
    f93c:	movw	r1, #0
    f940:	movt	r1, #0
    f944:	ldr	r0, [fp, #-28]	; 0xffffffe4
    f948:	bl	0 <strcmp>
    f94c:	mov	r3, r0
    f950:	cmp	r3, #0
    f954:	beq	f970 <verify_monster+0x958>
    f958:	ldr	r1, [fp, #-28]	; 0xffffffe4
    f95c:	movw	r0, #0
    f960:	movt	r0, #0
    f964:	bl	0 <printf>
    f968:	mvn	r3, #0
    f96c:	b	ff34 <verify_monster+0xf1c>
    f970:	mov	r1, #3
    f974:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f978:	bl	3050 <MyGame_Example_Monster_vec_at>
    f97c:	str	r0, [fp, #-52]	; 0xffffffcc
    f980:	ldr	r0, [fp, #-52]	; 0xffffffcc
    f984:	bl	3a28 <MyGame_Example_Monster_name>
    f988:	str	r0, [fp, #-28]	; 0xffffffe4
    f98c:	movw	r1, #0
    f990:	movt	r1, #0
    f994:	ldr	r0, [fp, #-28]	; 0xffffffe4
    f998:	bl	0 <strcmp>
    f99c:	mov	r3, r0
    f9a0:	cmp	r3, #0
    f9a4:	beq	f9c0 <verify_monster+0x9a8>
    f9a8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    f9ac:	movw	r0, #0
    f9b0:	movt	r0, #0
    f9b4:	bl	0 <printf>
    f9b8:	mvn	r3, #0
    f9bc:	b	ff34 <verify_monster+0xf1c>
    f9c0:	mov	r1, #4
    f9c4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f9c8:	bl	3050 <MyGame_Example_Monster_vec_at>
    f9cc:	str	r0, [fp, #-52]	; 0xffffffcc
    f9d0:	ldr	r0, [fp, #-52]	; 0xffffffcc
    f9d4:	bl	3a28 <MyGame_Example_Monster_name>
    f9d8:	str	r0, [fp, #-28]	; 0xffffffe4
    f9dc:	movw	r1, #0
    f9e0:	movt	r1, #0
    f9e4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    f9e8:	bl	0 <strcmp>
    f9ec:	mov	r3, r0
    f9f0:	cmp	r3, #0
    f9f4:	beq	fa10 <verify_monster+0x9f8>
    f9f8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    f9fc:	movw	r0, #0
    fa00:	movt	r0, #0
    fa04:	bl	0 <printf>
    fa08:	mvn	r3, #0
    fa0c:	b	ff34 <verify_monster+0xf1c>
    fa10:	mov	r1, #6
    fa14:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fa18:	bl	3050 <MyGame_Example_Monster_vec_at>
    fa1c:	str	r0, [fp, #-52]	; 0xffffffcc
    fa20:	ldr	r0, [fp, #-52]	; 0xffffffcc
    fa24:	bl	3a28 <MyGame_Example_Monster_name>
    fa28:	str	r0, [fp, #-28]	; 0xffffffe4
    fa2c:	movw	r1, #0
    fa30:	movt	r1, #0
    fa34:	ldr	r0, [fp, #-28]	; 0xffffffe4
    fa38:	bl	0 <strcmp>
    fa3c:	mov	r3, r0
    fa40:	cmp	r3, #0
    fa44:	beq	fa60 <verify_monster+0xa48>
    fa48:	ldr	r1, [fp, #-28]	; 0xffffffe4
    fa4c:	movw	r0, #0
    fa50:	movt	r0, #0
    fa54:	bl	0 <printf>
    fa58:	mvn	r3, #0
    fa5c:	b	ff34 <verify_monster+0xf1c>
    fa60:	mov	r1, #7
    fa64:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fa68:	bl	3050 <MyGame_Example_Monster_vec_at>
    fa6c:	str	r0, [fp, #-52]	; 0xffffffcc
    fa70:	ldr	r0, [fp, #-52]	; 0xffffffcc
    fa74:	bl	3a28 <MyGame_Example_Monster_name>
    fa78:	str	r0, [fp, #-28]	; 0xffffffe4
    fa7c:	movw	r1, #0
    fa80:	movt	r1, #0
    fa84:	ldr	r0, [fp, #-28]	; 0xffffffe4
    fa88:	bl	0 <strcmp>
    fa8c:	mov	r3, r0
    fa90:	cmp	r3, #0
    fa94:	beq	fab0 <verify_monster+0xa98>
    fa98:	ldr	r1, [fp, #-28]	; 0xffffffe4
    fa9c:	movw	r0, #0
    faa0:	movt	r0, #0
    faa4:	bl	0 <printf>
    faa8:	mvn	r3, #0
    faac:	b	ff34 <verify_monster+0xf1c>
    fab0:	ldr	r0, [fp, #-20]	; 0xffffffec
    fab4:	bl	4ce0 <MyGame_Example_Monster_testarrayofstring>
    fab8:	str	r0, [fp, #-60]	; 0xffffffc4
    fabc:	ldr	r0, [fp, #-60]	; 0xffffffc4
    fac0:	bl	b34 <flatbuffers_string_vec_len>
    fac4:	mov	r3, r0
    fac8:	cmp	r3, #3
    facc:	beq	fae4 <verify_monster+0xacc>
    fad0:	movw	r0, #0
    fad4:	movt	r0, #0
    fad8:	bl	0 <puts>
    fadc:	mvn	r3, #0
    fae0:	b	ff34 <verify_monster+0xf1c>
    fae4:	mov	r1, #0
    fae8:	ldr	r0, [fp, #-60]	; 0xffffffc4
    faec:	bl	b84 <flatbuffers_string_vec_at>
    faf0:	mov	r3, r0
    faf4:	movw	r1, #0
    faf8:	movt	r1, #0
    fafc:	mov	r0, r3
    fb00:	bl	0 <strcmp>
    fb04:	mov	r3, r0
    fb08:	cmp	r3, #0
    fb0c:	beq	fb24 <verify_monster+0xb0c>
    fb10:	movw	r0, #0
    fb14:	movt	r0, #0
    fb18:	bl	0 <puts>
    fb1c:	mvn	r3, #0
    fb20:	b	ff34 <verify_monster+0xf1c>
    fb24:	mov	r1, #1
    fb28:	ldr	r0, [fp, #-60]	; 0xffffffc4
    fb2c:	bl	b84 <flatbuffers_string_vec_at>
    fb30:	str	r0, [fp, #-64]	; 0xffffffc0
    fb34:	ldr	r0, [fp, #-64]	; 0xffffffc0
    fb38:	bl	ae4 <flatbuffers_string_len>
    fb3c:	mov	r3, r0
    fb40:	cmp	r3, #2
    fb44:	beq	fb5c <verify_monster+0xb44>
    fb48:	movw	r0, #0
    fb4c:	movt	r0, #0
    fb50:	bl	0 <printf>
    fb54:	mvn	r3, #0
    fb58:	b	ff34 <verify_monster+0xf1c>
    fb5c:	mov	r2, #2
    fb60:	movw	r1, #0
    fb64:	movt	r1, #0
    fb68:	ldr	r0, [fp, #-64]	; 0xffffffc0
    fb6c:	bl	0 <memcmp>
    fb70:	mov	r3, r0
    fb74:	cmp	r3, #0
    fb78:	beq	fb90 <verify_monster+0xb78>
    fb7c:	movw	r0, #0
    fb80:	movt	r0, #0
    fb84:	bl	0 <puts>
    fb88:	mvn	r3, #0
    fb8c:	b	ff34 <verify_monster+0xf1c>
    fb90:	mov	r1, #2
    fb94:	ldr	r0, [fp, #-60]	; 0xffffffc4
    fb98:	bl	b84 <flatbuffers_string_vec_at>
    fb9c:	mov	r3, r0
    fba0:	movw	r1, #0
    fba4:	movt	r1, #0
    fba8:	mov	r0, r3
    fbac:	bl	0 <strcmp>
    fbb0:	mov	r3, r0
    fbb4:	cmp	r3, #0
    fbb8:	beq	fbd0 <verify_monster+0xbb8>
    fbbc:	movw	r0, #0
    fbc0:	movt	r0, #0
    fbc4:	bl	0 <puts>
    fbc8:	mvn	r3, #0
    fbcc:	b	ff34 <verify_monster+0xf1c>
    fbd0:	ldr	r0, [fp, #-20]	; 0xffffffec
    fbd4:	bl	4ee8 <MyGame_Example_Monster_testarrayofbools_is_present>
    fbd8:	mov	r3, r0
    fbdc:	cmp	r3, #0
    fbe0:	bne	fbf8 <verify_monster+0xbe0>
    fbe4:	movw	r0, #0
    fbe8:	movt	r0, #0
    fbec:	bl	0 <puts>
    fbf0:	mvn	r3, #0
    fbf4:	b	ff34 <verify_monster+0xf1c>
    fbf8:	ldr	r0, [fp, #-20]	; 0xffffffec
    fbfc:	bl	4de4 <MyGame_Example_Monster_testarrayofbools>
    fc00:	str	r0, [fp, #-68]	; 0xffffffbc
    fc04:	ldr	r0, [fp, #-68]	; 0xffffffbc
    fc08:	bl	ea0 <flatbuffers_bool_vec_len>
    fc0c:	mov	r3, r0
    fc10:	cmp	r3, #4
    fc14:	beq	fc2c <verify_monster+0xc14>
    fc18:	movw	r0, #0
    fc1c:	movt	r0, #0
    fc20:	bl	0 <puts>
    fc24:	mvn	r3, #0
    fc28:	b	ff34 <verify_monster+0xf1c>
    fc2c:	mov	r3, #0
    fc30:	str	r3, [fp, #-16]
    fc34:	b	fc90 <verify_monster+0xc78>
    fc38:	ldr	r1, [fp, #-16]
    fc3c:	ldr	r0, [fp, #-68]	; 0xffffffbc
    fc40:	bl	ed4 <flatbuffers_bool_vec_at>
    fc44:	mov	r3, r0
    fc48:	mov	r2, r3
    fc4c:	ldr	r3, [fp, #-16]
    fc50:	lsl	r3, r3, #2
    fc54:	sub	r1, fp, #12
    fc58:	add	r3, r1, r3
    fc5c:	ldr	r3, [r3, #-108]	; 0xffffff94
    fc60:	cmp	r2, r3
    fc64:	beq	fc84 <verify_monster+0xc6c>
    fc68:	ldr	r3, [fp, #-16]
    fc6c:	mov	r1, r3
    fc70:	movw	r0, #0
    fc74:	movt	r0, #0
    fc78:	bl	0 <printf>
    fc7c:	mvn	r3, #0
    fc80:	b	ff34 <verify_monster+0xf1c>
    fc84:	ldr	r3, [fp, #-16]
    fc88:	add	r3, r3, #1
    fc8c:	str	r3, [fp, #-16]
    fc90:	ldr	r3, [fp, #-16]
    fc94:	cmp	r3, #3
    fc98:	bls	fc38 <verify_monster+0xc20>
    fc9c:	ldr	r0, [fp, #-20]	; 0xffffffec
    fca0:	bl	51a0 <MyGame_Example_Monster_test_type>
    fca4:	mov	r3, r0
    fca8:	strb	r3, [fp, #-69]	; 0xffffffbb
    fcac:	ldrb	r3, [fp, #-69]	; 0xffffffbb
    fcb0:	cmp	r3, #1
    fcb4:	beq	fccc <verify_monster+0xcb4>
    fcb8:	movw	r0, #0
    fcbc:	movt	r0, #0
    fcc0:	bl	0 <puts>
    fcc4:	mvn	r3, #0
    fcc8:	b	ff34 <verify_monster+0xf1c>
    fccc:	ldr	r0, [fp, #-20]	; 0xffffffec
    fcd0:	bl	5294 <MyGame_Example_Monster_test>
    fcd4:	str	r0, [fp, #-52]	; 0xffffffcc
    fcd8:	ldr	r0, [fp, #-52]	; 0xffffffcc
    fcdc:	bl	3a28 <MyGame_Example_Monster_name>
    fce0:	mov	r3, r0
    fce4:	movw	r1, #0
    fce8:	movt	r1, #0
    fcec:	mov	r0, r3
    fcf0:	bl	0 <strcmp>
    fcf4:	mov	r3, r0
    fcf8:	cmp	r3, #0
    fcfc:	beq	fd14 <verify_monster+0xcfc>
    fd00:	movw	r0, #0
    fd04:	movt	r0, #0
    fd08:	bl	0 <puts>
    fd0c:	mvn	r3, #0
    fd10:	b	ff34 <verify_monster+0xf1c>
    fd14:	ldr	r0, [fp, #-20]	; 0xffffffec
    fd18:	bl	4fc4 <MyGame_Example_Monster_enemy>
    fd1c:	str	r0, [fp, #-52]	; 0xffffffcc
    fd20:	ldr	r0, [fp, #-52]	; 0xffffffcc
    fd24:	bl	3a28 <MyGame_Example_Monster_name>
    fd28:	mov	r3, r0
    fd2c:	movw	r1, #0
    fd30:	movt	r1, #0
    fd34:	mov	r0, r3
    fd38:	bl	0 <strcmp>
    fd3c:	mov	r3, r0
    fd40:	cmp	r3, #0
    fd44:	beq	fd5c <verify_monster+0xd44>
    fd48:	movw	r0, #0
    fd4c:	movt	r0, #0
    fd50:	bl	0 <puts>
    fd54:	mvn	r3, #0
    fd58:	b	ff34 <verify_monster+0xf1c>
    fd5c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    fd60:	bl	51a0 <MyGame_Example_Monster_test_type>
    fd64:	mov	r3, r0
    fd68:	cmp	r3, #0
    fd6c:	beq	fd84 <verify_monster+0xd6c>
    fd70:	movw	r0, #0
    fd74:	movt	r0, #0
    fd78:	bl	0 <puts>
    fd7c:	mvn	r3, #0
    fd80:	b	ff34 <verify_monster+0xf1c>
    fd84:	sub	r3, fp, #84	; 0x54
    fd88:	ldr	r1, [fp, #-20]	; 0xffffffec
    fd8c:	mov	r0, r3
    fd90:	bl	5394 <MyGame_Example_Monster_test_union>
    fd94:	ldrb	r3, [fp, #-84]	; 0xffffffac
    fd98:	ldrb	r2, [fp, #-69]	; 0xffffffbb
    fd9c:	cmp	r2, r3
    fda0:	beq	fdb8 <verify_monster+0xda0>
    fda4:	movw	r0, #0
    fda8:	movt	r0, #0
    fdac:	bl	0 <puts>
    fdb0:	mvn	r3, #0
    fdb4:	b	ff34 <verify_monster+0xf1c>
    fdb8:	ldr	r4, [fp, #-80]	; 0xffffffb0
    fdbc:	ldr	r0, [fp, #-20]	; 0xffffffec
    fdc0:	bl	5294 <MyGame_Example_Monster_test>
    fdc4:	mov	r3, r0
    fdc8:	cmp	r4, r3
    fdcc:	beq	fde4 <verify_monster+0xdcc>
    fdd0:	movw	r0, #0
    fdd4:	movt	r0, #0
    fdd8:	bl	0 <puts>
    fddc:	mvn	r3, #0
    fde0:	b	ff34 <verify_monster+0xf1c>
    fde4:	ldr	r0, [fp, #-52]	; 0xffffffcc
    fde8:	bl	4bdc <MyGame_Example_Monster_testarrayoftables>
    fdec:	str	r0, [fp, #-48]	; 0xffffffd0
    fdf0:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fdf4:	bl	3000 <MyGame_Example_Monster_vec_len>
    fdf8:	str	r0, [fp, #-16]
    fdfc:	ldr	r3, [fp, #-16]
    fe00:	sub	r3, r3, #1
    fe04:	mov	r1, r3
    fe08:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fe0c:	bl	3050 <MyGame_Example_Monster_vec_at>
    fe10:	str	r0, [fp, #-52]	; 0xffffffcc
    fe14:	ldr	r0, [fp, #-52]	; 0xffffffcc
    fe18:	bl	51a0 <MyGame_Example_Monster_test_type>
    fe1c:	mov	r3, r0
    fe20:	cmp	r3, #1
    fe24:	beq	fe3c <verify_monster+0xe24>
    fe28:	movw	r0, #0
    fe2c:	movt	r0, #0
    fe30:	bl	0 <puts>
    fe34:	mvn	r3, #0
    fe38:	b	ff34 <verify_monster+0xf1c>
    fe3c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    fe40:	bl	5294 <MyGame_Example_Monster_test>
    fe44:	str	r0, [fp, #-52]	; 0xffffffcc
    fe48:	ldr	r0, [fp, #-52]	; 0xffffffcc
    fe4c:	bl	3a28 <MyGame_Example_Monster_name>
    fe50:	mov	r3, r0
    fe54:	movw	r1, #0
    fe58:	movt	r1, #0
    fe5c:	mov	r0, r3
    fe60:	bl	0 <strcmp>
    fe64:	mov	r3, r0
    fe68:	cmp	r3, #0
    fe6c:	beq	fe84 <verify_monster+0xe6c>
    fe70:	movw	r0, #0
    fe74:	movt	r0, #0
    fe78:	bl	0 <puts>
    fe7c:	mvn	r3, #0
    fe80:	b	ff34 <verify_monster+0xf1c>
    fe84:	ldr	r0, [fp, #-20]	; 0xffffffec
    fe88:	bl	588c <MyGame_Example_Monster_testbool>
    fe8c:	mov	r3, r0
    fe90:	cmp	r3, #0
    fe94:	beq	feac <verify_monster+0xe94>
    fe98:	movw	r0, #0
    fe9c:	movt	r0, #0
    fea0:	bl	0 <puts>
    fea4:	mvn	r3, #0
    fea8:	b	ff34 <verify_monster+0xf1c>
    feac:	ldr	r0, [fp, #-20]	; 0xffffffec
    feb0:	bl	57b0 <MyGame_Example_Monster_testempty_is_present>
    feb4:	mov	r3, r0
    feb8:	cmp	r3, #0
    febc:	bne	fed4 <verify_monster+0xebc>
    fec0:	movw	r0, #0
    fec4:	movt	r0, #0
    fec8:	bl	0 <puts>
    fecc:	mvn	r3, #0
    fed0:	b	ff34 <verify_monster+0xf1c>
    fed4:	ldr	r0, [fp, #-20]	; 0xffffffec
    fed8:	bl	56b0 <MyGame_Example_Monster_testempty>
    fedc:	str	r0, [fp, #-76]	; 0xffffffb4
    fee0:	ldr	r0, [fp, #-76]	; 0xffffffb4
    fee4:	bl	28d8 <MyGame_Example_Stat_id_is_present>
    fee8:	mov	r3, r0
    feec:	cmp	r3, #0
    fef0:	bne	ff1c <verify_monster+0xf04>
    fef4:	ldr	r0, [fp, #-76]	; 0xffffffb4
    fef8:	bl	2ab4 <MyGame_Example_Stat_val_is_present>
    fefc:	mov	r3, r0
    ff00:	cmp	r3, #0
    ff04:	bne	ff1c <verify_monster+0xf04>
    ff08:	ldr	r0, [fp, #-76]	; 0xffffffb4
    ff0c:	bl	2b90 <MyGame_Example_Stat_count_is_present>
    ff10:	mov	r3, r0
    ff14:	cmp	r3, #0
    ff18:	beq	ff30 <verify_monster+0xf18>
    ff1c:	movw	r0, #0
    ff20:	movt	r0, #0
    ff24:	bl	0 <puts>
    ff28:	mvn	r3, #0
    ff2c:	b	ff34 <verify_monster+0xf1c>
    ff30:	mov	r3, #0
    ff34:	mov	r0, r3
    ff38:	sub	sp, fp, #8
    ff3c:	ldr	r4, [sp]
    ff40:	ldr	fp, [sp, #4]
    ff44:	add	sp, sp, #8
    ff48:	pop	{pc}		; (ldr pc, [sp], #4)

0000ff4c <gen_monster>:
    ff4c:	str	fp, [sp, #-8]!
    ff50:	str	lr, [sp, #4]
    ff54:	add	fp, sp, #4
    ff58:	sub	sp, sp, #96	; 0x60
    ff5c:	str	r0, [fp, #-96]	; 0xffffffa0
    ff60:	str	r1, [fp, #-100]	; 0xffffff9c
    ff64:	movw	r3, #0
    ff68:	movt	r3, #0
    ff6c:	sub	r1, fp, #64	; 0x40
    ff70:	mov	r0, r3
    ff74:	ldrd	r2, [r0]
    ff78:	strd	r2, [r1]
    ff7c:	ldrh	r3, [r0, #8]
    ff80:	strh	r3, [r1, #8]
    ff84:	movw	r3, #0
    ff88:	movt	r3, #0
    ff8c:	ldr	r3, [r3]
    ff90:	str	r3, [fp, #-92]	; 0xffffffa4
    ff94:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ff98:	bl	0 <flatcc_builder_reset>
    ff9c:	ldr	r3, [fp, #-100]	; 0xffffff9c
    ffa0:	cmp	r3, #0
    ffa4:	beq	ffb4 <gen_monster+0x68>
    ffa8:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ffac:	bl	b244 <MyGame_Example_Monster_start_as_root_with_size>
    ffb0:	b	ffbc <gen_monster+0x70>
    ffb4:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ffb8:	bl	b1ec <MyGame_Example_Monster_start_as_root>
    ffbc:	mov	r1, #80	; 0x50
    ffc0:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ffc4:	bl	98c8 <MyGame_Example_Monster_hp_add>
    ffc8:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ffcc:	bl	9804 <MyGame_Example_Monster_pos_start>
    ffd0:	str	r0, [fp, #-8]
    ffd4:	ldr	r3, [fp, #-8]
    ffd8:	mov	r2, #1065353216	; 0x3f800000
    ffdc:	str	r2, [r3]
    ffe0:	ldr	r3, [fp, #-8]
    ffe4:	mov	r2, #1073741824	; 0x40000000
    ffe8:	str	r2, [r3, #4]
    ffec:	ldr	r3, [fp, #-8]
    fff0:	movw	r2, #52429	; 0xcccd
    fff4:	movt	r2, #49228	; 0xc04c
    fff8:	str	r2, [r3, #8]
    fffc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10000:	bl	9844 <MyGame_Example_Monster_pos_end>
   10004:	movw	r1, #0
   10008:	movt	r1, #0
   1000c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10010:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   10014:	mov	r1, #2
   10018:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1001c:	bl	9e80 <MyGame_Example_Monster_color_add>
   10020:	sub	r3, fp, #64	; 0x40
   10024:	mov	r2, #10
   10028:	mov	r1, r3
   1002c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10030:	bl	9fe0 <MyGame_Example_Monster_inventory_create>
   10034:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10038:	bl	ab38 <MyGame_Example_Monster_test4_start>
   1003c:	mov	r1, #1
   10040:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10044:	bl	ac58 <MyGame_Example_Monster_test4_extend>
   10048:	str	r0, [fp, #-12]
   1004c:	ldr	r3, [fp, #-12]
   10050:	mov	r2, #16
   10054:	strh	r2, [r3]
   10058:	ldr	r3, [fp, #-12]
   1005c:	mov	r2, #32
   10060:	strb	r2, [r3, #2]
   10064:	mov	r1, #2
   10068:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1006c:	bl	ac58 <MyGame_Example_Monster_test4_extend>
   10070:	str	r0, [fp, #-12]
   10074:	ldr	r3, [fp, #-12]
   10078:	mov	r2, #48	; 0x30
   1007c:	strh	r2, [r3]
   10080:	ldr	r3, [fp, #-12]
   10084:	mov	r2, #64	; 0x40
   10088:	strb	r2, [r3, #2]
   1008c:	ldr	r3, [fp, #-12]
   10090:	add	r3, r3, #4
   10094:	mov	r2, #80	; 0x50
   10098:	strh	r2, [r3]
   1009c:	ldr	r3, [fp, #-12]
   100a0:	add	r3, r3, #4
   100a4:	mov	r2, #96	; 0x60
   100a8:	strb	r2, [r3, #2]
   100ac:	mvn	r2, #127	; 0x7f
   100b0:	mov	r1, #112	; 0x70
   100b4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   100b8:	bl	ada4 <MyGame_Example_Monster_test4_push_create>
   100bc:	mov	r3, #400	; 0x190
   100c0:	strh	r3, [fp, #-68]	; 0xffffffbc
   100c4:	mvn	r3, #110	; 0x6e
   100c8:	strb	r3, [fp, #-66]	; 0xffffffbe
   100cc:	sub	r3, fp, #68	; 0x44
   100d0:	mov	r1, r3
   100d4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   100d8:	bl	ad38 <MyGame_Example_Monster_test4_push>
   100dc:	sub	r3, fp, #68	; 0x44
   100e0:	mov	r1, r3
   100e4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   100e8:	bl	ad38 <MyGame_Example_Monster_test4_push>
   100ec:	sub	r3, fp, #68	; 0x44
   100f0:	mov	r1, r3
   100f4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   100f8:	bl	8034 <MyGame_Example_Test_vec_push>
   100fc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10100:	bl	ad04 <MyGame_Example_Monster_test4_reserved_len>
   10104:	mov	r3, r0
   10108:	cmp	r3, #7
   1010c:	beq	10130 <gen_monster+0x1e4>
   10110:	movw	r3, #0
   10114:	movt	r3, #0
   10118:	movw	r2, #881	; 0x371
   1011c:	movw	r1, #0
   10120:	movt	r1, #0
   10124:	movw	r0, #0
   10128:	movt	r0, #0
   1012c:	bl	0 <__assert_fail>
   10130:	mov	r1, #2
   10134:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10138:	bl	ac94 <MyGame_Example_Monster_test4_truncate>
   1013c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10140:	bl	ad04 <MyGame_Example_Monster_test4_reserved_len>
   10144:	mov	r3, r0
   10148:	cmp	r3, #5
   1014c:	beq	10170 <gen_monster+0x224>
   10150:	movw	r3, #0
   10154:	movt	r3, #0
   10158:	movw	r2, #883	; 0x373
   1015c:	movw	r1, #0
   10160:	movt	r1, #0
   10164:	movw	r0, #0
   10168:	movt	r0, #0
   1016c:	bl	0 <__assert_fail>
   10170:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10174:	bl	acd0 <MyGame_Example_Monster_test4_edit>
   10178:	str	r0, [fp, #-12]
   1017c:	ldr	r3, [fp, #-12]
   10180:	add	r3, r3, #16
   10184:	ldrsh	r3, [r3]
   10188:	uxth	r3, r3
   1018c:	add	r3, r3, #1
   10190:	uxth	r2, r3
   10194:	ldr	r3, [fp, #-12]
   10198:	add	r3, r3, #16
   1019c:	sxth	r2, r2
   101a0:	strh	r2, [r3]
   101a4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   101a8:	bl	ab6c <MyGame_Example_Monster_test4_end>
   101ac:	ldr	r0, [fp, #-96]	; 0xffffffa0
   101b0:	bl	8a5c <MyGame_Example_Monster_start>
   101b4:	mov	r2, #7
   101b8:	movw	r1, #0
   101bc:	movt	r1, #0
   101c0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   101c4:	bl	7ae4 <flatbuffers_string_create>
   101c8:	str	r0, [fp, #-16]
   101cc:	ldr	r1, [fp, #-16]
   101d0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   101d4:	bl	9ab0 <MyGame_Example_Monster_name_add>
   101d8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   101dc:	bl	8a94 <MyGame_Example_Monster_end>
   101e0:	str	r0, [fp, #-20]	; 0xffffffec
   101e4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   101e8:	bl	a0a0 <MyGame_Example_Monster_testarrayoftables_start>
   101ec:	mov	r1, #2
   101f0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   101f4:	bl	a118 <MyGame_Example_Monster_testarrayoftables_extend>
   101f8:	str	r0, [fp, #-24]	; 0xffffffe8
   101fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10200:	ldr	r2, [fp, #-20]	; 0xffffffec
   10204:	str	r2, [r3]
   10208:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1020c:	add	r3, r3, #4
   10210:	ldr	r2, [fp, #-20]	; 0xffffffec
   10214:	str	r2, [r3]
   10218:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1021c:	bl	a28c <MyGame_Example_Monster_testarrayoftables_push_start>
   10220:	mov	r2, #30
   10224:	movw	r1, #0
   10228:	movt	r1, #0
   1022c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10230:	bl	9be0 <MyGame_Example_Monster_name_create_strn>
   10234:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10238:	bl	a2c0 <MyGame_Example_Monster_testarrayoftables_push_end>
   1023c:	mov	r3, r0
   10240:	ldr	r3, [r3]
   10244:	str	r3, [fp, #-28]	; 0xffffffe4
   10248:	mov	r1, #3
   1024c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10250:	bl	a118 <MyGame_Example_Monster_testarrayoftables_extend>
   10254:	str	r0, [fp, #-24]	; 0xffffffe8
   10258:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1025c:	ldr	r2, [fp, #-20]	; 0xffffffec
   10260:	str	r2, [r3]
   10264:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10268:	add	r3, r3, #4
   1026c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   10270:	str	r2, [r3]
   10274:	mov	r1, #1
   10278:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1027c:	bl	a198 <MyGame_Example_Monster_testarrayoftables_truncate>
   10280:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10284:	bl	a208 <MyGame_Example_Monster_testarrayoftables_reserved_len>
   10288:	mov	r3, r0
   1028c:	cmp	r3, #5
   10290:	beq	102b4 <gen_monster+0x368>
   10294:	movw	r3, #0
   10298:	movt	r3, #0
   1029c:	movw	r2, #923	; 0x39b
   102a0:	movw	r1, #0
   102a4:	movt	r1, #0
   102a8:	movw	r0, #0
   102ac:	movt	r0, #0
   102b0:	bl	0 <__assert_fail>
   102b4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   102b8:	bl	a28c <MyGame_Example_Monster_testarrayoftables_push_start>
   102bc:	mov	r2, #8
   102c0:	movw	r1, #0
   102c4:	movt	r1, #0
   102c8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   102cc:	bl	9be0 <MyGame_Example_Monster_name_create_strn>
   102d0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   102d4:	bl	a2c0 <MyGame_Example_Monster_testarrayoftables_push_end>
   102d8:	mov	r3, r0
   102dc:	ldr	r3, [r3]
   102e0:	str	r3, [fp, #-76]	; 0xffffffb4
   102e4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   102e8:	bl	a208 <MyGame_Example_Monster_testarrayoftables_reserved_len>
   102ec:	mov	r3, r0
   102f0:	cmp	r3, #6
   102f4:	beq	10318 <gen_monster+0x3cc>
   102f8:	movw	r3, #0
   102fc:	movt	r3, #0
   10300:	movw	r2, #929	; 0x3a1
   10304:	movw	r1, #0
   10308:	movt	r1, #0
   1030c:	movw	r0, #0
   10310:	movt	r0, #0
   10314:	bl	0 <__assert_fail>
   10318:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1031c:	bl	a1d4 <MyGame_Example_Monster_testarrayoftables_edit>
   10320:	str	r0, [fp, #-24]	; 0xffffffe8
   10324:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10328:	ldr	r3, [r3, #20]
   1032c:	str	r3, [fp, #-28]	; 0xffffffe4
   10330:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10334:	ldr	r3, [r3, #8]
   10338:	str	r3, [fp, #-72]	; 0xffffffb8
   1033c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10340:	add	r3, r3, #20
   10344:	ldr	r2, [fp, #-20]	; 0xffffffec
   10348:	str	r2, [r3]
   1034c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10350:	ldr	r2, [fp, #-28]	; 0xffffffe4
   10354:	str	r2, [r3]
   10358:	sub	r3, fp, #76	; 0x4c
   1035c:	mov	r2, #2
   10360:	mov	r1, r3
   10364:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10368:	bl	a154 <MyGame_Example_Monster_testarrayoftables_append>
   1036c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10370:	bl	a0d4 <MyGame_Example_Monster_testarrayoftables_end>
   10374:	movw	r1, #0
   10378:	movt	r1, #0
   1037c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10380:	bl	7b28 <flatbuffers_string_create_str>
   10384:	mov	r3, r0
   10388:	str	r3, [fp, #-88]	; 0xffffffa8
   1038c:	mov	r2, #2
   10390:	movw	r1, #0
   10394:	movt	r1, #0
   10398:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1039c:	bl	7ae4 <flatbuffers_string_create>
   103a0:	mov	r3, r0
   103a4:	str	r3, [fp, #-84]	; 0xffffffac
   103a8:	movw	r1, #0
   103ac:	movt	r1, #0
   103b0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   103b4:	bl	7b28 <flatbuffers_string_create_str>
   103b8:	mov	r3, r0
   103bc:	str	r3, [fp, #-80]	; 0xffffffb0
   103c0:	sub	r3, fp, #88	; 0x58
   103c4:	mov	r2, #3
   103c8:	mov	r1, r3
   103cc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   103d0:	bl	a3e8 <MyGame_Example_Monster_testarrayofstring_create>
   103d4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   103d8:	bl	a550 <MyGame_Example_Monster_testarrayofbools_start>
   103dc:	sub	r3, fp, #92	; 0x5c
   103e0:	mov	r2, #1
   103e4:	mov	r1, r3
   103e8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   103ec:	bl	a6c4 <MyGame_Example_Monster_testarrayofbools_append>
   103f0:	sub	r3, fp, #92	; 0x5c
   103f4:	add	r3, r3, #1
   103f8:	mov	r2, #3
   103fc:	mov	r1, r3
   10400:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10404:	bl	a6c4 <MyGame_Example_Monster_testarrayofbools_append>
   10408:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1040c:	bl	a584 <MyGame_Example_Monster_testarrayofbools_end>
   10410:	sub	r3, fp, #52	; 0x34
   10414:	ldr	r1, [fp, #-20]	; 0xffffffec
   10418:	mov	r0, r3
   1041c:	bl	8d5c <MyGame_Example_Any_as_Monster>
   10420:	sub	r3, fp, #52	; 0x34
   10424:	ldm	r3, {r1, r2}
   10428:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1042c:	bl	a7ec <MyGame_Example_Monster_test_add>
   10430:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10434:	bl	a774 <MyGame_Example_Monster_enemy_start>
   10438:	movw	r1, #0
   1043c:	movt	r1, #0
   10440:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10444:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   10448:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1044c:	bl	a0a0 <MyGame_Example_Monster_testarrayoftables_start>
   10450:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10454:	bl	b174 <MyGame_Example_Monster_vec_push_start>
   10458:	sub	r3, fp, #44	; 0x2c
   1045c:	ldr	r1, [fp, #-20]	; 0xffffffec
   10460:	mov	r0, r3
   10464:	bl	8d5c <MyGame_Example_Any_as_Monster>
   10468:	sub	r3, fp, #44	; 0x2c
   1046c:	ldm	r3, {r1, r2}
   10470:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10474:	bl	a7ec <MyGame_Example_Monster_test_add>
   10478:	movw	r1, #0
   1047c:	movt	r1, #0
   10480:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10484:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   10488:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1048c:	bl	a2c0 <MyGame_Example_Monster_testarrayoftables_push_end>
   10490:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10494:	bl	a28c <MyGame_Example_Monster_testarrayoftables_push_start>
   10498:	ldr	r1, [fp, #-20]	; 0xffffffec
   1049c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   104a0:	bl	a9a0 <MyGame_Example_Monster_test_Monster_add>
   104a4:	movw	r1, #0
   104a8:	movt	r1, #0
   104ac:	ldr	r0, [fp, #-96]	; 0xffffffa0
   104b0:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   104b4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   104b8:	bl	b1a8 <MyGame_Example_Monster_vec_push_end>
   104bc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   104c0:	bl	a28c <MyGame_Example_Monster_testarrayoftables_push_start>
   104c4:	sub	r3, fp, #36	; 0x24
   104c8:	ldr	r1, [fp, #-20]	; 0xffffffec
   104cc:	mov	r0, r3
   104d0:	bl	8d5c <MyGame_Example_Any_as_Monster>
   104d4:	sub	r3, fp, #36	; 0x24
   104d8:	ldm	r3, {r1, r2}
   104dc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   104e0:	bl	a928 <MyGame_Example_Monster_test_add_value>
   104e4:	movw	r1, #0
   104e8:	movt	r1, #0
   104ec:	ldr	r0, [fp, #-96]	; 0xffffffa0
   104f0:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   104f4:	mov	r1, #1
   104f8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   104fc:	bl	a8a8 <MyGame_Example_Monster_test_add_type>
   10500:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10504:	bl	a2c0 <MyGame_Example_Monster_testarrayoftables_push_end>
   10508:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1050c:	bl	a0d4 <MyGame_Example_Monster_testarrayoftables_end>
   10510:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10514:	bl	a7a8 <MyGame_Example_Monster_enemy_end>
   10518:	mov	r1, #0
   1051c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10520:	bl	b0f0 <MyGame_Example_Monster_testbool_add>
   10524:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10528:	bl	b01c <MyGame_Example_Monster_testempty_start>
   1052c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10530:	bl	b050 <MyGame_Example_Monster_testempty_end>
   10534:	ldr	r0, [fp, #-96]	; 0xffffffa0
   10538:	bl	b29c <MyGame_Example_Monster_end_as_root>
   1053c:	mov	r3, #0
   10540:	mov	r0, r3
   10544:	sub	sp, fp, #4
   10548:	ldr	fp, [sp]
   1054c:	add	sp, sp, #4
   10550:	pop	{pc}		; (ldr pc, [sp], #4)

00010554 <test_monster>:
   10554:	str	fp, [sp, #-8]!
   10558:	str	lr, [sp, #4]
   1055c:	add	fp, sp, #4
   10560:	sub	sp, sp, #24
   10564:	str	r0, [fp, #-24]	; 0xffffffe8
   10568:	mov	r1, #0
   1056c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10570:	bl	ff4c <gen_monster>
   10574:	sub	r3, fp, #16
   10578:	mov	r1, r3
   1057c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10580:	bl	0 <flatcc_builder_finalize_aligned_buffer>
   10584:	str	r0, [fp, #-8]
   10588:	ldr	r2, [fp, #-16]
   1058c:	movw	r3, #0
   10590:	movt	r3, #0
   10594:	ldr	r3, [r3]
   10598:	ldr	r1, [fp, #-8]
   1059c:	movw	r0, #0
   105a0:	movt	r0, #0
   105a4:	bl	ddf0 <hexdump>
   105a8:	ldr	r3, [fp, #-16]
   105ac:	mov	r1, r3
   105b0:	ldr	r0, [fp, #-8]
   105b4:	bl	d858 <MyGame_Example_Monster_verify_as_root>
   105b8:	str	r0, [fp, #-12]
   105bc:	ldr	r3, [fp, #-12]
   105c0:	cmp	r3, #0
   105c4:	beq	105ec <test_monster+0x98>
   105c8:	ldr	r0, [fp, #-12]
   105cc:	bl	0 <flatcc_verify_error_string>
   105d0:	mov	r3, r0
   105d4:	mov	r1, r3
   105d8:	movw	r0, #0
   105dc:	movt	r0, #0
   105e0:	bl	0 <printf>
   105e4:	mvn	r3, #0
   105e8:	b	10604 <test_monster+0xb0>
   105ec:	ldr	r0, [fp, #-8]
   105f0:	bl	f018 <verify_monster>
   105f4:	str	r0, [fp, #-12]
   105f8:	ldr	r0, [fp, #-8]
   105fc:	bl	0 <flatcc_builder_aligned_free>
   10600:	ldr	r3, [fp, #-12]
   10604:	mov	r0, r3
   10608:	sub	sp, fp, #4
   1060c:	ldr	fp, [sp]
   10610:	add	sp, sp, #4
   10614:	pop	{pc}		; (ldr pc, [sp], #4)

00010618 <test_monster_with_size>:
   10618:	str	fp, [sp, #-8]!
   1061c:	str	lr, [sp, #4]
   10620:	add	fp, sp, #4
   10624:	sub	sp, sp, #32
   10628:	str	r0, [fp, #-32]	; 0xffffffe0
   1062c:	mov	r1, #1
   10630:	ldr	r0, [fp, #-32]	; 0xffffffe0
   10634:	bl	ff4c <gen_monster>
   10638:	sub	r3, fp, #24
   1063c:	mov	r1, r3
   10640:	ldr	r0, [fp, #-32]	; 0xffffffe0
   10644:	bl	0 <flatcc_builder_finalize_aligned_buffer>
   10648:	str	r0, [fp, #-8]
   1064c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   10650:	movw	r3, #0
   10654:	movt	r3, #0
   10658:	ldr	r3, [r3]
   1065c:	ldr	r1, [fp, #-8]
   10660:	movw	r0, #0
   10664:	movt	r0, #0
   10668:	bl	ddf0 <hexdump>
   1066c:	ldr	r3, [fp, #-8]
   10670:	and	r3, r3, #15
   10674:	cmp	r3, #0
   10678:	beq	106a4 <test_monster_with_size+0x8c>
   1067c:	movw	r0, #0
   10680:	movt	r0, #0
   10684:	bl	0 <printf>
   10688:	ldr	r3, [fp, #-8]
   1068c:	mov	r1, r3
   10690:	movw	r0, #0
   10694:	movt	r0, #0
   10698:	bl	0 <printf>
   1069c:	mvn	r3, #0
   106a0:	b	10754 <test_monster_with_size+0x13c>
   106a4:	sub	r3, fp, #28
   106a8:	mov	r1, r3
   106ac:	ldr	r0, [fp, #-8]
   106b0:	bl	1d90 <flatbuffers_read_size_prefix>
   106b4:	str	r0, [fp, #-12]
   106b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   106bc:	sub	r3, r3, #4
   106c0:	str	r3, [fp, #-16]
   106c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   106c8:	ldr	r2, [fp, #-16]
   106cc:	cmp	r2, r3
   106d0:	beq	106f8 <test_monster_with_size+0xe0>
   106d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   106d8:	mov	r1, r3
   106dc:	ldr	r3, [fp, #-16]
   106e0:	mov	r2, r3
   106e4:	movw	r0, #0
   106e8:	movt	r0, #0
   106ec:	bl	0 <printf>
   106f0:	mvn	r3, #0
   106f4:	b	10754 <test_monster_with_size+0x13c>
   106f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   106fc:	mov	r1, r3
   10700:	ldr	r0, [fp, #-12]
   10704:	bl	d858 <MyGame_Example_Monster_verify_as_root>
   10708:	str	r0, [fp, #-20]	; 0xffffffec
   1070c:	ldr	r3, [fp, #-20]	; 0xffffffec
   10710:	cmp	r3, #0
   10714:	beq	1073c <test_monster_with_size+0x124>
   10718:	ldr	r0, [fp, #-20]	; 0xffffffec
   1071c:	bl	0 <flatcc_verify_error_string>
   10720:	mov	r3, r0
   10724:	mov	r1, r3
   10728:	movw	r0, #0
   1072c:	movt	r0, #0
   10730:	bl	0 <printf>
   10734:	mvn	r3, #0
   10738:	b	10754 <test_monster_with_size+0x13c>
   1073c:	ldr	r0, [fp, #-12]
   10740:	bl	f018 <verify_monster>
   10744:	str	r0, [fp, #-20]	; 0xffffffec
   10748:	ldr	r0, [fp, #-8]
   1074c:	bl	0 <flatcc_builder_aligned_free>
   10750:	ldr	r3, [fp, #-20]	; 0xffffffec
   10754:	mov	r0, r3
   10758:	sub	sp, fp, #4
   1075c:	ldr	fp, [sp]
   10760:	add	sp, sp, #4
   10764:	pop	{pc}		; (ldr pc, [sp], #4)

00010768 <test_string>:
   10768:	str	fp, [sp, #-8]!
   1076c:	str	lr, [sp, #4]
   10770:	add	fp, sp, #4
   10774:	sub	sp, sp, #24
   10778:	str	r0, [fp, #-24]	; 0xffffffe8
   1077c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10780:	bl	0 <flatcc_builder_reset>
   10784:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10788:	bl	b1ec <MyGame_Example_Monster_start_as_root>
   1078c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10790:	bl	9b1c <MyGame_Example_Monster_name_start>
   10794:	mov	r1, #3
   10798:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1079c:	bl	9dd4 <MyGame_Example_Monster_name_extend>
   107a0:	str	r0, [fp, #-8]
   107a4:	ldr	r3, [fp, #-8]
   107a8:	mov	r2, #49	; 0x31
   107ac:	strb	r2, [r3]
   107b0:	ldr	r3, [fp, #-8]
   107b4:	add	r3, r3, #1
   107b8:	mov	r2, #50	; 0x32
   107bc:	strb	r2, [r3]
   107c0:	ldr	r3, [fp, #-8]
   107c4:	add	r3, r3, #2
   107c8:	mov	r2, #51	; 0x33
   107cc:	strb	r2, [r3]
   107d0:	movw	r1, #0
   107d4:	movt	r1, #0
   107d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   107dc:	bl	9d20 <MyGame_Example_Monster_name_append_str>
   107e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   107e4:	bl	9da0 <MyGame_Example_Monster_name_reserved_len>
   107e8:	mov	r3, r0
   107ec:	cmp	r3, #4
   107f0:	beq	10814 <test_string+0xac>
   107f4:	movw	r3, #0
   107f8:	movt	r3, #0
   107fc:	movw	r2, #1080	; 0x438
   10800:	movw	r1, #0
   10804:	movt	r1, #0
   10808:	movw	r0, #0
   1080c:	movt	r0, #0
   10810:	bl	0 <__assert_fail>
   10814:	mov	r2, #30
   10818:	movw	r1, #0
   1081c:	movt	r1, #0
   10820:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10824:	bl	9d5c <MyGame_Example_Monster_name_append_strn>
   10828:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1082c:	bl	9da0 <MyGame_Example_Monster_name_reserved_len>
   10830:	mov	r3, r0
   10834:	cmp	r3, #8
   10838:	beq	1085c <test_string+0xf4>
   1083c:	movw	r3, #0
   10840:	movt	r3, #0
   10844:	movw	r2, #1082	; 0x43a
   10848:	movw	r1, #0
   1084c:	movt	r1, #0
   10850:	movw	r0, #0
   10854:	movt	r0, #0
   10858:	bl	0 <__assert_fail>
   1085c:	mov	r2, #2
   10860:	movw	r1, #0
   10864:	movt	r1, #0
   10868:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1086c:	bl	9cdc <MyGame_Example_Monster_name_append>
   10870:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10874:	bl	9da0 <MyGame_Example_Monster_name_reserved_len>
   10878:	mov	r3, r0
   1087c:	cmp	r3, #10
   10880:	beq	108a4 <test_string+0x13c>
   10884:	movw	r3, #0
   10888:	movt	r3, #0
   1088c:	movw	r2, #1084	; 0x43c
   10890:	movw	r1, #0
   10894:	movt	r1, #0
   10898:	movw	r0, #0
   1089c:	movt	r0, #0
   108a0:	bl	0 <__assert_fail>
   108a4:	mov	r1, #3
   108a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   108ac:	bl	9e44 <MyGame_Example_Monster_name_truncate>
   108b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   108b4:	bl	9da0 <MyGame_Example_Monster_name_reserved_len>
   108b8:	mov	r3, r0
   108bc:	cmp	r3, #7
   108c0:	beq	108e4 <test_string+0x17c>
   108c4:	movw	r3, #0
   108c8:	movt	r3, #0
   108cc:	movw	r2, #1086	; 0x43e
   108d0:	movw	r1, #0
   108d4:	movt	r1, #0
   108d8:	movw	r0, #0
   108dc:	movt	r0, #0
   108e0:	bl	0 <__assert_fail>
   108e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   108e8:	bl	9e10 <MyGame_Example_Monster_name_edit>
   108ec:	str	r0, [fp, #-8]
   108f0:	ldr	r3, [fp, #-8]
   108f4:	add	r3, r3, #4
   108f8:	mov	r2, #46	; 0x2e
   108fc:	strb	r2, [r3]
   10900:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10904:	bl	9b50 <MyGame_Example_Monster_name_end>
   10908:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1090c:	bl	b29c <MyGame_Example_Monster_end_as_root>
   10910:	mov	r1, #0
   10914:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10918:	bl	0 <flatcc_builder_get_direct_buffer>
   1091c:	str	r0, [fp, #-12]
   10920:	ldr	r3, [fp, #-12]
   10924:	cmp	r3, #0
   10928:	bne	1094c <test_string+0x1e4>
   1092c:	movw	r3, #0
   10930:	movt	r3, #0
   10934:	movw	r2, #1093	; 0x445
   10938:	movw	r1, #0
   1093c:	movt	r1, #0
   10940:	movw	r0, #0
   10944:	movt	r0, #0
   10948:	bl	0 <__assert_fail>
   1094c:	ldr	r0, [fp, #-12]
   10950:	bl	3148 <MyGame_Example_Monster_as_root>
   10954:	str	r0, [fp, #-16]
   10958:	ldr	r0, [fp, #-16]
   1095c:	bl	3a28 <MyGame_Example_Monster_name>
   10960:	mov	r3, r0
   10964:	movw	r1, #0
   10968:	movt	r1, #0
   1096c:	mov	r0, r3
   10970:	bl	0 <strcmp>
   10974:	mov	r3, r0
   10978:	cmp	r3, #0
   1097c:	beq	10994 <test_string+0x22c>
   10980:	movw	r0, #0
   10984:	movt	r0, #0
   10988:	bl	0 <puts>
   1098c:	mvn	r3, #0
   10990:	b	10998 <test_string+0x230>
   10994:	mov	r3, #0
   10998:	mov	r0, r3
   1099c:	sub	sp, fp, #4
   109a0:	ldr	fp, [sp]
   109a4:	add	sp, sp, #4
   109a8:	pop	{pc}		; (ldr pc, [sp], #4)

000109ac <test_sort_find>:
   109ac:	str	r4, [sp, #-12]!
   109b0:	str	fp, [sp, #4]
   109b4:	str	lr, [sp, #8]
   109b8:	add	fp, sp, #8
   109bc:	sub	sp, sp, #44	; 0x2c
   109c0:	str	r0, [fp, #-48]	; 0xffffffd0
   109c4:	mvn	r3, #0
   109c8:	str	r3, [fp, #-16]
   109cc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   109d0:	bl	0 <flatcc_builder_reset>
   109d4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   109d8:	bl	b1ec <MyGame_Example_Monster_start_as_root>
   109dc:	movw	r1, #0
   109e0:	movt	r1, #0
   109e4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   109e8:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   109ec:	ldr	r0, [fp, #-48]	; 0xffffffd0
   109f0:	bl	a0a0 <MyGame_Example_Monster_testarrayoftables_start>
   109f4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   109f8:	bl	a28c <MyGame_Example_Monster_testarrayoftables_push_start>
   109fc:	movw	r1, #0
   10a00:	movt	r1, #0
   10a04:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10a08:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   10a0c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10a10:	bl	a2c0 <MyGame_Example_Monster_testarrayoftables_push_end>
   10a14:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10a18:	bl	a28c <MyGame_Example_Monster_testarrayoftables_push_start>
   10a1c:	movw	r1, #0
   10a20:	movt	r1, #0
   10a24:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10a28:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   10a2c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10a30:	bl	a2c0 <MyGame_Example_Monster_testarrayoftables_push_end>
   10a34:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10a38:	bl	a28c <MyGame_Example_Monster_testarrayoftables_push_start>
   10a3c:	movw	r1, #0
   10a40:	movt	r1, #0
   10a44:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10a48:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   10a4c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10a50:	bl	a2c0 <MyGame_Example_Monster_testarrayoftables_push_end>
   10a54:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10a58:	bl	a28c <MyGame_Example_Monster_testarrayoftables_push_start>
   10a5c:	movw	r1, #0
   10a60:	movt	r1, #0
   10a64:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10a68:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   10a6c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10a70:	bl	a2c0 <MyGame_Example_Monster_testarrayoftables_push_end>
   10a74:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10a78:	bl	a28c <MyGame_Example_Monster_testarrayoftables_push_start>
   10a7c:	movw	r1, #0
   10a80:	movt	r1, #0
   10a84:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10a88:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   10a8c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10a90:	bl	a2c0 <MyGame_Example_Monster_testarrayoftables_push_end>
   10a94:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10a98:	bl	a0d4 <MyGame_Example_Monster_testarrayoftables_end>
   10a9c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10aa0:	bl	b29c <MyGame_Example_Monster_end_as_root>
   10aa4:	sub	r3, fp, #40	; 0x28
   10aa8:	mov	r1, r3
   10aac:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10ab0:	bl	0 <flatcc_builder_finalize_aligned_buffer>
   10ab4:	str	r0, [fp, #-20]	; 0xffffffec
   10ab8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   10abc:	movw	r3, #0
   10ac0:	movt	r3, #0
   10ac4:	ldr	r3, [r3]
   10ac8:	ldr	r1, [fp, #-20]	; 0xffffffec
   10acc:	movw	r0, #0
   10ad0:	movt	r0, #0
   10ad4:	bl	ddf0 <hexdump>
   10ad8:	ldr	r0, [fp, #-20]	; 0xffffffec
   10adc:	bl	3148 <MyGame_Example_Monster_as_root>
   10ae0:	str	r0, [fp, #-24]	; 0xffffffe8
   10ae4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10ae8:	bl	4bdc <MyGame_Example_Monster_testarrayoftables>
   10aec:	str	r0, [fp, #-28]	; 0xffffffe4
   10af0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   10af4:	cmp	r3, #0
   10af8:	bne	10b1c <test_sort_find+0x170>
   10afc:	movw	r3, #0
   10b00:	movt	r3, #0
   10b04:	movw	r2, #1147	; 0x47b
   10b08:	movw	r1, #0
   10b0c:	movt	r1, #0
   10b10:	movw	r0, #0
   10b14:	movt	r0, #0
   10b18:	bl	0 <__assert_fail>
   10b1c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   10b20:	str	r3, [fp, #-32]	; 0xffffffe0
   10b24:	ldr	r0, [fp, #-32]	; 0xffffffe0
   10b28:	bl	46c0 <MyGame_Example_Monster_vec_sort_by_name>
   10b2c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   10b30:	movw	r3, #0
   10b34:	movt	r3, #0
   10b38:	ldr	r3, [r3]
   10b3c:	ldr	r1, [fp, #-20]	; 0xffffffec
   10b40:	movw	r0, #0
   10b44:	movt	r0, #0
   10b48:	bl	ddf0 <hexdump>
   10b4c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10b50:	bl	3000 <MyGame_Example_Monster_vec_len>
   10b54:	mov	r3, r0
   10b58:	cmp	r3, #5
   10b5c:	beq	10b70 <test_sort_find+0x1c4>
   10b60:	movw	r0, #0
   10b64:	movt	r0, #0
   10b68:	bl	0 <puts>
   10b6c:	b	10ec4 <test_sort_find+0x518>
   10b70:	mov	r1, #0
   10b74:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10b78:	bl	3050 <MyGame_Example_Monster_vec_at>
   10b7c:	mov	r3, r0
   10b80:	mov	r0, r3
   10b84:	bl	3a28 <MyGame_Example_Monster_name>
   10b88:	mov	r3, r0
   10b8c:	movw	r1, #0
   10b90:	movt	r1, #0
   10b94:	mov	r0, r3
   10b98:	bl	0 <strcmp>
   10b9c:	mov	r3, r0
   10ba0:	cmp	r3, #0
   10ba4:	beq	10bb8 <test_sort_find+0x20c>
   10ba8:	movw	r0, #0
   10bac:	movt	r0, #0
   10bb0:	bl	0 <puts>
   10bb4:	b	10ec4 <test_sort_find+0x518>
   10bb8:	mov	r1, #1
   10bbc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10bc0:	bl	3050 <MyGame_Example_Monster_vec_at>
   10bc4:	mov	r3, r0
   10bc8:	mov	r0, r3
   10bcc:	bl	3a28 <MyGame_Example_Monster_name>
   10bd0:	mov	r3, r0
   10bd4:	movw	r1, #0
   10bd8:	movt	r1, #0
   10bdc:	mov	r0, r3
   10be0:	bl	0 <strcmp>
   10be4:	mov	r3, r0
   10be8:	cmp	r3, #0
   10bec:	beq	10c00 <test_sort_find+0x254>
   10bf0:	movw	r0, #0
   10bf4:	movt	r0, #0
   10bf8:	bl	0 <puts>
   10bfc:	b	10ec4 <test_sort_find+0x518>
   10c00:	mov	r1, #2
   10c04:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10c08:	bl	3050 <MyGame_Example_Monster_vec_at>
   10c0c:	mov	r3, r0
   10c10:	mov	r0, r3
   10c14:	bl	3a28 <MyGame_Example_Monster_name>
   10c18:	mov	r3, r0
   10c1c:	movw	r1, #0
   10c20:	movt	r1, #0
   10c24:	mov	r0, r3
   10c28:	bl	0 <strcmp>
   10c2c:	mov	r3, r0
   10c30:	cmp	r3, #0
   10c34:	beq	10c48 <test_sort_find+0x29c>
   10c38:	movw	r0, #0
   10c3c:	movt	r0, #0
   10c40:	bl	0 <puts>
   10c44:	b	10ec4 <test_sort_find+0x518>
   10c48:	mov	r1, #3
   10c4c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10c50:	bl	3050 <MyGame_Example_Monster_vec_at>
   10c54:	mov	r3, r0
   10c58:	mov	r0, r3
   10c5c:	bl	3a28 <MyGame_Example_Monster_name>
   10c60:	mov	r3, r0
   10c64:	movw	r1, #0
   10c68:	movt	r1, #0
   10c6c:	mov	r0, r3
   10c70:	bl	0 <strcmp>
   10c74:	mov	r3, r0
   10c78:	cmp	r3, #0
   10c7c:	beq	10c90 <test_sort_find+0x2e4>
   10c80:	movw	r0, #0
   10c84:	movt	r0, #0
   10c88:	bl	0 <puts>
   10c8c:	b	10ec4 <test_sort_find+0x518>
   10c90:	mov	r1, #4
   10c94:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10c98:	bl	3050 <MyGame_Example_Monster_vec_at>
   10c9c:	mov	r3, r0
   10ca0:	mov	r0, r3
   10ca4:	bl	3a28 <MyGame_Example_Monster_name>
   10ca8:	mov	r3, r0
   10cac:	movw	r1, #0
   10cb0:	movt	r1, #0
   10cb4:	mov	r0, r3
   10cb8:	bl	0 <strcmp>
   10cbc:	mov	r3, r0
   10cc0:	cmp	r3, #0
   10cc4:	beq	10cd8 <test_sort_find+0x32c>
   10cc8:	movw	r0, #0
   10ccc:	movt	r0, #0
   10cd0:	bl	0 <puts>
   10cd4:	b	10ec4 <test_sort_find+0x518>
   10cd8:	mov	r1, #1
   10cdc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10ce0:	bl	3050 <MyGame_Example_Monster_vec_at>
   10ce4:	mov	r4, r0
   10ce8:	mov	r1, #2
   10cec:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10cf0:	bl	3050 <MyGame_Example_Monster_vec_at>
   10cf4:	mov	r3, r0
   10cf8:	cmp	r4, r3
   10cfc:	bne	10d10 <test_sort_find+0x364>
   10d00:	movw	r0, #0
   10d04:	movt	r0, #0
   10d08:	bl	0 <puts>
   10d0c:	b	10ec4 <test_sort_find+0x518>
   10d10:	movw	r1, #0
   10d14:	movt	r1, #0
   10d18:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10d1c:	bl	46f0 <MyGame_Example_Monster_vec_find>
   10d20:	mov	r3, r0
   10d24:	cmp	r3, #3
   10d28:	beq	10d3c <test_sort_find+0x390>
   10d2c:	movw	r0, #0
   10d30:	movt	r0, #0
   10d34:	bl	0 <puts>
   10d38:	b	10ec4 <test_sort_find+0x518>
   10d3c:	mov	r2, #5
   10d40:	movw	r1, #0
   10d44:	movt	r1, #0
   10d48:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10d4c:	bl	472c <MyGame_Example_Monster_vec_find_n>
   10d50:	mov	r3, r0
   10d54:	cmp	r3, #3
   10d58:	beq	10d6c <test_sort_find+0x3c0>
   10d5c:	movw	r0, #0
   10d60:	movt	r0, #0
   10d64:	bl	0 <puts>
   10d68:	b	10ec4 <test_sort_find+0x518>
   10d6c:	movw	r1, #0
   10d70:	movt	r1, #0
   10d74:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10d78:	bl	4120 <MyGame_Example_Monster_vec_find_by_name>
   10d7c:	mov	r3, r0
   10d80:	cmp	r3, #3
   10d84:	beq	10d98 <test_sort_find+0x3ec>
   10d88:	movw	r0, #0
   10d8c:	movt	r0, #0
   10d90:	bl	0 <puts>
   10d94:	b	10ec4 <test_sort_find+0x518>
   10d98:	mov	r2, #5
   10d9c:	movw	r1, #0
   10da0:	movt	r1, #0
   10da4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10da8:	bl	4264 <MyGame_Example_Monster_vec_find_n_by_name>
   10dac:	mov	r3, r0
   10db0:	cmp	r3, #3
   10db4:	beq	10dc8 <test_sort_find+0x41c>
   10db8:	movw	r0, #0
   10dbc:	movt	r0, #0
   10dc0:	bl	0 <puts>
   10dc4:	b	10ec4 <test_sort_find+0x518>
   10dc8:	movw	r1, #0
   10dcc:	movt	r1, #0
   10dd0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10dd4:	bl	4120 <MyGame_Example_Monster_vec_find_by_name>
   10dd8:	mov	r2, r0
   10ddc:	movw	r3, #0
   10de0:	movt	r3, #0
   10de4:	ldr	r3, [r3]
   10de8:	cmp	r2, r3
   10dec:	beq	10e00 <test_sort_find+0x454>
   10df0:	movw	r0, #0
   10df4:	movt	r0, #0
   10df8:	bl	0 <puts>
   10dfc:	b	10ec4 <test_sort_find+0x518>
   10e00:	movw	r1, #0
   10e04:	movt	r1, #0
   10e08:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10e0c:	bl	4120 <MyGame_Example_Monster_vec_find_by_name>
   10e10:	mov	r3, r0
   10e14:	cmp	r3, #0
   10e18:	beq	10e2c <test_sort_find+0x480>
   10e1c:	movw	r0, #0
   10e20:	movt	r0, #0
   10e24:	bl	0 <puts>
   10e28:	b	10ec4 <test_sort_find+0x518>
   10e2c:	movw	r1, #0
   10e30:	movt	r1, #0
   10e34:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10e38:	bl	4120 <MyGame_Example_Monster_vec_find_by_name>
   10e3c:	str	r0, [fp, #-36]	; 0xffffffdc
   10e40:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10e44:	cmp	r3, #1
   10e48:	beq	10e70 <test_sort_find+0x4c4>
   10e4c:	movw	r0, #0
   10e50:	movt	r0, #0
   10e54:	bl	0 <puts>
   10e58:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10e5c:	mov	r1, r3
   10e60:	movw	r0, #0
   10e64:	movt	r0, #0
   10e68:	bl	0 <printf>
   10e6c:	b	10ec4 <test_sort_find+0x518>
   10e70:	movw	r1, #0
   10e74:	movt	r1, #0
   10e78:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10e7c:	bl	4120 <MyGame_Example_Monster_vec_find_by_name>
   10e80:	str	r0, [fp, #-36]	; 0xffffffdc
   10e84:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10e88:	cmp	r3, #4
   10e8c:	beq	10eb4 <test_sort_find+0x508>
   10e90:	movw	r0, #0
   10e94:	movt	r0, #0
   10e98:	bl	0 <puts>
   10e9c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10ea0:	mov	r1, r3
   10ea4:	movw	r0, #0
   10ea8:	movt	r0, #0
   10eac:	bl	0 <printf>
   10eb0:	b	10ec4 <test_sort_find+0x518>
   10eb4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   10eb8:	bl	46c0 <MyGame_Example_Monster_vec_sort_by_name>
   10ebc:	mov	r3, #0
   10ec0:	str	r3, [fp, #-16]
   10ec4:	ldr	r0, [fp, #-20]	; 0xffffffec
   10ec8:	bl	0 <flatcc_builder_aligned_free>
   10ecc:	ldr	r3, [fp, #-16]
   10ed0:	mov	r0, r3
   10ed4:	sub	sp, fp, #8
   10ed8:	ldr	r4, [sp]
   10edc:	ldr	fp, [sp, #4]
   10ee0:	add	sp, sp, #8
   10ee4:	pop	{pc}		; (ldr pc, [sp], #4)

00010ee8 <count_monsters>:
   10ee8:	str	fp, [sp, #-8]!
   10eec:	str	lr, [sp, #4]
   10ef0:	add	fp, sp, #4
   10ef4:	sub	sp, sp, #16
   10ef8:	str	r0, [fp, #-16]
   10efc:	str	r1, [fp, #-20]	; 0xffffffec
   10f00:	mov	r3, #0
   10f04:	str	r3, [fp, #-12]
   10f08:	ldr	r1, [fp, #-20]	; 0xffffffec
   10f0c:	ldr	r0, [fp, #-16]
   10f10:	bl	4770 <MyGame_Example_Monster_vec_scan>
   10f14:	str	r0, [fp, #-8]
   10f18:	b	10f4c <count_monsters+0x64>
   10f1c:	ldr	r3, [fp, #-12]
   10f20:	add	r3, r3, #1
   10f24:	str	r3, [fp, #-12]
   10f28:	ldr	r3, [fp, #-8]
   10f2c:	add	r1, r3, #1
   10f30:	movw	r3, #0
   10f34:	movt	r3, #0
   10f38:	ldr	r2, [r3]
   10f3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   10f40:	ldr	r0, [fp, #-16]
   10f44:	bl	47f0 <MyGame_Example_Monster_vec_scan_ex>
   10f48:	str	r0, [fp, #-8]
   10f4c:	movw	r3, #0
   10f50:	movt	r3, #0
   10f54:	ldr	r3, [r3]
   10f58:	ldr	r2, [fp, #-8]
   10f5c:	cmp	r2, r3
   10f60:	bne	10f1c <count_monsters+0x34>
   10f64:	ldr	r3, [fp, #-12]
   10f68:	mov	r0, r3
   10f6c:	sub	sp, fp, #4
   10f70:	ldr	fp, [sp]
   10f74:	add	sp, sp, #4
   10f78:	pop	{pc}		; (ldr pc, [sp], #4)

00010f7c <test_scan>:
   10f7c:	str	fp, [sp, #-8]!
   10f80:	str	lr, [sp, #4]
   10f84:	add	fp, sp, #4
   10f88:	sub	sp, sp, #56	; 0x38
   10f8c:	str	r0, [fp, #-48]	; 0xffffffd0
   10f90:	movw	r2, #0
   10f94:	movt	r2, #0
   10f98:	sub	r3, fp, #44	; 0x2c
   10f9c:	ldr	r1, [r2]
   10fa0:	str	r1, [r3]
   10fa4:	ldrh	r1, [r2, #4]
   10fa8:	strh	r1, [r3, #4]
   10fac:	ldrb	r2, [r2, #6]
   10fb0:	strb	r2, [r3, #6]
   10fb4:	mvn	r3, #0
   10fb8:	str	r3, [fp, #-8]
   10fbc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10fc0:	bl	0 <flatcc_builder_reset>
   10fc4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10fc8:	bl	b1ec <MyGame_Example_Monster_start_as_root>
   10fcc:	movw	r1, #0
   10fd0:	movt	r1, #0
   10fd4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10fd8:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   10fdc:	sub	r3, fp, #44	; 0x2c
   10fe0:	mov	r2, #7
   10fe4:	mov	r1, r3
   10fe8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10fec:	bl	9fe0 <MyGame_Example_Monster_inventory_create>
   10ff0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10ff4:	bl	a370 <MyGame_Example_Monster_testarrayofstring_start>
   10ff8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10ffc:	bl	a3a4 <MyGame_Example_Monster_testarrayofstring_end>
   11000:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11004:	bl	a0a0 <MyGame_Example_Monster_testarrayoftables_start>
   11008:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1100c:	bl	a28c <MyGame_Example_Monster_testarrayoftables_push_start>
   11010:	movw	r1, #0
   11014:	movt	r1, #0
   11018:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1101c:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   11020:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11024:	bl	a2c0 <MyGame_Example_Monster_testarrayoftables_push_end>
   11028:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1102c:	bl	a28c <MyGame_Example_Monster_testarrayoftables_push_start>
   11030:	movw	r1, #0
   11034:	movt	r1, #0
   11038:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1103c:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   11040:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11044:	bl	a2c0 <MyGame_Example_Monster_testarrayoftables_push_end>
   11048:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1104c:	bl	a28c <MyGame_Example_Monster_testarrayoftables_push_start>
   11050:	movw	r1, #0
   11054:	movt	r1, #0
   11058:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1105c:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   11060:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11064:	bl	a2c0 <MyGame_Example_Monster_testarrayoftables_push_end>
   11068:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1106c:	bl	a28c <MyGame_Example_Monster_testarrayoftables_push_start>
   11070:	movw	r1, #0
   11074:	movt	r1, #0
   11078:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1107c:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   11080:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11084:	bl	a2c0 <MyGame_Example_Monster_testarrayoftables_push_end>
   11088:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1108c:	bl	a28c <MyGame_Example_Monster_testarrayoftables_push_start>
   11090:	movw	r1, #0
   11094:	movt	r1, #0
   11098:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1109c:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   110a0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   110a4:	bl	a2c0 <MyGame_Example_Monster_testarrayoftables_push_end>
   110a8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   110ac:	bl	a0d4 <MyGame_Example_Monster_testarrayoftables_end>
   110b0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   110b4:	bl	b29c <MyGame_Example_Monster_end_as_root>
   110b8:	sub	r3, fp, #36	; 0x24
   110bc:	mov	r1, r3
   110c0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   110c4:	bl	0 <flatcc_builder_finalize_aligned_buffer>
   110c8:	str	r0, [fp, #-12]
   110cc:	ldr	r0, [fp, #-12]
   110d0:	bl	3148 <MyGame_Example_Monster_as_root>
   110d4:	str	r0, [fp, #-16]
   110d8:	ldr	r0, [fp, #-16]
   110dc:	bl	4bdc <MyGame_Example_Monster_testarrayoftables>
   110e0:	str	r0, [fp, #-20]	; 0xffffffec
   110e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   110e8:	cmp	r3, #0
   110ec:	bne	11110 <test_scan+0x194>
   110f0:	movw	r3, #0
   110f4:	movt	r3, #0
   110f8:	movw	r2, #1305	; 0x519
   110fc:	movw	r1, #0
   11100:	movt	r1, #0
   11104:	movw	r0, #0
   11108:	movt	r0, #0
   1110c:	bl	0 <__assert_fail>
   11110:	ldr	r0, [fp, #-16]
   11114:	bl	4ad8 <MyGame_Example_Monster_inventory>
   11118:	str	r0, [fp, #-24]	; 0xffffffe8
   1111c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11120:	cmp	r3, #0
   11124:	bne	11148 <test_scan+0x1cc>
   11128:	movw	r3, #0
   1112c:	movt	r3, #0
   11130:	movw	r2, #1307	; 0x51b
   11134:	movw	r1, #0
   11138:	movt	r1, #0
   1113c:	movw	r0, #0
   11140:	movt	r0, #0
   11144:	bl	0 <__assert_fail>
   11148:	ldr	r0, [fp, #-16]
   1114c:	bl	4ce0 <MyGame_Example_Monster_testarrayofstring>
   11150:	str	r0, [fp, #-28]	; 0xffffffe4
   11154:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11158:	cmp	r3, #0
   1115c:	bne	11180 <test_scan+0x204>
   11160:	movw	r3, #0
   11164:	movt	r3, #0
   11168:	movw	r2, #1309	; 0x51d
   1116c:	movw	r1, #0
   11170:	movt	r1, #0
   11174:	movw	r0, #0
   11178:	movt	r0, #0
   1117c:	bl	0 <__assert_fail>
   11180:	movw	r1, #0
   11184:	movt	r1, #0
   11188:	ldr	r0, [fp, #-20]	; 0xffffffec
   1118c:	bl	4770 <MyGame_Example_Monster_vec_scan>
   11190:	mov	r3, r0
   11194:	cmp	r3, #1
   11198:	beq	111ac <test_scan+0x230>
   1119c:	movw	r0, #0
   111a0:	movt	r0, #0
   111a4:	bl	0 <puts>
   111a8:	b	11cb4 <test_scan+0xd38>
   111ac:	movw	r1, #0
   111b0:	movt	r1, #0
   111b4:	ldr	r0, [fp, #-20]	; 0xffffffec
   111b8:	bl	483c <MyGame_Example_Monster_vec_rscan>
   111bc:	mov	r3, r0
   111c0:	cmp	r3, #1
   111c4:	beq	111d8 <test_scan+0x25c>
   111c8:	movw	r0, #0
   111cc:	movt	r0, #0
   111d0:	bl	0 <puts>
   111d4:	b	11cb4 <test_scan+0xd38>
   111d8:	mov	r2, #5
   111dc:	movw	r1, #0
   111e0:	movt	r1, #0
   111e4:	ldr	r0, [fp, #-20]	; 0xffffffec
   111e8:	bl	47ac <MyGame_Example_Monster_vec_scan_n>
   111ec:	mov	r3, r0
   111f0:	cmp	r3, #1
   111f4:	beq	11208 <test_scan+0x28c>
   111f8:	movw	r0, #0
   111fc:	movt	r0, #0
   11200:	bl	0 <puts>
   11204:	b	11cb4 <test_scan+0xd38>
   11208:	mov	r2, #5
   1120c:	movw	r1, #0
   11210:	movt	r1, #0
   11214:	ldr	r0, [fp, #-20]	; 0xffffffec
   11218:	bl	4878 <MyGame_Example_Monster_vec_rscan_n>
   1121c:	mov	r3, r0
   11220:	cmp	r3, #1
   11224:	beq	11238 <test_scan+0x2bc>
   11228:	movw	r0, #0
   1122c:	movt	r0, #0
   11230:	bl	0 <puts>
   11234:	b	11cb4 <test_scan+0xd38>
   11238:	movw	r3, #0
   1123c:	movt	r3, #0
   11240:	ldr	r2, [r3]
   11244:	movw	r3, #0
   11248:	movt	r3, #0
   1124c:	mov	r1, #2
   11250:	ldr	r0, [fp, #-20]	; 0xffffffec
   11254:	bl	47f0 <MyGame_Example_Monster_vec_scan_ex>
   11258:	mov	r2, r0
   1125c:	movw	r3, #0
   11260:	movt	r3, #0
   11264:	ldr	r3, [r3]
   11268:	cmp	r2, r3
   1126c:	beq	11280 <test_scan+0x304>
   11270:	movw	r0, #0
   11274:	movt	r0, #0
   11278:	bl	0 <puts>
   1127c:	b	11cb4 <test_scan+0xd38>
   11280:	movw	r1, #0
   11284:	movt	r1, #0
   11288:	ldr	r0, [fp, #-20]	; 0xffffffec
   1128c:	bl	4770 <MyGame_Example_Monster_vec_scan>
   11290:	mov	r2, r0
   11294:	movw	r3, #0
   11298:	movt	r3, #0
   1129c:	ldr	r3, [r3]
   112a0:	cmp	r2, r3
   112a4:	beq	112b8 <test_scan+0x33c>
   112a8:	movw	r0, #0
   112ac:	movt	r0, #0
   112b0:	bl	0 <puts>
   112b4:	b	11cb4 <test_scan+0xd38>
   112b8:	movw	r1, #0
   112bc:	movt	r1, #0
   112c0:	ldr	r0, [fp, #-20]	; 0xffffffec
   112c4:	bl	4770 <MyGame_Example_Monster_vec_scan>
   112c8:	mov	r3, r0
   112cc:	cmp	r3, #0
   112d0:	beq	112e4 <test_scan+0x368>
   112d4:	movw	r0, #0
   112d8:	movt	r0, #0
   112dc:	bl	0 <puts>
   112e0:	b	11cb4 <test_scan+0xd38>
   112e4:	movw	r1, #0
   112e8:	movt	r1, #0
   112ec:	ldr	r0, [fp, #-20]	; 0xffffffec
   112f0:	bl	3b48 <MyGame_Example_Monster_vec_scan_by_name>
   112f4:	mov	r3, r0
   112f8:	cmp	r3, #2
   112fc:	beq	11310 <test_scan+0x394>
   11300:	movw	r0, #0
   11304:	movt	r0, #0
   11308:	bl	0 <puts>
   1130c:	b	11cb4 <test_scan+0xd38>
   11310:	movw	r1, #0
   11314:	movt	r1, #0
   11318:	ldr	r0, [fp, #-20]	; 0xffffffec
   1131c:	bl	3e44 <MyGame_Example_Monster_vec_rscan_by_name>
   11320:	mov	r3, r0
   11324:	cmp	r3, #4
   11328:	beq	1133c <test_scan+0x3c0>
   1132c:	movw	r0, #0
   11330:	movt	r0, #0
   11334:	bl	0 <puts>
   11338:	b	11cb4 <test_scan+0xd38>
   1133c:	mov	r2, #8
   11340:	movw	r1, #0
   11344:	movt	r1, #0
   11348:	ldr	r0, [fp, #-20]	; 0xffffffec
   1134c:	bl	3ee0 <MyGame_Example_Monster_vec_rscan_n_by_name>
   11350:	mov	r3, r0
   11354:	cmp	r3, #4
   11358:	beq	1136c <test_scan+0x3f0>
   1135c:	movw	r0, #0
   11360:	movt	r0, #0
   11364:	bl	0 <puts>
   11368:	b	11cb4 <test_scan+0xd38>
   1136c:	mov	r3, #8
   11370:	str	r3, [sp]
   11374:	movw	r3, #0
   11378:	movt	r3, #0
   1137c:	mov	r2, #3
   11380:	mov	r1, #1
   11384:	ldr	r0, [fp, #-20]	; 0xffffffec
   11388:	bl	4050 <MyGame_Example_Monster_vec_rscan_ex_n_by_name>
   1138c:	mov	r3, r0
   11390:	cmp	r3, #2
   11394:	beq	113a8 <test_scan+0x42c>
   11398:	movw	r0, #0
   1139c:	movt	r0, #0
   113a0:	bl	0 <puts>
   113a4:	b	11cb4 <test_scan+0xd38>
   113a8:	movw	r3, #0
   113ac:	movt	r3, #0
   113b0:	ldr	r2, [r3]
   113b4:	movw	r3, #0
   113b8:	movt	r3, #0
   113bc:	mov	r1, #2
   113c0:	ldr	r0, [fp, #-20]	; 0xffffffec
   113c4:	bl	3ca0 <MyGame_Example_Monster_vec_scan_ex_by_name>
   113c8:	mov	r3, r0
   113cc:	cmp	r3, #2
   113d0:	beq	113e4 <test_scan+0x468>
   113d4:	movw	r0, #0
   113d8:	movt	r0, #0
   113dc:	bl	0 <puts>
   113e0:	b	11cb4 <test_scan+0xd38>
   113e4:	movw	r3, #0
   113e8:	movt	r3, #0
   113ec:	ldr	r2, [r3]
   113f0:	mov	r3, #8
   113f4:	str	r3, [sp]
   113f8:	movw	r3, #0
   113fc:	movt	r3, #0
   11400:	mov	r1, #2
   11404:	ldr	r0, [fp, #-20]	; 0xffffffec
   11408:	bl	3d70 <MyGame_Example_Monster_vec_scan_ex_n_by_name>
   1140c:	mov	r3, r0
   11410:	cmp	r3, #2
   11414:	beq	11428 <test_scan+0x4ac>
   11418:	movw	r0, #0
   1141c:	movt	r0, #0
   11420:	bl	0 <puts>
   11424:	b	11cb4 <test_scan+0xd38>
   11428:	movw	r3, #0
   1142c:	movt	r3, #0
   11430:	ldr	r2, [r3]
   11434:	movw	r3, #0
   11438:	movt	r3, #0
   1143c:	mov	r1, #3
   11440:	ldr	r0, [fp, #-20]	; 0xffffffec
   11444:	bl	3ca0 <MyGame_Example_Monster_vec_scan_ex_by_name>
   11448:	mov	r3, r0
   1144c:	cmp	r3, #4
   11450:	beq	11464 <test_scan+0x4e8>
   11454:	movw	r0, #0
   11458:	movt	r0, #0
   1145c:	bl	0 <puts>
   11460:	b	11cb4 <test_scan+0xd38>
   11464:	movw	r3, #0
   11468:	movt	r3, #0
   1146c:	mov	r2, #3
   11470:	mov	r1, #1
   11474:	ldr	r0, [fp, #-20]	; 0xffffffec
   11478:	bl	47f0 <MyGame_Example_Monster_vec_scan_ex>
   1147c:	mov	r2, r0
   11480:	movw	r3, #0
   11484:	movt	r3, #0
   11488:	ldr	r3, [r3]
   1148c:	cmp	r2, r3
   11490:	beq	114a4 <test_scan+0x528>
   11494:	movw	r0, #0
   11498:	movt	r0, #0
   1149c:	bl	0 <puts>
   114a0:	b	11cb4 <test_scan+0xd38>
   114a4:	movw	r3, #0
   114a8:	movt	r3, #0
   114ac:	mov	r2, #3
   114b0:	mov	r1, #1
   114b4:	ldr	r0, [fp, #-20]	; 0xffffffec
   114b8:	bl	47f0 <MyGame_Example_Monster_vec_scan_ex>
   114bc:	mov	r2, r0
   114c0:	movw	r3, #0
   114c4:	movt	r3, #0
   114c8:	ldr	r3, [r3]
   114cc:	cmp	r2, r3
   114d0:	beq	114e4 <test_scan+0x568>
   114d4:	movw	r0, #0
   114d8:	movt	r0, #0
   114dc:	bl	0 <puts>
   114e0:	b	11cb4 <test_scan+0xd38>
   114e4:	movw	r3, #0
   114e8:	movt	r3, #0
   114ec:	mov	r2, #3
   114f0:	mov	r1, #1
   114f4:	ldr	r0, [fp, #-20]	; 0xffffffec
   114f8:	bl	47f0 <MyGame_Example_Monster_vec_scan_ex>
   114fc:	mov	r3, r0
   11500:	cmp	r3, #1
   11504:	beq	11518 <test_scan+0x59c>
   11508:	movw	r0, #0
   1150c:	movt	r0, #0
   11510:	bl	0 <puts>
   11514:	b	11cb4 <test_scan+0xd38>
   11518:	movw	r3, #0
   1151c:	movt	r3, #0
   11520:	mov	r2, #3
   11524:	mov	r1, #1
   11528:	ldr	r0, [fp, #-20]	; 0xffffffec
   1152c:	bl	3ca0 <MyGame_Example_Monster_vec_scan_ex_by_name>
   11530:	mov	r3, r0
   11534:	cmp	r3, #2
   11538:	beq	1154c <test_scan+0x5d0>
   1153c:	movw	r0, #0
   11540:	movt	r0, #0
   11544:	bl	0 <puts>
   11548:	b	11cb4 <test_scan+0xd38>
   1154c:	movw	r3, #0
   11550:	movt	r3, #0
   11554:	mov	r2, #3
   11558:	mov	r1, #1
   1155c:	ldr	r0, [fp, #-20]	; 0xffffffec
   11560:	bl	3ca0 <MyGame_Example_Monster_vec_scan_ex_by_name>
   11564:	mov	r2, r0
   11568:	movw	r3, #0
   1156c:	movt	r3, #0
   11570:	ldr	r3, [r3]
   11574:	cmp	r2, r3
   11578:	beq	1158c <test_scan+0x610>
   1157c:	movw	r0, #0
   11580:	movt	r0, #0
   11584:	bl	0 <puts>
   11588:	b	11cb4 <test_scan+0xd38>
   1158c:	movw	r3, #0
   11590:	movt	r3, #0
   11594:	mov	r2, #3
   11598:	mov	r1, #1
   1159c:	ldr	r0, [fp, #-20]	; 0xffffffec
   115a0:	bl	48bc <MyGame_Example_Monster_vec_rscan_ex>
   115a4:	mov	r2, r0
   115a8:	movw	r3, #0
   115ac:	movt	r3, #0
   115b0:	ldr	r3, [r3]
   115b4:	cmp	r2, r3
   115b8:	beq	115cc <test_scan+0x650>
   115bc:	movw	r0, #0
   115c0:	movt	r0, #0
   115c4:	bl	0 <puts>
   115c8:	b	11cb4 <test_scan+0xd38>
   115cc:	movw	r3, #0
   115d0:	movt	r3, #0
   115d4:	mov	r2, #3
   115d8:	mov	r1, #1
   115dc:	ldr	r0, [fp, #-20]	; 0xffffffec
   115e0:	bl	48bc <MyGame_Example_Monster_vec_rscan_ex>
   115e4:	mov	r2, r0
   115e8:	movw	r3, #0
   115ec:	movt	r3, #0
   115f0:	ldr	r3, [r3]
   115f4:	cmp	r2, r3
   115f8:	beq	1160c <test_scan+0x690>
   115fc:	movw	r0, #0
   11600:	movt	r0, #0
   11604:	bl	0 <puts>
   11608:	b	11cb4 <test_scan+0xd38>
   1160c:	movw	r3, #0
   11610:	movt	r3, #0
   11614:	mov	r2, #3
   11618:	mov	r1, #1
   1161c:	ldr	r0, [fp, #-20]	; 0xffffffec
   11620:	bl	48bc <MyGame_Example_Monster_vec_rscan_ex>
   11624:	mov	r3, r0
   11628:	cmp	r3, #1
   1162c:	beq	11640 <test_scan+0x6c4>
   11630:	movw	r0, #0
   11634:	movt	r0, #0
   11638:	bl	0 <puts>
   1163c:	b	11cb4 <test_scan+0xd38>
   11640:	movw	r3, #0
   11644:	movt	r3, #0
   11648:	mov	r2, #3
   1164c:	mov	r1, #1
   11650:	ldr	r0, [fp, #-20]	; 0xffffffec
   11654:	bl	3f84 <MyGame_Example_Monster_vec_rscan_ex_by_name>
   11658:	mov	r3, r0
   1165c:	cmp	r3, #2
   11660:	beq	11674 <test_scan+0x6f8>
   11664:	movw	r0, #0
   11668:	movt	r0, #0
   1166c:	bl	0 <puts>
   11670:	b	11cb4 <test_scan+0xd38>
   11674:	movw	r3, #0
   11678:	movt	r3, #0
   1167c:	mov	r2, #3
   11680:	mov	r1, #1
   11684:	ldr	r0, [fp, #-20]	; 0xffffffec
   11688:	bl	3f84 <MyGame_Example_Monster_vec_rscan_ex_by_name>
   1168c:	mov	r2, r0
   11690:	movw	r3, #0
   11694:	movt	r3, #0
   11698:	ldr	r3, [r3]
   1169c:	cmp	r2, r3
   116a0:	beq	116b4 <test_scan+0x738>
   116a4:	movw	r0, #0
   116a8:	movt	r0, #0
   116ac:	bl	0 <puts>
   116b0:	b	11cb4 <test_scan+0xd38>
   116b4:	movw	r3, #0
   116b8:	movt	r3, #0
   116bc:	mov	r2, #0
   116c0:	mov	r1, #0
   116c4:	ldr	r0, [fp, #-20]	; 0xffffffec
   116c8:	bl	47f0 <MyGame_Example_Monster_vec_scan_ex>
   116cc:	mov	r2, r0
   116d0:	movw	r3, #0
   116d4:	movt	r3, #0
   116d8:	ldr	r3, [r3]
   116dc:	cmp	r2, r3
   116e0:	beq	116f4 <test_scan+0x778>
   116e4:	movw	r0, #0
   116e8:	movt	r0, #0
   116ec:	bl	0 <puts>
   116f0:	b	11cb4 <test_scan+0xd38>
   116f4:	movw	r3, #0
   116f8:	movt	r3, #0
   116fc:	mov	r2, #0
   11700:	mov	r1, #0
   11704:	ldr	r0, [fp, #-20]	; 0xffffffec
   11708:	bl	47f0 <MyGame_Example_Monster_vec_scan_ex>
   1170c:	mov	r2, r0
   11710:	movw	r3, #0
   11714:	movt	r3, #0
   11718:	ldr	r3, [r3]
   1171c:	cmp	r2, r3
   11720:	beq	11734 <test_scan+0x7b8>
   11724:	movw	r0, #0
   11728:	movt	r0, #0
   1172c:	bl	0 <puts>
   11730:	b	11cb4 <test_scan+0xd38>
   11734:	movw	r3, #0
   11738:	movt	r3, #0
   1173c:	mov	r2, #1
   11740:	mov	r1, #1
   11744:	ldr	r0, [fp, #-20]	; 0xffffffec
   11748:	bl	47f0 <MyGame_Example_Monster_vec_scan_ex>
   1174c:	mov	r2, r0
   11750:	movw	r3, #0
   11754:	movt	r3, #0
   11758:	ldr	r3, [r3]
   1175c:	cmp	r2, r3
   11760:	beq	11774 <test_scan+0x7f8>
   11764:	movw	r0, #0
   11768:	movt	r0, #0
   1176c:	bl	0 <puts>
   11770:	b	11cb4 <test_scan+0xd38>
   11774:	ldr	r0, [fp, #-20]	; 0xffffffec
   11778:	bl	3000 <MyGame_Example_Monster_vec_len>
   1177c:	mov	r1, r0
   11780:	movw	r3, #0
   11784:	movt	r3, #0
   11788:	ldr	r2, [r3]
   1178c:	movw	r3, #0
   11790:	movt	r3, #0
   11794:	ldr	r0, [fp, #-20]	; 0xffffffec
   11798:	bl	47f0 <MyGame_Example_Monster_vec_scan_ex>
   1179c:	mov	r2, r0
   117a0:	movw	r3, #0
   117a4:	movt	r3, #0
   117a8:	ldr	r3, [r3]
   117ac:	cmp	r2, r3
   117b0:	beq	117c4 <test_scan+0x848>
   117b4:	movw	r0, #0
   117b8:	movt	r0, #0
   117bc:	bl	0 <puts>
   117c0:	b	11cb4 <test_scan+0xd38>
   117c4:	movw	r3, #0
   117c8:	movt	r3, #0
   117cc:	mov	r2, #0
   117d0:	mov	r1, #0
   117d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   117d8:	bl	48bc <MyGame_Example_Monster_vec_rscan_ex>
   117dc:	mov	r2, r0
   117e0:	movw	r3, #0
   117e4:	movt	r3, #0
   117e8:	ldr	r3, [r3]
   117ec:	cmp	r2, r3
   117f0:	beq	11804 <test_scan+0x888>
   117f4:	movw	r0, #0
   117f8:	movt	r0, #0
   117fc:	bl	0 <puts>
   11800:	b	11cb4 <test_scan+0xd38>
   11804:	movw	r3, #0
   11808:	movt	r3, #0
   1180c:	mov	r2, #0
   11810:	mov	r1, #0
   11814:	ldr	r0, [fp, #-20]	; 0xffffffec
   11818:	bl	48bc <MyGame_Example_Monster_vec_rscan_ex>
   1181c:	mov	r2, r0
   11820:	movw	r3, #0
   11824:	movt	r3, #0
   11828:	ldr	r3, [r3]
   1182c:	cmp	r2, r3
   11830:	beq	11844 <test_scan+0x8c8>
   11834:	movw	r0, #0
   11838:	movt	r0, #0
   1183c:	bl	0 <puts>
   11840:	b	11cb4 <test_scan+0xd38>
   11844:	movw	r3, #0
   11848:	movt	r3, #0
   1184c:	mov	r2, #1
   11850:	mov	r1, #1
   11854:	ldr	r0, [fp, #-20]	; 0xffffffec
   11858:	bl	48bc <MyGame_Example_Monster_vec_rscan_ex>
   1185c:	mov	r2, r0
   11860:	movw	r3, #0
   11864:	movt	r3, #0
   11868:	ldr	r3, [r3]
   1186c:	cmp	r2, r3
   11870:	beq	11884 <test_scan+0x908>
   11874:	movw	r0, #0
   11878:	movt	r0, #0
   1187c:	bl	0 <puts>
   11880:	b	11cb4 <test_scan+0xd38>
   11884:	ldr	r0, [fp, #-20]	; 0xffffffec
   11888:	bl	3000 <MyGame_Example_Monster_vec_len>
   1188c:	mov	r1, r0
   11890:	movw	r3, #0
   11894:	movt	r3, #0
   11898:	ldr	r2, [r3]
   1189c:	movw	r3, #0
   118a0:	movt	r3, #0
   118a4:	ldr	r0, [fp, #-20]	; 0xffffffec
   118a8:	bl	48bc <MyGame_Example_Monster_vec_rscan_ex>
   118ac:	mov	r2, r0
   118b0:	movw	r3, #0
   118b4:	movt	r3, #0
   118b8:	ldr	r3, [r3]
   118bc:	cmp	r2, r3
   118c0:	beq	118d4 <test_scan+0x958>
   118c4:	movw	r0, #0
   118c8:	movt	r0, #0
   118cc:	bl	0 <puts>
   118d0:	b	11cb4 <test_scan+0xd38>
   118d4:	movw	r1, #0
   118d8:	movt	r1, #0
   118dc:	ldr	r0, [fp, #-20]	; 0xffffffec
   118e0:	bl	10ee8 <count_monsters>
   118e4:	mov	r3, r0
   118e8:	cmp	r3, #1
   118ec:	beq	11900 <test_scan+0x984>
   118f0:	movw	r0, #0
   118f4:	movt	r0, #0
   118f8:	bl	0 <puts>
   118fc:	b	11cb4 <test_scan+0xd38>
   11900:	movw	r1, #0
   11904:	movt	r1, #0
   11908:	ldr	r0, [fp, #-20]	; 0xffffffec
   1190c:	bl	10ee8 <count_monsters>
   11910:	mov	r3, r0
   11914:	cmp	r3, #0
   11918:	beq	1192c <test_scan+0x9b0>
   1191c:	movw	r0, #0
   11920:	movt	r0, #0
   11924:	bl	0 <puts>
   11928:	b	11cb4 <test_scan+0xd38>
   1192c:	movw	r1, #0
   11930:	movt	r1, #0
   11934:	ldr	r0, [fp, #-20]	; 0xffffffec
   11938:	bl	10ee8 <count_monsters>
   1193c:	mov	r3, r0
   11940:	cmp	r3, #1
   11944:	beq	11958 <test_scan+0x9dc>
   11948:	movw	r0, #0
   1194c:	movt	r0, #0
   11950:	bl	0 <puts>
   11954:	b	11cb4 <test_scan+0xd38>
   11958:	movw	r1, #0
   1195c:	movt	r1, #0
   11960:	ldr	r0, [fp, #-20]	; 0xffffffec
   11964:	bl	10ee8 <count_monsters>
   11968:	mov	r3, r0
   1196c:	cmp	r3, #2
   11970:	beq	11984 <test_scan+0xa08>
   11974:	movw	r0, #0
   11978:	movt	r0, #0
   1197c:	bl	0 <puts>
   11980:	b	11cb4 <test_scan+0xd38>
   11984:	mov	r1, #6
   11988:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1198c:	bl	1130 <flatbuffers_uint8_vec_scan>
   11990:	str	r0, [fp, #-32]	; 0xffffffe0
   11994:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11998:	cmp	r3, #0
   1199c:	beq	119b0 <test_scan+0xa34>
   119a0:	movw	r0, #0
   119a4:	movt	r0, #0
   119a8:	bl	0 <puts>
   119ac:	b	11cb4 <test_scan+0xd38>
   119b0:	mov	r1, #1
   119b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   119b8:	bl	1130 <flatbuffers_uint8_vec_scan>
   119bc:	str	r0, [fp, #-32]	; 0xffffffe0
   119c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   119c4:	cmp	r3, #2
   119c8:	beq	119dc <test_scan+0xa60>
   119cc:	movw	r0, #0
   119d0:	movt	r0, #0
   119d4:	bl	0 <puts>
   119d8:	b	11cb4 <test_scan+0xd38>
   119dc:	movw	r3, #0
   119e0:	movt	r3, #0
   119e4:	ldr	r2, [r3]
   119e8:	mov	r3, #1
   119ec:	mov	r1, #3
   119f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   119f4:	bl	11d8 <flatbuffers_uint8_vec_scan_ex>
   119f8:	str	r0, [fp, #-32]	; 0xffffffe0
   119fc:	movw	r3, #0
   11a00:	movt	r3, #0
   11a04:	ldr	r3, [r3]
   11a08:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11a0c:	cmp	r2, r3
   11a10:	beq	11a24 <test_scan+0xaa8>
   11a14:	movw	r0, #0
   11a18:	movt	r0, #0
   11a1c:	bl	0 <puts>
   11a20:	b	11cb4 <test_scan+0xd38>
   11a24:	mov	r1, #5
   11a28:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11a2c:	bl	1130 <flatbuffers_uint8_vec_scan>
   11a30:	str	r0, [fp, #-32]	; 0xffffffe0
   11a34:	movw	r3, #0
   11a38:	movt	r3, #0
   11a3c:	ldr	r3, [r3]
   11a40:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11a44:	cmp	r2, r3
   11a48:	beq	11a5c <test_scan+0xae0>
   11a4c:	movw	r0, #0
   11a50:	movt	r0, #0
   11a54:	bl	0 <puts>
   11a58:	b	11cb4 <test_scan+0xd38>
   11a5c:	mov	r1, #2
   11a60:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11a64:	bl	1130 <flatbuffers_uint8_vec_scan>
   11a68:	str	r0, [fp, #-32]	; 0xffffffe0
   11a6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11a70:	cmp	r3, #6
   11a74:	beq	11a88 <test_scan+0xb0c>
   11a78:	movw	r0, #0
   11a7c:	movt	r0, #0
   11a80:	bl	0 <puts>
   11a84:	b	11cb4 <test_scan+0xd38>
   11a88:	mov	r1, #3
   11a8c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11a90:	bl	1130 <flatbuffers_uint8_vec_scan>
   11a94:	str	r0, [fp, #-32]	; 0xffffffe0
   11a98:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11a9c:	cmp	r3, #3
   11aa0:	beq	11ab4 <test_scan+0xb38>
   11aa4:	movw	r0, #0
   11aa8:	movt	r0, #0
   11aac:	bl	0 <puts>
   11ab0:	b	11cb4 <test_scan+0xd38>
   11ab4:	movw	r3, #0
   11ab8:	movt	r3, #0
   11abc:	ldr	r2, [r3]
   11ac0:	mov	r3, #3
   11ac4:	mov	r1, #3
   11ac8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11acc:	bl	11d8 <flatbuffers_uint8_vec_scan_ex>
   11ad0:	str	r0, [fp, #-32]	; 0xffffffe0
   11ad4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11ad8:	cmp	r3, #3
   11adc:	beq	11af0 <test_scan+0xb74>
   11ae0:	movw	r0, #0
   11ae4:	movt	r0, #0
   11ae8:	bl	0 <puts>
   11aec:	b	11cb4 <test_scan+0xd38>
   11af0:	movw	r3, #0
   11af4:	movt	r3, #0
   11af8:	ldr	r2, [r3]
   11afc:	mov	r3, #3
   11b00:	mov	r1, #4
   11b04:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11b08:	bl	11d8 <flatbuffers_uint8_vec_scan_ex>
   11b0c:	str	r0, [fp, #-32]	; 0xffffffe0
   11b10:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11b14:	cmp	r3, #5
   11b18:	beq	11b2c <test_scan+0xbb0>
   11b1c:	movw	r0, #0
   11b20:	movt	r0, #0
   11b24:	bl	0 <puts>
   11b28:	b	11cb4 <test_scan+0xd38>
   11b2c:	mov	r1, #3
   11b30:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11b34:	bl	12a4 <flatbuffers_uint8_vec_rscan>
   11b38:	str	r0, [fp, #-32]	; 0xffffffe0
   11b3c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11b40:	cmp	r3, #5
   11b44:	beq	11b58 <test_scan+0xbdc>
   11b48:	movw	r0, #0
   11b4c:	movt	r0, #0
   11b50:	bl	0 <puts>
   11b54:	b	11cb4 <test_scan+0xd38>
   11b58:	mov	r3, #3
   11b5c:	mov	r2, #4
   11b60:	mov	r1, #1
   11b64:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11b68:	bl	1340 <flatbuffers_uint8_vec_rscan_ex>
   11b6c:	str	r0, [fp, #-32]	; 0xffffffe0
   11b70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11b74:	cmp	r3, #3
   11b78:	beq	11b8c <test_scan+0xc10>
   11b7c:	movw	r0, #0
   11b80:	movt	r0, #0
   11b84:	bl	0 <puts>
   11b88:	b	11cb4 <test_scan+0xd38>
   11b8c:	movw	r1, #0
   11b90:	movt	r1, #0
   11b94:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11b98:	bl	16dc <flatbuffers_string_vec_scan>
   11b9c:	movw	r3, #0
   11ba0:	movt	r3, #0
   11ba4:	ldr	r2, [r3]
   11ba8:	movw	r3, #0
   11bac:	movt	r3, #0
   11bb0:	mov	r1, #0
   11bb4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11bb8:	bl	1818 <flatbuffers_string_vec_scan_ex>
   11bbc:	mov	r2, #4
   11bc0:	movw	r1, #0
   11bc4:	movt	r1, #0
   11bc8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11bcc:	bl	1778 <flatbuffers_string_vec_scan_n>
   11bd0:	movw	r3, #0
   11bd4:	movt	r3, #0
   11bd8:	ldr	r2, [r3]
   11bdc:	mov	r3, #4
   11be0:	str	r3, [sp]
   11be4:	movw	r3, #0
   11be8:	movt	r3, #0
   11bec:	mov	r1, #0
   11bf0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11bf4:	bl	18dc <flatbuffers_string_vec_scan_ex_n>
   11bf8:	movw	r1, #0
   11bfc:	movt	r1, #0
   11c00:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11c04:	bl	19a0 <flatbuffers_string_vec_rscan>
   11c08:	movw	r3, #0
   11c0c:	movt	r3, #0
   11c10:	ldr	r2, [r3]
   11c14:	movw	r3, #0
   11c18:	movt	r3, #0
   11c1c:	mov	r1, #0
   11c20:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11c24:	bl	1ac4 <flatbuffers_string_vec_rscan_ex>
   11c28:	mov	r2, #4
   11c2c:	movw	r1, #0
   11c30:	movt	r1, #0
   11c34:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11c38:	bl	1a30 <flatbuffers_string_vec_rscan_n>
   11c3c:	movw	r3, #0
   11c40:	movt	r3, #0
   11c44:	ldr	r2, [r3]
   11c48:	mov	r3, #4
   11c4c:	str	r3, [sp]
   11c50:	movw	r3, #0
   11c54:	movt	r3, #0
   11c58:	mov	r1, #0
   11c5c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11c60:	bl	1b84 <flatbuffers_string_vec_rscan_ex_n>
   11c64:	mov	r1, #13
   11c68:	ldr	r0, [fp, #-20]	; 0xffffffec
   11c6c:	bl	3550 <MyGame_Example_Monster_vec_scan_by_hp>
   11c70:	movw	r3, #0
   11c74:	movt	r3, #0
   11c78:	ldr	r2, [r3]
   11c7c:	mov	r3, #42	; 0x2a
   11c80:	mov	r1, #1
   11c84:	ldr	r0, [fp, #-20]	; 0xffffffec
   11c88:	bl	3604 <MyGame_Example_Monster_vec_scan_ex_by_hp>
   11c8c:	mov	r1, #1
   11c90:	ldr	r0, [fp, #-20]	; 0xffffffec
   11c94:	bl	36dc <MyGame_Example_Monster_vec_rscan_by_hp>
   11c98:	mov	r3, #42	; 0x2a
   11c9c:	mov	r2, #2
   11ca0:	mov	r1, #0
   11ca4:	ldr	r0, [fp, #-20]	; 0xffffffec
   11ca8:	bl	3784 <MyGame_Example_Monster_vec_rscan_ex_by_hp>
   11cac:	mov	r3, #0
   11cb0:	str	r3, [fp, #-8]
   11cb4:	ldr	r0, [fp, #-12]
   11cb8:	bl	0 <flatcc_builder_aligned_free>
   11cbc:	ldr	r3, [fp, #-8]
   11cc0:	mov	r0, r3
   11cc4:	sub	sp, fp, #4
   11cc8:	ldr	fp, [sp]
   11ccc:	add	sp, sp, #4
   11cd0:	pop	{pc}		; (ldr pc, [sp], #4)

00011cd4 <test_basic_sort>:
   11cd4:	str	r4, [sp, #-12]!
   11cd8:	str	fp, [sp, #4]
   11cdc:	str	lr, [sp, #8]
   11ce0:	add	fp, sp, #8
   11ce4:	sub	sp, sp, #60	; 0x3c
   11ce8:	str	r0, [fp, #-64]	; 0xffffffc0
   11cec:	movw	r2, #0
   11cf0:	movt	r2, #0
   11cf4:	sub	r3, fp, #48	; 0x30
   11cf8:	ldr	r1, [r2]
   11cfc:	str	r1, [r3]
   11d00:	ldrh	r1, [r2, #4]
   11d04:	strh	r1, [r3, #4]
   11d08:	ldrb	r2, [r2, #6]
   11d0c:	strb	r2, [r3, #6]
   11d10:	movw	r2, #0
   11d14:	movt	r2, #0
   11d18:	sub	r3, fp, #56	; 0x38
   11d1c:	ldr	r1, [r2]
   11d20:	str	r1, [r3]
   11d24:	ldrh	r1, [r2, #4]
   11d28:	strh	r1, [r3, #4]
   11d2c:	ldrb	r2, [r2, #6]
   11d30:	strb	r2, [r3, #6]
   11d34:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11d38:	bl	0 <flatcc_builder_reset>
   11d3c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11d40:	bl	b1ec <MyGame_Example_Monster_start_as_root>
   11d44:	movw	r1, #0
   11d48:	movt	r1, #0
   11d4c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11d50:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   11d54:	sub	r3, fp, #48	; 0x30
   11d58:	mov	r2, #7
   11d5c:	mov	r1, r3
   11d60:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11d64:	bl	9fe0 <MyGame_Example_Monster_inventory_create>
   11d68:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11d6c:	bl	b29c <MyGame_Example_Monster_end_as_root>
   11d70:	sub	r3, fp, #40	; 0x28
   11d74:	mov	r1, r3
   11d78:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11d7c:	bl	0 <flatcc_builder_get_direct_buffer>
   11d80:	str	r0, [fp, #-20]	; 0xffffffec
   11d84:	ldr	r0, [fp, #-20]	; 0xffffffec
   11d88:	bl	3148 <MyGame_Example_Monster_as_root>
   11d8c:	str	r0, [fp, #-24]	; 0xffffffe8
   11d90:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11d94:	bl	4ad8 <MyGame_Example_Monster_inventory>
   11d98:	str	r0, [fp, #-28]	; 0xffffffe4
   11d9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11da0:	str	r3, [fp, #-32]	; 0xffffffe0
   11da4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11da8:	bl	1630 <flatbuffers_uint8_vec_sort>
   11dac:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11db0:	bl	f50 <flatbuffers_uint8_vec_len>
   11db4:	mov	r3, r0
   11db8:	cmp	r3, #7
   11dbc:	beq	11de0 <test_basic_sort+0x10c>
   11dc0:	movw	r3, #0
   11dc4:	movt	r3, #0
   11dc8:	mov	r2, #1552	; 0x610
   11dcc:	movw	r1, #0
   11dd0:	movt	r1, #0
   11dd4:	movw	r0, #0
   11dd8:	movt	r0, #0
   11ddc:	bl	0 <__assert_fail>
   11de0:	mov	r3, #0
   11de4:	strb	r3, [fp, #-13]
   11de8:	b	11e88 <test_basic_sort+0x1b4>
   11dec:	ldrb	r3, [fp, #-13]
   11df0:	mov	r1, r3
   11df4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11df8:	bl	f84 <flatbuffers_uint8_vec_at>
   11dfc:	mov	r3, r0
   11e00:	strb	r3, [fp, #-33]	; 0xffffffdf
   11e04:	ldrb	r3, [fp, #-13]
   11e08:	sub	r2, fp, #12
   11e0c:	add	r3, r2, r3
   11e10:	ldrb	r3, [r3, #-44]	; 0xffffffd4
   11e14:	ldrb	r2, [fp, #-33]	; 0xffffffdf
   11e18:	cmp	r2, r3
   11e1c:	beq	11e34 <test_basic_sort+0x160>
   11e20:	movw	r0, #0
   11e24:	movt	r0, #0
   11e28:	bl	0 <puts>
   11e2c:	mvn	r3, #0
   11e30:	b	11ea4 <test_basic_sort+0x1d0>
   11e34:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   11e38:	mov	r1, r3
   11e3c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11e40:	bl	1000 <flatbuffers_uint8_vec_find>
   11e44:	mov	r2, r0
   11e48:	ldrb	r3, [fp, #-13]
   11e4c:	cmp	r3, #3
   11e50:	beq	11e5c <test_basic_sort+0x188>
   11e54:	ldrb	r3, [fp, #-13]
   11e58:	b	11e60 <test_basic_sort+0x18c>
   11e5c:	mov	r3, #2
   11e60:	cmp	r3, r2
   11e64:	beq	11e7c <test_basic_sort+0x1a8>
   11e68:	movw	r0, #0
   11e6c:	movt	r0, #0
   11e70:	bl	0 <puts>
   11e74:	mvn	r3, #0
   11e78:	b	11ea4 <test_basic_sort+0x1d0>
   11e7c:	ldrb	r3, [fp, #-13]
   11e80:	add	r3, r3, #1
   11e84:	strb	r3, [fp, #-13]
   11e88:	ldrb	r4, [fp, #-13]
   11e8c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11e90:	bl	f50 <flatbuffers_uint8_vec_len>
   11e94:	mov	r3, r0
   11e98:	cmp	r4, r3
   11e9c:	bcc	11dec <test_basic_sort+0x118>
   11ea0:	mov	r3, #0
   11ea4:	mov	r0, r3
   11ea8:	sub	sp, fp, #8
   11eac:	ldr	r4, [sp]
   11eb0:	ldr	fp, [sp, #4]
   11eb4:	add	sp, sp, #8
   11eb8:	pop	{pc}		; (ldr pc, [sp], #4)

00011ebc <test_clone_slice>:
   11ebc:	str	fp, [sp, #-8]!
   11ec0:	str	lr, [sp, #4]
   11ec4:	add	fp, sp, #4
   11ec8:	sub	sp, sp, #80	; 0x50
   11ecc:	str	r0, [fp, #-80]	; 0xffffffb0
   11ed0:	mvn	r3, #0
   11ed4:	str	r3, [fp, #-8]
   11ed8:	movw	r2, #0
   11edc:	movt	r2, #0
   11ee0:	sub	r3, fp, #72	; 0x48
   11ee4:	ldr	r1, [r2]
   11ee8:	str	r1, [r3]
   11eec:	ldrh	r1, [r2, #4]
   11ef0:	strh	r1, [r3, #4]
   11ef4:	ldrb	r2, [r2, #6]
   11ef8:	strb	r2, [r3, #6]
   11efc:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11f00:	bl	0 <flatcc_builder_reset>
   11f04:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11f08:	bl	b1ec <MyGame_Example_Monster_start_as_root>
   11f0c:	movw	r1, #0
   11f10:	movt	r1, #0
   11f14:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11f18:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   11f1c:	sub	r3, fp, #72	; 0x48
   11f20:	mov	r2, #7
   11f24:	mov	r1, r3
   11f28:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11f2c:	bl	a5c8 <MyGame_Example_Monster_testarrayofbools_create>
   11f30:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11f34:	bl	ab38 <MyGame_Example_Monster_test4_start>
   11f38:	mov	r1, #2
   11f3c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11f40:	bl	ac58 <MyGame_Example_Monster_test4_extend>
   11f44:	str	r0, [fp, #-12]
   11f48:	ldr	r3, [fp, #-12]
   11f4c:	mov	r2, #22
   11f50:	strh	r2, [r3]
   11f54:	ldr	r3, [fp, #-12]
   11f58:	add	r3, r3, #4
   11f5c:	mov	r2, #44	; 0x2c
   11f60:	strh	r2, [r3]
   11f64:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11f68:	bl	ab6c <MyGame_Example_Monster_test4_end>
   11f6c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11f70:	bl	9804 <MyGame_Example_Monster_pos_start>
   11f74:	mov	r2, r0
   11f78:	movw	r3, #13107	; 0x3333
   11f7c:	movt	r3, #49705	; 0xc229
   11f80:	str	r3, [r2]
   11f84:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11f88:	bl	b29c <MyGame_Example_Monster_end_as_root>
   11f8c:	sub	r3, fp, #64	; 0x40
   11f90:	mov	r1, r3
   11f94:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11f98:	bl	0 <flatcc_builder_finalize_aligned_buffer>
   11f9c:	str	r0, [fp, #-16]
   11fa0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   11fa4:	movw	r3, #0
   11fa8:	movt	r3, #0
   11fac:	ldr	r3, [r3]
   11fb0:	ldr	r1, [fp, #-16]
   11fb4:	movw	r0, #0
   11fb8:	movt	r0, #0
   11fbc:	bl	ddf0 <hexdump>
   11fc0:	ldr	r0, [fp, #-16]
   11fc4:	bl	3148 <MyGame_Example_Monster_as_root>
   11fc8:	str	r0, [fp, #-20]	; 0xffffffec
   11fcc:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11fd0:	bl	0 <flatcc_builder_reset>
   11fd4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11fd8:	bl	b1ec <MyGame_Example_Monster_start_as_root>
   11fdc:	ldr	r0, [fp, #-20]	; 0xffffffec
   11fe0:	bl	3a28 <MyGame_Example_Monster_name>
   11fe4:	str	r0, [fp, #-24]	; 0xffffffe8
   11fe8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11fec:	cmp	r3, #0
   11ff0:	bne	12014 <test_clone_slice+0x158>
   11ff4:	movw	r3, #0
   11ff8:	movt	r3, #0
   11ffc:	movw	r2, #1604	; 0x644
   12000:	movw	r1, #0
   12004:	movt	r1, #0
   12008:	movw	r0, #0
   1200c:	movt	r0, #0
   12010:	bl	0 <__assert_fail>
   12014:	ldr	r0, [fp, #-20]	; 0xffffffec
   12018:	bl	4de4 <MyGame_Example_Monster_testarrayofbools>
   1201c:	str	r0, [fp, #-28]	; 0xffffffe4
   12020:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12024:	cmp	r3, #0
   12028:	bne	1204c <test_clone_slice+0x190>
   1202c:	movw	r3, #0
   12030:	movt	r3, #0
   12034:	movw	r2, #1606	; 0x646
   12038:	movw	r1, #0
   1203c:	movt	r1, #0
   12040:	movw	r0, #0
   12044:	movt	r0, #0
   12048:	bl	0 <__assert_fail>
   1204c:	ldr	r0, [fp, #-20]	; 0xffffffec
   12050:	bl	5428 <MyGame_Example_Monster_test4>
   12054:	str	r0, [fp, #-32]	; 0xffffffe0
   12058:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1205c:	cmp	r3, #0
   12060:	bne	12084 <test_clone_slice+0x1c8>
   12064:	movw	r3, #0
   12068:	movt	r3, #0
   1206c:	movw	r2, #1608	; 0x648
   12070:	movw	r1, #0
   12074:	movt	r1, #0
   12078:	movw	r0, #0
   1207c:	movt	r0, #0
   12080:	bl	0 <__assert_fail>
   12084:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12088:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1208c:	bl	9c34 <MyGame_Example_Monster_name_clone>
   12090:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12094:	bl	a370 <MyGame_Example_Monster_testarrayofstring_start>
   12098:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1209c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   120a0:	bl	a43c <MyGame_Example_Monster_testarrayofstring_push_clone>
   120a4:	mov	r3, #20
   120a8:	mov	r2, #4
   120ac:	ldr	r1, [fp, #-24]	; 0xffffffe8
   120b0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   120b4:	bl	a488 <MyGame_Example_Monster_testarrayofstring_push_slice>
   120b8:	mov	r3, #3
   120bc:	mov	r2, #0
   120c0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   120c4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   120c8:	bl	a488 <MyGame_Example_Monster_testarrayofstring_push_slice>
   120cc:	ldr	r0, [fp, #-80]	; 0xffffffb0
   120d0:	bl	a3a4 <MyGame_Example_Monster_testarrayofstring_end>
   120d4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   120d8:	bl	8a5c <MyGame_Example_Monster_start>
   120dc:	mov	r3, #20
   120e0:	mov	r2, #2
   120e4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   120e8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   120ec:	bl	9c80 <MyGame_Example_Monster_name_slice>
   120f0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   120f4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   120f8:	bl	a61c <MyGame_Example_Monster_testarrayofbools_clone>
   120fc:	mov	r3, #2
   12100:	mov	r2, #1
   12104:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12108:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1210c:	bl	abfc <MyGame_Example_Monster_test4_slice>
   12110:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12114:	bl	8a94 <MyGame_Example_Monster_end>
   12118:	str	r0, [fp, #-36]	; 0xffffffdc
   1211c:	sub	r3, fp, #60	; 0x3c
   12120:	ldr	r1, [fp, #-36]	; 0xffffffdc
   12124:	mov	r0, r3
   12128:	bl	8d5c <MyGame_Example_Any_as_Monster>
   1212c:	sub	r3, fp, #60	; 0x3c
   12130:	ldm	r3, {r1, r2}
   12134:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12138:	bl	a7ec <MyGame_Example_Monster_test_add>
   1213c:	mvn	r3, #0
   12140:	mov	r2, #3
   12144:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12148:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1214c:	bl	a668 <MyGame_Example_Monster_testarrayofbools_slice>
   12150:	ldr	r0, [fp, #-20]	; 0xffffffec
   12154:	bl	31bc <MyGame_Example_Monster_pos>
   12158:	mov	r3, r0
   1215c:	mov	r1, r3
   12160:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12164:	bl	9868 <MyGame_Example_Monster_pos_clone>
   12168:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1216c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12170:	bl	abb0 <MyGame_Example_Monster_test4_clone>
   12174:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12178:	bl	b29c <MyGame_Example_Monster_end_as_root>
   1217c:	sub	r3, fp, #64	; 0x40
   12180:	mov	r1, r3
   12184:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12188:	bl	0 <flatcc_builder_get_direct_buffer>
   1218c:	str	r0, [fp, #-40]	; 0xffffffd8
   12190:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12194:	movw	r3, #0
   12198:	movt	r3, #0
   1219c:	ldr	r3, [r3]
   121a0:	ldr	r1, [fp, #-40]	; 0xffffffd8
   121a4:	movw	r0, #0
   121a8:	movt	r0, #0
   121ac:	bl	ddf0 <hexdump>
   121b0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   121b4:	bl	3148 <MyGame_Example_Monster_as_root>
   121b8:	str	r0, [fp, #-44]	; 0xffffffd4
   121bc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   121c0:	bl	3a28 <MyGame_Example_Monster_name>
   121c4:	mov	r3, r0
   121c8:	movw	r1, #0
   121cc:	movt	r1, #0
   121d0:	mov	r0, r3
   121d4:	bl	0 <strcmp>
   121d8:	mov	r3, r0
   121dc:	cmp	r3, #0
   121e0:	beq	121f4 <test_clone_slice+0x338>
   121e4:	movw	r0, #0
   121e8:	movt	r0, #0
   121ec:	bl	0 <puts>
   121f0:	b	125b0 <test_clone_slice+0x6f4>
   121f4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   121f8:	bl	4ce0 <MyGame_Example_Monster_testarrayofstring>
   121fc:	str	r0, [fp, #-48]	; 0xffffffd0
   12200:	mov	r1, #0
   12204:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12208:	bl	b84 <flatbuffers_string_vec_at>
   1220c:	mov	r3, r0
   12210:	movw	r1, #0
   12214:	movt	r1, #0
   12218:	mov	r0, r3
   1221c:	bl	0 <strcmp>
   12220:	mov	r3, r0
   12224:	cmp	r3, #0
   12228:	beq	1223c <test_clone_slice+0x380>
   1222c:	movw	r0, #0
   12230:	movt	r0, #0
   12234:	bl	0 <puts>
   12238:	b	125b0 <test_clone_slice+0x6f4>
   1223c:	mov	r1, #1
   12240:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12244:	bl	b84 <flatbuffers_string_vec_at>
   12248:	mov	r3, r0
   1224c:	mov	r0, r3
   12250:	bl	ae4 <flatbuffers_string_len>
   12254:	mov	r3, r0
   12258:	cmp	r3, #6
   1225c:	beq	12270 <test_clone_slice+0x3b4>
   12260:	movw	r0, #0
   12264:	movt	r0, #0
   12268:	bl	0 <puts>
   1226c:	b	125b0 <test_clone_slice+0x6f4>
   12270:	mov	r1, #1
   12274:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12278:	bl	b84 <flatbuffers_string_vec_at>
   1227c:	mov	r3, r0
   12280:	movw	r1, #0
   12284:	movt	r1, #0
   12288:	mov	r0, r3
   1228c:	bl	0 <strcmp>
   12290:	mov	r3, r0
   12294:	cmp	r3, #0
   12298:	beq	122ac <test_clone_slice+0x3f0>
   1229c:	movw	r0, #0
   122a0:	movt	r0, #0
   122a4:	bl	0 <puts>
   122a8:	b	125b0 <test_clone_slice+0x6f4>
   122ac:	mov	r1, #2
   122b0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   122b4:	bl	b84 <flatbuffers_string_vec_at>
   122b8:	mov	r3, r0
   122bc:	mov	r0, r3
   122c0:	bl	ae4 <flatbuffers_string_len>
   122c4:	mov	r3, r0
   122c8:	cmp	r3, #3
   122cc:	beq	122e0 <test_clone_slice+0x424>
   122d0:	movw	r0, #0
   122d4:	movt	r0, #0
   122d8:	bl	0 <puts>
   122dc:	b	125b0 <test_clone_slice+0x6f4>
   122e0:	mov	r1, #2
   122e4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   122e8:	bl	b84 <flatbuffers_string_vec_at>
   122ec:	mov	r3, r0
   122f0:	movw	r1, #0
   122f4:	movt	r1, #0
   122f8:	mov	r0, r3
   122fc:	bl	0 <strcmp>
   12300:	mov	r3, r0
   12304:	cmp	r3, #0
   12308:	beq	1231c <test_clone_slice+0x460>
   1230c:	movw	r0, #0
   12310:	movt	r0, #0
   12314:	bl	0 <puts>
   12318:	b	125b0 <test_clone_slice+0x6f4>
   1231c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12320:	bl	5294 <MyGame_Example_Monster_test>
   12324:	str	r0, [fp, #-20]	; 0xffffffec
   12328:	ldr	r3, [fp, #-20]	; 0xffffffec
   1232c:	cmp	r3, #0
   12330:	bne	12354 <test_clone_slice+0x498>
   12334:	movw	r3, #0
   12338:	movt	r3, #0
   1233c:	mov	r2, #1664	; 0x680
   12340:	movw	r1, #0
   12344:	movt	r1, #0
   12348:	movw	r0, #0
   1234c:	movt	r0, #0
   12350:	bl	0 <__assert_fail>
   12354:	ldr	r0, [fp, #-20]	; 0xffffffec
   12358:	bl	3a28 <MyGame_Example_Monster_name>
   1235c:	mov	r3, r0
   12360:	movw	r1, #0
   12364:	movt	r1, #0
   12368:	mov	r0, r3
   1236c:	bl	0 <strcmp>
   12370:	mov	r3, r0
   12374:	cmp	r3, #0
   12378:	beq	1238c <test_clone_slice+0x4d0>
   1237c:	movw	r0, #0
   12380:	movt	r0, #0
   12384:	bl	0 <printf>
   12388:	b	125b0 <test_clone_slice+0x6f4>
   1238c:	ldr	r0, [fp, #-20]	; 0xffffffec
   12390:	bl	4de4 <MyGame_Example_Monster_testarrayofbools>
   12394:	str	r0, [fp, #-28]	; 0xffffffe4
   12398:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1239c:	bl	ea0 <flatbuffers_bool_vec_len>
   123a0:	mov	r3, r0
   123a4:	cmp	r3, #7
   123a8:	beq	123bc <test_clone_slice+0x500>
   123ac:	movw	r0, #0
   123b0:	movt	r0, #0
   123b4:	bl	0 <puts>
   123b8:	b	125b0 <test_clone_slice+0x6f4>
   123bc:	sub	r3, fp, #72	; 0x48
   123c0:	mov	r2, #7
   123c4:	mov	r1, r3
   123c8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   123cc:	bl	0 <memcmp>
   123d0:	mov	r3, r0
   123d4:	cmp	r3, #0
   123d8:	beq	123ec <test_clone_slice+0x530>
   123dc:	movw	r0, #0
   123e0:	movt	r0, #0
   123e4:	bl	0 <puts>
   123e8:	b	125b0 <test_clone_slice+0x6f4>
   123ec:	ldr	r0, [fp, #-44]	; 0xffffffd4
   123f0:	bl	4de4 <MyGame_Example_Monster_testarrayofbools>
   123f4:	str	r0, [fp, #-28]	; 0xffffffe4
   123f8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   123fc:	bl	ea0 <flatbuffers_bool_vec_len>
   12400:	mov	r3, r0
   12404:	cmp	r3, #4
   12408:	beq	1241c <test_clone_slice+0x560>
   1240c:	movw	r0, #0
   12410:	movt	r0, #0
   12414:	bl	0 <puts>
   12418:	b	125b0 <test_clone_slice+0x6f4>
   1241c:	sub	r3, fp, #72	; 0x48
   12420:	add	r3, r3, #3
   12424:	mov	r2, #4
   12428:	mov	r1, r3
   1242c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12430:	bl	0 <memcmp>
   12434:	mov	r3, r0
   12438:	cmp	r3, #0
   1243c:	beq	12450 <test_clone_slice+0x594>
   12440:	movw	r0, #0
   12444:	movt	r0, #0
   12448:	bl	0 <puts>
   1244c:	b	125b0 <test_clone_slice+0x6f4>
   12450:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12454:	bl	31bc <MyGame_Example_Monster_pos>
   12458:	mov	r3, r0
   1245c:	vldr	s15, [r3]
   12460:	vldr	s14, [pc, #360]	; 125d0 <test_clone_slice+0x714>
   12464:	vcmp.f32	s15, s14
   12468:	vmrs	APSR_nzcv, fpscr
   1246c:	beq	12480 <test_clone_slice+0x5c4>
   12470:	movw	r0, #0
   12474:	movt	r0, #0
   12478:	bl	0 <puts>
   1247c:	b	125b0 <test_clone_slice+0x6f4>
   12480:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12484:	bl	5428 <MyGame_Example_Monster_test4>
   12488:	str	r0, [fp, #-32]	; 0xffffffe0
   1248c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12490:	bl	1ffc <MyGame_Example_Test_vec_len>
   12494:	mov	r3, r0
   12498:	cmp	r3, #2
   1249c:	beq	124b0 <test_clone_slice+0x5f4>
   124a0:	movw	r0, #0
   124a4:	movt	r0, #0
   124a8:	bl	0 <puts>
   124ac:	b	125b0 <test_clone_slice+0x6f4>
   124b0:	mov	r1, #0
   124b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   124b8:	bl	1f6c <MyGame_Example_Test_vec_at>
   124bc:	str	r0, [fp, #-52]	; 0xffffffcc
   124c0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   124c4:	bl	204c <MyGame_Example_Test_a>
   124c8:	mov	r3, r0
   124cc:	cmp	r3, #22
   124d0:	beq	124e4 <test_clone_slice+0x628>
   124d4:	movw	r0, #0
   124d8:	movt	r0, #0
   124dc:	bl	0 <puts>
   124e0:	b	125b0 <test_clone_slice+0x6f4>
   124e4:	mov	r1, #0
   124e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   124ec:	bl	1f6c <MyGame_Example_Test_vec_at>
   124f0:	mov	r3, r0
   124f4:	ldrsh	r3, [r3]
   124f8:	cmp	r3, #22
   124fc:	beq	12510 <test_clone_slice+0x654>
   12500:	movw	r0, #0
   12504:	movt	r0, #0
   12508:	bl	0 <puts>
   1250c:	b	125b0 <test_clone_slice+0x6f4>
   12510:	mov	r1, #1
   12514:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12518:	bl	1f6c <MyGame_Example_Test_vec_at>
   1251c:	str	r0, [fp, #-52]	; 0xffffffcc
   12520:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12524:	bl	204c <MyGame_Example_Test_a>
   12528:	mov	r3, r0
   1252c:	cmp	r3, #44	; 0x2c
   12530:	beq	12544 <test_clone_slice+0x688>
   12534:	movw	r0, #0
   12538:	movt	r0, #0
   1253c:	bl	0 <puts>
   12540:	b	125b0 <test_clone_slice+0x6f4>
   12544:	ldr	r0, [fp, #-20]	; 0xffffffec
   12548:	bl	5428 <MyGame_Example_Monster_test4>
   1254c:	str	r0, [fp, #-32]	; 0xffffffe0
   12550:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12554:	bl	1ffc <MyGame_Example_Test_vec_len>
   12558:	mov	r3, r0
   1255c:	cmp	r3, #1
   12560:	beq	12574 <test_clone_slice+0x6b8>
   12564:	movw	r0, #0
   12568:	movt	r0, #0
   1256c:	bl	0 <puts>
   12570:	b	125b0 <test_clone_slice+0x6f4>
   12574:	mov	r1, #0
   12578:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1257c:	bl	1f6c <MyGame_Example_Test_vec_at>
   12580:	str	r0, [fp, #-52]	; 0xffffffcc
   12584:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12588:	bl	204c <MyGame_Example_Test_a>
   1258c:	mov	r3, r0
   12590:	cmp	r3, #44	; 0x2c
   12594:	beq	125a8 <test_clone_slice+0x6ec>
   12598:	movw	r0, #0
   1259c:	movt	r0, #0
   125a0:	bl	0 <puts>
   125a4:	b	125b0 <test_clone_slice+0x6f4>
   125a8:	mov	r3, #0
   125ac:	str	r3, [fp, #-8]
   125b0:	ldr	r0, [fp, #-16]
   125b4:	bl	0 <flatcc_builder_aligned_free>
   125b8:	ldr	r3, [fp, #-8]
   125bc:	mov	r0, r3
   125c0:	sub	sp, fp, #4
   125c4:	ldr	fp, [sp]
   125c8:	add	sp, sp, #4
   125cc:	pop	{pc}		; (ldr pc, [sp], #4)
   125d0:	.word	0xc2293333

000125d4 <test_create_add_field>:
   125d4:	str	fp, [sp, #-8]!
   125d8:	str	lr, [sp, #4]
   125dc:	add	fp, sp, #4
   125e0:	sub	sp, sp, #40	; 0x28
   125e4:	str	r0, [fp, #-32]	; 0xffffffe0
   125e8:	mvn	r3, #0
   125ec:	str	r3, [fp, #-8]
   125f0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   125f4:	bl	0 <flatcc_builder_reset>
   125f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   125fc:	bl	b1ec <MyGame_Example_Monster_start_as_root>
   12600:	movw	r1, #0
   12604:	movt	r1, #0
   12608:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1260c:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   12610:	movw	r1, #0
   12614:	movt	r1, #0
   12618:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1261c:	bl	7b28 <flatbuffers_string_create_str>
   12620:	mov	r1, r0
   12624:	mov	r3, #2
   12628:	str	r3, [sp]
   1262c:	mvn	r2, #99	; 0x63
   12630:	mvn	r3, #0
   12634:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12638:	bl	b094 <MyGame_Example_Monster_testempty_create>
   1263c:	mov	r1, #0
   12640:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12644:	bl	a708 <MyGame_Example_Monster_enemy_add>
   12648:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1264c:	bl	b29c <MyGame_Example_Monster_end_as_root>
   12650:	sub	r3, fp, #24
   12654:	mov	r1, r3
   12658:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1265c:	bl	0 <flatcc_builder_finalize_aligned_buffer>
   12660:	str	r0, [fp, #-12]
   12664:	ldr	r0, [fp, #-12]
   12668:	bl	3148 <MyGame_Example_Monster_as_root>
   1266c:	str	r0, [fp, #-16]
   12670:	ldr	r0, [fp, #-16]
   12674:	bl	50c4 <MyGame_Example_Monster_enemy_is_present>
   12678:	mov	r3, r0
   1267c:	cmp	r3, #0
   12680:	beq	12694 <test_create_add_field+0xc0>
   12684:	movw	r0, #0
   12688:	movt	r0, #0
   1268c:	bl	0 <puts>
   12690:	b	126d4 <test_create_add_field+0x100>
   12694:	ldr	r0, [fp, #-16]
   12698:	bl	56b0 <MyGame_Example_Monster_testempty>
   1269c:	str	r0, [fp, #-20]	; 0xffffffec
   126a0:	ldr	r0, [fp, #-20]	; 0xffffffec
   126a4:	bl	29b4 <MyGame_Example_Stat_val>
   126a8:	mvn	r2, #99	; 0x63
   126ac:	mvn	r3, #0
   126b0:	cmp	r1, r3
   126b4:	cmpeq	r0, r2
   126b8:	beq	126cc <test_create_add_field+0xf8>
   126bc:	movw	r0, #0
   126c0:	movt	r0, #0
   126c4:	bl	0 <puts>
   126c8:	b	126d4 <test_create_add_field+0x100>
   126cc:	mov	r3, #0
   126d0:	str	r3, [fp, #-8]
   126d4:	ldr	r0, [fp, #-12]
   126d8:	bl	0 <flatcc_builder_aligned_free>
   126dc:	ldr	r3, [fp, #-8]
   126e0:	mov	r0, r3
   126e4:	sub	sp, fp, #4
   126e8:	ldr	fp, [sp]
   126ec:	add	sp, sp, #4
   126f0:	pop	{pc}		; (ldr pc, [sp], #4)

000126f4 <test_union_vector>:
   126f4:	str	r4, [sp, #-12]!
   126f8:	str	fp, [sp, #4]
   126fc:	str	lr, [sp, #8]
   12700:	add	fp, sp, #8
   12704:	sub	sp, sp, #100	; 0x64
   12708:	str	r0, [fp, #-96]	; 0xffffffa0
   1270c:	mvn	r3, #0
   12710:	str	r3, [fp, #-16]
   12714:	ldr	r0, [fp, #-96]	; 0xffffffa0
   12718:	bl	0 <flatcc_builder_reset>
   1271c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   12720:	bl	b1ec <MyGame_Example_Monster_start_as_root>
   12724:	movw	r1, #0
   12728:	movt	r1, #0
   1272c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   12730:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   12734:	mov	r3, #2
   12738:	str	r3, [sp]
   1273c:	mov	r3, #2
   12740:	mov	r2, #2
   12744:	mov	r1, #2
   12748:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1274c:	bl	9444 <MyGame_Example_TestSimpleTableWithEnum_create>
   12750:	str	r0, [fp, #-20]	; 0xffffffec
   12754:	ldr	r0, [fp, #-96]	; 0xffffffa0
   12758:	bl	8e34 <MyGame_Example_Any_vec_start>
   1275c:	sub	r3, fp, #60	; 0x3c
   12760:	ldr	r1, [fp, #-20]	; 0xffffffec
   12764:	mov	r0, r3
   12768:	bl	8da4 <MyGame_Example_Any_as_TestSimpleTableWithEnum>
   1276c:	sub	r3, fp, #60	; 0x3c
   12770:	ldm	r3, {r1, r2}
   12774:	ldr	r0, [fp, #-96]	; 0xffffffa0
   12778:	bl	8ea4 <MyGame_Example_Any_vec_push>
   1277c:	sub	r3, fp, #72	; 0x48
   12780:	ldr	r1, [fp, #-96]	; 0xffffffa0
   12784:	mov	r0, r3
   12788:	bl	8e68 <MyGame_Example_Any_vec_end>
   1278c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   12790:	bl	aa40 <MyGame_Example_Monster_test_Alt_start>
   12794:	sub	r3, fp, #72	; 0x48
   12798:	ldm	r3, {r1, r2}
   1279c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   127a0:	bl	9738 <MyGame_Example_Alt_manyany_add>
   127a4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   127a8:	bl	aa74 <MyGame_Example_Monster_test_Alt_end>
   127ac:	ldr	r0, [fp, #-96]	; 0xffffffa0
   127b0:	bl	b29c <MyGame_Example_Monster_end_as_root>
   127b4:	sub	r3, fp, #64	; 0x40
   127b8:	mov	r1, r3
   127bc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   127c0:	bl	0 <flatcc_builder_finalize_aligned_buffer>
   127c4:	str	r0, [fp, #-24]	; 0xffffffe8
   127c8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   127cc:	mov	r1, r3
   127d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   127d4:	bl	d858 <MyGame_Example_Monster_verify_as_root>
   127d8:	str	r0, [fp, #-16]
   127dc:	ldr	r3, [fp, #-16]
   127e0:	cmp	r3, #0
   127e4:	beq	1280c <test_union_vector+0x118>
   127e8:	ldr	r0, [fp, #-16]
   127ec:	bl	0 <flatcc_verify_error_string>
   127f0:	mov	r3, r0
   127f4:	mov	r1, r3
   127f8:	movw	r0, #0
   127fc:	movt	r0, #0
   12800:	bl	0 <printf>
   12804:	mvn	r3, #0
   12808:	b	129e8 <test_union_vector+0x2f4>
   1280c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12810:	bl	3148 <MyGame_Example_Monster_as_root>
   12814:	str	r0, [fp, #-28]	; 0xffffffe4
   12818:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1281c:	bl	51a0 <MyGame_Example_Monster_test_type>
   12820:	mov	r3, r0
   12824:	cmp	r3, #4
   12828:	beq	1283c <test_union_vector+0x148>
   1282c:	movw	r0, #0
   12830:	movt	r0, #0
   12834:	bl	0 <printf>
   12838:	b	129dc <test_union_vector+0x2e8>
   1283c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12840:	bl	5294 <MyGame_Example_Monster_test>
   12844:	str	r0, [fp, #-32]	; 0xffffffe0
   12848:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1284c:	cmp	r3, #0
   12850:	beq	12868 <test_union_vector+0x174>
   12854:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12858:	bl	2e74 <MyGame_Example_Alt_manyany_is_present>
   1285c:	mov	r3, r0
   12860:	cmp	r3, #0
   12864:	beq	12878 <test_union_vector+0x184>
   12868:	movw	r0, #0
   1286c:	movt	r0, #0
   12870:	bl	0 <puts>
   12874:	b	129dc <test_union_vector+0x2e8>
   12878:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1287c:	bl	2c6c <MyGame_Example_Alt_manyany_type>
   12880:	str	r0, [fp, #-36]	; 0xffffffdc
   12884:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12888:	bl	2d70 <MyGame_Example_Alt_manyany>
   1288c:	str	r0, [fp, #-40]	; 0xffffffd8
   12890:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12894:	bl	2378 <MyGame_Example_Any_vec_len>
   12898:	str	r0, [fp, #-44]	; 0xffffffd4
   1289c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   128a0:	cmp	r3, #1
   128a4:	beq	128b8 <test_union_vector+0x1c4>
   128a8:	movw	r0, #0
   128ac:	movt	r0, #0
   128b0:	bl	0 <puts>
   128b4:	b	129dc <test_union_vector+0x2e8>
   128b8:	mov	r1, #0
   128bc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   128c0:	bl	1660 <flatbuffers_union_type_vec_at>
   128c4:	mov	r3, r0
   128c8:	cmp	r3, #2
   128cc:	beq	128e0 <test_union_vector+0x1ec>
   128d0:	movw	r0, #0
   128d4:	movt	r0, #0
   128d8:	bl	0 <puts>
   128dc:	b	129dc <test_union_vector+0x2e8>
   128e0:	mov	r1, #0
   128e4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   128e8:	bl	c60 <flatbuffers_generic_vec_at>
   128ec:	str	r0, [fp, #-48]	; 0xffffffd0
   128f0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   128f4:	cmp	r3, #0
   128f8:	bne	1290c <test_union_vector+0x218>
   128fc:	movw	r0, #0
   12900:	movt	r0, #0
   12904:	bl	0 <puts>
   12908:	b	129dc <test_union_vector+0x2e8>
   1290c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12910:	bl	27e4 <MyGame_Example_TestSimpleTableWithEnum_color>
   12914:	mov	r3, r0
   12918:	str	r3, [fp, #-52]	; 0xffffffcc
   1291c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12920:	cmp	r3, #2
   12924:	beq	1293c <test_union_vector+0x248>
   12928:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1292c:	movw	r0, #0
   12930:	movt	r0, #0
   12934:	bl	0 <printf>
   12938:	b	129dc <test_union_vector+0x2e8>
   1293c:	sub	r3, fp, #80	; 0x50
   12940:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12944:	mov	r0, r3
   12948:	bl	2f50 <MyGame_Example_Alt_manyany_union>
   1294c:	sub	r3, fp, #80	; 0x50
   12950:	ldm	r3, {r0, r1}
   12954:	bl	23ac <MyGame_Example_Any_union_vec_len>
   12958:	mov	r3, r0
   1295c:	cmp	r3, #1
   12960:	beq	12974 <test_union_vector+0x280>
   12964:	movw	r0, #0
   12968:	movt	r0, #0
   1296c:	bl	0 <puts>
   12970:	b	129dc <test_union_vector+0x2e8>
   12974:	sub	r0, fp, #88	; 0x58
   12978:	mov	r3, #0
   1297c:	sub	r2, fp, #80	; 0x50
   12980:	ldm	r2, {r1, r2}
   12984:	bl	23e8 <MyGame_Example_Any_union_vec_at>
   12988:	ldrb	r4, [fp, #-88]	; 0xffffffa8
   1298c:	mov	r1, #0
   12990:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12994:	bl	1660 <flatbuffers_union_type_vec_at>
   12998:	mov	r3, r0
   1299c:	cmp	r4, r3
   129a0:	beq	129b4 <test_union_vector+0x2c0>
   129a4:	movw	r0, #0
   129a8:	movt	r0, #0
   129ac:	bl	0 <puts>
   129b0:	b	129dc <test_union_vector+0x2e8>
   129b4:	ldr	r3, [fp, #-84]	; 0xffffffac
   129b8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   129bc:	cmp	r2, r3
   129c0:	beq	129d4 <test_union_vector+0x2e0>
   129c4:	movw	r0, #0
   129c8:	movt	r0, #0
   129cc:	bl	0 <puts>
   129d0:	b	129dc <test_union_vector+0x2e8>
   129d4:	mov	r3, #0
   129d8:	str	r3, [fp, #-16]
   129dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   129e0:	bl	0 <flatcc_builder_aligned_free>
   129e4:	ldr	r3, [fp, #-16]
   129e8:	mov	r0, r3
   129ec:	sub	sp, fp, #8
   129f0:	ldr	r4, [sp]
   129f4:	ldr	fp, [sp, #4]
   129f8:	add	sp, sp, #8
   129fc:	pop	{pc}		; (ldr pc, [sp], #4)

00012a00 <test_mixed_type_union>:
   12a00:	str	fp, [sp, #-8]!
   12a04:	str	lr, [sp, #4]
   12a08:	add	fp, sp, #4
   12a0c:	sub	sp, sp, #96	; 0x60
   12a10:	str	r0, [fp, #-88]	; 0xffffffa8
   12a14:	mvn	r3, #0
   12a18:	str	r3, [fp, #-8]
   12a1c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12a20:	bl	0 <flatcc_builder_reset>
   12a24:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12a28:	bl	c508 <Fantasy_Movie_start_as_root>
   12a2c:	mov	r1, #10
   12a30:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12a34:	bl	8748 <Fantasy_BookReader_create>
   12a38:	str	r0, [fp, #-12]
   12a3c:	mov	r1, #22
   12a40:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12a44:	bl	85f8 <Fantasy_Rapunzel_create>
   12a48:	str	r0, [fp, #-16]
   12a4c:	sub	r3, fp, #64	; 0x40
   12a50:	ldr	r1, [fp, #-16]
   12a54:	mov	r0, r3
   12a58:	bl	8f30 <Fantasy_Character_as_Rapunzel>
   12a5c:	mov	r1, #19
   12a60:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12a64:	bl	bcf0 <Fantasy_Movie_main_character_Rapunzel_create>
   12a68:	ldr	r1, [fp, #-16]
   12a6c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12a70:	bl	c08c <Fantasy_Movie_cameo_Rapunzel_add>
   12a74:	mov	r1, #42	; 0x2a
   12a78:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12a7c:	bl	bbc8 <Fantasy_Attacker_create>
   12a80:	str	r0, [fp, #-20]	; 0xffffffec
   12a84:	ldr	r1, [fp, #-20]	; 0xffffffec
   12a88:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12a8c:	bl	be28 <Fantasy_Movie_antagonist_MuLan_add>
   12a90:	movw	r1, #0
   12a94:	movt	r1, #0
   12a98:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12a9c:	bl	bf84 <Fantasy_Movie_side_kick_Other_create_str>
   12aa0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12aa4:	bl	c1a8 <Fantasy_Movie_characters_start>
   12aa8:	sub	r3, fp, #64	; 0x40
   12aac:	ldm	r3, {r1, r2}
   12ab0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12ab4:	bl	c228 <Fantasy_Movie_characters_push>
   12ab8:	ldr	r1, [fp, #-20]	; 0xffffffec
   12abc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12ac0:	bl	c26c <Fantasy_Movie_characters_MuLan_push>
   12ac4:	mov	r1, #1
   12ac8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12acc:	bl	c2bc <Fantasy_Movie_characters_MuLan_push_create>
   12ad0:	movw	r1, #0
   12ad4:	movt	r1, #0
   12ad8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12adc:	bl	7b28 <flatbuffers_string_create_str>
   12ae0:	mov	r2, r0
   12ae4:	sub	r3, fp, #52	; 0x34
   12ae8:	mov	r1, r2
   12aec:	mov	r0, r3
   12af0:	bl	8fc0 <Fantasy_Character_as_Other>
   12af4:	sub	r3, fp, #52	; 0x34
   12af8:	ldm	r3, {r1, r2}
   12afc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12b00:	bl	9008 <Fantasy_Character_vec_push>
   12b04:	ldr	r1, [fp, #-12]
   12b08:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12b0c:	bl	c3a8 <Fantasy_Movie_characters_Belle_push>
   12b10:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12b14:	bl	c31c <Fantasy_Movie_characters_Belle_push_start>
   12b18:	str	r0, [fp, #-24]	; 0xffffffe8
   12b1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12b20:	mov	r2, #3
   12b24:	str	r2, [r3]
   12b28:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12b2c:	bl	c350 <Fantasy_Movie_characters_Belle_push_end>
   12b30:	mov	r1, #1
   12b34:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12b38:	bl	8748 <Fantasy_BookReader_create>
   12b3c:	mov	r3, r0
   12b40:	mov	r1, r3
   12b44:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12b48:	bl	c3a8 <Fantasy_Movie_characters_Belle_push>
   12b4c:	mov	r1, #2
   12b50:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12b54:	bl	c3f8 <Fantasy_Movie_characters_Belle_push_create>
   12b58:	movw	r1, #0
   12b5c:	movt	r1, #0
   12b60:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12b64:	bl	7b28 <flatbuffers_string_create_str>
   12b68:	mov	r3, r0
   12b6c:	mov	r1, r3
   12b70:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12b74:	bl	c458 <Fantasy_Movie_characters_Other_push>
   12b78:	movw	r1, #0
   12b7c:	movt	r1, #0
   12b80:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12b84:	bl	c4a8 <Fantasy_Movie_characters_Other_push_create_str>
   12b88:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12b8c:	bl	c1dc <Fantasy_Movie_characters_end>
   12b90:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12b94:	bl	c560 <Fantasy_Movie_end_as_root>
   12b98:	sub	r3, fp, #56	; 0x38
   12b9c:	mov	r1, r3
   12ba0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12ba4:	bl	0 <flatcc_builder_finalize_aligned_buffer>
   12ba8:	str	r0, [fp, #-28]	; 0xffffffe4
   12bac:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12bb0:	movw	r3, #0
   12bb4:	movt	r3, #0
   12bb8:	ldr	r3, [r3]
   12bbc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12bc0:	movw	r0, #0
   12bc4:	movt	r0, #0
   12bc8:	bl	ddf0 <hexdump>
   12bcc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12bd0:	mov	r1, r3
   12bd4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12bd8:	bl	dda4 <Fantasy_Movie_verify_as_root>
   12bdc:	str	r0, [fp, #-8]
   12be0:	ldr	r3, [fp, #-8]
   12be4:	cmp	r3, #0
   12be8:	beq	12c10 <test_mixed_type_union+0x210>
   12bec:	ldr	r0, [fp, #-8]
   12bf0:	bl	0 <flatcc_verify_error_string>
   12bf4:	mov	r3, r0
   12bf8:	mov	r1, r3
   12bfc:	movw	r0, #0
   12c00:	movt	r0, #0
   12c04:	bl	0 <printf>
   12c08:	mvn	r3, #0
   12c0c:	b	132fc <test_mixed_type_union+0x8fc>
   12c10:	mvn	r3, #0
   12c14:	str	r3, [fp, #-8]
   12c18:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12c1c:	bl	65fc <Fantasy_Movie_as_root>
   12c20:	str	r0, [fp, #-32]	; 0xffffffe0
   12c24:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12c28:	bl	6864 <Fantasy_Movie_main_character_is_present>
   12c2c:	mov	r3, r0
   12c30:	cmp	r3, #0
   12c34:	bne	12c48 <test_mixed_type_union+0x248>
   12c38:	movw	r0, #0
   12c3c:	movt	r0, #0
   12c40:	bl	0 <puts>
   12c44:	b	132f0 <test_mixed_type_union+0x8f0>
   12c48:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12c4c:	bl	728c <Fantasy_Movie_characters_is_present>
   12c50:	mov	r3, r0
   12c54:	cmp	r3, #0
   12c58:	bne	12c6c <test_mixed_type_union+0x26c>
   12c5c:	movw	r0, #0
   12c60:	movt	r0, #0
   12c64:	bl	0 <puts>
   12c68:	b	132f0 <test_mixed_type_union+0x8f0>
   12c6c:	sub	r3, fp, #80	; 0x50
   12c70:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12c74:	mov	r0, r3
   12c78:	bl	6940 <Fantasy_Movie_main_character_union>
   12c7c:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   12c80:	cmp	r3, #8
   12c84:	beq	12c98 <test_mixed_type_union+0x298>
   12c88:	movw	r0, #0
   12c8c:	movt	r0, #0
   12c90:	bl	0 <puts>
   12c94:	b	132f0 <test_mixed_type_union+0x8f0>
   12c98:	ldr	r3, [fp, #-76]	; 0xffffffb4
   12c9c:	str	r3, [fp, #-36]	; 0xffffffdc
   12ca0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12ca4:	cmp	r3, #0
   12ca8:	bne	12cb8 <test_mixed_type_union+0x2b8>
   12cac:	movw	r0, #0
   12cb0:	movt	r0, #0
   12cb4:	bl	0 <puts>
   12cb8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12cbc:	bl	232c <Fantasy_Rapunzel_hair_length>
   12cc0:	mov	r3, r0
   12cc4:	cmp	r3, #19
   12cc8:	bls	12cdc <test_mixed_type_union+0x2dc>
   12ccc:	movw	r0, #0
   12cd0:	movt	r0, #0
   12cd4:	bl	0 <puts>
   12cd8:	b	132f0 <test_mixed_type_union+0x8f0>
   12cdc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12ce0:	bl	232c <Fantasy_Rapunzel_hair_length>
   12ce4:	mov	r3, r0
   12ce8:	cmp	r3, #18
   12cec:	bhi	12d00 <test_mixed_type_union+0x300>
   12cf0:	movw	r0, #0
   12cf4:	movt	r0, #0
   12cf8:	bl	0 <puts>
   12cfc:	b	132f0 <test_mixed_type_union+0x8f0>
   12d00:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d04:	bl	6e90 <Fantasy_Movie_cameo_type>
   12d08:	mov	r3, r0
   12d0c:	cmp	r3, #8
   12d10:	beq	12d24 <test_mixed_type_union+0x324>
   12d14:	movw	r0, #0
   12d18:	movt	r0, #0
   12d1c:	bl	0 <puts>
   12d20:	b	132f0 <test_mixed_type_union+0x8f0>
   12d24:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d28:	bl	6f84 <Fantasy_Movie_cameo>
   12d2c:	str	r0, [fp, #-36]	; 0xffffffdc
   12d30:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12d34:	cmp	r3, #0
   12d38:	bne	12d4c <test_mixed_type_union+0x34c>
   12d3c:	movw	r0, #0
   12d40:	movt	r0, #0
   12d44:	bl	0 <puts>
   12d48:	b	132f0 <test_mixed_type_union+0x8f0>
   12d4c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12d50:	bl	232c <Fantasy_Rapunzel_hair_length>
   12d54:	mov	r3, r0
   12d58:	cmp	r3, #22
   12d5c:	beq	12d70 <test_mixed_type_union+0x370>
   12d60:	movw	r0, #0
   12d64:	movt	r0, #0
   12d68:	bl	0 <puts>
   12d6c:	b	132f0 <test_mixed_type_union+0x8f0>
   12d70:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d74:	bl	69d4 <Fantasy_Movie_antagonist_type>
   12d78:	mov	r3, r0
   12d7c:	cmp	r3, #2
   12d80:	beq	12d94 <test_mixed_type_union+0x394>
   12d84:	movw	r0, #0
   12d88:	movt	r0, #0
   12d8c:	bl	0 <puts>
   12d90:	b	132f0 <test_mixed_type_union+0x8f0>
   12d94:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d98:	bl	6ac8 <Fantasy_Movie_antagonist>
   12d9c:	str	r0, [fp, #-40]	; 0xffffffd8
   12da0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12da4:	cmp	r3, #0
   12da8:	beq	12dc0 <test_mixed_type_union+0x3c0>
   12dac:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12db0:	bl	63a0 <Fantasy_Attacker_sword_attack_damage>
   12db4:	mov	r3, r0
   12db8:	cmp	r3, #42	; 0x2a
   12dbc:	beq	12dd0 <test_mixed_type_union+0x3d0>
   12dc0:	movw	r0, #0
   12dc4:	movt	r0, #0
   12dc8:	bl	0 <puts>
   12dcc:	b	132f0 <test_mixed_type_union+0x8f0>
   12dd0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12dd4:	bl	6bc8 <Fantasy_Movie_side_kick_type>
   12dd8:	mov	r3, r0
   12ddc:	cmp	r3, #11
   12de0:	beq	12df4 <test_mixed_type_union+0x3f4>
   12de4:	movw	r0, #0
   12de8:	movt	r0, #0
   12dec:	bl	0 <puts>
   12df0:	b	132f0 <test_mixed_type_union+0x8f0>
   12df4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12df8:	bl	6cbc <Fantasy_Movie_side_kick>
   12dfc:	mov	r3, r0
   12e00:	mov	r0, r3
   12e04:	bl	c14 <flatbuffers_string_cast_from_generic>
   12e08:	str	r0, [fp, #-44]	; 0xffffffd4
   12e0c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12e10:	cmp	r3, #0
   12e14:	bne	12e28 <test_mixed_type_union+0x428>
   12e18:	movw	r0, #0
   12e1c:	movt	r0, #0
   12e20:	bl	0 <puts>
   12e24:	b	132f0 <test_mixed_type_union+0x8f0>
   12e28:	movw	r1, #0
   12e2c:	movt	r1, #0
   12e30:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12e34:	bl	0 <strcmp>
   12e38:	mov	r3, r0
   12e3c:	cmp	r3, #0
   12e40:	beq	12e58 <test_mixed_type_union+0x458>
   12e44:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12e48:	movw	r0, #0
   12e4c:	movt	r0, #0
   12e50:	bl	0 <printf>
   12e54:	b	132f0 <test_mixed_type_union+0x8f0>
   12e58:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12e5c:	bl	6e50 <Fantasy_Movie_side_kick_as_string>
   12e60:	str	r0, [fp, #-44]	; 0xffffffd4
   12e64:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12e68:	cmp	r3, #0
   12e6c:	bne	12e80 <test_mixed_type_union+0x480>
   12e70:	movw	r0, #0
   12e74:	movt	r0, #0
   12e78:	bl	0 <puts>
   12e7c:	b	132f0 <test_mixed_type_union+0x8f0>
   12e80:	movw	r1, #0
   12e84:	movt	r1, #0
   12e88:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12e8c:	bl	0 <strcmp>
   12e90:	mov	r3, r0
   12e94:	cmp	r3, #0
   12e98:	beq	12eb0 <test_mixed_type_union+0x4b0>
   12e9c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12ea0:	movw	r0, #0
   12ea4:	movt	r0, #0
   12ea8:	bl	0 <printf>
   12eac:	b	132f0 <test_mixed_type_union+0x8f0>
   12eb0:	sub	r3, fp, #100	; 0x64
   12eb4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12eb8:	mov	r0, r3
   12ebc:	bl	6dbc <Fantasy_Movie_side_kick_union>
   12ec0:	sub	r1, fp, #80	; 0x50
   12ec4:	sub	r3, fp, #100	; 0x64
   12ec8:	ldrd	r2, [r3]
   12ecc:	strd	r2, [r1]
   12ed0:	sub	r3, fp, #80	; 0x50
   12ed4:	ldm	r3, {r0, r1}
   12ed8:	bl	d7c <flatbuffers_string_cast_from_union>
   12edc:	str	r0, [fp, #-44]	; 0xffffffd4
   12ee0:	movw	r1, #0
   12ee4:	movt	r1, #0
   12ee8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12eec:	bl	0 <strcmp>
   12ef0:	mov	r3, r0
   12ef4:	cmp	r3, #0
   12ef8:	beq	12f10 <test_mixed_type_union+0x510>
   12efc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12f00:	movw	r0, #0
   12f04:	movt	r0, #0
   12f08:	bl	0 <printf>
   12f0c:	b	132f0 <test_mixed_type_union+0x8f0>
   12f10:	sub	r3, fp, #72	; 0x48
   12f14:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12f18:	mov	r0, r3
   12f1c:	bl	7368 <Fantasy_Movie_characters_union>
   12f20:	sub	r0, fp, #100	; 0x64
   12f24:	mov	r3, #0
   12f28:	sub	r2, fp, #72	; 0x48
   12f2c:	ldm	r2, {r1, r2}
   12f30:	bl	64d0 <Fantasy_Character_union_vec_at>
   12f34:	sub	r1, fp, #80	; 0x50
   12f38:	sub	r3, fp, #100	; 0x64
   12f3c:	ldrd	r2, [r3]
   12f40:	strd	r2, [r1]
   12f44:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   12f48:	cmp	r3, #8
   12f4c:	beq	12f60 <test_mixed_type_union+0x560>
   12f50:	movw	r0, #0
   12f54:	movt	r0, #0
   12f58:	bl	0 <printf>
   12f5c:	b	132f0 <test_mixed_type_union+0x8f0>
   12f60:	sub	r0, fp, #100	; 0x64
   12f64:	mov	r3, #1
   12f68:	sub	r2, fp, #72	; 0x48
   12f6c:	ldm	r2, {r1, r2}
   12f70:	bl	64d0 <Fantasy_Character_union_vec_at>
   12f74:	sub	r1, fp, #80	; 0x50
   12f78:	sub	r3, fp, #100	; 0x64
   12f7c:	ldrd	r2, [r3]
   12f80:	strd	r2, [r1]
   12f84:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   12f88:	cmp	r3, #2
   12f8c:	beq	12fa0 <test_mixed_type_union+0x5a0>
   12f90:	movw	r0, #0
   12f94:	movt	r0, #0
   12f98:	bl	0 <printf>
   12f9c:	b	132f0 <test_mixed_type_union+0x8f0>
   12fa0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   12fa4:	str	r3, [fp, #-40]	; 0xffffffd8
   12fa8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12fac:	bl	63a0 <Fantasy_Attacker_sword_attack_damage>
   12fb0:	mov	r3, r0
   12fb4:	cmp	r3, #42	; 0x2a
   12fb8:	beq	12fcc <test_mixed_type_union+0x5cc>
   12fbc:	movw	r0, #0
   12fc0:	movt	r0, #0
   12fc4:	bl	0 <printf>
   12fc8:	b	132f0 <test_mixed_type_union+0x8f0>
   12fcc:	sub	r0, fp, #100	; 0x64
   12fd0:	mov	r3, #2
   12fd4:	sub	r2, fp, #72	; 0x48
   12fd8:	ldm	r2, {r1, r2}
   12fdc:	bl	64d0 <Fantasy_Character_union_vec_at>
   12fe0:	sub	r1, fp, #80	; 0x50
   12fe4:	sub	r3, fp, #100	; 0x64
   12fe8:	ldrd	r2, [r3]
   12fec:	strd	r2, [r1]
   12ff0:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   12ff4:	cmp	r3, #2
   12ff8:	beq	1300c <test_mixed_type_union+0x60c>
   12ffc:	movw	r0, #0
   13000:	movt	r0, #0
   13004:	bl	0 <printf>
   13008:	b	132f0 <test_mixed_type_union+0x8f0>
   1300c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13010:	str	r3, [fp, #-40]	; 0xffffffd8
   13014:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13018:	bl	63a0 <Fantasy_Attacker_sword_attack_damage>
   1301c:	mov	r3, r0
   13020:	cmp	r3, #1
   13024:	beq	13038 <test_mixed_type_union+0x638>
   13028:	movw	r0, #0
   1302c:	movt	r0, #0
   13030:	bl	0 <printf>
   13034:	b	132f0 <test_mixed_type_union+0x8f0>
   13038:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1303c:	bl	7084 <Fantasy_Movie_characters_type>
   13040:	mov	r3, r0
   13044:	mov	r1, #3
   13048:	mov	r0, r3
   1304c:	bl	1660 <flatbuffers_union_type_vec_at>
   13050:	mov	r3, r0
   13054:	cmp	r3, #11
   13058:	beq	1306c <test_mixed_type_union+0x66c>
   1305c:	movw	r0, #0
   13060:	movt	r0, #0
   13064:	bl	0 <puts>
   13068:	b	132f0 <test_mixed_type_union+0x8f0>
   1306c:	mov	r2, #3
   13070:	sub	r3, fp, #72	; 0x48
   13074:	ldm	r3, {r0, r1}
   13078:	bl	65b8 <Fantasy_Character_union_vec_at_as_string>
   1307c:	str	r0, [fp, #-44]	; 0xffffffd4
   13080:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13084:	cmp	r3, #0
   13088:	beq	130a8 <test_mixed_type_union+0x6a8>
   1308c:	movw	r1, #0
   13090:	movt	r1, #0
   13094:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13098:	bl	0 <strcmp>
   1309c:	mov	r3, r0
   130a0:	cmp	r3, #0
   130a4:	beq	130b8 <test_mixed_type_union+0x6b8>
   130a8:	movw	r0, #0
   130ac:	movt	r0, #0
   130b0:	bl	0 <puts>
   130b4:	b	132f0 <test_mixed_type_union+0x8f0>
   130b8:	sub	r0, fp, #100	; 0x64
   130bc:	mov	r3, #3
   130c0:	sub	r2, fp, #72	; 0x48
   130c4:	ldm	r2, {r1, r2}
   130c8:	bl	64d0 <Fantasy_Character_union_vec_at>
   130cc:	sub	r1, fp, #80	; 0x50
   130d0:	sub	r3, fp, #100	; 0x64
   130d4:	ldrd	r2, [r3]
   130d8:	strd	r2, [r1]
   130dc:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   130e0:	cmp	r3, #11
   130e4:	beq	130f8 <test_mixed_type_union+0x6f8>
   130e8:	movw	r0, #0
   130ec:	movt	r0, #0
   130f0:	bl	0 <printf>
   130f4:	b	132f0 <test_mixed_type_union+0x8f0>
   130f8:	sub	r3, fp, #80	; 0x50
   130fc:	ldm	r3, {r0, r1}
   13100:	bl	d7c <flatbuffers_string_cast_from_union>
   13104:	str	r0, [fp, #-44]	; 0xffffffd4
   13108:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1310c:	cmp	r3, #0
   13110:	beq	13130 <test_mixed_type_union+0x730>
   13114:	movw	r1, #0
   13118:	movt	r1, #0
   1311c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13120:	bl	0 <strcmp>
   13124:	mov	r3, r0
   13128:	cmp	r3, #0
   1312c:	beq	13140 <test_mixed_type_union+0x740>
   13130:	movw	r0, #0
   13134:	movt	r0, #0
   13138:	bl	0 <puts>
   1313c:	b	132f0 <test_mixed_type_union+0x8f0>
   13140:	sub	r0, fp, #100	; 0x64
   13144:	mov	r3, #4
   13148:	sub	r2, fp, #72	; 0x48
   1314c:	ldm	r2, {r1, r2}
   13150:	bl	64d0 <Fantasy_Character_union_vec_at>
   13154:	sub	r1, fp, #80	; 0x50
   13158:	sub	r3, fp, #100	; 0x64
   1315c:	ldrd	r2, [r3]
   13160:	strd	r2, [r1]
   13164:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   13168:	cmp	r3, #9
   1316c:	beq	13180 <test_mixed_type_union+0x780>
   13170:	movw	r0, #0
   13174:	movt	r0, #0
   13178:	bl	0 <printf>
   1317c:	b	132f0 <test_mixed_type_union+0x8f0>
   13180:	sub	r0, fp, #100	; 0x64
   13184:	mov	r3, #5
   13188:	sub	r2, fp, #72	; 0x48
   1318c:	ldm	r2, {r1, r2}
   13190:	bl	64d0 <Fantasy_Character_union_vec_at>
   13194:	sub	r1, fp, #80	; 0x50
   13198:	sub	r3, fp, #100	; 0x64
   1319c:	ldrd	r2, [r3]
   131a0:	strd	r2, [r1]
   131a4:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   131a8:	cmp	r3, #9
   131ac:	beq	131c0 <test_mixed_type_union+0x7c0>
   131b0:	movw	r0, #0
   131b4:	movt	r0, #0
   131b8:	bl	0 <printf>
   131bc:	b	132f0 <test_mixed_type_union+0x8f0>
   131c0:	sub	r0, fp, #100	; 0x64
   131c4:	mov	r3, #6
   131c8:	sub	r2, fp, #72	; 0x48
   131cc:	ldm	r2, {r1, r2}
   131d0:	bl	64d0 <Fantasy_Character_union_vec_at>
   131d4:	sub	r1, fp, #80	; 0x50
   131d8:	sub	r3, fp, #100	; 0x64
   131dc:	ldrd	r2, [r3]
   131e0:	strd	r2, [r1]
   131e4:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   131e8:	cmp	r3, #9
   131ec:	beq	13200 <test_mixed_type_union+0x800>
   131f0:	movw	r0, #0
   131f4:	movt	r0, #0
   131f8:	bl	0 <printf>
   131fc:	b	132f0 <test_mixed_type_union+0x8f0>
   13200:	sub	r0, fp, #100	; 0x64
   13204:	mov	r3, #7
   13208:	sub	r2, fp, #72	; 0x48
   1320c:	ldm	r2, {r1, r2}
   13210:	bl	64d0 <Fantasy_Character_union_vec_at>
   13214:	sub	r1, fp, #80	; 0x50
   13218:	sub	r3, fp, #100	; 0x64
   1321c:	ldrd	r2, [r3]
   13220:	strd	r2, [r1]
   13224:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   13228:	cmp	r3, #9
   1322c:	beq	13240 <test_mixed_type_union+0x840>
   13230:	movw	r0, #0
   13234:	movt	r0, #0
   13238:	bl	0 <printf>
   1323c:	b	132f0 <test_mixed_type_union+0x8f0>
   13240:	sub	r0, fp, #100	; 0x64
   13244:	mov	r3, #8
   13248:	sub	r2, fp, #72	; 0x48
   1324c:	ldm	r2, {r1, r2}
   13250:	bl	64d0 <Fantasy_Character_union_vec_at>
   13254:	sub	r1, fp, #80	; 0x50
   13258:	sub	r3, fp, #100	; 0x64
   1325c:	ldrd	r2, [r3]
   13260:	strd	r2, [r1]
   13264:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   13268:	cmp	r3, #11
   1326c:	beq	13280 <test_mixed_type_union+0x880>
   13270:	movw	r0, #0
   13274:	movt	r0, #0
   13278:	bl	0 <printf>
   1327c:	b	132f0 <test_mixed_type_union+0x8f0>
   13280:	sub	r0, fp, #100	; 0x64
   13284:	mov	r3, #9
   13288:	sub	r2, fp, #72	; 0x48
   1328c:	ldm	r2, {r1, r2}
   13290:	bl	64d0 <Fantasy_Character_union_vec_at>
   13294:	sub	r1, fp, #80	; 0x50
   13298:	sub	r3, fp, #100	; 0x64
   1329c:	ldrd	r2, [r3]
   132a0:	strd	r2, [r1]
   132a4:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   132a8:	cmp	r3, #11
   132ac:	beq	132c0 <test_mixed_type_union+0x8c0>
   132b0:	movw	r0, #0
   132b4:	movt	r0, #0
   132b8:	bl	0 <printf>
   132bc:	b	132f0 <test_mixed_type_union+0x8f0>
   132c0:	sub	r3, fp, #72	; 0x48
   132c4:	ldm	r3, {r0, r1}
   132c8:	bl	6494 <Fantasy_Character_union_vec_len>
   132cc:	mov	r3, r0
   132d0:	cmp	r3, #10
   132d4:	beq	132e8 <test_mixed_type_union+0x8e8>
   132d8:	movw	r0, #0
   132dc:	movt	r0, #0
   132e0:	bl	0 <printf>
   132e4:	b	132f0 <test_mixed_type_union+0x8f0>
   132e8:	mov	r3, #0
   132ec:	str	r3, [fp, #-8]
   132f0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   132f4:	bl	0 <flatcc_builder_aligned_free>
   132f8:	ldr	r3, [fp, #-8]
   132fc:	mov	r0, r3
   13300:	sub	sp, fp, #4
   13304:	ldr	fp, [sp]
   13308:	add	sp, sp, #4
   1330c:	pop	{pc}		; (ldr pc, [sp], #4)

00013310 <test_add_set_defaults>:
   13310:	str	fp, [sp, #-8]!
   13314:	str	lr, [sp, #4]
   13318:	add	fp, sp, #4
   1331c:	sub	sp, sp, #24
   13320:	str	r0, [fp, #-24]	; 0xffffffe8
   13324:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13328:	bl	0 <flatcc_builder_reset>
   1332c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13330:	bl	b1ec <MyGame_Example_Monster_start_as_root>
   13334:	movw	r1, #0
   13338:	movt	r1, #0
   1333c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13340:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   13344:	mov	r1, #100	; 0x64
   13348:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1334c:	bl	98c8 <MyGame_Example_Monster_hp_add>
   13350:	mov	r1, #100	; 0x64
   13354:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13358:	bl	99bc <MyGame_Example_Monster_mana_add>
   1335c:	mov	r1, #8
   13360:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13364:	bl	9e80 <MyGame_Example_Monster_color_add>
   13368:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1336c:	bl	b29c <MyGame_Example_Monster_end_as_root>
   13370:	sub	r3, fp, #16
   13374:	mov	r1, r3
   13378:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1337c:	bl	0 <flatcc_builder_get_direct_buffer>
   13380:	str	r0, [fp, #-8]
   13384:	ldr	r0, [fp, #-8]
   13388:	bl	3148 <MyGame_Example_Monster_as_root>
   1338c:	str	r0, [fp, #-12]
   13390:	ldr	r0, [fp, #-12]
   13394:	bl	3474 <MyGame_Example_Monster_hp_is_present>
   13398:	mov	r3, r0
   1339c:	cmp	r3, #0
   133a0:	beq	133b8 <test_add_set_defaults+0xa8>
   133a4:	movw	r0, #0
   133a8:	movt	r0, #0
   133ac:	bl	0 <puts>
   133b0:	mvn	r3, #0
   133b4:	b	134f0 <test_add_set_defaults+0x1e0>
   133b8:	ldr	r0, [fp, #-12]
   133bc:	bl	394c <MyGame_Example_Monster_mana_is_present>
   133c0:	mov	r3, r0
   133c4:	cmp	r3, #0
   133c8:	bne	133e0 <test_add_set_defaults+0xd0>
   133cc:	movw	r0, #0
   133d0:	movt	r0, #0
   133d4:	bl	0 <puts>
   133d8:	mvn	r3, #0
   133dc:	b	134f0 <test_add_set_defaults+0x1e0>
   133e0:	ldr	r0, [fp, #-12]
   133e4:	bl	49fc <MyGame_Example_Monster_color_is_present>
   133e8:	mov	r3, r0
   133ec:	cmp	r3, #0
   133f0:	beq	13408 <test_add_set_defaults+0xf8>
   133f4:	movw	r0, #0
   133f8:	movt	r0, #0
   133fc:	bl	0 <puts>
   13400:	mvn	r3, #0
   13404:	b	134f0 <test_add_set_defaults+0x1e0>
   13408:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1340c:	bl	0 <flatcc_builder_reset>
   13410:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13414:	bl	b1ec <MyGame_Example_Monster_start_as_root>
   13418:	movw	r1, #0
   1341c:	movt	r1, #0
   13420:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13424:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   13428:	mov	r1, #100	; 0x64
   1342c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13430:	bl	994c <MyGame_Example_Monster_hp_force_add>
   13434:	mov	r1, #100	; 0x64
   13438:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1343c:	bl	9a40 <MyGame_Example_Monster_mana_force_add>
   13440:	mov	r1, #8
   13444:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13448:	bl	9f04 <MyGame_Example_Monster_color_force_add>
   1344c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13450:	bl	b29c <MyGame_Example_Monster_end_as_root>
   13454:	sub	r3, fp, #16
   13458:	mov	r1, r3
   1345c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13460:	bl	0 <flatcc_builder_get_direct_buffer>
   13464:	str	r0, [fp, #-8]
   13468:	ldr	r0, [fp, #-8]
   1346c:	bl	3148 <MyGame_Example_Monster_as_root>
   13470:	str	r0, [fp, #-12]
   13474:	ldr	r0, [fp, #-12]
   13478:	bl	3474 <MyGame_Example_Monster_hp_is_present>
   1347c:	mov	r3, r0
   13480:	cmp	r3, #0
   13484:	bne	1349c <test_add_set_defaults+0x18c>
   13488:	movw	r0, #0
   1348c:	movt	r0, #0
   13490:	bl	0 <puts>
   13494:	mvn	r3, #0
   13498:	b	134f0 <test_add_set_defaults+0x1e0>
   1349c:	ldr	r0, [fp, #-12]
   134a0:	bl	394c <MyGame_Example_Monster_mana_is_present>
   134a4:	mov	r3, r0
   134a8:	cmp	r3, #0
   134ac:	bne	134c4 <test_add_set_defaults+0x1b4>
   134b0:	movw	r0, #0
   134b4:	movt	r0, #0
   134b8:	bl	0 <puts>
   134bc:	mvn	r3, #0
   134c0:	b	134f0 <test_add_set_defaults+0x1e0>
   134c4:	ldr	r0, [fp, #-12]
   134c8:	bl	49fc <MyGame_Example_Monster_color_is_present>
   134cc:	mov	r3, r0
   134d0:	cmp	r3, #0
   134d4:	bne	134ec <test_add_set_defaults+0x1dc>
   134d8:	movw	r0, #0
   134dc:	movt	r0, #0
   134e0:	bl	0 <puts>
   134e4:	mvn	r3, #0
   134e8:	b	134f0 <test_add_set_defaults+0x1e0>
   134ec:	mov	r3, #0
   134f0:	mov	r0, r3
   134f4:	sub	sp, fp, #4
   134f8:	ldr	fp, [sp]
   134fc:	add	sp, sp, #4
   13500:	pop	{pc}		; (ldr pc, [sp], #4)

00013504 <test_nested_buffer>:
   13504:	str	fp, [sp, #-8]!
   13508:	str	lr, [sp, #4]
   1350c:	add	fp, sp, #4
   13510:	sub	sp, sp, #24
   13514:	str	r0, [fp, #-24]	; 0xffffffe8
   13518:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1351c:	bl	0 <flatcc_builder_reset>
   13520:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13524:	bl	b1ec <MyGame_Example_Monster_start_as_root>
   13528:	movw	r1, #0
   1352c:	movt	r1, #0
   13530:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13534:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   13538:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1353c:	bl	ae84 <MyGame_Example_Monster_testnestedflatbuffer_start_as_root>
   13540:	movw	r1, #0
   13544:	movt	r1, #0
   13548:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1354c:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   13550:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13554:	bl	aedc <MyGame_Example_Monster_testnestedflatbuffer_end_as_root>
   13558:	mov	r1, #10
   1355c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13560:	bl	98c8 <MyGame_Example_Monster_hp_add>
   13564:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13568:	bl	b29c <MyGame_Example_Monster_end_as_root>
   1356c:	sub	r3, fp, #20
   13570:	mov	r1, r3
   13574:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13578:	bl	0 <flatcc_builder_get_direct_buffer>
   1357c:	str	r0, [fp, #-8]
   13580:	ldr	r2, [fp, #-20]	; 0xffffffec
   13584:	movw	r3, #0
   13588:	movt	r3, #0
   1358c:	ldr	r3, [r3]
   13590:	ldr	r1, [fp, #-8]
   13594:	movw	r0, #0
   13598:	movt	r0, #0
   1359c:	bl	ddf0 <hexdump>
   135a0:	ldr	r0, [fp, #-8]
   135a4:	bl	3148 <MyGame_Example_Monster_as_root>
   135a8:	str	r0, [fp, #-12]
   135ac:	ldr	r0, [fp, #-12]
   135b0:	bl	3a28 <MyGame_Example_Monster_name>
   135b4:	mov	r3, r0
   135b8:	movw	r1, #0
   135bc:	movt	r1, #0
   135c0:	mov	r0, r3
   135c4:	bl	0 <strcmp>
   135c8:	mov	r3, r0
   135cc:	cmp	r3, #0
   135d0:	beq	135e8 <test_nested_buffer+0xe4>
   135d4:	movw	r0, #0
   135d8:	movt	r0, #0
   135dc:	bl	0 <puts>
   135e0:	mvn	r3, #0
   135e4:	b	13690 <test_nested_buffer+0x18c>
   135e8:	ldr	r0, [fp, #-12]
   135ec:	bl	5630 <MyGame_Example_Monster_testnestedflatbuffer_as_root>
   135f0:	str	r0, [fp, #-16]
   135f4:	ldr	r0, [fp, #-12]
   135f8:	bl	3380 <MyGame_Example_Monster_hp>
   135fc:	mov	r3, r0
   13600:	cmp	r3, #10
   13604:	beq	1361c <test_nested_buffer+0x118>
   13608:	movw	r0, #0
   1360c:	movt	r0, #0
   13610:	bl	0 <puts>
   13614:	mvn	r3, #0
   13618:	b	13690 <test_nested_buffer+0x18c>
   1361c:	ldr	r0, [fp, #-16]
   13620:	bl	3a28 <MyGame_Example_Monster_name>
   13624:	mov	r3, r0
   13628:	cmp	r3, #0
   1362c:	bne	13650 <test_nested_buffer+0x14c>
   13630:	movw	r3, #0
   13634:	movt	r3, #0
   13638:	movw	r2, #2188	; 0x88c
   1363c:	movw	r1, #0
   13640:	movt	r1, #0
   13644:	movw	r0, #0
   13648:	movt	r0, #0
   1364c:	bl	0 <__assert_fail>
   13650:	ldr	r0, [fp, #-16]
   13654:	bl	3a28 <MyGame_Example_Monster_name>
   13658:	mov	r3, r0
   1365c:	movw	r1, #0
   13660:	movt	r1, #0
   13664:	mov	r0, r3
   13668:	bl	0 <strcmp>
   1366c:	mov	r3, r0
   13670:	cmp	r3, #0
   13674:	beq	1368c <test_nested_buffer+0x188>
   13678:	movw	r0, #0
   1367c:	movt	r0, #0
   13680:	bl	0 <puts>
   13684:	mvn	r3, #0
   13688:	b	13690 <test_nested_buffer+0x18c>
   1368c:	mov	r3, #0
   13690:	mov	r0, r3
   13694:	sub	sp, fp, #4
   13698:	ldr	fp, [sp]
   1369c:	add	sp, sp, #4
   136a0:	pop	{pc}		; (ldr pc, [sp], #4)

000136a4 <test_nested_buffer_first>:
   136a4:	str	fp, [sp, #-8]!
   136a8:	str	lr, [sp, #4]
   136ac:	add	fp, sp, #4
   136b0:	sub	sp, sp, #24
   136b4:	str	r0, [fp, #-24]	; 0xffffffe8
   136b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   136bc:	bl	0 <flatcc_builder_reset>
   136c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   136c4:	bl	b1ec <MyGame_Example_Monster_start_as_root>
   136c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   136cc:	bl	ae84 <MyGame_Example_Monster_testnestedflatbuffer_start_as_root>
   136d0:	movw	r1, #0
   136d4:	movt	r1, #0
   136d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   136dc:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   136e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   136e4:	bl	aedc <MyGame_Example_Monster_testnestedflatbuffer_end_as_root>
   136e8:	mov	r1, #10
   136ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   136f0:	bl	98c8 <MyGame_Example_Monster_hp_add>
   136f4:	movw	r1, #0
   136f8:	movt	r1, #0
   136fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13700:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   13704:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13708:	bl	b29c <MyGame_Example_Monster_end_as_root>
   1370c:	sub	r3, fp, #20
   13710:	mov	r1, r3
   13714:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13718:	bl	0 <flatcc_builder_get_direct_buffer>
   1371c:	str	r0, [fp, #-8]
   13720:	ldr	r2, [fp, #-20]	; 0xffffffec
   13724:	movw	r3, #0
   13728:	movt	r3, #0
   1372c:	ldr	r3, [r3]
   13730:	ldr	r1, [fp, #-8]
   13734:	movw	r0, #0
   13738:	movt	r0, #0
   1373c:	bl	ddf0 <hexdump>
   13740:	ldr	r0, [fp, #-8]
   13744:	bl	3148 <MyGame_Example_Monster_as_root>
   13748:	str	r0, [fp, #-12]
   1374c:	ldr	r0, [fp, #-12]
   13750:	bl	3a28 <MyGame_Example_Monster_name>
   13754:	mov	r3, r0
   13758:	movw	r1, #0
   1375c:	movt	r1, #0
   13760:	mov	r0, r3
   13764:	bl	0 <strcmp>
   13768:	mov	r3, r0
   1376c:	cmp	r3, #0
   13770:	beq	13788 <test_nested_buffer_first+0xe4>
   13774:	movw	r0, #0
   13778:	movt	r0, #0
   1377c:	bl	0 <puts>
   13780:	mvn	r3, #0
   13784:	b	13830 <test_nested_buffer_first+0x18c>
   13788:	ldr	r0, [fp, #-12]
   1378c:	bl	5630 <MyGame_Example_Monster_testnestedflatbuffer_as_root>
   13790:	str	r0, [fp, #-16]
   13794:	ldr	r0, [fp, #-12]
   13798:	bl	3380 <MyGame_Example_Monster_hp>
   1379c:	mov	r3, r0
   137a0:	cmp	r3, #10
   137a4:	beq	137bc <test_nested_buffer_first+0x118>
   137a8:	movw	r0, #0
   137ac:	movt	r0, #0
   137b0:	bl	0 <puts>
   137b4:	mvn	r3, #0
   137b8:	b	13830 <test_nested_buffer_first+0x18c>
   137bc:	ldr	r0, [fp, #-16]
   137c0:	bl	3a28 <MyGame_Example_Monster_name>
   137c4:	mov	r3, r0
   137c8:	cmp	r3, #0
   137cc:	bne	137f0 <test_nested_buffer_first+0x14c>
   137d0:	movw	r3, #0
   137d4:	movt	r3, #0
   137d8:	movw	r2, #2241	; 0x8c1
   137dc:	movw	r1, #0
   137e0:	movt	r1, #0
   137e4:	movw	r0, #0
   137e8:	movt	r0, #0
   137ec:	bl	0 <__assert_fail>
   137f0:	ldr	r0, [fp, #-16]
   137f4:	bl	3a28 <MyGame_Example_Monster_name>
   137f8:	mov	r3, r0
   137fc:	movw	r1, #0
   13800:	movt	r1, #0
   13804:	mov	r0, r3
   13808:	bl	0 <strcmp>
   1380c:	mov	r3, r0
   13810:	cmp	r3, #0
   13814:	beq	1382c <test_nested_buffer_first+0x188>
   13818:	movw	r0, #0
   1381c:	movt	r0, #0
   13820:	bl	0 <puts>
   13824:	mvn	r3, #0
   13828:	b	13830 <test_nested_buffer_first+0x18c>
   1382c:	mov	r3, #0
   13830:	mov	r0, r3
   13834:	sub	sp, fp, #4
   13838:	ldr	fp, [sp]
   1383c:	add	sp, sp, #4
   13840:	pop	{pc}		; (ldr pc, [sp], #4)

00013844 <test_nested_buffer_using_nest>:
   13844:	str	fp, [sp, #-8]!
   13848:	str	lr, [sp, #4]
   1384c:	add	fp, sp, #4
   13850:	sub	sp, sp, #1056	; 0x420
   13854:	str	r0, [fp, #-1056]	; 0xfffffbe0
   13858:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   1385c:	bl	0 <flatcc_builder_reset>
   13860:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   13864:	bl	b1ec <MyGame_Example_Monster_start_as_root>
   13868:	movw	r1, #0
   1386c:	movt	r1, #0
   13870:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   13874:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   13878:	mov	r1, #42	; 0x2a
   1387c:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   13880:	bl	99bc <MyGame_Example_Monster_mana_add>
   13884:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   13888:	bl	b29c <MyGame_Example_Monster_end_as_root>
   1388c:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   13890:	bl	0 <flatcc_builder_get_buffer_size>
   13894:	str	r0, [fp, #-8]
   13898:	sub	r3, fp, #1040	; 0x410
   1389c:	sub	r3, r3, #4
   138a0:	mov	r2, #1024	; 0x400
   138a4:	mov	r1, r3
   138a8:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   138ac:	bl	0 <flatcc_builder_copy_buffer>
   138b0:	mov	r3, r0
   138b4:	cmp	r3, #0
   138b8:	bne	138d0 <test_nested_buffer_using_nest+0x8c>
   138bc:	movw	r0, #0
   138c0:	movt	r0, #0
   138c4:	bl	0 <puts>
   138c8:	mvn	r3, #0
   138cc:	b	13a70 <test_nested_buffer_using_nest+0x22c>
   138d0:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   138d4:	bl	0 <flatcc_builder_reset>
   138d8:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   138dc:	bl	b1ec <MyGame_Example_Monster_start_as_root>
   138e0:	sub	r1, fp, #1040	; 0x410
   138e4:	sub	r1, r1, #4
   138e8:	mov	r3, #0
   138ec:	ldr	r2, [fp, #-8]
   138f0:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   138f4:	bl	af30 <MyGame_Example_Monster_testnestedflatbuffer_nest>
   138f8:	mov	r1, #10
   138fc:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   13900:	bl	98c8 <MyGame_Example_Monster_hp_add>
   13904:	movw	r1, #0
   13908:	movt	r1, #0
   1390c:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   13910:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   13914:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   13918:	bl	b29c <MyGame_Example_Monster_end_as_root>
   1391c:	sub	r3, fp, #1040	; 0x410
   13920:	sub	r3, r3, #4
   13924:	sub	r3, r3, #4
   13928:	mov	r1, r3
   1392c:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   13930:	bl	0 <flatcc_builder_get_direct_buffer>
   13934:	str	r0, [fp, #-12]
   13938:	ldr	r2, [fp, #-1048]	; 0xfffffbe8
   1393c:	movw	r3, #0
   13940:	movt	r3, #0
   13944:	ldr	r3, [r3]
   13948:	ldr	r1, [fp, #-12]
   1394c:	movw	r0, #0
   13950:	movt	r0, #0
   13954:	bl	ddf0 <hexdump>
   13958:	ldr	r0, [fp, #-12]
   1395c:	bl	3148 <MyGame_Example_Monster_as_root>
   13960:	str	r0, [fp, #-16]
   13964:	ldr	r0, [fp, #-16]
   13968:	bl	3a28 <MyGame_Example_Monster_name>
   1396c:	mov	r3, r0
   13970:	movw	r1, #0
   13974:	movt	r1, #0
   13978:	mov	r0, r3
   1397c:	bl	0 <strcmp>
   13980:	mov	r3, r0
   13984:	cmp	r3, #0
   13988:	beq	139a0 <test_nested_buffer_using_nest+0x15c>
   1398c:	movw	r0, #0
   13990:	movt	r0, #0
   13994:	bl	0 <puts>
   13998:	mvn	r3, #0
   1399c:	b	13a70 <test_nested_buffer_using_nest+0x22c>
   139a0:	ldr	r0, [fp, #-16]
   139a4:	bl	5630 <MyGame_Example_Monster_testnestedflatbuffer_as_root>
   139a8:	str	r0, [fp, #-20]	; 0xffffffec
   139ac:	ldr	r0, [fp, #-16]
   139b0:	bl	3380 <MyGame_Example_Monster_hp>
   139b4:	mov	r3, r0
   139b8:	cmp	r3, #10
   139bc:	beq	139d4 <test_nested_buffer_using_nest+0x190>
   139c0:	movw	r0, #0
   139c4:	movt	r0, #0
   139c8:	bl	0 <puts>
   139cc:	mvn	r3, #0
   139d0:	b	13a70 <test_nested_buffer_using_nest+0x22c>
   139d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   139d8:	bl	3a28 <MyGame_Example_Monster_name>
   139dc:	mov	r3, r0
   139e0:	cmp	r3, #0
   139e4:	bne	13a08 <test_nested_buffer_using_nest+0x1c4>
   139e8:	movw	r3, #0
   139ec:	movt	r3, #0
   139f0:	movw	r2, #2298	; 0x8fa
   139f4:	movw	r1, #0
   139f8:	movt	r1, #0
   139fc:	movw	r0, #0
   13a00:	movt	r0, #0
   13a04:	bl	0 <__assert_fail>
   13a08:	ldr	r0, [fp, #-20]	; 0xffffffec
   13a0c:	bl	3a28 <MyGame_Example_Monster_name>
   13a10:	mov	r3, r0
   13a14:	movw	r1, #0
   13a18:	movt	r1, #0
   13a1c:	mov	r0, r3
   13a20:	bl	0 <strcmp>
   13a24:	mov	r3, r0
   13a28:	cmp	r3, #0
   13a2c:	beq	13a44 <test_nested_buffer_using_nest+0x200>
   13a30:	movw	r0, #0
   13a34:	movt	r0, #0
   13a38:	bl	0 <puts>
   13a3c:	mvn	r3, #0
   13a40:	b	13a70 <test_nested_buffer_using_nest+0x22c>
   13a44:	ldr	r0, [fp, #-20]	; 0xffffffec
   13a48:	bl	3858 <MyGame_Example_Monster_mana>
   13a4c:	mov	r3, r0
   13a50:	cmp	r3, #42	; 0x2a
   13a54:	beq	13a6c <test_nested_buffer_using_nest+0x228>
   13a58:	movw	r0, #0
   13a5c:	movt	r0, #0
   13a60:	bl	0 <puts>
   13a64:	mvn	r3, #0
   13a68:	b	13a70 <test_nested_buffer_using_nest+0x22c>
   13a6c:	mov	r3, #0
   13a70:	mov	r0, r3
   13a74:	sub	sp, fp, #4
   13a78:	ldr	fp, [sp]
   13a7c:	add	sp, sp, #4
   13a80:	pop	{pc}		; (ldr pc, [sp], #4)

00013a84 <verify_include>:
   13a84:	push	{fp}		; (str fp, [sp, #-4]!)
   13a88:	add	fp, sp, #0
   13a8c:	sub	sp, sp, #12
   13a90:	str	r0, [fp, #-8]
   13a94:	mov	r3, #0
   13a98:	mov	r0, r3
   13a9c:	add	sp, fp, #0
   13aa0:	pop	{fp}		; (ldr fp, [sp], #4)
   13aa4:	bx	lr

00013aa8 <test_struct_buffer>:
   13aa8:	str	fp, [sp, #-8]!
   13aac:	str	lr, [sp, #4]
   13ab0:	add	fp, sp, #4
   13ab4:	sub	sp, sp, #120	; 0x78
   13ab8:	str	r0, [fp, #-120]	; 0xffffff88
   13abc:	ldr	r0, [fp, #-120]	; 0xffffff88
   13ac0:	bl	0 <flatcc_builder_reset>
   13ac4:	mvn	r3, #16
   13ac8:	movw	r2, #2730	; 0xaaa
   13acc:	mov	r1, #8
   13ad0:	vldr	d2, [pc, #624]	; 13d48 <test_struct_buffer+0x2a0>
   13ad4:	vldr	s2, [pc, #628]	; 13d50 <test_struct_buffer+0x2a8>
   13ad8:	vldr	s1, [pc, #628]	; 13d54 <test_struct_buffer+0x2ac>
   13adc:	vldr	s0, [pc, #628]	; 13d58 <test_struct_buffer+0x2b0>
   13ae0:	ldr	r0, [fp, #-120]	; 0xffffff88
   13ae4:	bl	83e0 <MyGame_Example_Vec3_create_as_root>
   13ae8:	ldr	r0, [fp, #-120]	; 0xffffff88
   13aec:	bl	0 <flatcc_builder_get_buffer_size>
   13af0:	str	r0, [fp, #-8]
   13af4:	ldr	r3, [fp, #-8]
   13af8:	cmp	r3, #48	; 0x30
   13afc:	beq	13b20 <test_struct_buffer+0x78>
   13b00:	movw	r3, #0
   13b04:	movt	r3, #0
   13b08:	movw	r2, #2339	; 0x923
   13b0c:	movw	r1, #0
   13b10:	movt	r1, #0
   13b14:	movw	r0, #0
   13b18:	movt	r0, #0
   13b1c:	bl	0 <__assert_fail>
   13b20:	ldr	r3, [fp, #-8]
   13b24:	mov	r1, r3
   13b28:	movw	r0, #0
   13b2c:	movt	r0, #0
   13b30:	bl	0 <printf>
   13b34:	ldr	r0, [fp, #-120]	; 0xffffff88
   13b38:	bl	0 <flatcc_builder_get_emit_context>
   13b3c:	mov	r3, r0
   13b40:	mov	r0, r3
   13b44:	bl	7418 <flatcc_emitter_get_buffer_size>
   13b48:	mov	r2, r0
   13b4c:	ldr	r3, [fp, #-8]
   13b50:	cmp	r3, r2
   13b54:	beq	13b78 <test_struct_buffer+0xd0>
   13b58:	movw	r3, #0
   13b5c:	movt	r3, #0
   13b60:	movw	r2, #2341	; 0x925
   13b64:	movw	r1, #0
   13b68:	movt	r1, #0
   13b6c:	movw	r0, #0
   13b70:	movt	r0, #0
   13b74:	bl	0 <__assert_fail>
   13b78:	sub	r3, fp, #116	; 0x74
   13b7c:	mov	r2, #100	; 0x64
   13b80:	mov	r1, r3
   13b84:	ldr	r0, [fp, #-120]	; 0xffffff88
   13b88:	bl	0 <flatcc_builder_copy_buffer>
   13b8c:	mov	r3, r0
   13b90:	cmp	r3, #0
   13b94:	bne	13bac <test_struct_buffer+0x104>
   13b98:	movw	r0, #0
   13b9c:	movt	r0, #0
   13ba0:	bl	0 <puts>
   13ba4:	mvn	r3, #0
   13ba8:	b	13d34 <test_struct_buffer+0x28c>
   13bac:	movw	r3, #0
   13bb0:	movt	r3, #0
   13bb4:	ldr	r3, [r3]
   13bb8:	sub	r1, fp, #116	; 0x74
   13bbc:	ldr	r2, [fp, #-8]
   13bc0:	movw	r0, #0
   13bc4:	movt	r0, #0
   13bc8:	bl	ddf0 <hexdump>
   13bcc:	sub	r3, fp, #116	; 0x74
   13bd0:	movw	r1, #0
   13bd4:	movt	r1, #0
   13bd8:	mov	r0, r3
   13bdc:	bl	1c44 <flatbuffers_has_identifier>
   13be0:	mov	r3, r0
   13be4:	cmp	r3, #0
   13be8:	bne	13c00 <test_struct_buffer+0x158>
   13bec:	movw	r0, #0
   13bf0:	movt	r0, #0
   13bf4:	bl	0 <puts>
   13bf8:	mvn	r3, #0
   13bfc:	b	13d34 <test_struct_buffer+0x28c>
   13c00:	sub	r3, fp, #116	; 0x74
   13c04:	movw	r1, #0
   13c08:	movt	r1, #0
   13c0c:	mov	r0, r3
   13c10:	bl	1c44 <flatbuffers_has_identifier>
   13c14:	mov	r3, r0
   13c18:	cmp	r3, #0
   13c1c:	beq	13c34 <test_struct_buffer+0x18c>
   13c20:	movw	r0, #0
   13c24:	movt	r0, #0
   13c28:	bl	0 <puts>
   13c2c:	mvn	r3, #0
   13c30:	b	13d34 <test_struct_buffer+0x28c>
   13c34:	sub	r3, fp, #116	; 0x74
   13c38:	movw	r1, #0
   13c3c:	movt	r1, #0
   13c40:	mov	r0, r3
   13c44:	bl	1c44 <flatbuffers_has_identifier>
   13c48:	mov	r3, r0
   13c4c:	cmp	r3, #0
   13c50:	bne	13c68 <test_struct_buffer+0x1c0>
   13c54:	movw	r0, #0
   13c58:	movt	r0, #0
   13c5c:	bl	0 <puts>
   13c60:	mvn	r3, #0
   13c64:	b	13d34 <test_struct_buffer+0x28c>
   13c68:	sub	r3, fp, #116	; 0x74
   13c6c:	mov	r0, r3
   13c70:	bl	21f8 <MyGame_Example_Vec3_as_root>
   13c74:	str	r0, [fp, #-12]
   13c78:	ldr	r3, [fp, #-12]
   13c7c:	str	r3, [fp, #-16]
   13c80:	ldr	r0, [fp, #-16]
   13c84:	bl	825c <MyGame_Example_Vec3_from_pe>
   13c88:	ldr	r3, [fp, #-16]
   13c8c:	vldr	s15, [r3]
   13c90:	vldr	s14, [pc, #192]	; 13d58 <test_struct_buffer+0x2b0>
   13c94:	vcmp.f32	s15, s14
   13c98:	vmrs	APSR_nzcv, fpscr
   13c9c:	bne	13d1c <test_struct_buffer+0x274>
   13ca0:	ldr	r3, [fp, #-16]
   13ca4:	vldr	s15, [r3, #4]
   13ca8:	vldr	s14, [pc, #164]	; 13d54 <test_struct_buffer+0x2ac>
   13cac:	vcmp.f32	s15, s14
   13cb0:	vmrs	APSR_nzcv, fpscr
   13cb4:	bne	13d1c <test_struct_buffer+0x274>
   13cb8:	ldr	r3, [fp, #-16]
   13cbc:	vldr	s15, [r3, #8]
   13cc0:	vldr	s14, [pc, #136]	; 13d50 <test_struct_buffer+0x2a8>
   13cc4:	vcmp.f32	s15, s14
   13cc8:	vmrs	APSR_nzcv, fpscr
   13ccc:	bne	13d1c <test_struct_buffer+0x274>
   13cd0:	ldr	r3, [fp, #-16]
   13cd4:	vldr	d7, [r3, #16]
   13cd8:	vldr	d6, [pc, #104]	; 13d48 <test_struct_buffer+0x2a0>
   13cdc:	vcmp.f64	d7, d6
   13ce0:	vmrs	APSR_nzcv, fpscr
   13ce4:	bne	13d1c <test_struct_buffer+0x274>
   13ce8:	ldr	r3, [fp, #-16]
   13cec:	ldrsb	r3, [r3, #24]
   13cf0:	cmp	r3, #8
   13cf4:	bne	13d1c <test_struct_buffer+0x274>
   13cf8:	ldr	r3, [fp, #-16]
   13cfc:	ldrsh	r3, [r3, #26]
   13d00:	movw	r2, #2730	; 0xaaa
   13d04:	cmp	r3, r2
   13d08:	bne	13d1c <test_struct_buffer+0x274>
   13d0c:	ldr	r3, [fp, #-16]
   13d10:	ldrsb	r3, [r3, #28]
   13d14:	cmn	r3, #17
   13d18:	beq	13d30 <test_struct_buffer+0x288>
   13d1c:	movw	r0, #0
   13d20:	movt	r0, #0
   13d24:	bl	0 <puts>
   13d28:	mvn	r3, #0
   13d2c:	b	13d34 <test_struct_buffer+0x28c>
   13d30:	mov	r3, #0
   13d34:	mov	r0, r3
   13d38:	sub	sp, fp, #4
   13d3c:	ldr	fp, [sp]
   13d40:	add	sp, sp, #4
   13d44:	pop	{pc}		; (ldr pc, [sp], #4)
   13d48:	.word	0xcccccccd
   13d4c:	.word	0x4010cccc
   13d50:	.word	0x40400000
   13d54:	.word	0x40000000
   13d58:	.word	0x3f800000

00013d5c <test_typed_struct_buffer>:
   13d5c:	str	fp, [sp, #-8]!
   13d60:	str	lr, [sp, #4]
   13d64:	add	fp, sp, #4
   13d68:	sub	sp, sp, #120	; 0x78
   13d6c:	str	r0, [fp, #-120]	; 0xffffff88
   13d70:	ldr	r0, [fp, #-120]	; 0xffffff88
   13d74:	bl	0 <flatcc_builder_reset>
   13d78:	mvn	r3, #16
   13d7c:	movw	r2, #2730	; 0xaaa
   13d80:	mov	r1, #8
   13d84:	vldr	d2, [pc, #812]	; 140b8 <test_typed_struct_buffer+0x35c>
   13d88:	vldr	s2, [pc, #816]	; 140c0 <test_typed_struct_buffer+0x364>
   13d8c:	vldr	s1, [pc, #816]	; 140c4 <test_typed_struct_buffer+0x368>
   13d90:	vldr	s0, [pc, #816]	; 140c8 <test_typed_struct_buffer+0x36c>
   13d94:	ldr	r0, [fp, #-120]	; 0xffffff88
   13d98:	bl	8490 <MyGame_Example_Vec3_create_as_typed_root>
   13d9c:	ldr	r0, [fp, #-120]	; 0xffffff88
   13da0:	bl	0 <flatcc_builder_get_buffer_size>
   13da4:	str	r0, [fp, #-8]
   13da8:	ldr	r3, [fp, #-8]
   13dac:	cmp	r3, #48	; 0x30
   13db0:	beq	13dd4 <test_typed_struct_buffer+0x78>
   13db4:	movw	r3, #0
   13db8:	movt	r3, #0
   13dbc:	movw	r2, #2388	; 0x954
   13dc0:	movw	r1, #0
   13dc4:	movt	r1, #0
   13dc8:	movw	r0, #0
   13dcc:	movt	r0, #0
   13dd0:	bl	0 <__assert_fail>
   13dd4:	ldr	r3, [fp, #-8]
   13dd8:	mov	r1, r3
   13ddc:	movw	r0, #0
   13de0:	movt	r0, #0
   13de4:	bl	0 <printf>
   13de8:	ldr	r0, [fp, #-120]	; 0xffffff88
   13dec:	bl	0 <flatcc_builder_get_emit_context>
   13df0:	mov	r3, r0
   13df4:	mov	r0, r3
   13df8:	bl	7418 <flatcc_emitter_get_buffer_size>
   13dfc:	mov	r2, r0
   13e00:	ldr	r3, [fp, #-8]
   13e04:	cmp	r3, r2
   13e08:	beq	13e2c <test_typed_struct_buffer+0xd0>
   13e0c:	movw	r3, #0
   13e10:	movt	r3, #0
   13e14:	movw	r2, #2390	; 0x956
   13e18:	movw	r1, #0
   13e1c:	movt	r1, #0
   13e20:	movw	r0, #0
   13e24:	movt	r0, #0
   13e28:	bl	0 <__assert_fail>
   13e2c:	sub	r3, fp, #116	; 0x74
   13e30:	mov	r2, #100	; 0x64
   13e34:	mov	r1, r3
   13e38:	ldr	r0, [fp, #-120]	; 0xffffff88
   13e3c:	bl	0 <flatcc_builder_copy_buffer>
   13e40:	mov	r3, r0
   13e44:	cmp	r3, #0
   13e48:	bne	13e60 <test_typed_struct_buffer+0x104>
   13e4c:	movw	r0, #0
   13e50:	movt	r0, #0
   13e54:	bl	0 <puts>
   13e58:	mvn	r3, #0
   13e5c:	b	140a4 <test_typed_struct_buffer+0x348>
   13e60:	movw	r3, #0
   13e64:	movt	r3, #0
   13e68:	ldr	r3, [r3]
   13e6c:	sub	r1, fp, #116	; 0x74
   13e70:	ldr	r2, [fp, #-8]
   13e74:	movw	r0, #0
   13e78:	movt	r0, #0
   13e7c:	bl	ddf0 <hexdump>
   13e80:	sub	r3, fp, #116	; 0x74
   13e84:	movw	r1, #0
   13e88:	movt	r1, #0
   13e8c:	mov	r0, r3
   13e90:	bl	1c44 <flatbuffers_has_identifier>
   13e94:	mov	r3, r0
   13e98:	cmp	r3, #0
   13e9c:	bne	13eb4 <test_typed_struct_buffer+0x158>
   13ea0:	movw	r0, #0
   13ea4:	movt	r0, #0
   13ea8:	bl	0 <puts>
   13eac:	mvn	r3, #0
   13eb0:	b	140a4 <test_typed_struct_buffer+0x348>
   13eb4:	sub	r3, fp, #116	; 0x74
   13eb8:	movw	r1, #0
   13ebc:	movt	r1, #0
   13ec0:	mov	r0, r3
   13ec4:	bl	1c44 <flatbuffers_has_identifier>
   13ec8:	mov	r3, r0
   13ecc:	cmp	r3, #0
   13ed0:	beq	13ee8 <test_typed_struct_buffer+0x18c>
   13ed4:	movw	r0, #0
   13ed8:	movt	r0, #0
   13edc:	bl	0 <puts>
   13ee0:	mvn	r3, #0
   13ee4:	b	140a4 <test_typed_struct_buffer+0x348>
   13ee8:	sub	r3, fp, #116	; 0x74
   13eec:	movw	r1, #0
   13ef0:	movt	r1, #0
   13ef4:	mov	r0, r3
   13ef8:	bl	1c44 <flatbuffers_has_identifier>
   13efc:	mov	r3, r0
   13f00:	cmp	r3, #0
   13f04:	bne	13f1c <test_typed_struct_buffer+0x1c0>
   13f08:	movw	r0, #0
   13f0c:	movt	r0, #0
   13f10:	bl	0 <puts>
   13f14:	mvn	r3, #0
   13f18:	b	140a4 <test_typed_struct_buffer+0x348>
   13f1c:	sub	r3, fp, #116	; 0x74
   13f20:	movw	r1, #16082	; 0x3ed2
   13f24:	movt	r1, #43253	; 0xa8f5
   13f28:	mov	r0, r3
   13f2c:	bl	218c <MyGame_Example_Vec3_as_root_with_type_hash>
   13f30:	mov	r3, r0
   13f34:	cmp	r3, #0
   13f38:	bne	13f50 <test_typed_struct_buffer+0x1f4>
   13f3c:	movw	r0, #0
   13f40:	movt	r0, #0
   13f44:	bl	0 <puts>
   13f48:	mvn	r3, #0
   13f4c:	b	140a4 <test_typed_struct_buffer+0x348>
   13f50:	sub	r3, fp, #116	; 0x74
   13f54:	movw	r2, #16082	; 0x3ed2
   13f58:	movt	r2, #43253	; 0xa8f5
   13f5c:	ldr	r1, [fp, #-8]
   13f60:	mov	r0, r3
   13f64:	bl	c7f0 <MyGame_Example_Vec3_verify_as_root_with_type_hash>
   13f68:	mov	r3, r0
   13f6c:	cmp	r3, #0
   13f70:	beq	13f88 <test_typed_struct_buffer+0x22c>
   13f74:	movw	r0, #0
   13f78:	movt	r0, #0
   13f7c:	bl	0 <puts>
   13f80:	mvn	r3, #0
   13f84:	b	140a4 <test_typed_struct_buffer+0x348>
   13f88:	sub	r3, fp, #116	; 0x74
   13f8c:	mov	r0, r3
   13f90:	bl	226c <MyGame_Example_Vec3_as_typed_root>
   13f94:	str	r0, [fp, #-12]
   13f98:	ldr	r3, [fp, #-12]
   13f9c:	cmp	r3, #0
   13fa0:	bne	13fb8 <test_typed_struct_buffer+0x25c>
   13fa4:	movw	r0, #0
   13fa8:	movt	r0, #0
   13fac:	bl	0 <puts>
   13fb0:	mvn	r3, #0
   13fb4:	b	140a4 <test_typed_struct_buffer+0x348>
   13fb8:	sub	r3, fp, #116	; 0x74
   13fbc:	ldr	r1, [fp, #-8]
   13fc0:	mov	r0, r3
   13fc4:	bl	c7a0 <MyGame_Example_Vec3_verify_as_typed_root>
   13fc8:	mov	r3, r0
   13fcc:	cmp	r3, #0
   13fd0:	beq	13fe8 <test_typed_struct_buffer+0x28c>
   13fd4:	movw	r0, #0
   13fd8:	movt	r0, #0
   13fdc:	bl	0 <puts>
   13fe0:	mvn	r3, #0
   13fe4:	b	140a4 <test_typed_struct_buffer+0x348>
   13fe8:	ldr	r3, [fp, #-12]
   13fec:	str	r3, [fp, #-16]
   13ff0:	ldr	r0, [fp, #-16]
   13ff4:	bl	825c <MyGame_Example_Vec3_from_pe>
   13ff8:	ldr	r3, [fp, #-16]
   13ffc:	vldr	s15, [r3]
   14000:	vldr	s14, [pc, #192]	; 140c8 <test_typed_struct_buffer+0x36c>
   14004:	vcmp.f32	s15, s14
   14008:	vmrs	APSR_nzcv, fpscr
   1400c:	bne	1408c <test_typed_struct_buffer+0x330>
   14010:	ldr	r3, [fp, #-16]
   14014:	vldr	s15, [r3, #4]
   14018:	vldr	s14, [pc, #164]	; 140c4 <test_typed_struct_buffer+0x368>
   1401c:	vcmp.f32	s15, s14
   14020:	vmrs	APSR_nzcv, fpscr
   14024:	bne	1408c <test_typed_struct_buffer+0x330>
   14028:	ldr	r3, [fp, #-16]
   1402c:	vldr	s15, [r3, #8]
   14030:	vldr	s14, [pc, #136]	; 140c0 <test_typed_struct_buffer+0x364>
   14034:	vcmp.f32	s15, s14
   14038:	vmrs	APSR_nzcv, fpscr
   1403c:	bne	1408c <test_typed_struct_buffer+0x330>
   14040:	ldr	r3, [fp, #-16]
   14044:	vldr	d7, [r3, #16]
   14048:	vldr	d6, [pc, #104]	; 140b8 <test_typed_struct_buffer+0x35c>
   1404c:	vcmp.f64	d7, d6
   14050:	vmrs	APSR_nzcv, fpscr
   14054:	bne	1408c <test_typed_struct_buffer+0x330>
   14058:	ldr	r3, [fp, #-16]
   1405c:	ldrsb	r3, [r3, #24]
   14060:	cmp	r3, #8
   14064:	bne	1408c <test_typed_struct_buffer+0x330>
   14068:	ldr	r3, [fp, #-16]
   1406c:	ldrsh	r3, [r3, #26]
   14070:	movw	r2, #2730	; 0xaaa
   14074:	cmp	r3, r2
   14078:	bne	1408c <test_typed_struct_buffer+0x330>
   1407c:	ldr	r3, [fp, #-16]
   14080:	ldrsb	r3, [r3, #28]
   14084:	cmn	r3, #17
   14088:	beq	140a0 <test_typed_struct_buffer+0x344>
   1408c:	movw	r0, #0
   14090:	movt	r0, #0
   14094:	bl	0 <puts>
   14098:	mvn	r3, #0
   1409c:	b	140a4 <test_typed_struct_buffer+0x348>
   140a0:	mov	r3, #0
   140a4:	mov	r0, r3
   140a8:	sub	sp, fp, #4
   140ac:	ldr	fp, [sp]
   140b0:	add	sp, sp, #4
   140b4:	pop	{pc}		; (ldr pc, [sp], #4)
   140b8:	.word	0xcccccccd
   140bc:	.word	0x4010cccc
   140c0:	.word	0x40400000
   140c4:	.word	0x40000000
   140c8:	.word	0x3f800000

000140cc <gen_monster_benchmark>:
   140cc:	str	fp, [sp, #-8]!
   140d0:	str	lr, [sp, #4]
   140d4:	add	fp, sp, #4
   140d8:	sub	sp, sp, #32
   140dc:	str	r0, [fp, #-32]	; 0xffffffe0
   140e0:	movw	r3, #0
   140e4:	movt	r3, #0
   140e8:	sub	r1, fp, #24
   140ec:	mov	r0, r3
   140f0:	ldrd	r2, [r0]
   140f4:	strd	r2, [r1]
   140f8:	ldrh	r3, [r0, #8]
   140fc:	strh	r3, [r1, #8]
   14100:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14104:	bl	0 <flatcc_builder_reset>
   14108:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1410c:	bl	b1ec <MyGame_Example_Monster_start_as_root>
   14110:	mov	r1, #80	; 0x50
   14114:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14118:	bl	98c8 <MyGame_Example_Monster_hp_add>
   1411c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14120:	bl	9804 <MyGame_Example_Monster_pos_start>
   14124:	str	r0, [fp, #-8]
   14128:	ldr	r3, [fp, #-8]
   1412c:	mov	r2, #1065353216	; 0x3f800000
   14130:	str	r2, [r3]
   14134:	ldr	r3, [fp, #-8]
   14138:	mov	r2, #1073741824	; 0x40000000
   1413c:	str	r2, [r3, #4]
   14140:	ldr	r3, [fp, #-8]
   14144:	movw	r2, #52429	; 0xcccd
   14148:	movt	r2, #49228	; 0xc04c
   1414c:	str	r2, [r3, #8]
   14150:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14154:	bl	9844 <MyGame_Example_Monster_pos_end>
   14158:	movw	r1, #0
   1415c:	movt	r1, #0
   14160:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14164:	bl	9b94 <MyGame_Example_Monster_name_create_str>
   14168:	sub	r3, fp, #24
   1416c:	mov	r2, #10
   14170:	mov	r1, r3
   14174:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14178:	bl	9fe0 <MyGame_Example_Monster_inventory_create>
   1417c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14180:	bl	ab38 <MyGame_Example_Monster_test4_start>
   14184:	mov	r1, #1
   14188:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1418c:	bl	ac58 <MyGame_Example_Monster_test4_extend>
   14190:	str	r0, [fp, #-12]
   14194:	ldr	r3, [fp, #-12]
   14198:	mov	r2, #16
   1419c:	strh	r2, [r3]
   141a0:	ldr	r3, [fp, #-12]
   141a4:	mov	r2, #32
   141a8:	strb	r2, [r3, #2]
   141ac:	mov	r1, #2
   141b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   141b4:	bl	ac58 <MyGame_Example_Monster_test4_extend>
   141b8:	str	r0, [fp, #-12]
   141bc:	ldr	r3, [fp, #-12]
   141c0:	mov	r2, #48	; 0x30
   141c4:	strh	r2, [r3]
   141c8:	ldr	r3, [fp, #-12]
   141cc:	mov	r2, #64	; 0x40
   141d0:	strb	r2, [r3, #2]
   141d4:	ldr	r3, [fp, #-12]
   141d8:	add	r3, r3, #4
   141dc:	mov	r2, #80	; 0x50
   141e0:	strh	r2, [r3]
   141e4:	ldr	r3, [fp, #-12]
   141e8:	add	r3, r3, #4
   141ec:	mov	r2, #96	; 0x60
   141f0:	strb	r2, [r3, #2]
   141f4:	mvn	r2, #127	; 0x7f
   141f8:	mov	r1, #112	; 0x70
   141fc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14200:	bl	ada4 <MyGame_Example_Monster_test4_push_create>
   14204:	movw	r3, #401	; 0x191
   14208:	strh	r3, [fp, #-28]	; 0xffffffe4
   1420c:	mvn	r3, #110	; 0x6e
   14210:	strb	r3, [fp, #-26]	; 0xffffffe6
   14214:	sub	r3, fp, #28
   14218:	mov	r1, r3
   1421c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14220:	bl	ad38 <MyGame_Example_Monster_test4_push>
   14224:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14228:	bl	ab6c <MyGame_Example_Monster_test4_end>
   1422c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14230:	bl	b29c <MyGame_Example_Monster_end_as_root>
   14234:	mov	r3, #0
   14238:	mov	r0, r3
   1423c:	sub	sp, fp, #4
   14240:	ldr	fp, [sp]
   14244:	add	sp, sp, #4
   14248:	pop	{pc}		; (ldr pc, [sp], #4)

0001424c <time_monster>:
   1424c:	str	fp, [sp, #-8]!
   14250:	str	lr, [sp, #4]
   14254:	add	fp, sp, #4
   14258:	sub	sp, sp, #40	; 0x28
   1425c:	str	r0, [fp, #-40]	; 0xffffffd8
   14260:	movw	r3, #16960	; 0x4240
   14264:	movt	r3, #15
   14268:	str	r3, [fp, #-12]
   1426c:	movw	r0, #0
   14270:	movt	r0, #0
   14274:	bl	0 <puts>
   14278:	bl	dfdc <elapsed_realtime>
   1427c:	vstr	d0, [fp, #-20]	; 0xffffffec
   14280:	mov	r3, #0
   14284:	str	r3, [fp, #-8]
   14288:	b	142a0 <time_monster+0x54>
   1428c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14290:	bl	140cc <gen_monster_benchmark>
   14294:	ldr	r3, [fp, #-8]
   14298:	add	r3, r3, #1
   1429c:	str	r3, [fp, #-8]
   142a0:	ldr	r2, [fp, #-8]
   142a4:	ldr	r3, [fp, #-12]
   142a8:	cmp	r2, r3
   142ac:	blt	1428c <time_monster+0x40>
   142b0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   142b4:	bl	0 <flatcc_builder_get_buffer_size>
   142b8:	str	r0, [fp, #-24]	; 0xffffffe8
   142bc:	bl	dfdc <elapsed_realtime>
   142c0:	vstr	d0, [fp, #-36]	; 0xffffffdc
   142c4:	movw	r3, #0
   142c8:	movt	r3, #0
   142cc:	ldr	r2, [fp, #-12]
   142d0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   142d4:	vldr	d1, [fp, #-36]	; 0xffffffdc
   142d8:	vldr	d0, [fp, #-20]	; 0xffffffec
   142dc:	movw	r0, #0
   142e0:	movt	r0, #0
   142e4:	bl	e088 <show_benchmark>
   142e8:	mov	r3, #0
   142ec:	mov	r0, r3
   142f0:	sub	sp, fp, #4
   142f4:	ldr	fp, [sp]
   142f8:	add	sp, sp, #4
   142fc:	pop	{pc}		; (ldr pc, [sp], #4)

00014300 <gen_struct_buffer_benchmark>:
   14300:	str	fp, [sp, #-8]!
   14304:	str	lr, [sp, #4]
   14308:	add	fp, sp, #4
   1430c:	sub	sp, sp, #24
   14310:	str	r0, [fp, #-24]	; 0xffffffe8
   14314:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14318:	bl	0 <flatcc_builder_reset>
   1431c:	mvn	r3, #16
   14320:	movw	r2, #2730	; 0xaaa
   14324:	mov	r1, #8
   14328:	vldr	d2, [pc, #264]	; 14438 <gen_struct_buffer_benchmark+0x138>
   1432c:	vldr	s2, [pc, #268]	; 14440 <gen_struct_buffer_benchmark+0x140>
   14330:	vldr	s1, [pc, #268]	; 14444 <gen_struct_buffer_benchmark+0x144>
   14334:	vldr	s0, [pc, #268]	; 14448 <gen_struct_buffer_benchmark+0x148>
   14338:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1433c:	bl	83e0 <MyGame_Example_Vec3_create_as_root>
   14340:	mov	r1, #0
   14344:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14348:	bl	0 <flatcc_builder_get_direct_buffer>
   1434c:	str	r0, [fp, #-8]
   14350:	ldr	r3, [fp, #-8]
   14354:	cmp	r3, #0
   14358:	bne	14364 <gen_struct_buffer_benchmark+0x64>
   1435c:	mvn	r3, #0
   14360:	b	14424 <gen_struct_buffer_benchmark+0x124>
   14364:	mov	r1, #0
   14368:	ldr	r0, [fp, #-8]
   1436c:	bl	2120 <MyGame_Example_Vec3_as_root_with_identifier>
   14370:	str	r0, [fp, #-12]
   14374:	ldr	r3, [fp, #-12]
   14378:	str	r3, [fp, #-16]
   1437c:	ldr	r0, [fp, #-16]
   14380:	bl	825c <MyGame_Example_Vec3_from_pe>
   14384:	ldr	r3, [fp, #-16]
   14388:	vldr	s15, [r3]
   1438c:	vldr	s14, [pc, #180]	; 14448 <gen_struct_buffer_benchmark+0x148>
   14390:	vcmp.f32	s15, s14
   14394:	vmrs	APSR_nzcv, fpscr
   14398:	bne	14418 <gen_struct_buffer_benchmark+0x118>
   1439c:	ldr	r3, [fp, #-16]
   143a0:	vldr	s15, [r3, #4]
   143a4:	vldr	s14, [pc, #152]	; 14444 <gen_struct_buffer_benchmark+0x144>
   143a8:	vcmp.f32	s15, s14
   143ac:	vmrs	APSR_nzcv, fpscr
   143b0:	bne	14418 <gen_struct_buffer_benchmark+0x118>
   143b4:	ldr	r3, [fp, #-16]
   143b8:	vldr	s15, [r3, #8]
   143bc:	vldr	s14, [pc, #124]	; 14440 <gen_struct_buffer_benchmark+0x140>
   143c0:	vcmp.f32	s15, s14
   143c4:	vmrs	APSR_nzcv, fpscr
   143c8:	bne	14418 <gen_struct_buffer_benchmark+0x118>
   143cc:	ldr	r3, [fp, #-16]
   143d0:	vldr	d7, [r3, #16]
   143d4:	vldr	d6, [pc, #92]	; 14438 <gen_struct_buffer_benchmark+0x138>
   143d8:	vcmp.f64	d7, d6
   143dc:	vmrs	APSR_nzcv, fpscr
   143e0:	bne	14418 <gen_struct_buffer_benchmark+0x118>
   143e4:	ldr	r3, [fp, #-16]
   143e8:	ldrsb	r3, [r3, #24]
   143ec:	cmp	r3, #8
   143f0:	bne	14418 <gen_struct_buffer_benchmark+0x118>
   143f4:	ldr	r3, [fp, #-16]
   143f8:	ldrsh	r3, [r3, #26]
   143fc:	movw	r2, #2730	; 0xaaa
   14400:	cmp	r3, r2
   14404:	bne	14418 <gen_struct_buffer_benchmark+0x118>
   14408:	ldr	r3, [fp, #-16]
   1440c:	ldrsb	r3, [r3, #28]
   14410:	cmn	r3, #17
   14414:	beq	14420 <gen_struct_buffer_benchmark+0x120>
   14418:	mvn	r3, #0
   1441c:	b	14424 <gen_struct_buffer_benchmark+0x124>
   14420:	mov	r3, #0
   14424:	mov	r0, r3
   14428:	sub	sp, fp, #4
   1442c:	ldr	fp, [sp]
   14430:	add	sp, sp, #4
   14434:	pop	{pc}		; (ldr pc, [sp], #4)
   14438:	.word	0xcccccccd
   1443c:	.word	0x4010cccc
   14440:	.word	0x40400000
   14444:	.word	0x40000000
   14448:	.word	0x3f800000

0001444c <time_struct_buffer>:
   1444c:	str	fp, [sp, #-8]!
   14450:	str	lr, [sp, #4]
   14454:	add	fp, sp, #4
   14458:	sub	sp, sp, #48	; 0x30
   1445c:	str	r0, [fp, #-48]	; 0xffffffd0
   14460:	movw	r3, #16960	; 0x4240
   14464:	movt	r3, #15
   14468:	str	r3, [fp, #-16]
   1446c:	mov	r3, #0
   14470:	str	r3, [fp, #-12]
   14474:	movw	r0, #0
   14478:	movt	r0, #0
   1447c:	bl	0 <puts>
   14480:	bl	dfdc <elapsed_realtime>
   14484:	vstr	d0, [fp, #-28]	; 0xffffffe4
   14488:	mov	r3, #0
   1448c:	str	r3, [fp, #-8]
   14490:	b	144b8 <time_struct_buffer+0x6c>
   14494:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14498:	bl	14300 <gen_struct_buffer_benchmark>
   1449c:	mov	r2, r0
   144a0:	ldr	r3, [fp, #-12]
   144a4:	orr	r3, r3, r2
   144a8:	str	r3, [fp, #-12]
   144ac:	ldr	r3, [fp, #-8]
   144b0:	add	r3, r3, #1
   144b4:	str	r3, [fp, #-8]
   144b8:	ldr	r2, [fp, #-8]
   144bc:	ldr	r3, [fp, #-16]
   144c0:	cmp	r2, r3
   144c4:	blt	14494 <time_struct_buffer+0x48>
   144c8:	bl	dfdc <elapsed_realtime>
   144cc:	vstr	d0, [fp, #-36]	; 0xffffffdc
   144d0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   144d4:	bl	0 <flatcc_builder_get_buffer_size>
   144d8:	str	r0, [fp, #-40]	; 0xffffffd8
   144dc:	ldr	r3, [fp, #-12]
   144e0:	cmp	r3, #0
   144e4:	beq	144f4 <time_struct_buffer+0xa8>
   144e8:	movw	r0, #0
   144ec:	movt	r0, #0
   144f0:	bl	0 <puts>
   144f4:	movw	r3, #0
   144f8:	movt	r3, #0
   144fc:	ldr	r2, [fp, #-16]
   14500:	ldr	r1, [fp, #-40]	; 0xffffffd8
   14504:	vldr	d1, [fp, #-36]	; 0xffffffdc
   14508:	vldr	d0, [fp, #-28]	; 0xffffffe4
   1450c:	movw	r0, #0
   14510:	movt	r0, #0
   14514:	bl	e088 <show_benchmark>
   14518:	ldr	r3, [fp, #-12]
   1451c:	mov	r0, r3
   14520:	sub	sp, fp, #4
   14524:	ldr	fp, [sp]
   14528:	add	sp, sp, #4
   1452c:	pop	{pc}		; (ldr pc, [sp], #4)

00014530 <main>:
   14530:	str	fp, [sp, #-8]!
   14534:	str	lr, [sp, #4]
   14538:	add	fp, sp, #4
   1453c:	sub	sp, sp, #248	; 0xf8
   14540:	str	r0, [fp, #-248]	; 0xffffff08
   14544:	str	r1, [fp, #-252]	; 0xffffff04
   14548:	sub	r3, fp, #240	; 0xf0
   1454c:	str	r3, [fp, #-8]
   14550:	ldr	r0, [fp, #-8]
   14554:	bl	0 <flatcc_builder_init>
   14558:	movw	r0, #0
   1455c:	movt	r0, #0
   14560:	bl	0 <puts>
   14564:	ldr	r0, [fp, #-8]
   14568:	bl	ec88 <test_table_with_emptystruct>
   1456c:	mov	r3, r0
   14570:	cmp	r3, #0
   14574:	beq	1458c <main+0x5c>
   14578:	movw	r0, #0
   1457c:	movt	r0, #0
   14580:	bl	0 <puts>
   14584:	mvn	r3, #0
   14588:	b	14908 <main+0x3d8>
   1458c:	ldr	r0, [fp, #-8]
   14590:	bl	e470 <test_enums>
   14594:	mov	r3, r0
   14598:	cmp	r3, #0
   1459c:	beq	145b4 <main+0x84>
   145a0:	movw	r0, #0
   145a4:	movt	r0, #0
   145a8:	bl	0 <puts>
   145ac:	mvn	r3, #0
   145b0:	b	14908 <main+0x3d8>
   145b4:	ldr	r0, [fp, #-8]
   145b8:	bl	e754 <test_empty_monster>
   145bc:	mov	r3, r0
   145c0:	cmp	r3, #0
   145c4:	beq	145dc <main+0xac>
   145c8:	movw	r0, #0
   145cc:	movt	r0, #0
   145d0:	bl	0 <puts>
   145d4:	mvn	r3, #0
   145d8:	b	14908 <main+0x3d8>
   145dc:	ldr	r0, [fp, #-8]
   145e0:	bl	10554 <test_monster>
   145e4:	mov	r3, r0
   145e8:	cmp	r3, #0
   145ec:	beq	14604 <main+0xd4>
   145f0:	movw	r0, #0
   145f4:	movt	r0, #0
   145f8:	bl	0 <puts>
   145fc:	mvn	r3, #0
   14600:	b	14908 <main+0x3d8>
   14604:	ldr	r0, [fp, #-8]
   14608:	bl	10618 <test_monster_with_size>
   1460c:	mov	r3, r0
   14610:	cmp	r3, #0
   14614:	beq	1462c <main+0xfc>
   14618:	movw	r0, #0
   1461c:	movt	r0, #0
   14620:	bl	0 <puts>
   14624:	mvn	r3, #0
   14628:	b	14908 <main+0x3d8>
   1462c:	ldr	r0, [fp, #-8]
   14630:	bl	10768 <test_string>
   14634:	mov	r3, r0
   14638:	cmp	r3, #0
   1463c:	beq	14654 <main+0x124>
   14640:	movw	r0, #0
   14644:	movt	r0, #0
   14648:	bl	0 <puts>
   1464c:	mvn	r3, #0
   14650:	b	14908 <main+0x3d8>
   14654:	ldr	r0, [fp, #-8]
   14658:	bl	13aa8 <test_struct_buffer>
   1465c:	mov	r3, r0
   14660:	cmp	r3, #0
   14664:	beq	1467c <main+0x14c>
   14668:	movw	r0, #0
   1466c:	movt	r0, #0
   14670:	bl	0 <puts>
   14674:	mvn	r3, #0
   14678:	b	14908 <main+0x3d8>
   1467c:	ldr	r0, [fp, #-8]
   14680:	bl	e8a8 <test_typed_empty_monster>
   14684:	mov	r3, r0
   14688:	cmp	r3, #0
   1468c:	beq	146a4 <main+0x174>
   14690:	movw	r0, #0
   14694:	movt	r0, #0
   14698:	bl	0 <puts>
   1469c:	mvn	r3, #0
   146a0:	b	14908 <main+0x3d8>
   146a4:	ldr	r0, [fp, #-8]
   146a8:	bl	ed18 <test_typed_table_with_emptystruct>
   146ac:	mov	r3, r0
   146b0:	cmp	r3, #0
   146b4:	beq	146cc <main+0x19c>
   146b8:	movw	r0, #0
   146bc:	movt	r0, #0
   146c0:	bl	0 <puts>
   146c4:	mvn	r3, #0
   146c8:	b	14908 <main+0x3d8>
   146cc:	ldr	r0, [fp, #-8]
   146d0:	bl	13d5c <test_typed_struct_buffer>
   146d4:	mov	r3, r0
   146d8:	cmp	r3, #0
   146dc:	beq	146f4 <main+0x1c4>
   146e0:	movw	r0, #0
   146e4:	movt	r0, #0
   146e8:	bl	0 <puts>
   146ec:	mvn	r3, #0
   146f0:	b	14908 <main+0x3d8>
   146f4:	ldr	r0, [fp, #-8]
   146f8:	bl	11ebc <test_clone_slice>
   146fc:	mov	r3, r0
   14700:	cmp	r3, #0
   14704:	beq	1471c <main+0x1ec>
   14708:	movw	r0, #0
   1470c:	movt	r0, #0
   14710:	bl	0 <puts>
   14714:	mvn	r3, #0
   14718:	b	14908 <main+0x3d8>
   1471c:	ldr	r0, [fp, #-8]
   14720:	bl	13310 <test_add_set_defaults>
   14724:	mov	r3, r0
   14728:	cmp	r3, #0
   1472c:	beq	14744 <main+0x214>
   14730:	movw	r0, #0
   14734:	movt	r0, #0
   14738:	bl	0 <puts>
   1473c:	mvn	r3, #0
   14740:	b	14908 <main+0x3d8>
   14744:	ldr	r0, [fp, #-8]
   14748:	bl	125d4 <test_create_add_field>
   1474c:	mov	r3, r0
   14750:	cmp	r3, #0
   14754:	beq	1476c <main+0x23c>
   14758:	movw	r0, #0
   1475c:	movt	r0, #0
   14760:	bl	0 <puts>
   14764:	mvn	r3, #0
   14768:	b	14908 <main+0x3d8>
   1476c:	ldr	r0, [fp, #-8]
   14770:	bl	126f4 <test_union_vector>
   14774:	mov	r3, r0
   14778:	cmp	r3, #0
   1477c:	beq	14794 <main+0x264>
   14780:	movw	r0, #0
   14784:	movt	r0, #0
   14788:	bl	0 <puts>
   1478c:	mvn	r3, #0
   14790:	b	14908 <main+0x3d8>
   14794:	ldr	r0, [fp, #-8]
   14798:	bl	11cd4 <test_basic_sort>
   1479c:	mov	r3, r0
   147a0:	cmp	r3, #0
   147a4:	beq	147bc <main+0x28c>
   147a8:	movw	r0, #0
   147ac:	movt	r0, #0
   147b0:	bl	0 <puts>
   147b4:	mvn	r3, #0
   147b8:	b	14908 <main+0x3d8>
   147bc:	ldr	r0, [fp, #-8]
   147c0:	bl	109ac <test_sort_find>
   147c4:	mov	r3, r0
   147c8:	cmp	r3, #0
   147cc:	beq	147e4 <main+0x2b4>
   147d0:	movw	r0, #0
   147d4:	movt	r0, #0
   147d8:	bl	0 <puts>
   147dc:	mvn	r3, #0
   147e0:	b	14908 <main+0x3d8>
   147e4:	ldr	r0, [fp, #-8]
   147e8:	bl	10f7c <test_scan>
   147ec:	mov	r3, r0
   147f0:	cmp	r3, #0
   147f4:	beq	1480c <main+0x2dc>
   147f8:	movw	r0, #0
   147fc:	movt	r0, #0
   14800:	bl	0 <puts>
   14804:	mvn	r3, #0
   14808:	b	14908 <main+0x3d8>
   1480c:	ldr	r0, [fp, #-8]
   14810:	bl	13504 <test_nested_buffer>
   14814:	mov	r3, r0
   14818:	cmp	r3, #0
   1481c:	beq	14834 <main+0x304>
   14820:	movw	r0, #0
   14824:	movt	r0, #0
   14828:	bl	0 <puts>
   1482c:	mvn	r3, #0
   14830:	b	14908 <main+0x3d8>
   14834:	ldr	r0, [fp, #-8]
   14838:	bl	136a4 <test_nested_buffer_first>
   1483c:	mov	r3, r0
   14840:	cmp	r3, #0
   14844:	beq	1485c <main+0x32c>
   14848:	movw	r0, #0
   1484c:	movt	r0, #0
   14850:	bl	0 <puts>
   14854:	mvn	r3, #0
   14858:	b	14908 <main+0x3d8>
   1485c:	ldr	r0, [fp, #-8]
   14860:	bl	13844 <test_nested_buffer_using_nest>
   14864:	mov	r3, r0
   14868:	cmp	r3, #0
   1486c:	beq	14884 <main+0x354>
   14870:	movw	r0, #0
   14874:	movt	r0, #0
   14878:	bl	0 <puts>
   1487c:	mvn	r3, #0
   14880:	b	14908 <main+0x3d8>
   14884:	ldr	r0, [fp, #-8]
   14888:	bl	13a84 <verify_include>
   1488c:	mov	r3, r0
   14890:	cmp	r3, #0
   14894:	beq	148ac <main+0x37c>
   14898:	movw	r0, #0
   1489c:	movt	r0, #0
   148a0:	bl	0 <puts>
   148a4:	mvn	r3, #0
   148a8:	b	14908 <main+0x3d8>
   148ac:	ldr	r0, [fp, #-8]
   148b0:	bl	e494 <test_type_aliases>
   148b4:	mov	r3, r0
   148b8:	cmp	r3, #0
   148bc:	beq	148d4 <main+0x3a4>
   148c0:	movw	r0, #0
   148c4:	movt	r0, #0
   148c8:	bl	0 <puts>
   148cc:	mvn	r3, #0
   148d0:	b	14908 <main+0x3d8>
   148d4:	ldr	r0, [fp, #-8]
   148d8:	bl	12a00 <test_mixed_type_union>
   148dc:	mov	r3, r0
   148e0:	cmp	r3, #0
   148e4:	beq	148fc <main+0x3cc>
   148e8:	movw	r0, #0
   148ec:	movt	r0, #0
   148f0:	bl	0 <puts>
   148f4:	mvn	r3, #0
   148f8:	b	14908 <main+0x3d8>
   148fc:	ldr	r0, [fp, #-8]
   14900:	bl	0 <flatcc_builder_clear>
   14904:	mov	r3, #0
   14908:	mov	r0, r3
   1490c:	sub	sp, fp, #4
   14910:	ldr	fp, [sp]
   14914:	add	sp, sp, #4
   14918:	pop	{pc}		; (ldr pc, [sp], #4)
