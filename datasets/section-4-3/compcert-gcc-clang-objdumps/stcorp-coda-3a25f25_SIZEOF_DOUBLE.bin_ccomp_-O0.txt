
../repos/stcorp-coda-3a25f25/CMakeFiles/CheckTypeSize/SIZEOF_DOUBLE.bin:     file format elf32-littlearm


Disassembly of section .init:

000102bc <.init>:
   102bc:	push	{r3, lr}
   102c0:	bl	10330 <abort@plt+0x3c>
   102c4:	pop	{r3, pc}

Disassembly of section .plt:

000102c8 <__libc_start_main@plt-0x14>:
   102c8:	push	{lr}		; (str lr, [sp, #-4]!)
   102cc:	ldr	lr, [pc, #4]	; 102d8 <__libc_start_main@plt-0x4>
   102d0:	add	lr, pc, lr
   102d4:	ldr	pc, [lr, #8]!
   102d8:	andeq	r0, r1, r8, lsr #26

000102dc <__libc_start_main@plt>:
   102dc:	add	ip, pc, #0, 12
   102e0:	add	ip, ip, #16, 20	; 0x10000
   102e4:	ldr	pc, [ip, #3368]!	; 0xd28

000102e8 <__gmon_start__@plt>:
   102e8:	add	ip, pc, #0, 12
   102ec:	add	ip, ip, #16, 20	; 0x10000
   102f0:	ldr	pc, [ip, #3360]!	; 0xd20

000102f4 <abort@plt>:
   102f4:	add	ip, pc, #0, 12
   102f8:	add	ip, ip, #16, 20	; 0x10000
   102fc:	ldr	pc, [ip, #3352]!	; 0xd18

Disassembly of section .text:

00010300 <.text>:
   10300:	bleq	4c444 <abort@plt+0x3c150>
   10304:	cdpeq	0, 0, cr15, cr0, cr15, {2}
   10308:	strbtmi	fp, [sl], -r2, lsl #24
   1030c:	strlt	fp, [r1], #-1028	; 0xfffffbfc
   10310:			; <UNDEFINED> instruction: 0xc010f8df
   10314:	stcgt	8, cr15, [r4, #-308]	; 0xfffffecc
   10318:	blmi	12232c <abort@plt+0x112038>
   1031c:	svc	0x00def7ff
   10320:	svc	0x00e8f7ff
   10324:	andeq	r0, r1, r1, lsr r4
   10328:	andeq	r0, r1, r0, asr #7
   1032c:	strdeq	r0, [r1], -r1
   10330:	ldr	r3, [pc, #20]	; 1034c <abort@plt+0x58>
   10334:	ldr	r2, [pc, #20]	; 10350 <abort@plt+0x5c>
   10338:	add	r3, pc, r3
   1033c:	ldr	r2, [r3, r2]
   10340:	cmp	r2, #0
   10344:	bxeq	lr
   10348:	b	102e8 <__gmon_start__@plt>
   1034c:	andeq	r0, r1, r0, asr #25
   10350:	andeq	r0, r0, r8, lsl r0
   10354:	subeq	pc, ip, r1, asr #4
   10358:	andeq	pc, r2, r0, asr #5
   1035c:	movteq	pc, #49729	; 0xc241	; <UNPREDICTABLE>
   10360:	movweq	pc, #8896	; 0x22c0	; <UNPREDICTABLE>
   10364:	andle	r4, r5, r3, lsl #5
   10368:	movweq	pc, #576	; 0x240	; <UNPREDICTABLE>
   1036c:	movweq	pc, #704	; 0x2c0	; <UNPREDICTABLE>
   10370:	ldrmi	fp, [r8, -r3, lsl #2]
   10374:	svclt	0x00004770
   10378:	subeq	pc, ip, r1, asr #4
   1037c:	andeq	pc, r2, r0, asr #5
   10380:	cmpeq	ip, r1, asr #4	; <UNPREDICTABLE>
   10384:	smlabteq	r2, r0, r2, pc	; <UNPREDICTABLE>
   10388:	svceq	0x00d91a0b
   1038c:			; <UNDEFINED> instruction: 0x01a3eb01
   10390:	andle	r1, r5, r9, asr #32
   10394:	movweq	pc, #576	; 0x240	; <UNPREDICTABLE>
   10398:	movweq	pc, #704	; 0x2c0	; <UNPREDICTABLE>
   1039c:	ldrmi	fp, [r8, -r3, lsl #2]
   103a0:	svclt	0x00004770
   103a4:	vqrshl.s8	d27, d0, d1
   103a8:	vmls.i<illegal width 8>	d16, d0, d2[2]
   103ac:	stmdavc	r3!, {r1, sl}
   103b0:			; <UNDEFINED> instruction: 0xf7ffb91b
   103b4:	movwcs	pc, #8143	; 0x1fcf	; <UNPREDICTABLE>
   103b8:	ldclt	0, cr7, [r0, #-140]	; 0xffffff74
   103bc:	svclt	0x0000e7dc
   103c0:	mov	ip, sp
   103c4:	sub	sp, sp, #8
   103c8:	str	ip, [sp]
   103cc:	str	lr, [sp, #4]
   103d0:	mov	r1, #0
   103d4:	ldr	r2, [pc, #16]	; 103ec <abort@plt+0xf8>
   103d8:	ldrb	r2, [r2, r0]
   103dc:	add	r0, r1, r2
   103e0:	ldr	lr, [sp, #4]
   103e4:	add	sp, sp, #8
   103e8:	bx	lr
   103ec:	andeq	r1, r2, r4, lsr #32
   103f0:	mvnsmi	lr, #737280	; 0xb4000
   103f4:	cfmadd32mi	mvax0, mvfx4, mvfx12, mvfx7
   103f8:	strmi	r4, [r8], ip, lsl #26
   103fc:			; <UNDEFINED> instruction: 0x4691447e
   10400:			; <UNDEFINED> instruction: 0xf7ff447d
   10404:	blne	1dcc17c <abort@plt+0x1dbbe88>
   10408:	strhle	r1, [sl], -r6
   1040c:	strcs	r3, [r0], #-3332	; 0xfffff2fc
   10410:	svccc	0x0004f855
   10414:	strbmi	r4, [r1], -sl, asr #12
   10418:	strcc	r4, [r1], #-1592	; 0xfffff9c8
   1041c:	adcmi	r4, r6, #152, 14	; 0x2600000
   10420:	pop	{r1, r2, r4, r5, r6, r7, r8, ip, lr, pc}
   10424:	svclt	0x000083f8
   10428:	andeq	r0, r1, r4, lsl fp
   1042c:	andeq	r0, r1, ip, lsl #22
   10430:	svclt	0x00004770

Disassembly of section .fini:

00010434 <.fini>:
   10434:	push	{r3, lr}
   10438:	pop	{r3, pc}
