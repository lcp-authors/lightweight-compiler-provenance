
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-ascii-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <get_bit_size_boundary>:
       0:	cmp	r2, #0
       4:	strd	r4, [sp, #-36]!	; 0xffffffdc
       8:	strd	r6, [sp, #8]
       c:	strd	r8, [sp, #16]
      10:	mov	r8, r2
      14:	mov	r9, r3
      18:	sbcs	r2, r3, #0
      1c:	ldr	r3, [r0, #4]
      20:	movlt	r8, #0
      24:	movlt	r9, #0
      28:	strd	sl, [sp, #24]
      2c:	str	lr, [sp, #32]
      30:	sub	sp, sp, #124	; 0x7c
      34:	lsl	r2, r3, #4
      38:	sub	r3, r3, #1
      3c:	ldrd	r4, [r0, r2]
      40:	ldr	r2, [r0]
      44:	ldr	ip, [r2, #16]
      48:	cmp	ip, #1
      4c:	bls	12c <get_bit_size_boundary+0x12c>
      50:	cmp	r3, #0
      54:	ble	188 <get_bit_size_boundary+0x188>
      58:	add	r2, r0, r3, lsl #4
      5c:	ldr	r2, [r2, #8]
      60:	ldr	ip, [r2]
      64:	cmp	ip, #1
      68:	bhi	90 <get_bit_size_boundary+0x90>
      6c:	add	r0, r0, #8
      70:	b	7c <get_bit_size_boundary+0x7c>
      74:	cmp	ip, #1
      78:	bhi	90 <get_bit_size_boundary+0x90>
      7c:	sub	r3, r3, #1
      80:	ldr	r2, [r0, r3, lsl #4]
      84:	cmp	r3, #0
      88:	ldr	ip, [r2]
      8c:	bne	74 <get_bit_size_boundary+0x74>
      90:	cmp	ip, #100	; 0x64
      94:	bne	308 <get_bit_size_boundary+0x308>
      98:	ldr	r3, [r2, #8]
      9c:	cmp	r3, #2
      a0:	bne	308 <get_bit_size_boundary+0x308>
      a4:	ldr	r3, [r2, #16]
      a8:	ldr	r0, [r2, #28]
      ac:	ldr	ip, [r2, #24]
      b0:	lsl	r3, r3, #3
      b4:	lsl	r2, r0, #3
      b8:	mov	r6, r3
      bc:	asr	r7, r3, #31
      c0:	lsl	r0, ip, #3
      c4:	orr	r2, r2, ip, lsr #29
      c8:	subs	r4, r4, r0
      cc:	sbc	r5, r5, r2
      d0:	cmp	r3, r4
      d4:	sbcs	r2, r7, r5
      d8:	movlt	r2, #1
      dc:	movge	r2, #0
      e0:	orrs	r2, r2, r5, lsr #31
      e4:	str	r2, [sp, #8]
      e8:	bne	22c <get_bit_size_boundary+0x22c>
      ec:	adds	sl, r8, r4
      f0:	adc	fp, r9, r5
      f4:	cmp	r3, sl
      f8:	sbcs	r2, r7, fp
      fc:	blt	198 <get_bit_size_boundary+0x198>
     100:	subs	r2, r6, r4
     104:	mov	r0, #0
     108:	sbc	r3, r7, r5
     10c:	strd	r2, [r1]
     110:	add	sp, sp, #124	; 0x7c
     114:	ldrd	r4, [sp]
     118:	ldrd	r6, [sp, #8]
     11c:	ldrd	r8, [sp, #16]
     120:	ldrd	sl, [sp, #24]
     124:	add	sp, sp, #32
     128:	pop	{pc}		; (ldr pc, [sp], #4)
     12c:	ldr	r3, [r2, #48]	; 0x30
     130:	cmp	r3, #0
     134:	ldrne	r0, [r2, #44]	; 0x2c
     138:	ldreq	r0, [r2, #12]
     13c:	ldrne	r3, [r2, #40]	; 0x28
     140:	ldreq	r3, [r2, #8]
     144:	lsl	r7, r0, #3
     148:	lsl	r6, r3, #3
     14c:	orr	r7, r7, r3, lsr #29
     150:	adds	r3, r8, r4
     154:	str	r3, [sp, #8]
     158:	adc	r3, r9, r5
     15c:	str	r3, [sp, #12]
     160:	ldrd	r2, [sp, #8]
     164:	cmp	r2, r6
     168:	sbcs	r3, r3, r7
     16c:	blt	100 <get_bit_size_boundary+0x100>
     170:	mvn	r0, #300	; 0x12c
     174:	movw	r1, #0
     178:	movt	r1, #0
     17c:	bl	0 <coda_set_error>
     180:	mvn	r0, #0
     184:	b	110 <get_bit_size_boundary+0x110>
     188:	bne	308 <get_bit_size_boundary+0x308>
     18c:	ldr	r2, [r0, #8]
     190:	ldr	ip, [r2]
     194:	b	90 <get_bit_size_boundary+0x90>
     198:	lsr	r0, r8, #3
     19c:	add	r2, sp, #24
     1a0:	str	r3, [sp, #20]
     1a4:	asr	r1, r9, #3
     1a8:	orr	r0, r0, r9, lsl #29
     1ac:	bl	0 <coda_str64>
     1b0:	ldr	r1, [sp, #8]
     1b4:	and	r0, r8, #7
     1b8:	orrs	r3, r0, r1
     1bc:	ldr	r3, [sp, #20]
     1c0:	bne	2b4 <get_bit_size_boundary+0x2b4>
     1c4:	lsr	r0, r4, #3
     1c8:	add	r2, sp, #56	; 0x38
     1cc:	str	r3, [sp, #8]
     1d0:	asr	r1, r5, #3
     1d4:	orr	r0, r0, r5, lsl #29
     1d8:	bl	0 <coda_str64>
     1dc:	and	r0, r4, #7
     1e0:	mov	r1, #0
     1e4:	orrs	r3, r0, r1
     1e8:	ldr	r3, [sp, #8]
     1ec:	bne	28c <get_bit_size_boundary+0x28c>
     1f0:	lsr	r3, r3, #3
     1f4:	add	r4, sp, #88	; 0x58
     1f8:	asr	r1, r7, #3
     1fc:	mov	r2, r4
     200:	orr	r0, r3, r7, lsl #29
     204:	bl	0 <coda_str64>
     208:	mvn	r0, #300	; 0x12c
     20c:	add	r3, sp, #56	; 0x38
     210:	str	r4, [sp]
     214:	add	r2, sp, #24
     218:	movw	r1, #0
     21c:	movt	r1, #0
     220:	bl	0 <coda_set_error>
     224:	mvn	r0, #0
     228:	b	110 <get_bit_size_boundary+0x110>
     22c:	lsr	r0, r4, #3
     230:	add	r2, sp, #88	; 0x58
     234:	str	r3, [sp, #8]
     238:	asr	r1, r5, #3
     23c:	orr	r0, r0, r5, lsl #29
     240:	bl	0 <coda_str64>
     244:	and	r0, r4, #7
     248:	mov	r1, #0
     24c:	orrs	r3, r0, r1
     250:	ldr	r3, [sp, #8]
     254:	bne	2e0 <get_bit_size_boundary+0x2e0>
     258:	lsr	r3, r3, #3
     25c:	add	r2, sp, #56	; 0x38
     260:	asr	r1, r7, #3
     264:	orr	r0, r3, r7, lsl #29
     268:	bl	0 <coda_str64>
     26c:	mvn	r0, #300	; 0x12c
     270:	add	r3, sp, #56	; 0x38
     274:	add	r2, sp, #88	; 0x58
     278:	movw	r1, #0
     27c:	movt	r1, #0
     280:	bl	0 <coda_set_error>
     284:	mvn	r0, #0
     288:	b	110 <get_bit_size_boundary+0x110>
     28c:	add	r0, sp, #56	; 0x38
     290:	bl	0 <strlen>
     294:	add	r3, sp, #56	; 0x38
     298:	and	r2, r4, #7
     29c:	add	r0, r3, r0
     2a0:	movw	r1, #0
     2a4:	movt	r1, #0
     2a8:	bl	0 <sprintf>
     2ac:	ldr	r3, [sp, #8]
     2b0:	b	1f0 <get_bit_size_boundary+0x1f0>
     2b4:	add	r0, sp, #24
     2b8:	str	r3, [sp, #8]
     2bc:	bl	0 <strlen>
     2c0:	add	r3, sp, #24
     2c4:	and	r2, r8, #7
     2c8:	add	r0, r3, r0
     2cc:	movw	r1, #0
     2d0:	movt	r1, #0
     2d4:	bl	0 <sprintf>
     2d8:	ldr	r3, [sp, #8]
     2dc:	b	1c4 <get_bit_size_boundary+0x1c4>
     2e0:	add	r0, sp, #88	; 0x58
     2e4:	bl	0 <strlen>
     2e8:	add	r3, sp, #88	; 0x58
     2ec:	and	r2, r4, #7
     2f0:	add	r0, r3, r0
     2f4:	movw	r1, #0
     2f8:	movt	r1, #0
     2fc:	bl	0 <sprintf>
     300:	ldr	r3, [sp, #8]
     304:	b	258 <get_bit_size_boundary+0x258>
     308:	movw	r3, #0
     30c:	movt	r3, #0
     310:	movw	r1, #0
     314:	movt	r1, #0
     318:	movw	r0, #0
     31c:	movt	r0, #0
     320:	mov	r2, #122	; 0x7a
     324:	bl	0 <__assert_fail>

00000328 <read_bytes>:
     328:	strd	r4, [sp, #-36]!	; 0xffffffdc
     32c:	mov	r4, r2
     330:	ldr	r5, [r0, #48]	; 0x30
     334:	strd	r6, [sp, #8]
     338:	mov	r6, r0
     33c:	mov	r7, r3
     340:	strd	r8, [sp, #16]
     344:	strd	sl, [sp, #24]
     348:	str	lr, [sp, #32]
     34c:	sub	sp, sp, #84	; 0x54
     350:	cmp	r5, #0
     354:	ldr	r2, [sp, #120]	; 0x78
     358:	ldr	r1, [sp, #124]	; 0x7c
     35c:	beq	400 <read_bytes+0xd8>
     360:	adds	r8, r4, r2
     364:	ldrd	sl, [r0, #40]	; 0x28
     368:	adc	r9, r3, r1
     36c:	cmp	r9, fp
     370:	cmpeq	r8, sl
     374:	bls	3ec <read_bytes+0xc4>
     378:	ldr	r3, [r0, #16]
     37c:	cmp	r3, #1
     380:	bls	468 <read_bytes+0x140>
     384:	mov	r0, r2
     388:	add	r2, sp, #8
     38c:	bl	0 <coda_str64>
     390:	add	r5, sp, #56	; 0x38
     394:	mov	r0, r4
     398:	mov	r1, r7
     39c:	add	r2, sp, #32
     3a0:	bl	0 <coda_str64>
     3a4:	mov	r2, r5
     3a8:	ldrd	r0, [r6, #40]	; 0x28
     3ac:	bl	0 <coda_str64>
     3b0:	mvn	r0, #300	; 0x12c
     3b4:	add	r3, sp, #32
     3b8:	str	r5, [sp]
     3bc:	add	r2, sp, #8
     3c0:	movw	r1, #0
     3c4:	movt	r1, #0
     3c8:	bl	0 <coda_set_error>
     3cc:	mvn	r0, #0
     3d0:	add	sp, sp, #84	; 0x54
     3d4:	ldrd	r4, [sp]
     3d8:	ldrd	r6, [sp, #8]
     3dc:	ldrd	r8, [sp, #16]
     3e0:	ldrd	sl, [sp, #24]
     3e4:	add	sp, sp, #32
     3e8:	pop	{pc}		; (ldr pc, [sp], #4)
     3ec:	add	r1, r5, r4
     3f0:	ldr	r0, [sp, #128]	; 0x80
     3f4:	bl	0 <memcpy>
     3f8:	mov	r0, #0
     3fc:	b	3d0 <read_bytes+0xa8>
     400:	ldr	r3, [r0, #16]
     404:	cmp	r3, #1
     408:	bhi	480 <read_bytes+0x158>
     40c:	ldrd	r8, [r0, #8]
     410:	adds	sl, r4, r2
     414:	adc	fp, r7, r1
     418:	cmp	fp, r9
     41c:	cmpeq	sl, r8
     420:	bhi	468 <read_bytes+0x140>
     424:	mov	r3, r4
     428:	ldr	r0, [r0, #56]	; 0x38
     42c:	ldr	r1, [sp, #128]	; 0x80
     430:	bl	0 <pread>
     434:	cmp	r0, #0
     438:	movge	r0, r5
     43c:	bge	3d0 <read_bytes+0xa8>
     440:	bl	0 <__errno_location>
     444:	ldr	r0, [r0]
     448:	bl	0 <strerror>
     44c:	mov	r2, r0
     450:	movw	r1, #0
     454:	movt	r1, #0
     458:	mvn	r0, #21
     45c:	bl	0 <coda_set_error>
     460:	mvn	r0, #0
     464:	b	3d0 <read_bytes+0xa8>
     468:	mvn	r0, #300	; 0x12c
     46c:	movw	r1, #0
     470:	movt	r1, #0
     474:	bl	0 <coda_set_error>
     478:	mvn	r0, #0
     47c:	b	3d0 <read_bytes+0xa8>
     480:	movw	r1, #0
     484:	movt	r1, #0
     488:	ldr	r3, [pc, #12]	; 49c <read_bytes+0x174>
     48c:	movw	r0, #0
     490:	movt	r0, #0
     494:	mov	r2, #83	; 0x53
     498:	bl	0 <__assert_fail>
     49c:	.word	0x00000018

000004a0 <read_partial_array>:
     4a0:	strd	r4, [sp, #-28]!	; 0xffffffe4
     4a4:	mov	r4, r2
     4a8:	mov	r2, #520	; 0x208
     4ac:	strd	r6, [sp, #8]
     4b0:	mov	r6, r3
     4b4:	mov	r7, r1
     4b8:	strd	r8, [sp, #16]
     4bc:	mov	r1, r0
     4c0:	str	lr, [sp, #24]
     4c4:	sub	sp, sp, #524	; 0x20c
     4c8:	mov	r0, sp
     4cc:	ldr	r8, [sp, #556]	; 0x22c
     4d0:	bl	0 <memcpy>
     4d4:	cmp	r6, #0
     4d8:	bgt	4f8 <read_partial_array+0x58>
     4dc:	mov	r0, #0
     4e0:	add	sp, sp, #524	; 0x20c
     4e4:	ldrd	r4, [sp]
     4e8:	ldrd	r6, [sp, #8]
     4ec:	ldrd	r8, [sp, #16]
     4f0:	add	sp, sp, #24
     4f4:	pop	{pc}		; (ldr pc, [sp], #4)
     4f8:	mov	r1, r4
     4fc:	mov	r0, sp
     500:	bl	0 <coda_cursor_goto_array_element_by_index>
     504:	subs	r4, r0, #0
     508:	bne	554 <read_partial_array+0xb4>
     50c:	sub	r9, r6, #1
     510:	ldr	r5, [sp, #552]	; 0x228
     514:	b	524 <read_partial_array+0x84>
     518:	cmp	r6, r4
     51c:	add	r5, r5, r8
     520:	beq	4dc <read_partial_array+0x3c>
     524:	mov	r1, r5
     528:	mov	r0, sp
     52c:	blx	r7
     530:	cmp	r0, #0
     534:	mov	r0, sp
     538:	bne	554 <read_partial_array+0xb4>
     53c:	cmp	r9, r4
     540:	add	r4, r4, #1
     544:	ble	518 <read_partial_array+0x78>
     548:	bl	0 <coda_cursor_goto_next_array_element>
     54c:	cmp	r0, #0
     550:	beq	518 <read_partial_array+0x78>
     554:	mvn	r0, #0
     558:	b	4e0 <read_partial_array+0x40>

0000055c <transpose_array>:
     55c:	strd	r4, [sp, #-36]!	; 0xffffffdc
     560:	strd	r6, [sp, #8]
     564:	mov	r6, r2
     568:	strd	r8, [sp, #16]
     56c:	strd	sl, [sp, #24]
     570:	str	lr, [sp, #32]
     574:	sub	sp, sp, #164	; 0xa4
     578:	add	r5, sp, #20
     57c:	mov	r2, r5
     580:	str	r1, [sp, #8]
     584:	add	r1, sp, #16
     588:	bl	0 <coda_cursor_get_array_dim>
     58c:	subs	r4, r0, #0
     590:	bne	8c4 <transpose_array+0x368>
     594:	ldr	r9, [sp, #16]
     598:	cmp	r9, #1
     59c:	ble	71c <transpose_array+0x1c0>
     5a0:	sub	r3, r9, #-1073741823	; 0xc0000001
     5a4:	add	r1, sp, #16
     5a8:	lsl	r2, r3, #2
     5ac:	add	ip, sp, #84	; 0x54
     5b0:	add	r0, sp, #120	; 0x78
     5b4:	mov	r7, #1
     5b8:	mov	r8, r4
     5bc:	add	r3, r5, r2
     5c0:	cmp	r3, r5
     5c4:	ldr	sl, [r1, #4]!
     5c8:	str	r8, [ip, #4]!
     5cc:	ldr	lr, [r3], #-4
     5d0:	mul	r7, sl, r7
     5d4:	str	lr, [r0, #4]!
     5d8:	bne	5c0 <transpose_array+0x64>
     5dc:	cmp	r7, #1
     5e0:	ble	71c <transpose_array+0x1c0>
     5e4:	lsl	r9, r9, #2
     5e8:	add	r3, sp, #160	; 0xa0
     5ec:	mov	lr, #1
     5f0:	add	ip, sp, #52	; 0x34
     5f4:	mov	r1, lr
     5f8:	add	r5, r3, r9
     5fc:	add	r3, sp, #124	; 0x7c
     600:	add	r0, r3, r2
     604:	add	r3, ip, r2
     608:	mov	r2, lr
     60c:	str	lr, [r5, #-108]	; 0xffffff94
     610:	str	lr, [r5, #-36]	; 0xffffffdc
     614:	b	61c <transpose_array+0xc0>
     618:	ldr	r1, [r0], #-4
     61c:	mul	r2, r1, r2
     620:	cmp	r3, ip
     624:	str	r2, [r3], #-4
     628:	bne	618 <transpose_array+0xbc>
     62c:	mul	r0, r6, r7
     630:	add	r3, sp, #160	; 0xa0
     634:	add	r9, r3, r9
     638:	mov	r3, #0
     63c:	str	r3, [r9, #-72]	; 0xffffffb8
     640:	str	r3, [r9, #-36]	; 0xffffffdc
     644:	str	r0, [sp, #12]
     648:	bl	0 <malloc>
     64c:	subs	r5, r0, #0
     650:	beq	8cc <transpose_array+0x370>
     654:	sub	r6, r6, #1
     658:	cmp	r6, #7
     65c:	ldrls	pc, [pc, r6, lsl #2]
     660:	b	8f8 <transpose_array+0x39c>
     664:	.word	0x0000073c
     668:	.word	0x000007c0
     66c:	.word	0x000008f8
     670:	.word	0x00000844
     674:	.word	0x000008f8
     678:	.word	0x000008f8
     67c:	.word	0x000008f8
     680:	.word	0x00000684
     684:	ldr	r6, [sp, #8]
     688:	mov	r3, #0
     68c:	mov	lr, r3
     690:	ldr	r8, [sp, #52]	; 0x34
     694:	add	ip, r6, r7, lsl #3
     698:	ldr	r7, [sp, #124]	; 0x7c
     69c:	lsl	r9, r3, #3
     6a0:	add	r3, r3, r8
     6a4:	ldr	r2, [sp, #88]	; 0x58
     6a8:	ldrd	r0, [r6], #8
     6ac:	add	r2, r2, #1
     6b0:	cmp	r2, r7
     6b4:	strd	r0, [r5, r9]
     6b8:	str	r2, [sp, #88]	; 0x58
     6bc:	bne	6fc <transpose_array+0x1a0>
     6c0:	add	r2, sp, #88	; 0x58
     6c4:	add	sl, sp, #56	; 0x38
     6c8:	add	r9, sp, #128	; 0x80
     6cc:	mov	r0, r8
     6d0:	mov	r1, r7
     6d4:	str	lr, [r2]
     6d8:	mls	r3, r0, r1, r3
     6dc:	ldr	fp, [r2, #4]!
     6e0:	ldr	r1, [r9], #4
     6e4:	ldr	r0, [sl], #4
     6e8:	add	fp, fp, #1
     6ec:	cmp	fp, r1
     6f0:	str	fp, [r2]
     6f4:	add	r3, r0, r3
     6f8:	beq	6d4 <transpose_array+0x178>
     6fc:	cmp	r6, ip
     700:	bne	69c <transpose_array+0x140>
     704:	mov	r1, r5
     708:	ldr	r0, [sp, #8]
     70c:	ldr	r2, [sp, #12]
     710:	bl	0 <memcpy>
     714:	mov	r0, r5
     718:	bl	0 <free>
     71c:	mov	r0, r4
     720:	add	sp, sp, #164	; 0xa4
     724:	ldrd	r4, [sp]
     728:	ldrd	r6, [sp, #8]
     72c:	ldrd	r8, [sp, #16]
     730:	ldrd	sl, [sp, #24]
     734:	add	sp, sp, #32
     738:	pop	{pc}		; (ldr pc, [sp], #4)
     73c:	ldr	r3, [sp, #8]
     740:	mov	r2, #0
     744:	mov	r8, r2
     748:	ldr	fp, [sp, #52]	; 0x34
     74c:	ldr	sl, [sp, #124]	; 0x7c
     750:	sub	r9, r3, #1
     754:	add	r7, r9, r7
     758:	ldr	r3, [sp, #88]	; 0x58
     75c:	ldrb	r1, [r9, #1]!
     760:	add	r3, r3, #1
     764:	cmp	r3, sl
     768:	strb	r1, [r5, r2]
     76c:	add	r2, r2, fp
     770:	str	r3, [sp, #88]	; 0x58
     774:	bne	7b4 <transpose_array+0x258>
     778:	add	r1, sp, #88	; 0x58
     77c:	add	r6, sp, #56	; 0x38
     780:	add	lr, sp, #128	; 0x80
     784:	mov	ip, fp
     788:	mov	r0, sl
     78c:	str	r8, [r1]
     790:	mls	r2, ip, r0, r2
     794:	ldr	r3, [r1, #4]!
     798:	ldr	r0, [lr], #4
     79c:	ldr	ip, [r6], #4
     7a0:	add	r3, r3, #1
     7a4:	cmp	r3, r0
     7a8:	str	r3, [r1]
     7ac:	add	r2, ip, r2
     7b0:	beq	78c <transpose_array+0x230>
     7b4:	cmp	r7, r9
     7b8:	bne	758 <transpose_array+0x1fc>
     7bc:	b	704 <transpose_array+0x1a8>
     7c0:	ldr	r9, [sp, #8]
     7c4:	mov	r2, #0
     7c8:	mov	r8, r2
     7cc:	ldr	fp, [sp, #52]	; 0x34
     7d0:	ldr	sl, [sp, #124]	; 0x7c
     7d4:	add	r7, r9, r7, lsl #1
     7d8:	ldr	r3, [sp, #88]	; 0x58
     7dc:	lsl	r1, r2, #1
     7e0:	add	r2, r2, fp
     7e4:	ldrh	r0, [r9], #2
     7e8:	add	r3, r3, #1
     7ec:	cmp	r3, sl
     7f0:	strh	r0, [r5, r1]
     7f4:	str	r3, [sp, #88]	; 0x58
     7f8:	bne	838 <transpose_array+0x2dc>
     7fc:	add	r1, sp, #88	; 0x58
     800:	add	r6, sp, #56	; 0x38
     804:	add	lr, sp, #128	; 0x80
     808:	mov	ip, fp
     80c:	mov	r0, sl
     810:	str	r8, [r1]
     814:	mls	r2, ip, r0, r2
     818:	ldr	r3, [r1, #4]!
     81c:	ldr	r0, [lr], #4
     820:	ldr	ip, [r6], #4
     824:	add	r3, r3, #1
     828:	cmp	r3, r0
     82c:	str	r3, [r1]
     830:	add	r2, ip, r2
     834:	beq	810 <transpose_array+0x2b4>
     838:	cmp	r9, r7
     83c:	bne	7d8 <transpose_array+0x27c>
     840:	b	704 <transpose_array+0x1a8>
     844:	ldr	r9, [sp, #8]
     848:	mov	r2, #0
     84c:	mov	r8, r2
     850:	ldr	fp, [sp, #52]	; 0x34
     854:	ldr	sl, [sp, #124]	; 0x7c
     858:	add	r7, r9, r7, lsl #2
     85c:	ldr	r3, [sp, #88]	; 0x58
     860:	ldr	r1, [r9], #4
     864:	add	r3, r3, #1
     868:	cmp	sl, r3
     86c:	str	r1, [r5, r2, lsl #2]
     870:	add	r2, r2, fp
     874:	str	r3, [sp, #88]	; 0x58
     878:	bne	8b8 <transpose_array+0x35c>
     87c:	add	r1, sp, #88	; 0x58
     880:	add	r6, sp, #56	; 0x38
     884:	add	lr, sp, #128	; 0x80
     888:	mov	ip, fp
     88c:	mov	r0, sl
     890:	str	r8, [r1]
     894:	mls	r2, ip, r0, r2
     898:	ldr	r3, [r1, #4]!
     89c:	ldr	r0, [lr], #4
     8a0:	ldr	ip, [r6], #4
     8a4:	add	r3, r3, #1
     8a8:	cmp	r3, r0
     8ac:	str	r3, [r1]
     8b0:	add	r2, ip, r2
     8b4:	beq	890 <transpose_array+0x334>
     8b8:	cmp	r7, r9
     8bc:	bne	85c <transpose_array+0x300>
     8c0:	b	704 <transpose_array+0x1a8>
     8c4:	mvn	r4, #0
     8c8:	b	71c <transpose_array+0x1c0>
     8cc:	mov	r0, #93	; 0x5d
     8d0:	movw	r3, #0
     8d4:	movt	r3, #0
     8d8:	movw	r1, #0
     8dc:	movt	r1, #0
     8e0:	str	r0, [sp]
     8e4:	mvn	r0, #0
     8e8:	ldr	r2, [sp, #12]
     8ec:	mov	r4, r0
     8f0:	bl	0 <coda_set_error>
     8f4:	b	71c <transpose_array+0x1c0>
     8f8:	movw	r1, #0
     8fc:	movt	r1, #0
     900:	ldr	r3, [pc, #12]	; 914 <transpose_array+0x3b8>
     904:	movw	r0, #0
     908:	movt	r0, #0
     90c:	mov	r2, #172	; 0xac
     910:	bl	0 <__assert_fail>
     914:	.word	0x00000024

00000918 <parse_integer_mapping.isra.0>:
     918:	strd	r4, [sp, #-32]!	; 0xffffffe0
     91c:	strd	r6, [sp, #8]
     920:	strd	r8, [sp, #16]
     924:	subs	r9, r2, #0
     928:	str	sl, [sp, #24]
     92c:	str	lr, [sp, #28]
     930:	ble	9c0 <parse_integer_mapping.isra.0+0xa8>
     934:	ldr	r7, [r3]
     938:	mov	r8, r1
     93c:	mov	sl, r0
     940:	mov	r4, #0
     944:	sub	r7, r7, #4
     948:	b	95c <parse_integer_mapping.isra.0+0x44>
     94c:	cmp	r8, #0
     950:	beq	9ac <parse_integer_mapping.isra.0+0x94>
     954:	cmp	r4, r9
     958:	beq	9c0 <parse_integer_mapping.isra.0+0xa8>
     95c:	ldr	r6, [r7, #4]!
     960:	add	r4, r4, #1
     964:	ldr	r5, [r6]
     968:	cmp	r5, #0
     96c:	beq	94c <parse_integer_mapping.isra.0+0x34>
     970:	cmp	r5, r8
     974:	mov	r2, r5
     978:	mov	r1, sl
     97c:	bgt	954 <parse_integer_mapping.isra.0+0x3c>
     980:	ldr	r0, [r6, #4]
     984:	bl	0 <memcmp>
     988:	cmp	r0, #0
     98c:	bne	954 <parse_integer_mapping.isra.0+0x3c>
     990:	ldr	r3, [sp, #32]
     994:	eor	r3, r3, #1
     998:	cmp	r5, r8
     99c:	moveq	r5, #0
     9a0:	andne	r5, r3, #1
     9a4:	cmp	r5, #0
     9a8:	bne	9dc <parse_integer_mapping.isra.0+0xc4>
     9ac:	ldrd	r2, [r6, #8]
     9b0:	mov	r0, #1
     9b4:	ldr	r1, [sp, #36]	; 0x24
     9b8:	strd	r2, [r1]
     9bc:	b	9c4 <parse_integer_mapping.isra.0+0xac>
     9c0:	mov	r0, #0
     9c4:	ldrd	r4, [sp]
     9c8:	ldrd	r6, [sp, #8]
     9cc:	ldrd	r8, [sp, #16]
     9d0:	ldr	sl, [sp, #24]
     9d4:	add	sp, sp, #28
     9d8:	pop	{pc}		; (ldr pc, [sp], #4)
     9dc:	mvn	r0, #102	; 0x66
     9e0:	movw	r1, #0
     9e4:	movt	r1, #0
     9e8:	bl	0 <coda_set_error>
     9ec:	mvn	r0, #0
     9f0:	b	9c4 <parse_integer_mapping.isra.0+0xac>

000009f4 <read_bytes_in_bounds>:
     9f4:	str	r4, [sp, #-8]!
     9f8:	mov	r3, r2
     9fc:	ldr	r4, [r0, #48]	; 0x30
     a00:	str	lr, [sp, #4]
     a04:	ldr	r2, [sp, #8]
     a08:	cmp	r4, #0
     a0c:	beq	a2c <read_bytes_in_bounds+0x38>
     a10:	add	r1, r4, r3
     a14:	ldr	r0, [sp, #16]
     a18:	bl	0 <memcpy>
     a1c:	mov	r0, #0
     a20:	ldr	r4, [sp]
     a24:	add	sp, sp, #4
     a28:	pop	{pc}		; (ldr pc, [sp], #4)
     a2c:	ldr	r1, [r0, #16]
     a30:	cmp	r1, #1
     a34:	bhi	a78 <read_bytes_in_bounds+0x84>
     a38:	ldr	r1, [sp, #16]
     a3c:	ldr	r0, [r0, #56]	; 0x38
     a40:	bl	0 <pread>
     a44:	cmp	r0, #0
     a48:	movge	r0, r4
     a4c:	bge	a20 <read_bytes_in_bounds+0x2c>
     a50:	bl	0 <__errno_location>
     a54:	ldr	r0, [r0]
     a58:	bl	0 <strerror>
     a5c:	mov	r2, r0
     a60:	movw	r1, #0
     a64:	movt	r1, #0
     a68:	mvn	r0, #21
     a6c:	bl	0 <coda_set_error>
     a70:	mvn	r0, #0
     a74:	b	a20 <read_bytes_in_bounds+0x2c>
     a78:	movw	r1, #0
     a7c:	movt	r1, #0
     a80:	ldr	r3, [pc, #12]	; a94 <read_bytes_in_bounds+0xa0>
     a84:	movw	r0, #0
     a88:	movt	r0, #0
     a8c:	mov	r2, #62	; 0x3e
     a90:	bl	0 <__assert_fail>
     a94:	.word	0x00000034

00000a98 <coda_ascii_cursor_read_char>:
     a98:	strd	r4, [sp, #-20]!	; 0xffffffec
     a9c:	mov	r2, #8
     aa0:	mov	r5, r1
     aa4:	strd	r6, [sp, #8]
     aa8:	mov	r3, #0
     aac:	mov	r4, r0
     ab0:	str	lr, [sp, #16]
     ab4:	sub	sp, sp, #28
     ab8:	add	r1, sp, #16
     abc:	bl	0 <get_bit_size_boundary>
     ac0:	cmp	r0, #0
     ac4:	bne	b20 <coda_ascii_cursor_read_char+0x88>
     ac8:	ldr	r3, [r4, #4]
     acc:	mov	r7, r0
     ad0:	ldr	r1, [r4, r3, lsl #4]
     ad4:	add	r3, r4, r3, lsl #4
     ad8:	ldr	r2, [r3, #4]
     adc:	and	r6, r1, #7
     ae0:	orrs	r3, r6, r7
     ae4:	bne	b28 <coda_ascii_cursor_read_char+0x90>
     ae8:	lsr	r1, r1, #3
     aec:	mov	r6, #1
     af0:	mov	r7, #0
     af4:	asr	r3, r2, #3
     af8:	str	r5, [sp, #8]
     afc:	orr	r2, r1, r2, lsl #29
     b00:	ldr	r0, [r4]
     b04:	strd	r6, [sp]
     b08:	bl	9f4 <read_bytes_in_bounds>
     b0c:	add	sp, sp, #28
     b10:	ldrd	r4, [sp]
     b14:	ldrd	r6, [sp, #8]
     b18:	add	sp, sp, #16
     b1c:	pop	{pc}		; (ldr pc, [sp], #4)
     b20:	mvn	r0, #0
     b24:	b	b0c <coda_ascii_cursor_read_char+0x74>
     b28:	movw	r1, #0
     b2c:	movt	r1, #0
     b30:	movw	r0, #65236	; 0xfed4
     b34:	movt	r0, #65535	; 0xffff
     b38:	bl	0 <coda_set_error>
     b3c:	mvn	r0, #0
     b40:	b	b0c <coda_ascii_cursor_read_char+0x74>

00000b44 <read_array.constprop.12>:
     b44:	strd	r4, [sp, #-32]!	; 0xffffffe0
     b48:	mov	r4, r0
     b4c:	strd	r6, [sp, #8]
     b50:	mov	r7, r1
     b54:	mov	r6, r2
     b58:	strd	r8, [sp, #16]
     b5c:	mov	r8, r3
     b60:	str	sl, [sp, #24]
     b64:	str	lr, [sp, #28]
     b68:	sub	sp, sp, #560	; 0x230
     b6c:	add	r1, sp, #4
     b70:	add	r2, sp, #8
     b74:	bl	0 <coda_cursor_get_array_dim>
     b78:	subs	r9, r0, #0
     b7c:	bne	c3c <read_array.constprop.12+0xf8>
     b80:	mov	r1, r4
     b84:	add	r0, sp, #40	; 0x28
     b88:	mov	r2, #520	; 0x208
     b8c:	bl	0 <memcpy>
     b90:	ldr	r1, [sp, #4]
     b94:	cmp	r1, #0
     b98:	ble	be0 <read_array.constprop.12+0x9c>
     b9c:	add	r3, sp, #4
     ba0:	mov	r4, #1
     ba4:	add	r1, r3, r1, lsl #2
     ba8:	ldr	r2, [r3, #4]!
     bac:	cmp	r3, r1
     bb0:	mul	r4, r2, r4
     bb4:	bne	ba8 <read_array.constprop.12+0x64>
     bb8:	cmp	r4, #0
     bbc:	bgt	be4 <read_array.constprop.12+0xa0>
     bc0:	mov	r0, r9
     bc4:	add	sp, sp, #560	; 0x230
     bc8:	ldrd	r4, [sp]
     bcc:	ldrd	r6, [sp, #8]
     bd0:	ldrd	r8, [sp, #16]
     bd4:	ldr	sl, [sp, #24]
     bd8:	add	sp, sp, #28
     bdc:	pop	{pc}		; (ldr pc, [sp], #4)
     be0:	mov	r4, #1
     be4:	mov	r1, #0
     be8:	add	r0, sp, #40	; 0x28
     bec:	bl	0 <coda_cursor_goto_array_element_by_index>
     bf0:	subs	r5, r0, #0
     bf4:	bne	c3c <read_array.constprop.12+0xf8>
     bf8:	sub	sl, r4, #1
     bfc:	b	c0c <read_array.constprop.12+0xc8>
     c00:	cmp	r4, r5
     c04:	add	r6, r6, r8
     c08:	ble	bc0 <read_array.constprop.12+0x7c>
     c0c:	mov	r1, r6
     c10:	add	r0, sp, #40	; 0x28
     c14:	blx	r7
     c18:	cmp	r0, #0
     c1c:	add	r0, sp, #40	; 0x28
     c20:	bne	c3c <read_array.constprop.12+0xf8>
     c24:	cmp	sl, r5
     c28:	add	r5, r5, #1
     c2c:	ble	c00 <read_array.constprop.12+0xbc>
     c30:	bl	0 <coda_cursor_goto_next_array_element>
     c34:	cmp	r0, #0
     c38:	beq	c00 <read_array.constprop.12+0xbc>
     c3c:	mvn	r9, #0
     c40:	b	bc0 <read_array.constprop.12+0x7c>

00000c44 <coda_ascii_parse_int64>:
     c44:	strd	r4, [sp, #-36]!	; 0xffffffdc
     c48:	strd	r6, [sp, #8]
     c4c:	strd	r8, [sp, #16]
     c50:	subs	r8, r1, #0
     c54:	strd	sl, [sp, #24]
     c58:	str	lr, [sp, #32]
     c5c:	sub	sp, sp, #20
     c60:	ldrb	r4, [r0]
     c64:	str	r2, [sp]
     c68:	str	r8, [sp, #8]
     c6c:	str	r3, [sp, #12]
     c70:	ble	e08 <coda_ascii_parse_int64+0x1c4>
     c74:	cmp	r4, #9
     c78:	cmpne	r4, #32
     c7c:	bne	cbc <coda_ascii_parse_int64+0x78>
     c80:	add	r0, r0, #1
     c84:	b	c94 <coda_ascii_parse_int64+0x50>
     c88:	cmp	r4, #9
     c8c:	cmpne	r4, #32
     c90:	bne	cc4 <coda_ascii_parse_int64+0x80>
     c94:	subs	r8, r8, #1
     c98:	mov	ip, r0
     c9c:	ldrb	r4, [r0], #1
     ca0:	bne	c88 <coda_ascii_parse_int64+0x44>
     ca4:	mvn	r0, #102	; 0x66
     ca8:	movw	r1, #0
     cac:	movt	r1, #0
     cb0:	bl	0 <coda_set_error>
     cb4:	mvn	r0, #0
     cb8:	b	d98 <coda_ascii_parse_int64+0x154>
     cbc:	ldr	r8, [sp, #8]
     cc0:	mov	ip, r0
     cc4:	sub	r3, r4, #43	; 0x2b
     cc8:	tst	r3, #253	; 0xfd
     ccc:	movne	r3, #0
     cd0:	strne	r3, [sp, #4]
     cd4:	beq	e40 <coda_ascii_parse_int64+0x1fc>
     cd8:	sub	r4, r4, #48	; 0x30
     cdc:	uxtb	r3, r4
     ce0:	cmp	r3, #9
     ce4:	bhi	ca4 <coda_ascii_parse_int64+0x60>
     ce8:	add	ip, ip, #1
     cec:	asr	r5, r4, #31
     cf0:	mov	r6, #0
     cf4:	mov	r7, #0
     cf8:	mvn	sl, #0
     cfc:	mvn	fp, #-2147483648	; 0x80000000
     d00:	b	d3c <coda_ascii_parse_int64+0xf8>
     d04:	ldrb	r0, [r9], #1
     d08:	sub	r1, r0, #48	; 0x30
     d0c:	mov	r4, r1
     d10:	asr	r5, r1, #31
     d14:	uxtb	r1, r1
     d18:	cmp	r1, #9
     d1c:	bhi	db4 <coda_ascii_parse_int64+0x170>
     d20:	subs	r0, sl, r4
     d24:	sbc	r1, fp, r5
     d28:	bl	0 <__aeabi_ldivmod>
     d2c:	cmp	r0, r6
     d30:	mov	ip, r9
     d34:	sbcs	r3, r1, r7
     d38:	blt	df0 <coda_ascii_parse_int64+0x1ac>
     d3c:	lsl	r0, r7, #2
     d40:	mov	r9, ip
     d44:	mov	r2, #10
     d48:	lsl	r1, r6, #2
     d4c:	mov	r3, #0
     d50:	orr	r0, r0, r6, lsr #30
     d54:	adds	r1, r1, r6
     d58:	adc	r0, r0, r7
     d5c:	adds	r1, r1, r1
     d60:	adc	r0, r0, r0
     d64:	adds	r6, r1, r4
     d68:	adc	r7, r0, r5
     d6c:	subs	r8, r8, #1
     d70:	bne	d04 <coda_ascii_parse_int64+0xc0>
     d74:	ldr	r3, [sp, #8]
     d78:	sub	r0, r3, r8
     d7c:	ldr	r3, [sp, #4]
     d80:	cmp	r3, #0
     d84:	beq	d90 <coda_ascii_parse_int64+0x14c>
     d88:	rsbs	r6, r6, #0
     d8c:	rsc	r7, r7, #0
     d90:	ldr	r3, [sp]
     d94:	strd	r6, [r3]
     d98:	add	sp, sp, #20
     d9c:	ldrd	r4, [sp]
     da0:	ldrd	r6, [sp, #8]
     da4:	ldrd	r8, [sp, #16]
     da8:	ldrd	sl, [sp, #24]
     dac:	add	sp, sp, #32
     db0:	pop	{pc}		; (ldr pc, [sp], #4)
     db4:	ldr	r3, [sp, #12]
     db8:	cmp	r3, #0
     dbc:	bne	d74 <coda_ascii_parse_int64+0x130>
     dc0:	cmp	r0, #9
     dc4:	cmpne	r0, #32
     dc8:	beq	de0 <coda_ascii_parse_int64+0x19c>
     dcc:	b	e54 <coda_ascii_parse_int64+0x210>
     dd0:	ldrb	r3, [ip, #1]!
     dd4:	cmp	r3, #9
     dd8:	cmpne	r3, #32
     ddc:	bne	e54 <coda_ascii_parse_int64+0x210>
     de0:	subs	r8, r8, #1
     de4:	bne	dd0 <coda_ascii_parse_int64+0x18c>
     de8:	ldr	r0, [sp, #8]
     dec:	b	d7c <coda_ascii_parse_int64+0x138>
     df0:	mvn	r0, #102	; 0x66
     df4:	movw	r1, #0
     df8:	movt	r1, #0
     dfc:	bl	0 <coda_set_error>
     e00:	mvn	r0, #0
     e04:	b	d98 <coda_ascii_parse_int64+0x154>
     e08:	sub	r3, r4, #43	; 0x2b
     e0c:	sub	r4, r4, #45	; 0x2d
     e10:	clz	r4, r4
     e14:	tst	r3, #253	; 0xfd
     e18:	lsr	r4, r4, #5
     e1c:	ldreq	r8, [sp, #8]
     e20:	bne	ca4 <coda_ascii_parse_int64+0x60>
     e24:	sub	r8, r8, #1
     e28:	add	ip, r0, #1
     e2c:	str	r4, [sp, #4]
     e30:	cmp	r8, #0
     e34:	ble	ca4 <coda_ascii_parse_int64+0x60>
     e38:	ldrb	r4, [r0, #1]
     e3c:	b	cd8 <coda_ascii_parse_int64+0x94>
     e40:	sub	r4, r4, #45	; 0x2d
     e44:	mov	r0, ip
     e48:	clz	r4, r4
     e4c:	lsr	r4, r4, #5
     e50:	b	e24 <coda_ascii_parse_int64+0x1e0>
     e54:	mvn	r0, #102	; 0x66
     e58:	movw	r1, #0
     e5c:	movt	r1, #0
     e60:	bl	0 <coda_set_error>
     e64:	mvn	r0, #0
     e68:	b	d98 <coda_ascii_parse_int64+0x154>

00000e6c <coda_ascii_cursor_read_int64>:
     e6c:	ldr	ip, [r0, #4]
     e70:	strd	r4, [sp, #-32]!	; 0xffffffe0
     e74:	mov	r4, r0
     e78:	sub	ip, ip, #1
     e7c:	add	r3, r0, ip, lsl #4
     e80:	add	ip, ip, #1
     e84:	ldr	r5, [r3, #8]
     e88:	ldr	r3, [r5]
     e8c:	strd	r6, [sp, #8]
     e90:	mov	r6, r1
     e94:	strd	r8, [sp, #16]
     e98:	str	sl, [sp, #24]
     e9c:	str	lr, [sp, #28]
     ea0:	sub	sp, sp, #88	; 0x58
     ea4:	add	lr, r0, ip, lsl #4
     ea8:	cmp	r3, #99	; 0x63
     eac:	add	r1, sp, #16
     eb0:	ldr	r7, [r0, ip, lsl #4]
     eb4:	ldrhi	r5, [r5, #4]
     eb8:	ldr	r9, [lr, #4]
     ebc:	ldrd	r2, [r5, #24]
     ec0:	bl	0 <get_bit_size_boundary>
     ec4:	subs	r8, r0, #0
     ec8:	bne	fe0 <coda_ascii_cursor_read_int64+0x174>
     ecc:	and	r0, r7, #7
     ed0:	mov	r1, r8
     ed4:	orrs	r3, r0, r1
     ed8:	bne	fe8 <coda_ascii_cursor_read_int64+0x17c>
     edc:	ldrd	r2, [r5, #24]
     ee0:	cmp	r2, #0
     ee4:	sbcs	ip, r3, #0
     ee8:	blt	fa0 <coda_ascii_cursor_read_int64+0x134>
     eec:	lsr	sl, r2, #3
     ef0:	orr	sl, sl, r3, lsl #29
     ef4:	cmp	sl, #64	; 0x40
     ef8:	bgt	1000 <coda_ascii_cursor_read_int64+0x194>
     efc:	asr	r1, sl, #31
     f00:	mov	r0, sl
     f04:	lsr	r2, r7, #3
     f08:	add	r7, sp, #24
     f0c:	strd	r0, [sp]
     f10:	asr	r3, r9, #3
     f14:	ldr	r0, [r4]
     f18:	orr	r2, r2, r9, lsl #29
     f1c:	str	r7, [sp, #8]
     f20:	bl	9f4 <read_bytes_in_bounds>
     f24:	subs	r4, r0, #0
     f28:	bne	fe0 <coda_ascii_cursor_read_int64+0x174>
     f2c:	ldr	r3, [r5, #52]	; 0x34
     f30:	cmp	r3, #0
     f34:	beq	f84 <coda_ascii_cursor_read_int64+0x118>
     f38:	mov	r1, sl
     f3c:	mov	r0, r7
     f40:	ldr	r2, [r3, #8]
     f44:	add	r3, r3, #12
     f48:	str	r8, [sp]
     f4c:	str	r6, [sp, #4]
     f50:	bl	918 <parse_integer_mapping.isra.0>
     f54:	cmp	r0, #0
     f58:	beq	f84 <coda_ascii_cursor_read_int64+0x118>
     f5c:	cmp	r0, #1
     f60:	mvnne	r4, #0
     f64:	mov	r0, r4
     f68:	add	sp, sp, #88	; 0x58
     f6c:	ldrd	r4, [sp]
     f70:	ldrd	r6, [sp, #8]
     f74:	ldrd	r8, [sp, #16]
     f78:	ldr	sl, [sp, #24]
     f7c:	add	sp, sp, #28
     f80:	pop	{pc}		; (ldr pc, [sp], #4)
     f84:	mov	r3, r8
     f88:	mov	r2, r6
     f8c:	mov	r1, sl
     f90:	mov	r0, r7
     f94:	bl	c44 <coda_ascii_parse_int64>
     f98:	asr	r4, r0, #31
     f9c:	b	f64 <coda_ascii_cursor_read_int64+0xf8>
     fa0:	ldrd	r2, [sp, #16]
     fa4:	lsr	r0, r2, #3
     fa8:	asr	r1, r3, #3
     fac:	orr	r0, r0, r3, lsl #29
     fb0:	cmp	r0, #64	; 0x40
     fb4:	sbcs	r3, r1, #0
     fb8:	bge	fcc <coda_ascii_cursor_read_int64+0x160>
     fbc:	mov	sl, r0
     fc0:	asr	r1, r0, #31
     fc4:	mov	r8, #1
     fc8:	b	f04 <coda_ascii_cursor_read_int64+0x98>
     fcc:	mov	r0, #64	; 0x40
     fd0:	mov	r1, #0
     fd4:	mov	r8, #1
     fd8:	mov	sl, #64	; 0x40
     fdc:	b	f04 <coda_ascii_cursor_read_int64+0x98>
     fe0:	mvn	r4, #0
     fe4:	b	f64 <coda_ascii_cursor_read_int64+0xf8>
     fe8:	movw	r1, #0
     fec:	movt	r1, #0
     ff0:	mvn	r0, #21
     ff4:	mvn	r4, #0
     ff8:	bl	0 <coda_set_error>
     ffc:	b	f64 <coda_ascii_cursor_read_int64+0xf8>
    1000:	movw	r1, #0
    1004:	movt	r1, #0
    1008:	ldr	r3, [pc, #12]	; 101c <coda_ascii_cursor_read_int64+0x1b0>
    100c:	movw	r0, #0
    1010:	movt	r0, #0
    1014:	movw	r2, #1076	; 0x434
    1018:	bl	0 <__assert_fail>
    101c:	.word	0x0000004c

00001020 <coda_ascii_cursor_read_int8>:
    1020:	strd	r4, [sp, #-16]!
    1024:	str	r6, [sp, #8]
    1028:	mov	r6, r1
    102c:	str	lr, [sp, #12]
    1030:	sub	sp, sp, #8
    1034:	mov	r1, sp
    1038:	bl	e6c <coda_ascii_cursor_read_int64>
    103c:	cmp	r0, #0
    1040:	bne	1078 <coda_ascii_cursor_read_int8+0x58>
    1044:	ldr	r3, [sp]
    1048:	ldr	r2, [sp, #4]
    104c:	adds	r4, r3, #128	; 0x80
    1050:	adc	r5, r2, #0
    1054:	cmp	r5, #0
    1058:	cmpeq	r4, #255	; 0xff
    105c:	strbls	r3, [r6]
    1060:	bhi	1080 <coda_ascii_cursor_read_int8+0x60>
    1064:	add	sp, sp, #8
    1068:	ldrd	r4, [sp]
    106c:	ldr	r6, [sp, #8]
    1070:	add	sp, sp, #12
    1074:	pop	{pc}		; (ldr pc, [sp], #4)
    1078:	mvn	r0, #0
    107c:	b	1064 <coda_ascii_cursor_read_int8+0x44>
    1080:	movw	r1, #0
    1084:	movt	r1, #0
    1088:	movw	r0, #65236	; 0xfed4
    108c:	movt	r0, #65535	; 0xffff
    1090:	bl	0 <coda_set_error>
    1094:	mvn	r0, #0
    1098:	b	1064 <coda_ascii_cursor_read_int8+0x44>

0000109c <coda_ascii_cursor_read_int16>:
    109c:	strd	r4, [sp, #-24]!	; 0xffffffe8
    10a0:	str	r6, [sp, #8]
    10a4:	mov	r6, r1
    10a8:	strd	r8, [sp, #12]
    10ac:	str	lr, [sp, #20]
    10b0:	sub	sp, sp, #8
    10b4:	mov	r1, sp
    10b8:	bl	e6c <coda_ascii_cursor_read_int64>
    10bc:	cmp	r0, #0
    10c0:	bne	1104 <coda_ascii_cursor_read_int16+0x68>
    10c4:	ldr	r3, [sp]
    10c8:	mov	r9, #0
    10cc:	movw	r8, #65535	; 0xffff
    10d0:	ldr	r2, [sp, #4]
    10d4:	adds	r4, r3, #32768	; 0x8000
    10d8:	adc	r5, r2, #0
    10dc:	cmp	r5, r9
    10e0:	cmpeq	r4, r8
    10e4:	strhls	r3, [r6]
    10e8:	bhi	110c <coda_ascii_cursor_read_int16+0x70>
    10ec:	add	sp, sp, #8
    10f0:	ldrd	r4, [sp]
    10f4:	ldr	r6, [sp, #8]
    10f8:	ldrd	r8, [sp, #12]
    10fc:	add	sp, sp, #20
    1100:	pop	{pc}		; (ldr pc, [sp], #4)
    1104:	mvn	r0, #0
    1108:	b	10ec <coda_ascii_cursor_read_int16+0x50>
    110c:	movw	r1, #0
    1110:	movt	r1, #0
    1114:	movw	r0, #65236	; 0xfed4
    1118:	movt	r0, #65535	; 0xffff
    111c:	bl	0 <coda_set_error>
    1120:	mvn	r0, #0
    1124:	b	10ec <coda_ascii_cursor_read_int16+0x50>

00001128 <coda_ascii_cursor_read_int32>:
    1128:	strd	r4, [sp, #-24]!	; 0xffffffe8
    112c:	str	r6, [sp, #8]
    1130:	mov	r6, r1
    1134:	strd	r8, [sp, #12]
    1138:	str	lr, [sp, #20]
    113c:	sub	sp, sp, #8
    1140:	mov	r1, sp
    1144:	bl	e6c <coda_ascii_cursor_read_int64>
    1148:	cmp	r0, #0
    114c:	bne	1190 <coda_ascii_cursor_read_int32+0x68>
    1150:	ldr	r3, [sp]
    1154:	mov	r9, #0
    1158:	mvn	r8, #0
    115c:	ldr	r2, [sp, #4]
    1160:	adds	r4, r3, #-2147483648	; 0x80000000
    1164:	adc	r5, r2, #0
    1168:	cmp	r5, r9
    116c:	cmpeq	r4, r8
    1170:	strls	r3, [r6]
    1174:	bhi	1198 <coda_ascii_cursor_read_int32+0x70>
    1178:	add	sp, sp, #8
    117c:	ldrd	r4, [sp]
    1180:	ldr	r6, [sp, #8]
    1184:	ldrd	r8, [sp, #12]
    1188:	add	sp, sp, #20
    118c:	pop	{pc}		; (ldr pc, [sp], #4)
    1190:	mvn	r0, #0
    1194:	b	1178 <coda_ascii_cursor_read_int32+0x50>
    1198:	movw	r1, #0
    119c:	movt	r1, #0
    11a0:	movw	r0, #65236	; 0xfed4
    11a4:	movt	r0, #65535	; 0xffff
    11a8:	bl	0 <coda_set_error>
    11ac:	mvn	r0, #0
    11b0:	b	1178 <coda_ascii_cursor_read_int32+0x50>

000011b4 <coda_ascii_parse_uint64>:
    11b4:	strd	r4, [sp, #-36]!	; 0xffffffdc
    11b8:	strd	r6, [sp, #8]
    11bc:	strd	r8, [sp, #16]
    11c0:	strd	sl, [sp, #24]
    11c4:	subs	sl, r1, #0
    11c8:	str	lr, [sp, #32]
    11cc:	sub	sp, sp, #12
    11d0:	ldrb	r8, [r0]
    11d4:	strd	r2, [sp]
    11d8:	ble	12f4 <coda_ascii_parse_uint64+0x140>
    11dc:	cmp	r8, #9
    11e0:	cmpne	r8, #32
    11e4:	bne	1368 <coda_ascii_parse_uint64+0x1b4>
    11e8:	add	r2, r0, #1
    11ec:	mov	r6, sl
    11f0:	b	1200 <coda_ascii_parse_uint64+0x4c>
    11f4:	cmp	r3, #9
    11f8:	cmpne	r3, #32
    11fc:	bne	122c <coda_ascii_parse_uint64+0x78>
    1200:	subs	r6, r6, #1
    1204:	mov	r0, r2
    1208:	ldrb	r3, [r2]
    120c:	add	r2, r2, #1
    1210:	bne	11f4 <coda_ascii_parse_uint64+0x40>
    1214:	mvn	r0, #102	; 0x66
    1218:	movw	r1, #0
    121c:	movt	r1, #0
    1220:	bl	0 <coda_set_error>
    1224:	mvn	r0, #0
    1228:	b	12d8 <coda_ascii_parse_uint64+0x124>
    122c:	cmp	r3, #43	; 0x2b
    1230:	beq	1300 <coda_ascii_parse_uint64+0x14c>
    1234:	ldrb	r8, [r0]
    1238:	sub	r8, r8, #48	; 0x30
    123c:	uxtb	r3, r8
    1240:	cmp	r3, #9
    1244:	bhi	1214 <coda_ascii_parse_uint64+0x60>
    1248:	add	ip, r0, #1
    124c:	asr	r9, r8, #31
    1250:	mov	r4, #0
    1254:	mov	r5, #0
    1258:	b	1294 <coda_ascii_parse_uint64+0xe0>
    125c:	ldrb	fp, [r7], #1
    1260:	sub	lr, fp, #48	; 0x30
    1264:	asr	r9, lr, #31
    1268:	mov	r8, lr
    126c:	mvn	r0, lr
    1270:	uxtb	lr, lr
    1274:	cmp	lr, #9
    1278:	mvn	r1, r9
    127c:	bhi	1314 <coda_ascii_parse_uint64+0x160>
    1280:	bl	0 <__aeabi_uldivmod>
    1284:	cmp	r1, r5
    1288:	mov	ip, r7
    128c:	cmpeq	r0, r4
    1290:	bcc	1350 <coda_ascii_parse_uint64+0x19c>
    1294:	lsl	r0, r5, #2
    1298:	mov	r7, ip
    129c:	mov	r2, #10
    12a0:	lsl	r1, r4, #2
    12a4:	mov	r3, #0
    12a8:	orr	r0, r0, r4, lsr #30
    12ac:	adds	r1, r1, r4
    12b0:	adc	r0, r0, r5
    12b4:	adds	r1, r1, r1
    12b8:	adc	r0, r0, r0
    12bc:	adds	r4, r1, r8
    12c0:	adc	r5, r0, r9
    12c4:	subs	r6, r6, #1
    12c8:	bne	125c <coda_ascii_parse_uint64+0xa8>
    12cc:	sub	r0, sl, r6
    12d0:	ldr	r3, [sp]
    12d4:	strd	r4, [r3]
    12d8:	add	sp, sp, #12
    12dc:	ldrd	r4, [sp]
    12e0:	ldrd	r6, [sp, #8]
    12e4:	ldrd	r8, [sp, #16]
    12e8:	ldrd	sl, [sp, #24]
    12ec:	add	sp, sp, #32
    12f0:	pop	{pc}		; (ldr pc, [sp], #4)
    12f4:	cmp	r8, #43	; 0x2b
    12f8:	bne	1214 <coda_ascii_parse_uint64+0x60>
    12fc:	mov	r6, sl
    1300:	sub	r6, r6, #1
    1304:	add	r0, r0, #1
    1308:	cmp	r6, #0
    130c:	bgt	1234 <coda_ascii_parse_uint64+0x80>
    1310:	b	1214 <coda_ascii_parse_uint64+0x60>
    1314:	ldr	r3, [sp, #4]
    1318:	cmp	r3, #0
    131c:	bne	12cc <coda_ascii_parse_uint64+0x118>
    1320:	cmp	fp, #32
    1324:	cmpne	fp, #9
    1328:	beq	1340 <coda_ascii_parse_uint64+0x18c>
    132c:	b	1378 <coda_ascii_parse_uint64+0x1c4>
    1330:	ldrb	r3, [ip, #1]!
    1334:	cmp	r3, #9
    1338:	cmpne	r3, #32
    133c:	bne	1378 <coda_ascii_parse_uint64+0x1c4>
    1340:	subs	r6, r6, #1
    1344:	bne	1330 <coda_ascii_parse_uint64+0x17c>
    1348:	mov	r0, sl
    134c:	b	12d0 <coda_ascii_parse_uint64+0x11c>
    1350:	mvn	r0, #102	; 0x66
    1354:	movw	r1, #0
    1358:	movt	r1, #0
    135c:	bl	0 <coda_set_error>
    1360:	mvn	r0, #0
    1364:	b	12d8 <coda_ascii_parse_uint64+0x124>
    1368:	cmp	r8, #43	; 0x2b
    136c:	movne	r6, sl
    1370:	bne	1238 <coda_ascii_parse_uint64+0x84>
    1374:	b	12fc <coda_ascii_parse_uint64+0x148>
    1378:	mvn	r0, #102	; 0x66
    137c:	movw	r1, #0
    1380:	movt	r1, #0
    1384:	bl	0 <coda_set_error>
    1388:	mvn	r0, #0
    138c:	b	12d8 <coda_ascii_parse_uint64+0x124>

00001390 <coda_ascii_cursor_read_uint64>:
    1390:	ldr	ip, [r0, #4]
    1394:	strd	r4, [sp, #-32]!	; 0xffffffe0
    1398:	mov	r4, r0
    139c:	sub	ip, ip, #1
    13a0:	add	r3, r0, ip, lsl #4
    13a4:	add	ip, ip, #1
    13a8:	ldr	r5, [r3, #8]
    13ac:	ldr	r3, [r5]
    13b0:	strd	r6, [sp, #8]
    13b4:	mov	r6, r1
    13b8:	strd	r8, [sp, #16]
    13bc:	str	sl, [sp, #24]
    13c0:	str	lr, [sp, #28]
    13c4:	sub	sp, sp, #88	; 0x58
    13c8:	add	lr, r0, ip, lsl #4
    13cc:	cmp	r3, #99	; 0x63
    13d0:	add	r1, sp, #16
    13d4:	ldr	r7, [r0, ip, lsl #4]
    13d8:	ldrhi	r5, [r5, #4]
    13dc:	ldr	r9, [lr, #4]
    13e0:	ldrd	r2, [r5, #24]
    13e4:	bl	0 <get_bit_size_boundary>
    13e8:	subs	r8, r0, #0
    13ec:	bne	1504 <coda_ascii_cursor_read_uint64+0x174>
    13f0:	and	r0, r7, #7
    13f4:	mov	r1, r8
    13f8:	orrs	r3, r0, r1
    13fc:	bne	150c <coda_ascii_cursor_read_uint64+0x17c>
    1400:	ldrd	r2, [r5, #24]
    1404:	cmp	r2, #0
    1408:	sbcs	ip, r3, #0
    140c:	blt	14c4 <coda_ascii_cursor_read_uint64+0x134>
    1410:	lsr	sl, r2, #3
    1414:	orr	sl, sl, r3, lsl #29
    1418:	cmp	sl, #64	; 0x40
    141c:	bgt	1524 <coda_ascii_cursor_read_uint64+0x194>
    1420:	asr	r1, sl, #31
    1424:	mov	r0, sl
    1428:	lsr	r2, r7, #3
    142c:	add	r7, sp, #24
    1430:	strd	r0, [sp]
    1434:	asr	r3, r9, #3
    1438:	ldr	r0, [r4]
    143c:	orr	r2, r2, r9, lsl #29
    1440:	str	r7, [sp, #8]
    1444:	bl	9f4 <read_bytes_in_bounds>
    1448:	subs	r4, r0, #0
    144c:	bne	1504 <coda_ascii_cursor_read_uint64+0x174>
    1450:	ldr	r3, [r5, #52]	; 0x34
    1454:	cmp	r3, #0
    1458:	beq	14a8 <coda_ascii_cursor_read_uint64+0x118>
    145c:	mov	r1, sl
    1460:	mov	r0, r7
    1464:	ldr	r2, [r3, #8]
    1468:	add	r3, r3, #12
    146c:	str	r8, [sp]
    1470:	str	r6, [sp, #4]
    1474:	bl	918 <parse_integer_mapping.isra.0>
    1478:	cmp	r0, #0
    147c:	beq	14a8 <coda_ascii_cursor_read_uint64+0x118>
    1480:	cmp	r0, #1
    1484:	mvnne	r4, #0
    1488:	mov	r0, r4
    148c:	add	sp, sp, #88	; 0x58
    1490:	ldrd	r4, [sp]
    1494:	ldrd	r6, [sp, #8]
    1498:	ldrd	r8, [sp, #16]
    149c:	ldr	sl, [sp, #24]
    14a0:	add	sp, sp, #28
    14a4:	pop	{pc}		; (ldr pc, [sp], #4)
    14a8:	mov	r3, r8
    14ac:	mov	r2, r6
    14b0:	mov	r1, sl
    14b4:	mov	r0, r7
    14b8:	bl	11b4 <coda_ascii_parse_uint64>
    14bc:	asr	r4, r0, #31
    14c0:	b	1488 <coda_ascii_cursor_read_uint64+0xf8>
    14c4:	ldrd	r2, [sp, #16]
    14c8:	lsr	r0, r2, #3
    14cc:	asr	r1, r3, #3
    14d0:	orr	r0, r0, r3, lsl #29
    14d4:	cmp	r0, #64	; 0x40
    14d8:	sbcs	r3, r1, #0
    14dc:	bge	14f0 <coda_ascii_cursor_read_uint64+0x160>
    14e0:	mov	sl, r0
    14e4:	asr	r1, r0, #31
    14e8:	mov	r8, #1
    14ec:	b	1428 <coda_ascii_cursor_read_uint64+0x98>
    14f0:	mov	r0, #64	; 0x40
    14f4:	mov	r1, #0
    14f8:	mov	r8, #1
    14fc:	mov	sl, #64	; 0x40
    1500:	b	1428 <coda_ascii_cursor_read_uint64+0x98>
    1504:	mvn	r4, #0
    1508:	b	1488 <coda_ascii_cursor_read_uint64+0xf8>
    150c:	movw	r1, #0
    1510:	movt	r1, #0
    1514:	mvn	r0, #21
    1518:	mvn	r4, #0
    151c:	bl	0 <coda_set_error>
    1520:	b	1488 <coda_ascii_cursor_read_uint64+0xf8>
    1524:	movw	r1, #0
    1528:	movt	r1, #0
    152c:	ldr	r3, [pc, #12]	; 1540 <coda_ascii_cursor_read_uint64+0x1b0>
    1530:	movw	r0, #0
    1534:	movt	r0, #0
    1538:	movw	r2, #1137	; 0x471
    153c:	bl	0 <__assert_fail>
    1540:	.word	0x0000006c

00001544 <coda_ascii_cursor_read_uint8>:
    1544:	str	r4, [sp, #-8]!
    1548:	mov	r4, r1
    154c:	str	lr, [sp, #4]
    1550:	sub	sp, sp, #8
    1554:	mov	r1, sp
    1558:	bl	1390 <coda_ascii_cursor_read_uint64>
    155c:	cmp	r0, #0
    1560:	bne	1588 <coda_ascii_cursor_read_uint8+0x44>
    1564:	ldrd	r2, [sp]
    1568:	cmp	r3, #0
    156c:	cmpeq	r2, #255	; 0xff
    1570:	strbls	r2, [r4]
    1574:	bhi	1590 <coda_ascii_cursor_read_uint8+0x4c>
    1578:	add	sp, sp, #8
    157c:	ldr	r4, [sp]
    1580:	add	sp, sp, #4
    1584:	pop	{pc}		; (ldr pc, [sp], #4)
    1588:	mvn	r0, #0
    158c:	b	1578 <coda_ascii_cursor_read_uint8+0x34>
    1590:	movw	r1, #0
    1594:	movt	r1, #0
    1598:	movw	r0, #65236	; 0xfed4
    159c:	movt	r0, #65535	; 0xffff
    15a0:	bl	0 <coda_set_error>
    15a4:	mvn	r0, #0
    15a8:	b	1578 <coda_ascii_cursor_read_uint8+0x34>

000015ac <coda_ascii_cursor_read_uint16>:
    15ac:	str	r4, [sp, #-16]!
    15b0:	mov	r4, r1
    15b4:	strd	r6, [sp, #4]
    15b8:	str	lr, [sp, #12]
    15bc:	sub	sp, sp, #8
    15c0:	mov	r1, sp
    15c4:	bl	1390 <coda_ascii_cursor_read_uint64>
    15c8:	cmp	r0, #0
    15cc:	bne	1600 <coda_ascii_cursor_read_uint16+0x54>
    15d0:	ldrd	r2, [sp]
    15d4:	mov	r7, #0
    15d8:	movw	r6, #65535	; 0xffff
    15dc:	cmp	r3, r7
    15e0:	cmpeq	r2, r6
    15e4:	strhls	r2, [r4]
    15e8:	bhi	1608 <coda_ascii_cursor_read_uint16+0x5c>
    15ec:	add	sp, sp, #8
    15f0:	ldr	r4, [sp]
    15f4:	ldrd	r6, [sp, #4]
    15f8:	add	sp, sp, #12
    15fc:	pop	{pc}		; (ldr pc, [sp], #4)
    1600:	mvn	r0, #0
    1604:	b	15ec <coda_ascii_cursor_read_uint16+0x40>
    1608:	movw	r1, #0
    160c:	movt	r1, #0
    1610:	movw	r0, #65236	; 0xfed4
    1614:	movt	r0, #65535	; 0xffff
    1618:	bl	0 <coda_set_error>
    161c:	mvn	r0, #0
    1620:	b	15ec <coda_ascii_cursor_read_uint16+0x40>

00001624 <coda_ascii_cursor_read_uint32>:
    1624:	str	r4, [sp, #-16]!
    1628:	mov	r4, r1
    162c:	strd	r6, [sp, #4]
    1630:	str	lr, [sp, #12]
    1634:	sub	sp, sp, #8
    1638:	mov	r1, sp
    163c:	bl	1390 <coda_ascii_cursor_read_uint64>
    1640:	cmp	r0, #0
    1644:	bne	1678 <coda_ascii_cursor_read_uint32+0x54>
    1648:	ldrd	r2, [sp]
    164c:	mov	r7, #0
    1650:	mvn	r6, #0
    1654:	cmp	r3, r7
    1658:	cmpeq	r2, r6
    165c:	strls	r2, [r4]
    1660:	bhi	1680 <coda_ascii_cursor_read_uint32+0x5c>
    1664:	add	sp, sp, #8
    1668:	ldr	r4, [sp]
    166c:	ldrd	r6, [sp, #4]
    1670:	add	sp, sp, #12
    1674:	pop	{pc}		; (ldr pc, [sp], #4)
    1678:	mvn	r0, #0
    167c:	b	1664 <coda_ascii_cursor_read_uint32+0x40>
    1680:	movw	r1, #0
    1684:	movt	r1, #0
    1688:	movw	r0, #65236	; 0xfed4
    168c:	movt	r0, #65535	; 0xffff
    1690:	bl	0 <coda_set_error>
    1694:	mvn	r0, #0
    1698:	b	1664 <coda_ascii_cursor_read_uint32+0x40>

0000169c <coda_ascii_parse_double>:
    169c:	strd	r4, [sp, #-28]!	; 0xffffffe4
    16a0:	strd	r6, [sp, #8]
    16a4:	subs	r6, r1, #0
    16a8:	strd	r8, [sp, #16]
    16ac:	str	lr, [sp, #24]
    16b0:	sub	sp, sp, #12
    16b4:	ble	192c <coda_ascii_parse_double+0x290>
    16b8:	ldrb	lr, [r0]
    16bc:	cmp	lr, #9
    16c0:	cmpne	lr, #32
    16c4:	bne	16f4 <coda_ascii_parse_double+0x58>
    16c8:	add	r4, r0, #1
    16cc:	mov	ip, r6
    16d0:	b	16e4 <coda_ascii_parse_double+0x48>
    16d4:	ldrb	lr, [r4], #1
    16d8:	cmp	lr, #9
    16dc:	cmpne	lr, #32
    16e0:	bne	16f8 <coda_ascii_parse_double+0x5c>
    16e4:	subs	ip, ip, #1
    16e8:	mov	r0, r4
    16ec:	bne	16d4 <coda_ascii_parse_double+0x38>
    16f0:	b	192c <coda_ascii_parse_double+0x290>
    16f4:	mov	ip, r6
    16f8:	sub	r1, lr, #43	; 0x2b
    16fc:	tst	r1, #253	; 0xfd
    1700:	beq	17f0 <coda_ascii_parse_double+0x154>
    1704:	mov	r5, #0
    1708:	cmp	ip, #2
    170c:	movgt	lr, r5
    1710:	ble	1818 <coda_ascii_parse_double+0x17c>
    1714:	ldrb	r7, [r0]
    1718:	and	r1, r7, #223	; 0xdf
    171c:	cmp	r1, #78	; 0x4e
    1720:	bne	1904 <coda_ascii_parse_double+0x268>
    1724:	ldrb	r1, [r0, #1]
    1728:	and	r1, r1, #223	; 0xdf
    172c:	cmp	r1, #65	; 0x41
    1730:	beq	194c <coda_ascii_parse_double+0x2b0>
    1734:	sub	lr, r7, #48	; 0x30
    1738:	uxtb	r1, lr
    173c:	cmp	r1, #9
    1740:	bhi	1aa8 <coda_ascii_parse_double+0x40c>
    1744:	add	r1, r0, #1
    1748:	vldr	d6, [pc, #976]	; 1b20 <coda_ascii_parse_double+0x484>
    174c:	add	r9, ip, #1
    1750:	vldr	d5, [pc, #976]	; 1b28 <coda_ascii_parse_double+0x48c>
    1754:	b	1770 <coda_ascii_parse_double+0xd4>
    1758:	ldrb	r7, [r1], #1
    175c:	sub	lr, r7, #48	; 0x30
    1760:	uxtb	r8, lr
    1764:	cmp	r8, #9
    1768:	bhi	1820 <coda_ascii_parse_double+0x184>
    176c:	mov	ip, r4
    1770:	vmov	s15, lr
    1774:	subs	r4, ip, #1
    1778:	mov	r0, r1
    177c:	vcvt.f64.s32	d7, s15
    1780:	vmla.f64	d7, d6, d5
    1784:	vmov.f64	d6, d7
    1788:	bne	1758 <coda_ascii_parse_double+0xbc>
    178c:	mov	lr, #0
    1790:	cmp	r5, #0
    1794:	beq	179c <coda_ascii_parse_double+0x100>
    1798:	vneg.f64	d6, d6
    179c:	cmp	r4, #0
    17a0:	bne	1834 <coda_ascii_parse_double+0x198>
    17a4:	sub	r0, r6, r4
    17a8:	cmp	lr, #0
    17ac:	beq	17d4 <coda_ascii_parse_double+0x138>
    17b0:	blt	19c4 <coda_ascii_parse_double+0x328>
    17b4:	vldr	d7, [pc, #884]	; 1b30 <coda_ascii_parse_double+0x494>
    17b8:	sub	lr, lr, #1
    17bc:	vldr	d5, [pc, #868]	; 1b28 <coda_ascii_parse_double+0x48c>
    17c0:	sub	lr, lr, #1
    17c4:	vmul.f64	d7, d7, d5
    17c8:	cmn	lr, #1
    17cc:	bne	17c0 <coda_ascii_parse_double+0x124>
    17d0:	vmul.f64	d6, d6, d7
    17d4:	vstr	d6, [r2]
    17d8:	add	sp, sp, #12
    17dc:	ldrd	r4, [sp]
    17e0:	ldrd	r6, [sp, #8]
    17e4:	ldrd	r8, [sp, #16]
    17e8:	add	sp, sp, #24
    17ec:	pop	{pc}		; (ldr pc, [sp], #4)
    17f0:	sub	r5, lr, #45	; 0x2d
    17f4:	sub	ip, ip, #1
    17f8:	clz	r5, r5
    17fc:	cmp	ip, #2
    1800:	lsr	r5, r5, #5
    1804:	add	r0, r0, #1
    1808:	movgt	lr, #1
    180c:	bgt	1714 <coda_ascii_parse_double+0x78>
    1810:	cmp	ip, #0
    1814:	beq	192c <coda_ascii_parse_double+0x290>
    1818:	ldrb	r7, [r0]
    181c:	b	1734 <coda_ascii_parse_double+0x98>
    1820:	cmp	r7, #46	; 0x2e
    1824:	beq	19ec <coda_ascii_parse_double+0x350>
    1828:	cmp	r5, #0
    182c:	moveq	lr, r5
    1830:	bne	1944 <coda_ascii_parse_double+0x2a8>
    1834:	ldrb	r1, [r0]
    1838:	and	r1, r1, #222	; 0xde
    183c:	cmp	r1, #68	; 0x44
    1840:	bne	18b4 <coda_ascii_parse_double+0x218>
    1844:	subs	ip, r4, #1
    1848:	beq	1b04 <coda_ascii_parse_double+0x468>
    184c:	ldrb	r1, [r0, #1]
    1850:	sub	r5, r1, #43	; 0x2b
    1854:	tst	r5, #253	; 0xfd
    1858:	beq	19a4 <coda_ascii_parse_double+0x308>
    185c:	add	r5, r0, #1
    1860:	mov	r4, ip
    1864:	mov	r8, #0
    1868:	sub	r1, r1, #48	; 0x30
    186c:	uxtb	r0, r1
    1870:	cmp	r0, #9
    1874:	bhi	1b04 <coda_ascii_parse_double+0x468>
    1878:	add	r5, r5, #1
    187c:	mov	ip, #0
    1880:	add	ip, ip, ip, lsl #2
    1884:	subs	r4, r4, #1
    1888:	mov	r0, r5
    188c:	add	ip, r1, ip, lsl #1
    1890:	beq	18a8 <coda_ascii_parse_double+0x20c>
    1894:	ldrb	r1, [r5], #1
    1898:	sub	r1, r1, #48	; 0x30
    189c:	uxtb	r7, r1
    18a0:	cmp	r7, #9
    18a4:	bls	1880 <coda_ascii_parse_double+0x1e4>
    18a8:	cmp	r8, #0
    18ac:	rsbne	ip, ip, #0
    18b0:	add	lr, lr, ip
    18b4:	adds	r1, r4, #0
    18b8:	movne	r1, #1
    18bc:	cmp	r3, #0
    18c0:	moveq	r3, r1
    18c4:	movne	r3, #0
    18c8:	cmp	r3, #0
    18cc:	beq	17a4 <coda_ascii_parse_double+0x108>
    18d0:	ldrb	r3, [r0]
    18d4:	cmp	r3, #9
    18d8:	cmpne	r3, #32
    18dc:	beq	18f4 <coda_ascii_parse_double+0x258>
    18e0:	b	1aec <coda_ascii_parse_double+0x450>
    18e4:	ldrb	r3, [r0, #1]!
    18e8:	cmp	r3, #9
    18ec:	cmpne	r3, #32
    18f0:	bne	1aec <coda_ascii_parse_double+0x450>
    18f4:	subs	r4, r4, #1
    18f8:	bne	18e4 <coda_ascii_parse_double+0x248>
    18fc:	mov	r0, r6
    1900:	b	17a8 <coda_ascii_parse_double+0x10c>
    1904:	cmp	r1, #73	; 0x49
    1908:	bne	1734 <coda_ascii_parse_double+0x98>
    190c:	ldrb	r1, [r0, #1]
    1910:	and	r1, r1, #223	; 0xdf
    1914:	cmp	r1, #78	; 0x4e
    1918:	bne	192c <coda_ascii_parse_double+0x290>
    191c:	ldrb	r1, [r0, #2]
    1920:	and	r1, r1, #223	; 0xdf
    1924:	cmp	r1, #70	; 0x46
    1928:	beq	1a5c <coda_ascii_parse_double+0x3c0>
    192c:	mvn	r0, #102	; 0x66
    1930:	movw	r1, #0
    1934:	movt	r1, #0
    1938:	bl	0 <coda_set_error>
    193c:	mvn	r0, #0
    1940:	b	17d8 <coda_ascii_parse_double+0x13c>
    1944:	mov	lr, #0
    1948:	b	1798 <coda_ascii_parse_double+0xfc>
    194c:	ldrb	r4, [r0, #2]
    1950:	eor	r1, lr, #1
    1954:	and	lr, r4, #223	; 0xdf
    1958:	cmp	lr, #78	; 0x4e
    195c:	movne	r1, #0
    1960:	andeq	r1, r1, #1
    1964:	cmp	r1, #0
    1968:	beq	1734 <coda_ascii_parse_double+0x98>
    196c:	subs	r4, ip, #3
    1970:	movne	r1, #1
    1974:	moveq	r1, #0
    1978:	cmp	r3, #0
    197c:	moveq	r3, r1
    1980:	movne	r3, #0
    1984:	cmp	r3, #0
    1988:	bne	1aec <coda_ascii_parse_double+0x450>
    198c:	str	r2, [sp, #4]
    1990:	bl	0 <coda_NaN>
    1994:	ldr	r2, [sp, #4]
    1998:	sub	r0, r6, r4
    199c:	vstr	d0, [r2]
    19a0:	b	17d8 <coda_ascii_parse_double+0x13c>
    19a4:	sub	r8, r1, #45	; 0x2d
    19a8:	subs	r4, r4, #2
    19ac:	clz	r8, r8
    19b0:	add	r5, r0, #2
    19b4:	lsr	r8, r8, #5
    19b8:	beq	1b04 <coda_ascii_parse_double+0x468>
    19bc:	ldrb	r1, [r0, #2]
    19c0:	b	1868 <coda_ascii_parse_double+0x1cc>
    19c4:	vldr	d5, [pc, #356]	; 1b30 <coda_ascii_parse_double+0x494>
    19c8:	add	lr, lr, #1
    19cc:	vldr	d7, [pc, #340]	; 1b28 <coda_ascii_parse_double+0x48c>
    19d0:	add	lr, lr, #1
    19d4:	vmul.f64	d5, d5, d7
    19d8:	cmp	lr, #1
    19dc:	bne	19d0 <coda_ascii_parse_double+0x334>
    19e0:	vldr	d4, [pc, #328]	; 1b30 <coda_ascii_parse_double+0x494>
    19e4:	vdiv.f64	d7, d4, d5
    19e8:	b	17d0 <coda_ascii_parse_double+0x134>
    19ec:	subs	r8, ip, #2
    19f0:	beq	1ad8 <coda_ascii_parse_double+0x43c>
    19f4:	ldrb	r7, [r0, #1]
    19f8:	sub	r7, r7, #48	; 0x30
    19fc:	uxtb	lr, r7
    1a00:	cmp	lr, #9
    1a04:	bhi	1ad8 <coda_ascii_parse_double+0x43c>
    1a08:	add	ip, r0, r4
    1a0c:	add	r1, r0, #2
    1a10:	vldr	d5, [pc, #272]	; 1b28 <coda_ascii_parse_double+0x48c>
    1a14:	add	r9, r0, #1
    1a18:	b	1a30 <coda_ascii_parse_double+0x394>
    1a1c:	ldrb	r7, [r1], #1
    1a20:	sub	r7, r7, #48	; 0x30
    1a24:	uxtb	r8, r7
    1a28:	cmp	r8, #9
    1a2c:	bhi	1790 <coda_ascii_parse_double+0xf4>
    1a30:	vmov	s15, r7
    1a34:	cmp	ip, r1
    1a38:	mov	r0, r1
    1a3c:	sub	lr, r9, r1
    1a40:	sub	r4, ip, r1
    1a44:	vcvt.f64.s32	d7, s15
    1a48:	vmla.f64	d7, d6, d5
    1a4c:	vmov.f64	d6, d7
    1a50:	bne	1a1c <coda_ascii_parse_double+0x380>
    1a54:	mov	r4, #0
    1a58:	b	1790 <coda_ascii_parse_double+0xf4>
    1a5c:	subs	r4, ip, #3
    1a60:	movne	r1, #1
    1a64:	moveq	r1, #0
    1a68:	cmp	r3, #0
    1a6c:	moveq	r3, r1
    1a70:	movne	r3, #0
    1a74:	cmp	r3, #0
    1a78:	bne	1aec <coda_ascii_parse_double+0x450>
    1a7c:	cmp	r5, #0
    1a80:	str	r2, [sp, #4]
    1a84:	bne	1a9c <coda_ascii_parse_double+0x400>
    1a88:	bl	0 <coda_PlusInf>
    1a8c:	ldr	r2, [sp, #4]
    1a90:	sub	r0, r6, r4
    1a94:	vstr	d0, [r2]
    1a98:	b	17d8 <coda_ascii_parse_double+0x13c>
    1a9c:	bl	0 <coda_MinInf>
    1aa0:	ldr	r2, [sp, #4]
    1aa4:	b	1a90 <coda_ascii_parse_double+0x3f4>
    1aa8:	cmp	r7, #46	; 0x2e
    1aac:	bne	192c <coda_ascii_parse_double+0x290>
    1ab0:	cmp	ip, #1
    1ab4:	beq	192c <coda_ascii_parse_double+0x290>
    1ab8:	ldrb	r7, [r0, #1]
    1abc:	sub	r7, r7, #48	; 0x30
    1ac0:	uxtb	r1, r7
    1ac4:	cmp	r1, #9
    1ac8:	bhi	192c <coda_ascii_parse_double+0x290>
    1acc:	mov	r4, ip
    1ad0:	vldr	d6, [pc, #72]	; 1b20 <coda_ascii_parse_double+0x484>
    1ad4:	b	1a08 <coda_ascii_parse_double+0x36c>
    1ad8:	cmp	ip, r9
    1adc:	movne	r4, r8
    1ae0:	movne	r0, r1
    1ae4:	bne	178c <coda_ascii_parse_double+0xf0>
    1ae8:	b	192c <coda_ascii_parse_double+0x290>
    1aec:	mvn	r0, #102	; 0x66
    1af0:	movw	r1, #0
    1af4:	movt	r1, #0
    1af8:	bl	0 <coda_set_error>
    1afc:	mvn	r0, #0
    1b00:	b	17d8 <coda_ascii_parse_double+0x13c>
    1b04:	mvn	r0, #102	; 0x66
    1b08:	movw	r1, #0
    1b0c:	movt	r1, #0
    1b10:	bl	0 <coda_set_error>
    1b14:	mvn	r0, #0
    1b18:	b	17d8 <coda_ascii_parse_double+0x13c>
    1b1c:	nop	{0}
	...
    1b2c:	.word	0x40240000
    1b30:	.word	0x00000000
    1b34:	.word	0x3ff00000

00001b38 <coda_ascii_cursor_read_double>:
    1b38:	ldr	ip, [r0, #4]
    1b3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
    1b40:	mov	r4, r0
    1b44:	sub	ip, ip, #1
    1b48:	add	r3, r0, ip, lsl #4
    1b4c:	add	ip, ip, #1
    1b50:	ldr	r5, [r3, #8]
    1b54:	ldr	r3, [r5]
    1b58:	strd	r6, [sp, #8]
    1b5c:	strd	r8, [sp, #16]
    1b60:	strd	sl, [sp, #24]
    1b64:	str	lr, [sp, #32]
    1b68:	sub	sp, sp, #100	; 0x64
    1b6c:	add	lr, r0, ip, lsl #4
    1b70:	cmp	r3, #99	; 0x63
    1b74:	ldr	r7, [r0, ip, lsl #4]
    1b78:	str	r1, [sp, #20]
    1b7c:	add	r1, sp, #24
    1b80:	ldrhi	r5, [r5, #4]
    1b84:	ldr	r9, [lr, #4]
    1b88:	ldrd	r2, [r5, #24]
    1b8c:	bl	0 <get_bit_size_boundary>
    1b90:	subs	r8, r0, #0
    1b94:	bne	1d18 <coda_ascii_cursor_read_double+0x1e0>
    1b98:	and	r0, r7, #7
    1b9c:	mov	r1, r8
    1ba0:	orrs	r3, r0, r1
    1ba4:	bne	1d20 <coda_ascii_cursor_read_double+0x1e8>
    1ba8:	ldrd	r2, [r5, #24]
    1bac:	cmp	r2, #0
    1bb0:	sbcs	ip, r3, #0
    1bb4:	blt	1cc0 <coda_ascii_cursor_read_double+0x188>
    1bb8:	lsr	sl, r2, #3
    1bbc:	orr	sl, sl, r3, lsl #29
    1bc0:	cmp	sl, #64	; 0x40
    1bc4:	bgt	1d38 <coda_ascii_cursor_read_double+0x200>
    1bc8:	asr	r1, sl, #31
    1bcc:	mov	r0, sl
    1bd0:	lsr	r2, r7, #3
    1bd4:	add	r7, sp, #32
    1bd8:	strd	r0, [sp]
    1bdc:	asr	r3, r9, #3
    1be0:	ldr	r0, [r4]
    1be4:	orr	r2, r2, r9, lsl #29
    1be8:	str	r7, [sp, #8]
    1bec:	bl	9f4 <read_bytes_in_bounds>
    1bf0:	subs	r9, r0, #0
    1bf4:	bne	1d18 <coda_ascii_cursor_read_double+0x1e0>
    1bf8:	ldr	r3, [r5, #52]	; 0x34
    1bfc:	cmp	r3, #0
    1c00:	beq	1c88 <coda_ascii_cursor_read_double+0x150>
    1c04:	ldr	fp, [r3, #8]
    1c08:	cmp	fp, #0
    1c0c:	ble	1c88 <coda_ascii_cursor_read_double+0x150>
    1c10:	ldr	r5, [r3, #12]
    1c14:	sub	r5, r5, #4
    1c18:	b	1c30 <coda_ascii_cursor_read_double+0xf8>
    1c1c:	cmp	sl, #0
    1c20:	beq	1c78 <coda_ascii_cursor_read_double+0x140>
    1c24:	add	r9, r9, #1
    1c28:	cmp	fp, r9
    1c2c:	beq	1c88 <coda_ascii_cursor_read_double+0x150>
    1c30:	ldr	r6, [r5, #4]!
    1c34:	ldr	r4, [r6]
    1c38:	cmp	r4, #0
    1c3c:	beq	1c1c <coda_ascii_cursor_read_double+0xe4>
    1c40:	cmp	sl, r4
    1c44:	blt	1c24 <coda_ascii_cursor_read_double+0xec>
    1c48:	mov	r2, r4
    1c4c:	mov	r1, r7
    1c50:	ldr	r0, [r6, #4]
    1c54:	bl	0 <memcmp>
    1c58:	cmp	r0, #0
    1c5c:	bne	1c24 <coda_ascii_cursor_read_double+0xec>
    1c60:	eor	r8, r8, #1
    1c64:	cmp	sl, r4
    1c68:	moveq	sl, #0
    1c6c:	andne	sl, r8, #1
    1c70:	cmp	sl, #0
    1c74:	bne	1d00 <coda_ascii_cursor_read_double+0x1c8>
    1c78:	ldrd	r2, [r6, #8]
    1c7c:	ldr	r1, [sp, #20]
    1c80:	strd	r2, [r1]
    1c84:	b	1ca0 <coda_ascii_cursor_read_double+0x168>
    1c88:	mov	r1, sl
    1c8c:	mov	r3, r8
    1c90:	ldr	r2, [sp, #20]
    1c94:	mov	r0, r7
    1c98:	bl	169c <coda_ascii_parse_double>
    1c9c:	asr	sl, r0, #31
    1ca0:	mov	r0, sl
    1ca4:	add	sp, sp, #100	; 0x64
    1ca8:	ldrd	r4, [sp]
    1cac:	ldrd	r6, [sp, #8]
    1cb0:	ldrd	r8, [sp, #16]
    1cb4:	ldrd	sl, [sp, #24]
    1cb8:	add	sp, sp, #32
    1cbc:	pop	{pc}		; (ldr pc, [sp], #4)
    1cc0:	ldrd	r2, [sp, #24]
    1cc4:	lsr	r0, r2, #3
    1cc8:	asr	r1, r3, #3
    1ccc:	orr	r0, r0, r3, lsl #29
    1cd0:	cmp	r0, #64	; 0x40
    1cd4:	sbcs	r3, r1, #0
    1cd8:	bge	1cec <coda_ascii_cursor_read_double+0x1b4>
    1cdc:	mov	sl, r0
    1ce0:	asr	r1, r0, #31
    1ce4:	mov	r8, #1
    1ce8:	b	1bd0 <coda_ascii_cursor_read_double+0x98>
    1cec:	mov	r0, #64	; 0x40
    1cf0:	mov	r1, #0
    1cf4:	mov	r8, #1
    1cf8:	mov	sl, #64	; 0x40
    1cfc:	b	1bd0 <coda_ascii_cursor_read_double+0x98>
    1d00:	movw	r1, #0
    1d04:	movt	r1, #0
    1d08:	mvn	r0, #102	; 0x66
    1d0c:	mvn	sl, #0
    1d10:	bl	0 <coda_set_error>
    1d14:	b	1ca0 <coda_ascii_cursor_read_double+0x168>
    1d18:	mvn	sl, #0
    1d1c:	b	1ca0 <coda_ascii_cursor_read_double+0x168>
    1d20:	movw	r1, #0
    1d24:	movt	r1, #0
    1d28:	mvn	r0, #21
    1d2c:	mvn	sl, #0
    1d30:	bl	0 <coda_set_error>
    1d34:	b	1ca0 <coda_ascii_cursor_read_double+0x168>
    1d38:	movw	r1, #0
    1d3c:	movt	r1, #0
    1d40:	ldr	r3, [pc, #12]	; 1d54 <coda_ascii_cursor_read_double+0x21c>
    1d44:	movw	r0, #0
    1d48:	movt	r0, #0
    1d4c:	movw	r2, #1306	; 0x51a
    1d50:	bl	0 <__assert_fail>
    1d54:	.word	0x0000008c

00001d58 <coda_ascii_cursor_read_float>:
    1d58:	str	r4, [sp, #-8]!
    1d5c:	mov	r4, r1
    1d60:	str	lr, [sp, #4]
    1d64:	sub	sp, sp, #8
    1d68:	mov	r1, sp
    1d6c:	bl	1b38 <coda_ascii_cursor_read_double>
    1d70:	cmp	r0, #0
    1d74:	mvnne	r0, #0
    1d78:	vldreq	d7, [sp]
    1d7c:	vcvteq.f32.f64	s14, d7
    1d80:	vstreq	s14, [r4]
    1d84:	add	sp, sp, #8
    1d88:	ldr	r4, [sp]
    1d8c:	add	sp, sp, #4
    1d90:	pop	{pc}		; (ldr pc, [sp], #4)

00001d94 <coda_ascii_cursor_set_asciilines>:
    1d94:	ldr	r3, [r1, #68]	; 0x44
    1d98:	strd	r4, [sp, #-24]!	; 0xffffffe8
    1d9c:	mov	r5, r1
    1da0:	mov	r4, r0
    1da4:	strd	r6, [sp, #8]
    1da8:	str	r8, [sp, #16]
    1dac:	str	lr, [sp, #20]
    1db0:	cmp	r3, #0
    1db4:	beq	1dfc <coda_ascii_cursor_set_asciilines+0x68>
    1db8:	ldr	r6, [r5, #76]	; 0x4c
    1dbc:	cmp	r6, #0
    1dc0:	beq	1e14 <coda_ascii_cursor_set_asciilines+0x80>
    1dc4:	mov	ip, #1
    1dc8:	mvn	r1, #0
    1dcc:	mov	r2, #0
    1dd0:	mov	r3, #0
    1dd4:	mov	r0, #0
    1dd8:	stm	r4, {r5, ip}
    1ddc:	str	r6, [r4, #8]
    1de0:	str	r1, [r4, #12]
    1de4:	strd	r2, [r4, #16]
    1de8:	ldrd	r4, [sp]
    1dec:	ldrd	r6, [sp, #8]
    1df0:	ldr	r8, [sp, #16]
    1df4:	add	sp, sp, #20
    1df8:	pop	{pc}		; (ldr pc, [sp], #4)
    1dfc:	mov	r0, r1
    1e00:	bl	0 <coda_ascii_init_asciilines>
    1e04:	cmp	r0, #0
    1e08:	beq	1db8 <coda_ascii_cursor_set_asciilines+0x24>
    1e0c:	mvn	r0, #0
    1e10:	b	1de8 <coda_ascii_cursor_set_asciilines+0x54>
    1e14:	mov	r0, r6
    1e18:	bl	0 <coda_type_array_new>
    1e1c:	subs	r6, r0, #0
    1e20:	beq	1e0c <coda_ascii_cursor_set_asciilines+0x78>
    1e24:	ldr	r1, [r5, #64]	; 0x40
    1e28:	bl	0 <coda_type_array_add_fixed_dimension>
    1e2c:	cmp	r0, #0
    1e30:	bne	1e78 <coda_ascii_cursor_set_asciilines+0xe4>
    1e34:	bl	0 <coda_type_text_new>
    1e38:	subs	r7, r0, #0
    1e3c:	beq	1e78 <coda_ascii_cursor_set_asciilines+0xe4>
    1e40:	mov	r1, #2
    1e44:	bl	0 <coda_type_text_set_special_text_type>
    1e48:	mov	r1, r7
    1e4c:	mov	r0, r6
    1e50:	bl	0 <coda_type_array_set_base_type>
    1e54:	cmp	r0, #0
    1e58:	streq	r6, [r5, #76]	; 0x4c
    1e5c:	beq	1dc4 <coda_ascii_cursor_set_asciilines+0x30>
    1e60:	mov	r0, r6
    1e64:	bl	0 <coda_type_release>
    1e68:	mov	r0, r7
    1e6c:	bl	0 <coda_type_release>
    1e70:	mvn	r0, #0
    1e74:	b	1de8 <coda_ascii_cursor_set_asciilines+0x54>
    1e78:	mov	r0, r6
    1e7c:	bl	0 <coda_type_release>
    1e80:	b	1e0c <coda_ascii_cursor_set_asciilines+0x78>

00001e84 <coda_ascii_cursor_get_num_elements>:
    1e84:	ldr	r3, [r0, #4]
    1e88:	add	r3, r0, r3, lsl #4
    1e8c:	ldr	r3, [r3, #-8]
    1e90:	ldr	r2, [r3]
    1e94:	cmp	r2, #99	; 0x63
    1e98:	ldrhi	r3, [r3, #4]
    1e9c:	ldr	r3, [r3, #8]
    1ea0:	cmp	r3, #1
    1ea4:	bls	1eb8 <coda_ascii_cursor_get_num_elements+0x34>
    1ea8:	mov	r3, #1
    1eac:	mov	r0, #0
    1eb0:	str	r3, [r1]
    1eb4:	bx	lr
    1eb8:	b	0 <coda_ascbin_cursor_get_num_elements>

00001ebc <coda_ascii_cursor_read_bits>:
    1ebc:	strd	r4, [sp, #-24]!	; 0xffffffe8
    1ec0:	strd	r6, [sp, #8]
    1ec4:	mov	r6, #0
    1ec8:	str	r8, [sp, #16]
    1ecc:	mov	r5, r6
    1ed0:	str	lr, [sp, #20]
    1ed4:	sub	sp, sp, #16
    1ed8:	ldr	lr, [sp, #40]	; 0x28
    1edc:	ldr	r7, [sp, #44]	; 0x2c
    1ee0:	and	r4, lr, #7
    1ee4:	orrs	ip, r4, r5
    1ee8:	bne	1f74 <coda_ascii_cursor_read_bits+0xb8>
    1eec:	ldr	ip, [r0, #4]
    1ef0:	lsl	ip, ip, #4
    1ef4:	ldr	r8, [r0, ip]
    1ef8:	add	ip, r0, ip
    1efc:	ldr	ip, [ip, #4]
    1f00:	adds	r2, r2, r8
    1f04:	and	r4, r2, #7
    1f08:	adc	ip, r3, ip
    1f0c:	orrs	r3, r4, r5
    1f10:	bne	1f58 <coda_ascii_cursor_read_bits+0x9c>
    1f14:	lsr	lr, lr, #3
    1f18:	str	r1, [sp, #8]
    1f1c:	asr	r1, r7, #3
    1f20:	ldr	r0, [r0]
    1f24:	orr	lr, lr, r7, lsl #29
    1f28:	lsr	r2, r2, #3
    1f2c:	asr	r3, ip, #3
    1f30:	orr	r2, r2, ip, lsl #29
    1f34:	str	lr, [sp]
    1f38:	str	r1, [sp, #4]
    1f3c:	bl	328 <read_bytes>
    1f40:	add	sp, sp, #16
    1f44:	ldrd	r4, [sp]
    1f48:	ldrd	r6, [sp, #8]
    1f4c:	ldr	r8, [sp, #16]
    1f50:	add	sp, sp, #20
    1f54:	pop	{pc}		; (ldr pc, [sp], #4)
    1f58:	movw	r1, #0
    1f5c:	movt	r1, #0
    1f60:	movw	r0, #65236	; 0xfed4
    1f64:	movt	r0, #65535	; 0xffff
    1f68:	bl	0 <coda_set_error>
    1f6c:	mvn	r0, #0
    1f70:	b	1f40 <coda_ascii_cursor_read_bits+0x84>
    1f74:	mvn	r0, #99	; 0x63
    1f78:	movw	r1, #0
    1f7c:	movt	r1, #0
    1f80:	bl	0 <coda_set_error>
    1f84:	mvn	r0, #0
    1f88:	b	1f40 <coda_ascii_cursor_read_bits+0x84>

00001f8c <coda_ascii_cursor_read_bytes>:
    1f8c:	strd	r4, [sp, #-12]!
    1f90:	mov	r5, #0
    1f94:	str	lr, [sp, #8]
    1f98:	sub	sp, sp, #20
    1f9c:	ldr	lr, [r0, #4]
    1fa0:	ldr	ip, [r0, lr, lsl #4]
    1fa4:	add	lr, r0, lr, lsl #4
    1fa8:	ldr	lr, [lr, #4]
    1fac:	and	r4, ip, #7
    1fb0:	orrs	r4, r4, r5
    1fb4:	bne	1ff0 <coda_ascii_cursor_read_bytes+0x64>
    1fb8:	lsr	ip, ip, #3
    1fbc:	ldrd	r4, [sp, #32]
    1fc0:	orr	ip, ip, lr, lsl #29
    1fc4:	adds	r2, ip, r2
    1fc8:	str	r1, [sp, #8]
    1fcc:	asr	r1, lr, #3
    1fd0:	strd	r4, [sp]
    1fd4:	adc	r3, r1, r3
    1fd8:	ldr	r0, [r0]
    1fdc:	bl	328 <read_bytes>
    1fe0:	add	sp, sp, #20
    1fe4:	ldrd	r4, [sp]
    1fe8:	add	sp, sp, #8
    1fec:	pop	{pc}		; (ldr pc, [sp], #4)
    1ff0:	movw	r1, #0
    1ff4:	movt	r1, #0
    1ff8:	movw	r0, #65236	; 0xfed4
    1ffc:	movt	r0, #65535	; 0xffff
    2000:	bl	0 <coda_set_error>
    2004:	mvn	r0, #0
    2008:	b	1fe0 <coda_ascii_cursor_read_bytes+0x54>

0000200c <coda_ascii_cursor_get_bit_size>:
    200c:	ldr	r3, [r0, #4]
    2010:	strd	r4, [sp, #-36]!	; 0xffffffdc
    2014:	sub	r3, r3, #1
    2018:	add	r2, r0, r3, lsl #4
    201c:	ldr	r5, [r2, #8]
    2020:	ldr	r2, [r5]
    2024:	strd	r6, [sp, #8]
    2028:	strd	r8, [sp, #16]
    202c:	strd	sl, [sp, #24]
    2030:	str	lr, [sp, #32]
    2034:	sub	sp, sp, #668	; 0x29c
    2038:	cmp	r2, #99	; 0x63
    203c:	ldrhi	r5, [r5, #4]
    2040:	ldrd	r6, [r5, #24]
    2044:	cmp	r6, #0
    2048:	sbcs	r2, r7, #0
    204c:	movge	fp, #0
    2050:	strdge	r6, [r1]
    2054:	bge	2160 <coda_ascii_cursor_get_bit_size+0x154>
    2058:	ldr	r2, [r5, #8]
    205c:	mov	r4, r0
    2060:	str	r1, [sp, #20]
    2064:	cmp	r2, #1
    2068:	bls	2180 <coda_ascii_cursor_get_bit_size+0x174>
    206c:	add	ip, r3, #1
    2070:	add	r1, sp, #72	; 0x48
    2074:	add	lr, r0, ip, lsl #4
    2078:	mvn	r2, #0
    207c:	mvn	r3, #0
    2080:	ldr	r7, [r0, ip, lsl #4]
    2084:	ldr	r6, [lr, #4]
    2088:	bl	0 <get_bit_size_boundary>
    208c:	subs	fp, r0, #0
    2090:	bne	2368 <coda_ascii_cursor_get_bit_size+0x35c>
    2094:	ldr	r3, [r5, #8]
    2098:	sub	r2, r3, #2
    209c:	cmp	r2, #1
    20a0:	bls	221c <coda_ascii_cursor_get_bit_size+0x210>
    20a4:	cmp	r3, #4
    20a8:	beq	218c <coda_ascii_cursor_get_bit_size+0x180>
    20ac:	cmp	r3, #6
    20b0:	beq	233c <coda_ascii_cursor_get_bit_size+0x330>
    20b4:	ldr	r9, [r5, #32]
    20b8:	mvn	r8, #0
    20bc:	cmp	r9, #0
    20c0:	bne	2198 <coda_ascii_cursor_get_bit_size+0x18c>
    20c4:	sub	r2, r3, #2
    20c8:	cmp	r2, #1
    20cc:	bls	23a8 <coda_ascii_cursor_get_bit_size+0x39c>
    20d0:	cmp	r3, #4
    20d4:	bne	2a14 <coda_ascii_cursor_get_bit_size+0xa08>
    20d8:	ldr	r3, [r5, #44]	; 0x2c
    20dc:	cmp	r3, #4
    20e0:	ldrls	pc, [pc, r3, lsl #2]
    20e4:	b	2160 <coda_ascii_cursor_get_bit_size+0x154>
    20e8:	.word	0x000029f8
    20ec:	.word	0x000024b8
    20f0:	.word	0x000023e0
    20f4:	.word	0x000023e0
    20f8:	.word	0x000024e8
    20fc:	mov	r4, r8
    2100:	ldr	r1, [ip, r4, lsl #2]
    2104:	ldr	ip, [r5, #44]	; 0x2c
    2108:	subs	r6, r1, r2
    210c:	ldr	r2, [sp, #20]
    2110:	rsc	r7, r3, r1, asr #31
    2114:	lsl	r1, r6, #3
    2118:	cmp	ip, #3
    211c:	lsl	r3, r7, #3
    2120:	orr	r3, r3, r6, lsr #29
    2124:	stm	r2, {r1, r3}
    2128:	bne	2160 <coda_ascii_cursor_get_bit_size+0x154>
    212c:	cmp	lr, r4
    2130:	beq	2948 <coda_ascii_cursor_get_bit_size+0x93c>
    2134:	ldr	r2, [r0, #60]	; 0x3c
    2138:	subs	ip, r1, #8
    213c:	sbc	r0, r3, #0
    2140:	ldr	lr, [sp, #20]
    2144:	cmp	r2, #3
    2148:	str	ip, [lr]
    214c:	str	r0, [lr, #4]
    2150:	bne	2160 <coda_ascii_cursor_get_bit_size+0x154>
    2154:	subs	r1, r1, #16
    2158:	sbc	r3, r3, #0
    215c:	stm	lr, {r1, r3}
    2160:	mov	r0, fp
    2164:	add	sp, sp, #668	; 0x29c
    2168:	ldrd	r4, [sp]
    216c:	ldrd	r6, [sp, #8]
    2170:	ldrd	r8, [sp, #16]
    2174:	ldrd	sl, [sp, #24]
    2178:	add	sp, sp, #32
    217c:	pop	{pc}		; (ldr pc, [sp], #4)
    2180:	bl	0 <coda_ascbin_cursor_get_bit_size>
    2184:	mov	fp, r0
    2188:	b	2160 <coda_ascii_cursor_get_bit_size+0x154>
    218c:	ldr	r9, [r5, #32]
    2190:	cmp	r9, #0
    2194:	beq	2700 <coda_ascii_cursor_get_bit_size+0x6f4>
    2198:	mov	r0, r9
    219c:	mov	r1, r4
    21a0:	ldr	r2, [sp, #20]
    21a4:	bl	0 <coda_expression_eval_integer>
    21a8:	cmp	r0, #0
    21ac:	bne	2958 <coda_ascii_cursor_get_bit_size+0x94c>
    21b0:	ldrd	r6, [r5, #24]
    21b4:	mvn	r1, #0
    21b8:	mvn	r0, #7
    21bc:	ldr	r3, [sp, #20]
    21c0:	cmp	r7, r1
    21c4:	cmpeq	r6, r0
    21c8:	ldrd	r2, [r3]
    21cc:	bne	21ec <coda_ascii_cursor_get_bit_size+0x1e0>
    21d0:	lsl	r1, r3, #3
    21d4:	lsl	r0, r2, #3
    21d8:	orr	r1, r1, r2, lsr #29
    21dc:	mov	r2, r0
    21e0:	mov	r3, r1
    21e4:	ldr	r1, [sp, #20]
    21e8:	strd	r2, [r1]
    21ec:	cmp	r2, #0
    21f0:	sbcs	r1, r3, #0
    21f4:	bge	2160 <coda_ascii_cursor_get_bit_size+0x154>
    21f8:	movw	r1, #0
    21fc:	movt	r1, #0
    2200:	movw	r0, #65236	; 0xfed4
    2204:	movt	r0, #65535	; 0xffff
    2208:	bl	0 <coda_set_error>
    220c:	mov	r0, r4
    2210:	mvn	fp, #0
    2214:	bl	0 <coda_cursor_add_to_error_message>
    2218:	b	2160 <coda_ascii_cursor_get_bit_size+0x154>
    221c:	ldr	r9, [r5, #52]	; 0x34
    2220:	cmp	r9, #0
    2224:	beq	2398 <coda_ascii_cursor_get_bit_size+0x38c>
    2228:	ldrd	r2, [sp, #72]	; 0x48
    222c:	lsr	r0, r2, #3
    2230:	asr	r1, r3, #3
    2234:	orr	r0, r0, r3, lsl #29
    2238:	cmp	r0, #64	; 0x40
    223c:	sbcs	r3, r1, #0
    2240:	movlt	r8, r0
    2244:	asrlt	r1, r0, #31
    2248:	blt	2258 <coda_ascii_cursor_get_bit_size+0x24c>
    224c:	mov	r8, #64	; 0x40
    2250:	mov	r0, #64	; 0x40
    2254:	mov	r1, #0
    2258:	lsr	r2, r7, #3
    225c:	strd	r0, [sp]
    2260:	add	r1, sp, #80	; 0x50
    2264:	asr	r3, r6, #3
    2268:	ldr	r0, [r4]
    226c:	orr	r2, r2, r6, lsl #29
    2270:	str	r1, [sp, #8]
    2274:	bl	9f4 <read_bytes_in_bounds>
    2278:	subs	r7, r0, #0
    227c:	bne	2368 <coda_ascii_cursor_get_bit_size+0x35c>
    2280:	cmp	r9, #0
    2284:	beq	2328 <coda_ascii_cursor_get_bit_size+0x31c>
    2288:	ldr	r2, [r9, #8]
    228c:	cmp	r2, #0
    2290:	ble	2318 <coda_ascii_cursor_get_bit_size+0x30c>
    2294:	ldr	r3, [r9, #12]
    2298:	str	r5, [sp, #24]
    229c:	mov	r5, r8
    22a0:	mov	r8, r4
    22a4:	mov	r4, r2
    22a8:	sub	sl, r3, #4
    22ac:	b	22c4 <coda_ascii_cursor_get_bit_size+0x2b8>
    22b0:	cmp	r5, #0
    22b4:	beq	2370 <coda_ascii_cursor_get_bit_size+0x364>
    22b8:	add	r7, r7, #1
    22bc:	cmp	r7, r4
    22c0:	beq	230c <coda_ascii_cursor_get_bit_size+0x300>
    22c4:	ldr	r0, [sl, #4]!
    22c8:	ldr	r6, [r0]
    22cc:	cmp	r6, #0
    22d0:	beq	22b0 <coda_ascii_cursor_get_bit_size+0x2a4>
    22d4:	cmp	r6, r5
    22d8:	bgt	22b8 <coda_ascii_cursor_get_bit_size+0x2ac>
    22dc:	mov	r2, r6
    22e0:	add	r1, sp, #80	; 0x50
    22e4:	ldr	r0, [r0, #4]
    22e8:	bl	0 <memcmp>
    22ec:	cmp	r0, #0
    22f0:	bne	22b8 <coda_ascii_cursor_get_bit_size+0x2ac>
    22f4:	lsl	r6, r6, #3
    22f8:	ldr	r3, [sp, #20]
    22fc:	mov	fp, r0
    2300:	asr	r7, r6, #31
    2304:	strd	r6, [r3]
    2308:	b	2160 <coda_ascii_cursor_get_bit_size+0x154>
    230c:	mov	r4, r8
    2310:	mov	r8, r5
    2314:	ldr	r5, [sp, #24]
    2318:	ldrd	r2, [r9]
    231c:	cmp	r2, #0
    2320:	sbcs	r1, r3, #0
    2324:	bge	2388 <coda_ascii_cursor_get_bit_size+0x37c>
    2328:	ldr	r3, [r5, #8]
    232c:	cmp	r3, #6
    2330:	beq	2348 <coda_ascii_cursor_get_bit_size+0x33c>
    2334:	ldr	r9, [r5, #32]
    2338:	b	20bc <coda_ascii_cursor_get_bit_size+0xb0>
    233c:	ldr	r3, [r5, #40]	; 0x28
    2340:	cmp	r3, #2
    2344:	beq	25c0 <coda_ascii_cursor_get_bit_size+0x5b4>
    2348:	mov	r1, r4
    234c:	mov	r2, #520	; 0x208
    2350:	add	r0, sp, #144	; 0x90
    2354:	bl	0 <memcpy>
    2358:	add	r0, sp, #144	; 0x90
    235c:	bl	0 <coda_cursor_use_base_type_of_special_type>
    2360:	cmp	r0, #0
    2364:	beq	25ac <coda_ascii_cursor_get_bit_size+0x5a0>
    2368:	mvn	fp, #0
    236c:	b	2160 <coda_ascii_cursor_get_bit_size+0x154>
    2370:	ldr	r1, [sp, #20]
    2374:	mov	r2, #0
    2378:	mov	r3, #0
    237c:	mov	fp, r5
    2380:	strd	r2, [r1]
    2384:	b	2160 <coda_ascii_cursor_get_bit_size+0x154>
    2388:	ldr	r1, [sp, #20]
    238c:	mov	fp, #0
    2390:	strd	r2, [r1]
    2394:	b	2160 <coda_ascii_cursor_get_bit_size+0x154>
    2398:	ldr	r9, [r5, #32]
    239c:	cmp	r9, #0
    23a0:	bne	2198 <coda_ascii_cursor_get_bit_size+0x18c>
    23a4:	b	2228 <coda_ascii_cursor_get_bit_size+0x21c>
    23a8:	ldr	r3, [r5, #12]
    23ac:	cmp	r3, #9
    23b0:	ldrls	pc, [pc, r3, lsl #2]
    23b4:	b	2ab0 <coda_ascii_cursor_get_bit_size+0xaa4>
    23b8:	.word	0x0000261c
    23bc:	.word	0x00002634
    23c0:	.word	0x0000261c
    23c4:	.word	0x00002634
    23c8:	.word	0x0000261c
    23cc:	.word	0x00002634
    23d0:	.word	0x0000261c
    23d4:	.word	0x00002634
    23d8:	.word	0x000025ec
    23dc:	.word	0x000025ec
    23e0:	ldm	r4, {r0, r2}
    23e4:	mov	r7, #0
    23e8:	ldr	r1, [r0, #16]
    23ec:	ldr	r8, [r4, r2, lsl #4]
    23f0:	add	r2, r4, r2, lsl #4
    23f4:	ldr	r2, [r2, #4]
    23f8:	cmp	r1, #0
    23fc:	and	r6, r8, #7
    2400:	bne	2730 <coda_ascii_cursor_get_bit_size+0x724>
    2404:	orrs	r3, r6, r7
    2408:	bne	2a94 <coda_ascii_cursor_get_bit_size+0xa88>
    240c:	ldr	r3, [r0, #68]	; 0x44
    2410:	cmp	r3, #0
    2414:	beq	2840 <coda_ascii_cursor_get_bit_size+0x834>
    2418:	ldr	lr, [r0, #64]	; 0x40
    241c:	cmp	lr, #0
    2420:	beq	2a7c <coda_ascii_cursor_get_bit_size+0xa70>
    2424:	ldr	r6, [r4, #4]
    2428:	sub	lr, lr, #1
    242c:	mov	r1, #0
    2430:	mov	r8, lr
    2434:	ldr	ip, [r0, #68]	; 0x44
    2438:	add	r7, r4, r6, lsl #4
    243c:	ldr	r6, [r4, r6, lsl #4]
    2440:	ldr	r4, [r7, #4]
    2444:	lsr	r2, r6, #3
    2448:	asr	r3, r4, #3
    244c:	orr	r2, r2, r4, lsl #29
    2450:	cmp	r8, r1
    2454:	beq	20fc <coda_ascii_cursor_get_bit_size+0xf0>
    2458:	add	r4, r8, r1
    245c:	add	r4, r4, r4, lsr #31
    2460:	asr	r4, r4, #1
    2464:	ldr	r6, [ip, r4, lsl #2]
    2468:	asr	r7, r6, #31
    246c:	cmp	r2, r6
    2470:	sbcs	r6, r3, r7
    2474:	movge	r7, r4
    2478:	movge	r4, r8
    247c:	blt	24ac <coda_ascii_cursor_get_bit_size+0x4a0>
    2480:	b	27e4 <coda_ascii_cursor_get_bit_size+0x7d8>
    2484:	add	r6, r1, r4
    2488:	add	r6, r6, r6, lsr #31
    248c:	asr	r6, r6, #1
    2490:	ldr	r8, [ip, r6, lsl #2]
    2494:	mov	r7, r6
    2498:	asr	r9, r8, #31
    249c:	cmp	r2, r8
    24a0:	sbcs	r8, r3, r9
    24a4:	bge	27e4 <coda_ascii_cursor_get_bit_size+0x7d8>
    24a8:	mov	r4, r6
    24ac:	cmp	r1, r4
    24b0:	bne	2484 <coda_ascii_cursor_get_bit_size+0x478>
    24b4:	b	2100 <coda_ascii_cursor_get_bit_size+0xf4>
    24b8:	ldr	r3, [r4]
    24bc:	ldr	r2, [r3, #16]
    24c0:	cmp	r2, #0
    24c4:	bne	2a30 <coda_ascii_cursor_get_bit_size+0xa24>
    24c8:	ldr	r3, [r3, #60]	; 0x3c
    24cc:	cmp	r3, #3
    24d0:	ldrls	pc, [pc, r3, lsl #2]
    24d4:	b	2160 <coda_ascii_cursor_get_bit_size+0x154>
    24d8:	.word	0x00002660
    24dc:	.word	0x000026ec
    24e0:	.word	0x000026ec
    24e4:	.word	0x0000264c
    24e8:	ldr	r3, [r4, #4]
    24ec:	mov	r9, #0
    24f0:	ldr	r5, [r4, r3, lsl #4]
    24f4:	add	r3, r4, r3, lsl #4
    24f8:	ldr	r3, [r3, #4]
    24fc:	and	r8, r5, #7
    2500:	orrs	r2, r8, r9
    2504:	bne	29c4 <coda_ascii_cursor_get_bit_size+0x9b8>
    2508:	ldr	r0, [r4]
    250c:	lsr	r5, r5, #3
    2510:	asr	r6, r3, #3
    2514:	orr	r5, r5, r3, lsl #29
    2518:	ldr	r3, [r0, #8]
    251c:	ldr	r2, [r0, #12]
    2520:	subs	r3, r3, r5
    2524:	str	r3, [sp, #40]	; 0x28
    2528:	sbc	r3, r2, r6
    252c:	str	r3, [sp, #44]	; 0x2c
    2530:	ldrd	r2, [sp, #40]	; 0x28
    2534:	cmp	r2, #1
    2538:	sbcs	r1, r3, #0
    253c:	blt	2720 <coda_ascii_cursor_get_bit_size+0x714>
    2540:	add	sl, sp, #144	; 0x90
    2544:	strd	r2, [sp, #24]
    2548:	str	fp, [sp, #32]
    254c:	mov	fp, r4
    2550:	mov	r4, r6
    2554:	b	2584 <coda_ascii_cursor_get_bit_size+0x578>
    2558:	ldrb	r3, [sp, #144]	; 0x90
    255c:	cmp	r3, #32
    2560:	cmpne	r3, #9
    2564:	bne	271c <coda_ascii_cursor_get_bit_size+0x710>
    2568:	ldrd	r2, [sp, #24]
    256c:	adds	r8, r8, #1
    2570:	adc	r9, r9, #0
    2574:	cmp	r3, r9
    2578:	cmpeq	r2, r8
    257c:	beq	271c <coda_ascii_cursor_get_bit_size+0x710>
    2580:	ldr	r0, [fp]
    2584:	mov	r6, #1
    2588:	mov	r7, #0
    258c:	adds	r2, r8, r5
    2590:	adc	r3, r9, r4
    2594:	strd	r6, [sp]
    2598:	str	sl, [sp, #8]
    259c:	bl	9f4 <read_bytes_in_bounds>
    25a0:	cmp	r0, #0
    25a4:	beq	2558 <coda_ascii_cursor_get_bit_size+0x54c>
    25a8:	b	2368 <coda_ascii_cursor_get_bit_size+0x35c>
    25ac:	add	r0, sp, #144	; 0x90
    25b0:	ldr	r1, [sp, #20]
    25b4:	bl	0 <coda_cursor_get_bit_size>
    25b8:	mov	fp, r0
    25bc:	b	2160 <coda_ascii_cursor_get_bit_size+0x154>
    25c0:	ldr	r3, [r5, #44]	; 0x2c
    25c4:	ldr	r2, [r3, #8]
    25c8:	cmp	r2, #4
    25cc:	bne	29dc <coda_ascii_cursor_get_bit_size+0x9d0>
    25d0:	ldr	r3, [r3, #44]	; 0x2c
    25d4:	cmp	r3, #0
    25d8:	bne	2348 <coda_ascii_cursor_get_bit_size+0x33c>
    25dc:	ldr	r1, [sp, #20]
    25e0:	ldrd	r2, [sp, #72]	; 0x48
    25e4:	strd	r2, [r1]
    25e8:	b	2160 <coda_ascii_cursor_get_bit_size+0x154>
    25ec:	mov	r1, r8
    25f0:	mov	r3, #1
    25f4:	add	r2, sp, #144	; 0x90
    25f8:	add	r0, sp, #80	; 0x50
    25fc:	bl	169c <coda_ascii_parse_double>
    2600:	cmp	r0, #0
    2604:	blt	2368 <coda_ascii_cursor_get_bit_size+0x35c>
    2608:	lsl	r2, r0, #3
    260c:	ldr	r1, [sp, #20]
    2610:	asr	r3, r2, #31
    2614:	strd	r2, [r1]
    2618:	b	2160 <coda_ascii_cursor_get_bit_size+0x154>
    261c:	mov	r1, r8
    2620:	mov	r3, #1
    2624:	add	r2, sp, #144	; 0x90
    2628:	add	r0, sp, #80	; 0x50
    262c:	bl	c44 <coda_ascii_parse_int64>
    2630:	b	2600 <coda_ascii_cursor_get_bit_size+0x5f4>
    2634:	mov	r1, r8
    2638:	mov	r3, #1
    263c:	add	r2, sp, #144	; 0x90
    2640:	add	r0, sp, #80	; 0x50
    2644:	bl	11b4 <coda_ascii_parse_uint64>
    2648:	b	2600 <coda_ascii_cursor_get_bit_size+0x5f4>
    264c:	ldr	r1, [sp, #20]
    2650:	mov	r2, #16
    2654:	mov	r3, #0
    2658:	strd	r2, [r1]
    265c:	b	2160 <coda_ascii_cursor_get_bit_size+0x154>
    2660:	ldr	r1, [r4, #4]
    2664:	mov	r3, #0
    2668:	ldr	r1, [r4, r1, lsl #4]
    266c:	and	r2, r1, #7
    2670:	orrs	r1, r2, r3
    2674:	bne	2a4c <coda_ascii_cursor_get_bit_size+0xa40>
    2678:	mov	r6, #1
    267c:	mov	r7, #0
    2680:	add	r1, sp, #68	; 0x44
    2684:	mov	r0, r4
    2688:	strd	r6, [sp]
    268c:	bl	1f8c <coda_ascii_cursor_read_bytes>
    2690:	subs	fp, r0, #0
    2694:	bne	2368 <coda_ascii_cursor_get_bit_size+0x35c>
    2698:	ldrb	r3, [sp, #68]	; 0x44
    269c:	cmp	r3, #10
    26a0:	beq	28b4 <coda_ascii_cursor_get_bit_size+0x8a8>
    26a4:	cmp	r3, #13
    26a8:	beq	2854 <coda_ascii_cursor_get_bit_size+0x848>
    26ac:	ldr	r3, [r4, #4]
    26b0:	add	r2, sp, #144	; 0x90
    26b4:	add	r1, r4, r3, lsl #4
    26b8:	ldr	r3, [r4, r3, lsl #4]
    26bc:	ldr	r0, [r1, #4]
    26c0:	lsr	r3, r3, #3
    26c4:	asr	r1, r0, #3
    26c8:	orr	r0, r3, r0, lsl #29
    26cc:	bl	0 <coda_str64>
    26d0:	add	r2, sp, #144	; 0x90
    26d4:	movw	r1, #0
    26d8:	movt	r1, #0
    26dc:	movw	r0, #65236	; 0xfed4
    26e0:	movt	r0, #65535	; 0xffff
    26e4:	bl	0 <coda_set_error>
    26e8:	b	2368 <coda_ascii_cursor_get_bit_size+0x35c>
    26ec:	ldr	r1, [sp, #20]
    26f0:	mov	r2, #8
    26f4:	mov	r3, #0
    26f8:	strd	r2, [r1]
    26fc:	b	2160 <coda_ascii_cursor_get_bit_size+0x154>
    2700:	ldr	r1, [r5, #44]	; 0x2c
    2704:	ldrd	r2, [sp, #72]	; 0x48
    2708:	cmp	r1, #0
    270c:	bne	222c <coda_ascii_cursor_get_bit_size+0x220>
    2710:	ldr	r1, [sp, #20]
    2714:	strd	r2, [r1]
    2718:	b	2160 <coda_ascii_cursor_get_bit_size+0x154>
    271c:	ldr	fp, [sp, #32]
    2720:	lsl	r3, r9, #3
    2724:	lsl	r2, r8, #3
    2728:	orr	r3, r3, r8, lsr #29
    272c:	b	2710 <coda_ascii_cursor_get_bit_size+0x704>
    2730:	orrs	r1, r6, r7
    2734:	bne	2a64 <coda_ascii_cursor_get_bit_size+0xa58>
    2738:	ldr	ip, [r0, #8]
    273c:	lsr	lr, r8, #3
    2740:	asr	r8, r2, #3
    2744:	ldr	r1, [r0, #12]
    2748:	orr	lr, lr, r2, lsl #29
    274c:	mov	sl, r8
    2750:	subs	r2, ip, lr
    2754:	mov	ip, r8
    2758:	str	r2, [sp, #32]
    275c:	sbc	r2, r1, r8
    2760:	str	r2, [sp, #36]	; 0x24
    2764:	ldrd	r8, [sp, #32]
    2768:	cmp	r8, #1
    276c:	sbcs	r2, r9, #0
    2770:	blt	2804 <coda_ascii_cursor_get_bit_size+0x7f8>
    2774:	add	sl, sp, #144	; 0x90
    2778:	mov	r8, lr
    277c:	str	r4, [sp, #24]
    2780:	mov	r9, ip
    2784:	str	r5, [sp, #40]	; 0x28
    2788:	b	27bc <coda_ascii_cursor_get_bit_size+0x7b0>
    278c:	ldrb	r3, [sp, #144]	; 0x90
    2790:	cmp	r3, #10
    2794:	cmpne	r3, #13
    2798:	beq	27f0 <coda_ascii_cursor_get_bit_size+0x7e4>
    279c:	ldrd	r2, [sp, #32]
    27a0:	adds	r6, r6, #1
    27a4:	adc	r7, r7, #0
    27a8:	cmp	r3, r7
    27ac:	cmpeq	r2, r6
    27b0:	beq	2824 <coda_ascii_cursor_get_bit_size+0x818>
    27b4:	ldr	r3, [sp, #24]
    27b8:	ldr	r0, [r3]
    27bc:	mov	r4, #1
    27c0:	mov	r5, #0
    27c4:	adds	r2, r8, r6
    27c8:	adc	r3, r9, r7
    27cc:	strd	r4, [sp]
    27d0:	str	sl, [sp, #8]
    27d4:	bl	9f4 <read_bytes_in_bounds>
    27d8:	cmp	r0, #0
    27dc:	beq	278c <coda_ascii_cursor_get_bit_size+0x780>
    27e0:	b	2368 <coda_ascii_cursor_get_bit_size+0x35c>
    27e4:	add	r1, r7, #1
    27e8:	mov	r8, r4
    27ec:	b	2450 <coda_ascii_cursor_get_bit_size+0x444>
    27f0:	ldr	r4, [sp, #24]
    27f4:	mov	lr, r8
    27f8:	mov	sl, r9
    27fc:	ldr	r5, [sp, #40]	; 0x28
    2800:	ldr	r3, [r5, #44]	; 0x2c
    2804:	cmp	r3, #2
    2808:	beq	28d4 <coda_ascii_cursor_get_bit_size+0x8c8>
    280c:	lsl	r3, r7, #3
    2810:	ldr	r1, [sp, #20]
    2814:	lsl	r2, r6, #3
    2818:	orr	r3, r3, r6, lsr #29
    281c:	strd	r2, [r1]
    2820:	b	2160 <coda_ascii_cursor_get_bit_size+0x154>
    2824:	ldr	r5, [sp, #40]	; 0x28
    2828:	ldr	r3, [r5, #44]	; 0x2c
    282c:	cmp	r3, #2
    2830:	bne	280c <coda_ascii_cursor_get_bit_size+0x800>
    2834:	adds	r6, r6, #1
    2838:	adc	r7, r7, #0
    283c:	b	280c <coda_ascii_cursor_get_bit_size+0x800>
    2840:	bl	0 <coda_ascii_init_asciilines>
    2844:	cmp	r0, #0
    2848:	bne	2368 <coda_ascii_cursor_get_bit_size+0x35c>
    284c:	ldr	r0, [r4]
    2850:	b	2418 <coda_ascii_cursor_get_bit_size+0x40c>
    2854:	ldrd	r2, [r4]
    2858:	add	r1, r4, r3, lsl #4
    285c:	ldr	r3, [r4, r3, lsl #4]
    2860:	ldr	r1, [r1, #4]
    2864:	ldr	r0, [r2, #8]
    2868:	lsr	r3, r3, #3
    286c:	ldr	ip, [r2, #12]
    2870:	orr	r3, r3, r1, lsl #29
    2874:	asr	r1, r1, #3
    2878:	subs	r3, r0, r3
    287c:	str	r3, [sp, #56]	; 0x38
    2880:	sbc	r3, ip, r1
    2884:	str	r3, [sp, #60]	; 0x3c
    2888:	ldrd	r0, [sp, #56]	; 0x38
    288c:	cmp	r0, #2
    2890:	sbcs	r3, r1, #0
    2894:	bge	2974 <coda_ascii_cursor_get_bit_size+0x968>
    2898:	ldr	ip, [sp, #20]
    289c:	mov	r0, #8
    28a0:	mov	r1, #0
    28a4:	mov	r3, #2
    28a8:	strd	r0, [ip]
    28ac:	str	r3, [r2, #60]	; 0x3c
    28b0:	b	2160 <coda_ascii_cursor_get_bit_size+0x154>
    28b4:	ldr	r3, [r4]
    28b8:	mov	r0, #8
    28bc:	mov	r1, #0
    28c0:	mov	r2, #1
    28c4:	ldr	ip, [sp, #20]
    28c8:	strd	r0, [ip]
    28cc:	str	r2, [r3, #60]	; 0x3c
    28d0:	b	2160 <coda_ascii_cursor_get_bit_size+0x154>
    28d4:	ldrb	r3, [sp, #144]	; 0x90
    28d8:	cmp	r3, #13
    28dc:	bne	2834 <coda_ascii_cursor_get_bit_size+0x828>
    28e0:	adds	r3, r6, #1
    28e4:	ldrd	r0, [sp, #32]
    28e8:	str	r3, [sp, #48]	; 0x30
    28ec:	adc	r3, r7, #0
    28f0:	str	r3, [sp, #52]	; 0x34
    28f4:	ldrd	r2, [sp, #48]	; 0x30
    28f8:	cmp	r2, r0
    28fc:	sbcs	r3, r3, r1
    2900:	bge	2834 <coda_ascii_cursor_get_bit_size+0x828>
    2904:	adds	r2, lr, r6
    2908:	add	r1, sp, #144	; 0x90
    290c:	ldr	r0, [r4]
    2910:	mov	r5, #0
    2914:	mov	r4, #1
    2918:	adc	r3, sl, r7
    291c:	adds	r2, r2, #1
    2920:	adc	r3, r3, #0
    2924:	strd	r4, [sp]
    2928:	str	r1, [sp, #8]
    292c:	bl	9f4 <read_bytes_in_bounds>
    2930:	cmp	r0, #0
    2934:	bne	2368 <coda_ascii_cursor_get_bit_size+0x35c>
    2938:	ldrb	r3, [sp, #144]	; 0x90
    293c:	cmp	r3, #10
    2940:	ldrdeq	r6, [sp, #48]	; 0x30
    2944:	b	2834 <coda_ascii_cursor_get_bit_size+0x828>
    2948:	ldr	r2, [r0, #72]	; 0x48
    294c:	cmp	r2, #0
    2950:	beq	2160 <coda_ascii_cursor_get_bit_size+0x154>
    2954:	b	2134 <coda_ascii_cursor_get_bit_size+0x128>
    2958:	movw	r0, #0
    295c:	movt	r0, #0
    2960:	bl	0 <coda_add_error_message>
    2964:	mov	r0, r4
    2968:	mvn	fp, #0
    296c:	bl	0 <coda_cursor_add_to_error_message>
    2970:	b	2160 <coda_ascii_cursor_get_bit_size+0x154>
    2974:	add	r1, sp, #68	; 0x44
    2978:	mov	r0, r4
    297c:	strd	r6, [sp]
    2980:	mov	r2, r6
    2984:	mov	r3, r7
    2988:	bl	1f8c <coda_ascii_cursor_read_bytes>
    298c:	cmp	r0, #0
    2990:	bne	2368 <coda_ascii_cursor_get_bit_size+0x35c>
    2994:	ldrb	r3, [sp, #68]	; 0x44
    2998:	cmp	r3, #10
    299c:	ldrne	r2, [r4]
    29a0:	bne	2898 <coda_ascii_cursor_get_bit_size+0x88c>
    29a4:	mov	r0, #16
    29a8:	mov	r1, #0
    29ac:	ldr	r3, [r4]
    29b0:	mov	r2, #3
    29b4:	ldr	ip, [sp, #20]
    29b8:	strd	r0, [ip]
    29bc:	str	r2, [r3, #60]	; 0x3c
    29c0:	b	2160 <coda_ascii_cursor_get_bit_size+0x154>
    29c4:	movw	r1, #0
    29c8:	movt	r1, #0
    29cc:	movw	r0, #65236	; 0xfed4
    29d0:	movt	r0, #65535	; 0xffff
    29d4:	bl	0 <coda_set_error>
    29d8:	b	2368 <coda_ascii_cursor_get_bit_size+0x35c>
    29dc:	movw	r1, #0
    29e0:	movt	r1, #0
    29e4:	ldr	r3, [pc, #224]	; 2acc <coda_ascii_cursor_get_bit_size+0xac0>
    29e8:	movw	r0, #0
    29ec:	movt	r0, #0
    29f0:	movw	r2, #693	; 0x2b5
    29f4:	bl	0 <__assert_fail>
    29f8:	movw	r1, #0
    29fc:	movt	r1, #0
    2a00:	ldr	r3, [pc, #196]	; 2acc <coda_ascii_cursor_get_bit_size+0xac0>
    2a04:	movw	r0, #0
    2a08:	movt	r0, #0
    2a0c:	movw	r2, #1030	; 0x406
    2a10:	bl	0 <__assert_fail>
    2a14:	movw	r1, #0
    2a18:	movt	r1, #0
    2a1c:	ldr	r3, [pc, #168]	; 2acc <coda_ascii_cursor_get_bit_size+0xac0>
    2a20:	movw	r0, #0
    2a24:	movt	r0, #0
    2a28:	mov	r2, #812	; 0x32c
    2a2c:	bl	0 <__assert_fail>
    2a30:	movw	r1, #0
    2a34:	movt	r1, #0
    2a38:	ldr	r3, [pc, #140]	; 2acc <coda_ascii_cursor_get_bit_size+0xac0>
    2a3c:	movw	r0, #0
    2a40:	movt	r0, #0
    2a44:	mov	r2, #816	; 0x330
    2a48:	bl	0 <__assert_fail>
    2a4c:	movw	r1, #0
    2a50:	movt	r1, #0
    2a54:	movw	r0, #65236	; 0xfed4
    2a58:	movt	r0, #65535	; 0xffff
    2a5c:	bl	0 <coda_set_error>
    2a60:	b	2368 <coda_ascii_cursor_get_bit_size+0x35c>
    2a64:	movw	r1, #0
    2a68:	movt	r1, #0
    2a6c:	movw	r0, #65236	; 0xfed4
    2a70:	movt	r0, #65535	; 0xffff
    2a74:	bl	0 <coda_set_error>
    2a78:	b	2368 <coda_ascii_cursor_get_bit_size+0x35c>
    2a7c:	movw	r1, #0
    2a80:	movt	r1, #0
    2a84:	mvn	r0, #300	; 0x12c
    2a88:	mvn	fp, #0
    2a8c:	bl	0 <coda_set_error>
    2a90:	b	2160 <coda_ascii_cursor_get_bit_size+0x154>
    2a94:	movw	r1, #0
    2a98:	movt	r1, #0
    2a9c:	movw	r0, #65236	; 0xfed4
    2aa0:	movt	r0, #65535	; 0xffff
    2aa4:	bl	0 <coda_set_error>
    2aa8:	mvn	fp, #0
    2aac:	b	2160 <coda_ascii_cursor_get_bit_size+0x154>
    2ab0:	movw	r1, #0
    2ab4:	movt	r1, #0
    2ab8:	ldr	r3, [pc, #12]	; 2acc <coda_ascii_cursor_get_bit_size+0xac0>
    2abc:	movw	r0, #0
    2ac0:	movt	r0, #0
    2ac4:	mov	r2, #800	; 0x320
    2ac8:	bl	0 <__assert_fail>
    2acc:	.word	0x000000ac

00002ad0 <coda_ascii_cursor_get_string_length>:
    2ad0:	str	r4, [sp, #-16]!
    2ad4:	mov	r4, r1
    2ad8:	strd	r6, [sp, #4]
    2adc:	str	lr, [sp, #12]
    2ae0:	sub	sp, sp, #8
    2ae4:	mov	r1, sp
    2ae8:	bl	200c <coda_ascii_cursor_get_bit_size>
    2aec:	cmp	r0, #0
    2af0:	bne	2b2c <coda_ascii_cursor_get_string_length+0x5c>
    2af4:	ldrd	r6, [sp]
    2af8:	cmp	r6, #0
    2afc:	sbcs	r3, r7, #0
    2b00:	mvnlt	r3, #0
    2b04:	strlt	r3, [r4]
    2b08:	blt	2b18 <coda_ascii_cursor_get_string_length+0x48>
    2b0c:	lsr	r2, r6, #3
    2b10:	orr	r2, r2, r7, lsl #29
    2b14:	str	r2, [r4]
    2b18:	add	sp, sp, #8
    2b1c:	ldr	r4, [sp]
    2b20:	ldrd	r6, [sp, #4]
    2b24:	add	sp, sp, #12
    2b28:	pop	{pc}		; (ldr pc, [sp], #4)
    2b2c:	mvn	r0, #0
    2b30:	b	2b18 <coda_ascii_cursor_get_string_length+0x48>

00002b34 <coda_ascii_cursor_read_string>:
    2b34:	ldr	r3, [r0, #4]
    2b38:	strd	r4, [sp, #-36]!	; 0xffffffdc
    2b3c:	mov	r5, #0
    2b40:	strd	r6, [sp, #8]
    2b44:	mov	r6, r0
    2b48:	strd	r8, [sp, #16]
    2b4c:	mov	r8, r2
    2b50:	mov	r9, r1
    2b54:	strd	sl, [sp, #24]
    2b58:	sub	r3, r3, #1
    2b5c:	str	lr, [sp, #32]
    2b60:	sub	sp, sp, #28
    2b64:	add	r2, r0, r3, lsl #4
    2b68:	add	r3, r3, #1
    2b6c:	ldr	sl, [r0, r3, lsl #4]
    2b70:	add	r3, r0, r3, lsl #4
    2b74:	ldr	r7, [r2, #8]
    2b78:	ldr	fp, [r3, #4]
    2b7c:	and	r4, sl, #7
    2b80:	ldr	r2, [r7]
    2b84:	cmp	r2, #99	; 0x63
    2b88:	ldrhi	r7, [r7, #4]
    2b8c:	orrs	r3, r4, r5
    2b90:	bne	2c88 <coda_ascii_cursor_read_string+0x154>
    2b94:	ldrd	r2, [r7, #24]
    2b98:	cmp	r2, #0
    2b9c:	sbcs	r1, r3, #0
    2ba0:	add	r1, sp, #16
    2ba4:	blt	2c0c <coda_ascii_cursor_read_string+0xd8>
    2ba8:	bl	0 <get_bit_size_boundary>
    2bac:	cmp	r0, #0
    2bb0:	bne	2c50 <coda_ascii_cursor_read_string+0x11c>
    2bb4:	ldrd	r2, [r7, #24]
    2bb8:	lsr	r4, r2, #3
    2bbc:	asr	r5, r3, #3
    2bc0:	orr	r4, r4, r3, lsl #29
    2bc4:	asr	r3, r8, #31
    2bc8:	cmp	r4, r8
    2bcc:	sbcs	r3, r5, r3
    2bd0:	subge	r4, r8, #1
    2bd4:	asrge	r5, r4, #31
    2bd8:	cmp	r4, #1
    2bdc:	sbcs	r3, r5, #0
    2be0:	bge	2c58 <coda_ascii_cursor_read_string+0x124>
    2be4:	mov	r3, #0
    2be8:	mov	r0, r3
    2bec:	strb	r3, [r9]
    2bf0:	add	sp, sp, #28
    2bf4:	ldrd	r4, [sp]
    2bf8:	ldrd	r6, [sp, #8]
    2bfc:	ldrd	r8, [sp, #16]
    2c00:	ldrd	sl, [sp, #24]
    2c04:	add	sp, sp, #32
    2c08:	pop	{pc}		; (ldr pc, [sp], #4)
    2c0c:	bl	200c <coda_ascii_cursor_get_bit_size>
    2c10:	cmp	r0, #0
    2c14:	bne	2c50 <coda_ascii_cursor_read_string+0x11c>
    2c18:	ldr	r3, [sp, #16]
    2c1c:	mov	r5, r0
    2c20:	ldr	r2, [sp, #20]
    2c24:	and	r4, r3, #7
    2c28:	orrs	r1, r4, r5
    2c2c:	lsreq	r4, r3, #3
    2c30:	asreq	r5, r2, #3
    2c34:	orreq	r4, r4, r2, lsl #29
    2c38:	beq	2bc4 <coda_ascii_cursor_read_string+0x90>
    2c3c:	movw	r1, #0
    2c40:	movt	r1, #0
    2c44:	movw	r0, #65236	; 0xfed4
    2c48:	movt	r0, #65535	; 0xffff
    2c4c:	bl	0 <coda_set_error>
    2c50:	mvn	r0, #0
    2c54:	b	2bf0 <coda_ascii_cursor_read_string+0xbc>
    2c58:	lsr	r2, sl, #3
    2c5c:	strd	r4, [sp]
    2c60:	asr	r3, fp, #3
    2c64:	str	r9, [sp, #8]
    2c68:	orr	r2, r2, fp, lsl #29
    2c6c:	ldr	r0, [r6]
    2c70:	bl	328 <read_bytes>
    2c74:	cmp	r0, #0
    2c78:	bne	2c50 <coda_ascii_cursor_read_string+0x11c>
    2c7c:	add	r4, r9, r4
    2c80:	strb	r0, [r4]
    2c84:	b	2bf0 <coda_ascii_cursor_read_string+0xbc>
    2c88:	movw	r1, #0
    2c8c:	movt	r1, #0
    2c90:	movw	r0, #65236	; 0xfed4
    2c94:	movt	r0, #65535	; 0xffff
    2c98:	bl	0 <coda_set_error>
    2c9c:	mvn	r0, #0
    2ca0:	b	2bf0 <coda_ascii_cursor_read_string+0xbc>

00002ca4 <coda_ascii_cursor_read_int8_array>:
    2ca4:	ldr	r3, [r0, #4]
    2ca8:	strd	r4, [sp, #-16]!
    2cac:	mov	r4, r0
    2cb0:	mov	r5, r1
    2cb4:	add	r3, r0, r3, lsl #4
    2cb8:	ldr	r3, [r3, #-8]
    2cbc:	str	r6, [sp, #8]
    2cc0:	mov	r6, r2
    2cc4:	str	lr, [sp, #12]
    2cc8:	ldr	r2, [r3]
    2ccc:	cmp	r2, #99	; 0x63
    2cd0:	ldrhi	r3, [r3, #4]
    2cd4:	ldr	r3, [r3, #40]	; 0x28
    2cd8:	ldr	r3, [r3]
    2cdc:	cmp	r3, #0
    2ce0:	bne	2d4c <coda_ascii_cursor_read_int8_array+0xa8>
    2ce4:	movw	r1, #0
    2ce8:	movt	r1, #0
    2cec:	mov	r3, #1
    2cf0:	mov	r2, r5
    2cf4:	bl	b44 <read_array.constprop.12>
    2cf8:	cmp	r0, #0
    2cfc:	bne	2d44 <coda_ascii_cursor_read_int8_array+0xa0>
    2d00:	cmp	r6, #0
    2d04:	bne	2d18 <coda_ascii_cursor_read_int8_array+0x74>
    2d08:	ldrd	r4, [sp]
    2d0c:	ldr	r6, [sp, #8]
    2d10:	add	sp, sp, #12
    2d14:	pop	{pc}		; (ldr pc, [sp], #4)
    2d18:	mov	r1, r5
    2d1c:	mov	r0, r4
    2d20:	mov	r2, #1
    2d24:	bl	55c <transpose_array>
    2d28:	adds	r0, r0, #0
    2d2c:	ldrd	r4, [sp]
    2d30:	movne	r0, #1
    2d34:	ldr	r6, [sp, #8]
    2d38:	add	sp, sp, #12
    2d3c:	rsb	r0, r0, #0
    2d40:	pop	{pc}		; (ldr pc, [sp], #4)
    2d44:	mvn	r0, #0
    2d48:	b	2d08 <coda_ascii_cursor_read_int8_array+0x64>
    2d4c:	movw	r1, #0
    2d50:	movt	r1, #0
    2d54:	ldr	r3, [pc, #12]	; 2d68 <coda_ascii_cursor_read_int8_array+0xc4>
    2d58:	movw	r0, #0
    2d5c:	movt	r0, #0
    2d60:	movw	r2, #1464	; 0x5b8
    2d64:	bl	0 <__assert_fail>
    2d68:	.word	0x000000cc

00002d6c <coda_ascii_cursor_read_uint8_array>:
    2d6c:	ldr	r3, [r0, #4]
    2d70:	strd	r4, [sp, #-16]!
    2d74:	mov	r4, r0
    2d78:	mov	r5, r1
    2d7c:	add	r3, r0, r3, lsl #4
    2d80:	ldr	r3, [r3, #-8]
    2d84:	str	r6, [sp, #8]
    2d88:	mov	r6, r2
    2d8c:	str	lr, [sp, #12]
    2d90:	ldr	r2, [r3]
    2d94:	cmp	r2, #99	; 0x63
    2d98:	ldrhi	r3, [r3, #4]
    2d9c:	ldr	r3, [r3, #40]	; 0x28
    2da0:	ldr	r3, [r3]
    2da4:	cmp	r3, #0
    2da8:	bne	2e14 <coda_ascii_cursor_read_uint8_array+0xa8>
    2dac:	movw	r1, #0
    2db0:	movt	r1, #0
    2db4:	mov	r3, #1
    2db8:	mov	r2, r5
    2dbc:	bl	b44 <read_array.constprop.12>
    2dc0:	cmp	r0, #0
    2dc4:	bne	2e0c <coda_ascii_cursor_read_uint8_array+0xa0>
    2dc8:	cmp	r6, #0
    2dcc:	bne	2de0 <coda_ascii_cursor_read_uint8_array+0x74>
    2dd0:	ldrd	r4, [sp]
    2dd4:	ldr	r6, [sp, #8]
    2dd8:	add	sp, sp, #12
    2ddc:	pop	{pc}		; (ldr pc, [sp], #4)
    2de0:	mov	r1, r5
    2de4:	mov	r0, r4
    2de8:	mov	r2, #1
    2dec:	bl	55c <transpose_array>
    2df0:	adds	r0, r0, #0
    2df4:	ldrd	r4, [sp]
    2df8:	movne	r0, #1
    2dfc:	ldr	r6, [sp, #8]
    2e00:	add	sp, sp, #12
    2e04:	rsb	r0, r0, #0
    2e08:	pop	{pc}		; (ldr pc, [sp], #4)
    2e0c:	mvn	r0, #0
    2e10:	b	2dd0 <coda_ascii_cursor_read_uint8_array+0x64>
    2e14:	movw	r1, #0
    2e18:	movt	r1, #0
    2e1c:	ldr	r3, [pc, #12]	; 2e30 <coda_ascii_cursor_read_uint8_array+0xc4>
    2e20:	movw	r0, #0
    2e24:	movt	r0, #0
    2e28:	movw	r2, #1484	; 0x5cc
    2e2c:	bl	0 <__assert_fail>
    2e30:	.word	0x000000f0

00002e34 <coda_ascii_cursor_read_int16_array>:
    2e34:	ldr	r3, [r0, #4]
    2e38:	strd	r4, [sp, #-16]!
    2e3c:	mov	r4, r0
    2e40:	mov	r5, r1
    2e44:	add	r3, r0, r3, lsl #4
    2e48:	ldr	r3, [r3, #-8]
    2e4c:	str	r6, [sp, #8]
    2e50:	mov	r6, r2
    2e54:	str	lr, [sp, #12]
    2e58:	ldr	r2, [r3]
    2e5c:	cmp	r2, #99	; 0x63
    2e60:	ldrhi	r3, [r3, #4]
    2e64:	ldr	r3, [r3, #40]	; 0x28
    2e68:	ldr	r3, [r3]
    2e6c:	cmp	r3, #0
    2e70:	bne	2edc <coda_ascii_cursor_read_int16_array+0xa8>
    2e74:	movw	r1, #0
    2e78:	movt	r1, #0
    2e7c:	mov	r3, #2
    2e80:	mov	r2, r5
    2e84:	bl	b44 <read_array.constprop.12>
    2e88:	cmp	r0, #0
    2e8c:	bne	2ed4 <coda_ascii_cursor_read_int16_array+0xa0>
    2e90:	cmp	r6, #0
    2e94:	bne	2ea8 <coda_ascii_cursor_read_int16_array+0x74>
    2e98:	ldrd	r4, [sp]
    2e9c:	ldr	r6, [sp, #8]
    2ea0:	add	sp, sp, #12
    2ea4:	pop	{pc}		; (ldr pc, [sp], #4)
    2ea8:	mov	r1, r5
    2eac:	mov	r0, r4
    2eb0:	mov	r2, #2
    2eb4:	bl	55c <transpose_array>
    2eb8:	adds	r0, r0, #0
    2ebc:	ldrd	r4, [sp]
    2ec0:	movne	r0, #1
    2ec4:	ldr	r6, [sp, #8]
    2ec8:	add	sp, sp, #12
    2ecc:	rsb	r0, r0, #0
    2ed0:	pop	{pc}		; (ldr pc, [sp], #4)
    2ed4:	mvn	r0, #0
    2ed8:	b	2e98 <coda_ascii_cursor_read_int16_array+0x64>
    2edc:	movw	r1, #0
    2ee0:	movt	r1, #0
    2ee4:	ldr	r3, [pc, #12]	; 2ef8 <coda_ascii_cursor_read_int16_array+0xc4>
    2ee8:	movw	r0, #0
    2eec:	movt	r0, #0
    2ef0:	mov	r2, #1504	; 0x5e0
    2ef4:	bl	0 <__assert_fail>
    2ef8:	.word	0x00000114

00002efc <coda_ascii_cursor_read_uint16_array>:
    2efc:	ldr	r3, [r0, #4]
    2f00:	strd	r4, [sp, #-16]!
    2f04:	mov	r4, r0
    2f08:	mov	r5, r1
    2f0c:	add	r3, r0, r3, lsl #4
    2f10:	ldr	r3, [r3, #-8]
    2f14:	str	r6, [sp, #8]
    2f18:	mov	r6, r2
    2f1c:	str	lr, [sp, #12]
    2f20:	ldr	r2, [r3]
    2f24:	cmp	r2, #99	; 0x63
    2f28:	ldrhi	r3, [r3, #4]
    2f2c:	ldr	r3, [r3, #40]	; 0x28
    2f30:	ldr	r3, [r3]
    2f34:	cmp	r3, #0
    2f38:	bne	2fa4 <coda_ascii_cursor_read_uint16_array+0xa8>
    2f3c:	movw	r1, #0
    2f40:	movt	r1, #0
    2f44:	mov	r3, #2
    2f48:	mov	r2, r5
    2f4c:	bl	b44 <read_array.constprop.12>
    2f50:	cmp	r0, #0
    2f54:	bne	2f9c <coda_ascii_cursor_read_uint16_array+0xa0>
    2f58:	cmp	r6, #0
    2f5c:	bne	2f70 <coda_ascii_cursor_read_uint16_array+0x74>
    2f60:	ldrd	r4, [sp]
    2f64:	ldr	r6, [sp, #8]
    2f68:	add	sp, sp, #12
    2f6c:	pop	{pc}		; (ldr pc, [sp], #4)
    2f70:	mov	r1, r5
    2f74:	mov	r0, r4
    2f78:	mov	r2, #2
    2f7c:	bl	55c <transpose_array>
    2f80:	adds	r0, r0, #0
    2f84:	ldrd	r4, [sp]
    2f88:	movne	r0, #1
    2f8c:	ldr	r6, [sp, #8]
    2f90:	add	sp, sp, #12
    2f94:	rsb	r0, r0, #0
    2f98:	pop	{pc}		; (ldr pc, [sp], #4)
    2f9c:	mvn	r0, #0
    2fa0:	b	2f60 <coda_ascii_cursor_read_uint16_array+0x64>
    2fa4:	movw	r1, #0
    2fa8:	movt	r1, #0
    2fac:	ldr	r3, [pc, #12]	; 2fc0 <coda_ascii_cursor_read_uint16_array+0xc4>
    2fb0:	movw	r0, #0
    2fb4:	movt	r0, #0
    2fb8:	movw	r2, #1524	; 0x5f4
    2fbc:	bl	0 <__assert_fail>
    2fc0:	.word	0x00000138

00002fc4 <coda_ascii_cursor_read_int32_array>:
    2fc4:	ldr	r3, [r0, #4]
    2fc8:	strd	r4, [sp, #-16]!
    2fcc:	mov	r4, r0
    2fd0:	mov	r5, r1
    2fd4:	add	r3, r0, r3, lsl #4
    2fd8:	ldr	r3, [r3, #-8]
    2fdc:	str	r6, [sp, #8]
    2fe0:	mov	r6, r2
    2fe4:	str	lr, [sp, #12]
    2fe8:	ldr	r2, [r3]
    2fec:	cmp	r2, #99	; 0x63
    2ff0:	ldrhi	r3, [r3, #4]
    2ff4:	ldr	r3, [r3, #40]	; 0x28
    2ff8:	ldr	r3, [r3]
    2ffc:	cmp	r3, #0
    3000:	bne	306c <coda_ascii_cursor_read_int32_array+0xa8>
    3004:	movw	r1, #0
    3008:	movt	r1, #0
    300c:	mov	r3, #4
    3010:	mov	r2, r5
    3014:	bl	b44 <read_array.constprop.12>
    3018:	cmp	r0, #0
    301c:	bne	3064 <coda_ascii_cursor_read_int32_array+0xa0>
    3020:	cmp	r6, #0
    3024:	bne	3038 <coda_ascii_cursor_read_int32_array+0x74>
    3028:	ldrd	r4, [sp]
    302c:	ldr	r6, [sp, #8]
    3030:	add	sp, sp, #12
    3034:	pop	{pc}		; (ldr pc, [sp], #4)
    3038:	mov	r1, r5
    303c:	mov	r0, r4
    3040:	mov	r2, #4
    3044:	bl	55c <transpose_array>
    3048:	adds	r0, r0, #0
    304c:	ldrd	r4, [sp]
    3050:	movne	r0, #1
    3054:	ldr	r6, [sp, #8]
    3058:	add	sp, sp, #12
    305c:	rsb	r0, r0, #0
    3060:	pop	{pc}		; (ldr pc, [sp], #4)
    3064:	mvn	r0, #0
    3068:	b	3028 <coda_ascii_cursor_read_int32_array+0x64>
    306c:	movw	r1, #0
    3070:	movt	r1, #0
    3074:	ldr	r3, [pc, #12]	; 3088 <coda_ascii_cursor_read_int32_array+0xc4>
    3078:	movw	r0, #0
    307c:	movt	r0, #0
    3080:	movw	r2, #1544	; 0x608
    3084:	bl	0 <__assert_fail>
    3088:	.word	0x0000015c

0000308c <coda_ascii_cursor_read_uint32_array>:
    308c:	ldr	r3, [r0, #4]
    3090:	strd	r4, [sp, #-16]!
    3094:	mov	r4, r0
    3098:	mov	r5, r1
    309c:	add	r3, r0, r3, lsl #4
    30a0:	ldr	r3, [r3, #-8]
    30a4:	str	r6, [sp, #8]
    30a8:	mov	r6, r2
    30ac:	str	lr, [sp, #12]
    30b0:	ldr	r2, [r3]
    30b4:	cmp	r2, #99	; 0x63
    30b8:	ldrhi	r3, [r3, #4]
    30bc:	ldr	r3, [r3, #40]	; 0x28
    30c0:	ldr	r3, [r3]
    30c4:	cmp	r3, #0
    30c8:	bne	3134 <coda_ascii_cursor_read_uint32_array+0xa8>
    30cc:	movw	r1, #0
    30d0:	movt	r1, #0
    30d4:	mov	r3, #4
    30d8:	mov	r2, r5
    30dc:	bl	b44 <read_array.constprop.12>
    30e0:	cmp	r0, #0
    30e4:	bne	312c <coda_ascii_cursor_read_uint32_array+0xa0>
    30e8:	cmp	r6, #0
    30ec:	bne	3100 <coda_ascii_cursor_read_uint32_array+0x74>
    30f0:	ldrd	r4, [sp]
    30f4:	ldr	r6, [sp, #8]
    30f8:	add	sp, sp, #12
    30fc:	pop	{pc}		; (ldr pc, [sp], #4)
    3100:	mov	r1, r5
    3104:	mov	r0, r4
    3108:	mov	r2, #4
    310c:	bl	55c <transpose_array>
    3110:	adds	r0, r0, #0
    3114:	ldrd	r4, [sp]
    3118:	movne	r0, #1
    311c:	ldr	r6, [sp, #8]
    3120:	add	sp, sp, #12
    3124:	rsb	r0, r0, #0
    3128:	pop	{pc}		; (ldr pc, [sp], #4)
    312c:	mvn	r0, #0
    3130:	b	30f0 <coda_ascii_cursor_read_uint32_array+0x64>
    3134:	movw	r1, #0
    3138:	movt	r1, #0
    313c:	ldr	r3, [pc, #12]	; 3150 <coda_ascii_cursor_read_uint32_array+0xc4>
    3140:	movw	r0, #0
    3144:	movt	r0, #0
    3148:	movw	r2, #1564	; 0x61c
    314c:	bl	0 <__assert_fail>
    3150:	.word	0x00000180

00003154 <coda_ascii_cursor_read_int64_array>:
    3154:	ldr	r3, [r0, #4]
    3158:	strd	r4, [sp, #-16]!
    315c:	mov	r4, r0
    3160:	mov	r5, r1
    3164:	add	r3, r0, r3, lsl #4
    3168:	ldr	r3, [r3, #-8]
    316c:	str	r6, [sp, #8]
    3170:	mov	r6, r2
    3174:	str	lr, [sp, #12]
    3178:	ldr	r2, [r3]
    317c:	cmp	r2, #99	; 0x63
    3180:	ldrhi	r3, [r3, #4]
    3184:	ldr	r3, [r3, #40]	; 0x28
    3188:	ldr	r3, [r3]
    318c:	cmp	r3, #0
    3190:	bne	31fc <coda_ascii_cursor_read_int64_array+0xa8>
    3194:	movw	r1, #0
    3198:	movt	r1, #0
    319c:	mov	r3, #8
    31a0:	mov	r2, r5
    31a4:	bl	b44 <read_array.constprop.12>
    31a8:	cmp	r0, #0
    31ac:	bne	31f4 <coda_ascii_cursor_read_int64_array+0xa0>
    31b0:	cmp	r6, #0
    31b4:	bne	31c8 <coda_ascii_cursor_read_int64_array+0x74>
    31b8:	ldrd	r4, [sp]
    31bc:	ldr	r6, [sp, #8]
    31c0:	add	sp, sp, #12
    31c4:	pop	{pc}		; (ldr pc, [sp], #4)
    31c8:	mov	r1, r5
    31cc:	mov	r0, r4
    31d0:	mov	r2, #4
    31d4:	bl	55c <transpose_array>
    31d8:	adds	r0, r0, #0
    31dc:	ldrd	r4, [sp]
    31e0:	movne	r0, #1
    31e4:	ldr	r6, [sp, #8]
    31e8:	add	sp, sp, #12
    31ec:	rsb	r0, r0, #0
    31f0:	pop	{pc}		; (ldr pc, [sp], #4)
    31f4:	mvn	r0, #0
    31f8:	b	31b8 <coda_ascii_cursor_read_int64_array+0x64>
    31fc:	movw	r1, #0
    3200:	movt	r1, #0
    3204:	ldr	r3, [pc, #12]	; 3218 <coda_ascii_cursor_read_int64_array+0xc4>
    3208:	movw	r0, #0
    320c:	movt	r0, #0
    3210:	mov	r2, #1584	; 0x630
    3214:	bl	0 <__assert_fail>
    3218:	.word	0x000001a4

0000321c <coda_ascii_cursor_read_uint64_array>:
    321c:	ldr	r3, [r0, #4]
    3220:	strd	r4, [sp, #-16]!
    3224:	mov	r4, r0
    3228:	mov	r5, r1
    322c:	add	r3, r0, r3, lsl #4
    3230:	ldr	r3, [r3, #-8]
    3234:	str	r6, [sp, #8]
    3238:	mov	r6, r2
    323c:	str	lr, [sp, #12]
    3240:	ldr	r2, [r3]
    3244:	cmp	r2, #99	; 0x63
    3248:	ldrhi	r3, [r3, #4]
    324c:	ldr	r3, [r3, #40]	; 0x28
    3250:	ldr	r3, [r3]
    3254:	cmp	r3, #0
    3258:	bne	32c4 <coda_ascii_cursor_read_uint64_array+0xa8>
    325c:	movw	r1, #0
    3260:	movt	r1, #0
    3264:	mov	r3, #8
    3268:	mov	r2, r5
    326c:	bl	b44 <read_array.constprop.12>
    3270:	cmp	r0, #0
    3274:	bne	32bc <coda_ascii_cursor_read_uint64_array+0xa0>
    3278:	cmp	r6, #0
    327c:	bne	3290 <coda_ascii_cursor_read_uint64_array+0x74>
    3280:	ldrd	r4, [sp]
    3284:	ldr	r6, [sp, #8]
    3288:	add	sp, sp, #12
    328c:	pop	{pc}		; (ldr pc, [sp], #4)
    3290:	mov	r1, r5
    3294:	mov	r0, r4
    3298:	mov	r2, #8
    329c:	bl	55c <transpose_array>
    32a0:	adds	r0, r0, #0
    32a4:	ldrd	r4, [sp]
    32a8:	movne	r0, #1
    32ac:	ldr	r6, [sp, #8]
    32b0:	add	sp, sp, #12
    32b4:	rsb	r0, r0, #0
    32b8:	pop	{pc}		; (ldr pc, [sp], #4)
    32bc:	mvn	r0, #0
    32c0:	b	3280 <coda_ascii_cursor_read_uint64_array+0x64>
    32c4:	movw	r1, #0
    32c8:	movt	r1, #0
    32cc:	ldr	r3, [pc, #12]	; 32e0 <coda_ascii_cursor_read_uint64_array+0xc4>
    32d0:	movw	r0, #0
    32d4:	movt	r0, #0
    32d8:	movw	r2, #1604	; 0x644
    32dc:	bl	0 <__assert_fail>
    32e0:	.word	0x000001c8

000032e4 <coda_ascii_cursor_read_float_array>:
    32e4:	ldr	r3, [r0, #4]
    32e8:	strd	r4, [sp, #-16]!
    32ec:	mov	r4, r0
    32f0:	mov	r5, r1
    32f4:	add	r3, r0, r3, lsl #4
    32f8:	ldr	r3, [r3, #-8]
    32fc:	str	r6, [sp, #8]
    3300:	mov	r6, r2
    3304:	str	lr, [sp, #12]
    3308:	ldr	r2, [r3]
    330c:	cmp	r2, #99	; 0x63
    3310:	ldrhi	r3, [r3, #4]
    3314:	ldr	r3, [r3, #40]	; 0x28
    3318:	ldr	r3, [r3]
    331c:	cmp	r3, #0
    3320:	bne	338c <coda_ascii_cursor_read_float_array+0xa8>
    3324:	movw	r1, #0
    3328:	movt	r1, #0
    332c:	mov	r3, #4
    3330:	mov	r2, r5
    3334:	bl	b44 <read_array.constprop.12>
    3338:	cmp	r0, #0
    333c:	bne	3384 <coda_ascii_cursor_read_float_array+0xa0>
    3340:	cmp	r6, #0
    3344:	bne	3358 <coda_ascii_cursor_read_float_array+0x74>
    3348:	ldrd	r4, [sp]
    334c:	ldr	r6, [sp, #8]
    3350:	add	sp, sp, #12
    3354:	pop	{pc}		; (ldr pc, [sp], #4)
    3358:	mov	r1, r5
    335c:	mov	r0, r4
    3360:	mov	r2, #4
    3364:	bl	55c <transpose_array>
    3368:	adds	r0, r0, #0
    336c:	ldrd	r4, [sp]
    3370:	movne	r0, #1
    3374:	ldr	r6, [sp, #8]
    3378:	add	sp, sp, #12
    337c:	rsb	r0, r0, #0
    3380:	pop	{pc}		; (ldr pc, [sp], #4)
    3384:	mvn	r0, #0
    3388:	b	3348 <coda_ascii_cursor_read_float_array+0x64>
    338c:	movw	r1, #0
    3390:	movt	r1, #0
    3394:	ldr	r3, [pc, #12]	; 33a8 <coda_ascii_cursor_read_float_array+0xc4>
    3398:	movw	r0, #0
    339c:	movt	r0, #0
    33a0:	movw	r2, #1624	; 0x658
    33a4:	bl	0 <__assert_fail>
    33a8:	.word	0x000001ec

000033ac <coda_ascii_cursor_read_double_array>:
    33ac:	ldr	r3, [r0, #4]
    33b0:	strd	r4, [sp, #-16]!
    33b4:	mov	r4, r0
    33b8:	mov	r5, r1
    33bc:	add	r3, r0, r3, lsl #4
    33c0:	ldr	r3, [r3, #-8]
    33c4:	str	r6, [sp, #8]
    33c8:	mov	r6, r2
    33cc:	str	lr, [sp, #12]
    33d0:	ldr	r2, [r3]
    33d4:	cmp	r2, #99	; 0x63
    33d8:	ldrhi	r3, [r3, #4]
    33dc:	ldr	r3, [r3, #40]	; 0x28
    33e0:	ldr	r3, [r3]
    33e4:	cmp	r3, #0
    33e8:	bne	3454 <coda_ascii_cursor_read_double_array+0xa8>
    33ec:	movw	r1, #0
    33f0:	movt	r1, #0
    33f4:	mov	r3, #8
    33f8:	mov	r2, r5
    33fc:	bl	b44 <read_array.constprop.12>
    3400:	cmp	r0, #0
    3404:	bne	344c <coda_ascii_cursor_read_double_array+0xa0>
    3408:	cmp	r6, #0
    340c:	bne	3420 <coda_ascii_cursor_read_double_array+0x74>
    3410:	ldrd	r4, [sp]
    3414:	ldr	r6, [sp, #8]
    3418:	add	sp, sp, #12
    341c:	pop	{pc}		; (ldr pc, [sp], #4)
    3420:	mov	r1, r5
    3424:	mov	r0, r4
    3428:	mov	r2, #8
    342c:	bl	55c <transpose_array>
    3430:	adds	r0, r0, #0
    3434:	ldrd	r4, [sp]
    3438:	movne	r0, #1
    343c:	ldr	r6, [sp, #8]
    3440:	add	sp, sp, #12
    3444:	rsb	r0, r0, #0
    3448:	pop	{pc}		; (ldr pc, [sp], #4)
    344c:	mvn	r0, #0
    3450:	b	3410 <coda_ascii_cursor_read_double_array+0x64>
    3454:	movw	r1, #0
    3458:	movt	r1, #0
    345c:	ldr	r3, [pc, #12]	; 3470 <coda_ascii_cursor_read_double_array+0xc4>
    3460:	movw	r0, #0
    3464:	movt	r0, #0
    3468:	movw	r2, #1644	; 0x66c
    346c:	bl	0 <__assert_fail>
    3470:	.word	0x00000210

00003474 <coda_ascii_cursor_read_char_array>:
    3474:	ldr	r3, [r0, #4]
    3478:	strd	r4, [sp, #-16]!
    347c:	mov	r4, r0
    3480:	mov	r5, r1
    3484:	add	r3, r0, r3, lsl #4
    3488:	ldr	r3, [r3, #-8]
    348c:	str	r6, [sp, #8]
    3490:	mov	r6, r2
    3494:	str	lr, [sp, #12]
    3498:	ldr	r2, [r3]
    349c:	cmp	r2, #99	; 0x63
    34a0:	ldrhi	r3, [r3, #4]
    34a4:	ldr	r3, [r3, #40]	; 0x28
    34a8:	ldr	r3, [r3]
    34ac:	cmp	r3, #0
    34b0:	bne	351c <coda_ascii_cursor_read_char_array+0xa8>
    34b4:	movw	r1, #0
    34b8:	movt	r1, #0
    34bc:	mov	r3, #1
    34c0:	mov	r2, r5
    34c4:	bl	b44 <read_array.constprop.12>
    34c8:	cmp	r0, #0
    34cc:	bne	3514 <coda_ascii_cursor_read_char_array+0xa0>
    34d0:	cmp	r6, #0
    34d4:	bne	34e8 <coda_ascii_cursor_read_char_array+0x74>
    34d8:	ldrd	r4, [sp]
    34dc:	ldr	r6, [sp, #8]
    34e0:	add	sp, sp, #12
    34e4:	pop	{pc}		; (ldr pc, [sp], #4)
    34e8:	mov	r1, r5
    34ec:	mov	r0, r4
    34f0:	mov	r2, #1
    34f4:	bl	55c <transpose_array>
    34f8:	adds	r0, r0, #0
    34fc:	ldrd	r4, [sp]
    3500:	movne	r0, #1
    3504:	ldr	r6, [sp, #8]
    3508:	add	sp, sp, #12
    350c:	rsb	r0, r0, #0
    3510:	pop	{pc}		; (ldr pc, [sp], #4)
    3514:	mvn	r0, #0
    3518:	b	34d8 <coda_ascii_cursor_read_char_array+0x64>
    351c:	movw	r1, #0
    3520:	movt	r1, #0
    3524:	ldr	r3, [pc, #12]	; 3538 <coda_ascii_cursor_read_char_array+0xc4>
    3528:	movw	r0, #0
    352c:	movt	r0, #0
    3530:	mov	r2, #1664	; 0x680
    3534:	bl	0 <__assert_fail>
    3538:	.word	0x00000234

0000353c <coda_ascii_cursor_read_int8_partial_array>:
    353c:	ldr	ip, [r0, #4]
    3540:	push	{lr}		; (str lr, [sp, #-4]!)
    3544:	mov	lr, r3
    3548:	sub	sp, sp, #12
    354c:	add	ip, r0, ip, lsl #4
    3550:	ldr	r3, [ip, #-8]
    3554:	ldr	ip, [r3]
    3558:	cmp	ip, #99	; 0x63
    355c:	ldrhi	r3, [r3, #4]
    3560:	ldr	r3, [r3, #40]	; 0x28
    3564:	ldr	r3, [r3]
    3568:	cmp	r3, #0
    356c:	bne	3598 <coda_ascii_cursor_read_int8_partial_array+0x5c>
    3570:	mov	ip, #1
    3574:	mov	r3, r2
    3578:	str	lr, [sp]
    357c:	mov	r2, r1
    3580:	movw	r1, #0
    3584:	movt	r1, #0
    3588:	str	ip, [sp, #4]
    358c:	bl	4a0 <read_partial_array>
    3590:	add	sp, sp, #12
    3594:	pop	{pc}		; (ldr pc, [sp], #4)
    3598:	movw	r1, #0
    359c:	movt	r1, #0
    35a0:	ldr	r3, [pc, #12]	; 35b4 <coda_ascii_cursor_read_int8_partial_array+0x78>
    35a4:	movw	r0, #0
    35a8:	movt	r0, #0
    35ac:	movw	r2, #1684	; 0x694
    35b0:	bl	0 <__assert_fail>
    35b4:	.word	0x00000258

000035b8 <coda_ascii_cursor_read_uint8_partial_array>:
    35b8:	ldr	ip, [r0, #4]
    35bc:	push	{lr}		; (str lr, [sp, #-4]!)
    35c0:	mov	lr, r3
    35c4:	sub	sp, sp, #12
    35c8:	add	ip, r0, ip, lsl #4
    35cc:	ldr	r3, [ip, #-8]
    35d0:	ldr	ip, [r3]
    35d4:	cmp	ip, #99	; 0x63
    35d8:	ldrhi	r3, [r3, #4]
    35dc:	ldr	r3, [r3, #40]	; 0x28
    35e0:	ldr	r3, [r3]
    35e4:	cmp	r3, #0
    35e8:	bne	3614 <coda_ascii_cursor_read_uint8_partial_array+0x5c>
    35ec:	mov	ip, #1
    35f0:	mov	r3, r2
    35f4:	str	lr, [sp]
    35f8:	mov	r2, r1
    35fc:	movw	r1, #0
    3600:	movt	r1, #0
    3604:	str	ip, [sp, #4]
    3608:	bl	4a0 <read_partial_array>
    360c:	add	sp, sp, #12
    3610:	pop	{pc}		; (ldr pc, [sp], #4)
    3614:	movw	r1, #0
    3618:	movt	r1, #0
    361c:	ldr	r3, [pc, #12]	; 3630 <coda_ascii_cursor_read_uint8_partial_array+0x78>
    3620:	movw	r0, #0
    3624:	movt	r0, #0
    3628:	movw	r2, #1693	; 0x69d
    362c:	bl	0 <__assert_fail>
    3630:	.word	0x00000284

00003634 <coda_ascii_cursor_read_int16_partial_array>:
    3634:	ldr	ip, [r0, #4]
    3638:	push	{lr}		; (str lr, [sp, #-4]!)
    363c:	mov	lr, r3
    3640:	sub	sp, sp, #12
    3644:	add	ip, r0, ip, lsl #4
    3648:	ldr	r3, [ip, #-8]
    364c:	ldr	ip, [r3]
    3650:	cmp	ip, #99	; 0x63
    3654:	ldrhi	r3, [r3, #4]
    3658:	ldr	r3, [r3, #40]	; 0x28
    365c:	ldr	r3, [r3]
    3660:	cmp	r3, #0
    3664:	bne	3690 <coda_ascii_cursor_read_int16_partial_array+0x5c>
    3668:	mov	ip, #2
    366c:	mov	r3, r2
    3670:	str	lr, [sp]
    3674:	mov	r2, r1
    3678:	movw	r1, #0
    367c:	movt	r1, #0
    3680:	str	ip, [sp, #4]
    3684:	bl	4a0 <read_partial_array>
    3688:	add	sp, sp, #12
    368c:	pop	{pc}		; (ldr pc, [sp], #4)
    3690:	movw	r1, #0
    3694:	movt	r1, #0
    3698:	ldr	r3, [pc, #12]	; 36ac <coda_ascii_cursor_read_int16_partial_array+0x78>
    369c:	movw	r0, #0
    36a0:	movt	r0, #0
    36a4:	movw	r2, #1702	; 0x6a6
    36a8:	bl	0 <__assert_fail>
    36ac:	.word	0x000002b0

000036b0 <coda_ascii_cursor_read_uint16_partial_array>:
    36b0:	ldr	ip, [r0, #4]
    36b4:	push	{lr}		; (str lr, [sp, #-4]!)
    36b8:	mov	lr, r3
    36bc:	sub	sp, sp, #12
    36c0:	add	ip, r0, ip, lsl #4
    36c4:	ldr	r3, [ip, #-8]
    36c8:	ldr	ip, [r3]
    36cc:	cmp	ip, #99	; 0x63
    36d0:	ldrhi	r3, [r3, #4]
    36d4:	ldr	r3, [r3, #40]	; 0x28
    36d8:	ldr	r3, [r3]
    36dc:	cmp	r3, #0
    36e0:	bne	370c <coda_ascii_cursor_read_uint16_partial_array+0x5c>
    36e4:	mov	ip, #2
    36e8:	mov	r3, r2
    36ec:	str	lr, [sp]
    36f0:	mov	r2, r1
    36f4:	movw	r1, #0
    36f8:	movt	r1, #0
    36fc:	str	ip, [sp, #4]
    3700:	bl	4a0 <read_partial_array>
    3704:	add	sp, sp, #12
    3708:	pop	{pc}		; (ldr pc, [sp], #4)
    370c:	movw	r1, #0
    3710:	movt	r1, #0
    3714:	ldr	r3, [pc, #12]	; 3728 <coda_ascii_cursor_read_uint16_partial_array+0x78>
    3718:	movw	r0, #0
    371c:	movt	r0, #0
    3720:	movw	r2, #1711	; 0x6af
    3724:	bl	0 <__assert_fail>
    3728:	.word	0x000002dc

0000372c <coda_ascii_cursor_read_int32_partial_array>:
    372c:	ldr	ip, [r0, #4]
    3730:	push	{lr}		; (str lr, [sp, #-4]!)
    3734:	mov	lr, r3
    3738:	sub	sp, sp, #12
    373c:	add	ip, r0, ip, lsl #4
    3740:	ldr	r3, [ip, #-8]
    3744:	ldr	ip, [r3]
    3748:	cmp	ip, #99	; 0x63
    374c:	ldrhi	r3, [r3, #4]
    3750:	ldr	r3, [r3, #40]	; 0x28
    3754:	ldr	r3, [r3]
    3758:	cmp	r3, #0
    375c:	bne	3788 <coda_ascii_cursor_read_int32_partial_array+0x5c>
    3760:	mov	ip, #4
    3764:	mov	r3, r2
    3768:	str	lr, [sp]
    376c:	mov	r2, r1
    3770:	movw	r1, #0
    3774:	movt	r1, #0
    3778:	str	ip, [sp, #4]
    377c:	bl	4a0 <read_partial_array>
    3780:	add	sp, sp, #12
    3784:	pop	{pc}		; (ldr pc, [sp], #4)
    3788:	movw	r1, #0
    378c:	movt	r1, #0
    3790:	ldr	r3, [pc, #12]	; 37a4 <coda_ascii_cursor_read_int32_partial_array+0x78>
    3794:	movw	r0, #0
    3798:	movt	r0, #0
    379c:	movw	r2, #1720	; 0x6b8
    37a0:	bl	0 <__assert_fail>
    37a4:	.word	0x00000308

000037a8 <coda_ascii_cursor_read_uint32_partial_array>:
    37a8:	ldr	ip, [r0, #4]
    37ac:	push	{lr}		; (str lr, [sp, #-4]!)
    37b0:	mov	lr, r3
    37b4:	sub	sp, sp, #12
    37b8:	add	ip, r0, ip, lsl #4
    37bc:	ldr	r3, [ip, #-8]
    37c0:	ldr	ip, [r3]
    37c4:	cmp	ip, #99	; 0x63
    37c8:	ldrhi	r3, [r3, #4]
    37cc:	ldr	r3, [r3, #40]	; 0x28
    37d0:	ldr	r3, [r3]
    37d4:	cmp	r3, #0
    37d8:	bne	3804 <coda_ascii_cursor_read_uint32_partial_array+0x5c>
    37dc:	mov	ip, #4
    37e0:	mov	r3, r2
    37e4:	str	lr, [sp]
    37e8:	mov	r2, r1
    37ec:	movw	r1, #0
    37f0:	movt	r1, #0
    37f4:	str	ip, [sp, #4]
    37f8:	bl	4a0 <read_partial_array>
    37fc:	add	sp, sp, #12
    3800:	pop	{pc}		; (ldr pc, [sp], #4)
    3804:	movw	r1, #0
    3808:	movt	r1, #0
    380c:	ldr	r3, [pc, #12]	; 3820 <coda_ascii_cursor_read_uint32_partial_array+0x78>
    3810:	movw	r0, #0
    3814:	movt	r0, #0
    3818:	movw	r2, #1729	; 0x6c1
    381c:	bl	0 <__assert_fail>
    3820:	.word	0x00000334

00003824 <coda_ascii_cursor_read_int64_partial_array>:
    3824:	ldr	ip, [r0, #4]
    3828:	push	{lr}		; (str lr, [sp, #-4]!)
    382c:	mov	lr, r3
    3830:	sub	sp, sp, #12
    3834:	add	ip, r0, ip, lsl #4
    3838:	ldr	r3, [ip, #-8]
    383c:	ldr	ip, [r3]
    3840:	cmp	ip, #99	; 0x63
    3844:	ldrhi	r3, [r3, #4]
    3848:	ldr	r3, [r3, #40]	; 0x28
    384c:	ldr	r3, [r3]
    3850:	cmp	r3, #0
    3854:	bne	3880 <coda_ascii_cursor_read_int64_partial_array+0x5c>
    3858:	mov	ip, #8
    385c:	mov	r3, r2
    3860:	str	lr, [sp]
    3864:	mov	r2, r1
    3868:	movw	r1, #0
    386c:	movt	r1, #0
    3870:	str	ip, [sp, #4]
    3874:	bl	4a0 <read_partial_array>
    3878:	add	sp, sp, #12
    387c:	pop	{pc}		; (ldr pc, [sp], #4)
    3880:	movw	r1, #0
    3884:	movt	r1, #0
    3888:	ldr	r3, [pc, #12]	; 389c <coda_ascii_cursor_read_int64_partial_array+0x78>
    388c:	movw	r0, #0
    3890:	movt	r0, #0
    3894:	movw	r2, #1738	; 0x6ca
    3898:	bl	0 <__assert_fail>
    389c:	.word	0x00000360

000038a0 <coda_ascii_cursor_read_uint64_partial_array>:
    38a0:	ldr	ip, [r0, #4]
    38a4:	push	{lr}		; (str lr, [sp, #-4]!)
    38a8:	mov	lr, r3
    38ac:	sub	sp, sp, #12
    38b0:	add	ip, r0, ip, lsl #4
    38b4:	ldr	r3, [ip, #-8]
    38b8:	ldr	ip, [r3]
    38bc:	cmp	ip, #99	; 0x63
    38c0:	ldrhi	r3, [r3, #4]
    38c4:	ldr	r3, [r3, #40]	; 0x28
    38c8:	ldr	r3, [r3]
    38cc:	cmp	r3, #0
    38d0:	bne	38fc <coda_ascii_cursor_read_uint64_partial_array+0x5c>
    38d4:	mov	ip, #8
    38d8:	mov	r3, r2
    38dc:	str	lr, [sp]
    38e0:	mov	r2, r1
    38e4:	movw	r1, #0
    38e8:	movt	r1, #0
    38ec:	str	ip, [sp, #4]
    38f0:	bl	4a0 <read_partial_array>
    38f4:	add	sp, sp, #12
    38f8:	pop	{pc}		; (ldr pc, [sp], #4)
    38fc:	movw	r1, #0
    3900:	movt	r1, #0
    3904:	ldr	r3, [pc, #12]	; 3918 <coda_ascii_cursor_read_uint64_partial_array+0x78>
    3908:	movw	r0, #0
    390c:	movt	r0, #0
    3910:	movw	r2, #1747	; 0x6d3
    3914:	bl	0 <__assert_fail>
    3918:	.word	0x0000038c

0000391c <coda_ascii_cursor_read_float_partial_array>:
    391c:	ldr	ip, [r0, #4]
    3920:	push	{lr}		; (str lr, [sp, #-4]!)
    3924:	mov	lr, r3
    3928:	sub	sp, sp, #12
    392c:	add	ip, r0, ip, lsl #4
    3930:	ldr	r3, [ip, #-8]
    3934:	ldr	ip, [r3]
    3938:	cmp	ip, #99	; 0x63
    393c:	ldrhi	r3, [r3, #4]
    3940:	ldr	r3, [r3, #40]	; 0x28
    3944:	ldr	r3, [r3]
    3948:	cmp	r3, #0
    394c:	bne	3978 <coda_ascii_cursor_read_float_partial_array+0x5c>
    3950:	mov	ip, #4
    3954:	mov	r3, r2
    3958:	str	lr, [sp]
    395c:	mov	r2, r1
    3960:	movw	r1, #0
    3964:	movt	r1, #0
    3968:	str	ip, [sp, #4]
    396c:	bl	4a0 <read_partial_array>
    3970:	add	sp, sp, #12
    3974:	pop	{pc}		; (ldr pc, [sp], #4)
    3978:	movw	r1, #0
    397c:	movt	r1, #0
    3980:	ldr	r3, [pc, #12]	; 3994 <coda_ascii_cursor_read_float_partial_array+0x78>
    3984:	movw	r0, #0
    3988:	movt	r0, #0
    398c:	movw	r2, #1756	; 0x6dc
    3990:	bl	0 <__assert_fail>
    3994:	.word	0x000003b8

00003998 <coda_ascii_cursor_read_double_partial_array>:
    3998:	ldr	ip, [r0, #4]
    399c:	push	{lr}		; (str lr, [sp, #-4]!)
    39a0:	mov	lr, r3
    39a4:	sub	sp, sp, #12
    39a8:	add	ip, r0, ip, lsl #4
    39ac:	ldr	r3, [ip, #-8]
    39b0:	ldr	ip, [r3]
    39b4:	cmp	ip, #99	; 0x63
    39b8:	ldrhi	r3, [r3, #4]
    39bc:	ldr	r3, [r3, #40]	; 0x28
    39c0:	ldr	r3, [r3]
    39c4:	cmp	r3, #0
    39c8:	bne	39f4 <coda_ascii_cursor_read_double_partial_array+0x5c>
    39cc:	mov	ip, #8
    39d0:	mov	r3, r2
    39d4:	str	lr, [sp]
    39d8:	mov	r2, r1
    39dc:	movw	r1, #0
    39e0:	movt	r1, #0
    39e4:	str	ip, [sp, #4]
    39e8:	bl	4a0 <read_partial_array>
    39ec:	add	sp, sp, #12
    39f0:	pop	{pc}		; (ldr pc, [sp], #4)
    39f4:	movw	r1, #0
    39f8:	movt	r1, #0
    39fc:	ldr	r3, [pc, #12]	; 3a10 <coda_ascii_cursor_read_double_partial_array+0x78>
    3a00:	movw	r0, #0
    3a04:	movt	r0, #0
    3a08:	movw	r2, #1765	; 0x6e5
    3a0c:	bl	0 <__assert_fail>
    3a10:	.word	0x000003e4

00003a14 <coda_ascii_cursor_read_char_partial_array>:
    3a14:	ldr	ip, [r0, #4]
    3a18:	push	{lr}		; (str lr, [sp, #-4]!)
    3a1c:	mov	lr, r3
    3a20:	sub	sp, sp, #12
    3a24:	add	ip, r0, ip, lsl #4
    3a28:	ldr	r3, [ip, #-8]
    3a2c:	ldr	ip, [r3]
    3a30:	cmp	ip, #99	; 0x63
    3a34:	ldrhi	r3, [r3, #4]
    3a38:	ldr	r3, [r3, #40]	; 0x28
    3a3c:	ldr	r3, [r3]
    3a40:	cmp	r3, #0
    3a44:	bne	3a70 <coda_ascii_cursor_read_char_partial_array+0x5c>
    3a48:	mov	ip, #1
    3a4c:	mov	r3, r2
    3a50:	str	lr, [sp]
    3a54:	mov	r2, r1
    3a58:	movw	r1, #0
    3a5c:	movt	r1, #0
    3a60:	str	ip, [sp, #4]
    3a64:	bl	4a0 <read_partial_array>
    3a68:	add	sp, sp, #12
    3a6c:	pop	{pc}		; (ldr pc, [sp], #4)
    3a70:	movw	r1, #0
    3a74:	movt	r1, #0
    3a78:	ldr	r3, [pc, #12]	; 3a8c <coda_ascii_cursor_read_char_partial_array+0x78>
    3a7c:	movw	r0, #0
    3a80:	movt	r0, #0
    3a84:	movw	r2, #1774	; 0x6ee
    3a88:	bl	0 <__assert_fail>
    3a8c:	.word	0x00000410
