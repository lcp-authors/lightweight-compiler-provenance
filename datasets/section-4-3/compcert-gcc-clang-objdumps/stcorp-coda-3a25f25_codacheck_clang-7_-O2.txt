
../compcert-repos/stcorp-coda-3a25f25/codacheck:     file format elf32-littlearm


Disassembly of section .init:

00010d0c <.init>:
   10d0c:	push	{r3, lr}
   10d10:	bl	10edc <_start@@Base+0x3c>
   10d14:	pop	{r3, pc}

Disassembly of section .plt:

00010d18 <coda_set_option_perform_boundary_checks@plt-0x14>:
   10d18:	push	{lr}		; (str lr, [sp, #-4]!)
   10d1c:	ldr	lr, [pc, #4]	; 10d28 <coda_set_option_perform_boundary_checks@plt-0x4>
   10d20:	add	lr, pc, lr
   10d24:	ldr	pc, [lr, #8]!
   10d28:	ldrdeq	r2, [r1], -r8

00010d2c <coda_set_option_perform_boundary_checks@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #73728	; 0x12000
   10d34:	ldr	pc, [ip, #728]!	; 0x2d8

00010d38 <strcmp@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #73728	; 0x12000
   10d40:	ldr	pc, [ip, #720]!	; 0x2d0

00010d44 <printf@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #73728	; 0x12000
   10d4c:	ldr	pc, [ip, #712]!	; 0x2c8

00010d50 <coda_set_error@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #73728	; 0x12000
   10d58:	ldr	pc, [ip, #704]!	; 0x2c0

00010d5c <coda_open@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #73728	; 0x12000
   10d64:	ldr	pc, [ip, #696]!	; 0x2b8

00010d68 <fflush@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #73728	; 0x12000
   10d70:	ldr	pc, [ip, #688]!	; 0x2b0

00010d74 <coda_set_option_use_mmap@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #73728	; 0x12000
   10d7c:	ldr	pc, [ip, #680]!	; 0x2a8

00010d80 <coda_cursor_print_path@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #73728	; 0x12000
   10d88:	ldr	pc, [ip, #672]!	; 0x2a0

00010d8c <coda_set_definition_path_conditional@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #73728	; 0x12000
   10d94:	ldr	pc, [ip, #664]!	; 0x298

00010d98 <coda_set_definition_path@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #73728	; 0x12000
   10da0:	ldr	pc, [ip, #656]!	; 0x290

00010da4 <coda_recognize_file@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #73728	; 0x12000
   10dac:	ldr	pc, [ip, #648]!	; 0x288

00010db0 <fwrite@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #73728	; 0x12000
   10db8:	ldr	pc, [ip, #640]!	; 0x280

00010dbc <coda_type_get_format_name@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #73728	; 0x12000
   10dc4:	ldr	pc, [ip, #632]!	; 0x278

00010dc8 <coda_done@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #73728	; 0x12000
   10dd0:	ldr	pc, [ip, #624]!	; 0x270

00010dd4 <puts@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #73728	; 0x12000
   10ddc:	ldr	pc, [ip, #616]!	; 0x268

00010de0 <coda_product_check@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #73728	; 0x12000
   10de8:	ldr	pc, [ip, #608]!	; 0x260

00010dec <__libc_start_main@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #73728	; 0x12000
   10df4:	ldr	pc, [ip, #600]!	; 0x258

00010df8 <__gmon_start__@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #73728	; 0x12000
   10e00:	ldr	pc, [ip, #592]!	; 0x250

00010e04 <exit@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #73728	; 0x12000
   10e0c:	ldr	pc, [ip, #584]!	; 0x248

00010e10 <fprintf@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #73728	; 0x12000
   10e18:	ldr	pc, [ip, #576]!	; 0x240

00010e1c <coda_init@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #73728	; 0x12000
   10e24:	ldr	pc, [ip, #568]!	; 0x238

00010e28 <ungetc@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #73728	; 0x12000
   10e30:	ldr	pc, [ip, #560]!	; 0x230

00010e34 <coda_set_option_perform_conversions@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #73728	; 0x12000
   10e3c:	ldr	pc, [ip, #552]!	; 0x228

00010e40 <putchar@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #73728	; 0x12000
   10e48:	ldr	pc, [ip, #544]!	; 0x220

00010e4c <coda_close@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #73728	; 0x12000
   10e54:	ldr	pc, [ip, #536]!	; 0x218

00010e58 <coda_errno_to_string@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #73728	; 0x12000
   10e60:	ldr	pc, [ip, #528]!	; 0x210

00010e64 <coda_get_libcoda_version@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #73728	; 0x12000
   10e6c:	ldr	pc, [ip, #520]!	; 0x208

00010e70 <coda_get_errno@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #73728	; 0x12000
   10e78:	ldr	pc, [ip, #512]!	; 0x200

00010e7c <abort@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #73728	; 0x12000
   10e84:	ldr	pc, [ip, #504]!	; 0x1f8

00010e88 <getc@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #73728	; 0x12000
   10e90:	ldr	pc, [ip, #496]!	; 0x1f0

00010e94 <__assert_fail@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #73728	; 0x12000
   10e9c:	ldr	pc, [ip, #488]!	; 0x1e8

Disassembly of section .text:

00010ea0 <_start@@Base>:
   10ea0:	mov	fp, #0
   10ea4:	mov	lr, #0
   10ea8:	pop	{r1}		; (ldr r1, [sp], #4)
   10eac:	mov	r2, sp
   10eb0:	push	{r2}		; (str r2, [sp, #-4]!)
   10eb4:	push	{r0}		; (str r0, [sp, #-4]!)
   10eb8:	ldr	ip, [pc, #16]	; 10ed0 <_start@@Base+0x30>
   10ebc:	push	{ip}		; (str ip, [sp, #-4]!)
   10ec0:	ldr	r0, [pc, #12]	; 10ed4 <_start@@Base+0x34>
   10ec4:	ldr	r3, [pc, #12]	; 10ed8 <_start@@Base+0x38>
   10ec8:	bl	10dec <__libc_start_main@plt>
   10ecc:	bl	10e7c <abort@plt>
   10ed0:	andeq	r1, r1, r8, lsl #16
   10ed4:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   10ed8:	andeq	r1, r1, r8, lsr #15
   10edc:	ldr	r3, [pc, #20]	; 10ef8 <_start@@Base+0x58>
   10ee0:	ldr	r2, [pc, #20]	; 10efc <_start@@Base+0x5c>
   10ee4:	add	r3, pc, r3
   10ee8:	ldr	r2, [r3, r2]
   10eec:	cmp	r2, #0
   10ef0:	bxeq	lr
   10ef4:	b	10df8 <__gmon_start__@plt>
   10ef8:	andeq	r2, r1, r4, lsl r1
   10efc:	andeq	r0, r0, r8, lsl #1
   10f00:	ldr	r0, [pc, #24]	; 10f20 <_start@@Base+0x80>
   10f04:	ldr	r3, [pc, #24]	; 10f24 <_start@@Base+0x84>
   10f08:	cmp	r3, r0
   10f0c:	bxeq	lr
   10f10:	ldr	r3, [pc, #16]	; 10f28 <_start@@Base+0x88>
   10f14:	cmp	r3, #0
   10f18:	bxeq	lr
   10f1c:	bx	r3
   10f20:	muleq	r2, r4, r0
   10f24:	muleq	r2, r4, r0
   10f28:	andeq	r0, r0, r0
   10f2c:	ldr	r0, [pc, #36]	; 10f58 <_start@@Base+0xb8>
   10f30:	ldr	r1, [pc, #36]	; 10f5c <_start@@Base+0xbc>
   10f34:	sub	r1, r1, r0
   10f38:	asr	r1, r1, #2
   10f3c:	add	r1, r1, r1, lsr #31
   10f40:	asrs	r1, r1, #1
   10f44:	bxeq	lr
   10f48:	ldr	r3, [pc, #16]	; 10f60 <_start@@Base+0xc0>
   10f4c:	cmp	r3, #0
   10f50:	bxeq	lr
   10f54:	bx	r3
   10f58:	muleq	r2, r4, r0
   10f5c:	muleq	r2, r4, r0
   10f60:	andeq	r0, r0, r0
   10f64:	push	{r4, lr}
   10f68:	ldr	r4, [pc, #24]	; 10f88 <_start@@Base+0xe8>
   10f6c:	ldrb	r3, [r4]
   10f70:	cmp	r3, #0
   10f74:	popne	{r4, pc}
   10f78:	bl	10f00 <_start@@Base+0x60>
   10f7c:	mov	r3, #1
   10f80:	strb	r3, [r4]
   10f84:	pop	{r4, pc}
   10f88:	andeq	r3, r2, r4, lsr #1
   10f8c:	b	10f2c <_start@@Base+0x8c>

00010f90 <main@@Base>:
   10f90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f94:	add	fp, sp, #28
   10f98:	sub	sp, sp, #1004	; 0x3ec
   10f9c:	mov	r4, r1
   10fa0:	movw	r1, #12468	; 0x30b4
   10fa4:	mov	r5, r0
   10fa8:	mov	r0, #0
   10fac:	movw	r9, #12464	; 0x30b0
   10fb0:	movt	r1, #2
   10fb4:	movt	r9, #2
   10fb8:	cmp	r5, #1
   10fbc:	str	r0, [r1]
   10fc0:	movw	r1, #12456	; 0x30a8
   10fc4:	str	r0, [r9]
   10fc8:	movt	r1, #2
   10fcc:	str	r0, [r1]
   10fd0:	beq	11328 <main@@Base+0x398>
   10fd4:	ldr	r6, [r4, #4]
   10fd8:	movw	r1, #6180	; 0x1824
   10fdc:	movt	r1, #1
   10fe0:	mov	r0, r6
   10fe4:	bl	10d38 <strcmp@plt>
   10fe8:	cmp	r0, #0
   10fec:	beq	11328 <main@@Base+0x398>
   10ff0:	movw	r1, #6183	; 0x1827
   10ff4:	mov	r0, r6
   10ff8:	movt	r1, #1
   10ffc:	bl	10d38 <strcmp@plt>
   11000:	cmp	r0, #0
   11004:	beq	11328 <main@@Base+0x398>
   11008:	movw	r1, #6190	; 0x182e
   1100c:	mov	r0, r6
   11010:	movt	r1, #1
   11014:	bl	10d38 <strcmp@plt>
   11018:	cmp	r0, #0
   1101c:	beq	11334 <main@@Base+0x3a4>
   11020:	movw	r1, #6193	; 0x1831
   11024:	mov	r0, r6
   11028:	movt	r1, #1
   1102c:	bl	10d38 <strcmp@plt>
   11030:	cmp	r0, #0
   11034:	beq	11334 <main@@Base+0x3a4>
   11038:	cmp	r5, #3
   1103c:	blt	11058 <main@@Base+0xc8>
   11040:	movw	r1, #6203	; 0x183b
   11044:	mov	r0, r6
   11048:	movt	r1, #1
   1104c:	bl	10d38 <strcmp@plt>
   11050:	cmp	r0, #0
   11054:	beq	112b4 <main@@Base+0x324>
   11058:	ldr	r0, [r4]
   1105c:	movw	r2, #6206	; 0x183e
   11060:	mov	r1, #0
   11064:	movt	r2, #1
   11068:	bl	10d8c <coda_set_definition_path_conditional@plt>
   1106c:	mov	r8, #1
   11070:	cmp	r0, #0
   11074:	bne	11340 <main@@Base+0x3b0>
   11078:	mov	sl, #0
   1107c:	mov	r6, #1
   11080:	cmp	r8, r5
   11084:	bge	11190 <main@@Base+0x200>
   11088:	movw	r7, #6232	; 0x1858
   1108c:	mov	r6, #1
   11090:	movt	r7, #1
   11094:	ldr	sl, [r4, r8, lsl #2]
   11098:	mov	r1, r7
   1109c:	mov	r0, sl
   110a0:	bl	10d38 <strcmp@plt>
   110a4:	cmp	r0, #0
   110a8:	mov	r0, r9
   110ac:	beq	1116c <main@@Base+0x1dc>
   110b0:	movw	r1, #6235	; 0x185b
   110b4:	mov	r0, sl
   110b8:	movt	r1, #1
   110bc:	bl	10d38 <strcmp@plt>
   110c0:	cmp	r0, #0
   110c4:	mov	r0, r9
   110c8:	beq	1116c <main@@Base+0x1dc>
   110cc:	movw	r1, #6245	; 0x1865
   110d0:	mov	r0, sl
   110d4:	movt	r1, #1
   110d8:	bl	10d38 <strcmp@plt>
   110dc:	cmp	r0, #0
   110e0:	movw	r0, #12468	; 0x30b4
   110e4:	movt	r0, #2
   110e8:	beq	1116c <main@@Base+0x1dc>
   110ec:	movw	r1, #6248	; 0x1868
   110f0:	mov	r0, sl
   110f4:	movt	r1, #1
   110f8:	bl	10d38 <strcmp@plt>
   110fc:	cmp	r0, #0
   11100:	movw	r0, #12468	; 0x30b4
   11104:	movt	r0, #2
   11108:	beq	1116c <main@@Base+0x1dc>
   1110c:	movw	r1, #6256	; 0x1870
   11110:	mov	r0, sl
   11114:	movt	r1, #1
   11118:	bl	10d38 <strcmp@plt>
   1111c:	cmp	r0, #0
   11120:	movw	r0, #12456	; 0x30a8
   11124:	movt	r0, #2
   11128:	beq	1116c <main@@Base+0x1dc>
   1112c:	movw	r1, #6259	; 0x1873
   11130:	mov	r0, sl
   11134:	movt	r1, #1
   11138:	bl	10d38 <strcmp@plt>
   1113c:	cmp	r0, #0
   11140:	movw	r0, #12456	; 0x30a8
   11144:	movt	r0, #2
   11148:	beq	1116c <main@@Base+0x1dc>
   1114c:	movw	r1, #6272	; 0x1880
   11150:	mov	r0, sl
   11154:	movt	r1, #1
   11158:	bl	10d38 <strcmp@plt>
   1115c:	mov	r1, #0
   11160:	cmp	r0, #0
   11164:	beq	11178 <main@@Base+0x1e8>
   11168:	b	112c4 <main@@Base+0x334>
   1116c:	mov	r1, #1
   11170:	str	r1, [r0]
   11174:	mov	r1, r6
   11178:	add	r8, r8, #1
   1117c:	mov	r6, r1
   11180:	cmp	r8, r5
   11184:	blt	11094 <main@@Base+0x104>
   11188:	mov	r6, r1
   1118c:	mov	sl, #0
   11190:	bl	10e1c <coda_init@plt>
   11194:	cmp	r0, #0
   11198:	bne	11340 <main@@Base+0x3b0>
   1119c:	mov	r0, #0
   111a0:	mov	r7, #0
   111a4:	bl	10d2c <coda_set_option_perform_boundary_checks@plt>
   111a8:	mov	r0, #0
   111ac:	bl	10e34 <coda_set_option_perform_conversions@plt>
   111b0:	mov	r0, r6
   111b4:	bl	10d74 <coda_set_option_use_mmap@plt>
   111b8:	cmp	sl, #0
   111bc:	beq	11264 <main@@Base+0x2d4>
   111c0:	movw	r5, #12448	; 0x30a0
   111c4:	mov	r4, sp
   111c8:	movt	r5, #2
   111cc:	b	111e4 <main@@Base+0x254>
   111d0:	mov	r0, r4
   111d4:	bl	11374 <main@@Base+0x3e4>
   111d8:	mov	r0, #0
   111dc:	mov	r7, #0
   111e0:	bl	10d68 <fflush@plt>
   111e4:	ldr	r0, [r5]
   111e8:	bl	10e88 <getc@plt>
   111ec:	uxtb	r1, r0
   111f0:	cmp	r1, #10
   111f4:	beq	1121c <main@@Base+0x28c>
   111f8:	cmp	r1, #13
   111fc:	bne	11234 <main@@Base+0x2a4>
   11200:	ldr	r0, [r5]
   11204:	bl	10e88 <getc@plt>
   11208:	uxtb	r0, r0
   1120c:	cmp	r0, #10
   11210:	beq	1121c <main@@Base+0x28c>
   11214:	ldr	r1, [r5]
   11218:	bl	10e28 <ungetc@plt>
   1121c:	mov	r0, #0
   11220:	cmp	r7, #0
   11224:	strb	r0, [r4, r7]
   11228:	mov	r7, #0
   1122c:	beq	111e4 <main@@Base+0x254>
   11230:	b	111d0 <main@@Base+0x240>
   11234:	strb	r0, [r4, r7]
   11238:	add	r7, r7, #1
   1123c:	cmp	r7, #1000	; 0x3e8
   11240:	bcc	111e4 <main@@Base+0x254>
   11244:	movw	r0, #6310	; 0x18a6
   11248:	movw	r1, #6319	; 0x18af
   1124c:	movw	r3, #6399	; 0x18ff
   11250:	mov	r2, #316	; 0x13c
   11254:	movt	r0, #1
   11258:	movt	r1, #1
   1125c:	movt	r3, #1
   11260:	bl	10e94 <__assert_fail@plt>
   11264:	cmp	r8, r5
   11268:	bge	1128c <main@@Base+0x2fc>
   1126c:	sub	r5, r5, r8
   11270:	add	r4, r4, r8, lsl #2
   11274:	ldr	r0, [r4], #4
   11278:	bl	11374 <main@@Base+0x3e4>
   1127c:	mov	r0, #0
   11280:	bl	10d68 <fflush@plt>
   11284:	subs	r5, r5, #1
   11288:	bne	11274 <main@@Base+0x2e4>
   1128c:	bl	10dc8 <coda_done@plt>
   11290:	movw	r0, #12460	; 0x30ac
   11294:	movt	r0, #2
   11298:	ldr	r0, [r0]
   1129c:	cmp	r0, #0
   112a0:	moveq	r0, #0
   112a4:	subeq	sp, fp, #28
   112a8:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   112ac:	mov	r0, #1
   112b0:	bl	10e04 <exit@plt>
   112b4:	ldr	r0, [r4, #8]
   112b8:	bl	10d98 <coda_set_definition_path@plt>
   112bc:	mov	r8, #3
   112c0:	b	11078 <main@@Base+0xe8>
   112c4:	movw	r1, #6282	; 0x188a
   112c8:	mov	r0, sl
   112cc:	movt	r1, #1
   112d0:	bl	10d38 <strcmp@plt>
   112d4:	sub	r1, r5, #1
   112d8:	cmp	r1, r8
   112dc:	cmpeq	r0, #0
   112e0:	beq	11320 <main@@Base+0x390>
   112e4:	ldrb	r0, [sl]
   112e8:	mov	sl, #0
   112ec:	cmp	r0, #45	; 0x2d
   112f0:	bne	11190 <main@@Base+0x200>
   112f4:	movw	r0, #12440	; 0x3098
   112f8:	mov	r1, #25
   112fc:	mov	r2, #1
   11300:	movt	r0, #2
   11304:	ldr	r3, [r0]
   11308:	movw	r0, #6284	; 0x188c
   1130c:	movt	r0, #1
   11310:	bl	10db0 <fwrite@plt>
   11314:	bl	11598 <main@@Base+0x608>
   11318:	mov	r0, #1
   1131c:	bl	10e04 <exit@plt>
   11320:	mov	sl, #1
   11324:	b	11190 <main@@Base+0x200>
   11328:	bl	11598 <main@@Base+0x608>
   1132c:	mov	r0, #0
   11330:	bl	10e04 <exit@plt>
   11334:	bl	1171c <main@@Base+0x78c>
   11338:	mov	r0, #0
   1133c:	bl	10e04 <exit@plt>
   11340:	movw	r0, #12440	; 0x3098
   11344:	movt	r0, #2
   11348:	ldr	r4, [r0]
   1134c:	bl	10e70 <coda_get_errno@plt>
   11350:	ldr	r0, [r0]
   11354:	bl	10e58 <coda_errno_to_string@plt>
   11358:	movw	r1, #6492	; 0x195c
   1135c:	mov	r2, r0
   11360:	mov	r0, r4
   11364:	movt	r1, #1
   11368:	bl	10e10 <fprintf@plt>
   1136c:	mov	r0, #1
   11370:	bl	10e04 <exit@plt>
   11374:	push	{r4, sl, fp, lr}
   11378:	add	fp, sp, #8
   1137c:	sub	sp, sp, #40	; 0x28
   11380:	mov	r4, r0
   11384:	bl	10dd4 <puts@plt>
   11388:	add	r0, sp, #12
   1138c:	add	r1, sp, #16
   11390:	sub	r2, fp, #16
   11394:	add	r3, sp, #20
   11398:	str	r1, [sp]
   1139c:	str	r0, [sp, #4]
   113a0:	add	r1, sp, #24
   113a4:	mov	r0, r4
   113a8:	bl	10da4 <coda_recognize_file@plt>
   113ac:	cmp	r0, #0
   113b0:	beq	113e0 <main@@Base+0x450>
   113b4:	bl	10e70 <coda_get_errno@plt>
   113b8:	ldr	r0, [r0]
   113bc:	bl	10e58 <coda_errno_to_string@plt>
   113c0:	mov	r1, r0
   113c4:	movw	r0, #6444	; 0x192c
   113c8:	movt	r0, #1
   113cc:	bl	10d44 <printf@plt>
   113d0:	mov	r0, #0
   113d4:	mov	r1, #0
   113d8:	bl	10d50 <coda_set_error@plt>
   113dc:	b	114d8 <main@@Base+0x548>
   113e0:	movw	r0, #12456	; 0x30a8
   113e4:	movt	r0, #2
   113e8:	ldr	r0, [r0]
   113ec:	cmp	r0, #0
   113f0:	beq	11418 <main@@Base+0x488>
   113f4:	ldr	r0, [sp, #20]
   113f8:	cmp	r0, #0
   113fc:	ldrne	r0, [sp, #16]
   11400:	cmpne	r0, #0
   11404:	bne	11418 <main@@Base+0x488>
   11408:	movw	r0, #6528	; 0x1980
   1140c:	movt	r0, #1
   11410:	bl	10dd4 <puts@plt>
   11414:	b	114d8 <main@@Base+0x548>
   11418:	movw	r0, #12464	; 0x30b0
   1141c:	movt	r0, #2
   11420:	ldr	r0, [r0]
   11424:	cmp	r0, #0
   11428:	beq	11470 <main@@Base+0x4e0>
   1142c:	ldr	r0, [fp, #-16]
   11430:	bl	10dbc <coda_type_get_format_name@plt>
   11434:	mov	r1, r0
   11438:	movw	r0, #6458	; 0x193a
   1143c:	movt	r0, #1
   11440:	bl	10d44 <printf@plt>
   11444:	ldr	r1, [sp, #20]
   11448:	cmp	r1, #0
   1144c:	ldrne	r2, [sp, #16]
   11450:	cmpne	r2, #0
   11454:	beq	11468 <main@@Base+0x4d8>
   11458:	ldr	r3, [sp, #12]
   1145c:	movw	r0, #6479	; 0x194f
   11460:	movt	r0, #1
   11464:	bl	10d44 <printf@plt>
   11468:	mov	r0, #10
   1146c:	bl	10e40 <putchar@plt>
   11470:	sub	r1, fp, #12
   11474:	mov	r0, r4
   11478:	bl	10d5c <coda_open@plt>
   1147c:	cmp	r0, #0
   11480:	beq	114f0 <main@@Base+0x560>
   11484:	bl	10e70 <coda_get_errno@plt>
   11488:	ldr	r0, [r0]
   1148c:	cmn	r0, #21
   11490:	bne	114bc <main@@Base+0x52c>
   11494:	mov	r0, #0
   11498:	bl	10d74 <coda_set_option_use_mmap@plt>
   1149c:	sub	r1, fp, #12
   114a0:	mov	r0, r4
   114a4:	bl	10d5c <coda_open@plt>
   114a8:	mov	r4, r0
   114ac:	mov	r0, #1
   114b0:	bl	10d74 <coda_set_option_use_mmap@plt>
   114b4:	cmp	r4, #0
   114b8:	beq	114f0 <main@@Base+0x560>
   114bc:	bl	10e70 <coda_get_errno@plt>
   114c0:	ldr	r0, [r0]
   114c4:	bl	10e58 <coda_errno_to_string@plt>
   114c8:	mov	r1, r0
   114cc:	movw	r0, #6444	; 0x192c
   114d0:	movt	r0, #1
   114d4:	bl	10d44 <printf@plt>
   114d8:	movw	r0, #12460	; 0x30ac
   114dc:	mov	r1, #1
   114e0:	movt	r0, #2
   114e4:	str	r1, [r0]
   114e8:	sub	sp, fp, #8
   114ec:	pop	{r4, sl, fp, pc}
   114f0:	movw	r0, #12468	; 0x30b4
   114f4:	movw	r2, #5968	; 0x1750
   114f8:	mov	r3, #0
   114fc:	movt	r0, #2
   11500:	movt	r2, #1
   11504:	ldr	r1, [r0]
   11508:	ldr	r0, [fp, #-12]
   1150c:	clz	r1, r1
   11510:	lsr	r1, r1, #5
   11514:	bl	10de0 <coda_product_check@plt>
   11518:	cmp	r0, #0
   1151c:	beq	1155c <main@@Base+0x5cc>
   11520:	bl	10e70 <coda_get_errno@plt>
   11524:	ldr	r0, [r0]
   11528:	bl	10e58 <coda_errno_to_string@plt>
   1152c:	mov	r1, r0
   11530:	movw	r0, #6444	; 0x192c
   11534:	movt	r0, #1
   11538:	bl	10d44 <printf@plt>
   1153c:	movw	r0, #12460	; 0x30ac
   11540:	mov	r1, #1
   11544:	movt	r0, #2
   11548:	str	r1, [r0]
   1154c:	ldr	r0, [fp, #-12]
   11550:	bl	10e4c <coda_close@plt>
   11554:	sub	sp, fp, #8
   11558:	pop	{r4, sl, fp, pc}
   1155c:	ldr	r0, [fp, #-12]
   11560:	bl	10e4c <coda_close@plt>
   11564:	cmp	r0, #0
   11568:	beq	11588 <main@@Base+0x5f8>
   1156c:	bl	10e70 <coda_get_errno@plt>
   11570:	ldr	r0, [r0]
   11574:	bl	10e58 <coda_errno_to_string@plt>
   11578:	mov	r1, r0
   1157c:	movw	r0, #6490	; 0x195a
   11580:	movt	r0, #1
   11584:	b	114d4 <main@@Base+0x544>
   11588:	mov	r0, #10
   1158c:	bl	10e40 <putchar@plt>
   11590:	sub	sp, fp, #8
   11594:	pop	{r4, sl, fp, pc}
   11598:	push	{fp, lr}
   1159c:	mov	fp, sp
   115a0:	movw	r0, #6520	; 0x1978
   115a4:	movt	r0, #1
   115a8:	bl	10dd4 <puts@plt>
   115ac:	movw	r0, #6576	; 0x19b0
   115b0:	movt	r0, #1
   115b4:	bl	10dd4 <puts@plt>
   115b8:	movw	r0, #6640	; 0x19f0
   115bc:	movt	r0, #1
   115c0:	bl	10dd4 <puts@plt>
   115c4:	movw	r0, #6720	; 0x1a40
   115c8:	movt	r0, #1
   115cc:	bl	10dd4 <puts@plt>
   115d0:	movw	r0, #6752	; 0x1a60
   115d4:	movt	r0, #1
   115d8:	bl	10dd4 <puts@plt>
   115dc:	movw	r0, #6784	; 0x1a80
   115e0:	movt	r0, #1
   115e4:	bl	10dd4 <puts@plt>
   115e8:	movw	r0, #6864	; 0x1ad0
   115ec:	movt	r0, #1
   115f0:	bl	10dd4 <puts@plt>
   115f4:	movw	r0, #6944	; 0x1b20
   115f8:	movt	r0, #1
   115fc:	bl	10dd4 <puts@plt>
   11600:	movw	r0, #7024	; 0x1b70
   11604:	movt	r0, #1
   11608:	bl	10dd4 <puts@plt>
   1160c:	movw	r0, #7056	; 0x1b90
   11610:	movt	r0, #1
   11614:	bl	10dd4 <puts@plt>
   11618:	movw	r0, #7120	; 0x1bd0
   1161c:	movt	r0, #1
   11620:	bl	10dd4 <puts@plt>
   11624:	movw	r0, #7184	; 0x1c10
   11628:	movt	r0, #1
   1162c:	bl	10dd4 <puts@plt>
   11630:	movw	r0, #7216	; 0x1c30
   11634:	movt	r0, #1
   11638:	bl	10dd4 <puts@plt>
   1163c:	movw	r0, #7296	; 0x1c80
   11640:	movt	r0, #1
   11644:	bl	10dd4 <puts@plt>
   11648:	movw	r0, #7328	; 0x1ca0
   1164c:	movt	r0, #1
   11650:	bl	10dd4 <puts@plt>
   11654:	mov	r0, #10
   11658:	bl	10e40 <putchar@plt>
   1165c:	movw	r0, #7392	; 0x1ce0
   11660:	movt	r0, #1
   11664:	bl	10dd4 <puts@plt>
   11668:	movw	r0, #7472	; 0x1d30
   1166c:	movt	r0, #1
   11670:	bl	10dd4 <puts@plt>
   11674:	mov	r0, #10
   11678:	bl	10e40 <putchar@plt>
   1167c:	movw	r0, #7504	; 0x1d50
   11680:	movt	r0, #1
   11684:	bl	10dd4 <puts@plt>
   11688:	movw	r0, #7536	; 0x1d70
   1168c:	movt	r0, #1
   11690:	bl	10dd4 <puts@plt>
   11694:	mov	r0, #10
   11698:	bl	10e40 <putchar@plt>
   1169c:	movw	r0, #7568	; 0x1d90
   116a0:	movt	r0, #1
   116a4:	bl	10dd4 <puts@plt>
   116a8:	movw	r0, #7600	; 0x1db0
   116ac:	movt	r0, #1
   116b0:	bl	10dd4 <puts@plt>
   116b4:	mov	r0, #10
   116b8:	bl	10e40 <putchar@plt>
   116bc:	movw	r0, #7664	; 0x1df0
   116c0:	movt	r0, #1
   116c4:	bl	10dd4 <puts@plt>
   116c8:	movw	r0, #7744	; 0x1e40
   116cc:	movt	r0, #1
   116d0:	bl	10dd4 <puts@plt>
   116d4:	movw	r0, #7824	; 0x1e90
   116d8:	movt	r0, #1
   116dc:	bl	10dd4 <puts@plt>
   116e0:	movw	r0, #7872	; 0x1ec0
   116e4:	movt	r0, #1
   116e8:	bl	10dd4 <puts@plt>
   116ec:	movw	r0, #7952	; 0x1f10
   116f0:	movt	r0, #1
   116f4:	bl	10dd4 <puts@plt>
   116f8:	movw	r0, #8032	; 0x1f60
   116fc:	movt	r0, #1
   11700:	bl	10dd4 <puts@plt>
   11704:	movw	r0, #8096	; 0x1fa0
   11708:	movt	r0, #1
   1170c:	bl	10dd4 <puts@plt>
   11710:	mov	r0, #10
   11714:	pop	{fp, lr}
   11718:	b	10e40 <putchar@plt>
   1171c:	push	{fp, lr}
   11720:	mov	fp, sp
   11724:	bl	10e64 <coda_get_libcoda_version@plt>
   11728:	mov	r1, r0
   1172c:	movw	r0, #6422	; 0x1916
   11730:	movt	r0, #1
   11734:	bl	10d44 <printf@plt>
   11738:	movw	r0, #8160	; 0x1fe0
   1173c:	movt	r0, #1
   11740:	bl	10dd4 <puts@plt>
   11744:	mov	r0, #10
   11748:	pop	{fp, lr}
   1174c:	b	10e40 <putchar@plt>
   11750:	push	{r4, sl, fp, lr}
   11754:	add	fp, sp, #8
   11758:	mov	r4, r0
   1175c:	movw	r0, #6503	; 0x1967
   11760:	movt	r0, #1
   11764:	bl	10d44 <printf@plt>
   11768:	cmp	r4, #0
   1176c:	beq	1178c <main@@Base+0x7fc>
   11770:	movw	r0, #6515	; 0x1973
   11774:	movt	r0, #1
   11778:	bl	10d44 <printf@plt>
   1177c:	movw	r1, #3396	; 0xd44
   11780:	mov	r0, r4
   11784:	movt	r1, #1
   11788:	bl	10d80 <coda_cursor_print_path@plt>
   1178c:	mov	r0, #10
   11790:	bl	10e40 <putchar@plt>
   11794:	movw	r0, #12460	; 0x30ac
   11798:	mov	r1, #1
   1179c:	movt	r0, #2
   117a0:	str	r1, [r0]
   117a4:	pop	{r4, sl, fp, pc}

000117a8 <__libc_csu_init@@Base>:
   117a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   117ac:	mov	r7, r0
   117b0:	ldr	r6, [pc, #72]	; 11800 <__libc_csu_init@@Base+0x58>
   117b4:	ldr	r5, [pc, #72]	; 11804 <__libc_csu_init@@Base+0x5c>
   117b8:	add	r6, pc, r6
   117bc:	add	r5, pc, r5
   117c0:	sub	r6, r6, r5
   117c4:	mov	r8, r1
   117c8:	mov	r9, r2
   117cc:	bl	10d0c <coda_set_option_perform_boundary_checks@plt-0x20>
   117d0:	asrs	r6, r6, #2
   117d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   117d8:	mov	r4, #0
   117dc:	add	r4, r4, #1
   117e0:	ldr	r3, [r5], #4
   117e4:	mov	r2, r9
   117e8:	mov	r1, r8
   117ec:	mov	r0, r7
   117f0:	blx	r3
   117f4:	cmp	r6, r4
   117f8:	bne	117dc <__libc_csu_init@@Base+0x34>
   117fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11800:	andeq	r1, r1, r4, lsr r7
   11804:	andeq	r1, r1, ip, lsr #14

00011808 <__libc_csu_fini@@Base>:
   11808:	bx	lr

Disassembly of section .fini:

0001180c <.fini>:
   1180c:	push	{r3, lr}
   11810:	pop	{r3, pc}
