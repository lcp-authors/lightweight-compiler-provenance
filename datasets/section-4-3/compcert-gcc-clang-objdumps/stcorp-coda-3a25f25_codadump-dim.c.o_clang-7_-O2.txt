
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-dim.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <dim_info_init>:
       0:	movw	r0, #0
       4:	mov	r1, #0
       8:	movt	r0, #0
       c:	str	r1, [r0, #68]	; 0x44
      10:	str	r1, [r0]
      14:	mvn	r1, #0
      18:	str	r1, [r0, #104]	; 0x68
      1c:	bx	lr

00000020 <dim_info_done>:
      20:	bx	lr

00000024 <print_all_distinct_dims>:
      24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
      28:	add	fp, sp, #28
      2c:	sub	sp, sp, #4
      30:	movw	r9, #0
      34:	mov	sl, r0
      38:	movt	r9, #0
      3c:	ldr	r0, [r9]
      40:	cmp	r0, sl
      44:	ble	1d0 <print_all_distinct_dims+0x1ac>
      48:	add	r8, r9, sl, lsl #2
      4c:	ldr	r0, [r8, #72]	; 0x48
      50:	cmp	r0, #0
      54:	subeq	sp, fp, #28
      58:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
      5c:	mov	r7, r8
      60:	mov	r5, #4
      64:	ldr	r0, [r7, #4]!
      68:	add	r6, r5, r0, lsl #2
      6c:	mov	r0, r6
      70:	bl	0 <malloc>
      74:	mov	r4, r0
      78:	cmp	r0, #0
      7c:	bne	b0 <print_all_distinct_dims+0x8c>
      80:	movw	r1, #0
      84:	movw	r3, #0
      88:	mov	r0, #61	; 0x3d
      8c:	mov	r2, r6
      90:	str	r0, [sp]
      94:	movt	r1, #0
      98:	movt	r3, #0
      9c:	mvn	r0, #0
      a0:	bl	0 <coda_set_error>
      a4:	bl	0 <handle_coda_error>
      a8:	ldr	r0, [r7]
      ac:	add	r6, r5, r0, lsl #2
      b0:	mov	r0, r4
      b4:	mov	r1, #0
      b8:	mov	r2, r6
      bc:	mov	r5, #0
      c0:	bl	0 <memset>
      c4:	ldr	r0, [r8, #140]	; 0x8c
      c8:	add	r0, r9, r0, lsl #3
      cc:	ldrd	r0, [r0, #232]	; 0xe8
      d0:	subs	r2, r0, #1
      d4:	sbcs	r2, r1, #0
      d8:	blt	104 <print_all_distinct_dims+0xe0>
      dc:	ldr	r2, [r8, #108]	; 0x6c
      e0:	ldr	r3, [r2, r5, lsl #2]
      e4:	add	r5, r5, #1
      e8:	cmp	r3, #0
      ec:	ldrge	r6, [r4, r3, lsl #2]
      f0:	addge	r6, r6, #1
      f4:	strge	r6, [r4, r3, lsl #2]
      f8:	subs	r3, r5, r0
      fc:	rscs	r3, r1, #0
     100:	blt	e0 <print_all_distinct_dims+0xbc>
     104:	movw	r0, #0
     108:	add	r1, sl, #1
     10c:	movt	r0, #0
     110:	bl	0 <printf>
     114:	ldr	r5, [r8, #36]!	; 0x24
     118:	ldr	r1, [r7]
     11c:	cmp	r5, r1
     120:	bge	154 <print_all_distinct_dims+0x130>
     124:	movw	r6, #0
     128:	movt	r6, #0
     12c:	ldr	r0, [r4, r5, lsl #2]
     130:	cmp	r0, #1
     134:	blt	148 <print_all_distinct_dims+0x124>
     138:	mov	r0, r6
     13c:	mov	r1, r5
     140:	bl	0 <printf>
     144:	ldr	r1, [r7]
     148:	add	r5, r5, #1
     14c:	cmp	r5, r1
     150:	blt	12c <print_all_distinct_dims+0x108>
     154:	movw	r0, #0
     158:	movt	r0, #0
     15c:	bl	0 <printf>
     160:	movw	r0, #0
     164:	movt	r0, #0
     168:	bl	0 <printf>
     16c:	ldr	r0, [r7]
     170:	ldr	r6, [r8]
     174:	cmp	r6, r0
     178:	bge	1a8 <print_all_distinct_dims+0x184>
     17c:	movw	r5, #0
     180:	movt	r5, #0
     184:	ldr	r1, [r4, r6, lsl #2]
     188:	cmp	r1, #1
     18c:	blt	19c <print_all_distinct_dims+0x178>
     190:	mov	r0, r5
     194:	bl	0 <printf>
     198:	ldr	r0, [r7]
     19c:	add	r6, r6, #1
     1a0:	cmp	r6, r0
     1a4:	blt	184 <print_all_distinct_dims+0x160>
     1a8:	ldr	r1, [r4, r0, lsl #2]
     1ac:	movw	r0, #0
     1b0:	movt	r0, #0
     1b4:	bl	0 <printf>
     1b8:	mov	r0, #10
     1bc:	bl	0 <putchar>
     1c0:	mov	r0, r4
     1c4:	sub	sp, fp, #28
     1c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     1cc:	b	0 <free>
     1d0:	movw	r0, #0
     1d4:	movw	r1, #0
     1d8:	movw	r3, #0
     1dc:	mov	r2, #50	; 0x32
     1e0:	movt	r0, #0
     1e4:	movt	r1, #0
     1e8:	movt	r3, #0
     1ec:	bl	0 <__assert_fail>

000001f0 <dim_enter_array>:
     1f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     1f4:	add	fp, sp, #28
     1f8:	sub	sp, sp, #76	; 0x4c
     1fc:	movw	r4, #0
     200:	sub	r1, fp, #32
     204:	movt	r4, #0
     208:	ldr	r0, [r4, #136]	; 0x88
     20c:	ldr	r5, [r4, #3360]	; 0xd20
     210:	add	r0, r4, r0, lsl #2
     214:	ldr	r0, [r0, #8]
     218:	bl	0 <coda_type_get_class>
     21c:	cmp	r0, #0
     220:	beq	228 <dim_enter_array+0x38>
     224:	bl	0 <handle_coda_error>
     228:	ldr	r0, [fp, #-32]	; 0xffffffe0
     22c:	sub	r0, r0, #1
     230:	cmp	r0, #5
     234:	bhi	958 <dim_enter_array+0x768>
     238:	add	r1, r5, r5, lsl #2
     23c:	add	r5, r4, r1, lsl #4
     240:	add	r1, pc, #0
     244:	ldr	pc, [r1, r0, lsl #2]
     248:	.word	0x00000260
     24c:	.word	0x00000958
     250:	.word	0x00000958
     254:	.word	0x000002e4
     258:	.word	0x00000314
     25c:	.word	0x000002a8
     260:	ldr	r0, [r4, #136]	; 0x88
     264:	add	r1, sp, #36	; 0x24
     268:	add	r2, sp, #40	; 0x28
     26c:	add	r0, r4, r0, lsl #2
     270:	ldr	r0, [r0, #8]
     274:	bl	0 <coda_type_get_array_dim>
     278:	cmp	r0, #0
     27c:	beq	284 <dim_enter_array+0x94>
     280:	bl	0 <handle_coda_error>
     284:	ldr	sl, [sp, #36]	; 0x24
     288:	cmp	sl, #1
     28c:	str	sl, [r5, #804]	; 0x324
     290:	blt	368 <dim_enter_array+0x178>
     294:	add	r0, r5, #808	; 0x328
     298:	lsl	r2, sl, #2
     29c:	add	r1, sp, #40	; 0x28
     2a0:	bl	0 <memcpy>
     2a4:	b	368 <dim_enter_array+0x178>
     2a8:	ldr	r0, [r4, #136]	; 0x88
     2ac:	add	r1, sp, #40	; 0x28
     2b0:	add	r0, r4, r0, lsl #2
     2b4:	ldr	r0, [r0, #8]
     2b8:	bl	0 <coda_type_get_special_type>
     2bc:	cmp	r0, #0
     2c0:	beq	2c8 <dim_enter_array+0xd8>
     2c4:	bl	0 <handle_coda_error>
     2c8:	ldr	r0, [sp, #40]	; 0x28
     2cc:	cmp	r0, #3
     2d0:	bne	998 <dim_enter_array+0x7a8>
     2d4:	mov	sl, #1
     2d8:	mov	r0, #2
     2dc:	str	sl, [r5, #804]	; 0x324
     2e0:	b	364 <dim_enter_array+0x174>
     2e4:	ldr	r0, [r4, #136]	; 0x88
     2e8:	add	r1, sp, #40	; 0x28
     2ec:	add	r0, r4, r0, lsl #2
     2f0:	ldr	r0, [r0, #8]
     2f4:	bl	0 <coda_type_get_string_length>
     2f8:	cmp	r0, #0
     2fc:	beq	304 <dim_enter_array+0x114>
     300:	bl	0 <handle_coda_error>
     304:	ldr	r0, [sp, #40]	; 0x28
     308:	mov	sl, #1
     30c:	str	sl, [r5, #804]	; 0x324
     310:	b	364 <dim_enter_array+0x174>
     314:	ldr	r0, [r4, #136]	; 0x88
     318:	add	r1, sp, #40	; 0x28
     31c:	add	r0, r4, r0, lsl #2
     320:	ldr	r0, [r0, #8]
     324:	bl	0 <coda_type_get_bit_size>
     328:	cmp	r0, #0
     32c:	beq	334 <dim_enter_array+0x144>
     330:	bl	0 <handle_coda_error>
     334:	ldr	r0, [sp, #44]	; 0x2c
     338:	mov	sl, #1
     33c:	str	sl, [r5, #804]	; 0x324
     340:	cmp	r0, #0
     344:	blt	360 <dim_enter_array+0x170>
     348:	ldr	r1, [sp, #40]	; 0x28
     34c:	lsr	r2, r1, #3
     350:	tst	r1, #7
     354:	orr	r0, r2, r0, lsl #29
     358:	addne	r0, r0, #1
     35c:	b	364 <dim_enter_array+0x174>
     360:	mvn	r0, #0
     364:	str	r0, [r5, #808]	; 0x328
     368:	movw	r1, #0
     36c:	add	r0, r5, #800	; 0x320
     370:	movt	r1, #0
     374:	ldr	r1, [r1]
     378:	cmp	r1, #0
     37c:	beq	3f0 <dim_enter_array+0x200>
     380:	movw	r8, #0
     384:	str	r5, [sp, #16]
     388:	movt	r8, #0
     38c:	ldr	r6, [r8]
     390:	add	r3, sl, r6
     394:	str	r6, [r0]
     398:	cmp	r3, #9
     39c:	bge	978 <dim_enter_array+0x788>
     3a0:	cmp	r6, #0
     3a4:	str	r3, [r8]
     3a8:	str	r6, [sp, #20]
     3ac:	ble	40c <dim_enter_array+0x21c>
     3b0:	add	r0, r8, r6, lsl #3
     3b4:	ldr	r1, [r0, #232]	; 0xe8
     3b8:	ldr	r2, [r0, #236]	; 0xec
     3bc:	str	r2, [sp, #28]
     3c0:	ldr	r2, [r0, #296]	; 0x128
     3c4:	str	r1, [sp, #32]
     3c8:	ldr	r1, [r0, #300]	; 0x12c
     3cc:	rsbs	r0, r2, #0
     3d0:	str	r2, [sp, #8]
     3d4:	str	r1, [sp, #12]
     3d8:	mov	r0, r1
     3dc:	rscs	r0, r1, #0
     3e0:	bge	5c0 <dim_enter_array+0x3d0>
     3e4:	cmp	sl, #1
     3e8:	bge	434 <dim_enter_array+0x244>
     3ec:	b	648 <dim_enter_array+0x458>
     3f0:	mvn	r1, #0
     3f4:	str	r1, [r0]
     3f8:	mov	r0, #0
     3fc:	str	r0, [r5, #840]	; 0x348
     400:	str	r0, [r5, #844]	; 0x34c
     404:	sub	sp, fp, #28
     408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     40c:	mov	r0, #0
     410:	cmp	sl, #0
     414:	str	r0, [sp, #12]
     418:	mov	r0, #1
     41c:	str	r0, [sp, #8]
     420:	mov	r0, #1
     424:	str	r0, [sp, #32]
     428:	mov	r0, #0
     42c:	str	r0, [sp, #28]
     430:	ble	62c <dim_enter_array+0x43c>
     434:	ldr	r0, [sp, #16]
     438:	add	r5, r8, r6, lsl #2
     43c:	mov	r2, #0
     440:	add	r1, r0, #804	; 0x324
     444:	add	r9, r0, #808	; 0x328
     448:	mov	r0, #0
     44c:	str	r1, [sp, #24]
     450:	mov	r1, #0
     454:	ldr	r3, [r9, r2, lsl #2]
     458:	add	r7, r5, r2, lsl #2
     45c:	add	r2, r2, #1
     460:	str	r0, [r7, #72]	; 0x48
     464:	cmn	r3, #1
     468:	str	r3, [r7, #4]
     46c:	movweq	r1, #1
     470:	cmp	sl, r2
     474:	bne	454 <dim_enter_array+0x264>
     478:	cmp	r1, #0
     47c:	beq	648 <dim_enter_array+0x458>
     480:	ldr	r0, [sp, #32]
     484:	mov	sl, #0
     488:	mov	r7, #0
     48c:	lsl	r4, r0, #2
     490:	ldr	r0, [r9, r7, lsl #2]
     494:	add	r6, r5, r7, lsl #2
     498:	cmn	r0, #1
     49c:	beq	4ac <dim_enter_array+0x2bc>
     4a0:	str	sl, [r6, #140]	; 0x8c
     4a4:	str	sl, [r6, #108]	; 0x6c
     4a8:	b	514 <dim_enter_array+0x324>
     4ac:	ldr	r0, [sp, #20]
     4b0:	str	r0, [r6, #140]	; 0x8c
     4b4:	mov	r0, r4
     4b8:	bl	0 <malloc>
     4bc:	cmp	r0, #0
     4c0:	str	r0, [r6, #108]	; 0x6c
     4c4:	bne	4f0 <dim_enter_array+0x300>
     4c8:	movw	r1, #0
     4cc:	movw	r3, #0
     4d0:	mov	r0, #456	; 0x1c8
     4d4:	mov	r2, r4
     4d8:	str	r0, [sp]
     4dc:	mvn	r0, #0
     4e0:	movt	r1, #0
     4e4:	movt	r3, #0
     4e8:	bl	0 <coda_set_error>
     4ec:	bl	0 <handle_coda_error>
     4f0:	ldr	r0, [sp, #32]
     4f4:	subs	r0, r0, #1
     4f8:	ldr	r0, [sp, #28]
     4fc:	sbcs	r0, r0, #0
     500:	blt	514 <dim_enter_array+0x324>
     504:	ldr	r0, [r6, #108]	; 0x6c
     508:	mov	r1, #255	; 0xff
     50c:	mov	r2, r4
     510:	bl	0 <memset>
     514:	ldr	r0, [sp, #24]
     518:	add	r7, r7, #1
     51c:	ldr	r0, [r0]
     520:	cmp	r7, r0
     524:	blt	490 <dim_enter_array+0x2a0>
     528:	ldr	r0, [sp, #16]
     52c:	mov	r1, #0
     530:	mov	r2, #0
     534:	str	r1, [r0, #844]	; 0x34c
     538:	mov	r0, #0
     53c:	mov	r1, #0
     540:	bl	9b8 <get_all_dims_for_array>
     544:	ldr	r0, [sp, #24]
     548:	ldr	sl, [r0]
     54c:	cmp	sl, #1
     550:	blt	644 <dim_enter_array+0x454>
     554:	ldr	r6, [sp, #20]
     558:	mov	r7, #0
     55c:	mov	r4, #0
     560:	ldr	r0, [r9, r7, lsl #2]
     564:	cmn	r0, #1
     568:	bne	5b0 <dim_enter_array+0x3c0>
     56c:	add	r6, r5, r7, lsl #2
     570:	ldr	r0, [r6, #4]
     574:	ldr	r1, [r6, #36]	; 0x24
     578:	cmp	r0, r1
     57c:	bne	5a4 <dim_enter_array+0x3b4>
     580:	mov	sl, #0
     584:	str	sl, [r6, #72]	; 0x48
     588:	ldr	r0, [r6, #108]	; 0x6c
     58c:	bl	0 <free>
     590:	ldr	r0, [sp, #24]
     594:	str	sl, [r6, #140]	; 0x8c
     598:	str	sl, [r6, #108]	; 0x6c
     59c:	ldr	sl, [r0]
     5a0:	b	5ac <dim_enter_array+0x3bc>
     5a4:	mov	r4, #1
     5a8:	str	r4, [r6, #72]	; 0x48
     5ac:	ldr	r6, [sp, #20]
     5b0:	add	r7, r7, #1
     5b4:	cmp	r7, sl
     5b8:	blt	560 <dim_enter_array+0x370>
     5bc:	b	64c <dim_enter_array+0x45c>
     5c0:	cmp	sl, #1
     5c4:	blt	648 <dim_enter_array+0x458>
     5c8:	mov	r0, #0
     5cc:	cmp	sl, #3
     5d0:	bls	608 <dim_enter_array+0x418>
     5d4:	add	r0, r8, r6, lsl #2
     5d8:	vmov.i32	q8, #0	; 0x00000000
     5dc:	add	r1, r0, #72	; 0x48
     5e0:	bic	r0, sl, #3
     5e4:	mov	r2, r0
     5e8:	sub	r3, r1, #68	; 0x44
     5ec:	subs	r2, r2, #4
     5f0:	vst1.32	{d16-d17}, [r3]
     5f4:	vst1.32	{d16-d17}, [r1]!
     5f8:	bne	5e8 <dim_enter_array+0x3f8>
     5fc:	mov	r4, #0
     600:	cmp	sl, r0
     604:	beq	64c <dim_enter_array+0x45c>
     608:	add	r1, r8, r6, lsl #2
     60c:	mov	r4, #0
     610:	add	r2, r1, r0, lsl #2
     614:	add	r0, r0, #1
     618:	cmp	sl, r0
     61c:	str	r4, [r2, #72]	; 0x48
     620:	str	r4, [r2, #4]
     624:	bne	610 <dim_enter_array+0x420>
     628:	b	64c <dim_enter_array+0x45c>
     62c:	mov	r0, #1
     630:	mov	r4, #0
     634:	str	r0, [sp, #32]
     638:	mov	r0, #0
     63c:	str	r0, [sp, #28]
     640:	b	650 <dim_enter_array+0x460>
     644:	ldr	r6, [sp, #20]
     648:	mov	r4, #0
     64c:	ldr	r3, [r8]
     650:	mvn	r0, #0
     654:	cmp	r3, #1
     658:	str	r0, [r8, #104]	; 0x68
     65c:	mov	r0, #0
     660:	str	r0, [r8, #68]	; 0x44
     664:	blt	68c <dim_enter_array+0x49c>
     668:	mov	r1, #1
     66c:	add	r2, r8, r0, lsl #2
     670:	ldr	r2, [r2, #72]	; 0x48
     674:	cmp	r2, #0
     678:	strne	r0, [r8, #104]	; 0x68
     67c:	add	r0, r0, #1
     680:	strne	r1, [r8, #68]	; 0x44
     684:	cmp	r0, r3
     688:	blt	66c <dim_enter_array+0x47c>
     68c:	ldr	r1, [sp, #16]
     690:	mov	r0, #1
     694:	cmp	sl, #1
     698:	str	r3, [sp, #24]
     69c:	str	r0, [r1, #840]!	; 0x348
     6a0:	str	r1, [sp, #16]
     6a4:	blt	73c <dim_enter_array+0x54c>
     6a8:	add	r2, r8, r6, lsl #3
     6ac:	add	r1, r8, r6, lsl #2
     6b0:	mov	r3, #0
     6b4:	str	r4, [sp, #4]
     6b8:	add	ip, r2, #240	; 0xf0
     6bc:	add	lr, r1, #4
     6c0:	mov	r2, ip
     6c4:	ldr	r6, [lr, r3, lsl #2]
     6c8:	cmp	r3, #0
     6cc:	mul	r0, r0, r6
     6d0:	beq	6f8 <dim_enter_array+0x508>
     6d4:	ldr	r4, [r2, #-8]
     6d8:	ldr	r1, [r2, #-4]
     6dc:	asr	r9, r6, #31
     6e0:	umull	r7, r5, r4, r6
     6e4:	mla	r4, r4, r9, r5
     6e8:	str	r7, [r2]
     6ec:	mla	r1, r1, r6, r4
     6f0:	str	r1, [r2, #4]
     6f4:	b	71c <dim_enter_array+0x52c>
     6f8:	ldr	r6, [lr]
     6fc:	ldr	r5, [sp, #32]
     700:	umull	r4, r7, r5, r6
     704:	asr	r1, r6, #31
     708:	mla	r1, r5, r1, r7
     70c:	ldr	r5, [sp, #28]
     710:	str	r4, [ip]
     714:	mla	r1, r5, r6, r1
     718:	str	r1, [ip, #4]
     71c:	add	r3, r3, #1
     720:	add	r2, r2, #8
     724:	cmp	r3, sl
     728:	blt	6c4 <dim_enter_array+0x4d4>
     72c:	ldr	r1, [sp, #16]
     730:	ldr	r6, [sp, #20]
     734:	ldr	r4, [sp, #4]
     738:	str	r0, [r1]
     73c:	cmp	r4, #0
     740:	beq	80c <dim_enter_array+0x61c>
     744:	cmp	sl, #1
     748:	blt	760 <dim_enter_array+0x570>
     74c:	add	r0, r8, r6, lsl #3
     750:	lsl	r2, sl, #3
     754:	mov	r1, #0
     758:	add	r0, r0, #304	; 0x130
     75c:	bl	0 <memset>
     760:	ldr	r0, [sp, #32]
     764:	subs	r0, r0, #1
     768:	ldr	r0, [sp, #28]
     76c:	sbcs	r0, r0, #0
     770:	blt	880 <dim_enter_array+0x690>
     774:	ldr	r1, [sp, #20]
     778:	movw	r0, #65232	; 0xfed0
     77c:	mov	r2, #0
     780:	movt	r0, #65535	; 0xffff
     784:	sub	ip, r0, r1, lsl #3
     788:	lsl	lr, r1, #2
     78c:	cmp	sl, #1
     790:	blt	7f0 <dim_enter_array+0x600>
     794:	mov	r3, #1
     798:	mov	r0, ip
     79c:	mov	r1, lr
     7a0:	mov	r4, sl
     7a4:	add	r6, r8, r1
     7a8:	add	r1, r1, #4
     7ac:	ldr	r5, [r6, #72]	; 0x48
     7b0:	cmp	r5, #0
     7b4:	mov	r5, r8
     7b8:	addeq	r6, r6, #4
     7bc:	ldr	r7, [r5, -r0]!
     7c0:	sub	r0, r0, #8
     7c4:	ldrne	r6, [r6, #108]	; 0x6c
     7c8:	addne	r6, r6, r2, lsl #2
     7cc:	ldr	r6, [r6]
     7d0:	mul	r3, r6, r3
     7d4:	adds	r6, r7, r3
     7d8:	str	r6, [r5]
     7dc:	ldr	r6, [r5, #4]
     7e0:	adc	r6, r6, r3, asr #31
     7e4:	subs	r4, r4, #1
     7e8:	str	r6, [r5, #4]
     7ec:	bne	7a4 <dim_enter_array+0x5b4>
     7f0:	ldr	r0, [sp, #32]
     7f4:	add	r2, r2, #1
     7f8:	subs	r0, r2, r0
     7fc:	ldr	r0, [sp, #28]
     800:	rscs	r0, r0, #0
     804:	blt	78c <dim_enter_array+0x59c>
     808:	b	880 <dim_enter_array+0x690>
     80c:	add	r0, r8, r6, lsl #2
     810:	ldr	r5, [sp, #8]
     814:	add	r2, r8, r6, lsl #3
     818:	cmp	sl, #2
     81c:	ldr	r1, [r0, #4]
     820:	umull	r3, r7, r5, r1
     824:	asr	r6, r1, #31
     828:	mla	r7, r5, r6, r7
     82c:	ldr	r6, [sp, #12]
     830:	str	r3, [r2, #304]	; 0x130
     834:	mla	r1, r6, r1, r7
     838:	str	r1, [r2, #308]	; 0x134
     83c:	blt	880 <dim_enter_array+0x690>
     840:	ldr	r7, [r2, #304]	; 0x130
     844:	ldr	r3, [r2, #308]	; 0x134
     848:	add	r1, r2, #312	; 0x138
     84c:	add	r0, r0, #8
     850:	sub	r2, sl, #1
     854:	ldr	r6, [r0], #4
     858:	subs	r2, r2, #1
     85c:	umull	r4, ip, r7, r6
     860:	asr	r5, r6, #31
     864:	mla	r7, r7, r5, ip
     868:	str	r4, [r1]
     86c:	mla	r3, r3, r6, r7
     870:	mov	r7, r4
     874:	str	r3, [r1, #4]
     878:	add	r1, r1, #8
     87c:	bne	854 <dim_enter_array+0x664>
     880:	ldr	r0, [sp, #20]
     884:	add	r0, r0, sl
     888:	add	r1, r8, r0, lsl #3
     88c:	ldr	r0, [r1, #296]	; 0x128
     890:	ldr	r2, [r1, #300]	; 0x12c
     894:	subs	r0, r0, #1
     898:	sbcs	r0, r2, #0
     89c:	blt	950 <dim_enter_array+0x760>
     8a0:	ldr	r0, [sp, #24]
     8a4:	cmp	sl, #2
     8a8:	sub	r0, r0, #1
     8ac:	add	r2, r8, r0, lsl #3
     8b0:	add	r0, r8, r0, lsl #2
     8b4:	ldr	r0, [r0, #4]
     8b8:	asr	r3, r0, #31
     8bc:	str	r0, [r2, #176]	; 0xb0
     8c0:	str	r3, [r2, #180]	; 0xb4
     8c4:	blt	90c <dim_enter_array+0x71c>
     8c8:	ldr	r0, [sp, #20]
     8cc:	add	r1, r1, #160	; 0xa0
     8d0:	add	r0, r8, r0, lsl #2
     8d4:	sub	r0, r0, #4
     8d8:	ldr	r2, [r0, sl, lsl #2]
     8dc:	ldrd	r4, [r1, #8]
     8e0:	umull	r6, r3, r4, r2
     8e4:	asr	r7, r2, #31
     8e8:	mla	r3, r4, r7, r3
     8ec:	mla	r7, r5, r2, r3
     8f0:	sub	r3, sl, #2
     8f4:	sub	r2, sl, #1
     8f8:	strd	r6, [r1]
     8fc:	sub	r1, r1, #8
     900:	cmp	r3, #0
     904:	mov	sl, r2
     908:	bgt	8d8 <dim_enter_array+0x6e8>
     90c:	ldr	r2, [sp, #20]
     910:	cmp	r2, #1
     914:	blt	950 <dim_enter_array+0x760>
     918:	add	r1, r8, r2, lsl #3
     91c:	add	r2, r2, #1
     920:	add	r0, r1, #168	; 0xa8
     924:	add	r1, r1, #176	; 0xb0
     928:	ldrd	r4, [r1]
     92c:	ldrd	r6, [r0]
     930:	sub	r2, r2, #1
     934:	cmp	r2, #1
     938:	umull	r8, r3, r6, r4
     93c:	mla	r3, r6, r5, r3
     940:	mla	r9, r7, r4, r3
     944:	strd	r8, [r0]
     948:	sub	r0, r0, #8
     94c:	bgt	928 <dim_enter_array+0x738>
     950:	sub	sp, fp, #28
     954:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     958:	movw	r0, #0
     95c:	movw	r1, #0
     960:	movw	r3, #0
     964:	movw	r2, #386	; 0x182
     968:	movt	r0, #0
     96c:	movt	r1, #0
     970:	movt	r3, #0
     974:	bl	0 <__assert_fail>
     978:	movw	r0, #0
     97c:	movw	r1, #0
     980:	movw	r3, #0
     984:	movw	r2, #402	; 0x192
     988:	movt	r0, #0
     98c:	movt	r1, #0
     990:	movt	r3, #0
     994:	bl	0 <__assert_fail>
     998:	movw	r0, #0
     99c:	movw	r1, #0
     9a0:	movw	r3, #0
     9a4:	movw	r2, #349	; 0x15d
     9a8:	movt	r0, #0
     9ac:	movt	r1, #0
     9b0:	movt	r3, #0
     9b4:	bl	0 <__assert_fail>

000009b8 <get_all_dims_for_array>:
     9b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9bc:	add	fp, sp, #28
     9c0:	sub	sp, sp, #44	; 0x2c
     9c4:	movw	r7, #0
     9c8:	mov	r5, r1
     9cc:	mov	sl, r0
     9d0:	sub	r1, fp, #32
     9d4:	str	r2, [sp]
     9d8:	movt	r7, #0
     9dc:	add	r6, r7, #144	; 0x90
     9e0:	mov	r0, r6
     9e4:	bl	0 <coda_cursor_get_type_class>
     9e8:	cmp	r0, #0
     9ec:	beq	9f4 <get_all_dims_for_array+0x3c>
     9f0:	bl	0 <handle_coda_error>
     9f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     9f8:	sub	r1, r0, #4
     9fc:	cmp	r1, #2
     a00:	bcc	ae0 <get_all_dims_for_array+0x128>
     a04:	cmp	r0, #0
     a08:	beq	b20 <get_all_dims_for_array+0x168>
     a0c:	cmp	r0, #1
     a10:	bne	d98 <get_all_dims_for_array+0x3e0>
     a14:	add	r0, r5, r5, lsl #2
     a18:	add	r9, r7, r0, lsl #4
     a1c:	ldr	r0, [r7, #3360]	; 0xd20
     a20:	ldr	r4, [r9, #800]	; 0x320
     a24:	cmp	r0, r5
     a28:	bne	c10 <get_all_dims_for_array+0x258>
     a2c:	add	r8, sp, #8
     a30:	add	r1, sp, #4
     a34:	mov	r0, r6
     a38:	mov	r2, r8
     a3c:	bl	0 <coda_cursor_get_array_dim>
     a40:	cmp	r0, #0
     a44:	beq	a4c <get_all_dims_for_array+0x94>
     a48:	bl	0 <handle_coda_error>
     a4c:	mov	r0, r9
     a50:	ldr	r1, [sp, #4]
     a54:	ldr	r2, [r0, #804]!	; 0x324
     a58:	cmp	r1, r2
     a5c:	bne	dd8 <get_all_dims_for_array+0x420>
     a60:	cmp	r1, #1
     a64:	blt	d0c <get_all_dims_for_array+0x354>
     a68:	movw	r1, #0
     a6c:	add	r2, r9, #808	; 0x328
     a70:	add	r3, r9, #844	; 0x34c
     a74:	mov	r7, #0
     a78:	movt	r1, #0
     a7c:	add	ip, r1, r4, lsl #2
     a80:	ldr	r6, [r2, r7, lsl #2]
     a84:	cmn	r6, #1
     a88:	bne	acc <get_all_dims_for_array+0x114>
     a8c:	add	r4, ip, r7, lsl #2
     a90:	ldr	r6, [r8, r7, lsl #2]
     a94:	ldr	r1, [r3]
     a98:	ldr	r5, [r4, #108]	; 0x6c
     a9c:	str	r6, [r5, r1, lsl #2]
     aa0:	ldr	r5, [r4, #4]
     aa4:	cmn	r5, #1
     aa8:	beq	ac4 <get_all_dims_for_array+0x10c>
     aac:	cmp	r5, r6
     ab0:	strlt	r6, [r4, #4]
     ab4:	ldr	r1, [r4, #36]	; 0x24
     ab8:	cmp	r1, r6
     abc:	strgt	r6, [r4, #36]	; 0x24
     ac0:	b	acc <get_all_dims_for_array+0x114>
     ac4:	str	r6, [r4, #4]
     ac8:	str	r6, [r4, #36]	; 0x24
     acc:	ldr	r1, [r0]
     ad0:	add	r7, r7, #1
     ad4:	cmp	r7, r1
     ad8:	blt	a80 <get_all_dims_for_array+0xc8>
     adc:	b	d0c <get_all_dims_for_array+0x354>
     ae0:	ldr	r1, [r7, #3360]	; 0xd20
     ae4:	cmp	r1, r5
     ae8:	bne	db8 <get_all_dims_for_array+0x400>
     aec:	cmp	r0, #4
     af0:	bne	b84 <get_all_dims_for_array+0x1cc>
     af4:	add	r1, sp, #4
     af8:	mov	r0, r6
     afc:	bl	0 <coda_cursor_get_string_length>
     b00:	cmp	r0, #0
     b04:	beq	b0c <get_all_dims_for_array+0x154>
     b08:	bl	0 <handle_coda_error>
     b0c:	ldr	r0, [sp, #4]
     b10:	str	r0, [sp, #8]
     b14:	asr	r0, r0, #31
     b18:	str	r0, [sp, #12]
     b1c:	b	b9c <get_all_dims_for_array+0x1e4>
     b20:	ldr	r0, [sp]
     b24:	add	r2, sp, #8
     b28:	add	r4, r7, r0, lsl #2
     b2c:	mov	r0, r6
     b30:	ldr	r1, [r4, #3492]!	; 0xda4
     b34:	bl	0 <coda_cursor_get_record_field_available_status>
     b38:	cmp	r0, #0
     b3c:	beq	b44 <get_all_dims_for_array+0x18c>
     b40:	bl	0 <handle_coda_error>
     b44:	ldr	r0, [sp, #8]
     b48:	cmp	r0, #0
     b4c:	beq	c94 <get_all_dims_for_array+0x2dc>
     b50:	ldr	r1, [r4]
     b54:	mov	r0, r6
     b58:	bl	0 <coda_cursor_goto_record_field_by_index>
     b5c:	cmp	r0, #0
     b60:	beq	b68 <get_all_dims_for_array+0x1b0>
     b64:	bl	0 <handle_coda_error>
     b68:	ldr	r1, [sp]
     b6c:	add	r0, sl, #1
     b70:	add	r2, r1, #1
     b74:	mov	r1, r5
     b78:	bl	9b8 <get_all_dims_for_array>
     b7c:	mov	r0, r6
     b80:	b	d8c <get_all_dims_for_array+0x3d4>
     b84:	add	r1, sp, #8
     b88:	mov	r0, r6
     b8c:	bl	0 <coda_cursor_get_byte_size>
     b90:	cmp	r0, #0
     b94:	beq	b9c <get_all_dims_for_array+0x1e4>
     b98:	bl	0 <handle_coda_error>
     b9c:	add	r0, r5, r5, lsl #2
     ba0:	ldr	r2, [sp, #12]
     ba4:	add	r0, r7, r0, lsl #4
     ba8:	ldr	r1, [r0, #800]	; 0x320
     bac:	ldr	r3, [r0, #844]	; 0x34c
     bb0:	movw	r0, #0
     bb4:	movt	r0, #0
     bb8:	add	r0, r0, r1, lsl #2
     bbc:	ldr	r1, [sp, #8]
     bc0:	ldr	r7, [r0, #108]	; 0x6c
     bc4:	str	r1, [r7, r3, lsl #2]
     bc8:	mov	r3, r0
     bcc:	ldr	r7, [r3, #4]!
     bd0:	cmn	r7, #1
     bd4:	beq	bfc <get_all_dims_for_array+0x244>
     bd8:	subs	r6, r7, r1
     bdc:	rscs	r7, r2, r7, asr #31
     be0:	strlt	r1, [r3]
     be4:	ldr	r3, [r0, #36]!	; 0x24
     be8:	subs	r7, r1, r3
     bec:	sbcs	r2, r2, r3, asr #31
     bf0:	strlt	r1, [r0]
     bf4:	sub	sp, fp, #28
     bf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     bfc:	add	r0, r0, #36	; 0x24
     c00:	str	r1, [r3]
     c04:	str	r1, [r0]
     c08:	sub	sp, fp, #28
     c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c10:	cmp	r5, #0
     c14:	moveq	r0, #0
     c18:	streq	r0, [r7, #844]	; 0x34c
     c1c:	ldr	r1, [r9, #804]	; 0x324
     c20:	ldr	r2, [r9, #840]	; 0x348
     c24:	ldr	r0, [r9, #844]	; 0x34c
     c28:	mul	r2, r2, r0
     c2c:	cmp	r1, #1
     c30:	str	r2, [r9, #924]	; 0x39c
     c34:	blt	d14 <get_all_dims_for_array+0x35c>
     c38:	movw	r2, #0
     c3c:	add	r1, r1, r4
     c40:	add	r3, r4, #27
     c44:	movt	r2, #0
     c48:	add	r2, r2, r4, lsl #2
     c4c:	mov	r4, #1
     c50:	add	r2, r2, #72	; 0x48
     c54:	ldr	r7, [r2]
     c58:	cmp	r7, #0
     c5c:	subeq	r7, r2, #68	; 0x44
     c60:	ldrne	r7, [r2, #36]	; 0x24
     c64:	add	r2, r2, #4
     c68:	addne	r7, r7, r0, lsl #2
     c6c:	ldr	r7, [r7]
     c70:	mul	r4, r7, r4
     c74:	add	r7, r3, #1
     c78:	sub	r3, r3, #26
     c7c:	cmp	r3, r1
     c80:	mov	r3, r7
     c84:	blt	c54 <get_all_dims_for_array+0x29c>
     c88:	cmp	r4, #1
     c8c:	bge	d18 <get_all_dims_for_array+0x360>
     c90:	b	d0c <get_all_dims_for_array+0x354>
     c94:	ldr	r0, [r7, #3360]	; 0xd20
     c98:	add	r0, r0, r0, lsl #2
     c9c:	add	r3, r7, r0, lsl #4
     ca0:	mov	r0, r3
     ca4:	ldr	r5, [r0, #804]!	; 0x324
     ca8:	cmp	r5, #1
     cac:	blt	d0c <get_all_dims_for_array+0x354>
     cb0:	ldr	r1, [r0, #-4]
     cb4:	movw	r2, #0
     cb8:	mov	r7, #0
     cbc:	mov	r6, #0
     cc0:	movt	r2, #0
     cc4:	add	ip, r2, r1, lsl #2
     cc8:	add	r2, r3, #808	; 0x328
     ccc:	add	r3, r3, #844	; 0x34c
     cd0:	ldr	r4, [r2, r6, lsl #2]
     cd4:	cmn	r4, #1
     cd8:	bne	d00 <get_all_dims_for_array+0x348>
     cdc:	add	r5, ip, r6, lsl #2
     ce0:	ldr	r1, [r3]
     ce4:	ldr	r4, [r5, #108]	; 0x6c
     ce8:	str	r7, [r4, r1, lsl #2]
     cec:	ldr	r1, [r5, #4]
     cf0:	cmn	r1, #1
     cf4:	streq	r7, [r5, #4]
     cf8:	str	r7, [r5, #36]	; 0x24
     cfc:	ldr	r5, [r0]
     d00:	add	r6, r6, #1
     d04:	cmp	r6, r5
     d08:	blt	cd0 <get_all_dims_for_array+0x318>
     d0c:	sub	sp, fp, #28
     d10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d14:	mov	r4, #1
     d18:	mov	r0, r6
     d1c:	mov	r8, r6
     d20:	bl	0 <coda_cursor_goto_first_array_element>
     d24:	cmp	r0, #0
     d28:	beq	d30 <get_all_dims_for_array+0x378>
     d2c:	bl	0 <handle_coda_error>
     d30:	add	r7, sl, #1
     d34:	add	r9, r9, #924	; 0x39c
     d38:	add	r5, r5, #1
     d3c:	sub	r6, r4, #1
     d40:	mov	sl, #0
     d44:	ldr	r2, [sp]
     d48:	mov	r0, r7
     d4c:	mov	r1, r5
     d50:	bl	9b8 <get_all_dims_for_array>
     d54:	cmp	sl, r6
     d58:	bge	d7c <get_all_dims_for_array+0x3c4>
     d5c:	mov	r0, r8
     d60:	bl	0 <coda_cursor_goto_next_array_element>
     d64:	cmp	r0, #0
     d68:	beq	d70 <get_all_dims_for_array+0x3b8>
     d6c:	bl	0 <handle_coda_error>
     d70:	ldr	r0, [r9]
     d74:	add	r0, r0, #1
     d78:	str	r0, [r9]
     d7c:	add	sl, sl, #1
     d80:	cmp	r4, sl
     d84:	bne	d44 <get_all_dims_for_array+0x38c>
     d88:	mov	r0, r8
     d8c:	bl	0 <coda_cursor_goto_parent>
     d90:	sub	sp, fp, #28
     d94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d98:	movw	r0, #0
     d9c:	movw	r1, #0
     da0:	movw	r3, #0
     da4:	movw	r2, #294	; 0x126
     da8:	movt	r0, #0
     dac:	movt	r1, #0
     db0:	movt	r3, #0
     db4:	bl	0 <__assert_fail>
     db8:	movw	r0, #0
     dbc:	movw	r1, #0
     dc0:	movw	r3, #0
     dc4:	mov	r2, #252	; 0xfc
     dc8:	movt	r0, #0
     dcc:	movt	r1, #0
     dd0:	movt	r3, #0
     dd4:	bl	0 <__assert_fail>
     dd8:	movw	r0, #0
     ddc:	movw	r1, #0
     de0:	movw	r3, #0
     de4:	mov	r2, #125	; 0x7d
     de8:	movt	r0, #0
     dec:	movt	r1, #0
     df0:	movt	r3, #0
     df4:	bl	0 <__assert_fail>

00000df8 <dim_leave_array>:
     df8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
     dfc:	add	fp, sp, #24
     e00:	movw	r0, #0
     e04:	movt	r0, #0
     e08:	ldr	r1, [r0, #3360]	; 0xd20
     e0c:	cmn	r1, #1
     e10:	ble	f04 <dim_leave_array+0x10c>
     e14:	add	r1, r1, r1, lsl #2
     e18:	movw	r5, #0
     e1c:	add	r6, r0, r1, lsl #4
     e20:	movt	r5, #0
     e24:	ldr	r0, [r6, #804]!	; 0x324
     e28:	ldr	r1, [r5]
     e2c:	ldr	r8, [r6, #-4]
     e30:	sub	r1, r1, r0
     e34:	cmp	r0, #1
     e38:	str	r1, [r5]
     e3c:	blt	e74 <dim_leave_array+0x7c>
     e40:	add	r7, r5, r8, lsl #2
     e44:	mov	r4, #0
     e48:	add	r1, r7, r4, lsl #2
     e4c:	ldr	r2, [r1, #72]	; 0x48
     e50:	cmp	r2, #0
     e54:	beq	e64 <dim_leave_array+0x6c>
     e58:	ldr	r0, [r1, #108]	; 0x6c
     e5c:	bl	0 <free>
     e60:	ldr	r0, [r6]
     e64:	add	r4, r4, #1
     e68:	cmp	r4, r0
     e6c:	blt	e48 <dim_leave_array+0x50>
     e70:	ldr	r1, [r5]
     e74:	mvn	r2, #0
     e78:	cmp	r1, #1
     e7c:	str	r2, [r5, #104]	; 0x68
     e80:	mov	r2, #0
     e84:	str	r2, [r5, #68]	; 0x44
     e88:	blt	eb0 <dim_leave_array+0xb8>
     e8c:	mov	r3, #1
     e90:	add	r7, r5, r2, lsl #2
     e94:	ldr	r7, [r7, #72]	; 0x48
     e98:	cmp	r7, #0
     e9c:	strne	r2, [r5, #104]	; 0x68
     ea0:	add	r2, r2, #1
     ea4:	strne	r3, [r5, #68]	; 0x44
     ea8:	cmp	r2, r1
     eac:	blt	e90 <dim_leave_array+0x98>
     eb0:	add	r0, r8, r0
     eb4:	add	r0, r5, r0, lsl #3
     eb8:	ldr	r1, [r0, #296]	; 0x128
     ebc:	ldr	r0, [r0, #300]	; 0x12c
     ec0:	subs	r1, r1, #1
     ec4:	sbcs	r0, r0, #0
     ec8:	cmpge	r8, #1
     ecc:	blt	f00 <dim_leave_array+0x108>
     ed0:	add	r0, r5, r8, lsl #3
     ed4:	add	r6, r8, #1
     ed8:	add	r4, r0, #168	; 0xa8
     edc:	add	r5, r0, #176	; 0xb0
     ee0:	ldrd	r0, [r4]
     ee4:	ldrd	r2, [r5]
     ee8:	bl	0 <__aeabi_ldivmod>
     eec:	sub	r6, r6, #1
     ef0:	strd	r0, [r4]
     ef4:	sub	r4, r4, #8
     ef8:	cmp	r6, #1
     efc:	bgt	ee0 <dim_leave_array+0xe8>
     f00:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
     f04:	movw	r0, #0
     f08:	movw	r1, #0
     f0c:	movw	r3, #0
     f10:	movw	r2, #579	; 0x243
     f14:	movt	r0, #0
     f18:	movt	r1, #0
     f1c:	movt	r3, #0
     f20:	bl	0 <__assert_fail>

00000f24 <dim_record_field_available>:
     f24:	mov	r0, #0
     f28:	mov	r1, #0
     f2c:	mov	r2, #0
     f30:	b	f34 <get_record_field_available_status>

00000f34 <get_record_field_available_status>:
     f34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f38:	add	fp, sp, #28
     f3c:	sub	sp, sp, #12
     f40:	movw	r4, #0
     f44:	mov	r6, r1
     f48:	mov	r8, r0
     f4c:	add	r1, sp, #8
     f50:	mov	sl, r2
     f54:	movt	r4, #0
     f58:	add	r0, r4, #144	; 0x90
     f5c:	str	r0, [sp]
     f60:	bl	0 <coda_cursor_get_type_class>
     f64:	cmp	r0, #0
     f68:	beq	f70 <get_record_field_available_status+0x3c>
     f6c:	bl	0 <handle_coda_error>
     f70:	ldr	r0, [sp, #8]
     f74:	cmp	r0, #0
     f78:	beq	1020 <get_record_field_available_status+0xec>
     f7c:	cmp	r0, #1
     f80:	bne	1140 <get_record_field_available_status+0x20c>
     f84:	ldr	r0, [r4, #3360]	; 0xd20
     f88:	cmp	r0, r6
     f8c:	ble	1160 <get_record_field_available_status+0x22c>
     f90:	add	r0, r6, r6, lsl #2
     f94:	cmp	r6, #0
     f98:	add	r7, r4, r0, lsl #4
     f9c:	moveq	r0, #0
     fa0:	ldr	r3, [r7, #800]	; 0x320
     fa4:	streq	r0, [r4, #844]	; 0x34c
     fa8:	ldr	r1, [r7, #804]	; 0x324
     fac:	ldr	r2, [r7, #840]	; 0x348
     fb0:	ldr	r0, [r7, #844]	; 0x34c
     fb4:	mul	r2, r2, r0
     fb8:	cmp	r1, #1
     fbc:	str	r2, [r7, #924]	; 0x39c
     fc0:	blt	10a0 <get_record_field_available_status+0x16c>
     fc4:	movw	r2, #0
     fc8:	add	r1, r1, r3
     fcc:	mov	r4, #1
     fd0:	movt	r2, #0
     fd4:	add	r2, r2, r3, lsl #2
     fd8:	add	r3, r3, #27
     fdc:	add	r2, r2, #72	; 0x48
     fe0:	ldr	r5, [r2]
     fe4:	cmp	r5, #0
     fe8:	subeq	r5, r2, #68	; 0x44
     fec:	ldrne	r5, [r2, #36]	; 0x24
     ff0:	add	r2, r2, #4
     ff4:	addne	r5, r5, r0, lsl #2
     ff8:	ldr	r5, [r5]
     ffc:	mul	r4, r5, r4
    1000:	add	r5, r3, #1
    1004:	sub	r3, r3, #26
    1008:	cmp	r3, r1
    100c:	mov	r3, r5
    1010:	blt	fe0 <get_record_field_available_status+0xac>
    1014:	cmp	r4, #1
    1018:	bge	10a4 <get_record_field_available_status+0x170>
    101c:	b	1120 <get_record_field_available_status+0x1ec>
    1020:	add	r5, r4, sl, lsl #2
    1024:	ldr	r0, [sp]
    1028:	add	r2, sp, #4
    102c:	ldr	r1, [r5, #3492]!	; 0xda4
    1030:	bl	0 <coda_cursor_get_record_field_available_status>
    1034:	cmp	r0, #0
    1038:	beq	1040 <get_record_field_available_status+0x10c>
    103c:	bl	0 <handle_coda_error>
    1040:	ldr	r0, [sp, #4]
    1044:	cmp	r0, #0
    1048:	beq	1120 <get_record_field_available_status+0x1ec>
    104c:	ldr	r0, [r4, #3748]	; 0xea4
    1050:	sub	r0, r0, #1
    1054:	cmp	r0, sl
    1058:	beq	1134 <get_record_field_available_status+0x200>
    105c:	ldr	r1, [r5]
    1060:	ldr	r0, [sp]
    1064:	bl	0 <coda_cursor_goto_record_field_by_index>
    1068:	cmp	r0, #0
    106c:	beq	1074 <get_record_field_available_status+0x140>
    1070:	bl	0 <handle_coda_error>
    1074:	add	r0, r8, #1
    1078:	add	r2, sl, #1
    107c:	mov	r1, r6
    1080:	bl	f34 <get_record_field_available_status>
    1084:	str	r0, [sp, #4]
    1088:	ldr	r0, [sp]
    108c:	bl	0 <coda_cursor_goto_parent>
    1090:	ldr	r0, [sp, #4]
    1094:	cmp	r0, #0
    1098:	bne	1134 <get_record_field_available_status+0x200>
    109c:	b	1120 <get_record_field_available_status+0x1ec>
    10a0:	mov	r4, #1
    10a4:	ldr	r0, [sp]
    10a8:	bl	0 <coda_cursor_goto_first_array_element>
    10ac:	cmp	r0, #0
    10b0:	beq	10b8 <get_record_field_available_status+0x184>
    10b4:	bl	0 <handle_coda_error>
    10b8:	add	r5, r7, #924	; 0x39c
    10bc:	add	r7, r8, #1
    10c0:	add	r6, r6, #1
    10c4:	sub	r9, r4, #1
    10c8:	mov	r8, #0
    10cc:	mov	r0, r7
    10d0:	mov	r1, r6
    10d4:	mov	r2, sl
    10d8:	bl	f34 <get_record_field_available_status>
    10dc:	cmp	r0, #0
    10e0:	bne	112c <get_record_field_available_status+0x1f8>
    10e4:	cmp	r8, r9
    10e8:	bge	110c <get_record_field_available_status+0x1d8>
    10ec:	ldr	r0, [sp]
    10f0:	bl	0 <coda_cursor_goto_next_array_element>
    10f4:	cmp	r0, #0
    10f8:	beq	1100 <get_record_field_available_status+0x1cc>
    10fc:	bl	0 <handle_coda_error>
    1100:	ldr	r0, [r5]
    1104:	add	r0, r0, #1
    1108:	str	r0, [r5]
    110c:	add	r8, r8, #1
    1110:	cmp	r8, r4
    1114:	blt	10cc <get_record_field_available_status+0x198>
    1118:	ldr	r0, [sp]
    111c:	bl	0 <coda_cursor_goto_parent>
    1120:	mov	r0, #0
    1124:	sub	sp, fp, #28
    1128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    112c:	ldr	r0, [sp]
    1130:	bl	0 <coda_cursor_goto_parent>
    1134:	mov	r0, #1
    1138:	sub	sp, fp, #28
    113c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1140:	movw	r0, #0
    1144:	movw	r1, #0
    1148:	movw	r3, #0
    114c:	movw	r2, #729	; 0x2d9
    1150:	movt	r0, #0
    1154:	movt	r1, #0
    1158:	movt	r3, #0
    115c:	bl	0 <__assert_fail>
    1160:	movw	r0, #0
    1164:	movw	r1, #0
    1168:	movw	r3, #0
    116c:	movw	r2, #638	; 0x27e
    1170:	movt	r0, #0
    1174:	movt	r1, #0
    1178:	movt	r3, #0
    117c:	bl	0 <__assert_fail>
