
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/monster_test/CMakeFiles/monster_test.dir/monster_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <MyGame_InParentNamespace_verify_table>:
       0:	mov	r0, #0
       4:	bx	lr

00000008 <Fantasy_Attacker_verify_table>:
       8:	mov	r3, #4
       c:	mov	r1, #0
      10:	mov	r2, r3
      14:	b	0 <flatcc_verify_field>

00000018 <MyGame_Example_with_emptystruct_verify_table>:
      18:	mov	r2, #0
      1c:	mov	r3, #1
      20:	mov	r1, r2
      24:	b	0 <flatcc_verify_field>

00000028 <hexdump>:
      28:	strd	r4, [sp, #-36]!	; 0xffffffdc
      2c:	strd	r6, [sp, #8]
      30:	mov	r7, r1
      34:	movw	r1, #0
      38:	movt	r1, #0
      3c:	strd	r8, [sp, #16]
      40:	mov	r9, r2
      44:	mov	r2, r0
      48:	mov	r0, r3
      4c:	strd	sl, [sp, #24]
      50:	str	lr, [sp, #32]
      54:	sub	sp, sp, #36	; 0x24
      58:	mov	r6, r3
      5c:	bl	0 <fprintf>
      60:	cmp	r9, #0
      64:	beq	17c <hexdump+0x154>
      68:	add	r3, sp, #12
      6c:	movw	sl, #0
      70:	movt	sl, #0
      74:	movw	fp, #0
      78:	movt	fp, #0
      7c:	movw	r8, #0
      80:	movt	r8, #0
      84:	sub	r7, r7, #1
      88:	str	r3, [sp, #4]
      8c:	mov	r4, #0
      90:	b	fc <hexdump+0xd4>
      94:	cmp	r4, #0
      98:	mov	r1, fp
      9c:	ldr	r2, [sp, #4]
      a0:	mov	r0, r6
      a4:	beq	ac <hexdump+0x84>
      a8:	bl	0 <fprintf>
      ac:	mov	r2, r4
      b0:	mov	r1, sl
      b4:	mov	r0, r6
      b8:	bl	0 <fprintf>
      bc:	ldrb	r2, [r7, #1]!
      c0:	mov	r1, r8
      c4:	mov	r0, r6
      c8:	bl	0 <fprintf>
      cc:	add	r3, sp, #32
      d0:	mov	r2, #0
      d4:	add	r5, r3, r5
      d8:	add	r4, r4, #1
      dc:	ldrb	r3, [r7]
      e0:	strb	r2, [r5, #-19]	; 0xffffffed
      e4:	sub	r2, r3, #32
      e8:	cmp	r2, #94	; 0x5e
      ec:	movhi	r3, #46	; 0x2e
      f0:	cmp	r9, r4
      f4:	strb	r3, [r5, #-20]	; 0xffffffec
      f8:	beq	11c <hexdump+0xf4>
      fc:	ands	r5, r4, #15
     100:	beq	94 <hexdump+0x6c>
     104:	tst	r4, #7
     108:	bne	bc <hexdump+0x94>
     10c:	mov	r1, r6
     110:	mov	r0, #32
     114:	bl	0 <fputc>
     118:	b	bc <hexdump+0x94>
     11c:	tst	r4, #15
     120:	beq	14c <hexdump+0x124>
     124:	movw	r5, #0
     128:	movt	r5, #0
     12c:	add	r4, r4, #1
     130:	mov	r3, r6
     134:	mov	r2, #3
     138:	mov	r1, #1
     13c:	mov	r0, r5
     140:	bl	0 <fwrite>
     144:	tst	r4, #15
     148:	bne	12c <hexdump+0x104>
     14c:	ldr	r2, [sp, #4]
     150:	mov	r0, r6
     154:	movw	r1, #0
     158:	movt	r1, #0
     15c:	bl	0 <fprintf>
     160:	add	sp, sp, #36	; 0x24
     164:	ldrd	r4, [sp]
     168:	ldrd	r6, [sp, #8]
     16c:	ldrd	r8, [sp, #16]
     170:	ldrd	sl, [sp, #24]
     174:	add	sp, sp, #32
     178:	pop	{pc}		; (ldr pc, [sp], #4)
     17c:	add	r3, sp, #12
     180:	str	r3, [sp, #4]
     184:	b	14c <hexdump+0x124>

00000188 <elapsed_realtime>:
     188:	push	{lr}		; (str lr, [sp, #-4]!)
     18c:	sub	sp, sp, #12
     190:	mov	r1, #0
     194:	mov	r0, sp
     198:	bl	0 <gettimeofday>
     19c:	movw	r1, #0
     1a0:	movt	r1, #0
     1a4:	ldr	r0, [r1]
     1a8:	cmp	r0, #0
     1ac:	bne	1c4 <elapsed_realtime+0x3c>
     1b0:	ldr	r3, [sp]
     1b4:	ldr	r2, [sp, #4]
     1b8:	mov	r0, r3
     1bc:	str	r3, [r1]
     1c0:	str	r2, [r1, #4]
     1c4:	ldr	r1, [r1, #4]
     1c8:	vldr	d5, [pc, #48]	; 200 <elapsed_realtime+0x78>
     1cc:	ldr	r2, [sp, #4]
     1d0:	ldr	r3, [sp]
     1d4:	sub	r2, r2, r1
     1d8:	vmov	s15, r2
     1dc:	sub	r3, r3, r0
     1e0:	vmov	s0, r3
     1e4:	vcvt.f64.s32	d7, s15
     1e8:	vcvt.f64.s32	d0, s0
     1ec:	vdiv.f64	d6, d7, d5
     1f0:	vadd.f64	d0, d6, d0
     1f4:	add	sp, sp, #12
     1f8:	pop	{pc}		; (ldr pc, [sp], #4)
     1fc:	nop	{0}
     200:	.word	0x00000000
     204:	.word	0x412e8480

00000208 <MyGame_Example_Monster_hp.part.9>:
     208:	movw	r3, #0
     20c:	movt	r3, #0
     210:	str	r4, [sp, #-8]!
     214:	movw	r1, #0
     218:	movt	r1, #0
     21c:	str	lr, [sp, #4]
     220:	movw	r0, #0
     224:	movt	r0, #0
     228:	movw	r2, #697	; 0x2b9
     22c:	bl	0 <__assert_fail>

00000230 <MyGame_Example_Monster_hp_is_present.part.10>:
     230:	movw	r1, #0
     234:	movt	r1, #0
     238:	ldr	r3, [pc, #20]	; 254 <MyGame_Example_Monster_hp_is_present.part.10+0x24>
     23c:	movw	r0, #0
     240:	movt	r0, #0
     244:	str	r4, [sp, #-8]!
     248:	movw	r2, #697	; 0x2b9
     24c:	str	lr, [sp, #4]
     250:	bl	0 <__assert_fail>
     254:	.word	0x0000001c

00000258 <MyGame_Example_Monster_pos_is_present.part.11>:
     258:	movw	r1, #0
     25c:	movt	r1, #0
     260:	ldr	r3, [pc, #20]	; 27c <MyGame_Example_Monster_pos_is_present.part.11+0x24>
     264:	movw	r0, #0
     268:	movt	r0, #0
     26c:	str	r4, [sp, #-8]!
     270:	mov	r2, #696	; 0x2b8
     274:	str	lr, [sp, #4]
     278:	bl	0 <__assert_fail>
     27c:	.word	0x00000044

00000280 <MyGame_Example_Monster_pos.part.12>:
     280:	movw	r1, #0
     284:	movt	r1, #0
     288:	ldr	r3, [pc, #20]	; 2a4 <MyGame_Example_Monster_pos.part.12+0x24>
     28c:	movw	r0, #0
     290:	movt	r0, #0
     294:	str	r4, [sp, #-8]!
     298:	mov	r2, #696	; 0x2b8
     29c:	str	lr, [sp, #4]
     2a0:	bl	0 <__assert_fail>
     2a4:	.word	0x0000006c

000002a8 <MyGame_Example_Monster_inventory.part.13>:
     2a8:	movw	r1, #0
     2ac:	movt	r1, #0
     2b0:	ldr	r3, [pc, #20]	; 2cc <MyGame_Example_Monster_inventory.part.13+0x24>
     2b4:	movw	r0, #0
     2b8:	movt	r0, #0
     2bc:	str	r4, [sp, #-8]!
     2c0:	movw	r2, #706	; 0x2c2
     2c4:	str	lr, [sp, #4]
     2c8:	bl	0 <__assert_fail>
     2cc:	.word	0x00000088

000002d0 <MyGame_Example_Monster_mana.part.15>:
     2d0:	movw	r1, #0
     2d4:	movt	r1, #0
     2d8:	ldr	r3, [pc, #20]	; 2f4 <MyGame_Example_Monster_mana.part.15+0x24>
     2dc:	movw	r0, #0
     2e0:	movt	r0, #0
     2e4:	str	r4, [sp, #-8]!
     2e8:	movw	r2, #698	; 0x2ba
     2ec:	str	lr, [sp, #4]
     2f0:	bl	0 <__assert_fail>
     2f4:	.word	0x000000ac

000002f8 <MyGame_Example_Monster_mana_is_present.part.16>:
     2f8:	movw	r1, #0
     2fc:	movt	r1, #0
     300:	ldr	r3, [pc, #20]	; 31c <MyGame_Example_Monster_mana_is_present.part.16+0x24>
     304:	movw	r0, #0
     308:	movt	r0, #0
     30c:	str	r4, [sp, #-8]!
     310:	movw	r2, #698	; 0x2ba
     314:	str	lr, [sp, #4]
     318:	bl	0 <__assert_fail>
     31c:	.word	0x000000c8

00000320 <MyGame_Example_Monster_test4.part.17>:
     320:	movw	r1, #0
     324:	movt	r1, #0
     328:	ldr	r3, [pc, #20]	; 344 <MyGame_Example_Monster_test4.part.17+0x24>
     32c:	movw	r0, #0
     330:	movt	r0, #0
     334:	str	r4, [sp, #-8]!
     338:	movw	r2, #718	; 0x2ce
     33c:	str	lr, [sp, #4]
     340:	bl	0 <__assert_fail>
     344:	.word	0x000000f0

00000348 <MyGame_Example_Monster_testarrayofstring.part.19>:
     348:	movw	r1, #0
     34c:	movt	r1, #0
     350:	ldr	r3, [pc, #20]	; 36c <MyGame_Example_Monster_testarrayofstring.part.19+0x24>
     354:	movw	r0, #0
     358:	movt	r0, #0
     35c:	str	r4, [sp, #-8]!
     360:	mov	r2, #712	; 0x2c8
     364:	str	lr, [sp, #4]
     368:	bl	0 <__assert_fail>
     36c:	.word	0x00000110

00000370 <flatbuffers_string_vec_at.part.20>:
     370:	movw	r1, #0
     374:	movt	r1, #0
     378:	ldr	r3, [pc, #20]	; 394 <flatbuffers_string_vec_at.part.20+0x24>
     37c:	movw	r0, #0
     380:	movt	r0, #0
     384:	str	r4, [sp, #-8]!
     388:	mov	r2, #108	; 0x6c
     38c:	str	lr, [sp, #4]
     390:	bl	0 <__assert_fail>
     394:	.word	0x0000013c

00000398 <MyGame_Example_Monster_testarrayofbools.part.21>:
     398:	movw	r1, #0
     39c:	movt	r1, #0
     3a0:	ldr	r3, [pc, #20]	; 3bc <MyGame_Example_Monster_testarrayofbools.part.21+0x24>
     3a4:	movw	r0, #0
     3a8:	movt	r0, #0
     3ac:	str	r4, [sp, #-8]!
     3b0:	movw	r2, #714	; 0x2ca
     3b4:	str	lr, [sp, #4]
     3b8:	bl	0 <__assert_fail>
     3bc:	.word	0x00000158

000003c0 <MyGame_Example_Monster_testarrayoftables.part.22>:
     3c0:	movw	r1, #0
     3c4:	movt	r1, #0
     3c8:	ldr	r3, [pc, #20]	; 3e4 <MyGame_Example_Monster_testarrayoftables.part.22+0x24>
     3cc:	movw	r0, #0
     3d0:	movt	r0, #0
     3d4:	str	r4, [sp, #-8]!
     3d8:	movw	r2, #711	; 0x2c7
     3dc:	str	lr, [sp, #4]
     3e0:	bl	0 <__assert_fail>
     3e4:	.word	0x00000180

000003e8 <MyGame_Example_Monster_vec_at.part.23>:
     3e8:	movw	r1, #0
     3ec:	movt	r1, #0
     3f0:	ldr	r3, [pc, #20]	; 40c <MyGame_Example_Monster_vec_at.part.23+0x24>
     3f4:	movw	r0, #0
     3f8:	movt	r0, #0
     3fc:	str	r4, [sp, #-8]!
     400:	movw	r2, #693	; 0x2b5
     404:	str	lr, [sp, #4]
     408:	bl	0 <__assert_fail>
     40c:	.word	0x000001ac

00000410 <MyGame_Example_Monster_test_type.part.24>:
     410:	movw	r1, #0
     414:	movt	r1, #0
     418:	ldr	r3, [pc, #20]	; 434 <MyGame_Example_Monster_test_type.part.24+0x24>
     41c:	movw	r0, #0
     420:	movt	r0, #0
     424:	str	r4, [sp, #-8]!
     428:	movw	r2, #717	; 0x2cd
     42c:	str	lr, [sp, #4]
     430:	bl	0 <__assert_fail>
     434:	.word	0x000001cc

00000438 <MyGame_Example_Monster_test_type>:
     438:	subs	r2, r0, #0
     43c:	beq	46c <MyGame_Example_Monster_test_type+0x34>
     440:	ldr	r3, [r2]
     444:	sub	r3, r2, r3
     448:	ldrh	r1, [r3]
     44c:	cmp	r1, #19
     450:	bls	464 <MyGame_Example_Monster_test_type+0x2c>
     454:	ldrh	r0, [r3, #18]
     458:	cmp	r0, #0
     45c:	ldrbne	r0, [r2, r0]
     460:	bx	lr
     464:	mov	r0, #0
     468:	bx	lr
     46c:	str	r4, [sp, #-8]!
     470:	str	lr, [sp, #4]
     474:	bl	410 <MyGame_Example_Monster_test_type.part.24>

00000478 <MyGame_Example_Monster_test.part.25>:
     478:	movw	r1, #0
     47c:	movt	r1, #0
     480:	ldr	r3, [pc, #20]	; 49c <MyGame_Example_Monster_test.part.25+0x24>
     484:	movw	r0, #0
     488:	movt	r0, #0
     48c:	str	r4, [sp, #-8]!
     490:	movw	r2, #717	; 0x2cd
     494:	str	lr, [sp, #4]
     498:	bl	0 <__assert_fail>
     49c:	.word	0x000001f0

000004a0 <MyGame_Example_Monster_test>:
     4a0:	cmp	r0, #0
     4a4:	beq	4e0 <MyGame_Example_Monster_test+0x40>
     4a8:	ldr	r3, [r0]
     4ac:	sub	r3, r0, r3
     4b0:	ldrh	r2, [r3]
     4b4:	cmp	r2, #21
     4b8:	bls	4d8 <MyGame_Example_Monster_test+0x38>
     4bc:	ldrh	r3, [r3, #20]
     4c0:	cmp	r3, #0
     4c4:	beq	4d8 <MyGame_Example_Monster_test+0x38>
     4c8:	ldr	r2, [r0, r3]
     4cc:	add	r0, r0, r3
     4d0:	add	r0, r0, r2
     4d4:	bx	lr
     4d8:	mov	r0, #0
     4dc:	bx	lr
     4e0:	str	r4, [sp, #-8]!
     4e4:	str	lr, [sp, #4]
     4e8:	bl	478 <MyGame_Example_Monster_test.part.25>

000004ec <MyGame_Example_Monster_name.part.26>:
     4ec:	movw	r1, #0
     4f0:	movt	r1, #0
     4f4:	ldr	r3, [pc, #20]	; 510 <MyGame_Example_Monster_name.part.26+0x24>
     4f8:	movw	r0, #0
     4fc:	movt	r0, #0
     500:	str	r4, [sp, #-8]!
     504:	movw	r2, #699	; 0x2bb
     508:	str	lr, [sp, #4]
     50c:	bl	0 <__assert_fail>
     510:	.word	0x0000020c

00000514 <MyGame_Example_Monster_name>:
     514:	cmp	r0, #0
     518:	str	r4, [sp, #-8]!
     51c:	str	lr, [sp, #4]
     520:	beq	57c <MyGame_Example_Monster_name+0x68>
     524:	ldr	r3, [r0]
     528:	sub	r3, r0, r3
     52c:	ldrh	r2, [r3]
     530:	cmp	r2, #11
     534:	bls	560 <MyGame_Example_Monster_name+0x4c>
     538:	ldrh	r3, [r3, #10]
     53c:	cmp	r3, #0
     540:	beq	560 <MyGame_Example_Monster_name+0x4c>
     544:	ldr	r2, [r0, r3]
     548:	add	r0, r0, r3
     54c:	ldr	r4, [sp]
     550:	add	sp, sp, #4
     554:	add	r2, r2, #4
     558:	add	r0, r0, r2
     55c:	pop	{pc}		; (ldr pc, [sp], #4)
     560:	movw	r1, #0
     564:	movt	r1, #0
     568:	ldr	r3, [pc, #16]	; 580 <MyGame_Example_Monster_name+0x6c>
     56c:	movw	r0, #0
     570:	movt	r0, #0
     574:	movw	r2, #699	; 0x2bb
     578:	bl	0 <__assert_fail>
     57c:	bl	4ec <MyGame_Example_Monster_name.part.26>
     580:	.word	0x0000020c

00000584 <MyGame_Example_Monster_testempty.part.27>:
     584:	movw	r1, #0
     588:	movt	r1, #0
     58c:	ldr	r3, [pc, #20]	; 5a8 <MyGame_Example_Monster_testempty.part.27+0x24>
     590:	movw	r0, #0
     594:	movt	r0, #0
     598:	str	r4, [sp, #-8]!
     59c:	movw	r2, #722	; 0x2d2
     5a0:	str	lr, [sp, #4]
     5a4:	bl	0 <__assert_fail>
     5a8:	.word	0x00000228

000005ac <MyGame_Example_Alt_manyany_type.part.28>:
     5ac:	movw	r1, #0
     5b0:	movt	r1, #0
     5b4:	ldr	r3, [pc, #20]	; 5d0 <MyGame_Example_Alt_manyany_type.part.28+0x24>
     5b8:	movw	r0, #0
     5bc:	movt	r0, #0
     5c0:	str	r4, [sp, #-8]!
     5c4:	movw	r2, #621	; 0x26d
     5c8:	str	lr, [sp, #4]
     5cc:	bl	0 <__assert_fail>
     5d0:	.word	0x0000024c

000005d4 <MyGame_Example_Alt_manyany.part.29>:
     5d4:	movw	r1, #0
     5d8:	movt	r1, #0
     5dc:	ldr	r3, [pc, #20]	; 5f8 <MyGame_Example_Alt_manyany.part.29+0x24>
     5e0:	movw	r0, #0
     5e4:	movt	r0, #0
     5e8:	str	r4, [sp, #-8]!
     5ec:	movw	r2, #621	; 0x26d
     5f0:	str	lr, [sp, #4]
     5f4:	bl	0 <__assert_fail>
     5f8:	.word	0x0000026c

000005fc <flatbuffers_generic_vec_at.part.30>:
     5fc:	movw	r1, #0
     600:	movt	r1, #0
     604:	ldr	r3, [pc, #20]	; 620 <flatbuffers_generic_vec_at.part.30+0x24>
     608:	movw	r0, #0
     60c:	movt	r0, #0
     610:	str	r4, [sp, #-8]!
     614:	mov	r2, #117	; 0x75
     618:	str	lr, [sp, #4]
     61c:	bl	0 <__assert_fail>
     620:	.word	0x00000288

00000624 <flatbuffers_union_type_vec_at.part.31>:
     624:	movw	r1, #0
     628:	movt	r1, #0
     62c:	ldr	r3, [pc, #20]	; 648 <flatbuffers_union_type_vec_at.part.31+0x24>
     630:	movw	r0, #0
     634:	movt	r0, #0
     638:	str	r4, [sp, #-8]!
     63c:	movw	r2, #405	; 0x195
     640:	str	lr, [sp, #4]
     644:	bl	0 <__assert_fail>
     648:	.word	0x000002a4

0000064c <Fantasy_Movie_side_kick_type.part.32>:
     64c:	movw	r1, #0
     650:	movt	r1, #0
     654:	ldr	r3, [pc, #20]	; 670 <Fantasy_Movie_side_kick_type.part.32+0x24>
     658:	movw	r0, #0
     65c:	movt	r0, #0
     660:	str	r4, [sp, #-8]!
     664:	movw	r2, #821	; 0x335
     668:	str	lr, [sp, #4]
     66c:	bl	0 <__assert_fail>
     670:	.word	0x000002c4

00000674 <Fantasy_Movie_side_kick.part.33>:
     674:	movw	r1, #0
     678:	movt	r1, #0
     67c:	ldr	r3, [pc, #20]	; 698 <Fantasy_Movie_side_kick.part.33+0x24>
     680:	movw	r0, #0
     684:	movt	r0, #0
     688:	str	r4, [sp, #-8]!
     68c:	movw	r2, #821	; 0x335
     690:	str	lr, [sp, #4]
     694:	bl	0 <__assert_fail>
     698:	.word	0x000002e4

0000069c <Fantasy_Attacker_sword_attack_damage>:
     69c:	subs	r2, r0, #0
     6a0:	beq	6d0 <Fantasy_Attacker_sword_attack_damage+0x34>
     6a4:	ldr	r3, [r2]
     6a8:	sub	r3, r2, r3
     6ac:	ldrh	r1, [r3]
     6b0:	cmp	r1, #5
     6b4:	bls	6c8 <Fantasy_Attacker_sword_attack_damage+0x2c>
     6b8:	ldrh	r0, [r3, #4]
     6bc:	cmp	r0, #0
     6c0:	ldrne	r0, [r2, r0]
     6c4:	bx	lr
     6c8:	mov	r0, #0
     6cc:	bx	lr
     6d0:	movw	r1, #0
     6d4:	movt	r1, #0
     6d8:	ldr	r3, [pc, #20]	; 6f4 <Fantasy_Attacker_sword_attack_damage+0x58>
     6dc:	movw	r0, #0
     6e0:	movt	r0, #0
     6e4:	str	r4, [sp, #-8]!
     6e8:	movw	r2, #770	; 0x302
     6ec:	str	lr, [sp, #4]
     6f0:	bl	0 <__assert_fail>
     6f4:	.word	0x000002fc

000006f8 <Fantasy_Movie_characters_type.part.35>:
     6f8:	movw	r1, #0
     6fc:	movt	r1, #0
     700:	ldr	r3, [pc, #20]	; 71c <Fantasy_Movie_characters_type.part.35+0x24>
     704:	movw	r0, #0
     708:	movt	r0, #0
     70c:	str	r4, [sp, #-8]!
     710:	movw	r2, #823	; 0x337
     714:	str	lr, [sp, #4]
     718:	bl	0 <__assert_fail>
     71c:	.word	0x00000324

00000720 <Fantasy_Character_union_vec_at>:
     720:	push	{lr}		; (str lr, [sp, #-4]!)
     724:	sub	sp, sp, #12
     728:	add	ip, sp, #8
     72c:	stmdb	ip, {r1, r2}
     730:	ldr	r2, [sp]
     734:	cmp	r2, #0
     738:	beq	794 <Fantasy_Character_union_vec_at+0x74>
     73c:	ldr	r1, [r2, #-4]
     740:	cmp	r3, r1
     744:	bcs	794 <Fantasy_Character_union_vec_at+0x74>
     748:	ldrb	r2, [r2, r3]
     74c:	cmp	r2, #0
     750:	strbeq	r2, [r0]
     754:	streq	r2, [r0, #4]
     758:	beq	788 <Fantasy_Character_union_vec_at+0x68>
     75c:	ldr	r1, [sp, #4]
     760:	cmp	r1, #0
     764:	add	ip, r1, r3, lsl #2
     768:	beq	790 <Fantasy_Character_union_vec_at+0x70>
     76c:	ldr	lr, [r1, #-4]
     770:	cmp	r3, lr
     774:	bcs	790 <Fantasy_Character_union_vec_at+0x70>
     778:	ldr	r3, [r1, r3, lsl #2]
     77c:	strb	r2, [r0]
     780:	add	ip, ip, r3
     784:	str	ip, [r0, #4]
     788:	add	sp, sp, #12
     78c:	pop	{pc}		; (ldr pc, [sp], #4)
     790:	bl	5fc <flatbuffers_generic_vec_at.part.30>
     794:	movw	r1, #0
     798:	movt	r1, #0
     79c:	ldr	r3, [pc, #12]	; 7b0 <Fantasy_Character_union_vec_at+0x90>
     7a0:	movw	r0, #0
     7a4:	movt	r0, #0
     7a8:	movw	r2, #773	; 0x305
     7ac:	bl	0 <__assert_fail>
     7b0:	.word	0x00000344

000007b4 <MyGame_Example_Monster_color_is_present.part.38>:
     7b4:	movw	r1, #0
     7b8:	movt	r1, #0
     7bc:	ldr	r3, [pc, #20]	; 7d8 <MyGame_Example_Monster_color_is_present.part.38+0x24>
     7c0:	movw	r0, #0
     7c4:	movt	r0, #0
     7c8:	str	r4, [sp, #-8]!
     7cc:	movw	r2, #705	; 0x2c1
     7d0:	str	lr, [sp, #4]
     7d4:	bl	0 <__assert_fail>
     7d8:	.word	0x00000364

000007dc <MyGame_Example_Monster_end.part.49>:
     7dc:	movw	r1, #0
     7e0:	movt	r1, #0
     7e4:	ldr	r3, [pc, #20]	; 800 <MyGame_Example_Monster_end.part.49+0x24>
     7e8:	movw	r0, #0
     7ec:	movt	r0, #0
     7f0:	str	r4, [sp, #-8]!
     7f4:	mov	r2, #235	; 0xeb
     7f8:	str	lr, [sp, #4]
     7fc:	bl	0 <__assert_fail>
     800:	.word	0x0000038c

00000804 <MyGame_Example_Stat_end.part.51>:
     804:	movw	r1, #0
     808:	movt	r1, #0
     80c:	ldr	r3, [pc, #20]	; 828 <MyGame_Example_Stat_end.part.51+0x24>
     810:	movw	r0, #0
     814:	movt	r0, #0
     818:	str	r4, [sp, #-8]!
     81c:	mov	r2, #221	; 0xdd
     820:	str	lr, [sp, #4]
     824:	bl	0 <__assert_fail>
     828:	.word	0x000003a8

0000082c <MyGame_Example_TestJSONPrefixParsing3_verify_table>:
     82c:	mov	r3, #8
     830:	mov	r1, #0
     834:	str	r4, [sp, #-8]!
     838:	mov	r2, r3
     83c:	mov	r4, r0
     840:	str	lr, [sp, #4]
     844:	bl	0 <flatcc_verify_field>
     848:	cmp	r0, #0
     84c:	beq	85c <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x30>
     850:	ldr	r4, [sp]
     854:	add	sp, sp, #4
     858:	pop	{pc}		; (ldr pc, [sp], #4)
     85c:	mov	r3, #4
     860:	mov	r0, r4
     864:	ldr	r4, [sp]
     868:	mov	r2, r3
     86c:	mov	r1, #1
     870:	ldr	lr, [sp, #4]
     874:	add	sp, sp, #8
     878:	b	0 <flatcc_verify_field>

0000087c <MyGame_Example_TestSimpleTableWithEnum_verify_table>:
     87c:	mov	r3, #1
     880:	mov	r1, #0
     884:	str	r4, [sp, #-8]!
     888:	mov	r2, r3
     88c:	mov	r4, r0
     890:	str	lr, [sp, #4]
     894:	bl	0 <flatcc_verify_field>
     898:	cmp	r0, #0
     89c:	beq	8ac <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x30>
     8a0:	ldr	r4, [sp]
     8a4:	add	sp, sp, #4
     8a8:	pop	{pc}		; (ldr pc, [sp], #4)
     8ac:	mov	r3, #1
     8b0:	mov	r0, r4
     8b4:	mov	r2, r3
     8b8:	mov	r1, r3
     8bc:	bl	0 <flatcc_verify_field>
     8c0:	cmp	r0, #0
     8c4:	bne	8a0 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x24>
     8c8:	mov	r3, #1
     8cc:	mov	r1, #2
     8d0:	mov	r2, r3
     8d4:	mov	r0, r4
     8d8:	bl	0 <flatcc_verify_field>
     8dc:	cmp	r0, #0
     8e0:	bne	8a0 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x24>
     8e4:	mov	r3, #1
     8e8:	mov	r0, r4
     8ec:	ldr	r4, [sp]
     8f0:	mov	r2, r3
     8f4:	mov	r1, #3
     8f8:	ldr	lr, [sp, #4]
     8fc:	add	sp, sp, #8
     900:	b	0 <flatcc_verify_field>

00000904 <MyGame_Example_TypeAliases_verify_table>:
     904:	mov	r3, #1
     908:	mov	r1, #0
     90c:	str	r4, [sp, #-8]!
     910:	mov	r2, r3
     914:	str	lr, [sp, #4]
     918:	sub	sp, sp, #8
     91c:	mov	r4, r0
     920:	bl	0 <flatcc_verify_field>
     924:	cmp	r0, #0
     928:	beq	93c <MyGame_Example_TypeAliases_verify_table+0x38>
     92c:	add	sp, sp, #8
     930:	ldr	r4, [sp]
     934:	add	sp, sp, #4
     938:	pop	{pc}		; (ldr pc, [sp], #4)
     93c:	mov	r3, #1
     940:	mov	r0, r4
     944:	mov	r2, r3
     948:	mov	r1, r3
     94c:	bl	0 <flatcc_verify_field>
     950:	cmp	r0, #0
     954:	bne	92c <MyGame_Example_TypeAliases_verify_table+0x28>
     958:	mov	r3, #2
     95c:	mov	r0, r4
     960:	mov	r2, r3
     964:	mov	r1, r3
     968:	bl	0 <flatcc_verify_field>
     96c:	cmp	r0, #0
     970:	bne	92c <MyGame_Example_TypeAliases_verify_table+0x28>
     974:	mov	r3, #2
     978:	mov	r1, #3
     97c:	mov	r2, r3
     980:	mov	r0, r4
     984:	bl	0 <flatcc_verify_field>
     988:	cmp	r0, #0
     98c:	bne	92c <MyGame_Example_TypeAliases_verify_table+0x28>
     990:	mov	r3, #4
     994:	mov	r0, r4
     998:	mov	r2, r3
     99c:	mov	r1, r3
     9a0:	bl	0 <flatcc_verify_field>
     9a4:	cmp	r0, #0
     9a8:	bne	92c <MyGame_Example_TypeAliases_verify_table+0x28>
     9ac:	mov	r3, #4
     9b0:	mov	r1, #5
     9b4:	mov	r2, r3
     9b8:	mov	r0, r4
     9bc:	bl	0 <flatcc_verify_field>
     9c0:	cmp	r0, #0
     9c4:	bne	92c <MyGame_Example_TypeAliases_verify_table+0x28>
     9c8:	mov	r3, #8
     9cc:	mov	r1, #6
     9d0:	mov	r2, r3
     9d4:	mov	r0, r4
     9d8:	bl	0 <flatcc_verify_field>
     9dc:	cmp	r0, #0
     9e0:	bne	92c <MyGame_Example_TypeAliases_verify_table+0x28>
     9e4:	mov	r3, #8
     9e8:	mov	r1, #7
     9ec:	mov	r2, r3
     9f0:	mov	r0, r4
     9f4:	bl	0 <flatcc_verify_field>
     9f8:	cmp	r0, #0
     9fc:	bne	92c <MyGame_Example_TypeAliases_verify_table+0x28>
     a00:	mov	r3, #4
     a04:	mov	r1, #8
     a08:	mov	r2, r3
     a0c:	mov	r0, r4
     a10:	bl	0 <flatcc_verify_field>
     a14:	cmp	r0, #0
     a18:	bne	92c <MyGame_Example_TypeAliases_verify_table+0x28>
     a1c:	mov	r3, #8
     a20:	mov	r1, #9
     a24:	mov	r2, r3
     a28:	mov	r0, r4
     a2c:	bl	0 <flatcc_verify_field>
     a30:	cmp	r0, #0
     a34:	bne	92c <MyGame_Example_TypeAliases_verify_table+0x28>
     a38:	mov	r1, #1
     a3c:	mvn	ip, #0
     a40:	mov	r3, r1
     a44:	mov	r2, #0
     a48:	mov	r0, r4
     a4c:	stm	sp, {r1, ip}
     a50:	mov	r1, #10
     a54:	bl	0 <flatcc_verify_vector_field>
     a58:	cmp	r0, #0
     a5c:	bne	92c <MyGame_Example_TypeAliases_verify_table+0x28>
     a60:	mov	r1, #8
     a64:	mvn	ip, #-536870912	; 0xe0000000
     a68:	mov	r2, r0
     a6c:	mov	r3, r1
     a70:	mov	r0, r4
     a74:	stm	sp, {r1, ip}
     a78:	mov	r1, #11
     a7c:	bl	0 <flatcc_verify_vector_field>
     a80:	b	92c <MyGame_Example_TypeAliases_verify_table+0x28>

00000a84 <MyGame_Example_Stat_verify_table>:
     a84:	mov	r2, #0
     a88:	str	r4, [sp, #-8]!
     a8c:	mov	r4, r0
     a90:	mov	r1, r2
     a94:	str	lr, [sp, #4]
     a98:	bl	0 <flatcc_verify_string_field>
     a9c:	cmp	r0, #0
     aa0:	beq	ab0 <MyGame_Example_Stat_verify_table+0x2c>
     aa4:	ldr	r4, [sp]
     aa8:	add	sp, sp, #4
     aac:	pop	{pc}		; (ldr pc, [sp], #4)
     ab0:	mov	r3, #8
     ab4:	mov	r1, #1
     ab8:	mov	r2, r3
     abc:	mov	r0, r4
     ac0:	bl	0 <flatcc_verify_field>
     ac4:	cmp	r0, #0
     ac8:	bne	aa4 <MyGame_Example_Stat_verify_table+0x20>
     acc:	mov	r3, #2
     ad0:	mov	r0, r4
     ad4:	ldr	r4, [sp]
     ad8:	mov	r2, r3
     adc:	mov	r1, r3
     ae0:	ldr	lr, [sp, #4]
     ae4:	add	sp, sp, #8
     ae8:	b	0 <flatcc_verify_field>

00000aec <MyGame_Example_TestJSONPrefixParsing_verify_table>:
     aec:	mov	r2, #0
     af0:	str	r4, [sp, #-8]!
     af4:	mov	r4, r0
     af8:	mov	r1, r2
     afc:	str	lr, [sp, #4]
     b00:	bl	0 <flatcc_verify_string_field>
     b04:	cmp	r0, #0
     b08:	beq	b18 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x2c>
     b0c:	ldr	r4, [sp]
     b10:	add	sp, sp, #4
     b14:	pop	{pc}		; (ldr pc, [sp], #4)
     b18:	mov	r3, #4
     b1c:	mov	r1, #1
     b20:	mov	r2, r3
     b24:	mov	r0, r4
     b28:	bl	0 <flatcc_verify_field>
     b2c:	cmp	r0, #0
     b30:	bne	b0c <MyGame_Example_TestJSONPrefixParsing_verify_table+0x20>
     b34:	mov	r2, r0
     b38:	mov	r1, #2
     b3c:	mov	r0, r4
     b40:	bl	0 <flatcc_verify_string_field>
     b44:	cmp	r0, #0
     b48:	bne	b0c <MyGame_Example_TestJSONPrefixParsing_verify_table+0x20>
     b4c:	mov	r3, #8
     b50:	mov	r1, #3
     b54:	mov	r2, r3
     b58:	mov	r0, r4
     b5c:	bl	0 <flatcc_verify_field>
     b60:	cmp	r0, #0
     b64:	bne	b0c <MyGame_Example_TestJSONPrefixParsing_verify_table+0x20>
     b68:	mov	r2, r0
     b6c:	mov	r1, #4
     b70:	mov	r0, r4
     b74:	bl	0 <flatcc_verify_string_field>
     b78:	cmp	r0, #0
     b7c:	bne	b0c <MyGame_Example_TestJSONPrefixParsing_verify_table+0x20>
     b80:	mov	r3, #8
     b84:	mov	r1, #5
     b88:	mov	r2, r3
     b8c:	mov	r0, r4
     b90:	bl	0 <flatcc_verify_field>
     b94:	cmp	r0, #0
     b98:	bne	b0c <MyGame_Example_TestJSONPrefixParsing_verify_table+0x20>
     b9c:	mov	r3, #4
     ba0:	mov	r1, #6
     ba4:	mov	r2, r3
     ba8:	mov	r0, r4
     bac:	bl	0 <flatcc_verify_field>
     bb0:	cmp	r0, #0
     bb4:	bne	b0c <MyGame_Example_TestJSONPrefixParsing_verify_table+0x20>
     bb8:	mov	r3, #8
     bbc:	mov	r1, #7
     bc0:	mov	r2, r3
     bc4:	mov	r0, r4
     bc8:	bl	0 <flatcc_verify_field>
     bcc:	cmp	r0, #0
     bd0:	bne	b0c <MyGame_Example_TestJSONPrefixParsing_verify_table+0x20>
     bd4:	mov	r3, #4
     bd8:	mov	r0, r4
     bdc:	ldr	r4, [sp]
     be0:	mov	r2, r3
     be4:	mov	r1, #8
     be8:	ldr	lr, [sp, #4]
     bec:	add	sp, sp, #8
     bf0:	b	0 <flatcc_verify_field>

00000bf4 <MyGame_Example_TestJSONPrefix_verify_table>:
     bf4:	mov	r2, #0
     bf8:	movw	r3, #0
     bfc:	movt	r3, #0
     c00:	mov	r1, r2
     c04:	str	r4, [sp, #-8]!
     c08:	mov	r4, r0
     c0c:	str	lr, [sp, #4]
     c10:	bl	0 <flatcc_verify_table_field>
     c14:	cmp	r0, #0
     c18:	beq	c28 <MyGame_Example_TestJSONPrefix_verify_table+0x34>
     c1c:	ldr	r4, [sp]
     c20:	add	sp, sp, #4
     c24:	pop	{pc}		; (ldr pc, [sp], #4)
     c28:	mov	r2, r0
     c2c:	movw	r3, #0
     c30:	movt	r3, #0
     c34:	mov	r1, #1
     c38:	mov	r0, r4
     c3c:	bl	0 <flatcc_verify_table_field>
     c40:	cmp	r0, #0
     c44:	bne	c1c <MyGame_Example_TestJSONPrefix_verify_table+0x28>
     c48:	mov	r2, r0
     c4c:	movw	r3, #0
     c50:	movt	r3, #0
     c54:	mov	r0, r4
     c58:	ldr	r4, [sp]
     c5c:	mov	r1, #2
     c60:	ldr	lr, [sp, #4]
     c64:	add	sp, sp, #8
     c68:	b	0 <flatcc_verify_table_field>

00000c6c <MyGame_Example_Monster_verify_table>:
     c6c:	mov	r3, #16
     c70:	mov	r2, #32
     c74:	strd	r4, [sp, #-24]!	; 0xffffffe8
     c78:	mov	r1, #0
     c7c:	strd	r6, [sp, #8]
     c80:	mov	r4, r0
     c84:	str	r8, [sp, #16]
     c88:	str	lr, [sp, #20]
     c8c:	sub	sp, sp, #8
     c90:	bl	0 <flatcc_verify_field>
     c94:	cmp	r0, #0
     c98:	beq	cb4 <MyGame_Example_Monster_verify_table+0x48>
     c9c:	add	sp, sp, #8
     ca0:	ldrd	r4, [sp]
     ca4:	ldrd	r6, [sp, #8]
     ca8:	ldr	r8, [sp, #16]
     cac:	add	sp, sp, #20
     cb0:	pop	{pc}		; (ldr pc, [sp], #4)
     cb4:	mov	r3, #2
     cb8:	mov	r0, r4
     cbc:	mov	r2, r3
     cc0:	mov	r1, r3
     cc4:	bl	0 <flatcc_verify_field>
     cc8:	cmp	r0, #0
     ccc:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     cd0:	mov	r3, #2
     cd4:	mov	r1, #1
     cd8:	mov	r2, r3
     cdc:	mov	r0, r4
     ce0:	bl	0 <flatcc_verify_field>
     ce4:	cmp	r0, #0
     ce8:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     cec:	mov	r2, #1
     cf0:	mov	r1, #3
     cf4:	mov	r0, r4
     cf8:	bl	0 <flatcc_verify_string_field>
     cfc:	cmp	r0, #0
     d00:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     d04:	mov	r3, #1
     d08:	mov	r1, #6
     d0c:	mov	r2, r3
     d10:	mov	r0, r4
     d14:	bl	0 <flatcc_verify_field>
     d18:	cmp	r0, #0
     d1c:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     d20:	mov	r5, #1
     d24:	mvn	r6, #0
     d28:	mov	r2, r0
     d2c:	mov	r3, r5
     d30:	mov	r1, #5
     d34:	mov	r0, r4
     d38:	stm	sp, {r5, r6}
     d3c:	bl	0 <flatcc_verify_vector_field>
     d40:	cmp	r0, #0
     d44:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     d48:	mov	r2, r0
     d4c:	movw	r3, #0
     d50:	movt	r3, #0
     d54:	mov	r1, #11
     d58:	mov	r0, r4
     d5c:	bl	0 <flatcc_verify_table_vector_field>
     d60:	cmp	r0, #0
     d64:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     d68:	mov	r2, r0
     d6c:	mov	r1, #10
     d70:	mov	r0, r4
     d74:	bl	0 <flatcc_verify_string_vector_field>
     d78:	cmp	r0, #0
     d7c:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     d80:	mov	r2, r0
     d84:	mov	r1, #28
     d88:	mov	r0, r4
     d8c:	bl	0 <flatcc_verify_string_vector_field>
     d90:	cmp	r0, #0
     d94:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     d98:	mov	r2, r0
     d9c:	mov	r3, r5
     da0:	stm	sp, {r5, r6}
     da4:	mov	r1, #24
     da8:	mov	r0, r4
     dac:	bl	0 <flatcc_verify_vector_field>
     db0:	cmp	r0, #0
     db4:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     db8:	mvn	ip, #-536870912	; 0xe0000000
     dbc:	mov	r5, #4
     dc0:	mov	r3, #8
     dc4:	mov	r2, #0
     dc8:	mov	r1, #29
     dcc:	mov	r0, r4
     dd0:	stm	sp, {r5, ip}
     dd4:	bl	0 <flatcc_verify_vector_field>
     dd8:	cmp	r0, #0
     ddc:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     de0:	movw	r6, #0
     de4:	movt	r6, #0
     de8:	mov	r2, r0
     dec:	mov	r3, r6
     df0:	mov	r1, #12
     df4:	mov	r0, r4
     df8:	bl	0 <flatcc_verify_table_field>
     dfc:	cmp	r0, #0
     e00:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     e04:	mov	r2, r0
     e08:	movw	r3, #0
     e0c:	movt	r3, #0
     e10:	mov	r1, #8
     e14:	mov	r0, r4
     e18:	bl	0 <flatcc_verify_union_field>
     e1c:	cmp	r0, #0
     e20:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     e24:	mvn	r7, #-1073741824	; 0xc0000000
     e28:	mov	r8, #2
     e2c:	mov	r2, r0
     e30:	mov	r3, r5
     e34:	mov	r1, #9
     e38:	mov	r0, r4
     e3c:	str	r8, [sp]
     e40:	str	r7, [sp, #4]
     e44:	bl	0 <flatcc_verify_vector_field>
     e48:	cmp	r0, #0
     e4c:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     e50:	mov	r2, r0
     e54:	mov	r3, r5
     e58:	str	r8, [sp]
     e5c:	mov	r1, #31
     e60:	mov	r0, r4
     e64:	str	r7, [sp, #4]
     e68:	bl	0 <flatcc_verify_vector_field>
     e6c:	cmp	r0, #0
     e70:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     e74:	mov	r7, #1
     e78:	mov	r3, r0
     e7c:	mov	r2, r0
     e80:	mov	r1, #13
     e84:	mov	r0, r4
     e88:	str	r7, [sp]
     e8c:	str	r6, [sp, #4]
     e90:	bl	0 <flatcc_verify_table_as_nested_root>
     e94:	cmp	r0, #0
     e98:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     e9c:	mov	r2, r0
     ea0:	movw	r3, #0
     ea4:	movt	r3, #0
     ea8:	mov	r1, #14
     eac:	mov	r0, r4
     eb0:	bl	0 <flatcc_verify_table_field>
     eb4:	cmp	r0, #0
     eb8:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     ebc:	mov	r3, r7
     ec0:	mov	r2, r7
     ec4:	mov	r1, #15
     ec8:	mov	r0, r4
     ecc:	bl	0 <flatcc_verify_field>
     ed0:	cmp	r0, #0
     ed4:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     ed8:	mov	r3, r5
     edc:	mov	r2, r5
     ee0:	mov	r1, #16
     ee4:	mov	r0, r4
     ee8:	bl	0 <flatcc_verify_field>
     eec:	cmp	r0, #0
     ef0:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     ef4:	mov	r3, r5
     ef8:	mov	r2, r5
     efc:	mov	r1, #17
     f00:	mov	r0, r4
     f04:	bl	0 <flatcc_verify_field>
     f08:	cmp	r0, #0
     f0c:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     f10:	mov	r3, #8
     f14:	mov	r1, #18
     f18:	mov	r2, r3
     f1c:	mov	r0, r4
     f20:	bl	0 <flatcc_verify_field>
     f24:	cmp	r0, #0
     f28:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     f2c:	mov	r3, #8
     f30:	mov	r1, #19
     f34:	mov	r2, r3
     f38:	mov	r0, r4
     f3c:	bl	0 <flatcc_verify_field>
     f40:	cmp	r0, #0
     f44:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     f48:	mov	r3, r5
     f4c:	mov	r1, #20
     f50:	mov	r2, r5
     f54:	mov	r0, r4
     f58:	bl	0 <flatcc_verify_field>
     f5c:	cmp	r0, #0
     f60:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     f64:	mov	r3, r5
     f68:	mov	r1, #21
     f6c:	mov	r2, r5
     f70:	mov	r0, r4
     f74:	bl	0 <flatcc_verify_field>
     f78:	cmp	r0, #0
     f7c:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     f80:	mov	r3, #8
     f84:	mov	r1, #22
     f88:	mov	r2, r3
     f8c:	mov	r0, r4
     f90:	bl	0 <flatcc_verify_field>
     f94:	cmp	r0, #0
     f98:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     f9c:	mov	r3, #8
     fa0:	mov	r1, #23
     fa4:	mov	r2, r3
     fa8:	mov	r0, r4
     fac:	bl	0 <flatcc_verify_field>
     fb0:	cmp	r0, #0
     fb4:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     fb8:	mov	r3, r5
     fbc:	mov	r1, #25
     fc0:	mov	r2, r5
     fc4:	mov	r0, r4
     fc8:	bl	0 <flatcc_verify_field>
     fcc:	cmp	r0, #0
     fd0:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     fd4:	mov	r3, r5
     fd8:	mov	r1, #26
     fdc:	mov	r2, r5
     fe0:	mov	r0, r4
     fe4:	bl	0 <flatcc_verify_field>
     fe8:	cmp	r0, #0
     fec:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
     ff0:	mov	r3, r5
     ff4:	mov	r1, #27
     ff8:	mov	r2, r5
     ffc:	mov	r0, r4
    1000:	bl	0 <flatcc_verify_field>
    1004:	cmp	r0, #0
    1008:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
    100c:	mvn	ip, #0
    1010:	mov	r1, r7
    1014:	mov	r2, r0
    1018:	mov	r3, r7
    101c:	mov	r0, r4
    1020:	stm	sp, {r1, ip}
    1024:	mov	r1, #30
    1028:	bl	0 <flatcc_verify_vector_field>
    102c:	cmp	r0, #0
    1030:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
    1034:	mov	r5, #8
    1038:	mvn	r6, #-536870912	; 0xe0000000
    103c:	mov	r3, r5
    1040:	mov	r2, #0
    1044:	mov	r1, #32
    1048:	mov	r0, r4
    104c:	stm	sp, {r5, r6}
    1050:	bl	0 <flatcc_verify_vector_field>
    1054:	cmp	r0, #0
    1058:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
    105c:	mov	r2, r0
    1060:	mov	r3, r5
    1064:	stm	sp, {r5, r6}
    1068:	mov	r1, #33	; 0x21
    106c:	mov	r0, r4
    1070:	bl	0 <flatcc_verify_vector_field>
    1074:	cmp	r0, #0
    1078:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
    107c:	mov	r2, r0
    1080:	movw	r3, #0
    1084:	movt	r3, #0
    1088:	mov	r1, #34	; 0x22
    108c:	mov	r0, r4
    1090:	bl	0 <flatcc_verify_table_field>
    1094:	cmp	r0, #0
    1098:	bne	c9c <MyGame_Example_Monster_verify_table+0x30>
    109c:	mov	r2, r0
    10a0:	movw	r3, #0
    10a4:	movt	r3, #0
    10a8:	mov	r0, r4
    10ac:	mov	r1, #35	; 0x23
    10b0:	add	sp, sp, #8
    10b4:	ldrd	r4, [sp]
    10b8:	ldrd	r6, [sp, #8]
    10bc:	ldr	r8, [sp, #16]
    10c0:	ldr	lr, [sp, #20]
    10c4:	add	sp, sp, #24
    10c8:	b	0 <flatcc_verify_table_field>

000010cc <MyGame_Example_TestBase64_verify_table>:
    10cc:	strd	r4, [sp, #-16]!
    10d0:	mov	r4, #1
    10d4:	mvn	r5, #0
    10d8:	str	r6, [sp, #8]
    10dc:	mov	r2, #0
    10e0:	mov	r3, r4
    10e4:	str	lr, [sp, #12]
    10e8:	sub	sp, sp, #8
    10ec:	mov	r1, r2
    10f0:	mov	r6, r0
    10f4:	strd	r4, [sp]
    10f8:	bl	0 <flatcc_verify_vector_field>
    10fc:	subs	r2, r0, #0
    1100:	beq	111c <MyGame_Example_TestBase64_verify_table+0x50>
    1104:	mov	r0, r2
    1108:	add	sp, sp, #8
    110c:	ldrd	r4, [sp]
    1110:	ldr	r6, [sp, #8]
    1114:	add	sp, sp, #12
    1118:	pop	{pc}		; (ldr pc, [sp], #4)
    111c:	mov	r3, r4
    1120:	mov	r1, r4
    1124:	strd	r4, [sp]
    1128:	mov	r0, r6
    112c:	bl	0 <flatcc_verify_vector_field>
    1130:	subs	r2, r0, #0
    1134:	bne	1104 <MyGame_Example_TestBase64_verify_table+0x38>
    1138:	movw	ip, #0
    113c:	movt	ip, #0
    1140:	mov	r3, r2
    1144:	mov	r0, r6
    1148:	mov	r1, #2
    114c:	stm	sp, {r4, ip}
    1150:	bl	0 <flatcc_verify_table_as_nested_root>
    1154:	mov	r2, r0
    1158:	b	1104 <MyGame_Example_TestBase64_verify_table+0x38>

0000115c <MyGame_Example_Any_union_verifier>:
    115c:	ldrb	r3, [r0, #12]
    1160:	sub	r3, r3, #1
    1164:	cmp	r3, #3
    1168:	ldrls	pc, [pc, r3, lsl #2]
    116c:	b	11b0 <MyGame_Example_Any_union_verifier+0x54>
    1170:	.word	0x000011a4
    1174:	.word	0x00001198
    1178:	.word	0x0000118c
    117c:	.word	0x00001180
    1180:	movw	r1, #0
    1184:	movt	r1, #0
    1188:	b	0 <flatcc_verify_union_table>
    118c:	movw	r1, #0
    1190:	movt	r1, #0
    1194:	b	0 <flatcc_verify_union_table>
    1198:	movw	r1, #0
    119c:	movt	r1, #0
    11a0:	b	0 <flatcc_verify_union_table>
    11a4:	movw	r1, #0
    11a8:	movt	r1, #0
    11ac:	b	0 <flatcc_verify_union_table>
    11b0:	mov	r0, #0
    11b4:	bx	lr

000011b8 <MyGame_Example_Alt_verify_table>:
    11b8:	mov	r2, #0
    11bc:	movw	r3, #0
    11c0:	movt	r3, #0
    11c4:	mov	r1, r2
    11c8:	str	r4, [sp, #-8]!
    11cc:	mov	r4, r0
    11d0:	str	lr, [sp, #4]
    11d4:	bl	0 <flatcc_verify_table_field>
    11d8:	cmp	r0, #0
    11dc:	beq	11ec <MyGame_Example_Alt_verify_table+0x34>
    11e0:	ldr	r4, [sp]
    11e4:	add	sp, sp, #4
    11e8:	pop	{pc}		; (ldr pc, [sp], #4)
    11ec:	mov	r2, r0
    11f0:	movw	r3, #0
    11f4:	movt	r3, #0
    11f8:	mov	r1, #1
    11fc:	mov	r0, r4
    1200:	bl	0 <flatcc_verify_table_field>
    1204:	cmp	r0, #0
    1208:	bne	11e0 <MyGame_Example_Alt_verify_table+0x28>
    120c:	mov	r2, r0
    1210:	movw	r3, #0
    1214:	movt	r3, #0
    1218:	mov	r0, r4
    121c:	ldr	r4, [sp]
    1220:	mov	r1, #3
    1224:	ldr	lr, [sp, #4]
    1228:	add	sp, sp, #8
    122c:	b	0 <flatcc_verify_union_vector_field>

00001230 <Fantasy_Movie_verify_table>:
    1230:	movw	r3, #0
    1234:	movt	r3, #0
    1238:	str	r4, [sp, #-8]!
    123c:	mov	r2, #0
    1240:	mov	r1, #1
    1244:	str	lr, [sp, #4]
    1248:	mov	r4, r0
    124c:	bl	0 <flatcc_verify_union_field>
    1250:	cmp	r0, #0
    1254:	beq	1264 <Fantasy_Movie_verify_table+0x34>
    1258:	ldr	r4, [sp]
    125c:	add	sp, sp, #4
    1260:	pop	{pc}		; (ldr pc, [sp], #4)
    1264:	mov	r2, r0
    1268:	movw	r3, #0
    126c:	movt	r3, #0
    1270:	mov	r1, #3
    1274:	mov	r0, r4
    1278:	bl	0 <flatcc_verify_union_field>
    127c:	cmp	r0, #0
    1280:	bne	1258 <Fantasy_Movie_verify_table+0x28>
    1284:	mov	r2, r0
    1288:	movw	r3, #0
    128c:	movt	r3, #0
    1290:	mov	r1, #5
    1294:	mov	r0, r4
    1298:	bl	0 <flatcc_verify_union_field>
    129c:	cmp	r0, #0
    12a0:	bne	1258 <Fantasy_Movie_verify_table+0x28>
    12a4:	mov	r2, r0
    12a8:	movw	r3, #0
    12ac:	movt	r3, #0
    12b0:	mov	r1, #7
    12b4:	mov	r0, r4
    12b8:	bl	0 <flatcc_verify_union_field>
    12bc:	cmp	r0, #0
    12c0:	bne	1258 <Fantasy_Movie_verify_table+0x28>
    12c4:	mov	r2, r0
    12c8:	movw	r3, #0
    12cc:	movt	r3, #0
    12d0:	mov	r0, r4
    12d4:	ldr	r4, [sp]
    12d8:	mov	r1, #9
    12dc:	ldr	lr, [sp, #4]
    12e0:	add	sp, sp, #8
    12e4:	b	0 <flatcc_verify_union_vector_field>

000012e8 <Fantasy_Character_union_verifier>:
    12e8:	ldrb	r3, [r0, #12]
    12ec:	mov	r2, r0
    12f0:	cmp	r3, #10
    12f4:	bhi	131c <Fantasy_Character_union_verifier+0x34>
    12f8:	cmp	r3, #9
    12fc:	bcs	1334 <Fantasy_Character_union_verifier+0x4c>
    1300:	cmp	r3, #2
    1304:	beq	1348 <Fantasy_Character_union_verifier+0x60>
    1308:	cmp	r3, #8
    130c:	bne	1340 <Fantasy_Character_union_verifier+0x58>
    1310:	mov	r2, #2
    1314:	mov	r1, r2
    1318:	b	0 <flatcc_verify_union_struct>
    131c:	cmp	r3, #11
    1320:	beq	132c <Fantasy_Character_union_verifier+0x44>
    1324:	cmp	r3, #255	; 0xff
    1328:	bne	1340 <Fantasy_Character_union_verifier+0x58>
    132c:	mov	r0, r2
    1330:	b	0 <flatcc_verify_union_string>
    1334:	mov	r2, #4
    1338:	mov	r1, r2
    133c:	b	0 <flatcc_verify_union_struct>
    1340:	mov	r0, #0
    1344:	bx	lr
    1348:	movw	r1, #0
    134c:	movt	r1, #0
    1350:	b	0 <flatcc_verify_union_table>

00001354 <show_benchmark.constprop.68>:
    1354:	push	{lr}		; (str lr, [sp, #-4]!)
    1358:	vpush	{d8-d9}
    135c:	vsub.f64	d8, d1, d0
    1360:	sub	sp, sp, #12
    1364:	vldr	d9, [pc, #348]	; 14c8 <show_benchmark.constprop.68+0x174>
    1368:	str	r1, [sp, #4]
    136c:	mov	r1, r0
    1370:	movw	r0, #0
    1374:	movt	r0, #0
    1378:	bl	0 <printf>
    137c:	movw	r0, #0
    1380:	movt	r0, #0
    1384:	vmov	r2, r3, d8
    1388:	bl	0 <printf>
    138c:	movw	r1, #16960	; 0x4240
    1390:	movt	r1, #15
    1394:	movw	r0, #0
    1398:	movt	r0, #0
    139c:	bl	0 <printf>
    13a0:	movw	r0, #0
    13a4:	movt	r0, #0
    13a8:	ldr	r1, [sp, #4]
    13ac:	bl	0 <printf>
    13b0:	vldr	s15, [sp, #4]
    13b4:	movw	r0, #0
    13b8:	movt	r0, #0
    13bc:	vcvt.f64.u32	d7, s15
    13c0:	vmul.f64	d7, d7, d9
    13c4:	vdiv.f64	d6, d7, d9
    13c8:	vdiv.f64	d7, d6, d8
    13cc:	vmov	r2, r3, d7
    13d0:	bl	0 <printf>
    13d4:	vdiv.f64	d7, d9, d8
    13d8:	movw	r0, #0
    13dc:	movt	r0, #0
    13e0:	vmov	r2, r3, d7
    13e4:	bl	0 <printf>
    13e8:	vldr	d7, [pc, #224]	; 14d0 <show_benchmark.constprop.68+0x17c>
    13ec:	movw	r1, #0
    13f0:	movt	r1, #0
    13f4:	movw	r0, #0
    13f8:	movt	r0, #0
    13fc:	vdiv.f64	d7, d7, d8
    1400:	vmov	r2, r3, d7
    1404:	bl	0 <printf>
    1408:	vldr	d6, [pc, #200]	; 14d8 <show_benchmark.constprop.68+0x184>
    140c:	vldr	d5, [pc, #204]	; 14e0 <show_benchmark.constprop.68+0x18c>
    1410:	vmul.f64	d8, d8, d6
    1414:	vdiv.f64	d7, d8, d9
    1418:	vcmpe.f64	d7, d5
    141c:	vmrs	APSR_nzcv, fpscr
    1420:	bmi	1484 <show_benchmark.constprop.68+0x130>
    1424:	vcmpe.f64	d7, d9
    1428:	vmrs	APSR_nzcv, fpscr
    142c:	bmi	1460 <show_benchmark.constprop.68+0x10c>
    1430:	vcmpe.f64	d7, d6
    1434:	vmrs	APSR_nzcv, fpscr
    1438:	bpl	14a4 <show_benchmark.constprop.68+0x150>
    143c:	vdiv.f64	d7, d7, d9
    1440:	movw	r0, #0
    1444:	movt	r0, #0
    1448:	vmov	r2, r3, d7
    144c:	bl	0 <printf>
    1450:	mov	r0, #0
    1454:	add	sp, sp, #12
    1458:	vpop	{d8-d9}
    145c:	pop	{pc}		; (ldr pc, [sp], #4)
    1460:	vdiv.f64	d7, d7, d5
    1464:	movw	r0, #0
    1468:	movt	r0, #0
    146c:	vmov	r2, r3, d7
    1470:	bl	0 <printf>
    1474:	mov	r0, #0
    1478:	add	sp, sp, #12
    147c:	vpop	{d8-d9}
    1480:	pop	{pc}		; (ldr pc, [sp], #4)
    1484:	vmov	r2, r3, d7
    1488:	movw	r0, #0
    148c:	movt	r0, #0
    1490:	bl	0 <printf>
    1494:	mov	r0, #0
    1498:	add	sp, sp, #12
    149c:	vpop	{d8-d9}
    14a0:	pop	{pc}		; (ldr pc, [sp], #4)
    14a4:	vdiv.f64	d7, d7, d6
    14a8:	movw	r0, #0
    14ac:	movt	r0, #0
    14b0:	vmov	r2, r3, d7
    14b4:	bl	0 <printf>
    14b8:	mov	r0, #0
    14bc:	add	sp, sp, #12
    14c0:	vpop	{d8-d9}
    14c4:	pop	{pc}		; (ldr pc, [sp], #4)
    14c8:	.word	0x00000000
    14cc:	.word	0x412e8480
    14d0:	.word	0x00000000
    14d4:	.word	0x3ff00000
    14d8:	.word	0x00000000
    14dc:	.word	0x41cdcd65
    14e0:	.word	0x00000000
    14e4:	.word	0x408f4000

000014e8 <MyGame_Example2_Monster_verify_table>:
    14e8:	mov	r0, #0
    14ec:	bx	lr

000014f0 <MyGame_Example_TestJSONPrefixParsing2_verify_table>:
    14f0:	mov	r3, #8
    14f4:	mov	r1, #0
    14f8:	str	r4, [sp, #-8]!
    14fc:	mov	r2, r3
    1500:	mov	r4, r0
    1504:	str	lr, [sp, #4]
    1508:	bl	0 <flatcc_verify_field>
    150c:	cmp	r0, #0
    1510:	beq	1520 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x30>
    1514:	ldr	r4, [sp]
    1518:	add	sp, sp, #4
    151c:	pop	{pc}		; (ldr pc, [sp], #4)
    1520:	mov	r3, #4
    1524:	mov	r0, r4
    1528:	ldr	r4, [sp]
    152c:	mov	r2, r3
    1530:	mov	r1, #1
    1534:	ldr	lr, [sp, #4]
    1538:	add	sp, sp, #8
    153c:	b	0 <flatcc_verify_field>

00001540 <count_monsters>:
    1540:	strd	r4, [sp, #-32]!	; 0xffffffe0
    1544:	strd	r6, [sp, #8]
    1548:	subs	r6, r0, #0
    154c:	strd	r8, [sp, #16]
    1550:	str	sl, [sp, #24]
    1554:	str	lr, [sp, #28]
    1558:	beq	16f4 <count_monsters+0x1b4>
    155c:	ldr	r7, [r6, #-4]
    1560:	cmp	r7, #0
    1564:	beq	1734 <count_monsters+0x1f4>
    1568:	ldr	r3, [r6]
    156c:	mov	r8, r1
    1570:	adds	r1, r6, r3
    1574:	beq	1718 <count_monsters+0x1d8>
    1578:	ldr	r3, [r6, r3]
    157c:	sub	r3, r1, r3
    1580:	ldrh	r2, [r3]
    1584:	cmp	r2, #11
    1588:	bls	16fc <count_monsters+0x1bc>
    158c:	ldrh	r0, [r3, #10]
    1590:	cmp	r0, #0
    1594:	beq	16fc <count_monsters+0x1bc>
    1598:	add	r5, r6, #4
    159c:	mov	r4, #0
    15a0:	b	15e4 <count_monsters+0xa4>
    15a4:	cmp	r7, r3
    15a8:	beq	16f4 <count_monsters+0x1b4>
    15ac:	mov	r2, r5
    15b0:	add	r5, r5, #4
    15b4:	ldr	r0, [r2]
    15b8:	adds	r1, r2, r0
    15bc:	beq	1718 <count_monsters+0x1d8>
    15c0:	ldr	r2, [r2, r0]
    15c4:	sub	r2, r1, r2
    15c8:	ldrh	r0, [r2]
    15cc:	cmp	r0, #11
    15d0:	bls	16fc <count_monsters+0x1bc>
    15d4:	ldrh	r0, [r2, #10]
    15d8:	mov	r4, r3
    15dc:	cmp	r0, #0
    15e0:	beq	16fc <count_monsters+0x1bc>
    15e4:	ldr	r3, [r1, r0]
    15e8:	add	r0, r1, r0
    15ec:	mov	r1, r8
    15f0:	add	r3, r3, #4
    15f4:	add	r0, r0, r3
    15f8:	bl	0 <strcmp>
    15fc:	cmp	r0, #0
    1600:	add	r3, r4, #1
    1604:	bne	15a4 <count_monsters+0x64>
    1608:	mov	r9, r0
    160c:	cmp	r3, r7
    1610:	mov	r4, r3
    1614:	add	r9, r9, #1
    1618:	bcs	16d8 <count_monsters+0x198>
    161c:	ldr	r2, [r6, r3, lsl #2]
    1620:	lsl	r5, r3, #2
    1624:	add	r1, r6, r5
    1628:	adds	r3, r1, r2
    162c:	beq	1718 <count_monsters+0x1d8>
    1630:	ldr	r2, [r1, r2]
    1634:	sub	r2, r3, r2
    1638:	ldrh	r1, [r2]
    163c:	cmp	r1, #11
    1640:	bls	16fc <count_monsters+0x1bc>
    1644:	ldrh	r0, [r2, #10]
    1648:	cmp	r0, #0
    164c:	beq	16fc <count_monsters+0x1bc>
    1650:	add	r5, r5, #4
    1654:	add	r5, r6, r5
    1658:	b	169c <count_monsters+0x15c>
    165c:	add	r4, r4, #1
    1660:	cmp	r7, r4
    1664:	bls	16d8 <count_monsters+0x198>
    1668:	mov	r2, r5
    166c:	add	r5, r5, #4
    1670:	ldr	r1, [r2]
    1674:	adds	r3, r2, r1
    1678:	beq	1718 <count_monsters+0x1d8>
    167c:	ldr	r2, [r2, r1]
    1680:	sub	r2, r3, r2
    1684:	ldrh	r1, [r2]
    1688:	cmp	r1, #11
    168c:	bls	16fc <count_monsters+0x1bc>
    1690:	ldrh	r0, [r2, #10]
    1694:	cmp	r0, #0
    1698:	beq	16fc <count_monsters+0x1bc>
    169c:	ldr	r2, [r3, r0]
    16a0:	add	r0, r3, r0
    16a4:	mov	r1, r8
    16a8:	add	r2, r2, #4
    16ac:	add	r0, r0, r2
    16b0:	bl	0 <strcmp>
    16b4:	cmp	r0, #0
    16b8:	bne	165c <count_monsters+0x11c>
    16bc:	cmn	r4, #1
    16c0:	beq	16d8 <count_monsters+0x198>
    16c4:	add	r3, r4, #1
    16c8:	add	r9, r9, #1
    16cc:	cmp	r3, r7
    16d0:	mov	r4, r3
    16d4:	bcc	161c <count_monsters+0xdc>
    16d8:	mov	r0, r9
    16dc:	ldrd	r4, [sp]
    16e0:	ldrd	r6, [sp, #8]
    16e4:	ldrd	r8, [sp, #16]
    16e8:	ldr	sl, [sp, #24]
    16ec:	add	sp, sp, #28
    16f0:	pop	{pc}		; (ldr pc, [sp], #4)
    16f4:	mov	r9, #0
    16f8:	b	16d8 <count_monsters+0x198>
    16fc:	movw	r1, #0
    1700:	movt	r1, #0
    1704:	ldr	r3, [pc, #48]	; 173c <count_monsters+0x1fc>
    1708:	movw	r0, #0
    170c:	movt	r0, #0
    1710:	movw	r2, #699	; 0x2bb
    1714:	bl	0 <__assert_fail>
    1718:	movw	r1, #0
    171c:	movt	r1, #0
    1720:	ldr	r3, [pc, #20]	; 173c <count_monsters+0x1fc>
    1724:	movw	r0, #0
    1728:	movt	r0, #0
    172c:	movw	r2, #699	; 0x2bb
    1730:	bl	0 <__assert_fail>
    1734:	mov	r9, r7
    1738:	b	16d8 <count_monsters+0x198>
    173c:	.word	0x0000020c

00001740 <MyGame_Example_Monster_vec_rscan_ex_by_name>:
    1740:	cmp	r0, #0
    1744:	strd	r4, [sp, #-24]!	; 0xffffffe8
    1748:	strd	r6, [sp, #8]
    174c:	str	r8, [sp, #16]
    1750:	str	lr, [sp, #20]
    1754:	beq	17fc <MyGame_Example_Monster_vec_rscan_ex_by_name+0xbc>
    1758:	ldr	r6, [r0, #-4]
    175c:	mov	r5, r3
    1760:	mov	r4, r1
    1764:	cmp	r2, r6
    1768:	movcc	r3, r2
    176c:	movcs	r3, r6
    1770:	sub	r7, r3, #-1073741823	; 0xc0000001
    1774:	add	r7, r0, r7, lsl #2
    1778:	cmp	r3, r4
    177c:	sub	r8, r3, #1
    1780:	bls	17fc <MyGame_Example_Monster_vec_rscan_ex_by_name+0xbc>
    1784:	cmp	r8, r6
    1788:	mov	r2, r7
    178c:	bcs	183c <MyGame_Example_Monster_vec_rscan_ex_by_name+0xfc>
    1790:	ldr	r3, [r2]
    1794:	sub	r7, r7, #4
    1798:	adds	r0, r2, r3
    179c:	beq	1820 <MyGame_Example_Monster_vec_rscan_ex_by_name+0xe0>
    17a0:	ldr	r2, [r2, r3]
    17a4:	sub	r2, r0, r2
    17a8:	ldrh	r3, [r2]
    17ac:	cmp	r3, #11
    17b0:	bls	1804 <MyGame_Example_Monster_vec_rscan_ex_by_name+0xc4>
    17b4:	ldrh	r2, [r2, #10]
    17b8:	cmp	r2, #0
    17bc:	beq	1804 <MyGame_Example_Monster_vec_rscan_ex_by_name+0xc4>
    17c0:	ldr	r3, [r0, r2]
    17c4:	add	r0, r0, r2
    17c8:	mov	r1, r5
    17cc:	add	r3, r3, #4
    17d0:	add	r0, r0, r3
    17d4:	bl	0 <strcmp>
    17d8:	cmp	r0, #0
    17dc:	mov	r3, r8
    17e0:	bne	1778 <MyGame_Example_Monster_vec_rscan_ex_by_name+0x38>
    17e4:	mov	r0, r8
    17e8:	ldrd	r4, [sp]
    17ec:	ldrd	r6, [sp, #8]
    17f0:	ldr	r8, [sp, #16]
    17f4:	add	sp, sp, #20
    17f8:	pop	{pc}		; (ldr pc, [sp], #4)
    17fc:	mvn	r8, #0
    1800:	b	17e4 <MyGame_Example_Monster_vec_rscan_ex_by_name+0xa4>
    1804:	movw	r1, #0
    1808:	movt	r1, #0
    180c:	ldr	r3, [pc, #68]	; 1858 <MyGame_Example_Monster_vec_rscan_ex_by_name+0x118>
    1810:	movw	r0, #0
    1814:	movt	r0, #0
    1818:	movw	r2, #699	; 0x2bb
    181c:	bl	0 <__assert_fail>
    1820:	movw	r1, #0
    1824:	movt	r1, #0
    1828:	ldr	r3, [pc, #40]	; 1858 <MyGame_Example_Monster_vec_rscan_ex_by_name+0x118>
    182c:	movw	r0, #0
    1830:	movt	r0, #0
    1834:	movw	r2, #699	; 0x2bb
    1838:	bl	0 <__assert_fail>
    183c:	movw	r1, #0
    1840:	movt	r1, #0
    1844:	ldr	r3, [pc, #16]	; 185c <MyGame_Example_Monster_vec_rscan_ex_by_name+0x11c>
    1848:	movw	r0, #0
    184c:	movt	r0, #0
    1850:	movw	r2, #693	; 0x2b5
    1854:	bl	0 <__assert_fail>
    1858:	.word	0x0000020c
    185c:	.word	0x000001ac

00001860 <MyGame_Example_Monster_vec_scan_ex_by_name>:
    1860:	strd	r4, [sp, #-24]!	; 0xffffffe8
    1864:	mov	r5, r0
    1868:	mov	r4, r1
    186c:	strd	r6, [sp, #8]
    1870:	mov	r7, r2
    1874:	mov	r6, r3
    1878:	str	r8, [sp, #16]
    187c:	str	lr, [sp, #20]
    1880:	b	18f8 <MyGame_Example_Monster_vec_scan_ex_by_name+0x98>
    1884:	ldr	r3, [r5, #-4]
    1888:	cmp	r7, r3
    188c:	movcc	r2, r7
    1890:	movcs	r2, r3
    1894:	cmp	r4, r2
    1898:	bcs	1900 <MyGame_Example_Monster_vec_scan_ex_by_name+0xa0>
    189c:	cmp	r4, r3
    18a0:	add	r2, r5, r4, lsl #2
    18a4:	bcs	1958 <MyGame_Example_Monster_vec_scan_ex_by_name+0xf8>
    18a8:	ldr	r3, [r5, r4, lsl #2]
    18ac:	adds	r0, r2, r3
    18b0:	beq	193c <MyGame_Example_Monster_vec_scan_ex_by_name+0xdc>
    18b4:	ldr	r3, [r2, r3]
    18b8:	sub	r3, r0, r3
    18bc:	ldrh	r2, [r3]
    18c0:	cmp	r2, #11
    18c4:	bls	1920 <MyGame_Example_Monster_vec_scan_ex_by_name+0xc0>
    18c8:	ldrh	r2, [r3, #10]
    18cc:	cmp	r2, #0
    18d0:	beq	1920 <MyGame_Example_Monster_vec_scan_ex_by_name+0xc0>
    18d4:	ldr	r3, [r0, r2]
    18d8:	add	r0, r0, r2
    18dc:	mov	r1, r6
    18e0:	add	r3, r3, #4
    18e4:	add	r0, r0, r3
    18e8:	bl	0 <strcmp>
    18ec:	cmp	r0, #0
    18f0:	beq	1918 <MyGame_Example_Monster_vec_scan_ex_by_name+0xb8>
    18f4:	add	r4, r4, #1
    18f8:	cmp	r5, #0
    18fc:	bne	1884 <MyGame_Example_Monster_vec_scan_ex_by_name+0x24>
    1900:	mvn	r0, #0
    1904:	ldrd	r4, [sp]
    1908:	ldrd	r6, [sp, #8]
    190c:	ldr	r8, [sp, #16]
    1910:	add	sp, sp, #20
    1914:	pop	{pc}		; (ldr pc, [sp], #4)
    1918:	mov	r0, r4
    191c:	b	1904 <MyGame_Example_Monster_vec_scan_ex_by_name+0xa4>
    1920:	movw	r1, #0
    1924:	movt	r1, #0
    1928:	ldr	r3, [pc, #68]	; 1974 <MyGame_Example_Monster_vec_scan_ex_by_name+0x114>
    192c:	movw	r0, #0
    1930:	movt	r0, #0
    1934:	movw	r2, #699	; 0x2bb
    1938:	bl	0 <__assert_fail>
    193c:	movw	r1, #0
    1940:	movt	r1, #0
    1944:	ldr	r3, [pc, #40]	; 1974 <MyGame_Example_Monster_vec_scan_ex_by_name+0x114>
    1948:	movw	r0, #0
    194c:	movt	r0, #0
    1950:	movw	r2, #699	; 0x2bb
    1954:	bl	0 <__assert_fail>
    1958:	movw	r1, #0
    195c:	movt	r1, #0
    1960:	ldr	r3, [pc, #16]	; 1978 <MyGame_Example_Monster_vec_scan_ex_by_name+0x118>
    1964:	movw	r0, #0
    1968:	movt	r0, #0
    196c:	movw	r2, #693	; 0x2b5
    1970:	bl	0 <__assert_fail>
    1974:	.word	0x0000020c
    1978:	.word	0x000001ac

0000197c <MyGame_Example_Monster_vec_find_by_name>:
    197c:	strd	r4, [sp, #-32]!	; 0xffffffe0
    1980:	strd	r6, [sp, #8]
    1984:	strd	r8, [sp, #16]
    1988:	subs	r9, r0, #0
    198c:	str	sl, [sp, #24]
    1990:	str	lr, [sp, #28]
    1994:	beq	1acc <MyGame_Example_Monster_vec_find_by_name+0x150>
    1998:	ldr	r7, [r9, #-4]
    199c:	cmp	r7, #0
    19a0:	beq	1acc <MyGame_Example_Monster_vec_find_by_name+0x150>
    19a4:	mov	r6, r1
    19a8:	sub	r8, r7, #1
    19ac:	mov	r5, #0
    19b0:	cmp	r5, r8
    19b4:	bcs	1a68 <MyGame_Example_Monster_vec_find_by_name+0xec>
    19b8:	sub	r4, r8, r5
    19bc:	add	r4, r5, r4, lsr #1
    19c0:	cmp	r7, r4
    19c4:	add	r2, r9, r4, lsl #2
    19c8:	bls	1b08 <MyGame_Example_Monster_vec_find_by_name+0x18c>
    19cc:	ldr	r3, [r9, r4, lsl #2]
    19d0:	adds	r1, r2, r3
    19d4:	beq	1b24 <MyGame_Example_Monster_vec_find_by_name+0x1a8>
    19d8:	ldr	r2, [r2, r3]
    19dc:	sub	r2, r1, r2
    19e0:	ldrh	r3, [r2]
    19e4:	cmp	r3, #11
    19e8:	bhi	1a34 <MyGame_Example_Monster_vec_find_by_name+0xb8>
    19ec:	b	1aec <MyGame_Example_Monster_vec_find_by_name+0x170>
    19f0:	cmp	r5, r4
    19f4:	bcs	1a6c <MyGame_Example_Monster_vec_find_by_name+0xf0>
    19f8:	sub	r3, r4, r5
    19fc:	add	r3, r5, r3, lsr #1
    1a00:	cmp	r3, r7
    1a04:	add	r0, r9, r3, lsl #2
    1a08:	bcs	1b08 <MyGame_Example_Monster_vec_find_by_name+0x18c>
    1a0c:	ldr	r2, [r9, r3, lsl #2]
    1a10:	adds	r1, r0, r2
    1a14:	beq	1b24 <MyGame_Example_Monster_vec_find_by_name+0x1a8>
    1a18:	ldr	r2, [r0, r2]
    1a1c:	mov	r8, r4
    1a20:	sub	r2, r1, r2
    1a24:	ldrh	r0, [r2]
    1a28:	cmp	r0, #11
    1a2c:	bls	1aec <MyGame_Example_Monster_vec_find_by_name+0x170>
    1a30:	mov	r4, r3
    1a34:	ldrh	r0, [r2, #10]
    1a38:	cmp	r0, #0
    1a3c:	beq	1aec <MyGame_Example_Monster_vec_find_by_name+0x170>
    1a40:	ldr	r3, [r1, r0]
    1a44:	add	r0, r1, r0
    1a48:	mov	r1, r6
    1a4c:	add	r3, r3, #4
    1a50:	add	r0, r0, r3
    1a54:	bl	0 <strcmp>
    1a58:	cmp	r0, #0
    1a5c:	bge	19f0 <MyGame_Example_Monster_vec_find_by_name+0x74>
    1a60:	add	r5, r4, #1
    1a64:	b	19b0 <MyGame_Example_Monster_vec_find_by_name+0x34>
    1a68:	mov	r4, r8
    1a6c:	cmp	r5, r4
    1a70:	bne	1acc <MyGame_Example_Monster_vec_find_by_name+0x150>
    1a74:	cmp	r5, r7
    1a78:	add	r1, r9, r5, lsl #2
    1a7c:	bcs	1b44 <MyGame_Example_Monster_vec_find_by_name+0x1c8>
    1a80:	ldr	r2, [r9, r5, lsl #2]
    1a84:	adds	r3, r1, r2
    1a88:	beq	1b40 <MyGame_Example_Monster_vec_find_by_name+0x1c4>
    1a8c:	ldr	r2, [r1, r2]
    1a90:	sub	r2, r3, r2
    1a94:	ldrh	r1, [r2]
    1a98:	cmp	r1, #11
    1a9c:	bls	1aec <MyGame_Example_Monster_vec_find_by_name+0x170>
    1aa0:	ldrh	r2, [r2, #10]
    1aa4:	cmp	r2, #0
    1aa8:	beq	1aec <MyGame_Example_Monster_vec_find_by_name+0x170>
    1aac:	ldr	r0, [r3, r2]
    1ab0:	add	r3, r3, r2
    1ab4:	mov	r1, r6
    1ab8:	add	r0, r0, #4
    1abc:	add	r0, r3, r0
    1ac0:	bl	0 <strcmp>
    1ac4:	cmp	r0, #0
    1ac8:	beq	1ad0 <MyGame_Example_Monster_vec_find_by_name+0x154>
    1acc:	mvn	r5, #0
    1ad0:	mov	r0, r5
    1ad4:	ldrd	r4, [sp]
    1ad8:	ldrd	r6, [sp, #8]
    1adc:	ldrd	r8, [sp, #16]
    1ae0:	ldr	sl, [sp, #24]
    1ae4:	add	sp, sp, #28
    1ae8:	pop	{pc}		; (ldr pc, [sp], #4)
    1aec:	movw	r1, #0
    1af0:	movt	r1, #0
    1af4:	ldr	r3, [pc, #76]	; 1b48 <MyGame_Example_Monster_vec_find_by_name+0x1cc>
    1af8:	movw	r0, #0
    1afc:	movt	r0, #0
    1b00:	movw	r2, #699	; 0x2bb
    1b04:	bl	0 <__assert_fail>
    1b08:	movw	r1, #0
    1b0c:	movt	r1, #0
    1b10:	ldr	r3, [pc, #52]	; 1b4c <MyGame_Example_Monster_vec_find_by_name+0x1d0>
    1b14:	movw	r0, #0
    1b18:	movt	r0, #0
    1b1c:	movw	r2, #693	; 0x2b5
    1b20:	bl	0 <__assert_fail>
    1b24:	movw	r1, #0
    1b28:	movt	r1, #0
    1b2c:	ldr	r3, [pc, #20]	; 1b48 <MyGame_Example_Monster_vec_find_by_name+0x1cc>
    1b30:	movw	r0, #0
    1b34:	movt	r0, #0
    1b38:	movw	r2, #699	; 0x2bb
    1b3c:	bl	0 <__assert_fail>
    1b40:	bl	4ec <MyGame_Example_Monster_name.part.26>
    1b44:	bl	3e8 <MyGame_Example_Monster_vec_at.part.23>
    1b48:	.word	0x0000020c
    1b4c:	.word	0x000001ac

00001b50 <verify_empty_monster>:
    1b50:	cmp	r0, #0
    1b54:	str	r4, [sp, #-8]!
    1b58:	str	lr, [sp, #4]
    1b5c:	beq	1b7c <verify_empty_monster+0x2c>
    1b60:	ldr	r3, [r0]
    1b64:	movw	r2, #20301	; 0x4f4d
    1b68:	movt	r2, #21326	; 0x534e
    1b6c:	ldr	r1, [r0, #4]
    1b70:	cmp	r1, r2
    1b74:	add	r1, r0, r3
    1b78:	beq	1b98 <verify_empty_monster+0x48>
    1b7c:	movw	r0, #0
    1b80:	movt	r0, #0
    1b84:	bl	0 <puts>
    1b88:	mvn	r0, #0
    1b8c:	ldr	r4, [sp]
    1b90:	add	sp, sp, #4
    1b94:	pop	{pc}		; (ldr pc, [sp], #4)
    1b98:	cmp	r1, #0
    1b9c:	beq	1b7c <verify_empty_monster+0x2c>
    1ba0:	ldr	r3, [r0, r3]
    1ba4:	sub	r3, r1, r3
    1ba8:	ldrh	r2, [r3]
    1bac:	cmp	r2, #9
    1bb0:	bls	1be0 <verify_empty_monster+0x90>
    1bb4:	ldrh	r2, [r3, #8]
    1bb8:	cmp	r2, #0
    1bbc:	beq	1bec <verify_empty_monster+0x9c>
    1bc0:	ldrsh	r3, [r1, r2]
    1bc4:	cmp	r3, #100	; 0x64
    1bc8:	bne	1c0c <verify_empty_monster+0xbc>
    1bcc:	movw	r0, #0
    1bd0:	movt	r0, #0
    1bd4:	bl	0 <puts>
    1bd8:	mvn	r0, #0
    1bdc:	b	1b8c <verify_empty_monster+0x3c>
    1be0:	cmp	r2, #5
    1be4:	movls	r0, #0
    1be8:	bls	1b8c <verify_empty_monster+0x3c>
    1bec:	ldrh	r0, [r3, #4]
    1bf0:	cmp	r0, #0
    1bf4:	beq	1b8c <verify_empty_monster+0x3c>
    1bf8:	movw	r0, #0
    1bfc:	movt	r0, #0
    1c00:	bl	0 <puts>
    1c04:	mvn	r0, #0
    1c08:	b	1b8c <verify_empty_monster+0x3c>
    1c0c:	movw	r0, #0
    1c10:	movt	r0, #0
    1c14:	bl	0 <puts>
    1c18:	mvn	r0, #0
    1c1c:	b	1b8c <verify_empty_monster+0x3c>

00001c20 <test_enums>:
    1c20:	mov	r0, #0
    1c24:	bx	lr

00001c28 <test_type_aliases>:
    1c28:	strd	r4, [sp, #-36]!	; 0xffffffdc
    1c2c:	mov	r4, r0
    1c30:	mov	r5, #8
    1c34:	strd	r6, [sp, #8]
    1c38:	mvn	r6, #0
    1c3c:	strd	r8, [sp, #16]
    1c40:	strd	sl, [sp, #24]
    1c44:	str	lr, [sp, #32]
    1c48:	sub	sp, sp, #20
    1c4c:	bl	0 <flatcc_builder_reset>
    1c50:	mov	ip, #1
    1c54:	mov	r2, #0
    1c58:	mov	r3, ip
    1c5c:	mov	r1, r2
    1c60:	mov	r0, r4
    1c64:	str	ip, [sp]
    1c68:	str	r6, [sp, #4]
    1c6c:	bl	0 <flatcc_builder_create_vector>
    1c70:	mvn	ip, #-536870912	; 0xe0000000
    1c74:	mov	r2, #0
    1c78:	mov	r1, r2
    1c7c:	mov	r3, r5
    1c80:	mov	r8, r0
    1c84:	mov	r0, r4
    1c88:	stm	sp, {r5, ip}
    1c8c:	bl	0 <flatcc_builder_create_vector>
    1c90:	mov	r3, #0
    1c94:	mov	r9, r0
    1c98:	mov	r2, r3
    1c9c:	mov	r0, r4
    1ca0:	movw	r1, #0
    1ca4:	movt	r1, #0
    1ca8:	bl	0 <flatcc_builder_start_buffer>
    1cac:	subs	r7, r0, #0
    1cb0:	beq	1f10 <test_type_aliases+0x2e8>
    1cb4:	mov	r0, r4
    1cb8:	add	r1, sp, #12
    1cbc:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    1cc0:	movw	r3, #0
    1cc4:	movt	r3, #0
    1cc8:	ldr	r1, [sp, #12]
    1ccc:	movw	r2, #0
    1cd0:	movt	r2, #0
    1cd4:	mov	r4, r0
    1cd8:	bl	0 <flatcc_verify_table_as_root>
    1cdc:	subs	r5, r0, #0
    1ce0:	bne	210c <test_type_aliases+0x4e4>
    1ce4:	cmp	r4, #0
    1ce8:	beq	1d00 <test_type_aliases+0xd8>
    1cec:	ldr	r2, [r4, #4]
    1cf0:	movw	r3, #20301	; 0x4f4d
    1cf4:	movt	r3, #21326	; 0x534e
    1cf8:	cmp	r2, r3
    1cfc:	beq	1d1c <test_type_aliases+0xf4>
    1d00:	movw	r1, #0
    1d04:	movt	r1, #0
    1d08:	ldr	r3, [pc, #1124]	; 2174 <test_type_aliases+0x54c>
    1d0c:	movw	r0, #0
    1d10:	movt	r0, #0
    1d14:	movw	r2, #749	; 0x2ed
    1d18:	bl	0 <__assert_fail>
    1d1c:	ldr	r2, [r4]
    1d20:	adds	r0, r4, r2
    1d24:	beq	1d00 <test_type_aliases+0xd8>
    1d28:	ldr	r3, [r4, r2]
    1d2c:	sub	r3, r0, r3
    1d30:	ldrh	r2, [r3]
    1d34:	cmp	r2, #5
    1d38:	bhi	1d74 <test_type_aliases+0x14c>
    1d3c:	movw	r0, #0
    1d40:	movt	r0, #0
    1d44:	mvn	r5, #0
    1d48:	bl	0 <puts>
    1d4c:	mov	r0, r4
    1d50:	bl	0 <flatcc_builder_aligned_free>
    1d54:	mov	r0, r5
    1d58:	add	sp, sp, #20
    1d5c:	ldrd	r4, [sp]
    1d60:	ldrd	r6, [sp, #8]
    1d64:	ldrd	r8, [sp, #16]
    1d68:	ldrd	sl, [sp, #24]
    1d6c:	add	sp, sp, #32
    1d70:	pop	{pc}		; (ldr pc, [sp], #4)
    1d74:	ldrh	r1, [r3, #4]
    1d78:	cmp	r1, #0
    1d7c:	beq	1d3c <test_type_aliases+0x114>
    1d80:	ldrsb	ip, [r0, r1]
    1d84:	cmp	r2, #9
    1d88:	movls	r1, #0
    1d8c:	movhi	r1, #1
    1d90:	cmn	ip, #128	; 0x80
    1d94:	movne	r1, #0
    1d98:	cmp	r1, #0
    1d9c:	beq	1d3c <test_type_aliases+0x114>
    1da0:	ldrh	r1, [r3, #8]
    1da4:	cmp	r1, #0
    1da8:	beq	1d3c <test_type_aliases+0x114>
    1dac:	ldrsh	ip, [r0, r1]
    1db0:	cmp	r2, #13
    1db4:	movls	r1, #0
    1db8:	movhi	r1, #1
    1dbc:	cmn	ip, #32768	; 0x8000
    1dc0:	movne	r1, #0
    1dc4:	cmp	r1, #0
    1dc8:	beq	1d3c <test_type_aliases+0x114>
    1dcc:	ldrh	r1, [r3, #12]
    1dd0:	cmp	r1, #0
    1dd4:	beq	1d3c <test_type_aliases+0x114>
    1dd8:	ldr	ip, [r0, r1]
    1ddc:	cmp	r2, #17
    1de0:	sub	r1, ip, #-2147483648	; 0x80000000
    1de4:	clz	r1, r1
    1de8:	lsr	r1, r1, #5
    1dec:	movls	r1, #0
    1df0:	cmp	r1, #0
    1df4:	beq	1d3c <test_type_aliases+0x114>
    1df8:	ldrh	r1, [r3, #16]
    1dfc:	cmp	r1, #0
    1e00:	beq	1d3c <test_type_aliases+0x114>
    1e04:	ldrd	r6, [r0, r1]
    1e08:	cmp	r7, #-2147483648	; 0x80000000
    1e0c:	cmpeq	r6, #0
    1e10:	bne	1d3c <test_type_aliases+0x114>
    1e14:	ldrh	r1, [r3, #6]
    1e18:	cmp	r1, #0
    1e1c:	beq	1d3c <test_type_aliases+0x114>
    1e20:	ldrb	r1, [r0, r1]
    1e24:	cmp	r1, #255	; 0xff
    1e28:	bne	1d3c <test_type_aliases+0x114>
    1e2c:	ldrh	r1, [r3, #10]
    1e30:	cmp	r1, #0
    1e34:	beq	1d3c <test_type_aliases+0x114>
    1e38:	ldrh	ip, [r0, r1]
    1e3c:	movw	r1, #65535	; 0xffff
    1e40:	cmp	ip, r1
    1e44:	bne	1d3c <test_type_aliases+0x114>
    1e48:	ldrh	r1, [r3, #14]
    1e4c:	cmp	r1, #0
    1e50:	beq	1d3c <test_type_aliases+0x114>
    1e54:	ldr	ip, [r0, r1]
    1e58:	cmp	r2, #19
    1e5c:	movls	r1, #0
    1e60:	movhi	r1, #1
    1e64:	cmn	ip, #1
    1e68:	movne	r1, #0
    1e6c:	cmp	r1, #0
    1e70:	beq	1d3c <test_type_aliases+0x114>
    1e74:	ldrh	r1, [r3, #18]
    1e78:	cmp	r1, #0
    1e7c:	beq	1d3c <test_type_aliases+0x114>
    1e80:	mov	ip, r0
    1e84:	cmp	r2, #21
    1e88:	ldr	r1, [ip, r1]!
    1e8c:	ldr	ip, [ip, #4]
    1e90:	and	r1, r1, ip
    1e94:	movls	ip, #0
    1e98:	movhi	ip, #1
    1e9c:	cmn	r1, #1
    1ea0:	movne	ip, #0
    1ea4:	cmp	ip, #0
    1ea8:	beq	1d3c <test_type_aliases+0x114>
    1eac:	ldrh	r1, [r3, #20]
    1eb0:	cmp	r1, #0
    1eb4:	beq	1d3c <test_type_aliases+0x114>
    1eb8:	add	r1, r0, r1
    1ebc:	vldr	s15, [pc, #684]	; 2170 <test_type_aliases+0x548>
    1ec0:	vldr	s14, [r1]
    1ec4:	vcmp.f32	s14, s15
    1ec8:	vmrs	APSR_nzcv, fpscr
    1ecc:	moveq	r1, #1
    1ed0:	movne	r1, #0
    1ed4:	cmp	r2, #23
    1ed8:	movls	r2, #0
    1edc:	andhi	r2, r1, #1
    1ee0:	cmp	r2, #0
    1ee4:	beq	1d3c <test_type_aliases+0x114>
    1ee8:	ldrh	r3, [r3, #22]
    1eec:	cmp	r3, #0
    1ef0:	beq	1d3c <test_type_aliases+0x114>
    1ef4:	add	r3, r0, r3
    1ef8:	vldr	d7, [pc, #616]	; 2168 <test_type_aliases+0x540>
    1efc:	vldr	d6, [r3]
    1f00:	vcmp.f64	d6, d7
    1f04:	vmrs	APSR_nzcv, fpscr
    1f08:	beq	1d4c <test_type_aliases+0x124>
    1f0c:	b	1d3c <test_type_aliases+0x114>
    1f10:	mov	r1, #12
    1f14:	mov	r0, r4
    1f18:	bl	0 <flatcc_builder_start_table>
    1f1c:	cmp	r0, #0
    1f20:	bne	20fc <test_type_aliases+0x4d4>
    1f24:	mov	r3, r5
    1f28:	mov	r2, r5
    1f2c:	mov	r1, #6
    1f30:	mov	r0, r4
    1f34:	bl	0 <flatcc_builder_table_add>
    1f38:	cmp	r0, #0
    1f3c:	beq	20fc <test_type_aliases+0x4d4>
    1f40:	mov	sl, #0
    1f44:	mov	fp, #-2147483648	; 0x80000000
    1f48:	mov	r3, r5
    1f4c:	mov	r2, r5
    1f50:	mov	r1, #7
    1f54:	strd	sl, [r0]
    1f58:	mov	r0, r4
    1f5c:	bl	0 <flatcc_builder_table_add>
    1f60:	cmp	r0, #0
    1f64:	beq	20fc <test_type_aliases+0x4d4>
    1f68:	mvn	sl, #0
    1f6c:	mvn	fp, #0
    1f70:	mov	r3, r5
    1f74:	mov	r2, r5
    1f78:	mov	r1, #9
    1f7c:	strd	sl, [r0]
    1f80:	mov	r0, r4
    1f84:	bl	0 <flatcc_builder_table_add>
    1f88:	subs	ip, r0, #0
    1f8c:	beq	20fc <test_type_aliases+0x4d4>
    1f90:	movw	sl, #26214	; 0x6666
    1f94:	movt	sl, #26214	; 0x6666
    1f98:	movw	fp, #26214	; 0x6666
    1f9c:	movt	fp, #16386	; 0x4002
    1fa0:	mov	r3, #4
    1fa4:	mov	r0, r4
    1fa8:	mov	r2, r3
    1fac:	mov	r1, r3
    1fb0:	strd	sl, [ip]
    1fb4:	bl	0 <flatcc_builder_table_add>
    1fb8:	cmp	r0, #0
    1fbc:	beq	20fc <test_type_aliases+0x4d4>
    1fc0:	mov	ip, #-2147483648	; 0x80000000
    1fc4:	mov	r3, #4
    1fc8:	mov	r2, r3
    1fcc:	mov	r1, #5
    1fd0:	str	ip, [r0]
    1fd4:	mov	r0, r4
    1fd8:	bl	0 <flatcc_builder_table_add>
    1fdc:	cmp	r0, #0
    1fe0:	beq	20fc <test_type_aliases+0x4d4>
    1fe4:	mov	r3, #4
    1fe8:	mov	r1, r5
    1fec:	str	r6, [r0]
    1ff0:	mov	r2, r3
    1ff4:	mov	r0, r4
    1ff8:	bl	0 <flatcc_builder_table_add>
    1ffc:	cmp	r0, #0
    2000:	beq	20fc <test_type_aliases+0x4d4>
    2004:	movw	r3, #13107	; 0x3333
    2008:	movt	r3, #16403	; 0x4013
    200c:	cmp	r8, #0
    2010:	str	r3, [r0]
    2014:	beq	20fc <test_type_aliases+0x4d4>
    2018:	mov	r1, #10
    201c:	mov	r0, r4
    2020:	bl	0 <flatcc_builder_table_add_offset>
    2024:	cmp	r0, #0
    2028:	beq	20fc <test_type_aliases+0x4d4>
    202c:	cmp	r9, #0
    2030:	str	r8, [r0]
    2034:	beq	20fc <test_type_aliases+0x4d4>
    2038:	mov	r1, #11
    203c:	mov	r0, r4
    2040:	bl	0 <flatcc_builder_table_add_offset>
    2044:	subs	r2, r0, #0
    2048:	beq	20fc <test_type_aliases+0x4d4>
    204c:	mov	r3, #2
    2050:	mov	r0, r4
    2054:	str	r9, [r2]
    2058:	mov	r1, r3
    205c:	mov	r2, r3
    2060:	bl	0 <flatcc_builder_table_add>
    2064:	cmp	r0, #0
    2068:	beq	20fc <test_type_aliases+0x4d4>
    206c:	mov	ip, #32768	; 0x8000
    2070:	mov	r3, #2
    2074:	mov	r2, r3
    2078:	mov	r1, #3
    207c:	strh	ip, [r0]
    2080:	mov	r0, r4
    2084:	bl	0 <flatcc_builder_table_add>
    2088:	cmp	r0, #0
    208c:	beq	20fc <test_type_aliases+0x4d4>
    2090:	mov	r3, #1
    2094:	mov	r1, #0
    2098:	strh	r6, [r0]
    209c:	mov	r2, r3
    20a0:	mov	r0, r4
    20a4:	bl	0 <flatcc_builder_table_add>
    20a8:	cmp	r0, #0
    20ac:	beq	20fc <test_type_aliases+0x4d4>
    20b0:	mvn	ip, #127	; 0x7f
    20b4:	mov	r3, #1
    20b8:	mov	r2, r3
    20bc:	mov	r1, r3
    20c0:	strb	ip, [r0]
    20c4:	mov	r0, r4
    20c8:	bl	0 <flatcc_builder_table_add>
    20cc:	subs	r3, r0, #0
    20d0:	beq	20fc <test_type_aliases+0x4d4>
    20d4:	mov	r2, #0
    20d8:	ldr	r1, [pc, #152]	; 2178 <test_type_aliases+0x550>
    20dc:	mov	r0, r4
    20e0:	strb	r6, [r3]
    20e4:	bl	0 <flatcc_builder_check_required>
    20e8:	cmp	r0, #0
    20ec:	beq	2148 <test_type_aliases+0x520>
    20f0:	mov	r0, r4
    20f4:	bl	0 <flatcc_builder_end_table>
    20f8:	mov	r7, r0
    20fc:	mov	r1, r7
    2100:	mov	r0, r4
    2104:	bl	0 <flatcc_builder_end_buffer>
    2108:	b	1cb4 <test_type_aliases+0x8c>
    210c:	movw	r3, #0
    2110:	movt	r3, #0
    2114:	ldr	r2, [sp, #12]
    2118:	mov	r1, r4
    211c:	movw	r0, #0
    2120:	movt	r0, #0
    2124:	ldr	r3, [r3]
    2128:	bl	28 <hexdump>
    212c:	mov	r0, r5
    2130:	bl	0 <flatcc_verify_error_string>
    2134:	mov	r1, r0
    2138:	movw	r0, #0
    213c:	movt	r0, #0
    2140:	bl	0 <printf>
    2144:	b	1d4c <test_type_aliases+0x124>
    2148:	movw	r1, #0
    214c:	movt	r1, #0
    2150:	ldr	r3, [pc, #36]	; 217c <test_type_aliases+0x554>
    2154:	movw	r0, #0
    2158:	movt	r0, #0
    215c:	mov	r2, #237	; 0xed
    2160:	bl	0 <__assert_fail>
    2164:	nop	{0}
    2168:	.word	0x66666666
    216c:	.word	0x40026666
    2170:	.word	0x40133333
    2174:	.word	0x000003e4
    2178:	.word	0x000003c0
    217c:	.word	0x000003c4

00002180 <test_empty_monster>:
    2180:	strd	r4, [sp, #-12]!
    2184:	mov	r4, r0
    2188:	str	lr, [sp, #8]
    218c:	sub	sp, sp, #12
    2190:	bl	0 <flatcc_builder_reset>
    2194:	mov	r3, #0
    2198:	mov	r0, r4
    219c:	mov	r2, r3
    21a0:	movw	r1, #0
    21a4:	movt	r1, #0
    21a8:	bl	0 <flatcc_builder_start_buffer>
    21ac:	mov	r1, #36	; 0x24
    21b0:	mov	r0, r4
    21b4:	bl	0 <flatcc_builder_start_table>
    21b8:	mov	r0, r4
    21bc:	movw	r1, #0
    21c0:	movt	r1, #0
    21c4:	bl	0 <flatcc_builder_create_string_str>
    21c8:	subs	r5, r0, #0
    21cc:	beq	21e4 <test_empty_monster+0x64>
    21d0:	mov	r1, #3
    21d4:	mov	r0, r4
    21d8:	bl	0 <flatcc_builder_table_add_offset>
    21dc:	cmp	r0, #0
    21e0:	strne	r5, [r0]
    21e4:	mov	r2, #1
    21e8:	ldr	r1, [pc, #252]	; 22ec <test_empty_monster+0x16c>
    21ec:	mov	r0, r4
    21f0:	bl	0 <flatcc_builder_check_required>
    21f4:	cmp	r0, #0
    21f8:	beq	22e8 <test_empty_monster+0x168>
    21fc:	mov	r0, r4
    2200:	bl	0 <flatcc_builder_end_table>
    2204:	mov	r1, r0
    2208:	mov	r0, r4
    220c:	bl	0 <flatcc_builder_end_buffer>
    2210:	mov	r0, r4
    2214:	add	r1, sp, #4
    2218:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    221c:	movw	r3, #0
    2220:	movt	r3, #0
    2224:	ldr	r2, [sp, #4]
    2228:	mov	r1, r0
    222c:	mov	r4, r0
    2230:	movw	r0, #0
    2234:	movt	r0, #0
    2238:	ldr	r3, [r3]
    223c:	bl	28 <hexdump>
    2240:	mov	r0, r4
    2244:	bl	1b50 <verify_empty_monster>
    2248:	subs	r5, r0, #0
    224c:	beq	226c <test_empty_monster+0xec>
    2250:	mov	r0, r4
    2254:	bl	0 <flatcc_builder_aligned_free>
    2258:	mov	r0, r5
    225c:	add	sp, sp, #12
    2260:	ldrd	r4, [sp]
    2264:	add	sp, sp, #8
    2268:	pop	{pc}		; (ldr pc, [sp], #4)
    226c:	movw	r3, #0
    2270:	movt	r3, #0
    2274:	ldr	r1, [sp, #4]
    2278:	movw	r2, #0
    227c:	movt	r2, #0
    2280:	mov	r0, r4
    2284:	bl	0 <flatcc_verify_table_as_root>
    2288:	subs	r5, r0, #0
    228c:	bne	22cc <test_empty_monster+0x14c>
    2290:	ldr	r1, [sp, #4]
    2294:	movw	r3, #0
    2298:	movt	r3, #0
    229c:	movw	r2, #0
    22a0:	movt	r2, #0
    22a4:	mov	r0, r4
    22a8:	sub	r1, r1, #1
    22ac:	bl	0 <flatcc_verify_table_as_root>
    22b0:	cmp	r0, #0
    22b4:	bne	2250 <test_empty_monster+0xd0>
    22b8:	movw	r0, #0
    22bc:	movt	r0, #0
    22c0:	bl	0 <puts>
    22c4:	mvn	r5, #0
    22c8:	b	2258 <test_empty_monster+0xd8>
    22cc:	bl	0 <flatcc_verify_error_string>
    22d0:	mov	r1, r0
    22d4:	movw	r0, #0
    22d8:	movt	r0, #0
    22dc:	mvn	r5, #0
    22e0:	bl	0 <printf>
    22e4:	b	2258 <test_empty_monster+0xd8>
    22e8:	bl	7dc <MyGame_Example_Monster_end.part.49>
    22ec:	.word	0x00000404

000022f0 <test_typed_empty_monster>:
    22f0:	strd	r4, [sp, #-20]!	; 0xffffffec
    22f4:	mov	r4, #0
    22f8:	mov	r5, r0
    22fc:	strd	r6, [sp, #8]
    2300:	str	lr, [sp, #16]
    2304:	sub	sp, sp, #12
    2308:	str	r4, [sp, #4]
    230c:	bl	0 <flatcc_builder_reset>
    2310:	mov	r3, r4
    2314:	mov	r2, r4
    2318:	mov	r0, r5
    231c:	movw	r1, #0
    2320:	movt	r1, #0
    2324:	bl	0 <flatcc_builder_start_buffer>
    2328:	mov	r1, #36	; 0x24
    232c:	mov	r0, r5
    2330:	bl	0 <flatcc_builder_start_table>
    2334:	mov	r0, r5
    2338:	movw	r1, #0
    233c:	movt	r1, #0
    2340:	bl	0 <flatcc_builder_create_string_str>
    2344:	subs	r4, r0, #0
    2348:	beq	2360 <test_typed_empty_monster+0x70>
    234c:	mov	r1, #3
    2350:	mov	r0, r5
    2354:	bl	0 <flatcc_builder_table_add_offset>
    2358:	cmp	r0, #0
    235c:	strne	r4, [r0]
    2360:	mov	r2, #1
    2364:	ldr	r1, [pc, #668]	; 2608 <test_typed_empty_monster+0x318>
    2368:	mov	r0, r5
    236c:	bl	0 <flatcc_builder_check_required>
    2370:	cmp	r0, #0
    2374:	beq	2604 <test_typed_empty_monster+0x314>
    2378:	mov	r0, r5
    237c:	ldr	r6, [pc, #648]	; 260c <test_typed_empty_monster+0x31c>
    2380:	movw	r4, #40389	; 0x9dc5
    2384:	movt	r4, #33052	; 0x811c
    2388:	bl	0 <flatcc_builder_end_table>
    238c:	mov	r1, r0
    2390:	mov	r0, r5
    2394:	bl	0 <flatcc_builder_end_buffer>
    2398:	mov	r0, r5
    239c:	mov	r1, sp
    23a0:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    23a4:	movw	r3, #0
    23a8:	movt	r3, #0
    23ac:	ldr	r2, [sp]
    23b0:	mov	r1, r0
    23b4:	mov	r5, r0
    23b8:	movw	r0, #0
    23bc:	movt	r0, #0
    23c0:	ldr	r3, [r3]
    23c4:	bl	28 <hexdump>
    23c8:	movw	ip, #403	; 0x193
    23cc:	movt	ip, #256	; 0x100
    23d0:	ldr	r1, [r5, #4]
    23d4:	mov	r0, r6
    23d8:	mov	r2, #121	; 0x79
    23dc:	mov	r3, #77	; 0x4d
    23e0:	b	23ec <test_typed_empty_monster+0xfc>
    23e4:	mov	r3, r2
    23e8:	ldrb	r2, [r0, #1]!
    23ec:	eor	r3, r3, r4
    23f0:	cmp	r2, #0
    23f4:	mul	r4, ip, r3
    23f8:	bne	23e4 <test_typed_empty_monster+0xf4>
    23fc:	cmp	r4, #0
    2400:	beq	2554 <test_typed_empty_monster+0x264>
    2404:	cmp	r4, r1
    2408:	bne	25ac <test_typed_empty_monster+0x2bc>
    240c:	movw	r3, #62593	; 0xf481
    2410:	movt	r3, #13070	; 0x330e
    2414:	cmp	r4, r3
    2418:	bne	2564 <test_typed_empty_monster+0x274>
    241c:	mov	r0, r5
    2420:	bl	1b50 <verify_empty_monster>
    2424:	cmp	r0, #0
    2428:	beq	25f0 <test_typed_empty_monster+0x300>
    242c:	movw	r3, #0
    2430:	movt	r3, #0
    2434:	ldr	r1, [sp]
    2438:	movw	r2, #0
    243c:	movt	r2, #0
    2440:	mov	r0, r5
    2444:	bl	0 <flatcc_verify_table_as_root>
    2448:	subs	r7, r0, #0
    244c:	bne	2594 <test_typed_empty_monster+0x2a4>
    2450:	movw	r3, #0
    2454:	movt	r3, #0
    2458:	ldr	r1, [sp]
    245c:	movw	r2, #0
    2460:	movt	r2, #0
    2464:	mov	r0, r5
    2468:	bl	0 <flatcc_verify_table_as_root>
    246c:	subs	r7, r0, #0
    2470:	bne	2594 <test_typed_empty_monster+0x2a4>
    2474:	mov	r2, r4
    2478:	movw	r3, #0
    247c:	movt	r3, #0
    2480:	mov	r0, r5
    2484:	ldr	r1, [sp]
    2488:	bl	0 <flatcc_verify_table_as_typed_root>
    248c:	subs	r7, r0, #0
    2490:	bne	25d8 <test_typed_empty_monster+0x2e8>
    2494:	movw	r2, #40389	; 0x9dc5
    2498:	movt	r2, #33052	; 0x811c
    249c:	ldr	r1, [sp]
    24a0:	movw	ip, #403	; 0x193
    24a4:	movt	ip, #256	; 0x100
    24a8:	mov	r3, #121	; 0x79
    24ac:	mov	r0, #77	; 0x4d
    24b0:	b	24bc <test_typed_empty_monster+0x1cc>
    24b4:	mov	r0, r3
    24b8:	ldrb	r3, [r6, #1]!
    24bc:	eor	r2, r2, r0
    24c0:	cmp	r3, #0
    24c4:	mul	r2, ip, r2
    24c8:	bne	24b4 <test_typed_empty_monster+0x1c4>
    24cc:	cmp	r2, #0
    24d0:	movw	r3, #40389	; 0x9dc5
    24d4:	movt	r3, #33052	; 0x811c
    24d8:	mov	r0, r5
    24dc:	moveq	r2, r3
    24e0:	movw	r3, #0
    24e4:	movt	r3, #0
    24e8:	bl	0 <flatcc_verify_table_as_typed_root>
    24ec:	subs	r7, r0, #0
    24f0:	bne	25c0 <test_typed_empty_monster+0x2d0>
    24f4:	movw	ip, #62593	; 0xf481
    24f8:	movt	ip, #13070	; 0x330e
    24fc:	ldr	r1, [sp]
    2500:	movw	r3, #0
    2504:	movt	r3, #0
    2508:	add	r2, sp, #4
    250c:	mov	r0, r5
    2510:	str	ip, [sp, #4]
    2514:	bl	0 <flatcc_verify_table_as_root>
    2518:	subs	r7, r0, #0
    251c:	bne	2594 <test_typed_empty_monster+0x2a4>
    2520:	movw	r3, #0
    2524:	movt	r3, #0
    2528:	ldr	r1, [sp]
    252c:	movw	r2, #0
    2530:	movt	r2, #0
    2534:	mov	r0, r5
    2538:	bl	0 <flatcc_verify_table_as_root>
    253c:	cmp	r0, #0
    2540:	bne	2574 <test_typed_empty_monster+0x284>
    2544:	movw	r0, #0
    2548:	movt	r0, #0
    254c:	bl	0 <puts>
    2550:	b	2574 <test_typed_empty_monster+0x284>
    2554:	movw	r3, #40389	; 0x9dc5
    2558:	movt	r3, #33052	; 0x811c
    255c:	cmp	r1, r3
    2560:	bne	25ac <test_typed_empty_monster+0x2bc>
    2564:	movw	r0, #0
    2568:	movt	r0, #0
    256c:	mvn	r7, #0
    2570:	bl	0 <puts>
    2574:	mov	r0, r5
    2578:	bl	0 <flatcc_builder_aligned_free>
    257c:	mov	r0, r7
    2580:	add	sp, sp, #12
    2584:	ldrd	r4, [sp]
    2588:	ldrd	r6, [sp, #8]
    258c:	add	sp, sp, #16
    2590:	pop	{pc}		; (ldr pc, [sp], #4)
    2594:	bl	0 <flatcc_verify_error_string>
    2598:	mov	r1, r0
    259c:	movw	r0, #0
    25a0:	movt	r0, #0
    25a4:	bl	0 <printf>
    25a8:	b	2574 <test_typed_empty_monster+0x284>
    25ac:	movw	r0, #0
    25b0:	movt	r0, #0
    25b4:	mvn	r7, #0
    25b8:	bl	0 <printf>
    25bc:	b	2574 <test_typed_empty_monster+0x284>
    25c0:	bl	0 <flatcc_verify_error_string>
    25c4:	mov	r1, r0
    25c8:	movw	r0, #0
    25cc:	movt	r0, #0
    25d0:	bl	0 <printf>
    25d4:	b	2574 <test_typed_empty_monster+0x284>
    25d8:	bl	0 <flatcc_verify_error_string>
    25dc:	mov	r1, r0
    25e0:	movw	r0, #0
    25e4:	movt	r0, #0
    25e8:	bl	0 <printf>
    25ec:	b	2574 <test_typed_empty_monster+0x284>
    25f0:	movw	r0, #0
    25f4:	movt	r0, #0
    25f8:	bl	0 <puts>
    25fc:	mvn	r7, #0
    2600:	b	2574 <test_typed_empty_monster+0x284>
    2604:	bl	7dc <MyGame_Example_Monster_end.part.49>
    2608:	.word	0x00000404
    260c:	.word	0x00000001

00002610 <verify_table_with_emptystruct>:
    2610:	cmp	r0, #0
    2614:	str	r4, [sp, #-8]!
    2618:	str	lr, [sp, #4]
    261c:	beq	2634 <verify_table_with_emptystruct+0x24>
    2620:	ldr	r2, [r0, #4]
    2624:	movw	r3, #20301	; 0x4f4d
    2628:	movt	r3, #21326	; 0x534e
    262c:	cmp	r2, r3
    2630:	beq	2650 <verify_table_with_emptystruct+0x40>
    2634:	movw	r0, #0
    2638:	movt	r0, #0
    263c:	bl	0 <puts>
    2640:	mvn	r0, #0
    2644:	ldr	r4, [sp]
    2648:	add	sp, sp, #4
    264c:	pop	{pc}		; (ldr pc, [sp], #4)
    2650:	ldr	r3, [r0]
    2654:	adds	r2, r0, r3
    2658:	beq	2634 <verify_table_with_emptystruct+0x24>
    265c:	ldr	r3, [r0, r3]
    2660:	sub	r3, r2, r3
    2664:	ldrh	r1, [r3]
    2668:	cmp	r1, #5
    266c:	bls	2688 <verify_table_with_emptystruct+0x78>
    2670:	ldrh	r3, [r3, #4]
    2674:	cmp	r3, #0
    2678:	beq	2688 <verify_table_with_emptystruct+0x78>
    267c:	cmn	r2, r3
    2680:	movne	r0, #0
    2684:	bne	2644 <verify_table_with_emptystruct+0x34>
    2688:	movw	r0, #0
    268c:	movt	r0, #0
    2690:	bl	0 <puts>
    2694:	mvn	r0, #0
    2698:	b	2644 <verify_table_with_emptystruct+0x34>

0000269c <test_table_with_emptystruct>:
    269c:	strd	r4, [sp, #-16]!
    26a0:	mov	r4, r0
    26a4:	str	r6, [sp, #8]
    26a8:	str	lr, [sp, #12]
    26ac:	sub	sp, sp, #8
    26b0:	bl	0 <flatcc_builder_reset>
    26b4:	mov	r3, #0
    26b8:	mov	r0, r4
    26bc:	mov	r2, r3
    26c0:	movw	r1, #0
    26c4:	movt	r1, #0
    26c8:	bl	0 <flatcc_builder_start_buffer>
    26cc:	subs	r5, r0, #0
    26d0:	beq	2730 <test_table_with_emptystruct+0x94>
    26d4:	add	r1, sp, #4
    26d8:	mov	r0, r4
    26dc:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    26e0:	movw	r3, #0
    26e4:	movt	r3, #0
    26e8:	ldr	r2, [sp, #4]
    26ec:	mov	r1, r0
    26f0:	mov	r4, r0
    26f4:	movw	r0, #0
    26f8:	movt	r0, #0
    26fc:	ldr	r3, [r3]
    2700:	bl	28 <hexdump>
    2704:	mov	r0, r4
    2708:	bl	2610 <verify_table_with_emptystruct>
    270c:	mov	r5, r0
    2710:	mov	r0, r4
    2714:	bl	0 <flatcc_builder_aligned_free>
    2718:	mov	r0, r5
    271c:	add	sp, sp, #8
    2720:	ldrd	r4, [sp]
    2724:	ldr	r6, [sp, #8]
    2728:	add	sp, sp, #12
    272c:	pop	{pc}		; (ldr pc, [sp], #4)
    2730:	mov	r1, #1
    2734:	mov	r0, r4
    2738:	bl	0 <flatcc_builder_start_table>
    273c:	subs	r6, r0, #0
    2740:	bne	2784 <test_table_with_emptystruct+0xe8>
    2744:	mov	r3, #1
    2748:	mov	r2, r6
    274c:	mov	r1, r6
    2750:	mov	r0, r4
    2754:	bl	0 <flatcc_builder_table_add>
    2758:	cmp	r0, #0
    275c:	beq	2784 <test_table_with_emptystruct+0xe8>
    2760:	mov	r2, r6
    2764:	ldr	r1, [pc, #68]	; 27b0 <test_table_with_emptystruct+0x114>
    2768:	mov	r0, r4
    276c:	bl	0 <flatcc_builder_check_required>
    2770:	cmp	r0, #0
    2774:	beq	2794 <test_table_with_emptystruct+0xf8>
    2778:	mov	r0, r4
    277c:	bl	0 <flatcc_builder_end_table>
    2780:	mov	r5, r0
    2784:	mov	r1, r5
    2788:	mov	r0, r4
    278c:	bl	0 <flatcc_builder_end_buffer>
    2790:	b	26d4 <test_table_with_emptystruct+0x38>
    2794:	movw	r1, #0
    2798:	movt	r1, #0
    279c:	ldr	r3, [pc, #16]	; 27b4 <test_table_with_emptystruct+0x118>
    27a0:	movw	r0, #0
    27a4:	movt	r0, #0
    27a8:	mov	r2, #215	; 0xd7
    27ac:	bl	0 <__assert_fail>
    27b0:	.word	0x00000408
    27b4:	.word	0x0000040c

000027b8 <test_typed_table_with_emptystruct>:
    27b8:	strd	r4, [sp, #-16]!
    27bc:	mov	r4, r0
    27c0:	str	r6, [sp, #8]
    27c4:	str	lr, [sp, #12]
    27c8:	sub	sp, sp, #8
    27cc:	bl	0 <flatcc_builder_reset>
    27d0:	mov	r3, #0
    27d4:	mov	r0, r4
    27d8:	mov	r2, r3
    27dc:	movw	r1, #0
    27e0:	movt	r1, #0
    27e4:	bl	0 <flatcc_builder_start_buffer>
    27e8:	subs	r5, r0, #0
    27ec:	beq	28c8 <test_typed_table_with_emptystruct+0x110>
    27f0:	mov	r0, r4
    27f4:	add	r1, sp, #4
    27f8:	bl	0 <flatcc_builder_get_direct_buffer>
    27fc:	movw	r3, #0
    2800:	movt	r3, #0
    2804:	ldr	r2, [sp, #4]
    2808:	mov	r1, r0
    280c:	mov	r4, r0
    2810:	movw	r0, #0
    2814:	movt	r0, #0
    2818:	ldr	r3, [r3]
    281c:	bl	28 <hexdump>
    2820:	mov	r0, r4
    2824:	movw	r3, #0
    2828:	movt	r3, #0
    282c:	movw	r2, #0
    2830:	movt	r2, #0
    2834:	ldr	r1, [sp, #4]
    2838:	bl	0 <flatcc_verify_table_as_root>
    283c:	cmp	r0, #0
    2840:	bne	294c <test_typed_table_with_emptystruct+0x194>
    2844:	movw	r3, #0
    2848:	movt	r3, #0
    284c:	ldr	r1, [sp, #4]
    2850:	movw	r2, #0
    2854:	movt	r2, #0
    2858:	mov	r0, r4
    285c:	bl	0 <flatcc_verify_table_as_root>
    2860:	cmp	r0, #0
    2864:	bne	2960 <test_typed_table_with_emptystruct+0x1a8>
    2868:	movw	r5, #14262	; 0x37b6
    286c:	movt	r5, #45277	; 0xb0dd
    2870:	ldr	r1, [sp, #4]
    2874:	mov	r2, r5
    2878:	movw	r3, #0
    287c:	movt	r3, #0
    2880:	mov	r0, r4
    2884:	bl	0 <flatcc_verify_table_as_typed_root>
    2888:	cmp	r0, #0
    288c:	bne	2974 <test_typed_table_with_emptystruct+0x1bc>
    2890:	cmp	r4, #0
    2894:	beq	2988 <test_typed_table_with_emptystruct+0x1d0>
    2898:	ldr	r3, [r4, #4]
    289c:	cmp	r3, r5
    28a0:	beq	292c <test_typed_table_with_emptystruct+0x174>
    28a4:	movw	r0, #0
    28a8:	movt	r0, #0
    28ac:	bl	0 <puts>
    28b0:	mvn	r0, #0
    28b4:	add	sp, sp, #8
    28b8:	ldrd	r4, [sp]
    28bc:	ldr	r6, [sp, #8]
    28c0:	add	sp, sp, #12
    28c4:	pop	{pc}		; (ldr pc, [sp], #4)
    28c8:	mov	r1, #1
    28cc:	mov	r0, r4
    28d0:	bl	0 <flatcc_builder_start_table>
    28d4:	subs	r6, r0, #0
    28d8:	bne	291c <test_typed_table_with_emptystruct+0x164>
    28dc:	mov	r3, #1
    28e0:	mov	r2, r6
    28e4:	mov	r1, r6
    28e8:	mov	r0, r4
    28ec:	bl	0 <flatcc_builder_table_add>
    28f0:	cmp	r0, #0
    28f4:	beq	291c <test_typed_table_with_emptystruct+0x164>
    28f8:	mov	r2, r6
    28fc:	ldr	r1, [pc, #180]	; 29b8 <test_typed_table_with_emptystruct+0x200>
    2900:	mov	r0, r4
    2904:	bl	0 <flatcc_builder_check_required>
    2908:	cmp	r0, #0
    290c:	beq	299c <test_typed_table_with_emptystruct+0x1e4>
    2910:	mov	r0, r4
    2914:	bl	0 <flatcc_builder_end_table>
    2918:	mov	r5, r0
    291c:	mov	r1, r5
    2920:	mov	r0, r4
    2924:	bl	0 <flatcc_builder_end_buffer>
    2928:	b	27f0 <test_typed_table_with_emptystruct+0x38>
    292c:	ldr	r3, [r4]
    2930:	cmn	r4, r3
    2934:	bne	28b4 <test_typed_table_with_emptystruct+0xfc>
    2938:	movw	r0, #0
    293c:	movt	r0, #0
    2940:	bl	0 <puts>
    2944:	mvn	r0, #0
    2948:	b	28b4 <test_typed_table_with_emptystruct+0xfc>
    294c:	movw	r0, #0
    2950:	movt	r0, #0
    2954:	bl	0 <puts>
    2958:	mvn	r0, #0
    295c:	b	28b4 <test_typed_table_with_emptystruct+0xfc>
    2960:	movw	r0, #0
    2964:	movt	r0, #0
    2968:	bl	0 <puts>
    296c:	mvn	r0, #0
    2970:	b	28b4 <test_typed_table_with_emptystruct+0xfc>
    2974:	movw	r0, #0
    2978:	movt	r0, #0
    297c:	bl	0 <puts>
    2980:	mvn	r0, #0
    2984:	b	28b4 <test_typed_table_with_emptystruct+0xfc>
    2988:	movw	r0, #0
    298c:	movt	r0, #0
    2990:	bl	0 <puts>
    2994:	mvn	r0, #0
    2998:	b	28b4 <test_typed_table_with_emptystruct+0xfc>
    299c:	movw	r1, #0
    29a0:	movt	r1, #0
    29a4:	ldr	r3, [pc, #16]	; 29bc <test_typed_table_with_emptystruct+0x204>
    29a8:	movw	r0, #0
    29ac:	movt	r0, #0
    29b0:	mov	r2, #215	; 0xd7
    29b4:	bl	0 <__assert_fail>
    29b8:	.word	0x00000408
    29bc:	.word	0x0000040c

000029c0 <verify_monster>:
    29c0:	strd	r4, [sp, #-32]!	; 0xffffffe0
    29c4:	movw	r1, #1092	; 0x444
    29c8:	strd	r6, [sp, #8]
    29cc:	movw	r6, #0
    29d0:	movt	r6, #0
    29d4:	add	ip, r6, #1072	; 0x430
    29d8:	ldr	r4, [pc, #752]	; 2cd0 <verify_monster+0x310>
    29dc:	mov	r7, r0
    29e0:	strd	r8, [sp, #16]
    29e4:	str	lr, [sp, #28]
    29e8:	ldrd	r2, [ip]
    29ec:	str	sl, [sp, #24]
    29f0:	sub	sp, sp, #80	; 0x50
    29f4:	ldr	lr, [r0, #4]
    29f8:	ldrd	r0, [r1, r6]
    29fc:	ldrd	r4, [r4, #8]
    2a00:	strd	r0, [sp, #4]
    2a04:	movw	r1, #20301	; 0x4f4d
    2a08:	movt	r1, #21326	; 0x534e
    2a0c:	strd	r2, [sp, #20]
    2a10:	cmp	lr, r1
    2a14:	ldrd	r2, [ip, #8]
    2a18:	strd	r4, [sp, #12]
    2a1c:	ldr	r0, [r6, #1088]	; 0x440
    2a20:	strd	r2, [sp, #28]
    2a24:	str	r0, [sp, #36]	; 0x24
    2a28:	beq	2a58 <verify_monster+0x98>
    2a2c:	movw	r0, #0
    2a30:	movt	r0, #0
    2a34:	bl	0 <puts>
    2a38:	mvn	r0, #0
    2a3c:	add	sp, sp, #80	; 0x50
    2a40:	ldrd	r4, [sp]
    2a44:	ldrd	r6, [sp, #8]
    2a48:	ldrd	r8, [sp, #16]
    2a4c:	ldr	sl, [sp, #24]
    2a50:	add	sp, sp, #28
    2a54:	pop	{pc}		; (ldr pc, [sp], #4)
    2a58:	ldr	r9, [r7]
    2a5c:	adds	r5, r7, r9
    2a60:	beq	2b60 <verify_monster+0x1a0>
    2a64:	ldr	r3, [r7, r9]
    2a68:	sub	r3, r5, r3
    2a6c:	ldrh	r2, [r3]
    2a70:	cmp	r2, #9
    2a74:	bls	2c88 <verify_monster+0x2c8>
    2a78:	ldrh	r2, [r3, #8]
    2a7c:	cmp	r2, #0
    2a80:	beq	2c88 <verify_monster+0x2c8>
    2a84:	ldrsh	r2, [r5, r2]
    2a88:	cmp	r2, #80	; 0x50
    2a8c:	bne	2c88 <verify_monster+0x2c8>
    2a90:	ldrh	r4, [r3, #4]
    2a94:	cmp	r4, #0
    2a98:	beq	3340 <verify_monster+0x980>
    2a9c:	adds	r4, r5, r4
    2aa0:	beq	3340 <verify_monster+0x980>
    2aa4:	add	r8, sp, #55	; 0x37
    2aa8:	tst	r4, #15
    2aac:	bic	r8, r8, #15
    2ab0:	bne	2b74 <verify_monster+0x1b4>
    2ab4:	vldr	s15, [pc, #520]	; 2cc4 <verify_monster+0x304>
    2ab8:	vldr	s14, [r4, #8]
    2abc:	vcmp.f32	s14, s15
    2ac0:	vmrs	APSR_nzcv, fpscr
    2ac4:	bne	32f0 <verify_monster+0x930>
    2ac8:	vldr	s14, [pc, #504]	; 2cc8 <verify_monster+0x308>
    2acc:	vldr	s13, [r4]
    2ad0:	vcmp.f32	s13, s14
    2ad4:	vmrs	APSR_nzcv, fpscr
    2ad8:	bne	2fd8 <verify_monster+0x618>
    2adc:	vldr	s13, [pc, #488]	; 2ccc <verify_monster+0x30c>
    2ae0:	vldr	s12, [r4, #4]
    2ae4:	vcmp.f32	s12, s13
    2ae8:	vmrs	APSR_nzcv, fpscr
    2aec:	bne	2fd8 <verify_monster+0x618>
    2af0:	vldr	d5, [r4, #16]
    2af4:	mov	r3, #0
    2af8:	vstr	s14, [r8]
    2afc:	ldrb	r1, [r4, #24]
    2b00:	vstr	s13, [r8, #4]
    2b04:	ldrh	r2, [r4, #26]
    2b08:	str	r3, [r8, #12]
    2b0c:	vcmp.f64	d5, #0.0
    2b10:	str	r3, [r8, #24]
    2b14:	str	r3, [r8, #28]
    2b18:	ldrb	r3, [r4, #28]
    2b1c:	vstr	s15, [r8, #8]
    2b20:	vstr	d5, [r8, #16]
    2b24:	strb	r1, [r8, #24]
    2b28:	strh	r2, [r8, #26]
    2b2c:	vmrs	APSR_nzcv, fpscr
    2b30:	strb	r3, [r8, #28]
    2b34:	bne	2b4c <verify_monster+0x18c>
    2b38:	ldrb	r2, [r6, #1108]	; 0x454
    2b3c:	ldrb	r1, [r4, #26]
    2b40:	ldr	r0, [pc, #396]	; 2cd4 <verify_monster+0x314>
    2b44:	cmp	r1, r2
    2b48:	beq	2b84 <verify_monster+0x1c4>
    2b4c:	movw	r0, #0
    2b50:	movt	r0, #0
    2b54:	bl	0 <puts>
    2b58:	mvn	r0, #0
    2b5c:	b	2a3c <verify_monster+0x7c>
    2b60:	movw	r0, #0
    2b64:	movt	r0, #0
    2b68:	bl	0 <puts>
    2b6c:	mvn	r0, #0
    2b70:	b	2a3c <verify_monster+0x7c>
    2b74:	movw	r0, #0
    2b78:	movt	r0, #0
    2b7c:	bl	0 <puts>
    2b80:	b	2ab4 <verify_monster+0xf4>
    2b84:	ldrb	r1, [r4, #27]
    2b88:	add	ip, r0, #1
    2b8c:	ldrb	r2, [r0, #1]
    2b90:	cmp	r1, r2
    2b94:	bne	2b4c <verify_monster+0x18c>
    2b98:	ldrb	r2, [ip, #1]!
    2b9c:	cmp	r3, r2
    2ba0:	bne	2b4c <verify_monster+0x18c>
    2ba4:	ldrb	r2, [r4, #29]
    2ba8:	ldrb	r3, [ip, #1]
    2bac:	cmp	r2, r3
    2bb0:	bne	2b4c <verify_monster+0x18c>
    2bb4:	mov	r0, r5
    2bb8:	bl	514 <MyGame_Example_Monster_name>
    2bbc:	subs	r4, r0, #0
    2bc0:	beq	30f4 <verify_monster+0x734>
    2bc4:	movw	r1, #0
    2bc8:	movt	r1, #0
    2bcc:	bl	0 <strcmp>
    2bd0:	cmp	r0, #0
    2bd4:	bne	30f4 <verify_monster+0x734>
    2bd8:	ldr	r3, [r4, #-4]
    2bdc:	cmp	r3, #9
    2be0:	bne	30b8 <verify_monster+0x6f8>
    2be4:	ldr	r6, [r7, r9]
    2be8:	sub	r6, r5, r6
    2bec:	ldrh	r4, [r6]
    2bf0:	cmp	r4, #17
    2bf4:	bls	30cc <verify_monster+0x70c>
    2bf8:	ldrh	r3, [r6, #16]
    2bfc:	cmp	r3, #0
    2c00:	beq	30cc <verify_monster+0x70c>
    2c04:	ldrsb	r3, [r5, r3]
    2c08:	cmp	r3, #2
    2c0c:	bne	30cc <verify_monster+0x70c>
    2c10:	ldrh	r3, [r6, #14]
    2c14:	cmp	r3, #0
    2c18:	beq	2c9c <verify_monster+0x2dc>
    2c1c:	ldr	r2, [r5, r3]
    2c20:	add	r3, r5, r3
    2c24:	add	r2, r2, #4
    2c28:	adds	r3, r3, r2
    2c2c:	beq	2c9c <verify_monster+0x2dc>
    2c30:	ldr	r2, [r3, #-4]
    2c34:	cmp	r2, #10
    2c38:	subeq	r3, r3, #1
    2c3c:	moveq	r1, #0
    2c40:	bne	2c9c <verify_monster+0x2dc>
    2c44:	ldrb	r2, [r3, #1]!
    2c48:	cmp	r2, r1
    2c4c:	bne	2cb0 <verify_monster+0x2f0>
    2c50:	add	r1, r1, #1
    2c54:	cmp	r1, #10
    2c58:	bne	2c44 <verify_monster+0x284>
    2c5c:	ldrh	r1, [r6, #6]
    2c60:	cmp	r1, #0
    2c64:	beq	2ce0 <verify_monster+0x320>
    2c68:	ldrsh	r3, [r5, r1]
    2c6c:	cmp	r3, #150	; 0x96
    2c70:	bne	3108 <verify_monster+0x748>
    2c74:	movw	r0, #0
    2c78:	movt	r0, #0
    2c7c:	bl	0 <puts>
    2c80:	mvn	r0, #0
    2c84:	b	2a3c <verify_monster+0x7c>
    2c88:	movw	r0, #0
    2c8c:	movt	r0, #0
    2c90:	bl	0 <puts>
    2c94:	mvn	r0, #0
    2c98:	b	2a3c <verify_monster+0x7c>
    2c9c:	movw	r0, #0
    2ca0:	movt	r0, #0
    2ca4:	bl	0 <puts>
    2ca8:	mvn	r0, #0
    2cac:	b	2a3c <verify_monster+0x7c>
    2cb0:	movw	r0, #0
    2cb4:	movt	r0, #0
    2cb8:	bl	0 <printf>
    2cbc:	mvn	r0, #0
    2cc0:	b	2a3c <verify_monster+0x7c>
    2cc4:	.word	0xc04ccccd
    2cc8:	.word	0x3f800000
    2ccc:	.word	0x40000000
    2cd0:	.word	0x00000444
    2cd4:	.word	0x00000454
    2cd8:	.word	0x000004b8
    2cdc:	.word	0x000004cc
    2ce0:	ldrh	r3, [r6, #8]
    2ce4:	cmp	r3, #0
    2ce8:	beq	3318 <verify_monster+0x958>
    2cec:	ldrh	r3, [r6, #4]
    2cf0:	cmp	r3, #0
    2cf4:	beq	3304 <verify_monster+0x944>
    2cf8:	cmp	r4, #23
    2cfc:	bls	2f88 <verify_monster+0x5c8>
    2d00:	ldrh	r3, [r6, #22]
    2d04:	cmp	r3, #0
    2d08:	beq	2f88 <verify_monster+0x5c8>
    2d0c:	ldr	r2, [r5, r3]
    2d10:	add	r3, r5, r3
    2d14:	add	r2, r2, #4
    2d18:	adds	r3, r3, r2
    2d1c:	beq	2f88 <verify_monster+0x5c8>
    2d20:	ldr	r2, [r3, #-4]
    2d24:	cmp	r2, #5
    2d28:	addeq	r2, sp, #20
    2d2c:	bne	2f88 <verify_monster+0x5c8>
    2d30:	cmp	r3, #0
    2d34:	ldrsh	r0, [r2]
    2d38:	beq	2f74 <verify_monster+0x5b4>
    2d3c:	ldrsh	ip, [r3]
    2d40:	cmp	ip, r0
    2d44:	bne	2f9c <verify_monster+0x5dc>
    2d48:	ldrsb	ip, [r2, #2]
    2d4c:	ldrsb	r0, [r3, #2]
    2d50:	cmp	r0, ip
    2d54:	bne	2f9c <verify_monster+0x5dc>
    2d58:	add	r1, r1, #1
    2d5c:	add	r2, r2, #4
    2d60:	cmp	r1, #5
    2d64:	add	r3, r3, #4
    2d68:	bne	2d30 <verify_monster+0x370>
    2d6c:	cmp	r4, #27
    2d70:	bls	2fb0 <verify_monster+0x5f0>
    2d74:	ldrh	r9, [r6, #26]
    2d78:	cmp	r9, #0
    2d7c:	beq	2fb0 <verify_monster+0x5f0>
    2d80:	ldr	sl, [r5, r9]
    2d84:	add	r9, r5, r9
    2d88:	add	sl, sl, #4
    2d8c:	adds	r7, r9, sl
    2d90:	beq	2fb0 <verify_monster+0x5f0>
    2d94:	ldr	r3, [r7, #-4]
    2d98:	cmp	r3, #8
    2d9c:	bne	2fb0 <verify_monster+0x5f0>
    2da0:	ldr	r8, [r7, #20]
    2da4:	add	r8, r8, #20
    2da8:	adds	r8, r7, r8
    2dac:	beq	34b0 <verify_monster+0xaf0>
    2db0:	mov	r0, r8
    2db4:	bl	514 <MyGame_Example_Monster_name>
    2db8:	movw	r1, #0
    2dbc:	movt	r1, #0
    2dc0:	bl	0 <strcmp>
    2dc4:	cmp	r0, #0
    2dc8:	bne	33fc <verify_monster+0xa3c>
    2dcc:	ldr	r3, [r7, #4]
    2dd0:	add	r3, r3, #4
    2dd4:	add	r3, r7, r3
    2dd8:	cmp	r8, r3
    2ddc:	bne	332c <verify_monster+0x96c>
    2de0:	mov	r0, r8
    2de4:	bl	514 <MyGame_Example_Monster_name>
    2de8:	movw	r1, #0
    2dec:	movt	r1, #0
    2df0:	mov	r8, r0
    2df4:	bl	0 <strcmp>
    2df8:	cmp	r0, #0
    2dfc:	bne	339c <verify_monster+0x9dc>
    2e00:	ldr	r0, [r7, #8]
    2e04:	add	r0, r0, #8
    2e08:	add	r0, r7, r0
    2e0c:	bl	514 <MyGame_Example_Monster_name>
    2e10:	movw	r1, #0
    2e14:	movt	r1, #0
    2e18:	mov	r8, r0
    2e1c:	bl	0 <strcmp>
    2e20:	cmp	r0, #0
    2e24:	bne	3384 <verify_monster+0x9c4>
    2e28:	ldr	r0, [r9, sl]
    2e2c:	add	r0, r7, r0
    2e30:	bl	514 <MyGame_Example_Monster_name>
    2e34:	movw	r1, #0
    2e38:	movt	r1, #0
    2e3c:	mov	r8, r0
    2e40:	bl	0 <strcmp>
    2e44:	cmp	r0, #0
    2e48:	bne	336c <verify_monster+0x9ac>
    2e4c:	ldr	r0, [r7, #12]
    2e50:	add	r0, r0, #12
    2e54:	add	r0, r7, r0
    2e58:	bl	514 <MyGame_Example_Monster_name>
    2e5c:	movw	r1, #0
    2e60:	movt	r1, #0
    2e64:	mov	r8, r0
    2e68:	bl	0 <strcmp>
    2e6c:	cmp	r0, #0
    2e70:	bne	3354 <verify_monster+0x994>
    2e74:	ldr	r0, [r7, #16]
    2e78:	add	r0, r0, #16
    2e7c:	add	r0, r7, r0
    2e80:	bl	514 <MyGame_Example_Monster_name>
    2e84:	movw	r1, #0
    2e88:	movt	r1, #0
    2e8c:	mov	r8, r0
    2e90:	bl	0 <strcmp>
    2e94:	cmp	r0, #0
    2e98:	bne	33e4 <verify_monster+0xa24>
    2e9c:	ldr	r0, [r7, #24]
    2ea0:	add	r0, r0, #24
    2ea4:	add	r0, r7, r0
    2ea8:	bl	514 <MyGame_Example_Monster_name>
    2eac:	movw	r1, #0
    2eb0:	movt	r1, #0
    2eb4:	mov	r8, r0
    2eb8:	bl	0 <strcmp>
    2ebc:	cmp	r0, #0
    2ec0:	bne	33cc <verify_monster+0xa0c>
    2ec4:	ldr	r0, [r7, #28]
    2ec8:	add	r0, r0, #28
    2ecc:	add	r0, r7, r0
    2ed0:	bl	514 <MyGame_Example_Monster_name>
    2ed4:	movw	r1, #0
    2ed8:	movt	r1, #0
    2edc:	mov	r7, r0
    2ee0:	bl	0 <strcmp>
    2ee4:	cmp	r0, #0
    2ee8:	bne	33b4 <verify_monster+0x9f4>
    2eec:	ldrh	r3, [r6, #24]
    2ef0:	cmp	r3, #0
    2ef4:	beq	2fc4 <verify_monster+0x604>
    2ef8:	ldr	r2, [r5, r3]
    2efc:	add	r3, r5, r3
    2f00:	add	r2, r2, #4
    2f04:	adds	r7, r3, r2
    2f08:	beq	2fc4 <verify_monster+0x604>
    2f0c:	ldr	r1, [r7, #-4]
    2f10:	cmp	r1, #3
    2f14:	bne	2fc4 <verify_monster+0x604>
    2f18:	ldr	r0, [r3, r2]
    2f1c:	movw	r1, #0
    2f20:	movt	r1, #0
    2f24:	add	r0, r0, #4
    2f28:	add	r0, r7, r0
    2f2c:	bl	0 <strcmp>
    2f30:	cmp	r0, #0
    2f34:	bne	3424 <verify_monster+0xa64>
    2f38:	ldr	r3, [r7, #4]
    2f3c:	add	r3, r3, #8
    2f40:	adds	r2, r7, r3
    2f44:	beq	2fec <verify_monster+0x62c>
    2f48:	ldr	r1, [r2, #-4]
    2f4c:	cmp	r1, #2
    2f50:	bne	2fec <verify_monster+0x62c>
    2f54:	ldrb	r3, [r7, r3]
    2f58:	cmp	r3, #44	; 0x2c
    2f5c:	beq	3000 <verify_monster+0x640>
    2f60:	movw	r0, #0
    2f64:	movt	r0, #0
    2f68:	bl	0 <puts>
    2f6c:	mvn	r0, #0
    2f70:	b	2a3c <verify_monster+0x7c>
    2f74:	cmp	r0, #0
    2f78:	bne	2f9c <verify_monster+0x5dc>
    2f7c:	ldrsb	ip, [r2, #2]
    2f80:	mov	r0, r3
    2f84:	b	2d50 <verify_monster+0x390>
    2f88:	movw	r0, #0
    2f8c:	movt	r0, #0
    2f90:	bl	0 <puts>
    2f94:	mvn	r0, #0
    2f98:	b	2a3c <verify_monster+0x7c>
    2f9c:	movw	r0, #0
    2fa0:	movt	r0, #0
    2fa4:	bl	0 <printf>
    2fa8:	mvn	r0, #0
    2fac:	b	2a3c <verify_monster+0x7c>
    2fb0:	movw	r0, #0
    2fb4:	movt	r0, #0
    2fb8:	bl	0 <puts>
    2fbc:	mvn	r0, #0
    2fc0:	b	2a3c <verify_monster+0x7c>
    2fc4:	movw	r0, #0
    2fc8:	movt	r0, #0
    2fcc:	bl	0 <puts>
    2fd0:	mvn	r0, #0
    2fd4:	b	2a3c <verify_monster+0x7c>
    2fd8:	movw	r0, #0
    2fdc:	movt	r0, #0
    2fe0:	bl	0 <puts>
    2fe4:	mvn	r0, #0
    2fe8:	b	2a3c <verify_monster+0x7c>
    2fec:	movw	r0, #0
    2ff0:	movt	r0, #0
    2ff4:	bl	0 <printf>
    2ff8:	mvn	r0, #0
    2ffc:	b	2a3c <verify_monster+0x7c>
    3000:	ldrb	r3, [r2, #1]
    3004:	cmp	r3, #0
    3008:	bne	2f60 <verify_monster+0x5a0>
    300c:	ldr	r0, [r7, #8]
    3010:	movw	r1, #0
    3014:	movt	r1, #0
    3018:	add	r0, r0, #12
    301c:	add	r0, r7, r0
    3020:	bl	0 <strcmp>
    3024:	subs	r1, r0, #0
    3028:	bne	3410 <verify_monster+0xa50>
    302c:	cmp	r4, #53	; 0x35
    3030:	bhi	3048 <verify_monster+0x688>
    3034:	movw	r0, #0
    3038:	movt	r0, #0
    303c:	bl	0 <puts>
    3040:	mvn	r0, #0
    3044:	b	2a3c <verify_monster+0x7c>
    3048:	ldrh	r3, [r6, #52]	; 0x34
    304c:	cmp	r3, #0
    3050:	beq	3034 <verify_monster+0x674>
    3054:	ldr	r2, [r5, r3]
    3058:	add	r3, r5, r3
    305c:	add	r2, r2, #4
    3060:	adds	r3, r3, r2
    3064:	beq	30e0 <verify_monster+0x720>
    3068:	ldr	r2, [r3, #-4]
    306c:	cmp	r2, #4
    3070:	subeq	r3, r3, #1
    3074:	addeq	r2, sp, #4
    3078:	bne	30e0 <verify_monster+0x720>
    307c:	ldrb	ip, [r3, #1]!
    3080:	ldr	r0, [r2], #4
    3084:	cmp	ip, r0
    3088:	bne	3258 <verify_monster+0x898>
    308c:	add	r1, r1, #1
    3090:	cmp	r1, #4
    3094:	bne	307c <verify_monster+0x6bc>
    3098:	ldrh	r3, [r6, #18]
    309c:	cmp	r3, #0
    30a0:	bne	311c <verify_monster+0x75c>
    30a4:	movw	r0, #0
    30a8:	movt	r0, #0
    30ac:	bl	0 <puts>
    30b0:	mvn	r0, #0
    30b4:	b	2a3c <verify_monster+0x7c>
    30b8:	movw	r0, #0
    30bc:	movt	r0, #0
    30c0:	bl	0 <puts>
    30c4:	mvn	r0, #0
    30c8:	b	2a3c <verify_monster+0x7c>
    30cc:	movw	r0, #0
    30d0:	movt	r0, #0
    30d4:	bl	0 <puts>
    30d8:	mvn	r0, #0
    30dc:	b	2a3c <verify_monster+0x7c>
    30e0:	movw	r0, #0
    30e4:	movt	r0, #0
    30e8:	bl	0 <puts>
    30ec:	mvn	r0, #0
    30f0:	b	2a3c <verify_monster+0x7c>
    30f4:	movw	r0, #0
    30f8:	movt	r0, #0
    30fc:	bl	0 <puts>
    3100:	mvn	r0, #0
    3104:	b	2a3c <verify_monster+0x7c>
    3108:	movw	r0, #0
    310c:	movt	r0, #0
    3110:	bl	0 <puts>
    3114:	mvn	r0, #0
    3118:	b	2a3c <verify_monster+0x7c>
    311c:	ldrb	r3, [r5, r3]
    3120:	cmp	r3, #1
    3124:	bne	30a4 <verify_monster+0x6e4>
    3128:	mov	r0, r5
    312c:	bl	4a0 <MyGame_Example_Monster_test>
    3130:	bl	514 <MyGame_Example_Monster_name>
    3134:	movw	r1, #0
    3138:	movt	r1, #0
    313c:	bl	0 <strcmp>
    3140:	cmp	r0, #0
    3144:	bne	344c <verify_monster+0xa8c>
    3148:	ldrh	r4, [r6, #28]
    314c:	cmp	r4, #0
    3150:	beq	3160 <verify_monster+0x7a0>
    3154:	ldr	r3, [r5, r4]
    3158:	add	r4, r5, r4
    315c:	add	r4, r4, r3
    3160:	mov	r0, r4
    3164:	bl	514 <MyGame_Example_Monster_name>
    3168:	movw	r1, #0
    316c:	movt	r1, #0
    3170:	bl	0 <strcmp>
    3174:	cmp	r0, #0
    3178:	bne	3474 <verify_monster+0xab4>
    317c:	mov	r0, r4
    3180:	bl	438 <MyGame_Example_Monster_test_type>
    3184:	cmp	r0, #0
    3188:	bne	3460 <verify_monster+0xaa0>
    318c:	mov	r0, r5
    3190:	bl	438 <MyGame_Example_Monster_test_type>
    3194:	cmp	r0, #1
    3198:	beq	31b0 <verify_monster+0x7f0>
    319c:	movw	r0, #0
    31a0:	movt	r0, #0
    31a4:	bl	0 <puts>
    31a8:	mvn	r0, #0
    31ac:	b	2a3c <verify_monster+0x7c>
    31b0:	cmp	r4, #0
    31b4:	beq	34ec <verify_monster+0xb2c>
    31b8:	ldr	r3, [r4]
    31bc:	sub	r3, r4, r3
    31c0:	ldrh	r2, [r3]
    31c4:	cmp	r2, #27
    31c8:	bls	34e8 <verify_monster+0xb28>
    31cc:	ldrh	r3, [r3, #26]
    31d0:	cmp	r3, #0
    31d4:	beq	34e8 <verify_monster+0xb28>
    31d8:	ldr	r2, [r4, r3]
    31dc:	add	r3, r4, r3
    31e0:	add	r2, r2, #4
    31e4:	adds	r3, r3, r2
    31e8:	beq	34e8 <verify_monster+0xb28>
    31ec:	ldr	r2, [r3, #-4]
    31f0:	mvn	r4, #0
    31f4:	adds	r2, r2, r4
    31f8:	add	r7, r3, r2, lsl #2
    31fc:	bcc	34e8 <verify_monster+0xb28>
    3200:	ldr	r3, [r3, r2, lsl #2]
    3204:	add	r7, r7, r3
    3208:	mov	r0, r7
    320c:	bl	438 <MyGame_Example_Monster_test_type>
    3210:	cmp	r0, #1
    3214:	bne	349c <verify_monster+0xadc>
    3218:	mov	r0, r7
    321c:	bl	4a0 <MyGame_Example_Monster_test>
    3220:	bl	514 <MyGame_Example_Monster_name>
    3224:	movw	r1, #0
    3228:	movt	r1, #0
    322c:	bl	0 <strcmp>
    3230:	cmp	r0, #0
    3234:	bne	3488 <verify_monster+0xac8>
    3238:	ldrh	r3, [r6, #34]	; 0x22
    323c:	cmp	r3, #0
    3240:	bne	326c <verify_monster+0x8ac>
    3244:	movw	r0, #0
    3248:	movt	r0, #0
    324c:	bl	0 <puts>
    3250:	mvn	r0, #0
    3254:	b	2a3c <verify_monster+0x7c>
    3258:	movw	r0, #0
    325c:	movt	r0, #0
    3260:	bl	0 <printf>
    3264:	mvn	r0, #0
    3268:	b	2a3c <verify_monster+0x7c>
    326c:	ldrb	r3, [r5, r3]
    3270:	cmp	r3, #0
    3274:	bne	3244 <verify_monster+0x884>
    3278:	ldrh	r3, [r6, #32]
    327c:	cmp	r3, #0
    3280:	beq	3438 <verify_monster+0xa78>
    3284:	ldr	r2, [r5, r3]
    3288:	add	r5, r5, r3
    328c:	adds	r3, r5, r2
    3290:	beq	34cc <verify_monster+0xb0c>
    3294:	ldr	r2, [r5, r2]
    3298:	sub	r3, r3, r2
    329c:	ldrh	r2, [r3]
    32a0:	cmp	r2, #5
    32a4:	bls	2a3c <verify_monster+0x7c>
    32a8:	ldrh	r1, [r3, #4]
    32ac:	cmp	r1, #0
    32b0:	bne	32dc <verify_monster+0x91c>
    32b4:	cmp	r2, #7
    32b8:	bls	2a3c <verify_monster+0x7c>
    32bc:	ldrh	r1, [r3, #6]
    32c0:	cmp	r1, #0
    32c4:	bne	32dc <verify_monster+0x91c>
    32c8:	cmp	r2, #9
    32cc:	bls	2a3c <verify_monster+0x7c>
    32d0:	ldrh	r3, [r3, #8]
    32d4:	cmp	r3, #0
    32d8:	beq	2a3c <verify_monster+0x7c>
    32dc:	movw	r0, #0
    32e0:	movt	r0, #0
    32e4:	bl	0 <puts>
    32e8:	mvn	r0, #0
    32ec:	b	2a3c <verify_monster+0x7c>
    32f0:	movw	r0, #0
    32f4:	movt	r0, #0
    32f8:	bl	0 <puts>
    32fc:	mvn	r0, #0
    3300:	b	2a3c <verify_monster+0x7c>
    3304:	movw	r0, #0
    3308:	movt	r0, #0
    330c:	bl	0 <puts>
    3310:	mvn	r0, #0
    3314:	b	2a3c <verify_monster+0x7c>
    3318:	movw	r0, #0
    331c:	movt	r0, #0
    3320:	bl	0 <puts>
    3324:	mvn	r0, #0
    3328:	b	2a3c <verify_monster+0x7c>
    332c:	movw	r0, #0
    3330:	movt	r0, #0
    3334:	bl	0 <puts>
    3338:	mvn	r0, #0
    333c:	b	2a3c <verify_monster+0x7c>
    3340:	movw	r0, #0
    3344:	movt	r0, #0
    3348:	bl	0 <puts>
    334c:	mvn	r0, #0
    3350:	b	2a3c <verify_monster+0x7c>
    3354:	mov	r1, r8
    3358:	movw	r0, #0
    335c:	movt	r0, #0
    3360:	bl	0 <printf>
    3364:	mvn	r0, #0
    3368:	b	2a3c <verify_monster+0x7c>
    336c:	mov	r1, r8
    3370:	movw	r0, #0
    3374:	movt	r0, #0
    3378:	bl	0 <printf>
    337c:	mvn	r0, #0
    3380:	b	2a3c <verify_monster+0x7c>
    3384:	mov	r1, r8
    3388:	movw	r0, #0
    338c:	movt	r0, #0
    3390:	bl	0 <printf>
    3394:	mvn	r0, #0
    3398:	b	2a3c <verify_monster+0x7c>
    339c:	mov	r1, r8
    33a0:	movw	r0, #0
    33a4:	movt	r0, #0
    33a8:	bl	0 <printf>
    33ac:	mvn	r0, #0
    33b0:	b	2a3c <verify_monster+0x7c>
    33b4:	mov	r1, r7
    33b8:	movw	r0, #0
    33bc:	movt	r0, #0
    33c0:	bl	0 <printf>
    33c4:	mvn	r0, #0
    33c8:	b	2a3c <verify_monster+0x7c>
    33cc:	mov	r1, r8
    33d0:	movw	r0, #0
    33d4:	movt	r0, #0
    33d8:	bl	0 <printf>
    33dc:	mvn	r0, #0
    33e0:	b	2a3c <verify_monster+0x7c>
    33e4:	mov	r1, r8
    33e8:	movw	r0, #0
    33ec:	movt	r0, #0
    33f0:	bl	0 <printf>
    33f4:	mvn	r0, #0
    33f8:	b	2a3c <verify_monster+0x7c>
    33fc:	movw	r0, #0
    3400:	movt	r0, #0
    3404:	bl	0 <printf>
    3408:	mvn	r0, #0
    340c:	b	2a3c <verify_monster+0x7c>
    3410:	movw	r0, #0
    3414:	movt	r0, #0
    3418:	bl	0 <puts>
    341c:	mvn	r0, #0
    3420:	b	2a3c <verify_monster+0x7c>
    3424:	movw	r0, #0
    3428:	movt	r0, #0
    342c:	bl	0 <puts>
    3430:	mvn	r0, #0
    3434:	b	2a3c <verify_monster+0x7c>
    3438:	movw	r0, #0
    343c:	movt	r0, #0
    3440:	bl	0 <puts>
    3444:	mvn	r0, #0
    3448:	b	2a3c <verify_monster+0x7c>
    344c:	movw	r0, #0
    3450:	movt	r0, #0
    3454:	bl	0 <puts>
    3458:	mvn	r0, #0
    345c:	b	2a3c <verify_monster+0x7c>
    3460:	movw	r0, #0
    3464:	movt	r0, #0
    3468:	bl	0 <puts>
    346c:	mvn	r0, #0
    3470:	b	2a3c <verify_monster+0x7c>
    3474:	movw	r0, #0
    3478:	movt	r0, #0
    347c:	bl	0 <puts>
    3480:	mvn	r0, #0
    3484:	b	2a3c <verify_monster+0x7c>
    3488:	movw	r0, #0
    348c:	movt	r0, #0
    3490:	bl	0 <puts>
    3494:	mvn	r0, #0
    3498:	b	2a3c <verify_monster+0x7c>
    349c:	movw	r0, #0
    34a0:	movt	r0, #0
    34a4:	bl	0 <puts>
    34a8:	mov	r0, r4
    34ac:	b	2a3c <verify_monster+0x7c>
    34b0:	movw	r1, #0
    34b4:	movt	r1, #0
    34b8:	ldr	r3, [pc, #-2024]	; 2cd8 <verify_monster+0x318>
    34bc:	movw	r0, #0
    34c0:	movt	r0, #0
    34c4:	movw	r2, #662	; 0x296
    34c8:	bl	0 <__assert_fail>
    34cc:	movw	r1, #0
    34d0:	movt	r1, #0
    34d4:	ldr	r3, [pc, #-2048]	; 2cdc <verify_monster+0x31c>
    34d8:	movw	r0, #0
    34dc:	movt	r0, #0
    34e0:	movw	r2, #607	; 0x25f
    34e4:	bl	0 <__assert_fail>
    34e8:	bl	3e8 <MyGame_Example_Monster_vec_at.part.23>
    34ec:	bl	3c0 <MyGame_Example_Monster_testarrayoftables.part.22>

000034f0 <gen_monster>:
    34f0:	ldr	r2, [pc, #2504]	; 3ec0 <gen_monster+0x9d0>
    34f4:	strd	r4, [sp, #-20]!	; 0xffffffec
    34f8:	mov	r5, r1
    34fc:	mov	r1, #256	; 0x100
    3500:	movt	r1, #1
    3504:	strd	r6, [sp, #8]
    3508:	mov	r4, r0
    350c:	str	lr, [sp, #16]
    3510:	sub	sp, sp, #52	; 0x34
    3514:	ldrh	r3, [r2, #8]
    3518:	str	r1, [sp, #12]
    351c:	ldrd	r6, [r2]
    3520:	strd	r6, [sp, #24]
    3524:	strh	r3, [sp, #32]
    3528:	bl	0 <flatcc_builder_reset>
    352c:	cmp	r5, #0
    3530:	movw	r1, #0
    3534:	movt	r1, #0
    3538:	moveq	r3, r5
    353c:	movne	r3, #2
    3540:	mov	r2, #0
    3544:	mov	r0, r4
    3548:	bl	0 <flatcc_builder_start_buffer>
    354c:	cmp	r0, #0
    3550:	bne	3560 <gen_monster+0x70>
    3554:	mov	r1, #36	; 0x24
    3558:	mov	r0, r4
    355c:	bl	0 <flatcc_builder_start_table>
    3560:	mov	r3, #2
    3564:	mov	r0, r4
    3568:	mov	r2, r3
    356c:	mov	r1, r3
    3570:	bl	0 <flatcc_builder_table_add>
    3574:	cmp	r0, #0
    3578:	mov	r2, #32
    357c:	movne	r3, #80	; 0x50
    3580:	mov	r1, #0
    3584:	strhne	r3, [r0]
    3588:	mov	r3, #16
    358c:	mov	r0, r4
    3590:	bl	0 <flatcc_builder_table_add>
    3594:	mov	r3, r0
    3598:	mov	lr, #1065353216	; 0x3f800000
    359c:	mov	ip, #1073741824	; 0x40000000
    35a0:	movw	r2, #52429	; 0xcccd
    35a4:	movt	r2, #49228	; 0xc04c
    35a8:	movw	r1, #0
    35ac:	movt	r1, #0
    35b0:	mov	r0, r4
    35b4:	str	lr, [r3]
    35b8:	str	ip, [r3, #4]
    35bc:	str	r2, [r3, #8]
    35c0:	bl	0 <flatcc_builder_create_string_str>
    35c4:	subs	r5, r0, #0
    35c8:	beq	35e0 <gen_monster+0xf0>
    35cc:	mov	r1, #3
    35d0:	mov	r0, r4
    35d4:	bl	0 <flatcc_builder_table_add_offset>
    35d8:	cmp	r0, #0
    35dc:	strne	r5, [r0]
    35e0:	mov	r3, #1
    35e4:	mov	r1, #6
    35e8:	mov	r2, r3
    35ec:	mov	r0, r4
    35f0:	bl	0 <flatcc_builder_table_add>
    35f4:	cmp	r0, #0
    35f8:	mov	r2, #1
    35fc:	movne	r3, #2
    3600:	mvn	ip, #0
    3604:	add	r1, sp, #24
    3608:	strbne	r3, [r0]
    360c:	mov	r3, r2
    3610:	mov	r0, r4
    3614:	stm	sp, {r2, ip}
    3618:	mov	r2, #10
    361c:	bl	0 <flatcc_builder_create_vector>
    3620:	subs	r5, r0, #0
    3624:	beq	363c <gen_monster+0x14c>
    3628:	mov	r1, #5
    362c:	mov	r0, r4
    3630:	bl	0 <flatcc_builder_table_add_offset>
    3634:	cmp	r0, #0
    3638:	strne	r5, [r0]
    363c:	mvn	r3, #-1073741824	; 0xc0000000
    3640:	mov	r2, #2
    3644:	mov	r1, #4
    3648:	mov	r0, r4
    364c:	bl	0 <flatcc_builder_start_vector>
    3650:	mov	r1, #1
    3654:	mov	r0, r4
    3658:	bl	0 <flatcc_builder_extend_vector>
    365c:	mov	r3, r0
    3660:	mov	r2, #32
    3664:	mov	r0, #16
    3668:	mov	r1, #2
    366c:	strh	r0, [r3]
    3670:	mov	r0, r4
    3674:	strb	r2, [r3, #2]
    3678:	bl	0 <flatcc_builder_extend_vector>
    367c:	mov	r3, r0
    3680:	mov	r1, #48	; 0x30
    3684:	mov	r0, #64	; 0x40
    3688:	mov	ip, #80	; 0x50
    368c:	mov	r2, #96	; 0x60
    3690:	strh	r1, [r3]
    3694:	mov	r1, #1
    3698:	strb	r0, [r3, #2]
    369c:	mov	r0, r4
    36a0:	strh	ip, [r3, #4]
    36a4:	strb	r2, [r3, #6]
    36a8:	bl	0 <flatcc_builder_extend_vector>
    36ac:	cmp	r0, #0
    36b0:	beq	36c4 <gen_monster+0x1d4>
    36b4:	mov	r2, #112	; 0x70
    36b8:	mvn	r3, #127	; 0x7f
    36bc:	strh	r2, [r0]
    36c0:	strb	r3, [r0, #2]
    36c4:	mvn	r3, #110	; 0x6e
    36c8:	mov	r2, #400	; 0x190
    36cc:	mov	r1, #1
    36d0:	mov	r0, r4
    36d4:	strh	r2, [sp, #8]
    36d8:	strb	r3, [sp, #10]
    36dc:	bl	0 <flatcc_builder_extend_vector>
    36e0:	cmp	r0, #0
    36e4:	mov	r1, #1
    36e8:	ldrne	r3, [sp, #8]
    36ec:	strne	r3, [r0]
    36f0:	mov	r0, r4
    36f4:	bl	0 <flatcc_builder_extend_vector>
    36f8:	cmp	r0, #0
    36fc:	mov	r1, #1
    3700:	ldrne	r3, [sp, #8]
    3704:	strne	r3, [r0]
    3708:	mov	r0, r4
    370c:	bl	0 <flatcc_builder_extend_vector>
    3710:	cmp	r0, #0
    3714:	ldrne	r3, [sp, #8]
    3718:	strne	r3, [r0]
    371c:	mov	r0, r4
    3720:	bl	0 <flatcc_builder_vector_count>
    3724:	cmp	r0, #7
    3728:	bne	3e98 <gen_monster+0x9a8>
    372c:	mov	r1, #2
    3730:	mov	r0, r4
    3734:	bl	0 <flatcc_builder_truncate_vector>
    3738:	mov	r0, r4
    373c:	bl	0 <flatcc_builder_vector_count>
    3740:	cmp	r0, #5
    3744:	bne	3e7c <gen_monster+0x98c>
    3748:	mov	r0, r4
    374c:	bl	0 <flatcc_builder_vector_edit>
    3750:	mov	r2, r0
    3754:	mov	r0, r4
    3758:	ldrh	r3, [r2, #16]
    375c:	add	r3, r3, #1
    3760:	strh	r3, [r2, #16]
    3764:	bl	0 <flatcc_builder_end_vector>
    3768:	subs	r5, r0, #0
    376c:	beq	3784 <gen_monster+0x294>
    3770:	mov	r1, #9
    3774:	mov	r0, r4
    3778:	bl	0 <flatcc_builder_table_add_offset>
    377c:	cmp	r0, #0
    3780:	strne	r5, [r0]
    3784:	mov	r1, #36	; 0x24
    3788:	mov	r0, r4
    378c:	bl	0 <flatcc_builder_start_table>
    3790:	movw	r1, #0
    3794:	movt	r1, #0
    3798:	mov	r2, #7
    379c:	mov	r0, r4
    37a0:	bl	0 <flatcc_builder_create_string>
    37a4:	subs	r5, r0, #0
    37a8:	beq	37c0 <gen_monster+0x2d0>
    37ac:	mov	r1, #3
    37b0:	mov	r0, r4
    37b4:	bl	0 <flatcc_builder_table_add_offset>
    37b8:	cmp	r0, #0
    37bc:	strne	r5, [r0]
    37c0:	mov	r2, #1
    37c4:	ldr	r1, [pc, #1784]	; 3ec4 <gen_monster+0x9d4>
    37c8:	mov	r0, r4
    37cc:	bl	0 <flatcc_builder_check_required>
    37d0:	cmp	r0, #0
    37d4:	beq	3e28 <gen_monster+0x938>
    37d8:	mov	r0, r4
    37dc:	bl	0 <flatcc_builder_end_table>
    37e0:	mov	r5, r0
    37e4:	mov	r0, r4
    37e8:	bl	0 <flatcc_builder_start_offset_vector>
    37ec:	mov	r1, #2
    37f0:	mov	r0, r4
    37f4:	bl	0 <flatcc_builder_extend_offset_vector>
    37f8:	mov	r3, r0
    37fc:	mov	r1, #36	; 0x24
    3800:	mov	r0, r4
    3804:	str	r5, [r3]
    3808:	str	r5, [r3, #4]
    380c:	bl	0 <flatcc_builder_start_table>
    3810:	movw	r1, #0
    3814:	movt	r1, #0
    3818:	mov	r2, #30
    381c:	mov	r0, r4
    3820:	bl	0 <flatcc_builder_create_string_strn>
    3824:	subs	r6, r0, #0
    3828:	beq	3840 <gen_monster+0x350>
    382c:	mov	r1, #3
    3830:	mov	r0, r4
    3834:	bl	0 <flatcc_builder_table_add_offset>
    3838:	cmp	r0, #0
    383c:	strne	r6, [r0]
    3840:	mov	r2, #1
    3844:	ldr	r1, [pc, #1656]	; 3ec4 <gen_monster+0x9d4>
    3848:	mov	r0, r4
    384c:	bl	0 <flatcc_builder_check_required>
    3850:	cmp	r0, #0
    3854:	beq	3e28 <gen_monster+0x938>
    3858:	mov	r0, r4
    385c:	bl	0 <flatcc_builder_end_table>
    3860:	subs	r1, r0, #0
    3864:	beq	3eb8 <gen_monster+0x9c8>
    3868:	mov	r0, r4
    386c:	bl	0 <flatcc_builder_offset_vector_push>
    3870:	ldr	r6, [r0]
    3874:	mov	r1, #3
    3878:	mov	r0, r4
    387c:	bl	0 <flatcc_builder_extend_offset_vector>
    3880:	mov	r3, r0
    3884:	mov	r1, #1
    3888:	mov	r0, r4
    388c:	stm	r3, {r5, r6}
    3890:	bl	0 <flatcc_builder_truncate_offset_vector>
    3894:	mov	r0, r4
    3898:	bl	0 <flatcc_builder_offset_vector_count>
    389c:	cmp	r0, #5
    38a0:	bne	3e44 <gen_monster+0x954>
    38a4:	mov	r1, #36	; 0x24
    38a8:	mov	r0, r4
    38ac:	bl	0 <flatcc_builder_start_table>
    38b0:	movw	r1, #0
    38b4:	movt	r1, #0
    38b8:	mov	r2, #8
    38bc:	mov	r0, r4
    38c0:	bl	0 <flatcc_builder_create_string_strn>
    38c4:	subs	r6, r0, #0
    38c8:	beq	38e0 <gen_monster+0x3f0>
    38cc:	mov	r1, #3
    38d0:	mov	r0, r4
    38d4:	bl	0 <flatcc_builder_table_add_offset>
    38d8:	cmp	r0, #0
    38dc:	strne	r6, [r0]
    38e0:	mov	r2, #1
    38e4:	ldr	r1, [pc, #1496]	; 3ec4 <gen_monster+0x9d4>
    38e8:	mov	r0, r4
    38ec:	bl	0 <flatcc_builder_check_required>
    38f0:	cmp	r0, #0
    38f4:	beq	3e28 <gen_monster+0x938>
    38f8:	mov	r0, r4
    38fc:	bl	0 <flatcc_builder_end_table>
    3900:	subs	r1, r0, #0
    3904:	beq	3eb8 <gen_monster+0x9c8>
    3908:	mov	r0, r4
    390c:	bl	0 <flatcc_builder_offset_vector_push>
    3910:	ldr	r3, [r0]
    3914:	mov	r0, r4
    3918:	str	r3, [sp, #16]
    391c:	bl	0 <flatcc_builder_offset_vector_count>
    3920:	cmp	r0, #6
    3924:	bne	3e60 <gen_monster+0x970>
    3928:	mov	r0, r4
    392c:	bl	0 <flatcc_builder_offset_vector_edit>
    3930:	mov	r3, r0
    3934:	mov	r2, #2
    3938:	ldr	lr, [r3, #8]
    393c:	add	r1, sp, #16
    3940:	mov	r0, r4
    3944:	ldr	ip, [r3, #20]
    3948:	str	r5, [r3, #20]
    394c:	str	lr, [sp, #20]
    3950:	str	ip, [r3]
    3954:	bl	0 <flatcc_builder_append_offset_vector>
    3958:	mov	r0, r4
    395c:	bl	0 <flatcc_builder_end_offset_vector>
    3960:	subs	r6, r0, #0
    3964:	beq	397c <gen_monster+0x48c>
    3968:	mov	r1, #11
    396c:	mov	r0, r4
    3970:	bl	0 <flatcc_builder_table_add_offset>
    3974:	cmp	r0, #0
    3978:	strne	r6, [r0]
    397c:	movw	r1, #0
    3980:	movt	r1, #0
    3984:	mov	r0, r4
    3988:	bl	0 <flatcc_builder_create_string_str>
    398c:	mov	r2, #2
    3990:	ldr	r1, [pc, #1328]	; 3ec8 <gen_monster+0x9d8>
    3994:	str	r0, [sp, #36]	; 0x24
    3998:	mov	r0, r4
    399c:	bl	0 <flatcc_builder_create_string>
    39a0:	movw	r1, #0
    39a4:	movt	r1, #0
    39a8:	str	r0, [sp, #40]	; 0x28
    39ac:	mov	r0, r4
    39b0:	bl	0 <flatcc_builder_create_string_str>
    39b4:	mov	r2, #3
    39b8:	add	r1, sp, #36	; 0x24
    39bc:	str	r0, [sp, #44]	; 0x2c
    39c0:	mov	r0, r4
    39c4:	bl	0 <flatcc_builder_create_offset_vector>
    39c8:	subs	r6, r0, #0
    39cc:	beq	39e4 <gen_monster+0x4f4>
    39d0:	mov	r1, #10
    39d4:	mov	r0, r4
    39d8:	bl	0 <flatcc_builder_table_add_offset>
    39dc:	cmp	r0, #0
    39e0:	strne	r6, [r0]
    39e4:	mov	r2, #1
    39e8:	mvn	r3, #0
    39ec:	mov	r1, r2
    39f0:	mov	r0, r4
    39f4:	bl	0 <flatcc_builder_start_vector>
    39f8:	mov	r2, #1
    39fc:	add	r1, sp, #12
    3a00:	mov	r0, r4
    3a04:	bl	0 <flatcc_builder_append_vector>
    3a08:	mov	r2, #3
    3a0c:	add	r1, sp, #13
    3a10:	mov	r0, r4
    3a14:	bl	0 <flatcc_builder_append_vector>
    3a18:	mov	r0, r4
    3a1c:	bl	0 <flatcc_builder_end_vector>
    3a20:	subs	r6, r0, #0
    3a24:	beq	3a3c <gen_monster+0x54c>
    3a28:	mov	r1, #24
    3a2c:	mov	r0, r4
    3a30:	bl	0 <flatcc_builder_table_add_offset>
    3a34:	cmp	r0, #0
    3a38:	strne	r6, [r0]
    3a3c:	cmp	r5, #0
    3a40:	beq	3dd4 <gen_monster+0x8e4>
    3a44:	mov	r3, #1
    3a48:	mov	r1, #7
    3a4c:	mov	r2, r3
    3a50:	mov	r0, r4
    3a54:	bl	0 <flatcc_builder_table_add>
    3a58:	subs	r6, r0, #0
    3a5c:	beq	3a80 <gen_monster+0x590>
    3a60:	mov	r1, #8
    3a64:	mov	r0, r4
    3a68:	bl	0 <flatcc_builder_table_add_offset>
    3a6c:	cmp	r0, #0
    3a70:	beq	3a80 <gen_monster+0x590>
    3a74:	mov	r3, #1
    3a78:	strb	r3, [r6]
    3a7c:	str	r5, [r0]
    3a80:	mov	r1, #36	; 0x24
    3a84:	mov	r0, r4
    3a88:	bl	0 <flatcc_builder_start_table>
    3a8c:	movw	r1, #0
    3a90:	movt	r1, #0
    3a94:	mov	r0, r4
    3a98:	bl	0 <flatcc_builder_create_string_str>
    3a9c:	subs	r6, r0, #0
    3aa0:	beq	3dbc <gen_monster+0x8cc>
    3aa4:	mov	r1, #3
    3aa8:	mov	r0, r4
    3aac:	bl	0 <flatcc_builder_table_add_offset>
    3ab0:	subs	r3, r0, #0
    3ab4:	beq	3dbc <gen_monster+0x8cc>
    3ab8:	mov	r0, r4
    3abc:	str	r6, [r3]
    3ac0:	bl	0 <flatcc_builder_start_offset_vector>
    3ac4:	mov	r1, #36	; 0x24
    3ac8:	mov	r0, r4
    3acc:	bl	0 <flatcc_builder_start_table>
    3ad0:	mov	r3, #1
    3ad4:	mov	r1, #7
    3ad8:	mov	r2, r3
    3adc:	mov	r0, r4
    3ae0:	bl	0 <flatcc_builder_table_add>
    3ae4:	subs	r6, r0, #0
    3ae8:	beq	3b0c <gen_monster+0x61c>
    3aec:	mov	r1, #8
    3af0:	mov	r0, r4
    3af4:	bl	0 <flatcc_builder_table_add_offset>
    3af8:	cmp	r0, #0
    3afc:	beq	3b0c <gen_monster+0x61c>
    3b00:	mov	r3, #1
    3b04:	strb	r3, [r6]
    3b08:	str	r5, [r0]
    3b0c:	movw	r1, #0
    3b10:	movt	r1, #0
    3b14:	mov	r0, r4
    3b18:	bl	0 <flatcc_builder_create_string_str>
    3b1c:	subs	r6, r0, #0
    3b20:	beq	3b38 <gen_monster+0x648>
    3b24:	mov	r1, #3
    3b28:	mov	r0, r4
    3b2c:	bl	0 <flatcc_builder_table_add_offset>
    3b30:	cmp	r0, #0
    3b34:	strne	r6, [r0]
    3b38:	mov	r2, #1
    3b3c:	ldr	r1, [pc, #896]	; 3ec4 <gen_monster+0x9d4>
    3b40:	mov	r0, r4
    3b44:	bl	0 <flatcc_builder_check_required>
    3b48:	cmp	r0, #0
    3b4c:	beq	3e28 <gen_monster+0x938>
    3b50:	mov	r0, r4
    3b54:	bl	0 <flatcc_builder_end_table>
    3b58:	subs	r1, r0, #0
    3b5c:	beq	3b68 <gen_monster+0x678>
    3b60:	mov	r0, r4
    3b64:	bl	0 <flatcc_builder_offset_vector_push>
    3b68:	mov	r1, #36	; 0x24
    3b6c:	mov	r0, r4
    3b70:	bl	0 <flatcc_builder_start_table>
    3b74:	cmp	r5, #0
    3b78:	beq	3bb8 <gen_monster+0x6c8>
    3b7c:	mov	r3, #1
    3b80:	mov	r1, #7
    3b84:	mov	r2, r3
    3b88:	mov	r0, r4
    3b8c:	bl	0 <flatcc_builder_table_add>
    3b90:	subs	r6, r0, #0
    3b94:	beq	3bb8 <gen_monster+0x6c8>
    3b98:	mov	r1, #8
    3b9c:	mov	r0, r4
    3ba0:	bl	0 <flatcc_builder_table_add_offset>
    3ba4:	cmp	r0, #0
    3ba8:	beq	3bb8 <gen_monster+0x6c8>
    3bac:	mov	r3, #1
    3bb0:	strb	r3, [r6]
    3bb4:	str	r5, [r0]
    3bb8:	movw	r1, #0
    3bbc:	movt	r1, #0
    3bc0:	mov	r0, r4
    3bc4:	bl	0 <flatcc_builder_create_string_str>
    3bc8:	subs	r6, r0, #0
    3bcc:	beq	3be4 <gen_monster+0x6f4>
    3bd0:	mov	r1, #3
    3bd4:	mov	r0, r4
    3bd8:	bl	0 <flatcc_builder_table_add_offset>
    3bdc:	cmp	r0, #0
    3be0:	strne	r6, [r0]
    3be4:	mov	r2, #1
    3be8:	ldr	r1, [pc, #724]	; 3ec4 <gen_monster+0x9d4>
    3bec:	mov	r0, r4
    3bf0:	bl	0 <flatcc_builder_check_required>
    3bf4:	cmp	r0, #0
    3bf8:	beq	3e28 <gen_monster+0x938>
    3bfc:	mov	r0, r4
    3c00:	bl	0 <flatcc_builder_end_table>
    3c04:	subs	r1, r0, #0
    3c08:	beq	3c14 <gen_monster+0x724>
    3c0c:	mov	r0, r4
    3c10:	bl	0 <flatcc_builder_offset_vector_push>
    3c14:	mov	r1, #36	; 0x24
    3c18:	mov	r0, r4
    3c1c:	bl	0 <flatcc_builder_start_table>
    3c20:	mov	r1, #8
    3c24:	mov	r0, r4
    3c28:	bl	0 <flatcc_builder_table_add_offset>
    3c2c:	cmp	r0, #0
    3c30:	movw	r1, #0
    3c34:	movt	r1, #0
    3c38:	strne	r5, [r0]
    3c3c:	mov	r0, r4
    3c40:	bl	0 <flatcc_builder_create_string_str>
    3c44:	subs	r5, r0, #0
    3c48:	beq	3c60 <gen_monster+0x770>
    3c4c:	mov	r1, #3
    3c50:	mov	r0, r4
    3c54:	bl	0 <flatcc_builder_table_add_offset>
    3c58:	cmp	r0, #0
    3c5c:	strne	r5, [r0]
    3c60:	mov	r3, #1
    3c64:	mov	r1, #7
    3c68:	mov	r2, r3
    3c6c:	mov	r0, r4
    3c70:	bl	0 <flatcc_builder_table_add>
    3c74:	cmp	r0, #0
    3c78:	mov	r2, #1
    3c7c:	ldr	r1, [pc, #576]	; 3ec4 <gen_monster+0x9d4>
    3c80:	movne	r3, #1
    3c84:	strbne	r3, [r0]
    3c88:	mov	r0, r4
    3c8c:	bl	0 <flatcc_builder_check_required>
    3c90:	cmp	r0, #0
    3c94:	beq	3e28 <gen_monster+0x938>
    3c98:	mov	r0, r4
    3c9c:	bl	0 <flatcc_builder_end_table>
    3ca0:	subs	r1, r0, #0
    3ca4:	beq	3cb0 <gen_monster+0x7c0>
    3ca8:	mov	r0, r4
    3cac:	bl	0 <flatcc_builder_offset_vector_push>
    3cb0:	mov	r0, r4
    3cb4:	bl	0 <flatcc_builder_end_offset_vector>
    3cb8:	subs	r5, r0, #0
    3cbc:	beq	3cd4 <gen_monster+0x7e4>
    3cc0:	mov	r1, #11
    3cc4:	mov	r0, r4
    3cc8:	bl	0 <flatcc_builder_table_add_offset>
    3ccc:	cmp	r0, #0
    3cd0:	strne	r5, [r0]
    3cd4:	mov	r2, #1
    3cd8:	ldr	r1, [pc, #484]	; 3ec4 <gen_monster+0x9d4>
    3cdc:	mov	r0, r4
    3ce0:	bl	0 <flatcc_builder_check_required>
    3ce4:	cmp	r0, #0
    3ce8:	beq	3e28 <gen_monster+0x938>
    3cec:	mov	r0, r4
    3cf0:	bl	0 <flatcc_builder_end_table>
    3cf4:	subs	r5, r0, #0
    3cf8:	beq	3d10 <gen_monster+0x820>
    3cfc:	mov	r1, #12
    3d00:	mov	r0, r4
    3d04:	bl	0 <flatcc_builder_table_add_offset>
    3d08:	cmp	r0, #0
    3d0c:	strne	r5, [r0]
    3d10:	mov	r3, #1
    3d14:	mov	r1, #15
    3d18:	mov	r2, r3
    3d1c:	mov	r0, r4
    3d20:	bl	0 <flatcc_builder_table_add>
    3d24:	cmp	r0, #0
    3d28:	mov	r1, #3
    3d2c:	movne	r3, #0
    3d30:	strbne	r3, [r0]
    3d34:	mov	r0, r4
    3d38:	bl	0 <flatcc_builder_start_table>
    3d3c:	mov	r2, #0
    3d40:	ldr	r1, [pc, #388]	; 3ecc <gen_monster+0x9dc>
    3d44:	mov	r0, r4
    3d48:	bl	0 <flatcc_builder_check_required>
    3d4c:	cmp	r0, #0
    3d50:	beq	3eb4 <gen_monster+0x9c4>
    3d54:	mov	r0, r4
    3d58:	bl	0 <flatcc_builder_end_table>
    3d5c:	subs	r5, r0, #0
    3d60:	beq	3d78 <gen_monster+0x888>
    3d64:	mov	r1, #14
    3d68:	mov	r0, r4
    3d6c:	bl	0 <flatcc_builder_table_add_offset>
    3d70:	cmp	r0, #0
    3d74:	strne	r5, [r0]
    3d78:	mov	r2, #1
    3d7c:	ldr	r1, [pc, #320]	; 3ec4 <gen_monster+0x9d4>
    3d80:	mov	r0, r4
    3d84:	bl	0 <flatcc_builder_check_required>
    3d88:	cmp	r0, #0
    3d8c:	beq	3e28 <gen_monster+0x938>
    3d90:	mov	r0, r4
    3d94:	bl	0 <flatcc_builder_end_table>
    3d98:	mov	r1, r0
    3d9c:	mov	r0, r4
    3da0:	bl	0 <flatcc_builder_end_buffer>
    3da4:	mov	r0, #0
    3da8:	add	sp, sp, #52	; 0x34
    3dac:	ldrd	r4, [sp]
    3db0:	ldrd	r6, [sp, #8]
    3db4:	add	sp, sp, #16
    3db8:	pop	{pc}		; (ldr pc, [sp], #4)
    3dbc:	mov	r0, r4
    3dc0:	bl	0 <flatcc_builder_start_offset_vector>
    3dc4:	mov	r1, #36	; 0x24
    3dc8:	mov	r0, r4
    3dcc:	bl	0 <flatcc_builder_start_table>
    3dd0:	b	3ad0 <gen_monster+0x5e0>
    3dd4:	mov	r1, #36	; 0x24
    3dd8:	mov	r0, r4
    3ddc:	bl	0 <flatcc_builder_start_table>
    3de0:	movw	r1, #0
    3de4:	movt	r1, #0
    3de8:	mov	r0, r4
    3dec:	bl	0 <flatcc_builder_create_string_str>
    3df0:	subs	r6, r0, #0
    3df4:	beq	3e2c <gen_monster+0x93c>
    3df8:	mov	r1, #3
    3dfc:	mov	r0, r4
    3e00:	bl	0 <flatcc_builder_table_add_offset>
    3e04:	subs	r3, r0, #0
    3e08:	beq	3e2c <gen_monster+0x93c>
    3e0c:	mov	r0, r4
    3e10:	str	r6, [r3]
    3e14:	bl	0 <flatcc_builder_start_offset_vector>
    3e18:	mov	r1, #36	; 0x24
    3e1c:	mov	r0, r4
    3e20:	bl	0 <flatcc_builder_start_table>
    3e24:	b	3b0c <gen_monster+0x61c>
    3e28:	bl	7dc <MyGame_Example_Monster_end.part.49>
    3e2c:	mov	r0, r4
    3e30:	bl	0 <flatcc_builder_start_offset_vector>
    3e34:	mov	r1, #36	; 0x24
    3e38:	mov	r0, r4
    3e3c:	bl	0 <flatcc_builder_start_table>
    3e40:	b	3b0c <gen_monster+0x61c>
    3e44:	movw	r1, #0
    3e48:	movt	r1, #0
    3e4c:	ldr	r3, [pc, #124]	; 3ed0 <gen_monster+0x9e0>
    3e50:	movw	r0, #0
    3e54:	movt	r0, #0
    3e58:	movw	r2, #923	; 0x39b
    3e5c:	bl	0 <__assert_fail>
    3e60:	movw	r1, #0
    3e64:	movt	r1, #0
    3e68:	ldr	r3, [pc, #96]	; 3ed0 <gen_monster+0x9e0>
    3e6c:	movw	r0, #0
    3e70:	movt	r0, #0
    3e74:	movw	r2, #929	; 0x3a1
    3e78:	bl	0 <__assert_fail>
    3e7c:	movw	r1, #0
    3e80:	movt	r1, #0
    3e84:	ldr	r3, [pc, #68]	; 3ed0 <gen_monster+0x9e0>
    3e88:	movw	r0, #0
    3e8c:	movt	r0, #0
    3e90:	movw	r2, #883	; 0x373
    3e94:	bl	0 <__assert_fail>
    3e98:	movw	r1, #0
    3e9c:	movt	r1, #0
    3ea0:	ldr	r3, [pc, #40]	; 3ed0 <gen_monster+0x9e0>
    3ea4:	movw	r0, #0
    3ea8:	movt	r0, #0
    3eac:	movw	r2, #881	; 0x371
    3eb0:	bl	0 <__assert_fail>
    3eb4:	bl	804 <MyGame_Example_Stat_end.part.51>
    3eb8:	ldr	r3, [r1]
    3ebc:	udf	#0
    3ec0:	.word	0x000004f0
    3ec4:	.word	0x00000404
    3ec8:	.word	0x000004c8
    3ecc:	.word	0x00000508
    3ed0:	.word	0x000004fc

00003ed4 <test_monster>:
    3ed4:	mov	r1, #0
    3ed8:	strd	r4, [sp, #-12]!
    3edc:	mov	r4, r0
    3ee0:	str	lr, [sp, #8]
    3ee4:	sub	sp, sp, #12
    3ee8:	bl	34f0 <gen_monster>
    3eec:	mov	r0, r4
    3ef0:	add	r1, sp, #4
    3ef4:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    3ef8:	movw	r3, #0
    3efc:	movt	r3, #0
    3f00:	ldr	r2, [sp, #4]
    3f04:	mov	r1, r0
    3f08:	mov	r4, r0
    3f0c:	movw	r0, #0
    3f10:	movt	r0, #0
    3f14:	ldr	r3, [r3]
    3f18:	bl	28 <hexdump>
    3f1c:	mov	r0, r4
    3f20:	movw	r3, #0
    3f24:	movt	r3, #0
    3f28:	movw	r2, #0
    3f2c:	movt	r2, #0
    3f30:	ldr	r1, [sp, #4]
    3f34:	bl	0 <flatcc_verify_table_as_root>
    3f38:	cmp	r0, #0
    3f3c:	bne	3f68 <test_monster+0x94>
    3f40:	mov	r0, r4
    3f44:	bl	29c0 <verify_monster>
    3f48:	mov	r5, r0
    3f4c:	mov	r0, r4
    3f50:	bl	0 <flatcc_builder_aligned_free>
    3f54:	mov	r0, r5
    3f58:	add	sp, sp, #12
    3f5c:	ldrd	r4, [sp]
    3f60:	add	sp, sp, #8
    3f64:	pop	{pc}		; (ldr pc, [sp], #4)
    3f68:	bl	0 <flatcc_verify_error_string>
    3f6c:	mov	r1, r0
    3f70:	movw	r0, #0
    3f74:	movt	r0, #0
    3f78:	mvn	r5, #0
    3f7c:	bl	0 <printf>
    3f80:	b	3f54 <test_monster+0x80>

00003f84 <test_monster_with_size>:
    3f84:	mov	r1, #1
    3f88:	strd	r4, [sp, #-12]!
    3f8c:	mov	r4, r0
    3f90:	str	lr, [sp, #8]
    3f94:	sub	sp, sp, #12
    3f98:	bl	34f0 <gen_monster>
    3f9c:	mov	r0, r4
    3fa0:	add	r1, sp, #4
    3fa4:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    3fa8:	movw	r3, #0
    3fac:	movt	r3, #0
    3fb0:	ldr	r2, [sp, #4]
    3fb4:	mov	r4, r0
    3fb8:	mov	r1, r0
    3fbc:	movw	r0, #0
    3fc0:	movt	r0, #0
    3fc4:	ldr	r3, [r3]
    3fc8:	bl	28 <hexdump>
    3fcc:	tst	r4, #15
    3fd0:	bne	406c <test_monster_with_size+0xe8>
    3fd4:	mov	r5, r4
    3fd8:	ldr	r1, [sp, #4]
    3fdc:	ldr	r3, [r5], #4
    3fe0:	sub	r1, r1, #4
    3fe4:	cmp	r1, r3
    3fe8:	bne	4034 <test_monster_with_size+0xb0>
    3fec:	movw	r3, #0
    3ff0:	movt	r3, #0
    3ff4:	movw	r2, #0
    3ff8:	movt	r2, #0
    3ffc:	mov	r0, r5
    4000:	bl	0 <flatcc_verify_table_as_root>
    4004:	cmp	r0, #0
    4008:	bne	4050 <test_monster_with_size+0xcc>
    400c:	mov	r0, r5
    4010:	bl	29c0 <verify_monster>
    4014:	mov	r5, r0
    4018:	mov	r0, r4
    401c:	bl	0 <flatcc_builder_aligned_free>
    4020:	mov	r0, r5
    4024:	add	sp, sp, #12
    4028:	ldrd	r4, [sp]
    402c:	add	sp, sp, #8
    4030:	pop	{pc}		; (ldr pc, [sp], #4)
    4034:	mov	r2, r1
    4038:	movw	r0, #0
    403c:	movt	r0, #0
    4040:	mov	r1, r3
    4044:	bl	0 <printf>
    4048:	mvn	r5, #0
    404c:	b	4020 <test_monster_with_size+0x9c>
    4050:	bl	0 <flatcc_verify_error_string>
    4054:	mov	r1, r0
    4058:	movw	r0, #0
    405c:	movt	r0, #0
    4060:	mvn	r5, #0
    4064:	bl	0 <printf>
    4068:	b	4020 <test_monster_with_size+0x9c>
    406c:	movw	r0, #0
    4070:	movt	r0, #0
    4074:	bl	0 <printf>
    4078:	mov	r1, r4
    407c:	movw	r0, #0
    4080:	movt	r0, #0
    4084:	mvn	r5, #0
    4088:	bl	0 <printf>
    408c:	b	4020 <test_monster_with_size+0x9c>

00004090 <test_string>:
    4090:	strd	r4, [sp, #-16]!
    4094:	mov	r4, r0
    4098:	str	r6, [sp, #8]
    409c:	str	lr, [sp, #12]
    40a0:	bl	0 <flatcc_builder_reset>
    40a4:	mov	r3, #0
    40a8:	mov	r0, r4
    40ac:	mov	r2, r3
    40b0:	movw	r1, #0
    40b4:	movt	r1, #0
    40b8:	bl	0 <flatcc_builder_start_buffer>
    40bc:	cmp	r0, #0
    40c0:	bne	40d0 <test_string+0x40>
    40c4:	mov	r1, #36	; 0x24
    40c8:	mov	r0, r4
    40cc:	bl	0 <flatcc_builder_start_table>
    40d0:	mov	r0, r4
    40d4:	bl	0 <flatcc_builder_start_string>
    40d8:	mov	r1, #3
    40dc:	mov	r0, r4
    40e0:	bl	0 <flatcc_builder_extend_string>
    40e4:	mov	r3, r0
    40e8:	mov	r2, #51	; 0x33
    40ec:	mov	r1, #49	; 0x31
    40f0:	mov	r0, #50	; 0x32
    40f4:	strb	r1, [r3]
    40f8:	movw	r1, #0
    40fc:	movt	r1, #0
    4100:	strb	r0, [r3, #1]
    4104:	mov	r0, r4
    4108:	strb	r2, [r3, #2]
    410c:	bl	0 <flatcc_builder_append_string_str>
    4110:	mov	r0, r4
    4114:	bl	0 <flatcc_builder_string_len>
    4118:	cmp	r0, #4
    411c:	bne	42f8 <test_string+0x268>
    4120:	mov	r2, #30
    4124:	movw	r1, #0
    4128:	movt	r1, #0
    412c:	mov	r0, r4
    4130:	bl	0 <flatcc_builder_append_string_strn>
    4134:	mov	r0, r4
    4138:	bl	0 <flatcc_builder_string_len>
    413c:	cmp	r0, #8
    4140:	bne	42dc <test_string+0x24c>
    4144:	mov	r2, #2
    4148:	movw	r1, #0
    414c:	movt	r1, #0
    4150:	mov	r0, r4
    4154:	bl	0 <flatcc_builder_append_string>
    4158:	mov	r0, r4
    415c:	bl	0 <flatcc_builder_string_len>
    4160:	cmp	r0, #10
    4164:	bne	4314 <test_string+0x284>
    4168:	mov	r1, #3
    416c:	mov	r0, r4
    4170:	bl	0 <flatcc_builder_truncate_string>
    4174:	mov	r0, r4
    4178:	bl	0 <flatcc_builder_string_len>
    417c:	cmp	r0, #7
    4180:	bne	42a0 <test_string+0x210>
    4184:	mov	r0, r4
    4188:	bl	0 <flatcc_builder_string_edit>
    418c:	mov	r3, #46	; 0x2e
    4190:	strb	r3, [r0, #4]
    4194:	mov	r0, r4
    4198:	bl	0 <flatcc_builder_end_string>
    419c:	subs	r5, r0, #0
    41a0:	beq	41b8 <test_string+0x128>
    41a4:	mov	r1, #3
    41a8:	mov	r0, r4
    41ac:	bl	0 <flatcc_builder_table_add_offset>
    41b0:	cmp	r0, #0
    41b4:	strne	r5, [r0]
    41b8:	mov	r2, #1
    41bc:	ldr	r1, [pc, #364]	; 4330 <test_string+0x2a0>
    41c0:	mov	r0, r4
    41c4:	bl	0 <flatcc_builder_check_required>
    41c8:	cmp	r0, #0
    41cc:	beq	42d8 <test_string+0x248>
    41d0:	mov	r0, r4
    41d4:	bl	0 <flatcc_builder_end_table>
    41d8:	mov	r1, r0
    41dc:	mov	r0, r4
    41e0:	bl	0 <flatcc_builder_end_buffer>
    41e4:	mov	r0, r4
    41e8:	mov	r1, #0
    41ec:	bl	0 <flatcc_builder_get_direct_buffer>
    41f0:	cmp	r0, #0
    41f4:	beq	42bc <test_string+0x22c>
    41f8:	ldr	r2, [r0, #4]
    41fc:	movw	r3, #20301	; 0x4f4d
    4200:	movt	r3, #21326	; 0x534e
    4204:	cmp	r2, r3
    4208:	beq	4210 <test_string+0x180>
    420c:	bl	4ec <MyGame_Example_Monster_name.part.26>
    4210:	ldr	r2, [r0]
    4214:	adds	r3, r0, r2
    4218:	beq	420c <test_string+0x17c>
    421c:	ldr	r2, [r0, r2]
    4220:	sub	r2, r3, r2
    4224:	ldrh	r1, [r2]
    4228:	cmp	r1, #11
    422c:	bls	4284 <test_string+0x1f4>
    4230:	ldrh	r2, [r2, #10]
    4234:	cmp	r2, #0
    4238:	beq	4284 <test_string+0x1f4>
    423c:	ldr	r0, [r3, r2]
    4240:	add	r3, r3, r2
    4244:	movw	r1, #0
    4248:	movt	r1, #0
    424c:	add	r0, r0, #4
    4250:	add	r0, r3, r0
    4254:	bl	0 <strcmp>
    4258:	cmp	r0, #0
    425c:	bne	4270 <test_string+0x1e0>
    4260:	ldrd	r4, [sp]
    4264:	ldr	r6, [sp, #8]
    4268:	add	sp, sp, #12
    426c:	pop	{pc}		; (ldr pc, [sp], #4)
    4270:	movw	r0, #0
    4274:	movt	r0, #0
    4278:	bl	0 <puts>
    427c:	mvn	r0, #0
    4280:	b	4260 <test_string+0x1d0>
    4284:	movw	r1, #0
    4288:	movt	r1, #0
    428c:	ldr	r3, [pc, #160]	; 4334 <test_string+0x2a4>
    4290:	movw	r0, #0
    4294:	movt	r0, #0
    4298:	movw	r2, #699	; 0x2bb
    429c:	bl	0 <__assert_fail>
    42a0:	movw	r1, #0
    42a4:	movt	r1, #0
    42a8:	ldr	r3, [pc, #136]	; 4338 <test_string+0x2a8>
    42ac:	movw	r0, #0
    42b0:	movt	r0, #0
    42b4:	movw	r2, #1086	; 0x43e
    42b8:	bl	0 <__assert_fail>
    42bc:	movw	r1, #0
    42c0:	movt	r1, #0
    42c4:	ldr	r3, [pc, #108]	; 4338 <test_string+0x2a8>
    42c8:	movw	r0, #0
    42cc:	movt	r0, #0
    42d0:	movw	r2, #1093	; 0x445
    42d4:	bl	0 <__assert_fail>
    42d8:	bl	7dc <MyGame_Example_Monster_end.part.49>
    42dc:	movw	r1, #0
    42e0:	movt	r1, #0
    42e4:	ldr	r3, [pc, #76]	; 4338 <test_string+0x2a8>
    42e8:	movw	r0, #0
    42ec:	movt	r0, #0
    42f0:	movw	r2, #1082	; 0x43a
    42f4:	bl	0 <__assert_fail>
    42f8:	movw	r1, #0
    42fc:	movt	r1, #0
    4300:	ldr	r3, [pc, #48]	; 4338 <test_string+0x2a8>
    4304:	movw	r0, #0
    4308:	movt	r0, #0
    430c:	movw	r2, #1080	; 0x438
    4310:	bl	0 <__assert_fail>
    4314:	movw	r1, #0
    4318:	movt	r1, #0
    431c:	ldr	r3, [pc, #20]	; 4338 <test_string+0x2a8>
    4320:	movw	r0, #0
    4324:	movt	r0, #0
    4328:	movw	r2, #1084	; 0x43c
    432c:	bl	0 <__assert_fail>
    4330:	.word	0x00000404
    4334:	.word	0x0000020c
    4338:	.word	0x0000050c

0000433c <test_sort_find>:
    433c:	strd	r4, [sp, #-36]!	; 0xffffffdc
    4340:	mov	r4, r0
    4344:	strd	r6, [sp, #8]
    4348:	strd	r8, [sp, #16]
    434c:	strd	sl, [sp, #24]
    4350:	str	lr, [sp, #32]
    4354:	sub	sp, sp, #52	; 0x34
    4358:	bl	0 <flatcc_builder_reset>
    435c:	mov	r3, #0
    4360:	mov	r0, r4
    4364:	mov	r2, r3
    4368:	movw	r1, #0
    436c:	movt	r1, #0
    4370:	bl	0 <flatcc_builder_start_buffer>
    4374:	cmp	r0, #0
    4378:	bne	4388 <test_sort_find+0x4c>
    437c:	mov	r1, #36	; 0x24
    4380:	mov	r0, r4
    4384:	bl	0 <flatcc_builder_start_table>
    4388:	movw	r1, #0
    438c:	movt	r1, #0
    4390:	mov	r0, r4
    4394:	bl	0 <flatcc_builder_create_string_str>
    4398:	subs	r5, r0, #0
    439c:	beq	43b4 <test_sort_find+0x78>
    43a0:	mov	r1, #3
    43a4:	mov	r0, r4
    43a8:	bl	0 <flatcc_builder_table_add_offset>
    43ac:	cmp	r0, #0
    43b0:	strne	r5, [r0]
    43b4:	mov	r0, r4
    43b8:	bl	0 <flatcc_builder_start_offset_vector>
    43bc:	mov	r1, #36	; 0x24
    43c0:	mov	r0, r4
    43c4:	bl	0 <flatcc_builder_start_table>
    43c8:	movw	r1, #0
    43cc:	movt	r1, #0
    43d0:	mov	r0, r4
    43d4:	bl	0 <flatcc_builder_create_string_str>
    43d8:	subs	r5, r0, #0
    43dc:	beq	43f4 <test_sort_find+0xb8>
    43e0:	mov	r1, #3
    43e4:	mov	r0, r4
    43e8:	bl	0 <flatcc_builder_table_add_offset>
    43ec:	cmp	r0, #0
    43f0:	strne	r5, [r0]
    43f4:	mov	r2, #1
    43f8:	ldr	r1, [pc, #3948]	; 536c <test_sort_find+0x1030>
    43fc:	mov	r0, r4
    4400:	bl	0 <flatcc_builder_check_required>
    4404:	cmp	r0, #0
    4408:	beq	56dc <test_sort_find+0x13a0>
    440c:	mov	r0, r4
    4410:	bl	0 <flatcc_builder_end_table>
    4414:	subs	r1, r0, #0
    4418:	beq	4424 <test_sort_find+0xe8>
    441c:	mov	r0, r4
    4420:	bl	0 <flatcc_builder_offset_vector_push>
    4424:	mov	r1, #36	; 0x24
    4428:	mov	r0, r4
    442c:	bl	0 <flatcc_builder_start_table>
    4430:	movw	r1, #0
    4434:	movt	r1, #0
    4438:	mov	r0, r4
    443c:	bl	0 <flatcc_builder_create_string_str>
    4440:	subs	r5, r0, #0
    4444:	beq	445c <test_sort_find+0x120>
    4448:	mov	r1, #3
    444c:	mov	r0, r4
    4450:	bl	0 <flatcc_builder_table_add_offset>
    4454:	cmp	r0, #0
    4458:	strne	r5, [r0]
    445c:	mov	r2, #1
    4460:	ldr	r1, [pc, #3844]	; 536c <test_sort_find+0x1030>
    4464:	mov	r0, r4
    4468:	bl	0 <flatcc_builder_check_required>
    446c:	cmp	r0, #0
    4470:	beq	56dc <test_sort_find+0x13a0>
    4474:	mov	r0, r4
    4478:	bl	0 <flatcc_builder_end_table>
    447c:	subs	r1, r0, #0
    4480:	beq	448c <test_sort_find+0x150>
    4484:	mov	r0, r4
    4488:	bl	0 <flatcc_builder_offset_vector_push>
    448c:	mov	r1, #36	; 0x24
    4490:	mov	r0, r4
    4494:	bl	0 <flatcc_builder_start_table>
    4498:	movw	r1, #0
    449c:	movt	r1, #0
    44a0:	mov	r0, r4
    44a4:	bl	0 <flatcc_builder_create_string_str>
    44a8:	subs	r5, r0, #0
    44ac:	beq	44c4 <test_sort_find+0x188>
    44b0:	mov	r1, #3
    44b4:	mov	r0, r4
    44b8:	bl	0 <flatcc_builder_table_add_offset>
    44bc:	cmp	r0, #0
    44c0:	strne	r5, [r0]
    44c4:	mov	r2, #1
    44c8:	ldr	r1, [pc, #3740]	; 536c <test_sort_find+0x1030>
    44cc:	mov	r0, r4
    44d0:	bl	0 <flatcc_builder_check_required>
    44d4:	cmp	r0, #0
    44d8:	beq	56dc <test_sort_find+0x13a0>
    44dc:	mov	r0, r4
    44e0:	bl	0 <flatcc_builder_end_table>
    44e4:	subs	r1, r0, #0
    44e8:	beq	44f4 <test_sort_find+0x1b8>
    44ec:	mov	r0, r4
    44f0:	bl	0 <flatcc_builder_offset_vector_push>
    44f4:	mov	r1, #36	; 0x24
    44f8:	mov	r0, r4
    44fc:	bl	0 <flatcc_builder_start_table>
    4500:	movw	r1, #0
    4504:	movt	r1, #0
    4508:	mov	r0, r4
    450c:	bl	0 <flatcc_builder_create_string_str>
    4510:	subs	r5, r0, #0
    4514:	beq	452c <test_sort_find+0x1f0>
    4518:	mov	r1, #3
    451c:	mov	r0, r4
    4520:	bl	0 <flatcc_builder_table_add_offset>
    4524:	cmp	r0, #0
    4528:	strne	r5, [r0]
    452c:	mov	r2, #1
    4530:	ldr	r1, [pc, #3636]	; 536c <test_sort_find+0x1030>
    4534:	mov	r0, r4
    4538:	bl	0 <flatcc_builder_check_required>
    453c:	cmp	r0, #0
    4540:	beq	56dc <test_sort_find+0x13a0>
    4544:	mov	r0, r4
    4548:	bl	0 <flatcc_builder_end_table>
    454c:	subs	r1, r0, #0
    4550:	beq	455c <test_sort_find+0x220>
    4554:	mov	r0, r4
    4558:	bl	0 <flatcc_builder_offset_vector_push>
    455c:	mov	r1, #36	; 0x24
    4560:	mov	r0, r4
    4564:	bl	0 <flatcc_builder_start_table>
    4568:	movw	r1, #0
    456c:	movt	r1, #0
    4570:	mov	r0, r4
    4574:	bl	0 <flatcc_builder_create_string_str>
    4578:	subs	r5, r0, #0
    457c:	beq	4594 <test_sort_find+0x258>
    4580:	mov	r1, #3
    4584:	mov	r0, r4
    4588:	bl	0 <flatcc_builder_table_add_offset>
    458c:	cmp	r0, #0
    4590:	strne	r5, [r0]
    4594:	mov	r2, #1
    4598:	ldr	r1, [pc, #3532]	; 536c <test_sort_find+0x1030>
    459c:	mov	r0, r4
    45a0:	bl	0 <flatcc_builder_check_required>
    45a4:	cmp	r0, #0
    45a8:	beq	56dc <test_sort_find+0x13a0>
    45ac:	mov	r0, r4
    45b0:	bl	0 <flatcc_builder_end_table>
    45b4:	subs	r1, r0, #0
    45b8:	beq	45c4 <test_sort_find+0x288>
    45bc:	mov	r0, r4
    45c0:	bl	0 <flatcc_builder_offset_vector_push>
    45c4:	mov	r0, r4
    45c8:	bl	0 <flatcc_builder_end_offset_vector>
    45cc:	subs	r5, r0, #0
    45d0:	beq	45e8 <test_sort_find+0x2ac>
    45d4:	mov	r1, #11
    45d8:	mov	r0, r4
    45dc:	bl	0 <flatcc_builder_table_add_offset>
    45e0:	cmp	r0, #0
    45e4:	strne	r5, [r0]
    45e8:	mov	r2, #1
    45ec:	ldr	r1, [pc, #3448]	; 536c <test_sort_find+0x1030>
    45f0:	mov	r0, r4
    45f4:	bl	0 <flatcc_builder_check_required>
    45f8:	cmp	r0, #0
    45fc:	beq	56dc <test_sort_find+0x13a0>
    4600:	movw	r5, #0
    4604:	movt	r5, #0
    4608:	mov	r0, r4
    460c:	str	r5, [sp, #24]
    4610:	bl	0 <flatcc_builder_end_table>
    4614:	mov	r1, r0
    4618:	mov	r0, r4
    461c:	bl	0 <flatcc_builder_end_buffer>
    4620:	mov	r0, r4
    4624:	add	r1, sp, #44	; 0x2c
    4628:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    462c:	mov	r4, r0
    4630:	movw	r0, #0
    4634:	movt	r0, #0
    4638:	mov	r1, r4
    463c:	ldr	r3, [r5]
    4640:	str	r4, [sp, #8]
    4644:	ldr	r2, [sp, #44]	; 0x2c
    4648:	bl	28 <hexdump>
    464c:	cmp	r4, #0
    4650:	beq	4668 <test_sort_find+0x32c>
    4654:	ldr	r2, [r4, #4]
    4658:	movw	r3, #20301	; 0x4f4d
    465c:	movt	r3, #21326	; 0x534e
    4660:	cmp	r2, r3
    4664:	beq	466c <test_sort_find+0x330>
    4668:	bl	3c0 <MyGame_Example_Monster_testarrayoftables.part.22>
    466c:	ldr	r2, [sp, #8]
    4670:	ldr	r3, [r2]
    4674:	adds	r2, r2, r3
    4678:	beq	4668 <test_sort_find+0x32c>
    467c:	ldr	r1, [sp, #8]
    4680:	ldr	r3, [r1, r3]
    4684:	sub	r3, r2, r3
    4688:	ldrh	r1, [r3]
    468c:	cmp	r1, #27
    4690:	bls	5030 <test_sort_find+0xcf4>
    4694:	ldrh	r3, [r3, #26]
    4698:	cmp	r3, #0
    469c:	beq	5030 <test_sort_find+0xcf4>
    46a0:	ldr	r1, [r2, r3]
    46a4:	add	r3, r2, r3
    46a8:	str	r3, [sp, #32]
    46ac:	add	r2, r1, #4
    46b0:	adds	fp, r3, r2
    46b4:	str	r2, [sp, #36]	; 0x24
    46b8:	beq	5030 <test_sort_find+0xcf4>
    46bc:	ldr	r3, [fp, #-4]
    46c0:	cmp	r3, #0
    46c4:	str	r3, [sp, #28]
    46c8:	beq	4b4c <test_sort_find+0x810>
    46cc:	ldr	r2, [sp, #28]
    46d0:	lsr	r3, r2, #1
    46d4:	sub	sl, r2, #1
    46d8:	str	r3, [sp, #12]
    46dc:	lsl	r3, r3, #1
    46e0:	str	r3, [sp, #4]
    46e4:	ldr	r3, [sp, #4]
    46e8:	cmp	sl, r3
    46ec:	bcc	48e4 <test_sort_find+0x5a8>
    46f0:	ldr	r4, [sp, #4]
    46f4:	ldr	r7, [sp, #12]
    46f8:	b	4754 <test_sort_find+0x418>
    46fc:	ldr	r8, [r0, #-4]
    4700:	str	r3, [sp, #20]
    4704:	cmp	r9, r8
    4708:	movcc	r2, r9
    470c:	movcs	r2, r8
    4710:	bl	0 <strncmp>
    4714:	cmp	r0, #0
    4718:	ldr	r3, [sp, #20]
    471c:	beq	48dc <test_sort_find+0x5a0>
    4720:	bge	48e4 <test_sort_find+0x5a8>
    4724:	sub	r2, r7, r4
    4728:	lsl	r1, r4, #1
    472c:	mov	r7, r4
    4730:	lsl	r2, r2, #2
    4734:	cmp	sl, r1
    4738:	sub	r6, r6, r2
    473c:	add	r5, r5, r2
    4740:	ldr	r2, [sp, #16]
    4744:	str	r6, [fp, r2]
    4748:	str	r5, [fp, r3]
    474c:	bcc	48e4 <test_sort_find+0x5a8>
    4750:	mov	r4, r1
    4754:	cmp	r4, sl
    4758:	ldr	r6, [fp, #-4]
    475c:	bcs	482c <test_sort_find+0x4f0>
    4760:	lsl	r2, r4, #2
    4764:	cmp	r4, r6
    4768:	add	ip, fp, r2
    476c:	bcs	5014 <test_sort_find+0xcd8>
    4770:	ldr	r0, [fp, r4, lsl #2]
    4774:	adds	r1, ip, r0
    4778:	beq	4ff8 <test_sort_find+0xcbc>
    477c:	ldr	r0, [ip, r0]
    4780:	sub	r0, r1, r0
    4784:	ldrh	ip, [r0]
    4788:	cmp	ip, #11
    478c:	bls	4e80 <test_sort_find+0xb44>
    4790:	ldrh	ip, [r0, #10]
    4794:	cmp	ip, #0
    4798:	beq	4e80 <test_sort_find+0xb44>
    479c:	ldr	r0, [r1, ip]
    47a0:	add	r8, r4, #1
    47a4:	add	r1, r1, ip
    47a8:	add	r2, r2, #4
    47ac:	cmp	r8, r6
    47b0:	add	ip, fp, r2
    47b4:	add	r0, r0, #4
    47b8:	add	r0, r1, r0
    47bc:	bcs	5014 <test_sort_find+0xcd8>
    47c0:	ldr	r2, [fp, r2]
    47c4:	adds	r1, ip, r2
    47c8:	beq	4ff8 <test_sort_find+0xcbc>
    47cc:	ldr	r2, [ip, r2]
    47d0:	sub	r2, r1, r2
    47d4:	ldrh	ip, [r2]
    47d8:	cmp	ip, #11
    47dc:	bls	4e80 <test_sort_find+0xb44>
    47e0:	ldrh	ip, [r2, #10]
    47e4:	cmp	ip, #0
    47e8:	beq	4e80 <test_sort_find+0xb44>
    47ec:	ldr	r2, [r1, ip]
    47f0:	add	r1, r1, ip
    47f4:	add	r2, r2, #4
    47f8:	adds	r1, r1, r2
    47fc:	ldrne	r9, [r1, #-4]
    4800:	moveq	r9, #0
    4804:	cmp	r0, #0
    4808:	beq	4e70 <test_sort_find+0xb34>
    480c:	ldr	r5, [r0, #-4]
    4810:	cmp	r9, r5
    4814:	movcc	r2, r9
    4818:	movcs	r2, r5
    481c:	bl	0 <strncmp>
    4820:	cmp	r0, #0
    4824:	beq	4e74 <test_sort_find+0xb38>
    4828:	movlt	r4, r8
    482c:	lsl	r3, r7, #2
    4830:	cmp	r7, r6
    4834:	add	r1, fp, r3
    4838:	str	r3, [sp, #16]
    483c:	bcs	5014 <test_sort_find+0xcd8>
    4840:	ldr	r5, [fp, r7, lsl #2]
    4844:	adds	r2, r1, r5
    4848:	beq	4ff8 <test_sort_find+0xcbc>
    484c:	ldr	r1, [r1, r5]
    4850:	sub	r1, r2, r1
    4854:	ldrh	r0, [r1]
    4858:	cmp	r0, #11
    485c:	bls	4e80 <test_sort_find+0xb44>
    4860:	ldrh	r1, [r1, #10]
    4864:	cmp	r1, #0
    4868:	beq	4e80 <test_sort_find+0xb44>
    486c:	ldr	r0, [r2, r1]
    4870:	lsl	r3, r4, #2
    4874:	add	r2, r2, r1
    4878:	cmp	r4, r6
    487c:	add	r1, fp, r3
    4880:	add	r0, r0, #4
    4884:	add	r0, r2, r0
    4888:	bcs	5014 <test_sort_find+0xcd8>
    488c:	ldr	r6, [fp, r4, lsl #2]
    4890:	adds	r2, r1, r6
    4894:	beq	4ff8 <test_sort_find+0xcbc>
    4898:	ldr	r1, [r1, r6]
    489c:	sub	r1, r2, r1
    48a0:	ldrh	ip, [r1]
    48a4:	cmp	ip, #11
    48a8:	bls	4e80 <test_sort_find+0xb44>
    48ac:	ldrh	ip, [r1, #10]
    48b0:	cmp	ip, #0
    48b4:	beq	4e80 <test_sort_find+0xb44>
    48b8:	ldr	r1, [r2, ip]
    48bc:	add	r2, r2, ip
    48c0:	add	r1, r1, #4
    48c4:	adds	r1, r2, r1
    48c8:	ldrne	r9, [r1, #-4]
    48cc:	moveq	r9, r1
    48d0:	cmp	r0, #0
    48d4:	bne	46fc <test_sort_find+0x3c0>
    48d8:	mov	r8, r0
    48dc:	cmp	r9, r8
    48e0:	bhi	4724 <test_sort_find+0x3e8>
    48e4:	ldr	r2, [sp, #4]
    48e8:	ldr	r3, [sp, #12]
    48ec:	sub	r2, r2, #2
    48f0:	sub	r3, r3, #1
    48f4:	str	r2, [sp, #4]
    48f8:	cmn	r3, #1
    48fc:	str	r3, [sp, #12]
    4900:	bne	46e4 <test_sort_find+0x3a8>
    4904:	cmp	sl, #0
    4908:	beq	4b4c <test_sort_find+0x810>
    490c:	ldr	r3, [sp, #28]
    4910:	add	r2, fp, #4
    4914:	str	r2, [sp, #20]
    4918:	add	r3, fp, r3, lsl #2
    491c:	ldr	r2, [sp, #20]
    4920:	mov	r7, #0
    4924:	sub	sl, sl, #1
    4928:	mov	r4, r7
    492c:	ldr	ip, [r3, #-4]
    4930:	ldr	r0, [fp]
    4934:	sub	r1, r3, r2
    4938:	sub	r2, r2, r3
    493c:	add	r1, r1, ip
    4940:	add	r2, r2, r0
    4944:	str	r1, [fp]
    4948:	sub	r1, r3, #4
    494c:	str	r2, [r3, #-4]
    4950:	str	r1, [sp, #16]
    4954:	b	49b0 <test_sort_find+0x674>
    4958:	ldr	r8, [r0, #-4]
    495c:	str	r3, [sp, #12]
    4960:	cmp	r9, r8
    4964:	movcc	r2, r9
    4968:	movcs	r2, r8
    496c:	bl	0 <strncmp>
    4970:	cmp	r0, #0
    4974:	ldr	r3, [sp, #12]
    4978:	beq	4b38 <test_sort_find+0x7fc>
    497c:	bge	4b40 <test_sort_find+0x804>
    4980:	sub	r2, r7, r4
    4984:	lsl	r1, r4, #1
    4988:	mov	r7, r4
    498c:	lsl	r2, r2, #2
    4990:	cmp	sl, r1
    4994:	sub	r6, r6, r2
    4998:	add	r5, r5, r2
    499c:	ldr	r2, [sp, #4]
    49a0:	str	r6, [fp, r2]
    49a4:	str	r5, [fp, r3]
    49a8:	bcc	4b40 <test_sort_find+0x804>
    49ac:	mov	r4, r1
    49b0:	cmp	r4, sl
    49b4:	ldr	r6, [fp, #-4]
    49b8:	bcs	4a88 <test_sort_find+0x74c>
    49bc:	lsl	r2, r4, #2
    49c0:	cmp	r4, r6
    49c4:	add	ip, fp, r2
    49c8:	bcs	5014 <test_sort_find+0xcd8>
    49cc:	ldr	r0, [fp, r4, lsl #2]
    49d0:	adds	r1, ip, r0
    49d4:	beq	4ff8 <test_sort_find+0xcbc>
    49d8:	ldr	r0, [ip, r0]
    49dc:	sub	r0, r1, r0
    49e0:	ldrh	ip, [r0]
    49e4:	cmp	ip, #11
    49e8:	bls	4e80 <test_sort_find+0xb44>
    49ec:	ldrh	ip, [r0, #10]
    49f0:	cmp	ip, #0
    49f4:	beq	4e80 <test_sort_find+0xb44>
    49f8:	ldr	r0, [r1, ip]
    49fc:	add	r8, r4, #1
    4a00:	add	r1, r1, ip
    4a04:	add	r2, r2, #4
    4a08:	cmp	r8, r6
    4a0c:	add	ip, fp, r2
    4a10:	add	r0, r0, #4
    4a14:	add	r0, r1, r0
    4a18:	bcs	5014 <test_sort_find+0xcd8>
    4a1c:	ldr	r2, [fp, r2]
    4a20:	adds	r1, ip, r2
    4a24:	beq	4ff8 <test_sort_find+0xcbc>
    4a28:	ldr	r2, [ip, r2]
    4a2c:	sub	r2, r1, r2
    4a30:	ldrh	ip, [r2]
    4a34:	cmp	ip, #11
    4a38:	bls	4e80 <test_sort_find+0xb44>
    4a3c:	ldrh	ip, [r2, #10]
    4a40:	cmp	ip, #0
    4a44:	beq	4e80 <test_sort_find+0xb44>
    4a48:	ldr	r2, [r1, ip]
    4a4c:	add	r1, r1, ip
    4a50:	add	r2, r2, #4
    4a54:	adds	r1, r1, r2
    4a58:	ldrne	r9, [r1, #-4]
    4a5c:	moveq	r9, #0
    4a60:	cmp	r0, #0
    4a64:	beq	4fe8 <test_sort_find+0xcac>
    4a68:	ldr	r5, [r0, #-4]
    4a6c:	cmp	r9, r5
    4a70:	movcc	r2, r9
    4a74:	movcs	r2, r5
    4a78:	bl	0 <strncmp>
    4a7c:	cmp	r0, #0
    4a80:	beq	4fec <test_sort_find+0xcb0>
    4a84:	movlt	r4, r8
    4a88:	lsl	r3, r7, #2
    4a8c:	cmp	r7, r6
    4a90:	add	r1, fp, r3
    4a94:	str	r3, [sp, #4]
    4a98:	bcs	5014 <test_sort_find+0xcd8>
    4a9c:	ldr	r5, [fp, r7, lsl #2]
    4aa0:	adds	r2, r1, r5
    4aa4:	beq	4ff8 <test_sort_find+0xcbc>
    4aa8:	ldr	r1, [r1, r5]
    4aac:	sub	r1, r2, r1
    4ab0:	ldrh	r0, [r1]
    4ab4:	cmp	r0, #11
    4ab8:	bls	4e80 <test_sort_find+0xb44>
    4abc:	ldrh	r1, [r1, #10]
    4ac0:	cmp	r1, #0
    4ac4:	beq	4e80 <test_sort_find+0xb44>
    4ac8:	ldr	r0, [r2, r1]
    4acc:	lsl	r3, r4, #2
    4ad0:	add	r2, r2, r1
    4ad4:	cmp	r4, r6
    4ad8:	add	r1, fp, r3
    4adc:	add	r0, r0, #4
    4ae0:	add	r0, r2, r0
    4ae4:	bcs	5014 <test_sort_find+0xcd8>
    4ae8:	ldr	r6, [fp, r4, lsl #2]
    4aec:	adds	r2, r1, r6
    4af0:	beq	4ff8 <test_sort_find+0xcbc>
    4af4:	ldr	r1, [r1, r6]
    4af8:	sub	r1, r2, r1
    4afc:	ldrh	ip, [r1]
    4b00:	cmp	ip, #11
    4b04:	bls	4e80 <test_sort_find+0xb44>
    4b08:	ldrh	ip, [r1, #10]
    4b0c:	cmp	ip, #0
    4b10:	beq	4e80 <test_sort_find+0xb44>
    4b14:	ldr	r1, [r2, ip]
    4b18:	add	r2, r2, ip
    4b1c:	add	r1, r1, #4
    4b20:	adds	r1, r2, r1
    4b24:	ldrne	r9, [r1, #-4]
    4b28:	moveq	r9, r1
    4b2c:	cmp	r0, #0
    4b30:	bne	4958 <test_sort_find+0x61c>
    4b34:	mov	r8, r0
    4b38:	cmp	r9, r8
    4b3c:	bhi	4980 <test_sort_find+0x644>
    4b40:	cmp	sl, #0
    4b44:	ldr	r3, [sp, #16]
    4b48:	bne	491c <test_sort_find+0x5e0>
    4b4c:	movw	r0, #0
    4b50:	movt	r0, #0
    4b54:	ldr	r1, [sp, #8]
    4b58:	ldr	r3, [sp, #24]
    4b5c:	ldr	r2, [sp, #44]	; 0x2c
    4b60:	ldr	r3, [r3]
    4b64:	bl	28 <hexdump>
    4b68:	ldr	r3, [fp, #-4]
    4b6c:	cmp	r3, #5
    4b70:	bne	55a4 <test_sort_find+0x1268>
    4b74:	ldr	r3, [sp, #32]
    4b78:	ldr	r2, [sp, #36]	; 0x24
    4b7c:	ldr	r3, [r3, r2]
    4b80:	adds	r0, fp, r3
    4b84:	beq	56e0 <test_sort_find+0x13a4>
    4b88:	ldr	r3, [fp, r3]
    4b8c:	sub	r3, r0, r3
    4b90:	ldrh	r2, [r3]
    4b94:	cmp	r2, #11
    4b98:	bls	4e80 <test_sort_find+0xb44>
    4b9c:	ldrh	r2, [r3, #10]
    4ba0:	cmp	r2, #0
    4ba4:	beq	4e80 <test_sort_find+0xb44>
    4ba8:	ldr	r3, [r0, r2]
    4bac:	add	r0, r0, r2
    4bb0:	movw	r1, #0
    4bb4:	movt	r1, #0
    4bb8:	add	r3, r3, #4
    4bbc:	add	r0, r0, r3
    4bc0:	bl	0 <strcmp>
    4bc4:	cmp	r0, #0
    4bc8:	bne	5634 <test_sort_find+0x12f8>
    4bcc:	ldr	r4, [fp, #4]
    4bd0:	add	r4, r4, #4
    4bd4:	adds	r0, fp, r4
    4bd8:	beq	56e0 <test_sort_find+0x13a4>
    4bdc:	ldr	r3, [fp, r4]
    4be0:	sub	r3, r0, r3
    4be4:	ldrh	r2, [r3]
    4be8:	cmp	r2, #11
    4bec:	bls	4e80 <test_sort_find+0xb44>
    4bf0:	ldrh	r2, [r3, #10]
    4bf4:	cmp	r2, #0
    4bf8:	beq	4e80 <test_sort_find+0xb44>
    4bfc:	ldr	r3, [r0, r2]
    4c00:	add	r0, r0, r2
    4c04:	movw	r1, #0
    4c08:	movt	r1, #0
    4c0c:	add	r3, r3, #4
    4c10:	add	r0, r0, r3
    4c14:	bl	0 <strcmp>
    4c18:	cmp	r0, #0
    4c1c:	bne	564c <test_sort_find+0x1310>
    4c20:	ldr	r6, [fp, #8]
    4c24:	add	r6, r6, #8
    4c28:	adds	r0, fp, r6
    4c2c:	beq	56e0 <test_sort_find+0x13a4>
    4c30:	ldr	r3, [fp, r6]
    4c34:	sub	r3, r0, r3
    4c38:	ldrh	r2, [r3]
    4c3c:	cmp	r2, #11
    4c40:	bls	4e80 <test_sort_find+0xb44>
    4c44:	ldrh	r3, [r3, #10]
    4c48:	cmp	r3, #0
    4c4c:	beq	4e80 <test_sort_find+0xb44>
    4c50:	ldr	r2, [r0, r3]
    4c54:	add	r0, r0, r3
    4c58:	movw	r1, #0
    4c5c:	movt	r1, #0
    4c60:	add	r2, r2, #4
    4c64:	add	r0, r0, r2
    4c68:	bl	0 <strcmp>
    4c6c:	cmp	r0, #0
    4c70:	bne	5664 <test_sort_find+0x1328>
    4c74:	ldr	r3, [fp, #12]
    4c78:	add	r3, r3, #12
    4c7c:	adds	r0, fp, r3
    4c80:	beq	56e0 <test_sort_find+0x13a4>
    4c84:	ldr	r3, [fp, r3]
    4c88:	sub	r3, r0, r3
    4c8c:	ldrh	r2, [r3]
    4c90:	cmp	r2, #11
    4c94:	bls	4e80 <test_sort_find+0xb44>
    4c98:	ldrh	r2, [r3, #10]
    4c9c:	cmp	r2, #0
    4ca0:	beq	4e80 <test_sort_find+0xb44>
    4ca4:	ldr	r3, [r0, r2]
    4ca8:	add	r0, r0, r2
    4cac:	movw	r1, #0
    4cb0:	movt	r1, #0
    4cb4:	add	r3, r3, #4
    4cb8:	add	r0, r0, r3
    4cbc:	bl	0 <strcmp>
    4cc0:	cmp	r0, #0
    4cc4:	bne	567c <test_sort_find+0x1340>
    4cc8:	ldr	r3, [fp, #16]
    4ccc:	add	r3, r3, #16
    4cd0:	adds	r0, fp, r3
    4cd4:	beq	56e0 <test_sort_find+0x13a4>
    4cd8:	ldr	r3, [fp, r3]
    4cdc:	sub	r3, r0, r3
    4ce0:	ldrh	r2, [r3]
    4ce4:	cmp	r2, #11
    4ce8:	bls	4e80 <test_sort_find+0xb44>
    4cec:	ldrh	r2, [r3, #10]
    4cf0:	cmp	r2, #0
    4cf4:	beq	4e80 <test_sort_find+0xb44>
    4cf8:	ldr	r3, [r0, r2]
    4cfc:	add	r0, r0, r2
    4d00:	movw	r1, #0
    4d04:	movt	r1, #0
    4d08:	add	r3, r3, #4
    4d0c:	add	r0, r0, r3
    4d10:	bl	0 <strcmp>
    4d14:	subs	r5, r0, #0
    4d18:	bne	56c4 <test_sort_find+0x1388>
    4d1c:	cmp	r4, r6
    4d20:	beq	56ac <test_sort_find+0x1370>
    4d24:	movw	r1, #0
    4d28:	movt	r1, #0
    4d2c:	mov	r0, fp
    4d30:	bl	197c <MyGame_Example_Monster_vec_find_by_name>
    4d34:	cmp	r0, #3
    4d38:	movweq	r7, #0
    4d3c:	moveq	r6, #4
    4d40:	movteq	r7, #0
    4d44:	bne	55bc <test_sort_find+0x1280>
    4d48:	sub	r4, r6, r5
    4d4c:	add	r4, r5, r4, lsr #1
    4d50:	cmp	r4, #4
    4d54:	add	r2, fp, r4, lsl #2
    4d58:	bhi	56a8 <test_sort_find+0x136c>
    4d5c:	ldr	r3, [fp, r4, lsl #2]
    4d60:	adds	r1, r2, r3
    4d64:	beq	4ff8 <test_sort_find+0xcbc>
    4d68:	ldr	r3, [r2, r3]
    4d6c:	sub	r3, r1, r3
    4d70:	ldrh	r2, [r3]
    4d74:	cmp	r2, #11
    4d78:	bhi	4de8 <test_sort_find+0xaac>
    4d7c:	b	4e80 <test_sort_find+0xb44>
    4d80:	ldr	r8, [r0, #-4]
    4d84:	mov	r1, r7
    4d88:	cmp	r8, #5
    4d8c:	movcc	r2, r8
    4d90:	movcs	r2, #5
    4d94:	bl	0 <strncmp>
    4d98:	cmp	r0, #0
    4d9c:	beq	4e58 <test_sort_find+0xb1c>
    4da0:	blt	4e08 <test_sort_find+0xacc>
    4da4:	cmp	r4, r5
    4da8:	bls	4e68 <test_sort_find+0xb2c>
    4dac:	sub	r2, r4, r5
    4db0:	add	r2, r5, r2, lsr #1
    4db4:	cmp	r2, #4
    4db8:	add	r0, fp, r2, lsl #2
    4dbc:	bhi	56a8 <test_sort_find+0x136c>
    4dc0:	ldr	r3, [fp, r2, lsl #2]
    4dc4:	adds	r1, r0, r3
    4dc8:	beq	4ff8 <test_sort_find+0xcbc>
    4dcc:	ldr	r3, [r0, r3]
    4dd0:	mov	r6, r4
    4dd4:	sub	r3, r1, r3
    4dd8:	ldrh	r0, [r3]
    4ddc:	cmp	r0, #11
    4de0:	bls	4e80 <test_sort_find+0xb44>
    4de4:	mov	r4, r2
    4de8:	ldrh	r0, [r3, #10]
    4dec:	cmp	r0, #0
    4df0:	beq	4e80 <test_sort_find+0xb44>
    4df4:	ldr	r3, [r1, r0]
    4df8:	add	r0, r1, r0
    4dfc:	add	r3, r3, #4
    4e00:	adds	r0, r0, r3
    4e04:	bne	4d80 <test_sort_find+0xa44>
    4e08:	add	r5, r4, #1
    4e0c:	cmp	r6, r5
    4e10:	bhi	4d48 <test_sort_find+0xa0c>
    4e14:	cmp	r5, r6
    4e18:	beq	4e9c <test_sort_find+0xb60>
    4e1c:	movw	r0, #0
    4e20:	movt	r0, #0
    4e24:	bl	0 <puts>
    4e28:	mvn	r3, #0
    4e2c:	str	r3, [sp, #20]
    4e30:	ldr	r0, [sp, #8]
    4e34:	bl	0 <flatcc_builder_aligned_free>
    4e38:	ldr	r0, [sp, #20]
    4e3c:	add	sp, sp, #52	; 0x34
    4e40:	ldrd	r4, [sp]
    4e44:	ldrd	r6, [sp, #8]
    4e48:	ldrd	r8, [sp, #16]
    4e4c:	ldrd	sl, [sp, #24]
    4e50:	add	sp, sp, #32
    4e54:	pop	{pc}		; (ldr pc, [sp], #4)
    4e58:	cmp	r8, #4
    4e5c:	bls	4e08 <test_sort_find+0xacc>
    4e60:	cmp	r4, r5
    4e64:	bhi	4dac <test_sort_find+0xa70>
    4e68:	mov	r6, r4
    4e6c:	b	4e14 <test_sort_find+0xad8>
    4e70:	mov	r5, r0
    4e74:	cmp	r9, r5
    4e78:	movhi	r4, r8
    4e7c:	b	482c <test_sort_find+0x4f0>
    4e80:	movw	r1, #0
    4e84:	movt	r1, #0
    4e88:	ldr	r3, [pc, #1248]	; 5370 <test_sort_find+0x1034>
    4e8c:	movw	r0, #0
    4e90:	movt	r0, #0
    4e94:	movw	r2, #699	; 0x2bb
    4e98:	bl	0 <__assert_fail>
    4e9c:	ldr	r3, [fp, r5, lsl #2]
    4ea0:	add	r0, fp, r5, lsl #2
    4ea4:	add	r0, r0, r3
    4ea8:	bl	514 <MyGame_Example_Monster_name>
    4eac:	subs	r3, r0, #0
    4eb0:	beq	4e1c <test_sort_find+0xae0>
    4eb4:	ldr	r4, [r3, #-4]
    4eb8:	movw	r1, #0
    4ebc:	movt	r1, #0
    4ec0:	cmp	r4, #5
    4ec4:	movcc	r2, r4
    4ec8:	movcs	r2, #5
    4ecc:	bl	0 <strncmp>
    4ed0:	cmp	r0, #0
    4ed4:	bne	4e1c <test_sort_find+0xae0>
    4ed8:	cmp	r4, #5
    4edc:	bne	4e1c <test_sort_find+0xae0>
    4ee0:	cmp	r5, #3
    4ee4:	bne	4e1c <test_sort_find+0xae0>
    4ee8:	movw	r6, #0
    4eec:	movt	r6, #0
    4ef0:	mov	r5, r0
    4ef4:	mov	r7, #4
    4ef8:	sub	r4, r7, r5
    4efc:	add	r4, r5, r4, lsr #1
    4f00:	cmp	r4, #4
    4f04:	add	r2, fp, r4, lsl #2
    4f08:	bhi	56a8 <test_sort_find+0x136c>
    4f0c:	ldr	r3, [fp, r4, lsl #2]
    4f10:	adds	r1, r2, r3
    4f14:	beq	4ff8 <test_sort_find+0xcbc>
    4f18:	ldr	r2, [r2, r3]
    4f1c:	sub	r2, r1, r2
    4f20:	ldrh	r3, [r2]
    4f24:	cmp	r3, #11
    4f28:	bhi	4f98 <test_sort_find+0xc5c>
    4f2c:	b	4e80 <test_sort_find+0xb44>
    4f30:	ldr	r8, [r0, #-4]
    4f34:	mov	r1, r6
    4f38:	cmp	r8, #5
    4f3c:	movcc	r2, r8
    4f40:	movcs	r2, #5
    4f44:	bl	0 <strncmp>
    4f48:	cmp	r0, #0
    4f4c:	beq	504c <test_sort_find+0xd10>
    4f50:	blt	4fb8 <test_sort_find+0xc7c>
    4f54:	cmp	r4, r5
    4f58:	bls	4fc8 <test_sort_find+0xc8c>
    4f5c:	sub	r3, r4, r5
    4f60:	add	r3, r5, r3, lsr #1
    4f64:	cmp	r3, #4
    4f68:	add	r0, fp, r3, lsl #2
    4f6c:	bhi	56a8 <test_sort_find+0x136c>
    4f70:	ldr	r2, [fp, r3, lsl #2]
    4f74:	adds	r1, r0, r2
    4f78:	beq	4ff8 <test_sort_find+0xcbc>
    4f7c:	ldr	r2, [r0, r2]
    4f80:	mov	r7, r4
    4f84:	sub	r2, r1, r2
    4f88:	ldrh	r0, [r2]
    4f8c:	cmp	r0, #11
    4f90:	bls	4e80 <test_sort_find+0xb44>
    4f94:	mov	r4, r3
    4f98:	ldrh	r0, [r2, #10]
    4f9c:	cmp	r0, #0
    4fa0:	beq	4e80 <test_sort_find+0xb44>
    4fa4:	ldr	r3, [r1, r0]
    4fa8:	add	r0, r1, r0
    4fac:	add	r3, r3, #4
    4fb0:	adds	r0, r0, r3
    4fb4:	bne	4f30 <test_sort_find+0xbf4>
    4fb8:	add	r5, r4, #1
    4fbc:	cmp	r7, r5
    4fc0:	bhi	4ef8 <test_sort_find+0xbbc>
    4fc4:	mov	r4, r7
    4fc8:	cmp	r4, r5
    4fcc:	beq	5058 <test_sort_find+0xd1c>
    4fd0:	movw	r0, #0
    4fd4:	movt	r0, #0
    4fd8:	bl	0 <puts>
    4fdc:	mvn	r3, #0
    4fe0:	str	r3, [sp, #20]
    4fe4:	b	4e30 <test_sort_find+0xaf4>
    4fe8:	mov	r5, r0
    4fec:	cmp	r9, r5
    4ff0:	movhi	r4, r8
    4ff4:	b	4a88 <test_sort_find+0x74c>
    4ff8:	movw	r1, #0
    4ffc:	movt	r1, #0
    5000:	ldr	r3, [pc, #872]	; 5370 <test_sort_find+0x1034>
    5004:	movw	r0, #0
    5008:	movt	r0, #0
    500c:	movw	r2, #699	; 0x2bb
    5010:	bl	0 <__assert_fail>
    5014:	movw	r1, #0
    5018:	movt	r1, #0
    501c:	ldr	r3, [pc, #848]	; 5374 <test_sort_find+0x1038>
    5020:	movw	r0, #0
    5024:	movt	r0, #0
    5028:	movw	r2, #693	; 0x2b5
    502c:	bl	0 <__assert_fail>
    5030:	movw	r1, #0
    5034:	movt	r1, #0
    5038:	ldr	r3, [pc, #824]	; 5378 <test_sort_find+0x103c>
    503c:	movw	r0, #0
    5040:	movt	r0, #0
    5044:	movw	r2, #1147	; 0x47b
    5048:	bl	0 <__assert_fail>
    504c:	cmp	r8, #4
    5050:	bhi	4f54 <test_sort_find+0xc18>
    5054:	b	4fb8 <test_sort_find+0xc7c>
    5058:	ldr	r3, [fp, r4, lsl #2]
    505c:	add	r0, fp, r4, lsl #2
    5060:	add	r0, r0, r3
    5064:	bl	514 <MyGame_Example_Monster_name>
    5068:	subs	r3, r0, #0
    506c:	beq	4fd0 <test_sort_find+0xc94>
    5070:	ldr	r7, [r3, #-4]
    5074:	movw	r1, #0
    5078:	movt	r1, #0
    507c:	cmp	r7, #5
    5080:	movcc	r2, r7
    5084:	movcs	r2, #5
    5088:	bl	0 <strncmp>
    508c:	subs	r3, r0, #0
    5090:	str	r3, [sp, #20]
    5094:	bne	4fd0 <test_sort_find+0xc94>
    5098:	cmp	r7, #5
    509c:	bne	4fd0 <test_sort_find+0xc94>
    50a0:	cmp	r4, #3
    50a4:	bne	4fd0 <test_sort_find+0xc94>
    50a8:	movw	r1, #0
    50ac:	movt	r1, #0
    50b0:	mov	r0, fp
    50b4:	bl	197c <MyGame_Example_Monster_vec_find_by_name>
    50b8:	cmn	r0, #1
    50bc:	mov	r4, r0
    50c0:	bne	55d4 <test_sort_find+0x1298>
    50c4:	movw	r1, #0
    50c8:	movt	r1, #0
    50cc:	mov	r0, fp
    50d0:	bl	197c <MyGame_Example_Monster_vec_find_by_name>
    50d4:	cmp	r0, #0
    50d8:	bne	5694 <test_sort_find+0x1358>
    50dc:	movw	r1, #0
    50e0:	movt	r1, #0
    50e4:	mov	r0, fp
    50e8:	bl	197c <MyGame_Example_Monster_vec_find_by_name>
    50ec:	cmp	r0, #1
    50f0:	mov	r5, r0
    50f4:	bne	55ec <test_sort_find+0x12b0>
    50f8:	movw	r1, #0
    50fc:	movt	r1, #0
    5100:	mov	r0, fp
    5104:	bl	197c <MyGame_Example_Monster_vec_find_by_name>
    5108:	cmp	r0, #4
    510c:	str	r0, [sp, #4]
    5110:	moveq	r8, #2
    5114:	moveq	sl, r8
    5118:	bne	5610 <test_sort_find+0x12d4>
    511c:	lsl	r4, sl, #1
    5120:	mov	r5, sl
    5124:	b	5190 <test_sort_find+0xe54>
    5128:	cmp	r0, #0
    512c:	ldr	r9, [r1, #-4]
    5130:	beq	5318 <test_sort_find+0xfdc>
    5134:	ldr	r8, [r0, #-4]
    5138:	str	r3, [sp, #16]
    513c:	cmp	r9, r8
    5140:	movcc	r2, r9
    5144:	movcs	r2, r8
    5148:	bl	0 <strncmp>
    514c:	cmp	r0, #0
    5150:	ldr	r3, [sp, #16]
    5154:	beq	531c <test_sort_find+0xfe0>
    5158:	bge	5304 <test_sort_find+0xfc8>
    515c:	sub	r5, r5, r4
    5160:	lsl	r2, r4, #1
    5164:	lsl	r5, r5, #2
    5168:	cmp	r2, #4
    516c:	sub	r7, r7, r5
    5170:	add	r6, r6, r5
    5174:	str	r7, [fp, r3]
    5178:	ldr	r3, [sp, #12]
    517c:	str	r6, [fp, r3]
    5180:	bhi	5304 <test_sort_find+0xfc8>
    5184:	ldr	r7, [fp, #-4]
    5188:	mov	r5, r4
    518c:	mov	r4, r2
    5190:	cmp	r4, #4
    5194:	beq	5264 <test_sort_find+0xf28>
    5198:	lsl	r3, r4, #2
    519c:	cmp	r7, r4
    51a0:	add	r0, fp, r3
    51a4:	bls	5014 <test_sort_find+0xcd8>
    51a8:	ldr	r1, [fp, r4, lsl #2]
    51ac:	adds	r2, r0, r1
    51b0:	beq	4ff8 <test_sort_find+0xcbc>
    51b4:	ldr	r1, [r0, r1]
    51b8:	sub	r1, r2, r1
    51bc:	ldrh	r0, [r1]
    51c0:	cmp	r0, #11
    51c4:	bls	4e80 <test_sort_find+0xb44>
    51c8:	ldrh	r1, [r1, #10]
    51cc:	cmp	r1, #0
    51d0:	beq	4e80 <test_sort_find+0xb44>
    51d4:	ldr	r0, [r2, r1]
    51d8:	add	r8, r4, #1
    51dc:	add	r3, r3, #4
    51e0:	add	r2, r2, r1
    51e4:	cmp	r7, r8
    51e8:	add	ip, fp, r3
    51ec:	add	r0, r0, #4
    51f0:	add	r0, r2, r0
    51f4:	bls	5014 <test_sort_find+0xcd8>
    51f8:	ldr	r3, [fp, r3]
    51fc:	adds	r1, ip, r3
    5200:	beq	4ff8 <test_sort_find+0xcbc>
    5204:	ldr	r3, [ip, r3]
    5208:	sub	r3, r1, r3
    520c:	ldrh	r2, [r3]
    5210:	cmp	r2, #11
    5214:	bls	4e80 <test_sort_find+0xb44>
    5218:	ldrh	r2, [r3, #10]
    521c:	cmp	r2, #0
    5220:	beq	4e80 <test_sort_find+0xb44>
    5224:	ldr	r3, [r1, r2]
    5228:	add	r1, r1, r2
    522c:	add	r3, r3, #4
    5230:	adds	r1, r1, r3
    5234:	ldrne	r9, [r1, #-4]
    5238:	moveq	r9, #0
    523c:	cmp	r0, #0
    5240:	beq	5594 <test_sort_find+0x1258>
    5244:	ldr	r6, [r0, #-4]
    5248:	cmp	r9, r6
    524c:	movcc	r2, r9
    5250:	movcs	r2, r6
    5254:	bl	0 <strncmp>
    5258:	cmp	r0, #0
    525c:	beq	5598 <test_sort_find+0x125c>
    5260:	movlt	r4, r8
    5264:	lsl	r3, r5, #2
    5268:	cmp	r7, r5
    526c:	add	r2, fp, r3
    5270:	bls	5014 <test_sort_find+0xcd8>
    5274:	ldr	r6, [fp, r5, lsl #2]
    5278:	adds	r0, r2, r6
    527c:	beq	4ff8 <test_sort_find+0xcbc>
    5280:	ldr	r2, [r2, r6]
    5284:	sub	r2, r0, r2
    5288:	ldrh	r1, [r2]
    528c:	cmp	r1, #11
    5290:	bls	4e80 <test_sort_find+0xb44>
    5294:	ldrh	r2, [r2, #10]
    5298:	cmp	r2, #0
    529c:	beq	4e80 <test_sort_find+0xb44>
    52a0:	ldr	r1, [r0, r2]
    52a4:	lsl	ip, r4, #2
    52a8:	add	r0, r0, r2
    52ac:	cmp	r7, r4
    52b0:	add	r2, fp, ip
    52b4:	str	ip, [sp, #12]
    52b8:	add	r1, r1, #4
    52bc:	add	r0, r0, r1
    52c0:	bls	5014 <test_sort_find+0xcd8>
    52c4:	ldr	r7, [fp, r4, lsl #2]
    52c8:	adds	r1, r2, r7
    52cc:	beq	4ff8 <test_sort_find+0xcbc>
    52d0:	ldr	r2, [r2, r7]
    52d4:	sub	r2, r1, r2
    52d8:	ldrh	ip, [r2]
    52dc:	cmp	ip, #11
    52e0:	bls	4e80 <test_sort_find+0xb44>
    52e4:	ldrh	ip, [r2, #10]
    52e8:	cmp	ip, #0
    52ec:	beq	4e80 <test_sort_find+0xb44>
    52f0:	ldr	r2, [r1, ip]
    52f4:	add	r1, r1, ip
    52f8:	add	r2, r2, #4
    52fc:	adds	r1, r1, r2
    5300:	bne	5128 <test_sort_find+0xdec>
    5304:	cmp	sl, #0
    5308:	beq	532c <test_sort_find+0xff0>
    530c:	sub	sl, sl, #1
    5310:	ldr	r7, [fp, #-4]
    5314:	b	511c <test_sort_find+0xde0>
    5318:	mov	r8, #0
    531c:	cmp	r9, r8
    5320:	bhi	515c <test_sort_find+0xe20>
    5324:	cmp	sl, #0
    5328:	bne	530c <test_sort_find+0xfd0>
    532c:	add	r5, fp, #16
    5330:	ldr	r1, [sp, #4]
    5334:	sub	r0, r5, fp
    5338:	sub	r3, fp, r5
    533c:	mov	r7, #0
    5340:	ldr	r2, [r5]
    5344:	mov	r4, r7
    5348:	sub	r1, r1, #1
    534c:	str	r1, [sp, #4]
    5350:	add	r2, r2, r0
    5354:	ldr	r1, [fp]
    5358:	str	r2, [fp]
    535c:	add	r3, r3, r1
    5360:	str	r3, [r5], #-4
    5364:	str	r5, [sp, #16]
    5368:	b	53e0 <test_sort_find+0x10a4>
    536c:	.word	0x00000404
    5370:	.word	0x0000020c
    5374:	.word	0x000001ac
    5378:	.word	0x00000518
    537c:	cmp	r0, #0
    5380:	ldr	r3, [r1, #-4]
    5384:	beq	5578 <test_sort_find+0x123c>
    5388:	ldr	r8, [r0, #-4]
    538c:	str	r3, [sp, #12]
    5390:	cmp	r3, r8
    5394:	movcc	r2, r3
    5398:	movcs	r2, r8
    539c:	bl	0 <strncmp>
    53a0:	cmp	r0, #0
    53a4:	ldr	r3, [sp, #12]
    53a8:	beq	557c <test_sort_find+0x1240>
    53ac:	bge	5558 <test_sort_find+0x121c>
    53b0:	ldr	r1, [sp, #4]
    53b4:	sub	r3, r7, r4
    53b8:	lsl	r2, r4, #1
    53bc:	lsl	r3, r3, #2
    53c0:	mov	r7, r4
    53c4:	sub	r6, r6, r3
    53c8:	add	r5, r5, r3
    53cc:	cmp	r1, r2
    53d0:	str	r6, [fp, sl]
    53d4:	str	r5, [fp, r9]
    53d8:	bcc	5558 <test_sort_find+0x121c>
    53dc:	mov	r4, r2
    53e0:	ldr	r3, [sp, #4]
    53e4:	ldr	r6, [fp, #-4]
    53e8:	cmp	r3, r4
    53ec:	bls	54bc <test_sort_find+0x1180>
    53f0:	lsl	r3, r4, #2
    53f4:	cmp	r6, r4
    53f8:	add	r0, fp, r3
    53fc:	bls	5014 <test_sort_find+0xcd8>
    5400:	ldr	r1, [fp, r4, lsl #2]
    5404:	adds	r2, r0, r1
    5408:	beq	4ff8 <test_sort_find+0xcbc>
    540c:	ldr	r1, [r0, r1]
    5410:	sub	r1, r2, r1
    5414:	ldrh	r0, [r1]
    5418:	cmp	r0, #11
    541c:	bls	4e80 <test_sort_find+0xb44>
    5420:	ldrh	r1, [r1, #10]
    5424:	cmp	r1, #0
    5428:	beq	4e80 <test_sort_find+0xb44>
    542c:	ldr	r0, [r2, r1]
    5430:	add	r5, r4, #1
    5434:	add	r3, r3, #4
    5438:	add	r2, r2, r1
    543c:	cmp	r5, r6
    5440:	add	ip, fp, r3
    5444:	add	r0, r0, #4
    5448:	add	r0, r2, r0
    544c:	bcs	5014 <test_sort_find+0xcd8>
    5450:	ldr	r3, [fp, r3]
    5454:	adds	r1, ip, r3
    5458:	beq	4ff8 <test_sort_find+0xcbc>
    545c:	ldr	r3, [ip, r3]
    5460:	sub	r3, r1, r3
    5464:	ldrh	r2, [r3]
    5468:	cmp	r2, #11
    546c:	bls	4e80 <test_sort_find+0xb44>
    5470:	ldrh	r2, [r3, #10]
    5474:	cmp	r2, #0
    5478:	beq	4e80 <test_sort_find+0xb44>
    547c:	ldr	r3, [r1, r2]
    5480:	add	r1, r1, r2
    5484:	add	r3, r3, #4
    5488:	adds	r1, r1, r3
    548c:	beq	54bc <test_sort_find+0x1180>
    5490:	cmp	r0, #0
    5494:	ldr	r9, [r1, #-4]
    5498:	beq	5568 <test_sort_find+0x122c>
    549c:	ldr	r8, [r0, #-4]
    54a0:	cmp	r9, r8
    54a4:	movcc	r2, r9
    54a8:	movcs	r2, r8
    54ac:	bl	0 <strncmp>
    54b0:	cmp	r0, #0
    54b4:	beq	556c <test_sort_find+0x1230>
    54b8:	movlt	r4, r5
    54bc:	lsl	sl, r7, #2
    54c0:	cmp	r6, r7
    54c4:	add	r3, fp, sl
    54c8:	bls	5014 <test_sort_find+0xcd8>
    54cc:	ldr	r5, [fp, r7, lsl #2]
    54d0:	adds	r0, r3, r5
    54d4:	beq	4ff8 <test_sort_find+0xcbc>
    54d8:	ldr	r3, [r3, r5]
    54dc:	sub	r3, r0, r3
    54e0:	ldrh	r2, [r3]
    54e4:	cmp	r2, #11
    54e8:	bls	4e80 <test_sort_find+0xb44>
    54ec:	ldrh	r3, [r3, #10]
    54f0:	cmp	r3, #0
    54f4:	beq	4e80 <test_sort_find+0xb44>
    54f8:	ldr	r2, [r0, r3]
    54fc:	lsl	r9, r4, #2
    5500:	add	r0, r0, r3
    5504:	cmp	r4, r6
    5508:	add	r3, fp, r9
    550c:	add	r2, r2, #4
    5510:	add	r0, r0, r2
    5514:	bcs	5014 <test_sort_find+0xcd8>
    5518:	ldr	r6, [fp, r4, lsl #2]
    551c:	adds	r1, r3, r6
    5520:	beq	4ff8 <test_sort_find+0xcbc>
    5524:	ldr	r3, [r3, r6]
    5528:	sub	r3, r1, r3
    552c:	ldrh	r2, [r3]
    5530:	cmp	r2, #11
    5534:	bls	4e80 <test_sort_find+0xb44>
    5538:	ldrh	r2, [r3, #10]
    553c:	cmp	r2, #0
    5540:	beq	4e80 <test_sort_find+0xb44>
    5544:	ldr	r3, [r1, r2]
    5548:	add	r1, r1, r2
    554c:	add	r3, r3, #4
    5550:	adds	r1, r1, r3
    5554:	bne	537c <test_sort_find+0x1040>
    5558:	ldr	r5, [sp, #16]
    555c:	cmp	fp, r5
    5560:	bne	5330 <test_sort_find+0xff4>
    5564:	b	4e30 <test_sort_find+0xaf4>
    5568:	mov	r8, r0
    556c:	cmp	r9, r8
    5570:	movhi	r4, r5
    5574:	b	54bc <test_sort_find+0x1180>
    5578:	mov	r8, #0
    557c:	cmp	r3, r8
    5580:	bhi	53b0 <test_sort_find+0x1074>
    5584:	ldr	r5, [sp, #16]
    5588:	cmp	fp, r5
    558c:	bne	5330 <test_sort_find+0xff4>
    5590:	b	4e30 <test_sort_find+0xaf4>
    5594:	mov	r6, r0
    5598:	cmp	r9, r6
    559c:	movhi	r4, r8
    55a0:	b	5264 <test_sort_find+0xf28>
    55a4:	movw	r0, #0
    55a8:	movt	r0, #0
    55ac:	bl	0 <puts>
    55b0:	mvn	r3, #0
    55b4:	str	r3, [sp, #20]
    55b8:	b	4e30 <test_sort_find+0xaf4>
    55bc:	movw	r0, #0
    55c0:	movt	r0, #0
    55c4:	bl	0 <puts>
    55c8:	mvn	r3, #0
    55cc:	str	r3, [sp, #20]
    55d0:	b	4e30 <test_sort_find+0xaf4>
    55d4:	movw	r0, #0
    55d8:	movt	r0, #0
    55dc:	bl	0 <puts>
    55e0:	mvn	r3, #0
    55e4:	str	r3, [sp, #20]
    55e8:	b	4e30 <test_sort_find+0xaf4>
    55ec:	movw	r0, #0
    55f0:	movt	r0, #0
    55f4:	bl	0 <puts>
    55f8:	mov	r1, r5
    55fc:	movw	r0, #0
    5600:	movt	r0, #0
    5604:	str	r4, [sp, #20]
    5608:	bl	0 <printf>
    560c:	b	4e30 <test_sort_find+0xaf4>
    5610:	movw	r0, #0
    5614:	movt	r0, #0
    5618:	bl	0 <puts>
    561c:	movw	r0, #0
    5620:	movt	r0, #0
    5624:	ldr	r1, [sp, #4]
    5628:	str	r4, [sp, #20]
    562c:	bl	0 <printf>
    5630:	b	4e30 <test_sort_find+0xaf4>
    5634:	movw	r0, #0
    5638:	movt	r0, #0
    563c:	bl	0 <puts>
    5640:	mvn	r3, #0
    5644:	str	r3, [sp, #20]
    5648:	b	4e30 <test_sort_find+0xaf4>
    564c:	movw	r0, #0
    5650:	movt	r0, #0
    5654:	bl	0 <puts>
    5658:	mvn	r3, #0
    565c:	str	r3, [sp, #20]
    5660:	b	4e30 <test_sort_find+0xaf4>
    5664:	movw	r0, #0
    5668:	movt	r0, #0
    566c:	bl	0 <puts>
    5670:	mvn	r3, #0
    5674:	str	r3, [sp, #20]
    5678:	b	4e30 <test_sort_find+0xaf4>
    567c:	movw	r0, #0
    5680:	movt	r0, #0
    5684:	bl	0 <puts>
    5688:	mvn	r3, #0
    568c:	str	r3, [sp, #20]
    5690:	b	4e30 <test_sort_find+0xaf4>
    5694:	movw	r0, #0
    5698:	movt	r0, #0
    569c:	str	r4, [sp, #20]
    56a0:	bl	0 <puts>
    56a4:	b	4e30 <test_sort_find+0xaf4>
    56a8:	bl	3e8 <MyGame_Example_Monster_vec_at.part.23>
    56ac:	movw	r0, #0
    56b0:	movt	r0, #0
    56b4:	bl	0 <puts>
    56b8:	mvn	r3, #0
    56bc:	str	r3, [sp, #20]
    56c0:	b	4e30 <test_sort_find+0xaf4>
    56c4:	movw	r0, #0
    56c8:	movt	r0, #0
    56cc:	bl	0 <puts>
    56d0:	mvn	r3, #0
    56d4:	str	r3, [sp, #20]
    56d8:	b	4e30 <test_sort_find+0xaf4>
    56dc:	bl	7dc <MyGame_Example_Monster_end.part.49>
    56e0:	bl	4ec <MyGame_Example_Monster_name.part.26>

000056e4 <test_scan>:
    56e4:	ldr	r2, [pc, #4052]	; 66c0 <test_scan+0xfdc>
    56e8:	movw	r3, #0
    56ec:	movt	r3, #0
    56f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
    56f4:	mov	r4, r0
    56f8:	ldr	ip, [r3, #1320]	; 0x528
    56fc:	strd	r6, [sp, #8]
    5700:	strd	r8, [sp, #16]
    5704:	ldrh	r1, [r2, #4]
    5708:	strd	sl, [sp, #24]
    570c:	ldrb	r3, [r2, #6]
    5710:	str	lr, [sp, #32]
    5714:	sub	sp, sp, #84	; 0x54
    5718:	str	ip, [sp, #72]	; 0x48
    571c:	strh	r1, [sp, #76]	; 0x4c
    5720:	strb	r3, [sp, #78]	; 0x4e
    5724:	bl	0 <flatcc_builder_reset>
    5728:	mov	r3, #0
    572c:	mov	r0, r4
    5730:	mov	r2, r3
    5734:	movw	r1, #0
    5738:	movt	r1, #0
    573c:	bl	0 <flatcc_builder_start_buffer>
    5740:	cmp	r0, #0
    5744:	bne	5754 <test_scan+0x70>
    5748:	mov	r1, #36	; 0x24
    574c:	mov	r0, r4
    5750:	bl	0 <flatcc_builder_start_table>
    5754:	movw	r1, #0
    5758:	movt	r1, #0
    575c:	mov	r0, r4
    5760:	bl	0 <flatcc_builder_create_string_str>
    5764:	subs	r5, r0, #0
    5768:	beq	5780 <test_scan+0x9c>
    576c:	mov	r1, #3
    5770:	mov	r0, r4
    5774:	bl	0 <flatcc_builder_table_add_offset>
    5778:	cmp	r0, #0
    577c:	strne	r5, [r0]
    5780:	mov	r2, #1
    5784:	mvn	ip, #0
    5788:	mov	r3, r2
    578c:	add	r1, sp, #72	; 0x48
    5790:	mov	r0, r4
    5794:	stm	sp, {r2, ip}
    5798:	mov	r2, #7
    579c:	bl	0 <flatcc_builder_create_vector>
    57a0:	subs	r5, r0, #0
    57a4:	beq	57bc <test_scan+0xd8>
    57a8:	mov	r1, #5
    57ac:	mov	r0, r4
    57b0:	bl	0 <flatcc_builder_table_add_offset>
    57b4:	cmp	r0, #0
    57b8:	strne	r5, [r0]
    57bc:	mov	r0, r4
    57c0:	bl	0 <flatcc_builder_start_offset_vector>
    57c4:	mov	r0, r4
    57c8:	bl	0 <flatcc_builder_end_offset_vector>
    57cc:	subs	r5, r0, #0
    57d0:	beq	57e8 <test_scan+0x104>
    57d4:	mov	r1, #10
    57d8:	mov	r0, r4
    57dc:	bl	0 <flatcc_builder_table_add_offset>
    57e0:	cmp	r0, #0
    57e4:	strne	r5, [r0]
    57e8:	mov	r0, r4
    57ec:	bl	0 <flatcc_builder_start_offset_vector>
    57f0:	mov	r1, #36	; 0x24
    57f4:	mov	r0, r4
    57f8:	bl	0 <flatcc_builder_start_table>
    57fc:	movw	r1, #0
    5800:	movt	r1, #0
    5804:	mov	r0, r4
    5808:	bl	0 <flatcc_builder_create_string_str>
    580c:	subs	r5, r0, #0
    5810:	beq	5828 <test_scan+0x144>
    5814:	mov	r1, #3
    5818:	mov	r0, r4
    581c:	bl	0 <flatcc_builder_table_add_offset>
    5820:	cmp	r0, #0
    5824:	strne	r5, [r0]
    5828:	mov	r2, #1
    582c:	ldr	r1, [pc, #3728]	; 66c4 <test_scan+0xfe0>
    5830:	mov	r0, r4
    5834:	bl	0 <flatcc_builder_check_required>
    5838:	cmp	r0, #0
    583c:	beq	6f78 <test_scan+0x1894>
    5840:	mov	r0, r4
    5844:	bl	0 <flatcc_builder_end_table>
    5848:	subs	r1, r0, #0
    584c:	beq	5858 <test_scan+0x174>
    5850:	mov	r0, r4
    5854:	bl	0 <flatcc_builder_offset_vector_push>
    5858:	mov	r1, #36	; 0x24
    585c:	mov	r0, r4
    5860:	bl	0 <flatcc_builder_start_table>
    5864:	movw	r1, #0
    5868:	movt	r1, #0
    586c:	mov	r0, r4
    5870:	bl	0 <flatcc_builder_create_string_str>
    5874:	subs	r5, r0, #0
    5878:	beq	5890 <test_scan+0x1ac>
    587c:	mov	r1, #3
    5880:	mov	r0, r4
    5884:	bl	0 <flatcc_builder_table_add_offset>
    5888:	cmp	r0, #0
    588c:	strne	r5, [r0]
    5890:	mov	r2, #1
    5894:	ldr	r1, [pc, #3624]	; 66c4 <test_scan+0xfe0>
    5898:	mov	r0, r4
    589c:	bl	0 <flatcc_builder_check_required>
    58a0:	cmp	r0, #0
    58a4:	beq	6f78 <test_scan+0x1894>
    58a8:	mov	r0, r4
    58ac:	bl	0 <flatcc_builder_end_table>
    58b0:	subs	r1, r0, #0
    58b4:	beq	58c0 <test_scan+0x1dc>
    58b8:	mov	r0, r4
    58bc:	bl	0 <flatcc_builder_offset_vector_push>
    58c0:	mov	r1, #36	; 0x24
    58c4:	mov	r0, r4
    58c8:	bl	0 <flatcc_builder_start_table>
    58cc:	movw	r1, #0
    58d0:	movt	r1, #0
    58d4:	mov	r0, r4
    58d8:	bl	0 <flatcc_builder_create_string_str>
    58dc:	subs	r5, r0, #0
    58e0:	beq	58f8 <test_scan+0x214>
    58e4:	mov	r1, #3
    58e8:	mov	r0, r4
    58ec:	bl	0 <flatcc_builder_table_add_offset>
    58f0:	cmp	r0, #0
    58f4:	strne	r5, [r0]
    58f8:	mov	r2, #1
    58fc:	ldr	r1, [pc, #3520]	; 66c4 <test_scan+0xfe0>
    5900:	mov	r0, r4
    5904:	bl	0 <flatcc_builder_check_required>
    5908:	cmp	r0, #0
    590c:	beq	6f78 <test_scan+0x1894>
    5910:	mov	r0, r4
    5914:	bl	0 <flatcc_builder_end_table>
    5918:	subs	r1, r0, #0
    591c:	beq	5928 <test_scan+0x244>
    5920:	mov	r0, r4
    5924:	bl	0 <flatcc_builder_offset_vector_push>
    5928:	mov	r1, #36	; 0x24
    592c:	mov	r0, r4
    5930:	bl	0 <flatcc_builder_start_table>
    5934:	movw	r1, #0
    5938:	movt	r1, #0
    593c:	mov	r0, r4
    5940:	bl	0 <flatcc_builder_create_string_str>
    5944:	subs	r5, r0, #0
    5948:	beq	5960 <test_scan+0x27c>
    594c:	mov	r1, #3
    5950:	mov	r0, r4
    5954:	bl	0 <flatcc_builder_table_add_offset>
    5958:	cmp	r0, #0
    595c:	strne	r5, [r0]
    5960:	mov	r2, #1
    5964:	ldr	r1, [pc, #3416]	; 66c4 <test_scan+0xfe0>
    5968:	mov	r0, r4
    596c:	bl	0 <flatcc_builder_check_required>
    5970:	cmp	r0, #0
    5974:	beq	6f78 <test_scan+0x1894>
    5978:	mov	r0, r4
    597c:	bl	0 <flatcc_builder_end_table>
    5980:	subs	r1, r0, #0
    5984:	beq	5990 <test_scan+0x2ac>
    5988:	mov	r0, r4
    598c:	bl	0 <flatcc_builder_offset_vector_push>
    5990:	mov	r1, #36	; 0x24
    5994:	mov	r0, r4
    5998:	bl	0 <flatcc_builder_start_table>
    599c:	movw	r1, #0
    59a0:	movt	r1, #0
    59a4:	mov	r0, r4
    59a8:	bl	0 <flatcc_builder_create_string_str>
    59ac:	subs	r5, r0, #0
    59b0:	beq	59c8 <test_scan+0x2e4>
    59b4:	mov	r1, #3
    59b8:	mov	r0, r4
    59bc:	bl	0 <flatcc_builder_table_add_offset>
    59c0:	cmp	r0, #0
    59c4:	strne	r5, [r0]
    59c8:	mov	r2, #1
    59cc:	ldr	r1, [pc, #3312]	; 66c4 <test_scan+0xfe0>
    59d0:	mov	r0, r4
    59d4:	bl	0 <flatcc_builder_check_required>
    59d8:	cmp	r0, #0
    59dc:	beq	6f78 <test_scan+0x1894>
    59e0:	mov	r0, r4
    59e4:	bl	0 <flatcc_builder_end_table>
    59e8:	subs	r1, r0, #0
    59ec:	beq	59f8 <test_scan+0x314>
    59f0:	mov	r0, r4
    59f4:	bl	0 <flatcc_builder_offset_vector_push>
    59f8:	mov	r0, r4
    59fc:	bl	0 <flatcc_builder_end_offset_vector>
    5a00:	subs	r5, r0, #0
    5a04:	beq	5a1c <test_scan+0x338>
    5a08:	mov	r1, #11
    5a0c:	mov	r0, r4
    5a10:	bl	0 <flatcc_builder_table_add_offset>
    5a14:	cmp	r0, #0
    5a18:	strne	r5, [r0]
    5a1c:	mov	r2, #1
    5a20:	ldr	r1, [pc, #3228]	; 66c4 <test_scan+0xfe0>
    5a24:	mov	r0, r4
    5a28:	bl	0 <flatcc_builder_check_required>
    5a2c:	cmp	r0, #0
    5a30:	beq	6f78 <test_scan+0x1894>
    5a34:	mov	r0, r4
    5a38:	bl	0 <flatcc_builder_end_table>
    5a3c:	mov	r1, r0
    5a40:	mov	r0, r4
    5a44:	bl	0 <flatcc_builder_end_buffer>
    5a48:	mov	r0, r4
    5a4c:	add	r1, sp, #68	; 0x44
    5a50:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    5a54:	subs	r3, r0, #0
    5a58:	str	r3, [sp, #28]
    5a5c:	beq	5a74 <test_scan+0x390>
    5a60:	ldr	r2, [r3, #4]
    5a64:	movw	r3, #20301	; 0x4f4d
    5a68:	movt	r3, #21326	; 0x534e
    5a6c:	cmp	r2, r3
    5a70:	beq	5a78 <test_scan+0x394>
    5a74:	bl	3c0 <MyGame_Example_Monster_testarrayoftables.part.22>
    5a78:	ldr	r3, [r0]
    5a7c:	adds	r2, r0, r3
    5a80:	beq	5a74 <test_scan+0x390>
    5a84:	ldr	r1, [sp, #28]
    5a88:	ldr	r3, [r1, r3]
    5a8c:	sub	r3, r2, r3
    5a90:	ldrh	r1, [r3]
    5a94:	cmp	r1, #27
    5a98:	bls	6cac <test_scan+0x15c8>
    5a9c:	ldrh	r0, [r3, #26]
    5aa0:	cmp	r0, #0
    5aa4:	beq	6cac <test_scan+0x15c8>
    5aa8:	ldr	r1, [r2, r0]
    5aac:	add	r0, r2, r0
    5ab0:	add	r1, r1, #4
    5ab4:	adds	ip, r0, r1
    5ab8:	str	ip, [sp, #12]
    5abc:	beq	6cac <test_scan+0x15c8>
    5ac0:	ldrh	ip, [r3, #14]
    5ac4:	cmp	ip, #0
    5ac8:	beq	6f80 <test_scan+0x189c>
    5acc:	ldr	lr, [r2, ip]
    5ad0:	add	ip, r2, ip
    5ad4:	str	ip, [sp, #56]	; 0x38
    5ad8:	add	lr, lr, #4
    5adc:	adds	ip, ip, lr
    5ae0:	str	ip, [sp, #32]
    5ae4:	str	lr, [sp, #60]	; 0x3c
    5ae8:	beq	6f80 <test_scan+0x189c>
    5aec:	ldrh	r7, [r3, #24]
    5af0:	cmp	r7, #0
    5af4:	beq	6f9c <test_scan+0x18b8>
    5af8:	ldr	r3, [r2, r7]
    5afc:	add	r2, r2, r7
    5b00:	add	r7, r3, #4
    5b04:	adds	r3, r2, r7
    5b08:	str	r3, [sp, #40]	; 0x28
    5b0c:	beq	6f9c <test_scan+0x18b8>
    5b10:	adds	r2, r0, r1
    5b14:	ldr	r4, [r2, #-4]
    5b18:	cmp	r4, #0
    5b1c:	beq	5bdc <test_scan+0x4f8>
    5b20:	ldr	r3, [r0, r1]
    5b24:	mov	r1, r2
    5b28:	adds	r2, r2, r3
    5b2c:	str	r2, [sp, #20]
    5b30:	beq	6cc8 <test_scan+0x15e4>
    5b34:	ldr	r3, [r1, r3]
    5b38:	sub	r3, r2, r3
    5b3c:	ldrh	r0, [r3]
    5b40:	cmp	r0, #11
    5b44:	str	r0, [sp, #44]	; 0x2c
    5b48:	str	r3, [sp, #52]	; 0x34
    5b4c:	bls	6c90 <test_scan+0x15ac>
    5b50:	ldrh	r7, [r3, #10]
    5b54:	cmp	r7, #0
    5b58:	beq	6c90 <test_scan+0x15ac>
    5b5c:	add	r8, r1, #4
    5b60:	movw	r5, #0
    5b64:	movt	r5, #0
    5b68:	mov	r0, r7
    5b6c:	mov	r6, #0
    5b70:	str	r8, [sp, #24]
    5b74:	str	r8, [sp, #48]	; 0x30
    5b78:	b	5bb0 <test_scan+0x4cc>
    5b7c:	mov	r3, r8
    5b80:	add	r8, r8, #4
    5b84:	ldr	r1, [r3]
    5b88:	adds	r2, r3, r1
    5b8c:	beq	6cc8 <test_scan+0x15e4>
    5b90:	ldr	r3, [r3, r1]
    5b94:	sub	r3, r2, r3
    5b98:	ldrh	r1, [r3]
    5b9c:	cmp	r1, #11
    5ba0:	bls	6c90 <test_scan+0x15ac>
    5ba4:	ldrh	r0, [r3, #10]
    5ba8:	cmp	r0, #0
    5bac:	beq	6c90 <test_scan+0x15ac>
    5bb0:	ldr	r3, [r2, r0]
    5bb4:	add	r2, r2, r0
    5bb8:	mov	r1, r5
    5bbc:	add	r0, r3, #4
    5bc0:	add	r0, r2, r0
    5bc4:	bl	0 <strcmp>
    5bc8:	cmp	r0, #0
    5bcc:	beq	5c18 <test_scan+0x534>
    5bd0:	add	r6, r6, #1
    5bd4:	cmp	r6, r4
    5bd8:	bne	5b7c <test_scan+0x498>
    5bdc:	movw	r0, #0
    5be0:	movt	r0, #0
    5be4:	bl	0 <puts>
    5be8:	mvn	r3, #0
    5bec:	str	r3, [sp, #36]	; 0x24
    5bf0:	ldr	r0, [sp, #28]
    5bf4:	bl	0 <flatcc_builder_aligned_free>
    5bf8:	ldr	r0, [sp, #36]	; 0x24
    5bfc:	add	sp, sp, #84	; 0x54
    5c00:	ldrd	r4, [sp]
    5c04:	ldrd	r6, [sp, #8]
    5c08:	ldrd	r8, [sp, #16]
    5c0c:	ldrd	sl, [sp, #24]
    5c10:	add	sp, sp, #32
    5c14:	pop	{pc}		; (ldr pc, [sp], #4)
    5c18:	cmp	r6, #1
    5c1c:	bne	5bdc <test_scan+0x4f8>
    5c20:	ldr	r3, [sp, #12]
    5c24:	sub	r6, r4, #-1073741823	; 0xc0000001
    5c28:	sub	r9, r4, #1
    5c2c:	movw	r8, #0
    5c30:	movt	r8, #0
    5c34:	str	r9, [sp, #16]
    5c38:	add	r6, r3, r6, lsl #2
    5c3c:	mov	sl, r6
    5c40:	b	5ca8 <test_scan+0x5c4>
    5c44:	cmp	r9, r4
    5c48:	mov	r3, sl
    5c4c:	bcs	6d2c <test_scan+0x1648>
    5c50:	ldr	r2, [r3]
    5c54:	sub	sl, sl, #4
    5c58:	adds	r0, r3, r2
    5c5c:	beq	6cc8 <test_scan+0x15e4>
    5c60:	ldr	r3, [r3, r2]
    5c64:	sub	r3, r0, r3
    5c68:	ldrh	r2, [r3]
    5c6c:	cmp	r2, #11
    5c70:	bls	6c90 <test_scan+0x15ac>
    5c74:	ldrh	r2, [r3, #10]
    5c78:	cmp	r2, #0
    5c7c:	beq	6c90 <test_scan+0x15ac>
    5c80:	ldr	r3, [r0, r2]
    5c84:	add	r0, r0, r2
    5c88:	mov	r1, r8
    5c8c:	add	r3, r3, #4
    5c90:	add	r0, r0, r3
    5c94:	bl	0 <strcmp>
    5c98:	cmp	r0, #0
    5c9c:	sub	r3, r9, #1
    5ca0:	beq	5cc8 <test_scan+0x5e4>
    5ca4:	mov	r9, r3
    5ca8:	cmn	r9, #1
    5cac:	bne	5c44 <test_scan+0x560>
    5cb0:	movw	r0, #0
    5cb4:	movt	r0, #0
    5cb8:	bl	0 <puts>
    5cbc:	mvn	r3, #0
    5cc0:	str	r3, [sp, #36]	; 0x24
    5cc4:	b	5bf0 <test_scan+0x50c>
    5cc8:	cmp	r9, #1
    5ccc:	mov	r5, r0
    5cd0:	bne	5cb0 <test_scan+0x5cc>
    5cd4:	movw	r9, #0
    5cd8:	movt	r9, #0
    5cdc:	ldr	r2, [sp, #20]
    5ce0:	mov	r3, r7
    5ce4:	ldr	sl, [sp, #24]
    5ce8:	b	5d2c <test_scan+0x648>
    5cec:	add	r5, r5, #1
    5cf0:	cmp	r5, r4
    5cf4:	beq	6ce4 <test_scan+0x1600>
    5cf8:	mov	r3, sl
    5cfc:	add	sl, sl, #4
    5d00:	ldr	r1, [r3]
    5d04:	adds	r2, r3, r1
    5d08:	beq	6cc8 <test_scan+0x15e4>
    5d0c:	ldr	r3, [r3, r1]
    5d10:	sub	r3, r2, r3
    5d14:	ldrh	r1, [r3]
    5d18:	cmp	r1, #11
    5d1c:	bls	6c90 <test_scan+0x15ac>
    5d20:	ldrh	r3, [r3, #10]
    5d24:	cmp	r3, #0
    5d28:	beq	6c90 <test_scan+0x15ac>
    5d2c:	ldr	r0, [r2, r3]
    5d30:	add	r2, r2, r3
    5d34:	add	r0, r0, #4
    5d38:	adds	r0, r2, r0
    5d3c:	beq	5cec <test_scan+0x608>
    5d40:	ldr	r8, [r0, #-4]
    5d44:	mov	r1, r9
    5d48:	cmp	r8, #5
    5d4c:	movcc	r2, r8
    5d50:	movcs	r2, #5
    5d54:	bl	0 <strncmp>
    5d58:	cmp	r0, #0
    5d5c:	bne	5cec <test_scan+0x608>
    5d60:	cmp	r8, #5
    5d64:	bne	5cec <test_scan+0x608>
    5d68:	cmp	r5, #1
    5d6c:	bne	6ce4 <test_scan+0x1600>
    5d70:	movw	sl, #0
    5d74:	movt	sl, #0
    5d78:	ldr	r5, [sp, #16]
    5d7c:	mov	r9, r6
    5d80:	b	5d90 <test_scan+0x6ac>
    5d84:	cmp	r5, #0
    5d88:	sub	r5, r5, #1
    5d8c:	beq	6ce4 <test_scan+0x1600>
    5d90:	cmp	r5, r4
    5d94:	mov	r3, r9
    5d98:	bcs	6d2c <test_scan+0x1648>
    5d9c:	ldr	r2, [r3]
    5da0:	sub	r9, r9, #4
    5da4:	adds	r0, r3, r2
    5da8:	beq	6cc8 <test_scan+0x15e4>
    5dac:	ldr	r3, [r3, r2]
    5db0:	sub	r3, r0, r3
    5db4:	ldrh	r2, [r3]
    5db8:	cmp	r2, #11
    5dbc:	bls	6c90 <test_scan+0x15ac>
    5dc0:	ldrh	r2, [r3, #10]
    5dc4:	cmp	r2, #0
    5dc8:	beq	6c90 <test_scan+0x15ac>
    5dcc:	ldr	r3, [r0, r2]
    5dd0:	add	r0, r0, r2
    5dd4:	add	r3, r3, #4
    5dd8:	adds	r0, r0, r3
    5ddc:	beq	5d84 <test_scan+0x6a0>
    5de0:	ldr	fp, [r0, #-4]
    5de4:	mov	r1, sl
    5de8:	cmp	fp, #5
    5dec:	movcc	r2, fp
    5df0:	movcs	r2, #5
    5df4:	bl	0 <strncmp>
    5df8:	cmp	r0, #0
    5dfc:	bne	5d84 <test_scan+0x6a0>
    5e00:	cmp	fp, #5
    5e04:	bne	5d84 <test_scan+0x6a0>
    5e08:	cmp	r5, #1
    5e0c:	mov	r8, r0
    5e10:	bne	6ce4 <test_scan+0x1600>
    5e14:	movw	r3, #0
    5e18:	movt	r3, #0
    5e1c:	ldr	r0, [sp, #12]
    5e20:	mvn	r2, #0
    5e24:	mov	r1, #2
    5e28:	bl	1860 <MyGame_Example_Monster_vec_scan_ex_by_name>
    5e2c:	cmn	r0, #1
    5e30:	bne	6da0 <test_scan+0x16bc>
    5e34:	movw	r5, #0
    5e38:	movt	r5, #0
    5e3c:	ldr	r2, [sp, #20]
    5e40:	mov	r0, r7
    5e44:	ldr	r9, [sp, #24]
    5e48:	b	5e8c <test_scan+0x7a8>
    5e4c:	add	r8, r8, #1
    5e50:	cmp	r8, r4
    5e54:	bcs	5ec4 <test_scan+0x7e0>
    5e58:	mov	r3, r9
    5e5c:	add	r9, r9, #4
    5e60:	ldr	r1, [r3]
    5e64:	adds	r2, r3, r1
    5e68:	beq	6cc8 <test_scan+0x15e4>
    5e6c:	ldr	r3, [r3, r1]
    5e70:	sub	r3, r2, r3
    5e74:	ldrh	r1, [r3]
    5e78:	cmp	r1, #11
    5e7c:	bls	6c90 <test_scan+0x15ac>
    5e80:	ldrh	r0, [r3, #10]
    5e84:	cmp	r0, #0
    5e88:	beq	6c90 <test_scan+0x15ac>
    5e8c:	ldr	r3, [r2, r0]
    5e90:	add	r2, r2, r0
    5e94:	mov	r1, r5
    5e98:	add	r0, r3, #4
    5e9c:	add	r0, r2, r0
    5ea0:	bl	0 <strcmp>
    5ea4:	cmp	r0, #0
    5ea8:	bne	5e4c <test_scan+0x768>
    5eac:	movw	r0, #0
    5eb0:	movt	r0, #0
    5eb4:	bl	0 <puts>
    5eb8:	mvn	r3, #0
    5ebc:	str	r3, [sp, #36]	; 0x24
    5ec0:	b	5bf0 <test_scan+0x50c>
    5ec4:	movw	r5, #0
    5ec8:	movt	r5, #0
    5ecc:	ldr	r2, [sp, #20]
    5ed0:	mov	r0, r7
    5ed4:	mov	r8, #0
    5ed8:	ldr	r9, [sp, #24]
    5edc:	b	5f20 <test_scan+0x83c>
    5ee0:	add	r8, r8, #1
    5ee4:	cmp	r8, r4
    5ee8:	bcs	6eb0 <test_scan+0x17cc>
    5eec:	mov	r3, r9
    5ef0:	add	r9, r9, #4
    5ef4:	ldr	r1, [r3]
    5ef8:	adds	r2, r3, r1
    5efc:	beq	6cc8 <test_scan+0x15e4>
    5f00:	ldr	r3, [r3, r1]
    5f04:	sub	r3, r2, r3
    5f08:	ldrh	r1, [r3]
    5f0c:	cmp	r1, #11
    5f10:	bls	6c90 <test_scan+0x15ac>
    5f14:	ldrh	r0, [r3, #10]
    5f18:	cmp	r0, #0
    5f1c:	beq	6c90 <test_scan+0x15ac>
    5f20:	ldr	r3, [r2, r0]
    5f24:	add	r2, r2, r0
    5f28:	mov	r1, r5
    5f2c:	add	r0, r3, #4
    5f30:	add	r0, r2, r0
    5f34:	bl	0 <strcmp>
    5f38:	cmp	r0, #0
    5f3c:	bne	5ee0 <test_scan+0x7fc>
    5f40:	cmp	r8, #0
    5f44:	bne	6eb0 <test_scan+0x17cc>
    5f48:	movw	r5, #0
    5f4c:	movt	r5, #0
    5f50:	ldr	r0, [sp, #20]
    5f54:	ldr	r9, [sp, #24]
    5f58:	b	5f9c <test_scan+0x8b8>
    5f5c:	add	r8, r8, #1
    5f60:	cmp	r8, r4
    5f64:	bcs	603c <test_scan+0x958>
    5f68:	mov	r3, r9
    5f6c:	add	r9, r9, #4
    5f70:	ldr	r2, [r3]
    5f74:	adds	r0, r3, r2
    5f78:	beq	6cc8 <test_scan+0x15e4>
    5f7c:	ldr	r3, [r3, r2]
    5f80:	sub	r3, r0, r3
    5f84:	ldrh	r2, [r3]
    5f88:	cmp	r2, #11
    5f8c:	bls	6c90 <test_scan+0x15ac>
    5f90:	ldrh	r7, [r3, #10]
    5f94:	cmp	r7, #0
    5f98:	beq	6c90 <test_scan+0x15ac>
    5f9c:	ldr	r3, [r0, r7]
    5fa0:	add	r0, r0, r7
    5fa4:	mov	r1, r5
    5fa8:	add	r3, r3, #4
    5fac:	add	r0, r0, r3
    5fb0:	bl	0 <strcmp>
    5fb4:	cmp	r0, #0
    5fb8:	bne	5f5c <test_scan+0x878>
    5fbc:	cmp	r8, #2
    5fc0:	bne	603c <test_scan+0x958>
    5fc4:	ldr	r7, [sp, #16]
    5fc8:	movw	r5, #0
    5fcc:	movt	r5, #0
    5fd0:	mov	r8, r6
    5fd4:	cmp	r7, r4
    5fd8:	mov	r3, r8
    5fdc:	bcs	6d2c <test_scan+0x1648>
    5fe0:	ldr	r2, [r3]
    5fe4:	sub	r8, r8, #4
    5fe8:	adds	r0, r3, r2
    5fec:	beq	6cc8 <test_scan+0x15e4>
    5ff0:	ldr	r3, [r3, r2]
    5ff4:	sub	r3, r0, r3
    5ff8:	ldrh	r2, [r3]
    5ffc:	cmp	r2, #11
    6000:	bls	6c90 <test_scan+0x15ac>
    6004:	ldrh	r2, [r3, #10]
    6008:	cmp	r2, #0
    600c:	beq	6c90 <test_scan+0x15ac>
    6010:	ldr	r3, [r0, r2]
    6014:	add	r0, r0, r2
    6018:	mov	r1, r5
    601c:	add	r3, r3, #4
    6020:	add	r0, r0, r3
    6024:	bl	0 <strcmp>
    6028:	cmp	r0, #0
    602c:	beq	6054 <test_scan+0x970>
    6030:	cmp	r7, #0
    6034:	sub	r7, r7, #1
    6038:	bne	5fd4 <test_scan+0x8f0>
    603c:	movw	r0, #0
    6040:	movt	r0, #0
    6044:	bl	0 <puts>
    6048:	mvn	r3, #0
    604c:	str	r3, [sp, #36]	; 0x24
    6050:	b	5bf0 <test_scan+0x50c>
    6054:	cmp	r7, #4
    6058:	bne	603c <test_scan+0x958>
    605c:	movw	r7, #0
    6060:	movt	r7, #0
    6064:	ldr	r5, [sp, #16]
    6068:	b	6074 <test_scan+0x990>
    606c:	subs	r5, r5, #1
    6070:	bcc	6cfc <test_scan+0x1618>
    6074:	cmp	r5, r4
    6078:	mov	r3, r6
    607c:	bcs	6d2c <test_scan+0x1648>
    6080:	ldr	r2, [r3]
    6084:	sub	r6, r6, #4
    6088:	adds	r0, r3, r2
    608c:	beq	6cc8 <test_scan+0x15e4>
    6090:	ldr	r3, [r3, r2]
    6094:	sub	r3, r0, r3
    6098:	ldrh	r2, [r3]
    609c:	cmp	r2, #11
    60a0:	bls	6c90 <test_scan+0x15ac>
    60a4:	ldrh	r2, [r3, #10]
    60a8:	cmp	r2, #0
    60ac:	beq	6c90 <test_scan+0x15ac>
    60b0:	ldr	r3, [r0, r2]
    60b4:	add	r0, r0, r2
    60b8:	add	r3, r3, #4
    60bc:	adds	r0, r0, r3
    60c0:	beq	606c <test_scan+0x988>
    60c4:	ldr	r8, [r0, #-4]
    60c8:	mov	r1, r7
    60cc:	cmp	r8, #8
    60d0:	movcc	r2, r8
    60d4:	movcs	r2, #8
    60d8:	bl	0 <strncmp>
    60dc:	cmp	r0, #0
    60e0:	bne	606c <test_scan+0x988>
    60e4:	cmp	r8, #8
    60e8:	bne	606c <test_scan+0x988>
    60ec:	cmp	r5, #4
    60f0:	bne	6cfc <test_scan+0x1618>
    60f4:	ldr	r3, [sp, #12]
    60f8:	cmp	r4, #3
    60fc:	movw	r9, #0
    6100:	movt	r9, #0
    6104:	movcc	r6, r4
    6108:	movcs	r6, #3
    610c:	sub	r7, r6, #-1073741823	; 0xc0000001
    6110:	mov	r5, r6
    6114:	add	r7, r3, r7, lsl #2
    6118:	mov	sl, r7
    611c:	subs	r5, r5, #1
    6120:	beq	6cfc <test_scan+0x1618>
    6124:	cmp	r5, r4
    6128:	mov	r3, sl
    612c:	bcs	6d2c <test_scan+0x1648>
    6130:	ldr	r2, [r3]
    6134:	sub	sl, sl, #4
    6138:	adds	r0, r3, r2
    613c:	beq	6cc8 <test_scan+0x15e4>
    6140:	ldr	r3, [r3, r2]
    6144:	sub	r3, r0, r3
    6148:	ldrh	r2, [r3]
    614c:	cmp	r2, #11
    6150:	bls	6c90 <test_scan+0x15ac>
    6154:	ldrh	r2, [r3, #10]
    6158:	cmp	r2, #0
    615c:	beq	6c90 <test_scan+0x15ac>
    6160:	ldr	r3, [r0, r2]
    6164:	add	r0, r0, r2
    6168:	add	r3, r3, #4
    616c:	adds	r0, r0, r3
    6170:	beq	611c <test_scan+0xa38>
    6174:	ldr	r8, [r0, #-4]
    6178:	mov	r1, r9
    617c:	cmp	r8, #8
    6180:	movcc	r2, r8
    6184:	movcs	r2, #8
    6188:	bl	0 <strncmp>
    618c:	cmp	r0, #0
    6190:	bne	611c <test_scan+0xa38>
    6194:	cmp	r8, #8
    6198:	bne	611c <test_scan+0xa38>
    619c:	cmp	r5, #2
    61a0:	bne	6cfc <test_scan+0x1618>
    61a4:	ldr	r8, [sp, #12]
    61a8:	mov	r1, r5
    61ac:	movw	r3, #0
    61b0:	movt	r3, #0
    61b4:	mvn	r2, #0
    61b8:	mov	r0, r8
    61bc:	bl	1860 <MyGame_Example_Monster_vec_scan_ex_by_name>
    61c0:	cmp	r0, #2
    61c4:	mov	r5, r0
    61c8:	bne	6d14 <test_scan+0x1630>
    61cc:	cmp	r4, #2
    61d0:	beq	6d14 <test_scan+0x1630>
    61d4:	ldr	r3, [r8, #8]
    61d8:	add	r3, r3, #8
    61dc:	adds	r2, r8, r3
    61e0:	beq	6cc8 <test_scan+0x15e4>
    61e4:	ldr	r3, [r8, r3]
    61e8:	sub	r3, r2, r3
    61ec:	ldrh	r1, [r3]
    61f0:	cmp	r1, #11
    61f4:	bls	6c90 <test_scan+0x15ac>
    61f8:	ldrh	r0, [r3, #10]
    61fc:	cmp	r0, #0
    6200:	beq	6c90 <test_scan+0x15ac>
    6204:	movw	r9, #0
    6208:	movt	r9, #0
    620c:	add	sl, r8, #12
    6210:	mov	r3, r0
    6214:	b	6258 <test_scan+0xb74>
    6218:	add	r5, r5, #1
    621c:	cmp	r5, r4
    6220:	beq	6d14 <test_scan+0x1630>
    6224:	mov	r3, sl
    6228:	add	sl, sl, #4
    622c:	ldr	r1, [r3]
    6230:	adds	r2, r3, r1
    6234:	beq	6cc8 <test_scan+0x15e4>
    6238:	ldr	r3, [r3, r1]
    623c:	sub	r3, r2, r3
    6240:	ldrh	r1, [r3]
    6244:	cmp	r1, #11
    6248:	bls	6c90 <test_scan+0x15ac>
    624c:	ldrh	r3, [r3, #10]
    6250:	cmp	r3, #0
    6254:	beq	6c90 <test_scan+0x15ac>
    6258:	ldr	r0, [r2, r3]
    625c:	add	r2, r2, r3
    6260:	add	r0, r0, #4
    6264:	adds	r0, r2, r0
    6268:	beq	6218 <test_scan+0xb34>
    626c:	ldr	r8, [r0, #-4]
    6270:	mov	r1, r9
    6274:	cmp	r8, #8
    6278:	movcc	r2, r8
    627c:	movcs	r2, #8
    6280:	bl	0 <strncmp>
    6284:	cmp	r0, #0
    6288:	bne	6218 <test_scan+0xb34>
    628c:	cmp	r8, #8
    6290:	bne	6218 <test_scan+0xb34>
    6294:	cmp	r5, #2
    6298:	bne	6d14 <test_scan+0x1630>
    629c:	movw	r3, #0
    62a0:	movt	r3, #0
    62a4:	ldr	r0, [sp, #12]
    62a8:	mvn	r2, #0
    62ac:	mov	r1, #3
    62b0:	bl	1860 <MyGame_Example_Monster_vec_scan_ex_by_name>
    62b4:	cmp	r0, #4
    62b8:	mov	r5, r0
    62bc:	bne	6db8 <test_scan+0x16d4>
    62c0:	movw	r3, #0
    62c4:	movt	r3, #0
    62c8:	ldr	r0, [sp, #12]
    62cc:	mov	r2, #3
    62d0:	mov	r1, #1
    62d4:	bl	1860 <MyGame_Example_Monster_vec_scan_ex_by_name>
    62d8:	cmn	r0, #1
    62dc:	mov	r8, r0
    62e0:	bne	6de4 <test_scan+0x1700>
    62e4:	movw	r3, #0
    62e8:	movt	r3, #0
    62ec:	ldr	r0, [sp, #12]
    62f0:	mov	r2, #3
    62f4:	mov	r1, #1
    62f8:	bl	1860 <MyGame_Example_Monster_vec_scan_ex_by_name>
    62fc:	cmn	r0, #1
    6300:	mov	r9, r0
    6304:	bne	6dd0 <test_scan+0x16ec>
    6308:	movw	r3, #0
    630c:	movt	r3, #0
    6310:	ldr	r0, [sp, #12]
    6314:	mov	r2, #3
    6318:	mov	r1, #1
    631c:	bl	1860 <MyGame_Example_Monster_vec_scan_ex_by_name>
    6320:	cmp	r0, #1
    6324:	mov	r8, r0
    6328:	bne	6e10 <test_scan+0x172c>
    632c:	mov	r1, r0
    6330:	movw	r3, #0
    6334:	movt	r3, #0
    6338:	mov	r2, #3
    633c:	ldr	r0, [sp, #12]
    6340:	bl	1860 <MyGame_Example_Monster_vec_scan_ex_by_name>
    6344:	cmp	r0, #2
    6348:	bne	6dfc <test_scan+0x1718>
    634c:	mov	r1, r8
    6350:	movw	r3, #0
    6354:	movt	r3, #0
    6358:	mov	r2, #3
    635c:	ldr	r0, [sp, #12]
    6360:	bl	1860 <MyGame_Example_Monster_vec_scan_ex_by_name>
    6364:	cmn	r0, #1
    6368:	movweq	r8, #0
    636c:	moveq	sl, r7
    6370:	movteq	r8, #0
    6374:	moveq	r9, r6
    6378:	beq	63d4 <test_scan+0xcf0>
    637c:	b	6e24 <test_scan+0x1740>
    6380:	mov	r3, sl
    6384:	sub	sl, sl, #4
    6388:	ldr	r2, [r3]
    638c:	adds	r0, r3, r2
    6390:	beq	6cc8 <test_scan+0x15e4>
    6394:	ldr	r3, [r3, r2]
    6398:	sub	r3, r0, r3
    639c:	ldrh	r2, [r3]
    63a0:	cmp	r2, #11
    63a4:	bls	6c90 <test_scan+0x15ac>
    63a8:	ldrh	r2, [r3, #10]
    63ac:	cmp	r2, #0
    63b0:	beq	6c90 <test_scan+0x15ac>
    63b4:	ldr	r3, [r0, r2]
    63b8:	add	r0, r0, r2
    63bc:	mov	r1, r8
    63c0:	add	r3, r3, #4
    63c4:	add	r0, r0, r3
    63c8:	bl	0 <strcmp>
    63cc:	cmp	r0, #0
    63d0:	beq	6e3c <test_scan+0x1758>
    63d4:	subs	r9, r9, #1
    63d8:	bne	6380 <test_scan+0xc9c>
    63dc:	movw	r8, #0
    63e0:	movt	r8, #0
    63e4:	mov	sl, r7
    63e8:	mov	r9, r6
    63ec:	b	6444 <test_scan+0xd60>
    63f0:	mov	r3, sl
    63f4:	sub	sl, sl, #4
    63f8:	ldr	r2, [r3]
    63fc:	adds	r0, r3, r2
    6400:	beq	6cc8 <test_scan+0x15e4>
    6404:	ldr	r3, [r3, r2]
    6408:	sub	r3, r0, r3
    640c:	ldrh	r2, [r3]
    6410:	cmp	r2, #11
    6414:	bls	6c90 <test_scan+0x15ac>
    6418:	ldrh	r2, [r3, #10]
    641c:	cmp	r2, #0
    6420:	beq	6c90 <test_scan+0x15ac>
    6424:	ldr	r3, [r0, r2]
    6428:	add	r0, r0, r2
    642c:	mov	r1, r8
    6430:	add	r3, r3, #4
    6434:	add	r0, r0, r3
    6438:	bl	0 <strcmp>
    643c:	cmp	r0, #0
    6440:	beq	6e54 <test_scan+0x1770>
    6444:	subs	r9, r9, #1
    6448:	bne	63f0 <test_scan+0xd0c>
    644c:	movw	r8, #0
    6450:	movt	r8, #0
    6454:	b	64ac <test_scan+0xdc8>
    6458:	mov	r3, r7
    645c:	sub	r7, r7, #4
    6460:	ldr	r2, [r3]
    6464:	adds	r0, r3, r2
    6468:	beq	6cc8 <test_scan+0x15e4>
    646c:	ldr	r3, [r3, r2]
    6470:	sub	r3, r0, r3
    6474:	ldrh	r2, [r3]
    6478:	cmp	r2, #11
    647c:	bls	6c90 <test_scan+0x15ac>
    6480:	ldrh	r2, [r3, #10]
    6484:	cmp	r2, #0
    6488:	beq	6c90 <test_scan+0x15ac>
    648c:	ldr	r3, [r0, r2]
    6490:	add	r0, r0, r2
    6494:	mov	r1, r8
    6498:	add	r3, r3, #4
    649c:	add	r0, r0, r3
    64a0:	bl	0 <strcmp>
    64a4:	cmp	r0, #0
    64a8:	beq	64cc <test_scan+0xde8>
    64ac:	subs	r6, r6, #1
    64b0:	bne	6458 <test_scan+0xd74>
    64b4:	movw	r0, #0
    64b8:	movt	r0, #0
    64bc:	bl	0 <puts>
    64c0:	mvn	r3, #0
    64c4:	str	r3, [sp, #36]	; 0x24
    64c8:	b	5bf0 <test_scan+0x50c>
    64cc:	cmp	r6, #1
    64d0:	str	r0, [sp, #36]	; 0x24
    64d4:	bne	64b4 <test_scan+0xdd0>
    64d8:	movw	r3, #0
    64dc:	movt	r3, #0
    64e0:	ldr	r0, [sp, #12]
    64e4:	mov	r2, #3
    64e8:	mov	r1, r6
    64ec:	bl	1740 <MyGame_Example_Monster_vec_rscan_ex_by_name>
    64f0:	cmp	r0, #2
    64f4:	bne	6e6c <test_scan+0x1788>
    64f8:	mov	r1, r6
    64fc:	movw	r3, #0
    6500:	movt	r3, #0
    6504:	mov	r2, #3
    6508:	ldr	r0, [sp, #12]
    650c:	bl	1740 <MyGame_Example_Monster_vec_rscan_ex_by_name>
    6510:	cmn	r0, #1
    6514:	bne	6e84 <test_scan+0x17a0>
    6518:	movw	r3, #0
    651c:	movt	r3, #0
    6520:	ldr	r0, [sp, #12]
    6524:	ldr	r1, [sp, #36]	; 0x24
    6528:	mov	r2, r1
    652c:	bl	1860 <MyGame_Example_Monster_vec_scan_ex_by_name>
    6530:	cmn	r0, #1
    6534:	bne	6d40 <test_scan+0x165c>
    6538:	movw	r3, #0
    653c:	movt	r3, #0
    6540:	ldr	r0, [sp, #12]
    6544:	ldr	r1, [sp, #36]	; 0x24
    6548:	mov	r2, r1
    654c:	bl	1860 <MyGame_Example_Monster_vec_scan_ex_by_name>
    6550:	cmn	r0, #1
    6554:	bne	6d70 <test_scan+0x168c>
    6558:	mov	r2, #1
    655c:	movw	r3, #0
    6560:	movt	r3, #0
    6564:	mov	r1, r2
    6568:	ldr	r0, [sp, #12]
    656c:	bl	1860 <MyGame_Example_Monster_vec_scan_ex_by_name>
    6570:	cmn	r0, #1
    6574:	bne	6d58 <test_scan+0x1674>
    6578:	mov	r2, r0
    657c:	movw	r3, #0
    6580:	movt	r3, #0
    6584:	mov	r1, r4
    6588:	ldr	r0, [sp, #12]
    658c:	bl	1860 <MyGame_Example_Monster_vec_scan_ex_by_name>
    6590:	cmn	r0, #1
    6594:	bne	6d88 <test_scan+0x16a4>
    6598:	ldr	r7, [sp, #12]
    659c:	mov	r2, #0
    65a0:	movw	r3, #0
    65a4:	movt	r3, #0
    65a8:	mov	r1, r2
    65ac:	mov	r0, r7
    65b0:	bl	1740 <MyGame_Example_Monster_vec_rscan_ex_by_name>
    65b4:	cmn	r0, #1
    65b8:	bne	6d40 <test_scan+0x165c>
    65bc:	mov	r2, #0
    65c0:	movw	r3, #0
    65c4:	movt	r3, #0
    65c8:	mov	r1, r2
    65cc:	mov	r0, r7
    65d0:	bl	1740 <MyGame_Example_Monster_vec_rscan_ex_by_name>
    65d4:	cmn	r0, #1
    65d8:	bne	6d70 <test_scan+0x168c>
    65dc:	mov	r2, #1
    65e0:	movw	r3, #0
    65e4:	movt	r3, #0
    65e8:	mov	r1, r2
    65ec:	mov	r0, r7
    65f0:	bl	1740 <MyGame_Example_Monster_vec_rscan_ex_by_name>
    65f4:	cmn	r0, #1
    65f8:	bne	6d58 <test_scan+0x1674>
    65fc:	mov	r2, r0
    6600:	movw	r3, #0
    6604:	movt	r3, #0
    6608:	mov	r1, r4
    660c:	mov	r0, r7
    6610:	bl	1740 <MyGame_Example_Monster_vec_rscan_ex_by_name>
    6614:	cmn	r0, #1
    6618:	mov	r6, r0
    661c:	bne	6d88 <test_scan+0x16a4>
    6620:	movw	r1, #0
    6624:	movt	r1, #0
    6628:	mov	r0, r7
    662c:	bl	1540 <count_monsters>
    6630:	cmp	r0, #1
    6634:	bne	6e9c <test_scan+0x17b8>
    6638:	movw	r1, #0
    663c:	movt	r1, #0
    6640:	ldr	r0, [sp, #12]
    6644:	bl	1540 <count_monsters>
    6648:	cmp	r0, #0
    664c:	bne	6f18 <test_scan+0x1834>
    6650:	movw	r1, #0
    6654:	movt	r1, #0
    6658:	ldr	r0, [sp, #12]
    665c:	bl	1540 <count_monsters>
    6660:	cmp	r0, #1
    6664:	mov	sl, r0
    6668:	bne	6ec8 <test_scan+0x17e4>
    666c:	movw	r1, #0
    6670:	movt	r1, #0
    6674:	ldr	r0, [sp, #12]
    6678:	bl	1540 <count_monsters>
    667c:	cmp	r0, #2
    6680:	bne	6f60 <test_scan+0x187c>
    6684:	ldr	r3, [sp, #32]
    6688:	ldr	ip, [r3, #-4]
    668c:	cmp	ip, #0
    6690:	beq	66f0 <test_scan+0x100c>
    6694:	ldr	r3, [sp, #56]	; 0x38
    6698:	ldr	r2, [sp, #60]	; 0x3c
    669c:	ldrb	lr, [r3, r2]
    66a0:	cmp	lr, #6
    66a4:	beq	6d30 <test_scan+0x164c>
    66a8:	ldr	r2, [sp, #32]
    66ac:	add	r8, r2, ip
    66b0:	mov	r3, r2
    66b4:	sub	r6, r8, #1
    66b8:	rsb	r2, r2, #1
    66bc:	b	66e4 <test_scan+0x1000>
    66c0:	.word	0x00000528
    66c4:	.word	0x00000404
    66c8:	.word	0x0000020c
    66cc:	.word	0x0000013c
    66d0:	.word	0x0000053c
    66d4:	.word	0x00000530
    66d8:	ldrb	r1, [r3, #1]!
    66dc:	cmp	r1, #6
    66e0:	beq	6708 <test_scan+0x1024>
    66e4:	cmp	r6, r3
    66e8:	add	r0, r2, r3
    66ec:	bne	66d8 <test_scan+0xff4>
    66f0:	movw	r0, #0
    66f4:	movt	r0, #0
    66f8:	bl	0 <puts>
    66fc:	mvn	r3, #0
    6700:	str	r3, [sp, #36]	; 0x24
    6704:	b	5bf0 <test_scan+0x50c>
    6708:	cmp	r0, #0
    670c:	bne	66f0 <test_scan+0x100c>
    6710:	cmp	lr, #1
    6714:	beq	6740 <test_scan+0x105c>
    6718:	ldr	r3, [sp, #32]
    671c:	sub	r0, r8, #1
    6720:	mov	r1, r3
    6724:	b	6734 <test_scan+0x1050>
    6728:	ldrb	r6, [r3, #1]!
    672c:	cmp	r6, #1
    6730:	beq	6758 <test_scan+0x1074>
    6734:	cmp	r0, r3
    6738:	add	r7, r2, r3
    673c:	bne	6728 <test_scan+0x1044>
    6740:	movw	r0, #0
    6744:	movt	r0, #0
    6748:	bl	0 <puts>
    674c:	mvn	r3, #0
    6750:	str	r3, [sp, #36]	; 0x24
    6754:	b	5bf0 <test_scan+0x50c>
    6758:	cmp	r7, #2
    675c:	bne	6740 <test_scan+0x105c>
    6760:	cmp	ip, #3
    6764:	bls	6794 <test_scan+0x10b0>
    6768:	ldr	r6, [sp, #32]
    676c:	ldrb	r3, [r6, #3]
    6770:	cmp	r3, #1
    6774:	beq	6f48 <test_scan+0x1864>
    6778:	add	r3, r6, #3
    677c:	b	678c <test_scan+0x10a8>
    6780:	ldrb	r6, [r3, #1]!
    6784:	cmp	r6, #1
    6788:	beq	6f48 <test_scan+0x1864>
    678c:	cmp	r3, r0
    6790:	bne	6780 <test_scan+0x109c>
    6794:	cmp	lr, #5
    6798:	beq	6824 <test_scan+0x1140>
    679c:	ldr	r3, [sp, #32]
    67a0:	b	67b0 <test_scan+0x10cc>
    67a4:	ldrb	r6, [r3, #1]!
    67a8:	cmp	r6, #5
    67ac:	beq	6824 <test_scan+0x1140>
    67b0:	cmp	r0, r3
    67b4:	bne	67a4 <test_scan+0x10c0>
    67b8:	cmp	lr, #2
    67bc:	beq	67e0 <test_scan+0x10fc>
    67c0:	ldr	r0, [sp, #32]
    67c4:	b	67d4 <test_scan+0x10f0>
    67c8:	ldrb	r6, [r0, #1]!
    67cc:	cmp	r6, #2
    67d0:	beq	67f8 <test_scan+0x1114>
    67d4:	cmp	r0, r3
    67d8:	add	r7, r0, r2
    67dc:	bne	67c8 <test_scan+0x10e4>
    67e0:	movw	r0, #0
    67e4:	movt	r0, #0
    67e8:	bl	0 <puts>
    67ec:	mvn	r3, #0
    67f0:	str	r3, [sp, #36]	; 0x24
    67f4:	b	5bf0 <test_scan+0x50c>
    67f8:	cmp	r7, #6
    67fc:	bne	67e0 <test_scan+0x10fc>
    6800:	cmp	lr, #3
    6804:	bne	6818 <test_scan+0x1134>
    6808:	b	6824 <test_scan+0x1140>
    680c:	ldrb	r0, [r1, #1]!
    6810:	cmp	r0, #3
    6814:	beq	683c <test_scan+0x1158>
    6818:	cmp	r1, r3
    681c:	add	lr, r1, r2
    6820:	bne	680c <test_scan+0x1128>
    6824:	movw	r0, #0
    6828:	movt	r0, #0
    682c:	bl	0 <puts>
    6830:	mvn	r3, #0
    6834:	str	r3, [sp, #36]	; 0x24
    6838:	b	5bf0 <test_scan+0x50c>
    683c:	cmp	lr, #3
    6840:	bne	6824 <test_scan+0x1140>
    6844:	cmp	ip, #3
    6848:	bls	685c <test_scan+0x1178>
    684c:	ldr	r1, [sp, #32]
    6850:	ldrb	r1, [r1, #3]
    6854:	cmp	r1, #3
    6858:	beq	6874 <test_scan+0x1190>
    685c:	movw	r0, #0
    6860:	movt	r0, #0
    6864:	bl	0 <puts>
    6868:	mvn	r3, #0
    686c:	str	r3, [sp, #36]	; 0x24
    6870:	b	5bf0 <test_scan+0x50c>
    6874:	cmp	ip, #4
    6878:	beq	68b0 <test_scan+0x11cc>
    687c:	ldr	r0, [sp, #32]
    6880:	ldrb	r1, [r0, #4]
    6884:	cmp	r1, #3
    6888:	beq	68b0 <test_scan+0x11cc>
    688c:	add	r0, r0, #4
    6890:	mov	r1, r0
    6894:	b	68a4 <test_scan+0x11c0>
    6898:	ldrb	lr, [r1, #1]!
    689c:	cmp	lr, #3
    68a0:	beq	68c8 <test_scan+0x11e4>
    68a4:	cmp	r1, r3
    68a8:	add	r6, r1, r2
    68ac:	bne	6898 <test_scan+0x11b4>
    68b0:	movw	r0, #0
    68b4:	movt	r0, #0
    68b8:	bl	0 <puts>
    68bc:	mvn	r3, #0
    68c0:	str	r3, [sp, #36]	; 0x24
    68c4:	b	5bf0 <test_scan+0x50c>
    68c8:	cmp	r6, #5
    68cc:	subeq	r3, ip, #1
    68d0:	beq	68e0 <test_scan+0x11fc>
    68d4:	b	68b0 <test_scan+0x11cc>
    68d8:	cmp	r3, ip
    68dc:	bcs	6f2c <test_scan+0x1848>
    68e0:	ldrb	r2, [r8, #-1]!
    68e4:	cmp	r2, #3
    68e8:	beq	690c <test_scan+0x1228>
    68ec:	subs	r3, r3, #1
    68f0:	bcs	68d8 <test_scan+0x11f4>
    68f4:	movw	r0, #0
    68f8:	movt	r0, #0
    68fc:	bl	0 <puts>
    6900:	mvn	r3, #0
    6904:	str	r3, [sp, #36]	; 0x24
    6908:	b	5bf0 <test_scan+0x50c>
    690c:	cmp	r3, #5
    6910:	beq	6924 <test_scan+0x1240>
    6914:	b	68f4 <test_scan+0x1210>
    6918:	ldrb	r3, [r0, #-1]!
    691c:	cmp	r3, #3
    6920:	beq	6944 <test_scan+0x1260>
    6924:	subs	r5, r5, #1
    6928:	bne	6918 <test_scan+0x1234>
    692c:	movw	r0, #0
    6930:	movt	r0, #0
    6934:	bl	0 <puts>
    6938:	mvn	r3, #0
    693c:	str	r3, [sp, #36]	; 0x24
    6940:	b	5bf0 <test_scan+0x50c>
    6944:	cmp	r5, #3
    6948:	bne	692c <test_scan+0x1248>
    694c:	ldr	r3, [sp, #40]	; 0x28
    6950:	ldr	r5, [r3, #-4]
    6954:	cmp	r5, #0
    6958:	mvneq	r3, #0
    695c:	mvneq	r7, #-1073741824	; 0xc0000000
    6960:	streq	r3, [sp, #32]
    6964:	beq	69c0 <test_scan+0x12dc>
    6968:	sub	r3, r5, #1
    696c:	sub	r7, r5, #-1073741823	; 0xc0000001
    6970:	mov	r9, r3
    6974:	movw	r8, #0
    6978:	movt	r8, #0
    697c:	str	r3, [sp, #32]
    6980:	ldr	r3, [sp, #40]	; 0x28
    6984:	add	fp, r3, r7, lsl #2
    6988:	cmp	r5, r9
    698c:	mov	r0, fp
    6990:	bls	6f7c <test_scan+0x1898>
    6994:	ldr	r3, [r0]
    6998:	mov	r1, r8
    699c:	sub	fp, fp, #4
    69a0:	sub	r9, r9, #1
    69a4:	add	r3, r3, #4
    69a8:	add	r0, r0, r3
    69ac:	bl	0 <strcmp>
    69b0:	cmp	r0, #0
    69b4:	beq	69c0 <test_scan+0x12dc>
    69b8:	cmn	r9, #1
    69bc:	bne	6988 <test_scan+0x12a4>
    69c0:	ldr	fp, [sp, #32]
    69c4:	movw	r9, #0
    69c8:	movt	r9, #0
    69cc:	ldr	r3, [sp, #40]	; 0x28
    69d0:	mov	r8, fp
    69d4:	add	r7, r3, r7, lsl #2
    69d8:	mov	r6, r7
    69dc:	b	6a10 <test_scan+0x132c>
    69e0:	cmp	fp, r5
    69e4:	mov	r0, r6
    69e8:	bcs	6efc <test_scan+0x1818>
    69ec:	ldr	r3, [r0]
    69f0:	mov	r1, r9
    69f4:	sub	r6, r6, #4
    69f8:	sub	fp, fp, #1
    69fc:	add	r3, r3, #4
    6a00:	add	r0, r0, r3
    6a04:	bl	0 <strcmp>
    6a08:	cmp	r0, #0
    6a0c:	beq	6a18 <test_scan+0x1334>
    6a10:	cmn	fp, #1
    6a14:	bne	69e0 <test_scan+0x12fc>
    6a18:	ldr	r6, [sp, #32]
    6a1c:	movw	fp, #0
    6a20:	movt	fp, #0
    6a24:	mov	r9, r7
    6a28:	str	r4, [sp, #32]
    6a2c:	cmn	r6, #1
    6a30:	beq	6a80 <test_scan+0x139c>
    6a34:	cmp	r5, r6
    6a38:	mov	r0, r9
    6a3c:	bls	6efc <test_scan+0x1818>
    6a40:	ldr	r3, [r0]
    6a44:	sub	r9, r9, #4
    6a48:	add	r3, r3, #4
    6a4c:	adds	r0, r0, r3
    6a50:	beq	6a74 <test_scan+0x1390>
    6a54:	ldr	r4, [r0, #-4]
    6a58:	mov	r1, fp
    6a5c:	cmp	r4, #4
    6a60:	movcc	r2, r4
    6a64:	movcs	r2, #4
    6a68:	bl	0 <strncmp>
    6a6c:	cmp	r0, #0
    6a70:	beq	6c68 <test_scan+0x1584>
    6a74:	sub	r6, r6, #1
    6a78:	cmn	r6, #1
    6a7c:	bne	6a34 <test_scan+0x1350>
    6a80:	cmn	r8, #1
    6a84:	movw	r9, #0
    6a88:	movt	r9, #0
    6a8c:	ldr	r4, [sp, #32]
    6a90:	beq	6ae0 <test_scan+0x13fc>
    6a94:	cmp	r8, r5
    6a98:	mov	r0, r7
    6a9c:	bcs	6efc <test_scan+0x1818>
    6aa0:	ldr	r3, [r0]
    6aa4:	sub	r7, r7, #4
    6aa8:	add	r3, r3, #4
    6aac:	adds	r0, r0, r3
    6ab0:	beq	6ad4 <test_scan+0x13f0>
    6ab4:	ldr	r6, [r0, #-4]
    6ab8:	mov	r1, r9
    6abc:	cmp	r6, #4
    6ac0:	movcc	r2, r6
    6ac4:	movcs	r2, #4
    6ac8:	bl	0 <strncmp>
    6acc:	cmp	r0, #0
    6ad0:	beq	6c74 <test_scan+0x1590>
    6ad4:	sub	r8, r8, #1
    6ad8:	cmn	r8, #1
    6adc:	bne	6a94 <test_scan+0x13b0>
    6ae0:	mov	r0, #0
    6ae4:	ldr	ip, [sp, #20]
    6ae8:	ldr	r2, [sp, #44]	; 0x2c
    6aec:	ldr	r1, [sp, #48]	; 0x30
    6af0:	ldr	r3, [sp, #52]	; 0x34
    6af4:	b	6b24 <test_scan+0x1440>
    6af8:	add	r0, r0, #1
    6afc:	cmp	r0, r4
    6b00:	bcs	6b44 <test_scan+0x1460>
    6b04:	mov	r3, r1
    6b08:	add	r1, r1, #4
    6b0c:	ldr	r2, [r3]
    6b10:	adds	ip, r3, r2
    6b14:	beq	6edc <test_scan+0x17f8>
    6b18:	ldr	r3, [r3, r2]
    6b1c:	sub	r3, ip, r3
    6b20:	ldrh	r2, [r3]
    6b24:	cmp	r2, #9
    6b28:	bls	6af8 <test_scan+0x1414>
    6b2c:	ldrh	r3, [r3, #8]
    6b30:	cmp	r3, #0
    6b34:	beq	6af8 <test_scan+0x1414>
    6b38:	ldrsh	r3, [ip, r3]
    6b3c:	cmp	r3, #13
    6b40:	bne	6af8 <test_scan+0x1414>
    6b44:	ldr	r2, [sp, #12]
    6b48:	ldr	r3, [r2, #4]
    6b4c:	add	r3, r3, #4
    6b50:	adds	r3, r2, r3
    6b54:	beq	6edc <test_scan+0x17f8>
    6b58:	add	r0, r2, #8
    6b5c:	mov	r1, #1
    6b60:	b	6b84 <test_scan+0x14a0>
    6b64:	add	r1, r1, #1
    6b68:	cmp	r1, r4
    6b6c:	bcs	6bb0 <test_scan+0x14cc>
    6b70:	mov	r3, r0
    6b74:	add	r0, r0, #4
    6b78:	ldr	r2, [r3]
    6b7c:	adds	r3, r3, r2
    6b80:	beq	6edc <test_scan+0x17f8>
    6b84:	ldr	r2, [r3]
    6b88:	sub	r2, r3, r2
    6b8c:	ldrh	ip, [r2]
    6b90:	cmp	ip, #9
    6b94:	bls	6b64 <test_scan+0x1480>
    6b98:	ldrh	r2, [r2, #8]
    6b9c:	cmp	r2, #0
    6ba0:	beq	6b64 <test_scan+0x1480>
    6ba4:	ldrsh	r3, [r3, r2]
    6ba8:	cmp	r3, #42	; 0x2a
    6bac:	bne	6b64 <test_scan+0x1480>
    6bb0:	ldrd	r2, [sp, #12]
    6bb4:	add	r1, r2, r3, lsl #2
    6bb8:	b	6bc8 <test_scan+0x14e4>
    6bbc:	cmp	r3, #0
    6bc0:	sub	r3, r3, #1
    6bc4:	beq	6c10 <test_scan+0x152c>
    6bc8:	cmp	r3, r4
    6bcc:	mov	r2, r1
    6bd0:	bcs	6d2c <test_scan+0x1648>
    6bd4:	ldr	r0, [r2]
    6bd8:	sub	r1, r1, #4
    6bdc:	adds	ip, r2, r0
    6be0:	beq	6edc <test_scan+0x17f8>
    6be4:	ldr	r2, [r2, r0]
    6be8:	sub	r2, ip, r2
    6bec:	ldrh	r0, [r2]
    6bf0:	cmp	r0, #9
    6bf4:	bls	6bbc <test_scan+0x14d8>
    6bf8:	ldrh	r2, [r2, #8]
    6bfc:	cmp	r2, #0
    6c00:	beq	6bbc <test_scan+0x14d8>
    6c04:	ldrsh	r2, [ip, r2]
    6c08:	cmp	r2, #1
    6c0c:	bne	6bbc <test_scan+0x14d8>
    6c10:	ldr	r1, [sp, #24]
    6c14:	b	6c24 <test_scan+0x1540>
    6c18:	cmp	sl, #0
    6c1c:	beq	5bf0 <test_scan+0x50c>
    6c20:	mov	sl, #0
    6c24:	mov	r3, r1
    6c28:	sub	r1, r1, #4
    6c2c:	ldr	r2, [r3]
    6c30:	adds	r0, r3, r2
    6c34:	beq	6edc <test_scan+0x17f8>
    6c38:	ldr	r3, [r3, r2]
    6c3c:	sub	r3, r0, r3
    6c40:	ldrh	r2, [r3]
    6c44:	cmp	r2, #9
    6c48:	bls	6c18 <test_scan+0x1534>
    6c4c:	ldrh	r3, [r3, #8]
    6c50:	cmp	r3, #0
    6c54:	beq	6c18 <test_scan+0x1534>
    6c58:	ldrsh	r3, [r0, r3]
    6c5c:	cmp	r3, #42	; 0x2a
    6c60:	bne	6c18 <test_scan+0x1534>
    6c64:	b	5bf0 <test_scan+0x50c>
    6c68:	cmp	r4, #4
    6c6c:	beq	6a80 <test_scan+0x139c>
    6c70:	b	6a74 <test_scan+0x1390>
    6c74:	cmp	r6, #4
    6c78:	bne	6ad4 <test_scan+0x13f0>
    6c7c:	ldr	ip, [sp, #20]
    6c80:	ldr	r2, [sp, #44]	; 0x2c
    6c84:	ldr	r1, [sp, #48]	; 0x30
    6c88:	ldr	r3, [sp, #52]	; 0x34
    6c8c:	b	6b24 <test_scan+0x1440>
    6c90:	movw	r1, #0
    6c94:	movt	r1, #0
    6c98:	ldr	r3, [pc, #-1496]	; 66c8 <test_scan+0xfe4>
    6c9c:	movw	r0, #0
    6ca0:	movt	r0, #0
    6ca4:	movw	r2, #699	; 0x2bb
    6ca8:	bl	0 <__assert_fail>
    6cac:	movw	r1, #0
    6cb0:	movt	r1, #0
    6cb4:	ldr	r3, [pc, #-1512]	; 66d4 <test_scan+0xff0>
    6cb8:	movw	r0, #0
    6cbc:	movt	r0, #0
    6cc0:	movw	r2, #1305	; 0x519
    6cc4:	bl	0 <__assert_fail>
    6cc8:	movw	r1, #0
    6ccc:	movt	r1, #0
    6cd0:	ldr	r3, [pc, #-1552]	; 66c8 <test_scan+0xfe4>
    6cd4:	movw	r0, #0
    6cd8:	movt	r0, #0
    6cdc:	movw	r2, #699	; 0x2bb
    6ce0:	bl	0 <__assert_fail>
    6ce4:	movw	r0, #0
    6ce8:	movt	r0, #0
    6cec:	bl	0 <puts>
    6cf0:	mvn	r3, #0
    6cf4:	str	r3, [sp, #36]	; 0x24
    6cf8:	b	5bf0 <test_scan+0x50c>
    6cfc:	movw	r0, #0
    6d00:	movt	r0, #0
    6d04:	bl	0 <puts>
    6d08:	mvn	r3, #0
    6d0c:	str	r3, [sp, #36]	; 0x24
    6d10:	b	5bf0 <test_scan+0x50c>
    6d14:	movw	r0, #0
    6d18:	movt	r0, #0
    6d1c:	bl	0 <puts>
    6d20:	mvn	r3, #0
    6d24:	str	r3, [sp, #36]	; 0x24
    6d28:	b	5bf0 <test_scan+0x50c>
    6d2c:	bl	3e8 <MyGame_Example_Monster_vec_at.part.23>
    6d30:	ldr	r3, [sp, #32]
    6d34:	add	r8, r3, ip
    6d38:	rsb	r2, r3, #1
    6d3c:	b	6718 <test_scan+0x1034>
    6d40:	movw	r0, #0
    6d44:	movt	r0, #0
    6d48:	bl	0 <puts>
    6d4c:	mvn	r3, #0
    6d50:	str	r3, [sp, #36]	; 0x24
    6d54:	b	5bf0 <test_scan+0x50c>
    6d58:	movw	r0, #0
    6d5c:	movt	r0, #0
    6d60:	bl	0 <puts>
    6d64:	mvn	r3, #0
    6d68:	str	r3, [sp, #36]	; 0x24
    6d6c:	b	5bf0 <test_scan+0x50c>
    6d70:	movw	r0, #0
    6d74:	movt	r0, #0
    6d78:	bl	0 <puts>
    6d7c:	mvn	r3, #0
    6d80:	str	r3, [sp, #36]	; 0x24
    6d84:	b	5bf0 <test_scan+0x50c>
    6d88:	movw	r0, #0
    6d8c:	movt	r0, #0
    6d90:	bl	0 <puts>
    6d94:	mvn	r3, #0
    6d98:	str	r3, [sp, #36]	; 0x24
    6d9c:	b	5bf0 <test_scan+0x50c>
    6da0:	movw	r0, #0
    6da4:	movt	r0, #0
    6da8:	bl	0 <puts>
    6dac:	mvn	r3, #0
    6db0:	str	r3, [sp, #36]	; 0x24
    6db4:	b	5bf0 <test_scan+0x50c>
    6db8:	movw	r0, #0
    6dbc:	movt	r0, #0
    6dc0:	bl	0 <puts>
    6dc4:	mvn	r3, #0
    6dc8:	str	r3, [sp, #36]	; 0x24
    6dcc:	b	5bf0 <test_scan+0x50c>
    6dd0:	movw	r0, #0
    6dd4:	movt	r0, #0
    6dd8:	str	r8, [sp, #36]	; 0x24
    6ddc:	bl	0 <puts>
    6de0:	b	5bf0 <test_scan+0x50c>
    6de4:	movw	r0, #0
    6de8:	movt	r0, #0
    6dec:	bl	0 <puts>
    6df0:	mvn	r3, #0
    6df4:	str	r3, [sp, #36]	; 0x24
    6df8:	b	5bf0 <test_scan+0x50c>
    6dfc:	movw	r0, #0
    6e00:	movt	r0, #0
    6e04:	str	r9, [sp, #36]	; 0x24
    6e08:	bl	0 <puts>
    6e0c:	b	5bf0 <test_scan+0x50c>
    6e10:	movw	r0, #0
    6e14:	movt	r0, #0
    6e18:	str	r9, [sp, #36]	; 0x24
    6e1c:	bl	0 <puts>
    6e20:	b	5bf0 <test_scan+0x50c>
    6e24:	movw	r0, #0
    6e28:	movt	r0, #0
    6e2c:	bl	0 <puts>
    6e30:	mvn	r3, #0
    6e34:	str	r3, [sp, #36]	; 0x24
    6e38:	b	5bf0 <test_scan+0x50c>
    6e3c:	movw	r0, #0
    6e40:	movt	r0, #0
    6e44:	bl	0 <puts>
    6e48:	mvn	r3, #0
    6e4c:	str	r3, [sp, #36]	; 0x24
    6e50:	b	5bf0 <test_scan+0x50c>
    6e54:	movw	r0, #0
    6e58:	movt	r0, #0
    6e5c:	bl	0 <puts>
    6e60:	mvn	r3, #0
    6e64:	str	r3, [sp, #36]	; 0x24
    6e68:	b	5bf0 <test_scan+0x50c>
    6e6c:	movw	r0, #0
    6e70:	movt	r0, #0
    6e74:	bl	0 <puts>
    6e78:	mvn	r3, #0
    6e7c:	str	r3, [sp, #36]	; 0x24
    6e80:	b	5bf0 <test_scan+0x50c>
    6e84:	movw	r0, #0
    6e88:	movt	r0, #0
    6e8c:	bl	0 <puts>
    6e90:	mvn	r3, #0
    6e94:	str	r3, [sp, #36]	; 0x24
    6e98:	b	5bf0 <test_scan+0x50c>
    6e9c:	movw	r0, #0
    6ea0:	movt	r0, #0
    6ea4:	str	r6, [sp, #36]	; 0x24
    6ea8:	bl	0 <puts>
    6eac:	b	5bf0 <test_scan+0x50c>
    6eb0:	movw	r0, #0
    6eb4:	movt	r0, #0
    6eb8:	bl	0 <puts>
    6ebc:	mvn	r3, #0
    6ec0:	str	r3, [sp, #36]	; 0x24
    6ec4:	b	5bf0 <test_scan+0x50c>
    6ec8:	movw	r0, #0
    6ecc:	movt	r0, #0
    6ed0:	str	r6, [sp, #36]	; 0x24
    6ed4:	bl	0 <puts>
    6ed8:	b	5bf0 <test_scan+0x50c>
    6edc:	movw	r3, #0
    6ee0:	movt	r3, #0
    6ee4:	movw	r1, #0
    6ee8:	movt	r1, #0
    6eec:	movw	r0, #0
    6ef0:	movt	r0, #0
    6ef4:	movw	r2, #697	; 0x2b9
    6ef8:	bl	0 <__assert_fail>
    6efc:	movw	r1, #0
    6f00:	movt	r1, #0
    6f04:	ldr	r3, [pc, #-2112]	; 66cc <test_scan+0xfe8>
    6f08:	movw	r0, #0
    6f0c:	movt	r0, #0
    6f10:	mov	r2, #108	; 0x6c
    6f14:	bl	0 <__assert_fail>
    6f18:	movw	r0, #0
    6f1c:	movt	r0, #0
    6f20:	str	r6, [sp, #36]	; 0x24
    6f24:	bl	0 <puts>
    6f28:	b	5bf0 <test_scan+0x50c>
    6f2c:	movw	r1, #0
    6f30:	movt	r1, #0
    6f34:	ldr	r3, [pc, #-2156]	; 66d0 <test_scan+0xfec>
    6f38:	movw	r0, #0
    6f3c:	movt	r0, #0
    6f40:	movw	r2, #395	; 0x18b
    6f44:	bl	0 <__assert_fail>
    6f48:	movw	r0, #0
    6f4c:	movt	r0, #0
    6f50:	bl	0 <puts>
    6f54:	mvn	r3, #0
    6f58:	str	r3, [sp, #36]	; 0x24
    6f5c:	b	5bf0 <test_scan+0x50c>
    6f60:	movw	r0, #0
    6f64:	movt	r0, #0
    6f68:	bl	0 <puts>
    6f6c:	mvn	r3, #0
    6f70:	str	r3, [sp, #36]	; 0x24
    6f74:	b	5bf0 <test_scan+0x50c>
    6f78:	bl	7dc <MyGame_Example_Monster_end.part.49>
    6f7c:	bl	370 <flatbuffers_string_vec_at.part.20>
    6f80:	movw	r1, #0
    6f84:	movt	r1, #0
    6f88:	ldr	r3, [pc, #-2236]	; 66d4 <test_scan+0xff0>
    6f8c:	movw	r0, #0
    6f90:	movt	r0, #0
    6f94:	movw	r2, #1307	; 0x51b
    6f98:	bl	0 <__assert_fail>
    6f9c:	movw	r1, #0
    6fa0:	movt	r1, #0
    6fa4:	ldr	r3, [pc, #-2264]	; 66d4 <test_scan+0xff0>
    6fa8:	movw	r0, #0
    6fac:	movt	r0, #0
    6fb0:	movw	r2, #1309	; 0x51d
    6fb4:	bl	0 <__assert_fail>

00006fb8 <test_basic_sort>:
    6fb8:	movw	r2, #1798	; 0x706
    6fbc:	movt	r2, #769	; 0x301
    6fc0:	strd	r4, [sp, #-36]!	; 0xffffffdc
    6fc4:	strd	r6, [sp, #8]
    6fc8:	mov	ip, #2
    6fcc:	movw	r1, #1540	; 0x604
    6fd0:	strd	r8, [sp, #16]
    6fd4:	movw	r3, #513	; 0x201
    6fd8:	movt	r3, #771	; 0x303
    6fdc:	strd	sl, [sp, #24]
    6fe0:	mov	r4, r0
    6fe4:	str	lr, [sp, #32]
    6fe8:	sub	sp, sp, #36	; 0x24
    6fec:	mov	lr, #772	; 0x304
    6ff0:	str	r2, [sp, #16]
    6ff4:	mov	r2, #7
    6ff8:	strh	lr, [sp, #20]
    6ffc:	strb	ip, [sp, #22]
    7000:	str	r3, [sp, #24]
    7004:	strh	r1, [sp, #28]
    7008:	strb	r2, [sp, #30]
    700c:	bl	0 <flatcc_builder_reset>
    7010:	mov	r3, #0
    7014:	mov	r0, r4
    7018:	mov	r2, r3
    701c:	movw	r1, #0
    7020:	movt	r1, #0
    7024:	bl	0 <flatcc_builder_start_buffer>
    7028:	cmp	r0, #0
    702c:	bne	703c <test_basic_sort+0x84>
    7030:	mov	r1, #36	; 0x24
    7034:	mov	r0, r4
    7038:	bl	0 <flatcc_builder_start_table>
    703c:	movw	r1, #0
    7040:	movt	r1, #0
    7044:	mov	r0, r4
    7048:	bl	0 <flatcc_builder_create_string_str>
    704c:	subs	r5, r0, #0
    7050:	beq	7068 <test_basic_sort+0xb0>
    7054:	mov	r1, #3
    7058:	mov	r0, r4
    705c:	bl	0 <flatcc_builder_table_add_offset>
    7060:	cmp	r0, #0
    7064:	strne	r5, [r0]
    7068:	mov	r1, #1
    706c:	mvn	ip, #0
    7070:	mov	r3, r1
    7074:	mov	r2, #7
    7078:	mov	r0, r4
    707c:	stm	sp, {r1, ip}
    7080:	add	r1, sp, #16
    7084:	bl	0 <flatcc_builder_create_vector>
    7088:	subs	r5, r0, #0
    708c:	beq	70a4 <test_basic_sort+0xec>
    7090:	mov	r1, #5
    7094:	mov	r0, r4
    7098:	bl	0 <flatcc_builder_table_add_offset>
    709c:	cmp	r0, #0
    70a0:	strne	r5, [r0]
    70a4:	mov	r2, #1
    70a8:	ldr	r1, [pc, #940]	; 745c <test_basic_sort+0x4a4>
    70ac:	mov	r0, r4
    70b0:	bl	0 <flatcc_builder_check_required>
    70b4:	cmp	r0, #0
    70b8:	beq	744c <test_basic_sort+0x494>
    70bc:	mov	r0, r4
    70c0:	bl	0 <flatcc_builder_end_table>
    70c4:	mov	r1, r0
    70c8:	mov	r0, r4
    70cc:	bl	0 <flatcc_builder_end_buffer>
    70d0:	mov	r0, r4
    70d4:	add	r1, sp, #12
    70d8:	bl	0 <flatcc_builder_get_direct_buffer>
    70dc:	cmp	r0, #0
    70e0:	beq	70f8 <test_basic_sort+0x140>
    70e4:	ldr	r2, [r0, #4]
    70e8:	movw	r3, #20301	; 0x4f4d
    70ec:	movt	r3, #21326	; 0x534e
    70f0:	cmp	r2, r3
    70f4:	beq	70fc <test_basic_sort+0x144>
    70f8:	bl	2a8 <MyGame_Example_Monster_inventory.part.13>
    70fc:	ldr	r3, [r0]
    7100:	adds	r5, r0, r3
    7104:	beq	70f8 <test_basic_sort+0x140>
    7108:	ldr	r3, [r0, r3]
    710c:	sub	r3, r5, r3
    7110:	ldrh	r2, [r3]
    7114:	cmp	r2, #15
    7118:	bls	7374 <test_basic_sort+0x3bc>
    711c:	ldrh	r3, [r3, #14]
    7120:	cmp	r3, #0
    7124:	beq	7374 <test_basic_sort+0x3bc>
    7128:	ldr	r6, [r5, r3]
    712c:	add	r5, r5, r3
    7130:	add	r6, r6, #4
    7134:	adds	r3, r5, r6
    7138:	beq	7374 <test_basic_sort+0x3bc>
    713c:	ldr	sl, [r3, #-4]
    7140:	cmp	sl, #0
    7144:	beq	7374 <test_basic_sort+0x3bc>
    7148:	lsr	r7, sl, #1
    714c:	sub	r0, sl, #1
    7150:	lsl	r8, r7, #1
    7154:	cmp	r0, r8
    7158:	movcs	r2, r7
    715c:	movcs	r1, r8
    7160:	bcs	71c0 <test_basic_sort+0x208>
    7164:	b	71f8 <test_basic_sort+0x240>
    7168:	cmp	r1, ip
    716c:	bcs	7430 <test_basic_sort+0x478>
    7170:	add	lr, r1, #1
    7174:	ldrb	fp, [r3, r1]
    7178:	cmp	lr, ip
    717c:	bcs	7430 <test_basic_sort+0x478>
    7180:	ldrb	r4, [r3, lr]
    7184:	add	r9, r3, lr
    7188:	cmp	fp, r4
    718c:	bcs	7390 <test_basic_sort+0x3d8>
    7190:	cmp	r2, ip
    7194:	bcs	7430 <test_basic_sort+0x478>
    7198:	ldrb	ip, [r3, r2]
    719c:	add	fp, r3, r2
    71a0:	mov	r2, lr
    71a4:	cmp	r4, ip
    71a8:	bls	71f8 <test_basic_sort+0x240>
    71ac:	lsl	r1, r2, #1
    71b0:	strb	ip, [r9]
    71b4:	strb	r4, [fp]
    71b8:	cmp	r0, r1
    71bc:	bcc	71f8 <test_basic_sort+0x240>
    71c0:	cmp	r0, r1
    71c4:	ldr	ip, [r3, #-4]
    71c8:	bhi	7168 <test_basic_sort+0x1b0>
    71cc:	cmp	r2, ip
    71d0:	bcs	7430 <test_basic_sort+0x478>
    71d4:	cmp	r1, ip
    71d8:	add	fp, r3, r2
    71dc:	ldrb	ip, [r3, r2]
    71e0:	bcs	7430 <test_basic_sort+0x478>
    71e4:	ldrb	r4, [r3, r1]
    71e8:	add	r9, r3, r1
    71ec:	mov	r2, r1
    71f0:	cmp	r4, ip
    71f4:	bhi	71ac <test_basic_sort+0x1f4>
    71f8:	sub	r7, r7, #1
    71fc:	sub	r8, r8, #2
    7200:	cmn	r7, #1
    7204:	bne	7154 <test_basic_sort+0x19c>
    7208:	cmp	r0, #0
    720c:	beq	72cc <test_basic_sort+0x314>
    7210:	add	sl, r3, sl
    7214:	ldrb	ip, [sl, #-1]!
    7218:	mov	r2, #0
    721c:	sub	r0, r0, #1
    7220:	mov	r1, r2
    7224:	ldrb	lr, [r3]
    7228:	strb	lr, [sl]
    722c:	strb	ip, [r3]
    7230:	b	728c <test_basic_sort+0x2d4>
    7234:	cmp	ip, r1
    7238:	bls	7430 <test_basic_sort+0x478>
    723c:	add	lr, r1, #1
    7240:	ldrb	r7, [r3, r1]
    7244:	cmp	ip, lr
    7248:	bls	7430 <test_basic_sort+0x478>
    724c:	ldrb	r4, [r3, lr]
    7250:	add	r8, r3, lr
    7254:	cmp	r7, r4
    7258:	bcs	73a4 <test_basic_sort+0x3ec>
    725c:	cmp	ip, r2
    7260:	bls	7430 <test_basic_sort+0x478>
    7264:	ldrb	ip, [r3, r2]
    7268:	add	r7, r3, r2
    726c:	mov	r2, lr
    7270:	cmp	r4, ip
    7274:	bls	72c4 <test_basic_sort+0x30c>
    7278:	lsl	r1, r2, #1
    727c:	strb	ip, [r8]
    7280:	strb	r4, [r7]
    7284:	cmp	r0, r1
    7288:	bcc	72c4 <test_basic_sort+0x30c>
    728c:	cmp	r0, r1
    7290:	ldr	ip, [r3, #-4]
    7294:	bhi	7234 <test_basic_sort+0x27c>
    7298:	cmp	ip, r2
    729c:	bls	7430 <test_basic_sort+0x478>
    72a0:	cmp	ip, r1
    72a4:	add	r7, r3, r2
    72a8:	ldrb	ip, [r3, r2]
    72ac:	bls	7430 <test_basic_sort+0x478>
    72b0:	ldrb	r4, [r3, r1]
    72b4:	add	r8, r3, r1
    72b8:	mov	r2, r1
    72bc:	cmp	r4, ip
    72c0:	bhi	7278 <test_basic_sort+0x2c0>
    72c4:	cmp	r0, #0
    72c8:	bne	7214 <test_basic_sort+0x25c>
    72cc:	ldr	r2, [r3, #-4]
    72d0:	cmp	r2, #7
    72d4:	bne	7374 <test_basic_sort+0x3bc>
    72d8:	ldrb	ip, [r5, r6]
    72dc:	cmp	ip, #1
    72e0:	bne	7414 <test_basic_sort+0x45c>
    72e4:	mov	r6, r3
    72e8:	add	r5, sp, #25
    72ec:	mov	r4, ip
    72f0:	mov	lr, #6
    72f4:	mov	r0, #0
    72f8:	sub	r2, lr, r0
    72fc:	add	r2, r0, r2, lsr #1
    7300:	cmp	r2, #6
    7304:	bhi	7430 <test_basic_sort+0x478>
    7308:	ldrb	r1, [r3, r2]
    730c:	cmp	r1, ip
    7310:	bcs	7338 <test_basic_sort+0x380>
    7314:	b	73b8 <test_basic_sort+0x400>
    7318:	sub	r1, r2, r0
    731c:	add	r1, r0, r1, lsr #1
    7320:	cmp	r1, #6
    7324:	bhi	7430 <test_basic_sort+0x478>
    7328:	ldrb	lr, [r3, r1]
    732c:	cmp	lr, ip
    7330:	bcc	73c0 <test_basic_sort+0x408>
    7334:	mov	r2, r1
    7338:	cmp	r2, r0
    733c:	bhi	7318 <test_basic_sort+0x360>
    7340:	cmp	r2, r0
    7344:	beq	73d4 <test_basic_sort+0x41c>
    7348:	movw	r0, #0
    734c:	movt	r0, #0
    7350:	bl	0 <puts>
    7354:	mvn	r0, #0
    7358:	add	sp, sp, #36	; 0x24
    735c:	ldrd	r4, [sp]
    7360:	ldrd	r6, [sp, #8]
    7364:	ldrd	r8, [sp, #16]
    7368:	ldrd	sl, [sp, #24]
    736c:	add	sp, sp, #32
    7370:	pop	{pc}		; (ldr pc, [sp], #4)
    7374:	movw	r1, #0
    7378:	movt	r1, #0
    737c:	ldr	r3, [pc, #220]	; 7460 <test_basic_sort+0x4a8>
    7380:	movw	r0, #0
    7384:	movt	r0, #0
    7388:	mov	r2, #1552	; 0x610
    738c:	bl	0 <__assert_fail>
    7390:	cmp	r2, ip
    7394:	bcs	7430 <test_basic_sort+0x478>
    7398:	add	fp, r3, r2
    739c:	ldrb	ip, [r3, r2]
    73a0:	b	71e4 <test_basic_sort+0x22c>
    73a4:	cmp	ip, r2
    73a8:	bls	7430 <test_basic_sort+0x478>
    73ac:	add	r7, r3, r2
    73b0:	ldrb	ip, [r3, r2]
    73b4:	b	72b0 <test_basic_sort+0x2f8>
    73b8:	mov	r1, r2
    73bc:	mov	r2, lr
    73c0:	add	r0, r1, #1
    73c4:	cmp	r0, r2
    73c8:	bcs	7340 <test_basic_sort+0x388>
    73cc:	mov	lr, r2
    73d0:	b	72f8 <test_basic_sort+0x340>
    73d4:	ldrb	r1, [r3, r2]
    73d8:	cmp	r1, ip
    73dc:	bne	7348 <test_basic_sort+0x390>
    73e0:	uxtb	r1, r4
    73e4:	cmp	r1, #4
    73e8:	beq	7450 <test_basic_sort+0x498>
    73ec:	sub	r0, r4, #1
    73f0:	cmp	r0, r2
    73f4:	bne	7348 <test_basic_sort+0x390>
    73f8:	cmp	r1, #7
    73fc:	beq	7428 <test_basic_sort+0x470>
    7400:	ldrb	ip, [r6, #1]!
    7404:	add	r4, r4, #1
    7408:	ldrb	r2, [r5], #1
    740c:	cmp	r2, ip
    7410:	beq	72f0 <test_basic_sort+0x338>
    7414:	movw	r0, #0
    7418:	movt	r0, #0
    741c:	bl	0 <puts>
    7420:	mvn	r0, #0
    7424:	b	7358 <test_basic_sort+0x3a0>
    7428:	mov	r0, #0
    742c:	b	7358 <test_basic_sort+0x3a0>
    7430:	movw	r1, #0
    7434:	movt	r1, #0
    7438:	ldr	r3, [pc, #36]	; 7464 <test_basic_sort+0x4ac>
    743c:	movw	r0, #0
    7440:	movt	r0, #0
    7444:	movw	r2, #395	; 0x18b
    7448:	bl	0 <__assert_fail>
    744c:	bl	7dc <MyGame_Example_Monster_end.part.49>
    7450:	cmp	r2, #2
    7454:	beq	7400 <test_basic_sort+0x448>
    7458:	b	7348 <test_basic_sort+0x390>
    745c:	.word	0x00000404
    7460:	.word	0x00000558
    7464:	.word	0x0000053c

00007468 <test_clone_slice>:
    7468:	mov	r2, #256	; 0x100
    746c:	mov	r3, #1
    7470:	strd	r4, [sp, #-36]!	; 0xffffffdc
    7474:	mov	r5, #0
    7478:	strd	r6, [sp, #8]
    747c:	mov	r4, r0
    7480:	strd	r8, [sp, #16]
    7484:	strd	sl, [sp, #24]
    7488:	str	lr, [sp, #32]
    748c:	sub	sp, sp, #36	; 0x24
    7490:	str	r2, [sp, #24]
    7494:	strh	r3, [sp, #28]
    7498:	strb	r5, [sp, #30]
    749c:	bl	0 <flatcc_builder_reset>
    74a0:	mov	r3, r5
    74a4:	mov	r2, r5
    74a8:	mov	r0, r4
    74ac:	movw	r1, #0
    74b0:	movt	r1, #0
    74b4:	bl	0 <flatcc_builder_start_buffer>
    74b8:	cmp	r0, r5
    74bc:	bne	74cc <test_clone_slice+0x64>
    74c0:	mov	r1, #36	; 0x24
    74c4:	mov	r0, r4
    74c8:	bl	0 <flatcc_builder_start_table>
    74cc:	movw	r1, #0
    74d0:	movt	r1, #0
    74d4:	mov	r0, r4
    74d8:	bl	0 <flatcc_builder_create_string_str>
    74dc:	subs	r5, r0, #0
    74e0:	beq	74f8 <test_clone_slice+0x90>
    74e4:	mov	r1, #3
    74e8:	mov	r0, r4
    74ec:	bl	0 <flatcc_builder_table_add_offset>
    74f0:	cmp	r0, #0
    74f4:	strne	r5, [r0]
    74f8:	mov	r2, #1
    74fc:	mvn	r0, #0
    7500:	mov	r3, r2
    7504:	add	r1, sp, #24
    7508:	str	r2, [sp]
    750c:	mov	r2, #7
    7510:	str	r0, [sp, #4]
    7514:	mov	r0, r4
    7518:	bl	0 <flatcc_builder_create_vector>
    751c:	subs	r5, r0, #0
    7520:	beq	7538 <test_clone_slice+0xd0>
    7524:	mov	r1, #24
    7528:	mov	r0, r4
    752c:	bl	0 <flatcc_builder_table_add_offset>
    7530:	cmp	r0, #0
    7534:	strne	r5, [r0]
    7538:	mvn	r3, #-1073741824	; 0xc0000000
    753c:	mov	r2, #2
    7540:	mov	r1, #4
    7544:	mov	r0, r4
    7548:	bl	0 <flatcc_builder_start_vector>
    754c:	mov	r1, #2
    7550:	mov	r0, r4
    7554:	bl	0 <flatcc_builder_extend_vector>
    7558:	mov	r3, r0
    755c:	mov	r1, #22
    7560:	mov	r2, #44	; 0x2c
    7564:	mov	r0, r4
    7568:	strh	r1, [r3]
    756c:	strh	r2, [r3, #4]
    7570:	bl	0 <flatcc_builder_end_vector>
    7574:	subs	r5, r0, #0
    7578:	beq	7590 <test_clone_slice+0x128>
    757c:	mov	r1, #9
    7580:	mov	r0, r4
    7584:	bl	0 <flatcc_builder_table_add_offset>
    7588:	cmp	r0, #0
    758c:	strne	r5, [r0]
    7590:	mov	r3, #16
    7594:	mov	r2, #32
    7598:	mov	r1, #0
    759c:	mov	r0, r4
    75a0:	bl	0 <flatcc_builder_table_add>
    75a4:	movw	r3, #13107	; 0x3333
    75a8:	movt	r3, #49705	; 0xc229
    75ac:	ldr	r1, [pc, #2512]	; 7f84 <test_clone_slice+0xb1c>
    75b0:	mov	r2, #1
    75b4:	str	r3, [r0]
    75b8:	mov	r0, r4
    75bc:	bl	0 <flatcc_builder_check_required>
    75c0:	cmp	r0, #0
    75c4:	beq	7f08 <test_clone_slice+0xaa0>
    75c8:	mov	r0, r4
    75cc:	movw	sl, #0
    75d0:	movt	sl, #0
    75d4:	bl	0 <flatcc_builder_end_table>
    75d8:	mov	r1, r0
    75dc:	mov	r0, r4
    75e0:	bl	0 <flatcc_builder_end_buffer>
    75e4:	add	r1, sp, #20
    75e8:	mov	r0, r4
    75ec:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    75f0:	mov	r8, r0
    75f4:	mov	r1, r0
    75f8:	ldr	r3, [sl]
    75fc:	movw	r0, #0
    7600:	movt	r0, #0
    7604:	ldr	r2, [sp, #20]
    7608:	bl	28 <hexdump>
    760c:	cmp	r8, #0
    7610:	mov	r0, r4
    7614:	beq	762c <test_clone_slice+0x1c4>
    7618:	ldr	r2, [r8, #4]
    761c:	movw	r3, #20301	; 0x4f4d
    7620:	movt	r3, #21326	; 0x534e
    7624:	cmp	r2, r3
    7628:	beq	7660 <test_clone_slice+0x1f8>
    762c:	bl	0 <flatcc_builder_reset>
    7630:	mov	r3, #0
    7634:	movw	r1, #0
    7638:	movt	r1, #0
    763c:	mov	r2, r3
    7640:	mov	r0, r4
    7644:	bl	0 <flatcc_builder_start_buffer>
    7648:	cmp	r0, #0
    764c:	bne	765c <test_clone_slice+0x1f4>
    7650:	mov	r0, r4
    7654:	mov	r1, #36	; 0x24
    7658:	bl	0 <flatcc_builder_start_table>
    765c:	bl	4ec <MyGame_Example_Monster_name.part.26>
    7660:	ldr	fp, [r8]
    7664:	bl	0 <flatcc_builder_reset>
    7668:	mov	r3, #0
    766c:	movw	r1, #0
    7670:	movt	r1, #0
    7674:	mov	r2, r3
    7678:	mov	r0, r4
    767c:	bl	0 <flatcc_builder_start_buffer>
    7680:	cmp	r0, #0
    7684:	add	r9, r8, fp
    7688:	bne	7698 <test_clone_slice+0x230>
    768c:	mov	r1, #36	; 0x24
    7690:	mov	r0, r4
    7694:	bl	0 <flatcc_builder_start_table>
    7698:	cmp	r9, #0
    769c:	beq	765c <test_clone_slice+0x1f4>
    76a0:	ldr	r3, [r8, fp]
    76a4:	sub	r3, r9, r3
    76a8:	ldrh	r1, [r3]
    76ac:	cmp	r1, #11
    76b0:	bls	7ed8 <test_clone_slice+0xa70>
    76b4:	ldrh	r5, [r3, #10]
    76b8:	cmp	r5, #0
    76bc:	beq	7ed8 <test_clone_slice+0xa70>
    76c0:	ldr	r2, [r9, r5]
    76c4:	add	r5, r9, r5
    76c8:	add	r2, r2, #4
    76cc:	adds	r5, r5, r2
    76d0:	beq	7f24 <test_clone_slice+0xabc>
    76d4:	cmp	r1, #53	; 0x35
    76d8:	bls	7f5c <test_clone_slice+0xaf4>
    76dc:	ldrh	r6, [r3, #52]	; 0x34
    76e0:	cmp	r6, #0
    76e4:	beq	7f5c <test_clone_slice+0xaf4>
    76e8:	ldr	r2, [r9, r6]
    76ec:	add	r6, r9, r6
    76f0:	add	r2, r2, #4
    76f4:	adds	r6, r6, r2
    76f8:	beq	7f5c <test_clone_slice+0xaf4>
    76fc:	ldrh	r7, [r3, #22]
    7700:	cmp	r7, #0
    7704:	beq	7f40 <test_clone_slice+0xad8>
    7708:	ldr	r3, [r9, r7]
    770c:	add	r7, r9, r7
    7710:	add	r3, r3, #4
    7714:	adds	r7, r7, r3
    7718:	beq	7f40 <test_clone_slice+0xad8>
    771c:	mov	r1, r5
    7720:	mov	r0, r4
    7724:	ldr	r2, [r5, #-4]
    7728:	bl	0 <flatcc_builder_create_string>
    772c:	subs	r3, r0, #0
    7730:	str	r3, [sp, #12]
    7734:	beq	7750 <test_clone_slice+0x2e8>
    7738:	mov	r1, #3
    773c:	mov	r0, r4
    7740:	bl	0 <flatcc_builder_table_add_offset>
    7744:	cmp	r0, #0
    7748:	ldrne	r3, [sp, #12]
    774c:	strne	r3, [r0]
    7750:	mov	r0, r4
    7754:	bl	0 <flatcc_builder_start_offset_vector>
    7758:	mov	r1, r5
    775c:	mov	r0, r4
    7760:	ldr	r2, [r5, #-4]
    7764:	bl	0 <flatcc_builder_create_string>
    7768:	subs	r1, r0, #0
    776c:	beq	7778 <test_clone_slice+0x310>
    7770:	mov	r0, r4
    7774:	bl	0 <flatcc_builder_offset_vector_push>
    7778:	ldr	r1, [r5, #-4]
    777c:	cmp	r1, #4
    7780:	movls	r2, #0
    7784:	bls	7798 <test_clone_slice+0x330>
    7788:	sub	r2, r1, #4
    778c:	mov	r1, #4
    7790:	cmp	r2, #19
    7794:	movhi	r2, #20
    7798:	add	r1, r5, r1
    779c:	mov	r0, r4
    77a0:	bl	0 <flatcc_builder_create_string>
    77a4:	subs	r1, r0, #0
    77a8:	beq	77b4 <test_clone_slice+0x34c>
    77ac:	mov	r0, r4
    77b0:	bl	0 <flatcc_builder_offset_vector_push>
    77b4:	ldr	r2, [r5, #-4]
    77b8:	mov	r1, r5
    77bc:	mov	r0, r4
    77c0:	cmp	r2, #3
    77c4:	movcs	r2, #3
    77c8:	bl	0 <flatcc_builder_create_string>
    77cc:	subs	r1, r0, #0
    77d0:	beq	77dc <test_clone_slice+0x374>
    77d4:	mov	r0, r4
    77d8:	bl	0 <flatcc_builder_offset_vector_push>
    77dc:	mov	r0, r4
    77e0:	bl	0 <flatcc_builder_end_offset_vector>
    77e4:	subs	r3, r0, #0
    77e8:	str	r3, [sp, #12]
    77ec:	beq	7808 <test_clone_slice+0x3a0>
    77f0:	mov	r1, #10
    77f4:	mov	r0, r4
    77f8:	bl	0 <flatcc_builder_table_add_offset>
    77fc:	cmp	r0, #0
    7800:	ldrne	r3, [sp, #12]
    7804:	strne	r3, [r0]
    7808:	mov	r1, #36	; 0x24
    780c:	mov	r0, r4
    7810:	bl	0 <flatcc_builder_start_table>
    7814:	ldr	r1, [r5, #-4]
    7818:	cmp	r1, #2
    781c:	movls	r2, #0
    7820:	bls	7834 <test_clone_slice+0x3cc>
    7824:	sub	r2, r1, #2
    7828:	mov	r1, #2
    782c:	cmp	r2, #19
    7830:	movhi	r2, #20
    7834:	add	r1, r5, r1
    7838:	mov	r0, r4
    783c:	bl	0 <flatcc_builder_create_string>
    7840:	subs	r5, r0, #0
    7844:	beq	785c <test_clone_slice+0x3f4>
    7848:	mov	r1, #3
    784c:	mov	r0, r4
    7850:	bl	0 <flatcc_builder_table_add_offset>
    7854:	cmp	r0, #0
    7858:	strne	r5, [r0]
    785c:	mov	r0, #1
    7860:	mvn	ip, #0
    7864:	ldr	r2, [r6, #-4]
    7868:	mov	r3, r0
    786c:	mov	r1, r6
    7870:	stm	sp, {r0, ip}
    7874:	mov	r0, r4
    7878:	bl	0 <flatcc_builder_create_vector>
    787c:	subs	r5, r0, #0
    7880:	beq	7898 <test_clone_slice+0x430>
    7884:	mov	r1, #24
    7888:	mov	r0, r4
    788c:	bl	0 <flatcc_builder_table_add_offset>
    7890:	cmp	r0, #0
    7894:	strne	r5, [r0]
    7898:	ldr	r1, [r7, #-4]
    789c:	cmp	r1, #1
    78a0:	lslls	r1, r1, #2
    78a4:	movls	r2, #0
    78a8:	bls	78bc <test_clone_slice+0x454>
    78ac:	cmp	r1, #2
    78b0:	mov	r1, #4
    78b4:	moveq	r2, #1
    78b8:	movne	r2, #2
    78bc:	mvn	ip, #-1073741824	; 0xc0000000
    78c0:	mov	r3, #2
    78c4:	add	r1, r7, r1
    78c8:	mov	r0, r4
    78cc:	stm	sp, {r3, ip}
    78d0:	mov	r3, #4
    78d4:	bl	0 <flatcc_builder_create_vector>
    78d8:	subs	r5, r0, #0
    78dc:	beq	78f4 <test_clone_slice+0x48c>
    78e0:	mov	r1, #9
    78e4:	mov	r0, r4
    78e8:	bl	0 <flatcc_builder_table_add_offset>
    78ec:	cmp	r0, #0
    78f0:	strne	r5, [r0]
    78f4:	mov	r2, #1
    78f8:	ldr	r1, [pc, #1668]	; 7f84 <test_clone_slice+0xb1c>
    78fc:	mov	r0, r4
    7900:	bl	0 <flatcc_builder_check_required>
    7904:	cmp	r0, #0
    7908:	beq	7f08 <test_clone_slice+0xaa0>
    790c:	mov	r0, r4
    7910:	bl	0 <flatcc_builder_end_table>
    7914:	subs	r5, r0, #0
    7918:	beq	7960 <test_clone_slice+0x4f8>
    791c:	mov	r3, #1
    7920:	mov	r1, #7
    7924:	mov	r2, r3
    7928:	mov	r0, r4
    792c:	bl	0 <flatcc_builder_table_add>
    7930:	subs	r3, r0, #0
    7934:	str	r3, [sp, #12]
    7938:	beq	7960 <test_clone_slice+0x4f8>
    793c:	mov	r1, #8
    7940:	mov	r0, r4
    7944:	bl	0 <flatcc_builder_table_add_offset>
    7948:	cmp	r0, #0
    794c:	beq	7960 <test_clone_slice+0x4f8>
    7950:	ldr	r3, [sp, #12]
    7954:	mov	r2, #1
    7958:	strb	r2, [r3]
    795c:	str	r5, [r0]
    7960:	ldr	r1, [r6, #-4]
    7964:	mvn	ip, #0
    7968:	mov	r3, #1
    796c:	mov	r0, r4
    7970:	stm	sp, {r3, ip}
    7974:	cmp	r1, #3
    7978:	subhi	r2, r1, #3
    797c:	movhi	r1, #3
    7980:	movls	r2, #0
    7984:	add	r1, r6, r1
    7988:	bl	0 <flatcc_builder_create_vector>
    798c:	subs	r5, r0, #0
    7990:	beq	79a8 <test_clone_slice+0x540>
    7994:	mov	r1, #24
    7998:	mov	r0, r4
    799c:	bl	0 <flatcc_builder_table_add_offset>
    79a0:	cmp	r0, #0
    79a4:	strne	r5, [r0]
    79a8:	ldr	r3, [r8, fp]
    79ac:	sub	r3, r9, r3
    79b0:	ldrh	r2, [r3]
    79b4:	cmp	r2, #5
    79b8:	movls	r2, #0
    79bc:	bls	79cc <test_clone_slice+0x564>
    79c0:	ldrh	r2, [r3, #4]
    79c4:	cmp	r2, #0
    79c8:	addne	r2, r9, r2
    79cc:	mov	r0, #16
    79d0:	mov	r3, #32
    79d4:	mov	r1, #0
    79d8:	str	r0, [sp]
    79dc:	mov	r0, r4
    79e0:	bl	0 <flatcc_builder_table_add_copy>
    79e4:	mvn	ip, #-1073741824	; 0xc0000000
    79e8:	mov	r0, #2
    79ec:	ldr	r2, [r7, #-4]
    79f0:	mov	r1, r7
    79f4:	mov	r3, #4
    79f8:	stm	sp, {r0, ip}
    79fc:	mov	r0, r4
    7a00:	bl	0 <flatcc_builder_create_vector>
    7a04:	subs	r5, r0, #0
    7a08:	beq	7a20 <test_clone_slice+0x5b8>
    7a0c:	mov	r1, #9
    7a10:	mov	r0, r4
    7a14:	bl	0 <flatcc_builder_table_add_offset>
    7a18:	cmp	r0, #0
    7a1c:	strne	r5, [r0]
    7a20:	mov	r2, #1
    7a24:	ldr	r1, [pc, #1368]	; 7f84 <test_clone_slice+0xb1c>
    7a28:	mov	r0, r4
    7a2c:	bl	0 <flatcc_builder_check_required>
    7a30:	cmp	r0, #0
    7a34:	beq	7f08 <test_clone_slice+0xaa0>
    7a38:	mov	r0, r4
    7a3c:	bl	0 <flatcc_builder_end_table>
    7a40:	mov	r1, r0
    7a44:	mov	r0, r4
    7a48:	bl	0 <flatcc_builder_end_buffer>
    7a4c:	add	r1, sp, #20
    7a50:	mov	r0, r4
    7a54:	bl	0 <flatcc_builder_get_direct_buffer>
    7a58:	mov	r4, r0
    7a5c:	movw	r0, #0
    7a60:	movt	r0, #0
    7a64:	mov	r1, r4
    7a68:	ldr	r3, [sl]
    7a6c:	ldr	r2, [sp, #20]
    7a70:	bl	28 <hexdump>
    7a74:	cmp	r4, #0
    7a78:	beq	765c <test_clone_slice+0x1f4>
    7a7c:	ldr	r2, [r4, #4]
    7a80:	movw	r3, #20301	; 0x4f4d
    7a84:	movt	r3, #21326	; 0x534e
    7a88:	cmp	r2, r3
    7a8c:	bne	765c <test_clone_slice+0x1f4>
    7a90:	ldr	r3, [r4]
    7a94:	adds	r6, r4, r3
    7a98:	beq	765c <test_clone_slice+0x1f4>
    7a9c:	ldr	r5, [r4, r3]
    7aa0:	sub	r5, r6, r5
    7aa4:	ldrh	r7, [r5]
    7aa8:	cmp	r7, #11
    7aac:	bls	7ed8 <test_clone_slice+0xa70>
    7ab0:	ldrh	r0, [r5, #10]
    7ab4:	cmp	r0, #0
    7ab8:	beq	7ed8 <test_clone_slice+0xa70>
    7abc:	ldr	r3, [r6, r0]
    7ac0:	add	r0, r6, r0
    7ac4:	movw	r1, #0
    7ac8:	movt	r1, #0
    7acc:	add	r3, r3, #4
    7ad0:	add	r0, r0, r3
    7ad4:	bl	0 <strcmp>
    7ad8:	cmp	r0, #0
    7adc:	bne	7e60 <test_clone_slice+0x9f8>
    7ae0:	cmp	r7, #25
    7ae4:	bls	7c84 <test_clone_slice+0x81c>
    7ae8:	ldrh	r3, [r5, #24]
    7aec:	cmp	r3, #0
    7af0:	beq	7c84 <test_clone_slice+0x81c>
    7af4:	ldr	r2, [r6, r3]
    7af8:	add	r3, r6, r3
    7afc:	add	r2, r2, #4
    7b00:	adds	r4, r3, r2
    7b04:	beq	7c84 <test_clone_slice+0x81c>
    7b08:	ldr	r9, [r4, #-4]
    7b0c:	cmp	r9, #0
    7b10:	beq	7c84 <test_clone_slice+0x81c>
    7b14:	ldr	r0, [r3, r2]
    7b18:	movw	r1, #0
    7b1c:	movt	r1, #0
    7b20:	add	r0, r0, #4
    7b24:	add	r0, r4, r0
    7b28:	bl	0 <strcmp>
    7b2c:	cmp	r0, #0
    7b30:	bne	7e74 <test_clone_slice+0xa0c>
    7b34:	cmp	r9, #1
    7b38:	bls	7f20 <test_clone_slice+0xab8>
    7b3c:	ldr	r0, [r4, #4]
    7b40:	add	r0, r0, #8
    7b44:	adds	r0, r4, r0
    7b48:	beq	7ca0 <test_clone_slice+0x838>
    7b4c:	ldr	r3, [r0, #-4]
    7b50:	cmp	r3, #6
    7b54:	bne	7ca0 <test_clone_slice+0x838>
    7b58:	movw	r1, #0
    7b5c:	movt	r1, #0
    7b60:	bl	0 <strcmp>
    7b64:	cmp	r0, #0
    7b68:	bne	7eb0 <test_clone_slice+0xa48>
    7b6c:	cmp	r9, #2
    7b70:	beq	7f20 <test_clone_slice+0xab8>
    7b74:	ldr	r0, [r4, #8]
    7b78:	add	r0, r0, #12
    7b7c:	adds	r0, r4, r0
    7b80:	beq	7cd8 <test_clone_slice+0x870>
    7b84:	ldr	r3, [r0, #-4]
    7b88:	cmp	r3, #3
    7b8c:	bne	7cd8 <test_clone_slice+0x870>
    7b90:	movw	r1, #0
    7b94:	movt	r1, #0
    7b98:	bl	0 <strcmp>
    7b9c:	cmp	r0, #0
    7ba0:	bne	7e9c <test_clone_slice+0xa34>
    7ba4:	ldrh	r3, [r5, #20]
    7ba8:	cmp	r3, #0
    7bac:	beq	7d14 <test_clone_slice+0x8ac>
    7bb0:	ldr	sl, [r6, r3]
    7bb4:	add	r9, r6, r3
    7bb8:	adds	r4, r9, sl
    7bbc:	beq	7d14 <test_clone_slice+0x8ac>
    7bc0:	mov	r0, r4
    7bc4:	bl	514 <MyGame_Example_Monster_name>
    7bc8:	movw	r1, #0
    7bcc:	movt	r1, #0
    7bd0:	bl	0 <strcmp>
    7bd4:	cmp	r0, #0
    7bd8:	bne	7e88 <test_clone_slice+0xa20>
    7bdc:	ldr	r9, [r9, sl]
    7be0:	sub	r9, r4, r9
    7be4:	ldrh	r3, [r9]
    7be8:	cmp	r3, #53	; 0x35
    7bec:	bls	7cec <test_clone_slice+0x884>
    7bf0:	ldrh	r0, [r9, #52]	; 0x34
    7bf4:	cmp	r0, #0
    7bf8:	beq	7cec <test_clone_slice+0x884>
    7bfc:	ldr	r3, [r4, r0]
    7c00:	add	r0, r4, r0
    7c04:	add	r3, r3, #4
    7c08:	adds	r0, r0, r3
    7c0c:	beq	7cec <test_clone_slice+0x884>
    7c10:	ldr	r2, [r0, #-4]
    7c14:	cmp	r2, #7
    7c18:	bne	7cec <test_clone_slice+0x884>
    7c1c:	add	r1, sp, #24
    7c20:	bl	0 <memcmp>
    7c24:	cmp	r0, #0
    7c28:	bne	7ec4 <test_clone_slice+0xa5c>
    7c2c:	cmp	r7, #53	; 0x35
    7c30:	bls	7d00 <test_clone_slice+0x898>
    7c34:	ldrh	r3, [r5, #52]	; 0x34
    7c38:	cmp	r3, #0
    7c3c:	beq	7d00 <test_clone_slice+0x898>
    7c40:	ldr	r2, [r6, r3]
    7c44:	add	r3, r6, r3
    7c48:	add	r2, r2, #4
    7c4c:	adds	r1, r3, r2
    7c50:	beq	7d00 <test_clone_slice+0x898>
    7c54:	ldr	r0, [r1, #-4]
    7c58:	cmp	r0, #4
    7c5c:	bne	7d00 <test_clone_slice+0x898>
    7c60:	ldrb	r2, [r3, r2]
    7c64:	ldrb	r3, [sp, #27]
    7c68:	cmp	r2, r3
    7c6c:	beq	7d30 <test_clone_slice+0x8c8>
    7c70:	movw	r0, #0
    7c74:	movt	r0, #0
    7c78:	bl	0 <puts>
    7c7c:	mvn	r7, #0
    7c80:	b	7cb0 <test_clone_slice+0x848>
    7c84:	movw	r1, #0
    7c88:	movt	r1, #0
    7c8c:	ldr	r3, [pc, #756]	; 7f88 <test_clone_slice+0xb20>
    7c90:	movw	r0, #0
    7c94:	movt	r0, #0
    7c98:	mov	r2, #108	; 0x6c
    7c9c:	bl	0 <__assert_fail>
    7ca0:	movw	r0, #0
    7ca4:	movt	r0, #0
    7ca8:	mvn	r7, #0
    7cac:	bl	0 <puts>
    7cb0:	mov	r0, r8
    7cb4:	bl	0 <flatcc_builder_aligned_free>
    7cb8:	mov	r0, r7
    7cbc:	add	sp, sp, #36	; 0x24
    7cc0:	ldrd	r4, [sp]
    7cc4:	ldrd	r6, [sp, #8]
    7cc8:	ldrd	r8, [sp, #16]
    7ccc:	ldrd	sl, [sp, #24]
    7cd0:	add	sp, sp, #32
    7cd4:	pop	{pc}		; (ldr pc, [sp], #4)
    7cd8:	movw	r0, #0
    7cdc:	movt	r0, #0
    7ce0:	bl	0 <puts>
    7ce4:	mvn	r7, #0
    7ce8:	b	7cb0 <test_clone_slice+0x848>
    7cec:	movw	r0, #0
    7cf0:	movt	r0, #0
    7cf4:	bl	0 <puts>
    7cf8:	mvn	r7, #0
    7cfc:	b	7cb0 <test_clone_slice+0x848>
    7d00:	movw	r0, #0
    7d04:	movt	r0, #0
    7d08:	bl	0 <puts>
    7d0c:	mvn	r7, #0
    7d10:	b	7cb0 <test_clone_slice+0x848>
    7d14:	movw	r1, #0
    7d18:	movt	r1, #0
    7d1c:	ldr	r3, [pc, #616]	; 7f8c <test_clone_slice+0xb24>
    7d20:	movw	r0, #0
    7d24:	movt	r0, #0
    7d28:	mov	r2, #1664	; 0x680
    7d2c:	bl	0 <__assert_fail>
    7d30:	ldrb	r2, [r1, #1]
    7d34:	add	r1, r1, #1
    7d38:	ldrb	r3, [sp, #28]
    7d3c:	cmp	r2, r3
    7d40:	bne	7c70 <test_clone_slice+0x808>
    7d44:	ldrb	r2, [r1, #1]!
    7d48:	ldrb	r3, [sp, #29]
    7d4c:	cmp	r2, r3
    7d50:	bne	7c70 <test_clone_slice+0x808>
    7d54:	ldrb	r2, [r1, #1]
    7d58:	ldrb	r3, [sp, #30]
    7d5c:	cmp	r2, r3
    7d60:	bne	7c70 <test_clone_slice+0x808>
    7d64:	ldrh	r3, [r5, #4]
    7d68:	mov	r7, #0
    7d6c:	cmp	r3, r7
    7d70:	beq	7f78 <test_clone_slice+0xb10>
    7d74:	add	r3, r6, r3
    7d78:	vldr	s15, [pc, #512]	; 7f80 <test_clone_slice+0xb18>
    7d7c:	vldr	s14, [r3]
    7d80:	vcmp.f32	s14, s15
    7d84:	vmrs	APSR_nzcv, fpscr
    7d88:	bne	7ef4 <test_clone_slice+0xa8c>
    7d8c:	ldrh	r2, [r5, #22]
    7d90:	cmp	r2, #0
    7d94:	beq	7e24 <test_clone_slice+0x9bc>
    7d98:	ldr	r3, [r6, r2]
    7d9c:	add	r6, r6, r2
    7da0:	add	r3, r3, #4
    7da4:	adds	r2, r6, r3
    7da8:	beq	7e24 <test_clone_slice+0x9bc>
    7dac:	ldr	r1, [r2, #-4]
    7db0:	cmp	r1, #2
    7db4:	bne	7e24 <test_clone_slice+0x9bc>
    7db8:	ldrsh	r3, [r6, r3]
    7dbc:	cmp	r3, #22
    7dc0:	bne	7f0c <test_clone_slice+0xaa4>
    7dc4:	cmn	r2, #4
    7dc8:	beq	7e38 <test_clone_slice+0x9d0>
    7dcc:	ldrsh	r3, [r2, #4]
    7dd0:	cmp	r3, #44	; 0x2c
    7dd4:	bne	7e38 <test_clone_slice+0x9d0>
    7dd8:	ldrh	r2, [r9, #22]
    7ddc:	cmp	r2, #0
    7de0:	beq	7e4c <test_clone_slice+0x9e4>
    7de4:	ldr	r3, [r4, r2]
    7de8:	add	r4, r4, r2
    7dec:	add	r3, r3, #4
    7df0:	adds	r2, r4, r3
    7df4:	beq	7e4c <test_clone_slice+0x9e4>
    7df8:	ldr	r2, [r2, #-4]
    7dfc:	cmp	r2, #1
    7e00:	bne	7e4c <test_clone_slice+0x9e4>
    7e04:	ldrsh	r3, [r4, r3]
    7e08:	cmp	r3, #44	; 0x2c
    7e0c:	beq	7cb0 <test_clone_slice+0x848>
    7e10:	movw	r0, #0
    7e14:	movt	r0, #0
    7e18:	mvn	r7, #0
    7e1c:	bl	0 <puts>
    7e20:	b	7cb0 <test_clone_slice+0x848>
    7e24:	movw	r0, #0
    7e28:	movt	r0, #0
    7e2c:	bl	0 <puts>
    7e30:	mvn	r7, #0
    7e34:	b	7cb0 <test_clone_slice+0x848>
    7e38:	movw	r0, #0
    7e3c:	movt	r0, #0
    7e40:	bl	0 <puts>
    7e44:	mvn	r7, #0
    7e48:	b	7cb0 <test_clone_slice+0x848>
    7e4c:	movw	r0, #0
    7e50:	movt	r0, #0
    7e54:	bl	0 <puts>
    7e58:	mvn	r7, #0
    7e5c:	b	7cb0 <test_clone_slice+0x848>
    7e60:	movw	r0, #0
    7e64:	movt	r0, #0
    7e68:	bl	0 <puts>
    7e6c:	mvn	r7, #0
    7e70:	b	7cb0 <test_clone_slice+0x848>
    7e74:	movw	r0, #0
    7e78:	movt	r0, #0
    7e7c:	bl	0 <puts>
    7e80:	mvn	r7, #0
    7e84:	b	7cb0 <test_clone_slice+0x848>
    7e88:	movw	r0, #0
    7e8c:	movt	r0, #0
    7e90:	bl	0 <printf>
    7e94:	mvn	r7, #0
    7e98:	b	7cb0 <test_clone_slice+0x848>
    7e9c:	movw	r0, #0
    7ea0:	movt	r0, #0
    7ea4:	bl	0 <puts>
    7ea8:	mvn	r7, #0
    7eac:	b	7cb0 <test_clone_slice+0x848>
    7eb0:	movw	r0, #0
    7eb4:	movt	r0, #0
    7eb8:	bl	0 <puts>
    7ebc:	mvn	r7, #0
    7ec0:	b	7cb0 <test_clone_slice+0x848>
    7ec4:	movw	r0, #0
    7ec8:	movt	r0, #0
    7ecc:	bl	0 <puts>
    7ed0:	mvn	r7, #0
    7ed4:	b	7cb0 <test_clone_slice+0x848>
    7ed8:	movw	r1, #0
    7edc:	movt	r1, #0
    7ee0:	ldr	r3, [pc, #168]	; 7f90 <test_clone_slice+0xb28>
    7ee4:	movw	r0, #0
    7ee8:	movt	r0, #0
    7eec:	movw	r2, #699	; 0x2bb
    7ef0:	bl	0 <__assert_fail>
    7ef4:	movw	r0, #0
    7ef8:	movt	r0, #0
    7efc:	bl	0 <puts>
    7f00:	mvn	r7, #0
    7f04:	b	7cb0 <test_clone_slice+0x848>
    7f08:	bl	7dc <MyGame_Example_Monster_end.part.49>
    7f0c:	movw	r0, #0
    7f10:	movt	r0, #0
    7f14:	bl	0 <puts>
    7f18:	mvn	r7, #0
    7f1c:	b	7cb0 <test_clone_slice+0x848>
    7f20:	bl	370 <flatbuffers_string_vec_at.part.20>
    7f24:	movw	r1, #0
    7f28:	movt	r1, #0
    7f2c:	ldr	r3, [pc, #88]	; 7f8c <test_clone_slice+0xb24>
    7f30:	movw	r0, #0
    7f34:	movt	r0, #0
    7f38:	movw	r2, #1604	; 0x644
    7f3c:	bl	0 <__assert_fail>
    7f40:	movw	r1, #0
    7f44:	movt	r1, #0
    7f48:	ldr	r3, [pc, #60]	; 7f8c <test_clone_slice+0xb24>
    7f4c:	movw	r0, #0
    7f50:	movt	r0, #0
    7f54:	movw	r2, #1608	; 0x648
    7f58:	bl	0 <__assert_fail>
    7f5c:	movw	r1, #0
    7f60:	movt	r1, #0
    7f64:	ldr	r3, [pc, #32]	; 7f8c <test_clone_slice+0xb24>
    7f68:	movw	r0, #0
    7f6c:	movt	r0, #0
    7f70:	movw	r2, #1606	; 0x646
    7f74:	bl	0 <__assert_fail>
    7f78:	ldr	r3, [r3]
    7f7c:	udf	#0
    7f80:	.word	0xc2293333
    7f84:	.word	0x00000404
    7f88:	.word	0x0000013c
    7f8c:	.word	0x00000568
    7f90:	.word	0x0000020c

00007f94 <test_create_add_field>:
    7f94:	strd	r4, [sp, #-16]!
    7f98:	mov	r4, r0
    7f9c:	str	r6, [sp, #8]
    7fa0:	str	lr, [sp, #12]
    7fa4:	sub	sp, sp, #8
    7fa8:	bl	0 <flatcc_builder_reset>
    7fac:	mov	r3, #0
    7fb0:	mov	r0, r4
    7fb4:	mov	r2, r3
    7fb8:	movw	r1, #0
    7fbc:	movt	r1, #0
    7fc0:	bl	0 <flatcc_builder_start_buffer>
    7fc4:	cmp	r0, #0
    7fc8:	bne	7fd8 <test_create_add_field+0x44>
    7fcc:	mov	r1, #36	; 0x24
    7fd0:	mov	r0, r4
    7fd4:	bl	0 <flatcc_builder_start_table>
    7fd8:	movw	r1, #0
    7fdc:	movt	r1, #0
    7fe0:	mov	r0, r4
    7fe4:	bl	0 <flatcc_builder_create_string_str>
    7fe8:	subs	r5, r0, #0
    7fec:	beq	8004 <test_create_add_field+0x70>
    7ff0:	mov	r1, #3
    7ff4:	mov	r0, r4
    7ff8:	bl	0 <flatcc_builder_table_add_offset>
    7ffc:	cmp	r0, #0
    8000:	strne	r5, [r0]
    8004:	movw	r1, #0
    8008:	movt	r1, #0
    800c:	mov	r0, r4
    8010:	bl	0 <flatcc_builder_create_string_str>
    8014:	mov	r5, r0
    8018:	mov	r1, #3
    801c:	mov	r0, r4
    8020:	bl	0 <flatcc_builder_start_table>
    8024:	subs	r6, r0, #0
    8028:	bne	80d4 <test_create_add_field+0x140>
    802c:	mov	r3, #8
    8030:	mov	r1, #1
    8034:	mov	r2, r3
    8038:	mov	r0, r4
    803c:	bl	0 <flatcc_builder_table_add>
    8040:	cmp	r0, #0
    8044:	beq	80d4 <test_create_add_field+0x140>
    8048:	mvn	r2, #99	; 0x63
    804c:	mvn	r3, #0
    8050:	cmp	r5, #0
    8054:	strd	r2, [r0]
    8058:	beq	80d4 <test_create_add_field+0x140>
    805c:	mov	r1, r6
    8060:	mov	r0, r4
    8064:	bl	0 <flatcc_builder_table_add_offset>
    8068:	subs	r2, r0, #0
    806c:	beq	80d4 <test_create_add_field+0x140>
    8070:	mov	r3, #2
    8074:	mov	r0, r4
    8078:	str	r5, [r2]
    807c:	mov	r1, r3
    8080:	mov	r2, r3
    8084:	bl	0 <flatcc_builder_table_add>
    8088:	subs	r3, r0, #0
    808c:	beq	80d4 <test_create_add_field+0x140>
    8090:	mov	ip, #2
    8094:	mov	r2, r6
    8098:	ldr	r1, [pc, #412]	; 823c <test_create_add_field+0x2a8>
    809c:	mov	r0, r4
    80a0:	strh	ip, [r3]
    80a4:	bl	0 <flatcc_builder_check_required>
    80a8:	cmp	r0, #0
    80ac:	beq	8238 <test_create_add_field+0x2a4>
    80b0:	mov	r0, r4
    80b4:	bl	0 <flatcc_builder_end_table>
    80b8:	subs	r5, r0, #0
    80bc:	beq	80d4 <test_create_add_field+0x140>
    80c0:	mov	r1, #14
    80c4:	mov	r0, r4
    80c8:	bl	0 <flatcc_builder_table_add_offset>
    80cc:	cmp	r0, #0
    80d0:	strne	r5, [r0]
    80d4:	mov	r2, #1
    80d8:	ldr	r1, [pc, #352]	; 8240 <test_create_add_field+0x2ac>
    80dc:	mov	r0, r4
    80e0:	bl	0 <flatcc_builder_check_required>
    80e4:	cmp	r0, #0
    80e8:	beq	8234 <test_create_add_field+0x2a0>
    80ec:	mov	r0, r4
    80f0:	bl	0 <flatcc_builder_end_table>
    80f4:	mov	r1, r0
    80f8:	mov	r0, r4
    80fc:	bl	0 <flatcc_builder_end_buffer>
    8100:	mov	r0, r4
    8104:	add	r1, sp, #4
    8108:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    810c:	subs	r4, r0, #0
    8110:	beq	8128 <test_create_add_field+0x194>
    8114:	ldr	r2, [r4, #4]
    8118:	movw	r3, #20301	; 0x4f4d
    811c:	movt	r3, #21326	; 0x534e
    8120:	cmp	r2, r3
    8124:	beq	8144 <test_create_add_field+0x1b0>
    8128:	movw	r1, #0
    812c:	movt	r1, #0
    8130:	ldr	r3, [pc, #268]	; 8244 <test_create_add_field+0x2b0>
    8134:	movw	r0, #0
    8138:	movt	r0, #0
    813c:	mov	r2, #716	; 0x2cc
    8140:	bl	0 <__assert_fail>
    8144:	ldr	r3, [r4]
    8148:	adds	r2, r4, r3
    814c:	beq	8128 <test_create_add_field+0x194>
    8150:	ldr	r3, [r4, r3]
    8154:	sub	r3, r2, r3
    8158:	ldrh	r1, [r3]
    815c:	cmp	r1, #29
    8160:	bls	8204 <test_create_add_field+0x270>
    8164:	ldrh	r0, [r3, #28]
    8168:	cmp	r0, #0
    816c:	bne	8220 <test_create_add_field+0x28c>
    8170:	cmp	r1, #33	; 0x21
    8174:	bls	8204 <test_create_add_field+0x270>
    8178:	ldrh	r3, [r3, #32]
    817c:	cmp	r3, #0
    8180:	beq	8204 <test_create_add_field+0x270>
    8184:	ldr	r1, [r2, r3]
    8188:	add	r2, r2, r3
    818c:	adds	r0, r2, r1
    8190:	beq	8204 <test_create_add_field+0x270>
    8194:	ldr	r3, [r2, r1]
    8198:	sub	r3, r0, r3
    819c:	ldrh	r2, [r3]
    81a0:	cmp	r2, #7
    81a4:	bhi	81d8 <test_create_add_field+0x244>
    81a8:	movw	r0, #0
    81ac:	movt	r0, #0
    81b0:	mvn	r5, #0
    81b4:	bl	0 <puts>
    81b8:	mov	r0, r4
    81bc:	bl	0 <flatcc_builder_aligned_free>
    81c0:	mov	r0, r5
    81c4:	add	sp, sp, #8
    81c8:	ldrd	r4, [sp]
    81cc:	ldr	r6, [sp, #8]
    81d0:	add	sp, sp, #12
    81d4:	pop	{pc}		; (ldr pc, [sp], #4)
    81d8:	ldrh	r3, [r3, #6]
    81dc:	cmp	r3, #0
    81e0:	beq	81a8 <test_create_add_field+0x214>
    81e4:	ldrd	r0, [r0, r3]
    81e8:	mvn	r3, #0
    81ec:	mvn	r2, #99	; 0x63
    81f0:	cmp	r1, r3
    81f4:	cmpeq	r0, r2
    81f8:	moveq	r5, #0
    81fc:	beq	81b8 <test_create_add_field+0x224>
    8200:	b	81a8 <test_create_add_field+0x214>
    8204:	movw	r1, #0
    8208:	movt	r1, #0
    820c:	ldr	r3, [pc, #52]	; 8248 <test_create_add_field+0x2b4>
    8210:	movw	r0, #0
    8214:	movt	r0, #0
    8218:	mov	r2, #608	; 0x260
    821c:	bl	0 <__assert_fail>
    8220:	movw	r0, #0
    8224:	movt	r0, #0
    8228:	bl	0 <puts>
    822c:	mvn	r5, #0
    8230:	b	81b8 <test_create_add_field+0x224>
    8234:	bl	7dc <MyGame_Example_Monster_end.part.49>
    8238:	bl	804 <MyGame_Example_Stat_end.part.51>
    823c:	.word	0x00000508
    8240:	.word	0x00000404
    8244:	.word	0x0000057c
    8248:	.word	0x000005a4

0000824c <test_union_vector>:
    824c:	strd	r4, [sp, #-20]!	; 0xffffffec
    8250:	mov	r4, r0
    8254:	strd	r6, [sp, #8]
    8258:	str	lr, [sp, #16]
    825c:	sub	sp, sp, #20
    8260:	bl	0 <flatcc_builder_reset>
    8264:	mov	r3, #0
    8268:	mov	r0, r4
    826c:	mov	r2, r3
    8270:	movw	r1, #0
    8274:	movt	r1, #0
    8278:	bl	0 <flatcc_builder_start_buffer>
    827c:	cmp	r0, #0
    8280:	bne	8290 <test_union_vector+0x44>
    8284:	mov	r1, #36	; 0x24
    8288:	mov	r0, r4
    828c:	bl	0 <flatcc_builder_start_table>
    8290:	movw	r1, #0
    8294:	movt	r1, #0
    8298:	mov	r0, r4
    829c:	bl	0 <flatcc_builder_create_string_str>
    82a0:	subs	r5, r0, #0
    82a4:	beq	82bc <test_union_vector+0x70>
    82a8:	mov	r1, #3
    82ac:	mov	r0, r4
    82b0:	bl	0 <flatcc_builder_table_add_offset>
    82b4:	cmp	r0, #0
    82b8:	strne	r5, [r0]
    82bc:	mov	r1, #4
    82c0:	mov	r0, r4
    82c4:	bl	0 <flatcc_builder_start_table>
    82c8:	subs	r2, r0, #0
    82cc:	bne	84fc <test_union_vector+0x2b0>
    82d0:	ldr	r1, [pc, #796]	; 85f4 <test_union_vector+0x3a8>
    82d4:	mov	r0, r4
    82d8:	bl	0 <flatcc_builder_check_required>
    82dc:	cmp	r0, #0
    82e0:	beq	85d8 <test_union_vector+0x38c>
    82e4:	mov	r0, r4
    82e8:	bl	0 <flatcc_builder_end_table>
    82ec:	mov	r7, r0
    82f0:	mov	r6, #2
    82f4:	add	r5, sp, #8
    82f8:	mov	r0, r4
    82fc:	bl	0 <flatcc_builder_start_union_vector>
    8300:	mov	r0, r4
    8304:	strb	r6, [sp, #8]
    8308:	str	r7, [sp, #12]
    830c:	ldm	r5, {r1, r2}
    8310:	bl	0 <flatcc_builder_union_vector_push>
    8314:	mov	r0, r5
    8318:	mov	r1, r4
    831c:	bl	0 <flatcc_builder_end_union_vector>
    8320:	mov	r1, #4
    8324:	mov	r0, r4
    8328:	bl	0 <flatcc_builder_start_table>
    832c:	ldr	r5, [sp, #8]
    8330:	ldr	r7, [sp, #12]
    8334:	cmp	r7, #0
    8338:	cmpne	r5, #0
    833c:	bne	8504 <test_union_vector+0x2b8>
    8340:	mov	r2, #0
    8344:	ldr	r1, [pc, #684]	; 85f8 <test_union_vector+0x3ac>
    8348:	mov	r0, r4
    834c:	bl	0 <flatcc_builder_check_required>
    8350:	cmp	r0, #0
    8354:	beq	85b8 <test_union_vector+0x36c>
    8358:	mov	r0, r4
    835c:	bl	0 <flatcc_builder_end_table>
    8360:	subs	r5, r0, #0
    8364:	beq	83a4 <test_union_vector+0x158>
    8368:	mov	r3, #1
    836c:	mov	r1, #7
    8370:	mov	r2, r3
    8374:	mov	r0, r4
    8378:	bl	0 <flatcc_builder_table_add>
    837c:	subs	r6, r0, #0
    8380:	beq	83a4 <test_union_vector+0x158>
    8384:	mov	r1, #8
    8388:	mov	r0, r4
    838c:	bl	0 <flatcc_builder_table_add_offset>
    8390:	cmp	r0, #0
    8394:	beq	83a4 <test_union_vector+0x158>
    8398:	mov	r3, #4
    839c:	strb	r3, [r6]
    83a0:	str	r5, [r0]
    83a4:	mov	r2, #1
    83a8:	ldr	r1, [pc, #588]	; 85fc <test_union_vector+0x3b0>
    83ac:	mov	r0, r4
    83b0:	bl	0 <flatcc_builder_check_required>
    83b4:	cmp	r0, #0
    83b8:	beq	85d4 <test_union_vector+0x388>
    83bc:	mov	r0, r4
    83c0:	bl	0 <flatcc_builder_end_table>
    83c4:	mov	r1, r0
    83c8:	mov	r0, r4
    83cc:	bl	0 <flatcc_builder_end_buffer>
    83d0:	mov	r0, r4
    83d4:	add	r1, sp, #4
    83d8:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    83dc:	movw	r3, #0
    83e0:	movt	r3, #0
    83e4:	ldr	r1, [sp, #4]
    83e8:	movw	r2, #0
    83ec:	movt	r2, #0
    83f0:	mov	r4, r0
    83f4:	bl	0 <flatcc_verify_table_as_root>
    83f8:	subs	r5, r0, #0
    83fc:	bne	859c <test_union_vector+0x350>
    8400:	cmp	r4, #0
    8404:	beq	841c <test_union_vector+0x1d0>
    8408:	ldr	r2, [r4, #4]
    840c:	movw	r3, #20301	; 0x4f4d
    8410:	movt	r3, #21326	; 0x534e
    8414:	cmp	r2, r3
    8418:	beq	8420 <test_union_vector+0x1d4>
    841c:	bl	410 <MyGame_Example_Monster_test_type.part.24>
    8420:	ldr	r3, [r4]
    8424:	adds	r2, r4, r3
    8428:	beq	841c <test_union_vector+0x1d0>
    842c:	ldr	r3, [r4, r3]
    8430:	sub	r3, r2, r3
    8434:	ldrh	r1, [r3]
    8438:	cmp	r1, #19
    843c:	bls	84b4 <test_union_vector+0x268>
    8440:	ldrh	r0, [r3, #18]
    8444:	cmp	r0, #0
    8448:	beq	84b4 <test_union_vector+0x268>
    844c:	ldrb	r0, [r2, r0]
    8450:	cmp	r0, #4
    8454:	bne	84b4 <test_union_vector+0x268>
    8458:	cmp	r1, #21
    845c:	bls	84ec <test_union_vector+0x2a0>
    8460:	ldrh	r3, [r3, #20]
    8464:	cmp	r3, #0
    8468:	beq	84ec <test_union_vector+0x2a0>
    846c:	ldr	r0, [r2, r3]
    8470:	add	r2, r2, r3
    8474:	adds	r1, r2, r0
    8478:	beq	84ec <test_union_vector+0x2a0>
    847c:	ldr	r3, [r2, r0]
    8480:	sub	r3, r1, r3
    8484:	ldrh	r2, [r3]
    8488:	cmp	r2, #11
    848c:	bhi	84e0 <test_union_vector+0x294>
    8490:	cmp	r2, #9
    8494:	bls	84a4 <test_union_vector+0x258>
    8498:	ldrh	r3, [r3, #8]
    849c:	cmp	r3, #0
    84a0:	bne	8540 <test_union_vector+0x2f4>
    84a4:	movw	r0, #0
    84a8:	movt	r0, #0
    84ac:	bl	0 <puts>
    84b0:	b	84c0 <test_union_vector+0x274>
    84b4:	movw	r0, #0
    84b8:	movt	r0, #0
    84bc:	bl	0 <printf>
    84c0:	mov	r0, r4
    84c4:	bl	0 <flatcc_builder_aligned_free>
    84c8:	mov	r0, r5
    84cc:	add	sp, sp, #20
    84d0:	ldrd	r4, [sp]
    84d4:	ldrd	r6, [sp, #8]
    84d8:	add	sp, sp, #16
    84dc:	pop	{pc}		; (ldr pc, [sp], #4)
    84e0:	ldrh	r2, [r3, #10]
    84e4:	cmp	r2, #0
    84e8:	beq	8534 <test_union_vector+0x2e8>
    84ec:	movw	r0, #0
    84f0:	movt	r0, #0
    84f4:	bl	0 <puts>
    84f8:	b	84c0 <test_union_vector+0x274>
    84fc:	mov	r7, #0
    8500:	b	82f0 <test_union_vector+0xa4>
    8504:	mov	r1, r6
    8508:	mov	r0, r4
    850c:	bl	0 <flatcc_builder_table_add_offset>
    8510:	cmp	r0, #0
    8514:	beq	8340 <test_union_vector+0xf4>
    8518:	mov	r1, #3
    851c:	str	r5, [r0]
    8520:	mov	r0, r4
    8524:	bl	0 <flatcc_builder_table_add_offset>
    8528:	cmp	r0, #0
    852c:	strne	r7, [r0]
    8530:	b	8340 <test_union_vector+0xf4>
    8534:	ldrh	r3, [r3, #8]
    8538:	cmp	r3, #0
    853c:	beq	84a4 <test_union_vector+0x258>
    8540:	ldr	r2, [r1, r3]
    8544:	add	r1, r1, r3
    8548:	add	r3, r2, #4
    854c:	add	r1, r1, r3
    8550:	cmp	r1, #0
    8554:	beq	84a4 <test_union_vector+0x258>
    8558:	ldr	r3, [r1, #-4]
    855c:	cmp	r3, #1
    8560:	bne	84a4 <test_union_vector+0x258>
    8564:	ldrb	r3, [r1]
    8568:	cmp	r3, #2
    856c:	bne	858c <test_union_vector+0x340>
    8570:	movw	r1, #0
    8574:	movt	r1, #0
    8578:	ldr	r3, [pc, #128]	; 8600 <test_union_vector+0x3b4>
    857c:	movw	r0, #0
    8580:	movt	r0, #0
    8584:	mov	r2, #117	; 0x75
    8588:	bl	0 <__assert_fail>
    858c:	movw	r0, #0
    8590:	movt	r0, #0
    8594:	bl	0 <puts>
    8598:	b	84c0 <test_union_vector+0x274>
    859c:	bl	0 <flatcc_verify_error_string>
    85a0:	mov	r1, r0
    85a4:	movw	r0, #0
    85a8:	movt	r0, #0
    85ac:	mvn	r5, #0
    85b0:	bl	0 <printf>
    85b4:	b	84c8 <test_union_vector+0x27c>
    85b8:	movw	r1, #0
    85bc:	movt	r1, #0
    85c0:	ldr	r3, [pc, #60]	; 8604 <test_union_vector+0x3b8>
    85c4:	movw	r0, #0
    85c8:	movt	r0, #0
    85cc:	mov	r2, #223	; 0xdf
    85d0:	bl	0 <__assert_fail>
    85d4:	bl	7dc <MyGame_Example_Monster_end.part.49>
    85d8:	movw	r1, #0
    85dc:	movt	r1, #0
    85e0:	ldr	r3, [pc, #32]	; 8608 <test_union_vector+0x3bc>
    85e4:	movw	r0, #0
    85e8:	movt	r0, #0
    85ec:	mov	r2, #217	; 0xd9
    85f0:	bl	0 <__assert_fail>
    85f4:	.word	0x000005bc
    85f8:	.word	0x000005ec
    85fc:	.word	0x00000404
    8600:	.word	0x00000288
    8604:	.word	0x000005f0
    8608:	.word	0x000005c0

0000860c <test_mixed_type_union>:
    860c:	strd	r4, [sp, #-32]!	; 0xffffffe0
    8610:	mov	r4, r0
    8614:	strd	r6, [sp, #8]
    8618:	strd	r8, [sp, #16]
    861c:	str	sl, [sp, #24]
    8620:	str	lr, [sp, #28]
    8624:	sub	sp, sp, #32
    8628:	bl	0 <flatcc_builder_reset>
    862c:	mov	r3, #0
    8630:	mov	r0, r4
    8634:	mov	r2, r3
    8638:	movw	r1, #0
    863c:	movt	r1, #0
    8640:	bl	0 <flatcc_builder_start_buffer>
    8644:	cmp	r0, #0
    8648:	bne	8658 <test_mixed_type_union+0x4c>
    864c:	mov	r1, #10
    8650:	mov	r0, r4
    8654:	bl	0 <flatcc_builder_start_table>
    8658:	mov	r2, #4
    865c:	mov	r0, r4
    8660:	mov	r1, r2
    8664:	bl	0 <flatcc_builder_start_struct>
    8668:	subs	r7, r0, #0
    866c:	beq	8684 <test_mixed_type_union+0x78>
    8670:	mov	r2, #10
    8674:	mov	r0, r4
    8678:	str	r2, [r7]
    867c:	bl	0 <flatcc_builder_end_struct>
    8680:	mov	r7, r0
    8684:	mov	r2, #2
    8688:	mov	r0, r4
    868c:	mov	r1, r2
    8690:	bl	0 <flatcc_builder_start_struct>
    8694:	subs	r6, r0, #0
    8698:	beq	8da8 <test_mixed_type_union+0x79c>
    869c:	mov	r3, #22
    86a0:	mov	r0, r4
    86a4:	strh	r3, [r6]
    86a8:	bl	0 <flatcc_builder_end_struct>
    86ac:	mov	r2, #2
    86b0:	mov	r6, r0
    86b4:	mov	r1, r2
    86b8:	mov	r0, r4
    86bc:	bl	0 <flatcc_builder_start_struct>
    86c0:	subs	r3, r0, #0
    86c4:	beq	871c <test_mixed_type_union+0x110>
    86c8:	mov	r2, #19
    86cc:	mov	r0, r4
    86d0:	strh	r2, [r3]
    86d4:	bl	0 <flatcc_builder_end_struct>
    86d8:	subs	r5, r0, #0
    86dc:	beq	871c <test_mixed_type_union+0x110>
    86e0:	mov	r3, #1
    86e4:	mov	r1, #0
    86e8:	mov	r2, r3
    86ec:	mov	r0, r4
    86f0:	bl	0 <flatcc_builder_table_add>
    86f4:	subs	r8, r0, #0
    86f8:	beq	871c <test_mixed_type_union+0x110>
    86fc:	mov	r1, #1
    8700:	mov	r0, r4
    8704:	bl	0 <flatcc_builder_table_add_offset>
    8708:	cmp	r0, #0
    870c:	beq	871c <test_mixed_type_union+0x110>
    8710:	mov	r3, #8
    8714:	strb	r3, [r8]
    8718:	str	r5, [r0]
    871c:	cmp	r6, #0
    8720:	beq	8df4 <test_mixed_type_union+0x7e8>
    8724:	mov	r3, #1
    8728:	mov	r1, #6
    872c:	mov	r2, r3
    8730:	mov	r0, r4
    8734:	bl	0 <flatcc_builder_table_add>
    8738:	subs	r5, r0, #0
    873c:	beq	8760 <test_mixed_type_union+0x154>
    8740:	mov	r1, #7
    8744:	mov	r0, r4
    8748:	bl	0 <flatcc_builder_table_add_offset>
    874c:	cmp	r0, #0
    8750:	beq	8760 <test_mixed_type_union+0x154>
    8754:	mov	r3, #8
    8758:	strb	r3, [r5]
    875c:	str	r6, [r0]
    8760:	mov	r1, #1
    8764:	mov	r0, r4
    8768:	bl	0 <flatcc_builder_start_table>
    876c:	subs	r5, r0, #0
    8770:	bne	8ba0 <test_mixed_type_union+0x594>
    8774:	mov	r3, #4
    8778:	mov	r1, r5
    877c:	mov	r2, r3
    8780:	mov	r0, r4
    8784:	bl	0 <flatcc_builder_table_add>
    8788:	cmp	r0, #0
    878c:	beq	8ba0 <test_mixed_type_union+0x594>
    8790:	mov	r3, #42	; 0x2a
    8794:	mov	r2, r5
    8798:	ldr	r1, [pc, #2820]	; 92a4 <test_mixed_type_union+0xc98>
    879c:	str	r3, [r0]
    87a0:	mov	r0, r4
    87a4:	bl	0 <flatcc_builder_check_required>
    87a8:	cmp	r0, #0
    87ac:	beq	8ed8 <test_mixed_type_union+0x8cc>
    87b0:	mov	r0, r4
    87b4:	bl	0 <flatcc_builder_end_table>
    87b8:	subs	r8, r0, #0
    87bc:	beq	8ba0 <test_mixed_type_union+0x594>
    87c0:	mov	r3, #1
    87c4:	mov	r1, #2
    87c8:	mov	r2, r3
    87cc:	mov	r0, r4
    87d0:	bl	0 <flatcc_builder_table_add>
    87d4:	subs	r5, r0, #0
    87d8:	beq	87fc <test_mixed_type_union+0x1f0>
    87dc:	mov	r1, #3
    87e0:	mov	r0, r4
    87e4:	bl	0 <flatcc_builder_table_add_offset>
    87e8:	cmp	r0, #0
    87ec:	beq	87fc <test_mixed_type_union+0x1f0>
    87f0:	mov	r3, #2
    87f4:	strb	r3, [r5]
    87f8:	str	r8, [r0]
    87fc:	movw	r1, #0
    8800:	movt	r1, #0
    8804:	mov	r0, r4
    8808:	bl	0 <flatcc_builder_create_string_str>
    880c:	subs	r5, r0, #0
    8810:	beq	8850 <test_mixed_type_union+0x244>
    8814:	mov	r3, #1
    8818:	mov	r1, #4
    881c:	mov	r2, r3
    8820:	mov	r0, r4
    8824:	bl	0 <flatcc_builder_table_add>
    8828:	subs	r9, r0, #0
    882c:	beq	8850 <test_mixed_type_union+0x244>
    8830:	mov	r1, #5
    8834:	mov	r0, r4
    8838:	bl	0 <flatcc_builder_table_add_offset>
    883c:	cmp	r0, #0
    8840:	beq	8850 <test_mixed_type_union+0x244>
    8844:	mov	r3, #11
    8848:	strb	r3, [r9]
    884c:	str	r5, [r0]
    8850:	mov	r0, r4
    8854:	add	r5, sp, #24
    8858:	bl	0 <flatcc_builder_start_union_vector>
    885c:	mov	r3, #8
    8860:	mov	r0, r4
    8864:	strb	r3, [sp, #24]
    8868:	str	r6, [sp, #28]
    886c:	ldm	r5, {r1, r2}
    8870:	bl	0 <flatcc_builder_union_vector_push>
    8874:	mov	r3, #2
    8878:	mov	r0, r4
    887c:	strb	r3, [sp, #24]
    8880:	str	r8, [sp, #28]
    8884:	ldm	r5, {r1, r2}
    8888:	bl	0 <flatcc_builder_union_vector_push>
    888c:	mov	r1, #1
    8890:	mov	r0, r4
    8894:	bl	0 <flatcc_builder_start_table>
    8898:	subs	r6, r0, #0
    889c:	bne	8ba8 <test_mixed_type_union+0x59c>
    88a0:	mov	r3, #4
    88a4:	mov	r1, r6
    88a8:	mov	r2, r3
    88ac:	mov	r0, r4
    88b0:	bl	0 <flatcc_builder_table_add>
    88b4:	cmp	r0, #0
    88b8:	beq	8ba8 <test_mixed_type_union+0x59c>
    88bc:	mov	r3, #1
    88c0:	mov	r2, r6
    88c4:	ldr	r1, [pc, #2520]	; 92a4 <test_mixed_type_union+0xc98>
    88c8:	str	r3, [r0]
    88cc:	mov	r0, r4
    88d0:	bl	0 <flatcc_builder_check_required>
    88d4:	cmp	r0, #0
    88d8:	beq	8ed8 <test_mixed_type_union+0x8cc>
    88dc:	mov	r0, r4
    88e0:	bl	0 <flatcc_builder_end_table>
    88e4:	mov	r2, r0
    88e8:	mov	r3, #2
    88ec:	mov	r0, r4
    88f0:	mov	r6, #9
    88f4:	strb	r3, [sp, #24]
    88f8:	str	r2, [sp, #28]
    88fc:	ldm	r5, {r1, r2}
    8900:	bl	0 <flatcc_builder_union_vector_push>
    8904:	movw	r1, #0
    8908:	movt	r1, #0
    890c:	mov	r0, r4
    8910:	bl	0 <flatcc_builder_create_string_str>
    8914:	mov	r3, #11
    8918:	strb	r3, [sp, #24]
    891c:	str	r0, [sp, #28]
    8920:	mov	r0, r4
    8924:	ldm	r5, {r1, r2}
    8928:	bl	0 <flatcc_builder_union_vector_push>
    892c:	mov	r0, r4
    8930:	strb	r6, [sp, #24]
    8934:	str	r7, [sp, #28]
    8938:	ldm	r5, {r1, r2}
    893c:	bl	0 <flatcc_builder_union_vector_push>
    8940:	mov	r2, #4
    8944:	mov	r0, r4
    8948:	mov	r1, r2
    894c:	bl	0 <flatcc_builder_start_struct>
    8950:	mov	r3, #3
    8954:	str	r3, [r0]
    8958:	mov	r0, r4
    895c:	bl	0 <flatcc_builder_end_struct>
    8960:	strb	r6, [sp, #24]
    8964:	str	r0, [sp, #28]
    8968:	mov	r0, r4
    896c:	ldm	r5, {r1, r2}
    8970:	bl	0 <flatcc_builder_union_vector_push>
    8974:	mov	r2, #4
    8978:	mov	r0, r4
    897c:	mov	r1, r2
    8980:	bl	0 <flatcc_builder_start_struct>
    8984:	subs	r3, r0, #0
    8988:	beq	89a0 <test_mixed_type_union+0x394>
    898c:	mov	r2, #1
    8990:	mov	r0, r4
    8994:	str	r2, [r3]
    8998:	bl	0 <flatcc_builder_end_struct>
    899c:	mov	r3, r0
    89a0:	mov	r2, #9
    89a4:	mov	r0, r4
    89a8:	strb	r2, [sp, #24]
    89ac:	str	r3, [sp, #28]
    89b0:	ldm	r5, {r1, r2}
    89b4:	bl	0 <flatcc_builder_union_vector_push>
    89b8:	mov	r2, #4
    89bc:	mov	r0, r4
    89c0:	mov	r1, r2
    89c4:	bl	0 <flatcc_builder_start_struct>
    89c8:	subs	r3, r0, #0
    89cc:	beq	89e4 <test_mixed_type_union+0x3d8>
    89d0:	mov	r2, #2
    89d4:	mov	r0, r4
    89d8:	str	r2, [r3]
    89dc:	bl	0 <flatcc_builder_end_struct>
    89e0:	mov	r3, r0
    89e4:	mov	r7, #9
    89e8:	mov	r0, r4
    89ec:	mov	r6, #11
    89f0:	strb	r7, [sp, #24]
    89f4:	str	r3, [sp, #28]
    89f8:	ldm	r5, {r1, r2}
    89fc:	bl	0 <flatcc_builder_union_vector_push>
    8a00:	movw	r1, #0
    8a04:	movt	r1, #0
    8a08:	mov	r0, r4
    8a0c:	bl	0 <flatcc_builder_create_string_str>
    8a10:	strb	r6, [sp, #24]
    8a14:	str	r0, [sp, #28]
    8a18:	mov	r0, r4
    8a1c:	ldm	r5, {r1, r2}
    8a20:	bl	0 <flatcc_builder_union_vector_push>
    8a24:	movw	r1, #0
    8a28:	movt	r1, #0
    8a2c:	mov	r0, r4
    8a30:	bl	0 <flatcc_builder_create_string_str>
    8a34:	strb	r6, [sp, #24]
    8a38:	str	r0, [sp, #28]
    8a3c:	mov	r0, r4
    8a40:	ldm	r5, {r1, r2}
    8a44:	bl	0 <flatcc_builder_union_vector_push>
    8a48:	mov	r0, r5
    8a4c:	mov	r1, r4
    8a50:	bl	0 <flatcc_builder_end_union_vector>
    8a54:	ldr	r5, [sp, #24]
    8a58:	ldr	r6, [sp, #28]
    8a5c:	cmp	r5, #0
    8a60:	cmpne	r6, #0
    8a64:	bne	8d78 <test_mixed_type_union+0x76c>
    8a68:	mov	r2, #0
    8a6c:	ldr	r1, [pc, #2100]	; 92a8 <test_mixed_type_union+0xc9c>
    8a70:	mov	r0, r4
    8a74:	bl	0 <flatcc_builder_check_required>
    8a78:	cmp	r0, #0
    8a7c:	beq	8f08 <test_mixed_type_union+0x8fc>
    8a80:	mov	r0, r4
    8a84:	bl	0 <flatcc_builder_end_table>
    8a88:	mov	r1, r0
    8a8c:	mov	r0, r4
    8a90:	bl	0 <flatcc_builder_end_buffer>
    8a94:	mov	r0, r4
    8a98:	add	r1, sp, #4
    8a9c:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    8aa0:	movw	r3, #0
    8aa4:	movt	r3, #0
    8aa8:	ldr	r2, [sp, #4]
    8aac:	mov	r1, r0
    8ab0:	mov	r4, r0
    8ab4:	movw	r0, #0
    8ab8:	movt	r0, #0
    8abc:	ldr	r3, [r3]
    8ac0:	bl	28 <hexdump>
    8ac4:	mov	r0, r4
    8ac8:	movw	r3, #0
    8acc:	movt	r3, #0
    8ad0:	movw	r2, #0
    8ad4:	movt	r2, #0
    8ad8:	ldr	r1, [sp, #4]
    8adc:	bl	0 <flatcc_verify_table_as_root>
    8ae0:	cmp	r0, #0
    8ae4:	bne	8e94 <test_mixed_type_union+0x888>
    8ae8:	cmp	r4, #0
    8aec:	beq	8b04 <test_mixed_type_union+0x4f8>
    8af0:	ldr	r2, [r4, #4]
    8af4:	movw	r3, #20301	; 0x4f4d
    8af8:	movt	r3, #21326	; 0x534e
    8afc:	cmp	r2, r3
    8b00:	beq	8b20 <test_mixed_type_union+0x514>
    8b04:	movw	r1, #0
    8b08:	movt	r1, #0
    8b0c:	ldr	r3, [pc, #1944]	; 92ac <test_mixed_type_union+0xca0>
    8b10:	movw	r0, #0
    8b14:	movt	r0, #0
    8b18:	movw	r2, #819	; 0x333
    8b1c:	bl	0 <__assert_fail>
    8b20:	ldr	r6, [r4]
    8b24:	adds	r7, r4, r6
    8b28:	beq	8b04 <test_mixed_type_union+0x4f8>
    8b2c:	ldr	r5, [r4, r6]
    8b30:	sub	r5, r7, r5
    8b34:	ldrh	r3, [r5]
    8b38:	cmp	r3, #7
    8b3c:	bls	8b8c <test_mixed_type_union+0x580>
    8b40:	ldrh	r2, [r5, #6]
    8b44:	cmp	r2, #0
    8b48:	beq	8b8c <test_mixed_type_union+0x580>
    8b4c:	cmp	r3, #23
    8b50:	bhi	8bb0 <test_mixed_type_union+0x5a4>
    8b54:	movw	r0, #0
    8b58:	movt	r0, #0
    8b5c:	mvn	r5, #0
    8b60:	bl	0 <puts>
    8b64:	mov	r0, r4
    8b68:	bl	0 <flatcc_builder_aligned_free>
    8b6c:	mov	r0, r5
    8b70:	add	sp, sp, #32
    8b74:	ldrd	r4, [sp]
    8b78:	ldrd	r6, [sp, #8]
    8b7c:	ldrd	r8, [sp, #16]
    8b80:	ldr	sl, [sp, #24]
    8b84:	add	sp, sp, #28
    8b88:	pop	{pc}		; (ldr pc, [sp], #4)
    8b8c:	movw	r0, #0
    8b90:	movt	r0, #0
    8b94:	bl	0 <puts>
    8b98:	mvn	r5, #0
    8b9c:	b	8b64 <test_mixed_type_union+0x558>
    8ba0:	mov	r8, #0
    8ba4:	b	87fc <test_mixed_type_union+0x1f0>
    8ba8:	mov	r2, #0
    8bac:	b	88e8 <test_mixed_type_union+0x2dc>
    8bb0:	ldrh	r8, [r5, #22]
    8bb4:	cmp	r8, #0
    8bb8:	beq	8b54 <test_mixed_type_union+0x548>
    8bbc:	ldrh	r3, [r5, #4]
    8bc0:	cmp	r3, #0
    8bc4:	beq	8dfc <test_mixed_type_union+0x7f0>
    8bc8:	ldrb	r1, [r7, r3]
    8bcc:	cmp	r1, #0
    8bd0:	beq	8dfc <test_mixed_type_union+0x7f0>
    8bd4:	ldr	r3, [r7, r2]
    8bd8:	cmp	r1, #8
    8bdc:	add	r2, r7, r2
    8be0:	add	r1, r2, r3
    8be4:	bne	8dfc <test_mixed_type_union+0x7f0>
    8be8:	cmp	r1, #0
    8bec:	beq	8e10 <test_mixed_type_union+0x804>
    8bf0:	ldrh	r3, [r2, r3]
    8bf4:	cmp	r3, #19
    8bf8:	bhi	8e44 <test_mixed_type_union+0x838>
    8bfc:	bne	8e1c <test_mixed_type_union+0x810>
    8c00:	ldrh	r3, [r5, #16]
    8c04:	cmp	r3, #0
    8c08:	beq	8e30 <test_mixed_type_union+0x824>
    8c0c:	ldrb	r3, [r7, r3]
    8c10:	cmp	r3, #8
    8c14:	bne	8e30 <test_mixed_type_union+0x824>
    8c18:	ldrh	r3, [r5, #18]
    8c1c:	cmp	r3, #0
    8c20:	beq	8eb0 <test_mixed_type_union+0x8a4>
    8c24:	ldr	r2, [r7, r3]
    8c28:	add	r3, r7, r3
    8c2c:	cmn	r3, r2
    8c30:	beq	8eb0 <test_mixed_type_union+0x8a4>
    8c34:	ldrh	r3, [r3, r2]
    8c38:	cmp	r3, #22
    8c3c:	bne	8e58 <test_mixed_type_union+0x84c>
    8c40:	ldrh	r3, [r5, #8]
    8c44:	cmp	r3, #0
    8c48:	beq	8e6c <test_mixed_type_union+0x860>
    8c4c:	ldrb	r3, [r7, r3]
    8c50:	cmp	r3, #2
    8c54:	bne	8e6c <test_mixed_type_union+0x860>
    8c58:	ldrh	r3, [r5, #10]
    8c5c:	cmp	r3, #0
    8c60:	beq	8e80 <test_mixed_type_union+0x874>
    8c64:	ldr	r2, [r7, r3]
    8c68:	add	r3, r7, r3
    8c6c:	adds	r1, r3, r2
    8c70:	beq	8e80 <test_mixed_type_union+0x874>
    8c74:	ldr	r3, [r3, r2]
    8c78:	sub	r3, r1, r3
    8c7c:	ldrh	r2, [r3]
    8c80:	cmp	r2, #5
    8c84:	bls	8e80 <test_mixed_type_union+0x874>
    8c88:	ldrh	r3, [r3, #4]
    8c8c:	cmp	r3, #0
    8c90:	beq	8e80 <test_mixed_type_union+0x874>
    8c94:	ldr	r3, [r1, r3]
    8c98:	cmp	r3, #42	; 0x2a
    8c9c:	bne	8e80 <test_mixed_type_union+0x874>
    8ca0:	ldrh	r3, [r5, #12]
    8ca4:	cmp	r3, #0
    8ca8:	beq	8ec4 <test_mixed_type_union+0x8b8>
    8cac:	ldrb	r3, [r7, r3]
    8cb0:	cmp	r3, #11
    8cb4:	bne	8ec4 <test_mixed_type_union+0x8b8>
    8cb8:	ldrh	r3, [r5, #14]
    8cbc:	cmp	r3, #0
    8cc0:	beq	8ef4 <test_mixed_type_union+0x8e8>
    8cc4:	ldr	r2, [r7, r3]
    8cc8:	add	r9, r7, r3
    8ccc:	adds	r9, r9, r2
    8cd0:	beq	8ef4 <test_mixed_type_union+0x8e8>
    8cd4:	adds	r9, r9, #4
    8cd8:	beq	8ef4 <test_mixed_type_union+0x8e8>
    8cdc:	movw	r1, #0
    8ce0:	movt	r1, #0
    8ce4:	mov	r0, r9
    8ce8:	bl	0 <strcmp>
    8cec:	cmp	r0, #0
    8cf0:	bne	8f24 <test_mixed_type_union+0x918>
    8cf4:	ldrh	r3, [r5, #20]
    8cf8:	cmp	r3, #0
    8cfc:	beq	8fbc <test_mixed_type_union+0x9b0>
    8d00:	ldr	r9, [r7, r3]
    8d04:	add	r3, r7, r3
    8d08:	add	r2, r7, r8
    8d0c:	ldr	r5, [r7, r8]
    8d10:	add	r9, r9, #4
    8d14:	adds	r9, r3, r9
    8d18:	add	r5, r5, #4
    8d1c:	add	r5, r2, r5
    8d20:	beq	8fcc <test_mixed_type_union+0x9c0>
    8d24:	cmp	r5, #0
    8d28:	ldr	r2, [r9, #-4]
    8d2c:	beq	8f6c <test_mixed_type_union+0x960>
    8d30:	ldr	r3, [r5, #-4]
    8d34:	cmp	r2, r3
    8d38:	bne	8f98 <test_mixed_type_union+0x98c>
    8d3c:	add	r8, sp, #8
    8d40:	mov	r3, #0
    8d44:	str	r9, [sp, #8]
    8d48:	add	r0, sp, #16
    8d4c:	str	r5, [sp, #12]
    8d50:	ldm	r8, {r1, r2}
    8d54:	bl	720 <Fantasy_Character_union_vec_at>
    8d58:	ldrb	r3, [sp, #16]
    8d5c:	cmp	r3, #8
    8d60:	beq	8f3c <test_mixed_type_union+0x930>
    8d64:	movw	r0, #0
    8d68:	movt	r0, #0
    8d6c:	bl	0 <printf>
    8d70:	mvn	r5, #0
    8d74:	b	8b64 <test_mixed_type_union+0x558>
    8d78:	mov	r1, #8
    8d7c:	mov	r0, r4
    8d80:	bl	0 <flatcc_builder_table_add_offset>
    8d84:	cmp	r0, #0
    8d88:	beq	8a68 <test_mixed_type_union+0x45c>
    8d8c:	mov	r1, r7
    8d90:	str	r5, [r0]
    8d94:	mov	r0, r4
    8d98:	bl	0 <flatcc_builder_table_add_offset>
    8d9c:	cmp	r0, #0
    8da0:	strne	r6, [r0]
    8da4:	b	8a68 <test_mixed_type_union+0x45c>
    8da8:	mov	r2, #2
    8dac:	mov	r0, r4
    8db0:	mov	r1, r2
    8db4:	bl	0 <flatcc_builder_start_struct>
    8db8:	subs	r3, r0, #0
    8dbc:	beq	8df4 <test_mixed_type_union+0x7e8>
    8dc0:	mov	r2, #19
    8dc4:	mov	r0, r4
    8dc8:	strh	r2, [r3]
    8dcc:	bl	0 <flatcc_builder_end_struct>
    8dd0:	subs	r5, r0, #0
    8dd4:	beq	8fb4 <test_mixed_type_union+0x9a8>
    8dd8:	mov	r3, #1
    8ddc:	mov	r1, r6
    8de0:	mov	r2, r3
    8de4:	mov	r0, r4
    8de8:	bl	0 <flatcc_builder_table_add>
    8dec:	subs	r8, r0, #0
    8df0:	bne	86fc <test_mixed_type_union+0xf0>
    8df4:	mov	r6, #0
    8df8:	b	8760 <test_mixed_type_union+0x154>
    8dfc:	movw	r0, #0
    8e00:	movt	r0, #0
    8e04:	bl	0 <puts>
    8e08:	mvn	r5, #0
    8e0c:	b	8b64 <test_mixed_type_union+0x558>
    8e10:	movw	r0, #0
    8e14:	movt	r0, #0
    8e18:	bl	0 <puts>
    8e1c:	movw	r0, #0
    8e20:	movt	r0, #0
    8e24:	bl	0 <puts>
    8e28:	mvn	r5, #0
    8e2c:	b	8b64 <test_mixed_type_union+0x558>
    8e30:	movw	r0, #0
    8e34:	movt	r0, #0
    8e38:	bl	0 <puts>
    8e3c:	mvn	r5, #0
    8e40:	b	8b64 <test_mixed_type_union+0x558>
    8e44:	movw	r0, #0
    8e48:	movt	r0, #0
    8e4c:	bl	0 <puts>
    8e50:	mvn	r5, #0
    8e54:	b	8b64 <test_mixed_type_union+0x558>
    8e58:	movw	r0, #0
    8e5c:	movt	r0, #0
    8e60:	bl	0 <puts>
    8e64:	mvn	r5, #0
    8e68:	b	8b64 <test_mixed_type_union+0x558>
    8e6c:	movw	r0, #0
    8e70:	movt	r0, #0
    8e74:	bl	0 <puts>
    8e78:	mvn	r5, #0
    8e7c:	b	8b64 <test_mixed_type_union+0x558>
    8e80:	movw	r0, #0
    8e84:	movt	r0, #0
    8e88:	bl	0 <puts>
    8e8c:	mvn	r5, #0
    8e90:	b	8b64 <test_mixed_type_union+0x558>
    8e94:	bl	0 <flatcc_verify_error_string>
    8e98:	mov	r1, r0
    8e9c:	movw	r0, #0
    8ea0:	movt	r0, #0
    8ea4:	mvn	r5, #0
    8ea8:	bl	0 <printf>
    8eac:	b	8b6c <test_mixed_type_union+0x560>
    8eb0:	movw	r0, #0
    8eb4:	movt	r0, #0
    8eb8:	bl	0 <puts>
    8ebc:	mvn	r5, #0
    8ec0:	b	8b64 <test_mixed_type_union+0x558>
    8ec4:	movw	r0, #0
    8ec8:	movt	r0, #0
    8ecc:	bl	0 <puts>
    8ed0:	mvn	r5, #0
    8ed4:	b	8b64 <test_mixed_type_union+0x558>
    8ed8:	movw	r1, #0
    8edc:	movt	r1, #0
    8ee0:	ldr	r3, [pc, #968]	; 92b0 <test_mixed_type_union+0xca4>
    8ee4:	movw	r0, #0
    8ee8:	movt	r0, #0
    8eec:	mov	r2, #239	; 0xef
    8ef0:	bl	0 <__assert_fail>
    8ef4:	movw	r0, #0
    8ef8:	movt	r0, #0
    8efc:	bl	0 <puts>
    8f00:	mvn	r5, #0
    8f04:	b	8b64 <test_mixed_type_union+0x558>
    8f08:	movw	r1, #0
    8f0c:	movt	r1, #0
    8f10:	ldr	r3, [pc, #924]	; 92b4 <test_mixed_type_union+0xca8>
    8f14:	movw	r0, #0
    8f18:	movt	r0, #0
    8f1c:	mov	r2, #241	; 0xf1
    8f20:	bl	0 <__assert_fail>
    8f24:	mov	r1, r9
    8f28:	movw	r0, #0
    8f2c:	movt	r0, #0
    8f30:	mvn	r5, #0
    8f34:	bl	0 <printf>
    8f38:	b	8b64 <test_mixed_type_union+0x558>
    8f3c:	mov	r3, #1
    8f40:	add	r0, sp, #16
    8f44:	ldm	r8, {r1, r2}
    8f48:	bl	720 <Fantasy_Character_union_vec_at>
    8f4c:	ldrb	sl, [sp, #16]
    8f50:	cmp	sl, #2
    8f54:	beq	8f74 <test_mixed_type_union+0x968>
    8f58:	movw	r0, #0
    8f5c:	movt	r0, #0
    8f60:	bl	0 <printf>
    8f64:	mvn	r5, #0
    8f68:	b	8b64 <test_mixed_type_union+0x558>
    8f6c:	mov	r3, r5
    8f70:	b	8d34 <test_mixed_type_union+0x728>
    8f74:	ldr	r0, [sp, #20]
    8f78:	bl	69c <Fantasy_Attacker_sword_attack_damage>
    8f7c:	cmp	r0, #42	; 0x2a
    8f80:	beq	8fe4 <test_mixed_type_union+0x9d8>
    8f84:	movw	r0, #0
    8f88:	movt	r0, #0
    8f8c:	bl	0 <printf>
    8f90:	mvn	r5, #0
    8f94:	b	8b64 <test_mixed_type_union+0x558>
    8f98:	movw	r1, #0
    8f9c:	movt	r1, #0
    8fa0:	ldr	r3, [pc, #784]	; 92b8 <test_mixed_type_union+0xcac>
    8fa4:	movw	r0, #0
    8fa8:	movt	r0, #0
    8fac:	movw	r2, #823	; 0x337
    8fb0:	bl	0 <__assert_fail>
    8fb4:	mov	r6, r5
    8fb8:	b	8760 <test_mixed_type_union+0x154>
    8fbc:	ldr	r3, [r7, r8]
    8fc0:	add	r5, r7, r8
    8fc4:	add	r3, r3, #4
    8fc8:	add	r5, r5, r3
    8fcc:	cmp	r5, #0
    8fd0:	moveq	r9, r5
    8fd4:	beq	8d3c <test_mixed_type_union+0x730>
    8fd8:	mov	r9, #0
    8fdc:	mov	r2, r9
    8fe0:	b	8d30 <test_mixed_type_union+0x724>
    8fe4:	mov	r3, sl
    8fe8:	add	r0, sp, #16
    8fec:	ldm	r8, {r1, r2}
    8ff0:	bl	720 <Fantasy_Character_union_vec_at>
    8ff4:	ldrb	r3, [sp, #16]
    8ff8:	cmp	r3, #2
    8ffc:	beq	9014 <test_mixed_type_union+0xa08>
    9000:	movw	r0, #0
    9004:	movt	r0, #0
    9008:	bl	0 <printf>
    900c:	mvn	r5, #0
    9010:	b	8b64 <test_mixed_type_union+0x558>
    9014:	ldr	r0, [sp, #20]
    9018:	bl	69c <Fantasy_Attacker_sword_attack_damage>
    901c:	cmp	r0, #1
    9020:	beq	9038 <test_mixed_type_union+0xa2c>
    9024:	movw	r0, #0
    9028:	movt	r0, #0
    902c:	bl	0 <printf>
    9030:	mvn	r5, #0
    9034:	b	8b64 <test_mixed_type_union+0x558>
    9038:	ldr	r3, [r4, r6]
    903c:	sub	r3, r7, r3
    9040:	ldrh	r2, [r3]
    9044:	cmp	r2, #21
    9048:	bls	9098 <test_mixed_type_union+0xa8c>
    904c:	ldrh	r3, [r3, #20]
    9050:	cmp	r3, #0
    9054:	beq	9098 <test_mixed_type_union+0xa8c>
    9058:	ldr	r2, [r7, r3]
    905c:	add	r3, r7, r3
    9060:	add	r2, r2, #4
    9064:	adds	r3, r3, r2
    9068:	beq	9098 <test_mixed_type_union+0xa8c>
    906c:	ldr	r2, [r3, #-4]
    9070:	cmp	r2, #3
    9074:	bls	9098 <test_mixed_type_union+0xa8c>
    9078:	ldrb	r3, [r3, #3]
    907c:	cmp	r3, #11
    9080:	beq	909c <test_mixed_type_union+0xa90>
    9084:	movw	r0, #0
    9088:	movt	r0, #0
    908c:	bl	0 <puts>
    9090:	mvn	r5, #0
    9094:	b	8b64 <test_mixed_type_union+0x558>
    9098:	bl	624 <flatbuffers_union_type_vec_at.part.31>
    909c:	cmp	r5, #0
    90a0:	beq	9148 <test_mixed_type_union+0xb3c>
    90a4:	ldr	r3, [r5, #-4]
    90a8:	cmp	r3, #3
    90ac:	bls	9148 <test_mixed_type_union+0xb3c>
    90b0:	ldr	r3, [r5, #12]
    90b4:	add	r3, r3, #16
    90b8:	adds	r0, r5, r3
    90bc:	beq	91ec <test_mixed_type_union+0xbe0>
    90c0:	movw	r1, #0
    90c4:	movt	r1, #0
    90c8:	bl	0 <strcmp>
    90cc:	cmp	r0, #0
    90d0:	bne	91ec <test_mixed_type_union+0xbe0>
    90d4:	mov	r3, #3
    90d8:	add	r0, sp, #16
    90dc:	ldm	r8, {r1, r2}
    90e0:	bl	720 <Fantasy_Character_union_vec_at>
    90e4:	ldrb	r3, [sp, #16]
    90e8:	cmp	r3, #11
    90ec:	bne	91d8 <test_mixed_type_union+0xbcc>
    90f0:	ldr	r3, [sp, #20]
    90f4:	cmp	r3, #0
    90f8:	beq	9194 <test_mixed_type_union+0xb88>
    90fc:	adds	r0, r3, #4
    9100:	beq	9194 <test_mixed_type_union+0xb88>
    9104:	movw	r1, #0
    9108:	movt	r1, #0
    910c:	bl	0 <strcmp>
    9110:	subs	r5, r0, #0
    9114:	bne	9194 <test_mixed_type_union+0xb88>
    9118:	mov	r3, #4
    911c:	add	r0, sp, #16
    9120:	ldm	r8, {r1, r2}
    9124:	bl	720 <Fantasy_Character_union_vec_at>
    9128:	ldrb	r3, [sp, #16]
    912c:	cmp	r3, #9
    9130:	beq	9164 <test_mixed_type_union+0xb58>
    9134:	movw	r0, #0
    9138:	movt	r0, #0
    913c:	bl	0 <printf>
    9140:	mvn	r5, #0
    9144:	b	8b64 <test_mixed_type_union+0x558>
    9148:	movw	r1, #0
    914c:	movt	r1, #0
    9150:	ldr	r3, [pc, #356]	; 92bc <test_mixed_type_union+0xcb0>
    9154:	movw	r0, #0
    9158:	movt	r0, #0
    915c:	mov	r2, #119	; 0x77
    9160:	bl	0 <__assert_fail>
    9164:	mov	r3, #5
    9168:	add	r0, sp, #16
    916c:	ldm	r8, {r1, r2}
    9170:	bl	720 <Fantasy_Character_union_vec_at>
    9174:	ldrb	r3, [sp, #16]
    9178:	cmp	r3, #9
    917c:	beq	91a8 <test_mixed_type_union+0xb9c>
    9180:	movw	r0, #0
    9184:	movt	r0, #0
    9188:	bl	0 <printf>
    918c:	mvn	r5, #0
    9190:	b	8b64 <test_mixed_type_union+0x558>
    9194:	movw	r0, #0
    9198:	movt	r0, #0
    919c:	bl	0 <puts>
    91a0:	mvn	r5, #0
    91a4:	b	8b64 <test_mixed_type_union+0x558>
    91a8:	mov	r3, #6
    91ac:	add	r0, sp, #16
    91b0:	ldm	r8, {r1, r2}
    91b4:	bl	720 <Fantasy_Character_union_vec_at>
    91b8:	ldrb	r3, [sp, #16]
    91bc:	cmp	r3, #9
    91c0:	beq	9200 <test_mixed_type_union+0xbf4>
    91c4:	movw	r0, #0
    91c8:	movt	r0, #0
    91cc:	bl	0 <printf>
    91d0:	mvn	r5, #0
    91d4:	b	8b64 <test_mixed_type_union+0x558>
    91d8:	movw	r0, #0
    91dc:	movt	r0, #0
    91e0:	bl	0 <printf>
    91e4:	mvn	r5, #0
    91e8:	b	8b64 <test_mixed_type_union+0x558>
    91ec:	movw	r0, #0
    91f0:	movt	r0, #0
    91f4:	bl	0 <puts>
    91f8:	mvn	r5, #0
    91fc:	b	8b64 <test_mixed_type_union+0x558>
    9200:	mov	r3, #7
    9204:	add	r0, sp, #16
    9208:	ldm	r8, {r1, r2}
    920c:	bl	720 <Fantasy_Character_union_vec_at>
    9210:	ldrb	r6, [sp, #16]
    9214:	cmp	r6, #9
    9218:	beq	9230 <test_mixed_type_union+0xc24>
    921c:	movw	r0, #0
    9220:	movt	r0, #0
    9224:	bl	0 <printf>
    9228:	mvn	r5, #0
    922c:	b	8b64 <test_mixed_type_union+0x558>
    9230:	mov	r3, #8
    9234:	add	r0, sp, #16
    9238:	ldm	r8, {r1, r2}
    923c:	bl	720 <Fantasy_Character_union_vec_at>
    9240:	ldrb	r3, [sp, #16]
    9244:	cmp	r3, #11
    9248:	bne	9290 <test_mixed_type_union+0xc84>
    924c:	mov	r3, r6
    9250:	add	r0, sp, #16
    9254:	ldm	r8, {r1, r2}
    9258:	bl	720 <Fantasy_Character_union_vec_at>
    925c:	ldrb	r3, [sp, #16]
    9260:	cmp	r3, #11
    9264:	bne	9290 <test_mixed_type_union+0xc84>
    9268:	cmp	r9, #0
    926c:	beq	927c <test_mixed_type_union+0xc70>
    9270:	ldr	r3, [r9, #-4]
    9274:	cmp	r3, #10
    9278:	beq	8b64 <test_mixed_type_union+0x558>
    927c:	movw	r0, #0
    9280:	movt	r0, #0
    9284:	mvn	r5, #0
    9288:	bl	0 <printf>
    928c:	b	8b64 <test_mixed_type_union+0x558>
    9290:	movw	r0, #0
    9294:	movt	r0, #0
    9298:	bl	0 <printf>
    929c:	mvn	r5, #0
    92a0:	b	8b64 <test_mixed_type_union+0x558>
    92a4:	.word	0x0000062c
    92a8:	.word	0x00000648
    92ac:	.word	0x00000660
    92b0:	.word	0x00000630
    92b4:	.word	0x0000064c
    92b8:	.word	0x00000688
    92bc:	.word	0x000006a8

000092c0 <test_add_set_defaults>:
    92c0:	strd	r4, [sp, #-12]!
    92c4:	mov	r4, r0
    92c8:	str	lr, [sp, #8]
    92cc:	sub	sp, sp, #12
    92d0:	bl	0 <flatcc_builder_reset>
    92d4:	mov	r3, #0
    92d8:	mov	r0, r4
    92dc:	mov	r2, r3
    92e0:	movw	r1, #0
    92e4:	movt	r1, #0
    92e8:	bl	0 <flatcc_builder_start_buffer>
    92ec:	cmp	r0, #0
    92f0:	bne	9300 <test_add_set_defaults+0x40>
    92f4:	mov	r1, #36	; 0x24
    92f8:	mov	r0, r4
    92fc:	bl	0 <flatcc_builder_start_table>
    9300:	movw	r1, #0
    9304:	movt	r1, #0
    9308:	mov	r0, r4
    930c:	bl	0 <flatcc_builder_create_string_str>
    9310:	subs	r5, r0, #0
    9314:	beq	932c <test_add_set_defaults+0x6c>
    9318:	mov	r1, #3
    931c:	mov	r0, r4
    9320:	bl	0 <flatcc_builder_table_add_offset>
    9324:	cmp	r0, #0
    9328:	strne	r5, [r0]
    932c:	mov	r3, #2
    9330:	mov	r1, #1
    9334:	mov	r2, r3
    9338:	mov	r0, r4
    933c:	bl	0 <flatcc_builder_table_add>
    9340:	cmp	r0, #0
    9344:	mov	r2, #1
    9348:	ldr	r1, [pc, #692]	; 9604 <test_add_set_defaults+0x344>
    934c:	movne	r3, #100	; 0x64
    9350:	strhne	r3, [r0]
    9354:	mov	r0, r4
    9358:	bl	0 <flatcc_builder_check_required>
    935c:	cmp	r0, #0
    9360:	beq	9600 <test_add_set_defaults+0x340>
    9364:	mov	r0, r4
    9368:	bl	0 <flatcc_builder_end_table>
    936c:	mov	r1, r0
    9370:	mov	r0, r4
    9374:	bl	0 <flatcc_builder_end_buffer>
    9378:	add	r1, sp, #4
    937c:	mov	r0, r4
    9380:	bl	0 <flatcc_builder_get_direct_buffer>
    9384:	cmp	r0, #0
    9388:	beq	93a0 <test_add_set_defaults+0xe0>
    938c:	ldr	r2, [r0, #4]
    9390:	movw	r3, #20301	; 0x4f4d
    9394:	movt	r3, #21326	; 0x534e
    9398:	cmp	r2, r3
    939c:	beq	93a4 <test_add_set_defaults+0xe4>
    93a0:	bl	230 <MyGame_Example_Monster_hp_is_present.part.10>
    93a4:	ldr	r2, [r0]
    93a8:	adds	r3, r0, r2
    93ac:	beq	93a0 <test_add_set_defaults+0xe0>
    93b0:	ldr	r2, [r0, r2]
    93b4:	sub	r3, r3, r2
    93b8:	ldrh	r2, [r3]
    93bc:	cmp	r2, #9
    93c0:	bls	9544 <test_add_set_defaults+0x284>
    93c4:	ldrh	r1, [r3, #8]
    93c8:	cmp	r1, #0
    93cc:	bne	95c4 <test_add_set_defaults+0x304>
    93d0:	ldrh	r1, [r3, #6]
    93d4:	cmp	r1, #0
    93d8:	beq	954c <test_add_set_defaults+0x28c>
    93dc:	cmp	r2, #17
    93e0:	bls	93f0 <test_add_set_defaults+0x130>
    93e4:	ldrh	r3, [r3, #16]
    93e8:	cmp	r3, #0
    93ec:	bne	95d8 <test_add_set_defaults+0x318>
    93f0:	mov	r0, r4
    93f4:	bl	0 <flatcc_builder_reset>
    93f8:	mov	r3, #0
    93fc:	movw	r1, #0
    9400:	movt	r1, #0
    9404:	mov	r2, r3
    9408:	mov	r0, r4
    940c:	bl	0 <flatcc_builder_start_buffer>
    9410:	cmp	r0, #0
    9414:	bne	9424 <test_add_set_defaults+0x164>
    9418:	mov	r1, #36	; 0x24
    941c:	mov	r0, r4
    9420:	bl	0 <flatcc_builder_start_table>
    9424:	movw	r1, #0
    9428:	movt	r1, #0
    942c:	mov	r0, r4
    9430:	bl	0 <flatcc_builder_create_string_str>
    9434:	subs	r5, r0, #0
    9438:	beq	9450 <test_add_set_defaults+0x190>
    943c:	mov	r1, #3
    9440:	mov	r0, r4
    9444:	bl	0 <flatcc_builder_table_add_offset>
    9448:	cmp	r0, #0
    944c:	strne	r5, [r0]
    9450:	mov	r3, #2
    9454:	mov	r0, r4
    9458:	mov	r2, r3
    945c:	mov	r1, r3
    9460:	bl	0 <flatcc_builder_table_add>
    9464:	cmp	r0, #0
    9468:	mov	r1, #1
    946c:	movne	r3, #100	; 0x64
    9470:	strhne	r3, [r0]
    9474:	mov	r3, #2
    9478:	mov	r0, r4
    947c:	mov	r2, r3
    9480:	bl	0 <flatcc_builder_table_add>
    9484:	cmp	r0, #0
    9488:	mov	r1, #6
    948c:	movne	r3, #100	; 0x64
    9490:	strhne	r3, [r0]
    9494:	mov	r3, #1
    9498:	mov	r0, r4
    949c:	mov	r2, r3
    94a0:	bl	0 <flatcc_builder_table_add>
    94a4:	cmp	r0, #0
    94a8:	mov	r2, #1
    94ac:	ldr	r1, [pc, #336]	; 9604 <test_add_set_defaults+0x344>
    94b0:	movne	r3, #8
    94b4:	strbne	r3, [r0]
    94b8:	mov	r0, r4
    94bc:	bl	0 <flatcc_builder_check_required>
    94c0:	cmp	r0, #0
    94c4:	beq	9600 <test_add_set_defaults+0x340>
    94c8:	mov	r0, r4
    94cc:	bl	0 <flatcc_builder_end_table>
    94d0:	mov	r1, r0
    94d4:	mov	r0, r4
    94d8:	bl	0 <flatcc_builder_end_buffer>
    94dc:	add	r1, sp, #4
    94e0:	mov	r0, r4
    94e4:	bl	0 <flatcc_builder_get_direct_buffer>
    94e8:	cmp	r0, #0
    94ec:	beq	93a0 <test_add_set_defaults+0xe0>
    94f0:	ldr	r2, [r0, #4]
    94f4:	movw	r3, #20301	; 0x4f4d
    94f8:	movt	r3, #21326	; 0x534e
    94fc:	cmp	r2, r3
    9500:	bne	93a0 <test_add_set_defaults+0xe0>
    9504:	ldr	r2, [r0]
    9508:	adds	r3, r0, r2
    950c:	beq	93a0 <test_add_set_defaults+0xe0>
    9510:	ldr	r2, [r0, r2]
    9514:	sub	r3, r3, r2
    9518:	ldrh	r2, [r3]
    951c:	cmp	r2, #9
    9520:	bhi	9560 <test_add_set_defaults+0x2a0>
    9524:	movw	r0, #0
    9528:	movt	r0, #0
    952c:	bl	0 <puts>
    9530:	mvn	r0, #0
    9534:	add	sp, sp, #12
    9538:	ldrd	r4, [sp]
    953c:	add	sp, sp, #8
    9540:	pop	{pc}		; (ldr pc, [sp], #4)
    9544:	cmp	r2, #7
    9548:	bhi	95b4 <test_add_set_defaults+0x2f4>
    954c:	movw	r0, #0
    9550:	movt	r0, #0
    9554:	bl	0 <puts>
    9558:	mvn	r0, #0
    955c:	b	9534 <test_add_set_defaults+0x274>
    9560:	ldrh	r1, [r3, #8]
    9564:	cmp	r1, #0
    9568:	beq	9524 <test_add_set_defaults+0x264>
    956c:	ldrh	r1, [r3, #6]
    9570:	cmp	r1, #0
    9574:	beq	95ec <test_add_set_defaults+0x32c>
    9578:	cmp	r2, #17
    957c:	bhi	9594 <test_add_set_defaults+0x2d4>
    9580:	movw	r0, #0
    9584:	movt	r0, #0
    9588:	bl	0 <puts>
    958c:	mvn	r0, #0
    9590:	b	9534 <test_add_set_defaults+0x274>
    9594:	ldrh	r3, [r3, #16]
    9598:	cmp	r3, #0
    959c:	movne	r0, #0
    95a0:	beq	9580 <test_add_set_defaults+0x2c0>
    95a4:	add	sp, sp, #12
    95a8:	ldrd	r4, [sp]
    95ac:	add	sp, sp, #8
    95b0:	pop	{pc}		; (ldr pc, [sp], #4)
    95b4:	ldrh	r3, [r3, #6]
    95b8:	cmp	r3, #0
    95bc:	bne	93f0 <test_add_set_defaults+0x130>
    95c0:	b	954c <test_add_set_defaults+0x28c>
    95c4:	movw	r0, #0
    95c8:	movt	r0, #0
    95cc:	bl	0 <puts>
    95d0:	mvn	r0, #0
    95d4:	b	9534 <test_add_set_defaults+0x274>
    95d8:	movw	r0, #0
    95dc:	movt	r0, #0
    95e0:	bl	0 <puts>
    95e4:	mvn	r0, #0
    95e8:	b	9534 <test_add_set_defaults+0x274>
    95ec:	movw	r0, #0
    95f0:	movt	r0, #0
    95f4:	bl	0 <puts>
    95f8:	mvn	r0, #0
    95fc:	b	9534 <test_add_set_defaults+0x274>
    9600:	bl	7dc <MyGame_Example_Monster_end.part.49>
    9604:	.word	0x00000404

00009608 <test_nested_buffer>:
    9608:	strd	r4, [sp, #-16]!
    960c:	mov	r4, r0
    9610:	str	r6, [sp, #8]
    9614:	str	lr, [sp, #12]
    9618:	sub	sp, sp, #8
    961c:	bl	0 <flatcc_builder_reset>
    9620:	mov	r3, #0
    9624:	mov	r0, r4
    9628:	mov	r2, r3
    962c:	movw	r1, #0
    9630:	movt	r1, #0
    9634:	bl	0 <flatcc_builder_start_buffer>
    9638:	cmp	r0, #0
    963c:	bne	964c <test_nested_buffer+0x44>
    9640:	mov	r1, #36	; 0x24
    9644:	mov	r0, r4
    9648:	bl	0 <flatcc_builder_start_table>
    964c:	movw	r1, #0
    9650:	movt	r1, #0
    9654:	mov	r0, r4
    9658:	bl	0 <flatcc_builder_create_string_str>
    965c:	subs	r5, r0, #0
    9660:	beq	9678 <test_nested_buffer+0x70>
    9664:	mov	r1, #3
    9668:	mov	r0, r4
    966c:	bl	0 <flatcc_builder_table_add_offset>
    9670:	cmp	r0, #0
    9674:	strne	r5, [r0]
    9678:	mov	r3, #0
    967c:	movw	r1, #0
    9680:	movt	r1, #0
    9684:	mov	r2, r3
    9688:	mov	r0, r4
    968c:	bl	0 <flatcc_builder_start_buffer>
    9690:	cmp	r0, #0
    9694:	bne	96a4 <test_nested_buffer+0x9c>
    9698:	mov	r1, #36	; 0x24
    969c:	mov	r0, r4
    96a0:	bl	0 <flatcc_builder_start_table>
    96a4:	movw	r1, #0
    96a8:	movt	r1, #0
    96ac:	mov	r0, r4
    96b0:	bl	0 <flatcc_builder_create_string_str>
    96b4:	subs	r5, r0, #0
    96b8:	beq	96d0 <test_nested_buffer+0xc8>
    96bc:	mov	r1, #3
    96c0:	mov	r0, r4
    96c4:	bl	0 <flatcc_builder_table_add_offset>
    96c8:	cmp	r0, #0
    96cc:	strne	r5, [r0]
    96d0:	mov	r2, #1
    96d4:	ldr	r1, [pc, #628]	; 9950 <test_nested_buffer+0x348>
    96d8:	mov	r0, r4
    96dc:	bl	0 <flatcc_builder_check_required>
    96e0:	cmp	r0, #0
    96e4:	beq	9930 <test_nested_buffer+0x328>
    96e8:	mov	r0, r4
    96ec:	bl	0 <flatcc_builder_end_table>
    96f0:	mov	r1, r0
    96f4:	mov	r0, r4
    96f8:	bl	0 <flatcc_builder_end_buffer>
    96fc:	subs	r5, r0, #0
    9700:	beq	9718 <test_nested_buffer+0x110>
    9704:	mov	r1, #13
    9708:	mov	r0, r4
    970c:	bl	0 <flatcc_builder_table_add_offset>
    9710:	cmp	r0, #0
    9714:	strne	r5, [r0]
    9718:	mov	r3, #2
    971c:	mov	r0, r4
    9720:	mov	r2, r3
    9724:	mov	r1, r3
    9728:	bl	0 <flatcc_builder_table_add>
    972c:	cmp	r0, #0
    9730:	mov	r2, #1
    9734:	ldr	r1, [pc, #532]	; 9950 <test_nested_buffer+0x348>
    9738:	movne	r3, #10
    973c:	strhne	r3, [r0]
    9740:	mov	r0, r4
    9744:	bl	0 <flatcc_builder_check_required>
    9748:	cmp	r0, #0
    974c:	beq	9930 <test_nested_buffer+0x328>
    9750:	mov	r0, r4
    9754:	bl	0 <flatcc_builder_end_table>
    9758:	mov	r1, r0
    975c:	mov	r0, r4
    9760:	bl	0 <flatcc_builder_end_buffer>
    9764:	mov	r0, r4
    9768:	add	r1, sp, #4
    976c:	bl	0 <flatcc_builder_get_direct_buffer>
    9770:	movw	r3, #0
    9774:	movt	r3, #0
    9778:	ldr	r2, [sp, #4]
    977c:	mov	r4, r0
    9780:	mov	r1, r0
    9784:	movw	r0, #0
    9788:	movt	r0, #0
    978c:	ldr	r3, [r3]
    9790:	bl	28 <hexdump>
    9794:	cmp	r4, #0
    9798:	beq	98d4 <test_nested_buffer+0x2cc>
    979c:	ldr	r2, [r4, #4]
    97a0:	movw	r3, #20301	; 0x4f4d
    97a4:	movt	r3, #21326	; 0x534e
    97a8:	cmp	r2, r3
    97ac:	bne	98d4 <test_nested_buffer+0x2cc>
    97b0:	ldr	r3, [r4]
    97b4:	adds	r5, r4, r3
    97b8:	beq	98d4 <test_nested_buffer+0x2cc>
    97bc:	ldr	r4, [r4, r3]
    97c0:	sub	r4, r5, r4
    97c4:	ldrh	r6, [r4]
    97c8:	cmp	r6, #11
    97cc:	bls	9914 <test_nested_buffer+0x30c>
    97d0:	ldrh	r0, [r4, #10]
    97d4:	cmp	r0, #0
    97d8:	beq	9914 <test_nested_buffer+0x30c>
    97dc:	ldr	r3, [r5, r0]
    97e0:	add	r0, r5, r0
    97e4:	movw	r1, #0
    97e8:	movt	r1, #0
    97ec:	add	r3, r3, #4
    97f0:	add	r0, r0, r3
    97f4:	bl	0 <strcmp>
    97f8:	cmp	r0, #0
    97fc:	bne	98ec <test_nested_buffer+0x2e4>
    9800:	cmp	r6, #31
    9804:	ldrh	r1, [r4, #8]
    9808:	bls	98c0 <test_nested_buffer+0x2b8>
    980c:	ldrh	r3, [r4, #30]
    9810:	cmp	r3, #0
    9814:	beq	98c0 <test_nested_buffer+0x2b8>
    9818:	ldr	r0, [r5, r3]
    981c:	add	r3, r5, r3
    9820:	add	r0, r0, #4
    9824:	adds	r2, r3, r0
    9828:	beq	98c0 <test_nested_buffer+0x2b8>
    982c:	ldr	lr, [r2, #4]
    9830:	movw	ip, #20301	; 0x4f4d
    9834:	movt	ip, #21326	; 0x534e
    9838:	cmp	lr, ip
    983c:	bne	98c0 <test_nested_buffer+0x2b8>
    9840:	ldr	r3, [r3, r0]
    9844:	cmp	r1, #0
    9848:	add	r0, r2, r3
    984c:	beq	98d8 <test_nested_buffer+0x2d0>
    9850:	ldrsh	r1, [r5, r1]
    9854:	cmp	r1, #10
    9858:	bne	98d8 <test_nested_buffer+0x2d0>
    985c:	cmp	r0, #0
    9860:	beq	98d4 <test_nested_buffer+0x2cc>
    9864:	ldr	r3, [r2, r3]
    9868:	sub	r3, r0, r3
    986c:	ldrh	r2, [r3]
    9870:	cmp	r2, #11
    9874:	bls	9914 <test_nested_buffer+0x30c>
    9878:	ldrh	r2, [r3, #10]
    987c:	cmp	r2, #0
    9880:	beq	9914 <test_nested_buffer+0x30c>
    9884:	ldr	r3, [r0, r2]
    9888:	add	r0, r0, r2
    988c:	add	r3, r3, #4
    9890:	adds	r0, r0, r3
    9894:	beq	9934 <test_nested_buffer+0x32c>
    9898:	movw	r1, #0
    989c:	movt	r1, #0
    98a0:	bl	0 <strcmp>
    98a4:	cmp	r0, #0
    98a8:	bne	9900 <test_nested_buffer+0x2f8>
    98ac:	add	sp, sp, #8
    98b0:	ldrd	r4, [sp]
    98b4:	ldr	r6, [sp, #8]
    98b8:	add	sp, sp, #12
    98bc:	pop	{pc}		; (ldr pc, [sp], #4)
    98c0:	cmp	r1, #0
    98c4:	beq	98d8 <test_nested_buffer+0x2d0>
    98c8:	ldrsh	r3, [r5, r1]
    98cc:	cmp	r3, #10
    98d0:	bne	98d8 <test_nested_buffer+0x2d0>
    98d4:	bl	4ec <MyGame_Example_Monster_name.part.26>
    98d8:	movw	r0, #0
    98dc:	movt	r0, #0
    98e0:	bl	0 <puts>
    98e4:	mvn	r0, #0
    98e8:	b	98ac <test_nested_buffer+0x2a4>
    98ec:	movw	r0, #0
    98f0:	movt	r0, #0
    98f4:	bl	0 <puts>
    98f8:	mvn	r0, #0
    98fc:	b	98ac <test_nested_buffer+0x2a4>
    9900:	movw	r0, #0
    9904:	movt	r0, #0
    9908:	bl	0 <puts>
    990c:	mvn	r0, #0
    9910:	b	98ac <test_nested_buffer+0x2a4>
    9914:	movw	r1, #0
    9918:	movt	r1, #0
    991c:	ldr	r3, [pc, #48]	; 9954 <test_nested_buffer+0x34c>
    9920:	movw	r0, #0
    9924:	movt	r0, #0
    9928:	movw	r2, #699	; 0x2bb
    992c:	bl	0 <__assert_fail>
    9930:	bl	7dc <MyGame_Example_Monster_end.part.49>
    9934:	movw	r1, #0
    9938:	movt	r1, #0
    993c:	ldr	r3, [pc, #20]	; 9958 <test_nested_buffer+0x350>
    9940:	movw	r0, #0
    9944:	movt	r0, #0
    9948:	movw	r2, #2188	; 0x88c
    994c:	bl	0 <__assert_fail>
    9950:	.word	0x00000404
    9954:	.word	0x0000020c
    9958:	.word	0x000006d0

0000995c <test_nested_buffer_first>:
    995c:	strd	r4, [sp, #-16]!
    9960:	mov	r4, r0
    9964:	str	r6, [sp, #8]
    9968:	str	lr, [sp, #12]
    996c:	sub	sp, sp, #8
    9970:	bl	0 <flatcc_builder_reset>
    9974:	mov	r3, #0
    9978:	mov	r0, r4
    997c:	mov	r2, r3
    9980:	movw	r1, #0
    9984:	movt	r1, #0
    9988:	bl	0 <flatcc_builder_start_buffer>
    998c:	cmp	r0, #0
    9990:	bne	99a0 <test_nested_buffer_first+0x44>
    9994:	mov	r1, #36	; 0x24
    9998:	mov	r0, r4
    999c:	bl	0 <flatcc_builder_start_table>
    99a0:	mov	r3, #0
    99a4:	movw	r1, #0
    99a8:	movt	r1, #0
    99ac:	mov	r2, r3
    99b0:	mov	r0, r4
    99b4:	bl	0 <flatcc_builder_start_buffer>
    99b8:	cmp	r0, #0
    99bc:	bne	99cc <test_nested_buffer_first+0x70>
    99c0:	mov	r1, #36	; 0x24
    99c4:	mov	r0, r4
    99c8:	bl	0 <flatcc_builder_start_table>
    99cc:	movw	r1, #0
    99d0:	movt	r1, #0
    99d4:	mov	r0, r4
    99d8:	bl	0 <flatcc_builder_create_string_str>
    99dc:	subs	r5, r0, #0
    99e0:	beq	99f8 <test_nested_buffer_first+0x9c>
    99e4:	mov	r1, #3
    99e8:	mov	r0, r4
    99ec:	bl	0 <flatcc_builder_table_add_offset>
    99f0:	cmp	r0, #0
    99f4:	strne	r5, [r0]
    99f8:	mov	r2, #1
    99fc:	ldr	r1, [pc, #672]	; 9ca4 <test_nested_buffer_first+0x348>
    9a00:	mov	r0, r4
    9a04:	bl	0 <flatcc_builder_check_required>
    9a08:	cmp	r0, #0
    9a0c:	beq	9c84 <test_nested_buffer_first+0x328>
    9a10:	mov	r0, r4
    9a14:	bl	0 <flatcc_builder_end_table>
    9a18:	mov	r1, r0
    9a1c:	mov	r0, r4
    9a20:	bl	0 <flatcc_builder_end_buffer>
    9a24:	subs	r5, r0, #0
    9a28:	beq	9a40 <test_nested_buffer_first+0xe4>
    9a2c:	mov	r1, #13
    9a30:	mov	r0, r4
    9a34:	bl	0 <flatcc_builder_table_add_offset>
    9a38:	cmp	r0, #0
    9a3c:	strne	r5, [r0]
    9a40:	mov	r3, #2
    9a44:	mov	r0, r4
    9a48:	mov	r1, r3
    9a4c:	mov	r2, r3
    9a50:	bl	0 <flatcc_builder_table_add>
    9a54:	cmp	r0, #0
    9a58:	movw	r1, #0
    9a5c:	movt	r1, #0
    9a60:	movne	r3, #10
    9a64:	strhne	r3, [r0]
    9a68:	mov	r0, r4
    9a6c:	bl	0 <flatcc_builder_create_string_str>
    9a70:	subs	r5, r0, #0
    9a74:	beq	9a8c <test_nested_buffer_first+0x130>
    9a78:	mov	r1, #3
    9a7c:	mov	r0, r4
    9a80:	bl	0 <flatcc_builder_table_add_offset>
    9a84:	cmp	r0, #0
    9a88:	strne	r5, [r0]
    9a8c:	mov	r2, #1
    9a90:	ldr	r1, [pc, #524]	; 9ca4 <test_nested_buffer_first+0x348>
    9a94:	mov	r0, r4
    9a98:	bl	0 <flatcc_builder_check_required>
    9a9c:	cmp	r0, #0
    9aa0:	beq	9c84 <test_nested_buffer_first+0x328>
    9aa4:	mov	r0, r4
    9aa8:	bl	0 <flatcc_builder_end_table>
    9aac:	mov	r1, r0
    9ab0:	mov	r0, r4
    9ab4:	bl	0 <flatcc_builder_end_buffer>
    9ab8:	mov	r0, r4
    9abc:	add	r1, sp, #4
    9ac0:	bl	0 <flatcc_builder_get_direct_buffer>
    9ac4:	movw	r3, #0
    9ac8:	movt	r3, #0
    9acc:	ldr	r2, [sp, #4]
    9ad0:	mov	r4, r0
    9ad4:	mov	r1, r0
    9ad8:	movw	r0, #0
    9adc:	movt	r0, #0
    9ae0:	ldr	r3, [r3]
    9ae4:	bl	28 <hexdump>
    9ae8:	cmp	r4, #0
    9aec:	beq	9c28 <test_nested_buffer_first+0x2cc>
    9af0:	ldr	r2, [r4, #4]
    9af4:	movw	r3, #20301	; 0x4f4d
    9af8:	movt	r3, #21326	; 0x534e
    9afc:	cmp	r2, r3
    9b00:	bne	9c28 <test_nested_buffer_first+0x2cc>
    9b04:	ldr	r3, [r4]
    9b08:	adds	r5, r4, r3
    9b0c:	beq	9c28 <test_nested_buffer_first+0x2cc>
    9b10:	ldr	r4, [r4, r3]
    9b14:	sub	r4, r5, r4
    9b18:	ldrh	r6, [r4]
    9b1c:	cmp	r6, #11
    9b20:	bls	9c68 <test_nested_buffer_first+0x30c>
    9b24:	ldrh	r0, [r4, #10]
    9b28:	cmp	r0, #0
    9b2c:	beq	9c68 <test_nested_buffer_first+0x30c>
    9b30:	ldr	r3, [r5, r0]
    9b34:	add	r0, r5, r0
    9b38:	movw	r1, #0
    9b3c:	movt	r1, #0
    9b40:	add	r3, r3, #4
    9b44:	add	r0, r0, r3
    9b48:	bl	0 <strcmp>
    9b4c:	cmp	r0, #0
    9b50:	bne	9c40 <test_nested_buffer_first+0x2e4>
    9b54:	cmp	r6, #31
    9b58:	ldrh	r1, [r4, #8]
    9b5c:	bls	9c14 <test_nested_buffer_first+0x2b8>
    9b60:	ldrh	r3, [r4, #30]
    9b64:	cmp	r3, #0
    9b68:	beq	9c14 <test_nested_buffer_first+0x2b8>
    9b6c:	ldr	r0, [r5, r3]
    9b70:	add	r3, r5, r3
    9b74:	add	r0, r0, #4
    9b78:	adds	r2, r3, r0
    9b7c:	beq	9c14 <test_nested_buffer_first+0x2b8>
    9b80:	ldr	lr, [r2, #4]
    9b84:	movw	ip, #20301	; 0x4f4d
    9b88:	movt	ip, #21326	; 0x534e
    9b8c:	cmp	lr, ip
    9b90:	bne	9c14 <test_nested_buffer_first+0x2b8>
    9b94:	ldr	r3, [r3, r0]
    9b98:	cmp	r1, #0
    9b9c:	add	r0, r2, r3
    9ba0:	beq	9c2c <test_nested_buffer_first+0x2d0>
    9ba4:	ldrsh	r1, [r5, r1]
    9ba8:	cmp	r1, #10
    9bac:	bne	9c2c <test_nested_buffer_first+0x2d0>
    9bb0:	cmp	r0, #0
    9bb4:	beq	9c28 <test_nested_buffer_first+0x2cc>
    9bb8:	ldr	r3, [r2, r3]
    9bbc:	sub	r3, r0, r3
    9bc0:	ldrh	r2, [r3]
    9bc4:	cmp	r2, #11
    9bc8:	bls	9c68 <test_nested_buffer_first+0x30c>
    9bcc:	ldrh	r2, [r3, #10]
    9bd0:	cmp	r2, #0
    9bd4:	beq	9c68 <test_nested_buffer_first+0x30c>
    9bd8:	ldr	r3, [r0, r2]
    9bdc:	add	r0, r0, r2
    9be0:	add	r3, r3, #4
    9be4:	adds	r0, r0, r3
    9be8:	beq	9c88 <test_nested_buffer_first+0x32c>
    9bec:	movw	r1, #0
    9bf0:	movt	r1, #0
    9bf4:	bl	0 <strcmp>
    9bf8:	cmp	r0, #0
    9bfc:	bne	9c54 <test_nested_buffer_first+0x2f8>
    9c00:	add	sp, sp, #8
    9c04:	ldrd	r4, [sp]
    9c08:	ldr	r6, [sp, #8]
    9c0c:	add	sp, sp, #12
    9c10:	pop	{pc}		; (ldr pc, [sp], #4)
    9c14:	cmp	r1, #0
    9c18:	beq	9c2c <test_nested_buffer_first+0x2d0>
    9c1c:	ldrsh	r3, [r5, r1]
    9c20:	cmp	r3, #10
    9c24:	bne	9c2c <test_nested_buffer_first+0x2d0>
    9c28:	bl	4ec <MyGame_Example_Monster_name.part.26>
    9c2c:	movw	r0, #0
    9c30:	movt	r0, #0
    9c34:	bl	0 <puts>
    9c38:	mvn	r0, #0
    9c3c:	b	9c00 <test_nested_buffer_first+0x2a4>
    9c40:	movw	r0, #0
    9c44:	movt	r0, #0
    9c48:	bl	0 <puts>
    9c4c:	mvn	r0, #0
    9c50:	b	9c00 <test_nested_buffer_first+0x2a4>
    9c54:	movw	r0, #0
    9c58:	movt	r0, #0
    9c5c:	bl	0 <puts>
    9c60:	mvn	r0, #0
    9c64:	b	9c00 <test_nested_buffer_first+0x2a4>
    9c68:	movw	r1, #0
    9c6c:	movt	r1, #0
    9c70:	ldr	r3, [pc, #48]	; 9ca8 <test_nested_buffer_first+0x34c>
    9c74:	movw	r0, #0
    9c78:	movt	r0, #0
    9c7c:	movw	r2, #699	; 0x2bb
    9c80:	bl	0 <__assert_fail>
    9c84:	bl	7dc <MyGame_Example_Monster_end.part.49>
    9c88:	movw	r1, #0
    9c8c:	movt	r1, #0
    9c90:	ldr	r3, [pc, #20]	; 9cac <test_nested_buffer_first+0x350>
    9c94:	movw	r0, #0
    9c98:	movt	r0, #0
    9c9c:	movw	r2, #2241	; 0x8c1
    9ca0:	bl	0 <__assert_fail>
    9ca4:	.word	0x00000404
    9ca8:	.word	0x0000020c
    9cac:	.word	0x000006e4

00009cb0 <test_nested_buffer_using_nest>:
    9cb0:	strd	r4, [sp, #-16]!
    9cb4:	mov	r4, r0
    9cb8:	str	r6, [sp, #8]
    9cbc:	str	lr, [sp, #12]
    9cc0:	sub	sp, sp, #1040	; 0x410
    9cc4:	bl	0 <flatcc_builder_reset>
    9cc8:	mov	r3, #0
    9ccc:	mov	r0, r4
    9cd0:	mov	r2, r3
    9cd4:	movw	r1, #0
    9cd8:	movt	r1, #0
    9cdc:	bl	0 <flatcc_builder_start_buffer>
    9ce0:	cmp	r0, #0
    9ce4:	bne	9cf4 <test_nested_buffer_using_nest+0x44>
    9ce8:	mov	r1, #36	; 0x24
    9cec:	mov	r0, r4
    9cf0:	bl	0 <flatcc_builder_start_table>
    9cf4:	movw	r1, #0
    9cf8:	movt	r1, #0
    9cfc:	mov	r0, r4
    9d00:	bl	0 <flatcc_builder_create_string_str>
    9d04:	subs	r5, r0, #0
    9d08:	beq	9d20 <test_nested_buffer_using_nest+0x70>
    9d0c:	mov	r1, #3
    9d10:	mov	r0, r4
    9d14:	bl	0 <flatcc_builder_table_add_offset>
    9d18:	cmp	r0, #0
    9d1c:	strne	r5, [r0]
    9d20:	mov	r3, #2
    9d24:	mov	r1, #1
    9d28:	mov	r2, r3
    9d2c:	mov	r0, r4
    9d30:	bl	0 <flatcc_builder_table_add>
    9d34:	cmp	r0, #0
    9d38:	mov	r2, #1
    9d3c:	ldr	r1, [pc, #864]	; a0a4 <test_nested_buffer_using_nest+0x3f4>
    9d40:	movne	r3, #42	; 0x2a
    9d44:	strhne	r3, [r0]
    9d48:	mov	r0, r4
    9d4c:	bl	0 <flatcc_builder_check_required>
    9d50:	cmp	r0, #0
    9d54:	beq	a084 <test_nested_buffer_using_nest+0x3d4>
    9d58:	mov	r0, r4
    9d5c:	bl	0 <flatcc_builder_end_table>
    9d60:	mov	r1, r0
    9d64:	mov	r0, r4
    9d68:	bl	0 <flatcc_builder_end_buffer>
    9d6c:	mov	r0, r4
    9d70:	bl	0 <flatcc_builder_get_buffer_size>
    9d74:	mov	r5, r0
    9d78:	add	r1, sp, #16
    9d7c:	mov	r2, #1024	; 0x400
    9d80:	mov	r0, r4
    9d84:	bl	0 <flatcc_builder_copy_buffer>
    9d88:	cmp	r0, #0
    9d8c:	beq	a054 <test_nested_buffer_using_nest+0x3a4>
    9d90:	mov	r0, r4
    9d94:	bl	0 <flatcc_builder_reset>
    9d98:	mov	r3, #0
    9d9c:	movw	r1, #0
    9da0:	movt	r1, #0
    9da4:	mov	r2, r3
    9da8:	mov	r0, r4
    9dac:	bl	0 <flatcc_builder_start_buffer>
    9db0:	cmp	r0, #0
    9db4:	bne	9dc4 <test_nested_buffer_using_nest+0x114>
    9db8:	mov	r1, #36	; 0x24
    9dbc:	mov	r0, r4
    9dc0:	bl	0 <flatcc_builder_start_table>
    9dc4:	mvn	ip, #0
    9dc8:	mov	r1, #8
    9dcc:	mov	r2, r5
    9dd0:	mov	r3, #1
    9dd4:	mov	r0, r4
    9dd8:	stm	sp, {r1, ip}
    9ddc:	add	r1, sp, #16
    9de0:	bl	0 <flatcc_builder_create_vector>
    9de4:	subs	r5, r0, #0
    9de8:	beq	9e00 <test_nested_buffer_using_nest+0x150>
    9dec:	mov	r1, #13
    9df0:	mov	r0, r4
    9df4:	bl	0 <flatcc_builder_table_add_offset>
    9df8:	cmp	r0, #0
    9dfc:	strne	r5, [r0]
    9e00:	mov	r3, #2
    9e04:	mov	r0, r4
    9e08:	mov	r1, r3
    9e0c:	mov	r2, r3
    9e10:	bl	0 <flatcc_builder_table_add>
    9e14:	cmp	r0, #0
    9e18:	movw	r1, #0
    9e1c:	movt	r1, #0
    9e20:	movne	r3, #10
    9e24:	strhne	r3, [r0]
    9e28:	mov	r0, r4
    9e2c:	bl	0 <flatcc_builder_create_string_str>
    9e30:	subs	r5, r0, #0
    9e34:	beq	9e4c <test_nested_buffer_using_nest+0x19c>
    9e38:	mov	r1, #3
    9e3c:	mov	r0, r4
    9e40:	bl	0 <flatcc_builder_table_add_offset>
    9e44:	cmp	r0, #0
    9e48:	strne	r5, [r0]
    9e4c:	mov	r2, #1
    9e50:	ldr	r1, [pc, #588]	; a0a4 <test_nested_buffer_using_nest+0x3f4>
    9e54:	mov	r0, r4
    9e58:	bl	0 <flatcc_builder_check_required>
    9e5c:	cmp	r0, #0
    9e60:	beq	a084 <test_nested_buffer_using_nest+0x3d4>
    9e64:	mov	r0, r4
    9e68:	bl	0 <flatcc_builder_end_table>
    9e6c:	mov	r1, r0
    9e70:	mov	r0, r4
    9e74:	bl	0 <flatcc_builder_end_buffer>
    9e78:	add	r1, sp, #12
    9e7c:	mov	r0, r4
    9e80:	bl	0 <flatcc_builder_get_direct_buffer>
    9e84:	movw	r3, #0
    9e88:	movt	r3, #0
    9e8c:	ldr	r2, [sp, #12]
    9e90:	mov	r4, r0
    9e94:	mov	r1, r0
    9e98:	movw	r0, #0
    9e9c:	movt	r0, #0
    9ea0:	ldr	r3, [r3]
    9ea4:	bl	28 <hexdump>
    9ea8:	cmp	r4, #0
    9eac:	beq	a000 <test_nested_buffer_using_nest+0x350>
    9eb0:	ldr	r2, [r4, #4]
    9eb4:	movw	r3, #20301	; 0x4f4d
    9eb8:	movt	r3, #21326	; 0x534e
    9ebc:	cmp	r2, r3
    9ec0:	bne	a000 <test_nested_buffer_using_nest+0x350>
    9ec4:	ldr	r3, [r4]
    9ec8:	adds	r5, r4, r3
    9ecc:	beq	a000 <test_nested_buffer_using_nest+0x350>
    9ed0:	ldr	r4, [r4, r3]
    9ed4:	sub	r4, r5, r4
    9ed8:	ldrh	r6, [r4]
    9edc:	cmp	r6, #11
    9ee0:	bls	a068 <test_nested_buffer_using_nest+0x3b8>
    9ee4:	ldrh	r0, [r4, #10]
    9ee8:	cmp	r0, #0
    9eec:	beq	a068 <test_nested_buffer_using_nest+0x3b8>
    9ef0:	ldr	r3, [r5, r0]
    9ef4:	add	r0, r5, r0
    9ef8:	movw	r1, #0
    9efc:	movt	r1, #0
    9f00:	add	r3, r3, #4
    9f04:	add	r0, r0, r3
    9f08:	bl	0 <strcmp>
    9f0c:	cmp	r0, #0
    9f10:	bne	a018 <test_nested_buffer_using_nest+0x368>
    9f14:	cmp	r6, #31
    9f18:	ldrh	r1, [r4, #8]
    9f1c:	bls	9fec <test_nested_buffer_using_nest+0x33c>
    9f20:	ldrh	r3, [r4, #30]
    9f24:	cmp	r3, #0
    9f28:	beq	9fec <test_nested_buffer_using_nest+0x33c>
    9f2c:	ldr	r0, [r5, r3]
    9f30:	add	r3, r5, r3
    9f34:	add	r0, r0, #4
    9f38:	adds	r2, r3, r0
    9f3c:	beq	9fec <test_nested_buffer_using_nest+0x33c>
    9f40:	ldr	lr, [r2, #4]
    9f44:	movw	ip, #20301	; 0x4f4d
    9f48:	movt	ip, #21326	; 0x534e
    9f4c:	cmp	lr, ip
    9f50:	bne	9fec <test_nested_buffer_using_nest+0x33c>
    9f54:	ldr	r3, [r3, r0]
    9f58:	cmp	r1, #0
    9f5c:	add	r6, r2, r3
    9f60:	beq	a004 <test_nested_buffer_using_nest+0x354>
    9f64:	ldrsh	r1, [r5, r1]
    9f68:	cmp	r1, #10
    9f6c:	bne	a004 <test_nested_buffer_using_nest+0x354>
    9f70:	cmp	r6, #0
    9f74:	beq	a000 <test_nested_buffer_using_nest+0x350>
    9f78:	ldr	r4, [r2, r3]
    9f7c:	sub	r4, r6, r4
    9f80:	ldrh	r3, [r4]
    9f84:	cmp	r3, #11
    9f88:	bls	a068 <test_nested_buffer_using_nest+0x3b8>
    9f8c:	ldrh	r0, [r4, #10]
    9f90:	cmp	r0, #0
    9f94:	beq	a068 <test_nested_buffer_using_nest+0x3b8>
    9f98:	ldr	r3, [r6, r0]
    9f9c:	add	r0, r6, r0
    9fa0:	add	r3, r3, #4
    9fa4:	adds	r0, r0, r3
    9fa8:	beq	a088 <test_nested_buffer_using_nest+0x3d8>
    9fac:	movw	r1, #0
    9fb0:	movt	r1, #0
    9fb4:	bl	0 <strcmp>
    9fb8:	cmp	r0, #0
    9fbc:	bne	a02c <test_nested_buffer_using_nest+0x37c>
    9fc0:	ldrh	r3, [r4, #6]
    9fc4:	cmp	r3, #0
    9fc8:	beq	a040 <test_nested_buffer_using_nest+0x390>
    9fcc:	ldrsh	r3, [r6, r3]
    9fd0:	cmp	r3, #42	; 0x2a
    9fd4:	bne	a040 <test_nested_buffer_using_nest+0x390>
    9fd8:	add	sp, sp, #1040	; 0x410
    9fdc:	ldrd	r4, [sp]
    9fe0:	ldr	r6, [sp, #8]
    9fe4:	add	sp, sp, #12
    9fe8:	pop	{pc}		; (ldr pc, [sp], #4)
    9fec:	cmp	r1, #0
    9ff0:	beq	a004 <test_nested_buffer_using_nest+0x354>
    9ff4:	ldrsh	r3, [r5, r1]
    9ff8:	cmp	r3, #10
    9ffc:	bne	a004 <test_nested_buffer_using_nest+0x354>
    a000:	bl	4ec <MyGame_Example_Monster_name.part.26>
    a004:	movw	r0, #0
    a008:	movt	r0, #0
    a00c:	bl	0 <puts>
    a010:	mvn	r0, #0
    a014:	b	9fd8 <test_nested_buffer_using_nest+0x328>
    a018:	movw	r0, #0
    a01c:	movt	r0, #0
    a020:	bl	0 <puts>
    a024:	mvn	r0, #0
    a028:	b	9fd8 <test_nested_buffer_using_nest+0x328>
    a02c:	movw	r0, #0
    a030:	movt	r0, #0
    a034:	bl	0 <puts>
    a038:	mvn	r0, #0
    a03c:	b	9fd8 <test_nested_buffer_using_nest+0x328>
    a040:	movw	r0, #0
    a044:	movt	r0, #0
    a048:	bl	0 <puts>
    a04c:	mvn	r0, #0
    a050:	b	9fd8 <test_nested_buffer_using_nest+0x328>
    a054:	movw	r0, #0
    a058:	movt	r0, #0
    a05c:	bl	0 <puts>
    a060:	mvn	r0, #0
    a064:	b	9fd8 <test_nested_buffer_using_nest+0x328>
    a068:	movw	r1, #0
    a06c:	movt	r1, #0
    a070:	ldr	r3, [pc, #48]	; a0a8 <test_nested_buffer_using_nest+0x3f8>
    a074:	movw	r0, #0
    a078:	movt	r0, #0
    a07c:	movw	r2, #699	; 0x2bb
    a080:	bl	0 <__assert_fail>
    a084:	bl	7dc <MyGame_Example_Monster_end.part.49>
    a088:	movw	r1, #0
    a08c:	movt	r1, #0
    a090:	ldr	r3, [pc, #20]	; a0ac <test_nested_buffer_using_nest+0x3fc>
    a094:	movw	r0, #0
    a098:	movt	r0, #0
    a09c:	movw	r2, #2298	; 0x8fa
    a0a0:	bl	0 <__assert_fail>
    a0a4:	.word	0x00000404
    a0a8:	.word	0x0000020c
    a0ac:	.word	0x00000700

0000a0b0 <verify_include>:
    a0b0:	mov	r0, #0
    a0b4:	bx	lr

0000a0b8 <test_struct_buffer>:
    a0b8:	strd	r4, [sp, #-20]!	; 0xffffffec
    a0bc:	mov	r4, r0
    a0c0:	strd	r6, [sp, #8]
    a0c4:	str	lr, [sp, #16]
    a0c8:	sub	sp, sp, #116	; 0x74
    a0cc:	bl	0 <flatcc_builder_reset>
    a0d0:	mov	r0, r4
    a0d4:	mov	r2, #16
    a0d8:	mov	r1, #32
    a0dc:	bl	0 <flatcc_builder_start_struct>
    a0e0:	subs	r3, r0, #0
    a0e4:	beq	a13c <test_struct_buffer+0x84>
    a0e8:	mov	r2, #8
    a0ec:	mov	ip, #1065353216	; 0x3f800000
    a0f0:	movw	lr, #2730	; 0xaaa
    a0f4:	mov	r0, #1073741824	; 0x40000000
    a0f8:	mvn	r1, #16
    a0fc:	movw	r6, #52429	; 0xcccd
    a100:	movt	r6, #52428	; 0xcccc
    a104:	movw	r7, #52428	; 0xcccc
    a108:	movt	r7, #16400	; 0x4010
    a10c:	str	ip, [r3]
    a110:	strb	r2, [r3, #24]
    a114:	mov	r2, #0
    a118:	movt	r2, #16448	; 0x4040
    a11c:	str	r0, [r3, #4]
    a120:	mov	r0, r4
    a124:	str	r2, [r3, #8]
    a128:	strd	r6, [r3, #16]
    a12c:	strh	lr, [r3, #26]
    a130:	strb	r1, [r3, #28]
    a134:	bl	0 <flatcc_builder_end_struct>
    a138:	mov	r3, r0
    a13c:	mov	r0, #0
    a140:	mov	r1, #16
    a144:	mov	r2, r0
    a148:	str	r1, [sp]
    a14c:	movw	r1, #0
    a150:	movt	r1, #0
    a154:	str	r0, [sp, #4]
    a158:	mov	r0, r4
    a15c:	bl	0 <flatcc_builder_create_buffer>
    a160:	mov	r0, r4
    a164:	bl	0 <flatcc_builder_get_buffer_size>
    a168:	cmp	r0, #48	; 0x30
    a16c:	bne	a2cc <test_struct_buffer+0x214>
    a170:	mov	r1, r0
    a174:	movw	r0, #0
    a178:	movt	r0, #0
    a17c:	bl	0 <printf>
    a180:	mov	r0, r4
    a184:	bl	0 <flatcc_builder_get_emit_context>
    a188:	ldr	r5, [r0, #24]
    a18c:	cmp	r5, #48	; 0x30
    a190:	bne	a2b0 <test_struct_buffer+0x1f8>
    a194:	mov	r0, r4
    a198:	add	r1, sp, #12
    a19c:	mov	r2, #100	; 0x64
    a1a0:	bl	0 <flatcc_builder_copy_buffer>
    a1a4:	cmp	r0, #0
    a1a8:	beq	a29c <test_struct_buffer+0x1e4>
    a1ac:	movw	r3, #0
    a1b0:	movt	r3, #0
    a1b4:	mov	r2, r5
    a1b8:	movw	r0, #0
    a1bc:	movt	r0, #0
    a1c0:	add	r1, sp, #12
    a1c4:	ldr	r3, [r3]
    a1c8:	bl	28 <hexdump>
    a1cc:	ldr	r2, [sp, #16]
    a1d0:	movw	r3, #20301	; 0x4f4d
    a1d4:	movt	r3, #21326	; 0x534e
    a1d8:	cmp	r2, r3
    a1dc:	beq	a204 <test_struct_buffer+0x14c>
    a1e0:	movw	r0, #0
    a1e4:	movt	r0, #0
    a1e8:	bl	0 <puts>
    a1ec:	mvn	r0, #0
    a1f0:	add	sp, sp, #116	; 0x74
    a1f4:	ldrd	r4, [sp]
    a1f8:	ldrd	r6, [sp, #8]
    a1fc:	add	sp, sp, #16
    a200:	pop	{pc}		; (ldr pc, [sp], #4)
    a204:	ldr	r3, [sp, #12]
    a208:	add	r2, sp, #12
    a20c:	vldr	s15, [pc, #220]	; a2f0 <test_struct_buffer+0x238>
    a210:	add	r3, r2, r3
    a214:	vldr	s14, [r3]
    a218:	vcmp.f32	s14, s15
    a21c:	vmrs	APSR_nzcv, fpscr
    a220:	bne	a288 <test_struct_buffer+0x1d0>
    a224:	vldr	s15, [pc, #200]	; a2f4 <test_struct_buffer+0x23c>
    a228:	vldr	s14, [r3, #4]
    a22c:	vcmp.f32	s14, s15
    a230:	vmrs	APSR_nzcv, fpscr
    a234:	bne	a288 <test_struct_buffer+0x1d0>
    a238:	vldr	s15, [pc, #184]	; a2f8 <test_struct_buffer+0x240>
    a23c:	vldr	s14, [r3, #8]
    a240:	vcmp.f32	s14, s15
    a244:	vmrs	APSR_nzcv, fpscr
    a248:	bne	a288 <test_struct_buffer+0x1d0>
    a24c:	vldr	d7, [pc, #148]	; a2e8 <test_struct_buffer+0x230>
    a250:	vldr	d6, [r3, #16]
    a254:	vcmp.f64	d6, d7
    a258:	vmrs	APSR_nzcv, fpscr
    a25c:	bne	a288 <test_struct_buffer+0x1d0>
    a260:	ldr	r2, [r3, #24]
    a264:	mov	r1, #8
    a268:	movt	r1, #2730	; 0xaaa
    a26c:	bic	r2, r2, #65280	; 0xff00
    a270:	cmp	r2, r1
    a274:	bne	a288 <test_struct_buffer+0x1d0>
    a278:	ldrsb	r3, [r3, #28]
    a27c:	cmn	r3, #17
    a280:	moveq	r0, #0
    a284:	beq	a1f0 <test_struct_buffer+0x138>
    a288:	movw	r0, #0
    a28c:	movt	r0, #0
    a290:	bl	0 <puts>
    a294:	mvn	r0, #0
    a298:	b	a1f0 <test_struct_buffer+0x138>
    a29c:	movw	r0, #0
    a2a0:	movt	r0, #0
    a2a4:	bl	0 <puts>
    a2a8:	mvn	r0, #0
    a2ac:	b	a1f0 <test_struct_buffer+0x138>
    a2b0:	movw	r1, #0
    a2b4:	movt	r1, #0
    a2b8:	ldr	r3, [pc, #60]	; a2fc <test_struct_buffer+0x244>
    a2bc:	movw	r0, #0
    a2c0:	movt	r0, #0
    a2c4:	movw	r2, #2341	; 0x925
    a2c8:	bl	0 <__assert_fail>
    a2cc:	movw	r1, #0
    a2d0:	movt	r1, #0
    a2d4:	ldr	r3, [pc, #32]	; a2fc <test_struct_buffer+0x244>
    a2d8:	movw	r0, #0
    a2dc:	movt	r0, #0
    a2e0:	movw	r2, #2339	; 0x923
    a2e4:	bl	0 <__assert_fail>
    a2e8:	.word	0xcccccccd
    a2ec:	.word	0x4010cccc
    a2f0:	.word	0x3f800000
    a2f4:	.word	0x40000000
    a2f8:	.word	0x40400000
    a2fc:	.word	0x00000720

0000a300 <test_typed_struct_buffer>:
    a300:	strd	r4, [sp, #-20]!	; 0xffffffec
    a304:	mov	r4, r0
    a308:	strd	r6, [sp, #8]
    a30c:	str	lr, [sp, #16]
    a310:	sub	sp, sp, #116	; 0x74
    a314:	bl	0 <flatcc_builder_reset>
    a318:	mov	r0, r4
    a31c:	mov	r2, #16
    a320:	mov	r1, #32
    a324:	bl	0 <flatcc_builder_start_struct>
    a328:	subs	r3, r0, #0
    a32c:	beq	a384 <test_typed_struct_buffer+0x84>
    a330:	mov	r2, #8
    a334:	mov	ip, #1065353216	; 0x3f800000
    a338:	movw	lr, #2730	; 0xaaa
    a33c:	mov	r0, #1073741824	; 0x40000000
    a340:	mvn	r1, #16
    a344:	movw	r6, #52429	; 0xcccd
    a348:	movt	r6, #52428	; 0xcccc
    a34c:	movw	r7, #52428	; 0xcccc
    a350:	movt	r7, #16400	; 0x4010
    a354:	str	ip, [r3]
    a358:	strb	r2, [r3, #24]
    a35c:	mov	r2, #0
    a360:	movt	r2, #16448	; 0x4040
    a364:	str	r0, [r3, #4]
    a368:	mov	r0, r4
    a36c:	str	r2, [r3, #8]
    a370:	strd	r6, [r3, #16]
    a374:	strh	lr, [r3, #26]
    a378:	strb	r1, [r3, #28]
    a37c:	bl	0 <flatcc_builder_end_struct>
    a380:	mov	r3, r0
    a384:	mov	r0, #0
    a388:	mov	r7, #16
    a38c:	mov	r2, r0
    a390:	movw	r1, #0
    a394:	movt	r1, #0
    a398:	str	r7, [sp]
    a39c:	str	r0, [sp, #4]
    a3a0:	mov	r0, r4
    a3a4:	bl	0 <flatcc_builder_create_buffer>
    a3a8:	mov	r0, r4
    a3ac:	bl	0 <flatcc_builder_get_buffer_size>
    a3b0:	cmp	r0, #48	; 0x30
    a3b4:	bne	a5b8 <test_typed_struct_buffer+0x2b8>
    a3b8:	mov	r1, r0
    a3bc:	movw	r0, #0
    a3c0:	movt	r0, #0
    a3c4:	bl	0 <printf>
    a3c8:	mov	r0, r4
    a3cc:	bl	0 <flatcc_builder_get_emit_context>
    a3d0:	ldr	r6, [r0, #24]
    a3d4:	cmp	r6, #48	; 0x30
    a3d8:	bne	a59c <test_typed_struct_buffer+0x29c>
    a3dc:	add	r5, sp, #12
    a3e0:	mov	r0, r4
    a3e4:	mov	r1, r5
    a3e8:	mov	r2, #100	; 0x64
    a3ec:	bl	0 <flatcc_builder_copy_buffer>
    a3f0:	cmp	r0, #0
    a3f4:	beq	a54c <test_typed_struct_buffer+0x24c>
    a3f8:	movw	r3, #0
    a3fc:	movt	r3, #0
    a400:	movw	r0, #0
    a404:	movt	r0, #0
    a408:	ldr	r3, [r3]
    a40c:	mov	r2, r6
    a410:	mov	r1, r5
    a414:	bl	28 <hexdump>
    a418:	ldr	r4, [sp, #16]
    a41c:	movw	r3, #16082	; 0x3ed2
    a420:	movt	r3, #43253	; 0xa8f5
    a424:	cmp	r4, r3
    a428:	beq	a450 <test_typed_struct_buffer+0x150>
    a42c:	movw	r0, #0
    a430:	movt	r0, #0
    a434:	bl	0 <puts>
    a438:	mvn	r0, #0
    a43c:	add	sp, sp, #116	; 0x74
    a440:	ldrd	r4, [sp]
    a444:	ldrd	r6, [sp, #8]
    a448:	add	sp, sp, #16
    a44c:	pop	{pc}		; (ldr pc, [sp], #4)
    a450:	ldr	r3, [sp, #12]
    a454:	cmn	r5, r3
    a458:	beq	a574 <test_typed_struct_buffer+0x274>
    a45c:	mov	r3, #32
    a460:	mov	r2, r4
    a464:	str	r7, [sp]
    a468:	mov	r1, r6
    a46c:	mov	r0, r5
    a470:	bl	0 <flatcc_verify_struct_as_typed_root>
    a474:	cmp	r0, #0
    a478:	bne	a560 <test_typed_struct_buffer+0x260>
    a47c:	ldr	r2, [sp, #16]
    a480:	cmp	r2, r4
    a484:	beq	a49c <test_typed_struct_buffer+0x19c>
    a488:	movw	r0, #0
    a48c:	movt	r0, #0
    a490:	bl	0 <puts>
    a494:	mvn	r0, #0
    a498:	b	a43c <test_typed_struct_buffer+0x13c>
    a49c:	ldr	r4, [sp, #12]
    a4a0:	adds	r4, r5, r4
    a4a4:	beq	a488 <test_typed_struct_buffer+0x188>
    a4a8:	mov	r1, r6
    a4ac:	mov	r0, r5
    a4b0:	str	r7, [sp]
    a4b4:	mov	r3, #32
    a4b8:	bl	0 <flatcc_verify_struct_as_typed_root>
    a4bc:	cmp	r0, #0
    a4c0:	bne	a588 <test_typed_struct_buffer+0x288>
    a4c4:	vldr	s15, [pc, #276]	; a5e0 <test_typed_struct_buffer+0x2e0>
    a4c8:	vldr	s14, [r4]
    a4cc:	vcmp.f32	s14, s15
    a4d0:	vmrs	APSR_nzcv, fpscr
    a4d4:	bne	a538 <test_typed_struct_buffer+0x238>
    a4d8:	vldr	s15, [pc, #260]	; a5e4 <test_typed_struct_buffer+0x2e4>
    a4dc:	vldr	s14, [r4, #4]
    a4e0:	vcmp.f32	s14, s15
    a4e4:	vmrs	APSR_nzcv, fpscr
    a4e8:	bne	a538 <test_typed_struct_buffer+0x238>
    a4ec:	vldr	s15, [pc, #244]	; a5e8 <test_typed_struct_buffer+0x2e8>
    a4f0:	vldr	s14, [r4, #8]
    a4f4:	vcmp.f32	s14, s15
    a4f8:	vmrs	APSR_nzcv, fpscr
    a4fc:	bne	a538 <test_typed_struct_buffer+0x238>
    a500:	vldr	d7, [pc, #208]	; a5d8 <test_typed_struct_buffer+0x2d8>
    a504:	vldr	d6, [r4, #16]
    a508:	vcmp.f64	d6, d7
    a50c:	vmrs	APSR_nzcv, fpscr
    a510:	bne	a538 <test_typed_struct_buffer+0x238>
    a514:	ldr	r3, [r4, #24]
    a518:	mov	r2, #8
    a51c:	movt	r2, #2730	; 0xaaa
    a520:	bic	r3, r3, #65280	; 0xff00
    a524:	cmp	r3, r2
    a528:	bne	a538 <test_typed_struct_buffer+0x238>
    a52c:	ldrsb	r3, [r4, #28]
    a530:	cmn	r3, #17
    a534:	beq	a43c <test_typed_struct_buffer+0x13c>
    a538:	movw	r0, #0
    a53c:	movt	r0, #0
    a540:	bl	0 <puts>
    a544:	mvn	r0, #0
    a548:	b	a43c <test_typed_struct_buffer+0x13c>
    a54c:	movw	r0, #0
    a550:	movt	r0, #0
    a554:	bl	0 <puts>
    a558:	mvn	r0, #0
    a55c:	b	a43c <test_typed_struct_buffer+0x13c>
    a560:	movw	r0, #0
    a564:	movt	r0, #0
    a568:	bl	0 <puts>
    a56c:	mvn	r0, #0
    a570:	b	a43c <test_typed_struct_buffer+0x13c>
    a574:	movw	r0, #0
    a578:	movt	r0, #0
    a57c:	bl	0 <puts>
    a580:	mvn	r0, #0
    a584:	b	a43c <test_typed_struct_buffer+0x13c>
    a588:	movw	r0, #0
    a58c:	movt	r0, #0
    a590:	bl	0 <puts>
    a594:	mvn	r0, #0
    a598:	b	a43c <test_typed_struct_buffer+0x13c>
    a59c:	movw	r1, #0
    a5a0:	movt	r1, #0
    a5a4:	ldr	r3, [pc, #64]	; a5ec <test_typed_struct_buffer+0x2ec>
    a5a8:	movw	r0, #0
    a5ac:	movt	r0, #0
    a5b0:	movw	r2, #2390	; 0x956
    a5b4:	bl	0 <__assert_fail>
    a5b8:	movw	r1, #0
    a5bc:	movt	r1, #0
    a5c0:	ldr	r3, [pc, #36]	; a5ec <test_typed_struct_buffer+0x2ec>
    a5c4:	movw	r0, #0
    a5c8:	movt	r0, #0
    a5cc:	movw	r2, #2388	; 0x954
    a5d0:	bl	0 <__assert_fail>
    a5d4:	nop	{0}
    a5d8:	.word	0xcccccccd
    a5dc:	.word	0x4010cccc
    a5e0:	.word	0x3f800000
    a5e4:	.word	0x40000000
    a5e8:	.word	0x40400000
    a5ec:	.word	0x00000734

0000a5f0 <gen_monster_benchmark>:
    a5f0:	ldr	r3, [pc, #552]	; a820 <gen_monster_benchmark+0x230>
    a5f4:	strd	r4, [sp, #-20]!	; 0xffffffec
    a5f8:	mov	r4, r0
    a5fc:	strd	r6, [sp, #8]
    a600:	str	lr, [sp, #16]
    a604:	sub	sp, sp, #28
    a608:	ldrd	r6, [r3]
    a60c:	ldrh	r3, [r3, #8]
    a610:	strd	r6, [sp, #12]
    a614:	strh	r3, [sp, #20]
    a618:	bl	0 <flatcc_builder_reset>
    a61c:	mov	r3, #0
    a620:	mov	r0, r4
    a624:	mov	r2, r3
    a628:	movw	r1, #0
    a62c:	movt	r1, #0
    a630:	bl	0 <flatcc_builder_start_buffer>
    a634:	cmp	r0, #0
    a638:	bne	a648 <gen_monster_benchmark+0x58>
    a63c:	mov	r1, #36	; 0x24
    a640:	mov	r0, r4
    a644:	bl	0 <flatcc_builder_start_table>
    a648:	mov	r3, #2
    a64c:	mov	r0, r4
    a650:	mov	r2, r3
    a654:	mov	r1, r3
    a658:	bl	0 <flatcc_builder_table_add>
    a65c:	cmp	r0, #0
    a660:	mov	r2, #32
    a664:	movne	r3, #80	; 0x50
    a668:	mov	r1, #0
    a66c:	strhne	r3, [r0]
    a670:	mov	r3, #16
    a674:	mov	r0, r4
    a678:	bl	0 <flatcc_builder_table_add>
    a67c:	mov	r3, r0
    a680:	mov	lr, #1065353216	; 0x3f800000
    a684:	mov	ip, #1073741824	; 0x40000000
    a688:	movw	r2, #52429	; 0xcccd
    a68c:	movt	r2, #49228	; 0xc04c
    a690:	movw	r1, #0
    a694:	movt	r1, #0
    a698:	mov	r0, r4
    a69c:	str	lr, [r3]
    a6a0:	str	ip, [r3, #4]
    a6a4:	str	r2, [r3, #8]
    a6a8:	bl	0 <flatcc_builder_create_string_str>
    a6ac:	subs	r5, r0, #0
    a6b0:	beq	a6c8 <gen_monster_benchmark+0xd8>
    a6b4:	mov	r1, #3
    a6b8:	mov	r0, r4
    a6bc:	bl	0 <flatcc_builder_table_add_offset>
    a6c0:	cmp	r0, #0
    a6c4:	strne	r5, [r0]
    a6c8:	mov	r2, #1
    a6cc:	mvn	ip, #0
    a6d0:	mov	r3, r2
    a6d4:	add	r1, sp, #12
    a6d8:	mov	r0, r4
    a6dc:	stm	sp, {r2, ip}
    a6e0:	mov	r2, #10
    a6e4:	bl	0 <flatcc_builder_create_vector>
    a6e8:	subs	r5, r0, #0
    a6ec:	beq	a704 <gen_monster_benchmark+0x114>
    a6f0:	mov	r1, #5
    a6f4:	mov	r0, r4
    a6f8:	bl	0 <flatcc_builder_table_add_offset>
    a6fc:	cmp	r0, #0
    a700:	strne	r5, [r0]
    a704:	mvn	r3, #-1073741824	; 0xc0000000
    a708:	mov	r2, #2
    a70c:	mov	r1, #4
    a710:	mov	r0, r4
    a714:	bl	0 <flatcc_builder_start_vector>
    a718:	mov	r1, #1
    a71c:	mov	r0, r4
    a720:	bl	0 <flatcc_builder_extend_vector>
    a724:	mov	r3, r0
    a728:	mov	r2, #32
    a72c:	mov	r0, #16
    a730:	mov	r1, #2
    a734:	strh	r0, [r3]
    a738:	mov	r0, r4
    a73c:	strb	r2, [r3, #2]
    a740:	bl	0 <flatcc_builder_extend_vector>
    a744:	mov	r3, r0
    a748:	mov	r1, #48	; 0x30
    a74c:	mov	r0, #64	; 0x40
    a750:	mov	ip, #80	; 0x50
    a754:	mov	r2, #96	; 0x60
    a758:	strh	r1, [r3]
    a75c:	mov	r1, #1
    a760:	strb	r0, [r3, #2]
    a764:	mov	r0, r4
    a768:	strh	ip, [r3, #4]
    a76c:	strb	r2, [r3, #6]
    a770:	bl	0 <flatcc_builder_extend_vector>
    a774:	cmp	r0, #0
    a778:	beq	a78c <gen_monster_benchmark+0x19c>
    a77c:	mov	r2, #112	; 0x70
    a780:	mvn	r3, #127	; 0x7f
    a784:	strh	r2, [r0]
    a788:	strb	r3, [r0, #2]
    a78c:	mvn	r3, #110	; 0x6e
    a790:	movw	r2, #401	; 0x191
    a794:	mov	r1, #1
    a798:	mov	r0, r4
    a79c:	strh	r2, [sp, #8]
    a7a0:	strb	r3, [sp, #10]
    a7a4:	bl	0 <flatcc_builder_extend_vector>
    a7a8:	cmp	r0, #0
    a7ac:	ldrne	r3, [sp, #8]
    a7b0:	strne	r3, [r0]
    a7b4:	mov	r0, r4
    a7b8:	bl	0 <flatcc_builder_end_vector>
    a7bc:	subs	r5, r0, #0
    a7c0:	beq	a7d8 <gen_monster_benchmark+0x1e8>
    a7c4:	mov	r1, #9
    a7c8:	mov	r0, r4
    a7cc:	bl	0 <flatcc_builder_table_add_offset>
    a7d0:	cmp	r0, #0
    a7d4:	strne	r5, [r0]
    a7d8:	mov	r2, #1
    a7dc:	ldr	r1, [pc, #64]	; a824 <gen_monster_benchmark+0x234>
    a7e0:	mov	r0, r4
    a7e4:	bl	0 <flatcc_builder_check_required>
    a7e8:	cmp	r0, #0
    a7ec:	beq	a81c <gen_monster_benchmark+0x22c>
    a7f0:	mov	r0, r4
    a7f4:	bl	0 <flatcc_builder_end_table>
    a7f8:	mov	r1, r0
    a7fc:	mov	r0, r4
    a800:	bl	0 <flatcc_builder_end_buffer>
    a804:	mov	r0, #0
    a808:	add	sp, sp, #28
    a80c:	ldrd	r4, [sp]
    a810:	ldrd	r6, [sp, #8]
    a814:	add	sp, sp, #16
    a818:	pop	{pc}		; (ldr pc, [sp], #4)
    a81c:	bl	7dc <MyGame_Example_Monster_end.part.49>
    a820:	.word	0x000004f0
    a824:	.word	0x00000404

0000a828 <time_monster>:
    a828:	strd	r4, [sp, #-16]!
    a82c:	mov	r5, r0
    a830:	movw	r0, #0
    a834:	movt	r0, #0
    a838:	str	r6, [sp, #8]
    a83c:	movw	r4, #16960	; 0x4240
    a840:	movt	r4, #15
    a844:	str	lr, [sp, #12]
    a848:	vpush	{d8}
    a84c:	bl	0 <puts>
    a850:	bl	188 <elapsed_realtime>
    a854:	vmov.f64	d8, d0
    a858:	mov	r0, r5
    a85c:	bl	a5f0 <gen_monster_benchmark>
    a860:	subs	r4, r4, #1
    a864:	bne	a858 <time_monster+0x30>
    a868:	mov	r0, r5
    a86c:	bl	0 <flatcc_builder_get_buffer_size>
    a870:	mov	r5, r0
    a874:	bl	188 <elapsed_realtime>
    a878:	vmov.f64	d1, d0
    a87c:	mov	r1, r5
    a880:	vmov.f64	d0, d8
    a884:	movw	r0, #0
    a888:	movt	r0, #0
    a88c:	bl	1354 <show_benchmark.constprop.68>
    a890:	vpop	{d8}
    a894:	mov	r0, r4
    a898:	ldrd	r4, [sp]
    a89c:	ldr	r6, [sp, #8]
    a8a0:	add	sp, sp, #12
    a8a4:	pop	{pc}		; (ldr pc, [sp], #4)

0000a8a8 <gen_struct_buffer_benchmark>:
    a8a8:	strd	r4, [sp, #-20]!	; 0xffffffec
    a8ac:	mov	r4, r0
    a8b0:	strd	r6, [sp, #8]
    a8b4:	str	lr, [sp, #16]
    a8b8:	sub	sp, sp, #12
    a8bc:	bl	0 <flatcc_builder_reset>
    a8c0:	mov	r0, r4
    a8c4:	mov	r2, #16
    a8c8:	mov	r1, #32
    a8cc:	bl	0 <flatcc_builder_start_struct>
    a8d0:	subs	r3, r0, #0
    a8d4:	beq	a92c <gen_struct_buffer_benchmark+0x84>
    a8d8:	mov	r2, #8
    a8dc:	mov	ip, #1065353216	; 0x3f800000
    a8e0:	movw	lr, #2730	; 0xaaa
    a8e4:	mov	r0, #1073741824	; 0x40000000
    a8e8:	mvn	r1, #16
    a8ec:	movw	r6, #52429	; 0xcccd
    a8f0:	movt	r6, #52428	; 0xcccc
    a8f4:	movw	r7, #52428	; 0xcccc
    a8f8:	movt	r7, #16400	; 0x4010
    a8fc:	str	ip, [r3]
    a900:	strb	r2, [r3, #24]
    a904:	mov	r2, #0
    a908:	movt	r2, #16448	; 0x4040
    a90c:	str	r0, [r3, #4]
    a910:	mov	r0, r4
    a914:	str	r2, [r3, #8]
    a918:	strd	r6, [r3, #16]
    a91c:	strh	lr, [r3, #26]
    a920:	strb	r1, [r3, #28]
    a924:	bl	0 <flatcc_builder_end_struct>
    a928:	mov	r3, r0
    a92c:	mov	r5, #0
    a930:	mov	r0, #16
    a934:	mov	r2, r5
    a938:	movw	r1, #0
    a93c:	movt	r1, #0
    a940:	stm	sp, {r0, r5}
    a944:	mov	r0, r4
    a948:	bl	0 <flatcc_builder_create_buffer>
    a94c:	mov	r1, r5
    a950:	mov	r0, r4
    a954:	bl	0 <flatcc_builder_get_direct_buffer>
    a958:	cmp	r0, #0
    a95c:	beq	a9f0 <gen_struct_buffer_benchmark+0x148>
    a960:	ldr	r3, [r0]
    a964:	vldr	s15, [pc, #148]	; aa00 <gen_struct_buffer_benchmark+0x158>
    a968:	add	r0, r0, r3
    a96c:	vldr	s14, [r0]
    a970:	vcmp.f32	s14, s15
    a974:	vmrs	APSR_nzcv, fpscr
    a978:	bne	a9f0 <gen_struct_buffer_benchmark+0x148>
    a97c:	vldr	s15, [pc, #128]	; aa04 <gen_struct_buffer_benchmark+0x15c>
    a980:	vldr	s14, [r0, #4]
    a984:	vcmp.f32	s14, s15
    a988:	vmrs	APSR_nzcv, fpscr
    a98c:	bne	a9f0 <gen_struct_buffer_benchmark+0x148>
    a990:	vldr	s15, [pc, #112]	; aa08 <gen_struct_buffer_benchmark+0x160>
    a994:	vldr	s14, [r0, #8]
    a998:	vcmp.f32	s14, s15
    a99c:	vmrs	APSR_nzcv, fpscr
    a9a0:	bne	a9f0 <gen_struct_buffer_benchmark+0x148>
    a9a4:	vldr	d7, [pc, #76]	; a9f8 <gen_struct_buffer_benchmark+0x150>
    a9a8:	vldr	d6, [r0, #16]
    a9ac:	vcmp.f64	d6, d7
    a9b0:	vmrs	APSR_nzcv, fpscr
    a9b4:	bne	a9f0 <gen_struct_buffer_benchmark+0x148>
    a9b8:	ldr	r3, [r0, #24]
    a9bc:	mov	r2, #8
    a9c0:	movt	r2, #2730	; 0xaaa
    a9c4:	bic	r3, r3, #65280	; 0xff00
    a9c8:	cmp	r3, r2
    a9cc:	bne	a9f0 <gen_struct_buffer_benchmark+0x148>
    a9d0:	ldrb	r0, [r0, #28]
    a9d4:	subs	r0, r0, #239	; 0xef
    a9d8:	mvnne	r0, #0
    a9dc:	add	sp, sp, #12
    a9e0:	ldrd	r4, [sp]
    a9e4:	ldrd	r6, [sp, #8]
    a9e8:	add	sp, sp, #16
    a9ec:	pop	{pc}		; (ldr pc, [sp], #4)
    a9f0:	mvn	r0, #0
    a9f4:	b	a9dc <gen_struct_buffer_benchmark+0x134>
    a9f8:	.word	0xcccccccd
    a9fc:	.word	0x4010cccc
    aa00:	.word	0x3f800000
    aa04:	.word	0x40000000
    aa08:	.word	0x40400000

0000aa0c <time_struct_buffer>:
    aa0c:	strd	r4, [sp, #-16]!
    aa10:	movw	r4, #16960	; 0x4240
    aa14:	movt	r4, #15
    aa18:	str	r6, [sp, #8]
    aa1c:	mov	r6, r0
    aa20:	movw	r0, #0
    aa24:	movt	r0, #0
    aa28:	str	lr, [sp, #12]
    aa2c:	mov	r5, #0
    aa30:	vpush	{d8-d9}
    aa34:	bl	0 <puts>
    aa38:	bl	188 <elapsed_realtime>
    aa3c:	vmov.f64	d8, d0
    aa40:	mov	r0, r6
    aa44:	bl	a8a8 <gen_struct_buffer_benchmark>
    aa48:	subs	r4, r4, #1
    aa4c:	orr	r5, r5, r0
    aa50:	bne	aa40 <time_struct_buffer+0x34>
    aa54:	bl	188 <elapsed_realtime>
    aa58:	mov	r0, r6
    aa5c:	vmov.f64	d9, d0
    aa60:	bl	0 <flatcc_builder_get_buffer_size>
    aa64:	cmp	r5, #0
    aa68:	mov	r4, r0
    aa6c:	bne	aaa0 <time_struct_buffer+0x94>
    aa70:	mov	r1, r4
    aa74:	vmov.f64	d1, d9
    aa78:	vmov.f64	d0, d8
    aa7c:	movw	r0, #0
    aa80:	movt	r0, #0
    aa84:	bl	1354 <show_benchmark.constprop.68>
    aa88:	vpop	{d8-d9}
    aa8c:	mov	r0, r5
    aa90:	ldrd	r4, [sp]
    aa94:	ldr	r6, [sp, #8]
    aa98:	add	sp, sp, #12
    aa9c:	pop	{pc}		; (ldr pc, [sp], #4)
    aaa0:	movw	r0, #0
    aaa4:	movt	r0, #0
    aaa8:	bl	0 <puts>
    aaac:	b	aa70 <time_struct_buffer+0x64>

Disassembly of section .text.startup:

00000000 <main>:
   0:	str	r4, [sp, #-8]!
   4:	str	lr, [sp, #4]
   8:	sub	sp, sp, #232	; 0xe8
   c:	mov	r0, sp
  10:	bl	0 <flatcc_builder_init>
  14:	movw	r0, #0
  18:	movt	r0, #0
  1c:	bl	0 <puts>
  20:	mov	r0, sp
  24:	bl	269c <test_table_with_emptystruct>
  28:	cmp	r0, #0
  2c:	bne	18c <main+0x18c>
  30:	mov	r0, sp
  34:	bl	2180 <test_empty_monster>
  38:	cmp	r0, #0
  3c:	bne	18c <main+0x18c>
  40:	mov	r0, sp
  44:	bl	3ed4 <test_monster>
  48:	cmp	r0, #0
  4c:	bne	18c <main+0x18c>
  50:	mov	r0, sp
  54:	bl	3f84 <test_monster_with_size>
  58:	cmp	r0, #0
  5c:	bne	18c <main+0x18c>
  60:	mov	r0, sp
  64:	bl	4090 <test_string>
  68:	cmp	r0, #0
  6c:	bne	18c <main+0x18c>
  70:	mov	r0, sp
  74:	bl	a0b8 <test_struct_buffer>
  78:	cmp	r0, #0
  7c:	bne	18c <main+0x18c>
  80:	mov	r0, sp
  84:	bl	22f0 <test_typed_empty_monster>
  88:	cmp	r0, #0
  8c:	bne	18c <main+0x18c>
  90:	mov	r0, sp
  94:	bl	27b8 <test_typed_table_with_emptystruct>
  98:	cmp	r0, #0
  9c:	bne	18c <main+0x18c>
  a0:	mov	r0, sp
  a4:	bl	a300 <test_typed_struct_buffer>
  a8:	cmp	r0, #0
  ac:	bne	18c <main+0x18c>
  b0:	mov	r0, sp
  b4:	bl	7468 <test_clone_slice>
  b8:	cmp	r0, #0
  bc:	bne	18c <main+0x18c>
  c0:	mov	r0, sp
  c4:	bl	92c0 <test_add_set_defaults>
  c8:	cmp	r0, #0
  cc:	bne	18c <main+0x18c>
  d0:	mov	r0, sp
  d4:	bl	7f94 <test_create_add_field>
  d8:	cmp	r0, #0
  dc:	bne	18c <main+0x18c>
  e0:	mov	r0, sp
  e4:	bl	824c <test_union_vector>
  e8:	cmp	r0, #0
  ec:	bne	18c <main+0x18c>
  f0:	mov	r0, sp
  f4:	bl	6fb8 <test_basic_sort>
  f8:	cmp	r0, #0
  fc:	bne	18c <main+0x18c>
 100:	mov	r0, sp
 104:	bl	433c <test_sort_find>
 108:	cmp	r0, #0
 10c:	bne	18c <main+0x18c>
 110:	mov	r0, sp
 114:	bl	56e4 <test_scan>
 118:	cmp	r0, #0
 11c:	bne	18c <main+0x18c>
 120:	mov	r0, sp
 124:	bl	9608 <test_nested_buffer>
 128:	cmp	r0, #0
 12c:	bne	18c <main+0x18c>
 130:	mov	r0, sp
 134:	bl	995c <test_nested_buffer_first>
 138:	cmp	r0, #0
 13c:	bne	18c <main+0x18c>
 140:	mov	r0, sp
 144:	bl	9cb0 <test_nested_buffer_using_nest>
 148:	cmp	r0, #0
 14c:	bne	18c <main+0x18c>
 150:	mov	r0, sp
 154:	bl	1c28 <test_type_aliases>
 158:	cmp	r0, #0
 15c:	bne	18c <main+0x18c>
 160:	mov	r0, sp
 164:	bl	860c <test_mixed_type_union>
 168:	subs	r4, r0, #0
 16c:	bne	18c <main+0x18c>
 170:	mov	r0, sp
 174:	bl	0 <flatcc_builder_clear>
 178:	mov	r0, r4
 17c:	add	sp, sp, #232	; 0xe8
 180:	ldr	r4, [sp]
 184:	add	sp, sp, #4
 188:	pop	{pc}		; (ldr pc, [sp], #4)
 18c:	movw	r0, #0
 190:	movt	r0, #0
 194:	bl	0 <puts>
 198:	mvn	r4, #0
 19c:	b	178 <main+0x178>
