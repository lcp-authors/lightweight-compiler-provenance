
../compcert-repos/prog2/1.1.1:     file format elf32-littlearm


Disassembly of section .init:

000106a8 <.init>:
   106a8:	push	{r3, lr}
   106ac:	bl	10770 <_start@@Base+0x3c>
   106b0:	pop	{r3, pc}

Disassembly of section .plt:

000106b4 <printf@plt-0x14>:
   106b4:	push	{lr}		; (str lr, [sp, #-4]!)
   106b8:	ldr	lr, [pc, #4]	; 106c4 <printf@plt-0x4>
   106bc:	add	lr, pc, lr
   106c0:	ldr	pc, [lr, #8]!
   106c4:	andeq	r0, r1, ip, lsr r9

000106c8 <printf@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #16, 20	; 0x10000
   106d0:	ldr	pc, [ip, #2364]!	; 0x93c

000106d4 <fopen@plt>:
   106d4:	add	ip, pc, #0, 12
   106d8:	add	ip, ip, #16, 20	; 0x10000
   106dc:	ldr	pc, [ip, #2356]!	; 0x934

000106e0 <puts@plt>:
   106e0:	add	ip, pc, #0, 12
   106e4:	add	ip, ip, #16, 20	; 0x10000
   106e8:	ldr	pc, [ip, #2348]!	; 0x92c

000106ec <__libc_start_main@plt>:
   106ec:	add	ip, pc, #0, 12
   106f0:	add	ip, ip, #16, 20	; 0x10000
   106f4:	ldr	pc, [ip, #2340]!	; 0x924

000106f8 <__ctype_tolower_loc@plt>:
   106f8:	add	ip, pc, #0, 12
   106fc:	add	ip, ip, #16, 20	; 0x10000
   10700:	ldr	pc, [ip, #2332]!	; 0x91c

00010704 <__gmon_start__@plt>:
   10704:	add	ip, pc, #0, 12
   10708:	add	ip, ip, #16, 20	; 0x10000
   1070c:	ldr	pc, [ip, #2324]!	; 0x914

00010710 <fclose@plt>:
   10710:	add	ip, pc, #0, 12
   10714:	add	ip, ip, #16, 20	; 0x10000
   10718:	ldr	pc, [ip, #2316]!	; 0x90c

0001071c <abort@plt>:
   1071c:	add	ip, pc, #0, 12
   10720:	add	ip, ip, #16, 20	; 0x10000
   10724:	ldr	pc, [ip, #2308]!	; 0x904

00010728 <getc@plt>:
   10728:	add	ip, pc, #0, 12
   1072c:	add	ip, ip, #16, 20	; 0x10000
   10730:	ldr	pc, [ip, #2300]!	; 0x8fc

Disassembly of section .text:

00010734 <_start@@Base>:
   10734:	mov	fp, #0
   10738:	mov	lr, #0
   1073c:	pop	{r1}		; (ldr r1, [sp], #4)
   10740:	mov	r2, sp
   10744:	push	{r2}		; (str r2, [sp, #-4]!)
   10748:	push	{r0}		; (str r0, [sp, #-4]!)
   1074c:	ldr	ip, [pc, #16]	; 10764 <_start@@Base+0x30>
   10750:	push	{ip}		; (str ip, [sp, #-4]!)
   10754:	ldr	r0, [pc, #12]	; 10768 <_start@@Base+0x34>
   10758:	ldr	r3, [pc, #12]	; 1076c <_start@@Base+0x38>
   1075c:	bl	106ec <__libc_start_main@plt>
   10760:	bl	1071c <abort@plt>
   10764:	andeq	r0, r1, r4, asr #22
   10768:	andeq	r0, r1, ip, asr r8
   1076c:	andeq	r0, r1, r4, ror #21
   10770:	ldr	r3, [pc, #20]	; 1078c <_start@@Base+0x58>
   10774:	ldr	r2, [pc, #20]	; 10790 <_start@@Base+0x5c>
   10778:	add	r3, pc, r3
   1077c:	ldr	r2, [r3, r2]
   10780:	cmp	r2, #0
   10784:	bxeq	lr
   10788:	b	10704 <__gmon_start__@plt>
   1078c:	andeq	r0, r1, r0, lsl #17
   10790:	andeq	r0, r0, r0, lsr r0
   10794:	ldr	r0, [pc, #24]	; 107b4 <_start@@Base+0x80>
   10798:	ldr	r3, [pc, #24]	; 107b8 <_start@@Base+0x84>
   1079c:	cmp	r3, r0
   107a0:	bxeq	lr
   107a4:	ldr	r3, [pc, #16]	; 107bc <_start@@Base+0x88>
   107a8:	cmp	r3, #0
   107ac:	bxeq	lr
   107b0:	bx	r3
   107b4:	andeq	r1, r2, ip, lsr r0
   107b8:	andeq	r1, r2, ip, lsr r0
   107bc:	andeq	r0, r0, r0
   107c0:	ldr	r0, [pc, #36]	; 107ec <_start@@Base+0xb8>
   107c4:	ldr	r1, [pc, #36]	; 107f0 <_start@@Base+0xbc>
   107c8:	sub	r1, r1, r0
   107cc:	asr	r1, r1, #2
   107d0:	add	r1, r1, r1, lsr #31
   107d4:	asrs	r1, r1, #1
   107d8:	bxeq	lr
   107dc:	ldr	r3, [pc, #16]	; 107f4 <_start@@Base+0xc0>
   107e0:	cmp	r3, #0
   107e4:	bxeq	lr
   107e8:	bx	r3
   107ec:	andeq	r1, r2, ip, lsr r0
   107f0:	andeq	r1, r2, ip, lsr r0
   107f4:	andeq	r0, r0, r0
   107f8:	push	{r4, lr}
   107fc:	ldr	r4, [pc, #24]	; 1081c <_start@@Base+0xe8>
   10800:	ldrb	r3, [r4]
   10804:	cmp	r3, #0
   10808:	popne	{r4, pc}
   1080c:	bl	10794 <_start@@Base+0x60>
   10810:	mov	r3, #1
   10814:	strb	r3, [r4]
   10818:	pop	{r4, pc}
   1081c:	andeq	r1, r2, ip, lsr r0
   10820:	b	107c0 <_start@@Base+0x8c>

00010824 <in_array@@Base>:
   10824:	mov	ip, r0
   10828:	mov	r0, #0
   1082c:	cmp	r2, #0
   10830:	bmi	10858 <in_array@@Base+0x34>
   10834:	add	r2, r2, #1
   10838:	ldr	r3, [r1]
   1083c:	cmp	r3, ip
   10840:	beq	10854 <in_array@@Base+0x30>
   10844:	subs	r2, r2, #1
   10848:	add	r1, r1, #4
   1084c:	bxeq	lr
   10850:	b	10838 <in_array@@Base+0x14>
   10854:	mov	r0, #1
   10858:	bx	lr

0001085c <main@@Base>:
   1085c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   10860:	add	fp, sp, #24
   10864:	vpush	{d8-d9}
   10868:	sub	sp, sp, #104	; 0x68
   1086c:	movw	r0, #2900	; 0xb54
   10870:	movw	r1, #2923	; 0xb6b
   10874:	movt	r0, #1
   10878:	movt	r1, #1
   1087c:	bl	106d4 <fopen@plt>
   10880:	vmov.i32	q8, #0	; 0x00000000
   10884:	mov	r6, sp
   10888:	mov	r8, r0
   1088c:	mov	r7, #0
   10890:	add	r0, r6, #80	; 0x50
   10894:	mov	r1, r6
   10898:	str	r7, [sp, #96]	; 0x60
   1089c:	vst1.64	{d16-d17}, [r0]
   108a0:	add	r0, r6, #64	; 0x40
   108a4:	vst1.64	{d16-d17}, [r0]
   108a8:	add	r0, r6, #48	; 0x30
   108ac:	vst1.64	{d16-d17}, [r0]
   108b0:	add	r0, r6, #32
   108b4:	vst1.64	{d16-d17}, [r0]
   108b8:	add	r0, r6, #16
   108bc:	vst1.64	{d16-d17}, [r0]
   108c0:	mov	r0, #100	; 0x64
   108c4:	vst1.64	{d16-d17}, [r1], r0
   108c8:	mov	r0, r8
   108cc:	str	r7, [r1]
   108d0:	bl	10728 <getc@plt>
   108d4:	cmn	r0, #1
   108d8:	mov	r5, #0
   108dc:	beq	10a64 <main@@Base+0x208>
   108e0:	mov	r5, #0
   108e4:	b	108f8 <main@@Base+0x9c>
   108e8:	mov	r0, r8
   108ec:	bl	10728 <getc@plt>
   108f0:	cmn	r0, #1
   108f4:	beq	10a64 <main@@Base+0x208>
   108f8:	sub	r1, r0, #192	; 0xc0
   108fc:	cmp	r1, #58	; 0x3a
   10900:	bhi	10a24 <main@@Base+0x1c8>
   10904:	add	r2, pc, #4
   10908:	mov	r4, #97	; 0x61
   1090c:	ldr	pc, [r2, r1, lsl #2]
   10910:	andeq	r0, r1, r8, lsr #20
   10914:	andeq	r0, r1, r8, lsr #20
   10918:	andeq	r0, r1, r8, lsr #20
   1091c:	andeq	r0, r1, r8, lsr #20
   10920:	andeq	r0, r1, r4, lsr #20
   10924:	andeq	r0, r1, r4, lsr #20
   10928:	andeq	r0, r1, r4, lsr #20
   1092c:	andeq	r0, r1, ip, lsl #20
   10930:	andeq	r0, r1, r4, lsr #20
   10934:	andeq	r0, r1, r4, lsl #20
   10938:	andeq	r0, r1, r4, lsl #20
   1093c:	andeq	r0, r1, r4, lsr #20
   10940:	andeq	r0, r1, r4, lsr #20
   10944:	andeq	r0, r1, r4, lsl sl
   10948:	andeq	r0, r1, r4, lsr #20
   1094c:	andeq	r0, r1, r4, lsr #20
   10950:	andeq	r0, r1, r4, lsr #20
   10954:	andeq	r0, r1, r4, lsr #20
   10958:	andeq	r0, r1, r4, lsr #20
   1095c:	strdeq	r0, [r1], -ip
   10960:	strdeq	r0, [r1], -ip
   10964:	strdeq	r0, [r1], -ip
   10968:	andeq	r0, r1, r4, lsr #20
   1096c:	andeq	r0, r1, r4, lsr #20
   10970:	andeq	r0, r1, r4, lsr #20
   10974:	andeq	r0, r1, r4, lsr #20
   10978:	andeq	r0, r1, ip, lsl sl
   1097c:	andeq	r0, r1, r4, lsr #20
   10980:	andeq	r0, r1, r4, lsr #20
   10984:	andeq	r0, r1, r4, lsr #20
   10988:	andeq	r0, r1, r4, lsr #20
   1098c:	andeq	r0, r1, r4, lsr #20
   10990:	andeq	r0, r1, r8, lsr #20
   10994:	andeq	r0, r1, r8, lsr #20
   10998:	andeq	r0, r1, r8, lsr #20
   1099c:	andeq	r0, r1, r8, lsr #20
   109a0:	andeq	r0, r1, r4, lsr #20
   109a4:	andeq	r0, r1, r4, lsr #20
   109a8:	andeq	r0, r1, r4, lsr #20
   109ac:	andeq	r0, r1, ip, lsl #20
   109b0:	andeq	r0, r1, r4, lsr #20
   109b4:	andeq	r0, r1, r4, lsl #20
   109b8:	andeq	r0, r1, r4, lsl #20
   109bc:	andeq	r0, r1, r4, lsr #20
   109c0:	andeq	r0, r1, r4, lsr #20
   109c4:	andeq	r0, r1, r4, lsl sl
   109c8:	andeq	r0, r1, r4, lsr #20
   109cc:	andeq	r0, r1, r4, lsr #20
   109d0:	andeq	r0, r1, r4, lsr #20
   109d4:	andeq	r0, r1, r4, lsr #20
   109d8:	andeq	r0, r1, r4, lsr #20
   109dc:	strdeq	r0, [r1], -ip
   109e0:	strdeq	r0, [r1], -ip
   109e4:	strdeq	r0, [r1], -ip
   109e8:	andeq	r0, r1, r4, lsr #20
   109ec:	andeq	r0, r1, r4, lsr #20
   109f0:	andeq	r0, r1, r4, lsr #20
   109f4:	andeq	r0, r1, r4, lsr #20
   109f8:	andeq	r0, r1, ip, lsl sl
   109fc:	mov	r4, #111	; 0x6f
   10a00:	b	10a28 <main@@Base+0x1cc>
   10a04:	mov	r4, #101	; 0x65
   10a08:	b	10a28 <main@@Base+0x1cc>
   10a0c:	mov	r4, #99	; 0x63
   10a10:	b	10a28 <main@@Base+0x1cc>
   10a14:	mov	r4, #105	; 0x69
   10a18:	b	10a28 <main@@Base+0x1cc>
   10a1c:	mov	r4, #117	; 0x75
   10a20:	b	10a28 <main@@Base+0x1cc>
   10a24:	mov	r4, r0
   10a28:	add	r0, r4, #128	; 0x80
   10a2c:	lsr	r0, r0, #7
   10a30:	cmp	r0, #2
   10a34:	bhi	10a44 <main@@Base+0x1e8>
   10a38:	bl	106f8 <__ctype_tolower_loc@plt>
   10a3c:	ldr	r0, [r0]
   10a40:	ldr	r4, [r0, r4, lsl #2]
   10a44:	sub	r0, r4, #97	; 0x61
   10a48:	cmp	r0, #25
   10a4c:	bhi	108e8 <main@@Base+0x8c>
   10a50:	ldr	r1, [r6, r0, lsl #2]
   10a54:	add	r5, r5, #1
   10a58:	add	r1, r1, #1
   10a5c:	str	r1, [r6, r0, lsl #2]
   10a60:	b	108e8 <main@@Base+0x8c>
   10a64:	mov	r0, r8
   10a68:	bl	10710 <fclose@plt>
   10a6c:	movw	r0, #2977	; 0xba1
   10a70:	movt	r0, #1
   10a74:	bl	106e0 <puts@plt>
   10a78:	movw	r0, #2925	; 0xb6d
   10a7c:	mov	r1, r5
   10a80:	movt	r0, #1
   10a84:	bl	106c8 <printf@plt>
   10a88:	vmov	s0, r5
   10a8c:	vldr	s18, [pc, #76]	; 10ae0 <main@@Base+0x284>
   10a90:	movw	r4, #2957	; 0xb8d
   10a94:	movt	r4, #1
   10a98:	vcvt.f32.s32	s16, s0
   10a9c:	add	r0, r6, r7, lsl #2
   10aa0:	add	r1, r7, #97	; 0x61
   10aa4:	vldr	s0, [r0]
   10aa8:	mov	r0, r4
   10aac:	vcvt.f32.s32	s0, s0
   10ab0:	vdiv.f32	s0, s0, s16
   10ab4:	vmul.f32	s0, s0, s18
   10ab8:	vcvt.f64.f32	d16, s0
   10abc:	vmov	r2, r3, d16
   10ac0:	bl	106c8 <printf@plt>
   10ac4:	add	r7, r7, #1
   10ac8:	cmp	r7, #26
   10acc:	bne	10a9c <main@@Base+0x240>
   10ad0:	mov	r0, #0
   10ad4:	sub	sp, fp, #40	; 0x28
   10ad8:	vpop	{d8-d9}
   10adc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   10ae0:	sbcmi	r0, r8, #0

00010ae4 <__libc_csu_init@@Base>:
   10ae4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10ae8:	mov	r7, r0
   10aec:	ldr	r6, [pc, #72]	; 10b3c <__libc_csu_init@@Base+0x58>
   10af0:	ldr	r5, [pc, #72]	; 10b40 <__libc_csu_init@@Base+0x5c>
   10af4:	add	r6, pc, r6
   10af8:	add	r5, pc, r5
   10afc:	sub	r6, r6, r5
   10b00:	mov	r8, r1
   10b04:	mov	r9, r2
   10b08:	bl	106a8 <printf@plt-0x20>
   10b0c:	asrs	r6, r6, #2
   10b10:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10b14:	mov	r4, #0
   10b18:	add	r4, r4, #1
   10b1c:	ldr	r3, [r5], #4
   10b20:	mov	r2, r9
   10b24:	mov	r1, r8
   10b28:	mov	r0, r7
   10b2c:	blx	r3
   10b30:	cmp	r6, r4
   10b34:	bne	10b18 <__libc_csu_init@@Base+0x34>
   10b38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10b3c:	andeq	r0, r1, r0, lsl r4
   10b40:	andeq	r0, r1, r8, lsl #8

00010b44 <__libc_csu_fini@@Base>:
   10b44:	bx	lr

Disassembly of section .fini:

00010b48 <.fini>:
   10b48:	push	{r3, lr}
   10b4c:	pop	{r3, pc}
