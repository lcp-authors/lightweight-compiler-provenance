
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-mem-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_array>:
       0:	str	fp, [sp, #-8]!
       4:	str	lr, [sp, #4]
       8:	add	fp, sp, #4
       c:	sub	sp, sp, #632	; 0x278
      10:	str	r0, [fp, #-624]	; 0xfffffd90
      14:	str	r1, [fp, #-628]	; 0xfffffd8c
      18:	str	r2, [fp, #-632]	; 0xfffffd88
      1c:	str	r3, [fp, #-636]	; 0xfffffd84
      20:	sub	r2, fp, #580	; 0x244
      24:	sub	r3, fp, #584	; 0x248
      28:	mov	r1, r3
      2c:	ldr	r0, [fp, #-624]	; 0xfffffd90
      30:	bl	0 <coda_cursor_get_array_dim>
      34:	mov	r3, r0
      38:	cmp	r3, #0
      3c:	beq	48 <read_array+0x48>
      40:	mvn	r3, #0
      44:	b	3f4 <read_array+0x3f4>
      48:	ldr	r2, [fp, #-624]	; 0xfffffd90
      4c:	sub	r3, fp, #548	; 0x224
      50:	mov	r1, r2
      54:	mov	r2, #520	; 0x208
      58:	mov	r0, r3
      5c:	bl	0 <memcpy>
      60:	ldr	r3, [fp, #-584]	; 0xfffffdb8
      64:	cmp	r3, #1
      68:	ble	78 <read_array+0x78>
      6c:	ldr	r3, [fp, #4]
      70:	cmp	r3, #1
      74:	beq	194 <read_array+0x194>
      78:	mov	r3, #1
      7c:	str	r3, [fp, #-8]
      80:	mov	r3, #0
      84:	str	r3, [fp, #-12]
      88:	b	b8 <read_array+0xb8>
      8c:	ldr	r3, [fp, #-12]
      90:	lsl	r3, r3, #2
      94:	sub	r2, fp, #4
      98:	add	r3, r2, r3
      9c:	ldr	r2, [r3, #-576]	; 0xfffffdc0
      a0:	ldr	r3, [fp, #-8]
      a4:	mul	r3, r2, r3
      a8:	str	r3, [fp, #-8]
      ac:	ldr	r3, [fp, #-12]
      b0:	add	r3, r3, #1
      b4:	str	r3, [fp, #-12]
      b8:	ldr	r3, [fp, #-584]	; 0xfffffdb8
      bc:	ldr	r2, [fp, #-12]
      c0:	cmp	r2, r3
      c4:	blt	8c <read_array+0x8c>
      c8:	ldr	r3, [fp, #-8]
      cc:	cmp	r3, #0
      d0:	ble	3f0 <read_array+0x3f0>
      d4:	sub	r3, fp, #548	; 0x224
      d8:	mov	r1, #0
      dc:	mov	r0, r3
      e0:	bl	0 <coda_cursor_goto_array_element_by_index>
      e4:	mov	r3, r0
      e8:	cmp	r3, #0
      ec:	beq	f8 <read_array+0xf8>
      f0:	mvn	r3, #0
      f4:	b	3f4 <read_array+0x3f4>
      f8:	mov	r3, #0
      fc:	str	r3, [fp, #-12]
     100:	b	180 <read_array+0x180>
     104:	ldr	r3, [fp, #-12]
     108:	ldr	r2, [fp, #-636]	; 0xfffffd84
     10c:	mul	r3, r2, r3
     110:	mov	r2, r3
     114:	ldr	r3, [fp, #-632]	; 0xfffffd88
     118:	add	r1, r3, r2
     11c:	sub	r2, fp, #548	; 0x224
     120:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     124:	mov	r0, r2
     128:	blx	r3
     12c:	mov	r3, r0
     130:	cmp	r3, #0
     134:	beq	140 <read_array+0x140>
     138:	mvn	r3, #0
     13c:	b	3f4 <read_array+0x3f4>
     140:	ldr	r3, [fp, #-8]
     144:	sub	r3, r3, #1
     148:	ldr	r2, [fp, #-12]
     14c:	cmp	r2, r3
     150:	bge	174 <read_array+0x174>
     154:	sub	r3, fp, #548	; 0x224
     158:	mov	r0, r3
     15c:	bl	0 <coda_cursor_goto_next_array_element>
     160:	mov	r3, r0
     164:	cmp	r3, #0
     168:	beq	174 <read_array+0x174>
     16c:	mvn	r3, #0
     170:	b	3f4 <read_array+0x3f4>
     174:	ldr	r3, [fp, #-12]
     178:	add	r3, r3, #1
     17c:	str	r3, [fp, #-12]
     180:	ldr	r2, [fp, #-12]
     184:	ldr	r3, [fp, #-8]
     188:	cmp	r2, r3
     18c:	blt	104 <read_array+0x104>
     190:	b	3f0 <read_array+0x3f0>
     194:	mov	r3, #1
     198:	str	r3, [fp, #-620]	; 0xfffffd94
     19c:	mov	r3, #0
     1a0:	str	r3, [fp, #-12]
     1a4:	b	1f8 <read_array+0x1f8>
     1a8:	ldr	r3, [fp, #-12]
     1ac:	lsl	r3, r3, #2
     1b0:	sub	r2, fp, #4
     1b4:	add	r3, r2, r3
     1b8:	ldr	r2, [r3, #-616]	; 0xfffffd98
     1bc:	ldr	r3, [fp, #-12]
     1c0:	lsl	r3, r3, #2
     1c4:	sub	r1, fp, #4
     1c8:	add	r3, r1, r3
     1cc:	ldr	r1, [r3, #-576]	; 0xfffffdc0
     1d0:	ldr	r3, [fp, #-12]
     1d4:	add	r3, r3, #1
     1d8:	mul	r2, r1, r2
     1dc:	lsl	r3, r3, #2
     1e0:	sub	r1, fp, #4
     1e4:	add	r3, r1, r3
     1e8:	str	r2, [r3, #-616]	; 0xfffffd98
     1ec:	ldr	r3, [fp, #-12]
     1f0:	add	r3, r3, #1
     1f4:	str	r3, [fp, #-12]
     1f8:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     1fc:	ldr	r2, [fp, #-12]
     200:	cmp	r2, r3
     204:	blt	1a8 <read_array+0x1a8>
     208:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     20c:	sub	r3, r3, #1
     210:	lsl	r3, r3, #2
     214:	sub	r2, fp, #4
     218:	add	r3, r2, r3
     21c:	ldr	r3, [r3, #-616]	; 0xfffffd98
     220:	str	r3, [fp, #-24]	; 0xffffffe8
     224:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     228:	lsl	r3, r3, #2
     22c:	sub	r2, fp, #4
     230:	add	r3, r2, r3
     234:	ldr	r3, [r3, #-616]	; 0xfffffd98
     238:	str	r3, [fp, #-8]
     23c:	ldr	r3, [fp, #-8]
     240:	cmp	r3, #0
     244:	ble	3f0 <read_array+0x3f0>
     248:	mov	r3, #0
     24c:	str	r3, [fp, #-16]
     250:	mov	r3, #0
     254:	str	r3, [fp, #-20]	; 0xffffffec
     258:	sub	r3, fp, #548	; 0x224
     25c:	mov	r1, #0
     260:	mov	r0, r3
     264:	bl	0 <coda_cursor_goto_array_element_by_index>
     268:	mov	r3, r0
     26c:	cmp	r3, #0
     270:	beq	27c <read_array+0x27c>
     274:	mvn	r3, #0
     278:	b	3f4 <read_array+0x3f4>
     27c:	ldr	r3, [fp, #-20]	; 0xffffffec
     280:	ldr	r2, [fp, #-636]	; 0xfffffd84
     284:	mul	r3, r2, r3
     288:	mov	r2, r3
     28c:	ldr	r3, [fp, #-632]	; 0xfffffd88
     290:	add	r1, r3, r2
     294:	sub	r2, fp, #548	; 0x224
     298:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     29c:	mov	r0, r2
     2a0:	blx	r3
     2a4:	mov	r3, r0
     2a8:	cmp	r3, #0
     2ac:	beq	2b8 <read_array+0x2b8>
     2b0:	mvn	r3, #0
     2b4:	b	3f4 <read_array+0x3f4>
     2b8:	ldr	r3, [fp, #-16]
     2bc:	add	r3, r3, #1
     2c0:	str	r3, [fp, #-16]
     2c4:	ldr	r2, [fp, #-16]
     2c8:	ldr	r3, [fp, #-8]
     2cc:	cmp	r2, r3
     2d0:	bge	2f4 <read_array+0x2f4>
     2d4:	sub	r3, fp, #548	; 0x224
     2d8:	mov	r0, r3
     2dc:	bl	0 <coda_cursor_goto_next_array_element>
     2e0:	mov	r3, r0
     2e4:	cmp	r3, #0
     2e8:	beq	2f4 <read_array+0x2f4>
     2ec:	mvn	r3, #0
     2f0:	b	3f4 <read_array+0x3f4>
     2f4:	ldr	r2, [fp, #-20]	; 0xffffffec
     2f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     2fc:	add	r3, r2, r3
     300:	str	r3, [fp, #-20]	; 0xffffffec
     304:	ldr	r2, [fp, #-20]	; 0xffffffec
     308:	ldr	r3, [fp, #-8]
     30c:	cmp	r2, r3
     310:	blt	27c <read_array+0x27c>
     314:	ldr	r2, [fp, #-16]
     318:	ldr	r3, [fp, #-8]
     31c:	cmp	r2, r3
     320:	beq	3ec <read_array+0x3ec>
     324:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     328:	sub	r3, r3, #2
     32c:	lsl	r3, r3, #2
     330:	sub	r2, fp, #4
     334:	add	r3, r2, r3
     338:	ldr	r2, [r3, #-616]	; 0xfffffd98
     33c:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     340:	lsl	r3, r3, #2
     344:	sub	r1, fp, #4
     348:	add	r3, r1, r3
     34c:	ldr	r3, [r3, #-616]	; 0xfffffd98
     350:	sub	r3, r2, r3
     354:	ldr	r2, [fp, #-20]	; 0xffffffec
     358:	add	r3, r2, r3
     35c:	str	r3, [fp, #-20]	; 0xffffffec
     360:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     364:	sub	r3, r3, #3
     368:	str	r3, [fp, #-12]
     36c:	b	3b8 <read_array+0x3b8>
     370:	ldr	r3, [fp, #-12]
     374:	lsl	r3, r3, #2
     378:	sub	r2, fp, #4
     37c:	add	r3, r2, r3
     380:	ldr	r2, [r3, #-616]	; 0xfffffd98
     384:	ldr	r3, [fp, #-12]
     388:	add	r3, r3, #2
     38c:	lsl	r3, r3, #2
     390:	sub	r1, fp, #4
     394:	add	r3, r1, r3
     398:	ldr	r3, [r3, #-616]	; 0xfffffd98
     39c:	sub	r3, r2, r3
     3a0:	ldr	r2, [fp, #-20]	; 0xffffffec
     3a4:	add	r3, r2, r3
     3a8:	str	r3, [fp, #-20]	; 0xffffffec
     3ac:	ldr	r3, [fp, #-12]
     3b0:	sub	r3, r3, #1
     3b4:	str	r3, [fp, #-12]
     3b8:	ldr	r3, [fp, #-12]
     3bc:	cmp	r3, #0
     3c0:	blt	27c <read_array+0x27c>
     3c4:	ldr	r3, [fp, #-12]
     3c8:	add	r3, r3, #2
     3cc:	lsl	r3, r3, #2
     3d0:	sub	r2, fp, #4
     3d4:	add	r3, r2, r3
     3d8:	ldr	r3, [r3, #-616]	; 0xfffffd98
     3dc:	ldr	r2, [fp, #-20]	; 0xffffffec
     3e0:	cmp	r2, r3
     3e4:	bge	370 <read_array+0x370>
     3e8:	b	27c <read_array+0x27c>
     3ec:	nop	{0}
     3f0:	mov	r3, #0
     3f4:	mov	r0, r3
     3f8:	sub	sp, fp, #4
     3fc:	ldr	fp, [sp]
     400:	add	sp, sp, #4
     404:	pop	{pc}		; (ldr pc, [sp], #4)

00000408 <read_partial_array>:
     408:	str	fp, [sp, #-8]!
     40c:	str	lr, [sp, #4]
     410:	add	fp, sp, #4
     414:	sub	sp, sp, #544	; 0x220
     418:	str	r0, [fp, #-536]	; 0xfffffde8
     41c:	str	r1, [fp, #-540]	; 0xfffffde4
     420:	str	r2, [fp, #-544]	; 0xfffffde0
     424:	str	r3, [fp, #-548]	; 0xfffffddc
     428:	ldr	r2, [fp, #-536]	; 0xfffffde8
     42c:	sub	r3, fp, #532	; 0x214
     430:	mov	r1, r2
     434:	mov	r2, #520	; 0x208
     438:	mov	r0, r3
     43c:	bl	0 <memcpy>
     440:	ldr	r3, [fp, #-548]	; 0xfffffddc
     444:	cmp	r3, #0
     448:	ble	508 <read_partial_array+0x100>
     44c:	sub	r3, fp, #532	; 0x214
     450:	ldr	r1, [fp, #-544]	; 0xfffffde0
     454:	mov	r0, r3
     458:	bl	0 <coda_cursor_goto_array_element_by_index>
     45c:	mov	r3, r0
     460:	cmp	r3, #0
     464:	beq	470 <read_partial_array+0x68>
     468:	mvn	r3, #0
     46c:	b	50c <read_partial_array+0x104>
     470:	mov	r3, #0
     474:	str	r3, [fp, #-8]
     478:	b	4f8 <read_partial_array+0xf0>
     47c:	ldr	r3, [fp, #-8]
     480:	ldr	r2, [fp, #8]
     484:	mul	r3, r2, r3
     488:	mov	r2, r3
     48c:	ldr	r3, [fp, #4]
     490:	add	r1, r3, r2
     494:	sub	r2, fp, #532	; 0x214
     498:	ldr	r3, [fp, #-540]	; 0xfffffde4
     49c:	mov	r0, r2
     4a0:	blx	r3
     4a4:	mov	r3, r0
     4a8:	cmp	r3, #0
     4ac:	beq	4b8 <read_partial_array+0xb0>
     4b0:	mvn	r3, #0
     4b4:	b	50c <read_partial_array+0x104>
     4b8:	ldr	r3, [fp, #-548]	; 0xfffffddc
     4bc:	sub	r3, r3, #1
     4c0:	ldr	r2, [fp, #-8]
     4c4:	cmp	r2, r3
     4c8:	bge	4ec <read_partial_array+0xe4>
     4cc:	sub	r3, fp, #532	; 0x214
     4d0:	mov	r0, r3
     4d4:	bl	0 <coda_cursor_goto_next_array_element>
     4d8:	mov	r3, r0
     4dc:	cmp	r3, #0
     4e0:	beq	4ec <read_partial_array+0xe4>
     4e4:	mvn	r3, #0
     4e8:	b	50c <read_partial_array+0x104>
     4ec:	ldr	r3, [fp, #-8]
     4f0:	add	r3, r3, #1
     4f4:	str	r3, [fp, #-8]
     4f8:	ldr	r2, [fp, #-8]
     4fc:	ldr	r3, [fp, #-548]	; 0xfffffddc
     500:	cmp	r2, r3
     504:	blt	47c <read_partial_array+0x74>
     508:	mov	r3, #0
     50c:	mov	r0, r3
     510:	sub	sp, fp, #4
     514:	ldr	fp, [sp]
     518:	add	sp, sp, #4
     51c:	pop	{pc}		; (ldr pc, [sp], #4)

00000520 <transpose_array>:
     520:	str	fp, [sp, #-8]!
     524:	str	lr, [sp, #4]
     528:	add	fp, sp, #4
     52c:	sub	sp, sp, #208	; 0xd0
     530:	str	r0, [fp, #-192]	; 0xffffff40
     534:	str	r1, [fp, #-196]	; 0xffffff3c
     538:	str	r2, [fp, #-200]	; 0xffffff38
     53c:	mov	r3, #0
     540:	str	r3, [fp, #-12]
     544:	sub	r2, fp, #72	; 0x48
     548:	sub	r3, fp, #76	; 0x4c
     54c:	mov	r1, r3
     550:	ldr	r0, [fp, #-192]	; 0xffffff40
     554:	bl	0 <coda_cursor_get_array_dim>
     558:	mov	r3, r0
     55c:	cmp	r3, #0
     560:	beq	56c <transpose_array+0x4c>
     564:	mvn	r3, #0
     568:	b	df0 <transpose_array+0x8d0>
     56c:	ldr	r3, [fp, #-76]	; 0xffffffb4
     570:	cmp	r3, #1
     574:	bgt	580 <transpose_array+0x60>
     578:	mov	r3, #0
     57c:	b	df0 <transpose_array+0x8d0>
     580:	ldr	r3, [fp, #-196]	; 0xffffff3c
     584:	str	r3, [fp, #-36]	; 0xffffffdc
     588:	mov	r3, #1
     58c:	str	r3, [fp, #-8]
     590:	mov	r3, #0
     594:	str	r3, [fp, #-16]
     598:	b	614 <transpose_array+0xf4>
     59c:	ldr	r3, [fp, #-16]
     5a0:	lsl	r3, r3, #2
     5a4:	sub	r2, fp, #4
     5a8:	add	r3, r2, r3
     5ac:	ldr	r2, [r3, #-68]	; 0xffffffbc
     5b0:	ldr	r3, [fp, #-8]
     5b4:	mul	r3, r2, r3
     5b8:	str	r3, [fp, #-8]
     5bc:	ldr	r3, [fp, #-16]
     5c0:	lsl	r3, r3, #2
     5c4:	sub	r2, fp, #4
     5c8:	add	r3, r2, r3
     5cc:	mov	r2, #0
     5d0:	str	r2, [r3, #-144]	; 0xffffff70
     5d4:	ldr	r3, [fp, #-76]	; 0xffffffb4
     5d8:	sub	r2, r3, #1
     5dc:	ldr	r3, [fp, #-16]
     5e0:	sub	r3, r2, r3
     5e4:	lsl	r3, r3, #2
     5e8:	sub	r2, fp, #4
     5ec:	add	r3, r2, r3
     5f0:	ldr	r2, [r3, #-68]	; 0xffffffbc
     5f4:	ldr	r3, [fp, #-16]
     5f8:	lsl	r3, r3, #2
     5fc:	sub	r1, fp, #4
     600:	add	r3, r1, r3
     604:	str	r2, [r3, #-180]	; 0xffffff4c
     608:	ldr	r3, [fp, #-16]
     60c:	add	r3, r3, #1
     610:	str	r3, [fp, #-16]
     614:	ldr	r3, [fp, #-76]	; 0xffffffb4
     618:	ldr	r2, [fp, #-16]
     61c:	cmp	r2, r3
     620:	blt	59c <transpose_array+0x7c>
     624:	ldr	r3, [fp, #-8]
     628:	cmp	r3, #1
     62c:	bgt	638 <transpose_array+0x118>
     630:	mov	r3, #0
     634:	b	df0 <transpose_array+0x8d0>
     638:	ldr	r3, [fp, #-76]	; 0xffffffb4
     63c:	lsl	r3, r3, #2
     640:	sub	r2, fp, #4
     644:	add	r3, r2, r3
     648:	mov	r2, #1
     64c:	str	r2, [r3, #-108]	; 0xffffff94
     650:	ldr	r3, [fp, #-76]	; 0xffffffb4
     654:	lsl	r3, r3, #2
     658:	sub	r2, fp, #4
     65c:	add	r3, r2, r3
     660:	mov	r2, #1
     664:	str	r2, [r3, #-180]	; 0xffffff4c
     668:	ldr	r3, [fp, #-76]	; 0xffffffb4
     66c:	str	r3, [fp, #-16]
     670:	b	6c4 <transpose_array+0x1a4>
     674:	ldr	r3, [fp, #-16]
     678:	lsl	r3, r3, #2
     67c:	sub	r2, fp, #4
     680:	add	r3, r2, r3
     684:	ldr	r2, [r3, #-108]	; 0xffffff94
     688:	ldr	r3, [fp, #-16]
     68c:	lsl	r3, r3, #2
     690:	sub	r1, fp, #4
     694:	add	r3, r1, r3
     698:	ldr	r1, [r3, #-180]	; 0xffffff4c
     69c:	ldr	r3, [fp, #-16]
     6a0:	sub	r3, r3, #1
     6a4:	mul	r2, r1, r2
     6a8:	lsl	r3, r3, #2
     6ac:	sub	r1, fp, #4
     6b0:	add	r3, r1, r3
     6b4:	str	r2, [r3, #-108]	; 0xffffff94
     6b8:	ldr	r3, [fp, #-16]
     6bc:	sub	r3, r3, #1
     6c0:	str	r3, [fp, #-16]
     6c4:	ldr	r3, [fp, #-16]
     6c8:	cmp	r3, #0
     6cc:	bgt	674 <transpose_array+0x154>
     6d0:	ldr	r3, [fp, #-76]	; 0xffffffb4
     6d4:	lsl	r3, r3, #2
     6d8:	sub	r2, fp, #4
     6dc:	add	r3, r2, r3
     6e0:	mov	r2, #0
     6e4:	str	r2, [r3, #-180]	; 0xffffff4c
     6e8:	ldr	r3, [fp, #-76]	; 0xffffffb4
     6ec:	lsl	r3, r3, #2
     6f0:	sub	r2, fp, #4
     6f4:	add	r3, r2, r3
     6f8:	mov	r2, #0
     6fc:	str	r2, [r3, #-144]	; 0xffffff70
     700:	ldr	r3, [fp, #-8]
     704:	ldr	r2, [fp, #-200]	; 0xffffff38
     708:	mul	r3, r2, r3
     70c:	mov	r0, r3
     710:	bl	0 <malloc>
     714:	mov	r3, r0
     718:	str	r3, [fp, #-40]	; 0xffffffd8
     71c:	ldr	r3, [fp, #-40]	; 0xffffffd8
     720:	cmp	r3, #0
     724:	bne	75c <transpose_array+0x23c>
     728:	ldr	r3, [fp, #-8]
     72c:	ldr	r2, [fp, #-200]	; 0xffffff38
     730:	mul	r2, r2, r3
     734:	mov	r3, #93	; 0x5d
     738:	str	r3, [sp]
     73c:	movw	r3, #0
     740:	movt	r3, #0
     744:	movw	r1, #0
     748:	movt	r1, #0
     74c:	mvn	r0, #0
     750:	bl	0 <coda_set_error>
     754:	mvn	r3, #0
     758:	b	df0 <transpose_array+0x8d0>
     75c:	ldr	r3, [fp, #-200]	; 0xffffff38
     760:	sub	r3, r3, #1
     764:	cmp	r3, #7
     768:	ldrls	pc, [pc, r3, lsl #2]
     76c:	b	da8 <transpose_array+0x888>
     770:	.word	0x00000790
     774:	.word	0x00000910
     778:	.word	0x00000da8
     77c:	.word	0x00000a98
     780:	.word	0x00000da8
     784:	.word	0x00000da8
     788:	.word	0x00000da8
     78c:	.word	0x00000c20
     790:	mov	r3, #0
     794:	str	r3, [fp, #-16]
     798:	b	8fc <transpose_array+0x3dc>
     79c:	mov	r3, #0
     7a0:	str	r3, [fp, #-20]	; 0xffffffec
     7a4:	ldr	r3, [fp, #-16]
     7a8:	ldr	r2, [fp, #-36]	; 0xffffffdc
     7ac:	add	r2, r2, r3
     7b0:	ldr	r3, [fp, #-12]
     7b4:	ldr	r1, [fp, #-40]	; 0xffffffd8
     7b8:	add	r3, r1, r3
     7bc:	ldrb	r2, [r2]
     7c0:	strb	r2, [r3]
     7c4:	ldr	r3, [fp, #-20]	; 0xffffffec
     7c8:	lsl	r3, r3, #2
     7cc:	sub	r2, fp, #4
     7d0:	add	r3, r2, r3
     7d4:	ldr	r3, [r3, #-108]	; 0xffffff94
     7d8:	ldr	r2, [fp, #-12]
     7dc:	add	r3, r2, r3
     7e0:	str	r3, [fp, #-12]
     7e4:	ldr	r3, [fp, #-20]	; 0xffffffec
     7e8:	lsl	r3, r3, #2
     7ec:	sub	r2, fp, #4
     7f0:	add	r3, r2, r3
     7f4:	ldr	r3, [r3, #-144]	; 0xffffff70
     7f8:	add	r2, r3, #1
     7fc:	ldr	r3, [fp, #-20]	; 0xffffffec
     800:	lsl	r3, r3, #2
     804:	sub	r1, fp, #4
     808:	add	r3, r1, r3
     80c:	str	r2, [r3, #-144]	; 0xffffff70
     810:	b	8bc <transpose_array+0x39c>
     814:	ldr	r3, [fp, #-20]	; 0xffffffec
     818:	lsl	r3, r3, #2
     81c:	sub	r2, fp, #4
     820:	add	r3, r2, r3
     824:	mov	r2, #0
     828:	str	r2, [r3, #-144]	; 0xffffff70
     82c:	ldr	r3, [fp, #-20]	; 0xffffffec
     830:	lsl	r3, r3, #2
     834:	sub	r2, fp, #4
     838:	add	r3, r2, r3
     83c:	ldr	r2, [r3, #-108]	; 0xffffff94
     840:	ldr	r3, [fp, #-20]	; 0xffffffec
     844:	lsl	r3, r3, #2
     848:	sub	r1, fp, #4
     84c:	add	r3, r1, r3
     850:	ldr	r3, [r3, #-180]	; 0xffffff4c
     854:	mul	r3, r3, r2
     858:	ldr	r2, [fp, #-12]
     85c:	sub	r3, r2, r3
     860:	str	r3, [fp, #-12]
     864:	ldr	r3, [fp, #-20]	; 0xffffffec
     868:	add	r3, r3, #1
     86c:	str	r3, [fp, #-20]	; 0xffffffec
     870:	ldr	r3, [fp, #-20]	; 0xffffffec
     874:	lsl	r3, r3, #2
     878:	sub	r2, fp, #4
     87c:	add	r3, r2, r3
     880:	ldr	r3, [r3, #-108]	; 0xffffff94
     884:	ldr	r2, [fp, #-12]
     888:	add	r3, r2, r3
     88c:	str	r3, [fp, #-12]
     890:	ldr	r3, [fp, #-20]	; 0xffffffec
     894:	lsl	r3, r3, #2
     898:	sub	r2, fp, #4
     89c:	add	r3, r2, r3
     8a0:	ldr	r3, [r3, #-144]	; 0xffffff70
     8a4:	add	r2, r3, #1
     8a8:	ldr	r3, [fp, #-20]	; 0xffffffec
     8ac:	lsl	r3, r3, #2
     8b0:	sub	r1, fp, #4
     8b4:	add	r3, r1, r3
     8b8:	str	r2, [r3, #-144]	; 0xffffff70
     8bc:	ldr	r3, [fp, #-20]	; 0xffffffec
     8c0:	lsl	r3, r3, #2
     8c4:	sub	r2, fp, #4
     8c8:	add	r3, r2, r3
     8cc:	ldr	r2, [r3, #-144]	; 0xffffff70
     8d0:	ldr	r3, [fp, #-20]	; 0xffffffec
     8d4:	lsl	r3, r3, #2
     8d8:	sub	r1, fp, #4
     8dc:	add	r3, r1, r3
     8e0:	ldr	r3, [r3, #-180]	; 0xffffff4c
     8e4:	cmp	r2, r3
     8e8:	beq	814 <transpose_array+0x2f4>
     8ec:	nop	{0}
     8f0:	ldr	r3, [fp, #-16]
     8f4:	add	r3, r3, #1
     8f8:	str	r3, [fp, #-16]
     8fc:	ldr	r2, [fp, #-16]
     900:	ldr	r3, [fp, #-8]
     904:	cmp	r2, r3
     908:	blt	79c <transpose_array+0x27c>
     90c:	b	dc8 <transpose_array+0x8a8>
     910:	mov	r3, #0
     914:	str	r3, [fp, #-16]
     918:	b	a84 <transpose_array+0x564>
     91c:	mov	r3, #0
     920:	str	r3, [fp, #-24]	; 0xffffffe8
     924:	ldr	r3, [fp, #-16]
     928:	lsl	r3, r3, #1
     92c:	ldr	r2, [fp, #-36]	; 0xffffffdc
     930:	add	r2, r2, r3
     934:	ldr	r3, [fp, #-12]
     938:	lsl	r3, r3, #1
     93c:	ldr	r1, [fp, #-40]	; 0xffffffd8
     940:	add	r3, r1, r3
     944:	ldrh	r2, [r2]
     948:	strh	r2, [r3]
     94c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     950:	lsl	r3, r3, #2
     954:	sub	r2, fp, #4
     958:	add	r3, r2, r3
     95c:	ldr	r3, [r3, #-108]	; 0xffffff94
     960:	ldr	r2, [fp, #-12]
     964:	add	r3, r2, r3
     968:	str	r3, [fp, #-12]
     96c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     970:	lsl	r3, r3, #2
     974:	sub	r2, fp, #4
     978:	add	r3, r2, r3
     97c:	ldr	r3, [r3, #-144]	; 0xffffff70
     980:	add	r2, r3, #1
     984:	ldr	r3, [fp, #-24]	; 0xffffffe8
     988:	lsl	r3, r3, #2
     98c:	sub	r1, fp, #4
     990:	add	r3, r1, r3
     994:	str	r2, [r3, #-144]	; 0xffffff70
     998:	b	a44 <transpose_array+0x524>
     99c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     9a0:	lsl	r3, r3, #2
     9a4:	sub	r2, fp, #4
     9a8:	add	r3, r2, r3
     9ac:	mov	r2, #0
     9b0:	str	r2, [r3, #-144]	; 0xffffff70
     9b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     9b8:	lsl	r3, r3, #2
     9bc:	sub	r2, fp, #4
     9c0:	add	r3, r2, r3
     9c4:	ldr	r2, [r3, #-108]	; 0xffffff94
     9c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     9cc:	lsl	r3, r3, #2
     9d0:	sub	r1, fp, #4
     9d4:	add	r3, r1, r3
     9d8:	ldr	r3, [r3, #-180]	; 0xffffff4c
     9dc:	mul	r3, r3, r2
     9e0:	ldr	r2, [fp, #-12]
     9e4:	sub	r3, r2, r3
     9e8:	str	r3, [fp, #-12]
     9ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
     9f0:	add	r3, r3, #1
     9f4:	str	r3, [fp, #-24]	; 0xffffffe8
     9f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     9fc:	lsl	r3, r3, #2
     a00:	sub	r2, fp, #4
     a04:	add	r3, r2, r3
     a08:	ldr	r3, [r3, #-108]	; 0xffffff94
     a0c:	ldr	r2, [fp, #-12]
     a10:	add	r3, r2, r3
     a14:	str	r3, [fp, #-12]
     a18:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a1c:	lsl	r3, r3, #2
     a20:	sub	r2, fp, #4
     a24:	add	r3, r2, r3
     a28:	ldr	r3, [r3, #-144]	; 0xffffff70
     a2c:	add	r2, r3, #1
     a30:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a34:	lsl	r3, r3, #2
     a38:	sub	r1, fp, #4
     a3c:	add	r3, r1, r3
     a40:	str	r2, [r3, #-144]	; 0xffffff70
     a44:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a48:	lsl	r3, r3, #2
     a4c:	sub	r2, fp, #4
     a50:	add	r3, r2, r3
     a54:	ldr	r2, [r3, #-144]	; 0xffffff70
     a58:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a5c:	lsl	r3, r3, #2
     a60:	sub	r1, fp, #4
     a64:	add	r3, r1, r3
     a68:	ldr	r3, [r3, #-180]	; 0xffffff4c
     a6c:	cmp	r2, r3
     a70:	beq	99c <transpose_array+0x47c>
     a74:	nop	{0}
     a78:	ldr	r3, [fp, #-16]
     a7c:	add	r3, r3, #1
     a80:	str	r3, [fp, #-16]
     a84:	ldr	r2, [fp, #-16]
     a88:	ldr	r3, [fp, #-8]
     a8c:	cmp	r2, r3
     a90:	blt	91c <transpose_array+0x3fc>
     a94:	b	dc8 <transpose_array+0x8a8>
     a98:	mov	r3, #0
     a9c:	str	r3, [fp, #-16]
     aa0:	b	c0c <transpose_array+0x6ec>
     aa4:	mov	r3, #0
     aa8:	str	r3, [fp, #-28]	; 0xffffffe4
     aac:	ldr	r3, [fp, #-16]
     ab0:	lsl	r3, r3, #2
     ab4:	ldr	r2, [fp, #-36]	; 0xffffffdc
     ab8:	add	r2, r2, r3
     abc:	ldr	r3, [fp, #-12]
     ac0:	lsl	r3, r3, #2
     ac4:	ldr	r1, [fp, #-40]	; 0xffffffd8
     ac8:	add	r3, r1, r3
     acc:	ldr	r2, [r2]
     ad0:	str	r2, [r3]
     ad4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ad8:	lsl	r3, r3, #2
     adc:	sub	r2, fp, #4
     ae0:	add	r3, r2, r3
     ae4:	ldr	r3, [r3, #-108]	; 0xffffff94
     ae8:	ldr	r2, [fp, #-12]
     aec:	add	r3, r2, r3
     af0:	str	r3, [fp, #-12]
     af4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     af8:	lsl	r3, r3, #2
     afc:	sub	r2, fp, #4
     b00:	add	r3, r2, r3
     b04:	ldr	r3, [r3, #-144]	; 0xffffff70
     b08:	add	r2, r3, #1
     b0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b10:	lsl	r3, r3, #2
     b14:	sub	r1, fp, #4
     b18:	add	r3, r1, r3
     b1c:	str	r2, [r3, #-144]	; 0xffffff70
     b20:	b	bcc <transpose_array+0x6ac>
     b24:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b28:	lsl	r3, r3, #2
     b2c:	sub	r2, fp, #4
     b30:	add	r3, r2, r3
     b34:	mov	r2, #0
     b38:	str	r2, [r3, #-144]	; 0xffffff70
     b3c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b40:	lsl	r3, r3, #2
     b44:	sub	r2, fp, #4
     b48:	add	r3, r2, r3
     b4c:	ldr	r2, [r3, #-108]	; 0xffffff94
     b50:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b54:	lsl	r3, r3, #2
     b58:	sub	r1, fp, #4
     b5c:	add	r3, r1, r3
     b60:	ldr	r3, [r3, #-180]	; 0xffffff4c
     b64:	mul	r3, r3, r2
     b68:	ldr	r2, [fp, #-12]
     b6c:	sub	r3, r2, r3
     b70:	str	r3, [fp, #-12]
     b74:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b78:	add	r3, r3, #1
     b7c:	str	r3, [fp, #-28]	; 0xffffffe4
     b80:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b84:	lsl	r3, r3, #2
     b88:	sub	r2, fp, #4
     b8c:	add	r3, r2, r3
     b90:	ldr	r3, [r3, #-108]	; 0xffffff94
     b94:	ldr	r2, [fp, #-12]
     b98:	add	r3, r2, r3
     b9c:	str	r3, [fp, #-12]
     ba0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ba4:	lsl	r3, r3, #2
     ba8:	sub	r2, fp, #4
     bac:	add	r3, r2, r3
     bb0:	ldr	r3, [r3, #-144]	; 0xffffff70
     bb4:	add	r2, r3, #1
     bb8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     bbc:	lsl	r3, r3, #2
     bc0:	sub	r1, fp, #4
     bc4:	add	r3, r1, r3
     bc8:	str	r2, [r3, #-144]	; 0xffffff70
     bcc:	ldr	r3, [fp, #-28]	; 0xffffffe4
     bd0:	lsl	r3, r3, #2
     bd4:	sub	r2, fp, #4
     bd8:	add	r3, r2, r3
     bdc:	ldr	r2, [r3, #-144]	; 0xffffff70
     be0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     be4:	lsl	r3, r3, #2
     be8:	sub	r1, fp, #4
     bec:	add	r3, r1, r3
     bf0:	ldr	r3, [r3, #-180]	; 0xffffff4c
     bf4:	cmp	r2, r3
     bf8:	beq	b24 <transpose_array+0x604>
     bfc:	nop	{0}
     c00:	ldr	r3, [fp, #-16]
     c04:	add	r3, r3, #1
     c08:	str	r3, [fp, #-16]
     c0c:	ldr	r2, [fp, #-16]
     c10:	ldr	r3, [fp, #-8]
     c14:	cmp	r2, r3
     c18:	blt	aa4 <transpose_array+0x584>
     c1c:	b	dc8 <transpose_array+0x8a8>
     c20:	mov	r3, #0
     c24:	str	r3, [fp, #-16]
     c28:	b	d94 <transpose_array+0x874>
     c2c:	mov	r3, #0
     c30:	str	r3, [fp, #-32]	; 0xffffffe0
     c34:	ldr	r3, [fp, #-16]
     c38:	lsl	r3, r3, #3
     c3c:	ldr	r2, [fp, #-36]	; 0xffffffdc
     c40:	add	r3, r2, r3
     c44:	ldr	r2, [fp, #-12]
     c48:	lsl	r2, r2, #3
     c4c:	ldr	r1, [fp, #-40]	; 0xffffffd8
     c50:	add	r1, r1, r2
     c54:	ldrd	r2, [r3]
     c58:	strd	r2, [r1]
     c5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     c60:	lsl	r3, r3, #2
     c64:	sub	r2, fp, #4
     c68:	add	r3, r2, r3
     c6c:	ldr	r3, [r3, #-108]	; 0xffffff94
     c70:	ldr	r2, [fp, #-12]
     c74:	add	r3, r2, r3
     c78:	str	r3, [fp, #-12]
     c7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     c80:	lsl	r3, r3, #2
     c84:	sub	r2, fp, #4
     c88:	add	r3, r2, r3
     c8c:	ldr	r3, [r3, #-144]	; 0xffffff70
     c90:	add	r2, r3, #1
     c94:	ldr	r3, [fp, #-32]	; 0xffffffe0
     c98:	lsl	r3, r3, #2
     c9c:	sub	r1, fp, #4
     ca0:	add	r3, r1, r3
     ca4:	str	r2, [r3, #-144]	; 0xffffff70
     ca8:	b	d54 <transpose_array+0x834>
     cac:	ldr	r3, [fp, #-32]	; 0xffffffe0
     cb0:	lsl	r3, r3, #2
     cb4:	sub	r2, fp, #4
     cb8:	add	r3, r2, r3
     cbc:	mov	r2, #0
     cc0:	str	r2, [r3, #-144]	; 0xffffff70
     cc4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     cc8:	lsl	r3, r3, #2
     ccc:	sub	r2, fp, #4
     cd0:	add	r3, r2, r3
     cd4:	ldr	r2, [r3, #-108]	; 0xffffff94
     cd8:	ldr	r3, [fp, #-32]	; 0xffffffe0
     cdc:	lsl	r3, r3, #2
     ce0:	sub	r1, fp, #4
     ce4:	add	r3, r1, r3
     ce8:	ldr	r3, [r3, #-180]	; 0xffffff4c
     cec:	mul	r3, r3, r2
     cf0:	ldr	r2, [fp, #-12]
     cf4:	sub	r3, r2, r3
     cf8:	str	r3, [fp, #-12]
     cfc:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d00:	add	r3, r3, #1
     d04:	str	r3, [fp, #-32]	; 0xffffffe0
     d08:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d0c:	lsl	r3, r3, #2
     d10:	sub	r2, fp, #4
     d14:	add	r3, r2, r3
     d18:	ldr	r3, [r3, #-108]	; 0xffffff94
     d1c:	ldr	r2, [fp, #-12]
     d20:	add	r3, r2, r3
     d24:	str	r3, [fp, #-12]
     d28:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d2c:	lsl	r3, r3, #2
     d30:	sub	r2, fp, #4
     d34:	add	r3, r2, r3
     d38:	ldr	r3, [r3, #-144]	; 0xffffff70
     d3c:	add	r2, r3, #1
     d40:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d44:	lsl	r3, r3, #2
     d48:	sub	r1, fp, #4
     d4c:	add	r3, r1, r3
     d50:	str	r2, [r3, #-144]	; 0xffffff70
     d54:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d58:	lsl	r3, r3, #2
     d5c:	sub	r2, fp, #4
     d60:	add	r3, r2, r3
     d64:	ldr	r2, [r3, #-144]	; 0xffffff70
     d68:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d6c:	lsl	r3, r3, #2
     d70:	sub	r1, fp, #4
     d74:	add	r3, r1, r3
     d78:	ldr	r3, [r3, #-180]	; 0xffffff4c
     d7c:	cmp	r2, r3
     d80:	beq	cac <transpose_array+0x78c>
     d84:	nop	{0}
     d88:	ldr	r3, [fp, #-16]
     d8c:	add	r3, r3, #1
     d90:	str	r3, [fp, #-16]
     d94:	ldr	r2, [fp, #-16]
     d98:	ldr	r3, [fp, #-8]
     d9c:	cmp	r2, r3
     da0:	blt	c2c <transpose_array+0x70c>
     da4:	b	dc8 <transpose_array+0x8a8>
     da8:	movw	r3, #0
     dac:	movt	r3, #0
     db0:	mov	r2, #172	; 0xac
     db4:	movw	r1, #0
     db8:	movt	r1, #0
     dbc:	movw	r0, #0
     dc0:	movt	r0, #0
     dc4:	bl	0 <__assert_fail>
     dc8:	ldr	r3, [fp, #-8]
     dcc:	ldr	r2, [fp, #-200]	; 0xffffff38
     dd0:	mul	r3, r2, r3
     dd4:	mov	r2, r3
     dd8:	ldr	r1, [fp, #-40]	; 0xffffffd8
     ddc:	ldr	r0, [fp, #-196]	; 0xffffff3c
     de0:	bl	0 <memcpy>
     de4:	ldr	r0, [fp, #-40]	; 0xffffffd8
     de8:	bl	0 <free>
     dec:	mov	r3, #0
     df0:	mov	r0, r3
     df4:	sub	sp, fp, #4
     df8:	ldr	fp, [sp]
     dfc:	add	sp, sp, #4
     e00:	pop	{pc}		; (ldr pc, [sp], #4)

00000e04 <coda_mem_cursor_update_offset>:
     e04:	push	{fp}		; (str fp, [sp, #-4]!)
     e08:	add	fp, sp, #0
     e0c:	sub	sp, sp, #12
     e10:	str	r0, [fp, #-8]
     e14:	ldr	r3, [fp, #-8]
     e18:	ldr	r3, [r3, #4]
     e1c:	sub	r3, r3, #1
     e20:	ldr	r2, [fp, #-8]
     e24:	lsl	r3, r3, #4
     e28:	add	r3, r2, r3
     e2c:	ldr	r3, [r3, #8]
     e30:	ldr	r3, [r3, #8]
     e34:	cmp	r3, #2
     e38:	bne	e90 <coda_mem_cursor_update_offset+0x8c>
     e3c:	ldr	r3, [fp, #-8]
     e40:	ldr	r3, [r3, #4]
     e44:	sub	r3, r3, #1
     e48:	ldr	r2, [fp, #-8]
     e4c:	lsl	r3, r3, #4
     e50:	add	r3, r2, r3
     e54:	ldr	r3, [r3, #8]
     e58:	ldrd	r0, [r3, #24]
     e5c:	ldr	r3, [fp, #-8]
     e60:	ldr	r3, [r3, #4]
     e64:	sub	ip, r3, #1
     e68:	mov	r2, #0
     e6c:	mov	r3, #0
     e70:	lsl	r3, r1, #3
     e74:	orr	r3, r3, r0, lsr #29
     e78:	lsl	r2, r0, #3
     e7c:	ldr	r0, [fp, #-8]
     e80:	add	r1, ip, #1
     e84:	lsl	r1, r1, #4
     e88:	add	r1, r0, r1
     e8c:	strd	r2, [r1]
     e90:	nop	{0}
     e94:	add	sp, fp, #0
     e98:	pop	{fp}		; (ldr fp, [sp], #4)
     e9c:	bx	lr

00000ea0 <coda_mem_cursor_goto_record_field_by_index>:
     ea0:	str	r4, [sp, #-12]!
     ea4:	str	fp, [sp, #4]
     ea8:	str	lr, [sp, #8]
     eac:	add	fp, sp, #8
     eb0:	sub	sp, sp, #20
     eb4:	str	r0, [fp, #-24]	; 0xffffffe8
     eb8:	str	r1, [fp, #-28]	; 0xffffffe4
     ebc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ec0:	ldr	r3, [r3, #4]
     ec4:	sub	r3, r3, #1
     ec8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     ecc:	lsl	r3, r3, #4
     ed0:	add	r3, r2, r3
     ed4:	ldr	r3, [r3, #8]
     ed8:	str	r3, [fp, #-16]
     edc:	ldr	r3, [fp, #-16]
     ee0:	ldr	r3, [r3, #8]
     ee4:	cmp	r3, #0
     ee8:	bne	1020 <coda_mem_cursor_goto_record_field_by_index+0x180>
     eec:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ef0:	cmp	r3, #0
     ef4:	blt	f0c <coda_mem_cursor_goto_record_field_by_index+0x6c>
     ef8:	ldr	r3, [fp, #-16]
     efc:	ldr	r3, [r3, #16]
     f00:	ldr	r2, [fp, #-28]	; 0xffffffe4
     f04:	cmp	r2, r3
     f08:	blt	f30 <coda_mem_cursor_goto_record_field_by_index+0x90>
     f0c:	ldr	r3, [fp, #-16]
     f10:	ldr	r3, [r3, #16]
     f14:	ldr	r2, [fp, #-28]	; 0xffffffe4
     f18:	movw	r1, #0
     f1c:	movt	r1, #0
     f20:	mvn	r0, #100	; 0x64
     f24:	bl	0 <coda_set_error>
     f28:	mvn	r3, #0
     f2c:	b	1060 <coda_mem_cursor_goto_record_field_by_index+0x1c0>
     f30:	ldr	r3, [fp, #-24]	; 0xffffffe8
     f34:	ldr	r3, [r3, #4]
     f38:	add	r2, r3, #1
     f3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     f40:	str	r2, [r3, #4]
     f44:	ldr	r3, [fp, #-16]
     f48:	ldr	r2, [r3, #20]
     f4c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     f50:	lsl	r3, r3, #2
     f54:	add	r3, r2, r3
     f58:	ldr	r3, [r3]
     f5c:	cmp	r3, #0
     f60:	beq	f9c <coda_mem_cursor_goto_record_field_by_index+0xfc>
     f64:	ldr	r3, [fp, #-16]
     f68:	ldr	r2, [r3, #20]
     f6c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     f70:	lsl	r3, r3, #2
     f74:	add	r2, r2, r3
     f78:	ldr	r3, [fp, #-24]	; 0xffffffe8
     f7c:	ldr	r3, [r3, #4]
     f80:	sub	r3, r3, #1
     f84:	ldr	r2, [r2]
     f88:	ldr	r1, [fp, #-24]	; 0xffffffe8
     f8c:	lsl	r3, r3, #4
     f90:	add	r3, r1, r3
     f94:	str	r2, [r3, #8]
     f98:	b	fd0 <coda_mem_cursor_goto_record_field_by_index+0x130>
     f9c:	ldr	r3, [fp, #-16]
     fa0:	ldr	r3, [r3, #4]
     fa4:	ldr	r2, [r3]
     fa8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     fac:	ldr	r3, [r3, #4]
     fb0:	sub	r4, r3, #1
     fb4:	mov	r0, r2
     fb8:	bl	0 <coda_no_data_singleton>
     fbc:	mov	r1, r0
     fc0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     fc4:	lsl	r3, r4, #4
     fc8:	add	r3, r2, r3
     fcc:	str	r1, [r3, #8]
     fd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     fd4:	ldr	r3, [r3, #4]
     fd8:	sub	r3, r3, #1
     fdc:	ldr	r2, [fp, #-24]	; 0xffffffe8
     fe0:	lsl	r3, r3, #4
     fe4:	add	r3, r2, r3
     fe8:	ldr	r2, [fp, #-28]	; 0xffffffe4
     fec:	str	r2, [r3, #12]
     ff0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ff4:	ldr	r3, [r3, #4]
     ff8:	sub	r3, r3, #1
     ffc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1000:	add	r3, r3, #1
    1004:	lsl	r3, r3, #4
    1008:	add	r1, r2, r3
    100c:	mvn	r2, #0
    1010:	mvn	r3, #0
    1014:	strd	r2, [r1]
    1018:	mov	r3, #0
    101c:	b	1060 <coda_mem_cursor_goto_record_field_by_index+0x1c0>
    1020:	ldr	r3, [fp, #-16]
    1024:	ldr	r3, [r3, #8]
    1028:	cmp	r3, #2
    102c:	beq	1050 <coda_mem_cursor_goto_record_field_by_index+0x1b0>
    1030:	movw	r3, #0
    1034:	movt	r3, #0
    1038:	mov	r2, #79	; 0x4f
    103c:	movw	r1, #0
    1040:	movt	r1, #0
    1044:	movw	r0, #0
    1048:	movt	r0, #0
    104c:	bl	0 <__assert_fail>
    1050:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1054:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1058:	bl	0 <coda_ascbin_cursor_goto_record_field_by_index>
    105c:	mov	r3, r0
    1060:	mov	r0, r3
    1064:	sub	sp, fp, #8
    1068:	ldr	r4, [sp]
    106c:	ldr	fp, [sp, #4]
    1070:	add	sp, sp, #8
    1074:	pop	{pc}		; (ldr pc, [sp], #4)

00001078 <coda_mem_cursor_goto_next_record_field>:
    1078:	str	r4, [sp, #-12]!
    107c:	str	fp, [sp, #4]
    1080:	str	lr, [sp, #8]
    1084:	add	fp, sp, #8
    1088:	sub	sp, sp, #20
    108c:	str	r0, [fp, #-24]	; 0xffffffe8
    1090:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1094:	ldr	r3, [r3, #4]
    1098:	sub	r3, r3, #2
    109c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    10a0:	lsl	r3, r3, #4
    10a4:	add	r3, r2, r3
    10a8:	ldr	r3, [r3, #8]
    10ac:	str	r3, [fp, #-16]
    10b0:	ldr	r3, [fp, #-16]
    10b4:	ldr	r3, [r3, #8]
    10b8:	cmp	r3, #0
    10bc:	bne	1204 <coda_mem_cursor_goto_next_record_field+0x18c>
    10c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    10c4:	ldr	r3, [r3, #4]
    10c8:	sub	r3, r3, #1
    10cc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    10d0:	lsl	r3, r3, #4
    10d4:	add	r3, r2, r3
    10d8:	ldr	r3, [r3, #12]
    10dc:	add	r3, r3, #1
    10e0:	str	r3, [fp, #-20]	; 0xffffffec
    10e4:	ldr	r3, [fp, #-20]	; 0xffffffec
    10e8:	cmp	r3, #0
    10ec:	blt	1104 <coda_mem_cursor_goto_next_record_field+0x8c>
    10f0:	ldr	r3, [fp, #-16]
    10f4:	ldr	r3, [r3, #16]
    10f8:	ldr	r2, [fp, #-20]	; 0xffffffec
    10fc:	cmp	r2, r3
    1100:	blt	1128 <coda_mem_cursor_goto_next_record_field+0xb0>
    1104:	ldr	r3, [fp, #-16]
    1108:	ldr	r3, [r3, #16]
    110c:	ldr	r2, [fp, #-20]	; 0xffffffec
    1110:	movw	r1, #0
    1114:	movt	r1, #0
    1118:	mvn	r0, #100	; 0x64
    111c:	bl	0 <coda_set_error>
    1120:	mvn	r3, #0
    1124:	b	1240 <coda_mem_cursor_goto_next_record_field+0x1c8>
    1128:	ldr	r3, [fp, #-16]
    112c:	ldr	r2, [r3, #20]
    1130:	ldr	r3, [fp, #-20]	; 0xffffffec
    1134:	lsl	r3, r3, #2
    1138:	add	r3, r2, r3
    113c:	ldr	r3, [r3]
    1140:	cmp	r3, #0
    1144:	beq	1180 <coda_mem_cursor_goto_next_record_field+0x108>
    1148:	ldr	r3, [fp, #-16]
    114c:	ldr	r2, [r3, #20]
    1150:	ldr	r3, [fp, #-20]	; 0xffffffec
    1154:	lsl	r3, r3, #2
    1158:	add	r2, r2, r3
    115c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1160:	ldr	r3, [r3, #4]
    1164:	sub	r3, r3, #1
    1168:	ldr	r2, [r2]
    116c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1170:	lsl	r3, r3, #4
    1174:	add	r3, r1, r3
    1178:	str	r2, [r3, #8]
    117c:	b	11b4 <coda_mem_cursor_goto_next_record_field+0x13c>
    1180:	ldr	r3, [fp, #-16]
    1184:	ldr	r3, [r3, #4]
    1188:	ldr	r2, [r3]
    118c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1190:	ldr	r3, [r3, #4]
    1194:	sub	r4, r3, #1
    1198:	mov	r0, r2
    119c:	bl	0 <coda_no_data_singleton>
    11a0:	mov	r1, r0
    11a4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    11a8:	lsl	r3, r4, #4
    11ac:	add	r3, r2, r3
    11b0:	str	r1, [r3, #8]
    11b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    11b8:	ldr	r3, [r3, #4]
    11bc:	sub	r3, r3, #1
    11c0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    11c4:	lsl	r3, r3, #4
    11c8:	add	r3, r2, r3
    11cc:	ldr	r2, [fp, #-20]	; 0xffffffec
    11d0:	str	r2, [r3, #12]
    11d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    11d8:	ldr	r3, [r3, #4]
    11dc:	sub	r3, r3, #1
    11e0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    11e4:	add	r3, r3, #1
    11e8:	lsl	r3, r3, #4
    11ec:	add	r1, r2, r3
    11f0:	mvn	r2, #0
    11f4:	mvn	r3, #0
    11f8:	strd	r2, [r1]
    11fc:	mov	r3, #0
    1200:	b	1240 <coda_mem_cursor_goto_next_record_field+0x1c8>
    1204:	ldr	r3, [fp, #-16]
    1208:	ldr	r3, [r3, #8]
    120c:	cmp	r3, #2
    1210:	beq	1234 <coda_mem_cursor_goto_next_record_field+0x1bc>
    1214:	movw	r3, #0
    1218:	movt	r3, #0
    121c:	mov	r2, #111	; 0x6f
    1220:	movw	r1, #0
    1224:	movt	r1, #0
    1228:	movw	r0, #0
    122c:	movt	r0, #0
    1230:	bl	0 <__assert_fail>
    1234:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1238:	bl	0 <coda_ascbin_cursor_goto_next_record_field>
    123c:	mov	r3, r0
    1240:	mov	r0, r3
    1244:	sub	sp, fp, #8
    1248:	ldr	r4, [sp]
    124c:	ldr	fp, [sp, #4]
    1250:	add	sp, sp, #8
    1254:	pop	{pc}		; (ldr pc, [sp], #4)

00001258 <coda_mem_cursor_goto_available_union_field>:
    1258:	str	fp, [sp, #-8]!
    125c:	str	lr, [sp, #4]
    1260:	add	fp, sp, #4
    1264:	sub	sp, sp, #16
    1268:	str	r0, [fp, #-16]
    126c:	ldr	r3, [fp, #-16]
    1270:	ldr	r3, [r3, #4]
    1274:	sub	r3, r3, #1
    1278:	ldr	r2, [fp, #-16]
    127c:	lsl	r3, r3, #4
    1280:	add	r3, r2, r3
    1284:	ldr	r3, [r3, #8]
    1288:	str	r3, [fp, #-8]
    128c:	ldr	r3, [fp, #-8]
    1290:	ldr	r3, [r3, #8]
    1294:	cmp	r3, #0
    1298:	bne	1344 <coda_mem_cursor_goto_available_union_field+0xec>
    129c:	sub	r3, fp, #12
    12a0:	mov	r1, r3
    12a4:	ldr	r0, [fp, #-16]
    12a8:	bl	1f44 <coda_mem_cursor_get_available_union_field_index>
    12ac:	mov	r3, r0
    12b0:	cmp	r3, #0
    12b4:	beq	12c0 <coda_mem_cursor_goto_available_union_field+0x68>
    12b8:	mvn	r3, #0
    12bc:	b	1380 <coda_mem_cursor_goto_available_union_field+0x128>
    12c0:	ldr	r3, [fp, #-8]
    12c4:	ldr	r2, [r3, #20]
    12c8:	ldr	r3, [fp, #-12]
    12cc:	lsl	r3, r3, #2
    12d0:	add	r2, r2, r3
    12d4:	ldr	r3, [fp, #-16]
    12d8:	ldr	r3, [r3, #4]
    12dc:	sub	r3, r3, #1
    12e0:	ldr	r2, [r2]
    12e4:	ldr	r1, [fp, #-16]
    12e8:	lsl	r3, r3, #4
    12ec:	add	r3, r1, r3
    12f0:	str	r2, [r3, #8]
    12f4:	ldr	r3, [fp, #-16]
    12f8:	ldr	r3, [r3, #4]
    12fc:	sub	r3, r3, #1
    1300:	ldr	r2, [fp, #-12]
    1304:	ldr	r1, [fp, #-16]
    1308:	lsl	r3, r3, #4
    130c:	add	r3, r1, r3
    1310:	str	r2, [r3, #12]
    1314:	ldr	r3, [fp, #-16]
    1318:	ldr	r3, [r3, #4]
    131c:	sub	r3, r3, #1
    1320:	ldr	r2, [fp, #-16]
    1324:	add	r3, r3, #1
    1328:	lsl	r3, r3, #4
    132c:	add	r1, r2, r3
    1330:	mvn	r2, #0
    1334:	mvn	r3, #0
    1338:	strd	r2, [r1]
    133c:	mov	r3, #0
    1340:	b	1380 <coda_mem_cursor_goto_available_union_field+0x128>
    1344:	ldr	r3, [fp, #-8]
    1348:	ldr	r3, [r3, #8]
    134c:	cmp	r3, #2
    1350:	beq	1374 <coda_mem_cursor_goto_available_union_field+0x11c>
    1354:	movw	r3, #0
    1358:	movt	r3, #0
    135c:	mov	r2, #134	; 0x86
    1360:	movw	r1, #0
    1364:	movt	r1, #0
    1368:	movw	r0, #0
    136c:	movt	r0, #0
    1370:	bl	0 <__assert_fail>
    1374:	ldr	r0, [fp, #-16]
    1378:	bl	0 <coda_ascbin_cursor_goto_available_union_field>
    137c:	mov	r3, r0
    1380:	mov	r0, r3
    1384:	sub	sp, fp, #4
    1388:	ldr	fp, [sp]
    138c:	add	sp, sp, #4
    1390:	pop	{pc}		; (ldr pc, [sp], #4)

00001394 <coda_mem_cursor_goto_array_element>:
    1394:	str	fp, [sp, #-8]!
    1398:	str	lr, [sp, #4]
    139c:	add	fp, sp, #4
    13a0:	sub	sp, sp, #24
    13a4:	str	r0, [fp, #-16]
    13a8:	str	r1, [fp, #-20]	; 0xffffffec
    13ac:	str	r2, [fp, #-24]	; 0xffffffe8
    13b0:	ldr	r3, [fp, #-16]
    13b4:	ldr	r3, [r3, #4]
    13b8:	sub	r3, r3, #1
    13bc:	ldr	r2, [fp, #-16]
    13c0:	lsl	r3, r3, #4
    13c4:	add	r3, r2, r3
    13c8:	ldr	r3, [r3, #8]
    13cc:	str	r3, [fp, #-8]
    13d0:	ldr	r3, [fp, #-8]
    13d4:	ldr	r3, [r3, #8]
    13d8:	cmp	r3, #1
    13dc:	bne	1510 <coda_mem_cursor_goto_array_element+0x17c>
    13e0:	ldr	r3, [fp, #-20]	; 0xffffffec
    13e4:	cmp	r3, #1
    13e8:	beq	1408 <coda_mem_cursor_goto_array_element+0x74>
    13ec:	ldr	r2, [fp, #-20]	; 0xffffffec
    13f0:	movw	r1, #0
    13f4:	movt	r1, #0
    13f8:	mvn	r0, #105	; 0x69
    13fc:	bl	0 <coda_set_error>
    1400:	mvn	r3, #0
    1404:	b	1554 <coda_mem_cursor_goto_array_element+0x1c0>
    1408:	ldr	r3, [pc, #344]	; 1568 <coda_mem_cursor_goto_array_element+0x1d4>
    140c:	ldr	r3, [pc, r3]
    1410:	mrc	15, 0, r2, cr13, cr0, {3}
    1414:	ldr	r3, [r2, r3]
    1418:	cmp	r3, #0
    141c:	beq	1470 <coda_mem_cursor_goto_array_element+0xdc>
    1420:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1424:	ldr	r3, [r3]
    1428:	cmp	r3, #0
    142c:	blt	1448 <coda_mem_cursor_goto_array_element+0xb4>
    1430:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1434:	ldr	r2, [r3]
    1438:	ldr	r3, [fp, #-8]
    143c:	ldr	r3, [r3, #16]
    1440:	cmp	r2, r3
    1444:	blt	1470 <coda_mem_cursor_goto_array_element+0xdc>
    1448:	ldr	r3, [fp, #-24]	; 0xffffffe8
    144c:	ldr	r2, [r3]
    1450:	ldr	r3, [fp, #-8]
    1454:	ldr	r3, [r3, #16]
    1458:	movw	r1, #0
    145c:	movt	r1, #0
    1460:	mvn	r0, #106	; 0x6a
    1464:	bl	0 <coda_set_error>
    1468:	mvn	r3, #0
    146c:	b	1554 <coda_mem_cursor_goto_array_element+0x1c0>
    1470:	ldr	r3, [fp, #-16]
    1474:	ldr	r3, [r3, #4]
    1478:	add	r2, r3, #1
    147c:	ldr	r3, [fp, #-16]
    1480:	str	r2, [r3, #4]
    1484:	ldr	r3, [fp, #-8]
    1488:	ldr	r2, [r3, #20]
    148c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1490:	ldr	r3, [r3]
    1494:	lsl	r3, r3, #2
    1498:	add	r2, r2, r3
    149c:	ldr	r3, [fp, #-16]
    14a0:	ldr	r3, [r3, #4]
    14a4:	sub	r3, r3, #1
    14a8:	ldr	r2, [r2]
    14ac:	ldr	r1, [fp, #-16]
    14b0:	lsl	r3, r3, #4
    14b4:	add	r3, r1, r3
    14b8:	str	r2, [r3, #8]
    14bc:	ldr	r3, [fp, #-16]
    14c0:	ldr	r3, [r3, #4]
    14c4:	sub	r3, r3, #1
    14c8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    14cc:	ldr	r2, [r2]
    14d0:	ldr	r1, [fp, #-16]
    14d4:	lsl	r3, r3, #4
    14d8:	add	r3, r1, r3
    14dc:	str	r2, [r3, #12]
    14e0:	ldr	r3, [fp, #-16]
    14e4:	ldr	r3, [r3, #4]
    14e8:	sub	r3, r3, #1
    14ec:	ldr	r2, [fp, #-16]
    14f0:	add	r3, r3, #1
    14f4:	lsl	r3, r3, #4
    14f8:	add	r1, r2, r3
    14fc:	mvn	r2, #0
    1500:	mvn	r3, #0
    1504:	strd	r2, [r1]
    1508:	mov	r3, #0
    150c:	b	1554 <coda_mem_cursor_goto_array_element+0x1c0>
    1510:	ldr	r3, [fp, #-8]
    1514:	ldr	r3, [r3, #8]
    1518:	cmp	r3, #2
    151c:	beq	1540 <coda_mem_cursor_goto_array_element+0x1ac>
    1520:	movw	r3, #0
    1524:	movt	r3, #0
    1528:	mov	r2, #169	; 0xa9
    152c:	movw	r1, #0
    1530:	movt	r1, #0
    1534:	movw	r0, #0
    1538:	movt	r0, #0
    153c:	bl	0 <__assert_fail>
    1540:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1544:	ldr	r1, [fp, #-20]	; 0xffffffec
    1548:	ldr	r0, [fp, #-16]
    154c:	bl	0 <coda_ascbin_cursor_goto_array_element>
    1550:	mov	r3, r0
    1554:	mov	r0, r3
    1558:	sub	sp, fp, #4
    155c:	ldr	fp, [sp]
    1560:	add	sp, sp, #4
    1564:	pop	{pc}		; (ldr pc, [sp], #4)
    1568:	.word	0x00000154

0000156c <coda_mem_cursor_goto_array_element_by_index>:
    156c:	str	fp, [sp, #-8]!
    1570:	str	lr, [sp, #4]
    1574:	add	fp, sp, #4
    1578:	sub	sp, sp, #16
    157c:	str	r0, [fp, #-16]
    1580:	str	r1, [fp, #-20]	; 0xffffffec
    1584:	ldr	r3, [fp, #-16]
    1588:	ldr	r3, [r3, #4]
    158c:	sub	r3, r3, #1
    1590:	ldr	r2, [fp, #-16]
    1594:	lsl	r3, r3, #4
    1598:	add	r3, r2, r3
    159c:	ldr	r3, [r3, #8]
    15a0:	str	r3, [fp, #-8]
    15a4:	ldr	r3, [fp, #-8]
    15a8:	ldr	r3, [r3, #8]
    15ac:	cmp	r3, #1
    15b0:	bne	16a8 <coda_mem_cursor_goto_array_element_by_index+0x13c>
    15b4:	ldr	r3, [pc, #320]	; 16fc <coda_mem_cursor_goto_array_element_by_index+0x190>
    15b8:	ldr	r3, [pc, r3]
    15bc:	mrc	15, 0, r2, cr13, cr0, {3}
    15c0:	ldr	r3, [r2, r3]
    15c4:	cmp	r3, #0
    15c8:	beq	1610 <coda_mem_cursor_goto_array_element_by_index+0xa4>
    15cc:	ldr	r3, [fp, #-20]	; 0xffffffec
    15d0:	cmp	r3, #0
    15d4:	blt	15ec <coda_mem_cursor_goto_array_element_by_index+0x80>
    15d8:	ldr	r3, [fp, #-8]
    15dc:	ldr	r3, [r3, #16]
    15e0:	ldr	r2, [fp, #-20]	; 0xffffffec
    15e4:	cmp	r2, r3
    15e8:	blt	1610 <coda_mem_cursor_goto_array_element_by_index+0xa4>
    15ec:	ldr	r3, [fp, #-8]
    15f0:	ldr	r3, [r3, #16]
    15f4:	ldr	r2, [fp, #-20]	; 0xffffffec
    15f8:	movw	r1, #0
    15fc:	movt	r1, #0
    1600:	mvn	r0, #106	; 0x6a
    1604:	bl	0 <coda_set_error>
    1608:	mvn	r3, #0
    160c:	b	16e8 <coda_mem_cursor_goto_array_element_by_index+0x17c>
    1610:	ldr	r3, [fp, #-16]
    1614:	ldr	r3, [r3, #4]
    1618:	add	r2, r3, #1
    161c:	ldr	r3, [fp, #-16]
    1620:	str	r2, [r3, #4]
    1624:	ldr	r3, [fp, #-8]
    1628:	ldr	r2, [r3, #20]
    162c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1630:	lsl	r3, r3, #2
    1634:	add	r2, r2, r3
    1638:	ldr	r3, [fp, #-16]
    163c:	ldr	r3, [r3, #4]
    1640:	sub	r3, r3, #1
    1644:	ldr	r2, [r2]
    1648:	ldr	r1, [fp, #-16]
    164c:	lsl	r3, r3, #4
    1650:	add	r3, r1, r3
    1654:	str	r2, [r3, #8]
    1658:	ldr	r3, [fp, #-16]
    165c:	ldr	r3, [r3, #4]
    1660:	sub	r3, r3, #1
    1664:	ldr	r2, [fp, #-16]
    1668:	lsl	r3, r3, #4
    166c:	add	r3, r2, r3
    1670:	ldr	r2, [fp, #-20]	; 0xffffffec
    1674:	str	r2, [r3, #12]
    1678:	ldr	r3, [fp, #-16]
    167c:	ldr	r3, [r3, #4]
    1680:	sub	r3, r3, #1
    1684:	ldr	r2, [fp, #-16]
    1688:	add	r3, r3, #1
    168c:	lsl	r3, r3, #4
    1690:	add	r1, r2, r3
    1694:	mvn	r2, #0
    1698:	mvn	r3, #0
    169c:	strd	r2, [r1]
    16a0:	mov	r3, #0
    16a4:	b	16e8 <coda_mem_cursor_goto_array_element_by_index+0x17c>
    16a8:	ldr	r3, [fp, #-8]
    16ac:	ldr	r3, [r3, #8]
    16b0:	cmp	r3, #2
    16b4:	beq	16d8 <coda_mem_cursor_goto_array_element_by_index+0x16c>
    16b8:	movw	r3, #0
    16bc:	movt	r3, #0
    16c0:	mov	r2, #197	; 0xc5
    16c4:	movw	r1, #0
    16c8:	movt	r1, #0
    16cc:	movw	r0, #0
    16d0:	movt	r0, #0
    16d4:	bl	0 <__assert_fail>
    16d8:	ldr	r1, [fp, #-20]	; 0xffffffec
    16dc:	ldr	r0, [fp, #-16]
    16e0:	bl	0 <coda_ascbin_cursor_goto_array_element_by_index>
    16e4:	mov	r3, r0
    16e8:	mov	r0, r3
    16ec:	sub	sp, fp, #4
    16f0:	ldr	fp, [sp]
    16f4:	add	sp, sp, #4
    16f8:	pop	{pc}		; (ldr pc, [sp], #4)
    16fc:	.word	0x0000013c

00001700 <coda_mem_cursor_goto_next_array_element>:
    1700:	str	r4, [sp, #-12]!
    1704:	str	fp, [sp, #4]
    1708:	str	lr, [sp, #8]
    170c:	add	fp, sp, #8
    1710:	sub	sp, sp, #20
    1714:	str	r0, [fp, #-24]	; 0xffffffe8
    1718:	ldr	r3, [fp, #-24]	; 0xffffffe8
    171c:	ldr	r3, [r3, #4]
    1720:	sub	r3, r3, #2
    1724:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1728:	lsl	r3, r3, #4
    172c:	add	r3, r2, r3
    1730:	ldr	r3, [r3, #8]
    1734:	str	r3, [fp, #-16]
    1738:	ldr	r3, [fp, #-16]
    173c:	ldr	r3, [r3, #8]
    1740:	cmp	r3, #1
    1744:	bne	188c <coda_mem_cursor_goto_next_array_element+0x18c>
    1748:	ldr	r3, [fp, #-24]	; 0xffffffe8
    174c:	ldr	r3, [r3, #4]
    1750:	sub	r3, r3, #1
    1754:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1758:	lsl	r3, r3, #4
    175c:	add	r3, r2, r3
    1760:	ldr	r3, [r3, #12]
    1764:	add	r3, r3, #1
    1768:	str	r3, [fp, #-20]	; 0xffffffec
    176c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1770:	cmp	r3, #0
    1774:	blt	178c <coda_mem_cursor_goto_next_array_element+0x8c>
    1778:	ldr	r3, [fp, #-16]
    177c:	ldr	r3, [r3, #16]
    1780:	ldr	r2, [fp, #-20]	; 0xffffffec
    1784:	cmp	r2, r3
    1788:	blt	17b0 <coda_mem_cursor_goto_next_array_element+0xb0>
    178c:	ldr	r3, [fp, #-16]
    1790:	ldr	r3, [r3, #16]
    1794:	ldr	r2, [fp, #-20]	; 0xffffffec
    1798:	movw	r1, #0
    179c:	movt	r1, #0
    17a0:	mvn	r0, #106	; 0x6a
    17a4:	bl	0 <coda_set_error>
    17a8:	mvn	r3, #0
    17ac:	b	18c8 <coda_mem_cursor_goto_next_array_element+0x1c8>
    17b0:	ldr	r3, [fp, #-16]
    17b4:	ldr	r2, [r3, #20]
    17b8:	ldr	r3, [fp, #-20]	; 0xffffffec
    17bc:	lsl	r3, r3, #2
    17c0:	add	r3, r2, r3
    17c4:	ldr	r3, [r3]
    17c8:	cmp	r3, #0
    17cc:	beq	1808 <coda_mem_cursor_goto_next_array_element+0x108>
    17d0:	ldr	r3, [fp, #-16]
    17d4:	ldr	r2, [r3, #20]
    17d8:	ldr	r3, [fp, #-20]	; 0xffffffec
    17dc:	lsl	r3, r3, #2
    17e0:	add	r2, r2, r3
    17e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    17e8:	ldr	r3, [r3, #4]
    17ec:	sub	r3, r3, #1
    17f0:	ldr	r2, [r2]
    17f4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    17f8:	lsl	r3, r3, #4
    17fc:	add	r3, r1, r3
    1800:	str	r2, [r3, #8]
    1804:	b	183c <coda_mem_cursor_goto_next_array_element+0x13c>
    1808:	ldr	r3, [fp, #-16]
    180c:	ldr	r3, [r3, #4]
    1810:	ldr	r2, [r3]
    1814:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1818:	ldr	r3, [r3, #4]
    181c:	sub	r4, r3, #1
    1820:	mov	r0, r2
    1824:	bl	0 <coda_no_data_singleton>
    1828:	mov	r1, r0
    182c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1830:	lsl	r3, r4, #4
    1834:	add	r3, r2, r3
    1838:	str	r1, [r3, #8]
    183c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1840:	ldr	r3, [r3, #4]
    1844:	sub	r3, r3, #1
    1848:	ldr	r2, [fp, #-24]	; 0xffffffe8
    184c:	lsl	r3, r3, #4
    1850:	add	r3, r2, r3
    1854:	ldr	r2, [fp, #-20]	; 0xffffffec
    1858:	str	r2, [r3, #12]
    185c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1860:	ldr	r3, [r3, #4]
    1864:	sub	r3, r3, #1
    1868:	ldr	r2, [fp, #-24]	; 0xffffffe8
    186c:	add	r3, r3, #1
    1870:	lsl	r3, r3, #4
    1874:	add	r1, r2, r3
    1878:	mvn	r2, #0
    187c:	mvn	r3, #0
    1880:	strd	r2, [r1]
    1884:	mov	r3, #0
    1888:	b	18c8 <coda_mem_cursor_goto_next_array_element+0x1c8>
    188c:	ldr	r3, [fp, #-16]
    1890:	ldr	r3, [r3, #8]
    1894:	cmp	r3, #2
    1898:	beq	18bc <coda_mem_cursor_goto_next_array_element+0x1bc>
    189c:	movw	r3, #0
    18a0:	movt	r3, #0
    18a4:	mov	r2, #229	; 0xe5
    18a8:	movw	r1, #0
    18ac:	movt	r1, #0
    18b0:	movw	r0, #0
    18b4:	movt	r0, #0
    18b8:	bl	0 <__assert_fail>
    18bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    18c0:	bl	0 <coda_ascbin_cursor_goto_next_array_element>
    18c4:	mov	r3, r0
    18c8:	mov	r0, r3
    18cc:	sub	sp, fp, #8
    18d0:	ldr	r4, [sp]
    18d4:	ldr	fp, [sp, #4]
    18d8:	add	sp, sp, #8
    18dc:	pop	{pc}		; (ldr pc, [sp], #4)

000018e0 <coda_mem_cursor_goto_attributes>:
    18e0:	str	r4, [sp, #-12]!
    18e4:	str	fp, [sp, #4]
    18e8:	str	lr, [sp, #8]
    18ec:	add	fp, sp, #8
    18f0:	sub	sp, sp, #12
    18f4:	str	r0, [fp, #-16]
    18f8:	ldr	r3, [fp, #-16]
    18fc:	ldr	r3, [r3, #4]
    1900:	add	r2, r3, #1
    1904:	ldr	r3, [fp, #-16]
    1908:	str	r2, [r3, #4]
    190c:	ldr	r3, [fp, #-16]
    1910:	ldr	r3, [r3, #4]
    1914:	sub	r3, r3, #2
    1918:	ldr	r2, [fp, #-16]
    191c:	lsl	r3, r3, #4
    1920:	add	r3, r2, r3
    1924:	ldr	r3, [r3, #8]
    1928:	ldr	r3, [r3, #12]
    192c:	cmp	r3, #0
    1930:	beq	1974 <coda_mem_cursor_goto_attributes+0x94>
    1934:	ldr	r3, [fp, #-16]
    1938:	ldr	r3, [r3, #4]
    193c:	sub	r3, r3, #2
    1940:	ldr	r2, [fp, #-16]
    1944:	lsl	r3, r3, #4
    1948:	add	r3, r2, r3
    194c:	ldr	r2, [r3, #8]
    1950:	ldr	r3, [fp, #-16]
    1954:	ldr	r3, [r3, #4]
    1958:	sub	r3, r3, #1
    195c:	ldr	r2, [r2, #12]
    1960:	ldr	r1, [fp, #-16]
    1964:	lsl	r3, r3, #4
    1968:	add	r3, r1, r3
    196c:	str	r2, [r3, #8]
    1970:	b	19c0 <coda_mem_cursor_goto_attributes+0xe0>
    1974:	ldr	r3, [fp, #-16]
    1978:	ldr	r3, [r3, #4]
    197c:	sub	r3, r3, #2
    1980:	ldr	r2, [fp, #-16]
    1984:	lsl	r3, r3, #4
    1988:	add	r3, r2, r3
    198c:	ldr	r3, [r3, #8]
    1990:	ldr	r3, [r3, #4]
    1994:	ldr	r2, [r3]
    1998:	ldr	r3, [fp, #-16]
    199c:	ldr	r3, [r3, #4]
    19a0:	sub	r4, r3, #1
    19a4:	mov	r0, r2
    19a8:	bl	0 <coda_mem_empty_record>
    19ac:	mov	r1, r0
    19b0:	ldr	r2, [fp, #-16]
    19b4:	lsl	r3, r4, #4
    19b8:	add	r3, r2, r3
    19bc:	str	r1, [r3, #8]
    19c0:	ldr	r3, [fp, #-16]
    19c4:	ldr	r3, [r3, #4]
    19c8:	sub	r3, r3, #1
    19cc:	ldr	r2, [fp, #-16]
    19d0:	lsl	r3, r3, #4
    19d4:	add	r3, r2, r3
    19d8:	mvn	r2, #0
    19dc:	str	r2, [r3, #12]
    19e0:	ldr	r3, [fp, #-16]
    19e4:	ldr	r3, [r3, #4]
    19e8:	sub	r3, r3, #1
    19ec:	ldr	r2, [fp, #-16]
    19f0:	add	r3, r3, #1
    19f4:	lsl	r3, r3, #4
    19f8:	add	r1, r2, r3
    19fc:	mvn	r2, #0
    1a00:	mvn	r3, #0
    1a04:	strd	r2, [r1]
    1a08:	mov	r3, #0
    1a0c:	mov	r0, r3
    1a10:	sub	sp, fp, #8
    1a14:	ldr	r4, [sp]
    1a18:	ldr	fp, [sp, #4]
    1a1c:	add	sp, sp, #8
    1a20:	pop	{pc}		; (ldr pc, [sp], #4)

00001a24 <coda_mem_cursor_use_base_type_of_special_type>:
    1a24:	str	fp, [sp, #-8]!
    1a28:	str	lr, [sp, #4]
    1a2c:	add	fp, sp, #4
    1a30:	sub	sp, sp, #16
    1a34:	str	r0, [fp, #-16]
    1a38:	ldr	r3, [fp, #-16]
    1a3c:	ldr	r3, [r3, #4]
    1a40:	sub	r3, r3, #1
    1a44:	ldr	r2, [fp, #-16]
    1a48:	lsl	r3, r3, #4
    1a4c:	add	r3, r2, r3
    1a50:	ldr	r3, [r3, #8]
    1a54:	str	r3, [fp, #-8]
    1a58:	ldr	r3, [fp, #-8]
    1a5c:	ldr	r3, [r3, #8]
    1a60:	cmp	r3, #3
    1a64:	bne	1aac <coda_mem_cursor_use_base_type_of_special_type+0x88>
    1a68:	ldr	r3, [fp, #-16]
    1a6c:	ldr	r3, [r3, #4]
    1a70:	sub	r3, r3, #1
    1a74:	ldr	r2, [fp, #-16]
    1a78:	lsl	r3, r3, #4
    1a7c:	add	r3, r2, r3
    1a80:	ldr	r2, [r3, #8]
    1a84:	ldr	r3, [fp, #-16]
    1a88:	ldr	r3, [r3, #4]
    1a8c:	sub	r3, r3, #1
    1a90:	ldr	r2, [r2, #16]
    1a94:	ldr	r1, [fp, #-16]
    1a98:	lsl	r3, r3, #4
    1a9c:	add	r3, r1, r3
    1aa0:	str	r2, [r3, #8]
    1aa4:	mov	r3, #0
    1aa8:	b	1b08 <coda_mem_cursor_use_base_type_of_special_type+0xe4>
    1aac:	ldr	r3, [fp, #-8]
    1ab0:	ldr	r3, [r3, #8]
    1ab4:	cmp	r3, #2
    1ab8:	beq	1adc <coda_mem_cursor_use_base_type_of_special_type+0xb8>
    1abc:	movw	r3, #0
    1ac0:	movt	r3, #0
    1ac4:	movw	r2, #263	; 0x107
    1ac8:	movw	r1, #0
    1acc:	movt	r1, #0
    1ad0:	movw	r0, #0
    1ad4:	movt	r0, #0
    1ad8:	bl	0 <__assert_fail>
    1adc:	ldr	r3, [fp, #-8]
    1ae0:	ldr	r2, [r3, #4]
    1ae4:	ldr	r3, [fp, #-16]
    1ae8:	ldr	r3, [r3, #4]
    1aec:	sub	r3, r3, #1
    1af0:	ldr	r2, [r2, #44]	; 0x2c
    1af4:	ldr	r1, [fp, #-16]
    1af8:	lsl	r3, r3, #4
    1afc:	add	r3, r1, r3
    1b00:	str	r2, [r3, #8]
    1b04:	mov	r3, #0
    1b08:	mov	r0, r3
    1b0c:	sub	sp, fp, #4
    1b10:	ldr	fp, [sp]
    1b14:	add	sp, sp, #4
    1b18:	pop	{pc}		; (ldr pc, [sp], #4)

00001b1c <coda_mem_cursor_get_string_length>:
    1b1c:	str	fp, [sp, #-8]!
    1b20:	str	lr, [sp, #4]
    1b24:	add	fp, sp, #4
    1b28:	sub	sp, sp, #16
    1b2c:	str	r0, [fp, #-16]
    1b30:	str	r1, [fp, #-20]	; 0xffffffec
    1b34:	sub	r3, fp, #12
    1b38:	mov	r1, r3
    1b3c:	ldr	r0, [fp, #-16]
    1b40:	bl	1bb0 <coda_mem_cursor_get_bit_size>
    1b44:	mov	r3, r0
    1b48:	cmp	r3, #0
    1b4c:	beq	1b58 <coda_mem_cursor_get_string_length+0x3c>
    1b50:	mvn	r3, #0
    1b54:	b	1b9c <coda_mem_cursor_get_string_length+0x80>
    1b58:	ldrd	r2, [fp, #-12]
    1b5c:	cmp	r2, #0
    1b60:	sbcs	r3, r3, #0
    1b64:	bge	1b78 <coda_mem_cursor_get_string_length+0x5c>
    1b68:	ldr	r3, [fp, #-20]	; 0xffffffec
    1b6c:	mvn	r2, #0
    1b70:	str	r2, [r3]
    1b74:	b	1b98 <coda_mem_cursor_get_string_length+0x7c>
    1b78:	ldrd	r0, [fp, #-12]
    1b7c:	mov	r2, #0
    1b80:	mov	r3, #0
    1b84:	lsr	r2, r0, #3
    1b88:	orr	r2, r2, r1, lsl #29
    1b8c:	asr	r3, r1, #3
    1b90:	ldr	r3, [fp, #-20]	; 0xffffffec
    1b94:	str	r2, [r3]
    1b98:	mov	r3, #0
    1b9c:	mov	r0, r3
    1ba0:	sub	sp, fp, #4
    1ba4:	ldr	fp, [sp]
    1ba8:	add	sp, sp, #4
    1bac:	pop	{pc}		; (ldr pc, [sp], #4)

00001bb0 <coda_mem_cursor_get_bit_size>:
    1bb0:	str	fp, [sp, #-8]!
    1bb4:	str	lr, [sp, #4]
    1bb8:	add	fp, sp, #4
    1bbc:	sub	sp, sp, #536	; 0x218
    1bc0:	str	r0, [fp, #-536]	; 0xfffffde8
    1bc4:	str	r1, [fp, #-540]	; 0xfffffde4
    1bc8:	ldr	r3, [fp, #-536]	; 0xfffffde8
    1bcc:	ldr	r3, [r3, #4]
    1bd0:	sub	r3, r3, #1
    1bd4:	ldr	r2, [fp, #-536]	; 0xfffffde8
    1bd8:	lsl	r3, r3, #4
    1bdc:	add	r3, r2, r3
    1be0:	ldr	r3, [r3, #8]
    1be4:	str	r3, [fp, #-8]
    1be8:	ldr	r3, [fp, #-8]
    1bec:	ldr	r3, [r3, #8]
    1bf0:	cmp	r3, #3
    1bf4:	bne	1c48 <coda_mem_cursor_get_bit_size+0x98>
    1bf8:	ldr	r2, [fp, #-536]	; 0xfffffde8
    1bfc:	sub	r3, fp, #532	; 0x214
    1c00:	mov	r1, r2
    1c04:	mov	r2, #520	; 0x208
    1c08:	mov	r0, r3
    1c0c:	bl	0 <memcpy>
    1c10:	sub	r3, fp, #532	; 0x214
    1c14:	mov	r0, r3
    1c18:	bl	0 <coda_cursor_use_base_type_of_special_type>
    1c1c:	mov	r3, r0
    1c20:	cmp	r3, #0
    1c24:	beq	1c30 <coda_mem_cursor_get_bit_size+0x80>
    1c28:	mvn	r3, #0
    1c2c:	b	1cf4 <coda_mem_cursor_get_bit_size+0x144>
    1c30:	sub	r3, fp, #532	; 0x214
    1c34:	ldr	r1, [fp, #-540]	; 0xfffffde4
    1c38:	mov	r0, r3
    1c3c:	bl	0 <coda_cursor_get_bit_size>
    1c40:	mov	r3, r0
    1c44:	b	1cf4 <coda_mem_cursor_get_bit_size+0x144>
    1c48:	ldr	r3, [fp, #-8]
    1c4c:	ldr	r3, [r3, #8]
    1c50:	cmp	r3, #2
    1c54:	bne	1ce0 <coda_mem_cursor_get_bit_size+0x130>
    1c58:	ldr	r3, [fp, #-8]
    1c5c:	ldr	r3, [r3, #4]
    1c60:	ldr	r3, [r3]
    1c64:	cmp	r3, #0
    1c68:	bne	1c8c <coda_mem_cursor_get_bit_size+0xdc>
    1c6c:	ldr	r1, [fp, #-540]	; 0xfffffde4
    1c70:	ldr	r0, [fp, #-536]	; 0xfffffde8
    1c74:	bl	0 <coda_ascii_cursor_get_bit_size>
    1c78:	mov	r3, r0
    1c7c:	cmp	r3, #0
    1c80:	beq	1cac <coda_mem_cursor_get_bit_size+0xfc>
    1c84:	mvn	r3, #0
    1c88:	b	1cf4 <coda_mem_cursor_get_bit_size+0x144>
    1c8c:	ldr	r1, [fp, #-540]	; 0xfffffde4
    1c90:	ldr	r0, [fp, #-536]	; 0xfffffde8
    1c94:	bl	0 <coda_bin_cursor_get_bit_size>
    1c98:	mov	r3, r0
    1c9c:	cmp	r3, #0
    1ca0:	beq	1cac <coda_mem_cursor_get_bit_size+0xfc>
    1ca4:	mvn	r3, #0
    1ca8:	b	1cf4 <coda_mem_cursor_get_bit_size+0x144>
    1cac:	ldr	r3, [fp, #-540]	; 0xfffffde4
    1cb0:	ldrd	r2, [r3]
    1cb4:	cmp	r2, #0
    1cb8:	sbcs	r3, r3, #0
    1cbc:	bge	1cf0 <coda_mem_cursor_get_bit_size+0x140>
    1cc0:	ldr	r3, [fp, #-8]
    1cc4:	ldr	r3, [r3, #16]
    1cc8:	lsl	r3, r3, #3
    1ccc:	mov	r2, r3
    1cd0:	asr	r3, r2, #31
    1cd4:	ldr	r1, [fp, #-540]	; 0xfffffde4
    1cd8:	strd	r2, [r1]
    1cdc:	b	1cf0 <coda_mem_cursor_get_bit_size+0x140>
    1ce0:	ldr	r1, [fp, #-540]	; 0xfffffde4
    1ce4:	mvn	r2, #0
    1ce8:	mvn	r3, #0
    1cec:	strd	r2, [r1]
    1cf0:	mov	r3, #0
    1cf4:	mov	r0, r3
    1cf8:	sub	sp, fp, #4
    1cfc:	ldr	fp, [sp]
    1d00:	add	sp, sp, #4
    1d04:	pop	{pc}		; (ldr pc, [sp], #4)

00001d08 <coda_mem_cursor_get_num_elements>:
    1d08:	str	fp, [sp, #-8]!
    1d0c:	str	lr, [sp, #4]
    1d10:	add	fp, sp, #4
    1d14:	sub	sp, sp, #16
    1d18:	str	r0, [fp, #-16]
    1d1c:	str	r1, [fp, #-20]	; 0xffffffec
    1d20:	ldr	r3, [fp, #-16]
    1d24:	ldr	r3, [r3, #4]
    1d28:	sub	r3, r3, #1
    1d2c:	ldr	r2, [fp, #-16]
    1d30:	lsl	r3, r3, #4
    1d34:	add	r3, r2, r3
    1d38:	ldr	r3, [r3, #8]
    1d3c:	str	r3, [fp, #-8]
    1d40:	ldr	r3, [fp, #-8]
    1d44:	ldr	r3, [r3, #8]
    1d48:	cmp	r3, #3
    1d4c:	ldrls	pc, [pc, r3, lsl #2]
    1d50:	b	1e08 <coda_mem_cursor_get_num_elements+0x100>
    1d54:	.word	0x00001d64
    1d58:	.word	0x00001d90
    1d5c:	.word	0x00001dbc
    1d60:	.word	0x00001df8
    1d64:	ldr	r3, [fp, #-16]
    1d68:	ldr	r3, [r3, #4]
    1d6c:	sub	r3, r3, #1
    1d70:	ldr	r2, [fp, #-16]
    1d74:	lsl	r3, r3, #4
    1d78:	add	r3, r2, r3
    1d7c:	ldr	r3, [r3, #8]
    1d80:	ldr	r2, [r3, #16]
    1d84:	ldr	r3, [fp, #-20]	; 0xffffffec
    1d88:	str	r2, [r3]
    1d8c:	b	1e08 <coda_mem_cursor_get_num_elements+0x100>
    1d90:	ldr	r3, [fp, #-16]
    1d94:	ldr	r3, [r3, #4]
    1d98:	sub	r3, r3, #1
    1d9c:	ldr	r2, [fp, #-16]
    1da0:	lsl	r3, r3, #4
    1da4:	add	r3, r2, r3
    1da8:	ldr	r3, [r3, #8]
    1dac:	ldr	r2, [r3, #16]
    1db0:	ldr	r3, [fp, #-20]	; 0xffffffec
    1db4:	str	r2, [r3]
    1db8:	b	1e08 <coda_mem_cursor_get_num_elements+0x100>
    1dbc:	ldr	r3, [fp, #-8]
    1dc0:	ldr	r3, [r3, #4]
    1dc4:	ldr	r3, [r3]
    1dc8:	cmp	r3, #0
    1dcc:	bne	1de4 <coda_mem_cursor_get_num_elements+0xdc>
    1dd0:	ldr	r1, [fp, #-20]	; 0xffffffec
    1dd4:	ldr	r0, [fp, #-16]
    1dd8:	bl	0 <coda_ascii_cursor_get_num_elements>
    1ddc:	mov	r3, r0
    1de0:	b	1e0c <coda_mem_cursor_get_num_elements+0x104>
    1de4:	ldr	r1, [fp, #-20]	; 0xffffffec
    1de8:	ldr	r0, [fp, #-16]
    1dec:	bl	0 <coda_bin_cursor_get_num_elements>
    1df0:	mov	r3, r0
    1df4:	b	1e0c <coda_mem_cursor_get_num_elements+0x104>
    1df8:	ldr	r3, [fp, #-20]	; 0xffffffec
    1dfc:	mov	r2, #1
    1e00:	str	r2, [r3]
    1e04:	nop	{0}
    1e08:	mov	r3, #0
    1e0c:	mov	r0, r3
    1e10:	sub	sp, fp, #4
    1e14:	ldr	fp, [sp]
    1e18:	add	sp, sp, #4
    1e1c:	pop	{pc}		; (ldr pc, [sp], #4)

00001e20 <coda_mem_cursor_get_record_field_available_status>:
    1e20:	str	fp, [sp, #-8]!
    1e24:	str	lr, [sp, #4]
    1e28:	add	fp, sp, #4
    1e2c:	sub	sp, sp, #24
    1e30:	str	r0, [fp, #-16]
    1e34:	str	r1, [fp, #-20]	; 0xffffffec
    1e38:	str	r2, [fp, #-24]	; 0xffffffe8
    1e3c:	ldr	r3, [fp, #-16]
    1e40:	ldr	r3, [r3, #4]
    1e44:	sub	r3, r3, #1
    1e48:	ldr	r2, [fp, #-16]
    1e4c:	lsl	r3, r3, #4
    1e50:	add	r3, r2, r3
    1e54:	ldr	r3, [r3, #8]
    1e58:	str	r3, [fp, #-8]
    1e5c:	ldr	r3, [fp, #-8]
    1e60:	ldr	r3, [r3, #8]
    1e64:	cmp	r3, #2
    1e68:	bne	1e84 <coda_mem_cursor_get_record_field_available_status+0x64>
    1e6c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1e70:	ldr	r1, [fp, #-20]	; 0xffffffec
    1e74:	ldr	r0, [fp, #-16]
    1e78:	bl	0 <coda_ascbin_cursor_get_record_field_available_status>
    1e7c:	mov	r3, r0
    1e80:	b	1f30 <coda_mem_cursor_get_record_field_available_status+0x110>
    1e84:	ldr	r3, [fp, #-8]
    1e88:	ldr	r3, [r3, #8]
    1e8c:	cmp	r3, #0
    1e90:	beq	1eb4 <coda_mem_cursor_get_record_field_available_status+0x94>
    1e94:	movw	r3, #0
    1e98:	movt	r3, #0
    1e9c:	mov	r2, #364	; 0x16c
    1ea0:	movw	r1, #0
    1ea4:	movt	r1, #0
    1ea8:	movw	r0, #0
    1eac:	movt	r0, #0
    1eb0:	bl	0 <__assert_fail>
    1eb4:	ldr	r3, [fp, #-20]	; 0xffffffec
    1eb8:	cmp	r3, #0
    1ebc:	blt	1ed4 <coda_mem_cursor_get_record_field_available_status+0xb4>
    1ec0:	ldr	r3, [fp, #-8]
    1ec4:	ldr	r3, [r3, #16]
    1ec8:	ldr	r2, [fp, #-20]	; 0xffffffec
    1ecc:	cmp	r2, r3
    1ed0:	blt	1ef8 <coda_mem_cursor_get_record_field_available_status+0xd8>
    1ed4:	ldr	r3, [fp, #-8]
    1ed8:	ldr	r3, [r3, #16]
    1edc:	ldr	r2, [fp, #-20]	; 0xffffffec
    1ee0:	movw	r1, #0
    1ee4:	movt	r1, #0
    1ee8:	mvn	r0, #100	; 0x64
    1eec:	bl	0 <coda_set_error>
    1ef0:	mvn	r3, #0
    1ef4:	b	1f30 <coda_mem_cursor_get_record_field_available_status+0x110>
    1ef8:	ldr	r3, [fp, #-8]
    1efc:	ldr	r2, [r3, #20]
    1f00:	ldr	r3, [fp, #-20]	; 0xffffffec
    1f04:	lsl	r3, r3, #2
    1f08:	add	r3, r2, r3
    1f0c:	ldr	r3, [r3]
    1f10:	cmp	r3, #0
    1f14:	movne	r3, #1
    1f18:	moveq	r3, #0
    1f1c:	uxtb	r3, r3
    1f20:	mov	r2, r3
    1f24:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1f28:	str	r2, [r3]
    1f2c:	mov	r3, #0
    1f30:	mov	r0, r3
    1f34:	sub	sp, fp, #4
    1f38:	ldr	fp, [sp]
    1f3c:	add	sp, sp, #4
    1f40:	pop	{pc}		; (ldr pc, [sp], #4)

00001f44 <coda_mem_cursor_get_available_union_field_index>:
    1f44:	str	fp, [sp, #-8]!
    1f48:	str	lr, [sp, #4]
    1f4c:	add	fp, sp, #4
    1f50:	sub	sp, sp, #16
    1f54:	str	r0, [fp, #-16]
    1f58:	str	r1, [fp, #-20]	; 0xffffffec
    1f5c:	ldr	r3, [fp, #-16]
    1f60:	ldr	r3, [r3, #4]
    1f64:	sub	r3, r3, #1
    1f68:	ldr	r2, [fp, #-16]
    1f6c:	lsl	r3, r3, #4
    1f70:	add	r3, r2, r3
    1f74:	ldr	r3, [r3, #8]
    1f78:	str	r3, [fp, #-12]
    1f7c:	ldr	r3, [fp, #-12]
    1f80:	ldr	r3, [r3, #8]
    1f84:	cmp	r3, #0
    1f88:	bne	2008 <coda_mem_cursor_get_available_union_field_index+0xc4>
    1f8c:	mov	r3, #0
    1f90:	str	r3, [fp, #-8]
    1f94:	b	1fd8 <coda_mem_cursor_get_available_union_field_index+0x94>
    1f98:	ldr	r3, [fp, #-12]
    1f9c:	ldr	r2, [r3, #20]
    1fa0:	ldr	r3, [fp, #-8]
    1fa4:	lsl	r3, r3, #2
    1fa8:	add	r3, r2, r3
    1fac:	ldr	r3, [r3]
    1fb0:	cmp	r3, #0
    1fb4:	beq	1fcc <coda_mem_cursor_get_available_union_field_index+0x88>
    1fb8:	ldr	r3, [fp, #-20]	; 0xffffffec
    1fbc:	ldr	r2, [fp, #-8]
    1fc0:	str	r2, [r3]
    1fc4:	mov	r3, #0
    1fc8:	b	2060 <coda_mem_cursor_get_available_union_field_index+0x11c>
    1fcc:	ldr	r3, [fp, #-8]
    1fd0:	add	r3, r3, #1
    1fd4:	str	r3, [fp, #-8]
    1fd8:	ldr	r3, [fp, #-12]
    1fdc:	ldr	r3, [r3, #16]
    1fe0:	ldr	r2, [fp, #-8]
    1fe4:	cmp	r2, r3
    1fe8:	blt	1f98 <coda_mem_cursor_get_available_union_field_index+0x54>
    1fec:	movw	r1, #0
    1ff0:	movt	r1, #0
    1ff4:	movw	r0, #65236	; 0xfed4
    1ff8:	movt	r0, #65535	; 0xffff
    1ffc:	bl	0 <coda_set_error>
    2000:	mvn	r3, #0
    2004:	b	2060 <coda_mem_cursor_get_available_union_field_index+0x11c>
    2008:	ldr	r3, [fp, #-16]
    200c:	ldr	r3, [r3, #4]
    2010:	sub	r3, r3, #1
    2014:	ldr	r2, [fp, #-16]
    2018:	lsl	r3, r3, #4
    201c:	add	r3, r2, r3
    2020:	ldr	r3, [r3, #8]
    2024:	ldr	r3, [r3, #8]
    2028:	cmp	r3, #2
    202c:	beq	2050 <coda_mem_cursor_get_available_union_field_index+0x10c>
    2030:	movw	r3, #0
    2034:	movt	r3, #0
    2038:	movw	r2, #399	; 0x18f
    203c:	movw	r1, #0
    2040:	movt	r1, #0
    2044:	movw	r0, #0
    2048:	movt	r0, #0
    204c:	bl	0 <__assert_fail>
    2050:	ldr	r1, [fp, #-20]	; 0xffffffec
    2054:	ldr	r0, [fp, #-16]
    2058:	bl	0 <coda_ascbin_cursor_get_available_union_field_index>
    205c:	mov	r3, r0
    2060:	mov	r0, r3
    2064:	sub	sp, fp, #4
    2068:	ldr	fp, [sp]
    206c:	add	sp, sp, #4
    2070:	pop	{pc}		; (ldr pc, [sp], #4)

00002074 <coda_mem_cursor_get_array_dim>:
    2074:	str	fp, [sp, #-8]!
    2078:	str	lr, [sp, #4]
    207c:	add	fp, sp, #4
    2080:	sub	sp, sp, #32
    2084:	str	r0, [fp, #-24]	; 0xffffffe8
    2088:	str	r1, [fp, #-28]	; 0xffffffe4
    208c:	str	r2, [fp, #-32]	; 0xffffffe0
    2090:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2094:	ldr	r3, [r3, #4]
    2098:	sub	r3, r3, #1
    209c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    20a0:	lsl	r3, r3, #4
    20a4:	add	r3, r2, r3
    20a8:	ldr	r3, [r3, #8]
    20ac:	str	r3, [fp, #-12]
    20b0:	ldr	r3, [fp, #-12]
    20b4:	ldr	r3, [r3, #8]
    20b8:	cmp	r3, #2
    20bc:	bne	20d8 <coda_mem_cursor_get_array_dim+0x64>
    20c0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    20c4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    20c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    20cc:	bl	0 <coda_ascbin_cursor_get_array_dim>
    20d0:	mov	r3, r0
    20d4:	b	21d4 <coda_mem_cursor_get_array_dim+0x160>
    20d8:	ldr	r3, [fp, #-12]
    20dc:	ldr	r3, [r3, #8]
    20e0:	cmp	r3, #1
    20e4:	beq	2108 <coda_mem_cursor_get_array_dim+0x94>
    20e8:	movw	r3, #0
    20ec:	movt	r3, #0
    20f0:	movw	r2, #413	; 0x19d
    20f4:	movw	r1, #0
    20f8:	movt	r1, #0
    20fc:	movw	r0, #0
    2100:	movt	r0, #0
    2104:	bl	0 <__assert_fail>
    2108:	ldr	r3, [fp, #-24]	; 0xffffffe8
    210c:	ldr	r3, [r3, #4]
    2110:	sub	r3, r3, #1
    2114:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2118:	lsl	r3, r3, #4
    211c:	add	r3, r2, r3
    2120:	ldr	r3, [r3, #8]
    2124:	str	r3, [fp, #-16]
    2128:	ldr	r3, [fp, #-16]
    212c:	ldr	r3, [r3, #4]
    2130:	ldr	r3, [r3, #44]	; 0x2c
    2134:	cmp	r3, #0
    2138:	blt	21b4 <coda_mem_cursor_get_array_dim+0x140>
    213c:	ldr	r3, [fp, #-16]
    2140:	ldr	r3, [r3, #4]
    2144:	ldr	r2, [r3, #48]	; 0x30
    2148:	ldr	r3, [fp, #-28]	; 0xffffffe4
    214c:	str	r2, [r3]
    2150:	mov	r3, #0
    2154:	str	r3, [fp, #-8]
    2158:	b	2198 <coda_mem_cursor_get_array_dim+0x124>
    215c:	ldr	r3, [fp, #-16]
    2160:	ldr	r1, [r3, #4]
    2164:	ldr	r3, [fp, #-8]
    2168:	lsl	r3, r3, #2
    216c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    2170:	add	r2, r2, r3
    2174:	ldr	r3, [fp, #-8]
    2178:	add	r3, r3, #12
    217c:	lsl	r3, r3, #2
    2180:	add	r3, r1, r3
    2184:	ldr	r3, [r3, #4]
    2188:	str	r3, [r2]
    218c:	ldr	r3, [fp, #-8]
    2190:	add	r3, r3, #1
    2194:	str	r3, [fp, #-8]
    2198:	ldr	r3, [fp, #-16]
    219c:	ldr	r3, [r3, #4]
    21a0:	ldr	r3, [r3, #48]	; 0x30
    21a4:	ldr	r2, [fp, #-8]
    21a8:	cmp	r2, r3
    21ac:	blt	215c <coda_mem_cursor_get_array_dim+0xe8>
    21b0:	b	21d0 <coda_mem_cursor_get_array_dim+0x15c>
    21b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    21b8:	mov	r2, #1
    21bc:	str	r2, [r3]
    21c0:	ldr	r3, [fp, #-16]
    21c4:	ldr	r2, [r3, #16]
    21c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    21cc:	str	r2, [r3]
    21d0:	mov	r3, #0
    21d4:	mov	r0, r3
    21d8:	sub	sp, fp, #4
    21dc:	ldr	fp, [sp]
    21e0:	add	sp, sp, #4
    21e4:	pop	{pc}		; (ldr pc, [sp], #4)

000021e8 <coda_mem_cursor_read_int8>:
    21e8:	str	fp, [sp, #-8]!
    21ec:	str	lr, [sp, #4]
    21f0:	add	fp, sp, #4
    21f4:	sub	sp, sp, #16
    21f8:	str	r0, [fp, #-16]
    21fc:	str	r1, [fp, #-20]	; 0xffffffec
    2200:	ldr	r3, [fp, #-16]
    2204:	ldr	r3, [r3, #4]
    2208:	sub	r3, r3, #1
    220c:	ldr	r2, [fp, #-16]
    2210:	lsl	r3, r3, #4
    2214:	add	r3, r2, r3
    2218:	ldr	r3, [r3, #8]
    221c:	str	r3, [fp, #-8]
    2220:	ldr	r3, [fp, #-8]
    2224:	ldr	r3, [r3, #8]
    2228:	cmp	r3, #2
    222c:	beq	2250 <coda_mem_cursor_read_int8+0x68>
    2230:	movw	r3, #0
    2234:	movt	r3, #0
    2238:	movw	r2, #439	; 0x1b7
    223c:	movw	r1, #0
    2240:	movt	r1, #0
    2244:	movw	r0, #0
    2248:	movt	r0, #0
    224c:	bl	0 <__assert_fail>
    2250:	ldr	r3, [fp, #-8]
    2254:	ldr	r3, [r3, #4]
    2258:	ldr	r3, [r3]
    225c:	cmp	r3, #0
    2260:	bne	2278 <coda_mem_cursor_read_int8+0x90>
    2264:	ldr	r1, [fp, #-20]	; 0xffffffec
    2268:	ldr	r0, [fp, #-16]
    226c:	bl	0 <coda_ascii_cursor_read_int8>
    2270:	mov	r3, r0
    2274:	b	2288 <coda_mem_cursor_read_int8+0xa0>
    2278:	ldr	r1, [fp, #-20]	; 0xffffffec
    227c:	ldr	r0, [fp, #-16]
    2280:	bl	0 <coda_bin_cursor_read_int8>
    2284:	mov	r3, r0
    2288:	mov	r0, r3
    228c:	sub	sp, fp, #4
    2290:	ldr	fp, [sp]
    2294:	add	sp, sp, #4
    2298:	pop	{pc}		; (ldr pc, [sp], #4)

0000229c <coda_mem_cursor_read_uint8>:
    229c:	str	fp, [sp, #-8]!
    22a0:	str	lr, [sp, #4]
    22a4:	add	fp, sp, #4
    22a8:	sub	sp, sp, #16
    22ac:	str	r0, [fp, #-16]
    22b0:	str	r1, [fp, #-20]	; 0xffffffec
    22b4:	ldr	r3, [fp, #-16]
    22b8:	ldr	r3, [r3, #4]
    22bc:	sub	r3, r3, #1
    22c0:	ldr	r2, [fp, #-16]
    22c4:	lsl	r3, r3, #4
    22c8:	add	r3, r2, r3
    22cc:	ldr	r3, [r3, #8]
    22d0:	str	r3, [fp, #-8]
    22d4:	ldr	r3, [fp, #-8]
    22d8:	ldr	r3, [r3, #8]
    22dc:	cmp	r3, #2
    22e0:	beq	2304 <coda_mem_cursor_read_uint8+0x68>
    22e4:	movw	r3, #0
    22e8:	movt	r3, #0
    22ec:	movw	r2, #451	; 0x1c3
    22f0:	movw	r1, #0
    22f4:	movt	r1, #0
    22f8:	movw	r0, #0
    22fc:	movt	r0, #0
    2300:	bl	0 <__assert_fail>
    2304:	ldr	r3, [fp, #-8]
    2308:	ldr	r3, [r3, #4]
    230c:	ldr	r3, [r3]
    2310:	cmp	r3, #0
    2314:	bne	232c <coda_mem_cursor_read_uint8+0x90>
    2318:	ldr	r1, [fp, #-20]	; 0xffffffec
    231c:	ldr	r0, [fp, #-16]
    2320:	bl	0 <coda_ascii_cursor_read_uint8>
    2324:	mov	r3, r0
    2328:	b	233c <coda_mem_cursor_read_uint8+0xa0>
    232c:	ldr	r1, [fp, #-20]	; 0xffffffec
    2330:	ldr	r0, [fp, #-16]
    2334:	bl	0 <coda_bin_cursor_read_uint8>
    2338:	mov	r3, r0
    233c:	mov	r0, r3
    2340:	sub	sp, fp, #4
    2344:	ldr	fp, [sp]
    2348:	add	sp, sp, #4
    234c:	pop	{pc}		; (ldr pc, [sp], #4)

00002350 <coda_mem_cursor_read_int16>:
    2350:	str	fp, [sp, #-8]!
    2354:	str	lr, [sp, #4]
    2358:	add	fp, sp, #4
    235c:	sub	sp, sp, #16
    2360:	str	r0, [fp, #-16]
    2364:	str	r1, [fp, #-20]	; 0xffffffec
    2368:	ldr	r3, [fp, #-16]
    236c:	ldr	r3, [r3, #4]
    2370:	sub	r3, r3, #1
    2374:	ldr	r2, [fp, #-16]
    2378:	lsl	r3, r3, #4
    237c:	add	r3, r2, r3
    2380:	ldr	r3, [r3, #8]
    2384:	str	r3, [fp, #-8]
    2388:	ldr	r3, [fp, #-8]
    238c:	ldr	r3, [r3, #8]
    2390:	cmp	r3, #2
    2394:	beq	23b8 <coda_mem_cursor_read_int16+0x68>
    2398:	movw	r3, #0
    239c:	movt	r3, #0
    23a0:	movw	r2, #463	; 0x1cf
    23a4:	movw	r1, #0
    23a8:	movt	r1, #0
    23ac:	movw	r0, #0
    23b0:	movt	r0, #0
    23b4:	bl	0 <__assert_fail>
    23b8:	ldr	r3, [fp, #-8]
    23bc:	ldr	r3, [r3, #4]
    23c0:	ldr	r3, [r3]
    23c4:	cmp	r3, #0
    23c8:	bne	23e0 <coda_mem_cursor_read_int16+0x90>
    23cc:	ldr	r1, [fp, #-20]	; 0xffffffec
    23d0:	ldr	r0, [fp, #-16]
    23d4:	bl	0 <coda_ascii_cursor_read_int16>
    23d8:	mov	r3, r0
    23dc:	b	23f0 <coda_mem_cursor_read_int16+0xa0>
    23e0:	ldr	r1, [fp, #-20]	; 0xffffffec
    23e4:	ldr	r0, [fp, #-16]
    23e8:	bl	0 <coda_bin_cursor_read_int16>
    23ec:	mov	r3, r0
    23f0:	mov	r0, r3
    23f4:	sub	sp, fp, #4
    23f8:	ldr	fp, [sp]
    23fc:	add	sp, sp, #4
    2400:	pop	{pc}		; (ldr pc, [sp], #4)

00002404 <coda_mem_cursor_read_uint16>:
    2404:	str	fp, [sp, #-8]!
    2408:	str	lr, [sp, #4]
    240c:	add	fp, sp, #4
    2410:	sub	sp, sp, #16
    2414:	str	r0, [fp, #-16]
    2418:	str	r1, [fp, #-20]	; 0xffffffec
    241c:	ldr	r3, [fp, #-16]
    2420:	ldr	r3, [r3, #4]
    2424:	sub	r3, r3, #1
    2428:	ldr	r2, [fp, #-16]
    242c:	lsl	r3, r3, #4
    2430:	add	r3, r2, r3
    2434:	ldr	r3, [r3, #8]
    2438:	str	r3, [fp, #-8]
    243c:	ldr	r3, [fp, #-8]
    2440:	ldr	r3, [r3, #8]
    2444:	cmp	r3, #2
    2448:	beq	246c <coda_mem_cursor_read_uint16+0x68>
    244c:	movw	r3, #0
    2450:	movt	r3, #0
    2454:	movw	r2, #475	; 0x1db
    2458:	movw	r1, #0
    245c:	movt	r1, #0
    2460:	movw	r0, #0
    2464:	movt	r0, #0
    2468:	bl	0 <__assert_fail>
    246c:	ldr	r3, [fp, #-8]
    2470:	ldr	r3, [r3, #4]
    2474:	ldr	r3, [r3]
    2478:	cmp	r3, #0
    247c:	bne	2494 <coda_mem_cursor_read_uint16+0x90>
    2480:	ldr	r1, [fp, #-20]	; 0xffffffec
    2484:	ldr	r0, [fp, #-16]
    2488:	bl	0 <coda_ascii_cursor_read_uint16>
    248c:	mov	r3, r0
    2490:	b	24a4 <coda_mem_cursor_read_uint16+0xa0>
    2494:	ldr	r1, [fp, #-20]	; 0xffffffec
    2498:	ldr	r0, [fp, #-16]
    249c:	bl	0 <coda_bin_cursor_read_uint16>
    24a0:	mov	r3, r0
    24a4:	mov	r0, r3
    24a8:	sub	sp, fp, #4
    24ac:	ldr	fp, [sp]
    24b0:	add	sp, sp, #4
    24b4:	pop	{pc}		; (ldr pc, [sp], #4)

000024b8 <coda_mem_cursor_read_int32>:
    24b8:	str	fp, [sp, #-8]!
    24bc:	str	lr, [sp, #4]
    24c0:	add	fp, sp, #4
    24c4:	sub	sp, sp, #16
    24c8:	str	r0, [fp, #-16]
    24cc:	str	r1, [fp, #-20]	; 0xffffffec
    24d0:	ldr	r3, [fp, #-16]
    24d4:	ldr	r3, [r3, #4]
    24d8:	sub	r3, r3, #1
    24dc:	ldr	r2, [fp, #-16]
    24e0:	lsl	r3, r3, #4
    24e4:	add	r3, r2, r3
    24e8:	ldr	r3, [r3, #8]
    24ec:	str	r3, [fp, #-8]
    24f0:	ldr	r3, [fp, #-8]
    24f4:	ldr	r3, [r3, #8]
    24f8:	cmp	r3, #2
    24fc:	beq	2520 <coda_mem_cursor_read_int32+0x68>
    2500:	movw	r3, #0
    2504:	movt	r3, #0
    2508:	movw	r2, #487	; 0x1e7
    250c:	movw	r1, #0
    2510:	movt	r1, #0
    2514:	movw	r0, #0
    2518:	movt	r0, #0
    251c:	bl	0 <__assert_fail>
    2520:	ldr	r3, [fp, #-8]
    2524:	ldr	r3, [r3, #4]
    2528:	ldr	r3, [r3]
    252c:	cmp	r3, #0
    2530:	bne	2548 <coda_mem_cursor_read_int32+0x90>
    2534:	ldr	r1, [fp, #-20]	; 0xffffffec
    2538:	ldr	r0, [fp, #-16]
    253c:	bl	0 <coda_ascii_cursor_read_int32>
    2540:	mov	r3, r0
    2544:	b	2558 <coda_mem_cursor_read_int32+0xa0>
    2548:	ldr	r1, [fp, #-20]	; 0xffffffec
    254c:	ldr	r0, [fp, #-16]
    2550:	bl	0 <coda_bin_cursor_read_int32>
    2554:	mov	r3, r0
    2558:	mov	r0, r3
    255c:	sub	sp, fp, #4
    2560:	ldr	fp, [sp]
    2564:	add	sp, sp, #4
    2568:	pop	{pc}		; (ldr pc, [sp], #4)

0000256c <coda_mem_cursor_read_uint32>:
    256c:	str	fp, [sp, #-8]!
    2570:	str	lr, [sp, #4]
    2574:	add	fp, sp, #4
    2578:	sub	sp, sp, #16
    257c:	str	r0, [fp, #-16]
    2580:	str	r1, [fp, #-20]	; 0xffffffec
    2584:	ldr	r3, [fp, #-16]
    2588:	ldr	r3, [r3, #4]
    258c:	sub	r3, r3, #1
    2590:	ldr	r2, [fp, #-16]
    2594:	lsl	r3, r3, #4
    2598:	add	r3, r2, r3
    259c:	ldr	r3, [r3, #8]
    25a0:	str	r3, [fp, #-8]
    25a4:	ldr	r3, [fp, #-8]
    25a8:	ldr	r3, [r3, #8]
    25ac:	cmp	r3, #2
    25b0:	beq	25d4 <coda_mem_cursor_read_uint32+0x68>
    25b4:	movw	r3, #0
    25b8:	movt	r3, #0
    25bc:	movw	r2, #499	; 0x1f3
    25c0:	movw	r1, #0
    25c4:	movt	r1, #0
    25c8:	movw	r0, #0
    25cc:	movt	r0, #0
    25d0:	bl	0 <__assert_fail>
    25d4:	ldr	r3, [fp, #-8]
    25d8:	ldr	r3, [r3, #4]
    25dc:	ldr	r3, [r3]
    25e0:	cmp	r3, #0
    25e4:	bne	25fc <coda_mem_cursor_read_uint32+0x90>
    25e8:	ldr	r1, [fp, #-20]	; 0xffffffec
    25ec:	ldr	r0, [fp, #-16]
    25f0:	bl	0 <coda_ascii_cursor_read_uint32>
    25f4:	mov	r3, r0
    25f8:	b	260c <coda_mem_cursor_read_uint32+0xa0>
    25fc:	ldr	r1, [fp, #-20]	; 0xffffffec
    2600:	ldr	r0, [fp, #-16]
    2604:	bl	0 <coda_bin_cursor_read_uint32>
    2608:	mov	r3, r0
    260c:	mov	r0, r3
    2610:	sub	sp, fp, #4
    2614:	ldr	fp, [sp]
    2618:	add	sp, sp, #4
    261c:	pop	{pc}		; (ldr pc, [sp], #4)

00002620 <coda_mem_cursor_read_int64>:
    2620:	str	fp, [sp, #-8]!
    2624:	str	lr, [sp, #4]
    2628:	add	fp, sp, #4
    262c:	sub	sp, sp, #16
    2630:	str	r0, [fp, #-16]
    2634:	str	r1, [fp, #-20]	; 0xffffffec
    2638:	ldr	r3, [fp, #-16]
    263c:	ldr	r3, [r3, #4]
    2640:	sub	r3, r3, #1
    2644:	ldr	r2, [fp, #-16]
    2648:	lsl	r3, r3, #4
    264c:	add	r3, r2, r3
    2650:	ldr	r3, [r3, #8]
    2654:	str	r3, [fp, #-8]
    2658:	ldr	r3, [fp, #-8]
    265c:	ldr	r3, [r3, #8]
    2660:	cmp	r3, #2
    2664:	beq	2688 <coda_mem_cursor_read_int64+0x68>
    2668:	movw	r3, #0
    266c:	movt	r3, #0
    2670:	movw	r2, #511	; 0x1ff
    2674:	movw	r1, #0
    2678:	movt	r1, #0
    267c:	movw	r0, #0
    2680:	movt	r0, #0
    2684:	bl	0 <__assert_fail>
    2688:	ldr	r3, [fp, #-8]
    268c:	ldr	r3, [r3, #4]
    2690:	ldr	r3, [r3]
    2694:	cmp	r3, #0
    2698:	bne	26b0 <coda_mem_cursor_read_int64+0x90>
    269c:	ldr	r1, [fp, #-20]	; 0xffffffec
    26a0:	ldr	r0, [fp, #-16]
    26a4:	bl	0 <coda_ascii_cursor_read_int64>
    26a8:	mov	r3, r0
    26ac:	b	26c0 <coda_mem_cursor_read_int64+0xa0>
    26b0:	ldr	r1, [fp, #-20]	; 0xffffffec
    26b4:	ldr	r0, [fp, #-16]
    26b8:	bl	0 <coda_bin_cursor_read_int64>
    26bc:	mov	r3, r0
    26c0:	mov	r0, r3
    26c4:	sub	sp, fp, #4
    26c8:	ldr	fp, [sp]
    26cc:	add	sp, sp, #4
    26d0:	pop	{pc}		; (ldr pc, [sp], #4)

000026d4 <coda_mem_cursor_read_uint64>:
    26d4:	str	fp, [sp, #-8]!
    26d8:	str	lr, [sp, #4]
    26dc:	add	fp, sp, #4
    26e0:	sub	sp, sp, #16
    26e4:	str	r0, [fp, #-16]
    26e8:	str	r1, [fp, #-20]	; 0xffffffec
    26ec:	ldr	r3, [fp, #-16]
    26f0:	ldr	r3, [r3, #4]
    26f4:	sub	r3, r3, #1
    26f8:	ldr	r2, [fp, #-16]
    26fc:	lsl	r3, r3, #4
    2700:	add	r3, r2, r3
    2704:	ldr	r3, [r3, #8]
    2708:	str	r3, [fp, #-8]
    270c:	ldr	r3, [fp, #-8]
    2710:	ldr	r3, [r3, #8]
    2714:	cmp	r3, #2
    2718:	beq	273c <coda_mem_cursor_read_uint64+0x68>
    271c:	movw	r3, #0
    2720:	movt	r3, #0
    2724:	movw	r2, #523	; 0x20b
    2728:	movw	r1, #0
    272c:	movt	r1, #0
    2730:	movw	r0, #0
    2734:	movt	r0, #0
    2738:	bl	0 <__assert_fail>
    273c:	ldr	r3, [fp, #-8]
    2740:	ldr	r3, [r3, #4]
    2744:	ldr	r3, [r3]
    2748:	cmp	r3, #0
    274c:	bne	2764 <coda_mem_cursor_read_uint64+0x90>
    2750:	ldr	r1, [fp, #-20]	; 0xffffffec
    2754:	ldr	r0, [fp, #-16]
    2758:	bl	0 <coda_ascii_cursor_read_uint64>
    275c:	mov	r3, r0
    2760:	b	2774 <coda_mem_cursor_read_uint64+0xa0>
    2764:	ldr	r1, [fp, #-20]	; 0xffffffec
    2768:	ldr	r0, [fp, #-16]
    276c:	bl	0 <coda_bin_cursor_read_uint64>
    2770:	mov	r3, r0
    2774:	mov	r0, r3
    2778:	sub	sp, fp, #4
    277c:	ldr	fp, [sp]
    2780:	add	sp, sp, #4
    2784:	pop	{pc}		; (ldr pc, [sp], #4)

00002788 <coda_mem_cursor_read_float>:
    2788:	str	fp, [sp, #-8]!
    278c:	str	lr, [sp, #4]
    2790:	add	fp, sp, #4
    2794:	sub	sp, sp, #16
    2798:	str	r0, [fp, #-16]
    279c:	str	r1, [fp, #-20]	; 0xffffffec
    27a0:	ldr	r3, [fp, #-16]
    27a4:	ldr	r3, [r3, #4]
    27a8:	sub	r3, r3, #1
    27ac:	ldr	r2, [fp, #-16]
    27b0:	lsl	r3, r3, #4
    27b4:	add	r3, r2, r3
    27b8:	ldr	r3, [r3, #8]
    27bc:	str	r3, [fp, #-8]
    27c0:	ldr	r3, [fp, #-8]
    27c4:	ldr	r3, [r3, #8]
    27c8:	cmp	r3, #2
    27cc:	beq	27f0 <coda_mem_cursor_read_float+0x68>
    27d0:	movw	r3, #0
    27d4:	movt	r3, #0
    27d8:	movw	r2, #535	; 0x217
    27dc:	movw	r1, #0
    27e0:	movt	r1, #0
    27e4:	movw	r0, #0
    27e8:	movt	r0, #0
    27ec:	bl	0 <__assert_fail>
    27f0:	ldr	r3, [fp, #-8]
    27f4:	ldr	r3, [r3, #4]
    27f8:	ldr	r3, [r3]
    27fc:	cmp	r3, #0
    2800:	bne	2818 <coda_mem_cursor_read_float+0x90>
    2804:	ldr	r1, [fp, #-20]	; 0xffffffec
    2808:	ldr	r0, [fp, #-16]
    280c:	bl	0 <coda_ascii_cursor_read_float>
    2810:	mov	r3, r0
    2814:	b	2828 <coda_mem_cursor_read_float+0xa0>
    2818:	ldr	r1, [fp, #-20]	; 0xffffffec
    281c:	ldr	r0, [fp, #-16]
    2820:	bl	0 <coda_bin_cursor_read_float>
    2824:	mov	r3, r0
    2828:	mov	r0, r3
    282c:	sub	sp, fp, #4
    2830:	ldr	fp, [sp]
    2834:	add	sp, sp, #4
    2838:	pop	{pc}		; (ldr pc, [sp], #4)

0000283c <coda_mem_cursor_read_double>:
    283c:	str	fp, [sp, #-8]!
    2840:	str	lr, [sp, #4]
    2844:	add	fp, sp, #4
    2848:	sub	sp, sp, #16
    284c:	str	r0, [fp, #-16]
    2850:	str	r1, [fp, #-20]	; 0xffffffec
    2854:	ldr	r3, [fp, #-16]
    2858:	ldr	r3, [r3, #4]
    285c:	sub	r3, r3, #1
    2860:	ldr	r2, [fp, #-16]
    2864:	lsl	r3, r3, #4
    2868:	add	r3, r2, r3
    286c:	ldr	r3, [r3, #8]
    2870:	str	r3, [fp, #-8]
    2874:	ldr	r3, [fp, #-8]
    2878:	ldr	r3, [r3, #8]
    287c:	cmp	r3, #2
    2880:	beq	28a4 <coda_mem_cursor_read_double+0x68>
    2884:	movw	r3, #0
    2888:	movt	r3, #0
    288c:	movw	r2, #547	; 0x223
    2890:	movw	r1, #0
    2894:	movt	r1, #0
    2898:	movw	r0, #0
    289c:	movt	r0, #0
    28a0:	bl	0 <__assert_fail>
    28a4:	ldr	r3, [fp, #-8]
    28a8:	ldr	r3, [r3, #4]
    28ac:	ldr	r3, [r3]
    28b0:	cmp	r3, #0
    28b4:	bne	28cc <coda_mem_cursor_read_double+0x90>
    28b8:	ldr	r1, [fp, #-20]	; 0xffffffec
    28bc:	ldr	r0, [fp, #-16]
    28c0:	bl	0 <coda_ascii_cursor_read_double>
    28c4:	mov	r3, r0
    28c8:	b	28dc <coda_mem_cursor_read_double+0xa0>
    28cc:	ldr	r1, [fp, #-20]	; 0xffffffec
    28d0:	ldr	r0, [fp, #-16]
    28d4:	bl	0 <coda_bin_cursor_read_double>
    28d8:	mov	r3, r0
    28dc:	mov	r0, r3
    28e0:	sub	sp, fp, #4
    28e4:	ldr	fp, [sp]
    28e8:	add	sp, sp, #4
    28ec:	pop	{pc}		; (ldr pc, [sp], #4)

000028f0 <coda_mem_cursor_read_char>:
    28f0:	str	fp, [sp, #-8]!
    28f4:	str	lr, [sp, #4]
    28f8:	add	fp, sp, #4
    28fc:	sub	sp, sp, #16
    2900:	str	r0, [fp, #-16]
    2904:	str	r1, [fp, #-20]	; 0xffffffec
    2908:	ldr	r3, [fp, #-16]
    290c:	ldr	r3, [r3, #4]
    2910:	sub	r3, r3, #1
    2914:	ldr	r2, [fp, #-16]
    2918:	lsl	r3, r3, #4
    291c:	add	r3, r2, r3
    2920:	ldr	r3, [r3, #8]
    2924:	str	r3, [fp, #-8]
    2928:	ldr	r3, [fp, #-8]
    292c:	ldr	r3, [r3, #8]
    2930:	cmp	r3, #2
    2934:	beq	2958 <coda_mem_cursor_read_char+0x68>
    2938:	movw	r3, #0
    293c:	movt	r3, #0
    2940:	movw	r2, #559	; 0x22f
    2944:	movw	r1, #0
    2948:	movt	r1, #0
    294c:	movw	r0, #0
    2950:	movt	r0, #0
    2954:	bl	0 <__assert_fail>
    2958:	ldr	r3, [fp, #-8]
    295c:	ldr	r3, [r3, #4]
    2960:	ldr	r3, [r3]
    2964:	cmp	r3, #0
    2968:	beq	2980 <coda_mem_cursor_read_char+0x90>
    296c:	ldr	r3, [fp, #-8]
    2970:	ldr	r3, [r3, #4]
    2974:	ldr	r3, [r3]
    2978:	cmp	r3, #2
    297c:	bne	2994 <coda_mem_cursor_read_char+0xa4>
    2980:	ldr	r1, [fp, #-20]	; 0xffffffec
    2984:	ldr	r0, [fp, #-16]
    2988:	bl	0 <coda_ascii_cursor_read_char>
    298c:	mov	r3, r0
    2990:	b	29a4 <coda_mem_cursor_read_char+0xb4>
    2994:	ldr	r1, [fp, #-20]	; 0xffffffec
    2998:	ldr	r0, [fp, #-16]
    299c:	bl	0 <coda_bin_cursor_read_char>
    29a0:	mov	r3, r0
    29a4:	mov	r0, r3
    29a8:	sub	sp, fp, #4
    29ac:	ldr	fp, [sp]
    29b0:	add	sp, sp, #4
    29b4:	pop	{pc}		; (ldr pc, [sp], #4)

000029b8 <coda_mem_cursor_read_string>:
    29b8:	str	fp, [sp, #-8]!
    29bc:	str	lr, [sp, #4]
    29c0:	add	fp, sp, #4
    29c4:	sub	sp, sp, #544	; 0x220
    29c8:	str	r0, [fp, #-536]	; 0xfffffde8
    29cc:	str	r1, [fp, #-540]	; 0xfffffde4
    29d0:	str	r2, [fp, #-544]	; 0xfffffde0
    29d4:	ldr	r3, [fp, #-536]	; 0xfffffde8
    29d8:	ldr	r3, [r3, #4]
    29dc:	sub	r3, r3, #1
    29e0:	ldr	r2, [fp, #-536]	; 0xfffffde8
    29e4:	lsl	r3, r3, #4
    29e8:	add	r3, r2, r3
    29ec:	ldr	r3, [r3, #8]
    29f0:	str	r3, [fp, #-8]
    29f4:	ldr	r3, [fp, #-8]
    29f8:	ldr	r3, [r3, #8]
    29fc:	cmp	r3, #3
    2a00:	bne	2a58 <coda_mem_cursor_read_string+0xa0>
    2a04:	ldr	r2, [fp, #-536]	; 0xfffffde8
    2a08:	sub	r3, fp, #532	; 0x214
    2a0c:	mov	r1, r2
    2a10:	mov	r2, #520	; 0x208
    2a14:	mov	r0, r3
    2a18:	bl	0 <memcpy>
    2a1c:	sub	r3, fp, #532	; 0x214
    2a20:	mov	r0, r3
    2a24:	bl	0 <coda_cursor_use_base_type_of_special_type>
    2a28:	mov	r3, r0
    2a2c:	cmp	r3, #0
    2a30:	beq	2a3c <coda_mem_cursor_read_string+0x84>
    2a34:	mvn	r3, #0
    2a38:	b	2a9c <coda_mem_cursor_read_string+0xe4>
    2a3c:	sub	r3, fp, #532	; 0x214
    2a40:	ldr	r2, [fp, #-544]	; 0xfffffde0
    2a44:	ldr	r1, [fp, #-540]	; 0xfffffde4
    2a48:	mov	r0, r3
    2a4c:	bl	0 <coda_cursor_read_string>
    2a50:	mov	r3, r0
    2a54:	b	2a9c <coda_mem_cursor_read_string+0xe4>
    2a58:	ldr	r3, [fp, #-8]
    2a5c:	ldr	r3, [r3, #8]
    2a60:	cmp	r3, #2
    2a64:	beq	2a88 <coda_mem_cursor_read_string+0xd0>
    2a68:	movw	r3, #0
    2a6c:	movt	r3, #0
    2a70:	movw	r2, #582	; 0x246
    2a74:	movw	r1, #0
    2a78:	movt	r1, #0
    2a7c:	movw	r0, #0
    2a80:	movt	r0, #0
    2a84:	bl	0 <__assert_fail>
    2a88:	ldr	r2, [fp, #-544]	; 0xfffffde0
    2a8c:	ldr	r1, [fp, #-540]	; 0xfffffde4
    2a90:	ldr	r0, [fp, #-536]	; 0xfffffde8
    2a94:	bl	0 <coda_ascii_cursor_read_string>
    2a98:	mov	r3, r0
    2a9c:	mov	r0, r3
    2aa0:	sub	sp, fp, #4
    2aa4:	ldr	fp, [sp]
    2aa8:	add	sp, sp, #4
    2aac:	pop	{pc}		; (ldr pc, [sp], #4)

00002ab0 <coda_mem_cursor_read_bits>:
    2ab0:	str	fp, [sp, #-8]!
    2ab4:	str	lr, [sp, #4]
    2ab8:	add	fp, sp, #4
    2abc:	sub	sp, sp, #552	; 0x228
    2ac0:	str	r0, [fp, #-536]	; 0xfffffde8
    2ac4:	str	r1, [fp, #-540]	; 0xfffffde4
    2ac8:	sub	r1, fp, #548	; 0x224
    2acc:	strd	r2, [r1]
    2ad0:	ldr	r3, [fp, #-536]	; 0xfffffde8
    2ad4:	ldr	r3, [r3, #4]
    2ad8:	sub	r3, r3, #1
    2adc:	ldr	r2, [fp, #-536]	; 0xfffffde8
    2ae0:	lsl	r3, r3, #4
    2ae4:	add	r3, r2, r3
    2ae8:	ldr	r3, [r3, #8]
    2aec:	str	r3, [fp, #-8]
    2af0:	ldr	r3, [fp, #-8]
    2af4:	ldr	r3, [r3, #8]
    2af8:	cmp	r3, #3
    2afc:	bne	2b60 <coda_mem_cursor_read_bits+0xb0>
    2b00:	ldr	r2, [fp, #-536]	; 0xfffffde8
    2b04:	sub	r3, fp, #532	; 0x214
    2b08:	mov	r1, r2
    2b0c:	mov	r2, #520	; 0x208
    2b10:	mov	r0, r3
    2b14:	bl	0 <memcpy>
    2b18:	sub	r3, fp, #532	; 0x214
    2b1c:	mov	r0, r3
    2b20:	bl	0 <coda_cursor_use_base_type_of_special_type>
    2b24:	mov	r3, r0
    2b28:	cmp	r3, #0
    2b2c:	beq	2b38 <coda_mem_cursor_read_bits+0x88>
    2b30:	mvn	r3, #0
    2b34:	b	2be8 <coda_mem_cursor_read_bits+0x138>
    2b38:	sub	r3, fp, #548	; 0x224
    2b3c:	mov	r1, r3
    2b40:	sub	r0, fp, #532	; 0x214
    2b44:	ldrd	r2, [fp, #4]
    2b48:	strd	r2, [sp]
    2b4c:	ldrd	r2, [r1]
    2b50:	ldr	r1, [fp, #-540]	; 0xfffffde4
    2b54:	bl	0 <coda_cursor_read_bits>
    2b58:	mov	r3, r0
    2b5c:	b	2be8 <coda_mem_cursor_read_bits+0x138>
    2b60:	ldr	r3, [fp, #-8]
    2b64:	ldr	r3, [r3, #8]
    2b68:	cmp	r3, #2
    2b6c:	bne	2bd4 <coda_mem_cursor_read_bits+0x124>
    2b70:	ldr	r3, [fp, #-8]
    2b74:	ldr	r3, [r3, #4]
    2b78:	ldr	r3, [r3]
    2b7c:	cmp	r3, #0
    2b80:	bne	2bac <coda_mem_cursor_read_bits+0xfc>
    2b84:	sub	r3, fp, #548	; 0x224
    2b88:	mov	r1, r3
    2b8c:	ldrd	r2, [fp, #4]
    2b90:	strd	r2, [sp]
    2b94:	ldrd	r2, [r1]
    2b98:	ldr	r1, [fp, #-540]	; 0xfffffde4
    2b9c:	ldr	r0, [fp, #-536]	; 0xfffffde8
    2ba0:	bl	0 <coda_ascii_cursor_read_bits>
    2ba4:	mov	r3, r0
    2ba8:	b	2be8 <coda_mem_cursor_read_bits+0x138>
    2bac:	sub	r3, fp, #548	; 0x224
    2bb0:	mov	r1, r3
    2bb4:	ldrd	r2, [fp, #4]
    2bb8:	strd	r2, [sp]
    2bbc:	ldrd	r2, [r1]
    2bc0:	ldr	r1, [fp, #-540]	; 0xfffffde4
    2bc4:	ldr	r0, [fp, #-536]	; 0xfffffde8
    2bc8:	bl	0 <coda_bin_cursor_read_bits>
    2bcc:	mov	r3, r0
    2bd0:	b	2be8 <coda_mem_cursor_read_bits+0x138>
    2bd4:	movw	r1, #0
    2bd8:	movt	r1, #0
    2bdc:	mvn	r0, #104	; 0x68
    2be0:	bl	0 <coda_set_error>
    2be4:	mvn	r3, #0
    2be8:	mov	r0, r3
    2bec:	sub	sp, fp, #4
    2bf0:	ldr	fp, [sp]
    2bf4:	add	sp, sp, #4
    2bf8:	pop	{pc}		; (ldr pc, [sp], #4)

00002bfc <coda_mem_cursor_read_bytes>:
    2bfc:	str	fp, [sp, #-8]!
    2c00:	str	lr, [sp, #4]
    2c04:	add	fp, sp, #4
    2c08:	sub	sp, sp, #552	; 0x228
    2c0c:	str	r0, [fp, #-536]	; 0xfffffde8
    2c10:	str	r1, [fp, #-540]	; 0xfffffde4
    2c14:	sub	r1, fp, #548	; 0x224
    2c18:	strd	r2, [r1]
    2c1c:	ldr	r3, [fp, #-536]	; 0xfffffde8
    2c20:	ldr	r3, [r3, #4]
    2c24:	sub	r3, r3, #1
    2c28:	ldr	r2, [fp, #-536]	; 0xfffffde8
    2c2c:	lsl	r3, r3, #4
    2c30:	add	r3, r2, r3
    2c34:	ldr	r3, [r3, #8]
    2c38:	str	r3, [fp, #-8]
    2c3c:	ldr	r3, [fp, #-8]
    2c40:	ldr	r3, [r3, #8]
    2c44:	cmp	r3, #3
    2c48:	bne	2cac <coda_mem_cursor_read_bytes+0xb0>
    2c4c:	ldr	r2, [fp, #-536]	; 0xfffffde8
    2c50:	sub	r3, fp, #532	; 0x214
    2c54:	mov	r1, r2
    2c58:	mov	r2, #520	; 0x208
    2c5c:	mov	r0, r3
    2c60:	bl	0 <memcpy>
    2c64:	sub	r3, fp, #532	; 0x214
    2c68:	mov	r0, r3
    2c6c:	bl	0 <coda_cursor_use_base_type_of_special_type>
    2c70:	mov	r3, r0
    2c74:	cmp	r3, #0
    2c78:	beq	2c84 <coda_mem_cursor_read_bytes+0x88>
    2c7c:	mvn	r3, #0
    2c80:	b	2d48 <coda_mem_cursor_read_bytes+0x14c>
    2c84:	sub	r3, fp, #548	; 0x224
    2c88:	mov	r1, r3
    2c8c:	sub	r0, fp, #532	; 0x214
    2c90:	ldrd	r2, [fp, #4]
    2c94:	strd	r2, [sp]
    2c98:	ldrd	r2, [r1]
    2c9c:	ldr	r1, [fp, #-540]	; 0xfffffde4
    2ca0:	bl	0 <coda_cursor_read_bytes>
    2ca4:	mov	r3, r0
    2ca8:	b	2d48 <coda_mem_cursor_read_bytes+0x14c>
    2cac:	ldr	r3, [fp, #-8]
    2cb0:	ldr	r3, [r3, #8]
    2cb4:	cmp	r3, #2
    2cb8:	bne	2d34 <coda_mem_cursor_read_bytes+0x138>
    2cbc:	ldr	r3, [fp, #-8]
    2cc0:	ldr	r3, [r3, #4]
    2cc4:	ldr	r3, [r3]
    2cc8:	cmp	r3, #0
    2ccc:	beq	2ce4 <coda_mem_cursor_read_bytes+0xe8>
    2cd0:	ldr	r3, [fp, #-8]
    2cd4:	ldr	r3, [r3, #4]
    2cd8:	ldr	r3, [r3]
    2cdc:	cmp	r3, #2
    2ce0:	bne	2d0c <coda_mem_cursor_read_bytes+0x110>
    2ce4:	sub	r3, fp, #548	; 0x224
    2ce8:	mov	r1, r3
    2cec:	ldrd	r2, [fp, #4]
    2cf0:	strd	r2, [sp]
    2cf4:	ldrd	r2, [r1]
    2cf8:	ldr	r1, [fp, #-540]	; 0xfffffde4
    2cfc:	ldr	r0, [fp, #-536]	; 0xfffffde8
    2d00:	bl	0 <coda_ascii_cursor_read_bytes>
    2d04:	mov	r3, r0
    2d08:	b	2d48 <coda_mem_cursor_read_bytes+0x14c>
    2d0c:	sub	r3, fp, #548	; 0x224
    2d10:	mov	r1, r3
    2d14:	ldrd	r2, [fp, #4]
    2d18:	strd	r2, [sp]
    2d1c:	ldrd	r2, [r1]
    2d20:	ldr	r1, [fp, #-540]	; 0xfffffde4
    2d24:	ldr	r0, [fp, #-536]	; 0xfffffde8
    2d28:	bl	0 <coda_bin_cursor_read_bytes>
    2d2c:	mov	r3, r0
    2d30:	b	2d48 <coda_mem_cursor_read_bytes+0x14c>
    2d34:	movw	r1, #0
    2d38:	movt	r1, #0
    2d3c:	mvn	r0, #104	; 0x68
    2d40:	bl	0 <coda_set_error>
    2d44:	mvn	r3, #0
    2d48:	mov	r0, r3
    2d4c:	sub	sp, fp, #4
    2d50:	ldr	fp, [sp]
    2d54:	add	sp, sp, #4
    2d58:	pop	{pc}		; (ldr pc, [sp], #4)

00002d5c <coda_mem_cursor_read_int8_array>:
    2d5c:	str	fp, [sp, #-8]!
    2d60:	str	lr, [sp, #4]
    2d64:	add	fp, sp, #4
    2d68:	sub	sp, sp, #32
    2d6c:	str	r0, [fp, #-16]
    2d70:	str	r1, [fp, #-20]	; 0xffffffec
    2d74:	str	r2, [fp, #-24]	; 0xffffffe8
    2d78:	ldr	r3, [fp, #-16]
    2d7c:	ldr	r3, [r3, #4]
    2d80:	sub	r3, r3, #1
    2d84:	ldr	r2, [fp, #-16]
    2d88:	lsl	r3, r3, #4
    2d8c:	add	r3, r2, r3
    2d90:	ldr	r3, [r3, #8]
    2d94:	str	r3, [fp, #-8]
    2d98:	ldr	r3, [fp, #-8]
    2d9c:	ldr	r3, [r3, #8]
    2da0:	cmp	r3, #1
    2da4:	bne	2dd0 <coda_mem_cursor_read_int8_array+0x74>
    2da8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2dac:	str	r3, [sp]
    2db0:	mov	r3, #1
    2db4:	ldr	r2, [fp, #-20]	; 0xffffffec
    2db8:	movw	r1, #0
    2dbc:	movt	r1, #0
    2dc0:	ldr	r0, [fp, #-16]
    2dc4:	bl	0 <read_array>
    2dc8:	mov	r3, r0
    2dcc:	b	2ee0 <coda_mem_cursor_read_int8_array+0x184>
    2dd0:	ldr	r3, [fp, #-8]
    2dd4:	ldr	r3, [r3, #8]
    2dd8:	cmp	r3, #2
    2ddc:	beq	2e00 <coda_mem_cursor_read_int8_array+0xa4>
    2de0:	movw	r3, #0
    2de4:	movt	r3, #0
    2de8:	movw	r2, #651	; 0x28b
    2dec:	movw	r1, #0
    2df0:	movt	r1, #0
    2df4:	movw	r0, #0
    2df8:	movt	r0, #0
    2dfc:	bl	0 <__assert_fail>
    2e00:	ldr	r3, [fp, #-8]
    2e04:	ldr	r3, [r3, #4]
    2e08:	ldr	r3, [r3, #40]	; 0x28
    2e0c:	ldr	r3, [r3]
    2e10:	cmp	r3, #1
    2e14:	bne	2e40 <coda_mem_cursor_read_int8_array+0xe4>
    2e18:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2e1c:	str	r3, [sp]
    2e20:	mov	r3, #1
    2e24:	ldr	r2, [fp, #-20]	; 0xffffffec
    2e28:	movw	r1, #0
    2e2c:	movt	r1, #0
    2e30:	ldr	r0, [fp, #-16]
    2e34:	bl	0 <read_array>
    2e38:	mov	r3, r0
    2e3c:	b	2ee0 <coda_mem_cursor_read_int8_array+0x184>
    2e40:	ldr	r3, [fp, #-8]
    2e44:	ldr	r3, [r3, #4]
    2e48:	ldr	r3, [r3, #40]	; 0x28
    2e4c:	ldr	r3, [r3]
    2e50:	cmp	r3, #0
    2e54:	beq	2e78 <coda_mem_cursor_read_int8_array+0x11c>
    2e58:	movw	r3, #0
    2e5c:	movt	r3, #0
    2e60:	movw	r2, #657	; 0x291
    2e64:	movw	r1, #0
    2e68:	movt	r1, #0
    2e6c:	movw	r0, #0
    2e70:	movt	r0, #0
    2e74:	bl	0 <__assert_fail>
    2e78:	mov	r3, #0
    2e7c:	str	r3, [sp]
    2e80:	mov	r3, #1
    2e84:	ldr	r2, [fp, #-20]	; 0xffffffec
    2e88:	movw	r1, #0
    2e8c:	movt	r1, #0
    2e90:	ldr	r0, [fp, #-16]
    2e94:	bl	0 <read_array>
    2e98:	mov	r3, r0
    2e9c:	cmp	r3, #0
    2ea0:	beq	2eac <coda_mem_cursor_read_int8_array+0x150>
    2ea4:	mvn	r3, #0
    2ea8:	b	2ee0 <coda_mem_cursor_read_int8_array+0x184>
    2eac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2eb0:	cmp	r3, #0
    2eb4:	beq	2edc <coda_mem_cursor_read_int8_array+0x180>
    2eb8:	mov	r2, #1
    2ebc:	ldr	r1, [fp, #-20]	; 0xffffffec
    2ec0:	ldr	r0, [fp, #-16]
    2ec4:	bl	520 <transpose_array>
    2ec8:	mov	r3, r0
    2ecc:	cmp	r3, #0
    2ed0:	beq	2edc <coda_mem_cursor_read_int8_array+0x180>
    2ed4:	mvn	r3, #0
    2ed8:	b	2ee0 <coda_mem_cursor_read_int8_array+0x184>
    2edc:	mov	r3, #0
    2ee0:	mov	r0, r3
    2ee4:	sub	sp, fp, #4
    2ee8:	ldr	fp, [sp]
    2eec:	add	sp, sp, #4
    2ef0:	pop	{pc}		; (ldr pc, [sp], #4)

00002ef4 <coda_mem_cursor_read_uint8_array>:
    2ef4:	str	fp, [sp, #-8]!
    2ef8:	str	lr, [sp, #4]
    2efc:	add	fp, sp, #4
    2f00:	sub	sp, sp, #32
    2f04:	str	r0, [fp, #-16]
    2f08:	str	r1, [fp, #-20]	; 0xffffffec
    2f0c:	str	r2, [fp, #-24]	; 0xffffffe8
    2f10:	ldr	r3, [fp, #-16]
    2f14:	ldr	r3, [r3, #4]
    2f18:	sub	r3, r3, #1
    2f1c:	ldr	r2, [fp, #-16]
    2f20:	lsl	r3, r3, #4
    2f24:	add	r3, r2, r3
    2f28:	ldr	r3, [r3, #8]
    2f2c:	str	r3, [fp, #-8]
    2f30:	ldr	r3, [fp, #-8]
    2f34:	ldr	r3, [r3, #8]
    2f38:	cmp	r3, #1
    2f3c:	bne	2f68 <coda_mem_cursor_read_uint8_array+0x74>
    2f40:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2f44:	str	r3, [sp]
    2f48:	mov	r3, #1
    2f4c:	ldr	r2, [fp, #-20]	; 0xffffffec
    2f50:	movw	r1, #0
    2f54:	movt	r1, #0
    2f58:	ldr	r0, [fp, #-16]
    2f5c:	bl	0 <read_array>
    2f60:	mov	r3, r0
    2f64:	b	3078 <coda_mem_cursor_read_uint8_array+0x184>
    2f68:	ldr	r3, [fp, #-8]
    2f6c:	ldr	r3, [r3, #8]
    2f70:	cmp	r3, #2
    2f74:	beq	2f98 <coda_mem_cursor_read_uint8_array+0xa4>
    2f78:	movw	r3, #0
    2f7c:	movt	r3, #0
    2f80:	movw	r2, #682	; 0x2aa
    2f84:	movw	r1, #0
    2f88:	movt	r1, #0
    2f8c:	movw	r0, #0
    2f90:	movt	r0, #0
    2f94:	bl	0 <__assert_fail>
    2f98:	ldr	r3, [fp, #-8]
    2f9c:	ldr	r3, [r3, #4]
    2fa0:	ldr	r3, [r3, #40]	; 0x28
    2fa4:	ldr	r3, [r3]
    2fa8:	cmp	r3, #1
    2fac:	bne	2fd8 <coda_mem_cursor_read_uint8_array+0xe4>
    2fb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2fb4:	str	r3, [sp]
    2fb8:	mov	r3, #1
    2fbc:	ldr	r2, [fp, #-20]	; 0xffffffec
    2fc0:	movw	r1, #0
    2fc4:	movt	r1, #0
    2fc8:	ldr	r0, [fp, #-16]
    2fcc:	bl	0 <read_array>
    2fd0:	mov	r3, r0
    2fd4:	b	3078 <coda_mem_cursor_read_uint8_array+0x184>
    2fd8:	ldr	r3, [fp, #-8]
    2fdc:	ldr	r3, [r3, #4]
    2fe0:	ldr	r3, [r3, #40]	; 0x28
    2fe4:	ldr	r3, [r3]
    2fe8:	cmp	r3, #0
    2fec:	beq	3010 <coda_mem_cursor_read_uint8_array+0x11c>
    2ff0:	movw	r3, #0
    2ff4:	movt	r3, #0
    2ff8:	mov	r2, #688	; 0x2b0
    2ffc:	movw	r1, #0
    3000:	movt	r1, #0
    3004:	movw	r0, #0
    3008:	movt	r0, #0
    300c:	bl	0 <__assert_fail>
    3010:	mov	r3, #0
    3014:	str	r3, [sp]
    3018:	mov	r3, #1
    301c:	ldr	r2, [fp, #-20]	; 0xffffffec
    3020:	movw	r1, #0
    3024:	movt	r1, #0
    3028:	ldr	r0, [fp, #-16]
    302c:	bl	0 <read_array>
    3030:	mov	r3, r0
    3034:	cmp	r3, #0
    3038:	beq	3044 <coda_mem_cursor_read_uint8_array+0x150>
    303c:	mvn	r3, #0
    3040:	b	3078 <coda_mem_cursor_read_uint8_array+0x184>
    3044:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3048:	cmp	r3, #0
    304c:	beq	3074 <coda_mem_cursor_read_uint8_array+0x180>
    3050:	mov	r2, #1
    3054:	ldr	r1, [fp, #-20]	; 0xffffffec
    3058:	ldr	r0, [fp, #-16]
    305c:	bl	520 <transpose_array>
    3060:	mov	r3, r0
    3064:	cmp	r3, #0
    3068:	beq	3074 <coda_mem_cursor_read_uint8_array+0x180>
    306c:	mvn	r3, #0
    3070:	b	3078 <coda_mem_cursor_read_uint8_array+0x184>
    3074:	mov	r3, #0
    3078:	mov	r0, r3
    307c:	sub	sp, fp, #4
    3080:	ldr	fp, [sp]
    3084:	add	sp, sp, #4
    3088:	pop	{pc}		; (ldr pc, [sp], #4)

0000308c <coda_mem_cursor_read_int16_array>:
    308c:	str	fp, [sp, #-8]!
    3090:	str	lr, [sp, #4]
    3094:	add	fp, sp, #4
    3098:	sub	sp, sp, #32
    309c:	str	r0, [fp, #-16]
    30a0:	str	r1, [fp, #-20]	; 0xffffffec
    30a4:	str	r2, [fp, #-24]	; 0xffffffe8
    30a8:	ldr	r3, [fp, #-16]
    30ac:	ldr	r3, [r3, #4]
    30b0:	sub	r3, r3, #1
    30b4:	ldr	r2, [fp, #-16]
    30b8:	lsl	r3, r3, #4
    30bc:	add	r3, r2, r3
    30c0:	ldr	r3, [r3, #8]
    30c4:	str	r3, [fp, #-8]
    30c8:	ldr	r3, [fp, #-8]
    30cc:	ldr	r3, [r3, #8]
    30d0:	cmp	r3, #1
    30d4:	bne	3100 <coda_mem_cursor_read_int16_array+0x74>
    30d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    30dc:	str	r3, [sp]
    30e0:	mov	r3, #2
    30e4:	ldr	r2, [fp, #-20]	; 0xffffffec
    30e8:	movw	r1, #0
    30ec:	movt	r1, #0
    30f0:	ldr	r0, [fp, #-16]
    30f4:	bl	0 <read_array>
    30f8:	mov	r3, r0
    30fc:	b	3210 <coda_mem_cursor_read_int16_array+0x184>
    3100:	ldr	r3, [fp, #-8]
    3104:	ldr	r3, [r3, #8]
    3108:	cmp	r3, #2
    310c:	beq	3130 <coda_mem_cursor_read_int16_array+0xa4>
    3110:	movw	r3, #0
    3114:	movt	r3, #0
    3118:	movw	r2, #713	; 0x2c9
    311c:	movw	r1, #0
    3120:	movt	r1, #0
    3124:	movw	r0, #0
    3128:	movt	r0, #0
    312c:	bl	0 <__assert_fail>
    3130:	ldr	r3, [fp, #-8]
    3134:	ldr	r3, [r3, #4]
    3138:	ldr	r3, [r3, #40]	; 0x28
    313c:	ldr	r3, [r3]
    3140:	cmp	r3, #1
    3144:	bne	3170 <coda_mem_cursor_read_int16_array+0xe4>
    3148:	ldr	r3, [fp, #-24]	; 0xffffffe8
    314c:	str	r3, [sp]
    3150:	mov	r3, #2
    3154:	ldr	r2, [fp, #-20]	; 0xffffffec
    3158:	movw	r1, #0
    315c:	movt	r1, #0
    3160:	ldr	r0, [fp, #-16]
    3164:	bl	0 <read_array>
    3168:	mov	r3, r0
    316c:	b	3210 <coda_mem_cursor_read_int16_array+0x184>
    3170:	ldr	r3, [fp, #-8]
    3174:	ldr	r3, [r3, #4]
    3178:	ldr	r3, [r3, #40]	; 0x28
    317c:	ldr	r3, [r3]
    3180:	cmp	r3, #0
    3184:	beq	31a8 <coda_mem_cursor_read_int16_array+0x11c>
    3188:	movw	r3, #0
    318c:	movt	r3, #0
    3190:	movw	r2, #719	; 0x2cf
    3194:	movw	r1, #0
    3198:	movt	r1, #0
    319c:	movw	r0, #0
    31a0:	movt	r0, #0
    31a4:	bl	0 <__assert_fail>
    31a8:	mov	r3, #0
    31ac:	str	r3, [sp]
    31b0:	mov	r3, #2
    31b4:	ldr	r2, [fp, #-20]	; 0xffffffec
    31b8:	movw	r1, #0
    31bc:	movt	r1, #0
    31c0:	ldr	r0, [fp, #-16]
    31c4:	bl	0 <read_array>
    31c8:	mov	r3, r0
    31cc:	cmp	r3, #0
    31d0:	beq	31dc <coda_mem_cursor_read_int16_array+0x150>
    31d4:	mvn	r3, #0
    31d8:	b	3210 <coda_mem_cursor_read_int16_array+0x184>
    31dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    31e0:	cmp	r3, #0
    31e4:	beq	320c <coda_mem_cursor_read_int16_array+0x180>
    31e8:	mov	r2, #2
    31ec:	ldr	r1, [fp, #-20]	; 0xffffffec
    31f0:	ldr	r0, [fp, #-16]
    31f4:	bl	520 <transpose_array>
    31f8:	mov	r3, r0
    31fc:	cmp	r3, #0
    3200:	beq	320c <coda_mem_cursor_read_int16_array+0x180>
    3204:	mvn	r3, #0
    3208:	b	3210 <coda_mem_cursor_read_int16_array+0x184>
    320c:	mov	r3, #0
    3210:	mov	r0, r3
    3214:	sub	sp, fp, #4
    3218:	ldr	fp, [sp]
    321c:	add	sp, sp, #4
    3220:	pop	{pc}		; (ldr pc, [sp], #4)

00003224 <coda_mem_cursor_read_uint16_array>:
    3224:	str	fp, [sp, #-8]!
    3228:	str	lr, [sp, #4]
    322c:	add	fp, sp, #4
    3230:	sub	sp, sp, #32
    3234:	str	r0, [fp, #-16]
    3238:	str	r1, [fp, #-20]	; 0xffffffec
    323c:	str	r2, [fp, #-24]	; 0xffffffe8
    3240:	ldr	r3, [fp, #-16]
    3244:	ldr	r3, [r3, #4]
    3248:	sub	r3, r3, #1
    324c:	ldr	r2, [fp, #-16]
    3250:	lsl	r3, r3, #4
    3254:	add	r3, r2, r3
    3258:	ldr	r3, [r3, #8]
    325c:	str	r3, [fp, #-8]
    3260:	ldr	r3, [fp, #-8]
    3264:	ldr	r3, [r3, #8]
    3268:	cmp	r3, #1
    326c:	bne	3298 <coda_mem_cursor_read_uint16_array+0x74>
    3270:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3274:	str	r3, [sp]
    3278:	mov	r3, #2
    327c:	ldr	r2, [fp, #-20]	; 0xffffffec
    3280:	movw	r1, #0
    3284:	movt	r1, #0
    3288:	ldr	r0, [fp, #-16]
    328c:	bl	0 <read_array>
    3290:	mov	r3, r0
    3294:	b	33a8 <coda_mem_cursor_read_uint16_array+0x184>
    3298:	ldr	r3, [fp, #-8]
    329c:	ldr	r3, [r3, #8]
    32a0:	cmp	r3, #2
    32a4:	beq	32c8 <coda_mem_cursor_read_uint16_array+0xa4>
    32a8:	movw	r3, #0
    32ac:	movt	r3, #0
    32b0:	mov	r2, #744	; 0x2e8
    32b4:	movw	r1, #0
    32b8:	movt	r1, #0
    32bc:	movw	r0, #0
    32c0:	movt	r0, #0
    32c4:	bl	0 <__assert_fail>
    32c8:	ldr	r3, [fp, #-8]
    32cc:	ldr	r3, [r3, #4]
    32d0:	ldr	r3, [r3, #40]	; 0x28
    32d4:	ldr	r3, [r3]
    32d8:	cmp	r3, #1
    32dc:	bne	3308 <coda_mem_cursor_read_uint16_array+0xe4>
    32e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    32e4:	str	r3, [sp]
    32e8:	mov	r3, #2
    32ec:	ldr	r2, [fp, #-20]	; 0xffffffec
    32f0:	movw	r1, #0
    32f4:	movt	r1, #0
    32f8:	ldr	r0, [fp, #-16]
    32fc:	bl	0 <read_array>
    3300:	mov	r3, r0
    3304:	b	33a8 <coda_mem_cursor_read_uint16_array+0x184>
    3308:	ldr	r3, [fp, #-8]
    330c:	ldr	r3, [r3, #4]
    3310:	ldr	r3, [r3, #40]	; 0x28
    3314:	ldr	r3, [r3]
    3318:	cmp	r3, #0
    331c:	beq	3340 <coda_mem_cursor_read_uint16_array+0x11c>
    3320:	movw	r3, #0
    3324:	movt	r3, #0
    3328:	movw	r2, #750	; 0x2ee
    332c:	movw	r1, #0
    3330:	movt	r1, #0
    3334:	movw	r0, #0
    3338:	movt	r0, #0
    333c:	bl	0 <__assert_fail>
    3340:	mov	r3, #0
    3344:	str	r3, [sp]
    3348:	mov	r3, #2
    334c:	ldr	r2, [fp, #-20]	; 0xffffffec
    3350:	movw	r1, #0
    3354:	movt	r1, #0
    3358:	ldr	r0, [fp, #-16]
    335c:	bl	0 <read_array>
    3360:	mov	r3, r0
    3364:	cmp	r3, #0
    3368:	beq	3374 <coda_mem_cursor_read_uint16_array+0x150>
    336c:	mvn	r3, #0
    3370:	b	33a8 <coda_mem_cursor_read_uint16_array+0x184>
    3374:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3378:	cmp	r3, #0
    337c:	beq	33a4 <coda_mem_cursor_read_uint16_array+0x180>
    3380:	mov	r2, #2
    3384:	ldr	r1, [fp, #-20]	; 0xffffffec
    3388:	ldr	r0, [fp, #-16]
    338c:	bl	520 <transpose_array>
    3390:	mov	r3, r0
    3394:	cmp	r3, #0
    3398:	beq	33a4 <coda_mem_cursor_read_uint16_array+0x180>
    339c:	mvn	r3, #0
    33a0:	b	33a8 <coda_mem_cursor_read_uint16_array+0x184>
    33a4:	mov	r3, #0
    33a8:	mov	r0, r3
    33ac:	sub	sp, fp, #4
    33b0:	ldr	fp, [sp]
    33b4:	add	sp, sp, #4
    33b8:	pop	{pc}		; (ldr pc, [sp], #4)

000033bc <coda_mem_cursor_read_int32_array>:
    33bc:	str	fp, [sp, #-8]!
    33c0:	str	lr, [sp, #4]
    33c4:	add	fp, sp, #4
    33c8:	sub	sp, sp, #32
    33cc:	str	r0, [fp, #-16]
    33d0:	str	r1, [fp, #-20]	; 0xffffffec
    33d4:	str	r2, [fp, #-24]	; 0xffffffe8
    33d8:	ldr	r3, [fp, #-16]
    33dc:	ldr	r3, [r3, #4]
    33e0:	sub	r3, r3, #1
    33e4:	ldr	r2, [fp, #-16]
    33e8:	lsl	r3, r3, #4
    33ec:	add	r3, r2, r3
    33f0:	ldr	r3, [r3, #8]
    33f4:	str	r3, [fp, #-8]
    33f8:	ldr	r3, [fp, #-8]
    33fc:	ldr	r3, [r3, #8]
    3400:	cmp	r3, #1
    3404:	bne	3430 <coda_mem_cursor_read_int32_array+0x74>
    3408:	ldr	r3, [fp, #-24]	; 0xffffffe8
    340c:	str	r3, [sp]
    3410:	mov	r3, #4
    3414:	ldr	r2, [fp, #-20]	; 0xffffffec
    3418:	movw	r1, #0
    341c:	movt	r1, #0
    3420:	ldr	r0, [fp, #-16]
    3424:	bl	0 <read_array>
    3428:	mov	r3, r0
    342c:	b	3540 <coda_mem_cursor_read_int32_array+0x184>
    3430:	ldr	r3, [fp, #-8]
    3434:	ldr	r3, [r3, #8]
    3438:	cmp	r3, #2
    343c:	beq	3460 <coda_mem_cursor_read_int32_array+0xa4>
    3440:	movw	r3, #0
    3444:	movt	r3, #0
    3448:	movw	r2, #775	; 0x307
    344c:	movw	r1, #0
    3450:	movt	r1, #0
    3454:	movw	r0, #0
    3458:	movt	r0, #0
    345c:	bl	0 <__assert_fail>
    3460:	ldr	r3, [fp, #-8]
    3464:	ldr	r3, [r3, #4]
    3468:	ldr	r3, [r3, #40]	; 0x28
    346c:	ldr	r3, [r3]
    3470:	cmp	r3, #1
    3474:	bne	34a0 <coda_mem_cursor_read_int32_array+0xe4>
    3478:	ldr	r3, [fp, #-24]	; 0xffffffe8
    347c:	str	r3, [sp]
    3480:	mov	r3, #4
    3484:	ldr	r2, [fp, #-20]	; 0xffffffec
    3488:	movw	r1, #0
    348c:	movt	r1, #0
    3490:	ldr	r0, [fp, #-16]
    3494:	bl	0 <read_array>
    3498:	mov	r3, r0
    349c:	b	3540 <coda_mem_cursor_read_int32_array+0x184>
    34a0:	ldr	r3, [fp, #-8]
    34a4:	ldr	r3, [r3, #4]
    34a8:	ldr	r3, [r3, #40]	; 0x28
    34ac:	ldr	r3, [r3]
    34b0:	cmp	r3, #0
    34b4:	beq	34d8 <coda_mem_cursor_read_int32_array+0x11c>
    34b8:	movw	r3, #0
    34bc:	movt	r3, #0
    34c0:	movw	r2, #781	; 0x30d
    34c4:	movw	r1, #0
    34c8:	movt	r1, #0
    34cc:	movw	r0, #0
    34d0:	movt	r0, #0
    34d4:	bl	0 <__assert_fail>
    34d8:	mov	r3, #0
    34dc:	str	r3, [sp]
    34e0:	mov	r3, #4
    34e4:	ldr	r2, [fp, #-20]	; 0xffffffec
    34e8:	movw	r1, #0
    34ec:	movt	r1, #0
    34f0:	ldr	r0, [fp, #-16]
    34f4:	bl	0 <read_array>
    34f8:	mov	r3, r0
    34fc:	cmp	r3, #0
    3500:	beq	350c <coda_mem_cursor_read_int32_array+0x150>
    3504:	mvn	r3, #0
    3508:	b	3540 <coda_mem_cursor_read_int32_array+0x184>
    350c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3510:	cmp	r3, #0
    3514:	beq	353c <coda_mem_cursor_read_int32_array+0x180>
    3518:	mov	r2, #4
    351c:	ldr	r1, [fp, #-20]	; 0xffffffec
    3520:	ldr	r0, [fp, #-16]
    3524:	bl	520 <transpose_array>
    3528:	mov	r3, r0
    352c:	cmp	r3, #0
    3530:	beq	353c <coda_mem_cursor_read_int32_array+0x180>
    3534:	mvn	r3, #0
    3538:	b	3540 <coda_mem_cursor_read_int32_array+0x184>
    353c:	mov	r3, #0
    3540:	mov	r0, r3
    3544:	sub	sp, fp, #4
    3548:	ldr	fp, [sp]
    354c:	add	sp, sp, #4
    3550:	pop	{pc}		; (ldr pc, [sp], #4)

00003554 <coda_mem_cursor_read_uint32_array>:
    3554:	str	fp, [sp, #-8]!
    3558:	str	lr, [sp, #4]
    355c:	add	fp, sp, #4
    3560:	sub	sp, sp, #32
    3564:	str	r0, [fp, #-16]
    3568:	str	r1, [fp, #-20]	; 0xffffffec
    356c:	str	r2, [fp, #-24]	; 0xffffffe8
    3570:	ldr	r3, [fp, #-16]
    3574:	ldr	r3, [r3, #4]
    3578:	sub	r3, r3, #1
    357c:	ldr	r2, [fp, #-16]
    3580:	lsl	r3, r3, #4
    3584:	add	r3, r2, r3
    3588:	ldr	r3, [r3, #8]
    358c:	str	r3, [fp, #-8]
    3590:	ldr	r3, [fp, #-8]
    3594:	ldr	r3, [r3, #8]
    3598:	cmp	r3, #1
    359c:	bne	35c8 <coda_mem_cursor_read_uint32_array+0x74>
    35a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    35a4:	str	r3, [sp]
    35a8:	mov	r3, #4
    35ac:	ldr	r2, [fp, #-20]	; 0xffffffec
    35b0:	movw	r1, #0
    35b4:	movt	r1, #0
    35b8:	ldr	r0, [fp, #-16]
    35bc:	bl	0 <read_array>
    35c0:	mov	r3, r0
    35c4:	b	36d8 <coda_mem_cursor_read_uint32_array+0x184>
    35c8:	ldr	r3, [fp, #-8]
    35cc:	ldr	r3, [r3, #8]
    35d0:	cmp	r3, #2
    35d4:	beq	35f8 <coda_mem_cursor_read_uint32_array+0xa4>
    35d8:	movw	r3, #0
    35dc:	movt	r3, #0
    35e0:	movw	r2, #806	; 0x326
    35e4:	movw	r1, #0
    35e8:	movt	r1, #0
    35ec:	movw	r0, #0
    35f0:	movt	r0, #0
    35f4:	bl	0 <__assert_fail>
    35f8:	ldr	r3, [fp, #-8]
    35fc:	ldr	r3, [r3, #4]
    3600:	ldr	r3, [r3, #40]	; 0x28
    3604:	ldr	r3, [r3]
    3608:	cmp	r3, #1
    360c:	bne	3638 <coda_mem_cursor_read_uint32_array+0xe4>
    3610:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3614:	str	r3, [sp]
    3618:	mov	r3, #4
    361c:	ldr	r2, [fp, #-20]	; 0xffffffec
    3620:	movw	r1, #0
    3624:	movt	r1, #0
    3628:	ldr	r0, [fp, #-16]
    362c:	bl	0 <read_array>
    3630:	mov	r3, r0
    3634:	b	36d8 <coda_mem_cursor_read_uint32_array+0x184>
    3638:	ldr	r3, [fp, #-8]
    363c:	ldr	r3, [r3, #4]
    3640:	ldr	r3, [r3, #40]	; 0x28
    3644:	ldr	r3, [r3]
    3648:	cmp	r3, #0
    364c:	beq	3670 <coda_mem_cursor_read_uint32_array+0x11c>
    3650:	movw	r3, #0
    3654:	movt	r3, #0
    3658:	mov	r2, #812	; 0x32c
    365c:	movw	r1, #0
    3660:	movt	r1, #0
    3664:	movw	r0, #0
    3668:	movt	r0, #0
    366c:	bl	0 <__assert_fail>
    3670:	mov	r3, #0
    3674:	str	r3, [sp]
    3678:	mov	r3, #4
    367c:	ldr	r2, [fp, #-20]	; 0xffffffec
    3680:	movw	r1, #0
    3684:	movt	r1, #0
    3688:	ldr	r0, [fp, #-16]
    368c:	bl	0 <read_array>
    3690:	mov	r3, r0
    3694:	cmp	r3, #0
    3698:	beq	36a4 <coda_mem_cursor_read_uint32_array+0x150>
    369c:	mvn	r3, #0
    36a0:	b	36d8 <coda_mem_cursor_read_uint32_array+0x184>
    36a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    36a8:	cmp	r3, #0
    36ac:	beq	36d4 <coda_mem_cursor_read_uint32_array+0x180>
    36b0:	mov	r2, #4
    36b4:	ldr	r1, [fp, #-20]	; 0xffffffec
    36b8:	ldr	r0, [fp, #-16]
    36bc:	bl	520 <transpose_array>
    36c0:	mov	r3, r0
    36c4:	cmp	r3, #0
    36c8:	beq	36d4 <coda_mem_cursor_read_uint32_array+0x180>
    36cc:	mvn	r3, #0
    36d0:	b	36d8 <coda_mem_cursor_read_uint32_array+0x184>
    36d4:	mov	r3, #0
    36d8:	mov	r0, r3
    36dc:	sub	sp, fp, #4
    36e0:	ldr	fp, [sp]
    36e4:	add	sp, sp, #4
    36e8:	pop	{pc}		; (ldr pc, [sp], #4)

000036ec <coda_mem_cursor_read_int64_array>:
    36ec:	str	fp, [sp, #-8]!
    36f0:	str	lr, [sp, #4]
    36f4:	add	fp, sp, #4
    36f8:	sub	sp, sp, #32
    36fc:	str	r0, [fp, #-16]
    3700:	str	r1, [fp, #-20]	; 0xffffffec
    3704:	str	r2, [fp, #-24]	; 0xffffffe8
    3708:	ldr	r3, [fp, #-16]
    370c:	ldr	r3, [r3, #4]
    3710:	sub	r3, r3, #1
    3714:	ldr	r2, [fp, #-16]
    3718:	lsl	r3, r3, #4
    371c:	add	r3, r2, r3
    3720:	ldr	r3, [r3, #8]
    3724:	str	r3, [fp, #-8]
    3728:	ldr	r3, [fp, #-8]
    372c:	ldr	r3, [r3, #8]
    3730:	cmp	r3, #1
    3734:	bne	3760 <coda_mem_cursor_read_int64_array+0x74>
    3738:	ldr	r3, [fp, #-24]	; 0xffffffe8
    373c:	str	r3, [sp]
    3740:	mov	r3, #8
    3744:	ldr	r2, [fp, #-20]	; 0xffffffec
    3748:	movw	r1, #0
    374c:	movt	r1, #0
    3750:	ldr	r0, [fp, #-16]
    3754:	bl	0 <read_array>
    3758:	mov	r3, r0
    375c:	b	3870 <coda_mem_cursor_read_int64_array+0x184>
    3760:	ldr	r3, [fp, #-8]
    3764:	ldr	r3, [r3, #8]
    3768:	cmp	r3, #2
    376c:	beq	3790 <coda_mem_cursor_read_int64_array+0xa4>
    3770:	movw	r3, #0
    3774:	movt	r3, #0
    3778:	movw	r2, #837	; 0x345
    377c:	movw	r1, #0
    3780:	movt	r1, #0
    3784:	movw	r0, #0
    3788:	movt	r0, #0
    378c:	bl	0 <__assert_fail>
    3790:	ldr	r3, [fp, #-8]
    3794:	ldr	r3, [r3, #4]
    3798:	ldr	r3, [r3, #40]	; 0x28
    379c:	ldr	r3, [r3]
    37a0:	cmp	r3, #1
    37a4:	bne	37d0 <coda_mem_cursor_read_int64_array+0xe4>
    37a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    37ac:	str	r3, [sp]
    37b0:	mov	r3, #8
    37b4:	ldr	r2, [fp, #-20]	; 0xffffffec
    37b8:	movw	r1, #0
    37bc:	movt	r1, #0
    37c0:	ldr	r0, [fp, #-16]
    37c4:	bl	0 <read_array>
    37c8:	mov	r3, r0
    37cc:	b	3870 <coda_mem_cursor_read_int64_array+0x184>
    37d0:	ldr	r3, [fp, #-8]
    37d4:	ldr	r3, [r3, #4]
    37d8:	ldr	r3, [r3, #40]	; 0x28
    37dc:	ldr	r3, [r3]
    37e0:	cmp	r3, #0
    37e4:	beq	3808 <coda_mem_cursor_read_int64_array+0x11c>
    37e8:	movw	r3, #0
    37ec:	movt	r3, #0
    37f0:	movw	r2, #843	; 0x34b
    37f4:	movw	r1, #0
    37f8:	movt	r1, #0
    37fc:	movw	r0, #0
    3800:	movt	r0, #0
    3804:	bl	0 <__assert_fail>
    3808:	mov	r3, #0
    380c:	str	r3, [sp]
    3810:	mov	r3, #8
    3814:	ldr	r2, [fp, #-20]	; 0xffffffec
    3818:	movw	r1, #0
    381c:	movt	r1, #0
    3820:	ldr	r0, [fp, #-16]
    3824:	bl	0 <read_array>
    3828:	mov	r3, r0
    382c:	cmp	r3, #0
    3830:	beq	383c <coda_mem_cursor_read_int64_array+0x150>
    3834:	mvn	r3, #0
    3838:	b	3870 <coda_mem_cursor_read_int64_array+0x184>
    383c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3840:	cmp	r3, #0
    3844:	beq	386c <coda_mem_cursor_read_int64_array+0x180>
    3848:	mov	r2, #8
    384c:	ldr	r1, [fp, #-20]	; 0xffffffec
    3850:	ldr	r0, [fp, #-16]
    3854:	bl	520 <transpose_array>
    3858:	mov	r3, r0
    385c:	cmp	r3, #0
    3860:	beq	386c <coda_mem_cursor_read_int64_array+0x180>
    3864:	mvn	r3, #0
    3868:	b	3870 <coda_mem_cursor_read_int64_array+0x184>
    386c:	mov	r3, #0
    3870:	mov	r0, r3
    3874:	sub	sp, fp, #4
    3878:	ldr	fp, [sp]
    387c:	add	sp, sp, #4
    3880:	pop	{pc}		; (ldr pc, [sp], #4)

00003884 <coda_mem_cursor_read_uint64_array>:
    3884:	str	fp, [sp, #-8]!
    3888:	str	lr, [sp, #4]
    388c:	add	fp, sp, #4
    3890:	sub	sp, sp, #32
    3894:	str	r0, [fp, #-16]
    3898:	str	r1, [fp, #-20]	; 0xffffffec
    389c:	str	r2, [fp, #-24]	; 0xffffffe8
    38a0:	ldr	r3, [fp, #-16]
    38a4:	ldr	r3, [r3, #4]
    38a8:	sub	r3, r3, #1
    38ac:	ldr	r2, [fp, #-16]
    38b0:	lsl	r3, r3, #4
    38b4:	add	r3, r2, r3
    38b8:	ldr	r3, [r3, #8]
    38bc:	str	r3, [fp, #-8]
    38c0:	ldr	r3, [fp, #-8]
    38c4:	ldr	r3, [r3, #8]
    38c8:	cmp	r3, #1
    38cc:	bne	38f8 <coda_mem_cursor_read_uint64_array+0x74>
    38d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    38d4:	str	r3, [sp]
    38d8:	mov	r3, #8
    38dc:	ldr	r2, [fp, #-20]	; 0xffffffec
    38e0:	movw	r1, #0
    38e4:	movt	r1, #0
    38e8:	ldr	r0, [fp, #-16]
    38ec:	bl	0 <read_array>
    38f0:	mov	r3, r0
    38f4:	b	3a08 <coda_mem_cursor_read_uint64_array+0x184>
    38f8:	ldr	r3, [fp, #-8]
    38fc:	ldr	r3, [r3, #8]
    3900:	cmp	r3, #2
    3904:	beq	3928 <coda_mem_cursor_read_uint64_array+0xa4>
    3908:	movw	r3, #0
    390c:	movt	r3, #0
    3910:	mov	r2, #868	; 0x364
    3914:	movw	r1, #0
    3918:	movt	r1, #0
    391c:	movw	r0, #0
    3920:	movt	r0, #0
    3924:	bl	0 <__assert_fail>
    3928:	ldr	r3, [fp, #-8]
    392c:	ldr	r3, [r3, #4]
    3930:	ldr	r3, [r3, #40]	; 0x28
    3934:	ldr	r3, [r3]
    3938:	cmp	r3, #1
    393c:	bne	3968 <coda_mem_cursor_read_uint64_array+0xe4>
    3940:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3944:	str	r3, [sp]
    3948:	mov	r3, #8
    394c:	ldr	r2, [fp, #-20]	; 0xffffffec
    3950:	movw	r1, #0
    3954:	movt	r1, #0
    3958:	ldr	r0, [fp, #-16]
    395c:	bl	0 <read_array>
    3960:	mov	r3, r0
    3964:	b	3a08 <coda_mem_cursor_read_uint64_array+0x184>
    3968:	ldr	r3, [fp, #-8]
    396c:	ldr	r3, [r3, #4]
    3970:	ldr	r3, [r3, #40]	; 0x28
    3974:	ldr	r3, [r3]
    3978:	cmp	r3, #0
    397c:	beq	39a0 <coda_mem_cursor_read_uint64_array+0x11c>
    3980:	movw	r3, #0
    3984:	movt	r3, #0
    3988:	movw	r2, #874	; 0x36a
    398c:	movw	r1, #0
    3990:	movt	r1, #0
    3994:	movw	r0, #0
    3998:	movt	r0, #0
    399c:	bl	0 <__assert_fail>
    39a0:	mov	r3, #0
    39a4:	str	r3, [sp]
    39a8:	mov	r3, #8
    39ac:	ldr	r2, [fp, #-20]	; 0xffffffec
    39b0:	movw	r1, #0
    39b4:	movt	r1, #0
    39b8:	ldr	r0, [fp, #-16]
    39bc:	bl	0 <read_array>
    39c0:	mov	r3, r0
    39c4:	cmp	r3, #0
    39c8:	beq	39d4 <coda_mem_cursor_read_uint64_array+0x150>
    39cc:	mvn	r3, #0
    39d0:	b	3a08 <coda_mem_cursor_read_uint64_array+0x184>
    39d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    39d8:	cmp	r3, #0
    39dc:	beq	3a04 <coda_mem_cursor_read_uint64_array+0x180>
    39e0:	mov	r2, #8
    39e4:	ldr	r1, [fp, #-20]	; 0xffffffec
    39e8:	ldr	r0, [fp, #-16]
    39ec:	bl	520 <transpose_array>
    39f0:	mov	r3, r0
    39f4:	cmp	r3, #0
    39f8:	beq	3a04 <coda_mem_cursor_read_uint64_array+0x180>
    39fc:	mvn	r3, #0
    3a00:	b	3a08 <coda_mem_cursor_read_uint64_array+0x184>
    3a04:	mov	r3, #0
    3a08:	mov	r0, r3
    3a0c:	sub	sp, fp, #4
    3a10:	ldr	fp, [sp]
    3a14:	add	sp, sp, #4
    3a18:	pop	{pc}		; (ldr pc, [sp], #4)

00003a1c <coda_mem_cursor_read_float_array>:
    3a1c:	str	fp, [sp, #-8]!
    3a20:	str	lr, [sp, #4]
    3a24:	add	fp, sp, #4
    3a28:	sub	sp, sp, #32
    3a2c:	str	r0, [fp, #-16]
    3a30:	str	r1, [fp, #-20]	; 0xffffffec
    3a34:	str	r2, [fp, #-24]	; 0xffffffe8
    3a38:	ldr	r3, [fp, #-16]
    3a3c:	ldr	r3, [r3, #4]
    3a40:	sub	r3, r3, #1
    3a44:	ldr	r2, [fp, #-16]
    3a48:	lsl	r3, r3, #4
    3a4c:	add	r3, r2, r3
    3a50:	ldr	r3, [r3, #8]
    3a54:	str	r3, [fp, #-8]
    3a58:	ldr	r3, [fp, #-8]
    3a5c:	ldr	r3, [r3, #8]
    3a60:	cmp	r3, #1
    3a64:	bne	3a90 <coda_mem_cursor_read_float_array+0x74>
    3a68:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3a6c:	str	r3, [sp]
    3a70:	mov	r3, #4
    3a74:	ldr	r2, [fp, #-20]	; 0xffffffec
    3a78:	movw	r1, #0
    3a7c:	movt	r1, #0
    3a80:	ldr	r0, [fp, #-16]
    3a84:	bl	0 <read_array>
    3a88:	mov	r3, r0
    3a8c:	b	3ba0 <coda_mem_cursor_read_float_array+0x184>
    3a90:	ldr	r3, [fp, #-8]
    3a94:	ldr	r3, [r3, #8]
    3a98:	cmp	r3, #2
    3a9c:	beq	3ac0 <coda_mem_cursor_read_float_array+0xa4>
    3aa0:	movw	r3, #0
    3aa4:	movt	r3, #0
    3aa8:	movw	r2, #899	; 0x383
    3aac:	movw	r1, #0
    3ab0:	movt	r1, #0
    3ab4:	movw	r0, #0
    3ab8:	movt	r0, #0
    3abc:	bl	0 <__assert_fail>
    3ac0:	ldr	r3, [fp, #-8]
    3ac4:	ldr	r3, [r3, #4]
    3ac8:	ldr	r3, [r3, #40]	; 0x28
    3acc:	ldr	r3, [r3]
    3ad0:	cmp	r3, #1
    3ad4:	bne	3b00 <coda_mem_cursor_read_float_array+0xe4>
    3ad8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3adc:	str	r3, [sp]
    3ae0:	mov	r3, #4
    3ae4:	ldr	r2, [fp, #-20]	; 0xffffffec
    3ae8:	movw	r1, #0
    3aec:	movt	r1, #0
    3af0:	ldr	r0, [fp, #-16]
    3af4:	bl	0 <read_array>
    3af8:	mov	r3, r0
    3afc:	b	3ba0 <coda_mem_cursor_read_float_array+0x184>
    3b00:	ldr	r3, [fp, #-8]
    3b04:	ldr	r3, [r3, #4]
    3b08:	ldr	r3, [r3, #40]	; 0x28
    3b0c:	ldr	r3, [r3]
    3b10:	cmp	r3, #0
    3b14:	beq	3b38 <coda_mem_cursor_read_float_array+0x11c>
    3b18:	movw	r3, #0
    3b1c:	movt	r3, #0
    3b20:	movw	r2, #905	; 0x389
    3b24:	movw	r1, #0
    3b28:	movt	r1, #0
    3b2c:	movw	r0, #0
    3b30:	movt	r0, #0
    3b34:	bl	0 <__assert_fail>
    3b38:	mov	r3, #0
    3b3c:	str	r3, [sp]
    3b40:	mov	r3, #4
    3b44:	ldr	r2, [fp, #-20]	; 0xffffffec
    3b48:	movw	r1, #0
    3b4c:	movt	r1, #0
    3b50:	ldr	r0, [fp, #-16]
    3b54:	bl	0 <read_array>
    3b58:	mov	r3, r0
    3b5c:	cmp	r3, #0
    3b60:	beq	3b6c <coda_mem_cursor_read_float_array+0x150>
    3b64:	mvn	r3, #0
    3b68:	b	3ba0 <coda_mem_cursor_read_float_array+0x184>
    3b6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3b70:	cmp	r3, #0
    3b74:	beq	3b9c <coda_mem_cursor_read_float_array+0x180>
    3b78:	mov	r2, #4
    3b7c:	ldr	r1, [fp, #-20]	; 0xffffffec
    3b80:	ldr	r0, [fp, #-16]
    3b84:	bl	520 <transpose_array>
    3b88:	mov	r3, r0
    3b8c:	cmp	r3, #0
    3b90:	beq	3b9c <coda_mem_cursor_read_float_array+0x180>
    3b94:	mvn	r3, #0
    3b98:	b	3ba0 <coda_mem_cursor_read_float_array+0x184>
    3b9c:	mov	r3, #0
    3ba0:	mov	r0, r3
    3ba4:	sub	sp, fp, #4
    3ba8:	ldr	fp, [sp]
    3bac:	add	sp, sp, #4
    3bb0:	pop	{pc}		; (ldr pc, [sp], #4)

00003bb4 <coda_mem_cursor_read_double_array>:
    3bb4:	str	fp, [sp, #-8]!
    3bb8:	str	lr, [sp, #4]
    3bbc:	add	fp, sp, #4
    3bc0:	sub	sp, sp, #32
    3bc4:	str	r0, [fp, #-16]
    3bc8:	str	r1, [fp, #-20]	; 0xffffffec
    3bcc:	str	r2, [fp, #-24]	; 0xffffffe8
    3bd0:	ldr	r3, [fp, #-16]
    3bd4:	ldr	r3, [r3, #4]
    3bd8:	sub	r3, r3, #1
    3bdc:	ldr	r2, [fp, #-16]
    3be0:	lsl	r3, r3, #4
    3be4:	add	r3, r2, r3
    3be8:	ldr	r3, [r3, #8]
    3bec:	str	r3, [fp, #-8]
    3bf0:	ldr	r3, [fp, #-8]
    3bf4:	ldr	r3, [r3, #8]
    3bf8:	cmp	r3, #1
    3bfc:	bne	3c28 <coda_mem_cursor_read_double_array+0x74>
    3c00:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3c04:	str	r3, [sp]
    3c08:	mov	r3, #8
    3c0c:	ldr	r2, [fp, #-20]	; 0xffffffec
    3c10:	movw	r1, #0
    3c14:	movt	r1, #0
    3c18:	ldr	r0, [fp, #-16]
    3c1c:	bl	0 <read_array>
    3c20:	mov	r3, r0
    3c24:	b	3d38 <coda_mem_cursor_read_double_array+0x184>
    3c28:	ldr	r3, [fp, #-8]
    3c2c:	ldr	r3, [r3, #8]
    3c30:	cmp	r3, #2
    3c34:	beq	3c58 <coda_mem_cursor_read_double_array+0xa4>
    3c38:	movw	r3, #0
    3c3c:	movt	r3, #0
    3c40:	movw	r2, #930	; 0x3a2
    3c44:	movw	r1, #0
    3c48:	movt	r1, #0
    3c4c:	movw	r0, #0
    3c50:	movt	r0, #0
    3c54:	bl	0 <__assert_fail>
    3c58:	ldr	r3, [fp, #-8]
    3c5c:	ldr	r3, [r3, #4]
    3c60:	ldr	r3, [r3, #40]	; 0x28
    3c64:	ldr	r3, [r3]
    3c68:	cmp	r3, #1
    3c6c:	bne	3c98 <coda_mem_cursor_read_double_array+0xe4>
    3c70:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3c74:	str	r3, [sp]
    3c78:	mov	r3, #8
    3c7c:	ldr	r2, [fp, #-20]	; 0xffffffec
    3c80:	movw	r1, #0
    3c84:	movt	r1, #0
    3c88:	ldr	r0, [fp, #-16]
    3c8c:	bl	0 <read_array>
    3c90:	mov	r3, r0
    3c94:	b	3d38 <coda_mem_cursor_read_double_array+0x184>
    3c98:	ldr	r3, [fp, #-8]
    3c9c:	ldr	r3, [r3, #4]
    3ca0:	ldr	r3, [r3, #40]	; 0x28
    3ca4:	ldr	r3, [r3]
    3ca8:	cmp	r3, #0
    3cac:	beq	3cd0 <coda_mem_cursor_read_double_array+0x11c>
    3cb0:	movw	r3, #0
    3cb4:	movt	r3, #0
    3cb8:	mov	r2, #936	; 0x3a8
    3cbc:	movw	r1, #0
    3cc0:	movt	r1, #0
    3cc4:	movw	r0, #0
    3cc8:	movt	r0, #0
    3ccc:	bl	0 <__assert_fail>
    3cd0:	mov	r3, #0
    3cd4:	str	r3, [sp]
    3cd8:	mov	r3, #8
    3cdc:	ldr	r2, [fp, #-20]	; 0xffffffec
    3ce0:	movw	r1, #0
    3ce4:	movt	r1, #0
    3ce8:	ldr	r0, [fp, #-16]
    3cec:	bl	0 <read_array>
    3cf0:	mov	r3, r0
    3cf4:	cmp	r3, #0
    3cf8:	beq	3d04 <coda_mem_cursor_read_double_array+0x150>
    3cfc:	mvn	r3, #0
    3d00:	b	3d38 <coda_mem_cursor_read_double_array+0x184>
    3d04:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3d08:	cmp	r3, #0
    3d0c:	beq	3d34 <coda_mem_cursor_read_double_array+0x180>
    3d10:	mov	r2, #8
    3d14:	ldr	r1, [fp, #-20]	; 0xffffffec
    3d18:	ldr	r0, [fp, #-16]
    3d1c:	bl	520 <transpose_array>
    3d20:	mov	r3, r0
    3d24:	cmp	r3, #0
    3d28:	beq	3d34 <coda_mem_cursor_read_double_array+0x180>
    3d2c:	mvn	r3, #0
    3d30:	b	3d38 <coda_mem_cursor_read_double_array+0x184>
    3d34:	mov	r3, #0
    3d38:	mov	r0, r3
    3d3c:	sub	sp, fp, #4
    3d40:	ldr	fp, [sp]
    3d44:	add	sp, sp, #4
    3d48:	pop	{pc}		; (ldr pc, [sp], #4)

00003d4c <coda_mem_cursor_read_char_array>:
    3d4c:	str	fp, [sp, #-8]!
    3d50:	str	lr, [sp, #4]
    3d54:	add	fp, sp, #4
    3d58:	sub	sp, sp, #32
    3d5c:	str	r0, [fp, #-16]
    3d60:	str	r1, [fp, #-20]	; 0xffffffec
    3d64:	str	r2, [fp, #-24]	; 0xffffffe8
    3d68:	ldr	r3, [fp, #-16]
    3d6c:	ldr	r3, [r3, #4]
    3d70:	sub	r3, r3, #1
    3d74:	ldr	r2, [fp, #-16]
    3d78:	lsl	r3, r3, #4
    3d7c:	add	r3, r2, r3
    3d80:	ldr	r3, [r3, #8]
    3d84:	str	r3, [fp, #-8]
    3d88:	ldr	r3, [fp, #-8]
    3d8c:	ldr	r3, [r3, #8]
    3d90:	cmp	r3, #1
    3d94:	bne	3dc0 <coda_mem_cursor_read_char_array+0x74>
    3d98:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3d9c:	str	r3, [sp]
    3da0:	mov	r3, #1
    3da4:	ldr	r2, [fp, #-20]	; 0xffffffec
    3da8:	movw	r1, #0
    3dac:	movt	r1, #0
    3db0:	ldr	r0, [fp, #-16]
    3db4:	bl	0 <read_array>
    3db8:	mov	r3, r0
    3dbc:	b	3ed0 <coda_mem_cursor_read_char_array+0x184>
    3dc0:	ldr	r3, [fp, #-8]
    3dc4:	ldr	r3, [r3, #8]
    3dc8:	cmp	r3, #2
    3dcc:	beq	3df0 <coda_mem_cursor_read_char_array+0xa4>
    3dd0:	movw	r3, #0
    3dd4:	movt	r3, #0
    3dd8:	mov	r2, #960	; 0x3c0
    3ddc:	movw	r1, #0
    3de0:	movt	r1, #0
    3de4:	movw	r0, #0
    3de8:	movt	r0, #0
    3dec:	bl	0 <__assert_fail>
    3df0:	ldr	r3, [fp, #-8]
    3df4:	ldr	r3, [r3, #4]
    3df8:	ldr	r3, [r3, #40]	; 0x28
    3dfc:	ldr	r3, [r3]
    3e00:	cmp	r3, #1
    3e04:	bne	3e30 <coda_mem_cursor_read_char_array+0xe4>
    3e08:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3e0c:	str	r3, [sp]
    3e10:	mov	r3, #1
    3e14:	ldr	r2, [fp, #-20]	; 0xffffffec
    3e18:	movw	r1, #0
    3e1c:	movt	r1, #0
    3e20:	ldr	r0, [fp, #-16]
    3e24:	bl	0 <read_array>
    3e28:	mov	r3, r0
    3e2c:	b	3ed0 <coda_mem_cursor_read_char_array+0x184>
    3e30:	ldr	r3, [fp, #-8]
    3e34:	ldr	r3, [r3, #4]
    3e38:	ldr	r3, [r3, #40]	; 0x28
    3e3c:	ldr	r3, [r3]
    3e40:	cmp	r3, #0
    3e44:	beq	3e68 <coda_mem_cursor_read_char_array+0x11c>
    3e48:	movw	r3, #0
    3e4c:	movt	r3, #0
    3e50:	movw	r2, #966	; 0x3c6
    3e54:	movw	r1, #0
    3e58:	movt	r1, #0
    3e5c:	movw	r0, #0
    3e60:	movt	r0, #0
    3e64:	bl	0 <__assert_fail>
    3e68:	mov	r3, #0
    3e6c:	str	r3, [sp]
    3e70:	mov	r3, #1
    3e74:	ldr	r2, [fp, #-20]	; 0xffffffec
    3e78:	movw	r1, #0
    3e7c:	movt	r1, #0
    3e80:	ldr	r0, [fp, #-16]
    3e84:	bl	0 <read_array>
    3e88:	mov	r3, r0
    3e8c:	cmp	r3, #0
    3e90:	beq	3e9c <coda_mem_cursor_read_char_array+0x150>
    3e94:	mvn	r3, #0
    3e98:	b	3ed0 <coda_mem_cursor_read_char_array+0x184>
    3e9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3ea0:	cmp	r3, #0
    3ea4:	beq	3ecc <coda_mem_cursor_read_char_array+0x180>
    3ea8:	mov	r2, #1
    3eac:	ldr	r1, [fp, #-20]	; 0xffffffec
    3eb0:	ldr	r0, [fp, #-16]
    3eb4:	bl	520 <transpose_array>
    3eb8:	mov	r3, r0
    3ebc:	cmp	r3, #0
    3ec0:	beq	3ecc <coda_mem_cursor_read_char_array+0x180>
    3ec4:	mvn	r3, #0
    3ec8:	b	3ed0 <coda_mem_cursor_read_char_array+0x184>
    3ecc:	mov	r3, #0
    3ed0:	mov	r0, r3
    3ed4:	sub	sp, fp, #4
    3ed8:	ldr	fp, [sp]
    3edc:	add	sp, sp, #4
    3ee0:	pop	{pc}		; (ldr pc, [sp], #4)

00003ee4 <coda_mem_cursor_read_int8_partial_array>:
    3ee4:	str	fp, [sp, #-8]!
    3ee8:	str	lr, [sp, #4]
    3eec:	add	fp, sp, #4
    3ef0:	sub	sp, sp, #32
    3ef4:	str	r0, [fp, #-16]
    3ef8:	str	r1, [fp, #-20]	; 0xffffffec
    3efc:	str	r2, [fp, #-24]	; 0xffffffe8
    3f00:	str	r3, [fp, #-28]	; 0xffffffe4
    3f04:	ldr	r3, [fp, #-16]
    3f08:	ldr	r3, [r3, #4]
    3f0c:	sub	r3, r3, #1
    3f10:	ldr	r2, [fp, #-16]
    3f14:	lsl	r3, r3, #4
    3f18:	add	r3, r2, r3
    3f1c:	ldr	r3, [r3, #8]
    3f20:	str	r3, [fp, #-8]
    3f24:	ldr	r3, [fp, #-8]
    3f28:	ldr	r3, [r3, #8]
    3f2c:	cmp	r3, #1
    3f30:	bne	3f64 <coda_mem_cursor_read_int8_partial_array+0x80>
    3f34:	mov	r3, #1
    3f38:	str	r3, [sp, #4]
    3f3c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3f40:	str	r3, [sp]
    3f44:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3f48:	ldr	r2, [fp, #-20]	; 0xffffffec
    3f4c:	movw	r1, #0
    3f50:	movt	r1, #0
    3f54:	ldr	r0, [fp, #-16]
    3f58:	bl	408 <read_partial_array>
    3f5c:	mov	r3, r0
    3f60:	b	4040 <coda_mem_cursor_read_int8_partial_array+0x15c>
    3f64:	ldr	r3, [fp, #-8]
    3f68:	ldr	r3, [r3, #8]
    3f6c:	cmp	r3, #2
    3f70:	beq	3f94 <coda_mem_cursor_read_int8_partial_array+0xb0>
    3f74:	movw	r3, #0
    3f78:	movt	r3, #0
    3f7c:	movw	r2, #991	; 0x3df
    3f80:	movw	r1, #0
    3f84:	movt	r1, #0
    3f88:	movw	r0, #0
    3f8c:	movt	r0, #0
    3f90:	bl	0 <__assert_fail>
    3f94:	ldr	r3, [fp, #-8]
    3f98:	ldr	r3, [r3, #4]
    3f9c:	ldr	r3, [r3, #40]	; 0x28
    3fa0:	ldr	r3, [r3]
    3fa4:	cmp	r3, #1
    3fa8:	bne	3fdc <coda_mem_cursor_read_int8_partial_array+0xf8>
    3fac:	mov	r3, #1
    3fb0:	str	r3, [sp, #4]
    3fb4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3fb8:	str	r3, [sp]
    3fbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3fc0:	ldr	r2, [fp, #-20]	; 0xffffffec
    3fc4:	movw	r1, #0
    3fc8:	movt	r1, #0
    3fcc:	ldr	r0, [fp, #-16]
    3fd0:	bl	408 <read_partial_array>
    3fd4:	mov	r3, r0
    3fd8:	b	4040 <coda_mem_cursor_read_int8_partial_array+0x15c>
    3fdc:	ldr	r3, [fp, #-8]
    3fe0:	ldr	r3, [r3, #4]
    3fe4:	ldr	r3, [r3, #40]	; 0x28
    3fe8:	ldr	r3, [r3]
    3fec:	cmp	r3, #0
    3ff0:	beq	4014 <coda_mem_cursor_read_int8_partial_array+0x130>
    3ff4:	movw	r3, #0
    3ff8:	movt	r3, #0
    3ffc:	movw	r2, #997	; 0x3e5
    4000:	movw	r1, #0
    4004:	movt	r1, #0
    4008:	movw	r0, #0
    400c:	movt	r0, #0
    4010:	bl	0 <__assert_fail>
    4014:	mov	r3, #1
    4018:	str	r3, [sp, #4]
    401c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4020:	str	r3, [sp]
    4024:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4028:	ldr	r2, [fp, #-20]	; 0xffffffec
    402c:	movw	r1, #0
    4030:	movt	r1, #0
    4034:	ldr	r0, [fp, #-16]
    4038:	bl	408 <read_partial_array>
    403c:	mov	r3, r0
    4040:	mov	r0, r3
    4044:	sub	sp, fp, #4
    4048:	ldr	fp, [sp]
    404c:	add	sp, sp, #4
    4050:	pop	{pc}		; (ldr pc, [sp], #4)

00004054 <coda_mem_cursor_read_uint8_partial_array>:
    4054:	str	fp, [sp, #-8]!
    4058:	str	lr, [sp, #4]
    405c:	add	fp, sp, #4
    4060:	sub	sp, sp, #32
    4064:	str	r0, [fp, #-16]
    4068:	str	r1, [fp, #-20]	; 0xffffffec
    406c:	str	r2, [fp, #-24]	; 0xffffffe8
    4070:	str	r3, [fp, #-28]	; 0xffffffe4
    4074:	ldr	r3, [fp, #-16]
    4078:	ldr	r3, [r3, #4]
    407c:	sub	r3, r3, #1
    4080:	ldr	r2, [fp, #-16]
    4084:	lsl	r3, r3, #4
    4088:	add	r3, r2, r3
    408c:	ldr	r3, [r3, #8]
    4090:	str	r3, [fp, #-8]
    4094:	ldr	r3, [fp, #-8]
    4098:	ldr	r3, [r3, #8]
    409c:	cmp	r3, #1
    40a0:	bne	40d4 <coda_mem_cursor_read_uint8_partial_array+0x80>
    40a4:	mov	r3, #1
    40a8:	str	r3, [sp, #4]
    40ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
    40b0:	str	r3, [sp]
    40b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    40b8:	ldr	r2, [fp, #-20]	; 0xffffffec
    40bc:	movw	r1, #0
    40c0:	movt	r1, #0
    40c4:	ldr	r0, [fp, #-16]
    40c8:	bl	408 <read_partial_array>
    40cc:	mov	r3, r0
    40d0:	b	41b0 <coda_mem_cursor_read_uint8_partial_array+0x15c>
    40d4:	ldr	r3, [fp, #-8]
    40d8:	ldr	r3, [r3, #8]
    40dc:	cmp	r3, #2
    40e0:	beq	4104 <coda_mem_cursor_read_uint8_partial_array+0xb0>
    40e4:	movw	r3, #0
    40e8:	movt	r3, #0
    40ec:	movw	r2, #1011	; 0x3f3
    40f0:	movw	r1, #0
    40f4:	movt	r1, #0
    40f8:	movw	r0, #0
    40fc:	movt	r0, #0
    4100:	bl	0 <__assert_fail>
    4104:	ldr	r3, [fp, #-8]
    4108:	ldr	r3, [r3, #4]
    410c:	ldr	r3, [r3, #40]	; 0x28
    4110:	ldr	r3, [r3]
    4114:	cmp	r3, #1
    4118:	bne	414c <coda_mem_cursor_read_uint8_partial_array+0xf8>
    411c:	mov	r3, #1
    4120:	str	r3, [sp, #4]
    4124:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4128:	str	r3, [sp]
    412c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4130:	ldr	r2, [fp, #-20]	; 0xffffffec
    4134:	movw	r1, #0
    4138:	movt	r1, #0
    413c:	ldr	r0, [fp, #-16]
    4140:	bl	408 <read_partial_array>
    4144:	mov	r3, r0
    4148:	b	41b0 <coda_mem_cursor_read_uint8_partial_array+0x15c>
    414c:	ldr	r3, [fp, #-8]
    4150:	ldr	r3, [r3, #4]
    4154:	ldr	r3, [r3, #40]	; 0x28
    4158:	ldr	r3, [r3]
    415c:	cmp	r3, #0
    4160:	beq	4184 <coda_mem_cursor_read_uint8_partial_array+0x130>
    4164:	movw	r3, #0
    4168:	movt	r3, #0
    416c:	movw	r2, #1017	; 0x3f9
    4170:	movw	r1, #0
    4174:	movt	r1, #0
    4178:	movw	r0, #0
    417c:	movt	r0, #0
    4180:	bl	0 <__assert_fail>
    4184:	mov	r3, #1
    4188:	str	r3, [sp, #4]
    418c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4190:	str	r3, [sp]
    4194:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4198:	ldr	r2, [fp, #-20]	; 0xffffffec
    419c:	movw	r1, #0
    41a0:	movt	r1, #0
    41a4:	ldr	r0, [fp, #-16]
    41a8:	bl	408 <read_partial_array>
    41ac:	mov	r3, r0
    41b0:	mov	r0, r3
    41b4:	sub	sp, fp, #4
    41b8:	ldr	fp, [sp]
    41bc:	add	sp, sp, #4
    41c0:	pop	{pc}		; (ldr pc, [sp], #4)

000041c4 <coda_mem_cursor_read_int16_partial_array>:
    41c4:	str	fp, [sp, #-8]!
    41c8:	str	lr, [sp, #4]
    41cc:	add	fp, sp, #4
    41d0:	sub	sp, sp, #32
    41d4:	str	r0, [fp, #-16]
    41d8:	str	r1, [fp, #-20]	; 0xffffffec
    41dc:	str	r2, [fp, #-24]	; 0xffffffe8
    41e0:	str	r3, [fp, #-28]	; 0xffffffe4
    41e4:	ldr	r3, [fp, #-16]
    41e8:	ldr	r3, [r3, #4]
    41ec:	sub	r3, r3, #1
    41f0:	ldr	r2, [fp, #-16]
    41f4:	lsl	r3, r3, #4
    41f8:	add	r3, r2, r3
    41fc:	ldr	r3, [r3, #8]
    4200:	str	r3, [fp, #-8]
    4204:	ldr	r3, [fp, #-8]
    4208:	ldr	r3, [r3, #8]
    420c:	cmp	r3, #1
    4210:	bne	4244 <coda_mem_cursor_read_int16_partial_array+0x80>
    4214:	mov	r3, #2
    4218:	str	r3, [sp, #4]
    421c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4220:	str	r3, [sp]
    4224:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4228:	ldr	r2, [fp, #-20]	; 0xffffffec
    422c:	movw	r1, #0
    4230:	movt	r1, #0
    4234:	ldr	r0, [fp, #-16]
    4238:	bl	408 <read_partial_array>
    423c:	mov	r3, r0
    4240:	b	4320 <coda_mem_cursor_read_int16_partial_array+0x15c>
    4244:	ldr	r3, [fp, #-8]
    4248:	ldr	r3, [r3, #8]
    424c:	cmp	r3, #2
    4250:	beq	4274 <coda_mem_cursor_read_int16_partial_array+0xb0>
    4254:	movw	r3, #0
    4258:	movt	r3, #0
    425c:	movw	r2, #1031	; 0x407
    4260:	movw	r1, #0
    4264:	movt	r1, #0
    4268:	movw	r0, #0
    426c:	movt	r0, #0
    4270:	bl	0 <__assert_fail>
    4274:	ldr	r3, [fp, #-8]
    4278:	ldr	r3, [r3, #4]
    427c:	ldr	r3, [r3, #40]	; 0x28
    4280:	ldr	r3, [r3]
    4284:	cmp	r3, #1
    4288:	bne	42bc <coda_mem_cursor_read_int16_partial_array+0xf8>
    428c:	mov	r3, #2
    4290:	str	r3, [sp, #4]
    4294:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4298:	str	r3, [sp]
    429c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    42a0:	ldr	r2, [fp, #-20]	; 0xffffffec
    42a4:	movw	r1, #0
    42a8:	movt	r1, #0
    42ac:	ldr	r0, [fp, #-16]
    42b0:	bl	408 <read_partial_array>
    42b4:	mov	r3, r0
    42b8:	b	4320 <coda_mem_cursor_read_int16_partial_array+0x15c>
    42bc:	ldr	r3, [fp, #-8]
    42c0:	ldr	r3, [r3, #4]
    42c4:	ldr	r3, [r3, #40]	; 0x28
    42c8:	ldr	r3, [r3]
    42cc:	cmp	r3, #0
    42d0:	beq	42f4 <coda_mem_cursor_read_int16_partial_array+0x130>
    42d4:	movw	r3, #0
    42d8:	movt	r3, #0
    42dc:	movw	r2, #1037	; 0x40d
    42e0:	movw	r1, #0
    42e4:	movt	r1, #0
    42e8:	movw	r0, #0
    42ec:	movt	r0, #0
    42f0:	bl	0 <__assert_fail>
    42f4:	mov	r3, #2
    42f8:	str	r3, [sp, #4]
    42fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4300:	str	r3, [sp]
    4304:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4308:	ldr	r2, [fp, #-20]	; 0xffffffec
    430c:	movw	r1, #0
    4310:	movt	r1, #0
    4314:	ldr	r0, [fp, #-16]
    4318:	bl	408 <read_partial_array>
    431c:	mov	r3, r0
    4320:	mov	r0, r3
    4324:	sub	sp, fp, #4
    4328:	ldr	fp, [sp]
    432c:	add	sp, sp, #4
    4330:	pop	{pc}		; (ldr pc, [sp], #4)

00004334 <coda_mem_cursor_read_uint16_partial_array>:
    4334:	str	fp, [sp, #-8]!
    4338:	str	lr, [sp, #4]
    433c:	add	fp, sp, #4
    4340:	sub	sp, sp, #32
    4344:	str	r0, [fp, #-16]
    4348:	str	r1, [fp, #-20]	; 0xffffffec
    434c:	str	r2, [fp, #-24]	; 0xffffffe8
    4350:	str	r3, [fp, #-28]	; 0xffffffe4
    4354:	ldr	r3, [fp, #-16]
    4358:	ldr	r3, [r3, #4]
    435c:	sub	r3, r3, #1
    4360:	ldr	r2, [fp, #-16]
    4364:	lsl	r3, r3, #4
    4368:	add	r3, r2, r3
    436c:	ldr	r3, [r3, #8]
    4370:	str	r3, [fp, #-8]
    4374:	ldr	r3, [fp, #-8]
    4378:	ldr	r3, [r3, #8]
    437c:	cmp	r3, #1
    4380:	bne	43b4 <coda_mem_cursor_read_uint16_partial_array+0x80>
    4384:	mov	r3, #2
    4388:	str	r3, [sp, #4]
    438c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4390:	str	r3, [sp]
    4394:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4398:	ldr	r2, [fp, #-20]	; 0xffffffec
    439c:	movw	r1, #0
    43a0:	movt	r1, #0
    43a4:	ldr	r0, [fp, #-16]
    43a8:	bl	408 <read_partial_array>
    43ac:	mov	r3, r0
    43b0:	b	4490 <coda_mem_cursor_read_uint16_partial_array+0x15c>
    43b4:	ldr	r3, [fp, #-8]
    43b8:	ldr	r3, [r3, #8]
    43bc:	cmp	r3, #2
    43c0:	beq	43e4 <coda_mem_cursor_read_uint16_partial_array+0xb0>
    43c4:	movw	r3, #0
    43c8:	movt	r3, #0
    43cc:	movw	r2, #1051	; 0x41b
    43d0:	movw	r1, #0
    43d4:	movt	r1, #0
    43d8:	movw	r0, #0
    43dc:	movt	r0, #0
    43e0:	bl	0 <__assert_fail>
    43e4:	ldr	r3, [fp, #-8]
    43e8:	ldr	r3, [r3, #4]
    43ec:	ldr	r3, [r3, #40]	; 0x28
    43f0:	ldr	r3, [r3]
    43f4:	cmp	r3, #1
    43f8:	bne	442c <coda_mem_cursor_read_uint16_partial_array+0xf8>
    43fc:	mov	r3, #2
    4400:	str	r3, [sp, #4]
    4404:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4408:	str	r3, [sp]
    440c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4410:	ldr	r2, [fp, #-20]	; 0xffffffec
    4414:	movw	r1, #0
    4418:	movt	r1, #0
    441c:	ldr	r0, [fp, #-16]
    4420:	bl	408 <read_partial_array>
    4424:	mov	r3, r0
    4428:	b	4490 <coda_mem_cursor_read_uint16_partial_array+0x15c>
    442c:	ldr	r3, [fp, #-8]
    4430:	ldr	r3, [r3, #4]
    4434:	ldr	r3, [r3, #40]	; 0x28
    4438:	ldr	r3, [r3]
    443c:	cmp	r3, #0
    4440:	beq	4464 <coda_mem_cursor_read_uint16_partial_array+0x130>
    4444:	movw	r3, #0
    4448:	movt	r3, #0
    444c:	movw	r2, #1057	; 0x421
    4450:	movw	r1, #0
    4454:	movt	r1, #0
    4458:	movw	r0, #0
    445c:	movt	r0, #0
    4460:	bl	0 <__assert_fail>
    4464:	mov	r3, #2
    4468:	str	r3, [sp, #4]
    446c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4470:	str	r3, [sp]
    4474:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4478:	ldr	r2, [fp, #-20]	; 0xffffffec
    447c:	movw	r1, #0
    4480:	movt	r1, #0
    4484:	ldr	r0, [fp, #-16]
    4488:	bl	408 <read_partial_array>
    448c:	mov	r3, r0
    4490:	mov	r0, r3
    4494:	sub	sp, fp, #4
    4498:	ldr	fp, [sp]
    449c:	add	sp, sp, #4
    44a0:	pop	{pc}		; (ldr pc, [sp], #4)

000044a4 <coda_mem_cursor_read_int32_partial_array>:
    44a4:	str	fp, [sp, #-8]!
    44a8:	str	lr, [sp, #4]
    44ac:	add	fp, sp, #4
    44b0:	sub	sp, sp, #32
    44b4:	str	r0, [fp, #-16]
    44b8:	str	r1, [fp, #-20]	; 0xffffffec
    44bc:	str	r2, [fp, #-24]	; 0xffffffe8
    44c0:	str	r3, [fp, #-28]	; 0xffffffe4
    44c4:	ldr	r3, [fp, #-16]
    44c8:	ldr	r3, [r3, #4]
    44cc:	sub	r3, r3, #1
    44d0:	ldr	r2, [fp, #-16]
    44d4:	lsl	r3, r3, #4
    44d8:	add	r3, r2, r3
    44dc:	ldr	r3, [r3, #8]
    44e0:	str	r3, [fp, #-8]
    44e4:	ldr	r3, [fp, #-8]
    44e8:	ldr	r3, [r3, #8]
    44ec:	cmp	r3, #1
    44f0:	bne	4524 <coda_mem_cursor_read_int32_partial_array+0x80>
    44f4:	mov	r3, #4
    44f8:	str	r3, [sp, #4]
    44fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4500:	str	r3, [sp]
    4504:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4508:	ldr	r2, [fp, #-20]	; 0xffffffec
    450c:	movw	r1, #0
    4510:	movt	r1, #0
    4514:	ldr	r0, [fp, #-16]
    4518:	bl	408 <read_partial_array>
    451c:	mov	r3, r0
    4520:	b	4600 <coda_mem_cursor_read_int32_partial_array+0x15c>
    4524:	ldr	r3, [fp, #-8]
    4528:	ldr	r3, [r3, #8]
    452c:	cmp	r3, #2
    4530:	beq	4554 <coda_mem_cursor_read_int32_partial_array+0xb0>
    4534:	movw	r3, #0
    4538:	movt	r3, #0
    453c:	movw	r2, #1071	; 0x42f
    4540:	movw	r1, #0
    4544:	movt	r1, #0
    4548:	movw	r0, #0
    454c:	movt	r0, #0
    4550:	bl	0 <__assert_fail>
    4554:	ldr	r3, [fp, #-8]
    4558:	ldr	r3, [r3, #4]
    455c:	ldr	r3, [r3, #40]	; 0x28
    4560:	ldr	r3, [r3]
    4564:	cmp	r3, #1
    4568:	bne	459c <coda_mem_cursor_read_int32_partial_array+0xf8>
    456c:	mov	r3, #4
    4570:	str	r3, [sp, #4]
    4574:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4578:	str	r3, [sp]
    457c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4580:	ldr	r2, [fp, #-20]	; 0xffffffec
    4584:	movw	r1, #0
    4588:	movt	r1, #0
    458c:	ldr	r0, [fp, #-16]
    4590:	bl	408 <read_partial_array>
    4594:	mov	r3, r0
    4598:	b	4600 <coda_mem_cursor_read_int32_partial_array+0x15c>
    459c:	ldr	r3, [fp, #-8]
    45a0:	ldr	r3, [r3, #4]
    45a4:	ldr	r3, [r3, #40]	; 0x28
    45a8:	ldr	r3, [r3]
    45ac:	cmp	r3, #0
    45b0:	beq	45d4 <coda_mem_cursor_read_int32_partial_array+0x130>
    45b4:	movw	r3, #0
    45b8:	movt	r3, #0
    45bc:	movw	r2, #1077	; 0x435
    45c0:	movw	r1, #0
    45c4:	movt	r1, #0
    45c8:	movw	r0, #0
    45cc:	movt	r0, #0
    45d0:	bl	0 <__assert_fail>
    45d4:	mov	r3, #4
    45d8:	str	r3, [sp, #4]
    45dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    45e0:	str	r3, [sp]
    45e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    45e8:	ldr	r2, [fp, #-20]	; 0xffffffec
    45ec:	movw	r1, #0
    45f0:	movt	r1, #0
    45f4:	ldr	r0, [fp, #-16]
    45f8:	bl	408 <read_partial_array>
    45fc:	mov	r3, r0
    4600:	mov	r0, r3
    4604:	sub	sp, fp, #4
    4608:	ldr	fp, [sp]
    460c:	add	sp, sp, #4
    4610:	pop	{pc}		; (ldr pc, [sp], #4)

00004614 <coda_mem_cursor_read_uint32_partial_array>:
    4614:	str	fp, [sp, #-8]!
    4618:	str	lr, [sp, #4]
    461c:	add	fp, sp, #4
    4620:	sub	sp, sp, #32
    4624:	str	r0, [fp, #-16]
    4628:	str	r1, [fp, #-20]	; 0xffffffec
    462c:	str	r2, [fp, #-24]	; 0xffffffe8
    4630:	str	r3, [fp, #-28]	; 0xffffffe4
    4634:	ldr	r3, [fp, #-16]
    4638:	ldr	r3, [r3, #4]
    463c:	sub	r3, r3, #1
    4640:	ldr	r2, [fp, #-16]
    4644:	lsl	r3, r3, #4
    4648:	add	r3, r2, r3
    464c:	ldr	r3, [r3, #8]
    4650:	str	r3, [fp, #-8]
    4654:	ldr	r3, [fp, #-8]
    4658:	ldr	r3, [r3, #8]
    465c:	cmp	r3, #1
    4660:	bne	4694 <coda_mem_cursor_read_uint32_partial_array+0x80>
    4664:	mov	r3, #4
    4668:	str	r3, [sp, #4]
    466c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4670:	str	r3, [sp]
    4674:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4678:	ldr	r2, [fp, #-20]	; 0xffffffec
    467c:	movw	r1, #0
    4680:	movt	r1, #0
    4684:	ldr	r0, [fp, #-16]
    4688:	bl	408 <read_partial_array>
    468c:	mov	r3, r0
    4690:	b	4770 <coda_mem_cursor_read_uint32_partial_array+0x15c>
    4694:	ldr	r3, [fp, #-8]
    4698:	ldr	r3, [r3, #8]
    469c:	cmp	r3, #2
    46a0:	beq	46c4 <coda_mem_cursor_read_uint32_partial_array+0xb0>
    46a4:	movw	r3, #0
    46a8:	movt	r3, #0
    46ac:	movw	r2, #1091	; 0x443
    46b0:	movw	r1, #0
    46b4:	movt	r1, #0
    46b8:	movw	r0, #0
    46bc:	movt	r0, #0
    46c0:	bl	0 <__assert_fail>
    46c4:	ldr	r3, [fp, #-8]
    46c8:	ldr	r3, [r3, #4]
    46cc:	ldr	r3, [r3, #40]	; 0x28
    46d0:	ldr	r3, [r3]
    46d4:	cmp	r3, #1
    46d8:	bne	470c <coda_mem_cursor_read_uint32_partial_array+0xf8>
    46dc:	mov	r3, #4
    46e0:	str	r3, [sp, #4]
    46e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    46e8:	str	r3, [sp]
    46ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
    46f0:	ldr	r2, [fp, #-20]	; 0xffffffec
    46f4:	movw	r1, #0
    46f8:	movt	r1, #0
    46fc:	ldr	r0, [fp, #-16]
    4700:	bl	408 <read_partial_array>
    4704:	mov	r3, r0
    4708:	b	4770 <coda_mem_cursor_read_uint32_partial_array+0x15c>
    470c:	ldr	r3, [fp, #-8]
    4710:	ldr	r3, [r3, #4]
    4714:	ldr	r3, [r3, #40]	; 0x28
    4718:	ldr	r3, [r3]
    471c:	cmp	r3, #0
    4720:	beq	4744 <coda_mem_cursor_read_uint32_partial_array+0x130>
    4724:	movw	r3, #0
    4728:	movt	r3, #0
    472c:	movw	r2, #1097	; 0x449
    4730:	movw	r1, #0
    4734:	movt	r1, #0
    4738:	movw	r0, #0
    473c:	movt	r0, #0
    4740:	bl	0 <__assert_fail>
    4744:	mov	r3, #4
    4748:	str	r3, [sp, #4]
    474c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4750:	str	r3, [sp]
    4754:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4758:	ldr	r2, [fp, #-20]	; 0xffffffec
    475c:	movw	r1, #0
    4760:	movt	r1, #0
    4764:	ldr	r0, [fp, #-16]
    4768:	bl	408 <read_partial_array>
    476c:	mov	r3, r0
    4770:	mov	r0, r3
    4774:	sub	sp, fp, #4
    4778:	ldr	fp, [sp]
    477c:	add	sp, sp, #4
    4780:	pop	{pc}		; (ldr pc, [sp], #4)

00004784 <coda_mem_cursor_read_int64_partial_array>:
    4784:	str	fp, [sp, #-8]!
    4788:	str	lr, [sp, #4]
    478c:	add	fp, sp, #4
    4790:	sub	sp, sp, #32
    4794:	str	r0, [fp, #-16]
    4798:	str	r1, [fp, #-20]	; 0xffffffec
    479c:	str	r2, [fp, #-24]	; 0xffffffe8
    47a0:	str	r3, [fp, #-28]	; 0xffffffe4
    47a4:	ldr	r3, [fp, #-16]
    47a8:	ldr	r3, [r3, #4]
    47ac:	sub	r3, r3, #1
    47b0:	ldr	r2, [fp, #-16]
    47b4:	lsl	r3, r3, #4
    47b8:	add	r3, r2, r3
    47bc:	ldr	r3, [r3, #8]
    47c0:	str	r3, [fp, #-8]
    47c4:	ldr	r3, [fp, #-8]
    47c8:	ldr	r3, [r3, #8]
    47cc:	cmp	r3, #1
    47d0:	bne	4804 <coda_mem_cursor_read_int64_partial_array+0x80>
    47d4:	mov	r3, #8
    47d8:	str	r3, [sp, #4]
    47dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    47e0:	str	r3, [sp]
    47e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    47e8:	ldr	r2, [fp, #-20]	; 0xffffffec
    47ec:	movw	r1, #0
    47f0:	movt	r1, #0
    47f4:	ldr	r0, [fp, #-16]
    47f8:	bl	408 <read_partial_array>
    47fc:	mov	r3, r0
    4800:	b	48e0 <coda_mem_cursor_read_int64_partial_array+0x15c>
    4804:	ldr	r3, [fp, #-8]
    4808:	ldr	r3, [r3, #8]
    480c:	cmp	r3, #2
    4810:	beq	4834 <coda_mem_cursor_read_int64_partial_array+0xb0>
    4814:	movw	r3, #0
    4818:	movt	r3, #0
    481c:	movw	r2, #1111	; 0x457
    4820:	movw	r1, #0
    4824:	movt	r1, #0
    4828:	movw	r0, #0
    482c:	movt	r0, #0
    4830:	bl	0 <__assert_fail>
    4834:	ldr	r3, [fp, #-8]
    4838:	ldr	r3, [r3, #4]
    483c:	ldr	r3, [r3, #40]	; 0x28
    4840:	ldr	r3, [r3]
    4844:	cmp	r3, #1
    4848:	bne	487c <coda_mem_cursor_read_int64_partial_array+0xf8>
    484c:	mov	r3, #8
    4850:	str	r3, [sp, #4]
    4854:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4858:	str	r3, [sp]
    485c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4860:	ldr	r2, [fp, #-20]	; 0xffffffec
    4864:	movw	r1, #0
    4868:	movt	r1, #0
    486c:	ldr	r0, [fp, #-16]
    4870:	bl	408 <read_partial_array>
    4874:	mov	r3, r0
    4878:	b	48e0 <coda_mem_cursor_read_int64_partial_array+0x15c>
    487c:	ldr	r3, [fp, #-8]
    4880:	ldr	r3, [r3, #4]
    4884:	ldr	r3, [r3, #40]	; 0x28
    4888:	ldr	r3, [r3]
    488c:	cmp	r3, #0
    4890:	beq	48b4 <coda_mem_cursor_read_int64_partial_array+0x130>
    4894:	movw	r3, #0
    4898:	movt	r3, #0
    489c:	movw	r2, #1117	; 0x45d
    48a0:	movw	r1, #0
    48a4:	movt	r1, #0
    48a8:	movw	r0, #0
    48ac:	movt	r0, #0
    48b0:	bl	0 <__assert_fail>
    48b4:	mov	r3, #8
    48b8:	str	r3, [sp, #4]
    48bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    48c0:	str	r3, [sp]
    48c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    48c8:	ldr	r2, [fp, #-20]	; 0xffffffec
    48cc:	movw	r1, #0
    48d0:	movt	r1, #0
    48d4:	ldr	r0, [fp, #-16]
    48d8:	bl	408 <read_partial_array>
    48dc:	mov	r3, r0
    48e0:	mov	r0, r3
    48e4:	sub	sp, fp, #4
    48e8:	ldr	fp, [sp]
    48ec:	add	sp, sp, #4
    48f0:	pop	{pc}		; (ldr pc, [sp], #4)

000048f4 <coda_mem_cursor_read_uint64_partial_array>:
    48f4:	str	fp, [sp, #-8]!
    48f8:	str	lr, [sp, #4]
    48fc:	add	fp, sp, #4
    4900:	sub	sp, sp, #32
    4904:	str	r0, [fp, #-16]
    4908:	str	r1, [fp, #-20]	; 0xffffffec
    490c:	str	r2, [fp, #-24]	; 0xffffffe8
    4910:	str	r3, [fp, #-28]	; 0xffffffe4
    4914:	ldr	r3, [fp, #-16]
    4918:	ldr	r3, [r3, #4]
    491c:	sub	r3, r3, #1
    4920:	ldr	r2, [fp, #-16]
    4924:	lsl	r3, r3, #4
    4928:	add	r3, r2, r3
    492c:	ldr	r3, [r3, #8]
    4930:	str	r3, [fp, #-8]
    4934:	ldr	r3, [fp, #-8]
    4938:	ldr	r3, [r3, #8]
    493c:	cmp	r3, #1
    4940:	bne	4974 <coda_mem_cursor_read_uint64_partial_array+0x80>
    4944:	mov	r3, #8
    4948:	str	r3, [sp, #4]
    494c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4950:	str	r3, [sp]
    4954:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4958:	ldr	r2, [fp, #-20]	; 0xffffffec
    495c:	movw	r1, #0
    4960:	movt	r1, #0
    4964:	ldr	r0, [fp, #-16]
    4968:	bl	408 <read_partial_array>
    496c:	mov	r3, r0
    4970:	b	4a50 <coda_mem_cursor_read_uint64_partial_array+0x15c>
    4974:	ldr	r3, [fp, #-8]
    4978:	ldr	r3, [r3, #8]
    497c:	cmp	r3, #2
    4980:	beq	49a4 <coda_mem_cursor_read_uint64_partial_array+0xb0>
    4984:	movw	r3, #0
    4988:	movt	r3, #0
    498c:	movw	r2, #1131	; 0x46b
    4990:	movw	r1, #0
    4994:	movt	r1, #0
    4998:	movw	r0, #0
    499c:	movt	r0, #0
    49a0:	bl	0 <__assert_fail>
    49a4:	ldr	r3, [fp, #-8]
    49a8:	ldr	r3, [r3, #4]
    49ac:	ldr	r3, [r3, #40]	; 0x28
    49b0:	ldr	r3, [r3]
    49b4:	cmp	r3, #1
    49b8:	bne	49ec <coda_mem_cursor_read_uint64_partial_array+0xf8>
    49bc:	mov	r3, #8
    49c0:	str	r3, [sp, #4]
    49c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    49c8:	str	r3, [sp]
    49cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    49d0:	ldr	r2, [fp, #-20]	; 0xffffffec
    49d4:	movw	r1, #0
    49d8:	movt	r1, #0
    49dc:	ldr	r0, [fp, #-16]
    49e0:	bl	408 <read_partial_array>
    49e4:	mov	r3, r0
    49e8:	b	4a50 <coda_mem_cursor_read_uint64_partial_array+0x15c>
    49ec:	ldr	r3, [fp, #-8]
    49f0:	ldr	r3, [r3, #4]
    49f4:	ldr	r3, [r3, #40]	; 0x28
    49f8:	ldr	r3, [r3]
    49fc:	cmp	r3, #0
    4a00:	beq	4a24 <coda_mem_cursor_read_uint64_partial_array+0x130>
    4a04:	movw	r3, #0
    4a08:	movt	r3, #0
    4a0c:	movw	r2, #1137	; 0x471
    4a10:	movw	r1, #0
    4a14:	movt	r1, #0
    4a18:	movw	r0, #0
    4a1c:	movt	r0, #0
    4a20:	bl	0 <__assert_fail>
    4a24:	mov	r3, #8
    4a28:	str	r3, [sp, #4]
    4a2c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4a30:	str	r3, [sp]
    4a34:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4a38:	ldr	r2, [fp, #-20]	; 0xffffffec
    4a3c:	movw	r1, #0
    4a40:	movt	r1, #0
    4a44:	ldr	r0, [fp, #-16]
    4a48:	bl	408 <read_partial_array>
    4a4c:	mov	r3, r0
    4a50:	mov	r0, r3
    4a54:	sub	sp, fp, #4
    4a58:	ldr	fp, [sp]
    4a5c:	add	sp, sp, #4
    4a60:	pop	{pc}		; (ldr pc, [sp], #4)

00004a64 <coda_mem_cursor_read_float_partial_array>:
    4a64:	str	fp, [sp, #-8]!
    4a68:	str	lr, [sp, #4]
    4a6c:	add	fp, sp, #4
    4a70:	sub	sp, sp, #32
    4a74:	str	r0, [fp, #-16]
    4a78:	str	r1, [fp, #-20]	; 0xffffffec
    4a7c:	str	r2, [fp, #-24]	; 0xffffffe8
    4a80:	str	r3, [fp, #-28]	; 0xffffffe4
    4a84:	ldr	r3, [fp, #-16]
    4a88:	ldr	r3, [r3, #4]
    4a8c:	sub	r3, r3, #1
    4a90:	ldr	r2, [fp, #-16]
    4a94:	lsl	r3, r3, #4
    4a98:	add	r3, r2, r3
    4a9c:	ldr	r3, [r3, #8]
    4aa0:	str	r3, [fp, #-8]
    4aa4:	ldr	r3, [fp, #-8]
    4aa8:	ldr	r3, [r3, #8]
    4aac:	cmp	r3, #1
    4ab0:	bne	4ae4 <coda_mem_cursor_read_float_partial_array+0x80>
    4ab4:	mov	r3, #4
    4ab8:	str	r3, [sp, #4]
    4abc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4ac0:	str	r3, [sp]
    4ac4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4ac8:	ldr	r2, [fp, #-20]	; 0xffffffec
    4acc:	movw	r1, #0
    4ad0:	movt	r1, #0
    4ad4:	ldr	r0, [fp, #-16]
    4ad8:	bl	408 <read_partial_array>
    4adc:	mov	r3, r0
    4ae0:	b	4bc0 <coda_mem_cursor_read_float_partial_array+0x15c>
    4ae4:	ldr	r3, [fp, #-8]
    4ae8:	ldr	r3, [r3, #8]
    4aec:	cmp	r3, #2
    4af0:	beq	4b14 <coda_mem_cursor_read_float_partial_array+0xb0>
    4af4:	movw	r3, #0
    4af8:	movt	r3, #0
    4afc:	movw	r2, #1151	; 0x47f
    4b00:	movw	r1, #0
    4b04:	movt	r1, #0
    4b08:	movw	r0, #0
    4b0c:	movt	r0, #0
    4b10:	bl	0 <__assert_fail>
    4b14:	ldr	r3, [fp, #-8]
    4b18:	ldr	r3, [r3, #4]
    4b1c:	ldr	r3, [r3, #40]	; 0x28
    4b20:	ldr	r3, [r3]
    4b24:	cmp	r3, #1
    4b28:	bne	4b5c <coda_mem_cursor_read_float_partial_array+0xf8>
    4b2c:	mov	r3, #4
    4b30:	str	r3, [sp, #4]
    4b34:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4b38:	str	r3, [sp]
    4b3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4b40:	ldr	r2, [fp, #-20]	; 0xffffffec
    4b44:	movw	r1, #0
    4b48:	movt	r1, #0
    4b4c:	ldr	r0, [fp, #-16]
    4b50:	bl	408 <read_partial_array>
    4b54:	mov	r3, r0
    4b58:	b	4bc0 <coda_mem_cursor_read_float_partial_array+0x15c>
    4b5c:	ldr	r3, [fp, #-8]
    4b60:	ldr	r3, [r3, #4]
    4b64:	ldr	r3, [r3, #40]	; 0x28
    4b68:	ldr	r3, [r3]
    4b6c:	cmp	r3, #0
    4b70:	beq	4b94 <coda_mem_cursor_read_float_partial_array+0x130>
    4b74:	movw	r3, #0
    4b78:	movt	r3, #0
    4b7c:	movw	r2, #1157	; 0x485
    4b80:	movw	r1, #0
    4b84:	movt	r1, #0
    4b88:	movw	r0, #0
    4b8c:	movt	r0, #0
    4b90:	bl	0 <__assert_fail>
    4b94:	mov	r3, #4
    4b98:	str	r3, [sp, #4]
    4b9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4ba0:	str	r3, [sp]
    4ba4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4ba8:	ldr	r2, [fp, #-20]	; 0xffffffec
    4bac:	movw	r1, #0
    4bb0:	movt	r1, #0
    4bb4:	ldr	r0, [fp, #-16]
    4bb8:	bl	408 <read_partial_array>
    4bbc:	mov	r3, r0
    4bc0:	mov	r0, r3
    4bc4:	sub	sp, fp, #4
    4bc8:	ldr	fp, [sp]
    4bcc:	add	sp, sp, #4
    4bd0:	pop	{pc}		; (ldr pc, [sp], #4)

00004bd4 <coda_mem_cursor_read_double_partial_array>:
    4bd4:	str	fp, [sp, #-8]!
    4bd8:	str	lr, [sp, #4]
    4bdc:	add	fp, sp, #4
    4be0:	sub	sp, sp, #32
    4be4:	str	r0, [fp, #-16]
    4be8:	str	r1, [fp, #-20]	; 0xffffffec
    4bec:	str	r2, [fp, #-24]	; 0xffffffe8
    4bf0:	str	r3, [fp, #-28]	; 0xffffffe4
    4bf4:	ldr	r3, [fp, #-16]
    4bf8:	ldr	r3, [r3, #4]
    4bfc:	sub	r3, r3, #1
    4c00:	ldr	r2, [fp, #-16]
    4c04:	lsl	r3, r3, #4
    4c08:	add	r3, r2, r3
    4c0c:	ldr	r3, [r3, #8]
    4c10:	str	r3, [fp, #-8]
    4c14:	ldr	r3, [fp, #-8]
    4c18:	ldr	r3, [r3, #8]
    4c1c:	cmp	r3, #1
    4c20:	bne	4c54 <coda_mem_cursor_read_double_partial_array+0x80>
    4c24:	mov	r3, #8
    4c28:	str	r3, [sp, #4]
    4c2c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4c30:	str	r3, [sp]
    4c34:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4c38:	ldr	r2, [fp, #-20]	; 0xffffffec
    4c3c:	movw	r1, #0
    4c40:	movt	r1, #0
    4c44:	ldr	r0, [fp, #-16]
    4c48:	bl	408 <read_partial_array>
    4c4c:	mov	r3, r0
    4c50:	b	4d30 <coda_mem_cursor_read_double_partial_array+0x15c>
    4c54:	ldr	r3, [fp, #-8]
    4c58:	ldr	r3, [r3, #8]
    4c5c:	cmp	r3, #2
    4c60:	beq	4c84 <coda_mem_cursor_read_double_partial_array+0xb0>
    4c64:	movw	r3, #0
    4c68:	movt	r3, #0
    4c6c:	movw	r2, #1171	; 0x493
    4c70:	movw	r1, #0
    4c74:	movt	r1, #0
    4c78:	movw	r0, #0
    4c7c:	movt	r0, #0
    4c80:	bl	0 <__assert_fail>
    4c84:	ldr	r3, [fp, #-8]
    4c88:	ldr	r3, [r3, #4]
    4c8c:	ldr	r3, [r3, #40]	; 0x28
    4c90:	ldr	r3, [r3]
    4c94:	cmp	r3, #1
    4c98:	bne	4ccc <coda_mem_cursor_read_double_partial_array+0xf8>
    4c9c:	mov	r3, #8
    4ca0:	str	r3, [sp, #4]
    4ca4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4ca8:	str	r3, [sp]
    4cac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4cb0:	ldr	r2, [fp, #-20]	; 0xffffffec
    4cb4:	movw	r1, #0
    4cb8:	movt	r1, #0
    4cbc:	ldr	r0, [fp, #-16]
    4cc0:	bl	408 <read_partial_array>
    4cc4:	mov	r3, r0
    4cc8:	b	4d30 <coda_mem_cursor_read_double_partial_array+0x15c>
    4ccc:	ldr	r3, [fp, #-8]
    4cd0:	ldr	r3, [r3, #4]
    4cd4:	ldr	r3, [r3, #40]	; 0x28
    4cd8:	ldr	r3, [r3]
    4cdc:	cmp	r3, #0
    4ce0:	beq	4d04 <coda_mem_cursor_read_double_partial_array+0x130>
    4ce4:	movw	r3, #0
    4ce8:	movt	r3, #0
    4cec:	movw	r2, #1177	; 0x499
    4cf0:	movw	r1, #0
    4cf4:	movt	r1, #0
    4cf8:	movw	r0, #0
    4cfc:	movt	r0, #0
    4d00:	bl	0 <__assert_fail>
    4d04:	mov	r3, #8
    4d08:	str	r3, [sp, #4]
    4d0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4d10:	str	r3, [sp]
    4d14:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4d18:	ldr	r2, [fp, #-20]	; 0xffffffec
    4d1c:	movw	r1, #0
    4d20:	movt	r1, #0
    4d24:	ldr	r0, [fp, #-16]
    4d28:	bl	408 <read_partial_array>
    4d2c:	mov	r3, r0
    4d30:	mov	r0, r3
    4d34:	sub	sp, fp, #4
    4d38:	ldr	fp, [sp]
    4d3c:	add	sp, sp, #4
    4d40:	pop	{pc}		; (ldr pc, [sp], #4)

00004d44 <coda_mem_cursor_read_char_partial_array>:
    4d44:	str	fp, [sp, #-8]!
    4d48:	str	lr, [sp, #4]
    4d4c:	add	fp, sp, #4
    4d50:	sub	sp, sp, #32
    4d54:	str	r0, [fp, #-16]
    4d58:	str	r1, [fp, #-20]	; 0xffffffec
    4d5c:	str	r2, [fp, #-24]	; 0xffffffe8
    4d60:	str	r3, [fp, #-28]	; 0xffffffe4
    4d64:	ldr	r3, [fp, #-16]
    4d68:	ldr	r3, [r3, #4]
    4d6c:	sub	r3, r3, #1
    4d70:	ldr	r2, [fp, #-16]
    4d74:	lsl	r3, r3, #4
    4d78:	add	r3, r2, r3
    4d7c:	ldr	r3, [r3, #8]
    4d80:	str	r3, [fp, #-8]
    4d84:	ldr	r3, [fp, #-8]
    4d88:	ldr	r3, [r3, #8]
    4d8c:	cmp	r3, #1
    4d90:	bne	4dc4 <coda_mem_cursor_read_char_partial_array+0x80>
    4d94:	mov	r3, #1
    4d98:	str	r3, [sp, #4]
    4d9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4da0:	str	r3, [sp]
    4da4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4da8:	ldr	r2, [fp, #-20]	; 0xffffffec
    4dac:	movw	r1, #0
    4db0:	movt	r1, #0
    4db4:	ldr	r0, [fp, #-16]
    4db8:	bl	408 <read_partial_array>
    4dbc:	mov	r3, r0
    4dc0:	b	4ea0 <coda_mem_cursor_read_char_partial_array+0x15c>
    4dc4:	ldr	r3, [fp, #-8]
    4dc8:	ldr	r3, [r3, #8]
    4dcc:	cmp	r3, #2
    4dd0:	beq	4df4 <coda_mem_cursor_read_char_partial_array+0xb0>
    4dd4:	movw	r3, #0
    4dd8:	movt	r3, #0
    4ddc:	movw	r2, #1191	; 0x4a7
    4de0:	movw	r1, #0
    4de4:	movt	r1, #0
    4de8:	movw	r0, #0
    4dec:	movt	r0, #0
    4df0:	bl	0 <__assert_fail>
    4df4:	ldr	r3, [fp, #-8]
    4df8:	ldr	r3, [r3, #4]
    4dfc:	ldr	r3, [r3, #40]	; 0x28
    4e00:	ldr	r3, [r3]
    4e04:	cmp	r3, #1
    4e08:	bne	4e3c <coda_mem_cursor_read_char_partial_array+0xf8>
    4e0c:	mov	r3, #1
    4e10:	str	r3, [sp, #4]
    4e14:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4e18:	str	r3, [sp]
    4e1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4e20:	ldr	r2, [fp, #-20]	; 0xffffffec
    4e24:	movw	r1, #0
    4e28:	movt	r1, #0
    4e2c:	ldr	r0, [fp, #-16]
    4e30:	bl	408 <read_partial_array>
    4e34:	mov	r3, r0
    4e38:	b	4ea0 <coda_mem_cursor_read_char_partial_array+0x15c>
    4e3c:	ldr	r3, [fp, #-8]
    4e40:	ldr	r3, [r3, #4]
    4e44:	ldr	r3, [r3, #40]	; 0x28
    4e48:	ldr	r3, [r3]
    4e4c:	cmp	r3, #0
    4e50:	beq	4e74 <coda_mem_cursor_read_char_partial_array+0x130>
    4e54:	movw	r3, #0
    4e58:	movt	r3, #0
    4e5c:	movw	r2, #1197	; 0x4ad
    4e60:	movw	r1, #0
    4e64:	movt	r1, #0
    4e68:	movw	r0, #0
    4e6c:	movt	r0, #0
    4e70:	bl	0 <__assert_fail>
    4e74:	mov	r3, #1
    4e78:	str	r3, [sp, #4]
    4e7c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4e80:	str	r3, [sp]
    4e84:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4e88:	ldr	r2, [fp, #-20]	; 0xffffffec
    4e8c:	movw	r1, #0
    4e90:	movt	r1, #0
    4e94:	ldr	r0, [fp, #-16]
    4e98:	bl	408 <read_partial_array>
    4e9c:	mov	r3, r0
    4ea0:	mov	r0, r3
    4ea4:	sub	sp, fp, #4
    4ea8:	ldr	fp, [sp]
    4eac:	add	sp, sp, #4
    4eb0:	pop	{pc}		; (ldr pc, [sp], #4)
