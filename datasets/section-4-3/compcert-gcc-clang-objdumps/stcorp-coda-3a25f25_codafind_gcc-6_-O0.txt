
../compcert-repos/stcorp-coda-3a25f25/codafind:     file format elf32-littlearm


Disassembly of section .init:

000108ac <.init>:
   108ac:	push	{r3, lr}
   108b0:	bl	109f8 <_start@@Base+0x3c>
   108b4:	pop	{r3, pc}

Disassembly of section .plt:

000108b8 <coda_match_filefilter@plt-0x14>:
   108b8:	push	{lr}		; (str lr, [sp, #-4]!)
   108bc:	ldr	lr, [pc, #4]	; 108c8 <coda_match_filefilter@plt-0x4>
   108c0:	add	lr, pc, lr
   108c4:	ldr	pc, [lr, #8]!
   108c8:	andeq	r1, r1, r8, lsr r7

000108cc <coda_match_filefilter@plt>:
   108cc:	add	ip, pc, #0, 12
   108d0:	add	ip, ip, #69632	; 0x11000
   108d4:	ldr	pc, [ip, #1848]!	; 0x738

000108d8 <strcmp@plt>:
   108d8:	add	ip, pc, #0, 12
   108dc:	add	ip, ip, #69632	; 0x11000
   108e0:	ldr	pc, [ip, #1840]!	; 0x730

000108e4 <printf@plt>:
   108e4:	add	ip, pc, #0, 12
   108e8:	add	ip, ip, #69632	; 0x11000
   108ec:	ldr	pc, [ip, #1832]!	; 0x728

000108f0 <coda_set_definition_path_conditional@plt>:
   108f0:	add	ip, pc, #0, 12
   108f4:	add	ip, ip, #69632	; 0x11000
   108f8:	ldr	pc, [ip, #1824]!	; 0x720

000108fc <coda_set_definition_path@plt>:
   108fc:	add	ip, pc, #0, 12
   10900:	add	ip, ip, #69632	; 0x11000
   10904:	ldr	pc, [ip, #1816]!	; 0x718

00010908 <fwrite@plt>:
   10908:	add	ip, pc, #0, 12
   1090c:	add	ip, ip, #69632	; 0x11000
   10910:	ldr	pc, [ip, #1808]!	; 0x710

00010914 <coda_done@plt>:
   10914:	add	ip, pc, #0, 12
   10918:	add	ip, ip, #69632	; 0x11000
   1091c:	ldr	pc, [ip, #1800]!	; 0x708

00010920 <puts@plt>:
   10920:	add	ip, pc, #0, 12
   10924:	add	ip, ip, #69632	; 0x11000
   10928:	ldr	pc, [ip, #1792]!	; 0x700

0001092c <__libc_start_main@plt>:
   1092c:	add	ip, pc, #0, 12
   10930:	add	ip, ip, #69632	; 0x11000
   10934:	ldr	pc, [ip, #1784]!	; 0x6f8

00010938 <__gmon_start__@plt>:
   10938:	add	ip, pc, #0, 12
   1093c:	add	ip, ip, #69632	; 0x11000
   10940:	ldr	pc, [ip, #1776]!	; 0x6f0

00010944 <exit@plt>:
   10944:	add	ip, pc, #0, 12
   10948:	add	ip, ip, #69632	; 0x11000
   1094c:	ldr	pc, [ip, #1768]!	; 0x6e8

00010950 <fprintf@plt>:
   10950:	add	ip, pc, #0, 12
   10954:	add	ip, ip, #69632	; 0x11000
   10958:	ldr	pc, [ip, #1760]!	; 0x6e0

0001095c <coda_init@plt>:
   1095c:	add	ip, pc, #0, 12
   10960:	add	ip, ip, #69632	; 0x11000
   10964:	ldr	pc, [ip, #1752]!	; 0x6d8

00010968 <coda_set_option_perform_conversions@plt>:
   10968:	add	ip, pc, #0, 12
   1096c:	add	ip, ip, #69632	; 0x11000
   10970:	ldr	pc, [ip, #1744]!	; 0x6d0

00010974 <putchar@plt>:
   10974:	add	ip, pc, #0, 12
   10978:	add	ip, ip, #69632	; 0x11000
   1097c:	ldr	pc, [ip, #1736]!	; 0x6c8

00010980 <coda_errno_to_string@plt>:
   10980:	add	ip, pc, #0, 12
   10984:	add	ip, ip, #69632	; 0x11000
   10988:	ldr	pc, [ip, #1728]!	; 0x6c0

0001098c <coda_get_libcoda_version@plt>:
   1098c:	add	ip, pc, #0, 12
   10990:	add	ip, ip, #69632	; 0x11000
   10994:	ldr	pc, [ip, #1720]!	; 0x6b8

00010998 <coda_get_errno@plt>:
   10998:	add	ip, pc, #0, 12
   1099c:	add	ip, ip, #69632	; 0x11000
   109a0:	ldr	pc, [ip, #1712]!	; 0x6b0

000109a4 <abort@plt>:
   109a4:	add	ip, pc, #0, 12
   109a8:	add	ip, ip, #69632	; 0x11000
   109ac:	ldr	pc, [ip, #1704]!	; 0x6a8

000109b0 <__assert_fail@plt>:
   109b0:	add	ip, pc, #0, 12
   109b4:	add	ip, ip, #69632	; 0x11000
   109b8:	ldr	pc, [ip, #1696]!	; 0x6a0

Disassembly of section .text:

000109bc <_start@@Base>:
   109bc:	mov	fp, #0
   109c0:	mov	lr, #0
   109c4:	pop	{r1}		; (ldr r1, [sp], #4)
   109c8:	mov	r2, sp
   109cc:	push	{r2}		; (str r2, [sp, #-4]!)
   109d0:	push	{r0}		; (str r0, [sp, #-4]!)
   109d4:	ldr	ip, [pc, #16]	; 109ec <_start@@Base+0x30>
   109d8:	push	{ip}		; (str ip, [sp, #-4]!)
   109dc:	ldr	r0, [pc, #12]	; 109f0 <_start@@Base+0x34>
   109e0:	ldr	r3, [pc, #12]	; 109f4 <_start@@Base+0x38>
   109e4:	bl	1092c <__libc_start_main@plt>
   109e8:	bl	109a4 <abort@plt>
   109ec:	andeq	r1, r1, r4, asr #6
   109f0:	andeq	r0, r1, r0, ror #27
   109f4:	andeq	r1, r1, r4, ror #5
   109f8:	ldr	r3, [pc, #20]	; 10a14 <_start@@Base+0x58>
   109fc:	ldr	r2, [pc, #20]	; 10a18 <_start@@Base+0x5c>
   10a00:	add	r3, pc, r3
   10a04:	ldr	r2, [r3, r2]
   10a08:	cmp	r2, #0
   10a0c:	bxeq	lr
   10a10:	b	10938 <__gmon_start__@plt>
   10a14:	strdeq	r1, [r1], -r8
   10a18:	andeq	r0, r0, ip, asr r0
   10a1c:	ldr	r3, [pc, #28]	; 10a40 <_start@@Base+0x84>
   10a20:	ldr	r0, [pc, #28]	; 10a44 <_start@@Base+0x88>
   10a24:	sub	r3, r3, r0
   10a28:	cmp	r3, #6
   10a2c:	bxls	lr
   10a30:	ldr	r3, [pc, #16]	; 10a48 <_start@@Base+0x8c>
   10a34:	cmp	r3, #0
   10a38:	bxeq	lr
   10a3c:	bx	r3
   10a40:	andeq	r2, r2, fp, rrx
   10a44:	andeq	r2, r2, r8, rrx
   10a48:	andeq	r0, r0, r0
   10a4c:	ldr	r1, [pc, #36]	; 10a78 <_start@@Base+0xbc>
   10a50:	ldr	r0, [pc, #36]	; 10a7c <_start@@Base+0xc0>
   10a54:	sub	r1, r1, r0
   10a58:	asr	r1, r1, #2
   10a5c:	add	r1, r1, r1, lsr #31
   10a60:	asrs	r1, r1, #1
   10a64:	bxeq	lr
   10a68:	ldr	r3, [pc, #16]	; 10a80 <_start@@Base+0xc4>
   10a6c:	cmp	r3, #0
   10a70:	bxeq	lr
   10a74:	bx	r3
   10a78:	andeq	r2, r2, r8, rrx
   10a7c:	andeq	r2, r2, r8, rrx
   10a80:	andeq	r0, r0, r0
   10a84:	push	{r4, lr}
   10a88:	ldr	r4, [pc, #24]	; 10aa8 <_start@@Base+0xec>
   10a8c:	ldrb	r3, [r4]
   10a90:	cmp	r3, #0
   10a94:	popne	{r4, pc}
   10a98:	bl	10a1c <_start@@Base+0x60>
   10a9c:	mov	r3, #1
   10aa0:	strb	r3, [r4]
   10aa4:	pop	{r4, pc}
   10aa8:	andeq	r2, r2, ip, rrx
   10aac:	ldr	r0, [pc, #40]	; 10adc <_start@@Base+0x120>
   10ab0:	ldr	r3, [r0]
   10ab4:	cmp	r3, #0
   10ab8:	bne	10ac0 <_start@@Base+0x104>
   10abc:	b	10a4c <_start@@Base+0x90>
   10ac0:	ldr	r3, [pc, #24]	; 10ae0 <_start@@Base+0x124>
   10ac4:	cmp	r3, #0
   10ac8:	beq	10abc <_start@@Base+0x100>
   10acc:	push	{r4, lr}
   10ad0:	blx	r3
   10ad4:	pop	{r4, lr}
   10ad8:	b	10a4c <_start@@Base+0x90>
   10adc:	strdeq	r1, [r2], -ip
   10ae0:	andeq	r0, r0, r0
   10ae4:	push	{fp, lr}
   10ae8:	add	fp, sp, #4
   10aec:	bl	1098c <coda_get_libcoda_version@plt>
   10af0:	mov	r3, r0
   10af4:	mov	r1, r3
   10af8:	ldr	r0, [pc, #24]	; 10b18 <_start@@Base+0x15c>
   10afc:	bl	108e4 <printf@plt>
   10b00:	ldr	r0, [pc, #20]	; 10b1c <_start@@Base+0x160>
   10b04:	bl	10920 <puts@plt>
   10b08:	mov	r0, #10
   10b0c:	bl	10974 <putchar@plt>
   10b10:	nop			; (mov r0, r0)
   10b14:	pop	{fp, pc}
   10b18:	andeq	r1, r1, r4, asr r3
   10b1c:	andeq	r1, r1, r4, ror #6
   10b20:	push	{fp, lr}
   10b24:	add	fp, sp, #4
   10b28:	ldr	r0, [pc, #232]	; 10c18 <_start@@Base+0x25c>
   10b2c:	bl	10920 <puts@plt>
   10b30:	ldr	r0, [pc, #228]	; 10c1c <_start@@Base+0x260>
   10b34:	bl	10920 <puts@plt>
   10b38:	ldr	r0, [pc, #224]	; 10c20 <_start@@Base+0x264>
   10b3c:	bl	10920 <puts@plt>
   10b40:	ldr	r0, [pc, #220]	; 10c24 <_start@@Base+0x268>
   10b44:	bl	10920 <puts@plt>
   10b48:	mov	r0, #10
   10b4c:	bl	10974 <putchar@plt>
   10b50:	ldr	r0, [pc, #208]	; 10c28 <_start@@Base+0x26c>
   10b54:	bl	10920 <puts@plt>
   10b58:	ldr	r0, [pc, #204]	; 10c2c <_start@@Base+0x270>
   10b5c:	bl	10920 <puts@plt>
   10b60:	ldr	r0, [pc, #200]	; 10c30 <_start@@Base+0x274>
   10b64:	bl	10920 <puts@plt>
   10b68:	ldr	r0, [pc, #196]	; 10c34 <_start@@Base+0x278>
   10b6c:	bl	10920 <puts@plt>
   10b70:	ldr	r0, [pc, #192]	; 10c38 <_start@@Base+0x27c>
   10b74:	bl	10920 <puts@plt>
   10b78:	ldr	r0, [pc, #188]	; 10c3c <_start@@Base+0x280>
   10b7c:	bl	10920 <puts@plt>
   10b80:	ldr	r0, [pc, #184]	; 10c40 <_start@@Base+0x284>
   10b84:	bl	10920 <puts@plt>
   10b88:	ldr	r0, [pc, #180]	; 10c44 <_start@@Base+0x288>
   10b8c:	bl	10920 <puts@plt>
   10b90:	ldr	r0, [pc, #176]	; 10c48 <_start@@Base+0x28c>
   10b94:	bl	10920 <puts@plt>
   10b98:	mov	r0, #10
   10b9c:	bl	10974 <putchar@plt>
   10ba0:	ldr	r0, [pc, #164]	; 10c4c <_start@@Base+0x290>
   10ba4:	bl	10920 <puts@plt>
   10ba8:	ldr	r0, [pc, #160]	; 10c50 <_start@@Base+0x294>
   10bac:	bl	10920 <puts@plt>
   10bb0:	mov	r0, #10
   10bb4:	bl	10974 <putchar@plt>
   10bb8:	ldr	r0, [pc, #148]	; 10c54 <_start@@Base+0x298>
   10bbc:	bl	10920 <puts@plt>
   10bc0:	ldr	r0, [pc, #144]	; 10c58 <_start@@Base+0x29c>
   10bc4:	bl	10920 <puts@plt>
   10bc8:	mov	r0, #10
   10bcc:	bl	10974 <putchar@plt>
   10bd0:	ldr	r0, [pc, #132]	; 10c5c <_start@@Base+0x2a0>
   10bd4:	bl	10920 <puts@plt>
   10bd8:	ldr	r0, [pc, #128]	; 10c60 <_start@@Base+0x2a4>
   10bdc:	bl	10920 <puts@plt>
   10be0:	ldr	r0, [pc, #124]	; 10c64 <_start@@Base+0x2a8>
   10be4:	bl	10920 <puts@plt>
   10be8:	ldr	r0, [pc, #120]	; 10c68 <_start@@Base+0x2ac>
   10bec:	bl	10920 <puts@plt>
   10bf0:	ldr	r0, [pc, #116]	; 10c6c <_start@@Base+0x2b0>
   10bf4:	bl	10920 <puts@plt>
   10bf8:	ldr	r0, [pc, #112]	; 10c70 <_start@@Base+0x2b4>
   10bfc:	bl	10920 <puts@plt>
   10c00:	ldr	r0, [pc, #108]	; 10c74 <_start@@Base+0x2b8>
   10c04:	bl	10920 <puts@plt>
   10c08:	mov	r0, #10
   10c0c:	bl	10974 <putchar@plt>
   10c10:	nop			; (mov r0, r0)
   10c14:	pop	{fp, pc}
   10c18:	muleq	r1, r4, r3
   10c1c:	muleq	r1, ip, r3
   10c20:	andeq	r1, r1, r0, ror #7
   10c24:	andeq	r1, r1, r0, lsr r4
   10c28:	andeq	r1, r1, r8, asr #8
   10c2c:	andeq	r1, r1, ip, asr r4
   10c30:	andeq	r1, r1, r4, lsl #9
   10c34:	andeq	r1, r1, r0, asr #9
   10c38:	strdeq	r1, [r1], -r0
   10c3c:	andeq	r1, r1, r8, lsr r5
   10c40:	andeq	r1, r1, r8, lsl #11
   10c44:			; <UNDEFINED> instruction: 0x000115b4
   10c48:	ldrdeq	r1, [r1], -r0
   10c4c:	andeq	r1, r1, r8, lsl #12
   10c50:	andeq	r1, r1, r0, lsr #12
   10c54:	andeq	r1, r1, r0, asr #12
   10c58:	andeq	r1, r1, ip, asr r6
   10c5c:	muleq	r1, r0, r6
   10c60:	andeq	r1, r1, r0, ror #13
   10c64:	andeq	r1, r1, ip, lsr #14
   10c68:	andeq	r1, r1, r8, asr r7
   10c6c:	andeq	r1, r1, r4, lsr #15
   10c70:	andeq	r1, r1, ip, ror #15
   10c74:	andeq	r1, r1, ip, lsr #16

00010c78 <callback@@Base>:
   10c78:	push	{fp, lr}
   10c7c:	add	fp, sp, #4
   10c80:	sub	sp, sp, #16
   10c84:	str	r0, [fp, #-8]
   10c88:	str	r1, [fp, #-12]
   10c8c:	str	r2, [fp, #-16]
   10c90:	str	r3, [fp, #-20]	; 0xffffffec
   10c94:	ldr	r3, [fp, #-12]
   10c98:	cmp	r3, #0
   10c9c:	bne	10cbc <callback@@Base+0x44>
   10ca0:	ldr	r3, [pc, #264]	; 10db0 <callback@@Base+0x138>
   10ca4:	ldr	r0, [r3]
   10ca8:	ldr	r3, [fp, #-16]
   10cac:	ldr	r2, [fp, #-8]
   10cb0:	ldr	r1, [pc, #252]	; 10db4 <callback@@Base+0x13c>
   10cb4:	bl	10950 <fprintf@plt>
   10cb8:	b	10da0 <callback@@Base+0x128>
   10cbc:	ldr	r3, [fp, #-12]
   10cc0:	cmp	r3, #2
   10cc4:	bne	10ce4 <callback@@Base+0x6c>
   10cc8:	ldr	r3, [pc, #224]	; 10db0 <callback@@Base+0x138>
   10ccc:	ldr	r3, [r3]
   10cd0:	ldr	r2, [fp, #-8]
   10cd4:	ldr	r1, [pc, #220]	; 10db8 <callback@@Base+0x140>
   10cd8:	mov	r0, r3
   10cdc:	bl	10950 <fprintf@plt>
   10ce0:	b	10da0 <callback@@Base+0x128>
   10ce4:	ldr	r3, [fp, #-12]
   10ce8:	cmp	r3, #1
   10cec:	bne	10d0c <callback@@Base+0x94>
   10cf0:	ldr	r3, [pc, #184]	; 10db0 <callback@@Base+0x138>
   10cf4:	ldr	r0, [r3]
   10cf8:	ldr	r3, [fp, #-16]
   10cfc:	ldr	r2, [fp, #-8]
   10d00:	ldr	r1, [pc, #180]	; 10dbc <callback@@Base+0x144>
   10d04:	bl	10950 <fprintf@plt>
   10d08:	b	10da0 <callback@@Base+0x128>
   10d0c:	ldr	r3, [pc, #172]	; 10dc0 <callback@@Base+0x148>
   10d10:	ldr	r3, [r3]
   10d14:	cmp	r3, #0
   10d18:	beq	10d8c <callback@@Base+0x114>
   10d1c:	ldr	r1, [fp, #-8]
   10d20:	ldr	r0, [pc, #156]	; 10dc4 <callback@@Base+0x14c>
   10d24:	bl	108e4 <printf@plt>
   10d28:	ldr	r3, [fp, #-12]
   10d2c:	cmp	r3, #5
   10d30:	ldrls	pc, [pc, r3, lsl #2]
   10d34:	b	10da0 <callback@@Base+0x128>
   10d38:	andeq	r0, r1, r0, asr sp
   10d3c:	andeq	r0, r1, r0, asr sp
   10d40:	andeq	r0, r1, r0, asr sp
   10d44:	andeq	r0, r1, r4, ror #26
   10d48:	andeq	r0, r1, ip, ror sp
   10d4c:	andeq	r0, r1, r0, ror sp
   10d50:	ldr	r3, [pc, #112]	; 10dc8 <callback@@Base+0x150>
   10d54:	mov	r2, #110	; 0x6e
   10d58:	ldr	r1, [pc, #108]	; 10dcc <callback@@Base+0x154>
   10d5c:	ldr	r0, [pc, #108]	; 10dd0 <callback@@Base+0x158>
   10d60:	bl	109b0 <__assert_fail@plt>
   10d64:	ldr	r0, [pc, #104]	; 10dd4 <callback@@Base+0x15c>
   10d68:	bl	10920 <puts@plt>
   10d6c:	b	10da0 <callback@@Base+0x128>
   10d70:	ldr	r0, [pc, #96]	; 10dd8 <callback@@Base+0x160>
   10d74:	bl	10920 <puts@plt>
   10d78:	b	10da0 <callback@@Base+0x128>
   10d7c:	ldr	r0, [pc, #88]	; 10ddc <callback@@Base+0x164>
   10d80:	bl	10920 <puts@plt>
   10d84:	nop			; (mov r0, r0)
   10d88:	b	10da0 <callback@@Base+0x128>
   10d8c:	ldr	r3, [fp, #-12]
   10d90:	cmp	r3, #4
   10d94:	bne	10da0 <callback@@Base+0x128>
   10d98:	ldr	r0, [fp, #-8]
   10d9c:	bl	10920 <puts@plt>
   10da0:	mov	r3, #0
   10da4:	mov	r0, r3
   10da8:	sub	sp, fp, #4
   10dac:	pop	{fp, pc}
   10db0:	andeq	r2, r2, r8, rrx
   10db4:	andeq	r1, r1, ip, ror #16
   10db8:	andeq	r1, r1, r4, ror r8
   10dbc:	muleq	r1, r4, r8
   10dc0:	andeq	r2, r2, r0, ror r0
   10dc4:			; <UNDEFINED> instruction: 0x000118b4
   10dc8:	ldrdeq	r1, [r1], -r8
   10dcc:			; <UNDEFINED> instruction: 0x000118bc
   10dd0:	andeq	r1, r1, ip, lsl #18
   10dd4:	andeq	r1, r1, r0, lsl r9
   10dd8:	andeq	r1, r1, r4, lsr #18
   10ddc:	andeq	r1, r1, r0, lsr r9

00010de0 <main@@Base>:
   10de0:	push	{r4, fp, lr}
   10de4:	add	fp, sp, #8
   10de8:	sub	sp, sp, #36	; 0x24
   10dec:	str	r0, [fp, #-32]	; 0xffffffe0
   10df0:	str	r1, [fp, #-36]	; 0xffffffdc
   10df4:	mov	r3, #0
   10df8:	str	r3, [fp, #-16]
   10dfc:	ldr	r3, [pc, #1180]	; 112a0 <main@@Base+0x4c0>
   10e00:	mov	r2, #0
   10e04:	str	r2, [r3]
   10e08:	mov	r3, #1
   10e0c:	str	r3, [fp, #-20]	; 0xffffffec
   10e10:	ldr	r3, [fp, #-32]	; 0xffffffe0
   10e14:	cmp	r3, #1
   10e18:	beq	10e64 <main@@Base+0x84>
   10e1c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10e20:	add	r3, r3, #4
   10e24:	ldr	r3, [r3]
   10e28:	ldr	r1, [pc, #1140]	; 112a4 <main@@Base+0x4c4>
   10e2c:	mov	r0, r3
   10e30:	bl	108d8 <strcmp@plt>
   10e34:	mov	r3, r0
   10e38:	cmp	r3, #0
   10e3c:	beq	10e64 <main@@Base+0x84>
   10e40:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10e44:	add	r3, r3, #4
   10e48:	ldr	r3, [r3]
   10e4c:	ldr	r1, [pc, #1108]	; 112a8 <main@@Base+0x4c8>
   10e50:	mov	r0, r3
   10e54:	bl	108d8 <strcmp@plt>
   10e58:	mov	r3, r0
   10e5c:	cmp	r3, #0
   10e60:	bne	10e70 <main@@Base+0x90>
   10e64:	bl	10b20 <_start@@Base+0x164>
   10e68:	mov	r0, #0
   10e6c:	bl	10944 <exit@plt>
   10e70:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10e74:	add	r3, r3, #4
   10e78:	ldr	r3, [r3]
   10e7c:	ldr	r1, [pc, #1064]	; 112ac <main@@Base+0x4cc>
   10e80:	mov	r0, r3
   10e84:	bl	108d8 <strcmp@plt>
   10e88:	mov	r3, r0
   10e8c:	cmp	r3, #0
   10e90:	beq	10eb8 <main@@Base+0xd8>
   10e94:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10e98:	add	r3, r3, #4
   10e9c:	ldr	r3, [r3]
   10ea0:	ldr	r1, [pc, #1032]	; 112b0 <main@@Base+0x4d0>
   10ea4:	mov	r0, r3
   10ea8:	bl	108d8 <strcmp@plt>
   10eac:	mov	r3, r0
   10eb0:	cmp	r3, #0
   10eb4:	bne	10ec4 <main@@Base+0xe4>
   10eb8:	bl	10ae4 <_start@@Base+0x128>
   10ebc:	mov	r0, #0
   10ec0:	bl	10944 <exit@plt>
   10ec4:	mov	r3, #1
   10ec8:	str	r3, [fp, #-24]	; 0xffffffe8
   10ecc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10ed0:	add	r2, r3, #1
   10ed4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   10ed8:	cmp	r2, r3
   10edc:	bge	10f3c <main@@Base+0x15c>
   10ee0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10ee4:	lsl	r3, r3, #2
   10ee8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   10eec:	add	r3, r2, r3
   10ef0:	ldr	r3, [r3]
   10ef4:	ldr	r1, [pc, #952]	; 112b4 <main@@Base+0x4d4>
   10ef8:	mov	r0, r3
   10efc:	bl	108d8 <strcmp@plt>
   10f00:	mov	r3, r0
   10f04:	cmp	r3, #0
   10f08:	bne	10f3c <main@@Base+0x15c>
   10f0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10f10:	add	r3, r3, #1
   10f14:	lsl	r3, r3, #2
   10f18:	ldr	r2, [fp, #-36]	; 0xffffffdc
   10f1c:	add	r3, r2, r3
   10f20:	ldr	r3, [r3]
   10f24:	mov	r0, r3
   10f28:	bl	108fc <coda_set_definition_path@plt>
   10f2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10f30:	add	r3, r3, #2
   10f34:	str	r3, [fp, #-24]	; 0xffffffe8
   10f38:	b	10fa0 <main@@Base+0x1c0>
   10f3c:	ldr	r3, [pc, #884]	; 112b8 <main@@Base+0x4d8>
   10f40:	str	r3, [fp, #-28]	; 0xffffffe4
   10f44:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10f48:	ldr	r3, [r3]
   10f4c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   10f50:	mov	r1, #0
   10f54:	mov	r0, r3
   10f58:	bl	108f0 <coda_set_definition_path_conditional@plt>
   10f5c:	mov	r3, r0
   10f60:	cmp	r3, #0
   10f64:	beq	1117c <main@@Base+0x39c>
   10f68:	ldr	r3, [pc, #844]	; 112bc <main@@Base+0x4dc>
   10f6c:	ldr	r4, [r3]
   10f70:	bl	10998 <coda_get_errno@plt>
   10f74:	mov	r3, r0
   10f78:	ldr	r3, [r3]
   10f7c:	mov	r0, r3
   10f80:	bl	10980 <coda_errno_to_string@plt>
   10f84:	mov	r3, r0
   10f88:	mov	r2, r3
   10f8c:	ldr	r1, [pc, #812]	; 112c0 <main@@Base+0x4e0>
   10f90:	mov	r0, r4
   10f94:	bl	10950 <fprintf@plt>
   10f98:	mov	r0, #1
   10f9c:	bl	10944 <exit@plt>
   10fa0:	b	1117c <main@@Base+0x39c>
   10fa4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10fa8:	lsl	r3, r3, #2
   10fac:	ldr	r2, [fp, #-36]	; 0xffffffdc
   10fb0:	add	r3, r2, r3
   10fb4:	ldr	r3, [r3]
   10fb8:	ldr	r1, [pc, #772]	; 112c4 <main@@Base+0x4e4>
   10fbc:	mov	r0, r3
   10fc0:	bl	108d8 <strcmp@plt>
   10fc4:	mov	r3, r0
   10fc8:	cmp	r3, #0
   10fcc:	beq	10ffc <main@@Base+0x21c>
   10fd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10fd4:	lsl	r3, r3, #2
   10fd8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   10fdc:	add	r3, r2, r3
   10fe0:	ldr	r3, [r3]
   10fe4:	ldr	r1, [pc, #732]	; 112c8 <main@@Base+0x4e8>
   10fe8:	mov	r0, r3
   10fec:	bl	108d8 <strcmp@plt>
   10ff0:	mov	r3, r0
   10ff4:	cmp	r3, #0
   10ff8:	bne	11008 <main@@Base+0x228>
   10ffc:	mov	r3, #0
   11000:	str	r3, [fp, #-20]	; 0xffffffec
   11004:	b	11170 <main@@Base+0x390>
   11008:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1100c:	lsl	r3, r3, #2
   11010:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11014:	add	r3, r2, r3
   11018:	ldr	r3, [r3]
   1101c:	ldr	r1, [pc, #680]	; 112cc <main@@Base+0x4ec>
   11020:	mov	r0, r3
   11024:	bl	108d8 <strcmp@plt>
   11028:	mov	r3, r0
   1102c:	cmp	r3, #0
   11030:	beq	11060 <main@@Base+0x280>
   11034:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11038:	lsl	r3, r3, #2
   1103c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11040:	add	r3, r2, r3
   11044:	ldr	r3, [r3]
   11048:	ldr	r1, [pc, #640]	; 112d0 <main@@Base+0x4f0>
   1104c:	mov	r0, r3
   11050:	bl	108d8 <strcmp@plt>
   11054:	mov	r3, r0
   11058:	cmp	r3, #0
   1105c:	bne	110c4 <main@@Base+0x2e4>
   11060:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11064:	add	r2, r3, #1
   11068:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1106c:	cmp	r2, r3
   11070:	bge	110c4 <main@@Base+0x2e4>
   11074:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11078:	add	r3, r3, #1
   1107c:	lsl	r3, r3, #2
   11080:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11084:	add	r3, r2, r3
   11088:	ldr	r3, [r3]
   1108c:	ldrb	r3, [r3]
   11090:	cmp	r3, #45	; 0x2d
   11094:	beq	110c4 <main@@Base+0x2e4>
   11098:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1109c:	add	r3, r3, #1
   110a0:	lsl	r3, r3, #2
   110a4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   110a8:	add	r3, r2, r3
   110ac:	ldr	r3, [r3]
   110b0:	str	r3, [fp, #-16]
   110b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   110b8:	add	r3, r3, #1
   110bc:	str	r3, [fp, #-24]	; 0xffffffe8
   110c0:	b	11170 <main@@Base+0x390>
   110c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   110c8:	lsl	r3, r3, #2
   110cc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   110d0:	add	r3, r2, r3
   110d4:	ldr	r3, [r3]
   110d8:	ldr	r1, [pc, #500]	; 112d4 <main@@Base+0x4f4>
   110dc:	mov	r0, r3
   110e0:	bl	108d8 <strcmp@plt>
   110e4:	mov	r3, r0
   110e8:	cmp	r3, #0
   110ec:	beq	1111c <main@@Base+0x33c>
   110f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   110f4:	lsl	r3, r3, #2
   110f8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   110fc:	add	r3, r2, r3
   11100:	ldr	r3, [r3]
   11104:	ldr	r1, [pc, #460]	; 112d8 <main@@Base+0x4f8>
   11108:	mov	r0, r3
   1110c:	bl	108d8 <strcmp@plt>
   11110:	mov	r3, r0
   11114:	cmp	r3, #0
   11118:	bne	1112c <main@@Base+0x34c>
   1111c:	ldr	r3, [pc, #380]	; 112a0 <main@@Base+0x4c0>
   11120:	mov	r2, #1
   11124:	str	r2, [r3]
   11128:	b	11170 <main@@Base+0x390>
   1112c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11130:	lsl	r3, r3, #2
   11134:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11138:	add	r3, r2, r3
   1113c:	ldr	r3, [r3]
   11140:	ldrb	r3, [r3]
   11144:	cmp	r3, #45	; 0x2d
   11148:	bne	11190 <main@@Base+0x3b0>
   1114c:	ldr	r3, [pc, #360]	; 112bc <main@@Base+0x4dc>
   11150:	ldr	r3, [r3]
   11154:	mov	r2, #25
   11158:	mov	r1, #1
   1115c:	ldr	r0, [pc, #376]	; 112dc <main@@Base+0x4fc>
   11160:	bl	10908 <fwrite@plt>
   11164:	bl	10b20 <_start@@Base+0x164>
   11168:	mov	r0, #1
   1116c:	bl	10944 <exit@plt>
   11170:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11174:	add	r3, r3, #1
   11178:	str	r3, [fp, #-24]	; 0xffffffe8
   1117c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11180:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11184:	cmp	r2, r3
   11188:	blt	10fa4 <main@@Base+0x1c4>
   1118c:	b	11194 <main@@Base+0x3b4>
   11190:	nop			; (mov r0, r0)
   11194:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11198:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1119c:	cmp	r2, r3
   111a0:	bne	111c8 <main@@Base+0x3e8>
   111a4:	ldr	r3, [pc, #272]	; 112bc <main@@Base+0x4dc>
   111a8:	ldr	r3, [r3]
   111ac:	mov	r2, #25
   111b0:	mov	r1, #1
   111b4:	ldr	r0, [pc, #288]	; 112dc <main@@Base+0x4fc>
   111b8:	bl	10908 <fwrite@plt>
   111bc:	bl	10b20 <_start@@Base+0x164>
   111c0:	mov	r0, #1
   111c4:	bl	10944 <exit@plt>
   111c8:	bl	1095c <coda_init@plt>
   111cc:	mov	r3, r0
   111d0:	cmp	r3, #0
   111d4:	beq	11210 <main@@Base+0x430>
   111d8:	ldr	r3, [pc, #220]	; 112bc <main@@Base+0x4dc>
   111dc:	ldr	r4, [r3]
   111e0:	bl	10998 <coda_get_errno@plt>
   111e4:	mov	r3, r0
   111e8:	ldr	r3, [r3]
   111ec:	mov	r0, r3
   111f0:	bl	10980 <coda_errno_to_string@plt>
   111f4:	mov	r3, r0
   111f8:	mov	r2, r3
   111fc:	ldr	r1, [pc, #188]	; 112c0 <main@@Base+0x4e0>
   11200:	mov	r0, r4
   11204:	bl	10950 <fprintf@plt>
   11208:	mov	r0, #1
   1120c:	bl	10944 <exit@plt>
   11210:	ldr	r0, [fp, #-20]	; 0xffffffec
   11214:	bl	10968 <coda_set_option_perform_conversions@plt>
   11218:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1121c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11220:	sub	r1, r2, r3
   11224:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11228:	lsl	r3, r3, #2
   1122c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11230:	add	r2, r2, r3
   11234:	mov	r3, #0
   11238:	str	r3, [sp]
   1123c:	ldr	r3, [pc, #156]	; 112e0 <main@@Base+0x500>
   11240:	ldr	r0, [fp, #-16]
   11244:	bl	108cc <coda_match_filefilter@plt>
   11248:	mov	r3, r0
   1124c:	cmp	r3, #0
   11250:	beq	1128c <main@@Base+0x4ac>
   11254:	ldr	r3, [pc, #96]	; 112bc <main@@Base+0x4dc>
   11258:	ldr	r4, [r3]
   1125c:	bl	10998 <coda_get_errno@plt>
   11260:	mov	r3, r0
   11264:	ldr	r3, [r3]
   11268:	mov	r0, r3
   1126c:	bl	10980 <coda_errno_to_string@plt>
   11270:	mov	r3, r0
   11274:	mov	r2, r3
   11278:	ldr	r1, [pc, #64]	; 112c0 <main@@Base+0x4e0>
   1127c:	mov	r0, r4
   11280:	bl	10950 <fprintf@plt>
   11284:	mov	r0, #1
   11288:	bl	10944 <exit@plt>
   1128c:	bl	10914 <coda_done@plt>
   11290:	mov	r3, #0
   11294:	mov	r0, r3
   11298:	sub	sp, fp, #8
   1129c:	pop	{r4, fp, pc}
   112a0:	andeq	r2, r2, r0, ror r0
   112a4:	andeq	r1, r1, r8, lsr r9
   112a8:	andeq	r1, r1, ip, lsr r9
   112ac:	andeq	r1, r1, r4, asr #18
   112b0:	andeq	r1, r1, r8, asr #18
   112b4:	andeq	r1, r1, r4, asr r9
   112b8:	andeq	r1, r1, r8, asr r9
   112bc:	andeq	r2, r2, r8, rrx
   112c0:	andeq	r1, r1, r4, ror r9
   112c4:	andeq	r1, r1, r0, lsl #19
   112c8:	andeq	r1, r1, r4, lsl #19
   112cc:	muleq	r1, ip, r9
   112d0:	andeq	r1, r1, r0, lsr #19
   112d4:	andeq	r1, r1, ip, lsr #19
   112d8:			; <UNDEFINED> instruction: 0x000119b0
   112dc:			; <UNDEFINED> instruction: 0x000119bc
   112e0:	andeq	r0, r1, r8, ror ip

000112e4 <__libc_csu_init@@Base>:
   112e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   112e8:	mov	r7, r0
   112ec:	ldr	r6, [pc, #72]	; 1133c <__libc_csu_init@@Base+0x58>
   112f0:	ldr	r5, [pc, #72]	; 11340 <__libc_csu_init@@Base+0x5c>
   112f4:	add	r6, pc, r6
   112f8:	add	r5, pc, r5
   112fc:	sub	r6, r6, r5
   11300:	mov	r8, r1
   11304:	mov	r9, r2
   11308:	bl	108ac <coda_match_filefilter@plt-0x20>
   1130c:	asrs	r6, r6, #2
   11310:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11314:	mov	r4, #0
   11318:	add	r4, r4, #1
   1131c:	ldr	r3, [r5], #4
   11320:	mov	r2, r9
   11324:	mov	r1, r8
   11328:	mov	r0, r7
   1132c:	blx	r3
   11330:	cmp	r6, r4
   11334:	bne	11318 <__libc_csu_init@@Base+0x34>
   11338:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1133c:	strdeq	r0, [r1], -ip
   11340:	strdeq	r0, [r1], -r4

00011344 <__libc_csu_fini@@Base>:
   11344:	bx	lr

Disassembly of section .fini:

00011348 <.fini>:
   11348:	push	{r3, lr}
   1134c:	pop	{r3, pc}
