
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-errno.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_get_errno>:
   0:	ldr	r0, [pc, #8]	; 10 <coda_get_errno+0x10>
   4:	mrc	15, 0, r3, cr13, cr0, {3}
   8:	add	r0, r0, r3
   c:	bx	lr
  10:	.word	0x00000000

00000014 <coda_set_error_message_vargs>:
  14:	subs	r2, r0, #0
  18:	beq	70 <coda_set_error_message_vargs+0x5c>
  1c:	str	r4, [sp, #-8]!
  20:	mov	r3, r1
  24:	mov	r1, #4096	; 0x1000
  28:	str	lr, [sp, #4]
  2c:	sub	sp, sp, #4096	; 0x1000
  30:	sub	sp, sp, #8
  34:	add	r0, sp, #4
  38:	add	r4, sp, #8
  3c:	bl	0 <vsnprintf>
  40:	ldr	r3, [pc, #56]	; 80 <coda_set_error_message_vargs+0x6c>
  44:	mov	r2, #0
  48:	mrc	15, 0, r0, cr13, cr0, {3}
  4c:	add	r1, sp, #4
  50:	strb	r2, [r4, #4092]	; 0xffc
  54:	add	r0, r3, r0
  58:	bl	0 <strcpy>
  5c:	add	sp, sp, #4096	; 0x1000
  60:	add	sp, sp, #8
  64:	ldr	r4, [sp]
  68:	add	sp, sp, #4
  6c:	pop	{pc}		; (ldr pc, [sp], #4)
  70:	ldr	r3, [pc, #8]	; 80 <coda_set_error_message_vargs+0x6c>
  74:	mrc	15, 0, r1, cr13, cr0, {3}
  78:	strb	r2, [r1, r3]
  7c:	bx	lr
  80:	.word	0x00000000

00000084 <coda_set_error_message>:
  84:	push	{r0, r1, r2, r3}
  88:	push	{lr}		; (str lr, [sp, #-4]!)
  8c:	sub	sp, sp, #12
  90:	ldr	r0, [sp, #16]
  94:	add	r3, sp, #20
  98:	mov	r1, r3
  9c:	str	r3, [sp, #4]
  a0:	bl	14 <coda_set_error_message_vargs>
  a4:	add	sp, sp, #12
  a8:	pop	{lr}		; (ldr lr, [sp], #4)
  ac:	add	sp, sp, #16
  b0:	bx	lr

000000b4 <coda_set_error>:
  b4:	ldr	ip, [pc, #52]	; f0 <coda_set_error+0x3c>
  b8:	push	{r1, r2, r3}
  bc:	mrc	15, 0, r3, cr13, cr0, {3}
  c0:	push	{lr}		; (str lr, [sp, #-4]!)
  c4:	sub	sp, sp, #8
  c8:	str	r0, [ip, r3]
  cc:	add	r2, sp, #16
  d0:	ldr	r0, [sp, #12]
  d4:	mov	r1, r2
  d8:	str	r2, [sp, #4]
  dc:	bl	14 <coda_set_error_message_vargs>
  e0:	add	sp, sp, #8
  e4:	pop	{lr}		; (ldr lr, [sp], #4)
  e8:	add	sp, sp, #12
  ec:	bx	lr
  f0:	.word	0x00000000

000000f4 <coda_errno_to_string>:
  f4:	ldr	r2, [pc, #592]	; 34c <coda_errno_to_string+0x258>
  f8:	mrc	15, 0, r3, cr13, cr0, {3}
  fc:	ldr	r2, [r2, r3]
 100:	cmp	r2, r0
 104:	beq	2bc <coda_errno_to_string+0x1c8>
 108:	cmn	r0, #101	; 0x65
 10c:	beq	334 <coda_errno_to_string+0x240>
 110:	bgt	144 <coda_errno_to_string+0x50>
 114:	cmn	r0, #108	; 0x6c
 118:	beq	31c <coda_errno_to_string+0x228>
 11c:	ble	188 <coda_errno_to_string+0x94>
 120:	cmn	r0, #105	; 0x69
 124:	beq	310 <coda_errno_to_string+0x21c>
 128:	ble	218 <coda_errno_to_string+0x124>
 12c:	cmn	r0, #103	; 0x67
 130:	beq	2d4 <coda_errno_to_string+0x1e0>
 134:	bgt	2a4 <coda_errno_to_string+0x1b0>
 138:	movw	r0, #0
 13c:	movt	r0, #0
 140:	bx	lr
 144:	cmn	r0, #14
 148:	beq	328 <coda_errno_to_string+0x234>
 14c:	ble	1d4 <coda_errno_to_string+0xe0>
 150:	cmn	r0, #11
 154:	beq	304 <coda_errno_to_string+0x210>
 158:	ble	234 <coda_errno_to_string+0x140>
 15c:	cmn	r0, #1
 160:	beq	2e0 <coda_errno_to_string+0x1ec>
 164:	cmp	r0, #0
 168:	beq	250 <coda_errno_to_string+0x15c>
 16c:	cmn	r0, #10
 170:	beq	2b0 <coda_errno_to_string+0x1bc>
 174:	cmp	r2, r0
 178:	beq	340 <coda_errno_to_string+0x24c>
 17c:	movw	r0, #0
 180:	movt	r0, #0
 184:	bx	lr
 188:	mvn	r1, #300	; 0x12c
 18c:	cmp	r0, r1
 190:	beq	2f8 <coda_errno_to_string+0x204>
 194:	cmn	r0, #300	; 0x12c
 198:	blt	1b4 <coda_errno_to_string+0xc0>
 19c:	beq	298 <coda_errno_to_string+0x1a4>
 1a0:	cmn	r0, #200	; 0xc8
 1a4:	bne	174 <coda_errno_to_string+0x80>
 1a8:	movw	r0, #0
 1ac:	movt	r0, #0
 1b0:	bx	lr
 1b4:	mvn	r1, #400	; 0x190
 1b8:	cmp	r0, r1
 1bc:	beq	28c <coda_errno_to_string+0x198>
 1c0:	cmn	r0, #400	; 0x190
 1c4:	bne	174 <coda_errno_to_string+0x80>
 1c8:	movw	r0, #0
 1cc:	movt	r0, #0
 1d0:	bx	lr
 1d4:	cmn	r0, #22
 1d8:	beq	2ec <coda_errno_to_string+0x1f8>
 1dc:	ble	1fc <coda_errno_to_string+0x108>
 1e0:	cmn	r0, #21
 1e4:	beq	280 <coda_errno_to_string+0x18c>
 1e8:	cmn	r0, #20
 1ec:	bne	174 <coda_errno_to_string+0x80>
 1f0:	movw	r0, #0
 1f4:	movt	r0, #0
 1f8:	bx	lr
 1fc:	cmn	r0, #100	; 0x64
 200:	beq	274 <coda_errno_to_string+0x180>
 204:	cmn	r0, #23
 208:	bne	174 <coda_errno_to_string+0x80>
 20c:	movw	r0, #0
 210:	movt	r0, #0
 214:	bx	lr
 218:	cmn	r0, #107	; 0x6b
 21c:	beq	268 <coda_errno_to_string+0x174>
 220:	cmn	r0, #106	; 0x6a
 224:	bne	174 <coda_errno_to_string+0x80>
 228:	movw	r0, #0
 22c:	movt	r0, #0
 230:	bx	lr
 234:	cmn	r0, #13
 238:	beq	25c <coda_errno_to_string+0x168>
 23c:	cmn	r0, #12
 240:	bne	174 <coda_errno_to_string+0x80>
 244:	movw	r0, #0
 248:	movt	r0, #0
 24c:	bx	lr
 250:	movw	r0, #0
 254:	movt	r0, #0
 258:	bx	lr
 25c:	movw	r0, #0
 260:	movt	r0, #0
 264:	bx	lr
 268:	movw	r0, #0
 26c:	movt	r0, #0
 270:	bx	lr
 274:	movw	r0, #0
 278:	movt	r0, #0
 27c:	bx	lr
 280:	movw	r0, #0
 284:	movt	r0, #0
 288:	bx	lr
 28c:	movw	r0, #0
 290:	movt	r0, #0
 294:	bx	lr
 298:	movw	r0, #0
 29c:	movt	r0, #0
 2a0:	bx	lr
 2a4:	movw	r0, #0
 2a8:	movt	r0, #0
 2ac:	bx	lr
 2b0:	movw	r0, #0
 2b4:	movt	r0, #0
 2b8:	bx	lr
 2bc:	ldr	r1, [pc, #140]	; 350 <coda_errno_to_string+0x25c>
 2c0:	ldrb	ip, [r1, r3]
 2c4:	cmp	ip, #0
 2c8:	beq	108 <coda_errno_to_string+0x14>
 2cc:	add	r0, r1, r3
 2d0:	bx	lr
 2d4:	movw	r0, #0
 2d8:	movt	r0, #0
 2dc:	bx	lr
 2e0:	movw	r0, #0
 2e4:	movt	r0, #0
 2e8:	bx	lr
 2ec:	movw	r0, #0
 2f0:	movt	r0, #0
 2f4:	bx	lr
 2f8:	movw	r0, #0
 2fc:	movt	r0, #0
 300:	bx	lr
 304:	movw	r0, #0
 308:	movt	r0, #0
 30c:	bx	lr
 310:	movw	r0, #0
 314:	movt	r0, #0
 318:	bx	lr
 31c:	movw	r0, #0
 320:	movt	r0, #0
 324:	bx	lr
 328:	movw	r0, #0
 32c:	movt	r0, #0
 330:	bx	lr
 334:	movw	r0, #0
 338:	movt	r0, #0
 33c:	bx	lr
 340:	ldr	r0, [pc, #8]	; 350 <coda_errno_to_string+0x25c>
 344:	add	r0, r0, r3
 348:	bx	lr
	...

00000354 <coda_add_error_message_vargs>:
 354:	strd	r4, [sp, #-32]!	; 0xffffffe0
 358:	subs	r5, r0, #0
 35c:	strd	r6, [sp, #8]
 360:	strd	r8, [sp, #16]
 364:	str	sl, [sp, #24]
 368:	str	lr, [sp, #28]
 36c:	sub	sp, sp, #4096	; 0x1000
 370:	sub	sp, sp, #8
 374:	beq	3d4 <coda_add_error_message_vargs+0x80>
 378:	ldr	r9, [pc, #160]	; 420 <coda_add_error_message_vargs+0xcc>
 37c:	mrc	15, 0, r7, cr13, cr0, {3}
 380:	mov	r6, r1
 384:	add	r0, r9, r7
 388:	bl	0 <strlen>
 38c:	cmp	r0, #4096	; 0x1000
 390:	beq	3d4 <coda_add_error_message_vargs+0x80>
 394:	cmp	r0, #0
 398:	beq	3f4 <coda_add_error_message_vargs+0xa0>
 39c:	add	r8, sp, #8
 3a0:	add	sl, sp, #4
 3a4:	rsb	r4, r0, #4096	; 0x1000
 3a8:	mov	r3, r6
 3ac:	mov	r1, r4
 3b0:	mov	r2, r5
 3b4:	mov	r0, sl
 3b8:	add	r4, r8, r4
 3bc:	bl	0 <vsnprintf>
 3c0:	mov	r3, #0
 3c4:	mov	r1, sl
 3c8:	add	r0, r9, r7
 3cc:	strb	r3, [r4, #-4]
 3d0:	bl	0 <strcat>
 3d4:	add	sp, sp, #4096	; 0x1000
 3d8:	add	sp, sp, #8
 3dc:	ldrd	r4, [sp]
 3e0:	ldrd	r6, [sp, #8]
 3e4:	ldrd	r8, [sp, #16]
 3e8:	ldr	sl, [sp, #24]
 3ec:	add	sp, sp, #28
 3f0:	pop	{pc}		; (ldr pc, [sp], #4)
 3f4:	ldr	r3, [pc, #40]	; 424 <coda_add_error_message_vargs+0xd0>
 3f8:	add	sl, sp, #4
 3fc:	add	r8, sp, #8
 400:	ldr	r0, [r3, r7]
 404:	bl	f4 <coda_errno_to_string>
 408:	mov	r1, r0
 40c:	mov	r0, sl
 410:	bl	0 <strcpy>
 414:	mov	r0, sl
 418:	bl	0 <strlen>
 41c:	b	3a4 <coda_add_error_message_vargs+0x50>
	...

00000428 <coda_add_error_message>:
 428:	push	{r0, r1, r2, r3}
 42c:	push	{lr}		; (str lr, [sp, #-4]!)
 430:	sub	sp, sp, #12
 434:	ldr	r0, [sp, #16]
 438:	add	r3, sp, #20
 43c:	mov	r1, r3
 440:	str	r3, [sp, #4]
 444:	bl	354 <coda_add_error_message_vargs>
 448:	add	sp, sp, #12
 44c:	pop	{lr}		; (ldr lr, [sp], #4)
 450:	add	sp, sp, #16
 454:	bx	lr

00000458 <coda_cursor_add_to_error_message>:
 458:	str	r4, [sp, #-8]!
 45c:	mov	r4, r0
 460:	movw	r0, #0
 464:	movt	r0, #0
 468:	str	lr, [sp, #4]
 46c:	bl	428 <coda_add_error_message>
 470:	mov	r0, r4
 474:	movw	r1, #0
 478:	movt	r1, #0
 47c:	ldr	r4, [sp]
 480:	ldr	lr, [sp, #4]
 484:	add	sp, sp, #8
 488:	b	0 <coda_cursor_print_path>

0000048c <add_error_message>:
 48c:	push	{r0, r1, r2, r3}
 490:	push	{lr}		; (str lr, [sp, #-4]!)
 494:	sub	sp, sp, #12
 498:	add	r3, sp, #20
 49c:	ldr	r0, [sp, #16]
 4a0:	mov	r1, r3
 4a4:	str	r3, [sp, #4]
 4a8:	bl	354 <coda_add_error_message_vargs>
 4ac:	mov	r0, #0
 4b0:	add	sp, sp, #12
 4b4:	pop	{lr}		; (ldr lr, [sp], #4)
 4b8:	add	sp, sp, #16
 4bc:	bx	lr
