
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-xml.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_xml_reopen>:
   0:	push	{r4, r5, r6, r7, lr}
   4:	mov	r5, r0
   8:	sub	sp, sp, #12
   c:	mov	r0, #56	; 0x38
  10:	bl	0 <malloc>
  14:	subs	r4, r0, #0
  18:	beq	9c <coda_xml_reopen+0x9c>
  1c:	ldr	r2, [r5]
  20:	mov	r6, #0
  24:	mov	r7, #0
  28:	ldrd	r0, [r2, #8]
  2c:	mov	r3, #0
  30:	str	r3, [r4]
  34:	strd	r0, [r4, #8]
  38:	mov	r1, #2
  3c:	ldr	r0, [r2]
  40:	str	r2, [r4, #52]	; 0x34
  44:	strd	r6, [r4, #40]	; 0x28
  48:	str	r3, [r4, #20]
  4c:	str	r3, [r4, #24]
  50:	str	r3, [r4, #28]
  54:	str	r3, [r4, #32]
  58:	str	r3, [r4, #48]	; 0x30
  5c:	str	r1, [r4, #16]
  60:	bl	0 <strdup>
  64:	cmp	r0, #0
  68:	str	r0, [r4]
  6c:	beq	c8 <coda_xml_reopen+0xc8>
  70:	mov	r0, r4
  74:	bl	0 <coda_xml_parse>
  78:	cmp	r0, #0
  7c:	streq	r4, [r5]
  80:	bne	8c <coda_xml_reopen+0x8c>
  84:	add	sp, sp, #12
  88:	pop	{r4, r5, r6, r7, pc}
  8c:	mov	r0, r4
  90:	bl	0 <coda_close>
  94:	mvn	r0, #0
  98:	b	84 <coda_xml_reopen+0x84>
  9c:	mov	r3, #53	; 0x35
  a0:	str	r3, [sp]
  a4:	mov	r2, #56	; 0x38
  a8:	ldr	r3, [pc, #60]	; ec <coda_xml_reopen+0xec>
  ac:	ldr	r1, [pc, #60]	; f0 <coda_xml_reopen+0xf0>
  b0:	mvn	r0, #0
  b4:	bl	0 <coda_set_error>
  b8:	ldr	r0, [r5]
  bc:	bl	0 <coda_close>
  c0:	mvn	r0, #0
  c4:	b	84 <coda_xml_reopen+0x84>
  c8:	mov	r3, #72	; 0x48
  cc:	ldr	r2, [pc, #24]	; ec <coda_xml_reopen+0xec>
  d0:	ldr	r1, [pc, #28]	; f4 <coda_xml_reopen+0xf4>
  d4:	mvn	r0, #0
  d8:	bl	0 <coda_set_error>
  dc:	mov	r0, r4
  e0:	bl	0 <coda_close>
  e4:	mvn	r0, #0
  e8:	b	84 <coda_xml_reopen+0x84>
  ec:	.word	0x00000000
  f0:	.word	0x00000048
  f4:	.word	0x00000080

000000f8 <coda_xml_reopen_with_definition>:
  f8:	push	{r4, r5, r6, lr}
  fc:	subs	r5, r1, #0
 100:	ldr	r4, [r0]
 104:	beq	168 <coda_xml_reopen_with_definition+0x70>
 108:	ldr	r3, [r4, #16]
 10c:	cmp	r3, #2
 110:	bne	190 <coda_xml_reopen_with_definition+0x98>
 114:	ldr	r3, [r5]
 118:	cmp	r3, #2
 11c:	bne	17c <coda_xml_reopen_with_definition+0x84>
 120:	ldr	r0, [r4, #20]
 124:	bl	0 <coda_dynamic_type_delete>
 128:	ldr	r0, [r4, #48]	; 0x30
 12c:	mov	r2, #0
 130:	mov	r3, #0
 134:	mov	r6, #0
 138:	cmp	r0, #0
 13c:	strd	r2, [r4, #40]	; 0x28
 140:	str	r6, [r4, #20]
 144:	beq	150 <coda_xml_reopen_with_definition+0x58>
 148:	bl	0 <free>
 14c:	str	r6, [r4, #48]	; 0x30
 150:	str	r5, [r4, #24]
 154:	mov	r0, r4
 158:	bl	0 <coda_xml_parse>
 15c:	adds	r0, r0, #0
 160:	mvnne	r0, #0
 164:	pop	{r4, r5, r6, pc}
 168:	ldr	r3, [pc, #52]	; 1a4 <coda_xml_reopen_with_definition+0xac>
 16c:	mov	r2, #92	; 0x5c
 170:	ldr	r1, [pc, #48]	; 1a8 <coda_xml_reopen_with_definition+0xb0>
 174:	ldr	r0, [pc, #48]	; 1ac <coda_xml_reopen_with_definition+0xb4>
 178:	bl	0 <__assert_fail>
 17c:	ldr	r3, [pc, #32]	; 1a4 <coda_xml_reopen_with_definition+0xac>
 180:	mov	r2, #94	; 0x5e
 184:	ldr	r1, [pc, #28]	; 1a8 <coda_xml_reopen_with_definition+0xb0>
 188:	ldr	r0, [pc, #32]	; 1b0 <coda_xml_reopen_with_definition+0xb8>
 18c:	bl	0 <__assert_fail>
 190:	ldr	r3, [pc, #12]	; 1a4 <coda_xml_reopen_with_definition+0xac>
 194:	mov	r2, #93	; 0x5d
 198:	ldr	r1, [pc, #8]	; 1a8 <coda_xml_reopen_with_definition+0xb0>
 19c:	ldr	r0, [pc, #16]	; 1b4 <coda_xml_reopen_with_definition+0xbc>
 1a0:	bl	0 <__assert_fail>
	...
 1ac:	.word	0x000000bc
 1b0:	.word	0x000000f8
 1b4:	.word	0x000000d0

000001b8 <coda_xml_close>:
 1b8:	push	{r4, lr}
 1bc:	mov	r4, r0
 1c0:	ldr	r0, [r0]
 1c4:	cmp	r0, #0
 1c8:	beq	1d0 <coda_xml_close+0x18>
 1cc:	bl	0 <free>
 1d0:	ldr	r0, [r4, #20]
 1d4:	cmp	r0, #0
 1d8:	beq	1e0 <coda_xml_close+0x28>
 1dc:	bl	0 <coda_dynamic_type_delete>
 1e0:	ldr	r0, [r4, #48]	; 0x30
 1e4:	cmp	r0, #0
 1e8:	beq	1f0 <coda_xml_close+0x38>
 1ec:	bl	0 <free>
 1f0:	ldr	r0, [r4, #52]	; 0x34
 1f4:	cmp	r0, #0
 1f8:	beq	200 <coda_xml_close+0x48>
 1fc:	bl	0 <coda_bin_close>
 200:	mov	r0, r4
 204:	bl	0 <free>
 208:	mov	r0, #0
 20c:	pop	{r4, pc}

00000210 <coda_xml_cursor_set_product>:
 210:	push	{r4, lr}
 214:	mov	r2, #0
 218:	ldr	r4, [r1, #20]
 21c:	mov	r3, #0
 220:	mov	lr, #1
 224:	mvn	ip, #0
 228:	str	r1, [r0]
 22c:	str	r4, [r0, #8]
 230:	str	lr, [r0, #4]
 234:	str	ip, [r0, #12]
 238:	strd	r2, [r0, #16]
 23c:	mov	r0, #0
 240:	pop	{r4, pc}
