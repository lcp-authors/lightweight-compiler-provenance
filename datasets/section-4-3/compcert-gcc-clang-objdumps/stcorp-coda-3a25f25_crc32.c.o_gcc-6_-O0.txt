
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/zlib/crc32.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_get_crc_table>:
   0:	push	{fp}		; (str fp, [sp, #-4]!)
   4:	add	fp, sp, #0
   8:	ldr	r3, [pc, #12]	; 1c <coda_get_crc_table+0x1c>
   c:	mov	r0, r3
  10:	add	sp, fp, #0
  14:	pop	{fp}		; (ldr fp, [sp], #4)
  18:	bx	lr
  1c:	.word	0x00000000

00000020 <coda_crc32>:
  20:	push	{fp, lr}
  24:	add	fp, sp, #4
  28:	sub	sp, sp, #24
  2c:	str	r0, [fp, #-16]
  30:	str	r1, [fp, #-20]	; 0xffffffec
  34:	str	r2, [fp, #-24]	; 0xffffffe8
  38:	ldr	r3, [fp, #-20]	; 0xffffffec
  3c:	cmp	r3, #0
  40:	bne	4c <coda_crc32+0x2c>
  44:	mov	r3, #0
  48:	b	90 <coda_crc32+0x70>
  4c:	mov	r3, #1
  50:	str	r3, [fp, #-8]
  54:	sub	r3, fp, #8
  58:	ldrb	r3, [r3]
  5c:	cmp	r3, #0
  60:	beq	7c <coda_crc32+0x5c>
  64:	ldr	r2, [fp, #-24]	; 0xffffffe8
  68:	ldr	r1, [fp, #-20]	; 0xffffffec
  6c:	ldr	r0, [fp, #-16]
  70:	bl	9c <crc32_little>
  74:	mov	r3, r0
  78:	b	90 <coda_crc32+0x70>
  7c:	ldr	r2, [fp, #-24]	; 0xffffffe8
  80:	ldr	r1, [fp, #-20]	; 0xffffffec
  84:	ldr	r0, [fp, #-16]
  88:	bl	518 <crc32_big>
  8c:	mov	r3, r0
  90:	mov	r0, r3
  94:	sub	sp, fp, #4
  98:	pop	{fp, pc}

0000009c <crc32_little>:
  9c:	push	{r4, r5, fp}
  a0:	add	fp, sp, #8
  a4:	sub	sp, sp, #20
  a8:	str	r0, [fp, #-16]
  ac:	str	r1, [fp, #-20]	; 0xffffffec
  b0:	str	r2, [fp, #-24]	; 0xffffffe8
  b4:	ldr	r4, [fp, #-16]
  b8:	mvn	r4, r4
  bc:	b	f4 <crc32_little+0x58>
  c0:	ldr	r3, [fp, #-20]	; 0xffffffec
  c4:	add	r2, r3, #1
  c8:	str	r2, [fp, #-20]	; 0xffffffec
  cc:	ldrb	r3, [r3]
  d0:	eor	r3, r3, r4
  d4:	uxtb	r3, r3
  d8:	ldr	r2, [pc, #1076]	; 514 <crc32_little+0x478>
  dc:	ldr	r2, [r2, r3, lsl #2]
  e0:	lsr	r3, r4, #8
  e4:	eor	r4, r2, r3
  e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
  ec:	sub	r3, r3, #1
  f0:	str	r3, [fp, #-24]	; 0xffffffe8
  f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
  f8:	cmp	r3, #0
  fc:	beq	110 <crc32_little+0x74>
 100:	ldr	r3, [fp, #-20]	; 0xffffffec
 104:	and	r3, r3, #3
 108:	cmp	r3, #0
 10c:	bne	c0 <crc32_little+0x24>
 110:	ldr	r5, [fp, #-20]	; 0xffffffec
 114:	b	424 <crc32_little+0x388>
 118:	mov	r3, r5
 11c:	add	r5, r3, #4
 120:	ldr	r3, [r3]
 124:	eor	r4, r4, r3
 128:	uxtb	r3, r4
 12c:	ldr	r2, [pc, #992]	; 514 <crc32_little+0x478>
 130:	add	r3, r3, #768	; 0x300
 134:	ldr	r2, [r2, r3, lsl #2]
 138:	lsr	r3, r4, #8
 13c:	uxtb	r3, r3
 140:	ldr	r1, [pc, #972]	; 514 <crc32_little+0x478>
 144:	add	r3, r3, #512	; 0x200
 148:	ldr	r3, [r1, r3, lsl #2]
 14c:	eor	r2, r2, r3
 150:	lsr	r3, r4, #16
 154:	uxtb	r3, r3
 158:	ldr	r1, [pc, #948]	; 514 <crc32_little+0x478>
 15c:	add	r3, r3, #256	; 0x100
 160:	ldr	r3, [r1, r3, lsl #2]
 164:	eor	r2, r2, r3
 168:	lsr	r3, r4, #24
 16c:	ldr	r1, [pc, #928]	; 514 <crc32_little+0x478>
 170:	ldr	r3, [r1, r3, lsl #2]
 174:	eor	r4, r2, r3
 178:	mov	r3, r5
 17c:	add	r5, r3, #4
 180:	ldr	r3, [r3]
 184:	eor	r4, r4, r3
 188:	uxtb	r3, r4
 18c:	ldr	r2, [pc, #896]	; 514 <crc32_little+0x478>
 190:	add	r3, r3, #768	; 0x300
 194:	ldr	r2, [r2, r3, lsl #2]
 198:	lsr	r3, r4, #8
 19c:	uxtb	r3, r3
 1a0:	ldr	r1, [pc, #876]	; 514 <crc32_little+0x478>
 1a4:	add	r3, r3, #512	; 0x200
 1a8:	ldr	r3, [r1, r3, lsl #2]
 1ac:	eor	r2, r2, r3
 1b0:	lsr	r3, r4, #16
 1b4:	uxtb	r3, r3
 1b8:	ldr	r1, [pc, #852]	; 514 <crc32_little+0x478>
 1bc:	add	r3, r3, #256	; 0x100
 1c0:	ldr	r3, [r1, r3, lsl #2]
 1c4:	eor	r2, r2, r3
 1c8:	lsr	r3, r4, #24
 1cc:	ldr	r1, [pc, #832]	; 514 <crc32_little+0x478>
 1d0:	ldr	r3, [r1, r3, lsl #2]
 1d4:	eor	r4, r2, r3
 1d8:	mov	r3, r5
 1dc:	add	r5, r3, #4
 1e0:	ldr	r3, [r3]
 1e4:	eor	r4, r4, r3
 1e8:	uxtb	r3, r4
 1ec:	ldr	r2, [pc, #800]	; 514 <crc32_little+0x478>
 1f0:	add	r3, r3, #768	; 0x300
 1f4:	ldr	r2, [r2, r3, lsl #2]
 1f8:	lsr	r3, r4, #8
 1fc:	uxtb	r3, r3
 200:	ldr	r1, [pc, #780]	; 514 <crc32_little+0x478>
 204:	add	r3, r3, #512	; 0x200
 208:	ldr	r3, [r1, r3, lsl #2]
 20c:	eor	r2, r2, r3
 210:	lsr	r3, r4, #16
 214:	uxtb	r3, r3
 218:	ldr	r1, [pc, #756]	; 514 <crc32_little+0x478>
 21c:	add	r3, r3, #256	; 0x100
 220:	ldr	r3, [r1, r3, lsl #2]
 224:	eor	r2, r2, r3
 228:	lsr	r3, r4, #24
 22c:	ldr	r1, [pc, #736]	; 514 <crc32_little+0x478>
 230:	ldr	r3, [r1, r3, lsl #2]
 234:	eor	r4, r2, r3
 238:	mov	r3, r5
 23c:	add	r5, r3, #4
 240:	ldr	r3, [r3]
 244:	eor	r4, r4, r3
 248:	uxtb	r3, r4
 24c:	ldr	r2, [pc, #704]	; 514 <crc32_little+0x478>
 250:	add	r3, r3, #768	; 0x300
 254:	ldr	r2, [r2, r3, lsl #2]
 258:	lsr	r3, r4, #8
 25c:	uxtb	r3, r3
 260:	ldr	r1, [pc, #684]	; 514 <crc32_little+0x478>
 264:	add	r3, r3, #512	; 0x200
 268:	ldr	r3, [r1, r3, lsl #2]
 26c:	eor	r2, r2, r3
 270:	lsr	r3, r4, #16
 274:	uxtb	r3, r3
 278:	ldr	r1, [pc, #660]	; 514 <crc32_little+0x478>
 27c:	add	r3, r3, #256	; 0x100
 280:	ldr	r3, [r1, r3, lsl #2]
 284:	eor	r2, r2, r3
 288:	lsr	r3, r4, #24
 28c:	ldr	r1, [pc, #640]	; 514 <crc32_little+0x478>
 290:	ldr	r3, [r1, r3, lsl #2]
 294:	eor	r4, r2, r3
 298:	mov	r3, r5
 29c:	add	r5, r3, #4
 2a0:	ldr	r3, [r3]
 2a4:	eor	r4, r4, r3
 2a8:	uxtb	r3, r4
 2ac:	ldr	r2, [pc, #608]	; 514 <crc32_little+0x478>
 2b0:	add	r3, r3, #768	; 0x300
 2b4:	ldr	r2, [r2, r3, lsl #2]
 2b8:	lsr	r3, r4, #8
 2bc:	uxtb	r3, r3
 2c0:	ldr	r1, [pc, #588]	; 514 <crc32_little+0x478>
 2c4:	add	r3, r3, #512	; 0x200
 2c8:	ldr	r3, [r1, r3, lsl #2]
 2cc:	eor	r2, r2, r3
 2d0:	lsr	r3, r4, #16
 2d4:	uxtb	r3, r3
 2d8:	ldr	r1, [pc, #564]	; 514 <crc32_little+0x478>
 2dc:	add	r3, r3, #256	; 0x100
 2e0:	ldr	r3, [r1, r3, lsl #2]
 2e4:	eor	r2, r2, r3
 2e8:	lsr	r3, r4, #24
 2ec:	ldr	r1, [pc, #544]	; 514 <crc32_little+0x478>
 2f0:	ldr	r3, [r1, r3, lsl #2]
 2f4:	eor	r4, r2, r3
 2f8:	mov	r3, r5
 2fc:	add	r5, r3, #4
 300:	ldr	r3, [r3]
 304:	eor	r4, r4, r3
 308:	uxtb	r3, r4
 30c:	ldr	r2, [pc, #512]	; 514 <crc32_little+0x478>
 310:	add	r3, r3, #768	; 0x300
 314:	ldr	r2, [r2, r3, lsl #2]
 318:	lsr	r3, r4, #8
 31c:	uxtb	r3, r3
 320:	ldr	r1, [pc, #492]	; 514 <crc32_little+0x478>
 324:	add	r3, r3, #512	; 0x200
 328:	ldr	r3, [r1, r3, lsl #2]
 32c:	eor	r2, r2, r3
 330:	lsr	r3, r4, #16
 334:	uxtb	r3, r3
 338:	ldr	r1, [pc, #468]	; 514 <crc32_little+0x478>
 33c:	add	r3, r3, #256	; 0x100
 340:	ldr	r3, [r1, r3, lsl #2]
 344:	eor	r2, r2, r3
 348:	lsr	r3, r4, #24
 34c:	ldr	r1, [pc, #448]	; 514 <crc32_little+0x478>
 350:	ldr	r3, [r1, r3, lsl #2]
 354:	eor	r4, r2, r3
 358:	mov	r3, r5
 35c:	add	r5, r3, #4
 360:	ldr	r3, [r3]
 364:	eor	r4, r4, r3
 368:	uxtb	r3, r4
 36c:	ldr	r2, [pc, #416]	; 514 <crc32_little+0x478>
 370:	add	r3, r3, #768	; 0x300
 374:	ldr	r2, [r2, r3, lsl #2]
 378:	lsr	r3, r4, #8
 37c:	uxtb	r3, r3
 380:	ldr	r1, [pc, #396]	; 514 <crc32_little+0x478>
 384:	add	r3, r3, #512	; 0x200
 388:	ldr	r3, [r1, r3, lsl #2]
 38c:	eor	r2, r2, r3
 390:	lsr	r3, r4, #16
 394:	uxtb	r3, r3
 398:	ldr	r1, [pc, #372]	; 514 <crc32_little+0x478>
 39c:	add	r3, r3, #256	; 0x100
 3a0:	ldr	r3, [r1, r3, lsl #2]
 3a4:	eor	r2, r2, r3
 3a8:	lsr	r3, r4, #24
 3ac:	ldr	r1, [pc, #352]	; 514 <crc32_little+0x478>
 3b0:	ldr	r3, [r1, r3, lsl #2]
 3b4:	eor	r4, r2, r3
 3b8:	mov	r3, r5
 3bc:	add	r5, r3, #4
 3c0:	ldr	r3, [r3]
 3c4:	eor	r4, r4, r3
 3c8:	uxtb	r3, r4
 3cc:	ldr	r2, [pc, #320]	; 514 <crc32_little+0x478>
 3d0:	add	r3, r3, #768	; 0x300
 3d4:	ldr	r2, [r2, r3, lsl #2]
 3d8:	lsr	r3, r4, #8
 3dc:	uxtb	r3, r3
 3e0:	ldr	r1, [pc, #300]	; 514 <crc32_little+0x478>
 3e4:	add	r3, r3, #512	; 0x200
 3e8:	ldr	r3, [r1, r3, lsl #2]
 3ec:	eor	r2, r2, r3
 3f0:	lsr	r3, r4, #16
 3f4:	uxtb	r3, r3
 3f8:	ldr	r1, [pc, #276]	; 514 <crc32_little+0x478>
 3fc:	add	r3, r3, #256	; 0x100
 400:	ldr	r3, [r1, r3, lsl #2]
 404:	eor	r2, r2, r3
 408:	lsr	r3, r4, #24
 40c:	ldr	r1, [pc, #256]	; 514 <crc32_little+0x478>
 410:	ldr	r3, [r1, r3, lsl #2]
 414:	eor	r4, r2, r3
 418:	ldr	r3, [fp, #-24]	; 0xffffffe8
 41c:	sub	r3, r3, #32
 420:	str	r3, [fp, #-24]	; 0xffffffe8
 424:	ldr	r3, [fp, #-24]	; 0xffffffe8
 428:	cmp	r3, #31
 42c:	bhi	118 <crc32_little+0x7c>
 430:	b	4a0 <crc32_little+0x404>
 434:	mov	r3, r5
 438:	add	r5, r3, #4
 43c:	ldr	r3, [r3]
 440:	eor	r4, r4, r3
 444:	uxtb	r3, r4
 448:	ldr	r2, [pc, #196]	; 514 <crc32_little+0x478>
 44c:	add	r3, r3, #768	; 0x300
 450:	ldr	r2, [r2, r3, lsl #2]
 454:	lsr	r3, r4, #8
 458:	uxtb	r3, r3
 45c:	ldr	r1, [pc, #176]	; 514 <crc32_little+0x478>
 460:	add	r3, r3, #512	; 0x200
 464:	ldr	r3, [r1, r3, lsl #2]
 468:	eor	r2, r2, r3
 46c:	lsr	r3, r4, #16
 470:	uxtb	r3, r3
 474:	ldr	r1, [pc, #152]	; 514 <crc32_little+0x478>
 478:	add	r3, r3, #256	; 0x100
 47c:	ldr	r3, [r1, r3, lsl #2]
 480:	eor	r2, r2, r3
 484:	lsr	r3, r4, #24
 488:	ldr	r1, [pc, #132]	; 514 <crc32_little+0x478>
 48c:	ldr	r3, [r1, r3, lsl #2]
 490:	eor	r4, r2, r3
 494:	ldr	r3, [fp, #-24]	; 0xffffffe8
 498:	sub	r3, r3, #4
 49c:	str	r3, [fp, #-24]	; 0xffffffe8
 4a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
 4a4:	cmp	r3, #3
 4a8:	bhi	434 <crc32_little+0x398>
 4ac:	str	r5, [fp, #-20]	; 0xffffffec
 4b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
 4b4:	cmp	r3, #0
 4b8:	beq	4fc <crc32_little+0x460>
 4bc:	ldr	r3, [fp, #-20]	; 0xffffffec
 4c0:	add	r2, r3, #1
 4c4:	str	r2, [fp, #-20]	; 0xffffffec
 4c8:	ldrb	r3, [r3]
 4cc:	eor	r3, r3, r4
 4d0:	uxtb	r3, r3
 4d4:	ldr	r2, [pc, #56]	; 514 <crc32_little+0x478>
 4d8:	ldr	r2, [r2, r3, lsl #2]
 4dc:	lsr	r3, r4, #8
 4e0:	eor	r4, r2, r3
 4e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
 4e8:	sub	r3, r3, #1
 4ec:	str	r3, [fp, #-24]	; 0xffffffe8
 4f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
 4f4:	cmp	r3, #0
 4f8:	bne	4bc <crc32_little+0x420>
 4fc:	mvn	r4, r4
 500:	mov	r3, r4
 504:	mov	r0, r3
 508:	sub	sp, fp, #8
 50c:	pop	{r4, r5, fp}
 510:	bx	lr
 514:	.word	0x00000000

00000518 <crc32_big>:
 518:	push	{r4, r5, fp}
 51c:	add	fp, sp, #8
 520:	sub	sp, sp, #20
 524:	str	r0, [fp, #-16]
 528:	str	r1, [fp, #-20]	; 0xffffffec
 52c:	str	r2, [fp, #-24]	; 0xffffffe8
 530:	ldr	r3, [fp, #-16]
 534:	lsr	r2, r3, #24
 538:	ldr	r3, [fp, #-16]
 53c:	lsr	r3, r3, #8
 540:	and	r3, r3, #65280	; 0xff00
 544:	add	r2, r2, r3
 548:	ldr	r3, [fp, #-16]
 54c:	lsl	r3, r3, #8
 550:	and	r3, r3, #16711680	; 0xff0000
 554:	add	r2, r2, r3
 558:	ldr	r3, [fp, #-16]
 55c:	lsl	r3, r3, #24
 560:	add	r4, r2, r3
 564:	mvn	r4, r4
 568:	b	5a4 <crc32_big+0x8c>
 56c:	lsr	r2, r4, #24
 570:	ldr	r3, [fp, #-20]	; 0xffffffec
 574:	add	r1, r3, #1
 578:	str	r1, [fp, #-20]	; 0xffffffec
 57c:	ldrb	r3, [r3]
 580:	eor	r3, r3, r2
 584:	ldr	r2, [pc, #1124]	; 9f0 <crc32_big+0x4d8>
 588:	add	r3, r3, #1024	; 0x400
 58c:	ldr	r2, [r2, r3, lsl #2]
 590:	lsl	r3, r4, #8
 594:	eor	r4, r2, r3
 598:	ldr	r3, [fp, #-24]	; 0xffffffe8
 59c:	sub	r3, r3, #1
 5a0:	str	r3, [fp, #-24]	; 0xffffffe8
 5a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
 5a8:	cmp	r3, #0
 5ac:	beq	5c0 <crc32_big+0xa8>
 5b0:	ldr	r3, [fp, #-20]	; 0xffffffec
 5b4:	and	r3, r3, #3
 5b8:	cmp	r3, #0
 5bc:	bne	56c <crc32_big+0x54>
 5c0:	ldr	r5, [fp, #-20]	; 0xffffffec
 5c4:	sub	r5, r5, #4
 5c8:	b	8d8 <crc32_big+0x3c0>
 5cc:	add	r5, r5, #4
 5d0:	ldr	r3, [r5]
 5d4:	eor	r4, r4, r3
 5d8:	uxtb	r3, r4
 5dc:	ldr	r2, [pc, #1036]	; 9f0 <crc32_big+0x4d8>
 5e0:	add	r3, r3, #1024	; 0x400
 5e4:	ldr	r2, [r2, r3, lsl #2]
 5e8:	lsr	r3, r4, #8
 5ec:	uxtb	r3, r3
 5f0:	ldr	r1, [pc, #1016]	; 9f0 <crc32_big+0x4d8>
 5f4:	add	r3, r3, #1280	; 0x500
 5f8:	ldr	r3, [r1, r3, lsl #2]
 5fc:	eor	r2, r2, r3
 600:	lsr	r3, r4, #16
 604:	uxtb	r3, r3
 608:	ldr	r1, [pc, #992]	; 9f0 <crc32_big+0x4d8>
 60c:	add	r3, r3, #1536	; 0x600
 610:	ldr	r3, [r1, r3, lsl #2]
 614:	eor	r2, r2, r3
 618:	lsr	r3, r4, #24
 61c:	ldr	r1, [pc, #972]	; 9f0 <crc32_big+0x4d8>
 620:	add	r3, r3, #1792	; 0x700
 624:	ldr	r3, [r1, r3, lsl #2]
 628:	eor	r4, r2, r3
 62c:	add	r5, r5, #4
 630:	ldr	r3, [r5]
 634:	eor	r4, r4, r3
 638:	uxtb	r3, r4
 63c:	ldr	r2, [pc, #940]	; 9f0 <crc32_big+0x4d8>
 640:	add	r3, r3, #1024	; 0x400
 644:	ldr	r2, [r2, r3, lsl #2]
 648:	lsr	r3, r4, #8
 64c:	uxtb	r3, r3
 650:	ldr	r1, [pc, #920]	; 9f0 <crc32_big+0x4d8>
 654:	add	r3, r3, #1280	; 0x500
 658:	ldr	r3, [r1, r3, lsl #2]
 65c:	eor	r2, r2, r3
 660:	lsr	r3, r4, #16
 664:	uxtb	r3, r3
 668:	ldr	r1, [pc, #896]	; 9f0 <crc32_big+0x4d8>
 66c:	add	r3, r3, #1536	; 0x600
 670:	ldr	r3, [r1, r3, lsl #2]
 674:	eor	r2, r2, r3
 678:	lsr	r3, r4, #24
 67c:	ldr	r1, [pc, #876]	; 9f0 <crc32_big+0x4d8>
 680:	add	r3, r3, #1792	; 0x700
 684:	ldr	r3, [r1, r3, lsl #2]
 688:	eor	r4, r2, r3
 68c:	add	r5, r5, #4
 690:	ldr	r3, [r5]
 694:	eor	r4, r4, r3
 698:	uxtb	r3, r4
 69c:	ldr	r2, [pc, #844]	; 9f0 <crc32_big+0x4d8>
 6a0:	add	r3, r3, #1024	; 0x400
 6a4:	ldr	r2, [r2, r3, lsl #2]
 6a8:	lsr	r3, r4, #8
 6ac:	uxtb	r3, r3
 6b0:	ldr	r1, [pc, #824]	; 9f0 <crc32_big+0x4d8>
 6b4:	add	r3, r3, #1280	; 0x500
 6b8:	ldr	r3, [r1, r3, lsl #2]
 6bc:	eor	r2, r2, r3
 6c0:	lsr	r3, r4, #16
 6c4:	uxtb	r3, r3
 6c8:	ldr	r1, [pc, #800]	; 9f0 <crc32_big+0x4d8>
 6cc:	add	r3, r3, #1536	; 0x600
 6d0:	ldr	r3, [r1, r3, lsl #2]
 6d4:	eor	r2, r2, r3
 6d8:	lsr	r3, r4, #24
 6dc:	ldr	r1, [pc, #780]	; 9f0 <crc32_big+0x4d8>
 6e0:	add	r3, r3, #1792	; 0x700
 6e4:	ldr	r3, [r1, r3, lsl #2]
 6e8:	eor	r4, r2, r3
 6ec:	add	r5, r5, #4
 6f0:	ldr	r3, [r5]
 6f4:	eor	r4, r4, r3
 6f8:	uxtb	r3, r4
 6fc:	ldr	r2, [pc, #748]	; 9f0 <crc32_big+0x4d8>
 700:	add	r3, r3, #1024	; 0x400
 704:	ldr	r2, [r2, r3, lsl #2]
 708:	lsr	r3, r4, #8
 70c:	uxtb	r3, r3
 710:	ldr	r1, [pc, #728]	; 9f0 <crc32_big+0x4d8>
 714:	add	r3, r3, #1280	; 0x500
 718:	ldr	r3, [r1, r3, lsl #2]
 71c:	eor	r2, r2, r3
 720:	lsr	r3, r4, #16
 724:	uxtb	r3, r3
 728:	ldr	r1, [pc, #704]	; 9f0 <crc32_big+0x4d8>
 72c:	add	r3, r3, #1536	; 0x600
 730:	ldr	r3, [r1, r3, lsl #2]
 734:	eor	r2, r2, r3
 738:	lsr	r3, r4, #24
 73c:	ldr	r1, [pc, #684]	; 9f0 <crc32_big+0x4d8>
 740:	add	r3, r3, #1792	; 0x700
 744:	ldr	r3, [r1, r3, lsl #2]
 748:	eor	r4, r2, r3
 74c:	add	r5, r5, #4
 750:	ldr	r3, [r5]
 754:	eor	r4, r4, r3
 758:	uxtb	r3, r4
 75c:	ldr	r2, [pc, #652]	; 9f0 <crc32_big+0x4d8>
 760:	add	r3, r3, #1024	; 0x400
 764:	ldr	r2, [r2, r3, lsl #2]
 768:	lsr	r3, r4, #8
 76c:	uxtb	r3, r3
 770:	ldr	r1, [pc, #632]	; 9f0 <crc32_big+0x4d8>
 774:	add	r3, r3, #1280	; 0x500
 778:	ldr	r3, [r1, r3, lsl #2]
 77c:	eor	r2, r2, r3
 780:	lsr	r3, r4, #16
 784:	uxtb	r3, r3
 788:	ldr	r1, [pc, #608]	; 9f0 <crc32_big+0x4d8>
 78c:	add	r3, r3, #1536	; 0x600
 790:	ldr	r3, [r1, r3, lsl #2]
 794:	eor	r2, r2, r3
 798:	lsr	r3, r4, #24
 79c:	ldr	r1, [pc, #588]	; 9f0 <crc32_big+0x4d8>
 7a0:	add	r3, r3, #1792	; 0x700
 7a4:	ldr	r3, [r1, r3, lsl #2]
 7a8:	eor	r4, r2, r3
 7ac:	add	r5, r5, #4
 7b0:	ldr	r3, [r5]
 7b4:	eor	r4, r4, r3
 7b8:	uxtb	r3, r4
 7bc:	ldr	r2, [pc, #556]	; 9f0 <crc32_big+0x4d8>
 7c0:	add	r3, r3, #1024	; 0x400
 7c4:	ldr	r2, [r2, r3, lsl #2]
 7c8:	lsr	r3, r4, #8
 7cc:	uxtb	r3, r3
 7d0:	ldr	r1, [pc, #536]	; 9f0 <crc32_big+0x4d8>
 7d4:	add	r3, r3, #1280	; 0x500
 7d8:	ldr	r3, [r1, r3, lsl #2]
 7dc:	eor	r2, r2, r3
 7e0:	lsr	r3, r4, #16
 7e4:	uxtb	r3, r3
 7e8:	ldr	r1, [pc, #512]	; 9f0 <crc32_big+0x4d8>
 7ec:	add	r3, r3, #1536	; 0x600
 7f0:	ldr	r3, [r1, r3, lsl #2]
 7f4:	eor	r2, r2, r3
 7f8:	lsr	r3, r4, #24
 7fc:	ldr	r1, [pc, #492]	; 9f0 <crc32_big+0x4d8>
 800:	add	r3, r3, #1792	; 0x700
 804:	ldr	r3, [r1, r3, lsl #2]
 808:	eor	r4, r2, r3
 80c:	add	r5, r5, #4
 810:	ldr	r3, [r5]
 814:	eor	r4, r4, r3
 818:	uxtb	r3, r4
 81c:	ldr	r2, [pc, #460]	; 9f0 <crc32_big+0x4d8>
 820:	add	r3, r3, #1024	; 0x400
 824:	ldr	r2, [r2, r3, lsl #2]
 828:	lsr	r3, r4, #8
 82c:	uxtb	r3, r3
 830:	ldr	r1, [pc, #440]	; 9f0 <crc32_big+0x4d8>
 834:	add	r3, r3, #1280	; 0x500
 838:	ldr	r3, [r1, r3, lsl #2]
 83c:	eor	r2, r2, r3
 840:	lsr	r3, r4, #16
 844:	uxtb	r3, r3
 848:	ldr	r1, [pc, #416]	; 9f0 <crc32_big+0x4d8>
 84c:	add	r3, r3, #1536	; 0x600
 850:	ldr	r3, [r1, r3, lsl #2]
 854:	eor	r2, r2, r3
 858:	lsr	r3, r4, #24
 85c:	ldr	r1, [pc, #396]	; 9f0 <crc32_big+0x4d8>
 860:	add	r3, r3, #1792	; 0x700
 864:	ldr	r3, [r1, r3, lsl #2]
 868:	eor	r4, r2, r3
 86c:	add	r5, r5, #4
 870:	ldr	r3, [r5]
 874:	eor	r4, r4, r3
 878:	uxtb	r3, r4
 87c:	ldr	r2, [pc, #364]	; 9f0 <crc32_big+0x4d8>
 880:	add	r3, r3, #1024	; 0x400
 884:	ldr	r2, [r2, r3, lsl #2]
 888:	lsr	r3, r4, #8
 88c:	uxtb	r3, r3
 890:	ldr	r1, [pc, #344]	; 9f0 <crc32_big+0x4d8>
 894:	add	r3, r3, #1280	; 0x500
 898:	ldr	r3, [r1, r3, lsl #2]
 89c:	eor	r2, r2, r3
 8a0:	lsr	r3, r4, #16
 8a4:	uxtb	r3, r3
 8a8:	ldr	r1, [pc, #320]	; 9f0 <crc32_big+0x4d8>
 8ac:	add	r3, r3, #1536	; 0x600
 8b0:	ldr	r3, [r1, r3, lsl #2]
 8b4:	eor	r2, r2, r3
 8b8:	lsr	r3, r4, #24
 8bc:	ldr	r1, [pc, #300]	; 9f0 <crc32_big+0x4d8>
 8c0:	add	r3, r3, #1792	; 0x700
 8c4:	ldr	r3, [r1, r3, lsl #2]
 8c8:	eor	r4, r2, r3
 8cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
 8d0:	sub	r3, r3, #32
 8d4:	str	r3, [fp, #-24]	; 0xffffffe8
 8d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
 8dc:	cmp	r3, #31
 8e0:	bhi	5cc <crc32_big+0xb4>
 8e4:	b	954 <crc32_big+0x43c>
 8e8:	add	r5, r5, #4
 8ec:	ldr	r3, [r5]
 8f0:	eor	r4, r4, r3
 8f4:	uxtb	r3, r4
 8f8:	ldr	r2, [pc, #240]	; 9f0 <crc32_big+0x4d8>
 8fc:	add	r3, r3, #1024	; 0x400
 900:	ldr	r2, [r2, r3, lsl #2]
 904:	lsr	r3, r4, #8
 908:	uxtb	r3, r3
 90c:	ldr	r1, [pc, #220]	; 9f0 <crc32_big+0x4d8>
 910:	add	r3, r3, #1280	; 0x500
 914:	ldr	r3, [r1, r3, lsl #2]
 918:	eor	r2, r2, r3
 91c:	lsr	r3, r4, #16
 920:	uxtb	r3, r3
 924:	ldr	r1, [pc, #196]	; 9f0 <crc32_big+0x4d8>
 928:	add	r3, r3, #1536	; 0x600
 92c:	ldr	r3, [r1, r3, lsl #2]
 930:	eor	r2, r2, r3
 934:	lsr	r3, r4, #24
 938:	ldr	r1, [pc, #176]	; 9f0 <crc32_big+0x4d8>
 93c:	add	r3, r3, #1792	; 0x700
 940:	ldr	r3, [r1, r3, lsl #2]
 944:	eor	r4, r2, r3
 948:	ldr	r3, [fp, #-24]	; 0xffffffe8
 94c:	sub	r3, r3, #4
 950:	str	r3, [fp, #-24]	; 0xffffffe8
 954:	ldr	r3, [fp, #-24]	; 0xffffffe8
 958:	cmp	r3, #3
 95c:	bhi	8e8 <crc32_big+0x3d0>
 960:	add	r5, r5, #4
 964:	str	r5, [fp, #-20]	; 0xffffffec
 968:	ldr	r3, [fp, #-24]	; 0xffffffe8
 96c:	cmp	r3, #0
 970:	beq	9b8 <crc32_big+0x4a0>
 974:	lsr	r2, r4, #24
 978:	ldr	r3, [fp, #-20]	; 0xffffffec
 97c:	add	r1, r3, #1
 980:	str	r1, [fp, #-20]	; 0xffffffec
 984:	ldrb	r3, [r3]
 988:	eor	r3, r3, r2
 98c:	ldr	r2, [pc, #92]	; 9f0 <crc32_big+0x4d8>
 990:	add	r3, r3, #1024	; 0x400
 994:	ldr	r2, [r2, r3, lsl #2]
 998:	lsl	r3, r4, #8
 99c:	eor	r4, r2, r3
 9a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
 9a4:	sub	r3, r3, #1
 9a8:	str	r3, [fp, #-24]	; 0xffffffe8
 9ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
 9b0:	cmp	r3, #0
 9b4:	bne	974 <crc32_big+0x45c>
 9b8:	mvn	r4, r4
 9bc:	lsr	r2, r4, #24
 9c0:	lsr	r3, r4, #8
 9c4:	and	r3, r3, #65280	; 0xff00
 9c8:	add	r2, r2, r3
 9cc:	lsl	r3, r4, #8
 9d0:	and	r3, r3, #16711680	; 0xff0000
 9d4:	add	r2, r2, r3
 9d8:	lsl	r3, r4, #24
 9dc:	add	r3, r2, r3
 9e0:	mov	r0, r3
 9e4:	sub	sp, fp, #8
 9e8:	pop	{r4, r5, fp}
 9ec:	bx	lr
 9f0:	.word	0x00000000

000009f4 <gf2_matrix_times>:
 9f4:	push	{fp}		; (str fp, [sp, #-4]!)
 9f8:	add	fp, sp, #0
 9fc:	sub	sp, sp, #20
 a00:	str	r0, [fp, #-16]
 a04:	str	r1, [fp, #-20]	; 0xffffffec
 a08:	mov	r3, #0
 a0c:	str	r3, [fp, #-8]
 a10:	b	a50 <gf2_matrix_times+0x5c>
 a14:	ldr	r3, [fp, #-20]	; 0xffffffec
 a18:	and	r3, r3, #1
 a1c:	cmp	r3, #0
 a20:	beq	a38 <gf2_matrix_times+0x44>
 a24:	ldr	r3, [fp, #-16]
 a28:	ldr	r3, [r3]
 a2c:	ldr	r2, [fp, #-8]
 a30:	eor	r3, r3, r2
 a34:	str	r3, [fp, #-8]
 a38:	ldr	r3, [fp, #-20]	; 0xffffffec
 a3c:	lsr	r3, r3, #1
 a40:	str	r3, [fp, #-20]	; 0xffffffec
 a44:	ldr	r3, [fp, #-16]
 a48:	add	r3, r3, #4
 a4c:	str	r3, [fp, #-16]
 a50:	ldr	r3, [fp, #-20]	; 0xffffffec
 a54:	cmp	r3, #0
 a58:	bne	a14 <gf2_matrix_times+0x20>
 a5c:	ldr	r3, [fp, #-8]
 a60:	mov	r0, r3
 a64:	add	sp, fp, #0
 a68:	pop	{fp}		; (ldr fp, [sp], #4)
 a6c:	bx	lr

00000a70 <gf2_matrix_square>:
 a70:	push	{r4, fp, lr}
 a74:	add	fp, sp, #8
 a78:	sub	sp, sp, #20
 a7c:	str	r0, [fp, #-24]	; 0xffffffe8
 a80:	str	r1, [fp, #-28]	; 0xffffffe4
 a84:	mov	r3, #0
 a88:	str	r3, [fp, #-16]
 a8c:	b	ad4 <gf2_matrix_square+0x64>
 a90:	ldr	r3, [fp, #-16]
 a94:	lsl	r3, r3, #2
 a98:	ldr	r2, [fp, #-24]	; 0xffffffe8
 a9c:	add	r4, r2, r3
 aa0:	ldr	r3, [fp, #-16]
 aa4:	lsl	r3, r3, #2
 aa8:	ldr	r2, [fp, #-28]	; 0xffffffe4
 aac:	add	r3, r2, r3
 ab0:	ldr	r3, [r3]
 ab4:	mov	r1, r3
 ab8:	ldr	r0, [fp, #-28]	; 0xffffffe4
 abc:	bl	9f4 <gf2_matrix_times>
 ac0:	mov	r3, r0
 ac4:	str	r3, [r4]
 ac8:	ldr	r3, [fp, #-16]
 acc:	add	r3, r3, #1
 ad0:	str	r3, [fp, #-16]
 ad4:	ldr	r3, [fp, #-16]
 ad8:	cmp	r3, #31
 adc:	ble	a90 <gf2_matrix_square+0x20>
 ae0:	nop			; (mov r0, r0)
 ae4:	sub	sp, fp, #8
 ae8:	pop	{r4, fp, pc}

00000aec <crc32_combine_>:
 aec:	push	{fp, lr}
 af0:	add	fp, sp, #4
 af4:	sub	sp, sp, #280	; 0x118
 af8:	str	r0, [fp, #-272]	; 0xfffffef0
 afc:	str	r1, [fp, #-276]	; 0xfffffeec
 b00:	str	r2, [fp, #-280]	; 0xfffffee8
 b04:	ldr	r3, [fp, #-280]	; 0xfffffee8
 b08:	cmp	r3, #0
 b0c:	bgt	b18 <crc32_combine_+0x2c>
 b10:	ldr	r3, [fp, #-272]	; 0xfffffef0
 b14:	b	c54 <crc32_combine_+0x168>
 b18:	ldr	r3, [pc, #320]	; c60 <crc32_combine_+0x174>
 b1c:	str	r3, [fp, #-268]	; 0xfffffef4
 b20:	mov	r3, #1
 b24:	str	r3, [fp, #-12]
 b28:	mov	r3, #1
 b2c:	str	r3, [fp, #-8]
 b30:	b	b64 <crc32_combine_+0x78>
 b34:	ldr	r3, [fp, #-8]
 b38:	lsl	r3, r3, #2
 b3c:	sub	r2, fp, #4
 b40:	add	r3, r2, r3
 b44:	ldr	r2, [fp, #-12]
 b48:	str	r2, [r3, #-264]	; 0xfffffef8
 b4c:	ldr	r3, [fp, #-12]
 b50:	lsl	r3, r3, #1
 b54:	str	r3, [fp, #-12]
 b58:	ldr	r3, [fp, #-8]
 b5c:	add	r3, r3, #1
 b60:	str	r3, [fp, #-8]
 b64:	ldr	r3, [fp, #-8]
 b68:	cmp	r3, #31
 b6c:	ble	b34 <crc32_combine_+0x48>
 b70:	sub	r2, fp, #268	; 0x10c
 b74:	sub	r3, fp, #140	; 0x8c
 b78:	mov	r1, r2
 b7c:	mov	r0, r3
 b80:	bl	a70 <gf2_matrix_square>
 b84:	sub	r2, fp, #140	; 0x8c
 b88:	sub	r3, fp, #268	; 0x10c
 b8c:	mov	r1, r2
 b90:	mov	r0, r3
 b94:	bl	a70 <gf2_matrix_square>
 b98:	sub	r2, fp, #268	; 0x10c
 b9c:	sub	r3, fp, #140	; 0x8c
 ba0:	mov	r1, r2
 ba4:	mov	r0, r3
 ba8:	bl	a70 <gf2_matrix_square>
 bac:	ldr	r3, [fp, #-280]	; 0xfffffee8
 bb0:	and	r3, r3, #1
 bb4:	cmp	r3, #0
 bb8:	beq	bd0 <crc32_combine_+0xe4>
 bbc:	sub	r3, fp, #140	; 0x8c
 bc0:	ldr	r1, [fp, #-272]	; 0xfffffef0
 bc4:	mov	r0, r3
 bc8:	bl	9f4 <gf2_matrix_times>
 bcc:	str	r0, [fp, #-272]	; 0xfffffef0
 bd0:	ldr	r3, [fp, #-280]	; 0xfffffee8
 bd4:	asr	r3, r3, #1
 bd8:	str	r3, [fp, #-280]	; 0xfffffee8
 bdc:	ldr	r3, [fp, #-280]	; 0xfffffee8
 be0:	cmp	r3, #0
 be4:	beq	c3c <crc32_combine_+0x150>
 be8:	sub	r2, fp, #140	; 0x8c
 bec:	sub	r3, fp, #268	; 0x10c
 bf0:	mov	r1, r2
 bf4:	mov	r0, r3
 bf8:	bl	a70 <gf2_matrix_square>
 bfc:	ldr	r3, [fp, #-280]	; 0xfffffee8
 c00:	and	r3, r3, #1
 c04:	cmp	r3, #0
 c08:	beq	c20 <crc32_combine_+0x134>
 c0c:	sub	r3, fp, #268	; 0x10c
 c10:	ldr	r1, [fp, #-272]	; 0xfffffef0
 c14:	mov	r0, r3
 c18:	bl	9f4 <gf2_matrix_times>
 c1c:	str	r0, [fp, #-272]	; 0xfffffef0
 c20:	ldr	r3, [fp, #-280]	; 0xfffffee8
 c24:	asr	r3, r3, #1
 c28:	str	r3, [fp, #-280]	; 0xfffffee8
 c2c:	ldr	r3, [fp, #-280]	; 0xfffffee8
 c30:	cmp	r3, #0
 c34:	bne	b98 <crc32_combine_+0xac>
 c38:	b	c40 <crc32_combine_+0x154>
 c3c:	nop			; (mov r0, r0)
 c40:	ldr	r2, [fp, #-272]	; 0xfffffef0
 c44:	ldr	r3, [fp, #-276]	; 0xfffffeec
 c48:	eor	r3, r3, r2
 c4c:	str	r3, [fp, #-272]	; 0xfffffef0
 c50:	ldr	r3, [fp, #-272]	; 0xfffffef0
 c54:	mov	r0, r3
 c58:	sub	sp, fp, #4
 c5c:	pop	{fp, pc}
 c60:	.word	0xedb88320

00000c64 <coda_crc32_combine>:
 c64:	push	{fp, lr}
 c68:	add	fp, sp, #4
 c6c:	sub	sp, sp, #16
 c70:	str	r0, [fp, #-8]
 c74:	str	r1, [fp, #-12]
 c78:	str	r2, [fp, #-16]
 c7c:	ldr	r2, [fp, #-16]
 c80:	ldr	r1, [fp, #-12]
 c84:	ldr	r0, [fp, #-8]
 c88:	bl	aec <crc32_combine_>
 c8c:	mov	r3, r0
 c90:	mov	r0, r3
 c94:	sub	sp, fp, #4
 c98:	pop	{fp, pc}

00000c9c <coda_crc32_combine64>:
 c9c:	push	{fp, lr}
 ca0:	add	fp, sp, #4
 ca4:	sub	sp, sp, #16
 ca8:	str	r0, [fp, #-8]
 cac:	str	r1, [fp, #-12]
 cb0:	str	r2, [fp, #-16]
 cb4:	ldr	r2, [fp, #-16]
 cb8:	ldr	r1, [fp, #-12]
 cbc:	ldr	r0, [fp, #-8]
 cc0:	bl	aec <crc32_combine_>
 cc4:	mov	r3, r0
 cc8:	mov	r0, r3
 ccc:	sub	sp, fp, #4
 cd0:	pop	{fp, pc}
