
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-traverse.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_array_dim>:
       0:	str	fp, [sp, #-8]!
       4:	str	lr, [sp, #4]
       8:	add	fp, sp, #4
       c:	sub	sp, sp, #16
      10:	str	r0, [fp, #-16]
      14:	str	r1, [fp, #-20]	; 0xffffffec
      18:	ldr	r2, [fp, #-20]	; 0xffffffec
      1c:	mov	r3, r2
      20:	lsl	r3, r3, #2
      24:	add	r3, r3, r2
      28:	lsl	r3, r3, #4
      2c:	add	r2, r3, #800	; 0x320
      30:	movw	r3, #0
      34:	movt	r3, #0
      38:	add	r3, r2, r3
      3c:	str	r3, [fp, #-12]
      40:	mov	r3, #0
      44:	str	r3, [fp, #-8]
      48:	b	198 <print_array_dim+0x198>
      4c:	ldr	r3, [fp, #-8]
      50:	cmp	r3, #0
      54:	ble	64 <print_array_dim+0x64>
      58:	ldr	r1, [fp, #-16]
      5c:	mov	r0, #44	; 0x2c
      60:	bl	0 <fputc>
      64:	movw	r3, #0
      68:	movt	r3, #0
      6c:	ldr	r3, [r3]
      70:	cmp	r3, #0
      74:	beq	140 <print_array_dim+0x140>
      78:	ldr	r3, [fp, #-12]
      7c:	ldr	r2, [r3]
      80:	ldr	r3, [fp, #-8]
      84:	add	r2, r2, r3
      88:	movw	r3, #0
      8c:	movt	r3, #0
      90:	add	r2, r2, #18
      94:	ldr	r3, [r3, r2, lsl #2]
      98:	cmp	r3, #0
      9c:	beq	104 <print_array_dim+0x104>
      a0:	ldr	r3, [fp, #-12]
      a4:	ldr	r2, [r3]
      a8:	ldr	r3, [fp, #-8]
      ac:	add	r3, r2, r3
      b0:	movw	r2, #0
      b4:	movt	r2, #0
      b8:	add	r3, r3, #8
      bc:	lsl	r3, r3, #2
      c0:	add	r3, r2, r3
      c4:	ldr	r1, [r3, #4]
      c8:	ldr	r3, [fp, #-12]
      cc:	ldr	r2, [r3]
      d0:	ldr	r3, [fp, #-8]
      d4:	add	r3, r2, r3
      d8:	movw	r2, #0
      dc:	movt	r2, #0
      e0:	lsl	r3, r3, #2
      e4:	add	r3, r2, r3
      e8:	ldr	r3, [r3, #4]
      ec:	mov	r2, r1
      f0:	movw	r1, #0
      f4:	movt	r1, #0
      f8:	ldr	r0, [fp, #-16]
      fc:	bl	0 <fprintf>
     100:	b	18c <print_array_dim+0x18c>
     104:	ldr	r3, [fp, #-12]
     108:	ldr	r2, [r3]
     10c:	ldr	r3, [fp, #-8]
     110:	add	r3, r2, r3
     114:	movw	r2, #0
     118:	movt	r2, #0
     11c:	lsl	r3, r3, #2
     120:	add	r3, r2, r3
     124:	ldr	r3, [r3, #4]
     128:	mov	r2, r3
     12c:	movw	r1, #0
     130:	movt	r1, #0
     134:	ldr	r0, [fp, #-16]
     138:	bl	0 <fprintf>
     13c:	b	18c <print_array_dim+0x18c>
     140:	ldr	r3, [fp, #-12]
     144:	ldr	r2, [fp, #-8]
     148:	add	r2, r2, #2
     14c:	ldr	r3, [r3, r2, lsl #2]
     150:	cmn	r3, #1
     154:	bne	168 <print_array_dim+0x168>
     158:	ldr	r1, [fp, #-16]
     15c:	mov	r0, #63	; 0x3f
     160:	bl	0 <fputc>
     164:	b	18c <print_array_dim+0x18c>
     168:	ldr	r3, [fp, #-12]
     16c:	ldr	r2, [fp, #-8]
     170:	add	r2, r2, #2
     174:	ldr	r3, [r3, r2, lsl #2]
     178:	mov	r2, r3
     17c:	movw	r1, #0
     180:	movt	r1, #0
     184:	ldr	r0, [fp, #-16]
     188:	bl	0 <fprintf>
     18c:	ldr	r3, [fp, #-8]
     190:	add	r3, r3, #1
     194:	str	r3, [fp, #-8]
     198:	ldr	r3, [fp, #-12]
     19c:	ldr	r3, [r3, #4]
     1a0:	ldr	r2, [fp, #-8]
     1a4:	cmp	r2, r3
     1a8:	blt	4c <print_array_dim+0x4c>
     1ac:	nop	{0}
     1b0:	sub	sp, fp, #4
     1b4:	ldr	fp, [sp]
     1b8:	add	sp, sp, #4
     1bc:	pop	{pc}		; (ldr pc, [sp], #4)

000001c0 <print_full_field_name>:
     1c0:	str	fp, [sp, #-8]!
     1c4:	str	lr, [sp, #4]
     1c8:	add	fp, sp, #4
     1cc:	sub	sp, sp, #40	; 0x28
     1d0:	str	r0, [fp, #-32]	; 0xffffffe0
     1d4:	str	r1, [fp, #-36]	; 0xffffffdc
     1d8:	str	r2, [fp, #-40]	; 0xffffffd8
     1dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
     1e0:	cmp	r3, #1
     1e4:	bne	37c <print_full_field_name+0x1bc>
     1e8:	mov	r3, #0
     1ec:	str	r3, [fp, #-12]
     1f0:	mov	r3, #0
     1f4:	str	r3, [fp, #-16]
     1f8:	mov	r3, #0
     1fc:	str	r3, [fp, #-8]
     200:	b	318 <print_full_field_name+0x158>
     204:	movw	r3, #0
     208:	movt	r3, #0
     20c:	ldr	r2, [fp, #-8]
     210:	add	r2, r2, #2
     214:	ldr	r3, [r3, r2, lsl #2]
     218:	sub	r2, fp, #24
     21c:	mov	r1, r2
     220:	mov	r0, r3
     224:	bl	0 <coda_type_get_class>
     228:	mov	r3, r0
     22c:	cmp	r3, #0
     230:	beq	238 <print_full_field_name+0x78>
     234:	bl	0 <handle_coda_error>
     238:	ldr	r3, [fp, #-24]	; 0xffffffe8
     23c:	cmp	r3, #0
     240:	beq	250 <print_full_field_name+0x90>
     244:	cmp	r3, #1
     248:	beq	290 <print_full_field_name+0xd0>
     24c:	b	30c <print_full_field_name+0x14c>
     250:	movw	r2, #0
     254:	movt	r2, #0
     258:	ldr	r3, [fp, #-12]
     25c:	add	r3, r3, #904	; 0x388
     260:	lsl	r3, r3, #2
     264:	add	r3, r2, r3
     268:	ldr	r3, [r3, #4]
     26c:	mov	r2, r3
     270:	movw	r1, #0
     274:	movt	r1, #0
     278:	ldr	r0, [fp, #-32]	; 0xffffffe0
     27c:	bl	0 <fprintf>
     280:	ldr	r3, [fp, #-12]
     284:	add	r3, r3, #1
     288:	str	r3, [fp, #-12]
     28c:	b	30c <print_full_field_name+0x14c>
     290:	ldr	r3, [fp, #-8]
     294:	cmp	r3, #0
     298:	bne	2a8 <print_full_field_name+0xe8>
     29c:	ldr	r1, [fp, #-32]	; 0xffffffe0
     2a0:	mov	r0, #47	; 0x2f
     2a4:	bl	0 <fputc>
     2a8:	movw	r2, #0
     2ac:	movt	r2, #0
     2b0:	ldr	r1, [fp, #-16]
     2b4:	mov	r3, r1
     2b8:	lsl	r3, r3, #2
     2bc:	add	r3, r3, r1
     2c0:	lsl	r3, r3, #4
     2c4:	add	r3, r2, r3
     2c8:	add	r3, r3, #804	; 0x324
     2cc:	ldr	r3, [r3]
     2d0:	cmp	r3, #0
     2d4:	ble	2fc <print_full_field_name+0x13c>
     2d8:	ldr	r1, [fp, #-32]	; 0xffffffe0
     2dc:	mov	r0, #91	; 0x5b
     2e0:	bl	0 <fputc>
     2e4:	ldr	r1, [fp, #-16]
     2e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
     2ec:	bl	0 <print_array_dim>
     2f0:	ldr	r1, [fp, #-32]	; 0xffffffe0
     2f4:	mov	r0, #93	; 0x5d
     2f8:	bl	0 <fputc>
     2fc:	ldr	r3, [fp, #-16]
     300:	add	r3, r3, #1
     304:	str	r3, [fp, #-16]
     308:	nop	{0}
     30c:	ldr	r3, [fp, #-8]
     310:	add	r3, r3, #1
     314:	str	r3, [fp, #-8]
     318:	movw	r3, #0
     31c:	movt	r3, #0
     320:	ldr	r3, [r3, #136]	; 0x88
     324:	ldr	r2, [fp, #-8]
     328:	cmp	r2, r3
     32c:	blt	204 <print_full_field_name+0x44>
     330:	ldr	r3, [fp, #-40]	; 0xffffffd8
     334:	cmp	r3, #0
     338:	beq	5bc <print_full_field_name+0x3fc>
     33c:	movw	r3, #0
     340:	movt	r3, #0
     344:	ldr	r3, [r3, #3360]	; 0xd20
     348:	ldr	r2, [fp, #-16]
     34c:	cmp	r2, r3
     350:	bge	5bc <print_full_field_name+0x3fc>
     354:	ldr	r1, [fp, #-32]	; 0xffffffe0
     358:	mov	r0, #91	; 0x5b
     35c:	bl	0 <fputc>
     360:	ldr	r1, [fp, #-16]
     364:	ldr	r0, [fp, #-32]	; 0xffffffe0
     368:	bl	0 <print_array_dim>
     36c:	ldr	r1, [fp, #-32]	; 0xffffffe0
     370:	mov	r0, #93	; 0x5d
     374:	bl	0 <fputc>
     378:	b	5bc <print_full_field_name+0x3fc>
     37c:	mov	r3, #0
     380:	str	r3, [fp, #-8]
     384:	b	3d4 <print_full_field_name+0x214>
     388:	ldr	r3, [fp, #-8]
     38c:	cmp	r3, #0
     390:	ble	3a0 <print_full_field_name+0x1e0>
     394:	ldr	r1, [fp, #-32]	; 0xffffffe0
     398:	mov	r0, #46	; 0x2e
     39c:	bl	0 <fputc>
     3a0:	movw	r2, #0
     3a4:	movt	r2, #0
     3a8:	ldr	r3, [fp, #-8]
     3ac:	add	r3, r3, #904	; 0x388
     3b0:	lsl	r3, r3, #2
     3b4:	add	r3, r2, r3
     3b8:	ldr	r3, [r3, #4]
     3bc:	ldr	r1, [fp, #-32]	; 0xffffffe0
     3c0:	mov	r0, r3
     3c4:	bl	0 <fputs>
     3c8:	ldr	r3, [fp, #-8]
     3cc:	add	r3, r3, #1
     3d0:	str	r3, [fp, #-8]
     3d4:	movw	r3, #0
     3d8:	movt	r3, #0
     3dc:	ldr	r3, [r3, #3748]	; 0xea4
     3e0:	ldr	r2, [fp, #-8]
     3e4:	cmp	r2, r3
     3e8:	blt	388 <print_full_field_name+0x1c8>
     3ec:	ldr	r3, [fp, #-36]	; 0xffffffdc
     3f0:	cmp	r3, #2
     3f4:	bne	5bc <print_full_field_name+0x3fc>
     3f8:	mov	r3, #0
     3fc:	str	r3, [fp, #-20]	; 0xffffffec
     400:	mov	r3, #0
     404:	str	r3, [fp, #-8]
     408:	b	4f8 <print_full_field_name+0x338>
     40c:	movw	r3, #0
     410:	movt	r3, #0
     414:	ldr	r2, [fp, #-8]
     418:	add	r2, r2, #2
     41c:	ldr	r3, [r3, r2, lsl #2]
     420:	sub	r2, fp, #28
     424:	mov	r1, r2
     428:	mov	r0, r3
     42c:	bl	0 <coda_type_get_class>
     430:	mov	r3, r0
     434:	cmp	r3, #0
     438:	beq	440 <print_full_field_name+0x280>
     43c:	bl	0 <handle_coda_error>
     440:	ldr	r3, [fp, #-28]	; 0xffffffe4
     444:	cmp	r3, #1
     448:	bne	4ec <print_full_field_name+0x32c>
     44c:	movw	r2, #0
     450:	movt	r2, #0
     454:	ldr	r1, [fp, #-20]	; 0xffffffec
     458:	mov	r3, r1
     45c:	lsl	r3, r3, #2
     460:	add	r3, r3, r1
     464:	lsl	r3, r3, #4
     468:	add	r3, r2, r3
     46c:	add	r3, r3, #804	; 0x324
     470:	ldr	r3, [r3]
     474:	cmp	r3, #0
     478:	ble	4ec <print_full_field_name+0x32c>
     47c:	movw	r2, #0
     480:	movt	r2, #0
     484:	ldr	r1, [fp, #-20]	; 0xffffffec
     488:	mov	r3, r1
     48c:	lsl	r3, r3, #2
     490:	add	r3, r3, r1
     494:	lsl	r3, r3, #4
     498:	add	r3, r2, r3
     49c:	add	r3, r3, #800	; 0x320
     4a0:	ldr	r3, [r3]
     4a4:	cmp	r3, #0
     4a8:	bne	4c8 <print_full_field_name+0x308>
     4ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
     4b0:	mov	r2, #2
     4b4:	mov	r1, #1
     4b8:	movw	r0, #0
     4bc:	movt	r0, #0
     4c0:	bl	0 <fwrite>
     4c4:	b	4d4 <print_full_field_name+0x314>
     4c8:	ldr	r1, [fp, #-32]	; 0xffffffe0
     4cc:	mov	r0, #44	; 0x2c
     4d0:	bl	0 <fputc>
     4d4:	ldr	r1, [fp, #-20]	; 0xffffffec
     4d8:	ldr	r0, [fp, #-32]	; 0xffffffe0
     4dc:	bl	0 <print_array_dim>
     4e0:	ldr	r3, [fp, #-20]	; 0xffffffec
     4e4:	add	r3, r3, #1
     4e8:	str	r3, [fp, #-20]	; 0xffffffec
     4ec:	ldr	r3, [fp, #-8]
     4f0:	add	r3, r3, #1
     4f4:	str	r3, [fp, #-8]
     4f8:	movw	r3, #0
     4fc:	movt	r3, #0
     500:	ldr	r3, [r3, #136]	; 0x88
     504:	ldr	r2, [fp, #-8]
     508:	cmp	r2, r3
     50c:	blt	40c <print_full_field_name+0x24c>
     510:	ldr	r3, [fp, #-40]	; 0xffffffd8
     514:	cmp	r3, #0
     518:	beq	5a4 <print_full_field_name+0x3e4>
     51c:	movw	r3, #0
     520:	movt	r3, #0
     524:	ldr	r3, [r3, #3360]	; 0xd20
     528:	ldr	r2, [fp, #-20]	; 0xffffffec
     52c:	cmp	r2, r3
     530:	bge	5a4 <print_full_field_name+0x3e4>
     534:	movw	r2, #0
     538:	movt	r2, #0
     53c:	ldr	r1, [fp, #-20]	; 0xffffffec
     540:	mov	r3, r1
     544:	lsl	r3, r3, #2
     548:	add	r3, r3, r1
     54c:	lsl	r3, r3, #4
     550:	add	r3, r2, r3
     554:	add	r3, r3, #800	; 0x320
     558:	ldr	r3, [r3]
     55c:	cmp	r3, #0
     560:	bne	580 <print_full_field_name+0x3c0>
     564:	ldr	r3, [fp, #-32]	; 0xffffffe0
     568:	mov	r2, #2
     56c:	mov	r1, #1
     570:	movw	r0, #0
     574:	movt	r0, #0
     578:	bl	0 <fwrite>
     57c:	b	58c <print_full_field_name+0x3cc>
     580:	ldr	r1, [fp, #-32]	; 0xffffffe0
     584:	mov	r0, #44	; 0x2c
     588:	bl	0 <fputc>
     58c:	ldr	r1, [fp, #-20]	; 0xffffffec
     590:	ldr	r0, [fp, #-32]	; 0xffffffe0
     594:	bl	0 <print_array_dim>
     598:	ldr	r3, [fp, #-20]	; 0xffffffec
     59c:	add	r3, r3, #1
     5a0:	str	r3, [fp, #-20]	; 0xffffffec
     5a4:	ldr	r3, [fp, #-20]	; 0xffffffec
     5a8:	cmp	r3, #0
     5ac:	ble	5bc <print_full_field_name+0x3fc>
     5b0:	ldr	r1, [fp, #-32]	; 0xffffffe0
     5b4:	mov	r0, #93	; 0x5d
     5b8:	bl	0 <fputc>
     5bc:	nop	{0}
     5c0:	sub	sp, fp, #4
     5c4:	ldr	fp, [sp]
     5c8:	add	sp, sp, #4
     5cc:	pop	{pc}		; (ldr pc, [sp], #4)

000005d0 <traverse_info_init>:
     5d0:	push	{fp}		; (str fp, [sp, #-4]!)
     5d4:	add	fp, sp, #0
     5d8:	movw	r3, #0
     5dc:	movt	r3, #0
     5e0:	mov	r2, #0
     5e4:	str	r2, [r3, #4]
     5e8:	movw	r3, #0
     5ec:	movt	r3, #0
     5f0:	mov	r2, #0
     5f4:	str	r2, [r3, #136]	; 0x88
     5f8:	movw	r3, #0
     5fc:	movt	r3, #0
     600:	mov	r2, #0
     604:	str	r2, [r3, #3360]	; 0xd20
     608:	movw	r3, #0
     60c:	movt	r3, #0
     610:	mov	r2, #0
     614:	str	r2, [r3, #3748]	; 0xea4
     618:	nop	{0}
     61c:	add	sp, fp, #0
     620:	pop	{fp}		; (ldr fp, [sp], #4)
     624:	bx	lr

00000628 <traverse_info_done>:
     628:	str	fp, [sp, #-8]!
     62c:	str	lr, [sp, #4]
     630:	add	fp, sp, #4
     634:	movw	r3, #0
     638:	movt	r3, #0
     63c:	ldr	r3, [r3, #4]
     640:	cmp	r3, #0
     644:	beq	65c <traverse_info_done+0x34>
     648:	movw	r3, #0
     64c:	movt	r3, #0
     650:	ldr	r3, [r3, #4]
     654:	mov	r0, r3
     658:	bl	0 <coda_close>
     65c:	movw	r3, #0
     660:	movt	r3, #0
     664:	ldr	r3, [r3, #664]	; 0x298
     668:	cmp	r3, #0
     66c:	beq	678 <traverse_info_done+0x50>
     670:	ldr	r0, [pc, #20]	; 68c <traverse_info_done+0x64>
     674:	bl	0 <codadump_filter_remove>
     678:	nop	{0}
     67c:	sub	sp, fp, #4
     680:	ldr	fp, [sp]
     684:	add	sp, sp, #4
     688:	pop	{pc}		; (ldr pc, [sp], #4)
     68c:	.word	0x00000298

00000690 <handle_data_element>:
     690:	str	fp, [sp, #-8]!
     694:	str	lr, [sp, #4]
     698:	add	fp, sp, #4
     69c:	sub	sp, sp, #24
     6a0:	movw	r3, #0
     6a4:	movt	r3, #0
     6a8:	ldr	r3, [r3]
     6ac:	cmp	r3, #0
     6b0:	bne	9c4 <handle_data_element+0x334>
     6b4:	movw	r3, #0
     6b8:	movt	r3, #0
     6bc:	ldr	r3, [r3]
     6c0:	mov	r2, #0
     6c4:	mov	r1, #1
     6c8:	mov	r0, r3
     6cc:	bl	1c0 <print_full_field_name>
     6d0:	movw	r3, #0
     6d4:	movt	r3, #0
     6d8:	ldr	r3, [r3]
     6dc:	cmp	r3, #0
     6e0:	beq	86c <handle_data_element+0x1dc>
     6e4:	movw	r3, #0
     6e8:	movt	r3, #0
     6ec:	ldr	r2, [r3, #136]	; 0x88
     6f0:	movw	r3, #0
     6f4:	movt	r3, #0
     6f8:	add	r2, r2, #2
     6fc:	ldr	r3, [r3, r2, lsl #2]
     700:	sub	r2, fp, #12
     704:	mov	r1, r2
     708:	mov	r0, r3
     70c:	bl	0 <coda_type_get_class>
     710:	mov	r3, r0
     714:	cmp	r3, #0
     718:	beq	720 <handle_data_element+0x90>
     71c:	bl	0 <handle_coda_error>
     720:	ldr	r3, [fp, #-12]
     724:	cmp	r3, #6
     728:	bne	78c <handle_data_element+0xfc>
     72c:	movw	r3, #0
     730:	movt	r3, #0
     734:	ldr	r2, [r3, #136]	; 0x88
     738:	movw	r3, #0
     73c:	movt	r3, #0
     740:	add	r2, r2, #2
     744:	ldr	r3, [r3, r2, lsl #2]
     748:	sub	r2, fp, #16
     74c:	mov	r1, r2
     750:	mov	r0, r3
     754:	bl	0 <coda_type_get_special_type>
     758:	mov	r3, r0
     75c:	cmp	r3, #0
     760:	beq	768 <handle_data_element+0xd8>
     764:	bl	0 <handle_coda_error>
     768:	ldr	r3, [fp, #-16]
     76c:	mov	r0, r3
     770:	bl	0 <coda_type_get_special_type_name>
     774:	mov	r3, r0
     778:	mov	r1, r3
     77c:	movw	r0, #0
     780:	movt	r0, #0
     784:	bl	0 <printf>
     788:	b	86c <handle_data_element+0x1dc>
     78c:	movw	r3, #0
     790:	movt	r3, #0
     794:	ldr	r2, [r3, #136]	; 0x88
     798:	movw	r3, #0
     79c:	movt	r3, #0
     7a0:	add	r2, r2, #2
     7a4:	ldr	r3, [r3, r2, lsl #2]
     7a8:	sub	r2, fp, #20
     7ac:	mov	r1, r2
     7b0:	mov	r0, r3
     7b4:	bl	0 <coda_type_get_read_type>
     7b8:	mov	r3, r0
     7bc:	cmp	r3, #0
     7c0:	beq	7c8 <handle_data_element+0x138>
     7c4:	bl	0 <handle_coda_error>
     7c8:	ldr	r3, [fp, #-20]	; 0xffffffec
     7cc:	mov	r0, r3
     7d0:	bl	0 <coda_type_get_native_type_name>
     7d4:	mov	r3, r0
     7d8:	mov	r1, r3
     7dc:	movw	r0, #0
     7e0:	movt	r0, #0
     7e4:	bl	0 <printf>
     7e8:	ldr	r3, [fp, #-20]	; 0xffffffec
     7ec:	cmp	r3, #11
     7f0:	beq	800 <handle_data_element+0x170>
     7f4:	ldr	r3, [fp, #-20]	; 0xffffffec
     7f8:	cmp	r3, #12
     7fc:	bne	86c <handle_data_element+0x1dc>
     800:	mov	r0, #40	; 0x28
     804:	bl	0 <putchar>
     808:	movw	r3, #0
     80c:	movt	r3, #0
     810:	ldr	r3, [r3, #3360]	; 0xd20
     814:	cmp	r3, #0
     818:	bgt	83c <handle_data_element+0x1ac>
     81c:	movw	r3, #0
     820:	movt	r3, #0
     824:	mov	r2, #238	; 0xee
     828:	movw	r1, #0
     82c:	movt	r1, #0
     830:	movw	r0, #0
     834:	movt	r0, #0
     838:	bl	0 <__assert_fail>
     83c:	movw	r3, #0
     840:	movt	r3, #0
     844:	ldr	r2, [r3]
     848:	movw	r3, #0
     84c:	movt	r3, #0
     850:	ldr	r3, [r3, #3360]	; 0xd20
     854:	sub	r3, r3, #1
     858:	mov	r1, r3
     85c:	mov	r0, r2
     860:	bl	0 <print_array_dim>
     864:	mov	r0, #41	; 0x29
     868:	bl	0 <putchar>
     86c:	movw	r3, #0
     870:	movt	r3, #0
     874:	ldr	r3, [r3]
     878:	cmp	r3, #0
     87c:	beq	8ec <handle_data_element+0x25c>
     880:	movw	r3, #0
     884:	movt	r3, #0
     888:	ldr	r2, [r3, #136]	; 0x88
     88c:	movw	r3, #0
     890:	movt	r3, #0
     894:	add	r2, r2, #2
     898:	ldr	r3, [r3, r2, lsl #2]
     89c:	sub	r2, fp, #24
     8a0:	mov	r1, r2
     8a4:	mov	r0, r3
     8a8:	bl	0 <coda_type_get_unit>
     8ac:	mov	r3, r0
     8b0:	cmp	r3, #0
     8b4:	beq	8bc <handle_data_element+0x22c>
     8b8:	bl	0 <handle_coda_error>
     8bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     8c0:	cmp	r3, #0
     8c4:	beq	8ec <handle_data_element+0x25c>
     8c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     8cc:	ldrb	r3, [r3]
     8d0:	cmp	r3, #0
     8d4:	beq	8ec <handle_data_element+0x25c>
     8d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     8dc:	mov	r1, r3
     8e0:	movw	r0, #0
     8e4:	movt	r0, #0
     8e8:	bl	0 <printf>
     8ec:	movw	r3, #0
     8f0:	movt	r3, #0
     8f4:	ldr	r3, [r3]
     8f8:	cmp	r3, #0
     8fc:	beq	96c <handle_data_element+0x2dc>
     900:	movw	r3, #0
     904:	movt	r3, #0
     908:	ldr	r2, [r3, #136]	; 0x88
     90c:	movw	r3, #0
     910:	movt	r3, #0
     914:	add	r2, r2, #2
     918:	ldr	r3, [r3, r2, lsl #2]
     91c:	sub	r2, fp, #28
     920:	mov	r1, r2
     924:	mov	r0, r3
     928:	bl	0 <coda_type_get_description>
     92c:	mov	r3, r0
     930:	cmp	r3, #0
     934:	beq	93c <handle_data_element+0x2ac>
     938:	bl	0 <handle_coda_error>
     93c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     940:	cmp	r3, #0
     944:	beq	96c <handle_data_element+0x2dc>
     948:	ldr	r3, [fp, #-28]	; 0xffffffe4
     94c:	ldrb	r3, [r3]
     950:	cmp	r3, #0
     954:	beq	96c <handle_data_element+0x2dc>
     958:	ldr	r3, [fp, #-28]	; 0xffffffe4
     95c:	mov	r1, r3
     960:	movw	r0, #0
     964:	movt	r0, #0
     968:	bl	0 <printf>
     96c:	mov	r0, #10
     970:	bl	0 <putchar>
     974:	movw	r3, #0
     978:	movt	r3, #0
     97c:	ldr	r3, [r3]
     980:	cmp	r3, #0
     984:	beq	9dc <handle_data_element+0x34c>
     988:	mov	r3, #0
     98c:	str	r3, [fp, #-8]
     990:	b	9a8 <handle_data_element+0x318>
     994:	ldr	r0, [fp, #-8]
     998:	bl	0 <print_all_distinct_dims>
     99c:	ldr	r3, [fp, #-8]
     9a0:	add	r3, r3, #1
     9a4:	str	r3, [fp, #-8]
     9a8:	movw	r3, #0
     9ac:	movt	r3, #0
     9b0:	ldr	r3, [r3]
     9b4:	ldr	r2, [fp, #-8]
     9b8:	cmp	r2, r3
     9bc:	blt	994 <handle_data_element+0x304>
     9c0:	b	9dc <handle_data_element+0x34c>
     9c4:	movw	r3, #0
     9c8:	movt	r3, #0
     9cc:	ldr	r3, [r3]
     9d0:	cmp	r3, #1
     9d4:	bne	9dc <handle_data_element+0x34c>
     9d8:	bl	0 <export_data_element_to_ascii>
     9dc:	nop	{0}
     9e0:	sub	sp, fp, #4
     9e4:	ldr	fp, [sp]
     9e8:	add	sp, sp, #4
     9ec:	pop	{pc}		; (ldr pc, [sp], #4)

000009f0 <traverse_record>:
     9f0:	str	fp, [sp, #-8]!
     9f4:	str	lr, [sp, #4]
     9f8:	add	fp, sp, #4
     9fc:	sub	sp, sp, #16
     a00:	str	r0, [fp, #-16]
     a04:	str	r1, [fp, #-20]	; 0xffffffec
     a08:	movw	r3, #0
     a0c:	movt	r3, #0
     a10:	ldr	r3, [r3, #3748]	; 0xea4
     a14:	sub	r3, r3, #1
     a18:	movw	r2, #0
     a1c:	movt	r2, #0
     a20:	add	r3, r3, #872	; 0x368
     a24:	lsl	r3, r3, #2
     a28:	add	r3, r2, r3
     a2c:	ldr	r2, [fp, #-16]
     a30:	str	r2, [r3, #4]
     a34:	movw	r3, #0
     a38:	movt	r3, #0
     a3c:	ldr	r3, [r3, #136]	; 0x88
     a40:	sub	r2, r3, #1
     a44:	movw	r3, #0
     a48:	movt	r3, #0
     a4c:	add	r2, r2, #2
     a50:	ldr	r3, [r3, r2, lsl #2]
     a54:	sub	r2, fp, #8
     a58:	ldr	r1, [fp, #-16]
     a5c:	mov	r0, r3
     a60:	bl	0 <coda_type_get_record_field_hidden_status>
     a64:	mov	r3, r0
     a68:	cmp	r3, #0
     a6c:	beq	a74 <traverse_record+0x84>
     a70:	bl	0 <handle_coda_error>
     a74:	ldr	r3, [fp, #-8]
     a78:	cmp	r3, #0
     a7c:	beq	a8c <traverse_record+0x9c>
     a80:	ldr	r3, [fp, #-20]	; 0xffffffec
     a84:	cmp	r3, #0
     a88:	beq	bf0 <traverse_record+0x200>
     a8c:	movw	r3, #0
     a90:	movt	r3, #0
     a94:	ldr	r3, [r3]
     a98:	cmp	r3, #0
     a9c:	beq	b28 <traverse_record+0x138>
     aa0:	movw	r3, #0
     aa4:	movt	r3, #0
     aa8:	ldr	r3, [r3, #136]	; 0x88
     aac:	sub	r2, r3, #1
     ab0:	movw	r3, #0
     ab4:	movt	r3, #0
     ab8:	add	r2, r2, #2
     abc:	ldr	r3, [r3, r2, lsl #2]
     ac0:	sub	r2, fp, #12
     ac4:	ldr	r1, [fp, #-16]
     ac8:	mov	r0, r3
     acc:	bl	0 <coda_type_get_record_field_available_status>
     ad0:	mov	r3, r0
     ad4:	cmp	r3, #0
     ad8:	beq	ae0 <traverse_record+0xf0>
     adc:	bl	0 <handle_coda_error>
     ae0:	ldr	r3, [fp, #-12]
     ae4:	cmn	r3, #1
     ae8:	bne	afc <traverse_record+0x10c>
     aec:	bl	0 <dim_record_field_available>
     af0:	mov	r3, r0
     af4:	cmp	r3, #0
     af8:	beq	bf8 <traverse_record+0x208>
     afc:	movw	r3, #0
     b00:	movt	r3, #0
     b04:	ldr	r3, [r3, #136]	; 0x88
     b08:	sub	r3, r3, #1
     b0c:	ldr	r1, [fp, #-12]
     b10:	movw	r2, #0
     b14:	movt	r2, #0
     b18:	add	r3, r3, #840	; 0x348
     b1c:	lsl	r3, r3, #2
     b20:	add	r3, r2, r3
     b24:	str	r1, [r3, #4]
     b28:	movw	r3, #0
     b2c:	movt	r3, #0
     b30:	ldr	r3, [r3, #136]	; 0x88
     b34:	sub	r2, r3, #1
     b38:	movw	r3, #0
     b3c:	movt	r3, #0
     b40:	add	r2, r2, #2
     b44:	ldr	r0, [r3, r2, lsl #2]
     b48:	movw	r3, #0
     b4c:	movt	r3, #0
     b50:	ldr	r3, [r3, #3748]	; 0xea4
     b54:	sub	r3, r3, #1
     b58:	add	r3, r3, #904	; 0x388
     b5c:	lsl	r2, r3, #2
     b60:	movw	r3, #0
     b64:	movt	r3, #0
     b68:	add	r3, r2, r3
     b6c:	add	r3, r3, #4
     b70:	mov	r2, r3
     b74:	ldr	r1, [fp, #-16]
     b78:	bl	0 <coda_type_get_record_field_name>
     b7c:	mov	r3, r0
     b80:	cmp	r3, #0
     b84:	beq	b8c <traverse_record+0x19c>
     b88:	bl	0 <handle_coda_error>
     b8c:	movw	r3, #0
     b90:	movt	r3, #0
     b94:	ldr	r3, [r3, #136]	; 0x88
     b98:	sub	r2, r3, #1
     b9c:	movw	r3, #0
     ba0:	movt	r3, #0
     ba4:	add	r2, r2, #2
     ba8:	ldr	r0, [r3, r2, lsl #2]
     bac:	movw	r3, #0
     bb0:	movt	r3, #0
     bb4:	ldr	r3, [r3, #136]	; 0x88
     bb8:	add	r3, r3, #2
     bbc:	lsl	r2, r3, #2
     bc0:	movw	r3, #0
     bc4:	movt	r3, #0
     bc8:	add	r3, r2, r3
     bcc:	mov	r2, r3
     bd0:	ldr	r1, [fp, #-16]
     bd4:	bl	0 <coda_type_get_record_field_type>
     bd8:	mov	r3, r0
     bdc:	cmp	r3, #0
     be0:	beq	be8 <traverse_record+0x1f8>
     be4:	bl	0 <handle_coda_error>
     be8:	bl	c0c <traverse_data>
     bec:	b	bfc <traverse_record+0x20c>
     bf0:	nop	{0}
     bf4:	b	bfc <traverse_record+0x20c>
     bf8:	nop	{0}
     bfc:	sub	sp, fp, #4
     c00:	ldr	fp, [sp]
     c04:	add	sp, sp, #4
     c08:	pop	{pc}		; (ldr pc, [sp], #4)

00000c0c <traverse_data>:
     c0c:	str	r4, [sp, #-12]!
     c10:	str	fp, [sp, #4]
     c14:	str	lr, [sp, #8]
     c18:	add	fp, sp, #8
     c1c:	sub	sp, sp, #36	; 0x24
     c20:	movw	r3, #0
     c24:	movt	r3, #0
     c28:	ldr	r2, [r3, #136]	; 0x88
     c2c:	movw	r3, #0
     c30:	movt	r3, #0
     c34:	add	r2, r2, #2
     c38:	ldr	r3, [r3, r2, lsl #2]
     c3c:	sub	r2, fp, #24
     c40:	mov	r1, r2
     c44:	mov	r0, r3
     c48:	bl	0 <coda_type_get_class>
     c4c:	mov	r3, r0
     c50:	cmp	r3, #0
     c54:	beq	c5c <traverse_data+0x50>
     c58:	bl	0 <handle_coda_error>
     c5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c60:	cmp	r3, #6
     c64:	ldrls	pc, [pc, r3, lsl #2]
     c68:	b	1278 <traverse_data+0x66c>
     c6c:	.word	0x00000c88
     c70:	.word	0x00000fb8
     c74:	.word	0x000010a4
     c78:	.word	0x000010a4
     c7c:	.word	0x000010a4
     c80:	.word	0x000010a4
     c84:	.word	0x00001144
     c88:	movw	r3, #0
     c8c:	movt	r3, #0
     c90:	ldr	r3, [r3, #136]	; 0x88
     c94:	cmp	r3, #30
     c98:	bgt	1264 <traverse_data+0x658>
     c9c:	movw	r3, #0
     ca0:	movt	r3, #0
     ca4:	ldr	r3, [r3, #3748]	; 0xea4
     ca8:	add	r2, r3, #1
     cac:	movw	r3, #0
     cb0:	movt	r3, #0
     cb4:	str	r2, [r3, #3748]	; 0xea4
     cb8:	movw	r3, #0
     cbc:	movt	r3, #0
     cc0:	ldr	r2, [r3, #136]	; 0x88
     cc4:	movw	r3, #0
     cc8:	movt	r3, #0
     ccc:	add	r2, r2, #2
     cd0:	ldr	r3, [r3, r2, lsl #2]
     cd4:	sub	r2, fp, #28
     cd8:	mov	r1, r2
     cdc:	mov	r0, r3
     ce0:	bl	0 <coda_type_get_num_record_fields>
     ce4:	mov	r3, r0
     ce8:	cmp	r3, #0
     cec:	beq	cf4 <traverse_data+0xe8>
     cf0:	bl	0 <handle_coda_error>
     cf4:	movw	r3, #0
     cf8:	movt	r3, #0
     cfc:	ldr	r3, [r3, #136]	; 0x88
     d00:	add	r2, r3, #1
     d04:	movw	r3, #0
     d08:	movt	r3, #0
     d0c:	str	r2, [r3, #136]	; 0x88
     d10:	movw	r3, #0
     d14:	movt	r3, #0
     d18:	ldr	r2, [r3, #796]	; 0x31c
     d1c:	movw	r3, #0
     d20:	movt	r3, #0
     d24:	add	r2, r2, #166	; 0xa6
     d28:	ldr	r3, [r3, r2, lsl #2]
     d2c:	cmp	r3, #0
     d30:	beq	f44 <traverse_data+0x338>
     d34:	movw	r3, #0
     d38:	movt	r3, #0
     d3c:	ldr	r2, [r3, #796]	; 0x31c
     d40:	movw	r3, #0
     d44:	movt	r3, #0
     d48:	add	r2, r2, #166	; 0xa6
     d4c:	ldr	r3, [r3, r2, lsl #2]
     d50:	str	r3, [fp, #-16]
     d54:	b	efc <traverse_data+0x2f0>
     d58:	movw	r3, #0
     d5c:	movt	r3, #0
     d60:	ldr	r2, [r3, #796]	; 0x31c
     d64:	movw	r3, #0
     d68:	movt	r3, #0
     d6c:	add	r2, r2, #166	; 0xa6
     d70:	ldr	r3, [r3, r2, lsl #2]
     d74:	mov	r0, r3
     d78:	bl	0 <codadump_filter_get_fieldname>
     d7c:	str	r0, [fp, #-20]	; 0xffffffec
     d80:	ldr	r3, [fp, #-20]	; 0xffffffec
     d84:	cmp	r3, #0
     d88:	bne	dac <traverse_data+0x1a0>
     d8c:	movw	r3, #0
     d90:	movt	r3, #0
     d94:	movw	r2, #393	; 0x189
     d98:	movw	r1, #0
     d9c:	movt	r1, #0
     da0:	movw	r0, #0
     da4:	movt	r0, #0
     da8:	bl	0 <__assert_fail>
     dac:	movw	r3, #0
     db0:	movt	r3, #0
     db4:	ldr	r3, [r3, #136]	; 0x88
     db8:	sub	r2, r3, #1
     dbc:	movw	r3, #0
     dc0:	movt	r3, #0
     dc4:	add	r2, r2, #2
     dc8:	ldr	r3, [r3, r2, lsl #2]
     dcc:	sub	r2, fp, #32
     dd0:	ldr	r1, [fp, #-20]	; 0xffffffec
     dd4:	mov	r0, r3
     dd8:	bl	0 <coda_type_get_record_field_index_from_name>
     ddc:	mov	r3, r0
     de0:	cmp	r3, #0
     de4:	beq	e28 <traverse_data+0x21c>
     de8:	bl	0 <coda_get_errno>
     dec:	mov	r3, r0
     df0:	ldr	r3, [r3]
     df4:	cmn	r3, #102	; 0x66
     df8:	bne	e24 <traverse_data+0x218>
     dfc:	movw	r3, #0
     e00:	movt	r3, #0
     e04:	ldr	r3, [r3]
     e08:	ldr	r2, [fp, #-20]	; 0xffffffec
     e0c:	movw	r1, #0
     e10:	movt	r1, #0
     e14:	mov	r0, r3
     e18:	bl	0 <fprintf>
     e1c:	mov	r0, #1
     e20:	bl	0 <exit>
     e24:	bl	0 <handle_coda_error>
     e28:	movw	r3, #0
     e2c:	movt	r3, #0
     e30:	ldr	r2, [r3, #796]	; 0x31c
     e34:	movw	r3, #0
     e38:	movt	r3, #0
     e3c:	add	r2, r2, #166	; 0xa6
     e40:	ldr	r2, [r3, r2, lsl #2]
     e44:	movw	r3, #0
     e48:	movt	r3, #0
     e4c:	ldr	r3, [r3, #796]	; 0x31c
     e50:	add	r4, r3, #1
     e54:	mov	r0, r2
     e58:	bl	0 <codadump_filter_get_subfilter>
     e5c:	mov	r1, r0
     e60:	movw	r3, #0
     e64:	movt	r3, #0
     e68:	add	r2, r4, #166	; 0xa6
     e6c:	str	r1, [r3, r2, lsl #2]
     e70:	movw	r3, #0
     e74:	movt	r3, #0
     e78:	ldr	r3, [r3, #796]	; 0x31c
     e7c:	add	r2, r3, #1
     e80:	movw	r3, #0
     e84:	movt	r3, #0
     e88:	str	r2, [r3, #796]	; 0x31c
     e8c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     e90:	mov	r1, #1
     e94:	mov	r0, r3
     e98:	bl	9f0 <traverse_record>
     e9c:	movw	r3, #0
     ea0:	movt	r3, #0
     ea4:	ldr	r3, [r3, #796]	; 0x31c
     ea8:	sub	r2, r3, #1
     eac:	movw	r3, #0
     eb0:	movt	r3, #0
     eb4:	str	r2, [r3, #796]	; 0x31c
     eb8:	movw	r3, #0
     ebc:	movt	r3, #0
     ec0:	ldr	r2, [r3, #796]	; 0x31c
     ec4:	movw	r3, #0
     ec8:	movt	r3, #0
     ecc:	add	r2, r2, #166	; 0xa6
     ed0:	ldr	r2, [r3, r2, lsl #2]
     ed4:	movw	r3, #0
     ed8:	movt	r3, #0
     edc:	ldr	r4, [r3, #796]	; 0x31c
     ee0:	mov	r0, r2
     ee4:	bl	0 <codadump_filter_get_next_filter>
     ee8:	mov	r1, r0
     eec:	movw	r3, #0
     ef0:	movt	r3, #0
     ef4:	add	r2, r4, #166	; 0xa6
     ef8:	str	r1, [r3, r2, lsl #2]
     efc:	movw	r3, #0
     f00:	movt	r3, #0
     f04:	ldr	r2, [r3, #796]	; 0x31c
     f08:	movw	r3, #0
     f0c:	movt	r3, #0
     f10:	add	r2, r2, #166	; 0xa6
     f14:	ldr	r3, [r3, r2, lsl #2]
     f18:	cmp	r3, #0
     f1c:	bne	d58 <traverse_data+0x14c>
     f20:	movw	r3, #0
     f24:	movt	r3, #0
     f28:	ldr	r2, [r3, #796]	; 0x31c
     f2c:	movw	r3, #0
     f30:	movt	r3, #0
     f34:	add	r2, r2, #166	; 0xa6
     f38:	ldr	r1, [fp, #-16]
     f3c:	str	r1, [r3, r2, lsl #2]
     f40:	b	f7c <traverse_data+0x370>
     f44:	mov	r3, #0
     f48:	str	r3, [fp, #-32]	; 0xffffffe0
     f4c:	b	f6c <traverse_data+0x360>
     f50:	ldr	r3, [fp, #-32]	; 0xffffffe0
     f54:	mov	r1, #0
     f58:	mov	r0, r3
     f5c:	bl	9f0 <traverse_record>
     f60:	ldr	r3, [fp, #-32]	; 0xffffffe0
     f64:	add	r3, r3, #1
     f68:	str	r3, [fp, #-32]	; 0xffffffe0
     f6c:	ldr	r2, [fp, #-32]	; 0xffffffe0
     f70:	ldr	r3, [fp, #-28]	; 0xffffffe4
     f74:	cmp	r2, r3
     f78:	blt	f50 <traverse_data+0x344>
     f7c:	movw	r3, #0
     f80:	movt	r3, #0
     f84:	ldr	r3, [r3, #136]	; 0x88
     f88:	sub	r2, r3, #1
     f8c:	movw	r3, #0
     f90:	movt	r3, #0
     f94:	str	r2, [r3, #136]	; 0x88
     f98:	movw	r3, #0
     f9c:	movt	r3, #0
     fa0:	ldr	r3, [r3, #3748]	; 0xea4
     fa4:	sub	r2, r3, #1
     fa8:	movw	r3, #0
     fac:	movt	r3, #0
     fb0:	str	r2, [r3, #3748]	; 0xea4
     fb4:	b	1278 <traverse_data+0x66c>
     fb8:	movw	r3, #0
     fbc:	movt	r3, #0
     fc0:	ldr	r3, [r3, #136]	; 0x88
     fc4:	cmp	r3, #30
     fc8:	bgt	126c <traverse_data+0x660>
     fcc:	bl	0 <dim_enter_array>
     fd0:	movw	r3, #0
     fd4:	movt	r3, #0
     fd8:	ldr	r3, [r3, #3360]	; 0xd20
     fdc:	add	r2, r3, #1
     fe0:	movw	r3, #0
     fe4:	movt	r3, #0
     fe8:	str	r2, [r3, #3360]	; 0xd20
     fec:	movw	r3, #0
     ff0:	movt	r3, #0
     ff4:	ldr	r3, [r3, #136]	; 0x88
     ff8:	add	r2, r3, #1
     ffc:	movw	r3, #0
    1000:	movt	r3, #0
    1004:	str	r2, [r3, #136]	; 0x88
    1008:	movw	r3, #0
    100c:	movt	r3, #0
    1010:	ldr	r3, [r3, #136]	; 0x88
    1014:	sub	r2, r3, #1
    1018:	movw	r3, #0
    101c:	movt	r3, #0
    1020:	add	r2, r2, #2
    1024:	ldr	r0, [r3, r2, lsl #2]
    1028:	movw	r3, #0
    102c:	movt	r3, #0
    1030:	ldr	r3, [r3, #136]	; 0x88
    1034:	add	r3, r3, #2
    1038:	lsl	r2, r3, #2
    103c:	movw	r3, #0
    1040:	movt	r3, #0
    1044:	add	r3, r2, r3
    1048:	mov	r1, r3
    104c:	bl	0 <coda_type_get_array_base_type>
    1050:	mov	r3, r0
    1054:	cmp	r3, #0
    1058:	beq	1060 <traverse_data+0x454>
    105c:	bl	0 <handle_coda_error>
    1060:	bl	c0c <traverse_data>
    1064:	movw	r3, #0
    1068:	movt	r3, #0
    106c:	ldr	r3, [r3, #136]	; 0x88
    1070:	sub	r2, r3, #1
    1074:	movw	r3, #0
    1078:	movt	r3, #0
    107c:	str	r2, [r3, #136]	; 0x88
    1080:	movw	r3, #0
    1084:	movt	r3, #0
    1088:	ldr	r3, [r3, #3360]	; 0xd20
    108c:	sub	r2, r3, #1
    1090:	movw	r3, #0
    1094:	movt	r3, #0
    1098:	str	r2, [r3, #3360]	; 0xd20
    109c:	bl	0 <dim_leave_array>
    10a0:	b	1278 <traverse_data+0x66c>
    10a4:	movw	r3, #0
    10a8:	movt	r3, #0
    10ac:	ldr	r2, [r3, #136]	; 0x88
    10b0:	movw	r3, #0
    10b4:	movt	r3, #0
    10b8:	add	r2, r2, #2
    10bc:	ldr	r3, [r3, r2, lsl #2]
    10c0:	sub	r2, fp, #36	; 0x24
    10c4:	mov	r1, r2
    10c8:	mov	r0, r3
    10cc:	bl	0 <coda_type_get_read_type>
    10d0:	mov	r3, r0
    10d4:	cmp	r3, #0
    10d8:	beq	10e0 <traverse_data+0x4d4>
    10dc:	bl	0 <handle_coda_error>
    10e0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    10e4:	sub	r3, r3, #11
    10e8:	cmp	r3, #1
    10ec:	bhi	1138 <traverse_data+0x52c>
    10f0:	bl	0 <dim_enter_array>
    10f4:	movw	r3, #0
    10f8:	movt	r3, #0
    10fc:	ldr	r3, [r3, #3360]	; 0xd20
    1100:	add	r2, r3, #1
    1104:	movw	r3, #0
    1108:	movt	r3, #0
    110c:	str	r2, [r3, #3360]	; 0xd20
    1110:	bl	690 <handle_data_element>
    1114:	movw	r3, #0
    1118:	movt	r3, #0
    111c:	ldr	r3, [r3, #3360]	; 0xd20
    1120:	sub	r2, r3, #1
    1124:	movw	r3, #0
    1128:	movt	r3, #0
    112c:	str	r2, [r3, #3360]	; 0xd20
    1130:	bl	0 <dim_leave_array>
    1134:	b	1140 <traverse_data+0x534>
    1138:	bl	690 <handle_data_element>
    113c:	nop	{0}
    1140:	b	1278 <traverse_data+0x66c>
    1144:	bl	0 <coda_get_option_bypass_special_types>
    1148:	mov	r3, r0
    114c:	cmp	r3, #0
    1150:	beq	11b0 <traverse_data+0x5a4>
    1154:	movw	r3, #0
    1158:	movt	r3, #0
    115c:	ldr	r2, [r3, #136]	; 0x88
    1160:	movw	r3, #0
    1164:	movt	r3, #0
    1168:	add	r2, r2, #2
    116c:	ldr	r0, [r3, r2, lsl #2]
    1170:	movw	r3, #0
    1174:	movt	r3, #0
    1178:	ldr	r3, [r3, #136]	; 0x88
    117c:	add	r3, r3, #2
    1180:	lsl	r2, r3, #2
    1184:	movw	r3, #0
    1188:	movt	r3, #0
    118c:	add	r3, r2, r3
    1190:	mov	r1, r3
    1194:	bl	0 <coda_type_get_special_base_type>
    1198:	mov	r3, r0
    119c:	cmp	r3, #0
    11a0:	beq	11a8 <traverse_data+0x59c>
    11a4:	bl	0 <handle_coda_error>
    11a8:	bl	c0c <traverse_data>
    11ac:	b	1278 <traverse_data+0x66c>
    11b0:	movw	r3, #0
    11b4:	movt	r3, #0
    11b8:	ldr	r2, [r3, #136]	; 0x88
    11bc:	movw	r3, #0
    11c0:	movt	r3, #0
    11c4:	add	r2, r2, #2
    11c8:	ldr	r3, [r3, r2, lsl #2]
    11cc:	sub	r2, fp, #40	; 0x28
    11d0:	mov	r1, r2
    11d4:	mov	r0, r3
    11d8:	bl	0 <coda_type_get_special_type>
    11dc:	mov	r3, r0
    11e0:	cmp	r3, #0
    11e4:	beq	11ec <traverse_data+0x5e0>
    11e8:	bl	0 <handle_coda_error>
    11ec:	ldr	r3, [fp, #-40]	; 0xffffffd8
    11f0:	cmp	r3, #3
    11f4:	ldrls	pc, [pc, r3, lsl #2]
    11f8:	b	1274 <traverse_data+0x668>
    11fc:	.word	0x00001274
    1200:	.word	0x0000120c
    1204:	.word	0x0000120c
    1208:	.word	0x00001214
    120c:	bl	690 <handle_data_element>
    1210:	b	125c <traverse_data+0x650>
    1214:	bl	0 <dim_enter_array>
    1218:	movw	r3, #0
    121c:	movt	r3, #0
    1220:	ldr	r3, [r3, #3360]	; 0xd20
    1224:	add	r2, r3, #1
    1228:	movw	r3, #0
    122c:	movt	r3, #0
    1230:	str	r2, [r3, #3360]	; 0xd20
    1234:	bl	690 <handle_data_element>
    1238:	movw	r3, #0
    123c:	movt	r3, #0
    1240:	ldr	r3, [r3, #3360]	; 0xd20
    1244:	sub	r2, r3, #1
    1248:	movw	r3, #0
    124c:	movt	r3, #0
    1250:	str	r2, [r3, #3360]	; 0xd20
    1254:	bl	0 <dim_leave_array>
    1258:	nop	{0}
    125c:	nop	{0}
    1260:	b	1274 <traverse_data+0x668>
    1264:	nop	{0}
    1268:	b	1278 <traverse_data+0x66c>
    126c:	nop	{0}
    1270:	b	1278 <traverse_data+0x66c>
    1274:	nop	{0}
    1278:	sub	sp, fp, #8
    127c:	ldr	r4, [sp]
    1280:	ldr	fp, [sp, #4]
    1284:	add	sp, sp, #8
    1288:	pop	{pc}		; (ldr pc, [sp], #4)

0000128c <traverse_product>:
    128c:	str	fp, [sp, #-8]!
    1290:	str	lr, [sp, #4]
    1294:	add	fp, sp, #4
    1298:	sub	sp, sp, #8
    129c:	movw	r3, #0
    12a0:	movt	r3, #0
    12a4:	ldr	r3, [r3]
    12a8:	ldr	r1, [pc, #260]	; 13b4 <traverse_product+0x128>
    12ac:	mov	r0, r3
    12b0:	bl	0 <coda_open>
    12b4:	str	r0, [fp, #-8]
    12b8:	ldr	r3, [fp, #-8]
    12bc:	cmp	r3, #0
    12c0:	beq	1304 <traverse_product+0x78>
    12c4:	bl	0 <coda_get_errno>
    12c8:	mov	r3, r0
    12cc:	ldr	r3, [r3]
    12d0:	cmn	r3, #21
    12d4:	bne	1304 <traverse_product+0x78>
    12d8:	mov	r0, #0
    12dc:	bl	0 <coda_set_option_use_mmap>
    12e0:	movw	r3, #0
    12e4:	movt	r3, #0
    12e8:	ldr	r3, [r3]
    12ec:	ldr	r1, [pc, #192]	; 13b4 <traverse_product+0x128>
    12f0:	mov	r0, r3
    12f4:	bl	0 <coda_open>
    12f8:	str	r0, [fp, #-8]
    12fc:	mov	r0, #1
    1300:	bl	0 <coda_set_option_use_mmap>
    1304:	ldr	r3, [fp, #-8]
    1308:	cmp	r3, #0
    130c:	beq	1314 <traverse_product+0x88>
    1310:	bl	0 <handle_coda_error>
    1314:	movw	r3, #0
    1318:	movt	r3, #0
    131c:	ldr	r3, [r3, #4]
    1320:	mov	r1, r3
    1324:	ldr	r0, [pc, #140]	; 13b8 <traverse_product+0x12c>
    1328:	bl	0 <coda_cursor_set_product>
    132c:	mov	r3, r0
    1330:	cmp	r3, #0
    1334:	beq	133c <traverse_product+0xb0>
    1338:	bl	0 <handle_coda_error>
    133c:	movw	r3, #0
    1340:	movt	r3, #0
    1344:	ldr	r3, [r3, #136]	; 0x88
    1348:	add	r3, r3, #2
    134c:	lsl	r2, r3, #2
    1350:	movw	r3, #0
    1354:	movt	r3, #0
    1358:	add	r3, r2, r3
    135c:	mov	r1, r3
    1360:	ldr	r0, [pc, #80]	; 13b8 <traverse_product+0x12c>
    1364:	bl	0 <coda_cursor_get_type>
    1368:	mov	r3, r0
    136c:	cmp	r3, #0
    1370:	beq	1378 <traverse_product+0xec>
    1374:	bl	0 <handle_coda_error>
    1378:	bl	c0c <traverse_data>
    137c:	movw	r3, #0
    1380:	movt	r3, #0
    1384:	ldr	r3, [r3, #4]
    1388:	mov	r0, r3
    138c:	bl	0 <coda_close>
    1390:	movw	r3, #0
    1394:	movt	r3, #0
    1398:	mov	r2, #0
    139c:	str	r2, [r3, #4]
    13a0:	nop	{0}
    13a4:	sub	sp, fp, #4
    13a8:	ldr	fp, [sp]
    13ac:	add	sp, sp, #4
    13b0:	pop	{pc}		; (ldr pc, [sp], #4)
    13b4:	.word	0x00000004
    13b8:	.word	0x00000090
