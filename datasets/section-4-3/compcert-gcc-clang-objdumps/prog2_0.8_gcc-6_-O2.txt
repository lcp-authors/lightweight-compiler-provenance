
../compcert-repos/prog2/0.8:     file format elf32-littlearm


Disassembly of section .init:

00010610 <.init>:
   10610:	push	{r3, lr}
   10614:	bl	10784 <_start@@Base+0x3c>
   10618:	pop	{r3, pc}

Disassembly of section .plt:

0001061c <printf@plt-0x14>:
   1061c:	push	{lr}		; (str lr, [sp, #-4]!)
   10620:	ldr	lr, [pc, #4]	; 1062c <printf@plt-0x4>
   10624:	add	lr, pc, lr
   10628:	ldr	pc, [lr, #8]!
   1062c:	ldrdeq	r0, [r1], -r4

00010630 <printf@plt>:
   10630:	add	ip, pc, #0, 12
   10634:	add	ip, ip, #16, 20	; 0x10000
   10638:	ldr	pc, [ip, #2516]!	; 0x9d4

0001063c <strcpy@plt>:
   1063c:	add	ip, pc, #0, 12
   10640:	add	ip, ip, #16, 20	; 0x10000
   10644:	ldr	pc, [ip, #2508]!	; 0x9cc

00010648 <__libc_start_main@plt>:
   10648:	add	ip, pc, #0, 12
   1064c:	add	ip, ip, #16, 20	; 0x10000
   10650:	ldr	pc, [ip, #2500]!	; 0x9c4

00010654 <__gmon_start__@plt>:
   10654:	add	ip, pc, #0, 12
   10658:	add	ip, ip, #16, 20	; 0x10000
   1065c:	ldr	pc, [ip, #2492]!	; 0x9bc

00010660 <memset@plt>:
   10660:	add	ip, pc, #0, 12
   10664:	add	ip, ip, #16, 20	; 0x10000
   10668:	ldr	pc, [ip, #2484]!	; 0x9b4

0001066c <__isoc99_scanf@plt>:
   1066c:	add	ip, pc, #0, 12
   10670:	add	ip, ip, #16, 20	; 0x10000
   10674:	ldr	pc, [ip, #2476]!	; 0x9ac

00010678 <abort@plt>:
   10678:	add	ip, pc, #0, 12
   1067c:	add	ip, ip, #16, 20	; 0x10000
   10680:	ldr	pc, [ip, #2468]!	; 0x9a4

Disassembly of section .text:

00010684 <main@@Base>:
   10684:	push	{r4, r5, lr}
   10688:	sub	sp, sp, #1200	; 0x4b0
   1068c:	sub	sp, sp, #4
   10690:	add	r3, sp, #120	; 0x78
   10694:	mov	r0, r3
   10698:	mov	r2, #80	; 0x50
   1069c:	mov	r1, #0
   106a0:	str	r3, [sp, #12]
   106a4:	mov	r5, #50	; 0x32
   106a8:	bl	10660 <memset@plt>
   106ac:	add	r0, sp, #200	; 0xc8
   106b0:	mov	r2, #1000	; 0x3e8
   106b4:	mov	r1, #0
   106b8:	bl	10660 <memset@plt>
   106bc:	add	r4, sp, #68	; 0x44
   106c0:	mov	r2, r5
   106c4:	add	r0, sp, #16
   106c8:	mov	r1, #0
   106cc:	bl	10660 <memset@plt>
   106d0:	mov	r2, r5
   106d4:	mov	r0, r4
   106d8:	mov	r1, #0
   106dc:	bl	10660 <memset@plt>
   106e0:	ldr	r1, [sp, #12]
   106e4:	add	r0, sp, #200	; 0xc8
   106e8:	bl	10870 <lerpontuacoes@@Base>
   106ec:	add	r3, sp, #16
   106f0:	ldr	r1, [sp, #12]
   106f4:	str	r4, [sp]
   106f8:	mov	r5, r0
   106fc:	mov	r2, r5
   10700:	add	r0, sp, #200	; 0xc8
   10704:	bl	108d8 <primeiroUltimo@@Base>
   10708:	mov	r1, r5
   1070c:	ldr	r0, [pc, #40]	; 1073c <main@@Base+0xb8>
   10710:	bl	10630 <printf@plt>
   10714:	add	r1, sp, #16
   10718:	ldr	r0, [pc, #32]	; 10740 <main@@Base+0xbc>
   1071c:	bl	10630 <printf@plt>
   10720:	mov	r1, r4
   10724:	ldr	r0, [pc, #24]	; 10744 <main@@Base+0xc0>
   10728:	bl	10630 <printf@plt>
   1072c:	mov	r0, #0
   10730:	add	sp, sp, #1200	; 0x4b0
   10734:	add	sp, sp, #4
   10738:	pop	{r4, r5, pc}
   1073c:	andeq	r0, r1, r4, ror #19
   10740:	andeq	r0, r1, r0, lsl #20
   10744:	andeq	r0, r1, r0, lsl sl

00010748 <_start@@Base>:
   10748:	mov	fp, #0
   1074c:	mov	lr, #0
   10750:	pop	{r1}		; (ldr r1, [sp], #4)
   10754:	mov	r2, sp
   10758:	push	{r2}		; (str r2, [sp, #-4]!)
   1075c:	push	{r0}		; (str r0, [sp, #-4]!)
   10760:	ldr	ip, [pc, #16]	; 10778 <_start@@Base+0x30>
   10764:	push	{ip}		; (str ip, [sp, #-4]!)
   10768:	ldr	r0, [pc, #12]	; 1077c <_start@@Base+0x34>
   1076c:	ldr	r3, [pc, #12]	; 10780 <_start@@Base+0x38>
   10770:	bl	10648 <__libc_start_main@plt>
   10774:	bl	10678 <abort@plt>
   10778:	andeq	r0, r1, r8, asr #19
   1077c:	andeq	r0, r1, r4, lsl #13
   10780:	andeq	r0, r1, r8, ror #18
   10784:	ldr	r3, [pc, #20]	; 107a0 <_start@@Base+0x58>
   10788:	ldr	r2, [pc, #20]	; 107a4 <_start@@Base+0x5c>
   1078c:	add	r3, pc, r3
   10790:	ldr	r2, [r3, r2]
   10794:	cmp	r2, #0
   10798:	bxeq	lr
   1079c:	b	10654 <__gmon_start__@plt>
   107a0:	andeq	r0, r1, ip, ror #16
   107a4:	andeq	r0, r0, r8, lsr #32
   107a8:	ldr	r3, [pc, #28]	; 107cc <_start@@Base+0x84>
   107ac:	ldr	r0, [pc, #28]	; 107d0 <_start@@Base+0x88>
   107b0:	sub	r3, r3, r0
   107b4:	cmp	r3, #6
   107b8:	bxls	lr
   107bc:	ldr	r3, [pc, #16]	; 107d4 <_start@@Base+0x8c>
   107c0:	cmp	r3, #0
   107c4:	bxeq	lr
   107c8:	bx	r3
   107cc:	andeq	r1, r2, r7, lsr r0
   107d0:	andeq	r1, r2, r4, lsr r0
   107d4:	andeq	r0, r0, r0
   107d8:	ldr	r1, [pc, #36]	; 10804 <_start@@Base+0xbc>
   107dc:	ldr	r0, [pc, #36]	; 10808 <_start@@Base+0xc0>
   107e0:	sub	r1, r1, r0
   107e4:	asr	r1, r1, #2
   107e8:	add	r1, r1, r1, lsr #31
   107ec:	asrs	r1, r1, #1
   107f0:	bxeq	lr
   107f4:	ldr	r3, [pc, #16]	; 1080c <_start@@Base+0xc4>
   107f8:	cmp	r3, #0
   107fc:	bxeq	lr
   10800:	bx	r3
   10804:	andeq	r1, r2, r4, lsr r0
   10808:	andeq	r1, r2, r4, lsr r0
   1080c:	andeq	r0, r0, r0
   10810:	push	{r4, lr}
   10814:	ldr	r4, [pc, #24]	; 10834 <_start@@Base+0xec>
   10818:	ldrb	r3, [r4]
   1081c:	cmp	r3, #0
   10820:	popne	{r4, pc}
   10824:	bl	107a8 <_start@@Base+0x60>
   10828:	mov	r3, #1
   1082c:	strb	r3, [r4]
   10830:	pop	{r4, pc}
   10834:	andeq	r1, r2, r4, lsr r0
   10838:	ldr	r0, [pc, #40]	; 10868 <_start@@Base+0x120>
   1083c:	ldr	r3, [r0]
   10840:	cmp	r3, #0
   10844:	bne	1084c <_start@@Base+0x104>
   10848:	b	107d8 <_start@@Base+0x90>
   1084c:	ldr	r3, [pc, #24]	; 1086c <_start@@Base+0x124>
   10850:	cmp	r3, #0
   10854:	beq	10848 <_start@@Base+0x100>
   10858:	push	{r4, lr}
   1085c:	blx	r3
   10860:	pop	{r4, lr}
   10864:	b	107d8 <_start@@Base+0x90>
   10868:	andeq	r0, r2, r4, lsl pc
   1086c:	andeq	r0, r0, r0

00010870 <lerpontuacoes@@Base>:
   10870:	push	{r4, r5, r6, r7, lr}
   10874:	sub	sp, sp, #12
   10878:	mov	r5, r0
   1087c:	mov	r4, r1
   10880:	ldr	r0, [pc, #72]	; 108d0 <lerpontuacoes@@Base+0x60>
   10884:	add	r1, sp, #4
   10888:	bl	1066c <__isoc99_scanf@plt>
   1088c:	ldr	r0, [sp, #4]
   10890:	cmp	r0, #0
   10894:	ble	108c8 <lerpontuacoes@@Base+0x58>
   10898:	ldr	r7, [pc, #52]	; 108d4 <lerpontuacoes@@Base+0x64>
   1089c:	mov	r6, #0
   108a0:	mov	r2, r4
   108a4:	mov	r1, r5
   108a8:	mov	r0, r7
   108ac:	bl	1066c <__isoc99_scanf@plt>
   108b0:	ldr	r0, [sp, #4]
   108b4:	add	r6, r6, #1
   108b8:	cmp	r0, r6
   108bc:	add	r4, r4, #4
   108c0:	add	r5, r5, #50	; 0x32
   108c4:	bgt	108a0 <lerpontuacoes@@Base+0x30>
   108c8:	add	sp, sp, #12
   108cc:	pop	{r4, r5, r6, r7, pc}
   108d0:	ldrdeq	r0, [r1], -r8
   108d4:	ldrdeq	r0, [r1], -ip

000108d8 <primeiroUltimo@@Base>:
   108d8:	cmp	r2, #1
   108dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   108e0:	ldr	r9, [r1]
   108e4:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   108e8:	mov	r8, #50	; 0x32
   108ec:	mov	r7, r3
   108f0:	add	r6, r1, #4
   108f4:	mla	r8, r8, r2, r0
   108f8:	add	r4, r0, #50	; 0x32
   108fc:	mov	sl, r9
   10900:	b	1091c <primeiroUltimo@@Base+0x44>
   10904:	cmp	r5, sl
   10908:	add	r6, r6, #4
   1090c:	blt	10948 <primeiroUltimo@@Base+0x70>
   10910:	add	r4, r4, #50	; 0x32
   10914:	cmp	r4, r8
   10918:	beq	10964 <primeiroUltimo@@Base+0x8c>
   1091c:	ldr	r5, [r6]
   10920:	cmp	r5, r9
   10924:	ble	10904 <primeiroUltimo@@Base+0x2c>
   10928:	mov	r1, r4
   1092c:	mov	r0, r7
   10930:	bl	1063c <strcpy@plt>
   10934:	mov	r9, r5
   10938:	ldr	r5, [r6]
   1093c:	add	r6, r6, #4
   10940:	cmp	r5, sl
   10944:	bge	10910 <primeiroUltimo@@Base+0x38>
   10948:	mov	r1, r4
   1094c:	ldr	r0, [sp, #32]
   10950:	add	r4, r4, #50	; 0x32
   10954:	bl	1063c <strcpy@plt>
   10958:	cmp	r4, r8
   1095c:	mov	sl, r5
   10960:	bne	1091c <primeiroUltimo@@Base+0x44>
   10964:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00010968 <__libc_csu_init@@Base>:
   10968:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1096c:	mov	r7, r0
   10970:	ldr	r6, [pc, #72]	; 109c0 <__libc_csu_init@@Base+0x58>
   10974:	ldr	r5, [pc, #72]	; 109c4 <__libc_csu_init@@Base+0x5c>
   10978:	add	r6, pc, r6
   1097c:	add	r5, pc, r5
   10980:	sub	r6, r6, r5
   10984:	mov	r8, r1
   10988:	mov	r9, r2
   1098c:	bl	10610 <printf@plt-0x20>
   10990:	asrs	r6, r6, #2
   10994:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10998:	mov	r4, #0
   1099c:	add	r4, r4, #1
   109a0:	ldr	r3, [r5], #4
   109a4:	mov	r2, r9
   109a8:	mov	r1, r8
   109ac:	mov	r0, r7
   109b0:	blx	r3
   109b4:	cmp	r6, r4
   109b8:	bne	1099c <__libc_csu_init@@Base+0x34>
   109bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   109c0:	muleq	r1, r0, r5
   109c4:	andeq	r0, r1, r8, lsl #11

000109c8 <__libc_csu_fini@@Base>:
   109c8:	bx	lr

Disassembly of section .fini:

000109cc <.fini>:
   109cc:	push	{r3, lr}
   109d0:	pop	{r3, pc}
