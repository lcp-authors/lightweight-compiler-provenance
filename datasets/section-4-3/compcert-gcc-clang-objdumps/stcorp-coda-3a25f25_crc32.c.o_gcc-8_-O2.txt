
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/zlib/crc32.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <crc32_combine_>:
   0:	cmp	r2, #0
   4:	bxle	lr
   8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   c:	mov	r3, #1
  10:	strd	r6, [sp, #8]
  14:	strd	r8, [sp, #16]
  18:	str	lr, [sp, #24]
  1c:	sub	sp, sp, #260	; 0x104
  20:	movw	lr, #33568	; 0x8320
  24:	movt	lr, #60856	; 0xedb8
  28:	add	ip, sp, #128	; 0x80
  2c:	add	r5, sp, #252	; 0xfc
  30:	str	lr, [sp, #128]	; 0x80
  34:	str	r3, [ip, #4]!
  38:	cmp	ip, r5
  3c:	lsl	r3, r3, #1
  40:	bne	34 <crc32_combine_+0x34>
  44:	add	r6, sp, #124	; 0x7c
  48:	sub	r8, sp, #4
  4c:	mov	r7, r6
  50:	ldr	r3, [r7, #4]!
  54:	cmp	r3, #0
  58:	beq	1c0 <crc32_combine_+0x1c0>
  5c:	mov	lr, #0
  60:	add	ip, sp, #128	; 0x80
  64:	tst	r3, #1
  68:	add	ip, ip, #4
  6c:	ldrne	r4, [ip, #-4]
  70:	eorne	lr, lr, r4
  74:	lsrs	r3, r3, #1
  78:	bne	64 <crc32_combine_+0x64>
  7c:	cmp	r7, r5
  80:	str	lr, [r8, #4]!
  84:	bne	50 <crc32_combine_+0x50>
  88:	mov	r8, r6
  8c:	sub	r7, sp, #4
  90:	ldr	r3, [r7, #4]!
  94:	cmp	r3, #0
  98:	beq	1ac <crc32_combine_+0x1ac>
  9c:	mov	lr, #0
  a0:	mov	ip, sp
  a4:	tst	r3, #1
  a8:	add	ip, ip, #4
  ac:	ldrne	r4, [ip, #-4]
  b0:	eorne	lr, lr, r4
  b4:	lsrs	r3, r3, #1
  b8:	bne	a4 <crc32_combine_+0xa4>
  bc:	cmp	r6, r7
  c0:	str	lr, [r8, #4]!
  c4:	bne	90 <crc32_combine_+0x90>
  c8:	sub	r8, sp, #4
  cc:	mov	r7, r6
  d0:	ldr	r3, [r7, #4]!
  d4:	cmp	r3, #0
  d8:	beq	184 <crc32_combine_+0x184>
  dc:	mov	lr, #0
  e0:	add	ip, sp, #128	; 0x80
  e4:	tst	r3, #1
  e8:	add	ip, ip, #4
  ec:	ldrne	r4, [ip, #-4]
  f0:	eorne	lr, lr, r4
  f4:	lsrs	r3, r3, #1
  f8:	bne	e4 <crc32_combine_+0xe4>
  fc:	cmp	r7, r5
 100:	str	lr, [r8, #4]!
 104:	bne	d0 <crc32_combine_+0xd0>
 108:	tst	r2, #1
 10c:	bne	1d4 <crc32_combine_+0x1d4>
 110:	asrs	r9, r2, #1
 114:	beq	168 <crc32_combine_+0x168>
 118:	mov	r8, r6
 11c:	sub	r7, sp, #4
 120:	ldr	r3, [r7, #4]!
 124:	cmp	r3, #0
 128:	beq	198 <crc32_combine_+0x198>
 12c:	mov	lr, #0
 130:	mov	ip, sp
 134:	tst	r3, #1
 138:	add	ip, ip, #4
 13c:	ldrne	r4, [ip, #-4]
 140:	eorne	lr, lr, r4
 144:	lsrs	r3, r3, #1
 148:	bne	134 <crc32_combine_+0x134>
 14c:	cmp	r7, r6
 150:	str	lr, [r8, #4]!
 154:	bne	120 <crc32_combine_+0x120>
 158:	tst	r9, #1
 15c:	bne	204 <crc32_combine_+0x204>
 160:	asrs	r2, r2, #2
 164:	bne	c8 <crc32_combine_+0xc8>
 168:	eor	r0, r0, r1
 16c:	add	sp, sp, #260	; 0x104
 170:	ldrd	r4, [sp]
 174:	ldrd	r6, [sp, #8]
 178:	ldrd	r8, [sp, #16]
 17c:	add	sp, sp, #24
 180:	pop	{pc}		; (ldr pc, [sp], #4)
 184:	mov	lr, r3
 188:	cmp	r7, r5
 18c:	str	lr, [r8, #4]!
 190:	bne	d0 <crc32_combine_+0xd0>
 194:	b	108 <crc32_combine_+0x108>
 198:	mov	lr, r3
 19c:	cmp	r7, r6
 1a0:	str	lr, [r8, #4]!
 1a4:	bne	120 <crc32_combine_+0x120>
 1a8:	b	158 <crc32_combine_+0x158>
 1ac:	mov	lr, r3
 1b0:	cmp	r6, r7
 1b4:	str	lr, [r8, #4]!
 1b8:	bne	90 <crc32_combine_+0x90>
 1bc:	b	c8 <crc32_combine_+0xc8>
 1c0:	mov	lr, r3
 1c4:	cmp	r7, r5
 1c8:	str	lr, [r8, #4]!
 1cc:	bne	50 <crc32_combine_+0x50>
 1d0:	b	88 <crc32_combine_+0x88>
 1d4:	cmp	r0, #0
 1d8:	beq	110 <crc32_combine_+0x110>
 1dc:	mov	r3, r0
 1e0:	mov	ip, sp
 1e4:	mov	r0, #0
 1e8:	tst	r3, #1
 1ec:	add	ip, ip, #4
 1f0:	ldrne	lr, [ip, #-4]
 1f4:	eorne	r0, r0, lr
 1f8:	lsrs	r3, r3, #1
 1fc:	bne	1e8 <crc32_combine_+0x1e8>
 200:	b	110 <crc32_combine_+0x110>
 204:	cmp	r0, #0
 208:	beq	160 <crc32_combine_+0x160>
 20c:	mov	r3, r0
 210:	add	ip, sp, #128	; 0x80
 214:	mov	r0, #0
 218:	tst	r3, #1
 21c:	add	ip, ip, #4
 220:	ldrne	lr, [ip, #-4]
 224:	eorne	r0, r0, lr
 228:	lsrs	r3, r3, #1
 22c:	bne	218 <crc32_combine_+0x218>
 230:	b	160 <crc32_combine_+0x160>

00000234 <coda_get_crc_table>:
 234:	movw	r0, #0
 238:	movt	r0, #0
 23c:	bx	lr

00000240 <coda_crc32>:
 240:	cmp	r1, #0
 244:	beq	598 <coda_crc32+0x358>
 248:	cmp	r2, #0
 24c:	mvn	ip, r0
 250:	bxeq	lr
 254:	tst	r1, #3
 258:	beq	294 <coda_crc32+0x54>
 25c:	movw	r3, #0
 260:	movt	r3, #0
 264:	b	270 <coda_crc32+0x30>
 268:	tst	r1, #3
 26c:	beq	294 <coda_crc32+0x54>
 270:	ldrb	r0, [r1], #1
 274:	subs	r2, r2, #1
 278:	eor	r0, r0, ip
 27c:	uxtb	r0, r0
 280:	ldr	r0, [r3, r0, lsl #2]
 284:	eor	ip, r0, ip, lsr #8
 288:	bne	268 <coda_crc32+0x28>
 28c:	mvn	r0, ip
 290:	bx	lr
 294:	cmp	r2, #31
 298:	strd	r4, [sp, #-32]!	; 0xffffffe0
 29c:	strd	r6, [sp, #8]
 2a0:	strd	r8, [sp, #16]
 2a4:	str	sl, [sp, #24]
 2a8:	str	lr, [sp, #28]
 2ac:	bls	4e0 <coda_crc32+0x2a0>
 2b0:	sub	r5, r2, #32
 2b4:	add	r6, r1, #64	; 0x40
 2b8:	lsr	r5, r5, #5
 2bc:	movw	r3, #0
 2c0:	movt	r3, #0
 2c4:	add	r4, r1, #32
 2c8:	add	r6, r6, r5, lsl #5
 2cc:	sub	r0, r4, #32
 2d0:	add	r4, r4, #32
 2d4:	ldm	r0, {r0, r7, r8}
 2d8:	eor	ip, ip, r0
 2dc:	lsr	r9, ip, #24
 2e0:	uxtb	lr, ip
 2e4:	ubfx	r0, ip, #8, #8
 2e8:	add	lr, lr, #768	; 0x300
 2ec:	ubfx	ip, ip, #16, #8
 2f0:	ldr	sl, [r3, r9, lsl #2]
 2f4:	add	r0, r0, #512	; 0x200
 2f8:	ldr	lr, [r3, lr, lsl #2]
 2fc:	add	ip, ip, #256	; 0x100
 300:	ldr	r9, [r3, r0, lsl #2]
 304:	ldr	r0, [r3, ip, lsl #2]
 308:	eor	lr, lr, sl
 30c:	eor	lr, lr, r7
 310:	ldr	r7, [r4, #-52]	; 0xffffffcc
 314:	eor	lr, lr, r9
 318:	eor	lr, lr, r0
 31c:	lsr	r9, lr, #24
 320:	uxtb	r0, lr
 324:	ubfx	ip, lr, #8, #8
 328:	add	r0, r0, #768	; 0x300
 32c:	ubfx	lr, lr, #16, #8
 330:	ldr	sl, [r3, r9, lsl #2]
 334:	add	ip, ip, #512	; 0x200
 338:	ldr	r0, [r3, r0, lsl #2]
 33c:	add	lr, lr, #256	; 0x100
 340:	ldr	r9, [r3, ip, lsl #2]
 344:	ldr	ip, [r3, lr, lsl #2]
 348:	eor	r0, r0, sl
 34c:	eor	r0, r0, r8
 350:	ldr	r8, [r4, #-48]	; 0xffffffd0
 354:	eor	r0, r0, r9
 358:	eor	r0, r0, ip
 35c:	uxtb	ip, r0
 360:	lsr	r9, r0, #24
 364:	ubfx	lr, r0, #8, #8
 368:	add	ip, ip, #768	; 0x300
 36c:	ubfx	r0, r0, #16, #8
 370:	ldr	r9, [r3, r9, lsl #2]
 374:	add	lr, lr, #512	; 0x200
 378:	ldr	ip, [r3, ip, lsl #2]
 37c:	add	r0, r0, #256	; 0x100
 380:	ldr	lr, [r3, lr, lsl #2]
 384:	ldr	r0, [r3, r0, lsl #2]
 388:	eor	ip, ip, r9
 38c:	eor	ip, ip, r7
 390:	ldr	r7, [r4, #-44]	; 0xffffffd4
 394:	eor	ip, ip, lr
 398:	eor	ip, ip, r0
 39c:	lsr	r9, ip, #24
 3a0:	uxtb	lr, ip
 3a4:	ubfx	r0, ip, #8, #8
 3a8:	add	lr, lr, #768	; 0x300
 3ac:	ubfx	ip, ip, #16, #8
 3b0:	ldr	sl, [r3, r9, lsl #2]
 3b4:	add	r0, r0, #512	; 0x200
 3b8:	ldr	lr, [r3, lr, lsl #2]
 3bc:	add	ip, ip, #256	; 0x100
 3c0:	ldr	r9, [r3, r0, lsl #2]
 3c4:	ldr	r0, [r3, ip, lsl #2]
 3c8:	eor	lr, lr, sl
 3cc:	eor	lr, lr, r8
 3d0:	ldr	ip, [r4, #-40]	; 0xffffffd8
 3d4:	eor	lr, lr, r9
 3d8:	eor	lr, lr, r0
 3dc:	uxtb	r0, lr
 3e0:	lsr	r9, lr, #24
 3e4:	ubfx	r8, lr, #8, #8
 3e8:	add	r0, r0, #768	; 0x300
 3ec:	ubfx	lr, lr, #16, #8
 3f0:	ldr	r0, [r3, r0, lsl #2]
 3f4:	add	r8, r8, #512	; 0x200
 3f8:	ldr	r9, [r3, r9, lsl #2]
 3fc:	add	lr, lr, #256	; 0x100
 400:	ldr	r8, [r3, r8, lsl #2]
 404:	ldr	lr, [r3, lr, lsl #2]
 408:	eor	r0, r0, r9
 40c:	eor	r0, r0, r7
 410:	eor	r0, r0, r8
 414:	eor	r0, r0, lr
 418:	uxtb	lr, r0
 41c:	lsr	r8, r0, #24
 420:	ubfx	r7, r0, #8, #8
 424:	add	lr, lr, #768	; 0x300
 428:	ubfx	r0, r0, #16, #8
 42c:	ldr	r8, [r3, r8, lsl #2]
 430:	add	r7, r7, #512	; 0x200
 434:	ldr	lr, [r3, lr, lsl #2]
 438:	add	r0, r0, #256	; 0x100
 43c:	ldr	r7, [r3, r7, lsl #2]
 440:	ldr	r0, [r3, r0, lsl #2]
 444:	eor	lr, lr, r8
 448:	eor	lr, lr, ip
 44c:	eor	lr, lr, r7
 450:	eor	lr, lr, r0
 454:	ubfx	r0, lr, #16, #8
 458:	uxtb	ip, lr
 45c:	lsr	r7, lr, #24
 460:	add	ip, ip, #768	; 0x300
 464:	add	r0, r0, #256	; 0x100
 468:	ubfx	lr, lr, #8, #8
 46c:	ldr	r0, [r3, r0, lsl #2]
 470:	add	lr, lr, #512	; 0x200
 474:	ldr	ip, [r3, ip, lsl #2]
 478:	ldr	r8, [r3, r7, lsl #2]
 47c:	ldr	r7, [r4, #-36]	; 0xffffffdc
 480:	cmp	r6, r4
 484:	ldr	lr, [r3, lr, lsl #2]
 488:	eor	ip, ip, r8
 48c:	eor	ip, ip, r7
 490:	eor	ip, ip, lr
 494:	eor	r0, r0, ip
 498:	uxtb	ip, r0
 49c:	lsr	r8, r0, #24
 4a0:	ubfx	r7, r0, #8, #8
 4a4:	add	ip, ip, #768	; 0x300
 4a8:	ubfx	r0, r0, #16, #8
 4ac:	ldr	lr, [r3, ip, lsl #2]
 4b0:	add	r7, r7, #512	; 0x200
 4b4:	ldr	r8, [r3, r8, lsl #2]
 4b8:	add	r0, r0, #256	; 0x100
 4bc:	ldr	r7, [r3, r7, lsl #2]
 4c0:	ldr	ip, [r3, r0, lsl #2]
 4c4:	eor	r0, lr, r8
 4c8:	eor	r0, r0, r7
 4cc:	eor	ip, ip, r0
 4d0:	bne	2cc <coda_crc32+0x8c>
 4d4:	add	r5, r5, #1
 4d8:	and	r2, r2, #31
 4dc:	add	r1, r1, r5, lsl #5
 4e0:	cmp	r2, #3
 4e4:	bls	5a0 <coda_crc32+0x360>
 4e8:	sub	lr, r2, #4
 4ec:	movw	r3, #0
 4f0:	movt	r3, #0
 4f4:	bic	lr, lr, #3
 4f8:	add	lr, lr, #4
 4fc:	add	lr, r1, lr
 500:	ldr	r0, [r1], #4
 504:	eor	ip, ip, r0
 508:	cmp	r1, lr
 50c:	lsr	r5, ip, #24
 510:	uxtb	r4, ip
 514:	ubfx	r0, ip, #8, #8
 518:	add	r4, r4, #768	; 0x300
 51c:	ubfx	ip, ip, #16, #8
 520:	ldr	r6, [r3, r5, lsl #2]
 524:	add	r0, r0, #512	; 0x200
 528:	ldr	r4, [r3, r4, lsl #2]
 52c:	add	ip, ip, #256	; 0x100
 530:	ldr	r5, [r3, r0, lsl #2]
 534:	ldr	r0, [r3, ip, lsl #2]
 538:	eor	ip, r4, r6
 53c:	eor	ip, ip, r5
 540:	eor	ip, ip, r0
 544:	bne	500 <coda_crc32+0x2c0>
 548:	and	r2, r2, #3
 54c:	cmp	r2, #0
 550:	movwne	r3, #0
 554:	addne	r2, lr, r2
 558:	movtne	r3, #0
 55c:	beq	57c <coda_crc32+0x33c>
 560:	ldrb	r1, [lr], #1
 564:	eor	r1, r1, ip
 568:	cmp	lr, r2
 56c:	uxtb	r1, r1
 570:	ldr	r1, [r3, r1, lsl #2]
 574:	eor	ip, r1, ip, lsr #8
 578:	bne	560 <coda_crc32+0x320>
 57c:	ldrd	r4, [sp]
 580:	mvn	r0, ip
 584:	ldrd	r6, [sp, #8]
 588:	ldrd	r8, [sp, #16]
 58c:	ldr	sl, [sp, #24]
 590:	add	sp, sp, #28
 594:	pop	{pc}		; (ldr pc, [sp], #4)
 598:	mov	r0, r1
 59c:	bx	lr
 5a0:	mov	lr, r1
 5a4:	b	54c <coda_crc32+0x30c>

000005a8 <coda_crc32_combine>:
 5a8:	b	0 <crc32_combine_>

000005ac <coda_crc32_combine64>:
 5ac:	b	0 <crc32_combine_>
