
../repos/prog2/CMakeFiles/7.1.dir/Aula07_Arvores/bst.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <bst_nova>:
   0:	mov	ip, sp
   4:	sub	sp, sp, #8
   8:	str	ip, [sp]
   c:	str	lr, [sp, #4]
  10:	mov	r0, #4
  14:	bl	0 <malloc>
  18:	cmp	r0, #0
  1c:	bne	28 <bst_nova+0x28>
  20:	mov	r0, #0
  24:	b	30 <bst_nova+0x30>
  28:	mov	r1, #0
  2c:	str	r1, [r0]
  30:	ldr	lr, [sp, #4]
  34:	add	sp, sp, #8
  38:	bx	lr

0000003c <bst_apaga>:
  3c:	mov	ip, sp
  40:	sub	sp, sp, #16
  44:	str	ip, [sp]
  48:	str	lr, [sp, #4]
  4c:	str	r4, [sp, #8]
  50:	mov	r4, r0
  54:	ldr	r0, [r4]
  58:	cmp	r0, #0
  5c:	beq	70 <bst_apaga+0x34>
  60:	ldr	r1, [r0]
  64:	bl	478 <bst_remove_impl>
  68:	str	r0, [r4]
  6c:	b	54 <bst_apaga+0x18>
  70:	mov	r0, r4
  74:	ldr	r4, [sp, #8]
  78:	ldr	lr, [sp, #4]
  7c:	add	sp, sp, #16
  80:	b	0 <free>

00000084 <bst_pesquisa>:
  84:	mov	ip, sp
  88:	sub	sp, sp, #8
  8c:	str	ip, [sp]
  90:	str	lr, [sp, #4]
  94:	mov	ip, #1
  98:	cmp	r1, #0
  9c:	moveq	r3, #1
  a0:	movne	r3, #0
  a4:	cmp	r0, #0
  a8:	moveq	r2, ip
  ac:	movne	r2, r3
  b0:	cmp	r2, #0
  b4:	beq	c8 <bst_pesquisa+0x44>
  b8:	mov	r0, #0
  bc:	ldr	lr, [sp, #4]
  c0:	add	sp, sp, #8
  c4:	bx	lr
  c8:	ldr	r0, [r0]
  cc:	ldr	lr, [sp, #4]
  d0:	add	sp, sp, #8
  d4:	b	32c <bst_pesquisa_impl>

000000d8 <bst_insere>:
  d8:	mov	ip, sp
  dc:	sub	sp, sp, #16
  e0:	str	ip, [sp]
  e4:	str	lr, [sp, #4]
  e8:	str	r4, [sp, #8]
  ec:	mov	r4, r0
  f0:	mov	r0, #1
  f4:	cmp	r1, #0
  f8:	moveq	r2, #1
  fc:	movne	r2, #0
 100:	cmp	r4, #0
 104:	moveq	r3, r0
 108:	movne	r3, r2
 10c:	cmp	r3, #0
 110:	beq	11c <bst_insere+0x44>
 114:	mvn	r0, #0
 118:	b	12c <bst_insere+0x54>
 11c:	ldr	r0, [r4]
 120:	bl	3d4 <bst_insere_impl>
 124:	str	r0, [r4]
 128:	mov	r0, #0
 12c:	ldr	r4, [sp, #8]
 130:	ldr	lr, [sp, #4]
 134:	add	sp, sp, #16
 138:	bx	lr

0000013c <bst_remove>:
 13c:	mov	ip, sp
 140:	sub	sp, sp, #16
 144:	str	ip, [sp]
 148:	str	lr, [sp, #4]
 14c:	str	r4, [sp, #8]
 150:	mov	r4, r0
 154:	mov	r0, #1
 158:	cmp	r1, #0
 15c:	moveq	r2, #1
 160:	movne	r2, #0
 164:	cmp	r4, #0
 168:	moveq	r3, r0
 16c:	movne	r3, r2
 170:	cmp	r3, #0
 174:	beq	180 <bst_remove+0x44>
 178:	mvn	r0, #0
 17c:	b	190 <bst_remove+0x54>
 180:	ldr	r0, [r4]
 184:	bl	478 <bst_remove_impl>
 188:	str	r0, [r4]
 18c:	mov	r0, #0
 190:	ldr	r4, [sp, #8]
 194:	ldr	lr, [sp, #4]
 198:	add	sp, sp, #16
 19c:	bx	lr

000001a0 <bst_min>:
 1a0:	mov	ip, sp
 1a4:	sub	sp, sp, #8
 1a8:	str	ip, [sp]
 1ac:	str	lr, [sp, #4]
 1b0:	cmp	r0, #0
 1b4:	bne	1c0 <bst_min+0x20>
 1b8:	mov	r0, #0
 1bc:	b	1cc <bst_min+0x2c>
 1c0:	ldr	r0, [r0]
 1c4:	bl	2cc <bst_no_valormin>
 1c8:	ldr	r0, [r0]
 1cc:	ldr	lr, [sp, #4]
 1d0:	add	sp, sp, #8
 1d4:	bx	lr

000001d8 <bst_max>:
 1d8:	mov	ip, sp
 1dc:	sub	sp, sp, #8
 1e0:	str	ip, [sp]
 1e4:	str	lr, [sp, #4]
 1e8:	cmp	r0, #0
 1ec:	bne	1f8 <bst_max+0x20>
 1f0:	mov	r0, #0
 1f4:	b	204 <bst_max+0x2c>
 1f8:	ldr	r0, [r0]
 1fc:	bl	2fc <bst_no_valormax>
 200:	ldr	r0, [r0]
 204:	ldr	lr, [sp, #4]
 208:	add	sp, sp, #8
 20c:	bx	lr

00000210 <bst_imprime>:
 210:	mov	ip, sp
 214:	sub	sp, sp, #16
 218:	str	ip, [sp]
 21c:	str	lr, [sp, #4]
 220:	str	r4, [sp, #8]
 224:	mov	r4, r0
 228:	cmp	r4, #0
 22c:	beq	248 <bst_imprime+0x38>
 230:	ldr	r0, [pc, #32]	; 258 <bst_imprime+0x48>
 234:	bl	0 <printf>
 238:	ldr	r0, [r4]
 23c:	bl	660 <bst_preordem_impl>
 240:	ldr	r0, [pc, #20]	; 25c <bst_imprime+0x4c>
 244:	bl	0 <printf>
 248:	ldr	r4, [sp, #8]
 24c:	ldr	lr, [sp, #4]
 250:	add	sp, sp, #16
 254:	bx	lr
 258:	.word	0x00000002
 25c:	.word	0x00000000

00000260 <bst_novo_no>:
 260:	mov	ip, sp
 264:	sub	sp, sp, #16
 268:	str	ip, [sp]
 26c:	str	lr, [sp, #4]
 270:	str	r4, [sp, #8]
 274:	str	r5, [sp, #12]
 278:	mov	r4, r0
 27c:	mov	r0, #12
 280:	bl	0 <malloc>
 284:	mov	r5, r0
 288:	mov	r0, r4
 28c:	bl	0 <strlen>
 290:	add	r0, r0, #1
 294:	bl	0 <malloc>
 298:	str	r0, [r5]
 29c:	mov	r1, r4
 2a0:	bl	0 <strcpy>
 2a4:	mov	r2, #0
 2a8:	str	r2, [r5, #4]
 2ac:	mov	r1, #0
 2b0:	str	r1, [r5, #8]
 2b4:	mov	r0, r5
 2b8:	ldr	r4, [sp, #8]
 2bc:	ldr	r5, [sp, #12]
 2c0:	ldr	lr, [sp, #4]
 2c4:	add	sp, sp, #16
 2c8:	bx	lr

000002cc <bst_no_valormin>:
 2cc:	mov	ip, sp
 2d0:	sub	sp, sp, #8
 2d4:	str	ip, [sp]
 2d8:	str	lr, [sp, #4]
 2dc:	ldr	r1, [r0, #4]
 2e0:	cmp	r1, #0
 2e4:	beq	2f0 <bst_no_valormin+0x24>
 2e8:	mov	r0, r1
 2ec:	b	2dc <bst_no_valormin+0x10>
 2f0:	ldr	lr, [sp, #4]
 2f4:	add	sp, sp, #8
 2f8:	bx	lr

000002fc <bst_no_valormax>:
 2fc:	mov	ip, sp
 300:	sub	sp, sp, #8
 304:	str	ip, [sp]
 308:	str	lr, [sp, #4]
 30c:	ldr	r1, [r0, #8]
 310:	cmp	r1, #0
 314:	beq	320 <bst_no_valormax+0x24>
 318:	mov	r0, r1
 31c:	b	30c <bst_no_valormax+0x10>
 320:	ldr	lr, [sp, #4]
 324:	add	sp, sp, #8
 328:	bx	lr

0000032c <bst_pesquisa_impl>:
 32c:	mov	ip, sp
 330:	sub	sp, sp, #16
 334:	str	ip, [sp]
 338:	str	lr, [sp, #4]
 33c:	str	r4, [sp, #8]
 340:	str	r5, [sp, #12]
 344:	mov	r4, r1
 348:	mov	r5, r0
 34c:	cmp	r5, #0
 350:	bne	35c <bst_pesquisa_impl+0x30>
 354:	mov	r0, #0
 358:	b	3a4 <bst_pesquisa_impl+0x78>
 35c:	ldr	r1, [r5]
 360:	mov	r0, r4
 364:	bl	0 <strcmp>
 368:	cmp	r0, #0
 36c:	blt	3b8 <bst_pesquisa_impl+0x8c>
 370:	ldr	r1, [r5]
 374:	mov	r0, r4
 378:	bl	0 <strcmp>
 37c:	cmp	r0, #0
 380:	ble	3a0 <bst_pesquisa_impl+0x74>
 384:	ldr	r0, [r5, #8]
 388:	mov	r1, r4
 38c:	ldr	r4, [sp, #8]
 390:	ldr	r5, [sp, #12]
 394:	ldr	lr, [sp, #4]
 398:	add	sp, sp, #16
 39c:	b	32c <bst_pesquisa_impl>
 3a0:	mov	r0, r5
 3a4:	ldr	r4, [sp, #8]
 3a8:	ldr	r5, [sp, #12]
 3ac:	ldr	lr, [sp, #4]
 3b0:	add	sp, sp, #16
 3b4:	bx	lr
 3b8:	ldr	r0, [r5, #4]
 3bc:	mov	r1, r4
 3c0:	ldr	r4, [sp, #8]
 3c4:	ldr	r5, [sp, #12]
 3c8:	ldr	lr, [sp, #4]
 3cc:	add	sp, sp, #16
 3d0:	b	32c <bst_pesquisa_impl>

000003d4 <bst_insere_impl>:
 3d4:	mov	ip, sp
 3d8:	sub	sp, sp, #16
 3dc:	str	ip, [sp]
 3e0:	str	lr, [sp, #4]
 3e4:	str	r4, [sp, #8]
 3e8:	str	r5, [sp, #12]
 3ec:	mov	r4, r1
 3f0:	mov	r5, r0
 3f4:	cmp	r5, #0
 3f8:	bne	414 <bst_insere_impl+0x40>
 3fc:	mov	r0, r4
 400:	ldr	r4, [sp, #8]
 404:	ldr	r5, [sp, #12]
 408:	ldr	lr, [sp, #4]
 40c:	add	sp, sp, #16
 410:	b	260 <bst_novo_no>
 414:	ldr	r1, [r5]
 418:	mov	r0, r4
 41c:	bl	0 <strcmp>
 420:	cmp	r0, #0
 424:	blt	450 <bst_insere_impl+0x7c>
 428:	ldr	r1, [r5]
 42c:	mov	r0, r4
 430:	bl	0 <strcmp>
 434:	cmp	r0, #0
 438:	ble	460 <bst_insere_impl+0x8c>
 43c:	ldr	r0, [r5, #8]
 440:	mov	r1, r4
 444:	bl	3d4 <bst_insere_impl>
 448:	str	r0, [r5, #8]
 44c:	b	460 <bst_insere_impl+0x8c>
 450:	ldr	r0, [r5, #4]
 454:	mov	r1, r4
 458:	bl	3d4 <bst_insere_impl>
 45c:	str	r0, [r5, #4]
 460:	mov	r0, r5
 464:	ldr	r4, [sp, #8]
 468:	ldr	r5, [sp, #12]
 46c:	ldr	lr, [sp, #4]
 470:	add	sp, sp, #16
 474:	bx	lr

00000478 <bst_remove_impl>:
 478:	mov	ip, sp
 47c:	sub	sp, sp, #16
 480:	str	ip, [sp]
 484:	str	lr, [sp, #4]
 488:	str	r4, [sp, #8]
 48c:	str	r5, [sp, #12]
 490:	mov	r4, r1
 494:	mov	r5, r0
 498:	cmp	r5, #0
 49c:	beq	5b0 <bst_remove_impl+0x138>
 4a0:	ldr	r1, [r5]
 4a4:	mov	r0, r4
 4a8:	bl	0 <strcmp>
 4ac:	cmp	r0, #0
 4b0:	blt	5a0 <bst_remove_impl+0x128>
 4b4:	ldr	r1, [r5]
 4b8:	mov	r0, r4
 4bc:	bl	0 <strcmp>
 4c0:	cmp	r0, #0
 4c4:	bgt	58c <bst_remove_impl+0x114>
 4c8:	ldr	ip, [r5, #4]
 4cc:	cmp	ip, #0
 4d0:	beq	520 <bst_remove_impl+0xa8>
 4d4:	ldr	r0, [r5, #8]
 4d8:	cmp	r0, #0
 4dc:	beq	520 <bst_remove_impl+0xa8>
 4e0:	bl	2cc <bst_no_valormin>
 4e4:	mov	r4, r0
 4e8:	ldr	r0, [r4]
 4ec:	bl	0 <strlen>
 4f0:	ldr	r2, [r5]
 4f4:	add	r1, r0, #1
 4f8:	mov	r0, r2
 4fc:	bl	0 <realloc>
 500:	str	r0, [r5]
 504:	ldr	r1, [r4]
 508:	bl	0 <strcpy>
 50c:	ldr	r0, [r5, #8]
 510:	ldr	r1, [r4]
 514:	bl	478 <bst_remove_impl>
 518:	str	r0, [r5, #8]
 51c:	b	5b0 <bst_remove_impl+0x138>
 520:	ldr	r4, [r5, #4]
 524:	cmp	r4, #0
 528:	bne	530 <bst_remove_impl+0xb8>
 52c:	ldr	r4, [r5, #8]
 530:	cmp	r4, #0
 534:	beq	570 <bst_remove_impl+0xf8>
 538:	ldr	r0, [r4]
 53c:	bl	0 <strlen>
 540:	ldr	r2, [r5]
 544:	add	r1, r0, #1
 548:	mov	r0, r2
 54c:	bl	0 <realloc>
 550:	str	r0, [r5]
 554:	ldr	r1, [r4]
 558:	bl	0 <strcpy>
 55c:	ldr	r3, [r4, #4]
 560:	str	r3, [r5, #4]
 564:	ldr	r2, [r4, #8]
 568:	str	r2, [r5, #8]
 56c:	b	578 <bst_remove_impl+0x100>
 570:	mov	r4, r5
 574:	mov	r5, #0
 578:	ldr	r0, [r4]
 57c:	bl	0 <free>
 580:	mov	r0, r4
 584:	bl	0 <free>
 588:	b	5b0 <bst_remove_impl+0x138>
 58c:	ldr	r0, [r5, #8]
 590:	mov	r1, r4
 594:	bl	478 <bst_remove_impl>
 598:	str	r0, [r5, #8]
 59c:	b	5b0 <bst_remove_impl+0x138>
 5a0:	ldr	r0, [r5, #4]
 5a4:	mov	r1, r4
 5a8:	bl	478 <bst_remove_impl>
 5ac:	str	r0, [r5, #4]
 5b0:	mov	r0, r5
 5b4:	ldr	r4, [sp, #8]
 5b8:	ldr	r5, [sp, #12]
 5bc:	ldr	lr, [sp, #4]
 5c0:	add	sp, sp, #16
 5c4:	bx	lr

000005c8 <bst_altura>:
 5c8:	mov	ip, sp
 5cc:	sub	sp, sp, #16
 5d0:	str	ip, [sp]
 5d4:	str	lr, [sp, #4]
 5d8:	str	r4, [sp, #8]
 5dc:	str	r5, [sp, #12]
 5e0:	mov	r5, r0
 5e4:	cmp	r5, #0
 5e8:	bne	5f4 <bst_altura+0x2c>
 5ec:	mvn	r0, #0
 5f0:	b	64c <bst_altura+0x84>
 5f4:	ldr	r0, [r5, #8]
 5f8:	cmp	r0, #0
 5fc:	bne	614 <bst_altura+0x4c>
 600:	ldr	r1, [r5, #4]
 604:	cmp	r1, #0
 608:	bne	614 <bst_altura+0x4c>
 60c:	mov	r0, #0
 610:	b	64c <bst_altura+0x84>
 614:	ldr	r0, [r5, #4]
 618:	bl	5c8 <bst_altura>
 61c:	mov	r4, r0
 620:	ldr	r0, [r5, #8]
 624:	bl	5c8 <bst_altura>
 628:	cmp	r4, r0
 62c:	bgt	640 <bst_altura+0x78>
 630:	ldr	r0, [r5, #8]
 634:	bl	5c8 <bst_altura>
 638:	add	r0, r0, #1
 63c:	b	64c <bst_altura+0x84>
 640:	ldr	r0, [r5, #4]
 644:	bl	5c8 <bst_altura>
 648:	add	r0, r0, #1
 64c:	ldr	r4, [sp, #8]
 650:	ldr	r5, [sp, #12]
 654:	ldr	lr, [sp, #4]
 658:	add	sp, sp, #16
 65c:	bx	lr

00000660 <bst_preordem_impl>:
 660:	mov	ip, sp
 664:	sub	sp, sp, #16
 668:	str	ip, [sp]
 66c:	str	lr, [sp, #4]
 670:	str	r4, [sp, #8]
 674:	mov	r4, r0
 678:	cmp	r4, #0
 67c:	beq	6a8 <bst_preordem_impl+0x48>
 680:	ldr	r0, [pc, #48]	; 6b8 <bst_preordem_impl+0x58>
 684:	ldr	r1, [r4]
 688:	bl	0 <printf>
 68c:	ldr	r0, [r4, #4]
 690:	bl	660 <bst_preordem_impl>
 694:	ldr	r0, [r4, #8]
 698:	ldr	r4, [sp, #8]
 69c:	ldr	lr, [sp, #4]
 6a0:	add	sp, sp, #16
 6a4:	b	660 <bst_preordem_impl>
 6a8:	ldr	r4, [sp, #8]
 6ac:	ldr	lr, [sp, #4]
 6b0:	add	sp, sp, #16
 6b4:	bx	lr
 6b8:	.word	0x0000000d
