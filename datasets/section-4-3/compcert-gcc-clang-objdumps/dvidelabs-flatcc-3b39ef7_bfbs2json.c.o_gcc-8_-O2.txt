
../compcert-repos/dvidelabs-flatcc-3b39ef7/samples/reflection/CMakeFiles/bfbs2json.dir/bfbs2json.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <reflection_Type_base_type.part.0>:
   0:	movw	r3, #0
   4:	movt	r3, #0
   8:	str	r4, [sp, #-8]!
   c:	movw	r1, #0
  10:	movt	r1, #0
  14:	str	lr, [sp, #4]
  18:	movw	r0, #0
  1c:	movt	r0, #0
  20:	mov	r2, #147	; 0x93
  24:	bl	0 <__assert_fail>

00000028 <print_type>:
  28:	str	r4, [sp, #-8]!
  2c:	mov	r4, r0
  30:	mov	r0, #123	; 0x7b
  34:	str	lr, [sp, #4]
  38:	bl	0 <putchar>
  3c:	cmp	r4, #0
  40:	beq	1bc <print_type+0x194>
  44:	ldr	r3, [r4]
  48:	sub	r3, r4, r3
  4c:	ldrh	r2, [r3]
  50:	cmp	r2, #5
  54:	bls	12c <print_type+0x104>
  58:	ldrh	r1, [r3, #4]
  5c:	cmp	r1, #0
  60:	beq	174 <print_type+0x14c>
  64:	ldrb	r2, [r4, r1]
  68:	cmp	r2, #16
  6c:	movwhi	r1, #0
  70:	movthi	r1, #0
  74:	bls	1a0 <print_type+0x178>
  78:	movw	r0, #0
  7c:	movt	r0, #0
  80:	bl	0 <printf>
  84:	ldr	r3, [r4]
  88:	sub	r3, r4, r3
  8c:	ldrh	r2, [r3]
  90:	cmp	r2, #7
  94:	bls	12c <print_type+0x104>
  98:	ldrh	r1, [r3, #6]
  9c:	cmp	r1, #0
  a0:	beq	1d8 <print_type+0x1b0>
  a4:	mov	r0, #44	; 0x2c
  a8:	bl	0 <putchar>
  ac:	ldr	r3, [r4]
  b0:	sub	r3, r4, r3
  b4:	ldrh	r2, [r3]
  b8:	cmp	r2, #5
  bc:	bhi	140 <print_type+0x118>
  c0:	movw	r1, #0
  c4:	movt	r1, #0
  c8:	movw	r0, #0
  cc:	movt	r0, #0
  d0:	bl	0 <printf>
  d4:	ldr	r3, [r4]
  d8:	sub	r3, r4, r3
  dc:	ldrh	r2, [r3]
  e0:	cmp	r2, #9
  e4:	bls	12c <print_type+0x104>
  e8:	ldrh	r3, [r3, #8]
  ec:	cmp	r3, #0
  f0:	beq	12c <print_type+0x104>
  f4:	mov	r0, #44	; 0x2c
  f8:	bl	0 <putchar>
  fc:	ldr	r3, [r4]
 100:	sub	r3, r4, r3
 104:	ldrh	r2, [r3]
 108:	cmp	r2, #9
 10c:	bls	1b4 <print_type+0x18c>
 110:	ldrh	r3, [r3, #8]
 114:	cmp	r3, #0
 118:	beq	1b4 <print_type+0x18c>
 11c:	ldr	r1, [r4, r3]
 120:	movw	r0, #0
 124:	movt	r0, #0
 128:	bl	0 <printf>
 12c:	mov	r0, #125	; 0x7d
 130:	ldr	r4, [sp]
 134:	ldr	lr, [sp, #4]
 138:	add	sp, sp, #8
 13c:	b	0 <putchar>
 140:	ldrh	r3, [r3, #4]
 144:	cmp	r3, #0
 148:	beq	c0 <print_type+0x98>
 14c:	ldrb	r3, [r4, r3]
 150:	cmp	r3, #16
 154:	movwhi	r1, #0
 158:	movthi	r1, #0
 15c:	bhi	c8 <print_type+0xa0>
 160:	movw	r2, #0
 164:	movt	r2, #0
 168:	add	r3, r2, r3, lsl #2
 16c:	ldr	r1, [r3, #68]	; 0x44
 170:	b	c8 <print_type+0xa0>
 174:	cmp	r2, #7
 178:	bls	12c <print_type+0x104>
 17c:	ldrh	r1, [r3, #6]
 180:	cmp	r1, #0
 184:	bne	c0 <print_type+0x98>
 188:	cmp	r2, #9
 18c:	bls	12c <print_type+0x104>
 190:	ldrh	r3, [r3, #8]
 194:	cmp	r3, #0
 198:	bne	11c <print_type+0xf4>
 19c:	b	12c <print_type+0x104>
 1a0:	movw	r3, #0
 1a4:	movt	r3, #0
 1a8:	add	r3, r3, r2, lsl #2
 1ac:	ldr	r1, [r3, #68]	; 0x44
 1b0:	b	78 <print_type+0x50>
 1b4:	mvn	r1, #0
 1b8:	b	120 <print_type+0xf8>
 1bc:	movw	r1, #0
 1c0:	movt	r1, #0
 1c4:	ldr	r3, [pc, #24]	; 1e4 <print_type+0x1bc>
 1c8:	movw	r0, #0
 1cc:	movt	r0, #0
 1d0:	mov	r2, #147	; 0x93
 1d4:	bl	0 <__assert_fail>
 1d8:	cmp	r2, #9
 1dc:	bls	12c <print_type+0x104>
 1e0:	b	e8 <print_type+0xc0>
 1e4:	.word	0x0000001c

000001e8 <print_object>:
 1e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
 1ec:	strd	r6, [sp, #8]
 1f0:	strd	r8, [sp, #16]
 1f4:	subs	r9, r0, #0
 1f8:	strd	sl, [sp, #24]
 1fc:	str	lr, [sp, #32]
 200:	sub	sp, sp, #12
 204:	beq	5dc <print_object+0x3f4>
 208:	ldr	r3, [r9]
 20c:	sub	r3, r9, r3
 210:	ldrh	r2, [r3]
 214:	cmp	r2, #7
 218:	bls	5c0 <print_object+0x3d8>
 21c:	ldrh	r2, [r3, #6]
 220:	cmp	r2, #0
 224:	beq	5c0 <print_object+0x3d8>
 228:	ldrh	r1, [r3, #4]
 22c:	add	r8, r9, r2
 230:	ldr	r3, [r9, r2]
 234:	cmp	r1, #0
 238:	add	r3, r3, #4
 23c:	add	r8, r8, r3
 240:	beq	5a4 <print_object+0x3bc>
 244:	ldr	r3, [r9, r1]
 248:	add	r1, r9, r1
 24c:	movw	r0, #0
 250:	movt	r0, #0
 254:	add	r3, r3, #4
 258:	add	r1, r1, r3
 25c:	bl	0 <printf>
 260:	movw	r0, #0
 264:	movt	r0, #0
 268:	bl	0 <printf>
 26c:	cmp	r8, #0
 270:	beq	478 <print_object+0x290>
 274:	ldr	r3, [r8, #-4]
 278:	cmp	r3, #0
 27c:	beq	478 <print_object+0x290>
 280:	movw	r2, #0
 284:	movt	r2, #0
 288:	movw	sl, #0
 28c:	movt	sl, #0
 290:	movw	fp, #0
 294:	movt	fp, #0
 298:	str	r2, [sp, #4]
 29c:	mov	r7, #0
 2a0:	b	444 <print_object+0x25c>
 2a4:	ldr	r3, [r6, r5]
 2a8:	sub	r3, r4, r3
 2ac:	ldrh	r2, [r3]
 2b0:	cmp	r2, #5
 2b4:	bls	56c <print_object+0x384>
 2b8:	ldrh	r1, [r3, #4]
 2bc:	cmp	r1, #0
 2c0:	beq	56c <print_object+0x384>
 2c4:	ldr	r3, [r4, r1]
 2c8:	add	r1, r4, r1
 2cc:	mov	r0, sl
 2d0:	add	r3, r3, #4
 2d4:	add	r1, r1, r3
 2d8:	bl	0 <printf>
 2dc:	ldr	r3, [r6, r5]
 2e0:	sub	r3, r4, r3
 2e4:	ldrh	r2, [r3]
 2e8:	cmp	r2, #7
 2ec:	bls	550 <print_object+0x368>
 2f0:	ldrh	r3, [r3, #6]
 2f4:	cmp	r3, #0
 2f8:	beq	550 <print_object+0x368>
 2fc:	ldr	r0, [r4, r3]
 300:	add	r3, r4, r3
 304:	add	r0, r3, r0
 308:	bl	28 <print_type>
 30c:	ldr	r3, [r6, r5]
 310:	sub	r3, r4, r3
 314:	ldrh	r2, [r3]
 318:	cmp	r2, #9
 31c:	bls	420 <print_object+0x238>
 320:	ldrh	r1, [r3, #8]
 324:	cmp	r1, #0
 328:	beq	348 <print_object+0x160>
 32c:	ldrh	r1, [r4, r1]
 330:	movw	r0, #0
 334:	movt	r0, #0
 338:	bl	0 <printf>
 33c:	ldr	r3, [r6, r5]
 340:	sub	r3, r4, r3
 344:	ldrh	r2, [r3]
 348:	cmp	r2, #13
 34c:	bls	420 <print_object+0x238>
 350:	ldrh	r1, [r3, #12]
 354:	cmp	r1, #0
 358:	beq	378 <print_object+0x190>
 35c:	movw	r0, #0
 360:	movt	r0, #0
 364:	ldrd	r2, [r4, r1]
 368:	bl	0 <printf>
 36c:	ldr	r3, [r6, r5]
 370:	sub	r3, r4, r3
 374:	ldrh	r2, [r3]
 378:	cmp	r2, #15
 37c:	bls	420 <print_object+0x238>
 380:	ldrh	r1, [r3, #14]
 384:	cmp	r1, #0
 388:	beq	3ac <print_object+0x1c4>
 38c:	add	r1, r4, r1
 390:	movw	r0, #0
 394:	movt	r0, #0
 398:	ldrd	r2, [r1]
 39c:	bl	0 <printf>
 3a0:	ldr	r3, [r6, r5]
 3a4:	sub	r3, r4, r3
 3a8:	ldrh	r2, [r3]
 3ac:	cmp	r2, #19
 3b0:	bls	420 <print_object+0x238>
 3b4:	ldrh	r1, [r3, #18]
 3b8:	cmp	r1, #0
 3bc:	beq	3ec <print_object+0x204>
 3c0:	ldrb	r1, [r4, r1]
 3c4:	movw	r0, #0
 3c8:	movt	r0, #0
 3cc:	ldr	r3, [sp, #4]
 3d0:	cmp	r1, #0
 3d4:	movne	r3, fp
 3d8:	mov	r1, r3
 3dc:	bl	0 <printf>
 3e0:	ldr	r3, [r6, r5]
 3e4:	sub	r3, r4, r3
 3e8:	ldrh	r2, [r3]
 3ec:	cmp	r2, #21
 3f0:	bls	420 <print_object+0x238>
 3f4:	ldrh	r3, [r3, #20]
 3f8:	cmp	r3, #0
 3fc:	beq	420 <print_object+0x238>
 400:	ldrb	r1, [r4, r3]
 404:	movw	r0, #0
 408:	movt	r0, #0
 40c:	ldr	r3, [sp, #4]
 410:	cmp	r1, #0
 414:	movne	r3, fp
 418:	mov	r1, r3
 41c:	bl	0 <printf>
 420:	mov	r0, #125	; 0x7d
 424:	add	r7, r7, #1
 428:	bl	0 <putchar>
 42c:	ldr	r3, [r8, #-4]
 430:	cmp	r7, r3
 434:	bcs	478 <print_object+0x290>
 438:	mov	r0, #44	; 0x2c
 43c:	bl	0 <putchar>
 440:	ldr	r3, [r8, #-4]
 444:	cmp	r7, r3
 448:	add	r6, r8, r7, lsl #2
 44c:	bcs	588 <print_object+0x3a0>
 450:	ldr	r5, [r8, r7, lsl #2]
 454:	adds	r4, r6, r5
 458:	bne	2a4 <print_object+0xbc>
 45c:	movw	r1, #0
 460:	movt	r1, #0
 464:	ldr	r3, [pc, #396]	; 5f8 <print_object+0x410>
 468:	movw	r0, #0
 46c:	movt	r0, #0
 470:	mov	r2, #195	; 0xc3
 474:	bl	0 <__assert_fail>
 478:	mov	r0, #93	; 0x5d
 47c:	bl	0 <putchar>
 480:	ldr	r3, [r9]
 484:	sub	r3, r9, r3
 488:	ldrh	r2, [r3]
 48c:	cmp	r2, #9
 490:	bls	52c <print_object+0x344>
 494:	ldrh	r1, [r3, #8]
 498:	cmp	r1, #0
 49c:	beq	4d8 <print_object+0x2f0>
 4a0:	ldrb	r1, [r9, r1]
 4a4:	movw	r2, #0
 4a8:	movt	r2, #0
 4ac:	movw	r3, #0
 4b0:	movt	r3, #0
 4b4:	movw	r0, #0
 4b8:	movt	r0, #0
 4bc:	cmp	r1, #0
 4c0:	movne	r1, r2
 4c4:	moveq	r1, r3
 4c8:	bl	0 <printf>
 4cc:	ldr	r3, [r9]
 4d0:	sub	r3, r9, r3
 4d4:	ldrh	r2, [r3]
 4d8:	cmp	r2, #11
 4dc:	bls	52c <print_object+0x344>
 4e0:	ldrh	r1, [r3, #10]
 4e4:	cmp	r1, #0
 4e8:	beq	508 <print_object+0x320>
 4ec:	movw	r0, #0
 4f0:	movt	r0, #0
 4f4:	ldr	r1, [r9, r1]
 4f8:	bl	0 <printf>
 4fc:	ldr	r3, [r9]
 500:	sub	r3, r9, r3
 504:	ldrh	r2, [r3]
 508:	cmp	r2, #13
 50c:	bls	52c <print_object+0x344>
 510:	ldrh	r3, [r3, #12]
 514:	cmp	r3, #0
 518:	beq	52c <print_object+0x344>
 51c:	movw	r0, #0
 520:	movt	r0, #0
 524:	ldr	r1, [r9, r3]
 528:	bl	0 <printf>
 52c:	mov	r0, #125	; 0x7d
 530:	add	sp, sp, #12
 534:	ldrd	r4, [sp]
 538:	ldrd	r6, [sp, #8]
 53c:	ldrd	r8, [sp, #16]
 540:	ldrd	sl, [sp, #24]
 544:	ldr	lr, [sp, #32]
 548:	add	sp, sp, #36	; 0x24
 54c:	b	0 <putchar>
 550:	movw	r1, #0
 554:	movt	r1, #0
 558:	ldr	r3, [pc, #156]	; 5fc <print_object+0x414>
 55c:	movw	r0, #0
 560:	movt	r0, #0
 564:	mov	r2, #201	; 0xc9
 568:	bl	0 <__assert_fail>
 56c:	movw	r1, #0
 570:	movt	r1, #0
 574:	ldr	r3, [pc, #124]	; 5f8 <print_object+0x410>
 578:	movw	r0, #0
 57c:	movt	r0, #0
 580:	mov	r2, #195	; 0xc3
 584:	bl	0 <__assert_fail>
 588:	movw	r1, #0
 58c:	movt	r1, #0
 590:	ldr	r3, [pc, #104]	; 600 <print_object+0x418>
 594:	movw	r0, #0
 598:	movt	r0, #0
 59c:	mov	r2, #192	; 0xc0
 5a0:	bl	0 <__assert_fail>
 5a4:	movw	r1, #0
 5a8:	movt	r1, #0
 5ac:	ldr	r3, [pc, #80]	; 604 <print_object+0x41c>
 5b0:	movw	r0, #0
 5b4:	movt	r0, #0
 5b8:	mov	r2, #218	; 0xda
 5bc:	bl	0 <__assert_fail>
 5c0:	movw	r1, #0
 5c4:	movt	r1, #0
 5c8:	ldr	r3, [pc, #56]	; 608 <print_object+0x420>
 5cc:	movw	r0, #0
 5d0:	movt	r0, #0
 5d4:	mov	r2, #224	; 0xe0
 5d8:	bl	0 <__assert_fail>
 5dc:	movw	r1, #0
 5e0:	movt	r1, #0
 5e4:	ldr	r3, [pc, #28]	; 608 <print_object+0x420>
 5e8:	movw	r0, #0
 5ec:	movt	r0, #0
 5f0:	mov	r2, #224	; 0xe0
 5f4:	bl	0 <__assert_fail>
 5f8:	.word	0x000000d4
 5fc:	.word	0x000000ec
 600:	.word	0x000000bc
 604:	.word	0x000000a4
 608:	.word	0x00000088

0000060c <print_enum>:
 60c:	strd	r4, [sp, #-32]!	; 0xffffffe0
 610:	strd	r6, [sp, #8]
 614:	subs	r7, r0, #0
 618:	strd	r8, [sp, #16]
 61c:	str	sl, [sp, #24]
 620:	str	lr, [sp, #28]
 624:	beq	910 <print_enum+0x304>
 628:	ldr	r3, [r7]
 62c:	sub	r3, r7, r3
 630:	ldrh	r2, [r3]
 634:	cmp	r2, #5
 638:	bls	8d8 <print_enum+0x2cc>
 63c:	ldrh	r1, [r3, #4]
 640:	cmp	r1, #0
 644:	beq	8d8 <print_enum+0x2cc>
 648:	ldr	r3, [r7, r1]
 64c:	add	r1, r7, r1
 650:	movw	r0, #0
 654:	movt	r0, #0
 658:	add	r3, r3, #4
 65c:	add	r1, r1, r3
 660:	bl	0 <printf>
 664:	ldr	r3, [r7]
 668:	sub	r3, r7, r3
 66c:	ldrh	r2, [r3]
 670:	cmp	r2, #7
 674:	bls	8bc <print_enum+0x2b0>
 678:	ldrh	r3, [r3, #6]
 67c:	cmp	r3, #0
 680:	beq	8bc <print_enum+0x2b0>
 684:	ldr	r5, [r7, r3]
 688:	add	r4, r7, r3
 68c:	movw	r0, #0
 690:	movt	r0, #0
 694:	bl	0 <printf>
 698:	add	r5, r5, #4
 69c:	add	r6, r4, r5
 6a0:	cmp	r6, #0
 6a4:	beq	7ec <print_enum+0x1e0>
 6a8:	ldr	r3, [r6, #-4]
 6ac:	cmp	r3, #0
 6b0:	beq	7ec <print_enum+0x1e0>
 6b4:	ldr	r4, [r4, r5]
 6b8:	movw	r8, #0
 6bc:	movt	r8, #0
 6c0:	movw	sl, #0
 6c4:	movt	sl, #0
 6c8:	movw	r9, #0
 6cc:	movt	r9, #0
 6d0:	mov	r5, #0
 6d4:	add	r4, r6, r4
 6d8:	b	7c8 <print_enum+0x1bc>
 6dc:	ldr	r3, [r4]
 6e0:	sub	r3, r4, r3
 6e4:	ldrh	r2, [r3]
 6e8:	cmp	r2, #5
 6ec:	bls	8a0 <print_enum+0x294>
 6f0:	ldrh	r1, [r3, #4]
 6f4:	cmp	r1, #0
 6f8:	beq	8a0 <print_enum+0x294>
 6fc:	ldr	r3, [r4, r1]
 700:	add	r1, r4, r1
 704:	mov	r0, r8
 708:	add	r3, r3, #4
 70c:	add	r1, r1, r3
 710:	bl	0 <printf>
 714:	ldr	r3, [r4]
 718:	sub	r3, r4, r3
 71c:	ldrh	r2, [r3]
 720:	cmp	r2, #7
 724:	bls	79c <print_enum+0x190>
 728:	ldrh	r1, [r3, #6]
 72c:	cmp	r1, #0
 730:	beq	74c <print_enum+0x140>
 734:	mov	r0, r9
 738:	ldrd	r2, [r4, r1]
 73c:	bl	0 <printf>
 740:	ldr	r3, [r4]
 744:	sub	r3, r4, r3
 748:	ldrh	r2, [r3]
 74c:	cmp	r2, #9
 750:	bls	79c <print_enum+0x190>
 754:	ldrh	r3, [r3, #8]
 758:	cmp	r3, #0
 75c:	beq	79c <print_enum+0x190>
 760:	mov	r0, sl
 764:	bl	0 <printf>
 768:	ldr	r3, [r4]
 76c:	sub	r3, r4, r3
 770:	ldrh	r2, [r3]
 774:	cmp	r2, #9
 778:	movls	r0, #0
 77c:	bls	798 <print_enum+0x18c>
 780:	ldrh	r0, [r3, #8]
 784:	cmp	r0, #0
 788:	beq	798 <print_enum+0x18c>
 78c:	ldr	r3, [r4, r0]
 790:	add	r0, r4, r0
 794:	add	r0, r0, r3
 798:	bl	1e8 <print_object>
 79c:	mov	r0, #125	; 0x7d
 7a0:	add	r5, r5, #1
 7a4:	bl	0 <putchar>
 7a8:	ldr	r3, [r6, #-4]
 7ac:	cmp	r5, r3
 7b0:	bcs	7ec <print_enum+0x1e0>
 7b4:	ldr	r3, [r6, r5, lsl #2]
 7b8:	add	r4, r6, r5, lsl #2
 7bc:	mov	r0, #44	; 0x2c
 7c0:	add	r4, r4, r3
 7c4:	bl	0 <putchar>
 7c8:	cmp	r4, #0
 7cc:	bne	6dc <print_enum+0xd0>
 7d0:	movw	r1, #0
 7d4:	movt	r1, #0
 7d8:	ldr	r3, [pc, #332]	; 92c <print_enum+0x320>
 7dc:	movw	r0, #0
 7e0:	movt	r0, #0
 7e4:	mov	r2, #159	; 0x9f
 7e8:	bl	0 <__assert_fail>
 7ec:	mov	r0, #93	; 0x5d
 7f0:	bl	0 <putchar>
 7f4:	ldr	r3, [r7]
 7f8:	sub	r3, r7, r3
 7fc:	ldrh	r2, [r3]
 800:	cmp	r2, #9
 804:	bhi	864 <print_enum+0x258>
 808:	movw	r0, #0
 80c:	movt	r0, #0
 810:	bl	0 <printf>
 814:	ldr	r3, [r7]
 818:	sub	r3, r7, r3
 81c:	ldrh	r2, [r3]
 820:	cmp	r2, #11
 824:	bls	8f4 <print_enum+0x2e8>
 828:	ldrh	r3, [r3, #10]
 82c:	cmp	r3, #0
 830:	beq	8f4 <print_enum+0x2e8>
 834:	ldr	r0, [r7, r3]
 838:	add	r7, r7, r3
 83c:	add	r0, r7, r0
 840:	bl	28 <print_type>
 844:	mov	r0, #125	; 0x7d
 848:	ldrd	r4, [sp]
 84c:	ldrd	r6, [sp, #8]
 850:	ldrd	r8, [sp, #16]
 854:	ldr	sl, [sp, #24]
 858:	ldr	lr, [sp, #28]
 85c:	add	sp, sp, #32
 860:	b	0 <putchar>
 864:	ldrh	r3, [r3, #8]
 868:	cmp	r3, #0
 86c:	beq	808 <print_enum+0x1fc>
 870:	ldrb	r1, [r7, r3]
 874:	movw	r2, #0
 878:	movt	r2, #0
 87c:	movw	r3, #0
 880:	movt	r3, #0
 884:	movw	r0, #0
 888:	movt	r0, #0
 88c:	cmp	r1, #0
 890:	movne	r1, r2
 894:	moveq	r1, r3
 898:	bl	0 <printf>
 89c:	b	808 <print_enum+0x1fc>
 8a0:	movw	r1, #0
 8a4:	movt	r1, #0
 8a8:	ldr	r3, [pc, #124]	; 92c <print_enum+0x320>
 8ac:	movw	r0, #0
 8b0:	movt	r0, #0
 8b4:	mov	r2, #159	; 0x9f
 8b8:	bl	0 <__assert_fail>
 8bc:	movw	r1, #0
 8c0:	movt	r1, #0
 8c4:	ldr	r3, [pc, #100]	; 930 <print_enum+0x324>
 8c8:	movw	r0, #0
 8cc:	movt	r0, #0
 8d0:	mov	r2, #183	; 0xb7
 8d4:	bl	0 <__assert_fail>
 8d8:	movw	r1, #0
 8dc:	movt	r1, #0
 8e0:	ldr	r3, [pc, #76]	; 934 <print_enum+0x328>
 8e4:	movw	r0, #0
 8e8:	movt	r0, #0
 8ec:	mov	r2, #177	; 0xb1
 8f0:	bl	0 <__assert_fail>
 8f4:	movw	r1, #0
 8f8:	movt	r1, #0
 8fc:	ldr	r3, [pc, #52]	; 938 <print_enum+0x32c>
 900:	movw	r0, #0
 904:	movt	r0, #0
 908:	mov	r2, #185	; 0xb9
 90c:	bl	0 <__assert_fail>
 910:	movw	r1, #0
 914:	movt	r1, #0
 918:	ldr	r3, [pc, #20]	; 934 <print_enum+0x328>
 91c:	movw	r0, #0
 920:	movt	r0, #0
 924:	mov	r2, #177	; 0xb1
 928:	bl	0 <__assert_fail>
 92c:	.word	0x00000134
 930:	.word	0x0000011c
 934:	.word	0x00000104
 938:	.word	0x0000014c

0000093c <print_schema>:
 93c:	strd	r4, [sp, #-16]!
 940:	str	r6, [sp, #8]
 944:	subs	r6, r0, #0
 948:	str	lr, [sp, #12]
 94c:	beq	be4 <print_schema+0x2a8>
 950:	ldr	r3, [r6]
 954:	sub	r3, r6, r3
 958:	ldrh	r2, [r3]
 95c:	cmp	r2, #5
 960:	bls	bac <print_schema+0x270>
 964:	ldrh	r3, [r3, #4]
 968:	cmp	r3, #0
 96c:	beq	bac <print_schema+0x270>
 970:	ldr	r5, [r6, r3]
 974:	mov	r0, #123	; 0x7b
 978:	add	r3, r6, r3
 97c:	add	r5, r5, #4
 980:	add	r5, r3, r5
 984:	bl	0 <putchar>
 988:	movw	r0, #0
 98c:	movt	r0, #0
 990:	bl	0 <printf>
 994:	cmp	r5, #0
 998:	beq	a00 <print_schema+0xc4>
 99c:	ldr	r3, [r5, #-4]
 9a0:	cmp	r3, #0
 9a4:	movne	r4, #0
 9a8:	bne	9d8 <print_schema+0x9c>
 9ac:	b	a00 <print_schema+0xc4>
 9b0:	ldr	r0, [r5, r4, lsl #2]
 9b4:	add	r4, r4, #1
 9b8:	add	r0, r3, r0
 9bc:	bl	1e8 <print_object>
 9c0:	ldr	r3, [r5, #-4]
 9c4:	cmp	r4, r3
 9c8:	bcs	a00 <print_schema+0xc4>
 9cc:	mov	r0, #44	; 0x2c
 9d0:	bl	0 <putchar>
 9d4:	ldr	r3, [r5, #-4]
 9d8:	cmp	r4, r3
 9dc:	add	r3, r5, r4, lsl #2
 9e0:	bcc	9b0 <print_schema+0x74>
 9e4:	movw	r1, #0
 9e8:	movt	r1, #0
 9ec:	ldr	r3, [pc, #524]	; c00 <print_schema+0x2c4>
 9f0:	movw	r0, #0
 9f4:	movt	r0, #0
 9f8:	mov	r2, #215	; 0xd7
 9fc:	bl	0 <__assert_fail>
 a00:	mov	r0, #93	; 0x5d
 a04:	bl	0 <putchar>
 a08:	ldr	r3, [r6]
 a0c:	sub	r3, r6, r3
 a10:	ldrh	r2, [r3]
 a14:	cmp	r2, #7
 a18:	bls	bc8 <print_schema+0x28c>
 a1c:	ldrh	r3, [r3, #6]
 a20:	cmp	r3, #0
 a24:	beq	bc8 <print_schema+0x28c>
 a28:	ldr	r5, [r6, r3]
 a2c:	add	r3, r6, r3
 a30:	movw	r0, #0
 a34:	movt	r0, #0
 a38:	add	r5, r5, #4
 a3c:	add	r5, r3, r5
 a40:	bl	0 <printf>
 a44:	cmp	r5, #0
 a48:	beq	ab0 <print_schema+0x174>
 a4c:	ldr	r3, [r5, #-4]
 a50:	cmp	r3, #0
 a54:	movne	r4, #0
 a58:	bne	a88 <print_schema+0x14c>
 a5c:	b	ab0 <print_schema+0x174>
 a60:	ldr	r0, [r5, r4, lsl #2]
 a64:	add	r4, r4, #1
 a68:	add	r0, r3, r0
 a6c:	bl	60c <print_enum>
 a70:	ldr	r3, [r5, #-4]
 a74:	cmp	r4, r3
 a78:	bcs	ab0 <print_schema+0x174>
 a7c:	mov	r0, #44	; 0x2c
 a80:	bl	0 <putchar>
 a84:	ldr	r3, [r5, #-4]
 a88:	cmp	r3, r4
 a8c:	add	r3, r5, r4, lsl #2
 a90:	bhi	a60 <print_schema+0x124>
 a94:	movw	r1, #0
 a98:	movt	r1, #0
 a9c:	ldr	r3, [pc, #352]	; c04 <print_schema+0x2c8>
 aa0:	movw	r0, #0
 aa4:	movt	r0, #0
 aa8:	mov	r2, #174	; 0xae
 aac:	bl	0 <__assert_fail>
 ab0:	mov	r0, #93	; 0x5d
 ab4:	bl	0 <putchar>
 ab8:	ldr	r3, [r6]
 abc:	sub	r3, r6, r3
 ac0:	ldrh	r2, [r3]
 ac4:	cmp	r2, #9
 ac8:	bls	b90 <print_schema+0x254>
 acc:	ldrh	r1, [r3, #8]
 ad0:	cmp	r1, #0
 ad4:	beq	b00 <print_schema+0x1c4>
 ad8:	ldr	r3, [r6, r1]
 adc:	add	r1, r6, r1
 ae0:	movw	r0, #0
 ae4:	movt	r0, #0
 ae8:	add	r3, r3, #4
 aec:	add	r1, r1, r3
 af0:	bl	0 <printf>
 af4:	ldr	r3, [r6]
 af8:	sub	r3, r6, r3
 afc:	ldrh	r2, [r3]
 b00:	cmp	r2, #11
 b04:	bls	b90 <print_schema+0x254>
 b08:	ldrh	r1, [r3, #10]
 b0c:	cmp	r1, #0
 b10:	beq	b3c <print_schema+0x200>
 b14:	ldr	r3, [r6, r1]
 b18:	add	r1, r6, r1
 b1c:	movw	r0, #0
 b20:	movt	r0, #0
 b24:	add	r3, r3, #4
 b28:	add	r1, r1, r3
 b2c:	bl	0 <printf>
 b30:	ldr	r3, [r6]
 b34:	sub	r3, r6, r3
 b38:	ldrh	r2, [r3]
 b3c:	cmp	r2, #13
 b40:	bls	b90 <print_schema+0x254>
 b44:	ldrh	r3, [r3, #12]
 b48:	cmp	r3, #0
 b4c:	beq	b90 <print_schema+0x254>
 b50:	movw	r0, #0
 b54:	movt	r0, #0
 b58:	bl	0 <printf>
 b5c:	ldr	r3, [r6]
 b60:	sub	r3, r6, r3
 b64:	ldrh	r2, [r3]
 b68:	cmp	r2, #13
 b6c:	movls	r0, #0
 b70:	bls	b8c <print_schema+0x250>
 b74:	ldrh	r0, [r3, #12]
 b78:	cmp	r0, #0
 b7c:	beq	b8c <print_schema+0x250>
 b80:	ldr	r3, [r6, r0]
 b84:	add	r6, r6, r0
 b88:	add	r0, r6, r3
 b8c:	bl	1e8 <print_object>
 b90:	movw	r0, #0
 b94:	movt	r0, #0
 b98:	ldrd	r4, [sp]
 b9c:	ldr	r6, [sp, #8]
 ba0:	ldr	lr, [sp, #12]
 ba4:	add	sp, sp, #16
 ba8:	b	0 <puts>
 bac:	movw	r1, #0
 bb0:	movt	r1, #0
 bb4:	ldr	r3, [pc, #76]	; c08 <print_schema+0x2cc>
 bb8:	movw	r0, #0
 bbc:	movt	r0, #0
 bc0:	mov	r2, #237	; 0xed
 bc4:	bl	0 <__assert_fail>
 bc8:	movw	r1, #0
 bcc:	movt	r1, #0
 bd0:	ldr	r3, [pc, #52]	; c0c <print_schema+0x2d0>
 bd4:	movw	r0, #0
 bd8:	movt	r0, #0
 bdc:	mov	r2, #238	; 0xee
 be0:	bl	0 <__assert_fail>
 be4:	movw	r1, #0
 be8:	movt	r1, #0
 bec:	ldr	r3, [pc, #20]	; c08 <print_schema+0x2cc>
 bf0:	movw	r0, #0
 bf4:	movt	r0, #0
 bf8:	mov	r2, #237	; 0xed
 bfc:	bl	0 <__assert_fail>
 c00:	.word	0x00000188
 c04:	.word	0x000001bc
 c08:	.word	0x0000016c
 c0c:	.word	0x000001a4

00000c10 <load_and_dump_schema>:
 c10:	movw	r1, #0
 c14:	movt	r1, #0
 c18:	strd	r4, [sp, #-24]!	; 0xffffffe8
 c1c:	strd	r6, [sp, #8]
 c20:	str	r8, [sp, #16]
 c24:	mov	r8, r0
 c28:	str	lr, [sp, #20]
 c2c:	bl	0 <fopen>
 c30:	subs	r6, r0, #0
 c34:	beq	d50 <load_and_dump_schema+0x140>
 c38:	mov	r2, #2
 c3c:	mov	r1, #0
 c40:	bl	0 <fseek>
 c44:	mov	r0, r6
 c48:	bl	0 <ftell>
 c4c:	mov	r5, r0
 c50:	movw	r3, #10000	; 0x2710
 c54:	cmp	r5, r3
 c58:	mov	r0, r6
 c5c:	bhi	d98 <load_and_dump_schema+0x188>
 c60:	bl	0 <rewind>
 c64:	cmp	r5, #0
 c68:	movne	r0, r5
 c6c:	moveq	r0, #1
 c70:	bl	0 <malloc>
 c74:	subs	r4, r0, #0
 c78:	beq	da0 <load_and_dump_schema+0x190>
 c7c:	mov	r7, #0
 c80:	b	c88 <load_and_dump_schema+0x78>
 c84:	add	r7, r7, r0
 c88:	mov	r3, r6
 c8c:	sub	r2, r5, r7
 c90:	mov	r1, #1
 c94:	add	r0, r4, r7
 c98:	bl	0 <fread>
 c9c:	cmp	r0, #0
 ca0:	bne	c84 <load_and_dump_schema+0x74>
 ca4:	cmp	r5, r7
 ca8:	mov	r0, r6
 cac:	bne	d44 <load_and_dump_schema+0x134>
 cb0:	bl	0 <fclose>
 cb4:	cmp	r5, #11
 cb8:	bls	dac <load_and_dump_schema+0x19c>
 cbc:	ldr	r2, [r4, #4]
 cc0:	movw	r3, #17986	; 0x4642
 cc4:	movt	r3, #21314	; 0x5342
 cc8:	cmp	r2, r3
 ccc:	beq	d0c <load_and_dump_schema+0xfc>
 cd0:	ldr	r0, [r4, #8]
 cd4:	movw	r1, #17986	; 0x4642
 cd8:	movt	r1, #21314	; 0x5342
 cdc:	movw	r3, #0
 ce0:	movt	r3, #0
 ce4:	ldr	r3, [r3]
 ce8:	cmp	r0, r1
 cec:	beq	d74 <load_and_dump_schema+0x164>
 cf0:	movw	r0, #0
 cf4:	movt	r0, #0
 cf8:	mov	r2, #27
 cfc:	mov	r1, #1
 d00:	mvn	r5, #0
 d04:	bl	0 <fwrite>
 d08:	b	d24 <load_and_dump_schema+0x114>
 d0c:	ldr	r0, [r4]
 d10:	adds	r5, r4, r0
 d14:	beq	cd0 <load_and_dump_schema+0xc0>
 d18:	mov	r0, r5
 d1c:	mov	r5, #0
 d20:	bl	93c <print_schema>
 d24:	mov	r0, r4
 d28:	bl	0 <free>
 d2c:	mov	r0, r5
 d30:	ldrd	r4, [sp]
 d34:	ldrd	r6, [sp, #8]
 d38:	ldr	r8, [sp, #16]
 d3c:	add	sp, sp, #20
 d40:	pop	{pc}		; (ldr pc, [sp], #4)
 d44:	bl	0 <fclose>
 d48:	mov	r0, r4
 d4c:	bl	0 <free>
 d50:	movw	r3, #0
 d54:	movt	r3, #0
 d58:	mov	r2, r8
 d5c:	movw	r1, #0
 d60:	movt	r1, #0
 d64:	ldr	r0, [r3]
 d68:	mvn	r5, #0
 d6c:	bl	0 <fprintf>
 d70:	b	d2c <load_and_dump_schema+0x11c>
 d74:	add	r0, r2, #4
 d78:	adds	r5, r4, r0
 d7c:	beq	cf0 <load_and_dump_schema+0xe0>
 d80:	movw	r0, #0
 d84:	movt	r0, #0
 d88:	mov	r2, #40	; 0x28
 d8c:	mov	r1, #1
 d90:	bl	0 <fwrite>
 d94:	b	d18 <load_and_dump_schema+0x108>
 d98:	bl	0 <fclose>
 d9c:	b	d50 <load_and_dump_schema+0x140>
 da0:	mov	r0, r6
 da4:	bl	0 <fclose>
 da8:	b	d50 <load_and_dump_schema+0x140>
 dac:	movw	r3, #0
 db0:	movt	r3, #0
 db4:	mov	r2, r8
 db8:	movw	r1, #0
 dbc:	movt	r1, #0
 dc0:	ldr	r0, [r3]
 dc4:	mvn	r5, #0
 dc8:	bl	0 <fprintf>
 dcc:	b	d24 <load_and_dump_schema+0x114>

Disassembly of section .text.startup:

00000000 <main>:
   0:	cmp	r0, #2
   4:	bne	10 <main+0x10>
   8:	ldr	r0, [r1, #4]
   c:	b	c10 <load_and_dump_schema>
  10:	str	r4, [sp, #-8]!
  14:	movw	r4, #0
  18:	movt	r4, #0
  1c:	mov	r2, #28
  20:	mov	r1, #1
  24:	ldr	r3, [r4]
  28:	movw	r0, #0
  2c:	movt	r0, #0
  30:	str	lr, [sp, #4]
  34:	bl	0 <fwrite>
  38:	mov	r2, #74	; 0x4a
  3c:	mov	r1, #1
  40:	ldr	r3, [r4]
  44:	movw	r0, #0
  48:	movt	r0, #0
  4c:	bl	0 <fwrite>
  50:	movw	r0, #0
  54:	movt	r0, #0
  58:	ldr	r3, [r4]
  5c:	mov	r2, #180	; 0xb4
  60:	mov	r1, #1
  64:	bl	0 <fwrite>
  68:	mvn	r0, #0
  6c:	bl	0 <exit>
