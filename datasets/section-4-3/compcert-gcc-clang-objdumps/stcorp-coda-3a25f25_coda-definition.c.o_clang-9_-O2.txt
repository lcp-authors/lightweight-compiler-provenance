
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-definition.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_product_variable_delete>:
       0:	push	{r4, sl, fp, lr}
       4:	add	fp, sp, #8
       8:	cmp	r0, #0
       c:	beq	50 <coda_product_variable_delete+0x50>
      10:	mov	r4, r0
      14:	ldr	r0, [r0]
      18:	cmp	r0, #0
      1c:	beq	24 <coda_product_variable_delete+0x24>
      20:	bl	0 <free>
      24:	ldr	r0, [r4, #4]
      28:	cmp	r0, #0
      2c:	beq	34 <coda_product_variable_delete+0x34>
      30:	bl	0 <coda_expression_delete>
      34:	ldr	r0, [r4, #8]
      38:	cmp	r0, #0
      3c:	beq	44 <coda_product_variable_delete+0x44>
      40:	bl	0 <coda_expression_delete>
      44:	mov	r0, r4
      48:	pop	{r4, sl, fp, lr}
      4c:	b	0 <free>
      50:	movw	r0, #0
      54:	movw	r1, #0
      58:	movw	r3, #0
      5c:	mov	r2, #49	; 0x31
      60:	movt	r0, #0
      64:	movt	r1, #0
      68:	movt	r3, #0
      6c:	bl	0 <__assert_fail>

00000070 <coda_product_variable_new>:
      70:	push	{r4, r5, fp, lr}
      74:	add	fp, sp, #8
      78:	sub	sp, sp, #8
      7c:	mov	r5, r0
      80:	bl	0 <coda_is_identifier>
      84:	cmp	r0, #0
      88:	beq	e8 <coda_product_variable_new+0x78>
      8c:	mov	r0, #12
      90:	bl	0 <malloc>
      94:	cmp	r0, #0
      98:	beq	104 <coda_product_variable_new+0x94>
      9c:	mov	r4, r0
      a0:	mov	r0, #0
      a4:	str	r0, [r4, #4]
      a8:	str	r0, [r4, #8]
      ac:	mov	r0, r5
      b0:	bl	0 <strdup>
      b4:	cmp	r0, #0
      b8:	str	r0, [r4]
      bc:	bne	12c <coda_product_variable_new+0xbc>
      c0:	movw	r1, #0
      c4:	movw	r2, #0
      c8:	mvn	r0, #0
      cc:	mov	r3, #93	; 0x5d
      d0:	movt	r1, #0
      d4:	movt	r2, #0
      d8:	bl	0 <coda_set_error>
      dc:	mov	r0, r4
      e0:	bl	0 <free>
      e4:	b	128 <coda_product_variable_new+0xb8>
      e8:	movw	r0, #65136	; 0xfe70
      ec:	movw	r1, #0
      f0:	mov	r2, r5
      f4:	movt	r0, #65535	; 0xffff
      f8:	movt	r1, #0
      fc:	bl	0 <coda_set_error>
     100:	b	128 <coda_product_variable_new+0xb8>
     104:	movw	r1, #0
     108:	movw	r3, #0
     10c:	mov	r0, #82	; 0x52
     110:	mov	r2, #12
     114:	movt	r1, #0
     118:	movt	r3, #0
     11c:	str	r0, [sp]
     120:	mvn	r0, #0
     124:	bl	0 <coda_set_error>
     128:	mov	r4, #0
     12c:	mov	r0, r4
     130:	sub	sp, fp, #8
     134:	pop	{r4, r5, fp, pc}

00000138 <coda_product_variable_set_size_expression>:
     138:	push	{fp, lr}
     13c:	mov	fp, sp
     140:	cmp	r1, #0
     144:	beq	17c <coda_product_variable_set_size_expression+0x44>
     148:	ldr	r2, [r0, #4]
     14c:	cmp	r2, #0
     150:	beq	170 <coda_product_variable_set_size_expression+0x38>
     154:	movw	r0, #65136	; 0xfe70
     158:	movw	r1, #0
     15c:	movt	r0, #65535	; 0xffff
     160:	movt	r1, #0
     164:	bl	0 <coda_set_error>
     168:	mvn	r0, #0
     16c:	pop	{fp, pc}
     170:	str	r1, [r0, #4]
     174:	mov	r0, #0
     178:	pop	{fp, pc}
     17c:	movw	r0, #0
     180:	movw	r1, #0
     184:	movw	r3, #0
     188:	mov	r2, #103	; 0x67
     18c:	movt	r0, #0
     190:	movt	r1, #0
     194:	movt	r3, #0
     198:	bl	0 <__assert_fail>

0000019c <coda_product_variable_set_init_expression>:
     19c:	push	{fp, lr}
     1a0:	mov	fp, sp
     1a4:	cmp	r1, #0
     1a8:	beq	1e0 <coda_product_variable_set_init_expression+0x44>
     1ac:	ldr	r2, [r0, #8]
     1b0:	cmp	r2, #0
     1b4:	beq	1d4 <coda_product_variable_set_init_expression+0x38>
     1b8:	movw	r0, #65136	; 0xfe70
     1bc:	movw	r1, #0
     1c0:	movt	r0, #65535	; 0xffff
     1c4:	movt	r1, #0
     1c8:	bl	0 <coda_set_error>
     1cc:	mvn	r0, #0
     1d0:	pop	{fp, pc}
     1d4:	str	r1, [r0, #8]
     1d8:	mov	r0, #0
     1dc:	pop	{fp, pc}
     1e0:	movw	r0, #0
     1e4:	movw	r1, #0
     1e8:	movw	r3, #0
     1ec:	mov	r2, #115	; 0x73
     1f0:	movt	r0, #0
     1f4:	movt	r1, #0
     1f8:	movt	r3, #0
     1fc:	bl	0 <__assert_fail>

00000200 <coda_product_variable_validate>:
     200:	push	{fp, lr}
     204:	mov	fp, sp
     208:	ldr	r1, [r0, #8]
     20c:	mov	r0, #0
     210:	cmp	r1, #0
     214:	popne	{fp, pc}
     218:	movw	r0, #65136	; 0xfe70
     21c:	movw	r1, #0
     220:	movt	r0, #65535	; 0xffff
     224:	movt	r1, #0
     228:	bl	0 <coda_set_error>
     22c:	mvn	r0, #0
     230:	pop	{fp, pc}

00000234 <coda_product_variable_get_size>:
     234:	push	{r4, r5, r6, r7, fp, lr}
     238:	add	fp, sp, #16
     23c:	sub	sp, sp, #8
     240:	cmp	r0, #0
     244:	beq	25c <coda_product_variable_get_size+0x28>
     248:	cmp	r1, #0
     24c:	mov	r6, r1
     250:	movne	r4, r2
     254:	cmpne	r2, #0
     258:	bne	27c <coda_product_variable_get_size+0x48>
     25c:	movw	r0, #0
     260:	movw	r1, #0
     264:	movw	r3, #0
     268:	mov	r2, #180	; 0xb4
     26c:	movt	r0, #0
     270:	movt	r1, #0
     274:	movt	r3, #0
     278:	bl	0 <__assert_fail>
     27c:	mov	r5, r0
     280:	ldr	r0, [r0, #32]
     284:	cmp	r0, #0
     288:	beq	328 <coda_product_variable_get_size+0xf4>
     28c:	ldr	r0, [r5, #24]
     290:	mov	r1, r6
     294:	ldr	r0, [r0, #40]	; 0x28
     298:	bl	0 <coda_hashtable_get_index_from_name>
     29c:	cmn	r0, #1
     2a0:	beq	2d0 <coda_product_variable_get_size+0x9c>
     2a4:	mov	r7, r0
     2a8:	ldr	r0, [r5, #32]
     2ac:	ldr	r0, [r0, r7, lsl #2]
     2b0:	cmp	r0, #0
     2b4:	beq	304 <coda_product_variable_get_size+0xd0>
     2b8:	ldr	r0, [r5, #28]
     2bc:	ldr	r0, [r0, r7, lsl #2]
     2c0:	str	r0, [r4]
     2c4:	mov	r0, #0
     2c8:	sub	sp, fp, #16
     2cc:	pop	{r4, r5, r6, r7, fp, pc}
     2d0:	ldr	r0, [r5, #24]
     2d4:	movw	r1, #0
     2d8:	movt	r1, #0
     2dc:	ldr	r3, [r0, #4]
     2e0:	ldr	r0, [r0, #44]	; 0x2c
     2e4:	ldr	r2, [r0]
     2e8:	movw	r0, #65136	; 0xfe70
     2ec:	str	r6, [sp]
     2f0:	movt	r0, #65535	; 0xffff
     2f4:	bl	0 <coda_set_error>
     2f8:	mvn	r0, #0
     2fc:	sub	sp, fp, #16
     300:	pop	{r4, r5, r6, r7, fp, pc}
     304:	mov	r0, r5
     308:	mov	r1, r7
     30c:	bl	340 <init_product_variable>
     310:	mov	r1, r0
     314:	mvn	r0, #0
     318:	cmp	r1, #0
     31c:	beq	2b8 <coda_product_variable_get_size+0x84>
     320:	sub	sp, fp, #16
     324:	pop	{r4, r5, r6, r7, fp, pc}
     328:	movw	r0, #0
     32c:	movw	r1, #0
     330:	movw	r3, #0
     334:	mov	r2, #181	; 0xb5
     338:	movt	r0, #0
     33c:	b	270 <coda_product_variable_get_size+0x3c>

00000340 <init_product_variable>:
     340:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     344:	add	fp, sp, #24
     348:	sub	sp, sp, #536	; 0x218
     34c:	mov	r5, r0
     350:	mov	r0, #0
     354:	mov	r4, r1
     358:	mov	r7, #1
     35c:	str	r0, [sp, #12]
     360:	add	r0, sp, #16
     364:	mov	r1, r5
     368:	str	r7, [sp, #8]
     36c:	bl	0 <coda_cursor_set_product>
     370:	mvn	r6, #0
     374:	cmp	r0, #0
     378:	bne	470 <init_product_variable+0x130>
     37c:	ldr	r0, [r5, #24]
     380:	ldr	r0, [r0, #36]	; 0x24
     384:	ldr	r0, [r0, r4, lsl #2]
     388:	ldr	r0, [r0, #4]
     38c:	cmp	r0, #0
     390:	beq	3c8 <init_product_variable+0x88>
     394:	add	r1, sp, #16
     398:	add	r2, sp, #8
     39c:	bl	0 <coda_expression_eval_integer>
     3a0:	cmp	r0, #0
     3a4:	beq	3c4 <init_product_variable+0x84>
     3a8:	ldr	r0, [r5, #24]
     3ac:	ldr	r0, [r0, #36]	; 0x24
     3b0:	ldr	r0, [r0, r4, lsl #2]
     3b4:	ldr	r1, [r0]
     3b8:	movw	r0, #0
     3bc:	movt	r0, #0
     3c0:	b	43c <init_product_variable+0xfc>
     3c4:	ldr	r7, [sp, #8]
     3c8:	ldr	r0, [r5, #28]
     3cc:	str	r7, [r0, r4, lsl #2]
     3d0:	lsl	r7, r7, #3
     3d4:	mov	r0, r7
     3d8:	bl	0 <malloc>
     3dc:	ldr	r1, [r5, #32]
     3e0:	str	r0, [r1, r4, lsl #2]
     3e4:	ldr	r0, [r5, #32]
     3e8:	ldr	r0, [r0, r4, lsl #2]
     3ec:	cmp	r0, #0
     3f0:	beq	448 <init_product_variable+0x108>
     3f4:	mov	r1, #0
     3f8:	mov	r2, r7
     3fc:	mov	r6, #0
     400:	bl	0 <memset>
     404:	ldr	r0, [r5, #24]
     408:	add	r1, sp, #16
     40c:	ldr	r0, [r0, #36]	; 0x24
     410:	ldr	r0, [r0, r4, lsl #2]
     414:	ldr	r0, [r0, #8]
     418:	bl	0 <coda_expression_eval_void>
     41c:	cmp	r0, #0
     420:	beq	470 <init_product_variable+0x130>
     424:	ldr	r0, [r5, #24]
     428:	ldr	r0, [r0, #36]	; 0x24
     42c:	ldr	r0, [r0, r4, lsl #2]
     430:	ldr	r1, [r0]
     434:	movw	r0, #0
     438:	movt	r0, #0
     43c:	bl	0 <coda_add_error_message>
     440:	mvn	r6, #0
     444:	b	470 <init_product_variable+0x130>
     448:	movw	r1, #0
     44c:	movw	r3, #0
     450:	mov	r0, #162	; 0xa2
     454:	mov	r2, r7
     458:	mvn	r6, #0
     45c:	movt	r1, #0
     460:	movt	r3, #0
     464:	str	r0, [sp]
     468:	mvn	r0, #0
     46c:	bl	0 <coda_set_error>
     470:	mov	r0, r6
     474:	sub	sp, fp, #24
     478:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0000047c <coda_product_variable_get_pointer>:
     47c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
     480:	add	fp, sp, #24
     484:	sub	sp, sp, #8
     488:	cmp	r0, #0
     48c:	beq	4a4 <coda_product_variable_get_pointer+0x28>
     490:	cmp	r1, #0
     494:	mov	r4, r1
     498:	movne	r8, r3
     49c:	cmpne	r3, #0
     4a0:	bne	4c4 <coda_product_variable_get_pointer+0x48>
     4a4:	movw	r0, #0
     4a8:	movw	r1, #0
     4ac:	movw	r3, #0
     4b0:	mov	r2, #208	; 0xd0
     4b4:	movt	r0, #0
     4b8:	movt	r1, #0
     4bc:	movt	r3, #0
     4c0:	bl	0 <__assert_fail>
     4c4:	mov	r7, r0
     4c8:	ldr	r0, [r0, #24]
     4cc:	mov	r1, r4
     4d0:	mov	r5, r2
     4d4:	ldr	r0, [r0, #40]	; 0x28
     4d8:	bl	0 <coda_hashtable_get_index_from_name>
     4dc:	cmn	r0, #1
     4e0:	beq	52c <coda_product_variable_get_pointer+0xb0>
     4e4:	mov	r6, r0
     4e8:	ldr	r0, [r7, #32]
     4ec:	ldr	r0, [r0, r6, lsl #2]
     4f0:	cmp	r0, #0
     4f4:	beq	57c <coda_product_variable_get_pointer+0x100>
     4f8:	cmp	r5, #0
     4fc:	bmi	554 <coda_product_variable_get_pointer+0xd8>
     500:	ldr	r0, [r7, #28]
     504:	ldr	r0, [r0, r6, lsl #2]
     508:	cmp	r0, r5
     50c:	ble	554 <coda_product_variable_get_pointer+0xd8>
     510:	ldr	r0, [r7, #32]
     514:	ldr	r0, [r0, r6, lsl #2]
     518:	add	r0, r0, r5, lsl #3
     51c:	str	r0, [r8]
     520:	mov	r0, #0
     524:	sub	sp, fp, #24
     528:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
     52c:	ldr	r0, [r7, #24]
     530:	movw	r1, #0
     534:	movt	r1, #0
     538:	ldr	r3, [r0, #4]
     53c:	ldr	r0, [r0, #44]	; 0x2c
     540:	ldr	r2, [r0]
     544:	movw	r0, #65136	; 0xfe70
     548:	str	r4, [sp]
     54c:	movt	r0, #65535	; 0xffff
     550:	b	56c <coda_product_variable_get_pointer+0xf0>
     554:	movw	r0, #65136	; 0xfe70
     558:	movw	r1, #0
     55c:	mov	r2, r5
     560:	mov	r3, r4
     564:	movt	r0, #65535	; 0xffff
     568:	movt	r1, #0
     56c:	bl	0 <coda_set_error>
     570:	mvn	r0, #0
     574:	sub	sp, fp, #24
     578:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
     57c:	mov	r0, r7
     580:	mov	r1, r6
     584:	bl	340 <init_product_variable>
     588:	mov	r1, r0
     58c:	mvn	r0, #0
     590:	cmp	r1, #0
     594:	beq	4f8 <coda_product_variable_get_pointer+0x7c>
     598:	sub	sp, fp, #24
     59c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000005a0 <coda_product_definition_delete>:
     5a0:	push	{r4, r5, r6, sl, fp, lr}
     5a4:	add	fp, sp, #16
     5a8:	mov	r4, r0
     5ac:	ldr	r0, [r0, #20]
     5b0:	cmp	r0, #0
     5b4:	beq	5e8 <coda_product_definition_delete+0x48>
     5b8:	ldr	r1, [r4, #16]
     5bc:	cmp	r1, #1
     5c0:	blt	5e4 <coda_product_definition_delete+0x44>
     5c4:	mov	r5, #0
     5c8:	ldr	r0, [r0, r5, lsl #2]
     5cc:	bl	0 <coda_detection_rule_delete>
     5d0:	ldr	r1, [r4, #16]
     5d4:	ldr	r0, [r4, #20]
     5d8:	add	r5, r5, #1
     5dc:	cmp	r5, r1
     5e0:	blt	5c8 <coda_product_definition_delete+0x28>
     5e4:	bl	0 <free>
     5e8:	ldr	r0, [r4, #8]
     5ec:	cmp	r0, #0
     5f0:	beq	5f8 <coda_product_definition_delete+0x58>
     5f4:	bl	0 <free>
     5f8:	ldr	r0, [r4, #12]
     5fc:	cmp	r0, #0
     600:	beq	608 <coda_product_definition_delete+0x68>
     604:	bl	0 <free>
     608:	ldr	r0, [r4, #28]
     60c:	cmp	r0, #0
     610:	beq	618 <coda_product_definition_delete+0x78>
     614:	bl	0 <coda_type_release>
     618:	ldr	r0, [r4, #40]	; 0x28
     61c:	cmp	r0, #0
     620:	beq	628 <coda_product_definition_delete+0x88>
     624:	bl	0 <coda_hashtable_delete>
     628:	ldr	r0, [r4, #36]	; 0x24
     62c:	cmp	r0, #0
     630:	beq	6a8 <coda_product_definition_delete+0x108>
     634:	ldr	r1, [r4, #32]
     638:	cmp	r1, #1
     63c:	blt	6a4 <coda_product_definition_delete+0x104>
     640:	mov	r6, #0
     644:	b	664 <coda_product_definition_delete+0xc4>
     648:	mov	r0, r5
     64c:	bl	0 <free>
     650:	ldr	r1, [r4, #32]
     654:	ldr	r0, [r4, #36]	; 0x24
     658:	add	r6, r6, #1
     65c:	cmp	r6, r1
     660:	bge	6a4 <coda_product_definition_delete+0x104>
     664:	ldr	r5, [r0, r6, lsl #2]
     668:	cmp	r5, #0
     66c:	beq	6b4 <coda_product_definition_delete+0x114>
     670:	ldr	r0, [r5]
     674:	cmp	r0, #0
     678:	beq	680 <coda_product_definition_delete+0xe0>
     67c:	bl	0 <free>
     680:	ldr	r0, [r5, #4]
     684:	cmp	r0, #0
     688:	beq	690 <coda_product_definition_delete+0xf0>
     68c:	bl	0 <coda_expression_delete>
     690:	ldr	r0, [r5, #8]
     694:	cmp	r0, #0
     698:	beq	648 <coda_product_definition_delete+0xa8>
     69c:	bl	0 <coda_expression_delete>
     6a0:	b	648 <coda_product_definition_delete+0xa8>
     6a4:	bl	0 <free>
     6a8:	mov	r0, r4
     6ac:	pop	{r4, r5, r6, sl, fp, lr}
     6b0:	b	0 <free>
     6b4:	movw	r0, #0
     6b8:	movw	r1, #0
     6bc:	movw	r3, #0
     6c0:	mov	r2, #49	; 0x31
     6c4:	movt	r0, #0
     6c8:	movt	r1, #0
     6cc:	movt	r3, #0
     6d0:	bl	0 <__assert_fail>

000006d4 <coda_product_definition_new>:
     6d4:	push	{r4, r5, r6, r7, fp, lr}
     6d8:	add	fp, sp, #16
     6dc:	sub	sp, sp, #8
     6e0:	mov	r6, r2
     6e4:	mov	r7, r1
     6e8:	mov	r5, r0
     6ec:	bl	0 <coda_is_identifier>
     6f0:	cmp	r0, #0
     6f4:	beq	770 <coda_product_definition_new+0x9c>
     6f8:	mov	r0, #48	; 0x30
     6fc:	bl	0 <malloc>
     700:	cmp	r0, #0
     704:	beq	78c <coda_product_definition_new+0xb8>
     708:	vmov.i32	q8, #0	; 0x00000000
     70c:	str	r7, [r0]
     710:	mov	r4, r0
     714:	str	r6, [r0, #4]
     718:	mov	r0, #0
     71c:	str	r0, [r4, #44]	; 0x2c
     720:	add	r0, r4, #12
     724:	vst1.32	{d16-d17}, [r0]
     728:	add	r0, r4, #28
     72c:	vst1.32	{d16-d17}, [r0]
     730:	mov	r0, r5
     734:	bl	0 <strdup>
     738:	cmp	r0, #0
     73c:	str	r0, [r4, #8]
     740:	beq	7b4 <coda_product_definition_new+0xe0>
     744:	mov	r0, #1
     748:	bl	0 <coda_hashtable_new>
     74c:	cmp	r0, #0
     750:	str	r0, [r4, #40]	; 0x28
     754:	bne	7dc <coda_product_definition_new+0x108>
     758:	movw	r1, #0
     75c:	movw	r2, #0
     760:	mvn	r0, #0
     764:	mov	r3, #320	; 0x140
     768:	movt	r1, #0
     76c:	b	7c8 <coda_product_definition_new+0xf4>
     770:	movw	r0, #65136	; 0xfe70
     774:	movw	r1, #0
     778:	mov	r2, r5
     77c:	movt	r0, #65535	; 0xffff
     780:	movt	r1, #0
     784:	bl	0 <coda_set_error>
     788:	b	7d8 <coda_product_definition_new+0x104>
     78c:	movw	r1, #0
     790:	movw	r3, #0
     794:	movw	r0, #291	; 0x123
     798:	mov	r2, #48	; 0x30
     79c:	movt	r1, #0
     7a0:	movt	r3, #0
     7a4:	str	r0, [sp]
     7a8:	mvn	r0, #0
     7ac:	bl	0 <coda_set_error>
     7b0:	b	7d8 <coda_product_definition_new+0x104>
     7b4:	movw	r1, #0
     7b8:	movw	r2, #0
     7bc:	mvn	r0, #0
     7c0:	movw	r3, #311	; 0x137
     7c4:	movt	r1, #0
     7c8:	movt	r2, #0
     7cc:	bl	0 <coda_set_error>
     7d0:	mov	r0, r4
     7d4:	bl	5a0 <coda_product_definition_delete>
     7d8:	mov	r4, #0
     7dc:	mov	r0, r4
     7e0:	sub	sp, fp, #16
     7e4:	pop	{r4, r5, r6, r7, fp, pc}

000007e8 <coda_product_definition_set_description>:
     7e8:	push	{r4, r5, fp, lr}
     7ec:	add	fp, sp, #8
     7f0:	mov	r5, r0
     7f4:	ldr	r0, [r0, #12]
     7f8:	cmp	r0, #0
     7fc:	beq	820 <coda_product_definition_set_description+0x38>
     800:	movw	r0, #65136	; 0xfe70
     804:	movw	r1, #0
     808:	movt	r0, #65535	; 0xffff
     80c:	movt	r1, #0
     810:	bl	0 <coda_set_error>
     814:	mvn	r4, #0
     818:	mov	r0, r4
     81c:	pop	{r4, r5, fp, pc}
     820:	mov	r4, #0
     824:	cmp	r1, #0
     828:	mov	r0, #0
     82c:	beq	840 <coda_product_definition_set_description+0x58>
     830:	mov	r0, r1
     834:	bl	0 <strdup>
     838:	cmp	r0, #0
     83c:	beq	84c <coda_product_definition_set_description+0x64>
     840:	str	r0, [r5, #12]
     844:	mov	r0, r4
     848:	pop	{r4, r5, fp, pc}
     84c:	movw	r1, #0
     850:	movw	r2, #0
     854:	mvn	r0, #0
     858:	movw	r3, #343	; 0x157
     85c:	mvn	r4, #0
     860:	movt	r1, #0
     864:	movt	r2, #0
     868:	bl	0 <coda_set_error>
     86c:	mov	r0, r4
     870:	pop	{r4, r5, fp, pc}

00000874 <coda_product_definition_set_root_type>:
     874:	push	{fp, lr}
     878:	mov	fp, sp
     87c:	cmp	r1, #0
     880:	beq	8c4 <coda_product_definition_set_root_type+0x50>
     884:	ldr	r2, [r0, #28]
     888:	cmp	r2, #0
     88c:	beq	8ac <coda_product_definition_set_root_type+0x38>
     890:	movw	r0, #65136	; 0xfe70
     894:	movw	r1, #0
     898:	movt	r0, #65535	; 0xffff
     89c:	movt	r1, #0
     8a0:	bl	0 <coda_set_error>
     8a4:	mvn	r0, #0
     8a8:	pop	{fp, pc}
     8ac:	str	r1, [r0, #28]
     8b0:	ldr	r0, [r1, #4]
     8b4:	add	r0, r0, #1
     8b8:	str	r0, [r1, #4]
     8bc:	mov	r0, #0
     8c0:	pop	{fp, pc}
     8c4:	movw	r0, #0
     8c8:	movw	r1, #0
     8cc:	movw	r3, #0
     8d0:	movw	r2, #354	; 0x162
     8d4:	movt	r0, #0
     8d8:	movt	r1, #0
     8dc:	movt	r3, #0
     8e0:	bl	0 <__assert_fail>

000008e4 <coda_product_definition_add_detection_rule>:
     8e4:	push	{r4, r5, r6, sl, fp, lr}
     8e8:	add	fp, sp, #16
     8ec:	sub	sp, sp, #8
     8f0:	mov	r4, r0
     8f4:	ldr	r0, [r1]
     8f8:	cmp	r0, #0
     8fc:	beq	974 <coda_product_definition_add_detection_rule+0x90>
     900:	mov	r5, r1
     904:	str	r4, [r1, #8]
     908:	ldr	r1, [pc, #188]	; 9cc <coda_product_definition_add_detection_rule+0xe8>
     90c:	bl	0 <__aeabi_read_tp>
     910:	ldr	r0, [r0, r1]
     914:	ldr	r1, [r4]
     918:	cmp	r1, #0
     91c:	movweq	r1, #1
     920:	add	r0, r0, r1, lsl #2
     924:	mov	r1, r5
     928:	add	r0, r0, #12
     92c:	bl	0 <coda_detection_tree_add_rule>
     930:	mvn	r6, #0
     934:	cmp	r0, #0
     938:	bne	9c0 <coda_product_definition_add_detection_rule+0xdc>
     93c:	ldr	r1, [r4, #16]
     940:	ldr	r0, [r4, #20]
     944:	mov	r6, #4
     948:	add	r1, r6, r1, lsl #2
     94c:	bl	0 <realloc>
     950:	cmp	r0, #0
     954:	beq	994 <coda_product_definition_add_detection_rule+0xb0>
     958:	str	r0, [r4, #20]
     95c:	mov	r6, #0
     960:	ldr	r1, [r4, #16]
     964:	add	r2, r1, #1
     968:	str	r2, [r4, #16]
     96c:	str	r5, [r0, r1, lsl #2]
     970:	b	9c0 <coda_product_definition_add_detection_rule+0xdc>
     974:	ldr	r2, [r4, #8]
     978:	movw	r0, #65136	; 0xfe70
     97c:	movw	r1, #0
     980:	movt	r0, #65535	; 0xffff
     984:	movt	r1, #0
     988:	bl	0 <coda_set_error>
     98c:	mvn	r6, #0
     990:	b	9c0 <coda_product_definition_add_detection_rule+0xdc>
     994:	ldr	r0, [r4, #16]
     998:	movw	r1, #390	; 0x186
     99c:	movw	r3, #0
     9a0:	str	r1, [sp]
     9a4:	movw	r1, #0
     9a8:	movt	r3, #0
     9ac:	movt	r1, #0
     9b0:	add	r2, r6, r0, lsl #2
     9b4:	mvn	r0, #0
     9b8:	mvn	r6, #0
     9bc:	bl	0 <coda_set_error>
     9c0:	mov	r0, r6
     9c4:	sub	sp, fp, #16
     9c8:	pop	{r4, r5, r6, sl, fp, pc}
     9cc:	.word	0x00000000

000009d0 <coda_product_definition_add_product_variable>:
     9d0:	push	{r4, r5, r6, sl, fp, lr}
     9d4:	add	fp, sp, #16
     9d8:	sub	sp, sp, #8
     9dc:	mov	r4, r1
     9e0:	mov	r5, r0
     9e4:	ldr	r1, [r1]
     9e8:	ldr	r0, [r0, #40]	; 0x28
     9ec:	bl	0 <coda_hashtable_add_name>
     9f0:	cmp	r0, #0
     9f4:	beq	a1c <coda_product_definition_add_product_variable+0x4c>
     9f8:	ldr	r3, [r5, #8]
     9fc:	ldr	r2, [r4]
     a00:	movw	r0, #65136	; 0xfe70
     a04:	movw	r1, #0
     a08:	movt	r0, #65535	; 0xffff
     a0c:	movt	r1, #0
     a10:	bl	0 <coda_set_error>
     a14:	mvn	r4, #0
     a18:	b	a60 <coda_product_definition_add_product_variable+0x90>
     a1c:	ldr	r1, [r5, #32]
     a20:	tst	r1, #15
     a24:	beq	a30 <coda_product_definition_add_product_variable+0x60>
     a28:	ldr	r0, [r5, #36]	; 0x24
     a2c:	b	a50 <coda_product_definition_add_product_variable+0x80>
     a30:	ldr	r0, [r5, #36]	; 0x24
     a34:	mov	r6, #64	; 0x40
     a38:	add	r1, r6, r1, lsl #2
     a3c:	bl	0 <realloc>
     a40:	cmp	r0, #0
     a44:	beq	a6c <coda_product_definition_add_product_variable+0x9c>
     a48:	str	r0, [r5, #36]	; 0x24
     a4c:	ldr	r1, [r5, #32]
     a50:	add	r2, r1, #1
     a54:	str	r2, [r5, #32]
     a58:	str	r4, [r0, r1, lsl #2]
     a5c:	mov	r4, #0
     a60:	mov	r0, r4
     a64:	sub	sp, fp, #16
     a68:	pop	{r4, r5, r6, sl, fp, pc}
     a6c:	ldr	r0, [r5, #32]
     a70:	mov	r1, #420	; 0x1a4
     a74:	movw	r3, #0
     a78:	mvn	r4, #0
     a7c:	str	r1, [sp]
     a80:	movw	r1, #0
     a84:	movt	r3, #0
     a88:	movt	r1, #0
     a8c:	add	r2, r6, r0, lsl #2
     a90:	mvn	r0, #0
     a94:	bl	0 <coda_set_error>
     a98:	b	a60 <coda_product_definition_add_product_variable+0x90>

00000a9c <coda_product_definition_validate>:
     a9c:	push	{fp, lr}
     aa0:	mov	fp, sp
     aa4:	ldr	r1, [r0]
     aa8:	cmp	r1, #1
     aac:	bhi	abc <coda_product_definition_validate+0x20>
     ab0:	ldr	r1, [r0, #28]
     ab4:	cmp	r1, #0
     ab8:	beq	acc <coda_product_definition_validate+0x30>
     abc:	mov	r1, #1
     ac0:	str	r1, [r0, #24]
     ac4:	mov	r0, #0
     ac8:	pop	{fp, pc}
     acc:	movw	r0, #65136	; 0xfe70
     ad0:	movw	r1, #0
     ad4:	movt	r0, #65535	; 0xffff
     ad8:	movt	r1, #0
     adc:	bl	0 <coda_set_error>
     ae0:	mvn	r0, #0
     ae4:	pop	{fp, pc}

00000ae8 <coda_product_type_delete>:
     ae8:	push	{r4, r5, fp, lr}
     aec:	add	fp, sp, #8
     af0:	mov	r4, r0
     af4:	ldr	r0, [r0]
     af8:	cmp	r0, #0
     afc:	beq	b04 <coda_product_type_delete+0x1c>
     b00:	bl	0 <free>
     b04:	ldr	r0, [r4, #4]
     b08:	cmp	r0, #0
     b0c:	beq	b14 <coda_product_type_delete+0x2c>
     b10:	bl	0 <free>
     b14:	ldr	r0, [r4, #16]
     b18:	cmp	r0, #0
     b1c:	beq	b24 <coda_product_type_delete+0x3c>
     b20:	bl	0 <coda_hashtable_delete>
     b24:	ldr	r0, [r4, #12]
     b28:	cmp	r0, #0
     b2c:	beq	b60 <coda_product_type_delete+0x78>
     b30:	ldr	r1, [r4, #8]
     b34:	cmp	r1, #1
     b38:	blt	b5c <coda_product_type_delete+0x74>
     b3c:	mov	r5, #0
     b40:	ldr	r0, [r0, r5, lsl #2]
     b44:	bl	5a0 <coda_product_definition_delete>
     b48:	ldr	r1, [r4, #8]
     b4c:	ldr	r0, [r4, #12]
     b50:	add	r5, r5, #1
     b54:	cmp	r5, r1
     b58:	blt	b40 <coda_product_type_delete+0x58>
     b5c:	bl	0 <free>
     b60:	mov	r0, r4
     b64:	pop	{r4, r5, fp, lr}
     b68:	b	0 <free>

00000b6c <coda_product_type_new>:
     b6c:	push	{r4, r5, fp, lr}
     b70:	add	fp, sp, #8
     b74:	sub	sp, sp, #8
     b78:	mov	r5, r0
     b7c:	mov	r0, #24
     b80:	bl	0 <malloc>
     b84:	cmp	r0, #0
     b88:	beq	bdc <coda_product_type_new+0x70>
     b8c:	vmov.i32	q8, #0	; 0x00000000
     b90:	mov	r4, r0
     b94:	add	r0, r0, #4
     b98:	vst1.32	{d16-d17}, [r0]
     b9c:	mov	r0, r5
     ba0:	bl	0 <strdup>
     ba4:	cmp	r0, #0
     ba8:	str	r0, [r4]
     bac:	beq	c04 <coda_product_type_new+0x98>
     bb0:	mov	r0, #1
     bb4:	bl	0 <coda_hashtable_new>
     bb8:	cmp	r0, #0
     bbc:	str	r0, [r4, #16]
     bc0:	bne	c2c <coda_product_type_new+0xc0>
     bc4:	movw	r1, #0
     bc8:	movw	r2, #0
     bcc:	mvn	r0, #0
     bd0:	mov	r3, #504	; 0x1f8
     bd4:	movt	r1, #0
     bd8:	b	c18 <coda_product_type_new+0xac>
     bdc:	movw	r1, #0
     be0:	movw	r3, #0
     be4:	movw	r0, #482	; 0x1e2
     be8:	mov	r2, #24
     bec:	movt	r1, #0
     bf0:	movt	r3, #0
     bf4:	str	r0, [sp]
     bf8:	mvn	r0, #0
     bfc:	bl	0 <coda_set_error>
     c00:	b	c28 <coda_product_type_new+0xbc>
     c04:	movw	r1, #0
     c08:	movw	r2, #0
     c0c:	mvn	r0, #0
     c10:	movw	r3, #495	; 0x1ef
     c14:	movt	r1, #0
     c18:	movt	r2, #0
     c1c:	bl	0 <coda_set_error>
     c20:	mov	r0, r4
     c24:	bl	ae8 <coda_product_type_delete>
     c28:	mov	r4, #0
     c2c:	mov	r0, r4
     c30:	sub	sp, fp, #8
     c34:	pop	{r4, r5, fp, pc}

00000c38 <coda_product_type_set_description>:
     c38:	push	{r4, r5, fp, lr}
     c3c:	add	fp, sp, #8
     c40:	mov	r5, r0
     c44:	ldr	r0, [r0, #4]
     c48:	cmp	r0, #0
     c4c:	beq	c70 <coda_product_type_set_description+0x38>
     c50:	movw	r0, #65136	; 0xfe70
     c54:	movw	r1, #0
     c58:	movt	r0, #65535	; 0xffff
     c5c:	movt	r1, #0
     c60:	bl	0 <coda_set_error>
     c64:	mvn	r4, #0
     c68:	mov	r0, r4
     c6c:	pop	{r4, r5, fp, pc}
     c70:	mov	r4, #0
     c74:	cmp	r1, #0
     c78:	mov	r0, #0
     c7c:	beq	c90 <coda_product_type_set_description+0x58>
     c80:	mov	r0, r1
     c84:	bl	0 <strdup>
     c88:	cmp	r0, #0
     c8c:	beq	c9c <coda_product_type_set_description+0x64>
     c90:	str	r0, [r5, #4]
     c94:	mov	r0, r4
     c98:	pop	{r4, r5, fp, pc}
     c9c:	movw	r1, #0
     ca0:	movw	r2, #0
     ca4:	mvn	r0, #0
     ca8:	movw	r3, #527	; 0x20f
     cac:	mvn	r4, #0
     cb0:	movt	r1, #0
     cb4:	movt	r2, #0
     cb8:	bl	0 <coda_set_error>
     cbc:	mov	r0, r4
     cc0:	pop	{r4, r5, fp, pc}

00000cc4 <coda_product_type_add_product_definition>:
     cc4:	push	{r4, r5, r6, sl, fp, lr}
     cc8:	add	fp, sp, #16
     ccc:	sub	sp, sp, #8
     cd0:	mov	r4, r0
     cd4:	ldr	r0, [r1, #44]	; 0x2c
     cd8:	mov	r5, r1
     cdc:	cmp	r0, #0
     ce0:	beq	d08 <coda_product_type_add_product_definition+0x44>
     ce4:	ldr	r3, [r0]
     ce8:	ldr	r0, [r4]
     cec:	ldr	r2, [r5, #8]
     cf0:	movw	r1, #0
     cf4:	movt	r1, #0
     cf8:	str	r0, [sp]
     cfc:	movw	r0, #65136	; 0xfe70
     d00:	movt	r0, #65535	; 0xffff
     d04:	b	d80 <coda_product_type_add_product_definition+0xbc>
     d08:	ldr	r0, [r4, #8]
     d0c:	cmp	r0, #1
     d10:	blt	d3c <coda_product_type_add_product_definition+0x78>
     d14:	ldr	r2, [r5, #4]
     d18:	ldr	r1, [r4, #12]
     d1c:	mov	r3, #0
     d20:	ldr	r6, [r1, r3, lsl #2]
     d24:	ldr	r6, [r6, #4]
     d28:	cmp	r6, r2
     d2c:	beq	d6c <coda_product_type_add_product_definition+0xa8>
     d30:	add	r3, r3, #1
     d34:	cmp	r3, r0
     d38:	blt	d20 <coda_product_type_add_product_definition+0x5c>
     d3c:	ldr	r1, [r5, #8]
     d40:	ldr	r0, [r4, #16]
     d44:	bl	0 <coda_hashtable_add_name>
     d48:	cmp	r0, #0
     d4c:	beq	d94 <coda_product_type_add_product_definition+0xd0>
     d50:	ldr	r3, [r4]
     d54:	ldr	r2, [r5, #8]
     d58:	movw	r0, #65136	; 0xfe70
     d5c:	movw	r1, #0
     d60:	movt	r0, #65535	; 0xffff
     d64:	movt	r1, #0
     d68:	b	d80 <coda_product_type_add_product_definition+0xbc>
     d6c:	ldr	r3, [r4]
     d70:	movw	r0, #65136	; 0xfe70
     d74:	movw	r1, #0
     d78:	movt	r0, #65535	; 0xffff
     d7c:	movt	r1, #0
     d80:	bl	0 <coda_set_error>
     d84:	mvn	r4, #0
     d88:	mov	r0, r4
     d8c:	sub	sp, fp, #16
     d90:	pop	{r4, r5, r6, sl, fp, pc}
     d94:	ldr	r1, [r4, #8]
     d98:	tst	r1, #15
     d9c:	beq	da8 <coda_product_type_add_product_definition+0xe4>
     da0:	ldr	r0, [r4, #12]
     da4:	b	dc8 <coda_product_type_add_product_definition+0x104>
     da8:	ldr	r0, [r4, #12]
     dac:	mov	r6, #64	; 0x40
     db0:	add	r1, r6, r1, lsl #2
     db4:	bl	0 <realloc>
     db8:	cmp	r0, #0
     dbc:	beq	de0 <coda_product_type_add_product_definition+0x11c>
     dc0:	str	r0, [r4, #12]
     dc4:	ldr	r1, [r4, #8]
     dc8:	add	r2, r1, #1
     dcc:	str	r2, [r4, #8]
     dd0:	str	r5, [r0, r1, lsl #2]
     dd4:	str	r4, [r5, #44]	; 0x2c
     dd8:	mov	r4, #0
     ddc:	b	d88 <coda_product_type_add_product_definition+0xc4>
     de0:	ldr	r0, [r4, #8]
     de4:	movw	r1, #574	; 0x23e
     de8:	movw	r3, #0
     dec:	mvn	r4, #0
     df0:	str	r1, [sp]
     df4:	movw	r1, #0
     df8:	movt	r3, #0
     dfc:	movt	r1, #0
     e00:	add	r2, r6, r0, lsl #2
     e04:	mvn	r0, #0
     e08:	bl	0 <coda_set_error>
     e0c:	b	d88 <coda_product_type_add_product_definition+0xc4>

00000e10 <coda_product_type_get_product_definition_by_version>:
     e10:	push	{r4, sl, fp, lr}
     e14:	add	fp, sp, #8
     e18:	ldr	lr, [r0, #8]
     e1c:	mov	ip, r1
     e20:	cmp	lr, #1
     e24:	blt	e4c <coda_product_type_get_product_definition_by_version+0x3c>
     e28:	ldr	r3, [r0, #12]
     e2c:	mov	r2, #0
     e30:	ldr	r1, [r3, r2, lsl #2]
     e34:	ldr	r4, [r1, #4]
     e38:	cmp	r4, ip
     e3c:	beq	e6c <coda_product_type_get_product_definition_by_version+0x5c>
     e40:	add	r2, r2, #1
     e44:	cmp	r2, lr
     e48:	blt	e30 <coda_product_type_get_product_definition_by_version+0x20>
     e4c:	ldr	r2, [r0]
     e50:	movw	r0, #65136	; 0xfe70
     e54:	movw	r1, #0
     e58:	mov	r3, ip
     e5c:	movt	r0, #65535	; 0xffff
     e60:	movt	r1, #0
     e64:	bl	0 <coda_set_error>
     e68:	mov	r1, #0
     e6c:	mov	r0, r1
     e70:	pop	{r4, sl, fp, pc}

00000e74 <coda_product_type_get_latest_product_definition>:
     e74:	push	{r4, r5, fp, lr}
     e78:	add	fp, sp, #8
     e7c:	ldr	r1, [r0, #8]
     e80:	cmp	r1, #0
     e84:	beq	ec0 <coda_product_type_get_latest_product_definition+0x4c>
     e88:	ldr	lr, [r0, #12]
     e8c:	cmp	r1, #2
     e90:	ldr	r0, [lr]
     e94:	poplt	{r4, r5, fp, pc}
     e98:	ldr	r0, [r0, #4]
     e9c:	sub	r2, r1, #1
     ea0:	cmp	r1, #2
     ea4:	and	ip, r2, #1
     ea8:	bne	ee0 <coda_product_type_get_latest_product_definition+0x6c>
     eac:	mov	r2, #0
     eb0:	mov	r1, #1
     eb4:	cmp	ip, #0
     eb8:	bne	f30 <coda_product_type_get_latest_product_definition+0xbc>
     ebc:	b	f40 <coda_product_type_get_latest_product_definition+0xcc>
     ec0:	ldr	r2, [r0]
     ec4:	movw	r0, #65136	; 0xfe70
     ec8:	movw	r1, #0
     ecc:	movt	r0, #65535	; 0xffff
     ed0:	movt	r1, #0
     ed4:	bl	0 <coda_set_error>
     ed8:	mov	r0, #0
     edc:	pop	{r4, r5, fp, pc}
     ee0:	sub	r1, r2, ip
     ee4:	mov	r3, #0
     ee8:	mov	r2, #0
     eec:	add	r4, lr, r3, lsl #2
     ef0:	ldr	r5, [r4, #4]
     ef4:	ldr	r4, [r4, #8]
     ef8:	ldr	r5, [r5, #4]
     efc:	ldr	r4, [r4, #4]
     f00:	cmp	r5, r0
     f04:	movgt	r0, r5
     f08:	addgt	r2, r3, #1
     f0c:	add	r3, r3, #2
     f10:	cmp	r4, r0
     f14:	movgt	r2, r3
     f18:	movgt	r0, r4
     f1c:	cmp	r1, r3
     f20:	bne	eec <coda_product_type_get_latest_product_definition+0x78>
     f24:	add	r1, r3, #1
     f28:	cmp	ip, #0
     f2c:	beq	f40 <coda_product_type_get_latest_product_definition+0xcc>
     f30:	ldr	r3, [lr, r1, lsl #2]
     f34:	ldr	r3, [r3, #4]
     f38:	cmp	r3, r0
     f3c:	movgt	r2, r1
     f40:	ldr	r0, [lr, r2, lsl #2]
     f44:	pop	{r4, r5, fp, pc}

00000f48 <coda_product_class_delete>:
     f48:	push	{r4, r5, fp, lr}
     f4c:	add	fp, sp, #8
     f50:	mov	r4, r0
     f54:	ldr	r0, [r0]
     f58:	cmp	r0, #0
     f5c:	beq	f64 <coda_product_class_delete+0x1c>
     f60:	bl	0 <free>
     f64:	ldr	r0, [r4, #4]
     f68:	cmp	r0, #0
     f6c:	beq	f74 <coda_product_class_delete+0x2c>
     f70:	bl	0 <free>
     f74:	ldr	r0, [r4, #8]
     f78:	cmp	r0, #0
     f7c:	beq	f84 <coda_product_class_delete+0x3c>
     f80:	bl	0 <free>
     f84:	ldr	r0, [r4, #24]
     f88:	cmp	r0, #0
     f8c:	beq	f94 <coda_product_class_delete+0x4c>
     f90:	bl	0 <coda_hashtable_delete>
     f94:	ldr	r0, [r4, #36]	; 0x24
     f98:	cmp	r0, #0
     f9c:	beq	fa4 <coda_product_class_delete+0x5c>
     fa0:	bl	0 <coda_hashtable_delete>
     fa4:	ldr	r0, [r4, #20]
     fa8:	cmp	r0, #0
     fac:	beq	fe0 <coda_product_class_delete+0x98>
     fb0:	ldr	r1, [r4, #16]
     fb4:	cmp	r1, #1
     fb8:	blt	fdc <coda_product_class_delete+0x94>
     fbc:	mov	r5, #0
     fc0:	ldr	r0, [r0, r5, lsl #2]
     fc4:	bl	0 <coda_type_release>
     fc8:	ldr	r1, [r4, #16]
     fcc:	ldr	r0, [r4, #20]
     fd0:	add	r5, r5, #1
     fd4:	cmp	r5, r1
     fd8:	blt	fc0 <coda_product_class_delete+0x78>
     fdc:	bl	0 <free>
     fe0:	ldr	r0, [r4, #32]
     fe4:	cmp	r0, #0
     fe8:	beq	101c <coda_product_class_delete+0xd4>
     fec:	ldr	r1, [r4, #28]
     ff0:	cmp	r1, #1
     ff4:	blt	1018 <coda_product_class_delete+0xd0>
     ff8:	mov	r5, #0
     ffc:	ldr	r0, [r0, r5, lsl #2]
    1000:	bl	ae8 <coda_product_type_delete>
    1004:	ldr	r1, [r4, #28]
    1008:	ldr	r0, [r4, #32]
    100c:	add	r5, r5, #1
    1010:	cmp	r5, r1
    1014:	blt	ffc <coda_product_class_delete+0xb4>
    1018:	bl	0 <free>
    101c:	mov	r0, r4
    1020:	pop	{r4, r5, fp, lr}
    1024:	b	0 <free>

00001028 <coda_product_class_new>:
    1028:	push	{r4, r5, fp, lr}
    102c:	add	fp, sp, #8
    1030:	mov	r5, r0
    1034:	bl	0 <coda_is_identifier>
    1038:	cmp	r0, #0
    103c:	beq	10b4 <coda_product_class_new+0x8c>
    1040:	mov	r0, #40	; 0x28
    1044:	bl	0 <malloc>
    1048:	cmp	r0, #0
    104c:	beq	112c <coda_product_class_new+0x104>
    1050:	vmov.i32	q8, #0	; 0x00000000
    1054:	mov	r4, r0
    1058:	mov	r0, #0
    105c:	str	r0, [r4, #36]	; 0x24
    1060:	add	r0, r4, #20
    1064:	vst1.32	{d16-d17}, [r0]
    1068:	add	r0, r4, #4
    106c:	vst1.32	{d16-d17}, [r0]
    1070:	mov	r0, r5
    1074:	bl	0 <strdup>
    1078:	cmp	r0, #0
    107c:	str	r0, [r4]
    1080:	beq	10d0 <coda_product_class_new+0xa8>
    1084:	mov	r0, #1
    1088:	bl	0 <coda_hashtable_new>
    108c:	cmp	r0, #0
    1090:	str	r0, [r4, #24]
    1094:	beq	10e8 <coda_product_class_new+0xc0>
    1098:	mov	r0, #1
    109c:	bl	0 <coda_hashtable_new>
    10a0:	cmp	r0, #0
    10a4:	str	r0, [r4, #36]	; 0x24
    10a8:	beq	10fc <coda_product_class_new+0xd4>
    10ac:	mov	r0, r4
    10b0:	pop	{r4, r5, fp, pc}
    10b4:	movw	r0, #65136	; 0xfe70
    10b8:	movw	r1, #0
    10bc:	mov	r2, r5
    10c0:	movt	r0, #65535	; 0xffff
    10c4:	movt	r1, #0
    10c8:	bl	0 <coda_set_error>
    10cc:	b	1120 <coda_product_class_new+0xf8>
    10d0:	movw	r1, #0
    10d4:	movw	r2, #0
    10d8:	mvn	r0, #0
    10dc:	movw	r3, #702	; 0x2be
    10e0:	movt	r1, #0
    10e4:	b	1110 <coda_product_class_new+0xe8>
    10e8:	movw	r1, #0
    10ec:	movw	r2, #0
    10f0:	mvn	r0, #0
    10f4:	movw	r3, #711	; 0x2c7
    10f8:	b	110c <coda_product_class_new+0xe4>
    10fc:	movw	r1, #0
    1100:	movw	r2, #0
    1104:	mvn	r0, #0
    1108:	mov	r3, #720	; 0x2d0
    110c:	movt	r1, #0
    1110:	movt	r2, #0
    1114:	bl	0 <coda_set_error>
    1118:	mov	r0, r4
    111c:	bl	f48 <coda_product_class_delete>
    1120:	mov	r4, #0
    1124:	mov	r0, r4
    1128:	pop	{r4, r5, fp, pc}
    112c:	movw	r0, #0
    1130:	movw	r1, #0
    1134:	movw	r3, #0
    1138:	movw	r2, #686	; 0x2ae
    113c:	movt	r0, #0
    1140:	movt	r1, #0
    1144:	movt	r3, #0
    1148:	bl	0 <__assert_fail>

0000114c <coda_product_class_set_description>:
    114c:	push	{r4, r5, fp, lr}
    1150:	add	fp, sp, #8
    1154:	mov	r5, r0
    1158:	ldr	r0, [r0, #4]
    115c:	cmp	r0, #0
    1160:	beq	1184 <coda_product_class_set_description+0x38>
    1164:	movw	r0, #65136	; 0xfe70
    1168:	movw	r1, #0
    116c:	movt	r0, #65535	; 0xffff
    1170:	movt	r1, #0
    1174:	bl	0 <coda_set_error>
    1178:	mvn	r4, #0
    117c:	mov	r0, r4
    1180:	pop	{r4, r5, fp, pc}
    1184:	mov	r4, #0
    1188:	cmp	r1, #0
    118c:	mov	r0, #0
    1190:	beq	11a4 <coda_product_class_set_description+0x58>
    1194:	mov	r0, r1
    1198:	bl	0 <strdup>
    119c:	cmp	r0, #0
    11a0:	beq	11b0 <coda_product_class_set_description+0x64>
    11a4:	str	r0, [r5, #4]
    11a8:	mov	r0, r4
    11ac:	pop	{r4, r5, fp, pc}
    11b0:	movw	r1, #0
    11b4:	movw	r2, #0
    11b8:	mvn	r0, #0
    11bc:	movw	r3, #743	; 0x2e7
    11c0:	mvn	r4, #0
    11c4:	movt	r1, #0
    11c8:	movt	r2, #0
    11cc:	bl	0 <coda_set_error>
    11d0:	mov	r0, r4
    11d4:	pop	{r4, r5, fp, pc}

000011d8 <coda_product_class_set_definition_file>:
    11d8:	push	{r4, r5, fp, lr}
    11dc:	add	fp, sp, #8
    11e0:	mov	r5, r0
    11e4:	ldr	r0, [r0, #8]
    11e8:	cmp	r0, #0
    11ec:	beq	1210 <coda_product_class_set_definition_file+0x38>
    11f0:	movw	r0, #65136	; 0xfe70
    11f4:	movw	r1, #0
    11f8:	movt	r0, #65535	; 0xffff
    11fc:	movt	r1, #0
    1200:	bl	0 <coda_set_error>
    1204:	mvn	r4, #0
    1208:	mov	r0, r4
    120c:	pop	{r4, r5, fp, pc}
    1210:	mov	r4, #0
    1214:	cmp	r1, #0
    1218:	mov	r0, #0
    121c:	beq	1230 <coda_product_class_set_definition_file+0x58>
    1220:	mov	r0, r1
    1224:	bl	0 <strdup>
    1228:	cmp	r0, #0
    122c:	beq	123c <coda_product_class_set_definition_file+0x64>
    1230:	str	r0, [r5, #8]
    1234:	mov	r0, r4
    1238:	pop	{r4, r5, fp, pc}
    123c:	movw	r1, #0
    1240:	movw	r2, #0
    1244:	mvn	r0, #0
    1248:	movw	r3, #767	; 0x2ff
    124c:	mvn	r4, #0
    1250:	movt	r1, #0
    1254:	movt	r2, #0
    1258:	bl	0 <coda_set_error>
    125c:	mov	r0, r4
    1260:	pop	{r4, r5, fp, pc}

00001264 <coda_product_class_set_revision>:
    1264:	str	r1, [r0, #12]
    1268:	mov	r0, #0
    126c:	bx	lr

00001270 <coda_product_class_add_product_type>:
    1270:	push	{r4, r5, r6, sl, fp, lr}
    1274:	add	fp, sp, #16
    1278:	sub	sp, sp, #8
    127c:	mov	r4, r1
    1280:	mov	r5, r0
    1284:	ldr	r1, [r1]
    1288:	ldr	r0, [r0, #36]	; 0x24
    128c:	bl	0 <coda_hashtable_add_name>
    1290:	cmp	r0, #0
    1294:	beq	12bc <coda_product_class_add_product_type+0x4c>
    1298:	ldr	r3, [r5]
    129c:	ldr	r2, [r4]
    12a0:	movw	r0, #65136	; 0xfe70
    12a4:	movw	r1, #0
    12a8:	movt	r0, #65535	; 0xffff
    12ac:	movt	r1, #0
    12b0:	bl	0 <coda_set_error>
    12b4:	mvn	r4, #0
    12b8:	b	1304 <coda_product_class_add_product_type+0x94>
    12bc:	ldr	r1, [r5, #28]
    12c0:	tst	r1, #15
    12c4:	beq	12d0 <coda_product_class_add_product_type+0x60>
    12c8:	ldr	r0, [r5, #32]
    12cc:	b	12f0 <coda_product_class_add_product_type+0x80>
    12d0:	ldr	r0, [r5, #32]
    12d4:	mov	r6, #64	; 0x40
    12d8:	add	r1, r6, r1, lsl #2
    12dc:	bl	0 <realloc>
    12e0:	cmp	r0, #0
    12e4:	beq	1310 <coda_product_class_add_product_type+0xa0>
    12e8:	str	r0, [r5, #32]
    12ec:	ldr	r1, [r5, #28]
    12f0:	add	r2, r1, #1
    12f4:	str	r2, [r5, #28]
    12f8:	str	r4, [r0, r1, lsl #2]
    12fc:	str	r5, [r4, #20]
    1300:	mov	r4, #0
    1304:	mov	r0, r4
    1308:	sub	sp, fp, #16
    130c:	pop	{r4, r5, r6, sl, fp, pc}
    1310:	ldr	r0, [r5, #28]
    1314:	mov	r1, #800	; 0x320
    1318:	movw	r3, #0
    131c:	mvn	r4, #0
    1320:	str	r1, [sp]
    1324:	movw	r1, #0
    1328:	movt	r3, #0
    132c:	movt	r1, #0
    1330:	add	r2, r6, r0, lsl #2
    1334:	mvn	r0, #0
    1338:	bl	0 <coda_set_error>
    133c:	b	1304 <coda_product_class_add_product_type+0x94>

00001340 <coda_product_class_get_product_type>:
    1340:	push	{r4, r5, fp, lr}
    1344:	add	fp, sp, #8
    1348:	mov	r5, r0
    134c:	ldr	r0, [r0, #36]	; 0x24
    1350:	mov	r4, r1
    1354:	bl	0 <coda_hashtable_get_index_from_name>
    1358:	cmn	r0, #1
    135c:	beq	136c <coda_product_class_get_product_type+0x2c>
    1360:	ldr	r1, [r5, #32]
    1364:	ldr	r0, [r1, r0, lsl #2]
    1368:	pop	{r4, r5, fp, pc}
    136c:	ldr	r2, [r5]
    1370:	movw	r0, #65136	; 0xfe70
    1374:	movw	r1, #0
    1378:	mov	r3, r4
    137c:	movt	r0, #65535	; 0xffff
    1380:	movt	r1, #0
    1384:	bl	0 <coda_set_error>
    1388:	mov	r0, #0
    138c:	pop	{r4, r5, fp, pc}

00001390 <coda_product_class_has_product_type>:
    1390:	push	{fp, lr}
    1394:	mov	fp, sp
    1398:	ldr	r0, [r0, #36]	; 0x24
    139c:	bl	0 <coda_hashtable_get_index_from_name>
    13a0:	mvn	r1, #0
    13a4:	subs	r0, r0, r1
    13a8:	movwne	r0, #1
    13ac:	pop	{fp, pc}

000013b0 <coda_product_class_add_named_type>:
    13b0:	push	{r4, r5, fp, lr}
    13b4:	add	fp, sp, #8
    13b8:	mov	r4, r1
    13bc:	mov	r5, r0
    13c0:	ldr	r1, [r1, #16]
    13c4:	ldr	r0, [r0, #24]
    13c8:	bl	0 <coda_hashtable_add_name>
    13cc:	cmp	r0, #0
    13d0:	beq	13f8 <coda_product_class_add_named_type+0x48>
    13d4:	ldr	r3, [r5]
    13d8:	ldr	r2, [r4, #16]
    13dc:	movw	r0, #65136	; 0xfe70
    13e0:	movw	r1, #0
    13e4:	movt	r0, #65535	; 0xffff
    13e8:	movt	r1, #0
    13ec:	bl	0 <coda_set_error>
    13f0:	mvn	r0, #0
    13f4:	pop	{r4, r5, fp, pc}
    13f8:	ldr	r1, [r5, #16]
    13fc:	tst	r1, #15
    1400:	beq	140c <coda_product_class_add_named_type+0x5c>
    1404:	ldr	r0, [r5, #20]
    1408:	b	142c <coda_product_class_add_named_type+0x7c>
    140c:	mov	r0, #64	; 0x40
    1410:	add	r1, r0, r1, lsl #2
    1414:	ldr	r0, [r5, #20]
    1418:	bl	0 <realloc>
    141c:	cmp	r0, #0
    1420:	beq	144c <coda_product_class_add_named_type+0x9c>
    1424:	str	r0, [r5, #20]
    1428:	ldr	r1, [r5, #16]
    142c:	add	r2, r1, #1
    1430:	str	r2, [r5, #16]
    1434:	str	r4, [r0, r1, lsl #2]
    1438:	ldr	r0, [r4, #4]
    143c:	add	r0, r0, #1
    1440:	str	r0, [r4, #4]
    1444:	mov	r0, #0
    1448:	pop	{r4, r5, fp, pc}
    144c:	movw	r0, #0
    1450:	movw	r1, #0
    1454:	movw	r3, #0
    1458:	mov	r2, #848	; 0x350
    145c:	movt	r0, #0
    1460:	movt	r1, #0
    1464:	movt	r3, #0
    1468:	bl	0 <__assert_fail>

0000146c <coda_product_class_get_named_type>:
    146c:	push	{r4, r5, fp, lr}
    1470:	add	fp, sp, #8
    1474:	mov	r5, r0
    1478:	ldr	r0, [r0, #24]
    147c:	mov	r4, r1
    1480:	bl	0 <coda_hashtable_get_index_from_name>
    1484:	cmn	r0, #1
    1488:	beq	1498 <coda_product_class_get_named_type+0x2c>
    148c:	ldr	r1, [r5, #20]
    1490:	ldr	r0, [r1, r0, lsl #2]
    1494:	pop	{r4, r5, fp, pc}
    1498:	ldr	r2, [r5]
    149c:	movw	r0, #65136	; 0xfe70
    14a0:	movw	r1, #0
    14a4:	mov	r3, r4
    14a8:	movt	r0, #65535	; 0xffff
    14ac:	movt	r1, #0
    14b0:	bl	0 <coda_set_error>
    14b4:	mov	r0, #0
    14b8:	pop	{r4, r5, fp, pc}

000014bc <coda_product_class_has_named_type>:
    14bc:	push	{fp, lr}
    14c0:	mov	fp, sp
    14c4:	ldr	r0, [r0, #24]
    14c8:	bl	0 <coda_hashtable_get_index_from_name>
    14cc:	mvn	r1, #0
    14d0:	subs	r0, r0, r1
    14d4:	movwne	r0, #1
    14d8:	pop	{fp, pc}

000014dc <coda_product_class_get_revision>:
    14dc:	ldr	r0, [r0, #12]
    14e0:	bx	lr

000014e4 <coda_data_dictionary_add_product_class>:
    14e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    14e8:	add	fp, sp, #24
    14ec:	sub	sp, sp, #8
    14f0:	ldr	r8, [pc, #344]	; 1650 <coda_data_dictionary_add_product_class+0x16c>
    14f4:	mov	r9, r0
    14f8:	bl	0 <__aeabi_read_tp>
    14fc:	ldr	r0, [r0, r8]
    1500:	cmp	r0, #0
    1504:	beq	153c <coda_data_dictionary_add_product_class+0x58>
    1508:	ldr	r1, [r9]
    150c:	ldr	r0, [r0, #8]
    1510:	bl	0 <coda_hashtable_add_name>
    1514:	cmp	r0, #0
    1518:	beq	1558 <coda_data_dictionary_add_product_class+0x74>
    151c:	ldr	r2, [r9]
    1520:	movw	r0, #65136	; 0xfe70
    1524:	movw	r1, #0
    1528:	movt	r0, #65535	; 0xffff
    152c:	movt	r1, #0
    1530:	bl	0 <coda_set_error>
    1534:	mvn	r4, #0
    1538:	b	1614 <coda_data_dictionary_add_product_class+0x130>
    153c:	movw	r0, #65136	; 0xfe70
    1540:	movw	r1, #0
    1544:	movt	r0, #65535	; 0xffff
    1548:	movt	r1, #0
    154c:	bl	0 <coda_set_error>
    1550:	mvn	r4, #0
    1554:	b	1614 <coda_data_dictionary_add_product_class+0x130>
    1558:	bl	0 <__aeabi_read_tp>
    155c:	ldr	r6, [r0, r8]
    1560:	ldr	r0, [r6]
    1564:	tst	r0, #15
    1568:	beq	1578 <coda_data_dictionary_add_product_class+0x94>
    156c:	cmp	r0, #1
    1570:	bge	15ac <coda_data_dictionary_add_product_class+0xc8>
    1574:	b	15f4 <coda_data_dictionary_add_product_class+0x110>
    1578:	mov	r7, #64	; 0x40
    157c:	add	r1, r7, r0, lsl #2
    1580:	ldr	r0, [r6, #4]
    1584:	bl	0 <realloc>
    1588:	mov	r1, r0
    158c:	bl	0 <__aeabi_read_tp>
    1590:	ldr	r6, [r0, r8]
    1594:	cmp	r1, #0
    1598:	beq	1620 <coda_data_dictionary_add_product_class+0x13c>
    159c:	str	r1, [r6, #4]
    15a0:	ldr	r0, [r6]
    15a4:	cmp	r0, #1
    15a8:	blt	15f4 <coda_data_dictionary_add_product_class+0x110>
    15ac:	mov	r7, #0
    15b0:	b	15c4 <coda_data_dictionary_add_product_class+0xe0>
    15b4:	ldr	r0, [r6]
    15b8:	add	r7, r7, #1
    15bc:	cmp	r7, r0
    15c0:	bge	15f4 <coda_data_dictionary_add_product_class+0x110>
    15c4:	ldr	r5, [r6, #4]
    15c8:	ldr	r0, [r9]
    15cc:	ldr	r4, [r5, r7, lsl #2]
    15d0:	ldr	r1, [r4]
    15d4:	bl	0 <strcmp>
    15d8:	cmn	r0, #1
    15dc:	bgt	15b4 <coda_data_dictionary_add_product_class+0xd0>
    15e0:	str	r9, [r5, r7, lsl #2]
    15e4:	bl	0 <__aeabi_read_tp>
    15e8:	ldr	r6, [r0, r8]
    15ec:	mov	r9, r4
    15f0:	b	15b4 <coda_data_dictionary_add_product_class+0xd0>
    15f4:	add	r1, r0, #1
    15f8:	str	r1, [r6]
    15fc:	ldr	r1, [r6, #4]
    1600:	str	r9, [r1, r0, lsl #2]
    1604:	bl	1654 <data_dictionary_rebuild_product_class_hash_data>
    1608:	cmp	r0, #0
    160c:	mov	r4, r0
    1610:	mvnne	r4, #0
    1614:	mov	r0, r4
    1618:	sub	sp, fp, #24
    161c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    1620:	ldr	r0, [r6]
    1624:	movw	r1, #994	; 0x3e2
    1628:	movw	r3, #0
    162c:	mvn	r4, #0
    1630:	str	r1, [sp]
    1634:	movw	r1, #0
    1638:	movt	r3, #0
    163c:	movt	r1, #0
    1640:	add	r2, r7, r0, lsl #2
    1644:	mvn	r0, #0
    1648:	bl	0 <coda_set_error>
    164c:	b	1614 <coda_data_dictionary_add_product_class+0x130>
    1650:	.word	0x00000000

00001654 <data_dictionary_rebuild_product_class_hash_data>:
    1654:	push	{r4, r5, r6, sl, fp, lr}
    1658:	add	fp, sp, #16
    165c:	ldr	r5, [pc, #208]	; 1734 <data_dictionary_rebuild_product_class_hash_data+0xe0>
    1660:	bl	0 <__aeabi_read_tp>
    1664:	mov	r4, r0
    1668:	ldr	r0, [r0, r5]
    166c:	ldr	r0, [r0, #8]
    1670:	bl	0 <coda_hashtable_delete>
    1674:	mov	r0, #1
    1678:	bl	0 <coda_hashtable_new>
    167c:	ldr	r1, [r4, r5]
    1680:	cmp	r0, #0
    1684:	str	r0, [r1, #8]
    1688:	beq	170c <data_dictionary_rebuild_product_class_hash_data+0xb8>
    168c:	ldr	r2, [r1]
    1690:	mov	r4, #0
    1694:	cmp	r2, #1
    1698:	blt	172c <data_dictionary_rebuild_product_class_hash_data+0xd8>
    169c:	ldr	r1, [r1, #4]
    16a0:	ldr	r1, [r1]
    16a4:	ldr	r1, [r1]
    16a8:	bl	0 <coda_hashtable_add_name>
    16ac:	cmp	r0, #0
    16b0:	bne	16ec <data_dictionary_rebuild_product_class_hash_data+0x98>
    16b4:	mov	r6, #1
    16b8:	bl	0 <__aeabi_read_tp>
    16bc:	ldr	r0, [r0, r5]
    16c0:	ldr	r1, [r0]
    16c4:	cmp	r6, r1
    16c8:	bge	172c <data_dictionary_rebuild_product_class_hash_data+0xd8>
    16cc:	ldr	r1, [r0, #4]
    16d0:	ldr	r0, [r0, #8]
    16d4:	ldr	r1, [r1, r6, lsl #2]
    16d8:	ldr	r1, [r1]
    16dc:	bl	0 <coda_hashtable_add_name>
    16e0:	add	r6, r6, #1
    16e4:	cmp	r0, #0
    16e8:	beq	16b8 <data_dictionary_rebuild_product_class_hash_data+0x64>
    16ec:	movw	r0, #0
    16f0:	movw	r1, #0
    16f4:	movw	r3, #0
    16f8:	mov	r2, #960	; 0x3c0
    16fc:	movt	r0, #0
    1700:	movt	r1, #0
    1704:	movt	r3, #0
    1708:	bl	0 <__assert_fail>
    170c:	movw	r1, #0
    1710:	movw	r2, #0
    1714:	mvn	r0, #0
    1718:	mov	r3, #952	; 0x3b8
    171c:	mvn	r4, #0
    1720:	movt	r1, #0
    1724:	movt	r2, #0
    1728:	bl	0 <coda_set_error>
    172c:	mov	r0, r4
    1730:	pop	{r4, r5, r6, sl, fp, pc}
    1734:	.word	0x00000000

00001738 <coda_data_dictionary_get_product_class>:
    1738:	push	{r4, r5, fp, lr}
    173c:	add	fp, sp, #8
    1740:	ldr	r5, [pc, #120]	; 17c0 <coda_data_dictionary_get_product_class+0x88>
    1744:	mov	r4, r0
    1748:	bl	0 <__aeabi_read_tp>
    174c:	ldr	r0, [r0, r5]
    1750:	cmp	r0, #0
    1754:	beq	1784 <coda_data_dictionary_get_product_class+0x4c>
    1758:	ldr	r0, [r0, #8]
    175c:	mov	r1, r4
    1760:	bl	0 <coda_hashtable_get_index_from_name>
    1764:	cmn	r0, #1
    1768:	beq	17a0 <coda_data_dictionary_get_product_class+0x68>
    176c:	mov	r1, r0
    1770:	bl	0 <__aeabi_read_tp>
    1774:	ldr	r0, [r0, r5]
    1778:	ldr	r0, [r0, #4]
    177c:	ldr	r0, [r0, r1, lsl #2]
    1780:	pop	{r4, r5, fp, pc}
    1784:	movw	r0, #65136	; 0xfe70
    1788:	movw	r1, #0
    178c:	movt	r0, #65535	; 0xffff
    1790:	movt	r1, #0
    1794:	bl	0 <coda_set_error>
    1798:	mov	r0, #0
    179c:	pop	{r4, r5, fp, pc}
    17a0:	movw	r0, #65136	; 0xfe70
    17a4:	movw	r1, #0
    17a8:	mov	r2, r4
    17ac:	movt	r0, #65535	; 0xffff
    17b0:	movt	r1, #0
    17b4:	bl	0 <coda_set_error>
    17b8:	mov	r0, #0
    17bc:	pop	{r4, r5, fp, pc}
    17c0:	.word	0x00000000

000017c4 <coda_data_dictionary_has_product_class>:
    17c4:	push	{fp, lr}
    17c8:	mov	fp, sp
    17cc:	ldr	r2, [pc, #48]	; 1804 <coda_data_dictionary_has_product_class+0x40>
    17d0:	mov	r1, r0
    17d4:	bl	0 <__aeabi_read_tp>
    17d8:	ldr	r0, [r0, r2]
    17dc:	cmp	r0, #0
    17e0:	beq	17fc <coda_data_dictionary_has_product_class+0x38>
    17e4:	ldr	r0, [r0, #8]
    17e8:	bl	0 <coda_hashtable_get_index_from_name>
    17ec:	mvn	r1, #0
    17f0:	subs	r0, r0, r1
    17f4:	movwne	r0, #1
    17f8:	pop	{fp, pc}
    17fc:	mov	r0, #0
    1800:	pop	{fp, pc}
    1804:	.word	0x00000000

00001808 <coda_data_dictionary_remove_product_class>:
    1808:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    180c:	add	fp, sp, #28
    1810:	sub	sp, sp, #4
    1814:	ldr	r5, [pc, #776]	; 1b24 <coda_data_dictionary_remove_product_class+0x31c>
    1818:	mov	r4, r0
    181c:	bl	0 <__aeabi_read_tp>
    1820:	ldr	r0, [r0, r5]
    1824:	cmp	r0, #0
    1828:	beq	1adc <coda_data_dictionary_remove_product_class+0x2d4>
    182c:	ldr	r1, [r4]
    1830:	ldr	r0, [r0, #8]
    1834:	bl	0 <coda_hashtable_get_index_from_name>
    1838:	cmn	r0, #1
    183c:	beq	1af4 <coda_data_dictionary_remove_product_class+0x2ec>
    1840:	mov	r1, r0
    1844:	bl	0 <__aeabi_read_tp>
    1848:	ldr	r0, [r0, r5]
    184c:	add	r3, r1, #1
    1850:	ldr	r2, [r0]
    1854:	cmp	r3, r2
    1858:	bge	188c <coda_data_dictionary_remove_product_class+0x84>
    185c:	ldr	r0, [r0, #4]
    1860:	add	r2, r0, r1, lsl #2
    1864:	ldr	r2, [r2, #4]
    1868:	str	r2, [r0, r1, lsl #2]
    186c:	bl	0 <__aeabi_read_tp>
    1870:	ldr	r0, [r0, r5]
    1874:	add	r3, r1, #1
    1878:	add	r1, r1, #2
    187c:	ldr	r2, [r0]
    1880:	cmp	r1, r2
    1884:	mov	r1, r3
    1888:	blt	185c <coda_data_dictionary_remove_product_class+0x54>
    188c:	sub	r1, r2, #1
    1890:	str	r1, [r0]
    1894:	mov	r0, r4
    1898:	bl	f48 <coda_product_class_delete>
    189c:	bl	1654 <data_dictionary_rebuild_product_class_hash_data>
    18a0:	cmp	r0, #0
    18a4:	bne	1b0c <coda_data_dictionary_remove_product_class+0x304>
    18a8:	bl	0 <__aeabi_read_tp>
    18ac:	ldr	r1, [r0, r5]
    18b0:	ldr	r0, [r1, #12]
    18b4:	cmp	r0, #0
    18b8:	beq	18d0 <coda_data_dictionary_remove_product_class+0xc8>
    18bc:	bl	0 <coda_detection_tree_delete>
    18c0:	bl	0 <__aeabi_read_tp>
    18c4:	ldr	r1, [r0, r5]
    18c8:	mov	r0, #0
    18cc:	str	r0, [r1, #12]
    18d0:	ldr	r0, [r1, #16]
    18d4:	cmp	r0, #0
    18d8:	beq	18f0 <coda_data_dictionary_remove_product_class+0xe8>
    18dc:	bl	0 <coda_detection_tree_delete>
    18e0:	bl	0 <__aeabi_read_tp>
    18e4:	ldr	r1, [r0, r5]
    18e8:	mov	r0, #0
    18ec:	str	r0, [r1, #16]
    18f0:	ldr	r0, [r1, #20]
    18f4:	cmp	r0, #0
    18f8:	beq	1910 <coda_data_dictionary_remove_product_class+0x108>
    18fc:	bl	0 <coda_detection_tree_delete>
    1900:	bl	0 <__aeabi_read_tp>
    1904:	ldr	r1, [r0, r5]
    1908:	mov	r0, #0
    190c:	str	r0, [r1, #20]
    1910:	ldr	r0, [r1, #24]
    1914:	cmp	r0, #0
    1918:	beq	1930 <coda_data_dictionary_remove_product_class+0x128>
    191c:	bl	0 <coda_detection_tree_delete>
    1920:	bl	0 <__aeabi_read_tp>
    1924:	ldr	r1, [r0, r5]
    1928:	mov	r0, #0
    192c:	str	r0, [r1, #24]
    1930:	ldr	r0, [r1, #28]
    1934:	cmp	r0, #0
    1938:	beq	1950 <coda_data_dictionary_remove_product_class+0x148>
    193c:	bl	0 <coda_detection_tree_delete>
    1940:	bl	0 <__aeabi_read_tp>
    1944:	ldr	r1, [r0, r5]
    1948:	mov	r0, #0
    194c:	str	r0, [r1, #28]
    1950:	ldr	r0, [r1, #32]
    1954:	cmp	r0, #0
    1958:	beq	1970 <coda_data_dictionary_remove_product_class+0x168>
    195c:	bl	0 <coda_detection_tree_delete>
    1960:	bl	0 <__aeabi_read_tp>
    1964:	ldr	r1, [r0, r5]
    1968:	mov	r0, #0
    196c:	str	r0, [r1, #32]
    1970:	ldr	r0, [r1, #36]	; 0x24
    1974:	cmp	r0, #0
    1978:	beq	1990 <coda_data_dictionary_remove_product_class+0x188>
    197c:	bl	0 <coda_detection_tree_delete>
    1980:	bl	0 <__aeabi_read_tp>
    1984:	ldr	r1, [r0, r5]
    1988:	mov	r0, #0
    198c:	str	r0, [r1, #36]	; 0x24
    1990:	ldr	r0, [r1, #40]	; 0x28
    1994:	cmp	r0, #0
    1998:	beq	19b0 <coda_data_dictionary_remove_product_class+0x1a8>
    199c:	bl	0 <coda_detection_tree_delete>
    19a0:	bl	0 <__aeabi_read_tp>
    19a4:	ldr	r1, [r0, r5]
    19a8:	mov	r0, #0
    19ac:	str	r0, [r1, #40]	; 0x28
    19b0:	ldr	r0, [r1, #44]	; 0x2c
    19b4:	cmp	r0, #0
    19b8:	beq	19d0 <coda_data_dictionary_remove_product_class+0x1c8>
    19bc:	bl	0 <coda_detection_tree_delete>
    19c0:	bl	0 <__aeabi_read_tp>
    19c4:	ldr	r1, [r0, r5]
    19c8:	mov	r0, #0
    19cc:	str	r0, [r1, #44]	; 0x2c
    19d0:	ldr	r0, [r1, #48]	; 0x30
    19d4:	cmp	r0, #0
    19d8:	beq	19f0 <coda_data_dictionary_remove_product_class+0x1e8>
    19dc:	bl	0 <coda_detection_tree_delete>
    19e0:	bl	0 <__aeabi_read_tp>
    19e4:	ldr	r1, [r0, r5]
    19e8:	mov	r0, #0
    19ec:	str	r0, [r1, #48]	; 0x30
    19f0:	ldr	r0, [r1]
    19f4:	cmp	r0, #1
    19f8:	blt	1b18 <coda_data_dictionary_remove_product_class+0x310>
    19fc:	mov	r9, #0
    1a00:	ldr	r0, [r1, #4]
    1a04:	ldr	r3, [r0, r9, lsl #2]
    1a08:	ldr	r2, [r3, #28]
    1a0c:	cmp	r2, #1
    1a10:	blt	1ac4 <coda_data_dictionary_remove_product_class+0x2bc>
    1a14:	mov	sl, #0
    1a18:	str	r3, [sp]
    1a1c:	ldr	r0, [r3, #32]
    1a20:	ldr	r6, [r0, sl, lsl #2]
    1a24:	ldr	r0, [r6, #8]
    1a28:	cmp	r0, #1
    1a2c:	blt	1ab0 <coda_data_dictionary_remove_product_class+0x2a8>
    1a30:	mov	r4, #0
    1a34:	b	1a44 <coda_data_dictionary_remove_product_class+0x23c>
    1a38:	add	r4, r4, #1
    1a3c:	cmp	r4, r0
    1a40:	bge	1aa8 <coda_data_dictionary_remove_product_class+0x2a0>
    1a44:	ldr	r1, [r6, #12]
    1a48:	ldr	r7, [r1, r4, lsl #2]
    1a4c:	ldr	r1, [r7, #16]
    1a50:	cmp	r1, #1
    1a54:	blt	1a38 <coda_data_dictionary_remove_product_class+0x230>
    1a58:	mov	r8, #0
    1a5c:	bl	0 <__aeabi_read_tp>
    1a60:	ldr	r1, [r7, #20]
    1a64:	ldr	r0, [r0, r5]
    1a68:	ldr	r1, [r1, r8, lsl #2]
    1a6c:	ldr	r2, [r1, #8]
    1a70:	ldr	r2, [r2]
    1a74:	cmp	r2, #0
    1a78:	movweq	r2, #1
    1a7c:	add	r0, r0, r2, lsl #2
    1a80:	add	r0, r0, #12
    1a84:	bl	0 <coda_detection_tree_add_rule>
    1a88:	cmp	r0, #0
    1a8c:	bne	1b0c <coda_data_dictionary_remove_product_class+0x304>
    1a90:	ldr	r0, [r7, #16]
    1a94:	add	r8, r8, #1
    1a98:	cmp	r8, r0
    1a9c:	blt	1a5c <coda_data_dictionary_remove_product_class+0x254>
    1aa0:	ldr	r0, [r6, #8]
    1aa4:	b	1a38 <coda_data_dictionary_remove_product_class+0x230>
    1aa8:	ldr	r3, [sp]
    1aac:	ldr	r2, [r3, #28]
    1ab0:	add	sl, sl, #1
    1ab4:	cmp	sl, r2
    1ab8:	blt	1a1c <coda_data_dictionary_remove_product_class+0x214>
    1abc:	bl	0 <__aeabi_read_tp>
    1ac0:	ldr	r1, [r0, r5]
    1ac4:	ldr	r2, [r1]
    1ac8:	add	r9, r9, #1
    1acc:	mov	r0, #0
    1ad0:	cmp	r9, r2
    1ad4:	blt	1a00 <coda_data_dictionary_remove_product_class+0x1f8>
    1ad8:	b	1b10 <coda_data_dictionary_remove_product_class+0x308>
    1adc:	movw	r0, #65136	; 0xfe70
    1ae0:	movw	r1, #0
    1ae4:	movt	r0, #65535	; 0xffff
    1ae8:	movt	r1, #0
    1aec:	bl	0 <coda_set_error>
    1af0:	b	1b0c <coda_data_dictionary_remove_product_class+0x304>
    1af4:	ldr	r2, [r4]
    1af8:	movw	r0, #65136	; 0xfe70
    1afc:	movw	r1, #0
    1b00:	movt	r0, #65535	; 0xffff
    1b04:	movt	r1, #0
    1b08:	bl	0 <coda_set_error>
    1b0c:	mvn	r0, #0
    1b10:	sub	sp, fp, #28
    1b14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b18:	mov	r0, #0
    1b1c:	sub	sp, fp, #28
    1b20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b24:	.word	0x00000000

00001b28 <coda_data_dictionary_get_definition>:
    1b28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    1b2c:	add	fp, sp, #24
    1b30:	ldr	r5, [pc, #504]	; 1d30 <coda_data_dictionary_get_definition+0x208>
    1b34:	mov	r8, r3
    1b38:	mov	r6, r2
    1b3c:	mov	r7, r1
    1b40:	mov	r4, r0
    1b44:	bl	0 <__aeabi_read_tp>
    1b48:	ldr	r0, [r0, r5]
    1b4c:	cmp	r0, #0
    1b50:	beq	1bfc <coda_data_dictionary_get_definition+0xd4>
    1b54:	ldr	r0, [r0, #8]
    1b58:	mov	r1, r4
    1b5c:	bl	0 <coda_hashtable_get_index_from_name>
    1b60:	cmn	r0, #1
    1b64:	beq	1c14 <coda_data_dictionary_get_definition+0xec>
    1b68:	mov	r1, r0
    1b6c:	bl	0 <__aeabi_read_tp>
    1b70:	ldr	r0, [r0, r5]
    1b74:	mvn	r4, #0
    1b78:	ldr	r0, [r0, #4]
    1b7c:	ldr	r5, [r0, r1, lsl #2]
    1b80:	cmp	r5, #0
    1b84:	beq	1d28 <coda_data_dictionary_get_definition+0x200>
    1b88:	ldr	r0, [r5, #36]	; 0x24
    1b8c:	mov	r1, r7
    1b90:	bl	0 <coda_hashtable_get_index_from_name>
    1b94:	cmn	r0, #1
    1b98:	beq	1c38 <coda_data_dictionary_get_definition+0x110>
    1b9c:	ldr	r1, [r5, #32]
    1ba0:	ldr	r0, [r1, r0, lsl #2]
    1ba4:	cmp	r0, #0
    1ba8:	beq	1d28 <coda_data_dictionary_get_definition+0x200>
    1bac:	ldr	r2, [r0, #8]
    1bb0:	cmn	r6, #1
    1bb4:	ble	1c5c <coda_data_dictionary_get_definition+0x134>
    1bb8:	cmp	r2, #1
    1bbc:	blt	1be0 <coda_data_dictionary_get_definition+0xb8>
    1bc0:	ldr	r3, [r0, #12]
    1bc4:	ldr	r1, [r3]
    1bc8:	ldr	r7, [r1, #4]
    1bcc:	cmp	r7, r6
    1bd0:	beq	1d1c <coda_data_dictionary_get_definition+0x1f4>
    1bd4:	add	r3, r3, #4
    1bd8:	subs	r2, r2, #1
    1bdc:	bne	1bc4 <coda_data_dictionary_get_definition+0x9c>
    1be0:	ldr	r2, [r0]
    1be4:	movw	r0, #65136	; 0xfe70
    1be8:	movw	r1, #0
    1bec:	mov	r3, r6
    1bf0:	movt	r0, #65535	; 0xffff
    1bf4:	movt	r1, #0
    1bf8:	b	1c50 <coda_data_dictionary_get_definition+0x128>
    1bfc:	movw	r0, #65136	; 0xfe70
    1c00:	movw	r1, #0
    1c04:	movt	r0, #65535	; 0xffff
    1c08:	movt	r1, #0
    1c0c:	bl	0 <coda_set_error>
    1c10:	b	1c2c <coda_data_dictionary_get_definition+0x104>
    1c14:	movw	r0, #65136	; 0xfe70
    1c18:	movw	r1, #0
    1c1c:	mov	r2, r4
    1c20:	movt	r0, #65535	; 0xffff
    1c24:	movt	r1, #0
    1c28:	bl	0 <coda_set_error>
    1c2c:	mvn	r4, #0
    1c30:	mov	r0, r4
    1c34:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    1c38:	ldr	r2, [r5]
    1c3c:	movw	r0, #65136	; 0xfe70
    1c40:	movw	r1, #0
    1c44:	mov	r3, r7
    1c48:	movt	r0, #65535	; 0xffff
    1c4c:	movt	r1, #0
    1c50:	bl	0 <coda_set_error>
    1c54:	mov	r0, r4
    1c58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    1c5c:	cmp	r2, #0
    1c60:	beq	1c9c <coda_data_dictionary_get_definition+0x174>
    1c64:	ldr	r0, [r0, #12]
    1c68:	cmp	r2, #2
    1c6c:	ldr	r1, [r0]
    1c70:	blt	1d1c <coda_data_dictionary_get_definition+0x1f4>
    1c74:	ldr	r1, [r1, #4]
    1c78:	sub	r7, r2, #1
    1c7c:	cmp	r2, #2
    1c80:	and	ip, r7, #1
    1c84:	bne	1cbc <coda_data_dictionary_get_definition+0x194>
    1c88:	mov	r2, #0
    1c8c:	mov	r7, #1
    1c90:	cmp	ip, #0
    1c94:	bne	1d08 <coda_data_dictionary_get_definition+0x1e0>
    1c98:	b	1d18 <coda_data_dictionary_get_definition+0x1f0>
    1c9c:	ldr	r2, [r0]
    1ca0:	movw	r0, #65136	; 0xfe70
    1ca4:	movw	r1, #0
    1ca8:	movt	r0, #65535	; 0xffff
    1cac:	movt	r1, #0
    1cb0:	bl	0 <coda_set_error>
    1cb4:	mov	r0, r4
    1cb8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    1cbc:	sub	r6, r7, ip
    1cc0:	mov	r7, #0
    1cc4:	mov	r2, #0
    1cc8:	add	r5, r0, r7, lsl #2
    1ccc:	ldmib	r5, {r3, r5}
    1cd0:	ldr	r3, [r3, #4]
    1cd4:	cmp	r3, r1
    1cd8:	movgt	r1, r3
    1cdc:	ldr	r3, [r5, #4]
    1ce0:	addgt	r2, r7, #1
    1ce4:	add	r7, r7, #2
    1ce8:	cmp	r3, r1
    1cec:	movgt	r2, r7
    1cf0:	movgt	r1, r3
    1cf4:	cmp	r6, r7
    1cf8:	bne	1cc8 <coda_data_dictionary_get_definition+0x1a0>
    1cfc:	add	r7, r7, #1
    1d00:	cmp	ip, #0
    1d04:	beq	1d18 <coda_data_dictionary_get_definition+0x1f0>
    1d08:	ldr	r3, [r0, r7, lsl #2]
    1d0c:	ldr	r3, [r3, #4]
    1d10:	cmp	r3, r1
    1d14:	movgt	r2, r7
    1d18:	ldr	r1, [r0, r2, lsl #2]
    1d1c:	cmp	r1, #0
    1d20:	movne	r4, #0
    1d24:	strne	r1, [r8]
    1d28:	mov	r0, r4
    1d2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    1d30:	.word	0x00000000

00001d34 <coda_data_dictionary_get_detection_tree>:
    1d34:	push	{fp, lr}
    1d38:	mov	fp, sp
    1d3c:	ldr	r2, [pc, #28]	; 1d60 <coda_data_dictionary_get_detection_tree+0x2c>
    1d40:	mov	r1, r0
    1d44:	bl	0 <__aeabi_read_tp>
    1d48:	ldr	r0, [r0, r2]
    1d4c:	cmp	r1, #0
    1d50:	movweq	r1, #1
    1d54:	add	r0, r0, r1, lsl #2
    1d58:	ldr	r0, [r0, #12]
    1d5c:	pop	{fp, pc}
    1d60:	.word	0x00000000

00001d64 <coda_data_dictionary_find_definition_for_product>:
    1d64:	push	{r4, r5, r6, r7, fp, lr}
    1d68:	add	fp, sp, #16
    1d6c:	sub	sp, sp, #520	; 0x208
    1d70:	mov	r5, r0
    1d74:	mov	r4, r1
    1d78:	mov	r0, sp
    1d7c:	mov	r1, r5
    1d80:	bl	0 <coda_cursor_set_product>
    1d84:	mov	r1, r0
    1d88:	mvn	r0, #0
    1d8c:	cmp	r1, #0
    1d90:	beq	1d9c <coda_data_dictionary_find_definition_for_product+0x38>
    1d94:	sub	sp, fp, #16
    1d98:	pop	{r4, r5, r6, r7, fp, pc}
    1d9c:	ldr	r1, [pc, #44]	; 1dd0 <coda_data_dictionary_find_definition_for_product+0x6c>
    1da0:	bl	0 <__aeabi_read_tp>
    1da4:	ldr	r0, [r0, r1]
    1da8:	ldr	r1, [r5, #16]
    1dac:	mov	r2, r4
    1db0:	cmp	r1, #0
    1db4:	movweq	r1, #1
    1db8:	add	r0, r0, r1, lsl #2
    1dbc:	mov	r1, sp
    1dc0:	ldr	r0, [r0, #12]
    1dc4:	bl	0 <coda_evaluate_detection_node>
    1dc8:	sub	sp, fp, #16
    1dcc:	pop	{r4, r5, r6, r7, fp, pc}
    1dd0:	.word	0x00000000

00001dd4 <coda_data_dictionary_init>:
    1dd4:	push	{r4, r5, fp, lr}
    1dd8:	add	fp, sp, #8
    1ddc:	sub	sp, sp, #8
    1de0:	ldr	r5, [pc, #232]	; 1ed0 <coda_data_dictionary_init+0xfc>
    1de4:	bl	0 <__aeabi_read_tp>
    1de8:	ldr	r0, [r0, r5]
    1dec:	cmp	r0, #0
    1df0:	bne	1eb0 <coda_data_dictionary_init+0xdc>
    1df4:	mov	r0, #52	; 0x34
    1df8:	bl	0 <malloc>
    1dfc:	cmp	r0, #0
    1e00:	beq	1e6c <coda_data_dictionary_init+0x98>
    1e04:	vmov.i32	q8, #0	; 0x00000000
    1e08:	mov	r4, r0
    1e0c:	mov	r0, #48	; 0x30
    1e10:	mov	r1, r4
    1e14:	vst1.32	{d16-d17}, [r1], r0
    1e18:	mov	r0, #0
    1e1c:	str	r0, [r1]
    1e20:	add	r0, r4, #32
    1e24:	vst1.32	{d16-d17}, [r0]
    1e28:	add	r0, r4, #16
    1e2c:	vst1.32	{d16-d17}, [r0]
    1e30:	mov	r0, #1
    1e34:	bl	0 <coda_hashtable_new>
    1e38:	cmp	r0, #0
    1e3c:	str	r0, [r4, #8]
    1e40:	bne	1e94 <coda_data_dictionary_init+0xc0>
    1e44:	movw	r1, #0
    1e48:	movw	r2, #0
    1e4c:	mvn	r0, #0
    1e50:	movw	r3, #935	; 0x3a7
    1e54:	movt	r1, #0
    1e58:	movt	r2, #0
    1e5c:	bl	0 <coda_set_error>
    1e60:	mov	r0, r4
    1e64:	bl	1f28 <delete_data_dictionary>
    1e68:	b	1e90 <coda_data_dictionary_init+0xbc>
    1e6c:	movw	r1, #0
    1e70:	movw	r3, #0
    1e74:	mov	r0, #920	; 0x398
    1e78:	mov	r2, #52	; 0x34
    1e7c:	movt	r1, #0
    1e80:	movt	r3, #0
    1e84:	str	r0, [sp]
    1e88:	mvn	r0, #0
    1e8c:	bl	0 <coda_set_error>
    1e90:	mov	r4, #0
    1e94:	bl	0 <__aeabi_read_tp>
    1e98:	cmp	r4, #0
    1e9c:	str	r4, [r0, r5]
    1ea0:	mov	r0, #0
    1ea4:	mvneq	r0, #0
    1ea8:	sub	sp, fp, #8
    1eac:	pop	{r4, r5, fp, pc}
    1eb0:	movw	r0, #0
    1eb4:	movw	r1, #0
    1eb8:	movw	r3, #0
    1ebc:	mov	r2, #1200	; 0x4b0
    1ec0:	movt	r0, #0
    1ec4:	movt	r1, #0
    1ec8:	movt	r3, #0
    1ecc:	bl	0 <__assert_fail>
    1ed0:	.word	0x00000000

00001ed4 <coda_data_dictionary_done>:
    1ed4:	push	{r4, sl, fp, lr}
    1ed8:	add	fp, sp, #8
    1edc:	ldr	r4, [pc, #64]	; 1f24 <coda_data_dictionary_done+0x50>
    1ee0:	bl	0 <__aeabi_read_tp>
    1ee4:	ldr	r0, [r0, r4]
    1ee8:	cmp	r0, #0
    1eec:	beq	1f04 <coda_data_dictionary_done+0x30>
    1ef0:	bl	1f28 <delete_data_dictionary>
    1ef4:	mov	r1, #0
    1ef8:	bl	0 <__aeabi_read_tp>
    1efc:	str	r1, [r0, r4]
    1f00:	pop	{r4, sl, fp, pc}
    1f04:	movw	r0, #0
    1f08:	movw	r1, #0
    1f0c:	movw	r3, #0
    1f10:	movw	r2, #1213	; 0x4bd
    1f14:	movt	r0, #0
    1f18:	movt	r1, #0
    1f1c:	movt	r3, #0
    1f20:	bl	0 <__assert_fail>
    1f24:	.word	0x00000000

00001f28 <delete_data_dictionary>:
    1f28:	push	{r4, r5, fp, lr}
    1f2c:	add	fp, sp, #8
    1f30:	cmp	r0, #0
    1f34:	beq	2034 <delete_data_dictionary+0x10c>
    1f38:	mov	r4, r0
    1f3c:	ldr	r0, [r0, #8]
    1f40:	cmp	r0, #0
    1f44:	beq	1f4c <delete_data_dictionary+0x24>
    1f48:	bl	0 <coda_hashtable_delete>
    1f4c:	ldr	r0, [r4, #4]
    1f50:	cmp	r0, #0
    1f54:	beq	1f88 <delete_data_dictionary+0x60>
    1f58:	ldr	r1, [r4]
    1f5c:	cmp	r1, #1
    1f60:	blt	1f84 <delete_data_dictionary+0x5c>
    1f64:	mov	r5, #0
    1f68:	ldr	r0, [r0, r5, lsl #2]
    1f6c:	bl	f48 <coda_product_class_delete>
    1f70:	ldr	r1, [r4]
    1f74:	ldr	r0, [r4, #4]
    1f78:	add	r5, r5, #1
    1f7c:	cmp	r5, r1
    1f80:	blt	1f68 <delete_data_dictionary+0x40>
    1f84:	bl	0 <free>
    1f88:	ldr	r0, [r4, #12]
    1f8c:	cmp	r0, #0
    1f90:	beq	1f98 <delete_data_dictionary+0x70>
    1f94:	bl	0 <coda_detection_tree_delete>
    1f98:	ldr	r0, [r4, #16]
    1f9c:	cmp	r0, #0
    1fa0:	beq	1fa8 <delete_data_dictionary+0x80>
    1fa4:	bl	0 <coda_detection_tree_delete>
    1fa8:	ldr	r0, [r4, #20]
    1fac:	cmp	r0, #0
    1fb0:	beq	1fb8 <delete_data_dictionary+0x90>
    1fb4:	bl	0 <coda_detection_tree_delete>
    1fb8:	ldr	r0, [r4, #24]
    1fbc:	cmp	r0, #0
    1fc0:	beq	1fc8 <delete_data_dictionary+0xa0>
    1fc4:	bl	0 <coda_detection_tree_delete>
    1fc8:	ldr	r0, [r4, #28]
    1fcc:	cmp	r0, #0
    1fd0:	beq	1fd8 <delete_data_dictionary+0xb0>
    1fd4:	bl	0 <coda_detection_tree_delete>
    1fd8:	ldr	r0, [r4, #32]
    1fdc:	cmp	r0, #0
    1fe0:	beq	1fe8 <delete_data_dictionary+0xc0>
    1fe4:	bl	0 <coda_detection_tree_delete>
    1fe8:	ldr	r0, [r4, #36]	; 0x24
    1fec:	cmp	r0, #0
    1ff0:	beq	1ff8 <delete_data_dictionary+0xd0>
    1ff4:	bl	0 <coda_detection_tree_delete>
    1ff8:	ldr	r0, [r4, #40]	; 0x28
    1ffc:	cmp	r0, #0
    2000:	beq	2008 <delete_data_dictionary+0xe0>
    2004:	bl	0 <coda_detection_tree_delete>
    2008:	ldr	r0, [r4, #44]	; 0x2c
    200c:	cmp	r0, #0
    2010:	beq	2018 <delete_data_dictionary+0xf0>
    2014:	bl	0 <coda_detection_tree_delete>
    2018:	ldr	r0, [r4, #48]	; 0x30
    201c:	cmp	r0, #0
    2020:	beq	2028 <delete_data_dictionary+0x100>
    2024:	bl	0 <coda_detection_tree_delete>
    2028:	mov	r0, r4
    202c:	pop	{r4, r5, fp, lr}
    2030:	b	0 <free>
    2034:	movw	r0, #0
    2038:	movw	r1, #0
    203c:	movw	r3, #0
    2040:	movw	r2, #887	; 0x377
    2044:	movt	r0, #0
    2048:	movt	r1, #0
    204c:	movt	r3, #0
    2050:	bl	0 <__assert_fail>
