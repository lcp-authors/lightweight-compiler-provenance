
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-mem-type.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_mem_type_delete>:
       0:	push	{r4, r5, fp, lr}
       4:	add	fp, sp, #8
       8:	cmp	r0, #0
       c:	beq	10c <coda_mem_type_delete+0x10c>
      10:	mov	r4, r0
      14:	ldr	r0, [r0]
      18:	cmp	r0, #100	; 0x64
      1c:	bne	12c <coda_mem_type_delete+0x12c>
      20:	ldr	r0, [r4, #8]
      24:	cmp	r0, #3
      28:	beq	d0 <coda_mem_type_delete+0xd0>
      2c:	cmp	r0, #1
      30:	beq	84 <coda_mem_type_delete+0x84>
      34:	cmp	r0, #0
      38:	bne	e0 <coda_mem_type_delete+0xe0>
      3c:	ldr	r0, [r4, #20]
      40:	cmp	r0, #0
      44:	beq	e0 <coda_mem_type_delete+0xe0>
      48:	ldr	r2, [r4, #16]
      4c:	cmp	r2, #1
      50:	blt	c8 <coda_mem_type_delete+0xc8>
      54:	mov	r5, #0
      58:	ldr	r1, [r0, r5, lsl #2]
      5c:	cmp	r1, #0
      60:	beq	74 <coda_mem_type_delete+0x74>
      64:	mov	r0, r1
      68:	bl	0 <coda_dynamic_type_delete>
      6c:	ldr	r2, [r4, #16]
      70:	ldr	r0, [r4, #20]
      74:	add	r5, r5, #1
      78:	cmp	r5, r2
      7c:	blt	58 <coda_mem_type_delete+0x58>
      80:	b	c8 <coda_mem_type_delete+0xc8>
      84:	ldr	r0, [r4, #20]
      88:	cmp	r0, #0
      8c:	beq	e0 <coda_mem_type_delete+0xe0>
      90:	ldr	r2, [r4, #16]
      94:	cmp	r2, #1
      98:	blt	c8 <coda_mem_type_delete+0xc8>
      9c:	mov	r5, #0
      a0:	ldr	r1, [r0, r5, lsl #2]
      a4:	cmp	r1, #0
      a8:	beq	bc <coda_mem_type_delete+0xbc>
      ac:	mov	r0, r1
      b0:	bl	0 <coda_dynamic_type_delete>
      b4:	ldr	r2, [r4, #16]
      b8:	ldr	r0, [r4, #20]
      bc:	add	r5, r5, #1
      c0:	cmp	r5, r2
      c4:	blt	a0 <coda_mem_type_delete+0xa0>
      c8:	bl	0 <free>
      cc:	b	e0 <coda_mem_type_delete+0xe0>
      d0:	ldr	r0, [r4, #16]
      d4:	cmp	r0, #0
      d8:	beq	e0 <coda_mem_type_delete+0xe0>
      dc:	bl	0 <coda_dynamic_type_delete>
      e0:	ldr	r0, [r4, #12]
      e4:	cmp	r0, #0
      e8:	beq	f0 <coda_mem_type_delete+0xf0>
      ec:	bl	0 <coda_dynamic_type_delete>
      f0:	ldr	r0, [r4, #4]
      f4:	cmp	r0, #0
      f8:	beq	100 <coda_mem_type_delete+0x100>
      fc:	bl	0 <coda_type_release>
     100:	mov	r0, r4
     104:	pop	{r4, r5, fp, lr}
     108:	b	0 <free>
     10c:	movw	r0, #0
     110:	movw	r1, #0
     114:	movw	r3, #0
     118:	mov	r2, #42	; 0x2a
     11c:	movt	r0, #0
     120:	movt	r1, #0
     124:	movt	r3, #0
     128:	bl	0 <__assert_fail>
     12c:	movw	r0, #0
     130:	movw	r1, #0
     134:	movw	r3, #0
     138:	mov	r2, #43	; 0x2b
     13c:	movt	r0, #0
     140:	movt	r1, #0
     144:	movt	r3, #0
     148:	bl	0 <__assert_fail>

0000014c <coda_mem_type_update>:
     14c:	push	{r4, r5, r6, r7, fp, lr}
     150:	add	fp, sp, #16
     154:	sub	sp, sp, #8
     158:	ldr	r4, [r0]
     15c:	mov	r6, r1
     160:	mov	r5, r0
     164:	mvn	r7, #0
     168:	b	170 <coda_mem_type_update+0x24>
     16c:	str	r4, [r5]
     170:	ldr	r0, [r4]
     174:	cmp	r0, #2
     178:	bcc	200 <coda_mem_type_update+0xb4>
     17c:	cmp	r0, #100	; 0x64
     180:	bne	498 <coda_mem_type_update+0x34c>
     184:	ldr	r0, [r4, #4]
     188:	cmp	r0, r6
     18c:	beq	2a8 <coda_mem_type_update+0x15c>
     190:	ldr	r2, [r6, #8]
     194:	ldr	r1, [r0, #8]
     198:	cmp	r2, #1
     19c:	bne	218 <coda_mem_type_update+0xcc>
     1a0:	cmp	r1, #1
     1a4:	beq	224 <coda_mem_type_update+0xd8>
     1a8:	ldr	r0, [r6]
     1ac:	cmp	r0, #2
     1b0:	bne	4b8 <coda_mem_type_update+0x36c>
     1b4:	mov	r0, r6
     1b8:	mov	r1, #0
     1bc:	bl	558 <coda_mem_array_new>
     1c0:	cmp	r0, #0
     1c4:	beq	20c <coda_mem_type_update+0xc0>
     1c8:	ldr	r1, [r6, #40]	; 0x28
     1cc:	mov	r4, r0
     1d0:	mov	r0, r5
     1d4:	bl	14c <coda_mem_type_update>
     1d8:	cmp	r0, #0
     1dc:	bne	1f4 <coda_mem_type_update+0xa8>
     1e0:	ldr	r1, [r5]
     1e4:	mov	r0, r4
     1e8:	bl	6c0 <coda_mem_array_add_element>
     1ec:	cmp	r0, #0
     1f0:	beq	16c <coda_mem_type_update+0x20>
     1f4:	mov	r0, r4
     1f8:	bl	0 <coda_dynamic_type_delete>
     1fc:	b	20c <coda_mem_type_update+0xc0>
     200:	mov	r7, #0
     204:	cmp	r4, r6
     208:	bne	4d8 <coda_mem_type_update+0x38c>
     20c:	mov	r0, r7
     210:	sub	sp, fp, #16
     214:	pop	{r4, r5, r6, r7, fp, pc}
     218:	cmp	r2, #4
     21c:	cmpeq	r1, #0
     220:	beq	244 <coda_mem_type_update+0xf8>
     224:	movw	r0, #0
     228:	movw	r1, #0
     22c:	movw	r3, #0
     230:	mov	r2, #153	; 0x99
     234:	movt	r0, #0
     238:	movt	r1, #0
     23c:	movt	r3, #0
     240:	bl	0 <__assert_fail>
     244:	ldr	r1, [r0]
     248:	cmp	r1, #2
     24c:	bne	4f8 <coda_mem_type_update+0x3ac>
     250:	ldr	r0, [r0, #48]	; 0x30
     254:	cmp	r0, #0
     258:	bne	518 <coda_mem_type_update+0x3cc>
     25c:	ldr	r0, [r6, #12]
     260:	cmp	r0, #11
     264:	bne	538 <coda_mem_type_update+0x3ec>
     268:	mov	r7, #0
     26c:	mov	r0, r6
     270:	mov	r1, #0
     274:	mov	r2, #0
     278:	mov	r3, #0
     27c:	str	r7, [sp]
     280:	bl	12f0 <coda_mem_data_new>
     284:	mov	r4, r0
     288:	ldr	r0, [r5]
     28c:	ldr	r0, [r0, #12]
     290:	str	r0, [r4, #12]
     294:	ldr	r0, [r5]
     298:	str	r7, [r0, #12]
     29c:	ldr	r0, [r5]
     2a0:	bl	0 <coda_dynamic_type_delete>
     2a4:	str	r4, [r5]
     2a8:	ldr	r0, [r4, #8]
     2ac:	cmp	r0, #0
     2b0:	beq	32c <coda_mem_type_update+0x1e0>
     2b4:	cmp	r0, #3
     2b8:	beq	30c <coda_mem_type_update+0x1c0>
     2bc:	cmp	r0, #1
     2c0:	bne	400 <coda_mem_type_update+0x2b4>
     2c4:	ldr	r0, [r4, #16]
     2c8:	cmp	r0, #1
     2cc:	blt	400 <coda_mem_type_update+0x2b4>
     2d0:	mov	r5, #0
     2d4:	mov	r6, #0
     2d8:	ldr	r1, [r4, #4]
     2dc:	ldr	r0, [r4, #20]
     2e0:	ldr	r1, [r1, #40]	; 0x28
     2e4:	add	r0, r0, r5
     2e8:	bl	14c <coda_mem_type_update>
     2ec:	cmp	r0, #0
     2f0:	bne	454 <coda_mem_type_update+0x308>
     2f4:	ldr	r0, [r4, #16]
     2f8:	add	r6, r6, #1
     2fc:	add	r5, r5, #4
     300:	cmp	r6, r0
     304:	blt	2d8 <coda_mem_type_update+0x18c>
     308:	b	400 <coda_mem_type_update+0x2b4>
     30c:	ldr	r0, [r4, #4]
     310:	ldr	r1, [r0, #44]	; 0x2c
     314:	add	r0, r4, #16
     318:	bl	14c <coda_mem_type_update>
     31c:	mvn	r7, #0
     320:	cmp	r0, #0
     324:	bne	20c <coda_mem_type_update+0xc0>
     328:	b	400 <coda_mem_type_update+0x2b4>
     32c:	ldr	r1, [r4, #4]
     330:	ldr	r0, [r4, #16]
     334:	ldr	r2, [r1, #48]	; 0x30
     338:	cmp	r0, r2
     33c:	bge	39c <coda_mem_type_update+0x250>
     340:	ldr	r0, [r4, #20]
     344:	lsl	r1, r2, #2
     348:	bl	0 <realloc>
     34c:	cmp	r0, #0
     350:	beq	464 <coda_mem_type_update+0x318>
     354:	str	r0, [r4, #20]
     358:	ldr	r1, [r4, #4]
     35c:	ldr	r7, [r4, #16]
     360:	ldr	r2, [r1, #48]	; 0x30
     364:	cmp	r7, r2
     368:	bge	398 <coda_mem_type_update+0x24c>
     36c:	mov	r3, #0
     370:	str	r3, [r0, r7, lsl #2]
     374:	add	r0, r7, #1
     378:	b	388 <coda_mem_type_update+0x23c>
     37c:	ldr	r1, [r4, #20]
     380:	str	r3, [r1, r0, lsl #2]
     384:	add	r0, r0, #1
     388:	ldr	r1, [r4, #4]
     38c:	ldr	r2, [r1, #48]	; 0x30
     390:	cmp	r0, r2
     394:	blt	37c <coda_mem_type_update+0x230>
     398:	str	r2, [r4, #16]
     39c:	cmp	r2, #1
     3a0:	blt	400 <coda_mem_type_update+0x2b4>
     3a4:	mov	r5, #0
     3a8:	mov	r6, #1
     3ac:	mov	r7, #0
     3b0:	ldr	r0, [r1, #52]	; 0x34
     3b4:	ldr	r2, [r0, r5]
     3b8:	ldr	r0, [r4, #20]
     3bc:	ldr	r3, [r0, r5]!
     3c0:	cmp	r3, #0
     3c4:	beq	3e0 <coda_mem_type_update+0x294>
     3c8:	ldr	r1, [r2, #8]
     3cc:	bl	14c <coda_mem_type_update>
     3d0:	cmp	r0, #0
     3d4:	bne	454 <coda_mem_type_update+0x308>
     3d8:	ldr	r1, [r4, #4]
     3dc:	b	3ec <coda_mem_type_update+0x2a0>
     3e0:	ldrb	r0, [r2, #16]
     3e4:	cmp	r0, #0
     3e8:	strbeq	r6, [r2, #16]
     3ec:	ldr	r0, [r1, #48]	; 0x30
     3f0:	add	r7, r7, #1
     3f4:	add	r5, r5, #4
     3f8:	cmp	r7, r0
     3fc:	blt	3b0 <coda_mem_type_update+0x264>
     400:	mov	r5, r4
     404:	ldr	r0, [r5, #12]!
     408:	cmp	r0, #0
     40c:	beq	430 <coda_mem_type_update+0x2e4>
     410:	ldr	r0, [r4, #4]
     414:	ldr	r1, [r0, #36]	; 0x24
     418:	mov	r0, r5
     41c:	bl	14c <coda_mem_type_update>
     420:	mvn	r7, #0
     424:	cmp	r0, #0
     428:	moveq	r7, #0
     42c:	b	20c <coda_mem_type_update+0xc0>
     430:	ldr	r0, [r4, #4]
     434:	ldr	r0, [r0, #36]	; 0x24
     438:	cmp	r0, #0
     43c:	beq	45c <coda_mem_type_update+0x310>
     440:	mov	r1, #0
     444:	bl	8c8 <coda_mem_record_new>
     448:	cmp	r0, #0
     44c:	str	r0, [r5]
     450:	bne	410 <coda_mem_type_update+0x2c4>
     454:	mvn	r7, #0
     458:	b	20c <coda_mem_type_update+0xc0>
     45c:	mov	r7, #0
     460:	b	20c <coda_mem_type_update+0xc0>
     464:	ldr	r0, [r4, #4]
     468:	mov	r1, #177	; 0xb1
     46c:	movw	r3, #0
     470:	mvn	r7, #0
     474:	movt	r3, #0
     478:	ldr	r0, [r0, #48]	; 0x30
     47c:	str	r1, [sp]
     480:	movw	r1, #0
     484:	movt	r1, #0
     488:	lsl	r2, r0, #2
     48c:	mvn	r0, #0
     490:	bl	0 <coda_set_error>
     494:	b	20c <coda_mem_type_update+0xc0>
     498:	movw	r0, #0
     49c:	movw	r1, #0
     4a0:	movw	r3, #0
     4a4:	mov	r2, #108	; 0x6c
     4a8:	movt	r0, #0
     4ac:	movt	r1, #0
     4b0:	movt	r3, #0
     4b4:	bl	0 <__assert_fail>
     4b8:	movw	r0, #0
     4bc:	movw	r1, #0
     4c0:	movw	r3, #0
     4c4:	mov	r2, #114	; 0x72
     4c8:	movt	r0, #0
     4cc:	movt	r1, #0
     4d0:	movt	r3, #0
     4d4:	bl	0 <__assert_fail>
     4d8:	movw	r0, #0
     4dc:	movw	r1, #0
     4e0:	movw	r3, #0
     4e4:	mov	r2, #104	; 0x68
     4e8:	movt	r0, #0
     4ec:	movt	r1, #0
     4f0:	movt	r3, #0
     4f4:	bl	0 <__assert_fail>
     4f8:	movw	r0, #0
     4fc:	movw	r1, #0
     500:	movw	r3, #0
     504:	mov	r2, #141	; 0x8d
     508:	movt	r0, #0
     50c:	movt	r1, #0
     510:	movt	r3, #0
     514:	bl	0 <__assert_fail>
     518:	movw	r0, #0
     51c:	movw	r1, #0
     520:	movw	r3, #0
     524:	mov	r2, #142	; 0x8e
     528:	movt	r0, #0
     52c:	movt	r1, #0
     530:	movt	r3, #0
     534:	bl	0 <__assert_fail>
     538:	movw	r0, #0
     53c:	movw	r1, #0
     540:	movw	r3, #0
     544:	movw	r2, #935	; 0x3a7
     548:	movt	r0, #0
     54c:	movt	r1, #0
     550:	movt	r3, #0
     554:	bl	0 <__assert_fail>

00000558 <coda_mem_array_new>:
     558:	push	{r4, r5, r6, sl, fp, lr}
     55c:	add	fp, sp, #16
     560:	sub	sp, sp, #8
     564:	cmp	r0, #0
     568:	beq	618 <coda_mem_array_new+0xc0>
     56c:	mov	r5, r0
     570:	mov	r0, #24
     574:	mov	r6, r1
     578:	bl	0 <malloc>
     57c:	cmp	r0, #0
     580:	beq	634 <coda_mem_array_new+0xdc>
     584:	ldr	r1, [r5, #4]
     588:	mov	r4, r0
     58c:	cmp	r6, #0
     590:	mov	r0, #100	; 0x64
     594:	mov	r2, #0
     598:	add	r1, r1, #1
     59c:	str	r1, [r5, #4]
     5a0:	mov	r1, #1
     5a4:	stm	r4, {r0, r5}
     5a8:	str	r1, [r4, #8]
     5ac:	str	r6, [r4, #12]
     5b0:	str	r2, [r4, #16]
     5b4:	str	r2, [r4, #20]
     5b8:	beq	668 <coda_mem_array_new+0x110>
     5bc:	ldr	r0, [r5, #44]	; 0x2c
     5c0:	cmp	r0, #1
     5c4:	blt	65c <coda_mem_array_new+0x104>
     5c8:	lsl	r0, r0, #2
     5cc:	bl	0 <malloc>
     5d0:	str	r0, [r4, #20]
     5d4:	cmp	r0, #0
     5d8:	ldr	r1, [r5, #44]	; 0x2c
     5dc:	beq	690 <coda_mem_array_new+0x138>
     5e0:	cmp	r1, #1
     5e4:	str	r1, [r4, #16]
     5e8:	blt	65c <coda_mem_array_new+0x104>
     5ec:	mov	r2, #0
     5f0:	cmp	r1, #1
     5f4:	str	r2, [r0]
     5f8:	beq	65c <coda_mem_array_new+0x104>
     5fc:	mov	r0, #1
     600:	ldr	r3, [r4, #20]
     604:	str	r2, [r3, r0, lsl #2]
     608:	add	r0, r0, #1
     60c:	cmp	r1, r0
     610:	bne	600 <coda_mem_array_new+0xa8>
     614:	b	65c <coda_mem_array_new+0x104>
     618:	movw	r1, #0
     61c:	movw	r2, #0
     620:	mvn	r0, #99	; 0x63
     624:	movw	r3, #583	; 0x247
     628:	movt	r1, #0
     62c:	movt	r2, #0
     630:	b	654 <coda_mem_array_new+0xfc>
     634:	movw	r1, #0
     638:	movw	r3, #0
     63c:	movw	r0, #590	; 0x24e
     640:	mov	r2, #24
     644:	str	r0, [sp]
     648:	movt	r1, #0
     64c:	movt	r3, #0
     650:	mvn	r0, #0
     654:	bl	0 <coda_set_error>
     658:	mov	r4, #0
     65c:	mov	r0, r4
     660:	sub	sp, fp, #16
     664:	pop	{r4, r5, r6, sl, fp, pc}
     668:	ldr	r0, [r5, #36]	; 0x24
     66c:	cmp	r0, #0
     670:	beq	5bc <coda_mem_array_new+0x64>
     674:	mov	r1, #0
     678:	bl	8c8 <coda_mem_record_new>
     67c:	cmp	r0, #0
     680:	str	r0, [r4, #12]
     684:	beq	6b4 <coda_mem_array_new+0x15c>
     688:	ldr	r5, [r4, #4]
     68c:	b	5bc <coda_mem_array_new+0x64>
     690:	movw	r3, #0
     694:	movw	r0, #617	; 0x269
     698:	lsl	r2, r1, #2
     69c:	movw	r1, #0
     6a0:	str	r0, [sp]
     6a4:	movt	r1, #0
     6a8:	movt	r3, #0
     6ac:	mvn	r0, #0
     6b0:	bl	0 <coda_set_error>
     6b4:	mov	r0, r4
     6b8:	bl	0 <coda_mem_type_delete>
     6bc:	b	658 <coda_mem_array_new+0x100>

000006c0 <coda_mem_array_add_element>:
     6c0:	push	{r4, r5, r6, sl, fp, lr}
     6c4:	add	fp, sp, #16
     6c8:	sub	sp, sp, #8
     6cc:	cmp	r0, #0
     6d0:	beq	720 <coda_mem_array_add_element+0x60>
     6d4:	mov	r4, r1
     6d8:	cmp	r1, #0
     6dc:	beq	73c <coda_mem_array_add_element+0x7c>
     6e0:	mov	r5, r0
     6e4:	ldr	r0, [r0, #4]
     6e8:	ldr	r1, [r4, #4]
     6ec:	ldr	r2, [r0, #40]	; 0x28
     6f0:	cmp	r2, r1
     6f4:	beq	758 <coda_mem_array_add_element+0x98>
     6f8:	ldr	r2, [r5, #16]
     6fc:	movw	r0, #681	; 0x2a9
     700:	movw	r1, #0
     704:	movw	r3, #0
     708:	str	r0, [sp]
     70c:	movw	r0, #65136	; 0xfe70
     710:	movt	r1, #0
     714:	movt	r3, #0
     718:	movt	r0, #65535	; 0xffff
     71c:	b	7c8 <coda_mem_array_add_element+0x108>
     720:	movw	r1, #0
     724:	movw	r2, #0
     728:	mvn	r0, #99	; 0x63
     72c:	movw	r3, #670	; 0x29e
     730:	movt	r1, #0
     734:	movt	r2, #0
     738:	b	7c8 <coda_mem_array_add_element+0x108>
     73c:	movw	r1, #0
     740:	movw	r2, #0
     744:	mvn	r0, #99	; 0x63
     748:	movw	r3, #675	; 0x2a3
     74c:	movt	r1, #0
     750:	movt	r2, #0
     754:	b	7c8 <coda_mem_array_add_element+0x108>
     758:	ldr	r0, [r0, #44]	; 0x2c
     75c:	ldr	r3, [r5, #16]
     760:	cmp	r0, #1
     764:	blt	794 <coda_mem_array_add_element+0xd4>
     768:	cmp	r3, #1
     76c:	blt	7a4 <coda_mem_array_add_element+0xe4>
     770:	ldr	r0, [r5, #20]
     774:	mov	r2, #0
     778:	ldr	r1, [r0, r2, lsl #2]
     77c:	cmp	r1, #0
     780:	beq	7dc <coda_mem_array_add_element+0x11c>
     784:	add	r2, r2, #1
     788:	cmp	r2, r3
     78c:	blt	778 <coda_mem_array_add_element+0xb8>
     790:	b	7a8 <coda_mem_array_add_element+0xe8>
     794:	tst	r3, #15
     798:	beq	7e4 <coda_mem_array_add_element+0x124>
     79c:	ldr	r0, [r5, #20]
     7a0:	b	804 <coda_mem_array_add_element+0x144>
     7a4:	mov	r2, #0
     7a8:	movw	r1, #0
     7ac:	mov	r0, #696	; 0x2b8
     7b0:	movt	r1, #0
     7b4:	str	r0, [sp, #4]
     7b8:	mvn	r0, #100	; 0x64
     7bc:	str	r1, [sp]
     7c0:	movw	r1, #0
     7c4:	movt	r1, #0
     7c8:	bl	0 <coda_set_error>
     7cc:	mvn	r4, #0
     7d0:	mov	r0, r4
     7d4:	sub	sp, fp, #16
     7d8:	pop	{r4, r5, r6, sl, fp, pc}
     7dc:	str	r4, [r0, r2, lsl #2]
     7e0:	b	810 <coda_mem_array_add_element+0x150>
     7e4:	ldr	r0, [r5, #20]
     7e8:	mov	r6, #64	; 0x40
     7ec:	add	r1, r6, r3, lsl #2
     7f0:	bl	0 <realloc>
     7f4:	cmp	r0, #0
     7f8:	beq	818 <coda_mem_array_add_element+0x158>
     7fc:	str	r0, [r5, #20]
     800:	ldr	r3, [r5, #16]
     804:	add	r1, r3, #1
     808:	str	r1, [r5, #16]
     80c:	str	r4, [r0, r3, lsl #2]
     810:	mov	r4, #0
     814:	b	7d0 <coda_mem_array_add_element+0x110>
     818:	ldr	r0, [r5, #16]
     81c:	movw	r1, #711	; 0x2c7
     820:	movw	r3, #0
     824:	mvn	r4, #0
     828:	str	r1, [sp]
     82c:	movw	r1, #0
     830:	movt	r3, #0
     834:	movt	r1, #0
     838:	add	r2, r6, r0, lsl #2
     83c:	mvn	r0, #0
     840:	bl	0 <coda_set_error>
     844:	b	7d0 <coda_mem_array_add_element+0x110>

00000848 <coda_mem_string_new>:
     848:	push	{r4, r5, r6, r7, fp, lr}
     84c:	add	fp, sp, #16
     850:	sub	sp, sp, #8
     854:	mov	r7, r0
     858:	ldr	r0, [r0, #12]
     85c:	cmp	r0, #11
     860:	bne	8a8 <coda_mem_string_new+0x60>
     864:	mov	r6, r3
     868:	mov	r4, r2
     86c:	mov	r5, r1
     870:	cmp	r3, #0
     874:	beq	888 <coda_mem_string_new+0x40>
     878:	mov	r0, r6
     87c:	bl	0 <strlen>
     880:	mov	r3, r0
     884:	b	88c <coda_mem_string_new+0x44>
     888:	mov	r3, #0
     88c:	mov	r0, r7
     890:	mov	r1, r5
     894:	mov	r2, r4
     898:	str	r6, [sp]
     89c:	bl	12f0 <coda_mem_data_new>
     8a0:	sub	sp, fp, #16
     8a4:	pop	{r4, r5, r6, r7, fp, pc}
     8a8:	movw	r0, #0
     8ac:	movw	r1, #0
     8b0:	movw	r3, #0
     8b4:	movw	r2, #935	; 0x3a7
     8b8:	movt	r0, #0
     8bc:	movt	r1, #0
     8c0:	movt	r3, #0
     8c4:	bl	0 <__assert_fail>

000008c8 <coda_mem_record_new>:
     8c8:	push	{r4, r5, r6, sl, fp, lr}
     8cc:	add	fp, sp, #16
     8d0:	sub	sp, sp, #8
     8d4:	cmp	r0, #0
     8d8:	beq	990 <coda_mem_record_new+0xc8>
     8dc:	mov	r5, r0
     8e0:	ldr	r0, [r0, #64]	; 0x40
     8e4:	mov	r6, r1
     8e8:	cmp	r0, #0
     8ec:	ldrne	r0, [r5, #68]	; 0x44
     8f0:	cmpne	r0, #0
     8f4:	bne	9ac <coda_mem_record_new+0xe4>
     8f8:	mov	r0, #24
     8fc:	bl	0 <malloc>
     900:	cmp	r0, #0
     904:	beq	9c0 <coda_mem_record_new+0xf8>
     908:	ldr	r1, [r5, #4]
     90c:	mov	r4, r0
     910:	cmp	r6, #0
     914:	mov	r0, #100	; 0x64
     918:	add	r1, r1, #1
     91c:	str	r1, [r5, #4]
     920:	mov	r1, #0
     924:	stm	r4, {r0, r5}
     928:	str	r1, [r4, #8]
     92c:	str	r6, [r4, #12]
     930:	str	r1, [r4, #16]
     934:	str	r1, [r4, #20]
     938:	beq	9f4 <coda_mem_record_new+0x12c>
     93c:	ldr	r6, [r5, #48]	; 0x30
     940:	cmp	r6, #1
     944:	blt	9e8 <coda_mem_record_new+0x120>
     948:	lsl	r5, r6, #2
     94c:	mov	r0, r5
     950:	bl	0 <malloc>
     954:	cmp	r0, #0
     958:	str	r0, [r4, #20]
     95c:	beq	a18 <coda_mem_record_new+0x150>
     960:	mov	r1, #0
     964:	cmp	r6, #1
     968:	str	r1, [r0]
     96c:	beq	988 <coda_mem_record_new+0xc0>
     970:	mov	r0, #1
     974:	ldr	r2, [r4, #20]
     978:	str	r1, [r2, r0, lsl #2]
     97c:	add	r0, r0, #1
     980:	cmp	r6, r0
     984:	bne	974 <coda_mem_record_new+0xac>
     988:	str	r6, [r4, #16]
     98c:	b	9e8 <coda_mem_record_new+0x120>
     990:	movw	r1, #0
     994:	movw	r2, #0
     998:	mvn	r0, #99	; 0x63
     99c:	mov	r3, #428	; 0x1ac
     9a0:	movt	r1, #0
     9a4:	movt	r2, #0
     9a8:	b	9e0 <coda_mem_record_new+0x118>
     9ac:	movw	r1, #0
     9b0:	mvn	r0, #99	; 0x63
     9b4:	movt	r1, #0
     9b8:	bl	0 <coda_set_error>
     9bc:	b	9e4 <coda_mem_record_new+0x11c>
     9c0:	movw	r1, #0
     9c4:	movw	r3, #0
     9c8:	movw	r0, #442	; 0x1ba
     9cc:	mov	r2, #24
     9d0:	str	r0, [sp]
     9d4:	movt	r1, #0
     9d8:	movt	r3, #0
     9dc:	mvn	r0, #0
     9e0:	bl	0 <coda_set_error>
     9e4:	mov	r4, #0
     9e8:	mov	r0, r4
     9ec:	sub	sp, fp, #16
     9f0:	pop	{r4, r5, r6, sl, fp, pc}
     9f4:	ldr	r0, [r5, #36]	; 0x24
     9f8:	cmp	r0, #0
     9fc:	beq	93c <coda_mem_record_new+0x74>
     a00:	mov	r1, #0
     a04:	bl	8c8 <coda_mem_record_new>
     a08:	cmp	r0, #0
     a0c:	str	r0, [r4, #12]
     a10:	bne	93c <coda_mem_record_new+0x74>
     a14:	b	a3c <coda_mem_record_new+0x174>
     a18:	movw	r1, #0
     a1c:	movw	r3, #0
     a20:	movw	r0, #469	; 0x1d5
     a24:	mov	r2, r5
     a28:	str	r0, [sp]
     a2c:	movt	r1, #0
     a30:	movt	r3, #0
     a34:	mvn	r0, #0
     a38:	bl	0 <coda_set_error>
     a3c:	mov	r0, r4
     a40:	bl	0 <coda_mem_type_delete>
     a44:	b	9e4 <coda_mem_record_new+0x11c>

00000a48 <coda_mem_type_add_attribute>:
     a48:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     a4c:	add	fp, sp, #24
     a50:	sub	sp, sp, #8
     a54:	cmp	r0, #0
     a58:	beq	ac8 <coda_mem_type_add_attribute+0x80>
     a5c:	mov	r5, r1
     a60:	cmp	r1, #0
     a64:	beq	ae4 <coda_mem_type_add_attribute+0x9c>
     a68:	mov	r9, r2
     a6c:	cmp	r2, #0
     a70:	beq	b00 <coda_mem_type_add_attribute+0xb8>
     a74:	ldr	r6, [r0, #12]
     a78:	mov	r7, r3
     a7c:	mov	r4, r0
     a80:	cmp	r6, #0
     a84:	beq	b1c <coda_mem_type_add_attribute+0xd4>
     a88:	ldr	r0, [r6]
     a8c:	cmp	r0, #100	; 0x64
     a90:	bne	c4c <coda_mem_type_add_attribute+0x204>
     a94:	ldr	r1, [r4, #4]
     a98:	ldr	r0, [r6, #4]
     a9c:	ldr	r1, [r1, #36]	; 0x24
     aa0:	cmp	r1, r0
     aa4:	beq	b64 <coda_mem_type_add_attribute+0x11c>
     aa8:	movw	r0, #0
     aac:	movw	r1, #0
     ab0:	movw	r3, #0
     ab4:	movw	r2, #318	; 0x13e
     ab8:	movt	r0, #0
     abc:	movt	r1, #0
     ac0:	movt	r3, #0
     ac4:	bl	0 <__assert_fail>
     ac8:	movw	r1, #0
     acc:	movw	r2, #0
     ad0:	mvn	r0, #99	; 0x63
     ad4:	mov	r3, #272	; 0x110
     ad8:	movt	r1, #0
     adc:	movt	r2, #0
     ae0:	b	cf8 <coda_mem_type_add_attribute+0x2b0>
     ae4:	movw	r1, #0
     ae8:	movw	r2, #0
     aec:	mvn	r0, #99	; 0x63
     af0:	movw	r3, #277	; 0x115
     af4:	movt	r1, #0
     af8:	movt	r2, #0
     afc:	b	cf8 <coda_mem_type_add_attribute+0x2b0>
     b00:	movw	r1, #0
     b04:	movw	r2, #0
     b08:	mvn	r0, #99	; 0x63
     b0c:	movw	r3, #282	; 0x11a
     b10:	movt	r1, #0
     b14:	movt	r2, #0
     b18:	b	cf8 <coda_mem_type_add_attribute+0x2b0>
     b1c:	cmp	r7, #0
     b20:	beq	c98 <coda_mem_type_add_attribute+0x250>
     b24:	ldr	r1, [r4, #4]
     b28:	ldr	r0, [r1, #36]	; 0x24
     b2c:	cmp	r0, #0
     b30:	bne	b4c <coda_mem_type_add_attribute+0x104>
     b34:	ldr	r0, [r1]
     b38:	bl	0 <coda_type_record_new>
     b3c:	ldr	r1, [r4, #4]
     b40:	cmp	r0, #0
     b44:	str	r0, [r1, #36]	; 0x24
     b48:	beq	cfc <coda_mem_type_add_attribute+0x2b4>
     b4c:	mov	r1, #0
     b50:	bl	8c8 <coda_mem_record_new>
     b54:	mov	r6, r0
     b58:	cmp	r0, #0
     b5c:	str	r0, [r4, #12]
     b60:	beq	cfc <coda_mem_type_add_attribute+0x2b4>
     b64:	ldr	r0, [r6, #4]
     b68:	mov	r1, r5
     b6c:	ldr	r0, [r0, #44]	; 0x2c
     b70:	bl	0 <coda_hashtable_get_index_from_name>
     b74:	mov	r8, r0
     b78:	cmp	r7, #0
     b7c:	beq	c68 <coda_mem_type_add_attribute+0x220>
     b80:	cmp	r8, #0
     b84:	blt	ba8 <coda_mem_type_add_attribute+0x160>
     b88:	mov	r4, r6
     b8c:	ldr	r0, [r4, #16]!
     b90:	cmp	r8, r0
     b94:	bge	bd8 <coda_mem_type_add_attribute+0x190>
     b98:	ldr	r1, [r6, #20]
     b9c:	ldr	r1, [r1, r8, lsl #2]
     ba0:	cmp	r1, #0
     ba4:	beq	bd8 <coda_mem_type_add_attribute+0x190>
     ba8:	ldr	r2, [r9, #4]
     bac:	ldr	r0, [r6, #4]
     bb0:	mov	r1, r5
     bb4:	bl	0 <coda_type_record_create_field>
     bb8:	mvn	r4, #0
     bbc:	cmp	r0, #0
     bc0:	bne	d00 <coda_mem_type_add_attribute+0x2b8>
     bc4:	mov	r4, r6
     bc8:	ldr	r0, [r4, #16]!
     bcc:	ldr	r1, [r4, #-12]
     bd0:	ldr	r1, [r1, #48]	; 0x30
     bd4:	sub	r8, r1, #1
     bd8:	ldr	r1, [r6, #4]
     bdc:	add	r7, r6, #20
     be0:	ldr	r1, [r1, #48]	; 0x30
     be4:	cmp	r0, r1
     be8:	bge	d0c <coda_mem_type_add_attribute+0x2c4>
     bec:	ldr	r0, [r7]
     bf0:	lsl	r1, r1, #2
     bf4:	bl	0 <realloc>
     bf8:	cmp	r0, #0
     bfc:	beq	d1c <coda_mem_type_add_attribute+0x2d4>
     c00:	str	r0, [r6, #20]
     c04:	ldr	r1, [r6, #4]
     c08:	ldr	r3, [r6, #16]
     c0c:	ldr	r2, [r1, #48]	; 0x30
     c10:	cmp	r3, r2
     c14:	bge	c44 <coda_mem_type_add_attribute+0x1fc>
     c18:	mov	r1, #0
     c1c:	str	r1, [r0, r3, lsl #2]
     c20:	add	r0, r3, #1
     c24:	b	c34 <coda_mem_type_add_attribute+0x1ec>
     c28:	ldr	r2, [r6, #20]
     c2c:	str	r1, [r2, r0, lsl #2]
     c30:	add	r0, r0, #1
     c34:	ldr	r2, [r6, #4]
     c38:	ldr	r2, [r2, #48]	; 0x30
     c3c:	cmp	r0, r2
     c40:	blt	c28 <coda_mem_type_add_attribute+0x1e0>
     c44:	str	r2, [r4]
     c48:	b	d0c <coda_mem_type_add_attribute+0x2c4>
     c4c:	movw	r1, #0
     c50:	movw	r2, #0
     c54:	mvn	r0, #99	; 0x63
     c58:	movw	r3, #315	; 0x13b
     c5c:	movt	r1, #0
     c60:	movt	r2, #0
     c64:	b	cf8 <coda_mem_type_add_attribute+0x2b0>
     c68:	cmn	r8, #1
     c6c:	ble	ca0 <coda_mem_type_add_attribute+0x258>
     c70:	mov	r7, r6
     c74:	ldr	r0, [r7, #20]!
     c78:	ldr	r0, [r0, r8, lsl #2]
     c7c:	cmp	r0, #0
     c80:	beq	cbc <coda_mem_type_add_attribute+0x274>
     c84:	movw	r1, #0
     c88:	movw	r0, #367	; 0x16f
     c8c:	movt	r1, #0
     c90:	str	r0, [sp]
     c94:	b	ce8 <coda_mem_type_add_attribute+0x2a0>
     c98:	movw	r0, #307	; 0x133
     c9c:	b	ca4 <coda_mem_type_add_attribute+0x25c>
     ca0:	movw	r0, #361	; 0x169
     ca4:	movw	r1, #0
     ca8:	movw	r3, #0
     cac:	str	r0, [sp]
     cb0:	mvn	r0, #101	; 0x65
     cb4:	movt	r1, #0
     cb8:	b	cf0 <coda_mem_type_add_attribute+0x2a8>
     cbc:	ldr	r0, [r6, #4]
     cc0:	ldr	r1, [r9, #4]
     cc4:	ldr	r0, [r0, #52]	; 0x34
     cc8:	ldr	r0, [r0, r8, lsl #2]
     ccc:	ldr	r0, [r0, #8]
     cd0:	cmp	r0, r1
     cd4:	beq	d0c <coda_mem_type_add_attribute+0x2c4>
     cd8:	movw	r1, #0
     cdc:	movw	r0, #373	; 0x175
     ce0:	str	r0, [sp]
     ce4:	movt	r1, #0
     ce8:	movw	r3, #0
     cec:	mvn	r0, #99	; 0x63
     cf0:	movt	r3, #0
     cf4:	mov	r2, r5
     cf8:	bl	0 <coda_set_error>
     cfc:	mvn	r4, #0
     d00:	mov	r0, r4
     d04:	sub	sp, fp, #24
     d08:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     d0c:	ldr	r0, [r7]
     d10:	mov	r4, #0
     d14:	str	r9, [r0, r8, lsl #2]
     d18:	b	d00 <coda_mem_type_add_attribute+0x2b8>
     d1c:	ldr	r0, [r6, #4]
     d20:	mov	r1, #344	; 0x158
     d24:	movw	r3, #0
     d28:	mvn	r4, #0
     d2c:	movt	r3, #0
     d30:	ldr	r0, [r0, #48]	; 0x30
     d34:	str	r1, [sp]
     d38:	movw	r1, #0
     d3c:	movt	r1, #0
     d40:	lsl	r2, r0, #2
     d44:	mvn	r0, #0
     d48:	bl	0 <coda_set_error>
     d4c:	b	d00 <coda_mem_type_add_attribute+0x2b8>

00000d50 <coda_mem_type_set_attributes>:
     d50:	push	{r4, r5, fp, lr}
     d54:	add	fp, sp, #8
     d58:	cmp	r0, #0
     d5c:	beq	d94 <coda_mem_type_set_attributes+0x44>
     d60:	mov	r4, r1
     d64:	cmp	r1, #0
     d68:	beq	dac <coda_mem_type_set_attributes+0x5c>
     d6c:	mov	r5, r0
     d70:	ldr	r0, [r0, #12]
     d74:	cmp	r0, #0
     d78:	beq	dd0 <coda_mem_type_set_attributes+0x80>
     d7c:	movw	r1, #0
     d80:	movw	r2, #0
     d84:	mvn	r0, #99	; 0x63
     d88:	mov	r3, #396	; 0x18c
     d8c:	movt	r1, #0
     d90:	b	dc0 <coda_mem_type_set_attributes+0x70>
     d94:	movw	r1, #0
     d98:	movw	r2, #0
     d9c:	mvn	r0, #99	; 0x63
     da0:	movw	r3, #386	; 0x182
     da4:	movt	r1, #0
     da8:	b	dc0 <coda_mem_type_set_attributes+0x70>
     dac:	movw	r1, #0
     db0:	movw	r2, #0
     db4:	mvn	r0, #99	; 0x63
     db8:	movw	r3, #391	; 0x187
     dbc:	movt	r1, #0
     dc0:	movt	r2, #0
     dc4:	bl	0 <coda_set_error>
     dc8:	mvn	r0, #0
     dcc:	pop	{r4, r5, fp, pc}
     dd0:	cmp	r2, #0
     dd4:	beq	e0c <coda_mem_type_set_attributes+0xbc>
     dd8:	ldr	r1, [r4, #4]
     ddc:	ldr	r0, [r1, #8]
     de0:	cmp	r0, #0
     de4:	bne	e38 <coda_mem_type_set_attributes+0xe8>
     de8:	ldr	r0, [r5, #4]
     dec:	bl	0 <coda_type_set_attributes>
     df0:	mov	r1, r0
     df4:	mvn	r0, #0
     df8:	cmp	r1, #0
     dfc:	popne	{r4, r5, fp, pc}
     e00:	mov	r0, #0
     e04:	str	r4, [r5, #12]
     e08:	pop	{r4, r5, fp, pc}
     e0c:	ldr	r1, [r5, #4]
     e10:	ldr	r0, [r4, #4]
     e14:	ldr	r1, [r1, #36]	; 0x24
     e18:	cmp	r1, r0
     e1c:	beq	e00 <coda_mem_type_set_attributes+0xb0>
     e20:	movw	r1, #0
     e24:	movw	r2, #0
     e28:	mvn	r0, #99	; 0x63
     e2c:	mov	r3, #412	; 0x19c
     e30:	movt	r1, #0
     e34:	b	dc0 <coda_mem_type_set_attributes+0x70>
     e38:	movw	r0, #0
     e3c:	movw	r1, #0
     e40:	movw	r3, #0
     e44:	movw	r2, #401	; 0x191
     e48:	movt	r0, #0
     e4c:	movt	r1, #0
     e50:	movt	r3, #0
     e54:	bl	0 <__assert_fail>

00000e58 <coda_mem_record_add_field>:
     e58:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
     e5c:	add	fp, sp, #24
     e60:	sub	sp, sp, #8
     e64:	cmp	r0, #0
     e68:	beq	efc <coda_mem_record_add_field+0xa4>
     e6c:	mov	r4, r2
     e70:	cmp	r2, #0
     e74:	beq	f3c <coda_mem_record_add_field+0xe4>
     e78:	mov	r5, r0
     e7c:	ldr	r0, [r0, #4]
     e80:	mov	r7, r1
     e84:	cmp	r3, #0
     e88:	beq	f58 <coda_mem_record_add_field+0x100>
     e8c:	ldr	r2, [r4, #4]
     e90:	mov	r1, r7
     e94:	bl	0 <coda_type_record_create_field>
     e98:	mvn	r6, #0
     e9c:	cmp	r0, #0
     ea0:	bne	ffc <coda_mem_record_add_field+0x1a4>
     ea4:	ldr	r0, [r5, #4]
     ea8:	ldr	r2, [r5, #16]
     eac:	add	r8, r5, #20
     eb0:	ldr	r1, [r0, #48]	; 0x30
     eb4:	sub	r6, r1, #1
     eb8:	cmp	r2, r1
     ebc:	bge	1008 <coda_mem_record_add_field+0x1b0>
     ec0:	ldr	r0, [r8]
     ec4:	lsl	r1, r1, #2
     ec8:	bl	0 <realloc>
     ecc:	cmp	r0, #0
     ed0:	beq	1018 <coda_mem_record_add_field+0x1c0>
     ed4:	str	r0, [r5, #20]
     ed8:	ldr	r1, [r5, #4]
     edc:	ldr	r3, [r5, #16]
     ee0:	ldr	r2, [r1, #48]	; 0x30
     ee4:	cmp	r3, r2
     ee8:	bge	f34 <coda_mem_record_add_field+0xdc>
     eec:	mov	r1, #0
     ef0:	str	r1, [r0, r3, lsl #2]
     ef4:	add	r0, r3, #1
     ef8:	b	f24 <coda_mem_record_add_field+0xcc>
     efc:	movw	r1, #0
     f00:	movw	r2, #0
     f04:	mvn	r0, #99	; 0x63
     f08:	movw	r3, #491	; 0x1eb
     f0c:	movt	r1, #0
     f10:	movt	r2, #0
     f14:	b	ff4 <coda_mem_record_add_field+0x19c>
     f18:	ldr	r2, [r5, #20]
     f1c:	str	r1, [r2, r0, lsl #2]
     f20:	add	r0, r0, #1
     f24:	ldr	r2, [r5, #4]
     f28:	ldr	r2, [r2, #48]	; 0x30
     f2c:	cmp	r0, r2
     f30:	blt	f18 <coda_mem_record_add_field+0xc0>
     f34:	str	r2, [r5, #16]
     f38:	b	1008 <coda_mem_record_add_field+0x1b0>
     f3c:	movw	r1, #0
     f40:	movw	r2, #0
     f44:	mvn	r0, #99	; 0x63
     f48:	mov	r3, #496	; 0x1f0
     f4c:	movt	r1, #0
     f50:	movt	r2, #0
     f54:	b	ff4 <coda_mem_record_add_field+0x19c>
     f58:	ldr	r0, [r0, #44]	; 0x2c
     f5c:	mov	r1, r7
     f60:	bl	0 <coda_hashtable_get_index_from_name>
     f64:	cmn	r0, #1
     f68:	ble	f98 <coda_mem_record_add_field+0x140>
     f6c:	mov	r8, r5
     f70:	mov	r6, r0
     f74:	ldr	r0, [r8, #20]!
     f78:	ldr	r0, [r0, r6, lsl #2]
     f7c:	cmp	r0, #0
     f80:	beq	fb8 <coda_mem_record_add_field+0x160>
     f84:	movw	r1, #0
     f88:	mov	r0, #540	; 0x21c
     f8c:	movt	r1, #0
     f90:	str	r0, [sp]
     f94:	b	fe4 <coda_mem_record_add_field+0x18c>
     f98:	movw	r1, #0
     f9c:	movw	r3, #0
     fa0:	movw	r0, #534	; 0x216
     fa4:	str	r0, [sp]
     fa8:	movt	r1, #0
     fac:	movt	r3, #0
     fb0:	mvn	r0, #101	; 0x65
     fb4:	b	ff0 <coda_mem_record_add_field+0x198>
     fb8:	ldr	r0, [r5, #4]
     fbc:	ldr	r1, [r4, #4]
     fc0:	ldr	r0, [r0, #52]	; 0x34
     fc4:	ldr	r0, [r0, r6, lsl #2]
     fc8:	ldr	r0, [r0, #8]
     fcc:	cmp	r0, r1
     fd0:	beq	1008 <coda_mem_record_add_field+0x1b0>
     fd4:	movw	r1, #0
     fd8:	movw	r0, #546	; 0x222
     fdc:	str	r0, [sp]
     fe0:	movt	r1, #0
     fe4:	movw	r3, #0
     fe8:	mvn	r0, #99	; 0x63
     fec:	movt	r3, #0
     ff0:	mov	r2, r7
     ff4:	bl	0 <coda_set_error>
     ff8:	mvn	r6, #0
     ffc:	mov	r0, r6
    1000:	sub	sp, fp, #24
    1004:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    1008:	ldr	r0, [r8]
    100c:	str	r4, [r0, r6, lsl #2]
    1010:	mov	r6, #0
    1014:	b	ffc <coda_mem_record_add_field+0x1a4>
    1018:	ldr	r0, [r5, #4]
    101c:	mov	r1, #516	; 0x204
    1020:	movw	r3, #0
    1024:	mvn	r6, #0
    1028:	movt	r3, #0
    102c:	ldr	r0, [r0, #48]	; 0x30
    1030:	str	r1, [sp]
    1034:	movw	r1, #0
    1038:	movt	r1, #0
    103c:	lsl	r2, r0, #2
    1040:	mvn	r0, #0
    1044:	bl	0 <coda_set_error>
    1048:	b	ffc <coda_mem_record_add_field+0x1a4>

0000104c <coda_mem_record_validate>:
    104c:	push	{fp, lr}
    1050:	mov	fp, sp
    1054:	cmp	r0, #0
    1058:	beq	10b4 <coda_mem_record_validate+0x68>
    105c:	ldr	ip, [r0, #4]
    1060:	ldr	lr, [r0, #16]
    1064:	ldr	r1, [ip, #48]	; 0x30
    1068:	cmp	lr, r1
    106c:	bne	10f8 <coda_mem_record_validate+0xac>
    1070:	cmp	lr, #1
    1074:	blt	10ac <coda_mem_record_validate+0x60>
    1078:	ldr	r0, [r0, #20]
    107c:	mov	r3, #0
    1080:	ldr	r1, [r0, r3, lsl #2]
    1084:	cmp	r1, #0
    1088:	bne	10a0 <coda_mem_record_validate+0x54>
    108c:	ldr	r1, [ip, #52]	; 0x34
    1090:	ldr	r1, [r1, r3, lsl #2]
    1094:	ldrb	r2, [r1, #16]
    1098:	cmp	r2, #0
    109c:	beq	10d8 <coda_mem_record_validate+0x8c>
    10a0:	add	r3, r3, #1
    10a4:	cmp	r3, lr
    10a8:	blt	1080 <coda_mem_record_validate+0x34>
    10ac:	mov	r0, #0
    10b0:	pop	{fp, pc}
    10b4:	movw	r1, #0
    10b8:	movw	r2, #0
    10bc:	mvn	r0, #99	; 0x63
    10c0:	movw	r3, #561	; 0x231
    10c4:	movt	r1, #0
    10c8:	movt	r2, #0
    10cc:	bl	0 <coda_set_error>
    10d0:	mvn	r0, #0
    10d4:	pop	{fp, pc}
    10d8:	ldr	r2, [r1]
    10dc:	movw	r0, #65136	; 0xfe70
    10e0:	movw	r1, #0
    10e4:	movt	r0, #65535	; 0xffff
    10e8:	movt	r1, #0
    10ec:	bl	0 <coda_set_error>
    10f0:	mvn	r0, #0
    10f4:	pop	{fp, pc}
    10f8:	movw	r0, #0
    10fc:	movw	r1, #0
    1100:	movw	r3, #0
    1104:	mov	r2, #564	; 0x234
    1108:	movt	r0, #0
    110c:	movt	r1, #0
    1110:	movt	r3, #0
    1114:	bl	0 <__assert_fail>

00001118 <coda_mem_array_set_element>:
    1118:	push	{fp, lr}
    111c:	mov	fp, sp
    1120:	sub	sp, sp, #8
    1124:	cmp	r0, #0
    1128:	beq	1164 <coda_mem_array_set_element+0x4c>
    112c:	ldr	r3, [r0, #16]
    1130:	mov	ip, r1
    1134:	cmp	r1, #0
    1138:	cmpge	r3, ip
    113c:	bgt	1180 <coda_mem_array_set_element+0x68>
    1140:	movw	r1, #0
    1144:	movw	r0, #641	; 0x281
    1148:	movt	r1, #0
    114c:	str	r0, [sp, #4]
    1150:	mvn	r0, #100	; 0x64
    1154:	str	r1, [sp]
    1158:	movw	r1, #0
    115c:	movt	r1, #0
    1160:	b	11b4 <coda_mem_array_set_element+0x9c>
    1164:	movw	r1, #0
    1168:	movw	r2, #0
    116c:	mvn	r0, #99	; 0x63
    1170:	movw	r3, #635	; 0x27b
    1174:	movt	r1, #0
    1178:	movt	r2, #0
    117c:	b	1214 <coda_mem_array_set_element+0xfc>
    1180:	cmp	r2, #0
    1184:	beq	11bc <coda_mem_array_set_element+0xa4>
    1188:	ldr	lr, [r0, #20]
    118c:	ldr	r1, [lr, ip, lsl #2]
    1190:	cmp	r1, #0
    1194:	beq	11d8 <coda_mem_array_set_element+0xc0>
    1198:	movw	r1, #0
    119c:	movw	r3, #0
    11a0:	mov	r0, #652	; 0x28c
    11a4:	str	r0, [sp]
    11a8:	movt	r1, #0
    11ac:	movt	r3, #0
    11b0:	mvn	r0, #99	; 0x63
    11b4:	mov	r2, ip
    11b8:	b	1214 <coda_mem_array_set_element+0xfc>
    11bc:	movw	r1, #0
    11c0:	movw	r2, #0
    11c4:	mvn	r0, #99	; 0x63
    11c8:	movw	r3, #646	; 0x286
    11cc:	movt	r1, #0
    11d0:	movt	r2, #0
    11d4:	b	1214 <coda_mem_array_set_element+0xfc>
    11d8:	ldr	r0, [r0, #4]
    11dc:	ldr	r1, [r2, #4]
    11e0:	ldr	r0, [r0, #40]	; 0x28
    11e4:	cmp	r0, r1
    11e8:	beq	1224 <coda_mem_array_set_element+0x10c>
    11ec:	movw	ip, #0
    11f0:	movw	r0, #658	; 0x292
    11f4:	movw	r1, #0
    11f8:	mov	r2, r3
    11fc:	str	r0, [sp]
    1200:	movw	r0, #65136	; 0xfe70
    1204:	movt	ip, #0
    1208:	movt	r1, #0
    120c:	movt	r0, #65535	; 0xffff
    1210:	mov	r3, ip
    1214:	bl	0 <coda_set_error>
    1218:	mvn	r0, #0
    121c:	mov	sp, fp
    1220:	pop	{fp, pc}
    1224:	str	r2, [lr, ip, lsl #2]
    1228:	mov	r0, #0
    122c:	mov	sp, fp
    1230:	pop	{fp, pc}

00001234 <coda_mem_array_validate>:
    1234:	push	{r4, sl, fp, lr}
    1238:	add	fp, sp, #8
    123c:	cmp	r0, #0
    1240:	beq	12ac <coda_mem_array_validate+0x78>
    1244:	mov	r4, r0
    1248:	ldr	r0, [r0, #4]
    124c:	ldr	r3, [r0, #44]	; 0x2c
    1250:	cmp	r3, #0
    1254:	blt	1278 <coda_mem_array_validate+0x44>
    1258:	ldr	r2, [r4, #16]
    125c:	cmp	r2, r3
    1260:	beq	127c <coda_mem_array_validate+0x48>
    1264:	movw	r0, #65136	; 0xfe70
    1268:	movw	r1, #0
    126c:	movt	r0, #65535	; 0xffff
    1270:	movt	r1, #0
    1274:	bl	0 <coda_set_error>
    1278:	ldr	r2, [r4, #16]
    127c:	cmp	r2, #1
    1280:	blt	12a4 <coda_mem_array_validate+0x70>
    1284:	ldr	r0, [r4, #20]
    1288:	mov	r3, #0
    128c:	ldr	r1, [r0, r3, lsl #2]
    1290:	cmp	r1, #0
    1294:	beq	12d0 <coda_mem_array_validate+0x9c>
    1298:	add	r3, r3, #1
    129c:	cmp	r3, r2
    12a0:	blt	128c <coda_mem_array_validate+0x58>
    12a4:	mov	r0, #0
    12a8:	pop	{r4, sl, fp, pc}
    12ac:	movw	r1, #0
    12b0:	movw	r2, #0
    12b4:	mvn	r0, #99	; 0x63
    12b8:	movw	r3, #729	; 0x2d9
    12bc:	movt	r1, #0
    12c0:	movt	r2, #0
    12c4:	bl	0 <coda_set_error>
    12c8:	mvn	r0, #0
    12cc:	pop	{r4, sl, fp, pc}
    12d0:	movw	r0, #65136	; 0xfe70
    12d4:	movw	r1, #0
    12d8:	mov	r2, r3
    12dc:	movt	r0, #65535	; 0xffff
    12e0:	movt	r1, #0
    12e4:	bl	0 <coda_set_error>
    12e8:	mvn	r0, #0
    12ec:	pop	{r4, sl, fp, pc}

000012f0 <coda_mem_data_new>:
    12f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12f4:	add	fp, sp, #28
    12f8:	sub	sp, sp, #4
    12fc:	cmp	r0, #0
    1300:	beq	1348 <coda_mem_data_new+0x58>
    1304:	mov	r5, r3
    1308:	cmn	r3, #1
    130c:	ble	1594 <coda_mem_data_new+0x2a4>
    1310:	ldr	r8, [fp, #8]
    1314:	mov	r7, r2
    1318:	mov	r6, r1
    131c:	mov	r9, r0
    1320:	cmp	r5, #0
    1324:	beq	1364 <coda_mem_data_new+0x74>
    1328:	cmp	r8, #0
    132c:	bne	1364 <coda_mem_data_new+0x74>
    1330:	movw	r1, #0
    1334:	movw	r2, #0
    1338:	mvn	r0, #99	; 0x63
    133c:	mov	r3, #764	; 0x2fc
    1340:	movt	r1, #0
    1344:	b	135c <coda_mem_data_new+0x6c>
    1348:	movw	r1, #0
    134c:	movw	r2, #0
    1350:	mvn	r0, #99	; 0x63
    1354:	movw	r3, #758	; 0x2f6
    1358:	movt	r1, #0
    135c:	movt	r2, #0
    1360:	b	1464 <coda_mem_data_new+0x174>
    1364:	ldr	r0, [r9, #28]
    1368:	cmp	r0, #0
    136c:	blt	138c <coda_mem_data_new+0x9c>
    1370:	ldr	r1, [r9, #24]
    1374:	lsr	r2, r1, #3
    1378:	tst	r1, #7
    137c:	orr	r3, r2, r0, lsl #29
    1380:	addne	r3, r3, #1
    1384:	cmp	r3, r5
    1388:	bne	1450 <coda_mem_data_new+0x160>
    138c:	cmp	r5, #1
    1390:	beq	13c0 <coda_mem_data_new+0xd0>
    1394:	ldr	r0, [r9, #12]
    1398:	cmp	r0, #10
    139c:	bne	13c0 <coda_mem_data_new+0xd0>
    13a0:	movw	r1, #0
    13a4:	movw	r3, #0
    13a8:	movw	r0, #782	; 0x30e
    13ac:	str	r0, [sp]
    13b0:	movt	r1, #0
    13b4:	movt	r3, #0
    13b8:	mvn	r0, #99	; 0x63
    13bc:	b	1460 <coda_mem_data_new+0x170>
    13c0:	mov	r0, #32
    13c4:	bl	0 <malloc>
    13c8:	cmp	r0, #0
    13cc:	beq	1478 <coda_mem_data_new+0x188>
    13d0:	mov	r4, r0
    13d4:	mov	r0, #100	; 0x64
    13d8:	cmp	r5, #0
    13dc:	stm	r4, {r0, r9}
    13e0:	ldr	r0, [r9, #4]
    13e4:	add	r0, r0, #1
    13e8:	str	r0, [r9, #4]
    13ec:	mov	r0, #0
    13f0:	mov	r9, r4
    13f4:	str	r0, [r9, #24]!
    13f8:	str	r0, [r9, #4]
    13fc:	mov	r0, #2
    1400:	str	r0, [r9, #-16]
    1404:	str	r6, [r9, #-12]
    1408:	str	r5, [r9, #-8]
    140c:	beq	1534 <coda_mem_data_new+0x244>
    1410:	cmp	r7, #0
    1414:	beq	149c <coda_mem_data_new+0x1ac>
    1418:	mov	r6, r7
    141c:	ldr	r2, [r6, #40]!	; 0x28
    1420:	ldr	lr, [r6, #4]
    1424:	orrs	r0, r2, lr
    1428:	beq	14b8 <coda_mem_data_new+0x1c8>
    142c:	subs	r0, r2, #1
    1430:	sbc	r1, lr, #0
    1434:	asr	r3, r1, #31
    1438:	adds	r3, r0, r3, lsr #20
    143c:	adc	ip, r1, #0
    1440:	lsr	r3, r3, #12
    1444:	orr	r3, r3, ip, lsl #20
    1448:	add	ip, r3, #1
    144c:	b	14c4 <coda_mem_data_new+0x1d4>
    1450:	movw	r0, #65236	; 0xfed4
    1454:	movw	r1, #0
    1458:	movt	r0, #65535	; 0xffff
    145c:	movt	r1, #0
    1460:	mov	r2, r5
    1464:	bl	0 <coda_set_error>
    1468:	mov	r4, #0
    146c:	mov	r0, r4
    1470:	sub	sp, fp, #28
    1474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1478:	movw	r1, #0
    147c:	movw	r3, #0
    1480:	movw	r0, #790	; 0x316
    1484:	mov	r2, #32
    1488:	str	r0, [sp]
    148c:	movt	r1, #0
    1490:	movt	r3, #0
    1494:	mvn	r0, #0
    1498:	b	1464 <coda_mem_data_new+0x174>
    149c:	movw	r1, #0
    14a0:	movw	r2, #0
    14a4:	mvn	r0, #99	; 0x63
    14a8:	movw	r3, #805	; 0x325
    14ac:	movt	r1, #0
    14b0:	movt	r2, #0
    14b4:	b	1584 <coda_mem_data_new+0x294>
    14b8:	mvn	r0, #0
    14bc:	mov	ip, #0
    14c0:	mvn	r1, #0
    14c4:	adds	r0, r0, r5
    14c8:	adc	r1, r1, r5, asr #31
    14cc:	asr	r3, r1, #31
    14d0:	adds	r0, r0, r3, lsr #20
    14d4:	adc	r1, r1, #0
    14d8:	lsr	r0, r0, #12
    14dc:	orr	r0, r0, r1, lsl #20
    14e0:	add	r1, r0, #1
    14e4:	ldr	r0, [r7, #48]	; 0x30
    14e8:	cmp	r1, ip
    14ec:	ble	150c <coda_mem_data_new+0x21c>
    14f0:	lsl	sl, r1, #12
    14f4:	mov	r1, sl
    14f8:	bl	0 <realloc>
    14fc:	cmp	r0, #0
    1500:	beq	1564 <coda_mem_data_new+0x274>
    1504:	str	r0, [r7, #48]	; 0x30
    1508:	ldm	r6, {r2, lr}
    150c:	stm	r9, {r2, lr}
    1510:	add	r0, r0, r2
    1514:	mov	r1, r8
    1518:	mov	r2, r5
    151c:	bl	0 <memcpy>
    1520:	ldrd	r0, [r6]
    1524:	adds	r0, r0, r5
    1528:	adc	r1, r1, r5, asr #31
    152c:	strd	r0, [r6]
    1530:	ldr	r6, [r4, #12]
    1534:	cmp	r6, #0
    1538:	bne	146c <coda_mem_data_new+0x17c>
    153c:	ldr	r0, [r4, #4]
    1540:	ldr	r0, [r0, #36]	; 0x24
    1544:	cmp	r0, #0
    1548:	beq	146c <coda_mem_data_new+0x17c>
    154c:	mov	r1, #0
    1550:	bl	8c8 <coda_mem_record_new>
    1554:	cmp	r0, #0
    1558:	str	r0, [r4, #12]
    155c:	bne	146c <coda_mem_data_new+0x17c>
    1560:	b	1588 <coda_mem_data_new+0x298>
    1564:	movw	r1, #0
    1568:	movw	r3, #0
    156c:	movw	r0, #821	; 0x335
    1570:	mov	r2, sl
    1574:	str	r0, [sp]
    1578:	movt	r1, #0
    157c:	movt	r3, #0
    1580:	mvn	r0, #0
    1584:	bl	0 <coda_set_error>
    1588:	mov	r0, r4
    158c:	bl	0 <coda_mem_type_delete>
    1590:	b	1468 <coda_mem_data_new+0x178>
    1594:	movw	r0, #0
    1598:	movw	r1, #0
    159c:	movw	r3, #0
    15a0:	movw	r2, #761	; 0x2f9
    15a4:	movt	r0, #0
    15a8:	movt	r1, #0
    15ac:	movt	r3, #0
    15b0:	bl	0 <__assert_fail>

000015b4 <coda_mem_int8_new>:
    15b4:	push	{r4, r5, fp, lr}
    15b8:	add	fp, sp, #8
    15bc:	sub	sp, sp, #8
    15c0:	strb	r3, [sp, #7]
    15c4:	ldrd	r4, [r0, #24]
    15c8:	eor	r3, r4, #8
    15cc:	orrs	r3, r3, r5
    15d0:	bne	15f8 <coda_mem_int8_new+0x44>
    15d4:	ldr	r3, [r0, #12]
    15d8:	cmp	r3, #0
    15dc:	bne	1618 <coda_mem_int8_new+0x64>
    15e0:	add	r3, sp, #7
    15e4:	str	r3, [sp]
    15e8:	mov	r3, #1
    15ec:	bl	12f0 <coda_mem_data_new>
    15f0:	sub	sp, fp, #8
    15f4:	pop	{r4, r5, fp, pc}
    15f8:	movw	r0, #0
    15fc:	movw	r1, #0
    1600:	movw	r3, #0
    1604:	movw	r2, #847	; 0x34f
    1608:	movt	r0, #0
    160c:	movt	r1, #0
    1610:	movt	r3, #0
    1614:	bl	0 <__assert_fail>
    1618:	movw	r0, #0
    161c:	movw	r1, #0
    1620:	movw	r3, #0
    1624:	mov	r2, #848	; 0x350
    1628:	movt	r0, #0
    162c:	movt	r1, #0
    1630:	movt	r3, #0
    1634:	bl	0 <__assert_fail>

00001638 <coda_mem_uint8_new>:
    1638:	push	{r4, r5, fp, lr}
    163c:	add	fp, sp, #8
    1640:	sub	sp, sp, #8
    1644:	strb	r3, [sp, #7]
    1648:	ldrd	r4, [r0, #24]
    164c:	eor	r3, r4, #8
    1650:	orrs	r3, r3, r5
    1654:	bne	167c <coda_mem_uint8_new+0x44>
    1658:	ldr	r3, [r0, #12]
    165c:	cmp	r3, #1
    1660:	bne	169c <coda_mem_uint8_new+0x64>
    1664:	add	r3, sp, #7
    1668:	str	r3, [sp]
    166c:	mov	r3, #1
    1670:	bl	12f0 <coda_mem_data_new>
    1674:	sub	sp, fp, #8
    1678:	pop	{r4, r5, fp, pc}
    167c:	movw	r0, #0
    1680:	movw	r1, #0
    1684:	movw	r3, #0
    1688:	movw	r2, #855	; 0x357
    168c:	movt	r0, #0
    1690:	movt	r1, #0
    1694:	movt	r3, #0
    1698:	bl	0 <__assert_fail>
    169c:	movw	r0, #0
    16a0:	movw	r1, #0
    16a4:	movw	r3, #0
    16a8:	mov	r2, #856	; 0x358
    16ac:	movt	r0, #0
    16b0:	movt	r1, #0
    16b4:	movt	r3, #0
    16b8:	bl	0 <__assert_fail>

000016bc <coda_mem_int16_new>:
    16bc:	push	{r4, r5, fp, lr}
    16c0:	add	fp, sp, #8
    16c4:	sub	sp, sp, #8
    16c8:	strh	r3, [sp, #6]
    16cc:	ldrd	r4, [r0, #24]
    16d0:	eor	r3, r4, #16
    16d4:	orrs	r3, r3, r5
    16d8:	bne	1700 <coda_mem_int16_new+0x44>
    16dc:	ldr	r3, [r0, #12]
    16e0:	cmp	r3, #2
    16e4:	bne	1720 <coda_mem_int16_new+0x64>
    16e8:	add	r3, sp, #6
    16ec:	str	r3, [sp]
    16f0:	mov	r3, #2
    16f4:	bl	12f0 <coda_mem_data_new>
    16f8:	sub	sp, fp, #8
    16fc:	pop	{r4, r5, fp, pc}
    1700:	movw	r0, #0
    1704:	movw	r1, #0
    1708:	movw	r3, #0
    170c:	movw	r2, #863	; 0x35f
    1710:	movt	r0, #0
    1714:	movt	r1, #0
    1718:	movt	r3, #0
    171c:	bl	0 <__assert_fail>
    1720:	movw	r0, #0
    1724:	movw	r1, #0
    1728:	movw	r3, #0
    172c:	mov	r2, #864	; 0x360
    1730:	movt	r0, #0
    1734:	movt	r1, #0
    1738:	movt	r3, #0
    173c:	bl	0 <__assert_fail>

00001740 <coda_mem_uint16_new>:
    1740:	push	{r4, r5, fp, lr}
    1744:	add	fp, sp, #8
    1748:	sub	sp, sp, #8
    174c:	strh	r3, [sp, #6]
    1750:	ldrd	r4, [r0, #24]
    1754:	eor	r3, r4, #16
    1758:	orrs	r3, r3, r5
    175c:	bne	1784 <coda_mem_uint16_new+0x44>
    1760:	ldr	r3, [r0, #12]
    1764:	cmp	r3, #3
    1768:	bne	17a4 <coda_mem_uint16_new+0x64>
    176c:	add	r3, sp, #6
    1770:	str	r3, [sp]
    1774:	mov	r3, #2
    1778:	bl	12f0 <coda_mem_data_new>
    177c:	sub	sp, fp, #8
    1780:	pop	{r4, r5, fp, pc}
    1784:	movw	r0, #0
    1788:	movw	r1, #0
    178c:	movw	r3, #0
    1790:	movw	r2, #871	; 0x367
    1794:	movt	r0, #0
    1798:	movt	r1, #0
    179c:	movt	r3, #0
    17a0:	bl	0 <__assert_fail>
    17a4:	movw	r0, #0
    17a8:	movw	r1, #0
    17ac:	movw	r3, #0
    17b0:	mov	r2, #872	; 0x368
    17b4:	movt	r0, #0
    17b8:	movt	r1, #0
    17bc:	movt	r3, #0
    17c0:	bl	0 <__assert_fail>

000017c4 <coda_mem_int32_new>:
    17c4:	push	{r4, r5, fp, lr}
    17c8:	add	fp, sp, #8
    17cc:	sub	sp, sp, #8
    17d0:	str	r3, [sp, #4]
    17d4:	ldrd	r4, [r0, #24]
    17d8:	eor	r3, r4, #32
    17dc:	orrs	r3, r3, r5
    17e0:	bne	1808 <coda_mem_int32_new+0x44>
    17e4:	ldr	r3, [r0, #12]
    17e8:	cmp	r3, #4
    17ec:	bne	1828 <coda_mem_int32_new+0x64>
    17f0:	add	r3, sp, #4
    17f4:	str	r3, [sp]
    17f8:	mov	r3, #4
    17fc:	bl	12f0 <coda_mem_data_new>
    1800:	sub	sp, fp, #8
    1804:	pop	{r4, r5, fp, pc}
    1808:	movw	r0, #0
    180c:	movw	r1, #0
    1810:	movw	r3, #0
    1814:	movw	r2, #879	; 0x36f
    1818:	movt	r0, #0
    181c:	movt	r1, #0
    1820:	movt	r3, #0
    1824:	bl	0 <__assert_fail>
    1828:	movw	r0, #0
    182c:	movw	r1, #0
    1830:	movw	r3, #0
    1834:	mov	r2, #880	; 0x370
    1838:	movt	r0, #0
    183c:	movt	r1, #0
    1840:	movt	r3, #0
    1844:	bl	0 <__assert_fail>

00001848 <coda_mem_uint32_new>:
    1848:	push	{r4, r5, fp, lr}
    184c:	add	fp, sp, #8
    1850:	sub	sp, sp, #8
    1854:	str	r3, [sp, #4]
    1858:	ldrd	r4, [r0, #24]
    185c:	eor	r3, r4, #32
    1860:	orrs	r3, r3, r5
    1864:	bne	188c <coda_mem_uint32_new+0x44>
    1868:	ldr	r3, [r0, #12]
    186c:	cmp	r3, #5
    1870:	bne	18ac <coda_mem_uint32_new+0x64>
    1874:	add	r3, sp, #4
    1878:	str	r3, [sp]
    187c:	mov	r3, #4
    1880:	bl	12f0 <coda_mem_data_new>
    1884:	sub	sp, fp, #8
    1888:	pop	{r4, r5, fp, pc}
    188c:	movw	r0, #0
    1890:	movw	r1, #0
    1894:	movw	r3, #0
    1898:	movw	r2, #887	; 0x377
    189c:	movt	r0, #0
    18a0:	movt	r1, #0
    18a4:	movt	r3, #0
    18a8:	bl	0 <__assert_fail>
    18ac:	movw	r0, #0
    18b0:	movw	r1, #0
    18b4:	movw	r3, #0
    18b8:	mov	r2, #888	; 0x378
    18bc:	movt	r0, #0
    18c0:	movt	r1, #0
    18c4:	movt	r3, #0
    18c8:	bl	0 <__assert_fail>

000018cc <coda_mem_int64_new>:
    18cc:	push	{r4, r5, fp, lr}
    18d0:	add	fp, sp, #8
    18d4:	sub	sp, sp, #16
    18d8:	ldr	r3, [fp, #12]
    18dc:	str	r3, [sp, #12]
    18e0:	ldr	r3, [fp, #8]
    18e4:	str	r3, [sp, #8]
    18e8:	ldrd	r4, [r0, #24]
    18ec:	eor	r3, r4, #64	; 0x40
    18f0:	orrs	r3, r3, r5
    18f4:	bne	191c <coda_mem_int64_new+0x50>
    18f8:	ldr	r3, [r0, #12]
    18fc:	cmp	r3, #6
    1900:	bne	193c <coda_mem_int64_new+0x70>
    1904:	add	r3, sp, #8
    1908:	str	r3, [sp]
    190c:	mov	r3, #8
    1910:	bl	12f0 <coda_mem_data_new>
    1914:	sub	sp, fp, #8
    1918:	pop	{r4, r5, fp, pc}
    191c:	movw	r0, #0
    1920:	movw	r1, #0
    1924:	movw	r3, #0
    1928:	movw	r2, #895	; 0x37f
    192c:	movt	r0, #0
    1930:	movt	r1, #0
    1934:	movt	r3, #0
    1938:	bl	0 <__assert_fail>
    193c:	movw	r0, #0
    1940:	movw	r1, #0
    1944:	movw	r3, #0
    1948:	mov	r2, #896	; 0x380
    194c:	movt	r0, #0
    1950:	movt	r1, #0
    1954:	movt	r3, #0
    1958:	bl	0 <__assert_fail>

0000195c <coda_mem_uint64_new>:
    195c:	push	{r4, r5, fp, lr}
    1960:	add	fp, sp, #8
    1964:	sub	sp, sp, #16
    1968:	ldr	r3, [fp, #12]
    196c:	str	r3, [sp, #12]
    1970:	ldr	r3, [fp, #8]
    1974:	str	r3, [sp, #8]
    1978:	ldrd	r4, [r0, #24]
    197c:	eor	r3, r4, #64	; 0x40
    1980:	orrs	r3, r3, r5
    1984:	bne	19ac <coda_mem_uint64_new+0x50>
    1988:	ldr	r3, [r0, #12]
    198c:	cmp	r3, #7
    1990:	bne	19cc <coda_mem_uint64_new+0x70>
    1994:	add	r3, sp, #8
    1998:	str	r3, [sp]
    199c:	mov	r3, #8
    19a0:	bl	12f0 <coda_mem_data_new>
    19a4:	sub	sp, fp, #8
    19a8:	pop	{r4, r5, fp, pc}
    19ac:	movw	r0, #0
    19b0:	movw	r1, #0
    19b4:	movw	r3, #0
    19b8:	movw	r2, #903	; 0x387
    19bc:	movt	r0, #0
    19c0:	movt	r1, #0
    19c4:	movt	r3, #0
    19c8:	bl	0 <__assert_fail>
    19cc:	movw	r0, #0
    19d0:	movw	r1, #0
    19d4:	movw	r3, #0
    19d8:	mov	r2, #904	; 0x388
    19dc:	movt	r0, #0
    19e0:	movt	r1, #0
    19e4:	movt	r3, #0
    19e8:	bl	0 <__assert_fail>

000019ec <coda_mem_float_new>:
    19ec:	push	{r4, r5, fp, lr}
    19f0:	add	fp, sp, #8
    19f4:	sub	sp, sp, #8
    19f8:	vstr	s0, [sp, #4]
    19fc:	ldrd	r4, [r0, #24]
    1a00:	eor	r3, r4, #32
    1a04:	orrs	r3, r3, r5
    1a08:	bne	1a30 <coda_mem_float_new+0x44>
    1a0c:	ldr	r3, [r0, #12]
    1a10:	cmp	r3, #8
    1a14:	bne	1a50 <coda_mem_float_new+0x64>
    1a18:	add	r3, sp, #4
    1a1c:	str	r3, [sp]
    1a20:	mov	r3, #4
    1a24:	bl	12f0 <coda_mem_data_new>
    1a28:	sub	sp, fp, #8
    1a2c:	pop	{r4, r5, fp, pc}
    1a30:	movw	r0, #0
    1a34:	movw	r1, #0
    1a38:	movw	r3, #0
    1a3c:	movw	r2, #911	; 0x38f
    1a40:	movt	r0, #0
    1a44:	movt	r1, #0
    1a48:	movt	r3, #0
    1a4c:	bl	0 <__assert_fail>
    1a50:	movw	r0, #0
    1a54:	movw	r1, #0
    1a58:	movw	r3, #0
    1a5c:	mov	r2, #912	; 0x390
    1a60:	movt	r0, #0
    1a64:	movt	r1, #0
    1a68:	movt	r3, #0
    1a6c:	bl	0 <__assert_fail>

00001a70 <coda_mem_double_new>:
    1a70:	push	{r4, r5, fp, lr}
    1a74:	add	fp, sp, #8
    1a78:	sub	sp, sp, #16
    1a7c:	vstr	d0, [sp, #8]
    1a80:	ldrd	r4, [r0, #24]
    1a84:	eor	r3, r4, #64	; 0x40
    1a88:	orrs	r3, r3, r5
    1a8c:	bne	1ab4 <coda_mem_double_new+0x44>
    1a90:	ldr	r3, [r0, #12]
    1a94:	cmp	r3, #9
    1a98:	bne	1ad4 <coda_mem_double_new+0x64>
    1a9c:	add	r3, sp, #8
    1aa0:	str	r3, [sp]
    1aa4:	mov	r3, #8
    1aa8:	bl	12f0 <coda_mem_data_new>
    1aac:	sub	sp, fp, #8
    1ab0:	pop	{r4, r5, fp, pc}
    1ab4:	movw	r0, #0
    1ab8:	movw	r1, #0
    1abc:	movw	r3, #0
    1ac0:	movw	r2, #919	; 0x397
    1ac4:	movt	r0, #0
    1ac8:	movt	r1, #0
    1acc:	movt	r3, #0
    1ad0:	bl	0 <__assert_fail>
    1ad4:	movw	r0, #0
    1ad8:	movw	r1, #0
    1adc:	movw	r3, #0
    1ae0:	mov	r2, #920	; 0x398
    1ae4:	movt	r0, #0
    1ae8:	movt	r1, #0
    1aec:	movt	r3, #0
    1af0:	bl	0 <__assert_fail>

00001af4 <coda_mem_char_new>:
    1af4:	push	{r4, r5, fp, lr}
    1af8:	add	fp, sp, #8
    1afc:	sub	sp, sp, #8
    1b00:	strb	r3, [sp, #7]
    1b04:	ldrd	r4, [r0, #24]
    1b08:	eor	r3, r4, #8
    1b0c:	orrs	r3, r3, r5
    1b10:	bne	1b38 <coda_mem_char_new+0x44>
    1b14:	ldr	r3, [r0, #12]
    1b18:	cmp	r3, #10
    1b1c:	bne	1b58 <coda_mem_char_new+0x64>
    1b20:	add	r3, sp, #7
    1b24:	str	r3, [sp]
    1b28:	mov	r3, #1
    1b2c:	bl	12f0 <coda_mem_data_new>
    1b30:	sub	sp, fp, #8
    1b34:	pop	{r4, r5, fp, pc}
    1b38:	movw	r0, #0
    1b3c:	movw	r1, #0
    1b40:	movw	r3, #0
    1b44:	movw	r2, #927	; 0x39f
    1b48:	movt	r0, #0
    1b4c:	movt	r1, #0
    1b50:	movt	r3, #0
    1b54:	bl	0 <__assert_fail>
    1b58:	movw	r0, #0
    1b5c:	movw	r1, #0
    1b60:	movw	r3, #0
    1b64:	mov	r2, #928	; 0x3a0
    1b68:	movt	r0, #0
    1b6c:	movt	r1, #0
    1b70:	movt	r3, #0
    1b74:	bl	0 <__assert_fail>

00001b78 <coda_mem_raw_new>:
    1b78:	ldr	ip, [r0, #8]
    1b7c:	cmp	ip, #5
    1b80:	bne	1b88 <coda_mem_raw_new+0x10>
    1b84:	b	12f0 <coda_mem_data_new>
    1b88:	push	{fp, lr}
    1b8c:	mov	fp, sp
    1b90:	movw	r0, #0
    1b94:	movw	r1, #0
    1b98:	movw	r3, #0
    1b9c:	movw	r2, #943	; 0x3af
    1ba0:	movt	r0, #0
    1ba4:	movt	r1, #0
    1ba8:	movt	r3, #0
    1bac:	bl	0 <__assert_fail>

00001bb0 <coda_mem_time_new>:
    1bb0:	push	{r4, r5, r6, r7, fp, lr}
    1bb4:	add	fp, sp, #16
    1bb8:	sub	sp, sp, #8
    1bbc:	cmp	r0, #0
    1bc0:	beq	1c10 <coda_mem_time_new+0x60>
    1bc4:	mov	r5, r0
    1bc8:	ldr	r0, [r0, #8]
    1bcc:	cmp	r0, #6
    1bd0:	bne	1c28 <coda_mem_time_new+0x78>
    1bd4:	ldr	r0, [r5, #40]	; 0x28
    1bd8:	cmp	r0, #2
    1bdc:	bne	1c40 <coda_mem_time_new+0x90>
    1be0:	mov	r6, r1
    1be4:	ldr	r0, [r2, #4]
    1be8:	ldr	r1, [r5, #44]	; 0x2c
    1bec:	mov	r7, r2
    1bf0:	cmp	r1, r0
    1bf4:	beq	1c6c <coda_mem_time_new+0xbc>
    1bf8:	movw	r1, #0
    1bfc:	movw	r2, #0
    1c00:	mvn	r0, #99	; 0x63
    1c04:	movw	r3, #970	; 0x3ca
    1c08:	movt	r1, #0
    1c0c:	b	1c54 <coda_mem_time_new+0xa4>
    1c10:	movw	r1, #0
    1c14:	movw	r2, #0
    1c18:	mvn	r0, #99	; 0x63
    1c1c:	movw	r3, #954	; 0x3ba
    1c20:	movt	r1, #0
    1c24:	b	1c54 <coda_mem_time_new+0xa4>
    1c28:	movw	r1, #0
    1c2c:	movw	r2, #0
    1c30:	mvn	r0, #99	; 0x63
    1c34:	movw	r3, #959	; 0x3bf
    1c38:	movt	r1, #0
    1c3c:	b	1c54 <coda_mem_time_new+0xa4>
    1c40:	movw	r1, #0
    1c44:	movw	r2, #0
    1c48:	mvn	r0, #99	; 0x63
    1c4c:	mov	r3, #964	; 0x3c4
    1c50:	movt	r1, #0
    1c54:	movt	r2, #0
    1c58:	bl	0 <coda_set_error>
    1c5c:	mov	r4, #0
    1c60:	mov	r0, r4
    1c64:	sub	sp, fp, #16
    1c68:	pop	{r4, r5, r6, r7, fp, pc}
    1c6c:	mov	r0, #20
    1c70:	bl	0 <malloc>
    1c74:	cmp	r0, #0
    1c78:	beq	1cd4 <coda_mem_time_new+0x124>
    1c7c:	ldr	r1, [r5, #4]
    1c80:	mov	r4, r0
    1c84:	mov	r0, #100	; 0x64
    1c88:	cmp	r6, #0
    1c8c:	add	r1, r1, #1
    1c90:	str	r1, [r5, #4]
    1c94:	stm	r4, {r0, r5}
    1c98:	mov	r1, #3
    1c9c:	add	r0, r4, #8
    1ca0:	stm	r0, {r1, r6, r7}
    1ca4:	bne	1c60 <coda_mem_time_new+0xb0>
    1ca8:	ldr	r0, [r5, #36]	; 0x24
    1cac:	cmp	r0, #0
    1cb0:	beq	1c60 <coda_mem_time_new+0xb0>
    1cb4:	mov	r1, #0
    1cb8:	bl	8c8 <coda_mem_record_new>
    1cbc:	cmp	r0, #0
    1cc0:	str	r0, [r4, #12]
    1cc4:	bne	1c60 <coda_mem_time_new+0xb0>
    1cc8:	mov	r0, r4
    1ccc:	bl	0 <coda_mem_type_delete>
    1cd0:	b	1c5c <coda_mem_time_new+0xac>
    1cd4:	movw	r1, #0
    1cd8:	movw	r3, #0
    1cdc:	movw	r0, #978	; 0x3d2
    1ce0:	mov	r2, #20
    1ce4:	str	r0, [sp]
    1ce8:	movt	r1, #0
    1cec:	movt	r3, #0
    1cf0:	mvn	r0, #0
    1cf4:	b	1c58 <coda_mem_time_new+0xa8>

00001cf8 <coda_mem_no_data_new>:
    1cf8:	push	{r4, r5, fp, lr}
    1cfc:	add	fp, sp, #8
    1d00:	sub	sp, sp, #8
    1d04:	mov	r5, r0
    1d08:	mov	r0, #20
    1d0c:	bl	0 <malloc>
    1d10:	cmp	r0, #0
    1d14:	beq	1dc0 <coda_mem_no_data_new+0xc8>
    1d18:	mov	r4, r0
    1d1c:	mov	r1, #100	; 0x64
    1d20:	mov	r0, #0
    1d24:	mov	r2, #3
    1d28:	str	r1, [r4]
    1d2c:	stmib	r4, {r0, r2}
    1d30:	str	r0, [r4, #12]
    1d34:	str	r0, [r4, #16]
    1d38:	mov	r0, r5
    1d3c:	bl	0 <coda_type_no_data_singleton>
    1d40:	cmp	r0, #0
    1d44:	str	r0, [r4, #4]
    1d48:	beq	1db4 <coda_mem_no_data_new+0xbc>
    1d4c:	ldr	r2, [r0, #4]
    1d50:	mov	r1, r0
    1d54:	ldr	r0, [r0, #44]	; 0x2c
    1d58:	add	r2, r2, #1
    1d5c:	str	r2, [r1, #4]
    1d60:	ldr	r1, [r0, #8]
    1d64:	cmp	r1, #5
    1d68:	bne	1df4 <coda_mem_no_data_new+0xfc>
    1d6c:	mov	r1, #0
    1d70:	mov	r2, #0
    1d74:	mov	r3, #0
    1d78:	str	r1, [sp]
    1d7c:	mov	r1, #0
    1d80:	bl	12f0 <coda_mem_data_new>
    1d84:	cmp	r0, #0
    1d88:	str	r0, [r4, #16]
    1d8c:	beq	1db4 <coda_mem_no_data_new+0xbc>
    1d90:	ldr	r0, [r4, #4]
    1d94:	ldr	r0, [r0, #36]	; 0x24
    1d98:	cmp	r0, #0
    1d9c:	beq	1de8 <coda_mem_no_data_new+0xf0>
    1da0:	mov	r1, #0
    1da4:	bl	8c8 <coda_mem_record_new>
    1da8:	cmp	r0, #0
    1dac:	str	r0, [r4, #12]
    1db0:	bne	1de8 <coda_mem_no_data_new+0xf0>
    1db4:	mov	r0, r4
    1db8:	bl	0 <coda_mem_type_delete>
    1dbc:	b	1de4 <coda_mem_no_data_new+0xec>
    1dc0:	movw	r1, #0
    1dc4:	movw	r3, #0
    1dc8:	movw	r0, #1009	; 0x3f1
    1dcc:	mov	r2, #20
    1dd0:	str	r0, [sp]
    1dd4:	movt	r1, #0
    1dd8:	movt	r3, #0
    1ddc:	mvn	r0, #0
    1de0:	bl	0 <coda_set_error>
    1de4:	mov	r4, #0
    1de8:	mov	r0, r4
    1dec:	sub	sp, fp, #8
    1df0:	pop	{r4, r5, fp, pc}
    1df4:	movw	r0, #0
    1df8:	movw	r1, #0
    1dfc:	movw	r3, #0
    1e00:	movw	r2, #943	; 0x3af
    1e04:	movt	r0, #0
    1e08:	movt	r1, #0
    1e0c:	movt	r3, #0
    1e10:	bl	0 <__assert_fail>
