
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-cursor-read.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_array>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #640	; 0x280
       8:	str	ip, [sp]
       c:	str	lr, [sp, #4]
      10:	str	r4, [sp, #8]
      14:	str	r5, [sp, #12]
      18:	str	r6, [sp, #16]
      1c:	str	r7, [sp, #20]
      20:	str	r8, [sp, #24]
      24:	str	r9, [sp, #28]
      28:	str	sl, [sp, #32]
      2c:	ldr	r8, [ip]
      30:	mov	r4, r3
      34:	mov	r5, r2
      38:	mov	r6, r1
      3c:	mov	r7, r0
      40:	add	r1, sp, #40	; 0x28
      44:	add	r2, sp, #48	; 0x30
      48:	mov	r0, r7
      4c:	bl	0 <coda_cursor_get_array_dim>
      50:	cmp	r0, #0
      54:	beq	60 <read_array+0x60>
      58:	mvn	r0, #0
      5c:	b	2c0 <read_array+0x2c0>
      60:	mov	r2, r7
      64:	add	r3, sp, #120	; 0x78
      68:	mov	lr, #130	; 0x82
      6c:	ldr	ip, [r2], #4
      70:	subs	lr, lr, #1
      74:	str	ip, [r3], #4
      78:	bne	6c <read_array+0x6c>
      7c:	ldr	r0, [sp, #40]	; 0x28
      80:	cmp	r0, #1
      84:	ble	98 <read_array+0x98>
      88:	cmp	r8, #1
      8c:	movne	r0, #1
      90:	moveq	r0, #0
      94:	b	9c <read_array+0x9c>
      98:	mov	r0, #1
      9c:	cmp	r0, #0
      a0:	bne	21c <read_array+0x21c>
      a4:	mov	ip, #1
      a8:	str	ip, [sp, #80]	; 0x50
      ac:	mov	r2, #0
      b0:	ldr	r1, [sp, #40]	; 0x28
      b4:	cmp	r2, r1
      b8:	bge	e8 <read_array+0xe8>
      bc:	add	r3, sp, #80	; 0x50
      c0:	lsl	r1, r2, #2
      c4:	add	r0, r3, r1
      c8:	add	r1, sp, #80	; 0x50
      cc:	ldr	r3, [r1, r2, lsl #2]
      d0:	add	r1, sp, #48	; 0x30
      d4:	ldr	r1, [r1, r2, lsl #2]
      d8:	mul	ip, r3, r1
      dc:	str	ip, [r0, #4]
      e0:	add	r2, r2, #1
      e4:	b	b0 <read_array+0xb0>
      e8:	add	r0, sp, #80	; 0x50
      ec:	ldr	r3, [sp, #40]	; 0x28
      f0:	lsl	r1, r3, #2
      f4:	add	ip, r0, r1
      f8:	sub	lr, ip, #4096	; 0x1000
      fc:	ldr	r8, [lr, #4092]	; 0xffc
     100:	add	r3, sp, #80	; 0x50
     104:	ldr	r2, [sp, #40]	; 0x28
     108:	ldr	r7, [r3, r2, lsl #2]
     10c:	cmp	r7, #0
     110:	ble	2bc <read_array+0x2bc>
     114:	mov	r9, #0
     118:	mov	sl, #0
     11c:	add	r0, sp, #120	; 0x78
     120:	mov	r1, #0
     124:	bl	0 <coda_cursor_goto_array_element_by_index>
     128:	cmp	r0, #0
     12c:	beq	138 <read_array+0x138>
     130:	mvn	r0, #0
     134:	b	2c0 <read_array+0x2c0>
     138:	add	r0, sp, #120	; 0x78
     13c:	mla	r1, sl, r4, r5
     140:	blx	r6
     144:	cmp	r0, #0
     148:	beq	154 <read_array+0x154>
     14c:	mvn	r0, #0
     150:	b	2c0 <read_array+0x2c0>
     154:	add	r9, r9, #1
     158:	cmp	r9, r7
     15c:	bge	178 <read_array+0x178>
     160:	add	r0, sp, #120	; 0x78
     164:	bl	0 <coda_cursor_goto_next_array_element>
     168:	cmp	r0, #0
     16c:	beq	178 <read_array+0x178>
     170:	mvn	r0, #0
     174:	b	2c0 <read_array+0x2c0>
     178:	add	sl, sl, r8
     17c:	cmp	sl, r7
     180:	blt	138 <read_array+0x138>
     184:	cmp	r9, r7
     188:	beq	2bc <read_array+0x2bc>
     18c:	add	r1, sp, #80	; 0x50
     190:	ldr	r3, [sp, #40]	; 0x28
     194:	lsl	r3, r3, #2
     198:	add	r3, r1, r3
     19c:	sub	lr, r3, #4096	; 0x1000
     1a0:	ldr	r3, [lr, #4088]	; 0xff8
     1a4:	add	r1, sp, #80	; 0x50
     1a8:	ldr	ip, [sp, #40]	; 0x28
     1ac:	ldr	r0, [r1, ip, lsl #2]
     1b0:	sub	r3, r3, r0
     1b4:	add	sl, sl, r3
     1b8:	ldr	r0, [sp, #40]	; 0x28
     1bc:	sub	r3, r0, #3
     1c0:	cmp	r3, #0
     1c4:	blt	1e8 <read_array+0x1e8>
     1c8:	add	r1, sp, #80	; 0x50
     1cc:	lsl	r2, r3, #2
     1d0:	add	ip, r1, r2
     1d4:	ldr	r2, [ip, #8]
     1d8:	cmp	sl, r2
     1dc:	movge	ip, #1
     1e0:	movlt	ip, #0
     1e4:	b	1ec <read_array+0x1ec>
     1e8:	mov	ip, #0
     1ec:	cmp	ip, #0
     1f0:	beq	138 <read_array+0x138>
     1f4:	add	ip, sp, #80	; 0x50
     1f8:	ldr	r2, [ip, r3, lsl #2]
     1fc:	add	r0, sp, #80	; 0x50
     200:	lsl	ip, r3, #2
     204:	add	ip, r0, ip
     208:	ldr	ip, [ip, #8]
     20c:	sub	r0, r2, ip
     210:	add	sl, sl, r0
     214:	sub	r3, r3, #1
     218:	b	1c0 <read_array+0x1c0>
     21c:	mov	r7, #1
     220:	mov	r2, #0
     224:	ldr	r1, [sp, #40]	; 0x28
     228:	cmp	r2, r1
     22c:	bge	244 <read_array+0x244>
     230:	add	r3, sp, #48	; 0x30
     234:	ldr	ip, [r3, r2, lsl #2]
     238:	mul	r7, r7, ip
     23c:	add	r2, r2, #1
     240:	b	224 <read_array+0x224>
     244:	cmp	r7, #0
     248:	ble	2bc <read_array+0x2bc>
     24c:	add	r0, sp, #120	; 0x78
     250:	mov	r1, #0
     254:	bl	0 <coda_cursor_goto_array_element_by_index>
     258:	cmp	r0, #0
     25c:	beq	268 <read_array+0x268>
     260:	mvn	r0, #0
     264:	b	2c0 <read_array+0x2c0>
     268:	mov	r8, #0
     26c:	cmp	r8, r7
     270:	bge	2bc <read_array+0x2bc>
     274:	add	r0, sp, #120	; 0x78
     278:	mla	r1, r8, r4, r5
     27c:	blx	r6
     280:	cmp	r0, #0
     284:	beq	290 <read_array+0x290>
     288:	mvn	r0, #0
     28c:	b	2c0 <read_array+0x2c0>
     290:	sub	r2, r7, #1
     294:	cmp	r8, r2
     298:	bge	2b4 <read_array+0x2b4>
     29c:	add	r0, sp, #120	; 0x78
     2a0:	bl	0 <coda_cursor_goto_next_array_element>
     2a4:	cmp	r0, #0
     2a8:	beq	2b4 <read_array+0x2b4>
     2ac:	mvn	r0, #0
     2b0:	b	2c0 <read_array+0x2c0>
     2b4:	add	r8, r8, #1
     2b8:	b	26c <read_array+0x26c>
     2bc:	mov	r0, #0
     2c0:	ldr	r4, [sp, #8]
     2c4:	ldr	r5, [sp, #12]
     2c8:	ldr	r6, [sp, #16]
     2cc:	ldr	r7, [sp, #20]
     2d0:	ldr	r8, [sp, #24]
     2d4:	ldr	r9, [sp, #28]
     2d8:	ldr	sl, [sp, #32]
     2dc:	ldr	lr, [sp, #4]
     2e0:	add	sp, sp, #640	; 0x280
     2e4:	bx	lr

000002e8 <read_partial_array>:
     2e8:	mov	ip, sp
     2ec:	sub	sp, sp, #552	; 0x228
     2f0:	str	ip, [sp]
     2f4:	str	lr, [sp, #4]
     2f8:	str	r4, [sp, #8]
     2fc:	str	r5, [sp, #12]
     300:	str	r6, [sp, #16]
     304:	str	r7, [sp, #20]
     308:	str	r8, [sp, #24]
     30c:	ldr	r6, [ip, #4]
     310:	ldr	r7, [ip]
     314:	mov	r4, r3
     318:	mov	r5, r1
     31c:	mov	r1, r2
     320:	mov	r2, r0
     324:	add	r3, sp, #32
     328:	mov	lr, #130	; 0x82
     32c:	ldr	ip, [r2], #4
     330:	subs	lr, lr, #1
     334:	str	ip, [r3], #4
     338:	bne	32c <read_partial_array+0x44>
     33c:	cmp	r4, #0
     340:	ble	3b0 <read_partial_array+0xc8>
     344:	add	r0, sp, #32
     348:	bl	0 <coda_cursor_goto_array_element_by_index>
     34c:	cmp	r0, #0
     350:	beq	35c <read_partial_array+0x74>
     354:	mvn	r0, #0
     358:	b	3b4 <read_partial_array+0xcc>
     35c:	mov	r8, #0
     360:	cmp	r8, r4
     364:	bge	3b0 <read_partial_array+0xc8>
     368:	add	r0, sp, #32
     36c:	mla	r1, r8, r6, r7
     370:	blx	r5
     374:	cmp	r0, #0
     378:	beq	384 <read_partial_array+0x9c>
     37c:	mvn	r0, #0
     380:	b	3b4 <read_partial_array+0xcc>
     384:	sub	r1, r4, #1
     388:	cmp	r8, r1
     38c:	bge	3a8 <read_partial_array+0xc0>
     390:	add	r0, sp, #32
     394:	bl	0 <coda_cursor_goto_next_array_element>
     398:	cmp	r0, #0
     39c:	beq	3a8 <read_partial_array+0xc0>
     3a0:	mvn	r0, #0
     3a4:	b	3b4 <read_partial_array+0xcc>
     3a8:	add	r8, r8, #1
     3ac:	b	360 <read_partial_array+0x78>
     3b0:	mov	r0, #0
     3b4:	ldr	r4, [sp, #8]
     3b8:	ldr	r5, [sp, #12]
     3bc:	ldr	r6, [sp, #16]
     3c0:	ldr	r7, [sp, #20]
     3c4:	ldr	r8, [sp, #24]
     3c8:	ldr	lr, [sp, #4]
     3cc:	add	sp, sp, #552	; 0x228
     3d0:	bx	lr

000003d4 <transpose_array>:
     3d4:	mov	ip, sp
     3d8:	sub	sp, sp, #200	; 0xc8
     3dc:	str	ip, [sp, #4]
     3e0:	str	lr, [sp, #8]
     3e4:	str	r4, [sp, #16]
     3e8:	str	r5, [sp, #20]
     3ec:	str	r6, [sp, #24]
     3f0:	str	r7, [sp, #28]
     3f4:	str	r8, [sp, #32]
     3f8:	str	r9, [sp, #36]	; 0x24
     3fc:	mov	r6, r2
     400:	mov	r5, r1
     404:	mov	r8, #0
     408:	add	r1, sp, #40	; 0x28
     40c:	add	r2, sp, #48	; 0x30
     410:	bl	0 <coda_cursor_get_array_dim>
     414:	cmp	r0, #0
     418:	beq	424 <transpose_array+0x50>
     41c:	mvn	r0, #0
     420:	b	86c <transpose_array+0x498>
     424:	ldr	r1, [sp, #40]	; 0x28
     428:	cmp	r1, #1
     42c:	bgt	438 <transpose_array+0x64>
     430:	mov	r0, #0
     434:	b	86c <transpose_array+0x498>
     438:	mov	r7, #1
     43c:	mov	r2, #0
     440:	ldr	ip, [sp, #40]	; 0x28
     444:	cmp	r2, ip
     448:	bge	490 <transpose_array+0xbc>
     44c:	add	r1, sp, #48	; 0x30
     450:	ldr	r0, [r1, r2, lsl #2]
     454:	mul	r7, r7, r0
     458:	add	r3, sp, #160	; 0xa0
     45c:	mov	ip, #0
     460:	str	ip, [r3, r2, lsl #2]
     464:	add	r1, sp, #80	; 0x50
     468:	add	r4, sp, #48	; 0x30
     46c:	ldr	ip, [sp, #40]	; 0x28
     470:	sub	r0, ip, r2
     474:	lsl	r3, r0, #2
     478:	add	r3, r4, r3
     47c:	sub	lr, r3, #4096	; 0x1000
     480:	ldr	r3, [lr, #4092]	; 0xffc
     484:	str	r3, [r1, r2, lsl #2]
     488:	add	r2, r2, #1
     48c:	b	440 <transpose_array+0x6c>
     490:	cmp	r7, #1
     494:	bgt	4a0 <transpose_array+0xcc>
     498:	mov	r0, #0
     49c:	b	86c <transpose_array+0x498>
     4a0:	add	ip, sp, #120	; 0x78
     4a4:	ldr	r2, [sp, #40]	; 0x28
     4a8:	mov	r1, #1
     4ac:	str	r1, [ip, r2, lsl #2]
     4b0:	add	ip, sp, #80	; 0x50
     4b4:	ldr	r3, [sp, #40]	; 0x28
     4b8:	mov	r2, #1
     4bc:	str	r2, [ip, r3, lsl #2]
     4c0:	ldr	r4, [sp, #40]	; 0x28
     4c4:	cmp	r4, #0
     4c8:	ble	4fc <transpose_array+0x128>
     4cc:	add	r0, sp, #120	; 0x78
     4d0:	lsl	r3, r4, #2
     4d4:	add	r1, r0, r3
     4d8:	add	r2, sp, #120	; 0x78
     4dc:	ldr	r2, [r2, r4, lsl #2]
     4e0:	add	ip, sp, #80	; 0x50
     4e4:	ldr	r0, [ip, r4, lsl #2]
     4e8:	mul	ip, r2, r0
     4ec:	sub	lr, r1, #4096	; 0x1000
     4f0:	str	ip, [lr, #4092]	; 0xffc
     4f4:	sub	r4, r4, #1
     4f8:	b	4c4 <transpose_array+0xf0>
     4fc:	add	r0, sp, #80	; 0x50
     500:	ldr	r2, [sp, #40]	; 0x28
     504:	mov	r3, #0
     508:	str	r3, [r0, r2, lsl #2]
     50c:	add	r1, sp, #160	; 0xa0
     510:	ldr	r2, [sp, #40]	; 0x28
     514:	mov	r3, #0
     518:	str	r3, [r1, r2, lsl #2]
     51c:	mul	r0, r7, r6
     520:	bl	0 <malloc>
     524:	mov	r4, r0
     528:	cmp	r4, #0
     52c:	bne	554 <transpose_array+0x180>
     530:	mvn	r0, #0
     534:	ldr	r1, [pc, #856]	; 894 <transpose_array+0x4c0>
     538:	mul	r2, r7, r6
     53c:	ldr	r3, [pc, #852]	; 898 <transpose_array+0x4c4>
     540:	mov	r4, #93	; 0x5d
     544:	str	r4, [sp]
     548:	bl	0 <coda_set_error>
     54c:	mvn	r0, #0
     550:	b	86c <transpose_array+0x498>
     554:	cmp	r6, #4
     558:	bcs	6c8 <transpose_array+0x2f4>
     55c:	cmp	r6, #1
     560:	beq	620 <transpose_array+0x24c>
     564:	cmp	r6, #2
     568:	bne	78c <transpose_array+0x3b8>
     56c:	mov	r9, #0
     570:	cmp	r9, r7
     574:	bge	850 <transpose_array+0x47c>
     578:	mov	r1, #0
     57c:	add	r0, r4, r8, lsl #1
     580:	add	ip, r5, r9, lsl #1
     584:	ldrh	r2, [ip]
     588:	bic	ip, r2, #16711680	; 0xff0000
     58c:	bic	ip, ip, #-16777216	; 0xff000000
     590:	strh	ip, [r0]
     594:	add	r2, sp, #120	; 0x78
     598:	ldr	r2, [r2, r1, lsl #2]
     59c:	add	r8, r8, r2
     5a0:	add	r2, sp, #160	; 0xa0
     5a4:	add	ip, sp, #160	; 0xa0
     5a8:	ldr	r0, [ip, r1, lsl #2]
     5ac:	add	ip, r0, #1
     5b0:	str	ip, [r2, r1, lsl #2]
     5b4:	add	r3, sp, #160	; 0xa0
     5b8:	ldr	r0, [r3, r1, lsl #2]
     5bc:	add	r2, sp, #80	; 0x50
     5c0:	ldr	r3, [r2, r1, lsl #2]
     5c4:	cmp	r0, r3
     5c8:	bne	618 <transpose_array+0x244>
     5cc:	add	r0, sp, #160	; 0xa0
     5d0:	mov	r2, #0
     5d4:	str	r2, [r0, r1, lsl #2]
     5d8:	add	r0, sp, #120	; 0x78
     5dc:	ldr	r0, [r0, r1, lsl #2]
     5e0:	add	r2, sp, #80	; 0x50
     5e4:	ldr	r3, [r2, r1, lsl #2]
     5e8:	mul	r3, r0, r3
     5ec:	sub	r0, r8, r3
     5f0:	add	r1, r1, #1
     5f4:	add	r3, sp, #120	; 0x78
     5f8:	ldr	ip, [r3, r1, lsl #2]
     5fc:	add	r8, r0, ip
     600:	add	r2, sp, #160	; 0xa0
     604:	add	r3, sp, #160	; 0xa0
     608:	ldr	r3, [r3, r1, lsl #2]
     60c:	add	r3, r3, #1
     610:	str	r3, [r2, r1, lsl #2]
     614:	b	5b4 <transpose_array+0x1e0>
     618:	add	r9, r9, #1
     61c:	b	570 <transpose_array+0x19c>
     620:	mov	ip, #0
     624:	cmp	ip, r7
     628:	bge	850 <transpose_array+0x47c>
     62c:	mov	r9, #0
     630:	ldrb	r3, [r5, ip]
     634:	and	r0, r3, #255	; 0xff
     638:	strb	r0, [r4, r8]
     63c:	add	r0, sp, #120	; 0x78
     640:	ldr	r0, [r0, r9, lsl #2]
     644:	add	r8, r8, r0
     648:	add	r1, sp, #160	; 0xa0
     64c:	add	r3, sp, #160	; 0xa0
     650:	ldr	r3, [r3, r9, lsl #2]
     654:	add	r0, r3, #1
     658:	str	r0, [r1, r9, lsl #2]
     65c:	add	r1, sp, #160	; 0xa0
     660:	ldr	r3, [r1, r9, lsl #2]
     664:	add	r2, sp, #80	; 0x50
     668:	ldr	r2, [r2, r9, lsl #2]
     66c:	cmp	r3, r2
     670:	bne	6c0 <transpose_array+0x2ec>
     674:	add	r1, sp, #160	; 0xa0
     678:	mov	r0, #0
     67c:	str	r0, [r1, r9, lsl #2]
     680:	add	r2, sp, #120	; 0x78
     684:	ldr	r0, [r2, r9, lsl #2]
     688:	add	r3, sp, #80	; 0x50
     68c:	ldr	r2, [r3, r9, lsl #2]
     690:	mul	r0, r0, r2
     694:	sub	r1, r8, r0
     698:	add	r9, r9, #1
     69c:	add	r3, sp, #120	; 0x78
     6a0:	ldr	r0, [r3, r9, lsl #2]
     6a4:	add	r8, r1, r0
     6a8:	add	r3, sp, #160	; 0xa0
     6ac:	add	r2, sp, #160	; 0xa0
     6b0:	ldr	r0, [r2, r9, lsl #2]
     6b4:	add	r0, r0, #1
     6b8:	str	r0, [r3, r9, lsl #2]
     6bc:	b	65c <transpose_array+0x288>
     6c0:	add	ip, ip, #1
     6c4:	b	624 <transpose_array+0x250>
     6c8:	cmp	r6, #4
     6cc:	beq	7ac <transpose_array+0x3d8>
     6d0:	cmp	r6, #8
     6d4:	bne	78c <transpose_array+0x3b8>
     6d8:	mov	r1, #0
     6dc:	cmp	r1, r7
     6e0:	bge	850 <transpose_array+0x47c>
     6e4:	mov	r9, #0
     6e8:	add	ip, r4, r8, lsl #3
     6ec:	add	r2, r5, r1, lsl #3
     6f0:	ldr	r3, [r2]
     6f4:	ldr	r2, [r2, #4]
     6f8:	str	r3, [ip]
     6fc:	str	r2, [ip, #4]
     700:	add	r3, sp, #120	; 0x78
     704:	ldr	r0, [r3, r9, lsl #2]
     708:	add	r8, r8, r0
     70c:	add	r2, sp, #160	; 0xa0
     710:	add	ip, sp, #160	; 0xa0
     714:	ldr	r3, [ip, r9, lsl #2]
     718:	add	r3, r3, #1
     71c:	str	r3, [r2, r9, lsl #2]
     720:	add	r0, sp, #160	; 0xa0
     724:	ldr	r2, [r0, r9, lsl #2]
     728:	add	r0, sp, #80	; 0x50
     72c:	ldr	r3, [r0, r9, lsl #2]
     730:	cmp	r2, r3
     734:	bne	784 <transpose_array+0x3b0>
     738:	add	r0, sp, #160	; 0xa0
     73c:	mov	ip, #0
     740:	str	ip, [r0, r9, lsl #2]
     744:	add	ip, sp, #120	; 0x78
     748:	ldr	ip, [ip, r9, lsl #2]
     74c:	add	r2, sp, #80	; 0x50
     750:	ldr	r0, [r2, r9, lsl #2]
     754:	mul	r0, ip, r0
     758:	sub	r2, r8, r0
     75c:	add	r9, r9, #1
     760:	add	r0, sp, #120	; 0x78
     764:	ldr	r3, [r0, r9, lsl #2]
     768:	add	r8, r2, r3
     76c:	add	r0, sp, #160	; 0xa0
     770:	add	r2, sp, #160	; 0xa0
     774:	ldr	r2, [r2, r9, lsl #2]
     778:	add	r2, r2, #1
     77c:	str	r2, [r0, r9, lsl #2]
     780:	b	720 <transpose_array+0x34c>
     784:	add	r1, r1, #1
     788:	b	6dc <transpose_array+0x308>
     78c:	ldr	r0, [pc, #264]	; 89c <transpose_array+0x4c8>
     790:	ldr	r1, [pc, #256]	; 898 <transpose_array+0x4c4>
     794:	mov	r2, #172	; 0xac
     798:	ldr	r3, [pc, #240]	; 890 <transpose_array+0x4bc>
     79c:	bl	0 <__assert_fail>
     7a0:	mov	r0, #1
     7a4:	bl	0 <exit>
     7a8:	b	850 <transpose_array+0x47c>
     7ac:	mov	r9, #0
     7b0:	cmp	r9, r7
     7b4:	bge	850 <transpose_array+0x47c>
     7b8:	mov	ip, #0
     7bc:	ldr	r3, [r5, r9, lsl #2]
     7c0:	str	r3, [r4, r8, lsl #2]
     7c4:	add	r1, sp, #120	; 0x78
     7c8:	ldr	r3, [r1, ip, lsl #2]
     7cc:	add	r8, r8, r3
     7d0:	add	r2, sp, #160	; 0xa0
     7d4:	add	r0, sp, #160	; 0xa0
     7d8:	ldr	r0, [r0, ip, lsl #2]
     7dc:	add	r0, r0, #1
     7e0:	str	r0, [r2, ip, lsl #2]
     7e4:	add	r0, sp, #160	; 0xa0
     7e8:	ldr	r3, [r0, ip, lsl #2]
     7ec:	add	r1, sp, #80	; 0x50
     7f0:	ldr	r2, [r1, ip, lsl #2]
     7f4:	cmp	r3, r2
     7f8:	bne	848 <transpose_array+0x474>
     7fc:	add	r0, sp, #160	; 0xa0
     800:	mov	r1, #0
     804:	str	r1, [r0, ip, lsl #2]
     808:	add	r1, sp, #120	; 0x78
     80c:	ldr	r3, [r1, ip, lsl #2]
     810:	add	r1, sp, #80	; 0x50
     814:	ldr	r2, [r1, ip, lsl #2]
     818:	mul	r0, r3, r2
     81c:	sub	r1, r8, r0
     820:	add	ip, ip, #1
     824:	add	r2, sp, #120	; 0x78
     828:	ldr	r3, [r2, ip, lsl #2]
     82c:	add	r8, r1, r3
     830:	add	r0, sp, #160	; 0xa0
     834:	add	r1, sp, #160	; 0xa0
     838:	ldr	r3, [r1, ip, lsl #2]
     83c:	add	r2, r3, #1
     840:	str	r2, [r0, ip, lsl #2]
     844:	b	7e4 <transpose_array+0x410>
     848:	add	r9, r9, #1
     84c:	b	7b0 <transpose_array+0x3dc>
     850:	mul	r2, r7, r6
     854:	mov	r1, r4
     858:	mov	r0, r5
     85c:	bl	0 <memcpy>
     860:	mov	r0, r4
     864:	bl	0 <free>
     868:	mov	r0, #0
     86c:	ldr	r4, [sp, #16]
     870:	ldr	r5, [sp, #20]
     874:	ldr	r6, [sp, #24]
     878:	ldr	r7, [sp, #28]
     87c:	ldr	r8, [sp, #32]
     880:	ldr	r9, [sp, #36]	; 0x24
     884:	ldr	lr, [sp, #8]
     888:	add	sp, sp, #200	; 0xc8
     88c:	bx	lr
     890:	.word	0x0000058c
     894:	.word	0x000004e3
     898:	.word	0x0000031b
     89c:	.word	0x000004b3

000008a0 <ipow>:
     8a0:	mov	ip, sp
     8a4:	sub	sp, sp, #8
     8a8:	str	ip, [sp]
     8ac:	str	lr, [sp, #4]
     8b0:	vmov.f64	d1, #112	; 0x3f800000  1.0
     8b4:	cmp	r0, #0
     8b8:	bge	8e0 <ipow+0x40>
     8bc:	mov	r1, r0
     8c0:	add	r0, r1, #1
     8c4:	cmp	r1, #0
     8c8:	beq	8d4 <ipow+0x34>
     8cc:	vmul.f64	d1, d1, d0
     8d0:	b	8bc <ipow+0x1c>
     8d4:	vmov.f64	d2, #112	; 0x3f800000  1.0
     8d8:	vdiv.f64	d1, d2, d1
     8dc:	b	8f8 <ipow+0x58>
     8e0:	mov	r1, r0
     8e4:	sub	r0, r1, #1
     8e8:	cmp	r1, #0
     8ec:	beq	8f8 <ipow+0x58>
     8f0:	vmul.f64	d1, d1, d0
     8f4:	b	8e0 <ipow+0x40>
     8f8:	vmov.f64	d0, d1
     8fc:	ldr	lr, [sp, #4]
     900:	add	sp, sp, #8
     904:	bx	lr

00000908 <get_read_type>:
     908:	mov	ip, sp
     90c:	sub	sp, sp, #8
     910:	str	ip, [sp]
     914:	str	lr, [sp, #4]
     918:	ldr	r2, [r0, #4]
     91c:	lsl	r2, r2, #4
     920:	add	r2, r0, r2
     924:	sub	lr, r2, #4096	; 0x1000
     928:	ldr	r2, [lr, #4088]	; 0xff8
     92c:	ldr	r2, [r2]
     930:	cmp	r2, #100	; 0x64
     934:	blt	954 <get_read_type+0x4c>
     938:	ldr	ip, [r0, #4]
     93c:	lsl	r2, ip, #4
     940:	add	r3, r0, r2
     944:	sub	lr, r3, #4096	; 0x1000
     948:	ldr	r0, [lr, #4088]	; 0xff8
     94c:	ldr	r0, [r0, #4]
     950:	b	968 <get_read_type+0x60>
     954:	ldr	ip, [r0, #4]
     958:	lsl	r2, ip, #4
     95c:	add	r2, r0, r2
     960:	sub	lr, r2, #4096	; 0x1000
     964:	ldr	r0, [lr, #4088]	; 0xff8
     968:	ldr	r3, [r0, #8]
     96c:	cmp	r3, #2
     970:	beq	988 <get_read_type+0x80>
     974:	ldr	r2, [r0, #8]
     978:	cmp	r2, #3
     97c:	moveq	r3, #1
     980:	movne	r3, #0
     984:	b	98c <get_read_type+0x84>
     988:	mov	r3, #1
     98c:	cmp	r3, #0
     990:	beq	9ac <get_read_type+0xa4>
     994:	ldr	ip, [pc, #96]	; 9fc <get_read_type+0xf4>
     998:	ldr	r2, [ip]
     99c:	cmp	r2, #0
     9a0:	movne	r3, #1
     9a4:	moveq	r3, #0
     9a8:	b	9b0 <get_read_type+0xa8>
     9ac:	mov	r3, #0
     9b0:	cmp	r3, #0
     9b4:	beq	9cc <get_read_type+0xc4>
     9b8:	ldr	r3, [r0, #48]	; 0x30
     9bc:	cmp	r3, #0
     9c0:	movne	r2, #1
     9c4:	moveq	r2, #0
     9c8:	b	9d0 <get_read_type+0xc8>
     9cc:	mov	r2, #0
     9d0:	cmp	r2, #0
     9d4:	bne	9e4 <get_read_type+0xdc>
     9d8:	ldr	ip, [r0, #12]
     9dc:	str	ip, [r1]
     9e0:	b	9ec <get_read_type+0xe4>
     9e4:	mov	r2, #9
     9e8:	str	r2, [r1]
     9ec:	mov	r0, #0
     9f0:	ldr	lr, [sp, #4]
     9f4:	add	sp, sp, #8
     9f8:	bx	lr
     9fc:	.word	0x00000000

00000a00 <get_unconverted_read_type>:
     a00:	mov	ip, sp
     a04:	sub	sp, sp, #8
     a08:	str	ip, [sp]
     a0c:	str	lr, [sp, #4]
     a10:	ldr	r3, [r0, #4]
     a14:	lsl	r3, r3, #4
     a18:	add	r3, r0, r3
     a1c:	sub	lr, r3, #4096	; 0x1000
     a20:	ldr	r3, [lr, #4088]	; 0xff8
     a24:	ldr	r3, [r3]
     a28:	cmp	r3, #100	; 0x64
     a2c:	blt	a4c <get_unconverted_read_type+0x4c>
     a30:	ldr	r3, [r0, #4]
     a34:	lsl	r3, r3, #4
     a38:	add	r3, r0, r3
     a3c:	sub	lr, r3, #4096	; 0x1000
     a40:	ldr	r3, [lr, #4088]	; 0xff8
     a44:	ldr	r0, [r3, #4]
     a48:	b	a60 <get_unconverted_read_type+0x60>
     a4c:	ldr	r3, [r0, #4]
     a50:	lsl	ip, r3, #4
     a54:	add	r3, r0, ip
     a58:	sub	lr, r3, #4096	; 0x1000
     a5c:	ldr	r0, [lr, #4088]	; 0xff8
     a60:	ldr	ip, [r0, #12]
     a64:	str	ip, [r1]
     a68:	ldr	r3, [r0, #8]
     a6c:	cmp	r3, #2
     a70:	beq	a88 <get_unconverted_read_type+0x88>
     a74:	ldr	r3, [r0, #8]
     a78:	cmp	r3, #3
     a7c:	moveq	ip, #1
     a80:	movne	ip, #0
     a84:	b	a8c <get_unconverted_read_type+0x8c>
     a88:	mov	ip, #1
     a8c:	cmp	ip, #0
     a90:	beq	aac <get_unconverted_read_type+0xac>
     a94:	ldr	r1, [pc, #64]	; adc <get_unconverted_read_type+0xdc>
     a98:	ldr	r3, [r1]
     a9c:	cmp	r3, #0
     aa0:	movne	ip, #1
     aa4:	moveq	ip, #0
     aa8:	b	ab0 <get_unconverted_read_type+0xb0>
     aac:	mov	ip, #0
     ab0:	cmp	ip, #0
     ab4:	bne	ac4 <get_unconverted_read_type+0xc4>
     ab8:	mov	r3, #0
     abc:	str	r3, [r2]
     ac0:	b	acc <get_unconverted_read_type+0xcc>
     ac4:	ldr	r3, [r0, #48]	; 0x30
     ac8:	str	r3, [r2]
     acc:	mov	r0, #0
     ad0:	ldr	lr, [sp, #4]
     ad4:	add	sp, sp, #8
     ad8:	bx	lr
     adc:	.word	0x00000000

00000ae0 <get_array_element_read_type>:
     ae0:	mov	ip, sp
     ae4:	sub	sp, sp, #8
     ae8:	str	ip, [sp]
     aec:	str	lr, [sp, #4]
     af0:	ldr	r3, [r0, #40]	; 0x28
     af4:	ldr	r0, [r3, #8]
     af8:	cmp	r0, #2
     afc:	beq	b14 <get_array_element_read_type+0x34>
     b00:	ldr	r2, [r3, #8]
     b04:	cmp	r2, #3
     b08:	moveq	r0, #1
     b0c:	movne	r0, #0
     b10:	b	b18 <get_array_element_read_type+0x38>
     b14:	mov	r0, #1
     b18:	cmp	r0, #0
     b1c:	beq	b38 <get_array_element_read_type+0x58>
     b20:	ldr	ip, [pc, #96]	; b88 <get_array_element_read_type+0xa8>
     b24:	ldr	r2, [ip]
     b28:	cmp	r2, #0
     b2c:	movne	r0, #1
     b30:	moveq	r0, #0
     b34:	b	b3c <get_array_element_read_type+0x5c>
     b38:	mov	r0, #0
     b3c:	cmp	r0, #0
     b40:	beq	b58 <get_array_element_read_type+0x78>
     b44:	ldr	ip, [r3, #48]	; 0x30
     b48:	cmp	ip, #0
     b4c:	movne	ip, #1
     b50:	moveq	ip, #0
     b54:	b	b5c <get_array_element_read_type+0x7c>
     b58:	mov	ip, #0
     b5c:	cmp	ip, #0
     b60:	bne	b70 <get_array_element_read_type+0x90>
     b64:	ldr	ip, [r3, #12]
     b68:	str	ip, [r1]
     b6c:	b	b78 <get_array_element_read_type+0x98>
     b70:	mov	r2, #9
     b74:	str	r2, [r1]
     b78:	mov	r0, #0
     b7c:	ldr	lr, [sp, #4]
     b80:	add	sp, sp, #8
     b84:	bx	lr
     b88:	.word	0x00000000

00000b8c <get_array_element_unconverted_read_type>:
     b8c:	mov	ip, sp
     b90:	sub	sp, sp, #8
     b94:	str	ip, [sp]
     b98:	str	lr, [sp, #4]
     b9c:	ldr	ip, [r0, #40]	; 0x28
     ba0:	ldr	r3, [ip, #12]
     ba4:	str	r3, [r1]
     ba8:	ldr	r0, [ip, #8]
     bac:	cmp	r0, #2
     bb0:	beq	bc8 <get_array_element_unconverted_read_type+0x3c>
     bb4:	ldr	r3, [ip, #8]
     bb8:	cmp	r3, #3
     bbc:	moveq	r1, #1
     bc0:	movne	r1, #0
     bc4:	b	bcc <get_array_element_unconverted_read_type+0x40>
     bc8:	mov	r1, #1
     bcc:	cmp	r1, #0
     bd0:	beq	bec <get_array_element_unconverted_read_type+0x60>
     bd4:	ldr	r3, [pc, #64]	; c1c <get_array_element_unconverted_read_type+0x90>
     bd8:	ldr	r0, [r3]
     bdc:	cmp	r0, #0
     be0:	movne	r0, #1
     be4:	moveq	r0, #0
     be8:	b	bf0 <get_array_element_unconverted_read_type+0x64>
     bec:	mov	r0, #0
     bf0:	cmp	r0, #0
     bf4:	bne	c04 <get_array_element_unconverted_read_type+0x78>
     bf8:	mov	r0, #0
     bfc:	str	r0, [r2]
     c00:	b	c0c <get_array_element_unconverted_read_type+0x80>
     c04:	ldr	r0, [ip, #48]	; 0x30
     c08:	str	r0, [r2]
     c0c:	mov	r0, #0
     c10:	ldr	lr, [sp, #4]
     c14:	add	sp, sp, #8
     c18:	bx	lr
     c1c:	.word	0x00000000

00000c20 <read_split_array>:
     c20:	mov	ip, sp
     c24:	sub	sp, sp, #656	; 0x290
     c28:	str	ip, [sp]
     c2c:	str	lr, [sp, #4]
     c30:	str	r4, [sp, #8]
     c34:	str	r5, [sp, #12]
     c38:	str	r6, [sp, #16]
     c3c:	str	r7, [sp, #20]
     c40:	str	r8, [sp, #24]
     c44:	str	r9, [sp, #28]
     c48:	str	sl, [sp, #32]
     c4c:	str	fp, [sp, #36]	; 0x24
     c50:	ldr	r7, [ip, #4]
     c54:	ldr	r9, [ip]
     c58:	mov	r8, r3
     c5c:	mov	r5, r2
     c60:	mov	r6, r1
     c64:	mov	r4, r0
     c68:	add	r1, sp, #40	; 0x28
     c6c:	add	r2, sp, #64	; 0x40
     c70:	mov	r0, r4
     c74:	bl	0 <coda_cursor_get_array_dim>
     c78:	cmp	r0, #0
     c7c:	beq	c88 <read_split_array+0x68>
     c80:	mvn	r0, #0
     c84:	b	f10 <read_split_array+0x2f0>
     c88:	mov	r2, r4
     c8c:	add	r3, sp, #136	; 0x88
     c90:	mov	lr, #130	; 0x82
     c94:	ldr	ip, [r2], #4
     c98:	subs	lr, lr, #1
     c9c:	str	ip, [r3], #4
     ca0:	bne	c94 <read_split_array+0x74>
     ca4:	ldr	r3, [sp, #40]	; 0x28
     ca8:	cmp	r3, #1
     cac:	ble	cc0 <read_split_array+0xa0>
     cb0:	cmp	r7, #1
     cb4:	movne	r2, #1
     cb8:	moveq	r2, #0
     cbc:	b	cc4 <read_split_array+0xa4>
     cc0:	mov	r2, #1
     cc4:	cmp	r2, #0
     cc8:	bne	e58 <read_split_array+0x238>
     ccc:	mov	r1, #1
     cd0:	str	r1, [sp, #96]	; 0x60
     cd4:	mov	r1, #0
     cd8:	ldr	r0, [sp, #40]	; 0x28
     cdc:	cmp	r1, r0
     ce0:	bge	d10 <read_split_array+0xf0>
     ce4:	add	ip, sp, #96	; 0x60
     ce8:	lsl	r3, r1, #2
     cec:	add	r2, ip, r3
     cf0:	add	ip, sp, #96	; 0x60
     cf4:	ldr	r3, [ip, r1, lsl #2]
     cf8:	add	ip, sp, #64	; 0x40
     cfc:	ldr	ip, [ip, r1, lsl #2]
     d00:	mul	r3, r3, ip
     d04:	str	r3, [r2, #4]
     d08:	add	r1, r1, #1
     d0c:	b	cd8 <read_split_array+0xb8>
     d10:	add	r0, sp, #96	; 0x60
     d14:	ldr	ip, [sp, #40]	; 0x28
     d18:	lsl	r2, ip, #2
     d1c:	add	r2, r0, r2
     d20:	sub	lr, r2, #4096	; 0x1000
     d24:	ldr	r4, [lr, #4092]	; 0xffc
     d28:	add	r2, sp, #96	; 0x60
     d2c:	ldr	r1, [sp, #40]	; 0x28
     d30:	ldr	fp, [r2, r1, lsl #2]
     d34:	cmp	fp, #0
     d38:	ble	f0c <read_split_array+0x2ec>
     d3c:	mov	sl, #0
     d40:	mov	r7, #0
     d44:	add	r0, sp, #136	; 0x88
     d48:	mov	r1, #0
     d4c:	bl	0 <coda_cursor_goto_array_element_by_index>
     d50:	cmp	r0, #0
     d54:	beq	d60 <read_split_array+0x140>
     d58:	mvn	r0, #0
     d5c:	b	f10 <read_split_array+0x2f0>
     d60:	add	r0, sp, #136	; 0x88
     d64:	add	r1, sp, #48	; 0x30
     d68:	blx	r6
     d6c:	mla	r0, r7, r9, r5
     d70:	add	r1, sp, #48	; 0x30
     d74:	mov	r2, r9
     d78:	bl	0 <memcpy>
     d7c:	mla	r0, r7, r9, r8
     d80:	add	r2, sp, #48	; 0x30
     d84:	add	r1, r2, r9
     d88:	mov	r2, r9
     d8c:	bl	0 <memcpy>
     d90:	add	sl, sl, #1
     d94:	cmp	sl, fp
     d98:	bge	db4 <read_split_array+0x194>
     d9c:	add	r0, sp, #136	; 0x88
     da0:	bl	0 <coda_cursor_goto_next_array_element>
     da4:	cmp	r0, #0
     da8:	beq	db4 <read_split_array+0x194>
     dac:	mvn	r0, #0
     db0:	b	f10 <read_split_array+0x2f0>
     db4:	add	r7, r7, r4
     db8:	cmp	r7, fp
     dbc:	blt	d60 <read_split_array+0x140>
     dc0:	cmp	sl, fp
     dc4:	beq	f0c <read_split_array+0x2ec>
     dc8:	add	r2, sp, #96	; 0x60
     dcc:	ldr	r1, [sp, #40]	; 0x28
     dd0:	lsl	r1, r1, #2
     dd4:	add	r3, r2, r1
     dd8:	sub	lr, r3, #4096	; 0x1000
     ddc:	ldr	r1, [lr, #4088]	; 0xff8
     de0:	add	r3, sp, #96	; 0x60
     de4:	ldr	r0, [sp, #40]	; 0x28
     de8:	ldr	r0, [r3, r0, lsl #2]
     dec:	sub	r1, r1, r0
     df0:	add	r7, r7, r1
     df4:	ldr	r3, [sp, #40]	; 0x28
     df8:	sub	r1, r3, #3
     dfc:	cmp	r1, #0
     e00:	blt	e24 <read_split_array+0x204>
     e04:	add	r0, sp, #96	; 0x60
     e08:	lsl	ip, r1, #2
     e0c:	add	r2, r0, ip
     e10:	ldr	r0, [r2, #8]
     e14:	cmp	r7, r0
     e18:	movge	r2, #1
     e1c:	movlt	r2, #0
     e20:	b	e28 <read_split_array+0x208>
     e24:	mov	r2, #0
     e28:	cmp	r2, #0
     e2c:	beq	d60 <read_split_array+0x140>
     e30:	add	ip, sp, #96	; 0x60
     e34:	ldr	r2, [ip, r1, lsl #2]
     e38:	add	r0, sp, #96	; 0x60
     e3c:	lsl	r3, r1, #2
     e40:	add	r3, r0, r3
     e44:	ldr	r0, [r3, #8]
     e48:	sub	r3, r2, r0
     e4c:	add	r7, r7, r3
     e50:	sub	r1, r1, #1
     e54:	b	dfc <read_split_array+0x1dc>
     e58:	mov	r4, #1
     e5c:	mov	r1, #0
     e60:	ldr	r2, [sp, #40]	; 0x28
     e64:	cmp	r1, r2
     e68:	bge	e80 <read_split_array+0x260>
     e6c:	add	r2, sp, #64	; 0x40
     e70:	ldr	r0, [r2, r1, lsl #2]
     e74:	mul	r4, r4, r0
     e78:	add	r1, r1, #1
     e7c:	b	e60 <read_split_array+0x240>
     e80:	cmp	r4, #0
     e84:	ble	f0c <read_split_array+0x2ec>
     e88:	add	r0, sp, #136	; 0x88
     e8c:	mov	r1, #0
     e90:	bl	0 <coda_cursor_goto_array_element_by_index>
     e94:	cmp	r0, #0
     e98:	beq	ea4 <read_split_array+0x284>
     e9c:	mvn	r0, #0
     ea0:	b	f10 <read_split_array+0x2f0>
     ea4:	mov	r7, #0
     ea8:	cmp	r7, r4
     eac:	bge	f0c <read_split_array+0x2ec>
     eb0:	add	r0, sp, #136	; 0x88
     eb4:	add	r1, sp, #48	; 0x30
     eb8:	blx	r6
     ebc:	mla	r0, r7, r9, r5
     ec0:	add	r1, sp, #48	; 0x30
     ec4:	mov	r2, r9
     ec8:	bl	0 <memcpy>
     ecc:	mla	r0, r7, r9, r8
     ed0:	add	r3, sp, #48	; 0x30
     ed4:	add	r1, r3, r9
     ed8:	mov	r2, r9
     edc:	bl	0 <memcpy>
     ee0:	sub	r0, r4, #1
     ee4:	cmp	r7, r0
     ee8:	bge	f04 <read_split_array+0x2e4>
     eec:	add	r0, sp, #136	; 0x88
     ef0:	bl	0 <coda_cursor_goto_next_array_element>
     ef4:	cmp	r0, #0
     ef8:	beq	f04 <read_split_array+0x2e4>
     efc:	mvn	r0, #0
     f00:	b	f10 <read_split_array+0x2f0>
     f04:	add	r7, r7, #1
     f08:	b	ea8 <read_split_array+0x288>
     f0c:	mov	r0, #0
     f10:	ldr	r4, [sp, #8]
     f14:	ldr	r5, [sp, #12]
     f18:	ldr	r6, [sp, #16]
     f1c:	ldr	r7, [sp, #20]
     f20:	ldr	r8, [sp, #24]
     f24:	ldr	r9, [sp, #28]
     f28:	ldr	sl, [sp, #32]
     f2c:	ldr	fp, [sp, #36]	; 0x24
     f30:	ldr	lr, [sp, #4]
     f34:	add	sp, sp, #656	; 0x290
     f38:	bx	lr

00000f3c <read_double_pair>:
     f3c:	mov	ip, sp
     f40:	sub	sp, sp, #536	; 0x218
     f44:	str	ip, [sp]
     f48:	str	lr, [sp, #4]
     f4c:	str	r4, [sp, #8]
     f50:	mov	r4, r1
     f54:	ldr	r2, [r0, #4]
     f58:	lsl	r3, r2, #4
     f5c:	add	r2, r0, r3
     f60:	sub	lr, r2, #4096	; 0x1000
     f64:	ldr	r1, [lr, #4088]	; 0xff8
     f68:	ldr	ip, [r1, #8]
     f6c:	cmp	ip, #6
     f70:	bne	f9c <read_double_pair+0x60>
     f74:	ldr	r2, [r0, #4]
     f78:	lsl	r3, r2, #4
     f7c:	add	r1, r0, r3
     f80:	sub	lr, r1, #4096	; 0x1000
     f84:	ldr	ip, [lr, #4088]	; 0xff8
     f88:	ldr	r3, [ip, #40]	; 0x28
     f8c:	cmp	r3, #3
     f90:	movne	ip, #1
     f94:	moveq	ip, #0
     f98:	b	fa0 <read_double_pair+0x64>
     f9c:	mov	ip, #1
     fa0:	cmp	ip, #0
     fa4:	beq	fbc <read_double_pair+0x80>
     fa8:	mvn	r0, #104	; 0x68
     fac:	ldr	r1, [pc, #188]	; 1070 <read_double_pair+0x134>
     fb0:	bl	0 <coda_set_error>
     fb4:	mvn	r0, #0
     fb8:	b	1060 <read_double_pair+0x124>
     fbc:	mov	r2, r0
     fc0:	add	r3, sp, #16
     fc4:	mov	lr, #130	; 0x82
     fc8:	ldr	ip, [r2], #4
     fcc:	subs	lr, lr, #1
     fd0:	str	ip, [r3], #4
     fd4:	bne	fc8 <read_double_pair+0x8c>
     fd8:	add	r0, sp, #16
     fdc:	bl	0 <coda_cursor_use_base_type_of_special_type>
     fe0:	cmp	r0, #0
     fe4:	beq	ff0 <read_double_pair+0xb4>
     fe8:	mvn	r0, #0
     fec:	b	1060 <read_double_pair+0x124>
     ff0:	add	r0, sp, #16
     ff4:	mov	r1, #0
     ff8:	bl	0 <coda_cursor_goto_record_field_by_index>
     ffc:	cmp	r0, #0
    1000:	beq	100c <read_double_pair+0xd0>
    1004:	mvn	r0, #0
    1008:	b	1060 <read_double_pair+0x124>
    100c:	add	r0, sp, #16
    1010:	mov	r1, r4
    1014:	bl	4c04 <coda_cursor_read_double>
    1018:	cmp	r0, #0
    101c:	beq	1028 <read_double_pair+0xec>
    1020:	mvn	r0, #0
    1024:	b	1060 <read_double_pair+0x124>
    1028:	add	r0, sp, #16
    102c:	bl	0 <coda_cursor_goto_next_record_field>
    1030:	cmp	r0, #0
    1034:	beq	1040 <read_double_pair+0x104>
    1038:	mvn	r0, #0
    103c:	b	1060 <read_double_pair+0x124>
    1040:	add	r0, sp, #16
    1044:	add	r1, r4, #8
    1048:	bl	4c04 <coda_cursor_read_double>
    104c:	cmp	r0, #0
    1050:	beq	105c <read_double_pair+0x120>
    1054:	mvn	r0, #0
    1058:	b	1060 <read_double_pair+0x124>
    105c:	mov	r0, #0
    1060:	ldr	r4, [sp, #8]
    1064:	ldr	lr, [sp, #4]
    1068:	add	sp, sp, #536	; 0x218
    106c:	bx	lr
    1070:	.word	0x00000000

00001074 <read_time>:
    1074:	mov	ip, sp
    1078:	sub	sp, sp, #536	; 0x218
    107c:	str	ip, [sp]
    1080:	str	lr, [sp, #4]
    1084:	str	r4, [sp, #8]
    1088:	str	r5, [sp, #12]
    108c:	mov	r5, r1
    1090:	mov	r2, r0
    1094:	add	r3, sp, #16
    1098:	mov	lr, #130	; 0x82
    109c:	ldr	ip, [r2], #4
    10a0:	subs	lr, lr, #1
    10a4:	str	ip, [r3], #4
    10a8:	bne	109c <read_time+0x28>
    10ac:	ldr	r3, [r0, #4]
    10b0:	lsl	r3, r3, #4
    10b4:	add	r1, r0, r3
    10b8:	sub	lr, r1, #4096	; 0x1000
    10bc:	ldr	r2, [lr, #4088]	; 0xff8
    10c0:	ldr	r1, [r2]
    10c4:	cmp	r1, #100	; 0x64
    10c8:	blt	10e8 <read_time+0x74>
    10cc:	ldr	r1, [r0, #4]
    10d0:	lsl	r1, r1, #4
    10d4:	add	r2, r0, r1
    10d8:	sub	lr, r2, #4096	; 0x1000
    10dc:	ldr	ip, [lr, #4088]	; 0xff8
    10e0:	ldr	r4, [ip, #4]
    10e4:	b	10fc <read_time+0x88>
    10e8:	ldr	r1, [r0, #4]
    10ec:	lsl	ip, r1, #4
    10f0:	add	r3, r0, ip
    10f4:	sub	lr, r3, #4096	; 0x1000
    10f8:	ldr	r4, [lr, #4088]	; 0xff8
    10fc:	add	r0, sp, #16
    1100:	bl	0 <coda_cursor_use_base_type_of_special_type>
    1104:	cmp	r0, #0
    1108:	beq	1114 <read_time+0xa0>
    110c:	mvn	r0, #0
    1110:	b	1124 <read_time+0xb0>
    1114:	ldr	r0, [r4, #52]	; 0x34
    1118:	add	r1, sp, #16
    111c:	mov	r2, r5
    1120:	bl	0 <coda_expression_eval_float>
    1124:	ldr	r4, [sp, #8]
    1128:	ldr	r5, [sp, #12]
    112c:	ldr	lr, [sp, #4]
    1130:	add	sp, sp, #536	; 0x218
    1134:	bx	lr

00001138 <read_vsf_integer>:
    1138:	mov	ip, sp
    113c:	sub	sp, sp, #552	; 0x228
    1140:	str	ip, [sp]
    1144:	str	lr, [sp, #4]
    1148:	str	r4, [sp, #8]
    114c:	mov	r4, r1
    1150:	mov	r2, r0
    1154:	add	r3, sp, #32
    1158:	mov	lr, #130	; 0x82
    115c:	ldr	ip, [r2], #4
    1160:	subs	lr, lr, #1
    1164:	str	ip, [r3], #4
    1168:	bne	115c <read_vsf_integer+0x24>
    116c:	add	r0, sp, #32
    1170:	bl	0 <coda_cursor_use_base_type_of_special_type>
    1174:	cmp	r0, #0
    1178:	beq	1184 <read_vsf_integer+0x4c>
    117c:	mvn	r0, #0
    1180:	b	120c <read_vsf_integer+0xd4>
    1184:	add	r0, sp, #32
    1188:	bl	0 <coda_cursor_goto_first_record_field>
    118c:	cmp	r0, #0
    1190:	beq	119c <read_vsf_integer+0x64>
    1194:	mvn	r0, #0
    1198:	b	120c <read_vsf_integer+0xd4>
    119c:	add	r0, sp, #32
    11a0:	add	r1, sp, #16
    11a4:	bl	4078 <coda_cursor_read_int32>
    11a8:	cmp	r0, #0
    11ac:	beq	11b8 <read_vsf_integer+0x80>
    11b0:	mvn	r0, #0
    11b4:	b	120c <read_vsf_integer+0xd4>
    11b8:	add	r0, sp, #32
    11bc:	bl	0 <coda_cursor_goto_next_record_field>
    11c0:	cmp	r0, #0
    11c4:	beq	11d0 <read_vsf_integer+0x98>
    11c8:	mvn	r0, #0
    11cc:	b	120c <read_vsf_integer+0xd4>
    11d0:	add	r0, sp, #32
    11d4:	add	r1, sp, #24
    11d8:	bl	4c04 <coda_cursor_read_double>
    11dc:	cmp	r0, #0
    11e0:	beq	11ec <read_vsf_integer+0xb4>
    11e4:	mvn	r0, #0
    11e8:	b	120c <read_vsf_integer+0xd4>
    11ec:	vmov.f64	d0, #36	; 0x41200000  10.0
    11f0:	ldr	r1, [sp, #16]
    11f4:	rsb	r0, r1, #0
    11f8:	bl	8a0 <ipow>
    11fc:	vldr	d5, [sp, #24]
    1200:	vmul.f64	d1, d5, d0
    1204:	vstr	d1, [r4]
    1208:	mov	r0, #0
    120c:	ldr	r4, [sp, #8]
    1210:	ldr	lr, [sp, #4]
    1214:	add	sp, sp, #552	; 0x228
    1218:	bx	lr

0000121c <read_int8>:
    121c:	mov	ip, sp
    1220:	sub	sp, sp, #16
    1224:	str	ip, [sp]
    1228:	str	lr, [sp, #4]
    122c:	str	r4, [sp, #8]
    1230:	ldr	r3, [r0, #4]
    1234:	lsl	r2, r3, #4
    1238:	add	r2, r0, r2
    123c:	sub	lr, r2, #4096	; 0x1000
    1240:	ldr	r2, [lr, #4088]	; 0xff8
    1244:	ldr	r2, [r2]
    1248:	cmp	r2, #102	; 0x66
    124c:	bcs	12a8 <read_int8+0x8c>
    1250:	cmp	r2, #100	; 0x64
    1254:	bcs	1280 <read_int8+0x64>
    1258:	cmp	r2, #0
    125c:	beq	1274 <read_int8+0x58>
    1260:	cmp	r2, #1
    1264:	bne	12e0 <read_int8+0xc4>
    1268:	bl	0 <coda_bin_cursor_read_int8>
    126c:	mov	r4, r0
    1270:	b	1308 <read_int8+0xec>
    1274:	bl	0 <coda_ascii_cursor_read_int8>
    1278:	mov	r4, r0
    127c:	b	1308 <read_int8+0xec>
    1280:	cmp	r2, #100	; 0x64
    1284:	bne	1294 <read_int8+0x78>
    1288:	bl	0 <coda_mem_cursor_read_int8>
    128c:	mov	r4, r0
    1290:	b	1308 <read_int8+0xec>
    1294:	mvn	r0, #10
    1298:	mov	r1, #0
    129c:	bl	0 <coda_set_error>
    12a0:	mvn	r4, #0
    12a4:	b	1308 <read_int8+0xec>
    12a8:	cmp	r2, #104	; 0x68
    12ac:	bcs	12d8 <read_int8+0xbc>
    12b0:	cmp	r2, #102	; 0x66
    12b4:	bne	12cc <read_int8+0xb0>
    12b8:	mvn	r0, #12
    12bc:	mov	r1, #0
    12c0:	bl	0 <coda_set_error>
    12c4:	mvn	r4, #0
    12c8:	b	1308 <read_int8+0xec>
    12cc:	bl	0 <coda_cdf_cursor_read_int8>
    12d0:	mov	r4, r0
    12d4:	b	1308 <read_int8+0xec>
    12d8:	cmp	r2, #104	; 0x68
    12dc:	beq	1300 <read_int8+0xe4>
    12e0:	ldr	r0, [pc, #60]	; 1324 <read_int8+0x108>
    12e4:	ldr	r1, [pc, #52]	; 1320 <read_int8+0x104>
    12e8:	movw	r2, #359	; 0x167
    12ec:	ldr	r3, [pc, #40]	; 131c <read_int8+0x100>
    12f0:	bl	0 <__assert_fail>
    12f4:	mov	r0, #1
    12f8:	bl	0 <exit>
    12fc:	b	1308 <read_int8+0xec>
    1300:	bl	0 <coda_netcdf_cursor_read_int8>
    1304:	mov	r4, r0
    1308:	mov	r0, r4
    130c:	ldr	r4, [sp, #8]
    1310:	ldr	lr, [sp, #4]
    1314:	add	sp, sp, #16
    1318:	bx	lr
    131c:	.word	0x0000059c
    1320:	.word	0x00000453
    1324:	.word	0x000004b3

00001328 <read_uint8>:
    1328:	mov	ip, sp
    132c:	sub	sp, sp, #16
    1330:	str	ip, [sp]
    1334:	str	lr, [sp, #4]
    1338:	str	r4, [sp, #8]
    133c:	ldr	r2, [r0, #4]
    1340:	lsl	r2, r2, #4
    1344:	add	ip, r0, r2
    1348:	sub	lr, ip, #4096	; 0x1000
    134c:	ldr	r2, [lr, #4088]	; 0xff8
    1350:	ldr	r3, [r2]
    1354:	cmp	r3, #102	; 0x66
    1358:	bcs	13b4 <read_uint8+0x8c>
    135c:	cmp	r3, #100	; 0x64
    1360:	bcs	138c <read_uint8+0x64>
    1364:	cmp	r3, #0
    1368:	beq	1380 <read_uint8+0x58>
    136c:	cmp	r3, #1
    1370:	bne	13e4 <read_uint8+0xbc>
    1374:	bl	0 <coda_bin_cursor_read_uint8>
    1378:	mov	r4, r0
    137c:	b	1400 <read_uint8+0xd8>
    1380:	bl	0 <coda_ascii_cursor_read_uint8>
    1384:	mov	r4, r0
    1388:	b	1400 <read_uint8+0xd8>
    138c:	cmp	r3, #100	; 0x64
    1390:	bne	13a0 <read_uint8+0x78>
    1394:	bl	0 <coda_mem_cursor_read_uint8>
    1398:	mov	r4, r0
    139c:	b	1400 <read_uint8+0xd8>
    13a0:	mvn	r0, #10
    13a4:	mov	r1, #0
    13a8:	bl	0 <coda_set_error>
    13ac:	mvn	r4, #0
    13b0:	b	1400 <read_uint8+0xd8>
    13b4:	cmp	r3, #104	; 0x68
    13b8:	bcs	13e4 <read_uint8+0xbc>
    13bc:	cmp	r3, #102	; 0x66
    13c0:	bne	13d8 <read_uint8+0xb0>
    13c4:	mvn	r0, #12
    13c8:	mov	r1, #0
    13cc:	bl	0 <coda_set_error>
    13d0:	mvn	r4, #0
    13d4:	b	1400 <read_uint8+0xd8>
    13d8:	bl	0 <coda_cdf_cursor_read_uint8>
    13dc:	mov	r4, r0
    13e0:	b	1400 <read_uint8+0xd8>
    13e4:	ldr	r0, [pc, #48]	; 141c <read_uint8+0xf4>
    13e8:	ldr	r1, [pc, #40]	; 1418 <read_uint8+0xf0>
    13ec:	movw	r2, #394	; 0x18a
    13f0:	ldr	r3, [pc, #28]	; 1414 <read_uint8+0xec>
    13f4:	bl	0 <__assert_fail>
    13f8:	mov	r0, #1
    13fc:	bl	0 <exit>
    1400:	mov	r0, r4
    1404:	ldr	r4, [sp, #8]
    1408:	ldr	lr, [sp, #4]
    140c:	add	sp, sp, #16
    1410:	bx	lr
    1414:	.word	0x000005a6
    1418:	.word	0x00000453
    141c:	.word	0x000004b3

00001420 <read_int16>:
    1420:	mov	ip, sp
    1424:	sub	sp, sp, #8
    1428:	str	ip, [sp]
    142c:	str	lr, [sp, #4]
    1430:	ldr	r2, [r0, #4]
    1434:	lsl	r2, r2, #4
    1438:	add	r2, r0, r2
    143c:	sub	lr, r2, #4096	; 0x1000
    1440:	ldr	ip, [lr, #4088]	; 0xff8
    1444:	ldr	ip, [ip]
    1448:	cmp	ip, #102	; 0x66
    144c:	bcs	149c <read_int16+0x7c>
    1450:	cmp	ip, #100	; 0x64
    1454:	bcs	1478 <read_int16+0x58>
    1458:	cmp	ip, #0
    145c:	beq	1470 <read_int16+0x50>
    1460:	cmp	ip, #1
    1464:	bne	14f4 <read_int16+0xd4>
    1468:	bl	0 <coda_bin_cursor_read_int16>
    146c:	b	1500 <read_int16+0xe0>
    1470:	bl	0 <coda_ascii_cursor_read_int16>
    1474:	b	1500 <read_int16+0xe0>
    1478:	cmp	ip, #100	; 0x64
    147c:	bne	1488 <read_int16+0x68>
    1480:	bl	0 <coda_mem_cursor_read_int16>
    1484:	b	1500 <read_int16+0xe0>
    1488:	mvn	r0, #10
    148c:	mov	r1, #0
    1490:	bl	0 <coda_set_error>
    1494:	mvn	r0, #0
    1498:	b	1500 <read_int16+0xe0>
    149c:	cmp	ip, #104	; 0x68
    14a0:	bcs	14c8 <read_int16+0xa8>
    14a4:	cmp	ip, #102	; 0x66
    14a8:	bne	14c0 <read_int16+0xa0>
    14ac:	mvn	r0, #12
    14b0:	mov	r1, #0
    14b4:	bl	0 <coda_set_error>
    14b8:	mvn	r0, #0
    14bc:	b	1500 <read_int16+0xe0>
    14c0:	bl	0 <coda_cdf_cursor_read_int16>
    14c4:	b	1500 <read_int16+0xe0>
    14c8:	cmp	ip, #104	; 0x68
    14cc:	beq	14fc <read_int16+0xdc>
    14d0:	cmp	ip, #105	; 0x69
    14d4:	bne	14f4 <read_int16+0xd4>
    14d8:	ldr	r0, [pc, #48]	; 1510 <read_int16+0xf0>
    14dc:	ldr	r1, [pc, #40]	; 150c <read_int16+0xec>
    14e0:	movw	r2, #427	; 0x1ab
    14e4:	ldr	r3, [pc, #40]	; 1514 <read_int16+0xf4>
    14e8:	bl	0 <__assert_fail>
    14ec:	mov	r0, #1
    14f0:	bl	0 <exit>
    14f4:	mov	r0, #0
    14f8:	b	1500 <read_int16+0xe0>
    14fc:	bl	0 <coda_netcdf_cursor_read_int16>
    1500:	ldr	lr, [sp, #4]
    1504:	add	sp, sp, #8
    1508:	bx	lr
    150c:	.word	0x00000453
    1510:	.word	0x000004b3
    1514:	.word	0x000005b1

00001518 <read_uint16>:
    1518:	mov	ip, sp
    151c:	sub	sp, sp, #16
    1520:	str	ip, [sp]
    1524:	str	lr, [sp, #4]
    1528:	str	r4, [sp, #8]
    152c:	ldr	r2, [r0, #4]
    1530:	lsl	r2, r2, #4
    1534:	add	ip, r0, r2
    1538:	sub	lr, ip, #4096	; 0x1000
    153c:	ldr	r2, [lr, #4088]	; 0xff8
    1540:	ldr	r3, [r2]
    1544:	cmp	r3, #102	; 0x66
    1548:	bcs	15a4 <read_uint16+0x8c>
    154c:	cmp	r3, #100	; 0x64
    1550:	bcs	157c <read_uint16+0x64>
    1554:	cmp	r3, #0
    1558:	beq	1570 <read_uint16+0x58>
    155c:	cmp	r3, #1
    1560:	bne	15d4 <read_uint16+0xbc>
    1564:	bl	0 <coda_bin_cursor_read_uint16>
    1568:	mov	r4, r0
    156c:	b	15f0 <read_uint16+0xd8>
    1570:	bl	0 <coda_ascii_cursor_read_uint16>
    1574:	mov	r4, r0
    1578:	b	15f0 <read_uint16+0xd8>
    157c:	cmp	r3, #100	; 0x64
    1580:	bne	1590 <read_uint16+0x78>
    1584:	bl	0 <coda_mem_cursor_read_uint16>
    1588:	mov	r4, r0
    158c:	b	15f0 <read_uint16+0xd8>
    1590:	mvn	r0, #10
    1594:	mov	r1, #0
    1598:	bl	0 <coda_set_error>
    159c:	mvn	r4, #0
    15a0:	b	15f0 <read_uint16+0xd8>
    15a4:	cmp	r3, #104	; 0x68
    15a8:	bcs	15d4 <read_uint16+0xbc>
    15ac:	cmp	r3, #102	; 0x66
    15b0:	bne	15c8 <read_uint16+0xb0>
    15b4:	mvn	r0, #12
    15b8:	mov	r1, #0
    15bc:	bl	0 <coda_set_error>
    15c0:	mvn	r4, #0
    15c4:	b	15f0 <read_uint16+0xd8>
    15c8:	bl	0 <coda_cdf_cursor_read_uint16>
    15cc:	mov	r4, r0
    15d0:	b	15f0 <read_uint16+0xd8>
    15d4:	ldr	r0, [pc, #48]	; 160c <read_uint16+0xf4>
    15d8:	ldr	r1, [pc, #40]	; 1608 <read_uint16+0xf0>
    15dc:	movw	r2, #465	; 0x1d1
    15e0:	ldr	r3, [pc, #28]	; 1604 <read_uint16+0xec>
    15e4:	bl	0 <__assert_fail>
    15e8:	mov	r0, #1
    15ec:	bl	0 <exit>
    15f0:	mov	r0, r4
    15f4:	ldr	r4, [sp, #8]
    15f8:	ldr	lr, [sp, #4]
    15fc:	add	sp, sp, #16
    1600:	bx	lr
    1604:	.word	0x000005bc
    1608:	.word	0x00000453
    160c:	.word	0x000004b3

00001610 <read_int32>:
    1610:	mov	ip, sp
    1614:	sub	sp, sp, #8
    1618:	str	ip, [sp]
    161c:	str	lr, [sp, #4]
    1620:	ldr	r2, [r0, #4]
    1624:	lsl	r2, r2, #4
    1628:	add	r2, r0, r2
    162c:	sub	lr, r2, #4096	; 0x1000
    1630:	ldr	ip, [lr, #4088]	; 0xff8
    1634:	ldr	ip, [ip]
    1638:	cmp	ip, #102	; 0x66
    163c:	bcs	168c <read_int32+0x7c>
    1640:	cmp	ip, #100	; 0x64
    1644:	bcs	1668 <read_int32+0x58>
    1648:	cmp	ip, #0
    164c:	beq	1660 <read_int32+0x50>
    1650:	cmp	ip, #1
    1654:	bne	16e4 <read_int32+0xd4>
    1658:	bl	0 <coda_bin_cursor_read_int32>
    165c:	b	16f0 <read_int32+0xe0>
    1660:	bl	0 <coda_ascii_cursor_read_int32>
    1664:	b	16f0 <read_int32+0xe0>
    1668:	cmp	ip, #100	; 0x64
    166c:	bne	1678 <read_int32+0x68>
    1670:	bl	0 <coda_mem_cursor_read_int32>
    1674:	b	16f0 <read_int32+0xe0>
    1678:	mvn	r0, #10
    167c:	mov	r1, #0
    1680:	bl	0 <coda_set_error>
    1684:	mvn	r0, #0
    1688:	b	16f0 <read_int32+0xe0>
    168c:	cmp	ip, #104	; 0x68
    1690:	bcs	16b8 <read_int32+0xa8>
    1694:	cmp	ip, #102	; 0x66
    1698:	bne	16b0 <read_int32+0xa0>
    169c:	mvn	r0, #12
    16a0:	mov	r1, #0
    16a4:	bl	0 <coda_set_error>
    16a8:	mvn	r0, #0
    16ac:	b	16f0 <read_int32+0xe0>
    16b0:	bl	0 <coda_cdf_cursor_read_int32>
    16b4:	b	16f0 <read_int32+0xe0>
    16b8:	cmp	ip, #104	; 0x68
    16bc:	beq	16ec <read_int32+0xdc>
    16c0:	cmp	ip, #105	; 0x69
    16c4:	bne	16e4 <read_int32+0xd4>
    16c8:	ldr	r0, [pc, #52]	; 1704 <read_int32+0xf4>
    16cc:	ldr	r1, [pc, #44]	; 1700 <read_int32+0xf0>
    16d0:	movw	r2, #499	; 0x1f3
    16d4:	ldr	r3, [pc, #32]	; 16fc <read_int32+0xec>
    16d8:	bl	0 <__assert_fail>
    16dc:	mov	r0, #1
    16e0:	bl	0 <exit>
    16e4:	mov	r0, #0
    16e8:	b	16f0 <read_int32+0xe0>
    16ec:	bl	0 <coda_netcdf_cursor_read_int32>
    16f0:	ldr	lr, [sp, #4]
    16f4:	add	sp, sp, #8
    16f8:	bx	lr
    16fc:	.word	0x000005c8
    1700:	.word	0x00000453
    1704:	.word	0x000004b3

00001708 <read_uint32>:
    1708:	mov	ip, sp
    170c:	sub	sp, sp, #16
    1710:	str	ip, [sp]
    1714:	str	lr, [sp, #4]
    1718:	str	r4, [sp, #8]
    171c:	ldr	r2, [r0, #4]
    1720:	lsl	r2, r2, #4
    1724:	add	ip, r0, r2
    1728:	sub	lr, ip, #4096	; 0x1000
    172c:	ldr	r2, [lr, #4088]	; 0xff8
    1730:	ldr	r3, [r2]
    1734:	cmp	r3, #102	; 0x66
    1738:	bcs	1794 <read_uint32+0x8c>
    173c:	cmp	r3, #100	; 0x64
    1740:	bcs	176c <read_uint32+0x64>
    1744:	cmp	r3, #0
    1748:	beq	1760 <read_uint32+0x58>
    174c:	cmp	r3, #1
    1750:	bne	17c4 <read_uint32+0xbc>
    1754:	bl	0 <coda_bin_cursor_read_uint32>
    1758:	mov	r4, r0
    175c:	b	17e0 <read_uint32+0xd8>
    1760:	bl	0 <coda_ascii_cursor_read_uint32>
    1764:	mov	r4, r0
    1768:	b	17e0 <read_uint32+0xd8>
    176c:	cmp	r3, #100	; 0x64
    1770:	bne	1780 <read_uint32+0x78>
    1774:	bl	0 <coda_mem_cursor_read_uint32>
    1778:	mov	r4, r0
    177c:	b	17e0 <read_uint32+0xd8>
    1780:	mvn	r0, #10
    1784:	mov	r1, #0
    1788:	bl	0 <coda_set_error>
    178c:	mvn	r4, #0
    1790:	b	17e0 <read_uint32+0xd8>
    1794:	cmp	r3, #104	; 0x68
    1798:	bcs	17c4 <read_uint32+0xbc>
    179c:	cmp	r3, #102	; 0x66
    17a0:	bne	17b8 <read_uint32+0xb0>
    17a4:	mvn	r0, #12
    17a8:	mov	r1, #0
    17ac:	bl	0 <coda_set_error>
    17b0:	mvn	r4, #0
    17b4:	b	17e0 <read_uint32+0xd8>
    17b8:	bl	0 <coda_cdf_cursor_read_uint32>
    17bc:	mov	r4, r0
    17c0:	b	17e0 <read_uint32+0xd8>
    17c4:	ldr	r0, [pc, #44]	; 17f8 <read_uint32+0xf0>
    17c8:	ldr	r1, [pc, #36]	; 17f4 <read_uint32+0xec>
    17cc:	movw	r2, #537	; 0x219
    17d0:	ldr	r3, [pc, #36]	; 17fc <read_uint32+0xf4>
    17d4:	bl	0 <__assert_fail>
    17d8:	mov	r0, #1
    17dc:	bl	0 <exit>
    17e0:	mov	r0, r4
    17e4:	ldr	r4, [sp, #8]
    17e8:	ldr	lr, [sp, #4]
    17ec:	add	sp, sp, #16
    17f0:	bx	lr
    17f4:	.word	0x00000453
    17f8:	.word	0x000004b3
    17fc:	.word	0x000005d3

00001800 <read_int64>:
    1800:	mov	ip, sp
    1804:	sub	sp, sp, #16
    1808:	str	ip, [sp]
    180c:	str	lr, [sp, #4]
    1810:	str	r4, [sp, #8]
    1814:	ldr	r2, [r0, #4]
    1818:	lsl	r2, r2, #4
    181c:	add	ip, r0, r2
    1820:	sub	lr, ip, #4096	; 0x1000
    1824:	ldr	r2, [lr, #4088]	; 0xff8
    1828:	ldr	r3, [r2]
    182c:	cmp	r3, #102	; 0x66
    1830:	bcs	188c <read_int64+0x8c>
    1834:	cmp	r3, #100	; 0x64
    1838:	bcs	1864 <read_int64+0x64>
    183c:	cmp	r3, #0
    1840:	beq	1858 <read_int64+0x58>
    1844:	cmp	r3, #1
    1848:	bne	18bc <read_int64+0xbc>
    184c:	bl	0 <coda_bin_cursor_read_int64>
    1850:	mov	r4, r0
    1854:	b	18d8 <read_int64+0xd8>
    1858:	bl	0 <coda_ascii_cursor_read_int64>
    185c:	mov	r4, r0
    1860:	b	18d8 <read_int64+0xd8>
    1864:	cmp	r3, #100	; 0x64
    1868:	bne	1878 <read_int64+0x78>
    186c:	bl	0 <coda_mem_cursor_read_int64>
    1870:	mov	r4, r0
    1874:	b	18d8 <read_int64+0xd8>
    1878:	mvn	r0, #10
    187c:	mov	r1, #0
    1880:	bl	0 <coda_set_error>
    1884:	mvn	r4, #0
    1888:	b	18d8 <read_int64+0xd8>
    188c:	cmp	r3, #104	; 0x68
    1890:	bcs	18bc <read_int64+0xbc>
    1894:	cmp	r3, #102	; 0x66
    1898:	bne	18b0 <read_int64+0xb0>
    189c:	mvn	r0, #12
    18a0:	mov	r1, #0
    18a4:	bl	0 <coda_set_error>
    18a8:	mvn	r4, #0
    18ac:	b	18d8 <read_int64+0xd8>
    18b0:	bl	0 <coda_cdf_cursor_read_int64>
    18b4:	mov	r4, r0
    18b8:	b	18d8 <read_int64+0xd8>
    18bc:	ldr	r0, [pc, #48]	; 18f4 <read_int64+0xf4>
    18c0:	ldr	r1, [pc, #36]	; 18ec <read_int64+0xec>
    18c4:	mov	r2, #572	; 0x23c
    18c8:	ldr	r3, [pc, #32]	; 18f0 <read_int64+0xf0>
    18cc:	bl	0 <__assert_fail>
    18d0:	mov	r0, #1
    18d4:	bl	0 <exit>
    18d8:	mov	r0, r4
    18dc:	ldr	r4, [sp, #8]
    18e0:	ldr	lr, [sp, #4]
    18e4:	add	sp, sp, #16
    18e8:	bx	lr
    18ec:	.word	0x00000453
    18f0:	.word	0x000005df
    18f4:	.word	0x000004b3

000018f8 <read_uint64>:
    18f8:	mov	ip, sp
    18fc:	sub	sp, sp, #16
    1900:	str	ip, [sp]
    1904:	str	lr, [sp, #4]
    1908:	str	r4, [sp, #8]
    190c:	ldr	r2, [r0, #4]
    1910:	lsl	r3, r2, #4
    1914:	add	r2, r0, r3
    1918:	sub	lr, r2, #4096	; 0x1000
    191c:	ldr	r2, [lr, #4088]	; 0xff8
    1920:	ldr	ip, [r2]
    1924:	cmp	ip, #102	; 0x66
    1928:	bcs	1984 <read_uint64+0x8c>
    192c:	cmp	ip, #100	; 0x64
    1930:	bcs	195c <read_uint64+0x64>
    1934:	cmp	ip, #0
    1938:	beq	1950 <read_uint64+0x58>
    193c:	cmp	ip, #1
    1940:	bne	19a8 <read_uint64+0xb0>
    1944:	bl	0 <coda_bin_cursor_read_uint64>
    1948:	mov	r4, r0
    194c:	b	19c4 <read_uint64+0xcc>
    1950:	bl	0 <coda_ascii_cursor_read_uint64>
    1954:	mov	r4, r0
    1958:	b	19c4 <read_uint64+0xcc>
    195c:	cmp	ip, #100	; 0x64
    1960:	bne	1970 <read_uint64+0x78>
    1964:	bl	0 <coda_mem_cursor_read_uint64>
    1968:	mov	r4, r0
    196c:	b	19c4 <read_uint64+0xcc>
    1970:	mvn	r0, #10
    1974:	mov	r1, #0
    1978:	bl	0 <coda_set_error>
    197c:	mvn	r4, #0
    1980:	b	19c4 <read_uint64+0xcc>
    1984:	cmp	ip, #104	; 0x68
    1988:	bcs	19a8 <read_uint64+0xb0>
    198c:	cmp	ip, #102	; 0x66
    1990:	bne	19a8 <read_uint64+0xb0>
    1994:	mvn	r0, #12
    1998:	mov	r1, #0
    199c:	bl	0 <coda_set_error>
    19a0:	mvn	r4, #0
    19a4:	b	19c4 <read_uint64+0xcc>
    19a8:	ldr	r0, [pc, #44]	; 19dc <read_uint64+0xe4>
    19ac:	ldr	r1, [pc, #36]	; 19d8 <read_uint64+0xe0>
    19b0:	movw	r2, #606	; 0x25e
    19b4:	ldr	r3, [pc, #36]	; 19e0 <read_uint64+0xe8>
    19b8:	bl	0 <__assert_fail>
    19bc:	mov	r0, #1
    19c0:	bl	0 <exit>
    19c4:	mov	r0, r4
    19c8:	ldr	r4, [sp, #8]
    19cc:	ldr	lr, [sp, #4]
    19d0:	add	sp, sp, #16
    19d4:	bx	lr
    19d8:	.word	0x00000453
    19dc:	.word	0x000004b3
    19e0:	.word	0x000005ea

000019e4 <read_float>:
    19e4:	mov	ip, sp
    19e8:	sub	sp, sp, #16
    19ec:	str	ip, [sp]
    19f0:	str	lr, [sp, #4]
    19f4:	str	r4, [sp, #8]
    19f8:	ldr	r2, [r0, #4]
    19fc:	lsl	r2, r2, #4
    1a00:	add	r2, r0, r2
    1a04:	sub	lr, r2, #4096	; 0x1000
    1a08:	ldr	r3, [lr, #4088]	; 0xff8
    1a0c:	ldr	r2, [r3]
    1a10:	cmp	r2, #102	; 0x66
    1a14:	bcs	1a70 <read_float+0x8c>
    1a18:	cmp	r2, #100	; 0x64
    1a1c:	bcs	1a48 <read_float+0x64>
    1a20:	cmp	r2, #0
    1a24:	beq	1a3c <read_float+0x58>
    1a28:	cmp	r2, #1
    1a2c:	bne	1abc <read_float+0xd8>
    1a30:	bl	0 <coda_bin_cursor_read_float>
    1a34:	mov	r4, r0
    1a38:	b	1ae4 <read_float+0x100>
    1a3c:	bl	0 <coda_ascii_cursor_read_float>
    1a40:	mov	r4, r0
    1a44:	b	1ae4 <read_float+0x100>
    1a48:	cmp	r2, #100	; 0x64
    1a4c:	bne	1a5c <read_float+0x78>
    1a50:	bl	0 <coda_mem_cursor_read_float>
    1a54:	mov	r4, r0
    1a58:	b	1ae4 <read_float+0x100>
    1a5c:	mvn	r0, #10
    1a60:	mov	r1, #0
    1a64:	bl	0 <coda_set_error>
    1a68:	mvn	r4, #0
    1a6c:	b	1ae4 <read_float+0x100>
    1a70:	cmp	r2, #104	; 0x68
    1a74:	bcs	1aa0 <read_float+0xbc>
    1a78:	cmp	r2, #102	; 0x66
    1a7c:	bne	1a94 <read_float+0xb0>
    1a80:	mvn	r0, #12
    1a84:	mov	r1, #0
    1a88:	bl	0 <coda_set_error>
    1a8c:	mvn	r4, #0
    1a90:	b	1ae4 <read_float+0x100>
    1a94:	bl	0 <coda_cdf_cursor_read_float>
    1a98:	mov	r4, r0
    1a9c:	b	1ae4 <read_float+0x100>
    1aa0:	cmp	r2, #104	; 0x68
    1aa4:	beq	1adc <read_float+0xf8>
    1aa8:	cmp	r2, #105	; 0x69
    1aac:	bne	1abc <read_float+0xd8>
    1ab0:	bl	0 <coda_grib_cursor_read_float>
    1ab4:	mov	r4, r0
    1ab8:	b	1ae4 <read_float+0x100>
    1abc:	ldr	r0, [pc, #60]	; 1b00 <read_float+0x11c>
    1ac0:	ldr	r1, [pc, #48]	; 1af8 <read_float+0x114>
    1ac4:	movw	r2, #642	; 0x282
    1ac8:	ldr	r3, [pc, #44]	; 1afc <read_float+0x118>
    1acc:	bl	0 <__assert_fail>
    1ad0:	mov	r0, #1
    1ad4:	bl	0 <exit>
    1ad8:	b	1ae4 <read_float+0x100>
    1adc:	bl	0 <coda_netcdf_cursor_read_float>
    1ae0:	mov	r4, r0
    1ae4:	mov	r0, r4
    1ae8:	ldr	r4, [sp, #8]
    1aec:	ldr	lr, [sp, #4]
    1af0:	add	sp, sp, #16
    1af4:	bx	lr
    1af8:	.word	0x00000453
    1afc:	.word	0x000005f6
    1b00:	.word	0x000004b3

00001b04 <read_double>:
    1b04:	mov	ip, sp
    1b08:	sub	sp, sp, #16
    1b0c:	str	ip, [sp]
    1b10:	str	lr, [sp, #4]
    1b14:	str	r4, [sp, #8]
    1b18:	ldr	r2, [r0, #4]
    1b1c:	lsl	r2, r2, #4
    1b20:	add	ip, r0, r2
    1b24:	sub	lr, ip, #4096	; 0x1000
    1b28:	ldr	r2, [lr, #4088]	; 0xff8
    1b2c:	ldr	r2, [r2]
    1b30:	cmp	r2, #100	; 0x64
    1b34:	blt	1b54 <read_double+0x50>
    1b38:	ldr	r3, [r0, #4]
    1b3c:	lsl	ip, r3, #4
    1b40:	add	r2, r0, ip
    1b44:	sub	lr, r2, #4096	; 0x1000
    1b48:	ldr	r2, [lr, #4088]	; 0xff8
    1b4c:	ldr	r2, [r2, #4]
    1b50:	b	1b68 <read_double+0x64>
    1b54:	ldr	r2, [r0, #4]
    1b58:	lsl	r2, r2, #4
    1b5c:	add	r2, r0, r2
    1b60:	sub	lr, r2, #4096	; 0x1000
    1b64:	ldr	r2, [lr, #4088]	; 0xff8
    1b68:	ldr	r3, [r2, #8]
    1b6c:	cmp	r3, #6
    1b70:	bne	1ba4 <read_double+0xa0>
    1b74:	ldr	ip, [r2, #40]	; 0x28
    1b78:	cmp	ip, #2
    1b7c:	bne	1b8c <read_double+0x88>
    1b80:	bl	1074 <read_time>
    1b84:	mov	r4, r0
    1b88:	b	1c7c <read_double+0x178>
    1b8c:	ldr	r3, [r2, #40]	; 0x28
    1b90:	cmp	r3, #1
    1b94:	bne	1ba4 <read_double+0xa0>
    1b98:	bl	1138 <read_vsf_integer>
    1b9c:	mov	r4, r0
    1ba0:	b	1c7c <read_double+0x178>
    1ba4:	ldr	ip, [r0, #4]
    1ba8:	lsl	r2, ip, #4
    1bac:	add	r2, r0, r2
    1bb0:	sub	lr, r2, #4096	; 0x1000
    1bb4:	ldr	r3, [lr, #4088]	; 0xff8
    1bb8:	ldr	ip, [r3]
    1bbc:	cmp	ip, #102	; 0x66
    1bc0:	bcs	1c1c <read_double+0x118>
    1bc4:	cmp	ip, #100	; 0x64
    1bc8:	bcs	1bf4 <read_double+0xf0>
    1bcc:	cmp	ip, #0
    1bd0:	beq	1be8 <read_double+0xe4>
    1bd4:	cmp	ip, #1
    1bd8:	bne	1c54 <read_double+0x150>
    1bdc:	bl	0 <coda_bin_cursor_read_double>
    1be0:	mov	r4, r0
    1be4:	b	1c7c <read_double+0x178>
    1be8:	bl	0 <coda_ascii_cursor_read_double>
    1bec:	mov	r4, r0
    1bf0:	b	1c7c <read_double+0x178>
    1bf4:	cmp	ip, #100	; 0x64
    1bf8:	bne	1c08 <read_double+0x104>
    1bfc:	bl	0 <coda_mem_cursor_read_double>
    1c00:	mov	r4, r0
    1c04:	b	1c7c <read_double+0x178>
    1c08:	mvn	r0, #10
    1c0c:	mov	r1, #0
    1c10:	bl	0 <coda_set_error>
    1c14:	mvn	r4, #0
    1c18:	b	1c7c <read_double+0x178>
    1c1c:	cmp	ip, #104	; 0x68
    1c20:	bcs	1c4c <read_double+0x148>
    1c24:	cmp	ip, #102	; 0x66
    1c28:	bne	1c40 <read_double+0x13c>
    1c2c:	mvn	r0, #12
    1c30:	mov	r1, #0
    1c34:	bl	0 <coda_set_error>
    1c38:	mvn	r4, #0
    1c3c:	b	1c7c <read_double+0x178>
    1c40:	bl	0 <coda_cdf_cursor_read_double>
    1c44:	mov	r4, r0
    1c48:	b	1c7c <read_double+0x178>
    1c4c:	cmp	ip, #104	; 0x68
    1c50:	beq	1c74 <read_double+0x170>
    1c54:	ldr	r0, [pc, #60]	; 1c98 <read_double+0x194>
    1c58:	ldr	r1, [pc, #52]	; 1c94 <read_double+0x190>
    1c5c:	mov	r2, #692	; 0x2b4
    1c60:	ldr	r3, [pc, #40]	; 1c90 <read_double+0x18c>
    1c64:	bl	0 <__assert_fail>
    1c68:	mov	r0, #1
    1c6c:	bl	0 <exit>
    1c70:	b	1c7c <read_double+0x178>
    1c74:	bl	0 <coda_netcdf_cursor_read_double>
    1c78:	mov	r4, r0
    1c7c:	mov	r0, r4
    1c80:	ldr	r4, [sp, #8]
    1c84:	ldr	lr, [sp, #4]
    1c88:	add	sp, sp, #16
    1c8c:	bx	lr
    1c90:	.word	0x00000601
    1c94:	.word	0x00000453
    1c98:	.word	0x000004b3

00001c9c <read_char>:
    1c9c:	mov	ip, sp
    1ca0:	sub	sp, sp, #16
    1ca4:	str	ip, [sp]
    1ca8:	str	lr, [sp, #4]
    1cac:	str	r4, [sp, #8]
    1cb0:	ldr	r3, [r0, #4]
    1cb4:	lsl	r2, r3, #4
    1cb8:	add	r2, r0, r2
    1cbc:	sub	lr, r2, #4096	; 0x1000
    1cc0:	ldr	r2, [lr, #4088]	; 0xff8
    1cc4:	ldr	ip, [r2]
    1cc8:	cmp	ip, #102	; 0x66
    1ccc:	bcs	1d28 <read_char+0x8c>
    1cd0:	cmp	ip, #100	; 0x64
    1cd4:	bcs	1d00 <read_char+0x64>
    1cd8:	cmp	ip, #0
    1cdc:	beq	1cf4 <read_char+0x58>
    1ce0:	cmp	ip, #1
    1ce4:	bne	1d4c <read_char+0xb0>
    1ce8:	bl	0 <coda_bin_cursor_read_char>
    1cec:	mov	r4, r0
    1cf0:	b	1d74 <read_char+0xd8>
    1cf4:	bl	0 <coda_ascii_cursor_read_char>
    1cf8:	mov	r4, r0
    1cfc:	b	1d74 <read_char+0xd8>
    1d00:	cmp	ip, #100	; 0x64
    1d04:	bne	1d14 <read_char+0x78>
    1d08:	bl	0 <coda_mem_cursor_read_char>
    1d0c:	mov	r4, r0
    1d10:	b	1d74 <read_char+0xd8>
    1d14:	mvn	r0, #10
    1d18:	mov	r1, #0
    1d1c:	bl	0 <coda_set_error>
    1d20:	mvn	r4, #0
    1d24:	b	1d74 <read_char+0xd8>
    1d28:	cmp	ip, #104	; 0x68
    1d2c:	bcs	1d44 <read_char+0xa8>
    1d30:	cmp	ip, #102	; 0x66
    1d34:	beq	1d4c <read_char+0xb0>
    1d38:	bl	0 <coda_cdf_cursor_read_char>
    1d3c:	mov	r4, r0
    1d40:	b	1d74 <read_char+0xd8>
    1d44:	cmp	ip, #104	; 0x68
    1d48:	beq	1d6c <read_char+0xd0>
    1d4c:	ldr	r0, [pc, #60]	; 1d90 <read_char+0xf4>
    1d50:	ldr	r1, [pc, #52]	; 1d8c <read_char+0xf0>
    1d54:	movw	r2, #722	; 0x2d2
    1d58:	ldr	r3, [pc, #40]	; 1d88 <read_char+0xec>
    1d5c:	bl	0 <__assert_fail>
    1d60:	mov	r0, #1
    1d64:	bl	0 <exit>
    1d68:	b	1d74 <read_char+0xd8>
    1d6c:	bl	0 <coda_netcdf_cursor_read_char>
    1d70:	mov	r4, r0
    1d74:	mov	r0, r4
    1d78:	ldr	r4, [sp, #8]
    1d7c:	ldr	lr, [sp, #4]
    1d80:	add	sp, sp, #16
    1d84:	bx	lr
    1d88:	.word	0x0000060d
    1d8c:	.word	0x00000453
    1d90:	.word	0x000004b3

00001d94 <read_string>:
    1d94:	mov	ip, sp
    1d98:	sub	sp, sp, #16
    1d9c:	str	ip, [sp]
    1da0:	str	lr, [sp, #4]
    1da4:	str	r4, [sp, #8]
    1da8:	ldr	r3, [r0, #4]
    1dac:	lsl	r3, r3, #4
    1db0:	add	r3, r0, r3
    1db4:	sub	lr, r3, #4096	; 0x1000
    1db8:	ldr	r3, [lr, #4088]	; 0xff8
    1dbc:	ldr	r3, [r3]
    1dc0:	cmp	r3, #102	; 0x66
    1dc4:	bcs	1e20 <read_string+0x8c>
    1dc8:	cmp	r3, #100	; 0x64
    1dcc:	bcs	1df8 <read_string+0x64>
    1dd0:	cmp	r3, #0
    1dd4:	beq	1dec <read_string+0x58>
    1dd8:	cmp	r3, #1
    1ddc:	bne	1e58 <read_string+0xc4>
    1de0:	bl	0 <coda_bin_cursor_read_string>
    1de4:	mov	r4, r0
    1de8:	b	1e80 <read_string+0xec>
    1dec:	bl	0 <coda_ascii_cursor_read_string>
    1df0:	mov	r4, r0
    1df4:	b	1e80 <read_string+0xec>
    1df8:	cmp	r3, #100	; 0x64
    1dfc:	bne	1e0c <read_string+0x78>
    1e00:	bl	0 <coda_mem_cursor_read_string>
    1e04:	mov	r4, r0
    1e08:	b	1e80 <read_string+0xec>
    1e0c:	mvn	r0, #10
    1e10:	mov	r1, #0
    1e14:	bl	0 <coda_set_error>
    1e18:	mvn	r4, #0
    1e1c:	b	1e80 <read_string+0xec>
    1e20:	cmp	r3, #104	; 0x68
    1e24:	bcs	1e50 <read_string+0xbc>
    1e28:	cmp	r3, #102	; 0x66
    1e2c:	bne	1e44 <read_string+0xb0>
    1e30:	mvn	r0, #12
    1e34:	mov	r1, #0
    1e38:	bl	0 <coda_set_error>
    1e3c:	mvn	r4, #0
    1e40:	b	1e80 <read_string+0xec>
    1e44:	bl	0 <coda_cdf_cursor_read_string>
    1e48:	mov	r4, r0
    1e4c:	b	1e80 <read_string+0xec>
    1e50:	cmp	r3, #104	; 0x68
    1e54:	beq	1e78 <read_string+0xe4>
    1e58:	ldr	r0, [pc, #60]	; 1e9c <read_string+0x108>
    1e5c:	ldr	r1, [pc, #52]	; 1e98 <read_string+0x104>
    1e60:	movw	r2, #758	; 0x2f6
    1e64:	ldr	r3, [pc, #40]	; 1e94 <read_string+0x100>
    1e68:	bl	0 <__assert_fail>
    1e6c:	mov	r0, #1
    1e70:	bl	0 <exit>
    1e74:	b	1e80 <read_string+0xec>
    1e78:	bl	0 <coda_netcdf_cursor_read_string>
    1e7c:	mov	r4, r0
    1e80:	mov	r0, r4
    1e84:	ldr	r4, [sp, #8]
    1e88:	ldr	lr, [sp, #4]
    1e8c:	add	sp, sp, #16
    1e90:	bx	lr
    1e94:	.word	0x00000617
    1e98:	.word	0x00000453
    1e9c:	.word	0x000004b3

00001ea0 <read_int8_array>:
    1ea0:	mov	ip, sp
    1ea4:	sub	sp, sp, #24
    1ea8:	str	ip, [sp]
    1eac:	str	lr, [sp, #4]
    1eb0:	str	r4, [sp, #8]
    1eb4:	str	r5, [sp, #12]
    1eb8:	str	r6, [sp, #16]
    1ebc:	mov	r4, r2
    1ec0:	mov	r5, r1
    1ec4:	mov	r6, r0
    1ec8:	ldr	r3, [r6, #4]
    1ecc:	lsl	r3, r3, #4
    1ed0:	add	ip, r6, r3
    1ed4:	sub	lr, ip, #4096	; 0x1000
    1ed8:	ldr	r1, [lr, #4088]	; 0xff8
    1edc:	ldr	r2, [r1]
    1ee0:	cmp	r2, #102	; 0x66
    1ee4:	bcs	1f58 <read_int8_array+0xb8>
    1ee8:	cmp	r2, #100	; 0x64
    1eec:	bcs	1f28 <read_int8_array+0x88>
    1ef0:	cmp	r2, #0
    1ef4:	beq	1f14 <read_int8_array+0x74>
    1ef8:	cmp	r2, #1
    1efc:	bne	1fe4 <read_int8_array+0x144>
    1f00:	mov	r2, r4
    1f04:	mov	r1, r5
    1f08:	mov	r0, r6
    1f0c:	bl	0 <coda_bin_cursor_read_int8_array>
    1f10:	b	2004 <read_int8_array+0x164>
    1f14:	mov	r2, r4
    1f18:	mov	r1, r5
    1f1c:	mov	r0, r6
    1f20:	bl	0 <coda_ascii_cursor_read_int8_array>
    1f24:	b	2004 <read_int8_array+0x164>
    1f28:	cmp	r2, #100	; 0x64
    1f2c:	bne	1f44 <read_int8_array+0xa4>
    1f30:	mov	r2, r4
    1f34:	mov	r1, r5
    1f38:	mov	r0, r6
    1f3c:	bl	0 <coda_mem_cursor_read_int8_array>
    1f40:	b	2004 <read_int8_array+0x164>
    1f44:	mvn	r0, #10
    1f48:	mov	r1, #0
    1f4c:	bl	0 <coda_set_error>
    1f50:	mvn	r0, #0
    1f54:	b	2004 <read_int8_array+0x164>
    1f58:	cmp	r2, #104	; 0x68
    1f5c:	bcs	1f98 <read_int8_array+0xf8>
    1f60:	cmp	r2, #102	; 0x66
    1f64:	bne	1f7c <read_int8_array+0xdc>
    1f68:	mvn	r0, #12
    1f6c:	mov	r1, #0
    1f70:	bl	0 <coda_set_error>
    1f74:	mvn	r0, #0
    1f78:	b	2004 <read_int8_array+0x164>
    1f7c:	mov	r1, r5
    1f80:	mov	r0, r6
    1f84:	bl	0 <coda_cdf_cursor_read_int8_array>
    1f88:	cmp	r0, #0
    1f8c:	beq	1fe4 <read_int8_array+0x144>
    1f90:	mvn	r0, #0
    1f94:	b	2004 <read_int8_array+0x164>
    1f98:	cmp	r2, #104	; 0x68
    1f9c:	beq	1fc8 <read_int8_array+0x128>
    1fa0:	cmp	r2, #105	; 0x69
    1fa4:	bne	1fe4 <read_int8_array+0x144>
    1fa8:	ldr	r0, [pc, #116]	; 2024 <read_int8_array+0x184>
    1fac:	ldr	r1, [pc, #108]	; 2020 <read_int8_array+0x180>
    1fb0:	movw	r2, #807	; 0x327
    1fb4:	ldr	r3, [pc, #96]	; 201c <read_int8_array+0x17c>
    1fb8:	bl	0 <__assert_fail>
    1fbc:	mov	r0, #1
    1fc0:	bl	0 <exit>
    1fc4:	b	1fe4 <read_int8_array+0x144>
    1fc8:	mov	r1, r5
    1fcc:	mov	r0, r6
    1fd0:	bl	0 <coda_netcdf_cursor_read_int8_array>
    1fd4:	cmp	r0, #0
    1fd8:	beq	1fe4 <read_int8_array+0x144>
    1fdc:	mvn	r0, #0
    1fe0:	b	2004 <read_int8_array+0x164>
    1fe4:	cmp	r4, #0
    1fe8:	beq	2000 <read_int8_array+0x160>
    1fec:	mov	r2, #1
    1ff0:	mov	r1, r5
    1ff4:	mov	r0, r6
    1ff8:	bl	3d4 <transpose_array>
    1ffc:	b	2004 <read_int8_array+0x164>
    2000:	mov	r0, #0
    2004:	ldr	r4, [sp, #8]
    2008:	ldr	r5, [sp, #12]
    200c:	ldr	r6, [sp, #16]
    2010:	ldr	lr, [sp, #4]
    2014:	add	sp, sp, #24
    2018:	bx	lr
    201c:	.word	0x00000623
    2020:	.word	0x00000453
    2024:	.word	0x000004b3

00002028 <read_uint8_array>:
    2028:	mov	ip, sp
    202c:	sub	sp, sp, #24
    2030:	str	ip, [sp]
    2034:	str	lr, [sp, #4]
    2038:	str	r4, [sp, #8]
    203c:	str	r5, [sp, #12]
    2040:	str	r6, [sp, #16]
    2044:	mov	r6, r2
    2048:	mov	r4, r1
    204c:	mov	r5, r0
    2050:	ldr	r0, [r5, #4]
    2054:	lsl	r3, r0, #4
    2058:	add	r1, r5, r3
    205c:	sub	lr, r1, #4096	; 0x1000
    2060:	ldr	r3, [lr, #4088]	; 0xff8
    2064:	ldr	ip, [r3]
    2068:	cmp	ip, #102	; 0x66
    206c:	bcs	20e0 <read_uint8_array+0xb8>
    2070:	cmp	ip, #100	; 0x64
    2074:	bcs	20b0 <read_uint8_array+0x88>
    2078:	cmp	ip, #0
    207c:	beq	209c <read_uint8_array+0x74>
    2080:	cmp	ip, #1
    2084:	bne	214c <read_uint8_array+0x124>
    2088:	mov	r2, r6
    208c:	mov	r1, r4
    2090:	mov	r0, r5
    2094:	bl	0 <coda_bin_cursor_read_uint8_array>
    2098:	b	216c <read_uint8_array+0x144>
    209c:	mov	r2, r6
    20a0:	mov	r1, r4
    20a4:	mov	r0, r5
    20a8:	bl	0 <coda_ascii_cursor_read_uint8_array>
    20ac:	b	216c <read_uint8_array+0x144>
    20b0:	cmp	ip, #100	; 0x64
    20b4:	bne	20cc <read_uint8_array+0xa4>
    20b8:	mov	r2, r6
    20bc:	mov	r1, r4
    20c0:	mov	r0, r5
    20c4:	bl	0 <coda_mem_cursor_read_uint8_array>
    20c8:	b	216c <read_uint8_array+0x144>
    20cc:	mvn	r0, #10
    20d0:	mov	r1, #0
    20d4:	bl	0 <coda_set_error>
    20d8:	mvn	r0, #0
    20dc:	b	216c <read_uint8_array+0x144>
    20e0:	cmp	ip, #104	; 0x68
    20e4:	bcs	2120 <read_uint8_array+0xf8>
    20e8:	cmp	ip, #102	; 0x66
    20ec:	bne	2104 <read_uint8_array+0xdc>
    20f0:	mvn	r0, #12
    20f4:	mov	r1, #0
    20f8:	bl	0 <coda_set_error>
    20fc:	mvn	r0, #0
    2100:	b	216c <read_uint8_array+0x144>
    2104:	mov	r1, r4
    2108:	mov	r0, r5
    210c:	bl	0 <coda_cdf_cursor_read_uint8_array>
    2110:	cmp	r0, #0
    2114:	beq	214c <read_uint8_array+0x124>
    2118:	mvn	r0, #0
    211c:	b	216c <read_uint8_array+0x144>
    2120:	cmp	ip, #104	; 0x68
    2124:	beq	2130 <read_uint8_array+0x108>
    2128:	cmp	ip, #105	; 0x69
    212c:	bne	214c <read_uint8_array+0x124>
    2130:	ldr	r0, [pc, #80]	; 2188 <read_uint8_array+0x160>
    2134:	ldr	r1, [pc, #72]	; 2184 <read_uint8_array+0x15c>
    2138:	movw	r2, #859	; 0x35b
    213c:	ldr	r3, [pc, #72]	; 218c <read_uint8_array+0x164>
    2140:	bl	0 <__assert_fail>
    2144:	mov	r0, #1
    2148:	bl	0 <exit>
    214c:	cmp	r6, #0
    2150:	beq	2168 <read_uint8_array+0x140>
    2154:	mov	r2, #1
    2158:	mov	r1, r4
    215c:	mov	r0, r5
    2160:	bl	3d4 <transpose_array>
    2164:	b	216c <read_uint8_array+0x144>
    2168:	mov	r0, #0
    216c:	ldr	r4, [sp, #8]
    2170:	ldr	r5, [sp, #12]
    2174:	ldr	r6, [sp, #16]
    2178:	ldr	lr, [sp, #4]
    217c:	add	sp, sp, #24
    2180:	bx	lr
    2184:	.word	0x00000453
    2188:	.word	0x000004b3
    218c:	.word	0x00000633

00002190 <read_int16_array>:
    2190:	mov	ip, sp
    2194:	sub	sp, sp, #24
    2198:	str	ip, [sp]
    219c:	str	lr, [sp, #4]
    21a0:	str	r4, [sp, #8]
    21a4:	str	r5, [sp, #12]
    21a8:	str	r6, [sp, #16]
    21ac:	mov	r4, r2
    21b0:	mov	r5, r1
    21b4:	mov	r6, r0
    21b8:	ldr	r3, [r6, #4]
    21bc:	lsl	r3, r3, #4
    21c0:	add	ip, r6, r3
    21c4:	sub	lr, ip, #4096	; 0x1000
    21c8:	ldr	r1, [lr, #4088]	; 0xff8
    21cc:	ldr	r2, [r1]
    21d0:	cmp	r2, #102	; 0x66
    21d4:	bcs	2248 <read_int16_array+0xb8>
    21d8:	cmp	r2, #100	; 0x64
    21dc:	bcs	2218 <read_int16_array+0x88>
    21e0:	cmp	r2, #0
    21e4:	beq	2204 <read_int16_array+0x74>
    21e8:	cmp	r2, #1
    21ec:	bne	22d4 <read_int16_array+0x144>
    21f0:	mov	r2, r4
    21f4:	mov	r1, r5
    21f8:	mov	r0, r6
    21fc:	bl	0 <coda_bin_cursor_read_int16_array>
    2200:	b	22f4 <read_int16_array+0x164>
    2204:	mov	r2, r4
    2208:	mov	r1, r5
    220c:	mov	r0, r6
    2210:	bl	0 <coda_ascii_cursor_read_int16_array>
    2214:	b	22f4 <read_int16_array+0x164>
    2218:	cmp	r2, #100	; 0x64
    221c:	bne	2234 <read_int16_array+0xa4>
    2220:	mov	r2, r4
    2224:	mov	r1, r5
    2228:	mov	r0, r6
    222c:	bl	0 <coda_mem_cursor_read_int16_array>
    2230:	b	22f4 <read_int16_array+0x164>
    2234:	mvn	r0, #10
    2238:	mov	r1, #0
    223c:	bl	0 <coda_set_error>
    2240:	mvn	r0, #0
    2244:	b	22f4 <read_int16_array+0x164>
    2248:	cmp	r2, #104	; 0x68
    224c:	bcs	2288 <read_int16_array+0xf8>
    2250:	cmp	r2, #102	; 0x66
    2254:	bne	226c <read_int16_array+0xdc>
    2258:	mvn	r0, #12
    225c:	mov	r1, #0
    2260:	bl	0 <coda_set_error>
    2264:	mvn	r0, #0
    2268:	b	22f4 <read_int16_array+0x164>
    226c:	mov	r1, r5
    2270:	mov	r0, r6
    2274:	bl	0 <coda_cdf_cursor_read_int16_array>
    2278:	cmp	r0, #0
    227c:	beq	22d4 <read_int16_array+0x144>
    2280:	mvn	r0, #0
    2284:	b	22f4 <read_int16_array+0x164>
    2288:	cmp	r2, #104	; 0x68
    228c:	beq	22b8 <read_int16_array+0x128>
    2290:	cmp	r2, #105	; 0x69
    2294:	bne	22d4 <read_int16_array+0x144>
    2298:	ldr	r0, [pc, #116]	; 2314 <read_int16_array+0x184>
    229c:	ldr	r1, [pc, #108]	; 2310 <read_int16_array+0x180>
    22a0:	mov	r2, #916	; 0x394
    22a4:	ldr	r3, [pc, #96]	; 230c <read_int16_array+0x17c>
    22a8:	bl	0 <__assert_fail>
    22ac:	mov	r0, #1
    22b0:	bl	0 <exit>
    22b4:	b	22d4 <read_int16_array+0x144>
    22b8:	mov	r1, r5
    22bc:	mov	r0, r6
    22c0:	bl	0 <coda_netcdf_cursor_read_int16_array>
    22c4:	cmp	r0, #0
    22c8:	beq	22d4 <read_int16_array+0x144>
    22cc:	mvn	r0, #0
    22d0:	b	22f4 <read_int16_array+0x164>
    22d4:	cmp	r4, #0
    22d8:	beq	22f0 <read_int16_array+0x160>
    22dc:	mov	r2, #2
    22e0:	mov	r1, r5
    22e4:	mov	r0, r6
    22e8:	bl	3d4 <transpose_array>
    22ec:	b	22f4 <read_int16_array+0x164>
    22f0:	mov	r0, #0
    22f4:	ldr	r4, [sp, #8]
    22f8:	ldr	r5, [sp, #12]
    22fc:	ldr	r6, [sp, #16]
    2300:	ldr	lr, [sp, #4]
    2304:	add	sp, sp, #24
    2308:	bx	lr
    230c:	.word	0x00000644
    2310:	.word	0x00000453
    2314:	.word	0x000004b3

00002318 <read_uint16_array>:
    2318:	mov	ip, sp
    231c:	sub	sp, sp, #24
    2320:	str	ip, [sp]
    2324:	str	lr, [sp, #4]
    2328:	str	r4, [sp, #8]
    232c:	str	r5, [sp, #12]
    2330:	str	r6, [sp, #16]
    2334:	mov	r6, r2
    2338:	mov	r4, r1
    233c:	mov	r5, r0
    2340:	ldr	r0, [r5, #4]
    2344:	lsl	r3, r0, #4
    2348:	add	r1, r5, r3
    234c:	sub	lr, r1, #4096	; 0x1000
    2350:	ldr	r3, [lr, #4088]	; 0xff8
    2354:	ldr	ip, [r3]
    2358:	cmp	ip, #102	; 0x66
    235c:	bcs	23d0 <read_uint16_array+0xb8>
    2360:	cmp	ip, #100	; 0x64
    2364:	bcs	23a0 <read_uint16_array+0x88>
    2368:	cmp	ip, #0
    236c:	beq	238c <read_uint16_array+0x74>
    2370:	cmp	ip, #1
    2374:	bne	243c <read_uint16_array+0x124>
    2378:	mov	r2, r6
    237c:	mov	r1, r4
    2380:	mov	r0, r5
    2384:	bl	0 <coda_bin_cursor_read_uint16_array>
    2388:	b	245c <read_uint16_array+0x144>
    238c:	mov	r2, r6
    2390:	mov	r1, r4
    2394:	mov	r0, r5
    2398:	bl	0 <coda_ascii_cursor_read_uint16_array>
    239c:	b	245c <read_uint16_array+0x144>
    23a0:	cmp	ip, #100	; 0x64
    23a4:	bne	23bc <read_uint16_array+0xa4>
    23a8:	mov	r2, r6
    23ac:	mov	r1, r4
    23b0:	mov	r0, r5
    23b4:	bl	0 <coda_mem_cursor_read_uint16_array>
    23b8:	b	245c <read_uint16_array+0x144>
    23bc:	mvn	r0, #10
    23c0:	mov	r1, #0
    23c4:	bl	0 <coda_set_error>
    23c8:	mvn	r0, #0
    23cc:	b	245c <read_uint16_array+0x144>
    23d0:	cmp	ip, #104	; 0x68
    23d4:	bcs	2410 <read_uint16_array+0xf8>
    23d8:	cmp	ip, #102	; 0x66
    23dc:	bne	23f4 <read_uint16_array+0xdc>
    23e0:	mvn	r0, #12
    23e4:	mov	r1, #0
    23e8:	bl	0 <coda_set_error>
    23ec:	mvn	r0, #0
    23f0:	b	245c <read_uint16_array+0x144>
    23f4:	mov	r1, r4
    23f8:	mov	r0, r5
    23fc:	bl	0 <coda_cdf_cursor_read_uint16_array>
    2400:	cmp	r0, #0
    2404:	beq	243c <read_uint16_array+0x124>
    2408:	mvn	r0, #0
    240c:	b	245c <read_uint16_array+0x144>
    2410:	cmp	ip, #104	; 0x68
    2414:	beq	2420 <read_uint16_array+0x108>
    2418:	cmp	ip, #105	; 0x69
    241c:	bne	243c <read_uint16_array+0x124>
    2420:	ldr	r0, [pc, #84]	; 247c <read_uint16_array+0x164>
    2424:	ldr	r1, [pc, #76]	; 2478 <read_uint16_array+0x160>
    2428:	mov	r2, #968	; 0x3c8
    242c:	ldr	r3, [pc, #64]	; 2474 <read_uint16_array+0x15c>
    2430:	bl	0 <__assert_fail>
    2434:	mov	r0, #1
    2438:	bl	0 <exit>
    243c:	cmp	r6, #0
    2440:	beq	2458 <read_uint16_array+0x140>
    2444:	mov	r2, #2
    2448:	mov	r1, r4
    244c:	mov	r0, r5
    2450:	bl	3d4 <transpose_array>
    2454:	b	245c <read_uint16_array+0x144>
    2458:	mov	r0, #0
    245c:	ldr	r4, [sp, #8]
    2460:	ldr	r5, [sp, #12]
    2464:	ldr	r6, [sp, #16]
    2468:	ldr	lr, [sp, #4]
    246c:	add	sp, sp, #24
    2470:	bx	lr
    2474:	.word	0x00000655
    2478:	.word	0x00000453
    247c:	.word	0x000004b3

00002480 <read_int32_array>:
    2480:	mov	ip, sp
    2484:	sub	sp, sp, #24
    2488:	str	ip, [sp]
    248c:	str	lr, [sp, #4]
    2490:	str	r4, [sp, #8]
    2494:	str	r5, [sp, #12]
    2498:	str	r6, [sp, #16]
    249c:	mov	r4, r2
    24a0:	mov	r5, r1
    24a4:	mov	r6, r0
    24a8:	ldr	r3, [r6, #4]
    24ac:	lsl	r3, r3, #4
    24b0:	add	ip, r6, r3
    24b4:	sub	lr, ip, #4096	; 0x1000
    24b8:	ldr	r1, [lr, #4088]	; 0xff8
    24bc:	ldr	r2, [r1]
    24c0:	cmp	r2, #102	; 0x66
    24c4:	bcs	2538 <read_int32_array+0xb8>
    24c8:	cmp	r2, #100	; 0x64
    24cc:	bcs	2508 <read_int32_array+0x88>
    24d0:	cmp	r2, #0
    24d4:	beq	24f4 <read_int32_array+0x74>
    24d8:	cmp	r2, #1
    24dc:	bne	25c4 <read_int32_array+0x144>
    24e0:	mov	r2, r4
    24e4:	mov	r1, r5
    24e8:	mov	r0, r6
    24ec:	bl	0 <coda_bin_cursor_read_int32_array>
    24f0:	b	25e4 <read_int32_array+0x164>
    24f4:	mov	r2, r4
    24f8:	mov	r1, r5
    24fc:	mov	r0, r6
    2500:	bl	0 <coda_ascii_cursor_read_int32_array>
    2504:	b	25e4 <read_int32_array+0x164>
    2508:	cmp	r2, #100	; 0x64
    250c:	bne	2524 <read_int32_array+0xa4>
    2510:	mov	r2, r4
    2514:	mov	r1, r5
    2518:	mov	r0, r6
    251c:	bl	0 <coda_mem_cursor_read_int32_array>
    2520:	b	25e4 <read_int32_array+0x164>
    2524:	mvn	r0, #10
    2528:	mov	r1, #0
    252c:	bl	0 <coda_set_error>
    2530:	mvn	r0, #0
    2534:	b	25e4 <read_int32_array+0x164>
    2538:	cmp	r2, #104	; 0x68
    253c:	bcs	2578 <read_int32_array+0xf8>
    2540:	cmp	r2, #102	; 0x66
    2544:	bne	255c <read_int32_array+0xdc>
    2548:	mvn	r0, #12
    254c:	mov	r1, #0
    2550:	bl	0 <coda_set_error>
    2554:	mvn	r0, #0
    2558:	b	25e4 <read_int32_array+0x164>
    255c:	mov	r1, r5
    2560:	mov	r0, r6
    2564:	bl	0 <coda_cdf_cursor_read_int32_array>
    2568:	cmp	r0, #0
    256c:	beq	25c4 <read_int32_array+0x144>
    2570:	mvn	r0, #0
    2574:	b	25e4 <read_int32_array+0x164>
    2578:	cmp	r2, #104	; 0x68
    257c:	beq	25a8 <read_int32_array+0x128>
    2580:	cmp	r2, #105	; 0x69
    2584:	bne	25c4 <read_int32_array+0x144>
    2588:	ldr	r0, [pc, #116]	; 2604 <read_int32_array+0x184>
    258c:	ldr	r1, [pc, #108]	; 2600 <read_int32_array+0x180>
    2590:	movw	r2, #1025	; 0x401
    2594:	ldr	r3, [pc, #96]	; 25fc <read_int32_array+0x17c>
    2598:	bl	0 <__assert_fail>
    259c:	mov	r0, #1
    25a0:	bl	0 <exit>
    25a4:	b	25c4 <read_int32_array+0x144>
    25a8:	mov	r1, r5
    25ac:	mov	r0, r6
    25b0:	bl	0 <coda_netcdf_cursor_read_int32_array>
    25b4:	cmp	r0, #0
    25b8:	beq	25c4 <read_int32_array+0x144>
    25bc:	mvn	r0, #0
    25c0:	b	25e4 <read_int32_array+0x164>
    25c4:	cmp	r4, #0
    25c8:	beq	25e0 <read_int32_array+0x160>
    25cc:	mov	r2, #4
    25d0:	mov	r1, r5
    25d4:	mov	r0, r6
    25d8:	bl	3d4 <transpose_array>
    25dc:	b	25e4 <read_int32_array+0x164>
    25e0:	mov	r0, #0
    25e4:	ldr	r4, [sp, #8]
    25e8:	ldr	r5, [sp, #12]
    25ec:	ldr	r6, [sp, #16]
    25f0:	ldr	lr, [sp, #4]
    25f4:	add	sp, sp, #24
    25f8:	bx	lr
    25fc:	.word	0x00000667
    2600:	.word	0x00000453
    2604:	.word	0x000004b3

00002608 <read_uint32_array>:
    2608:	mov	ip, sp
    260c:	sub	sp, sp, #24
    2610:	str	ip, [sp]
    2614:	str	lr, [sp, #4]
    2618:	str	r4, [sp, #8]
    261c:	str	r5, [sp, #12]
    2620:	str	r6, [sp, #16]
    2624:	mov	r6, r2
    2628:	mov	r4, r1
    262c:	mov	r5, r0
    2630:	ldr	r0, [r5, #4]
    2634:	lsl	r3, r0, #4
    2638:	add	r1, r5, r3
    263c:	sub	lr, r1, #4096	; 0x1000
    2640:	ldr	r3, [lr, #4088]	; 0xff8
    2644:	ldr	ip, [r3]
    2648:	cmp	ip, #102	; 0x66
    264c:	bcs	26c0 <read_uint32_array+0xb8>
    2650:	cmp	ip, #100	; 0x64
    2654:	bcs	2690 <read_uint32_array+0x88>
    2658:	cmp	ip, #0
    265c:	beq	267c <read_uint32_array+0x74>
    2660:	cmp	ip, #1
    2664:	bne	272c <read_uint32_array+0x124>
    2668:	mov	r2, r6
    266c:	mov	r1, r4
    2670:	mov	r0, r5
    2674:	bl	0 <coda_bin_cursor_read_uint32_array>
    2678:	b	274c <read_uint32_array+0x144>
    267c:	mov	r2, r6
    2680:	mov	r1, r4
    2684:	mov	r0, r5
    2688:	bl	0 <coda_ascii_cursor_read_uint32_array>
    268c:	b	274c <read_uint32_array+0x144>
    2690:	cmp	ip, #100	; 0x64
    2694:	bne	26ac <read_uint32_array+0xa4>
    2698:	mov	r2, r6
    269c:	mov	r1, r4
    26a0:	mov	r0, r5
    26a4:	bl	0 <coda_mem_cursor_read_uint32_array>
    26a8:	b	274c <read_uint32_array+0x144>
    26ac:	mvn	r0, #10
    26b0:	mov	r1, #0
    26b4:	bl	0 <coda_set_error>
    26b8:	mvn	r0, #0
    26bc:	b	274c <read_uint32_array+0x144>
    26c0:	cmp	ip, #104	; 0x68
    26c4:	bcs	2700 <read_uint32_array+0xf8>
    26c8:	cmp	ip, #102	; 0x66
    26cc:	bne	26e4 <read_uint32_array+0xdc>
    26d0:	mvn	r0, #12
    26d4:	mov	r1, #0
    26d8:	bl	0 <coda_set_error>
    26dc:	mvn	r0, #0
    26e0:	b	274c <read_uint32_array+0x144>
    26e4:	mov	r1, r4
    26e8:	mov	r0, r5
    26ec:	bl	0 <coda_cdf_cursor_read_uint32_array>
    26f0:	cmp	r0, #0
    26f4:	beq	272c <read_uint32_array+0x124>
    26f8:	mvn	r0, #0
    26fc:	b	274c <read_uint32_array+0x144>
    2700:	cmp	ip, #104	; 0x68
    2704:	beq	2710 <read_uint32_array+0x108>
    2708:	cmp	ip, #105	; 0x69
    270c:	bne	272c <read_uint32_array+0x124>
    2710:	ldr	r0, [pc, #80]	; 2768 <read_uint32_array+0x160>
    2714:	ldr	r1, [pc, #72]	; 2764 <read_uint32_array+0x15c>
    2718:	movw	r2, #1077	; 0x435
    271c:	ldr	r3, [pc, #72]	; 276c <read_uint32_array+0x164>
    2720:	bl	0 <__assert_fail>
    2724:	mov	r0, #1
    2728:	bl	0 <exit>
    272c:	cmp	r6, #0
    2730:	beq	2748 <read_uint32_array+0x140>
    2734:	mov	r2, #4
    2738:	mov	r1, r4
    273c:	mov	r0, r5
    2740:	bl	3d4 <transpose_array>
    2744:	b	274c <read_uint32_array+0x144>
    2748:	mov	r0, #0
    274c:	ldr	r4, [sp, #8]
    2750:	ldr	r5, [sp, #12]
    2754:	ldr	r6, [sp, #16]
    2758:	ldr	lr, [sp, #4]
    275c:	add	sp, sp, #24
    2760:	bx	lr
    2764:	.word	0x00000453
    2768:	.word	0x000004b3
    276c:	.word	0x00000678

00002770 <read_int64_array>:
    2770:	mov	ip, sp
    2774:	sub	sp, sp, #24
    2778:	str	ip, [sp]
    277c:	str	lr, [sp, #4]
    2780:	str	r4, [sp, #8]
    2784:	str	r5, [sp, #12]
    2788:	str	r6, [sp, #16]
    278c:	mov	r6, r2
    2790:	mov	r4, r1
    2794:	mov	r5, r0
    2798:	ldr	r0, [r5, #4]
    279c:	lsl	r3, r0, #4
    27a0:	add	r1, r5, r3
    27a4:	sub	lr, r1, #4096	; 0x1000
    27a8:	ldr	r3, [lr, #4088]	; 0xff8
    27ac:	ldr	ip, [r3]
    27b0:	cmp	ip, #102	; 0x66
    27b4:	bcs	2828 <read_int64_array+0xb8>
    27b8:	cmp	ip, #100	; 0x64
    27bc:	bcs	27f8 <read_int64_array+0x88>
    27c0:	cmp	ip, #0
    27c4:	beq	27e4 <read_int64_array+0x74>
    27c8:	cmp	ip, #1
    27cc:	bne	2894 <read_int64_array+0x124>
    27d0:	mov	r2, r6
    27d4:	mov	r1, r4
    27d8:	mov	r0, r5
    27dc:	bl	0 <coda_bin_cursor_read_int64_array>
    27e0:	b	28b4 <read_int64_array+0x144>
    27e4:	mov	r2, r6
    27e8:	mov	r1, r4
    27ec:	mov	r0, r5
    27f0:	bl	0 <coda_ascii_cursor_read_int64_array>
    27f4:	b	28b4 <read_int64_array+0x144>
    27f8:	cmp	ip, #100	; 0x64
    27fc:	bne	2814 <read_int64_array+0xa4>
    2800:	mov	r2, r6
    2804:	mov	r1, r4
    2808:	mov	r0, r5
    280c:	bl	0 <coda_mem_cursor_read_int64_array>
    2810:	b	28b4 <read_int64_array+0x144>
    2814:	mvn	r0, #10
    2818:	mov	r1, #0
    281c:	bl	0 <coda_set_error>
    2820:	mvn	r0, #0
    2824:	b	28b4 <read_int64_array+0x144>
    2828:	cmp	ip, #104	; 0x68
    282c:	bcs	2868 <read_int64_array+0xf8>
    2830:	cmp	ip, #102	; 0x66
    2834:	bne	284c <read_int64_array+0xdc>
    2838:	mvn	r0, #12
    283c:	mov	r1, #0
    2840:	bl	0 <coda_set_error>
    2844:	mvn	r0, #0
    2848:	b	28b4 <read_int64_array+0x144>
    284c:	mov	r1, r4
    2850:	mov	r0, r5
    2854:	bl	0 <coda_cdf_cursor_read_int64_array>
    2858:	cmp	r0, #0
    285c:	beq	2894 <read_int64_array+0x124>
    2860:	mvn	r0, #0
    2864:	b	28b4 <read_int64_array+0x144>
    2868:	cmp	ip, #104	; 0x68
    286c:	beq	2878 <read_int64_array+0x108>
    2870:	cmp	ip, #105	; 0x69
    2874:	bne	2894 <read_int64_array+0x124>
    2878:	ldr	r0, [pc, #84]	; 28d4 <read_int64_array+0x164>
    287c:	ldr	r1, [pc, #76]	; 28d0 <read_int64_array+0x160>
    2880:	movw	r2, #1129	; 0x469
    2884:	ldr	r3, [pc, #64]	; 28cc <read_int64_array+0x15c>
    2888:	bl	0 <__assert_fail>
    288c:	mov	r0, #1
    2890:	bl	0 <exit>
    2894:	cmp	r6, #0
    2898:	beq	28b0 <read_int64_array+0x140>
    289c:	mov	r2, #8
    28a0:	mov	r1, r4
    28a4:	mov	r0, r5
    28a8:	bl	3d4 <transpose_array>
    28ac:	b	28b4 <read_int64_array+0x144>
    28b0:	mov	r0, #0
    28b4:	ldr	r4, [sp, #8]
    28b8:	ldr	r5, [sp, #12]
    28bc:	ldr	r6, [sp, #16]
    28c0:	ldr	lr, [sp, #4]
    28c4:	add	sp, sp, #24
    28c8:	bx	lr
    28cc:	.word	0x0000068a
    28d0:	.word	0x00000453
    28d4:	.word	0x000004b3

000028d8 <read_uint64_array>:
    28d8:	mov	ip, sp
    28dc:	sub	sp, sp, #24
    28e0:	str	ip, [sp]
    28e4:	str	lr, [sp, #4]
    28e8:	str	r4, [sp, #8]
    28ec:	str	r5, [sp, #12]
    28f0:	str	r6, [sp, #16]
    28f4:	mov	r4, r2
    28f8:	mov	r5, r1
    28fc:	mov	r6, r0
    2900:	ldr	ip, [r6, #4]
    2904:	lsl	r0, ip, #4
    2908:	add	r2, r6, r0
    290c:	sub	lr, r2, #4096	; 0x1000
    2910:	ldr	r1, [lr, #4088]	; 0xff8
    2914:	ldr	r3, [r1]
    2918:	cmp	r3, #102	; 0x66
    291c:	bcs	2990 <read_uint64_array+0xb8>
    2920:	cmp	r3, #100	; 0x64
    2924:	bcs	2960 <read_uint64_array+0x88>
    2928:	cmp	r3, #0
    292c:	beq	294c <read_uint64_array+0x74>
    2930:	cmp	r3, #1
    2934:	bne	29e0 <read_uint64_array+0x108>
    2938:	mov	r2, r4
    293c:	mov	r1, r5
    2940:	mov	r0, r6
    2944:	bl	0 <coda_bin_cursor_read_uint64_array>
    2948:	b	2a00 <read_uint64_array+0x128>
    294c:	mov	r2, r4
    2950:	mov	r1, r5
    2954:	mov	r0, r6
    2958:	bl	0 <coda_ascii_cursor_read_uint64_array>
    295c:	b	2a00 <read_uint64_array+0x128>
    2960:	cmp	r3, #100	; 0x64
    2964:	bne	297c <read_uint64_array+0xa4>
    2968:	mov	r2, r4
    296c:	mov	r1, r5
    2970:	mov	r0, r6
    2974:	bl	0 <coda_mem_cursor_read_uint64_array>
    2978:	b	2a00 <read_uint64_array+0x128>
    297c:	mvn	r0, #10
    2980:	mov	r1, #0
    2984:	bl	0 <coda_set_error>
    2988:	mvn	r0, #0
    298c:	b	2a00 <read_uint64_array+0x128>
    2990:	cmp	r3, #104	; 0x68
    2994:	bcs	29b4 <read_uint64_array+0xdc>
    2998:	cmp	r3, #102	; 0x66
    299c:	bne	29c4 <read_uint64_array+0xec>
    29a0:	mvn	r0, #12
    29a4:	mov	r1, #0
    29a8:	bl	0 <coda_set_error>
    29ac:	mvn	r0, #0
    29b0:	b	2a00 <read_uint64_array+0x128>
    29b4:	cmp	r3, #104	; 0x68
    29b8:	beq	29c4 <read_uint64_array+0xec>
    29bc:	cmp	r3, #105	; 0x69
    29c0:	bne	29e0 <read_uint64_array+0x108>
    29c4:	ldr	r0, [pc, #84]	; 2a20 <read_uint64_array+0x148>
    29c8:	ldr	r1, [pc, #76]	; 2a1c <read_uint64_array+0x144>
    29cc:	movw	r2, #1176	; 0x498
    29d0:	ldr	r3, [pc, #64]	; 2a18 <read_uint64_array+0x140>
    29d4:	bl	0 <__assert_fail>
    29d8:	mov	r0, #1
    29dc:	bl	0 <exit>
    29e0:	cmp	r4, #0
    29e4:	beq	29fc <read_uint64_array+0x124>
    29e8:	mov	r2, #8
    29ec:	mov	r1, r5
    29f0:	mov	r0, r6
    29f4:	bl	3d4 <transpose_array>
    29f8:	b	2a00 <read_uint64_array+0x128>
    29fc:	mov	r0, #0
    2a00:	ldr	r4, [sp, #8]
    2a04:	ldr	r5, [sp, #12]
    2a08:	ldr	r6, [sp, #16]
    2a0c:	ldr	lr, [sp, #4]
    2a10:	add	sp, sp, #24
    2a14:	bx	lr
    2a18:	.word	0x0000069b
    2a1c:	.word	0x00000453
    2a20:	.word	0x000004b3

00002a24 <read_float_array>:
    2a24:	mov	ip, sp
    2a28:	sub	sp, sp, #24
    2a2c:	str	ip, [sp]
    2a30:	str	lr, [sp, #4]
    2a34:	str	r4, [sp, #8]
    2a38:	str	r5, [sp, #12]
    2a3c:	str	r6, [sp, #16]
    2a40:	mov	r4, r2
    2a44:	mov	r5, r1
    2a48:	mov	r6, r0
    2a4c:	ldr	r1, [r6, #4]
    2a50:	lsl	r1, r1, #4
    2a54:	add	r2, r6, r1
    2a58:	sub	lr, r2, #4096	; 0x1000
    2a5c:	ldr	r3, [lr, #4088]	; 0xff8
    2a60:	ldr	r1, [r3]
    2a64:	cmp	r1, #102	; 0x66
    2a68:	bcs	2adc <read_float_array+0xb8>
    2a6c:	cmp	r1, #100	; 0x64
    2a70:	bcs	2aac <read_float_array+0x88>
    2a74:	cmp	r1, #0
    2a78:	beq	2a98 <read_float_array+0x74>
    2a7c:	cmp	r1, #1
    2a80:	bne	2b64 <read_float_array+0x140>
    2a84:	mov	r2, r4
    2a88:	mov	r1, r5
    2a8c:	mov	r0, r6
    2a90:	bl	0 <coda_bin_cursor_read_float_array>
    2a94:	b	2b84 <read_float_array+0x160>
    2a98:	mov	r2, r4
    2a9c:	mov	r1, r5
    2aa0:	mov	r0, r6
    2aa4:	bl	0 <coda_ascii_cursor_read_float_array>
    2aa8:	b	2b84 <read_float_array+0x160>
    2aac:	cmp	r1, #100	; 0x64
    2ab0:	bne	2ac8 <read_float_array+0xa4>
    2ab4:	mov	r2, r4
    2ab8:	mov	r1, r5
    2abc:	mov	r0, r6
    2ac0:	bl	0 <coda_mem_cursor_read_float_array>
    2ac4:	b	2b84 <read_float_array+0x160>
    2ac8:	mvn	r0, #10
    2acc:	mov	r1, #0
    2ad0:	bl	0 <coda_set_error>
    2ad4:	mvn	r0, #0
    2ad8:	b	2b84 <read_float_array+0x160>
    2adc:	cmp	r1, #104	; 0x68
    2ae0:	bcs	2b1c <read_float_array+0xf8>
    2ae4:	cmp	r1, #102	; 0x66
    2ae8:	bne	2b00 <read_float_array+0xdc>
    2aec:	mvn	r0, #12
    2af0:	mov	r1, #0
    2af4:	bl	0 <coda_set_error>
    2af8:	mvn	r0, #0
    2afc:	b	2b84 <read_float_array+0x160>
    2b00:	mov	r1, r5
    2b04:	mov	r0, r6
    2b08:	bl	0 <coda_cdf_cursor_read_float_array>
    2b0c:	cmp	r0, #0
    2b10:	beq	2b64 <read_float_array+0x140>
    2b14:	mvn	r0, #0
    2b18:	b	2b84 <read_float_array+0x160>
    2b1c:	cmp	r1, #104	; 0x68
    2b20:	beq	2b48 <read_float_array+0x124>
    2b24:	cmp	r1, #105	; 0x69
    2b28:	bne	2b64 <read_float_array+0x140>
    2b2c:	mov	r1, r5
    2b30:	mov	r0, r6
    2b34:	bl	0 <coda_grib_cursor_read_float_array>
    2b38:	cmp	r0, #0
    2b3c:	beq	2b64 <read_float_array+0x140>
    2b40:	mvn	r0, #0
    2b44:	b	2b84 <read_float_array+0x160>
    2b48:	mov	r1, r5
    2b4c:	mov	r0, r6
    2b50:	bl	0 <coda_netcdf_cursor_read_float_array>
    2b54:	cmp	r0, #0
    2b58:	beq	2b64 <read_float_array+0x140>
    2b5c:	mvn	r0, #0
    2b60:	b	2b84 <read_float_array+0x160>
    2b64:	cmp	r4, #0
    2b68:	beq	2b80 <read_float_array+0x15c>
    2b6c:	mov	r2, #4
    2b70:	mov	r1, r5
    2b74:	mov	r0, r6
    2b78:	bl	3d4 <transpose_array>
    2b7c:	b	2b84 <read_float_array+0x160>
    2b80:	mov	r0, #0
    2b84:	ldr	r4, [sp, #8]
    2b88:	ldr	r5, [sp, #12]
    2b8c:	ldr	r6, [sp, #16]
    2b90:	ldr	lr, [sp, #4]
    2b94:	add	sp, sp, #24
    2b98:	bx	lr

00002b9c <read_double_array>:
    2b9c:	mov	ip, sp
    2ba0:	sub	sp, sp, #32
    2ba4:	str	ip, [sp, #4]
    2ba8:	str	lr, [sp, #8]
    2bac:	str	r4, [sp, #16]
    2bb0:	str	r5, [sp, #20]
    2bb4:	str	r6, [sp, #24]
    2bb8:	mov	r6, r2
    2bbc:	mov	r4, r1
    2bc0:	mov	r5, r0
    2bc4:	ldr	r0, [r5, #4]
    2bc8:	lsl	r1, r0, #4
    2bcc:	add	r3, r5, r1
    2bd0:	sub	lr, r3, #4096	; 0x1000
    2bd4:	ldr	r0, [lr, #4088]	; 0xff8
    2bd8:	ldr	r1, [r0]
    2bdc:	cmp	r1, #100	; 0x64
    2be0:	blt	2c00 <read_double_array+0x64>
    2be4:	ldr	r0, [r5, #4]
    2be8:	lsl	r0, r0, #4
    2bec:	add	r1, r5, r0
    2bf0:	sub	lr, r1, #4096	; 0x1000
    2bf4:	ldr	r3, [lr, #4088]	; 0xff8
    2bf8:	ldr	r0, [r3, #4]
    2bfc:	b	2c14 <read_double_array+0x78>
    2c00:	ldr	r1, [r5, #4]
    2c04:	lsl	r0, r1, #4
    2c08:	add	r2, r5, r0
    2c0c:	sub	lr, r2, #4096	; 0x1000
    2c10:	ldr	r0, [lr, #4088]	; 0xff8
    2c14:	ldr	ip, [r0, #40]	; 0x28
    2c18:	ldr	r3, [ip, #8]
    2c1c:	cmp	r3, #6
    2c20:	bne	2c40 <read_double_array+0xa4>
    2c24:	ldr	r1, [pc, #368]	; 2d9c <read_double_array+0x200>
    2c28:	mov	r3, #8
    2c2c:	str	r6, [sp]
    2c30:	mov	r2, r4
    2c34:	mov	r0, r5
    2c38:	bl	0 <read_array>
    2c3c:	b	2d7c <read_double_array+0x1e0>
    2c40:	ldr	ip, [r5, #4]
    2c44:	lsl	r3, ip, #4
    2c48:	add	ip, r5, r3
    2c4c:	sub	lr, ip, #4096	; 0x1000
    2c50:	ldr	r2, [lr, #4088]	; 0xff8
    2c54:	ldr	r2, [r2]
    2c58:	cmp	r2, #102	; 0x66
    2c5c:	bcs	2cd0 <read_double_array+0x134>
    2c60:	cmp	r2, #100	; 0x64
    2c64:	bcs	2ca0 <read_double_array+0x104>
    2c68:	cmp	r2, #0
    2c6c:	beq	2c8c <read_double_array+0xf0>
    2c70:	cmp	r2, #1
    2c74:	bne	2d5c <read_double_array+0x1c0>
    2c78:	mov	r2, r6
    2c7c:	mov	r1, r4
    2c80:	mov	r0, r5
    2c84:	bl	0 <coda_bin_cursor_read_double_array>
    2c88:	b	2d7c <read_double_array+0x1e0>
    2c8c:	mov	r2, r6
    2c90:	mov	r1, r4
    2c94:	mov	r0, r5
    2c98:	bl	0 <coda_ascii_cursor_read_double_array>
    2c9c:	b	2d7c <read_double_array+0x1e0>
    2ca0:	cmp	r2, #100	; 0x64
    2ca4:	bne	2cbc <read_double_array+0x120>
    2ca8:	mov	r2, r6
    2cac:	mov	r1, r4
    2cb0:	mov	r0, r5
    2cb4:	bl	0 <coda_mem_cursor_read_double_array>
    2cb8:	b	2d7c <read_double_array+0x1e0>
    2cbc:	mvn	r0, #10
    2cc0:	mov	r1, #0
    2cc4:	bl	0 <coda_set_error>
    2cc8:	mvn	r0, #0
    2ccc:	b	2d7c <read_double_array+0x1e0>
    2cd0:	cmp	r2, #104	; 0x68
    2cd4:	bcs	2d10 <read_double_array+0x174>
    2cd8:	cmp	r2, #102	; 0x66
    2cdc:	bne	2cf4 <read_double_array+0x158>
    2ce0:	mvn	r0, #12
    2ce4:	mov	r1, #0
    2ce8:	bl	0 <coda_set_error>
    2cec:	mvn	r0, #0
    2cf0:	b	2d7c <read_double_array+0x1e0>
    2cf4:	mov	r1, r4
    2cf8:	mov	r0, r5
    2cfc:	bl	0 <coda_cdf_cursor_read_double_array>
    2d00:	cmp	r0, #0
    2d04:	beq	2d5c <read_double_array+0x1c0>
    2d08:	mvn	r0, #0
    2d0c:	b	2d7c <read_double_array+0x1e0>
    2d10:	cmp	r2, #104	; 0x68
    2d14:	beq	2d40 <read_double_array+0x1a4>
    2d18:	cmp	r2, #105	; 0x69
    2d1c:	bne	2d5c <read_double_array+0x1c0>
    2d20:	ldr	r0, [pc, #120]	; 2da0 <read_double_array+0x204>
    2d24:	ldr	r1, [pc, #104]	; 2d94 <read_double_array+0x1f8>
    2d28:	movw	r2, #1301	; 0x515
    2d2c:	ldr	r3, [pc, #100]	; 2d98 <read_double_array+0x1fc>
    2d30:	bl	0 <__assert_fail>
    2d34:	mov	r0, #1
    2d38:	bl	0 <exit>
    2d3c:	b	2d5c <read_double_array+0x1c0>
    2d40:	mov	r1, r4
    2d44:	mov	r0, r5
    2d48:	bl	0 <coda_netcdf_cursor_read_double_array>
    2d4c:	cmp	r0, #0
    2d50:	beq	2d5c <read_double_array+0x1c0>
    2d54:	mvn	r0, #0
    2d58:	b	2d7c <read_double_array+0x1e0>
    2d5c:	cmp	r6, #0
    2d60:	beq	2d78 <read_double_array+0x1dc>
    2d64:	mov	r2, #8
    2d68:	mov	r1, r4
    2d6c:	mov	r0, r5
    2d70:	bl	3d4 <transpose_array>
    2d74:	b	2d7c <read_double_array+0x1e0>
    2d78:	mov	r0, #0
    2d7c:	ldr	r4, [sp, #16]
    2d80:	ldr	r5, [sp, #20]
    2d84:	ldr	r6, [sp, #24]
    2d88:	ldr	lr, [sp, #8]
    2d8c:	add	sp, sp, #32
    2d90:	bx	lr
    2d94:	.word	0x00000453
    2d98:	.word	0x000006ad
    2d9c:	.word	0x00000000
    2da0:	.word	0x000004b3

00002da4 <read_char_array>:
    2da4:	mov	ip, sp
    2da8:	sub	sp, sp, #24
    2dac:	str	ip, [sp]
    2db0:	str	lr, [sp, #4]
    2db4:	str	r4, [sp, #8]
    2db8:	str	r5, [sp, #12]
    2dbc:	str	r6, [sp, #16]
    2dc0:	mov	r4, r2
    2dc4:	mov	r5, r1
    2dc8:	mov	r6, r0
    2dcc:	ldr	r2, [r6, #4]
    2dd0:	lsl	r0, r2, #4
    2dd4:	add	r1, r6, r0
    2dd8:	sub	lr, r1, #4096	; 0x1000
    2ddc:	ldr	r0, [lr, #4088]	; 0xff8
    2de0:	ldr	ip, [r0]
    2de4:	cmp	ip, #102	; 0x66
    2de8:	bcs	2e5c <read_char_array+0xb8>
    2dec:	cmp	ip, #100	; 0x64
    2df0:	bcs	2e2c <read_char_array+0x88>
    2df4:	cmp	ip, #0
    2df8:	beq	2e18 <read_char_array+0x74>
    2dfc:	cmp	ip, #1
    2e00:	bne	2ed4 <read_char_array+0x130>
    2e04:	mov	r2, r4
    2e08:	mov	r1, r5
    2e0c:	mov	r0, r6
    2e10:	bl	0 <coda_bin_cursor_read_char_array>
    2e14:	b	2ef4 <read_char_array+0x150>
    2e18:	mov	r2, r4
    2e1c:	mov	r1, r5
    2e20:	mov	r0, r6
    2e24:	bl	0 <coda_ascii_cursor_read_char_array>
    2e28:	b	2ef4 <read_char_array+0x150>
    2e2c:	cmp	ip, #100	; 0x64
    2e30:	bne	2e48 <read_char_array+0xa4>
    2e34:	mov	r2, r4
    2e38:	mov	r1, r5
    2e3c:	mov	r0, r6
    2e40:	bl	0 <coda_mem_cursor_read_char_array>
    2e44:	b	2ef4 <read_char_array+0x150>
    2e48:	mvn	r0, #10
    2e4c:	mov	r1, #0
    2e50:	bl	0 <coda_set_error>
    2e54:	mvn	r0, #0
    2e58:	b	2ef4 <read_char_array+0x150>
    2e5c:	cmp	ip, #104	; 0x68
    2e60:	bcs	2e88 <read_char_array+0xe4>
    2e64:	cmp	ip, #102	; 0x66
    2e68:	beq	2e98 <read_char_array+0xf4>
    2e6c:	mov	r1, r5
    2e70:	mov	r0, r6
    2e74:	bl	0 <coda_cdf_cursor_read_char_array>
    2e78:	cmp	r0, #0
    2e7c:	beq	2ed4 <read_char_array+0x130>
    2e80:	mvn	r0, #0
    2e84:	b	2ef4 <read_char_array+0x150>
    2e88:	cmp	ip, #104	; 0x68
    2e8c:	beq	2eb8 <read_char_array+0x114>
    2e90:	cmp	ip, #105	; 0x69
    2e94:	bne	2ed4 <read_char_array+0x130>
    2e98:	ldr	r0, [pc, #116]	; 2f14 <read_char_array+0x170>
    2e9c:	ldr	r1, [pc, #108]	; 2f10 <read_char_array+0x16c>
    2ea0:	movw	r2, #1348	; 0x544
    2ea4:	ldr	r3, [pc, #96]	; 2f0c <read_char_array+0x168>
    2ea8:	bl	0 <__assert_fail>
    2eac:	mov	r0, #1
    2eb0:	bl	0 <exit>
    2eb4:	b	2ed4 <read_char_array+0x130>
    2eb8:	mov	r1, r5
    2ebc:	mov	r0, r6
    2ec0:	bl	0 <coda_netcdf_cursor_read_char_array>
    2ec4:	cmp	r0, #0
    2ec8:	beq	2ed4 <read_char_array+0x130>
    2ecc:	mvn	r0, #0
    2ed0:	b	2ef4 <read_char_array+0x150>
    2ed4:	cmp	r4, #0
    2ed8:	beq	2ef0 <read_char_array+0x14c>
    2edc:	mov	r2, #1
    2ee0:	mov	r1, r5
    2ee4:	mov	r0, r6
    2ee8:	bl	3d4 <transpose_array>
    2eec:	b	2ef4 <read_char_array+0x150>
    2ef0:	mov	r0, #0
    2ef4:	ldr	r4, [sp, #8]
    2ef8:	ldr	r5, [sp, #12]
    2efc:	ldr	r6, [sp, #16]
    2f00:	ldr	lr, [sp, #4]
    2f04:	add	sp, sp, #24
    2f08:	bx	lr
    2f0c:	.word	0x000006bf
    2f10:	.word	0x00000453
    2f14:	.word	0x000004b3

00002f18 <read_int8_partial_array>:
    2f18:	mov	ip, sp
    2f1c:	sub	sp, sp, #16
    2f20:	str	ip, [sp]
    2f24:	str	lr, [sp, #4]
    2f28:	str	r4, [sp, #8]
    2f2c:	ldr	ip, [r0, #4]
    2f30:	lsl	ip, ip, #4
    2f34:	add	ip, r0, ip
    2f38:	sub	lr, ip, #4096	; 0x1000
    2f3c:	ldr	ip, [lr, #4088]	; 0xff8
    2f40:	ldr	ip, [ip]
    2f44:	cmp	ip, #102	; 0x66
    2f48:	bcs	2fa4 <read_int8_partial_array+0x8c>
    2f4c:	cmp	ip, #100	; 0x64
    2f50:	bcs	2f7c <read_int8_partial_array+0x64>
    2f54:	cmp	ip, #0
    2f58:	beq	2f70 <read_int8_partial_array+0x58>
    2f5c:	cmp	ip, #1
    2f60:	bne	2fdc <read_int8_partial_array+0xc4>
    2f64:	bl	0 <coda_bin_cursor_read_int8_partial_array>
    2f68:	mov	r4, r0
    2f6c:	b	3004 <read_int8_partial_array+0xec>
    2f70:	bl	0 <coda_ascii_cursor_read_int8_partial_array>
    2f74:	mov	r4, r0
    2f78:	b	3004 <read_int8_partial_array+0xec>
    2f7c:	cmp	ip, #100	; 0x64
    2f80:	bne	2f90 <read_int8_partial_array+0x78>
    2f84:	bl	0 <coda_mem_cursor_read_int8_partial_array>
    2f88:	mov	r4, r0
    2f8c:	b	3004 <read_int8_partial_array+0xec>
    2f90:	mvn	r0, #10
    2f94:	mov	r1, #0
    2f98:	bl	0 <coda_set_error>
    2f9c:	mvn	r4, #0
    2fa0:	b	3004 <read_int8_partial_array+0xec>
    2fa4:	cmp	ip, #104	; 0x68
    2fa8:	bcs	2fd4 <read_int8_partial_array+0xbc>
    2fac:	cmp	ip, #102	; 0x66
    2fb0:	bne	2fc8 <read_int8_partial_array+0xb0>
    2fb4:	mvn	r0, #12
    2fb8:	mov	r1, #0
    2fbc:	bl	0 <coda_set_error>
    2fc0:	mvn	r4, #0
    2fc4:	b	3004 <read_int8_partial_array+0xec>
    2fc8:	bl	0 <coda_cdf_cursor_read_int8_partial_array>
    2fcc:	mov	r4, r0
    2fd0:	b	3004 <read_int8_partial_array+0xec>
    2fd4:	cmp	ip, #104	; 0x68
    2fd8:	beq	2ffc <read_int8_partial_array+0xe4>
    2fdc:	ldr	r0, [pc, #60]	; 3020 <read_int8_partial_array+0x108>
    2fe0:	ldr	r1, [pc, #52]	; 301c <read_int8_partial_array+0x104>
    2fe4:	mov	r2, #1392	; 0x570
    2fe8:	ldr	r3, [pc, #40]	; 3018 <read_int8_partial_array+0x100>
    2fec:	bl	0 <__assert_fail>
    2ff0:	mov	r0, #1
    2ff4:	bl	0 <exit>
    2ff8:	b	3004 <read_int8_partial_array+0xec>
    2ffc:	bl	0 <coda_netcdf_cursor_read_int8_partial_array>
    3000:	mov	r4, r0
    3004:	mov	r0, r4
    3008:	ldr	r4, [sp, #8]
    300c:	ldr	lr, [sp, #4]
    3010:	add	sp, sp, #16
    3014:	bx	lr
    3018:	.word	0x000006cf
    301c:	.word	0x00000453
    3020:	.word	0x000004b3

00003024 <read_uint8_partial_array>:
    3024:	mov	ip, sp
    3028:	sub	sp, sp, #16
    302c:	str	ip, [sp]
    3030:	str	lr, [sp, #4]
    3034:	str	r4, [sp, #8]
    3038:	ldr	ip, [r0, #4]
    303c:	lsl	ip, ip, #4
    3040:	add	ip, r0, ip
    3044:	sub	lr, ip, #4096	; 0x1000
    3048:	ldr	ip, [lr, #4088]	; 0xff8
    304c:	ldr	ip, [ip]
    3050:	cmp	ip, #102	; 0x66
    3054:	bcs	30b0 <read_uint8_partial_array+0x8c>
    3058:	cmp	ip, #100	; 0x64
    305c:	bcs	3088 <read_uint8_partial_array+0x64>
    3060:	cmp	ip, #0
    3064:	beq	307c <read_uint8_partial_array+0x58>
    3068:	cmp	ip, #1
    306c:	bne	30e0 <read_uint8_partial_array+0xbc>
    3070:	bl	0 <coda_bin_cursor_read_uint8_partial_array>
    3074:	mov	r4, r0
    3078:	b	30fc <read_uint8_partial_array+0xd8>
    307c:	bl	0 <coda_ascii_cursor_read_uint8_partial_array>
    3080:	mov	r4, r0
    3084:	b	30fc <read_uint8_partial_array+0xd8>
    3088:	cmp	ip, #100	; 0x64
    308c:	bne	309c <read_uint8_partial_array+0x78>
    3090:	bl	0 <coda_mem_cursor_read_uint8_partial_array>
    3094:	mov	r4, r0
    3098:	b	30fc <read_uint8_partial_array+0xd8>
    309c:	mvn	r0, #10
    30a0:	mov	r1, #0
    30a4:	bl	0 <coda_set_error>
    30a8:	mvn	r4, #0
    30ac:	b	30fc <read_uint8_partial_array+0xd8>
    30b0:	cmp	ip, #104	; 0x68
    30b4:	bcs	30e0 <read_uint8_partial_array+0xbc>
    30b8:	cmp	ip, #102	; 0x66
    30bc:	bne	30d4 <read_uint8_partial_array+0xb0>
    30c0:	mvn	r0, #12
    30c4:	mov	r1, #0
    30c8:	bl	0 <coda_set_error>
    30cc:	mvn	r4, #0
    30d0:	b	30fc <read_uint8_partial_array+0xd8>
    30d4:	bl	0 <coda_cdf_cursor_read_uint8_partial_array>
    30d8:	mov	r4, r0
    30dc:	b	30fc <read_uint8_partial_array+0xd8>
    30e0:	ldr	r0, [pc, #48]	; 3118 <read_uint8_partial_array+0xf4>
    30e4:	ldr	r1, [pc, #40]	; 3114 <read_uint8_partial_array+0xf0>
    30e8:	movw	r2, #1427	; 0x593
    30ec:	ldr	r3, [pc, #28]	; 3110 <read_uint8_partial_array+0xec>
    30f0:	bl	0 <__assert_fail>
    30f4:	mov	r0, #1
    30f8:	bl	0 <exit>
    30fc:	mov	r0, r4
    3100:	ldr	r4, [sp, #8]
    3104:	ldr	lr, [sp, #4]
    3108:	add	sp, sp, #16
    310c:	bx	lr
    3110:	.word	0x000006e7
    3114:	.word	0x00000453
    3118:	.word	0x000004b3

0000311c <read_int16_partial_array>:
    311c:	mov	ip, sp
    3120:	sub	sp, sp, #16
    3124:	str	ip, [sp]
    3128:	str	lr, [sp, #4]
    312c:	str	r4, [sp, #8]
    3130:	ldr	ip, [r0, #4]
    3134:	lsl	ip, ip, #4
    3138:	add	ip, r0, ip
    313c:	sub	lr, ip, #4096	; 0x1000
    3140:	ldr	ip, [lr, #4088]	; 0xff8
    3144:	ldr	ip, [ip]
    3148:	cmp	ip, #102	; 0x66
    314c:	bcs	31a8 <read_int16_partial_array+0x8c>
    3150:	cmp	ip, #100	; 0x64
    3154:	bcs	3180 <read_int16_partial_array+0x64>
    3158:	cmp	ip, #0
    315c:	beq	3174 <read_int16_partial_array+0x58>
    3160:	cmp	ip, #1
    3164:	bne	31e0 <read_int16_partial_array+0xc4>
    3168:	bl	0 <coda_bin_cursor_read_int16_partial_array>
    316c:	mov	r4, r0
    3170:	b	3208 <read_int16_partial_array+0xec>
    3174:	bl	0 <coda_ascii_cursor_read_int16_partial_array>
    3178:	mov	r4, r0
    317c:	b	3208 <read_int16_partial_array+0xec>
    3180:	cmp	ip, #100	; 0x64
    3184:	bne	3194 <read_int16_partial_array+0x78>
    3188:	bl	0 <coda_mem_cursor_read_int16_partial_array>
    318c:	mov	r4, r0
    3190:	b	3208 <read_int16_partial_array+0xec>
    3194:	mvn	r0, #10
    3198:	mov	r1, #0
    319c:	bl	0 <coda_set_error>
    31a0:	mvn	r4, #0
    31a4:	b	3208 <read_int16_partial_array+0xec>
    31a8:	cmp	ip, #104	; 0x68
    31ac:	bcs	31d8 <read_int16_partial_array+0xbc>
    31b0:	cmp	ip, #102	; 0x66
    31b4:	bne	31cc <read_int16_partial_array+0xb0>
    31b8:	mvn	r0, #12
    31bc:	mov	r1, #0
    31c0:	bl	0 <coda_set_error>
    31c4:	mvn	r4, #0
    31c8:	b	3208 <read_int16_partial_array+0xec>
    31cc:	bl	0 <coda_cdf_cursor_read_int16_partial_array>
    31d0:	mov	r4, r0
    31d4:	b	3208 <read_int16_partial_array+0xec>
    31d8:	cmp	ip, #104	; 0x68
    31dc:	beq	3200 <read_int16_partial_array+0xe4>
    31e0:	ldr	r0, [pc, #60]	; 3224 <read_int16_partial_array+0x108>
    31e4:	ldr	r1, [pc, #52]	; 3220 <read_int16_partial_array+0x104>
    31e8:	movw	r2, #1463	; 0x5b7
    31ec:	ldr	r3, [pc, #40]	; 321c <read_int16_partial_array+0x100>
    31f0:	bl	0 <__assert_fail>
    31f4:	mov	r0, #1
    31f8:	bl	0 <exit>
    31fc:	b	3208 <read_int16_partial_array+0xec>
    3200:	bl	0 <coda_netcdf_cursor_read_int16_partial_array>
    3204:	mov	r4, r0
    3208:	mov	r0, r4
    320c:	ldr	r4, [sp, #8]
    3210:	ldr	lr, [sp, #4]
    3214:	add	sp, sp, #16
    3218:	bx	lr
    321c:	.word	0x00000700
    3220:	.word	0x00000453
    3224:	.word	0x000004b3

00003228 <read_uint16_partial_array>:
    3228:	mov	ip, sp
    322c:	sub	sp, sp, #16
    3230:	str	ip, [sp]
    3234:	str	lr, [sp, #4]
    3238:	str	r4, [sp, #8]
    323c:	ldr	ip, [r0, #4]
    3240:	lsl	ip, ip, #4
    3244:	add	ip, r0, ip
    3248:	sub	lr, ip, #4096	; 0x1000
    324c:	ldr	ip, [lr, #4088]	; 0xff8
    3250:	ldr	ip, [ip]
    3254:	cmp	ip, #102	; 0x66
    3258:	bcs	32b4 <read_uint16_partial_array+0x8c>
    325c:	cmp	ip, #100	; 0x64
    3260:	bcs	328c <read_uint16_partial_array+0x64>
    3264:	cmp	ip, #0
    3268:	beq	3280 <read_uint16_partial_array+0x58>
    326c:	cmp	ip, #1
    3270:	bne	32e4 <read_uint16_partial_array+0xbc>
    3274:	bl	0 <coda_bin_cursor_read_uint16_partial_array>
    3278:	mov	r4, r0
    327c:	b	3300 <read_uint16_partial_array+0xd8>
    3280:	bl	0 <coda_ascii_cursor_read_uint16_partial_array>
    3284:	mov	r4, r0
    3288:	b	3300 <read_uint16_partial_array+0xd8>
    328c:	cmp	ip, #100	; 0x64
    3290:	bne	32a0 <read_uint16_partial_array+0x78>
    3294:	bl	0 <coda_mem_cursor_read_uint16_partial_array>
    3298:	mov	r4, r0
    329c:	b	3300 <read_uint16_partial_array+0xd8>
    32a0:	mvn	r0, #10
    32a4:	mov	r1, #0
    32a8:	bl	0 <coda_set_error>
    32ac:	mvn	r4, #0
    32b0:	b	3300 <read_uint16_partial_array+0xd8>
    32b4:	cmp	ip, #104	; 0x68
    32b8:	bcs	32e4 <read_uint16_partial_array+0xbc>
    32bc:	cmp	ip, #102	; 0x66
    32c0:	bne	32d8 <read_uint16_partial_array+0xb0>
    32c4:	mvn	r0, #12
    32c8:	mov	r1, #0
    32cc:	bl	0 <coda_set_error>
    32d0:	mvn	r4, #0
    32d4:	b	3300 <read_uint16_partial_array+0xd8>
    32d8:	bl	0 <coda_cdf_cursor_read_uint16_partial_array>
    32dc:	mov	r4, r0
    32e0:	b	3300 <read_uint16_partial_array+0xd8>
    32e4:	ldr	r0, [pc, #48]	; 331c <read_uint16_partial_array+0xf4>
    32e8:	ldr	r1, [pc, #36]	; 3314 <read_uint16_partial_array+0xec>
    32ec:	movw	r2, #1498	; 0x5da
    32f0:	ldr	r3, [pc, #32]	; 3318 <read_uint16_partial_array+0xf0>
    32f4:	bl	0 <__assert_fail>
    32f8:	mov	r0, #1
    32fc:	bl	0 <exit>
    3300:	mov	r0, r4
    3304:	ldr	r4, [sp, #8]
    3308:	ldr	lr, [sp, #4]
    330c:	add	sp, sp, #16
    3310:	bx	lr
    3314:	.word	0x00000453
    3318:	.word	0x00000719
    331c:	.word	0x000004b3

00003320 <read_int32_partial_array>:
    3320:	mov	ip, sp
    3324:	sub	sp, sp, #16
    3328:	str	ip, [sp]
    332c:	str	lr, [sp, #4]
    3330:	str	r4, [sp, #8]
    3334:	ldr	ip, [r0, #4]
    3338:	lsl	ip, ip, #4
    333c:	add	ip, r0, ip
    3340:	sub	lr, ip, #4096	; 0x1000
    3344:	ldr	ip, [lr, #4088]	; 0xff8
    3348:	ldr	ip, [ip]
    334c:	cmp	ip, #102	; 0x66
    3350:	bcs	33ac <read_int32_partial_array+0x8c>
    3354:	cmp	ip, #100	; 0x64
    3358:	bcs	3384 <read_int32_partial_array+0x64>
    335c:	cmp	ip, #0
    3360:	beq	3378 <read_int32_partial_array+0x58>
    3364:	cmp	ip, #1
    3368:	bne	33e4 <read_int32_partial_array+0xc4>
    336c:	bl	0 <coda_bin_cursor_read_int32_partial_array>
    3370:	mov	r4, r0
    3374:	b	340c <read_int32_partial_array+0xec>
    3378:	bl	0 <coda_ascii_cursor_read_int32_partial_array>
    337c:	mov	r4, r0
    3380:	b	340c <read_int32_partial_array+0xec>
    3384:	cmp	ip, #100	; 0x64
    3388:	bne	3398 <read_int32_partial_array+0x78>
    338c:	bl	0 <coda_mem_cursor_read_int32_partial_array>
    3390:	mov	r4, r0
    3394:	b	340c <read_int32_partial_array+0xec>
    3398:	mvn	r0, #10
    339c:	mov	r1, #0
    33a0:	bl	0 <coda_set_error>
    33a4:	mvn	r4, #0
    33a8:	b	340c <read_int32_partial_array+0xec>
    33ac:	cmp	ip, #104	; 0x68
    33b0:	bcs	33dc <read_int32_partial_array+0xbc>
    33b4:	cmp	ip, #102	; 0x66
    33b8:	bne	33d0 <read_int32_partial_array+0xb0>
    33bc:	mvn	r0, #12
    33c0:	mov	r1, #0
    33c4:	bl	0 <coda_set_error>
    33c8:	mvn	r4, #0
    33cc:	b	340c <read_int32_partial_array+0xec>
    33d0:	bl	0 <coda_cdf_cursor_read_int32_partial_array>
    33d4:	mov	r4, r0
    33d8:	b	340c <read_int32_partial_array+0xec>
    33dc:	cmp	ip, #104	; 0x68
    33e0:	beq	3404 <read_int32_partial_array+0xe4>
    33e4:	ldr	r0, [pc, #60]	; 3428 <read_int32_partial_array+0x108>
    33e8:	ldr	r1, [pc, #52]	; 3424 <read_int32_partial_array+0x104>
    33ec:	movw	r2, #1534	; 0x5fe
    33f0:	ldr	r3, [pc, #40]	; 3420 <read_int32_partial_array+0x100>
    33f4:	bl	0 <__assert_fail>
    33f8:	mov	r0, #1
    33fc:	bl	0 <exit>
    3400:	b	340c <read_int32_partial_array+0xec>
    3404:	bl	0 <coda_netcdf_cursor_read_int32_partial_array>
    3408:	mov	r4, r0
    340c:	mov	r0, r4
    3410:	ldr	r4, [sp, #8]
    3414:	ldr	lr, [sp, #4]
    3418:	add	sp, sp, #16
    341c:	bx	lr
    3420:	.word	0x00000733
    3424:	.word	0x00000453
    3428:	.word	0x000004b3

0000342c <read_uint32_partial_array>:
    342c:	mov	ip, sp
    3430:	sub	sp, sp, #16
    3434:	str	ip, [sp]
    3438:	str	lr, [sp, #4]
    343c:	str	r4, [sp, #8]
    3440:	ldr	ip, [r0, #4]
    3444:	lsl	ip, ip, #4
    3448:	add	ip, r0, ip
    344c:	sub	lr, ip, #4096	; 0x1000
    3450:	ldr	ip, [lr, #4088]	; 0xff8
    3454:	ldr	ip, [ip]
    3458:	cmp	ip, #102	; 0x66
    345c:	bcs	34b8 <read_uint32_partial_array+0x8c>
    3460:	cmp	ip, #100	; 0x64
    3464:	bcs	3490 <read_uint32_partial_array+0x64>
    3468:	cmp	ip, #0
    346c:	beq	3484 <read_uint32_partial_array+0x58>
    3470:	cmp	ip, #1
    3474:	bne	34e8 <read_uint32_partial_array+0xbc>
    3478:	bl	0 <coda_bin_cursor_read_uint32_partial_array>
    347c:	mov	r4, r0
    3480:	b	3504 <read_uint32_partial_array+0xd8>
    3484:	bl	0 <coda_ascii_cursor_read_uint32_partial_array>
    3488:	mov	r4, r0
    348c:	b	3504 <read_uint32_partial_array+0xd8>
    3490:	cmp	ip, #100	; 0x64
    3494:	bne	34a4 <read_uint32_partial_array+0x78>
    3498:	bl	0 <coda_mem_cursor_read_uint32_partial_array>
    349c:	mov	r4, r0
    34a0:	b	3504 <read_uint32_partial_array+0xd8>
    34a4:	mvn	r0, #10
    34a8:	mov	r1, #0
    34ac:	bl	0 <coda_set_error>
    34b0:	mvn	r4, #0
    34b4:	b	3504 <read_uint32_partial_array+0xd8>
    34b8:	cmp	ip, #104	; 0x68
    34bc:	bcs	34e8 <read_uint32_partial_array+0xbc>
    34c0:	cmp	ip, #102	; 0x66
    34c4:	bne	34dc <read_uint32_partial_array+0xb0>
    34c8:	mvn	r0, #12
    34cc:	mov	r1, #0
    34d0:	bl	0 <coda_set_error>
    34d4:	mvn	r4, #0
    34d8:	b	3504 <read_uint32_partial_array+0xd8>
    34dc:	bl	0 <coda_cdf_cursor_read_uint32_partial_array>
    34e0:	mov	r4, r0
    34e4:	b	3504 <read_uint32_partial_array+0xd8>
    34e8:	ldr	r0, [pc, #44]	; 351c <read_uint32_partial_array+0xf0>
    34ec:	ldr	r1, [pc, #36]	; 3518 <read_uint32_partial_array+0xec>
    34f0:	movw	r2, #1569	; 0x621
    34f4:	ldr	r3, [pc, #36]	; 3520 <read_uint32_partial_array+0xf4>
    34f8:	bl	0 <__assert_fail>
    34fc:	mov	r0, #1
    3500:	bl	0 <exit>
    3504:	mov	r0, r4
    3508:	ldr	r4, [sp, #8]
    350c:	ldr	lr, [sp, #4]
    3510:	add	sp, sp, #16
    3514:	bx	lr
    3518:	.word	0x00000453
    351c:	.word	0x000004b3
    3520:	.word	0x0000074c

00003524 <read_int64_partial_array>:
    3524:	mov	ip, sp
    3528:	sub	sp, sp, #16
    352c:	str	ip, [sp]
    3530:	str	lr, [sp, #4]
    3534:	str	r4, [sp, #8]
    3538:	ldr	ip, [r0, #4]
    353c:	lsl	ip, ip, #4
    3540:	add	ip, r0, ip
    3544:	sub	lr, ip, #4096	; 0x1000
    3548:	ldr	ip, [lr, #4088]	; 0xff8
    354c:	ldr	ip, [ip]
    3550:	cmp	ip, #102	; 0x66
    3554:	bcs	35b0 <read_int64_partial_array+0x8c>
    3558:	cmp	ip, #100	; 0x64
    355c:	bcs	3588 <read_int64_partial_array+0x64>
    3560:	cmp	ip, #0
    3564:	beq	357c <read_int64_partial_array+0x58>
    3568:	cmp	ip, #1
    356c:	bne	35e0 <read_int64_partial_array+0xbc>
    3570:	bl	0 <coda_bin_cursor_read_int64_partial_array>
    3574:	mov	r4, r0
    3578:	b	35fc <read_int64_partial_array+0xd8>
    357c:	bl	0 <coda_ascii_cursor_read_int64_partial_array>
    3580:	mov	r4, r0
    3584:	b	35fc <read_int64_partial_array+0xd8>
    3588:	cmp	ip, #100	; 0x64
    358c:	bne	359c <read_int64_partial_array+0x78>
    3590:	bl	0 <coda_mem_cursor_read_int64_partial_array>
    3594:	mov	r4, r0
    3598:	b	35fc <read_int64_partial_array+0xd8>
    359c:	mvn	r0, #10
    35a0:	mov	r1, #0
    35a4:	bl	0 <coda_set_error>
    35a8:	mvn	r4, #0
    35ac:	b	35fc <read_int64_partial_array+0xd8>
    35b0:	cmp	ip, #104	; 0x68
    35b4:	bcs	35e0 <read_int64_partial_array+0xbc>
    35b8:	cmp	ip, #102	; 0x66
    35bc:	bne	35d4 <read_int64_partial_array+0xb0>
    35c0:	mvn	r0, #12
    35c4:	mov	r1, #0
    35c8:	bl	0 <coda_set_error>
    35cc:	mvn	r4, #0
    35d0:	b	35fc <read_int64_partial_array+0xd8>
    35d4:	bl	0 <coda_cdf_cursor_read_int64_partial_array>
    35d8:	mov	r4, r0
    35dc:	b	35fc <read_int64_partial_array+0xd8>
    35e0:	ldr	r0, [pc, #48]	; 3618 <read_int64_partial_array+0xf4>
    35e4:	ldr	r1, [pc, #36]	; 3610 <read_int64_partial_array+0xec>
    35e8:	movw	r2, #1604	; 0x644
    35ec:	ldr	r3, [pc, #32]	; 3614 <read_int64_partial_array+0xf0>
    35f0:	bl	0 <__assert_fail>
    35f4:	mov	r0, #1
    35f8:	bl	0 <exit>
    35fc:	mov	r0, r4
    3600:	ldr	r4, [sp, #8]
    3604:	ldr	lr, [sp, #4]
    3608:	add	sp, sp, #16
    360c:	bx	lr
    3610:	.word	0x00000453
    3614:	.word	0x00000766
    3618:	.word	0x000004b3

0000361c <read_uint64_partial_array>:
    361c:	mov	ip, sp
    3620:	sub	sp, sp, #16
    3624:	str	ip, [sp]
    3628:	str	lr, [sp, #4]
    362c:	str	r4, [sp, #8]
    3630:	ldr	ip, [r0, #4]
    3634:	lsl	ip, ip, #4
    3638:	add	ip, r0, ip
    363c:	sub	lr, ip, #4096	; 0x1000
    3640:	ldr	ip, [lr, #4088]	; 0xff8
    3644:	ldr	ip, [ip]
    3648:	cmp	ip, #102	; 0x66
    364c:	bcs	36a8 <read_uint64_partial_array+0x8c>
    3650:	cmp	ip, #100	; 0x64
    3654:	bcs	3680 <read_uint64_partial_array+0x64>
    3658:	cmp	ip, #0
    365c:	beq	3674 <read_uint64_partial_array+0x58>
    3660:	cmp	ip, #1
    3664:	bne	36cc <read_uint64_partial_array+0xb0>
    3668:	bl	0 <coda_bin_cursor_read_uint64_partial_array>
    366c:	mov	r4, r0
    3670:	b	36e8 <read_uint64_partial_array+0xcc>
    3674:	bl	0 <coda_ascii_cursor_read_uint64_partial_array>
    3678:	mov	r4, r0
    367c:	b	36e8 <read_uint64_partial_array+0xcc>
    3680:	cmp	ip, #100	; 0x64
    3684:	bne	3694 <read_uint64_partial_array+0x78>
    3688:	bl	0 <coda_mem_cursor_read_uint64_partial_array>
    368c:	mov	r4, r0
    3690:	b	36e8 <read_uint64_partial_array+0xcc>
    3694:	mvn	r0, #10
    3698:	mov	r1, #0
    369c:	bl	0 <coda_set_error>
    36a0:	mvn	r4, #0
    36a4:	b	36e8 <read_uint64_partial_array+0xcc>
    36a8:	cmp	ip, #104	; 0x68
    36ac:	bcs	36cc <read_uint64_partial_array+0xb0>
    36b0:	cmp	ip, #102	; 0x66
    36b4:	bne	36cc <read_uint64_partial_array+0xb0>
    36b8:	mvn	r0, #12
    36bc:	mov	r1, #0
    36c0:	bl	0 <coda_set_error>
    36c4:	mvn	r4, #0
    36c8:	b	36e8 <read_uint64_partial_array+0xcc>
    36cc:	ldr	r0, [pc, #44]	; 3700 <read_uint64_partial_array+0xe4>
    36d0:	ldr	r1, [pc, #36]	; 36fc <read_uint64_partial_array+0xe0>
    36d4:	movw	r2, #1638	; 0x666
    36d8:	ldr	r3, [pc, #36]	; 3704 <read_uint64_partial_array+0xe8>
    36dc:	bl	0 <__assert_fail>
    36e0:	mov	r0, #1
    36e4:	bl	0 <exit>
    36e8:	mov	r0, r4
    36ec:	ldr	r4, [sp, #8]
    36f0:	ldr	lr, [sp, #4]
    36f4:	add	sp, sp, #16
    36f8:	bx	lr
    36fc:	.word	0x00000453
    3700:	.word	0x000004b3
    3704:	.word	0x0000077f

00003708 <read_float_partial_array>:
    3708:	mov	ip, sp
    370c:	sub	sp, sp, #16
    3710:	str	ip, [sp]
    3714:	str	lr, [sp, #4]
    3718:	str	r4, [sp, #8]
    371c:	ldr	ip, [r0, #4]
    3720:	lsl	ip, ip, #4
    3724:	add	ip, r0, ip
    3728:	sub	lr, ip, #4096	; 0x1000
    372c:	ldr	ip, [lr, #4088]	; 0xff8
    3730:	ldr	ip, [ip]
    3734:	cmp	ip, #102	; 0x66
    3738:	bcs	3794 <read_float_partial_array+0x8c>
    373c:	cmp	ip, #100	; 0x64
    3740:	bcs	376c <read_float_partial_array+0x64>
    3744:	cmp	ip, #0
    3748:	beq	3760 <read_float_partial_array+0x58>
    374c:	cmp	ip, #1
    3750:	bne	37e0 <read_float_partial_array+0xd8>
    3754:	bl	0 <coda_bin_cursor_read_float_partial_array>
    3758:	mov	r4, r0
    375c:	b	3808 <read_float_partial_array+0x100>
    3760:	bl	0 <coda_ascii_cursor_read_float_partial_array>
    3764:	mov	r4, r0
    3768:	b	3808 <read_float_partial_array+0x100>
    376c:	cmp	ip, #100	; 0x64
    3770:	bne	3780 <read_float_partial_array+0x78>
    3774:	bl	0 <coda_mem_cursor_read_float_partial_array>
    3778:	mov	r4, r0
    377c:	b	3808 <read_float_partial_array+0x100>
    3780:	mvn	r0, #10
    3784:	mov	r1, #0
    3788:	bl	0 <coda_set_error>
    378c:	mvn	r4, #0
    3790:	b	3808 <read_float_partial_array+0x100>
    3794:	cmp	ip, #104	; 0x68
    3798:	bcs	37c4 <read_float_partial_array+0xbc>
    379c:	cmp	ip, #102	; 0x66
    37a0:	bne	37b8 <read_float_partial_array+0xb0>
    37a4:	mvn	r0, #12
    37a8:	mov	r1, #0
    37ac:	bl	0 <coda_set_error>
    37b0:	mvn	r4, #0
    37b4:	b	3808 <read_float_partial_array+0x100>
    37b8:	bl	0 <coda_cdf_cursor_read_float_partial_array>
    37bc:	mov	r4, r0
    37c0:	b	3808 <read_float_partial_array+0x100>
    37c4:	cmp	ip, #104	; 0x68
    37c8:	beq	3800 <read_float_partial_array+0xf8>
    37cc:	cmp	ip, #105	; 0x69
    37d0:	bne	37e0 <read_float_partial_array+0xd8>
    37d4:	bl	0 <coda_grib_cursor_read_float_partial_array>
    37d8:	mov	r4, r0
    37dc:	b	3808 <read_float_partial_array+0x100>
    37e0:	ldr	r0, [pc, #60]	; 3824 <read_float_partial_array+0x11c>
    37e4:	ldr	r1, [pc, #52]	; 3820 <read_float_partial_array+0x118>
    37e8:	movw	r2, #1674	; 0x68a
    37ec:	ldr	r3, [pc, #40]	; 381c <read_float_partial_array+0x114>
    37f0:	bl	0 <__assert_fail>
    37f4:	mov	r0, #1
    37f8:	bl	0 <exit>
    37fc:	b	3808 <read_float_partial_array+0x100>
    3800:	bl	0 <coda_netcdf_cursor_read_float_partial_array>
    3804:	mov	r4, r0
    3808:	mov	r0, r4
    380c:	ldr	r4, [sp, #8]
    3810:	ldr	lr, [sp, #4]
    3814:	add	sp, sp, #16
    3818:	bx	lr
    381c:	.word	0x00000799
    3820:	.word	0x00000453
    3824:	.word	0x000004b3

00003828 <read_double_partial_array>:
    3828:	mov	ip, sp
    382c:	sub	sp, sp, #24
    3830:	str	ip, [sp, #8]
    3834:	str	lr, [sp, #12]
    3838:	str	r4, [sp, #16]
    383c:	str	r5, [sp, #20]
    3840:	ldr	ip, [r0, #4]
    3844:	lsl	ip, ip, #4
    3848:	add	ip, r0, ip
    384c:	sub	lr, ip, #4096	; 0x1000
    3850:	ldr	ip, [lr, #4088]	; 0xff8
    3854:	ldr	ip, [ip]
    3858:	cmp	ip, #100	; 0x64
    385c:	blt	387c <read_double_partial_array+0x54>
    3860:	ldr	ip, [r0, #4]
    3864:	lsl	ip, ip, #4
    3868:	add	ip, r0, ip
    386c:	sub	lr, ip, #4096	; 0x1000
    3870:	ldr	ip, [lr, #4088]	; 0xff8
    3874:	ldr	ip, [ip, #4]
    3878:	b	3890 <read_double_partial_array+0x68>
    387c:	ldr	ip, [r0, #4]
    3880:	lsl	ip, ip, #4
    3884:	add	ip, r0, ip
    3888:	sub	lr, ip, #4096	; 0x1000
    388c:	ldr	ip, [lr, #4088]	; 0xff8
    3890:	ldr	ip, [ip, #40]	; 0x28
    3894:	ldr	ip, [ip, #8]
    3898:	cmp	ip, #6
    389c:	bne	38c8 <read_double_partial_array+0xa0>
    38a0:	ldr	ip, [pc, #276]	; 39bc <read_double_partial_array+0x194>
    38a4:	mov	r5, #8
    38a8:	str	r5, [sp, #4]
    38ac:	str	r3, [sp]
    38b0:	mov	r3, r2
    38b4:	mov	r2, r1
    38b8:	mov	r1, ip
    38bc:	bl	2e8 <read_partial_array>
    38c0:	mov	r4, r0
    38c4:	b	39a0 <read_double_partial_array+0x178>
    38c8:	ldr	ip, [r0, #4]
    38cc:	lsl	ip, ip, #4
    38d0:	add	ip, r0, ip
    38d4:	sub	lr, ip, #4096	; 0x1000
    38d8:	ldr	ip, [lr, #4088]	; 0xff8
    38dc:	ldr	ip, [ip]
    38e0:	cmp	ip, #102	; 0x66
    38e4:	bcs	3940 <read_double_partial_array+0x118>
    38e8:	cmp	ip, #100	; 0x64
    38ec:	bcs	3918 <read_double_partial_array+0xf0>
    38f0:	cmp	ip, #0
    38f4:	beq	390c <read_double_partial_array+0xe4>
    38f8:	cmp	ip, #1
    38fc:	bne	3978 <read_double_partial_array+0x150>
    3900:	bl	0 <coda_bin_cursor_read_double_partial_array>
    3904:	mov	r4, r0
    3908:	b	39a0 <read_double_partial_array+0x178>
    390c:	bl	0 <coda_ascii_cursor_read_double_partial_array>
    3910:	mov	r4, r0
    3914:	b	39a0 <read_double_partial_array+0x178>
    3918:	cmp	ip, #100	; 0x64
    391c:	bne	392c <read_double_partial_array+0x104>
    3920:	bl	0 <coda_mem_cursor_read_double_partial_array>
    3924:	mov	r4, r0
    3928:	b	39a0 <read_double_partial_array+0x178>
    392c:	mvn	r0, #10
    3930:	mov	r1, #0
    3934:	bl	0 <coda_set_error>
    3938:	mvn	r4, #0
    393c:	b	39a0 <read_double_partial_array+0x178>
    3940:	cmp	ip, #104	; 0x68
    3944:	bcs	3970 <read_double_partial_array+0x148>
    3948:	cmp	ip, #102	; 0x66
    394c:	bne	3964 <read_double_partial_array+0x13c>
    3950:	mvn	r0, #12
    3954:	mov	r1, #0
    3958:	bl	0 <coda_set_error>
    395c:	mvn	r4, #0
    3960:	b	39a0 <read_double_partial_array+0x178>
    3964:	bl	0 <coda_cdf_cursor_read_double_partial_array>
    3968:	mov	r4, r0
    396c:	b	39a0 <read_double_partial_array+0x178>
    3970:	cmp	ip, #104	; 0x68
    3974:	beq	3998 <read_double_partial_array+0x170>
    3978:	ldr	r0, [pc, #68]	; 39c4 <read_double_partial_array+0x19c>
    397c:	ldr	r1, [pc, #52]	; 39b8 <read_double_partial_array+0x190>
    3980:	movw	r2, #1718	; 0x6b6
    3984:	ldr	r3, [pc, #52]	; 39c0 <read_double_partial_array+0x198>
    3988:	bl	0 <__assert_fail>
    398c:	mov	r0, #1
    3990:	bl	0 <exit>
    3994:	b	39a0 <read_double_partial_array+0x178>
    3998:	bl	0 <coda_netcdf_cursor_read_double_partial_array>
    399c:	mov	r4, r0
    39a0:	mov	r0, r4
    39a4:	ldr	r4, [sp, #16]
    39a8:	ldr	r5, [sp, #20]
    39ac:	ldr	lr, [sp, #12]
    39b0:	add	sp, sp, #24
    39b4:	bx	lr
    39b8:	.word	0x00000453
    39bc:	.word	0x00000000
    39c0:	.word	0x000007b2
    39c4:	.word	0x000004b3

000039c8 <read_char_partial_array>:
    39c8:	mov	ip, sp
    39cc:	sub	sp, sp, #16
    39d0:	str	ip, [sp]
    39d4:	str	lr, [sp, #4]
    39d8:	str	r4, [sp, #8]
    39dc:	ldr	ip, [r0, #4]
    39e0:	lsl	ip, ip, #4
    39e4:	add	ip, r0, ip
    39e8:	sub	lr, ip, #4096	; 0x1000
    39ec:	ldr	ip, [lr, #4088]	; 0xff8
    39f0:	ldr	ip, [ip]
    39f4:	cmp	ip, #102	; 0x66
    39f8:	bcs	3a54 <read_char_partial_array+0x8c>
    39fc:	cmp	ip, #100	; 0x64
    3a00:	bcs	3a2c <read_char_partial_array+0x64>
    3a04:	cmp	ip, #0
    3a08:	beq	3a20 <read_char_partial_array+0x58>
    3a0c:	cmp	ip, #1
    3a10:	bne	3a78 <read_char_partial_array+0xb0>
    3a14:	bl	0 <coda_bin_cursor_read_char_partial_array>
    3a18:	mov	r4, r0
    3a1c:	b	3aa0 <read_char_partial_array+0xd8>
    3a20:	bl	0 <coda_ascii_cursor_read_char_partial_array>
    3a24:	mov	r4, r0
    3a28:	b	3aa0 <read_char_partial_array+0xd8>
    3a2c:	cmp	ip, #100	; 0x64
    3a30:	bne	3a40 <read_char_partial_array+0x78>
    3a34:	bl	0 <coda_mem_cursor_read_char_partial_array>
    3a38:	mov	r4, r0
    3a3c:	b	3aa0 <read_char_partial_array+0xd8>
    3a40:	mvn	r0, #10
    3a44:	mov	r1, #0
    3a48:	bl	0 <coda_set_error>
    3a4c:	mvn	r4, #0
    3a50:	b	3aa0 <read_char_partial_array+0xd8>
    3a54:	cmp	ip, #104	; 0x68
    3a58:	bcs	3a70 <read_char_partial_array+0xa8>
    3a5c:	cmp	ip, #102	; 0x66
    3a60:	beq	3a78 <read_char_partial_array+0xb0>
    3a64:	bl	0 <coda_cdf_cursor_read_char_partial_array>
    3a68:	mov	r4, r0
    3a6c:	b	3aa0 <read_char_partial_array+0xd8>
    3a70:	cmp	ip, #104	; 0x68
    3a74:	beq	3a98 <read_char_partial_array+0xd0>
    3a78:	ldr	r0, [pc, #60]	; 3abc <read_char_partial_array+0xf4>
    3a7c:	ldr	r1, [pc, #52]	; 3ab8 <read_char_partial_array+0xf0>
    3a80:	movw	r2, #1748	; 0x6d4
    3a84:	ldr	r3, [pc, #40]	; 3ab4 <read_char_partial_array+0xec>
    3a88:	bl	0 <__assert_fail>
    3a8c:	mov	r0, #1
    3a90:	bl	0 <exit>
    3a94:	b	3aa0 <read_char_partial_array+0xd8>
    3a98:	bl	0 <coda_netcdf_cursor_read_char_partial_array>
    3a9c:	mov	r4, r0
    3aa0:	mov	r0, r4
    3aa4:	ldr	r4, [sp, #8]
    3aa8:	ldr	lr, [sp, #4]
    3aac:	add	sp, sp, #16
    3ab0:	bx	lr
    3ab4:	.word	0x000007cc
    3ab8:	.word	0x00000453
    3abc:	.word	0x000004b3

00003ac0 <coda_cursor_read_int8>:
    3ac0:	mov	ip, sp
    3ac4:	sub	sp, sp, #24
    3ac8:	str	ip, [sp]
    3acc:	str	lr, [sp, #4]
    3ad0:	str	r4, [sp, #8]
    3ad4:	str	r5, [sp, #12]
    3ad8:	mov	r5, r1
    3adc:	mov	r4, r0
    3ae0:	cmp	r4, #0
    3ae4:	beq	3afc <coda_cursor_read_int8+0x3c>
    3ae8:	ldr	r3, [r4, #4]
    3aec:	cmp	r3, #0
    3af0:	movle	ip, #1
    3af4:	movgt	ip, #0
    3af8:	b	3b00 <coda_cursor_read_int8+0x40>
    3afc:	mov	ip, #1
    3b00:	cmp	ip, #0
    3b04:	bne	3b2c <coda_cursor_read_int8+0x6c>
    3b08:	ldr	ip, [r4, #4]
    3b0c:	lsl	r1, ip, #4
    3b10:	add	r0, r4, r1
    3b14:	sub	lr, r0, #4096	; 0x1000
    3b18:	ldr	r0, [lr, #4088]	; 0xff8
    3b1c:	cmp	r0, #0
    3b20:	moveq	r0, #1
    3b24:	movne	r0, #0
    3b28:	b	3b30 <coda_cursor_read_int8+0x70>
    3b2c:	mov	r0, #1
    3b30:	cmp	r0, #0
    3b34:	beq	3b54 <coda_cursor_read_int8+0x94>
    3b38:	mvn	r0, #99	; 0x63
    3b3c:	ldr	r1, [pc, #184]	; 3bfc <coda_cursor_read_int8+0x13c>
    3b40:	ldr	r2, [pc, #176]	; 3bf8 <coda_cursor_read_int8+0x138>
    3b44:	movw	r3, #1773	; 0x6ed
    3b48:	bl	0 <coda_set_error>
    3b4c:	mvn	r0, #0
    3b50:	b	3be0 <coda_cursor_read_int8+0x120>
    3b54:	cmp	r5, #0
    3b58:	bne	3b78 <coda_cursor_read_int8+0xb8>
    3b5c:	mvn	r0, #99	; 0x63
    3b60:	ldr	r1, [pc, #152]	; 3c00 <coda_cursor_read_int8+0x140>
    3b64:	ldr	r2, [pc, #140]	; 3bf8 <coda_cursor_read_int8+0x138>
    3b68:	movw	r3, #1778	; 0x6f2
    3b6c:	bl	0 <coda_set_error>
    3b70:	mvn	r0, #0
    3b74:	b	3be0 <coda_cursor_read_int8+0x120>
    3b78:	add	r1, sp, #16
    3b7c:	mov	r0, r4
    3b80:	bl	908 <get_read_type>
    3b84:	cmp	r0, #0
    3b88:	beq	3b94 <coda_cursor_read_int8+0xd4>
    3b8c:	mvn	r0, #0
    3b90:	b	3be0 <coda_cursor_read_int8+0x120>
    3b94:	ldr	r3, [sp, #16]
    3b98:	cmp	r3, #0
    3b9c:	bne	3bc4 <coda_cursor_read_int8+0x104>
    3ba0:	mov	r1, r5
    3ba4:	mov	r0, r4
    3ba8:	bl	121c <read_int8>
    3bac:	cmp	r0, #0
    3bb0:	beq	3bbc <coda_cursor_read_int8+0xfc>
    3bb4:	mvn	r0, #0
    3bb8:	b	3be0 <coda_cursor_read_int8+0x120>
    3bbc:	mov	r0, #0
    3bc0:	b	3be0 <coda_cursor_read_int8+0x120>
    3bc4:	ldr	r0, [sp, #16]
    3bc8:	bl	0 <coda_type_get_native_type_name>
    3bcc:	mov	r2, r0
    3bd0:	mvn	r0, #104	; 0x68
    3bd4:	ldr	r1, [pc, #24]	; 3bf4 <coda_cursor_read_int8+0x134>
    3bd8:	bl	0 <coda_set_error>
    3bdc:	mvn	r0, #0
    3be0:	ldr	r4, [sp, #8]
    3be4:	ldr	r5, [sp, #12]
    3be8:	ldr	lr, [sp, #4]
    3bec:	add	sp, sp, #24
    3bf0:	bx	lr
    3bf4:	.word	0x000003cc
    3bf8:	.word	0x00000453
    3bfc:	.word	0x0000022b
    3c00:	.word	0x0000005b

00003c04 <coda_cursor_read_uint8>:
    3c04:	mov	ip, sp
    3c08:	sub	sp, sp, #24
    3c0c:	str	ip, [sp]
    3c10:	str	lr, [sp, #4]
    3c14:	str	r4, [sp, #8]
    3c18:	str	r5, [sp, #12]
    3c1c:	mov	r5, r1
    3c20:	mov	r4, r0
    3c24:	cmp	r4, #0
    3c28:	beq	3c40 <coda_cursor_read_uint8+0x3c>
    3c2c:	ldr	r3, [r4, #4]
    3c30:	cmp	r3, #0
    3c34:	movle	ip, #1
    3c38:	movgt	ip, #0
    3c3c:	b	3c44 <coda_cursor_read_uint8+0x40>
    3c40:	mov	ip, #1
    3c44:	cmp	ip, #0
    3c48:	bne	3c70 <coda_cursor_read_uint8+0x6c>
    3c4c:	ldr	ip, [r4, #4]
    3c50:	lsl	r1, ip, #4
    3c54:	add	r0, r4, r1
    3c58:	sub	lr, r0, #4096	; 0x1000
    3c5c:	ldr	r0, [lr, #4088]	; 0xff8
    3c60:	cmp	r0, #0
    3c64:	moveq	r0, #1
    3c68:	movne	r0, #0
    3c6c:	b	3c74 <coda_cursor_read_uint8+0x70>
    3c70:	mov	r0, #1
    3c74:	cmp	r0, #0
    3c78:	beq	3c98 <coda_cursor_read_uint8+0x94>
    3c7c:	mvn	r0, #99	; 0x63
    3c80:	ldr	r1, [pc, #184]	; 3d40 <coda_cursor_read_uint8+0x13c>
    3c84:	ldr	r2, [pc, #176]	; 3d3c <coda_cursor_read_uint8+0x138>
    3c88:	movw	r3, #1820	; 0x71c
    3c8c:	bl	0 <coda_set_error>
    3c90:	mvn	r0, #0
    3c94:	b	3d24 <coda_cursor_read_uint8+0x120>
    3c98:	cmp	r5, #0
    3c9c:	bne	3cbc <coda_cursor_read_uint8+0xb8>
    3ca0:	mvn	r0, #99	; 0x63
    3ca4:	ldr	r1, [pc, #152]	; 3d44 <coda_cursor_read_uint8+0x140>
    3ca8:	ldr	r2, [pc, #140]	; 3d3c <coda_cursor_read_uint8+0x138>
    3cac:	movw	r3, #1825	; 0x721
    3cb0:	bl	0 <coda_set_error>
    3cb4:	mvn	r0, #0
    3cb8:	b	3d24 <coda_cursor_read_uint8+0x120>
    3cbc:	add	r1, sp, #16
    3cc0:	mov	r0, r4
    3cc4:	bl	908 <get_read_type>
    3cc8:	cmp	r0, #0
    3ccc:	beq	3cd8 <coda_cursor_read_uint8+0xd4>
    3cd0:	mvn	r0, #0
    3cd4:	b	3d24 <coda_cursor_read_uint8+0x120>
    3cd8:	ldr	r3, [sp, #16]
    3cdc:	cmp	r3, #1
    3ce0:	bne	3d08 <coda_cursor_read_uint8+0x104>
    3ce4:	mov	r1, r5
    3ce8:	mov	r0, r4
    3cec:	bl	1328 <read_uint8>
    3cf0:	cmp	r0, #0
    3cf4:	beq	3d00 <coda_cursor_read_uint8+0xfc>
    3cf8:	mvn	r0, #0
    3cfc:	b	3d24 <coda_cursor_read_uint8+0x120>
    3d00:	mov	r0, #0
    3d04:	b	3d24 <coda_cursor_read_uint8+0x120>
    3d08:	ldr	r0, [sp, #16]
    3d0c:	bl	0 <coda_type_get_native_type_name>
    3d10:	mov	r2, r0
    3d14:	mvn	r0, #104	; 0x68
    3d18:	ldr	r1, [pc, #24]	; 3d38 <coda_cursor_read_uint8+0x134>
    3d1c:	bl	0 <coda_set_error>
    3d20:	mvn	r0, #0
    3d24:	ldr	r4, [sp, #8]
    3d28:	ldr	r5, [sp, #12]
    3d2c:	ldr	lr, [sp, #4]
    3d30:	add	sp, sp, #24
    3d34:	bx	lr
    3d38:	.word	0x00000078
    3d3c:	.word	0x00000453
    3d40:	.word	0x0000022b
    3d44:	.word	0x0000005b

00003d48 <coda_cursor_read_int16>:
    3d48:	mov	ip, sp
    3d4c:	sub	sp, sp, #24
    3d50:	str	ip, [sp]
    3d54:	str	lr, [sp, #4]
    3d58:	str	r4, [sp, #8]
    3d5c:	str	r5, [sp, #12]
    3d60:	mov	r5, r1
    3d64:	mov	r4, r0
    3d68:	cmp	r4, #0
    3d6c:	beq	3d84 <coda_cursor_read_int16+0x3c>
    3d70:	ldr	r2, [r4, #4]
    3d74:	cmp	r2, #0
    3d78:	movle	r3, #1
    3d7c:	movgt	r3, #0
    3d80:	b	3d88 <coda_cursor_read_int16+0x40>
    3d84:	mov	r3, #1
    3d88:	cmp	r3, #0
    3d8c:	bne	3db4 <coda_cursor_read_int16+0x6c>
    3d90:	ldr	r0, [r4, #4]
    3d94:	lsl	r1, r0, #4
    3d98:	add	ip, r4, r1
    3d9c:	sub	lr, ip, #4096	; 0x1000
    3da0:	ldr	r3, [lr, #4088]	; 0xff8
    3da4:	cmp	r3, #0
    3da8:	moveq	r2, #1
    3dac:	movne	r2, #0
    3db0:	b	3db8 <coda_cursor_read_int16+0x70>
    3db4:	mov	r2, #1
    3db8:	cmp	r2, #0
    3dbc:	beq	3ddc <coda_cursor_read_int16+0x94>
    3dc0:	mvn	r0, #99	; 0x63
    3dc4:	ldr	r1, [pc, #296]	; 3ef4 <coda_cursor_read_int16+0x1ac>
    3dc8:	ldr	r2, [pc, #288]	; 3ef0 <coda_cursor_read_int16+0x1a8>
    3dcc:	movw	r3, #1869	; 0x74d
    3dd0:	bl	0 <coda_set_error>
    3dd4:	mvn	r0, #0
    3dd8:	b	3edc <coda_cursor_read_int16+0x194>
    3ddc:	cmp	r5, #0
    3de0:	bne	3e00 <coda_cursor_read_int16+0xb8>
    3de4:	mvn	r0, #99	; 0x63
    3de8:	ldr	r1, [pc, #264]	; 3ef8 <coda_cursor_read_int16+0x1b0>
    3dec:	ldr	r2, [pc, #252]	; 3ef0 <coda_cursor_read_int16+0x1a8>
    3df0:	movw	r3, #1874	; 0x752
    3df4:	bl	0 <coda_set_error>
    3df8:	mvn	r0, #0
    3dfc:	b	3edc <coda_cursor_read_int16+0x194>
    3e00:	add	r1, sp, #20
    3e04:	mov	r0, r4
    3e08:	bl	908 <get_read_type>
    3e0c:	cmp	r0, #0
    3e10:	beq	3e1c <coda_cursor_read_int16+0xd4>
    3e14:	mvn	r0, #0
    3e18:	b	3edc <coda_cursor_read_int16+0x194>
    3e1c:	ldr	r1, [sp, #20]
    3e20:	cmp	r1, #0
    3e24:	beq	3eac <coda_cursor_read_int16+0x164>
    3e28:	cmp	r1, #1
    3e2c:	beq	3e7c <coda_cursor_read_int16+0x134>
    3e30:	cmp	r1, #2
    3e34:	bne	3e54 <coda_cursor_read_int16+0x10c>
    3e38:	mov	r1, r5
    3e3c:	mov	r0, r4
    3e40:	bl	1420 <read_int16>
    3e44:	cmp	r0, #0
    3e48:	beq	3ed8 <coda_cursor_read_int16+0x190>
    3e4c:	mvn	r0, #0
    3e50:	b	3edc <coda_cursor_read_int16+0x194>
    3e54:	ldr	r0, [sp, #20]
    3e58:	bl	0 <coda_type_get_native_type_name>
    3e5c:	mvn	r2, #104	; 0x68
    3e60:	ldr	r1, [pc, #148]	; 3efc <coda_cursor_read_int16+0x1b4>
    3e64:	mov	r3, r0
    3e68:	mov	r0, r2
    3e6c:	mov	r2, r3
    3e70:	bl	0 <coda_set_error>
    3e74:	mvn	r0, #0
    3e78:	b	3edc <coda_cursor_read_int16+0x194>
    3e7c:	add	r1, sp, #16
    3e80:	mov	r0, r4
    3e84:	bl	1328 <read_uint8>
    3e88:	cmp	r0, #0
    3e8c:	beq	3e98 <coda_cursor_read_int16+0x150>
    3e90:	mvn	r0, #0
    3e94:	b	3edc <coda_cursor_read_int16+0x194>
    3e98:	ldrb	r1, [sp, #16]
    3e9c:	sbfx	ip, r1, #0, #16
    3ea0:	sbfx	ip, ip, #0, #16
    3ea4:	strh	ip, [r5]
    3ea8:	b	3ed8 <coda_cursor_read_int16+0x190>
    3eac:	add	r1, sp, #17
    3eb0:	mov	r0, r4
    3eb4:	bl	121c <read_int8>
    3eb8:	cmp	r0, #0
    3ebc:	beq	3ec8 <coda_cursor_read_int16+0x180>
    3ec0:	mvn	r0, #0
    3ec4:	b	3edc <coda_cursor_read_int16+0x194>
    3ec8:	ldrsb	r0, [sp, #17]
    3ecc:	sbfx	r2, r0, #0, #16
    3ed0:	sbfx	r1, r2, #0, #16
    3ed4:	strh	r1, [r5]
    3ed8:	mov	r0, #0
    3edc:	ldr	r4, [sp, #8]
    3ee0:	ldr	r5, [sp, #12]
    3ee4:	ldr	lr, [sp, #4]
    3ee8:	add	sp, sp, #24
    3eec:	bx	lr
    3ef0:	.word	0x00000453
    3ef4:	.word	0x0000022b
    3ef8:	.word	0x0000005b
    3efc:	.word	0x00000133

00003f00 <coda_cursor_read_uint16>:
    3f00:	mov	ip, sp
    3f04:	sub	sp, sp, #24
    3f08:	str	ip, [sp]
    3f0c:	str	lr, [sp, #4]
    3f10:	str	r4, [sp, #8]
    3f14:	str	r5, [sp, #12]
    3f18:	mov	r5, r1
    3f1c:	mov	r4, r0
    3f20:	cmp	r4, #0
    3f24:	beq	3f3c <coda_cursor_read_uint16+0x3c>
    3f28:	ldr	r0, [r4, #4]
    3f2c:	cmp	r0, #0
    3f30:	movle	r1, #1
    3f34:	movgt	r1, #0
    3f38:	b	3f40 <coda_cursor_read_uint16+0x40>
    3f3c:	mov	r1, #1
    3f40:	cmp	r1, #0
    3f44:	bne	3f6c <coda_cursor_read_uint16+0x6c>
    3f48:	ldr	r3, [r4, #4]
    3f4c:	lsl	r2, r3, #4
    3f50:	add	r0, r4, r2
    3f54:	sub	lr, r0, #4096	; 0x1000
    3f58:	ldr	ip, [lr, #4088]	; 0xff8
    3f5c:	cmp	ip, #0
    3f60:	moveq	r0, #1
    3f64:	movne	r0, #0
    3f68:	b	3f70 <coda_cursor_read_uint16+0x70>
    3f6c:	mov	r0, #1
    3f70:	cmp	r0, #0
    3f74:	beq	3f94 <coda_cursor_read_uint16+0x94>
    3f78:	mvn	r0, #99	; 0x63
    3f7c:	ldr	r1, [pc, #236]	; 4070 <coda_cursor_read_uint16+0x170>
    3f80:	ldr	r2, [pc, #228]	; 406c <coda_cursor_read_uint16+0x16c>
    3f84:	movw	r3, #1939	; 0x793
    3f88:	bl	0 <coda_set_error>
    3f8c:	mvn	r0, #0
    3f90:	b	4054 <coda_cursor_read_uint16+0x154>
    3f94:	cmp	r5, #0
    3f98:	bne	3fb8 <coda_cursor_read_uint16+0xb8>
    3f9c:	mvn	r0, #99	; 0x63
    3fa0:	ldr	r1, [pc, #204]	; 4074 <coda_cursor_read_uint16+0x174>
    3fa4:	ldr	r2, [pc, #192]	; 406c <coda_cursor_read_uint16+0x16c>
    3fa8:	movw	r3, #1944	; 0x798
    3fac:	bl	0 <coda_set_error>
    3fb0:	mvn	r0, #0
    3fb4:	b	4054 <coda_cursor_read_uint16+0x154>
    3fb8:	add	r1, sp, #20
    3fbc:	mov	r0, r4
    3fc0:	bl	908 <get_read_type>
    3fc4:	cmp	r0, #0
    3fc8:	beq	3fd4 <coda_cursor_read_uint16+0xd4>
    3fcc:	mvn	r0, #0
    3fd0:	b	4054 <coda_cursor_read_uint16+0x154>
    3fd4:	ldr	r3, [sp, #20]
    3fd8:	cmp	r3, #1
    3fdc:	beq	4024 <coda_cursor_read_uint16+0x124>
    3fe0:	cmp	r3, #3
    3fe4:	bne	4004 <coda_cursor_read_uint16+0x104>
    3fe8:	mov	r1, r5
    3fec:	mov	r0, r4
    3ff0:	bl	1518 <read_uint16>
    3ff4:	cmp	r0, #0
    3ff8:	beq	4050 <coda_cursor_read_uint16+0x150>
    3ffc:	mvn	r0, #0
    4000:	b	4054 <coda_cursor_read_uint16+0x154>
    4004:	ldr	r0, [sp, #20]
    4008:	bl	0 <coda_type_get_native_type_name>
    400c:	mov	r2, r0
    4010:	mvn	r0, #104	; 0x68
    4014:	ldr	r1, [pc, #76]	; 4068 <coda_cursor_read_uint16+0x168>
    4018:	bl	0 <coda_set_error>
    401c:	mvn	r0, #0
    4020:	b	4054 <coda_cursor_read_uint16+0x154>
    4024:	add	r1, sp, #16
    4028:	mov	r0, r4
    402c:	bl	1328 <read_uint8>
    4030:	cmp	r0, #0
    4034:	beq	4040 <coda_cursor_read_uint16+0x140>
    4038:	mvn	r0, #0
    403c:	b	4054 <coda_cursor_read_uint16+0x154>
    4040:	ldrb	r1, [sp, #16]
    4044:	bic	r0, r1, #16711680	; 0xff0000
    4048:	bic	r0, r0, #-16777216	; 0xff000000
    404c:	strh	r0, [r5]
    4050:	mov	r0, #0
    4054:	ldr	r4, [sp, #8]
    4058:	ldr	r5, [sp, #12]
    405c:	ldr	lr, [sp, #4]
    4060:	add	sp, sp, #24
    4064:	bx	lr
    4068:	.word	0x000004b5
    406c:	.word	0x00000453
    4070:	.word	0x0000022b
    4074:	.word	0x0000005b

00004078 <coda_cursor_read_int32>:
    4078:	mov	ip, sp
    407c:	sub	sp, sp, #32
    4080:	str	ip, [sp]
    4084:	str	lr, [sp, #4]
    4088:	str	r4, [sp, #8]
    408c:	str	r5, [sp, #12]
    4090:	mov	r5, r1
    4094:	mov	r4, r0
    4098:	cmp	r4, #0
    409c:	beq	40b4 <coda_cursor_read_int32+0x3c>
    40a0:	ldr	r3, [r4, #4]
    40a4:	cmp	r3, #0
    40a8:	movle	r1, #1
    40ac:	movgt	r1, #0
    40b0:	b	40b8 <coda_cursor_read_int32+0x40>
    40b4:	mov	r1, #1
    40b8:	cmp	r1, #0
    40bc:	bne	40e4 <coda_cursor_read_int32+0x6c>
    40c0:	ldr	ip, [r4, #4]
    40c4:	lsl	ip, ip, #4
    40c8:	add	r2, r4, ip
    40cc:	sub	lr, r2, #4096	; 0x1000
    40d0:	ldr	r1, [lr, #4088]	; 0xff8
    40d4:	cmp	r1, #0
    40d8:	moveq	r1, #1
    40dc:	movne	r1, #0
    40e0:	b	40e8 <coda_cursor_read_int32+0x70>
    40e4:	mov	r1, #1
    40e8:	cmp	r1, #0
    40ec:	beq	410c <coda_cursor_read_int32+0x94>
    40f0:	mvn	r0, #99	; 0x63
    40f4:	ldr	r1, [pc, #380]	; 4278 <coda_cursor_read_int32+0x200>
    40f8:	ldr	r2, [pc, #372]	; 4274 <coda_cursor_read_int32+0x1fc>
    40fc:	movw	r3, #2001	; 0x7d1
    4100:	bl	0 <coda_set_error>
    4104:	mvn	r0, #0
    4108:	b	425c <coda_cursor_read_int32+0x1e4>
    410c:	cmp	r5, #0
    4110:	bne	4130 <coda_cursor_read_int32+0xb8>
    4114:	mvn	r0, #99	; 0x63
    4118:	ldr	r1, [pc, #348]	; 427c <coda_cursor_read_int32+0x204>
    411c:	ldr	r2, [pc, #336]	; 4274 <coda_cursor_read_int32+0x1fc>
    4120:	movw	r3, #2006	; 0x7d6
    4124:	bl	0 <coda_set_error>
    4128:	mvn	r0, #0
    412c:	b	425c <coda_cursor_read_int32+0x1e4>
    4130:	add	r1, sp, #24
    4134:	mov	r0, r4
    4138:	bl	908 <get_read_type>
    413c:	cmp	r0, #0
    4140:	beq	414c <coda_cursor_read_int32+0xd4>
    4144:	mvn	r0, #0
    4148:	b	425c <coda_cursor_read_int32+0x1e4>
    414c:	ldr	r3, [sp, #24]
    4150:	cmp	r3, #2
    4154:	bcs	41b0 <coda_cursor_read_int32+0x138>
    4158:	cmp	r3, #0
    415c:	bne	4188 <coda_cursor_read_int32+0x110>
    4160:	add	r1, sp, #16
    4164:	mov	r0, r4
    4168:	bl	121c <read_int8>
    416c:	cmp	r0, #0
    4170:	beq	417c <coda_cursor_read_int32+0x104>
    4174:	mvn	r0, #0
    4178:	b	425c <coda_cursor_read_int32+0x1e4>
    417c:	ldrsb	r2, [sp, #16]
    4180:	str	r2, [r5]
    4184:	b	4258 <coda_cursor_read_int32+0x1e0>
    4188:	add	r1, sp, #17
    418c:	mov	r0, r4
    4190:	bl	1328 <read_uint8>
    4194:	cmp	r0, #0
    4198:	beq	41a4 <coda_cursor_read_int32+0x12c>
    419c:	mvn	r0, #0
    41a0:	b	425c <coda_cursor_read_int32+0x1e4>
    41a4:	ldrb	r0, [sp, #17]
    41a8:	str	r0, [r5]
    41ac:	b	4258 <coda_cursor_read_int32+0x1e0>
    41b0:	cmp	r3, #2
    41b4:	beq	4234 <coda_cursor_read_int32+0x1bc>
    41b8:	cmp	r3, #3
    41bc:	beq	420c <coda_cursor_read_int32+0x194>
    41c0:	cmp	r3, #4
    41c4:	bne	41e4 <coda_cursor_read_int32+0x16c>
    41c8:	mov	r1, r5
    41cc:	mov	r0, r4
    41d0:	bl	1610 <read_int32>
    41d4:	cmp	r0, #0
    41d8:	beq	4258 <coda_cursor_read_int32+0x1e0>
    41dc:	mvn	r0, #0
    41e0:	b	425c <coda_cursor_read_int32+0x1e4>
    41e4:	ldr	r0, [sp, #24]
    41e8:	bl	0 <coda_type_get_native_type_name>
    41ec:	mvn	r2, #104	; 0x68
    41f0:	ldr	r1, [pc, #120]	; 4270 <coda_cursor_read_int32+0x1f8>
    41f4:	mov	ip, r0
    41f8:	mov	r0, r2
    41fc:	mov	r2, ip
    4200:	bl	0 <coda_set_error>
    4204:	mvn	r0, #0
    4208:	b	425c <coda_cursor_read_int32+0x1e4>
    420c:	add	r1, sp, #18
    4210:	mov	r0, r4
    4214:	bl	1518 <read_uint16>
    4218:	cmp	r0, #0
    421c:	beq	4228 <coda_cursor_read_int32+0x1b0>
    4220:	mvn	r0, #0
    4224:	b	425c <coda_cursor_read_int32+0x1e4>
    4228:	ldrh	r2, [sp, #18]
    422c:	str	r2, [r5]
    4230:	b	4258 <coda_cursor_read_int32+0x1e0>
    4234:	add	r1, sp, #20
    4238:	mov	r0, r4
    423c:	bl	1420 <read_int16>
    4240:	cmp	r0, #0
    4244:	beq	4250 <coda_cursor_read_int32+0x1d8>
    4248:	mvn	r0, #0
    424c:	b	425c <coda_cursor_read_int32+0x1e4>
    4250:	ldrsh	r3, [sp, #20]
    4254:	str	r3, [r5]
    4258:	mov	r0, #0
    425c:	ldr	r4, [sp, #8]
    4260:	ldr	r5, [sp, #12]
    4264:	ldr	lr, [sp, #4]
    4268:	add	sp, sp, #32
    426c:	bx	lr
    4270:	.word	0x000001d0
    4274:	.word	0x00000453
    4278:	.word	0x0000022b
    427c:	.word	0x0000005b

00004280 <coda_cursor_read_uint32>:
    4280:	mov	ip, sp
    4284:	sub	sp, sp, #24
    4288:	str	ip, [sp]
    428c:	str	lr, [sp, #4]
    4290:	str	r4, [sp, #8]
    4294:	str	r5, [sp, #12]
    4298:	mov	r5, r1
    429c:	mov	r4, r0
    42a0:	cmp	r4, #0
    42a4:	beq	42bc <coda_cursor_read_uint32+0x3c>
    42a8:	ldr	r1, [r4, #4]
    42ac:	cmp	r1, #0
    42b0:	movle	ip, #1
    42b4:	movgt	ip, #0
    42b8:	b	42c0 <coda_cursor_read_uint32+0x40>
    42bc:	mov	ip, #1
    42c0:	cmp	ip, #0
    42c4:	bne	42ec <coda_cursor_read_uint32+0x6c>
    42c8:	ldr	r3, [r4, #4]
    42cc:	lsl	r0, r3, #4
    42d0:	add	r1, r4, r0
    42d4:	sub	lr, r1, #4096	; 0x1000
    42d8:	ldr	ip, [lr, #4088]	; 0xff8
    42dc:	cmp	ip, #0
    42e0:	moveq	r2, #1
    42e4:	movne	r2, #0
    42e8:	b	42f0 <coda_cursor_read_uint32+0x70>
    42ec:	mov	r2, #1
    42f0:	cmp	r2, #0
    42f4:	beq	4314 <coda_cursor_read_uint32+0x94>
    42f8:	mvn	r0, #99	; 0x63
    42fc:	ldr	r1, [pc, #280]	; 441c <coda_cursor_read_uint32+0x19c>
    4300:	ldr	r2, [pc, #272]	; 4418 <coda_cursor_read_uint32+0x198>
    4304:	movw	r3, #2094	; 0x82e
    4308:	bl	0 <coda_set_error>
    430c:	mvn	r0, #0
    4310:	b	4404 <coda_cursor_read_uint32+0x184>
    4314:	cmp	r5, #0
    4318:	bne	4338 <coda_cursor_read_uint32+0xb8>
    431c:	mvn	r0, #99	; 0x63
    4320:	ldr	r1, [pc, #252]	; 4424 <coda_cursor_read_uint32+0x1a4>
    4324:	ldr	r2, [pc, #236]	; 4418 <coda_cursor_read_uint32+0x198>
    4328:	movw	r3, #2099	; 0x833
    432c:	bl	0 <coda_set_error>
    4330:	mvn	r0, #0
    4334:	b	4404 <coda_cursor_read_uint32+0x184>
    4338:	add	r1, sp, #20
    433c:	mov	r0, r4
    4340:	bl	908 <get_read_type>
    4344:	cmp	r0, #0
    4348:	beq	4354 <coda_cursor_read_uint32+0xd4>
    434c:	mvn	r0, #0
    4350:	b	4404 <coda_cursor_read_uint32+0x184>
    4354:	ldr	r1, [sp, #20]
    4358:	cmp	r1, #1
    435c:	beq	43dc <coda_cursor_read_uint32+0x15c>
    4360:	cmp	r1, #3
    4364:	beq	43b4 <coda_cursor_read_uint32+0x134>
    4368:	cmp	r1, #5
    436c:	bne	438c <coda_cursor_read_uint32+0x10c>
    4370:	mov	r1, r5
    4374:	mov	r0, r4
    4378:	bl	1708 <read_uint32>
    437c:	cmp	r0, #0
    4380:	beq	4400 <coda_cursor_read_uint32+0x180>
    4384:	mvn	r0, #0
    4388:	b	4404 <coda_cursor_read_uint32+0x184>
    438c:	ldr	r0, [sp, #20]
    4390:	bl	0 <coda_type_get_native_type_name>
    4394:	mvn	r2, #104	; 0x68
    4398:	ldr	r1, [pc, #128]	; 4420 <coda_cursor_read_uint32+0x1a0>
    439c:	mov	r3, r0
    43a0:	mov	r0, r2
    43a4:	mov	r2, r3
    43a8:	bl	0 <coda_set_error>
    43ac:	mvn	r0, #0
    43b0:	b	4404 <coda_cursor_read_uint32+0x184>
    43b4:	add	r1, sp, #18
    43b8:	mov	r0, r4
    43bc:	bl	1518 <read_uint16>
    43c0:	cmp	r0, #0
    43c4:	beq	43d0 <coda_cursor_read_uint32+0x150>
    43c8:	mvn	r0, #0
    43cc:	b	4404 <coda_cursor_read_uint32+0x184>
    43d0:	ldrh	r3, [sp, #18]
    43d4:	str	r3, [r5]
    43d8:	b	4400 <coda_cursor_read_uint32+0x180>
    43dc:	add	r1, sp, #16
    43e0:	mov	r0, r4
    43e4:	bl	1328 <read_uint8>
    43e8:	cmp	r0, #0
    43ec:	beq	43f8 <coda_cursor_read_uint32+0x178>
    43f0:	mvn	r0, #0
    43f4:	b	4404 <coda_cursor_read_uint32+0x184>
    43f8:	ldrb	r0, [sp, #16]
    43fc:	str	r0, [r5]
    4400:	mov	r0, #0
    4404:	ldr	r4, [sp, #8]
    4408:	ldr	r5, [sp, #12]
    440c:	ldr	lr, [sp, #4]
    4410:	add	sp, sp, #24
    4414:	bx	lr
    4418:	.word	0x00000453
    441c:	.word	0x0000022b
    4420:	.word	0x000001fd
    4424:	.word	0x0000005b

00004428 <coda_cursor_read_int64>:
    4428:	mov	ip, sp
    442c:	sub	sp, sp, #40	; 0x28
    4430:	str	ip, [sp]
    4434:	str	lr, [sp, #4]
    4438:	str	r4, [sp, #8]
    443c:	str	r5, [sp, #12]
    4440:	mov	r5, r1
    4444:	mov	r4, r0
    4448:	cmp	r4, #0
    444c:	beq	4464 <coda_cursor_read_int64+0x3c>
    4450:	ldr	r3, [r4, #4]
    4454:	cmp	r3, #0
    4458:	movle	r0, #1
    445c:	movgt	r0, #0
    4460:	b	4468 <coda_cursor_read_int64+0x40>
    4464:	mov	r0, #1
    4468:	cmp	r0, #0
    446c:	bne	4494 <coda_cursor_read_int64+0x6c>
    4470:	ldr	r0, [r4, #4]
    4474:	lsl	r1, r0, #4
    4478:	add	r3, r4, r1
    447c:	sub	lr, r3, #4096	; 0x1000
    4480:	ldr	r0, [lr, #4088]	; 0xff8
    4484:	cmp	r0, #0
    4488:	moveq	r3, #1
    448c:	movne	r3, #0
    4490:	b	4498 <coda_cursor_read_int64+0x70>
    4494:	mov	r3, #1
    4498:	cmp	r3, #0
    449c:	beq	44bc <coda_cursor_read_int64+0x94>
    44a0:	mvn	r0, #99	; 0x63
    44a4:	ldr	r1, [pc, #508]	; 46a8 <coda_cursor_read_int64+0x280>
    44a8:	ldr	r2, [pc, #500]	; 46a4 <coda_cursor_read_int64+0x27c>
    44ac:	movw	r3, #2169	; 0x879
    44b0:	bl	0 <coda_set_error>
    44b4:	mvn	r0, #0
    44b8:	b	468c <coda_cursor_read_int64+0x264>
    44bc:	cmp	r5, #0
    44c0:	bne	44e0 <coda_cursor_read_int64+0xb8>
    44c4:	mvn	r0, #99	; 0x63
    44c8:	ldr	r1, [pc, #476]	; 46ac <coda_cursor_read_int64+0x284>
    44cc:	ldr	r2, [pc, #464]	; 46a4 <coda_cursor_read_int64+0x27c>
    44d0:	movw	r3, #2174	; 0x87e
    44d4:	bl	0 <coda_set_error>
    44d8:	mvn	r0, #0
    44dc:	b	468c <coda_cursor_read_int64+0x264>
    44e0:	add	r1, sp, #32
    44e4:	mov	r0, r4
    44e8:	bl	908 <get_read_type>
    44ec:	cmp	r0, #0
    44f0:	beq	44fc <coda_cursor_read_int64+0xd4>
    44f4:	mvn	r0, #0
    44f8:	b	468c <coda_cursor_read_int64+0x264>
    44fc:	ldr	r0, [sp, #32]
    4500:	cmp	r0, #7
    4504:	bcs	4670 <coda_cursor_read_int64+0x248>
    4508:	add	pc, pc, r0, lsl #2
    450c:	nop	{0}
    4510:	b	452c <coda_cursor_read_int64+0x104>
    4514:	b	455c <coda_cursor_read_int64+0x134>
    4518:	b	458c <coda_cursor_read_int64+0x164>
    451c:	b	45bc <coda_cursor_read_int64+0x194>
    4520:	b	45ec <coda_cursor_read_int64+0x1c4>
    4524:	b	461c <coda_cursor_read_int64+0x1f4>
    4528:	b	464c <coda_cursor_read_int64+0x224>
    452c:	add	r1, sp, #16
    4530:	mov	r0, r4
    4534:	bl	121c <read_int8>
    4538:	cmp	r0, #0
    453c:	beq	4548 <coda_cursor_read_int64+0x120>
    4540:	mvn	r0, #0
    4544:	b	468c <coda_cursor_read_int64+0x264>
    4548:	ldrsb	r0, [sp, #16]
    454c:	asr	r1, r0, #31
    4550:	str	r0, [r5]
    4554:	str	r1, [r5, #4]
    4558:	b	4668 <coda_cursor_read_int64+0x240>
    455c:	add	r1, sp, #17
    4560:	mov	r0, r4
    4564:	bl	1328 <read_uint8>
    4568:	cmp	r0, #0
    456c:	beq	4578 <coda_cursor_read_int64+0x150>
    4570:	mvn	r0, #0
    4574:	b	468c <coda_cursor_read_int64+0x264>
    4578:	mov	r0, #0
    457c:	ldrb	ip, [sp, #17]
    4580:	str	ip, [r5]
    4584:	str	r0, [r5, #4]
    4588:	b	4668 <coda_cursor_read_int64+0x240>
    458c:	add	r1, sp, #20
    4590:	mov	r0, r4
    4594:	bl	1420 <read_int16>
    4598:	cmp	r0, #0
    459c:	beq	45a8 <coda_cursor_read_int64+0x180>
    45a0:	mvn	r0, #0
    45a4:	b	468c <coda_cursor_read_int64+0x264>
    45a8:	ldrsh	r1, [sp, #20]
    45ac:	asr	r2, r1, #31
    45b0:	str	r1, [r5]
    45b4:	str	r2, [r5, #4]
    45b8:	b	4668 <coda_cursor_read_int64+0x240>
    45bc:	add	r1, sp, #18
    45c0:	mov	r0, r4
    45c4:	bl	1518 <read_uint16>
    45c8:	cmp	r0, #0
    45cc:	beq	45d8 <coda_cursor_read_int64+0x1b0>
    45d0:	mvn	r0, #0
    45d4:	b	468c <coda_cursor_read_int64+0x264>
    45d8:	mov	r2, #0
    45dc:	ldrh	r1, [sp, #18]
    45e0:	str	r1, [r5]
    45e4:	str	r2, [r5, #4]
    45e8:	b	4668 <coda_cursor_read_int64+0x240>
    45ec:	add	r1, sp, #28
    45f0:	mov	r0, r4
    45f4:	bl	1610 <read_int32>
    45f8:	cmp	r0, #0
    45fc:	beq	4608 <coda_cursor_read_int64+0x1e0>
    4600:	mvn	r0, #0
    4604:	b	468c <coda_cursor_read_int64+0x264>
    4608:	ldr	r3, [sp, #28]
    460c:	asr	ip, r3, #31
    4610:	str	r3, [r5]
    4614:	str	ip, [r5, #4]
    4618:	b	4668 <coda_cursor_read_int64+0x240>
    461c:	add	r1, sp, #24
    4620:	mov	r0, r4
    4624:	bl	1708 <read_uint32>
    4628:	cmp	r0, #0
    462c:	beq	4638 <coda_cursor_read_int64+0x210>
    4630:	mvn	r0, #0
    4634:	b	468c <coda_cursor_read_int64+0x264>
    4638:	mov	r3, #0
    463c:	ldr	r2, [sp, #24]
    4640:	str	r2, [r5]
    4644:	str	r3, [r5, #4]
    4648:	b	4668 <coda_cursor_read_int64+0x240>
    464c:	mov	r1, r5
    4650:	mov	r0, r4
    4654:	bl	1800 <read_int64>
    4658:	cmp	r0, #0
    465c:	beq	4668 <coda_cursor_read_int64+0x240>
    4660:	mvn	r0, #0
    4664:	b	468c <coda_cursor_read_int64+0x264>
    4668:	mov	r0, #0
    466c:	b	468c <coda_cursor_read_int64+0x264>
    4670:	ldr	r0, [sp, #32]
    4674:	bl	0 <coda_type_get_native_type_name>
    4678:	mov	r2, r0
    467c:	mvn	r0, #104	; 0x68
    4680:	ldr	r1, [pc, #24]	; 46a0 <coda_cursor_read_int64+0x278>
    4684:	bl	0 <coda_set_error>
    4688:	mvn	r0, #0
    468c:	ldr	r4, [sp, #8]
    4690:	ldr	r5, [sp, #12]
    4694:	ldr	lr, [sp, #4]
    4698:	add	sp, sp, #40	; 0x28
    469c:	bx	lr
    46a0:	.word	0x00000106
    46a4:	.word	0x00000453
    46a8:	.word	0x0000022b
    46ac:	.word	0x0000005b

000046b0 <coda_cursor_read_uint64>:
    46b0:	mov	ip, sp
    46b4:	sub	sp, sp, #32
    46b8:	str	ip, [sp]
    46bc:	str	lr, [sp, #4]
    46c0:	str	r4, [sp, #8]
    46c4:	str	r5, [sp, #12]
    46c8:	mov	r5, r1
    46cc:	mov	r4, r0
    46d0:	cmp	r4, #0
    46d4:	beq	46ec <coda_cursor_read_uint64+0x3c>
    46d8:	ldr	r1, [r4, #4]
    46dc:	cmp	r1, #0
    46e0:	movle	r3, #1
    46e4:	movgt	r3, #0
    46e8:	b	46f0 <coda_cursor_read_uint64+0x40>
    46ec:	mov	r3, #1
    46f0:	cmp	r3, #0
    46f4:	bne	471c <coda_cursor_read_uint64+0x6c>
    46f8:	ldr	r2, [r4, #4]
    46fc:	lsl	r3, r2, #4
    4700:	add	r1, r4, r3
    4704:	sub	lr, r1, #4096	; 0x1000
    4708:	ldr	r3, [lr, #4088]	; 0xff8
    470c:	cmp	r3, #0
    4710:	moveq	ip, #1
    4714:	movne	ip, #0
    4718:	b	4720 <coda_cursor_read_uint64+0x70>
    471c:	mov	ip, #1
    4720:	cmp	ip, #0
    4724:	beq	4744 <coda_cursor_read_uint64+0x94>
    4728:	mvn	r0, #99	; 0x63
    472c:	ldr	r1, [pc, #364]	; 48a0 <coda_cursor_read_uint64+0x1f0>
    4730:	ldr	r2, [pc, #356]	; 489c <coda_cursor_read_uint64+0x1ec>
    4734:	movw	r3, #2285	; 0x8ed
    4738:	bl	0 <coda_set_error>
    473c:	mvn	r0, #0
    4740:	b	4884 <coda_cursor_read_uint64+0x1d4>
    4744:	cmp	r5, #0
    4748:	bne	4768 <coda_cursor_read_uint64+0xb8>
    474c:	mvn	r0, #99	; 0x63
    4750:	ldr	r1, [pc, #332]	; 48a4 <coda_cursor_read_uint64+0x1f4>
    4754:	ldr	r2, [pc, #320]	; 489c <coda_cursor_read_uint64+0x1ec>
    4758:	movw	r3, #2290	; 0x8f2
    475c:	bl	0 <coda_set_error>
    4760:	mvn	r0, #0
    4764:	b	4884 <coda_cursor_read_uint64+0x1d4>
    4768:	add	r1, sp, #20
    476c:	mov	r0, r4
    4770:	bl	908 <get_read_type>
    4774:	cmp	r0, #0
    4778:	beq	4784 <coda_cursor_read_uint64+0xd4>
    477c:	mvn	r0, #0
    4780:	b	4884 <coda_cursor_read_uint64+0x1d4>
    4784:	ldr	r0, [sp, #20]
    4788:	cmp	r0, #5
    478c:	bcs	4800 <coda_cursor_read_uint64+0x150>
    4790:	cmp	r0, #1
    4794:	beq	47d0 <coda_cursor_read_uint64+0x120>
    4798:	cmp	r0, #3
    479c:	bne	482c <coda_cursor_read_uint64+0x17c>
    47a0:	add	r1, sp, #18
    47a4:	mov	r0, r4
    47a8:	bl	1518 <read_uint16>
    47ac:	cmp	r0, #0
    47b0:	beq	47bc <coda_cursor_read_uint64+0x10c>
    47b4:	mvn	r0, #0
    47b8:	b	4884 <coda_cursor_read_uint64+0x1d4>
    47bc:	mov	r1, #0
    47c0:	ldrh	r0, [sp, #18]
    47c4:	str	r0, [r5]
    47c8:	str	r1, [r5, #4]
    47cc:	b	4880 <coda_cursor_read_uint64+0x1d0>
    47d0:	add	r1, sp, #16
    47d4:	mov	r0, r4
    47d8:	bl	1328 <read_uint8>
    47dc:	cmp	r0, #0
    47e0:	beq	47ec <coda_cursor_read_uint64+0x13c>
    47e4:	mvn	r0, #0
    47e8:	b	4884 <coda_cursor_read_uint64+0x1d4>
    47ec:	mov	ip, #0
    47f0:	ldrb	r3, [sp, #16]
    47f4:	str	r3, [r5]
    47f8:	str	ip, [r5, #4]
    47fc:	b	4880 <coda_cursor_read_uint64+0x1d0>
    4800:	cmp	r0, #5
    4804:	beq	4854 <coda_cursor_read_uint64+0x1a4>
    4808:	cmp	r0, #7
    480c:	bne	482c <coda_cursor_read_uint64+0x17c>
    4810:	mov	r1, r5
    4814:	mov	r0, r4
    4818:	bl	18f8 <read_uint64>
    481c:	cmp	r0, #0
    4820:	beq	4880 <coda_cursor_read_uint64+0x1d0>
    4824:	mvn	r0, #0
    4828:	b	4884 <coda_cursor_read_uint64+0x1d4>
    482c:	ldr	r0, [sp, #20]
    4830:	bl	0 <coda_type_get_native_type_name>
    4834:	mvn	r2, #104	; 0x68
    4838:	ldr	r1, [pc, #88]	; 4898 <coda_cursor_read_uint64+0x1e8>
    483c:	mov	r3, r0
    4840:	mov	r0, r2
    4844:	mov	r2, r3
    4848:	bl	0 <coda_set_error>
    484c:	mvn	r0, #0
    4850:	b	4884 <coda_cursor_read_uint64+0x1d4>
    4854:	add	r1, sp, #24
    4858:	mov	r0, r4
    485c:	bl	1708 <read_uint32>
    4860:	cmp	r0, #0
    4864:	beq	4870 <coda_cursor_read_uint64+0x1c0>
    4868:	mvn	r0, #0
    486c:	b	4884 <coda_cursor_read_uint64+0x1d4>
    4870:	mov	r1, #0
    4874:	ldr	r0, [sp, #24]
    4878:	str	r0, [r5]
    487c:	str	r1, [r5, #4]
    4880:	mov	r0, #0
    4884:	ldr	r4, [sp, #8]
    4888:	ldr	r5, [sp, #12]
    488c:	ldr	lr, [sp, #4]
    4890:	add	sp, sp, #32
    4894:	bx	lr
    4898:	.word	0x000000a5
    489c:	.word	0x00000453
    48a0:	.word	0x0000022b
    48a4:	.word	0x0000005b

000048a8 <coda_cursor_read_float>:
    48a8:	mov	ip, sp
    48ac:	sub	sp, sp, #72	; 0x48
    48b0:	str	ip, [sp]
    48b4:	str	lr, [sp, #4]
    48b8:	str	r4, [sp, #8]
    48bc:	str	r5, [sp, #12]
    48c0:	mov	r5, r1
    48c4:	mov	r4, r0
    48c8:	cmp	r4, #0
    48cc:	beq	48e4 <coda_cursor_read_float+0x3c>
    48d0:	ldr	r0, [r4, #4]
    48d4:	cmp	r0, #0
    48d8:	movle	r0, #1
    48dc:	movgt	r0, #0
    48e0:	b	48e8 <coda_cursor_read_float+0x40>
    48e4:	mov	r0, #1
    48e8:	cmp	r0, #0
    48ec:	bne	4914 <coda_cursor_read_float+0x6c>
    48f0:	ldr	r1, [r4, #4]
    48f4:	lsl	r2, r1, #4
    48f8:	add	r1, r4, r2
    48fc:	sub	lr, r1, #4096	; 0x1000
    4900:	ldr	r0, [lr, #4088]	; 0xff8
    4904:	cmp	r0, #0
    4908:	moveq	r1, #1
    490c:	movne	r1, #0
    4910:	b	4918 <coda_cursor_read_float+0x70>
    4914:	mov	r1, #1
    4918:	cmp	r1, #0
    491c:	beq	493c <coda_cursor_read_float+0x94>
    4920:	mvn	r0, #99	; 0x63
    4924:	ldr	r1, [pc, #716]	; 4bf8 <coda_cursor_read_float+0x350>
    4928:	ldr	r2, [pc, #708]	; 4bf4 <coda_cursor_read_float+0x34c>
    492c:	movw	r3, #2375	; 0x947
    4930:	bl	0 <coda_set_error>
    4934:	mvn	r0, #0
    4938:	b	4be0 <coda_cursor_read_float+0x338>
    493c:	cmp	r5, #0
    4940:	bne	4960 <coda_cursor_read_float+0xb8>
    4944:	mvn	r0, #99	; 0x63
    4948:	ldr	r1, [pc, #688]	; 4c00 <coda_cursor_read_float+0x358>
    494c:	ldr	r2, [pc, #672]	; 4bf4 <coda_cursor_read_float+0x34c>
    4950:	movw	r3, #2380	; 0x94c
    4954:	bl	0 <coda_set_error>
    4958:	mvn	r0, #0
    495c:	b	4be0 <coda_cursor_read_float+0x338>
    4960:	add	r1, sp, #28
    4964:	add	r2, sp, #32
    4968:	mov	r0, r4
    496c:	bl	a00 <get_unconverted_read_type>
    4970:	cmp	r0, #0
    4974:	beq	4980 <coda_cursor_read_float+0xd8>
    4978:	mvn	r0, #0
    497c:	b	4be0 <coda_cursor_read_float+0x338>
    4980:	ldr	ip, [sp, #32]
    4984:	cmp	ip, #0
    4988:	beq	49bc <coda_cursor_read_float+0x114>
    498c:	add	r1, sp, #64	; 0x40
    4990:	mov	r0, r4
    4994:	bl	4c04 <coda_cursor_read_double>
    4998:	cmp	r0, #0
    499c:	beq	49a8 <coda_cursor_read_float+0x100>
    49a0:	mvn	r0, #0
    49a4:	b	4be0 <coda_cursor_read_float+0x338>
    49a8:	vldr	d1, [sp, #64]	; 0x40
    49ac:	vcvt.f32.f64	s0, d1
    49b0:	vstr	s0, [r5]
    49b4:	mov	r0, #0
    49b8:	b	4be0 <coda_cursor_read_float+0x338>
    49bc:	ldr	r0, [sp, #28]
    49c0:	cmp	r0, #10
    49c4:	bcs	4bc4 <coda_cursor_read_float+0x31c>
    49c8:	add	pc, pc, r0, lsl #2
    49cc:	nop	{0}
    49d0:	b	49f8 <coda_cursor_read_float+0x150>
    49d4:	b	4a28 <coda_cursor_read_float+0x180>
    49d8:	b	4a58 <coda_cursor_read_float+0x1b0>
    49dc:	b	4a88 <coda_cursor_read_float+0x1e0>
    49e0:	b	4ab8 <coda_cursor_read_float+0x210>
    49e4:	b	4ae8 <coda_cursor_read_float+0x240>
    49e8:	b	4b18 <coda_cursor_read_float+0x270>
    49ec:	b	4b48 <coda_cursor_read_float+0x2a0>
    49f0:	b	4b78 <coda_cursor_read_float+0x2d0>
    49f4:	b	4b94 <coda_cursor_read_float+0x2ec>
    49f8:	add	r1, sp, #16
    49fc:	mov	r0, r4
    4a00:	bl	121c <read_int8>
    4a04:	cmp	r0, #0
    4a08:	beq	4a14 <coda_cursor_read_float+0x16c>
    4a0c:	mvn	r0, #0
    4a10:	b	4be0 <coda_cursor_read_float+0x338>
    4a14:	ldrsb	ip, [sp, #16]
    4a18:	vmov	s4, ip
    4a1c:	vcvt.f32.s32	s4, s4
    4a20:	vstr	s4, [r5]
    4a24:	b	4bbc <coda_cursor_read_float+0x314>
    4a28:	add	r1, sp, #17
    4a2c:	mov	r0, r4
    4a30:	bl	1328 <read_uint8>
    4a34:	cmp	r0, #0
    4a38:	beq	4a44 <coda_cursor_read_float+0x19c>
    4a3c:	mvn	r0, #0
    4a40:	b	4be0 <coda_cursor_read_float+0x338>
    4a44:	ldrb	r0, [sp, #17]
    4a48:	vmov	s12, r0
    4a4c:	vcvt.f32.u32	s12, s12
    4a50:	vstr	s12, [r5]
    4a54:	b	4bbc <coda_cursor_read_float+0x314>
    4a58:	add	r1, sp, #18
    4a5c:	mov	r0, r4
    4a60:	bl	1420 <read_int16>
    4a64:	cmp	r0, #0
    4a68:	beq	4a74 <coda_cursor_read_float+0x1cc>
    4a6c:	mvn	r0, #0
    4a70:	b	4be0 <coda_cursor_read_float+0x338>
    4a74:	ldrsh	ip, [sp, #18]
    4a78:	vmov	s8, ip
    4a7c:	vcvt.f32.s32	s8, s8
    4a80:	vstr	s8, [r5]
    4a84:	b	4bbc <coda_cursor_read_float+0x314>
    4a88:	add	r1, sp, #20
    4a8c:	mov	r0, r4
    4a90:	bl	1518 <read_uint16>
    4a94:	cmp	r0, #0
    4a98:	beq	4aa4 <coda_cursor_read_float+0x1fc>
    4a9c:	mvn	r0, #0
    4aa0:	b	4be0 <coda_cursor_read_float+0x338>
    4aa4:	ldrh	ip, [sp, #20]
    4aa8:	vmov	s0, ip
    4aac:	vcvt.f32.u32	s0, s0
    4ab0:	vstr	s0, [r5]
    4ab4:	b	4bbc <coda_cursor_read_float+0x314>
    4ab8:	add	r1, sp, #36	; 0x24
    4abc:	mov	r0, r4
    4ac0:	bl	1610 <read_int32>
    4ac4:	cmp	r0, #0
    4ac8:	beq	4ad4 <coda_cursor_read_float+0x22c>
    4acc:	mvn	r0, #0
    4ad0:	b	4be0 <coda_cursor_read_float+0x338>
    4ad4:	ldr	r3, [sp, #36]	; 0x24
    4ad8:	vmov	s2, r3
    4adc:	vcvt.f32.s32	s2, s2
    4ae0:	vstr	s2, [r5]
    4ae4:	b	4bbc <coda_cursor_read_float+0x314>
    4ae8:	add	r1, sp, #24
    4aec:	mov	r0, r4
    4af0:	bl	1708 <read_uint32>
    4af4:	cmp	r0, #0
    4af8:	beq	4b04 <coda_cursor_read_float+0x25c>
    4afc:	mvn	r0, #0
    4b00:	b	4be0 <coda_cursor_read_float+0x338>
    4b04:	ldr	r3, [sp, #24]
    4b08:	vmov	s4, r3
    4b0c:	vcvt.f32.u32	s4, s4
    4b10:	vstr	s4, [r5]
    4b14:	b	4bbc <coda_cursor_read_float+0x314>
    4b18:	add	r1, sp, #40	; 0x28
    4b1c:	mov	r0, r4
    4b20:	bl	1800 <read_int64>
    4b24:	cmp	r0, #0
    4b28:	beq	4b34 <coda_cursor_read_float+0x28c>
    4b2c:	mvn	r0, #0
    4b30:	b	4be0 <coda_cursor_read_float+0x338>
    4b34:	ldr	r0, [sp, #40]	; 0x28
    4b38:	ldr	r1, [sp, #44]	; 0x2c
    4b3c:	bl	0 <__compcert_i64_stof>
    4b40:	vstr	s0, [r5]
    4b44:	b	4bbc <coda_cursor_read_float+0x314>
    4b48:	add	r1, sp, #48	; 0x30
    4b4c:	mov	r0, r4
    4b50:	bl	18f8 <read_uint64>
    4b54:	cmp	r0, #0
    4b58:	beq	4b64 <coda_cursor_read_float+0x2bc>
    4b5c:	mvn	r0, #0
    4b60:	b	4be0 <coda_cursor_read_float+0x338>
    4b64:	ldr	r0, [sp, #48]	; 0x30
    4b68:	ldr	r1, [sp, #52]	; 0x34
    4b6c:	bl	0 <__compcert_i64_stof>
    4b70:	vstr	s0, [r5]
    4b74:	b	4bbc <coda_cursor_read_float+0x314>
    4b78:	mov	r1, r5
    4b7c:	mov	r0, r4
    4b80:	bl	19e4 <read_float>
    4b84:	cmp	r0, #0
    4b88:	beq	4bbc <coda_cursor_read_float+0x314>
    4b8c:	mvn	r0, #0
    4b90:	b	4be0 <coda_cursor_read_float+0x338>
    4b94:	add	r1, sp, #56	; 0x38
    4b98:	mov	r0, r4
    4b9c:	bl	1b04 <read_double>
    4ba0:	cmp	r0, #0
    4ba4:	beq	4bb0 <coda_cursor_read_float+0x308>
    4ba8:	mvn	r0, #0
    4bac:	b	4be0 <coda_cursor_read_float+0x338>
    4bb0:	vldr	d1, [sp, #56]	; 0x38
    4bb4:	vcvt.f32.f64	s6, d1
    4bb8:	vstr	s6, [r5]
    4bbc:	mov	r0, #0
    4bc0:	b	4be0 <coda_cursor_read_float+0x338>
    4bc4:	ldr	r0, [sp, #28]
    4bc8:	bl	0 <coda_type_get_native_type_name>
    4bcc:	mov	r2, r0
    4bd0:	mvn	r0, #104	; 0x68
    4bd4:	ldr	r1, [pc, #32]	; 4bfc <coda_cursor_read_float+0x354>
    4bd8:	bl	0 <coda_set_error>
    4bdc:	mvn	r0, #0
    4be0:	ldr	r4, [sp, #8]
    4be4:	ldr	r5, [sp, #12]
    4be8:	ldr	lr, [sp, #4]
    4bec:	add	sp, sp, #72	; 0x48
    4bf0:	bx	lr
    4bf4:	.word	0x00000453
    4bf8:	.word	0x0000022b
    4bfc:	.word	0x0000026f
    4c00:	.word	0x0000005b

00004c04 <coda_cursor_read_double>:
    4c04:	mov	ip, sp
    4c08:	sub	sp, sp, #64	; 0x40
    4c0c:	str	ip, [sp]
    4c10:	str	lr, [sp, #4]
    4c14:	str	r4, [sp, #8]
    4c18:	str	r5, [sp, #12]
    4c1c:	mov	r4, r1
    4c20:	mov	r5, r0
    4c24:	cmp	r5, #0
    4c28:	beq	4c40 <coda_cursor_read_double+0x3c>
    4c2c:	ldr	r1, [r5, #4]
    4c30:	cmp	r1, #0
    4c34:	movle	r2, #1
    4c38:	movgt	r2, #0
    4c3c:	b	4c44 <coda_cursor_read_double+0x40>
    4c40:	mov	r2, #1
    4c44:	cmp	r2, #0
    4c48:	bne	4c70 <coda_cursor_read_double+0x6c>
    4c4c:	ldr	ip, [r5, #4]
    4c50:	lsl	r0, ip, #4
    4c54:	add	r1, r5, r0
    4c58:	sub	lr, r1, #4096	; 0x1000
    4c5c:	ldr	r2, [lr, #4088]	; 0xff8
    4c60:	cmp	r2, #0
    4c64:	moveq	r1, #1
    4c68:	movne	r1, #0
    4c6c:	b	4c74 <coda_cursor_read_double+0x70>
    4c70:	mov	r1, #1
    4c74:	cmp	r1, #0
    4c78:	beq	4c98 <coda_cursor_read_double+0x94>
    4c7c:	mvn	r0, #99	; 0x63
    4c80:	ldr	r1, [pc, #756]	; 4f7c <coda_cursor_read_double+0x378>
    4c84:	ldr	r2, [pc, #748]	; 4f78 <coda_cursor_read_double+0x374>
    4c88:	movw	r3, #2543	; 0x9ef
    4c8c:	bl	0 <coda_set_error>
    4c90:	mvn	r0, #0
    4c94:	b	4f60 <coda_cursor_read_double+0x35c>
    4c98:	cmp	r4, #0
    4c9c:	bne	4cbc <coda_cursor_read_double+0xb8>
    4ca0:	mvn	r0, #99	; 0x63
    4ca4:	ldr	r1, [pc, #724]	; 4f80 <coda_cursor_read_double+0x37c>
    4ca8:	ldr	r2, [pc, #712]	; 4f78 <coda_cursor_read_double+0x374>
    4cac:	movw	r3, #2548	; 0x9f4
    4cb0:	bl	0 <coda_set_error>
    4cb4:	mvn	r0, #0
    4cb8:	b	4f60 <coda_cursor_read_double+0x35c>
    4cbc:	add	r1, sp, #28
    4cc0:	add	r2, sp, #32
    4cc4:	mov	r0, r5
    4cc8:	bl	a00 <get_unconverted_read_type>
    4ccc:	cmp	r0, #0
    4cd0:	beq	4cdc <coda_cursor_read_double+0xd8>
    4cd4:	mvn	r0, #0
    4cd8:	b	4f60 <coda_cursor_read_double+0x35c>
    4cdc:	ldr	r0, [sp, #28]
    4ce0:	cmp	r0, #10
    4ce4:	bcs	4f44 <coda_cursor_read_double+0x340>
    4ce8:	add	pc, pc, r0, lsl #2
    4cec:	nop	{0}
    4cf0:	b	4d18 <coda_cursor_read_double+0x114>
    4cf4:	b	4d48 <coda_cursor_read_double+0x144>
    4cf8:	b	4d78 <coda_cursor_read_double+0x174>
    4cfc:	b	4da8 <coda_cursor_read_double+0x1a4>
    4d00:	b	4dd8 <coda_cursor_read_double+0x1d4>
    4d04:	b	4e08 <coda_cursor_read_double+0x204>
    4d08:	b	4e38 <coda_cursor_read_double+0x234>
    4d0c:	b	4e68 <coda_cursor_read_double+0x264>
    4d10:	b	4e98 <coda_cursor_read_double+0x294>
    4d14:	b	4ec4 <coda_cursor_read_double+0x2c0>
    4d18:	add	r1, sp, #16
    4d1c:	mov	r0, r5
    4d20:	bl	121c <read_int8>
    4d24:	cmp	r0, #0
    4d28:	beq	4d34 <coda_cursor_read_double+0x130>
    4d2c:	mvn	r0, #0
    4d30:	b	4f60 <coda_cursor_read_double+0x35c>
    4d34:	ldrsb	r3, [sp, #16]
    4d38:	vmov	s6, r3
    4d3c:	vcvt.f64.s32	d3, s6
    4d40:	vstr	d3, [r4]
    4d44:	b	4ee0 <coda_cursor_read_double+0x2dc>
    4d48:	add	r1, sp, #17
    4d4c:	mov	r0, r5
    4d50:	bl	1328 <read_uint8>
    4d54:	cmp	r0, #0
    4d58:	beq	4d64 <coda_cursor_read_double+0x160>
    4d5c:	mvn	r0, #0
    4d60:	b	4f60 <coda_cursor_read_double+0x35c>
    4d64:	ldrb	ip, [sp, #17]
    4d68:	vmov	s2, ip
    4d6c:	vcvt.f64.u32	d1, s2
    4d70:	vstr	d1, [r4]
    4d74:	b	4ee0 <coda_cursor_read_double+0x2dc>
    4d78:	add	r1, sp, #18
    4d7c:	mov	r0, r5
    4d80:	bl	1420 <read_int16>
    4d84:	cmp	r0, #0
    4d88:	beq	4d94 <coda_cursor_read_double+0x190>
    4d8c:	mvn	r0, #0
    4d90:	b	4f60 <coda_cursor_read_double+0x35c>
    4d94:	ldrsh	ip, [sp, #18]
    4d98:	vmov	s0, ip
    4d9c:	vcvt.f64.s32	d0, s0
    4da0:	vstr	d0, [r4]
    4da4:	b	4ee0 <coda_cursor_read_double+0x2dc>
    4da8:	add	r1, sp, #20
    4dac:	mov	r0, r5
    4db0:	bl	1518 <read_uint16>
    4db4:	cmp	r0, #0
    4db8:	beq	4dc4 <coda_cursor_read_double+0x1c0>
    4dbc:	mvn	r0, #0
    4dc0:	b	4f60 <coda_cursor_read_double+0x35c>
    4dc4:	ldrh	r0, [sp, #20]
    4dc8:	vmov	s2, r0
    4dcc:	vcvt.f64.u32	d1, s2
    4dd0:	vstr	d1, [r4]
    4dd4:	b	4ee0 <coda_cursor_read_double+0x2dc>
    4dd8:	add	r1, sp, #36	; 0x24
    4ddc:	mov	r0, r5
    4de0:	bl	1610 <read_int32>
    4de4:	cmp	r0, #0
    4de8:	beq	4df4 <coda_cursor_read_double+0x1f0>
    4dec:	mvn	r0, #0
    4df0:	b	4f60 <coda_cursor_read_double+0x35c>
    4df4:	ldr	r1, [sp, #36]	; 0x24
    4df8:	vmov	s12, r1
    4dfc:	vcvt.f64.s32	d6, s12
    4e00:	vstr	d6, [r4]
    4e04:	b	4ee0 <coda_cursor_read_double+0x2dc>
    4e08:	add	r1, sp, #40	; 0x28
    4e0c:	mov	r0, r5
    4e10:	bl	1708 <read_uint32>
    4e14:	cmp	r0, #0
    4e18:	beq	4e24 <coda_cursor_read_double+0x220>
    4e1c:	mvn	r0, #0
    4e20:	b	4f60 <coda_cursor_read_double+0x35c>
    4e24:	ldr	r2, [sp, #40]	; 0x28
    4e28:	vmov	s0, r2
    4e2c:	vcvt.f64.u32	d0, s0
    4e30:	vstr	d0, [r4]
    4e34:	b	4ee0 <coda_cursor_read_double+0x2dc>
    4e38:	add	r1, sp, #48	; 0x30
    4e3c:	mov	r0, r5
    4e40:	bl	1800 <read_int64>
    4e44:	cmp	r0, #0
    4e48:	beq	4e54 <coda_cursor_read_double+0x250>
    4e4c:	mvn	r0, #0
    4e50:	b	4f60 <coda_cursor_read_double+0x35c>
    4e54:	ldr	r0, [sp, #48]	; 0x30
    4e58:	ldr	r1, [sp, #52]	; 0x34
    4e5c:	bl	0 <__compcert_i64_stod>
    4e60:	vstr	d0, [r4]
    4e64:	b	4ee0 <coda_cursor_read_double+0x2dc>
    4e68:	add	r1, sp, #56	; 0x38
    4e6c:	mov	r0, r5
    4e70:	bl	18f8 <read_uint64>
    4e74:	cmp	r0, #0
    4e78:	beq	4e84 <coda_cursor_read_double+0x280>
    4e7c:	mvn	r0, #0
    4e80:	b	4f60 <coda_cursor_read_double+0x35c>
    4e84:	ldr	r0, [sp, #56]	; 0x38
    4e88:	ldr	r1, [sp, #60]	; 0x3c
    4e8c:	bl	0 <__compcert_i64_stod>
    4e90:	vstr	d0, [r4]
    4e94:	b	4ee0 <coda_cursor_read_double+0x2dc>
    4e98:	add	r1, sp, #24
    4e9c:	mov	r0, r5
    4ea0:	bl	19e4 <read_float>
    4ea4:	cmp	r0, #0
    4ea8:	beq	4eb4 <coda_cursor_read_double+0x2b0>
    4eac:	mvn	r0, #0
    4eb0:	b	4f60 <coda_cursor_read_double+0x35c>
    4eb4:	vldr	s14, [sp, #24]
    4eb8:	vcvt.f64.f32	d2, s14
    4ebc:	vstr	d2, [r4]
    4ec0:	b	4ee0 <coda_cursor_read_double+0x2dc>
    4ec4:	mov	r1, r4
    4ec8:	mov	r0, r5
    4ecc:	bl	1b04 <read_double>
    4ed0:	cmp	r0, #0
    4ed4:	beq	4ee0 <coda_cursor_read_double+0x2dc>
    4ed8:	mvn	r0, #0
    4edc:	b	4f60 <coda_cursor_read_double+0x35c>
    4ee0:	ldr	r3, [sp, #32]
    4ee4:	cmp	r3, #0
    4ee8:	beq	4f3c <coda_cursor_read_double+0x338>
    4eec:	vldr	d1, [r4]
    4ef0:	ldr	r1, [sp, #32]
    4ef4:	vldr	d3, [r1, #24]
    4ef8:	vcmp.f64	d1, d3
    4efc:	vmrs	APSR_nzcv, fpscr
    4f00:	beq	4f34 <coda_cursor_read_double+0x330>
    4f04:	vldr	d7, [r4]
    4f08:	ldr	r2, [sp, #32]
    4f0c:	vldr	d2, [r2]
    4f10:	vmul.f64	d5, d7, d2
    4f14:	ldr	r1, [sp, #32]
    4f18:	vldr	d1, [r1, #8]
    4f1c:	vdiv.f64	d5, d5, d1
    4f20:	ldr	r0, [sp, #32]
    4f24:	vldr	d4, [r0, #16]
    4f28:	vadd.f64	d6, d5, d4
    4f2c:	vstr	d6, [r4]
    4f30:	b	4f3c <coda_cursor_read_double+0x338>
    4f34:	bl	0 <coda_NaN>
    4f38:	vstr	d0, [r4]
    4f3c:	mov	r0, #0
    4f40:	b	4f60 <coda_cursor_read_double+0x35c>
    4f44:	ldr	r0, [sp, #28]
    4f48:	bl	0 <coda_type_get_native_type_name>
    4f4c:	mov	r2, r0
    4f50:	mvn	r0, #104	; 0x68
    4f54:	ldr	r1, [pc, #24]	; 4f74 <coda_cursor_read_double+0x370>
    4f58:	bl	0 <coda_set_error>
    4f5c:	mvn	r0, #0
    4f60:	ldr	r4, [sp, #8]
    4f64:	ldr	r5, [sp, #12]
    4f68:	ldr	lr, [sp, #4]
    4f6c:	add	sp, sp, #64	; 0x40
    4f70:	bx	lr
    4f74:	.word	0x000003f8
    4f78:	.word	0x00000453
    4f7c:	.word	0x0000022b
    4f80:	.word	0x0000005b

00004f84 <coda_cursor_read_char>:
    4f84:	mov	ip, sp
    4f88:	sub	sp, sp, #24
    4f8c:	str	ip, [sp]
    4f90:	str	lr, [sp, #4]
    4f94:	str	r4, [sp, #8]
    4f98:	str	r5, [sp, #12]
    4f9c:	mov	r5, r1
    4fa0:	mov	r4, r0
    4fa4:	cmp	r4, #0
    4fa8:	beq	4fc0 <coda_cursor_read_char+0x3c>
    4fac:	ldr	r3, [r4, #4]
    4fb0:	cmp	r3, #0
    4fb4:	movle	ip, #1
    4fb8:	movgt	ip, #0
    4fbc:	b	4fc4 <coda_cursor_read_char+0x40>
    4fc0:	mov	ip, #1
    4fc4:	cmp	ip, #0
    4fc8:	bne	4ff0 <coda_cursor_read_char+0x6c>
    4fcc:	ldr	ip, [r4, #4]
    4fd0:	lsl	r1, ip, #4
    4fd4:	add	r0, r4, r1
    4fd8:	sub	lr, r0, #4096	; 0x1000
    4fdc:	ldr	r0, [lr, #4088]	; 0xff8
    4fe0:	cmp	r0, #0
    4fe4:	moveq	r0, #1
    4fe8:	movne	r0, #0
    4fec:	b	4ff4 <coda_cursor_read_char+0x70>
    4ff0:	mov	r0, #1
    4ff4:	cmp	r0, #0
    4ff8:	beq	5018 <coda_cursor_read_char+0x94>
    4ffc:	mvn	r0, #99	; 0x63
    5000:	ldr	r1, [pc, #180]	; 50bc <coda_cursor_read_char+0x138>
    5004:	ldr	r2, [pc, #172]	; 50b8 <coda_cursor_read_char+0x134>
    5008:	movw	r3, #2698	; 0xa8a
    500c:	bl	0 <coda_set_error>
    5010:	mvn	r0, #0
    5014:	b	50a4 <coda_cursor_read_char+0x120>
    5018:	cmp	r5, #0
    501c:	bne	503c <coda_cursor_read_char+0xb8>
    5020:	mvn	r0, #99	; 0x63
    5024:	ldr	r1, [pc, #152]	; 50c4 <coda_cursor_read_char+0x140>
    5028:	ldr	r2, [pc, #136]	; 50b8 <coda_cursor_read_char+0x134>
    502c:	movw	r3, #2703	; 0xa8f
    5030:	bl	0 <coda_set_error>
    5034:	mvn	r0, #0
    5038:	b	50a4 <coda_cursor_read_char+0x120>
    503c:	add	r1, sp, #16
    5040:	mov	r0, r4
    5044:	bl	908 <get_read_type>
    5048:	cmp	r0, #0
    504c:	beq	5058 <coda_cursor_read_char+0xd4>
    5050:	mvn	r0, #0
    5054:	b	50a4 <coda_cursor_read_char+0x120>
    5058:	ldr	r3, [sp, #16]
    505c:	cmp	r3, #10
    5060:	bne	5088 <coda_cursor_read_char+0x104>
    5064:	mov	r1, r5
    5068:	mov	r0, r4
    506c:	bl	1c9c <read_char>
    5070:	cmp	r0, #0
    5074:	beq	5080 <coda_cursor_read_char+0xfc>
    5078:	mvn	r0, #0
    507c:	b	50a4 <coda_cursor_read_char+0x120>
    5080:	mov	r0, #0
    5084:	b	50a4 <coda_cursor_read_char+0x120>
    5088:	ldr	r0, [sp, #16]
    508c:	bl	0 <coda_type_get_native_type_name>
    5090:	mov	r2, r0
    5094:	mvn	r0, #104	; 0x68
    5098:	ldr	r1, [pc, #32]	; 50c0 <coda_cursor_read_char+0x13c>
    509c:	bl	0 <coda_set_error>
    50a0:	mvn	r0, #0
    50a4:	ldr	r4, [sp, #8]
    50a8:	ldr	r5, [sp, #12]
    50ac:	ldr	lr, [sp, #4]
    50b0:	add	sp, sp, #24
    50b4:	bx	lr
    50b8:	.word	0x00000453
    50bc:	.word	0x0000022b
    50c0:	.word	0x00000538
    50c4:	.word	0x0000005b

000050c8 <coda_cursor_read_string>:
    50c8:	mov	ip, sp
    50cc:	sub	sp, sp, #40	; 0x28
    50d0:	str	ip, [sp, #4]
    50d4:	str	lr, [sp, #8]
    50d8:	str	r4, [sp, #16]
    50dc:	str	r5, [sp, #20]
    50e0:	str	r6, [sp, #24]
    50e4:	mov	r5, r2
    50e8:	mov	r6, r1
    50ec:	mov	r4, r0
    50f0:	cmp	r6, #0
    50f4:	bne	5114 <coda_cursor_read_string+0x4c>
    50f8:	mvn	r0, #99	; 0x63
    50fc:	ldr	r1, [pc, #172]	; 51b0 <coda_cursor_read_string+0xe8>
    5100:	ldr	r2, [pc, #164]	; 51ac <coda_cursor_read_string+0xe4>
    5104:	movw	r3, #2747	; 0xabb
    5108:	bl	0 <coda_set_error>
    510c:	mvn	r0, #0
    5110:	b	518c <coda_cursor_read_string+0xc4>
    5114:	cmp	r5, #0
    5118:	bgt	5140 <coda_cursor_read_string+0x78>
    511c:	mvn	r0, #99	; 0x63
    5120:	ldr	r1, [pc, #124]	; 51a4 <coda_cursor_read_string+0xdc>
    5124:	ldr	r3, [pc, #128]	; 51ac <coda_cursor_read_string+0xe4>
    5128:	movw	r2, #2753	; 0xac1
    512c:	str	r2, [sp]
    5130:	mov	r2, r5
    5134:	bl	0 <coda_set_error>
    5138:	mvn	r0, #0
    513c:	b	518c <coda_cursor_read_string+0xc4>
    5140:	add	r1, sp, #32
    5144:	mov	r0, r4
    5148:	bl	0 <coda_cursor_has_ascii_content>
    514c:	cmp	r0, #0
    5150:	beq	515c <coda_cursor_read_string+0x94>
    5154:	mvn	r0, #0
    5158:	b	518c <coda_cursor_read_string+0xc4>
    515c:	ldr	r3, [sp, #32]
    5160:	cmp	r3, #0
    5164:	bne	517c <coda_cursor_read_string+0xb4>
    5168:	mvn	r0, #104	; 0x68
    516c:	ldr	r1, [pc, #52]	; 51a8 <coda_cursor_read_string+0xe0>
    5170:	bl	0 <coda_set_error>
    5174:	mvn	r0, #0
    5178:	b	518c <coda_cursor_read_string+0xc4>
    517c:	mov	r2, r5
    5180:	mov	r1, r6
    5184:	mov	r0, r4
    5188:	bl	1d94 <read_string>
    518c:	ldr	r4, [sp, #16]
    5190:	ldr	r5, [sp, #20]
    5194:	ldr	r6, [sp, #24]
    5198:	ldr	lr, [sp, #8]
    519c:	add	sp, sp, #40	; 0x28
    51a0:	bx	lr
    51a4:	.word	0x00000564
    51a8:	.word	0x000003ae
    51ac:	.word	0x00000453
    51b0:	.word	0x0000005b

000051b4 <coda_cursor_read_bits>:
    51b4:	mov	ip, sp
    51b8:	sub	sp, sp, #32
    51bc:	str	ip, [sp, #8]
    51c0:	str	lr, [sp, #12]
    51c4:	str	r4, [sp, #16]
    51c8:	str	r5, [sp, #20]
    51cc:	str	r6, [sp, #24]
    51d0:	ldr	r5, [ip, #4]
    51d4:	ldr	r4, [ip]
    51d8:	cmp	r0, #0
    51dc:	beq	51f4 <coda_cursor_read_bits+0x40>
    51e0:	ldr	ip, [r0, #4]
    51e4:	cmp	ip, #0
    51e8:	movle	ip, #1
    51ec:	movgt	ip, #0
    51f0:	b	51f8 <coda_cursor_read_bits+0x44>
    51f4:	mov	ip, #1
    51f8:	cmp	ip, #0
    51fc:	bne	5224 <coda_cursor_read_bits+0x70>
    5200:	ldr	ip, [r0, #4]
    5204:	lsl	ip, ip, #4
    5208:	add	ip, r0, ip
    520c:	sub	lr, ip, #4096	; 0x1000
    5210:	ldr	ip, [lr, #4088]	; 0xff8
    5214:	cmp	ip, #0
    5218:	moveq	ip, #1
    521c:	movne	ip, #0
    5220:	b	5228 <coda_cursor_read_bits+0x74>
    5224:	mov	ip, #1
    5228:	cmp	ip, #0
    522c:	beq	524c <coda_cursor_read_bits+0x98>
    5230:	mvn	r0, #99	; 0x63
    5234:	ldr	r1, [pc, #276]	; 5350 <coda_cursor_read_bits+0x19c>
    5238:	ldr	r2, [pc, #268]	; 534c <coda_cursor_read_bits+0x198>
    523c:	movw	r3, #2789	; 0xae5
    5240:	bl	0 <coda_set_error>
    5244:	mvn	r0, #0
    5248:	b	5330 <coda_cursor_read_bits+0x17c>
    524c:	cmp	r1, #0
    5250:	bne	5270 <coda_cursor_read_bits+0xbc>
    5254:	mvn	r0, #99	; 0x63
    5258:	ldr	r1, [pc, #248]	; 5358 <coda_cursor_read_bits+0x1a4>
    525c:	ldr	r2, [pc, #232]	; 534c <coda_cursor_read_bits+0x198>
    5260:	movw	r3, #2794	; 0xaea
    5264:	bl	0 <coda_set_error>
    5268:	mvn	r0, #0
    526c:	b	5330 <coda_cursor_read_bits+0x17c>
    5270:	cmp	r5, #0
    5274:	bge	5294 <coda_cursor_read_bits+0xe0>
    5278:	mvn	r0, #99	; 0x63
    527c:	ldr	r1, [pc, #208]	; 5354 <coda_cursor_read_bits+0x1a0>
    5280:	ldr	r2, [pc, #196]	; 534c <coda_cursor_read_bits+0x198>
    5284:	movw	r3, #2799	; 0xaef
    5288:	bl	0 <coda_set_error>
    528c:	mvn	r0, #0
    5290:	b	5330 <coda_cursor_read_bits+0x17c>
    5294:	mov	r6, r5
    5298:	mov	ip, r4
    529c:	orr	ip, r6, ip
    52a0:	cmp	ip, #0
    52a4:	bne	52b0 <coda_cursor_read_bits+0xfc>
    52a8:	mov	r0, #0
    52ac:	b	5330 <coda_cursor_read_bits+0x17c>
    52b0:	ldr	ip, [r0, #4]
    52b4:	lsl	ip, ip, #4
    52b8:	add	ip, r0, ip
    52bc:	sub	lr, ip, #4096	; 0x1000
    52c0:	ldr	ip, [lr, #4088]	; 0xff8
    52c4:	ldr	ip, [ip]
    52c8:	cmp	ip, #102	; 0x66
    52cc:	bcs	5320 <coda_cursor_read_bits+0x16c>
    52d0:	cmp	ip, #100	; 0x64
    52d4:	bcs	5308 <coda_cursor_read_bits+0x154>
    52d8:	cmp	ip, #0
    52dc:	beq	52f8 <coda_cursor_read_bits+0x144>
    52e0:	cmp	ip, #1
    52e4:	bne	5320 <coda_cursor_read_bits+0x16c>
    52e8:	str	r5, [sp, #4]
    52ec:	str	r4, [sp]
    52f0:	bl	0 <coda_bin_cursor_read_bits>
    52f4:	b	5330 <coda_cursor_read_bits+0x17c>
    52f8:	str	r5, [sp, #4]
    52fc:	str	r4, [sp]
    5300:	bl	0 <coda_ascii_cursor_read_bits>
    5304:	b	5330 <coda_cursor_read_bits+0x17c>
    5308:	cmp	ip, #100	; 0x64
    530c:	bne	5320 <coda_cursor_read_bits+0x16c>
    5310:	str	r5, [sp, #4]
    5314:	str	r4, [sp]
    5318:	bl	0 <coda_mem_cursor_read_bits>
    531c:	b	5330 <coda_cursor_read_bits+0x17c>
    5320:	mvn	r0, #104	; 0x68
    5324:	ldr	r1, [pc, #28]	; 5348 <coda_cursor_read_bits+0x194>
    5328:	bl	0 <coda_set_error>
    532c:	mvn	r0, #0
    5330:	ldr	r4, [sp, #16]
    5334:	ldr	r5, [sp, #20]
    5338:	ldr	r6, [sp, #24]
    533c:	ldr	lr, [sp, #12]
    5340:	add	sp, sp, #32
    5344:	bx	lr
    5348:	.word	0x0000019e
    534c:	.word	0x00000453
    5350:	.word	0x0000022b
    5354:	.word	0x000002f3
    5358:	.word	0x0000005b

0000535c <coda_cursor_read_bytes>:
    535c:	mov	ip, sp
    5360:	sub	sp, sp, #32
    5364:	str	ip, [sp, #8]
    5368:	str	lr, [sp, #12]
    536c:	str	r4, [sp, #16]
    5370:	str	r5, [sp, #20]
    5374:	str	r6, [sp, #24]
    5378:	ldr	r5, [ip, #4]
    537c:	ldr	r4, [ip]
    5380:	cmp	r0, #0
    5384:	beq	539c <coda_cursor_read_bytes+0x40>
    5388:	ldr	ip, [r0, #4]
    538c:	cmp	ip, #0
    5390:	movle	ip, #1
    5394:	movgt	ip, #0
    5398:	b	53a0 <coda_cursor_read_bytes+0x44>
    539c:	mov	ip, #1
    53a0:	cmp	ip, #0
    53a4:	bne	53cc <coda_cursor_read_bytes+0x70>
    53a8:	ldr	ip, [r0, #4]
    53ac:	lsl	ip, ip, #4
    53b0:	add	ip, r0, ip
    53b4:	sub	lr, ip, #4096	; 0x1000
    53b8:	ldr	ip, [lr, #4088]	; 0xff8
    53bc:	cmp	ip, #0
    53c0:	moveq	ip, #1
    53c4:	movne	ip, #0
    53c8:	b	53d0 <coda_cursor_read_bytes+0x74>
    53cc:	mov	ip, #1
    53d0:	cmp	ip, #0
    53d4:	beq	53f4 <coda_cursor_read_bytes+0x98>
    53d8:	mvn	r0, #99	; 0x63
    53dc:	ldr	r1, [pc, #312]	; 551c <coda_cursor_read_bytes+0x1c0>
    53e0:	ldr	r2, [pc, #304]	; 5518 <coda_cursor_read_bytes+0x1bc>
    53e4:	movw	r3, #2845	; 0xb1d
    53e8:	bl	0 <coda_set_error>
    53ec:	mvn	r0, #0
    53f0:	b	54fc <coda_cursor_read_bytes+0x1a0>
    53f4:	cmp	r1, #0
    53f8:	bne	5418 <coda_cursor_read_bytes+0xbc>
    53fc:	mvn	r0, #99	; 0x63
    5400:	ldr	r1, [pc, #288]	; 5528 <coda_cursor_read_bytes+0x1cc>
    5404:	ldr	r2, [pc, #268]	; 5518 <coda_cursor_read_bytes+0x1bc>
    5408:	movw	r3, #2850	; 0xb22
    540c:	bl	0 <coda_set_error>
    5410:	mvn	r0, #0
    5414:	b	54fc <coda_cursor_read_bytes+0x1a0>
    5418:	cmp	r3, #0
    541c:	bge	543c <coda_cursor_read_bytes+0xe0>
    5420:	mvn	r0, #99	; 0x63
    5424:	ldr	r1, [pc, #244]	; 5520 <coda_cursor_read_bytes+0x1c4>
    5428:	ldr	r2, [pc, #232]	; 5518 <coda_cursor_read_bytes+0x1bc>
    542c:	movw	r3, #2855	; 0xb27
    5430:	bl	0 <coda_set_error>
    5434:	mvn	r0, #0
    5438:	b	54fc <coda_cursor_read_bytes+0x1a0>
    543c:	cmp	r5, #0
    5440:	bge	5460 <coda_cursor_read_bytes+0x104>
    5444:	mvn	r0, #99	; 0x63
    5448:	ldr	r1, [pc, #212]	; 5524 <coda_cursor_read_bytes+0x1c8>
    544c:	ldr	r2, [pc, #196]	; 5518 <coda_cursor_read_bytes+0x1bc>
    5450:	movw	r3, #2860	; 0xb2c
    5454:	bl	0 <coda_set_error>
    5458:	mvn	r0, #0
    545c:	b	54fc <coda_cursor_read_bytes+0x1a0>
    5460:	mov	r6, r5
    5464:	mov	ip, r4
    5468:	orr	ip, r6, ip
    546c:	cmp	ip, #0
    5470:	bne	547c <coda_cursor_read_bytes+0x120>
    5474:	mov	r0, #0
    5478:	b	54fc <coda_cursor_read_bytes+0x1a0>
    547c:	ldr	ip, [r0, #4]
    5480:	lsl	ip, ip, #4
    5484:	add	ip, r0, ip
    5488:	sub	lr, ip, #4096	; 0x1000
    548c:	ldr	ip, [lr, #4088]	; 0xff8
    5490:	ldr	ip, [ip]
    5494:	cmp	ip, #102	; 0x66
    5498:	bcs	54ec <coda_cursor_read_bytes+0x190>
    549c:	cmp	ip, #100	; 0x64
    54a0:	bcs	54d4 <coda_cursor_read_bytes+0x178>
    54a4:	cmp	ip, #0
    54a8:	beq	54c4 <coda_cursor_read_bytes+0x168>
    54ac:	cmp	ip, #1
    54b0:	bne	54ec <coda_cursor_read_bytes+0x190>
    54b4:	str	r5, [sp, #4]
    54b8:	str	r4, [sp]
    54bc:	bl	0 <coda_bin_cursor_read_bytes>
    54c0:	b	54fc <coda_cursor_read_bytes+0x1a0>
    54c4:	str	r5, [sp, #4]
    54c8:	str	r4, [sp]
    54cc:	bl	0 <coda_ascii_cursor_read_bytes>
    54d0:	b	54fc <coda_cursor_read_bytes+0x1a0>
    54d4:	cmp	ip, #100	; 0x64
    54d8:	bne	54ec <coda_cursor_read_bytes+0x190>
    54dc:	str	r5, [sp, #4]
    54e0:	str	r4, [sp]
    54e4:	bl	0 <coda_mem_cursor_read_bytes>
    54e8:	b	54fc <coda_cursor_read_bytes+0x1a0>
    54ec:	mvn	r0, #104	; 0x68
    54f0:	ldr	r1, [pc, #28]	; 5514 <coda_cursor_read_bytes+0x1b8>
    54f4:	bl	0 <coda_set_error>
    54f8:	mvn	r0, #0
    54fc:	ldr	r4, [sp, #16]
    5500:	ldr	r5, [sp, #20]
    5504:	ldr	r6, [sp, #24]
    5508:	ldr	lr, [sp, #12]
    550c:	add	sp, sp, #32
    5510:	bx	lr
    5514:	.word	0x000000d3
    5518:	.word	0x00000453
    551c:	.word	0x0000022b
    5520:	.word	0x00000037
    5524:	.word	0x0000024b
    5528:	.word	0x0000005b

0000552c <coda_cursor_read_int8_array>:
    552c:	mov	ip, sp
    5530:	sub	sp, sp, #32
    5534:	str	ip, [sp]
    5538:	str	lr, [sp, #4]
    553c:	str	r4, [sp, #8]
    5540:	str	r5, [sp, #12]
    5544:	str	r6, [sp, #16]
    5548:	mov	r4, r2
    554c:	mov	r5, r1
    5550:	mov	r6, r0
    5554:	cmp	r6, #0
    5558:	beq	5570 <coda_cursor_read_int8_array+0x44>
    555c:	ldr	ip, [r6, #4]
    5560:	cmp	ip, #0
    5564:	movle	r0, #1
    5568:	movgt	r0, #0
    556c:	b	5574 <coda_cursor_read_int8_array+0x48>
    5570:	mov	r0, #1
    5574:	cmp	r0, #0
    5578:	bne	55a0 <coda_cursor_read_int8_array+0x74>
    557c:	ldr	r1, [r6, #4]
    5580:	lsl	r1, r1, #4
    5584:	add	r3, r6, r1
    5588:	sub	lr, r3, #4096	; 0x1000
    558c:	ldr	r1, [lr, #4088]	; 0xff8
    5590:	cmp	r1, #0
    5594:	moveq	r0, #1
    5598:	movne	r0, #0
    559c:	b	55a4 <coda_cursor_read_int8_array+0x78>
    55a0:	mov	r0, #1
    55a4:	cmp	r0, #0
    55a8:	beq	55c8 <coda_cursor_read_int8_array+0x9c>
    55ac:	mvn	r0, #99	; 0x63
    55b0:	ldr	r1, [pc, #316]	; 56f4 <coda_cursor_read_int8_array+0x1c8>
    55b4:	ldr	r2, [pc, #308]	; 56f0 <coda_cursor_read_int8_array+0x1c4>
    55b8:	movw	r3, #2908	; 0xb5c
    55bc:	bl	0 <coda_set_error>
    55c0:	mvn	r0, #0
    55c4:	b	56d0 <coda_cursor_read_int8_array+0x1a4>
    55c8:	cmp	r5, #0
    55cc:	bne	55ec <coda_cursor_read_int8_array+0xc0>
    55d0:	mvn	r0, #99	; 0x63
    55d4:	ldr	r1, [pc, #284]	; 56f8 <coda_cursor_read_int8_array+0x1cc>
    55d8:	ldr	r2, [pc, #272]	; 56f0 <coda_cursor_read_int8_array+0x1c4>
    55dc:	movw	r3, #2913	; 0xb61
    55e0:	bl	0 <coda_set_error>
    55e4:	mvn	r0, #0
    55e8:	b	56d0 <coda_cursor_read_int8_array+0x1a4>
    55ec:	ldr	r2, [r6, #4]
    55f0:	lsl	ip, r2, #4
    55f4:	add	r0, r6, ip
    55f8:	sub	lr, r0, #4096	; 0x1000
    55fc:	ldr	r2, [lr, #4088]	; 0xff8
    5600:	ldr	r0, [r2]
    5604:	cmp	r0, #100	; 0x64
    5608:	blt	5628 <coda_cursor_read_int8_array+0xfc>
    560c:	ldr	ip, [r6, #4]
    5610:	lsl	r1, ip, #4
    5614:	add	r0, r6, r1
    5618:	sub	lr, r0, #4096	; 0x1000
    561c:	ldr	r3, [lr, #4088]	; 0xff8
    5620:	ldr	r0, [r3, #4]
    5624:	b	563c <coda_cursor_read_int8_array+0x110>
    5628:	ldr	r2, [r6, #4]
    562c:	lsl	r0, r2, #4
    5630:	add	r2, r6, r0
    5634:	sub	lr, r2, #4096	; 0x1000
    5638:	ldr	r0, [lr, #4088]	; 0xff8
    563c:	ldr	r2, [r0, #8]
    5640:	cmp	r2, #1
    5644:	beq	5668 <coda_cursor_read_int8_array+0x13c>
    5648:	ldr	r0, [r0, #8]
    564c:	bl	0 <coda_type_get_class_name>
    5650:	mov	r2, r0
    5654:	mvn	r0, #104	; 0x68
    5658:	ldr	r1, [pc, #136]	; 56e8 <coda_cursor_read_int8_array+0x1bc>
    565c:	bl	0 <coda_set_error>
    5660:	mvn	r0, #0
    5664:	b	56d0 <coda_cursor_read_int8_array+0x1a4>
    5668:	add	r1, sp, #24
    566c:	bl	ae0 <get_array_element_read_type>
    5670:	cmp	r0, #0
    5674:	beq	5680 <coda_cursor_read_int8_array+0x154>
    5678:	mvn	r0, #0
    567c:	b	56d0 <coda_cursor_read_int8_array+0x1a4>
    5680:	ldr	r3, [sp, #24]
    5684:	cmp	r3, #0
    5688:	bne	56b4 <coda_cursor_read_int8_array+0x188>
    568c:	mov	r2, r4
    5690:	mov	r1, r5
    5694:	mov	r0, r6
    5698:	bl	1ea0 <read_int8_array>
    569c:	cmp	r0, #0
    56a0:	beq	56ac <coda_cursor_read_int8_array+0x180>
    56a4:	mvn	r0, #0
    56a8:	b	56d0 <coda_cursor_read_int8_array+0x1a4>
    56ac:	mov	r0, #0
    56b0:	b	56d0 <coda_cursor_read_int8_array+0x1a4>
    56b4:	ldr	r0, [sp, #24]
    56b8:	bl	0 <coda_type_get_native_type_name>
    56bc:	mov	r2, r0
    56c0:	mvn	r0, #104	; 0x68
    56c4:	ldr	r1, [pc, #32]	; 56ec <coda_cursor_read_int8_array+0x1c0>
    56c8:	bl	0 <coda_set_error>
    56cc:	mvn	r0, #0
    56d0:	ldr	r4, [sp, #8]
    56d4:	ldr	r5, [sp, #12]
    56d8:	ldr	r6, [sp, #16]
    56dc:	ldr	lr, [sp, #4]
    56e0:	add	sp, sp, #32
    56e4:	bx	lr
    56e8:	.word	0x000002bc
    56ec:	.word	0x000003cc
    56f0:	.word	0x00000453
    56f4:	.word	0x0000022b
    56f8:	.word	0x0000005b

000056fc <coda_cursor_read_uint8_array>:
    56fc:	mov	ip, sp
    5700:	sub	sp, sp, #32
    5704:	str	ip, [sp]
    5708:	str	lr, [sp, #4]
    570c:	str	r4, [sp, #8]
    5710:	str	r5, [sp, #12]
    5714:	str	r6, [sp, #16]
    5718:	mov	r4, r2
    571c:	mov	r5, r1
    5720:	mov	r6, r0
    5724:	cmp	r6, #0
    5728:	beq	5740 <coda_cursor_read_uint8_array+0x44>
    572c:	ldr	ip, [r6, #4]
    5730:	cmp	ip, #0
    5734:	movle	r0, #1
    5738:	movgt	r0, #0
    573c:	b	5744 <coda_cursor_read_uint8_array+0x48>
    5740:	mov	r0, #1
    5744:	cmp	r0, #0
    5748:	bne	5770 <coda_cursor_read_uint8_array+0x74>
    574c:	ldr	r1, [r6, #4]
    5750:	lsl	r1, r1, #4
    5754:	add	r3, r6, r1
    5758:	sub	lr, r3, #4096	; 0x1000
    575c:	ldr	r1, [lr, #4088]	; 0xff8
    5760:	cmp	r1, #0
    5764:	moveq	r0, #1
    5768:	movne	r0, #0
    576c:	b	5774 <coda_cursor_read_uint8_array+0x78>
    5770:	mov	r0, #1
    5774:	cmp	r0, #0
    5778:	beq	5798 <coda_cursor_read_uint8_array+0x9c>
    577c:	mvn	r0, #99	; 0x63
    5780:	ldr	r1, [pc, #316]	; 58c4 <coda_cursor_read_uint8_array+0x1c8>
    5784:	ldr	r2, [pc, #308]	; 58c0 <coda_cursor_read_uint8_array+0x1c4>
    5788:	movw	r3, #2967	; 0xb97
    578c:	bl	0 <coda_set_error>
    5790:	mvn	r0, #0
    5794:	b	58a0 <coda_cursor_read_uint8_array+0x1a4>
    5798:	cmp	r5, #0
    579c:	bne	57bc <coda_cursor_read_uint8_array+0xc0>
    57a0:	mvn	r0, #99	; 0x63
    57a4:	ldr	r1, [pc, #284]	; 58c8 <coda_cursor_read_uint8_array+0x1cc>
    57a8:	ldr	r2, [pc, #272]	; 58c0 <coda_cursor_read_uint8_array+0x1c4>
    57ac:	movw	r3, #2972	; 0xb9c
    57b0:	bl	0 <coda_set_error>
    57b4:	mvn	r0, #0
    57b8:	b	58a0 <coda_cursor_read_uint8_array+0x1a4>
    57bc:	ldr	r2, [r6, #4]
    57c0:	lsl	ip, r2, #4
    57c4:	add	r0, r6, ip
    57c8:	sub	lr, r0, #4096	; 0x1000
    57cc:	ldr	r2, [lr, #4088]	; 0xff8
    57d0:	ldr	r0, [r2]
    57d4:	cmp	r0, #100	; 0x64
    57d8:	blt	57f8 <coda_cursor_read_uint8_array+0xfc>
    57dc:	ldr	ip, [r6, #4]
    57e0:	lsl	r1, ip, #4
    57e4:	add	r0, r6, r1
    57e8:	sub	lr, r0, #4096	; 0x1000
    57ec:	ldr	r3, [lr, #4088]	; 0xff8
    57f0:	ldr	r0, [r3, #4]
    57f4:	b	580c <coda_cursor_read_uint8_array+0x110>
    57f8:	ldr	r2, [r6, #4]
    57fc:	lsl	r0, r2, #4
    5800:	add	r2, r6, r0
    5804:	sub	lr, r2, #4096	; 0x1000
    5808:	ldr	r0, [lr, #4088]	; 0xff8
    580c:	ldr	r2, [r0, #8]
    5810:	cmp	r2, #1
    5814:	beq	5838 <coda_cursor_read_uint8_array+0x13c>
    5818:	ldr	r0, [r0, #8]
    581c:	bl	0 <coda_type_get_class_name>
    5820:	mov	r2, r0
    5824:	mvn	r0, #104	; 0x68
    5828:	ldr	r1, [pc, #140]	; 58bc <coda_cursor_read_uint8_array+0x1c0>
    582c:	bl	0 <coda_set_error>
    5830:	mvn	r0, #0
    5834:	b	58a0 <coda_cursor_read_uint8_array+0x1a4>
    5838:	add	r1, sp, #24
    583c:	bl	ae0 <get_array_element_read_type>
    5840:	cmp	r0, #0
    5844:	beq	5850 <coda_cursor_read_uint8_array+0x154>
    5848:	mvn	r0, #0
    584c:	b	58a0 <coda_cursor_read_uint8_array+0x1a4>
    5850:	ldr	r3, [sp, #24]
    5854:	cmp	r3, #1
    5858:	bne	5884 <coda_cursor_read_uint8_array+0x188>
    585c:	mov	r2, r4
    5860:	mov	r1, r5
    5864:	mov	r0, r6
    5868:	bl	2028 <read_uint8_array>
    586c:	cmp	r0, #0
    5870:	beq	587c <coda_cursor_read_uint8_array+0x180>
    5874:	mvn	r0, #0
    5878:	b	58a0 <coda_cursor_read_uint8_array+0x1a4>
    587c:	mov	r0, #0
    5880:	b	58a0 <coda_cursor_read_uint8_array+0x1a4>
    5884:	ldr	r0, [sp, #24]
    5888:	bl	0 <coda_type_get_native_type_name>
    588c:	mov	r2, r0
    5890:	mvn	r0, #104	; 0x68
    5894:	ldr	r1, [pc, #28]	; 58b8 <coda_cursor_read_uint8_array+0x1bc>
    5898:	bl	0 <coda_set_error>
    589c:	mvn	r0, #0
    58a0:	ldr	r4, [sp, #8]
    58a4:	ldr	r5, [sp, #12]
    58a8:	ldr	r6, [sp, #16]
    58ac:	ldr	lr, [sp, #4]
    58b0:	add	sp, sp, #32
    58b4:	bx	lr
    58b8:	.word	0x00000078
    58bc:	.word	0x000002bc
    58c0:	.word	0x00000453
    58c4:	.word	0x0000022b
    58c8:	.word	0x0000005b

000058cc <coda_cursor_read_int16_array>:
    58cc:	mov	ip, sp
    58d0:	sub	sp, sp, #32
    58d4:	str	ip, [sp]
    58d8:	str	lr, [sp, #4]
    58dc:	str	r4, [sp, #8]
    58e0:	str	r5, [sp, #12]
    58e4:	str	r6, [sp, #16]
    58e8:	mov	r5, r2
    58ec:	mov	r6, r1
    58f0:	mov	r4, r0
    58f4:	cmp	r4, #0
    58f8:	beq	5910 <coda_cursor_read_int16_array+0x44>
    58fc:	ldr	r3, [r4, #4]
    5900:	cmp	r3, #0
    5904:	movle	r0, #1
    5908:	movgt	r0, #0
    590c:	b	5914 <coda_cursor_read_int16_array+0x48>
    5910:	mov	r0, #1
    5914:	cmp	r0, #0
    5918:	bne	5940 <coda_cursor_read_int16_array+0x74>
    591c:	ldr	r3, [r4, #4]
    5920:	lsl	r1, r3, #4
    5924:	add	r3, r4, r1
    5928:	sub	lr, r3, #4096	; 0x1000
    592c:	ldr	r0, [lr, #4088]	; 0xff8
    5930:	cmp	r0, #0
    5934:	moveq	r0, #1
    5938:	movne	r0, #0
    593c:	b	5944 <coda_cursor_read_int16_array+0x78>
    5940:	mov	r0, #1
    5944:	cmp	r0, #0
    5948:	beq	5968 <coda_cursor_read_int16_array+0x9c>
    594c:	mvn	r0, #99	; 0x63
    5950:	ldr	r1, [pc, #544]	; 5b78 <coda_cursor_read_int16_array+0x2ac>
    5954:	ldr	r2, [pc, #536]	; 5b74 <coda_cursor_read_int16_array+0x2a8>
    5958:	movw	r3, #3030	; 0xbd6
    595c:	bl	0 <coda_set_error>
    5960:	mvn	r0, #0
    5964:	b	5b58 <coda_cursor_read_int16_array+0x28c>
    5968:	cmp	r6, #0
    596c:	bne	598c <coda_cursor_read_int16_array+0xc0>
    5970:	mvn	r0, #99	; 0x63
    5974:	ldr	r1, [pc, #512]	; 5b7c <coda_cursor_read_int16_array+0x2b0>
    5978:	ldr	r2, [pc, #500]	; 5b74 <coda_cursor_read_int16_array+0x2a8>
    597c:	movw	r3, #3035	; 0xbdb
    5980:	bl	0 <coda_set_error>
    5984:	mvn	r0, #0
    5988:	b	5b58 <coda_cursor_read_int16_array+0x28c>
    598c:	ldr	r2, [r4, #4]
    5990:	lsl	r0, r2, #4
    5994:	add	r0, r4, r0
    5998:	sub	lr, r0, #4096	; 0x1000
    599c:	ldr	ip, [lr, #4088]	; 0xff8
    59a0:	ldr	r2, [ip]
    59a4:	cmp	r2, #100	; 0x64
    59a8:	blt	59c8 <coda_cursor_read_int16_array+0xfc>
    59ac:	ldr	r1, [r4, #4]
    59b0:	lsl	ip, r1, #4
    59b4:	add	r2, r4, ip
    59b8:	sub	lr, r2, #4096	; 0x1000
    59bc:	ldr	r1, [lr, #4088]	; 0xff8
    59c0:	ldr	r0, [r1, #4]
    59c4:	b	59dc <coda_cursor_read_int16_array+0x110>
    59c8:	ldr	ip, [r4, #4]
    59cc:	lsl	ip, ip, #4
    59d0:	add	r1, r4, ip
    59d4:	sub	lr, r1, #4096	; 0x1000
    59d8:	ldr	r0, [lr, #4088]	; 0xff8
    59dc:	ldr	r1, [r0, #8]
    59e0:	cmp	r1, #1
    59e4:	beq	5a08 <coda_cursor_read_int16_array+0x13c>
    59e8:	ldr	r0, [r0, #8]
    59ec:	bl	0 <coda_type_get_class_name>
    59f0:	mov	r2, r0
    59f4:	mvn	r0, #104	; 0x68
    59f8:	ldr	r1, [pc, #368]	; 5b70 <coda_cursor_read_int16_array+0x2a4>
    59fc:	bl	0 <coda_set_error>
    5a00:	mvn	r0, #0
    5a04:	b	5b58 <coda_cursor_read_int16_array+0x28c>
    5a08:	add	r1, sp, #24
    5a0c:	bl	ae0 <get_array_element_read_type>
    5a10:	cmp	r0, #0
    5a14:	beq	5a20 <coda_cursor_read_int16_array+0x154>
    5a18:	mvn	r0, #0
    5a1c:	b	5b58 <coda_cursor_read_int16_array+0x28c>
    5a20:	ldr	r3, [sp, #24]
    5a24:	cmp	r3, #0
    5a28:	beq	5aec <coda_cursor_read_int16_array+0x220>
    5a2c:	cmp	r3, #1
    5a30:	beq	5a84 <coda_cursor_read_int16_array+0x1b8>
    5a34:	cmp	r3, #2
    5a38:	bne	5a5c <coda_cursor_read_int16_array+0x190>
    5a3c:	mov	r2, r5
    5a40:	mov	r1, r6
    5a44:	mov	r0, r4
    5a48:	bl	2190 <read_int16_array>
    5a4c:	cmp	r0, #0
    5a50:	beq	5b54 <coda_cursor_read_int16_array+0x288>
    5a54:	mvn	r0, #0
    5a58:	b	5b58 <coda_cursor_read_int16_array+0x28c>
    5a5c:	ldr	r0, [sp, #24]
    5a60:	bl	0 <coda_type_get_native_type_name>
    5a64:	mvn	r2, #104	; 0x68
    5a68:	ldr	r1, [pc, #272]	; 5b80 <coda_cursor_read_int16_array+0x2b4>
    5a6c:	mov	ip, r0
    5a70:	mov	r0, r2
    5a74:	mov	r2, ip
    5a78:	bl	0 <coda_set_error>
    5a7c:	mvn	r0, #0
    5a80:	b	5b58 <coda_cursor_read_int16_array+0x28c>
    5a84:	mov	r2, r5
    5a88:	mov	r1, r6
    5a8c:	mov	r0, r4
    5a90:	bl	2028 <read_uint8_array>
    5a94:	cmp	r0, #0
    5a98:	beq	5aa4 <coda_cursor_read_int16_array+0x1d8>
    5a9c:	mvn	r0, #0
    5aa0:	b	5b58 <coda_cursor_read_int16_array+0x28c>
    5aa4:	add	r1, sp, #28
    5aa8:	mov	r0, r4
    5aac:	bl	0 <coda_cursor_get_num_elements>
    5ab0:	cmp	r0, #0
    5ab4:	beq	5ac0 <coda_cursor_read_int16_array+0x1f4>
    5ab8:	mvn	r0, #0
    5abc:	b	5b58 <coda_cursor_read_int16_array+0x28c>
    5ac0:	ldr	r3, [sp, #28]
    5ac4:	sub	r0, r3, #1
    5ac8:	cmp	r0, #0
    5acc:	blt	5b54 <coda_cursor_read_int16_array+0x288>
    5ad0:	add	r2, r6, r0, lsl #1
    5ad4:	ldrb	r1, [r6, r0]
    5ad8:	sbfx	ip, r1, #0, #16
    5adc:	sbfx	r1, ip, #0, #16
    5ae0:	strh	r1, [r2]
    5ae4:	sub	r0, r0, #1
    5ae8:	b	5ac8 <coda_cursor_read_int16_array+0x1fc>
    5aec:	mov	r2, r5
    5af0:	mov	r1, r6
    5af4:	mov	r0, r4
    5af8:	bl	1ea0 <read_int8_array>
    5afc:	cmp	r0, #0
    5b00:	beq	5b0c <coda_cursor_read_int16_array+0x240>
    5b04:	mvn	r0, #0
    5b08:	b	5b58 <coda_cursor_read_int16_array+0x28c>
    5b0c:	add	r1, sp, #28
    5b10:	mov	r0, r4
    5b14:	bl	0 <coda_cursor_get_num_elements>
    5b18:	cmp	r0, #0
    5b1c:	beq	5b28 <coda_cursor_read_int16_array+0x25c>
    5b20:	mvn	r0, #0
    5b24:	b	5b58 <coda_cursor_read_int16_array+0x28c>
    5b28:	ldr	r2, [sp, #28]
    5b2c:	sub	ip, r2, #1
    5b30:	cmp	ip, #0
    5b34:	blt	5b54 <coda_cursor_read_int16_array+0x288>
    5b38:	add	r0, r6, ip, lsl #1
    5b3c:	ldrsb	r3, [r6, ip]
    5b40:	sbfx	r1, r3, #0, #16
    5b44:	sbfx	r2, r1, #0, #16
    5b48:	strh	r2, [r0]
    5b4c:	sub	ip, ip, #1
    5b50:	b	5b30 <coda_cursor_read_int16_array+0x264>
    5b54:	mov	r0, #0
    5b58:	ldr	r4, [sp, #8]
    5b5c:	ldr	r5, [sp, #12]
    5b60:	ldr	r6, [sp, #16]
    5b64:	ldr	lr, [sp, #4]
    5b68:	add	sp, sp, #32
    5b6c:	bx	lr
    5b70:	.word	0x000002bc
    5b74:	.word	0x00000453
    5b78:	.word	0x0000022b
    5b7c:	.word	0x0000005b
    5b80:	.word	0x00000133

00005b84 <coda_cursor_read_uint16_array>:
    5b84:	mov	ip, sp
    5b88:	sub	sp, sp, #32
    5b8c:	str	ip, [sp]
    5b90:	str	lr, [sp, #4]
    5b94:	str	r4, [sp, #8]
    5b98:	str	r5, [sp, #12]
    5b9c:	str	r6, [sp, #16]
    5ba0:	mov	r4, r2
    5ba4:	mov	r5, r1
    5ba8:	mov	r6, r0
    5bac:	cmp	r6, #0
    5bb0:	beq	5bc8 <coda_cursor_read_uint16_array+0x44>
    5bb4:	ldr	r0, [r6, #4]
    5bb8:	cmp	r0, #0
    5bbc:	movle	r0, #1
    5bc0:	movgt	r0, #0
    5bc4:	b	5bcc <coda_cursor_read_uint16_array+0x48>
    5bc8:	mov	r0, #1
    5bcc:	cmp	r0, #0
    5bd0:	bne	5bf8 <coda_cursor_read_uint16_array+0x74>
    5bd4:	ldr	r1, [r6, #4]
    5bd8:	lsl	ip, r1, #4
    5bdc:	add	r3, r6, ip
    5be0:	sub	lr, r3, #4096	; 0x1000
    5be4:	ldr	ip, [lr, #4088]	; 0xff8
    5be8:	cmp	ip, #0
    5bec:	moveq	r2, #1
    5bf0:	movne	r2, #0
    5bf4:	b	5bfc <coda_cursor_read_uint16_array+0x78>
    5bf8:	mov	r2, #1
    5bfc:	cmp	r2, #0
    5c00:	beq	5c20 <coda_cursor_read_uint16_array+0x9c>
    5c04:	mvn	r0, #99	; 0x63
    5c08:	ldr	r1, [pc, #428]	; 5dbc <coda_cursor_read_uint16_array+0x238>
    5c0c:	ldr	r2, [pc, #420]	; 5db8 <coda_cursor_read_uint16_array+0x234>
    5c10:	mov	r3, #3120	; 0xc30
    5c14:	bl	0 <coda_set_error>
    5c18:	mvn	r0, #0
    5c1c:	b	5d98 <coda_cursor_read_uint16_array+0x214>
    5c20:	cmp	r5, #0
    5c24:	bne	5c44 <coda_cursor_read_uint16_array+0xc0>
    5c28:	mvn	r0, #99	; 0x63
    5c2c:	ldr	r1, [pc, #396]	; 5dc0 <coda_cursor_read_uint16_array+0x23c>
    5c30:	ldr	r2, [pc, #384]	; 5db8 <coda_cursor_read_uint16_array+0x234>
    5c34:	movw	r3, #3125	; 0xc35
    5c38:	bl	0 <coda_set_error>
    5c3c:	mvn	r0, #0
    5c40:	b	5d98 <coda_cursor_read_uint16_array+0x214>
    5c44:	ldr	r3, [r6, #4]
    5c48:	lsl	ip, r3, #4
    5c4c:	add	r2, r6, ip
    5c50:	sub	lr, r2, #4096	; 0x1000
    5c54:	ldr	r2, [lr, #4088]	; 0xff8
    5c58:	ldr	r2, [r2]
    5c5c:	cmp	r2, #100	; 0x64
    5c60:	blt	5c80 <coda_cursor_read_uint16_array+0xfc>
    5c64:	ldr	ip, [r6, #4]
    5c68:	lsl	r0, ip, #4
    5c6c:	add	r0, r6, r0
    5c70:	sub	lr, r0, #4096	; 0x1000
    5c74:	ldr	r1, [lr, #4088]	; 0xff8
    5c78:	ldr	r0, [r1, #4]
    5c7c:	b	5c94 <coda_cursor_read_uint16_array+0x110>
    5c80:	ldr	r1, [r6, #4]
    5c84:	lsl	r2, r1, #4
    5c88:	add	ip, r6, r2
    5c8c:	sub	lr, ip, #4096	; 0x1000
    5c90:	ldr	r0, [lr, #4088]	; 0xff8
    5c94:	ldr	r1, [r0, #8]
    5c98:	cmp	r1, #1
    5c9c:	beq	5cc0 <coda_cursor_read_uint16_array+0x13c>
    5ca0:	ldr	r0, [r0, #8]
    5ca4:	bl	0 <coda_type_get_class_name>
    5ca8:	mov	r2, r0
    5cac:	mvn	r0, #104	; 0x68
    5cb0:	ldr	r1, [pc, #248]	; 5db0 <coda_cursor_read_uint16_array+0x22c>
    5cb4:	bl	0 <coda_set_error>
    5cb8:	mvn	r0, #0
    5cbc:	b	5d98 <coda_cursor_read_uint16_array+0x214>
    5cc0:	add	r1, sp, #24
    5cc4:	bl	ae0 <get_array_element_read_type>
    5cc8:	cmp	r0, #0
    5ccc:	beq	5cd8 <coda_cursor_read_uint16_array+0x154>
    5cd0:	mvn	r0, #0
    5cd4:	b	5d98 <coda_cursor_read_uint16_array+0x214>
    5cd8:	ldr	r2, [sp, #24]
    5cdc:	cmp	r2, #1
    5ce0:	beq	5d2c <coda_cursor_read_uint16_array+0x1a8>
    5ce4:	cmp	r2, #3
    5ce8:	bne	5d0c <coda_cursor_read_uint16_array+0x188>
    5cec:	mov	r2, r4
    5cf0:	mov	r1, r5
    5cf4:	mov	r0, r6
    5cf8:	bl	2318 <read_uint16_array>
    5cfc:	cmp	r0, #0
    5d00:	beq	5d94 <coda_cursor_read_uint16_array+0x210>
    5d04:	mvn	r0, #0
    5d08:	b	5d98 <coda_cursor_read_uint16_array+0x214>
    5d0c:	ldr	r0, [sp, #24]
    5d10:	bl	0 <coda_type_get_native_type_name>
    5d14:	mov	r2, r0
    5d18:	mvn	r0, #104	; 0x68
    5d1c:	ldr	r1, [pc, #144]	; 5db4 <coda_cursor_read_uint16_array+0x230>
    5d20:	bl	0 <coda_set_error>
    5d24:	mvn	r0, #0
    5d28:	b	5d98 <coda_cursor_read_uint16_array+0x214>
    5d2c:	mov	r2, r4
    5d30:	mov	r1, r5
    5d34:	mov	r0, r6
    5d38:	bl	2028 <read_uint8_array>
    5d3c:	cmp	r0, #0
    5d40:	beq	5d4c <coda_cursor_read_uint16_array+0x1c8>
    5d44:	mvn	r0, #0
    5d48:	b	5d98 <coda_cursor_read_uint16_array+0x214>
    5d4c:	add	r1, sp, #28
    5d50:	mov	r0, r6
    5d54:	bl	0 <coda_cursor_get_num_elements>
    5d58:	cmp	r0, #0
    5d5c:	beq	5d68 <coda_cursor_read_uint16_array+0x1e4>
    5d60:	mvn	r0, #0
    5d64:	b	5d98 <coda_cursor_read_uint16_array+0x214>
    5d68:	ldr	r1, [sp, #28]
    5d6c:	sub	ip, r1, #1
    5d70:	cmp	ip, #0
    5d74:	blt	5d94 <coda_cursor_read_uint16_array+0x210>
    5d78:	add	r1, r5, ip, lsl #1
    5d7c:	ldrb	r3, [r5, ip]
    5d80:	bic	r0, r3, #16711680	; 0xff0000
    5d84:	bic	r0, r0, #-16777216	; 0xff000000
    5d88:	strh	r0, [r1]
    5d8c:	sub	ip, ip, #1
    5d90:	b	5d70 <coda_cursor_read_uint16_array+0x1ec>
    5d94:	mov	r0, #0
    5d98:	ldr	r4, [sp, #8]
    5d9c:	ldr	r5, [sp, #12]
    5da0:	ldr	r6, [sp, #16]
    5da4:	ldr	lr, [sp, #4]
    5da8:	add	sp, sp, #32
    5dac:	bx	lr
    5db0:	.word	0x000002bc
    5db4:	.word	0x000004b5
    5db8:	.word	0x00000453
    5dbc:	.word	0x0000022b
    5dc0:	.word	0x0000005b

00005dc4 <coda_cursor_read_int32_array>:
    5dc4:	mov	ip, sp
    5dc8:	sub	sp, sp, #32
    5dcc:	str	ip, [sp]
    5dd0:	str	lr, [sp, #4]
    5dd4:	str	r4, [sp, #8]
    5dd8:	str	r5, [sp, #12]
    5ddc:	str	r6, [sp, #16]
    5de0:	mov	r5, r2
    5de4:	mov	r6, r1
    5de8:	mov	r4, r0
    5dec:	cmp	r4, #0
    5df0:	beq	5e08 <coda_cursor_read_int32_array+0x44>
    5df4:	ldr	r3, [r4, #4]
    5df8:	cmp	r3, #0
    5dfc:	movle	r2, #1
    5e00:	movgt	r2, #0
    5e04:	b	5e0c <coda_cursor_read_int32_array+0x48>
    5e08:	mov	r2, #1
    5e0c:	cmp	r2, #0
    5e10:	bne	5e38 <coda_cursor_read_int32_array+0x74>
    5e14:	ldr	r1, [r4, #4]
    5e18:	lsl	ip, r1, #4
    5e1c:	add	r1, r4, ip
    5e20:	sub	lr, r1, #4096	; 0x1000
    5e24:	ldr	r2, [lr, #4088]	; 0xff8
    5e28:	cmp	r2, #0
    5e2c:	moveq	r1, #1
    5e30:	movne	r1, #0
    5e34:	b	5e3c <coda_cursor_read_int32_array+0x78>
    5e38:	mov	r1, #1
    5e3c:	cmp	r1, #0
    5e40:	beq	5e60 <coda_cursor_read_int32_array+0x9c>
    5e44:	mvn	r0, #99	; 0x63
    5e48:	ldr	r1, [pc, #732]	; 612c <coda_cursor_read_int32_array+0x368>
    5e4c:	ldr	r2, [pc, #724]	; 6128 <coda_cursor_read_int32_array+0x364>
    5e50:	movw	r3, #3199	; 0xc7f
    5e54:	bl	0 <coda_set_error>
    5e58:	mvn	r0, #0
    5e5c:	b	6108 <coda_cursor_read_int32_array+0x344>
    5e60:	cmp	r6, #0
    5e64:	bne	5e84 <coda_cursor_read_int32_array+0xc0>
    5e68:	mvn	r0, #99	; 0x63
    5e6c:	ldr	r1, [pc, #700]	; 6130 <coda_cursor_read_int32_array+0x36c>
    5e70:	ldr	r2, [pc, #688]	; 6128 <coda_cursor_read_int32_array+0x364>
    5e74:	movw	r3, #3204	; 0xc84
    5e78:	bl	0 <coda_set_error>
    5e7c:	mvn	r0, #0
    5e80:	b	6108 <coda_cursor_read_int32_array+0x344>
    5e84:	ldr	ip, [r4, #4]
    5e88:	lsl	r0, ip, #4
    5e8c:	add	r3, r4, r0
    5e90:	sub	lr, r3, #4096	; 0x1000
    5e94:	ldr	ip, [lr, #4088]	; 0xff8
    5e98:	ldr	r0, [ip]
    5e9c:	cmp	r0, #100	; 0x64
    5ea0:	blt	5ec0 <coda_cursor_read_int32_array+0xfc>
    5ea4:	ldr	r1, [r4, #4]
    5ea8:	lsl	r1, r1, #4
    5eac:	add	r0, r4, r1
    5eb0:	sub	lr, r0, #4096	; 0x1000
    5eb4:	ldr	r3, [lr, #4088]	; 0xff8
    5eb8:	ldr	r0, [r3, #4]
    5ebc:	b	5ed4 <coda_cursor_read_int32_array+0x110>
    5ec0:	ldr	r2, [r4, #4]
    5ec4:	lsl	r0, r2, #4
    5ec8:	add	r0, r4, r0
    5ecc:	sub	lr, r0, #4096	; 0x1000
    5ed0:	ldr	r0, [lr, #4088]	; 0xff8
    5ed4:	ldr	r1, [r0, #8]
    5ed8:	cmp	r1, #1
    5edc:	beq	5f00 <coda_cursor_read_int32_array+0x13c>
    5ee0:	ldr	r0, [r0, #8]
    5ee4:	bl	0 <coda_type_get_class_name>
    5ee8:	mov	r2, r0
    5eec:	mvn	r0, #104	; 0x68
    5ef0:	ldr	r1, [pc, #556]	; 6124 <coda_cursor_read_int32_array+0x360>
    5ef4:	bl	0 <coda_set_error>
    5ef8:	mvn	r0, #0
    5efc:	b	6108 <coda_cursor_read_int32_array+0x344>
    5f00:	add	r1, sp, #24
    5f04:	bl	ae0 <get_array_element_read_type>
    5f08:	cmp	r0, #0
    5f0c:	beq	5f18 <coda_cursor_read_int32_array+0x154>
    5f10:	mvn	r0, #0
    5f14:	b	6108 <coda_cursor_read_int32_array+0x344>
    5f18:	ldr	ip, [sp, #24]
    5f1c:	cmp	ip, #2
    5f20:	bcs	5fe4 <coda_cursor_read_int32_array+0x220>
    5f24:	cmp	ip, #0
    5f28:	bne	5f88 <coda_cursor_read_int32_array+0x1c4>
    5f2c:	mov	r2, r5
    5f30:	mov	r1, r6
    5f34:	mov	r0, r4
    5f38:	bl	1ea0 <read_int8_array>
    5f3c:	cmp	r0, #0
    5f40:	beq	5f4c <coda_cursor_read_int32_array+0x188>
    5f44:	mvn	r0, #0
    5f48:	b	6108 <coda_cursor_read_int32_array+0x344>
    5f4c:	add	r1, sp, #28
    5f50:	mov	r0, r4
    5f54:	bl	0 <coda_cursor_get_num_elements>
    5f58:	cmp	r0, #0
    5f5c:	beq	5f68 <coda_cursor_read_int32_array+0x1a4>
    5f60:	mvn	r0, #0
    5f64:	b	6108 <coda_cursor_read_int32_array+0x344>
    5f68:	ldr	r0, [sp, #28]
    5f6c:	sub	r1, r0, #1
    5f70:	cmp	r1, #0
    5f74:	blt	6104 <coda_cursor_read_int32_array+0x340>
    5f78:	ldrsb	r2, [r6, r1]
    5f7c:	str	r2, [r6, r1, lsl #2]
    5f80:	sub	r1, r1, #1
    5f84:	b	5f70 <coda_cursor_read_int32_array+0x1ac>
    5f88:	mov	r2, r5
    5f8c:	mov	r1, r6
    5f90:	mov	r0, r4
    5f94:	bl	2028 <read_uint8_array>
    5f98:	cmp	r0, #0
    5f9c:	beq	5fa8 <coda_cursor_read_int32_array+0x1e4>
    5fa0:	mvn	r0, #0
    5fa4:	b	6108 <coda_cursor_read_int32_array+0x344>
    5fa8:	add	r1, sp, #28
    5fac:	mov	r0, r4
    5fb0:	bl	0 <coda_cursor_get_num_elements>
    5fb4:	cmp	r0, #0
    5fb8:	beq	5fc4 <coda_cursor_read_int32_array+0x200>
    5fbc:	mvn	r0, #0
    5fc0:	b	6108 <coda_cursor_read_int32_array+0x344>
    5fc4:	ldr	r3, [sp, #28]
    5fc8:	sub	r3, r3, #1
    5fcc:	cmp	r3, #0
    5fd0:	blt	6104 <coda_cursor_read_int32_array+0x340>
    5fd4:	ldrb	ip, [r6, r3]
    5fd8:	str	ip, [r6, r3, lsl #2]
    5fdc:	sub	r3, r3, #1
    5fe0:	b	5fcc <coda_cursor_read_int32_array+0x208>
    5fe4:	cmp	ip, #2
    5fe8:	beq	60a4 <coda_cursor_read_int32_array+0x2e0>
    5fec:	cmp	ip, #3
    5ff0:	beq	6044 <coda_cursor_read_int32_array+0x280>
    5ff4:	cmp	ip, #4
    5ff8:	bne	601c <coda_cursor_read_int32_array+0x258>
    5ffc:	mov	r2, r5
    6000:	mov	r1, r6
    6004:	mov	r0, r4
    6008:	bl	2480 <read_int32_array>
    600c:	cmp	r0, #0
    6010:	beq	6104 <coda_cursor_read_int32_array+0x340>
    6014:	mvn	r0, #0
    6018:	b	6108 <coda_cursor_read_int32_array+0x344>
    601c:	ldr	r0, [sp, #24]
    6020:	bl	0 <coda_type_get_native_type_name>
    6024:	mvn	r2, #104	; 0x68
    6028:	ldr	r1, [pc, #240]	; 6120 <coda_cursor_read_int32_array+0x35c>
    602c:	mov	r3, r0
    6030:	mov	r0, r2
    6034:	mov	r2, r3
    6038:	bl	0 <coda_set_error>
    603c:	mvn	r0, #0
    6040:	b	6108 <coda_cursor_read_int32_array+0x344>
    6044:	mov	r2, r5
    6048:	mov	r1, r6
    604c:	mov	r0, r4
    6050:	bl	2318 <read_uint16_array>
    6054:	cmp	r0, #0
    6058:	beq	6064 <coda_cursor_read_int32_array+0x2a0>
    605c:	mvn	r0, #0
    6060:	b	6108 <coda_cursor_read_int32_array+0x344>
    6064:	add	r1, sp, #28
    6068:	mov	r0, r4
    606c:	bl	0 <coda_cursor_get_num_elements>
    6070:	cmp	r0, #0
    6074:	beq	6080 <coda_cursor_read_int32_array+0x2bc>
    6078:	mvn	r0, #0
    607c:	b	6108 <coda_cursor_read_int32_array+0x344>
    6080:	ldr	ip, [sp, #28]
    6084:	sub	r3, ip, #1
    6088:	cmp	r3, #0
    608c:	blt	6104 <coda_cursor_read_int32_array+0x340>
    6090:	add	r1, r6, r3, lsl #1
    6094:	ldrh	r0, [r1]
    6098:	str	r0, [r6, r3, lsl #2]
    609c:	sub	r3, r3, #1
    60a0:	b	6088 <coda_cursor_read_int32_array+0x2c4>
    60a4:	mov	r2, r5
    60a8:	mov	r1, r6
    60ac:	mov	r0, r4
    60b0:	bl	2190 <read_int16_array>
    60b4:	cmp	r0, #0
    60b8:	beq	60c4 <coda_cursor_read_int32_array+0x300>
    60bc:	mvn	r0, #0
    60c0:	b	6108 <coda_cursor_read_int32_array+0x344>
    60c4:	add	r1, sp, #28
    60c8:	mov	r0, r4
    60cc:	bl	0 <coda_cursor_get_num_elements>
    60d0:	cmp	r0, #0
    60d4:	beq	60e0 <coda_cursor_read_int32_array+0x31c>
    60d8:	mvn	r0, #0
    60dc:	b	6108 <coda_cursor_read_int32_array+0x344>
    60e0:	ldr	r3, [sp, #28]
    60e4:	sub	r1, r3, #1
    60e8:	cmp	r1, #0
    60ec:	blt	6104 <coda_cursor_read_int32_array+0x340>
    60f0:	add	r2, r6, r1, lsl #1
    60f4:	ldrsh	r2, [r2]
    60f8:	str	r2, [r6, r1, lsl #2]
    60fc:	sub	r1, r1, #1
    6100:	b	60e8 <coda_cursor_read_int32_array+0x324>
    6104:	mov	r0, #0
    6108:	ldr	r4, [sp, #8]
    610c:	ldr	r5, [sp, #12]
    6110:	ldr	r6, [sp, #16]
    6114:	ldr	lr, [sp, #4]
    6118:	add	sp, sp, #32
    611c:	bx	lr
    6120:	.word	0x000001d0
    6124:	.word	0x000002bc
    6128:	.word	0x00000453
    612c:	.word	0x0000022b
    6130:	.word	0x0000005b

00006134 <coda_cursor_read_uint32_array>:
    6134:	mov	ip, sp
    6138:	sub	sp, sp, #32
    613c:	str	ip, [sp]
    6140:	str	lr, [sp, #4]
    6144:	str	r4, [sp, #8]
    6148:	str	r5, [sp, #12]
    614c:	str	r6, [sp, #16]
    6150:	mov	r4, r2
    6154:	mov	r5, r1
    6158:	mov	r6, r0
    615c:	cmp	r6, #0
    6160:	beq	6178 <coda_cursor_read_uint32_array+0x44>
    6164:	ldr	r0, [r6, #4]
    6168:	cmp	r0, #0
    616c:	movle	r0, #1
    6170:	movgt	r0, #0
    6174:	b	617c <coda_cursor_read_uint32_array+0x48>
    6178:	mov	r0, #1
    617c:	cmp	r0, #0
    6180:	bne	61a8 <coda_cursor_read_uint32_array+0x74>
    6184:	ldr	r1, [r6, #4]
    6188:	lsl	r0, r1, #4
    618c:	add	r3, r6, r0
    6190:	sub	lr, r3, #4096	; 0x1000
    6194:	ldr	ip, [lr, #4088]	; 0xff8
    6198:	cmp	ip, #0
    619c:	moveq	r1, #1
    61a0:	movne	r1, #0
    61a4:	b	61ac <coda_cursor_read_uint32_array+0x78>
    61a8:	mov	r1, #1
    61ac:	cmp	r1, #0
    61b0:	beq	61d0 <coda_cursor_read_uint32_array+0x9c>
    61b4:	mvn	r0, #99	; 0x63
    61b8:	ldr	r1, [pc, #524]	; 63cc <coda_cursor_read_uint32_array+0x298>
    61bc:	ldr	r2, [pc, #516]	; 63c8 <coda_cursor_read_uint32_array+0x294>
    61c0:	movw	r3, #3318	; 0xcf6
    61c4:	bl	0 <coda_set_error>
    61c8:	mvn	r0, #0
    61cc:	b	63ac <coda_cursor_read_uint32_array+0x278>
    61d0:	cmp	r5, #0
    61d4:	bne	61f4 <coda_cursor_read_uint32_array+0xc0>
    61d8:	mvn	r0, #99	; 0x63
    61dc:	ldr	r1, [pc, #496]	; 63d4 <coda_cursor_read_uint32_array+0x2a0>
    61e0:	ldr	r2, [pc, #480]	; 63c8 <coda_cursor_read_uint32_array+0x294>
    61e4:	movw	r3, #3323	; 0xcfb
    61e8:	bl	0 <coda_set_error>
    61ec:	mvn	r0, #0
    61f0:	b	63ac <coda_cursor_read_uint32_array+0x278>
    61f4:	ldr	r3, [r6, #4]
    61f8:	lsl	r2, r3, #4
    61fc:	add	r3, r6, r2
    6200:	sub	lr, r3, #4096	; 0x1000
    6204:	ldr	r2, [lr, #4088]	; 0xff8
    6208:	ldr	r2, [r2]
    620c:	cmp	r2, #100	; 0x64
    6210:	blt	6230 <coda_cursor_read_uint32_array+0xfc>
    6214:	ldr	r0, [r6, #4]
    6218:	lsl	r3, r0, #4
    621c:	add	r1, r6, r3
    6220:	sub	lr, r1, #4096	; 0x1000
    6224:	ldr	r0, [lr, #4088]	; 0xff8
    6228:	ldr	r0, [r0, #4]
    622c:	b	6244 <coda_cursor_read_uint32_array+0x110>
    6230:	ldr	ip, [r6, #4]
    6234:	lsl	ip, ip, #4
    6238:	add	r2, r6, ip
    623c:	sub	lr, r2, #4096	; 0x1000
    6240:	ldr	r0, [lr, #4088]	; 0xff8
    6244:	ldr	r3, [r0, #8]
    6248:	cmp	r3, #1
    624c:	beq	6278 <coda_cursor_read_uint32_array+0x144>
    6250:	ldr	r0, [r0, #8]
    6254:	bl	0 <coda_type_get_class_name>
    6258:	mvn	r2, #104	; 0x68
    625c:	ldr	r1, [pc, #352]	; 63c4 <coda_cursor_read_uint32_array+0x290>
    6260:	mov	r3, r0
    6264:	mov	r0, r2
    6268:	mov	r2, r3
    626c:	bl	0 <coda_set_error>
    6270:	mvn	r0, #0
    6274:	b	63ac <coda_cursor_read_uint32_array+0x278>
    6278:	add	r1, sp, #24
    627c:	bl	ae0 <get_array_element_read_type>
    6280:	cmp	r0, #0
    6284:	beq	6290 <coda_cursor_read_uint32_array+0x15c>
    6288:	mvn	r0, #0
    628c:	b	63ac <coda_cursor_read_uint32_array+0x278>
    6290:	ldr	r3, [sp, #24]
    6294:	cmp	r3, #1
    6298:	beq	634c <coda_cursor_read_uint32_array+0x218>
    629c:	cmp	r3, #3
    62a0:	beq	62ec <coda_cursor_read_uint32_array+0x1b8>
    62a4:	cmp	r3, #5
    62a8:	bne	62cc <coda_cursor_read_uint32_array+0x198>
    62ac:	mov	r2, r4
    62b0:	mov	r1, r5
    62b4:	mov	r0, r6
    62b8:	bl	2608 <read_uint32_array>
    62bc:	cmp	r0, #0
    62c0:	beq	63a8 <coda_cursor_read_uint32_array+0x274>
    62c4:	mvn	r0, #0
    62c8:	b	63ac <coda_cursor_read_uint32_array+0x278>
    62cc:	ldr	r0, [sp, #24]
    62d0:	bl	0 <coda_type_get_native_type_name>
    62d4:	mov	r2, r0
    62d8:	mvn	r0, #104	; 0x68
    62dc:	ldr	r1, [pc, #236]	; 63d0 <coda_cursor_read_uint32_array+0x29c>
    62e0:	bl	0 <coda_set_error>
    62e4:	mvn	r0, #0
    62e8:	b	63ac <coda_cursor_read_uint32_array+0x278>
    62ec:	mov	r2, r4
    62f0:	mov	r1, r5
    62f4:	mov	r0, r6
    62f8:	bl	2318 <read_uint16_array>
    62fc:	cmp	r0, #0
    6300:	beq	630c <coda_cursor_read_uint32_array+0x1d8>
    6304:	mvn	r0, #0
    6308:	b	63ac <coda_cursor_read_uint32_array+0x278>
    630c:	add	r1, sp, #28
    6310:	mov	r0, r6
    6314:	bl	0 <coda_cursor_get_num_elements>
    6318:	cmp	r0, #0
    631c:	beq	6328 <coda_cursor_read_uint32_array+0x1f4>
    6320:	mvn	r0, #0
    6324:	b	63ac <coda_cursor_read_uint32_array+0x278>
    6328:	ldr	ip, [sp, #28]
    632c:	sub	r2, ip, #1
    6330:	cmp	r2, #0
    6334:	blt	63a8 <coda_cursor_read_uint32_array+0x274>
    6338:	add	r1, r5, r2, lsl #1
    633c:	ldrh	ip, [r1]
    6340:	str	ip, [r5, r2, lsl #2]
    6344:	sub	r2, r2, #1
    6348:	b	6330 <coda_cursor_read_uint32_array+0x1fc>
    634c:	mov	r2, r4
    6350:	mov	r1, r5
    6354:	mov	r0, r6
    6358:	bl	2028 <read_uint8_array>
    635c:	cmp	r0, #0
    6360:	beq	636c <coda_cursor_read_uint32_array+0x238>
    6364:	mvn	r0, #0
    6368:	b	63ac <coda_cursor_read_uint32_array+0x278>
    636c:	add	r1, sp, #28
    6370:	mov	r0, r6
    6374:	bl	0 <coda_cursor_get_num_elements>
    6378:	cmp	r0, #0
    637c:	beq	6388 <coda_cursor_read_uint32_array+0x254>
    6380:	mvn	r0, #0
    6384:	b	63ac <coda_cursor_read_uint32_array+0x278>
    6388:	ldr	ip, [sp, #28]
    638c:	sub	ip, ip, #1
    6390:	cmp	ip, #0
    6394:	blt	63a8 <coda_cursor_read_uint32_array+0x274>
    6398:	ldrb	r2, [r5, ip]
    639c:	str	r2, [r5, ip, lsl #2]
    63a0:	sub	ip, ip, #1
    63a4:	b	6390 <coda_cursor_read_uint32_array+0x25c>
    63a8:	mov	r0, #0
    63ac:	ldr	r4, [sp, #8]
    63b0:	ldr	r5, [sp, #12]
    63b4:	ldr	r6, [sp, #16]
    63b8:	ldr	lr, [sp, #4]
    63bc:	add	sp, sp, #32
    63c0:	bx	lr
    63c4:	.word	0x000002bc
    63c8:	.word	0x00000453
    63cc:	.word	0x0000022b
    63d0:	.word	0x000001fd
    63d4:	.word	0x0000005b

000063d8 <coda_cursor_read_int64_array>:
    63d8:	mov	ip, sp
    63dc:	sub	sp, sp, #32
    63e0:	str	ip, [sp]
    63e4:	str	lr, [sp, #4]
    63e8:	str	r4, [sp, #8]
    63ec:	str	r5, [sp, #12]
    63f0:	str	r6, [sp, #16]
    63f4:	mov	r6, r2
    63f8:	mov	r5, r1
    63fc:	mov	r4, r0
    6400:	cmp	r4, #0
    6404:	beq	641c <coda_cursor_read_int64_array+0x44>
    6408:	ldr	r2, [r4, #4]
    640c:	cmp	r2, #0
    6410:	movle	r1, #1
    6414:	movgt	r1, #0
    6418:	b	6420 <coda_cursor_read_int64_array+0x48>
    641c:	mov	r1, #1
    6420:	cmp	r1, #0
    6424:	bne	644c <coda_cursor_read_int64_array+0x74>
    6428:	ldr	r3, [r4, #4]
    642c:	lsl	ip, r3, #4
    6430:	add	r1, r4, ip
    6434:	sub	lr, r1, #4096	; 0x1000
    6438:	ldr	r3, [lr, #4088]	; 0xff8
    643c:	cmp	r3, #0
    6440:	moveq	r1, #1
    6444:	movne	r1, #0
    6448:	b	6450 <coda_cursor_read_int64_array+0x78>
    644c:	mov	r1, #1
    6450:	cmp	r1, #0
    6454:	beq	6474 <coda_cursor_read_int64_array+0x9c>
    6458:	mvn	r0, #99	; 0x63
    645c:	ldr	r1, [pc, #984]	; 683c <coda_cursor_read_int64_array+0x464>
    6460:	ldr	r2, [pc, #976]	; 6838 <coda_cursor_read_int64_array+0x460>
    6464:	movw	r3, #3413	; 0xd55
    6468:	bl	0 <coda_set_error>
    646c:	mvn	r0, #0
    6470:	b	6818 <coda_cursor_read_int64_array+0x440>
    6474:	cmp	r5, #0
    6478:	bne	6498 <coda_cursor_read_int64_array+0xc0>
    647c:	mvn	r0, #99	; 0x63
    6480:	ldr	r1, [pc, #952]	; 6840 <coda_cursor_read_int64_array+0x468>
    6484:	ldr	r2, [pc, #940]	; 6838 <coda_cursor_read_int64_array+0x460>
    6488:	movw	r3, #3418	; 0xd5a
    648c:	bl	0 <coda_set_error>
    6490:	mvn	r0, #0
    6494:	b	6818 <coda_cursor_read_int64_array+0x440>
    6498:	ldr	r0, [r4, #4]
    649c:	lsl	r3, r0, #4
    64a0:	add	r0, r4, r3
    64a4:	sub	lr, r0, #4096	; 0x1000
    64a8:	ldr	r1, [lr, #4088]	; 0xff8
    64ac:	ldr	ip, [r1]
    64b0:	cmp	ip, #100	; 0x64
    64b4:	blt	64d4 <coda_cursor_read_int64_array+0xfc>
    64b8:	ldr	r0, [r4, #4]
    64bc:	lsl	r2, r0, #4
    64c0:	add	r1, r4, r2
    64c4:	sub	lr, r1, #4096	; 0x1000
    64c8:	ldr	r3, [lr, #4088]	; 0xff8
    64cc:	ldr	r0, [r3, #4]
    64d0:	b	64e8 <coda_cursor_read_int64_array+0x110>
    64d4:	ldr	r0, [r4, #4]
    64d8:	lsl	r2, r0, #4
    64dc:	add	ip, r4, r2
    64e0:	sub	lr, ip, #4096	; 0x1000
    64e4:	ldr	r0, [lr, #4088]	; 0xff8
    64e8:	ldr	r2, [r0, #8]
    64ec:	cmp	r2, #1
    64f0:	beq	6514 <coda_cursor_read_int64_array+0x13c>
    64f4:	ldr	r0, [r0, #8]
    64f8:	bl	0 <coda_type_get_class_name>
    64fc:	mov	r2, r0
    6500:	mvn	r0, #104	; 0x68
    6504:	ldr	r1, [pc, #808]	; 6834 <coda_cursor_read_int64_array+0x45c>
    6508:	bl	0 <coda_set_error>
    650c:	mvn	r0, #0
    6510:	b	6818 <coda_cursor_read_int64_array+0x440>
    6514:	add	r1, sp, #24
    6518:	bl	ae0 <get_array_element_read_type>
    651c:	cmp	r0, #0
    6520:	beq	652c <coda_cursor_read_int64_array+0x154>
    6524:	mvn	r0, #0
    6528:	b	6818 <coda_cursor_read_int64_array+0x440>
    652c:	ldr	r0, [sp, #24]
    6530:	cmp	r0, #7
    6534:	bcs	67fc <coda_cursor_read_int64_array+0x424>
    6538:	add	pc, pc, r0, lsl #2
    653c:	nop	{0}
    6540:	b	655c <coda_cursor_read_int64_array+0x184>
    6544:	b	65c4 <coda_cursor_read_int64_array+0x1ec>
    6548:	b	662c <coda_cursor_read_int64_array+0x254>
    654c:	b	6698 <coda_cursor_read_int64_array+0x2c0>
    6550:	b	6704 <coda_cursor_read_int64_array+0x32c>
    6554:	b	676c <coda_cursor_read_int64_array+0x394>
    6558:	b	67d4 <coda_cursor_read_int64_array+0x3fc>
    655c:	mov	r2, r6
    6560:	mov	r1, r5
    6564:	mov	r0, r4
    6568:	bl	1ea0 <read_int8_array>
    656c:	cmp	r0, #0
    6570:	beq	657c <coda_cursor_read_int64_array+0x1a4>
    6574:	mvn	r0, #0
    6578:	b	6818 <coda_cursor_read_int64_array+0x440>
    657c:	add	r1, sp, #28
    6580:	mov	r0, r4
    6584:	bl	0 <coda_cursor_get_num_elements>
    6588:	cmp	r0, #0
    658c:	beq	6598 <coda_cursor_read_int64_array+0x1c0>
    6590:	mvn	r0, #0
    6594:	b	6818 <coda_cursor_read_int64_array+0x440>
    6598:	ldr	r2, [sp, #28]
    659c:	sub	r1, r2, #1
    65a0:	cmp	r1, #0
    65a4:	blt	67f4 <coda_cursor_read_int64_array+0x41c>
    65a8:	add	r2, r5, r1, lsl #3
    65ac:	ldrsb	ip, [r5, r1]
    65b0:	asr	r0, ip, #31
    65b4:	str	ip, [r2]
    65b8:	str	r0, [r2, #4]
    65bc:	sub	r1, r1, #1
    65c0:	b	65a0 <coda_cursor_read_int64_array+0x1c8>
    65c4:	mov	r2, r6
    65c8:	mov	r1, r5
    65cc:	mov	r0, r4
    65d0:	bl	2028 <read_uint8_array>
    65d4:	cmp	r0, #0
    65d8:	beq	65e4 <coda_cursor_read_int64_array+0x20c>
    65dc:	mvn	r0, #0
    65e0:	b	6818 <coda_cursor_read_int64_array+0x440>
    65e4:	add	r1, sp, #28
    65e8:	mov	r0, r4
    65ec:	bl	0 <coda_cursor_get_num_elements>
    65f0:	cmp	r0, #0
    65f4:	beq	6600 <coda_cursor_read_int64_array+0x228>
    65f8:	mvn	r0, #0
    65fc:	b	6818 <coda_cursor_read_int64_array+0x440>
    6600:	ldr	r3, [sp, #28]
    6604:	sub	ip, r3, #1
    6608:	cmp	ip, #0
    660c:	blt	67f4 <coda_cursor_read_int64_array+0x41c>
    6610:	add	r2, r5, ip, lsl #3
    6614:	mov	r1, #0
    6618:	ldrb	r0, [r5, ip]
    661c:	str	r0, [r2]
    6620:	str	r1, [r2, #4]
    6624:	sub	ip, ip, #1
    6628:	b	6608 <coda_cursor_read_int64_array+0x230>
    662c:	mov	r2, r6
    6630:	mov	r1, r5
    6634:	mov	r0, r4
    6638:	bl	2190 <read_int16_array>
    663c:	cmp	r0, #0
    6640:	beq	664c <coda_cursor_read_int64_array+0x274>
    6644:	mvn	r0, #0
    6648:	b	6818 <coda_cursor_read_int64_array+0x440>
    664c:	add	r1, sp, #28
    6650:	mov	r0, r4
    6654:	bl	0 <coda_cursor_get_num_elements>
    6658:	cmp	r0, #0
    665c:	beq	6668 <coda_cursor_read_int64_array+0x290>
    6660:	mvn	r0, #0
    6664:	b	6818 <coda_cursor_read_int64_array+0x440>
    6668:	ldr	ip, [sp, #28]
    666c:	sub	r3, ip, #1
    6670:	cmp	r3, #0
    6674:	blt	67f4 <coda_cursor_read_int64_array+0x41c>
    6678:	add	ip, r5, r3, lsl #3
    667c:	add	r0, r5, r3, lsl #1
    6680:	ldrsh	r1, [r0]
    6684:	asr	r2, r1, #31
    6688:	str	r1, [ip]
    668c:	str	r2, [ip, #4]
    6690:	sub	r3, r3, #1
    6694:	b	6670 <coda_cursor_read_int64_array+0x298>
    6698:	mov	r2, r6
    669c:	mov	r1, r5
    66a0:	mov	r0, r4
    66a4:	bl	2318 <read_uint16_array>
    66a8:	cmp	r0, #0
    66ac:	beq	66b8 <coda_cursor_read_int64_array+0x2e0>
    66b0:	mvn	r0, #0
    66b4:	b	6818 <coda_cursor_read_int64_array+0x440>
    66b8:	add	r1, sp, #28
    66bc:	mov	r0, r4
    66c0:	bl	0 <coda_cursor_get_num_elements>
    66c4:	cmp	r0, #0
    66c8:	beq	66d4 <coda_cursor_read_int64_array+0x2fc>
    66cc:	mvn	r0, #0
    66d0:	b	6818 <coda_cursor_read_int64_array+0x440>
    66d4:	ldr	r1, [sp, #28]
    66d8:	sub	r0, r1, #1
    66dc:	cmp	r0, #0
    66e0:	blt	67f4 <coda_cursor_read_int64_array+0x41c>
    66e4:	add	ip, r5, r0, lsl #3
    66e8:	mov	r3, #0
    66ec:	add	r1, r5, r0, lsl #1
    66f0:	ldrh	r2, [r1]
    66f4:	str	r2, [ip]
    66f8:	str	r3, [ip, #4]
    66fc:	sub	r0, r0, #1
    6700:	b	66dc <coda_cursor_read_int64_array+0x304>
    6704:	mov	r2, r6
    6708:	mov	r1, r5
    670c:	mov	r0, r4
    6710:	bl	2480 <read_int32_array>
    6714:	cmp	r0, #0
    6718:	beq	6724 <coda_cursor_read_int64_array+0x34c>
    671c:	mvn	r0, #0
    6720:	b	6818 <coda_cursor_read_int64_array+0x440>
    6724:	add	r1, sp, #28
    6728:	mov	r0, r4
    672c:	bl	0 <coda_cursor_get_num_elements>
    6730:	cmp	r0, #0
    6734:	beq	6740 <coda_cursor_read_int64_array+0x368>
    6738:	mvn	r0, #0
    673c:	b	6818 <coda_cursor_read_int64_array+0x440>
    6740:	ldr	ip, [sp, #28]
    6744:	sub	r0, ip, #1
    6748:	cmp	r0, #0
    674c:	blt	67f4 <coda_cursor_read_int64_array+0x41c>
    6750:	add	r1, r5, r0, lsl #3
    6754:	ldr	r3, [r5, r0, lsl #2]
    6758:	asr	ip, r3, #31
    675c:	str	r3, [r1]
    6760:	str	ip, [r1, #4]
    6764:	sub	r0, r0, #1
    6768:	b	6748 <coda_cursor_read_int64_array+0x370>
    676c:	mov	r2, r6
    6770:	mov	r1, r5
    6774:	mov	r0, r4
    6778:	bl	2608 <read_uint32_array>
    677c:	cmp	r0, #0
    6780:	beq	678c <coda_cursor_read_int64_array+0x3b4>
    6784:	mvn	r0, #0
    6788:	b	6818 <coda_cursor_read_int64_array+0x440>
    678c:	add	r1, sp, #28
    6790:	mov	r0, r4
    6794:	bl	0 <coda_cursor_get_num_elements>
    6798:	cmp	r0, #0
    679c:	beq	67a8 <coda_cursor_read_int64_array+0x3d0>
    67a0:	mvn	r0, #0
    67a4:	b	6818 <coda_cursor_read_int64_array+0x440>
    67a8:	ldr	r3, [sp, #28]
    67ac:	sub	ip, r3, #1
    67b0:	cmp	ip, #0
    67b4:	blt	67f4 <coda_cursor_read_int64_array+0x41c>
    67b8:	add	r3, r5, ip, lsl #3
    67bc:	mov	r2, #0
    67c0:	ldr	r1, [r5, ip, lsl #2]
    67c4:	str	r1, [r3]
    67c8:	str	r2, [r3, #4]
    67cc:	sub	ip, ip, #1
    67d0:	b	67b0 <coda_cursor_read_int64_array+0x3d8>
    67d4:	mov	r2, r6
    67d8:	mov	r1, r5
    67dc:	mov	r0, r4
    67e0:	bl	2770 <read_int64_array>
    67e4:	cmp	r0, #0
    67e8:	beq	67f4 <coda_cursor_read_int64_array+0x41c>
    67ec:	mvn	r0, #0
    67f0:	b	6818 <coda_cursor_read_int64_array+0x440>
    67f4:	mov	r0, #0
    67f8:	b	6818 <coda_cursor_read_int64_array+0x440>
    67fc:	ldr	r0, [sp, #24]
    6800:	bl	0 <coda_type_get_native_type_name>
    6804:	mov	r2, r0
    6808:	mvn	r0, #104	; 0x68
    680c:	ldr	r1, [pc, #28]	; 6830 <coda_cursor_read_int64_array+0x458>
    6810:	bl	0 <coda_set_error>
    6814:	mvn	r0, #0
    6818:	ldr	r4, [sp, #8]
    681c:	ldr	r5, [sp, #12]
    6820:	ldr	r6, [sp, #16]
    6824:	ldr	lr, [sp, #4]
    6828:	add	sp, sp, #32
    682c:	bx	lr
    6830:	.word	0x00000106
    6834:	.word	0x000002bc
    6838:	.word	0x00000453
    683c:	.word	0x0000022b
    6840:	.word	0x0000005b

00006844 <coda_cursor_read_uint64_array>:
    6844:	mov	ip, sp
    6848:	sub	sp, sp, #32
    684c:	str	ip, [sp]
    6850:	str	lr, [sp, #4]
    6854:	str	r4, [sp, #8]
    6858:	str	r5, [sp, #12]
    685c:	str	r6, [sp, #16]
    6860:	mov	r5, r2
    6864:	mov	r6, r1
    6868:	mov	r4, r0
    686c:	cmp	r4, #0
    6870:	beq	6888 <coda_cursor_read_uint64_array+0x44>
    6874:	ldr	r1, [r4, #4]
    6878:	cmp	r1, #0
    687c:	movle	r1, #1
    6880:	movgt	r1, #0
    6884:	b	688c <coda_cursor_read_uint64_array+0x48>
    6888:	mov	r1, #1
    688c:	cmp	r1, #0
    6890:	bne	68b8 <coda_cursor_read_uint64_array+0x74>
    6894:	ldr	r3, [r4, #4]
    6898:	lsl	ip, r3, #4
    689c:	add	r0, r4, ip
    68a0:	sub	lr, r0, #4096	; 0x1000
    68a4:	ldr	r2, [lr, #4088]	; 0xff8
    68a8:	cmp	r2, #0
    68ac:	moveq	r1, #1
    68b0:	movne	r1, #0
    68b4:	b	68bc <coda_cursor_read_uint64_array+0x78>
    68b8:	mov	r1, #1
    68bc:	cmp	r1, #0
    68c0:	beq	68e0 <coda_cursor_read_uint64_array+0x9c>
    68c4:	mvn	r0, #99	; 0x63
    68c8:	ldr	r1, [pc, #676]	; 6b74 <coda_cursor_read_uint64_array+0x330>
    68cc:	ldr	r2, [pc, #668]	; 6b70 <coda_cursor_read_uint64_array+0x32c>
    68d0:	movw	r3, #3561	; 0xde9
    68d4:	bl	0 <coda_set_error>
    68d8:	mvn	r0, #0
    68dc:	b	6b50 <coda_cursor_read_uint64_array+0x30c>
    68e0:	cmp	r6, #0
    68e4:	bne	6904 <coda_cursor_read_uint64_array+0xc0>
    68e8:	mvn	r0, #99	; 0x63
    68ec:	ldr	r1, [pc, #644]	; 6b78 <coda_cursor_read_uint64_array+0x334>
    68f0:	ldr	r2, [pc, #632]	; 6b70 <coda_cursor_read_uint64_array+0x32c>
    68f4:	movw	r3, #3566	; 0xdee
    68f8:	bl	0 <coda_set_error>
    68fc:	mvn	r0, #0
    6900:	b	6b50 <coda_cursor_read_uint64_array+0x30c>
    6904:	ldr	r0, [r4, #4]
    6908:	lsl	r1, r0, #4
    690c:	add	r0, r4, r1
    6910:	sub	lr, r0, #4096	; 0x1000
    6914:	ldr	r2, [lr, #4088]	; 0xff8
    6918:	ldr	r3, [r2]
    691c:	cmp	r3, #100	; 0x64
    6920:	blt	6940 <coda_cursor_read_uint64_array+0xfc>
    6924:	ldr	r0, [r4, #4]
    6928:	lsl	r3, r0, #4
    692c:	add	ip, r4, r3
    6930:	sub	lr, ip, #4096	; 0x1000
    6934:	ldr	r2, [lr, #4088]	; 0xff8
    6938:	ldr	r0, [r2, #4]
    693c:	b	6954 <coda_cursor_read_uint64_array+0x110>
    6940:	ldr	r3, [r4, #4]
    6944:	lsl	r0, r3, #4
    6948:	add	r0, r4, r0
    694c:	sub	lr, r0, #4096	; 0x1000
    6950:	ldr	r0, [lr, #4088]	; 0xff8
    6954:	ldr	r1, [r0, #8]
    6958:	cmp	r1, #1
    695c:	beq	6984 <coda_cursor_read_uint64_array+0x140>
    6960:	ldr	r0, [r0, #8]
    6964:	bl	0 <coda_type_get_class_name>
    6968:	mvn	r3, #104	; 0x68
    696c:	ldr	r1, [pc, #504]	; 6b6c <coda_cursor_read_uint64_array+0x328>
    6970:	mov	r2, r0
    6974:	mov	r0, r3
    6978:	bl	0 <coda_set_error>
    697c:	mvn	r0, #0
    6980:	b	6b50 <coda_cursor_read_uint64_array+0x30c>
    6984:	add	r1, sp, #24
    6988:	bl	ae0 <get_array_element_read_type>
    698c:	cmp	r0, #0
    6990:	beq	699c <coda_cursor_read_uint64_array+0x158>
    6994:	mvn	r0, #0
    6998:	b	6b50 <coda_cursor_read_uint64_array+0x30c>
    699c:	ldr	r3, [sp, #24]
    69a0:	cmp	r3, #5
    69a4:	bcs	6a8c <coda_cursor_read_uint64_array+0x248>
    69a8:	cmp	r3, #1
    69ac:	beq	6a24 <coda_cursor_read_uint64_array+0x1e0>
    69b0:	cmp	r3, #3
    69b4:	bne	6abc <coda_cursor_read_uint64_array+0x278>
    69b8:	mov	r2, r5
    69bc:	mov	r1, r6
    69c0:	mov	r0, r4
    69c4:	bl	2318 <read_uint16_array>
    69c8:	cmp	r0, #0
    69cc:	beq	69d8 <coda_cursor_read_uint64_array+0x194>
    69d0:	mvn	r0, #0
    69d4:	b	6b50 <coda_cursor_read_uint64_array+0x30c>
    69d8:	add	r1, sp, #28
    69dc:	mov	r0, r4
    69e0:	bl	0 <coda_cursor_get_num_elements>
    69e4:	cmp	r0, #0
    69e8:	beq	69f4 <coda_cursor_read_uint64_array+0x1b0>
    69ec:	mvn	r0, #0
    69f0:	b	6b50 <coda_cursor_read_uint64_array+0x30c>
    69f4:	ldr	ip, [sp, #28]
    69f8:	sub	r3, ip, #1
    69fc:	cmp	r3, #0
    6a00:	blt	6b4c <coda_cursor_read_uint64_array+0x308>
    6a04:	add	r1, r6, r3, lsl #3
    6a08:	mov	r0, #0
    6a0c:	add	r2, r6, r3, lsl #1
    6a10:	ldrh	ip, [r2]
    6a14:	str	ip, [r1]
    6a18:	str	r0, [r1, #4]
    6a1c:	sub	r3, r3, #1
    6a20:	b	69fc <coda_cursor_read_uint64_array+0x1b8>
    6a24:	mov	r2, r5
    6a28:	mov	r1, r6
    6a2c:	mov	r0, r4
    6a30:	bl	2028 <read_uint8_array>
    6a34:	cmp	r0, #0
    6a38:	beq	6a44 <coda_cursor_read_uint64_array+0x200>
    6a3c:	mvn	r0, #0
    6a40:	b	6b50 <coda_cursor_read_uint64_array+0x30c>
    6a44:	add	r1, sp, #28
    6a48:	mov	r0, r4
    6a4c:	bl	0 <coda_cursor_get_num_elements>
    6a50:	cmp	r0, #0
    6a54:	beq	6a60 <coda_cursor_read_uint64_array+0x21c>
    6a58:	mvn	r0, #0
    6a5c:	b	6b50 <coda_cursor_read_uint64_array+0x30c>
    6a60:	ldr	r2, [sp, #28]
    6a64:	sub	ip, r2, #1
    6a68:	cmp	ip, #0
    6a6c:	blt	6b4c <coda_cursor_read_uint64_array+0x308>
    6a70:	add	r3, r6, ip, lsl #3
    6a74:	mov	r2, #0
    6a78:	ldrb	r1, [r6, ip]
    6a7c:	str	r1, [r3]
    6a80:	str	r2, [r3, #4]
    6a84:	sub	ip, ip, #1
    6a88:	b	6a68 <coda_cursor_read_uint64_array+0x224>
    6a8c:	cmp	r3, #5
    6a90:	beq	6ae4 <coda_cursor_read_uint64_array+0x2a0>
    6a94:	cmp	r3, #7
    6a98:	bne	6abc <coda_cursor_read_uint64_array+0x278>
    6a9c:	mov	r2, r5
    6aa0:	mov	r1, r6
    6aa4:	mov	r0, r4
    6aa8:	bl	28d8 <read_uint64_array>
    6aac:	cmp	r0, #0
    6ab0:	beq	6b4c <coda_cursor_read_uint64_array+0x308>
    6ab4:	mvn	r0, #0
    6ab8:	b	6b50 <coda_cursor_read_uint64_array+0x30c>
    6abc:	ldr	r0, [sp, #24]
    6ac0:	bl	0 <coda_type_get_native_type_name>
    6ac4:	mvn	r2, #104	; 0x68
    6ac8:	ldr	r1, [pc, #152]	; 6b68 <coda_cursor_read_uint64_array+0x324>
    6acc:	mov	r3, r0
    6ad0:	mov	r0, r2
    6ad4:	mov	r2, r3
    6ad8:	bl	0 <coda_set_error>
    6adc:	mvn	r0, #0
    6ae0:	b	6b50 <coda_cursor_read_uint64_array+0x30c>
    6ae4:	mov	r2, r5
    6ae8:	mov	r1, r6
    6aec:	mov	r0, r4
    6af0:	bl	2608 <read_uint32_array>
    6af4:	cmp	r0, #0
    6af8:	beq	6b04 <coda_cursor_read_uint64_array+0x2c0>
    6afc:	mvn	r0, #0
    6b00:	b	6b50 <coda_cursor_read_uint64_array+0x30c>
    6b04:	add	r1, sp, #28
    6b08:	mov	r0, r4
    6b0c:	bl	0 <coda_cursor_get_num_elements>
    6b10:	cmp	r0, #0
    6b14:	beq	6b20 <coda_cursor_read_uint64_array+0x2dc>
    6b18:	mvn	r0, #0
    6b1c:	b	6b50 <coda_cursor_read_uint64_array+0x30c>
    6b20:	ldr	ip, [sp, #28]
    6b24:	sub	r2, ip, #1
    6b28:	cmp	r2, #0
    6b2c:	blt	6b4c <coda_cursor_read_uint64_array+0x308>
    6b30:	add	r3, r6, r2, lsl #3
    6b34:	mov	r1, #0
    6b38:	ldr	r0, [r6, r2, lsl #2]
    6b3c:	str	r0, [r3]
    6b40:	str	r1, [r3, #4]
    6b44:	sub	r2, r2, #1
    6b48:	b	6b28 <coda_cursor_read_uint64_array+0x2e4>
    6b4c:	mov	r0, #0
    6b50:	ldr	r4, [sp, #8]
    6b54:	ldr	r5, [sp, #12]
    6b58:	ldr	r6, [sp, #16]
    6b5c:	ldr	lr, [sp, #4]
    6b60:	add	sp, sp, #32
    6b64:	bx	lr
    6b68:	.word	0x000000a5
    6b6c:	.word	0x000002bc
    6b70:	.word	0x00000453
    6b74:	.word	0x0000022b
    6b78:	.word	0x0000005b

00006b7c <coda_cursor_read_float_array>:
    6b7c:	mov	ip, sp
    6b80:	sub	sp, sp, #48	; 0x30
    6b84:	str	ip, [sp, #4]
    6b88:	str	lr, [sp, #8]
    6b8c:	str	r4, [sp, #16]
    6b90:	str	r5, [sp, #20]
    6b94:	str	r6, [sp, #24]
    6b98:	str	r7, [sp, #28]
    6b9c:	mov	r4, r2
    6ba0:	mov	r5, r1
    6ba4:	mov	r6, r0
    6ba8:	cmp	r6, #0
    6bac:	beq	6bc4 <coda_cursor_read_float_array+0x48>
    6bb0:	ldr	r1, [r6, #4]
    6bb4:	cmp	r1, #0
    6bb8:	movle	r0, #1
    6bbc:	movgt	r0, #0
    6bc0:	b	6bc8 <coda_cursor_read_float_array+0x4c>
    6bc4:	mov	r0, #1
    6bc8:	cmp	r0, #0
    6bcc:	bne	6bf4 <coda_cursor_read_float_array+0x78>
    6bd0:	ldr	ip, [r6, #4]
    6bd4:	lsl	r2, ip, #4
    6bd8:	add	r1, r6, r2
    6bdc:	sub	lr, r1, #4096	; 0x1000
    6be0:	ldr	r1, [lr, #4088]	; 0xff8
    6be4:	cmp	r1, #0
    6be8:	moveq	r2, #1
    6bec:	movne	r2, #0
    6bf0:	b	6bf8 <coda_cursor_read_float_array+0x7c>
    6bf4:	mov	r2, #1
    6bf8:	cmp	r2, #0
    6bfc:	beq	6c1c <coda_cursor_read_float_array+0xa0>
    6c00:	mvn	r0, #99	; 0x63
    6c04:	ldr	r1, [pc, #1776]	; 72fc <coda_cursor_read_float_array+0x780>
    6c08:	ldr	r2, [pc, #1768]	; 72f8 <coda_cursor_read_float_array+0x77c>
    6c0c:	movw	r3, #3673	; 0xe59
    6c10:	bl	0 <coda_set_error>
    6c14:	mvn	r0, #0
    6c18:	b	72d4 <coda_cursor_read_float_array+0x758>
    6c1c:	cmp	r5, #0
    6c20:	bne	6c40 <coda_cursor_read_float_array+0xc4>
    6c24:	mvn	r0, #99	; 0x63
    6c28:	ldr	r1, [pc, #1748]	; 7304 <coda_cursor_read_float_array+0x788>
    6c2c:	ldr	r2, [pc, #1732]	; 72f8 <coda_cursor_read_float_array+0x77c>
    6c30:	movw	r3, #3678	; 0xe5e
    6c34:	bl	0 <coda_set_error>
    6c38:	mvn	r0, #0
    6c3c:	b	72d4 <coda_cursor_read_float_array+0x758>
    6c40:	ldr	r2, [r6, #4]
    6c44:	lsl	ip, r2, #4
    6c48:	add	r3, r6, ip
    6c4c:	sub	lr, r3, #4096	; 0x1000
    6c50:	ldr	r3, [lr, #4088]	; 0xff8
    6c54:	ldr	r3, [r3]
    6c58:	cmp	r3, #100	; 0x64
    6c5c:	blt	6c7c <coda_cursor_read_float_array+0x100>
    6c60:	ldr	ip, [r6, #4]
    6c64:	lsl	r2, ip, #4
    6c68:	add	r3, r6, r2
    6c6c:	sub	lr, r3, #4096	; 0x1000
    6c70:	ldr	r2, [lr, #4088]	; 0xff8
    6c74:	ldr	r0, [r2, #4]
    6c78:	b	6c90 <coda_cursor_read_float_array+0x114>
    6c7c:	ldr	r3, [r6, #4]
    6c80:	lsl	r1, r3, #4
    6c84:	add	ip, r6, r1
    6c88:	sub	lr, ip, #4096	; 0x1000
    6c8c:	ldr	r0, [lr, #4088]	; 0xff8
    6c90:	ldr	r1, [r0, #8]
    6c94:	cmp	r1, #1
    6c98:	beq	6cbc <coda_cursor_read_float_array+0x140>
    6c9c:	ldr	r0, [r0, #8]
    6ca0:	bl	0 <coda_type_get_class_name>
    6ca4:	mov	r2, r0
    6ca8:	mvn	r0, #104	; 0x68
    6cac:	ldr	r1, [pc, #1600]	; 72f4 <coda_cursor_read_float_array+0x778>
    6cb0:	bl	0 <coda_set_error>
    6cb4:	mvn	r0, #0
    6cb8:	b	72d4 <coda_cursor_read_float_array+0x758>
    6cbc:	add	r1, sp, #36	; 0x24
    6cc0:	add	r2, sp, #40	; 0x28
    6cc4:	bl	b8c <get_array_element_unconverted_read_type>
    6cc8:	cmp	r0, #0
    6ccc:	beq	6cd8 <coda_cursor_read_float_array+0x15c>
    6cd0:	mvn	r0, #0
    6cd4:	b	72d4 <coda_cursor_read_float_array+0x758>
    6cd8:	ldr	r3, [sp, #40]	; 0x28
    6cdc:	cmp	r3, #0
    6ce0:	beq	6da4 <coda_cursor_read_float_array+0x228>
    6ce4:	add	r1, sp, #32
    6ce8:	mov	r0, r6
    6cec:	bl	0 <coda_cursor_get_num_elements>
    6cf0:	cmp	r0, #0
    6cf4:	beq	6d00 <coda_cursor_read_float_array+0x184>
    6cf8:	mvn	r0, #0
    6cfc:	b	72d4 <coda_cursor_read_float_array+0x758>
    6d00:	ldr	r1, [sp, #32]
    6d04:	lsl	r0, r1, #3
    6d08:	bl	0 <malloc>
    6d0c:	mov	r7, r0
    6d10:	cmp	r7, #0
    6d14:	bne	6d40 <coda_cursor_read_float_array+0x1c4>
    6d18:	mvn	r0, #0
    6d1c:	ldr	r1, [pc, #1484]	; 72f0 <coda_cursor_read_float_array+0x774>
    6d20:	ldr	r2, [sp, #32]
    6d24:	lsl	r2, r2, #3
    6d28:	ldr	r3, [pc, #1480]	; 72f8 <coda_cursor_read_float_array+0x77c>
    6d2c:	movw	r4, #3707	; 0xe7b
    6d30:	str	r4, [sp]
    6d34:	bl	0 <coda_set_error>
    6d38:	mvn	r0, #0
    6d3c:	b	72d4 <coda_cursor_read_float_array+0x758>
    6d40:	mov	r2, r4
    6d44:	mov	r1, r7
    6d48:	mov	r0, r6
    6d4c:	bl	7308 <coda_cursor_read_double_array>
    6d50:	cmp	r0, #0
    6d54:	beq	6d68 <coda_cursor_read_float_array+0x1ec>
    6d58:	mov	r0, r7
    6d5c:	bl	0 <free>
    6d60:	mvn	r0, #0
    6d64:	b	72d4 <coda_cursor_read_float_array+0x758>
    6d68:	ldr	ip, [sp, #32]
    6d6c:	sub	r3, ip, #1
    6d70:	cmp	r3, #0
    6d74:	blt	6d94 <coda_cursor_read_float_array+0x218>
    6d78:	add	r0, r5, r3, lsl #2
    6d7c:	add	ip, r7, r3, lsl #3
    6d80:	vldr	d6, [ip]
    6d84:	vcvt.f32.f64	s6, d6
    6d88:	vstr	s6, [r0]
    6d8c:	sub	r3, r3, #1
    6d90:	b	6d70 <coda_cursor_read_float_array+0x1f4>
    6d94:	mov	r0, r7
    6d98:	bl	0 <free>
    6d9c:	mov	r0, #0
    6da0:	b	72d4 <coda_cursor_read_float_array+0x758>
    6da4:	ldr	r0, [sp, #36]	; 0x24
    6da8:	cmp	r0, #10
    6dac:	bcs	72b8 <coda_cursor_read_float_array+0x73c>
    6db0:	add	pc, pc, r0, lsl #2
    6db4:	nop	{0}
    6db8:	b	6de0 <coda_cursor_read_float_array+0x264>
    6dbc:	b	6e48 <coda_cursor_read_float_array+0x2cc>
    6dc0:	b	6eb0 <coda_cursor_read_float_array+0x334>
    6dc4:	b	6f1c <coda_cursor_read_float_array+0x3a0>
    6dc8:	b	6f88 <coda_cursor_read_float_array+0x40c>
    6dcc:	b	6ff0 <coda_cursor_read_float_array+0x474>
    6dd0:	b	7058 <coda_cursor_read_float_array+0x4dc>
    6dd4:	b	7118 <coda_cursor_read_float_array+0x59c>
    6dd8:	b	71d8 <coda_cursor_read_float_array+0x65c>
    6ddc:	b	71f8 <coda_cursor_read_float_array+0x67c>
    6de0:	mov	r2, r4
    6de4:	mov	r1, r5
    6de8:	mov	r0, r6
    6dec:	bl	1ea0 <read_int8_array>
    6df0:	cmp	r0, #0
    6df4:	beq	6e00 <coda_cursor_read_float_array+0x284>
    6df8:	mvn	r0, #0
    6dfc:	b	72d4 <coda_cursor_read_float_array+0x758>
    6e00:	add	r1, sp, #32
    6e04:	mov	r0, r6
    6e08:	bl	0 <coda_cursor_get_num_elements>
    6e0c:	cmp	r0, #0
    6e10:	beq	6e1c <coda_cursor_read_float_array+0x2a0>
    6e14:	mvn	r0, #0
    6e18:	b	72d4 <coda_cursor_read_float_array+0x758>
    6e1c:	ldr	r0, [sp, #32]
    6e20:	sub	r1, r0, #1
    6e24:	cmp	r1, #0
    6e28:	blt	72b0 <coda_cursor_read_float_array+0x734>
    6e2c:	add	ip, r5, r1, lsl #2
    6e30:	ldrsb	r0, [r5, r1]
    6e34:	vmov	s0, r0
    6e38:	vcvt.f32.s32	s0, s0
    6e3c:	vstr	s0, [ip]
    6e40:	sub	r1, r1, #1
    6e44:	b	6e24 <coda_cursor_read_float_array+0x2a8>
    6e48:	mov	r2, r4
    6e4c:	mov	r1, r5
    6e50:	mov	r0, r6
    6e54:	bl	2028 <read_uint8_array>
    6e58:	cmp	r0, #0
    6e5c:	beq	6e68 <coda_cursor_read_float_array+0x2ec>
    6e60:	mvn	r0, #0
    6e64:	b	72d4 <coda_cursor_read_float_array+0x758>
    6e68:	add	r1, sp, #32
    6e6c:	mov	r0, r6
    6e70:	bl	0 <coda_cursor_get_num_elements>
    6e74:	cmp	r0, #0
    6e78:	beq	6e84 <coda_cursor_read_float_array+0x308>
    6e7c:	mvn	r0, #0
    6e80:	b	72d4 <coda_cursor_read_float_array+0x758>
    6e84:	ldr	ip, [sp, #32]
    6e88:	sub	ip, ip, #1
    6e8c:	cmp	ip, #0
    6e90:	blt	72b0 <coda_cursor_read_float_array+0x734>
    6e94:	add	r1, r5, ip, lsl #2
    6e98:	ldrb	r3, [r5, ip]
    6e9c:	vmov	s8, r3
    6ea0:	vcvt.f32.u32	s8, s8
    6ea4:	vstr	s8, [r1]
    6ea8:	sub	ip, ip, #1
    6eac:	b	6e8c <coda_cursor_read_float_array+0x310>
    6eb0:	mov	r2, r4
    6eb4:	mov	r1, r5
    6eb8:	mov	r0, r6
    6ebc:	bl	2190 <read_int16_array>
    6ec0:	cmp	r0, #0
    6ec4:	beq	6ed0 <coda_cursor_read_float_array+0x354>
    6ec8:	mvn	r0, #0
    6ecc:	b	72d4 <coda_cursor_read_float_array+0x758>
    6ed0:	add	r1, sp, #32
    6ed4:	mov	r0, r6
    6ed8:	bl	0 <coda_cursor_get_num_elements>
    6edc:	cmp	r0, #0
    6ee0:	beq	6eec <coda_cursor_read_float_array+0x370>
    6ee4:	mvn	r0, #0
    6ee8:	b	72d4 <coda_cursor_read_float_array+0x758>
    6eec:	ldr	r2, [sp, #32]
    6ef0:	sub	r0, r2, #1
    6ef4:	cmp	r0, #0
    6ef8:	blt	72b0 <coda_cursor_read_float_array+0x734>
    6efc:	add	r3, r5, r0, lsl #2
    6f00:	add	ip, r5, r0, lsl #1
    6f04:	ldrsh	r1, [ip]
    6f08:	vmov	s8, r1
    6f0c:	vcvt.f32.s32	s8, s8
    6f10:	vstr	s8, [r3]
    6f14:	sub	r0, r0, #1
    6f18:	b	6ef4 <coda_cursor_read_float_array+0x378>
    6f1c:	mov	r2, r4
    6f20:	mov	r1, r5
    6f24:	mov	r0, r6
    6f28:	bl	2318 <read_uint16_array>
    6f2c:	cmp	r0, #0
    6f30:	beq	6f3c <coda_cursor_read_float_array+0x3c0>
    6f34:	mvn	r0, #0
    6f38:	b	72d4 <coda_cursor_read_float_array+0x758>
    6f3c:	add	r1, sp, #32
    6f40:	mov	r0, r6
    6f44:	bl	0 <coda_cursor_get_num_elements>
    6f48:	cmp	r0, #0
    6f4c:	beq	6f58 <coda_cursor_read_float_array+0x3dc>
    6f50:	mvn	r0, #0
    6f54:	b	72d4 <coda_cursor_read_float_array+0x758>
    6f58:	ldr	r0, [sp, #32]
    6f5c:	sub	r0, r0, #1
    6f60:	cmp	r0, #0
    6f64:	blt	72b0 <coda_cursor_read_float_array+0x734>
    6f68:	add	r2, r5, r0, lsl #2
    6f6c:	add	r3, r5, r0, lsl #1
    6f70:	ldrh	r1, [r3]
    6f74:	vmov	s10, r1
    6f78:	vcvt.f32.u32	s10, s10
    6f7c:	vstr	s10, [r2]
    6f80:	sub	r0, r0, #1
    6f84:	b	6f60 <coda_cursor_read_float_array+0x3e4>
    6f88:	mov	r2, r4
    6f8c:	mov	r1, r5
    6f90:	mov	r0, r6
    6f94:	bl	2480 <read_int32_array>
    6f98:	cmp	r0, #0
    6f9c:	beq	6fa8 <coda_cursor_read_float_array+0x42c>
    6fa0:	mvn	r0, #0
    6fa4:	b	72d4 <coda_cursor_read_float_array+0x758>
    6fa8:	add	r1, sp, #32
    6fac:	mov	r0, r6
    6fb0:	bl	0 <coda_cursor_get_num_elements>
    6fb4:	cmp	r0, #0
    6fb8:	beq	6fc4 <coda_cursor_read_float_array+0x448>
    6fbc:	mvn	r0, #0
    6fc0:	b	72d4 <coda_cursor_read_float_array+0x758>
    6fc4:	ldr	r2, [sp, #32]
    6fc8:	sub	r3, r2, #1
    6fcc:	cmp	r3, #0
    6fd0:	blt	72b0 <coda_cursor_read_float_array+0x734>
    6fd4:	add	r0, r5, r3, lsl #2
    6fd8:	ldr	r2, [r5, r3, lsl #2]
    6fdc:	vmov	s2, r2
    6fe0:	vcvt.f32.s32	s2, s2
    6fe4:	vstr	s2, [r0]
    6fe8:	sub	r3, r3, #1
    6fec:	b	6fcc <coda_cursor_read_float_array+0x450>
    6ff0:	mov	r2, r4
    6ff4:	mov	r1, r5
    6ff8:	mov	r0, r6
    6ffc:	bl	2608 <read_uint32_array>
    7000:	cmp	r0, #0
    7004:	beq	7010 <coda_cursor_read_float_array+0x494>
    7008:	mvn	r0, #0
    700c:	b	72d4 <coda_cursor_read_float_array+0x758>
    7010:	add	r1, sp, #32
    7014:	mov	r0, r6
    7018:	bl	0 <coda_cursor_get_num_elements>
    701c:	cmp	r0, #0
    7020:	beq	702c <coda_cursor_read_float_array+0x4b0>
    7024:	mvn	r0, #0
    7028:	b	72d4 <coda_cursor_read_float_array+0x758>
    702c:	ldr	ip, [sp, #32]
    7030:	sub	r2, ip, #1
    7034:	cmp	r2, #0
    7038:	blt	72b0 <coda_cursor_read_float_array+0x734>
    703c:	add	r3, r5, r2, lsl #2
    7040:	ldr	r1, [r5, r2, lsl #2]
    7044:	vmov	s6, r1
    7048:	vcvt.f32.u32	s6, s6
    704c:	vstr	s6, [r3]
    7050:	sub	r2, r2, #1
    7054:	b	7034 <coda_cursor_read_float_array+0x4b8>
    7058:	add	r1, sp, #32
    705c:	mov	r0, r6
    7060:	bl	0 <coda_cursor_get_num_elements>
    7064:	cmp	r0, #0
    7068:	beq	7074 <coda_cursor_read_float_array+0x4f8>
    706c:	mvn	r0, #0
    7070:	b	72d4 <coda_cursor_read_float_array+0x758>
    7074:	ldr	r1, [sp, #32]
    7078:	lsl	r0, r1, #3
    707c:	bl	0 <malloc>
    7080:	mov	r7, r0
    7084:	cmp	r7, #0
    7088:	bne	70b4 <coda_cursor_read_float_array+0x538>
    708c:	mvn	r0, #0
    7090:	ldr	r1, [pc, #600]	; 72f0 <coda_cursor_read_float_array+0x774>
    7094:	ldr	r2, [sp, #32]
    7098:	lsl	r2, r2, #3
    709c:	ldr	r3, [pc, #596]	; 72f8 <coda_cursor_read_float_array+0x77c>
    70a0:	movw	r4, #3820	; 0xeec
    70a4:	str	r4, [sp]
    70a8:	bl	0 <coda_set_error>
    70ac:	mvn	r0, #0
    70b0:	b	72d4 <coda_cursor_read_float_array+0x758>
    70b4:	mov	r2, r4
    70b8:	mov	r1, r7
    70bc:	mov	r0, r6
    70c0:	bl	2770 <read_int64_array>
    70c4:	cmp	r0, #0
    70c8:	beq	70dc <coda_cursor_read_float_array+0x560>
    70cc:	mov	r0, r7
    70d0:	bl	0 <free>
    70d4:	mvn	r0, #0
    70d8:	b	72d4 <coda_cursor_read_float_array+0x758>
    70dc:	ldr	ip, [sp, #32]
    70e0:	sub	r4, ip, #1
    70e4:	cmp	r4, #0
    70e8:	blt	710c <coda_cursor_read_float_array+0x590>
    70ec:	add	r6, r5, r4, lsl #2
    70f0:	add	r1, r7, r4, lsl #3
    70f4:	ldr	r0, [r1]
    70f8:	ldr	r1, [r1, #4]
    70fc:	bl	0 <__compcert_i64_stof>
    7100:	vstr	s0, [r6]
    7104:	sub	r4, r4, #1
    7108:	b	70e4 <coda_cursor_read_float_array+0x568>
    710c:	mov	r0, r7
    7110:	bl	0 <free>
    7114:	b	72b0 <coda_cursor_read_float_array+0x734>
    7118:	add	r1, sp, #32
    711c:	mov	r0, r6
    7120:	bl	0 <coda_cursor_get_num_elements>
    7124:	cmp	r0, #0
    7128:	beq	7134 <coda_cursor_read_float_array+0x5b8>
    712c:	mvn	r0, #0
    7130:	b	72d4 <coda_cursor_read_float_array+0x758>
    7134:	ldr	r0, [sp, #32]
    7138:	lsl	r0, r0, #3
    713c:	bl	0 <malloc>
    7140:	mov	r7, r0
    7144:	cmp	r7, #0
    7148:	bne	7174 <coda_cursor_read_float_array+0x5f8>
    714c:	mvn	r0, #0
    7150:	ldr	r1, [pc, #408]	; 72f0 <coda_cursor_read_float_array+0x774>
    7154:	ldr	r2, [sp, #32]
    7158:	lsl	r2, r2, #3
    715c:	ldr	r3, [pc, #404]	; 72f8 <coda_cursor_read_float_array+0x77c>
    7160:	movw	r4, #3847	; 0xf07
    7164:	str	r4, [sp]
    7168:	bl	0 <coda_set_error>
    716c:	mvn	r0, #0
    7170:	b	72d4 <coda_cursor_read_float_array+0x758>
    7174:	mov	r2, r4
    7178:	mov	r1, r7
    717c:	mov	r0, r6
    7180:	bl	28d8 <read_uint64_array>
    7184:	cmp	r0, #0
    7188:	beq	719c <coda_cursor_read_float_array+0x620>
    718c:	mov	r0, r7
    7190:	bl	0 <free>
    7194:	mvn	r0, #0
    7198:	b	72d4 <coda_cursor_read_float_array+0x758>
    719c:	ldr	ip, [sp, #32]
    71a0:	sub	r6, ip, #1
    71a4:	cmp	r6, #0
    71a8:	blt	71cc <coda_cursor_read_float_array+0x650>
    71ac:	add	r4, r5, r6, lsl #2
    71b0:	add	r1, r7, r6, lsl #3
    71b4:	ldr	r0, [r1]
    71b8:	ldr	r1, [r1, #4]
    71bc:	bl	0 <__compcert_i64_utof>
    71c0:	vstr	s0, [r4]
    71c4:	sub	r6, r6, #1
    71c8:	b	71a4 <coda_cursor_read_float_array+0x628>
    71cc:	mov	r0, r7
    71d0:	bl	0 <free>
    71d4:	b	72b0 <coda_cursor_read_float_array+0x734>
    71d8:	mov	r2, r4
    71dc:	mov	r1, r5
    71e0:	mov	r0, r6
    71e4:	bl	2a24 <read_float_array>
    71e8:	cmp	r0, #0
    71ec:	beq	72b0 <coda_cursor_read_float_array+0x734>
    71f0:	mvn	r0, #0
    71f4:	b	72d4 <coda_cursor_read_float_array+0x758>
    71f8:	add	r1, sp, #32
    71fc:	mov	r0, r6
    7200:	bl	0 <coda_cursor_get_num_elements>
    7204:	cmp	r0, #0
    7208:	beq	7214 <coda_cursor_read_float_array+0x698>
    720c:	mvn	r0, #0
    7210:	b	72d4 <coda_cursor_read_float_array+0x758>
    7214:	ldr	r2, [sp, #32]
    7218:	lsl	r0, r2, #3
    721c:	bl	0 <malloc>
    7220:	mov	r7, r0
    7224:	cmp	r7, #0
    7228:	bne	7254 <coda_cursor_read_float_array+0x6d8>
    722c:	mvn	r0, #0
    7230:	ldr	r1, [pc, #184]	; 72f0 <coda_cursor_read_float_array+0x774>
    7234:	ldr	ip, [sp, #32]
    7238:	lsl	r2, ip, #3
    723c:	ldr	r3, [pc, #180]	; 72f8 <coda_cursor_read_float_array+0x77c>
    7240:	movw	ip, #3880	; 0xf28
    7244:	str	ip, [sp]
    7248:	bl	0 <coda_set_error>
    724c:	mvn	r0, #0
    7250:	b	72d4 <coda_cursor_read_float_array+0x758>
    7254:	mov	r2, r4
    7258:	mov	r1, r7
    725c:	mov	r0, r6
    7260:	bl	2b9c <read_double_array>
    7264:	cmp	r0, #0
    7268:	beq	727c <coda_cursor_read_float_array+0x700>
    726c:	mov	r0, r7
    7270:	bl	0 <free>
    7274:	mvn	r0, #0
    7278:	b	72d4 <coda_cursor_read_float_array+0x758>
    727c:	ldr	r1, [sp, #32]
    7280:	sub	ip, r1, #1
    7284:	cmp	ip, #0
    7288:	blt	72a8 <coda_cursor_read_float_array+0x72c>
    728c:	add	r1, r5, ip, lsl #2
    7290:	add	r3, r7, ip, lsl #3
    7294:	vldr	d7, [r3]
    7298:	vcvt.f32.f64	s8, d7
    729c:	vstr	s8, [r1]
    72a0:	sub	ip, ip, #1
    72a4:	b	7284 <coda_cursor_read_float_array+0x708>
    72a8:	mov	r0, r7
    72ac:	bl	0 <free>
    72b0:	mov	r0, #0
    72b4:	b	72d4 <coda_cursor_read_float_array+0x758>
    72b8:	ldr	r0, [sp, #36]	; 0x24
    72bc:	bl	0 <coda_type_get_native_type_name>
    72c0:	mov	r2, r0
    72c4:	mvn	r0, #104	; 0x68
    72c8:	ldr	r1, [pc, #48]	; 7300 <coda_cursor_read_float_array+0x784>
    72cc:	bl	0 <coda_set_error>
    72d0:	mvn	r0, #0
    72d4:	ldr	r4, [sp, #16]
    72d8:	ldr	r5, [sp, #20]
    72dc:	ldr	r6, [sp, #24]
    72e0:	ldr	r7, [sp, #28]
    72e4:	ldr	lr, [sp, #8]
    72e8:	add	sp, sp, #48	; 0x30
    72ec:	bx	lr
    72f0:	.word	0x000004e3
    72f4:	.word	0x000002bc
    72f8:	.word	0x00000453
    72fc:	.word	0x0000022b
    7300:	.word	0x0000026f
    7304:	.word	0x0000005b

00007308 <coda_cursor_read_double_array>:
    7308:	mov	ip, sp
    730c:	sub	sp, sp, #40	; 0x28
    7310:	str	ip, [sp]
    7314:	str	lr, [sp, #4]
    7318:	str	r4, [sp, #8]
    731c:	str	r5, [sp, #12]
    7320:	str	r6, [sp, #16]
    7324:	str	r7, [sp, #20]
    7328:	mov	r5, r2
    732c:	mov	r6, r1
    7330:	mov	r4, r0
    7334:	cmp	r4, #0
    7338:	beq	7350 <coda_cursor_read_double_array+0x48>
    733c:	ldr	r3, [r4, #4]
    7340:	cmp	r3, #0
    7344:	movle	r2, #1
    7348:	movgt	r2, #0
    734c:	b	7354 <coda_cursor_read_double_array+0x4c>
    7350:	mov	r2, #1
    7354:	cmp	r2, #0
    7358:	bne	7380 <coda_cursor_read_double_array+0x78>
    735c:	ldr	r3, [r4, #4]
    7360:	lsl	r3, r3, #4
    7364:	add	r1, r4, r3
    7368:	sub	lr, r1, #4096	; 0x1000
    736c:	ldr	ip, [lr, #4088]	; 0xff8
    7370:	cmp	ip, #0
    7374:	moveq	r0, #1
    7378:	movne	r0, #0
    737c:	b	7384 <coda_cursor_read_double_array+0x7c>
    7380:	mov	r0, #1
    7384:	cmp	r0, #0
    7388:	beq	73a8 <coda_cursor_read_double_array+0xa0>
    738c:	mvn	r0, #99	; 0x63
    7390:	ldr	r1, [pc, #1484]	; 7964 <coda_cursor_read_double_array+0x65c>
    7394:	ldr	r2, [pc, #1476]	; 7960 <coda_cursor_read_double_array+0x658>
    7398:	movw	r3, #3937	; 0xf61
    739c:	bl	0 <coda_set_error>
    73a0:	mvn	r0, #0
    73a4:	b	793c <coda_cursor_read_double_array+0x634>
    73a8:	cmp	r6, #0
    73ac:	bne	73cc <coda_cursor_read_double_array+0xc4>
    73b0:	mvn	r0, #99	; 0x63
    73b4:	ldr	r1, [pc, #1452]	; 7968 <coda_cursor_read_double_array+0x660>
    73b8:	ldr	r2, [pc, #1440]	; 7960 <coda_cursor_read_double_array+0x658>
    73bc:	movw	r3, #3942	; 0xf66
    73c0:	bl	0 <coda_set_error>
    73c4:	mvn	r0, #0
    73c8:	b	793c <coda_cursor_read_double_array+0x634>
    73cc:	ldr	r2, [r4, #4]
    73d0:	lsl	r1, r2, #4
    73d4:	add	r3, r4, r1
    73d8:	sub	lr, r3, #4096	; 0x1000
    73dc:	ldr	ip, [lr, #4088]	; 0xff8
    73e0:	ldr	r0, [ip]
    73e4:	cmp	r0, #100	; 0x64
    73e8:	blt	7408 <coda_cursor_read_double_array+0x100>
    73ec:	ldr	ip, [r4, #4]
    73f0:	lsl	ip, ip, #4
    73f4:	add	r3, r4, ip
    73f8:	sub	lr, r3, #4096	; 0x1000
    73fc:	ldr	r1, [lr, #4088]	; 0xff8
    7400:	ldr	r0, [r1, #4]
    7404:	b	741c <coda_cursor_read_double_array+0x114>
    7408:	ldr	r2, [r4, #4]
    740c:	lsl	r3, r2, #4
    7410:	add	ip, r4, r3
    7414:	sub	lr, ip, #4096	; 0x1000
    7418:	ldr	r0, [lr, #4088]	; 0xff8
    741c:	ldr	r1, [r0, #8]
    7420:	cmp	r1, #1
    7424:	beq	7448 <coda_cursor_read_double_array+0x140>
    7428:	ldr	r0, [r0, #8]
    742c:	bl	0 <coda_type_get_class_name>
    7430:	mov	r2, r0
    7434:	mvn	r0, #104	; 0x68
    7438:	ldr	r1, [pc, #1308]	; 795c <coda_cursor_read_double_array+0x654>
    743c:	bl	0 <coda_set_error>
    7440:	mvn	r0, #0
    7444:	b	793c <coda_cursor_read_double_array+0x634>
    7448:	add	r1, sp, #28
    744c:	add	r2, sp, #32
    7450:	bl	b8c <get_array_element_unconverted_read_type>
    7454:	cmp	r0, #0
    7458:	beq	7464 <coda_cursor_read_double_array+0x15c>
    745c:	mvn	r0, #0
    7460:	b	793c <coda_cursor_read_double_array+0x634>
    7464:	ldr	r0, [sp, #28]
    7468:	cmp	r0, #10
    746c:	bcs	7920 <coda_cursor_read_double_array+0x618>
    7470:	add	pc, pc, r0, lsl #2
    7474:	nop	{0}
    7478:	b	74a0 <coda_cursor_read_double_array+0x198>
    747c:	b	7508 <coda_cursor_read_double_array+0x200>
    7480:	b	7570 <coda_cursor_read_double_array+0x268>
    7484:	b	75dc <coda_cursor_read_double_array+0x2d4>
    7488:	b	7648 <coda_cursor_read_double_array+0x340>
    748c:	b	76b0 <coda_cursor_read_double_array+0x3a8>
    7490:	b	7718 <coda_cursor_read_double_array+0x410>
    7494:	b	7784 <coda_cursor_read_double_array+0x47c>
    7498:	b	77f0 <coda_cursor_read_double_array+0x4e8>
    749c:	b	7858 <coda_cursor_read_double_array+0x550>
    74a0:	mov	r2, r5
    74a4:	mov	r1, r6
    74a8:	mov	r0, r4
    74ac:	bl	1ea0 <read_int8_array>
    74b0:	cmp	r0, #0
    74b4:	beq	74c0 <coda_cursor_read_double_array+0x1b8>
    74b8:	mvn	r0, #0
    74bc:	b	793c <coda_cursor_read_double_array+0x634>
    74c0:	add	r1, sp, #24
    74c4:	mov	r0, r4
    74c8:	bl	0 <coda_cursor_get_num_elements>
    74cc:	cmp	r0, #0
    74d0:	beq	74dc <coda_cursor_read_double_array+0x1d4>
    74d4:	mvn	r0, #0
    74d8:	b	793c <coda_cursor_read_double_array+0x634>
    74dc:	ldr	r3, [sp, #24]
    74e0:	sub	r0, r3, #1
    74e4:	cmp	r0, #0
    74e8:	blt	7878 <coda_cursor_read_double_array+0x570>
    74ec:	add	r3, r6, r0, lsl #3
    74f0:	ldrsb	r2, [r6, r0]
    74f4:	vmov	s12, r2
    74f8:	vcvt.f64.s32	d6, s12
    74fc:	vstr	d6, [r3]
    7500:	sub	r0, r0, #1
    7504:	b	74e4 <coda_cursor_read_double_array+0x1dc>
    7508:	mov	r2, r5
    750c:	mov	r1, r6
    7510:	mov	r0, r4
    7514:	bl	2028 <read_uint8_array>
    7518:	cmp	r0, #0
    751c:	beq	7528 <coda_cursor_read_double_array+0x220>
    7520:	mvn	r0, #0
    7524:	b	793c <coda_cursor_read_double_array+0x634>
    7528:	add	r1, sp, #24
    752c:	mov	r0, r4
    7530:	bl	0 <coda_cursor_get_num_elements>
    7534:	cmp	r0, #0
    7538:	beq	7544 <coda_cursor_read_double_array+0x23c>
    753c:	mvn	r0, #0
    7540:	b	793c <coda_cursor_read_double_array+0x634>
    7544:	ldr	ip, [sp, #24]
    7548:	sub	r1, ip, #1
    754c:	cmp	r1, #0
    7550:	blt	7878 <coda_cursor_read_double_array+0x570>
    7554:	add	ip, r6, r1, lsl #3
    7558:	ldrb	r2, [r6, r1]
    755c:	vmov	s6, r2
    7560:	vcvt.f64.u32	d3, s6
    7564:	vstr	d3, [ip]
    7568:	sub	r1, r1, #1
    756c:	b	754c <coda_cursor_read_double_array+0x244>
    7570:	mov	r2, r5
    7574:	mov	r1, r6
    7578:	mov	r0, r4
    757c:	bl	2190 <read_int16_array>
    7580:	cmp	r0, #0
    7584:	beq	7590 <coda_cursor_read_double_array+0x288>
    7588:	mvn	r0, #0
    758c:	b	793c <coda_cursor_read_double_array+0x634>
    7590:	add	r1, sp, #24
    7594:	mov	r0, r4
    7598:	bl	0 <coda_cursor_get_num_elements>
    759c:	cmp	r0, #0
    75a0:	beq	75ac <coda_cursor_read_double_array+0x2a4>
    75a4:	mvn	r0, #0
    75a8:	b	793c <coda_cursor_read_double_array+0x634>
    75ac:	ldr	r2, [sp, #24]
    75b0:	sub	r2, r2, #1
    75b4:	cmp	r2, #0
    75b8:	blt	7878 <coda_cursor_read_double_array+0x570>
    75bc:	add	r0, r6, r2, lsl #3
    75c0:	add	r1, r6, r2, lsl #1
    75c4:	ldrsh	ip, [r1]
    75c8:	vmov	s14, ip
    75cc:	vcvt.f64.s32	d7, s14
    75d0:	vstr	d7, [r0]
    75d4:	sub	r2, r2, #1
    75d8:	b	75b4 <coda_cursor_read_double_array+0x2ac>
    75dc:	mov	r2, r5
    75e0:	mov	r1, r6
    75e4:	mov	r0, r4
    75e8:	bl	2318 <read_uint16_array>
    75ec:	cmp	r0, #0
    75f0:	beq	75fc <coda_cursor_read_double_array+0x2f4>
    75f4:	mvn	r0, #0
    75f8:	b	793c <coda_cursor_read_double_array+0x634>
    75fc:	add	r1, sp, #24
    7600:	mov	r0, r4
    7604:	bl	0 <coda_cursor_get_num_elements>
    7608:	cmp	r0, #0
    760c:	beq	7618 <coda_cursor_read_double_array+0x310>
    7610:	mvn	r0, #0
    7614:	b	793c <coda_cursor_read_double_array+0x634>
    7618:	ldr	r0, [sp, #24]
    761c:	sub	r0, r0, #1
    7620:	cmp	r0, #0
    7624:	blt	7878 <coda_cursor_read_double_array+0x570>
    7628:	add	ip, r6, r0, lsl #3
    762c:	add	r3, r6, r0, lsl #1
    7630:	ldrh	r1, [r3]
    7634:	vmov	s6, r1
    7638:	vcvt.f64.u32	d3, s6
    763c:	vstr	d3, [ip]
    7640:	sub	r0, r0, #1
    7644:	b	7620 <coda_cursor_read_double_array+0x318>
    7648:	mov	r2, r5
    764c:	mov	r1, r6
    7650:	mov	r0, r4
    7654:	bl	2480 <read_int32_array>
    7658:	cmp	r0, #0
    765c:	beq	7668 <coda_cursor_read_double_array+0x360>
    7660:	mvn	r0, #0
    7664:	b	793c <coda_cursor_read_double_array+0x634>
    7668:	add	r1, sp, #24
    766c:	mov	r0, r4
    7670:	bl	0 <coda_cursor_get_num_elements>
    7674:	cmp	r0, #0
    7678:	beq	7684 <coda_cursor_read_double_array+0x37c>
    767c:	mvn	r0, #0
    7680:	b	793c <coda_cursor_read_double_array+0x634>
    7684:	ldr	r2, [sp, #24]
    7688:	sub	r0, r2, #1
    768c:	cmp	r0, #0
    7690:	blt	7878 <coda_cursor_read_double_array+0x570>
    7694:	add	r2, r6, r0, lsl #3
    7698:	ldr	r3, [r6, r0, lsl #2]
    769c:	vmov	s6, r3
    76a0:	vcvt.f64.s32	d3, s6
    76a4:	vstr	d3, [r2]
    76a8:	sub	r0, r0, #1
    76ac:	b	768c <coda_cursor_read_double_array+0x384>
    76b0:	mov	r2, r5
    76b4:	mov	r1, r6
    76b8:	mov	r0, r4
    76bc:	bl	2608 <read_uint32_array>
    76c0:	cmp	r0, #0
    76c4:	beq	76d0 <coda_cursor_read_double_array+0x3c8>
    76c8:	mvn	r0, #0
    76cc:	b	793c <coda_cursor_read_double_array+0x634>
    76d0:	add	r1, sp, #24
    76d4:	mov	r0, r4
    76d8:	bl	0 <coda_cursor_get_num_elements>
    76dc:	cmp	r0, #0
    76e0:	beq	76ec <coda_cursor_read_double_array+0x3e4>
    76e4:	mvn	r0, #0
    76e8:	b	793c <coda_cursor_read_double_array+0x634>
    76ec:	ldr	r2, [sp, #24]
    76f0:	sub	r2, r2, #1
    76f4:	cmp	r2, #0
    76f8:	blt	7878 <coda_cursor_read_double_array+0x570>
    76fc:	add	ip, r6, r2, lsl #3
    7700:	ldr	r1, [r6, r2, lsl #2]
    7704:	vmov	s4, r1
    7708:	vcvt.f64.u32	d2, s4
    770c:	vstr	d2, [ip]
    7710:	sub	r2, r2, #1
    7714:	b	76f4 <coda_cursor_read_double_array+0x3ec>
    7718:	mov	r2, r5
    771c:	mov	r1, r6
    7720:	mov	r0, r4
    7724:	bl	2770 <read_int64_array>
    7728:	cmp	r0, #0
    772c:	beq	7738 <coda_cursor_read_double_array+0x430>
    7730:	mvn	r0, #0
    7734:	b	793c <coda_cursor_read_double_array+0x634>
    7738:	add	r1, sp, #24
    773c:	mov	r0, r4
    7740:	bl	0 <coda_cursor_get_num_elements>
    7744:	cmp	r0, #0
    7748:	beq	7754 <coda_cursor_read_double_array+0x44c>
    774c:	mvn	r0, #0
    7750:	b	793c <coda_cursor_read_double_array+0x634>
    7754:	ldr	r1, [sp, #24]
    7758:	sub	r7, r1, #1
    775c:	cmp	r7, #0
    7760:	blt	7878 <coda_cursor_read_double_array+0x570>
    7764:	add	r5, r6, r7, lsl #3
    7768:	add	r1, r6, r7, lsl #3
    776c:	ldr	r0, [r1]
    7770:	ldr	r1, [r1, #4]
    7774:	bl	0 <__compcert_i64_stod>
    7778:	vstr	d0, [r5]
    777c:	sub	r7, r7, #1
    7780:	b	775c <coda_cursor_read_double_array+0x454>
    7784:	mov	r2, r5
    7788:	mov	r1, r6
    778c:	mov	r0, r4
    7790:	bl	28d8 <read_uint64_array>
    7794:	cmp	r0, #0
    7798:	beq	77a4 <coda_cursor_read_double_array+0x49c>
    779c:	mvn	r0, #0
    77a0:	b	793c <coda_cursor_read_double_array+0x634>
    77a4:	add	r1, sp, #24
    77a8:	mov	r0, r4
    77ac:	bl	0 <coda_cursor_get_num_elements>
    77b0:	cmp	r0, #0
    77b4:	beq	77c0 <coda_cursor_read_double_array+0x4b8>
    77b8:	mvn	r0, #0
    77bc:	b	793c <coda_cursor_read_double_array+0x634>
    77c0:	ldr	r1, [sp, #24]
    77c4:	sub	r7, r1, #1
    77c8:	cmp	r7, #0
    77cc:	blt	7878 <coda_cursor_read_double_array+0x570>
    77d0:	add	r5, r6, r7, lsl #3
    77d4:	add	r1, r6, r7, lsl #3
    77d8:	ldr	r0, [r1]
    77dc:	ldr	r1, [r1, #4]
    77e0:	bl	0 <__compcert_i64_utod>
    77e4:	vstr	d0, [r5]
    77e8:	sub	r7, r7, #1
    77ec:	b	77c8 <coda_cursor_read_double_array+0x4c0>
    77f0:	mov	r2, r5
    77f4:	mov	r1, r6
    77f8:	mov	r0, r4
    77fc:	bl	2a24 <read_float_array>
    7800:	cmp	r0, #0
    7804:	beq	7810 <coda_cursor_read_double_array+0x508>
    7808:	mvn	r0, #0
    780c:	b	793c <coda_cursor_read_double_array+0x634>
    7810:	add	r1, sp, #24
    7814:	mov	r0, r4
    7818:	bl	0 <coda_cursor_get_num_elements>
    781c:	cmp	r0, #0
    7820:	beq	782c <coda_cursor_read_double_array+0x524>
    7824:	mvn	r0, #0
    7828:	b	793c <coda_cursor_read_double_array+0x634>
    782c:	ldr	r0, [sp, #24]
    7830:	sub	ip, r0, #1
    7834:	cmp	ip, #0
    7838:	blt	7878 <coda_cursor_read_double_array+0x570>
    783c:	add	r0, r6, ip, lsl #3
    7840:	add	r1, r6, ip, lsl #2
    7844:	vldr	s14, [r1]
    7848:	vcvt.f64.f32	d1, s14
    784c:	vstr	d1, [r0]
    7850:	sub	ip, ip, #1
    7854:	b	7834 <coda_cursor_read_double_array+0x52c>
    7858:	mov	r2, r5
    785c:	mov	r1, r6
    7860:	mov	r0, r4
    7864:	bl	2b9c <read_double_array>
    7868:	cmp	r0, #0
    786c:	beq	7878 <coda_cursor_read_double_array+0x570>
    7870:	mvn	r0, #0
    7874:	b	793c <coda_cursor_read_double_array+0x634>
    7878:	ldr	ip, [sp, #32]
    787c:	cmp	ip, #0
    7880:	beq	7918 <coda_cursor_read_double_array+0x610>
    7884:	add	r1, sp, #24
    7888:	mov	r0, r4
    788c:	bl	0 <coda_cursor_get_num_elements>
    7890:	cmp	r0, #0
    7894:	beq	78a0 <coda_cursor_read_double_array+0x598>
    7898:	mvn	r0, #0
    789c:	b	793c <coda_cursor_read_double_array+0x634>
    78a0:	mov	r4, #0
    78a4:	ldr	r0, [sp, #24]
    78a8:	cmp	r4, r0
    78ac:	bge	7918 <coda_cursor_read_double_array+0x610>
    78b0:	add	ip, r6, r4, lsl #3
    78b4:	vldr	d4, [ip]
    78b8:	ldr	r3, [sp, #32]
    78bc:	vldr	d1, [r3, #24]
    78c0:	vcmp.f64	d4, d1
    78c4:	vmrs	APSR_nzcv, fpscr
    78c8:	beq	7904 <coda_cursor_read_double_array+0x5fc>
    78cc:	add	r1, r6, r4, lsl #3
    78d0:	add	ip, r6, r4, lsl #3
    78d4:	vldr	d6, [ip]
    78d8:	ldr	r2, [sp, #32]
    78dc:	vldr	d4, [r2]
    78e0:	vmul.f64	d6, d6, d4
    78e4:	ldr	r2, [sp, #32]
    78e8:	vldr	d3, [r2, #8]
    78ec:	vdiv.f64	d0, d6, d3
    78f0:	ldr	r2, [sp, #32]
    78f4:	vldr	d2, [r2, #16]
    78f8:	vadd.f64	d5, d0, d2
    78fc:	vstr	d5, [r1]
    7900:	b	7910 <coda_cursor_read_double_array+0x608>
    7904:	bl	0 <coda_NaN>
    7908:	add	r0, r6, r4, lsl #3
    790c:	vstr	d0, [r0]
    7910:	add	r4, r4, #1
    7914:	b	78a4 <coda_cursor_read_double_array+0x59c>
    7918:	mov	r0, #0
    791c:	b	793c <coda_cursor_read_double_array+0x634>
    7920:	ldr	r0, [sp, #28]
    7924:	bl	0 <coda_type_get_native_type_name>
    7928:	mov	r2, r0
    792c:	mvn	r0, #104	; 0x68
    7930:	ldr	r1, [pc, #32]	; 7958 <coda_cursor_read_double_array+0x650>
    7934:	bl	0 <coda_set_error>
    7938:	mvn	r0, #0
    793c:	ldr	r4, [sp, #8]
    7940:	ldr	r5, [sp, #12]
    7944:	ldr	r6, [sp, #16]
    7948:	ldr	r7, [sp, #20]
    794c:	ldr	lr, [sp, #4]
    7950:	add	sp, sp, #40	; 0x28
    7954:	bx	lr
    7958:	.word	0x000003f8
    795c:	.word	0x000002bc
    7960:	.word	0x00000453
    7964:	.word	0x0000022b
    7968:	.word	0x0000005b

0000796c <coda_cursor_read_char_array>:
    796c:	mov	ip, sp
    7970:	sub	sp, sp, #32
    7974:	str	ip, [sp]
    7978:	str	lr, [sp, #4]
    797c:	str	r4, [sp, #8]
    7980:	str	r5, [sp, #12]
    7984:	str	r6, [sp, #16]
    7988:	mov	r4, r2
    798c:	mov	r5, r1
    7990:	mov	r6, r0
    7994:	cmp	r6, #0
    7998:	beq	79b0 <coda_cursor_read_char_array+0x44>
    799c:	ldr	ip, [r6, #4]
    79a0:	cmp	ip, #0
    79a4:	movle	r0, #1
    79a8:	movgt	r0, #0
    79ac:	b	79b4 <coda_cursor_read_char_array+0x48>
    79b0:	mov	r0, #1
    79b4:	cmp	r0, #0
    79b8:	bne	79e0 <coda_cursor_read_char_array+0x74>
    79bc:	ldr	r1, [r6, #4]
    79c0:	lsl	r1, r1, #4
    79c4:	add	r3, r6, r1
    79c8:	sub	lr, r3, #4096	; 0x1000
    79cc:	ldr	r1, [lr, #4088]	; 0xff8
    79d0:	cmp	r1, #0
    79d4:	moveq	r0, #1
    79d8:	movne	r0, #0
    79dc:	b	79e4 <coda_cursor_read_char_array+0x78>
    79e0:	mov	r0, #1
    79e4:	cmp	r0, #0
    79e8:	beq	7a08 <coda_cursor_read_char_array+0x9c>
    79ec:	mvn	r0, #99	; 0x63
    79f0:	ldr	r1, [pc, #312]	; 7b30 <coda_cursor_read_char_array+0x1c4>
    79f4:	ldr	r2, [pc, #304]	; 7b2c <coda_cursor_read_char_array+0x1c0>
    79f8:	movw	r3, #4136	; 0x1028
    79fc:	bl	0 <coda_set_error>
    7a00:	mvn	r0, #0
    7a04:	b	7b10 <coda_cursor_read_char_array+0x1a4>
    7a08:	cmp	r5, #0
    7a0c:	bne	7a2c <coda_cursor_read_char_array+0xc0>
    7a10:	mvn	r0, #99	; 0x63
    7a14:	ldr	r1, [pc, #284]	; 7b38 <coda_cursor_read_char_array+0x1cc>
    7a18:	ldr	r2, [pc, #268]	; 7b2c <coda_cursor_read_char_array+0x1c0>
    7a1c:	movw	r3, #4141	; 0x102d
    7a20:	bl	0 <coda_set_error>
    7a24:	mvn	r0, #0
    7a28:	b	7b10 <coda_cursor_read_char_array+0x1a4>
    7a2c:	ldr	r2, [r6, #4]
    7a30:	lsl	ip, r2, #4
    7a34:	add	r0, r6, ip
    7a38:	sub	lr, r0, #4096	; 0x1000
    7a3c:	ldr	r2, [lr, #4088]	; 0xff8
    7a40:	ldr	r0, [r2]
    7a44:	cmp	r0, #100	; 0x64
    7a48:	blt	7a68 <coda_cursor_read_char_array+0xfc>
    7a4c:	ldr	ip, [r6, #4]
    7a50:	lsl	r1, ip, #4
    7a54:	add	r0, r6, r1
    7a58:	sub	lr, r0, #4096	; 0x1000
    7a5c:	ldr	r3, [lr, #4088]	; 0xff8
    7a60:	ldr	r0, [r3, #4]
    7a64:	b	7a7c <coda_cursor_read_char_array+0x110>
    7a68:	ldr	r2, [r6, #4]
    7a6c:	lsl	r0, r2, #4
    7a70:	add	r2, r6, r0
    7a74:	sub	lr, r2, #4096	; 0x1000
    7a78:	ldr	r0, [lr, #4088]	; 0xff8
    7a7c:	ldr	r2, [r0, #8]
    7a80:	cmp	r2, #1
    7a84:	beq	7aa8 <coda_cursor_read_char_array+0x13c>
    7a88:	ldr	r0, [r0, #8]
    7a8c:	bl	0 <coda_type_get_class_name>
    7a90:	mov	r2, r0
    7a94:	mvn	r0, #104	; 0x68
    7a98:	ldr	r1, [pc, #136]	; 7b28 <coda_cursor_read_char_array+0x1bc>
    7a9c:	bl	0 <coda_set_error>
    7aa0:	mvn	r0, #0
    7aa4:	b	7b10 <coda_cursor_read_char_array+0x1a4>
    7aa8:	add	r1, sp, #24
    7aac:	bl	ae0 <get_array_element_read_type>
    7ab0:	cmp	r0, #0
    7ab4:	beq	7ac0 <coda_cursor_read_char_array+0x154>
    7ab8:	mvn	r0, #0
    7abc:	b	7b10 <coda_cursor_read_char_array+0x1a4>
    7ac0:	ldr	r3, [sp, #24]
    7ac4:	cmp	r3, #10
    7ac8:	bne	7af4 <coda_cursor_read_char_array+0x188>
    7acc:	mov	r2, r4
    7ad0:	mov	r1, r5
    7ad4:	mov	r0, r6
    7ad8:	bl	2da4 <read_char_array>
    7adc:	cmp	r0, #0
    7ae0:	beq	7aec <coda_cursor_read_char_array+0x180>
    7ae4:	mvn	r0, #0
    7ae8:	b	7b10 <coda_cursor_read_char_array+0x1a4>
    7aec:	mov	r0, #0
    7af0:	b	7b10 <coda_cursor_read_char_array+0x1a4>
    7af4:	ldr	r0, [sp, #24]
    7af8:	bl	0 <coda_type_get_native_type_name>
    7afc:	mov	r2, r0
    7b00:	mvn	r0, #104	; 0x68
    7b04:	ldr	r1, [pc, #40]	; 7b34 <coda_cursor_read_char_array+0x1c8>
    7b08:	bl	0 <coda_set_error>
    7b0c:	mvn	r0, #0
    7b10:	ldr	r4, [sp, #8]
    7b14:	ldr	r5, [sp, #12]
    7b18:	ldr	r6, [sp, #16]
    7b1c:	ldr	lr, [sp, #4]
    7b20:	add	sp, sp, #32
    7b24:	bx	lr
    7b28:	.word	0x000002bc
    7b2c:	.word	0x00000453
    7b30:	.word	0x0000022b
    7b34:	.word	0x00000538
    7b38:	.word	0x0000005b

00007b3c <coda_cursor_read_int8_partial_array>:
    7b3c:	mov	ip, sp
    7b40:	sub	sp, sp, #48	; 0x30
    7b44:	str	ip, [sp, #4]
    7b48:	str	lr, [sp, #8]
    7b4c:	str	r4, [sp, #16]
    7b50:	str	r5, [sp, #20]
    7b54:	str	r6, [sp, #24]
    7b58:	str	r7, [sp, #28]
    7b5c:	str	r8, [sp, #32]
    7b60:	mov	r5, r3
    7b64:	mov	r6, r2
    7b68:	mov	r7, r1
    7b6c:	mov	r8, r0
    7b70:	cmp	r8, #0
    7b74:	beq	7b8c <coda_cursor_read_int8_partial_array+0x50>
    7b78:	ldr	r1, [r8, #4]
    7b7c:	cmp	r1, #0
    7b80:	movle	ip, #1
    7b84:	movgt	ip, #0
    7b88:	b	7b90 <coda_cursor_read_int8_partial_array+0x54>
    7b8c:	mov	ip, #1
    7b90:	cmp	ip, #0
    7b94:	bne	7bbc <coda_cursor_read_int8_partial_array+0x80>
    7b98:	ldr	r2, [r8, #4]
    7b9c:	lsl	r3, r2, #4
    7ba0:	add	ip, r8, r3
    7ba4:	sub	lr, ip, #4096	; 0x1000
    7ba8:	ldr	r2, [lr, #4088]	; 0xff8
    7bac:	cmp	r2, #0
    7bb0:	moveq	r0, #1
    7bb4:	movne	r0, #0
    7bb8:	b	7bc0 <coda_cursor_read_int8_partial_array+0x84>
    7bbc:	mov	r0, #1
    7bc0:	cmp	r0, #0
    7bc4:	beq	7be4 <coda_cursor_read_int8_partial_array+0xa8>
    7bc8:	mvn	r0, #99	; 0x63
    7bcc:	ldr	r1, [pc, #512]	; 7dd4 <coda_cursor_read_int8_partial_array+0x298>
    7bd0:	ldr	r2, [pc, #504]	; 7dd0 <coda_cursor_read_int8_partial_array+0x294>
    7bd4:	movw	r3, #4199	; 0x1067
    7bd8:	bl	0 <coda_set_error>
    7bdc:	mvn	r0, #0
    7be0:	b	7da0 <coda_cursor_read_int8_partial_array+0x264>
    7be4:	cmp	r5, #0
    7be8:	bne	7c08 <coda_cursor_read_int8_partial_array+0xcc>
    7bec:	mvn	r0, #99	; 0x63
    7bf0:	ldr	r1, [pc, #484]	; 7ddc <coda_cursor_read_int8_partial_array+0x2a0>
    7bf4:	ldr	r2, [pc, #468]	; 7dd0 <coda_cursor_read_int8_partial_array+0x294>
    7bf8:	movw	r3, #4204	; 0x106c
    7bfc:	bl	0 <coda_set_error>
    7c00:	mvn	r0, #0
    7c04:	b	7da0 <coda_cursor_read_int8_partial_array+0x264>
    7c08:	ldr	r3, [r8, #4]
    7c0c:	lsl	r0, r3, #4
    7c10:	add	r3, r8, r0
    7c14:	sub	lr, r3, #4096	; 0x1000
    7c18:	ldr	r3, [lr, #4088]	; 0xff8
    7c1c:	ldr	r0, [r3]
    7c20:	cmp	r0, #100	; 0x64
    7c24:	blt	7c44 <coda_cursor_read_int8_partial_array+0x108>
    7c28:	ldr	ip, [r8, #4]
    7c2c:	lsl	r0, ip, #4
    7c30:	add	r2, r8, r0
    7c34:	sub	lr, r2, #4096	; 0x1000
    7c38:	ldr	r2, [lr, #4088]	; 0xff8
    7c3c:	ldr	r4, [r2, #4]
    7c40:	b	7c58 <coda_cursor_read_int8_partial_array+0x11c>
    7c44:	ldr	r0, [r8, #4]
    7c48:	lsl	r2, r0, #4
    7c4c:	add	ip, r8, r2
    7c50:	sub	lr, ip, #4096	; 0x1000
    7c54:	ldr	r4, [lr, #4088]	; 0xff8
    7c58:	ldr	r1, [r4, #8]
    7c5c:	cmp	r1, #1
    7c60:	beq	7c8c <coda_cursor_read_int8_partial_array+0x150>
    7c64:	ldr	r0, [r4, #8]
    7c68:	bl	0 <coda_type_get_class_name>
    7c6c:	mvn	r2, #104	; 0x68
    7c70:	ldr	r1, [pc, #332]	; 7dc4 <coda_cursor_read_int8_partial_array+0x288>
    7c74:	mov	r3, r0
    7c78:	mov	r0, r2
    7c7c:	mov	r2, r3
    7c80:	bl	0 <coda_set_error>
    7c84:	mvn	r0, #0
    7c88:	b	7da0 <coda_cursor_read_int8_partial_array+0x264>
    7c8c:	ldr	r0, [pc, #324]	; 7dd8 <coda_cursor_read_int8_partial_array+0x29c>
    7c90:	ldr	r2, [r0]
    7c94:	cmp	r2, #0
    7c98:	beq	7d30 <coda_cursor_read_int8_partial_array+0x1f4>
    7c9c:	add	r1, sp, #44	; 0x2c
    7ca0:	mov	r0, r8
    7ca4:	bl	0 <coda_cursor_get_num_elements>
    7ca8:	cmp	r0, #0
    7cac:	beq	7cb8 <coda_cursor_read_int8_partial_array+0x17c>
    7cb0:	mvn	r0, #0
    7cb4:	b	7da0 <coda_cursor_read_int8_partial_array+0x264>
    7cb8:	cmp	r7, #0
    7cbc:	blt	7cd4 <coda_cursor_read_int8_partial_array+0x198>
    7cc0:	ldr	ip, [sp, #44]	; 0x2c
    7cc4:	cmp	r7, ip
    7cc8:	movge	r1, #1
    7ccc:	movlt	r1, #0
    7cd0:	b	7cd8 <coda_cursor_read_int8_partial_array+0x19c>
    7cd4:	mov	r1, #1
    7cd8:	cmp	r1, #0
    7cdc:	beq	7cfc <coda_cursor_read_int8_partial_array+0x1c0>
    7ce0:	mvn	r0, #106	; 0x6a
    7ce4:	ldr	r1, [pc, #212]	; 7dc0 <coda_cursor_read_int8_partial_array+0x284>
    7ce8:	ldr	r3, [sp, #44]	; 0x2c
    7cec:	mov	r2, r7
    7cf0:	bl	0 <coda_set_error>
    7cf4:	mvn	r0, #0
    7cf8:	b	7da0 <coda_cursor_read_int8_partial_array+0x264>
    7cfc:	add	r1, r7, r6
    7d00:	ldr	r2, [sp, #44]	; 0x2c
    7d04:	cmp	r1, r2
    7d08:	ble	7d30 <coda_cursor_read_int8_partial_array+0x1f4>
    7d0c:	mvn	r0, #106	; 0x6a
    7d10:	ldr	r1, [pc, #176]	; 7dc8 <coda_cursor_read_int8_partial_array+0x28c>
    7d14:	ldr	r3, [sp, #44]	; 0x2c
    7d18:	str	r3, [sp]
    7d1c:	mov	r3, r6
    7d20:	mov	r2, r7
    7d24:	bl	0 <coda_set_error>
    7d28:	mvn	r0, #0
    7d2c:	b	7da0 <coda_cursor_read_int8_partial_array+0x264>
    7d30:	add	r1, sp, #40	; 0x28
    7d34:	mov	r0, r4
    7d38:	bl	ae0 <get_array_element_read_type>
    7d3c:	cmp	r0, #0
    7d40:	beq	7d4c <coda_cursor_read_int8_partial_array+0x210>
    7d44:	mvn	r0, #0
    7d48:	b	7da0 <coda_cursor_read_int8_partial_array+0x264>
    7d4c:	ldr	r1, [sp, #40]	; 0x28
    7d50:	cmp	r1, #0
    7d54:	bne	7d84 <coda_cursor_read_int8_partial_array+0x248>
    7d58:	mov	r3, r5
    7d5c:	mov	r2, r6
    7d60:	mov	r1, r7
    7d64:	mov	r0, r8
    7d68:	bl	2f18 <read_int8_partial_array>
    7d6c:	cmp	r0, #0
    7d70:	beq	7d7c <coda_cursor_read_int8_partial_array+0x240>
    7d74:	mvn	r0, #0
    7d78:	b	7da0 <coda_cursor_read_int8_partial_array+0x264>
    7d7c:	mov	r0, #0
    7d80:	b	7da0 <coda_cursor_read_int8_partial_array+0x264>
    7d84:	ldr	r0, [sp, #40]	; 0x28
    7d88:	bl	0 <coda_type_get_native_type_name>
    7d8c:	mov	r2, r0
    7d90:	mvn	r0, #104	; 0x68
    7d94:	ldr	r1, [pc, #48]	; 7dcc <coda_cursor_read_int8_partial_array+0x290>
    7d98:	bl	0 <coda_set_error>
    7d9c:	mvn	r0, #0
    7da0:	ldr	r4, [sp, #16]
    7da4:	ldr	r5, [sp, #20]
    7da8:	ldr	r6, [sp, #24]
    7dac:	ldr	r7, [sp, #28]
    7db0:	ldr	r8, [sp, #32]
    7db4:	ldr	lr, [sp, #8]
    7db8:	add	sp, sp, #48	; 0x30
    7dbc:	bx	lr
    7dc0:	.word	0x0000037f
    7dc4:	.word	0x000002bc
    7dc8:	.word	0x00000160
    7dcc:	.word	0x000003cc
    7dd0:	.word	0x00000453
    7dd4:	.word	0x0000022b
    7dd8:	.word	0x00000000
    7ddc:	.word	0x0000005b

00007de0 <coda_cursor_read_uint8_partial_array>:
    7de0:	mov	ip, sp
    7de4:	sub	sp, sp, #48	; 0x30
    7de8:	str	ip, [sp, #4]
    7dec:	str	lr, [sp, #8]
    7df0:	str	r4, [sp, #16]
    7df4:	str	r5, [sp, #20]
    7df8:	str	r6, [sp, #24]
    7dfc:	str	r7, [sp, #28]
    7e00:	str	r8, [sp, #32]
    7e04:	mov	r5, r3
    7e08:	mov	r6, r2
    7e0c:	mov	r7, r1
    7e10:	mov	r8, r0
    7e14:	cmp	r8, #0
    7e18:	beq	7e30 <coda_cursor_read_uint8_partial_array+0x50>
    7e1c:	ldr	r1, [r8, #4]
    7e20:	cmp	r1, #0
    7e24:	movle	ip, #1
    7e28:	movgt	ip, #0
    7e2c:	b	7e34 <coda_cursor_read_uint8_partial_array+0x54>
    7e30:	mov	ip, #1
    7e34:	cmp	ip, #0
    7e38:	bne	7e60 <coda_cursor_read_uint8_partial_array+0x80>
    7e3c:	ldr	r2, [r8, #4]
    7e40:	lsl	r3, r2, #4
    7e44:	add	ip, r8, r3
    7e48:	sub	lr, ip, #4096	; 0x1000
    7e4c:	ldr	r2, [lr, #4088]	; 0xff8
    7e50:	cmp	r2, #0
    7e54:	moveq	r0, #1
    7e58:	movne	r0, #0
    7e5c:	b	7e64 <coda_cursor_read_uint8_partial_array+0x84>
    7e60:	mov	r0, #1
    7e64:	cmp	r0, #0
    7e68:	beq	7e88 <coda_cursor_read_uint8_partial_array+0xa8>
    7e6c:	mvn	r0, #99	; 0x63
    7e70:	ldr	r1, [pc, #512]	; 8078 <coda_cursor_read_uint8_partial_array+0x298>
    7e74:	ldr	r2, [pc, #504]	; 8074 <coda_cursor_read_uint8_partial_array+0x294>
    7e78:	movw	r3, #4285	; 0x10bd
    7e7c:	bl	0 <coda_set_error>
    7e80:	mvn	r0, #0
    7e84:	b	8044 <coda_cursor_read_uint8_partial_array+0x264>
    7e88:	cmp	r5, #0
    7e8c:	bne	7eac <coda_cursor_read_uint8_partial_array+0xcc>
    7e90:	mvn	r0, #99	; 0x63
    7e94:	ldr	r1, [pc, #484]	; 8080 <coda_cursor_read_uint8_partial_array+0x2a0>
    7e98:	ldr	r2, [pc, #468]	; 8074 <coda_cursor_read_uint8_partial_array+0x294>
    7e9c:	movw	r3, #4290	; 0x10c2
    7ea0:	bl	0 <coda_set_error>
    7ea4:	mvn	r0, #0
    7ea8:	b	8044 <coda_cursor_read_uint8_partial_array+0x264>
    7eac:	ldr	r3, [r8, #4]
    7eb0:	lsl	r0, r3, #4
    7eb4:	add	r3, r8, r0
    7eb8:	sub	lr, r3, #4096	; 0x1000
    7ebc:	ldr	r3, [lr, #4088]	; 0xff8
    7ec0:	ldr	r0, [r3]
    7ec4:	cmp	r0, #100	; 0x64
    7ec8:	blt	7ee8 <coda_cursor_read_uint8_partial_array+0x108>
    7ecc:	ldr	ip, [r8, #4]
    7ed0:	lsl	r0, ip, #4
    7ed4:	add	r2, r8, r0
    7ed8:	sub	lr, r2, #4096	; 0x1000
    7edc:	ldr	r2, [lr, #4088]	; 0xff8
    7ee0:	ldr	r4, [r2, #4]
    7ee4:	b	7efc <coda_cursor_read_uint8_partial_array+0x11c>
    7ee8:	ldr	r0, [r8, #4]
    7eec:	lsl	r2, r0, #4
    7ef0:	add	ip, r8, r2
    7ef4:	sub	lr, ip, #4096	; 0x1000
    7ef8:	ldr	r4, [lr, #4088]	; 0xff8
    7efc:	ldr	r1, [r4, #8]
    7f00:	cmp	r1, #1
    7f04:	beq	7f30 <coda_cursor_read_uint8_partial_array+0x150>
    7f08:	ldr	r0, [r4, #8]
    7f0c:	bl	0 <coda_type_get_class_name>
    7f10:	mvn	r2, #104	; 0x68
    7f14:	ldr	r1, [pc, #336]	; 806c <coda_cursor_read_uint8_partial_array+0x28c>
    7f18:	mov	r3, r0
    7f1c:	mov	r0, r2
    7f20:	mov	r2, r3
    7f24:	bl	0 <coda_set_error>
    7f28:	mvn	r0, #0
    7f2c:	b	8044 <coda_cursor_read_uint8_partial_array+0x264>
    7f30:	ldr	r0, [pc, #324]	; 807c <coda_cursor_read_uint8_partial_array+0x29c>
    7f34:	ldr	r2, [r0]
    7f38:	cmp	r2, #0
    7f3c:	beq	7fd4 <coda_cursor_read_uint8_partial_array+0x1f4>
    7f40:	add	r1, sp, #44	; 0x2c
    7f44:	mov	r0, r8
    7f48:	bl	0 <coda_cursor_get_num_elements>
    7f4c:	cmp	r0, #0
    7f50:	beq	7f5c <coda_cursor_read_uint8_partial_array+0x17c>
    7f54:	mvn	r0, #0
    7f58:	b	8044 <coda_cursor_read_uint8_partial_array+0x264>
    7f5c:	cmp	r7, #0
    7f60:	blt	7f78 <coda_cursor_read_uint8_partial_array+0x198>
    7f64:	ldr	ip, [sp, #44]	; 0x2c
    7f68:	cmp	r7, ip
    7f6c:	movge	r1, #1
    7f70:	movlt	r1, #0
    7f74:	b	7f7c <coda_cursor_read_uint8_partial_array+0x19c>
    7f78:	mov	r1, #1
    7f7c:	cmp	r1, #0
    7f80:	beq	7fa0 <coda_cursor_read_uint8_partial_array+0x1c0>
    7f84:	mvn	r0, #106	; 0x6a
    7f88:	ldr	r1, [pc, #212]	; 8064 <coda_cursor_read_uint8_partial_array+0x284>
    7f8c:	ldr	r3, [sp, #44]	; 0x2c
    7f90:	mov	r2, r7
    7f94:	bl	0 <coda_set_error>
    7f98:	mvn	r0, #0
    7f9c:	b	8044 <coda_cursor_read_uint8_partial_array+0x264>
    7fa0:	add	r1, r7, r6
    7fa4:	ldr	r2, [sp, #44]	; 0x2c
    7fa8:	cmp	r1, r2
    7fac:	ble	7fd4 <coda_cursor_read_uint8_partial_array+0x1f4>
    7fb0:	mvn	r0, #106	; 0x6a
    7fb4:	ldr	r1, [pc, #180]	; 8070 <coda_cursor_read_uint8_partial_array+0x290>
    7fb8:	ldr	r3, [sp, #44]	; 0x2c
    7fbc:	str	r3, [sp]
    7fc0:	mov	r3, r6
    7fc4:	mov	r2, r7
    7fc8:	bl	0 <coda_set_error>
    7fcc:	mvn	r0, #0
    7fd0:	b	8044 <coda_cursor_read_uint8_partial_array+0x264>
    7fd4:	add	r1, sp, #40	; 0x28
    7fd8:	mov	r0, r4
    7fdc:	bl	ae0 <get_array_element_read_type>
    7fe0:	cmp	r0, #0
    7fe4:	beq	7ff0 <coda_cursor_read_uint8_partial_array+0x210>
    7fe8:	mvn	r0, #0
    7fec:	b	8044 <coda_cursor_read_uint8_partial_array+0x264>
    7ff0:	ldr	r1, [sp, #40]	; 0x28
    7ff4:	cmp	r1, #1
    7ff8:	bne	8028 <coda_cursor_read_uint8_partial_array+0x248>
    7ffc:	mov	r3, r5
    8000:	mov	r2, r6
    8004:	mov	r1, r7
    8008:	mov	r0, r8
    800c:	bl	3024 <read_uint8_partial_array>
    8010:	cmp	r0, #0
    8014:	beq	8020 <coda_cursor_read_uint8_partial_array+0x240>
    8018:	mvn	r0, #0
    801c:	b	8044 <coda_cursor_read_uint8_partial_array+0x264>
    8020:	mov	r0, #0
    8024:	b	8044 <coda_cursor_read_uint8_partial_array+0x264>
    8028:	ldr	r0, [sp, #40]	; 0x28
    802c:	bl	0 <coda_type_get_native_type_name>
    8030:	mov	r2, r0
    8034:	mvn	r0, #104	; 0x68
    8038:	ldr	r1, [pc, #40]	; 8068 <coda_cursor_read_uint8_partial_array+0x288>
    803c:	bl	0 <coda_set_error>
    8040:	mvn	r0, #0
    8044:	ldr	r4, [sp, #16]
    8048:	ldr	r5, [sp, #20]
    804c:	ldr	r6, [sp, #24]
    8050:	ldr	r7, [sp, #28]
    8054:	ldr	r8, [sp, #32]
    8058:	ldr	lr, [sp, #8]
    805c:	add	sp, sp, #48	; 0x30
    8060:	bx	lr
    8064:	.word	0x0000037f
    8068:	.word	0x00000078
    806c:	.word	0x000002bc
    8070:	.word	0x00000160
    8074:	.word	0x00000453
    8078:	.word	0x0000022b
    807c:	.word	0x00000000
    8080:	.word	0x0000005b

00008084 <coda_cursor_read_int16_partial_array>:
    8084:	mov	ip, sp
    8088:	sub	sp, sp, #48	; 0x30
    808c:	str	ip, [sp, #4]
    8090:	str	lr, [sp, #8]
    8094:	str	r4, [sp, #16]
    8098:	str	r5, [sp, #20]
    809c:	str	r6, [sp, #24]
    80a0:	str	r7, [sp, #28]
    80a4:	str	r8, [sp, #32]
    80a8:	mov	r4, r3
    80ac:	mov	r5, r2
    80b0:	mov	r6, r1
    80b4:	mov	r7, r0
    80b8:	cmp	r7, #0
    80bc:	beq	80d4 <coda_cursor_read_int16_partial_array+0x50>
    80c0:	ldr	r0, [r7, #4]
    80c4:	cmp	r0, #0
    80c8:	movle	ip, #1
    80cc:	movgt	ip, #0
    80d0:	b	80d8 <coda_cursor_read_int16_partial_array+0x54>
    80d4:	mov	ip, #1
    80d8:	cmp	ip, #0
    80dc:	bne	8104 <coda_cursor_read_int16_partial_array+0x80>
    80e0:	ldr	r0, [r7, #4]
    80e4:	lsl	r3, r0, #4
    80e8:	add	r2, r7, r3
    80ec:	sub	lr, r2, #4096	; 0x1000
    80f0:	ldr	r1, [lr, #4088]	; 0xff8
    80f4:	cmp	r1, #0
    80f8:	moveq	r1, #1
    80fc:	movne	r1, #0
    8100:	b	8108 <coda_cursor_read_int16_partial_array+0x84>
    8104:	mov	r1, #1
    8108:	cmp	r1, #0
    810c:	beq	812c <coda_cursor_read_int16_partial_array+0xa8>
    8110:	mvn	r0, #99	; 0x63
    8114:	ldr	r1, [pc, #684]	; 83c8 <coda_cursor_read_int16_partial_array+0x344>
    8118:	ldr	r2, [pc, #676]	; 83c4 <coda_cursor_read_int16_partial_array+0x340>
    811c:	movw	r3, #4374	; 0x1116
    8120:	bl	0 <coda_set_error>
    8124:	mvn	r0, #0
    8128:	b	8398 <coda_cursor_read_int16_partial_array+0x314>
    812c:	cmp	r4, #0
    8130:	bne	8150 <coda_cursor_read_int16_partial_array+0xcc>
    8134:	mvn	r0, #99	; 0x63
    8138:	ldr	r1, [pc, #656]	; 83d0 <coda_cursor_read_int16_partial_array+0x34c>
    813c:	ldr	r2, [pc, #640]	; 83c4 <coda_cursor_read_int16_partial_array+0x340>
    8140:	movw	r3, #4379	; 0x111b
    8144:	bl	0 <coda_set_error>
    8148:	mvn	r0, #0
    814c:	b	8398 <coda_cursor_read_int16_partial_array+0x314>
    8150:	ldr	ip, [r7, #4]
    8154:	lsl	ip, ip, #4
    8158:	add	r0, r7, ip
    815c:	sub	lr, r0, #4096	; 0x1000
    8160:	ldr	r3, [lr, #4088]	; 0xff8
    8164:	ldr	ip, [r3]
    8168:	cmp	ip, #100	; 0x64
    816c:	blt	818c <coda_cursor_read_int16_partial_array+0x108>
    8170:	ldr	r2, [r7, #4]
    8174:	lsl	r1, r2, #4
    8178:	add	ip, r7, r1
    817c:	sub	lr, ip, #4096	; 0x1000
    8180:	ldr	r2, [lr, #4088]	; 0xff8
    8184:	ldr	r8, [r2, #4]
    8188:	b	81a0 <coda_cursor_read_int16_partial_array+0x11c>
    818c:	ldr	ip, [r7, #4]
    8190:	lsl	r1, ip, #4
    8194:	add	r2, r7, r1
    8198:	sub	lr, r2, #4096	; 0x1000
    819c:	ldr	r8, [lr, #4088]	; 0xff8
    81a0:	ldr	r3, [r8, #8]
    81a4:	cmp	r3, #1
    81a8:	beq	81d4 <coda_cursor_read_int16_partial_array+0x150>
    81ac:	ldr	r0, [r8, #8]
    81b0:	bl	0 <coda_type_get_class_name>
    81b4:	mvn	r2, #104	; 0x68
    81b8:	ldr	r1, [pc, #508]	; 83bc <coda_cursor_read_int16_partial_array+0x338>
    81bc:	mov	r3, r0
    81c0:	mov	r0, r2
    81c4:	mov	r2, r3
    81c8:	bl	0 <coda_set_error>
    81cc:	mvn	r0, #0
    81d0:	b	8398 <coda_cursor_read_int16_partial_array+0x314>
    81d4:	ldr	r2, [pc, #496]	; 83cc <coda_cursor_read_int16_partial_array+0x348>
    81d8:	ldr	ip, [r2]
    81dc:	cmp	ip, #0
    81e0:	beq	8278 <coda_cursor_read_int16_partial_array+0x1f4>
    81e4:	add	r1, sp, #44	; 0x2c
    81e8:	mov	r0, r7
    81ec:	bl	0 <coda_cursor_get_num_elements>
    81f0:	cmp	r0, #0
    81f4:	beq	8200 <coda_cursor_read_int16_partial_array+0x17c>
    81f8:	mvn	r0, #0
    81fc:	b	8398 <coda_cursor_read_int16_partial_array+0x314>
    8200:	cmp	r6, #0
    8204:	blt	821c <coda_cursor_read_int16_partial_array+0x198>
    8208:	ldr	r0, [sp, #44]	; 0x2c
    820c:	cmp	r6, r0
    8210:	movge	r0, #1
    8214:	movlt	r0, #0
    8218:	b	8220 <coda_cursor_read_int16_partial_array+0x19c>
    821c:	mov	r0, #1
    8220:	cmp	r0, #0
    8224:	beq	8244 <coda_cursor_read_int16_partial_array+0x1c0>
    8228:	mvn	r0, #106	; 0x6a
    822c:	ldr	r1, [pc, #388]	; 83b8 <coda_cursor_read_int16_partial_array+0x334>
    8230:	ldr	r3, [sp, #44]	; 0x2c
    8234:	mov	r2, r6
    8238:	bl	0 <coda_set_error>
    823c:	mvn	r0, #0
    8240:	b	8398 <coda_cursor_read_int16_partial_array+0x314>
    8244:	add	r0, r6, r5
    8248:	ldr	r3, [sp, #44]	; 0x2c
    824c:	cmp	r0, r3
    8250:	ble	8278 <coda_cursor_read_int16_partial_array+0x1f4>
    8254:	mvn	r0, #106	; 0x6a
    8258:	ldr	r1, [pc, #352]	; 83c0 <coda_cursor_read_int16_partial_array+0x33c>
    825c:	ldr	r2, [sp, #44]	; 0x2c
    8260:	str	r2, [sp]
    8264:	mov	r3, r5
    8268:	mov	r2, r6
    826c:	bl	0 <coda_set_error>
    8270:	mvn	r0, #0
    8274:	b	8398 <coda_cursor_read_int16_partial_array+0x314>
    8278:	add	r1, sp, #40	; 0x28
    827c:	mov	r0, r8
    8280:	bl	ae0 <get_array_element_read_type>
    8284:	cmp	r0, #0
    8288:	beq	8294 <coda_cursor_read_int16_partial_array+0x210>
    828c:	mvn	r0, #0
    8290:	b	8398 <coda_cursor_read_int16_partial_array+0x314>
    8294:	ldr	r1, [sp, #40]	; 0x28
    8298:	cmp	r1, #0
    829c:	beq	8348 <coda_cursor_read_int16_partial_array+0x2c4>
    82a0:	cmp	r1, #1
    82a4:	beq	82fc <coda_cursor_read_int16_partial_array+0x278>
    82a8:	cmp	r1, #2
    82ac:	bne	82d4 <coda_cursor_read_int16_partial_array+0x250>
    82b0:	mov	r3, r4
    82b4:	mov	r2, r5
    82b8:	mov	r1, r6
    82bc:	mov	r0, r7
    82c0:	bl	311c <read_int16_partial_array>
    82c4:	cmp	r0, #0
    82c8:	beq	8394 <coda_cursor_read_int16_partial_array+0x310>
    82cc:	mvn	r0, #0
    82d0:	b	8398 <coda_cursor_read_int16_partial_array+0x314>
    82d4:	ldr	r0, [sp, #40]	; 0x28
    82d8:	bl	0 <coda_type_get_native_type_name>
    82dc:	mvn	r2, #104	; 0x68
    82e0:	ldr	r1, [pc, #236]	; 83d4 <coda_cursor_read_int16_partial_array+0x350>
    82e4:	mov	r3, r0
    82e8:	mov	r0, r2
    82ec:	mov	r2, r3
    82f0:	bl	0 <coda_set_error>
    82f4:	mvn	r0, #0
    82f8:	b	8398 <coda_cursor_read_int16_partial_array+0x314>
    82fc:	mov	r3, r4
    8300:	mov	r2, r5
    8304:	mov	r1, r6
    8308:	mov	r0, r7
    830c:	bl	3024 <read_uint8_partial_array>
    8310:	cmp	r0, #0
    8314:	beq	8320 <coda_cursor_read_int16_partial_array+0x29c>
    8318:	mvn	r0, #0
    831c:	b	8398 <coda_cursor_read_int16_partial_array+0x314>
    8320:	sub	r0, r5, #1
    8324:	cmp	r0, #0
    8328:	blt	8394 <coda_cursor_read_int16_partial_array+0x310>
    832c:	add	r2, r4, r0, lsl #1
    8330:	ldrb	r1, [r4, r0]
    8334:	sbfx	ip, r1, #0, #16
    8338:	sbfx	r1, ip, #0, #16
    833c:	strh	r1, [r2]
    8340:	sub	r0, r0, #1
    8344:	b	8324 <coda_cursor_read_int16_partial_array+0x2a0>
    8348:	mov	r3, r4
    834c:	mov	r2, r5
    8350:	mov	r1, r6
    8354:	mov	r0, r7
    8358:	bl	2f18 <read_int8_partial_array>
    835c:	cmp	r0, #0
    8360:	beq	836c <coda_cursor_read_int16_partial_array+0x2e8>
    8364:	mvn	r0, #0
    8368:	b	8398 <coda_cursor_read_int16_partial_array+0x314>
    836c:	sub	r0, r5, #1
    8370:	cmp	r0, #0
    8374:	blt	8394 <coda_cursor_read_int16_partial_array+0x310>
    8378:	add	ip, r4, r0, lsl #1
    837c:	ldrsb	r1, [r4, r0]
    8380:	sbfx	r1, r1, #0, #16
    8384:	sbfx	r3, r1, #0, #16
    8388:	strh	r3, [ip]
    838c:	sub	r0, r0, #1
    8390:	b	8370 <coda_cursor_read_int16_partial_array+0x2ec>
    8394:	mov	r0, #0
    8398:	ldr	r4, [sp, #16]
    839c:	ldr	r5, [sp, #20]
    83a0:	ldr	r6, [sp, #24]
    83a4:	ldr	r7, [sp, #28]
    83a8:	ldr	r8, [sp, #32]
    83ac:	ldr	lr, [sp, #8]
    83b0:	add	sp, sp, #48	; 0x30
    83b4:	bx	lr
    83b8:	.word	0x0000037f
    83bc:	.word	0x000002bc
    83c0:	.word	0x00000160
    83c4:	.word	0x00000453
    83c8:	.word	0x0000022b
    83cc:	.word	0x00000000
    83d0:	.word	0x0000005b
    83d4:	.word	0x00000133

000083d8 <coda_cursor_read_uint16_partial_array>:
    83d8:	mov	ip, sp
    83dc:	sub	sp, sp, #48	; 0x30
    83e0:	str	ip, [sp, #4]
    83e4:	str	lr, [sp, #8]
    83e8:	str	r4, [sp, #16]
    83ec:	str	r5, [sp, #20]
    83f0:	str	r6, [sp, #24]
    83f4:	str	r7, [sp, #28]
    83f8:	str	r8, [sp, #32]
    83fc:	mov	r7, r3
    8400:	mov	r5, r2
    8404:	mov	r6, r1
    8408:	mov	r8, r0
    840c:	cmp	r8, #0
    8410:	beq	8428 <coda_cursor_read_uint16_partial_array+0x50>
    8414:	ldr	r2, [r8, #4]
    8418:	cmp	r2, #0
    841c:	movle	r1, #1
    8420:	movgt	r1, #0
    8424:	b	842c <coda_cursor_read_uint16_partial_array+0x54>
    8428:	mov	r1, #1
    842c:	cmp	r1, #0
    8430:	bne	8458 <coda_cursor_read_uint16_partial_array+0x80>
    8434:	ldr	r2, [r8, #4]
    8438:	lsl	r2, r2, #4
    843c:	add	ip, r8, r2
    8440:	sub	lr, ip, #4096	; 0x1000
    8444:	ldr	ip, [lr, #4088]	; 0xff8
    8448:	cmp	ip, #0
    844c:	moveq	r1, #1
    8450:	movne	r1, #0
    8454:	b	845c <coda_cursor_read_uint16_partial_array+0x84>
    8458:	mov	r1, #1
    845c:	cmp	r1, #0
    8460:	beq	8480 <coda_cursor_read_uint16_partial_array+0xa8>
    8464:	mvn	r0, #99	; 0x63
    8468:	ldr	r1, [pc, #596]	; 86c4 <coda_cursor_read_uint16_partial_array+0x2ec>
    846c:	ldr	r2, [pc, #588]	; 86c0 <coda_cursor_read_uint16_partial_array+0x2e8>
    8470:	movw	r3, #4483	; 0x1183
    8474:	bl	0 <coda_set_error>
    8478:	mvn	r0, #0
    847c:	b	8690 <coda_cursor_read_uint16_partial_array+0x2b8>
    8480:	cmp	r7, #0
    8484:	bne	84a4 <coda_cursor_read_uint16_partial_array+0xcc>
    8488:	mvn	r0, #99	; 0x63
    848c:	ldr	r1, [pc, #568]	; 86cc <coda_cursor_read_uint16_partial_array+0x2f4>
    8490:	ldr	r2, [pc, #552]	; 86c0 <coda_cursor_read_uint16_partial_array+0x2e8>
    8494:	movw	r3, #4488	; 0x1188
    8498:	bl	0 <coda_set_error>
    849c:	mvn	r0, #0
    84a0:	b	8690 <coda_cursor_read_uint16_partial_array+0x2b8>
    84a4:	ldr	r2, [r8, #4]
    84a8:	lsl	r3, r2, #4
    84ac:	add	r0, r8, r3
    84b0:	sub	lr, r0, #4096	; 0x1000
    84b4:	ldr	ip, [lr, #4088]	; 0xff8
    84b8:	ldr	r3, [ip]
    84bc:	cmp	r3, #100	; 0x64
    84c0:	blt	84e0 <coda_cursor_read_uint16_partial_array+0x108>
    84c4:	ldr	r1, [r8, #4]
    84c8:	lsl	ip, r1, #4
    84cc:	add	r3, r8, ip
    84d0:	sub	lr, r3, #4096	; 0x1000
    84d4:	ldr	ip, [lr, #4088]	; 0xff8
    84d8:	ldr	r4, [ip, #4]
    84dc:	b	84f4 <coda_cursor_read_uint16_partial_array+0x11c>
    84e0:	ldr	r0, [r8, #4]
    84e4:	lsl	r1, r0, #4
    84e8:	add	r2, r8, r1
    84ec:	sub	lr, r2, #4096	; 0x1000
    84f0:	ldr	r4, [lr, #4088]	; 0xff8
    84f4:	ldr	r0, [r4, #8]
    84f8:	cmp	r0, #1
    84fc:	beq	8520 <coda_cursor_read_uint16_partial_array+0x148>
    8500:	ldr	r0, [r4, #8]
    8504:	bl	0 <coda_type_get_class_name>
    8508:	mov	r2, r0
    850c:	mvn	r0, #104	; 0x68
    8510:	ldr	r1, [pc, #412]	; 86b4 <coda_cursor_read_uint16_partial_array+0x2dc>
    8514:	bl	0 <coda_set_error>
    8518:	mvn	r0, #0
    851c:	b	8690 <coda_cursor_read_uint16_partial_array+0x2b8>
    8520:	ldr	r1, [pc, #416]	; 86c8 <coda_cursor_read_uint16_partial_array+0x2f0>
    8524:	ldr	r0, [r1]
    8528:	cmp	r0, #0
    852c:	beq	85c4 <coda_cursor_read_uint16_partial_array+0x1ec>
    8530:	add	r1, sp, #44	; 0x2c
    8534:	mov	r0, r8
    8538:	bl	0 <coda_cursor_get_num_elements>
    853c:	cmp	r0, #0
    8540:	beq	854c <coda_cursor_read_uint16_partial_array+0x174>
    8544:	mvn	r0, #0
    8548:	b	8690 <coda_cursor_read_uint16_partial_array+0x2b8>
    854c:	cmp	r6, #0
    8550:	blt	8568 <coda_cursor_read_uint16_partial_array+0x190>
    8554:	ldr	r3, [sp, #44]	; 0x2c
    8558:	cmp	r6, r3
    855c:	movge	r1, #1
    8560:	movlt	r1, #0
    8564:	b	856c <coda_cursor_read_uint16_partial_array+0x194>
    8568:	mov	r1, #1
    856c:	cmp	r1, #0
    8570:	beq	8590 <coda_cursor_read_uint16_partial_array+0x1b8>
    8574:	mvn	r0, #106	; 0x6a
    8578:	ldr	r1, [pc, #304]	; 86b0 <coda_cursor_read_uint16_partial_array+0x2d8>
    857c:	ldr	r3, [sp, #44]	; 0x2c
    8580:	mov	r2, r6
    8584:	bl	0 <coda_set_error>
    8588:	mvn	r0, #0
    858c:	b	8690 <coda_cursor_read_uint16_partial_array+0x2b8>
    8590:	add	r2, r6, r5
    8594:	ldr	ip, [sp, #44]	; 0x2c
    8598:	cmp	r2, ip
    859c:	ble	85c4 <coda_cursor_read_uint16_partial_array+0x1ec>
    85a0:	mvn	r0, #106	; 0x6a
    85a4:	ldr	r1, [pc, #268]	; 86b8 <coda_cursor_read_uint16_partial_array+0x2e0>
    85a8:	ldr	r3, [sp, #44]	; 0x2c
    85ac:	str	r3, [sp]
    85b0:	mov	r3, r5
    85b4:	mov	r2, r6
    85b8:	bl	0 <coda_set_error>
    85bc:	mvn	r0, #0
    85c0:	b	8690 <coda_cursor_read_uint16_partial_array+0x2b8>
    85c4:	add	r1, sp, #40	; 0x28
    85c8:	mov	r0, r4
    85cc:	bl	ae0 <get_array_element_read_type>
    85d0:	cmp	r0, #0
    85d4:	beq	85e0 <coda_cursor_read_uint16_partial_array+0x208>
    85d8:	mvn	r0, #0
    85dc:	b	8690 <coda_cursor_read_uint16_partial_array+0x2b8>
    85e0:	ldr	r2, [sp, #40]	; 0x28
    85e4:	cmp	r2, #1
    85e8:	beq	8640 <coda_cursor_read_uint16_partial_array+0x268>
    85ec:	cmp	r2, #3
    85f0:	bne	8618 <coda_cursor_read_uint16_partial_array+0x240>
    85f4:	mov	r3, r7
    85f8:	mov	r2, r5
    85fc:	mov	r1, r6
    8600:	mov	r0, r8
    8604:	bl	3228 <read_uint16_partial_array>
    8608:	cmp	r0, #0
    860c:	beq	868c <coda_cursor_read_uint16_partial_array+0x2b4>
    8610:	mvn	r0, #0
    8614:	b	8690 <coda_cursor_read_uint16_partial_array+0x2b8>
    8618:	ldr	r0, [sp, #40]	; 0x28
    861c:	bl	0 <coda_type_get_native_type_name>
    8620:	mvn	r2, #104	; 0x68
    8624:	ldr	r1, [pc, #144]	; 86bc <coda_cursor_read_uint16_partial_array+0x2e4>
    8628:	mov	r3, r0
    862c:	mov	r0, r2
    8630:	mov	r2, r3
    8634:	bl	0 <coda_set_error>
    8638:	mvn	r0, #0
    863c:	b	8690 <coda_cursor_read_uint16_partial_array+0x2b8>
    8640:	mov	r3, r7
    8644:	mov	r2, r5
    8648:	mov	r1, r6
    864c:	mov	r0, r8
    8650:	bl	3024 <read_uint8_partial_array>
    8654:	cmp	r0, #0
    8658:	beq	8664 <coda_cursor_read_uint16_partial_array+0x28c>
    865c:	mvn	r0, #0
    8660:	b	8690 <coda_cursor_read_uint16_partial_array+0x2b8>
    8664:	sub	r0, r5, #1
    8668:	cmp	r0, #0
    866c:	blt	868c <coda_cursor_read_uint16_partial_array+0x2b4>
    8670:	add	r1, r7, r0, lsl #1
    8674:	ldrb	r3, [r7, r0]
    8678:	bic	ip, r3, #16711680	; 0xff0000
    867c:	bic	ip, ip, #-16777216	; 0xff000000
    8680:	strh	ip, [r1]
    8684:	sub	r0, r0, #1
    8688:	b	8668 <coda_cursor_read_uint16_partial_array+0x290>
    868c:	mov	r0, #0
    8690:	ldr	r4, [sp, #16]
    8694:	ldr	r5, [sp, #20]
    8698:	ldr	r6, [sp, #24]
    869c:	ldr	r7, [sp, #28]
    86a0:	ldr	r8, [sp, #32]
    86a4:	ldr	lr, [sp, #8]
    86a8:	add	sp, sp, #48	; 0x30
    86ac:	bx	lr
    86b0:	.word	0x0000037f
    86b4:	.word	0x000002bc
    86b8:	.word	0x00000160
    86bc:	.word	0x000004b5
    86c0:	.word	0x00000453
    86c4:	.word	0x0000022b
    86c8:	.word	0x00000000
    86cc:	.word	0x0000005b

000086d0 <coda_cursor_read_int32_partial_array>:
    86d0:	mov	ip, sp
    86d4:	sub	sp, sp, #48	; 0x30
    86d8:	str	ip, [sp, #4]
    86dc:	str	lr, [sp, #8]
    86e0:	str	r4, [sp, #16]
    86e4:	str	r5, [sp, #20]
    86e8:	str	r6, [sp, #24]
    86ec:	str	r7, [sp, #28]
    86f0:	str	r8, [sp, #32]
    86f4:	mov	r4, r3
    86f8:	mov	r5, r2
    86fc:	mov	r6, r1
    8700:	mov	r7, r0
    8704:	cmp	r7, #0
    8708:	beq	8720 <coda_cursor_read_int32_partial_array+0x50>
    870c:	ldr	r0, [r7, #4]
    8710:	cmp	r0, #0
    8714:	movle	r1, #1
    8718:	movgt	r1, #0
    871c:	b	8724 <coda_cursor_read_int32_partial_array+0x54>
    8720:	mov	r1, #1
    8724:	cmp	r1, #0
    8728:	bne	8750 <coda_cursor_read_int32_partial_array+0x80>
    872c:	ldr	r2, [r7, #4]
    8730:	lsl	r0, r2, #4
    8734:	add	r1, r7, r0
    8738:	sub	lr, r1, #4096	; 0x1000
    873c:	ldr	r0, [lr, #4088]	; 0xff8
    8740:	cmp	r0, #0
    8744:	moveq	ip, #1
    8748:	movne	ip, #0
    874c:	b	8754 <coda_cursor_read_int32_partial_array+0x84>
    8750:	mov	ip, #1
    8754:	cmp	ip, #0
    8758:	beq	8778 <coda_cursor_read_int32_partial_array+0xa8>
    875c:	mvn	r0, #99	; 0x63
    8760:	ldr	r1, [pc, #816]	; 8a98 <coda_cursor_read_int32_partial_array+0x3c8>
    8764:	ldr	r2, [pc, #808]	; 8a94 <coda_cursor_read_int32_partial_array+0x3c4>
    8768:	movw	r3, #4584	; 0x11e8
    876c:	bl	0 <coda_set_error>
    8770:	mvn	r0, #0
    8774:	b	8a64 <coda_cursor_read_int32_partial_array+0x394>
    8778:	cmp	r4, #0
    877c:	bne	879c <coda_cursor_read_int32_partial_array+0xcc>
    8780:	mvn	r0, #99	; 0x63
    8784:	ldr	r1, [pc, #788]	; 8aa0 <coda_cursor_read_int32_partial_array+0x3d0>
    8788:	ldr	r2, [pc, #772]	; 8a94 <coda_cursor_read_int32_partial_array+0x3c4>
    878c:	movw	r3, #4589	; 0x11ed
    8790:	bl	0 <coda_set_error>
    8794:	mvn	r0, #0
    8798:	b	8a64 <coda_cursor_read_int32_partial_array+0x394>
    879c:	ldr	r3, [r7, #4]
    87a0:	lsl	r2, r3, #4
    87a4:	add	r3, r7, r2
    87a8:	sub	lr, r3, #4096	; 0x1000
    87ac:	ldr	ip, [lr, #4088]	; 0xff8
    87b0:	ldr	r2, [ip]
    87b4:	cmp	r2, #100	; 0x64
    87b8:	blt	87d8 <coda_cursor_read_int32_partial_array+0x108>
    87bc:	ldr	ip, [r7, #4]
    87c0:	lsl	r3, ip, #4
    87c4:	add	r1, r7, r3
    87c8:	sub	lr, r1, #4096	; 0x1000
    87cc:	ldr	r2, [lr, #4088]	; 0xff8
    87d0:	ldr	r8, [r2, #4]
    87d4:	b	87ec <coda_cursor_read_int32_partial_array+0x11c>
    87d8:	ldr	r3, [r7, #4]
    87dc:	lsl	ip, r3, #4
    87e0:	add	r3, r7, ip
    87e4:	sub	lr, r3, #4096	; 0x1000
    87e8:	ldr	r8, [lr, #4088]	; 0xff8
    87ec:	ldr	ip, [r8, #8]
    87f0:	cmp	ip, #1
    87f4:	beq	8820 <coda_cursor_read_int32_partial_array+0x150>
    87f8:	ldr	r0, [r8, #8]
    87fc:	bl	0 <coda_type_get_class_name>
    8800:	mvn	r2, #104	; 0x68
    8804:	ldr	r1, [pc, #640]	; 8a8c <coda_cursor_read_int32_partial_array+0x3bc>
    8808:	mov	r3, r0
    880c:	mov	r0, r2
    8810:	mov	r2, r3
    8814:	bl	0 <coda_set_error>
    8818:	mvn	r0, #0
    881c:	b	8a64 <coda_cursor_read_int32_partial_array+0x394>
    8820:	ldr	r1, [pc, #628]	; 8a9c <coda_cursor_read_int32_partial_array+0x3cc>
    8824:	ldr	ip, [r1]
    8828:	cmp	ip, #0
    882c:	beq	88c4 <coda_cursor_read_int32_partial_array+0x1f4>
    8830:	add	r1, sp, #44	; 0x2c
    8834:	mov	r0, r7
    8838:	bl	0 <coda_cursor_get_num_elements>
    883c:	cmp	r0, #0
    8840:	beq	884c <coda_cursor_read_int32_partial_array+0x17c>
    8844:	mvn	r0, #0
    8848:	b	8a64 <coda_cursor_read_int32_partial_array+0x394>
    884c:	cmp	r6, #0
    8850:	blt	8868 <coda_cursor_read_int32_partial_array+0x198>
    8854:	ldr	ip, [sp, #44]	; 0x2c
    8858:	cmp	r6, ip
    885c:	movge	r1, #1
    8860:	movlt	r1, #0
    8864:	b	886c <coda_cursor_read_int32_partial_array+0x19c>
    8868:	mov	r1, #1
    886c:	cmp	r1, #0
    8870:	beq	8890 <coda_cursor_read_int32_partial_array+0x1c0>
    8874:	mvn	r0, #106	; 0x6a
    8878:	ldr	r1, [pc, #516]	; 8a84 <coda_cursor_read_int32_partial_array+0x3b4>
    887c:	ldr	r3, [sp, #44]	; 0x2c
    8880:	mov	r2, r6
    8884:	bl	0 <coda_set_error>
    8888:	mvn	r0, #0
    888c:	b	8a64 <coda_cursor_read_int32_partial_array+0x394>
    8890:	add	ip, r6, r5
    8894:	ldr	r1, [sp, #44]	; 0x2c
    8898:	cmp	ip, r1
    889c:	ble	88c4 <coda_cursor_read_int32_partial_array+0x1f4>
    88a0:	mvn	r0, #106	; 0x6a
    88a4:	ldr	r1, [pc, #484]	; 8a90 <coda_cursor_read_int32_partial_array+0x3c0>
    88a8:	ldr	r2, [sp, #44]	; 0x2c
    88ac:	str	r2, [sp]
    88b0:	mov	r3, r5
    88b4:	mov	r2, r6
    88b8:	bl	0 <coda_set_error>
    88bc:	mvn	r0, #0
    88c0:	b	8a64 <coda_cursor_read_int32_partial_array+0x394>
    88c4:	add	r1, sp, #40	; 0x28
    88c8:	mov	r0, r8
    88cc:	bl	ae0 <get_array_element_read_type>
    88d0:	cmp	r0, #0
    88d4:	beq	88e0 <coda_cursor_read_int32_partial_array+0x210>
    88d8:	mvn	r0, #0
    88dc:	b	8a64 <coda_cursor_read_int32_partial_array+0x394>
    88e0:	ldr	r1, [sp, #40]	; 0x28
    88e4:	cmp	r1, #2
    88e8:	bcs	8974 <coda_cursor_read_int32_partial_array+0x2a4>
    88ec:	cmp	r1, #0
    88f0:	bne	8934 <coda_cursor_read_int32_partial_array+0x264>
    88f4:	mov	r3, r4
    88f8:	mov	r2, r5
    88fc:	mov	r1, r6
    8900:	mov	r0, r7
    8904:	bl	2f18 <read_int8_partial_array>
    8908:	cmp	r0, #0
    890c:	beq	8918 <coda_cursor_read_int32_partial_array+0x248>
    8910:	mvn	r0, #0
    8914:	b	8a64 <coda_cursor_read_int32_partial_array+0x394>
    8918:	sub	r3, r5, #1
    891c:	cmp	r3, #0
    8920:	blt	8a60 <coda_cursor_read_int32_partial_array+0x390>
    8924:	ldrsb	r2, [r4, r3]
    8928:	str	r2, [r4, r3, lsl #2]
    892c:	sub	r3, r3, #1
    8930:	b	891c <coda_cursor_read_int32_partial_array+0x24c>
    8934:	mov	r3, r4
    8938:	mov	r2, r5
    893c:	mov	r1, r6
    8940:	mov	r0, r7
    8944:	bl	3024 <read_uint8_partial_array>
    8948:	cmp	r0, #0
    894c:	beq	8958 <coda_cursor_read_int32_partial_array+0x288>
    8950:	mvn	r0, #0
    8954:	b	8a64 <coda_cursor_read_int32_partial_array+0x394>
    8958:	sub	ip, r5, #1
    895c:	cmp	ip, #0
    8960:	blt	8a60 <coda_cursor_read_int32_partial_array+0x390>
    8964:	ldrb	r0, [r4, ip]
    8968:	str	r0, [r4, ip, lsl #2]
    896c:	sub	ip, ip, #1
    8970:	b	895c <coda_cursor_read_int32_partial_array+0x28c>
    8974:	cmp	r1, #2
    8978:	beq	8a1c <coda_cursor_read_int32_partial_array+0x34c>
    897c:	cmp	r1, #3
    8980:	beq	89d8 <coda_cursor_read_int32_partial_array+0x308>
    8984:	cmp	r1, #4
    8988:	bne	89b0 <coda_cursor_read_int32_partial_array+0x2e0>
    898c:	mov	r3, r4
    8990:	mov	r2, r5
    8994:	mov	r1, r6
    8998:	mov	r0, r7
    899c:	bl	3320 <read_int32_partial_array>
    89a0:	cmp	r0, #0
    89a4:	beq	8a60 <coda_cursor_read_int32_partial_array+0x390>
    89a8:	mvn	r0, #0
    89ac:	b	8a64 <coda_cursor_read_int32_partial_array+0x394>
    89b0:	ldr	r0, [sp, #40]	; 0x28
    89b4:	bl	0 <coda_type_get_native_type_name>
    89b8:	mvn	r2, #104	; 0x68
    89bc:	ldr	r1, [pc, #196]	; 8a88 <coda_cursor_read_int32_partial_array+0x3b8>
    89c0:	mov	r3, r0
    89c4:	mov	r0, r2
    89c8:	mov	r2, r3
    89cc:	bl	0 <coda_set_error>
    89d0:	mvn	r0, #0
    89d4:	b	8a64 <coda_cursor_read_int32_partial_array+0x394>
    89d8:	mov	r3, r4
    89dc:	mov	r2, r5
    89e0:	mov	r1, r6
    89e4:	mov	r0, r7
    89e8:	bl	3228 <read_uint16_partial_array>
    89ec:	cmp	r0, #0
    89f0:	beq	89fc <coda_cursor_read_int32_partial_array+0x32c>
    89f4:	mvn	r0, #0
    89f8:	b	8a64 <coda_cursor_read_int32_partial_array+0x394>
    89fc:	sub	ip, r5, #1
    8a00:	cmp	ip, #0
    8a04:	blt	8a60 <coda_cursor_read_int32_partial_array+0x390>
    8a08:	add	r1, r4, ip, lsl #1
    8a0c:	ldrh	r3, [r1]
    8a10:	str	r3, [r4, ip, lsl #2]
    8a14:	sub	ip, ip, #1
    8a18:	b	8a00 <coda_cursor_read_int32_partial_array+0x330>
    8a1c:	mov	r3, r4
    8a20:	mov	r2, r5
    8a24:	mov	r1, r6
    8a28:	mov	r0, r7
    8a2c:	bl	311c <read_int16_partial_array>
    8a30:	cmp	r0, #0
    8a34:	beq	8a40 <coda_cursor_read_int32_partial_array+0x370>
    8a38:	mvn	r0, #0
    8a3c:	b	8a64 <coda_cursor_read_int32_partial_array+0x394>
    8a40:	sub	r2, r5, #1
    8a44:	cmp	r2, #0
    8a48:	blt	8a60 <coda_cursor_read_int32_partial_array+0x390>
    8a4c:	add	r3, r4, r2, lsl #1
    8a50:	ldrsh	r3, [r3]
    8a54:	str	r3, [r4, r2, lsl #2]
    8a58:	sub	r2, r2, #1
    8a5c:	b	8a44 <coda_cursor_read_int32_partial_array+0x374>
    8a60:	mov	r0, #0
    8a64:	ldr	r4, [sp, #16]
    8a68:	ldr	r5, [sp, #20]
    8a6c:	ldr	r6, [sp, #24]
    8a70:	ldr	r7, [sp, #28]
    8a74:	ldr	r8, [sp, #32]
    8a78:	ldr	lr, [sp, #8]
    8a7c:	add	sp, sp, #48	; 0x30
    8a80:	bx	lr
    8a84:	.word	0x0000037f
    8a88:	.word	0x000001d0
    8a8c:	.word	0x000002bc
    8a90:	.word	0x00000160
    8a94:	.word	0x00000453
    8a98:	.word	0x0000022b
    8a9c:	.word	0x00000000
    8aa0:	.word	0x0000005b

00008aa4 <coda_cursor_read_uint32_partial_array>:
    8aa4:	mov	ip, sp
    8aa8:	sub	sp, sp, #48	; 0x30
    8aac:	str	ip, [sp, #4]
    8ab0:	str	lr, [sp, #8]
    8ab4:	str	r4, [sp, #16]
    8ab8:	str	r5, [sp, #20]
    8abc:	str	r6, [sp, #24]
    8ac0:	str	r7, [sp, #28]
    8ac4:	str	r8, [sp, #32]
    8ac8:	mov	r4, r3
    8acc:	mov	r5, r2
    8ad0:	mov	r6, r1
    8ad4:	mov	r7, r0
    8ad8:	cmp	r7, #0
    8adc:	beq	8af4 <coda_cursor_read_uint32_partial_array+0x50>
    8ae0:	ldr	r0, [r7, #4]
    8ae4:	cmp	r0, #0
    8ae8:	movle	r0, #1
    8aec:	movgt	r0, #0
    8af0:	b	8af8 <coda_cursor_read_uint32_partial_array+0x54>
    8af4:	mov	r0, #1
    8af8:	cmp	r0, #0
    8afc:	bne	8b24 <coda_cursor_read_uint32_partial_array+0x80>
    8b00:	ldr	r3, [r7, #4]
    8b04:	lsl	r3, r3, #4
    8b08:	add	ip, r7, r3
    8b0c:	sub	lr, ip, #4096	; 0x1000
    8b10:	ldr	r1, [lr, #4088]	; 0xff8
    8b14:	cmp	r1, #0
    8b18:	moveq	ip, #1
    8b1c:	movne	ip, #0
    8b20:	b	8b28 <coda_cursor_read_uint32_partial_array+0x84>
    8b24:	mov	ip, #1
    8b28:	cmp	ip, #0
    8b2c:	beq	8b4c <coda_cursor_read_uint32_partial_array+0xa8>
    8b30:	mvn	r0, #99	; 0x63
    8b34:	ldr	r1, [pc, #648]	; 8dc4 <coda_cursor_read_uint32_partial_array+0x320>
    8b38:	ldr	r2, [pc, #640]	; 8dc0 <coda_cursor_read_uint32_partial_array+0x31c>
    8b3c:	movw	r3, #4714	; 0x126a
    8b40:	bl	0 <coda_set_error>
    8b44:	mvn	r0, #0
    8b48:	b	8d94 <coda_cursor_read_uint32_partial_array+0x2f0>
    8b4c:	cmp	r4, #0
    8b50:	bne	8b70 <coda_cursor_read_uint32_partial_array+0xcc>
    8b54:	mvn	r0, #99	; 0x63
    8b58:	ldr	r1, [pc, #624]	; 8dd0 <coda_cursor_read_uint32_partial_array+0x32c>
    8b5c:	ldr	r2, [pc, #604]	; 8dc0 <coda_cursor_read_uint32_partial_array+0x31c>
    8b60:	movw	r3, #4719	; 0x126f
    8b64:	bl	0 <coda_set_error>
    8b68:	mvn	r0, #0
    8b6c:	b	8d94 <coda_cursor_read_uint32_partial_array+0x2f0>
    8b70:	ldr	r0, [r7, #4]
    8b74:	lsl	r0, r0, #4
    8b78:	add	r0, r7, r0
    8b7c:	sub	lr, r0, #4096	; 0x1000
    8b80:	ldr	r1, [lr, #4088]	; 0xff8
    8b84:	ldr	ip, [r1]
    8b88:	cmp	ip, #100	; 0x64
    8b8c:	blt	8bac <coda_cursor_read_uint32_partial_array+0x108>
    8b90:	ldr	ip, [r7, #4]
    8b94:	lsl	r1, ip, #4
    8b98:	add	r1, r7, r1
    8b9c:	sub	lr, r1, #4096	; 0x1000
    8ba0:	ldr	r0, [lr, #4088]	; 0xff8
    8ba4:	ldr	r8, [r0, #4]
    8ba8:	b	8bc0 <coda_cursor_read_uint32_partial_array+0x11c>
    8bac:	ldr	r0, [r7, #4]
    8bb0:	lsl	r3, r0, #4
    8bb4:	add	r3, r7, r3
    8bb8:	sub	lr, r3, #4096	; 0x1000
    8bbc:	ldr	r8, [lr, #4088]	; 0xff8
    8bc0:	ldr	r2, [r8, #8]
    8bc4:	cmp	r2, #1
    8bc8:	beq	8bec <coda_cursor_read_uint32_partial_array+0x148>
    8bcc:	ldr	r0, [r8, #8]
    8bd0:	bl	0 <coda_type_get_class_name>
    8bd4:	mov	r2, r0
    8bd8:	mvn	r0, #104	; 0x68
    8bdc:	ldr	r1, [pc, #468]	; 8db8 <coda_cursor_read_uint32_partial_array+0x314>
    8be0:	bl	0 <coda_set_error>
    8be4:	mvn	r0, #0
    8be8:	b	8d94 <coda_cursor_read_uint32_partial_array+0x2f0>
    8bec:	ldr	ip, [pc, #472]	; 8dcc <coda_cursor_read_uint32_partial_array+0x328>
    8bf0:	ldr	r2, [ip]
    8bf4:	cmp	r2, #0
    8bf8:	beq	8c90 <coda_cursor_read_uint32_partial_array+0x1ec>
    8bfc:	add	r1, sp, #44	; 0x2c
    8c00:	mov	r0, r7
    8c04:	bl	0 <coda_cursor_get_num_elements>
    8c08:	cmp	r0, #0
    8c0c:	beq	8c18 <coda_cursor_read_uint32_partial_array+0x174>
    8c10:	mvn	r0, #0
    8c14:	b	8d94 <coda_cursor_read_uint32_partial_array+0x2f0>
    8c18:	cmp	r6, #0
    8c1c:	blt	8c34 <coda_cursor_read_uint32_partial_array+0x190>
    8c20:	ldr	r0, [sp, #44]	; 0x2c
    8c24:	cmp	r6, r0
    8c28:	movge	r3, #1
    8c2c:	movlt	r3, #0
    8c30:	b	8c38 <coda_cursor_read_uint32_partial_array+0x194>
    8c34:	mov	r3, #1
    8c38:	cmp	r3, #0
    8c3c:	beq	8c5c <coda_cursor_read_uint32_partial_array+0x1b8>
    8c40:	mvn	r0, #106	; 0x6a
    8c44:	ldr	r1, [pc, #360]	; 8db4 <coda_cursor_read_uint32_partial_array+0x310>
    8c48:	ldr	r3, [sp, #44]	; 0x2c
    8c4c:	mov	r2, r6
    8c50:	bl	0 <coda_set_error>
    8c54:	mvn	r0, #0
    8c58:	b	8d94 <coda_cursor_read_uint32_partial_array+0x2f0>
    8c5c:	add	r2, r6, r5
    8c60:	ldr	r3, [sp, #44]	; 0x2c
    8c64:	cmp	r2, r3
    8c68:	ble	8c90 <coda_cursor_read_uint32_partial_array+0x1ec>
    8c6c:	mvn	r0, #106	; 0x6a
    8c70:	ldr	r1, [pc, #324]	; 8dbc <coda_cursor_read_uint32_partial_array+0x318>
    8c74:	ldr	r2, [sp, #44]	; 0x2c
    8c78:	str	r2, [sp]
    8c7c:	mov	r3, r5
    8c80:	mov	r2, r6
    8c84:	bl	0 <coda_set_error>
    8c88:	mvn	r0, #0
    8c8c:	b	8d94 <coda_cursor_read_uint32_partial_array+0x2f0>
    8c90:	add	r1, sp, #40	; 0x28
    8c94:	mov	r0, r8
    8c98:	bl	ae0 <get_array_element_read_type>
    8c9c:	cmp	r0, #0
    8ca0:	beq	8cac <coda_cursor_read_uint32_partial_array+0x208>
    8ca4:	mvn	r0, #0
    8ca8:	b	8d94 <coda_cursor_read_uint32_partial_array+0x2f0>
    8cac:	ldr	r2, [sp, #40]	; 0x28
    8cb0:	cmp	r2, #1
    8cb4:	beq	8d50 <coda_cursor_read_uint32_partial_array+0x2ac>
    8cb8:	cmp	r2, #3
    8cbc:	beq	8d0c <coda_cursor_read_uint32_partial_array+0x268>
    8cc0:	cmp	r2, #5
    8cc4:	bne	8cec <coda_cursor_read_uint32_partial_array+0x248>
    8cc8:	mov	r3, r4
    8ccc:	mov	r2, r5
    8cd0:	mov	r1, r6
    8cd4:	mov	r0, r7
    8cd8:	bl	342c <read_uint32_partial_array>
    8cdc:	cmp	r0, #0
    8ce0:	beq	8d90 <coda_cursor_read_uint32_partial_array+0x2ec>
    8ce4:	mvn	r0, #0
    8ce8:	b	8d94 <coda_cursor_read_uint32_partial_array+0x2f0>
    8cec:	ldr	r0, [sp, #40]	; 0x28
    8cf0:	bl	0 <coda_type_get_native_type_name>
    8cf4:	mov	r2, r0
    8cf8:	mvn	r0, #104	; 0x68
    8cfc:	ldr	r1, [pc, #196]	; 8dc8 <coda_cursor_read_uint32_partial_array+0x324>
    8d00:	bl	0 <coda_set_error>
    8d04:	mvn	r0, #0
    8d08:	b	8d94 <coda_cursor_read_uint32_partial_array+0x2f0>
    8d0c:	mov	r3, r4
    8d10:	mov	r2, r5
    8d14:	mov	r1, r6
    8d18:	mov	r0, r7
    8d1c:	bl	3228 <read_uint16_partial_array>
    8d20:	cmp	r0, #0
    8d24:	beq	8d30 <coda_cursor_read_uint32_partial_array+0x28c>
    8d28:	mvn	r0, #0
    8d2c:	b	8d94 <coda_cursor_read_uint32_partial_array+0x2f0>
    8d30:	sub	r3, r5, #1
    8d34:	cmp	r3, #0
    8d38:	blt	8d90 <coda_cursor_read_uint32_partial_array+0x2ec>
    8d3c:	add	r2, r4, r3, lsl #1
    8d40:	ldrh	r1, [r2]
    8d44:	str	r1, [r4, r3, lsl #2]
    8d48:	sub	r3, r3, #1
    8d4c:	b	8d34 <coda_cursor_read_uint32_partial_array+0x290>
    8d50:	mov	r3, r4
    8d54:	mov	r2, r5
    8d58:	mov	r1, r6
    8d5c:	mov	r0, r7
    8d60:	bl	3024 <read_uint8_partial_array>
    8d64:	cmp	r0, #0
    8d68:	beq	8d74 <coda_cursor_read_uint32_partial_array+0x2d0>
    8d6c:	mvn	r0, #0
    8d70:	b	8d94 <coda_cursor_read_uint32_partial_array+0x2f0>
    8d74:	sub	r3, r5, #1
    8d78:	cmp	r3, #0
    8d7c:	blt	8d90 <coda_cursor_read_uint32_partial_array+0x2ec>
    8d80:	ldrb	ip, [r4, r3]
    8d84:	str	ip, [r4, r3, lsl #2]
    8d88:	sub	r3, r3, #1
    8d8c:	b	8d78 <coda_cursor_read_uint32_partial_array+0x2d4>
    8d90:	mov	r0, #0
    8d94:	ldr	r4, [sp, #16]
    8d98:	ldr	r5, [sp, #20]
    8d9c:	ldr	r6, [sp, #24]
    8da0:	ldr	r7, [sp, #28]
    8da4:	ldr	r8, [sp, #32]
    8da8:	ldr	lr, [sp, #8]
    8dac:	add	sp, sp, #48	; 0x30
    8db0:	bx	lr
    8db4:	.word	0x0000037f
    8db8:	.word	0x000002bc
    8dbc:	.word	0x00000160
    8dc0:	.word	0x00000453
    8dc4:	.word	0x0000022b
    8dc8:	.word	0x000001fd
    8dcc:	.word	0x00000000
    8dd0:	.word	0x0000005b

00008dd4 <coda_cursor_read_int64_partial_array>:
    8dd4:	mov	ip, sp
    8dd8:	sub	sp, sp, #48	; 0x30
    8ddc:	str	ip, [sp, #4]
    8de0:	str	lr, [sp, #8]
    8de4:	str	r4, [sp, #16]
    8de8:	str	r5, [sp, #20]
    8dec:	str	r6, [sp, #24]
    8df0:	str	r7, [sp, #28]
    8df4:	str	r8, [sp, #32]
    8df8:	mov	r4, r3
    8dfc:	mov	r5, r2
    8e00:	mov	r6, r1
    8e04:	mov	r7, r0
    8e08:	cmp	r7, #0
    8e0c:	beq	8e24 <coda_cursor_read_int64_partial_array+0x50>
    8e10:	ldr	r0, [r7, #4]
    8e14:	cmp	r0, #0
    8e18:	movle	ip, #1
    8e1c:	movgt	ip, #0
    8e20:	b	8e28 <coda_cursor_read_int64_partial_array+0x54>
    8e24:	mov	ip, #1
    8e28:	cmp	ip, #0
    8e2c:	bne	8e54 <coda_cursor_read_int64_partial_array+0x80>
    8e30:	ldr	r1, [r7, #4]
    8e34:	lsl	r3, r1, #4
    8e38:	add	r3, r7, r3
    8e3c:	sub	lr, r3, #4096	; 0x1000
    8e40:	ldr	r3, [lr, #4088]	; 0xff8
    8e44:	cmp	r3, #0
    8e48:	moveq	ip, #1
    8e4c:	movne	ip, #0
    8e50:	b	8e58 <coda_cursor_read_int64_partial_array+0x84>
    8e54:	mov	ip, #1
    8e58:	cmp	ip, #0
    8e5c:	beq	8e7c <coda_cursor_read_int64_partial_array+0xa8>
    8e60:	mvn	r0, #99	; 0x63
    8e64:	ldr	r1, [pc, #1012]	; 9260 <coda_cursor_read_int64_partial_array+0x48c>
    8e68:	ldr	r2, [pc, #1004]	; 925c <coda_cursor_read_int64_partial_array+0x488>
    8e6c:	movw	r3, #4827	; 0x12db
    8e70:	bl	0 <coda_set_error>
    8e74:	mvn	r0, #0
    8e78:	b	922c <coda_cursor_read_int64_partial_array+0x458>
    8e7c:	cmp	r4, #0
    8e80:	bne	8ea0 <coda_cursor_read_int64_partial_array+0xcc>
    8e84:	mvn	r0, #99	; 0x63
    8e88:	ldr	r1, [pc, #984]	; 9268 <coda_cursor_read_int64_partial_array+0x494>
    8e8c:	ldr	r2, [pc, #968]	; 925c <coda_cursor_read_int64_partial_array+0x488>
    8e90:	movw	r3, #4832	; 0x12e0
    8e94:	bl	0 <coda_set_error>
    8e98:	mvn	r0, #0
    8e9c:	b	922c <coda_cursor_read_int64_partial_array+0x458>
    8ea0:	ldr	r1, [r7, #4]
    8ea4:	lsl	r2, r1, #4
    8ea8:	add	ip, r7, r2
    8eac:	sub	lr, ip, #4096	; 0x1000
    8eb0:	ldr	r1, [lr, #4088]	; 0xff8
    8eb4:	ldr	r0, [r1]
    8eb8:	cmp	r0, #100	; 0x64
    8ebc:	blt	8edc <coda_cursor_read_int64_partial_array+0x108>
    8ec0:	ldr	r0, [r7, #4]
    8ec4:	lsl	r0, r0, #4
    8ec8:	add	ip, r7, r0
    8ecc:	sub	lr, ip, #4096	; 0x1000
    8ed0:	ldr	ip, [lr, #4088]	; 0xff8
    8ed4:	ldr	r8, [ip, #4]
    8ed8:	b	8ef0 <coda_cursor_read_int64_partial_array+0x11c>
    8edc:	ldr	r2, [r7, #4]
    8ee0:	lsl	r0, r2, #4
    8ee4:	add	r1, r7, r0
    8ee8:	sub	lr, r1, #4096	; 0x1000
    8eec:	ldr	r8, [lr, #4088]	; 0xff8
    8ef0:	ldr	r1, [r8, #8]
    8ef4:	cmp	r1, #1
    8ef8:	beq	8f24 <coda_cursor_read_int64_partial_array+0x150>
    8efc:	ldr	r0, [r8, #8]
    8f00:	bl	0 <coda_type_get_class_name>
    8f04:	mvn	r2, #104	; 0x68
    8f08:	ldr	r1, [pc, #836]	; 9254 <coda_cursor_read_int64_partial_array+0x480>
    8f0c:	mov	r3, r0
    8f10:	mov	r0, r2
    8f14:	mov	r2, r3
    8f18:	bl	0 <coda_set_error>
    8f1c:	mvn	r0, #0
    8f20:	b	922c <coda_cursor_read_int64_partial_array+0x458>
    8f24:	ldr	r0, [pc, #824]	; 9264 <coda_cursor_read_int64_partial_array+0x490>
    8f28:	ldr	r3, [r0]
    8f2c:	cmp	r3, #0
    8f30:	beq	8fc8 <coda_cursor_read_int64_partial_array+0x1f4>
    8f34:	add	r1, sp, #44	; 0x2c
    8f38:	mov	r0, r7
    8f3c:	bl	0 <coda_cursor_get_num_elements>
    8f40:	cmp	r0, #0
    8f44:	beq	8f50 <coda_cursor_read_int64_partial_array+0x17c>
    8f48:	mvn	r0, #0
    8f4c:	b	922c <coda_cursor_read_int64_partial_array+0x458>
    8f50:	cmp	r6, #0
    8f54:	blt	8f6c <coda_cursor_read_int64_partial_array+0x198>
    8f58:	ldr	r2, [sp, #44]	; 0x2c
    8f5c:	cmp	r6, r2
    8f60:	movge	r0, #1
    8f64:	movlt	r0, #0
    8f68:	b	8f70 <coda_cursor_read_int64_partial_array+0x19c>
    8f6c:	mov	r0, #1
    8f70:	cmp	r0, #0
    8f74:	beq	8f94 <coda_cursor_read_int64_partial_array+0x1c0>
    8f78:	mvn	r0, #106	; 0x6a
    8f7c:	ldr	r1, [pc, #712]	; 924c <coda_cursor_read_int64_partial_array+0x478>
    8f80:	ldr	r3, [sp, #44]	; 0x2c
    8f84:	mov	r2, r6
    8f88:	bl	0 <coda_set_error>
    8f8c:	mvn	r0, #0
    8f90:	b	922c <coda_cursor_read_int64_partial_array+0x458>
    8f94:	add	ip, r6, r5
    8f98:	ldr	r1, [sp, #44]	; 0x2c
    8f9c:	cmp	ip, r1
    8fa0:	ble	8fc8 <coda_cursor_read_int64_partial_array+0x1f4>
    8fa4:	mvn	r0, #106	; 0x6a
    8fa8:	ldr	r1, [pc, #680]	; 9258 <coda_cursor_read_int64_partial_array+0x484>
    8fac:	ldr	r2, [sp, #44]	; 0x2c
    8fb0:	str	r2, [sp]
    8fb4:	mov	r3, r5
    8fb8:	mov	r2, r6
    8fbc:	bl	0 <coda_set_error>
    8fc0:	mvn	r0, #0
    8fc4:	b	922c <coda_cursor_read_int64_partial_array+0x458>
    8fc8:	add	r1, sp, #40	; 0x28
    8fcc:	mov	r0, r8
    8fd0:	bl	ae0 <get_array_element_read_type>
    8fd4:	cmp	r0, #0
    8fd8:	beq	8fe4 <coda_cursor_read_int64_partial_array+0x210>
    8fdc:	mvn	r0, #0
    8fe0:	b	922c <coda_cursor_read_int64_partial_array+0x458>
    8fe4:	ldr	ip, [sp, #40]	; 0x28
    8fe8:	cmp	ip, #7
    8fec:	bcs	9210 <coda_cursor_read_int64_partial_array+0x43c>
    8ff0:	add	pc, pc, ip, lsl #2
    8ff4:	nop	{0}
    8ff8:	b	9014 <coda_cursor_read_int64_partial_array+0x240>
    8ffc:	b	9060 <coda_cursor_read_int64_partial_array+0x28c>
    9000:	b	90ac <coda_cursor_read_int64_partial_array+0x2d8>
    9004:	b	90fc <coda_cursor_read_int64_partial_array+0x328>
    9008:	b	914c <coda_cursor_read_int64_partial_array+0x378>
    900c:	b	9198 <coda_cursor_read_int64_partial_array+0x3c4>
    9010:	b	91e4 <coda_cursor_read_int64_partial_array+0x410>
    9014:	mov	r3, r4
    9018:	mov	r2, r5
    901c:	mov	r1, r6
    9020:	mov	r0, r7
    9024:	bl	2f18 <read_int8_partial_array>
    9028:	cmp	r0, #0
    902c:	beq	9038 <coda_cursor_read_int64_partial_array+0x264>
    9030:	mvn	r0, #0
    9034:	b	922c <coda_cursor_read_int64_partial_array+0x458>
    9038:	sub	ip, r5, #1
    903c:	cmp	ip, #0
    9040:	blt	9208 <coda_cursor_read_int64_partial_array+0x434>
    9044:	add	r1, r4, ip, lsl #3
    9048:	ldrsb	r2, [r4, ip]
    904c:	asr	r3, r2, #31
    9050:	str	r2, [r1]
    9054:	str	r3, [r1, #4]
    9058:	sub	ip, ip, #1
    905c:	b	903c <coda_cursor_read_int64_partial_array+0x268>
    9060:	mov	r3, r4
    9064:	mov	r2, r5
    9068:	mov	r1, r6
    906c:	mov	r0, r7
    9070:	bl	3024 <read_uint8_partial_array>
    9074:	cmp	r0, #0
    9078:	beq	9084 <coda_cursor_read_int64_partial_array+0x2b0>
    907c:	mvn	r0, #0
    9080:	b	922c <coda_cursor_read_int64_partial_array+0x458>
    9084:	sub	r0, r5, #1
    9088:	cmp	r0, #0
    908c:	blt	9208 <coda_cursor_read_int64_partial_array+0x434>
    9090:	add	r2, r4, r0, lsl #3
    9094:	mov	ip, #0
    9098:	ldrb	r3, [r4, r0]
    909c:	str	r3, [r2]
    90a0:	str	ip, [r2, #4]
    90a4:	sub	r0, r0, #1
    90a8:	b	9088 <coda_cursor_read_int64_partial_array+0x2b4>
    90ac:	mov	r3, r4
    90b0:	mov	r2, r5
    90b4:	mov	r1, r6
    90b8:	mov	r0, r7
    90bc:	bl	311c <read_int16_partial_array>
    90c0:	cmp	r0, #0
    90c4:	beq	90d0 <coda_cursor_read_int64_partial_array+0x2fc>
    90c8:	mvn	r0, #0
    90cc:	b	922c <coda_cursor_read_int64_partial_array+0x458>
    90d0:	sub	r3, r5, #1
    90d4:	cmp	r3, #0
    90d8:	blt	9208 <coda_cursor_read_int64_partial_array+0x434>
    90dc:	add	ip, r4, r3, lsl #3
    90e0:	add	r2, r4, r3, lsl #1
    90e4:	ldrsh	r0, [r2]
    90e8:	asr	r1, r0, #31
    90ec:	str	r0, [ip]
    90f0:	str	r1, [ip, #4]
    90f4:	sub	r3, r3, #1
    90f8:	b	90d4 <coda_cursor_read_int64_partial_array+0x300>
    90fc:	mov	r3, r4
    9100:	mov	r2, r5
    9104:	mov	r1, r6
    9108:	mov	r0, r7
    910c:	bl	3228 <read_uint16_partial_array>
    9110:	cmp	r0, #0
    9114:	beq	9120 <coda_cursor_read_int64_partial_array+0x34c>
    9118:	mvn	r0, #0
    911c:	b	922c <coda_cursor_read_int64_partial_array+0x458>
    9120:	sub	r3, r5, #1
    9124:	cmp	r3, #0
    9128:	blt	9208 <coda_cursor_read_int64_partial_array+0x434>
    912c:	add	ip, r4, r3, lsl #3
    9130:	mov	r2, #0
    9134:	add	r0, r4, r3, lsl #1
    9138:	ldrh	r1, [r0]
    913c:	str	r1, [ip]
    9140:	str	r2, [ip, #4]
    9144:	sub	r3, r3, #1
    9148:	b	9124 <coda_cursor_read_int64_partial_array+0x350>
    914c:	mov	r3, r4
    9150:	mov	r2, r5
    9154:	mov	r1, r6
    9158:	mov	r0, r7
    915c:	bl	3320 <read_int32_partial_array>
    9160:	cmp	r0, #0
    9164:	beq	9170 <coda_cursor_read_int64_partial_array+0x39c>
    9168:	mvn	r0, #0
    916c:	b	922c <coda_cursor_read_int64_partial_array+0x458>
    9170:	sub	r2, r5, #1
    9174:	cmp	r2, #0
    9178:	blt	9208 <coda_cursor_read_int64_partial_array+0x434>
    917c:	add	r3, r4, r2, lsl #3
    9180:	ldr	r0, [r4, r2, lsl #2]
    9184:	asr	r1, r0, #31
    9188:	str	r0, [r3]
    918c:	str	r1, [r3, #4]
    9190:	sub	r2, r2, #1
    9194:	b	9174 <coda_cursor_read_int64_partial_array+0x3a0>
    9198:	mov	r3, r4
    919c:	mov	r2, r5
    91a0:	mov	r1, r6
    91a4:	mov	r0, r7
    91a8:	bl	342c <read_uint32_partial_array>
    91ac:	cmp	r0, #0
    91b0:	beq	91bc <coda_cursor_read_int64_partial_array+0x3e8>
    91b4:	mvn	r0, #0
    91b8:	b	922c <coda_cursor_read_int64_partial_array+0x458>
    91bc:	sub	r0, r5, #1
    91c0:	cmp	r0, #0
    91c4:	blt	9208 <coda_cursor_read_int64_partial_array+0x434>
    91c8:	add	ip, r4, r0, lsl #3
    91cc:	mov	r3, #0
    91d0:	ldr	r2, [r4, r0, lsl #2]
    91d4:	str	r2, [ip]
    91d8:	str	r3, [ip, #4]
    91dc:	sub	r0, r0, #1
    91e0:	b	91c0 <coda_cursor_read_int64_partial_array+0x3ec>
    91e4:	mov	r3, r4
    91e8:	mov	r2, r5
    91ec:	mov	r1, r6
    91f0:	mov	r0, r7
    91f4:	bl	3524 <read_int64_partial_array>
    91f8:	cmp	r0, #0
    91fc:	beq	9208 <coda_cursor_read_int64_partial_array+0x434>
    9200:	mvn	r0, #0
    9204:	b	922c <coda_cursor_read_int64_partial_array+0x458>
    9208:	mov	r0, #0
    920c:	b	922c <coda_cursor_read_int64_partial_array+0x458>
    9210:	ldr	r0, [sp, #40]	; 0x28
    9214:	bl	0 <coda_type_get_native_type_name>
    9218:	mov	r2, r0
    921c:	mvn	r0, #104	; 0x68
    9220:	ldr	r1, [pc, #40]	; 9250 <coda_cursor_read_int64_partial_array+0x47c>
    9224:	bl	0 <coda_set_error>
    9228:	mvn	r0, #0
    922c:	ldr	r4, [sp, #16]
    9230:	ldr	r5, [sp, #20]
    9234:	ldr	r6, [sp, #24]
    9238:	ldr	r7, [sp, #28]
    923c:	ldr	r8, [sp, #32]
    9240:	ldr	lr, [sp, #8]
    9244:	add	sp, sp, #48	; 0x30
    9248:	bx	lr
    924c:	.word	0x0000037f
    9250:	.word	0x00000106
    9254:	.word	0x000002bc
    9258:	.word	0x00000160
    925c:	.word	0x00000453
    9260:	.word	0x0000022b
    9264:	.word	0x00000000
    9268:	.word	0x0000005b

0000926c <coda_cursor_read_uint64_partial_array>:
    926c:	mov	ip, sp
    9270:	sub	sp, sp, #48	; 0x30
    9274:	str	ip, [sp, #4]
    9278:	str	lr, [sp, #8]
    927c:	str	r4, [sp, #16]
    9280:	str	r5, [sp, #20]
    9284:	str	r6, [sp, #24]
    9288:	str	r7, [sp, #28]
    928c:	str	r8, [sp, #32]
    9290:	mov	r4, r3
    9294:	mov	r5, r2
    9298:	mov	r6, r1
    929c:	mov	r7, r0
    92a0:	cmp	r7, #0
    92a4:	beq	92bc <coda_cursor_read_uint64_partial_array+0x50>
    92a8:	ldr	r0, [r7, #4]
    92ac:	cmp	r0, #0
    92b0:	movle	r2, #1
    92b4:	movgt	r2, #0
    92b8:	b	92c0 <coda_cursor_read_uint64_partial_array+0x54>
    92bc:	mov	r2, #1
    92c0:	cmp	r2, #0
    92c4:	bne	92ec <coda_cursor_read_uint64_partial_array+0x80>
    92c8:	ldr	r0, [r7, #4]
    92cc:	lsl	r0, r0, #4
    92d0:	add	r2, r7, r0
    92d4:	sub	lr, r2, #4096	; 0x1000
    92d8:	ldr	r3, [lr, #4088]	; 0xff8
    92dc:	cmp	r3, #0
    92e0:	moveq	r1, #1
    92e4:	movne	r1, #0
    92e8:	b	92f0 <coda_cursor_read_uint64_partial_array+0x84>
    92ec:	mov	r1, #1
    92f0:	cmp	r1, #0
    92f4:	beq	9314 <coda_cursor_read_uint64_partial_array+0xa8>
    92f8:	mvn	r0, #99	; 0x63
    92fc:	ldr	r1, [pc, #776]	; 960c <coda_cursor_read_uint64_partial_array+0x3a0>
    9300:	ldr	r2, [pc, #768]	; 9608 <coda_cursor_read_uint64_partial_array+0x39c>
    9304:	movw	r3, #4978	; 0x1372
    9308:	bl	0 <coda_set_error>
    930c:	mvn	r0, #0
    9310:	b	95d8 <coda_cursor_read_uint64_partial_array+0x36c>
    9314:	cmp	r4, #0
    9318:	bne	9338 <coda_cursor_read_uint64_partial_array+0xcc>
    931c:	mvn	r0, #99	; 0x63
    9320:	ldr	r1, [pc, #748]	; 9614 <coda_cursor_read_uint64_partial_array+0x3a8>
    9324:	ldr	r2, [pc, #732]	; 9608 <coda_cursor_read_uint64_partial_array+0x39c>
    9328:	movw	r3, #4983	; 0x1377
    932c:	bl	0 <coda_set_error>
    9330:	mvn	r0, #0
    9334:	b	95d8 <coda_cursor_read_uint64_partial_array+0x36c>
    9338:	ldr	ip, [r7, #4]
    933c:	lsl	ip, ip, #4
    9340:	add	r1, r7, ip
    9344:	sub	lr, r1, #4096	; 0x1000
    9348:	ldr	ip, [lr, #4088]	; 0xff8
    934c:	ldr	ip, [ip]
    9350:	cmp	ip, #100	; 0x64
    9354:	blt	9374 <coda_cursor_read_uint64_partial_array+0x108>
    9358:	ldr	ip, [r7, #4]
    935c:	lsl	r1, ip, #4
    9360:	add	r0, r7, r1
    9364:	sub	lr, r0, #4096	; 0x1000
    9368:	ldr	r2, [lr, #4088]	; 0xff8
    936c:	ldr	r8, [r2, #4]
    9370:	b	9388 <coda_cursor_read_uint64_partial_array+0x11c>
    9374:	ldr	r1, [r7, #4]
    9378:	lsl	r1, r1, #4
    937c:	add	r1, r7, r1
    9380:	sub	lr, r1, #4096	; 0x1000
    9384:	ldr	r8, [lr, #4088]	; 0xff8
    9388:	ldr	r2, [r8, #8]
    938c:	cmp	r2, #1
    9390:	beq	93bc <coda_cursor_read_uint64_partial_array+0x150>
    9394:	ldr	r0, [r8, #8]
    9398:	bl	0 <coda_type_get_class_name>
    939c:	mvn	r2, #104	; 0x68
    93a0:	ldr	r1, [pc, #600]	; 9600 <coda_cursor_read_uint64_partial_array+0x394>
    93a4:	mov	ip, r0
    93a8:	mov	r0, r2
    93ac:	mov	r2, ip
    93b0:	bl	0 <coda_set_error>
    93b4:	mvn	r0, #0
    93b8:	b	95d8 <coda_cursor_read_uint64_partial_array+0x36c>
    93bc:	ldr	r2, [pc, #588]	; 9610 <coda_cursor_read_uint64_partial_array+0x3a4>
    93c0:	ldr	r3, [r2]
    93c4:	cmp	r3, #0
    93c8:	beq	9460 <coda_cursor_read_uint64_partial_array+0x1f4>
    93cc:	add	r1, sp, #44	; 0x2c
    93d0:	mov	r0, r7
    93d4:	bl	0 <coda_cursor_get_num_elements>
    93d8:	cmp	r0, #0
    93dc:	beq	93e8 <coda_cursor_read_uint64_partial_array+0x17c>
    93e0:	mvn	r0, #0
    93e4:	b	95d8 <coda_cursor_read_uint64_partial_array+0x36c>
    93e8:	cmp	r6, #0
    93ec:	blt	9404 <coda_cursor_read_uint64_partial_array+0x198>
    93f0:	ldr	r3, [sp, #44]	; 0x2c
    93f4:	cmp	r6, r3
    93f8:	movge	ip, #1
    93fc:	movlt	ip, #0
    9400:	b	9408 <coda_cursor_read_uint64_partial_array+0x19c>
    9404:	mov	ip, #1
    9408:	cmp	ip, #0
    940c:	beq	942c <coda_cursor_read_uint64_partial_array+0x1c0>
    9410:	mvn	r0, #106	; 0x6a
    9414:	ldr	r1, [pc, #476]	; 95f8 <coda_cursor_read_uint64_partial_array+0x38c>
    9418:	ldr	r3, [sp, #44]	; 0x2c
    941c:	mov	r2, r6
    9420:	bl	0 <coda_set_error>
    9424:	mvn	r0, #0
    9428:	b	95d8 <coda_cursor_read_uint64_partial_array+0x36c>
    942c:	add	r2, r6, r5
    9430:	ldr	r3, [sp, #44]	; 0x2c
    9434:	cmp	r2, r3
    9438:	ble	9460 <coda_cursor_read_uint64_partial_array+0x1f4>
    943c:	mvn	r0, #106	; 0x6a
    9440:	ldr	r1, [pc, #444]	; 9604 <coda_cursor_read_uint64_partial_array+0x398>
    9444:	ldr	r3, [sp, #44]	; 0x2c
    9448:	str	r3, [sp]
    944c:	mov	r3, r5
    9450:	mov	r2, r6
    9454:	bl	0 <coda_set_error>
    9458:	mvn	r0, #0
    945c:	b	95d8 <coda_cursor_read_uint64_partial_array+0x36c>
    9460:	add	r1, sp, #40	; 0x28
    9464:	mov	r0, r8
    9468:	bl	ae0 <get_array_element_read_type>
    946c:	cmp	r0, #0
    9470:	beq	947c <coda_cursor_read_uint64_partial_array+0x210>
    9474:	mvn	r0, #0
    9478:	b	95d8 <coda_cursor_read_uint64_partial_array+0x36c>
    947c:	ldr	r1, [sp, #40]	; 0x28
    9480:	cmp	r1, #5
    9484:	bcs	9534 <coda_cursor_read_uint64_partial_array+0x2c8>
    9488:	cmp	r1, #1
    948c:	beq	94e8 <coda_cursor_read_uint64_partial_array+0x27c>
    9490:	cmp	r1, #3
    9494:	bne	9568 <coda_cursor_read_uint64_partial_array+0x2fc>
    9498:	mov	r3, r4
    949c:	mov	r2, r5
    94a0:	mov	r1, r6
    94a4:	mov	r0, r7
    94a8:	bl	3228 <read_uint16_partial_array>
    94ac:	cmp	r0, #0
    94b0:	beq	94bc <coda_cursor_read_uint64_partial_array+0x250>
    94b4:	mvn	r0, #0
    94b8:	b	95d8 <coda_cursor_read_uint64_partial_array+0x36c>
    94bc:	sub	r2, r5, #1
    94c0:	cmp	r2, #0
    94c4:	blt	95d4 <coda_cursor_read_uint64_partial_array+0x368>
    94c8:	add	ip, r4, r2, lsl #3
    94cc:	mov	r1, #0
    94d0:	add	r0, r4, r2, lsl #1
    94d4:	ldrh	r0, [r0]
    94d8:	str	r0, [ip]
    94dc:	str	r1, [ip, #4]
    94e0:	sub	r2, r2, #1
    94e4:	b	94c0 <coda_cursor_read_uint64_partial_array+0x254>
    94e8:	mov	r3, r4
    94ec:	mov	r2, r5
    94f0:	mov	r1, r6
    94f4:	mov	r0, r7
    94f8:	bl	3024 <read_uint8_partial_array>
    94fc:	cmp	r0, #0
    9500:	beq	950c <coda_cursor_read_uint64_partial_array+0x2a0>
    9504:	mvn	r0, #0
    9508:	b	95d8 <coda_cursor_read_uint64_partial_array+0x36c>
    950c:	sub	r1, r5, #1
    9510:	cmp	r1, #0
    9514:	blt	95d4 <coda_cursor_read_uint64_partial_array+0x368>
    9518:	add	r0, r4, r1, lsl #3
    951c:	mov	ip, #0
    9520:	ldrb	r3, [r4, r1]
    9524:	str	r3, [r0]
    9528:	str	ip, [r0, #4]
    952c:	sub	r1, r1, #1
    9530:	b	9510 <coda_cursor_read_uint64_partial_array+0x2a4>
    9534:	cmp	r1, #5
    9538:	beq	9588 <coda_cursor_read_uint64_partial_array+0x31c>
    953c:	cmp	r1, #7
    9540:	bne	9568 <coda_cursor_read_uint64_partial_array+0x2fc>
    9544:	mov	r3, r4
    9548:	mov	r2, r5
    954c:	mov	r1, r6
    9550:	mov	r0, r7
    9554:	bl	361c <read_uint64_partial_array>
    9558:	cmp	r0, #0
    955c:	beq	95d4 <coda_cursor_read_uint64_partial_array+0x368>
    9560:	mvn	r0, #0
    9564:	b	95d8 <coda_cursor_read_uint64_partial_array+0x36c>
    9568:	ldr	r0, [sp, #40]	; 0x28
    956c:	bl	0 <coda_type_get_native_type_name>
    9570:	mov	r2, r0
    9574:	mvn	r0, #104	; 0x68
    9578:	ldr	r1, [pc, #124]	; 95fc <coda_cursor_read_uint64_partial_array+0x390>
    957c:	bl	0 <coda_set_error>
    9580:	mvn	r0, #0
    9584:	b	95d8 <coda_cursor_read_uint64_partial_array+0x36c>
    9588:	mov	r3, r4
    958c:	mov	r2, r5
    9590:	mov	r1, r6
    9594:	mov	r0, r7
    9598:	bl	342c <read_uint32_partial_array>
    959c:	cmp	r0, #0
    95a0:	beq	95ac <coda_cursor_read_uint64_partial_array+0x340>
    95a4:	mvn	r0, #0
    95a8:	b	95d8 <coda_cursor_read_uint64_partial_array+0x36c>
    95ac:	sub	ip, r5, #1
    95b0:	cmp	ip, #0
    95b4:	blt	95d4 <coda_cursor_read_uint64_partial_array+0x368>
    95b8:	add	r3, r4, ip, lsl #3
    95bc:	mov	r2, #0
    95c0:	ldr	r1, [r4, ip, lsl #2]
    95c4:	str	r1, [r3]
    95c8:	str	r2, [r3, #4]
    95cc:	sub	ip, ip, #1
    95d0:	b	95b0 <coda_cursor_read_uint64_partial_array+0x344>
    95d4:	mov	r0, #0
    95d8:	ldr	r4, [sp, #16]
    95dc:	ldr	r5, [sp, #20]
    95e0:	ldr	r6, [sp, #24]
    95e4:	ldr	r7, [sp, #28]
    95e8:	ldr	r8, [sp, #32]
    95ec:	ldr	lr, [sp, #8]
    95f0:	add	sp, sp, #48	; 0x30
    95f4:	bx	lr
    95f8:	.word	0x0000037f
    95fc:	.word	0x000000a5
    9600:	.word	0x000002bc
    9604:	.word	0x00000160
    9608:	.word	0x00000453
    960c:	.word	0x0000022b
    9610:	.word	0x00000000
    9614:	.word	0x0000005b

00009618 <coda_cursor_read_float_partial_array>:
    9618:	mov	ip, sp
    961c:	sub	sp, sp, #56	; 0x38
    9620:	str	ip, [sp, #4]
    9624:	str	lr, [sp, #8]
    9628:	str	r4, [sp, #16]
    962c:	str	r5, [sp, #20]
    9630:	str	r6, [sp, #24]
    9634:	str	r7, [sp, #28]
    9638:	str	r8, [sp, #32]
    963c:	mov	r5, r3
    9640:	mov	r6, r2
    9644:	mov	r8, r1
    9648:	mov	r7, r0
    964c:	cmp	r7, #0
    9650:	beq	9668 <coda_cursor_read_float_partial_array+0x50>
    9654:	ldr	ip, [r7, #4]
    9658:	cmp	ip, #0
    965c:	movle	r3, #1
    9660:	movgt	r3, #0
    9664:	b	966c <coda_cursor_read_float_partial_array+0x54>
    9668:	mov	r3, #1
    966c:	cmp	r3, #0
    9670:	bne	9698 <coda_cursor_read_float_partial_array+0x80>
    9674:	ldr	ip, [r7, #4]
    9678:	lsl	ip, ip, #4
    967c:	add	r1, r7, ip
    9680:	sub	lr, r1, #4096	; 0x1000
    9684:	ldr	r2, [lr, #4088]	; 0xff8
    9688:	cmp	r2, #0
    968c:	moveq	r3, #1
    9690:	movne	r3, #0
    9694:	b	969c <coda_cursor_read_float_partial_array+0x84>
    9698:	mov	r3, #1
    969c:	cmp	r3, #0
    96a0:	beq	96c0 <coda_cursor_read_float_partial_array+0xa8>
    96a4:	mvn	r0, #99	; 0x63
    96a8:	ldr	r1, [pc, #1608]	; 9cf8 <coda_cursor_read_float_partial_array+0x6e0>
    96ac:	ldr	r2, [pc, #1600]	; 9cf4 <coda_cursor_read_float_partial_array+0x6dc>
    96b0:	movw	r3, #5105	; 0x13f1
    96b4:	bl	0 <coda_set_error>
    96b8:	mvn	r0, #0
    96bc:	b	9cc4 <coda_cursor_read_float_partial_array+0x6ac>
    96c0:	cmp	r5, #0
    96c4:	bne	96e4 <coda_cursor_read_float_partial_array+0xcc>
    96c8:	mvn	r0, #99	; 0x63
    96cc:	ldr	r1, [pc, #1584]	; 9d04 <coda_cursor_read_float_partial_array+0x6ec>
    96d0:	ldr	r2, [pc, #1564]	; 9cf4 <coda_cursor_read_float_partial_array+0x6dc>
    96d4:	movw	r3, #5110	; 0x13f6
    96d8:	bl	0 <coda_set_error>
    96dc:	mvn	r0, #0
    96e0:	b	9cc4 <coda_cursor_read_float_partial_array+0x6ac>
    96e4:	ldr	r1, [r7, #4]
    96e8:	lsl	r3, r1, #4
    96ec:	add	r2, r7, r3
    96f0:	sub	lr, r2, #4096	; 0x1000
    96f4:	ldr	r3, [lr, #4088]	; 0xff8
    96f8:	ldr	ip, [r3]
    96fc:	cmp	ip, #100	; 0x64
    9700:	blt	9720 <coda_cursor_read_float_partial_array+0x108>
    9704:	ldr	ip, [r7, #4]
    9708:	lsl	r1, ip, #4
    970c:	add	ip, r7, r1
    9710:	sub	lr, ip, #4096	; 0x1000
    9714:	ldr	r0, [lr, #4088]	; 0xff8
    9718:	ldr	r4, [r0, #4]
    971c:	b	9734 <coda_cursor_read_float_partial_array+0x11c>
    9720:	ldr	ip, [r7, #4]
    9724:	lsl	ip, ip, #4
    9728:	add	r3, r7, ip
    972c:	sub	lr, r3, #4096	; 0x1000
    9730:	ldr	r4, [lr, #4088]	; 0xff8
    9734:	ldr	r3, [r4, #8]
    9738:	cmp	r3, #1
    973c:	beq	9768 <coda_cursor_read_float_partial_array+0x150>
    9740:	ldr	r0, [r4, #8]
    9744:	bl	0 <coda_type_get_class_name>
    9748:	mvn	r2, #104	; 0x68
    974c:	ldr	r1, [pc, #1428]	; 9ce8 <coda_cursor_read_float_partial_array+0x6d0>
    9750:	mov	r3, r0
    9754:	mov	r0, r2
    9758:	mov	r2, r3
    975c:	bl	0 <coda_set_error>
    9760:	mvn	r0, #0
    9764:	b	9cc4 <coda_cursor_read_float_partial_array+0x6ac>
    9768:	ldr	r1, [pc, #1420]	; 9cfc <coda_cursor_read_float_partial_array+0x6e4>
    976c:	ldr	r1, [r1]
    9770:	cmp	r1, #0
    9774:	beq	980c <coda_cursor_read_float_partial_array+0x1f4>
    9778:	add	r1, sp, #40	; 0x28
    977c:	mov	r0, r7
    9780:	bl	0 <coda_cursor_get_num_elements>
    9784:	cmp	r0, #0
    9788:	beq	9794 <coda_cursor_read_float_partial_array+0x17c>
    978c:	mvn	r0, #0
    9790:	b	9cc4 <coda_cursor_read_float_partial_array+0x6ac>
    9794:	cmp	r8, #0
    9798:	blt	97b0 <coda_cursor_read_float_partial_array+0x198>
    979c:	ldr	ip, [sp, #40]	; 0x28
    97a0:	cmp	r8, ip
    97a4:	movge	r0, #1
    97a8:	movlt	r0, #0
    97ac:	b	97b4 <coda_cursor_read_float_partial_array+0x19c>
    97b0:	mov	r0, #1
    97b4:	cmp	r0, #0
    97b8:	beq	97d8 <coda_cursor_read_float_partial_array+0x1c0>
    97bc:	mvn	r0, #106	; 0x6a
    97c0:	ldr	r1, [pc, #1308]	; 9ce4 <coda_cursor_read_float_partial_array+0x6cc>
    97c4:	ldr	r3, [sp, #40]	; 0x28
    97c8:	mov	r2, r8
    97cc:	bl	0 <coda_set_error>
    97d0:	mvn	r0, #0
    97d4:	b	9cc4 <coda_cursor_read_float_partial_array+0x6ac>
    97d8:	add	r3, r8, r6
    97dc:	ldr	ip, [sp, #40]	; 0x28
    97e0:	cmp	r3, ip
    97e4:	ble	980c <coda_cursor_read_float_partial_array+0x1f4>
    97e8:	mvn	r0, #106	; 0x6a
    97ec:	ldr	r1, [pc, #1272]	; 9cec <coda_cursor_read_float_partial_array+0x6d4>
    97f0:	ldr	r2, [sp, #40]	; 0x28
    97f4:	str	r2, [sp]
    97f8:	mov	r3, r6
    97fc:	mov	r2, r8
    9800:	bl	0 <coda_set_error>
    9804:	mvn	r0, #0
    9808:	b	9cc4 <coda_cursor_read_float_partial_array+0x6ac>
    980c:	add	r1, sp, #44	; 0x2c
    9810:	add	r2, sp, #48	; 0x30
    9814:	mov	r0, r4
    9818:	bl	b8c <get_array_element_unconverted_read_type>
    981c:	cmp	r0, #0
    9820:	beq	982c <coda_cursor_read_float_partial_array+0x214>
    9824:	mvn	r0, #0
    9828:	b	9cc4 <coda_cursor_read_float_partial_array+0x6ac>
    982c:	ldr	r1, [sp, #48]	; 0x30
    9830:	cmp	r1, #0
    9834:	beq	98c8 <coda_cursor_read_float_partial_array+0x2b0>
    9838:	lsl	r0, r6, #3
    983c:	bl	0 <malloc>
    9840:	mov	r4, r0
    9844:	cmp	r4, #0
    9848:	bne	9864 <coda_cursor_read_float_partial_array+0x24c>
    984c:	mvn	r0, #0
    9850:	ldr	r1, [pc, #1176]	; 9cf0 <coda_cursor_read_float_partial_array+0x6d8>
    9854:	lsl	r2, r6, #3
    9858:	bl	0 <coda_set_error>
    985c:	mvn	r0, #0
    9860:	b	9cc4 <coda_cursor_read_float_partial_array+0x6ac>
    9864:	mov	r3, r4
    9868:	mov	r2, r6
    986c:	mov	r1, r8
    9870:	mov	r0, r7
    9874:	bl	9d08 <coda_cursor_read_double_partial_array>
    9878:	cmp	r0, #0
    987c:	beq	9890 <coda_cursor_read_float_partial_array+0x278>
    9880:	mov	r0, r4
    9884:	bl	0 <free>
    9888:	mvn	r0, #0
    988c:	b	9cc4 <coda_cursor_read_float_partial_array+0x6ac>
    9890:	sub	r3, r6, #1
    9894:	cmp	r3, #0
    9898:	blt	98b8 <coda_cursor_read_float_partial_array+0x2a0>
    989c:	add	r0, r5, r3, lsl #2
    98a0:	add	r1, r4, r3, lsl #3
    98a4:	vldr	d5, [r1]
    98a8:	vcvt.f32.f64	s12, d5
    98ac:	vstr	s12, [r0]
    98b0:	sub	r3, r3, #1
    98b4:	b	9894 <coda_cursor_read_float_partial_array+0x27c>
    98b8:	mov	r0, r4
    98bc:	bl	0 <free>
    98c0:	mov	r0, #0
    98c4:	b	9cc4 <coda_cursor_read_float_partial_array+0x6ac>
    98c8:	ldr	r0, [sp, #44]	; 0x2c
    98cc:	cmp	r0, #10
    98d0:	bcs	9ca8 <coda_cursor_read_float_partial_array+0x690>
    98d4:	add	pc, pc, r0, lsl #2
    98d8:	nop	{0}
    98dc:	b	9904 <coda_cursor_read_float_partial_array+0x2ec>
    98e0:	b	9950 <coda_cursor_read_float_partial_array+0x338>
    98e4:	b	999c <coda_cursor_read_float_partial_array+0x384>
    98e8:	b	99ec <coda_cursor_read_float_partial_array+0x3d4>
    98ec:	b	9a3c <coda_cursor_read_float_partial_array+0x424>
    98f0:	b	9a88 <coda_cursor_read_float_partial_array+0x470>
    98f4:	b	9ad4 <coda_cursor_read_float_partial_array+0x4bc>
    98f8:	b	9b64 <coda_cursor_read_float_partial_array+0x54c>
    98fc:	b	9bf4 <coda_cursor_read_float_partial_array+0x5dc>
    9900:	b	9c18 <coda_cursor_read_float_partial_array+0x600>
    9904:	mov	r3, r5
    9908:	mov	r2, r6
    990c:	mov	r1, r8
    9910:	mov	r0, r7
    9914:	bl	2f18 <read_int8_partial_array>
    9918:	cmp	r0, #0
    991c:	beq	9928 <coda_cursor_read_float_partial_array+0x310>
    9920:	mvn	r0, #0
    9924:	b	9cc4 <coda_cursor_read_float_partial_array+0x6ac>
    9928:	sub	r0, r6, #1
    992c:	cmp	r0, #0
    9930:	blt	9ca0 <coda_cursor_read_float_partial_array+0x688>
    9934:	add	ip, r5, r0, lsl #2
    9938:	ldrsb	r1, [r5, r0]
    993c:	vmov	s4, r1
    9940:	vcvt.f32.s32	s4, s4
    9944:	vstr	s4, [ip]
    9948:	sub	r0, r0, #1
    994c:	b	992c <coda_cursor_read_float_partial_array+0x314>
    9950:	mov	r3, r5
    9954:	mov	r2, r6
    9958:	mov	r1, r8
    995c:	mov	r0, r7
    9960:	bl	3024 <read_uint8_partial_array>
    9964:	cmp	r0, #0
    9968:	beq	9974 <coda_cursor_read_float_partial_array+0x35c>
    996c:	mvn	r0, #0
    9970:	b	9cc4 <coda_cursor_read_float_partial_array+0x6ac>
    9974:	sub	r3, r6, #1
    9978:	cmp	r3, #0
    997c:	blt	9ca0 <coda_cursor_read_float_partial_array+0x688>
    9980:	add	r2, r5, r3, lsl #2
    9984:	ldrb	ip, [r5, r3]
    9988:	vmov	s10, ip
    998c:	vcvt.f32.u32	s10, s10
    9990:	vstr	s10, [r2]
    9994:	sub	r3, r3, #1
    9998:	b	9978 <coda_cursor_read_float_partial_array+0x360>
    999c:	mov	r3, r5
    99a0:	mov	r2, r6
    99a4:	mov	r1, r8
    99a8:	mov	r0, r7
    99ac:	bl	311c <read_int16_partial_array>
    99b0:	cmp	r0, #0
    99b4:	beq	99c0 <coda_cursor_read_float_partial_array+0x3a8>
    99b8:	mvn	r0, #0
    99bc:	b	9cc4 <coda_cursor_read_float_partial_array+0x6ac>
    99c0:	sub	ip, r6, #1
    99c4:	cmp	ip, #0
    99c8:	blt	9ca0 <coda_cursor_read_float_partial_array+0x688>
    99cc:	add	r3, r5, ip, lsl #2
    99d0:	add	r1, r5, ip, lsl #1
    99d4:	ldrsh	r2, [r1]
    99d8:	vmov	s12, r2
    99dc:	vcvt.f32.s32	s12, s12
    99e0:	vstr	s12, [r3]
    99e4:	sub	ip, ip, #1
    99e8:	b	99c4 <coda_cursor_read_float_partial_array+0x3ac>
    99ec:	mov	r3, r5
    99f0:	mov	r2, r6
    99f4:	mov	r1, r8
    99f8:	mov	r0, r7
    99fc:	bl	3228 <read_uint16_partial_array>
    9a00:	cmp	r0, #0
    9a04:	beq	9a10 <coda_cursor_read_float_partial_array+0x3f8>
    9a08:	mvn	r0, #0
    9a0c:	b	9cc4 <coda_cursor_read_float_partial_array+0x6ac>
    9a10:	sub	r1, r6, #1
    9a14:	cmp	r1, #0
    9a18:	blt	9ca0 <coda_cursor_read_float_partial_array+0x688>
    9a1c:	add	r3, r5, r1, lsl #2
    9a20:	add	r2, r5, r1, lsl #1
    9a24:	ldrh	r2, [r2]
    9a28:	vmov	s2, r2
    9a2c:	vcvt.f32.u32	s2, s2
    9a30:	vstr	s2, [r3]
    9a34:	sub	r1, r1, #1
    9a38:	b	9a14 <coda_cursor_read_float_partial_array+0x3fc>
    9a3c:	mov	r3, r5
    9a40:	mov	r2, r6
    9a44:	mov	r1, r8
    9a48:	mov	r0, r7
    9a4c:	bl	3320 <read_int32_partial_array>
    9a50:	cmp	r0, #0
    9a54:	beq	9a60 <coda_cursor_read_float_partial_array+0x448>
    9a58:	mvn	r0, #0
    9a5c:	b	9cc4 <coda_cursor_read_float_partial_array+0x6ac>
    9a60:	sub	r2, r6, #1
    9a64:	cmp	r2, #0
    9a68:	blt	9ca0 <coda_cursor_read_float_partial_array+0x688>
    9a6c:	add	r1, r5, r2, lsl #2
    9a70:	ldr	r0, [r5, r2, lsl #2]
    9a74:	vmov	s2, r0
    9a78:	vcvt.f32.s32	s2, s2
    9a7c:	vstr	s2, [r1]
    9a80:	sub	r2, r2, #1
    9a84:	b	9a64 <coda_cursor_read_float_partial_array+0x44c>
    9a88:	mov	r3, r5
    9a8c:	mov	r2, r6
    9a90:	mov	r1, r8
    9a94:	mov	r0, r7
    9a98:	bl	342c <read_uint32_partial_array>
    9a9c:	cmp	r0, #0
    9aa0:	beq	9aac <coda_cursor_read_float_partial_array+0x494>
    9aa4:	mvn	r0, #0
    9aa8:	b	9cc4 <coda_cursor_read_float_partial_array+0x6ac>
    9aac:	sub	ip, r6, #1
    9ab0:	cmp	ip, #0
    9ab4:	blt	9ca0 <coda_cursor_read_float_partial_array+0x688>
    9ab8:	add	r3, r5, ip, lsl #2
    9abc:	ldr	r2, [r5, ip, lsl #2]
    9ac0:	vmov	s6, r2
    9ac4:	vcvt.f32.u32	s6, s6
    9ac8:	vstr	s6, [r3]
    9acc:	sub	ip, ip, #1
    9ad0:	b	9ab0 <coda_cursor_read_float_partial_array+0x498>
    9ad4:	lsl	r0, r6, #3
    9ad8:	bl	0 <malloc>
    9adc:	mov	r4, r0
    9ae0:	cmp	r4, #0
    9ae4:	bne	9b00 <coda_cursor_read_float_partial_array+0x4e8>
    9ae8:	mvn	r0, #0
    9aec:	ldr	r1, [pc, #508]	; 9cf0 <coda_cursor_read_float_partial_array+0x6d8>
    9af0:	lsl	r2, r6, #3
    9af4:	bl	0 <coda_set_error>
    9af8:	mvn	r0, #0
    9afc:	b	9cc4 <coda_cursor_read_float_partial_array+0x6ac>
    9b00:	mov	r3, r4
    9b04:	mov	r2, r6
    9b08:	mov	r1, r8
    9b0c:	mov	r0, r7
    9b10:	bl	3524 <read_int64_partial_array>
    9b14:	cmp	r0, #0
    9b18:	beq	9b2c <coda_cursor_read_float_partial_array+0x514>
    9b1c:	mov	r0, r4
    9b20:	bl	0 <free>
    9b24:	mvn	r0, #0
    9b28:	b	9cc4 <coda_cursor_read_float_partial_array+0x6ac>
    9b2c:	sub	r6, r6, #1
    9b30:	cmp	r6, #0
    9b34:	blt	9b58 <coda_cursor_read_float_partial_array+0x540>
    9b38:	add	r7, r5, r6, lsl #2
    9b3c:	add	r2, r4, r6, lsl #3
    9b40:	ldr	r0, [r2]
    9b44:	ldr	r1, [r2, #4]
    9b48:	bl	0 <__compcert_i64_stof>
    9b4c:	vstr	s0, [r7]
    9b50:	sub	r6, r6, #1
    9b54:	b	9b30 <coda_cursor_read_float_partial_array+0x518>
    9b58:	mov	r0, r4
    9b5c:	bl	0 <free>
    9b60:	b	9ca0 <coda_cursor_read_float_partial_array+0x688>
    9b64:	lsl	r0, r6, #3
    9b68:	bl	0 <malloc>
    9b6c:	mov	r4, r0
    9b70:	cmp	r4, #0
    9b74:	bne	9b90 <coda_cursor_read_float_partial_array+0x578>
    9b78:	mvn	r0, #0
    9b7c:	ldr	r1, [pc, #364]	; 9cf0 <coda_cursor_read_float_partial_array+0x6d8>
    9b80:	lsl	r2, r6, #3
    9b84:	bl	0 <coda_set_error>
    9b88:	mvn	r0, #0
    9b8c:	b	9cc4 <coda_cursor_read_float_partial_array+0x6ac>
    9b90:	mov	r3, r4
    9b94:	mov	r2, r6
    9b98:	mov	r1, r8
    9b9c:	mov	r0, r7
    9ba0:	bl	361c <read_uint64_partial_array>
    9ba4:	cmp	r0, #0
    9ba8:	beq	9bbc <coda_cursor_read_float_partial_array+0x5a4>
    9bac:	mov	r0, r4
    9bb0:	bl	0 <free>
    9bb4:	mvn	r0, #0
    9bb8:	b	9cc4 <coda_cursor_read_float_partial_array+0x6ac>
    9bbc:	sub	r7, r6, #1
    9bc0:	cmp	r7, #0
    9bc4:	blt	9be8 <coda_cursor_read_float_partial_array+0x5d0>
    9bc8:	add	r6, r5, r7, lsl #2
    9bcc:	add	r2, r4, r7, lsl #3
    9bd0:	ldr	r0, [r2]
    9bd4:	ldr	r1, [r2, #4]
    9bd8:	bl	0 <__compcert_i64_utof>
    9bdc:	vstr	s0, [r6]
    9be0:	sub	r7, r7, #1
    9be4:	b	9bc0 <coda_cursor_read_float_partial_array+0x5a8>
    9be8:	mov	r0, r4
    9bec:	bl	0 <free>
    9bf0:	b	9ca0 <coda_cursor_read_float_partial_array+0x688>
    9bf4:	mov	r3, r5
    9bf8:	mov	r2, r6
    9bfc:	mov	r1, r8
    9c00:	mov	r0, r7
    9c04:	bl	3708 <read_float_partial_array>
    9c08:	cmp	r0, #0
    9c0c:	beq	9ca0 <coda_cursor_read_float_partial_array+0x688>
    9c10:	mvn	r0, #0
    9c14:	b	9cc4 <coda_cursor_read_float_partial_array+0x6ac>
    9c18:	lsl	r0, r6, #3
    9c1c:	bl	0 <malloc>
    9c20:	mov	r4, r0
    9c24:	cmp	r4, #0
    9c28:	bne	9c44 <coda_cursor_read_float_partial_array+0x62c>
    9c2c:	mvn	r0, #0
    9c30:	ldr	r1, [pc, #184]	; 9cf0 <coda_cursor_read_float_partial_array+0x6d8>
    9c34:	lsl	r2, r6, #3
    9c38:	bl	0 <coda_set_error>
    9c3c:	mvn	r0, #0
    9c40:	b	9cc4 <coda_cursor_read_float_partial_array+0x6ac>
    9c44:	mov	r3, r4
    9c48:	mov	r2, r6
    9c4c:	mov	r1, r8
    9c50:	mov	r0, r7
    9c54:	bl	3828 <read_double_partial_array>
    9c58:	cmp	r0, #0
    9c5c:	beq	9c70 <coda_cursor_read_float_partial_array+0x658>
    9c60:	mov	r0, r4
    9c64:	bl	0 <free>
    9c68:	mvn	r0, #0
    9c6c:	b	9cc4 <coda_cursor_read_float_partial_array+0x6ac>
    9c70:	sub	r0, r6, #1
    9c74:	cmp	r0, #0
    9c78:	blt	9c98 <coda_cursor_read_float_partial_array+0x680>
    9c7c:	add	r1, r5, r0, lsl #2
    9c80:	add	ip, r4, r0, lsl #3
    9c84:	vldr	d6, [ip]
    9c88:	vcvt.f32.f64	s6, d6
    9c8c:	vstr	s6, [r1]
    9c90:	sub	r0, r0, #1
    9c94:	b	9c74 <coda_cursor_read_float_partial_array+0x65c>
    9c98:	mov	r0, r4
    9c9c:	bl	0 <free>
    9ca0:	mov	r0, #0
    9ca4:	b	9cc4 <coda_cursor_read_float_partial_array+0x6ac>
    9ca8:	ldr	r0, [sp, #44]	; 0x2c
    9cac:	bl	0 <coda_type_get_native_type_name>
    9cb0:	mov	r2, r0
    9cb4:	mvn	r0, #104	; 0x68
    9cb8:	ldr	r1, [pc, #64]	; 9d00 <coda_cursor_read_float_partial_array+0x6e8>
    9cbc:	bl	0 <coda_set_error>
    9cc0:	mvn	r0, #0
    9cc4:	ldr	r4, [sp, #16]
    9cc8:	ldr	r5, [sp, #20]
    9ccc:	ldr	r6, [sp, #24]
    9cd0:	ldr	r7, [sp, #28]
    9cd4:	ldr	r8, [sp, #32]
    9cd8:	ldr	lr, [sp, #8]
    9cdc:	add	sp, sp, #56	; 0x38
    9ce0:	bx	lr
    9ce4:	.word	0x0000037f
    9ce8:	.word	0x000002bc
    9cec:	.word	0x00000160
    9cf0:	.word	0x00000426
    9cf4:	.word	0x00000453
    9cf8:	.word	0x0000022b
    9cfc:	.word	0x00000000
    9d00:	.word	0x0000026f
    9d04:	.word	0x0000005b

00009d08 <coda_cursor_read_double_partial_array>:
    9d08:	mov	ip, sp
    9d0c:	sub	sp, sp, #56	; 0x38
    9d10:	str	ip, [sp, #4]
    9d14:	str	lr, [sp, #8]
    9d18:	str	r4, [sp, #16]
    9d1c:	str	r5, [sp, #20]
    9d20:	str	r6, [sp, #24]
    9d24:	str	r7, [sp, #28]
    9d28:	str	r8, [sp, #32]
    9d2c:	mov	r4, r3
    9d30:	mov	r5, r2
    9d34:	mov	r6, r1
    9d38:	mov	r7, r0
    9d3c:	cmp	r7, #0
    9d40:	beq	9d58 <coda_cursor_read_double_partial_array+0x50>
    9d44:	ldr	r2, [r7, #4]
    9d48:	cmp	r2, #0
    9d4c:	movle	r0, #1
    9d50:	movgt	r0, #0
    9d54:	b	9d5c <coda_cursor_read_double_partial_array+0x54>
    9d58:	mov	r0, #1
    9d5c:	cmp	r0, #0
    9d60:	bne	9d88 <coda_cursor_read_double_partial_array+0x80>
    9d64:	ldr	r2, [r7, #4]
    9d68:	lsl	r3, r2, #4
    9d6c:	add	r2, r7, r3
    9d70:	sub	lr, r2, #4096	; 0x1000
    9d74:	ldr	r0, [lr, #4088]	; 0xff8
    9d78:	cmp	r0, #0
    9d7c:	moveq	r0, #1
    9d80:	movne	r0, #0
    9d84:	b	9d8c <coda_cursor_read_double_partial_array+0x84>
    9d88:	mov	r0, #1
    9d8c:	cmp	r0, #0
    9d90:	beq	9db0 <coda_cursor_read_double_partial_array+0xa8>
    9d94:	mvn	r0, #99	; 0x63
    9d98:	ldr	r1, [pc, #1392]	; a310 <coda_cursor_read_double_partial_array+0x608>
    9d9c:	ldr	r2, [pc, #1384]	; a30c <coda_cursor_read_double_partial_array+0x604>
    9da0:	movw	r3, #5355	; 0x14eb
    9da4:	bl	0 <coda_set_error>
    9da8:	mvn	r0, #0
    9dac:	b	a2dc <coda_cursor_read_double_partial_array+0x5d4>
    9db0:	cmp	r4, #0
    9db4:	bne	9dd4 <coda_cursor_read_double_partial_array+0xcc>
    9db8:	mvn	r0, #99	; 0x63
    9dbc:	ldr	r1, [pc, #1364]	; a318 <coda_cursor_read_double_partial_array+0x610>
    9dc0:	ldr	r2, [pc, #1348]	; a30c <coda_cursor_read_double_partial_array+0x604>
    9dc4:	movw	r3, #5360	; 0x14f0
    9dc8:	bl	0 <coda_set_error>
    9dcc:	mvn	r0, #0
    9dd0:	b	a2dc <coda_cursor_read_double_partial_array+0x5d4>
    9dd4:	ldr	r3, [r7, #4]
    9dd8:	lsl	ip, r3, #4
    9ddc:	add	r0, r7, ip
    9de0:	sub	lr, r0, #4096	; 0x1000
    9de4:	ldr	r0, [lr, #4088]	; 0xff8
    9de8:	ldr	ip, [r0]
    9dec:	cmp	ip, #100	; 0x64
    9df0:	blt	9e10 <coda_cursor_read_double_partial_array+0x108>
    9df4:	ldr	r2, [r7, #4]
    9df8:	lsl	r1, r2, #4
    9dfc:	add	r3, r7, r1
    9e00:	sub	lr, r3, #4096	; 0x1000
    9e04:	ldr	r0, [lr, #4088]	; 0xff8
    9e08:	ldr	r8, [r0, #4]
    9e0c:	b	9e24 <coda_cursor_read_double_partial_array+0x11c>
    9e10:	ldr	ip, [r7, #4]
    9e14:	lsl	r1, ip, #4
    9e18:	add	r3, r7, r1
    9e1c:	sub	lr, r3, #4096	; 0x1000
    9e20:	ldr	r8, [lr, #4088]	; 0xff8
    9e24:	ldr	ip, [r8, #8]
    9e28:	cmp	ip, #1
    9e2c:	beq	9e58 <coda_cursor_read_double_partial_array+0x150>
    9e30:	ldr	r0, [r8, #8]
    9e34:	bl	0 <coda_type_get_class_name>
    9e38:	mvn	r2, #104	; 0x68
    9e3c:	ldr	r1, [pc, #1216]	; a304 <coda_cursor_read_double_partial_array+0x5fc>
    9e40:	mov	ip, r0
    9e44:	mov	r0, r2
    9e48:	mov	r2, ip
    9e4c:	bl	0 <coda_set_error>
    9e50:	mvn	r0, #0
    9e54:	b	a2dc <coda_cursor_read_double_partial_array+0x5d4>
    9e58:	ldr	r1, [pc, #1204]	; a314 <coda_cursor_read_double_partial_array+0x60c>
    9e5c:	ldr	r1, [r1]
    9e60:	cmp	r1, #0
    9e64:	beq	9efc <coda_cursor_read_double_partial_array+0x1f4>
    9e68:	add	r1, sp, #40	; 0x28
    9e6c:	mov	r0, r7
    9e70:	bl	0 <coda_cursor_get_num_elements>
    9e74:	cmp	r0, #0
    9e78:	beq	9e84 <coda_cursor_read_double_partial_array+0x17c>
    9e7c:	mvn	r0, #0
    9e80:	b	a2dc <coda_cursor_read_double_partial_array+0x5d4>
    9e84:	cmp	r6, #0
    9e88:	blt	9ea0 <coda_cursor_read_double_partial_array+0x198>
    9e8c:	ldr	r3, [sp, #40]	; 0x28
    9e90:	cmp	r6, r3
    9e94:	movge	ip, #1
    9e98:	movlt	ip, #0
    9e9c:	b	9ea4 <coda_cursor_read_double_partial_array+0x19c>
    9ea0:	mov	ip, #1
    9ea4:	cmp	ip, #0
    9ea8:	beq	9ec8 <coda_cursor_read_double_partial_array+0x1c0>
    9eac:	mvn	r0, #106	; 0x6a
    9eb0:	ldr	r1, [pc, #1092]	; a2fc <coda_cursor_read_double_partial_array+0x5f4>
    9eb4:	ldr	r3, [sp, #40]	; 0x28
    9eb8:	mov	r2, r6
    9ebc:	bl	0 <coda_set_error>
    9ec0:	mvn	r0, #0
    9ec4:	b	a2dc <coda_cursor_read_double_partial_array+0x5d4>
    9ec8:	add	ip, r6, r5
    9ecc:	ldr	r3, [sp, #40]	; 0x28
    9ed0:	cmp	ip, r3
    9ed4:	ble	9efc <coda_cursor_read_double_partial_array+0x1f4>
    9ed8:	mvn	r0, #106	; 0x6a
    9edc:	ldr	r1, [pc, #1060]	; a308 <coda_cursor_read_double_partial_array+0x600>
    9ee0:	ldr	r2, [sp, #40]	; 0x28
    9ee4:	str	r2, [sp]
    9ee8:	mov	r3, r5
    9eec:	mov	r2, r6
    9ef0:	bl	0 <coda_set_error>
    9ef4:	mvn	r0, #0
    9ef8:	b	a2dc <coda_cursor_read_double_partial_array+0x5d4>
    9efc:	add	r1, sp, #44	; 0x2c
    9f00:	add	r2, sp, #48	; 0x30
    9f04:	mov	r0, r8
    9f08:	bl	b8c <get_array_element_unconverted_read_type>
    9f0c:	cmp	r0, #0
    9f10:	beq	9f1c <coda_cursor_read_double_partial_array+0x214>
    9f14:	mvn	r0, #0
    9f18:	b	a2dc <coda_cursor_read_double_partial_array+0x5d4>
    9f1c:	ldr	r1, [sp, #44]	; 0x2c
    9f20:	cmp	r1, #10
    9f24:	bcs	a2c0 <coda_cursor_read_double_partial_array+0x5b8>
    9f28:	add	pc, pc, r1, lsl #2
    9f2c:	nop	{0}
    9f30:	b	9f58 <coda_cursor_read_double_partial_array+0x250>
    9f34:	b	9fa4 <coda_cursor_read_double_partial_array+0x29c>
    9f38:	b	9ff0 <coda_cursor_read_double_partial_array+0x2e8>
    9f3c:	b	a040 <coda_cursor_read_double_partial_array+0x338>
    9f40:	b	a090 <coda_cursor_read_double_partial_array+0x388>
    9f44:	b	a0dc <coda_cursor_read_double_partial_array+0x3d4>
    9f48:	b	a128 <coda_cursor_read_double_partial_array+0x420>
    9f4c:	b	a178 <coda_cursor_read_double_partial_array+0x470>
    9f50:	b	a1c8 <coda_cursor_read_double_partial_array+0x4c0>
    9f54:	b	a214 <coda_cursor_read_double_partial_array+0x50c>
    9f58:	mov	r3, r4
    9f5c:	mov	r2, r5
    9f60:	mov	r1, r6
    9f64:	mov	r0, r7
    9f68:	bl	2f18 <read_int8_partial_array>
    9f6c:	cmp	r0, #0
    9f70:	beq	9f7c <coda_cursor_read_double_partial_array+0x274>
    9f74:	mvn	r0, #0
    9f78:	b	a2dc <coda_cursor_read_double_partial_array+0x5d4>
    9f7c:	sub	r1, r5, #1
    9f80:	cmp	r1, #0
    9f84:	blt	a238 <coda_cursor_read_double_partial_array+0x530>
    9f88:	add	r2, r4, r1, lsl #3
    9f8c:	ldrsb	r3, [r4, r1]
    9f90:	vmov	s8, r3
    9f94:	vcvt.f64.s32	d4, s8
    9f98:	vstr	d4, [r2]
    9f9c:	sub	r1, r1, #1
    9fa0:	b	9f80 <coda_cursor_read_double_partial_array+0x278>
    9fa4:	mov	r3, r4
    9fa8:	mov	r2, r5
    9fac:	mov	r1, r6
    9fb0:	mov	r0, r7
    9fb4:	bl	3024 <read_uint8_partial_array>
    9fb8:	cmp	r0, #0
    9fbc:	beq	9fc8 <coda_cursor_read_double_partial_array+0x2c0>
    9fc0:	mvn	r0, #0
    9fc4:	b	a2dc <coda_cursor_read_double_partial_array+0x5d4>
    9fc8:	sub	r0, r5, #1
    9fcc:	cmp	r0, #0
    9fd0:	blt	a238 <coda_cursor_read_double_partial_array+0x530>
    9fd4:	add	r1, r4, r0, lsl #3
    9fd8:	ldrb	r2, [r4, r0]
    9fdc:	vmov	s10, r2
    9fe0:	vcvt.f64.u32	d5, s10
    9fe4:	vstr	d5, [r1]
    9fe8:	sub	r0, r0, #1
    9fec:	b	9fcc <coda_cursor_read_double_partial_array+0x2c4>
    9ff0:	mov	r3, r4
    9ff4:	mov	r2, r5
    9ff8:	mov	r1, r6
    9ffc:	mov	r0, r7
    a000:	bl	311c <read_int16_partial_array>
    a004:	cmp	r0, #0
    a008:	beq	a014 <coda_cursor_read_double_partial_array+0x30c>
    a00c:	mvn	r0, #0
    a010:	b	a2dc <coda_cursor_read_double_partial_array+0x5d4>
    a014:	sub	ip, r5, #1
    a018:	cmp	ip, #0
    a01c:	blt	a238 <coda_cursor_read_double_partial_array+0x530>
    a020:	add	r1, r4, ip, lsl #3
    a024:	add	r2, r4, ip, lsl #1
    a028:	ldrsh	r0, [r2]
    a02c:	vmov	s4, r0
    a030:	vcvt.f64.s32	d2, s4
    a034:	vstr	d2, [r1]
    a038:	sub	ip, ip, #1
    a03c:	b	a018 <coda_cursor_read_double_partial_array+0x310>
    a040:	mov	r3, r4
    a044:	mov	r2, r5
    a048:	mov	r1, r6
    a04c:	mov	r0, r7
    a050:	bl	3228 <read_uint16_partial_array>
    a054:	cmp	r0, #0
    a058:	beq	a064 <coda_cursor_read_double_partial_array+0x35c>
    a05c:	mvn	r0, #0
    a060:	b	a2dc <coda_cursor_read_double_partial_array+0x5d4>
    a064:	sub	r0, r5, #1
    a068:	cmp	r0, #0
    a06c:	blt	a238 <coda_cursor_read_double_partial_array+0x530>
    a070:	add	r3, r4, r0, lsl #3
    a074:	add	ip, r4, r0, lsl #1
    a078:	ldrh	r2, [ip]
    a07c:	vmov	s10, r2
    a080:	vcvt.f64.u32	d5, s10
    a084:	vstr	d5, [r3]
    a088:	sub	r0, r0, #1
    a08c:	b	a068 <coda_cursor_read_double_partial_array+0x360>
    a090:	mov	r3, r4
    a094:	mov	r2, r5
    a098:	mov	r1, r6
    a09c:	mov	r0, r7
    a0a0:	bl	3320 <read_int32_partial_array>
    a0a4:	cmp	r0, #0
    a0a8:	beq	a0b4 <coda_cursor_read_double_partial_array+0x3ac>
    a0ac:	mvn	r0, #0
    a0b0:	b	a2dc <coda_cursor_read_double_partial_array+0x5d4>
    a0b4:	sub	r3, r5, #1
    a0b8:	cmp	r3, #0
    a0bc:	blt	a238 <coda_cursor_read_double_partial_array+0x530>
    a0c0:	add	r1, r4, r3, lsl #3
    a0c4:	ldr	r2, [r4, r3, lsl #2]
    a0c8:	vmov	s10, r2
    a0cc:	vcvt.f64.s32	d5, s10
    a0d0:	vstr	d5, [r1]
    a0d4:	sub	r3, r3, #1
    a0d8:	b	a0b8 <coda_cursor_read_double_partial_array+0x3b0>
    a0dc:	mov	r3, r4
    a0e0:	mov	r2, r5
    a0e4:	mov	r1, r6
    a0e8:	mov	r0, r7
    a0ec:	bl	342c <read_uint32_partial_array>
    a0f0:	cmp	r0, #0
    a0f4:	beq	a100 <coda_cursor_read_double_partial_array+0x3f8>
    a0f8:	mvn	r0, #0
    a0fc:	b	a2dc <coda_cursor_read_double_partial_array+0x5d4>
    a100:	sub	r1, r5, #1
    a104:	cmp	r1, #0
    a108:	blt	a238 <coda_cursor_read_double_partial_array+0x530>
    a10c:	add	ip, r4, r1, lsl #3
    a110:	ldr	r0, [r4, r1, lsl #2]
    a114:	vmov	s0, r0
    a118:	vcvt.f64.u32	d0, s0
    a11c:	vstr	d0, [ip]
    a120:	sub	r1, r1, #1
    a124:	b	a104 <coda_cursor_read_double_partial_array+0x3fc>
    a128:	mov	r3, r4
    a12c:	mov	r2, r5
    a130:	mov	r1, r6
    a134:	mov	r0, r7
    a138:	bl	3524 <read_int64_partial_array>
    a13c:	cmp	r0, #0
    a140:	beq	a14c <coda_cursor_read_double_partial_array+0x444>
    a144:	mvn	r0, #0
    a148:	b	a2dc <coda_cursor_read_double_partial_array+0x5d4>
    a14c:	sub	r6, r5, #1
    a150:	cmp	r6, #0
    a154:	blt	a238 <coda_cursor_read_double_partial_array+0x530>
    a158:	add	r7, r4, r6, lsl #3
    a15c:	add	r2, r4, r6, lsl #3
    a160:	ldr	r0, [r2]
    a164:	ldr	r1, [r2, #4]
    a168:	bl	0 <__compcert_i64_stod>
    a16c:	vstr	d0, [r7]
    a170:	sub	r6, r6, #1
    a174:	b	a150 <coda_cursor_read_double_partial_array+0x448>
    a178:	mov	r3, r4
    a17c:	mov	r2, r5
    a180:	mov	r1, r6
    a184:	mov	r0, r7
    a188:	bl	361c <read_uint64_partial_array>
    a18c:	cmp	r0, #0
    a190:	beq	a19c <coda_cursor_read_double_partial_array+0x494>
    a194:	mvn	r0, #0
    a198:	b	a2dc <coda_cursor_read_double_partial_array+0x5d4>
    a19c:	sub	r6, r5, #1
    a1a0:	cmp	r6, #0
    a1a4:	blt	a238 <coda_cursor_read_double_partial_array+0x530>
    a1a8:	add	r7, r4, r6, lsl #3
    a1ac:	add	r2, r4, r6, lsl #3
    a1b0:	ldr	r0, [r2]
    a1b4:	ldr	r1, [r2, #4]
    a1b8:	bl	0 <__compcert_i64_utod>
    a1bc:	vstr	d0, [r7]
    a1c0:	sub	r6, r6, #1
    a1c4:	b	a1a0 <coda_cursor_read_double_partial_array+0x498>
    a1c8:	mov	r3, r4
    a1cc:	mov	r2, r5
    a1d0:	mov	r1, r6
    a1d4:	mov	r0, r7
    a1d8:	bl	3708 <read_float_partial_array>
    a1dc:	cmp	r0, #0
    a1e0:	beq	a1ec <coda_cursor_read_double_partial_array+0x4e4>
    a1e4:	mvn	r0, #0
    a1e8:	b	a2dc <coda_cursor_read_double_partial_array+0x5d4>
    a1ec:	sub	r2, r5, #1
    a1f0:	cmp	r2, #0
    a1f4:	blt	a238 <coda_cursor_read_double_partial_array+0x530>
    a1f8:	add	r3, r4, r2, lsl #3
    a1fc:	add	ip, r4, r2, lsl #2
    a200:	vldr	s8, [ip]
    a204:	vcvt.f64.f32	d0, s8
    a208:	vstr	d0, [r3]
    a20c:	sub	r2, r2, #1
    a210:	b	a1f0 <coda_cursor_read_double_partial_array+0x4e8>
    a214:	mov	r3, r4
    a218:	mov	r2, r5
    a21c:	mov	r1, r6
    a220:	mov	r0, r7
    a224:	bl	3828 <read_double_partial_array>
    a228:	cmp	r0, #0
    a22c:	beq	a238 <coda_cursor_read_double_partial_array+0x530>
    a230:	mvn	r0, #0
    a234:	b	a2dc <coda_cursor_read_double_partial_array+0x5d4>
    a238:	ldr	r0, [sp, #48]	; 0x30
    a23c:	cmp	r0, #0
    a240:	beq	a2b8 <coda_cursor_read_double_partial_array+0x5b0>
    a244:	mov	r6, #0
    a248:	cmp	r6, r5
    a24c:	bge	a2b8 <coda_cursor_read_double_partial_array+0x5b0>
    a250:	add	r2, r4, r6, lsl #3
    a254:	vldr	d5, [r2]
    a258:	ldr	ip, [sp, #48]	; 0x30
    a25c:	vldr	d3, [ip, #24]
    a260:	vcmp.f64	d5, d3
    a264:	vmrs	APSR_nzcv, fpscr
    a268:	beq	a2a4 <coda_cursor_read_double_partial_array+0x59c>
    a26c:	add	ip, r4, r6, lsl #3
    a270:	add	r0, r4, r6, lsl #3
    a274:	vldr	d1, [r0]
    a278:	ldr	r1, [sp, #48]	; 0x30
    a27c:	vldr	d3, [r1]
    a280:	vmul.f64	d6, d1, d3
    a284:	ldr	r0, [sp, #48]	; 0x30
    a288:	vldr	d2, [r0, #8]
    a28c:	vdiv.f64	d0, d6, d2
    a290:	ldr	r1, [sp, #48]	; 0x30
    a294:	vldr	d2, [r1, #16]
    a298:	vadd.f64	d2, d0, d2
    a29c:	vstr	d2, [ip]
    a2a0:	b	a2b0 <coda_cursor_read_double_partial_array+0x5a8>
    a2a4:	bl	0 <coda_NaN>
    a2a8:	add	r2, r4, r6, lsl #3
    a2ac:	vstr	d0, [r2]
    a2b0:	add	r6, r6, #1
    a2b4:	b	a248 <coda_cursor_read_double_partial_array+0x540>
    a2b8:	mov	r0, #0
    a2bc:	b	a2dc <coda_cursor_read_double_partial_array+0x5d4>
    a2c0:	ldr	r0, [sp, #44]	; 0x2c
    a2c4:	bl	0 <coda_type_get_native_type_name>
    a2c8:	mov	r2, r0
    a2cc:	mvn	r0, #104	; 0x68
    a2d0:	ldr	r1, [pc, #40]	; a300 <coda_cursor_read_double_partial_array+0x5f8>
    a2d4:	bl	0 <coda_set_error>
    a2d8:	mvn	r0, #0
    a2dc:	ldr	r4, [sp, #16]
    a2e0:	ldr	r5, [sp, #20]
    a2e4:	ldr	r6, [sp, #24]
    a2e8:	ldr	r7, [sp, #28]
    a2ec:	ldr	r8, [sp, #32]
    a2f0:	ldr	lr, [sp, #8]
    a2f4:	add	sp, sp, #56	; 0x38
    a2f8:	bx	lr
    a2fc:	.word	0x0000037f
    a300:	.word	0x000003f8
    a304:	.word	0x000002bc
    a308:	.word	0x00000160
    a30c:	.word	0x00000453
    a310:	.word	0x0000022b
    a314:	.word	0x00000000
    a318:	.word	0x0000005b

0000a31c <coda_cursor_read_char_partial_array>:
    a31c:	mov	ip, sp
    a320:	sub	sp, sp, #48	; 0x30
    a324:	str	ip, [sp, #4]
    a328:	str	lr, [sp, #8]
    a32c:	str	r4, [sp, #16]
    a330:	str	r5, [sp, #20]
    a334:	str	r6, [sp, #24]
    a338:	str	r7, [sp, #28]
    a33c:	str	r8, [sp, #32]
    a340:	mov	r5, r3
    a344:	mov	r6, r2
    a348:	mov	r7, r1
    a34c:	mov	r8, r0
    a350:	cmp	r8, #0
    a354:	beq	a36c <coda_cursor_read_char_partial_array+0x50>
    a358:	ldr	r1, [r8, #4]
    a35c:	cmp	r1, #0
    a360:	movle	ip, #1
    a364:	movgt	ip, #0
    a368:	b	a370 <coda_cursor_read_char_partial_array+0x54>
    a36c:	mov	ip, #1
    a370:	cmp	ip, #0
    a374:	bne	a39c <coda_cursor_read_char_partial_array+0x80>
    a378:	ldr	r2, [r8, #4]
    a37c:	lsl	r3, r2, #4
    a380:	add	ip, r8, r3
    a384:	sub	lr, ip, #4096	; 0x1000
    a388:	ldr	r2, [lr, #4088]	; 0xff8
    a38c:	cmp	r2, #0
    a390:	moveq	r0, #1
    a394:	movne	r0, #0
    a398:	b	a3a0 <coda_cursor_read_char_partial_array+0x84>
    a39c:	mov	r0, #1
    a3a0:	cmp	r0, #0
    a3a4:	beq	a3c4 <coda_cursor_read_char_partial_array+0xa8>
    a3a8:	mvn	r0, #99	; 0x63
    a3ac:	ldr	r1, [pc, #508]	; a5b0 <coda_cursor_read_char_partial_array+0x294>
    a3b0:	ldr	r2, [pc, #500]	; a5ac <coda_cursor_read_char_partial_array+0x290>
    a3b4:	movw	r3, #5542	; 0x15a6
    a3b8:	bl	0 <coda_set_error>
    a3bc:	mvn	r0, #0
    a3c0:	b	a580 <coda_cursor_read_char_partial_array+0x264>
    a3c4:	cmp	r5, #0
    a3c8:	bne	a3e8 <coda_cursor_read_char_partial_array+0xcc>
    a3cc:	mvn	r0, #99	; 0x63
    a3d0:	ldr	r1, [pc, #484]	; a5bc <coda_cursor_read_char_partial_array+0x2a0>
    a3d4:	ldr	r2, [pc, #464]	; a5ac <coda_cursor_read_char_partial_array+0x290>
    a3d8:	movw	r3, #5547	; 0x15ab
    a3dc:	bl	0 <coda_set_error>
    a3e0:	mvn	r0, #0
    a3e4:	b	a580 <coda_cursor_read_char_partial_array+0x264>
    a3e8:	ldr	r3, [r8, #4]
    a3ec:	lsl	r0, r3, #4
    a3f0:	add	r3, r8, r0
    a3f4:	sub	lr, r3, #4096	; 0x1000
    a3f8:	ldr	r3, [lr, #4088]	; 0xff8
    a3fc:	ldr	r0, [r3]
    a400:	cmp	r0, #100	; 0x64
    a404:	blt	a424 <coda_cursor_read_char_partial_array+0x108>
    a408:	ldr	ip, [r8, #4]
    a40c:	lsl	r0, ip, #4
    a410:	add	r2, r8, r0
    a414:	sub	lr, r2, #4096	; 0x1000
    a418:	ldr	r2, [lr, #4088]	; 0xff8
    a41c:	ldr	r4, [r2, #4]
    a420:	b	a438 <coda_cursor_read_char_partial_array+0x11c>
    a424:	ldr	r0, [r8, #4]
    a428:	lsl	r2, r0, #4
    a42c:	add	ip, r8, r2
    a430:	sub	lr, ip, #4096	; 0x1000
    a434:	ldr	r4, [lr, #4088]	; 0xff8
    a438:	ldr	r1, [r4, #8]
    a43c:	cmp	r1, #1
    a440:	beq	a46c <coda_cursor_read_char_partial_array+0x150>
    a444:	ldr	r0, [r4, #8]
    a448:	bl	0 <coda_type_get_class_name>
    a44c:	mvn	r2, #104	; 0x68
    a450:	ldr	r1, [pc, #332]	; a5a4 <coda_cursor_read_char_partial_array+0x288>
    a454:	mov	r3, r0
    a458:	mov	r0, r2
    a45c:	mov	r2, r3
    a460:	bl	0 <coda_set_error>
    a464:	mvn	r0, #0
    a468:	b	a580 <coda_cursor_read_char_partial_array+0x264>
    a46c:	ldr	r0, [pc, #320]	; a5b4 <coda_cursor_read_char_partial_array+0x298>
    a470:	ldr	r2, [r0]
    a474:	cmp	r2, #0
    a478:	beq	a510 <coda_cursor_read_char_partial_array+0x1f4>
    a47c:	add	r1, sp, #44	; 0x2c
    a480:	mov	r0, r8
    a484:	bl	0 <coda_cursor_get_num_elements>
    a488:	cmp	r0, #0
    a48c:	beq	a498 <coda_cursor_read_char_partial_array+0x17c>
    a490:	mvn	r0, #0
    a494:	b	a580 <coda_cursor_read_char_partial_array+0x264>
    a498:	cmp	r7, #0
    a49c:	blt	a4b4 <coda_cursor_read_char_partial_array+0x198>
    a4a0:	ldr	ip, [sp, #44]	; 0x2c
    a4a4:	cmp	r7, ip
    a4a8:	movge	r1, #1
    a4ac:	movlt	r1, #0
    a4b0:	b	a4b8 <coda_cursor_read_char_partial_array+0x19c>
    a4b4:	mov	r1, #1
    a4b8:	cmp	r1, #0
    a4bc:	beq	a4dc <coda_cursor_read_char_partial_array+0x1c0>
    a4c0:	mvn	r0, #106	; 0x6a
    a4c4:	ldr	r1, [pc, #212]	; a5a0 <coda_cursor_read_char_partial_array+0x284>
    a4c8:	ldr	r3, [sp, #44]	; 0x2c
    a4cc:	mov	r2, r7
    a4d0:	bl	0 <coda_set_error>
    a4d4:	mvn	r0, #0
    a4d8:	b	a580 <coda_cursor_read_char_partial_array+0x264>
    a4dc:	add	r1, r7, r6
    a4e0:	ldr	r2, [sp, #44]	; 0x2c
    a4e4:	cmp	r1, r2
    a4e8:	ble	a510 <coda_cursor_read_char_partial_array+0x1f4>
    a4ec:	mvn	r0, #106	; 0x6a
    a4f0:	ldr	r1, [pc, #176]	; a5a8 <coda_cursor_read_char_partial_array+0x28c>
    a4f4:	ldr	r3, [sp, #44]	; 0x2c
    a4f8:	str	r3, [sp]
    a4fc:	mov	r3, r6
    a500:	mov	r2, r7
    a504:	bl	0 <coda_set_error>
    a508:	mvn	r0, #0
    a50c:	b	a580 <coda_cursor_read_char_partial_array+0x264>
    a510:	add	r1, sp, #40	; 0x28
    a514:	mov	r0, r4
    a518:	bl	ae0 <get_array_element_read_type>
    a51c:	cmp	r0, #0
    a520:	beq	a52c <coda_cursor_read_char_partial_array+0x210>
    a524:	mvn	r0, #0
    a528:	b	a580 <coda_cursor_read_char_partial_array+0x264>
    a52c:	ldr	r1, [sp, #40]	; 0x28
    a530:	cmp	r1, #10
    a534:	bne	a564 <coda_cursor_read_char_partial_array+0x248>
    a538:	mov	r3, r5
    a53c:	mov	r2, r6
    a540:	mov	r1, r7
    a544:	mov	r0, r8
    a548:	bl	39c8 <read_char_partial_array>
    a54c:	cmp	r0, #0
    a550:	beq	a55c <coda_cursor_read_char_partial_array+0x240>
    a554:	mvn	r0, #0
    a558:	b	a580 <coda_cursor_read_char_partial_array+0x264>
    a55c:	mov	r0, #0
    a560:	b	a580 <coda_cursor_read_char_partial_array+0x264>
    a564:	ldr	r0, [sp, #40]	; 0x28
    a568:	bl	0 <coda_type_get_native_type_name>
    a56c:	mov	r2, r0
    a570:	mvn	r0, #104	; 0x68
    a574:	ldr	r1, [pc, #60]	; a5b8 <coda_cursor_read_char_partial_array+0x29c>
    a578:	bl	0 <coda_set_error>
    a57c:	mvn	r0, #0
    a580:	ldr	r4, [sp, #16]
    a584:	ldr	r5, [sp, #20]
    a588:	ldr	r6, [sp, #24]
    a58c:	ldr	r7, [sp, #28]
    a590:	ldr	r8, [sp, #32]
    a594:	ldr	lr, [sp, #8]
    a598:	add	sp, sp, #48	; 0x30
    a59c:	bx	lr
    a5a0:	.word	0x0000037f
    a5a4:	.word	0x000002bc
    a5a8:	.word	0x00000160
    a5ac:	.word	0x00000453
    a5b0:	.word	0x0000022b
    a5b4:	.word	0x00000000
    a5b8:	.word	0x00000538
    a5bc:	.word	0x0000005b

0000a5c0 <coda_cursor_read_complex_double_pair>:
    a5c0:	mov	ip, sp
    a5c4:	sub	sp, sp, #8
    a5c8:	str	ip, [sp]
    a5cc:	str	lr, [sp, #4]
    a5d0:	cmp	r0, #0
    a5d4:	beq	a5ec <coda_cursor_read_complex_double_pair+0x2c>
    a5d8:	ldr	ip, [r0, #4]
    a5dc:	cmp	ip, #0
    a5e0:	movle	r2, #1
    a5e4:	movgt	r2, #0
    a5e8:	b	a5f0 <coda_cursor_read_complex_double_pair+0x30>
    a5ec:	mov	r2, #1
    a5f0:	cmp	r2, #0
    a5f4:	bne	a61c <coda_cursor_read_complex_double_pair+0x5c>
    a5f8:	ldr	r2, [r0, #4]
    a5fc:	lsl	r2, r2, #4
    a600:	add	r3, r0, r2
    a604:	sub	lr, r3, #4096	; 0x1000
    a608:	ldr	r3, [lr, #4088]	; 0xff8
    a60c:	cmp	r3, #0
    a610:	moveq	r2, #1
    a614:	movne	r2, #0
    a618:	b	a620 <coda_cursor_read_complex_double_pair+0x60>
    a61c:	mov	r2, #1
    a620:	cmp	r2, #0
    a624:	beq	a644 <coda_cursor_read_complex_double_pair+0x84>
    a628:	mvn	r0, #99	; 0x63
    a62c:	ldr	r1, [pc, #72]	; a67c <coda_cursor_read_complex_double_pair+0xbc>
    a630:	ldr	r2, [pc, #64]	; a678 <coda_cursor_read_complex_double_pair+0xb8>
    a634:	movw	r3, #5617	; 0x15f1
    a638:	bl	0 <coda_set_error>
    a63c:	mvn	r0, #0
    a640:	b	a66c <coda_cursor_read_complex_double_pair+0xac>
    a644:	cmp	r1, #0
    a648:	bne	a668 <coda_cursor_read_complex_double_pair+0xa8>
    a64c:	mvn	r0, #99	; 0x63
    a650:	ldr	r1, [pc, #40]	; a680 <coda_cursor_read_complex_double_pair+0xc0>
    a654:	ldr	r2, [pc, #28]	; a678 <coda_cursor_read_complex_double_pair+0xb8>
    a658:	movw	r3, #5622	; 0x15f6
    a65c:	bl	0 <coda_set_error>
    a660:	mvn	r0, #0
    a664:	b	a66c <coda_cursor_read_complex_double_pair+0xac>
    a668:	bl	f3c <read_double_pair>
    a66c:	ldr	lr, [sp, #4]
    a670:	add	sp, sp, #8
    a674:	bx	lr
    a678:	.word	0x00000453
    a67c:	.word	0x0000022b
    a680:	.word	0x0000005b

0000a684 <coda_cursor_read_complex_double_pairs_array>:
    a684:	mov	ip, sp
    a688:	sub	sp, sp, #16
    a68c:	str	ip, [sp, #4]
    a690:	str	lr, [sp, #8]
    a694:	cmp	r0, #0
    a698:	beq	a6b0 <coda_cursor_read_complex_double_pairs_array+0x2c>
    a69c:	ldr	r3, [r0, #4]
    a6a0:	cmp	r3, #0
    a6a4:	movle	r3, #1
    a6a8:	movgt	r3, #0
    a6ac:	b	a6b4 <coda_cursor_read_complex_double_pairs_array+0x30>
    a6b0:	mov	r3, #1
    a6b4:	cmp	r3, #0
    a6b8:	bne	a6e0 <coda_cursor_read_complex_double_pairs_array+0x5c>
    a6bc:	ldr	ip, [r0, #4]
    a6c0:	lsl	ip, ip, #4
    a6c4:	add	r3, r0, ip
    a6c8:	sub	lr, r3, #4096	; 0x1000
    a6cc:	ldr	r3, [lr, #4088]	; 0xff8
    a6d0:	cmp	r3, #0
    a6d4:	moveq	r3, #1
    a6d8:	movne	r3, #0
    a6dc:	b	a6e4 <coda_cursor_read_complex_double_pairs_array+0x60>
    a6e0:	mov	r3, #1
    a6e4:	cmp	r3, #0
    a6e8:	beq	a708 <coda_cursor_read_complex_double_pairs_array+0x84>
    a6ec:	mvn	r0, #99	; 0x63
    a6f0:	ldr	r1, [pc, #224]	; a7d8 <coda_cursor_read_complex_double_pairs_array+0x154>
    a6f4:	ldr	r2, [pc, #216]	; a7d4 <coda_cursor_read_complex_double_pairs_array+0x150>
    a6f8:	movw	r3, #5649	; 0x1611
    a6fc:	bl	0 <coda_set_error>
    a700:	mvn	r0, #0
    a704:	b	a7c0 <coda_cursor_read_complex_double_pairs_array+0x13c>
    a708:	cmp	r1, #0
    a70c:	bne	a72c <coda_cursor_read_complex_double_pairs_array+0xa8>
    a710:	mvn	r0, #99	; 0x63
    a714:	ldr	r1, [pc, #192]	; a7dc <coda_cursor_read_complex_double_pairs_array+0x158>
    a718:	ldr	r2, [pc, #180]	; a7d4 <coda_cursor_read_complex_double_pairs_array+0x150>
    a71c:	movw	r3, #5654	; 0x1616
    a720:	bl	0 <coda_set_error>
    a724:	mvn	r0, #0
    a728:	b	a7c0 <coda_cursor_read_complex_double_pairs_array+0x13c>
    a72c:	ldr	ip, [r0, #4]
    a730:	lsl	r3, ip, #4
    a734:	add	r3, r0, r3
    a738:	sub	lr, r3, #4096	; 0x1000
    a73c:	ldr	r3, [lr, #4088]	; 0xff8
    a740:	ldr	r3, [r3]
    a744:	cmp	r3, #100	; 0x64
    a748:	blt	a768 <coda_cursor_read_complex_double_pairs_array+0xe4>
    a74c:	ldr	r3, [r0, #4]
    a750:	lsl	r3, r3, #4
    a754:	add	r3, r0, r3
    a758:	sub	lr, r3, #4096	; 0x1000
    a75c:	ldr	r3, [lr, #4088]	; 0xff8
    a760:	ldr	r3, [r3, #4]
    a764:	b	a77c <coda_cursor_read_complex_double_pairs_array+0xf8>
    a768:	ldr	r3, [r0, #4]
    a76c:	lsl	r3, r3, #4
    a770:	add	r3, r0, r3
    a774:	sub	lr, r3, #4096	; 0x1000
    a778:	ldr	r3, [lr, #4088]	; 0xff8
    a77c:	ldr	ip, [r3, #8]
    a780:	cmp	ip, #1
    a784:	beq	a7a8 <coda_cursor_read_complex_double_pairs_array+0x124>
    a788:	ldr	r0, [r3, #8]
    a78c:	bl	0 <coda_type_get_class_name>
    a790:	mov	r2, r0
    a794:	mvn	r0, #104	; 0x68
    a798:	ldr	r1, [pc, #44]	; a7cc <coda_cursor_read_complex_double_pairs_array+0x148>
    a79c:	bl	0 <coda_set_error>
    a7a0:	mvn	r0, #0
    a7a4:	b	a7c0 <coda_cursor_read_complex_double_pairs_array+0x13c>
    a7a8:	ldr	ip, [pc, #32]	; a7d0 <coda_cursor_read_complex_double_pairs_array+0x14c>
    a7ac:	mov	r3, #16
    a7b0:	str	r2, [sp]
    a7b4:	mov	r2, r1
    a7b8:	mov	r1, ip
    a7bc:	bl	0 <read_array>
    a7c0:	ldr	lr, [sp, #8]
    a7c4:	add	sp, sp, #16
    a7c8:	bx	lr
    a7cc:	.word	0x000002bc
    a7d0:	.word	0x00000000
    a7d4:	.word	0x00000453
    a7d8:	.word	0x0000022b
    a7dc:	.word	0x0000005b

0000a7e0 <coda_cursor_read_complex_double_split>:
    a7e0:	mov	ip, sp
    a7e4:	sub	sp, sp, #32
    a7e8:	str	ip, [sp]
    a7ec:	str	lr, [sp, #4]
    a7f0:	str	r4, [sp, #8]
    a7f4:	str	r5, [sp, #12]
    a7f8:	mov	r4, r2
    a7fc:	mov	r5, r1
    a800:	add	r1, sp, #16
    a804:	bl	a5c0 <coda_cursor_read_complex_double_pair>
    a808:	cmp	r0, #0
    a80c:	beq	a818 <coda_cursor_read_complex_double_split+0x38>
    a810:	mvn	r0, #0
    a814:	b	a82c <coda_cursor_read_complex_double_split+0x4c>
    a818:	vldr	d3, [sp, #16]
    a81c:	vstr	d3, [r5]
    a820:	vldr	d2, [sp, #24]
    a824:	vstr	d2, [r4]
    a828:	mov	r0, #0
    a82c:	ldr	r4, [sp, #8]
    a830:	ldr	r5, [sp, #12]
    a834:	ldr	lr, [sp, #4]
    a838:	add	sp, sp, #32
    a83c:	bx	lr

0000a840 <coda_cursor_read_complex_double_split_array>:
    a840:	mov	ip, sp
    a844:	sub	sp, sp, #24
    a848:	str	ip, [sp, #8]
    a84c:	str	lr, [sp, #12]
    a850:	str	r4, [sp, #16]
    a854:	str	r5, [sp, #20]
    a858:	mov	ip, r3
    a85c:	mov	r3, r2
    a860:	mov	r2, r1
    a864:	cmp	r0, #0
    a868:	beq	a880 <coda_cursor_read_complex_double_split_array+0x40>
    a86c:	ldr	r1, [r0, #4]
    a870:	cmp	r1, #0
    a874:	movle	r1, #1
    a878:	movgt	r1, #0
    a87c:	b	a884 <coda_cursor_read_complex_double_split_array+0x44>
    a880:	mov	r1, #1
    a884:	cmp	r1, #0
    a888:	bne	a8b0 <coda_cursor_read_complex_double_split_array+0x70>
    a88c:	ldr	r1, [r0, #4]
    a890:	lsl	r1, r1, #4
    a894:	add	r1, r0, r1
    a898:	sub	lr, r1, #4096	; 0x1000
    a89c:	ldr	r1, [lr, #4088]	; 0xff8
    a8a0:	cmp	r1, #0
    a8a4:	moveq	r1, #1
    a8a8:	movne	r1, #0
    a8ac:	b	a8b4 <coda_cursor_read_complex_double_split_array+0x74>
    a8b0:	mov	r1, #1
    a8b4:	cmp	r1, #0
    a8b8:	beq	a8d8 <coda_cursor_read_complex_double_split_array+0x98>
    a8bc:	mvn	r0, #99	; 0x63
    a8c0:	ldr	r1, [pc, #272]	; a9d8 <coda_cursor_read_complex_double_split_array+0x198>
    a8c4:	ldr	r2, [pc, #264]	; a9d4 <coda_cursor_read_complex_double_split_array+0x194>
    a8c8:	movw	r3, #5713	; 0x1651
    a8cc:	bl	0 <coda_set_error>
    a8d0:	mvn	r0, #0
    a8d4:	b	a9b0 <coda_cursor_read_complex_double_split_array+0x170>
    a8d8:	cmp	r2, #0
    a8dc:	bne	a8fc <coda_cursor_read_complex_double_split_array+0xbc>
    a8e0:	mvn	r0, #99	; 0x63
    a8e4:	ldr	r1, [pc, #228]	; a9d0 <coda_cursor_read_complex_double_split_array+0x190>
    a8e8:	ldr	r2, [pc, #228]	; a9d4 <coda_cursor_read_complex_double_split_array+0x194>
    a8ec:	movw	r3, #5718	; 0x1656
    a8f0:	bl	0 <coda_set_error>
    a8f4:	mvn	r0, #0
    a8f8:	b	a9b0 <coda_cursor_read_complex_double_split_array+0x170>
    a8fc:	cmp	r3, #0
    a900:	bne	a920 <coda_cursor_read_complex_double_split_array+0xe0>
    a904:	mvn	r0, #99	; 0x63
    a908:	ldr	r1, [pc, #180]	; a9c4 <coda_cursor_read_complex_double_split_array+0x184>
    a90c:	ldr	r2, [pc, #192]	; a9d4 <coda_cursor_read_complex_double_split_array+0x194>
    a910:	movw	r3, #5723	; 0x165b
    a914:	bl	0 <coda_set_error>
    a918:	mvn	r0, #0
    a91c:	b	a9b0 <coda_cursor_read_complex_double_split_array+0x170>
    a920:	ldr	r1, [r0, #4]
    a924:	lsl	r1, r1, #4
    a928:	add	r1, r0, r1
    a92c:	sub	lr, r1, #4096	; 0x1000
    a930:	ldr	r1, [lr, #4088]	; 0xff8
    a934:	ldr	r1, [r1]
    a938:	cmp	r1, #100	; 0x64
    a93c:	blt	a95c <coda_cursor_read_complex_double_split_array+0x11c>
    a940:	ldr	r1, [r0, #4]
    a944:	lsl	r1, r1, #4
    a948:	add	r1, r0, r1
    a94c:	sub	lr, r1, #4096	; 0x1000
    a950:	ldr	r1, [lr, #4088]	; 0xff8
    a954:	ldr	r1, [r1, #4]
    a958:	b	a970 <coda_cursor_read_complex_double_split_array+0x130>
    a95c:	ldr	r1, [r0, #4]
    a960:	lsl	r1, r1, #4
    a964:	add	r1, r0, r1
    a968:	sub	lr, r1, #4096	; 0x1000
    a96c:	ldr	r1, [lr, #4088]	; 0xff8
    a970:	ldr	r4, [r1, #8]
    a974:	cmp	r4, #1
    a978:	beq	a99c <coda_cursor_read_complex_double_split_array+0x15c>
    a97c:	ldr	r0, [r1, #8]
    a980:	bl	0 <coda_type_get_class_name>
    a984:	mov	r2, r0
    a988:	mvn	r0, #104	; 0x68
    a98c:	ldr	r1, [pc, #52]	; a9c8 <coda_cursor_read_complex_double_split_array+0x188>
    a990:	bl	0 <coda_set_error>
    a994:	mvn	r0, #0
    a998:	b	a9b0 <coda_cursor_read_complex_double_split_array+0x170>
    a99c:	ldr	r1, [pc, #40]	; a9cc <coda_cursor_read_complex_double_split_array+0x18c>
    a9a0:	mov	r5, #8
    a9a4:	str	ip, [sp, #4]
    a9a8:	str	r5, [sp]
    a9ac:	bl	c20 <read_split_array>
    a9b0:	ldr	r4, [sp, #16]
    a9b4:	ldr	r5, [sp, #20]
    a9b8:	ldr	lr, [sp, #12]
    a9bc:	add	sp, sp, #24
    a9c0:	bx	lr
    a9c4:	.word	0x0000029c
    a9c8:	.word	0x000002bc
    a9cc:	.word	0x00000000
    a9d0:	.word	0x00000518
    a9d4:	.word	0x00000453
    a9d8:	.word	0x0000022b
