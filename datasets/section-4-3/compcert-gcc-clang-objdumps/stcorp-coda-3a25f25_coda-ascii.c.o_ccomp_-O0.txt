
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-ascii.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
   0:	mov	ip, sp
   4:	sub	sp, sp, #112	; 0x70
   8:	str	ip, [sp, #4]
   c:	str	lr, [sp, #8]
  10:	str	r4, [sp, #16]
  14:	str	r5, [sp, #20]
  18:	str	r6, [sp, #24]
  1c:	str	r7, [sp, #28]
  20:	str	r8, [sp, #32]
  24:	str	r9, [sp, #36]	; 0x24
  28:	ldr	r7, [ip, #8]
  2c:	ldr	r9, [ip, #4]
  30:	ldr	r6, [ip]
  34:	mov	r8, r3
  38:	mov	r5, r2
  3c:	mov	r4, r0
  40:	ldr	r1, [r4, #48]	; 0x30
  44:	cmp	r1, #0
  48:	bne	110 <read_bytes+0x110>
  4c:	ldr	r0, [r4, #16]
  50:	cmp	r0, #0
  54:	beq	6c <read_bytes+0x6c>
  58:	ldr	r2, [r4, #16]
  5c:	cmp	r2, #1
  60:	moveq	r0, #1
  64:	movne	r0, #0
  68:	b	70 <read_bytes+0x70>
  6c:	mov	r0, #1
  70:	cmp	r0, #0
  74:	bne	8c <read_bytes+0x8c>
  78:	ldr	r0, [pc, #396]	; 20c <read_bytes+0x20c>
  7c:	ldr	r1, [pc, #400]	; 214 <read_bytes+0x214>
  80:	mov	r2, #83	; 0x53
  84:	ldr	r3, [pc, #400]	; 21c <read_bytes+0x21c>
  88:	bl	0 <__assert_fail>
  8c:	adds	r0, r5, r6
  90:	adc	r3, r8, r9
  94:	ldr	r1, [r4, #8]
  98:	ldr	ip, [r4, #12]
  9c:	cmp	r3, ip
  a0:	bne	b0 <read_bytes+0xb0>
  a4:	cmp	r0, r1
  a8:	bhi	b8 <read_bytes+0xb8>
  ac:	b	cc <read_bytes+0xcc>
  b0:	cmp	r3, ip
  b4:	bls	cc <read_bytes+0xcc>
  b8:	mvn	r0, #300	; 0x12c
  bc:	ldr	r1, [pc, #340]	; 218 <read_bytes+0x218>
  c0:	bl	0 <coda_set_error>
  c4:	mvn	r0, #0
  c8:	b	1e8 <read_bytes+0x1e8>
  cc:	ldr	r0, [r4, #56]	; 0x38
  d0:	mov	r2, r6
  d4:	mov	r3, r5
  d8:	mov	r1, r7
  dc:	bl	0 <pread>
  e0:	cmp	r0, #0
  e4:	bge	1e4 <read_bytes+0x1e4>
  e8:	bl	0 <__errno_location>
  ec:	ldr	r0, [r0]
  f0:	bl	0 <strerror>
  f4:	mvn	r3, #21
  f8:	ldr	r1, [pc, #288]	; 220 <read_bytes+0x220>
  fc:	mov	r2, r0
 100:	mov	r0, r3
 104:	bl	0 <coda_set_error>
 108:	mvn	r0, #0
 10c:	b	1e8 <read_bytes+0x1e8>
 110:	adds	ip, r5, r6
 114:	adc	r1, r8, r9
 118:	ldr	r2, [r4, #40]	; 0x28
 11c:	ldr	r3, [r4, #44]	; 0x2c
 120:	cmp	r1, r3
 124:	bne	134 <read_bytes+0x134>
 128:	cmp	ip, r2
 12c:	bhi	13c <read_bytes+0x13c>
 130:	b	1d0 <read_bytes+0x1d0>
 134:	cmp	r1, r3
 138:	bls	1d0 <read_bytes+0x1d0>
 13c:	ldr	r1, [r4, #16]
 140:	cmp	r1, #0
 144:	beq	15c <read_bytes+0x15c>
 148:	ldr	r2, [r4, #16]
 14c:	cmp	r2, #1
 150:	moveq	ip, #1
 154:	movne	ip, #0
 158:	b	160 <read_bytes+0x160>
 15c:	mov	ip, #1
 160:	cmp	ip, #0
 164:	bne	1bc <read_bytes+0x1bc>
 168:	add	r2, sp, #64	; 0x40
 16c:	mov	r1, r9
 170:	mov	r0, r6
 174:	bl	0 <coda_str64>
 178:	add	r2, sp, #88	; 0x58
 17c:	mov	r1, r8
 180:	mov	r0, r5
 184:	bl	0 <coda_str64>
 188:	ldr	r0, [r4, #40]	; 0x28
 18c:	ldr	r1, [r4, #44]	; 0x2c
 190:	add	r2, sp, #40	; 0x28
 194:	bl	0 <coda_str64>
 198:	mvn	r0, #300	; 0x12c
 19c:	ldr	r1, [pc, #108]	; 210 <read_bytes+0x210>
 1a0:	add	r2, sp, #64	; 0x40
 1a4:	add	r3, sp, #88	; 0x58
 1a8:	add	r4, sp, #40	; 0x28
 1ac:	str	r4, [sp]
 1b0:	bl	0 <coda_set_error>
 1b4:	mvn	r0, #0
 1b8:	b	1e8 <read_bytes+0x1e8>
 1bc:	mvn	r0, #300	; 0x12c
 1c0:	ldr	r1, [pc, #80]	; 218 <read_bytes+0x218>
 1c4:	bl	0 <coda_set_error>
 1c8:	mvn	r0, #0
 1cc:	b	1e8 <read_bytes+0x1e8>
 1d0:	ldr	r2, [r4, #48]	; 0x30
 1d4:	add	r1, r2, r5
 1d8:	mov	r2, r6
 1dc:	mov	r0, r7
 1e0:	bl	0 <memcpy>
 1e4:	mov	r0, #0
 1e8:	ldr	r4, [sp, #16]
 1ec:	ldr	r5, [sp, #20]
 1f0:	ldr	r6, [sp, #24]
 1f4:	ldr	r7, [sp, #28]
 1f8:	ldr	r8, [sp, #32]
 1fc:	ldr	r9, [sp, #36]	; 0x24
 200:	ldr	lr, [sp, #8]
 204:	add	sp, sp, #112	; 0x70
 208:	bx	lr
 20c:	.word	0x00000296
 210:	.word	0x0000012e
 214:	.word	0x000000a7
 218:	.word	0x0000026c
 21c:	.word	0x00000323
 220:	.word	0x00000089

00000224 <coda_ascii_reopen_with_definition>:
 224:	mov	ip, sp
 228:	sub	sp, sp, #32
 22c:	str	ip, [sp, #4]
 230:	str	lr, [sp, #8]
 234:	str	r4, [sp, #16]
 238:	str	r5, [sp, #20]
 23c:	str	r6, [sp, #24]
 240:	mov	r6, r1
 244:	mov	r5, r0
 248:	cmp	r6, #0
 24c:	bne	264 <coda_ascii_reopen_with_definition+0x40>
 250:	ldr	r0, [pc, #448]	; 418 <coda_ascii_reopen_with_definition+0x1f4>
 254:	ldr	r1, [pc, #448]	; 41c <coda_ascii_reopen_with_definition+0x1f8>
 258:	mov	r2, #52	; 0x34
 25c:	ldr	r3, [pc, #456]	; 42c <coda_ascii_reopen_with_definition+0x208>
 260:	bl	0 <__assert_fail>
 264:	ldr	r0, [r5]
 268:	ldr	ip, [r0, #16]
 26c:	cmp	ip, #1
 270:	beq	288 <coda_ascii_reopen_with_definition+0x64>
 274:	ldr	r0, [pc, #408]	; 414 <coda_ascii_reopen_with_definition+0x1f0>
 278:	ldr	r1, [pc, #412]	; 41c <coda_ascii_reopen_with_definition+0x1f8>
 27c:	mov	r2, #53	; 0x35
 280:	ldr	r3, [pc, #420]	; 42c <coda_ascii_reopen_with_definition+0x208>
 284:	bl	0 <__assert_fail>
 288:	ldr	r2, [r6]
 28c:	cmp	r2, #0
 290:	beq	2a8 <coda_ascii_reopen_with_definition+0x84>
 294:	ldr	r0, [pc, #388]	; 420 <coda_ascii_reopen_with_definition+0x1fc>
 298:	ldr	r1, [pc, #380]	; 41c <coda_ascii_reopen_with_definition+0x1f8>
 29c:	mov	r2, #54	; 0x36
 2a0:	ldr	r3, [pc, #388]	; 42c <coda_ascii_reopen_with_definition+0x208>
 2a4:	bl	0 <__assert_fail>
 2a8:	mov	r0, #80	; 0x50
 2ac:	bl	0 <malloc>
 2b0:	mov	r4, r0
 2b4:	cmp	r4, #0
 2b8:	bne	2e0 <coda_ascii_reopen_with_definition+0xbc>
 2bc:	mvn	r0, #0
 2c0:	ldr	r1, [pc, #348]	; 424 <coda_ascii_reopen_with_definition+0x200>
 2c4:	mov	r2, #80	; 0x50
 2c8:	ldr	r3, [pc, #332]	; 41c <coda_ascii_reopen_with_definition+0x1f8>
 2cc:	mov	ip, #61	; 0x3d
 2d0:	str	ip, [sp]
 2d4:	bl	0 <coda_set_error>
 2d8:	mvn	r0, #0
 2dc:	b	3fc <coda_ascii_reopen_with_definition+0x1d8>
 2e0:	mov	r2, #0
 2e4:	str	r2, [r4]
 2e8:	ldr	r1, [r5]
 2ec:	ldr	r3, [r1, #8]
 2f0:	ldr	r2, [r1, #12]
 2f4:	str	r3, [r4, #8]
 2f8:	str	r2, [r4, #12]
 2fc:	ldr	r0, [r6]
 300:	str	r0, [r4, #16]
 304:	ldr	r3, [r6, #28]
 308:	str	r3, [r4, #20]
 30c:	str	r6, [r4, #24]
 310:	mov	r3, #0
 314:	str	r3, [r4, #28]
 318:	mov	r0, #0
 31c:	str	r0, [r4, #32]
 320:	ldr	r3, [r5]
 324:	ldr	r2, [r3, #40]	; 0x28
 328:	ldr	r0, [r3, #44]	; 0x2c
 32c:	str	r2, [r4, #40]	; 0x28
 330:	str	r0, [r4, #44]	; 0x2c
 334:	ldr	r2, [r5]
 338:	mov	r1, #0
 33c:	mov	r0, #0
 340:	str	r0, [r2, #40]	; 0x28
 344:	str	r1, [r2, #44]	; 0x2c
 348:	ldr	ip, [r5]
 34c:	ldr	r1, [ip, #48]	; 0x30
 350:	str	r1, [r4, #48]	; 0x30
 354:	ldr	r3, [r5]
 358:	mov	ip, #0
 35c:	str	ip, [r3, #48]	; 0x30
 360:	ldr	ip, [r5]
 364:	ldr	ip, [ip, #52]	; 0x34
 368:	str	ip, [r4, #52]	; 0x34
 36c:	ldr	r2, [r5]
 370:	ldr	r3, [r2, #56]	; 0x38
 374:	str	r3, [r4, #56]	; 0x38
 378:	ldr	r1, [r5]
 37c:	mvn	r0, #0
 380:	str	r0, [r1, #56]	; 0x38
 384:	mov	ip, #0
 388:	str	ip, [r4, #60]	; 0x3c
 38c:	mvn	r1, #0
 390:	str	r1, [r4, #64]	; 0x40
 394:	mov	r0, #0
 398:	str	r0, [r4, #68]	; 0x44
 39c:	mov	r1, #0
 3a0:	str	r1, [r4, #72]	; 0x48
 3a4:	mov	r2, #0
 3a8:	str	r2, [r4, #76]	; 0x4c
 3ac:	ldr	r2, [r5]
 3b0:	ldr	r0, [r2]
 3b4:	bl	0 <strdup>
 3b8:	str	r0, [r4]
 3bc:	ldr	ip, [r4]
 3c0:	cmp	ip, #0
 3c4:	bne	3ec <coda_ascii_reopen_with_definition+0x1c8>
 3c8:	mvn	r0, #0
 3cc:	ldr	r1, [pc, #84]	; 428 <coda_ascii_reopen_with_definition+0x204>
 3d0:	ldr	r2, [pc, #68]	; 41c <coda_ascii_reopen_with_definition+0x1f8>
 3d4:	mov	r3, #97	; 0x61
 3d8:	bl	0 <coda_set_error>
 3dc:	mov	r0, r4
 3e0:	bl	0 <free>
 3e4:	mvn	r0, #0
 3e8:	b	3fc <coda_ascii_reopen_with_definition+0x1d8>
 3ec:	ldr	r0, [r5]
 3f0:	bl	0 <coda_close>
 3f4:	str	r4, [r5]
 3f8:	mov	r0, #0
 3fc:	ldr	r4, [sp, #16]
 400:	ldr	r5, [sp, #20]
 404:	ldr	r6, [sp, #24]
 408:	ldr	lr, [sp, #8]
 40c:	add	sp, sp, #32
 410:	bx	lr
 414:	.word	0x00000060
 418:	.word	0x00000048
 41c:	.word	0x000001db
 420:	.word	0x00000106
 424:	.word	0x00000237
 428:	.word	0x000002e7
 42c:	.word	0x0000032e

00000430 <coda_ascii_close>:
 430:	mov	ip, sp
 434:	sub	sp, sp, #16
 438:	str	ip, [sp]
 43c:	str	lr, [sp, #4]
 440:	str	r4, [sp, #8]
 444:	mov	r4, r0
 448:	mov	r0, r4
 44c:	bl	0 <coda_bin_product_close>
 450:	cmp	r0, #0
 454:	beq	460 <coda_ascii_close+0x30>
 458:	mvn	r0, #0
 45c:	b	4a8 <coda_ascii_close+0x78>
 460:	ldr	r2, [r4]
 464:	cmp	r2, #0
 468:	beq	474 <coda_ascii_close+0x44>
 46c:	ldr	r0, [r4]
 470:	bl	0 <free>
 474:	ldr	r1, [r4, #68]	; 0x44
 478:	cmp	r1, #0
 47c:	beq	488 <coda_ascii_close+0x58>
 480:	ldr	r0, [r4, #68]	; 0x44
 484:	bl	0 <free>
 488:	ldr	r0, [r4, #76]	; 0x4c
 48c:	cmp	r0, #0
 490:	beq	49c <coda_ascii_close+0x6c>
 494:	ldr	r0, [r4, #76]	; 0x4c
 498:	bl	0 <coda_type_release>
 49c:	mov	r0, r4
 4a0:	bl	0 <free>
 4a4:	mov	r0, #0
 4a8:	ldr	r4, [sp, #8]
 4ac:	ldr	lr, [sp, #4]
 4b0:	add	sp, sp, #16
 4b4:	bx	lr

000004b8 <eol_type_to_string>:
 4b8:	mov	ip, sp
 4bc:	sub	sp, sp, #16
 4c0:	str	ip, [sp]
 4c4:	str	lr, [sp, #4]
 4c8:	str	r4, [sp, #8]
 4cc:	cmp	r0, #1
 4d0:	beq	514 <eol_type_to_string+0x5c>
 4d4:	cmp	r0, #2
 4d8:	beq	50c <eol_type_to_string+0x54>
 4dc:	cmp	r0, #3
 4e0:	bne	4ec <eol_type_to_string+0x34>
 4e4:	ldr	r4, [pc, #76]	; 538 <eol_type_to_string+0x80>
 4e8:	b	518 <eol_type_to_string+0x60>
 4ec:	ldr	r0, [pc, #64]	; 534 <eol_type_to_string+0x7c>
 4f0:	ldr	r1, [pc, #56]	; 530 <eol_type_to_string+0x78>
 4f4:	mov	r2, #150	; 0x96
 4f8:	ldr	r3, [pc, #44]	; 52c <eol_type_to_string+0x74>
 4fc:	bl	0 <__assert_fail>
 500:	mov	r0, #1
 504:	bl	0 <exit>
 508:	b	518 <eol_type_to_string+0x60>
 50c:	ldr	r4, [pc, #44]	; 540 <eol_type_to_string+0x88>
 510:	b	518 <eol_type_to_string+0x60>
 514:	ldr	r4, [pc, #32]	; 53c <eol_type_to_string+0x84>
 518:	mov	r0, r4
 51c:	ldr	r4, [sp, #8]
 520:	ldr	lr, [sp, #4]
 524:	add	sp, sp, #16
 528:	bx	lr
 52c:	.word	0x00000350
 530:	.word	0x000001db
 534:	.word	0x00000235
 538:	.word	0x0000005b
 53c:	.word	0x000001d8
 540:	.word	0x000002e4

00000544 <verify_eol_type>:
 544:	mov	ip, sp
 548:	sub	sp, sp, #16
 54c:	str	ip, [sp]
 550:	str	lr, [sp, #4]
 554:	str	r4, [sp, #8]
 558:	str	r5, [sp, #12]
 55c:	mov	r4, r1
 560:	mov	r5, r0
 564:	cmp	r4, #0
 568:	bne	580 <verify_eol_type+0x3c>
 56c:	ldr	r0, [pc, #128]	; 5f4 <verify_eol_type+0xb0>
 570:	ldr	r1, [pc, #128]	; 5f8 <verify_eol_type+0xb4>
 574:	mov	r2, #156	; 0x9c
 578:	ldr	r3, [pc, #128]	; 600 <verify_eol_type+0xbc>
 57c:	bl	0 <__assert_fail>
 580:	ldr	r0, [r5, #60]	; 0x3c
 584:	cmp	r0, #0
 588:	bne	598 <verify_eol_type+0x54>
 58c:	str	r4, [r5, #60]	; 0x3c
 590:	mov	r0, #0
 594:	b	5e0 <verify_eol_type+0x9c>
 598:	ldr	r3, [r5, #60]	; 0x3c
 59c:	cmp	r3, r4
 5a0:	beq	5dc <verify_eol_type+0x98>
 5a4:	mov	r0, r4
 5a8:	bl	4b8 <eol_type_to_string>
 5ac:	mov	r4, r0
 5b0:	ldr	r0, [r5, #60]	; 0x3c
 5b4:	bl	4b8 <eol_type_to_string>
 5b8:	movw	r2, #65236	; 0xfed4
 5bc:	movt	r2, #65535	; 0xffff
 5c0:	ldr	r1, [pc, #52]	; 5fc <verify_eol_type+0xb8>
 5c4:	mov	r3, r0
 5c8:	mov	r0, r2
 5cc:	mov	r2, r4
 5d0:	bl	0 <coda_set_error>
 5d4:	mvn	r0, #0
 5d8:	b	5e0 <verify_eol_type+0x9c>
 5dc:	mov	r0, #0
 5e0:	ldr	r4, [sp, #8]
 5e4:	ldr	r5, [sp, #12]
 5e8:	ldr	lr, [sp, #4]
 5ec:	add	sp, sp, #16
 5f0:	bx	lr
 5f4:	.word	0x000001bd
 5f8:	.word	0x000001db
 5fc:	.word	0x00000169
 600:	.word	0x00000363

00000604 <coda_ascii_init_asciilines>:
 604:	mov	ip, sp
 608:	sub	sp, sp, #80	; 0x50
 60c:	sub	sp, sp, #4096	; 0x1000
 610:	str	ip, [sp, #12]
 614:	str	lr, [sp, #16]
 618:	str	r4, [sp, #36]	; 0x24
 61c:	str	r5, [sp, #40]	; 0x28
 620:	str	r6, [sp, #44]	; 0x2c
 624:	str	r7, [sp, #48]	; 0x30
 628:	str	r8, [sp, #52]	; 0x34
 62c:	str	r9, [sp, #56]	; 0x38
 630:	str	sl, [sp, #60]	; 0x3c
 634:	str	fp, [sp, #64]	; 0x40
 638:	mov	fp, r0
 63c:	mov	r8, #0
 640:	mov	sl, #0
 644:	mov	r2, #0
 648:	mov	r6, #0
 64c:	str	r2, [sp, #24]
 650:	mov	r2, #0
 654:	str	r2, [sp, #28]
 658:	mov	r9, #0
 65c:	ldr	r0, [fp, #64]	; 0x40
 660:	cmn	r0, #1
 664:	beq	67c <coda_ascii_init_asciilines+0x78>
 668:	ldr	r0, [pc, #1244]	; b4c <coda_ascii_init_asciilines+0x548>
 66c:	ldr	r1, [pc, #1236]	; b48 <coda_ascii_init_asciilines+0x544>
 670:	mov	r2, #185	; 0xb9
 674:	ldr	r3, [pc, #1240]	; b54 <coda_ascii_init_asciilines+0x550>
 678:	bl	0 <__assert_fail>
 67c:	ldr	ip, [fp, #52]	; 0x34
 680:	cmp	ip, #0
 684:	bne	6c4 <coda_ascii_init_asciilines+0xc0>
 688:	ldr	r0, [fp, #56]	; 0x38
 68c:	mov	r1, #0
 690:	mov	r2, #0
 694:	bl	0 <lseek>
 698:	cmp	r0, #0
 69c:	bge	6c4 <coda_ascii_init_asciilines+0xc0>
 6a0:	bl	0 <__errno_location>
 6a4:	ldr	r0, [r0]
 6a8:	bl	0 <strerror>
 6ac:	mov	r2, r0
 6b0:	mvn	r0, #21
 6b4:	ldr	r1, [pc, #1180]	; b58 <coda_ascii_init_asciilines+0x554>
 6b8:	bl	0 <coda_set_error>
 6bc:	mvn	r0, #0
 6c0:	b	b1c <coda_ascii_init_asciilines+0x518>
 6c4:	mov	r5, #0
 6c8:	mov	r4, #4096	; 0x1000
 6cc:	ldr	r1, [sp, #24]
 6d0:	adds	ip, r6, r4
 6d4:	adc	r2, r1, r5
 6d8:	ldr	r3, [fp, #8]
 6dc:	ldr	r0, [fp, #12]
 6e0:	cmp	r2, r0
 6e4:	bne	6f4 <coda_ascii_init_asciilines+0xf0>
 6e8:	cmp	ip, r3
 6ec:	bhi	6fc <coda_ascii_init_asciilines+0xf8>
 6f0:	b	710 <coda_ascii_init_asciilines+0x10c>
 6f4:	cmp	r2, r0
 6f8:	ble	710 <coda_ascii_init_asciilines+0x10c>
 6fc:	ldr	r0, [fp, #8]
 700:	ldr	ip, [fp, #12]
 704:	ldr	r3, [sp, #24]
 708:	subs	r4, r0, r6
 70c:	sbc	r5, ip, r3
 710:	mov	r2, r5
 714:	mov	r1, r4
 718:	orr	ip, r2, r1
 71c:	cmp	ip, #0
 720:	beq	adc <coda_ascii_init_asciilines+0x4d8>
 724:	add	r2, sp, #72	; 0x48
 728:	str	r2, [sp, #8]
 72c:	str	r5, [sp, #4]
 730:	str	r4, [sp]
 734:	ldr	r3, [sp, #24]
 738:	mov	r2, r6
 73c:	mov	r0, fp
 740:	bl	0 <read_bytes>
 744:	cmp	r0, #0
 748:	beq	754 <coda_ascii_init_asciilines+0x150>
 74c:	mvn	r0, #0
 750:	b	b1c <coda_ascii_init_asciilines+0x518>
 754:	ldr	ip, [sp, #28]
 758:	cmp	ip, #13
 75c:	bne	774 <coda_ascii_init_asciilines+0x170>
 760:	ldrb	r1, [sp, #72]	; 0x48
 764:	cmp	r1, #10
 768:	movne	r3, #1
 76c:	moveq	r3, #0
 770:	b	778 <coda_ascii_init_asciilines+0x174>
 774:	mov	r3, #0
 778:	cmp	r3, #0
 77c:	beq	7a4 <coda_ascii_init_asciilines+0x1a0>
 780:	mov	r1, #2
 784:	mov	r0, fp
 788:	bl	544 <verify_eol_type>
 78c:	cmp	r0, #0
 790:	beq	7a4 <coda_ascii_init_asciilines+0x1a0>
 794:	mov	r0, sl
 798:	bl	0 <free>
 79c:	mvn	r0, #0
 7a0:	b	b1c <coda_ascii_init_asciilines+0x518>
 7a4:	mov	r7, #0
 7a8:	asr	r0, r7, #31
 7ac:	mov	ip, r7
 7b0:	mov	r2, r5
 7b4:	cmp	r0, r2
 7b8:	bne	7cc <coda_ascii_init_asciilines+0x1c8>
 7bc:	mov	r3, r4
 7c0:	cmp	ip, r3
 7c4:	bcc	7d8 <coda_ascii_init_asciilines+0x1d4>
 7c8:	b	aa8 <coda_ascii_init_asciilines+0x4a4>
 7cc:	mov	r1, r5
 7d0:	cmp	r0, r1
 7d4:	bge	aa8 <coda_ascii_init_asciilines+0x4a4>
 7d8:	cmp	r7, #0
 7dc:	beq	7e8 <coda_ascii_init_asciilines+0x1e4>
 7e0:	mov	r1, #0
 7e4:	b	7f8 <coda_ascii_init_asciilines+0x1f4>
 7e8:	ldr	r2, [sp, #28]
 7ec:	cmp	r2, #13
 7f0:	moveq	r1, #1
 7f4:	movne	r1, #0
 7f8:	cmp	r1, #0
 7fc:	beq	814 <coda_ascii_init_asciilines+0x210>
 800:	ldrb	r0, [sp, #72]	; 0x48
 804:	cmp	r0, #10
 808:	moveq	r0, #1
 80c:	movne	r0, #0
 810:	b	818 <coda_ascii_init_asciilines+0x214>
 814:	mov	r0, #0
 818:	cmp	r0, #0
 81c:	bne	a54 <coda_ascii_init_asciilines+0x450>
 820:	add	r3, sp, #72	; 0x48
 824:	ldrb	ip, [r3, r7]
 828:	cmp	ip, #13
 82c:	beq	848 <coda_ascii_init_asciilines+0x244>
 830:	add	r0, sp, #72	; 0x48
 834:	ldrb	ip, [r0, r7]
 838:	cmp	ip, #10
 83c:	moveq	r2, #1
 840:	movne	r2, #0
 844:	b	84c <coda_ascii_init_asciilines+0x248>
 848:	mov	r2, #1
 84c:	cmp	r2, #0
 850:	bne	8b4 <coda_ascii_init_asciilines+0x2b0>
 854:	mov	r1, r7
 858:	asr	ip, r1, #31
 85c:	ldr	r0, [sp, #24]
 860:	adds	lr, r6, r1
 864:	adc	r3, r0, ip
 868:	mov	r0, lr
 86c:	str	r0, [sp, #32]
 870:	ldr	ip, [fp, #8]
 874:	mov	r2, ip
 878:	ldr	ip, [fp, #12]
 87c:	mov	r1, ip
 880:	mov	ip, #0
 884:	mov	r0, #1
 888:	subs	lr, r2, r0
 88c:	sbc	r0, r1, ip
 890:	mov	ip, lr
 894:	eor	r0, r3, r0
 898:	ldr	r1, [sp, #32]
 89c:	eor	r3, r1, ip
 8a0:	orr	r1, r0, r3
 8a4:	cmp	r1, #0
 8a8:	moveq	r3, #1
 8ac:	movne	r3, #0
 8b0:	b	8b8 <coda_ascii_init_asciilines+0x2b4>
 8b4:	mov	r3, #1
 8b8:	cmp	r3, #0
 8bc:	beq	aa0 <coda_ascii_init_asciilines+0x49c>
 8c0:	asr	lr, r8, #31
 8c4:	add	lr, r8, lr, lsr #28
 8c8:	asr	r2, lr, #4
 8cc:	lsl	r3, r2, #4
 8d0:	sub	r0, r8, r3
 8d4:	cmp	r0, #0
 8d8:	bne	930 <coda_ascii_init_asciilines+0x32c>
 8dc:	lsl	r1, r8, #2
 8e0:	add	r1, r1, #64	; 0x40
 8e4:	mov	r0, sl
 8e8:	bl	0 <realloc>
 8ec:	cmp	r0, #0
 8f0:	bne	92c <coda_ascii_init_asciilines+0x328>
 8f4:	mvn	r0, #0
 8f8:	ldr	r1, [pc, #592]	; b50 <coda_ascii_init_asciilines+0x54c>
 8fc:	lsl	r2, r8, #2
 900:	add	r2, r2, #64	; 0x40
 904:	ldr	r3, [pc, #572]	; b48 <coda_ascii_init_asciilines+0x544>
 908:	mov	ip, #245	; 0xf5
 90c:	str	ip, [sp]
 910:	bl	0 <coda_set_error>
 914:	cmp	sl, #0
 918:	beq	924 <coda_ascii_init_asciilines+0x320>
 91c:	mov	r0, sl
 920:	bl	0 <free>
 924:	mvn	r0, #0
 928:	b	b1c <coda_ascii_init_asciilines+0x518>
 92c:	mov	sl, r0
 930:	add	r2, r6, r7
 934:	add	r0, r2, #1
 938:	str	r0, [sl, r8, lsl #2]
 93c:	add	r8, r8, #1
 940:	mov	r9, #0
 944:	add	r2, sp, #72	; 0x48
 948:	ldrb	r2, [r2, r7]
 94c:	cmp	r2, #10
 950:	beq	a2c <coda_ascii_init_asciilines+0x428>
 954:	add	r0, sp, #72	; 0x48
 958:	ldrb	r2, [r0, r7]
 95c:	cmp	r2, #13
 960:	bne	aa0 <coda_ascii_init_asciilines+0x49c>
 964:	mov	r9, #2
 968:	mov	ip, r7
 96c:	asr	r0, ip, #31
 970:	mov	r2, #0
 974:	mov	r1, #1
 978:	subs	lr, r4, r1
 97c:	sbc	r3, r5, r2
 980:	mov	r2, lr
 984:	cmp	r0, r3
 988:	bne	998 <coda_ascii_init_asciilines+0x394>
 98c:	cmp	ip, r2
 990:	bcc	9a0 <coda_ascii_init_asciilines+0x39c>
 994:	b	aa0 <coda_ascii_init_asciilines+0x49c>
 998:	cmp	r0, r3
 99c:	bge	aa0 <coda_ascii_init_asciilines+0x49c>
 9a0:	add	r2, sp, #72	; 0x48
 9a4:	add	r1, r2, r7
 9a8:	ldrb	r1, [r1, #1]
 9ac:	cmp	r1, #10
 9b0:	bne	a08 <coda_ascii_init_asciilines+0x404>
 9b4:	mov	r9, #3
 9b8:	mov	r1, #3
 9bc:	mov	r0, fp
 9c0:	bl	544 <verify_eol_type>
 9c4:	cmp	r0, #0
 9c8:	beq	9dc <coda_ascii_init_asciilines+0x3d8>
 9cc:	mov	r0, sl
 9d0:	bl	0 <free>
 9d4:	mvn	r0, #0
 9d8:	b	b1c <coda_ascii_init_asciilines+0x518>
 9dc:	lsl	r3, r8, #2
 9e0:	add	r1, sl, r3
 9e4:	lsl	r3, r8, #2
 9e8:	add	r2, sl, r3
 9ec:	sub	lr, r2, #4096	; 0x1000
 9f0:	ldr	r0, [lr, #4092]	; 0xffc
 9f4:	add	r3, r0, #1
 9f8:	sub	lr, r1, #4096	; 0x1000
 9fc:	str	r3, [lr, #4092]	; 0xffc
 a00:	add	r7, r7, #1
 a04:	b	aa0 <coda_ascii_init_asciilines+0x49c>
 a08:	mov	r1, #2
 a0c:	mov	r0, fp
 a10:	bl	544 <verify_eol_type>
 a14:	cmp	r0, #0
 a18:	beq	aa0 <coda_ascii_init_asciilines+0x49c>
 a1c:	mov	r0, sl
 a20:	bl	0 <free>
 a24:	mvn	r0, #0
 a28:	b	b1c <coda_ascii_init_asciilines+0x518>
 a2c:	mov	r9, #1
 a30:	mov	r1, #1
 a34:	mov	r0, fp
 a38:	bl	544 <verify_eol_type>
 a3c:	cmp	r0, #0
 a40:	beq	aa0 <coda_ascii_init_asciilines+0x49c>
 a44:	mov	r0, sl
 a48:	bl	0 <free>
 a4c:	mvn	r0, #0
 a50:	b	b1c <coda_ascii_init_asciilines+0x518>
 a54:	lsl	r1, r8, #2
 a58:	add	r0, sl, r1
 a5c:	lsl	ip, r8, #2
 a60:	add	ip, sl, ip
 a64:	sub	lr, ip, #4096	; 0x1000
 a68:	ldr	r3, [lr, #4092]	; 0xffc
 a6c:	add	r3, r3, #1
 a70:	sub	lr, r0, #4096	; 0x1000
 a74:	str	r3, [lr, #4092]	; 0xffc
 a78:	mov	r9, #3
 a7c:	mov	r1, #3
 a80:	mov	r0, fp
 a84:	bl	544 <verify_eol_type>
 a88:	cmp	r0, #0
 a8c:	beq	aa0 <coda_ascii_init_asciilines+0x49c>
 a90:	mov	r0, sl
 a94:	bl	0 <free>
 a98:	mvn	r0, #0
 a9c:	b	b1c <coda_ascii_init_asciilines+0x518>
 aa0:	add	r7, r7, #1
 aa4:	b	7a8 <coda_ascii_init_asciilines+0x1a4>
 aa8:	add	ip, sp, #72	; 0x48
 aac:	mov	r0, #0
 ab0:	mov	r3, #1
 ab4:	subs	r1, r4, r3
 ab8:	sbc	r0, r5, r0
 abc:	ldrb	r1, [ip, r1]
 ac0:	and	ip, r1, #255	; 0xff
 ac4:	str	ip, [sp, #28]
 ac8:	ldr	r3, [sp, #24]
 acc:	adds	r6, r6, r4
 ad0:	adc	r1, r3, r5
 ad4:	str	r1, [sp, #24]
 ad8:	b	6c4 <coda_ascii_init_asciilines+0xc0>
 adc:	ldr	r1, [sp, #28]
 ae0:	cmp	r1, #13
 ae4:	bne	b0c <coda_ascii_init_asciilines+0x508>
 ae8:	mov	r1, #2
 aec:	mov	r0, fp
 af0:	bl	544 <verify_eol_type>
 af4:	cmp	r0, #0
 af8:	beq	b0c <coda_ascii_init_asciilines+0x508>
 afc:	mov	r0, sl
 b00:	bl	0 <free>
 b04:	mvn	r0, #0
 b08:	b	b1c <coda_ascii_init_asciilines+0x518>
 b0c:	str	r8, [fp, #64]	; 0x40
 b10:	str	sl, [fp, #68]	; 0x44
 b14:	str	r9, [fp, #72]	; 0x48
 b18:	mov	r0, #0
 b1c:	ldr	r4, [sp, #36]	; 0x24
 b20:	ldr	r5, [sp, #40]	; 0x28
 b24:	ldr	r6, [sp, #44]	; 0x2c
 b28:	ldr	r7, [sp, #48]	; 0x30
 b2c:	ldr	r8, [sp, #52]	; 0x34
 b30:	ldr	r9, [sp, #56]	; 0x38
 b34:	ldr	sl, [sp, #60]	; 0x3c
 b38:	ldr	fp, [sp, #64]	; 0x40
 b3c:	ldr	lr, [sp, #16]
 b40:	ldr	sp, [sp, #12]
 b44:	bx	lr
 b48:	.word	0x000001db
 b4c:	.word	0x00000000
 b50:	.word	0x00000237
 b54:	.word	0x00000373
 b58:	.word	0x00000023
