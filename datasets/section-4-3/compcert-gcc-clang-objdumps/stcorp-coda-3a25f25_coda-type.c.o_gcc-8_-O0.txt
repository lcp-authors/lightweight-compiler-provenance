
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-type.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_conversion_new>:
       0:	str	fp, [sp, #-8]!
       4:	str	lr, [sp, #4]
       8:	add	fp, sp, #4
       c:	sub	sp, sp, #48	; 0x30
      10:	vstr	d0, [fp, #-20]	; 0xffffffec
      14:	vstr	d1, [fp, #-28]	; 0xffffffe4
      18:	vstr	d2, [fp, #-36]	; 0xffffffdc
      1c:	vstr	d3, [fp, #-44]	; 0xffffffd4
      20:	vldr	d7, [fp, #-28]	; 0xffffffe4
      24:	vcmp.f64	d7, #0.0
      28:	vmrs	APSR_nzcv, fpscr
      2c:	bne	4c <coda_conversion_new+0x4c>
      30:	movw	r1, #0
      34:	movt	r1, #0
      38:	movw	r0, #65136	; 0xfe70
      3c:	movt	r0, #65535	; 0xffff
      40:	bl	0 <coda_set_error>
      44:	mov	r3, #0
      48:	b	d4 <coda_conversion_new+0xd4>
      4c:	mov	r0, #40	; 0x28
      50:	bl	0 <malloc>
      54:	mov	r3, r0
      58:	str	r3, [fp, #-8]
      5c:	ldr	r3, [fp, #-8]
      60:	cmp	r3, #0
      64:	bne	94 <coda_conversion_new+0x94>
      68:	mov	r3, #171	; 0xab
      6c:	str	r3, [sp]
      70:	movw	r3, #0
      74:	movt	r3, #0
      78:	mov	r2, #40	; 0x28
      7c:	movw	r1, #0
      80:	movt	r1, #0
      84:	mvn	r0, #0
      88:	bl	0 <coda_set_error>
      8c:	mov	r3, #0
      90:	b	d4 <coda_conversion_new+0xd4>
      94:	ldr	r1, [fp, #-8]
      98:	ldrd	r2, [fp, #-20]	; 0xffffffec
      9c:	strd	r2, [r1]
      a0:	ldr	r1, [fp, #-8]
      a4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
      a8:	strd	r2, [r1, #8]
      ac:	ldr	r1, [fp, #-8]
      b0:	ldrd	r2, [fp, #-36]	; 0xffffffdc
      b4:	strd	r2, [r1, #16]
      b8:	ldr	r1, [fp, #-8]
      bc:	ldrd	r2, [fp, #-44]	; 0xffffffd4
      c0:	strd	r2, [r1, #24]
      c4:	ldr	r3, [fp, #-8]
      c8:	mov	r2, #0
      cc:	str	r2, [r3, #32]
      d0:	ldr	r3, [fp, #-8]
      d4:	mov	r0, r3
      d8:	sub	sp, fp, #4
      dc:	ldr	fp, [sp]
      e0:	add	sp, sp, #4
      e4:	pop	{pc}		; (ldr pc, [sp], #4)

000000e8 <coda_conversion_set_unit>:
      e8:	str	fp, [sp, #-8]!
      ec:	str	lr, [sp, #4]
      f0:	add	fp, sp, #4
      f4:	sub	sp, sp, #16
      f8:	str	r0, [fp, #-16]
      fc:	str	r1, [fp, #-20]	; 0xffffffec
     100:	mov	r3, #0
     104:	str	r3, [fp, #-8]
     108:	ldr	r3, [fp, #-16]
     10c:	ldr	r3, [r3, #32]
     110:	cmp	r3, #0
     114:	beq	134 <coda_conversion_set_unit+0x4c>
     118:	movw	r1, #0
     11c:	movt	r1, #0
     120:	movw	r0, #65136	; 0xfe70
     124:	movt	r0, #65535	; 0xffff
     128:	bl	0 <coda_set_error>
     12c:	mvn	r3, #0
     130:	b	190 <coda_conversion_set_unit+0xa8>
     134:	ldr	r3, [fp, #-20]	; 0xffffffec
     138:	cmp	r3, #0
     13c:	beq	180 <coda_conversion_set_unit+0x98>
     140:	ldr	r0, [fp, #-20]	; 0xffffffec
     144:	bl	0 <strdup>
     148:	mov	r3, r0
     14c:	str	r3, [fp, #-8]
     150:	ldr	r3, [fp, #-8]
     154:	cmp	r3, #0
     158:	bne	180 <coda_conversion_set_unit+0x98>
     15c:	mov	r3, #198	; 0xc6
     160:	movw	r2, #0
     164:	movt	r2, #0
     168:	movw	r1, #0
     16c:	movt	r1, #0
     170:	mvn	r0, #0
     174:	bl	0 <coda_set_error>
     178:	mvn	r3, #0
     17c:	b	190 <coda_conversion_set_unit+0xa8>
     180:	ldr	r3, [fp, #-16]
     184:	ldr	r2, [fp, #-8]
     188:	str	r2, [r3, #32]
     18c:	mov	r3, #0
     190:	mov	r0, r3
     194:	sub	sp, fp, #4
     198:	ldr	fp, [sp]
     19c:	add	sp, sp, #4
     1a0:	pop	{pc}		; (ldr pc, [sp], #4)

000001a4 <coda_conversion_delete>:
     1a4:	str	fp, [sp, #-8]!
     1a8:	str	lr, [sp, #4]
     1ac:	add	fp, sp, #4
     1b0:	sub	sp, sp, #8
     1b4:	str	r0, [fp, #-8]
     1b8:	ldr	r3, [fp, #-8]
     1bc:	cmp	r3, #0
     1c0:	beq	1f0 <coda_conversion_delete+0x4c>
     1c4:	ldr	r3, [fp, #-8]
     1c8:	ldr	r3, [r3, #32]
     1cc:	cmp	r3, #0
     1d0:	beq	1e4 <coda_conversion_delete+0x40>
     1d4:	ldr	r3, [fp, #-8]
     1d8:	ldr	r3, [r3, #32]
     1dc:	mov	r0, r3
     1e0:	bl	0 <free>
     1e4:	ldr	r0, [fp, #-8]
     1e8:	bl	0 <free>
     1ec:	b	1f4 <coda_conversion_delete+0x50>
     1f0:	nop	{0}
     1f4:	sub	sp, fp, #4
     1f8:	ldr	fp, [sp]
     1fc:	add	sp, sp, #4
     200:	pop	{pc}		; (ldr pc, [sp], #4)

00000204 <mapping_delete>:
     204:	str	fp, [sp, #-8]!
     208:	str	lr, [sp, #4]
     20c:	add	fp, sp, #4
     210:	sub	sp, sp, #8
     214:	str	r0, [fp, #-8]
     218:	ldr	r3, [fp, #-8]
     21c:	cmp	r3, #0
     220:	beq	250 <mapping_delete+0x4c>
     224:	ldr	r3, [fp, #-8]
     228:	ldr	r3, [r3, #4]
     22c:	cmp	r3, #0
     230:	beq	244 <mapping_delete+0x40>
     234:	ldr	r3, [fp, #-8]
     238:	ldr	r3, [r3, #4]
     23c:	mov	r0, r3
     240:	bl	0 <free>
     244:	ldr	r0, [fp, #-8]
     248:	bl	0 <free>
     24c:	b	254 <mapping_delete+0x50>
     250:	nop	{0}
     254:	sub	sp, fp, #4
     258:	ldr	fp, [sp]
     25c:	add	sp, sp, #4
     260:	pop	{pc}		; (ldr pc, [sp], #4)

00000264 <mappings_delete>:
     264:	str	fp, [sp, #-8]!
     268:	str	lr, [sp, #4]
     26c:	add	fp, sp, #4
     270:	sub	sp, sp, #16
     274:	str	r0, [fp, #-16]
     278:	ldr	r3, [fp, #-16]
     27c:	cmp	r3, #0
     280:	beq	31c <mappings_delete+0xb8>
     284:	ldr	r3, [fp, #-16]
     288:	ldr	r3, [r3, #12]
     28c:	cmp	r3, #0
     290:	beq	310 <mappings_delete+0xac>
     294:	mov	r3, #0
     298:	str	r3, [fp, #-8]
     29c:	b	2ec <mappings_delete+0x88>
     2a0:	ldr	r3, [fp, #-16]
     2a4:	ldr	r2, [r3, #12]
     2a8:	ldr	r3, [fp, #-8]
     2ac:	lsl	r3, r3, #2
     2b0:	add	r3, r2, r3
     2b4:	ldr	r3, [r3]
     2b8:	cmp	r3, #0
     2bc:	beq	2e0 <mappings_delete+0x7c>
     2c0:	ldr	r3, [fp, #-16]
     2c4:	ldr	r2, [r3, #12]
     2c8:	ldr	r3, [fp, #-8]
     2cc:	lsl	r3, r3, #2
     2d0:	add	r3, r2, r3
     2d4:	ldr	r3, [r3]
     2d8:	mov	r0, r3
     2dc:	bl	204 <mapping_delete>
     2e0:	ldr	r3, [fp, #-8]
     2e4:	add	r3, r3, #1
     2e8:	str	r3, [fp, #-8]
     2ec:	ldr	r3, [fp, #-16]
     2f0:	ldr	r3, [r3, #8]
     2f4:	ldr	r2, [fp, #-8]
     2f8:	cmp	r2, r3
     2fc:	blt	2a0 <mappings_delete+0x3c>
     300:	ldr	r3, [fp, #-16]
     304:	ldr	r3, [r3, #12]
     308:	mov	r0, r3
     30c:	bl	0 <free>
     310:	ldr	r0, [fp, #-16]
     314:	bl	0 <free>
     318:	b	320 <mappings_delete+0xbc>
     31c:	nop	{0}
     320:	sub	sp, fp, #4
     324:	ldr	fp, [sp]
     328:	add	sp, sp, #4
     32c:	pop	{pc}		; (ldr pc, [sp], #4)

00000330 <coda_ascii_integer_mapping_new>:
     330:	str	fp, [sp, #-8]!
     334:	str	lr, [sp, #4]
     338:	add	fp, sp, #4
     33c:	sub	sp, sp, #32
     340:	str	r0, [fp, #-16]
     344:	strd	r2, [fp, #-28]	; 0xffffffe4
     348:	ldr	r3, [fp, #-16]
     34c:	cmp	r3, #0
     350:	bne	378 <coda_ascii_integer_mapping_new+0x48>
     354:	movw	r3, #261	; 0x105
     358:	movw	r2, #0
     35c:	movt	r2, #0
     360:	movw	r1, #0
     364:	movt	r1, #0
     368:	mvn	r0, #99	; 0x63
     36c:	bl	0 <coda_set_error>
     370:	mov	r3, #0
     374:	b	494 <coda_ascii_integer_mapping_new+0x164>
     378:	ldr	r0, [fp, #-16]
     37c:	bl	0 <strlen>
     380:	mov	r3, r0
     384:	cmp	r3, #64	; 0x40
     388:	bls	3b8 <coda_ascii_integer_mapping_new+0x88>
     38c:	ldr	r0, [fp, #-16]
     390:	bl	0 <strlen>
     394:	mov	r3, r0
     398:	mov	r2, r3
     39c:	movw	r1, #0
     3a0:	movt	r1, #0
     3a4:	movw	r0, #65136	; 0xfe70
     3a8:	movt	r0, #65535	; 0xffff
     3ac:	bl	0 <coda_set_error>
     3b0:	mov	r3, #0
     3b4:	b	494 <coda_ascii_integer_mapping_new+0x164>
     3b8:	mov	r0, #16
     3bc:	bl	0 <malloc>
     3c0:	mov	r3, r0
     3c4:	str	r3, [fp, #-8]
     3c8:	ldr	r3, [fp, #-8]
     3cc:	cmp	r3, #0
     3d0:	bne	400 <coda_ascii_integer_mapping_new+0xd0>
     3d4:	movw	r3, #275	; 0x113
     3d8:	str	r3, [sp]
     3dc:	movw	r3, #0
     3e0:	movt	r3, #0
     3e4:	mov	r2, #16
     3e8:	movw	r1, #0
     3ec:	movt	r1, #0
     3f0:	mvn	r0, #0
     3f4:	bl	0 <coda_set_error>
     3f8:	mov	r3, #0
     3fc:	b	494 <coda_ascii_integer_mapping_new+0x164>
     400:	ldr	r3, [fp, #-8]
     404:	mov	r2, #0
     408:	str	r2, [r3]
     40c:	ldr	r3, [fp, #-8]
     410:	mov	r2, #0
     414:	str	r2, [r3, #4]
     418:	ldr	r1, [fp, #-8]
     41c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
     420:	strd	r2, [r1, #8]
     424:	ldr	r0, [fp, #-16]
     428:	bl	0 <strdup>
     42c:	mov	r3, r0
     430:	mov	r2, r3
     434:	ldr	r3, [fp, #-8]
     438:	str	r2, [r3, #4]
     43c:	ldr	r3, [fp, #-8]
     440:	ldr	r3, [r3, #4]
     444:	cmp	r3, #0
     448:	bne	478 <coda_ascii_integer_mapping_new+0x148>
     44c:	movw	r3, #286	; 0x11e
     450:	movw	r2, #0
     454:	movt	r2, #0
     458:	movw	r1, #0
     45c:	movt	r1, #0
     460:	mvn	r0, #0
     464:	bl	0 <coda_set_error>
     468:	ldr	r0, [fp, #-8]
     46c:	bl	0 <free>
     470:	mov	r3, #0
     474:	b	494 <coda_ascii_integer_mapping_new+0x164>
     478:	ldr	r0, [fp, #-16]
     47c:	bl	0 <strlen>
     480:	mov	r3, r0
     484:	mov	r2, r3
     488:	ldr	r3, [fp, #-8]
     48c:	str	r2, [r3]
     490:	ldr	r3, [fp, #-8]
     494:	mov	r0, r3
     498:	sub	sp, fp, #4
     49c:	ldr	fp, [sp]
     4a0:	add	sp, sp, #4
     4a4:	pop	{pc}		; (ldr pc, [sp], #4)

000004a8 <coda_ascii_integer_mapping_delete>:
     4a8:	str	fp, [sp, #-8]!
     4ac:	str	lr, [sp, #4]
     4b0:	add	fp, sp, #4
     4b4:	sub	sp, sp, #8
     4b8:	str	r0, [fp, #-8]
     4bc:	ldr	r0, [fp, #-8]
     4c0:	bl	204 <mapping_delete>
     4c4:	nop	{0}
     4c8:	sub	sp, fp, #4
     4cc:	ldr	fp, [sp]
     4d0:	add	sp, sp, #4
     4d4:	pop	{pc}		; (ldr pc, [sp], #4)

000004d8 <coda_ascii_float_mapping_new>:
     4d8:	str	fp, [sp, #-8]!
     4dc:	str	lr, [sp, #4]
     4e0:	add	fp, sp, #4
     4e4:	sub	sp, sp, #32
     4e8:	str	r0, [fp, #-16]
     4ec:	vstr	d0, [fp, #-28]	; 0xffffffe4
     4f0:	ldr	r3, [fp, #-16]
     4f4:	cmp	r3, #0
     4f8:	bne	520 <coda_ascii_float_mapping_new+0x48>
     4fc:	movw	r3, #306	; 0x132
     500:	movw	r2, #0
     504:	movt	r2, #0
     508:	movw	r1, #0
     50c:	movt	r1, #0
     510:	mvn	r0, #99	; 0x63
     514:	bl	0 <coda_set_error>
     518:	mov	r3, #0
     51c:	b	63c <coda_ascii_float_mapping_new+0x164>
     520:	ldr	r0, [fp, #-16]
     524:	bl	0 <strlen>
     528:	mov	r3, r0
     52c:	cmp	r3, #64	; 0x40
     530:	bls	560 <coda_ascii_float_mapping_new+0x88>
     534:	ldr	r0, [fp, #-16]
     538:	bl	0 <strlen>
     53c:	mov	r3, r0
     540:	mov	r2, r3
     544:	movw	r1, #0
     548:	movt	r1, #0
     54c:	movw	r0, #65136	; 0xfe70
     550:	movt	r0, #65535	; 0xffff
     554:	bl	0 <coda_set_error>
     558:	mov	r3, #0
     55c:	b	63c <coda_ascii_float_mapping_new+0x164>
     560:	mov	r0, #16
     564:	bl	0 <malloc>
     568:	mov	r3, r0
     56c:	str	r3, [fp, #-8]
     570:	ldr	r3, [fp, #-8]
     574:	cmp	r3, #0
     578:	bne	5a8 <coda_ascii_float_mapping_new+0xd0>
     57c:	movw	r3, #319	; 0x13f
     580:	str	r3, [sp]
     584:	movw	r3, #0
     588:	movt	r3, #0
     58c:	mov	r2, #16
     590:	movw	r1, #0
     594:	movt	r1, #0
     598:	mvn	r0, #0
     59c:	bl	0 <coda_set_error>
     5a0:	mov	r3, #0
     5a4:	b	63c <coda_ascii_float_mapping_new+0x164>
     5a8:	ldr	r3, [fp, #-8]
     5ac:	mov	r2, #0
     5b0:	str	r2, [r3]
     5b4:	ldr	r3, [fp, #-8]
     5b8:	mov	r2, #0
     5bc:	str	r2, [r3, #4]
     5c0:	ldr	r1, [fp, #-8]
     5c4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
     5c8:	strd	r2, [r1, #8]
     5cc:	ldr	r0, [fp, #-16]
     5d0:	bl	0 <strdup>
     5d4:	mov	r3, r0
     5d8:	mov	r2, r3
     5dc:	ldr	r3, [fp, #-8]
     5e0:	str	r2, [r3, #4]
     5e4:	ldr	r3, [fp, #-8]
     5e8:	ldr	r3, [r3, #4]
     5ec:	cmp	r3, #0
     5f0:	bne	620 <coda_ascii_float_mapping_new+0x148>
     5f4:	movw	r3, #330	; 0x14a
     5f8:	movw	r2, #0
     5fc:	movt	r2, #0
     600:	movw	r1, #0
     604:	movt	r1, #0
     608:	mvn	r0, #0
     60c:	bl	0 <coda_set_error>
     610:	ldr	r0, [fp, #-8]
     614:	bl	0 <free>
     618:	mov	r3, #0
     61c:	b	63c <coda_ascii_float_mapping_new+0x164>
     620:	ldr	r0, [fp, #-16]
     624:	bl	0 <strlen>
     628:	mov	r3, r0
     62c:	mov	r2, r3
     630:	ldr	r3, [fp, #-8]
     634:	str	r2, [r3]
     638:	ldr	r3, [fp, #-8]
     63c:	mov	r0, r3
     640:	sub	sp, fp, #4
     644:	ldr	fp, [sp]
     648:	add	sp, sp, #4
     64c:	pop	{pc}		; (ldr pc, [sp], #4)

00000650 <coda_ascii_float_mapping_delete>:
     650:	str	fp, [sp, #-8]!
     654:	str	lr, [sp, #4]
     658:	add	fp, sp, #4
     65c:	sub	sp, sp, #8
     660:	str	r0, [fp, #-8]
     664:	ldr	r0, [fp, #-8]
     668:	bl	204 <mapping_delete>
     66c:	nop	{0}
     670:	sub	sp, fp, #4
     674:	ldr	fp, [sp]
     678:	add	sp, sp, #4
     67c:	pop	{pc}		; (ldr pc, [sp], #4)

00000680 <mapping_type_add_mapping>:
     680:	strd	r4, [sp, #-16]!
     684:	str	fp, [sp, #8]
     688:	str	lr, [sp, #12]
     68c:	add	fp, sp, #12
     690:	sub	sp, sp, #32
     694:	str	r0, [fp, #-24]	; 0xffffffe8
     698:	str	r1, [fp, #-28]	; 0xffffffe4
     69c:	str	r2, [fp, #-32]	; 0xffffffe0
     6a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
     6a4:	cmp	r3, #0
     6a8:	bne	6d0 <mapping_type_add_mapping+0x50>
     6ac:	mov	r3, #348	; 0x15c
     6b0:	movw	r2, #0
     6b4:	movt	r2, #0
     6b8:	movw	r1, #0
     6bc:	movt	r1, #0
     6c0:	mvn	r0, #99	; 0x63
     6c4:	bl	0 <coda_set_error>
     6c8:	mvn	r3, #0
     6cc:	b	904 <mapping_type_add_mapping+0x284>
     6d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     6d4:	cmp	r3, #0
     6d8:	bne	700 <mapping_type_add_mapping+0x80>
     6dc:	movw	r3, #353	; 0x161
     6e0:	movw	r2, #0
     6e4:	movt	r2, #0
     6e8:	movw	r1, #0
     6ec:	movt	r1, #0
     6f0:	mvn	r0, #99	; 0x63
     6f4:	bl	0 <coda_set_error>
     6f8:	mvn	r3, #0
     6fc:	b	904 <mapping_type_add_mapping+0x284>
     700:	ldr	r3, [fp, #-28]	; 0xffffffe4
     704:	ldr	r3, [r3]
     708:	cmp	r3, #0
     70c:	bne	7ac <mapping_type_add_mapping+0x12c>
     710:	mov	r0, #16
     714:	bl	0 <malloc>
     718:	mov	r3, r0
     71c:	mov	r2, r3
     720:	ldr	r3, [fp, #-28]	; 0xffffffe4
     724:	str	r2, [r3]
     728:	ldr	r3, [fp, #-28]	; 0xffffffe4
     72c:	ldr	r3, [r3]
     730:	cmp	r3, #0
     734:	bne	764 <mapping_type_add_mapping+0xe4>
     738:	movw	r3, #363	; 0x16b
     73c:	str	r3, [sp]
     740:	movw	r3, #0
     744:	movt	r3, #0
     748:	mov	r2, #16
     74c:	movw	r1, #0
     750:	movt	r1, #0
     754:	mvn	r0, #0
     758:	bl	0 <coda_set_error>
     75c:	mvn	r3, #0
     760:	b	904 <mapping_type_add_mapping+0x284>
     764:	ldr	r3, [fp, #-24]	; 0xffffffe8
     768:	ldrd	r2, [r3, #24]
     76c:	ldr	r1, [fp, #-28]	; 0xffffffe4
     770:	ldr	r1, [r1]
     774:	cmp	r2, #0
     778:	sbcs	r0, r3, #0
     77c:	bge	788 <mapping_type_add_mapping+0x108>
     780:	mvn	r2, #0
     784:	mvn	r3, #0
     788:	strd	r2, [r1]
     78c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     790:	ldr	r3, [r3]
     794:	mov	r2, #0
     798:	str	r2, [r3, #8]
     79c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     7a0:	ldr	r3, [r3]
     7a4:	mov	r2, #0
     7a8:	str	r2, [r3, #12]
     7ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
     7b0:	ldr	r3, [r3]
     7b4:	ldr	r3, [r3, #8]
     7b8:	and	r3, r3, #15
     7bc:	cmp	r3, #0
     7c0:	bne	84c <mapping_type_add_mapping+0x1cc>
     7c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     7c8:	ldr	r3, [r3]
     7cc:	ldr	r2, [r3, #12]
     7d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     7d4:	ldr	r3, [r3]
     7d8:	ldr	r3, [r3, #8]
     7dc:	add	r3, r3, #16
     7e0:	lsl	r3, r3, #2
     7e4:	mov	r1, r3
     7e8:	mov	r0, r2
     7ec:	bl	0 <realloc>
     7f0:	str	r0, [fp, #-16]
     7f4:	ldr	r3, [fp, #-16]
     7f8:	cmp	r3, #0
     7fc:	bne	83c <mapping_type_add_mapping+0x1bc>
     800:	ldr	r3, [fp, #-28]	; 0xffffffe4
     804:	ldr	r3, [r3]
     808:	ldr	r3, [r3, #8]
     80c:	add	r3, r3, #16
     810:	lsl	r2, r3, #2
     814:	mov	r3, #380	; 0x17c
     818:	str	r3, [sp]
     81c:	movw	r3, #0
     820:	movt	r3, #0
     824:	movw	r1, #0
     828:	movt	r1, #0
     82c:	mvn	r0, #0
     830:	bl	0 <coda_set_error>
     834:	mvn	r3, #0
     838:	b	904 <mapping_type_add_mapping+0x284>
     83c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     840:	ldr	r3, [r3]
     844:	ldr	r2, [fp, #-16]
     848:	str	r2, [r3, #12]
     84c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     850:	ldr	r3, [r3]
     854:	ldr	r2, [r3, #12]
     858:	ldr	r3, [fp, #-28]	; 0xffffffe4
     85c:	ldr	r3, [r3]
     860:	ldr	r3, [r3, #8]
     864:	lsl	r3, r3, #2
     868:	add	r3, r2, r3
     86c:	ldr	r2, [fp, #-32]	; 0xffffffe0
     870:	str	r2, [r3]
     874:	ldr	r3, [fp, #-28]	; 0xffffffe4
     878:	ldr	r3, [r3]
     87c:	ldr	r2, [r3, #8]
     880:	add	r2, r2, #1
     884:	str	r2, [r3, #8]
     888:	ldr	r3, [fp, #-24]	; 0xffffffe8
     88c:	ldrd	r2, [r3, #24]
     890:	cmp	r2, #0
     894:	sbcs	r3, r3, #0
     898:	blt	900 <mapping_type_add_mapping+0x280>
     89c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     8a0:	ldr	r3, [r3]
     8a4:	ldrd	r2, [r3]
     8a8:	cmp	r2, #0
     8ac:	sbcs	r3, r3, #0
     8b0:	blt	900 <mapping_type_add_mapping+0x280>
     8b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     8b8:	ldr	r3, [r3]
     8bc:	mov	r4, r3
     8c0:	asr	r5, r4, #31
     8c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     8c8:	ldr	r3, [r3]
     8cc:	ldrd	r0, [r3]
     8d0:	mov	r2, #0
     8d4:	mov	r3, #0
     8d8:	lsr	r2, r0, #3
     8dc:	orr	r2, r2, r1, lsl #29
     8e0:	asr	r3, r1, #3
     8e4:	cmp	r5, r3
     8e8:	cmpeq	r4, r2
     8ec:	beq	900 <mapping_type_add_mapping+0x280>
     8f0:	ldr	r1, [fp, #-24]	; 0xffffffe8
     8f4:	mvn	r2, #0
     8f8:	mvn	r3, #0
     8fc:	strd	r2, [r1, #24]
     900:	mov	r3, #0
     904:	mov	r0, r3
     908:	sub	sp, fp, #12
     90c:	ldrd	r4, [sp]
     910:	ldr	fp, [sp, #8]
     914:	add	sp, sp, #12
     918:	pop	{pc}		; (ldr pc, [sp], #4)

0000091c <mapping_type_set_bit_size>:
     91c:	strd	r4, [sp, #-16]!
     920:	str	fp, [sp, #8]
     924:	str	lr, [sp, #12]
     928:	add	fp, sp, #12
     92c:	sub	sp, sp, #24
     930:	str	r0, [fp, #-24]	; 0xffffffe8
     934:	str	r1, [fp, #-28]	; 0xffffffe4
     938:	strd	r2, [fp, #-36]	; 0xffffffdc
     93c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     940:	cmp	r3, #0
     944:	bne	968 <mapping_type_set_bit_size+0x4c>
     948:	movw	r3, #0
     94c:	movt	r3, #0
     950:	movw	r2, #401	; 0x191
     954:	movw	r1, #0
     958:	movt	r1, #0
     95c:	movw	r0, #0
     960:	movt	r0, #0
     964:	bl	0 <__assert_fail>
     968:	ldrd	r2, [fp, #-36]	; 0xffffffdc
     96c:	cmp	r2, #0
     970:	sbcs	r3, r3, #0
     974:	bge	998 <mapping_type_set_bit_size+0x7c>
     978:	movw	r3, #0
     97c:	movt	r3, #0
     980:	movw	r2, #402	; 0x192
     984:	movw	r1, #0
     988:	movt	r1, #0
     98c:	movw	r0, #0
     990:	movt	r0, #0
     994:	bl	0 <__assert_fail>
     998:	ldr	r3, [fp, #-28]	; 0xffffffe4
     99c:	ldrd	r2, [r3]
     9a0:	cmp	r2, #0
     9a4:	sbcs	r3, r3, #0
     9a8:	blt	9c8 <mapping_type_set_bit_size+0xac>
     9ac:	movw	r1, #0
     9b0:	movt	r1, #0
     9b4:	movw	r0, #65136	; 0xfe70
     9b8:	movt	r0, #65535	; 0xffff
     9bc:	bl	0 <coda_set_error>
     9c0:	mvn	r3, #0
     9c4:	b	a6c <mapping_type_set_bit_size+0x150>
     9c8:	ldr	r1, [fp, #-28]	; 0xffffffe4
     9cc:	ldrd	r2, [fp, #-36]	; 0xffffffdc
     9d0:	strd	r2, [r1]
     9d4:	ldr	r1, [fp, #-24]	; 0xffffffe8
     9d8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
     9dc:	strd	r2, [r1, #24]
     9e0:	mov	r3, #0
     9e4:	str	r3, [fp, #-16]
     9e8:	b	a54 <mapping_type_set_bit_size+0x138>
     9ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
     9f0:	ldr	r2, [r3, #12]
     9f4:	ldr	r3, [fp, #-16]
     9f8:	lsl	r3, r3, #2
     9fc:	add	r3, r2, r3
     a00:	ldr	r3, [r3]
     a04:	ldr	r3, [r3]
     a08:	mov	r4, r3
     a0c:	asr	r5, r4, #31
     a10:	ldrd	r0, [fp, #-36]	; 0xffffffdc
     a14:	mov	r2, #0
     a18:	mov	r3, #0
     a1c:	lsr	r2, r0, #3
     a20:	orr	r2, r2, r1, lsl #29
     a24:	asr	r3, r1, #3
     a28:	cmp	r5, r3
     a2c:	cmpeq	r4, r2
     a30:	beq	a48 <mapping_type_set_bit_size+0x12c>
     a34:	ldr	r1, [fp, #-24]	; 0xffffffe8
     a38:	mvn	r2, #0
     a3c:	mvn	r3, #0
     a40:	strd	r2, [r1, #24]
     a44:	b	a68 <mapping_type_set_bit_size+0x14c>
     a48:	ldr	r3, [fp, #-16]
     a4c:	add	r3, r3, #1
     a50:	str	r3, [fp, #-16]
     a54:	ldr	r3, [fp, #-28]	; 0xffffffe4
     a58:	ldr	r3, [r3, #8]
     a5c:	ldr	r2, [fp, #-16]
     a60:	cmp	r2, r3
     a64:	blt	9ec <mapping_type_set_bit_size+0xd0>
     a68:	mov	r3, #0
     a6c:	mov	r0, r3
     a70:	sub	sp, fp, #12
     a74:	ldrd	r4, [sp]
     a78:	ldr	fp, [sp, #8]
     a7c:	add	sp, sp, #12
     a80:	pop	{pc}		; (ldr pc, [sp], #4)

00000a84 <coda_type_record_field_delete>:
     a84:	str	fp, [sp, #-8]!
     a88:	str	lr, [sp, #4]
     a8c:	add	fp, sp, #4
     a90:	sub	sp, sp, #8
     a94:	str	r0, [fp, #-8]
     a98:	ldr	r3, [fp, #-8]
     a9c:	cmp	r3, #0
     aa0:	beq	b50 <coda_type_record_field_delete+0xcc>
     aa4:	ldr	r3, [fp, #-8]
     aa8:	ldr	r3, [r3]
     aac:	cmp	r3, #0
     ab0:	beq	ac4 <coda_type_record_field_delete+0x40>
     ab4:	ldr	r3, [fp, #-8]
     ab8:	ldr	r3, [r3]
     abc:	mov	r0, r3
     ac0:	bl	0 <free>
     ac4:	ldr	r3, [fp, #-8]
     ac8:	ldr	r3, [r3, #4]
     acc:	cmp	r3, #0
     ad0:	beq	ae4 <coda_type_record_field_delete+0x60>
     ad4:	ldr	r3, [fp, #-8]
     ad8:	ldr	r3, [r3, #4]
     adc:	mov	r0, r3
     ae0:	bl	0 <free>
     ae4:	ldr	r3, [fp, #-8]
     ae8:	ldr	r3, [r3, #8]
     aec:	cmp	r3, #0
     af0:	beq	b04 <coda_type_record_field_delete+0x80>
     af4:	ldr	r3, [fp, #-8]
     af8:	ldr	r3, [r3, #8]
     afc:	mov	r0, r3
     b00:	bl	123c <coda_type_release>
     b04:	ldr	r3, [fp, #-8]
     b08:	ldr	r3, [r3, #20]
     b0c:	cmp	r3, #0
     b10:	beq	b24 <coda_type_record_field_delete+0xa0>
     b14:	ldr	r3, [fp, #-8]
     b18:	ldr	r3, [r3, #20]
     b1c:	mov	r0, r3
     b20:	bl	0 <coda_expression_delete>
     b24:	ldr	r3, [fp, #-8]
     b28:	ldr	r3, [r3, #32]
     b2c:	cmp	r3, #0
     b30:	beq	b44 <coda_type_record_field_delete+0xc0>
     b34:	ldr	r3, [fp, #-8]
     b38:	ldr	r3, [r3, #32]
     b3c:	mov	r0, r3
     b40:	bl	0 <coda_expression_delete>
     b44:	ldr	r0, [fp, #-8]
     b48:	bl	0 <free>
     b4c:	b	b54 <coda_type_record_field_delete+0xd0>
     b50:	nop	{0}
     b54:	sub	sp, fp, #4
     b58:	ldr	fp, [sp]
     b5c:	add	sp, sp, #4
     b60:	pop	{pc}		; (ldr pc, [sp], #4)

00000b64 <record_delete>:
     b64:	str	fp, [sp, #-8]!
     b68:	str	lr, [sp, #4]
     b6c:	add	fp, sp, #4
     b70:	sub	sp, sp, #16
     b74:	str	r0, [fp, #-16]
     b78:	ldr	r3, [fp, #-16]
     b7c:	cmp	r3, #0
     b80:	beq	cdc <record_delete+0x178>
     b84:	ldr	r3, [fp, #-16]
     b88:	ldr	r3, [r3, #16]
     b8c:	cmp	r3, #0
     b90:	beq	ba4 <record_delete+0x40>
     b94:	ldr	r3, [fp, #-16]
     b98:	ldr	r3, [r3, #16]
     b9c:	mov	r0, r3
     ba0:	bl	0 <free>
     ba4:	ldr	r3, [fp, #-16]
     ba8:	ldr	r3, [r3, #20]
     bac:	cmp	r3, #0
     bb0:	beq	bc4 <record_delete+0x60>
     bb4:	ldr	r3, [fp, #-16]
     bb8:	ldr	r3, [r3, #20]
     bbc:	mov	r0, r3
     bc0:	bl	0 <free>
     bc4:	ldr	r3, [fp, #-16]
     bc8:	ldr	r3, [r3, #32]
     bcc:	cmp	r3, #0
     bd0:	beq	be4 <record_delete+0x80>
     bd4:	ldr	r3, [fp, #-16]
     bd8:	ldr	r3, [r3, #32]
     bdc:	mov	r0, r3
     be0:	bl	0 <coda_expression_delete>
     be4:	ldr	r3, [fp, #-16]
     be8:	ldr	r3, [r3, #36]	; 0x24
     bec:	cmp	r3, #0
     bf0:	beq	c04 <record_delete+0xa0>
     bf4:	ldr	r3, [fp, #-16]
     bf8:	ldr	r3, [r3, #36]	; 0x24
     bfc:	mov	r0, r3
     c00:	bl	123c <coda_type_release>
     c04:	ldr	r3, [fp, #-16]
     c08:	ldr	r3, [r3, #40]	; 0x28
     c0c:	cmp	r3, #0
     c10:	beq	c24 <record_delete+0xc0>
     c14:	ldr	r3, [fp, #-16]
     c18:	ldr	r3, [r3, #40]	; 0x28
     c1c:	mov	r0, r3
     c20:	bl	0 <coda_hashtable_delete>
     c24:	ldr	r3, [fp, #-16]
     c28:	ldr	r3, [r3, #44]	; 0x2c
     c2c:	cmp	r3, #0
     c30:	beq	c44 <record_delete+0xe0>
     c34:	ldr	r3, [fp, #-16]
     c38:	ldr	r3, [r3, #44]	; 0x2c
     c3c:	mov	r0, r3
     c40:	bl	0 <coda_hashtable_delete>
     c44:	ldr	r3, [fp, #-16]
     c48:	ldr	r3, [r3, #48]	; 0x30
     c4c:	cmp	r3, #0
     c50:	ble	cb0 <record_delete+0x14c>
     c54:	mov	r3, #0
     c58:	str	r3, [fp, #-8]
     c5c:	b	c8c <record_delete+0x128>
     c60:	ldr	r3, [fp, #-16]
     c64:	ldr	r2, [r3, #52]	; 0x34
     c68:	ldr	r3, [fp, #-8]
     c6c:	lsl	r3, r3, #2
     c70:	add	r3, r2, r3
     c74:	ldr	r3, [r3]
     c78:	mov	r0, r3
     c7c:	bl	a84 <coda_type_record_field_delete>
     c80:	ldr	r3, [fp, #-8]
     c84:	add	r3, r3, #1
     c88:	str	r3, [fp, #-8]
     c8c:	ldr	r3, [fp, #-16]
     c90:	ldr	r3, [r3, #48]	; 0x30
     c94:	ldr	r2, [fp, #-8]
     c98:	cmp	r2, r3
     c9c:	blt	c60 <record_delete+0xfc>
     ca0:	ldr	r3, [fp, #-16]
     ca4:	ldr	r3, [r3, #52]	; 0x34
     ca8:	mov	r0, r3
     cac:	bl	0 <free>
     cb0:	ldr	r3, [fp, #-16]
     cb4:	ldr	r3, [r3, #68]	; 0x44
     cb8:	cmp	r3, #0
     cbc:	beq	cd0 <record_delete+0x16c>
     cc0:	ldr	r3, [fp, #-16]
     cc4:	ldr	r3, [r3, #68]	; 0x44
     cc8:	mov	r0, r3
     ccc:	bl	0 <coda_expression_delete>
     cd0:	ldr	r0, [fp, #-16]
     cd4:	bl	0 <free>
     cd8:	b	ce0 <record_delete+0x17c>
     cdc:	nop	{0}
     ce0:	sub	sp, fp, #4
     ce4:	ldr	fp, [sp]
     ce8:	add	sp, sp, #4
     cec:	pop	{pc}		; (ldr pc, [sp], #4)

00000cf0 <array_delete>:
     cf0:	str	fp, [sp, #-8]!
     cf4:	str	lr, [sp, #4]
     cf8:	add	fp, sp, #4
     cfc:	sub	sp, sp, #16
     d00:	str	r0, [fp, #-16]
     d04:	ldr	r3, [fp, #-16]
     d08:	cmp	r3, #0
     d0c:	beq	e28 <array_delete+0x138>
     d10:	ldr	r3, [fp, #-16]
     d14:	ldr	r3, [r3, #16]
     d18:	cmp	r3, #0
     d1c:	beq	d30 <array_delete+0x40>
     d20:	ldr	r3, [fp, #-16]
     d24:	ldr	r3, [r3, #16]
     d28:	mov	r0, r3
     d2c:	bl	0 <free>
     d30:	ldr	r3, [fp, #-16]
     d34:	ldr	r3, [r3, #20]
     d38:	cmp	r3, #0
     d3c:	beq	d50 <array_delete+0x60>
     d40:	ldr	r3, [fp, #-16]
     d44:	ldr	r3, [r3, #20]
     d48:	mov	r0, r3
     d4c:	bl	0 <free>
     d50:	ldr	r3, [fp, #-16]
     d54:	ldr	r3, [r3, #32]
     d58:	cmp	r3, #0
     d5c:	beq	d70 <array_delete+0x80>
     d60:	ldr	r3, [fp, #-16]
     d64:	ldr	r3, [r3, #32]
     d68:	mov	r0, r3
     d6c:	bl	0 <coda_expression_delete>
     d70:	ldr	r3, [fp, #-16]
     d74:	ldr	r3, [r3, #36]	; 0x24
     d78:	cmp	r3, #0
     d7c:	beq	d90 <array_delete+0xa0>
     d80:	ldr	r3, [fp, #-16]
     d84:	ldr	r3, [r3, #36]	; 0x24
     d88:	mov	r0, r3
     d8c:	bl	123c <coda_type_release>
     d90:	ldr	r3, [fp, #-16]
     d94:	ldr	r3, [r3, #40]	; 0x28
     d98:	cmp	r3, #0
     d9c:	beq	db0 <array_delete+0xc0>
     da0:	ldr	r3, [fp, #-16]
     da4:	ldr	r3, [r3, #40]	; 0x28
     da8:	mov	r0, r3
     dac:	bl	123c <coda_type_release>
     db0:	mov	r3, #0
     db4:	str	r3, [fp, #-8]
     db8:	b	e08 <array_delete+0x118>
     dbc:	ldr	r2, [fp, #-16]
     dc0:	ldr	r3, [fp, #-8]
     dc4:	add	r3, r3, #20
     dc8:	lsl	r3, r3, #2
     dcc:	add	r3, r2, r3
     dd0:	ldr	r3, [r3, #4]
     dd4:	cmp	r3, #0
     dd8:	beq	dfc <array_delete+0x10c>
     ddc:	ldr	r2, [fp, #-16]
     de0:	ldr	r3, [fp, #-8]
     de4:	add	r3, r3, #20
     de8:	lsl	r3, r3, #2
     dec:	add	r3, r2, r3
     df0:	ldr	r3, [r3, #4]
     df4:	mov	r0, r3
     df8:	bl	0 <coda_expression_delete>
     dfc:	ldr	r3, [fp, #-8]
     e00:	add	r3, r3, #1
     e04:	str	r3, [fp, #-8]
     e08:	ldr	r3, [fp, #-16]
     e0c:	ldr	r3, [r3, #48]	; 0x30
     e10:	ldr	r2, [fp, #-8]
     e14:	cmp	r2, r3
     e18:	blt	dbc <array_delete+0xcc>
     e1c:	ldr	r0, [fp, #-16]
     e20:	bl	0 <free>
     e24:	b	e2c <array_delete+0x13c>
     e28:	nop	{0}
     e2c:	sub	sp, fp, #4
     e30:	ldr	fp, [sp]
     e34:	add	sp, sp, #4
     e38:	pop	{pc}		; (ldr pc, [sp], #4)

00000e3c <number_delete>:
     e3c:	str	fp, [sp, #-8]!
     e40:	str	lr, [sp, #4]
     e44:	add	fp, sp, #4
     e48:	sub	sp, sp, #8
     e4c:	str	r0, [fp, #-8]
     e50:	ldr	r3, [fp, #-8]
     e54:	cmp	r3, #0
     e58:	beq	f48 <number_delete+0x10c>
     e5c:	ldr	r3, [fp, #-8]
     e60:	ldr	r3, [r3, #16]
     e64:	cmp	r3, #0
     e68:	beq	e7c <number_delete+0x40>
     e6c:	ldr	r3, [fp, #-8]
     e70:	ldr	r3, [r3, #16]
     e74:	mov	r0, r3
     e78:	bl	0 <free>
     e7c:	ldr	r3, [fp, #-8]
     e80:	ldr	r3, [r3, #20]
     e84:	cmp	r3, #0
     e88:	beq	e9c <number_delete+0x60>
     e8c:	ldr	r3, [fp, #-8]
     e90:	ldr	r3, [r3, #20]
     e94:	mov	r0, r3
     e98:	bl	0 <free>
     e9c:	ldr	r3, [fp, #-8]
     ea0:	ldr	r3, [r3, #32]
     ea4:	cmp	r3, #0
     ea8:	beq	ebc <number_delete+0x80>
     eac:	ldr	r3, [fp, #-8]
     eb0:	ldr	r3, [r3, #32]
     eb4:	mov	r0, r3
     eb8:	bl	0 <coda_expression_delete>
     ebc:	ldr	r3, [fp, #-8]
     ec0:	ldr	r3, [r3, #36]	; 0x24
     ec4:	cmp	r3, #0
     ec8:	beq	edc <number_delete+0xa0>
     ecc:	ldr	r3, [fp, #-8]
     ed0:	ldr	r3, [r3, #36]	; 0x24
     ed4:	mov	r0, r3
     ed8:	bl	123c <coda_type_release>
     edc:	ldr	r3, [fp, #-8]
     ee0:	ldr	r3, [r3, #40]	; 0x28
     ee4:	cmp	r3, #0
     ee8:	beq	efc <number_delete+0xc0>
     eec:	ldr	r3, [fp, #-8]
     ef0:	ldr	r3, [r3, #40]	; 0x28
     ef4:	mov	r0, r3
     ef8:	bl	0 <free>
     efc:	ldr	r3, [fp, #-8]
     f00:	ldr	r3, [r3, #48]	; 0x30
     f04:	cmp	r3, #0
     f08:	beq	f1c <number_delete+0xe0>
     f0c:	ldr	r3, [fp, #-8]
     f10:	ldr	r3, [r3, #48]	; 0x30
     f14:	mov	r0, r3
     f18:	bl	1a4 <coda_conversion_delete>
     f1c:	ldr	r3, [fp, #-8]
     f20:	ldr	r3, [r3, #52]	; 0x34
     f24:	cmp	r3, #0
     f28:	beq	f3c <number_delete+0x100>
     f2c:	ldr	r3, [fp, #-8]
     f30:	ldr	r3, [r3, #52]	; 0x34
     f34:	mov	r0, r3
     f38:	bl	264 <mappings_delete>
     f3c:	ldr	r0, [fp, #-8]
     f40:	bl	0 <free>
     f44:	b	f4c <number_delete+0x110>
     f48:	nop	{0}
     f4c:	sub	sp, fp, #4
     f50:	ldr	fp, [sp]
     f54:	add	sp, sp, #4
     f58:	pop	{pc}		; (ldr pc, [sp], #4)

00000f5c <text_delete>:
     f5c:	str	fp, [sp, #-8]!
     f60:	str	lr, [sp, #4]
     f64:	add	fp, sp, #4
     f68:	sub	sp, sp, #8
     f6c:	str	r0, [fp, #-8]
     f70:	ldr	r3, [fp, #-8]
     f74:	cmp	r3, #0
     f78:	beq	1028 <text_delete+0xcc>
     f7c:	ldr	r3, [fp, #-8]
     f80:	ldr	r3, [r3, #16]
     f84:	cmp	r3, #0
     f88:	beq	f9c <text_delete+0x40>
     f8c:	ldr	r3, [fp, #-8]
     f90:	ldr	r3, [r3, #16]
     f94:	mov	r0, r3
     f98:	bl	0 <free>
     f9c:	ldr	r3, [fp, #-8]
     fa0:	ldr	r3, [r3, #20]
     fa4:	cmp	r3, #0
     fa8:	beq	fbc <text_delete+0x60>
     fac:	ldr	r3, [fp, #-8]
     fb0:	ldr	r3, [r3, #20]
     fb4:	mov	r0, r3
     fb8:	bl	0 <free>
     fbc:	ldr	r3, [fp, #-8]
     fc0:	ldr	r3, [r3, #32]
     fc4:	cmp	r3, #0
     fc8:	beq	fdc <text_delete+0x80>
     fcc:	ldr	r3, [fp, #-8]
     fd0:	ldr	r3, [r3, #32]
     fd4:	mov	r0, r3
     fd8:	bl	0 <coda_expression_delete>
     fdc:	ldr	r3, [fp, #-8]
     fe0:	ldr	r3, [r3, #36]	; 0x24
     fe4:	cmp	r3, #0
     fe8:	beq	ffc <text_delete+0xa0>
     fec:	ldr	r3, [fp, #-8]
     ff0:	ldr	r3, [r3, #36]	; 0x24
     ff4:	mov	r0, r3
     ff8:	bl	123c <coda_type_release>
     ffc:	ldr	r3, [fp, #-8]
    1000:	ldr	r3, [r3, #40]	; 0x28
    1004:	cmp	r3, #0
    1008:	beq	101c <text_delete+0xc0>
    100c:	ldr	r3, [fp, #-8]
    1010:	ldr	r3, [r3, #40]	; 0x28
    1014:	mov	r0, r3
    1018:	bl	0 <free>
    101c:	ldr	r0, [fp, #-8]
    1020:	bl	0 <free>
    1024:	b	102c <text_delete+0xd0>
    1028:	nop	{0}
    102c:	sub	sp, fp, #4
    1030:	ldr	fp, [sp]
    1034:	add	sp, sp, #4
    1038:	pop	{pc}		; (ldr pc, [sp], #4)

0000103c <raw_delete>:
    103c:	str	fp, [sp, #-8]!
    1040:	str	lr, [sp, #4]
    1044:	add	fp, sp, #4
    1048:	sub	sp, sp, #8
    104c:	str	r0, [fp, #-8]
    1050:	ldr	r3, [fp, #-8]
    1054:	cmp	r3, #0
    1058:	beq	1108 <raw_delete+0xcc>
    105c:	ldr	r3, [fp, #-8]
    1060:	ldr	r3, [r3, #16]
    1064:	cmp	r3, #0
    1068:	beq	107c <raw_delete+0x40>
    106c:	ldr	r3, [fp, #-8]
    1070:	ldr	r3, [r3, #16]
    1074:	mov	r0, r3
    1078:	bl	0 <free>
    107c:	ldr	r3, [fp, #-8]
    1080:	ldr	r3, [r3, #20]
    1084:	cmp	r3, #0
    1088:	beq	109c <raw_delete+0x60>
    108c:	ldr	r3, [fp, #-8]
    1090:	ldr	r3, [r3, #20]
    1094:	mov	r0, r3
    1098:	bl	0 <free>
    109c:	ldr	r3, [fp, #-8]
    10a0:	ldr	r3, [r3, #32]
    10a4:	cmp	r3, #0
    10a8:	beq	10bc <raw_delete+0x80>
    10ac:	ldr	r3, [fp, #-8]
    10b0:	ldr	r3, [r3, #32]
    10b4:	mov	r0, r3
    10b8:	bl	0 <coda_expression_delete>
    10bc:	ldr	r3, [fp, #-8]
    10c0:	ldr	r3, [r3, #36]	; 0x24
    10c4:	cmp	r3, #0
    10c8:	beq	10dc <raw_delete+0xa0>
    10cc:	ldr	r3, [fp, #-8]
    10d0:	ldr	r3, [r3, #36]	; 0x24
    10d4:	mov	r0, r3
    10d8:	bl	123c <coda_type_release>
    10dc:	ldr	r3, [fp, #-8]
    10e0:	ldr	r3, [r3, #44]	; 0x2c
    10e4:	cmp	r3, #0
    10e8:	beq	10fc <raw_delete+0xc0>
    10ec:	ldr	r3, [fp, #-8]
    10f0:	ldr	r3, [r3, #44]	; 0x2c
    10f4:	mov	r0, r3
    10f8:	bl	0 <free>
    10fc:	ldr	r0, [fp, #-8]
    1100:	bl	0 <free>
    1104:	b	110c <raw_delete+0xd0>
    1108:	nop	{0}
    110c:	sub	sp, fp, #4
    1110:	ldr	fp, [sp]
    1114:	add	sp, sp, #4
    1118:	pop	{pc}		; (ldr pc, [sp], #4)

0000111c <special_delete>:
    111c:	str	fp, [sp, #-8]!
    1120:	str	lr, [sp, #4]
    1124:	add	fp, sp, #4
    1128:	sub	sp, sp, #8
    112c:	str	r0, [fp, #-8]
    1130:	ldr	r3, [fp, #-8]
    1134:	cmp	r3, #0
    1138:	beq	1228 <special_delete+0x10c>
    113c:	ldr	r3, [fp, #-8]
    1140:	ldr	r3, [r3, #16]
    1144:	cmp	r3, #0
    1148:	beq	115c <special_delete+0x40>
    114c:	ldr	r3, [fp, #-8]
    1150:	ldr	r3, [r3, #16]
    1154:	mov	r0, r3
    1158:	bl	0 <free>
    115c:	ldr	r3, [fp, #-8]
    1160:	ldr	r3, [r3, #20]
    1164:	cmp	r3, #0
    1168:	beq	117c <special_delete+0x60>
    116c:	ldr	r3, [fp, #-8]
    1170:	ldr	r3, [r3, #20]
    1174:	mov	r0, r3
    1178:	bl	0 <free>
    117c:	ldr	r3, [fp, #-8]
    1180:	ldr	r3, [r3, #32]
    1184:	cmp	r3, #0
    1188:	beq	119c <special_delete+0x80>
    118c:	ldr	r3, [fp, #-8]
    1190:	ldr	r3, [r3, #32]
    1194:	mov	r0, r3
    1198:	bl	0 <coda_expression_delete>
    119c:	ldr	r3, [fp, #-8]
    11a0:	ldr	r3, [r3, #36]	; 0x24
    11a4:	cmp	r3, #0
    11a8:	beq	11bc <special_delete+0xa0>
    11ac:	ldr	r3, [fp, #-8]
    11b0:	ldr	r3, [r3, #36]	; 0x24
    11b4:	mov	r0, r3
    11b8:	bl	123c <coda_type_release>
    11bc:	ldr	r3, [fp, #-8]
    11c0:	ldr	r3, [r3, #44]	; 0x2c
    11c4:	cmp	r3, #0
    11c8:	beq	11dc <special_delete+0xc0>
    11cc:	ldr	r3, [fp, #-8]
    11d0:	ldr	r3, [r3, #44]	; 0x2c
    11d4:	mov	r0, r3
    11d8:	bl	123c <coda_type_release>
    11dc:	ldr	r3, [fp, #-8]
    11e0:	ldr	r3, [r3, #48]	; 0x30
    11e4:	cmp	r3, #0
    11e8:	beq	11fc <special_delete+0xe0>
    11ec:	ldr	r3, [fp, #-8]
    11f0:	ldr	r3, [r3, #48]	; 0x30
    11f4:	mov	r0, r3
    11f8:	bl	0 <free>
    11fc:	ldr	r3, [fp, #-8]
    1200:	ldr	r3, [r3, #52]	; 0x34
    1204:	cmp	r3, #0
    1208:	beq	121c <special_delete+0x100>
    120c:	ldr	r3, [fp, #-8]
    1210:	ldr	r3, [r3, #52]	; 0x34
    1214:	mov	r0, r3
    1218:	bl	0 <coda_expression_delete>
    121c:	ldr	r0, [fp, #-8]
    1220:	bl	0 <free>
    1224:	b	122c <special_delete+0x110>
    1228:	nop	{0}
    122c:	sub	sp, fp, #4
    1230:	ldr	fp, [sp]
    1234:	add	sp, sp, #4
    1238:	pop	{pc}		; (ldr pc, [sp], #4)

0000123c <coda_type_release>:
    123c:	str	fp, [sp, #-8]!
    1240:	str	lr, [sp, #4]
    1244:	add	fp, sp, #4
    1248:	sub	sp, sp, #8
    124c:	str	r0, [fp, #-8]
    1250:	ldr	r3, [fp, #-8]
    1254:	cmp	r3, #0
    1258:	beq	1300 <coda_type_release+0xc4>
    125c:	ldr	r3, [fp, #-8]
    1260:	ldr	r3, [r3, #4]
    1264:	cmp	r3, #0
    1268:	ble	1284 <coda_type_release+0x48>
    126c:	ldr	r3, [fp, #-8]
    1270:	ldr	r3, [r3, #4]
    1274:	sub	r2, r3, #1
    1278:	ldr	r3, [fp, #-8]
    127c:	str	r2, [r3, #4]
    1280:	b	1304 <coda_type_release+0xc8>
    1284:	ldr	r3, [fp, #-8]
    1288:	ldr	r3, [r3, #8]
    128c:	cmp	r3, #6
    1290:	ldrls	pc, [pc, r3, lsl #2]
    1294:	b	1304 <coda_type_release+0xc8>
    1298:	.word	0x000012b4
    129c:	.word	0x000012c0
    12a0:	.word	0x000012cc
    12a4:	.word	0x000012cc
    12a8:	.word	0x000012d8
    12ac:	.word	0x000012e4
    12b0:	.word	0x000012f0
    12b4:	ldr	r0, [fp, #-8]
    12b8:	bl	b64 <record_delete>
    12bc:	b	1304 <coda_type_release+0xc8>
    12c0:	ldr	r0, [fp, #-8]
    12c4:	bl	cf0 <array_delete>
    12c8:	b	1304 <coda_type_release+0xc8>
    12cc:	ldr	r0, [fp, #-8]
    12d0:	bl	e3c <number_delete>
    12d4:	b	1304 <coda_type_release+0xc8>
    12d8:	ldr	r0, [fp, #-8]
    12dc:	bl	f5c <text_delete>
    12e0:	b	1304 <coda_type_release+0xc8>
    12e4:	ldr	r0, [fp, #-8]
    12e8:	bl	103c <raw_delete>
    12ec:	b	1304 <coda_type_release+0xc8>
    12f0:	ldr	r0, [fp, #-8]
    12f4:	bl	111c <special_delete>
    12f8:	nop	{0}
    12fc:	b	1304 <coda_type_release+0xc8>
    1300:	nop	{0}
    1304:	sub	sp, fp, #4
    1308:	ldr	fp, [sp]
    130c:	add	sp, sp, #4
    1310:	pop	{pc}		; (ldr pc, [sp], #4)

00001314 <coda_type_set_read_type>:
    1314:	str	r4, [sp, #-12]!
    1318:	str	fp, [sp, #4]
    131c:	str	lr, [sp, #8]
    1320:	add	fp, sp, #8
    1324:	sub	sp, sp, #12
    1328:	str	r0, [fp, #-16]
    132c:	str	r1, [fp, #-20]	; 0xffffffec
    1330:	ldr	r3, [fp, #-16]
    1334:	cmp	r3, #0
    1338:	bne	1360 <coda_type_set_read_type+0x4c>
    133c:	movw	r3, #710	; 0x2c6
    1340:	movw	r2, #0
    1344:	movt	r2, #0
    1348:	movw	r1, #0
    134c:	movt	r1, #0
    1350:	mvn	r0, #99	; 0x63
    1354:	bl	0 <coda_set_error>
    1358:	mvn	r3, #0
    135c:	b	14e0 <coda_type_set_read_type+0x1cc>
    1360:	ldr	r3, [fp, #-16]
    1364:	ldr	r3, [r3, #8]
    1368:	cmp	r3, #6
    136c:	ldrls	pc, [pc, r3, lsl #2]
    1370:	b	14a4 <coda_type_set_read_type+0x190>
    1374:	.word	0x00001390
    1378:	.word	0x00001390
    137c:	.word	0x000013c4
    1380:	.word	0x00001438
    1384:	.word	0x00001464
    1388:	.word	0x00001390
    138c:	.word	0x00001390
    1390:	ldr	r3, [fp, #-16]
    1394:	ldr	r3, [r3, #8]
    1398:	mov	r0, r3
    139c:	bl	627c <coda_type_get_class_name>
    13a0:	mov	r3, r0
    13a4:	mov	r2, r3
    13a8:	movw	r1, #0
    13ac:	movt	r1, #0
    13b0:	movw	r0, #65136	; 0xfe70
    13b4:	movt	r0, #65535	; 0xffff
    13b8:	bl	0 <coda_set_error>
    13bc:	mvn	r3, #0
    13c0:	b	14e0 <coda_type_set_read_type+0x1cc>
    13c4:	ldr	r3, [fp, #-20]	; 0xffffffec
    13c8:	cmp	r3, #0
    13cc:	beq	1424 <coda_type_set_read_type+0x110>
    13d0:	ldr	r3, [fp, #-20]	; 0xffffffec
    13d4:	cmp	r3, #1
    13d8:	beq	1424 <coda_type_set_read_type+0x110>
    13dc:	ldr	r3, [fp, #-20]	; 0xffffffec
    13e0:	cmp	r3, #2
    13e4:	beq	1424 <coda_type_set_read_type+0x110>
    13e8:	ldr	r3, [fp, #-20]	; 0xffffffec
    13ec:	cmp	r3, #3
    13f0:	beq	1424 <coda_type_set_read_type+0x110>
    13f4:	ldr	r3, [fp, #-20]	; 0xffffffec
    13f8:	cmp	r3, #4
    13fc:	beq	1424 <coda_type_set_read_type+0x110>
    1400:	ldr	r3, [fp, #-20]	; 0xffffffec
    1404:	cmp	r3, #5
    1408:	beq	1424 <coda_type_set_read_type+0x110>
    140c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1410:	cmp	r3, #6
    1414:	beq	1424 <coda_type_set_read_type+0x110>
    1418:	ldr	r3, [fp, #-20]	; 0xffffffec
    141c:	cmp	r3, #7
    1420:	bne	1490 <coda_type_set_read_type+0x17c>
    1424:	ldr	r3, [fp, #-16]
    1428:	ldr	r2, [fp, #-20]	; 0xffffffec
    142c:	str	r2, [r3, #12]
    1430:	mov	r3, #0
    1434:	b	14e0 <coda_type_set_read_type+0x1cc>
    1438:	ldr	r3, [fp, #-20]	; 0xffffffec
    143c:	cmp	r3, #8
    1440:	beq	1450 <coda_type_set_read_type+0x13c>
    1444:	ldr	r3, [fp, #-20]	; 0xffffffec
    1448:	cmp	r3, #9
    144c:	bne	1498 <coda_type_set_read_type+0x184>
    1450:	ldr	r3, [fp, #-16]
    1454:	ldr	r2, [fp, #-20]	; 0xffffffec
    1458:	str	r2, [r3, #12]
    145c:	mov	r3, #0
    1460:	b	14e0 <coda_type_set_read_type+0x1cc>
    1464:	ldr	r3, [fp, #-20]	; 0xffffffec
    1468:	cmp	r3, #10
    146c:	beq	147c <coda_type_set_read_type+0x168>
    1470:	ldr	r3, [fp, #-20]	; 0xffffffec
    1474:	cmp	r3, #11
    1478:	bne	14a0 <coda_type_set_read_type+0x18c>
    147c:	ldr	r3, [fp, #-16]
    1480:	ldr	r2, [fp, #-20]	; 0xffffffec
    1484:	str	r2, [r3, #12]
    1488:	mov	r3, #0
    148c:	b	14e0 <coda_type_set_read_type+0x1cc>
    1490:	nop	{0}
    1494:	b	14a4 <coda_type_set_read_type+0x190>
    1498:	nop	{0}
    149c:	b	14a4 <coda_type_set_read_type+0x190>
    14a0:	nop	{0}
    14a4:	ldr	r0, [fp, #-20]	; 0xffffffec
    14a8:	bl	6324 <coda_type_get_native_type_name>
    14ac:	mov	r4, r0
    14b0:	ldr	r3, [fp, #-16]
    14b4:	ldr	r3, [r3, #8]
    14b8:	mov	r0, r3
    14bc:	bl	627c <coda_type_get_class_name>
    14c0:	mov	r3, r0
    14c4:	mov	r2, r4
    14c8:	movw	r1, #0
    14cc:	movt	r1, #0
    14d0:	movw	r0, #65136	; 0xfe70
    14d4:	movt	r0, #65535	; 0xffff
    14d8:	bl	0 <coda_set_error>
    14dc:	mvn	r3, #0
    14e0:	mov	r0, r3
    14e4:	sub	sp, fp, #8
    14e8:	ldr	r4, [sp]
    14ec:	ldr	fp, [sp, #4]
    14f0:	add	sp, sp, #8
    14f4:	pop	{pc}		; (ldr pc, [sp], #4)

000014f8 <coda_type_set_name>:
    14f8:	str	fp, [sp, #-8]!
    14fc:	str	lr, [sp, #4]
    1500:	add	fp, sp, #4
    1504:	sub	sp, sp, #16
    1508:	str	r0, [fp, #-16]
    150c:	str	r1, [fp, #-20]	; 0xffffffec
    1510:	mov	r3, #0
    1514:	str	r3, [fp, #-8]
    1518:	ldr	r3, [fp, #-16]
    151c:	cmp	r3, #0
    1520:	bne	1548 <coda_type_set_name+0x50>
    1524:	movw	r3, #759	; 0x2f7
    1528:	movw	r2, #0
    152c:	movt	r2, #0
    1530:	movw	r1, #0
    1534:	movt	r1, #0
    1538:	mvn	r0, #99	; 0x63
    153c:	bl	0 <coda_set_error>
    1540:	mvn	r3, #0
    1544:	b	1628 <coda_type_set_name+0x130>
    1548:	ldr	r3, [fp, #-20]	; 0xffffffec
    154c:	cmp	r3, #0
    1550:	bne	1578 <coda_type_set_name+0x80>
    1554:	mov	r3, #764	; 0x2fc
    1558:	movw	r2, #0
    155c:	movt	r2, #0
    1560:	movw	r1, #0
    1564:	movt	r1, #0
    1568:	mvn	r0, #99	; 0x63
    156c:	bl	0 <coda_set_error>
    1570:	mvn	r3, #0
    1574:	b	1628 <coda_type_set_name+0x130>
    1578:	ldr	r3, [fp, #-16]
    157c:	ldr	r3, [r3, #16]
    1580:	cmp	r3, #0
    1584:	beq	15a4 <coda_type_set_name+0xac>
    1588:	movw	r1, #0
    158c:	movt	r1, #0
    1590:	movw	r0, #65136	; 0xfe70
    1594:	movt	r0, #65535	; 0xffff
    1598:	bl	0 <coda_set_error>
    159c:	mvn	r3, #0
    15a0:	b	1628 <coda_type_set_name+0x130>
    15a4:	ldr	r0, [fp, #-20]	; 0xffffffec
    15a8:	bl	0 <coda_is_identifier>
    15ac:	mov	r3, r0
    15b0:	cmp	r3, #0
    15b4:	bne	15d8 <coda_type_set_name+0xe0>
    15b8:	ldr	r2, [fp, #-20]	; 0xffffffec
    15bc:	movw	r1, #0
    15c0:	movt	r1, #0
    15c4:	movw	r0, #65136	; 0xfe70
    15c8:	movt	r0, #65535	; 0xffff
    15cc:	bl	0 <coda_set_error>
    15d0:	mvn	r3, #0
    15d4:	b	1628 <coda_type_set_name+0x130>
    15d8:	ldr	r0, [fp, #-20]	; 0xffffffec
    15dc:	bl	0 <strdup>
    15e0:	mov	r3, r0
    15e4:	str	r3, [fp, #-8]
    15e8:	ldr	r3, [fp, #-8]
    15ec:	cmp	r3, #0
    15f0:	bne	1618 <coda_type_set_name+0x120>
    15f4:	movw	r3, #781	; 0x30d
    15f8:	movw	r2, #0
    15fc:	movt	r2, #0
    1600:	movw	r1, #0
    1604:	movt	r1, #0
    1608:	mvn	r0, #0
    160c:	bl	0 <coda_set_error>
    1610:	mvn	r3, #0
    1614:	b	1628 <coda_type_set_name+0x130>
    1618:	ldr	r3, [fp, #-16]
    161c:	ldr	r2, [fp, #-8]
    1620:	str	r2, [r3, #16]
    1624:	mov	r3, #0
    1628:	mov	r0, r3
    162c:	sub	sp, fp, #4
    1630:	ldr	fp, [sp]
    1634:	add	sp, sp, #4
    1638:	pop	{pc}		; (ldr pc, [sp], #4)

0000163c <coda_type_set_description>:
    163c:	str	fp, [sp, #-8]!
    1640:	str	lr, [sp, #4]
    1644:	add	fp, sp, #4
    1648:	sub	sp, sp, #16
    164c:	str	r0, [fp, #-16]
    1650:	str	r1, [fp, #-20]	; 0xffffffec
    1654:	mov	r3, #0
    1658:	str	r3, [fp, #-8]
    165c:	ldr	r3, [fp, #-16]
    1660:	cmp	r3, #0
    1664:	bne	168c <coda_type_set_description+0x50>
    1668:	movw	r3, #795	; 0x31b
    166c:	movw	r2, #0
    1670:	movt	r2, #0
    1674:	movw	r1, #0
    1678:	movt	r1, #0
    167c:	mvn	r0, #99	; 0x63
    1680:	bl	0 <coda_set_error>
    1684:	mvn	r3, #0
    1688:	b	1744 <coda_type_set_description+0x108>
    168c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1690:	cmp	r3, #0
    1694:	bne	16bc <coda_type_set_description+0x80>
    1698:	mov	r3, #800	; 0x320
    169c:	movw	r2, #0
    16a0:	movt	r2, #0
    16a4:	movw	r1, #0
    16a8:	movt	r1, #0
    16ac:	mvn	r0, #99	; 0x63
    16b0:	bl	0 <coda_set_error>
    16b4:	mvn	r3, #0
    16b8:	b	1744 <coda_type_set_description+0x108>
    16bc:	ldr	r3, [fp, #-16]
    16c0:	ldr	r3, [r3, #20]
    16c4:	cmp	r3, #0
    16c8:	beq	16e8 <coda_type_set_description+0xac>
    16cc:	movw	r1, #0
    16d0:	movt	r1, #0
    16d4:	movw	r0, #65136	; 0xfe70
    16d8:	movt	r0, #65535	; 0xffff
    16dc:	bl	0 <coda_set_error>
    16e0:	mvn	r3, #0
    16e4:	b	1744 <coda_type_set_description+0x108>
    16e8:	ldr	r3, [fp, #-20]	; 0xffffffec
    16ec:	cmp	r3, #0
    16f0:	beq	1734 <coda_type_set_description+0xf8>
    16f4:	ldr	r0, [fp, #-20]	; 0xffffffec
    16f8:	bl	0 <strdup>
    16fc:	mov	r3, r0
    1700:	str	r3, [fp, #-8]
    1704:	ldr	r3, [fp, #-8]
    1708:	cmp	r3, #0
    170c:	bne	1734 <coda_type_set_description+0xf8>
    1710:	movw	r3, #814	; 0x32e
    1714:	movw	r2, #0
    1718:	movt	r2, #0
    171c:	movw	r1, #0
    1720:	movt	r1, #0
    1724:	mvn	r0, #0
    1728:	bl	0 <coda_set_error>
    172c:	mvn	r3, #0
    1730:	b	1744 <coda_type_set_description+0x108>
    1734:	ldr	r3, [fp, #-16]
    1738:	ldr	r2, [fp, #-8]
    173c:	str	r2, [r3, #20]
    1740:	mov	r3, #0
    1744:	mov	r0, r3
    1748:	sub	sp, fp, #4
    174c:	ldr	fp, [sp]
    1750:	add	sp, sp, #4
    1754:	pop	{pc}		; (ldr pc, [sp], #4)

00001758 <coda_type_set_bit_size>:
    1758:	strd	r4, [sp, #-16]!
    175c:	str	fp, [sp, #8]
    1760:	str	lr, [sp, #12]
    1764:	add	fp, sp, #12
    1768:	sub	sp, sp, #64	; 0x40
    176c:	str	r0, [fp, #-64]	; 0xffffffc0
    1770:	strd	r2, [fp, #-76]	; 0xffffffb4
    1774:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1778:	cmp	r3, #0
    177c:	bne	17a4 <coda_type_set_bit_size+0x4c>
    1780:	movw	r3, #827	; 0x33b
    1784:	movw	r2, #0
    1788:	movt	r2, #0
    178c:	movw	r1, #0
    1790:	movt	r1, #0
    1794:	mvn	r0, #99	; 0x63
    1798:	bl	0 <coda_set_error>
    179c:	mvn	r3, #0
    17a0:	b	1914 <coda_type_set_bit_size+0x1bc>
    17a4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    17a8:	ldrd	r2, [r3, #24]
    17ac:	cmp	r2, #0
    17b0:	sbcs	r3, r3, #0
    17b4:	blt	17d4 <coda_type_set_bit_size+0x7c>
    17b8:	movw	r1, #0
    17bc:	movt	r1, #0
    17c0:	movw	r0, #65136	; 0xfe70
    17c4:	movt	r0, #65535	; 0xffff
    17c8:	bl	0 <coda_set_error>
    17cc:	mvn	r3, #0
    17d0:	b	1914 <coda_type_set_bit_size+0x1bc>
    17d4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    17d8:	ldr	r3, [r3, #32]
    17dc:	cmp	r3, #0
    17e0:	beq	1800 <coda_type_set_bit_size+0xa8>
    17e4:	movw	r1, #0
    17e8:	movt	r1, #0
    17ec:	movw	r0, #65136	; 0xfe70
    17f0:	movt	r0, #65535	; 0xffff
    17f4:	bl	0 <coda_set_error>
    17f8:	mvn	r3, #0
    17fc:	b	1914 <coda_type_set_bit_size+0x1bc>
    1800:	ldrd	r2, [fp, #-76]	; 0xffffffb4
    1804:	cmp	r2, #0
    1808:	sbcs	r3, r3, #0
    180c:	bge	1844 <coda_type_set_bit_size+0xec>
    1810:	sub	r3, fp, #36	; 0x24
    1814:	mov	r2, r3
    1818:	ldrd	r0, [fp, #-76]	; 0xffffffb4
    181c:	bl	0 <coda_str64>
    1820:	sub	r3, fp, #36	; 0x24
    1824:	mov	r2, r3
    1828:	movw	r1, #0
    182c:	movt	r1, #0
    1830:	movw	r0, #65136	; 0xfe70
    1834:	movt	r0, #65535	; 0xffff
    1838:	bl	0 <coda_set_error>
    183c:	mvn	r3, #0
    1840:	b	1914 <coda_type_set_bit_size+0x1bc>
    1844:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1848:	ldr	r3, [r3]
    184c:	cmp	r3, #0
    1850:	bne	18a4 <coda_type_set_bit_size+0x14c>
    1854:	ldrd	r2, [fp, #-76]	; 0xffffffb4
    1858:	mov	r0, #7
    185c:	mov	r1, #0
    1860:	and	r4, r2, r0
    1864:	and	r5, r3, r1
    1868:	orrs	r3, r4, r5
    186c:	beq	18a4 <coda_type_set_bit_size+0x14c>
    1870:	sub	r3, fp, #60	; 0x3c
    1874:	mov	r2, r3
    1878:	ldrd	r0, [fp, #-76]	; 0xffffffb4
    187c:	bl	0 <coda_str64>
    1880:	sub	r3, fp, #60	; 0x3c
    1884:	mov	r2, r3
    1888:	movw	r1, #0
    188c:	movt	r1, #0
    1890:	movw	r0, #65136	; 0xfe70
    1894:	movt	r0, #65535	; 0xffff
    1898:	bl	0 <coda_set_error>
    189c:	mvn	r3, #0
    18a0:	b	1914 <coda_type_set_bit_size+0x1bc>
    18a4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    18a8:	ldr	r3, [r3, #8]
    18ac:	cmp	r3, #6
    18b0:	ldrls	pc, [pc, r3, lsl #2]
    18b4:	b	1904 <coda_type_set_bit_size+0x1ac>
    18b8:	.word	0x00001904
    18bc:	.word	0x00001904
    18c0:	.word	0x000018d4
    18c4:	.word	0x000018d4
    18c8:	.word	0x00001904
    18cc:	.word	0x00001904
    18d0:	.word	0x00001904
    18d4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    18d8:	ldr	r3, [r3, #52]	; 0x34
    18dc:	cmp	r3, #0
    18e0:	beq	1900 <coda_type_set_bit_size+0x1a8>
    18e4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    18e8:	ldr	r1, [r3, #52]	; 0x34
    18ec:	ldrd	r2, [fp, #-76]	; 0xffffffb4
    18f0:	ldr	r0, [fp, #-64]	; 0xffffffc0
    18f4:	bl	91c <mapping_type_set_bit_size>
    18f8:	mov	r3, r0
    18fc:	b	1914 <coda_type_set_bit_size+0x1bc>
    1900:	nop	{0}
    1904:	ldr	r1, [fp, #-64]	; 0xffffffc0
    1908:	ldrd	r2, [fp, #-76]	; 0xffffffb4
    190c:	strd	r2, [r1, #24]
    1910:	mov	r3, #0
    1914:	mov	r0, r3
    1918:	sub	sp, fp, #12
    191c:	ldrd	r4, [sp]
    1920:	ldr	fp, [sp, #8]
    1924:	add	sp, sp, #12
    1928:	pop	{pc}		; (ldr pc, [sp], #4)

0000192c <coda_type_set_byte_size>:
    192c:	str	fp, [sp, #-8]!
    1930:	str	lr, [sp, #4]
    1934:	add	fp, sp, #4
    1938:	sub	sp, sp, #16
    193c:	str	r0, [fp, #-8]
    1940:	strd	r2, [fp, #-20]	; 0xffffffec
    1944:	ldrd	r0, [fp, #-20]	; 0xffffffec
    1948:	mov	r2, #0
    194c:	mov	r3, #0
    1950:	lsl	r3, r1, #3
    1954:	orr	r3, r3, r0, lsr #29
    1958:	lsl	r2, r0, #3
    195c:	ldr	r0, [fp, #-8]
    1960:	bl	1758 <coda_type_set_bit_size>
    1964:	mov	r3, r0
    1968:	mov	r0, r3
    196c:	sub	sp, fp, #4
    1970:	ldr	fp, [sp]
    1974:	add	sp, sp, #4
    1978:	pop	{pc}		; (ldr pc, [sp], #4)

0000197c <coda_type_set_bit_size_expression>:
    197c:	str	fp, [sp, #-8]!
    1980:	str	lr, [sp, #4]
    1984:	add	fp, sp, #4
    1988:	sub	sp, sp, #8
    198c:	str	r0, [fp, #-8]
    1990:	str	r1, [fp, #-12]
    1994:	ldr	r3, [fp, #-8]
    1998:	cmp	r3, #0
    199c:	bne	19c4 <coda_type_set_bit_size_expression+0x48>
    19a0:	mov	r3, #892	; 0x37c
    19a4:	movw	r2, #0
    19a8:	movt	r2, #0
    19ac:	movw	r1, #0
    19b0:	movt	r1, #0
    19b4:	mvn	r0, #99	; 0x63
    19b8:	bl	0 <coda_set_error>
    19bc:	mvn	r3, #0
    19c0:	b	1ac0 <coda_type_set_bit_size_expression+0x144>
    19c4:	ldr	r3, [fp, #-12]
    19c8:	cmp	r3, #0
    19cc:	bne	19f4 <coda_type_set_bit_size_expression+0x78>
    19d0:	movw	r3, #897	; 0x381
    19d4:	movw	r2, #0
    19d8:	movt	r2, #0
    19dc:	movw	r1, #0
    19e0:	movt	r1, #0
    19e4:	mvn	r0, #99	; 0x63
    19e8:	bl	0 <coda_set_error>
    19ec:	mvn	r3, #0
    19f0:	b	1ac0 <coda_type_set_bit_size_expression+0x144>
    19f4:	ldr	r3, [fp, #-8]
    19f8:	ldr	r3, [r3, #32]
    19fc:	cmp	r3, #0
    1a00:	beq	1a20 <coda_type_set_bit_size_expression+0xa4>
    1a04:	movw	r1, #0
    1a08:	movt	r1, #0
    1a0c:	movw	r0, #65136	; 0xfe70
    1a10:	movt	r0, #65535	; 0xffff
    1a14:	bl	0 <coda_set_error>
    1a18:	mvn	r3, #0
    1a1c:	b	1ac0 <coda_type_set_bit_size_expression+0x144>
    1a20:	ldr	r3, [fp, #-8]
    1a24:	ldr	r3, [r3, #8]
    1a28:	cmp	r3, #0
    1a2c:	beq	1a40 <coda_type_set_bit_size_expression+0xc4>
    1a30:	ldr	r3, [fp, #-8]
    1a34:	ldr	r3, [r3, #8]
    1a38:	cmp	r3, #1
    1a3c:	bne	1a70 <coda_type_set_bit_size_expression+0xf4>
    1a40:	ldr	r3, [fp, #-8]
    1a44:	ldrd	r2, [r3, #24]
    1a48:	cmp	r2, #1
    1a4c:	sbcs	r3, r3, #0
    1a50:	blt	1aa0 <coda_type_set_bit_size_expression+0x124>
    1a54:	movw	r1, #0
    1a58:	movt	r1, #0
    1a5c:	movw	r0, #65136	; 0xfe70
    1a60:	movt	r0, #65535	; 0xffff
    1a64:	bl	0 <coda_set_error>
    1a68:	mvn	r3, #0
    1a6c:	b	1ac0 <coda_type_set_bit_size_expression+0x144>
    1a70:	ldr	r3, [fp, #-8]
    1a74:	ldrd	r2, [r3, #24]
    1a78:	cmp	r2, #0
    1a7c:	sbcs	r3, r3, #0
    1a80:	blt	1aa0 <coda_type_set_bit_size_expression+0x124>
    1a84:	movw	r1, #0
    1a88:	movt	r1, #0
    1a8c:	movw	r0, #65136	; 0xfe70
    1a90:	movt	r0, #65535	; 0xffff
    1a94:	bl	0 <coda_set_error>
    1a98:	mvn	r3, #0
    1a9c:	b	1ac0 <coda_type_set_bit_size_expression+0x144>
    1aa0:	ldr	r3, [fp, #-8]
    1aa4:	ldr	r2, [fp, #-12]
    1aa8:	str	r2, [r3, #32]
    1aac:	ldr	r1, [fp, #-8]
    1ab0:	mvn	r2, #0
    1ab4:	mvn	r3, #0
    1ab8:	strd	r2, [r1, #24]
    1abc:	mov	r3, #0
    1ac0:	mov	r0, r3
    1ac4:	sub	sp, fp, #4
    1ac8:	ldr	fp, [sp]
    1acc:	add	sp, sp, #4
    1ad0:	pop	{pc}		; (ldr pc, [sp], #4)

00001ad4 <coda_type_set_byte_size_expression>:
    1ad4:	str	fp, [sp, #-8]!
    1ad8:	str	lr, [sp, #4]
    1adc:	add	fp, sp, #4
    1ae0:	sub	sp, sp, #8
    1ae4:	str	r0, [fp, #-8]
    1ae8:	str	r1, [fp, #-12]
    1aec:	ldr	r3, [fp, #-8]
    1af0:	cmp	r3, #0
    1af4:	bne	1b1c <coda_type_set_byte_size_expression+0x48>
    1af8:	movw	r3, #931	; 0x3a3
    1afc:	movw	r2, #0
    1b00:	movt	r2, #0
    1b04:	movw	r1, #0
    1b08:	movt	r1, #0
    1b0c:	mvn	r0, #99	; 0x63
    1b10:	bl	0 <coda_set_error>
    1b14:	mvn	r3, #0
    1b18:	b	1c18 <coda_type_set_byte_size_expression+0x144>
    1b1c:	ldr	r3, [fp, #-12]
    1b20:	cmp	r3, #0
    1b24:	bne	1b4c <coda_type_set_byte_size_expression+0x78>
    1b28:	mov	r3, #936	; 0x3a8
    1b2c:	movw	r2, #0
    1b30:	movt	r2, #0
    1b34:	movw	r1, #0
    1b38:	movt	r1, #0
    1b3c:	mvn	r0, #99	; 0x63
    1b40:	bl	0 <coda_set_error>
    1b44:	mvn	r3, #0
    1b48:	b	1c18 <coda_type_set_byte_size_expression+0x144>
    1b4c:	ldr	r3, [fp, #-8]
    1b50:	ldr	r3, [r3, #32]
    1b54:	cmp	r3, #0
    1b58:	beq	1b78 <coda_type_set_byte_size_expression+0xa4>
    1b5c:	movw	r1, #0
    1b60:	movt	r1, #0
    1b64:	movw	r0, #65136	; 0xfe70
    1b68:	movt	r0, #65535	; 0xffff
    1b6c:	bl	0 <coda_set_error>
    1b70:	mvn	r3, #0
    1b74:	b	1c18 <coda_type_set_byte_size_expression+0x144>
    1b78:	ldr	r3, [fp, #-8]
    1b7c:	ldr	r3, [r3, #8]
    1b80:	cmp	r3, #0
    1b84:	beq	1b98 <coda_type_set_byte_size_expression+0xc4>
    1b88:	ldr	r3, [fp, #-8]
    1b8c:	ldr	r3, [r3, #8]
    1b90:	cmp	r3, #1
    1b94:	bne	1bc8 <coda_type_set_byte_size_expression+0xf4>
    1b98:	ldr	r3, [fp, #-8]
    1b9c:	ldrd	r2, [r3, #24]
    1ba0:	cmp	r2, #1
    1ba4:	sbcs	r3, r3, #0
    1ba8:	blt	1bf8 <coda_type_set_byte_size_expression+0x124>
    1bac:	movw	r1, #0
    1bb0:	movt	r1, #0
    1bb4:	movw	r0, #65136	; 0xfe70
    1bb8:	movt	r0, #65535	; 0xffff
    1bbc:	bl	0 <coda_set_error>
    1bc0:	mvn	r3, #0
    1bc4:	b	1c18 <coda_type_set_byte_size_expression+0x144>
    1bc8:	ldr	r3, [fp, #-8]
    1bcc:	ldrd	r2, [r3, #24]
    1bd0:	cmp	r2, #0
    1bd4:	sbcs	r3, r3, #0
    1bd8:	blt	1bf8 <coda_type_set_byte_size_expression+0x124>
    1bdc:	movw	r1, #0
    1be0:	movt	r1, #0
    1be4:	movw	r0, #65136	; 0xfe70
    1be8:	movt	r0, #65535	; 0xffff
    1bec:	bl	0 <coda_set_error>
    1bf0:	mvn	r3, #0
    1bf4:	b	1c18 <coda_type_set_byte_size_expression+0x144>
    1bf8:	ldr	r3, [fp, #-8]
    1bfc:	ldr	r2, [fp, #-12]
    1c00:	str	r2, [r3, #32]
    1c04:	ldr	r1, [fp, #-8]
    1c08:	mvn	r2, #7
    1c0c:	mvn	r3, #0
    1c10:	strd	r2, [r1, #24]
    1c14:	mov	r3, #0
    1c18:	mov	r0, r3
    1c1c:	sub	sp, fp, #4
    1c20:	ldr	fp, [sp]
    1c24:	add	sp, sp, #4
    1c28:	pop	{pc}		; (ldr pc, [sp], #4)

00001c2c <coda_type_add_attribute>:
    1c2c:	str	fp, [sp, #-8]!
    1c30:	str	lr, [sp, #4]
    1c34:	add	fp, sp, #4
    1c38:	sub	sp, sp, #8
    1c3c:	str	r0, [fp, #-8]
    1c40:	str	r1, [fp, #-12]
    1c44:	ldr	r3, [fp, #-8]
    1c48:	cmp	r3, #0
    1c4c:	bne	1c74 <coda_type_add_attribute+0x48>
    1c50:	movw	r3, #970	; 0x3ca
    1c54:	movw	r2, #0
    1c58:	movt	r2, #0
    1c5c:	movw	r1, #0
    1c60:	movt	r1, #0
    1c64:	mvn	r0, #99	; 0x63
    1c68:	bl	0 <coda_set_error>
    1c6c:	mvn	r3, #0
    1c70:	b	1d00 <coda_type_add_attribute+0xd4>
    1c74:	ldr	r3, [fp, #-12]
    1c78:	cmp	r3, #0
    1c7c:	bne	1ca4 <coda_type_add_attribute+0x78>
    1c80:	movw	r3, #975	; 0x3cf
    1c84:	movw	r2, #0
    1c88:	movt	r2, #0
    1c8c:	movw	r1, #0
    1c90:	movt	r1, #0
    1c94:	mvn	r0, #99	; 0x63
    1c98:	bl	0 <coda_set_error>
    1c9c:	mvn	r3, #0
    1ca0:	b	1d00 <coda_type_add_attribute+0xd4>
    1ca4:	ldr	r3, [fp, #-8]
    1ca8:	ldr	r3, [r3, #36]	; 0x24
    1cac:	cmp	r3, #0
    1cb0:	bne	1ce8 <coda_type_add_attribute+0xbc>
    1cb4:	ldr	r3, [fp, #-8]
    1cb8:	ldr	r3, [r3]
    1cbc:	mov	r0, r3
    1cc0:	bl	24f8 <coda_type_record_new>
    1cc4:	mov	r2, r0
    1cc8:	ldr	r3, [fp, #-8]
    1ccc:	str	r2, [r3, #36]	; 0x24
    1cd0:	ldr	r3, [fp, #-8]
    1cd4:	ldr	r3, [r3, #36]	; 0x24
    1cd8:	cmp	r3, #0
    1cdc:	bne	1ce8 <coda_type_add_attribute+0xbc>
    1ce0:	mvn	r3, #0
    1ce4:	b	1d00 <coda_type_add_attribute+0xd4>
    1ce8:	ldr	r3, [fp, #-8]
    1cec:	ldr	r3, [r3, #36]	; 0x24
    1cf0:	ldr	r1, [fp, #-12]
    1cf4:	mov	r0, r3
    1cf8:	bl	2f98 <coda_type_record_add_field>
    1cfc:	mov	r3, r0
    1d00:	mov	r0, r3
    1d04:	sub	sp, fp, #4
    1d08:	ldr	fp, [sp]
    1d0c:	add	sp, sp, #4
    1d10:	pop	{pc}		; (ldr pc, [sp], #4)

00001d14 <coda_type_set_attributes>:
    1d14:	str	fp, [sp, #-8]!
    1d18:	str	lr, [sp, #4]
    1d1c:	add	fp, sp, #4
    1d20:	sub	sp, sp, #8
    1d24:	str	r0, [fp, #-8]
    1d28:	str	r1, [fp, #-12]
    1d2c:	ldr	r3, [fp, #-8]
    1d30:	cmp	r3, #0
    1d34:	bne	1d5c <coda_type_set_attributes+0x48>
    1d38:	movw	r3, #993	; 0x3e1
    1d3c:	movw	r2, #0
    1d40:	movt	r2, #0
    1d44:	movw	r1, #0
    1d48:	movt	r1, #0
    1d4c:	mvn	r0, #99	; 0x63
    1d50:	bl	0 <coda_set_error>
    1d54:	mvn	r3, #0
    1d58:	b	1de4 <coda_type_set_attributes+0xd0>
    1d5c:	ldr	r3, [fp, #-12]
    1d60:	cmp	r3, #0
    1d64:	bne	1d8c <coda_type_set_attributes+0x78>
    1d68:	movw	r3, #998	; 0x3e6
    1d6c:	movw	r2, #0
    1d70:	movt	r2, #0
    1d74:	movw	r1, #0
    1d78:	movt	r1, #0
    1d7c:	mvn	r0, #99	; 0x63
    1d80:	bl	0 <coda_set_error>
    1d84:	mvn	r3, #0
    1d88:	b	1de4 <coda_type_set_attributes+0xd0>
    1d8c:	ldr	r3, [fp, #-8]
    1d90:	ldr	r3, [r3, #36]	; 0x24
    1d94:	cmp	r3, #0
    1d98:	beq	1dc0 <coda_type_set_attributes+0xac>
    1d9c:	movw	r3, #1003	; 0x3eb
    1da0:	movw	r2, #0
    1da4:	movt	r2, #0
    1da8:	movw	r1, #0
    1dac:	movt	r1, #0
    1db0:	mvn	r0, #99	; 0x63
    1db4:	bl	0 <coda_set_error>
    1db8:	mvn	r3, #0
    1dbc:	b	1de4 <coda_type_set_attributes+0xd0>
    1dc0:	ldr	r3, [fp, #-8]
    1dc4:	ldr	r2, [fp, #-12]
    1dc8:	str	r2, [r3, #36]	; 0x24
    1dcc:	ldr	r3, [fp, #-12]
    1dd0:	ldr	r3, [r3, #4]
    1dd4:	add	r2, r3, #1
    1dd8:	ldr	r3, [fp, #-12]
    1ddc:	str	r2, [r3, #4]
    1de0:	mov	r3, #0
    1de4:	mov	r0, r3
    1de8:	sub	sp, fp, #4
    1dec:	ldr	fp, [sp]
    1df0:	add	sp, sp, #4
    1df4:	pop	{pc}		; (ldr pc, [sp], #4)

00001df8 <coda_type_record_field_new>:
    1df8:	str	fp, [sp, #-8]!
    1dfc:	str	lr, [sp, #4]
    1e00:	add	fp, sp, #4
    1e04:	sub	sp, sp, #24
    1e08:	str	r0, [fp, #-16]
    1e0c:	ldr	r3, [fp, #-16]
    1e10:	cmp	r3, #0
    1e14:	bne	1e3c <coda_type_record_field_new+0x44>
    1e18:	movw	r3, #1017	; 0x3f9
    1e1c:	movw	r2, #0
    1e20:	movt	r2, #0
    1e24:	movw	r1, #0
    1e28:	movt	r1, #0
    1e2c:	mvn	r0, #99	; 0x63
    1e30:	bl	0 <coda_set_error>
    1e34:	mov	r3, #0
    1e38:	b	1f74 <coda_type_record_field_new+0x17c>
    1e3c:	ldr	r0, [fp, #-16]
    1e40:	bl	0 <coda_is_identifier>
    1e44:	mov	r3, r0
    1e48:	cmp	r3, #0
    1e4c:	bne	1e70 <coda_type_record_field_new+0x78>
    1e50:	ldr	r2, [fp, #-16]
    1e54:	movw	r1, #0
    1e58:	movt	r1, #0
    1e5c:	movw	r0, #65136	; 0xfe70
    1e60:	movt	r0, #65535	; 0xffff
    1e64:	bl	0 <coda_set_error>
    1e68:	mov	r3, #0
    1e6c:	b	1f74 <coda_type_record_field_new+0x17c>
    1e70:	mov	r0, #40	; 0x28
    1e74:	bl	0 <malloc>
    1e78:	mov	r3, r0
    1e7c:	str	r3, [fp, #-8]
    1e80:	ldr	r3, [fp, #-8]
    1e84:	cmp	r3, #0
    1e88:	bne	1eb8 <coda_type_record_field_new+0xc0>
    1e8c:	movw	r3, #1031	; 0x407
    1e90:	str	r3, [sp]
    1e94:	movw	r3, #0
    1e98:	movt	r3, #0
    1e9c:	mov	r2, #40	; 0x28
    1ea0:	movw	r1, #0
    1ea4:	movt	r1, #0
    1ea8:	mvn	r0, #0
    1eac:	bl	0 <coda_set_error>
    1eb0:	mov	r3, #0
    1eb4:	b	1f74 <coda_type_record_field_new+0x17c>
    1eb8:	ldr	r3, [fp, #-8]
    1ebc:	mov	r2, #0
    1ec0:	str	r2, [r3]
    1ec4:	ldr	r3, [fp, #-8]
    1ec8:	mov	r2, #0
    1ecc:	str	r2, [r3, #4]
    1ed0:	ldr	r3, [fp, #-8]
    1ed4:	mov	r2, #0
    1ed8:	str	r2, [r3, #8]
    1edc:	ldr	r3, [fp, #-8]
    1ee0:	mov	r2, #0
    1ee4:	str	r2, [r3, #12]
    1ee8:	ldr	r3, [fp, #-8]
    1eec:	mov	r2, #0
    1ef0:	strb	r2, [r3, #16]
    1ef4:	ldr	r3, [fp, #-8]
    1ef8:	mov	r2, #0
    1efc:	str	r2, [r3, #20]
    1f00:	ldr	r1, [fp, #-8]
    1f04:	mvn	r2, #0
    1f08:	mvn	r3, #0
    1f0c:	strd	r2, [r1, #24]
    1f10:	ldr	r3, [fp, #-8]
    1f14:	mov	r2, #0
    1f18:	str	r2, [r3, #32]
    1f1c:	ldr	r0, [fp, #-16]
    1f20:	bl	0 <strdup>
    1f24:	mov	r3, r0
    1f28:	mov	r2, r3
    1f2c:	ldr	r3, [fp, #-8]
    1f30:	str	r2, [r3]
    1f34:	ldr	r3, [fp, #-8]
    1f38:	ldr	r3, [r3]
    1f3c:	cmp	r3, #0
    1f40:	bne	1f70 <coda_type_record_field_new+0x178>
    1f44:	movw	r3, #1047	; 0x417
    1f48:	movw	r2, #0
    1f4c:	movt	r2, #0
    1f50:	movw	r1, #0
    1f54:	movt	r1, #0
    1f58:	mvn	r0, #0
    1f5c:	bl	0 <coda_set_error>
    1f60:	ldr	r0, [fp, #-8]
    1f64:	bl	a84 <coda_type_record_field_delete>
    1f68:	mov	r3, #0
    1f6c:	b	1f74 <coda_type_record_field_new+0x17c>
    1f70:	ldr	r3, [fp, #-8]
    1f74:	mov	r0, r3
    1f78:	sub	sp, fp, #4
    1f7c:	ldr	fp, [sp]
    1f80:	add	sp, sp, #4
    1f84:	pop	{pc}		; (ldr pc, [sp], #4)

00001f88 <coda_type_record_field_set_real_name>:
    1f88:	str	fp, [sp, #-8]!
    1f8c:	str	lr, [sp, #4]
    1f90:	add	fp, sp, #4
    1f94:	sub	sp, sp, #8
    1f98:	str	r0, [fp, #-8]
    1f9c:	str	r1, [fp, #-12]
    1fa0:	ldr	r3, [fp, #-8]
    1fa4:	cmp	r3, #0
    1fa8:	bne	1fd0 <coda_type_record_field_set_real_name+0x48>
    1fac:	movw	r3, #1059	; 0x423
    1fb0:	movw	r2, #0
    1fb4:	movt	r2, #0
    1fb8:	movw	r1, #0
    1fbc:	movt	r1, #0
    1fc0:	mvn	r0, #99	; 0x63
    1fc4:	bl	0 <coda_set_error>
    1fc8:	mvn	r3, #0
    1fcc:	b	207c <coda_type_record_field_set_real_name+0xf4>
    1fd0:	ldr	r3, [fp, #-12]
    1fd4:	cmp	r3, #0
    1fd8:	bne	2000 <coda_type_record_field_set_real_name+0x78>
    1fdc:	movw	r3, #1064	; 0x428
    1fe0:	movw	r2, #0
    1fe4:	movt	r2, #0
    1fe8:	movw	r1, #0
    1fec:	movt	r1, #0
    1ff0:	mvn	r0, #99	; 0x63
    1ff4:	bl	0 <coda_set_error>
    1ff8:	mvn	r3, #0
    1ffc:	b	207c <coda_type_record_field_set_real_name+0xf4>
    2000:	ldr	r3, [fp, #-8]
    2004:	ldr	r3, [r3, #4]
    2008:	cmp	r3, #0
    200c:	beq	202c <coda_type_record_field_set_real_name+0xa4>
    2010:	movw	r1, #0
    2014:	movt	r1, #0
    2018:	movw	r0, #65136	; 0xfe70
    201c:	movt	r0, #65535	; 0xffff
    2020:	bl	0 <coda_set_error>
    2024:	mvn	r3, #0
    2028:	b	207c <coda_type_record_field_set_real_name+0xf4>
    202c:	ldr	r0, [fp, #-12]
    2030:	bl	0 <strdup>
    2034:	mov	r3, r0
    2038:	mov	r2, r3
    203c:	ldr	r3, [fp, #-8]
    2040:	str	r2, [r3, #4]
    2044:	ldr	r3, [fp, #-8]
    2048:	ldr	r3, [r3, #4]
    204c:	cmp	r3, #0
    2050:	bne	2078 <coda_type_record_field_set_real_name+0xf0>
    2054:	movw	r3, #1076	; 0x434
    2058:	movw	r2, #0
    205c:	movt	r2, #0
    2060:	movw	r1, #0
    2064:	movt	r1, #0
    2068:	mvn	r0, #0
    206c:	bl	0 <coda_set_error>
    2070:	mvn	r3, #0
    2074:	b	207c <coda_type_record_field_set_real_name+0xf4>
    2078:	mov	r3, #0
    207c:	mov	r0, r3
    2080:	sub	sp, fp, #4
    2084:	ldr	fp, [sp]
    2088:	add	sp, sp, #4
    208c:	pop	{pc}		; (ldr pc, [sp], #4)

00002090 <coda_type_record_field_set_type>:
    2090:	str	fp, [sp, #-8]!
    2094:	str	lr, [sp, #4]
    2098:	add	fp, sp, #4
    209c:	sub	sp, sp, #8
    20a0:	str	r0, [fp, #-8]
    20a4:	str	r1, [fp, #-12]
    20a8:	ldr	r3, [fp, #-8]
    20ac:	cmp	r3, #0
    20b0:	bne	20d8 <coda_type_record_field_set_type+0x48>
    20b4:	movw	r3, #1087	; 0x43f
    20b8:	movw	r2, #0
    20bc:	movt	r2, #0
    20c0:	movw	r1, #0
    20c4:	movt	r1, #0
    20c8:	mvn	r0, #99	; 0x63
    20cc:	bl	0 <coda_set_error>
    20d0:	mvn	r3, #0
    20d4:	b	2158 <coda_type_record_field_set_type+0xc8>
    20d8:	ldr	r3, [fp, #-12]
    20dc:	cmp	r3, #0
    20e0:	bne	2108 <coda_type_record_field_set_type+0x78>
    20e4:	movw	r3, #1092	; 0x444
    20e8:	movw	r2, #0
    20ec:	movt	r2, #0
    20f0:	movw	r1, #0
    20f4:	movt	r1, #0
    20f8:	mvn	r0, #99	; 0x63
    20fc:	bl	0 <coda_set_error>
    2100:	mvn	r3, #0
    2104:	b	2158 <coda_type_record_field_set_type+0xc8>
    2108:	ldr	r3, [fp, #-8]
    210c:	ldr	r3, [r3, #8]
    2110:	cmp	r3, #0
    2114:	beq	2134 <coda_type_record_field_set_type+0xa4>
    2118:	movw	r1, #0
    211c:	movt	r1, #0
    2120:	movw	r0, #65136	; 0xfe70
    2124:	movt	r0, #65535	; 0xffff
    2128:	bl	0 <coda_set_error>
    212c:	mvn	r3, #0
    2130:	b	2158 <coda_type_record_field_set_type+0xc8>
    2134:	ldr	r3, [fp, #-8]
    2138:	ldr	r2, [fp, #-12]
    213c:	str	r2, [r3, #8]
    2140:	ldr	r3, [fp, #-12]
    2144:	ldr	r3, [r3, #4]
    2148:	add	r2, r3, #1
    214c:	ldr	r3, [fp, #-12]
    2150:	str	r2, [r3, #4]
    2154:	mov	r3, #0
    2158:	mov	r0, r3
    215c:	sub	sp, fp, #4
    2160:	ldr	fp, [sp]
    2164:	add	sp, sp, #4
    2168:	pop	{pc}		; (ldr pc, [sp], #4)

0000216c <coda_type_record_field_set_hidden>:
    216c:	str	fp, [sp, #-8]!
    2170:	str	lr, [sp, #4]
    2174:	add	fp, sp, #4
    2178:	sub	sp, sp, #8
    217c:	str	r0, [fp, #-8]
    2180:	ldr	r3, [fp, #-8]
    2184:	cmp	r3, #0
    2188:	bne	21b0 <coda_type_record_field_set_hidden+0x44>
    218c:	movw	r3, #1109	; 0x455
    2190:	movw	r2, #0
    2194:	movt	r2, #0
    2198:	movw	r1, #0
    219c:	movt	r1, #0
    21a0:	mvn	r0, #99	; 0x63
    21a4:	bl	0 <coda_set_error>
    21a8:	mvn	r3, #0
    21ac:	b	21c0 <coda_type_record_field_set_hidden+0x54>
    21b0:	ldr	r3, [fp, #-8]
    21b4:	mov	r2, #1
    21b8:	str	r2, [r3, #12]
    21bc:	mov	r3, #0
    21c0:	mov	r0, r3
    21c4:	sub	sp, fp, #4
    21c8:	ldr	fp, [sp]
    21cc:	add	sp, sp, #4
    21d0:	pop	{pc}		; (ldr pc, [sp], #4)

000021d4 <coda_type_record_field_set_optional>:
    21d4:	str	fp, [sp, #-8]!
    21d8:	str	lr, [sp, #4]
    21dc:	add	fp, sp, #4
    21e0:	sub	sp, sp, #8
    21e4:	str	r0, [fp, #-8]
    21e8:	ldr	r3, [fp, #-8]
    21ec:	cmp	r3, #0
    21f0:	bne	2218 <coda_type_record_field_set_optional+0x44>
    21f4:	mov	r3, #1120	; 0x460
    21f8:	movw	r2, #0
    21fc:	movt	r2, #0
    2200:	movw	r1, #0
    2204:	movt	r1, #0
    2208:	mvn	r0, #99	; 0x63
    220c:	bl	0 <coda_set_error>
    2210:	mvn	r3, #0
    2214:	b	2228 <coda_type_record_field_set_optional+0x54>
    2218:	ldr	r3, [fp, #-8]
    221c:	mov	r2, #1
    2220:	strb	r2, [r3, #16]
    2224:	mov	r3, #0
    2228:	mov	r0, r3
    222c:	sub	sp, fp, #4
    2230:	ldr	fp, [sp]
    2234:	add	sp, sp, #4
    2238:	pop	{pc}		; (ldr pc, [sp], #4)

0000223c <coda_type_record_field_set_available_expression>:
    223c:	str	fp, [sp, #-8]!
    2240:	str	lr, [sp, #4]
    2244:	add	fp, sp, #4
    2248:	sub	sp, sp, #8
    224c:	str	r0, [fp, #-8]
    2250:	str	r1, [fp, #-12]
    2254:	ldr	r3, [fp, #-8]
    2258:	cmp	r3, #0
    225c:	bne	2284 <coda_type_record_field_set_available_expression+0x48>
    2260:	movw	r3, #1131	; 0x46b
    2264:	movw	r2, #0
    2268:	movt	r2, #0
    226c:	movw	r1, #0
    2270:	movt	r1, #0
    2274:	mvn	r0, #99	; 0x63
    2278:	bl	0 <coda_set_error>
    227c:	mvn	r3, #0
    2280:	b	22fc <coda_type_record_field_set_available_expression+0xc0>
    2284:	ldr	r3, [fp, #-12]
    2288:	cmp	r3, #0
    228c:	bne	22b4 <coda_type_record_field_set_available_expression+0x78>
    2290:	mov	r3, #1136	; 0x470
    2294:	movw	r2, #0
    2298:	movt	r2, #0
    229c:	movw	r1, #0
    22a0:	movt	r1, #0
    22a4:	mvn	r0, #99	; 0x63
    22a8:	bl	0 <coda_set_error>
    22ac:	mvn	r3, #0
    22b0:	b	22fc <coda_type_record_field_set_available_expression+0xc0>
    22b4:	ldr	r3, [fp, #-8]
    22b8:	ldr	r3, [r3, #20]
    22bc:	cmp	r3, #0
    22c0:	beq	22e0 <coda_type_record_field_set_available_expression+0xa4>
    22c4:	movw	r1, #0
    22c8:	movt	r1, #0
    22cc:	movw	r0, #65136	; 0xfe70
    22d0:	movt	r0, #65535	; 0xffff
    22d4:	bl	0 <coda_set_error>
    22d8:	mvn	r3, #0
    22dc:	b	22fc <coda_type_record_field_set_available_expression+0xc0>
    22e0:	ldr	r3, [fp, #-8]
    22e4:	ldr	r2, [fp, #-12]
    22e8:	str	r2, [r3, #20]
    22ec:	ldr	r3, [fp, #-8]
    22f0:	mov	r2, #1
    22f4:	strb	r2, [r3, #16]
    22f8:	mov	r3, #0
    22fc:	mov	r0, r3
    2300:	sub	sp, fp, #4
    2304:	ldr	fp, [sp]
    2308:	add	sp, sp, #4
    230c:	pop	{pc}		; (ldr pc, [sp], #4)

00002310 <coda_type_record_field_set_bit_offset_expression>:
    2310:	str	fp, [sp, #-8]!
    2314:	str	lr, [sp, #4]
    2318:	add	fp, sp, #4
    231c:	sub	sp, sp, #8
    2320:	str	r0, [fp, #-8]
    2324:	str	r1, [fp, #-12]
    2328:	ldr	r3, [fp, #-8]
    232c:	cmp	r3, #0
    2330:	bne	2358 <coda_type_record_field_set_bit_offset_expression+0x48>
    2334:	movw	r3, #1153	; 0x481
    2338:	movw	r2, #0
    233c:	movt	r2, #0
    2340:	movw	r1, #0
    2344:	movt	r1, #0
    2348:	mvn	r0, #99	; 0x63
    234c:	bl	0 <coda_set_error>
    2350:	mvn	r3, #0
    2354:	b	2424 <coda_type_record_field_set_bit_offset_expression+0x114>
    2358:	ldr	r3, [fp, #-12]
    235c:	cmp	r3, #0
    2360:	bne	2388 <coda_type_record_field_set_bit_offset_expression+0x78>
    2364:	movw	r3, #1158	; 0x486
    2368:	movw	r2, #0
    236c:	movt	r2, #0
    2370:	movw	r1, #0
    2374:	movt	r1, #0
    2378:	mvn	r0, #99	; 0x63
    237c:	bl	0 <coda_set_error>
    2380:	mvn	r3, #0
    2384:	b	2424 <coda_type_record_field_set_bit_offset_expression+0x114>
    2388:	ldr	r3, [fp, #-8]
    238c:	ldr	r3, [r3, #32]
    2390:	cmp	r3, #0
    2394:	beq	23b4 <coda_type_record_field_set_bit_offset_expression+0xa4>
    2398:	movw	r1, #0
    239c:	movt	r1, #0
    23a0:	movw	r0, #65136	; 0xfe70
    23a4:	movt	r0, #65535	; 0xffff
    23a8:	bl	0 <coda_set_error>
    23ac:	mvn	r3, #0
    23b0:	b	2424 <coda_type_record_field_set_bit_offset_expression+0x114>
    23b4:	ldr	r3, [fp, #-8]
    23b8:	ldr	r3, [r3, #8]
    23bc:	ldr	r3, [r3]
    23c0:	cmp	r3, #0
    23c4:	beq	2414 <coda_type_record_field_set_bit_offset_expression+0x104>
    23c8:	ldr	r3, [fp, #-8]
    23cc:	ldr	r3, [r3, #8]
    23d0:	ldr	r3, [r3]
    23d4:	cmp	r3, #1
    23d8:	beq	2414 <coda_type_record_field_set_bit_offset_expression+0x104>
    23dc:	ldr	r3, [fp, #-8]
    23e0:	ldr	r3, [r3, #8]
    23e4:	ldr	r3, [r3]
    23e8:	mov	r0, r3
    23ec:	bl	61a4 <coda_type_get_format_name>
    23f0:	mov	r3, r0
    23f4:	mov	r2, r3
    23f8:	movw	r1, #0
    23fc:	movt	r1, #0
    2400:	movw	r0, #65136	; 0xfe70
    2404:	movt	r0, #65535	; 0xffff
    2408:	bl	0 <coda_set_error>
    240c:	mvn	r3, #0
    2410:	b	2424 <coda_type_record_field_set_bit_offset_expression+0x114>
    2414:	ldr	r3, [fp, #-8]
    2418:	ldr	r2, [fp, #-12]
    241c:	str	r2, [r3, #32]
    2420:	mov	r3, #0
    2424:	mov	r0, r3
    2428:	sub	sp, fp, #4
    242c:	ldr	fp, [sp]
    2430:	add	sp, sp, #4
    2434:	pop	{pc}		; (ldr pc, [sp], #4)

00002438 <coda_type_record_field_validate>:
    2438:	str	fp, [sp, #-8]!
    243c:	str	lr, [sp, #4]
    2440:	add	fp, sp, #4
    2444:	sub	sp, sp, #8
    2448:	str	r0, [fp, #-8]
    244c:	ldr	r3, [fp, #-8]
    2450:	cmp	r3, #0
    2454:	bne	247c <coda_type_record_field_validate+0x44>
    2458:	movw	r3, #1180	; 0x49c
    245c:	movw	r2, #0
    2460:	movt	r2, #0
    2464:	movw	r1, #0
    2468:	movt	r1, #0
    246c:	mvn	r0, #99	; 0x63
    2470:	bl	0 <coda_set_error>
    2474:	mvn	r3, #0
    2478:	b	24ac <coda_type_record_field_validate+0x74>
    247c:	ldr	r3, [fp, #-8]
    2480:	ldr	r3, [r3, #8]
    2484:	cmp	r3, #0
    2488:	bne	24a8 <coda_type_record_field_validate+0x70>
    248c:	movw	r1, #0
    2490:	movt	r1, #0
    2494:	movw	r0, #65136	; 0xfe70
    2498:	movt	r0, #65535	; 0xffff
    249c:	bl	0 <coda_set_error>
    24a0:	mvn	r3, #0
    24a4:	b	24ac <coda_type_record_field_validate+0x74>
    24a8:	mov	r3, #0
    24ac:	mov	r0, r3
    24b0:	sub	sp, fp, #4
    24b4:	ldr	fp, [sp]
    24b8:	add	sp, sp, #4
    24bc:	pop	{pc}		; (ldr pc, [sp], #4)

000024c0 <coda_type_record_field_get_type>:
    24c0:	push	{fp}		; (str fp, [sp, #-4]!)
    24c4:	add	fp, sp, #0
    24c8:	sub	sp, sp, #12
    24cc:	str	r0, [fp, #-8]
    24d0:	str	r1, [fp, #-12]
    24d4:	ldr	r3, [fp, #-8]
    24d8:	ldr	r2, [r3, #8]
    24dc:	ldr	r3, [fp, #-12]
    24e0:	str	r2, [r3]
    24e4:	mov	r3, #0
    24e8:	mov	r0, r3
    24ec:	add	sp, fp, #0
    24f0:	pop	{fp}		; (ldr fp, [sp], #4)
    24f4:	bx	lr

000024f8 <coda_type_record_new>:
    24f8:	str	fp, [sp, #-8]!
    24fc:	str	lr, [sp, #4]
    2500:	add	fp, sp, #4
    2504:	sub	sp, sp, #24
    2508:	str	r0, [fp, #-16]
    250c:	mov	r0, #72	; 0x48
    2510:	bl	0 <malloc>
    2514:	mov	r3, r0
    2518:	str	r3, [fp, #-8]
    251c:	ldr	r3, [fp, #-8]
    2520:	cmp	r3, #0
    2524:	bne	2554 <coda_type_record_new+0x5c>
    2528:	movw	r3, #1205	; 0x4b5
    252c:	str	r3, [sp]
    2530:	movw	r3, #0
    2534:	movt	r3, #0
    2538:	mov	r2, #72	; 0x48
    253c:	movw	r1, #0
    2540:	movt	r1, #0
    2544:	mvn	r0, #0
    2548:	bl	0 <coda_set_error>
    254c:	mov	r3, #0
    2550:	b	26fc <coda_type_record_new+0x204>
    2554:	ldr	r3, [fp, #-8]
    2558:	ldr	r2, [fp, #-16]
    255c:	str	r2, [r3]
    2560:	ldr	r3, [fp, #-8]
    2564:	mov	r2, #0
    2568:	str	r2, [r3, #4]
    256c:	ldr	r3, [fp, #-8]
    2570:	mov	r2, #0
    2574:	str	r2, [r3, #8]
    2578:	ldr	r3, [fp, #-8]
    257c:	mvn	r2, #0
    2580:	str	r2, [r3, #12]
    2584:	ldr	r3, [fp, #-8]
    2588:	mov	r2, #0
    258c:	str	r2, [r3, #16]
    2590:	ldr	r3, [fp, #-8]
    2594:	mov	r2, #0
    2598:	str	r2, [r3, #20]
    259c:	ldr	r1, [fp, #-8]
    25a0:	mvn	r2, #0
    25a4:	mvn	r3, #0
    25a8:	strd	r2, [r1, #24]
    25ac:	ldr	r3, [fp, #-8]
    25b0:	mov	r2, #0
    25b4:	str	r2, [r3, #32]
    25b8:	ldr	r3, [fp, #-8]
    25bc:	mov	r2, #0
    25c0:	str	r2, [r3, #36]	; 0x24
    25c4:	ldr	r3, [fp, #-8]
    25c8:	mov	r2, #0
    25cc:	str	r2, [r3, #40]	; 0x28
    25d0:	ldr	r3, [fp, #-8]
    25d4:	mov	r2, #0
    25d8:	str	r2, [r3, #44]	; 0x2c
    25dc:	ldr	r3, [fp, #-8]
    25e0:	mov	r2, #0
    25e4:	str	r2, [r3, #48]	; 0x30
    25e8:	ldr	r3, [fp, #-8]
    25ec:	mov	r2, #0
    25f0:	str	r2, [r3, #52]	; 0x34
    25f4:	ldr	r3, [fp, #-8]
    25f8:	mov	r2, #0
    25fc:	str	r2, [r3, #56]	; 0x38
    2600:	ldr	r3, [fp, #-8]
    2604:	mov	r2, #0
    2608:	str	r2, [r3, #60]	; 0x3c
    260c:	ldr	r3, [fp, #-8]
    2610:	mov	r2, #0
    2614:	str	r2, [r3, #64]	; 0x40
    2618:	ldr	r3, [fp, #-8]
    261c:	mov	r2, #0
    2620:	str	r2, [r3, #68]	; 0x44
    2624:	ldr	r3, [fp, #-16]
    2628:	cmp	r3, #0
    262c:	beq	263c <coda_type_record_new+0x144>
    2630:	ldr	r3, [fp, #-16]
    2634:	cmp	r3, #1
    2638:	bne	2658 <coda_type_record_new+0x160>
    263c:	ldr	r3, [fp, #-8]
    2640:	mov	r2, #12
    2644:	str	r2, [r3, #12]
    2648:	ldr	r1, [fp, #-8]
    264c:	mov	r2, #0
    2650:	mov	r3, #0
    2654:	strd	r2, [r1, #24]
    2658:	mov	r0, #0
    265c:	bl	0 <coda_hashtable_new>
    2660:	mov	r2, r0
    2664:	ldr	r3, [fp, #-8]
    2668:	str	r2, [r3, #40]	; 0x28
    266c:	ldr	r3, [fp, #-8]
    2670:	ldr	r3, [r3, #40]	; 0x28
    2674:	cmp	r3, #0
    2678:	bne	26a8 <coda_type_record_new+0x1b0>
    267c:	movw	r3, #1236	; 0x4d4
    2680:	movw	r2, #0
    2684:	movt	r2, #0
    2688:	movw	r1, #0
    268c:	movt	r1, #0
    2690:	mvn	r0, #0
    2694:	bl	0 <coda_set_error>
    2698:	ldr	r0, [fp, #-8]
    269c:	bl	b64 <record_delete>
    26a0:	mov	r3, #0
    26a4:	b	26fc <coda_type_record_new+0x204>
    26a8:	mov	r0, #1
    26ac:	bl	0 <coda_hashtable_new>
    26b0:	mov	r2, r0
    26b4:	ldr	r3, [fp, #-8]
    26b8:	str	r2, [r3, #44]	; 0x2c
    26bc:	ldr	r3, [fp, #-8]
    26c0:	ldr	r3, [r3, #44]	; 0x2c
    26c4:	cmp	r3, #0
    26c8:	bne	26f8 <coda_type_record_new+0x200>
    26cc:	movw	r3, #1245	; 0x4dd
    26d0:	movw	r2, #0
    26d4:	movt	r2, #0
    26d8:	movw	r1, #0
    26dc:	movt	r1, #0
    26e0:	mvn	r0, #0
    26e4:	bl	0 <coda_set_error>
    26e8:	ldr	r0, [fp, #-8]
    26ec:	bl	b64 <record_delete>
    26f0:	mov	r3, #0
    26f4:	b	26fc <coda_type_record_new+0x204>
    26f8:	ldr	r3, [fp, #-8]
    26fc:	mov	r0, r3
    2700:	sub	sp, fp, #4
    2704:	ldr	fp, [sp]
    2708:	add	sp, sp, #4
    270c:	pop	{pc}		; (ldr pc, [sp], #4)

00002710 <coda_type_union_new>:
    2710:	str	fp, [sp, #-8]!
    2714:	str	lr, [sp, #4]
    2718:	add	fp, sp, #4
    271c:	sub	sp, sp, #16
    2720:	str	r0, [fp, #-16]
    2724:	ldr	r0, [fp, #-16]
    2728:	bl	24f8 <coda_type_record_new>
    272c:	str	r0, [fp, #-8]
    2730:	ldr	r3, [fp, #-8]
    2734:	cmp	r3, #0
    2738:	beq	2748 <coda_type_union_new+0x38>
    273c:	ldr	r3, [fp, #-8]
    2740:	mov	r2, #1
    2744:	str	r2, [r3, #64]	; 0x40
    2748:	ldr	r3, [fp, #-8]
    274c:	mov	r0, r3
    2750:	sub	sp, fp, #4
    2754:	ldr	fp, [sp]
    2758:	add	sp, sp, #4
    275c:	pop	{pc}		; (ldr pc, [sp], #4)

00002760 <coda_type_empty_record>:
    2760:	str	fp, [sp, #-8]!
    2764:	str	lr, [sp, #4]
    2768:	add	fp, sp, #4
    276c:	sub	sp, sp, #8
    2770:	str	r0, [fp, #-8]
    2774:	ldr	r3, [fp, #-8]
    2778:	cmp	r3, #10
    277c:	bls	27a0 <coda_type_empty_record+0x40>
    2780:	movw	r3, #0
    2784:	movt	r3, #0
    2788:	movw	r2, #1268	; 0x4f4
    278c:	movw	r1, #0
    2790:	movt	r1, #0
    2794:	movw	r0, #0
    2798:	movt	r0, #0
    279c:	bl	0 <__assert_fail>
    27a0:	mrc	15, 0, r3, cr13, cr0, {3}
    27a4:	ldr	r1, [pc, #176]	; 285c <coda_type_empty_record+0xfc>
    27a8:	ldr	r2, [fp, #-8]
    27ac:	lsl	r2, r2, #2
    27b0:	add	r3, r2, r3
    27b4:	add	r3, r3, r1
    27b8:	ldr	r3, [r3]
    27bc:	cmp	r3, #0
    27c0:	bne	282c <coda_type_empty_record+0xcc>
    27c4:	ldr	r0, [fp, #-8]
    27c8:	bl	24f8 <coda_type_record_new>
    27cc:	mrc	15, 0, r3, cr13, cr0, {3}
    27d0:	ldr	r1, [pc, #132]	; 285c <coda_type_empty_record+0xfc>
    27d4:	ldr	r2, [fp, #-8]
    27d8:	lsl	r2, r2, #2
    27dc:	add	r3, r2, r3
    27e0:	add	r3, r3, r1
    27e4:	str	r0, [r3]
    27e8:	mrc	15, 0, r3, cr13, cr0, {3}
    27ec:	ldr	r1, [pc, #104]	; 285c <coda_type_empty_record+0xfc>
    27f0:	ldr	r2, [fp, #-8]
    27f4:	lsl	r2, r2, #2
    27f8:	add	r3, r2, r3
    27fc:	add	r3, r3, r1
    2800:	ldr	r3, [r3]
    2804:	cmp	r3, #0
    2808:	bne	282c <coda_type_empty_record+0xcc>
    280c:	movw	r3, #0
    2810:	movt	r3, #0
    2814:	movw	r2, #1272	; 0x4f8
    2818:	movw	r1, #0
    281c:	movt	r1, #0
    2820:	movw	r0, #0
    2824:	movt	r0, #0
    2828:	bl	0 <__assert_fail>
    282c:	mrc	15, 0, r3, cr13, cr0, {3}
    2830:	ldr	r1, [pc, #36]	; 285c <coda_type_empty_record+0xfc>
    2834:	ldr	r2, [fp, #-8]
    2838:	lsl	r2, r2, #2
    283c:	add	r3, r2, r3
    2840:	add	r3, r3, r1
    2844:	ldr	r3, [r3]
    2848:	mov	r0, r3
    284c:	sub	sp, fp, #4
    2850:	ldr	fp, [sp]
    2854:	add	sp, sp, #4
    2858:	pop	{pc}		; (ldr pc, [sp], #4)
    285c:	.word	0x00000000

00002860 <coda_type_record_insert_field>:
    2860:	strd	r4, [sp, #-32]!	; 0xffffffe0
    2864:	strd	r6, [sp, #8]
    2868:	strd	r8, [sp, #16]
    286c:	str	fp, [sp, #24]
    2870:	str	lr, [sp, #28]
    2874:	add	fp, sp, #28
    2878:	sub	sp, sp, #40	; 0x28
    287c:	str	r0, [fp, #-48]	; 0xffffffd0
    2880:	str	r1, [fp, #-52]	; 0xffffffcc
    2884:	str	r2, [fp, #-56]	; 0xffffffc8
    2888:	ldr	r3, [fp, #-48]	; 0xffffffd0
    288c:	cmp	r3, #0
    2890:	bne	28b8 <coda_type_record_insert_field+0x58>
    2894:	movw	r3, #1285	; 0x505
    2898:	movw	r2, #0
    289c:	movt	r2, #0
    28a0:	movw	r1, #0
    28a4:	movt	r1, #0
    28a8:	mvn	r0, #99	; 0x63
    28ac:	bl	0 <coda_set_error>
    28b0:	mvn	r3, #0
    28b4:	b	2f78 <coda_type_record_insert_field+0x718>
    28b8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    28bc:	cmp	r3, #0
    28c0:	bne	28e8 <coda_type_record_insert_field+0x88>
    28c4:	movw	r3, #1290	; 0x50a
    28c8:	movw	r2, #0
    28cc:	movt	r2, #0
    28d0:	movw	r1, #0
    28d4:	movt	r1, #0
    28d8:	mvn	r0, #99	; 0x63
    28dc:	bl	0 <coda_set_error>
    28e0:	mvn	r3, #0
    28e4:	b	2f78 <coda_type_record_insert_field+0x718>
    28e8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    28ec:	ldr	r3, [r3, #8]
    28f0:	cmp	r3, #0
    28f4:	bne	291c <coda_type_record_insert_field+0xbc>
    28f8:	movw	r3, #1295	; 0x50f
    28fc:	movw	r2, #0
    2900:	movt	r2, #0
    2904:	movw	r1, #0
    2908:	movt	r1, #0
    290c:	mvn	r0, #99	; 0x63
    2910:	bl	0 <coda_set_error>
    2914:	mvn	r3, #0
    2918:	b	2f78 <coda_type_record_insert_field+0x718>
    291c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2920:	ldr	r3, [r3, #64]	; 0x40
    2924:	cmp	r3, #0
    2928:	beq	2958 <coda_type_record_insert_field+0xf8>
    292c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    2930:	ldrb	r3, [r3, #16]
    2934:	cmp	r3, #0
    2938:	bne	2958 <coda_type_record_insert_field+0xf8>
    293c:	movw	r1, #0
    2940:	movt	r1, #0
    2944:	movw	r0, #65136	; 0xfe70
    2948:	movt	r0, #65535	; 0xffff
    294c:	bl	0 <coda_set_error>
    2950:	mvn	r3, #0
    2954:	b	2f78 <coda_type_record_insert_field+0x718>
    2958:	ldr	r3, [fp, #-48]	; 0xffffffd0
    295c:	ldr	r2, [r3]
    2960:	ldr	r3, [fp, #-56]	; 0xffffffc8
    2964:	ldr	r3, [r3, #8]
    2968:	ldr	r3, [r3]
    296c:	cmp	r2, r3
    2970:	beq	29f4 <coda_type_record_insert_field+0x194>
    2974:	ldr	r3, [fp, #-56]	; 0xffffffc8
    2978:	ldr	r3, [r3, #8]
    297c:	ldr	r3, [r3]
    2980:	cmp	r3, #0
    2984:	bne	29a8 <coda_type_record_insert_field+0x148>
    2988:	ldr	r3, [fp, #-48]	; 0xffffffd0
    298c:	ldr	r3, [r3]
    2990:	cmp	r3, #1
    2994:	beq	29f4 <coda_type_record_insert_field+0x194>
    2998:	ldr	r3, [fp, #-48]	; 0xffffffd0
    299c:	ldr	r3, [r3]
    29a0:	cmp	r3, #2
    29a4:	beq	29f4 <coda_type_record_insert_field+0x194>
    29a8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    29ac:	ldr	r3, [r3, #8]
    29b0:	ldr	r3, [r3]
    29b4:	mov	r0, r3
    29b8:	bl	61a4 <coda_type_get_format_name>
    29bc:	mov	r4, r0
    29c0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    29c4:	ldr	r3, [r3]
    29c8:	mov	r0, r3
    29cc:	bl	61a4 <coda_type_get_format_name>
    29d0:	mov	r3, r0
    29d4:	mov	r2, r4
    29d8:	movw	r1, #0
    29dc:	movt	r1, #0
    29e0:	movw	r0, #65136	; 0xfe70
    29e4:	movt	r0, #65535	; 0xffff
    29e8:	bl	0 <coda_set_error>
    29ec:	mvn	r3, #0
    29f0:	b	2f78 <coda_type_record_insert_field+0x718>
    29f4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    29f8:	ldr	r3, [r3, #48]	; 0x30
    29fc:	and	r3, r3, #15
    2a00:	cmp	r3, #0
    2a04:	bne	2a80 <coda_type_record_insert_field+0x220>
    2a08:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2a0c:	ldr	r2, [r3, #52]	; 0x34
    2a10:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2a14:	ldr	r3, [r3, #48]	; 0x30
    2a18:	add	r3, r3, #16
    2a1c:	lsl	r3, r3, #2
    2a20:	mov	r1, r3
    2a24:	mov	r0, r2
    2a28:	bl	0 <realloc>
    2a2c:	str	r0, [fp, #-36]	; 0xffffffdc
    2a30:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2a34:	cmp	r3, #0
    2a38:	bne	2a74 <coda_type_record_insert_field+0x214>
    2a3c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2a40:	ldr	r3, [r3, #48]	; 0x30
    2a44:	add	r3, r3, #16
    2a48:	lsl	r2, r3, #2
    2a4c:	movw	r3, #1326	; 0x52e
    2a50:	str	r3, [sp]
    2a54:	movw	r3, #0
    2a58:	movt	r3, #0
    2a5c:	movw	r1, #0
    2a60:	movt	r1, #0
    2a64:	mvn	r0, #0
    2a68:	bl	0 <coda_set_error>
    2a6c:	mvn	r3, #0
    2a70:	b	2f78 <coda_type_record_insert_field+0x718>
    2a74:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2a78:	ldr	r2, [fp, #-36]	; 0xffffffdc
    2a7c:	str	r2, [r3, #52]	; 0x34
    2a80:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2a84:	ldr	r0, [r3, #40]	; 0x28
    2a88:	ldr	r3, [fp, #-56]	; 0xffffffc8
    2a8c:	ldr	r3, [r3]
    2a90:	mov	r2, r3
    2a94:	ldr	r1, [fp, #-52]	; 0xffffffcc
    2a98:	bl	0 <coda_hashtable_insert_name>
    2a9c:	mov	r3, r0
    2aa0:	cmp	r3, #0
    2aa4:	beq	2ad0 <coda_type_record_insert_field+0x270>
    2aa8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    2aac:	ldr	r3, [r3]
    2ab0:	mov	r2, r3
    2ab4:	movw	r1, #0
    2ab8:	movt	r1, #0
    2abc:	movw	r0, #65136	; 0xfe70
    2ac0:	movt	r0, #65535	; 0xffff
    2ac4:	bl	0 <coda_set_error>
    2ac8:	mvn	r3, #0
    2acc:	b	2f78 <coda_type_record_insert_field+0x718>
    2ad0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    2ad4:	ldr	r3, [r3, #4]
    2ad8:	cmp	r3, #0
    2adc:	beq	2aec <coda_type_record_insert_field+0x28c>
    2ae0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    2ae4:	ldr	r3, [r3, #4]
    2ae8:	b	2af4 <coda_type_record_insert_field+0x294>
    2aec:	ldr	r3, [fp, #-56]	; 0xffffffc8
    2af0:	ldr	r3, [r3]
    2af4:	str	r3, [fp, #-40]	; 0xffffffd8
    2af8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2afc:	ldr	r3, [r3, #44]	; 0x2c
    2b00:	ldr	r1, [fp, #-40]	; 0xffffffd8
    2b04:	mov	r0, r3
    2b08:	bl	0 <coda_hashtable_get_index_from_name>
    2b0c:	mov	r3, r0
    2b10:	cmp	r3, #0
    2b14:	bge	2b30 <coda_type_record_insert_field+0x2d0>
    2b18:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2b1c:	ldr	r3, [r3, #44]	; 0x2c
    2b20:	ldr	r2, [fp, #-40]	; 0xffffffd8
    2b24:	ldr	r1, [fp, #-52]	; 0xffffffcc
    2b28:	mov	r0, r3
    2b2c:	bl	0 <coda_hashtable_insert_name>
    2b30:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2b34:	ldr	r3, [r3, #48]	; 0x30
    2b38:	ldr	r2, [fp, #-52]	; 0xffffffcc
    2b3c:	cmp	r2, r3
    2b40:	bge	2ba4 <coda_type_record_insert_field+0x344>
    2b44:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2b48:	ldr	r3, [r3, #48]	; 0x30
    2b4c:	str	r3, [fp, #-32]	; 0xffffffe0
    2b50:	b	2b94 <coda_type_record_insert_field+0x334>
    2b54:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2b58:	ldr	r2, [r3, #52]	; 0x34
    2b5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2b60:	sub	r3, r3, #-1073741823	; 0xc0000001
    2b64:	lsl	r3, r3, #2
    2b68:	add	r2, r2, r3
    2b6c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2b70:	ldr	r1, [r3, #52]	; 0x34
    2b74:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2b78:	lsl	r3, r3, #2
    2b7c:	add	r3, r1, r3
    2b80:	ldr	r2, [r2]
    2b84:	str	r2, [r3]
    2b88:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2b8c:	sub	r3, r3, #1
    2b90:	str	r3, [fp, #-32]	; 0xffffffe0
    2b94:	ldr	r2, [fp, #-32]	; 0xffffffe0
    2b98:	ldr	r3, [fp, #-52]	; 0xffffffcc
    2b9c:	cmp	r2, r3
    2ba0:	bgt	2b54 <coda_type_record_insert_field+0x2f4>
    2ba4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2ba8:	ldr	r3, [r3, #48]	; 0x30
    2bac:	add	r2, r3, #1
    2bb0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2bb4:	str	r2, [r3, #48]	; 0x30
    2bb8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2bbc:	ldr	r2, [r3, #52]	; 0x34
    2bc0:	ldr	r3, [fp, #-52]	; 0xffffffcc
    2bc4:	lsl	r3, r3, #2
    2bc8:	add	r3, r2, r3
    2bcc:	ldr	r2, [fp, #-56]	; 0xffffffc8
    2bd0:	str	r2, [r3]
    2bd4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2bd8:	ldr	r3, [r3]
    2bdc:	cmp	r3, #0
    2be0:	beq	2bf4 <coda_type_record_insert_field+0x394>
    2be4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2be8:	ldr	r3, [r3]
    2bec:	cmp	r3, #1
    2bf0:	bne	2f74 <coda_type_record_insert_field+0x714>
    2bf4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2bf8:	ldr	r3, [r3, #64]	; 0x40
    2bfc:	cmp	r3, #0
    2c00:	beq	2c9c <coda_type_record_insert_field+0x43c>
    2c04:	ldr	r3, [fp, #-56]	; 0xffffffc8
    2c08:	ldr	r3, [r3, #32]
    2c0c:	cmp	r3, #0
    2c10:	beq	2c30 <coda_type_record_insert_field+0x3d0>
    2c14:	movw	r1, #0
    2c18:	movt	r1, #0
    2c1c:	movw	r0, #65136	; 0xfe70
    2c20:	movt	r0, #65535	; 0xffff
    2c24:	bl	0 <coda_set_error>
    2c28:	mvn	r3, #0
    2c2c:	b	2f78 <coda_type_record_insert_field+0x718>
    2c30:	ldr	r1, [fp, #-56]	; 0xffffffc8
    2c34:	mov	r2, #0
    2c38:	mov	r3, #0
    2c3c:	strd	r2, [r1, #24]
    2c40:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2c44:	ldr	r3, [r3, #48]	; 0x30
    2c48:	cmp	r3, #1
    2c4c:	bne	2c68 <coda_type_record_insert_field+0x408>
    2c50:	ldr	r3, [fp, #-56]	; 0xffffffc8
    2c54:	ldr	r3, [r3, #8]
    2c58:	ldrd	r2, [r3, #24]
    2c5c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    2c60:	strd	r2, [r1, #24]
    2c64:	b	2f74 <coda_type_record_insert_field+0x714>
    2c68:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2c6c:	ldrd	r0, [r3, #24]
    2c70:	ldr	r3, [fp, #-56]	; 0xffffffc8
    2c74:	ldr	r3, [r3, #8]
    2c78:	ldrd	r2, [r3, #24]
    2c7c:	cmp	r1, r3
    2c80:	cmpeq	r0, r2
    2c84:	beq	2f74 <coda_type_record_insert_field+0x714>
    2c88:	ldr	r1, [fp, #-48]	; 0xffffffd0
    2c8c:	mvn	r2, #0
    2c90:	mvn	r3, #0
    2c94:	strd	r2, [r1, #24]
    2c98:	b	2f74 <coda_type_record_insert_field+0x714>
    2c9c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    2ca0:	ldr	r3, [r3, #32]
    2ca4:	cmp	r3, #0
    2ca8:	bne	2da4 <coda_type_record_insert_field+0x544>
    2cac:	ldr	r3, [fp, #-52]	; 0xffffffcc
    2cb0:	cmp	r3, #0
    2cb4:	bne	2ccc <coda_type_record_insert_field+0x46c>
    2cb8:	ldr	r1, [fp, #-56]	; 0xffffffc8
    2cbc:	mov	r2, #0
    2cc0:	mov	r3, #0
    2cc4:	strd	r2, [r1, #24]
    2cc8:	b	2da4 <coda_type_record_insert_field+0x544>
    2ccc:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2cd0:	ldr	r2, [r3, #52]	; 0x34
    2cd4:	ldr	r3, [fp, #-52]	; 0xffffffcc
    2cd8:	sub	r3, r3, #-1073741823	; 0xc0000001
    2cdc:	lsl	r3, r3, #2
    2ce0:	add	r3, r2, r3
    2ce4:	ldr	r3, [r3]
    2ce8:	ldrd	r2, [r3, #24]
    2cec:	cmp	r2, #0
    2cf0:	sbcs	r3, r3, #0
    2cf4:	blt	2da4 <coda_type_record_insert_field+0x544>
    2cf8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2cfc:	ldr	r2, [r3, #52]	; 0x34
    2d00:	ldr	r3, [fp, #-52]	; 0xffffffcc
    2d04:	sub	r3, r3, #-1073741823	; 0xc0000001
    2d08:	lsl	r3, r3, #2
    2d0c:	add	r3, r2, r3
    2d10:	ldr	r3, [r3]
    2d14:	ldr	r3, [r3, #8]
    2d18:	ldrd	r2, [r3, #24]
    2d1c:	cmp	r2, #0
    2d20:	sbcs	r3, r3, #0
    2d24:	blt	2da4 <coda_type_record_insert_field+0x544>
    2d28:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2d2c:	ldr	r2, [r3, #52]	; 0x34
    2d30:	ldr	r3, [fp, #-52]	; 0xffffffcc
    2d34:	sub	r3, r3, #-1073741823	; 0xc0000001
    2d38:	lsl	r3, r3, #2
    2d3c:	add	r3, r2, r3
    2d40:	ldr	r3, [r3]
    2d44:	ldrb	r3, [r3, #16]
    2d48:	cmp	r3, #0
    2d4c:	bne	2da4 <coda_type_record_insert_field+0x544>
    2d50:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2d54:	ldr	r2, [r3, #52]	; 0x34
    2d58:	ldr	r3, [fp, #-52]	; 0xffffffcc
    2d5c:	sub	r3, r3, #-1073741823	; 0xc0000001
    2d60:	lsl	r3, r3, #2
    2d64:	add	r3, r2, r3
    2d68:	ldr	r3, [r3]
    2d6c:	ldrd	r0, [r3, #24]
    2d70:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2d74:	ldr	r2, [r3, #52]	; 0x34
    2d78:	ldr	r3, [fp, #-52]	; 0xffffffcc
    2d7c:	sub	r3, r3, #-1073741823	; 0xc0000001
    2d80:	lsl	r3, r3, #2
    2d84:	add	r3, r2, r3
    2d88:	ldr	r3, [r3]
    2d8c:	ldr	r3, [r3, #8]
    2d90:	ldrd	r2, [r3, #24]
    2d94:	adds	r8, r0, r2
    2d98:	adc	r9, r1, r3
    2d9c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    2da0:	strd	r8, [r3, #24]
    2da4:	ldr	r3, [fp, #-52]	; 0xffffffcc
    2da8:	add	r3, r3, #1
    2dac:	str	r3, [fp, #-32]	; 0xffffffe0
    2db0:	b	2ed0 <coda_type_record_insert_field+0x670>
    2db4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2db8:	ldr	r2, [r3, #52]	; 0x34
    2dbc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2dc0:	lsl	r3, r3, #2
    2dc4:	add	r3, r2, r3
    2dc8:	ldr	r3, [r3]
    2dcc:	ldr	r3, [r3, #32]
    2dd0:	cmp	r3, #0
    2dd4:	bne	2ec4 <coda_type_record_insert_field+0x664>
    2dd8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2ddc:	ldr	r2, [r3, #52]	; 0x34
    2de0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2de4:	sub	r3, r3, #-1073741823	; 0xc0000001
    2de8:	lsl	r3, r3, #2
    2dec:	add	r3, r2, r3
    2df0:	ldr	r3, [r3]
    2df4:	ldrd	r2, [r3, #24]
    2df8:	cmp	r2, #0
    2dfc:	sbcs	r3, r3, #0
    2e00:	blt	2ec4 <coda_type_record_insert_field+0x664>
    2e04:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2e08:	ldr	r2, [r3, #52]	; 0x34
    2e0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2e10:	sub	r3, r3, #-1073741823	; 0xc0000001
    2e14:	lsl	r3, r3, #2
    2e18:	add	r3, r2, r3
    2e1c:	ldr	r3, [r3]
    2e20:	ldr	r3, [r3, #8]
    2e24:	ldrd	r2, [r3, #24]
    2e28:	cmp	r2, #0
    2e2c:	sbcs	r3, r3, #0
    2e30:	blt	2ec4 <coda_type_record_insert_field+0x664>
    2e34:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2e38:	ldr	r2, [r3, #52]	; 0x34
    2e3c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2e40:	sub	r3, r3, #-1073741823	; 0xc0000001
    2e44:	lsl	r3, r3, #2
    2e48:	add	r3, r2, r3
    2e4c:	ldr	r3, [r3]
    2e50:	ldrb	r3, [r3, #16]
    2e54:	cmp	r3, #0
    2e58:	bne	2ec4 <coda_type_record_insert_field+0x664>
    2e5c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2e60:	ldr	r2, [r3, #52]	; 0x34
    2e64:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2e68:	sub	r3, r3, #-1073741823	; 0xc0000001
    2e6c:	lsl	r3, r3, #2
    2e70:	add	r3, r2, r3
    2e74:	ldr	r3, [r3]
    2e78:	ldrd	r0, [r3, #24]
    2e7c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2e80:	ldr	r2, [r3, #52]	; 0x34
    2e84:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2e88:	sub	r3, r3, #-1073741823	; 0xc0000001
    2e8c:	lsl	r3, r3, #2
    2e90:	add	r3, r2, r3
    2e94:	ldr	r3, [r3]
    2e98:	ldr	r3, [r3, #8]
    2e9c:	ldrd	r2, [r3, #24]
    2ea0:	ldr	ip, [fp, #-48]	; 0xffffffd0
    2ea4:	ldr	lr, [ip, #52]	; 0x34
    2ea8:	ldr	ip, [fp, #-32]	; 0xffffffe0
    2eac:	lsl	ip, ip, #2
    2eb0:	add	ip, lr, ip
    2eb4:	ldr	ip, [ip]
    2eb8:	adds	r6, r0, r2
    2ebc:	adc	r7, r1, r3
    2ec0:	strd	r6, [ip, #24]
    2ec4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2ec8:	add	r3, r3, #1
    2ecc:	str	r3, [fp, #-32]	; 0xffffffe0
    2ed0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2ed4:	ldr	r3, [r3, #48]	; 0x30
    2ed8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    2edc:	cmp	r2, r3
    2ee0:	blt	2db4 <coda_type_record_insert_field+0x554>
    2ee4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2ee8:	ldrd	r2, [r3, #24]
    2eec:	cmp	r2, #0
    2ef0:	sbcs	r3, r3, #0
    2ef4:	blt	2f74 <coda_type_record_insert_field+0x714>
    2ef8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    2efc:	ldr	r3, [r3, #8]
    2f00:	ldrd	r2, [r3, #24]
    2f04:	cmp	r2, #0
    2f08:	sbcs	r3, r3, #0
    2f0c:	blt	2f64 <coda_type_record_insert_field+0x704>
    2f10:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2f14:	ldr	r2, [r3, #52]	; 0x34
    2f18:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2f1c:	ldr	r3, [r3, #48]	; 0x30
    2f20:	sub	r3, r3, #-1073741823	; 0xc0000001
    2f24:	lsl	r3, r3, #2
    2f28:	add	r3, r2, r3
    2f2c:	ldr	r3, [r3]
    2f30:	ldrb	r3, [r3, #16]
    2f34:	cmp	r3, #0
    2f38:	bne	2f64 <coda_type_record_insert_field+0x704>
    2f3c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2f40:	ldrd	r0, [r3, #24]
    2f44:	ldr	r3, [fp, #-56]	; 0xffffffc8
    2f48:	ldr	r3, [r3, #8]
    2f4c:	ldrd	r2, [r3, #24]
    2f50:	adds	r4, r0, r2
    2f54:	adc	r5, r1, r3
    2f58:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2f5c:	strd	r4, [r3, #24]
    2f60:	b	2f74 <coda_type_record_insert_field+0x714>
    2f64:	ldr	r1, [fp, #-48]	; 0xffffffd0
    2f68:	mvn	r2, #0
    2f6c:	mvn	r3, #0
    2f70:	strd	r2, [r1, #24]
    2f74:	mov	r3, #0
    2f78:	mov	r0, r3
    2f7c:	sub	sp, fp, #28
    2f80:	ldrd	r4, [sp]
    2f84:	ldrd	r6, [sp, #8]
    2f88:	ldrd	r8, [sp, #16]
    2f8c:	ldr	fp, [sp, #24]
    2f90:	add	sp, sp, #28
    2f94:	pop	{pc}		; (ldr pc, [sp], #4)

00002f98 <coda_type_record_add_field>:
    2f98:	str	fp, [sp, #-8]!
    2f9c:	str	lr, [sp, #4]
    2fa0:	add	fp, sp, #4
    2fa4:	sub	sp, sp, #8
    2fa8:	str	r0, [fp, #-8]
    2fac:	str	r1, [fp, #-12]
    2fb0:	ldr	r3, [fp, #-8]
    2fb4:	cmp	r3, #0
    2fb8:	bne	2fe0 <coda_type_record_add_field+0x48>
    2fbc:	mov	r3, #1424	; 0x590
    2fc0:	movw	r2, #0
    2fc4:	movt	r2, #0
    2fc8:	movw	r1, #0
    2fcc:	movt	r1, #0
    2fd0:	mvn	r0, #99	; 0x63
    2fd4:	bl	0 <coda_set_error>
    2fd8:	mvn	r3, #0
    2fdc:	b	2ffc <coda_type_record_add_field+0x64>
    2fe0:	ldr	r3, [fp, #-8]
    2fe4:	ldr	r3, [r3, #48]	; 0x30
    2fe8:	ldr	r2, [fp, #-12]
    2fec:	mov	r1, r3
    2ff0:	ldr	r0, [fp, #-8]
    2ff4:	bl	2860 <coda_type_record_insert_field>
    2ff8:	mov	r3, r0
    2ffc:	mov	r0, r3
    3000:	sub	sp, fp, #4
    3004:	ldr	fp, [sp]
    3008:	add	sp, sp, #4
    300c:	pop	{pc}		; (ldr pc, [sp], #4)

00003010 <coda_type_record_create_field>:
    3010:	str	fp, [sp, #-8]!
    3014:	str	lr, [sp, #4]
    3018:	add	fp, sp, #4
    301c:	sub	sp, sp, #24
    3020:	str	r0, [fp, #-16]
    3024:	str	r1, [fp, #-20]	; 0xffffffec
    3028:	str	r2, [fp, #-24]	; 0xffffffe8
    302c:	ldr	r3, [fp, #-16]
    3030:	cmp	r3, #0
    3034:	bne	305c <coda_type_record_create_field+0x4c>
    3038:	movw	r3, #1437	; 0x59d
    303c:	movw	r2, #0
    3040:	movt	r2, #0
    3044:	movw	r1, #0
    3048:	movt	r1, #0
    304c:	mvn	r0, #99	; 0x63
    3050:	bl	0 <coda_set_error>
    3054:	mvn	r3, #0
    3058:	b	31ac <coda_type_record_create_field+0x19c>
    305c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3060:	cmp	r3, #0
    3064:	bne	308c <coda_type_record_create_field+0x7c>
    3068:	movw	r3, #1442	; 0x5a2
    306c:	movw	r2, #0
    3070:	movt	r2, #0
    3074:	movw	r1, #0
    3078:	movt	r1, #0
    307c:	mvn	r0, #99	; 0x63
    3080:	bl	0 <coda_set_error>
    3084:	mvn	r3, #0
    3088:	b	31ac <coda_type_record_create_field+0x19c>
    308c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3090:	cmp	r3, #0
    3094:	bne	30bc <coda_type_record_create_field+0xac>
    3098:	movw	r3, #1447	; 0x5a7
    309c:	movw	r2, #0
    30a0:	movt	r2, #0
    30a4:	movw	r1, #0
    30a8:	movt	r1, #0
    30ac:	mvn	r0, #99	; 0x63
    30b0:	bl	0 <coda_set_error>
    30b4:	mvn	r3, #0
    30b8:	b	31ac <coda_type_record_create_field+0x19c>
    30bc:	ldr	r1, [fp, #-20]	; 0xffffffec
    30c0:	ldr	r0, [fp, #-16]
    30c4:	bl	34d4 <coda_type_record_get_unique_field_name>
    30c8:	str	r0, [fp, #-8]
    30cc:	ldr	r3, [fp, #-8]
    30d0:	cmp	r3, #0
    30d4:	bne	30e0 <coda_type_record_create_field+0xd0>
    30d8:	mvn	r3, #0
    30dc:	b	31ac <coda_type_record_create_field+0x19c>
    30e0:	ldr	r0, [fp, #-8]
    30e4:	bl	1df8 <coda_type_record_field_new>
    30e8:	str	r0, [fp, #-12]
    30ec:	ldr	r3, [fp, #-12]
    30f0:	cmp	r3, #0
    30f4:	bne	3108 <coda_type_record_create_field+0xf8>
    30f8:	ldr	r0, [fp, #-8]
    30fc:	bl	0 <free>
    3100:	mvn	r3, #0
    3104:	b	31ac <coda_type_record_create_field+0x19c>
    3108:	ldr	r1, [fp, #-20]	; 0xffffffec
    310c:	ldr	r0, [fp, #-8]
    3110:	bl	0 <strcmp>
    3114:	mov	r3, r0
    3118:	cmp	r3, #0
    311c:	beq	3150 <coda_type_record_create_field+0x140>
    3120:	ldr	r1, [fp, #-20]	; 0xffffffec
    3124:	ldr	r0, [fp, #-12]
    3128:	bl	1f88 <coda_type_record_field_set_real_name>
    312c:	mov	r3, r0
    3130:	cmp	r3, #0
    3134:	beq	3150 <coda_type_record_create_field+0x140>
    3138:	ldr	r0, [fp, #-12]
    313c:	bl	a84 <coda_type_record_field_delete>
    3140:	ldr	r0, [fp, #-8]
    3144:	bl	0 <free>
    3148:	mvn	r3, #0
    314c:	b	31ac <coda_type_record_create_field+0x19c>
    3150:	ldr	r0, [fp, #-8]
    3154:	bl	0 <free>
    3158:	ldr	r1, [fp, #-24]	; 0xffffffe8
    315c:	ldr	r0, [fp, #-12]
    3160:	bl	2090 <coda_type_record_field_set_type>
    3164:	mov	r3, r0
    3168:	cmp	r3, #0
    316c:	beq	3180 <coda_type_record_create_field+0x170>
    3170:	ldr	r0, [fp, #-12]
    3174:	bl	a84 <coda_type_record_field_delete>
    3178:	mvn	r3, #0
    317c:	b	31ac <coda_type_record_create_field+0x19c>
    3180:	ldr	r1, [fp, #-12]
    3184:	ldr	r0, [fp, #-16]
    3188:	bl	2f98 <coda_type_record_add_field>
    318c:	mov	r3, r0
    3190:	cmp	r3, #0
    3194:	beq	31a8 <coda_type_record_create_field+0x198>
    3198:	ldr	r0, [fp, #-12]
    319c:	bl	a84 <coda_type_record_field_delete>
    31a0:	mvn	r3, #0
    31a4:	b	31ac <coda_type_record_create_field+0x19c>
    31a8:	mov	r3, #0
    31ac:	mov	r0, r3
    31b0:	sub	sp, fp, #4
    31b4:	ldr	fp, [sp]
    31b8:	add	sp, sp, #4
    31bc:	pop	{pc}		; (ldr pc, [sp], #4)

000031c0 <coda_type_union_set_field_expression>:
    31c0:	str	fp, [sp, #-8]!
    31c4:	str	lr, [sp, #4]
    31c8:	add	fp, sp, #4
    31cc:	sub	sp, sp, #16
    31d0:	str	r0, [fp, #-16]
    31d4:	str	r1, [fp, #-20]	; 0xffffffec
    31d8:	ldr	r3, [fp, #-16]
    31dc:	cmp	r3, #0
    31e0:	bne	3208 <coda_type_union_set_field_expression+0x48>
    31e4:	movw	r3, #1490	; 0x5d2
    31e8:	movw	r2, #0
    31ec:	movt	r2, #0
    31f0:	movw	r1, #0
    31f4:	movt	r1, #0
    31f8:	mvn	r0, #99	; 0x63
    31fc:	bl	0 <coda_set_error>
    3200:	mvn	r3, #0
    3204:	b	33dc <coda_type_union_set_field_expression+0x21c>
    3208:	ldr	r3, [fp, #-20]	; 0xffffffec
    320c:	cmp	r3, #0
    3210:	bne	3238 <coda_type_union_set_field_expression+0x78>
    3214:	movw	r3, #1495	; 0x5d7
    3218:	movw	r2, #0
    321c:	movt	r2, #0
    3220:	movw	r1, #0
    3224:	movt	r1, #0
    3228:	mvn	r0, #99	; 0x63
    322c:	bl	0 <coda_set_error>
    3230:	mvn	r3, #0
    3234:	b	33dc <coda_type_union_set_field_expression+0x21c>
    3238:	ldr	r3, [fp, #-16]
    323c:	ldr	r3, [r3, #64]	; 0x40
    3240:	cmp	r3, #0
    3244:	bne	3264 <coda_type_union_set_field_expression+0xa4>
    3248:	movw	r1, #0
    324c:	movt	r1, #0
    3250:	movw	r0, #65136	; 0xfe70
    3254:	movt	r0, #65535	; 0xffff
    3258:	bl	0 <coda_set_error>
    325c:	mvn	r3, #0
    3260:	b	33dc <coda_type_union_set_field_expression+0x21c>
    3264:	ldr	r3, [fp, #-16]
    3268:	ldr	r3, [r3, #68]	; 0x44
    326c:	cmp	r3, #0
    3270:	beq	3290 <coda_type_union_set_field_expression+0xd0>
    3274:	movw	r1, #0
    3278:	movt	r1, #0
    327c:	movw	r0, #65136	; 0xfe70
    3280:	movt	r0, #65535	; 0xffff
    3284:	bl	0 <coda_set_error>
    3288:	mvn	r3, #0
    328c:	b	33dc <coda_type_union_set_field_expression+0x21c>
    3290:	ldr	r3, [fp, #-16]
    3294:	ldr	r2, [fp, #-20]	; 0xffffffec
    3298:	str	r2, [r3, #68]	; 0x44
    329c:	ldr	r3, [fp, #-16]
    32a0:	ldr	r3, [r3, #48]	; 0x30
    32a4:	cmp	r3, #0
    32a8:	ble	33d8 <coda_type_union_set_field_expression+0x218>
    32ac:	mov	r3, #0
    32b0:	str	r3, [fp, #-8]
    32b4:	b	33c4 <coda_type_union_set_field_expression+0x204>
    32b8:	ldr	r3, [fp, #-16]
    32bc:	ldr	r2, [r3, #52]	; 0x34
    32c0:	ldr	r3, [fp, #-8]
    32c4:	lsl	r3, r3, #2
    32c8:	add	r3, r2, r3
    32cc:	ldr	r3, [r3]
    32d0:	ldr	r3, [r3, #32]
    32d4:	cmp	r3, #0
    32d8:	beq	3318 <coda_type_union_set_field_expression+0x158>
    32dc:	ldr	r3, [fp, #-16]
    32e0:	ldr	r2, [r3, #52]	; 0x34
    32e4:	ldr	r3, [fp, #-8]
    32e8:	lsl	r3, r3, #2
    32ec:	add	r3, r2, r3
    32f0:	ldr	r3, [r3]
    32f4:	ldr	r3, [r3]
    32f8:	mov	r2, r3
    32fc:	movw	r1, #0
    3300:	movt	r1, #0
    3304:	movw	r0, #65136	; 0xfe70
    3308:	movt	r0, #65535	; 0xffff
    330c:	bl	0 <coda_set_error>
    3310:	mvn	r3, #0
    3314:	b	33dc <coda_type_union_set_field_expression+0x21c>
    3318:	ldr	r3, [fp, #-16]
    331c:	ldr	r2, [r3, #52]	; 0x34
    3320:	ldr	r3, [fp, #-8]
    3324:	lsl	r3, r3, #2
    3328:	add	r3, r2, r3
    332c:	ldr	r1, [r3]
    3330:	mov	r2, #0
    3334:	mov	r3, #0
    3338:	strd	r2, [r1, #24]
    333c:	ldr	r3, [fp, #-8]
    3340:	cmp	r3, #0
    3344:	bne	3374 <coda_type_union_set_field_expression+0x1b4>
    3348:	ldr	r3, [fp, #-16]
    334c:	ldr	r2, [r3, #52]	; 0x34
    3350:	ldr	r3, [fp, #-8]
    3354:	lsl	r3, r3, #2
    3358:	add	r3, r2, r3
    335c:	ldr	r3, [r3]
    3360:	ldr	r3, [r3, #8]
    3364:	ldrd	r2, [r3, #24]
    3368:	ldr	r1, [fp, #-16]
    336c:	strd	r2, [r1, #24]
    3370:	b	33b8 <coda_type_union_set_field_expression+0x1f8>
    3374:	ldr	r3, [fp, #-16]
    3378:	ldrd	r0, [r3, #24]
    337c:	ldr	r3, [fp, #-16]
    3380:	ldr	r2, [r3, #52]	; 0x34
    3384:	ldr	r3, [fp, #-8]
    3388:	lsl	r3, r3, #2
    338c:	add	r3, r2, r3
    3390:	ldr	r3, [r3]
    3394:	ldr	r3, [r3, #8]
    3398:	ldrd	r2, [r3, #24]
    339c:	cmp	r1, r3
    33a0:	cmpeq	r0, r2
    33a4:	beq	33b8 <coda_type_union_set_field_expression+0x1f8>
    33a8:	ldr	r1, [fp, #-16]
    33ac:	mvn	r2, #0
    33b0:	mvn	r3, #0
    33b4:	strd	r2, [r1, #24]
    33b8:	ldr	r3, [fp, #-8]
    33bc:	add	r3, r3, #1
    33c0:	str	r3, [fp, #-8]
    33c4:	ldr	r3, [fp, #-16]
    33c8:	ldr	r3, [r3, #48]	; 0x30
    33cc:	ldr	r2, [fp, #-8]
    33d0:	cmp	r2, r3
    33d4:	blt	32b8 <coda_type_union_set_field_expression+0xf8>
    33d8:	mov	r3, #0
    33dc:	mov	r0, r3
    33e0:	sub	sp, fp, #4
    33e4:	ldr	fp, [sp]
    33e8:	add	sp, sp, #4
    33ec:	pop	{pc}		; (ldr pc, [sp], #4)

000033f0 <coda_type_record_validate>:
    33f0:	str	fp, [sp, #-8]!
    33f4:	str	lr, [sp, #4]
    33f8:	add	fp, sp, #4
    33fc:	sub	sp, sp, #8
    3400:	str	r0, [fp, #-8]
    3404:	ldr	r3, [fp, #-8]
    3408:	cmp	r3, #0
    340c:	bne	3434 <coda_type_record_validate+0x44>
    3410:	movw	r3, #1542	; 0x606
    3414:	movw	r2, #0
    3418:	movt	r2, #0
    341c:	movw	r1, #0
    3420:	movt	r1, #0
    3424:	mvn	r0, #99	; 0x63
    3428:	bl	0 <coda_set_error>
    342c:	mvn	r3, #0
    3430:	b	34c0 <coda_type_record_validate+0xd0>
    3434:	ldr	r3, [fp, #-8]
    3438:	ldr	r3, [r3, #64]	; 0x40
    343c:	cmp	r3, #0
    3440:	beq	34bc <coda_type_record_validate+0xcc>
    3444:	ldr	r3, [fp, #-8]
    3448:	ldr	r3, [r3, #48]	; 0x30
    344c:	cmp	r3, #0
    3450:	bne	3470 <coda_type_record_validate+0x80>
    3454:	movw	r1, #0
    3458:	movt	r1, #0
    345c:	movw	r0, #65136	; 0xfe70
    3460:	movt	r0, #65535	; 0xffff
    3464:	bl	0 <coda_set_error>
    3468:	mvn	r3, #0
    346c:	b	34c0 <coda_type_record_validate+0xd0>
    3470:	ldr	r3, [fp, #-8]
    3474:	ldr	r3, [r3]
    3478:	cmp	r3, #0
    347c:	beq	3490 <coda_type_record_validate+0xa0>
    3480:	ldr	r3, [fp, #-8]
    3484:	ldr	r3, [r3]
    3488:	cmp	r3, #1
    348c:	bne	34bc <coda_type_record_validate+0xcc>
    3490:	ldr	r3, [fp, #-8]
    3494:	ldr	r3, [r3, #68]	; 0x44
    3498:	cmp	r3, #0
    349c:	bne	34bc <coda_type_record_validate+0xcc>
    34a0:	movw	r1, #0
    34a4:	movt	r1, #0
    34a8:	movw	r0, #65136	; 0xfe70
    34ac:	movt	r0, #65535	; 0xffff
    34b0:	bl	0 <coda_set_error>
    34b4:	mvn	r3, #0
    34b8:	b	34c0 <coda_type_record_validate+0xd0>
    34bc:	mov	r3, #0
    34c0:	mov	r0, r3
    34c4:	sub	sp, fp, #4
    34c8:	ldr	fp, [sp]
    34cc:	add	sp, sp, #4
    34d0:	pop	{pc}		; (ldr pc, [sp], #4)

000034d4 <coda_type_record_get_unique_field_name>:
    34d4:	str	fp, [sp, #-8]!
    34d8:	str	lr, [sp, #4]
    34dc:	add	fp, sp, #4
    34e0:	sub	sp, sp, #8
    34e4:	str	r0, [fp, #-8]
    34e8:	str	r1, [fp, #-12]
    34ec:	ldr	r3, [fp, #-8]
    34f0:	ldr	r3, [r3]
    34f4:	cmp	r3, #2
    34f8:	bne	3508 <coda_type_record_get_unique_field_name+0x34>
    34fc:	ldr	r0, [fp, #-12]
    3500:	bl	0 <coda_element_name_from_xml_name>
    3504:	str	r0, [fp, #-12]
    3508:	ldr	r3, [fp, #-8]
    350c:	ldr	r3, [r3, #40]	; 0x28
    3510:	mov	r1, r3
    3514:	ldr	r0, [fp, #-12]
    3518:	bl	0 <coda_identifier_from_name>
    351c:	mov	r3, r0
    3520:	mov	r0, r3
    3524:	sub	sp, fp, #4
    3528:	ldr	fp, [sp]
    352c:	add	sp, sp, #4
    3530:	pop	{pc}		; (ldr pc, [sp], #4)

00003534 <coda_type_array_new>:
    3534:	str	fp, [sp, #-8]!
    3538:	str	lr, [sp, #4]
    353c:	add	fp, sp, #4
    3540:	sub	sp, sp, #24
    3544:	str	r0, [fp, #-16]
    3548:	mov	r0, #120	; 0x78
    354c:	bl	0 <malloc>
    3550:	mov	r3, r0
    3554:	str	r3, [fp, #-8]
    3558:	ldr	r3, [fp, #-8]
    355c:	cmp	r3, #0
    3560:	bne	3590 <coda_type_array_new+0x5c>
    3564:	movw	r3, #1581	; 0x62d
    3568:	str	r3, [sp]
    356c:	movw	r3, #0
    3570:	movt	r3, #0
    3574:	mov	r2, #120	; 0x78
    3578:	movw	r1, #0
    357c:	movt	r1, #0
    3580:	mvn	r0, #0
    3584:	bl	0 <coda_set_error>
    3588:	mov	r3, #0
    358c:	b	3650 <coda_type_array_new+0x11c>
    3590:	ldr	r3, [fp, #-8]
    3594:	ldr	r2, [fp, #-16]
    3598:	str	r2, [r3]
    359c:	ldr	r3, [fp, #-8]
    35a0:	mov	r2, #0
    35a4:	str	r2, [r3, #4]
    35a8:	ldr	r3, [fp, #-8]
    35ac:	mov	r2, #1
    35b0:	str	r2, [r3, #8]
    35b4:	ldr	r3, [fp, #-16]
    35b8:	cmp	r3, #0
    35bc:	beq	35cc <coda_type_array_new+0x98>
    35c0:	ldr	r3, [fp, #-16]
    35c4:	cmp	r3, #1
    35c8:	bne	35dc <coda_type_array_new+0xa8>
    35cc:	ldr	r3, [fp, #-8]
    35d0:	mov	r2, #12
    35d4:	str	r2, [r3, #12]
    35d8:	b	35e8 <coda_type_array_new+0xb4>
    35dc:	ldr	r3, [fp, #-8]
    35e0:	mvn	r2, #0
    35e4:	str	r2, [r3, #12]
    35e8:	ldr	r3, [fp, #-8]
    35ec:	mov	r2, #0
    35f0:	str	r2, [r3, #16]
    35f4:	ldr	r3, [fp, #-8]
    35f8:	mov	r2, #0
    35fc:	str	r2, [r3, #20]
    3600:	ldr	r1, [fp, #-8]
    3604:	mvn	r2, #0
    3608:	mvn	r3, #0
    360c:	strd	r2, [r1, #24]
    3610:	ldr	r3, [fp, #-8]
    3614:	mov	r2, #0
    3618:	str	r2, [r3, #32]
    361c:	ldr	r3, [fp, #-8]
    3620:	mov	r2, #0
    3624:	str	r2, [r3, #36]	; 0x24
    3628:	ldr	r3, [fp, #-8]
    362c:	mov	r2, #0
    3630:	str	r2, [r3, #40]	; 0x28
    3634:	ldr	r3, [fp, #-8]
    3638:	mov	r2, #1
    363c:	str	r2, [r3, #44]	; 0x2c
    3640:	ldr	r3, [fp, #-8]
    3644:	mov	r2, #0
    3648:	str	r2, [r3, #48]	; 0x30
    364c:	ldr	r3, [fp, #-8]
    3650:	mov	r0, r3
    3654:	sub	sp, fp, #4
    3658:	ldr	fp, [sp]
    365c:	add	sp, sp, #4
    3660:	pop	{pc}		; (ldr pc, [sp], #4)

00003664 <coda_type_array_set_base_type>:
    3664:	str	r4, [sp, #-12]!
    3668:	str	fp, [sp, #4]
    366c:	str	lr, [sp, #8]
    3670:	add	fp, sp, #8
    3674:	sub	sp, sp, #12
    3678:	str	r0, [fp, #-16]
    367c:	str	r1, [fp, #-20]	; 0xffffffec
    3680:	ldr	r3, [fp, #-16]
    3684:	cmp	r3, #0
    3688:	bne	36b0 <coda_type_array_set_base_type+0x4c>
    368c:	movw	r3, #1611	; 0x64b
    3690:	movw	r2, #0
    3694:	movt	r2, #0
    3698:	movw	r1, #0
    369c:	movt	r1, #0
    36a0:	mvn	r0, #99	; 0x63
    36a4:	bl	0 <coda_set_error>
    36a8:	mvn	r3, #0
    36ac:	b	3858 <coda_type_array_set_base_type+0x1f4>
    36b0:	ldr	r3, [fp, #-16]
    36b4:	ldr	r3, [r3, #40]	; 0x28
    36b8:	cmp	r3, #0
    36bc:	beq	36dc <coda_type_array_set_base_type+0x78>
    36c0:	movw	r1, #0
    36c4:	movt	r1, #0
    36c8:	movw	r0, #65136	; 0xfe70
    36cc:	movt	r0, #65535	; 0xffff
    36d0:	bl	0 <coda_set_error>
    36d4:	mvn	r3, #0
    36d8:	b	3858 <coda_type_array_set_base_type+0x1f4>
    36dc:	ldr	r3, [fp, #-16]
    36e0:	ldr	r2, [r3]
    36e4:	ldr	r3, [fp, #-20]	; 0xffffffec
    36e8:	ldr	r3, [r3]
    36ec:	cmp	r2, r3
    36f0:	beq	376c <coda_type_array_set_base_type+0x108>
    36f4:	ldr	r3, [fp, #-20]	; 0xffffffec
    36f8:	ldr	r3, [r3]
    36fc:	cmp	r3, #0
    3700:	bne	3724 <coda_type_array_set_base_type+0xc0>
    3704:	ldr	r3, [fp, #-16]
    3708:	ldr	r3, [r3]
    370c:	cmp	r3, #1
    3710:	beq	376c <coda_type_array_set_base_type+0x108>
    3714:	ldr	r3, [fp, #-16]
    3718:	ldr	r3, [r3]
    371c:	cmp	r3, #2
    3720:	beq	376c <coda_type_array_set_base_type+0x108>
    3724:	ldr	r3, [fp, #-20]	; 0xffffffec
    3728:	ldr	r3, [r3]
    372c:	mov	r0, r3
    3730:	bl	61a4 <coda_type_get_format_name>
    3734:	mov	r4, r0
    3738:	ldr	r3, [fp, #-16]
    373c:	ldr	r3, [r3]
    3740:	mov	r0, r3
    3744:	bl	61a4 <coda_type_get_format_name>
    3748:	mov	r3, r0
    374c:	mov	r2, r4
    3750:	movw	r1, #0
    3754:	movt	r1, #0
    3758:	movw	r0, #65136	; 0xfe70
    375c:	movt	r0, #65535	; 0xffff
    3760:	bl	0 <coda_set_error>
    3764:	mvn	r3, #0
    3768:	b	3858 <coda_type_array_set_base_type+0x1f4>
    376c:	ldr	r3, [fp, #-16]
    3770:	ldr	r3, [r3]
    3774:	cmp	r3, #2
    3778:	bne	37b8 <coda_type_array_set_base_type+0x154>
    377c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3780:	ldr	r3, [r3]
    3784:	cmp	r3, #2
    3788:	bne	37b8 <coda_type_array_set_base_type+0x154>
    378c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3790:	ldr	r3, [r3, #8]
    3794:	cmp	r3, #1
    3798:	bne	37b8 <coda_type_array_set_base_type+0x154>
    379c:	movw	r1, #0
    37a0:	movt	r1, #0
    37a4:	movw	r0, #65136	; 0xfe70
    37a8:	movt	r0, #65535	; 0xffff
    37ac:	bl	0 <coda_set_error>
    37b0:	mvn	r3, #0
    37b4:	b	3858 <coda_type_array_set_base_type+0x1f4>
    37b8:	ldr	r3, [fp, #-16]
    37bc:	ldr	r2, [fp, #-20]	; 0xffffffec
    37c0:	str	r2, [r3, #40]	; 0x28
    37c4:	ldr	r3, [fp, #-20]	; 0xffffffec
    37c8:	ldr	r3, [r3, #4]
    37cc:	add	r2, r3, #1
    37d0:	ldr	r3, [fp, #-20]	; 0xffffffec
    37d4:	str	r2, [r3, #4]
    37d8:	ldr	r3, [fp, #-16]
    37dc:	ldr	r3, [r3]
    37e0:	cmp	r3, #0
    37e4:	beq	37f8 <coda_type_array_set_base_type+0x194>
    37e8:	ldr	r3, [fp, #-16]
    37ec:	ldr	r3, [r3]
    37f0:	cmp	r3, #1
    37f4:	bne	3854 <coda_type_array_set_base_type+0x1f0>
    37f8:	ldr	r3, [fp, #-16]
    37fc:	ldr	r3, [r3, #44]	; 0x2c
    3800:	cmp	r3, #0
    3804:	blt	3854 <coda_type_array_set_base_type+0x1f0>
    3808:	ldr	r3, [fp, #-20]	; 0xffffffec
    380c:	ldrd	r2, [r3, #24]
    3810:	cmp	r2, #0
    3814:	sbcs	r3, r3, #0
    3818:	blt	3854 <coda_type_array_set_base_type+0x1f0>
    381c:	ldr	r3, [fp, #-16]
    3820:	ldr	r3, [r3, #44]	; 0x2c
    3824:	mov	r0, r3
    3828:	asr	r1, r0, #31
    382c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3830:	ldrd	r2, [r3, #24]
    3834:	mul	lr, r2, r1
    3838:	mul	ip, r0, r3
    383c:	add	ip, lr, ip
    3840:	umull	r2, r3, r0, r2
    3844:	add	r1, ip, r3
    3848:	mov	r3, r1
    384c:	ldr	r1, [fp, #-16]
    3850:	strd	r2, [r1, #24]
    3854:	mov	r3, #0
    3858:	mov	r0, r3
    385c:	sub	sp, fp, #8
    3860:	ldr	r4, [sp]
    3864:	ldr	fp, [sp, #4]
    3868:	add	sp, sp, #8
    386c:	pop	{pc}		; (ldr pc, [sp], #4)

00003870 <coda_type_array_add_fixed_dimension>:
    3870:	str	fp, [sp, #-8]!
    3874:	str	lr, [sp, #4]
    3878:	add	fp, sp, #4
    387c:	sub	sp, sp, #8
    3880:	str	r0, [fp, #-8]
    3884:	str	r1, [fp, #-12]
    3888:	ldr	r3, [fp, #-8]
    388c:	cmp	r3, #0
    3890:	bne	38b8 <coda_type_array_add_fixed_dimension+0x48>
    3894:	movw	r3, #1658	; 0x67a
    3898:	movw	r2, #0
    389c:	movt	r2, #0
    38a0:	movw	r1, #0
    38a4:	movt	r1, #0
    38a8:	mvn	r0, #99	; 0x63
    38ac:	bl	0 <coda_set_error>
    38b0:	mvn	r3, #0
    38b4:	b	3a38 <coda_type_array_add_fixed_dimension+0x1c8>
    38b8:	ldr	r3, [fp, #-12]
    38bc:	cmp	r3, #0
    38c0:	bge	38e4 <coda_type_array_add_fixed_dimension+0x74>
    38c4:	ldr	r2, [fp, #-12]
    38c8:	movw	r1, #0
    38cc:	movt	r1, #0
    38d0:	movw	r0, #65136	; 0xfe70
    38d4:	movt	r0, #65535	; 0xffff
    38d8:	bl	0 <coda_set_error>
    38dc:	mvn	r3, #0
    38e0:	b	3a38 <coda_type_array_add_fixed_dimension+0x1c8>
    38e4:	ldr	r3, [fp, #-8]
    38e8:	ldr	r3, [r3, #48]	; 0x30
    38ec:	cmp	r3, #8
    38f0:	bne	3914 <coda_type_array_add_fixed_dimension+0xa4>
    38f4:	mov	r2, #8
    38f8:	movw	r1, #0
    38fc:	movt	r1, #0
    3900:	movw	r0, #65136	; 0xfe70
    3904:	movt	r0, #65535	; 0xffff
    3908:	bl	0 <coda_set_error>
    390c:	mvn	r3, #0
    3910:	b	3a38 <coda_type_array_add_fixed_dimension+0x1c8>
    3914:	ldr	r3, [fp, #-8]
    3918:	ldr	r3, [r3, #48]	; 0x30
    391c:	ldr	r2, [fp, #-8]
    3920:	add	r3, r3, #12
    3924:	lsl	r3, r3, #2
    3928:	add	r3, r2, r3
    392c:	ldr	r2, [fp, #-12]
    3930:	str	r2, [r3, #4]
    3934:	ldr	r3, [fp, #-8]
    3938:	ldr	r3, [r3, #48]	; 0x30
    393c:	ldr	r2, [fp, #-8]
    3940:	add	r3, r3, #20
    3944:	lsl	r3, r3, #2
    3948:	add	r3, r2, r3
    394c:	mov	r2, #0
    3950:	str	r2, [r3, #4]
    3954:	ldr	r3, [fp, #-8]
    3958:	ldr	r3, [r3, #48]	; 0x30
    395c:	add	r2, r3, #1
    3960:	ldr	r3, [fp, #-8]
    3964:	str	r2, [r3, #48]	; 0x30
    3968:	ldr	r3, [fp, #-8]
    396c:	ldr	r3, [r3, #44]	; 0x2c
    3970:	cmn	r3, #1
    3974:	beq	3a34 <coda_type_array_add_fixed_dimension+0x1c4>
    3978:	ldr	r3, [fp, #-8]
    397c:	ldr	r3, [r3, #48]	; 0x30
    3980:	cmp	r3, #1
    3984:	bne	3998 <coda_type_array_add_fixed_dimension+0x128>
    3988:	ldr	r3, [fp, #-8]
    398c:	ldr	r2, [fp, #-12]
    3990:	str	r2, [r3, #44]	; 0x2c
    3994:	b	39b0 <coda_type_array_add_fixed_dimension+0x140>
    3998:	ldr	r3, [fp, #-8]
    399c:	ldr	r3, [r3, #44]	; 0x2c
    39a0:	ldr	r2, [fp, #-12]
    39a4:	mul	r2, r2, r3
    39a8:	ldr	r3, [fp, #-8]
    39ac:	str	r2, [r3, #44]	; 0x2c
    39b0:	ldr	r3, [fp, #-8]
    39b4:	ldr	r3, [r3]
    39b8:	cmp	r3, #0
    39bc:	beq	39d0 <coda_type_array_add_fixed_dimension+0x160>
    39c0:	ldr	r3, [fp, #-8]
    39c4:	ldr	r3, [r3]
    39c8:	cmp	r3, #1
    39cc:	bne	3a34 <coda_type_array_add_fixed_dimension+0x1c4>
    39d0:	ldr	r3, [fp, #-8]
    39d4:	ldr	r3, [r3, #40]	; 0x28
    39d8:	cmp	r3, #0
    39dc:	beq	3a34 <coda_type_array_add_fixed_dimension+0x1c4>
    39e0:	ldr	r3, [fp, #-8]
    39e4:	ldr	r3, [r3, #40]	; 0x28
    39e8:	ldrd	r2, [r3, #24]
    39ec:	cmp	r2, #0
    39f0:	sbcs	r3, r3, #0
    39f4:	blt	3a34 <coda_type_array_add_fixed_dimension+0x1c4>
    39f8:	ldr	r3, [fp, #-8]
    39fc:	ldr	r3, [r3, #44]	; 0x2c
    3a00:	mov	r0, r3
    3a04:	asr	r1, r0, #31
    3a08:	ldr	r3, [fp, #-8]
    3a0c:	ldr	r3, [r3, #40]	; 0x28
    3a10:	ldrd	r2, [r3, #24]
    3a14:	mul	lr, r2, r1
    3a18:	mul	ip, r0, r3
    3a1c:	add	ip, lr, ip
    3a20:	umull	r2, r3, r0, r2
    3a24:	add	r1, ip, r3
    3a28:	mov	r3, r1
    3a2c:	ldr	r1, [fp, #-8]
    3a30:	strd	r2, [r1, #24]
    3a34:	mov	r3, #0
    3a38:	mov	r0, r3
    3a3c:	sub	sp, fp, #4
    3a40:	ldr	fp, [sp]
    3a44:	add	sp, sp, #4
    3a48:	pop	{pc}		; (ldr pc, [sp], #4)

00003a4c <coda_type_array_add_variable_dimension>:
    3a4c:	str	fp, [sp, #-8]!
    3a50:	str	lr, [sp, #4]
    3a54:	add	fp, sp, #4
    3a58:	sub	sp, sp, #8
    3a5c:	str	r0, [fp, #-8]
    3a60:	str	r1, [fp, #-12]
    3a64:	ldr	r3, [fp, #-8]
    3a68:	cmp	r3, #0
    3a6c:	bne	3a94 <coda_type_array_add_variable_dimension+0x48>
    3a70:	movw	r3, #1705	; 0x6a9
    3a74:	movw	r2, #0
    3a78:	movt	r2, #0
    3a7c:	movw	r1, #0
    3a80:	movt	r1, #0
    3a84:	mvn	r0, #99	; 0x63
    3a88:	bl	0 <coda_set_error>
    3a8c:	mvn	r3, #0
    3a90:	b	3bcc <coda_type_array_add_variable_dimension+0x180>
    3a94:	ldr	r3, [fp, #-8]
    3a98:	ldr	r3, [r3, #48]	; 0x30
    3a9c:	cmp	r3, #8
    3aa0:	bne	3ac4 <coda_type_array_add_variable_dimension+0x78>
    3aa4:	mov	r2, #8
    3aa8:	movw	r1, #0
    3aac:	movt	r1, #0
    3ab0:	movw	r0, #65136	; 0xfe70
    3ab4:	movt	r0, #65535	; 0xffff
    3ab8:	bl	0 <coda_set_error>
    3abc:	mvn	r3, #0
    3ac0:	b	3bcc <coda_type_array_add_variable_dimension+0x180>
    3ac4:	ldr	r3, [fp, #-8]
    3ac8:	ldr	r3, [r3]
    3acc:	cmp	r3, #0
    3ad0:	beq	3ae4 <coda_type_array_add_variable_dimension+0x98>
    3ad4:	ldr	r3, [fp, #-8]
    3ad8:	ldr	r3, [r3]
    3adc:	cmp	r3, #1
    3ae0:	bne	3b24 <coda_type_array_add_variable_dimension+0xd8>
    3ae4:	ldr	r3, [fp, #-12]
    3ae8:	cmp	r3, #0
    3aec:	bne	3b24 <coda_type_array_add_variable_dimension+0xd8>
    3af0:	ldr	r3, [fp, #-8]
    3af4:	ldr	r3, [r3]
    3af8:	mov	r0, r3
    3afc:	bl	61a4 <coda_type_get_format_name>
    3b00:	mov	r3, r0
    3b04:	mov	r2, r3
    3b08:	movw	r1, #0
    3b0c:	movt	r1, #0
    3b10:	movw	r0, #65136	; 0xfe70
    3b14:	movt	r0, #65535	; 0xffff
    3b18:	bl	0 <coda_set_error>
    3b1c:	mvn	r3, #0
    3b20:	b	3bcc <coda_type_array_add_variable_dimension+0x180>
    3b24:	ldr	r3, [fp, #-8]
    3b28:	ldr	r3, [r3, #48]	; 0x30
    3b2c:	ldr	r2, [fp, #-8]
    3b30:	add	r3, r3, #12
    3b34:	lsl	r3, r3, #2
    3b38:	add	r3, r2, r3
    3b3c:	mvn	r2, #0
    3b40:	str	r2, [r3, #4]
    3b44:	ldr	r3, [fp, #-8]
    3b48:	ldr	r3, [r3, #48]	; 0x30
    3b4c:	ldr	r2, [fp, #-8]
    3b50:	add	r3, r3, #20
    3b54:	lsl	r3, r3, #2
    3b58:	add	r3, r2, r3
    3b5c:	ldr	r2, [fp, #-12]
    3b60:	str	r2, [r3, #4]
    3b64:	ldr	r3, [fp, #-8]
    3b68:	ldr	r3, [r3, #48]	; 0x30
    3b6c:	add	r2, r3, #1
    3b70:	ldr	r3, [fp, #-8]
    3b74:	str	r2, [r3, #48]	; 0x30
    3b78:	ldr	r3, [fp, #-8]
    3b7c:	mvn	r2, #0
    3b80:	str	r2, [r3, #44]	; 0x2c
    3b84:	ldr	r3, [fp, #-8]
    3b88:	ldr	r3, [r3]
    3b8c:	cmp	r3, #0
    3b90:	beq	3ba4 <coda_type_array_add_variable_dimension+0x158>
    3b94:	ldr	r3, [fp, #-8]
    3b98:	ldr	r3, [r3]
    3b9c:	cmp	r3, #1
    3ba0:	bne	3bc8 <coda_type_array_add_variable_dimension+0x17c>
    3ba4:	ldr	r3, [fp, #-8]
    3ba8:	ldrd	r2, [r3, #24]
    3bac:	cmp	r2, #0
    3bb0:	sbcs	r3, r3, #0
    3bb4:	blt	3bc8 <coda_type_array_add_variable_dimension+0x17c>
    3bb8:	ldr	r1, [fp, #-8]
    3bbc:	mvn	r2, #0
    3bc0:	mvn	r3, #0
    3bc4:	strd	r2, [r1, #24]
    3bc8:	mov	r3, #0
    3bcc:	mov	r0, r3
    3bd0:	sub	sp, fp, #4
    3bd4:	ldr	fp, [sp]
    3bd8:	add	sp, sp, #4
    3bdc:	pop	{pc}		; (ldr pc, [sp], #4)

00003be0 <coda_type_array_validate>:
    3be0:	str	fp, [sp, #-8]!
    3be4:	str	lr, [sp, #4]
    3be8:	add	fp, sp, #4
    3bec:	sub	sp, sp, #8
    3bf0:	str	r0, [fp, #-8]
    3bf4:	ldr	r3, [fp, #-8]
    3bf8:	cmp	r3, #0
    3bfc:	bne	3c24 <coda_type_array_validate+0x44>
    3c00:	movw	r3, #1742	; 0x6ce
    3c04:	movw	r2, #0
    3c08:	movt	r2, #0
    3c0c:	movw	r1, #0
    3c10:	movt	r1, #0
    3c14:	mvn	r0, #99	; 0x63
    3c18:	bl	0 <coda_set_error>
    3c1c:	mvn	r3, #0
    3c20:	b	3c54 <coda_type_array_validate+0x74>
    3c24:	ldr	r3, [fp, #-8]
    3c28:	ldr	r3, [r3, #48]	; 0x30
    3c2c:	cmp	r3, #0
    3c30:	bne	3c50 <coda_type_array_validate+0x70>
    3c34:	movw	r1, #0
    3c38:	movt	r1, #0
    3c3c:	movw	r0, #65136	; 0xfe70
    3c40:	movt	r0, #65535	; 0xffff
    3c44:	bl	0 <coda_set_error>
    3c48:	mvn	r3, #0
    3c4c:	b	3c54 <coda_type_array_validate+0x74>
    3c50:	mov	r3, #0
    3c54:	mov	r0, r3
    3c58:	sub	sp, fp, #4
    3c5c:	ldr	fp, [sp]
    3c60:	add	sp, sp, #4
    3c64:	pop	{pc}		; (ldr pc, [sp], #4)

00003c68 <coda_type_number_new>:
    3c68:	str	fp, [sp, #-8]!
    3c6c:	str	lr, [sp, #4]
    3c70:	add	fp, sp, #4
    3c74:	sub	sp, sp, #24
    3c78:	str	r0, [fp, #-16]
    3c7c:	str	r1, [fp, #-20]	; 0xffffffec
    3c80:	ldr	r3, [fp, #-20]	; 0xffffffec
    3c84:	cmp	r3, #2
    3c88:	beq	3cc4 <coda_type_number_new+0x5c>
    3c8c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3c90:	cmp	r3, #3
    3c94:	beq	3cc4 <coda_type_number_new+0x5c>
    3c98:	ldr	r0, [fp, #-20]	; 0xffffffec
    3c9c:	bl	627c <coda_type_get_class_name>
    3ca0:	mov	r3, r0
    3ca4:	mov	r2, r3
    3ca8:	movw	r1, #0
    3cac:	movt	r1, #0
    3cb0:	movw	r0, #65136	; 0xfe70
    3cb4:	movt	r0, #65535	; 0xffff
    3cb8:	bl	0 <coda_set_error>
    3cbc:	mov	r3, #0
    3cc0:	b	3dc4 <coda_type_number_new+0x15c>
    3cc4:	mov	r0, #56	; 0x38
    3cc8:	bl	0 <malloc>
    3ccc:	mov	r3, r0
    3cd0:	str	r3, [fp, #-8]
    3cd4:	ldr	r3, [fp, #-8]
    3cd8:	cmp	r3, #0
    3cdc:	bne	3d0c <coda_type_number_new+0xa4>
    3ce0:	movw	r3, #1769	; 0x6e9
    3ce4:	str	r3, [sp]
    3ce8:	movw	r3, #0
    3cec:	movt	r3, #0
    3cf0:	mov	r2, #56	; 0x38
    3cf4:	movw	r1, #0
    3cf8:	movt	r1, #0
    3cfc:	mvn	r0, #0
    3d00:	bl	0 <coda_set_error>
    3d04:	mov	r3, #0
    3d08:	b	3dc4 <coda_type_number_new+0x15c>
    3d0c:	ldr	r3, [fp, #-8]
    3d10:	ldr	r2, [fp, #-16]
    3d14:	str	r2, [r3]
    3d18:	ldr	r3, [fp, #-8]
    3d1c:	mov	r2, #0
    3d20:	str	r2, [r3, #4]
    3d24:	ldr	r3, [fp, #-8]
    3d28:	ldr	r2, [fp, #-20]	; 0xffffffec
    3d2c:	str	r2, [r3, #8]
    3d30:	ldr	r3, [fp, #-20]	; 0xffffffec
    3d34:	cmp	r3, #2
    3d38:	bne	3d44 <coda_type_number_new+0xdc>
    3d3c:	mov	r2, #6
    3d40:	b	3d48 <coda_type_number_new+0xe0>
    3d44:	mov	r2, #9
    3d48:	ldr	r3, [fp, #-8]
    3d4c:	str	r2, [r3, #12]
    3d50:	ldr	r3, [fp, #-8]
    3d54:	mov	r2, #0
    3d58:	str	r2, [r3, #16]
    3d5c:	ldr	r3, [fp, #-8]
    3d60:	mov	r2, #0
    3d64:	str	r2, [r3, #20]
    3d68:	ldr	r1, [fp, #-8]
    3d6c:	mvn	r2, #0
    3d70:	mvn	r3, #0
    3d74:	strd	r2, [r1, #24]
    3d78:	ldr	r3, [fp, #-8]
    3d7c:	mov	r2, #0
    3d80:	str	r2, [r3, #32]
    3d84:	ldr	r3, [fp, #-8]
    3d88:	mov	r2, #0
    3d8c:	str	r2, [r3, #36]	; 0x24
    3d90:	ldr	r3, [fp, #-8]
    3d94:	mov	r2, #0
    3d98:	str	r2, [r3, #40]	; 0x28
    3d9c:	ldr	r3, [fp, #-8]
    3da0:	mov	r2, #0
    3da4:	str	r2, [r3, #44]	; 0x2c
    3da8:	ldr	r3, [fp, #-8]
    3dac:	mov	r2, #0
    3db0:	str	r2, [r3, #48]	; 0x30
    3db4:	ldr	r3, [fp, #-8]
    3db8:	mov	r2, #0
    3dbc:	str	r2, [r3, #52]	; 0x34
    3dc0:	ldr	r3, [fp, #-8]
    3dc4:	mov	r0, r3
    3dc8:	sub	sp, fp, #4
    3dcc:	ldr	fp, [sp]
    3dd0:	add	sp, sp, #4
    3dd4:	pop	{pc}		; (ldr pc, [sp], #4)

00003dd8 <coda_type_number_set_unit>:
    3dd8:	str	fp, [sp, #-8]!
    3ddc:	str	lr, [sp, #4]
    3de0:	add	fp, sp, #4
    3de4:	sub	sp, sp, #8
    3de8:	str	r0, [fp, #-8]
    3dec:	str	r1, [fp, #-12]
    3df0:	ldr	r3, [fp, #-12]
    3df4:	cmp	r3, #0
    3df8:	bne	3e20 <coda_type_number_set_unit+0x48>
    3dfc:	movw	r3, #1793	; 0x701
    3e00:	movw	r2, #0
    3e04:	movt	r2, #0
    3e08:	movw	r1, #0
    3e0c:	movt	r1, #0
    3e10:	mvn	r0, #99	; 0x63
    3e14:	bl	0 <coda_set_error>
    3e18:	mvn	r3, #0
    3e1c:	b	3e9c <coda_type_number_set_unit+0xc4>
    3e20:	ldr	r3, [fp, #-8]
    3e24:	ldr	r3, [r3, #40]	; 0x28
    3e28:	cmp	r3, #0
    3e2c:	beq	3e4c <coda_type_number_set_unit+0x74>
    3e30:	movw	r1, #0
    3e34:	movt	r1, #0
    3e38:	movw	r0, #65136	; 0xfe70
    3e3c:	movt	r0, #65535	; 0xffff
    3e40:	bl	0 <coda_set_error>
    3e44:	mvn	r3, #0
    3e48:	b	3e9c <coda_type_number_set_unit+0xc4>
    3e4c:	ldr	r0, [fp, #-12]
    3e50:	bl	0 <strdup>
    3e54:	mov	r3, r0
    3e58:	mov	r2, r3
    3e5c:	ldr	r3, [fp, #-8]
    3e60:	str	r2, [r3, #40]	; 0x28
    3e64:	ldr	r3, [fp, #-8]
    3e68:	ldr	r3, [r3, #40]	; 0x28
    3e6c:	cmp	r3, #0
    3e70:	bne	3e98 <coda_type_number_set_unit+0xc0>
    3e74:	movw	r3, #1805	; 0x70d
    3e78:	movw	r2, #0
    3e7c:	movt	r2, #0
    3e80:	movw	r1, #0
    3e84:	movt	r1, #0
    3e88:	mvn	r0, #0
    3e8c:	bl	0 <coda_set_error>
    3e90:	mvn	r3, #0
    3e94:	b	3e9c <coda_type_number_set_unit+0xc4>
    3e98:	mov	r3, #0
    3e9c:	mov	r0, r3
    3ea0:	sub	sp, fp, #4
    3ea4:	ldr	fp, [sp]
    3ea8:	add	sp, sp, #4
    3eac:	pop	{pc}		; (ldr pc, [sp], #4)

00003eb0 <coda_type_number_set_endianness>:
    3eb0:	str	fp, [sp, #-8]!
    3eb4:	str	lr, [sp, #4]
    3eb8:	add	fp, sp, #4
    3ebc:	sub	sp, sp, #8
    3ec0:	str	r0, [fp, #-8]
    3ec4:	str	r1, [fp, #-12]
    3ec8:	ldr	r3, [fp, #-8]
    3ecc:	cmp	r3, #0
    3ed0:	bne	3ef8 <coda_type_number_set_endianness+0x48>
    3ed4:	movw	r3, #1816	; 0x718
    3ed8:	movw	r2, #0
    3edc:	movt	r2, #0
    3ee0:	movw	r1, #0
    3ee4:	movt	r1, #0
    3ee8:	mvn	r0, #99	; 0x63
    3eec:	bl	0 <coda_set_error>
    3ef0:	mvn	r3, #0
    3ef4:	b	3f08 <coda_type_number_set_endianness+0x58>
    3ef8:	ldr	r3, [fp, #-8]
    3efc:	ldr	r2, [fp, #-12]
    3f00:	str	r2, [r3, #44]	; 0x2c
    3f04:	mov	r3, #0
    3f08:	mov	r0, r3
    3f0c:	sub	sp, fp, #4
    3f10:	ldr	fp, [sp]
    3f14:	add	sp, sp, #4
    3f18:	pop	{pc}		; (ldr pc, [sp], #4)

00003f1c <coda_type_number_set_conversion>:
    3f1c:	str	fp, [sp, #-8]!
    3f20:	str	lr, [sp, #4]
    3f24:	add	fp, sp, #4
    3f28:	sub	sp, sp, #8
    3f2c:	str	r0, [fp, #-8]
    3f30:	str	r1, [fp, #-12]
    3f34:	ldr	r3, [fp, #-8]
    3f38:	cmp	r3, #0
    3f3c:	bne	3f64 <coda_type_number_set_conversion+0x48>
    3f40:	movw	r3, #1827	; 0x723
    3f44:	movw	r2, #0
    3f48:	movt	r2, #0
    3f4c:	movw	r1, #0
    3f50:	movt	r1, #0
    3f54:	mvn	r0, #99	; 0x63
    3f58:	bl	0 <coda_set_error>
    3f5c:	mvn	r3, #0
    3f60:	b	3fa0 <coda_type_number_set_conversion+0x84>
    3f64:	ldr	r3, [fp, #-8]
    3f68:	ldr	r3, [r3, #48]	; 0x30
    3f6c:	cmp	r3, #0
    3f70:	beq	3f90 <coda_type_number_set_conversion+0x74>
    3f74:	movw	r1, #0
    3f78:	movt	r1, #0
    3f7c:	movw	r0, #65136	; 0xfe70
    3f80:	movt	r0, #65535	; 0xffff
    3f84:	bl	0 <coda_set_error>
    3f88:	mvn	r3, #0
    3f8c:	b	3fa0 <coda_type_number_set_conversion+0x84>
    3f90:	ldr	r3, [fp, #-8]
    3f94:	ldr	r2, [fp, #-12]
    3f98:	str	r2, [r3, #48]	; 0x30
    3f9c:	mov	r3, #0
    3fa0:	mov	r0, r3
    3fa4:	sub	sp, fp, #4
    3fa8:	ldr	fp, [sp]
    3fac:	add	sp, sp, #4
    3fb0:	pop	{pc}		; (ldr pc, [sp], #4)

00003fb4 <coda_type_number_add_ascii_float_mapping>:
    3fb4:	str	fp, [sp, #-8]!
    3fb8:	str	lr, [sp, #4]
    3fbc:	add	fp, sp, #4
    3fc0:	sub	sp, sp, #8
    3fc4:	str	r0, [fp, #-8]
    3fc8:	str	r1, [fp, #-12]
    3fcc:	ldr	r3, [fp, #-8]
    3fd0:	cmp	r3, #0
    3fd4:	bne	3ffc <coda_type_number_add_ascii_float_mapping+0x48>
    3fd8:	movw	r3, #1843	; 0x733
    3fdc:	movw	r2, #0
    3fe0:	movt	r2, #0
    3fe4:	movw	r1, #0
    3fe8:	movt	r1, #0
    3fec:	mvn	r0, #99	; 0x63
    3ff0:	bl	0 <coda_set_error>
    3ff4:	mvn	r3, #0
    3ff8:	b	4074 <coda_type_number_add_ascii_float_mapping+0xc0>
    3ffc:	ldr	r3, [fp, #-12]
    4000:	cmp	r3, #0
    4004:	bne	402c <coda_type_number_add_ascii_float_mapping+0x78>
    4008:	movw	r3, #1848	; 0x738
    400c:	movw	r2, #0
    4010:	movt	r2, #0
    4014:	movw	r1, #0
    4018:	movt	r1, #0
    401c:	mvn	r0, #99	; 0x63
    4020:	bl	0 <coda_set_error>
    4024:	mvn	r3, #0
    4028:	b	4074 <coda_type_number_add_ascii_float_mapping+0xc0>
    402c:	ldr	r3, [fp, #-8]
    4030:	ldr	r3, [r3, #8]
    4034:	cmp	r3, #3
    4038:	beq	4058 <coda_type_number_add_ascii_float_mapping+0xa4>
    403c:	movw	r1, #0
    4040:	movt	r1, #0
    4044:	movw	r0, #65136	; 0xfe70
    4048:	movt	r0, #65535	; 0xffff
    404c:	bl	0 <coda_set_error>
    4050:	mvn	r3, #0
    4054:	b	4074 <coda_type_number_add_ascii_float_mapping+0xc0>
    4058:	ldr	r3, [fp, #-8]
    405c:	add	r3, r3, #52	; 0x34
    4060:	ldr	r2, [fp, #-12]
    4064:	mov	r1, r3
    4068:	ldr	r0, [fp, #-8]
    406c:	bl	680 <mapping_type_add_mapping>
    4070:	mov	r3, r0
    4074:	mov	r0, r3
    4078:	sub	sp, fp, #4
    407c:	ldr	fp, [sp]
    4080:	add	sp, sp, #4
    4084:	pop	{pc}		; (ldr pc, [sp], #4)

00004088 <coda_type_number_add_ascii_integer_mapping>:
    4088:	str	fp, [sp, #-8]!
    408c:	str	lr, [sp, #4]
    4090:	add	fp, sp, #4
    4094:	sub	sp, sp, #8
    4098:	str	r0, [fp, #-8]
    409c:	str	r1, [fp, #-12]
    40a0:	ldr	r3, [fp, #-8]
    40a4:	cmp	r3, #0
    40a8:	bne	40d0 <coda_type_number_add_ascii_integer_mapping+0x48>
    40ac:	movw	r3, #1863	; 0x747
    40b0:	movw	r2, #0
    40b4:	movt	r2, #0
    40b8:	movw	r1, #0
    40bc:	movt	r1, #0
    40c0:	mvn	r0, #99	; 0x63
    40c4:	bl	0 <coda_set_error>
    40c8:	mvn	r3, #0
    40cc:	b	4148 <coda_type_number_add_ascii_integer_mapping+0xc0>
    40d0:	ldr	r3, [fp, #-12]
    40d4:	cmp	r3, #0
    40d8:	bne	4100 <coda_type_number_add_ascii_integer_mapping+0x78>
    40dc:	movw	r3, #1868	; 0x74c
    40e0:	movw	r2, #0
    40e4:	movt	r2, #0
    40e8:	movw	r1, #0
    40ec:	movt	r1, #0
    40f0:	mvn	r0, #99	; 0x63
    40f4:	bl	0 <coda_set_error>
    40f8:	mvn	r3, #0
    40fc:	b	4148 <coda_type_number_add_ascii_integer_mapping+0xc0>
    4100:	ldr	r3, [fp, #-8]
    4104:	ldr	r3, [r3, #8]
    4108:	cmp	r3, #2
    410c:	beq	412c <coda_type_number_add_ascii_integer_mapping+0xa4>
    4110:	movw	r1, #0
    4114:	movt	r1, #0
    4118:	movw	r0, #65136	; 0xfe70
    411c:	movt	r0, #65535	; 0xffff
    4120:	bl	0 <coda_set_error>
    4124:	mvn	r3, #0
    4128:	b	4148 <coda_type_number_add_ascii_integer_mapping+0xc0>
    412c:	ldr	r3, [fp, #-8]
    4130:	add	r3, r3, #52	; 0x34
    4134:	ldr	r2, [fp, #-12]
    4138:	mov	r1, r3
    413c:	ldr	r0, [fp, #-8]
    4140:	bl	680 <mapping_type_add_mapping>
    4144:	mov	r3, r0
    4148:	mov	r0, r3
    414c:	sub	sp, fp, #4
    4150:	ldr	fp, [sp]
    4154:	add	sp, sp, #4
    4158:	pop	{pc}		; (ldr pc, [sp], #4)

0000415c <coda_type_number_validate>:
    415c:	strd	r4, [sp, #-16]!
    4160:	str	fp, [sp, #8]
    4164:	str	lr, [sp, #12]
    4168:	add	fp, sp, #12
    416c:	sub	sp, sp, #8
    4170:	str	r0, [fp, #-16]
    4174:	ldr	r1, [fp, #-16]
    4178:	cmp	r1, #0
    417c:	bne	41a4 <coda_type_number_validate+0x48>
    4180:	movw	r3, #1883	; 0x75b
    4184:	movw	r2, #0
    4188:	movt	r2, #0
    418c:	movw	r1, #0
    4190:	movt	r1, #0
    4194:	mvn	r0, #99	; 0x63
    4198:	bl	0 <coda_set_error>
    419c:	mvn	r3, #0
    41a0:	b	44f0 <coda_type_number_validate+0x394>
    41a4:	ldr	r1, [fp, #-16]
    41a8:	ldr	r1, [r1]
    41ac:	cmp	r1, #1
    41b0:	bne	44ec <coda_type_number_validate+0x390>
    41b4:	ldr	r1, [fp, #-16]
    41b8:	ldrd	r0, [r1, #24]
    41bc:	cmp	r0, #0
    41c0:	sbcs	r1, r1, #0
    41c4:	blt	441c <coda_type_number_validate+0x2c0>
    41c8:	ldr	r1, [fp, #-16]
    41cc:	ldr	r1, [r1, #12]
    41d0:	cmp	r1, #9
    41d4:	ldrls	pc, [pc, r1, lsl #2]
    41d8:	b	43fc <coda_type_number_validate+0x2a0>
    41dc:	.word	0x00004204
    41e0:	.word	0x00004204
    41e4:	.word	0x00004258
    41e8:	.word	0x00004258
    41ec:	.word	0x000042ac
    41f0:	.word	0x000042ac
    41f4:	.word	0x00004300
    41f8:	.word	0x00004300
    41fc:	.word	0x00004354
    4200:	.word	0x000043a8
    4204:	ldr	r1, [fp, #-16]
    4208:	ldrd	r0, [r1, #24]
    420c:	cmp	r0, #9
    4210:	sbcs	r1, r1, #0
    4214:	blt	4448 <coda_type_number_validate+0x2ec>
    4218:	ldr	r3, [fp, #-16]
    421c:	ldrd	r2, [r3, #24]
    4220:	mov	r4, r2
    4224:	ldr	r3, [fp, #-16]
    4228:	ldr	r3, [r3, #12]
    422c:	mov	r0, r3
    4230:	bl	6324 <coda_type_get_native_type_name>
    4234:	mov	r3, r0
    4238:	mov	r2, r4
    423c:	movw	r1, #0
    4240:	movt	r1, #0
    4244:	movw	r0, #65136	; 0xfe70
    4248:	movt	r0, #65535	; 0xffff
    424c:	bl	0 <coda_set_error>
    4250:	mvn	r3, #0
    4254:	b	44f0 <coda_type_number_validate+0x394>
    4258:	ldr	r1, [fp, #-16]
    425c:	ldrd	r0, [r1, #24]
    4260:	cmp	r0, #17
    4264:	sbcs	r1, r1, #0
    4268:	blt	4450 <coda_type_number_validate+0x2f4>
    426c:	ldr	r3, [fp, #-16]
    4270:	ldrd	r2, [r3, #24]
    4274:	mov	r4, r2
    4278:	ldr	r3, [fp, #-16]
    427c:	ldr	r3, [r3, #12]
    4280:	mov	r0, r3
    4284:	bl	6324 <coda_type_get_native_type_name>
    4288:	mov	r3, r0
    428c:	mov	r2, r4
    4290:	movw	r1, #0
    4294:	movt	r1, #0
    4298:	movw	r0, #65136	; 0xfe70
    429c:	movt	r0, #65535	; 0xffff
    42a0:	bl	0 <coda_set_error>
    42a4:	mvn	r3, #0
    42a8:	b	44f0 <coda_type_number_validate+0x394>
    42ac:	ldr	r1, [fp, #-16]
    42b0:	ldrd	r0, [r1, #24]
    42b4:	cmp	r0, #33	; 0x21
    42b8:	sbcs	r1, r1, #0
    42bc:	blt	4458 <coda_type_number_validate+0x2fc>
    42c0:	ldr	r3, [fp, #-16]
    42c4:	ldrd	r2, [r3, #24]
    42c8:	mov	r4, r2
    42cc:	ldr	r3, [fp, #-16]
    42d0:	ldr	r3, [r3, #12]
    42d4:	mov	r0, r3
    42d8:	bl	6324 <coda_type_get_native_type_name>
    42dc:	mov	r3, r0
    42e0:	mov	r2, r4
    42e4:	movw	r1, #0
    42e8:	movt	r1, #0
    42ec:	movw	r0, #65136	; 0xfe70
    42f0:	movt	r0, #65535	; 0xffff
    42f4:	bl	0 <coda_set_error>
    42f8:	mvn	r3, #0
    42fc:	b	44f0 <coda_type_number_validate+0x394>
    4300:	ldr	r1, [fp, #-16]
    4304:	ldrd	r0, [r1, #24]
    4308:	cmp	r0, #65	; 0x41
    430c:	sbcs	r1, r1, #0
    4310:	blt	4460 <coda_type_number_validate+0x304>
    4314:	ldr	r3, [fp, #-16]
    4318:	ldrd	r2, [r3, #24]
    431c:	mov	r4, r2
    4320:	ldr	r3, [fp, #-16]
    4324:	ldr	r3, [r3, #12]
    4328:	mov	r0, r3
    432c:	bl	6324 <coda_type_get_native_type_name>
    4330:	mov	r3, r0
    4334:	mov	r2, r4
    4338:	movw	r1, #0
    433c:	movt	r1, #0
    4340:	movw	r0, #65136	; 0xfe70
    4344:	movt	r0, #65535	; 0xffff
    4348:	bl	0 <coda_set_error>
    434c:	mvn	r3, #0
    4350:	b	44f0 <coda_type_number_validate+0x394>
    4354:	ldr	r1, [fp, #-16]
    4358:	ldrd	r0, [r1, #24]
    435c:	cmp	r1, #0
    4360:	cmpeq	r0, #32
    4364:	beq	4468 <coda_type_number_validate+0x30c>
    4368:	ldr	r3, [fp, #-16]
    436c:	ldrd	r2, [r3, #24]
    4370:	mov	r4, r2
    4374:	ldr	r3, [fp, #-16]
    4378:	ldr	r3, [r3, #12]
    437c:	mov	r0, r3
    4380:	bl	6324 <coda_type_get_native_type_name>
    4384:	mov	r3, r0
    4388:	mov	r2, r4
    438c:	movw	r1, #0
    4390:	movt	r1, #0
    4394:	movw	r0, #65136	; 0xfe70
    4398:	movt	r0, #65535	; 0xffff
    439c:	bl	0 <coda_set_error>
    43a0:	mvn	r3, #0
    43a4:	b	44f0 <coda_type_number_validate+0x394>
    43a8:	ldr	r1, [fp, #-16]
    43ac:	ldrd	r0, [r1, #24]
    43b0:	cmp	r1, #0
    43b4:	cmpeq	r0, #64	; 0x40
    43b8:	beq	4470 <coda_type_number_validate+0x314>
    43bc:	ldr	r3, [fp, #-16]
    43c0:	ldrd	r2, [r3, #24]
    43c4:	mov	r4, r2
    43c8:	ldr	r3, [fp, #-16]
    43cc:	ldr	r3, [r3, #12]
    43d0:	mov	r0, r3
    43d4:	bl	6324 <coda_type_get_native_type_name>
    43d8:	mov	r3, r0
    43dc:	mov	r2, r4
    43e0:	movw	r1, #0
    43e4:	movt	r1, #0
    43e8:	movw	r0, #65136	; 0xfe70
    43ec:	movt	r0, #65535	; 0xffff
    43f0:	bl	0 <coda_set_error>
    43f4:	mvn	r3, #0
    43f8:	b	44f0 <coda_type_number_validate+0x394>
    43fc:	movw	r3, #0
    4400:	movt	r3, #0
    4404:	movw	r2, #1951	; 0x79f
    4408:	movw	r1, #0
    440c:	movt	r1, #0
    4410:	movw	r0, #0
    4414:	movt	r0, #0
    4418:	bl	0 <__assert_fail>
    441c:	ldr	r1, [fp, #-16]
    4420:	ldr	r1, [r1, #32]
    4424:	cmp	r1, #0
    4428:	bne	4474 <coda_type_number_validate+0x318>
    442c:	movw	r1, #0
    4430:	movt	r1, #0
    4434:	movw	r0, #65136	; 0xfe70
    4438:	movt	r0, #65535	; 0xffff
    443c:	bl	0 <coda_set_error>
    4440:	mvn	r3, #0
    4444:	b	44f0 <coda_type_number_validate+0x394>
    4448:	nop	{0}
    444c:	b	4474 <coda_type_number_validate+0x318>
    4450:	nop	{0}
    4454:	b	4474 <coda_type_number_validate+0x318>
    4458:	nop	{0}
    445c:	b	4474 <coda_type_number_validate+0x318>
    4460:	nop	{0}
    4464:	b	4474 <coda_type_number_validate+0x318>
    4468:	nop	{0}
    446c:	b	4474 <coda_type_number_validate+0x318>
    4470:	nop	{0}
    4474:	ldr	r1, [fp, #-16]
    4478:	ldr	r1, [r1, #44]	; 0x2c
    447c:	cmp	r1, #1
    4480:	bne	44ec <coda_type_number_validate+0x390>
    4484:	ldr	r1, [fp, #-16]
    4488:	ldrd	r0, [r1, #24]
    448c:	cmp	r0, #0
    4490:	sbcs	r1, r1, #0
    4494:	blt	44ec <coda_type_number_validate+0x390>
    4498:	ldr	r1, [fp, #-16]
    449c:	ldrd	r0, [r1, #24]
    44a0:	mov	r4, r0
    44a4:	mov	r5, r1
    44a8:	mov	r0, #7
    44ac:	mov	r1, #0
    44b0:	and	r2, r4, r0
    44b4:	and	r3, r5, r1
    44b8:	orrs	r3, r2, r3
    44bc:	beq	44ec <coda_type_number_validate+0x390>
    44c0:	ldr	r3, [fp, #-16]
    44c4:	ldrd	r2, [r3, #24]
    44c8:	mov	r3, r2
    44cc:	mov	r2, r3
    44d0:	movw	r1, #0
    44d4:	movt	r1, #0
    44d8:	movw	r0, #65136	; 0xfe70
    44dc:	movt	r0, #65535	; 0xffff
    44e0:	bl	0 <coda_set_error>
    44e4:	mvn	r3, #0
    44e8:	b	44f0 <coda_type_number_validate+0x394>
    44ec:	mov	r3, #0
    44f0:	mov	r0, r3
    44f4:	sub	sp, fp, #12
    44f8:	ldrd	r4, [sp]
    44fc:	ldr	fp, [sp, #8]
    4500:	add	sp, sp, #12
    4504:	pop	{pc}		; (ldr pc, [sp], #4)

00004508 <coda_type_text_new>:
    4508:	str	fp, [sp, #-8]!
    450c:	str	lr, [sp, #4]
    4510:	add	fp, sp, #4
    4514:	sub	sp, sp, #24
    4518:	str	r0, [fp, #-16]
    451c:	mov	r0, #48	; 0x30
    4520:	bl	0 <malloc>
    4524:	mov	r3, r0
    4528:	str	r3, [fp, #-8]
    452c:	ldr	r3, [fp, #-8]
    4530:	cmp	r3, #0
    4534:	bne	4564 <coda_type_text_new+0x5c>
    4538:	movw	r3, #1980	; 0x7bc
    453c:	str	r3, [sp]
    4540:	movw	r3, #0
    4544:	movt	r3, #0
    4548:	mov	r2, #48	; 0x30
    454c:	movw	r1, #0
    4550:	movt	r1, #0
    4554:	mvn	r0, #0
    4558:	bl	0 <coda_set_error>
    455c:	mov	r3, #0
    4560:	b	45f0 <coda_type_text_new+0xe8>
    4564:	ldr	r3, [fp, #-8]
    4568:	ldr	r2, [fp, #-16]
    456c:	str	r2, [r3]
    4570:	ldr	r3, [fp, #-8]
    4574:	mov	r2, #0
    4578:	str	r2, [r3, #4]
    457c:	ldr	r3, [fp, #-8]
    4580:	mov	r2, #4
    4584:	str	r2, [r3, #8]
    4588:	ldr	r3, [fp, #-8]
    458c:	mov	r2, #11
    4590:	str	r2, [r3, #12]
    4594:	ldr	r3, [fp, #-8]
    4598:	mov	r2, #0
    459c:	str	r2, [r3, #16]
    45a0:	ldr	r3, [fp, #-8]
    45a4:	mov	r2, #0
    45a8:	str	r2, [r3, #20]
    45ac:	ldr	r1, [fp, #-8]
    45b0:	mvn	r2, #0
    45b4:	mvn	r3, #0
    45b8:	strd	r2, [r1, #24]
    45bc:	ldr	r3, [fp, #-8]
    45c0:	mov	r2, #0
    45c4:	str	r2, [r3, #32]
    45c8:	ldr	r3, [fp, #-8]
    45cc:	mov	r2, #0
    45d0:	str	r2, [r3, #36]	; 0x24
    45d4:	ldr	r3, [fp, #-8]
    45d8:	mov	r2, #0
    45dc:	str	r2, [r3, #40]	; 0x28
    45e0:	ldr	r3, [fp, #-8]
    45e4:	mov	r2, #0
    45e8:	str	r2, [r3, #44]	; 0x2c
    45ec:	ldr	r3, [fp, #-8]
    45f0:	mov	r0, r3
    45f4:	sub	sp, fp, #4
    45f8:	ldr	fp, [sp]
    45fc:	add	sp, sp, #4
    4600:	pop	{pc}		; (ldr pc, [sp], #4)

00004604 <coda_type_text_set_fixed_value>:
    4604:	str	fp, [sp, #-8]!
    4608:	str	lr, [sp, #4]
    460c:	add	fp, sp, #4
    4610:	sub	sp, sp, #8
    4614:	str	r0, [fp, #-8]
    4618:	str	r1, [fp, #-12]
    461c:	ldr	r3, [fp, #-8]
    4620:	cmp	r3, #0
    4624:	bne	464c <coda_type_text_set_fixed_value+0x48>
    4628:	movw	r3, #2002	; 0x7d2
    462c:	movw	r2, #0
    4630:	movt	r2, #0
    4634:	movw	r1, #0
    4638:	movt	r1, #0
    463c:	mvn	r0, #99	; 0x63
    4640:	bl	0 <coda_set_error>
    4644:	mvn	r3, #0
    4648:	b	46f8 <coda_type_text_set_fixed_value+0xf4>
    464c:	ldr	r3, [fp, #-12]
    4650:	cmp	r3, #0
    4654:	bne	467c <coda_type_text_set_fixed_value+0x78>
    4658:	movw	r3, #2007	; 0x7d7
    465c:	movw	r2, #0
    4660:	movt	r2, #0
    4664:	movw	r1, #0
    4668:	movt	r1, #0
    466c:	mvn	r0, #99	; 0x63
    4670:	bl	0 <coda_set_error>
    4674:	mvn	r3, #0
    4678:	b	46f8 <coda_type_text_set_fixed_value+0xf4>
    467c:	ldr	r3, [fp, #-8]
    4680:	ldr	r3, [r3, #40]	; 0x28
    4684:	cmp	r3, #0
    4688:	beq	46a8 <coda_type_text_set_fixed_value+0xa4>
    468c:	movw	r1, #0
    4690:	movt	r1, #0
    4694:	movw	r0, #65136	; 0xfe70
    4698:	movt	r0, #65535	; 0xffff
    469c:	bl	0 <coda_set_error>
    46a0:	mvn	r3, #0
    46a4:	b	46f8 <coda_type_text_set_fixed_value+0xf4>
    46a8:	ldr	r0, [fp, #-12]
    46ac:	bl	0 <strdup>
    46b0:	mov	r3, r0
    46b4:	mov	r2, r3
    46b8:	ldr	r3, [fp, #-8]
    46bc:	str	r2, [r3, #40]	; 0x28
    46c0:	ldr	r3, [fp, #-8]
    46c4:	ldr	r3, [r3, #40]	; 0x28
    46c8:	cmp	r3, #0
    46cc:	bne	46f4 <coda_type_text_set_fixed_value+0xf0>
    46d0:	movw	r3, #2019	; 0x7e3
    46d4:	movw	r2, #0
    46d8:	movt	r2, #0
    46dc:	movw	r1, #0
    46e0:	movt	r1, #0
    46e4:	mvn	r0, #0
    46e8:	bl	0 <coda_set_error>
    46ec:	mvn	r3, #0
    46f0:	b	46f8 <coda_type_text_set_fixed_value+0xf4>
    46f4:	mov	r3, #0
    46f8:	mov	r0, r3
    46fc:	sub	sp, fp, #4
    4700:	ldr	fp, [sp]
    4704:	add	sp, sp, #4
    4708:	pop	{pc}		; (ldr pc, [sp], #4)

0000470c <coda_type_text_set_special_text_type>:
    470c:	str	fp, [sp, #-8]!
    4710:	str	lr, [sp, #4]
    4714:	add	fp, sp, #4
    4718:	sub	sp, sp, #8
    471c:	str	r0, [fp, #-8]
    4720:	str	r1, [fp, #-12]
    4724:	ldr	r3, [fp, #-8]
    4728:	cmp	r3, #0
    472c:	bne	4754 <coda_type_text_set_special_text_type+0x48>
    4730:	movw	r3, #2030	; 0x7ee
    4734:	movw	r2, #0
    4738:	movt	r2, #0
    473c:	movw	r1, #0
    4740:	movt	r1, #0
    4744:	mvn	r0, #99	; 0x63
    4748:	bl	0 <coda_set_error>
    474c:	mvn	r3, #0
    4750:	b	47d4 <coda_type_text_set_special_text_type+0xc8>
    4754:	ldr	r3, [fp, #-8]
    4758:	ldr	r3, [r3]
    475c:	cmp	r3, #0
    4760:	beq	4798 <coda_type_text_set_special_text_type+0x8c>
    4764:	ldr	r3, [fp, #-8]
    4768:	ldr	r3, [r3]
    476c:	mov	r0, r3
    4770:	bl	61a4 <coda_type_get_format_name>
    4774:	mov	r3, r0
    4778:	mov	r2, r3
    477c:	movw	r1, #0
    4780:	movt	r1, #0
    4784:	movw	r0, #65136	; 0xfe70
    4788:	movt	r0, #65535	; 0xffff
    478c:	bl	0 <coda_set_error>
    4790:	mvn	r3, #0
    4794:	b	47d4 <coda_type_text_set_special_text_type+0xc8>
    4798:	ldr	r3, [fp, #-8]
    479c:	ldr	r3, [r3, #44]	; 0x2c
    47a0:	cmp	r3, #0
    47a4:	beq	47c4 <coda_type_text_set_special_text_type+0xb8>
    47a8:	movw	r1, #0
    47ac:	movt	r1, #0
    47b0:	movw	r0, #65136	; 0xfe70
    47b4:	movt	r0, #65535	; 0xffff
    47b8:	bl	0 <coda_set_error>
    47bc:	mvn	r3, #0
    47c0:	b	47d4 <coda_type_text_set_special_text_type+0xc8>
    47c4:	ldr	r3, [fp, #-8]
    47c8:	ldr	r2, [fp, #-12]
    47cc:	str	r2, [r3, #44]	; 0x2c
    47d0:	mov	r3, #0
    47d4:	mov	r0, r3
    47d8:	sub	sp, fp, #4
    47dc:	ldr	fp, [sp]
    47e0:	add	sp, sp, #4
    47e4:	pop	{pc}		; (ldr pc, [sp], #4)

000047e8 <coda_type_text_validate>:
    47e8:	strd	r4, [sp, #-16]!
    47ec:	str	fp, [sp, #8]
    47f0:	str	lr, [sp, #12]
    47f4:	add	fp, sp, #12
    47f8:	sub	sp, sp, #32
    47fc:	str	r0, [fp, #-40]	; 0xffffffd8
    4800:	ldr	r1, [fp, #-40]	; 0xffffffd8
    4804:	cmp	r1, #0
    4808:	bne	4830 <coda_type_text_validate+0x48>
    480c:	movw	r3, #2052	; 0x804
    4810:	movw	r2, #0
    4814:	movt	r2, #0
    4818:	movw	r1, #0
    481c:	movt	r1, #0
    4820:	mvn	r0, #99	; 0x63
    4824:	bl	0 <coda_set_error>
    4828:	mvn	r3, #0
    482c:	b	4a2c <coda_type_text_validate+0x244>
    4830:	ldr	r1, [fp, #-40]	; 0xffffffd8
    4834:	ldr	r1, [r1]
    4838:	cmp	r1, #0
    483c:	beq	4850 <coda_type_text_validate+0x68>
    4840:	ldr	r1, [fp, #-40]	; 0xffffffd8
    4844:	ldr	r1, [r1]
    4848:	cmp	r1, #1
    484c:	bne	48f8 <coda_type_text_validate+0x110>
    4850:	ldr	r1, [fp, #-40]	; 0xffffffd8
    4854:	ldr	r1, [r1, #32]
    4858:	cmp	r1, #0
    485c:	bne	4890 <coda_type_text_validate+0xa8>
    4860:	ldr	r1, [fp, #-40]	; 0xffffffd8
    4864:	ldrd	r0, [r1, #24]
    4868:	cmp	r0, #0
    486c:	sbcs	r1, r1, #0
    4870:	bge	4890 <coda_type_text_validate+0xa8>
    4874:	movw	r1, #0
    4878:	movt	r1, #0
    487c:	movw	r0, #65136	; 0xfe70
    4880:	movt	r0, #65535	; 0xffff
    4884:	bl	0 <coda_set_error>
    4888:	mvn	r3, #0
    488c:	b	4a2c <coda_type_text_validate+0x244>
    4890:	ldr	r1, [fp, #-40]	; 0xffffffd8
    4894:	ldrd	r0, [r1, #24]
    4898:	cmp	r0, #0
    489c:	sbcs	r1, r1, #0
    48a0:	blt	48f8 <coda_type_text_validate+0x110>
    48a4:	ldr	r1, [fp, #-40]	; 0xffffffd8
    48a8:	ldrd	r0, [r1, #24]
    48ac:	mov	r4, r0
    48b0:	mov	r5, r1
    48b4:	mov	r0, #7
    48b8:	mov	r1, #0
    48bc:	and	r2, r4, r0
    48c0:	and	r3, r5, r1
    48c4:	orrs	r3, r2, r3
    48c8:	beq	48f8 <coda_type_text_validate+0x110>
    48cc:	ldr	r3, [fp, #-40]	; 0xffffffd8
    48d0:	ldrd	r2, [r3, #24]
    48d4:	mov	r3, r2
    48d8:	mov	r2, r3
    48dc:	movw	r1, #0
    48e0:	movt	r1, #0
    48e4:	movw	r0, #65136	; 0xfe70
    48e8:	movt	r0, #65535	; 0xffff
    48ec:	bl	0 <coda_set_error>
    48f0:	mvn	r3, #0
    48f4:	b	4a2c <coda_type_text_validate+0x244>
    48f8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    48fc:	ldr	r3, [r3, #12]
    4900:	cmp	r3, #10
    4904:	bne	4948 <coda_type_text_validate+0x160>
    4908:	ldr	r3, [fp, #-40]	; 0xffffffd8
    490c:	ldrd	r2, [r3, #24]
    4910:	cmp	r3, #0
    4914:	cmpeq	r2, #8
    4918:	beq	4948 <coda_type_text_validate+0x160>
    491c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4920:	ldrd	r2, [r3, #24]
    4924:	mov	r3, r2
    4928:	mov	r2, r3
    492c:	movw	r1, #0
    4930:	movt	r1, #0
    4934:	movw	r0, #65136	; 0xfe70
    4938:	movt	r0, #65535	; 0xffff
    493c:	bl	0 <coda_set_error>
    4940:	mvn	r3, #0
    4944:	b	4a2c <coda_type_text_validate+0x244>
    4948:	ldr	r3, [fp, #-40]	; 0xffffffd8
    494c:	ldr	r3, [r3, #40]	; 0x28
    4950:	cmp	r3, #0
    4954:	beq	4a28 <coda_type_text_validate+0x240>
    4958:	ldr	r3, [fp, #-40]	; 0xffffffd8
    495c:	ldrd	r2, [r3, #24]
    4960:	cmp	r2, #0
    4964:	sbcs	r3, r3, #0
    4968:	bge	4988 <coda_type_text_validate+0x1a0>
    496c:	movw	r1, #0
    4970:	movt	r1, #0
    4974:	movw	r0, #65136	; 0xfe70
    4978:	movt	r0, #65535	; 0xffff
    497c:	bl	0 <coda_set_error>
    4980:	mvn	r3, #0
    4984:	b	4a2c <coda_type_text_validate+0x244>
    4988:	ldr	r3, [fp, #-40]	; 0xffffffd8
    498c:	ldrd	r2, [r3, #24]
    4990:	mov	r4, #0
    4994:	mov	r5, #0
    4998:	lsr	r4, r2, #3
    499c:	orr	r4, r4, r3, lsl #29
    49a0:	asr	r5, r3, #3
    49a4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    49a8:	ldr	r3, [r3, #40]	; 0x28
    49ac:	mov	r0, r3
    49b0:	bl	0 <strlen>
    49b4:	mov	r3, r0
    49b8:	mov	r2, r3
    49bc:	mov	r3, #0
    49c0:	cmp	r5, r3
    49c4:	cmpeq	r4, r2
    49c8:	beq	4a28 <coda_type_text_validate+0x240>
    49cc:	ldr	r3, [fp, #-40]	; 0xffffffd8
    49d0:	ldrd	r2, [r3, #24]
    49d4:	mov	r0, #0
    49d8:	mov	r1, #0
    49dc:	lsr	r0, r2, #3
    49e0:	orr	r0, r0, r3, lsl #29
    49e4:	asr	r1, r3, #3
    49e8:	sub	r3, fp, #36	; 0x24
    49ec:	mov	r2, r3
    49f0:	bl	0 <coda_str64>
    49f4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    49f8:	ldr	r3, [r3, #40]	; 0x28
    49fc:	mov	r0, r3
    4a00:	bl	0 <strlen>
    4a04:	mov	r2, r0
    4a08:	sub	r3, fp, #36	; 0x24
    4a0c:	movw	r1, #0
    4a10:	movt	r1, #0
    4a14:	movw	r0, #65136	; 0xfe70
    4a18:	movt	r0, #65535	; 0xffff
    4a1c:	bl	0 <coda_set_error>
    4a20:	mvn	r3, #0
    4a24:	b	4a2c <coda_type_text_validate+0x244>
    4a28:	mov	r3, #0
    4a2c:	mov	r0, r3
    4a30:	sub	sp, fp, #12
    4a34:	ldrd	r4, [sp]
    4a38:	ldr	fp, [sp, #8]
    4a3c:	add	sp, sp, #12
    4a40:	pop	{pc}		; (ldr pc, [sp], #4)

00004a44 <coda_type_raw_new>:
    4a44:	str	fp, [sp, #-8]!
    4a48:	str	lr, [sp, #4]
    4a4c:	add	fp, sp, #4
    4a50:	sub	sp, sp, #24
    4a54:	str	r0, [fp, #-16]
    4a58:	mov	r0, #48	; 0x30
    4a5c:	bl	0 <malloc>
    4a60:	mov	r3, r0
    4a64:	str	r3, [fp, #-8]
    4a68:	ldr	r3, [fp, #-8]
    4a6c:	cmp	r3, #0
    4a70:	bne	4aa0 <coda_type_raw_new+0x5c>
    4a74:	movw	r3, #2106	; 0x83a
    4a78:	str	r3, [sp]
    4a7c:	movw	r3, #0
    4a80:	movt	r3, #0
    4a84:	mov	r2, #48	; 0x30
    4a88:	movw	r1, #0
    4a8c:	movt	r1, #0
    4a90:	mvn	r0, #0
    4a94:	bl	0 <coda_set_error>
    4a98:	mov	r3, #0
    4a9c:	b	4b2c <coda_type_raw_new+0xe8>
    4aa0:	ldr	r3, [fp, #-8]
    4aa4:	ldr	r2, [fp, #-16]
    4aa8:	str	r2, [r3]
    4aac:	ldr	r3, [fp, #-8]
    4ab0:	mov	r2, #0
    4ab4:	str	r2, [r3, #4]
    4ab8:	ldr	r3, [fp, #-8]
    4abc:	mov	r2, #5
    4ac0:	str	r2, [r3, #8]
    4ac4:	ldr	r3, [fp, #-8]
    4ac8:	mov	r2, #12
    4acc:	str	r2, [r3, #12]
    4ad0:	ldr	r3, [fp, #-8]
    4ad4:	mov	r2, #0
    4ad8:	str	r2, [r3, #16]
    4adc:	ldr	r3, [fp, #-8]
    4ae0:	mov	r2, #0
    4ae4:	str	r2, [r3, #20]
    4ae8:	ldr	r1, [fp, #-8]
    4aec:	mvn	r2, #0
    4af0:	mvn	r3, #0
    4af4:	strd	r2, [r1, #24]
    4af8:	ldr	r3, [fp, #-8]
    4afc:	mov	r2, #0
    4b00:	str	r2, [r3, #32]
    4b04:	ldr	r3, [fp, #-8]
    4b08:	mov	r2, #0
    4b0c:	str	r2, [r3, #36]	; 0x24
    4b10:	ldr	r3, [fp, #-8]
    4b14:	mvn	r2, #0
    4b18:	str	r2, [r3, #40]	; 0x28
    4b1c:	ldr	r3, [fp, #-8]
    4b20:	mov	r2, #0
    4b24:	str	r2, [r3, #44]	; 0x2c
    4b28:	ldr	r3, [fp, #-8]
    4b2c:	mov	r0, r3
    4b30:	sub	sp, fp, #4
    4b34:	ldr	fp, [sp]
    4b38:	add	sp, sp, #4
    4b3c:	pop	{pc}		; (ldr pc, [sp], #4)

00004b40 <coda_type_raw_set_fixed_value>:
    4b40:	str	fp, [sp, #-8]!
    4b44:	str	lr, [sp, #4]
    4b48:	add	fp, sp, #4
    4b4c:	sub	sp, sp, #16
    4b50:	str	r0, [fp, #-8]
    4b54:	str	r1, [fp, #-12]
    4b58:	str	r2, [fp, #-16]
    4b5c:	ldr	r3, [fp, #-8]
    4b60:	cmp	r3, #0
    4b64:	bne	4b8c <coda_type_raw_set_fixed_value+0x4c>
    4b68:	mov	r3, #2128	; 0x850
    4b6c:	movw	r2, #0
    4b70:	movt	r2, #0
    4b74:	movw	r1, #0
    4b78:	movt	r1, #0
    4b7c:	mvn	r0, #99	; 0x63
    4b80:	bl	0 <coda_set_error>
    4b84:	mvn	r3, #0
    4b88:	b	4c98 <coda_type_raw_set_fixed_value+0x158>
    4b8c:	ldr	r3, [fp, #-12]
    4b90:	cmp	r3, #0
    4b94:	ble	4bc8 <coda_type_raw_set_fixed_value+0x88>
    4b98:	ldr	r3, [fp, #-16]
    4b9c:	cmp	r3, #0
    4ba0:	bne	4bc8 <coda_type_raw_set_fixed_value+0x88>
    4ba4:	movw	r3, #2133	; 0x855
    4ba8:	movw	r2, #0
    4bac:	movt	r2, #0
    4bb0:	movw	r1, #0
    4bb4:	movt	r1, #0
    4bb8:	mvn	r0, #99	; 0x63
    4bbc:	bl	0 <coda_set_error>
    4bc0:	mvn	r3, #0
    4bc4:	b	4c98 <coda_type_raw_set_fixed_value+0x158>
    4bc8:	ldr	r3, [fp, #-8]
    4bcc:	ldr	r3, [r3, #44]	; 0x2c
    4bd0:	cmp	r3, #0
    4bd4:	bne	4be8 <coda_type_raw_set_fixed_value+0xa8>
    4bd8:	ldr	r3, [fp, #-8]
    4bdc:	ldr	r3, [r3, #40]	; 0x28
    4be0:	cmp	r3, #0
    4be4:	blt	4c04 <coda_type_raw_set_fixed_value+0xc4>
    4be8:	movw	r1, #0
    4bec:	movt	r1, #0
    4bf0:	movw	r0, #65136	; 0xfe70
    4bf4:	movt	r0, #65535	; 0xffff
    4bf8:	bl	0 <coda_set_error>
    4bfc:	mvn	r3, #0
    4c00:	b	4c98 <coda_type_raw_set_fixed_value+0x158>
    4c04:	ldr	r3, [fp, #-12]
    4c08:	cmp	r3, #0
    4c0c:	ble	4c88 <coda_type_raw_set_fixed_value+0x148>
    4c10:	ldr	r3, [fp, #-12]
    4c14:	mov	r0, r3
    4c18:	bl	0 <malloc>
    4c1c:	mov	r3, r0
    4c20:	mov	r2, r3
    4c24:	ldr	r3, [fp, #-8]
    4c28:	str	r2, [r3, #44]	; 0x2c
    4c2c:	ldr	r3, [fp, #-8]
    4c30:	ldr	r3, [r3, #44]	; 0x2c
    4c34:	cmp	r3, #0
    4c38:	bne	4c60 <coda_type_raw_set_fixed_value+0x120>
    4c3c:	movw	r3, #2147	; 0x863
    4c40:	movw	r2, #0
    4c44:	movt	r2, #0
    4c48:	movw	r1, #0
    4c4c:	movt	r1, #0
    4c50:	mvn	r0, #0
    4c54:	bl	0 <coda_set_error>
    4c58:	mvn	r3, #0
    4c5c:	b	4c98 <coda_type_raw_set_fixed_value+0x158>
    4c60:	ldr	r3, [fp, #-8]
    4c64:	ldr	r3, [r3, #44]	; 0x2c
    4c68:	ldr	r2, [fp, #-12]
    4c6c:	ldr	r1, [fp, #-16]
    4c70:	mov	r0, r3
    4c74:	bl	0 <memcpy>
    4c78:	ldr	r3, [fp, #-8]
    4c7c:	ldr	r2, [fp, #-12]
    4c80:	str	r2, [r3, #40]	; 0x28
    4c84:	b	4c94 <coda_type_raw_set_fixed_value+0x154>
    4c88:	ldr	r3, [fp, #-8]
    4c8c:	mov	r2, #0
    4c90:	str	r2, [r3, #40]	; 0x28
    4c94:	mov	r3, #0
    4c98:	mov	r0, r3
    4c9c:	sub	sp, fp, #4
    4ca0:	ldr	fp, [sp]
    4ca4:	add	sp, sp, #4
    4ca8:	pop	{pc}		; (ldr pc, [sp], #4)

00004cac <coda_type_raw_validate>:
    4cac:	strd	r4, [sp, #-32]!	; 0xffffffe0
    4cb0:	strd	r6, [sp, #8]
    4cb4:	strd	r8, [sp, #16]
    4cb8:	str	fp, [sp, #24]
    4cbc:	str	lr, [sp, #28]
    4cc0:	add	fp, sp, #28
    4cc4:	sub	sp, sp, #40	; 0x28
    4cc8:	str	r0, [fp, #-64]	; 0xffffffc0
    4ccc:	ldr	r3, [fp, #-64]	; 0xffffffc0
    4cd0:	cmp	r3, #0
    4cd4:	bne	4cfc <coda_type_raw_validate+0x50>
    4cd8:	movw	r3, #2165	; 0x875
    4cdc:	movw	r2, #0
    4ce0:	movt	r2, #0
    4ce4:	movw	r1, #0
    4ce8:	movt	r1, #0
    4cec:	mvn	r0, #99	; 0x63
    4cf0:	bl	0 <coda_set_error>
    4cf4:	mvn	r3, #0
    4cf8:	b	4e54 <coda_type_raw_validate+0x1a8>
    4cfc:	ldr	r3, [fp, #-64]	; 0xffffffc0
    4d00:	ldr	r3, [r3]
    4d04:	cmp	r3, #0
    4d08:	beq	4d1c <coda_type_raw_validate+0x70>
    4d0c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    4d10:	ldr	r3, [r3]
    4d14:	cmp	r3, #1
    4d18:	bne	4d5c <coda_type_raw_validate+0xb0>
    4d1c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    4d20:	ldr	r3, [r3, #32]
    4d24:	cmp	r3, #0
    4d28:	bne	4d5c <coda_type_raw_validate+0xb0>
    4d2c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    4d30:	ldrd	r2, [r3, #24]
    4d34:	cmp	r2, #0
    4d38:	sbcs	r3, r3, #0
    4d3c:	bge	4d5c <coda_type_raw_validate+0xb0>
    4d40:	movw	r1, #0
    4d44:	movt	r1, #0
    4d48:	movw	r0, #65136	; 0xfe70
    4d4c:	movt	r0, #65535	; 0xffff
    4d50:	bl	0 <coda_set_error>
    4d54:	mvn	r3, #0
    4d58:	b	4e54 <coda_type_raw_validate+0x1a8>
    4d5c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    4d60:	ldr	r3, [r3, #44]	; 0x2c
    4d64:	cmp	r3, #0
    4d68:	beq	4e50 <coda_type_raw_validate+0x1a4>
    4d6c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    4d70:	ldrd	r2, [r3, #24]
    4d74:	cmp	r2, #0
    4d78:	sbcs	r3, r3, #0
    4d7c:	bge	4d9c <coda_type_raw_validate+0xf0>
    4d80:	movw	r1, #0
    4d84:	movt	r1, #0
    4d88:	movw	r0, #65136	; 0xfe70
    4d8c:	movt	r0, #65535	; 0xffff
    4d90:	bl	0 <coda_set_error>
    4d94:	mvn	r3, #0
    4d98:	b	4e54 <coda_type_raw_validate+0x1a8>
    4d9c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    4da0:	ldrd	r0, [r3, #24]
    4da4:	mov	r2, #0
    4da8:	mov	r3, #0
    4dac:	lsr	r2, r0, #3
    4db0:	orr	r2, r2, r1, lsl #29
    4db4:	asr	r3, r1, #3
    4db8:	ldr	r1, [fp, #-64]	; 0xffffffc0
    4dbc:	ldrd	r0, [r1, #24]
    4dc0:	mov	r8, #7
    4dc4:	mov	r9, #0
    4dc8:	and	r6, r0, r8
    4dcc:	and	r7, r1, r9
    4dd0:	orrs	r1, r6, r7
    4dd4:	beq	4de4 <coda_type_raw_validate+0x138>
    4dd8:	mov	r0, #1
    4ddc:	mov	r1, #0
    4de0:	b	4dec <coda_type_raw_validate+0x140>
    4de4:	mov	r0, #0
    4de8:	mov	r1, #0
    4dec:	adds	r4, r0, r2
    4df0:	adc	r5, r1, r3
    4df4:	strd	r4, [fp, #-36]	; 0xffffffdc
    4df8:	ldr	r3, [fp, #-64]	; 0xffffffc0
    4dfc:	ldr	r3, [r3, #40]	; 0x28
    4e00:	mov	r2, r3
    4e04:	asr	r3, r2, #31
    4e08:	ldrd	r0, [fp, #-36]	; 0xffffffdc
    4e0c:	cmp	r1, r3
    4e10:	cmpeq	r0, r2
    4e14:	beq	4e50 <coda_type_raw_validate+0x1a4>
    4e18:	sub	r3, fp, #60	; 0x3c
    4e1c:	mov	r2, r3
    4e20:	ldrd	r0, [fp, #-36]	; 0xffffffdc
    4e24:	bl	0 <coda_str64>
    4e28:	ldr	r3, [fp, #-64]	; 0xffffffc0
    4e2c:	ldr	r2, [r3, #40]	; 0x28
    4e30:	sub	r3, fp, #60	; 0x3c
    4e34:	movw	r1, #0
    4e38:	movt	r1, #0
    4e3c:	movw	r0, #65136	; 0xfe70
    4e40:	movt	r0, #65535	; 0xffff
    4e44:	bl	0 <coda_set_error>
    4e48:	mvn	r3, #0
    4e4c:	b	4e54 <coda_type_raw_validate+0x1a8>
    4e50:	mov	r3, #0
    4e54:	mov	r0, r3
    4e58:	sub	sp, fp, #28
    4e5c:	ldrd	r4, [sp]
    4e60:	ldrd	r6, [sp, #8]
    4e64:	ldrd	r8, [sp, #16]
    4e68:	ldr	fp, [sp, #24]
    4e6c:	add	sp, sp, #28
    4e70:	pop	{pc}		; (ldr pc, [sp], #4)

00004e74 <coda_type_raw_file_singleton>:
    4e74:	str	fp, [sp, #-8]!
    4e78:	str	lr, [sp, #4]
    4e7c:	add	fp, sp, #4
    4e80:	sub	sp, sp, #8
    4e84:	mrc	15, 0, r3, cr13, cr0, {3}
    4e88:	ldr	r2, [pc, #184]	; 4f48 <coda_type_raw_file_singleton+0xd4>
    4e8c:	ldr	r3, [r3, r2]
    4e90:	cmp	r3, #0
    4e94:	bne	4f28 <coda_type_raw_file_singleton+0xb4>
    4e98:	mov	r0, #1
    4e9c:	bl	4a44 <coda_type_raw_new>
    4ea0:	str	r0, [fp, #-8]
    4ea4:	ldr	r3, [fp, #-8]
    4ea8:	cmp	r3, #0
    4eac:	bne	4eb8 <coda_type_raw_file_singleton+0x44>
    4eb0:	mov	r3, #0
    4eb4:	b	4f34 <coda_type_raw_file_singleton+0xc0>
    4eb8:	sub	r3, fp, #12
    4ebc:	mov	r1, r3
    4ec0:	movw	r0, #0
    4ec4:	movt	r0, #0
    4ec8:	bl	0 <coda_expression_from_string>
    4ecc:	mov	r3, r0
    4ed0:	cmp	r3, #0
    4ed4:	beq	4ee0 <coda_type_raw_file_singleton+0x6c>
    4ed8:	ldr	r0, [fp, #-8]
    4edc:	bl	103c <raw_delete>
    4ee0:	ldr	r3, [fp, #-12]
    4ee4:	mov	r1, r3
    4ee8:	ldr	r0, [fp, #-8]
    4eec:	bl	1ad4 <coda_type_set_byte_size_expression>
    4ef0:	mov	r3, r0
    4ef4:	cmp	r3, #0
    4ef8:	beq	4f18 <coda_type_raw_file_singleton+0xa4>
    4efc:	ldr	r3, [fp, #-12]
    4f00:	mov	r0, r3
    4f04:	bl	0 <coda_expression_delete>
    4f08:	ldr	r0, [fp, #-8]
    4f0c:	bl	103c <raw_delete>
    4f10:	mov	r3, #0
    4f14:	b	4f34 <coda_type_raw_file_singleton+0xc0>
    4f18:	mrc	15, 0, r3, cr13, cr0, {3}
    4f1c:	ldr	r1, [pc, #36]	; 4f48 <coda_type_raw_file_singleton+0xd4>
    4f20:	ldr	r2, [fp, #-8]
    4f24:	str	r2, [r3, r1]
    4f28:	mrc	15, 0, r3, cr13, cr0, {3}
    4f2c:	ldr	r2, [pc, #20]	; 4f48 <coda_type_raw_file_singleton+0xd4>
    4f30:	ldr	r3, [r3, r2]
    4f34:	mov	r0, r3
    4f38:	sub	sp, fp, #4
    4f3c:	ldr	fp, [sp]
    4f40:	add	sp, sp, #4
    4f44:	pop	{pc}		; (ldr pc, [sp], #4)
    4f48:	.word	0x00000000

00004f4c <coda_type_no_data_singleton>:
    4f4c:	str	fp, [sp, #-8]!
    4f50:	str	lr, [sp, #4]
    4f54:	add	fp, sp, #4
    4f58:	sub	sp, sp, #24
    4f5c:	str	r0, [fp, #-16]
    4f60:	ldr	r3, [fp, #-16]
    4f64:	cmp	r3, #10
    4f68:	bls	4f8c <coda_type_no_data_singleton+0x40>
    4f6c:	movw	r3, #0
    4f70:	movt	r3, #0
    4f74:	movw	r2, #2235	; 0x8bb
    4f78:	movw	r1, #0
    4f7c:	movt	r1, #0
    4f80:	movw	r0, #0
    4f84:	movt	r0, #0
    4f88:	bl	0 <__assert_fail>
    4f8c:	mrc	15, 0, r3, cr13, cr0, {3}
    4f90:	ldr	r1, [pc, #440]	; 5150 <coda_type_no_data_singleton+0x204>
    4f94:	ldr	r2, [fp, #-16]
    4f98:	lsl	r2, r2, #2
    4f9c:	add	r3, r2, r3
    4fa0:	add	r3, r3, r1
    4fa4:	ldr	r3, [r3]
    4fa8:	cmp	r3, #0
    4fac:	bne	5120 <coda_type_no_data_singleton+0x1d4>
    4fb0:	mov	r0, #56	; 0x38
    4fb4:	bl	0 <malloc>
    4fb8:	mov	r3, r0
    4fbc:	str	r3, [fp, #-8]
    4fc0:	ldr	r3, [fp, #-8]
    4fc4:	cmp	r3, #0
    4fc8:	bne	4ff8 <coda_type_no_data_singleton+0xac>
    4fcc:	movw	r3, #2245	; 0x8c5
    4fd0:	str	r3, [sp]
    4fd4:	movw	r3, #0
    4fd8:	movt	r3, #0
    4fdc:	mov	r2, #56	; 0x38
    4fe0:	movw	r1, #0
    4fe4:	movt	r1, #0
    4fe8:	mvn	r0, #0
    4fec:	bl	0 <coda_set_error>
    4ff0:	mov	r3, #0
    4ff4:	b	513c <coda_type_no_data_singleton+0x1f0>
    4ff8:	ldr	r3, [fp, #-8]
    4ffc:	ldr	r2, [fp, #-16]
    5000:	str	r2, [r3]
    5004:	ldr	r3, [fp, #-8]
    5008:	mov	r2, #0
    500c:	str	r2, [r3, #4]
    5010:	ldr	r3, [fp, #-8]
    5014:	mov	r2, #6
    5018:	str	r2, [r3, #8]
    501c:	ldr	r3, [fp, #-8]
    5020:	mvn	r2, #0
    5024:	str	r2, [r3, #12]
    5028:	ldr	r3, [fp, #-8]
    502c:	mov	r2, #0
    5030:	str	r2, [r3, #16]
    5034:	ldr	r3, [fp, #-8]
    5038:	mov	r2, #0
    503c:	str	r2, [r3, #20]
    5040:	ldr	r1, [fp, #-8]
    5044:	mov	r2, #0
    5048:	mov	r3, #0
    504c:	strd	r2, [r1, #24]
    5050:	ldr	r3, [fp, #-8]
    5054:	mov	r2, #0
    5058:	str	r2, [r3, #32]
    505c:	ldr	r3, [fp, #-8]
    5060:	mov	r2, #0
    5064:	str	r2, [r3, #36]	; 0x24
    5068:	ldr	r3, [fp, #-8]
    506c:	mov	r2, #0
    5070:	str	r2, [r3, #40]	; 0x28
    5074:	ldr	r3, [fp, #-8]
    5078:	mov	r2, #0
    507c:	str	r2, [r3, #44]	; 0x2c
    5080:	ldr	r3, [fp, #-8]
    5084:	mov	r2, #0
    5088:	str	r2, [r3, #48]	; 0x30
    508c:	ldr	r3, [fp, #-8]
    5090:	mov	r2, #0
    5094:	str	r2, [r3, #52]	; 0x34
    5098:	ldr	r0, [fp, #-16]
    509c:	bl	4a44 <coda_type_raw_new>
    50a0:	mov	r2, r0
    50a4:	ldr	r3, [fp, #-8]
    50a8:	str	r2, [r3, #44]	; 0x2c
    50ac:	ldr	r3, [fp, #-8]
    50b0:	ldr	r3, [r3, #44]	; 0x2c
    50b4:	cmp	r3, #0
    50b8:	bne	50cc <coda_type_no_data_singleton+0x180>
    50bc:	ldr	r0, [fp, #-8]
    50c0:	bl	111c <special_delete>
    50c4:	mov	r3, #0
    50c8:	b	513c <coda_type_no_data_singleton+0x1f0>
    50cc:	ldr	r3, [fp, #-8]
    50d0:	ldr	r1, [r3, #44]	; 0x2c
    50d4:	mov	r2, #0
    50d8:	mov	r3, #0
    50dc:	mov	r0, r1
    50e0:	bl	1758 <coda_type_set_bit_size>
    50e4:	mov	r3, r0
    50e8:	cmp	r3, #0
    50ec:	beq	5100 <coda_type_no_data_singleton+0x1b4>
    50f0:	ldr	r0, [fp, #-8]
    50f4:	bl	111c <special_delete>
    50f8:	mov	r3, #0
    50fc:	b	513c <coda_type_no_data_singleton+0x1f0>
    5100:	mrc	15, 0, r3, cr13, cr0, {3}
    5104:	ldr	r1, [pc, #68]	; 5150 <coda_type_no_data_singleton+0x204>
    5108:	ldr	r2, [fp, #-16]
    510c:	lsl	r2, r2, #2
    5110:	add	r3, r2, r3
    5114:	add	r3, r3, r1
    5118:	ldr	r2, [fp, #-8]
    511c:	str	r2, [r3]
    5120:	mrc	15, 0, r3, cr13, cr0, {3}
    5124:	ldr	r1, [pc, #36]	; 5150 <coda_type_no_data_singleton+0x204>
    5128:	ldr	r2, [fp, #-16]
    512c:	lsl	r2, r2, #2
    5130:	add	r3, r2, r3
    5134:	add	r3, r3, r1
    5138:	ldr	r3, [r3]
    513c:	mov	r0, r3
    5140:	sub	sp, fp, #4
    5144:	ldr	fp, [sp]
    5148:	add	sp, sp, #4
    514c:	pop	{pc}		; (ldr pc, [sp], #4)
    5150:	.word	0x00000000

00005154 <coda_type_vsf_integer_new>:
    5154:	str	fp, [sp, #-8]!
    5158:	str	lr, [sp, #4]
    515c:	add	fp, sp, #4
    5160:	sub	sp, sp, #24
    5164:	str	r0, [fp, #-16]
    5168:	mov	r0, #56	; 0x38
    516c:	bl	0 <malloc>
    5170:	mov	r3, r0
    5174:	str	r3, [fp, #-8]
    5178:	ldr	r3, [fp, #-8]
    517c:	cmp	r3, #0
    5180:	bne	51b0 <coda_type_vsf_integer_new+0x5c>
    5184:	mov	r3, #2288	; 0x8f0
    5188:	str	r3, [sp]
    518c:	movw	r3, #0
    5190:	movt	r3, #0
    5194:	mov	r2, #56	; 0x38
    5198:	movw	r1, #0
    519c:	movt	r1, #0
    51a0:	mvn	r0, #0
    51a4:	bl	0 <coda_set_error>
    51a8:	mov	r3, #0
    51ac:	b	5280 <coda_type_vsf_integer_new+0x12c>
    51b0:	ldr	r3, [fp, #-8]
    51b4:	ldr	r2, [fp, #-16]
    51b8:	str	r2, [r3]
    51bc:	ldr	r3, [fp, #-8]
    51c0:	mov	r2, #0
    51c4:	str	r2, [r3, #4]
    51c8:	ldr	r3, [fp, #-8]
    51cc:	mov	r2, #6
    51d0:	str	r2, [r3, #8]
    51d4:	ldr	r3, [fp, #-8]
    51d8:	mov	r2, #9
    51dc:	str	r2, [r3, #12]
    51e0:	ldr	r3, [fp, #-8]
    51e4:	mov	r2, #0
    51e8:	str	r2, [r3, #16]
    51ec:	ldr	r3, [fp, #-8]
    51f0:	mov	r2, #0
    51f4:	str	r2, [r3, #20]
    51f8:	ldr	r1, [fp, #-8]
    51fc:	mvn	r2, #0
    5200:	mvn	r3, #0
    5204:	strd	r2, [r1, #24]
    5208:	ldr	r3, [fp, #-8]
    520c:	mov	r2, #0
    5210:	str	r2, [r3, #32]
    5214:	ldr	r3, [fp, #-8]
    5218:	mov	r2, #0
    521c:	str	r2, [r3, #36]	; 0x24
    5220:	ldr	r3, [fp, #-8]
    5224:	mov	r2, #1
    5228:	str	r2, [r3, #40]	; 0x28
    522c:	ldr	r3, [fp, #-8]
    5230:	mov	r2, #0
    5234:	str	r2, [r3, #44]	; 0x2c
    5238:	ldr	r3, [fp, #-8]
    523c:	mov	r2, #0
    5240:	str	r2, [r3, #48]	; 0x30
    5244:	ldr	r3, [fp, #-8]
    5248:	mov	r2, #0
    524c:	str	r2, [r3, #52]	; 0x34
    5250:	ldr	r0, [fp, #-16]
    5254:	bl	24f8 <coda_type_record_new>
    5258:	mov	r2, r0
    525c:	ldr	r3, [fp, #-8]
    5260:	str	r2, [r3, #44]	; 0x2c
    5264:	ldr	r3, [fp, #-8]
    5268:	ldr	r3, [r3, #44]	; 0x2c
    526c:	movw	r1, #0
    5270:	movt	r1, #0
    5274:	mov	r0, r3
    5278:	bl	163c <coda_type_set_description>
    527c:	ldr	r3, [fp, #-8]
    5280:	mov	r0, r3
    5284:	sub	sp, fp, #4
    5288:	ldr	fp, [sp]
    528c:	add	sp, sp, #4
    5290:	pop	{pc}		; (ldr pc, [sp], #4)

00005294 <coda_type_vsf_integer_set_type>:
    5294:	str	r4, [sp, #-12]!
    5298:	str	fp, [sp, #4]
    529c:	str	lr, [sp, #8]
    52a0:	add	fp, sp, #8
    52a4:	sub	sp, sp, #20
    52a8:	str	r0, [fp, #-24]	; 0xffffffe8
    52ac:	str	r1, [fp, #-28]	; 0xffffffe4
    52b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    52b4:	ldr	r2, [r3]
    52b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    52bc:	ldr	r3, [r3]
    52c0:	cmp	r2, r3
    52c4:	beq	5310 <coda_type_vsf_integer_set_type+0x7c>
    52c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    52cc:	ldr	r3, [r3]
    52d0:	mov	r0, r3
    52d4:	bl	61a4 <coda_type_get_format_name>
    52d8:	mov	r4, r0
    52dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    52e0:	ldr	r3, [r3]
    52e4:	mov	r0, r3
    52e8:	bl	61a4 <coda_type_get_format_name>
    52ec:	mov	r3, r0
    52f0:	mov	r2, r4
    52f4:	movw	r1, #0
    52f8:	movt	r1, #0
    52fc:	movw	r0, #65136	; 0xfe70
    5300:	movt	r0, #65535	; 0xffff
    5304:	bl	0 <coda_set_error>
    5308:	mvn	r3, #0
    530c:	b	53d4 <coda_type_vsf_integer_set_type+0x140>
    5310:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5314:	ldr	r3, [r3, #44]	; 0x2c
    5318:	ldr	r3, [r3, #48]	; 0x30
    531c:	cmp	r3, #1
    5320:	beq	5340 <coda_type_vsf_integer_set_type+0xac>
    5324:	movw	r1, #0
    5328:	movt	r1, #0
    532c:	movw	r0, #65136	; 0xfe70
    5330:	movt	r0, #65535	; 0xffff
    5334:	bl	0 <coda_set_error>
    5338:	mvn	r3, #0
    533c:	b	53d4 <coda_type_vsf_integer_set_type+0x140>
    5340:	movw	r0, #0
    5344:	movt	r0, #0
    5348:	bl	1df8 <coda_type_record_field_new>
    534c:	str	r0, [fp, #-16]
    5350:	ldr	r3, [fp, #-16]
    5354:	cmp	r3, #0
    5358:	bne	5364 <coda_type_vsf_integer_set_type+0xd0>
    535c:	mvn	r3, #0
    5360:	b	53d4 <coda_type_vsf_integer_set_type+0x140>
    5364:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5368:	ldr	r0, [fp, #-16]
    536c:	bl	2090 <coda_type_record_field_set_type>
    5370:	mov	r3, r0
    5374:	cmp	r3, #0
    5378:	beq	538c <coda_type_vsf_integer_set_type+0xf8>
    537c:	ldr	r0, [fp, #-16]
    5380:	bl	a84 <coda_type_record_field_delete>
    5384:	mvn	r3, #0
    5388:	b	53d4 <coda_type_vsf_integer_set_type+0x140>
    538c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5390:	ldr	r3, [r3, #44]	; 0x2c
    5394:	ldr	r1, [fp, #-16]
    5398:	mov	r0, r3
    539c:	bl	2f98 <coda_type_record_add_field>
    53a0:	mov	r3, r0
    53a4:	cmp	r3, #0
    53a8:	beq	53bc <coda_type_vsf_integer_set_type+0x128>
    53ac:	ldr	r0, [fp, #-16]
    53b0:	bl	a84 <coda_type_record_field_delete>
    53b4:	mvn	r3, #0
    53b8:	b	53d4 <coda_type_vsf_integer_set_type+0x140>
    53bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    53c0:	ldr	r3, [r3, #44]	; 0x2c
    53c4:	ldrd	r2, [r3, #24]
    53c8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    53cc:	strd	r2, [r1, #24]
    53d0:	mov	r3, #0
    53d4:	mov	r0, r3
    53d8:	sub	sp, fp, #8
    53dc:	ldr	r4, [sp]
    53e0:	ldr	fp, [sp, #4]
    53e4:	add	sp, sp, #8
    53e8:	pop	{pc}		; (ldr pc, [sp], #4)

000053ec <coda_type_vsf_integer_set_scale_factor>:
    53ec:	str	r4, [sp, #-12]!
    53f0:	str	fp, [sp, #4]
    53f4:	str	lr, [sp, #8]
    53f8:	add	fp, sp, #8
    53fc:	sub	sp, sp, #20
    5400:	str	r0, [fp, #-24]	; 0xffffffe8
    5404:	str	r1, [fp, #-28]	; 0xffffffe4
    5408:	ldr	r3, [fp, #-24]	; 0xffffffe8
    540c:	ldr	r2, [r3]
    5410:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5414:	ldr	r3, [r3]
    5418:	cmp	r2, r3
    541c:	beq	5468 <coda_type_vsf_integer_set_scale_factor+0x7c>
    5420:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5424:	ldr	r3, [r3]
    5428:	mov	r0, r3
    542c:	bl	61a4 <coda_type_get_format_name>
    5430:	mov	r4, r0
    5434:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5438:	ldr	r3, [r3]
    543c:	mov	r0, r3
    5440:	bl	61a4 <coda_type_get_format_name>
    5444:	mov	r3, r0
    5448:	mov	r2, r4
    544c:	movw	r1, #0
    5450:	movt	r1, #0
    5454:	movw	r0, #65136	; 0xfe70
    5458:	movt	r0, #65535	; 0xffff
    545c:	bl	0 <coda_set_error>
    5460:	mvn	r3, #0
    5464:	b	5590 <coda_type_vsf_integer_set_scale_factor+0x1a4>
    5468:	ldr	r3, [fp, #-24]	; 0xffffffe8
    546c:	ldr	r3, [r3, #44]	; 0x2c
    5470:	ldr	r3, [r3, #48]	; 0x30
    5474:	cmp	r3, #0
    5478:	beq	5498 <coda_type_vsf_integer_set_scale_factor+0xac>
    547c:	movw	r1, #0
    5480:	movt	r1, #0
    5484:	movw	r0, #65136	; 0xfe70
    5488:	movt	r0, #65535	; 0xffff
    548c:	bl	0 <coda_set_error>
    5490:	mvn	r3, #0
    5494:	b	5590 <coda_type_vsf_integer_set_scale_factor+0x1a4>
    5498:	sub	r3, fp, #20
    549c:	mov	r1, r3
    54a0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    54a4:	bl	66ac <coda_type_get_read_type>
    54a8:	mov	r3, r0
    54ac:	cmp	r3, #0
    54b0:	beq	54bc <coda_type_vsf_integer_set_scale_factor+0xd0>
    54b4:	mvn	r3, #0
    54b8:	b	5590 <coda_type_vsf_integer_set_scale_factor+0x1a4>
    54bc:	ldr	r3, [fp, #-20]	; 0xffffffec
    54c0:	cmp	r3, #4
    54c4:	bls	54f8 <coda_type_vsf_integer_set_scale_factor+0x10c>
    54c8:	ldr	r3, [fp, #-20]	; 0xffffffec
    54cc:	mov	r0, r3
    54d0:	bl	6324 <coda_type_get_native_type_name>
    54d4:	mov	r3, r0
    54d8:	mov	r2, r3
    54dc:	movw	r1, #0
    54e0:	movt	r1, #0
    54e4:	movw	r0, #65136	; 0xfe70
    54e8:	movt	r0, #65535	; 0xffff
    54ec:	bl	0 <coda_set_error>
    54f0:	mvn	r3, #0
    54f4:	b	5590 <coda_type_vsf_integer_set_scale_factor+0x1a4>
    54f8:	nop	{0}
    54fc:	movw	r0, #0
    5500:	movt	r0, #0
    5504:	bl	1df8 <coda_type_record_field_new>
    5508:	str	r0, [fp, #-16]
    550c:	ldr	r3, [fp, #-16]
    5510:	cmp	r3, #0
    5514:	bne	5520 <coda_type_vsf_integer_set_scale_factor+0x134>
    5518:	mvn	r3, #0
    551c:	b	5590 <coda_type_vsf_integer_set_scale_factor+0x1a4>
    5520:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5524:	ldr	r0, [fp, #-16]
    5528:	bl	2090 <coda_type_record_field_set_type>
    552c:	mov	r3, r0
    5530:	cmp	r3, #0
    5534:	beq	5548 <coda_type_vsf_integer_set_scale_factor+0x15c>
    5538:	ldr	r0, [fp, #-16]
    553c:	bl	a84 <coda_type_record_field_delete>
    5540:	mvn	r3, #0
    5544:	b	5590 <coda_type_vsf_integer_set_scale_factor+0x1a4>
    5548:	ldr	r3, [fp, #-24]	; 0xffffffe8
    554c:	ldr	r3, [r3, #44]	; 0x2c
    5550:	ldr	r1, [fp, #-16]
    5554:	mov	r0, r3
    5558:	bl	2f98 <coda_type_record_add_field>
    555c:	mov	r3, r0
    5560:	cmp	r3, #0
    5564:	beq	5578 <coda_type_vsf_integer_set_scale_factor+0x18c>
    5568:	ldr	r0, [fp, #-16]
    556c:	bl	a84 <coda_type_record_field_delete>
    5570:	mvn	r3, #0
    5574:	b	5590 <coda_type_vsf_integer_set_scale_factor+0x1a4>
    5578:	ldr	r3, [fp, #-24]	; 0xffffffe8
    557c:	ldr	r3, [r3, #44]	; 0x2c
    5580:	ldrd	r2, [r3, #24]
    5584:	ldr	r1, [fp, #-24]	; 0xffffffe8
    5588:	strd	r2, [r1, #24]
    558c:	mov	r3, #0
    5590:	mov	r0, r3
    5594:	sub	sp, fp, #8
    5598:	ldr	r4, [sp]
    559c:	ldr	fp, [sp, #4]
    55a0:	add	sp, sp, #8
    55a4:	pop	{pc}		; (ldr pc, [sp], #4)

000055a8 <coda_type_vsf_integer_set_unit>:
    55a8:	str	fp, [sp, #-8]!
    55ac:	str	lr, [sp, #4]
    55b0:	add	fp, sp, #4
    55b4:	sub	sp, sp, #8
    55b8:	str	r0, [fp, #-8]
    55bc:	str	r1, [fp, #-12]
    55c0:	ldr	r3, [fp, #-12]
    55c4:	cmp	r3, #0
    55c8:	bne	55f0 <coda_type_vsf_integer_set_unit+0x48>
    55cc:	movw	r3, #2412	; 0x96c
    55d0:	movw	r2, #0
    55d4:	movt	r2, #0
    55d8:	movw	r1, #0
    55dc:	movt	r1, #0
    55e0:	mvn	r0, #99	; 0x63
    55e4:	bl	0 <coda_set_error>
    55e8:	mvn	r3, #0
    55ec:	b	566c <coda_type_vsf_integer_set_unit+0xc4>
    55f0:	ldr	r3, [fp, #-8]
    55f4:	ldr	r3, [r3, #48]	; 0x30
    55f8:	cmp	r3, #0
    55fc:	beq	561c <coda_type_vsf_integer_set_unit+0x74>
    5600:	movw	r1, #0
    5604:	movt	r1, #0
    5608:	movw	r0, #65136	; 0xfe70
    560c:	movt	r0, #65535	; 0xffff
    5610:	bl	0 <coda_set_error>
    5614:	mvn	r3, #0
    5618:	b	566c <coda_type_vsf_integer_set_unit+0xc4>
    561c:	ldr	r0, [fp, #-12]
    5620:	bl	0 <strdup>
    5624:	mov	r3, r0
    5628:	mov	r2, r3
    562c:	ldr	r3, [fp, #-8]
    5630:	str	r2, [r3, #48]	; 0x30
    5634:	ldr	r3, [fp, #-8]
    5638:	ldr	r3, [r3, #48]	; 0x30
    563c:	cmp	r3, #0
    5640:	bne	5668 <coda_type_vsf_integer_set_unit+0xc0>
    5644:	movw	r3, #2424	; 0x978
    5648:	movw	r2, #0
    564c:	movt	r2, #0
    5650:	movw	r1, #0
    5654:	movt	r1, #0
    5658:	mvn	r0, #0
    565c:	bl	0 <coda_set_error>
    5660:	mvn	r3, #0
    5664:	b	566c <coda_type_vsf_integer_set_unit+0xc4>
    5668:	mov	r3, #0
    566c:	mov	r0, r3
    5670:	sub	sp, fp, #4
    5674:	ldr	fp, [sp]
    5678:	add	sp, sp, #4
    567c:	pop	{pc}		; (ldr pc, [sp], #4)

00005680 <coda_type_vsf_integer_validate>:
    5680:	str	fp, [sp, #-8]!
    5684:	str	lr, [sp, #4]
    5688:	add	fp, sp, #4
    568c:	sub	sp, sp, #8
    5690:	str	r0, [fp, #-8]
    5694:	ldr	r3, [fp, #-8]
    5698:	ldr	r3, [r3, #44]	; 0x2c
    569c:	ldr	r3, [r3, #48]	; 0x30
    56a0:	cmp	r3, #2
    56a4:	beq	56c4 <coda_type_vsf_integer_validate+0x44>
    56a8:	movw	r1, #0
    56ac:	movt	r1, #0
    56b0:	movw	r0, #65136	; 0xfe70
    56b4:	movt	r0, #65535	; 0xffff
    56b8:	bl	0 <coda_set_error>
    56bc:	mvn	r3, #0
    56c0:	b	56c8 <coda_type_vsf_integer_validate+0x48>
    56c4:	mov	r3, #0
    56c8:	mov	r0, r3
    56cc:	sub	sp, fp, #4
    56d0:	ldr	fp, [sp]
    56d4:	add	sp, sp, #4
    56d8:	pop	{pc}		; (ldr pc, [sp], #4)

000056dc <coda_type_time_new>:
    56dc:	str	fp, [sp, #-8]!
    56e0:	str	lr, [sp, #4]
    56e4:	add	fp, sp, #4
    56e8:	sub	sp, sp, #24
    56ec:	str	r0, [fp, #-16]
    56f0:	str	r1, [fp, #-20]	; 0xffffffec
    56f4:	ldr	r3, [fp, #-20]	; 0xffffffec
    56f8:	cmp	r3, #0
    56fc:	bne	5724 <coda_type_time_new+0x48>
    5700:	movw	r3, #2447	; 0x98f
    5704:	movw	r2, #0
    5708:	movt	r2, #0
    570c:	movw	r1, #0
    5710:	movt	r1, #0
    5714:	mvn	r0, #99	; 0x63
    5718:	bl	0 <coda_set_error>
    571c:	mov	r3, #0
    5720:	b	5868 <coda_type_time_new+0x18c>
    5724:	mov	r0, #56	; 0x38
    5728:	bl	0 <malloc>
    572c:	mov	r3, r0
    5730:	str	r3, [fp, #-8]
    5734:	ldr	r3, [fp, #-8]
    5738:	cmp	r3, #0
    573c:	bne	576c <coda_type_time_new+0x90>
    5740:	movw	r3, #2455	; 0x997
    5744:	str	r3, [sp]
    5748:	movw	r3, #0
    574c:	movt	r3, #0
    5750:	mov	r2, #56	; 0x38
    5754:	movw	r1, #0
    5758:	movt	r1, #0
    575c:	mvn	r0, #0
    5760:	bl	0 <coda_set_error>
    5764:	mov	r3, #0
    5768:	b	5868 <coda_type_time_new+0x18c>
    576c:	ldr	r3, [fp, #-8]
    5770:	ldr	r2, [fp, #-16]
    5774:	str	r2, [r3]
    5778:	ldr	r3, [fp, #-8]
    577c:	mov	r2, #0
    5780:	str	r2, [r3, #4]
    5784:	ldr	r3, [fp, #-8]
    5788:	mov	r2, #6
    578c:	str	r2, [r3, #8]
    5790:	ldr	r3, [fp, #-8]
    5794:	mov	r2, #9
    5798:	str	r2, [r3, #12]
    579c:	ldr	r3, [fp, #-8]
    57a0:	mov	r2, #0
    57a4:	str	r2, [r3, #16]
    57a8:	ldr	r3, [fp, #-8]
    57ac:	mov	r2, #0
    57b0:	str	r2, [r3, #20]
    57b4:	ldr	r1, [fp, #-8]
    57b8:	mvn	r2, #0
    57bc:	mvn	r3, #0
    57c0:	strd	r2, [r1, #24]
    57c4:	ldr	r3, [fp, #-8]
    57c8:	mov	r2, #0
    57cc:	str	r2, [r3, #32]
    57d0:	ldr	r3, [fp, #-8]
    57d4:	mov	r2, #0
    57d8:	str	r2, [r3, #36]	; 0x24
    57dc:	ldr	r3, [fp, #-8]
    57e0:	mov	r2, #2
    57e4:	str	r2, [r3, #40]	; 0x28
    57e8:	ldr	r3, [fp, #-8]
    57ec:	mov	r2, #0
    57f0:	str	r2, [r3, #44]	; 0x2c
    57f4:	ldr	r3, [fp, #-8]
    57f8:	mov	r2, #0
    57fc:	str	r2, [r3, #48]	; 0x30
    5800:	ldr	r3, [fp, #-8]
    5804:	ldr	r2, [fp, #-20]	; 0xffffffec
    5808:	str	r2, [r3, #52]	; 0x34
    580c:	movw	r0, #0
    5810:	movt	r0, #0
    5814:	bl	0 <strdup>
    5818:	mov	r3, r0
    581c:	mov	r2, r3
    5820:	ldr	r3, [fp, #-8]
    5824:	str	r2, [r3, #48]	; 0x30
    5828:	ldr	r3, [fp, #-8]
    582c:	ldr	r3, [r3, #48]	; 0x30
    5830:	cmp	r3, #0
    5834:	bne	5864 <coda_type_time_new+0x188>
    5838:	movw	r3, #2476	; 0x9ac
    583c:	movw	r2, #0
    5840:	movt	r2, #0
    5844:	movw	r1, #0
    5848:	movt	r1, #0
    584c:	mvn	r0, #0
    5850:	bl	0 <coda_set_error>
    5854:	ldr	r0, [fp, #-8]
    5858:	bl	111c <special_delete>
    585c:	mov	r3, #0
    5860:	b	5868 <coda_type_time_new+0x18c>
    5864:	ldr	r3, [fp, #-8]
    5868:	mov	r0, r3
    586c:	sub	sp, fp, #4
    5870:	ldr	fp, [sp]
    5874:	add	sp, sp, #4
    5878:	pop	{pc}		; (ldr pc, [sp], #4)

0000587c <coda_type_time_add_ascii_float_mapping>:
    587c:	str	fp, [sp, #-8]!
    5880:	str	lr, [sp, #4]
    5884:	add	fp, sp, #4
    5888:	sub	sp, sp, #96	; 0x60
    588c:	str	r0, [fp, #-88]	; 0xffffffa8
    5890:	str	r1, [fp, #-92]	; 0xffffffa4
    5894:	ldr	r3, [fp, #-88]	; 0xffffffa8
    5898:	cmp	r3, #0
    589c:	bne	58c4 <coda_type_time_add_ascii_float_mapping+0x48>
    58a0:	movw	r3, #2493	; 0x9bd
    58a4:	movw	r2, #0
    58a8:	movt	r2, #0
    58ac:	movw	r1, #0
    58b0:	movt	r1, #0
    58b4:	mvn	r0, #99	; 0x63
    58b8:	bl	0 <coda_set_error>
    58bc:	mvn	r3, #0
    58c0:	b	5bac <coda_type_time_add_ascii_float_mapping+0x330>
    58c4:	ldr	r3, [fp, #-92]	; 0xffffffa4
    58c8:	cmp	r3, #0
    58cc:	bne	58f4 <coda_type_time_add_ascii_float_mapping+0x78>
    58d0:	movw	r3, #2498	; 0x9c2
    58d4:	movw	r2, #0
    58d8:	movt	r2, #0
    58dc:	movw	r1, #0
    58e0:	movt	r1, #0
    58e4:	mvn	r0, #99	; 0x63
    58e8:	bl	0 <coda_set_error>
    58ec:	mvn	r3, #0
    58f0:	b	5bac <coda_type_time_add_ascii_float_mapping+0x330>
    58f4:	ldr	r3, [fp, #-88]	; 0xffffffa8
    58f8:	ldr	r3, [r3, #40]	; 0x28
    58fc:	cmp	r3, #2
    5900:	beq	5938 <coda_type_time_add_ascii_float_mapping+0xbc>
    5904:	ldr	r3, [fp, #-88]	; 0xffffffa8
    5908:	ldr	r3, [r3, #40]	; 0x28
    590c:	mov	r0, r3
    5910:	bl	6440 <coda_type_get_special_type_name>
    5914:	mov	r3, r0
    5918:	mov	r2, r3
    591c:	movw	r1, #0
    5920:	movt	r1, #0
    5924:	movw	r0, #65136	; 0xfe70
    5928:	movt	r0, #65535	; 0xffff
    592c:	bl	0 <coda_set_error>
    5930:	mvn	r3, #0
    5934:	b	5bac <coda_type_time_add_ascii_float_mapping+0x330>
    5938:	ldr	r3, [fp, #-88]	; 0xffffffa8
    593c:	ldr	r3, [r3, #44]	; 0x2c
    5940:	cmp	r3, #0
    5944:	bne	5964 <coda_type_time_add_ascii_float_mapping+0xe8>
    5948:	movw	r1, #0
    594c:	movt	r1, #0
    5950:	movw	r0, #65136	; 0xfe70
    5954:	movt	r0, #65535	; 0xffff
    5958:	bl	0 <coda_set_error>
    595c:	mvn	r3, #0
    5960:	b	5bac <coda_type_time_add_ascii_float_mapping+0x330>
    5964:	ldr	r3, [fp, #-88]	; 0xffffffa8
    5968:	ldr	r3, [r3, #44]	; 0x2c
    596c:	ldr	r3, [r3, #8]
    5970:	cmp	r3, #4
    5974:	beq	59b0 <coda_type_time_add_ascii_float_mapping+0x134>
    5978:	ldr	r3, [fp, #-88]	; 0xffffffa8
    597c:	ldr	r3, [r3, #44]	; 0x2c
    5980:	ldr	r3, [r3, #8]
    5984:	mov	r0, r3
    5988:	bl	627c <coda_type_get_class_name>
    598c:	mov	r3, r0
    5990:	mov	r2, r3
    5994:	movw	r1, #0
    5998:	movt	r1, #0
    599c:	movw	r0, #65136	; 0xfe70
    59a0:	movt	r0, #65535	; 0xffff
    59a4:	bl	0 <coda_set_error>
    59a8:	mvn	r3, #0
    59ac:	b	5bac <coda_type_time_add_ascii_float_mapping+0x330>
    59b0:	ldr	r3, [fp, #-92]	; 0xffffffa4
    59b4:	ldr	r2, [r3]
    59b8:	sub	r3, fp, #80	; 0x50
    59bc:	movw	r1, #0
    59c0:	movt	r1, #0
    59c4:	mov	r0, r3
    59c8:	bl	0 <sprintf>
    59cc:	sub	r3, fp, #80	; 0x50
    59d0:	mov	r0, r3
    59d4:	bl	0 <strdup>
    59d8:	mov	r3, r0
    59dc:	mov	r1, r3
    59e0:	mov	r3, #0
    59e4:	str	r3, [sp, #4]
    59e8:	mov	r3, #0
    59ec:	str	r3, [sp]
    59f0:	mov	r3, #0
    59f4:	mov	r2, #0
    59f8:	mov	r0, #20
    59fc:	bl	0 <coda_expression_new>
    5a00:	str	r0, [fp, #-12]
    5a04:	ldr	r3, [fp, #-92]	; 0xffffffa4
    5a08:	ldr	r3, [r3]
    5a0c:	cmp	r3, #0
    5a10:	bne	5a68 <coda_type_time_add_ascii_float_mapping+0x1ec>
    5a14:	mov	r3, #0
    5a18:	str	r3, [sp, #4]
    5a1c:	mov	r3, #0
    5a20:	str	r3, [sp]
    5a24:	mov	r3, #0
    5a28:	mov	r2, #0
    5a2c:	mov	r1, #0
    5a30:	mov	r0, #36	; 0x24
    5a34:	bl	0 <coda_expression_new>
    5a38:	str	r0, [fp, #-16]
    5a3c:	mov	r3, #0
    5a40:	str	r3, [sp, #4]
    5a44:	mov	r3, #0
    5a48:	str	r3, [sp]
    5a4c:	mov	r3, #0
    5a50:	ldr	r2, [fp, #-16]
    5a54:	mov	r1, #0
    5a58:	mov	r0, #50	; 0x32
    5a5c:	bl	0 <coda_expression_new>
    5a60:	str	r0, [fp, #-8]
    5a64:	b	5af4 <coda_type_time_add_ascii_float_mapping+0x278>
    5a68:	mov	r3, #0
    5a6c:	str	r3, [sp, #4]
    5a70:	mov	r3, #0
    5a74:	str	r3, [sp]
    5a78:	mov	r3, #0
    5a7c:	mov	r2, #0
    5a80:	mov	r1, #0
    5a84:	mov	r0, #36	; 0x24
    5a88:	bl	0 <coda_expression_new>
    5a8c:	str	r0, [fp, #-16]
    5a90:	mov	r3, #0
    5a94:	str	r3, [sp, #4]
    5a98:	mov	r3, #0
    5a9c:	str	r3, [sp]
    5aa0:	ldr	r3, [fp, #-12]
    5aa4:	ldr	r2, [fp, #-16]
    5aa8:	mov	r1, #0
    5aac:	mov	r0, #75	; 0x4b
    5ab0:	bl	0 <coda_expression_new>
    5ab4:	str	r0, [fp, #-8]
    5ab8:	ldr	r3, [fp, #-92]	; 0xffffffa4
    5abc:	ldr	r3, [r3, #4]
    5ac0:	mov	r0, r3
    5ac4:	bl	0 <strdup>
    5ac8:	mov	r3, r0
    5acc:	mov	r1, r3
    5ad0:	mov	r3, #0
    5ad4:	str	r3, [sp, #4]
    5ad8:	mov	r3, #0
    5adc:	str	r3, [sp]
    5ae0:	mov	r3, #0
    5ae4:	mov	r2, #0
    5ae8:	mov	r0, #22
    5aec:	bl	0 <coda_expression_new>
    5af0:	str	r0, [fp, #-12]
    5af4:	mov	r3, #0
    5af8:	str	r3, [sp, #4]
    5afc:	mov	r3, #0
    5b00:	str	r3, [sp]
    5b04:	ldr	r3, [fp, #-12]
    5b08:	ldr	r2, [fp, #-8]
    5b0c:	mov	r1, #0
    5b10:	mov	r0, #25
    5b14:	bl	0 <coda_expression_new>
    5b18:	str	r0, [fp, #-8]
    5b1c:	ldr	r3, [fp, #-92]	; 0xffffffa4
    5b20:	vldr	d7, [r3, #8]
    5b24:	sub	r3, fp, #80	; 0x50
    5b28:	mov	r0, r3
    5b2c:	vmov.f64	d0, d7
    5b30:	bl	0 <coda_strfl>
    5b34:	sub	r3, fp, #80	; 0x50
    5b38:	mov	r0, r3
    5b3c:	bl	0 <strdup>
    5b40:	mov	r3, r0
    5b44:	mov	r1, r3
    5b48:	mov	r3, #0
    5b4c:	str	r3, [sp, #4]
    5b50:	mov	r3, #0
    5b54:	str	r3, [sp]
    5b58:	mov	r3, #0
    5b5c:	mov	r2, #0
    5b60:	mov	r0, #19
    5b64:	bl	0 <coda_expression_new>
    5b68:	str	r0, [fp, #-12]
    5b6c:	ldr	r3, [fp, #-88]	; 0xffffffa8
    5b70:	ldr	r3, [r3, #52]	; 0x34
    5b74:	mov	r2, #0
    5b78:	str	r2, [sp, #4]
    5b7c:	str	r3, [sp]
    5b80:	ldr	r3, [fp, #-12]
    5b84:	ldr	r2, [fp, #-8]
    5b88:	mov	r1, #0
    5b8c:	mov	r0, #42	; 0x2a
    5b90:	bl	0 <coda_expression_new>
    5b94:	mov	r2, r0
    5b98:	ldr	r3, [fp, #-88]	; 0xffffffa8
    5b9c:	str	r2, [r3, #52]	; 0x34
    5ba0:	ldr	r0, [fp, #-92]	; 0xffffffa4
    5ba4:	bl	650 <coda_ascii_float_mapping_delete>
    5ba8:	mov	r3, #0
    5bac:	mov	r0, r3
    5bb0:	sub	sp, fp, #4
    5bb4:	ldr	fp, [sp]
    5bb8:	add	sp, sp, #4
    5bbc:	pop	{pc}		; (ldr pc, [sp], #4)

00005bc0 <coda_type_time_set_base_type>:
    5bc0:	str	fp, [sp, #-8]!
    5bc4:	str	lr, [sp, #4]
    5bc8:	add	fp, sp, #4
    5bcc:	sub	sp, sp, #8
    5bd0:	str	r0, [fp, #-8]
    5bd4:	str	r1, [fp, #-12]
    5bd8:	ldr	r3, [fp, #-8]
    5bdc:	cmp	r3, #0
    5be0:	bne	5c08 <coda_type_time_set_base_type+0x48>
    5be4:	movw	r3, #2548	; 0x9f4
    5be8:	movw	r2, #0
    5bec:	movt	r2, #0
    5bf0:	movw	r1, #0
    5bf4:	movt	r1, #0
    5bf8:	mvn	r0, #99	; 0x63
    5bfc:	bl	0 <coda_set_error>
    5c00:	mvn	r3, #0
    5c04:	b	5ce0 <coda_type_time_set_base_type+0x120>
    5c08:	ldr	r3, [fp, #-12]
    5c0c:	cmp	r3, #0
    5c10:	bne	5c38 <coda_type_time_set_base_type+0x78>
    5c14:	movw	r3, #2553	; 0x9f9
    5c18:	movw	r2, #0
    5c1c:	movt	r2, #0
    5c20:	movw	r1, #0
    5c24:	movt	r1, #0
    5c28:	mvn	r0, #99	; 0x63
    5c2c:	bl	0 <coda_set_error>
    5c30:	mvn	r3, #0
    5c34:	b	5ce0 <coda_type_time_set_base_type+0x120>
    5c38:	ldr	r3, [fp, #-8]
    5c3c:	ldr	r3, [r3, #40]	; 0x28
    5c40:	cmp	r3, #2
    5c44:	beq	5c7c <coda_type_time_set_base_type+0xbc>
    5c48:	ldr	r3, [fp, #-8]
    5c4c:	ldr	r3, [r3, #40]	; 0x28
    5c50:	mov	r0, r3
    5c54:	bl	6440 <coda_type_get_special_type_name>
    5c58:	mov	r3, r0
    5c5c:	mov	r2, r3
    5c60:	movw	r1, #0
    5c64:	movt	r1, #0
    5c68:	movw	r0, #65136	; 0xfe70
    5c6c:	movt	r0, #65535	; 0xffff
    5c70:	bl	0 <coda_set_error>
    5c74:	mvn	r3, #0
    5c78:	b	5ce0 <coda_type_time_set_base_type+0x120>
    5c7c:	ldr	r3, [fp, #-8]
    5c80:	ldr	r3, [r3, #44]	; 0x2c
    5c84:	cmp	r3, #0
    5c88:	beq	5ca8 <coda_type_time_set_base_type+0xe8>
    5c8c:	movw	r1, #0
    5c90:	movt	r1, #0
    5c94:	movw	r0, #65136	; 0xfe70
    5c98:	movt	r0, #65535	; 0xffff
    5c9c:	bl	0 <coda_set_error>
    5ca0:	mvn	r3, #0
    5ca4:	b	5ce0 <coda_type_time_set_base_type+0x120>
    5ca8:	ldr	r3, [fp, #-8]
    5cac:	ldr	r2, [fp, #-12]
    5cb0:	str	r2, [r3, #44]	; 0x2c
    5cb4:	ldr	r3, [fp, #-12]
    5cb8:	ldr	r3, [r3, #4]
    5cbc:	add	r2, r3, #1
    5cc0:	ldr	r3, [fp, #-12]
    5cc4:	str	r2, [r3, #4]
    5cc8:	ldr	r3, [fp, #-8]
    5ccc:	ldr	r3, [r3, #44]	; 0x2c
    5cd0:	ldrd	r2, [r3, #24]
    5cd4:	ldr	r1, [fp, #-8]
    5cd8:	strd	r2, [r1, #24]
    5cdc:	mov	r3, #0
    5ce0:	mov	r0, r3
    5ce4:	sub	sp, fp, #4
    5ce8:	ldr	fp, [sp]
    5cec:	add	sp, sp, #4
    5cf0:	pop	{pc}		; (ldr pc, [sp], #4)

00005cf4 <coda_type_time_validate>:
    5cf4:	str	fp, [sp, #-8]!
    5cf8:	str	lr, [sp, #4]
    5cfc:	add	fp, sp, #4
    5d00:	sub	sp, sp, #8
    5d04:	str	r0, [fp, #-8]
    5d08:	ldr	r3, [fp, #-8]
    5d0c:	ldr	r3, [r3, #44]	; 0x2c
    5d10:	cmp	r3, #0
    5d14:	bne	5d34 <coda_type_time_validate+0x40>
    5d18:	movw	r1, #0
    5d1c:	movt	r1, #0
    5d20:	movw	r0, #65136	; 0xfe70
    5d24:	movt	r0, #65535	; 0xffff
    5d28:	bl	0 <coda_set_error>
    5d2c:	mvn	r3, #0
    5d30:	b	5d38 <coda_type_time_validate+0x44>
    5d34:	mov	r3, #0
    5d38:	mov	r0, r3
    5d3c:	sub	sp, fp, #4
    5d40:	ldr	fp, [sp]
    5d44:	add	sp, sp, #4
    5d48:	pop	{pc}		; (ldr pc, [sp], #4)

00005d4c <coda_type_complex_new>:
    5d4c:	str	fp, [sp, #-8]!
    5d50:	str	lr, [sp, #4]
    5d54:	add	fp, sp, #4
    5d58:	sub	sp, sp, #24
    5d5c:	str	r0, [fp, #-16]
    5d60:	mov	r0, #56	; 0x38
    5d64:	bl	0 <malloc>
    5d68:	mov	r3, r0
    5d6c:	str	r3, [fp, #-8]
    5d70:	ldr	r3, [fp, #-8]
    5d74:	cmp	r3, #0
    5d78:	bne	5da8 <coda_type_complex_new+0x5c>
    5d7c:	movw	r3, #2595	; 0xa23
    5d80:	str	r3, [sp]
    5d84:	movw	r3, #0
    5d88:	movt	r3, #0
    5d8c:	mov	r2, #56	; 0x38
    5d90:	movw	r1, #0
    5d94:	movt	r1, #0
    5d98:	mvn	r0, #0
    5d9c:	bl	0 <coda_set_error>
    5da0:	mov	r3, #0
    5da4:	b	5e4c <coda_type_complex_new+0x100>
    5da8:	ldr	r3, [fp, #-8]
    5dac:	ldr	r2, [fp, #-16]
    5db0:	str	r2, [r3]
    5db4:	ldr	r3, [fp, #-8]
    5db8:	mov	r2, #0
    5dbc:	str	r2, [r3, #4]
    5dc0:	ldr	r3, [fp, #-8]
    5dc4:	mov	r2, #6
    5dc8:	str	r2, [r3, #8]
    5dcc:	ldr	r3, [fp, #-8]
    5dd0:	mvn	r2, #0
    5dd4:	str	r2, [r3, #12]
    5dd8:	ldr	r3, [fp, #-8]
    5ddc:	mov	r2, #0
    5de0:	str	r2, [r3, #16]
    5de4:	ldr	r3, [fp, #-8]
    5de8:	mov	r2, #0
    5dec:	str	r2, [r3, #20]
    5df0:	ldr	r1, [fp, #-8]
    5df4:	mvn	r2, #0
    5df8:	mvn	r3, #0
    5dfc:	strd	r2, [r1, #24]
    5e00:	ldr	r3, [fp, #-8]
    5e04:	mov	r2, #0
    5e08:	str	r2, [r3, #32]
    5e0c:	ldr	r3, [fp, #-8]
    5e10:	mov	r2, #0
    5e14:	str	r2, [r3, #36]	; 0x24
    5e18:	ldr	r3, [fp, #-8]
    5e1c:	mov	r2, #3
    5e20:	str	r2, [r3, #40]	; 0x28
    5e24:	ldr	r3, [fp, #-8]
    5e28:	mov	r2, #0
    5e2c:	str	r2, [r3, #44]	; 0x2c
    5e30:	ldr	r3, [fp, #-8]
    5e34:	mov	r2, #0
    5e38:	str	r2, [r3, #48]	; 0x30
    5e3c:	ldr	r3, [fp, #-8]
    5e40:	mov	r2, #0
    5e44:	str	r2, [r3, #52]	; 0x34
    5e48:	ldr	r3, [fp, #-8]
    5e4c:	mov	r0, r3
    5e50:	sub	sp, fp, #4
    5e54:	ldr	fp, [sp]
    5e58:	add	sp, sp, #4
    5e5c:	pop	{pc}		; (ldr pc, [sp], #4)

00005e60 <coda_type_complex_set_type>:
    5e60:	str	r4, [sp, #-12]!
    5e64:	str	fp, [sp, #4]
    5e68:	str	lr, [sp, #8]
    5e6c:	add	fp, sp, #8
    5e70:	sub	sp, sp, #20
    5e74:	str	r0, [fp, #-24]	; 0xffffffe8
    5e78:	str	r1, [fp, #-28]	; 0xffffffe4
    5e7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5e80:	ldr	r3, [r3, #44]	; 0x2c
    5e84:	cmp	r3, #0
    5e88:	beq	5ea8 <coda_type_complex_set_type+0x48>
    5e8c:	movw	r1, #0
    5e90:	movt	r1, #0
    5e94:	movw	r0, #65136	; 0xfe70
    5e98:	movt	r0, #65535	; 0xffff
    5e9c:	bl	0 <coda_set_error>
    5ea0:	mvn	r3, #0
    5ea4:	b	5ff0 <coda_type_complex_set_type+0x190>
    5ea8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5eac:	ldr	r3, [r3, #8]
    5eb0:	cmp	r3, #2
    5eb4:	beq	5efc <coda_type_complex_set_type+0x9c>
    5eb8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5ebc:	ldr	r3, [r3, #8]
    5ec0:	cmp	r3, #3
    5ec4:	beq	5efc <coda_type_complex_set_type+0x9c>
    5ec8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5ecc:	ldr	r3, [r3, #8]
    5ed0:	mov	r0, r3
    5ed4:	bl	627c <coda_type_get_class_name>
    5ed8:	mov	r3, r0
    5edc:	mov	r2, r3
    5ee0:	movw	r1, #0
    5ee4:	movt	r1, #0
    5ee8:	movw	r0, #65136	; 0xfe70
    5eec:	movt	r0, #65535	; 0xffff
    5ef0:	bl	0 <coda_set_error>
    5ef4:	mvn	r3, #0
    5ef8:	b	5ff0 <coda_type_complex_set_type+0x190>
    5efc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5f00:	ldr	r2, [r3]
    5f04:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5f08:	ldr	r3, [r3]
    5f0c:	cmp	r2, r3
    5f10:	beq	5f5c <coda_type_complex_set_type+0xfc>
    5f14:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5f18:	ldr	r3, [r3]
    5f1c:	mov	r0, r3
    5f20:	bl	61a4 <coda_type_get_format_name>
    5f24:	mov	r4, r0
    5f28:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5f2c:	ldr	r3, [r3]
    5f30:	mov	r0, r3
    5f34:	bl	61a4 <coda_type_get_format_name>
    5f38:	mov	r3, r0
    5f3c:	mov	r2, r4
    5f40:	movw	r1, #0
    5f44:	movt	r1, #0
    5f48:	movw	r0, #65136	; 0xfe70
    5f4c:	movt	r0, #65535	; 0xffff
    5f50:	bl	0 <coda_set_error>
    5f54:	mvn	r3, #0
    5f58:	b	5ff0 <coda_type_complex_set_type+0x190>
    5f5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5f60:	ldr	r3, [r3]
    5f64:	mov	r0, r3
    5f68:	bl	24f8 <coda_type_record_new>
    5f6c:	mov	r2, r0
    5f70:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5f74:	str	r2, [r3, #44]	; 0x2c
    5f78:	movw	r0, #0
    5f7c:	movt	r0, #0
    5f80:	bl	1df8 <coda_type_record_field_new>
    5f84:	str	r0, [fp, #-16]
    5f88:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5f8c:	ldr	r0, [fp, #-16]
    5f90:	bl	2090 <coda_type_record_field_set_type>
    5f94:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5f98:	ldr	r3, [r3, #44]	; 0x2c
    5f9c:	ldr	r1, [fp, #-16]
    5fa0:	mov	r0, r3
    5fa4:	bl	2f98 <coda_type_record_add_field>
    5fa8:	movw	r0, #0
    5fac:	movt	r0, #0
    5fb0:	bl	1df8 <coda_type_record_field_new>
    5fb4:	str	r0, [fp, #-16]
    5fb8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5fbc:	ldr	r0, [fp, #-16]
    5fc0:	bl	2090 <coda_type_record_field_set_type>
    5fc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5fc8:	ldr	r3, [r3, #44]	; 0x2c
    5fcc:	ldr	r1, [fp, #-16]
    5fd0:	mov	r0, r3
    5fd4:	bl	2f98 <coda_type_record_add_field>
    5fd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5fdc:	ldr	r3, [r3, #44]	; 0x2c
    5fe0:	ldrd	r2, [r3, #24]
    5fe4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    5fe8:	strd	r2, [r1, #24]
    5fec:	mov	r3, #0
    5ff0:	mov	r0, r3
    5ff4:	sub	sp, fp, #8
    5ff8:	ldr	r4, [sp]
    5ffc:	ldr	fp, [sp, #4]
    6000:	add	sp, sp, #8
    6004:	pop	{pc}		; (ldr pc, [sp], #4)

00006008 <coda_type_complex_validate>:
    6008:	str	fp, [sp, #-8]!
    600c:	str	lr, [sp, #4]
    6010:	add	fp, sp, #4
    6014:	sub	sp, sp, #8
    6018:	str	r0, [fp, #-8]
    601c:	ldr	r3, [fp, #-8]
    6020:	ldr	r3, [r3, #44]	; 0x2c
    6024:	cmp	r3, #0
    6028:	bne	6048 <coda_type_complex_validate+0x40>
    602c:	movw	r1, #0
    6030:	movt	r1, #0
    6034:	movw	r0, #65136	; 0xfe70
    6038:	movt	r0, #65535	; 0xffff
    603c:	bl	0 <coda_set_error>
    6040:	mvn	r3, #0
    6044:	b	604c <coda_type_complex_validate+0x44>
    6048:	mov	r3, #0
    604c:	mov	r0, r3
    6050:	sub	sp, fp, #4
    6054:	ldr	fp, [sp]
    6058:	add	sp, sp, #4
    605c:	pop	{pc}		; (ldr pc, [sp], #4)

00006060 <coda_type_done>:
    6060:	str	fp, [sp, #-8]!
    6064:	str	lr, [sp, #4]
    6068:	add	fp, sp, #4
    606c:	sub	sp, sp, #8
    6070:	mov	r3, #0
    6074:	str	r3, [fp, #-8]
    6078:	b	60f0 <coda_type_done+0x90>
    607c:	mrc	15, 0, r3, cr13, cr0, {3}
    6080:	ldr	r1, [pc, #276]	; 619c <coda_type_done+0x13c>
    6084:	ldr	r2, [fp, #-8]
    6088:	lsl	r2, r2, #2
    608c:	add	r3, r2, r3
    6090:	add	r3, r3, r1
    6094:	ldr	r3, [r3]
    6098:	cmp	r3, #0
    609c:	beq	60c4 <coda_type_done+0x64>
    60a0:	mrc	15, 0, r3, cr13, cr0, {3}
    60a4:	ldr	r1, [pc, #240]	; 619c <coda_type_done+0x13c>
    60a8:	ldr	r2, [fp, #-8]
    60ac:	lsl	r2, r2, #2
    60b0:	add	r3, r2, r3
    60b4:	add	r3, r3, r1
    60b8:	ldr	r3, [r3]
    60bc:	mov	r0, r3
    60c0:	bl	123c <coda_type_release>
    60c4:	mrc	15, 0, r3, cr13, cr0, {3}
    60c8:	ldr	r1, [pc, #204]	; 619c <coda_type_done+0x13c>
    60cc:	ldr	r2, [fp, #-8]
    60d0:	lsl	r2, r2, #2
    60d4:	add	r3, r2, r3
    60d8:	add	r3, r3, r1
    60dc:	mov	r2, #0
    60e0:	str	r2, [r3]
    60e4:	ldr	r3, [fp, #-8]
    60e8:	add	r3, r3, #1
    60ec:	str	r3, [fp, #-8]
    60f0:	ldr	r3, [fp, #-8]
    60f4:	cmp	r3, #10
    60f8:	ble	607c <coda_type_done+0x1c>
    60fc:	mov	r3, #0
    6100:	str	r3, [fp, #-8]
    6104:	b	617c <coda_type_done+0x11c>
    6108:	mrc	15, 0, r3, cr13, cr0, {3}
    610c:	ldr	r1, [pc, #140]	; 61a0 <coda_type_done+0x140>
    6110:	ldr	r2, [fp, #-8]
    6114:	lsl	r2, r2, #2
    6118:	add	r3, r2, r3
    611c:	add	r3, r3, r1
    6120:	ldr	r3, [r3]
    6124:	cmp	r3, #0
    6128:	beq	6150 <coda_type_done+0xf0>
    612c:	mrc	15, 0, r3, cr13, cr0, {3}
    6130:	ldr	r1, [pc, #104]	; 61a0 <coda_type_done+0x140>
    6134:	ldr	r2, [fp, #-8]
    6138:	lsl	r2, r2, #2
    613c:	add	r3, r2, r3
    6140:	add	r3, r3, r1
    6144:	ldr	r3, [r3]
    6148:	mov	r0, r3
    614c:	bl	123c <coda_type_release>
    6150:	mrc	15, 0, r3, cr13, cr0, {3}
    6154:	ldr	r1, [pc, #68]	; 61a0 <coda_type_done+0x140>
    6158:	ldr	r2, [fp, #-8]
    615c:	lsl	r2, r2, #2
    6160:	add	r3, r2, r3
    6164:	add	r3, r3, r1
    6168:	mov	r2, #0
    616c:	str	r2, [r3]
    6170:	ldr	r3, [fp, #-8]
    6174:	add	r3, r3, #1
    6178:	str	r3, [fp, #-8]
    617c:	ldr	r3, [fp, #-8]
    6180:	cmp	r3, #10
    6184:	ble	6108 <coda_type_done+0xa8>
    6188:	nop	{0}
    618c:	sub	sp, fp, #4
    6190:	ldr	fp, [sp]
    6194:	add	sp, sp, #4
    6198:	pop	{pc}		; (ldr pc, [sp], #4)
	...

000061a4 <coda_type_get_format_name>:
    61a4:	push	{fp}		; (str fp, [sp, #-4]!)
    61a8:	add	fp, sp, #0
    61ac:	sub	sp, sp, #12
    61b0:	str	r0, [fp, #-8]
    61b4:	ldr	r3, [fp, #-8]
    61b8:	cmp	r3, #9
    61bc:	ldrls	pc, [pc, r3, lsl #2]
    61c0:	b	6264 <coda_type_get_format_name+0xc0>
    61c4:	.word	0x000061ec
    61c8:	.word	0x000061f8
    61cc:	.word	0x00006204
    61d0:	.word	0x00006234
    61d4:	.word	0x00006240
    61d8:	.word	0x00006228
    61dc:	.word	0x00006210
    61e0:	.word	0x0000621c
    61e4:	.word	0x0000624c
    61e8:	.word	0x00006258
    61ec:	movw	r3, #0
    61f0:	movt	r3, #0
    61f4:	b	626c <coda_type_get_format_name+0xc8>
    61f8:	movw	r3, #0
    61fc:	movt	r3, #0
    6200:	b	626c <coda_type_get_format_name+0xc8>
    6204:	movw	r3, #0
    6208:	movt	r3, #0
    620c:	b	626c <coda_type_get_format_name+0xc8>
    6210:	movw	r3, #0
    6214:	movt	r3, #0
    6218:	b	626c <coda_type_get_format_name+0xc8>
    621c:	movw	r3, #0
    6220:	movt	r3, #0
    6224:	b	626c <coda_type_get_format_name+0xc8>
    6228:	movw	r3, #0
    622c:	movt	r3, #0
    6230:	b	626c <coda_type_get_format_name+0xc8>
    6234:	movw	r3, #0
    6238:	movt	r3, #0
    623c:	b	626c <coda_type_get_format_name+0xc8>
    6240:	movw	r3, #0
    6244:	movt	r3, #0
    6248:	b	626c <coda_type_get_format_name+0xc8>
    624c:	movw	r3, #0
    6250:	movt	r3, #0
    6254:	b	626c <coda_type_get_format_name+0xc8>
    6258:	movw	r3, #0
    625c:	movt	r3, #0
    6260:	b	626c <coda_type_get_format_name+0xc8>
    6264:	movw	r3, #0
    6268:	movt	r3, #0
    626c:	mov	r0, r3
    6270:	add	sp, fp, #0
    6274:	pop	{fp}		; (ldr fp, [sp], #4)
    6278:	bx	lr

0000627c <coda_type_get_class_name>:
    627c:	push	{fp}		; (str fp, [sp, #-4]!)
    6280:	add	fp, sp, #0
    6284:	sub	sp, sp, #12
    6288:	str	r0, [fp, #-8]
    628c:	ldr	r3, [fp, #-8]
    6290:	cmp	r3, #6
    6294:	ldrls	pc, [pc, r3, lsl #2]
    6298:	b	630c <coda_type_get_class_name+0x90>
    629c:	.word	0x000062b8
    62a0:	.word	0x000062c4
    62a4:	.word	0x000062d0
    62a8:	.word	0x000062dc
    62ac:	.word	0x000062e8
    62b0:	.word	0x000062f4
    62b4:	.word	0x00006300
    62b8:	movw	r3, #0
    62bc:	movt	r3, #0
    62c0:	b	6314 <coda_type_get_class_name+0x98>
    62c4:	movw	r3, #0
    62c8:	movt	r3, #0
    62cc:	b	6314 <coda_type_get_class_name+0x98>
    62d0:	movw	r3, #0
    62d4:	movt	r3, #0
    62d8:	b	6314 <coda_type_get_class_name+0x98>
    62dc:	movw	r3, #0
    62e0:	movt	r3, #0
    62e4:	b	6314 <coda_type_get_class_name+0x98>
    62e8:	movw	r3, #0
    62ec:	movt	r3, #0
    62f0:	b	6314 <coda_type_get_class_name+0x98>
    62f4:	movw	r3, #0
    62f8:	movt	r3, #0
    62fc:	b	6314 <coda_type_get_class_name+0x98>
    6300:	movw	r3, #0
    6304:	movt	r3, #0
    6308:	b	6314 <coda_type_get_class_name+0x98>
    630c:	movw	r3, #0
    6310:	movt	r3, #0
    6314:	mov	r0, r3
    6318:	add	sp, fp, #0
    631c:	pop	{fp}		; (ldr fp, [sp], #4)
    6320:	bx	lr

00006324 <coda_type_get_native_type_name>:
    6324:	push	{fp}		; (str fp, [sp, #-4]!)
    6328:	add	fp, sp, #0
    632c:	sub	sp, sp, #12
    6330:	str	r0, [fp, #-8]
    6334:	ldr	r3, [fp, #-8]
    6338:	add	r3, r3, #1
    633c:	cmp	r3, #13
    6340:	ldrls	pc, [pc, r3, lsl #2]
    6344:	b	6428 <coda_type_get_native_type_name+0x104>
    6348:	.word	0x00006380
    634c:	.word	0x0000638c
    6350:	.word	0x00006398
    6354:	.word	0x000063a4
    6358:	.word	0x000063b0
    635c:	.word	0x000063bc
    6360:	.word	0x000063c8
    6364:	.word	0x000063d4
    6368:	.word	0x000063e0
    636c:	.word	0x000063ec
    6370:	.word	0x000063f8
    6374:	.word	0x00006404
    6378:	.word	0x00006410
    637c:	.word	0x0000641c
    6380:	movw	r3, #0
    6384:	movt	r3, #0
    6388:	b	6430 <coda_type_get_native_type_name+0x10c>
    638c:	movw	r3, #0
    6390:	movt	r3, #0
    6394:	b	6430 <coda_type_get_native_type_name+0x10c>
    6398:	movw	r3, #0
    639c:	movt	r3, #0
    63a0:	b	6430 <coda_type_get_native_type_name+0x10c>
    63a4:	movw	r3, #0
    63a8:	movt	r3, #0
    63ac:	b	6430 <coda_type_get_native_type_name+0x10c>
    63b0:	movw	r3, #0
    63b4:	movt	r3, #0
    63b8:	b	6430 <coda_type_get_native_type_name+0x10c>
    63bc:	movw	r3, #0
    63c0:	movt	r3, #0
    63c4:	b	6430 <coda_type_get_native_type_name+0x10c>
    63c8:	movw	r3, #0
    63cc:	movt	r3, #0
    63d0:	b	6430 <coda_type_get_native_type_name+0x10c>
    63d4:	movw	r3, #0
    63d8:	movt	r3, #0
    63dc:	b	6430 <coda_type_get_native_type_name+0x10c>
    63e0:	movw	r3, #0
    63e4:	movt	r3, #0
    63e8:	b	6430 <coda_type_get_native_type_name+0x10c>
    63ec:	movw	r3, #0
    63f0:	movt	r3, #0
    63f4:	b	6430 <coda_type_get_native_type_name+0x10c>
    63f8:	movw	r3, #0
    63fc:	movt	r3, #0
    6400:	b	6430 <coda_type_get_native_type_name+0x10c>
    6404:	movw	r3, #0
    6408:	movt	r3, #0
    640c:	b	6430 <coda_type_get_native_type_name+0x10c>
    6410:	movw	r3, #0
    6414:	movt	r3, #0
    6418:	b	6430 <coda_type_get_native_type_name+0x10c>
    641c:	movw	r3, #0
    6420:	movt	r3, #0
    6424:	b	6430 <coda_type_get_native_type_name+0x10c>
    6428:	movw	r3, #0
    642c:	movt	r3, #0
    6430:	mov	r0, r3
    6434:	add	sp, fp, #0
    6438:	pop	{fp}		; (ldr fp, [sp], #4)
    643c:	bx	lr

00006440 <coda_type_get_special_type_name>:
    6440:	push	{fp}		; (str fp, [sp, #-4]!)
    6444:	add	fp, sp, #0
    6448:	sub	sp, sp, #12
    644c:	str	r0, [fp, #-8]
    6450:	ldr	r3, [fp, #-8]
    6454:	cmp	r3, #3
    6458:	ldrls	pc, [pc, r3, lsl #2]
    645c:	b	64a0 <coda_type_get_special_type_name+0x60>
    6460:	.word	0x00006470
    6464:	.word	0x0000647c
    6468:	.word	0x00006488
    646c:	.word	0x00006494
    6470:	movw	r3, #0
    6474:	movt	r3, #0
    6478:	b	64a8 <coda_type_get_special_type_name+0x68>
    647c:	movw	r3, #0
    6480:	movt	r3, #0
    6484:	b	64a8 <coda_type_get_special_type_name+0x68>
    6488:	movw	r3, #0
    648c:	movt	r3, #0
    6490:	b	64a8 <coda_type_get_special_type_name+0x68>
    6494:	movw	r3, #0
    6498:	movt	r3, #0
    649c:	b	64a8 <coda_type_get_special_type_name+0x68>
    64a0:	movw	r3, #0
    64a4:	movt	r3, #0
    64a8:	mov	r0, r3
    64ac:	add	sp, fp, #0
    64b0:	pop	{fp}		; (ldr fp, [sp], #4)
    64b4:	bx	lr

000064b8 <coda_type_has_attributes>:
    64b8:	str	fp, [sp, #-8]!
    64bc:	str	lr, [sp, #4]
    64c0:	add	fp, sp, #4
    64c4:	sub	sp, sp, #8
    64c8:	str	r0, [fp, #-8]
    64cc:	str	r1, [fp, #-12]
    64d0:	ldr	r3, [fp, #-8]
    64d4:	cmp	r3, #0
    64d8:	bne	6500 <coda_type_has_attributes+0x48>
    64dc:	movw	r3, #2829	; 0xb0d
    64e0:	movw	r2, #0
    64e4:	movt	r2, #0
    64e8:	movw	r1, #0
    64ec:	movt	r1, #0
    64f0:	mvn	r0, #99	; 0x63
    64f4:	bl	0 <coda_set_error>
    64f8:	mvn	r3, #0
    64fc:	b	6558 <coda_type_has_attributes+0xa0>
    6500:	ldr	r3, [fp, #-12]
    6504:	cmp	r3, #0
    6508:	bne	6530 <coda_type_has_attributes+0x78>
    650c:	movw	r3, #2834	; 0xb12
    6510:	movw	r2, #0
    6514:	movt	r2, #0
    6518:	movw	r1, #0
    651c:	movt	r1, #0
    6520:	mvn	r0, #99	; 0x63
    6524:	bl	0 <coda_set_error>
    6528:	mvn	r3, #0
    652c:	b	6558 <coda_type_has_attributes+0xa0>
    6530:	ldr	r3, [fp, #-8]
    6534:	ldr	r3, [r3, #36]	; 0x24
    6538:	cmp	r3, #0
    653c:	movne	r3, #1
    6540:	moveq	r3, #0
    6544:	uxtb	r3, r3
    6548:	mov	r2, r3
    654c:	ldr	r3, [fp, #-12]
    6550:	str	r2, [r3]
    6554:	mov	r3, #0
    6558:	mov	r0, r3
    655c:	sub	sp, fp, #4
    6560:	ldr	fp, [sp]
    6564:	add	sp, sp, #4
    6568:	pop	{pc}		; (ldr pc, [sp], #4)

0000656c <coda_type_get_format>:
    656c:	str	fp, [sp, #-8]!
    6570:	str	lr, [sp, #4]
    6574:	add	fp, sp, #4
    6578:	sub	sp, sp, #8
    657c:	str	r0, [fp, #-8]
    6580:	str	r1, [fp, #-12]
    6584:	ldr	r3, [fp, #-8]
    6588:	cmp	r3, #0
    658c:	bne	65b4 <coda_type_get_format+0x48>
    6590:	movw	r3, #2853	; 0xb25
    6594:	movw	r2, #0
    6598:	movt	r2, #0
    659c:	movw	r1, #0
    65a0:	movt	r1, #0
    65a4:	mvn	r0, #99	; 0x63
    65a8:	bl	0 <coda_set_error>
    65ac:	mvn	r3, #0
    65b0:	b	65f8 <coda_type_get_format+0x8c>
    65b4:	ldr	r3, [fp, #-12]
    65b8:	cmp	r3, #0
    65bc:	bne	65e4 <coda_type_get_format+0x78>
    65c0:	movw	r3, #2858	; 0xb2a
    65c4:	movw	r2, #0
    65c8:	movt	r2, #0
    65cc:	movw	r1, #0
    65d0:	movt	r1, #0
    65d4:	mvn	r0, #99	; 0x63
    65d8:	bl	0 <coda_set_error>
    65dc:	mvn	r3, #0
    65e0:	b	65f8 <coda_type_get_format+0x8c>
    65e4:	ldr	r3, [fp, #-8]
    65e8:	ldr	r2, [r3]
    65ec:	ldr	r3, [fp, #-12]
    65f0:	str	r2, [r3]
    65f4:	mov	r3, #0
    65f8:	mov	r0, r3
    65fc:	sub	sp, fp, #4
    6600:	ldr	fp, [sp]
    6604:	add	sp, sp, #4
    6608:	pop	{pc}		; (ldr pc, [sp], #4)

0000660c <coda_type_get_class>:
    660c:	str	fp, [sp, #-8]!
    6610:	str	lr, [sp, #4]
    6614:	add	fp, sp, #4
    6618:	sub	sp, sp, #8
    661c:	str	r0, [fp, #-8]
    6620:	str	r1, [fp, #-12]
    6624:	ldr	r3, [fp, #-8]
    6628:	cmp	r3, #0
    662c:	bne	6654 <coda_type_get_class+0x48>
    6630:	movw	r3, #2877	; 0xb3d
    6634:	movw	r2, #0
    6638:	movt	r2, #0
    663c:	movw	r1, #0
    6640:	movt	r1, #0
    6644:	mvn	r0, #99	; 0x63
    6648:	bl	0 <coda_set_error>
    664c:	mvn	r3, #0
    6650:	b	6698 <coda_type_get_class+0x8c>
    6654:	ldr	r3, [fp, #-12]
    6658:	cmp	r3, #0
    665c:	bne	6684 <coda_type_get_class+0x78>
    6660:	movw	r3, #2882	; 0xb42
    6664:	movw	r2, #0
    6668:	movt	r2, #0
    666c:	movw	r1, #0
    6670:	movt	r1, #0
    6674:	mvn	r0, #99	; 0x63
    6678:	bl	0 <coda_set_error>
    667c:	mvn	r3, #0
    6680:	b	6698 <coda_type_get_class+0x8c>
    6684:	ldr	r3, [fp, #-8]
    6688:	ldr	r2, [r3, #8]
    668c:	ldr	r3, [fp, #-12]
    6690:	str	r2, [r3]
    6694:	mov	r3, #0
    6698:	mov	r0, r3
    669c:	sub	sp, fp, #4
    66a0:	ldr	fp, [sp]
    66a4:	add	sp, sp, #4
    66a8:	pop	{pc}		; (ldr pc, [sp], #4)

000066ac <coda_type_get_read_type>:
    66ac:	str	fp, [sp, #-8]!
    66b0:	str	lr, [sp, #4]
    66b4:	add	fp, sp, #4
    66b8:	sub	sp, sp, #8
    66bc:	str	r0, [fp, #-8]
    66c0:	str	r1, [fp, #-12]
    66c4:	ldr	r3, [fp, #-8]
    66c8:	cmp	r3, #0
    66cc:	bne	66f4 <coda_type_get_read_type+0x48>
    66d0:	movw	r3, #2908	; 0xb5c
    66d4:	movw	r2, #0
    66d8:	movt	r2, #0
    66dc:	movw	r1, #0
    66e0:	movt	r1, #0
    66e4:	mvn	r0, #99	; 0x63
    66e8:	bl	0 <coda_set_error>
    66ec:	mvn	r3, #0
    66f0:	b	6794 <coda_type_get_read_type+0xe8>
    66f4:	ldr	r3, [fp, #-12]
    66f8:	cmp	r3, #0
    66fc:	bne	6724 <coda_type_get_read_type+0x78>
    6700:	movw	r3, #2913	; 0xb61
    6704:	movw	r2, #0
    6708:	movt	r2, #0
    670c:	movw	r1, #0
    6710:	movt	r1, #0
    6714:	mvn	r0, #99	; 0x63
    6718:	bl	0 <coda_set_error>
    671c:	mvn	r3, #0
    6720:	b	6794 <coda_type_get_read_type+0xe8>
    6724:	ldr	r3, [fp, #-8]
    6728:	ldr	r3, [r3, #8]
    672c:	cmp	r3, #2
    6730:	beq	6744 <coda_type_get_read_type+0x98>
    6734:	ldr	r3, [fp, #-8]
    6738:	ldr	r3, [r3, #8]
    673c:	cmp	r3, #3
    6740:	bne	6780 <coda_type_get_read_type+0xd4>
    6744:	ldr	r3, [pc, #92]	; 67a8 <coda_type_get_read_type+0xfc>
    6748:	ldr	r3, [pc, r3]
    674c:	mrc	15, 0, r2, cr13, cr0, {3}
    6750:	ldr	r3, [r2, r3]
    6754:	cmp	r3, #0
    6758:	beq	6780 <coda_type_get_read_type+0xd4>
    675c:	ldr	r3, [fp, #-8]
    6760:	ldr	r3, [r3, #48]	; 0x30
    6764:	cmp	r3, #0
    6768:	beq	6780 <coda_type_get_read_type+0xd4>
    676c:	ldr	r3, [fp, #-12]
    6770:	mov	r2, #9
    6774:	str	r2, [r3]
    6778:	mov	r3, #0
    677c:	b	6794 <coda_type_get_read_type+0xe8>
    6780:	ldr	r3, [fp, #-8]
    6784:	ldr	r2, [r3, #12]
    6788:	ldr	r3, [fp, #-12]
    678c:	str	r2, [r3]
    6790:	mov	r3, #0
    6794:	mov	r0, r3
    6798:	sub	sp, fp, #4
    679c:	ldr	fp, [sp]
    67a0:	add	sp, sp, #4
    67a4:	pop	{pc}		; (ldr pc, [sp], #4)
    67a8:	.word	0x00000058

000067ac <coda_type_get_string_length>:
    67ac:	str	fp, [sp, #-8]!
    67b0:	str	lr, [sp, #4]
    67b4:	add	fp, sp, #4
    67b8:	sub	sp, sp, #8
    67bc:	str	r0, [fp, #-8]
    67c0:	str	r1, [fp, #-12]
    67c4:	ldr	r3, [fp, #-8]
    67c8:	cmp	r3, #0
    67cc:	bne	67f4 <coda_type_get_string_length+0x48>
    67d0:	movw	r3, #2942	; 0xb7e
    67d4:	movw	r2, #0
    67d8:	movt	r2, #0
    67dc:	movw	r1, #0
    67e0:	movt	r1, #0
    67e4:	mvn	r0, #99	; 0x63
    67e8:	bl	0 <coda_set_error>
    67ec:	mvn	r3, #0
    67f0:	b	68a8 <coda_type_get_string_length+0xfc>
    67f4:	ldr	r3, [fp, #-8]
    67f8:	ldr	r3, [r3, #8]
    67fc:	cmp	r3, #4
    6800:	beq	6834 <coda_type_get_string_length+0x88>
    6804:	ldr	r3, [fp, #-8]
    6808:	ldr	r3, [r3, #8]
    680c:	mov	r0, r3
    6810:	bl	627c <coda_type_get_class_name>
    6814:	mov	r3, r0
    6818:	mov	r2, r3
    681c:	movw	r1, #0
    6820:	movt	r1, #0
    6824:	mvn	r0, #104	; 0x68
    6828:	bl	0 <coda_set_error>
    682c:	mvn	r3, #0
    6830:	b	68a8 <coda_type_get_string_length+0xfc>
    6834:	ldr	r3, [fp, #-12]
    6838:	cmp	r3, #0
    683c:	bne	6864 <coda_type_get_string_length+0xb8>
    6840:	movw	r3, #2953	; 0xb89
    6844:	movw	r2, #0
    6848:	movt	r2, #0
    684c:	movw	r1, #0
    6850:	movt	r1, #0
    6854:	mvn	r0, #99	; 0x63
    6858:	bl	0 <coda_set_error>
    685c:	mvn	r3, #0
    6860:	b	68a8 <coda_type_get_string_length+0xfc>
    6864:	ldr	r3, [fp, #-8]
    6868:	ldrd	r2, [r3, #24]
    686c:	cmp	r2, #0
    6870:	sbcs	r3, r3, #0
    6874:	blt	6898 <coda_type_get_string_length+0xec>
    6878:	ldr	r3, [fp, #-8]
    687c:	ldrd	r0, [r3, #24]
    6880:	mov	r2, #0
    6884:	mov	r3, #0
    6888:	lsr	r2, r0, #3
    688c:	orr	r2, r2, r1, lsl #29
    6890:	asr	r3, r1, #3
    6894:	b	689c <coda_type_get_string_length+0xf0>
    6898:	mvn	r2, #0
    689c:	ldr	r3, [fp, #-12]
    68a0:	str	r2, [r3]
    68a4:	mov	r3, #0
    68a8:	mov	r0, r3
    68ac:	sub	sp, fp, #4
    68b0:	ldr	fp, [sp]
    68b4:	add	sp, sp, #4
    68b8:	pop	{pc}		; (ldr pc, [sp], #4)

000068bc <coda_type_get_bit_size>:
    68bc:	str	fp, [sp, #-8]!
    68c0:	str	lr, [sp, #4]
    68c4:	add	fp, sp, #4
    68c8:	sub	sp, sp, #8
    68cc:	str	r0, [fp, #-8]
    68d0:	str	r1, [fp, #-12]
    68d4:	ldr	r3, [fp, #-8]
    68d8:	cmp	r3, #0
    68dc:	bne	6904 <coda_type_get_bit_size+0x48>
    68e0:	movw	r3, #2980	; 0xba4
    68e4:	movw	r2, #0
    68e8:	movt	r2, #0
    68ec:	movw	r1, #0
    68f0:	movt	r1, #0
    68f4:	mvn	r0, #99	; 0x63
    68f8:	bl	0 <coda_set_error>
    68fc:	mvn	r3, #0
    6900:	b	695c <coda_type_get_bit_size+0xa0>
    6904:	ldr	r3, [fp, #-12]
    6908:	cmp	r3, #0
    690c:	bne	6934 <coda_type_get_bit_size+0x78>
    6910:	movw	r3, #2985	; 0xba9
    6914:	movw	r2, #0
    6918:	movt	r2, #0
    691c:	movw	r1, #0
    6920:	movt	r1, #0
    6924:	mvn	r0, #99	; 0x63
    6928:	bl	0 <coda_set_error>
    692c:	mvn	r3, #0
    6930:	b	695c <coda_type_get_bit_size+0xa0>
    6934:	ldr	r3, [fp, #-8]
    6938:	ldrd	r2, [r3, #24]
    693c:	cmp	r2, #0
    6940:	sbcs	r1, r3, #0
    6944:	bge	6950 <coda_type_get_bit_size+0x94>
    6948:	mvn	r2, #0
    694c:	mvn	r3, #0
    6950:	ldr	r1, [fp, #-12]
    6954:	strd	r2, [r1]
    6958:	mov	r3, #0
    695c:	mov	r0, r3
    6960:	sub	sp, fp, #4
    6964:	ldr	fp, [sp]
    6968:	add	sp, sp, #4
    696c:	pop	{pc}		; (ldr pc, [sp], #4)

00006970 <coda_type_get_name>:
    6970:	str	fp, [sp, #-8]!
    6974:	str	lr, [sp, #4]
    6978:	add	fp, sp, #4
    697c:	sub	sp, sp, #8
    6980:	str	r0, [fp, #-8]
    6984:	str	r1, [fp, #-12]
    6988:	ldr	r3, [fp, #-8]
    698c:	cmp	r3, #0
    6990:	bne	69b8 <coda_type_get_name+0x48>
    6994:	movw	r3, #3012	; 0xbc4
    6998:	movw	r2, #0
    699c:	movt	r2, #0
    69a0:	movw	r1, #0
    69a4:	movt	r1, #0
    69a8:	mvn	r0, #99	; 0x63
    69ac:	bl	0 <coda_set_error>
    69b0:	mvn	r3, #0
    69b4:	b	69fc <coda_type_get_name+0x8c>
    69b8:	ldr	r3, [fp, #-12]
    69bc:	cmp	r3, #0
    69c0:	bne	69e8 <coda_type_get_name+0x78>
    69c4:	movw	r3, #3017	; 0xbc9
    69c8:	movw	r2, #0
    69cc:	movt	r2, #0
    69d0:	movw	r1, #0
    69d4:	movt	r1, #0
    69d8:	mvn	r0, #99	; 0x63
    69dc:	bl	0 <coda_set_error>
    69e0:	mvn	r3, #0
    69e4:	b	69fc <coda_type_get_name+0x8c>
    69e8:	ldr	r3, [fp, #-8]
    69ec:	ldr	r2, [r3, #16]
    69f0:	ldr	r3, [fp, #-12]
    69f4:	str	r2, [r3]
    69f8:	mov	r3, #0
    69fc:	mov	r0, r3
    6a00:	sub	sp, fp, #4
    6a04:	ldr	fp, [sp]
    6a08:	add	sp, sp, #4
    6a0c:	pop	{pc}		; (ldr pc, [sp], #4)

00006a10 <coda_type_get_description>:
    6a10:	str	fp, [sp, #-8]!
    6a14:	str	lr, [sp, #4]
    6a18:	add	fp, sp, #4
    6a1c:	sub	sp, sp, #8
    6a20:	str	r0, [fp, #-8]
    6a24:	str	r1, [fp, #-12]
    6a28:	ldr	r3, [fp, #-8]
    6a2c:	cmp	r3, #0
    6a30:	bne	6a58 <coda_type_get_description+0x48>
    6a34:	movw	r3, #3038	; 0xbde
    6a38:	movw	r2, #0
    6a3c:	movt	r2, #0
    6a40:	movw	r1, #0
    6a44:	movt	r1, #0
    6a48:	mvn	r0, #99	; 0x63
    6a4c:	bl	0 <coda_set_error>
    6a50:	mvn	r3, #0
    6a54:	b	6a9c <coda_type_get_description+0x8c>
    6a58:	ldr	r3, [fp, #-12]
    6a5c:	cmp	r3, #0
    6a60:	bne	6a88 <coda_type_get_description+0x78>
    6a64:	movw	r3, #3043	; 0xbe3
    6a68:	movw	r2, #0
    6a6c:	movt	r2, #0
    6a70:	movw	r1, #0
    6a74:	movt	r1, #0
    6a78:	mvn	r0, #99	; 0x63
    6a7c:	bl	0 <coda_set_error>
    6a80:	mvn	r3, #0
    6a84:	b	6a9c <coda_type_get_description+0x8c>
    6a88:	ldr	r3, [fp, #-8]
    6a8c:	ldr	r2, [r3, #20]
    6a90:	ldr	r3, [fp, #-12]
    6a94:	str	r2, [r3]
    6a98:	mov	r3, #0
    6a9c:	mov	r0, r3
    6aa0:	sub	sp, fp, #4
    6aa4:	ldr	fp, [sp]
    6aa8:	add	sp, sp, #4
    6aac:	pop	{pc}		; (ldr pc, [sp], #4)

00006ab0 <coda_type_get_unit>:
    6ab0:	str	fp, [sp, #-8]!
    6ab4:	str	lr, [sp, #4]
    6ab8:	add	fp, sp, #4
    6abc:	sub	sp, sp, #16
    6ac0:	str	r0, [fp, #-16]
    6ac4:	str	r1, [fp, #-20]	; 0xffffffec
    6ac8:	ldr	r3, [fp, #-16]
    6acc:	cmp	r3, #0
    6ad0:	bne	6af8 <coda_type_get_unit+0x48>
    6ad4:	movw	r3, #3068	; 0xbfc
    6ad8:	movw	r2, #0
    6adc:	movt	r2, #0
    6ae0:	movw	r1, #0
    6ae4:	movt	r1, #0
    6ae8:	mvn	r0, #99	; 0x63
    6aec:	bl	0 <coda_set_error>
    6af0:	mvn	r3, #0
    6af4:	b	6c10 <coda_type_get_unit+0x160>
    6af8:	ldr	r3, [fp, #-20]	; 0xffffffec
    6afc:	cmp	r3, #0
    6b00:	bne	6b28 <coda_type_get_unit+0x78>
    6b04:	movw	r3, #3074	; 0xc02
    6b08:	movw	r2, #0
    6b0c:	movt	r2, #0
    6b10:	movw	r1, #0
    6b14:	movt	r1, #0
    6b18:	mvn	r0, #99	; 0x63
    6b1c:	bl	0 <coda_set_error>
    6b20:	mvn	r3, #0
    6b24:	b	6c10 <coda_type_get_unit+0x160>
    6b28:	ldr	r3, [fp, #-16]
    6b2c:	ldr	r3, [r3, #8]
    6b30:	sub	r3, r3, #1
    6b34:	cmp	r3, #5
    6b38:	ldrls	pc, [pc, r3, lsl #2]
    6b3c:	b	6bfc <coda_type_get_unit+0x14c>
    6b40:	.word	0x00006b58
    6b44:	.word	0x00006b94
    6b48:	.word	0x00006b94
    6b4c:	.word	0x00006bfc
    6b50:	.word	0x00006bfc
    6b54:	.word	0x00006be8
    6b58:	sub	r3, fp, #8
    6b5c:	mov	r1, r3
    6b60:	ldr	r0, [fp, #-16]
    6b64:	bl	7db4 <coda_type_get_array_base_type>
    6b68:	mov	r3, r0
    6b6c:	cmp	r3, #0
    6b70:	beq	6b7c <coda_type_get_unit+0xcc>
    6b74:	mvn	r3, #0
    6b78:	b	6c10 <coda_type_get_unit+0x160>
    6b7c:	ldr	r3, [fp, #-8]
    6b80:	ldr	r1, [fp, #-20]	; 0xffffffec
    6b84:	mov	r0, r3
    6b88:	bl	6ab0 <coda_type_get_unit>
    6b8c:	mov	r3, r0
    6b90:	b	6c10 <coda_type_get_unit+0x160>
    6b94:	ldr	r3, [pc, #136]	; 6c24 <coda_type_get_unit+0x174>
    6b98:	ldr	r3, [pc, r3]
    6b9c:	mrc	15, 0, r2, cr13, cr0, {3}
    6ba0:	ldr	r3, [r2, r3]
    6ba4:	cmp	r3, #0
    6ba8:	beq	6bd4 <coda_type_get_unit+0x124>
    6bac:	ldr	r3, [fp, #-16]
    6bb0:	ldr	r3, [r3, #48]	; 0x30
    6bb4:	cmp	r3, #0
    6bb8:	beq	6bd4 <coda_type_get_unit+0x124>
    6bbc:	ldr	r3, [fp, #-16]
    6bc0:	ldr	r3, [r3, #48]	; 0x30
    6bc4:	ldr	r2, [r3, #32]
    6bc8:	ldr	r3, [fp, #-20]	; 0xffffffec
    6bcc:	str	r2, [r3]
    6bd0:	b	6c0c <coda_type_get_unit+0x15c>
    6bd4:	ldr	r3, [fp, #-16]
    6bd8:	ldr	r2, [r3, #40]	; 0x28
    6bdc:	ldr	r3, [fp, #-20]	; 0xffffffec
    6be0:	str	r2, [r3]
    6be4:	b	6c0c <coda_type_get_unit+0x15c>
    6be8:	ldr	r3, [fp, #-16]
    6bec:	ldr	r2, [r3, #48]	; 0x30
    6bf0:	ldr	r3, [fp, #-20]	; 0xffffffec
    6bf4:	str	r2, [r3]
    6bf8:	b	6c0c <coda_type_get_unit+0x15c>
    6bfc:	ldr	r3, [fp, #-20]	; 0xffffffec
    6c00:	mov	r2, #0
    6c04:	str	r2, [r3]
    6c08:	nop	{0}
    6c0c:	mov	r3, #0
    6c10:	mov	r0, r3
    6c14:	sub	sp, fp, #4
    6c18:	ldr	fp, [sp]
    6c1c:	add	sp, sp, #4
    6c20:	pop	{pc}		; (ldr pc, [sp], #4)
    6c24:	.word	0x00000084

00006c28 <coda_type_get_fixed_value>:
    6c28:	str	fp, [sp, #-8]!
    6c2c:	str	lr, [sp, #4]
    6c30:	add	fp, sp, #4
    6c34:	sub	sp, sp, #16
    6c38:	str	r0, [fp, #-8]
    6c3c:	str	r1, [fp, #-12]
    6c40:	str	r2, [fp, #-16]
    6c44:	ldr	r3, [fp, #-8]
    6c48:	cmp	r3, #0
    6c4c:	bne	6c74 <coda_type_get_fixed_value+0x4c>
    6c50:	movw	r3, #3133	; 0xc3d
    6c54:	movw	r2, #0
    6c58:	movt	r2, #0
    6c5c:	movw	r1, #0
    6c60:	movt	r1, #0
    6c64:	mvn	r0, #99	; 0x63
    6c68:	bl	0 <coda_set_error>
    6c6c:	mvn	r3, #0
    6c70:	b	6d80 <coda_type_get_fixed_value+0x158>
    6c74:	ldr	r3, [fp, #-12]
    6c78:	cmp	r3, #0
    6c7c:	bne	6ca4 <coda_type_get_fixed_value+0x7c>
    6c80:	movw	r3, #3138	; 0xc42
    6c84:	movw	r2, #0
    6c88:	movt	r2, #0
    6c8c:	movw	r1, #0
    6c90:	movt	r1, #0
    6c94:	mvn	r0, #99	; 0x63
    6c98:	bl	0 <coda_set_error>
    6c9c:	mvn	r3, #0
    6ca0:	b	6d80 <coda_type_get_fixed_value+0x158>
    6ca4:	ldr	r3, [fp, #-8]
    6ca8:	ldr	r3, [r3, #8]
    6cac:	cmp	r3, #4
    6cb0:	beq	6cc0 <coda_type_get_fixed_value+0x98>
    6cb4:	cmp	r3, #5
    6cb8:	beq	6d18 <coda_type_get_fixed_value+0xf0>
    6cbc:	b	6d60 <coda_type_get_fixed_value+0x138>
    6cc0:	ldr	r3, [fp, #-8]
    6cc4:	ldr	r2, [r3, #40]	; 0x28
    6cc8:	ldr	r3, [fp, #-12]
    6ccc:	str	r2, [r3]
    6cd0:	ldr	r3, [fp, #-16]
    6cd4:	cmp	r3, #0
    6cd8:	beq	6d70 <coda_type_get_fixed_value+0x148>
    6cdc:	ldr	r3, [fp, #-12]
    6ce0:	ldr	r3, [r3]
    6ce4:	cmp	r3, #0
    6ce8:	beq	6d08 <coda_type_get_fixed_value+0xe0>
    6cec:	ldr	r3, [fp, #-12]
    6cf0:	ldr	r3, [r3]
    6cf4:	mov	r0, r3
    6cf8:	bl	0 <strlen>
    6cfc:	mov	r3, r0
    6d00:	mov	r2, r3
    6d04:	b	6d0c <coda_type_get_fixed_value+0xe4>
    6d08:	mov	r2, #0
    6d0c:	ldr	r3, [fp, #-16]
    6d10:	str	r2, [r3]
    6d14:	b	6d70 <coda_type_get_fixed_value+0x148>
    6d18:	ldr	r3, [fp, #-8]
    6d1c:	ldr	r2, [r3, #44]	; 0x2c
    6d20:	ldr	r3, [fp, #-12]
    6d24:	str	r2, [r3]
    6d28:	ldr	r3, [fp, #-16]
    6d2c:	cmp	r3, #0
    6d30:	beq	6d78 <coda_type_get_fixed_value+0x150>
    6d34:	ldr	r3, [fp, #-12]
    6d38:	ldr	r3, [r3]
    6d3c:	cmp	r3, #0
    6d40:	beq	6d50 <coda_type_get_fixed_value+0x128>
    6d44:	ldr	r3, [fp, #-8]
    6d48:	ldr	r3, [r3, #40]	; 0x28
    6d4c:	b	6d54 <coda_type_get_fixed_value+0x12c>
    6d50:	mov	r3, #0
    6d54:	ldr	r2, [fp, #-16]
    6d58:	str	r3, [r2]
    6d5c:	b	6d78 <coda_type_get_fixed_value+0x150>
    6d60:	ldr	r3, [fp, #-12]
    6d64:	mov	r2, #0
    6d68:	str	r2, [r3]
    6d6c:	b	6d7c <coda_type_get_fixed_value+0x154>
    6d70:	nop	{0}
    6d74:	b	6d7c <coda_type_get_fixed_value+0x154>
    6d78:	nop	{0}
    6d7c:	mov	r3, #0
    6d80:	mov	r0, r3
    6d84:	sub	sp, fp, #4
    6d88:	ldr	fp, [sp]
    6d8c:	add	sp, sp, #4
    6d90:	pop	{pc}		; (ldr pc, [sp], #4)

00006d94 <coda_type_get_attributes>:
    6d94:	str	fp, [sp, #-8]!
    6d98:	str	lr, [sp, #4]
    6d9c:	add	fp, sp, #4
    6da0:	sub	sp, sp, #8
    6da4:	str	r0, [fp, #-8]
    6da8:	str	r1, [fp, #-12]
    6dac:	ldr	r3, [fp, #-8]
    6db0:	cmp	r3, #0
    6db4:	bne	6ddc <coda_type_get_attributes+0x48>
    6db8:	movw	r3, #3178	; 0xc6a
    6dbc:	movw	r2, #0
    6dc0:	movt	r2, #0
    6dc4:	movw	r1, #0
    6dc8:	movt	r1, #0
    6dcc:	mvn	r0, #99	; 0x63
    6dd0:	bl	0 <coda_set_error>
    6dd4:	mvn	r3, #0
    6dd8:	b	6e50 <coda_type_get_attributes+0xbc>
    6ddc:	ldr	r3, [fp, #-12]
    6de0:	cmp	r3, #0
    6de4:	bne	6e0c <coda_type_get_attributes+0x78>
    6de8:	movw	r3, #3183	; 0xc6f
    6dec:	movw	r2, #0
    6df0:	movt	r2, #0
    6df4:	movw	r1, #0
    6df8:	movt	r1, #0
    6dfc:	mvn	r0, #99	; 0x63
    6e00:	bl	0 <coda_set_error>
    6e04:	mvn	r3, #0
    6e08:	b	6e50 <coda_type_get_attributes+0xbc>
    6e0c:	ldr	r3, [fp, #-8]
    6e10:	ldr	r3, [r3, #36]	; 0x24
    6e14:	cmp	r3, #0
    6e18:	bne	6e3c <coda_type_get_attributes+0xa8>
    6e1c:	ldr	r3, [fp, #-8]
    6e20:	ldr	r3, [r3]
    6e24:	mov	r0, r3
    6e28:	bl	2760 <coda_type_empty_record>
    6e2c:	mov	r2, r0
    6e30:	ldr	r3, [fp, #-12]
    6e34:	str	r2, [r3]
    6e38:	b	6e4c <coda_type_get_attributes+0xb8>
    6e3c:	ldr	r3, [fp, #-8]
    6e40:	ldr	r2, [r3, #36]	; 0x24
    6e44:	ldr	r3, [fp, #-12]
    6e48:	str	r2, [r3]
    6e4c:	mov	r3, #0
    6e50:	mov	r0, r3
    6e54:	sub	sp, fp, #4
    6e58:	ldr	fp, [sp]
    6e5c:	add	sp, sp, #4
    6e60:	pop	{pc}		; (ldr pc, [sp], #4)

00006e64 <coda_type_get_num_record_fields>:
    6e64:	str	fp, [sp, #-8]!
    6e68:	str	lr, [sp, #4]
    6e6c:	add	fp, sp, #4
    6e70:	sub	sp, sp, #8
    6e74:	str	r0, [fp, #-8]
    6e78:	str	r1, [fp, #-12]
    6e7c:	ldr	r3, [fp, #-8]
    6e80:	cmp	r3, #0
    6e84:	bne	6eac <coda_type_get_num_record_fields+0x48>
    6e88:	movw	r3, #3209	; 0xc89
    6e8c:	movw	r2, #0
    6e90:	movt	r2, #0
    6e94:	movw	r1, #0
    6e98:	movt	r1, #0
    6e9c:	mvn	r0, #99	; 0x63
    6ea0:	bl	0 <coda_set_error>
    6ea4:	mvn	r3, #0
    6ea8:	b	6f30 <coda_type_get_num_record_fields+0xcc>
    6eac:	ldr	r3, [fp, #-8]
    6eb0:	ldr	r3, [r3, #8]
    6eb4:	cmp	r3, #0
    6eb8:	beq	6eec <coda_type_get_num_record_fields+0x88>
    6ebc:	ldr	r3, [fp, #-8]
    6ec0:	ldr	r3, [r3, #8]
    6ec4:	mov	r0, r3
    6ec8:	bl	627c <coda_type_get_class_name>
    6ecc:	mov	r3, r0
    6ed0:	mov	r2, r3
    6ed4:	movw	r1, #0
    6ed8:	movt	r1, #0
    6edc:	mvn	r0, #104	; 0x68
    6ee0:	bl	0 <coda_set_error>
    6ee4:	mvn	r3, #0
    6ee8:	b	6f30 <coda_type_get_num_record_fields+0xcc>
    6eec:	ldr	r3, [fp, #-12]
    6ef0:	cmp	r3, #0
    6ef4:	bne	6f1c <coda_type_get_num_record_fields+0xb8>
    6ef8:	movw	r3, #3220	; 0xc94
    6efc:	movw	r2, #0
    6f00:	movt	r2, #0
    6f04:	movw	r1, #0
    6f08:	movt	r1, #0
    6f0c:	mvn	r0, #99	; 0x63
    6f10:	bl	0 <coda_set_error>
    6f14:	mvn	r3, #0
    6f18:	b	6f30 <coda_type_get_num_record_fields+0xcc>
    6f1c:	ldr	r3, [fp, #-8]
    6f20:	ldr	r2, [r3, #48]	; 0x30
    6f24:	ldr	r3, [fp, #-12]
    6f28:	str	r2, [r3]
    6f2c:	mov	r3, #0
    6f30:	mov	r0, r3
    6f34:	sub	sp, fp, #4
    6f38:	ldr	fp, [sp]
    6f3c:	add	sp, sp, #4
    6f40:	pop	{pc}		; (ldr pc, [sp], #4)

00006f44 <coda_type_get_record_field_index_from_name>:
    6f44:	str	fp, [sp, #-8]!
    6f48:	str	lr, [sp, #4]
    6f4c:	add	fp, sp, #4
    6f50:	sub	sp, sp, #24
    6f54:	str	r0, [fp, #-16]
    6f58:	str	r1, [fp, #-20]	; 0xffffffec
    6f5c:	str	r2, [fp, #-24]	; 0xffffffe8
    6f60:	ldr	r3, [fp, #-16]
    6f64:	cmp	r3, #0
    6f68:	bne	6f90 <coda_type_get_record_field_index_from_name+0x4c>
    6f6c:	movw	r3, #3244	; 0xcac
    6f70:	movw	r2, #0
    6f74:	movt	r2, #0
    6f78:	movw	r1, #0
    6f7c:	movt	r1, #0
    6f80:	mvn	r0, #99	; 0x63
    6f84:	bl	0 <coda_set_error>
    6f88:	mvn	r3, #0
    6f8c:	b	7080 <coda_type_get_record_field_index_from_name+0x13c>
    6f90:	ldr	r3, [fp, #-16]
    6f94:	ldr	r3, [r3, #8]
    6f98:	cmp	r3, #0
    6f9c:	beq	6fd0 <coda_type_get_record_field_index_from_name+0x8c>
    6fa0:	ldr	r3, [fp, #-16]
    6fa4:	ldr	r3, [r3, #8]
    6fa8:	mov	r0, r3
    6fac:	bl	627c <coda_type_get_class_name>
    6fb0:	mov	r3, r0
    6fb4:	mov	r2, r3
    6fb8:	movw	r1, #0
    6fbc:	movt	r1, #0
    6fc0:	mvn	r0, #104	; 0x68
    6fc4:	bl	0 <coda_set_error>
    6fc8:	mvn	r3, #0
    6fcc:	b	7080 <coda_type_get_record_field_index_from_name+0x13c>
    6fd0:	ldr	r3, [fp, #-20]	; 0xffffffec
    6fd4:	cmp	r3, #0
    6fd8:	bne	7000 <coda_type_get_record_field_index_from_name+0xbc>
    6fdc:	movw	r3, #3255	; 0xcb7
    6fe0:	movw	r2, #0
    6fe4:	movt	r2, #0
    6fe8:	movw	r1, #0
    6fec:	movt	r1, #0
    6ff0:	mvn	r0, #99	; 0x63
    6ff4:	bl	0 <coda_set_error>
    6ff8:	mvn	r3, #0
    6ffc:	b	7080 <coda_type_get_record_field_index_from_name+0x13c>
    7000:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7004:	cmp	r3, #0
    7008:	bne	7030 <coda_type_get_record_field_index_from_name+0xec>
    700c:	movw	r3, #3260	; 0xcbc
    7010:	movw	r2, #0
    7014:	movt	r2, #0
    7018:	movw	r1, #0
    701c:	movt	r1, #0
    7020:	mvn	r0, #99	; 0x63
    7024:	bl	0 <coda_set_error>
    7028:	mvn	r3, #0
    702c:	b	7080 <coda_type_get_record_field_index_from_name+0x13c>
    7030:	ldr	r3, [fp, #-16]
    7034:	ldr	r3, [r3, #40]	; 0x28
    7038:	ldr	r1, [fp, #-20]	; 0xffffffec
    703c:	mov	r0, r3
    7040:	bl	0 <coda_hashtable_get_index_from_name>
    7044:	str	r0, [fp, #-8]
    7048:	ldr	r3, [fp, #-8]
    704c:	cmp	r3, #0
    7050:	bge	7070 <coda_type_get_record_field_index_from_name+0x12c>
    7054:	ldr	r2, [fp, #-20]	; 0xffffffec
    7058:	movw	r1, #0
    705c:	movt	r1, #0
    7060:	mvn	r0, #101	; 0x65
    7064:	bl	0 <coda_set_error>
    7068:	mvn	r3, #0
    706c:	b	7080 <coda_type_get_record_field_index_from_name+0x13c>
    7070:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7074:	ldr	r2, [fp, #-8]
    7078:	str	r2, [r3]
    707c:	mov	r3, #0
    7080:	mov	r0, r3
    7084:	sub	sp, fp, #4
    7088:	ldr	fp, [sp]
    708c:	add	sp, sp, #4
    7090:	pop	{pc}		; (ldr pc, [sp], #4)

00007094 <coda_type_get_record_field_index_from_name_n>:
    7094:	str	fp, [sp, #-8]!
    7098:	str	lr, [sp, #4]
    709c:	add	fp, sp, #4
    70a0:	sub	sp, sp, #24
    70a4:	str	r0, [fp, #-16]
    70a8:	str	r1, [fp, #-20]	; 0xffffffec
    70ac:	str	r2, [fp, #-24]	; 0xffffffe8
    70b0:	str	r3, [fp, #-28]	; 0xffffffe4
    70b4:	ldr	r3, [fp, #-16]
    70b8:	cmp	r3, #0
    70bc:	bne	70e4 <coda_type_get_record_field_index_from_name_n+0x50>
    70c0:	movw	r3, #3291	; 0xcdb
    70c4:	movw	r2, #0
    70c8:	movt	r2, #0
    70cc:	movw	r1, #0
    70d0:	movt	r1, #0
    70d4:	mvn	r0, #99	; 0x63
    70d8:	bl	0 <coda_set_error>
    70dc:	mvn	r3, #0
    70e0:	b	71dc <coda_type_get_record_field_index_from_name_n+0x148>
    70e4:	ldr	r3, [fp, #-16]
    70e8:	ldr	r3, [r3, #8]
    70ec:	cmp	r3, #0
    70f0:	beq	7124 <coda_type_get_record_field_index_from_name_n+0x90>
    70f4:	ldr	r3, [fp, #-16]
    70f8:	ldr	r3, [r3, #8]
    70fc:	mov	r0, r3
    7100:	bl	627c <coda_type_get_class_name>
    7104:	mov	r3, r0
    7108:	mov	r2, r3
    710c:	movw	r1, #0
    7110:	movt	r1, #0
    7114:	mvn	r0, #104	; 0x68
    7118:	bl	0 <coda_set_error>
    711c:	mvn	r3, #0
    7120:	b	71dc <coda_type_get_record_field_index_from_name_n+0x148>
    7124:	ldr	r3, [fp, #-20]	; 0xffffffec
    7128:	cmp	r3, #0
    712c:	bne	7154 <coda_type_get_record_field_index_from_name_n+0xc0>
    7130:	movw	r3, #3302	; 0xce6
    7134:	movw	r2, #0
    7138:	movt	r2, #0
    713c:	movw	r1, #0
    7140:	movt	r1, #0
    7144:	mvn	r0, #99	; 0x63
    7148:	bl	0 <coda_set_error>
    714c:	mvn	r3, #0
    7150:	b	71dc <coda_type_get_record_field_index_from_name_n+0x148>
    7154:	ldr	r3, [fp, #-28]	; 0xffffffe4
    7158:	cmp	r3, #0
    715c:	bne	7184 <coda_type_get_record_field_index_from_name_n+0xf0>
    7160:	movw	r3, #3307	; 0xceb
    7164:	movw	r2, #0
    7168:	movt	r2, #0
    716c:	movw	r1, #0
    7170:	movt	r1, #0
    7174:	mvn	r0, #99	; 0x63
    7178:	bl	0 <coda_set_error>
    717c:	mvn	r3, #0
    7180:	b	71dc <coda_type_get_record_field_index_from_name_n+0x148>
    7184:	ldr	r3, [fp, #-16]
    7188:	ldr	r3, [r3, #40]	; 0x28
    718c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7190:	ldr	r1, [fp, #-20]	; 0xffffffec
    7194:	mov	r0, r3
    7198:	bl	0 <coda_hashtable_get_index_from_name_n>
    719c:	str	r0, [fp, #-8]
    71a0:	ldr	r3, [fp, #-8]
    71a4:	cmp	r3, #0
    71a8:	bge	71cc <coda_type_get_record_field_index_from_name_n+0x138>
    71ac:	ldr	r3, [fp, #-20]	; 0xffffffec
    71b0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    71b4:	movw	r1, #0
    71b8:	movt	r1, #0
    71bc:	mvn	r0, #101	; 0x65
    71c0:	bl	0 <coda_set_error>
    71c4:	mvn	r3, #0
    71c8:	b	71dc <coda_type_get_record_field_index_from_name_n+0x148>
    71cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    71d0:	ldr	r2, [fp, #-8]
    71d4:	str	r2, [r3]
    71d8:	mov	r3, #0
    71dc:	mov	r0, r3
    71e0:	sub	sp, fp, #4
    71e4:	ldr	fp, [sp]
    71e8:	add	sp, sp, #4
    71ec:	pop	{pc}		; (ldr pc, [sp], #4)

000071f0 <coda_type_get_record_field_index_from_real_name>:
    71f0:	str	fp, [sp, #-8]!
    71f4:	str	lr, [sp, #4]
    71f8:	add	fp, sp, #4
    71fc:	sub	sp, sp, #24
    7200:	str	r0, [fp, #-16]
    7204:	str	r1, [fp, #-20]	; 0xffffffec
    7208:	str	r2, [fp, #-24]	; 0xffffffe8
    720c:	ldr	r3, [fp, #-16]
    7210:	cmp	r3, #0
    7214:	bne	723c <coda_type_get_record_field_index_from_real_name+0x4c>
    7218:	movw	r3, #3338	; 0xd0a
    721c:	movw	r2, #0
    7220:	movt	r2, #0
    7224:	movw	r1, #0
    7228:	movt	r1, #0
    722c:	mvn	r0, #99	; 0x63
    7230:	bl	0 <coda_set_error>
    7234:	mvn	r3, #0
    7238:	b	732c <coda_type_get_record_field_index_from_real_name+0x13c>
    723c:	ldr	r3, [fp, #-16]
    7240:	ldr	r3, [r3, #8]
    7244:	cmp	r3, #0
    7248:	beq	727c <coda_type_get_record_field_index_from_real_name+0x8c>
    724c:	ldr	r3, [fp, #-16]
    7250:	ldr	r3, [r3, #8]
    7254:	mov	r0, r3
    7258:	bl	627c <coda_type_get_class_name>
    725c:	mov	r3, r0
    7260:	mov	r2, r3
    7264:	movw	r1, #0
    7268:	movt	r1, #0
    726c:	mvn	r0, #104	; 0x68
    7270:	bl	0 <coda_set_error>
    7274:	mvn	r3, #0
    7278:	b	732c <coda_type_get_record_field_index_from_real_name+0x13c>
    727c:	ldr	r3, [fp, #-20]	; 0xffffffec
    7280:	cmp	r3, #0
    7284:	bne	72ac <coda_type_get_record_field_index_from_real_name+0xbc>
    7288:	movw	r3, #3349	; 0xd15
    728c:	movw	r2, #0
    7290:	movt	r2, #0
    7294:	movw	r1, #0
    7298:	movt	r1, #0
    729c:	mvn	r0, #99	; 0x63
    72a0:	bl	0 <coda_set_error>
    72a4:	mvn	r3, #0
    72a8:	b	732c <coda_type_get_record_field_index_from_real_name+0x13c>
    72ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    72b0:	cmp	r3, #0
    72b4:	bne	72dc <coda_type_get_record_field_index_from_real_name+0xec>
    72b8:	movw	r3, #3354	; 0xd1a
    72bc:	movw	r2, #0
    72c0:	movt	r2, #0
    72c4:	movw	r1, #0
    72c8:	movt	r1, #0
    72cc:	mvn	r0, #99	; 0x63
    72d0:	bl	0 <coda_set_error>
    72d4:	mvn	r3, #0
    72d8:	b	732c <coda_type_get_record_field_index_from_real_name+0x13c>
    72dc:	ldr	r3, [fp, #-16]
    72e0:	ldr	r3, [r3, #44]	; 0x2c
    72e4:	ldr	r1, [fp, #-20]	; 0xffffffec
    72e8:	mov	r0, r3
    72ec:	bl	0 <coda_hashtable_get_index_from_name>
    72f0:	str	r0, [fp, #-8]
    72f4:	ldr	r3, [fp, #-8]
    72f8:	cmp	r3, #0
    72fc:	bge	731c <coda_type_get_record_field_index_from_real_name+0x12c>
    7300:	ldr	r2, [fp, #-20]	; 0xffffffec
    7304:	movw	r1, #0
    7308:	movt	r1, #0
    730c:	mvn	r0, #101	; 0x65
    7310:	bl	0 <coda_set_error>
    7314:	mvn	r3, #0
    7318:	b	732c <coda_type_get_record_field_index_from_real_name+0x13c>
    731c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7320:	ldr	r2, [fp, #-8]
    7324:	str	r2, [r3]
    7328:	mov	r3, #0
    732c:	mov	r0, r3
    7330:	sub	sp, fp, #4
    7334:	ldr	fp, [sp]
    7338:	add	sp, sp, #4
    733c:	pop	{pc}		; (ldr pc, [sp], #4)

00007340 <coda_type_get_record_field_type>:
    7340:	str	fp, [sp, #-8]!
    7344:	str	lr, [sp, #4]
    7348:	add	fp, sp, #4
    734c:	sub	sp, sp, #24
    7350:	str	r0, [fp, #-8]
    7354:	str	r1, [fp, #-12]
    7358:	str	r2, [fp, #-16]
    735c:	ldr	r3, [fp, #-8]
    7360:	cmp	r3, #0
    7364:	bne	738c <coda_type_get_record_field_type+0x4c>
    7368:	movw	r3, #3381	; 0xd35
    736c:	movw	r2, #0
    7370:	movt	r2, #0
    7374:	movw	r1, #0
    7378:	movt	r1, #0
    737c:	mvn	r0, #99	; 0x63
    7380:	bl	0 <coda_set_error>
    7384:	mvn	r3, #0
    7388:	b	7480 <coda_type_get_record_field_type+0x140>
    738c:	ldr	r3, [fp, #-8]
    7390:	ldr	r3, [r3, #8]
    7394:	cmp	r3, #0
    7398:	beq	73cc <coda_type_get_record_field_type+0x8c>
    739c:	ldr	r3, [fp, #-8]
    73a0:	ldr	r3, [r3, #8]
    73a4:	mov	r0, r3
    73a8:	bl	627c <coda_type_get_class_name>
    73ac:	mov	r3, r0
    73b0:	mov	r2, r3
    73b4:	movw	r1, #0
    73b8:	movt	r1, #0
    73bc:	mvn	r0, #104	; 0x68
    73c0:	bl	0 <coda_set_error>
    73c4:	mvn	r3, #0
    73c8:	b	7480 <coda_type_get_record_field_type+0x140>
    73cc:	ldr	r3, [fp, #-16]
    73d0:	cmp	r3, #0
    73d4:	bne	73fc <coda_type_get_record_field_type+0xbc>
    73d8:	mov	r3, #3392	; 0xd40
    73dc:	movw	r2, #0
    73e0:	movt	r2, #0
    73e4:	movw	r1, #0
    73e8:	movt	r1, #0
    73ec:	mvn	r0, #99	; 0x63
    73f0:	bl	0 <coda_set_error>
    73f4:	mvn	r3, #0
    73f8:	b	7480 <coda_type_get_record_field_type+0x140>
    73fc:	ldr	r3, [fp, #-12]
    7400:	cmp	r3, #0
    7404:	blt	741c <coda_type_get_record_field_type+0xdc>
    7408:	ldr	r3, [fp, #-8]
    740c:	ldr	r3, [r3, #48]	; 0x30
    7410:	ldr	r2, [fp, #-12]
    7414:	cmp	r2, r3
    7418:	blt	7458 <coda_type_get_record_field_type+0x118>
    741c:	ldr	r3, [fp, #-8]
    7420:	ldr	r2, [r3, #48]	; 0x30
    7424:	movw	r3, #3399	; 0xd47
    7428:	str	r3, [sp, #4]
    742c:	movw	r3, #0
    7430:	movt	r3, #0
    7434:	str	r3, [sp]
    7438:	mov	r3, r2
    743c:	ldr	r2, [fp, #-12]
    7440:	movw	r1, #0
    7444:	movt	r1, #0
    7448:	mvn	r0, #100	; 0x64
    744c:	bl	0 <coda_set_error>
    7450:	mvn	r3, #0
    7454:	b	7480 <coda_type_get_record_field_type+0x140>
    7458:	ldr	r3, [fp, #-8]
    745c:	ldr	r2, [r3, #52]	; 0x34
    7460:	ldr	r3, [fp, #-12]
    7464:	lsl	r3, r3, #2
    7468:	add	r3, r2, r3
    746c:	ldr	r3, [r3]
    7470:	ldr	r2, [r3, #8]
    7474:	ldr	r3, [fp, #-16]
    7478:	str	r2, [r3]
    747c:	mov	r3, #0
    7480:	mov	r0, r3
    7484:	sub	sp, fp, #4
    7488:	ldr	fp, [sp]
    748c:	add	sp, sp, #4
    7490:	pop	{pc}		; (ldr pc, [sp], #4)

00007494 <coda_type_get_record_field_name>:
    7494:	str	fp, [sp, #-8]!
    7498:	str	lr, [sp, #4]
    749c:	add	fp, sp, #4
    74a0:	sub	sp, sp, #24
    74a4:	str	r0, [fp, #-8]
    74a8:	str	r1, [fp, #-12]
    74ac:	str	r2, [fp, #-16]
    74b0:	ldr	r3, [fp, #-8]
    74b4:	cmp	r3, #0
    74b8:	bne	74e0 <coda_type_get_record_field_name+0x4c>
    74bc:	movw	r3, #3420	; 0xd5c
    74c0:	movw	r2, #0
    74c4:	movt	r2, #0
    74c8:	movw	r1, #0
    74cc:	movt	r1, #0
    74d0:	mvn	r0, #99	; 0x63
    74d4:	bl	0 <coda_set_error>
    74d8:	mvn	r3, #0
    74dc:	b	75d4 <coda_type_get_record_field_name+0x140>
    74e0:	ldr	r3, [fp, #-8]
    74e4:	ldr	r3, [r3, #8]
    74e8:	cmp	r3, #0
    74ec:	beq	7520 <coda_type_get_record_field_name+0x8c>
    74f0:	ldr	r3, [fp, #-8]
    74f4:	ldr	r3, [r3, #8]
    74f8:	mov	r0, r3
    74fc:	bl	627c <coda_type_get_class_name>
    7500:	mov	r3, r0
    7504:	mov	r2, r3
    7508:	movw	r1, #0
    750c:	movt	r1, #0
    7510:	mvn	r0, #104	; 0x68
    7514:	bl	0 <coda_set_error>
    7518:	mvn	r3, #0
    751c:	b	75d4 <coda_type_get_record_field_name+0x140>
    7520:	ldr	r3, [fp, #-16]
    7524:	cmp	r3, #0
    7528:	bne	7550 <coda_type_get_record_field_name+0xbc>
    752c:	movw	r3, #3431	; 0xd67
    7530:	movw	r2, #0
    7534:	movt	r2, #0
    7538:	movw	r1, #0
    753c:	movt	r1, #0
    7540:	mvn	r0, #99	; 0x63
    7544:	bl	0 <coda_set_error>
    7548:	mvn	r3, #0
    754c:	b	75d4 <coda_type_get_record_field_name+0x140>
    7550:	ldr	r3, [fp, #-12]
    7554:	cmp	r3, #0
    7558:	blt	7570 <coda_type_get_record_field_name+0xdc>
    755c:	ldr	r3, [fp, #-8]
    7560:	ldr	r3, [r3, #48]	; 0x30
    7564:	ldr	r2, [fp, #-12]
    7568:	cmp	r2, r3
    756c:	blt	75ac <coda_type_get_record_field_name+0x118>
    7570:	ldr	r3, [fp, #-8]
    7574:	ldr	r2, [r3, #48]	; 0x30
    7578:	movw	r3, #3438	; 0xd6e
    757c:	str	r3, [sp, #4]
    7580:	movw	r3, #0
    7584:	movt	r3, #0
    7588:	str	r3, [sp]
    758c:	mov	r3, r2
    7590:	ldr	r2, [fp, #-12]
    7594:	movw	r1, #0
    7598:	movt	r1, #0
    759c:	mvn	r0, #100	; 0x64
    75a0:	bl	0 <coda_set_error>
    75a4:	mvn	r3, #0
    75a8:	b	75d4 <coda_type_get_record_field_name+0x140>
    75ac:	ldr	r3, [fp, #-8]
    75b0:	ldr	r2, [r3, #52]	; 0x34
    75b4:	ldr	r3, [fp, #-12]
    75b8:	lsl	r3, r3, #2
    75bc:	add	r3, r2, r3
    75c0:	ldr	r3, [r3]
    75c4:	ldr	r2, [r3]
    75c8:	ldr	r3, [fp, #-16]
    75cc:	str	r2, [r3]
    75d0:	mov	r3, #0
    75d4:	mov	r0, r3
    75d8:	sub	sp, fp, #4
    75dc:	ldr	fp, [sp]
    75e0:	add	sp, sp, #4
    75e4:	pop	{pc}		; (ldr pc, [sp], #4)

000075e8 <coda_type_get_record_field_real_name>:
    75e8:	str	fp, [sp, #-8]!
    75ec:	str	lr, [sp, #4]
    75f0:	add	fp, sp, #4
    75f4:	sub	sp, sp, #24
    75f8:	str	r0, [fp, #-8]
    75fc:	str	r1, [fp, #-12]
    7600:	str	r2, [fp, #-16]
    7604:	ldr	r3, [fp, #-8]
    7608:	cmp	r3, #0
    760c:	bne	7634 <coda_type_get_record_field_real_name+0x4c>
    7610:	movw	r3, #3468	; 0xd8c
    7614:	movw	r2, #0
    7618:	movt	r2, #0
    761c:	movw	r1, #0
    7620:	movt	r1, #0
    7624:	mvn	r0, #99	; 0x63
    7628:	bl	0 <coda_set_error>
    762c:	mvn	r3, #0
    7630:	b	77b8 <coda_type_get_record_field_real_name+0x1d0>
    7634:	ldr	r3, [fp, #-8]
    7638:	ldr	r3, [r3, #8]
    763c:	cmp	r3, #0
    7640:	beq	7674 <coda_type_get_record_field_real_name+0x8c>
    7644:	ldr	r3, [fp, #-8]
    7648:	ldr	r3, [r3, #8]
    764c:	mov	r0, r3
    7650:	bl	627c <coda_type_get_class_name>
    7654:	mov	r3, r0
    7658:	mov	r2, r3
    765c:	movw	r1, #0
    7660:	movt	r1, #0
    7664:	mvn	r0, #104	; 0x68
    7668:	bl	0 <coda_set_error>
    766c:	mvn	r3, #0
    7670:	b	77b8 <coda_type_get_record_field_real_name+0x1d0>
    7674:	ldr	r3, [fp, #-16]
    7678:	cmp	r3, #0
    767c:	bne	76a4 <coda_type_get_record_field_real_name+0xbc>
    7680:	movw	r3, #3479	; 0xd97
    7684:	movw	r2, #0
    7688:	movt	r2, #0
    768c:	movw	r1, #0
    7690:	movt	r1, #0
    7694:	mvn	r0, #99	; 0x63
    7698:	bl	0 <coda_set_error>
    769c:	mvn	r3, #0
    76a0:	b	77b8 <coda_type_get_record_field_real_name+0x1d0>
    76a4:	ldr	r3, [fp, #-12]
    76a8:	cmp	r3, #0
    76ac:	blt	76c4 <coda_type_get_record_field_real_name+0xdc>
    76b0:	ldr	r3, [fp, #-8]
    76b4:	ldr	r3, [r3, #48]	; 0x30
    76b8:	ldr	r2, [fp, #-12]
    76bc:	cmp	r2, r3
    76c0:	blt	7700 <coda_type_get_record_field_real_name+0x118>
    76c4:	ldr	r3, [fp, #-8]
    76c8:	ldr	r2, [r3, #48]	; 0x30
    76cc:	movw	r3, #3486	; 0xd9e
    76d0:	str	r3, [sp, #4]
    76d4:	movw	r3, #0
    76d8:	movt	r3, #0
    76dc:	str	r3, [sp]
    76e0:	mov	r3, r2
    76e4:	ldr	r2, [fp, #-12]
    76e8:	movw	r1, #0
    76ec:	movt	r1, #0
    76f0:	mvn	r0, #100	; 0x64
    76f4:	bl	0 <coda_set_error>
    76f8:	mvn	r3, #0
    76fc:	b	77b8 <coda_type_get_record_field_real_name+0x1d0>
    7700:	ldr	r3, [fp, #-8]
    7704:	ldr	r2, [r3, #52]	; 0x34
    7708:	ldr	r3, [fp, #-12]
    770c:	lsl	r3, r3, #2
    7710:	add	r3, r2, r3
    7714:	ldr	r3, [r3]
    7718:	ldr	r3, [r3, #4]
    771c:	cmp	r3, #0
    7720:	beq	7790 <coda_type_get_record_field_real_name+0x1a8>
    7724:	ldr	r3, [fp, #-8]
    7728:	ldr	r3, [r3]
    772c:	cmp	r3, #2
    7730:	bne	7768 <coda_type_get_record_field_real_name+0x180>
    7734:	ldr	r3, [fp, #-8]
    7738:	ldr	r2, [r3, #52]	; 0x34
    773c:	ldr	r3, [fp, #-12]
    7740:	lsl	r3, r3, #2
    7744:	add	r3, r2, r3
    7748:	ldr	r3, [r3]
    774c:	ldr	r3, [r3, #4]
    7750:	mov	r0, r3
    7754:	bl	0 <coda_element_name_from_xml_name>
    7758:	mov	r2, r0
    775c:	ldr	r3, [fp, #-16]
    7760:	str	r2, [r3]
    7764:	b	77b4 <coda_type_get_record_field_real_name+0x1cc>
    7768:	ldr	r3, [fp, #-8]
    776c:	ldr	r2, [r3, #52]	; 0x34
    7770:	ldr	r3, [fp, #-12]
    7774:	lsl	r3, r3, #2
    7778:	add	r3, r2, r3
    777c:	ldr	r3, [r3]
    7780:	ldr	r2, [r3, #4]
    7784:	ldr	r3, [fp, #-16]
    7788:	str	r2, [r3]
    778c:	b	77b4 <coda_type_get_record_field_real_name+0x1cc>
    7790:	ldr	r3, [fp, #-8]
    7794:	ldr	r2, [r3, #52]	; 0x34
    7798:	ldr	r3, [fp, #-12]
    779c:	lsl	r3, r3, #2
    77a0:	add	r3, r2, r3
    77a4:	ldr	r3, [r3]
    77a8:	ldr	r2, [r3]
    77ac:	ldr	r3, [fp, #-16]
    77b0:	str	r2, [r3]
    77b4:	mov	r3, #0
    77b8:	mov	r0, r3
    77bc:	sub	sp, fp, #4
    77c0:	ldr	fp, [sp]
    77c4:	add	sp, sp, #4
    77c8:	pop	{pc}		; (ldr pc, [sp], #4)

000077cc <coda_type_get_record_field_hidden_status>:
    77cc:	str	fp, [sp, #-8]!
    77d0:	str	lr, [sp, #4]
    77d4:	add	fp, sp, #4
    77d8:	sub	sp, sp, #24
    77dc:	str	r0, [fp, #-8]
    77e0:	str	r1, [fp, #-12]
    77e4:	str	r2, [fp, #-16]
    77e8:	ldr	r3, [fp, #-8]
    77ec:	cmp	r3, #0
    77f0:	bne	7818 <coda_type_get_record_field_hidden_status+0x4c>
    77f4:	movw	r3, #3524	; 0xdc4
    77f8:	movw	r2, #0
    77fc:	movt	r2, #0
    7800:	movw	r1, #0
    7804:	movt	r1, #0
    7808:	mvn	r0, #99	; 0x63
    780c:	bl	0 <coda_set_error>
    7810:	mvn	r3, #0
    7814:	b	790c <coda_type_get_record_field_hidden_status+0x140>
    7818:	ldr	r3, [fp, #-8]
    781c:	ldr	r3, [r3, #8]
    7820:	cmp	r3, #0
    7824:	beq	7858 <coda_type_get_record_field_hidden_status+0x8c>
    7828:	ldr	r3, [fp, #-8]
    782c:	ldr	r3, [r3, #8]
    7830:	mov	r0, r3
    7834:	bl	627c <coda_type_get_class_name>
    7838:	mov	r3, r0
    783c:	mov	r2, r3
    7840:	movw	r1, #0
    7844:	movt	r1, #0
    7848:	mvn	r0, #104	; 0x68
    784c:	bl	0 <coda_set_error>
    7850:	mvn	r3, #0
    7854:	b	790c <coda_type_get_record_field_hidden_status+0x140>
    7858:	ldr	r3, [fp, #-16]
    785c:	cmp	r3, #0
    7860:	bne	7888 <coda_type_get_record_field_hidden_status+0xbc>
    7864:	movw	r3, #3535	; 0xdcf
    7868:	movw	r2, #0
    786c:	movt	r2, #0
    7870:	movw	r1, #0
    7874:	movt	r1, #0
    7878:	mvn	r0, #99	; 0x63
    787c:	bl	0 <coda_set_error>
    7880:	mvn	r3, #0
    7884:	b	790c <coda_type_get_record_field_hidden_status+0x140>
    7888:	ldr	r3, [fp, #-12]
    788c:	cmp	r3, #0
    7890:	blt	78a8 <coda_type_get_record_field_hidden_status+0xdc>
    7894:	ldr	r3, [fp, #-8]
    7898:	ldr	r3, [r3, #48]	; 0x30
    789c:	ldr	r2, [fp, #-12]
    78a0:	cmp	r2, r3
    78a4:	blt	78e4 <coda_type_get_record_field_hidden_status+0x118>
    78a8:	ldr	r3, [fp, #-8]
    78ac:	ldr	r2, [r3, #48]	; 0x30
    78b0:	movw	r3, #3542	; 0xdd6
    78b4:	str	r3, [sp, #4]
    78b8:	movw	r3, #0
    78bc:	movt	r3, #0
    78c0:	str	r3, [sp]
    78c4:	mov	r3, r2
    78c8:	ldr	r2, [fp, #-12]
    78cc:	movw	r1, #0
    78d0:	movt	r1, #0
    78d4:	mvn	r0, #100	; 0x64
    78d8:	bl	0 <coda_set_error>
    78dc:	mvn	r3, #0
    78e0:	b	790c <coda_type_get_record_field_hidden_status+0x140>
    78e4:	ldr	r3, [fp, #-8]
    78e8:	ldr	r2, [r3, #52]	; 0x34
    78ec:	ldr	r3, [fp, #-12]
    78f0:	lsl	r3, r3, #2
    78f4:	add	r3, r2, r3
    78f8:	ldr	r3, [r3]
    78fc:	ldr	r2, [r3, #12]
    7900:	ldr	r3, [fp, #-16]
    7904:	str	r2, [r3]
    7908:	mov	r3, #0
    790c:	mov	r0, r3
    7910:	sub	sp, fp, #4
    7914:	ldr	fp, [sp]
    7918:	add	sp, sp, #4
    791c:	pop	{pc}		; (ldr pc, [sp], #4)

00007920 <coda_type_get_record_field_available_status>:
    7920:	str	fp, [sp, #-8]!
    7924:	str	lr, [sp, #4]
    7928:	add	fp, sp, #4
    792c:	sub	sp, sp, #24
    7930:	str	r0, [fp, #-8]
    7934:	str	r1, [fp, #-12]
    7938:	str	r2, [fp, #-16]
    793c:	ldr	r3, [fp, #-8]
    7940:	cmp	r3, #0
    7944:	bne	796c <coda_type_get_record_field_available_status+0x4c>
    7948:	mov	r3, #3568	; 0xdf0
    794c:	movw	r2, #0
    7950:	movt	r2, #0
    7954:	movw	r1, #0
    7958:	movt	r1, #0
    795c:	mvn	r0, #99	; 0x63
    7960:	bl	0 <coda_set_error>
    7964:	mvn	r3, #0
    7968:	b	7a74 <coda_type_get_record_field_available_status+0x154>
    796c:	ldr	r3, [fp, #-8]
    7970:	ldr	r3, [r3, #8]
    7974:	cmp	r3, #0
    7978:	beq	79ac <coda_type_get_record_field_available_status+0x8c>
    797c:	ldr	r3, [fp, #-8]
    7980:	ldr	r3, [r3, #8]
    7984:	mov	r0, r3
    7988:	bl	627c <coda_type_get_class_name>
    798c:	mov	r3, r0
    7990:	mov	r2, r3
    7994:	movw	r1, #0
    7998:	movt	r1, #0
    799c:	mvn	r0, #104	; 0x68
    79a0:	bl	0 <coda_set_error>
    79a4:	mvn	r3, #0
    79a8:	b	7a74 <coda_type_get_record_field_available_status+0x154>
    79ac:	ldr	r3, [fp, #-16]
    79b0:	cmp	r3, #0
    79b4:	bne	79dc <coda_type_get_record_field_available_status+0xbc>
    79b8:	movw	r3, #3579	; 0xdfb
    79bc:	movw	r2, #0
    79c0:	movt	r2, #0
    79c4:	movw	r1, #0
    79c8:	movt	r1, #0
    79cc:	mvn	r0, #99	; 0x63
    79d0:	bl	0 <coda_set_error>
    79d4:	mvn	r3, #0
    79d8:	b	7a74 <coda_type_get_record_field_available_status+0x154>
    79dc:	ldr	r3, [fp, #-12]
    79e0:	cmp	r3, #0
    79e4:	blt	79fc <coda_type_get_record_field_available_status+0xdc>
    79e8:	ldr	r3, [fp, #-8]
    79ec:	ldr	r3, [r3, #48]	; 0x30
    79f0:	ldr	r2, [fp, #-12]
    79f4:	cmp	r2, r3
    79f8:	blt	7a38 <coda_type_get_record_field_available_status+0x118>
    79fc:	ldr	r3, [fp, #-8]
    7a00:	ldr	r2, [r3, #48]	; 0x30
    7a04:	movw	r3, #3586	; 0xe02
    7a08:	str	r3, [sp, #4]
    7a0c:	movw	r3, #0
    7a10:	movt	r3, #0
    7a14:	str	r3, [sp]
    7a18:	mov	r3, r2
    7a1c:	ldr	r2, [fp, #-12]
    7a20:	movw	r1, #0
    7a24:	movt	r1, #0
    7a28:	mvn	r0, #100	; 0x64
    7a2c:	bl	0 <coda_set_error>
    7a30:	mvn	r3, #0
    7a34:	b	7a74 <coda_type_get_record_field_available_status+0x154>
    7a38:	ldr	r3, [fp, #-8]
    7a3c:	ldr	r2, [r3, #52]	; 0x34
    7a40:	ldr	r3, [fp, #-12]
    7a44:	lsl	r3, r3, #2
    7a48:	add	r3, r2, r3
    7a4c:	ldr	r3, [r3]
    7a50:	ldrb	r3, [r3, #16]
    7a54:	cmp	r3, #0
    7a58:	beq	7a64 <coda_type_get_record_field_available_status+0x144>
    7a5c:	mvn	r2, #0
    7a60:	b	7a68 <coda_type_get_record_field_available_status+0x148>
    7a64:	mov	r2, #1
    7a68:	ldr	r3, [fp, #-16]
    7a6c:	str	r2, [r3]
    7a70:	mov	r3, #0
    7a74:	mov	r0, r3
    7a78:	sub	sp, fp, #4
    7a7c:	ldr	fp, [sp]
    7a80:	add	sp, sp, #4
    7a84:	pop	{pc}		; (ldr pc, [sp], #4)

00007a88 <coda_type_get_record_union_status>:
    7a88:	str	fp, [sp, #-8]!
    7a8c:	str	lr, [sp, #4]
    7a90:	add	fp, sp, #4
    7a94:	sub	sp, sp, #8
    7a98:	str	r0, [fp, #-8]
    7a9c:	str	r1, [fp, #-12]
    7aa0:	ldr	r3, [fp, #-8]
    7aa4:	cmp	r3, #0
    7aa8:	bne	7ad0 <coda_type_get_record_union_status+0x48>
    7aac:	movw	r3, #3607	; 0xe17
    7ab0:	movw	r2, #0
    7ab4:	movt	r2, #0
    7ab8:	movw	r1, #0
    7abc:	movt	r1, #0
    7ac0:	mvn	r0, #99	; 0x63
    7ac4:	bl	0 <coda_set_error>
    7ac8:	mvn	r3, #0
    7acc:	b	7b54 <coda_type_get_record_union_status+0xcc>
    7ad0:	ldr	r3, [fp, #-8]
    7ad4:	ldr	r3, [r3, #8]
    7ad8:	cmp	r3, #0
    7adc:	beq	7b10 <coda_type_get_record_union_status+0x88>
    7ae0:	ldr	r3, [fp, #-8]
    7ae4:	ldr	r3, [r3, #8]
    7ae8:	mov	r0, r3
    7aec:	bl	627c <coda_type_get_class_name>
    7af0:	mov	r3, r0
    7af4:	mov	r2, r3
    7af8:	movw	r1, #0
    7afc:	movt	r1, #0
    7b00:	mvn	r0, #104	; 0x68
    7b04:	bl	0 <coda_set_error>
    7b08:	mvn	r3, #0
    7b0c:	b	7b54 <coda_type_get_record_union_status+0xcc>
    7b10:	ldr	r3, [fp, #-12]
    7b14:	cmp	r3, #0
    7b18:	bne	7b40 <coda_type_get_record_union_status+0xb8>
    7b1c:	movw	r3, #3618	; 0xe22
    7b20:	movw	r2, #0
    7b24:	movt	r2, #0
    7b28:	movw	r1, #0
    7b2c:	movt	r1, #0
    7b30:	mvn	r0, #99	; 0x63
    7b34:	bl	0 <coda_set_error>
    7b38:	mvn	r3, #0
    7b3c:	b	7b54 <coda_type_get_record_union_status+0xcc>
    7b40:	ldr	r3, [fp, #-8]
    7b44:	ldr	r2, [r3, #64]	; 0x40
    7b48:	ldr	r3, [fp, #-12]
    7b4c:	str	r2, [r3]
    7b50:	mov	r3, #0
    7b54:	mov	r0, r3
    7b58:	sub	sp, fp, #4
    7b5c:	ldr	fp, [sp]
    7b60:	add	sp, sp, #4
    7b64:	pop	{pc}		; (ldr pc, [sp], #4)

00007b68 <coda_type_get_array_num_dims>:
    7b68:	str	fp, [sp, #-8]!
    7b6c:	str	lr, [sp, #4]
    7b70:	add	fp, sp, #4
    7b74:	sub	sp, sp, #8
    7b78:	str	r0, [fp, #-8]
    7b7c:	str	r1, [fp, #-12]
    7b80:	ldr	r3, [fp, #-8]
    7b84:	cmp	r3, #0
    7b88:	bne	7bb0 <coda_type_get_array_num_dims+0x48>
    7b8c:	movw	r3, #3638	; 0xe36
    7b90:	movw	r2, #0
    7b94:	movt	r2, #0
    7b98:	movw	r1, #0
    7b9c:	movt	r1, #0
    7ba0:	mvn	r0, #99	; 0x63
    7ba4:	bl	0 <coda_set_error>
    7ba8:	mvn	r3, #0
    7bac:	b	7c34 <coda_type_get_array_num_dims+0xcc>
    7bb0:	ldr	r3, [fp, #-8]
    7bb4:	ldr	r3, [r3, #8]
    7bb8:	cmp	r3, #1
    7bbc:	beq	7bf0 <coda_type_get_array_num_dims+0x88>
    7bc0:	ldr	r3, [fp, #-8]
    7bc4:	ldr	r3, [r3, #8]
    7bc8:	mov	r0, r3
    7bcc:	bl	627c <coda_type_get_class_name>
    7bd0:	mov	r3, r0
    7bd4:	mov	r2, r3
    7bd8:	movw	r1, #0
    7bdc:	movt	r1, #0
    7be0:	mvn	r0, #104	; 0x68
    7be4:	bl	0 <coda_set_error>
    7be8:	mvn	r3, #0
    7bec:	b	7c34 <coda_type_get_array_num_dims+0xcc>
    7bf0:	ldr	r3, [fp, #-12]
    7bf4:	cmp	r3, #0
    7bf8:	bne	7c20 <coda_type_get_array_num_dims+0xb8>
    7bfc:	movw	r3, #3649	; 0xe41
    7c00:	movw	r2, #0
    7c04:	movt	r2, #0
    7c08:	movw	r1, #0
    7c0c:	movt	r1, #0
    7c10:	mvn	r0, #99	; 0x63
    7c14:	bl	0 <coda_set_error>
    7c18:	mvn	r3, #0
    7c1c:	b	7c34 <coda_type_get_array_num_dims+0xcc>
    7c20:	ldr	r3, [fp, #-8]
    7c24:	ldr	r2, [r3, #48]	; 0x30
    7c28:	ldr	r3, [fp, #-12]
    7c2c:	str	r2, [r3]
    7c30:	mov	r3, #0
    7c34:	mov	r0, r3
    7c38:	sub	sp, fp, #4
    7c3c:	ldr	fp, [sp]
    7c40:	add	sp, sp, #4
    7c44:	pop	{pc}		; (ldr pc, [sp], #4)

00007c48 <coda_type_get_array_dim>:
    7c48:	str	fp, [sp, #-8]!
    7c4c:	str	lr, [sp, #4]
    7c50:	add	fp, sp, #4
    7c54:	sub	sp, sp, #24
    7c58:	str	r0, [fp, #-16]
    7c5c:	str	r1, [fp, #-20]	; 0xffffffec
    7c60:	str	r2, [fp, #-24]	; 0xffffffe8
    7c64:	ldr	r3, [fp, #-16]
    7c68:	cmp	r3, #0
    7c6c:	bne	7c94 <coda_type_get_array_dim+0x4c>
    7c70:	mov	r3, #3680	; 0xe60
    7c74:	movw	r2, #0
    7c78:	movt	r2, #0
    7c7c:	movw	r1, #0
    7c80:	movt	r1, #0
    7c84:	mvn	r0, #99	; 0x63
    7c88:	bl	0 <coda_set_error>
    7c8c:	mvn	r3, #0
    7c90:	b	7da0 <coda_type_get_array_dim+0x158>
    7c94:	ldr	r3, [fp, #-16]
    7c98:	ldr	r3, [r3, #8]
    7c9c:	cmp	r3, #1
    7ca0:	beq	7cd4 <coda_type_get_array_dim+0x8c>
    7ca4:	ldr	r3, [fp, #-16]
    7ca8:	ldr	r3, [r3, #8]
    7cac:	mov	r0, r3
    7cb0:	bl	627c <coda_type_get_class_name>
    7cb4:	mov	r3, r0
    7cb8:	mov	r2, r3
    7cbc:	movw	r1, #0
    7cc0:	movt	r1, #0
    7cc4:	mvn	r0, #104	; 0x68
    7cc8:	bl	0 <coda_set_error>
    7ccc:	mvn	r3, #0
    7cd0:	b	7da0 <coda_type_get_array_dim+0x158>
    7cd4:	ldr	r3, [fp, #-20]	; 0xffffffec
    7cd8:	cmp	r3, #0
    7cdc:	bne	7d04 <coda_type_get_array_dim+0xbc>
    7ce0:	movw	r3, #3691	; 0xe6b
    7ce4:	movw	r2, #0
    7ce8:	movt	r2, #0
    7cec:	movw	r1, #0
    7cf0:	movt	r1, #0
    7cf4:	mvn	r0, #99	; 0x63
    7cf8:	bl	0 <coda_set_error>
    7cfc:	mvn	r3, #0
    7d00:	b	7da0 <coda_type_get_array_dim+0x158>
    7d04:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7d08:	cmp	r3, #0
    7d0c:	bne	7d34 <coda_type_get_array_dim+0xec>
    7d10:	mov	r3, #3696	; 0xe70
    7d14:	movw	r2, #0
    7d18:	movt	r2, #0
    7d1c:	movw	r1, #0
    7d20:	movt	r1, #0
    7d24:	mvn	r0, #99	; 0x63
    7d28:	bl	0 <coda_set_error>
    7d2c:	mvn	r3, #0
    7d30:	b	7da0 <coda_type_get_array_dim+0x158>
    7d34:	ldr	r3, [fp, #-16]
    7d38:	ldr	r2, [r3, #48]	; 0x30
    7d3c:	ldr	r3, [fp, #-20]	; 0xffffffec
    7d40:	str	r2, [r3]
    7d44:	mov	r3, #0
    7d48:	str	r3, [fp, #-8]
    7d4c:	b	7d88 <coda_type_get_array_dim+0x140>
    7d50:	ldr	r3, [fp, #-8]
    7d54:	lsl	r3, r3, #2
    7d58:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7d5c:	add	r2, r2, r3
    7d60:	ldr	r1, [fp, #-16]
    7d64:	ldr	r3, [fp, #-8]
    7d68:	add	r3, r3, #12
    7d6c:	lsl	r3, r3, #2
    7d70:	add	r3, r1, r3
    7d74:	ldr	r3, [r3, #4]
    7d78:	str	r3, [r2]
    7d7c:	ldr	r3, [fp, #-8]
    7d80:	add	r3, r3, #1
    7d84:	str	r3, [fp, #-8]
    7d88:	ldr	r3, [fp, #-16]
    7d8c:	ldr	r3, [r3, #48]	; 0x30
    7d90:	ldr	r2, [fp, #-8]
    7d94:	cmp	r2, r3
    7d98:	blt	7d50 <coda_type_get_array_dim+0x108>
    7d9c:	mov	r3, #0
    7da0:	mov	r0, r3
    7da4:	sub	sp, fp, #4
    7da8:	ldr	fp, [sp]
    7dac:	add	sp, sp, #4
    7db0:	pop	{pc}		; (ldr pc, [sp], #4)

00007db4 <coda_type_get_array_base_type>:
    7db4:	str	fp, [sp, #-8]!
    7db8:	str	lr, [sp, #4]
    7dbc:	add	fp, sp, #4
    7dc0:	sub	sp, sp, #8
    7dc4:	str	r0, [fp, #-8]
    7dc8:	str	r1, [fp, #-12]
    7dcc:	ldr	r3, [fp, #-8]
    7dd0:	cmp	r3, #0
    7dd4:	bne	7dfc <coda_type_get_array_base_type+0x48>
    7dd8:	movw	r3, #3720	; 0xe88
    7ddc:	movw	r2, #0
    7de0:	movt	r2, #0
    7de4:	movw	r1, #0
    7de8:	movt	r1, #0
    7dec:	mvn	r0, #99	; 0x63
    7df0:	bl	0 <coda_set_error>
    7df4:	mvn	r3, #0
    7df8:	b	7e80 <coda_type_get_array_base_type+0xcc>
    7dfc:	ldr	r3, [fp, #-8]
    7e00:	ldr	r3, [r3, #8]
    7e04:	cmp	r3, #1
    7e08:	beq	7e3c <coda_type_get_array_base_type+0x88>
    7e0c:	ldr	r3, [fp, #-8]
    7e10:	ldr	r3, [r3, #8]
    7e14:	mov	r0, r3
    7e18:	bl	627c <coda_type_get_class_name>
    7e1c:	mov	r3, r0
    7e20:	mov	r2, r3
    7e24:	movw	r1, #0
    7e28:	movt	r1, #0
    7e2c:	mvn	r0, #104	; 0x68
    7e30:	bl	0 <coda_set_error>
    7e34:	mvn	r3, #0
    7e38:	b	7e80 <coda_type_get_array_base_type+0xcc>
    7e3c:	ldr	r3, [fp, #-12]
    7e40:	cmp	r3, #0
    7e44:	bne	7e6c <coda_type_get_array_base_type+0xb8>
    7e48:	movw	r3, #3731	; 0xe93
    7e4c:	movw	r2, #0
    7e50:	movt	r2, #0
    7e54:	movw	r1, #0
    7e58:	movt	r1, #0
    7e5c:	mvn	r0, #99	; 0x63
    7e60:	bl	0 <coda_set_error>
    7e64:	mvn	r3, #0
    7e68:	b	7e80 <coda_type_get_array_base_type+0xcc>
    7e6c:	ldr	r3, [fp, #-8]
    7e70:	ldr	r2, [r3, #40]	; 0x28
    7e74:	ldr	r3, [fp, #-12]
    7e78:	str	r2, [r3]
    7e7c:	mov	r3, #0
    7e80:	mov	r0, r3
    7e84:	sub	sp, fp, #4
    7e88:	ldr	fp, [sp]
    7e8c:	add	sp, sp, #4
    7e90:	pop	{pc}		; (ldr pc, [sp], #4)

00007e94 <coda_type_get_special_type>:
    7e94:	str	fp, [sp, #-8]!
    7e98:	str	lr, [sp, #4]
    7e9c:	add	fp, sp, #4
    7ea0:	sub	sp, sp, #8
    7ea4:	str	r0, [fp, #-8]
    7ea8:	str	r1, [fp, #-12]
    7eac:	ldr	r3, [fp, #-8]
    7eb0:	cmp	r3, #0
    7eb4:	bne	7edc <coda_type_get_special_type+0x48>
    7eb8:	movw	r3, #3752	; 0xea8
    7ebc:	movw	r2, #0
    7ec0:	movt	r2, #0
    7ec4:	movw	r1, #0
    7ec8:	movt	r1, #0
    7ecc:	mvn	r0, #99	; 0x63
    7ed0:	bl	0 <coda_set_error>
    7ed4:	mvn	r3, #0
    7ed8:	b	7f60 <coda_type_get_special_type+0xcc>
    7edc:	ldr	r3, [fp, #-8]
    7ee0:	ldr	r3, [r3, #8]
    7ee4:	cmp	r3, #6
    7ee8:	beq	7f1c <coda_type_get_special_type+0x88>
    7eec:	ldr	r3, [fp, #-8]
    7ef0:	ldr	r3, [r3, #8]
    7ef4:	mov	r0, r3
    7ef8:	bl	627c <coda_type_get_class_name>
    7efc:	mov	r3, r0
    7f00:	mov	r2, r3
    7f04:	movw	r1, #0
    7f08:	movt	r1, #0
    7f0c:	mvn	r0, #104	; 0x68
    7f10:	bl	0 <coda_set_error>
    7f14:	mvn	r3, #0
    7f18:	b	7f60 <coda_type_get_special_type+0xcc>
    7f1c:	ldr	r3, [fp, #-12]
    7f20:	cmp	r3, #0
    7f24:	bne	7f4c <coda_type_get_special_type+0xb8>
    7f28:	movw	r3, #3763	; 0xeb3
    7f2c:	movw	r2, #0
    7f30:	movt	r2, #0
    7f34:	movw	r1, #0
    7f38:	movt	r1, #0
    7f3c:	mvn	r0, #99	; 0x63
    7f40:	bl	0 <coda_set_error>
    7f44:	mvn	r3, #0
    7f48:	b	7f60 <coda_type_get_special_type+0xcc>
    7f4c:	ldr	r3, [fp, #-8]
    7f50:	ldr	r2, [r3, #40]	; 0x28
    7f54:	ldr	r3, [fp, #-12]
    7f58:	str	r2, [r3]
    7f5c:	mov	r3, #0
    7f60:	mov	r0, r3
    7f64:	sub	sp, fp, #4
    7f68:	ldr	fp, [sp]
    7f6c:	add	sp, sp, #4
    7f70:	pop	{pc}		; (ldr pc, [sp], #4)

00007f74 <coda_type_get_special_base_type>:
    7f74:	str	fp, [sp, #-8]!
    7f78:	str	lr, [sp, #4]
    7f7c:	add	fp, sp, #4
    7f80:	sub	sp, sp, #8
    7f84:	str	r0, [fp, #-8]
    7f88:	str	r1, [fp, #-12]
    7f8c:	ldr	r3, [fp, #-8]
    7f90:	cmp	r3, #0
    7f94:	bne	7fbc <coda_type_get_special_base_type+0x48>
    7f98:	movw	r3, #3783	; 0xec7
    7f9c:	movw	r2, #0
    7fa0:	movt	r2, #0
    7fa4:	movw	r1, #0
    7fa8:	movt	r1, #0
    7fac:	mvn	r0, #99	; 0x63
    7fb0:	bl	0 <coda_set_error>
    7fb4:	mvn	r3, #0
    7fb8:	b	8040 <coda_type_get_special_base_type+0xcc>
    7fbc:	ldr	r3, [fp, #-8]
    7fc0:	ldr	r3, [r3, #8]
    7fc4:	cmp	r3, #6
    7fc8:	beq	7ffc <coda_type_get_special_base_type+0x88>
    7fcc:	ldr	r3, [fp, #-8]
    7fd0:	ldr	r3, [r3, #8]
    7fd4:	mov	r0, r3
    7fd8:	bl	627c <coda_type_get_class_name>
    7fdc:	mov	r3, r0
    7fe0:	mov	r2, r3
    7fe4:	movw	r1, #0
    7fe8:	movt	r1, #0
    7fec:	mvn	r0, #104	; 0x68
    7ff0:	bl	0 <coda_set_error>
    7ff4:	mvn	r3, #0
    7ff8:	b	8040 <coda_type_get_special_base_type+0xcc>
    7ffc:	ldr	r3, [fp, #-12]
    8000:	cmp	r3, #0
    8004:	bne	802c <coda_type_get_special_base_type+0xb8>
    8008:	movw	r3, #3794	; 0xed2
    800c:	movw	r2, #0
    8010:	movt	r2, #0
    8014:	movw	r1, #0
    8018:	movt	r1, #0
    801c:	mvn	r0, #99	; 0x63
    8020:	bl	0 <coda_set_error>
    8024:	mvn	r3, #0
    8028:	b	8040 <coda_type_get_special_base_type+0xcc>
    802c:	ldr	r3, [fp, #-8]
    8030:	ldr	r2, [r3, #44]	; 0x2c
    8034:	ldr	r3, [fp, #-12]
    8038:	str	r2, [r3]
    803c:	mov	r3, #0
    8040:	mov	r0, r3
    8044:	sub	sp, fp, #4
    8048:	ldr	fp, [sp]
    804c:	add	sp, sp, #4
    8050:	pop	{pc}		; (ldr pc, [sp], #4)
