
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/ziparchive.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <default_error_handler>:
       0:	push	{r0, r1, r2, r3}
       4:	str	fp, [sp, #-8]!
       8:	str	lr, [sp, #4]
       c:	add	fp, sp, #4
      10:	sub	sp, sp, #8
      14:	movw	r3, #0
      18:	movt	r3, #0
      1c:	ldr	r3, [r3]
      20:	mov	r2, #7
      24:	mov	r1, #1
      28:	movw	r0, #0
      2c:	movt	r0, #0
      30:	bl	0 <fwrite>
      34:	add	r3, fp, #8
      38:	str	r3, [fp, #-8]
      3c:	movw	r3, #0
      40:	movt	r3, #0
      44:	ldr	r3, [r3]
      48:	ldr	r2, [fp, #-8]
      4c:	ldr	r1, [fp, #4]
      50:	mov	r0, r3
      54:	bl	0 <vfprintf>
      58:	movw	r3, #0
      5c:	movt	r3, #0
      60:	ldr	r3, [r3]
      64:	mov	r1, r3
      68:	mov	r0, #10
      6c:	bl	0 <fputc>
      70:	nop	{0}
      74:	sub	sp, fp, #4
      78:	ldr	fp, [sp]
      7c:	ldr	lr, [sp, #4]
      80:	add	sp, sp, #8
      84:	add	sp, sp, #16
      88:	bx	lr

0000008c <get_entries>:
      8c:	str	r4, [sp, #-12]!
      90:	str	fp, [sp, #4]
      94:	str	lr, [sp, #8]
      98:	add	fp, sp, #8
      9c:	sub	sp, sp, #84	; 0x54
      a0:	str	r0, [fp, #-88]	; 0xffffffa8
      a4:	ldr	r3, [fp, #-88]	; 0xffffffa8
      a8:	ldr	r3, [r3]
      ac:	mov	r2, #2
      b0:	mvn	r1, #21
      b4:	mov	r0, r3
      b8:	bl	0 <lseek>
      bc:	mov	r3, r0
      c0:	cmp	r3, #0
      c4:	bge	f8 <get_entries+0x6c>
      c8:	ldr	r3, [fp, #-88]	; 0xffffffa8
      cc:	ldr	r4, [r3, #20]
      d0:	bl	0 <__errno_location>
      d4:	mov	r3, r0
      d8:	ldr	r3, [r3]
      dc:	mov	r0, r3
      e0:	bl	0 <strerror>
      e4:	mov	r3, r0
      e8:	mov	r0, r3
      ec:	blx	r4
      f0:	mvn	r3, #0
      f4:	b	61c <get_entries+0x590>
      f8:	ldr	r3, [fp, #-88]	; 0xffffffa8
      fc:	ldr	r3, [r3]
     100:	sub	r1, fp, #84	; 0x54
     104:	mov	r2, #22
     108:	mov	r0, r3
     10c:	bl	0 <read>
     110:	mov	r3, r0
     114:	cmp	r3, #0
     118:	bge	14c <get_entries+0xc0>
     11c:	ldr	r3, [fp, #-88]	; 0xffffffa8
     120:	ldr	r4, [r3, #20]
     124:	bl	0 <__errno_location>
     128:	mov	r3, r0
     12c:	ldr	r3, [r3]
     130:	mov	r0, r3
     134:	bl	0 <strerror>
     138:	mov	r3, r0
     13c:	mov	r0, r3
     140:	blx	r4
     144:	mvn	r3, #0
     148:	b	61c <get_entries+0x590>
     14c:	ldr	r3, [fp, #-84]	; 0xffffffac
     150:	str	r3, [fp, #-20]	; 0xffffffec
     154:	ldr	r2, [fp, #-20]	; 0xffffffec
     158:	movw	r3, #19280	; 0x4b50
     15c:	movt	r3, #1541	; 0x605
     160:	cmp	r2, r3
     164:	beq	190 <get_entries+0x104>
     168:	ldr	r3, [fp, #-88]	; 0xffffffa8
     16c:	ldr	r3, [r3, #20]
     170:	ldr	r2, [fp, #-88]	; 0xffffffa8
     174:	ldr	r2, [r2, #8]
     178:	mov	r1, r2
     17c:	movw	r0, #0
     180:	movt	r0, #0
     184:	blx	r3
     188:	mvn	r3, #0
     18c:	b	61c <get_entries+0x590>
     190:	ldrh	r3, [fp, #-76]	; 0xffffffb4
     194:	strh	r3, [fp, #-22]	; 0xffffffea
     198:	ldr	r3, [fp, #-68]	; 0xffffffbc
     19c:	str	r3, [fp, #-28]	; 0xffffffe4
     1a0:	ldrh	r2, [fp, #-22]	; 0xffffffea
     1a4:	ldr	r3, [fp, #-88]	; 0xffffffa8
     1a8:	str	r2, [r3, #4]
     1ac:	ldrh	r3, [fp, #-22]	; 0xffffffea
     1b0:	mov	r2, #44	; 0x2c
     1b4:	mul	r3, r2, r3
     1b8:	mov	r0, r3
     1bc:	bl	0 <malloc>
     1c0:	mov	r3, r0
     1c4:	mov	r2, r3
     1c8:	ldr	r3, [fp, #-88]	; 0xffffffa8
     1cc:	str	r2, [r3, #12]
     1d0:	ldr	r3, [fp, #-88]	; 0xffffffa8
     1d4:	ldr	r3, [r3, #12]
     1d8:	cmp	r3, #0
     1dc:	bne	20c <get_entries+0x180>
     1e0:	ldr	r3, [fp, #-88]	; 0xffffffa8
     1e4:	ldr	r3, [r3, #20]
     1e8:	ldrh	r2, [fp, #-22]	; 0xffffffea
     1ec:	mov	r1, #44	; 0x2c
     1f0:	mul	r2, r1, r2
     1f4:	mov	r1, r2
     1f8:	movw	r0, #0
     1fc:	movt	r0, #0
     200:	blx	r3
     204:	mvn	r3, #0
     208:	b	61c <get_entries+0x590>
     20c:	mov	r3, #0
     210:	str	r3, [fp, #-16]
     214:	b	264 <get_entries+0x1d8>
     218:	ldr	r3, [fp, #-88]	; 0xffffffa8
     21c:	ldr	r2, [r3, #12]
     220:	ldr	r3, [fp, #-16]
     224:	mov	r1, #44	; 0x2c
     228:	mul	r3, r1, r3
     22c:	add	r3, r2, r3
     230:	mov	r2, #0
     234:	str	r2, [r3, #36]	; 0x24
     238:	ldr	r3, [fp, #-88]	; 0xffffffa8
     23c:	ldr	r2, [r3, #12]
     240:	ldr	r3, [fp, #-16]
     244:	mov	r1, #44	; 0x2c
     248:	mul	r3, r1, r3
     24c:	add	r3, r2, r3
     250:	ldr	r2, [fp, #-88]	; 0xffffffa8
     254:	str	r2, [r3, #40]	; 0x28
     258:	ldr	r3, [fp, #-16]
     25c:	add	r3, r3, #1
     260:	str	r3, [fp, #-16]
     264:	ldrh	r3, [fp, #-22]	; 0xffffffea
     268:	ldr	r2, [fp, #-16]
     26c:	cmp	r2, r3
     270:	blt	218 <get_entries+0x18c>
     274:	ldr	r3, [fp, #-88]	; 0xffffffa8
     278:	ldr	r3, [r3]
     27c:	ldr	r1, [fp, #-28]	; 0xffffffe4
     280:	mov	r2, #0
     284:	mov	r0, r3
     288:	bl	0 <lseek>
     28c:	mov	r3, r0
     290:	cmp	r3, #0
     294:	bge	2c8 <get_entries+0x23c>
     298:	ldr	r3, [fp, #-88]	; 0xffffffa8
     29c:	ldr	r4, [r3, #20]
     2a0:	bl	0 <__errno_location>
     2a4:	mov	r3, r0
     2a8:	ldr	r3, [r3]
     2ac:	mov	r0, r3
     2b0:	bl	0 <strerror>
     2b4:	mov	r3, r0
     2b8:	mov	r0, r3
     2bc:	blx	r4
     2c0:	mvn	r3, #0
     2c4:	b	61c <get_entries+0x590>
     2c8:	mov	r3, #0
     2cc:	str	r3, [fp, #-16]
     2d0:	b	608 <get_entries+0x57c>
     2d4:	ldr	r3, [fp, #-88]	; 0xffffffa8
     2d8:	ldr	r2, [r3, #12]
     2dc:	ldr	r3, [fp, #-16]
     2e0:	mov	r1, #44	; 0x2c
     2e4:	mul	r3, r1, r3
     2e8:	add	r3, r2, r3
     2ec:	str	r3, [fp, #-32]	; 0xffffffe0
     2f0:	ldr	r3, [fp, #-88]	; 0xffffffa8
     2f4:	ldr	r3, [r3]
     2f8:	sub	r1, fp, #84	; 0x54
     2fc:	mov	r2, #46	; 0x2e
     300:	mov	r0, r3
     304:	bl	0 <read>
     308:	mov	r3, r0
     30c:	cmp	r3, #0
     310:	bge	344 <get_entries+0x2b8>
     314:	ldr	r3, [fp, #-88]	; 0xffffffa8
     318:	ldr	r4, [r3, #20]
     31c:	bl	0 <__errno_location>
     320:	mov	r3, r0
     324:	ldr	r3, [r3]
     328:	mov	r0, r3
     32c:	bl	0 <strerror>
     330:	mov	r3, r0
     334:	mov	r0, r3
     338:	blx	r4
     33c:	mvn	r3, #0
     340:	b	61c <get_entries+0x590>
     344:	ldr	r3, [fp, #-84]	; 0xffffffac
     348:	str	r3, [fp, #-20]	; 0xffffffec
     34c:	ldr	r2, [fp, #-20]	; 0xffffffec
     350:	movw	r3, #19280	; 0x4b50
     354:	movt	r3, #513	; 0x201
     358:	cmp	r2, r3
     35c:	beq	388 <get_entries+0x2fc>
     360:	ldr	r3, [fp, #-88]	; 0xffffffa8
     364:	ldr	r3, [r3, #20]
     368:	ldr	r2, [fp, #-88]	; 0xffffffa8
     36c:	ldr	r2, [r2, #8]
     370:	mov	r1, r2
     374:	movw	r0, #0
     378:	movt	r0, #0
     37c:	blx	r3
     380:	mvn	r3, #0
     384:	b	61c <get_entries+0x590>
     388:	ldrh	r2, [fp, #-74]	; 0xffffffb6
     38c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     390:	strh	r2, [r3, #4]
     394:	ldr	r3, [fp, #-32]	; 0xffffffe0
     398:	ldrh	r3, [r3, #4]
     39c:	cmp	r3, #0
     3a0:	beq	3dc <get_entries+0x350>
     3a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     3a8:	ldrh	r3, [r3, #4]
     3ac:	cmp	r3, #8
     3b0:	beq	3dc <get_entries+0x350>
     3b4:	ldr	r3, [fp, #-88]	; 0xffffffa8
     3b8:	ldr	r3, [r3, #20]
     3bc:	ldr	r2, [fp, #-88]	; 0xffffffa8
     3c0:	ldr	r2, [r2, #8]
     3c4:	mov	r1, r2
     3c8:	movw	r0, #0
     3cc:	movt	r0, #0
     3d0:	blx	r3
     3d4:	mvn	r3, #0
     3d8:	b	61c <get_entries+0x590>
     3dc:	ldrh	r2, [fp, #-72]	; 0xffffffb8
     3e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
     3e4:	strh	r2, [r3, #6]
     3e8:	ldrh	r2, [fp, #-70]	; 0xffffffba
     3ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
     3f0:	strh	r2, [r3, #8]
     3f4:	ldr	r2, [fp, #-68]	; 0xffffffbc
     3f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
     3fc:	str	r2, [r3, #16]
     400:	ldr	r2, [fp, #-64]	; 0xffffffc0
     404:	ldr	r3, [fp, #-32]	; 0xffffffe0
     408:	str	r2, [r3, #20]
     40c:	ldr	r2, [fp, #-60]	; 0xffffffc4
     410:	ldr	r3, [fp, #-32]	; 0xffffffe0
     414:	str	r2, [r3, #24]
     418:	ldrh	r2, [fp, #-56]	; 0xffffffc8
     41c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     420:	strh	r2, [r3, #28]
     424:	ldrh	r2, [fp, #-54]	; 0xffffffca
     428:	ldr	r3, [fp, #-32]	; 0xffffffe0
     42c:	strh	r2, [r3, #30]
     430:	ldrh	r3, [fp, #-52]	; 0xffffffcc
     434:	strh	r3, [fp, #-34]	; 0xffffffde
     438:	ldrh	r3, [fp, #-48]	; 0xffffffd0
     43c:	strh	r3, [fp, #-36]	; 0xffffffdc
     440:	ldrh	r3, [fp, #-36]	; 0xffffffdc
     444:	and	r2, r3, #1
     448:	ldr	r3, [fp, #-32]	; 0xffffffe0
     44c:	str	r2, [r3, #32]
     450:	ldr	r3, [fp, #-32]	; 0xffffffe0
     454:	add	r3, r3, #12
     458:	ldr	r2, [fp, #-46]	; 0xffffffd2
     45c:	str	r2, [r3]
     460:	ldr	r3, [fp, #-32]	; 0xffffffe0
     464:	ldr	r2, [fp, #-42]	; 0xffffffd6
     468:	str	r2, [r3]
     46c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     470:	ldrh	r3, [r3, #28]
     474:	add	r3, r3, #1
     478:	mov	r0, r3
     47c:	bl	0 <malloc>
     480:	mov	r3, r0
     484:	mov	r2, r3
     488:	ldr	r3, [fp, #-32]	; 0xffffffe0
     48c:	str	r2, [r3, #36]	; 0x24
     490:	ldr	r3, [fp, #-32]	; 0xffffffe0
     494:	ldr	r3, [r3, #36]	; 0x24
     498:	cmp	r3, #0
     49c:	bne	4cc <get_entries+0x440>
     4a0:	ldr	r3, [fp, #-88]	; 0xffffffa8
     4a4:	ldr	r3, [r3, #20]
     4a8:	ldr	r2, [fp, #-32]	; 0xffffffe0
     4ac:	ldrh	r2, [r2, #28]
     4b0:	add	r2, r2, #1
     4b4:	mov	r1, r2
     4b8:	movw	r0, #0
     4bc:	movt	r0, #0
     4c0:	blx	r3
     4c4:	mvn	r3, #0
     4c8:	b	61c <get_entries+0x590>
     4cc:	ldr	r3, [fp, #-88]	; 0xffffffa8
     4d0:	ldr	r0, [r3]
     4d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     4d8:	ldr	r1, [r3, #36]	; 0x24
     4dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
     4e0:	ldrh	r3, [r3, #28]
     4e4:	mov	r2, r3
     4e8:	bl	0 <read>
     4ec:	mov	r3, r0
     4f0:	cmp	r3, #0
     4f4:	bge	528 <get_entries+0x49c>
     4f8:	ldr	r3, [fp, #-88]	; 0xffffffa8
     4fc:	ldr	r4, [r3, #20]
     500:	bl	0 <__errno_location>
     504:	mov	r3, r0
     508:	ldr	r3, [r3]
     50c:	mov	r0, r3
     510:	bl	0 <strerror>
     514:	mov	r3, r0
     518:	mov	r0, r3
     51c:	blx	r4
     520:	mvn	r3, #0
     524:	b	61c <get_entries+0x590>
     528:	ldr	r3, [fp, #-32]	; 0xffffffe0
     52c:	ldr	r3, [r3, #36]	; 0x24
     530:	ldr	r2, [fp, #-32]	; 0xffffffe0
     534:	ldrh	r2, [r2, #28]
     538:	add	r3, r3, r2
     53c:	mov	r2, #0
     540:	strb	r2, [r3]
     544:	ldr	r3, [fp, #-88]	; 0xffffffa8
     548:	ldr	r2, [r3, #16]
     54c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     550:	ldr	r3, [r3, #36]	; 0x24
     554:	mov	r1, r3
     558:	mov	r0, r2
     55c:	bl	0 <coda_hashtable_add_name>
     560:	mov	r3, r0
     564:	cmp	r3, #0
     568:	beq	598 <get_entries+0x50c>
     56c:	ldr	r3, [fp, #-88]	; 0xffffffa8
     570:	ldr	r3, [r3, #20]
     574:	ldr	r2, [fp, #-88]	; 0xffffffa8
     578:	ldr	r1, [r2, #8]
     57c:	ldr	r2, [fp, #-32]	; 0xffffffe0
     580:	ldr	r2, [r2, #36]	; 0x24
     584:	movw	r0, #0
     588:	movt	r0, #0
     58c:	blx	r3
     590:	mvn	r3, #0
     594:	b	61c <get_entries+0x590>
     598:	ldr	r3, [fp, #-88]	; 0xffffffa8
     59c:	ldr	r0, [r3]
     5a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
     5a4:	ldrh	r3, [r3, #30]
     5a8:	mov	r2, r3
     5ac:	ldrh	r3, [fp, #-34]	; 0xffffffde
     5b0:	add	r3, r2, r3
     5b4:	mov	r2, #1
     5b8:	mov	r1, r3
     5bc:	bl	0 <lseek>
     5c0:	mov	r3, r0
     5c4:	cmp	r3, #0
     5c8:	bge	5fc <get_entries+0x570>
     5cc:	ldr	r3, [fp, #-88]	; 0xffffffa8
     5d0:	ldr	r4, [r3, #20]
     5d4:	bl	0 <__errno_location>
     5d8:	mov	r3, r0
     5dc:	ldr	r3, [r3]
     5e0:	mov	r0, r3
     5e4:	bl	0 <strerror>
     5e8:	mov	r3, r0
     5ec:	mov	r0, r3
     5f0:	blx	r4
     5f4:	mvn	r3, #0
     5f8:	b	61c <get_entries+0x590>
     5fc:	ldr	r3, [fp, #-16]
     600:	add	r3, r3, #1
     604:	str	r3, [fp, #-16]
     608:	ldrh	r3, [fp, #-22]	; 0xffffffea
     60c:	ldr	r2, [fp, #-16]
     610:	cmp	r2, r3
     614:	blt	2d4 <get_entries+0x248>
     618:	mov	r3, #0
     61c:	mov	r0, r3
     620:	sub	sp, fp, #8
     624:	ldr	r4, [sp]
     628:	ldr	fp, [sp, #4]
     62c:	add	sp, sp, #8
     630:	pop	{pc}		; (ldr pc, [sp], #4)

00000634 <coda_za_open>:
     634:	str	r4, [sp, #-12]!
     638:	str	fp, [sp, #4]
     63c:	str	lr, [sp, #8]
     640:	add	fp, sp, #8
     644:	sub	sp, sp, #116	; 0x74
     648:	str	r0, [fp, #-120]	; 0xffffff88
     64c:	str	r1, [fp, #-124]	; 0xffffff84
     650:	sub	r3, fp, #108	; 0x6c
     654:	mov	r1, r3
     658:	ldr	r0, [fp, #-120]	; 0xffffff88
     65c:	bl	0 <stat>
     660:	mov	r3, r0
     664:	cmp	r3, #0
     668:	beq	6cc <coda_za_open+0x98>
     66c:	bl	0 <__errno_location>
     670:	mov	r3, r0
     674:	ldr	r3, [r3]
     678:	cmp	r3, #2
     67c:	bne	698 <coda_za_open+0x64>
     680:	ldr	r3, [fp, #-124]	; 0xffffff84
     684:	ldr	r1, [fp, #-120]	; 0xffffff88
     688:	movw	r0, #0
     68c:	movt	r0, #0
     690:	blx	r3
     694:	b	6c4 <coda_za_open+0x90>
     698:	bl	0 <__errno_location>
     69c:	mov	r3, r0
     6a0:	ldr	r3, [r3]
     6a4:	mov	r0, r3
     6a8:	bl	0 <strerror>
     6ac:	mov	r2, r0
     6b0:	ldr	r3, [fp, #-124]	; 0xffffff84
     6b4:	ldr	r1, [fp, #-120]	; 0xffffff88
     6b8:	movw	r0, #0
     6bc:	movt	r0, #0
     6c0:	blx	r3
     6c4:	mov	r3, #0
     6c8:	b	960 <coda_za_open+0x32c>
     6cc:	ldr	r3, [fp, #-92]	; 0xffffffa4
     6d0:	and	r3, r3, #32768	; 0x8000
     6d4:	cmp	r3, #0
     6d8:	bne	6f8 <coda_za_open+0xc4>
     6dc:	ldr	r3, [fp, #-124]	; 0xffffff84
     6e0:	ldr	r1, [fp, #-120]	; 0xffffff88
     6e4:	movw	r0, #0
     6e8:	movt	r0, #0
     6ec:	blx	r3
     6f0:	mov	r3, #0
     6f4:	b	960 <coda_za_open+0x32c>
     6f8:	ldr	r3, [fp, #-64]	; 0xffffffc0
     6fc:	cmp	r3, #21
     700:	bgt	720 <coda_za_open+0xec>
     704:	ldr	r3, [fp, #-124]	; 0xffffff84
     708:	ldr	r1, [fp, #-120]	; 0xffffff88
     70c:	movw	r0, #0
     710:	movt	r0, #0
     714:	blx	r3
     718:	mov	r3, #0
     71c:	b	960 <coda_za_open+0x32c>
     720:	mov	r0, #24
     724:	bl	0 <malloc>
     728:	mov	r3, r0
     72c:	str	r3, [fp, #-16]
     730:	ldr	r3, [fp, #-16]
     734:	cmp	r3, #0
     738:	bne	764 <coda_za_open+0x130>
     73c:	ldr	r3, [fp, #-124]	; 0xffffff84
     740:	cmp	r3, #0
     744:	beq	75c <coda_za_open+0x128>
     748:	ldr	r3, [fp, #-124]	; 0xffffff84
     74c:	mov	r1, #24
     750:	movw	r0, #0
     754:	movt	r0, #0
     758:	blx	r3
     75c:	mov	r3, #0
     760:	b	960 <coda_za_open+0x32c>
     764:	ldr	r0, [fp, #-120]	; 0xffffff88
     768:	bl	0 <strdup>
     76c:	mov	r3, r0
     770:	mov	r2, r3
     774:	ldr	r3, [fp, #-16]
     778:	str	r2, [r3, #8]
     77c:	ldr	r3, [fp, #-16]
     780:	ldr	r3, [r3, #8]
     784:	cmp	r3, #0
     788:	bne	7b8 <coda_za_open+0x184>
     78c:	ldr	r0, [fp, #-16]
     790:	bl	0 <free>
     794:	ldr	r3, [fp, #-124]	; 0xffffff84
     798:	cmp	r3, #0
     79c:	beq	7b0 <coda_za_open+0x17c>
     7a0:	ldr	r3, [fp, #-124]	; 0xffffff84
     7a4:	movw	r0, #0
     7a8:	movt	r0, #0
     7ac:	blx	r3
     7b0:	mov	r3, #0
     7b4:	b	960 <coda_za_open+0x32c>
     7b8:	ldr	r3, [fp, #-16]
     7bc:	mov	r2, #0
     7c0:	str	r2, [r3, #4]
     7c4:	ldr	r3, [fp, #-16]
     7c8:	mov	r2, #0
     7cc:	str	r2, [r3, #12]
     7d0:	ldr	r3, [fp, #-16]
     7d4:	mov	r2, #0
     7d8:	str	r2, [r3, #16]
     7dc:	ldr	r3, [fp, #-124]	; 0xffffff84
     7e0:	cmp	r3, #0
     7e4:	beq	7f8 <coda_za_open+0x1c4>
     7e8:	ldr	r3, [fp, #-16]
     7ec:	ldr	r2, [fp, #-124]	; 0xffffff84
     7f0:	str	r2, [r3, #20]
     7f4:	b	808 <coda_za_open+0x1d4>
     7f8:	ldr	r2, [fp, #-16]
     7fc:	movw	r3, #0
     800:	movt	r3, #0
     804:	str	r3, [r2, #20]
     808:	mov	r3, #0
     80c:	str	r3, [fp, #-20]	; 0xffffffec
     810:	ldr	r1, [fp, #-20]	; 0xffffffec
     814:	ldr	r0, [fp, #-120]	; 0xffffff88
     818:	bl	0 <open>
     81c:	mov	r2, r0
     820:	ldr	r3, [fp, #-16]
     824:	str	r2, [r3]
     828:	ldr	r3, [fp, #-16]
     82c:	ldr	r3, [r3]
     830:	cmp	r3, #0
     834:	bge	88c <coda_za_open+0x258>
     838:	ldr	r3, [fp, #-16]
     83c:	ldr	r4, [r3, #20]
     840:	bl	0 <__errno_location>
     844:	mov	r3, r0
     848:	ldr	r3, [r3]
     84c:	mov	r0, r3
     850:	bl	0 <strerror>
     854:	mov	r3, r0
     858:	mov	r2, r3
     85c:	ldr	r1, [fp, #-120]	; 0xffffff88
     860:	movw	r0, #0
     864:	movt	r0, #0
     868:	blx	r4
     86c:	ldr	r3, [fp, #-16]
     870:	ldr	r3, [r3, #8]
     874:	mov	r0, r3
     878:	bl	0 <free>
     87c:	ldr	r0, [fp, #-16]
     880:	bl	0 <free>
     884:	mov	r3, #0
     888:	b	960 <coda_za_open+0x32c>
     88c:	ldr	r3, [fp, #-16]
     890:	ldr	r3, [r3]
     894:	sub	r1, fp, #112	; 0x70
     898:	mov	r2, #2
     89c:	mov	r0, r3
     8a0:	bl	0 <read>
     8a4:	mov	r3, r0
     8a8:	cmp	r3, #0
     8ac:	bge	8e8 <coda_za_open+0x2b4>
     8b0:	ldr	r3, [fp, #-16]
     8b4:	ldr	r4, [r3, #20]
     8b8:	bl	0 <__errno_location>
     8bc:	mov	r3, r0
     8c0:	ldr	r3, [r3]
     8c4:	mov	r0, r3
     8c8:	bl	0 <strerror>
     8cc:	mov	r3, r0
     8d0:	mov	r0, r3
     8d4:	blx	r4
     8d8:	ldr	r0, [fp, #-16]
     8dc:	bl	1168 <coda_za_close>
     8e0:	mov	r3, #0
     8e4:	b	960 <coda_za_open+0x32c>
     8e8:	ldrb	r3, [fp, #-112]	; 0xffffff90
     8ec:	cmp	r3, #80	; 0x50
     8f0:	beq	924 <coda_za_open+0x2f0>
     8f4:	ldrb	r3, [fp, #-111]	; 0xffffff91
     8f8:	cmp	r3, #75	; 0x4b
     8fc:	beq	924 <coda_za_open+0x2f0>
     900:	ldr	r3, [fp, #-124]	; 0xffffff84
     904:	ldr	r1, [fp, #-120]	; 0xffffff88
     908:	movw	r0, #0
     90c:	movt	r0, #0
     910:	blx	r3
     914:	ldr	r0, [fp, #-16]
     918:	bl	1168 <coda_za_close>
     91c:	mov	r3, #0
     920:	b	960 <coda_za_open+0x32c>
     924:	mov	r0, #1
     928:	bl	0 <coda_hashtable_new>
     92c:	mov	r2, r0
     930:	ldr	r3, [fp, #-16]
     934:	str	r2, [r3, #16]
     938:	ldr	r0, [fp, #-16]
     93c:	bl	8c <get_entries>
     940:	mov	r3, r0
     944:	cmp	r3, #0
     948:	beq	95c <coda_za_open+0x328>
     94c:	ldr	r0, [fp, #-16]
     950:	bl	1168 <coda_za_close>
     954:	mov	r3, #0
     958:	b	960 <coda_za_open+0x32c>
     95c:	ldr	r3, [fp, #-16]
     960:	mov	r0, r3
     964:	sub	sp, fp, #8
     968:	ldr	r4, [sp]
     96c:	ldr	fp, [sp, #4]
     970:	add	sp, sp, #8
     974:	pop	{pc}		; (ldr pc, [sp], #4)

00000978 <coda_za_get_num_entries>:
     978:	push	{fp}		; (str fp, [sp, #-4]!)
     97c:	add	fp, sp, #0
     980:	sub	sp, sp, #12
     984:	str	r0, [fp, #-8]
     988:	ldr	r3, [fp, #-8]
     98c:	ldr	r3, [r3, #4]
     990:	mov	r0, r3
     994:	add	sp, fp, #0
     998:	pop	{fp}		; (ldr fp, [sp], #4)
     99c:	bx	lr

000009a0 <coda_za_get_filename>:
     9a0:	push	{fp}		; (str fp, [sp, #-4]!)
     9a4:	add	fp, sp, #0
     9a8:	sub	sp, sp, #12
     9ac:	str	r0, [fp, #-8]
     9b0:	ldr	r3, [fp, #-8]
     9b4:	ldr	r3, [r3, #8]
     9b8:	mov	r0, r3
     9bc:	add	sp, fp, #0
     9c0:	pop	{fp}		; (ldr fp, [sp], #4)
     9c4:	bx	lr

000009c8 <coda_za_get_entry_by_index>:
     9c8:	push	{fp}		; (str fp, [sp, #-4]!)
     9cc:	add	fp, sp, #0
     9d0:	sub	sp, sp, #12
     9d4:	str	r0, [fp, #-8]
     9d8:	str	r1, [fp, #-12]
     9dc:	ldr	r3, [fp, #-12]
     9e0:	cmp	r3, #0
     9e4:	blt	9fc <coda_za_get_entry_by_index+0x34>
     9e8:	ldr	r3, [fp, #-8]
     9ec:	ldr	r3, [r3, #4]
     9f0:	ldr	r2, [fp, #-12]
     9f4:	cmp	r2, r3
     9f8:	blt	a04 <coda_za_get_entry_by_index+0x3c>
     9fc:	mov	r3, #0
     a00:	b	a1c <coda_za_get_entry_by_index+0x54>
     a04:	ldr	r3, [fp, #-8]
     a08:	ldr	r2, [r3, #12]
     a0c:	ldr	r3, [fp, #-12]
     a10:	mov	r1, #44	; 0x2c
     a14:	mul	r3, r1, r3
     a18:	add	r3, r2, r3
     a1c:	mov	r0, r3
     a20:	add	sp, fp, #0
     a24:	pop	{fp}		; (ldr fp, [sp], #4)
     a28:	bx	lr

00000a2c <coda_za_get_entry_by_name>:
     a2c:	str	fp, [sp, #-8]!
     a30:	str	lr, [sp, #4]
     a34:	add	fp, sp, #4
     a38:	sub	sp, sp, #16
     a3c:	str	r0, [fp, #-16]
     a40:	str	r1, [fp, #-20]	; 0xffffffec
     a44:	ldr	r3, [fp, #-16]
     a48:	ldr	r3, [r3, #16]
     a4c:	ldr	r1, [fp, #-20]	; 0xffffffec
     a50:	mov	r0, r3
     a54:	bl	0 <coda_hashtable_get_index_from_name>
     a58:	str	r0, [fp, #-8]
     a5c:	ldr	r3, [fp, #-8]
     a60:	cmp	r3, #0
     a64:	bge	a70 <coda_za_get_entry_by_name+0x44>
     a68:	mov	r3, #0
     a6c:	b	a88 <coda_za_get_entry_by_name+0x5c>
     a70:	ldr	r3, [fp, #-16]
     a74:	ldr	r2, [r3, #12]
     a78:	ldr	r3, [fp, #-8]
     a7c:	mov	r1, #44	; 0x2c
     a80:	mul	r3, r1, r3
     a84:	add	r3, r2, r3
     a88:	mov	r0, r3
     a8c:	sub	sp, fp, #4
     a90:	ldr	fp, [sp]
     a94:	add	sp, sp, #4
     a98:	pop	{pc}		; (ldr pc, [sp], #4)

00000a9c <coda_za_get_entry_size>:
     a9c:	push	{fp}		; (str fp, [sp, #-4]!)
     aa0:	add	fp, sp, #0
     aa4:	sub	sp, sp, #12
     aa8:	str	r0, [fp, #-8]
     aac:	ldr	r3, [fp, #-8]
     ab0:	ldr	r3, [r3, #24]
     ab4:	mov	r0, r3
     ab8:	add	sp, fp, #0
     abc:	pop	{fp}		; (ldr fp, [sp], #4)
     ac0:	bx	lr

00000ac4 <coda_za_get_entry_name>:
     ac4:	push	{fp}		; (str fp, [sp, #-4]!)
     ac8:	add	fp, sp, #0
     acc:	sub	sp, sp, #12
     ad0:	str	r0, [fp, #-8]
     ad4:	ldr	r3, [fp, #-8]
     ad8:	ldr	r3, [r3, #36]	; 0x24
     adc:	mov	r0, r3
     ae0:	add	sp, fp, #0
     ae4:	pop	{fp}		; (ldr fp, [sp], #4)
     ae8:	bx	lr

00000aec <coda_za_read_entry>:
     aec:	str	r4, [sp, #-12]!
     af0:	str	fp, [sp, #4]
     af4:	str	lr, [sp, #8]
     af8:	add	fp, sp, #8
     afc:	sub	sp, sp, #140	; 0x8c
     b00:	str	r0, [fp, #-144]	; 0xffffff70
     b04:	str	r1, [fp, #-148]	; 0xffffff6c
     b08:	ldr	r3, [fp, #-144]	; 0xffffff70
     b0c:	ldr	r3, [r3, #40]	; 0x28
     b10:	ldr	r0, [r3]
     b14:	ldr	r3, [fp, #-144]	; 0xffffff70
     b18:	ldr	r3, [r3]
     b1c:	mov	r2, #0
     b20:	mov	r1, r3
     b24:	bl	0 <lseek>
     b28:	mov	r3, r0
     b2c:	cmp	r3, #0
     b30:	bge	b68 <coda_za_read_entry+0x7c>
     b34:	ldr	r3, [fp, #-144]	; 0xffffff70
     b38:	ldr	r3, [r3, #40]	; 0x28
     b3c:	ldr	r4, [r3, #20]
     b40:	bl	0 <__errno_location>
     b44:	mov	r3, r0
     b48:	ldr	r3, [r3]
     b4c:	mov	r0, r3
     b50:	bl	0 <strerror>
     b54:	mov	r3, r0
     b58:	mov	r0, r3
     b5c:	blx	r4
     b60:	mvn	r3, #0
     b64:	b	1150 <coda_za_read_entry+0x664>
     b68:	ldr	r3, [fp, #-144]	; 0xffffff70
     b6c:	ldr	r3, [r3, #40]	; 0x28
     b70:	ldr	r3, [r3]
     b74:	sub	r1, fp, #68	; 0x44
     b78:	mov	r2, #30
     b7c:	mov	r0, r3
     b80:	bl	0 <read>
     b84:	mov	r3, r0
     b88:	cmp	r3, #0
     b8c:	bge	bc4 <coda_za_read_entry+0xd8>
     b90:	ldr	r3, [fp, #-144]	; 0xffffff70
     b94:	ldr	r3, [r3, #40]	; 0x28
     b98:	ldr	r4, [r3, #20]
     b9c:	bl	0 <__errno_location>
     ba0:	mov	r3, r0
     ba4:	ldr	r3, [r3]
     ba8:	mov	r0, r3
     bac:	bl	0 <strerror>
     bb0:	mov	r3, r0
     bb4:	mov	r0, r3
     bb8:	blx	r4
     bbc:	mvn	r3, #0
     bc0:	b	1150 <coda_za_read_entry+0x664>
     bc4:	ldr	r3, [fp, #-68]	; 0xffffffbc
     bc8:	str	r3, [fp, #-16]
     bcc:	ldr	r2, [fp, #-16]
     bd0:	movw	r3, #19280	; 0x4b50
     bd4:	movt	r3, #1027	; 0x403
     bd8:	cmp	r2, r3
     bdc:	beq	c00 <coda_za_read_entry+0x114>
     be0:	ldr	r3, [fp, #-144]	; 0xffffff70
     be4:	ldr	r3, [r3, #40]	; 0x28
     be8:	ldr	r3, [r3, #20]
     bec:	movw	r0, #0
     bf0:	movt	r0, #0
     bf4:	blx	r3
     bf8:	mvn	r3, #0
     bfc:	b	1150 <coda_za_read_entry+0x664>
     c00:	ldrh	r3, [fp, #-60]	; 0xffffffc4
     c04:	strh	r3, [fp, #-18]	; 0xffffffee
     c08:	ldr	r3, [fp, #-144]	; 0xffffff70
     c0c:	ldrh	r3, [r3, #4]
     c10:	ldrh	r2, [fp, #-18]	; 0xffffffee
     c14:	cmp	r2, r3
     c18:	beq	c3c <coda_za_read_entry+0x150>
     c1c:	ldr	r3, [fp, #-144]	; 0xffffff70
     c20:	ldr	r3, [r3, #40]	; 0x28
     c24:	ldr	r3, [r3, #20]
     c28:	movw	r0, #0
     c2c:	movt	r0, #0
     c30:	blx	r3
     c34:	mvn	r3, #0
     c38:	b	1150 <coda_za_read_entry+0x664>
     c3c:	ldrh	r3, [fp, #-58]	; 0xffffffc6
     c40:	strh	r3, [fp, #-20]	; 0xffffffec
     c44:	ldr	r3, [fp, #-144]	; 0xffffff70
     c48:	ldrh	r3, [r3, #6]
     c4c:	ldrh	r2, [fp, #-20]	; 0xffffffec
     c50:	cmp	r2, r3
     c54:	beq	c78 <coda_za_read_entry+0x18c>
     c58:	ldr	r3, [fp, #-144]	; 0xffffff70
     c5c:	ldr	r3, [r3, #40]	; 0x28
     c60:	ldr	r3, [r3, #20]
     c64:	movw	r0, #0
     c68:	movt	r0, #0
     c6c:	blx	r3
     c70:	mvn	r3, #0
     c74:	b	1150 <coda_za_read_entry+0x664>
     c78:	ldrh	r3, [fp, #-56]	; 0xffffffc8
     c7c:	strh	r3, [fp, #-22]	; 0xffffffea
     c80:	ldr	r3, [fp, #-144]	; 0xffffff70
     c84:	ldrh	r3, [r3, #8]
     c88:	ldrh	r2, [fp, #-22]	; 0xffffffea
     c8c:	cmp	r2, r3
     c90:	beq	cb4 <coda_za_read_entry+0x1c8>
     c94:	ldr	r3, [fp, #-144]	; 0xffffff70
     c98:	ldr	r3, [r3, #40]	; 0x28
     c9c:	ldr	r3, [r3, #20]
     ca0:	movw	r0, #0
     ca4:	movt	r0, #0
     ca8:	blx	r3
     cac:	mvn	r3, #0
     cb0:	b	1150 <coda_za_read_entry+0x664>
     cb4:	ldr	r3, [fp, #-54]	; 0xffffffca
     cb8:	str	r3, [fp, #-72]	; 0xffffffb8
     cbc:	ldr	r3, [fp, #-144]	; 0xffffff70
     cc0:	ldr	r2, [r3, #16]
     cc4:	ldr	r3, [fp, #-72]	; 0xffffffb8
     cc8:	cmp	r2, r3
     ccc:	beq	cf0 <coda_za_read_entry+0x204>
     cd0:	ldr	r3, [fp, #-144]	; 0xffffff70
     cd4:	ldr	r3, [r3, #40]	; 0x28
     cd8:	ldr	r3, [r3, #20]
     cdc:	movw	r0, #0
     ce0:	movt	r0, #0
     ce4:	blx	r3
     ce8:	mvn	r3, #0
     cec:	b	1150 <coda_za_read_entry+0x664>
     cf0:	ldr	r3, [fp, #-50]	; 0xffffffce
     cf4:	str	r3, [fp, #-76]	; 0xffffffb4
     cf8:	ldr	r3, [fp, #-144]	; 0xffffff70
     cfc:	ldr	r2, [r3, #20]
     d00:	ldr	r3, [fp, #-76]	; 0xffffffb4
     d04:	cmp	r2, r3
     d08:	beq	d2c <coda_za_read_entry+0x240>
     d0c:	ldr	r3, [fp, #-144]	; 0xffffff70
     d10:	ldr	r3, [r3, #40]	; 0x28
     d14:	ldr	r3, [r3, #20]
     d18:	movw	r0, #0
     d1c:	movt	r0, #0
     d20:	blx	r3
     d24:	mvn	r3, #0
     d28:	b	1150 <coda_za_read_entry+0x664>
     d2c:	ldr	r3, [fp, #-46]	; 0xffffffd2
     d30:	str	r3, [fp, #-80]	; 0xffffffb0
     d34:	ldr	r3, [fp, #-144]	; 0xffffff70
     d38:	ldr	r2, [r3, #24]
     d3c:	ldr	r3, [fp, #-80]	; 0xffffffb0
     d40:	cmp	r2, r3
     d44:	beq	d68 <coda_za_read_entry+0x27c>
     d48:	ldr	r3, [fp, #-144]	; 0xffffff70
     d4c:	ldr	r3, [r3, #40]	; 0x28
     d50:	ldr	r3, [r3, #20]
     d54:	movw	r0, #0
     d58:	movt	r0, #0
     d5c:	blx	r3
     d60:	mvn	r3, #0
     d64:	b	1150 <coda_za_read_entry+0x664>
     d68:	ldrh	r3, [fp, #-42]	; 0xffffffd6
     d6c:	strh	r3, [fp, #-24]	; 0xffffffe8
     d70:	ldr	r3, [fp, #-144]	; 0xffffff70
     d74:	ldrh	r3, [r3, #28]
     d78:	ldrh	r2, [fp, #-24]	; 0xffffffe8
     d7c:	cmp	r2, r3
     d80:	beq	da4 <coda_za_read_entry+0x2b8>
     d84:	ldr	r3, [fp, #-144]	; 0xffffff70
     d88:	ldr	r3, [r3, #40]	; 0x28
     d8c:	ldr	r3, [r3, #20]
     d90:	movw	r0, #0
     d94:	movt	r0, #0
     d98:	blx	r3
     d9c:	mvn	r3, #0
     da0:	b	1150 <coda_za_read_entry+0x664>
     da4:	ldrh	r3, [fp, #-40]	; 0xffffffd8
     da8:	strh	r3, [fp, #-26]	; 0xffffffe6
     dac:	ldr	r3, [fp, #-144]	; 0xffffff70
     db0:	ldr	r3, [r3, #40]	; 0x28
     db4:	ldr	r0, [r3]
     db8:	ldrh	r2, [fp, #-24]	; 0xffffffe8
     dbc:	ldrh	r3, [fp, #-26]	; 0xffffffe6
     dc0:	add	r3, r2, r3
     dc4:	mov	r2, #1
     dc8:	mov	r1, r3
     dcc:	bl	0 <lseek>
     dd0:	mov	r3, r0
     dd4:	cmp	r3, #0
     dd8:	bge	e10 <coda_za_read_entry+0x324>
     ddc:	ldr	r3, [fp, #-144]	; 0xffffff70
     de0:	ldr	r3, [r3, #40]	; 0x28
     de4:	ldr	r4, [r3, #20]
     de8:	bl	0 <__errno_location>
     dec:	mov	r3, r0
     df0:	ldr	r3, [r3]
     df4:	mov	r0, r3
     df8:	bl	0 <strerror>
     dfc:	mov	r3, r0
     e00:	mov	r0, r3
     e04:	blx	r4
     e08:	mvn	r3, #0
     e0c:	b	1150 <coda_za_read_entry+0x664>
     e10:	ldr	r3, [fp, #-144]	; 0xffffff70
     e14:	ldrh	r3, [r3, #4]
     e18:	cmp	r3, #0
     e1c:	bne	e80 <coda_za_read_entry+0x394>
     e20:	ldr	r3, [fp, #-144]	; 0xffffff70
     e24:	ldr	r3, [r3, #40]	; 0x28
     e28:	ldr	r0, [r3]
     e2c:	ldr	r3, [fp, #-144]	; 0xffffff70
     e30:	ldr	r3, [r3, #24]
     e34:	mov	r2, r3
     e38:	ldr	r1, [fp, #-148]	; 0xffffff6c
     e3c:	bl	0 <read>
     e40:	mov	r3, r0
     e44:	cmp	r3, #0
     e48:	bge	114c <coda_za_read_entry+0x660>
     e4c:	ldr	r3, [fp, #-144]	; 0xffffff70
     e50:	ldr	r3, [r3, #40]	; 0x28
     e54:	ldr	r4, [r3, #20]
     e58:	bl	0 <__errno_location>
     e5c:	mov	r3, r0
     e60:	ldr	r3, [r3]
     e64:	mov	r0, r3
     e68:	bl	0 <strerror>
     e6c:	mov	r3, r0
     e70:	mov	r0, r3
     e74:	blx	r4
     e78:	mvn	r3, #0
     e7c:	b	1150 <coda_za_read_entry+0x664>
     e80:	ldr	r3, [fp, #-144]	; 0xffffff70
     e84:	ldr	r3, [r3, #20]
     e88:	mov	r0, r3
     e8c:	bl	0 <malloc>
     e90:	mov	r3, r0
     e94:	str	r3, [fp, #-32]	; 0xffffffe0
     e98:	ldr	r3, [fp, #-32]	; 0xffffffe0
     e9c:	cmp	r3, #0
     ea0:	bne	ed0 <coda_za_read_entry+0x3e4>
     ea4:	ldr	r3, [fp, #-144]	; 0xffffff70
     ea8:	ldr	r3, [r3, #40]	; 0x28
     eac:	ldr	r3, [r3, #20]
     eb0:	ldr	r2, [fp, #-144]	; 0xffffff70
     eb4:	ldr	r2, [r2, #20]
     eb8:	mov	r1, r2
     ebc:	movw	r0, #0
     ec0:	movt	r0, #0
     ec4:	blx	r3
     ec8:	mvn	r3, #0
     ecc:	b	1150 <coda_za_read_entry+0x664>
     ed0:	ldr	r3, [fp, #-144]	; 0xffffff70
     ed4:	ldr	r3, [r3, #40]	; 0x28
     ed8:	ldr	r0, [r3]
     edc:	ldr	r3, [fp, #-144]	; 0xffffff70
     ee0:	ldr	r3, [r3, #20]
     ee4:	mov	r2, r3
     ee8:	ldr	r1, [fp, #-32]	; 0xffffffe0
     eec:	bl	0 <read>
     ef0:	mov	r3, r0
     ef4:	cmp	r3, #0
     ef8:	bge	f38 <coda_za_read_entry+0x44c>
     efc:	ldr	r3, [fp, #-144]	; 0xffffff70
     f00:	ldr	r3, [r3, #40]	; 0x28
     f04:	ldr	r4, [r3, #20]
     f08:	bl	0 <__errno_location>
     f0c:	mov	r3, r0
     f10:	ldr	r3, [r3]
     f14:	mov	r0, r3
     f18:	bl	0 <strerror>
     f1c:	mov	r3, r0
     f20:	mov	r0, r3
     f24:	blx	r4
     f28:	ldr	r0, [fp, #-32]	; 0xffffffe0
     f2c:	bl	0 <free>
     f30:	mvn	r3, #0
     f34:	b	1150 <coda_za_read_entry+0x664>
     f38:	mov	r3, #0
     f3c:	str	r3, [fp, #-136]	; 0xffffff78
     f40:	mov	r3, #0
     f44:	str	r3, [fp, #-132]	; 0xffffff7c
     f48:	mov	r3, #0
     f4c:	str	r3, [fp, #-104]	; 0xffffff98
     f50:	mov	r3, #0
     f54:	str	r3, [fp, #-100]	; 0xffffff9c
     f58:	mov	r3, #0
     f5c:	str	r3, [fp, #-96]	; 0xffffffa0
     f60:	mov	r3, #0
     f64:	str	r3, [fp, #-112]	; 0xffffff90
     f68:	sub	r0, fp, #136	; 0x88
     f6c:	mov	r3, #56	; 0x38
     f70:	movw	r2, #0
     f74:	movt	r2, #0
     f78:	mvn	r1, #14
     f7c:	bl	0 <coda_inflateInit2_>
     f80:	mov	r3, r0
     f84:	cmp	r3, #0
     f88:	beq	fe4 <coda_za_read_entry+0x4f8>
     f8c:	ldr	r3, [fp, #-112]	; 0xffffff90
     f90:	cmp	r3, #0
     f94:	beq	fbc <coda_za_read_entry+0x4d0>
     f98:	ldr	r3, [fp, #-144]	; 0xffffff70
     f9c:	ldr	r3, [r3, #40]	; 0x28
     fa0:	ldr	r3, [r3, #20]
     fa4:	ldr	r2, [fp, #-112]	; 0xffffff90
     fa8:	mov	r1, r2
     fac:	movw	r0, #0
     fb0:	movt	r0, #0
     fb4:	blx	r3
     fb8:	b	fd4 <coda_za_read_entry+0x4e8>
     fbc:	ldr	r3, [fp, #-144]	; 0xffffff70
     fc0:	ldr	r3, [r3, #40]	; 0x28
     fc4:	ldr	r3, [r3, #20]
     fc8:	movw	r0, #0
     fcc:	movt	r0, #0
     fd0:	blx	r3
     fd4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     fd8:	bl	0 <free>
     fdc:	mvn	r3, #0
     fe0:	b	1150 <coda_za_read_entry+0x664>
     fe4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     fe8:	str	r3, [fp, #-136]	; 0xffffff78
     fec:	ldr	r3, [fp, #-144]	; 0xffffff70
     ff0:	ldr	r3, [r3, #20]
     ff4:	str	r3, [fp, #-132]	; 0xffffff7c
     ff8:	ldr	r3, [fp, #-148]	; 0xffffff6c
     ffc:	str	r3, [fp, #-124]	; 0xffffff84
    1000:	ldr	r3, [fp, #-144]	; 0xffffff70
    1004:	ldr	r3, [r3, #24]
    1008:	str	r3, [fp, #-120]	; 0xffffff88
    100c:	sub	r3, fp, #136	; 0x88
    1010:	mov	r1, #4
    1014:	mov	r0, r3
    1018:	bl	0 <coda_inflate>
    101c:	str	r0, [fp, #-36]	; 0xffffffdc
    1020:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1024:	cmn	r3, #2
    1028:	bne	104c <coda_za_read_entry+0x560>
    102c:	movw	r3, #0
    1030:	movt	r3, #0
    1034:	movw	r2, #633	; 0x279
    1038:	movw	r1, #0
    103c:	movt	r1, #0
    1040:	movw	r0, #0
    1044:	movt	r0, #0
    1048:	bl	0 <__assert_fail>
    104c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1050:	cmn	r3, #3
    1054:	beq	1074 <coda_za_read_entry+0x588>
    1058:	ldr	r3, [fp, #-36]	; 0xffffffdc
    105c:	cmp	r3, #2
    1060:	beq	1074 <coda_za_read_entry+0x588>
    1064:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1068:	cmn	r3, #4
    106c:	beq	10a8 <coda_za_read_entry+0x5bc>
    1070:	b	10dc <coda_za_read_entry+0x5f0>
    1074:	ldr	r3, [fp, #-144]	; 0xffffff70
    1078:	ldr	r3, [r3, #40]	; 0x28
    107c:	ldr	r3, [r3, #20]
    1080:	movw	r0, #0
    1084:	movt	r0, #0
    1088:	blx	r3
    108c:	sub	r3, fp, #136	; 0x88
    1090:	mov	r0, r3
    1094:	bl	0 <coda_inflateEnd>
    1098:	ldr	r0, [fp, #-32]	; 0xffffffe0
    109c:	bl	0 <free>
    10a0:	mvn	r3, #0
    10a4:	b	1150 <coda_za_read_entry+0x664>
    10a8:	ldr	r3, [fp, #-144]	; 0xffffff70
    10ac:	ldr	r3, [r3, #40]	; 0x28
    10b0:	ldr	r3, [r3, #20]
    10b4:	movw	r0, #0
    10b8:	movt	r0, #0
    10bc:	blx	r3
    10c0:	sub	r3, fp, #136	; 0x88
    10c4:	mov	r0, r3
    10c8:	bl	0 <coda_inflateEnd>
    10cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    10d0:	bl	0 <free>
    10d4:	mvn	r3, #0
    10d8:	b	1150 <coda_za_read_entry+0x664>
    10dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    10e0:	bl	0 <free>
    10e4:	sub	r3, fp, #136	; 0x88
    10e8:	mov	r0, r3
    10ec:	bl	0 <coda_inflateEnd>
    10f0:	mov	r3, r0
    10f4:	cmp	r3, #0
    10f8:	beq	114c <coda_za_read_entry+0x660>
    10fc:	ldr	r3, [fp, #-112]	; 0xffffff90
    1100:	cmp	r3, #0
    1104:	beq	112c <coda_za_read_entry+0x640>
    1108:	ldr	r3, [fp, #-144]	; 0xffffff70
    110c:	ldr	r3, [r3, #40]	; 0x28
    1110:	ldr	r3, [r3, #20]
    1114:	ldr	r2, [fp, #-112]	; 0xffffff90
    1118:	mov	r1, r2
    111c:	movw	r0, #0
    1120:	movt	r0, #0
    1124:	blx	r3
    1128:	b	1144 <coda_za_read_entry+0x658>
    112c:	ldr	r3, [fp, #-144]	; 0xffffff70
    1130:	ldr	r3, [r3, #40]	; 0x28
    1134:	ldr	r3, [r3, #20]
    1138:	movw	r0, #0
    113c:	movt	r0, #0
    1140:	blx	r3
    1144:	mvn	r3, #0
    1148:	b	1150 <coda_za_read_entry+0x664>
    114c:	mov	r3, #0
    1150:	mov	r0, r3
    1154:	sub	sp, fp, #8
    1158:	ldr	r4, [sp]
    115c:	ldr	fp, [sp, #4]
    1160:	add	sp, sp, #8
    1164:	pop	{pc}		; (ldr pc, [sp], #4)

00001168 <coda_za_close>:
    1168:	str	fp, [sp, #-8]!
    116c:	str	lr, [sp, #4]
    1170:	add	fp, sp, #4
    1174:	sub	sp, sp, #16
    1178:	str	r0, [fp, #-16]
    117c:	ldr	r3, [fp, #-16]
    1180:	ldr	r3, [r3]
    1184:	mov	r0, r3
    1188:	bl	0 <close>
    118c:	ldr	r3, [fp, #-16]
    1190:	ldr	r3, [r3, #12]
    1194:	cmp	r3, #0
    1198:	beq	1220 <coda_za_close+0xb8>
    119c:	mov	r3, #0
    11a0:	str	r3, [fp, #-8]
    11a4:	b	11fc <coda_za_close+0x94>
    11a8:	ldr	r3, [fp, #-16]
    11ac:	ldr	r2, [r3, #12]
    11b0:	ldr	r3, [fp, #-8]
    11b4:	mov	r1, #44	; 0x2c
    11b8:	mul	r3, r1, r3
    11bc:	add	r3, r2, r3
    11c0:	ldr	r3, [r3, #36]	; 0x24
    11c4:	cmp	r3, #0
    11c8:	beq	11f0 <coda_za_close+0x88>
    11cc:	ldr	r3, [fp, #-16]
    11d0:	ldr	r2, [r3, #12]
    11d4:	ldr	r3, [fp, #-8]
    11d8:	mov	r1, #44	; 0x2c
    11dc:	mul	r3, r1, r3
    11e0:	add	r3, r2, r3
    11e4:	ldr	r3, [r3, #36]	; 0x24
    11e8:	mov	r0, r3
    11ec:	bl	0 <free>
    11f0:	ldr	r3, [fp, #-8]
    11f4:	add	r3, r3, #1
    11f8:	str	r3, [fp, #-8]
    11fc:	ldr	r3, [fp, #-16]
    1200:	ldr	r3, [r3, #4]
    1204:	ldr	r2, [fp, #-8]
    1208:	cmp	r2, r3
    120c:	blt	11a8 <coda_za_close+0x40>
    1210:	ldr	r3, [fp, #-16]
    1214:	ldr	r3, [r3, #12]
    1218:	mov	r0, r3
    121c:	bl	0 <free>
    1220:	ldr	r3, [fp, #-16]
    1224:	ldr	r3, [r3, #8]
    1228:	cmp	r3, #0
    122c:	beq	1240 <coda_za_close+0xd8>
    1230:	ldr	r3, [fp, #-16]
    1234:	ldr	r3, [r3, #8]
    1238:	mov	r0, r3
    123c:	bl	0 <free>
    1240:	ldr	r3, [fp, #-16]
    1244:	ldr	r3, [r3, #16]
    1248:	cmp	r3, #0
    124c:	beq	1260 <coda_za_close+0xf8>
    1250:	ldr	r3, [fp, #-16]
    1254:	ldr	r3, [r3, #16]
    1258:	mov	r0, r3
    125c:	bl	0 <coda_hashtable_delete>
    1260:	ldr	r0, [fp, #-16]
    1264:	bl	0 <free>
    1268:	nop	{0}
    126c:	sub	sp, fp, #4
    1270:	ldr	fp, [sp]
    1274:	add	sp, sp, #4
    1278:	pop	{pc}		; (ldr pc, [sp], #4)
