
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-mem-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_array>:
       0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
       4:	sub	sp, sp, #604	; 0x25c
       8:	mov	r6, r1
       c:	mov	r5, r2
      10:	add	r1, sp, #8
      14:	add	r2, sp, #12
      18:	mov	r7, r3
      1c:	mov	r4, r0
      20:	bl	0 <coda_cursor_get_array_dim>
      24:	subs	sl, r0, #0
      28:	bne	ec <read_array+0xec>
      2c:	mov	r1, r4
      30:	mov	r2, #520	; 0x208
      34:	add	r0, sp, #80	; 0x50
      38:	bl	0 <memcpy>
      3c:	ldr	r1, [sp, #8]
      40:	ldr	r2, [sp, #640]	; 0x280
      44:	cmp	r1, #1
      48:	movgt	r3, #0
      4c:	movle	r3, #1
      50:	cmp	r2, #1
      54:	orrne	r3, r3, #1
      58:	cmp	r3, #0
      5c:	beq	fc <read_array+0xfc>
      60:	cmp	r1, #0
      64:	ble	230 <read_array+0x230>
      68:	add	r3, sp, #12
      6c:	add	r1, r3, r1, lsl #2
      70:	mov	r8, #1
      74:	ldr	r2, [r3], #4
      78:	cmp	r1, r3
      7c:	mul	r8, r2, r8
      80:	bne	74 <read_array+0x74>
      84:	cmp	r8, #0
      88:	ble	e0 <read_array+0xe0>
      8c:	mov	r1, #0
      90:	add	r0, sp, #80	; 0x50
      94:	bl	0 <coda_cursor_goto_array_element_by_index>
      98:	subs	r4, r0, #0
      9c:	bne	ec <read_array+0xec>
      a0:	sub	r9, r8, #1
      a4:	mov	r1, r5
      a8:	add	r0, sp, #80	; 0x50
      ac:	blx	r6
      b0:	add	r5, r5, r7
      b4:	cmp	r0, #0
      b8:	add	r0, sp, #80	; 0x50
      bc:	bne	ec <read_array+0xec>
      c0:	cmp	r9, r4
      c4:	add	r4, r4, #1
      c8:	ble	d8 <read_array+0xd8>
      cc:	bl	0 <coda_cursor_goto_next_array_element>
      d0:	cmp	r0, #0
      d4:	bne	ec <read_array+0xec>
      d8:	cmp	r4, r8
      dc:	blt	a4 <read_array+0xa4>
      e0:	mov	r0, sl
      e4:	add	sp, sp, #604	; 0x25c
      e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ec:	mvn	sl, #0
      f0:	mov	r0, sl
      f4:	add	sp, sp, #604	; 0x25c
      f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
      fc:	mov	ip, #1
     100:	add	r9, sp, #600	; 0x258
     104:	add	r2, sp, #12
     108:	mov	r0, ip
     10c:	mov	r3, sl
     110:	str	ip, [r9, #-556]!	; 0xfffffdd4
     114:	ldr	ip, [r2], #4
     118:	add	r3, r3, #1
     11c:	cmp	r1, r3
     120:	mul	r0, ip, r0
     124:	str	r0, [r9, r3, lsl #2]
     128:	bgt	114 <read_array+0x114>
     12c:	add	r3, sp, #600	; 0x258
     130:	add	r3, r3, r1, lsl #2
     134:	ldr	r8, [r3, #-556]	; 0xfffffdd4
     138:	cmp	r8, #0
     13c:	ble	e0 <read_array+0xe0>
     140:	add	r3, sp, #600	; 0x258
     144:	add	r3, r3, r1, lsl #2
     148:	add	r0, sp, #80	; 0x50
     14c:	ldr	r3, [r3, #-560]	; 0xfffffdd0
     150:	mov	r1, #0
     154:	str	r3, [sp, #4]
     158:	bl	0 <coda_cursor_goto_array_element_by_index>
     15c:	subs	r4, r0, #0
     160:	bne	ec <read_array+0xec>
     164:	mov	fp, r4
     168:	mla	r1, r7, r4, r5
     16c:	add	r0, sp, #80	; 0x50
     170:	blx	r6
     174:	cmp	r0, #0
     178:	bne	ec <read_array+0xec>
     17c:	add	fp, fp, #1
     180:	cmp	r8, fp
     184:	bgt	20c <read_array+0x20c>
     188:	ldr	r3, [sp, #4]
     18c:	add	r4, r4, r3
     190:	cmp	r8, r4
     194:	bgt	168 <read_array+0x168>
     198:	cmp	r8, fp
     19c:	beq	e0 <read_array+0xe0>
     1a0:	ldr	r1, [sp, #8]
     1a4:	add	r3, sp, #600	; 0x258
     1a8:	subs	r0, r1, #3
     1ac:	add	r3, r3, r1, lsl #2
     1b0:	mov	ip, r3
     1b4:	ldr	r3, [r3, #-564]	; 0xfffffdcc
     1b8:	ldr	ip, [ip, #-556]	; 0xfffffdd4
     1bc:	add	r2, sp, #600	; 0x258
     1c0:	sub	r3, r3, ip
     1c4:	add	r4, r4, r3
     1c8:	bmi	168 <read_array+0x168>
     1cc:	add	r3, r2, r1, lsl #2
     1d0:	ldr	ip, [r3, #-560]	; 0xfffffdd0
     1d4:	cmp	ip, r4
     1d8:	bgt	168 <read_array+0x168>
     1dc:	add	r1, r9, r1, lsl #2
     1e0:	sub	r1, r1, #8
     1e4:	ldr	r3, [r1, #-4]!
     1e8:	sub	r0, r0, #1
     1ec:	sub	r3, r3, ip
     1f0:	cmn	r0, #1
     1f4:	add	r4, r4, r3
     1f8:	beq	168 <read_array+0x168>
     1fc:	ldr	ip, [r1, #4]
     200:	cmp	ip, r4
     204:	ble	1e4 <read_array+0x1e4>
     208:	b	168 <read_array+0x168>
     20c:	add	r0, sp, #80	; 0x50
     210:	bl	0 <coda_cursor_goto_next_array_element>
     214:	cmp	r0, #0
     218:	bne	ec <read_array+0xec>
     21c:	ldr	r3, [sp, #4]
     220:	add	r4, r4, r3
     224:	cmp	r4, r8
     228:	blt	168 <read_array+0x168>
     22c:	b	1a0 <read_array+0x1a0>
     230:	mov	r8, #1
     234:	b	8c <read_array+0x8c>

00000238 <read_partial_array>:
     238:	push	{r4, r5, r6, r7, r8, r9, lr}
     23c:	sub	sp, sp, #524	; 0x20c
     240:	mov	r6, r3
     244:	mov	r7, r1
     248:	mov	r4, r2
     24c:	mov	r1, r0
     250:	mov	r2, #520	; 0x208
     254:	mov	r0, sp
     258:	ldr	r8, [sp, #556]	; 0x22c
     25c:	bl	0 <memcpy>
     260:	cmp	r6, #0
     264:	ble	2c0 <read_partial_array+0x88>
     268:	mov	r1, r4
     26c:	mov	r0, sp
     270:	bl	0 <coda_cursor_goto_array_element_by_index>
     274:	subs	r4, r0, #0
     278:	subeq	r9, r6, #1
     27c:	ldreq	r5, [sp, #552]	; 0x228
     280:	bne	2cc <read_partial_array+0x94>
     284:	mov	r1, r5
     288:	mov	r0, sp
     28c:	blx	r7
     290:	add	r5, r5, r8
     294:	cmp	r0, #0
     298:	mov	r0, sp
     29c:	bne	2cc <read_partial_array+0x94>
     2a0:	cmp	r9, r4
     2a4:	add	r4, r4, #1
     2a8:	ble	2b8 <read_partial_array+0x80>
     2ac:	bl	0 <coda_cursor_goto_next_array_element>
     2b0:	cmp	r0, #0
     2b4:	bne	2cc <read_partial_array+0x94>
     2b8:	cmp	r6, r4
     2bc:	bne	284 <read_partial_array+0x4c>
     2c0:	mov	r0, #0
     2c4:	add	sp, sp, #524	; 0x20c
     2c8:	pop	{r4, r5, r6, r7, r8, r9, pc}
     2cc:	mvn	r0, #0
     2d0:	add	sp, sp, #524	; 0x20c
     2d4:	pop	{r4, r5, r6, r7, r8, r9, pc}

000002d8 <transpose_array>:
     2d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     2dc:	sub	sp, sp, #172	; 0xac
     2e0:	add	r4, sp, #28
     2e4:	str	r1, [sp, #12]
     2e8:	mov	r7, r2
     2ec:	add	r1, sp, #24
     2f0:	mov	r2, r4
     2f4:	bl	0 <coda_cursor_get_array_dim>
     2f8:	subs	r3, r0, #0
     2fc:	str	r3, [sp, #16]
     300:	bne	3f4 <transpose_array+0x11c>
     304:	ldr	r8, [sp, #24]
     308:	cmp	r8, #1
     30c:	ble	3fc <transpose_array+0x124>
     310:	lsl	r2, r8, #2
     314:	mov	r9, r3
     318:	add	ip, sp, #96	; 0x60
     31c:	add	r3, r4, r2
     320:	add	r0, sp, #132	; 0x84
     324:	mov	r1, r4
     328:	mov	r5, #1
     32c:	ldr	lr, [r3, #-4]!
     330:	ldr	r6, [r1], #4
     334:	cmp	r4, r3
     338:	str	r9, [ip], #4
     33c:	mul	r5, r6, r5
     340:	str	lr, [r0], #4
     344:	bne	32c <transpose_array+0x54>
     348:	cmp	r5, #1
     34c:	ble	3fc <transpose_array+0x124>
     350:	add	r3, sp, #168	; 0xa8
     354:	lsl	r8, r8, #2
     358:	add	lr, r3, r8
     35c:	mov	ip, #1
     360:	add	r0, sp, #60	; 0x3c
     364:	add	r6, sp, #132	; 0x84
     368:	add	r4, r0, r2
     36c:	mov	r1, ip
     370:	mov	r3, ip
     374:	add	r2, r6, r2
     378:	str	ip, [lr, #-108]	; 0xffffff94
     37c:	str	ip, [lr, #-36]	; 0xffffffdc
     380:	b	388 <transpose_array+0xb0>
     384:	ldr	r1, [r2, #-4]!
     388:	mul	r3, r1, r3
     38c:	str	r3, [r4, #-4]!
     390:	cmp	r4, r0
     394:	bne	384 <transpose_array+0xac>
     398:	mul	r3, r7, r5
     39c:	mov	r0, r3
     3a0:	str	r3, [sp, #8]
     3a4:	add	r3, sp, #168	; 0xa8
     3a8:	add	r8, r3, r8
     3ac:	mov	r3, #0
     3b0:	str	r3, [r8, #-36]	; 0xffffffdc
     3b4:	str	r3, [r8, #-72]	; 0xffffffb8
     3b8:	bl	0 <malloc>
     3bc:	subs	r6, r0, #0
     3c0:	beq	67c <transpose_array+0x3a4>
     3c4:	sub	r7, r7, #1
     3c8:	cmp	r7, #7
     3cc:	ldrls	pc, [pc, r7, lsl #2]
     3d0:	b	668 <transpose_array+0x390>
     3d4:	.word	0x000004b8
     3d8:	.word	0x0000054c
     3dc:	.word	0x00000668
     3e0:	.word	0x000005dc
     3e4:	.word	0x00000668
     3e8:	.word	0x00000668
     3ec:	.word	0x00000668
     3f0:	.word	0x00000408
     3f4:	mvn	r3, #0
     3f8:	str	r3, [sp, #16]
     3fc:	ldr	r0, [sp, #16]
     400:	add	sp, sp, #172	; 0xac
     404:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     408:	ldr	r2, [sp, #12]
     40c:	mov	r3, #0
     410:	ldr	r8, [sp, #132]	; 0x84
     414:	ldr	r7, [sp, #60]	; 0x3c
     418:	add	r1, r2, r5, lsl #3
     41c:	mov	r9, r2
     420:	mov	r5, r3
     424:	str	r1, [sp, #20]
     428:	ldr	ip, [sp, #96]	; 0x60
     42c:	ldrd	r0, [r9], #8
     430:	add	ip, ip, #1
     434:	lsl	r2, r3, #3
     438:	cmp	ip, r8
     43c:	str	ip, [sp, #96]	; 0x60
     440:	strd	r0, [r6, r2]
     444:	add	r3, r3, r7
     448:	bne	488 <transpose_array+0x1b0>
     44c:	add	fp, sp, #132	; 0x84
     450:	mov	sl, r4
     454:	add	r1, sp, #96	; 0x60
     458:	mov	lr, r7
     45c:	mul	r0, lr, ip
     460:	str	r5, [r1]
     464:	ldr	r2, [r1, #4]!
     468:	ldr	ip, [fp, #4]!
     46c:	add	r2, r2, #1
     470:	ldr	lr, [sl, #4]!
     474:	sub	r3, r3, r0
     478:	cmp	ip, r2
     47c:	add	r3, r3, lr
     480:	str	r2, [r1]
     484:	beq	45c <transpose_array+0x184>
     488:	ldr	r2, [sp, #20]
     48c:	cmp	r9, r2
     490:	bne	428 <transpose_array+0x150>
     494:	ldr	r2, [sp, #8]
     498:	mov	r1, r6
     49c:	ldr	r0, [sp, #12]
     4a0:	bl	0 <memcpy>
     4a4:	mov	r0, r6
     4a8:	bl	0 <free>
     4ac:	ldr	r0, [sp, #16]
     4b0:	add	sp, sp, #172	; 0xac
     4b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     4b8:	ldr	r3, [sp, #132]	; 0x84
     4bc:	ldr	r2, [sp, #12]
     4c0:	mov	r9, #0
     4c4:	ldr	fp, [sp, #60]	; 0x3c
     4c8:	str	r3, [sp, #20]
     4cc:	mov	r8, r9
     4d0:	mov	r3, r9
     4d4:	sub	sl, r2, #1
     4d8:	ldr	ip, [sp, #96]	; 0x60
     4dc:	ldrb	r2, [sl, #1]!
     4e0:	ldr	r1, [sp, #20]
     4e4:	add	ip, ip, #1
     4e8:	cmp	ip, r1
     4ec:	strb	r2, [r6, r3]
     4f0:	str	ip, [sp, #96]	; 0x60
     4f4:	add	r3, r3, fp
     4f8:	bne	538 <transpose_array+0x260>
     4fc:	add	r7, sp, #132	; 0x84
     500:	mov	r5, r4
     504:	add	r0, sp, #96	; 0x60
     508:	mov	lr, fp
     50c:	mul	r1, lr, ip
     510:	str	r8, [r0]
     514:	ldr	r2, [r0, #4]!
     518:	ldr	ip, [r7, #4]!
     51c:	add	r2, r2, #1
     520:	ldr	lr, [r5, #4]!
     524:	sub	r3, r3, r1
     528:	cmp	ip, r2
     52c:	add	r3, r3, lr
     530:	str	r2, [r0]
     534:	beq	50c <transpose_array+0x234>
     538:	ldr	r2, [sp, #8]
     53c:	add	r9, r9, #1
     540:	cmp	r2, r9
     544:	bgt	4d8 <transpose_array+0x200>
     548:	b	494 <transpose_array+0x1bc>
     54c:	ldr	r2, [sp, #12]
     550:	mov	r3, #0
     554:	ldr	fp, [sp, #132]	; 0x84
     558:	ldr	sl, [sp, #60]	; 0x3c
     55c:	mov	r8, r3
     560:	mov	r9, r2
     564:	add	r1, r2, r5, lsl #1
     568:	str	r1, [sp, #20]
     56c:	ldr	ip, [sp, #96]	; 0x60
     570:	ldrh	r1, [r9], #2
     574:	add	ip, ip, #1
     578:	lsl	r2, r3, #1
     57c:	cmp	ip, fp
     580:	str	ip, [sp, #96]	; 0x60
     584:	strh	r1, [r6, r2]
     588:	add	r3, r3, sl
     58c:	bne	5cc <transpose_array+0x2f4>
     590:	add	r7, sp, #132	; 0x84
     594:	mov	r5, r4
     598:	add	r0, sp, #96	; 0x60
     59c:	mov	lr, sl
     5a0:	mul	r1, lr, ip
     5a4:	str	r8, [r0]
     5a8:	ldr	r2, [r0, #4]!
     5ac:	ldr	ip, [r7, #4]!
     5b0:	add	r2, r2, #1
     5b4:	ldr	lr, [r5, #4]!
     5b8:	sub	r3, r3, r1
     5bc:	cmp	ip, r2
     5c0:	add	r3, r3, lr
     5c4:	str	r2, [r0]
     5c8:	beq	5a0 <transpose_array+0x2c8>
     5cc:	ldr	r2, [sp, #20]
     5d0:	cmp	r9, r2
     5d4:	bne	56c <transpose_array+0x294>
     5d8:	b	494 <transpose_array+0x1bc>
     5dc:	ldr	r2, [sp, #12]
     5e0:	mov	r3, #0
     5e4:	ldr	fp, [sp, #132]	; 0x84
     5e8:	ldr	sl, [sp, #60]	; 0x3c
     5ec:	mov	r8, r3
     5f0:	mov	r9, r2
     5f4:	add	r1, r2, r5, lsl #2
     5f8:	str	r1, [sp, #20]
     5fc:	ldr	ip, [sp, #96]	; 0x60
     600:	ldr	r2, [r9], #4
     604:	add	ip, ip, #1
     608:	cmp	ip, fp
     60c:	str	r2, [r6, r3, lsl #2]
     610:	str	ip, [sp, #96]	; 0x60
     614:	add	r3, r3, sl
     618:	bne	658 <transpose_array+0x380>
     61c:	add	r7, sp, #132	; 0x84
     620:	mov	r5, r4
     624:	add	r0, sp, #96	; 0x60
     628:	mov	lr, sl
     62c:	mul	r1, lr, ip
     630:	str	r8, [r0]
     634:	ldr	r2, [r0, #4]!
     638:	ldr	ip, [r7, #4]!
     63c:	add	r2, r2, #1
     640:	ldr	lr, [r5, #4]!
     644:	sub	r3, r3, r1
     648:	cmp	ip, r2
     64c:	add	r3, r3, lr
     650:	str	r2, [r0]
     654:	beq	62c <transpose_array+0x354>
     658:	ldr	r2, [sp, #20]
     65c:	cmp	r2, r9
     660:	bne	5fc <transpose_array+0x324>
     664:	b	494 <transpose_array+0x1bc>
     668:	ldr	r3, [pc, #52]	; 6a4 <transpose_array+0x3cc>
     66c:	mov	r2, #172	; 0xac
     670:	ldr	r1, [pc, #48]	; 6a8 <transpose_array+0x3d0>
     674:	ldr	r0, [pc, #48]	; 6ac <transpose_array+0x3d4>
     678:	bl	0 <__assert_fail>
     67c:	mov	r3, #93	; 0x5d
     680:	str	r3, [sp]
     684:	ldr	r2, [sp, #8]
     688:	ldr	r3, [pc, #24]	; 6a8 <transpose_array+0x3d0>
     68c:	ldr	r1, [pc, #28]	; 6b0 <transpose_array+0x3d8>
     690:	mvn	r0, #0
     694:	bl	0 <coda_set_error>
     698:	mvn	r3, #0
     69c:	str	r3, [sp, #16]
     6a0:	b	3fc <transpose_array+0x124>
	...
     6ac:	.word	0x0000008c
     6b0:	.word	0x00000054

000006b4 <coda_mem_cursor_get_bit_size.part.0>:
     6b4:	push	{r4, lr}
     6b8:	sub	sp, sp, #520	; 0x208
     6bc:	mov	r2, #520	; 0x208
     6c0:	mov	r4, r1
     6c4:	mov	r1, r0
     6c8:	mov	r0, sp
     6cc:	bl	0 <memcpy>
     6d0:	mov	r0, sp
     6d4:	bl	0 <coda_cursor_use_base_type_of_special_type>
     6d8:	cmp	r0, #0
     6dc:	mvnne	r0, #0
     6e0:	bne	6f0 <coda_mem_cursor_get_bit_size.part.0+0x3c>
     6e4:	mov	r1, r4
     6e8:	mov	r0, sp
     6ec:	bl	0 <coda_cursor_get_bit_size>
     6f0:	add	sp, sp, #520	; 0x208
     6f4:	pop	{r4, pc}

000006f8 <coda_mem_cursor_update_offset>:
     6f8:	ldr	r3, [r0, #4]
     6fc:	add	r2, r0, r3, lsl #4
     700:	ldr	r2, [r2, #-8]
     704:	ldr	r1, [r2, #8]
     708:	cmp	r1, #2
     70c:	bxne	lr
     710:	ldr	r1, [r2, #28]
     714:	ldr	ip, [r2, #24]
     718:	push	{lr}		; (str lr, [sp, #-4]!)
     71c:	lsl	r2, r1, #3
     720:	add	lr, r0, r3, lsl #4
     724:	orr	r2, r2, ip, lsr #29
     728:	lsl	ip, ip, #3
     72c:	str	ip, [r0, r3, lsl #4]
     730:	str	r2, [lr, #4]
     734:	pop	{pc}		; (ldr pc, [sp], #4)

00000738 <coda_mem_cursor_goto_record_field_by_index>:
     738:	push	{r4, r5, r6, r8, r9, lr}
     73c:	ldr	r5, [r0, #4]
     740:	add	r3, r0, r5, lsl #4
     744:	ldr	ip, [r3, #-8]
     748:	ldr	r3, [ip, #8]
     74c:	cmp	r3, #0
     750:	bne	7b0 <coda_mem_cursor_goto_record_field_by_index+0x78>
     754:	cmp	r1, #0
     758:	mov	r6, r1
     75c:	ldr	r3, [ip, #16]
     760:	blt	7c0 <coda_mem_cursor_goto_record_field_by_index+0x88>
     764:	cmp	r1, r3
     768:	bge	7c0 <coda_mem_cursor_goto_record_field_by_index+0x88>
     76c:	ldr	r2, [ip, #20]
     770:	add	r3, r5, #1
     774:	mov	r4, r0
     778:	ldr	r2, [r2, r1, lsl #2]
     77c:	str	r3, [r0, #4]
     780:	cmp	r2, #0
     784:	beq	7ec <coda_mem_cursor_goto_record_field_by_index+0xb4>
     788:	add	r5, r0, r5, lsl #4
     78c:	str	r2, [r5, #8]
     790:	add	r2, r4, r3, lsl #4
     794:	mvn	r8, #0
     798:	lsl	r3, r3, #4
     79c:	mvn	r9, #0
     7a0:	str	r6, [r2, #-4]
     7a4:	mov	r0, #0
     7a8:	strd	r8, [r4, r3]
     7ac:	pop	{r4, r5, r6, r8, r9, pc}
     7b0:	cmp	r3, #2
     7b4:	bne	7d8 <coda_mem_cursor_goto_record_field_by_index+0xa0>
     7b8:	pop	{r4, r5, r6, r8, r9, lr}
     7bc:	b	0 <coda_ascbin_cursor_goto_record_field_by_index>
     7c0:	mov	r2, r6
     7c4:	ldr	r1, [pc, #60]	; 808 <coda_mem_cursor_goto_record_field_by_index+0xd0>
     7c8:	mvn	r0, #100	; 0x64
     7cc:	bl	0 <coda_set_error>
     7d0:	mvn	r0, #0
     7d4:	pop	{r4, r5, r6, r8, r9, pc}
     7d8:	ldr	r3, [pc, #44]	; 80c <coda_mem_cursor_goto_record_field_by_index+0xd4>
     7dc:	mov	r2, #79	; 0x4f
     7e0:	ldr	r1, [pc, #40]	; 810 <coda_mem_cursor_goto_record_field_by_index+0xd8>
     7e4:	ldr	r0, [pc, #40]	; 814 <coda_mem_cursor_goto_record_field_by_index+0xdc>
     7e8:	bl	0 <__assert_fail>
     7ec:	ldr	r3, [ip, #4]
     7f0:	add	r5, r4, r5, lsl #4
     7f4:	ldr	r0, [r3]
     7f8:	bl	0 <coda_no_data_singleton>
     7fc:	ldr	r3, [r4, #4]
     800:	str	r0, [r5, #8]
     804:	b	790 <coda_mem_cursor_goto_record_field_by_index+0x58>
     808:	.word	0x00000090
     80c:	.word	0x00000010
     810:	.word	0x000000c0
     814:	.word	0x00000110

00000818 <coda_mem_cursor_goto_next_record_field>:
     818:	ldr	r3, [r0, #4]
     81c:	push	{r4, r5, r6, lr}
     820:	add	r2, r0, r3, lsl #4
     824:	ldr	r1, [r2, #-24]	; 0xffffffe8
     828:	ldr	r2, [r1, #8]
     82c:	cmp	r2, #0
     830:	bne	890 <coda_mem_cursor_goto_next_record_field+0x78>
     834:	sub	r3, r3, #1
     838:	mov	r4, r0
     83c:	lsl	ip, r3, #4
     840:	add	r6, r0, ip
     844:	ldr	r2, [r1, #16]
     848:	ldr	r5, [r6, #12]
     84c:	adds	r5, r5, #1
     850:	bmi	8a0 <coda_mem_cursor_goto_next_record_field+0x88>
     854:	cmp	r5, r2
     858:	bge	8a0 <coda_mem_cursor_goto_next_record_field+0x88>
     85c:	ldr	r2, [r1, #20]
     860:	ldr	r2, [r2, r5, lsl #2]
     864:	cmp	r2, #0
     868:	beq	8d0 <coda_mem_cursor_goto_next_record_field+0xb8>
     86c:	str	r2, [r6, #8]
     870:	add	ip, r4, ip
     874:	mvn	r2, #0
     878:	add	r4, r4, r3, lsl #4
     87c:	mvn	r3, #0
     880:	str	r5, [ip, #12]
     884:	mov	r0, #0
     888:	strd	r2, [r4, #16]
     88c:	pop	{r4, r5, r6, pc}
     890:	cmp	r2, #2
     894:	bne	8bc <coda_mem_cursor_goto_next_record_field+0xa4>
     898:	pop	{r4, r5, r6, lr}
     89c:	b	0 <coda_ascbin_cursor_goto_next_record_field>
     8a0:	mov	r3, r2
     8a4:	ldr	r1, [pc, #68]	; 8f0 <coda_mem_cursor_goto_next_record_field+0xd8>
     8a8:	mov	r2, r5
     8ac:	mvn	r0, #100	; 0x64
     8b0:	bl	0 <coda_set_error>
     8b4:	mvn	r0, #0
     8b8:	pop	{r4, r5, r6, pc}
     8bc:	ldr	r3, [pc, #48]	; 8f4 <coda_mem_cursor_goto_next_record_field+0xdc>
     8c0:	mov	r2, #111	; 0x6f
     8c4:	ldr	r1, [pc, #44]	; 8f8 <coda_mem_cursor_goto_next_record_field+0xe0>
     8c8:	ldr	r0, [pc, #44]	; 8fc <coda_mem_cursor_goto_next_record_field+0xe4>
     8cc:	bl	0 <__assert_fail>
     8d0:	ldr	r3, [r1, #4]
     8d4:	ldr	r0, [r3]
     8d8:	bl	0 <coda_no_data_singleton>
     8dc:	ldr	r3, [r4, #4]
     8e0:	sub	r3, r3, #1
     8e4:	lsl	ip, r3, #4
     8e8:	str	r0, [r6, #8]
     8ec:	b	870 <coda_mem_cursor_goto_next_record_field+0x58>
     8f0:	.word	0x00000090
     8f4:	.word	0x0000003c
     8f8:	.word	0x000000c0
     8fc:	.word	0x00000110

00000900 <coda_mem_cursor_goto_array_element>:
     900:	push	{r4, r5, r6, r7, r8, lr}
     904:	ldr	r5, [r0, #4]
     908:	add	r3, r0, r5, lsl #4
     90c:	ldr	r6, [r3, #-8]
     910:	ldr	r3, [r6, #8]
     914:	cmp	r3, #1
     918:	beq	92c <coda_mem_cursor_goto_array_element+0x2c>
     91c:	cmp	r3, #2
     920:	bne	9cc <coda_mem_cursor_goto_array_element+0xcc>
     924:	pop	{r4, r5, r6, r7, r8, lr}
     928:	b	0 <coda_ascbin_cursor_goto_array_element>
     92c:	cmp	r1, #1
     930:	bne	9b4 <coda_mem_cursor_goto_array_element+0xb4>
     934:	ldr	r3, [pc, #164]	; 9e0 <coda_mem_cursor_goto_array_element+0xe0>
     938:	mov	r4, r0
     93c:	bl	0 <__aeabi_read_tp>
     940:	ldr	r3, [pc, r3]
     944:	mov	r7, r2
     948:	ldr	r2, [r2]
     94c:	ldr	r3, [r0, r3]
     950:	cmp	r3, #0
     954:	beq	96c <coda_mem_cursor_goto_array_element+0x6c>
     958:	cmp	r2, #0
     95c:	ldr	r3, [r6, #16]
     960:	blt	9a0 <coda_mem_cursor_goto_array_element+0xa0>
     964:	cmp	r2, r3
     968:	bge	9a0 <coda_mem_cursor_goto_array_element+0xa0>
     96c:	ldr	r1, [r6, #20]
     970:	add	r3, r5, #1
     974:	mvn	r6, #0
     978:	ldr	r0, [r1, r2, lsl #2]
     97c:	add	r5, r4, r5, lsl #4
     980:	lsl	r1, r3, #4
     984:	mvn	r7, #0
     988:	str	r3, [r4, #4]
     98c:	str	r0, [r5, #8]
     990:	str	r2, [r5, #12]
     994:	mov	r0, #0
     998:	strd	r6, [r4, r1]
     99c:	pop	{r4, r5, r6, r7, r8, pc}
     9a0:	ldr	r1, [pc, #60]	; 9e4 <coda_mem_cursor_goto_array_element+0xe4>
     9a4:	mvn	r0, #106	; 0x6a
     9a8:	bl	0 <coda_set_error>
     9ac:	mvn	r0, #0
     9b0:	pop	{r4, r5, r6, r7, r8, pc}
     9b4:	mov	r2, r1
     9b8:	mvn	r0, #105	; 0x69
     9bc:	ldr	r1, [pc, #36]	; 9e8 <coda_mem_cursor_goto_array_element+0xe8>
     9c0:	bl	0 <coda_set_error>
     9c4:	mvn	r0, #0
     9c8:	pop	{r4, r5, r6, r7, r8, pc}
     9cc:	ldr	r3, [pc, #24]	; 9ec <coda_mem_cursor_goto_array_element+0xec>
     9d0:	mov	r2, #169	; 0xa9
     9d4:	ldr	r1, [pc, #20]	; 9f0 <coda_mem_cursor_goto_array_element+0xf0>
     9d8:	ldr	r0, [pc, #20]	; 9f4 <coda_mem_cursor_goto_array_element+0xf4>
     9dc:	bl	0 <__assert_fail>
     9e0:	.word	0x00000098
     9e4:	.word	0x00000170
     9e8:	.word	0x0000012c
     9ec:	.word	0x00000064
     9f0:	.word	0x000000c0
     9f4:	.word	0x00000110

000009f8 <coda_mem_cursor_goto_array_element_by_index>:
     9f8:	push	{r4, r5, r6, r7, r8, lr}
     9fc:	ldr	r5, [r0, #4]
     a00:	add	r3, r0, r5, lsl #4
     a04:	ldr	r6, [r3, #-8]
     a08:	ldr	r3, [r6, #8]
     a0c:	cmp	r3, #1
     a10:	beq	a24 <coda_mem_cursor_goto_array_element_by_index+0x2c>
     a14:	cmp	r3, #2
     a18:	bne	aa0 <coda_mem_cursor_goto_array_element_by_index+0xa8>
     a1c:	pop	{r4, r5, r6, r7, r8, lr}
     a20:	b	0 <coda_ascbin_cursor_goto_array_element_by_index>
     a24:	ldr	r3, [pc, #136]	; ab4 <coda_mem_cursor_goto_array_element_by_index+0xbc>
     a28:	mov	r4, r0
     a2c:	bl	0 <__aeabi_read_tp>
     a30:	ldr	r3, [pc, r3]
     a34:	mov	r2, r1
     a38:	ldr	r3, [r0, r3]
     a3c:	cmp	r3, #0
     a40:	beq	a58 <coda_mem_cursor_goto_array_element_by_index+0x60>
     a44:	cmp	r1, #0
     a48:	ldr	r3, [r6, #16]
     a4c:	blt	a8c <coda_mem_cursor_goto_array_element_by_index+0x94>
     a50:	cmp	r1, r3
     a54:	bge	a8c <coda_mem_cursor_goto_array_element_by_index+0x94>
     a58:	ldr	r1, [r6, #20]
     a5c:	add	r3, r5, #1
     a60:	mvn	r6, #0
     a64:	ldr	r0, [r1, r2, lsl #2]
     a68:	add	r5, r4, r5, lsl #4
     a6c:	lsl	r1, r3, #4
     a70:	mvn	r7, #0
     a74:	str	r3, [r4, #4]
     a78:	str	r0, [r5, #8]
     a7c:	str	r2, [r5, #12]
     a80:	mov	r0, #0
     a84:	strd	r6, [r4, r1]
     a88:	pop	{r4, r5, r6, r7, r8, pc}
     a8c:	ldr	r1, [pc, #36]	; ab8 <coda_mem_cursor_goto_array_element_by_index+0xc0>
     a90:	mvn	r0, #106	; 0x6a
     a94:	bl	0 <coda_set_error>
     a98:	mvn	r0, #0
     a9c:	pop	{r4, r5, r6, r7, r8, pc}
     aa0:	ldr	r3, [pc, #20]	; abc <coda_mem_cursor_goto_array_element_by_index+0xc4>
     aa4:	mov	r2, #197	; 0xc5
     aa8:	ldr	r1, [pc, #16]	; ac0 <coda_mem_cursor_goto_array_element_by_index+0xc8>
     aac:	ldr	r0, [pc, #16]	; ac4 <coda_mem_cursor_goto_array_element_by_index+0xcc>
     ab0:	bl	0 <__assert_fail>
     ab4:	.word	0x0000007c
     ab8:	.word	0x00000170
     abc:	.word	0x00000088
     ac0:	.word	0x000000c0
     ac4:	.word	0x00000110

00000ac8 <coda_mem_cursor_goto_next_array_element>:
     ac8:	ldr	r3, [r0, #4]
     acc:	push	{r4, r5, r6, lr}
     ad0:	add	r2, r0, r3, lsl #4
     ad4:	ldr	r1, [r2, #-24]	; 0xffffffe8
     ad8:	ldr	r2, [r1, #8]
     adc:	cmp	r2, #1
     ae0:	beq	af4 <coda_mem_cursor_goto_next_array_element+0x2c>
     ae4:	cmp	r2, #2
     ae8:	bne	b8c <coda_mem_cursor_goto_next_array_element+0xc4>
     aec:	pop	{r4, r5, r6, lr}
     af0:	b	0 <coda_ascbin_cursor_goto_next_array_element>
     af4:	sub	r3, r3, #1
     af8:	mov	r4, r0
     afc:	lsl	ip, r3, #4
     b00:	add	r6, r0, ip
     b04:	ldr	r2, [r1, #16]
     b08:	ldr	r5, [r6, #12]
     b0c:	adds	r5, r5, #1
     b10:	bmi	b70 <coda_mem_cursor_goto_next_array_element+0xa8>
     b14:	cmp	r5, r2
     b18:	bge	b70 <coda_mem_cursor_goto_next_array_element+0xa8>
     b1c:	ldr	r2, [r1, #20]
     b20:	ldr	r2, [r2, r5, lsl #2]
     b24:	cmp	r2, #0
     b28:	beq	b50 <coda_mem_cursor_goto_next_array_element+0x88>
     b2c:	str	r2, [r6, #8]
     b30:	add	ip, r4, ip
     b34:	mvn	r2, #0
     b38:	add	r4, r4, r3, lsl #4
     b3c:	mvn	r3, #0
     b40:	str	r5, [ip, #12]
     b44:	mov	r0, #0
     b48:	strd	r2, [r4, #16]
     b4c:	pop	{r4, r5, r6, pc}
     b50:	ldr	r3, [r1, #4]
     b54:	ldr	r0, [r3]
     b58:	bl	0 <coda_no_data_singleton>
     b5c:	ldr	r3, [r4, #4]
     b60:	sub	r3, r3, #1
     b64:	lsl	ip, r3, #4
     b68:	str	r0, [r6, #8]
     b6c:	b	b30 <coda_mem_cursor_goto_next_array_element+0x68>
     b70:	mov	r3, r2
     b74:	ldr	r1, [pc, #36]	; ba0 <coda_mem_cursor_goto_next_array_element+0xd8>
     b78:	mov	r2, r5
     b7c:	mvn	r0, #106	; 0x6a
     b80:	bl	0 <coda_set_error>
     b84:	mvn	r0, #0
     b88:	pop	{r4, r5, r6, pc}
     b8c:	ldr	r3, [pc, #16]	; ba4 <coda_mem_cursor_goto_next_array_element+0xdc>
     b90:	mov	r2, #229	; 0xe5
     b94:	ldr	r1, [pc, #12]	; ba8 <coda_mem_cursor_goto_next_array_element+0xe0>
     b98:	ldr	r0, [pc, #12]	; bac <coda_mem_cursor_goto_next_array_element+0xe4>
     b9c:	bl	0 <__assert_fail>
     ba0:	.word	0x00000170
     ba4:	.word	0x000000b4
     ba8:	.word	0x000000c0
     bac:	.word	0x00000110

00000bb0 <coda_mem_cursor_goto_attributes>:
     bb0:	push	{r4, r5, r6, r7, r8, lr}
     bb4:	mov	r4, r0
     bb8:	ldr	r5, [r0, #4]
     bbc:	add	r3, r5, #1
     bc0:	add	r2, r0, r5, lsl #4
     bc4:	str	r3, [r0, #4]
     bc8:	ldr	r1, [r2, #-8]
     bcc:	ldr	r2, [r1, #12]
     bd0:	cmp	r2, #0
     bd4:	beq	c04 <coda_mem_cursor_goto_attributes+0x54>
     bd8:	add	r5, r0, r5, lsl #4
     bdc:	str	r2, [r5, #8]
     be0:	add	r2, r4, r3, lsl #4
     be4:	mvn	r6, #0
     be8:	lsl	r3, r3, #4
     bec:	mvn	r7, #0
     bf0:	mvn	r1, #0
     bf4:	str	r1, [r2, #-4]
     bf8:	mov	r0, #0
     bfc:	strd	r6, [r4, r3]
     c00:	pop	{r4, r5, r6, r7, r8, pc}
     c04:	ldr	r3, [r1, #4]
     c08:	add	r5, r4, r5, lsl #4
     c0c:	ldr	r0, [r3]
     c10:	bl	0 <coda_mem_empty_record>
     c14:	ldr	r3, [r4, #4]
     c18:	str	r0, [r5, #8]
     c1c:	b	be0 <coda_mem_cursor_goto_attributes+0x30>

00000c20 <coda_mem_cursor_use_base_type_of_special_type>:
     c20:	ldr	r3, [r0, #4]
     c24:	sub	r3, r3, #1
     c28:	add	r0, r0, r3, lsl #4
     c2c:	ldr	r3, [r0, #8]
     c30:	ldr	r2, [r3, #8]
     c34:	cmp	r2, #3
     c38:	beq	c58 <coda_mem_cursor_use_base_type_of_special_type+0x38>
     c3c:	cmp	r2, #2
     c40:	bne	c68 <coda_mem_cursor_use_base_type_of_special_type+0x48>
     c44:	ldr	r3, [r3, #4]
     c48:	ldr	r3, [r3, #44]	; 0x2c
     c4c:	str	r3, [r0, #8]
     c50:	mov	r0, #0
     c54:	bx	lr
     c58:	ldr	r3, [r3, #16]
     c5c:	str	r3, [r0, #8]
     c60:	mov	r0, #0
     c64:	bx	lr
     c68:	push	{r4, lr}
     c6c:	ldr	r3, [pc, #12]	; c80 <coda_mem_cursor_use_base_type_of_special_type+0x60>
     c70:	ldr	r2, [pc, #12]	; c84 <coda_mem_cursor_use_base_type_of_special_type+0x64>
     c74:	ldr	r1, [pc, #12]	; c88 <coda_mem_cursor_use_base_type_of_special_type+0x68>
     c78:	ldr	r0, [pc, #12]	; c8c <coda_mem_cursor_use_base_type_of_special_type+0x6c>
     c7c:	bl	0 <__assert_fail>
     c80:	.word	0x000000dc
     c84:	.word	0x00000107
     c88:	.word	0x000000c0
     c8c:	.word	0x00000110

00000c90 <coda_mem_cursor_get_bit_size>:
     c90:	ldr	ip, [r0, #4]
     c94:	push	{r4, r5, r6, lr}
     c98:	add	r3, r0, ip, lsl #4
     c9c:	ldr	r5, [r3, #-8]
     ca0:	ldr	r3, [r5, #8]
     ca4:	cmp	r3, #3
     ca8:	beq	d14 <coda_mem_cursor_get_bit_size+0x84>
     cac:	cmp	r3, #2
     cb0:	beq	cc8 <coda_mem_cursor_get_bit_size+0x38>
     cb4:	mvn	r4, #0
     cb8:	mvn	r5, #0
     cbc:	mov	r0, #0
     cc0:	strd	r4, [r1]
     cc4:	pop	{r4, r5, r6, pc}
     cc8:	ldr	r3, [r5, #4]
     ccc:	mov	r4, r1
     cd0:	ldr	r3, [r3]
     cd4:	cmp	r3, #0
     cd8:	beq	d00 <coda_mem_cursor_get_bit_size+0x70>
     cdc:	bl	0 <coda_bin_cursor_get_bit_size>
     ce0:	cmp	r0, #0
     ce4:	bne	d0c <coda_mem_cursor_get_bit_size+0x7c>
     ce8:	ldrd	r2, [r4]
     cec:	cmp	r2, #0
     cf0:	sbcs	r3, r3, #0
     cf4:	blt	d1c <coda_mem_cursor_get_bit_size+0x8c>
     cf8:	mov	r0, #0
     cfc:	pop	{r4, r5, r6, pc}
     d00:	bl	0 <coda_ascii_cursor_get_bit_size>
     d04:	cmp	r0, #0
     d08:	beq	ce8 <coda_mem_cursor_get_bit_size+0x58>
     d0c:	mvn	r0, #0
     d10:	pop	{r4, r5, r6, pc}
     d14:	pop	{r4, r5, r6, lr}
     d18:	b	6b4 <coda_mem_cursor_get_bit_size.part.0>
     d1c:	ldr	r2, [r5, #16]
     d20:	mov	r0, #0
     d24:	lsl	r2, r2, #3
     d28:	asr	r3, r2, #31
     d2c:	strd	r2, [r4]
     d30:	pop	{r4, r5, r6, pc}

00000d34 <coda_mem_cursor_get_string_length>:
     d34:	push	{r4, lr}
     d38:	sub	sp, sp, #8
     d3c:	mov	r4, r1
     d40:	mov	r1, sp
     d44:	bl	c90 <coda_mem_cursor_get_bit_size>
     d48:	cmp	r0, #0
     d4c:	bne	d78 <coda_mem_cursor_get_string_length+0x44>
     d50:	ldrd	r2, [sp]
     d54:	cmp	r2, #0
     d58:	sbcs	r1, r3, #0
     d5c:	lsrge	r2, r2, #3
     d60:	mvnlt	r3, #0
     d64:	orrge	r2, r2, r3, lsl #29
     d68:	strlt	r3, [r4]
     d6c:	strge	r2, [r4]
     d70:	add	sp, sp, #8
     d74:	pop	{r4, pc}
     d78:	mvn	r0, #0
     d7c:	b	d70 <coda_mem_cursor_get_string_length+0x3c>

00000d80 <coda_mem_cursor_get_num_elements>:
     d80:	ldr	r3, [r0, #4]
     d84:	add	r3, r0, r3, lsl #4
     d88:	ldr	r2, [r3, #-8]
     d8c:	ldr	r3, [r2, #8]
     d90:	cmp	r3, #3
     d94:	ldrls	pc, [pc, r3, lsl #2]
     d98:	b	de4 <coda_mem_cursor_get_num_elements+0x64>
     d9c:	.word	0x00000dac
     da0:	.word	0x00000dac
     da4:	.word	0x00000dcc
     da8:	.word	0x00000dbc
     dac:	ldr	r3, [r2, #16]
     db0:	mov	r0, #0
     db4:	str	r3, [r1]
     db8:	bx	lr
     dbc:	mov	r3, #1
     dc0:	str	r3, [r1]
     dc4:	mov	r0, #0
     dc8:	bx	lr
     dcc:	ldr	r3, [r2, #4]
     dd0:	ldr	r3, [r3]
     dd4:	cmp	r3, #0
     dd8:	bne	de0 <coda_mem_cursor_get_num_elements+0x60>
     ddc:	b	0 <coda_ascii_cursor_get_num_elements>
     de0:	b	0 <coda_bin_cursor_get_num_elements>
     de4:	mov	r0, #0
     de8:	bx	lr

00000dec <coda_mem_cursor_get_record_field_available_status>:
     dec:	push	{r4, lr}
     df0:	ldr	lr, [r0, #4]
     df4:	add	ip, r0, lr, lsl #4
     df8:	ldr	lr, [ip, #-8]
     dfc:	ldr	ip, [lr, #8]
     e00:	cmp	ip, #2
     e04:	beq	e48 <coda_mem_cursor_get_record_field_available_status+0x5c>
     e08:	cmp	ip, #0
     e0c:	mov	r4, r2
     e10:	mov	r2, r1
     e14:	bne	e64 <coda_mem_cursor_get_record_field_available_status+0x78>
     e18:	cmp	r1, #0
     e1c:	ldr	r3, [lr, #16]
     e20:	blt	e50 <coda_mem_cursor_get_record_field_available_status+0x64>
     e24:	cmp	r1, r3
     e28:	bge	e50 <coda_mem_cursor_get_record_field_available_status+0x64>
     e2c:	ldr	r3, [lr, #20]
     e30:	mov	r0, ip
     e34:	ldr	r3, [r3, r1, lsl #2]
     e38:	adds	r3, r3, #0
     e3c:	movne	r3, #1
     e40:	str	r3, [r4]
     e44:	pop	{r4, pc}
     e48:	pop	{r4, lr}
     e4c:	b	0 <coda_ascbin_cursor_get_record_field_available_status>
     e50:	ldr	r1, [pc, #32]	; e78 <coda_mem_cursor_get_record_field_available_status+0x8c>
     e54:	mvn	r0, #100	; 0x64
     e58:	bl	0 <coda_set_error>
     e5c:	mvn	r0, #0
     e60:	pop	{r4, pc}
     e64:	ldr	r3, [pc, #16]	; e7c <coda_mem_cursor_get_record_field_available_status+0x90>
     e68:	mov	r2, #364	; 0x16c
     e6c:	ldr	r1, [pc, #12]	; e80 <coda_mem_cursor_get_record_field_available_status+0x94>
     e70:	ldr	r0, [pc, #12]	; e84 <coda_mem_cursor_get_record_field_available_status+0x98>
     e74:	bl	0 <__assert_fail>
     e78:	.word	0x00000090
     e7c:	.word	0x0000010c
     e80:	.word	0x000000c0
     e84:	.word	0x000001a0

00000e88 <coda_mem_cursor_get_available_union_field_index>:
     e88:	ldr	r2, [r0, #4]
     e8c:	push	{r4, lr}
     e90:	add	r3, r0, r2, lsl #4
     e94:	ldr	r2, [r3, #-8]
     e98:	ldr	ip, [r2, #8]
     e9c:	cmp	ip, #0
     ea0:	bne	ef4 <coda_mem_cursor_get_available_union_field_index+0x6c>
     ea4:	ldr	r0, [r2, #16]
     ea8:	cmp	r0, #0
     eac:	ble	ee0 <coda_mem_cursor_get_available_union_field_index+0x58>
     eb0:	ldr	r2, [r2, #20]
     eb4:	mov	lr, r1
     eb8:	ldr	r3, [r2]
     ebc:	cmp	r3, #0
     ec0:	beq	ed4 <coda_mem_cursor_get_available_union_field_index+0x4c>
     ec4:	b	f04 <coda_mem_cursor_get_available_union_field_index+0x7c>
     ec8:	ldr	r1, [r2, #4]!
     ecc:	cmp	r1, #0
     ed0:	bne	f08 <coda_mem_cursor_get_available_union_field_index+0x80>
     ed4:	add	r3, r3, #1
     ed8:	cmp	r3, r0
     edc:	bne	ec8 <coda_mem_cursor_get_available_union_field_index+0x40>
     ee0:	ldr	r1, [pc, #64]	; f28 <coda_mem_cursor_get_available_union_field_index+0xa0>
     ee4:	ldr	r0, [pc, #64]	; f2c <coda_mem_cursor_get_available_union_field_index+0xa4>
     ee8:	bl	0 <coda_set_error>
     eec:	mvn	r0, #0
     ef0:	pop	{r4, pc}
     ef4:	cmp	ip, #2
     ef8:	bne	f14 <coda_mem_cursor_get_available_union_field_index+0x8c>
     efc:	pop	{r4, lr}
     f00:	b	0 <coda_ascbin_cursor_get_available_union_field_index>
     f04:	mov	r3, ip
     f08:	str	r3, [lr]
     f0c:	mov	r0, #0
     f10:	pop	{r4, pc}
     f14:	ldr	r3, [pc, #20]	; f30 <coda_mem_cursor_get_available_union_field_index+0xa8>
     f18:	ldr	r2, [pc, #20]	; f34 <coda_mem_cursor_get_available_union_field_index+0xac>
     f1c:	ldr	r1, [pc, #20]	; f38 <coda_mem_cursor_get_available_union_field_index+0xb0>
     f20:	ldr	r0, [pc, #20]	; f3c <coda_mem_cursor_get_available_union_field_index+0xb4>
     f24:	bl	0 <__assert_fail>
     f28:	.word	0x000001bc
     f2c:	.word	0xfffffed4
     f30:	.word	0x00000140
     f34:	.word	0x0000018f
     f38:	.word	0x000000c0
     f3c:	.word	0x000001dc

00000f40 <coda_mem_cursor_goto_available_union_field>:
     f40:	ldr	r3, [r0, #4]
     f44:	push	{r4, r5, r6, r7, lr}
     f48:	sub	sp, sp, #12
     f4c:	add	r3, r0, r3, lsl #4
     f50:	ldr	r5, [r3, #-8]
     f54:	ldr	r3, [r5, #8]
     f58:	cmp	r3, #0
     f5c:	beq	f74 <coda_mem_cursor_goto_available_union_field+0x34>
     f60:	cmp	r3, #2
     f64:	bne	fc4 <coda_mem_cursor_goto_available_union_field+0x84>
     f68:	bl	0 <coda_ascbin_cursor_goto_available_union_field>
     f6c:	add	sp, sp, #12
     f70:	pop	{r4, r5, r6, r7, pc}
     f74:	add	r1, sp, #4
     f78:	mov	r4, r0
     f7c:	bl	e88 <coda_mem_cursor_get_available_union_field_index>
     f80:	cmp	r0, #0
     f84:	mvnne	r0, #0
     f88:	bne	f6c <coda_mem_cursor_goto_available_union_field+0x2c>
     f8c:	ldr	r3, [r4, #4]
     f90:	ldr	ip, [r5, #20]
     f94:	ldr	r1, [sp, #4]
     f98:	sub	r2, r3, #1
     f9c:	mvn	r6, #0
     fa0:	ldr	ip, [ip, r1, lsl #2]
     fa4:	add	r2, r4, r2, lsl #4
     fa8:	lsl	r3, r3, #4
     fac:	mvn	r7, #0
     fb0:	str	ip, [r2, #8]
     fb4:	str	r1, [r2, #12]
     fb8:	strd	r6, [r4, r3]
     fbc:	add	sp, sp, #12
     fc0:	pop	{r4, r5, r6, r7, pc}
     fc4:	ldr	r3, [pc, #12]	; fd8 <coda_mem_cursor_goto_available_union_field+0x98>
     fc8:	mov	r2, #134	; 0x86
     fcc:	ldr	r1, [pc, #8]	; fdc <coda_mem_cursor_goto_available_union_field+0x9c>
     fd0:	ldr	r0, [pc, #8]	; fe0 <coda_mem_cursor_goto_available_union_field+0xa0>
     fd4:	bl	0 <__assert_fail>
     fd8:	.word	0x00000170
     fdc:	.word	0x000000c0
     fe0:	.word	0x00000110

00000fe4 <coda_mem_cursor_get_array_dim>:
     fe4:	push	{r4, lr}
     fe8:	ldr	lr, [r0, #4]
     fec:	add	ip, r0, lr, lsl #4
     ff0:	ldr	lr, [ip, #-8]
     ff4:	ldr	ip, [lr, #8]
     ff8:	cmp	ip, #2
     ffc:	beq	106c <coda_mem_cursor_get_array_dim+0x88>
    1000:	cmp	ip, #1
    1004:	bne	1074 <coda_mem_cursor_get_array_dim+0x90>
    1008:	mov	r4, r1
    100c:	ldr	r1, [lr, #4]
    1010:	mov	r3, r2
    1014:	ldr	r2, [r1, #44]	; 0x2c
    1018:	cmp	r2, #0
    101c:	blt	1058 <coda_mem_cursor_get_array_dim+0x74>
    1020:	ldr	r2, [r1, #48]	; 0x30
    1024:	str	r2, [r4]
    1028:	ldr	r0, [r1, #48]	; 0x30
    102c:	cmp	r0, #0
    1030:	movgt	r2, r3
    1034:	addgt	r0, r2, r0, lsl #2
    1038:	addgt	r3, r1, #52	; 0x34
    103c:	ble	1050 <coda_mem_cursor_get_array_dim+0x6c>
    1040:	ldr	r1, [r3], #4
    1044:	str	r1, [r2], #4
    1048:	cmp	r2, r0
    104c:	bne	1040 <coda_mem_cursor_get_array_dim+0x5c>
    1050:	mov	r0, #0
    1054:	pop	{r4, pc}
    1058:	ldr	r2, [lr, #16]
    105c:	mov	r0, #0
    1060:	str	ip, [r4]
    1064:	str	r2, [r3]
    1068:	pop	{r4, pc}
    106c:	pop	{r4, lr}
    1070:	b	0 <coda_ascbin_cursor_get_array_dim>
    1074:	ldr	r3, [pc, #12]	; 1088 <coda_mem_cursor_get_array_dim+0xa4>
    1078:	ldr	r2, [pc, #12]	; 108c <coda_mem_cursor_get_array_dim+0xa8>
    107c:	ldr	r1, [pc, #12]	; 1090 <coda_mem_cursor_get_array_dim+0xac>
    1080:	ldr	r0, [pc, #12]	; 1094 <coda_mem_cursor_get_array_dim+0xb0>
    1084:	bl	0 <__assert_fail>
    1088:	.word	0x0000019c
    108c:	.word	0x0000019d
    1090:	.word	0x000000c0
    1094:	.word	0x00000228

00001098 <coda_mem_cursor_read_int8>:
    1098:	ldr	r2, [r0, #4]
    109c:	add	r3, r0, r2, lsl #4
    10a0:	ldr	r3, [r3, #-8]
    10a4:	ldr	r2, [r3, #8]
    10a8:	cmp	r2, #2
    10ac:	bne	10c8 <coda_mem_cursor_read_int8+0x30>
    10b0:	ldr	r3, [r3, #4]
    10b4:	ldr	r3, [r3]
    10b8:	cmp	r3, #0
    10bc:	beq	10c4 <coda_mem_cursor_read_int8+0x2c>
    10c0:	b	0 <coda_bin_cursor_read_int8>
    10c4:	b	0 <coda_ascii_cursor_read_int8>
    10c8:	push	{r4, lr}
    10cc:	ldr	r3, [pc, #12]	; 10e0 <coda_mem_cursor_read_int8+0x48>
    10d0:	ldr	r2, [pc, #12]	; 10e4 <coda_mem_cursor_read_int8+0x4c>
    10d4:	ldr	r1, [pc, #12]	; 10e8 <coda_mem_cursor_read_int8+0x50>
    10d8:	ldr	r0, [pc, #12]	; 10ec <coda_mem_cursor_read_int8+0x54>
    10dc:	bl	0 <__assert_fail>
    10e0:	.word	0x000001bc
    10e4:	.word	0x000001b7
    10e8:	.word	0x000000c0
    10ec:	.word	0x00000110

000010f0 <coda_mem_cursor_read_uint8>:
    10f0:	ldr	r2, [r0, #4]
    10f4:	add	r3, r0, r2, lsl #4
    10f8:	ldr	r3, [r3, #-8]
    10fc:	ldr	r2, [r3, #8]
    1100:	cmp	r2, #2
    1104:	bne	1120 <coda_mem_cursor_read_uint8+0x30>
    1108:	ldr	r3, [r3, #4]
    110c:	ldr	r3, [r3]
    1110:	cmp	r3, #0
    1114:	beq	111c <coda_mem_cursor_read_uint8+0x2c>
    1118:	b	0 <coda_bin_cursor_read_uint8>
    111c:	b	0 <coda_ascii_cursor_read_uint8>
    1120:	push	{r4, lr}
    1124:	ldr	r3, [pc, #12]	; 1138 <coda_mem_cursor_read_uint8+0x48>
    1128:	ldr	r2, [pc, #12]	; 113c <coda_mem_cursor_read_uint8+0x4c>
    112c:	ldr	r1, [pc, #12]	; 1140 <coda_mem_cursor_read_uint8+0x50>
    1130:	ldr	r0, [pc, #12]	; 1144 <coda_mem_cursor_read_uint8+0x54>
    1134:	bl	0 <__assert_fail>
    1138:	.word	0x000001d8
    113c:	.word	0x000001c3
    1140:	.word	0x000000c0
    1144:	.word	0x00000110

00001148 <coda_mem_cursor_read_int16>:
    1148:	ldr	r2, [r0, #4]
    114c:	add	r3, r0, r2, lsl #4
    1150:	ldr	r3, [r3, #-8]
    1154:	ldr	r2, [r3, #8]
    1158:	cmp	r2, #2
    115c:	bne	1178 <coda_mem_cursor_read_int16+0x30>
    1160:	ldr	r3, [r3, #4]
    1164:	ldr	r3, [r3]
    1168:	cmp	r3, #0
    116c:	beq	1174 <coda_mem_cursor_read_int16+0x2c>
    1170:	b	0 <coda_bin_cursor_read_int16>
    1174:	b	0 <coda_ascii_cursor_read_int16>
    1178:	push	{r4, lr}
    117c:	ldr	r3, [pc, #12]	; 1190 <coda_mem_cursor_read_int16+0x48>
    1180:	ldr	r2, [pc, #12]	; 1194 <coda_mem_cursor_read_int16+0x4c>
    1184:	ldr	r1, [pc, #12]	; 1198 <coda_mem_cursor_read_int16+0x50>
    1188:	ldr	r0, [pc, #12]	; 119c <coda_mem_cursor_read_int16+0x54>
    118c:	bl	0 <__assert_fail>
    1190:	.word	0x000001f4
    1194:	.word	0x000001cf
    1198:	.word	0x000000c0
    119c:	.word	0x00000110

000011a0 <coda_mem_cursor_read_uint16>:
    11a0:	ldr	r2, [r0, #4]
    11a4:	add	r3, r0, r2, lsl #4
    11a8:	ldr	r3, [r3, #-8]
    11ac:	ldr	r2, [r3, #8]
    11b0:	cmp	r2, #2
    11b4:	bne	11d0 <coda_mem_cursor_read_uint16+0x30>
    11b8:	ldr	r3, [r3, #4]
    11bc:	ldr	r3, [r3]
    11c0:	cmp	r3, #0
    11c4:	beq	11cc <coda_mem_cursor_read_uint16+0x2c>
    11c8:	b	0 <coda_bin_cursor_read_uint16>
    11cc:	b	0 <coda_ascii_cursor_read_uint16>
    11d0:	push	{r4, lr}
    11d4:	ldr	r3, [pc, #12]	; 11e8 <coda_mem_cursor_read_uint16+0x48>
    11d8:	ldr	r2, [pc, #12]	; 11ec <coda_mem_cursor_read_uint16+0x4c>
    11dc:	ldr	r1, [pc, #12]	; 11f0 <coda_mem_cursor_read_uint16+0x50>
    11e0:	ldr	r0, [pc, #12]	; 11f4 <coda_mem_cursor_read_uint16+0x54>
    11e4:	bl	0 <__assert_fail>
    11e8:	.word	0x00000210
    11ec:	.word	0x000001db
    11f0:	.word	0x000000c0
    11f4:	.word	0x00000110

000011f8 <coda_mem_cursor_read_int32>:
    11f8:	ldr	r2, [r0, #4]
    11fc:	add	r3, r0, r2, lsl #4
    1200:	ldr	r3, [r3, #-8]
    1204:	ldr	r2, [r3, #8]
    1208:	cmp	r2, #2
    120c:	bne	1228 <coda_mem_cursor_read_int32+0x30>
    1210:	ldr	r3, [r3, #4]
    1214:	ldr	r3, [r3]
    1218:	cmp	r3, #0
    121c:	beq	1224 <coda_mem_cursor_read_int32+0x2c>
    1220:	b	0 <coda_bin_cursor_read_int32>
    1224:	b	0 <coda_ascii_cursor_read_int32>
    1228:	push	{r4, lr}
    122c:	ldr	r3, [pc, #12]	; 1240 <coda_mem_cursor_read_int32+0x48>
    1230:	ldr	r2, [pc, #12]	; 1244 <coda_mem_cursor_read_int32+0x4c>
    1234:	ldr	r1, [pc, #12]	; 1248 <coda_mem_cursor_read_int32+0x50>
    1238:	ldr	r0, [pc, #12]	; 124c <coda_mem_cursor_read_int32+0x54>
    123c:	bl	0 <__assert_fail>
    1240:	.word	0x0000022c
    1244:	.word	0x000001e7
    1248:	.word	0x000000c0
    124c:	.word	0x00000110

00001250 <coda_mem_cursor_read_uint32>:
    1250:	ldr	r2, [r0, #4]
    1254:	add	r3, r0, r2, lsl #4
    1258:	ldr	r3, [r3, #-8]
    125c:	ldr	r2, [r3, #8]
    1260:	cmp	r2, #2
    1264:	bne	1280 <coda_mem_cursor_read_uint32+0x30>
    1268:	ldr	r3, [r3, #4]
    126c:	ldr	r3, [r3]
    1270:	cmp	r3, #0
    1274:	beq	127c <coda_mem_cursor_read_uint32+0x2c>
    1278:	b	0 <coda_bin_cursor_read_uint32>
    127c:	b	0 <coda_ascii_cursor_read_uint32>
    1280:	push	{r4, lr}
    1284:	ldr	r3, [pc, #12]	; 1298 <coda_mem_cursor_read_uint32+0x48>
    1288:	ldr	r2, [pc, #12]	; 129c <coda_mem_cursor_read_uint32+0x4c>
    128c:	ldr	r1, [pc, #12]	; 12a0 <coda_mem_cursor_read_uint32+0x50>
    1290:	ldr	r0, [pc, #12]	; 12a4 <coda_mem_cursor_read_uint32+0x54>
    1294:	bl	0 <__assert_fail>
    1298:	.word	0x00000248
    129c:	.word	0x000001f3
    12a0:	.word	0x000000c0
    12a4:	.word	0x00000110

000012a8 <coda_mem_cursor_read_int64>:
    12a8:	ldr	r2, [r0, #4]
    12ac:	add	r3, r0, r2, lsl #4
    12b0:	ldr	r3, [r3, #-8]
    12b4:	ldr	r2, [r3, #8]
    12b8:	cmp	r2, #2
    12bc:	bne	12d8 <coda_mem_cursor_read_int64+0x30>
    12c0:	ldr	r3, [r3, #4]
    12c4:	ldr	r3, [r3]
    12c8:	cmp	r3, #0
    12cc:	beq	12d4 <coda_mem_cursor_read_int64+0x2c>
    12d0:	b	0 <coda_bin_cursor_read_int64>
    12d4:	b	0 <coda_ascii_cursor_read_int64>
    12d8:	push	{r4, lr}
    12dc:	ldr	r3, [pc, #12]	; 12f0 <coda_mem_cursor_read_int64+0x48>
    12e0:	ldr	r2, [pc, #12]	; 12f4 <coda_mem_cursor_read_int64+0x4c>
    12e4:	ldr	r1, [pc, #12]	; 12f8 <coda_mem_cursor_read_int64+0x50>
    12e8:	ldr	r0, [pc, #12]	; 12fc <coda_mem_cursor_read_int64+0x54>
    12ec:	bl	0 <__assert_fail>
    12f0:	.word	0x00000264
    12f4:	.word	0x000001ff
    12f8:	.word	0x000000c0
    12fc:	.word	0x00000110

00001300 <coda_mem_cursor_read_uint64>:
    1300:	ldr	r2, [r0, #4]
    1304:	add	r3, r0, r2, lsl #4
    1308:	ldr	r3, [r3, #-8]
    130c:	ldr	r2, [r3, #8]
    1310:	cmp	r2, #2
    1314:	bne	1330 <coda_mem_cursor_read_uint64+0x30>
    1318:	ldr	r3, [r3, #4]
    131c:	ldr	r3, [r3]
    1320:	cmp	r3, #0
    1324:	beq	132c <coda_mem_cursor_read_uint64+0x2c>
    1328:	b	0 <coda_bin_cursor_read_uint64>
    132c:	b	0 <coda_ascii_cursor_read_uint64>
    1330:	push	{r4, lr}
    1334:	ldr	r3, [pc, #12]	; 1348 <coda_mem_cursor_read_uint64+0x48>
    1338:	ldr	r2, [pc, #12]	; 134c <coda_mem_cursor_read_uint64+0x4c>
    133c:	ldr	r1, [pc, #12]	; 1350 <coda_mem_cursor_read_uint64+0x50>
    1340:	ldr	r0, [pc, #12]	; 1354 <coda_mem_cursor_read_uint64+0x54>
    1344:	bl	0 <__assert_fail>
    1348:	.word	0x00000280
    134c:	.word	0x0000020b
    1350:	.word	0x000000c0
    1354:	.word	0x00000110

00001358 <coda_mem_cursor_read_float>:
    1358:	ldr	r2, [r0, #4]
    135c:	add	r3, r0, r2, lsl #4
    1360:	ldr	r3, [r3, #-8]
    1364:	ldr	r2, [r3, #8]
    1368:	cmp	r2, #2
    136c:	bne	1388 <coda_mem_cursor_read_float+0x30>
    1370:	ldr	r3, [r3, #4]
    1374:	ldr	r3, [r3]
    1378:	cmp	r3, #0
    137c:	beq	1384 <coda_mem_cursor_read_float+0x2c>
    1380:	b	0 <coda_bin_cursor_read_float>
    1384:	b	0 <coda_ascii_cursor_read_float>
    1388:	push	{r4, lr}
    138c:	ldr	r3, [pc, #12]	; 13a0 <coda_mem_cursor_read_float+0x48>
    1390:	ldr	r2, [pc, #12]	; 13a4 <coda_mem_cursor_read_float+0x4c>
    1394:	ldr	r1, [pc, #12]	; 13a8 <coda_mem_cursor_read_float+0x50>
    1398:	ldr	r0, [pc, #12]	; 13ac <coda_mem_cursor_read_float+0x54>
    139c:	bl	0 <__assert_fail>
    13a0:	.word	0x0000029c
    13a4:	.word	0x00000217
    13a8:	.word	0x000000c0
    13ac:	.word	0x00000110

000013b0 <coda_mem_cursor_read_double>:
    13b0:	ldr	r2, [r0, #4]
    13b4:	add	r3, r0, r2, lsl #4
    13b8:	ldr	r3, [r3, #-8]
    13bc:	ldr	r2, [r3, #8]
    13c0:	cmp	r2, #2
    13c4:	bne	13e0 <coda_mem_cursor_read_double+0x30>
    13c8:	ldr	r3, [r3, #4]
    13cc:	ldr	r3, [r3]
    13d0:	cmp	r3, #0
    13d4:	beq	13dc <coda_mem_cursor_read_double+0x2c>
    13d8:	b	0 <coda_bin_cursor_read_double>
    13dc:	b	0 <coda_ascii_cursor_read_double>
    13e0:	push	{r4, lr}
    13e4:	ldr	r3, [pc, #12]	; 13f8 <coda_mem_cursor_read_double+0x48>
    13e8:	ldr	r2, [pc, #12]	; 13fc <coda_mem_cursor_read_double+0x4c>
    13ec:	ldr	r1, [pc, #12]	; 1400 <coda_mem_cursor_read_double+0x50>
    13f0:	ldr	r0, [pc, #12]	; 1404 <coda_mem_cursor_read_double+0x54>
    13f4:	bl	0 <__assert_fail>
    13f8:	.word	0x000002b8
    13fc:	.word	0x00000223
    1400:	.word	0x000000c0
    1404:	.word	0x00000110

00001408 <coda_mem_cursor_read_char>:
    1408:	ldr	r2, [r0, #4]
    140c:	add	r3, r0, r2, lsl #4
    1410:	ldr	r3, [r3, #-8]
    1414:	ldr	r2, [r3, #8]
    1418:	cmp	r2, #2
    141c:	bne	1438 <coda_mem_cursor_read_char+0x30>
    1420:	ldr	r3, [r3, #4]
    1424:	ldr	r3, [r3]
    1428:	bics	r3, r3, #2
    142c:	beq	1434 <coda_mem_cursor_read_char+0x2c>
    1430:	b	0 <coda_bin_cursor_read_char>
    1434:	b	0 <coda_ascii_cursor_read_char>
    1438:	push	{r4, lr}
    143c:	ldr	r3, [pc, #12]	; 1450 <coda_mem_cursor_read_char+0x48>
    1440:	ldr	r2, [pc, #12]	; 1454 <coda_mem_cursor_read_char+0x4c>
    1444:	ldr	r1, [pc, #12]	; 1458 <coda_mem_cursor_read_char+0x50>
    1448:	ldr	r0, [pc, #12]	; 145c <coda_mem_cursor_read_char+0x54>
    144c:	bl	0 <__assert_fail>
    1450:	.word	0x000002d4
    1454:	.word	0x0000022f
    1458:	.word	0x000000c0
    145c:	.word	0x00000110

00001460 <coda_mem_cursor_read_string>:
    1460:	ldr	r3, [r0, #4]
    1464:	push	{r4, r5, lr}
    1468:	sub	sp, sp, #524	; 0x20c
    146c:	add	r3, r0, r3, lsl #4
    1470:	ldr	r3, [r3, #-8]
    1474:	ldr	r3, [r3, #8]
    1478:	cmp	r3, #3
    147c:	beq	1494 <coda_mem_cursor_read_string+0x34>
    1480:	cmp	r3, #2
    1484:	bne	14d4 <coda_mem_cursor_read_string+0x74>
    1488:	bl	0 <coda_ascii_cursor_read_string>
    148c:	add	sp, sp, #524	; 0x20c
    1490:	pop	{r4, r5, pc}
    1494:	mov	r4, r1
    1498:	mov	r5, r2
    149c:	mov	r1, r0
    14a0:	mov	r2, #520	; 0x208
    14a4:	mov	r0, sp
    14a8:	bl	0 <memcpy>
    14ac:	mov	r0, sp
    14b0:	bl	0 <coda_cursor_use_base_type_of_special_type>
    14b4:	cmp	r0, #0
    14b8:	mvnne	r0, #0
    14bc:	bne	148c <coda_mem_cursor_read_string+0x2c>
    14c0:	mov	r2, r5
    14c4:	mov	r1, r4
    14c8:	mov	r0, sp
    14cc:	bl	0 <coda_cursor_read_string>
    14d0:	b	148c <coda_mem_cursor_read_string+0x2c>
    14d4:	ldr	r3, [pc, #12]	; 14e8 <coda_mem_cursor_read_string+0x88>
    14d8:	ldr	r2, [pc, #12]	; 14ec <coda_mem_cursor_read_string+0x8c>
    14dc:	ldr	r1, [pc, #12]	; 14f0 <coda_mem_cursor_read_string+0x90>
    14e0:	ldr	r0, [pc, #12]	; 14f4 <coda_mem_cursor_read_string+0x94>
    14e4:	bl	0 <__assert_fail>
    14e8:	.word	0x000002f0
    14ec:	.word	0x00000246
    14f0:	.word	0x000000c0
    14f4:	.word	0x00000110

000014f8 <coda_mem_cursor_read_bits>:
    14f8:	ldr	ip, [r0, #4]
    14fc:	push	{r4, r5, r6, r7, lr}
    1500:	sub	sp, sp, #532	; 0x214
    1504:	add	ip, r0, ip, lsl #4
    1508:	ldr	r6, [ip, #-8]
    150c:	ldr	ip, [r6, #8]
    1510:	cmp	ip, #3
    1514:	beq	1554 <coda_mem_cursor_read_bits+0x5c>
    1518:	cmp	ip, #2
    151c:	bne	15b0 <coda_mem_cursor_read_bits+0xb8>
    1520:	ldr	ip, [r6, #4]
    1524:	ldr	ip, [ip]
    1528:	cmp	ip, #0
    152c:	add	ip, sp, #552	; 0x228
    1530:	ldrd	r4, [ip]
    1534:	strd	r4, [sp]
    1538:	beq	1548 <coda_mem_cursor_read_bits+0x50>
    153c:	bl	0 <coda_bin_cursor_read_bits>
    1540:	add	sp, sp, #532	; 0x214
    1544:	pop	{r4, r5, r6, r7, pc}
    1548:	bl	0 <coda_ascii_cursor_read_bits>
    154c:	add	sp, sp, #532	; 0x214
    1550:	pop	{r4, r5, r6, r7, pc}
    1554:	mov	r7, r1
    1558:	mov	r4, r2
    155c:	mov	r1, r0
    1560:	mov	r2, #520	; 0x208
    1564:	add	r0, sp, #8
    1568:	mov	r5, r3
    156c:	bl	0 <memcpy>
    1570:	add	r0, sp, #8
    1574:	bl	0 <coda_cursor_use_base_type_of_special_type>
    1578:	cmp	r0, #0
    157c:	beq	158c <coda_mem_cursor_read_bits+0x94>
    1580:	mvn	r0, #0
    1584:	add	sp, sp, #532	; 0x214
    1588:	pop	{r4, r5, r6, r7, pc}
    158c:	add	r3, sp, #552	; 0x228
    1590:	mov	r1, r7
    1594:	ldrd	r2, [r3]
    1598:	add	r0, sp, #8
    159c:	strd	r2, [sp]
    15a0:	mov	r2, r4
    15a4:	mov	r3, r5
    15a8:	bl	0 <coda_cursor_read_bits>
    15ac:	b	1540 <coda_mem_cursor_read_bits+0x48>
    15b0:	ldr	r1, [pc, #8]	; 15c0 <coda_mem_cursor_read_bits+0xc8>
    15b4:	mvn	r0, #104	; 0x68
    15b8:	bl	0 <coda_set_error>
    15bc:	b	1580 <coda_mem_cursor_read_bits+0x88>
    15c0:	.word	0x00000244

000015c4 <coda_mem_cursor_read_bytes>:
    15c4:	ldr	ip, [r0, #4]
    15c8:	push	{r4, r5, r6, r7, lr}
    15cc:	sub	sp, sp, #532	; 0x214
    15d0:	add	ip, r0, ip, lsl #4
    15d4:	ldr	r6, [ip, #-8]
    15d8:	ldr	ip, [r6, #8]
    15dc:	cmp	ip, #3
    15e0:	beq	1620 <coda_mem_cursor_read_bytes+0x5c>
    15e4:	cmp	ip, #2
    15e8:	bne	167c <coda_mem_cursor_read_bytes+0xb8>
    15ec:	ldr	ip, [r6, #4]
    15f0:	ldr	ip, [ip]
    15f4:	bics	ip, ip, #2
    15f8:	add	ip, sp, #552	; 0x228
    15fc:	ldrd	r4, [ip]
    1600:	strd	r4, [sp]
    1604:	beq	1614 <coda_mem_cursor_read_bytes+0x50>
    1608:	bl	0 <coda_bin_cursor_read_bytes>
    160c:	add	sp, sp, #532	; 0x214
    1610:	pop	{r4, r5, r6, r7, pc}
    1614:	bl	0 <coda_ascii_cursor_read_bytes>
    1618:	add	sp, sp, #532	; 0x214
    161c:	pop	{r4, r5, r6, r7, pc}
    1620:	mov	r7, r1
    1624:	mov	r4, r2
    1628:	mov	r1, r0
    162c:	mov	r2, #520	; 0x208
    1630:	add	r0, sp, #8
    1634:	mov	r5, r3
    1638:	bl	0 <memcpy>
    163c:	add	r0, sp, #8
    1640:	bl	0 <coda_cursor_use_base_type_of_special_type>
    1644:	cmp	r0, #0
    1648:	beq	1658 <coda_mem_cursor_read_bytes+0x94>
    164c:	mvn	r0, #0
    1650:	add	sp, sp, #532	; 0x214
    1654:	pop	{r4, r5, r6, r7, pc}
    1658:	add	r3, sp, #552	; 0x228
    165c:	mov	r1, r7
    1660:	ldrd	r2, [r3]
    1664:	add	r0, sp, #8
    1668:	strd	r2, [sp]
    166c:	mov	r2, r4
    1670:	mov	r3, r5
    1674:	bl	0 <coda_cursor_read_bytes>
    1678:	b	160c <coda_mem_cursor_read_bytes+0x48>
    167c:	ldr	r1, [pc, #8]	; 168c <coda_mem_cursor_read_bytes+0xc8>
    1680:	mvn	r0, #104	; 0x68
    1684:	bl	0 <coda_set_error>
    1688:	b	164c <coda_mem_cursor_read_bytes+0x88>
    168c:	.word	0x00000278

00001690 <coda_mem_cursor_read_int8_array>:
    1690:	ldr	r3, [r0, #4]
    1694:	push	{r4, r5, r6, lr}
    1698:	mov	r6, r2
    169c:	add	r3, r0, r3, lsl #4
    16a0:	sub	sp, sp, #8
    16a4:	ldr	r2, [r3, #-8]
    16a8:	mov	r5, r1
    16ac:	ldr	r3, [r2, #8]
    16b0:	cmp	r3, #1
    16b4:	beq	172c <coda_mem_cursor_read_int8_array+0x9c>
    16b8:	cmp	r3, #2
    16bc:	bne	175c <coda_mem_cursor_read_int8_array+0xcc>
    16c0:	ldr	r3, [r2, #4]
    16c4:	ldr	r3, [r3, #40]	; 0x28
    16c8:	ldr	r3, [r3]
    16cc:	cmp	r3, #1
    16d0:	beq	1740 <coda_mem_cursor_read_int8_array+0xb0>
    16d4:	cmp	r3, #0
    16d8:	bne	1770 <coda_mem_cursor_read_int8_array+0xe0>
    16dc:	str	r3, [sp]
    16e0:	mov	r2, r1
    16e4:	mov	r3, #1
    16e8:	ldr	r1, [pc, #148]	; 1784 <coda_mem_cursor_read_int8_array+0xf4>
    16ec:	mov	r4, r0
    16f0:	bl	0 <read_array>
    16f4:	cmp	r0, #0
    16f8:	bne	1754 <coda_mem_cursor_read_int8_array+0xc4>
    16fc:	cmp	r6, #0
    1700:	bne	170c <coda_mem_cursor_read_int8_array+0x7c>
    1704:	add	sp, sp, #8
    1708:	pop	{r4, r5, r6, pc}
    170c:	mov	r1, r5
    1710:	mov	r0, r4
    1714:	mov	r2, #1
    1718:	bl	2d8 <transpose_array>
    171c:	adds	r0, r0, #0
    1720:	mvnne	r0, #0
    1724:	add	sp, sp, #8
    1728:	pop	{r4, r5, r6, pc}
    172c:	mov	r2, r1
    1730:	str	r6, [sp]
    1734:	ldr	r1, [pc, #76]	; 1788 <coda_mem_cursor_read_int8_array+0xf8>
    1738:	bl	0 <read_array>
    173c:	b	1704 <coda_mem_cursor_read_int8_array+0x74>
    1740:	mov	r2, r1
    1744:	str	r6, [sp]
    1748:	ldr	r1, [pc, #60]	; 178c <coda_mem_cursor_read_int8_array+0xfc>
    174c:	bl	0 <read_array>
    1750:	b	1704 <coda_mem_cursor_read_int8_array+0x74>
    1754:	mvn	r0, #0
    1758:	b	1704 <coda_mem_cursor_read_int8_array+0x74>
    175c:	ldr	r3, [pc, #44]	; 1790 <coda_mem_cursor_read_int8_array+0x100>
    1760:	ldr	r2, [pc, #44]	; 1794 <coda_mem_cursor_read_int8_array+0x104>
    1764:	ldr	r1, [pc, #44]	; 1798 <coda_mem_cursor_read_int8_array+0x108>
    1768:	ldr	r0, [pc, #44]	; 179c <coda_mem_cursor_read_int8_array+0x10c>
    176c:	bl	0 <__assert_fail>
    1770:	ldr	r3, [pc, #24]	; 1790 <coda_mem_cursor_read_int8_array+0x100>
    1774:	ldr	r2, [pc, #36]	; 17a0 <coda_mem_cursor_read_int8_array+0x110>
    1778:	ldr	r1, [pc, #24]	; 1798 <coda_mem_cursor_read_int8_array+0x108>
    177c:	ldr	r0, [pc, #32]	; 17a4 <coda_mem_cursor_read_int8_array+0x114>
    1780:	bl	0 <__assert_fail>
	...
    1790:	.word	0x0000030c
    1794:	.word	0x0000028b
    1798:	.word	0x000000c0
    179c:	.word	0x00000110
    17a0:	.word	0x00000291
    17a4:	.word	0x000002ac

000017a8 <coda_mem_cursor_read_uint8_array>:
    17a8:	ldr	r3, [r0, #4]
    17ac:	push	{r4, r5, r6, lr}
    17b0:	mov	r6, r2
    17b4:	add	r3, r0, r3, lsl #4
    17b8:	sub	sp, sp, #8
    17bc:	ldr	r2, [r3, #-8]
    17c0:	mov	r5, r1
    17c4:	ldr	r3, [r2, #8]
    17c8:	cmp	r3, #1
    17cc:	beq	1844 <coda_mem_cursor_read_uint8_array+0x9c>
    17d0:	cmp	r3, #2
    17d4:	bne	1874 <coda_mem_cursor_read_uint8_array+0xcc>
    17d8:	ldr	r3, [r2, #4]
    17dc:	ldr	r3, [r3, #40]	; 0x28
    17e0:	ldr	r3, [r3]
    17e4:	cmp	r3, #1
    17e8:	beq	1858 <coda_mem_cursor_read_uint8_array+0xb0>
    17ec:	cmp	r3, #0
    17f0:	bne	1888 <coda_mem_cursor_read_uint8_array+0xe0>
    17f4:	str	r3, [sp]
    17f8:	mov	r2, r1
    17fc:	mov	r3, #1
    1800:	ldr	r1, [pc, #148]	; 189c <coda_mem_cursor_read_uint8_array+0xf4>
    1804:	mov	r4, r0
    1808:	bl	0 <read_array>
    180c:	cmp	r0, #0
    1810:	bne	186c <coda_mem_cursor_read_uint8_array+0xc4>
    1814:	cmp	r6, #0
    1818:	bne	1824 <coda_mem_cursor_read_uint8_array+0x7c>
    181c:	add	sp, sp, #8
    1820:	pop	{r4, r5, r6, pc}
    1824:	mov	r1, r5
    1828:	mov	r0, r4
    182c:	mov	r2, #1
    1830:	bl	2d8 <transpose_array>
    1834:	adds	r0, r0, #0
    1838:	mvnne	r0, #0
    183c:	add	sp, sp, #8
    1840:	pop	{r4, r5, r6, pc}
    1844:	mov	r2, r1
    1848:	str	r6, [sp]
    184c:	ldr	r1, [pc, #76]	; 18a0 <coda_mem_cursor_read_uint8_array+0xf8>
    1850:	bl	0 <read_array>
    1854:	b	181c <coda_mem_cursor_read_uint8_array+0x74>
    1858:	mov	r2, r1
    185c:	str	r6, [sp]
    1860:	ldr	r1, [pc, #60]	; 18a4 <coda_mem_cursor_read_uint8_array+0xfc>
    1864:	bl	0 <read_array>
    1868:	b	181c <coda_mem_cursor_read_uint8_array+0x74>
    186c:	mvn	r0, #0
    1870:	b	181c <coda_mem_cursor_read_uint8_array+0x74>
    1874:	ldr	r3, [pc, #44]	; 18a8 <coda_mem_cursor_read_uint8_array+0x100>
    1878:	ldr	r2, [pc, #44]	; 18ac <coda_mem_cursor_read_uint8_array+0x104>
    187c:	ldr	r1, [pc, #44]	; 18b0 <coda_mem_cursor_read_uint8_array+0x108>
    1880:	ldr	r0, [pc, #44]	; 18b4 <coda_mem_cursor_read_uint8_array+0x10c>
    1884:	bl	0 <__assert_fail>
    1888:	ldr	r3, [pc, #24]	; 18a8 <coda_mem_cursor_read_uint8_array+0x100>
    188c:	mov	r2, #688	; 0x2b0
    1890:	ldr	r1, [pc, #24]	; 18b0 <coda_mem_cursor_read_uint8_array+0x108>
    1894:	ldr	r0, [pc, #28]	; 18b8 <coda_mem_cursor_read_uint8_array+0x110>
    1898:	bl	0 <__assert_fail>
	...
    18a8:	.word	0x0000032c
    18ac:	.word	0x000002aa
    18b0:	.word	0x000000c0
    18b4:	.word	0x00000110
    18b8:	.word	0x000002ac

000018bc <coda_mem_cursor_read_int16_array>:
    18bc:	ldr	r3, [r0, #4]
    18c0:	push	{r4, r5, r6, r7, lr}
    18c4:	mov	r6, r1
    18c8:	add	r3, r0, r3, lsl #4
    18cc:	sub	sp, sp, #12
    18d0:	ldr	r3, [r3, #-8]
    18d4:	mov	r7, r2
    18d8:	ldr	r4, [r3, #8]
    18dc:	cmp	r4, #1
    18e0:	beq	1958 <coda_mem_cursor_read_int16_array+0x9c>
    18e4:	cmp	r4, #2
    18e8:	bne	1990 <coda_mem_cursor_read_int16_array+0xd4>
    18ec:	ldr	r3, [r3, #4]
    18f0:	ldr	r3, [r3, #40]	; 0x28
    18f4:	ldr	r3, [r3]
    18f8:	cmp	r3, #1
    18fc:	beq	1970 <coda_mem_cursor_read_int16_array+0xb4>
    1900:	cmp	r3, #0
    1904:	bne	19a4 <coda_mem_cursor_read_int16_array+0xe8>
    1908:	str	r3, [sp]
    190c:	mov	r2, r1
    1910:	mov	r3, r4
    1914:	ldr	r1, [pc, #156]	; 19b8 <coda_mem_cursor_read_int16_array+0xfc>
    1918:	mov	r5, r0
    191c:	bl	0 <read_array>
    1920:	cmp	r0, #0
    1924:	bne	1988 <coda_mem_cursor_read_int16_array+0xcc>
    1928:	cmp	r7, #0
    192c:	bne	1938 <coda_mem_cursor_read_int16_array+0x7c>
    1930:	add	sp, sp, #12
    1934:	pop	{r4, r5, r6, r7, pc}
    1938:	mov	r2, r4
    193c:	mov	r1, r6
    1940:	mov	r0, r5
    1944:	bl	2d8 <transpose_array>
    1948:	adds	r0, r0, #0
    194c:	mvnne	r0, #0
    1950:	add	sp, sp, #12
    1954:	pop	{r4, r5, r6, r7, pc}
    1958:	str	r2, [sp]
    195c:	mov	r3, #2
    1960:	mov	r2, r1
    1964:	ldr	r1, [pc, #80]	; 19bc <coda_mem_cursor_read_int16_array+0x100>
    1968:	bl	0 <read_array>
    196c:	b	1930 <coda_mem_cursor_read_int16_array+0x74>
    1970:	str	r2, [sp]
    1974:	mov	r3, r4
    1978:	mov	r2, r1
    197c:	ldr	r1, [pc, #60]	; 19c0 <coda_mem_cursor_read_int16_array+0x104>
    1980:	bl	0 <read_array>
    1984:	b	1930 <coda_mem_cursor_read_int16_array+0x74>
    1988:	mvn	r0, #0
    198c:	b	1930 <coda_mem_cursor_read_int16_array+0x74>
    1990:	ldr	r3, [pc, #44]	; 19c4 <coda_mem_cursor_read_int16_array+0x108>
    1994:	ldr	r2, [pc, #44]	; 19c8 <coda_mem_cursor_read_int16_array+0x10c>
    1998:	ldr	r1, [pc, #44]	; 19cc <coda_mem_cursor_read_int16_array+0x110>
    199c:	ldr	r0, [pc, #44]	; 19d0 <coda_mem_cursor_read_int16_array+0x114>
    19a0:	bl	0 <__assert_fail>
    19a4:	ldr	r3, [pc, #24]	; 19c4 <coda_mem_cursor_read_int16_array+0x108>
    19a8:	ldr	r2, [pc, #36]	; 19d4 <coda_mem_cursor_read_int16_array+0x118>
    19ac:	ldr	r1, [pc, #24]	; 19cc <coda_mem_cursor_read_int16_array+0x110>
    19b0:	ldr	r0, [pc, #32]	; 19d8 <coda_mem_cursor_read_int16_array+0x11c>
    19b4:	bl	0 <__assert_fail>
	...
    19c4:	.word	0x00000350
    19c8:	.word	0x000002c9
    19cc:	.word	0x000000c0
    19d0:	.word	0x00000110
    19d4:	.word	0x000002cf
    19d8:	.word	0x000002ac

000019dc <coda_mem_cursor_read_uint16_array>:
    19dc:	ldr	r3, [r0, #4]
    19e0:	push	{r4, r5, r6, r7, lr}
    19e4:	mov	r6, r1
    19e8:	add	r3, r0, r3, lsl #4
    19ec:	sub	sp, sp, #12
    19f0:	ldr	r3, [r3, #-8]
    19f4:	mov	r7, r2
    19f8:	ldr	r4, [r3, #8]
    19fc:	cmp	r4, #1
    1a00:	beq	1a78 <coda_mem_cursor_read_uint16_array+0x9c>
    1a04:	cmp	r4, #2
    1a08:	bne	1ab0 <coda_mem_cursor_read_uint16_array+0xd4>
    1a0c:	ldr	r3, [r3, #4]
    1a10:	ldr	r3, [r3, #40]	; 0x28
    1a14:	ldr	r3, [r3]
    1a18:	cmp	r3, #1
    1a1c:	beq	1a90 <coda_mem_cursor_read_uint16_array+0xb4>
    1a20:	cmp	r3, #0
    1a24:	bne	1ac4 <coda_mem_cursor_read_uint16_array+0xe8>
    1a28:	str	r3, [sp]
    1a2c:	mov	r2, r1
    1a30:	mov	r3, r4
    1a34:	ldr	r1, [pc, #156]	; 1ad8 <coda_mem_cursor_read_uint16_array+0xfc>
    1a38:	mov	r5, r0
    1a3c:	bl	0 <read_array>
    1a40:	cmp	r0, #0
    1a44:	bne	1aa8 <coda_mem_cursor_read_uint16_array+0xcc>
    1a48:	cmp	r7, #0
    1a4c:	bne	1a58 <coda_mem_cursor_read_uint16_array+0x7c>
    1a50:	add	sp, sp, #12
    1a54:	pop	{r4, r5, r6, r7, pc}
    1a58:	mov	r2, r4
    1a5c:	mov	r1, r6
    1a60:	mov	r0, r5
    1a64:	bl	2d8 <transpose_array>
    1a68:	adds	r0, r0, #0
    1a6c:	mvnne	r0, #0
    1a70:	add	sp, sp, #12
    1a74:	pop	{r4, r5, r6, r7, pc}
    1a78:	str	r2, [sp]
    1a7c:	mov	r3, #2
    1a80:	mov	r2, r1
    1a84:	ldr	r1, [pc, #80]	; 1adc <coda_mem_cursor_read_uint16_array+0x100>
    1a88:	bl	0 <read_array>
    1a8c:	b	1a50 <coda_mem_cursor_read_uint16_array+0x74>
    1a90:	str	r2, [sp]
    1a94:	mov	r3, r4
    1a98:	mov	r2, r1
    1a9c:	ldr	r1, [pc, #60]	; 1ae0 <coda_mem_cursor_read_uint16_array+0x104>
    1aa0:	bl	0 <read_array>
    1aa4:	b	1a50 <coda_mem_cursor_read_uint16_array+0x74>
    1aa8:	mvn	r0, #0
    1aac:	b	1a50 <coda_mem_cursor_read_uint16_array+0x74>
    1ab0:	ldr	r3, [pc, #44]	; 1ae4 <coda_mem_cursor_read_uint16_array+0x108>
    1ab4:	mov	r2, #744	; 0x2e8
    1ab8:	ldr	r1, [pc, #40]	; 1ae8 <coda_mem_cursor_read_uint16_array+0x10c>
    1abc:	ldr	r0, [pc, #40]	; 1aec <coda_mem_cursor_read_uint16_array+0x110>
    1ac0:	bl	0 <__assert_fail>
    1ac4:	ldr	r3, [pc, #24]	; 1ae4 <coda_mem_cursor_read_uint16_array+0x108>
    1ac8:	ldr	r2, [pc, #32]	; 1af0 <coda_mem_cursor_read_uint16_array+0x114>
    1acc:	ldr	r1, [pc, #20]	; 1ae8 <coda_mem_cursor_read_uint16_array+0x10c>
    1ad0:	ldr	r0, [pc, #28]	; 1af4 <coda_mem_cursor_read_uint16_array+0x118>
    1ad4:	bl	0 <__assert_fail>
	...
    1ae4:	.word	0x00000374
    1ae8:	.word	0x000000c0
    1aec:	.word	0x00000110
    1af0:	.word	0x000002ee
    1af4:	.word	0x000002ac

00001af8 <coda_mem_cursor_read_int32_array>:
    1af8:	ldr	r3, [r0, #4]
    1afc:	push	{r4, r5, r6, lr}
    1b00:	mov	r6, r2
    1b04:	add	r3, r0, r3, lsl #4
    1b08:	sub	sp, sp, #8
    1b0c:	ldr	r3, [r3, #-8]
    1b10:	mov	r5, r1
    1b14:	ldr	r2, [r3, #8]
    1b18:	cmp	r2, #1
    1b1c:	beq	1b94 <coda_mem_cursor_read_int32_array+0x9c>
    1b20:	cmp	r2, #2
    1b24:	bne	1bcc <coda_mem_cursor_read_int32_array+0xd4>
    1b28:	ldr	r3, [r3, #4]
    1b2c:	ldr	r3, [r3, #40]	; 0x28
    1b30:	ldr	r3, [r3]
    1b34:	cmp	r3, #1
    1b38:	beq	1bac <coda_mem_cursor_read_int32_array+0xb4>
    1b3c:	cmp	r3, #0
    1b40:	bne	1be0 <coda_mem_cursor_read_int32_array+0xe8>
    1b44:	str	r3, [sp]
    1b48:	mov	r2, r1
    1b4c:	mov	r3, #4
    1b50:	ldr	r1, [pc, #156]	; 1bf4 <coda_mem_cursor_read_int32_array+0xfc>
    1b54:	mov	r4, r0
    1b58:	bl	0 <read_array>
    1b5c:	cmp	r0, #0
    1b60:	bne	1bc4 <coda_mem_cursor_read_int32_array+0xcc>
    1b64:	cmp	r6, #0
    1b68:	bne	1b74 <coda_mem_cursor_read_int32_array+0x7c>
    1b6c:	add	sp, sp, #8
    1b70:	pop	{r4, r5, r6, pc}
    1b74:	mov	r1, r5
    1b78:	mov	r0, r4
    1b7c:	mov	r2, #4
    1b80:	bl	2d8 <transpose_array>
    1b84:	adds	r0, r0, #0
    1b88:	mvnne	r0, #0
    1b8c:	add	sp, sp, #8
    1b90:	pop	{r4, r5, r6, pc}
    1b94:	mov	r2, r1
    1b98:	str	r6, [sp]
    1b9c:	mov	r3, #4
    1ba0:	ldr	r1, [pc, #80]	; 1bf8 <coda_mem_cursor_read_int32_array+0x100>
    1ba4:	bl	0 <read_array>
    1ba8:	b	1b6c <coda_mem_cursor_read_int32_array+0x74>
    1bac:	mov	r2, r1
    1bb0:	str	r6, [sp]
    1bb4:	mov	r3, #4
    1bb8:	ldr	r1, [pc, #60]	; 1bfc <coda_mem_cursor_read_int32_array+0x104>
    1bbc:	bl	0 <read_array>
    1bc0:	b	1b6c <coda_mem_cursor_read_int32_array+0x74>
    1bc4:	mvn	r0, #0
    1bc8:	b	1b6c <coda_mem_cursor_read_int32_array+0x74>
    1bcc:	ldr	r3, [pc, #44]	; 1c00 <coda_mem_cursor_read_int32_array+0x108>
    1bd0:	ldr	r2, [pc, #44]	; 1c04 <coda_mem_cursor_read_int32_array+0x10c>
    1bd4:	ldr	r1, [pc, #44]	; 1c08 <coda_mem_cursor_read_int32_array+0x110>
    1bd8:	ldr	r0, [pc, #44]	; 1c0c <coda_mem_cursor_read_int32_array+0x114>
    1bdc:	bl	0 <__assert_fail>
    1be0:	ldr	r3, [pc, #24]	; 1c00 <coda_mem_cursor_read_int32_array+0x108>
    1be4:	ldr	r2, [pc, #36]	; 1c10 <coda_mem_cursor_read_int32_array+0x118>
    1be8:	ldr	r1, [pc, #24]	; 1c08 <coda_mem_cursor_read_int32_array+0x110>
    1bec:	ldr	r0, [pc, #32]	; 1c14 <coda_mem_cursor_read_int32_array+0x11c>
    1bf0:	bl	0 <__assert_fail>
	...
    1c00:	.word	0x00000398
    1c04:	.word	0x00000307
    1c08:	.word	0x000000c0
    1c0c:	.word	0x00000110
    1c10:	.word	0x0000030d
    1c14:	.word	0x000002ac

00001c18 <coda_mem_cursor_read_uint32_array>:
    1c18:	ldr	r3, [r0, #4]
    1c1c:	push	{r4, r5, r6, lr}
    1c20:	mov	r6, r2
    1c24:	add	r3, r0, r3, lsl #4
    1c28:	sub	sp, sp, #8
    1c2c:	ldr	r3, [r3, #-8]
    1c30:	mov	r5, r1
    1c34:	ldr	r2, [r3, #8]
    1c38:	cmp	r2, #1
    1c3c:	beq	1cb4 <coda_mem_cursor_read_uint32_array+0x9c>
    1c40:	cmp	r2, #2
    1c44:	bne	1cec <coda_mem_cursor_read_uint32_array+0xd4>
    1c48:	ldr	r3, [r3, #4]
    1c4c:	ldr	r3, [r3, #40]	; 0x28
    1c50:	ldr	r3, [r3]
    1c54:	cmp	r3, #1
    1c58:	beq	1ccc <coda_mem_cursor_read_uint32_array+0xb4>
    1c5c:	cmp	r3, #0
    1c60:	bne	1d00 <coda_mem_cursor_read_uint32_array+0xe8>
    1c64:	str	r3, [sp]
    1c68:	mov	r2, r1
    1c6c:	mov	r3, #4
    1c70:	ldr	r1, [pc, #156]	; 1d14 <coda_mem_cursor_read_uint32_array+0xfc>
    1c74:	mov	r4, r0
    1c78:	bl	0 <read_array>
    1c7c:	cmp	r0, #0
    1c80:	bne	1ce4 <coda_mem_cursor_read_uint32_array+0xcc>
    1c84:	cmp	r6, #0
    1c88:	bne	1c94 <coda_mem_cursor_read_uint32_array+0x7c>
    1c8c:	add	sp, sp, #8
    1c90:	pop	{r4, r5, r6, pc}
    1c94:	mov	r1, r5
    1c98:	mov	r0, r4
    1c9c:	mov	r2, #4
    1ca0:	bl	2d8 <transpose_array>
    1ca4:	adds	r0, r0, #0
    1ca8:	mvnne	r0, #0
    1cac:	add	sp, sp, #8
    1cb0:	pop	{r4, r5, r6, pc}
    1cb4:	mov	r2, r1
    1cb8:	str	r6, [sp]
    1cbc:	mov	r3, #4
    1cc0:	ldr	r1, [pc, #80]	; 1d18 <coda_mem_cursor_read_uint32_array+0x100>
    1cc4:	bl	0 <read_array>
    1cc8:	b	1c8c <coda_mem_cursor_read_uint32_array+0x74>
    1ccc:	mov	r2, r1
    1cd0:	str	r6, [sp]
    1cd4:	mov	r3, #4
    1cd8:	ldr	r1, [pc, #60]	; 1d1c <coda_mem_cursor_read_uint32_array+0x104>
    1cdc:	bl	0 <read_array>
    1ce0:	b	1c8c <coda_mem_cursor_read_uint32_array+0x74>
    1ce4:	mvn	r0, #0
    1ce8:	b	1c8c <coda_mem_cursor_read_uint32_array+0x74>
    1cec:	ldr	r3, [pc, #44]	; 1d20 <coda_mem_cursor_read_uint32_array+0x108>
    1cf0:	ldr	r2, [pc, #44]	; 1d24 <coda_mem_cursor_read_uint32_array+0x10c>
    1cf4:	ldr	r1, [pc, #44]	; 1d28 <coda_mem_cursor_read_uint32_array+0x110>
    1cf8:	ldr	r0, [pc, #44]	; 1d2c <coda_mem_cursor_read_uint32_array+0x114>
    1cfc:	bl	0 <__assert_fail>
    1d00:	ldr	r3, [pc, #24]	; 1d20 <coda_mem_cursor_read_uint32_array+0x108>
    1d04:	mov	r2, #812	; 0x32c
    1d08:	ldr	r1, [pc, #24]	; 1d28 <coda_mem_cursor_read_uint32_array+0x110>
    1d0c:	ldr	r0, [pc, #28]	; 1d30 <coda_mem_cursor_read_uint32_array+0x118>
    1d10:	bl	0 <__assert_fail>
	...
    1d20:	.word	0x000003bc
    1d24:	.word	0x00000326
    1d28:	.word	0x000000c0
    1d2c:	.word	0x00000110
    1d30:	.word	0x000002ac

00001d34 <coda_mem_cursor_read_int64_array>:
    1d34:	ldr	r3, [r0, #4]
    1d38:	push	{r4, r5, r6, lr}
    1d3c:	mov	r6, r2
    1d40:	add	r3, r0, r3, lsl #4
    1d44:	sub	sp, sp, #8
    1d48:	ldr	r3, [r3, #-8]
    1d4c:	mov	r5, r1
    1d50:	ldr	r2, [r3, #8]
    1d54:	cmp	r2, #1
    1d58:	beq	1dd0 <coda_mem_cursor_read_int64_array+0x9c>
    1d5c:	cmp	r2, #2
    1d60:	bne	1e08 <coda_mem_cursor_read_int64_array+0xd4>
    1d64:	ldr	r3, [r3, #4]
    1d68:	ldr	r3, [r3, #40]	; 0x28
    1d6c:	ldr	r3, [r3]
    1d70:	cmp	r3, #1
    1d74:	beq	1de8 <coda_mem_cursor_read_int64_array+0xb4>
    1d78:	cmp	r3, #0
    1d7c:	bne	1e1c <coda_mem_cursor_read_int64_array+0xe8>
    1d80:	str	r3, [sp]
    1d84:	mov	r2, r1
    1d88:	mov	r3, #8
    1d8c:	ldr	r1, [pc, #156]	; 1e30 <coda_mem_cursor_read_int64_array+0xfc>
    1d90:	mov	r4, r0
    1d94:	bl	0 <read_array>
    1d98:	cmp	r0, #0
    1d9c:	bne	1e00 <coda_mem_cursor_read_int64_array+0xcc>
    1da0:	cmp	r6, #0
    1da4:	bne	1db0 <coda_mem_cursor_read_int64_array+0x7c>
    1da8:	add	sp, sp, #8
    1dac:	pop	{r4, r5, r6, pc}
    1db0:	mov	r1, r5
    1db4:	mov	r0, r4
    1db8:	mov	r2, #8
    1dbc:	bl	2d8 <transpose_array>
    1dc0:	adds	r0, r0, #0
    1dc4:	mvnne	r0, #0
    1dc8:	add	sp, sp, #8
    1dcc:	pop	{r4, r5, r6, pc}
    1dd0:	mov	r2, r1
    1dd4:	str	r6, [sp]
    1dd8:	mov	r3, #8
    1ddc:	ldr	r1, [pc, #80]	; 1e34 <coda_mem_cursor_read_int64_array+0x100>
    1de0:	bl	0 <read_array>
    1de4:	b	1da8 <coda_mem_cursor_read_int64_array+0x74>
    1de8:	mov	r2, r1
    1dec:	str	r6, [sp]
    1df0:	mov	r3, #8
    1df4:	ldr	r1, [pc, #60]	; 1e38 <coda_mem_cursor_read_int64_array+0x104>
    1df8:	bl	0 <read_array>
    1dfc:	b	1da8 <coda_mem_cursor_read_int64_array+0x74>
    1e00:	mvn	r0, #0
    1e04:	b	1da8 <coda_mem_cursor_read_int64_array+0x74>
    1e08:	ldr	r3, [pc, #44]	; 1e3c <coda_mem_cursor_read_int64_array+0x108>
    1e0c:	ldr	r2, [pc, #44]	; 1e40 <coda_mem_cursor_read_int64_array+0x10c>
    1e10:	ldr	r1, [pc, #44]	; 1e44 <coda_mem_cursor_read_int64_array+0x110>
    1e14:	ldr	r0, [pc, #44]	; 1e48 <coda_mem_cursor_read_int64_array+0x114>
    1e18:	bl	0 <__assert_fail>
    1e1c:	ldr	r3, [pc, #24]	; 1e3c <coda_mem_cursor_read_int64_array+0x108>
    1e20:	ldr	r2, [pc, #36]	; 1e4c <coda_mem_cursor_read_int64_array+0x118>
    1e24:	ldr	r1, [pc, #24]	; 1e44 <coda_mem_cursor_read_int64_array+0x110>
    1e28:	ldr	r0, [pc, #32]	; 1e50 <coda_mem_cursor_read_int64_array+0x11c>
    1e2c:	bl	0 <__assert_fail>
	...
    1e3c:	.word	0x000003e0
    1e40:	.word	0x00000345
    1e44:	.word	0x000000c0
    1e48:	.word	0x00000110
    1e4c:	.word	0x0000034b
    1e50:	.word	0x000002ac

00001e54 <coda_mem_cursor_read_uint64_array>:
    1e54:	ldr	r3, [r0, #4]
    1e58:	push	{r4, r5, r6, lr}
    1e5c:	mov	r6, r2
    1e60:	add	r3, r0, r3, lsl #4
    1e64:	sub	sp, sp, #8
    1e68:	ldr	r3, [r3, #-8]
    1e6c:	mov	r5, r1
    1e70:	ldr	r2, [r3, #8]
    1e74:	cmp	r2, #1
    1e78:	beq	1ef0 <coda_mem_cursor_read_uint64_array+0x9c>
    1e7c:	cmp	r2, #2
    1e80:	bne	1f28 <coda_mem_cursor_read_uint64_array+0xd4>
    1e84:	ldr	r3, [r3, #4]
    1e88:	ldr	r3, [r3, #40]	; 0x28
    1e8c:	ldr	r3, [r3]
    1e90:	cmp	r3, #1
    1e94:	beq	1f08 <coda_mem_cursor_read_uint64_array+0xb4>
    1e98:	cmp	r3, #0
    1e9c:	bne	1f3c <coda_mem_cursor_read_uint64_array+0xe8>
    1ea0:	str	r3, [sp]
    1ea4:	mov	r2, r1
    1ea8:	mov	r3, #8
    1eac:	ldr	r1, [pc, #156]	; 1f50 <coda_mem_cursor_read_uint64_array+0xfc>
    1eb0:	mov	r4, r0
    1eb4:	bl	0 <read_array>
    1eb8:	cmp	r0, #0
    1ebc:	bne	1f20 <coda_mem_cursor_read_uint64_array+0xcc>
    1ec0:	cmp	r6, #0
    1ec4:	bne	1ed0 <coda_mem_cursor_read_uint64_array+0x7c>
    1ec8:	add	sp, sp, #8
    1ecc:	pop	{r4, r5, r6, pc}
    1ed0:	mov	r1, r5
    1ed4:	mov	r0, r4
    1ed8:	mov	r2, #8
    1edc:	bl	2d8 <transpose_array>
    1ee0:	adds	r0, r0, #0
    1ee4:	mvnne	r0, #0
    1ee8:	add	sp, sp, #8
    1eec:	pop	{r4, r5, r6, pc}
    1ef0:	mov	r2, r1
    1ef4:	str	r6, [sp]
    1ef8:	mov	r3, #8
    1efc:	ldr	r1, [pc, #80]	; 1f54 <coda_mem_cursor_read_uint64_array+0x100>
    1f00:	bl	0 <read_array>
    1f04:	b	1ec8 <coda_mem_cursor_read_uint64_array+0x74>
    1f08:	mov	r2, r1
    1f0c:	str	r6, [sp]
    1f10:	mov	r3, #8
    1f14:	ldr	r1, [pc, #60]	; 1f58 <coda_mem_cursor_read_uint64_array+0x104>
    1f18:	bl	0 <read_array>
    1f1c:	b	1ec8 <coda_mem_cursor_read_uint64_array+0x74>
    1f20:	mvn	r0, #0
    1f24:	b	1ec8 <coda_mem_cursor_read_uint64_array+0x74>
    1f28:	ldr	r3, [pc, #44]	; 1f5c <coda_mem_cursor_read_uint64_array+0x108>
    1f2c:	mov	r2, #868	; 0x364
    1f30:	ldr	r1, [pc, #40]	; 1f60 <coda_mem_cursor_read_uint64_array+0x10c>
    1f34:	ldr	r0, [pc, #40]	; 1f64 <coda_mem_cursor_read_uint64_array+0x110>
    1f38:	bl	0 <__assert_fail>
    1f3c:	ldr	r3, [pc, #24]	; 1f5c <coda_mem_cursor_read_uint64_array+0x108>
    1f40:	ldr	r2, [pc, #32]	; 1f68 <coda_mem_cursor_read_uint64_array+0x114>
    1f44:	ldr	r1, [pc, #20]	; 1f60 <coda_mem_cursor_read_uint64_array+0x10c>
    1f48:	ldr	r0, [pc, #28]	; 1f6c <coda_mem_cursor_read_uint64_array+0x118>
    1f4c:	bl	0 <__assert_fail>
	...
    1f5c:	.word	0x00000404
    1f60:	.word	0x000000c0
    1f64:	.word	0x00000110
    1f68:	.word	0x0000036a
    1f6c:	.word	0x000002ac

00001f70 <coda_mem_cursor_read_float_array>:
    1f70:	ldr	r3, [r0, #4]
    1f74:	push	{r4, r5, r6, lr}
    1f78:	mov	r6, r2
    1f7c:	add	r3, r0, r3, lsl #4
    1f80:	sub	sp, sp, #8
    1f84:	ldr	r3, [r3, #-8]
    1f88:	mov	r5, r1
    1f8c:	ldr	r2, [r3, #8]
    1f90:	cmp	r2, #1
    1f94:	beq	200c <coda_mem_cursor_read_float_array+0x9c>
    1f98:	cmp	r2, #2
    1f9c:	bne	2044 <coda_mem_cursor_read_float_array+0xd4>
    1fa0:	ldr	r3, [r3, #4]
    1fa4:	ldr	r3, [r3, #40]	; 0x28
    1fa8:	ldr	r3, [r3]
    1fac:	cmp	r3, #1
    1fb0:	beq	2024 <coda_mem_cursor_read_float_array+0xb4>
    1fb4:	cmp	r3, #0
    1fb8:	bne	2058 <coda_mem_cursor_read_float_array+0xe8>
    1fbc:	str	r3, [sp]
    1fc0:	mov	r2, r1
    1fc4:	mov	r3, #4
    1fc8:	ldr	r1, [pc, #156]	; 206c <coda_mem_cursor_read_float_array+0xfc>
    1fcc:	mov	r4, r0
    1fd0:	bl	0 <read_array>
    1fd4:	cmp	r0, #0
    1fd8:	bne	203c <coda_mem_cursor_read_float_array+0xcc>
    1fdc:	cmp	r6, #0
    1fe0:	bne	1fec <coda_mem_cursor_read_float_array+0x7c>
    1fe4:	add	sp, sp, #8
    1fe8:	pop	{r4, r5, r6, pc}
    1fec:	mov	r1, r5
    1ff0:	mov	r0, r4
    1ff4:	mov	r2, #4
    1ff8:	bl	2d8 <transpose_array>
    1ffc:	adds	r0, r0, #0
    2000:	mvnne	r0, #0
    2004:	add	sp, sp, #8
    2008:	pop	{r4, r5, r6, pc}
    200c:	mov	r2, r1
    2010:	str	r6, [sp]
    2014:	mov	r3, #4
    2018:	ldr	r1, [pc, #80]	; 2070 <coda_mem_cursor_read_float_array+0x100>
    201c:	bl	0 <read_array>
    2020:	b	1fe4 <coda_mem_cursor_read_float_array+0x74>
    2024:	mov	r2, r1
    2028:	str	r6, [sp]
    202c:	mov	r3, #4
    2030:	ldr	r1, [pc, #60]	; 2074 <coda_mem_cursor_read_float_array+0x104>
    2034:	bl	0 <read_array>
    2038:	b	1fe4 <coda_mem_cursor_read_float_array+0x74>
    203c:	mvn	r0, #0
    2040:	b	1fe4 <coda_mem_cursor_read_float_array+0x74>
    2044:	ldr	r3, [pc, #44]	; 2078 <coda_mem_cursor_read_float_array+0x108>
    2048:	ldr	r2, [pc, #44]	; 207c <coda_mem_cursor_read_float_array+0x10c>
    204c:	ldr	r1, [pc, #44]	; 2080 <coda_mem_cursor_read_float_array+0x110>
    2050:	ldr	r0, [pc, #44]	; 2084 <coda_mem_cursor_read_float_array+0x114>
    2054:	bl	0 <__assert_fail>
    2058:	ldr	r3, [pc, #24]	; 2078 <coda_mem_cursor_read_float_array+0x108>
    205c:	ldr	r2, [pc, #36]	; 2088 <coda_mem_cursor_read_float_array+0x118>
    2060:	ldr	r1, [pc, #24]	; 2080 <coda_mem_cursor_read_float_array+0x110>
    2064:	ldr	r0, [pc, #32]	; 208c <coda_mem_cursor_read_float_array+0x11c>
    2068:	bl	0 <__assert_fail>
	...
    2078:	.word	0x00000428
    207c:	.word	0x00000383
    2080:	.word	0x000000c0
    2084:	.word	0x00000110
    2088:	.word	0x00000389
    208c:	.word	0x000002ac

00002090 <coda_mem_cursor_read_double_array>:
    2090:	ldr	r3, [r0, #4]
    2094:	push	{r4, r5, r6, lr}
    2098:	mov	r6, r2
    209c:	add	r3, r0, r3, lsl #4
    20a0:	sub	sp, sp, #8
    20a4:	ldr	r3, [r3, #-8]
    20a8:	mov	r5, r1
    20ac:	ldr	r2, [r3, #8]
    20b0:	cmp	r2, #1
    20b4:	beq	212c <coda_mem_cursor_read_double_array+0x9c>
    20b8:	cmp	r2, #2
    20bc:	bne	2164 <coda_mem_cursor_read_double_array+0xd4>
    20c0:	ldr	r3, [r3, #4]
    20c4:	ldr	r3, [r3, #40]	; 0x28
    20c8:	ldr	r3, [r3]
    20cc:	cmp	r3, #1
    20d0:	beq	2144 <coda_mem_cursor_read_double_array+0xb4>
    20d4:	cmp	r3, #0
    20d8:	bne	2178 <coda_mem_cursor_read_double_array+0xe8>
    20dc:	str	r3, [sp]
    20e0:	mov	r2, r1
    20e4:	mov	r3, #8
    20e8:	ldr	r1, [pc, #156]	; 218c <coda_mem_cursor_read_double_array+0xfc>
    20ec:	mov	r4, r0
    20f0:	bl	0 <read_array>
    20f4:	cmp	r0, #0
    20f8:	bne	215c <coda_mem_cursor_read_double_array+0xcc>
    20fc:	cmp	r6, #0
    2100:	bne	210c <coda_mem_cursor_read_double_array+0x7c>
    2104:	add	sp, sp, #8
    2108:	pop	{r4, r5, r6, pc}
    210c:	mov	r1, r5
    2110:	mov	r0, r4
    2114:	mov	r2, #8
    2118:	bl	2d8 <transpose_array>
    211c:	adds	r0, r0, #0
    2120:	mvnne	r0, #0
    2124:	add	sp, sp, #8
    2128:	pop	{r4, r5, r6, pc}
    212c:	mov	r2, r1
    2130:	str	r6, [sp]
    2134:	mov	r3, #8
    2138:	ldr	r1, [pc, #80]	; 2190 <coda_mem_cursor_read_double_array+0x100>
    213c:	bl	0 <read_array>
    2140:	b	2104 <coda_mem_cursor_read_double_array+0x74>
    2144:	mov	r2, r1
    2148:	str	r6, [sp]
    214c:	mov	r3, #8
    2150:	ldr	r1, [pc, #60]	; 2194 <coda_mem_cursor_read_double_array+0x104>
    2154:	bl	0 <read_array>
    2158:	b	2104 <coda_mem_cursor_read_double_array+0x74>
    215c:	mvn	r0, #0
    2160:	b	2104 <coda_mem_cursor_read_double_array+0x74>
    2164:	ldr	r3, [pc, #44]	; 2198 <coda_mem_cursor_read_double_array+0x108>
    2168:	ldr	r2, [pc, #44]	; 219c <coda_mem_cursor_read_double_array+0x10c>
    216c:	ldr	r1, [pc, #44]	; 21a0 <coda_mem_cursor_read_double_array+0x110>
    2170:	ldr	r0, [pc, #44]	; 21a4 <coda_mem_cursor_read_double_array+0x114>
    2174:	bl	0 <__assert_fail>
    2178:	ldr	r3, [pc, #24]	; 2198 <coda_mem_cursor_read_double_array+0x108>
    217c:	mov	r2, #936	; 0x3a8
    2180:	ldr	r1, [pc, #24]	; 21a0 <coda_mem_cursor_read_double_array+0x110>
    2184:	ldr	r0, [pc, #28]	; 21a8 <coda_mem_cursor_read_double_array+0x118>
    2188:	bl	0 <__assert_fail>
	...
    2198:	.word	0x0000044c
    219c:	.word	0x000003a2
    21a0:	.word	0x000000c0
    21a4:	.word	0x00000110
    21a8:	.word	0x000002ac

000021ac <coda_mem_cursor_read_char_array>:
    21ac:	ldr	r3, [r0, #4]
    21b0:	push	{r4, r5, r6, lr}
    21b4:	mov	r6, r2
    21b8:	add	r3, r0, r3, lsl #4
    21bc:	sub	sp, sp, #8
    21c0:	ldr	r2, [r3, #-8]
    21c4:	mov	r5, r1
    21c8:	ldr	r3, [r2, #8]
    21cc:	cmp	r3, #1
    21d0:	beq	2248 <coda_mem_cursor_read_char_array+0x9c>
    21d4:	cmp	r3, #2
    21d8:	bne	2278 <coda_mem_cursor_read_char_array+0xcc>
    21dc:	ldr	r3, [r2, #4]
    21e0:	ldr	r3, [r3, #40]	; 0x28
    21e4:	ldr	r3, [r3]
    21e8:	cmp	r3, #1
    21ec:	beq	225c <coda_mem_cursor_read_char_array+0xb0>
    21f0:	cmp	r3, #0
    21f4:	bne	228c <coda_mem_cursor_read_char_array+0xe0>
    21f8:	str	r3, [sp]
    21fc:	mov	r2, r1
    2200:	mov	r3, #1
    2204:	ldr	r1, [pc, #148]	; 22a0 <coda_mem_cursor_read_char_array+0xf4>
    2208:	mov	r4, r0
    220c:	bl	0 <read_array>
    2210:	cmp	r0, #0
    2214:	bne	2270 <coda_mem_cursor_read_char_array+0xc4>
    2218:	cmp	r6, #0
    221c:	bne	2228 <coda_mem_cursor_read_char_array+0x7c>
    2220:	add	sp, sp, #8
    2224:	pop	{r4, r5, r6, pc}
    2228:	mov	r1, r5
    222c:	mov	r0, r4
    2230:	mov	r2, #1
    2234:	bl	2d8 <transpose_array>
    2238:	adds	r0, r0, #0
    223c:	mvnne	r0, #0
    2240:	add	sp, sp, #8
    2244:	pop	{r4, r5, r6, pc}
    2248:	mov	r2, r1
    224c:	str	r6, [sp]
    2250:	ldr	r1, [pc, #76]	; 22a4 <coda_mem_cursor_read_char_array+0xf8>
    2254:	bl	0 <read_array>
    2258:	b	2220 <coda_mem_cursor_read_char_array+0x74>
    225c:	mov	r2, r1
    2260:	str	r6, [sp]
    2264:	ldr	r1, [pc, #60]	; 22a8 <coda_mem_cursor_read_char_array+0xfc>
    2268:	bl	0 <read_array>
    226c:	b	2220 <coda_mem_cursor_read_char_array+0x74>
    2270:	mvn	r0, #0
    2274:	b	2220 <coda_mem_cursor_read_char_array+0x74>
    2278:	ldr	r3, [pc, #44]	; 22ac <coda_mem_cursor_read_char_array+0x100>
    227c:	mov	r2, #960	; 0x3c0
    2280:	ldr	r1, [pc, #40]	; 22b0 <coda_mem_cursor_read_char_array+0x104>
    2284:	ldr	r0, [pc, #40]	; 22b4 <coda_mem_cursor_read_char_array+0x108>
    2288:	bl	0 <__assert_fail>
    228c:	ldr	r3, [pc, #24]	; 22ac <coda_mem_cursor_read_char_array+0x100>
    2290:	ldr	r2, [pc, #32]	; 22b8 <coda_mem_cursor_read_char_array+0x10c>
    2294:	ldr	r1, [pc, #20]	; 22b0 <coda_mem_cursor_read_char_array+0x104>
    2298:	ldr	r0, [pc, #28]	; 22bc <coda_mem_cursor_read_char_array+0x110>
    229c:	bl	0 <__assert_fail>
	...
    22ac:	.word	0x00000470
    22b0:	.word	0x000000c0
    22b4:	.word	0x00000110
    22b8:	.word	0x000003c6
    22bc:	.word	0x000002ac

000022c0 <coda_mem_cursor_read_int8_partial_array>:
    22c0:	push	{lr}		; (str lr, [sp, #-4]!)
    22c4:	sub	sp, sp, #12
    22c8:	ldr	lr, [r0, #4]
    22cc:	add	ip, r0, lr, lsl #4
    22d0:	ldr	lr, [ip, #-8]
    22d4:	ldr	ip, [lr, #8]
    22d8:	cmp	ip, #1
    22dc:	beq	2328 <coda_mem_cursor_read_int8_partial_array+0x68>
    22e0:	cmp	ip, #2
    22e4:	bne	2358 <coda_mem_cursor_read_int8_partial_array+0x98>
    22e8:	ldr	ip, [lr, #4]
    22ec:	ldr	ip, [ip, #40]	; 0x28
    22f0:	ldr	ip, [ip]
    22f4:	cmp	ip, #1
    22f8:	beq	2340 <coda_mem_cursor_read_int8_partial_array+0x80>
    22fc:	cmp	ip, #0
    2300:	bne	236c <coda_mem_cursor_read_int8_partial_array+0xac>
    2304:	mov	ip, #1
    2308:	str	r3, [sp]
    230c:	str	ip, [sp, #4]
    2310:	mov	r3, r2
    2314:	mov	r2, r1
    2318:	ldr	r1, [pc, #96]	; 2380 <coda_mem_cursor_read_int8_partial_array+0xc0>
    231c:	bl	238 <read_partial_array>
    2320:	add	sp, sp, #12
    2324:	pop	{pc}		; (ldr pc, [sp], #4)
    2328:	stm	sp, {r3, ip}
    232c:	mov	r3, r2
    2330:	mov	r2, r1
    2334:	ldr	r1, [pc, #72]	; 2384 <coda_mem_cursor_read_int8_partial_array+0xc4>
    2338:	bl	238 <read_partial_array>
    233c:	b	2320 <coda_mem_cursor_read_int8_partial_array+0x60>
    2340:	stm	sp, {r3, ip}
    2344:	mov	r3, r2
    2348:	mov	r2, r1
    234c:	ldr	r1, [pc, #52]	; 2388 <coda_mem_cursor_read_int8_partial_array+0xc8>
    2350:	bl	238 <read_partial_array>
    2354:	b	2320 <coda_mem_cursor_read_int8_partial_array+0x60>
    2358:	ldr	r3, [pc, #44]	; 238c <coda_mem_cursor_read_int8_partial_array+0xcc>
    235c:	ldr	r2, [pc, #44]	; 2390 <coda_mem_cursor_read_int8_partial_array+0xd0>
    2360:	ldr	r1, [pc, #44]	; 2394 <coda_mem_cursor_read_int8_partial_array+0xd4>
    2364:	ldr	r0, [pc, #44]	; 2398 <coda_mem_cursor_read_int8_partial_array+0xd8>
    2368:	bl	0 <__assert_fail>
    236c:	ldr	r3, [pc, #24]	; 238c <coda_mem_cursor_read_int8_partial_array+0xcc>
    2370:	ldr	r2, [pc, #36]	; 239c <coda_mem_cursor_read_int8_partial_array+0xdc>
    2374:	ldr	r1, [pc, #24]	; 2394 <coda_mem_cursor_read_int8_partial_array+0xd4>
    2378:	ldr	r0, [pc, #32]	; 23a0 <coda_mem_cursor_read_int8_partial_array+0xe0>
    237c:	bl	0 <__assert_fail>
	...
    238c:	.word	0x00000490
    2390:	.word	0x000003df
    2394:	.word	0x000000c0
    2398:	.word	0x00000110
    239c:	.word	0x000003e5
    23a0:	.word	0x000002ac

000023a4 <coda_mem_cursor_read_uint8_partial_array>:
    23a4:	push	{lr}		; (str lr, [sp, #-4]!)
    23a8:	sub	sp, sp, #12
    23ac:	ldr	lr, [r0, #4]
    23b0:	add	ip, r0, lr, lsl #4
    23b4:	ldr	lr, [ip, #-8]
    23b8:	ldr	ip, [lr, #8]
    23bc:	cmp	ip, #1
    23c0:	beq	240c <coda_mem_cursor_read_uint8_partial_array+0x68>
    23c4:	cmp	ip, #2
    23c8:	bne	243c <coda_mem_cursor_read_uint8_partial_array+0x98>
    23cc:	ldr	ip, [lr, #4]
    23d0:	ldr	ip, [ip, #40]	; 0x28
    23d4:	ldr	ip, [ip]
    23d8:	cmp	ip, #1
    23dc:	beq	2424 <coda_mem_cursor_read_uint8_partial_array+0x80>
    23e0:	cmp	ip, #0
    23e4:	bne	2450 <coda_mem_cursor_read_uint8_partial_array+0xac>
    23e8:	mov	ip, #1
    23ec:	str	r3, [sp]
    23f0:	str	ip, [sp, #4]
    23f4:	mov	r3, r2
    23f8:	mov	r2, r1
    23fc:	ldr	r1, [pc, #96]	; 2464 <coda_mem_cursor_read_uint8_partial_array+0xc0>
    2400:	bl	238 <read_partial_array>
    2404:	add	sp, sp, #12
    2408:	pop	{pc}		; (ldr pc, [sp], #4)
    240c:	stm	sp, {r3, ip}
    2410:	mov	r3, r2
    2414:	mov	r2, r1
    2418:	ldr	r1, [pc, #72]	; 2468 <coda_mem_cursor_read_uint8_partial_array+0xc4>
    241c:	bl	238 <read_partial_array>
    2420:	b	2404 <coda_mem_cursor_read_uint8_partial_array+0x60>
    2424:	stm	sp, {r3, ip}
    2428:	mov	r3, r2
    242c:	mov	r2, r1
    2430:	ldr	r1, [pc, #52]	; 246c <coda_mem_cursor_read_uint8_partial_array+0xc8>
    2434:	bl	238 <read_partial_array>
    2438:	b	2404 <coda_mem_cursor_read_uint8_partial_array+0x60>
    243c:	ldr	r3, [pc, #44]	; 2470 <coda_mem_cursor_read_uint8_partial_array+0xcc>
    2440:	ldr	r2, [pc, #44]	; 2474 <coda_mem_cursor_read_uint8_partial_array+0xd0>
    2444:	ldr	r1, [pc, #44]	; 2478 <coda_mem_cursor_read_uint8_partial_array+0xd4>
    2448:	ldr	r0, [pc, #44]	; 247c <coda_mem_cursor_read_uint8_partial_array+0xd8>
    244c:	bl	0 <__assert_fail>
    2450:	ldr	r3, [pc, #24]	; 2470 <coda_mem_cursor_read_uint8_partial_array+0xcc>
    2454:	ldr	r2, [pc, #36]	; 2480 <coda_mem_cursor_read_uint8_partial_array+0xdc>
    2458:	ldr	r1, [pc, #24]	; 2478 <coda_mem_cursor_read_uint8_partial_array+0xd4>
    245c:	ldr	r0, [pc, #32]	; 2484 <coda_mem_cursor_read_uint8_partial_array+0xe0>
    2460:	bl	0 <__assert_fail>
	...
    2470:	.word	0x000004b8
    2474:	.word	0x000003f3
    2478:	.word	0x000000c0
    247c:	.word	0x00000110
    2480:	.word	0x000003f9
    2484:	.word	0x000002ac

00002488 <coda_mem_cursor_read_int16_partial_array>:
    2488:	push	{lr}		; (str lr, [sp, #-4]!)
    248c:	sub	sp, sp, #12
    2490:	ldr	lr, [r0, #4]
    2494:	add	ip, r0, lr, lsl #4
    2498:	ldr	lr, [ip, #-8]
    249c:	ldr	ip, [lr, #8]
    24a0:	cmp	ip, #1
    24a4:	beq	24e8 <coda_mem_cursor_read_int16_partial_array+0x60>
    24a8:	cmp	ip, #2
    24ac:	bne	2520 <coda_mem_cursor_read_int16_partial_array+0x98>
    24b0:	ldr	lr, [lr, #4]
    24b4:	ldr	lr, [lr, #40]	; 0x28
    24b8:	ldr	lr, [lr]
    24bc:	cmp	lr, #1
    24c0:	beq	2508 <coda_mem_cursor_read_int16_partial_array+0x80>
    24c4:	cmp	lr, #0
    24c8:	bne	2534 <coda_mem_cursor_read_int16_partial_array+0xac>
    24cc:	stm	sp, {r3, ip}
    24d0:	mov	r3, r2
    24d4:	mov	r2, r1
    24d8:	ldr	r1, [pc, #104]	; 2548 <coda_mem_cursor_read_int16_partial_array+0xc0>
    24dc:	bl	238 <read_partial_array>
    24e0:	add	sp, sp, #12
    24e4:	pop	{pc}		; (ldr pc, [sp], #4)
    24e8:	mov	ip, #2
    24ec:	str	r3, [sp]
    24f0:	str	ip, [sp, #4]
    24f4:	mov	r3, r2
    24f8:	mov	r2, r1
    24fc:	ldr	r1, [pc, #72]	; 254c <coda_mem_cursor_read_int16_partial_array+0xc4>
    2500:	bl	238 <read_partial_array>
    2504:	b	24e0 <coda_mem_cursor_read_int16_partial_array+0x58>
    2508:	stm	sp, {r3, ip}
    250c:	mov	r3, r2
    2510:	mov	r2, r1
    2514:	ldr	r1, [pc, #52]	; 2550 <coda_mem_cursor_read_int16_partial_array+0xc8>
    2518:	bl	238 <read_partial_array>
    251c:	b	24e0 <coda_mem_cursor_read_int16_partial_array+0x58>
    2520:	ldr	r3, [pc, #44]	; 2554 <coda_mem_cursor_read_int16_partial_array+0xcc>
    2524:	ldr	r2, [pc, #44]	; 2558 <coda_mem_cursor_read_int16_partial_array+0xd0>
    2528:	ldr	r1, [pc, #44]	; 255c <coda_mem_cursor_read_int16_partial_array+0xd4>
    252c:	ldr	r0, [pc, #44]	; 2560 <coda_mem_cursor_read_int16_partial_array+0xd8>
    2530:	bl	0 <__assert_fail>
    2534:	ldr	r3, [pc, #24]	; 2554 <coda_mem_cursor_read_int16_partial_array+0xcc>
    2538:	ldr	r2, [pc, #36]	; 2564 <coda_mem_cursor_read_int16_partial_array+0xdc>
    253c:	ldr	r1, [pc, #24]	; 255c <coda_mem_cursor_read_int16_partial_array+0xd4>
    2540:	ldr	r0, [pc, #32]	; 2568 <coda_mem_cursor_read_int16_partial_array+0xe0>
    2544:	bl	0 <__assert_fail>
	...
    2554:	.word	0x000004e4
    2558:	.word	0x00000407
    255c:	.word	0x000000c0
    2560:	.word	0x00000110
    2564:	.word	0x0000040d
    2568:	.word	0x000002ac

0000256c <coda_mem_cursor_read_uint16_partial_array>:
    256c:	push	{lr}		; (str lr, [sp, #-4]!)
    2570:	sub	sp, sp, #12
    2574:	ldr	lr, [r0, #4]
    2578:	add	ip, r0, lr, lsl #4
    257c:	ldr	lr, [ip, #-8]
    2580:	ldr	ip, [lr, #8]
    2584:	cmp	ip, #1
    2588:	beq	25cc <coda_mem_cursor_read_uint16_partial_array+0x60>
    258c:	cmp	ip, #2
    2590:	bne	2604 <coda_mem_cursor_read_uint16_partial_array+0x98>
    2594:	ldr	lr, [lr, #4]
    2598:	ldr	lr, [lr, #40]	; 0x28
    259c:	ldr	lr, [lr]
    25a0:	cmp	lr, #1
    25a4:	beq	25ec <coda_mem_cursor_read_uint16_partial_array+0x80>
    25a8:	cmp	lr, #0
    25ac:	bne	2618 <coda_mem_cursor_read_uint16_partial_array+0xac>
    25b0:	stm	sp, {r3, ip}
    25b4:	mov	r3, r2
    25b8:	mov	r2, r1
    25bc:	ldr	r1, [pc, #104]	; 262c <coda_mem_cursor_read_uint16_partial_array+0xc0>
    25c0:	bl	238 <read_partial_array>
    25c4:	add	sp, sp, #12
    25c8:	pop	{pc}		; (ldr pc, [sp], #4)
    25cc:	mov	ip, #2
    25d0:	str	r3, [sp]
    25d4:	str	ip, [sp, #4]
    25d8:	mov	r3, r2
    25dc:	mov	r2, r1
    25e0:	ldr	r1, [pc, #72]	; 2630 <coda_mem_cursor_read_uint16_partial_array+0xc4>
    25e4:	bl	238 <read_partial_array>
    25e8:	b	25c4 <coda_mem_cursor_read_uint16_partial_array+0x58>
    25ec:	stm	sp, {r3, ip}
    25f0:	mov	r3, r2
    25f4:	mov	r2, r1
    25f8:	ldr	r1, [pc, #52]	; 2634 <coda_mem_cursor_read_uint16_partial_array+0xc8>
    25fc:	bl	238 <read_partial_array>
    2600:	b	25c4 <coda_mem_cursor_read_uint16_partial_array+0x58>
    2604:	ldr	r3, [pc, #44]	; 2638 <coda_mem_cursor_read_uint16_partial_array+0xcc>
    2608:	ldr	r2, [pc, #44]	; 263c <coda_mem_cursor_read_uint16_partial_array+0xd0>
    260c:	ldr	r1, [pc, #44]	; 2640 <coda_mem_cursor_read_uint16_partial_array+0xd4>
    2610:	ldr	r0, [pc, #44]	; 2644 <coda_mem_cursor_read_uint16_partial_array+0xd8>
    2614:	bl	0 <__assert_fail>
    2618:	ldr	r3, [pc, #24]	; 2638 <coda_mem_cursor_read_uint16_partial_array+0xcc>
    261c:	ldr	r2, [pc, #36]	; 2648 <coda_mem_cursor_read_uint16_partial_array+0xdc>
    2620:	ldr	r1, [pc, #24]	; 2640 <coda_mem_cursor_read_uint16_partial_array+0xd4>
    2624:	ldr	r0, [pc, #32]	; 264c <coda_mem_cursor_read_uint16_partial_array+0xe0>
    2628:	bl	0 <__assert_fail>
	...
    2638:	.word	0x00000510
    263c:	.word	0x0000041b
    2640:	.word	0x000000c0
    2644:	.word	0x00000110
    2648:	.word	0x00000421
    264c:	.word	0x000002ac

00002650 <coda_mem_cursor_read_int32_partial_array>:
    2650:	push	{lr}		; (str lr, [sp, #-4]!)
    2654:	sub	sp, sp, #12
    2658:	ldr	lr, [r0, #4]
    265c:	add	ip, r0, lr, lsl #4
    2660:	ldr	ip, [ip, #-8]
    2664:	ldr	lr, [ip, #8]
    2668:	cmp	lr, #1
    266c:	beq	26b8 <coda_mem_cursor_read_int32_partial_array+0x68>
    2670:	cmp	lr, #2
    2674:	bne	26f8 <coda_mem_cursor_read_int32_partial_array+0xa8>
    2678:	ldr	ip, [ip, #4]
    267c:	ldr	ip, [ip, #40]	; 0x28
    2680:	ldr	ip, [ip]
    2684:	cmp	ip, #1
    2688:	beq	26d8 <coda_mem_cursor_read_int32_partial_array+0x88>
    268c:	cmp	ip, #0
    2690:	bne	270c <coda_mem_cursor_read_int32_partial_array+0xbc>
    2694:	mov	ip, #4
    2698:	str	r3, [sp]
    269c:	str	ip, [sp, #4]
    26a0:	mov	r3, r2
    26a4:	mov	r2, r1
    26a8:	ldr	r1, [pc, #112]	; 2720 <coda_mem_cursor_read_int32_partial_array+0xd0>
    26ac:	bl	238 <read_partial_array>
    26b0:	add	sp, sp, #12
    26b4:	pop	{pc}		; (ldr pc, [sp], #4)
    26b8:	mov	ip, #4
    26bc:	str	r3, [sp]
    26c0:	str	ip, [sp, #4]
    26c4:	mov	r3, r2
    26c8:	mov	r2, r1
    26cc:	ldr	r1, [pc, #80]	; 2724 <coda_mem_cursor_read_int32_partial_array+0xd4>
    26d0:	bl	238 <read_partial_array>
    26d4:	b	26b0 <coda_mem_cursor_read_int32_partial_array+0x60>
    26d8:	mov	ip, #4
    26dc:	str	r3, [sp]
    26e0:	str	ip, [sp, #4]
    26e4:	mov	r3, r2
    26e8:	mov	r2, r1
    26ec:	ldr	r1, [pc, #52]	; 2728 <coda_mem_cursor_read_int32_partial_array+0xd8>
    26f0:	bl	238 <read_partial_array>
    26f4:	b	26b0 <coda_mem_cursor_read_int32_partial_array+0x60>
    26f8:	ldr	r3, [pc, #44]	; 272c <coda_mem_cursor_read_int32_partial_array+0xdc>
    26fc:	ldr	r2, [pc, #44]	; 2730 <coda_mem_cursor_read_int32_partial_array+0xe0>
    2700:	ldr	r1, [pc, #44]	; 2734 <coda_mem_cursor_read_int32_partial_array+0xe4>
    2704:	ldr	r0, [pc, #44]	; 2738 <coda_mem_cursor_read_int32_partial_array+0xe8>
    2708:	bl	0 <__assert_fail>
    270c:	ldr	r3, [pc, #24]	; 272c <coda_mem_cursor_read_int32_partial_array+0xdc>
    2710:	ldr	r2, [pc, #36]	; 273c <coda_mem_cursor_read_int32_partial_array+0xec>
    2714:	ldr	r1, [pc, #24]	; 2734 <coda_mem_cursor_read_int32_partial_array+0xe4>
    2718:	ldr	r0, [pc, #32]	; 2740 <coda_mem_cursor_read_int32_partial_array+0xf0>
    271c:	bl	0 <__assert_fail>
	...
    272c:	.word	0x0000053c
    2730:	.word	0x0000042f
    2734:	.word	0x000000c0
    2738:	.word	0x00000110
    273c:	.word	0x00000435
    2740:	.word	0x000002ac

00002744 <coda_mem_cursor_read_uint32_partial_array>:
    2744:	push	{lr}		; (str lr, [sp, #-4]!)
    2748:	sub	sp, sp, #12
    274c:	ldr	lr, [r0, #4]
    2750:	add	ip, r0, lr, lsl #4
    2754:	ldr	ip, [ip, #-8]
    2758:	ldr	lr, [ip, #8]
    275c:	cmp	lr, #1
    2760:	beq	27ac <coda_mem_cursor_read_uint32_partial_array+0x68>
    2764:	cmp	lr, #2
    2768:	bne	27ec <coda_mem_cursor_read_uint32_partial_array+0xa8>
    276c:	ldr	ip, [ip, #4]
    2770:	ldr	ip, [ip, #40]	; 0x28
    2774:	ldr	ip, [ip]
    2778:	cmp	ip, #1
    277c:	beq	27cc <coda_mem_cursor_read_uint32_partial_array+0x88>
    2780:	cmp	ip, #0
    2784:	bne	2800 <coda_mem_cursor_read_uint32_partial_array+0xbc>
    2788:	mov	ip, #4
    278c:	str	r3, [sp]
    2790:	str	ip, [sp, #4]
    2794:	mov	r3, r2
    2798:	mov	r2, r1
    279c:	ldr	r1, [pc, #112]	; 2814 <coda_mem_cursor_read_uint32_partial_array+0xd0>
    27a0:	bl	238 <read_partial_array>
    27a4:	add	sp, sp, #12
    27a8:	pop	{pc}		; (ldr pc, [sp], #4)
    27ac:	mov	ip, #4
    27b0:	str	r3, [sp]
    27b4:	str	ip, [sp, #4]
    27b8:	mov	r3, r2
    27bc:	mov	r2, r1
    27c0:	ldr	r1, [pc, #80]	; 2818 <coda_mem_cursor_read_uint32_partial_array+0xd4>
    27c4:	bl	238 <read_partial_array>
    27c8:	b	27a4 <coda_mem_cursor_read_uint32_partial_array+0x60>
    27cc:	mov	ip, #4
    27d0:	str	r3, [sp]
    27d4:	str	ip, [sp, #4]
    27d8:	mov	r3, r2
    27dc:	mov	r2, r1
    27e0:	ldr	r1, [pc, #52]	; 281c <coda_mem_cursor_read_uint32_partial_array+0xd8>
    27e4:	bl	238 <read_partial_array>
    27e8:	b	27a4 <coda_mem_cursor_read_uint32_partial_array+0x60>
    27ec:	ldr	r3, [pc, #44]	; 2820 <coda_mem_cursor_read_uint32_partial_array+0xdc>
    27f0:	ldr	r2, [pc, #44]	; 2824 <coda_mem_cursor_read_uint32_partial_array+0xe0>
    27f4:	ldr	r1, [pc, #44]	; 2828 <coda_mem_cursor_read_uint32_partial_array+0xe4>
    27f8:	ldr	r0, [pc, #44]	; 282c <coda_mem_cursor_read_uint32_partial_array+0xe8>
    27fc:	bl	0 <__assert_fail>
    2800:	ldr	r3, [pc, #24]	; 2820 <coda_mem_cursor_read_uint32_partial_array+0xdc>
    2804:	ldr	r2, [pc, #36]	; 2830 <coda_mem_cursor_read_uint32_partial_array+0xec>
    2808:	ldr	r1, [pc, #24]	; 2828 <coda_mem_cursor_read_uint32_partial_array+0xe4>
    280c:	ldr	r0, [pc, #32]	; 2834 <coda_mem_cursor_read_uint32_partial_array+0xf0>
    2810:	bl	0 <__assert_fail>
	...
    2820:	.word	0x00000568
    2824:	.word	0x00000443
    2828:	.word	0x000000c0
    282c:	.word	0x00000110
    2830:	.word	0x00000449
    2834:	.word	0x000002ac

00002838 <coda_mem_cursor_read_int64_partial_array>:
    2838:	push	{lr}		; (str lr, [sp, #-4]!)
    283c:	sub	sp, sp, #12
    2840:	ldr	lr, [r0, #4]
    2844:	add	ip, r0, lr, lsl #4
    2848:	ldr	ip, [ip, #-8]
    284c:	ldr	lr, [ip, #8]
    2850:	cmp	lr, #1
    2854:	beq	28a0 <coda_mem_cursor_read_int64_partial_array+0x68>
    2858:	cmp	lr, #2
    285c:	bne	28e0 <coda_mem_cursor_read_int64_partial_array+0xa8>
    2860:	ldr	ip, [ip, #4]
    2864:	ldr	ip, [ip, #40]	; 0x28
    2868:	ldr	ip, [ip]
    286c:	cmp	ip, #1
    2870:	beq	28c0 <coda_mem_cursor_read_int64_partial_array+0x88>
    2874:	cmp	ip, #0
    2878:	bne	28f4 <coda_mem_cursor_read_int64_partial_array+0xbc>
    287c:	mov	ip, #8
    2880:	str	r3, [sp]
    2884:	str	ip, [sp, #4]
    2888:	mov	r3, r2
    288c:	mov	r2, r1
    2890:	ldr	r1, [pc, #112]	; 2908 <coda_mem_cursor_read_int64_partial_array+0xd0>
    2894:	bl	238 <read_partial_array>
    2898:	add	sp, sp, #12
    289c:	pop	{pc}		; (ldr pc, [sp], #4)
    28a0:	mov	ip, #8
    28a4:	str	r3, [sp]
    28a8:	str	ip, [sp, #4]
    28ac:	mov	r3, r2
    28b0:	mov	r2, r1
    28b4:	ldr	r1, [pc, #80]	; 290c <coda_mem_cursor_read_int64_partial_array+0xd4>
    28b8:	bl	238 <read_partial_array>
    28bc:	b	2898 <coda_mem_cursor_read_int64_partial_array+0x60>
    28c0:	mov	ip, #8
    28c4:	str	r3, [sp]
    28c8:	str	ip, [sp, #4]
    28cc:	mov	r3, r2
    28d0:	mov	r2, r1
    28d4:	ldr	r1, [pc, #52]	; 2910 <coda_mem_cursor_read_int64_partial_array+0xd8>
    28d8:	bl	238 <read_partial_array>
    28dc:	b	2898 <coda_mem_cursor_read_int64_partial_array+0x60>
    28e0:	ldr	r3, [pc, #44]	; 2914 <coda_mem_cursor_read_int64_partial_array+0xdc>
    28e4:	ldr	r2, [pc, #44]	; 2918 <coda_mem_cursor_read_int64_partial_array+0xe0>
    28e8:	ldr	r1, [pc, #44]	; 291c <coda_mem_cursor_read_int64_partial_array+0xe4>
    28ec:	ldr	r0, [pc, #44]	; 2920 <coda_mem_cursor_read_int64_partial_array+0xe8>
    28f0:	bl	0 <__assert_fail>
    28f4:	ldr	r3, [pc, #24]	; 2914 <coda_mem_cursor_read_int64_partial_array+0xdc>
    28f8:	ldr	r2, [pc, #36]	; 2924 <coda_mem_cursor_read_int64_partial_array+0xec>
    28fc:	ldr	r1, [pc, #24]	; 291c <coda_mem_cursor_read_int64_partial_array+0xe4>
    2900:	ldr	r0, [pc, #32]	; 2928 <coda_mem_cursor_read_int64_partial_array+0xf0>
    2904:	bl	0 <__assert_fail>
	...
    2914:	.word	0x00000594
    2918:	.word	0x00000457
    291c:	.word	0x000000c0
    2920:	.word	0x00000110
    2924:	.word	0x0000045d
    2928:	.word	0x000002ac

0000292c <coda_mem_cursor_read_uint64_partial_array>:
    292c:	push	{lr}		; (str lr, [sp, #-4]!)
    2930:	sub	sp, sp, #12
    2934:	ldr	lr, [r0, #4]
    2938:	add	ip, r0, lr, lsl #4
    293c:	ldr	ip, [ip, #-8]
    2940:	ldr	lr, [ip, #8]
    2944:	cmp	lr, #1
    2948:	beq	2994 <coda_mem_cursor_read_uint64_partial_array+0x68>
    294c:	cmp	lr, #2
    2950:	bne	29d4 <coda_mem_cursor_read_uint64_partial_array+0xa8>
    2954:	ldr	ip, [ip, #4]
    2958:	ldr	ip, [ip, #40]	; 0x28
    295c:	ldr	ip, [ip]
    2960:	cmp	ip, #1
    2964:	beq	29b4 <coda_mem_cursor_read_uint64_partial_array+0x88>
    2968:	cmp	ip, #0
    296c:	bne	29e8 <coda_mem_cursor_read_uint64_partial_array+0xbc>
    2970:	mov	ip, #8
    2974:	str	r3, [sp]
    2978:	str	ip, [sp, #4]
    297c:	mov	r3, r2
    2980:	mov	r2, r1
    2984:	ldr	r1, [pc, #112]	; 29fc <coda_mem_cursor_read_uint64_partial_array+0xd0>
    2988:	bl	238 <read_partial_array>
    298c:	add	sp, sp, #12
    2990:	pop	{pc}		; (ldr pc, [sp], #4)
    2994:	mov	ip, #8
    2998:	str	r3, [sp]
    299c:	str	ip, [sp, #4]
    29a0:	mov	r3, r2
    29a4:	mov	r2, r1
    29a8:	ldr	r1, [pc, #80]	; 2a00 <coda_mem_cursor_read_uint64_partial_array+0xd4>
    29ac:	bl	238 <read_partial_array>
    29b0:	b	298c <coda_mem_cursor_read_uint64_partial_array+0x60>
    29b4:	mov	ip, #8
    29b8:	str	r3, [sp]
    29bc:	str	ip, [sp, #4]
    29c0:	mov	r3, r2
    29c4:	mov	r2, r1
    29c8:	ldr	r1, [pc, #52]	; 2a04 <coda_mem_cursor_read_uint64_partial_array+0xd8>
    29cc:	bl	238 <read_partial_array>
    29d0:	b	298c <coda_mem_cursor_read_uint64_partial_array+0x60>
    29d4:	ldr	r3, [pc, #44]	; 2a08 <coda_mem_cursor_read_uint64_partial_array+0xdc>
    29d8:	ldr	r2, [pc, #44]	; 2a0c <coda_mem_cursor_read_uint64_partial_array+0xe0>
    29dc:	ldr	r1, [pc, #44]	; 2a10 <coda_mem_cursor_read_uint64_partial_array+0xe4>
    29e0:	ldr	r0, [pc, #44]	; 2a14 <coda_mem_cursor_read_uint64_partial_array+0xe8>
    29e4:	bl	0 <__assert_fail>
    29e8:	ldr	r3, [pc, #24]	; 2a08 <coda_mem_cursor_read_uint64_partial_array+0xdc>
    29ec:	ldr	r2, [pc, #36]	; 2a18 <coda_mem_cursor_read_uint64_partial_array+0xec>
    29f0:	ldr	r1, [pc, #24]	; 2a10 <coda_mem_cursor_read_uint64_partial_array+0xe4>
    29f4:	ldr	r0, [pc, #32]	; 2a1c <coda_mem_cursor_read_uint64_partial_array+0xf0>
    29f8:	bl	0 <__assert_fail>
	...
    2a08:	.word	0x000005c0
    2a0c:	.word	0x0000046b
    2a10:	.word	0x000000c0
    2a14:	.word	0x00000110
    2a18:	.word	0x00000471
    2a1c:	.word	0x000002ac

00002a20 <coda_mem_cursor_read_float_partial_array>:
    2a20:	push	{lr}		; (str lr, [sp, #-4]!)
    2a24:	sub	sp, sp, #12
    2a28:	ldr	lr, [r0, #4]
    2a2c:	add	ip, r0, lr, lsl #4
    2a30:	ldr	ip, [ip, #-8]
    2a34:	ldr	lr, [ip, #8]
    2a38:	cmp	lr, #1
    2a3c:	beq	2a88 <coda_mem_cursor_read_float_partial_array+0x68>
    2a40:	cmp	lr, #2
    2a44:	bne	2ac8 <coda_mem_cursor_read_float_partial_array+0xa8>
    2a48:	ldr	ip, [ip, #4]
    2a4c:	ldr	ip, [ip, #40]	; 0x28
    2a50:	ldr	ip, [ip]
    2a54:	cmp	ip, #1
    2a58:	beq	2aa8 <coda_mem_cursor_read_float_partial_array+0x88>
    2a5c:	cmp	ip, #0
    2a60:	bne	2adc <coda_mem_cursor_read_float_partial_array+0xbc>
    2a64:	mov	ip, #4
    2a68:	str	r3, [sp]
    2a6c:	str	ip, [sp, #4]
    2a70:	mov	r3, r2
    2a74:	mov	r2, r1
    2a78:	ldr	r1, [pc, #112]	; 2af0 <coda_mem_cursor_read_float_partial_array+0xd0>
    2a7c:	bl	238 <read_partial_array>
    2a80:	add	sp, sp, #12
    2a84:	pop	{pc}		; (ldr pc, [sp], #4)
    2a88:	mov	ip, #4
    2a8c:	str	r3, [sp]
    2a90:	str	ip, [sp, #4]
    2a94:	mov	r3, r2
    2a98:	mov	r2, r1
    2a9c:	ldr	r1, [pc, #80]	; 2af4 <coda_mem_cursor_read_float_partial_array+0xd4>
    2aa0:	bl	238 <read_partial_array>
    2aa4:	b	2a80 <coda_mem_cursor_read_float_partial_array+0x60>
    2aa8:	mov	ip, #4
    2aac:	str	r3, [sp]
    2ab0:	str	ip, [sp, #4]
    2ab4:	mov	r3, r2
    2ab8:	mov	r2, r1
    2abc:	ldr	r1, [pc, #52]	; 2af8 <coda_mem_cursor_read_float_partial_array+0xd8>
    2ac0:	bl	238 <read_partial_array>
    2ac4:	b	2a80 <coda_mem_cursor_read_float_partial_array+0x60>
    2ac8:	ldr	r3, [pc, #44]	; 2afc <coda_mem_cursor_read_float_partial_array+0xdc>
    2acc:	ldr	r2, [pc, #44]	; 2b00 <coda_mem_cursor_read_float_partial_array+0xe0>
    2ad0:	ldr	r1, [pc, #44]	; 2b04 <coda_mem_cursor_read_float_partial_array+0xe4>
    2ad4:	ldr	r0, [pc, #44]	; 2b08 <coda_mem_cursor_read_float_partial_array+0xe8>
    2ad8:	bl	0 <__assert_fail>
    2adc:	ldr	r3, [pc, #24]	; 2afc <coda_mem_cursor_read_float_partial_array+0xdc>
    2ae0:	ldr	r2, [pc, #36]	; 2b0c <coda_mem_cursor_read_float_partial_array+0xec>
    2ae4:	ldr	r1, [pc, #24]	; 2b04 <coda_mem_cursor_read_float_partial_array+0xe4>
    2ae8:	ldr	r0, [pc, #32]	; 2b10 <coda_mem_cursor_read_float_partial_array+0xf0>
    2aec:	bl	0 <__assert_fail>
	...
    2afc:	.word	0x000005ec
    2b00:	.word	0x0000047f
    2b04:	.word	0x000000c0
    2b08:	.word	0x00000110
    2b0c:	.word	0x00000485
    2b10:	.word	0x000002ac

00002b14 <coda_mem_cursor_read_double_partial_array>:
    2b14:	push	{lr}		; (str lr, [sp, #-4]!)
    2b18:	sub	sp, sp, #12
    2b1c:	ldr	lr, [r0, #4]
    2b20:	add	ip, r0, lr, lsl #4
    2b24:	ldr	ip, [ip, #-8]
    2b28:	ldr	lr, [ip, #8]
    2b2c:	cmp	lr, #1
    2b30:	beq	2b7c <coda_mem_cursor_read_double_partial_array+0x68>
    2b34:	cmp	lr, #2
    2b38:	bne	2bbc <coda_mem_cursor_read_double_partial_array+0xa8>
    2b3c:	ldr	ip, [ip, #4]
    2b40:	ldr	ip, [ip, #40]	; 0x28
    2b44:	ldr	ip, [ip]
    2b48:	cmp	ip, #1
    2b4c:	beq	2b9c <coda_mem_cursor_read_double_partial_array+0x88>
    2b50:	cmp	ip, #0
    2b54:	bne	2bd0 <coda_mem_cursor_read_double_partial_array+0xbc>
    2b58:	mov	ip, #8
    2b5c:	str	r3, [sp]
    2b60:	str	ip, [sp, #4]
    2b64:	mov	r3, r2
    2b68:	mov	r2, r1
    2b6c:	ldr	r1, [pc, #112]	; 2be4 <coda_mem_cursor_read_double_partial_array+0xd0>
    2b70:	bl	238 <read_partial_array>
    2b74:	add	sp, sp, #12
    2b78:	pop	{pc}		; (ldr pc, [sp], #4)
    2b7c:	mov	ip, #8
    2b80:	str	r3, [sp]
    2b84:	str	ip, [sp, #4]
    2b88:	mov	r3, r2
    2b8c:	mov	r2, r1
    2b90:	ldr	r1, [pc, #80]	; 2be8 <coda_mem_cursor_read_double_partial_array+0xd4>
    2b94:	bl	238 <read_partial_array>
    2b98:	b	2b74 <coda_mem_cursor_read_double_partial_array+0x60>
    2b9c:	mov	ip, #8
    2ba0:	str	r3, [sp]
    2ba4:	str	ip, [sp, #4]
    2ba8:	mov	r3, r2
    2bac:	mov	r2, r1
    2bb0:	ldr	r1, [pc, #52]	; 2bec <coda_mem_cursor_read_double_partial_array+0xd8>
    2bb4:	bl	238 <read_partial_array>
    2bb8:	b	2b74 <coda_mem_cursor_read_double_partial_array+0x60>
    2bbc:	ldr	r3, [pc, #44]	; 2bf0 <coda_mem_cursor_read_double_partial_array+0xdc>
    2bc0:	ldr	r2, [pc, #44]	; 2bf4 <coda_mem_cursor_read_double_partial_array+0xe0>
    2bc4:	ldr	r1, [pc, #44]	; 2bf8 <coda_mem_cursor_read_double_partial_array+0xe4>
    2bc8:	ldr	r0, [pc, #44]	; 2bfc <coda_mem_cursor_read_double_partial_array+0xe8>
    2bcc:	bl	0 <__assert_fail>
    2bd0:	ldr	r3, [pc, #24]	; 2bf0 <coda_mem_cursor_read_double_partial_array+0xdc>
    2bd4:	ldr	r2, [pc, #36]	; 2c00 <coda_mem_cursor_read_double_partial_array+0xec>
    2bd8:	ldr	r1, [pc, #24]	; 2bf8 <coda_mem_cursor_read_double_partial_array+0xe4>
    2bdc:	ldr	r0, [pc, #32]	; 2c04 <coda_mem_cursor_read_double_partial_array+0xf0>
    2be0:	bl	0 <__assert_fail>
	...
    2bf0:	.word	0x00000618
    2bf4:	.word	0x00000493
    2bf8:	.word	0x000000c0
    2bfc:	.word	0x00000110
    2c00:	.word	0x00000499
    2c04:	.word	0x000002ac

00002c08 <coda_mem_cursor_read_char_partial_array>:
    2c08:	push	{lr}		; (str lr, [sp, #-4]!)
    2c0c:	sub	sp, sp, #12
    2c10:	ldr	lr, [r0, #4]
    2c14:	add	ip, r0, lr, lsl #4
    2c18:	ldr	lr, [ip, #-8]
    2c1c:	ldr	ip, [lr, #8]
    2c20:	cmp	ip, #1
    2c24:	beq	2c70 <coda_mem_cursor_read_char_partial_array+0x68>
    2c28:	cmp	ip, #2
    2c2c:	bne	2ca0 <coda_mem_cursor_read_char_partial_array+0x98>
    2c30:	ldr	ip, [lr, #4]
    2c34:	ldr	ip, [ip, #40]	; 0x28
    2c38:	ldr	ip, [ip]
    2c3c:	cmp	ip, #1
    2c40:	beq	2c88 <coda_mem_cursor_read_char_partial_array+0x80>
    2c44:	cmp	ip, #0
    2c48:	bne	2cb4 <coda_mem_cursor_read_char_partial_array+0xac>
    2c4c:	mov	ip, #1
    2c50:	str	r3, [sp]
    2c54:	str	ip, [sp, #4]
    2c58:	mov	r3, r2
    2c5c:	mov	r2, r1
    2c60:	ldr	r1, [pc, #96]	; 2cc8 <coda_mem_cursor_read_char_partial_array+0xc0>
    2c64:	bl	238 <read_partial_array>
    2c68:	add	sp, sp, #12
    2c6c:	pop	{pc}		; (ldr pc, [sp], #4)
    2c70:	stm	sp, {r3, ip}
    2c74:	mov	r3, r2
    2c78:	mov	r2, r1
    2c7c:	ldr	r1, [pc, #72]	; 2ccc <coda_mem_cursor_read_char_partial_array+0xc4>
    2c80:	bl	238 <read_partial_array>
    2c84:	b	2c68 <coda_mem_cursor_read_char_partial_array+0x60>
    2c88:	stm	sp, {r3, ip}
    2c8c:	mov	r3, r2
    2c90:	mov	r2, r1
    2c94:	ldr	r1, [pc, #52]	; 2cd0 <coda_mem_cursor_read_char_partial_array+0xc8>
    2c98:	bl	238 <read_partial_array>
    2c9c:	b	2c68 <coda_mem_cursor_read_char_partial_array+0x60>
    2ca0:	ldr	r3, [pc, #44]	; 2cd4 <coda_mem_cursor_read_char_partial_array+0xcc>
    2ca4:	ldr	r2, [pc, #44]	; 2cd8 <coda_mem_cursor_read_char_partial_array+0xd0>
    2ca8:	ldr	r1, [pc, #44]	; 2cdc <coda_mem_cursor_read_char_partial_array+0xd4>
    2cac:	ldr	r0, [pc, #44]	; 2ce0 <coda_mem_cursor_read_char_partial_array+0xd8>
    2cb0:	bl	0 <__assert_fail>
    2cb4:	ldr	r3, [pc, #24]	; 2cd4 <coda_mem_cursor_read_char_partial_array+0xcc>
    2cb8:	ldr	r2, [pc, #36]	; 2ce4 <coda_mem_cursor_read_char_partial_array+0xdc>
    2cbc:	ldr	r1, [pc, #24]	; 2cdc <coda_mem_cursor_read_char_partial_array+0xd4>
    2cc0:	ldr	r0, [pc, #32]	; 2ce8 <coda_mem_cursor_read_char_partial_array+0xe0>
    2cc4:	bl	0 <__assert_fail>
	...
    2cd4:	.word	0x00000644
    2cd8:	.word	0x000004a7
    2cdc:	.word	0x000000c0
    2ce0:	.word	0x00000110
    2ce4:	.word	0x000004ad
    2ce8:	.word	0x000002ac
