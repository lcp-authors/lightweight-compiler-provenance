
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/monster_test/CMakeFiles/monster_test.dir/monster_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <flatbuffers_uint8_cast_from_pe>:
       0:	push	{fp}		; (str fp, [sp, #-4]!)
       4:	add	fp, sp, #0
       8:	sub	sp, sp, #12
       c:	mov	r3, r0
      10:	strb	r3, [fp, #-5]
      14:	ldrb	r3, [fp, #-5]
      18:	mov	r0, r3
      1c:	add	sp, fp, #0
      20:	pop	{fp}		; (ldr fp, [sp], #4)
      24:	bx	lr

00000028 <flatbuffers_uint8_cast_to_pe>:
      28:	push	{fp}		; (str fp, [sp, #-4]!)
      2c:	add	fp, sp, #0
      30:	sub	sp, sp, #12
      34:	mov	r3, r0
      38:	strb	r3, [fp, #-5]
      3c:	ldrb	r3, [fp, #-5]
      40:	mov	r0, r3
      44:	add	sp, fp, #0
      48:	pop	{fp}		; (ldr fp, [sp], #4)
      4c:	bx	lr

00000050 <flatbuffers_uint8_read_from_pe>:
      50:	push	{fp, lr}
      54:	add	fp, sp, #4
      58:	sub	sp, sp, #8
      5c:	str	r0, [fp, #-8]
      60:	ldr	r3, [fp, #-8]
      64:	ldrb	r3, [r3]
      68:	mov	r0, r3
      6c:	bl	0 <flatbuffers_uint8_cast_from_pe>
      70:	mov	r3, r0
      74:	mov	r0, r3
      78:	sub	sp, fp, #4
      7c:	pop	{fp, pc}

00000080 <flatbuffers_uint16_cast_from_pe>:
      80:	push	{fp}		; (str fp, [sp, #-4]!)
      84:	add	fp, sp, #0
      88:	sub	sp, sp, #12
      8c:	mov	r3, r0
      90:	strh	r3, [fp, #-6]
      94:	ldrh	r3, [fp, #-6]
      98:	mov	r0, r3
      9c:	add	sp, fp, #0
      a0:	pop	{fp}		; (ldr fp, [sp], #4)
      a4:	bx	lr

000000a8 <flatbuffers_uint16_cast_to_pe>:
      a8:	push	{fp}		; (str fp, [sp, #-4]!)
      ac:	add	fp, sp, #0
      b0:	sub	sp, sp, #12
      b4:	mov	r3, r0
      b8:	strh	r3, [fp, #-6]
      bc:	ldrh	r3, [fp, #-6]
      c0:	mov	r0, r3
      c4:	add	sp, fp, #0
      c8:	pop	{fp}		; (ldr fp, [sp], #4)
      cc:	bx	lr

000000d0 <flatbuffers_uint16_read_from_pe>:
      d0:	push	{fp, lr}
      d4:	add	fp, sp, #4
      d8:	sub	sp, sp, #8
      dc:	str	r0, [fp, #-8]
      e0:	ldr	r3, [fp, #-8]
      e4:	ldrh	r3, [r3]
      e8:	mov	r0, r3
      ec:	bl	80 <flatbuffers_uint16_cast_from_pe>
      f0:	mov	r3, r0
      f4:	mov	r0, r3
      f8:	sub	sp, fp, #4
      fc:	pop	{fp, pc}

00000100 <flatbuffers_uint32_cast_from_pe>:
     100:	push	{fp}		; (str fp, [sp, #-4]!)
     104:	add	fp, sp, #0
     108:	sub	sp, sp, #12
     10c:	str	r0, [fp, #-8]
     110:	ldr	r3, [fp, #-8]
     114:	mov	r0, r3
     118:	add	sp, fp, #0
     11c:	pop	{fp}		; (ldr fp, [sp], #4)
     120:	bx	lr

00000124 <flatbuffers_uint32_cast_to_pe>:
     124:	push	{fp}		; (str fp, [sp, #-4]!)
     128:	add	fp, sp, #0
     12c:	sub	sp, sp, #12
     130:	str	r0, [fp, #-8]
     134:	ldr	r3, [fp, #-8]
     138:	mov	r0, r3
     13c:	add	sp, fp, #0
     140:	pop	{fp}		; (ldr fp, [sp], #4)
     144:	bx	lr

00000148 <flatbuffers_uint32_read_from_pe>:
     148:	push	{fp, lr}
     14c:	add	fp, sp, #4
     150:	sub	sp, sp, #8
     154:	str	r0, [fp, #-8]
     158:	ldr	r3, [fp, #-8]
     15c:	ldr	r3, [r3]
     160:	mov	r0, r3
     164:	bl	100 <flatbuffers_uint32_cast_from_pe>
     168:	mov	r3, r0
     16c:	mov	r0, r3
     170:	sub	sp, fp, #4
     174:	pop	{fp, pc}

00000178 <flatbuffers_uint64_cast_from_pe>:
     178:	push	{fp}		; (str fp, [sp, #-4]!)
     17c:	add	fp, sp, #0
     180:	sub	sp, sp, #12
     184:	strd	r0, [fp, #-12]
     188:	ldrd	r2, [fp, #-12]
     18c:	mov	r0, r2
     190:	mov	r1, r3
     194:	add	sp, fp, #0
     198:	pop	{fp}		; (ldr fp, [sp], #4)
     19c:	bx	lr

000001a0 <flatbuffers_uint64_cast_to_pe>:
     1a0:	push	{fp}		; (str fp, [sp, #-4]!)
     1a4:	add	fp, sp, #0
     1a8:	sub	sp, sp, #12
     1ac:	strd	r0, [fp, #-12]
     1b0:	ldrd	r2, [fp, #-12]
     1b4:	mov	r0, r2
     1b8:	mov	r1, r3
     1bc:	add	sp, fp, #0
     1c0:	pop	{fp}		; (ldr fp, [sp], #4)
     1c4:	bx	lr

000001c8 <flatbuffers_uint64_read_from_pe>:
     1c8:	push	{fp, lr}
     1cc:	add	fp, sp, #4
     1d0:	sub	sp, sp, #8
     1d4:	str	r0, [fp, #-8]
     1d8:	ldr	r3, [fp, #-8]
     1dc:	ldrd	r2, [r3]
     1e0:	mov	r0, r2
     1e4:	mov	r1, r3
     1e8:	bl	178 <flatbuffers_uint64_cast_from_pe>
     1ec:	mov	r2, r0
     1f0:	mov	r3, r1
     1f4:	mov	r0, r2
     1f8:	mov	r1, r3
     1fc:	sub	sp, fp, #4
     200:	pop	{fp, pc}

00000204 <flatbuffers_int8_cast_from_pe>:
     204:	push	{fp}		; (str fp, [sp, #-4]!)
     208:	add	fp, sp, #0
     20c:	sub	sp, sp, #12
     210:	mov	r3, r0
     214:	strb	r3, [fp, #-5]
     218:	ldrsb	r3, [fp, #-5]
     21c:	mov	r0, r3
     220:	add	sp, fp, #0
     224:	pop	{fp}		; (ldr fp, [sp], #4)
     228:	bx	lr

0000022c <flatbuffers_int8_cast_to_pe>:
     22c:	push	{fp}		; (str fp, [sp, #-4]!)
     230:	add	fp, sp, #0
     234:	sub	sp, sp, #12
     238:	mov	r3, r0
     23c:	strb	r3, [fp, #-5]
     240:	ldrsb	r3, [fp, #-5]
     244:	mov	r0, r3
     248:	add	sp, fp, #0
     24c:	pop	{fp}		; (ldr fp, [sp], #4)
     250:	bx	lr

00000254 <flatbuffers_int8_read_from_pe>:
     254:	push	{fp, lr}
     258:	add	fp, sp, #4
     25c:	sub	sp, sp, #8
     260:	str	r0, [fp, #-8]
     264:	ldr	r3, [fp, #-8]
     268:	ldrsb	r3, [r3]
     26c:	mov	r0, r3
     270:	bl	204 <flatbuffers_int8_cast_from_pe>
     274:	mov	r3, r0
     278:	mov	r0, r3
     27c:	sub	sp, fp, #4
     280:	pop	{fp, pc}

00000284 <flatbuffers_int16_cast_from_pe>:
     284:	push	{fp}		; (str fp, [sp, #-4]!)
     288:	add	fp, sp, #0
     28c:	sub	sp, sp, #12
     290:	mov	r3, r0
     294:	strh	r3, [fp, #-6]
     298:	ldrsh	r3, [fp, #-6]
     29c:	mov	r0, r3
     2a0:	add	sp, fp, #0
     2a4:	pop	{fp}		; (ldr fp, [sp], #4)
     2a8:	bx	lr

000002ac <flatbuffers_int16_cast_to_pe>:
     2ac:	push	{fp}		; (str fp, [sp, #-4]!)
     2b0:	add	fp, sp, #0
     2b4:	sub	sp, sp, #12
     2b8:	mov	r3, r0
     2bc:	strh	r3, [fp, #-6]
     2c0:	ldrsh	r3, [fp, #-6]
     2c4:	mov	r0, r3
     2c8:	add	sp, fp, #0
     2cc:	pop	{fp}		; (ldr fp, [sp], #4)
     2d0:	bx	lr

000002d4 <flatbuffers_int16_read_from_pe>:
     2d4:	push	{fp, lr}
     2d8:	add	fp, sp, #4
     2dc:	sub	sp, sp, #8
     2e0:	str	r0, [fp, #-8]
     2e4:	ldr	r3, [fp, #-8]
     2e8:	ldrsh	r3, [r3]
     2ec:	mov	r0, r3
     2f0:	bl	284 <flatbuffers_int16_cast_from_pe>
     2f4:	mov	r3, r0
     2f8:	mov	r0, r3
     2fc:	sub	sp, fp, #4
     300:	pop	{fp, pc}

00000304 <flatbuffers_int32_cast_from_pe>:
     304:	push	{fp}		; (str fp, [sp, #-4]!)
     308:	add	fp, sp, #0
     30c:	sub	sp, sp, #12
     310:	str	r0, [fp, #-8]
     314:	ldr	r3, [fp, #-8]
     318:	mov	r0, r3
     31c:	add	sp, fp, #0
     320:	pop	{fp}		; (ldr fp, [sp], #4)
     324:	bx	lr

00000328 <flatbuffers_int32_cast_to_pe>:
     328:	push	{fp}		; (str fp, [sp, #-4]!)
     32c:	add	fp, sp, #0
     330:	sub	sp, sp, #12
     334:	str	r0, [fp, #-8]
     338:	ldr	r3, [fp, #-8]
     33c:	mov	r0, r3
     340:	add	sp, fp, #0
     344:	pop	{fp}		; (ldr fp, [sp], #4)
     348:	bx	lr

0000034c <flatbuffers_int32_read_from_pe>:
     34c:	push	{fp, lr}
     350:	add	fp, sp, #4
     354:	sub	sp, sp, #8
     358:	str	r0, [fp, #-8]
     35c:	ldr	r3, [fp, #-8]
     360:	ldr	r3, [r3]
     364:	mov	r0, r3
     368:	bl	304 <flatbuffers_int32_cast_from_pe>
     36c:	mov	r3, r0
     370:	mov	r0, r3
     374:	sub	sp, fp, #4
     378:	pop	{fp, pc}

0000037c <flatbuffers_int64_cast_from_pe>:
     37c:	push	{fp}		; (str fp, [sp, #-4]!)
     380:	add	fp, sp, #0
     384:	sub	sp, sp, #12
     388:	strd	r0, [fp, #-12]
     38c:	ldrd	r2, [fp, #-12]
     390:	mov	r0, r2
     394:	mov	r1, r3
     398:	add	sp, fp, #0
     39c:	pop	{fp}		; (ldr fp, [sp], #4)
     3a0:	bx	lr

000003a4 <flatbuffers_int64_cast_to_pe>:
     3a4:	push	{fp}		; (str fp, [sp, #-4]!)
     3a8:	add	fp, sp, #0
     3ac:	sub	sp, sp, #12
     3b0:	strd	r0, [fp, #-12]
     3b4:	ldrd	r2, [fp, #-12]
     3b8:	mov	r0, r2
     3bc:	mov	r1, r3
     3c0:	add	sp, fp, #0
     3c4:	pop	{fp}		; (ldr fp, [sp], #4)
     3c8:	bx	lr

000003cc <flatbuffers_int64_read_from_pe>:
     3cc:	push	{fp, lr}
     3d0:	add	fp, sp, #4
     3d4:	sub	sp, sp, #8
     3d8:	str	r0, [fp, #-8]
     3dc:	ldr	r3, [fp, #-8]
     3e0:	ldrd	r2, [r3]
     3e4:	mov	r0, r2
     3e8:	mov	r1, r3
     3ec:	bl	37c <flatbuffers_int64_cast_from_pe>
     3f0:	mov	r2, r0
     3f4:	mov	r3, r1
     3f8:	mov	r0, r2
     3fc:	mov	r1, r3
     400:	sub	sp, fp, #4
     404:	pop	{fp, pc}

00000408 <flatbuffers_float_cast_from_pe>:
     408:	push	{fp}		; (str fp, [sp, #-4]!)
     40c:	add	fp, sp, #0
     410:	sub	sp, sp, #20
     414:	vstr	s0, [fp, #-16]
     418:	ldr	r3, [fp, #-16]
     41c:	str	r3, [fp, #-8]
     420:	ldr	r3, [fp, #-8]
     424:	str	r3, [fp, #-8]
     428:	ldr	r3, [fp, #-8]
     42c:	vmov	s15, r3
     430:	vmov.f32	s0, s15
     434:	add	sp, fp, #0
     438:	pop	{fp}		; (ldr fp, [sp], #4)
     43c:	bx	lr

00000440 <flatbuffers_float_cast_to_pe>:
     440:	push	{fp}		; (str fp, [sp, #-4]!)
     444:	add	fp, sp, #0
     448:	sub	sp, sp, #20
     44c:	vstr	s0, [fp, #-16]
     450:	ldr	r3, [fp, #-16]
     454:	str	r3, [fp, #-8]
     458:	ldr	r3, [fp, #-8]
     45c:	str	r3, [fp, #-8]
     460:	ldr	r3, [fp, #-8]
     464:	vmov	s15, r3
     468:	vmov.f32	s0, s15
     46c:	add	sp, fp, #0
     470:	pop	{fp}		; (ldr fp, [sp], #4)
     474:	bx	lr

00000478 <flatbuffers_float_read_from_pe>:
     478:	push	{fp, lr}
     47c:	add	fp, sp, #4
     480:	sub	sp, sp, #8
     484:	str	r0, [fp, #-8]
     488:	ldr	r3, [fp, #-8]
     48c:	vldr	s15, [r3]
     490:	vmov.f32	s0, s15
     494:	bl	408 <flatbuffers_float_cast_from_pe>
     498:	vmov.f32	s15, s0
     49c:	vmov.f32	s0, s15
     4a0:	sub	sp, fp, #4
     4a4:	pop	{fp, pc}

000004a8 <flatbuffers_double_cast_from_pe>:
     4a8:	push	{fp}		; (str fp, [sp, #-4]!)
     4ac:	add	fp, sp, #0
     4b0:	sub	sp, sp, #20
     4b4:	vstr	d0, [fp, #-20]	; 0xffffffec
     4b8:	ldrd	r2, [fp, #-20]	; 0xffffffec
     4bc:	strd	r2, [fp, #-12]
     4c0:	ldrd	r2, [fp, #-12]
     4c4:	strd	r2, [fp, #-12]
     4c8:	ldrd	r2, [fp, #-12]
     4cc:	vmov	d7, r2, r3
     4d0:	vmov.f64	d0, d7
     4d4:	add	sp, fp, #0
     4d8:	pop	{fp}		; (ldr fp, [sp], #4)
     4dc:	bx	lr

000004e0 <flatbuffers_double_cast_to_pe>:
     4e0:	push	{fp}		; (str fp, [sp, #-4]!)
     4e4:	add	fp, sp, #0
     4e8:	sub	sp, sp, #20
     4ec:	vstr	d0, [fp, #-20]	; 0xffffffec
     4f0:	ldrd	r2, [fp, #-20]	; 0xffffffec
     4f4:	strd	r2, [fp, #-12]
     4f8:	ldrd	r2, [fp, #-12]
     4fc:	strd	r2, [fp, #-12]
     500:	ldrd	r2, [fp, #-12]
     504:	vmov	d7, r2, r3
     508:	vmov.f64	d0, d7
     50c:	add	sp, fp, #0
     510:	pop	{fp}		; (ldr fp, [sp], #4)
     514:	bx	lr

00000518 <flatbuffers_double_read_from_pe>:
     518:	push	{fp, lr}
     51c:	add	fp, sp, #4
     520:	sub	sp, sp, #8
     524:	str	r0, [fp, #-8]
     528:	ldr	r3, [fp, #-8]
     52c:	vldr	d7, [r3]
     530:	vmov.f64	d0, d7
     534:	bl	4a8 <flatbuffers_double_cast_from_pe>
     538:	vmov.f64	d7, d0
     53c:	vmov.f64	d0, d7
     540:	sub	sp, fp, #4
     544:	pop	{fp, pc}

00000548 <flatbuffers_bool_cast_from_pe>:
     548:	push	{fp}		; (str fp, [sp, #-4]!)
     54c:	add	fp, sp, #0
     550:	sub	sp, sp, #12
     554:	mov	r3, r0
     558:	strb	r3, [fp, #-5]
     55c:	ldrb	r3, [fp, #-5]
     560:	mov	r0, r3
     564:	add	sp, fp, #0
     568:	pop	{fp}		; (ldr fp, [sp], #4)
     56c:	bx	lr

00000570 <flatbuffers_bool_cast_to_pe>:
     570:	push	{fp}		; (str fp, [sp, #-4]!)
     574:	add	fp, sp, #0
     578:	sub	sp, sp, #12
     57c:	mov	r3, r0
     580:	strb	r3, [fp, #-5]
     584:	ldrb	r3, [fp, #-5]
     588:	mov	r0, r3
     58c:	add	sp, fp, #0
     590:	pop	{fp}		; (ldr fp, [sp], #4)
     594:	bx	lr

00000598 <flatbuffers_bool__const_ptr_add>:
     598:	push	{fp}		; (str fp, [sp, #-4]!)
     59c:	add	fp, sp, #0
     5a0:	sub	sp, sp, #12
     5a4:	str	r0, [fp, #-8]
     5a8:	str	r1, [fp, #-12]
     5ac:	ldr	r2, [fp, #-8]
     5b0:	ldr	r3, [fp, #-12]
     5b4:	add	r3, r2, r3
     5b8:	mov	r0, r3
     5bc:	add	sp, fp, #0
     5c0:	pop	{fp}		; (ldr fp, [sp], #4)
     5c4:	bx	lr

000005c8 <flatbuffers_bool_read_from_pe>:
     5c8:	push	{fp, lr}
     5cc:	add	fp, sp, #4
     5d0:	sub	sp, sp, #8
     5d4:	str	r0, [fp, #-8]
     5d8:	ldr	r3, [fp, #-8]
     5dc:	ldrb	r3, [r3]
     5e0:	mov	r0, r3
     5e4:	bl	548 <flatbuffers_bool_cast_from_pe>
     5e8:	mov	r3, r0
     5ec:	mov	r0, r3
     5f0:	sub	sp, fp, #4
     5f4:	pop	{fp, pc}

000005f8 <flatbuffers_union_type_cast_from_pe>:
     5f8:	push	{fp}		; (str fp, [sp, #-4]!)
     5fc:	add	fp, sp, #0
     600:	sub	sp, sp, #12
     604:	mov	r3, r0
     608:	strb	r3, [fp, #-5]
     60c:	ldrb	r3, [fp, #-5]
     610:	mov	r0, r3
     614:	add	sp, fp, #0
     618:	pop	{fp}		; (ldr fp, [sp], #4)
     61c:	bx	lr

00000620 <flatbuffers_union_type_read_from_pe>:
     620:	push	{fp, lr}
     624:	add	fp, sp, #4
     628:	sub	sp, sp, #8
     62c:	str	r0, [fp, #-8]
     630:	ldr	r3, [fp, #-8]
     634:	ldrb	r3, [r3]
     638:	mov	r0, r3
     63c:	bl	5f8 <flatbuffers_union_type_cast_from_pe>
     640:	mov	r3, r0
     644:	mov	r0, r3
     648:	sub	sp, fp, #4
     64c:	pop	{fp, pc}

00000650 <__flatbuffers_uoffset_cast_from_pe>:
     650:	push	{fp}		; (str fp, [sp, #-4]!)
     654:	add	fp, sp, #0
     658:	sub	sp, sp, #12
     65c:	str	r0, [fp, #-8]
     660:	ldr	r3, [fp, #-8]
     664:	mov	r0, r3
     668:	add	sp, fp, #0
     66c:	pop	{fp}		; (ldr fp, [sp], #4)
     670:	bx	lr

00000674 <__flatbuffers_uoffset_cast_to_pe>:
     674:	push	{fp}		; (str fp, [sp, #-4]!)
     678:	add	fp, sp, #0
     67c:	sub	sp, sp, #12
     680:	str	r0, [fp, #-8]
     684:	ldr	r3, [fp, #-8]
     688:	mov	r0, r3
     68c:	add	sp, fp, #0
     690:	pop	{fp}		; (ldr fp, [sp], #4)
     694:	bx	lr

00000698 <__flatbuffers_uoffset__size>:
     698:	push	{fp}		; (str fp, [sp, #-4]!)
     69c:	add	fp, sp, #0
     6a0:	mov	r3, #4
     6a4:	mov	r0, r3
     6a8:	add	sp, fp, #0
     6ac:	pop	{fp}		; (ldr fp, [sp], #4)
     6b0:	bx	lr

000006b4 <__flatbuffers_uoffset_read_from_pe>:
     6b4:	push	{fp, lr}
     6b8:	add	fp, sp, #4
     6bc:	sub	sp, sp, #8
     6c0:	str	r0, [fp, #-8]
     6c4:	ldr	r3, [fp, #-8]
     6c8:	ldr	r3, [r3]
     6cc:	mov	r0, r3
     6d0:	bl	650 <__flatbuffers_uoffset_cast_from_pe>
     6d4:	mov	r3, r0
     6d8:	mov	r0, r3
     6dc:	sub	sp, fp, #4
     6e0:	pop	{fp, pc}

000006e4 <__flatbuffers_uoffset_write_to_pe>:
     6e4:	push	{fp, lr}
     6e8:	add	fp, sp, #4
     6ec:	sub	sp, sp, #8
     6f0:	str	r0, [fp, #-8]
     6f4:	str	r1, [fp, #-12]
     6f8:	ldr	r0, [fp, #-12]
     6fc:	bl	674 <__flatbuffers_uoffset_cast_to_pe>
     700:	mov	r2, r0
     704:	ldr	r3, [fp, #-8]
     708:	str	r2, [r3]
     70c:	nop			; (mov r0, r0)
     710:	sub	sp, fp, #4
     714:	pop	{fp, pc}

00000718 <__flatbuffers_soffset_cast_from_pe>:
     718:	push	{fp}		; (str fp, [sp, #-4]!)
     71c:	add	fp, sp, #0
     720:	sub	sp, sp, #12
     724:	str	r0, [fp, #-8]
     728:	ldr	r3, [fp, #-8]
     72c:	mov	r0, r3
     730:	add	sp, fp, #0
     734:	pop	{fp}		; (ldr fp, [sp], #4)
     738:	bx	lr

0000073c <__flatbuffers_soffset_read_from_pe>:
     73c:	push	{fp, lr}
     740:	add	fp, sp, #4
     744:	sub	sp, sp, #8
     748:	str	r0, [fp, #-8]
     74c:	ldr	r3, [fp, #-8]
     750:	ldr	r3, [r3]
     754:	mov	r0, r3
     758:	bl	718 <__flatbuffers_soffset_cast_from_pe>
     75c:	mov	r3, r0
     760:	mov	r0, r3
     764:	sub	sp, fp, #4
     768:	pop	{fp, pc}

0000076c <__flatbuffers_voffset_cast_from_pe>:
     76c:	push	{fp}		; (str fp, [sp, #-4]!)
     770:	add	fp, sp, #0
     774:	sub	sp, sp, #12
     778:	mov	r3, r0
     77c:	strh	r3, [fp, #-6]
     780:	ldrh	r3, [fp, #-6]
     784:	mov	r0, r3
     788:	add	sp, fp, #0
     78c:	pop	{fp}		; (ldr fp, [sp], #4)
     790:	bx	lr

00000794 <__flatbuffers_voffset_read_from_pe>:
     794:	push	{fp, lr}
     798:	add	fp, sp, #4
     79c:	sub	sp, sp, #8
     7a0:	str	r0, [fp, #-8]
     7a4:	ldr	r3, [fp, #-8]
     7a8:	ldrh	r3, [r3]
     7ac:	mov	r0, r3
     7b0:	bl	76c <__flatbuffers_voffset_cast_from_pe>
     7b4:	mov	r3, r0
     7b8:	mov	r0, r3
     7bc:	sub	sp, fp, #4
     7c0:	pop	{fp, pc}

000007c4 <__flatbuffers_utype_cast_from_pe>:
     7c4:	push	{fp}		; (str fp, [sp, #-4]!)
     7c8:	add	fp, sp, #0
     7cc:	sub	sp, sp, #12
     7d0:	mov	r3, r0
     7d4:	strb	r3, [fp, #-5]
     7d8:	ldrb	r3, [fp, #-5]
     7dc:	mov	r0, r3
     7e0:	add	sp, fp, #0
     7e4:	pop	{fp}		; (ldr fp, [sp], #4)
     7e8:	bx	lr

000007ec <__flatbuffers_utype_read_from_pe>:
     7ec:	push	{fp, lr}
     7f0:	add	fp, sp, #4
     7f4:	sub	sp, sp, #8
     7f8:	str	r0, [fp, #-8]
     7fc:	ldr	r3, [fp, #-8]
     800:	ldrb	r3, [r3]
     804:	mov	r0, r3
     808:	bl	7c4 <__flatbuffers_utype_cast_from_pe>
     80c:	mov	r3, r0
     810:	mov	r0, r3
     814:	sub	sp, fp, #4
     818:	pop	{fp, pc}

0000081c <__flatbuffers_thash_cast_from_pe>:
     81c:	push	{fp}		; (str fp, [sp, #-4]!)
     820:	add	fp, sp, #0
     824:	sub	sp, sp, #12
     828:	str	r0, [fp, #-8]
     82c:	ldr	r3, [fp, #-8]
     830:	mov	r0, r3
     834:	add	sp, fp, #0
     838:	pop	{fp}		; (ldr fp, [sp], #4)
     83c:	bx	lr

00000840 <__flatbuffers_thash_cast_from_le>:
     840:	push	{fp}		; (str fp, [sp, #-4]!)
     844:	add	fp, sp, #0
     848:	sub	sp, sp, #12
     84c:	str	r0, [fp, #-8]
     850:	ldr	r3, [fp, #-8]
     854:	mov	r0, r3
     858:	add	sp, fp, #0
     85c:	pop	{fp}		; (ldr fp, [sp], #4)
     860:	bx	lr

00000864 <__flatbuffers_thash_read_from_pe>:
     864:	push	{fp, lr}
     868:	add	fp, sp, #4
     86c:	sub	sp, sp, #8
     870:	str	r0, [fp, #-8]
     874:	ldr	r3, [fp, #-8]
     878:	ldr	r3, [r3]
     87c:	mov	r0, r3
     880:	bl	81c <__flatbuffers_thash_cast_from_pe>
     884:	mov	r3, r0
     888:	mov	r0, r3
     88c:	sub	sp, fp, #4
     890:	pop	{fp, pc}

00000894 <flatbuffers_type_hash_from_name>:
     894:	push	{fp}		; (str fp, [sp, #-4]!)
     898:	add	fp, sp, #0
     89c:	sub	sp, sp, #20
     8a0:	str	r0, [fp, #-16]
     8a4:	ldr	r3, [pc, #112]	; 91c <flatbuffers_type_hash_from_name+0x88>
     8a8:	str	r3, [fp, #-8]
     8ac:	b	8e4 <flatbuffers_type_hash_from_name+0x50>
     8b0:	ldr	r3, [fp, #-16]
     8b4:	ldrb	r3, [r3]
     8b8:	mov	r2, r3
     8bc:	ldr	r3, [fp, #-8]
     8c0:	eor	r3, r3, r2
     8c4:	str	r3, [fp, #-8]
     8c8:	ldr	r3, [fp, #-8]
     8cc:	ldr	r2, [pc, #76]	; 920 <flatbuffers_type_hash_from_name+0x8c>
     8d0:	mul	r3, r2, r3
     8d4:	str	r3, [fp, #-8]
     8d8:	ldr	r3, [fp, #-16]
     8dc:	add	r3, r3, #1
     8e0:	str	r3, [fp, #-16]
     8e4:	ldr	r3, [fp, #-16]
     8e8:	ldrb	r3, [r3]
     8ec:	cmp	r3, #0
     8f0:	bne	8b0 <flatbuffers_type_hash_from_name+0x1c>
     8f4:	ldr	r3, [fp, #-8]
     8f8:	cmp	r3, #0
     8fc:	bne	908 <flatbuffers_type_hash_from_name+0x74>
     900:	ldr	r3, [pc, #20]	; 91c <flatbuffers_type_hash_from_name+0x88>
     904:	str	r3, [fp, #-8]
     908:	ldr	r3, [fp, #-8]
     90c:	mov	r0, r3
     910:	add	sp, fp, #0
     914:	pop	{fp}		; (ldr fp, [sp], #4)
     918:	bx	lr
     91c:	.word	0x811c9dc5
     920:	.word	0x01000193

00000924 <flatbuffers_identifier_from_type_hash>:
     924:	push	{fp}		; (str fp, [sp, #-4]!)
     928:	add	fp, sp, #0
     92c:	sub	sp, sp, #12
     930:	str	r0, [fp, #-8]
     934:	str	r1, [fp, #-12]
     938:	ldr	r3, [fp, #-8]
     93c:	uxtb	r2, r3
     940:	ldr	r3, [fp, #-12]
     944:	strb	r2, [r3]
     948:	ldr	r3, [fp, #-8]
     94c:	lsr	r3, r3, #8
     950:	str	r3, [fp, #-8]
     954:	ldr	r3, [fp, #-12]
     958:	add	r3, r3, #1
     95c:	ldr	r2, [fp, #-8]
     960:	uxtb	r2, r2
     964:	strb	r2, [r3]
     968:	ldr	r3, [fp, #-8]
     96c:	lsr	r3, r3, #8
     970:	str	r3, [fp, #-8]
     974:	ldr	r3, [fp, #-12]
     978:	add	r3, r3, #2
     97c:	ldr	r2, [fp, #-8]
     980:	uxtb	r2, r2
     984:	strb	r2, [r3]
     988:	ldr	r3, [fp, #-8]
     98c:	lsr	r3, r3, #8
     990:	str	r3, [fp, #-8]
     994:	ldr	r3, [fp, #-12]
     998:	add	r3, r3, #3
     99c:	ldr	r2, [fp, #-8]
     9a0:	uxtb	r2, r2
     9a4:	strb	r2, [r3]
     9a8:	nop			; (mov r0, r0)
     9ac:	add	sp, fp, #0
     9b0:	pop	{fp}		; (ldr fp, [sp], #4)
     9b4:	bx	lr

000009b8 <flatbuffers_vec_len>:
     9b8:	push	{fp, lr}
     9bc:	add	fp, sp, #4
     9c0:	sub	sp, sp, #8
     9c4:	str	r0, [fp, #-8]
     9c8:	ldr	r3, [fp, #-8]
     9cc:	cmp	r3, #0
     9d0:	beq	9ec <flatbuffers_vec_len+0x34>
     9d4:	ldr	r3, [fp, #-8]
     9d8:	sub	r3, r3, #4
     9dc:	mov	r0, r3
     9e0:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
     9e4:	mov	r3, r0
     9e8:	b	9f0 <flatbuffers_vec_len+0x38>
     9ec:	mov	r3, #0
     9f0:	mov	r0, r3
     9f4:	sub	sp, fp, #4
     9f8:	pop	{fp, pc}

000009fc <flatbuffers_string_len>:
     9fc:	push	{fp, lr}
     a00:	add	fp, sp, #4
     a04:	sub	sp, sp, #8
     a08:	str	r0, [fp, #-8]
     a0c:	ldr	r3, [fp, #-8]
     a10:	cmp	r3, #0
     a14:	beq	a30 <flatbuffers_string_len+0x34>
     a18:	ldr	r3, [fp, #-8]
     a1c:	sub	r3, r3, #4
     a20:	mov	r0, r3
     a24:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
     a28:	mov	r3, r0
     a2c:	b	a34 <flatbuffers_string_len+0x38>
     a30:	mov	r3, #0
     a34:	mov	r0, r3
     a38:	sub	sp, fp, #4
     a3c:	pop	{fp, pc}

00000a40 <flatbuffers_string_vec_len>:
     a40:	push	{fp, lr}
     a44:	add	fp, sp, #4
     a48:	sub	sp, sp, #8
     a4c:	str	r0, [fp, #-8]
     a50:	ldr	r3, [fp, #-8]
     a54:	cmp	r3, #0
     a58:	beq	a74 <flatbuffers_string_vec_len+0x34>
     a5c:	ldr	r3, [fp, #-8]
     a60:	sub	r3, r3, #4
     a64:	mov	r0, r3
     a68:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
     a6c:	mov	r3, r0
     a70:	b	a78 <flatbuffers_string_vec_len+0x38>
     a74:	mov	r3, #0
     a78:	mov	r0, r3
     a7c:	sub	sp, fp, #4
     a80:	pop	{fp, pc}

00000a84 <flatbuffers_string_vec_at>:
     a84:	push	{fp, lr}
     a88:	add	fp, sp, #4
     a8c:	sub	sp, sp, #16
     a90:	str	r0, [fp, #-16]
     a94:	str	r1, [fp, #-20]	; 0xffffffec
     a98:	ldr	r3, [fp, #-20]	; 0xffffffec
     a9c:	lsl	r3, r3, #2
     aa0:	ldr	r2, [fp, #-16]
     aa4:	add	r3, r2, r3
     aa8:	str	r3, [fp, #-8]
     aac:	ldr	r0, [fp, #-16]
     ab0:	bl	9b8 <flatbuffers_vec_len>
     ab4:	mov	r2, r0
     ab8:	ldr	r3, [fp, #-20]	; 0xffffffec
     abc:	cmp	r2, r3
     ac0:	bhi	ad8 <flatbuffers_string_vec_at+0x54>
     ac4:	ldr	r3, [pc, #48]	; afc <flatbuffers_string_vec_at+0x78>
     ac8:	mov	r2, #108	; 0x6c
     acc:	ldr	r1, [pc, #44]	; b00 <flatbuffers_string_vec_at+0x7c>
     ad0:	ldr	r0, [pc, #44]	; b04 <flatbuffers_string_vec_at+0x80>
     ad4:	bl	0 <__assert_fail>
     ad8:	ldr	r0, [fp, #-8]
     adc:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
     ae0:	mov	r3, r0
     ae4:	add	r3, r3, #4
     ae8:	ldr	r2, [fp, #-8]
     aec:	add	r3, r2, r3
     af0:	mov	r0, r3
     af4:	sub	sp, fp, #4
     af8:	pop	{fp, pc}
     afc:	.word	0x0000367c
     b00:	.word	0x00000004
     b04:	.word	0x00000078

00000b08 <flatbuffers_string_cast_from_generic>:
     b08:	push	{fp, lr}
     b0c:	add	fp, sp, #4
     b10:	sub	sp, sp, #8
     b14:	str	r0, [fp, #-8]
     b18:	ldr	r3, [fp, #-8]
     b1c:	cmp	r3, #0
     b20:	beq	b38 <flatbuffers_string_cast_from_generic+0x30>
     b24:	bl	698 <__flatbuffers_uoffset__size>
     b28:	mov	r2, r0
     b2c:	ldr	r3, [fp, #-8]
     b30:	add	r3, r3, r2
     b34:	b	b3c <flatbuffers_string_cast_from_generic+0x34>
     b38:	mov	r3, #0
     b3c:	mov	r0, r3
     b40:	sub	sp, fp, #4
     b44:	pop	{fp, pc}

00000b48 <flatbuffers_generic_vec_at>:
     b48:	push	{fp, lr}
     b4c:	add	fp, sp, #4
     b50:	sub	sp, sp, #16
     b54:	str	r0, [fp, #-16]
     b58:	str	r1, [fp, #-20]	; 0xffffffec
     b5c:	ldr	r3, [fp, #-20]	; 0xffffffec
     b60:	lsl	r3, r3, #2
     b64:	ldr	r2, [fp, #-16]
     b68:	add	r3, r2, r3
     b6c:	str	r3, [fp, #-8]
     b70:	ldr	r0, [fp, #-16]
     b74:	bl	9b8 <flatbuffers_vec_len>
     b78:	mov	r2, r0
     b7c:	ldr	r3, [fp, #-20]	; 0xffffffec
     b80:	cmp	r2, r3
     b84:	bhi	b9c <flatbuffers_generic_vec_at+0x54>
     b88:	ldr	r3, [pc, #44]	; bbc <flatbuffers_generic_vec_at+0x74>
     b8c:	mov	r2, #117	; 0x75
     b90:	ldr	r1, [pc, #40]	; bc0 <flatbuffers_generic_vec_at+0x78>
     b94:	ldr	r0, [pc, #40]	; bc4 <flatbuffers_generic_vec_at+0x7c>
     b98:	bl	0 <__assert_fail>
     b9c:	ldr	r0, [fp, #-8]
     ba0:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
     ba4:	mov	r2, r0
     ba8:	ldr	r3, [fp, #-8]
     bac:	add	r3, r3, r2
     bb0:	mov	r0, r3
     bb4:	sub	sp, fp, #4
     bb8:	pop	{fp, pc}
     bbc:	.word	0x00003a0c
     bc0:	.word	0x00000004
     bc4:	.word	0x00000078

00000bc8 <flatbuffers_generic_vec_at_as_string>:
     bc8:	push	{fp, lr}
     bcc:	add	fp, sp, #4
     bd0:	sub	sp, sp, #16
     bd4:	str	r0, [fp, #-16]
     bd8:	str	r1, [fp, #-20]	; 0xffffffec
     bdc:	ldr	r3, [fp, #-20]	; 0xffffffec
     be0:	lsl	r3, r3, #2
     be4:	ldr	r2, [fp, #-16]
     be8:	add	r3, r2, r3
     bec:	str	r3, [fp, #-8]
     bf0:	ldr	r0, [fp, #-16]
     bf4:	bl	9b8 <flatbuffers_vec_len>
     bf8:	mov	r2, r0
     bfc:	ldr	r3, [fp, #-20]	; 0xffffffec
     c00:	cmp	r2, r3
     c04:	bhi	c1c <flatbuffers_generic_vec_at_as_string+0x54>
     c08:	ldr	r3, [pc, #48]	; c40 <flatbuffers_generic_vec_at_as_string+0x78>
     c0c:	mov	r2, #119	; 0x77
     c10:	ldr	r1, [pc, #44]	; c44 <flatbuffers_generic_vec_at_as_string+0x7c>
     c14:	ldr	r0, [pc, #44]	; c48 <flatbuffers_generic_vec_at_as_string+0x80>
     c18:	bl	0 <__assert_fail>
     c1c:	ldr	r0, [fp, #-8]
     c20:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
     c24:	mov	r3, r0
     c28:	add	r3, r3, #4
     c2c:	ldr	r2, [fp, #-8]
     c30:	add	r3, r2, r3
     c34:	mov	r0, r3
     c38:	sub	sp, fp, #4
     c3c:	pop	{fp, pc}
     c40:	.word	0x00003ca0
     c44:	.word	0x00000004
     c48:	.word	0x00000078

00000c4c <flatbuffers_string_cast_from_union>:
     c4c:	push	{fp, lr}
     c50:	add	fp, sp, #4
     c54:	sub	sp, sp, #8
     c58:	sub	r3, fp, #12
     c5c:	stm	r3, {r0, r1}
     c60:	ldr	r3, [fp, #-8]
     c64:	mov	r0, r3
     c68:	bl	b08 <flatbuffers_string_cast_from_generic>
     c6c:	mov	r3, r0
     c70:	mov	r0, r3
     c74:	sub	sp, fp, #4
     c78:	pop	{fp, pc}

00000c7c <__flatbuffers_string_n_cmp>:
     c7c:	push	{fp, lr}
     c80:	add	fp, sp, #4
     c84:	sub	sp, sp, #24
     c88:	str	r0, [fp, #-16]
     c8c:	str	r1, [fp, #-20]	; 0xffffffec
     c90:	str	r2, [fp, #-24]	; 0xffffffe8
     c94:	ldr	r0, [fp, #-16]
     c98:	bl	9fc <flatbuffers_string_len>
     c9c:	str	r0, [fp, #-8]
     ca0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     ca4:	ldr	r3, [fp, #-8]
     ca8:	cmp	r2, r3
     cac:	movcc	r3, r2
     cb0:	movcs	r3, r3
     cb4:	mov	r2, r3
     cb8:	ldr	r1, [fp, #-20]	; 0xffffffec
     cbc:	ldr	r0, [fp, #-16]
     cc0:	bl	0 <strncmp>
     cc4:	str	r0, [fp, #-12]
     cc8:	ldr	r3, [fp, #-12]
     ccc:	cmp	r3, #0
     cd0:	bne	d08 <__flatbuffers_string_n_cmp+0x8c>
     cd4:	ldr	r2, [fp, #-8]
     cd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     cdc:	cmp	r2, r3
     ce0:	bcc	d00 <__flatbuffers_string_n_cmp+0x84>
     ce4:	ldr	r2, [fp, #-8]
     ce8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     cec:	cmp	r2, r3
     cf0:	movhi	r3, #1
     cf4:	movls	r3, #0
     cf8:	uxtb	r3, r3
     cfc:	b	d0c <__flatbuffers_string_n_cmp+0x90>
     d00:	mvn	r3, #0
     d04:	b	d0c <__flatbuffers_string_n_cmp+0x90>
     d08:	ldr	r3, [fp, #-12]
     d0c:	mov	r0, r3
     d10:	sub	sp, fp, #4
     d14:	pop	{fp, pc}

00000d18 <__flatbuffers_string_cmp>:
     d18:	push	{fp, lr}
     d1c:	add	fp, sp, #4
     d20:	sub	sp, sp, #16
     d24:	str	r0, [fp, #-8]
     d28:	str	r1, [fp, #-12]
     d2c:	str	r2, [fp, #-16]
     d30:	ldr	r1, [fp, #-12]
     d34:	ldr	r0, [fp, #-8]
     d38:	bl	0 <strcmp>
     d3c:	mov	r3, r0
     d40:	mov	r0, r3
     d44:	sub	sp, fp, #4
     d48:	pop	{fp, pc}

00000d4c <flatbuffers_bool_vec_len>:
     d4c:	push	{fp, lr}
     d50:	add	fp, sp, #4
     d54:	sub	sp, sp, #8
     d58:	str	r0, [fp, #-8]
     d5c:	ldr	r0, [fp, #-8]
     d60:	bl	9b8 <flatbuffers_vec_len>
     d64:	mov	r3, r0
     d68:	mov	r0, r3
     d6c:	sub	sp, fp, #4
     d70:	pop	{fp, pc}

00000d74 <flatbuffers_bool_vec_at>:
     d74:	push	{fp, lr}
     d78:	add	fp, sp, #4
     d7c:	sub	sp, sp, #8
     d80:	str	r0, [fp, #-8]
     d84:	str	r1, [fp, #-12]
     d88:	ldr	r0, [fp, #-8]
     d8c:	bl	9b8 <flatbuffers_vec_len>
     d90:	mov	r2, r0
     d94:	ldr	r3, [fp, #-12]
     d98:	cmp	r2, r3
     d9c:	bhi	db4 <flatbuffers_bool_vec_at+0x40>
     da0:	ldr	r3, [pc, #48]	; dd8 <flatbuffers_bool_vec_at+0x64>
     da4:	ldr	r2, [pc, #48]	; ddc <flatbuffers_bool_vec_at+0x68>
     da8:	ldr	r1, [pc, #48]	; de0 <flatbuffers_bool_vec_at+0x6c>
     dac:	ldr	r0, [pc, #48]	; de4 <flatbuffers_bool_vec_at+0x70>
     db0:	bl	0 <__assert_fail>
     db4:	ldr	r2, [fp, #-8]
     db8:	ldr	r3, [fp, #-12]
     dbc:	add	r3, r2, r3
     dc0:	mov	r0, r3
     dc4:	bl	5c8 <flatbuffers_bool_read_from_pe>
     dc8:	mov	r3, r0
     dcc:	mov	r0, r3
     dd0:	sub	sp, fp, #4
     dd4:	pop	{fp, pc}
     dd8:	.word	0x000036f4
     ddc:	.word	0x0000018a
     de0:	.word	0x00000004
     de4:	.word	0x00000078

00000de8 <flatbuffers_uint8_vec_len>:
     de8:	push	{fp, lr}
     dec:	add	fp, sp, #4
     df0:	sub	sp, sp, #8
     df4:	str	r0, [fp, #-8]
     df8:	ldr	r0, [fp, #-8]
     dfc:	bl	9b8 <flatbuffers_vec_len>
     e00:	mov	r3, r0
     e04:	mov	r0, r3
     e08:	sub	sp, fp, #4
     e0c:	pop	{fp, pc}

00000e10 <flatbuffers_uint8_vec_at>:
     e10:	push	{fp, lr}
     e14:	add	fp, sp, #4
     e18:	sub	sp, sp, #8
     e1c:	str	r0, [fp, #-8]
     e20:	str	r1, [fp, #-12]
     e24:	ldr	r0, [fp, #-8]
     e28:	bl	9b8 <flatbuffers_vec_len>
     e2c:	mov	r2, r0
     e30:	ldr	r3, [fp, #-12]
     e34:	cmp	r2, r3
     e38:	bhi	e50 <flatbuffers_uint8_vec_at+0x40>
     e3c:	ldr	r3, [pc, #48]	; e74 <flatbuffers_uint8_vec_at+0x64>
     e40:	ldr	r2, [pc, #48]	; e78 <flatbuffers_uint8_vec_at+0x68>
     e44:	ldr	r1, [pc, #48]	; e7c <flatbuffers_uint8_vec_at+0x6c>
     e48:	ldr	r0, [pc, #48]	; e80 <flatbuffers_uint8_vec_at+0x70>
     e4c:	bl	0 <__assert_fail>
     e50:	ldr	r2, [fp, #-8]
     e54:	ldr	r3, [fp, #-12]
     e58:	add	r3, r2, r3
     e5c:	mov	r0, r3
     e60:	bl	50 <flatbuffers_uint8_read_from_pe>
     e64:	mov	r3, r0
     e68:	mov	r0, r3
     e6c:	sub	sp, fp, #4
     e70:	pop	{fp, pc}
     e74:	.word	0x000035b4
     e78:	.word	0x0000018b
     e7c:	.word	0x00000004
     e80:	.word	0x00000078

00000e84 <flatbuffers_uint8_vec_find>:
     e84:	push	{fp, lr}
     e88:	add	fp, sp, #4
     e8c:	sub	sp, sp, #24
     e90:	str	r0, [fp, #-24]	; 0xffffffe8
     e94:	mov	r3, r1
     e98:	strb	r3, [fp, #-25]	; 0xffffffe7
     e9c:	mov	r3, #0
     ea0:	str	r3, [fp, #-8]
     ea4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     ea8:	bl	de8 <flatbuffers_uint8_vec_len>
     eac:	str	r0, [fp, #-12]
     eb0:	ldr	r3, [fp, #-12]
     eb4:	cmp	r3, #0
     eb8:	bne	ec8 <flatbuffers_uint8_vec_find+0x44>
     ebc:	ldr	r3, [pc, #220]	; fa0 <flatbuffers_uint8_vec_find+0x11c>
     ec0:	ldr	r3, [r3]
     ec4:	b	f94 <flatbuffers_uint8_vec_find+0x110>
     ec8:	ldr	r3, [fp, #-12]
     ecc:	sub	r3, r3, #1
     ed0:	str	r3, [fp, #-12]
     ed4:	b	f30 <flatbuffers_uint8_vec_find+0xac>
     ed8:	ldr	r2, [fp, #-12]
     edc:	ldr	r3, [fp, #-8]
     ee0:	sub	r3, r2, r3
     ee4:	lsr	r2, r3, #1
     ee8:	ldr	r3, [fp, #-8]
     eec:	add	r3, r2, r3
     ef0:	str	r3, [fp, #-16]
     ef4:	ldr	r1, [fp, #-16]
     ef8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     efc:	bl	e10 <flatbuffers_uint8_vec_at>
     f00:	mov	r3, r0
     f04:	strb	r3, [fp, #-17]	; 0xffffffef
     f08:	ldrb	r2, [fp, #-17]	; 0xffffffef
     f0c:	ldrb	r3, [fp, #-25]	; 0xffffffe7
     f10:	cmp	r2, r3
     f14:	bcs	f28 <flatbuffers_uint8_vec_find+0xa4>
     f18:	ldr	r3, [fp, #-16]
     f1c:	add	r3, r3, #1
     f20:	str	r3, [fp, #-8]
     f24:	b	f30 <flatbuffers_uint8_vec_find+0xac>
     f28:	ldr	r3, [fp, #-16]
     f2c:	str	r3, [fp, #-12]
     f30:	ldr	r2, [fp, #-8]
     f34:	ldr	r3, [fp, #-12]
     f38:	cmp	r2, r3
     f3c:	bcc	ed8 <flatbuffers_uint8_vec_find+0x54>
     f40:	ldr	r2, [fp, #-8]
     f44:	ldr	r3, [fp, #-12]
     f48:	cmp	r2, r3
     f4c:	bne	f8c <flatbuffers_uint8_vec_find+0x108>
     f50:	ldr	r1, [fp, #-8]
     f54:	ldr	r0, [fp, #-24]	; 0xffffffe8
     f58:	bl	e10 <flatbuffers_uint8_vec_at>
     f5c:	mov	r3, r0
     f60:	strb	r3, [fp, #-17]	; 0xffffffef
     f64:	ldrb	r2, [fp, #-17]	; 0xffffffef
     f68:	ldrb	r3, [fp, #-25]	; 0xffffffe7
     f6c:	cmp	r2, r3
     f70:	bcc	f8c <flatbuffers_uint8_vec_find+0x108>
     f74:	ldrb	r2, [fp, #-17]	; 0xffffffef
     f78:	ldrb	r3, [fp, #-25]	; 0xffffffe7
     f7c:	cmp	r2, r3
     f80:	bhi	f8c <flatbuffers_uint8_vec_find+0x108>
     f84:	ldr	r3, [fp, #-8]
     f88:	b	f94 <flatbuffers_uint8_vec_find+0x110>
     f8c:	ldr	r3, [pc, #12]	; fa0 <flatbuffers_uint8_vec_find+0x11c>
     f90:	ldr	r3, [r3]
     f94:	mov	r0, r3
     f98:	sub	sp, fp, #4
     f9c:	pop	{fp, pc}
     fa0:	.word	0x00000000

00000fa4 <flatbuffers_uint8_vec_scan>:
     fa4:	push	{fp, lr}
     fa8:	add	fp, sp, #4
     fac:	sub	sp, sp, #16
     fb0:	str	r0, [fp, #-16]
     fb4:	mov	r3, r1
     fb8:	strb	r3, [fp, #-17]	; 0xffffffef
     fbc:	mov	r3, #0
     fc0:	str	r3, [fp, #-8]
     fc4:	b	1010 <flatbuffers_uint8_vec_scan+0x6c>
     fc8:	ldr	r1, [fp, #-8]
     fcc:	ldr	r0, [fp, #-16]
     fd0:	bl	e10 <flatbuffers_uint8_vec_at>
     fd4:	mov	r3, r0
     fd8:	strb	r3, [fp, #-9]
     fdc:	ldrb	r2, [fp, #-9]
     fe0:	ldrb	r3, [fp, #-17]	; 0xffffffef
     fe4:	cmp	r2, r3
     fe8:	bcc	1004 <flatbuffers_uint8_vec_scan+0x60>
     fec:	ldrb	r2, [fp, #-9]
     ff0:	ldrb	r3, [fp, #-17]	; 0xffffffef
     ff4:	cmp	r2, r3
     ff8:	bhi	1004 <flatbuffers_uint8_vec_scan+0x60>
     ffc:	ldr	r3, [fp, #-8]
    1000:	b	1030 <flatbuffers_uint8_vec_scan+0x8c>
    1004:	ldr	r3, [fp, #-8]
    1008:	add	r3, r3, #1
    100c:	str	r3, [fp, #-8]
    1010:	ldr	r0, [fp, #-16]
    1014:	bl	de8 <flatbuffers_uint8_vec_len>
    1018:	mov	r2, r0
    101c:	ldr	r3, [fp, #-8]
    1020:	cmp	r2, r3
    1024:	bhi	fc8 <flatbuffers_uint8_vec_scan+0x24>
    1028:	ldr	r3, [pc, #12]	; 103c <flatbuffers_uint8_vec_scan+0x98>
    102c:	ldr	r3, [r3]
    1030:	mov	r0, r3
    1034:	sub	sp, fp, #4
    1038:	pop	{fp, pc}
    103c:	.word	0x00000000

00001040 <flatbuffers_uint8_vec_scan_ex>:
    1040:	push	{fp, lr}
    1044:	add	fp, sp, #4
    1048:	sub	sp, sp, #24
    104c:	str	r0, [fp, #-16]
    1050:	str	r1, [fp, #-20]	; 0xffffffec
    1054:	str	r2, [fp, #-24]	; 0xffffffe8
    1058:	strb	r3, [fp, #-25]	; 0xffffffe7
    105c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1060:	str	r3, [fp, #-8]
    1064:	b	10b0 <flatbuffers_uint8_vec_scan_ex+0x70>
    1068:	ldr	r1, [fp, #-8]
    106c:	ldr	r0, [fp, #-16]
    1070:	bl	e10 <flatbuffers_uint8_vec_at>
    1074:	mov	r3, r0
    1078:	strb	r3, [fp, #-9]
    107c:	ldrb	r2, [fp, #-9]
    1080:	ldrb	r3, [fp, #-25]	; 0xffffffe7
    1084:	cmp	r2, r3
    1088:	bcc	10a4 <flatbuffers_uint8_vec_scan_ex+0x64>
    108c:	ldrb	r2, [fp, #-9]
    1090:	ldrb	r3, [fp, #-25]	; 0xffffffe7
    1094:	cmp	r2, r3
    1098:	bhi	10a4 <flatbuffers_uint8_vec_scan_ex+0x64>
    109c:	ldr	r3, [fp, #-8]
    10a0:	b	10f0 <flatbuffers_uint8_vec_scan_ex+0xb0>
    10a4:	ldr	r3, [fp, #-8]
    10a8:	add	r3, r3, #1
    10ac:	str	r3, [fp, #-8]
    10b0:	ldr	r0, [fp, #-16]
    10b4:	bl	de8 <flatbuffers_uint8_vec_len>
    10b8:	mov	r2, r0
    10bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    10c0:	cmp	r2, r3
    10c4:	bhi	10d8 <flatbuffers_uint8_vec_scan_ex+0x98>
    10c8:	ldr	r0, [fp, #-16]
    10cc:	bl	de8 <flatbuffers_uint8_vec_len>
    10d0:	mov	r3, r0
    10d4:	b	10dc <flatbuffers_uint8_vec_scan_ex+0x9c>
    10d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    10dc:	ldr	r2, [fp, #-8]
    10e0:	cmp	r3, r2
    10e4:	bhi	1068 <flatbuffers_uint8_vec_scan_ex+0x28>
    10e8:	ldr	r3, [pc, #12]	; 10fc <flatbuffers_uint8_vec_scan_ex+0xbc>
    10ec:	ldr	r3, [r3]
    10f0:	mov	r0, r3
    10f4:	sub	sp, fp, #4
    10f8:	pop	{fp, pc}
    10fc:	.word	0x00000000

00001100 <flatbuffers_uint8_vec_rscan>:
    1100:	push	{fp, lr}
    1104:	add	fp, sp, #4
    1108:	sub	sp, sp, #16
    110c:	str	r0, [fp, #-16]
    1110:	mov	r3, r1
    1114:	strb	r3, [fp, #-17]	; 0xffffffef
    1118:	ldr	r0, [fp, #-16]
    111c:	bl	de8 <flatbuffers_uint8_vec_len>
    1120:	str	r0, [fp, #-8]
    1124:	b	1164 <flatbuffers_uint8_vec_rscan+0x64>
    1128:	ldr	r1, [fp, #-8]
    112c:	ldr	r0, [fp, #-16]
    1130:	bl	e10 <flatbuffers_uint8_vec_at>
    1134:	mov	r3, r0
    1138:	strb	r3, [fp, #-9]
    113c:	ldrb	r2, [fp, #-9]
    1140:	ldrb	r3, [fp, #-17]	; 0xffffffef
    1144:	cmp	r2, r3
    1148:	bcc	1164 <flatbuffers_uint8_vec_rscan+0x64>
    114c:	ldrb	r2, [fp, #-9]
    1150:	ldrb	r3, [fp, #-17]	; 0xffffffef
    1154:	cmp	r2, r3
    1158:	bhi	1164 <flatbuffers_uint8_vec_rscan+0x64>
    115c:	ldr	r3, [fp, #-8]
    1160:	b	1180 <flatbuffers_uint8_vec_rscan+0x80>
    1164:	ldr	r3, [fp, #-8]
    1168:	sub	r2, r3, #1
    116c:	str	r2, [fp, #-8]
    1170:	cmp	r3, #0
    1174:	bne	1128 <flatbuffers_uint8_vec_rscan+0x28>
    1178:	ldr	r3, [pc, #12]	; 118c <flatbuffers_uint8_vec_rscan+0x8c>
    117c:	ldr	r3, [r3]
    1180:	mov	r0, r3
    1184:	sub	sp, fp, #4
    1188:	pop	{fp, pc}
    118c:	.word	0x00000000

00001190 <flatbuffers_uint8_vec_rscan_ex>:
    1190:	push	{fp, lr}
    1194:	add	fp, sp, #4
    1198:	sub	sp, sp, #24
    119c:	str	r0, [fp, #-16]
    11a0:	str	r1, [fp, #-20]	; 0xffffffec
    11a4:	str	r2, [fp, #-24]	; 0xffffffe8
    11a8:	strb	r3, [fp, #-25]	; 0xffffffe7
    11ac:	ldr	r0, [fp, #-16]
    11b0:	bl	de8 <flatbuffers_uint8_vec_len>
    11b4:	mov	r2, r0
    11b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    11bc:	cmp	r2, r3
    11c0:	bhi	11d4 <flatbuffers_uint8_vec_rscan_ex+0x44>
    11c4:	ldr	r0, [fp, #-16]
    11c8:	bl	de8 <flatbuffers_uint8_vec_len>
    11cc:	mov	r3, r0
    11d0:	b	11d8 <flatbuffers_uint8_vec_rscan_ex+0x48>
    11d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    11d8:	str	r3, [fp, #-8]
    11dc:	b	121c <flatbuffers_uint8_vec_rscan_ex+0x8c>
    11e0:	ldr	r1, [fp, #-8]
    11e4:	ldr	r0, [fp, #-16]
    11e8:	bl	e10 <flatbuffers_uint8_vec_at>
    11ec:	mov	r3, r0
    11f0:	strb	r3, [fp, #-9]
    11f4:	ldrb	r2, [fp, #-9]
    11f8:	ldrb	r3, [fp, #-25]	; 0xffffffe7
    11fc:	cmp	r2, r3
    1200:	bcc	121c <flatbuffers_uint8_vec_rscan_ex+0x8c>
    1204:	ldrb	r2, [fp, #-9]
    1208:	ldrb	r3, [fp, #-25]	; 0xffffffe7
    120c:	cmp	r2, r3
    1210:	bhi	121c <flatbuffers_uint8_vec_rscan_ex+0x8c>
    1214:	ldr	r3, [fp, #-8]
    1218:	b	123c <flatbuffers_uint8_vec_rscan_ex+0xac>
    121c:	ldr	r3, [fp, #-8]
    1220:	sub	r2, r3, #1
    1224:	str	r2, [fp, #-8]
    1228:	ldr	r2, [fp, #-20]	; 0xffffffec
    122c:	cmp	r3, r2
    1230:	bhi	11e0 <flatbuffers_uint8_vec_rscan_ex+0x50>
    1234:	ldr	r3, [pc, #12]	; 1248 <flatbuffers_uint8_vec_rscan_ex+0xb8>
    1238:	ldr	r3, [r3]
    123c:	mov	r0, r3
    1240:	sub	sp, fp, #4
    1244:	pop	{fp, pc}
    1248:	.word	0x00000000

0000124c <__flatbuffers_uint8__heap_sift_down>:
    124c:	push	{fp, lr}
    1250:	add	fp, sp, #4
    1254:	sub	sp, sp, #32
    1258:	str	r0, [fp, #-24]	; 0xffffffe8
    125c:	str	r1, [fp, #-28]	; 0xffffffe4
    1260:	str	r2, [fp, #-32]	; 0xffffffe0
    1264:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1268:	str	r3, [fp, #-12]
    126c:	b	1360 <__flatbuffers_uint8__heap_sift_down+0x114>
    1270:	ldr	r3, [fp, #-12]
    1274:	lsl	r3, r3, #1
    1278:	str	r3, [fp, #-8]
    127c:	ldr	r2, [fp, #-8]
    1280:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1284:	cmp	r2, r3
    1288:	bcs	12d8 <__flatbuffers_uint8__heap_sift_down+0x8c>
    128c:	ldr	r1, [fp, #-8]
    1290:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1294:	bl	e10 <flatbuffers_uint8_vec_at>
    1298:	mov	r3, r0
    129c:	strb	r3, [fp, #-13]
    12a0:	ldr	r3, [fp, #-8]
    12a4:	add	r3, r3, #1
    12a8:	mov	r1, r3
    12ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
    12b0:	bl	e10 <flatbuffers_uint8_vec_at>
    12b4:	mov	r3, r0
    12b8:	strb	r3, [fp, #-14]
    12bc:	ldrb	r2, [fp, #-13]
    12c0:	ldrb	r3, [fp, #-14]
    12c4:	cmp	r2, r3
    12c8:	bcs	12d8 <__flatbuffers_uint8__heap_sift_down+0x8c>
    12cc:	ldr	r3, [fp, #-8]
    12d0:	add	r3, r3, #1
    12d4:	str	r3, [fp, #-8]
    12d8:	ldr	r1, [fp, #-12]
    12dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    12e0:	bl	e10 <flatbuffers_uint8_vec_at>
    12e4:	mov	r3, r0
    12e8:	strb	r3, [fp, #-15]
    12ec:	ldr	r1, [fp, #-8]
    12f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    12f4:	bl	e10 <flatbuffers_uint8_vec_at>
    12f8:	mov	r3, r0
    12fc:	strb	r3, [fp, #-13]
    1300:	ldrb	r2, [fp, #-15]
    1304:	ldrb	r3, [fp, #-13]
    1308:	cmp	r2, r3
    130c:	bcs	1378 <__flatbuffers_uint8__heap_sift_down+0x12c>
    1310:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1314:	ldr	r3, [fp, #-8]
    1318:	add	r3, r2, r3
    131c:	ldrb	r3, [r3]
    1320:	strb	r3, [fp, #-16]
    1324:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1328:	ldr	r3, [fp, #-8]
    132c:	add	r3, r2, r3
    1330:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1334:	ldr	r2, [fp, #-12]
    1338:	add	r2, r1, r2
    133c:	ldrb	r2, [r2]
    1340:	strb	r2, [r3]
    1344:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1348:	ldr	r3, [fp, #-12]
    134c:	add	r3, r2, r3
    1350:	ldrb	r2, [fp, #-16]
    1354:	strb	r2, [r3]
    1358:	ldr	r3, [fp, #-8]
    135c:	str	r3, [fp, #-12]
    1360:	ldr	r3, [fp, #-12]
    1364:	lsl	r2, r3, #1
    1368:	ldr	r3, [fp, #-32]	; 0xffffffe0
    136c:	cmp	r2, r3
    1370:	bls	1270 <__flatbuffers_uint8__heap_sift_down+0x24>
    1374:	b	137c <__flatbuffers_uint8__heap_sift_down+0x130>
    1378:	nop			; (mov r0, r0)
    137c:	sub	sp, fp, #4
    1380:	pop	{fp, pc}

00001384 <__flatbuffers_uint8__heap_sort>:
    1384:	push	{fp, lr}
    1388:	add	fp, sp, #4
    138c:	sub	sp, sp, #24
    1390:	str	r0, [fp, #-24]	; 0xffffffe8
    1394:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1398:	bl	de8 <flatbuffers_uint8_vec_len>
    139c:	str	r0, [fp, #-16]
    13a0:	ldr	r3, [fp, #-16]
    13a4:	cmp	r3, #0
    13a8:	beq	1450 <__flatbuffers_uint8__heap_sort+0xcc>
    13ac:	ldr	r3, [fp, #-16]
    13b0:	sub	r3, r3, #1
    13b4:	str	r3, [fp, #-12]
    13b8:	ldr	r3, [fp, #-16]
    13bc:	lsr	r3, r3, #1
    13c0:	str	r3, [fp, #-8]
    13c4:	ldr	r2, [fp, #-12]
    13c8:	ldr	r1, [fp, #-8]
    13cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    13d0:	bl	124c <__flatbuffers_uint8__heap_sift_down>
    13d4:	ldr	r3, [fp, #-8]
    13d8:	sub	r2, r3, #1
    13dc:	str	r2, [fp, #-8]
    13e0:	cmp	r3, #0
    13e4:	bne	13c4 <__flatbuffers_uint8__heap_sort+0x40>
    13e8:	b	1440 <__flatbuffers_uint8__heap_sort+0xbc>
    13ec:	ldr	r2, [fp, #-24]	; 0xffffffe8
    13f0:	ldr	r3, [fp, #-12]
    13f4:	add	r3, r2, r3
    13f8:	ldrb	r3, [r3]
    13fc:	strb	r3, [fp, #-17]	; 0xffffffef
    1400:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1404:	ldr	r3, [fp, #-12]
    1408:	add	r3, r2, r3
    140c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1410:	ldrb	r2, [r2]
    1414:	strb	r2, [r3]
    1418:	ldr	r3, [fp, #-24]	; 0xffffffe8
    141c:	ldrb	r2, [fp, #-17]	; 0xffffffef
    1420:	strb	r2, [r3]
    1424:	ldr	r3, [fp, #-12]
    1428:	sub	r3, r3, #1
    142c:	str	r3, [fp, #-12]
    1430:	ldr	r2, [fp, #-12]
    1434:	mov	r1, #0
    1438:	ldr	r0, [fp, #-24]	; 0xffffffe8
    143c:	bl	124c <__flatbuffers_uint8__heap_sift_down>
    1440:	ldr	r3, [fp, #-12]
    1444:	cmp	r3, #0
    1448:	bne	13ec <__flatbuffers_uint8__heap_sort+0x68>
    144c:	b	1454 <__flatbuffers_uint8__heap_sort+0xd0>
    1450:	nop			; (mov r0, r0)
    1454:	sub	sp, fp, #4
    1458:	pop	{fp, pc}

0000145c <flatbuffers_uint8_vec_sort>:
    145c:	push	{fp, lr}
    1460:	add	fp, sp, #4
    1464:	sub	sp, sp, #8
    1468:	str	r0, [fp, #-8]
    146c:	ldr	r0, [fp, #-8]
    1470:	bl	1384 <__flatbuffers_uint8__heap_sort>
    1474:	nop			; (mov r0, r0)
    1478:	sub	sp, fp, #4
    147c:	pop	{fp, pc}

00001480 <flatbuffers_union_type_vec_at>:
    1480:	push	{fp, lr}
    1484:	add	fp, sp, #4
    1488:	sub	sp, sp, #8
    148c:	str	r0, [fp, #-8]
    1490:	str	r1, [fp, #-12]
    1494:	ldr	r0, [fp, #-8]
    1498:	bl	9b8 <flatbuffers_vec_len>
    149c:	mov	r2, r0
    14a0:	ldr	r3, [fp, #-12]
    14a4:	cmp	r2, r3
    14a8:	bhi	14c0 <flatbuffers_union_type_vec_at+0x40>
    14ac:	ldr	r3, [pc, #48]	; 14e4 <flatbuffers_union_type_vec_at+0x64>
    14b0:	ldr	r2, [pc, #48]	; 14e8 <flatbuffers_union_type_vec_at+0x68>
    14b4:	ldr	r1, [pc, #48]	; 14ec <flatbuffers_union_type_vec_at+0x6c>
    14b8:	ldr	r0, [pc, #48]	; 14f0 <flatbuffers_union_type_vec_at+0x70>
    14bc:	bl	0 <__assert_fail>
    14c0:	ldr	r2, [fp, #-8]
    14c4:	ldr	r3, [fp, #-12]
    14c8:	add	r3, r2, r3
    14cc:	mov	r0, r3
    14d0:	bl	620 <flatbuffers_union_type_read_from_pe>
    14d4:	mov	r3, r0
    14d8:	mov	r0, r3
    14dc:	sub	sp, fp, #4
    14e0:	pop	{fp, pc}
    14e4:	.word	0x00003a9c
    14e8:	.word	0x00000195
    14ec:	.word	0x00000004
    14f0:	.word	0x00000078

000014f4 <flatbuffers_string_vec_scan>:
    14f4:	push	{fp, lr}
    14f8:	add	fp, sp, #4
    14fc:	sub	sp, sp, #16
    1500:	str	r0, [fp, #-16]
    1504:	str	r1, [fp, #-20]	; 0xffffffec
    1508:	mov	r3, #0
    150c:	str	r3, [fp, #-8]
    1510:	b	1554 <flatbuffers_string_vec_scan+0x60>
    1514:	ldr	r1, [fp, #-8]
    1518:	ldr	r0, [fp, #-16]
    151c:	bl	a84 <flatbuffers_string_vec_at>
    1520:	str	r0, [fp, #-12]
    1524:	mov	r2, #0
    1528:	ldr	r1, [fp, #-20]	; 0xffffffec
    152c:	ldr	r0, [fp, #-12]
    1530:	bl	d18 <__flatbuffers_string_cmp>
    1534:	mov	r3, r0
    1538:	cmp	r3, #0
    153c:	bne	1548 <flatbuffers_string_vec_scan+0x54>
    1540:	ldr	r3, [fp, #-8]
    1544:	b	1574 <flatbuffers_string_vec_scan+0x80>
    1548:	ldr	r3, [fp, #-8]
    154c:	add	r3, r3, #1
    1550:	str	r3, [fp, #-8]
    1554:	ldr	r0, [fp, #-16]
    1558:	bl	a40 <flatbuffers_string_vec_len>
    155c:	mov	r2, r0
    1560:	ldr	r3, [fp, #-8]
    1564:	cmp	r2, r3
    1568:	bhi	1514 <flatbuffers_string_vec_scan+0x20>
    156c:	ldr	r3, [pc, #12]	; 1580 <flatbuffers_string_vec_scan+0x8c>
    1570:	ldr	r3, [r3]
    1574:	mov	r0, r3
    1578:	sub	sp, fp, #4
    157c:	pop	{fp, pc}
    1580:	.word	0x00000000

00001584 <flatbuffers_string_vec_scan_n>:
    1584:	push	{fp, lr}
    1588:	add	fp, sp, #4
    158c:	sub	sp, sp, #24
    1590:	str	r0, [fp, #-16]
    1594:	str	r1, [fp, #-20]	; 0xffffffec
    1598:	str	r2, [fp, #-24]	; 0xffffffe8
    159c:	mov	r3, #0
    15a0:	str	r3, [fp, #-8]
    15a4:	b	15e8 <flatbuffers_string_vec_scan_n+0x64>
    15a8:	ldr	r1, [fp, #-8]
    15ac:	ldr	r0, [fp, #-16]
    15b0:	bl	a84 <flatbuffers_string_vec_at>
    15b4:	str	r0, [fp, #-12]
    15b8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    15bc:	ldr	r1, [fp, #-20]	; 0xffffffec
    15c0:	ldr	r0, [fp, #-12]
    15c4:	bl	c7c <__flatbuffers_string_n_cmp>
    15c8:	mov	r3, r0
    15cc:	cmp	r3, #0
    15d0:	bne	15dc <flatbuffers_string_vec_scan_n+0x58>
    15d4:	ldr	r3, [fp, #-8]
    15d8:	b	1608 <flatbuffers_string_vec_scan_n+0x84>
    15dc:	ldr	r3, [fp, #-8]
    15e0:	add	r3, r3, #1
    15e4:	str	r3, [fp, #-8]
    15e8:	ldr	r0, [fp, #-16]
    15ec:	bl	a40 <flatbuffers_string_vec_len>
    15f0:	mov	r2, r0
    15f4:	ldr	r3, [fp, #-8]
    15f8:	cmp	r2, r3
    15fc:	bhi	15a8 <flatbuffers_string_vec_scan_n+0x24>
    1600:	ldr	r3, [pc, #12]	; 1614 <flatbuffers_string_vec_scan_n+0x90>
    1604:	ldr	r3, [r3]
    1608:	mov	r0, r3
    160c:	sub	sp, fp, #4
    1610:	pop	{fp, pc}
    1614:	.word	0x00000000

00001618 <flatbuffers_string_vec_scan_ex>:
    1618:	push	{fp, lr}
    161c:	add	fp, sp, #4
    1620:	sub	sp, sp, #24
    1624:	str	r0, [fp, #-16]
    1628:	str	r1, [fp, #-20]	; 0xffffffec
    162c:	str	r2, [fp, #-24]	; 0xffffffe8
    1630:	str	r3, [fp, #-28]	; 0xffffffe4
    1634:	ldr	r3, [fp, #-20]	; 0xffffffec
    1638:	str	r3, [fp, #-8]
    163c:	b	1680 <flatbuffers_string_vec_scan_ex+0x68>
    1640:	ldr	r1, [fp, #-8]
    1644:	ldr	r0, [fp, #-16]
    1648:	bl	a84 <flatbuffers_string_vec_at>
    164c:	str	r0, [fp, #-12]
    1650:	mov	r2, #0
    1654:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1658:	ldr	r0, [fp, #-12]
    165c:	bl	d18 <__flatbuffers_string_cmp>
    1660:	mov	r3, r0
    1664:	cmp	r3, #0
    1668:	bne	1674 <flatbuffers_string_vec_scan_ex+0x5c>
    166c:	ldr	r3, [fp, #-8]
    1670:	b	16c0 <flatbuffers_string_vec_scan_ex+0xa8>
    1674:	ldr	r3, [fp, #-8]
    1678:	add	r3, r3, #1
    167c:	str	r3, [fp, #-8]
    1680:	ldr	r0, [fp, #-16]
    1684:	bl	a40 <flatbuffers_string_vec_len>
    1688:	mov	r2, r0
    168c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1690:	cmp	r2, r3
    1694:	bhi	16a8 <flatbuffers_string_vec_scan_ex+0x90>
    1698:	ldr	r0, [fp, #-16]
    169c:	bl	a40 <flatbuffers_string_vec_len>
    16a0:	mov	r3, r0
    16a4:	b	16ac <flatbuffers_string_vec_scan_ex+0x94>
    16a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    16ac:	ldr	r2, [fp, #-8]
    16b0:	cmp	r3, r2
    16b4:	bhi	1640 <flatbuffers_string_vec_scan_ex+0x28>
    16b8:	ldr	r3, [pc, #12]	; 16cc <flatbuffers_string_vec_scan_ex+0xb4>
    16bc:	ldr	r3, [r3]
    16c0:	mov	r0, r3
    16c4:	sub	sp, fp, #4
    16c8:	pop	{fp, pc}
    16cc:	.word	0x00000000

000016d0 <flatbuffers_string_vec_scan_ex_n>:
    16d0:	push	{fp, lr}
    16d4:	add	fp, sp, #4
    16d8:	sub	sp, sp, #24
    16dc:	str	r0, [fp, #-16]
    16e0:	str	r1, [fp, #-20]	; 0xffffffec
    16e4:	str	r2, [fp, #-24]	; 0xffffffe8
    16e8:	str	r3, [fp, #-28]	; 0xffffffe4
    16ec:	ldr	r3, [fp, #-20]	; 0xffffffec
    16f0:	str	r3, [fp, #-8]
    16f4:	b	1738 <flatbuffers_string_vec_scan_ex_n+0x68>
    16f8:	ldr	r1, [fp, #-8]
    16fc:	ldr	r0, [fp, #-16]
    1700:	bl	a84 <flatbuffers_string_vec_at>
    1704:	str	r0, [fp, #-12]
    1708:	ldr	r2, [fp, #4]
    170c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1710:	ldr	r0, [fp, #-12]
    1714:	bl	c7c <__flatbuffers_string_n_cmp>
    1718:	mov	r3, r0
    171c:	cmp	r3, #0
    1720:	bne	172c <flatbuffers_string_vec_scan_ex_n+0x5c>
    1724:	ldr	r3, [fp, #-8]
    1728:	b	1778 <flatbuffers_string_vec_scan_ex_n+0xa8>
    172c:	ldr	r3, [fp, #-8]
    1730:	add	r3, r3, #1
    1734:	str	r3, [fp, #-8]
    1738:	ldr	r0, [fp, #-16]
    173c:	bl	a40 <flatbuffers_string_vec_len>
    1740:	mov	r2, r0
    1744:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1748:	cmp	r2, r3
    174c:	bhi	1760 <flatbuffers_string_vec_scan_ex_n+0x90>
    1750:	ldr	r0, [fp, #-16]
    1754:	bl	a40 <flatbuffers_string_vec_len>
    1758:	mov	r3, r0
    175c:	b	1764 <flatbuffers_string_vec_scan_ex_n+0x94>
    1760:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1764:	ldr	r2, [fp, #-8]
    1768:	cmp	r3, r2
    176c:	bhi	16f8 <flatbuffers_string_vec_scan_ex_n+0x28>
    1770:	ldr	r3, [pc, #12]	; 1784 <flatbuffers_string_vec_scan_ex_n+0xb4>
    1774:	ldr	r3, [r3]
    1778:	mov	r0, r3
    177c:	sub	sp, fp, #4
    1780:	pop	{fp, pc}
    1784:	.word	0x00000000

00001788 <flatbuffers_string_vec_rscan>:
    1788:	push	{fp, lr}
    178c:	add	fp, sp, #4
    1790:	sub	sp, sp, #16
    1794:	str	r0, [fp, #-16]
    1798:	str	r1, [fp, #-20]	; 0xffffffec
    179c:	ldr	r0, [fp, #-16]
    17a0:	bl	a40 <flatbuffers_string_vec_len>
    17a4:	str	r0, [fp, #-8]
    17a8:	b	17e0 <flatbuffers_string_vec_rscan+0x58>
    17ac:	ldr	r1, [fp, #-8]
    17b0:	ldr	r0, [fp, #-16]
    17b4:	bl	a84 <flatbuffers_string_vec_at>
    17b8:	str	r0, [fp, #-12]
    17bc:	mov	r2, #0
    17c0:	ldr	r1, [fp, #-20]	; 0xffffffec
    17c4:	ldr	r0, [fp, #-12]
    17c8:	bl	d18 <__flatbuffers_string_cmp>
    17cc:	mov	r3, r0
    17d0:	cmp	r3, #0
    17d4:	bne	17e0 <flatbuffers_string_vec_rscan+0x58>
    17d8:	ldr	r3, [fp, #-8]
    17dc:	b	17fc <flatbuffers_string_vec_rscan+0x74>
    17e0:	ldr	r3, [fp, #-8]
    17e4:	sub	r2, r3, #1
    17e8:	str	r2, [fp, #-8]
    17ec:	cmp	r3, #0
    17f0:	bne	17ac <flatbuffers_string_vec_rscan+0x24>
    17f4:	ldr	r3, [pc, #12]	; 1808 <flatbuffers_string_vec_rscan+0x80>
    17f8:	ldr	r3, [r3]
    17fc:	mov	r0, r3
    1800:	sub	sp, fp, #4
    1804:	pop	{fp, pc}
    1808:	.word	0x00000000

0000180c <flatbuffers_string_vec_rscan_n>:
    180c:	push	{fp, lr}
    1810:	add	fp, sp, #4
    1814:	sub	sp, sp, #24
    1818:	str	r0, [fp, #-16]
    181c:	str	r1, [fp, #-20]	; 0xffffffec
    1820:	str	r2, [fp, #-24]	; 0xffffffe8
    1824:	ldr	r0, [fp, #-16]
    1828:	bl	a40 <flatbuffers_string_vec_len>
    182c:	str	r0, [fp, #-8]
    1830:	b	1868 <flatbuffers_string_vec_rscan_n+0x5c>
    1834:	ldr	r1, [fp, #-8]
    1838:	ldr	r0, [fp, #-16]
    183c:	bl	a84 <flatbuffers_string_vec_at>
    1840:	str	r0, [fp, #-12]
    1844:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1848:	ldr	r1, [fp, #-20]	; 0xffffffec
    184c:	ldr	r0, [fp, #-12]
    1850:	bl	c7c <__flatbuffers_string_n_cmp>
    1854:	mov	r3, r0
    1858:	cmp	r3, #0
    185c:	bne	1868 <flatbuffers_string_vec_rscan_n+0x5c>
    1860:	ldr	r3, [fp, #-8]
    1864:	b	1884 <flatbuffers_string_vec_rscan_n+0x78>
    1868:	ldr	r3, [fp, #-8]
    186c:	sub	r2, r3, #1
    1870:	str	r2, [fp, #-8]
    1874:	cmp	r3, #0
    1878:	bne	1834 <flatbuffers_string_vec_rscan_n+0x28>
    187c:	ldr	r3, [pc, #12]	; 1890 <flatbuffers_string_vec_rscan_n+0x84>
    1880:	ldr	r3, [r3]
    1884:	mov	r0, r3
    1888:	sub	sp, fp, #4
    188c:	pop	{fp, pc}
    1890:	.word	0x00000000

00001894 <flatbuffers_string_vec_rscan_ex>:
    1894:	push	{fp, lr}
    1898:	add	fp, sp, #4
    189c:	sub	sp, sp, #24
    18a0:	str	r0, [fp, #-16]
    18a4:	str	r1, [fp, #-20]	; 0xffffffec
    18a8:	str	r2, [fp, #-24]	; 0xffffffe8
    18ac:	str	r3, [fp, #-28]	; 0xffffffe4
    18b0:	ldr	r0, [fp, #-16]
    18b4:	bl	a40 <flatbuffers_string_vec_len>
    18b8:	mov	r2, r0
    18bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    18c0:	cmp	r2, r3
    18c4:	bhi	18d8 <flatbuffers_string_vec_rscan_ex+0x44>
    18c8:	ldr	r0, [fp, #-16]
    18cc:	bl	a40 <flatbuffers_string_vec_len>
    18d0:	mov	r3, r0
    18d4:	b	18dc <flatbuffers_string_vec_rscan_ex+0x48>
    18d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    18dc:	str	r3, [fp, #-8]
    18e0:	b	1918 <flatbuffers_string_vec_rscan_ex+0x84>
    18e4:	ldr	r1, [fp, #-8]
    18e8:	ldr	r0, [fp, #-16]
    18ec:	bl	a84 <flatbuffers_string_vec_at>
    18f0:	str	r0, [fp, #-12]
    18f4:	mov	r2, #0
    18f8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    18fc:	ldr	r0, [fp, #-12]
    1900:	bl	d18 <__flatbuffers_string_cmp>
    1904:	mov	r3, r0
    1908:	cmp	r3, #0
    190c:	bne	1918 <flatbuffers_string_vec_rscan_ex+0x84>
    1910:	ldr	r3, [fp, #-8]
    1914:	b	1938 <flatbuffers_string_vec_rscan_ex+0xa4>
    1918:	ldr	r3, [fp, #-8]
    191c:	sub	r2, r3, #1
    1920:	str	r2, [fp, #-8]
    1924:	ldr	r2, [fp, #-20]	; 0xffffffec
    1928:	cmp	r3, r2
    192c:	bhi	18e4 <flatbuffers_string_vec_rscan_ex+0x50>
    1930:	ldr	r3, [pc, #12]	; 1944 <flatbuffers_string_vec_rscan_ex+0xb0>
    1934:	ldr	r3, [r3]
    1938:	mov	r0, r3
    193c:	sub	sp, fp, #4
    1940:	pop	{fp, pc}
    1944:	.word	0x00000000

00001948 <flatbuffers_string_vec_rscan_ex_n>:
    1948:	push	{fp, lr}
    194c:	add	fp, sp, #4
    1950:	sub	sp, sp, #24
    1954:	str	r0, [fp, #-16]
    1958:	str	r1, [fp, #-20]	; 0xffffffec
    195c:	str	r2, [fp, #-24]	; 0xffffffe8
    1960:	str	r3, [fp, #-28]	; 0xffffffe4
    1964:	ldr	r0, [fp, #-16]
    1968:	bl	a40 <flatbuffers_string_vec_len>
    196c:	mov	r2, r0
    1970:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1974:	cmp	r2, r3
    1978:	bhi	198c <flatbuffers_string_vec_rscan_ex_n+0x44>
    197c:	ldr	r0, [fp, #-16]
    1980:	bl	a40 <flatbuffers_string_vec_len>
    1984:	mov	r3, r0
    1988:	b	1990 <flatbuffers_string_vec_rscan_ex_n+0x48>
    198c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1990:	str	r3, [fp, #-8]
    1994:	b	19cc <flatbuffers_string_vec_rscan_ex_n+0x84>
    1998:	ldr	r1, [fp, #-8]
    199c:	ldr	r0, [fp, #-16]
    19a0:	bl	a84 <flatbuffers_string_vec_at>
    19a4:	str	r0, [fp, #-12]
    19a8:	ldr	r2, [fp, #4]
    19ac:	ldr	r1, [fp, #-28]	; 0xffffffe4
    19b0:	ldr	r0, [fp, #-12]
    19b4:	bl	c7c <__flatbuffers_string_n_cmp>
    19b8:	mov	r3, r0
    19bc:	cmp	r3, #0
    19c0:	bne	19cc <flatbuffers_string_vec_rscan_ex_n+0x84>
    19c4:	ldr	r3, [fp, #-8]
    19c8:	b	19ec <flatbuffers_string_vec_rscan_ex_n+0xa4>
    19cc:	ldr	r3, [fp, #-8]
    19d0:	sub	r2, r3, #1
    19d4:	str	r2, [fp, #-8]
    19d8:	ldr	r2, [fp, #-20]	; 0xffffffec
    19dc:	cmp	r3, r2
    19e0:	bhi	1998 <flatbuffers_string_vec_rscan_ex_n+0x50>
    19e4:	ldr	r3, [pc, #12]	; 19f8 <flatbuffers_string_vec_rscan_ex_n+0xb0>
    19e8:	ldr	r3, [r3]
    19ec:	mov	r0, r3
    19f0:	sub	sp, fp, #4
    19f4:	pop	{fp, pc}
    19f8:	.word	0x00000000

000019fc <flatbuffers_has_identifier>:
    19fc:	push	{fp, lr}
    1a00:	add	fp, sp, #4
    1a04:	sub	sp, sp, #16
    1a08:	str	r0, [fp, #-16]
    1a0c:	str	r1, [fp, #-20]	; 0xffffffec
    1a10:	mov	r3, #0
    1a14:	str	r3, [fp, #-12]
    1a18:	ldr	r3, [fp, #-20]	; 0xffffffec
    1a1c:	cmp	r3, #0
    1a20:	bne	1a2c <flatbuffers_has_identifier+0x30>
    1a24:	mov	r3, #1
    1a28:	b	1a90 <flatbuffers_has_identifier+0x94>
    1a2c:	sub	r3, fp, #12
    1a30:	mov	r2, #4
    1a34:	ldr	r1, [fp, #-20]	; 0xffffffec
    1a38:	mov	r0, r3
    1a3c:	bl	0 <strncpy>
    1a40:	ldr	r3, [fp, #-12]
    1a44:	mov	r0, r3
    1a48:	bl	840 <__flatbuffers_thash_cast_from_le>
    1a4c:	mov	r3, r0
    1a50:	str	r3, [fp, #-12]
    1a54:	ldr	r3, [fp, #-16]
    1a58:	add	r3, r3, #4
    1a5c:	mov	r0, r3
    1a60:	bl	864 <__flatbuffers_thash_read_from_pe>
    1a64:	str	r0, [fp, #-8]
    1a68:	ldr	r3, [fp, #-12]
    1a6c:	cmp	r3, #0
    1a70:	beq	1a84 <flatbuffers_has_identifier+0x88>
    1a74:	ldr	r3, [fp, #-12]
    1a78:	ldr	r2, [fp, #-8]
    1a7c:	cmp	r2, r3
    1a80:	bne	1a8c <flatbuffers_has_identifier+0x90>
    1a84:	mov	r3, #1
    1a88:	b	1a90 <flatbuffers_has_identifier+0x94>
    1a8c:	mov	r3, #0
    1a90:	mov	r0, r3
    1a94:	sub	sp, fp, #4
    1a98:	pop	{fp, pc}

00001a9c <flatbuffers_has_type_hash>:
    1a9c:	push	{fp, lr}
    1aa0:	add	fp, sp, #4
    1aa4:	sub	sp, sp, #8
    1aa8:	str	r0, [fp, #-8]
    1aac:	str	r1, [fp, #-12]
    1ab0:	ldr	r3, [fp, #-12]
    1ab4:	cmp	r3, #0
    1ab8:	beq	1adc <flatbuffers_has_type_hash+0x40>
    1abc:	ldr	r3, [fp, #-8]
    1ac0:	add	r3, r3, #4
    1ac4:	mov	r0, r3
    1ac8:	bl	864 <__flatbuffers_thash_read_from_pe>
    1acc:	mov	r2, r0
    1ad0:	ldr	r3, [fp, #-12]
    1ad4:	cmp	r2, r3
    1ad8:	bne	1ae4 <flatbuffers_has_type_hash+0x48>
    1adc:	mov	r3, #1
    1ae0:	b	1ae8 <flatbuffers_has_type_hash+0x4c>
    1ae4:	mov	r3, #0
    1ae8:	mov	r0, r3
    1aec:	sub	sp, fp, #4
    1af0:	pop	{fp, pc}

00001af4 <flatbuffers_get_type_hash>:
    1af4:	push	{fp, lr}
    1af8:	add	fp, sp, #4
    1afc:	sub	sp, sp, #8
    1b00:	str	r0, [fp, #-8]
    1b04:	ldr	r3, [fp, #-8]
    1b08:	add	r3, r3, #4
    1b0c:	mov	r0, r3
    1b10:	bl	864 <__flatbuffers_thash_read_from_pe>
    1b14:	mov	r3, r0
    1b18:	mov	r0, r3
    1b1c:	sub	sp, fp, #4
    1b20:	pop	{fp, pc}

00001b24 <flatbuffers_read_size_prefix>:
    1b24:	push	{fp, lr}
    1b28:	add	fp, sp, #4
    1b2c:	sub	sp, sp, #8
    1b30:	str	r0, [fp, #-8]
    1b34:	str	r1, [fp, #-12]
    1b38:	ldr	r3, [fp, #-12]
    1b3c:	cmp	r3, #0
    1b40:	beq	1b58 <flatbuffers_read_size_prefix+0x34>
    1b44:	ldr	r0, [fp, #-8]
    1b48:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    1b4c:	mov	r2, r0
    1b50:	ldr	r3, [fp, #-12]
    1b54:	str	r2, [r3]
    1b58:	ldr	r3, [fp, #-8]
    1b5c:	add	r3, r3, #4
    1b60:	mov	r0, r3
    1b64:	sub	sp, fp, #4
    1b68:	pop	{fp, pc}

00001b6c <MyGame_Example_Color_cast_from_pe>:
    1b6c:	push	{fp}		; (str fp, [sp, #-4]!)
    1b70:	add	fp, sp, #0
    1b74:	sub	sp, sp, #12
    1b78:	mov	r3, r0
    1b7c:	strb	r3, [fp, #-5]
    1b80:	ldrsb	r3, [fp, #-5]
    1b84:	mov	r0, r3
    1b88:	add	sp, fp, #0
    1b8c:	pop	{fp}		; (ldr fp, [sp], #4)
    1b90:	bx	lr

00001b94 <MyGame_Example_Color_cast_to_pe>:
    1b94:	push	{fp}		; (str fp, [sp, #-4]!)
    1b98:	add	fp, sp, #0
    1b9c:	sub	sp, sp, #12
    1ba0:	mov	r3, r0
    1ba4:	strb	r3, [fp, #-5]
    1ba8:	ldrsb	r3, [fp, #-5]
    1bac:	mov	r0, r3
    1bb0:	add	sp, fp, #0
    1bb4:	pop	{fp}		; (ldr fp, [sp], #4)
    1bb8:	bx	lr

00001bbc <MyGame_Example_Color_read_from_pe>:
    1bbc:	push	{fp, lr}
    1bc0:	add	fp, sp, #4
    1bc4:	sub	sp, sp, #8
    1bc8:	str	r0, [fp, #-8]
    1bcc:	ldr	r3, [fp, #-8]
    1bd0:	ldrsb	r3, [r3]
    1bd4:	mov	r0, r3
    1bd8:	bl	1b6c <MyGame_Example_Color_cast_from_pe>
    1bdc:	mov	r3, r0
    1be0:	mov	r0, r3
    1be4:	sub	sp, fp, #4
    1be8:	pop	{fp, pc}

00001bec <MyGame_Example_Color_name>:
    1bec:	push	{fp}		; (str fp, [sp, #-4]!)
    1bf0:	add	fp, sp, #0
    1bf4:	sub	sp, sp, #12
    1bf8:	mov	r3, r0
    1bfc:	strb	r3, [fp, #-5]
    1c00:	ldrsb	r3, [fp, #-5]
    1c04:	cmp	r3, #2
    1c08:	beq	1c24 <MyGame_Example_Color_name+0x38>
    1c0c:	cmp	r3, #8
    1c10:	beq	1c2c <MyGame_Example_Color_name+0x40>
    1c14:	cmp	r3, #1
    1c18:	bne	1c34 <MyGame_Example_Color_name+0x48>
    1c1c:	ldr	r3, [pc, #36]	; 1c48 <MyGame_Example_Color_name+0x5c>
    1c20:	b	1c38 <MyGame_Example_Color_name+0x4c>
    1c24:	ldr	r3, [pc, #32]	; 1c4c <MyGame_Example_Color_name+0x60>
    1c28:	b	1c38 <MyGame_Example_Color_name+0x4c>
    1c2c:	ldr	r3, [pc, #28]	; 1c50 <MyGame_Example_Color_name+0x64>
    1c30:	b	1c38 <MyGame_Example_Color_name+0x4c>
    1c34:	ldr	r3, [pc, #24]	; 1c54 <MyGame_Example_Color_name+0x68>
    1c38:	mov	r0, r3
    1c3c:	add	sp, fp, #0
    1c40:	pop	{fp}		; (ldr fp, [sp], #4)
    1c44:	bx	lr
    1c48:	.word	0x000000b0
    1c4c:	.word	0x000000b4
    1c50:	.word	0x000000bc
    1c54:	.word	0x000000c4

00001c58 <MyGame_Example_Color_is_known_value>:
    1c58:	push	{fp}		; (str fp, [sp, #-4]!)
    1c5c:	add	fp, sp, #0
    1c60:	sub	sp, sp, #12
    1c64:	mov	r3, r0
    1c68:	strb	r3, [fp, #-5]
    1c6c:	ldrsb	r3, [fp, #-5]
    1c70:	cmp	r3, #2
    1c74:	beq	1c90 <MyGame_Example_Color_is_known_value+0x38>
    1c78:	cmp	r3, #8
    1c7c:	beq	1c98 <MyGame_Example_Color_is_known_value+0x40>
    1c80:	cmp	r3, #1
    1c84:	bne	1ca0 <MyGame_Example_Color_is_known_value+0x48>
    1c88:	mov	r3, #1
    1c8c:	b	1ca4 <MyGame_Example_Color_is_known_value+0x4c>
    1c90:	mov	r3, #1
    1c94:	b	1ca4 <MyGame_Example_Color_is_known_value+0x4c>
    1c98:	mov	r3, #1
    1c9c:	b	1ca4 <MyGame_Example_Color_is_known_value+0x4c>
    1ca0:	mov	r3, #0
    1ca4:	mov	r0, r3
    1ca8:	add	sp, fp, #0
    1cac:	pop	{fp}		; (ldr fp, [sp], #4)
    1cb0:	bx	lr

00001cb4 <MyGame_Example_Test__const_ptr_add>:
    1cb4:	push	{fp}		; (str fp, [sp, #-4]!)
    1cb8:	add	fp, sp, #0
    1cbc:	sub	sp, sp, #12
    1cc0:	str	r0, [fp, #-8]
    1cc4:	str	r1, [fp, #-12]
    1cc8:	ldr	r3, [fp, #-12]
    1ccc:	lsl	r3, r3, #2
    1cd0:	ldr	r2, [fp, #-8]
    1cd4:	add	r3, r2, r3
    1cd8:	mov	r0, r3
    1cdc:	add	sp, fp, #0
    1ce0:	pop	{fp}		; (ldr fp, [sp], #4)
    1ce4:	bx	lr

00001ce8 <MyGame_Example_Test_vec_at>:
    1ce8:	push	{fp, lr}
    1cec:	add	fp, sp, #4
    1cf0:	sub	sp, sp, #8
    1cf4:	str	r0, [fp, #-8]
    1cf8:	str	r1, [fp, #-12]
    1cfc:	ldr	r0, [fp, #-8]
    1d00:	bl	9b8 <flatbuffers_vec_len>
    1d04:	mov	r2, r0
    1d08:	ldr	r3, [fp, #-12]
    1d0c:	cmp	r2, r3
    1d10:	bhi	1d28 <MyGame_Example_Test_vec_at+0x40>
    1d14:	ldr	r3, [pc, #40]	; 1d44 <MyGame_Example_Test_vec_at+0x5c>
    1d18:	mov	r2, #380	; 0x17c
    1d1c:	ldr	r1, [pc, #36]	; 1d48 <MyGame_Example_Test_vec_at+0x60>
    1d20:	ldr	r0, [pc, #36]	; 1d4c <MyGame_Example_Test_vec_at+0x64>
    1d24:	bl	0 <__assert_fail>
    1d28:	ldr	r3, [fp, #-12]
    1d2c:	lsl	r3, r3, #2
    1d30:	ldr	r2, [fp, #-8]
    1d34:	add	r3, r2, r3
    1d38:	mov	r0, r3
    1d3c:	sub	sp, fp, #4
    1d40:	pop	{fp, pc}
    1d44:	.word	0x00003634
    1d48:	.word	0x000000c8
    1d4c:	.word	0x00000078

00001d50 <MyGame_Example_Test__size>:
    1d50:	push	{fp}		; (str fp, [sp, #-4]!)
    1d54:	add	fp, sp, #0
    1d58:	mov	r3, #4
    1d5c:	mov	r0, r3
    1d60:	add	sp, fp, #0
    1d64:	pop	{fp}		; (ldr fp, [sp], #4)
    1d68:	bx	lr

00001d6c <MyGame_Example_Test_vec_len>:
    1d6c:	push	{fp, lr}
    1d70:	add	fp, sp, #4
    1d74:	sub	sp, sp, #8
    1d78:	str	r0, [fp, #-8]
    1d7c:	ldr	r3, [fp, #-8]
    1d80:	cmp	r3, #0
    1d84:	beq	1da0 <MyGame_Example_Test_vec_len+0x34>
    1d88:	ldr	r3, [fp, #-8]
    1d8c:	sub	r3, r3, #4
    1d90:	mov	r0, r3
    1d94:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    1d98:	mov	r3, r0
    1d9c:	b	1da4 <MyGame_Example_Test_vec_len+0x38>
    1da0:	mov	r3, #0
    1da4:	mov	r0, r3
    1da8:	sub	sp, fp, #4
    1dac:	pop	{fp, pc}

00001db0 <MyGame_Example_Test_a>:
    1db0:	push	{fp, lr}
    1db4:	add	fp, sp, #4
    1db8:	sub	sp, sp, #8
    1dbc:	str	r0, [fp, #-8]
    1dc0:	ldr	r3, [fp, #-8]
    1dc4:	cmp	r3, #0
    1dc8:	beq	1de0 <MyGame_Example_Test_a+0x30>
    1dcc:	ldr	r3, [fp, #-8]
    1dd0:	mov	r0, r3
    1dd4:	bl	2d4 <flatbuffers_int16_read_from_pe>
    1dd8:	mov	r3, r0
    1ddc:	b	1de4 <MyGame_Example_Test_a+0x34>
    1de0:	mov	r3, #0
    1de4:	mov	r0, r3
    1de8:	sub	sp, fp, #4
    1dec:	pop	{fp, pc}

00001df0 <MyGame_Example_Test_b>:
    1df0:	push	{fp, lr}
    1df4:	add	fp, sp, #4
    1df8:	sub	sp, sp, #8
    1dfc:	str	r0, [fp, #-8]
    1e00:	ldr	r3, [fp, #-8]
    1e04:	cmp	r3, #0
    1e08:	beq	1e24 <MyGame_Example_Test_b+0x34>
    1e0c:	ldr	r3, [fp, #-8]
    1e10:	add	r3, r3, #2
    1e14:	mov	r0, r3
    1e18:	bl	254 <flatbuffers_int8_read_from_pe>
    1e1c:	mov	r3, r0
    1e20:	b	1e28 <MyGame_Example_Test_b+0x38>
    1e24:	mov	r3, #0
    1e28:	mov	r0, r3
    1e2c:	sub	sp, fp, #4
    1e30:	pop	{fp, pc}

00001e34 <MyGame_Example_emptystruct__size>:
    1e34:	push	{fp}		; (str fp, [sp, #-4]!)
    1e38:	add	fp, sp, #0
    1e3c:	mov	r3, #0
    1e40:	mov	r0, r3
    1e44:	add	sp, fp, #0
    1e48:	pop	{fp}		; (ldr fp, [sp], #4)
    1e4c:	bx	lr

00001e50 <MyGame_Example_Vec3__size>:
    1e50:	push	{fp}		; (str fp, [sp, #-4]!)
    1e54:	add	fp, sp, #0
    1e58:	mov	r3, #32
    1e5c:	mov	r0, r3
    1e60:	add	sp, fp, #0
    1e64:	pop	{fp}		; (ldr fp, [sp], #4)
    1e68:	bx	lr

00001e6c <MyGame_Example_Vec3_as_root_with_identifier>:
    1e6c:	push	{fp, lr}
    1e70:	add	fp, sp, #4
    1e74:	sub	sp, sp, #8
    1e78:	str	r0, [fp, #-8]
    1e7c:	str	r1, [fp, #-12]
    1e80:	ldr	r3, [fp, #-8]
    1e84:	cmp	r3, #0
    1e88:	beq	1ebc <MyGame_Example_Vec3_as_root_with_identifier+0x50>
    1e8c:	ldr	r1, [fp, #-12]
    1e90:	ldr	r0, [fp, #-8]
    1e94:	bl	19fc <flatbuffers_has_identifier>
    1e98:	mov	r3, r0
    1e9c:	cmp	r3, #0
    1ea0:	beq	1ebc <MyGame_Example_Vec3_as_root_with_identifier+0x50>
    1ea4:	ldr	r0, [fp, #-8]
    1ea8:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    1eac:	mov	r2, r0
    1eb0:	ldr	r3, [fp, #-8]
    1eb4:	add	r3, r3, r2
    1eb8:	b	1ec0 <MyGame_Example_Vec3_as_root_with_identifier+0x54>
    1ebc:	mov	r3, #0
    1ec0:	mov	r0, r3
    1ec4:	sub	sp, fp, #4
    1ec8:	pop	{fp, pc}

00001ecc <MyGame_Example_Vec3_as_root_with_type_hash>:
    1ecc:	push	{fp, lr}
    1ed0:	add	fp, sp, #4
    1ed4:	sub	sp, sp, #8
    1ed8:	str	r0, [fp, #-8]
    1edc:	str	r1, [fp, #-12]
    1ee0:	ldr	r3, [fp, #-8]
    1ee4:	cmp	r3, #0
    1ee8:	beq	1f1c <MyGame_Example_Vec3_as_root_with_type_hash+0x50>
    1eec:	ldr	r1, [fp, #-12]
    1ef0:	ldr	r0, [fp, #-8]
    1ef4:	bl	1a9c <flatbuffers_has_type_hash>
    1ef8:	mov	r3, r0
    1efc:	cmp	r3, #0
    1f00:	beq	1f1c <MyGame_Example_Vec3_as_root_with_type_hash+0x50>
    1f04:	ldr	r0, [fp, #-8]
    1f08:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    1f0c:	mov	r2, r0
    1f10:	ldr	r3, [fp, #-8]
    1f14:	add	r3, r3, r2
    1f18:	b	1f20 <MyGame_Example_Vec3_as_root_with_type_hash+0x54>
    1f1c:	mov	r3, #0
    1f20:	mov	r0, r3
    1f24:	sub	sp, fp, #4
    1f28:	pop	{fp, pc}

00001f2c <MyGame_Example_Vec3_as_root>:
    1f2c:	push	{fp, lr}
    1f30:	add	fp, sp, #4
    1f34:	sub	sp, sp, #16
    1f38:	str	r0, [fp, #-16]
    1f3c:	ldr	r3, [pc, #76]	; 1f90 <MyGame_Example_Vec3_as_root+0x64>
    1f40:	str	r3, [fp, #-8]
    1f44:	ldr	r3, [fp, #-16]
    1f48:	cmp	r3, #0
    1f4c:	beq	1f80 <MyGame_Example_Vec3_as_root+0x54>
    1f50:	ldr	r1, [fp, #-8]
    1f54:	ldr	r0, [fp, #-16]
    1f58:	bl	19fc <flatbuffers_has_identifier>
    1f5c:	mov	r3, r0
    1f60:	cmp	r3, #0
    1f64:	beq	1f80 <MyGame_Example_Vec3_as_root+0x54>
    1f68:	ldr	r0, [fp, #-16]
    1f6c:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    1f70:	mov	r2, r0
    1f74:	ldr	r3, [fp, #-16]
    1f78:	add	r3, r3, r2
    1f7c:	b	1f84 <MyGame_Example_Vec3_as_root+0x58>
    1f80:	mov	r3, #0
    1f84:	mov	r0, r3
    1f88:	sub	sp, fp, #4
    1f8c:	pop	{fp, pc}
    1f90:	.word	0x00000134

00001f94 <MyGame_Example_Vec3_as_typed_root>:
    1f94:	push	{fp, lr}
    1f98:	add	fp, sp, #4
    1f9c:	sub	sp, sp, #8
    1fa0:	str	r0, [fp, #-8]
    1fa4:	ldr	r3, [fp, #-8]
    1fa8:	cmp	r3, #0
    1fac:	beq	1fe0 <MyGame_Example_Vec3_as_typed_root+0x4c>
    1fb0:	ldr	r1, [pc, #56]	; 1ff0 <MyGame_Example_Vec3_as_typed_root+0x5c>
    1fb4:	ldr	r0, [fp, #-8]
    1fb8:	bl	1a9c <flatbuffers_has_type_hash>
    1fbc:	mov	r3, r0
    1fc0:	cmp	r3, #0
    1fc4:	beq	1fe0 <MyGame_Example_Vec3_as_typed_root+0x4c>
    1fc8:	ldr	r0, [fp, #-8]
    1fcc:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    1fd0:	mov	r2, r0
    1fd4:	ldr	r3, [fp, #-8]
    1fd8:	add	r3, r3, r2
    1fdc:	b	1fe4 <MyGame_Example_Vec3_as_typed_root+0x50>
    1fe0:	mov	r3, #0
    1fe4:	mov	r0, r3
    1fe8:	sub	sp, fp, #4
    1fec:	pop	{fp, pc}
    1ff0:	.word	0xa8f53ed2

00001ff4 <MyGame_Example_Vec3_z>:
    1ff4:	push	{fp, lr}
    1ff8:	add	fp, sp, #4
    1ffc:	sub	sp, sp, #8
    2000:	str	r0, [fp, #-8]
    2004:	ldr	r3, [fp, #-8]
    2008:	cmp	r3, #0
    200c:	beq	2028 <MyGame_Example_Vec3_z+0x34>
    2010:	ldr	r3, [fp, #-8]
    2014:	add	r3, r3, #8
    2018:	mov	r0, r3
    201c:	bl	478 <flatbuffers_float_read_from_pe>
    2020:	vmov.f32	s15, s0
    2024:	b	202c <MyGame_Example_Vec3_z+0x38>
    2028:	vldr	s15, [pc, #8]	; 2038 <MyGame_Example_Vec3_z+0x44>
    202c:	vmov.f32	s0, s15
    2030:	sub	sp, fp, #4
    2034:	pop	{fp, pc}
    2038:	.word	0x00000000

0000203c <Fantasy_Rapunzel_hair_length>:
    203c:	push	{fp, lr}
    2040:	add	fp, sp, #4
    2044:	sub	sp, sp, #8
    2048:	str	r0, [fp, #-8]
    204c:	ldr	r3, [fp, #-8]
    2050:	cmp	r3, #0
    2054:	beq	206c <Fantasy_Rapunzel_hair_length+0x30>
    2058:	ldr	r3, [fp, #-8]
    205c:	mov	r0, r3
    2060:	bl	d0 <flatbuffers_uint16_read_from_pe>
    2064:	mov	r3, r0
    2068:	b	2070 <Fantasy_Rapunzel_hair_length+0x34>
    206c:	mov	r3, #0
    2070:	mov	r0, r3
    2074:	sub	sp, fp, #4
    2078:	pop	{fp, pc}

0000207c <MyGame_Example_Any_vec_len>:
    207c:	push	{fp, lr}
    2080:	add	fp, sp, #4
    2084:	sub	sp, sp, #8
    2088:	str	r0, [fp, #-8]
    208c:	ldr	r0, [fp, #-8]
    2090:	bl	9b8 <flatbuffers_vec_len>
    2094:	mov	r3, r0
    2098:	mov	r0, r3
    209c:	sub	sp, fp, #4
    20a0:	pop	{fp, pc}

000020a4 <MyGame_Example_Any_union_vec_len>:
    20a4:	push	{fp, lr}
    20a8:	add	fp, sp, #4
    20ac:	sub	sp, sp, #8
    20b0:	sub	r3, fp, #12
    20b4:	stm	r3, {r0, r1}
    20b8:	ldr	r3, [fp, #-12]
    20bc:	mov	r0, r3
    20c0:	bl	9b8 <flatbuffers_vec_len>
    20c4:	mov	r3, r0
    20c8:	mov	r0, r3
    20cc:	sub	sp, fp, #4
    20d0:	pop	{fp, pc}

000020d4 <MyGame_Example_Any_union_vec_at>:
    20d4:	push	{fp, lr}
    20d8:	add	fp, sp, #4
    20dc:	sub	sp, sp, #32
    20e0:	str	r0, [fp, #-24]	; 0xffffffe8
    20e4:	sub	r0, fp, #32
    20e8:	stm	r0, {r1, r2}
    20ec:	str	r3, [fp, #-36]	; 0xffffffdc
    20f0:	mov	r3, #0
    20f4:	strb	r3, [fp, #-16]
    20f8:	mov	r3, #0
    20fc:	str	r3, [fp, #-12]
    2100:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2104:	mov	r0, r3
    2108:	bl	9b8 <flatbuffers_vec_len>
    210c:	str	r0, [fp, #-8]
    2110:	ldr	r2, [fp, #-8]
    2114:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2118:	cmp	r2, r3
    211c:	bhi	2134 <MyGame_Example_Any_union_vec_at+0x60>
    2120:	ldr	r3, [pc, #124]	; 21a4 <MyGame_Example_Any_union_vec_at+0xd0>
    2124:	mov	r2, #520	; 0x208
    2128:	ldr	r1, [pc, #120]	; 21a8 <MyGame_Example_Any_union_vec_at+0xd4>
    212c:	ldr	r0, [pc, #120]	; 21ac <MyGame_Example_Any_union_vec_at+0xd8>
    2130:	bl	0 <__assert_fail>
    2134:	ldr	r2, [fp, #-32]	; 0xffffffe0
    2138:	ldr	r3, [fp, #-36]	; 0xffffffdc
    213c:	add	r3, r2, r3
    2140:	ldrb	r3, [r3]
    2144:	strb	r3, [fp, #-16]
    2148:	ldrb	r3, [fp, #-16]
    214c:	cmp	r3, #0
    2150:	bne	216c <MyGame_Example_Any_union_vec_at+0x98>
    2154:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2158:	mov	r2, r3
    215c:	sub	r3, fp, #16
    2160:	ldm	r3, {r0, r1}
    2164:	stm	r2, {r0, r1}
    2168:	b	2198 <MyGame_Example_Any_union_vec_at+0xc4>
    216c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2170:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2174:	mov	r0, r3
    2178:	bl	b48 <flatbuffers_generic_vec_at>
    217c:	mov	r3, r0
    2180:	str	r3, [fp, #-12]
    2184:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2188:	mov	r2, r3
    218c:	sub	r3, fp, #16
    2190:	ldm	r3, {r0, r1}
    2194:	stm	r2, {r0, r1}
    2198:	ldr	r0, [fp, #-24]	; 0xffffffe8
    219c:	sub	sp, fp, #4
    21a0:	pop	{fp, pc}
    21a4:	.word	0x00003a7c
    21a8:	.word	0x000000c8
    21ac:	.word	0x0000013c

000021b0 <MyGame_Example_Any_is_known_type>:
    21b0:	push	{fp}		; (str fp, [sp, #-4]!)
    21b4:	add	fp, sp, #0
    21b8:	sub	sp, sp, #12
    21bc:	mov	r3, r0
    21c0:	strb	r3, [fp, #-5]
    21c4:	ldrb	r3, [fp, #-5]
    21c8:	cmp	r3, #4
    21cc:	ldrls	pc, [pc, r3, lsl #2]
    21d0:	b	2210 <MyGame_Example_Any_is_known_type+0x60>
    21d4:	.word	0x000021e8
    21d8:	.word	0x000021f0
    21dc:	.word	0x000021f8
    21e0:	.word	0x00002200
    21e4:	.word	0x00002208
    21e8:	mov	r3, #1
    21ec:	b	2214 <MyGame_Example_Any_is_known_type+0x64>
    21f0:	mov	r3, #1
    21f4:	b	2214 <MyGame_Example_Any_is_known_type+0x64>
    21f8:	mov	r3, #1
    21fc:	b	2214 <MyGame_Example_Any_is_known_type+0x64>
    2200:	mov	r3, #1
    2204:	b	2214 <MyGame_Example_Any_is_known_type+0x64>
    2208:	mov	r3, #1
    220c:	b	2214 <MyGame_Example_Any_is_known_type+0x64>
    2210:	mov	r3, #0
    2214:	mov	r0, r3
    2218:	add	sp, fp, #0
    221c:	pop	{fp}		; (ldr fp, [sp], #4)
    2220:	bx	lr

00002224 <MyGame_Example_with_emptystruct_as_root_with_identifier>:
    2224:	push	{fp, lr}
    2228:	add	fp, sp, #4
    222c:	sub	sp, sp, #8
    2230:	str	r0, [fp, #-8]
    2234:	str	r1, [fp, #-12]
    2238:	ldr	r3, [fp, #-8]
    223c:	cmp	r3, #0
    2240:	beq	2274 <MyGame_Example_with_emptystruct_as_root_with_identifier+0x50>
    2244:	ldr	r1, [fp, #-12]
    2248:	ldr	r0, [fp, #-8]
    224c:	bl	19fc <flatbuffers_has_identifier>
    2250:	mov	r3, r0
    2254:	cmp	r3, #0
    2258:	beq	2274 <MyGame_Example_with_emptystruct_as_root_with_identifier+0x50>
    225c:	ldr	r0, [fp, #-8]
    2260:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    2264:	mov	r2, r0
    2268:	ldr	r3, [fp, #-8]
    226c:	add	r3, r3, r2
    2270:	b	2278 <MyGame_Example_with_emptystruct_as_root_with_identifier+0x54>
    2274:	mov	r3, #0
    2278:	mov	r0, r3
    227c:	sub	sp, fp, #4
    2280:	pop	{fp, pc}

00002284 <MyGame_Example_with_emptystruct_as_root_with_type_hash>:
    2284:	push	{fp, lr}
    2288:	add	fp, sp, #4
    228c:	sub	sp, sp, #8
    2290:	str	r0, [fp, #-8]
    2294:	str	r1, [fp, #-12]
    2298:	ldr	r3, [fp, #-8]
    229c:	cmp	r3, #0
    22a0:	beq	22d4 <MyGame_Example_with_emptystruct_as_root_with_type_hash+0x50>
    22a4:	ldr	r1, [fp, #-12]
    22a8:	ldr	r0, [fp, #-8]
    22ac:	bl	1a9c <flatbuffers_has_type_hash>
    22b0:	mov	r3, r0
    22b4:	cmp	r3, #0
    22b8:	beq	22d4 <MyGame_Example_with_emptystruct_as_root_with_type_hash+0x50>
    22bc:	ldr	r0, [fp, #-8]
    22c0:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    22c4:	mov	r2, r0
    22c8:	ldr	r3, [fp, #-8]
    22cc:	add	r3, r3, r2
    22d0:	b	22d8 <MyGame_Example_with_emptystruct_as_root_with_type_hash+0x54>
    22d4:	mov	r3, #0
    22d8:	mov	r0, r3
    22dc:	sub	sp, fp, #4
    22e0:	pop	{fp, pc}

000022e4 <MyGame_Example_with_emptystruct_as_root>:
    22e4:	push	{fp, lr}
    22e8:	add	fp, sp, #4
    22ec:	sub	sp, sp, #16
    22f0:	str	r0, [fp, #-16]
    22f4:	ldr	r3, [pc, #76]	; 2348 <MyGame_Example_with_emptystruct_as_root+0x64>
    22f8:	str	r3, [fp, #-8]
    22fc:	ldr	r3, [fp, #-16]
    2300:	cmp	r3, #0
    2304:	beq	2338 <MyGame_Example_with_emptystruct_as_root+0x54>
    2308:	ldr	r1, [fp, #-8]
    230c:	ldr	r0, [fp, #-16]
    2310:	bl	19fc <flatbuffers_has_identifier>
    2314:	mov	r3, r0
    2318:	cmp	r3, #0
    231c:	beq	2338 <MyGame_Example_with_emptystruct_as_root+0x54>
    2320:	ldr	r0, [fp, #-16]
    2324:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    2328:	mov	r2, r0
    232c:	ldr	r3, [fp, #-16]
    2330:	add	r3, r3, r2
    2334:	b	233c <MyGame_Example_with_emptystruct_as_root+0x58>
    2338:	mov	r3, #0
    233c:	mov	r0, r3
    2340:	sub	sp, fp, #4
    2344:	pop	{fp, pc}
    2348:	.word	0x00000134

0000234c <MyGame_Example_with_emptystruct_as_typed_root>:
    234c:	push	{fp, lr}
    2350:	add	fp, sp, #4
    2354:	sub	sp, sp, #8
    2358:	str	r0, [fp, #-8]
    235c:	ldr	r3, [fp, #-8]
    2360:	cmp	r3, #0
    2364:	beq	2398 <MyGame_Example_with_emptystruct_as_typed_root+0x4c>
    2368:	ldr	r1, [pc, #56]	; 23a8 <MyGame_Example_with_emptystruct_as_typed_root+0x5c>
    236c:	ldr	r0, [fp, #-8]
    2370:	bl	1a9c <flatbuffers_has_type_hash>
    2374:	mov	r3, r0
    2378:	cmp	r3, #0
    237c:	beq	2398 <MyGame_Example_with_emptystruct_as_typed_root+0x4c>
    2380:	ldr	r0, [fp, #-8]
    2384:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    2388:	mov	r2, r0
    238c:	ldr	r3, [fp, #-8]
    2390:	add	r3, r3, r2
    2394:	b	239c <MyGame_Example_with_emptystruct_as_typed_root+0x50>
    2398:	mov	r3, #0
    239c:	mov	r0, r3
    23a0:	sub	sp, fp, #4
    23a4:	pop	{fp, pc}
    23a8:	.word	0xb0dd37b6

000023ac <MyGame_Example_with_emptystruct_empty>:
    23ac:	push	{fp, lr}
    23b0:	add	fp, sp, #4
    23b4:	sub	sp, sp, #16
    23b8:	str	r0, [fp, #-16]
    23bc:	mov	r3, #0
    23c0:	strh	r3, [fp, #-6]
    23c4:	ldr	r3, [fp, #-16]
    23c8:	cmp	r3, #0
    23cc:	bne	23e4 <MyGame_Example_with_emptystruct_empty+0x38>
    23d0:	ldr	r3, [pc, #164]	; 247c <MyGame_Example_with_emptystruct_empty+0xd0>
    23d4:	ldr	r2, [pc, #164]	; 2480 <MyGame_Example_with_emptystruct_empty+0xd4>
    23d8:	ldr	r1, [pc, #164]	; 2484 <MyGame_Example_with_emptystruct_empty+0xd8>
    23dc:	ldr	r0, [pc, #164]	; 2488 <MyGame_Example_with_emptystruct_empty+0xdc>
    23e0:	bl	0 <__assert_fail>
    23e4:	mov	r3, #0
    23e8:	strh	r3, [fp, #-8]
    23ec:	ldr	r0, [fp, #-16]
    23f0:	bl	73c <__flatbuffers_soffset_read_from_pe>
    23f4:	mov	r3, r0
    23f8:	rsb	r3, r3, #0
    23fc:	ldr	r2, [fp, #-16]
    2400:	add	r3, r2, r3
    2404:	str	r3, [fp, #-12]
    2408:	ldr	r0, [fp, #-12]
    240c:	bl	794 <__flatbuffers_voffset_read_from_pe>
    2410:	mov	r3, r0
    2414:	mov	r2, r3
    2418:	ldrh	r3, [fp, #-8]
    241c:	add	r3, r3, #3
    2420:	lsl	r3, r3, #1
    2424:	cmp	r2, r3
    2428:	bcc	2450 <MyGame_Example_with_emptystruct_empty+0xa4>
    242c:	ldrh	r3, [fp, #-8]
    2430:	add	r3, r3, #2
    2434:	lsl	r3, r3, #1
    2438:	ldr	r2, [fp, #-12]
    243c:	add	r3, r2, r3
    2440:	mov	r0, r3
    2444:	bl	794 <__flatbuffers_voffset_read_from_pe>
    2448:	mov	r3, r0
    244c:	strh	r3, [fp, #-6]
    2450:	ldrh	r3, [fp, #-6]
    2454:	cmp	r3, #0
    2458:	beq	246c <MyGame_Example_with_emptystruct_empty+0xc0>
    245c:	ldrh	r3, [fp, #-6]
    2460:	ldr	r2, [fp, #-16]
    2464:	add	r3, r2, r3
    2468:	b	2470 <MyGame_Example_with_emptystruct_empty+0xc4>
    246c:	mov	r3, #0
    2470:	mov	r0, r3
    2474:	sub	sp, fp, #4
    2478:	pop	{fp, pc}
    247c:	.word	0x00003514
    2480:	.word	0x00000239
    2484:	.word	0x000000c8
    2488:	.word	0x0000015c

0000248c <MyGame_Example_TestSimpleTableWithEnum_color>:
    248c:	push	{fp, lr}
    2490:	add	fp, sp, #4
    2494:	sub	sp, sp, #16
    2498:	str	r0, [fp, #-16]
    249c:	mov	r3, #0
    24a0:	strh	r3, [fp, #-6]
    24a4:	ldr	r3, [fp, #-16]
    24a8:	cmp	r3, #0
    24ac:	bne	24c4 <MyGame_Example_TestSimpleTableWithEnum_color+0x38>
    24b0:	ldr	r3, [pc, #176]	; 2568 <MyGame_Example_TestSimpleTableWithEnum_color+0xdc>
    24b4:	ldr	r2, [pc, #176]	; 256c <MyGame_Example_TestSimpleTableWithEnum_color+0xe0>
    24b8:	ldr	r1, [pc, #176]	; 2570 <MyGame_Example_TestSimpleTableWithEnum_color+0xe4>
    24bc:	ldr	r0, [pc, #176]	; 2574 <MyGame_Example_TestSimpleTableWithEnum_color+0xe8>
    24c0:	bl	0 <__assert_fail>
    24c4:	mov	r3, #0
    24c8:	strh	r3, [fp, #-8]
    24cc:	ldr	r0, [fp, #-16]
    24d0:	bl	73c <__flatbuffers_soffset_read_from_pe>
    24d4:	mov	r3, r0
    24d8:	rsb	r3, r3, #0
    24dc:	ldr	r2, [fp, #-16]
    24e0:	add	r3, r2, r3
    24e4:	str	r3, [fp, #-12]
    24e8:	ldr	r0, [fp, #-12]
    24ec:	bl	794 <__flatbuffers_voffset_read_from_pe>
    24f0:	mov	r3, r0
    24f4:	mov	r2, r3
    24f8:	ldrh	r3, [fp, #-8]
    24fc:	add	r3, r3, #3
    2500:	lsl	r3, r3, #1
    2504:	cmp	r2, r3
    2508:	bcc	2530 <MyGame_Example_TestSimpleTableWithEnum_color+0xa4>
    250c:	ldrh	r3, [fp, #-8]
    2510:	add	r3, r3, #2
    2514:	lsl	r3, r3, #1
    2518:	ldr	r2, [fp, #-12]
    251c:	add	r3, r2, r3
    2520:	mov	r0, r3
    2524:	bl	794 <__flatbuffers_voffset_read_from_pe>
    2528:	mov	r3, r0
    252c:	strh	r3, [fp, #-6]
    2530:	ldrh	r3, [fp, #-6]
    2534:	cmp	r3, #0
    2538:	beq	2558 <MyGame_Example_TestSimpleTableWithEnum_color+0xcc>
    253c:	ldrh	r3, [fp, #-6]
    2540:	ldr	r2, [fp, #-16]
    2544:	add	r3, r2, r3
    2548:	mov	r0, r3
    254c:	bl	1bbc <MyGame_Example_Color_read_from_pe>
    2550:	mov	r3, r0
    2554:	b	255c <MyGame_Example_TestSimpleTableWithEnum_color+0xd0>
    2558:	mov	r3, #2
    255c:	mov	r0, r3
    2560:	sub	sp, fp, #4
    2564:	pop	{fp, pc}
    2568:	.word	0x00003a28
    256c:	.word	0x00000243
    2570:	.word	0x000000c8
    2574:	.word	0x0000015c

00002578 <MyGame_Example_Stat_id_is_present>:
    2578:	push	{fp, lr}
    257c:	add	fp, sp, #4
    2580:	sub	sp, sp, #16
    2584:	str	r0, [fp, #-16]
    2588:	mov	r3, #0
    258c:	strh	r3, [fp, #-6]
    2590:	ldr	r3, [fp, #-16]
    2594:	cmp	r3, #0
    2598:	bne	25b0 <MyGame_Example_Stat_id_is_present+0x38>
    259c:	ldr	r3, [pc, #152]	; 263c <MyGame_Example_Stat_id_is_present+0xc4>
    25a0:	ldr	r2, [pc, #152]	; 2640 <MyGame_Example_Stat_id_is_present+0xc8>
    25a4:	ldr	r1, [pc, #152]	; 2644 <MyGame_Example_Stat_id_is_present+0xcc>
    25a8:	ldr	r0, [pc, #152]	; 2648 <MyGame_Example_Stat_id_is_present+0xd0>
    25ac:	bl	0 <__assert_fail>
    25b0:	mov	r3, #0
    25b4:	strh	r3, [fp, #-8]
    25b8:	ldr	r0, [fp, #-16]
    25bc:	bl	73c <__flatbuffers_soffset_read_from_pe>
    25c0:	mov	r3, r0
    25c4:	rsb	r3, r3, #0
    25c8:	ldr	r2, [fp, #-16]
    25cc:	add	r3, r2, r3
    25d0:	str	r3, [fp, #-12]
    25d4:	ldr	r0, [fp, #-12]
    25d8:	bl	794 <__flatbuffers_voffset_read_from_pe>
    25dc:	mov	r3, r0
    25e0:	mov	r2, r3
    25e4:	ldrh	r3, [fp, #-8]
    25e8:	add	r3, r3, #3
    25ec:	lsl	r3, r3, #1
    25f0:	cmp	r2, r3
    25f4:	bcc	261c <MyGame_Example_Stat_id_is_present+0xa4>
    25f8:	ldrh	r3, [fp, #-8]
    25fc:	add	r3, r3, #2
    2600:	lsl	r3, r3, #1
    2604:	ldr	r2, [fp, #-12]
    2608:	add	r3, r2, r3
    260c:	mov	r0, r3
    2610:	bl	794 <__flatbuffers_voffset_read_from_pe>
    2614:	mov	r3, r0
    2618:	strh	r3, [fp, #-6]
    261c:	ldrh	r3, [fp, #-6]
    2620:	cmp	r3, #0
    2624:	movne	r3, #1
    2628:	moveq	r3, #0
    262c:	uxtb	r3, r3
    2630:	mov	r0, r3
    2634:	sub	sp, fp, #4
    2638:	pop	{fp, pc}
    263c:	.word	0x00003844
    2640:	.word	0x0000025f
    2644:	.word	0x000000c8
    2648:	.word	0x0000015c

0000264c <MyGame_Example_Stat_val>:
    264c:	push	{fp, lr}
    2650:	add	fp, sp, #4
    2654:	sub	sp, sp, #16
    2658:	str	r0, [fp, #-16]
    265c:	mov	r3, #0
    2660:	strh	r3, [fp, #-6]
    2664:	ldr	r3, [fp, #-16]
    2668:	cmp	r3, #0
    266c:	bne	2684 <MyGame_Example_Stat_val+0x38>
    2670:	ldr	r3, [pc, #188]	; 2734 <MyGame_Example_Stat_val+0xe8>
    2674:	mov	r2, #608	; 0x260
    2678:	ldr	r1, [pc, #184]	; 2738 <MyGame_Example_Stat_val+0xec>
    267c:	ldr	r0, [pc, #184]	; 273c <MyGame_Example_Stat_val+0xf0>
    2680:	bl	0 <__assert_fail>
    2684:	mov	r3, #1
    2688:	strh	r3, [fp, #-8]
    268c:	ldr	r0, [fp, #-16]
    2690:	bl	73c <__flatbuffers_soffset_read_from_pe>
    2694:	mov	r3, r0
    2698:	rsb	r3, r3, #0
    269c:	ldr	r2, [fp, #-16]
    26a0:	add	r3, r2, r3
    26a4:	str	r3, [fp, #-12]
    26a8:	ldr	r0, [fp, #-12]
    26ac:	bl	794 <__flatbuffers_voffset_read_from_pe>
    26b0:	mov	r3, r0
    26b4:	mov	r2, r3
    26b8:	ldrh	r3, [fp, #-8]
    26bc:	add	r3, r3, #3
    26c0:	lsl	r3, r3, #1
    26c4:	cmp	r2, r3
    26c8:	bcc	26f0 <MyGame_Example_Stat_val+0xa4>
    26cc:	ldrh	r3, [fp, #-8]
    26d0:	add	r3, r3, #2
    26d4:	lsl	r3, r3, #1
    26d8:	ldr	r2, [fp, #-12]
    26dc:	add	r3, r2, r3
    26e0:	mov	r0, r3
    26e4:	bl	794 <__flatbuffers_voffset_read_from_pe>
    26e8:	mov	r3, r0
    26ec:	strh	r3, [fp, #-6]
    26f0:	ldrh	r3, [fp, #-6]
    26f4:	cmp	r3, #0
    26f8:	beq	271c <MyGame_Example_Stat_val+0xd0>
    26fc:	ldrh	r3, [fp, #-6]
    2700:	ldr	r2, [fp, #-16]
    2704:	add	r3, r2, r3
    2708:	mov	r0, r3
    270c:	bl	3cc <flatbuffers_int64_read_from_pe>
    2710:	mov	r2, r0
    2714:	mov	r3, r1
    2718:	b	2724 <MyGame_Example_Stat_val+0xd8>
    271c:	mov	r2, #0
    2720:	mov	r3, #0
    2724:	mov	r0, r2
    2728:	mov	r1, r3
    272c:	sub	sp, fp, #4
    2730:	pop	{fp, pc}
    2734:	.word	0x0000394c
    2738:	.word	0x000000c8
    273c:	.word	0x0000015c

00002740 <MyGame_Example_Stat_val_is_present>:
    2740:	push	{fp, lr}
    2744:	add	fp, sp, #4
    2748:	sub	sp, sp, #16
    274c:	str	r0, [fp, #-16]
    2750:	mov	r3, #0
    2754:	strh	r3, [fp, #-6]
    2758:	ldr	r3, [fp, #-16]
    275c:	cmp	r3, #0
    2760:	bne	2778 <MyGame_Example_Stat_val_is_present+0x38>
    2764:	ldr	r3, [pc, #152]	; 2804 <MyGame_Example_Stat_val_is_present+0xc4>
    2768:	mov	r2, #608	; 0x260
    276c:	ldr	r1, [pc, #148]	; 2808 <MyGame_Example_Stat_val_is_present+0xc8>
    2770:	ldr	r0, [pc, #148]	; 280c <MyGame_Example_Stat_val_is_present+0xcc>
    2774:	bl	0 <__assert_fail>
    2778:	mov	r3, #1
    277c:	strh	r3, [fp, #-8]
    2780:	ldr	r0, [fp, #-16]
    2784:	bl	73c <__flatbuffers_soffset_read_from_pe>
    2788:	mov	r3, r0
    278c:	rsb	r3, r3, #0
    2790:	ldr	r2, [fp, #-16]
    2794:	add	r3, r2, r3
    2798:	str	r3, [fp, #-12]
    279c:	ldr	r0, [fp, #-12]
    27a0:	bl	794 <__flatbuffers_voffset_read_from_pe>
    27a4:	mov	r3, r0
    27a8:	mov	r2, r3
    27ac:	ldrh	r3, [fp, #-8]
    27b0:	add	r3, r3, #3
    27b4:	lsl	r3, r3, #1
    27b8:	cmp	r2, r3
    27bc:	bcc	27e4 <MyGame_Example_Stat_val_is_present+0xa4>
    27c0:	ldrh	r3, [fp, #-8]
    27c4:	add	r3, r3, #2
    27c8:	lsl	r3, r3, #1
    27cc:	ldr	r2, [fp, #-12]
    27d0:	add	r3, r2, r3
    27d4:	mov	r0, r3
    27d8:	bl	794 <__flatbuffers_voffset_read_from_pe>
    27dc:	mov	r3, r0
    27e0:	strh	r3, [fp, #-6]
    27e4:	ldrh	r3, [fp, #-6]
    27e8:	cmp	r3, #0
    27ec:	movne	r3, #1
    27f0:	moveq	r3, #0
    27f4:	uxtb	r3, r3
    27f8:	mov	r0, r3
    27fc:	sub	sp, fp, #4
    2800:	pop	{fp, pc}
    2804:	.word	0x00003868
    2808:	.word	0x000000c8
    280c:	.word	0x0000015c

00002810 <MyGame_Example_Stat_count_is_present>:
    2810:	push	{fp, lr}
    2814:	add	fp, sp, #4
    2818:	sub	sp, sp, #16
    281c:	str	r0, [fp, #-16]
    2820:	mov	r3, #0
    2824:	strh	r3, [fp, #-6]
    2828:	ldr	r3, [fp, #-16]
    282c:	cmp	r3, #0
    2830:	bne	2848 <MyGame_Example_Stat_count_is_present+0x38>
    2834:	ldr	r3, [pc, #152]	; 28d4 <MyGame_Example_Stat_count_is_present+0xc4>
    2838:	ldr	r2, [pc, #152]	; 28d8 <MyGame_Example_Stat_count_is_present+0xc8>
    283c:	ldr	r1, [pc, #152]	; 28dc <MyGame_Example_Stat_count_is_present+0xcc>
    2840:	ldr	r0, [pc, #152]	; 28e0 <MyGame_Example_Stat_count_is_present+0xd0>
    2844:	bl	0 <__assert_fail>
    2848:	mov	r3, #2
    284c:	strh	r3, [fp, #-8]
    2850:	ldr	r0, [fp, #-16]
    2854:	bl	73c <__flatbuffers_soffset_read_from_pe>
    2858:	mov	r3, r0
    285c:	rsb	r3, r3, #0
    2860:	ldr	r2, [fp, #-16]
    2864:	add	r3, r2, r3
    2868:	str	r3, [fp, #-12]
    286c:	ldr	r0, [fp, #-12]
    2870:	bl	794 <__flatbuffers_voffset_read_from_pe>
    2874:	mov	r3, r0
    2878:	mov	r2, r3
    287c:	ldrh	r3, [fp, #-8]
    2880:	add	r3, r3, #3
    2884:	lsl	r3, r3, #1
    2888:	cmp	r2, r3
    288c:	bcc	28b4 <MyGame_Example_Stat_count_is_present+0xa4>
    2890:	ldrh	r3, [fp, #-8]
    2894:	add	r3, r3, #2
    2898:	lsl	r3, r3, #1
    289c:	ldr	r2, [fp, #-12]
    28a0:	add	r3, r2, r3
    28a4:	mov	r0, r3
    28a8:	bl	794 <__flatbuffers_voffset_read_from_pe>
    28ac:	mov	r3, r0
    28b0:	strh	r3, [fp, #-6]
    28b4:	ldrh	r3, [fp, #-6]
    28b8:	cmp	r3, #0
    28bc:	movne	r3, #1
    28c0:	moveq	r3, #0
    28c4:	uxtb	r3, r3
    28c8:	mov	r0, r3
    28cc:	sub	sp, fp, #4
    28d0:	pop	{fp, pc}
    28d4:	.word	0x0000388c
    28d8:	.word	0x00000261
    28dc:	.word	0x000000c8
    28e0:	.word	0x0000015c

000028e4 <MyGame_Example_Alt_manyany_type>:
    28e4:	push	{fp, lr}
    28e8:	add	fp, sp, #4
    28ec:	sub	sp, sp, #24
    28f0:	str	r0, [fp, #-24]	; 0xffffffe8
    28f4:	mov	r3, #0
    28f8:	strh	r3, [fp, #-6]
    28fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2900:	cmp	r3, #0
    2904:	bne	291c <MyGame_Example_Alt_manyany_type+0x38>
    2908:	ldr	r3, [pc, #192]	; 29d0 <MyGame_Example_Alt_manyany_type+0xec>
    290c:	ldr	r2, [pc, #192]	; 29d4 <MyGame_Example_Alt_manyany_type+0xf0>
    2910:	ldr	r1, [pc, #192]	; 29d8 <MyGame_Example_Alt_manyany_type+0xf4>
    2914:	ldr	r0, [pc, #192]	; 29dc <MyGame_Example_Alt_manyany_type+0xf8>
    2918:	bl	0 <__assert_fail>
    291c:	mov	r3, #2
    2920:	strh	r3, [fp, #-8]
    2924:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2928:	bl	73c <__flatbuffers_soffset_read_from_pe>
    292c:	mov	r3, r0
    2930:	rsb	r3, r3, #0
    2934:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2938:	add	r3, r2, r3
    293c:	str	r3, [fp, #-12]
    2940:	ldr	r0, [fp, #-12]
    2944:	bl	794 <__flatbuffers_voffset_read_from_pe>
    2948:	mov	r3, r0
    294c:	mov	r2, r3
    2950:	ldrh	r3, [fp, #-8]
    2954:	add	r3, r3, #3
    2958:	lsl	r3, r3, #1
    295c:	cmp	r2, r3
    2960:	bcc	2988 <MyGame_Example_Alt_manyany_type+0xa4>
    2964:	ldrh	r3, [fp, #-8]
    2968:	add	r3, r3, #2
    296c:	lsl	r3, r3, #1
    2970:	ldr	r2, [fp, #-12]
    2974:	add	r3, r2, r3
    2978:	mov	r0, r3
    297c:	bl	794 <__flatbuffers_voffset_read_from_pe>
    2980:	mov	r3, r0
    2984:	strh	r3, [fp, #-6]
    2988:	ldrh	r3, [fp, #-6]
    298c:	cmp	r3, #0
    2990:	beq	29c0 <MyGame_Example_Alt_manyany_type+0xdc>
    2994:	ldrh	r3, [fp, #-6]
    2998:	ldr	r2, [fp, #-24]	; 0xffffffe8
    299c:	add	r3, r2, r3
    29a0:	str	r3, [fp, #-16]
    29a4:	ldr	r0, [fp, #-16]
    29a8:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    29ac:	mov	r3, r0
    29b0:	add	r3, r3, #4
    29b4:	ldr	r2, [fp, #-16]
    29b8:	add	r3, r2, r3
    29bc:	b	29c4 <MyGame_Example_Alt_manyany_type+0xe0>
    29c0:	mov	r3, #0
    29c4:	mov	r0, r3
    29c8:	sub	sp, fp, #4
    29cc:	pop	{fp, pc}
    29d0:	.word	0x000039d0
    29d4:	.word	0x0000026d
    29d8:	.word	0x000000c8
    29dc:	.word	0x0000015c

000029e0 <MyGame_Example_Alt_manyany>:
    29e0:	push	{fp, lr}
    29e4:	add	fp, sp, #4
    29e8:	sub	sp, sp, #24
    29ec:	str	r0, [fp, #-24]	; 0xffffffe8
    29f0:	mov	r3, #0
    29f4:	strh	r3, [fp, #-6]
    29f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    29fc:	cmp	r3, #0
    2a00:	bne	2a18 <MyGame_Example_Alt_manyany+0x38>
    2a04:	ldr	r3, [pc, #192]	; 2acc <MyGame_Example_Alt_manyany+0xec>
    2a08:	ldr	r2, [pc, #192]	; 2ad0 <MyGame_Example_Alt_manyany+0xf0>
    2a0c:	ldr	r1, [pc, #192]	; 2ad4 <MyGame_Example_Alt_manyany+0xf4>
    2a10:	ldr	r0, [pc, #192]	; 2ad8 <MyGame_Example_Alt_manyany+0xf8>
    2a14:	bl	0 <__assert_fail>
    2a18:	mov	r3, #3
    2a1c:	strh	r3, [fp, #-8]
    2a20:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2a24:	bl	73c <__flatbuffers_soffset_read_from_pe>
    2a28:	mov	r3, r0
    2a2c:	rsb	r3, r3, #0
    2a30:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2a34:	add	r3, r2, r3
    2a38:	str	r3, [fp, #-12]
    2a3c:	ldr	r0, [fp, #-12]
    2a40:	bl	794 <__flatbuffers_voffset_read_from_pe>
    2a44:	mov	r3, r0
    2a48:	mov	r2, r3
    2a4c:	ldrh	r3, [fp, #-8]
    2a50:	add	r3, r3, #3
    2a54:	lsl	r3, r3, #1
    2a58:	cmp	r2, r3
    2a5c:	bcc	2a84 <MyGame_Example_Alt_manyany+0xa4>
    2a60:	ldrh	r3, [fp, #-8]
    2a64:	add	r3, r3, #2
    2a68:	lsl	r3, r3, #1
    2a6c:	ldr	r2, [fp, #-12]
    2a70:	add	r3, r2, r3
    2a74:	mov	r0, r3
    2a78:	bl	794 <__flatbuffers_voffset_read_from_pe>
    2a7c:	mov	r3, r0
    2a80:	strh	r3, [fp, #-6]
    2a84:	ldrh	r3, [fp, #-6]
    2a88:	cmp	r3, #0
    2a8c:	beq	2abc <MyGame_Example_Alt_manyany+0xdc>
    2a90:	ldrh	r3, [fp, #-6]
    2a94:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2a98:	add	r3, r2, r3
    2a9c:	str	r3, [fp, #-16]
    2aa0:	ldr	r0, [fp, #-16]
    2aa4:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    2aa8:	mov	r3, r0
    2aac:	add	r3, r3, #4
    2ab0:	ldr	r2, [fp, #-16]
    2ab4:	add	r3, r2, r3
    2ab8:	b	2ac0 <MyGame_Example_Alt_manyany+0xe0>
    2abc:	mov	r3, #0
    2ac0:	mov	r0, r3
    2ac4:	sub	sp, fp, #4
    2ac8:	pop	{fp, pc}
    2acc:	.word	0x000039f0
    2ad0:	.word	0x0000026d
    2ad4:	.word	0x000000c8
    2ad8:	.word	0x0000015c

00002adc <MyGame_Example_Alt_manyany_is_present>:
    2adc:	push	{fp, lr}
    2ae0:	add	fp, sp, #4
    2ae4:	sub	sp, sp, #16
    2ae8:	str	r0, [fp, #-16]
    2aec:	mov	r3, #0
    2af0:	strh	r3, [fp, #-6]
    2af4:	ldr	r3, [fp, #-16]
    2af8:	cmp	r3, #0
    2afc:	bne	2b14 <MyGame_Example_Alt_manyany_is_present+0x38>
    2b00:	ldr	r3, [pc, #152]	; 2ba0 <MyGame_Example_Alt_manyany_is_present+0xc4>
    2b04:	ldr	r2, [pc, #152]	; 2ba4 <MyGame_Example_Alt_manyany_is_present+0xc8>
    2b08:	ldr	r1, [pc, #152]	; 2ba8 <MyGame_Example_Alt_manyany_is_present+0xcc>
    2b0c:	ldr	r0, [pc, #152]	; 2bac <MyGame_Example_Alt_manyany_is_present+0xd0>
    2b10:	bl	0 <__assert_fail>
    2b14:	mov	r3, #3
    2b18:	strh	r3, [fp, #-8]
    2b1c:	ldr	r0, [fp, #-16]
    2b20:	bl	73c <__flatbuffers_soffset_read_from_pe>
    2b24:	mov	r3, r0
    2b28:	rsb	r3, r3, #0
    2b2c:	ldr	r2, [fp, #-16]
    2b30:	add	r3, r2, r3
    2b34:	str	r3, [fp, #-12]
    2b38:	ldr	r0, [fp, #-12]
    2b3c:	bl	794 <__flatbuffers_voffset_read_from_pe>
    2b40:	mov	r3, r0
    2b44:	mov	r2, r3
    2b48:	ldrh	r3, [fp, #-8]
    2b4c:	add	r3, r3, #3
    2b50:	lsl	r3, r3, #1
    2b54:	cmp	r2, r3
    2b58:	bcc	2b80 <MyGame_Example_Alt_manyany_is_present+0xa4>
    2b5c:	ldrh	r3, [fp, #-8]
    2b60:	add	r3, r3, #2
    2b64:	lsl	r3, r3, #1
    2b68:	ldr	r2, [fp, #-12]
    2b6c:	add	r3, r2, r3
    2b70:	mov	r0, r3
    2b74:	bl	794 <__flatbuffers_voffset_read_from_pe>
    2b78:	mov	r3, r0
    2b7c:	strh	r3, [fp, #-6]
    2b80:	ldrh	r3, [fp, #-6]
    2b84:	cmp	r3, #0
    2b88:	movne	r3, #1
    2b8c:	moveq	r3, #0
    2b90:	uxtb	r3, r3
    2b94:	mov	r0, r3
    2b98:	sub	sp, fp, #4
    2b9c:	pop	{fp, pc}
    2ba0:	.word	0x000039a8
    2ba4:	.word	0x0000026d
    2ba8:	.word	0x000000c8
    2bac:	.word	0x0000015c

00002bb0 <MyGame_Example_Alt_manyany_union>:
    2bb0:	push	{r4, fp, lr}
    2bb4:	add	fp, sp, #8
    2bb8:	sub	sp, sp, #20
    2bbc:	str	r0, [fp, #-24]	; 0xffffffe8
    2bc0:	str	r1, [fp, #-28]	; 0xffffffe4
    2bc4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2bc8:	bl	28e4 <MyGame_Example_Alt_manyany_type>
    2bcc:	mov	r3, r0
    2bd0:	str	r3, [fp, #-20]	; 0xffffffec
    2bd4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2bd8:	bl	29e0 <MyGame_Example_Alt_manyany>
    2bdc:	mov	r3, r0
    2be0:	str	r3, [fp, #-16]
    2be4:	ldr	r3, [fp, #-20]	; 0xffffffec
    2be8:	mov	r0, r3
    2bec:	bl	9b8 <flatbuffers_vec_len>
    2bf0:	mov	r4, r0
    2bf4:	ldr	r3, [fp, #-16]
    2bf8:	mov	r0, r3
    2bfc:	bl	9b8 <flatbuffers_vec_len>
    2c00:	mov	r3, r0
    2c04:	cmp	r4, r3
    2c08:	beq	2c20 <MyGame_Example_Alt_manyany_union+0x70>
    2c0c:	ldr	r3, [pc, #44]	; 2c40 <MyGame_Example_Alt_manyany_union+0x90>
    2c10:	ldr	r2, [pc, #44]	; 2c44 <MyGame_Example_Alt_manyany_union+0x94>
    2c14:	ldr	r1, [pc, #44]	; 2c48 <MyGame_Example_Alt_manyany_union+0x98>
    2c18:	ldr	r0, [pc, #44]	; 2c4c <MyGame_Example_Alt_manyany_union+0x9c>
    2c1c:	bl	0 <__assert_fail>
    2c20:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2c24:	mov	r2, r3
    2c28:	sub	r3, fp, #20
    2c2c:	ldm	r3, {r0, r1}
    2c30:	stm	r2, {r0, r1}
    2c34:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2c38:	sub	sp, fp, #8
    2c3c:	pop	{r4, fp, pc}
    2c40:	.word	0x00003a58
    2c44:	.word	0x0000026d
    2c48:	.word	0x000000c8
    2c4c:	.word	0x00000184

00002c50 <MyGame_Example_Monster_vec_len>:
    2c50:	push	{fp, lr}
    2c54:	add	fp, sp, #4
    2c58:	sub	sp, sp, #8
    2c5c:	str	r0, [fp, #-8]
    2c60:	ldr	r3, [fp, #-8]
    2c64:	cmp	r3, #0
    2c68:	beq	2c84 <MyGame_Example_Monster_vec_len+0x34>
    2c6c:	ldr	r3, [fp, #-8]
    2c70:	sub	r3, r3, #4
    2c74:	mov	r0, r3
    2c78:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    2c7c:	mov	r3, r0
    2c80:	b	2c88 <MyGame_Example_Monster_vec_len+0x38>
    2c84:	mov	r3, #0
    2c88:	mov	r0, r3
    2c8c:	sub	sp, fp, #4
    2c90:	pop	{fp, pc}

00002c94 <MyGame_Example_Monster_vec_at>:
    2c94:	push	{fp, lr}
    2c98:	add	fp, sp, #4
    2c9c:	sub	sp, sp, #16
    2ca0:	str	r0, [fp, #-16]
    2ca4:	str	r1, [fp, #-20]	; 0xffffffec
    2ca8:	ldr	r3, [fp, #-20]	; 0xffffffec
    2cac:	lsl	r3, r3, #2
    2cb0:	ldr	r2, [fp, #-16]
    2cb4:	add	r3, r2, r3
    2cb8:	str	r3, [fp, #-8]
    2cbc:	ldr	r0, [fp, #-16]
    2cc0:	bl	9b8 <flatbuffers_vec_len>
    2cc4:	mov	r2, r0
    2cc8:	ldr	r3, [fp, #-20]	; 0xffffffec
    2ccc:	cmp	r2, r3
    2cd0:	bhi	2ce8 <MyGame_Example_Monster_vec_at+0x54>
    2cd4:	ldr	r3, [pc, #44]	; 2d08 <MyGame_Example_Monster_vec_at+0x74>
    2cd8:	ldr	r2, [pc, #44]	; 2d0c <MyGame_Example_Monster_vec_at+0x78>
    2cdc:	ldr	r1, [pc, #44]	; 2d10 <MyGame_Example_Monster_vec_at+0x7c>
    2ce0:	ldr	r0, [pc, #44]	; 2d14 <MyGame_Example_Monster_vec_at+0x80>
    2ce4:	bl	0 <__assert_fail>
    2ce8:	ldr	r0, [fp, #-8]
    2cec:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    2cf0:	mov	r2, r0
    2cf4:	ldr	r3, [fp, #-8]
    2cf8:	add	r3, r3, r2
    2cfc:	mov	r0, r3
    2d00:	sub	sp, fp, #4
    2d04:	pop	{fp, pc}
    2d08:	.word	0x00003758
    2d0c:	.word	0x000002b5
    2d10:	.word	0x000000c8
    2d14:	.word	0x00000078

00002d18 <MyGame_Example_Monster_as_root_with_identifier>:
    2d18:	push	{fp, lr}
    2d1c:	add	fp, sp, #4
    2d20:	sub	sp, sp, #8
    2d24:	str	r0, [fp, #-8]
    2d28:	str	r1, [fp, #-12]
    2d2c:	ldr	r3, [fp, #-8]
    2d30:	cmp	r3, #0
    2d34:	beq	2d68 <MyGame_Example_Monster_as_root_with_identifier+0x50>
    2d38:	ldr	r1, [fp, #-12]
    2d3c:	ldr	r0, [fp, #-8]
    2d40:	bl	19fc <flatbuffers_has_identifier>
    2d44:	mov	r3, r0
    2d48:	cmp	r3, #0
    2d4c:	beq	2d68 <MyGame_Example_Monster_as_root_with_identifier+0x50>
    2d50:	ldr	r0, [fp, #-8]
    2d54:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    2d58:	mov	r2, r0
    2d5c:	ldr	r3, [fp, #-8]
    2d60:	add	r3, r3, r2
    2d64:	b	2d6c <MyGame_Example_Monster_as_root_with_identifier+0x54>
    2d68:	mov	r3, #0
    2d6c:	mov	r0, r3
    2d70:	sub	sp, fp, #4
    2d74:	pop	{fp, pc}

00002d78 <MyGame_Example_Monster_as_root>:
    2d78:	push	{fp, lr}
    2d7c:	add	fp, sp, #4
    2d80:	sub	sp, sp, #16
    2d84:	str	r0, [fp, #-16]
    2d88:	ldr	r3, [pc, #76]	; 2ddc <MyGame_Example_Monster_as_root+0x64>
    2d8c:	str	r3, [fp, #-8]
    2d90:	ldr	r3, [fp, #-16]
    2d94:	cmp	r3, #0
    2d98:	beq	2dcc <MyGame_Example_Monster_as_root+0x54>
    2d9c:	ldr	r1, [fp, #-8]
    2da0:	ldr	r0, [fp, #-16]
    2da4:	bl	19fc <flatbuffers_has_identifier>
    2da8:	mov	r3, r0
    2dac:	cmp	r3, #0
    2db0:	beq	2dcc <MyGame_Example_Monster_as_root+0x54>
    2db4:	ldr	r0, [fp, #-16]
    2db8:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    2dbc:	mov	r2, r0
    2dc0:	ldr	r3, [fp, #-16]
    2dc4:	add	r3, r3, r2
    2dc8:	b	2dd0 <MyGame_Example_Monster_as_root+0x58>
    2dcc:	mov	r3, #0
    2dd0:	mov	r0, r3
    2dd4:	sub	sp, fp, #4
    2dd8:	pop	{fp, pc}
    2ddc:	.word	0x00000134

00002de0 <MyGame_Example_Monster_pos>:
    2de0:	push	{fp, lr}
    2de4:	add	fp, sp, #4
    2de8:	sub	sp, sp, #16
    2dec:	str	r0, [fp, #-16]
    2df0:	mov	r3, #0
    2df4:	strh	r3, [fp, #-6]
    2df8:	ldr	r3, [fp, #-16]
    2dfc:	cmp	r3, #0
    2e00:	bne	2e18 <MyGame_Example_Monster_pos+0x38>
    2e04:	ldr	r3, [pc, #164]	; 2eb0 <MyGame_Example_Monster_pos+0xd0>
    2e08:	mov	r2, #696	; 0x2b8
    2e0c:	ldr	r1, [pc, #160]	; 2eb4 <MyGame_Example_Monster_pos+0xd4>
    2e10:	ldr	r0, [pc, #160]	; 2eb8 <MyGame_Example_Monster_pos+0xd8>
    2e14:	bl	0 <__assert_fail>
    2e18:	mov	r3, #0
    2e1c:	strh	r3, [fp, #-8]
    2e20:	ldr	r0, [fp, #-16]
    2e24:	bl	73c <__flatbuffers_soffset_read_from_pe>
    2e28:	mov	r3, r0
    2e2c:	rsb	r3, r3, #0
    2e30:	ldr	r2, [fp, #-16]
    2e34:	add	r3, r2, r3
    2e38:	str	r3, [fp, #-12]
    2e3c:	ldr	r0, [fp, #-12]
    2e40:	bl	794 <__flatbuffers_voffset_read_from_pe>
    2e44:	mov	r3, r0
    2e48:	mov	r2, r3
    2e4c:	ldrh	r3, [fp, #-8]
    2e50:	add	r3, r3, #3
    2e54:	lsl	r3, r3, #1
    2e58:	cmp	r2, r3
    2e5c:	bcc	2e84 <MyGame_Example_Monster_pos+0xa4>
    2e60:	ldrh	r3, [fp, #-8]
    2e64:	add	r3, r3, #2
    2e68:	lsl	r3, r3, #1
    2e6c:	ldr	r2, [fp, #-12]
    2e70:	add	r3, r2, r3
    2e74:	mov	r0, r3
    2e78:	bl	794 <__flatbuffers_voffset_read_from_pe>
    2e7c:	mov	r3, r0
    2e80:	strh	r3, [fp, #-6]
    2e84:	ldrh	r3, [fp, #-6]
    2e88:	cmp	r3, #0
    2e8c:	beq	2ea0 <MyGame_Example_Monster_pos+0xc0>
    2e90:	ldrh	r3, [fp, #-6]
    2e94:	ldr	r2, [fp, #-16]
    2e98:	add	r3, r2, r3
    2e9c:	b	2ea4 <MyGame_Example_Monster_pos+0xc4>
    2ea0:	mov	r3, #0
    2ea4:	mov	r0, r3
    2ea8:	sub	sp, fp, #4
    2eac:	pop	{fp, pc}
    2eb0:	.word	0x0000337c
    2eb4:	.word	0x000000c8
    2eb8:	.word	0x0000015c

00002ebc <MyGame_Example_Monster_pos_is_present>:
    2ebc:	push	{fp, lr}
    2ec0:	add	fp, sp, #4
    2ec4:	sub	sp, sp, #16
    2ec8:	str	r0, [fp, #-16]
    2ecc:	mov	r3, #0
    2ed0:	strh	r3, [fp, #-6]
    2ed4:	ldr	r3, [fp, #-16]
    2ed8:	cmp	r3, #0
    2edc:	bne	2ef4 <MyGame_Example_Monster_pos_is_present+0x38>
    2ee0:	ldr	r3, [pc, #152]	; 2f80 <MyGame_Example_Monster_pos_is_present+0xc4>
    2ee4:	mov	r2, #696	; 0x2b8
    2ee8:	ldr	r1, [pc, #148]	; 2f84 <MyGame_Example_Monster_pos_is_present+0xc8>
    2eec:	ldr	r0, [pc, #148]	; 2f88 <MyGame_Example_Monster_pos_is_present+0xcc>
    2ef0:	bl	0 <__assert_fail>
    2ef4:	mov	r3, #0
    2ef8:	strh	r3, [fp, #-8]
    2efc:	ldr	r0, [fp, #-16]
    2f00:	bl	73c <__flatbuffers_soffset_read_from_pe>
    2f04:	mov	r3, r0
    2f08:	rsb	r3, r3, #0
    2f0c:	ldr	r2, [fp, #-16]
    2f10:	add	r3, r2, r3
    2f14:	str	r3, [fp, #-12]
    2f18:	ldr	r0, [fp, #-12]
    2f1c:	bl	794 <__flatbuffers_voffset_read_from_pe>
    2f20:	mov	r3, r0
    2f24:	mov	r2, r3
    2f28:	ldrh	r3, [fp, #-8]
    2f2c:	add	r3, r3, #3
    2f30:	lsl	r3, r3, #1
    2f34:	cmp	r2, r3
    2f38:	bcc	2f60 <MyGame_Example_Monster_pos_is_present+0xa4>
    2f3c:	ldrh	r3, [fp, #-8]
    2f40:	add	r3, r3, #2
    2f44:	lsl	r3, r3, #1
    2f48:	ldr	r2, [fp, #-12]
    2f4c:	add	r3, r2, r3
    2f50:	mov	r0, r3
    2f54:	bl	794 <__flatbuffers_voffset_read_from_pe>
    2f58:	mov	r3, r0
    2f5c:	strh	r3, [fp, #-6]
    2f60:	ldrh	r3, [fp, #-6]
    2f64:	cmp	r3, #0
    2f68:	movne	r3, #1
    2f6c:	moveq	r3, #0
    2f70:	uxtb	r3, r3
    2f74:	mov	r0, r3
    2f78:	sub	sp, fp, #4
    2f7c:	pop	{fp, pc}
    2f80:	.word	0x00003354
    2f84:	.word	0x000000c8
    2f88:	.word	0x0000015c

00002f8c <MyGame_Example_Monster_hp>:
    2f8c:	push	{fp, lr}
    2f90:	add	fp, sp, #4
    2f94:	sub	sp, sp, #16
    2f98:	str	r0, [fp, #-16]
    2f9c:	mov	r3, #0
    2fa0:	strh	r3, [fp, #-6]
    2fa4:	ldr	r3, [fp, #-16]
    2fa8:	cmp	r3, #0
    2fac:	bne	2fc4 <MyGame_Example_Monster_hp+0x38>
    2fb0:	ldr	r3, [pc, #176]	; 3068 <MyGame_Example_Monster_hp+0xdc>
    2fb4:	ldr	r2, [pc, #176]	; 306c <MyGame_Example_Monster_hp+0xe0>
    2fb8:	ldr	r1, [pc, #176]	; 3070 <MyGame_Example_Monster_hp+0xe4>
    2fbc:	ldr	r0, [pc, #176]	; 3074 <MyGame_Example_Monster_hp+0xe8>
    2fc0:	bl	0 <__assert_fail>
    2fc4:	mov	r3, #2
    2fc8:	strh	r3, [fp, #-8]
    2fcc:	ldr	r0, [fp, #-16]
    2fd0:	bl	73c <__flatbuffers_soffset_read_from_pe>
    2fd4:	mov	r3, r0
    2fd8:	rsb	r3, r3, #0
    2fdc:	ldr	r2, [fp, #-16]
    2fe0:	add	r3, r2, r3
    2fe4:	str	r3, [fp, #-12]
    2fe8:	ldr	r0, [fp, #-12]
    2fec:	bl	794 <__flatbuffers_voffset_read_from_pe>
    2ff0:	mov	r3, r0
    2ff4:	mov	r2, r3
    2ff8:	ldrh	r3, [fp, #-8]
    2ffc:	add	r3, r3, #3
    3000:	lsl	r3, r3, #1
    3004:	cmp	r2, r3
    3008:	bcc	3030 <MyGame_Example_Monster_hp+0xa4>
    300c:	ldrh	r3, [fp, #-8]
    3010:	add	r3, r3, #2
    3014:	lsl	r3, r3, #1
    3018:	ldr	r2, [fp, #-12]
    301c:	add	r3, r2, r3
    3020:	mov	r0, r3
    3024:	bl	794 <__flatbuffers_voffset_read_from_pe>
    3028:	mov	r3, r0
    302c:	strh	r3, [fp, #-6]
    3030:	ldrh	r3, [fp, #-6]
    3034:	cmp	r3, #0
    3038:	beq	3058 <MyGame_Example_Monster_hp+0xcc>
    303c:	ldrh	r3, [fp, #-6]
    3040:	ldr	r2, [fp, #-16]
    3044:	add	r3, r2, r3
    3048:	mov	r0, r3
    304c:	bl	2d4 <flatbuffers_int16_read_from_pe>
    3050:	mov	r3, r0
    3054:	b	305c <MyGame_Example_Monster_hp+0xd0>
    3058:	mov	r3, #100	; 0x64
    305c:	mov	r0, r3
    3060:	sub	sp, fp, #4
    3064:	pop	{fp, pc}
    3068:	.word	0x00003310
    306c:	.word	0x000002b9
    3070:	.word	0x000000c8
    3074:	.word	0x0000015c

00003078 <MyGame_Example_Monster_hp_is_present>:
    3078:	push	{fp, lr}
    307c:	add	fp, sp, #4
    3080:	sub	sp, sp, #16
    3084:	str	r0, [fp, #-16]
    3088:	mov	r3, #0
    308c:	strh	r3, [fp, #-6]
    3090:	ldr	r3, [fp, #-16]
    3094:	cmp	r3, #0
    3098:	bne	30b0 <MyGame_Example_Monster_hp_is_present+0x38>
    309c:	ldr	r3, [pc, #152]	; 313c <MyGame_Example_Monster_hp_is_present+0xc4>
    30a0:	ldr	r2, [pc, #152]	; 3140 <MyGame_Example_Monster_hp_is_present+0xc8>
    30a4:	ldr	r1, [pc, #152]	; 3144 <MyGame_Example_Monster_hp_is_present+0xcc>
    30a8:	ldr	r0, [pc, #152]	; 3148 <MyGame_Example_Monster_hp_is_present+0xd0>
    30ac:	bl	0 <__assert_fail>
    30b0:	mov	r3, #2
    30b4:	strh	r3, [fp, #-8]
    30b8:	ldr	r0, [fp, #-16]
    30bc:	bl	73c <__flatbuffers_soffset_read_from_pe>
    30c0:	mov	r3, r0
    30c4:	rsb	r3, r3, #0
    30c8:	ldr	r2, [fp, #-16]
    30cc:	add	r3, r2, r3
    30d0:	str	r3, [fp, #-12]
    30d4:	ldr	r0, [fp, #-12]
    30d8:	bl	794 <__flatbuffers_voffset_read_from_pe>
    30dc:	mov	r3, r0
    30e0:	mov	r2, r3
    30e4:	ldrh	r3, [fp, #-8]
    30e8:	add	r3, r3, #3
    30ec:	lsl	r3, r3, #1
    30f0:	cmp	r2, r3
    30f4:	bcc	311c <MyGame_Example_Monster_hp_is_present+0xa4>
    30f8:	ldrh	r3, [fp, #-8]
    30fc:	add	r3, r3, #2
    3100:	lsl	r3, r3, #1
    3104:	ldr	r2, [fp, #-12]
    3108:	add	r3, r2, r3
    310c:	mov	r0, r3
    3110:	bl	794 <__flatbuffers_voffset_read_from_pe>
    3114:	mov	r3, r0
    3118:	strh	r3, [fp, #-6]
    311c:	ldrh	r3, [fp, #-6]
    3120:	cmp	r3, #0
    3124:	movne	r3, #1
    3128:	moveq	r3, #0
    312c:	uxtb	r3, r3
    3130:	mov	r0, r3
    3134:	sub	sp, fp, #4
    3138:	pop	{fp, pc}
    313c:	.word	0x0000332c
    3140:	.word	0x000002b9
    3144:	.word	0x000000c8
    3148:	.word	0x0000015c

0000314c <MyGame_Example_Monster_vec_scan_by_hp>:
    314c:	push	{fp, lr}
    3150:	add	fp, sp, #4
    3154:	sub	sp, sp, #16
    3158:	str	r0, [fp, #-16]
    315c:	mov	r3, r1
    3160:	strh	r3, [fp, #-18]	; 0xffffffee
    3164:	mov	r3, #0
    3168:	str	r3, [fp, #-8]
    316c:	b	31c4 <MyGame_Example_Monster_vec_scan_by_hp+0x78>
    3170:	ldr	r1, [fp, #-8]
    3174:	ldr	r0, [fp, #-16]
    3178:	bl	2c94 <MyGame_Example_Monster_vec_at>
    317c:	mov	r3, r0
    3180:	mov	r0, r3
    3184:	bl	2f8c <MyGame_Example_Monster_hp>
    3188:	mov	r3, r0
    318c:	strh	r3, [fp, #-10]
    3190:	ldrsh	r2, [fp, #-10]
    3194:	ldrsh	r3, [fp, #-18]	; 0xffffffee
    3198:	cmp	r2, r3
    319c:	blt	31b8 <MyGame_Example_Monster_vec_scan_by_hp+0x6c>
    31a0:	ldrsh	r2, [fp, #-10]
    31a4:	ldrsh	r3, [fp, #-18]	; 0xffffffee
    31a8:	cmp	r2, r3
    31ac:	bgt	31b8 <MyGame_Example_Monster_vec_scan_by_hp+0x6c>
    31b0:	ldr	r3, [fp, #-8]
    31b4:	b	31e4 <MyGame_Example_Monster_vec_scan_by_hp+0x98>
    31b8:	ldr	r3, [fp, #-8]
    31bc:	add	r3, r3, #1
    31c0:	str	r3, [fp, #-8]
    31c4:	ldr	r0, [fp, #-16]
    31c8:	bl	2c50 <MyGame_Example_Monster_vec_len>
    31cc:	mov	r2, r0
    31d0:	ldr	r3, [fp, #-8]
    31d4:	cmp	r2, r3
    31d8:	bhi	3170 <MyGame_Example_Monster_vec_scan_by_hp+0x24>
    31dc:	ldr	r3, [pc, #12]	; 31f0 <MyGame_Example_Monster_vec_scan_by_hp+0xa4>
    31e0:	ldr	r3, [r3]
    31e4:	mov	r0, r3
    31e8:	sub	sp, fp, #4
    31ec:	pop	{fp, pc}
    31f0:	.word	0x00000000

000031f4 <MyGame_Example_Monster_vec_scan_ex_by_hp>:
    31f4:	push	{fp, lr}
    31f8:	add	fp, sp, #4
    31fc:	sub	sp, sp, #24
    3200:	str	r0, [fp, #-16]
    3204:	str	r1, [fp, #-20]	; 0xffffffec
    3208:	str	r2, [fp, #-24]	; 0xffffffe8
    320c:	strh	r3, [fp, #-26]	; 0xffffffe6
    3210:	ldr	r3, [fp, #-20]	; 0xffffffec
    3214:	str	r3, [fp, #-8]
    3218:	b	3270 <MyGame_Example_Monster_vec_scan_ex_by_hp+0x7c>
    321c:	ldr	r1, [fp, #-8]
    3220:	ldr	r0, [fp, #-16]
    3224:	bl	2c94 <MyGame_Example_Monster_vec_at>
    3228:	mov	r3, r0
    322c:	mov	r0, r3
    3230:	bl	2f8c <MyGame_Example_Monster_hp>
    3234:	mov	r3, r0
    3238:	strh	r3, [fp, #-10]
    323c:	ldrsh	r2, [fp, #-10]
    3240:	ldrsh	r3, [fp, #-26]	; 0xffffffe6
    3244:	cmp	r2, r3
    3248:	blt	3264 <MyGame_Example_Monster_vec_scan_ex_by_hp+0x70>
    324c:	ldrsh	r2, [fp, #-10]
    3250:	ldrsh	r3, [fp, #-26]	; 0xffffffe6
    3254:	cmp	r2, r3
    3258:	bgt	3264 <MyGame_Example_Monster_vec_scan_ex_by_hp+0x70>
    325c:	ldr	r3, [fp, #-8]
    3260:	b	32b0 <MyGame_Example_Monster_vec_scan_ex_by_hp+0xbc>
    3264:	ldr	r3, [fp, #-8]
    3268:	add	r3, r3, #1
    326c:	str	r3, [fp, #-8]
    3270:	ldr	r0, [fp, #-16]
    3274:	bl	2c50 <MyGame_Example_Monster_vec_len>
    3278:	mov	r2, r0
    327c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3280:	cmp	r2, r3
    3284:	bhi	3298 <MyGame_Example_Monster_vec_scan_ex_by_hp+0xa4>
    3288:	ldr	r0, [fp, #-16]
    328c:	bl	2c50 <MyGame_Example_Monster_vec_len>
    3290:	mov	r3, r0
    3294:	b	329c <MyGame_Example_Monster_vec_scan_ex_by_hp+0xa8>
    3298:	ldr	r3, [fp, #-24]	; 0xffffffe8
    329c:	ldr	r2, [fp, #-8]
    32a0:	cmp	r3, r2
    32a4:	bhi	321c <MyGame_Example_Monster_vec_scan_ex_by_hp+0x28>
    32a8:	ldr	r3, [pc, #12]	; 32bc <MyGame_Example_Monster_vec_scan_ex_by_hp+0xc8>
    32ac:	ldr	r3, [r3]
    32b0:	mov	r0, r3
    32b4:	sub	sp, fp, #4
    32b8:	pop	{fp, pc}
    32bc:	.word	0x00000000

000032c0 <MyGame_Example_Monster_vec_rscan_by_hp>:
    32c0:	push	{fp, lr}
    32c4:	add	fp, sp, #4
    32c8:	sub	sp, sp, #16
    32cc:	str	r0, [fp, #-16]
    32d0:	mov	r3, r1
    32d4:	strh	r3, [fp, #-18]	; 0xffffffee
    32d8:	ldr	r0, [fp, #-16]
    32dc:	bl	2c50 <MyGame_Example_Monster_vec_len>
    32e0:	str	r0, [fp, #-8]
    32e4:	b	3330 <MyGame_Example_Monster_vec_rscan_by_hp+0x70>
    32e8:	ldr	r1, [fp, #-8]
    32ec:	ldr	r0, [fp, #-16]
    32f0:	bl	2c94 <MyGame_Example_Monster_vec_at>
    32f4:	mov	r3, r0
    32f8:	mov	r0, r3
    32fc:	bl	2f8c <MyGame_Example_Monster_hp>
    3300:	mov	r3, r0
    3304:	strh	r3, [fp, #-10]
    3308:	ldrsh	r2, [fp, #-10]
    330c:	ldrsh	r3, [fp, #-18]	; 0xffffffee
    3310:	cmp	r2, r3
    3314:	blt	3330 <MyGame_Example_Monster_vec_rscan_by_hp+0x70>
    3318:	ldrsh	r2, [fp, #-10]
    331c:	ldrsh	r3, [fp, #-18]	; 0xffffffee
    3320:	cmp	r2, r3
    3324:	bgt	3330 <MyGame_Example_Monster_vec_rscan_by_hp+0x70>
    3328:	ldr	r3, [fp, #-8]
    332c:	b	334c <MyGame_Example_Monster_vec_rscan_by_hp+0x8c>
    3330:	ldr	r3, [fp, #-8]
    3334:	sub	r2, r3, #1
    3338:	str	r2, [fp, #-8]
    333c:	cmp	r3, #0
    3340:	bne	32e8 <MyGame_Example_Monster_vec_rscan_by_hp+0x28>
    3344:	ldr	r3, [pc, #12]	; 3358 <MyGame_Example_Monster_vec_rscan_by_hp+0x98>
    3348:	ldr	r3, [r3]
    334c:	mov	r0, r3
    3350:	sub	sp, fp, #4
    3354:	pop	{fp, pc}
    3358:	.word	0x00000000

0000335c <MyGame_Example_Monster_vec_rscan_ex_by_hp>:
    335c:	push	{fp, lr}
    3360:	add	fp, sp, #4
    3364:	sub	sp, sp, #24
    3368:	str	r0, [fp, #-16]
    336c:	str	r1, [fp, #-20]	; 0xffffffec
    3370:	str	r2, [fp, #-24]	; 0xffffffe8
    3374:	strh	r3, [fp, #-26]	; 0xffffffe6
    3378:	ldr	r0, [fp, #-16]
    337c:	bl	2c50 <MyGame_Example_Monster_vec_len>
    3380:	mov	r2, r0
    3384:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3388:	cmp	r2, r3
    338c:	bhi	33a0 <MyGame_Example_Monster_vec_rscan_ex_by_hp+0x44>
    3390:	ldr	r0, [fp, #-16]
    3394:	bl	2c50 <MyGame_Example_Monster_vec_len>
    3398:	mov	r3, r0
    339c:	b	33a4 <MyGame_Example_Monster_vec_rscan_ex_by_hp+0x48>
    33a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    33a4:	str	r3, [fp, #-8]
    33a8:	b	33f4 <MyGame_Example_Monster_vec_rscan_ex_by_hp+0x98>
    33ac:	ldr	r1, [fp, #-8]
    33b0:	ldr	r0, [fp, #-16]
    33b4:	bl	2c94 <MyGame_Example_Monster_vec_at>
    33b8:	mov	r3, r0
    33bc:	mov	r0, r3
    33c0:	bl	2f8c <MyGame_Example_Monster_hp>
    33c4:	mov	r3, r0
    33c8:	strh	r3, [fp, #-10]
    33cc:	ldrsh	r2, [fp, #-10]
    33d0:	ldrsh	r3, [fp, #-26]	; 0xffffffe6
    33d4:	cmp	r2, r3
    33d8:	blt	33f4 <MyGame_Example_Monster_vec_rscan_ex_by_hp+0x98>
    33dc:	ldrsh	r2, [fp, #-10]
    33e0:	ldrsh	r3, [fp, #-26]	; 0xffffffe6
    33e4:	cmp	r2, r3
    33e8:	bgt	33f4 <MyGame_Example_Monster_vec_rscan_ex_by_hp+0x98>
    33ec:	ldr	r3, [fp, #-8]
    33f0:	b	3414 <MyGame_Example_Monster_vec_rscan_ex_by_hp+0xb8>
    33f4:	ldr	r3, [fp, #-8]
    33f8:	sub	r2, r3, #1
    33fc:	str	r2, [fp, #-8]
    3400:	ldr	r2, [fp, #-20]	; 0xffffffec
    3404:	cmp	r3, r2
    3408:	bhi	33ac <MyGame_Example_Monster_vec_rscan_ex_by_hp+0x50>
    340c:	ldr	r3, [pc, #12]	; 3420 <MyGame_Example_Monster_vec_rscan_ex_by_hp+0xc4>
    3410:	ldr	r3, [r3]
    3414:	mov	r0, r3
    3418:	sub	sp, fp, #4
    341c:	pop	{fp, pc}
    3420:	.word	0x00000000

00003424 <MyGame_Example_Monster_mana>:
    3424:	push	{fp, lr}
    3428:	add	fp, sp, #4
    342c:	sub	sp, sp, #16
    3430:	str	r0, [fp, #-16]
    3434:	mov	r3, #0
    3438:	strh	r3, [fp, #-6]
    343c:	ldr	r3, [fp, #-16]
    3440:	cmp	r3, #0
    3444:	bne	345c <MyGame_Example_Monster_mana+0x38>
    3448:	ldr	r3, [pc, #176]	; 3500 <MyGame_Example_Monster_mana+0xdc>
    344c:	ldr	r2, [pc, #176]	; 3504 <MyGame_Example_Monster_mana+0xe0>
    3450:	ldr	r1, [pc, #176]	; 3508 <MyGame_Example_Monster_mana+0xe4>
    3454:	ldr	r0, [pc, #176]	; 350c <MyGame_Example_Monster_mana+0xe8>
    3458:	bl	0 <__assert_fail>
    345c:	mov	r3, #1
    3460:	strh	r3, [fp, #-8]
    3464:	ldr	r0, [fp, #-16]
    3468:	bl	73c <__flatbuffers_soffset_read_from_pe>
    346c:	mov	r3, r0
    3470:	rsb	r3, r3, #0
    3474:	ldr	r2, [fp, #-16]
    3478:	add	r3, r2, r3
    347c:	str	r3, [fp, #-12]
    3480:	ldr	r0, [fp, #-12]
    3484:	bl	794 <__flatbuffers_voffset_read_from_pe>
    3488:	mov	r3, r0
    348c:	mov	r2, r3
    3490:	ldrh	r3, [fp, #-8]
    3494:	add	r3, r3, #3
    3498:	lsl	r3, r3, #1
    349c:	cmp	r2, r3
    34a0:	bcc	34c8 <MyGame_Example_Monster_mana+0xa4>
    34a4:	ldrh	r3, [fp, #-8]
    34a8:	add	r3, r3, #2
    34ac:	lsl	r3, r3, #1
    34b0:	ldr	r2, [fp, #-12]
    34b4:	add	r3, r2, r3
    34b8:	mov	r0, r3
    34bc:	bl	794 <__flatbuffers_voffset_read_from_pe>
    34c0:	mov	r3, r0
    34c4:	strh	r3, [fp, #-6]
    34c8:	ldrh	r3, [fp, #-6]
    34cc:	cmp	r3, #0
    34d0:	beq	34f0 <MyGame_Example_Monster_mana+0xcc>
    34d4:	ldrh	r3, [fp, #-6]
    34d8:	ldr	r2, [fp, #-16]
    34dc:	add	r3, r2, r3
    34e0:	mov	r0, r3
    34e4:	bl	2d4 <flatbuffers_int16_read_from_pe>
    34e8:	mov	r3, r0
    34ec:	b	34f4 <MyGame_Example_Monster_mana+0xd0>
    34f0:	mov	r3, #150	; 0x96
    34f4:	mov	r0, r3
    34f8:	sub	sp, fp, #4
    34fc:	pop	{fp, pc}
    3500:	.word	0x000035d0
    3504:	.word	0x000002ba
    3508:	.word	0x000000c8
    350c:	.word	0x0000015c

00003510 <MyGame_Example_Monster_mana_is_present>:
    3510:	push	{fp, lr}
    3514:	add	fp, sp, #4
    3518:	sub	sp, sp, #16
    351c:	str	r0, [fp, #-16]
    3520:	mov	r3, #0
    3524:	strh	r3, [fp, #-6]
    3528:	ldr	r3, [fp, #-16]
    352c:	cmp	r3, #0
    3530:	bne	3548 <MyGame_Example_Monster_mana_is_present+0x38>
    3534:	ldr	r3, [pc, #152]	; 35d4 <MyGame_Example_Monster_mana_is_present+0xc4>
    3538:	ldr	r2, [pc, #152]	; 35d8 <MyGame_Example_Monster_mana_is_present+0xc8>
    353c:	ldr	r1, [pc, #152]	; 35dc <MyGame_Example_Monster_mana_is_present+0xcc>
    3540:	ldr	r0, [pc, #152]	; 35e0 <MyGame_Example_Monster_mana_is_present+0xd0>
    3544:	bl	0 <__assert_fail>
    3548:	mov	r3, #1
    354c:	strh	r3, [fp, #-8]
    3550:	ldr	r0, [fp, #-16]
    3554:	bl	73c <__flatbuffers_soffset_read_from_pe>
    3558:	mov	r3, r0
    355c:	rsb	r3, r3, #0
    3560:	ldr	r2, [fp, #-16]
    3564:	add	r3, r2, r3
    3568:	str	r3, [fp, #-12]
    356c:	ldr	r0, [fp, #-12]
    3570:	bl	794 <__flatbuffers_voffset_read_from_pe>
    3574:	mov	r3, r0
    3578:	mov	r2, r3
    357c:	ldrh	r3, [fp, #-8]
    3580:	add	r3, r3, #3
    3584:	lsl	r3, r3, #1
    3588:	cmp	r2, r3
    358c:	bcc	35b4 <MyGame_Example_Monster_mana_is_present+0xa4>
    3590:	ldrh	r3, [fp, #-8]
    3594:	add	r3, r3, #2
    3598:	lsl	r3, r3, #1
    359c:	ldr	r2, [fp, #-12]
    35a0:	add	r3, r2, r3
    35a4:	mov	r0, r3
    35a8:	bl	794 <__flatbuffers_voffset_read_from_pe>
    35ac:	mov	r3, r0
    35b0:	strh	r3, [fp, #-6]
    35b4:	ldrh	r3, [fp, #-6]
    35b8:	cmp	r3, #0
    35bc:	movne	r3, #1
    35c0:	moveq	r3, #0
    35c4:	uxtb	r3, r3
    35c8:	mov	r0, r3
    35cc:	sub	sp, fp, #4
    35d0:	pop	{fp, pc}
    35d4:	.word	0x000035ec
    35d8:	.word	0x000002ba
    35dc:	.word	0x000000c8
    35e0:	.word	0x0000015c

000035e4 <MyGame_Example_Monster_name>:
    35e4:	push	{fp, lr}
    35e8:	add	fp, sp, #4
    35ec:	sub	sp, sp, #24
    35f0:	str	r0, [fp, #-24]	; 0xffffffe8
    35f4:	mov	r3, #0
    35f8:	strh	r3, [fp, #-6]
    35fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3600:	cmp	r3, #0
    3604:	bne	361c <MyGame_Example_Monster_name+0x38>
    3608:	ldr	r3, [pc, #208]	; 36e0 <MyGame_Example_Monster_name+0xfc>
    360c:	ldr	r2, [pc, #208]	; 36e4 <MyGame_Example_Monster_name+0x100>
    3610:	ldr	r1, [pc, #208]	; 36e8 <MyGame_Example_Monster_name+0x104>
    3614:	ldr	r0, [pc, #208]	; 36ec <MyGame_Example_Monster_name+0x108>
    3618:	bl	0 <__assert_fail>
    361c:	mov	r3, #3
    3620:	strh	r3, [fp, #-8]
    3624:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3628:	bl	73c <__flatbuffers_soffset_read_from_pe>
    362c:	mov	r3, r0
    3630:	rsb	r3, r3, #0
    3634:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3638:	add	r3, r2, r3
    363c:	str	r3, [fp, #-12]
    3640:	ldr	r0, [fp, #-12]
    3644:	bl	794 <__flatbuffers_voffset_read_from_pe>
    3648:	mov	r3, r0
    364c:	mov	r2, r3
    3650:	ldrh	r3, [fp, #-8]
    3654:	add	r3, r3, #3
    3658:	lsl	r3, r3, #1
    365c:	cmp	r2, r3
    3660:	bcc	3688 <MyGame_Example_Monster_name+0xa4>
    3664:	ldrh	r3, [fp, #-8]
    3668:	add	r3, r3, #2
    366c:	lsl	r3, r3, #1
    3670:	ldr	r2, [fp, #-12]
    3674:	add	r3, r2, r3
    3678:	mov	r0, r3
    367c:	bl	794 <__flatbuffers_voffset_read_from_pe>
    3680:	mov	r3, r0
    3684:	strh	r3, [fp, #-6]
    3688:	ldrh	r3, [fp, #-6]
    368c:	cmp	r3, #0
    3690:	beq	36c0 <MyGame_Example_Monster_name+0xdc>
    3694:	ldrh	r3, [fp, #-6]
    3698:	ldr	r2, [fp, #-24]	; 0xffffffe8
    369c:	add	r3, r2, r3
    36a0:	str	r3, [fp, #-16]
    36a4:	ldr	r0, [fp, #-16]
    36a8:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    36ac:	mov	r3, r0
    36b0:	add	r3, r3, #4
    36b4:	ldr	r2, [fp, #-16]
    36b8:	add	r3, r2, r3
    36bc:	b	36d4 <MyGame_Example_Monster_name+0xf0>
    36c0:	ldr	r3, [pc, #24]	; 36e0 <MyGame_Example_Monster_name+0xfc>
    36c4:	ldr	r2, [pc, #24]	; 36e4 <MyGame_Example_Monster_name+0x100>
    36c8:	ldr	r1, [pc, #24]	; 36e8 <MyGame_Example_Monster_name+0x104>
    36cc:	ldr	r0, [pc, #28]	; 36f0 <MyGame_Example_Monster_name+0x10c>
    36d0:	bl	0 <__assert_fail>
    36d4:	mov	r0, r3
    36d8:	sub	sp, fp, #4
    36dc:	pop	{fp, pc}
    36e0:	.word	0x000037b8
    36e4:	.word	0x000002bb
    36e8:	.word	0x000000c8
    36ec:	.word	0x0000015c
    36f0:	.word	0x000001ec

000036f4 <MyGame_Example_Monster_vec_scan_by_name>:
    36f4:	push	{fp, lr}
    36f8:	add	fp, sp, #4
    36fc:	sub	sp, sp, #16
    3700:	str	r0, [fp, #-16]
    3704:	str	r1, [fp, #-20]	; 0xffffffec
    3708:	mov	r3, #0
    370c:	str	r3, [fp, #-8]
    3710:	b	3760 <MyGame_Example_Monster_vec_scan_by_name+0x6c>
    3714:	ldr	r1, [fp, #-8]
    3718:	ldr	r0, [fp, #-16]
    371c:	bl	2c94 <MyGame_Example_Monster_vec_at>
    3720:	mov	r3, r0
    3724:	mov	r0, r3
    3728:	bl	35e4 <MyGame_Example_Monster_name>
    372c:	str	r0, [fp, #-12]
    3730:	mov	r2, #0
    3734:	ldr	r1, [fp, #-20]	; 0xffffffec
    3738:	ldr	r0, [fp, #-12]
    373c:	bl	d18 <__flatbuffers_string_cmp>
    3740:	mov	r3, r0
    3744:	cmp	r3, #0
    3748:	bne	3754 <MyGame_Example_Monster_vec_scan_by_name+0x60>
    374c:	ldr	r3, [fp, #-8]
    3750:	b	3780 <MyGame_Example_Monster_vec_scan_by_name+0x8c>
    3754:	ldr	r3, [fp, #-8]
    3758:	add	r3, r3, #1
    375c:	str	r3, [fp, #-8]
    3760:	ldr	r0, [fp, #-16]
    3764:	bl	2c50 <MyGame_Example_Monster_vec_len>
    3768:	mov	r2, r0
    376c:	ldr	r3, [fp, #-8]
    3770:	cmp	r2, r3
    3774:	bhi	3714 <MyGame_Example_Monster_vec_scan_by_name+0x20>
    3778:	ldr	r3, [pc, #12]	; 378c <MyGame_Example_Monster_vec_scan_by_name+0x98>
    377c:	ldr	r3, [r3]
    3780:	mov	r0, r3
    3784:	sub	sp, fp, #4
    3788:	pop	{fp, pc}
    378c:	.word	0x00000000

00003790 <MyGame_Example_Monster_vec_scan_n_by_name>:
    3790:	push	{fp, lr}
    3794:	add	fp, sp, #4
    3798:	sub	sp, sp, #24
    379c:	str	r0, [fp, #-16]
    37a0:	str	r1, [fp, #-20]	; 0xffffffec
    37a4:	str	r2, [fp, #-24]	; 0xffffffe8
    37a8:	mov	r3, #0
    37ac:	str	r3, [fp, #-8]
    37b0:	b	3804 <MyGame_Example_Monster_vec_scan_n_by_name+0x74>
    37b4:	ldr	r1, [fp, #-8]
    37b8:	ldr	r0, [fp, #-16]
    37bc:	bl	2c94 <MyGame_Example_Monster_vec_at>
    37c0:	mov	r3, r0
    37c4:	mov	r0, r3
    37c8:	bl	35e4 <MyGame_Example_Monster_name>
    37cc:	str	r0, [fp, #-12]
    37d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    37d4:	mov	r2, r3
    37d8:	ldr	r1, [fp, #-20]	; 0xffffffec
    37dc:	ldr	r0, [fp, #-12]
    37e0:	bl	c7c <__flatbuffers_string_n_cmp>
    37e4:	mov	r3, r0
    37e8:	cmp	r3, #0
    37ec:	bne	37f8 <MyGame_Example_Monster_vec_scan_n_by_name+0x68>
    37f0:	ldr	r3, [fp, #-8]
    37f4:	b	3824 <MyGame_Example_Monster_vec_scan_n_by_name+0x94>
    37f8:	ldr	r3, [fp, #-8]
    37fc:	add	r3, r3, #1
    3800:	str	r3, [fp, #-8]
    3804:	ldr	r0, [fp, #-16]
    3808:	bl	2c50 <MyGame_Example_Monster_vec_len>
    380c:	mov	r2, r0
    3810:	ldr	r3, [fp, #-8]
    3814:	cmp	r2, r3
    3818:	bhi	37b4 <MyGame_Example_Monster_vec_scan_n_by_name+0x24>
    381c:	ldr	r3, [pc, #12]	; 3830 <MyGame_Example_Monster_vec_scan_n_by_name+0xa0>
    3820:	ldr	r3, [r3]
    3824:	mov	r0, r3
    3828:	sub	sp, fp, #4
    382c:	pop	{fp, pc}
    3830:	.word	0x00000000

00003834 <MyGame_Example_Monster_vec_scan_ex_by_name>:
    3834:	push	{fp, lr}
    3838:	add	fp, sp, #4
    383c:	sub	sp, sp, #24
    3840:	str	r0, [fp, #-16]
    3844:	str	r1, [fp, #-20]	; 0xffffffec
    3848:	str	r2, [fp, #-24]	; 0xffffffe8
    384c:	str	r3, [fp, #-28]	; 0xffffffe4
    3850:	ldr	r3, [fp, #-20]	; 0xffffffec
    3854:	str	r3, [fp, #-8]
    3858:	b	38a8 <MyGame_Example_Monster_vec_scan_ex_by_name+0x74>
    385c:	ldr	r1, [fp, #-8]
    3860:	ldr	r0, [fp, #-16]
    3864:	bl	2c94 <MyGame_Example_Monster_vec_at>
    3868:	mov	r3, r0
    386c:	mov	r0, r3
    3870:	bl	35e4 <MyGame_Example_Monster_name>
    3874:	str	r0, [fp, #-12]
    3878:	mov	r2, #0
    387c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3880:	ldr	r0, [fp, #-12]
    3884:	bl	d18 <__flatbuffers_string_cmp>
    3888:	mov	r3, r0
    388c:	cmp	r3, #0
    3890:	bne	389c <MyGame_Example_Monster_vec_scan_ex_by_name+0x68>
    3894:	ldr	r3, [fp, #-8]
    3898:	b	38e8 <MyGame_Example_Monster_vec_scan_ex_by_name+0xb4>
    389c:	ldr	r3, [fp, #-8]
    38a0:	add	r3, r3, #1
    38a4:	str	r3, [fp, #-8]
    38a8:	ldr	r0, [fp, #-16]
    38ac:	bl	2c50 <MyGame_Example_Monster_vec_len>
    38b0:	mov	r2, r0
    38b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    38b8:	cmp	r2, r3
    38bc:	bhi	38d0 <MyGame_Example_Monster_vec_scan_ex_by_name+0x9c>
    38c0:	ldr	r0, [fp, #-16]
    38c4:	bl	2c50 <MyGame_Example_Monster_vec_len>
    38c8:	mov	r3, r0
    38cc:	b	38d4 <MyGame_Example_Monster_vec_scan_ex_by_name+0xa0>
    38d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    38d4:	ldr	r2, [fp, #-8]
    38d8:	cmp	r3, r2
    38dc:	bhi	385c <MyGame_Example_Monster_vec_scan_ex_by_name+0x28>
    38e0:	ldr	r3, [pc, #12]	; 38f4 <MyGame_Example_Monster_vec_scan_ex_by_name+0xc0>
    38e4:	ldr	r3, [r3]
    38e8:	mov	r0, r3
    38ec:	sub	sp, fp, #4
    38f0:	pop	{fp, pc}
    38f4:	.word	0x00000000

000038f8 <MyGame_Example_Monster_vec_scan_ex_n_by_name>:
    38f8:	push	{fp, lr}
    38fc:	add	fp, sp, #4
    3900:	sub	sp, sp, #24
    3904:	str	r0, [fp, #-16]
    3908:	str	r1, [fp, #-20]	; 0xffffffec
    390c:	str	r2, [fp, #-24]	; 0xffffffe8
    3910:	str	r3, [fp, #-28]	; 0xffffffe4
    3914:	ldr	r3, [fp, #-20]	; 0xffffffec
    3918:	str	r3, [fp, #-8]
    391c:	b	3970 <MyGame_Example_Monster_vec_scan_ex_n_by_name+0x78>
    3920:	ldr	r1, [fp, #-8]
    3924:	ldr	r0, [fp, #-16]
    3928:	bl	2c94 <MyGame_Example_Monster_vec_at>
    392c:	mov	r3, r0
    3930:	mov	r0, r3
    3934:	bl	35e4 <MyGame_Example_Monster_name>
    3938:	str	r0, [fp, #-12]
    393c:	ldr	r3, [fp, #4]
    3940:	mov	r2, r3
    3944:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3948:	ldr	r0, [fp, #-12]
    394c:	bl	c7c <__flatbuffers_string_n_cmp>
    3950:	mov	r3, r0
    3954:	cmp	r3, #0
    3958:	bne	3964 <MyGame_Example_Monster_vec_scan_ex_n_by_name+0x6c>
    395c:	ldr	r3, [fp, #-8]
    3960:	b	39b0 <MyGame_Example_Monster_vec_scan_ex_n_by_name+0xb8>
    3964:	ldr	r3, [fp, #-8]
    3968:	add	r3, r3, #1
    396c:	str	r3, [fp, #-8]
    3970:	ldr	r0, [fp, #-16]
    3974:	bl	2c50 <MyGame_Example_Monster_vec_len>
    3978:	mov	r2, r0
    397c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3980:	cmp	r2, r3
    3984:	bhi	3998 <MyGame_Example_Monster_vec_scan_ex_n_by_name+0xa0>
    3988:	ldr	r0, [fp, #-16]
    398c:	bl	2c50 <MyGame_Example_Monster_vec_len>
    3990:	mov	r3, r0
    3994:	b	399c <MyGame_Example_Monster_vec_scan_ex_n_by_name+0xa4>
    3998:	ldr	r3, [fp, #-24]	; 0xffffffe8
    399c:	ldr	r2, [fp, #-8]
    39a0:	cmp	r3, r2
    39a4:	bhi	3920 <MyGame_Example_Monster_vec_scan_ex_n_by_name+0x28>
    39a8:	ldr	r3, [pc, #12]	; 39bc <MyGame_Example_Monster_vec_scan_ex_n_by_name+0xc4>
    39ac:	ldr	r3, [r3]
    39b0:	mov	r0, r3
    39b4:	sub	sp, fp, #4
    39b8:	pop	{fp, pc}
    39bc:	.word	0x00000000

000039c0 <MyGame_Example_Monster_vec_rscan_by_name>:
    39c0:	push	{fp, lr}
    39c4:	add	fp, sp, #4
    39c8:	sub	sp, sp, #16
    39cc:	str	r0, [fp, #-16]
    39d0:	str	r1, [fp, #-20]	; 0xffffffec
    39d4:	ldr	r0, [fp, #-16]
    39d8:	bl	2c50 <MyGame_Example_Monster_vec_len>
    39dc:	str	r0, [fp, #-8]
    39e0:	b	3a24 <MyGame_Example_Monster_vec_rscan_by_name+0x64>
    39e4:	ldr	r1, [fp, #-8]
    39e8:	ldr	r0, [fp, #-16]
    39ec:	bl	2c94 <MyGame_Example_Monster_vec_at>
    39f0:	mov	r3, r0
    39f4:	mov	r0, r3
    39f8:	bl	35e4 <MyGame_Example_Monster_name>
    39fc:	str	r0, [fp, #-12]
    3a00:	mov	r2, #0
    3a04:	ldr	r1, [fp, #-20]	; 0xffffffec
    3a08:	ldr	r0, [fp, #-12]
    3a0c:	bl	d18 <__flatbuffers_string_cmp>
    3a10:	mov	r3, r0
    3a14:	cmp	r3, #0
    3a18:	bne	3a24 <MyGame_Example_Monster_vec_rscan_by_name+0x64>
    3a1c:	ldr	r3, [fp, #-8]
    3a20:	b	3a40 <MyGame_Example_Monster_vec_rscan_by_name+0x80>
    3a24:	ldr	r3, [fp, #-8]
    3a28:	sub	r2, r3, #1
    3a2c:	str	r2, [fp, #-8]
    3a30:	cmp	r3, #0
    3a34:	bne	39e4 <MyGame_Example_Monster_vec_rscan_by_name+0x24>
    3a38:	ldr	r3, [pc, #12]	; 3a4c <MyGame_Example_Monster_vec_rscan_by_name+0x8c>
    3a3c:	ldr	r3, [r3]
    3a40:	mov	r0, r3
    3a44:	sub	sp, fp, #4
    3a48:	pop	{fp, pc}
    3a4c:	.word	0x00000000

00003a50 <MyGame_Example_Monster_vec_rscan_n_by_name>:
    3a50:	push	{fp, lr}
    3a54:	add	fp, sp, #4
    3a58:	sub	sp, sp, #24
    3a5c:	str	r0, [fp, #-16]
    3a60:	str	r1, [fp, #-20]	; 0xffffffec
    3a64:	str	r2, [fp, #-24]	; 0xffffffe8
    3a68:	ldr	r0, [fp, #-16]
    3a6c:	bl	2c50 <MyGame_Example_Monster_vec_len>
    3a70:	str	r0, [fp, #-8]
    3a74:	b	3abc <MyGame_Example_Monster_vec_rscan_n_by_name+0x6c>
    3a78:	ldr	r1, [fp, #-8]
    3a7c:	ldr	r0, [fp, #-16]
    3a80:	bl	2c94 <MyGame_Example_Monster_vec_at>
    3a84:	mov	r3, r0
    3a88:	mov	r0, r3
    3a8c:	bl	35e4 <MyGame_Example_Monster_name>
    3a90:	str	r0, [fp, #-12]
    3a94:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3a98:	mov	r2, r3
    3a9c:	ldr	r1, [fp, #-20]	; 0xffffffec
    3aa0:	ldr	r0, [fp, #-12]
    3aa4:	bl	c7c <__flatbuffers_string_n_cmp>
    3aa8:	mov	r3, r0
    3aac:	cmp	r3, #0
    3ab0:	bne	3abc <MyGame_Example_Monster_vec_rscan_n_by_name+0x6c>
    3ab4:	ldr	r3, [fp, #-8]
    3ab8:	b	3ad8 <MyGame_Example_Monster_vec_rscan_n_by_name+0x88>
    3abc:	ldr	r3, [fp, #-8]
    3ac0:	sub	r2, r3, #1
    3ac4:	str	r2, [fp, #-8]
    3ac8:	cmp	r3, #0
    3acc:	bne	3a78 <MyGame_Example_Monster_vec_rscan_n_by_name+0x28>
    3ad0:	ldr	r3, [pc, #12]	; 3ae4 <MyGame_Example_Monster_vec_rscan_n_by_name+0x94>
    3ad4:	ldr	r3, [r3]
    3ad8:	mov	r0, r3
    3adc:	sub	sp, fp, #4
    3ae0:	pop	{fp, pc}
    3ae4:	.word	0x00000000

00003ae8 <MyGame_Example_Monster_vec_rscan_ex_by_name>:
    3ae8:	push	{fp, lr}
    3aec:	add	fp, sp, #4
    3af0:	sub	sp, sp, #24
    3af4:	str	r0, [fp, #-16]
    3af8:	str	r1, [fp, #-20]	; 0xffffffec
    3afc:	str	r2, [fp, #-24]	; 0xffffffe8
    3b00:	str	r3, [fp, #-28]	; 0xffffffe4
    3b04:	ldr	r0, [fp, #-16]
    3b08:	bl	2c50 <MyGame_Example_Monster_vec_len>
    3b0c:	mov	r2, r0
    3b10:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3b14:	cmp	r2, r3
    3b18:	bhi	3b2c <MyGame_Example_Monster_vec_rscan_ex_by_name+0x44>
    3b1c:	ldr	r0, [fp, #-16]
    3b20:	bl	2c50 <MyGame_Example_Monster_vec_len>
    3b24:	mov	r3, r0
    3b28:	b	3b30 <MyGame_Example_Monster_vec_rscan_ex_by_name+0x48>
    3b2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3b30:	str	r3, [fp, #-8]
    3b34:	b	3b78 <MyGame_Example_Monster_vec_rscan_ex_by_name+0x90>
    3b38:	ldr	r1, [fp, #-8]
    3b3c:	ldr	r0, [fp, #-16]
    3b40:	bl	2c94 <MyGame_Example_Monster_vec_at>
    3b44:	mov	r3, r0
    3b48:	mov	r0, r3
    3b4c:	bl	35e4 <MyGame_Example_Monster_name>
    3b50:	str	r0, [fp, #-12]
    3b54:	mov	r2, #0
    3b58:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3b5c:	ldr	r0, [fp, #-12]
    3b60:	bl	d18 <__flatbuffers_string_cmp>
    3b64:	mov	r3, r0
    3b68:	cmp	r3, #0
    3b6c:	bne	3b78 <MyGame_Example_Monster_vec_rscan_ex_by_name+0x90>
    3b70:	ldr	r3, [fp, #-8]
    3b74:	b	3b98 <MyGame_Example_Monster_vec_rscan_ex_by_name+0xb0>
    3b78:	ldr	r3, [fp, #-8]
    3b7c:	sub	r2, r3, #1
    3b80:	str	r2, [fp, #-8]
    3b84:	ldr	r2, [fp, #-20]	; 0xffffffec
    3b88:	cmp	r3, r2
    3b8c:	bhi	3b38 <MyGame_Example_Monster_vec_rscan_ex_by_name+0x50>
    3b90:	ldr	r3, [pc, #12]	; 3ba4 <MyGame_Example_Monster_vec_rscan_ex_by_name+0xbc>
    3b94:	ldr	r3, [r3]
    3b98:	mov	r0, r3
    3b9c:	sub	sp, fp, #4
    3ba0:	pop	{fp, pc}
    3ba4:	.word	0x00000000

00003ba8 <MyGame_Example_Monster_vec_rscan_ex_n_by_name>:
    3ba8:	push	{fp, lr}
    3bac:	add	fp, sp, #4
    3bb0:	sub	sp, sp, #24
    3bb4:	str	r0, [fp, #-16]
    3bb8:	str	r1, [fp, #-20]	; 0xffffffec
    3bbc:	str	r2, [fp, #-24]	; 0xffffffe8
    3bc0:	str	r3, [fp, #-28]	; 0xffffffe4
    3bc4:	ldr	r0, [fp, #-16]
    3bc8:	bl	2c50 <MyGame_Example_Monster_vec_len>
    3bcc:	mov	r2, r0
    3bd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3bd4:	cmp	r2, r3
    3bd8:	bhi	3bec <MyGame_Example_Monster_vec_rscan_ex_n_by_name+0x44>
    3bdc:	ldr	r0, [fp, #-16]
    3be0:	bl	2c50 <MyGame_Example_Monster_vec_len>
    3be4:	mov	r3, r0
    3be8:	b	3bf0 <MyGame_Example_Monster_vec_rscan_ex_n_by_name+0x48>
    3bec:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3bf0:	str	r3, [fp, #-8]
    3bf4:	b	3c3c <MyGame_Example_Monster_vec_rscan_ex_n_by_name+0x94>
    3bf8:	ldr	r1, [fp, #-8]
    3bfc:	ldr	r0, [fp, #-16]
    3c00:	bl	2c94 <MyGame_Example_Monster_vec_at>
    3c04:	mov	r3, r0
    3c08:	mov	r0, r3
    3c0c:	bl	35e4 <MyGame_Example_Monster_name>
    3c10:	str	r0, [fp, #-12]
    3c14:	ldr	r3, [fp, #4]
    3c18:	mov	r2, r3
    3c1c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3c20:	ldr	r0, [fp, #-12]
    3c24:	bl	c7c <__flatbuffers_string_n_cmp>
    3c28:	mov	r3, r0
    3c2c:	cmp	r3, #0
    3c30:	bne	3c3c <MyGame_Example_Monster_vec_rscan_ex_n_by_name+0x94>
    3c34:	ldr	r3, [fp, #-8]
    3c38:	b	3c5c <MyGame_Example_Monster_vec_rscan_ex_n_by_name+0xb4>
    3c3c:	ldr	r3, [fp, #-8]
    3c40:	sub	r2, r3, #1
    3c44:	str	r2, [fp, #-8]
    3c48:	ldr	r2, [fp, #-20]	; 0xffffffec
    3c4c:	cmp	r3, r2
    3c50:	bhi	3bf8 <MyGame_Example_Monster_vec_rscan_ex_n_by_name+0x50>
    3c54:	ldr	r3, [pc, #12]	; 3c68 <MyGame_Example_Monster_vec_rscan_ex_n_by_name+0xc0>
    3c58:	ldr	r3, [r3]
    3c5c:	mov	r0, r3
    3c60:	sub	sp, fp, #4
    3c64:	pop	{fp, pc}
    3c68:	.word	0x00000000

00003c6c <MyGame_Example_Monster_vec_find_by_name>:
    3c6c:	push	{fp, lr}
    3c70:	add	fp, sp, #4
    3c74:	sub	sp, sp, #24
    3c78:	str	r0, [fp, #-24]	; 0xffffffe8
    3c7c:	str	r1, [fp, #-28]	; 0xffffffe4
    3c80:	mov	r3, #0
    3c84:	str	r3, [fp, #-8]
    3c88:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3c8c:	bl	2c50 <MyGame_Example_Monster_vec_len>
    3c90:	str	r0, [fp, #-12]
    3c94:	ldr	r3, [fp, #-12]
    3c98:	cmp	r3, #0
    3c9c:	bne	3cac <MyGame_Example_Monster_vec_find_by_name+0x40>
    3ca0:	ldr	r3, [pc, #244]	; 3d9c <MyGame_Example_Monster_vec_find_by_name+0x130>
    3ca4:	ldr	r3, [r3]
    3ca8:	b	3d90 <MyGame_Example_Monster_vec_find_by_name+0x124>
    3cac:	ldr	r3, [fp, #-12]
    3cb0:	sub	r3, r3, #1
    3cb4:	str	r3, [fp, #-12]
    3cb8:	b	3d28 <MyGame_Example_Monster_vec_find_by_name+0xbc>
    3cbc:	ldr	r2, [fp, #-12]
    3cc0:	ldr	r3, [fp, #-8]
    3cc4:	sub	r3, r2, r3
    3cc8:	lsr	r2, r3, #1
    3ccc:	ldr	r3, [fp, #-8]
    3cd0:	add	r3, r2, r3
    3cd4:	str	r3, [fp, #-16]
    3cd8:	ldr	r1, [fp, #-16]
    3cdc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3ce0:	bl	2c94 <MyGame_Example_Monster_vec_at>
    3ce4:	mov	r3, r0
    3ce8:	mov	r0, r3
    3cec:	bl	35e4 <MyGame_Example_Monster_name>
    3cf0:	str	r0, [fp, #-20]	; 0xffffffec
    3cf4:	mov	r2, #0
    3cf8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3cfc:	ldr	r0, [fp, #-20]	; 0xffffffec
    3d00:	bl	d18 <__flatbuffers_string_cmp>
    3d04:	mov	r3, r0
    3d08:	cmp	r3, #0
    3d0c:	bge	3d20 <MyGame_Example_Monster_vec_find_by_name+0xb4>
    3d10:	ldr	r3, [fp, #-16]
    3d14:	add	r3, r3, #1
    3d18:	str	r3, [fp, #-8]
    3d1c:	b	3d28 <MyGame_Example_Monster_vec_find_by_name+0xbc>
    3d20:	ldr	r3, [fp, #-16]
    3d24:	str	r3, [fp, #-12]
    3d28:	ldr	r2, [fp, #-8]
    3d2c:	ldr	r3, [fp, #-12]
    3d30:	cmp	r2, r3
    3d34:	bcc	3cbc <MyGame_Example_Monster_vec_find_by_name+0x50>
    3d38:	ldr	r2, [fp, #-8]
    3d3c:	ldr	r3, [fp, #-12]
    3d40:	cmp	r2, r3
    3d44:	bne	3d88 <MyGame_Example_Monster_vec_find_by_name+0x11c>
    3d48:	ldr	r1, [fp, #-8]
    3d4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3d50:	bl	2c94 <MyGame_Example_Monster_vec_at>
    3d54:	mov	r3, r0
    3d58:	mov	r0, r3
    3d5c:	bl	35e4 <MyGame_Example_Monster_name>
    3d60:	str	r0, [fp, #-20]	; 0xffffffec
    3d64:	mov	r2, #0
    3d68:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3d6c:	ldr	r0, [fp, #-20]	; 0xffffffec
    3d70:	bl	d18 <__flatbuffers_string_cmp>
    3d74:	mov	r3, r0
    3d78:	cmp	r3, #0
    3d7c:	bne	3d88 <MyGame_Example_Monster_vec_find_by_name+0x11c>
    3d80:	ldr	r3, [fp, #-8]
    3d84:	b	3d90 <MyGame_Example_Monster_vec_find_by_name+0x124>
    3d88:	ldr	r3, [pc, #12]	; 3d9c <MyGame_Example_Monster_vec_find_by_name+0x130>
    3d8c:	ldr	r3, [r3]
    3d90:	mov	r0, r3
    3d94:	sub	sp, fp, #4
    3d98:	pop	{fp, pc}
    3d9c:	.word	0x00000000

00003da0 <MyGame_Example_Monster_vec_find_n_by_name>:
    3da0:	push	{fp, lr}
    3da4:	add	fp, sp, #4
    3da8:	sub	sp, sp, #32
    3dac:	str	r0, [fp, #-24]	; 0xffffffe8
    3db0:	str	r1, [fp, #-28]	; 0xffffffe4
    3db4:	str	r2, [fp, #-32]	; 0xffffffe0
    3db8:	mov	r3, #0
    3dbc:	str	r3, [fp, #-8]
    3dc0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3dc4:	bl	2c50 <MyGame_Example_Monster_vec_len>
    3dc8:	str	r0, [fp, #-12]
    3dcc:	ldr	r3, [fp, #-12]
    3dd0:	cmp	r3, #0
    3dd4:	bne	3de4 <MyGame_Example_Monster_vec_find_n_by_name+0x44>
    3dd8:	ldr	r3, [pc, #252]	; 3edc <MyGame_Example_Monster_vec_find_n_by_name+0x13c>
    3ddc:	ldr	r3, [r3]
    3de0:	b	3ed0 <MyGame_Example_Monster_vec_find_n_by_name+0x130>
    3de4:	ldr	r3, [fp, #-12]
    3de8:	sub	r3, r3, #1
    3dec:	str	r3, [fp, #-12]
    3df0:	b	3e64 <MyGame_Example_Monster_vec_find_n_by_name+0xc4>
    3df4:	ldr	r2, [fp, #-12]
    3df8:	ldr	r3, [fp, #-8]
    3dfc:	sub	r3, r2, r3
    3e00:	lsr	r2, r3, #1
    3e04:	ldr	r3, [fp, #-8]
    3e08:	add	r3, r2, r3
    3e0c:	str	r3, [fp, #-16]
    3e10:	ldr	r1, [fp, #-16]
    3e14:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3e18:	bl	2c94 <MyGame_Example_Monster_vec_at>
    3e1c:	mov	r3, r0
    3e20:	mov	r0, r3
    3e24:	bl	35e4 <MyGame_Example_Monster_name>
    3e28:	str	r0, [fp, #-20]	; 0xffffffec
    3e2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3e30:	mov	r2, r3
    3e34:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3e38:	ldr	r0, [fp, #-20]	; 0xffffffec
    3e3c:	bl	c7c <__flatbuffers_string_n_cmp>
    3e40:	mov	r3, r0
    3e44:	cmp	r3, #0
    3e48:	bge	3e5c <MyGame_Example_Monster_vec_find_n_by_name+0xbc>
    3e4c:	ldr	r3, [fp, #-16]
    3e50:	add	r3, r3, #1
    3e54:	str	r3, [fp, #-8]
    3e58:	b	3e64 <MyGame_Example_Monster_vec_find_n_by_name+0xc4>
    3e5c:	ldr	r3, [fp, #-16]
    3e60:	str	r3, [fp, #-12]
    3e64:	ldr	r2, [fp, #-8]
    3e68:	ldr	r3, [fp, #-12]
    3e6c:	cmp	r2, r3
    3e70:	bcc	3df4 <MyGame_Example_Monster_vec_find_n_by_name+0x54>
    3e74:	ldr	r2, [fp, #-8]
    3e78:	ldr	r3, [fp, #-12]
    3e7c:	cmp	r2, r3
    3e80:	bne	3ec8 <MyGame_Example_Monster_vec_find_n_by_name+0x128>
    3e84:	ldr	r1, [fp, #-8]
    3e88:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3e8c:	bl	2c94 <MyGame_Example_Monster_vec_at>
    3e90:	mov	r3, r0
    3e94:	mov	r0, r3
    3e98:	bl	35e4 <MyGame_Example_Monster_name>
    3e9c:	str	r0, [fp, #-20]	; 0xffffffec
    3ea0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3ea4:	mov	r2, r3
    3ea8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3eac:	ldr	r0, [fp, #-20]	; 0xffffffec
    3eb0:	bl	c7c <__flatbuffers_string_n_cmp>
    3eb4:	mov	r3, r0
    3eb8:	cmp	r3, #0
    3ebc:	bne	3ec8 <MyGame_Example_Monster_vec_find_n_by_name+0x128>
    3ec0:	ldr	r3, [fp, #-8]
    3ec4:	b	3ed0 <MyGame_Example_Monster_vec_find_n_by_name+0x130>
    3ec8:	ldr	r3, [pc, #12]	; 3edc <MyGame_Example_Monster_vec_find_n_by_name+0x13c>
    3ecc:	ldr	r3, [r3]
    3ed0:	mov	r0, r3
    3ed4:	sub	sp, fp, #4
    3ed8:	pop	{fp, pc}
    3edc:	.word	0x00000000

00003ee0 <__MyGame_Example_Monster_sort_by_name__heap_sift_down>:
    3ee0:	push	{fp, lr}
    3ee4:	add	fp, sp, #4
    3ee8:	sub	sp, sp, #48	; 0x30
    3eec:	str	r0, [fp, #-40]	; 0xffffffd8
    3ef0:	str	r1, [fp, #-44]	; 0xffffffd4
    3ef4:	str	r2, [fp, #-48]	; 0xffffffd0
    3ef8:	ldr	r3, [fp, #-44]	; 0xffffffd4
    3efc:	str	r3, [fp, #-12]
    3f00:	b	4098 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x1b8>
    3f04:	ldr	r3, [fp, #-12]
    3f08:	lsl	r3, r3, #1
    3f0c:	str	r3, [fp, #-8]
    3f10:	ldr	r2, [fp, #-8]
    3f14:	ldr	r3, [fp, #-48]	; 0xffffffd0
    3f18:	cmp	r2, r3
    3f1c:	bcs	3f94 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0xb4>
    3f20:	ldr	r1, [fp, #-8]
    3f24:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3f28:	bl	2c94 <MyGame_Example_Monster_vec_at>
    3f2c:	mov	r3, r0
    3f30:	mov	r0, r3
    3f34:	bl	35e4 <MyGame_Example_Monster_name>
    3f38:	str	r0, [fp, #-16]
    3f3c:	ldr	r3, [fp, #-8]
    3f40:	add	r3, r3, #1
    3f44:	mov	r1, r3
    3f48:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3f4c:	bl	2c94 <MyGame_Example_Monster_vec_at>
    3f50:	mov	r3, r0
    3f54:	mov	r0, r3
    3f58:	bl	35e4 <MyGame_Example_Monster_name>
    3f5c:	str	r0, [fp, #-20]	; 0xffffffec
    3f60:	ldr	r0, [fp, #-20]	; 0xffffffec
    3f64:	bl	9fc <flatbuffers_string_len>
    3f68:	mov	r3, r0
    3f6c:	mov	r2, r3
    3f70:	ldr	r1, [fp, #-20]	; 0xffffffec
    3f74:	ldr	r0, [fp, #-16]
    3f78:	bl	c7c <__flatbuffers_string_n_cmp>
    3f7c:	mov	r3, r0
    3f80:	cmp	r3, #0
    3f84:	bge	3f94 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0xb4>
    3f88:	ldr	r3, [fp, #-8]
    3f8c:	add	r3, r3, #1
    3f90:	str	r3, [fp, #-8]
    3f94:	ldr	r1, [fp, #-12]
    3f98:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3f9c:	bl	2c94 <MyGame_Example_Monster_vec_at>
    3fa0:	mov	r3, r0
    3fa4:	mov	r0, r3
    3fa8:	bl	35e4 <MyGame_Example_Monster_name>
    3fac:	str	r0, [fp, #-24]	; 0xffffffe8
    3fb0:	ldr	r1, [fp, #-8]
    3fb4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3fb8:	bl	2c94 <MyGame_Example_Monster_vec_at>
    3fbc:	mov	r3, r0
    3fc0:	mov	r0, r3
    3fc4:	bl	35e4 <MyGame_Example_Monster_name>
    3fc8:	str	r0, [fp, #-16]
    3fcc:	ldr	r0, [fp, #-16]
    3fd0:	bl	9fc <flatbuffers_string_len>
    3fd4:	mov	r3, r0
    3fd8:	mov	r2, r3
    3fdc:	ldr	r1, [fp, #-16]
    3fe0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3fe4:	bl	c7c <__flatbuffers_string_n_cmp>
    3fe8:	mov	r3, r0
    3fec:	cmp	r3, #0
    3ff0:	bge	40b0 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x1d0>
    3ff4:	ldr	r2, [fp, #-12]
    3ff8:	ldr	r3, [fp, #-8]
    3ffc:	sub	r3, r2, r3
    4000:	lsl	r3, r3, #2
    4004:	str	r3, [fp, #-28]	; 0xffffffe4
    4008:	ldr	r3, [fp, #-8]
    400c:	lsl	r3, r3, #2
    4010:	ldr	r2, [fp, #-40]	; 0xffffffd8
    4014:	add	r3, r2, r3
    4018:	mov	r0, r3
    401c:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    4020:	mov	r2, r0
    4024:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4028:	sub	r3, r2, r3
    402c:	str	r3, [fp, #-32]	; 0xffffffe0
    4030:	ldr	r3, [fp, #-12]
    4034:	lsl	r3, r3, #2
    4038:	ldr	r2, [fp, #-40]	; 0xffffffd8
    403c:	add	r3, r2, r3
    4040:	mov	r0, r3
    4044:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    4048:	mov	r2, r0
    404c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4050:	add	r3, r2, r3
    4054:	str	r3, [fp, #-36]	; 0xffffffdc
    4058:	ldr	r3, [fp, #-12]
    405c:	lsl	r3, r3, #2
    4060:	ldr	r2, [fp, #-40]	; 0xffffffd8
    4064:	add	r3, r2, r3
    4068:	ldr	r1, [fp, #-32]	; 0xffffffe0
    406c:	mov	r0, r3
    4070:	bl	6e4 <__flatbuffers_uoffset_write_to_pe>
    4074:	ldr	r3, [fp, #-8]
    4078:	lsl	r3, r3, #2
    407c:	ldr	r2, [fp, #-40]	; 0xffffffd8
    4080:	add	r3, r2, r3
    4084:	ldr	r1, [fp, #-36]	; 0xffffffdc
    4088:	mov	r0, r3
    408c:	bl	6e4 <__flatbuffers_uoffset_write_to_pe>
    4090:	ldr	r3, [fp, #-8]
    4094:	str	r3, [fp, #-12]
    4098:	ldr	r3, [fp, #-12]
    409c:	lsl	r2, r3, #1
    40a0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    40a4:	cmp	r2, r3
    40a8:	bls	3f04 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x24>
    40ac:	b	40b4 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x1d4>
    40b0:	nop			; (mov r0, r0)
    40b4:	sub	sp, fp, #4
    40b8:	pop	{fp, pc}

000040bc <__MyGame_Example_Monster_sort_by_name__heap_sort>:
    40bc:	push	{fp, lr}
    40c0:	add	fp, sp, #4
    40c4:	sub	sp, sp, #32
    40c8:	str	r0, [fp, #-32]	; 0xffffffe0
    40cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    40d0:	bl	2c50 <MyGame_Example_Monster_vec_len>
    40d4:	str	r0, [fp, #-16]
    40d8:	ldr	r3, [fp, #-16]
    40dc:	cmp	r3, #0
    40e0:	beq	41d0 <__MyGame_Example_Monster_sort_by_name__heap_sort+0x114>
    40e4:	ldr	r3, [fp, #-16]
    40e8:	sub	r3, r3, #1
    40ec:	str	r3, [fp, #-12]
    40f0:	ldr	r3, [fp, #-16]
    40f4:	lsr	r3, r3, #1
    40f8:	str	r3, [fp, #-8]
    40fc:	ldr	r2, [fp, #-12]
    4100:	ldr	r1, [fp, #-8]
    4104:	ldr	r0, [fp, #-32]	; 0xffffffe0
    4108:	bl	3ee0 <__MyGame_Example_Monster_sort_by_name__heap_sift_down>
    410c:	ldr	r3, [fp, #-8]
    4110:	sub	r2, r3, #1
    4114:	str	r2, [fp, #-8]
    4118:	cmp	r3, #0
    411c:	bne	40fc <__MyGame_Example_Monster_sort_by_name__heap_sort+0x40>
    4120:	b	41c0 <__MyGame_Example_Monster_sort_by_name__heap_sort+0x104>
    4124:	ldr	r2, [fp, #-12]
    4128:	mov	r3, r2
    412c:	lsl	r3, r3, #30
    4130:	sub	r3, r3, r2
    4134:	lsl	r3, r3, #2
    4138:	str	r3, [fp, #-20]	; 0xffffffec
    413c:	ldr	r3, [fp, #-12]
    4140:	lsl	r3, r3, #2
    4144:	ldr	r2, [fp, #-32]	; 0xffffffe0
    4148:	add	r3, r2, r3
    414c:	mov	r0, r3
    4150:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    4154:	mov	r2, r0
    4158:	ldr	r3, [fp, #-20]	; 0xffffffec
    415c:	sub	r3, r2, r3
    4160:	str	r3, [fp, #-24]	; 0xffffffe8
    4164:	ldr	r0, [fp, #-32]	; 0xffffffe0
    4168:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    416c:	mov	r2, r0
    4170:	ldr	r3, [fp, #-20]	; 0xffffffec
    4174:	add	r3, r2, r3
    4178:	str	r3, [fp, #-28]	; 0xffffffe4
    417c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    4180:	ldr	r0, [fp, #-32]	; 0xffffffe0
    4184:	bl	6e4 <__flatbuffers_uoffset_write_to_pe>
    4188:	ldr	r3, [fp, #-12]
    418c:	lsl	r3, r3, #2
    4190:	ldr	r2, [fp, #-32]	; 0xffffffe0
    4194:	add	r3, r2, r3
    4198:	ldr	r1, [fp, #-28]	; 0xffffffe4
    419c:	mov	r0, r3
    41a0:	bl	6e4 <__flatbuffers_uoffset_write_to_pe>
    41a4:	ldr	r3, [fp, #-12]
    41a8:	sub	r3, r3, #1
    41ac:	str	r3, [fp, #-12]
    41b0:	ldr	r2, [fp, #-12]
    41b4:	mov	r1, #0
    41b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    41bc:	bl	3ee0 <__MyGame_Example_Monster_sort_by_name__heap_sift_down>
    41c0:	ldr	r3, [fp, #-12]
    41c4:	cmp	r3, #0
    41c8:	bne	4124 <__MyGame_Example_Monster_sort_by_name__heap_sort+0x68>
    41cc:	b	41d4 <__MyGame_Example_Monster_sort_by_name__heap_sort+0x118>
    41d0:	nop			; (mov r0, r0)
    41d4:	sub	sp, fp, #4
    41d8:	pop	{fp, pc}

000041dc <MyGame_Example_Monster_vec_sort_by_name>:
    41dc:	push	{fp, lr}
    41e0:	add	fp, sp, #4
    41e4:	sub	sp, sp, #8
    41e8:	str	r0, [fp, #-8]
    41ec:	ldr	r0, [fp, #-8]
    41f0:	bl	40bc <__MyGame_Example_Monster_sort_by_name__heap_sort>
    41f4:	nop			; (mov r0, r0)
    41f8:	sub	sp, fp, #4
    41fc:	pop	{fp, pc}

00004200 <MyGame_Example_Monster_vec_find>:
    4200:	push	{fp, lr}
    4204:	add	fp, sp, #4
    4208:	sub	sp, sp, #8
    420c:	str	r0, [fp, #-8]
    4210:	str	r1, [fp, #-12]
    4214:	ldr	r1, [fp, #-12]
    4218:	ldr	r0, [fp, #-8]
    421c:	bl	3c6c <MyGame_Example_Monster_vec_find_by_name>
    4220:	mov	r3, r0
    4224:	mov	r0, r3
    4228:	sub	sp, fp, #4
    422c:	pop	{fp, pc}

00004230 <MyGame_Example_Monster_vec_find_n>:
    4230:	push	{fp, lr}
    4234:	add	fp, sp, #4
    4238:	sub	sp, sp, #16
    423c:	str	r0, [fp, #-8]
    4240:	str	r1, [fp, #-12]
    4244:	str	r2, [fp, #-16]
    4248:	ldr	r2, [fp, #-16]
    424c:	ldr	r1, [fp, #-12]
    4250:	ldr	r0, [fp, #-8]
    4254:	bl	3da0 <MyGame_Example_Monster_vec_find_n_by_name>
    4258:	mov	r3, r0
    425c:	mov	r0, r3
    4260:	sub	sp, fp, #4
    4264:	pop	{fp, pc}

00004268 <MyGame_Example_Monster_vec_scan>:
    4268:	push	{fp, lr}
    426c:	add	fp, sp, #4
    4270:	sub	sp, sp, #8
    4274:	str	r0, [fp, #-8]
    4278:	str	r1, [fp, #-12]
    427c:	ldr	r1, [fp, #-12]
    4280:	ldr	r0, [fp, #-8]
    4284:	bl	36f4 <MyGame_Example_Monster_vec_scan_by_name>
    4288:	mov	r3, r0
    428c:	mov	r0, r3
    4290:	sub	sp, fp, #4
    4294:	pop	{fp, pc}

00004298 <MyGame_Example_Monster_vec_scan_n>:
    4298:	push	{fp, lr}
    429c:	add	fp, sp, #4
    42a0:	sub	sp, sp, #16
    42a4:	str	r0, [fp, #-8]
    42a8:	str	r1, [fp, #-12]
    42ac:	str	r2, [fp, #-16]
    42b0:	ldr	r2, [fp, #-16]
    42b4:	ldr	r1, [fp, #-12]
    42b8:	ldr	r0, [fp, #-8]
    42bc:	bl	3790 <MyGame_Example_Monster_vec_scan_n_by_name>
    42c0:	mov	r3, r0
    42c4:	mov	r0, r3
    42c8:	sub	sp, fp, #4
    42cc:	pop	{fp, pc}

000042d0 <MyGame_Example_Monster_vec_scan_ex>:
    42d0:	push	{fp, lr}
    42d4:	add	fp, sp, #4
    42d8:	sub	sp, sp, #16
    42dc:	str	r0, [fp, #-8]
    42e0:	str	r1, [fp, #-12]
    42e4:	str	r2, [fp, #-16]
    42e8:	str	r3, [fp, #-20]	; 0xffffffec
    42ec:	ldr	r3, [fp, #-20]	; 0xffffffec
    42f0:	ldr	r2, [fp, #-16]
    42f4:	ldr	r1, [fp, #-12]
    42f8:	ldr	r0, [fp, #-8]
    42fc:	bl	3834 <MyGame_Example_Monster_vec_scan_ex_by_name>
    4300:	mov	r3, r0
    4304:	mov	r0, r3
    4308:	sub	sp, fp, #4
    430c:	pop	{fp, pc}

00004310 <MyGame_Example_Monster_vec_rscan>:
    4310:	push	{fp, lr}
    4314:	add	fp, sp, #4
    4318:	sub	sp, sp, #8
    431c:	str	r0, [fp, #-8]
    4320:	str	r1, [fp, #-12]
    4324:	ldr	r1, [fp, #-12]
    4328:	ldr	r0, [fp, #-8]
    432c:	bl	39c0 <MyGame_Example_Monster_vec_rscan_by_name>
    4330:	mov	r3, r0
    4334:	mov	r0, r3
    4338:	sub	sp, fp, #4
    433c:	pop	{fp, pc}

00004340 <MyGame_Example_Monster_vec_rscan_n>:
    4340:	push	{fp, lr}
    4344:	add	fp, sp, #4
    4348:	sub	sp, sp, #16
    434c:	str	r0, [fp, #-8]
    4350:	str	r1, [fp, #-12]
    4354:	str	r2, [fp, #-16]
    4358:	ldr	r2, [fp, #-16]
    435c:	ldr	r1, [fp, #-12]
    4360:	ldr	r0, [fp, #-8]
    4364:	bl	3a50 <MyGame_Example_Monster_vec_rscan_n_by_name>
    4368:	mov	r3, r0
    436c:	mov	r0, r3
    4370:	sub	sp, fp, #4
    4374:	pop	{fp, pc}

00004378 <MyGame_Example_Monster_vec_rscan_ex>:
    4378:	push	{fp, lr}
    437c:	add	fp, sp, #4
    4380:	sub	sp, sp, #16
    4384:	str	r0, [fp, #-8]
    4388:	str	r1, [fp, #-12]
    438c:	str	r2, [fp, #-16]
    4390:	str	r3, [fp, #-20]	; 0xffffffec
    4394:	ldr	r3, [fp, #-20]	; 0xffffffec
    4398:	ldr	r2, [fp, #-16]
    439c:	ldr	r1, [fp, #-12]
    43a0:	ldr	r0, [fp, #-8]
    43a4:	bl	3ae8 <MyGame_Example_Monster_vec_rscan_ex_by_name>
    43a8:	mov	r3, r0
    43ac:	mov	r0, r3
    43b0:	sub	sp, fp, #4
    43b4:	pop	{fp, pc}

000043b8 <MyGame_Example_Monster_color>:
    43b8:	push	{fp, lr}
    43bc:	add	fp, sp, #4
    43c0:	sub	sp, sp, #16
    43c4:	str	r0, [fp, #-16]
    43c8:	mov	r3, #0
    43cc:	strh	r3, [fp, #-6]
    43d0:	ldr	r3, [fp, #-16]
    43d4:	cmp	r3, #0
    43d8:	bne	43f0 <MyGame_Example_Monster_color+0x38>
    43dc:	ldr	r3, [pc, #176]	; 4494 <MyGame_Example_Monster_color+0xdc>
    43e0:	ldr	r2, [pc, #176]	; 4498 <MyGame_Example_Monster_color+0xe0>
    43e4:	ldr	r1, [pc, #176]	; 449c <MyGame_Example_Monster_color+0xe4>
    43e8:	ldr	r0, [pc, #176]	; 44a0 <MyGame_Example_Monster_color+0xe8>
    43ec:	bl	0 <__assert_fail>
    43f0:	mov	r3, #6
    43f4:	strh	r3, [fp, #-8]
    43f8:	ldr	r0, [fp, #-16]
    43fc:	bl	73c <__flatbuffers_soffset_read_from_pe>
    4400:	mov	r3, r0
    4404:	rsb	r3, r3, #0
    4408:	ldr	r2, [fp, #-16]
    440c:	add	r3, r2, r3
    4410:	str	r3, [fp, #-12]
    4414:	ldr	r0, [fp, #-12]
    4418:	bl	794 <__flatbuffers_voffset_read_from_pe>
    441c:	mov	r3, r0
    4420:	mov	r2, r3
    4424:	ldrh	r3, [fp, #-8]
    4428:	add	r3, r3, #3
    442c:	lsl	r3, r3, #1
    4430:	cmp	r2, r3
    4434:	bcc	445c <MyGame_Example_Monster_color+0xa4>
    4438:	ldrh	r3, [fp, #-8]
    443c:	add	r3, r3, #2
    4440:	lsl	r3, r3, #1
    4444:	ldr	r2, [fp, #-12]
    4448:	add	r3, r2, r3
    444c:	mov	r0, r3
    4450:	bl	794 <__flatbuffers_voffset_read_from_pe>
    4454:	mov	r3, r0
    4458:	strh	r3, [fp, #-6]
    445c:	ldrh	r3, [fp, #-6]
    4460:	cmp	r3, #0
    4464:	beq	4484 <MyGame_Example_Monster_color+0xcc>
    4468:	ldrh	r3, [fp, #-6]
    446c:	ldr	r2, [fp, #-16]
    4470:	add	r3, r2, r3
    4474:	mov	r0, r3
    4478:	bl	1bbc <MyGame_Example_Color_read_from_pe>
    447c:	mov	r3, r0
    4480:	b	4488 <MyGame_Example_Monster_color+0xd0>
    4484:	mov	r3, #8
    4488:	mov	r0, r3
    448c:	sub	sp, fp, #4
    4490:	pop	{fp, pc}
    4494:	.word	0x00003570
    4498:	.word	0x000002c1
    449c:	.word	0x000000c8
    44a0:	.word	0x0000015c

000044a4 <MyGame_Example_Monster_color_is_present>:
    44a4:	push	{fp, lr}
    44a8:	add	fp, sp, #4
    44ac:	sub	sp, sp, #16
    44b0:	str	r0, [fp, #-16]
    44b4:	mov	r3, #0
    44b8:	strh	r3, [fp, #-6]
    44bc:	ldr	r3, [fp, #-16]
    44c0:	cmp	r3, #0
    44c4:	bne	44dc <MyGame_Example_Monster_color_is_present+0x38>
    44c8:	ldr	r3, [pc, #152]	; 4568 <MyGame_Example_Monster_color_is_present+0xc4>
    44cc:	ldr	r2, [pc, #152]	; 456c <MyGame_Example_Monster_color_is_present+0xc8>
    44d0:	ldr	r1, [pc, #152]	; 4570 <MyGame_Example_Monster_color_is_present+0xcc>
    44d4:	ldr	r0, [pc, #152]	; 4574 <MyGame_Example_Monster_color_is_present+0xd0>
    44d8:	bl	0 <__assert_fail>
    44dc:	mov	r3, #6
    44e0:	strh	r3, [fp, #-8]
    44e4:	ldr	r0, [fp, #-16]
    44e8:	bl	73c <__flatbuffers_soffset_read_from_pe>
    44ec:	mov	r3, r0
    44f0:	rsb	r3, r3, #0
    44f4:	ldr	r2, [fp, #-16]
    44f8:	add	r3, r2, r3
    44fc:	str	r3, [fp, #-12]
    4500:	ldr	r0, [fp, #-12]
    4504:	bl	794 <__flatbuffers_voffset_read_from_pe>
    4508:	mov	r3, r0
    450c:	mov	r2, r3
    4510:	ldrh	r3, [fp, #-8]
    4514:	add	r3, r3, #3
    4518:	lsl	r3, r3, #1
    451c:	cmp	r2, r3
    4520:	bcc	4548 <MyGame_Example_Monster_color_is_present+0xa4>
    4524:	ldrh	r3, [fp, #-8]
    4528:	add	r3, r3, #2
    452c:	lsl	r3, r3, #1
    4530:	ldr	r2, [fp, #-12]
    4534:	add	r3, r2, r3
    4538:	mov	r0, r3
    453c:	bl	794 <__flatbuffers_voffset_read_from_pe>
    4540:	mov	r3, r0
    4544:	strh	r3, [fp, #-6]
    4548:	ldrh	r3, [fp, #-6]
    454c:	cmp	r3, #0
    4550:	movne	r3, #1
    4554:	moveq	r3, #0
    4558:	uxtb	r3, r3
    455c:	mov	r0, r3
    4560:	sub	sp, fp, #4
    4564:	pop	{fp, pc}
    4568:	.word	0x00003ce8
    456c:	.word	0x000002c1
    4570:	.word	0x000000c8
    4574:	.word	0x0000015c

00004578 <MyGame_Example_Monster_inventory>:
    4578:	push	{fp, lr}
    457c:	add	fp, sp, #4
    4580:	sub	sp, sp, #24
    4584:	str	r0, [fp, #-24]	; 0xffffffe8
    4588:	mov	r3, #0
    458c:	strh	r3, [fp, #-6]
    4590:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4594:	cmp	r3, #0
    4598:	bne	45b0 <MyGame_Example_Monster_inventory+0x38>
    459c:	ldr	r3, [pc, #192]	; 4664 <MyGame_Example_Monster_inventory+0xec>
    45a0:	ldr	r2, [pc, #192]	; 4668 <MyGame_Example_Monster_inventory+0xf0>
    45a4:	ldr	r1, [pc, #192]	; 466c <MyGame_Example_Monster_inventory+0xf4>
    45a8:	ldr	r0, [pc, #192]	; 4670 <MyGame_Example_Monster_inventory+0xf8>
    45ac:	bl	0 <__assert_fail>
    45b0:	mov	r3, #5
    45b4:	strh	r3, [fp, #-8]
    45b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    45bc:	bl	73c <__flatbuffers_soffset_read_from_pe>
    45c0:	mov	r3, r0
    45c4:	rsb	r3, r3, #0
    45c8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    45cc:	add	r3, r2, r3
    45d0:	str	r3, [fp, #-12]
    45d4:	ldr	r0, [fp, #-12]
    45d8:	bl	794 <__flatbuffers_voffset_read_from_pe>
    45dc:	mov	r3, r0
    45e0:	mov	r2, r3
    45e4:	ldrh	r3, [fp, #-8]
    45e8:	add	r3, r3, #3
    45ec:	lsl	r3, r3, #1
    45f0:	cmp	r2, r3
    45f4:	bcc	461c <MyGame_Example_Monster_inventory+0xa4>
    45f8:	ldrh	r3, [fp, #-8]
    45fc:	add	r3, r3, #2
    4600:	lsl	r3, r3, #1
    4604:	ldr	r2, [fp, #-12]
    4608:	add	r3, r2, r3
    460c:	mov	r0, r3
    4610:	bl	794 <__flatbuffers_voffset_read_from_pe>
    4614:	mov	r3, r0
    4618:	strh	r3, [fp, #-6]
    461c:	ldrh	r3, [fp, #-6]
    4620:	cmp	r3, #0
    4624:	beq	4654 <MyGame_Example_Monster_inventory+0xdc>
    4628:	ldrh	r3, [fp, #-6]
    462c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4630:	add	r3, r2, r3
    4634:	str	r3, [fp, #-16]
    4638:	ldr	r0, [fp, #-16]
    463c:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    4640:	mov	r3, r0
    4644:	add	r3, r3, #4
    4648:	ldr	r2, [fp, #-16]
    464c:	add	r3, r2, r3
    4650:	b	4658 <MyGame_Example_Monster_inventory+0xe0>
    4654:	mov	r3, #0
    4658:	mov	r0, r3
    465c:	sub	sp, fp, #4
    4660:	pop	{fp, pc}
    4664:	.word	0x00003590
    4668:	.word	0x000002c2
    466c:	.word	0x000000c8
    4670:	.word	0x0000015c

00004674 <MyGame_Example_Monster_testarrayoftables>:
    4674:	push	{fp, lr}
    4678:	add	fp, sp, #4
    467c:	sub	sp, sp, #24
    4680:	str	r0, [fp, #-24]	; 0xffffffe8
    4684:	mov	r3, #0
    4688:	strh	r3, [fp, #-6]
    468c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4690:	cmp	r3, #0
    4694:	bne	46ac <MyGame_Example_Monster_testarrayoftables+0x38>
    4698:	ldr	r3, [pc, #192]	; 4760 <MyGame_Example_Monster_testarrayoftables+0xec>
    469c:	ldr	r2, [pc, #192]	; 4764 <MyGame_Example_Monster_testarrayoftables+0xf0>
    46a0:	ldr	r1, [pc, #192]	; 4768 <MyGame_Example_Monster_testarrayoftables+0xf4>
    46a4:	ldr	r0, [pc, #192]	; 476c <MyGame_Example_Monster_testarrayoftables+0xf8>
    46a8:	bl	0 <__assert_fail>
    46ac:	mov	r3, #11
    46b0:	strh	r3, [fp, #-8]
    46b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    46b8:	bl	73c <__flatbuffers_soffset_read_from_pe>
    46bc:	mov	r3, r0
    46c0:	rsb	r3, r3, #0
    46c4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    46c8:	add	r3, r2, r3
    46cc:	str	r3, [fp, #-12]
    46d0:	ldr	r0, [fp, #-12]
    46d4:	bl	794 <__flatbuffers_voffset_read_from_pe>
    46d8:	mov	r3, r0
    46dc:	mov	r2, r3
    46e0:	ldrh	r3, [fp, #-8]
    46e4:	add	r3, r3, #3
    46e8:	lsl	r3, r3, #1
    46ec:	cmp	r2, r3
    46f0:	bcc	4718 <MyGame_Example_Monster_testarrayoftables+0xa4>
    46f4:	ldrh	r3, [fp, #-8]
    46f8:	add	r3, r3, #2
    46fc:	lsl	r3, r3, #1
    4700:	ldr	r2, [fp, #-12]
    4704:	add	r3, r2, r3
    4708:	mov	r0, r3
    470c:	bl	794 <__flatbuffers_voffset_read_from_pe>
    4710:	mov	r3, r0
    4714:	strh	r3, [fp, #-6]
    4718:	ldrh	r3, [fp, #-6]
    471c:	cmp	r3, #0
    4720:	beq	4750 <MyGame_Example_Monster_testarrayoftables+0xdc>
    4724:	ldrh	r3, [fp, #-6]
    4728:	ldr	r2, [fp, #-24]	; 0xffffffe8
    472c:	add	r3, r2, r3
    4730:	str	r3, [fp, #-16]
    4734:	ldr	r0, [fp, #-16]
    4738:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    473c:	mov	r3, r0
    4740:	add	r3, r3, #4
    4744:	ldr	r2, [fp, #-16]
    4748:	add	r3, r2, r3
    474c:	b	4754 <MyGame_Example_Monster_testarrayoftables+0xe0>
    4750:	mov	r3, #0
    4754:	mov	r0, r3
    4758:	sub	sp, fp, #4
    475c:	pop	{fp, pc}
    4760:	.word	0x0000372c
    4764:	.word	0x000002c7
    4768:	.word	0x000000c8
    476c:	.word	0x0000015c

00004770 <MyGame_Example_Monster_testarrayofstring>:
    4770:	push	{fp, lr}
    4774:	add	fp, sp, #4
    4778:	sub	sp, sp, #24
    477c:	str	r0, [fp, #-24]	; 0xffffffe8
    4780:	mov	r3, #0
    4784:	strh	r3, [fp, #-6]
    4788:	ldr	r3, [fp, #-24]	; 0xffffffe8
    478c:	cmp	r3, #0
    4790:	bne	47a8 <MyGame_Example_Monster_testarrayofstring+0x38>
    4794:	ldr	r3, [pc, #192]	; 485c <MyGame_Example_Monster_testarrayofstring+0xec>
    4798:	mov	r2, #712	; 0x2c8
    479c:	ldr	r1, [pc, #188]	; 4860 <MyGame_Example_Monster_testarrayofstring+0xf0>
    47a0:	ldr	r0, [pc, #188]	; 4864 <MyGame_Example_Monster_testarrayofstring+0xf4>
    47a4:	bl	0 <__assert_fail>
    47a8:	mov	r3, #10
    47ac:	strh	r3, [fp, #-8]
    47b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    47b4:	bl	73c <__flatbuffers_soffset_read_from_pe>
    47b8:	mov	r3, r0
    47bc:	rsb	r3, r3, #0
    47c0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    47c4:	add	r3, r2, r3
    47c8:	str	r3, [fp, #-12]
    47cc:	ldr	r0, [fp, #-12]
    47d0:	bl	794 <__flatbuffers_voffset_read_from_pe>
    47d4:	mov	r3, r0
    47d8:	mov	r2, r3
    47dc:	ldrh	r3, [fp, #-8]
    47e0:	add	r3, r3, #3
    47e4:	lsl	r3, r3, #1
    47e8:	cmp	r2, r3
    47ec:	bcc	4814 <MyGame_Example_Monster_testarrayofstring+0xa4>
    47f0:	ldrh	r3, [fp, #-8]
    47f4:	add	r3, r3, #2
    47f8:	lsl	r3, r3, #1
    47fc:	ldr	r2, [fp, #-12]
    4800:	add	r3, r2, r3
    4804:	mov	r0, r3
    4808:	bl	794 <__flatbuffers_voffset_read_from_pe>
    480c:	mov	r3, r0
    4810:	strh	r3, [fp, #-6]
    4814:	ldrh	r3, [fp, #-6]
    4818:	cmp	r3, #0
    481c:	beq	484c <MyGame_Example_Monster_testarrayofstring+0xdc>
    4820:	ldrh	r3, [fp, #-6]
    4824:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4828:	add	r3, r2, r3
    482c:	str	r3, [fp, #-16]
    4830:	ldr	r0, [fp, #-16]
    4834:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    4838:	mov	r3, r0
    483c:	add	r3, r3, #4
    4840:	ldr	r2, [fp, #-16]
    4844:	add	r3, r2, r3
    4848:	b	4850 <MyGame_Example_Monster_testarrayofstring+0xe0>
    484c:	mov	r3, #0
    4850:	mov	r0, r3
    4854:	sub	sp, fp, #4
    4858:	pop	{fp, pc}
    485c:	.word	0x00003650
    4860:	.word	0x000000c8
    4864:	.word	0x0000015c

00004868 <MyGame_Example_Monster_testarrayofbools>:
    4868:	push	{fp, lr}
    486c:	add	fp, sp, #4
    4870:	sub	sp, sp, #24
    4874:	str	r0, [fp, #-24]	; 0xffffffe8
    4878:	mov	r3, #0
    487c:	strh	r3, [fp, #-6]
    4880:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4884:	cmp	r3, #0
    4888:	bne	48a0 <MyGame_Example_Monster_testarrayofbools+0x38>
    488c:	ldr	r3, [pc, #192]	; 4954 <MyGame_Example_Monster_testarrayofbools+0xec>
    4890:	ldr	r2, [pc, #192]	; 4958 <MyGame_Example_Monster_testarrayofbools+0xf0>
    4894:	ldr	r1, [pc, #192]	; 495c <MyGame_Example_Monster_testarrayofbools+0xf4>
    4898:	ldr	r0, [pc, #192]	; 4960 <MyGame_Example_Monster_testarrayofbools+0xf8>
    489c:	bl	0 <__assert_fail>
    48a0:	mov	r3, #24
    48a4:	strh	r3, [fp, #-8]
    48a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    48ac:	bl	73c <__flatbuffers_soffset_read_from_pe>
    48b0:	mov	r3, r0
    48b4:	rsb	r3, r3, #0
    48b8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    48bc:	add	r3, r2, r3
    48c0:	str	r3, [fp, #-12]
    48c4:	ldr	r0, [fp, #-12]
    48c8:	bl	794 <__flatbuffers_voffset_read_from_pe>
    48cc:	mov	r3, r0
    48d0:	mov	r2, r3
    48d4:	ldrh	r3, [fp, #-8]
    48d8:	add	r3, r3, #3
    48dc:	lsl	r3, r3, #1
    48e0:	cmp	r2, r3
    48e4:	bcc	490c <MyGame_Example_Monster_testarrayofbools+0xa4>
    48e8:	ldrh	r3, [fp, #-8]
    48ec:	add	r3, r3, #2
    48f0:	lsl	r3, r3, #1
    48f4:	ldr	r2, [fp, #-12]
    48f8:	add	r3, r2, r3
    48fc:	mov	r0, r3
    4900:	bl	794 <__flatbuffers_voffset_read_from_pe>
    4904:	mov	r3, r0
    4908:	strh	r3, [fp, #-6]
    490c:	ldrh	r3, [fp, #-6]
    4910:	cmp	r3, #0
    4914:	beq	4944 <MyGame_Example_Monster_testarrayofbools+0xdc>
    4918:	ldrh	r3, [fp, #-6]
    491c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4920:	add	r3, r2, r3
    4924:	str	r3, [fp, #-16]
    4928:	ldr	r0, [fp, #-16]
    492c:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    4930:	mov	r3, r0
    4934:	add	r3, r3, #4
    4938:	ldr	r2, [fp, #-16]
    493c:	add	r3, r2, r3
    4940:	b	4948 <MyGame_Example_Monster_testarrayofbools+0xe0>
    4944:	mov	r3, #0
    4948:	mov	r0, r3
    494c:	sub	sp, fp, #4
    4950:	pop	{fp, pc}
    4954:	.word	0x000036cc
    4958:	.word	0x000002ca
    495c:	.word	0x000000c8
    4960:	.word	0x0000015c

00004964 <MyGame_Example_Monster_testarrayofbools_is_present>:
    4964:	push	{fp, lr}
    4968:	add	fp, sp, #4
    496c:	sub	sp, sp, #16
    4970:	str	r0, [fp, #-16]
    4974:	mov	r3, #0
    4978:	strh	r3, [fp, #-6]
    497c:	ldr	r3, [fp, #-16]
    4980:	cmp	r3, #0
    4984:	bne	499c <MyGame_Example_Monster_testarrayofbools_is_present+0x38>
    4988:	ldr	r3, [pc, #152]	; 4a28 <MyGame_Example_Monster_testarrayofbools_is_present+0xc4>
    498c:	ldr	r2, [pc, #152]	; 4a2c <MyGame_Example_Monster_testarrayofbools_is_present+0xc8>
    4990:	ldr	r1, [pc, #152]	; 4a30 <MyGame_Example_Monster_testarrayofbools_is_present+0xcc>
    4994:	ldr	r0, [pc, #152]	; 4a34 <MyGame_Example_Monster_testarrayofbools_is_present+0xd0>
    4998:	bl	0 <__assert_fail>
    499c:	mov	r3, #24
    49a0:	strh	r3, [fp, #-8]
    49a4:	ldr	r0, [fp, #-16]
    49a8:	bl	73c <__flatbuffers_soffset_read_from_pe>
    49ac:	mov	r3, r0
    49b0:	rsb	r3, r3, #0
    49b4:	ldr	r2, [fp, #-16]
    49b8:	add	r3, r2, r3
    49bc:	str	r3, [fp, #-12]
    49c0:	ldr	r0, [fp, #-12]
    49c4:	bl	794 <__flatbuffers_voffset_read_from_pe>
    49c8:	mov	r3, r0
    49cc:	mov	r2, r3
    49d0:	ldrh	r3, [fp, #-8]
    49d4:	add	r3, r3, #3
    49d8:	lsl	r3, r3, #1
    49dc:	cmp	r2, r3
    49e0:	bcc	4a08 <MyGame_Example_Monster_testarrayofbools_is_present+0xa4>
    49e4:	ldrh	r3, [fp, #-8]
    49e8:	add	r3, r3, #2
    49ec:	lsl	r3, r3, #1
    49f0:	ldr	r2, [fp, #-12]
    49f4:	add	r3, r2, r3
    49f8:	mov	r0, r3
    49fc:	bl	794 <__flatbuffers_voffset_read_from_pe>
    4a00:	mov	r3, r0
    4a04:	strh	r3, [fp, #-6]
    4a08:	ldrh	r3, [fp, #-6]
    4a0c:	cmp	r3, #0
    4a10:	movne	r3, #1
    4a14:	moveq	r3, #0
    4a18:	uxtb	r3, r3
    4a1c:	mov	r0, r3
    4a20:	sub	sp, fp, #4
    4a24:	pop	{fp, pc}
    4a28:	.word	0x00003698
    4a2c:	.word	0x000002ca
    4a30:	.word	0x000000c8
    4a34:	.word	0x0000015c

00004a38 <MyGame_Example_Monster_enemy>:
    4a38:	push	{fp, lr}
    4a3c:	add	fp, sp, #4
    4a40:	sub	sp, sp, #24
    4a44:	str	r0, [fp, #-24]	; 0xffffffe8
    4a48:	mov	r3, #0
    4a4c:	strh	r3, [fp, #-6]
    4a50:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4a54:	cmp	r3, #0
    4a58:	bne	4a70 <MyGame_Example_Monster_enemy+0x38>
    4a5c:	ldr	r3, [pc, #188]	; 4b20 <MyGame_Example_Monster_enemy+0xe8>
    4a60:	mov	r2, #716	; 0x2cc
    4a64:	ldr	r1, [pc, #184]	; 4b24 <MyGame_Example_Monster_enemy+0xec>
    4a68:	ldr	r0, [pc, #184]	; 4b28 <MyGame_Example_Monster_enemy+0xf0>
    4a6c:	bl	0 <__assert_fail>
    4a70:	mov	r3, #12
    4a74:	strh	r3, [fp, #-8]
    4a78:	ldr	r0, [fp, #-24]	; 0xffffffe8
    4a7c:	bl	73c <__flatbuffers_soffset_read_from_pe>
    4a80:	mov	r3, r0
    4a84:	rsb	r3, r3, #0
    4a88:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4a8c:	add	r3, r2, r3
    4a90:	str	r3, [fp, #-12]
    4a94:	ldr	r0, [fp, #-12]
    4a98:	bl	794 <__flatbuffers_voffset_read_from_pe>
    4a9c:	mov	r3, r0
    4aa0:	mov	r2, r3
    4aa4:	ldrh	r3, [fp, #-8]
    4aa8:	add	r3, r3, #3
    4aac:	lsl	r3, r3, #1
    4ab0:	cmp	r2, r3
    4ab4:	bcc	4adc <MyGame_Example_Monster_enemy+0xa4>
    4ab8:	ldrh	r3, [fp, #-8]
    4abc:	add	r3, r3, #2
    4ac0:	lsl	r3, r3, #1
    4ac4:	ldr	r2, [fp, #-12]
    4ac8:	add	r3, r2, r3
    4acc:	mov	r0, r3
    4ad0:	bl	794 <__flatbuffers_voffset_read_from_pe>
    4ad4:	mov	r3, r0
    4ad8:	strh	r3, [fp, #-6]
    4adc:	ldrh	r3, [fp, #-6]
    4ae0:	cmp	r3, #0
    4ae4:	beq	4b10 <MyGame_Example_Monster_enemy+0xd8>
    4ae8:	ldrh	r3, [fp, #-6]
    4aec:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4af0:	add	r3, r2, r3
    4af4:	str	r3, [fp, #-16]
    4af8:	ldr	r0, [fp, #-16]
    4afc:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    4b00:	mov	r2, r0
    4b04:	ldr	r3, [fp, #-16]
    4b08:	add	r3, r3, r2
    4b0c:	b	4b14 <MyGame_Example_Monster_enemy+0xdc>
    4b10:	mov	r3, #0
    4b14:	mov	r0, r3
    4b18:	sub	sp, fp, #4
    4b1c:	pop	{fp, pc}
    4b20:	.word	0x0000370c
    4b24:	.word	0x000000c8
    4b28:	.word	0x0000015c

00004b2c <MyGame_Example_Monster_enemy_is_present>:
    4b2c:	push	{fp, lr}
    4b30:	add	fp, sp, #4
    4b34:	sub	sp, sp, #16
    4b38:	str	r0, [fp, #-16]
    4b3c:	mov	r3, #0
    4b40:	strh	r3, [fp, #-6]
    4b44:	ldr	r3, [fp, #-16]
    4b48:	cmp	r3, #0
    4b4c:	bne	4b64 <MyGame_Example_Monster_enemy_is_present+0x38>
    4b50:	ldr	r3, [pc, #152]	; 4bf0 <MyGame_Example_Monster_enemy_is_present+0xc4>
    4b54:	mov	r2, #716	; 0x2cc
    4b58:	ldr	r1, [pc, #148]	; 4bf4 <MyGame_Example_Monster_enemy_is_present+0xc8>
    4b5c:	ldr	r0, [pc, #148]	; 4bf8 <MyGame_Example_Monster_enemy_is_present+0xcc>
    4b60:	bl	0 <__assert_fail>
    4b64:	mov	r3, #12
    4b68:	strh	r3, [fp, #-8]
    4b6c:	ldr	r0, [fp, #-16]
    4b70:	bl	73c <__flatbuffers_soffset_read_from_pe>
    4b74:	mov	r3, r0
    4b78:	rsb	r3, r3, #0
    4b7c:	ldr	r2, [fp, #-16]
    4b80:	add	r3, r2, r3
    4b84:	str	r3, [fp, #-12]
    4b88:	ldr	r0, [fp, #-12]
    4b8c:	bl	794 <__flatbuffers_voffset_read_from_pe>
    4b90:	mov	r3, r0
    4b94:	mov	r2, r3
    4b98:	ldrh	r3, [fp, #-8]
    4b9c:	add	r3, r3, #3
    4ba0:	lsl	r3, r3, #1
    4ba4:	cmp	r2, r3
    4ba8:	bcc	4bd0 <MyGame_Example_Monster_enemy_is_present+0xa4>
    4bac:	ldrh	r3, [fp, #-8]
    4bb0:	add	r3, r3, #2
    4bb4:	lsl	r3, r3, #1
    4bb8:	ldr	r2, [fp, #-12]
    4bbc:	add	r3, r2, r3
    4bc0:	mov	r0, r3
    4bc4:	bl	794 <__flatbuffers_voffset_read_from_pe>
    4bc8:	mov	r3, r0
    4bcc:	strh	r3, [fp, #-6]
    4bd0:	ldrh	r3, [fp, #-6]
    4bd4:	cmp	r3, #0
    4bd8:	movne	r3, #1
    4bdc:	moveq	r3, #0
    4be0:	uxtb	r3, r3
    4be4:	mov	r0, r3
    4be8:	sub	sp, fp, #4
    4bec:	pop	{fp, pc}
    4bf0:	.word	0x00003924
    4bf4:	.word	0x000000c8
    4bf8:	.word	0x0000015c

00004bfc <MyGame_Example_Monster_test_type>:
    4bfc:	push	{fp, lr}
    4c00:	add	fp, sp, #4
    4c04:	sub	sp, sp, #16
    4c08:	str	r0, [fp, #-16]
    4c0c:	mov	r3, #0
    4c10:	strh	r3, [fp, #-6]
    4c14:	ldr	r3, [fp, #-16]
    4c18:	cmp	r3, #0
    4c1c:	bne	4c34 <MyGame_Example_Monster_test_type+0x38>
    4c20:	ldr	r3, [pc, #176]	; 4cd8 <MyGame_Example_Monster_test_type+0xdc>
    4c24:	ldr	r2, [pc, #176]	; 4cdc <MyGame_Example_Monster_test_type+0xe0>
    4c28:	ldr	r1, [pc, #176]	; 4ce0 <MyGame_Example_Monster_test_type+0xe4>
    4c2c:	ldr	r0, [pc, #176]	; 4ce4 <MyGame_Example_Monster_test_type+0xe8>
    4c30:	bl	0 <__assert_fail>
    4c34:	mov	r3, #7
    4c38:	strh	r3, [fp, #-8]
    4c3c:	ldr	r0, [fp, #-16]
    4c40:	bl	73c <__flatbuffers_soffset_read_from_pe>
    4c44:	mov	r3, r0
    4c48:	rsb	r3, r3, #0
    4c4c:	ldr	r2, [fp, #-16]
    4c50:	add	r3, r2, r3
    4c54:	str	r3, [fp, #-12]
    4c58:	ldr	r0, [fp, #-12]
    4c5c:	bl	794 <__flatbuffers_voffset_read_from_pe>
    4c60:	mov	r3, r0
    4c64:	mov	r2, r3
    4c68:	ldrh	r3, [fp, #-8]
    4c6c:	add	r3, r3, #3
    4c70:	lsl	r3, r3, #1
    4c74:	cmp	r2, r3
    4c78:	bcc	4ca0 <MyGame_Example_Monster_test_type+0xa4>
    4c7c:	ldrh	r3, [fp, #-8]
    4c80:	add	r3, r3, #2
    4c84:	lsl	r3, r3, #1
    4c88:	ldr	r2, [fp, #-12]
    4c8c:	add	r3, r2, r3
    4c90:	mov	r0, r3
    4c94:	bl	794 <__flatbuffers_voffset_read_from_pe>
    4c98:	mov	r3, r0
    4c9c:	strh	r3, [fp, #-6]
    4ca0:	ldrh	r3, [fp, #-6]
    4ca4:	cmp	r3, #0
    4ca8:	beq	4cc8 <MyGame_Example_Monster_test_type+0xcc>
    4cac:	ldrh	r3, [fp, #-6]
    4cb0:	ldr	r2, [fp, #-16]
    4cb4:	add	r3, r2, r3
    4cb8:	mov	r0, r3
    4cbc:	bl	7ec <__flatbuffers_utype_read_from_pe>
    4cc0:	mov	r3, r0
    4cc4:	b	4ccc <MyGame_Example_Monster_test_type+0xd0>
    4cc8:	mov	r3, #0
    4ccc:	mov	r0, r3
    4cd0:	sub	sp, fp, #4
    4cd4:	pop	{fp, pc}
    4cd8:	.word	0x00003778
    4cdc:	.word	0x000002cd
    4ce0:	.word	0x000000c8
    4ce4:	.word	0x0000015c

00004ce8 <MyGame_Example_Monster_test>:
    4ce8:	push	{fp, lr}
    4cec:	add	fp, sp, #4
    4cf0:	sub	sp, sp, #24
    4cf4:	str	r0, [fp, #-24]	; 0xffffffe8
    4cf8:	mov	r3, #0
    4cfc:	strh	r3, [fp, #-6]
    4d00:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4d04:	cmp	r3, #0
    4d08:	bne	4d20 <MyGame_Example_Monster_test+0x38>
    4d0c:	ldr	r3, [pc, #188]	; 4dd0 <MyGame_Example_Monster_test+0xe8>
    4d10:	ldr	r2, [pc, #188]	; 4dd4 <MyGame_Example_Monster_test+0xec>
    4d14:	ldr	r1, [pc, #188]	; 4dd8 <MyGame_Example_Monster_test+0xf0>
    4d18:	ldr	r0, [pc, #188]	; 4ddc <MyGame_Example_Monster_test+0xf4>
    4d1c:	bl	0 <__assert_fail>
    4d20:	mov	r3, #8
    4d24:	strh	r3, [fp, #-8]
    4d28:	ldr	r0, [fp, #-24]	; 0xffffffe8
    4d2c:	bl	73c <__flatbuffers_soffset_read_from_pe>
    4d30:	mov	r3, r0
    4d34:	rsb	r3, r3, #0
    4d38:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4d3c:	add	r3, r2, r3
    4d40:	str	r3, [fp, #-12]
    4d44:	ldr	r0, [fp, #-12]
    4d48:	bl	794 <__flatbuffers_voffset_read_from_pe>
    4d4c:	mov	r3, r0
    4d50:	mov	r2, r3
    4d54:	ldrh	r3, [fp, #-8]
    4d58:	add	r3, r3, #3
    4d5c:	lsl	r3, r3, #1
    4d60:	cmp	r2, r3
    4d64:	bcc	4d8c <MyGame_Example_Monster_test+0xa4>
    4d68:	ldrh	r3, [fp, #-8]
    4d6c:	add	r3, r3, #2
    4d70:	lsl	r3, r3, #1
    4d74:	ldr	r2, [fp, #-12]
    4d78:	add	r3, r2, r3
    4d7c:	mov	r0, r3
    4d80:	bl	794 <__flatbuffers_voffset_read_from_pe>
    4d84:	mov	r3, r0
    4d88:	strh	r3, [fp, #-6]
    4d8c:	ldrh	r3, [fp, #-6]
    4d90:	cmp	r3, #0
    4d94:	beq	4dc0 <MyGame_Example_Monster_test+0xd8>
    4d98:	ldrh	r3, [fp, #-6]
    4d9c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4da0:	add	r3, r2, r3
    4da4:	str	r3, [fp, #-16]
    4da8:	ldr	r0, [fp, #-16]
    4dac:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    4db0:	mov	r2, r0
    4db4:	ldr	r3, [fp, #-16]
    4db8:	add	r3, r3, r2
    4dbc:	b	4dc4 <MyGame_Example_Monster_test+0xdc>
    4dc0:	mov	r3, #0
    4dc4:	mov	r0, r3
    4dc8:	sub	sp, fp, #4
    4dcc:	pop	{fp, pc}
    4dd0:	.word	0x0000379c
    4dd4:	.word	0x000002cd
    4dd8:	.word	0x000000c8
    4ddc:	.word	0x0000015c

00004de0 <MyGame_Example_Monster_test_union>:
    4de0:	push	{fp, lr}
    4de4:	add	fp, sp, #4
    4de8:	sub	sp, sp, #16
    4dec:	str	r0, [fp, #-16]
    4df0:	str	r1, [fp, #-20]	; 0xffffffec
    4df4:	mov	r3, #0
    4df8:	strb	r3, [fp, #-12]
    4dfc:	mov	r3, #0
    4e00:	str	r3, [fp, #-8]
    4e04:	ldr	r0, [fp, #-20]	; 0xffffffec
    4e08:	bl	4bfc <MyGame_Example_Monster_test_type>
    4e0c:	mov	r3, r0
    4e10:	strb	r3, [fp, #-12]
    4e14:	ldrb	r3, [fp, #-12]
    4e18:	cmp	r3, #0
    4e1c:	bne	4e38 <MyGame_Example_Monster_test_union+0x58>
    4e20:	ldr	r3, [fp, #-16]
    4e24:	mov	r2, r3
    4e28:	sub	r3, fp, #12
    4e2c:	ldm	r3, {r0, r1}
    4e30:	stm	r2, {r0, r1}
    4e34:	b	4e5c <MyGame_Example_Monster_test_union+0x7c>
    4e38:	ldr	r0, [fp, #-20]	; 0xffffffec
    4e3c:	bl	4ce8 <MyGame_Example_Monster_test>
    4e40:	mov	r3, r0
    4e44:	str	r3, [fp, #-8]
    4e48:	ldr	r3, [fp, #-16]
    4e4c:	mov	r2, r3
    4e50:	sub	r3, fp, #12
    4e54:	ldm	r3, {r0, r1}
    4e58:	stm	r2, {r0, r1}
    4e5c:	ldr	r0, [fp, #-16]
    4e60:	sub	sp, fp, #4
    4e64:	pop	{fp, pc}

00004e68 <MyGame_Example_Monster_test4>:
    4e68:	push	{fp, lr}
    4e6c:	add	fp, sp, #4
    4e70:	sub	sp, sp, #24
    4e74:	str	r0, [fp, #-24]	; 0xffffffe8
    4e78:	mov	r3, #0
    4e7c:	strh	r3, [fp, #-6]
    4e80:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4e84:	cmp	r3, #0
    4e88:	bne	4ea0 <MyGame_Example_Monster_test4+0x38>
    4e8c:	ldr	r3, [pc, #192]	; 4f54 <MyGame_Example_Monster_test4+0xec>
    4e90:	ldr	r2, [pc, #192]	; 4f58 <MyGame_Example_Monster_test4+0xf0>
    4e94:	ldr	r1, [pc, #192]	; 4f5c <MyGame_Example_Monster_test4+0xf4>
    4e98:	ldr	r0, [pc, #192]	; 4f60 <MyGame_Example_Monster_test4+0xf8>
    4e9c:	bl	0 <__assert_fail>
    4ea0:	mov	r3, #9
    4ea4:	strh	r3, [fp, #-8]
    4ea8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    4eac:	bl	73c <__flatbuffers_soffset_read_from_pe>
    4eb0:	mov	r3, r0
    4eb4:	rsb	r3, r3, #0
    4eb8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4ebc:	add	r3, r2, r3
    4ec0:	str	r3, [fp, #-12]
    4ec4:	ldr	r0, [fp, #-12]
    4ec8:	bl	794 <__flatbuffers_voffset_read_from_pe>
    4ecc:	mov	r3, r0
    4ed0:	mov	r2, r3
    4ed4:	ldrh	r3, [fp, #-8]
    4ed8:	add	r3, r3, #3
    4edc:	lsl	r3, r3, #1
    4ee0:	cmp	r2, r3
    4ee4:	bcc	4f0c <MyGame_Example_Monster_test4+0xa4>
    4ee8:	ldrh	r3, [fp, #-8]
    4eec:	add	r3, r3, #2
    4ef0:	lsl	r3, r3, #1
    4ef4:	ldr	r2, [fp, #-12]
    4ef8:	add	r3, r2, r3
    4efc:	mov	r0, r3
    4f00:	bl	794 <__flatbuffers_voffset_read_from_pe>
    4f04:	mov	r3, r0
    4f08:	strh	r3, [fp, #-6]
    4f0c:	ldrh	r3, [fp, #-6]
    4f10:	cmp	r3, #0
    4f14:	beq	4f44 <MyGame_Example_Monster_test4+0xdc>
    4f18:	ldrh	r3, [fp, #-6]
    4f1c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4f20:	add	r3, r2, r3
    4f24:	str	r3, [fp, #-16]
    4f28:	ldr	r0, [fp, #-16]
    4f2c:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    4f30:	mov	r3, r0
    4f34:	add	r3, r3, #4
    4f38:	ldr	r2, [fp, #-16]
    4f3c:	add	r3, r2, r3
    4f40:	b	4f48 <MyGame_Example_Monster_test4+0xe0>
    4f44:	mov	r3, #0
    4f48:	mov	r0, r3
    4f4c:	sub	sp, fp, #4
    4f50:	pop	{fp, pc}
    4f54:	.word	0x00003614
    4f58:	.word	0x000002ce
    4f5c:	.word	0x000000c8
    4f60:	.word	0x0000015c

00004f64 <MyGame_Example_Monster_testnestedflatbuffer>:
    4f64:	push	{fp, lr}
    4f68:	add	fp, sp, #4
    4f6c:	sub	sp, sp, #24
    4f70:	str	r0, [fp, #-24]	; 0xffffffe8
    4f74:	mov	r3, #0
    4f78:	strh	r3, [fp, #-6]
    4f7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4f80:	cmp	r3, #0
    4f84:	bne	4f9c <MyGame_Example_Monster_testnestedflatbuffer+0x38>
    4f88:	ldr	r3, [pc, #192]	; 5050 <MyGame_Example_Monster_testnestedflatbuffer+0xec>
    4f8c:	mov	r2, #720	; 0x2d0
    4f90:	ldr	r1, [pc, #188]	; 5054 <MyGame_Example_Monster_testnestedflatbuffer+0xf0>
    4f94:	ldr	r0, [pc, #188]	; 5058 <MyGame_Example_Monster_testnestedflatbuffer+0xf4>
    4f98:	bl	0 <__assert_fail>
    4f9c:	mov	r3, #13
    4fa0:	strh	r3, [fp, #-8]
    4fa4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    4fa8:	bl	73c <__flatbuffers_soffset_read_from_pe>
    4fac:	mov	r3, r0
    4fb0:	rsb	r3, r3, #0
    4fb4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4fb8:	add	r3, r2, r3
    4fbc:	str	r3, [fp, #-12]
    4fc0:	ldr	r0, [fp, #-12]
    4fc4:	bl	794 <__flatbuffers_voffset_read_from_pe>
    4fc8:	mov	r3, r0
    4fcc:	mov	r2, r3
    4fd0:	ldrh	r3, [fp, #-8]
    4fd4:	add	r3, r3, #3
    4fd8:	lsl	r3, r3, #1
    4fdc:	cmp	r2, r3
    4fe0:	bcc	5008 <MyGame_Example_Monster_testnestedflatbuffer+0xa4>
    4fe4:	ldrh	r3, [fp, #-8]
    4fe8:	add	r3, r3, #2
    4fec:	lsl	r3, r3, #1
    4ff0:	ldr	r2, [fp, #-12]
    4ff4:	add	r3, r2, r3
    4ff8:	mov	r0, r3
    4ffc:	bl	794 <__flatbuffers_voffset_read_from_pe>
    5000:	mov	r3, r0
    5004:	strh	r3, [fp, #-6]
    5008:	ldrh	r3, [fp, #-6]
    500c:	cmp	r3, #0
    5010:	beq	5040 <MyGame_Example_Monster_testnestedflatbuffer+0xdc>
    5014:	ldrh	r3, [fp, #-6]
    5018:	ldr	r2, [fp, #-24]	; 0xffffffe8
    501c:	add	r3, r2, r3
    5020:	str	r3, [fp, #-16]
    5024:	ldr	r0, [fp, #-16]
    5028:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    502c:	mov	r3, r0
    5030:	add	r3, r3, #4
    5034:	ldr	r2, [fp, #-16]
    5038:	add	r3, r2, r3
    503c:	b	5044 <MyGame_Example_Monster_testnestedflatbuffer+0xe0>
    5040:	mov	r3, #0
    5044:	mov	r0, r3
    5048:	sub	sp, fp, #4
    504c:	pop	{fp, pc}
    5050:	.word	0x00003d24
    5054:	.word	0x000000c8
    5058:	.word	0x0000015c

0000505c <MyGame_Example_Monster_testnestedflatbuffer_as_root>:
    505c:	push	{fp, lr}
    5060:	add	fp, sp, #4
    5064:	sub	sp, sp, #16
    5068:	str	r0, [fp, #-16]
    506c:	ldr	r3, [pc, #88]	; 50cc <MyGame_Example_Monster_testnestedflatbuffer_as_root+0x70>
    5070:	str	r3, [fp, #-8]
    5074:	ldr	r0, [fp, #-16]
    5078:	bl	4f64 <MyGame_Example_Monster_testnestedflatbuffer>
    507c:	str	r0, [fp, #-12]
    5080:	ldr	r3, [fp, #-12]
    5084:	cmp	r3, #0
    5088:	beq	50bc <MyGame_Example_Monster_testnestedflatbuffer_as_root+0x60>
    508c:	ldr	r1, [fp, #-8]
    5090:	ldr	r0, [fp, #-12]
    5094:	bl	19fc <flatbuffers_has_identifier>
    5098:	mov	r3, r0
    509c:	cmp	r3, #0
    50a0:	beq	50bc <MyGame_Example_Monster_testnestedflatbuffer_as_root+0x60>
    50a4:	ldr	r0, [fp, #-12]
    50a8:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    50ac:	mov	r2, r0
    50b0:	ldr	r3, [fp, #-12]
    50b4:	add	r3, r3, r2
    50b8:	b	50c0 <MyGame_Example_Monster_testnestedflatbuffer_as_root+0x64>
    50bc:	mov	r3, #0
    50c0:	mov	r0, r3
    50c4:	sub	sp, fp, #4
    50c8:	pop	{fp, pc}
    50cc:	.word	0x00000134

000050d0 <MyGame_Example_Monster_testempty>:
    50d0:	push	{fp, lr}
    50d4:	add	fp, sp, #4
    50d8:	sub	sp, sp, #24
    50dc:	str	r0, [fp, #-24]	; 0xffffffe8
    50e0:	mov	r3, #0
    50e4:	strh	r3, [fp, #-6]
    50e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    50ec:	cmp	r3, #0
    50f0:	bne	5108 <MyGame_Example_Monster_testempty+0x38>
    50f4:	ldr	r3, [pc, #188]	; 51b8 <MyGame_Example_Monster_testempty+0xe8>
    50f8:	ldr	r2, [pc, #188]	; 51bc <MyGame_Example_Monster_testempty+0xec>
    50fc:	ldr	r1, [pc, #188]	; 51c0 <MyGame_Example_Monster_testempty+0xf0>
    5100:	ldr	r0, [pc, #188]	; 51c4 <MyGame_Example_Monster_testempty+0xf4>
    5104:	bl	0 <__assert_fail>
    5108:	mov	r3, #14
    510c:	strh	r3, [fp, #-8]
    5110:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5114:	bl	73c <__flatbuffers_soffset_read_from_pe>
    5118:	mov	r3, r0
    511c:	rsb	r3, r3, #0
    5120:	ldr	r2, [fp, #-24]	; 0xffffffe8
    5124:	add	r3, r2, r3
    5128:	str	r3, [fp, #-12]
    512c:	ldr	r0, [fp, #-12]
    5130:	bl	794 <__flatbuffers_voffset_read_from_pe>
    5134:	mov	r3, r0
    5138:	mov	r2, r3
    513c:	ldrh	r3, [fp, #-8]
    5140:	add	r3, r3, #3
    5144:	lsl	r3, r3, #1
    5148:	cmp	r2, r3
    514c:	bcc	5174 <MyGame_Example_Monster_testempty+0xa4>
    5150:	ldrh	r3, [fp, #-8]
    5154:	add	r3, r3, #2
    5158:	lsl	r3, r3, #1
    515c:	ldr	r2, [fp, #-12]
    5160:	add	r3, r2, r3
    5164:	mov	r0, r3
    5168:	bl	794 <__flatbuffers_voffset_read_from_pe>
    516c:	mov	r3, r0
    5170:	strh	r3, [fp, #-6]
    5174:	ldrh	r3, [fp, #-6]
    5178:	cmp	r3, #0
    517c:	beq	51a8 <MyGame_Example_Monster_testempty+0xd8>
    5180:	ldrh	r3, [fp, #-6]
    5184:	ldr	r2, [fp, #-24]	; 0xffffffe8
    5188:	add	r3, r2, r3
    518c:	str	r3, [fp, #-16]
    5190:	ldr	r0, [fp, #-16]
    5194:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    5198:	mov	r2, r0
    519c:	ldr	r3, [fp, #-16]
    51a0:	add	r3, r3, r2
    51a4:	b	51ac <MyGame_Example_Monster_testempty+0xdc>
    51a8:	mov	r3, #0
    51ac:	mov	r0, r3
    51b0:	sub	sp, fp, #4
    51b4:	pop	{fp, pc}
    51b8:	.word	0x00003820
    51bc:	.word	0x000002d2
    51c0:	.word	0x000000c8
    51c4:	.word	0x0000015c

000051c8 <MyGame_Example_Monster_testempty_is_present>:
    51c8:	push	{fp, lr}
    51cc:	add	fp, sp, #4
    51d0:	sub	sp, sp, #16
    51d4:	str	r0, [fp, #-16]
    51d8:	mov	r3, #0
    51dc:	strh	r3, [fp, #-6]
    51e0:	ldr	r3, [fp, #-16]
    51e4:	cmp	r3, #0
    51e8:	bne	5200 <MyGame_Example_Monster_testempty_is_present+0x38>
    51ec:	ldr	r3, [pc, #152]	; 528c <MyGame_Example_Monster_testempty_is_present+0xc4>
    51f0:	ldr	r2, [pc, #152]	; 5290 <MyGame_Example_Monster_testempty_is_present+0xc8>
    51f4:	ldr	r1, [pc, #152]	; 5294 <MyGame_Example_Monster_testempty_is_present+0xcc>
    51f8:	ldr	r0, [pc, #152]	; 5298 <MyGame_Example_Monster_testempty_is_present+0xd0>
    51fc:	bl	0 <__assert_fail>
    5200:	mov	r3, #14
    5204:	strh	r3, [fp, #-8]
    5208:	ldr	r0, [fp, #-16]
    520c:	bl	73c <__flatbuffers_soffset_read_from_pe>
    5210:	mov	r3, r0
    5214:	rsb	r3, r3, #0
    5218:	ldr	r2, [fp, #-16]
    521c:	add	r3, r2, r3
    5220:	str	r3, [fp, #-12]
    5224:	ldr	r0, [fp, #-12]
    5228:	bl	794 <__flatbuffers_voffset_read_from_pe>
    522c:	mov	r3, r0
    5230:	mov	r2, r3
    5234:	ldrh	r3, [fp, #-8]
    5238:	add	r3, r3, #3
    523c:	lsl	r3, r3, #1
    5240:	cmp	r2, r3
    5244:	bcc	526c <MyGame_Example_Monster_testempty_is_present+0xa4>
    5248:	ldrh	r3, [fp, #-8]
    524c:	add	r3, r3, #2
    5250:	lsl	r3, r3, #1
    5254:	ldr	r2, [fp, #-12]
    5258:	add	r3, r2, r3
    525c:	mov	r0, r3
    5260:	bl	794 <__flatbuffers_voffset_read_from_pe>
    5264:	mov	r3, r0
    5268:	strh	r3, [fp, #-6]
    526c:	ldrh	r3, [fp, #-6]
    5270:	cmp	r3, #0
    5274:	movne	r3, #1
    5278:	moveq	r3, #0
    527c:	uxtb	r3, r3
    5280:	mov	r0, r3
    5284:	sub	sp, fp, #4
    5288:	pop	{fp, pc}
    528c:	.word	0x000037f4
    5290:	.word	0x000002d2
    5294:	.word	0x000000c8
    5298:	.word	0x0000015c

0000529c <MyGame_Example_Monster_testbool>:
    529c:	push	{fp, lr}
    52a0:	add	fp, sp, #4
    52a4:	sub	sp, sp, #16
    52a8:	str	r0, [fp, #-16]
    52ac:	mov	r3, #0
    52b0:	strh	r3, [fp, #-6]
    52b4:	ldr	r3, [fp, #-16]
    52b8:	cmp	r3, #0
    52bc:	bne	52d4 <MyGame_Example_Monster_testbool+0x38>
    52c0:	ldr	r3, [pc, #176]	; 5378 <MyGame_Example_Monster_testbool+0xdc>
    52c4:	ldr	r2, [pc, #176]	; 537c <MyGame_Example_Monster_testbool+0xe0>
    52c8:	ldr	r1, [pc, #176]	; 5380 <MyGame_Example_Monster_testbool+0xe4>
    52cc:	ldr	r0, [pc, #176]	; 5384 <MyGame_Example_Monster_testbool+0xe8>
    52d0:	bl	0 <__assert_fail>
    52d4:	mov	r3, #15
    52d8:	strh	r3, [fp, #-8]
    52dc:	ldr	r0, [fp, #-16]
    52e0:	bl	73c <__flatbuffers_soffset_read_from_pe>
    52e4:	mov	r3, r0
    52e8:	rsb	r3, r3, #0
    52ec:	ldr	r2, [fp, #-16]
    52f0:	add	r3, r2, r3
    52f4:	str	r3, [fp, #-12]
    52f8:	ldr	r0, [fp, #-12]
    52fc:	bl	794 <__flatbuffers_voffset_read_from_pe>
    5300:	mov	r3, r0
    5304:	mov	r2, r3
    5308:	ldrh	r3, [fp, #-8]
    530c:	add	r3, r3, #3
    5310:	lsl	r3, r3, #1
    5314:	cmp	r2, r3
    5318:	bcc	5340 <MyGame_Example_Monster_testbool+0xa4>
    531c:	ldrh	r3, [fp, #-8]
    5320:	add	r3, r3, #2
    5324:	lsl	r3, r3, #1
    5328:	ldr	r2, [fp, #-12]
    532c:	add	r3, r2, r3
    5330:	mov	r0, r3
    5334:	bl	794 <__flatbuffers_voffset_read_from_pe>
    5338:	mov	r3, r0
    533c:	strh	r3, [fp, #-6]
    5340:	ldrh	r3, [fp, #-6]
    5344:	cmp	r3, #0
    5348:	beq	5368 <MyGame_Example_Monster_testbool+0xcc>
    534c:	ldrh	r3, [fp, #-6]
    5350:	ldr	r2, [fp, #-16]
    5354:	add	r3, r2, r3
    5358:	mov	r0, r3
    535c:	bl	5c8 <flatbuffers_bool_read_from_pe>
    5360:	mov	r3, r0
    5364:	b	536c <MyGame_Example_Monster_testbool+0xd0>
    5368:	mov	r3, #1
    536c:	mov	r0, r3
    5370:	sub	sp, fp, #4
    5374:	pop	{fp, pc}
    5378:	.word	0x000037d4
    537c:	.word	0x000002d3
    5380:	.word	0x000000c8
    5384:	.word	0x0000015c

00005388 <MyGame_Example_TypeAliases_as_root>:
    5388:	push	{fp, lr}
    538c:	add	fp, sp, #4
    5390:	sub	sp, sp, #16
    5394:	str	r0, [fp, #-16]
    5398:	ldr	r3, [pc, #76]	; 53ec <MyGame_Example_TypeAliases_as_root+0x64>
    539c:	str	r3, [fp, #-8]
    53a0:	ldr	r3, [fp, #-16]
    53a4:	cmp	r3, #0
    53a8:	beq	53dc <MyGame_Example_TypeAliases_as_root+0x54>
    53ac:	ldr	r1, [fp, #-8]
    53b0:	ldr	r0, [fp, #-16]
    53b4:	bl	19fc <flatbuffers_has_identifier>
    53b8:	mov	r3, r0
    53bc:	cmp	r3, #0
    53c0:	beq	53dc <MyGame_Example_TypeAliases_as_root+0x54>
    53c4:	ldr	r0, [fp, #-16]
    53c8:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    53cc:	mov	r2, r0
    53d0:	ldr	r3, [fp, #-16]
    53d4:	add	r3, r3, r2
    53d8:	b	53e0 <MyGame_Example_TypeAliases_as_root+0x58>
    53dc:	mov	r3, #0
    53e0:	mov	r0, r3
    53e4:	sub	sp, fp, #4
    53e8:	pop	{fp, pc}
    53ec:	.word	0x00000134

000053f0 <MyGame_Example_TypeAliases_i8>:
    53f0:	push	{fp, lr}
    53f4:	add	fp, sp, #4
    53f8:	sub	sp, sp, #16
    53fc:	str	r0, [fp, #-16]
    5400:	mov	r3, #0
    5404:	strh	r3, [fp, #-6]
    5408:	ldr	r3, [fp, #-16]
    540c:	cmp	r3, #0
    5410:	bne	5428 <MyGame_Example_TypeAliases_i8+0x38>
    5414:	ldr	r3, [pc, #176]	; 54cc <MyGame_Example_TypeAliases_i8+0xdc>
    5418:	ldr	r2, [pc, #176]	; 54d0 <MyGame_Example_TypeAliases_i8+0xe0>
    541c:	ldr	r1, [pc, #176]	; 54d4 <MyGame_Example_TypeAliases_i8+0xe4>
    5420:	ldr	r0, [pc, #176]	; 54d8 <MyGame_Example_TypeAliases_i8+0xe8>
    5424:	bl	0 <__assert_fail>
    5428:	mov	r3, #0
    542c:	strh	r3, [fp, #-8]
    5430:	ldr	r0, [fp, #-16]
    5434:	bl	73c <__flatbuffers_soffset_read_from_pe>
    5438:	mov	r3, r0
    543c:	rsb	r3, r3, #0
    5440:	ldr	r2, [fp, #-16]
    5444:	add	r3, r2, r3
    5448:	str	r3, [fp, #-12]
    544c:	ldr	r0, [fp, #-12]
    5450:	bl	794 <__flatbuffers_voffset_read_from_pe>
    5454:	mov	r3, r0
    5458:	mov	r2, r3
    545c:	ldrh	r3, [fp, #-8]
    5460:	add	r3, r3, #3
    5464:	lsl	r3, r3, #1
    5468:	cmp	r2, r3
    546c:	bcc	5494 <MyGame_Example_TypeAliases_i8+0xa4>
    5470:	ldrh	r3, [fp, #-8]
    5474:	add	r3, r3, #2
    5478:	lsl	r3, r3, #1
    547c:	ldr	r2, [fp, #-12]
    5480:	add	r3, r2, r3
    5484:	mov	r0, r3
    5488:	bl	794 <__flatbuffers_voffset_read_from_pe>
    548c:	mov	r3, r0
    5490:	strh	r3, [fp, #-6]
    5494:	ldrh	r3, [fp, #-6]
    5498:	cmp	r3, #0
    549c:	beq	54bc <MyGame_Example_TypeAliases_i8+0xcc>
    54a0:	ldrh	r3, [fp, #-6]
    54a4:	ldr	r2, [fp, #-16]
    54a8:	add	r3, r2, r3
    54ac:	mov	r0, r3
    54b0:	bl	254 <flatbuffers_int8_read_from_pe>
    54b4:	mov	r3, r0
    54b8:	b	54c0 <MyGame_Example_TypeAliases_i8+0xd0>
    54bc:	mov	r3, #0
    54c0:	mov	r0, r3
    54c4:	sub	sp, fp, #4
    54c8:	pop	{fp, pc}
    54cc:	.word	0x000033b8
    54d0:	.word	0x000002ed
    54d4:	.word	0x000000c8
    54d8:	.word	0x0000015c

000054dc <MyGame_Example_TypeAliases_u8>:
    54dc:	push	{fp, lr}
    54e0:	add	fp, sp, #4
    54e4:	sub	sp, sp, #16
    54e8:	str	r0, [fp, #-16]
    54ec:	mov	r3, #0
    54f0:	strh	r3, [fp, #-6]
    54f4:	ldr	r3, [fp, #-16]
    54f8:	cmp	r3, #0
    54fc:	bne	5514 <MyGame_Example_TypeAliases_u8+0x38>
    5500:	ldr	r3, [pc, #176]	; 55b8 <MyGame_Example_TypeAliases_u8+0xdc>
    5504:	ldr	r2, [pc, #176]	; 55bc <MyGame_Example_TypeAliases_u8+0xe0>
    5508:	ldr	r1, [pc, #176]	; 55c0 <MyGame_Example_TypeAliases_u8+0xe4>
    550c:	ldr	r0, [pc, #176]	; 55c4 <MyGame_Example_TypeAliases_u8+0xe8>
    5510:	bl	0 <__assert_fail>
    5514:	mov	r3, #1
    5518:	strh	r3, [fp, #-8]
    551c:	ldr	r0, [fp, #-16]
    5520:	bl	73c <__flatbuffers_soffset_read_from_pe>
    5524:	mov	r3, r0
    5528:	rsb	r3, r3, #0
    552c:	ldr	r2, [fp, #-16]
    5530:	add	r3, r2, r3
    5534:	str	r3, [fp, #-12]
    5538:	ldr	r0, [fp, #-12]
    553c:	bl	794 <__flatbuffers_voffset_read_from_pe>
    5540:	mov	r3, r0
    5544:	mov	r2, r3
    5548:	ldrh	r3, [fp, #-8]
    554c:	add	r3, r3, #3
    5550:	lsl	r3, r3, #1
    5554:	cmp	r2, r3
    5558:	bcc	5580 <MyGame_Example_TypeAliases_u8+0xa4>
    555c:	ldrh	r3, [fp, #-8]
    5560:	add	r3, r3, #2
    5564:	lsl	r3, r3, #1
    5568:	ldr	r2, [fp, #-12]
    556c:	add	r3, r2, r3
    5570:	mov	r0, r3
    5574:	bl	794 <__flatbuffers_voffset_read_from_pe>
    5578:	mov	r3, r0
    557c:	strh	r3, [fp, #-6]
    5580:	ldrh	r3, [fp, #-6]
    5584:	cmp	r3, #0
    5588:	beq	55a8 <MyGame_Example_TypeAliases_u8+0xcc>
    558c:	ldrh	r3, [fp, #-6]
    5590:	ldr	r2, [fp, #-16]
    5594:	add	r3, r2, r3
    5598:	mov	r0, r3
    559c:	bl	50 <flatbuffers_uint8_read_from_pe>
    55a0:	mov	r3, r0
    55a4:	b	55ac <MyGame_Example_TypeAliases_u8+0xd0>
    55a8:	mov	r3, #0
    55ac:	mov	r0, r3
    55b0:	sub	sp, fp, #4
    55b4:	pop	{fp, pc}
    55b8:	.word	0x00003438
    55bc:	.word	0x000002ee
    55c0:	.word	0x000000c8
    55c4:	.word	0x0000015c

000055c8 <MyGame_Example_TypeAliases_i16>:
    55c8:	push	{fp, lr}
    55cc:	add	fp, sp, #4
    55d0:	sub	sp, sp, #16
    55d4:	str	r0, [fp, #-16]
    55d8:	mov	r3, #0
    55dc:	strh	r3, [fp, #-6]
    55e0:	ldr	r3, [fp, #-16]
    55e4:	cmp	r3, #0
    55e8:	bne	5600 <MyGame_Example_TypeAliases_i16+0x38>
    55ec:	ldr	r3, [pc, #176]	; 56a4 <MyGame_Example_TypeAliases_i16+0xdc>
    55f0:	ldr	r2, [pc, #176]	; 56a8 <MyGame_Example_TypeAliases_i16+0xe0>
    55f4:	ldr	r1, [pc, #176]	; 56ac <MyGame_Example_TypeAliases_i16+0xe4>
    55f8:	ldr	r0, [pc, #176]	; 56b0 <MyGame_Example_TypeAliases_i16+0xe8>
    55fc:	bl	0 <__assert_fail>
    5600:	mov	r3, #2
    5604:	strh	r3, [fp, #-8]
    5608:	ldr	r0, [fp, #-16]
    560c:	bl	73c <__flatbuffers_soffset_read_from_pe>
    5610:	mov	r3, r0
    5614:	rsb	r3, r3, #0
    5618:	ldr	r2, [fp, #-16]
    561c:	add	r3, r2, r3
    5620:	str	r3, [fp, #-12]
    5624:	ldr	r0, [fp, #-12]
    5628:	bl	794 <__flatbuffers_voffset_read_from_pe>
    562c:	mov	r3, r0
    5630:	mov	r2, r3
    5634:	ldrh	r3, [fp, #-8]
    5638:	add	r3, r3, #3
    563c:	lsl	r3, r3, #1
    5640:	cmp	r2, r3
    5644:	bcc	566c <MyGame_Example_TypeAliases_i16+0xa4>
    5648:	ldrh	r3, [fp, #-8]
    564c:	add	r3, r3, #2
    5650:	lsl	r3, r3, #1
    5654:	ldr	r2, [fp, #-12]
    5658:	add	r3, r2, r3
    565c:	mov	r0, r3
    5660:	bl	794 <__flatbuffers_voffset_read_from_pe>
    5664:	mov	r3, r0
    5668:	strh	r3, [fp, #-6]
    566c:	ldrh	r3, [fp, #-6]
    5670:	cmp	r3, #0
    5674:	beq	5694 <MyGame_Example_TypeAliases_i16+0xcc>
    5678:	ldrh	r3, [fp, #-6]
    567c:	ldr	r2, [fp, #-16]
    5680:	add	r3, r2, r3
    5684:	mov	r0, r3
    5688:	bl	2d4 <flatbuffers_int16_read_from_pe>
    568c:	mov	r3, r0
    5690:	b	5698 <MyGame_Example_TypeAliases_i16+0xd0>
    5694:	mov	r3, #0
    5698:	mov	r0, r3
    569c:	sub	sp, fp, #4
    56a0:	pop	{fp, pc}
    56a4:	.word	0x000033d8
    56a8:	.word	0x000002ef
    56ac:	.word	0x000000c8
    56b0:	.word	0x0000015c

000056b4 <MyGame_Example_TypeAliases_u16>:
    56b4:	push	{fp, lr}
    56b8:	add	fp, sp, #4
    56bc:	sub	sp, sp, #16
    56c0:	str	r0, [fp, #-16]
    56c4:	mov	r3, #0
    56c8:	strh	r3, [fp, #-6]
    56cc:	ldr	r3, [fp, #-16]
    56d0:	cmp	r3, #0
    56d4:	bne	56ec <MyGame_Example_TypeAliases_u16+0x38>
    56d8:	ldr	r3, [pc, #176]	; 5790 <MyGame_Example_TypeAliases_u16+0xdc>
    56dc:	mov	r2, #752	; 0x2f0
    56e0:	ldr	r1, [pc, #172]	; 5794 <MyGame_Example_TypeAliases_u16+0xe0>
    56e4:	ldr	r0, [pc, #172]	; 5798 <MyGame_Example_TypeAliases_u16+0xe4>
    56e8:	bl	0 <__assert_fail>
    56ec:	mov	r3, #3
    56f0:	strh	r3, [fp, #-8]
    56f4:	ldr	r0, [fp, #-16]
    56f8:	bl	73c <__flatbuffers_soffset_read_from_pe>
    56fc:	mov	r3, r0
    5700:	rsb	r3, r3, #0
    5704:	ldr	r2, [fp, #-16]
    5708:	add	r3, r2, r3
    570c:	str	r3, [fp, #-12]
    5710:	ldr	r0, [fp, #-12]
    5714:	bl	794 <__flatbuffers_voffset_read_from_pe>
    5718:	mov	r3, r0
    571c:	mov	r2, r3
    5720:	ldrh	r3, [fp, #-8]
    5724:	add	r3, r3, #3
    5728:	lsl	r3, r3, #1
    572c:	cmp	r2, r3
    5730:	bcc	5758 <MyGame_Example_TypeAliases_u16+0xa4>
    5734:	ldrh	r3, [fp, #-8]
    5738:	add	r3, r3, #2
    573c:	lsl	r3, r3, #1
    5740:	ldr	r2, [fp, #-12]
    5744:	add	r3, r2, r3
    5748:	mov	r0, r3
    574c:	bl	794 <__flatbuffers_voffset_read_from_pe>
    5750:	mov	r3, r0
    5754:	strh	r3, [fp, #-6]
    5758:	ldrh	r3, [fp, #-6]
    575c:	cmp	r3, #0
    5760:	beq	5780 <MyGame_Example_TypeAliases_u16+0xcc>
    5764:	ldrh	r3, [fp, #-6]
    5768:	ldr	r2, [fp, #-16]
    576c:	add	r3, r2, r3
    5770:	mov	r0, r3
    5774:	bl	d0 <flatbuffers_uint16_read_from_pe>
    5778:	mov	r3, r0
    577c:	b	5784 <MyGame_Example_TypeAliases_u16+0xd0>
    5780:	mov	r3, #0
    5784:	mov	r0, r3
    5788:	sub	sp, fp, #4
    578c:	pop	{fp, pc}
    5790:	.word	0x00003458
    5794:	.word	0x000000c8
    5798:	.word	0x0000015c

0000579c <MyGame_Example_TypeAliases_i32>:
    579c:	push	{fp, lr}
    57a0:	add	fp, sp, #4
    57a4:	sub	sp, sp, #16
    57a8:	str	r0, [fp, #-16]
    57ac:	mov	r3, #0
    57b0:	strh	r3, [fp, #-6]
    57b4:	ldr	r3, [fp, #-16]
    57b8:	cmp	r3, #0
    57bc:	bne	57d4 <MyGame_Example_TypeAliases_i32+0x38>
    57c0:	ldr	r3, [pc, #176]	; 5878 <MyGame_Example_TypeAliases_i32+0xdc>
    57c4:	ldr	r2, [pc, #176]	; 587c <MyGame_Example_TypeAliases_i32+0xe0>
    57c8:	ldr	r1, [pc, #176]	; 5880 <MyGame_Example_TypeAliases_i32+0xe4>
    57cc:	ldr	r0, [pc, #176]	; 5884 <MyGame_Example_TypeAliases_i32+0xe8>
    57d0:	bl	0 <__assert_fail>
    57d4:	mov	r3, #4
    57d8:	strh	r3, [fp, #-8]
    57dc:	ldr	r0, [fp, #-16]
    57e0:	bl	73c <__flatbuffers_soffset_read_from_pe>
    57e4:	mov	r3, r0
    57e8:	rsb	r3, r3, #0
    57ec:	ldr	r2, [fp, #-16]
    57f0:	add	r3, r2, r3
    57f4:	str	r3, [fp, #-12]
    57f8:	ldr	r0, [fp, #-12]
    57fc:	bl	794 <__flatbuffers_voffset_read_from_pe>
    5800:	mov	r3, r0
    5804:	mov	r2, r3
    5808:	ldrh	r3, [fp, #-8]
    580c:	add	r3, r3, #3
    5810:	lsl	r3, r3, #1
    5814:	cmp	r2, r3
    5818:	bcc	5840 <MyGame_Example_TypeAliases_i32+0xa4>
    581c:	ldrh	r3, [fp, #-8]
    5820:	add	r3, r3, #2
    5824:	lsl	r3, r3, #1
    5828:	ldr	r2, [fp, #-12]
    582c:	add	r3, r2, r3
    5830:	mov	r0, r3
    5834:	bl	794 <__flatbuffers_voffset_read_from_pe>
    5838:	mov	r3, r0
    583c:	strh	r3, [fp, #-6]
    5840:	ldrh	r3, [fp, #-6]
    5844:	cmp	r3, #0
    5848:	beq	5868 <MyGame_Example_TypeAliases_i32+0xcc>
    584c:	ldrh	r3, [fp, #-6]
    5850:	ldr	r2, [fp, #-16]
    5854:	add	r3, r2, r3
    5858:	mov	r0, r3
    585c:	bl	34c <flatbuffers_int32_read_from_pe>
    5860:	mov	r3, r0
    5864:	b	586c <MyGame_Example_TypeAliases_i32+0xd0>
    5868:	mov	r3, #0
    586c:	mov	r0, r3
    5870:	sub	sp, fp, #4
    5874:	pop	{fp, pc}
    5878:	.word	0x000033f8
    587c:	.word	0x000002f1
    5880:	.word	0x000000c8
    5884:	.word	0x0000015c

00005888 <MyGame_Example_TypeAliases_u32>:
    5888:	push	{fp, lr}
    588c:	add	fp, sp, #4
    5890:	sub	sp, sp, #16
    5894:	str	r0, [fp, #-16]
    5898:	mov	r3, #0
    589c:	strh	r3, [fp, #-6]
    58a0:	ldr	r3, [fp, #-16]
    58a4:	cmp	r3, #0
    58a8:	bne	58c0 <MyGame_Example_TypeAliases_u32+0x38>
    58ac:	ldr	r3, [pc, #176]	; 5964 <MyGame_Example_TypeAliases_u32+0xdc>
    58b0:	ldr	r2, [pc, #176]	; 5968 <MyGame_Example_TypeAliases_u32+0xe0>
    58b4:	ldr	r1, [pc, #176]	; 596c <MyGame_Example_TypeAliases_u32+0xe4>
    58b8:	ldr	r0, [pc, #176]	; 5970 <MyGame_Example_TypeAliases_u32+0xe8>
    58bc:	bl	0 <__assert_fail>
    58c0:	mov	r3, #5
    58c4:	strh	r3, [fp, #-8]
    58c8:	ldr	r0, [fp, #-16]
    58cc:	bl	73c <__flatbuffers_soffset_read_from_pe>
    58d0:	mov	r3, r0
    58d4:	rsb	r3, r3, #0
    58d8:	ldr	r2, [fp, #-16]
    58dc:	add	r3, r2, r3
    58e0:	str	r3, [fp, #-12]
    58e4:	ldr	r0, [fp, #-12]
    58e8:	bl	794 <__flatbuffers_voffset_read_from_pe>
    58ec:	mov	r3, r0
    58f0:	mov	r2, r3
    58f4:	ldrh	r3, [fp, #-8]
    58f8:	add	r3, r3, #3
    58fc:	lsl	r3, r3, #1
    5900:	cmp	r2, r3
    5904:	bcc	592c <MyGame_Example_TypeAliases_u32+0xa4>
    5908:	ldrh	r3, [fp, #-8]
    590c:	add	r3, r3, #2
    5910:	lsl	r3, r3, #1
    5914:	ldr	r2, [fp, #-12]
    5918:	add	r3, r2, r3
    591c:	mov	r0, r3
    5920:	bl	794 <__flatbuffers_voffset_read_from_pe>
    5924:	mov	r3, r0
    5928:	strh	r3, [fp, #-6]
    592c:	ldrh	r3, [fp, #-6]
    5930:	cmp	r3, #0
    5934:	beq	5954 <MyGame_Example_TypeAliases_u32+0xcc>
    5938:	ldrh	r3, [fp, #-6]
    593c:	ldr	r2, [fp, #-16]
    5940:	add	r3, r2, r3
    5944:	mov	r0, r3
    5948:	bl	148 <flatbuffers_uint32_read_from_pe>
    594c:	mov	r3, r0
    5950:	b	5958 <MyGame_Example_TypeAliases_u32+0xd0>
    5954:	mov	r3, #0
    5958:	mov	r0, r3
    595c:	sub	sp, fp, #4
    5960:	pop	{fp, pc}
    5964:	.word	0x00003478
    5968:	.word	0x000002f2
    596c:	.word	0x000000c8
    5970:	.word	0x0000015c

00005974 <MyGame_Example_TypeAliases_i64>:
    5974:	push	{fp, lr}
    5978:	add	fp, sp, #4
    597c:	sub	sp, sp, #16
    5980:	str	r0, [fp, #-16]
    5984:	mov	r3, #0
    5988:	strh	r3, [fp, #-6]
    598c:	ldr	r3, [fp, #-16]
    5990:	cmp	r3, #0
    5994:	bne	59ac <MyGame_Example_TypeAliases_i64+0x38>
    5998:	ldr	r3, [pc, #188]	; 5a5c <MyGame_Example_TypeAliases_i64+0xe8>
    599c:	ldr	r2, [pc, #188]	; 5a60 <MyGame_Example_TypeAliases_i64+0xec>
    59a0:	ldr	r1, [pc, #188]	; 5a64 <MyGame_Example_TypeAliases_i64+0xf0>
    59a4:	ldr	r0, [pc, #188]	; 5a68 <MyGame_Example_TypeAliases_i64+0xf4>
    59a8:	bl	0 <__assert_fail>
    59ac:	mov	r3, #6
    59b0:	strh	r3, [fp, #-8]
    59b4:	ldr	r0, [fp, #-16]
    59b8:	bl	73c <__flatbuffers_soffset_read_from_pe>
    59bc:	mov	r3, r0
    59c0:	rsb	r3, r3, #0
    59c4:	ldr	r2, [fp, #-16]
    59c8:	add	r3, r2, r3
    59cc:	str	r3, [fp, #-12]
    59d0:	ldr	r0, [fp, #-12]
    59d4:	bl	794 <__flatbuffers_voffset_read_from_pe>
    59d8:	mov	r3, r0
    59dc:	mov	r2, r3
    59e0:	ldrh	r3, [fp, #-8]
    59e4:	add	r3, r3, #3
    59e8:	lsl	r3, r3, #1
    59ec:	cmp	r2, r3
    59f0:	bcc	5a18 <MyGame_Example_TypeAliases_i64+0xa4>
    59f4:	ldrh	r3, [fp, #-8]
    59f8:	add	r3, r3, #2
    59fc:	lsl	r3, r3, #1
    5a00:	ldr	r2, [fp, #-12]
    5a04:	add	r3, r2, r3
    5a08:	mov	r0, r3
    5a0c:	bl	794 <__flatbuffers_voffset_read_from_pe>
    5a10:	mov	r3, r0
    5a14:	strh	r3, [fp, #-6]
    5a18:	ldrh	r3, [fp, #-6]
    5a1c:	cmp	r3, #0
    5a20:	beq	5a44 <MyGame_Example_TypeAliases_i64+0xd0>
    5a24:	ldrh	r3, [fp, #-6]
    5a28:	ldr	r2, [fp, #-16]
    5a2c:	add	r3, r2, r3
    5a30:	mov	r0, r3
    5a34:	bl	3cc <flatbuffers_int64_read_from_pe>
    5a38:	mov	r2, r0
    5a3c:	mov	r3, r1
    5a40:	b	5a4c <MyGame_Example_TypeAliases_i64+0xd8>
    5a44:	mov	r2, #0
    5a48:	mov	r3, #0
    5a4c:	mov	r0, r2
    5a50:	mov	r1, r3
    5a54:	sub	sp, fp, #4
    5a58:	pop	{fp, pc}
    5a5c:	.word	0x00003418
    5a60:	.word	0x000002f3
    5a64:	.word	0x000000c8
    5a68:	.word	0x0000015c

00005a6c <MyGame_Example_TypeAliases_u64>:
    5a6c:	push	{fp, lr}
    5a70:	add	fp, sp, #4
    5a74:	sub	sp, sp, #16
    5a78:	str	r0, [fp, #-16]
    5a7c:	mov	r3, #0
    5a80:	strh	r3, [fp, #-6]
    5a84:	ldr	r3, [fp, #-16]
    5a88:	cmp	r3, #0
    5a8c:	bne	5aa4 <MyGame_Example_TypeAliases_u64+0x38>
    5a90:	ldr	r3, [pc, #188]	; 5b54 <MyGame_Example_TypeAliases_u64+0xe8>
    5a94:	mov	r2, #756	; 0x2f4
    5a98:	ldr	r1, [pc, #184]	; 5b58 <MyGame_Example_TypeAliases_u64+0xec>
    5a9c:	ldr	r0, [pc, #184]	; 5b5c <MyGame_Example_TypeAliases_u64+0xf0>
    5aa0:	bl	0 <__assert_fail>
    5aa4:	mov	r3, #7
    5aa8:	strh	r3, [fp, #-8]
    5aac:	ldr	r0, [fp, #-16]
    5ab0:	bl	73c <__flatbuffers_soffset_read_from_pe>
    5ab4:	mov	r3, r0
    5ab8:	rsb	r3, r3, #0
    5abc:	ldr	r2, [fp, #-16]
    5ac0:	add	r3, r2, r3
    5ac4:	str	r3, [fp, #-12]
    5ac8:	ldr	r0, [fp, #-12]
    5acc:	bl	794 <__flatbuffers_voffset_read_from_pe>
    5ad0:	mov	r3, r0
    5ad4:	mov	r2, r3
    5ad8:	ldrh	r3, [fp, #-8]
    5adc:	add	r3, r3, #3
    5ae0:	lsl	r3, r3, #1
    5ae4:	cmp	r2, r3
    5ae8:	bcc	5b10 <MyGame_Example_TypeAliases_u64+0xa4>
    5aec:	ldrh	r3, [fp, #-8]
    5af0:	add	r3, r3, #2
    5af4:	lsl	r3, r3, #1
    5af8:	ldr	r2, [fp, #-12]
    5afc:	add	r3, r2, r3
    5b00:	mov	r0, r3
    5b04:	bl	794 <__flatbuffers_voffset_read_from_pe>
    5b08:	mov	r3, r0
    5b0c:	strh	r3, [fp, #-6]
    5b10:	ldrh	r3, [fp, #-6]
    5b14:	cmp	r3, #0
    5b18:	beq	5b3c <MyGame_Example_TypeAliases_u64+0xd0>
    5b1c:	ldrh	r3, [fp, #-6]
    5b20:	ldr	r2, [fp, #-16]
    5b24:	add	r3, r2, r3
    5b28:	mov	r0, r3
    5b2c:	bl	1c8 <flatbuffers_uint64_read_from_pe>
    5b30:	mov	r2, r0
    5b34:	mov	r3, r1
    5b38:	b	5b44 <MyGame_Example_TypeAliases_u64+0xd8>
    5b3c:	mov	r2, #0
    5b40:	mov	r3, #0
    5b44:	mov	r0, r2
    5b48:	mov	r1, r3
    5b4c:	sub	sp, fp, #4
    5b50:	pop	{fp, pc}
    5b54:	.word	0x00003498
    5b58:	.word	0x000000c8
    5b5c:	.word	0x0000015c

00005b60 <MyGame_Example_TypeAliases_f32>:
    5b60:	push	{fp, lr}
    5b64:	add	fp, sp, #4
    5b68:	sub	sp, sp, #16
    5b6c:	str	r0, [fp, #-16]
    5b70:	mov	r3, #0
    5b74:	strh	r3, [fp, #-6]
    5b78:	ldr	r3, [fp, #-16]
    5b7c:	cmp	r3, #0
    5b80:	bne	5b98 <MyGame_Example_TypeAliases_f32+0x38>
    5b84:	ldr	r3, [pc, #180]	; 5c40 <MyGame_Example_TypeAliases_f32+0xe0>
    5b88:	ldr	r2, [pc, #180]	; 5c44 <MyGame_Example_TypeAliases_f32+0xe4>
    5b8c:	ldr	r1, [pc, #180]	; 5c48 <MyGame_Example_TypeAliases_f32+0xe8>
    5b90:	ldr	r0, [pc, #180]	; 5c4c <MyGame_Example_TypeAliases_f32+0xec>
    5b94:	bl	0 <__assert_fail>
    5b98:	mov	r3, #8
    5b9c:	strh	r3, [fp, #-8]
    5ba0:	ldr	r0, [fp, #-16]
    5ba4:	bl	73c <__flatbuffers_soffset_read_from_pe>
    5ba8:	mov	r3, r0
    5bac:	rsb	r3, r3, #0
    5bb0:	ldr	r2, [fp, #-16]
    5bb4:	add	r3, r2, r3
    5bb8:	str	r3, [fp, #-12]
    5bbc:	ldr	r0, [fp, #-12]
    5bc0:	bl	794 <__flatbuffers_voffset_read_from_pe>
    5bc4:	mov	r3, r0
    5bc8:	mov	r2, r3
    5bcc:	ldrh	r3, [fp, #-8]
    5bd0:	add	r3, r3, #3
    5bd4:	lsl	r3, r3, #1
    5bd8:	cmp	r2, r3
    5bdc:	bcc	5c04 <MyGame_Example_TypeAliases_f32+0xa4>
    5be0:	ldrh	r3, [fp, #-8]
    5be4:	add	r3, r3, #2
    5be8:	lsl	r3, r3, #1
    5bec:	ldr	r2, [fp, #-12]
    5bf0:	add	r3, r2, r3
    5bf4:	mov	r0, r3
    5bf8:	bl	794 <__flatbuffers_voffset_read_from_pe>
    5bfc:	mov	r3, r0
    5c00:	strh	r3, [fp, #-6]
    5c04:	ldrh	r3, [fp, #-6]
    5c08:	cmp	r3, #0
    5c0c:	beq	5c2c <MyGame_Example_TypeAliases_f32+0xcc>
    5c10:	ldrh	r3, [fp, #-6]
    5c14:	ldr	r2, [fp, #-16]
    5c18:	add	r3, r2, r3
    5c1c:	mov	r0, r3
    5c20:	bl	478 <flatbuffers_float_read_from_pe>
    5c24:	vmov.f32	s15, s0
    5c28:	b	5c30 <MyGame_Example_TypeAliases_f32+0xd0>
    5c2c:	vldr	s15, [pc, #8]	; 5c3c <MyGame_Example_TypeAliases_f32+0xdc>
    5c30:	vmov.f32	s0, s15
    5c34:	sub	sp, fp, #4
    5c38:	pop	{fp, pc}
    5c3c:	.word	0x00000000
    5c40:	.word	0x000034b8
    5c44:	.word	0x000002f5
    5c48:	.word	0x000000c8
    5c4c:	.word	0x0000015c

00005c50 <MyGame_Example_TypeAliases_f64>:
    5c50:	push	{fp, lr}
    5c54:	add	fp, sp, #4
    5c58:	sub	sp, sp, #16
    5c5c:	str	r0, [fp, #-16]
    5c60:	mov	r3, #0
    5c64:	strh	r3, [fp, #-6]
    5c68:	ldr	r3, [fp, #-16]
    5c6c:	cmp	r3, #0
    5c70:	bne	5c88 <MyGame_Example_TypeAliases_f64+0x38>
    5c74:	ldr	r3, [pc, #188]	; 5d38 <MyGame_Example_TypeAliases_f64+0xe8>
    5c78:	ldr	r2, [pc, #188]	; 5d3c <MyGame_Example_TypeAliases_f64+0xec>
    5c7c:	ldr	r1, [pc, #188]	; 5d40 <MyGame_Example_TypeAliases_f64+0xf0>
    5c80:	ldr	r0, [pc, #188]	; 5d44 <MyGame_Example_TypeAliases_f64+0xf4>
    5c84:	bl	0 <__assert_fail>
    5c88:	mov	r3, #9
    5c8c:	strh	r3, [fp, #-8]
    5c90:	ldr	r0, [fp, #-16]
    5c94:	bl	73c <__flatbuffers_soffset_read_from_pe>
    5c98:	mov	r3, r0
    5c9c:	rsb	r3, r3, #0
    5ca0:	ldr	r2, [fp, #-16]
    5ca4:	add	r3, r2, r3
    5ca8:	str	r3, [fp, #-12]
    5cac:	ldr	r0, [fp, #-12]
    5cb0:	bl	794 <__flatbuffers_voffset_read_from_pe>
    5cb4:	mov	r3, r0
    5cb8:	mov	r2, r3
    5cbc:	ldrh	r3, [fp, #-8]
    5cc0:	add	r3, r3, #3
    5cc4:	lsl	r3, r3, #1
    5cc8:	cmp	r2, r3
    5ccc:	bcc	5cf4 <MyGame_Example_TypeAliases_f64+0xa4>
    5cd0:	ldrh	r3, [fp, #-8]
    5cd4:	add	r3, r3, #2
    5cd8:	lsl	r3, r3, #1
    5cdc:	ldr	r2, [fp, #-12]
    5ce0:	add	r3, r2, r3
    5ce4:	mov	r0, r3
    5ce8:	bl	794 <__flatbuffers_voffset_read_from_pe>
    5cec:	mov	r3, r0
    5cf0:	strh	r3, [fp, #-6]
    5cf4:	ldrh	r3, [fp, #-6]
    5cf8:	cmp	r3, #0
    5cfc:	beq	5d1c <MyGame_Example_TypeAliases_f64+0xcc>
    5d00:	ldrh	r3, [fp, #-6]
    5d04:	ldr	r2, [fp, #-16]
    5d08:	add	r3, r2, r3
    5d0c:	mov	r0, r3
    5d10:	bl	518 <flatbuffers_double_read_from_pe>
    5d14:	vmov.f64	d7, d0
    5d18:	b	5d20 <MyGame_Example_TypeAliases_f64+0xd0>
    5d1c:	vldr	d7, [pc, #12]	; 5d30 <MyGame_Example_TypeAliases_f64+0xe0>
    5d20:	vmov.f64	d0, d7
    5d24:	sub	sp, fp, #4
    5d28:	pop	{fp, pc}
    5d2c:	nop			; (mov r0, r0)
	...
    5d38:	.word	0x000034d8
    5d3c:	.word	0x000002f6
    5d40:	.word	0x000000c8
    5d44:	.word	0x0000015c

00005d48 <Fantasy_Attacker_sword_attack_damage>:
    5d48:	push	{fp, lr}
    5d4c:	add	fp, sp, #4
    5d50:	sub	sp, sp, #16
    5d54:	str	r0, [fp, #-16]
    5d58:	mov	r3, #0
    5d5c:	strh	r3, [fp, #-6]
    5d60:	ldr	r3, [fp, #-16]
    5d64:	cmp	r3, #0
    5d68:	bne	5d80 <Fantasy_Attacker_sword_attack_damage+0x38>
    5d6c:	ldr	r3, [pc, #176]	; 5e24 <Fantasy_Attacker_sword_attack_damage+0xdc>
    5d70:	ldr	r2, [pc, #176]	; 5e28 <Fantasy_Attacker_sword_attack_damage+0xe0>
    5d74:	ldr	r1, [pc, #176]	; 5e2c <Fantasy_Attacker_sword_attack_damage+0xe4>
    5d78:	ldr	r0, [pc, #176]	; 5e30 <Fantasy_Attacker_sword_attack_damage+0xe8>
    5d7c:	bl	0 <__assert_fail>
    5d80:	mov	r3, #0
    5d84:	strh	r3, [fp, #-8]
    5d88:	ldr	r0, [fp, #-16]
    5d8c:	bl	73c <__flatbuffers_soffset_read_from_pe>
    5d90:	mov	r3, r0
    5d94:	rsb	r3, r3, #0
    5d98:	ldr	r2, [fp, #-16]
    5d9c:	add	r3, r2, r3
    5da0:	str	r3, [fp, #-12]
    5da4:	ldr	r0, [fp, #-12]
    5da8:	bl	794 <__flatbuffers_voffset_read_from_pe>
    5dac:	mov	r3, r0
    5db0:	mov	r2, r3
    5db4:	ldrh	r3, [fp, #-8]
    5db8:	add	r3, r3, #3
    5dbc:	lsl	r3, r3, #1
    5dc0:	cmp	r2, r3
    5dc4:	bcc	5dec <Fantasy_Attacker_sword_attack_damage+0xa4>
    5dc8:	ldrh	r3, [fp, #-8]
    5dcc:	add	r3, r3, #2
    5dd0:	lsl	r3, r3, #1
    5dd4:	ldr	r2, [fp, #-12]
    5dd8:	add	r3, r2, r3
    5ddc:	mov	r0, r3
    5de0:	bl	794 <__flatbuffers_voffset_read_from_pe>
    5de4:	mov	r3, r0
    5de8:	strh	r3, [fp, #-6]
    5dec:	ldrh	r3, [fp, #-6]
    5df0:	cmp	r3, #0
    5df4:	beq	5e14 <Fantasy_Attacker_sword_attack_damage+0xcc>
    5df8:	ldrh	r3, [fp, #-6]
    5dfc:	ldr	r2, [fp, #-16]
    5e00:	add	r3, r2, r3
    5e04:	mov	r0, r3
    5e08:	bl	34c <flatbuffers_int32_read_from_pe>
    5e0c:	mov	r3, r0
    5e10:	b	5e18 <Fantasy_Attacker_sword_attack_damage+0xd0>
    5e14:	mov	r3, #0
    5e18:	mov	r0, r3
    5e1c:	sub	sp, fp, #4
    5e20:	pop	{fp, pc}
    5e24:	.word	0x00003c58
    5e28:	.word	0x00000302
    5e2c:	.word	0x000000c8
    5e30:	.word	0x0000015c

00005e34 <Fantasy_Character_union_vec_len>:
    5e34:	push	{fp, lr}
    5e38:	add	fp, sp, #4
    5e3c:	sub	sp, sp, #8
    5e40:	sub	r3, fp, #12
    5e44:	stm	r3, {r0, r1}
    5e48:	ldr	r3, [fp, #-12]
    5e4c:	mov	r0, r3
    5e50:	bl	9b8 <flatbuffers_vec_len>
    5e54:	mov	r3, r0
    5e58:	mov	r0, r3
    5e5c:	sub	sp, fp, #4
    5e60:	pop	{fp, pc}

00005e64 <Fantasy_Character_union_vec_at>:
    5e64:	push	{fp, lr}
    5e68:	add	fp, sp, #4
    5e6c:	sub	sp, sp, #32
    5e70:	str	r0, [fp, #-24]	; 0xffffffe8
    5e74:	sub	r0, fp, #32
    5e78:	stm	r0, {r1, r2}
    5e7c:	str	r3, [fp, #-36]	; 0xffffffdc
    5e80:	mov	r3, #0
    5e84:	strb	r3, [fp, #-16]
    5e88:	mov	r3, #0
    5e8c:	str	r3, [fp, #-12]
    5e90:	ldr	r3, [fp, #-32]	; 0xffffffe0
    5e94:	mov	r0, r3
    5e98:	bl	9b8 <flatbuffers_vec_len>
    5e9c:	str	r0, [fp, #-8]
    5ea0:	ldr	r2, [fp, #-8]
    5ea4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    5ea8:	cmp	r2, r3
    5eac:	bhi	5ec4 <Fantasy_Character_union_vec_at+0x60>
    5eb0:	ldr	r3, [pc, #124]	; 5f34 <Fantasy_Character_union_vec_at+0xd0>
    5eb4:	ldr	r2, [pc, #124]	; 5f38 <Fantasy_Character_union_vec_at+0xd4>
    5eb8:	ldr	r1, [pc, #124]	; 5f3c <Fantasy_Character_union_vec_at+0xd8>
    5ebc:	ldr	r0, [pc, #124]	; 5f40 <Fantasy_Character_union_vec_at+0xdc>
    5ec0:	bl	0 <__assert_fail>
    5ec4:	ldr	r2, [fp, #-32]	; 0xffffffe0
    5ec8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    5ecc:	add	r3, r2, r3
    5ed0:	ldrb	r3, [r3]
    5ed4:	strb	r3, [fp, #-16]
    5ed8:	ldrb	r3, [fp, #-16]
    5edc:	cmp	r3, #0
    5ee0:	bne	5efc <Fantasy_Character_union_vec_at+0x98>
    5ee4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5ee8:	mov	r2, r3
    5eec:	sub	r3, fp, #16
    5ef0:	ldm	r3, {r0, r1}
    5ef4:	stm	r2, {r0, r1}
    5ef8:	b	5f28 <Fantasy_Character_union_vec_at+0xc4>
    5efc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5f00:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5f04:	mov	r0, r3
    5f08:	bl	b48 <flatbuffers_generic_vec_at>
    5f0c:	mov	r3, r0
    5f10:	str	r3, [fp, #-12]
    5f14:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5f18:	mov	r2, r3
    5f1c:	sub	r3, fp, #16
    5f20:	ldm	r3, {r0, r1}
    5f24:	stm	r2, {r0, r1}
    5f28:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5f2c:	sub	sp, fp, #4
    5f30:	pop	{fp, pc}
    5f34:	.word	0x00003cc8
    5f38:	.word	0x00000305
    5f3c:	.word	0x000000c8
    5f40:	.word	0x0000013c

00005f44 <Fantasy_Character_union_vec_at_as_string>:
    5f44:	push	{fp, lr}
    5f48:	add	fp, sp, #4
    5f4c:	sub	sp, sp, #16
    5f50:	sub	r3, fp, #12
    5f54:	stm	r3, {r0, r1}
    5f58:	str	r2, [fp, #-16]
    5f5c:	ldr	r3, [fp, #-8]
    5f60:	ldr	r1, [fp, #-16]
    5f64:	mov	r0, r3
    5f68:	bl	bc8 <flatbuffers_generic_vec_at_as_string>
    5f6c:	mov	r3, r0
    5f70:	mov	r0, r3
    5f74:	sub	sp, fp, #4
    5f78:	pop	{fp, pc}

00005f7c <Fantasy_Movie_as_root>:
    5f7c:	push	{fp, lr}
    5f80:	add	fp, sp, #4
    5f84:	sub	sp, sp, #16
    5f88:	str	r0, [fp, #-16]
    5f8c:	ldr	r3, [pc, #76]	; 5fe0 <Fantasy_Movie_as_root+0x64>
    5f90:	str	r3, [fp, #-8]
    5f94:	ldr	r3, [fp, #-16]
    5f98:	cmp	r3, #0
    5f9c:	beq	5fd0 <Fantasy_Movie_as_root+0x54>
    5fa0:	ldr	r1, [fp, #-8]
    5fa4:	ldr	r0, [fp, #-16]
    5fa8:	bl	19fc <flatbuffers_has_identifier>
    5fac:	mov	r3, r0
    5fb0:	cmp	r3, #0
    5fb4:	beq	5fd0 <Fantasy_Movie_as_root+0x54>
    5fb8:	ldr	r0, [fp, #-16]
    5fbc:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    5fc0:	mov	r2, r0
    5fc4:	ldr	r3, [fp, #-16]
    5fc8:	add	r3, r3, r2
    5fcc:	b	5fd4 <Fantasy_Movie_as_root+0x58>
    5fd0:	mov	r3, #0
    5fd4:	mov	r0, r3
    5fd8:	sub	sp, fp, #4
    5fdc:	pop	{fp, pc}
    5fe0:	.word	0x00000134

00005fe4 <Fantasy_Movie_main_character_type>:
    5fe4:	push	{fp, lr}
    5fe8:	add	fp, sp, #4
    5fec:	sub	sp, sp, #16
    5ff0:	str	r0, [fp, #-16]
    5ff4:	mov	r3, #0
    5ff8:	strh	r3, [fp, #-6]
    5ffc:	ldr	r3, [fp, #-16]
    6000:	cmp	r3, #0
    6004:	bne	601c <Fantasy_Movie_main_character_type+0x38>
    6008:	ldr	r3, [pc, #176]	; 60c0 <Fantasy_Movie_main_character_type+0xdc>
    600c:	ldr	r2, [pc, #176]	; 60c4 <Fantasy_Movie_main_character_type+0xe0>
    6010:	ldr	r1, [pc, #176]	; 60c8 <Fantasy_Movie_main_character_type+0xe4>
    6014:	ldr	r0, [pc, #176]	; 60cc <Fantasy_Movie_main_character_type+0xe8>
    6018:	bl	0 <__assert_fail>
    601c:	mov	r3, #0
    6020:	strh	r3, [fp, #-8]
    6024:	ldr	r0, [fp, #-16]
    6028:	bl	73c <__flatbuffers_soffset_read_from_pe>
    602c:	mov	r3, r0
    6030:	rsb	r3, r3, #0
    6034:	ldr	r2, [fp, #-16]
    6038:	add	r3, r2, r3
    603c:	str	r3, [fp, #-12]
    6040:	ldr	r0, [fp, #-12]
    6044:	bl	794 <__flatbuffers_voffset_read_from_pe>
    6048:	mov	r3, r0
    604c:	mov	r2, r3
    6050:	ldrh	r3, [fp, #-8]
    6054:	add	r3, r3, #3
    6058:	lsl	r3, r3, #1
    605c:	cmp	r2, r3
    6060:	bcc	6088 <Fantasy_Movie_main_character_type+0xa4>
    6064:	ldrh	r3, [fp, #-8]
    6068:	add	r3, r3, #2
    606c:	lsl	r3, r3, #1
    6070:	ldr	r2, [fp, #-12]
    6074:	add	r3, r2, r3
    6078:	mov	r0, r3
    607c:	bl	794 <__flatbuffers_voffset_read_from_pe>
    6080:	mov	r3, r0
    6084:	strh	r3, [fp, #-6]
    6088:	ldrh	r3, [fp, #-6]
    608c:	cmp	r3, #0
    6090:	beq	60b0 <Fantasy_Movie_main_character_type+0xcc>
    6094:	ldrh	r3, [fp, #-6]
    6098:	ldr	r2, [fp, #-16]
    609c:	add	r3, r2, r3
    60a0:	mov	r0, r3
    60a4:	bl	7ec <__flatbuffers_utype_read_from_pe>
    60a8:	mov	r3, r0
    60ac:	b	60b4 <Fantasy_Movie_main_character_type+0xd0>
    60b0:	mov	r3, #0
    60b4:	mov	r0, r3
    60b8:	sub	sp, fp, #4
    60bc:	pop	{fp, pc}
    60c0:	.word	0x00003b34
    60c4:	.word	0x00000333
    60c8:	.word	0x000000c8
    60cc:	.word	0x0000015c

000060d0 <Fantasy_Movie_main_character>:
    60d0:	push	{fp, lr}
    60d4:	add	fp, sp, #4
    60d8:	sub	sp, sp, #24
    60dc:	str	r0, [fp, #-24]	; 0xffffffe8
    60e0:	mov	r3, #0
    60e4:	strh	r3, [fp, #-6]
    60e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    60ec:	cmp	r3, #0
    60f0:	bne	6108 <Fantasy_Movie_main_character+0x38>
    60f4:	ldr	r3, [pc, #188]	; 61b8 <Fantasy_Movie_main_character+0xe8>
    60f8:	ldr	r2, [pc, #188]	; 61bc <Fantasy_Movie_main_character+0xec>
    60fc:	ldr	r1, [pc, #188]	; 61c0 <Fantasy_Movie_main_character+0xf0>
    6100:	ldr	r0, [pc, #188]	; 61c4 <Fantasy_Movie_main_character+0xf4>
    6104:	bl	0 <__assert_fail>
    6108:	mov	r3, #1
    610c:	strh	r3, [fp, #-8]
    6110:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6114:	bl	73c <__flatbuffers_soffset_read_from_pe>
    6118:	mov	r3, r0
    611c:	rsb	r3, r3, #0
    6120:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6124:	add	r3, r2, r3
    6128:	str	r3, [fp, #-12]
    612c:	ldr	r0, [fp, #-12]
    6130:	bl	794 <__flatbuffers_voffset_read_from_pe>
    6134:	mov	r3, r0
    6138:	mov	r2, r3
    613c:	ldrh	r3, [fp, #-8]
    6140:	add	r3, r3, #3
    6144:	lsl	r3, r3, #1
    6148:	cmp	r2, r3
    614c:	bcc	6174 <Fantasy_Movie_main_character+0xa4>
    6150:	ldrh	r3, [fp, #-8]
    6154:	add	r3, r3, #2
    6158:	lsl	r3, r3, #1
    615c:	ldr	r2, [fp, #-12]
    6160:	add	r3, r2, r3
    6164:	mov	r0, r3
    6168:	bl	794 <__flatbuffers_voffset_read_from_pe>
    616c:	mov	r3, r0
    6170:	strh	r3, [fp, #-6]
    6174:	ldrh	r3, [fp, #-6]
    6178:	cmp	r3, #0
    617c:	beq	61a8 <Fantasy_Movie_main_character+0xd8>
    6180:	ldrh	r3, [fp, #-6]
    6184:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6188:	add	r3, r2, r3
    618c:	str	r3, [fp, #-16]
    6190:	ldr	r0, [fp, #-16]
    6194:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    6198:	mov	r2, r0
    619c:	ldr	r3, [fp, #-16]
    61a0:	add	r3, r3, r2
    61a4:	b	61ac <Fantasy_Movie_main_character+0xdc>
    61a8:	mov	r3, #0
    61ac:	mov	r0, r3
    61b0:	sub	sp, fp, #4
    61b4:	pop	{fp, pc}
    61b8:	.word	0x00003b58
    61bc:	.word	0x00000333
    61c0:	.word	0x000000c8
    61c4:	.word	0x0000015c

000061c8 <Fantasy_Movie_main_character_is_present>:
    61c8:	push	{fp, lr}
    61cc:	add	fp, sp, #4
    61d0:	sub	sp, sp, #16
    61d4:	str	r0, [fp, #-16]
    61d8:	mov	r3, #0
    61dc:	strh	r3, [fp, #-6]
    61e0:	ldr	r3, [fp, #-16]
    61e4:	cmp	r3, #0
    61e8:	bne	6200 <Fantasy_Movie_main_character_is_present+0x38>
    61ec:	ldr	r3, [pc, #152]	; 628c <Fantasy_Movie_main_character_is_present+0xc4>
    61f0:	ldr	r2, [pc, #152]	; 6290 <Fantasy_Movie_main_character_is_present+0xc8>
    61f4:	ldr	r1, [pc, #152]	; 6294 <Fantasy_Movie_main_character_is_present+0xcc>
    61f8:	ldr	r0, [pc, #152]	; 6298 <Fantasy_Movie_main_character_is_present+0xd0>
    61fc:	bl	0 <__assert_fail>
    6200:	mov	r3, #1
    6204:	strh	r3, [fp, #-8]
    6208:	ldr	r0, [fp, #-16]
    620c:	bl	73c <__flatbuffers_soffset_read_from_pe>
    6210:	mov	r3, r0
    6214:	rsb	r3, r3, #0
    6218:	ldr	r2, [fp, #-16]
    621c:	add	r3, r2, r3
    6220:	str	r3, [fp, #-12]
    6224:	ldr	r0, [fp, #-12]
    6228:	bl	794 <__flatbuffers_voffset_read_from_pe>
    622c:	mov	r3, r0
    6230:	mov	r2, r3
    6234:	ldrh	r3, [fp, #-8]
    6238:	add	r3, r3, #3
    623c:	lsl	r3, r3, #1
    6240:	cmp	r2, r3
    6244:	bcc	626c <Fantasy_Movie_main_character_is_present+0xa4>
    6248:	ldrh	r3, [fp, #-8]
    624c:	add	r3, r3, #2
    6250:	lsl	r3, r3, #1
    6254:	ldr	r2, [fp, #-12]
    6258:	add	r3, r2, r3
    625c:	mov	r0, r3
    6260:	bl	794 <__flatbuffers_voffset_read_from_pe>
    6264:	mov	r3, r0
    6268:	strh	r3, [fp, #-6]
    626c:	ldrh	r3, [fp, #-6]
    6270:	cmp	r3, #0
    6274:	movne	r3, #1
    6278:	moveq	r3, #0
    627c:	uxtb	r3, r3
    6280:	mov	r0, r3
    6284:	sub	sp, fp, #4
    6288:	pop	{fp, pc}
    628c:	.word	0x00003ae8
    6290:	.word	0x00000333
    6294:	.word	0x000000c8
    6298:	.word	0x0000015c

0000629c <Fantasy_Movie_main_character_union>:
    629c:	push	{fp, lr}
    62a0:	add	fp, sp, #4
    62a4:	sub	sp, sp, #16
    62a8:	str	r0, [fp, #-16]
    62ac:	str	r1, [fp, #-20]	; 0xffffffec
    62b0:	mov	r3, #0
    62b4:	strb	r3, [fp, #-12]
    62b8:	mov	r3, #0
    62bc:	str	r3, [fp, #-8]
    62c0:	ldr	r0, [fp, #-20]	; 0xffffffec
    62c4:	bl	5fe4 <Fantasy_Movie_main_character_type>
    62c8:	mov	r3, r0
    62cc:	strb	r3, [fp, #-12]
    62d0:	ldrb	r3, [fp, #-12]
    62d4:	cmp	r3, #0
    62d8:	bne	62f4 <Fantasy_Movie_main_character_union+0x58>
    62dc:	ldr	r3, [fp, #-16]
    62e0:	mov	r2, r3
    62e4:	sub	r3, fp, #12
    62e8:	ldm	r3, {r0, r1}
    62ec:	stm	r2, {r0, r1}
    62f0:	b	6318 <Fantasy_Movie_main_character_union+0x7c>
    62f4:	ldr	r0, [fp, #-20]	; 0xffffffec
    62f8:	bl	60d0 <Fantasy_Movie_main_character>
    62fc:	mov	r3, r0
    6300:	str	r3, [fp, #-8]
    6304:	ldr	r3, [fp, #-16]
    6308:	mov	r2, r3
    630c:	sub	r3, fp, #12
    6310:	ldm	r3, {r0, r1}
    6314:	stm	r2, {r0, r1}
    6318:	ldr	r0, [fp, #-16]
    631c:	sub	sp, fp, #4
    6320:	pop	{fp, pc}

00006324 <Fantasy_Movie_antagonist_type>:
    6324:	push	{fp, lr}
    6328:	add	fp, sp, #4
    632c:	sub	sp, sp, #16
    6330:	str	r0, [fp, #-16]
    6334:	mov	r3, #0
    6338:	strh	r3, [fp, #-6]
    633c:	ldr	r3, [fp, #-16]
    6340:	cmp	r3, #0
    6344:	bne	635c <Fantasy_Movie_antagonist_type+0x38>
    6348:	ldr	r3, [pc, #176]	; 6400 <Fantasy_Movie_antagonist_type+0xdc>
    634c:	mov	r2, #820	; 0x334
    6350:	ldr	r1, [pc, #172]	; 6404 <Fantasy_Movie_antagonist_type+0xe0>
    6354:	ldr	r0, [pc, #172]	; 6408 <Fantasy_Movie_antagonist_type+0xe4>
    6358:	bl	0 <__assert_fail>
    635c:	mov	r3, #2
    6360:	strh	r3, [fp, #-8]
    6364:	ldr	r0, [fp, #-16]
    6368:	bl	73c <__flatbuffers_soffset_read_from_pe>
    636c:	mov	r3, r0
    6370:	rsb	r3, r3, #0
    6374:	ldr	r2, [fp, #-16]
    6378:	add	r3, r2, r3
    637c:	str	r3, [fp, #-12]
    6380:	ldr	r0, [fp, #-12]
    6384:	bl	794 <__flatbuffers_voffset_read_from_pe>
    6388:	mov	r3, r0
    638c:	mov	r2, r3
    6390:	ldrh	r3, [fp, #-8]
    6394:	add	r3, r3, #3
    6398:	lsl	r3, r3, #1
    639c:	cmp	r2, r3
    63a0:	bcc	63c8 <Fantasy_Movie_antagonist_type+0xa4>
    63a4:	ldrh	r3, [fp, #-8]
    63a8:	add	r3, r3, #2
    63ac:	lsl	r3, r3, #1
    63b0:	ldr	r2, [fp, #-12]
    63b4:	add	r3, r2, r3
    63b8:	mov	r0, r3
    63bc:	bl	794 <__flatbuffers_voffset_read_from_pe>
    63c0:	mov	r3, r0
    63c4:	strh	r3, [fp, #-6]
    63c8:	ldrh	r3, [fp, #-6]
    63cc:	cmp	r3, #0
    63d0:	beq	63f0 <Fantasy_Movie_antagonist_type+0xcc>
    63d4:	ldrh	r3, [fp, #-6]
    63d8:	ldr	r2, [fp, #-16]
    63dc:	add	r3, r2, r3
    63e0:	mov	r0, r3
    63e4:	bl	7ec <__flatbuffers_utype_read_from_pe>
    63e8:	mov	r3, r0
    63ec:	b	63f4 <Fantasy_Movie_antagonist_type+0xd0>
    63f0:	mov	r3, #0
    63f4:	mov	r0, r3
    63f8:	sub	sp, fp, #4
    63fc:	pop	{fp, pc}
    6400:	.word	0x00003ba8
    6404:	.word	0x000000c8
    6408:	.word	0x0000015c

0000640c <Fantasy_Movie_antagonist>:
    640c:	push	{fp, lr}
    6410:	add	fp, sp, #4
    6414:	sub	sp, sp, #24
    6418:	str	r0, [fp, #-24]	; 0xffffffe8
    641c:	mov	r3, #0
    6420:	strh	r3, [fp, #-6]
    6424:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6428:	cmp	r3, #0
    642c:	bne	6444 <Fantasy_Movie_antagonist+0x38>
    6430:	ldr	r3, [pc, #188]	; 64f4 <Fantasy_Movie_antagonist+0xe8>
    6434:	mov	r2, #820	; 0x334
    6438:	ldr	r1, [pc, #184]	; 64f8 <Fantasy_Movie_antagonist+0xec>
    643c:	ldr	r0, [pc, #184]	; 64fc <Fantasy_Movie_antagonist+0xf0>
    6440:	bl	0 <__assert_fail>
    6444:	mov	r3, #3
    6448:	strh	r3, [fp, #-8]
    644c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6450:	bl	73c <__flatbuffers_soffset_read_from_pe>
    6454:	mov	r3, r0
    6458:	rsb	r3, r3, #0
    645c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6460:	add	r3, r2, r3
    6464:	str	r3, [fp, #-12]
    6468:	ldr	r0, [fp, #-12]
    646c:	bl	794 <__flatbuffers_voffset_read_from_pe>
    6470:	mov	r3, r0
    6474:	mov	r2, r3
    6478:	ldrh	r3, [fp, #-8]
    647c:	add	r3, r3, #3
    6480:	lsl	r3, r3, #1
    6484:	cmp	r2, r3
    6488:	bcc	64b0 <Fantasy_Movie_antagonist+0xa4>
    648c:	ldrh	r3, [fp, #-8]
    6490:	add	r3, r3, #2
    6494:	lsl	r3, r3, #1
    6498:	ldr	r2, [fp, #-12]
    649c:	add	r3, r2, r3
    64a0:	mov	r0, r3
    64a4:	bl	794 <__flatbuffers_voffset_read_from_pe>
    64a8:	mov	r3, r0
    64ac:	strh	r3, [fp, #-6]
    64b0:	ldrh	r3, [fp, #-6]
    64b4:	cmp	r3, #0
    64b8:	beq	64e4 <Fantasy_Movie_antagonist+0xd8>
    64bc:	ldrh	r3, [fp, #-6]
    64c0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    64c4:	add	r3, r2, r3
    64c8:	str	r3, [fp, #-16]
    64cc:	ldr	r0, [fp, #-16]
    64d0:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    64d4:	mov	r2, r0
    64d8:	ldr	r3, [fp, #-16]
    64dc:	add	r3, r3, r2
    64e0:	b	64e8 <Fantasy_Movie_antagonist+0xdc>
    64e4:	mov	r3, #0
    64e8:	mov	r0, r3
    64ec:	sub	sp, fp, #4
    64f0:	pop	{fp, pc}
    64f4:	.word	0x00003bc8
    64f8:	.word	0x000000c8
    64fc:	.word	0x0000015c

00006500 <Fantasy_Movie_side_kick_type>:
    6500:	push	{fp, lr}
    6504:	add	fp, sp, #4
    6508:	sub	sp, sp, #16
    650c:	str	r0, [fp, #-16]
    6510:	mov	r3, #0
    6514:	strh	r3, [fp, #-6]
    6518:	ldr	r3, [fp, #-16]
    651c:	cmp	r3, #0
    6520:	bne	6538 <Fantasy_Movie_side_kick_type+0x38>
    6524:	ldr	r3, [pc, #176]	; 65dc <Fantasy_Movie_side_kick_type+0xdc>
    6528:	ldr	r2, [pc, #176]	; 65e0 <Fantasy_Movie_side_kick_type+0xe0>
    652c:	ldr	r1, [pc, #176]	; 65e4 <Fantasy_Movie_side_kick_type+0xe4>
    6530:	ldr	r0, [pc, #176]	; 65e8 <Fantasy_Movie_side_kick_type+0xe8>
    6534:	bl	0 <__assert_fail>
    6538:	mov	r3, #4
    653c:	strh	r3, [fp, #-8]
    6540:	ldr	r0, [fp, #-16]
    6544:	bl	73c <__flatbuffers_soffset_read_from_pe>
    6548:	mov	r3, r0
    654c:	rsb	r3, r3, #0
    6550:	ldr	r2, [fp, #-16]
    6554:	add	r3, r2, r3
    6558:	str	r3, [fp, #-12]
    655c:	ldr	r0, [fp, #-12]
    6560:	bl	794 <__flatbuffers_voffset_read_from_pe>
    6564:	mov	r3, r0
    6568:	mov	r2, r3
    656c:	ldrh	r3, [fp, #-8]
    6570:	add	r3, r3, #3
    6574:	lsl	r3, r3, #1
    6578:	cmp	r2, r3
    657c:	bcc	65a4 <Fantasy_Movie_side_kick_type+0xa4>
    6580:	ldrh	r3, [fp, #-8]
    6584:	add	r3, r3, #2
    6588:	lsl	r3, r3, #1
    658c:	ldr	r2, [fp, #-12]
    6590:	add	r3, r2, r3
    6594:	mov	r0, r3
    6598:	bl	794 <__flatbuffers_voffset_read_from_pe>
    659c:	mov	r3, r0
    65a0:	strh	r3, [fp, #-6]
    65a4:	ldrh	r3, [fp, #-6]
    65a8:	cmp	r3, #0
    65ac:	beq	65cc <Fantasy_Movie_side_kick_type+0xcc>
    65b0:	ldrh	r3, [fp, #-6]
    65b4:	ldr	r2, [fp, #-16]
    65b8:	add	r3, r2, r3
    65bc:	mov	r0, r3
    65c0:	bl	7ec <__flatbuffers_utype_read_from_pe>
    65c4:	mov	r3, r0
    65c8:	b	65d0 <Fantasy_Movie_side_kick_type+0xd0>
    65cc:	mov	r3, #0
    65d0:	mov	r0, r3
    65d4:	sub	sp, fp, #4
    65d8:	pop	{fp, pc}
    65dc:	.word	0x00003be4
    65e0:	.word	0x00000335
    65e4:	.word	0x000000c8
    65e8:	.word	0x0000015c

000065ec <Fantasy_Movie_side_kick>:
    65ec:	push	{fp, lr}
    65f0:	add	fp, sp, #4
    65f4:	sub	sp, sp, #24
    65f8:	str	r0, [fp, #-24]	; 0xffffffe8
    65fc:	mov	r3, #0
    6600:	strh	r3, [fp, #-6]
    6604:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6608:	cmp	r3, #0
    660c:	bne	6624 <Fantasy_Movie_side_kick+0x38>
    6610:	ldr	r3, [pc, #188]	; 66d4 <Fantasy_Movie_side_kick+0xe8>
    6614:	ldr	r2, [pc, #188]	; 66d8 <Fantasy_Movie_side_kick+0xec>
    6618:	ldr	r1, [pc, #188]	; 66dc <Fantasy_Movie_side_kick+0xf0>
    661c:	ldr	r0, [pc, #188]	; 66e0 <Fantasy_Movie_side_kick+0xf4>
    6620:	bl	0 <__assert_fail>
    6624:	mov	r3, #5
    6628:	strh	r3, [fp, #-8]
    662c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6630:	bl	73c <__flatbuffers_soffset_read_from_pe>
    6634:	mov	r3, r0
    6638:	rsb	r3, r3, #0
    663c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6640:	add	r3, r2, r3
    6644:	str	r3, [fp, #-12]
    6648:	ldr	r0, [fp, #-12]
    664c:	bl	794 <__flatbuffers_voffset_read_from_pe>
    6650:	mov	r3, r0
    6654:	mov	r2, r3
    6658:	ldrh	r3, [fp, #-8]
    665c:	add	r3, r3, #3
    6660:	lsl	r3, r3, #1
    6664:	cmp	r2, r3
    6668:	bcc	6690 <Fantasy_Movie_side_kick+0xa4>
    666c:	ldrh	r3, [fp, #-8]
    6670:	add	r3, r3, #2
    6674:	lsl	r3, r3, #1
    6678:	ldr	r2, [fp, #-12]
    667c:	add	r3, r2, r3
    6680:	mov	r0, r3
    6684:	bl	794 <__flatbuffers_voffset_read_from_pe>
    6688:	mov	r3, r0
    668c:	strh	r3, [fp, #-6]
    6690:	ldrh	r3, [fp, #-6]
    6694:	cmp	r3, #0
    6698:	beq	66c4 <Fantasy_Movie_side_kick+0xd8>
    669c:	ldrh	r3, [fp, #-6]
    66a0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    66a4:	add	r3, r2, r3
    66a8:	str	r3, [fp, #-16]
    66ac:	ldr	r0, [fp, #-16]
    66b0:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    66b4:	mov	r2, r0
    66b8:	ldr	r3, [fp, #-16]
    66bc:	add	r3, r3, r2
    66c0:	b	66c8 <Fantasy_Movie_side_kick+0xdc>
    66c4:	mov	r3, #0
    66c8:	mov	r0, r3
    66cc:	sub	sp, fp, #4
    66d0:	pop	{fp, pc}
    66d4:	.word	0x00003c04
    66d8:	.word	0x00000335
    66dc:	.word	0x000000c8
    66e0:	.word	0x0000015c

000066e4 <Fantasy_Movie_side_kick_union>:
    66e4:	push	{fp, lr}
    66e8:	add	fp, sp, #4
    66ec:	sub	sp, sp, #16
    66f0:	str	r0, [fp, #-16]
    66f4:	str	r1, [fp, #-20]	; 0xffffffec
    66f8:	mov	r3, #0
    66fc:	strb	r3, [fp, #-12]
    6700:	mov	r3, #0
    6704:	str	r3, [fp, #-8]
    6708:	ldr	r0, [fp, #-20]	; 0xffffffec
    670c:	bl	6500 <Fantasy_Movie_side_kick_type>
    6710:	mov	r3, r0
    6714:	strb	r3, [fp, #-12]
    6718:	ldrb	r3, [fp, #-12]
    671c:	cmp	r3, #0
    6720:	bne	673c <Fantasy_Movie_side_kick_union+0x58>
    6724:	ldr	r3, [fp, #-16]
    6728:	mov	r2, r3
    672c:	sub	r3, fp, #12
    6730:	ldm	r3, {r0, r1}
    6734:	stm	r2, {r0, r1}
    6738:	b	6760 <Fantasy_Movie_side_kick_union+0x7c>
    673c:	ldr	r0, [fp, #-20]	; 0xffffffec
    6740:	bl	65ec <Fantasy_Movie_side_kick>
    6744:	mov	r3, r0
    6748:	str	r3, [fp, #-8]
    674c:	ldr	r3, [fp, #-16]
    6750:	mov	r2, r3
    6754:	sub	r3, fp, #12
    6758:	ldm	r3, {r0, r1}
    675c:	stm	r2, {r0, r1}
    6760:	ldr	r0, [fp, #-16]
    6764:	sub	sp, fp, #4
    6768:	pop	{fp, pc}

0000676c <Fantasy_Movie_side_kick_as_string>:
    676c:	push	{fp, lr}
    6770:	add	fp, sp, #4
    6774:	sub	sp, sp, #8
    6778:	str	r0, [fp, #-8]
    677c:	ldr	r0, [fp, #-8]
    6780:	bl	65ec <Fantasy_Movie_side_kick>
    6784:	mov	r3, r0
    6788:	mov	r0, r3
    678c:	bl	b08 <flatbuffers_string_cast_from_generic>
    6790:	mov	r3, r0
    6794:	mov	r0, r3
    6798:	sub	sp, fp, #4
    679c:	pop	{fp, pc}

000067a0 <Fantasy_Movie_cameo_type>:
    67a0:	push	{fp, lr}
    67a4:	add	fp, sp, #4
    67a8:	sub	sp, sp, #16
    67ac:	str	r0, [fp, #-16]
    67b0:	mov	r3, #0
    67b4:	strh	r3, [fp, #-6]
    67b8:	ldr	r3, [fp, #-16]
    67bc:	cmp	r3, #0
    67c0:	bne	67d8 <Fantasy_Movie_cameo_type+0x38>
    67c4:	ldr	r3, [pc, #176]	; 687c <Fantasy_Movie_cameo_type+0xdc>
    67c8:	ldr	r2, [pc, #176]	; 6880 <Fantasy_Movie_cameo_type+0xe0>
    67cc:	ldr	r1, [pc, #176]	; 6884 <Fantasy_Movie_cameo_type+0xe4>
    67d0:	ldr	r0, [pc, #176]	; 6888 <Fantasy_Movie_cameo_type+0xe8>
    67d4:	bl	0 <__assert_fail>
    67d8:	mov	r3, #6
    67dc:	strh	r3, [fp, #-8]
    67e0:	ldr	r0, [fp, #-16]
    67e4:	bl	73c <__flatbuffers_soffset_read_from_pe>
    67e8:	mov	r3, r0
    67ec:	rsb	r3, r3, #0
    67f0:	ldr	r2, [fp, #-16]
    67f4:	add	r3, r2, r3
    67f8:	str	r3, [fp, #-12]
    67fc:	ldr	r0, [fp, #-12]
    6800:	bl	794 <__flatbuffers_voffset_read_from_pe>
    6804:	mov	r3, r0
    6808:	mov	r2, r3
    680c:	ldrh	r3, [fp, #-8]
    6810:	add	r3, r3, #3
    6814:	lsl	r3, r3, #1
    6818:	cmp	r2, r3
    681c:	bcc	6844 <Fantasy_Movie_cameo_type+0xa4>
    6820:	ldrh	r3, [fp, #-8]
    6824:	add	r3, r3, #2
    6828:	lsl	r3, r3, #1
    682c:	ldr	r2, [fp, #-12]
    6830:	add	r3, r2, r3
    6834:	mov	r0, r3
    6838:	bl	794 <__flatbuffers_voffset_read_from_pe>
    683c:	mov	r3, r0
    6840:	strh	r3, [fp, #-6]
    6844:	ldrh	r3, [fp, #-6]
    6848:	cmp	r3, #0
    684c:	beq	686c <Fantasy_Movie_cameo_type+0xcc>
    6850:	ldrh	r3, [fp, #-6]
    6854:	ldr	r2, [fp, #-16]
    6858:	add	r3, r2, r3
    685c:	mov	r0, r3
    6860:	bl	7ec <__flatbuffers_utype_read_from_pe>
    6864:	mov	r3, r0
    6868:	b	6870 <Fantasy_Movie_cameo_type+0xd0>
    686c:	mov	r3, #0
    6870:	mov	r0, r3
    6874:	sub	sp, fp, #4
    6878:	pop	{fp, pc}
    687c:	.word	0x00003b78
    6880:	.word	0x00000336
    6884:	.word	0x000000c8
    6888:	.word	0x0000015c

0000688c <Fantasy_Movie_cameo>:
    688c:	push	{fp, lr}
    6890:	add	fp, sp, #4
    6894:	sub	sp, sp, #24
    6898:	str	r0, [fp, #-24]	; 0xffffffe8
    689c:	mov	r3, #0
    68a0:	strh	r3, [fp, #-6]
    68a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    68a8:	cmp	r3, #0
    68ac:	bne	68c4 <Fantasy_Movie_cameo+0x38>
    68b0:	ldr	r3, [pc, #188]	; 6974 <Fantasy_Movie_cameo+0xe8>
    68b4:	ldr	r2, [pc, #188]	; 6978 <Fantasy_Movie_cameo+0xec>
    68b8:	ldr	r1, [pc, #188]	; 697c <Fantasy_Movie_cameo+0xf0>
    68bc:	ldr	r0, [pc, #188]	; 6980 <Fantasy_Movie_cameo+0xf4>
    68c0:	bl	0 <__assert_fail>
    68c4:	mov	r3, #7
    68c8:	strh	r3, [fp, #-8]
    68cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    68d0:	bl	73c <__flatbuffers_soffset_read_from_pe>
    68d4:	mov	r3, r0
    68d8:	rsb	r3, r3, #0
    68dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    68e0:	add	r3, r2, r3
    68e4:	str	r3, [fp, #-12]
    68e8:	ldr	r0, [fp, #-12]
    68ec:	bl	794 <__flatbuffers_voffset_read_from_pe>
    68f0:	mov	r3, r0
    68f4:	mov	r2, r3
    68f8:	ldrh	r3, [fp, #-8]
    68fc:	add	r3, r3, #3
    6900:	lsl	r3, r3, #1
    6904:	cmp	r2, r3
    6908:	bcc	6930 <Fantasy_Movie_cameo+0xa4>
    690c:	ldrh	r3, [fp, #-8]
    6910:	add	r3, r3, #2
    6914:	lsl	r3, r3, #1
    6918:	ldr	r2, [fp, #-12]
    691c:	add	r3, r2, r3
    6920:	mov	r0, r3
    6924:	bl	794 <__flatbuffers_voffset_read_from_pe>
    6928:	mov	r3, r0
    692c:	strh	r3, [fp, #-6]
    6930:	ldrh	r3, [fp, #-6]
    6934:	cmp	r3, #0
    6938:	beq	6964 <Fantasy_Movie_cameo+0xd8>
    693c:	ldrh	r3, [fp, #-6]
    6940:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6944:	add	r3, r2, r3
    6948:	str	r3, [fp, #-16]
    694c:	ldr	r0, [fp, #-16]
    6950:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    6954:	mov	r2, r0
    6958:	ldr	r3, [fp, #-16]
    695c:	add	r3, r3, r2
    6960:	b	6968 <Fantasy_Movie_cameo+0xdc>
    6964:	mov	r3, #0
    6968:	mov	r0, r3
    696c:	sub	sp, fp, #4
    6970:	pop	{fp, pc}
    6974:	.word	0x00003b94
    6978:	.word	0x00000336
    697c:	.word	0x000000c8
    6980:	.word	0x0000015c

00006984 <Fantasy_Movie_characters_type>:
    6984:	push	{fp, lr}
    6988:	add	fp, sp, #4
    698c:	sub	sp, sp, #24
    6990:	str	r0, [fp, #-24]	; 0xffffffe8
    6994:	mov	r3, #0
    6998:	strh	r3, [fp, #-6]
    699c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    69a0:	cmp	r3, #0
    69a4:	bne	69bc <Fantasy_Movie_characters_type+0x38>
    69a8:	ldr	r3, [pc, #192]	; 6a70 <Fantasy_Movie_characters_type+0xec>
    69ac:	ldr	r2, [pc, #192]	; 6a74 <Fantasy_Movie_characters_type+0xf0>
    69b0:	ldr	r1, [pc, #192]	; 6a78 <Fantasy_Movie_characters_type+0xf4>
    69b4:	ldr	r0, [pc, #192]	; 6a7c <Fantasy_Movie_characters_type+0xf8>
    69b8:	bl	0 <__assert_fail>
    69bc:	mov	r3, #8
    69c0:	strh	r3, [fp, #-8]
    69c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    69c8:	bl	73c <__flatbuffers_soffset_read_from_pe>
    69cc:	mov	r3, r0
    69d0:	rsb	r3, r3, #0
    69d4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    69d8:	add	r3, r2, r3
    69dc:	str	r3, [fp, #-12]
    69e0:	ldr	r0, [fp, #-12]
    69e4:	bl	794 <__flatbuffers_voffset_read_from_pe>
    69e8:	mov	r3, r0
    69ec:	mov	r2, r3
    69f0:	ldrh	r3, [fp, #-8]
    69f4:	add	r3, r3, #3
    69f8:	lsl	r3, r3, #1
    69fc:	cmp	r2, r3
    6a00:	bcc	6a28 <Fantasy_Movie_characters_type+0xa4>
    6a04:	ldrh	r3, [fp, #-8]
    6a08:	add	r3, r3, #2
    6a0c:	lsl	r3, r3, #1
    6a10:	ldr	r2, [fp, #-12]
    6a14:	add	r3, r2, r3
    6a18:	mov	r0, r3
    6a1c:	bl	794 <__flatbuffers_voffset_read_from_pe>
    6a20:	mov	r3, r0
    6a24:	strh	r3, [fp, #-6]
    6a28:	ldrh	r3, [fp, #-6]
    6a2c:	cmp	r3, #0
    6a30:	beq	6a60 <Fantasy_Movie_characters_type+0xdc>
    6a34:	ldrh	r3, [fp, #-6]
    6a38:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6a3c:	add	r3, r2, r3
    6a40:	str	r3, [fp, #-16]
    6a44:	ldr	r0, [fp, #-16]
    6a48:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    6a4c:	mov	r3, r0
    6a50:	add	r3, r3, #4
    6a54:	ldr	r2, [fp, #-16]
    6a58:	add	r3, r2, r3
    6a5c:	b	6a64 <Fantasy_Movie_characters_type+0xe0>
    6a60:	mov	r3, #0
    6a64:	mov	r0, r3
    6a68:	sub	sp, fp, #4
    6a6c:	pop	{fp, pc}
    6a70:	.word	0x00003c80
    6a74:	.word	0x00000337
    6a78:	.word	0x000000c8
    6a7c:	.word	0x0000015c

00006a80 <Fantasy_Movie_characters>:
    6a80:	push	{fp, lr}
    6a84:	add	fp, sp, #4
    6a88:	sub	sp, sp, #24
    6a8c:	str	r0, [fp, #-24]	; 0xffffffe8
    6a90:	mov	r3, #0
    6a94:	strh	r3, [fp, #-6]
    6a98:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6a9c:	cmp	r3, #0
    6aa0:	bne	6ab8 <Fantasy_Movie_characters+0x38>
    6aa4:	ldr	r3, [pc, #192]	; 6b6c <Fantasy_Movie_characters+0xec>
    6aa8:	ldr	r2, [pc, #192]	; 6b70 <Fantasy_Movie_characters+0xf0>
    6aac:	ldr	r1, [pc, #192]	; 6b74 <Fantasy_Movie_characters+0xf4>
    6ab0:	ldr	r0, [pc, #192]	; 6b78 <Fantasy_Movie_characters+0xf8>
    6ab4:	bl	0 <__assert_fail>
    6ab8:	mov	r3, #9
    6abc:	strh	r3, [fp, #-8]
    6ac0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6ac4:	bl	73c <__flatbuffers_soffset_read_from_pe>
    6ac8:	mov	r3, r0
    6acc:	rsb	r3, r3, #0
    6ad0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6ad4:	add	r3, r2, r3
    6ad8:	str	r3, [fp, #-12]
    6adc:	ldr	r0, [fp, #-12]
    6ae0:	bl	794 <__flatbuffers_voffset_read_from_pe>
    6ae4:	mov	r3, r0
    6ae8:	mov	r2, r3
    6aec:	ldrh	r3, [fp, #-8]
    6af0:	add	r3, r3, #3
    6af4:	lsl	r3, r3, #1
    6af8:	cmp	r2, r3
    6afc:	bcc	6b24 <Fantasy_Movie_characters+0xa4>
    6b00:	ldrh	r3, [fp, #-8]
    6b04:	add	r3, r3, #2
    6b08:	lsl	r3, r3, #1
    6b0c:	ldr	r2, [fp, #-12]
    6b10:	add	r3, r2, r3
    6b14:	mov	r0, r3
    6b18:	bl	794 <__flatbuffers_voffset_read_from_pe>
    6b1c:	mov	r3, r0
    6b20:	strh	r3, [fp, #-6]
    6b24:	ldrh	r3, [fp, #-6]
    6b28:	cmp	r3, #0
    6b2c:	beq	6b5c <Fantasy_Movie_characters+0xdc>
    6b30:	ldrh	r3, [fp, #-6]
    6b34:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6b38:	add	r3, r2, r3
    6b3c:	str	r3, [fp, #-16]
    6b40:	ldr	r0, [fp, #-16]
    6b44:	bl	6b4 <__flatbuffers_uoffset_read_from_pe>
    6b48:	mov	r3, r0
    6b4c:	add	r3, r3, #4
    6b50:	ldr	r2, [fp, #-16]
    6b54:	add	r3, r2, r3
    6b58:	b	6b60 <Fantasy_Movie_characters+0xe0>
    6b5c:	mov	r3, #0
    6b60:	mov	r0, r3
    6b64:	sub	sp, fp, #4
    6b68:	pop	{fp, pc}
    6b6c:	.word	0x00003c3c
    6b70:	.word	0x00000337
    6b74:	.word	0x000000c8
    6b78:	.word	0x0000015c

00006b7c <Fantasy_Movie_characters_is_present>:
    6b7c:	push	{fp, lr}
    6b80:	add	fp, sp, #4
    6b84:	sub	sp, sp, #16
    6b88:	str	r0, [fp, #-16]
    6b8c:	mov	r3, #0
    6b90:	strh	r3, [fp, #-6]
    6b94:	ldr	r3, [fp, #-16]
    6b98:	cmp	r3, #0
    6b9c:	bne	6bb4 <Fantasy_Movie_characters_is_present+0x38>
    6ba0:	ldr	r3, [pc, #152]	; 6c40 <Fantasy_Movie_characters_is_present+0xc4>
    6ba4:	ldr	r2, [pc, #152]	; 6c44 <Fantasy_Movie_characters_is_present+0xc8>
    6ba8:	ldr	r1, [pc, #152]	; 6c48 <Fantasy_Movie_characters_is_present+0xcc>
    6bac:	ldr	r0, [pc, #152]	; 6c4c <Fantasy_Movie_characters_is_present+0xd0>
    6bb0:	bl	0 <__assert_fail>
    6bb4:	mov	r3, #9
    6bb8:	strh	r3, [fp, #-8]
    6bbc:	ldr	r0, [fp, #-16]
    6bc0:	bl	73c <__flatbuffers_soffset_read_from_pe>
    6bc4:	mov	r3, r0
    6bc8:	rsb	r3, r3, #0
    6bcc:	ldr	r2, [fp, #-16]
    6bd0:	add	r3, r2, r3
    6bd4:	str	r3, [fp, #-12]
    6bd8:	ldr	r0, [fp, #-12]
    6bdc:	bl	794 <__flatbuffers_voffset_read_from_pe>
    6be0:	mov	r3, r0
    6be4:	mov	r2, r3
    6be8:	ldrh	r3, [fp, #-8]
    6bec:	add	r3, r3, #3
    6bf0:	lsl	r3, r3, #1
    6bf4:	cmp	r2, r3
    6bf8:	bcc	6c20 <Fantasy_Movie_characters_is_present+0xa4>
    6bfc:	ldrh	r3, [fp, #-8]
    6c00:	add	r3, r3, #2
    6c04:	lsl	r3, r3, #1
    6c08:	ldr	r2, [fp, #-12]
    6c0c:	add	r3, r2, r3
    6c10:	mov	r0, r3
    6c14:	bl	794 <__flatbuffers_voffset_read_from_pe>
    6c18:	mov	r3, r0
    6c1c:	strh	r3, [fp, #-6]
    6c20:	ldrh	r3, [fp, #-6]
    6c24:	cmp	r3, #0
    6c28:	movne	r3, #1
    6c2c:	moveq	r3, #0
    6c30:	uxtb	r3, r3
    6c34:	mov	r0, r3
    6c38:	sub	sp, fp, #4
    6c3c:	pop	{fp, pc}
    6c40:	.word	0x00003b10
    6c44:	.word	0x00000337
    6c48:	.word	0x000000c8
    6c4c:	.word	0x0000015c

00006c50 <Fantasy_Movie_characters_union>:
    6c50:	push	{r4, fp, lr}
    6c54:	add	fp, sp, #8
    6c58:	sub	sp, sp, #20
    6c5c:	str	r0, [fp, #-24]	; 0xffffffe8
    6c60:	str	r1, [fp, #-28]	; 0xffffffe4
    6c64:	ldr	r0, [fp, #-28]	; 0xffffffe4
    6c68:	bl	6984 <Fantasy_Movie_characters_type>
    6c6c:	mov	r3, r0
    6c70:	str	r3, [fp, #-20]	; 0xffffffec
    6c74:	ldr	r0, [fp, #-28]	; 0xffffffe4
    6c78:	bl	6a80 <Fantasy_Movie_characters>
    6c7c:	mov	r3, r0
    6c80:	str	r3, [fp, #-16]
    6c84:	ldr	r3, [fp, #-20]	; 0xffffffec
    6c88:	mov	r0, r3
    6c8c:	bl	9b8 <flatbuffers_vec_len>
    6c90:	mov	r4, r0
    6c94:	ldr	r3, [fp, #-16]
    6c98:	mov	r0, r3
    6c9c:	bl	9b8 <flatbuffers_vec_len>
    6ca0:	mov	r3, r0
    6ca4:	cmp	r4, r3
    6ca8:	beq	6cc0 <Fantasy_Movie_characters_union+0x70>
    6cac:	ldr	r3, [pc, #44]	; 6ce0 <Fantasy_Movie_characters_union+0x90>
    6cb0:	ldr	r2, [pc, #44]	; 6ce4 <Fantasy_Movie_characters_union+0x94>
    6cb4:	ldr	r1, [pc, #44]	; 6ce8 <Fantasy_Movie_characters_union+0x98>
    6cb8:	ldr	r0, [pc, #44]	; 6cec <Fantasy_Movie_characters_union+0x9c>
    6cbc:	bl	0 <__assert_fail>
    6cc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6cc4:	mov	r2, r3
    6cc8:	sub	r3, fp, #20
    6ccc:	ldm	r3, {r0, r1}
    6cd0:	stm	r2, {r0, r1}
    6cd4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6cd8:	sub	sp, fp, #8
    6cdc:	pop	{r4, fp, pc}
    6ce0:	.word	0x00003c1c
    6ce4:	.word	0x00000337
    6ce8:	.word	0x000000c8
    6cec:	.word	0x00000184

00006cf0 <flatcc_emitter_get_buffer_size>:
    6cf0:	push	{fp}		; (str fp, [sp, #-4]!)
    6cf4:	add	fp, sp, #0
    6cf8:	sub	sp, sp, #12
    6cfc:	str	r0, [fp, #-8]
    6d00:	ldr	r3, [fp, #-8]
    6d04:	ldr	r3, [r3, #24]
    6d08:	mov	r0, r3
    6d0c:	add	sp, fp, #0
    6d10:	pop	{fp}		; (ldr fp, [sp], #4)
    6d14:	bx	lr

00006d18 <flatbuffers_uint8_assign_to_pe>:
    6d18:	push	{fp, lr}
    6d1c:	add	fp, sp, #4
    6d20:	sub	sp, sp, #8
    6d24:	str	r0, [fp, #-8]
    6d28:	mov	r3, r1
    6d2c:	strb	r3, [fp, #-9]
    6d30:	ldrb	r3, [fp, #-9]
    6d34:	mov	r0, r3
    6d38:	bl	28 <flatbuffers_uint8_cast_to_pe>
    6d3c:	mov	r3, r0
    6d40:	mov	r2, r3
    6d44:	ldr	r3, [fp, #-8]
    6d48:	strb	r2, [r3]
    6d4c:	ldr	r3, [fp, #-8]
    6d50:	mov	r0, r3
    6d54:	sub	sp, fp, #4
    6d58:	pop	{fp, pc}

00006d5c <flatbuffers_uint8_vec_create>:
    6d5c:	push	{fp, lr}
    6d60:	add	fp, sp, #4
    6d64:	sub	sp, sp, #24
    6d68:	str	r0, [fp, #-8]
    6d6c:	str	r1, [fp, #-12]
    6d70:	str	r2, [fp, #-16]
    6d74:	mvn	r3, #0
    6d78:	str	r3, [sp, #4]
    6d7c:	mov	r3, #1
    6d80:	str	r3, [sp]
    6d84:	mov	r3, #1
    6d88:	ldr	r2, [fp, #-16]
    6d8c:	ldr	r1, [fp, #-12]
    6d90:	ldr	r0, [fp, #-8]
    6d94:	bl	0 <flatcc_builder_create_vector>
    6d98:	mov	r3, r0
    6d9c:	mov	r0, r3
    6da0:	sub	sp, fp, #4
    6da4:	pop	{fp, pc}

00006da8 <flatbuffers_int8_assign_to_pe>:
    6da8:	push	{fp, lr}
    6dac:	add	fp, sp, #4
    6db0:	sub	sp, sp, #8
    6db4:	str	r0, [fp, #-8]
    6db8:	mov	r3, r1
    6dbc:	strb	r3, [fp, #-9]
    6dc0:	ldrsb	r3, [fp, #-9]
    6dc4:	mov	r0, r3
    6dc8:	bl	22c <flatbuffers_int8_cast_to_pe>
    6dcc:	mov	r3, r0
    6dd0:	mov	r2, r3
    6dd4:	ldr	r3, [fp, #-8]
    6dd8:	strb	r2, [r3]
    6ddc:	ldr	r3, [fp, #-8]
    6de0:	mov	r0, r3
    6de4:	sub	sp, fp, #4
    6de8:	pop	{fp, pc}

00006dec <flatbuffers_bool_assign_to_pe>:
    6dec:	push	{fp, lr}
    6df0:	add	fp, sp, #4
    6df4:	sub	sp, sp, #8
    6df8:	str	r0, [fp, #-8]
    6dfc:	mov	r3, r1
    6e00:	strb	r3, [fp, #-9]
    6e04:	ldrb	r3, [fp, #-9]
    6e08:	mov	r0, r3
    6e0c:	bl	570 <flatbuffers_bool_cast_to_pe>
    6e10:	mov	r3, r0
    6e14:	mov	r2, r3
    6e18:	ldr	r3, [fp, #-8]
    6e1c:	strb	r2, [r3]
    6e20:	ldr	r3, [fp, #-8]
    6e24:	mov	r0, r3
    6e28:	sub	sp, fp, #4
    6e2c:	pop	{fp, pc}

00006e30 <flatbuffers_bool_vec_start>:
    6e30:	push	{fp, lr}
    6e34:	add	fp, sp, #4
    6e38:	sub	sp, sp, #8
    6e3c:	str	r0, [fp, #-8]
    6e40:	mvn	r3, #0
    6e44:	mov	r2, #1
    6e48:	mov	r1, #1
    6e4c:	ldr	r0, [fp, #-8]
    6e50:	bl	0 <flatcc_builder_start_vector>
    6e54:	mov	r3, r0
    6e58:	mov	r0, r3
    6e5c:	sub	sp, fp, #4
    6e60:	pop	{fp, pc}

00006e64 <flatbuffers_bool_vec_end>:
    6e64:	push	{fp, lr}
    6e68:	add	fp, sp, #4
    6e6c:	sub	sp, sp, #8
    6e70:	str	r0, [fp, #-8]
    6e74:	ldr	r0, [fp, #-8]
    6e78:	bl	0 <flatcc_builder_end_vector>
    6e7c:	mov	r3, r0
    6e80:	mov	r0, r3
    6e84:	sub	sp, fp, #4
    6e88:	pop	{fp, pc}

00006e8c <flatbuffers_bool_vec_create>:
    6e8c:	push	{fp, lr}
    6e90:	add	fp, sp, #4
    6e94:	sub	sp, sp, #24
    6e98:	str	r0, [fp, #-8]
    6e9c:	str	r1, [fp, #-12]
    6ea0:	str	r2, [fp, #-16]
    6ea4:	mvn	r3, #0
    6ea8:	str	r3, [sp, #4]
    6eac:	mov	r3, #1
    6eb0:	str	r3, [sp]
    6eb4:	mov	r3, #1
    6eb8:	ldr	r2, [fp, #-16]
    6ebc:	ldr	r1, [fp, #-12]
    6ec0:	ldr	r0, [fp, #-8]
    6ec4:	bl	0 <flatcc_builder_create_vector>
    6ec8:	mov	r3, r0
    6ecc:	mov	r0, r3
    6ed0:	sub	sp, fp, #4
    6ed4:	pop	{fp, pc}

00006ed8 <flatbuffers_bool_vec_clone>:
    6ed8:	push	{fp, lr}
    6edc:	add	fp, sp, #4
    6ee0:	sub	sp, sp, #16
    6ee4:	str	r0, [fp, #-8]
    6ee8:	str	r1, [fp, #-12]
    6eec:	ldr	r0, [fp, #-12]
    6ef0:	bl	d4c <flatbuffers_bool_vec_len>
    6ef4:	mov	r2, r0
    6ef8:	mvn	r3, #0
    6efc:	str	r3, [sp, #4]
    6f00:	mov	r3, #1
    6f04:	str	r3, [sp]
    6f08:	mov	r3, #1
    6f0c:	ldr	r1, [fp, #-12]
    6f10:	ldr	r0, [fp, #-8]
    6f14:	bl	0 <flatcc_builder_create_vector>
    6f18:	mov	r3, r0
    6f1c:	mov	r0, r3
    6f20:	sub	sp, fp, #4
    6f24:	pop	{fp, pc}

00006f28 <flatbuffers_bool_vec_slice>:
    6f28:	push	{fp, lr}
    6f2c:	add	fp, sp, #4
    6f30:	sub	sp, sp, #32
    6f34:	str	r0, [fp, #-16]
    6f38:	str	r1, [fp, #-20]	; 0xffffffec
    6f3c:	str	r2, [fp, #-24]	; 0xffffffe8
    6f40:	str	r3, [fp, #-28]	; 0xffffffe4
    6f44:	ldr	r0, [fp, #-20]	; 0xffffffec
    6f48:	bl	d4c <flatbuffers_bool_vec_len>
    6f4c:	str	r0, [fp, #-8]
    6f50:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6f54:	ldr	r3, [fp, #-8]
    6f58:	cmp	r2, r3
    6f5c:	bcc	6f68 <flatbuffers_bool_vec_slice+0x40>
    6f60:	ldr	r3, [fp, #-8]
    6f64:	str	r3, [fp, #-24]	; 0xffffffe8
    6f68:	ldr	r2, [fp, #-8]
    6f6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6f70:	sub	r3, r2, r3
    6f74:	str	r3, [fp, #-8]
    6f78:	ldr	r2, [fp, #-28]	; 0xffffffe4
    6f7c:	ldr	r3, [fp, #-8]
    6f80:	cmp	r2, r3
    6f84:	bls	6f90 <flatbuffers_bool_vec_slice+0x68>
    6f88:	ldr	r3, [fp, #-8]
    6f8c:	str	r3, [fp, #-28]	; 0xffffffe4
    6f90:	ldr	r1, [fp, #-24]	; 0xffffffe8
    6f94:	ldr	r0, [fp, #-20]	; 0xffffffec
    6f98:	bl	598 <flatbuffers_bool__const_ptr_add>
    6f9c:	mov	r1, r0
    6fa0:	mvn	r3, #0
    6fa4:	str	r3, [sp, #4]
    6fa8:	mov	r3, #1
    6fac:	str	r3, [sp]
    6fb0:	mov	r3, #1
    6fb4:	ldr	r2, [fp, #-28]	; 0xffffffe4
    6fb8:	ldr	r0, [fp, #-16]
    6fbc:	bl	0 <flatcc_builder_create_vector>
    6fc0:	mov	r3, r0
    6fc4:	mov	r0, r3
    6fc8:	sub	sp, fp, #4
    6fcc:	pop	{fp, pc}

00006fd0 <flatbuffers_uint16_assign_to_pe>:
    6fd0:	push	{fp, lr}
    6fd4:	add	fp, sp, #4
    6fd8:	sub	sp, sp, #8
    6fdc:	str	r0, [fp, #-8]
    6fe0:	mov	r3, r1
    6fe4:	strh	r3, [fp, #-10]
    6fe8:	ldrh	r3, [fp, #-10]
    6fec:	mov	r0, r3
    6ff0:	bl	a8 <flatbuffers_uint16_cast_to_pe>
    6ff4:	mov	r3, r0
    6ff8:	mov	r2, r3
    6ffc:	ldr	r3, [fp, #-8]
    7000:	strh	r2, [r3]
    7004:	ldr	r3, [fp, #-8]
    7008:	mov	r0, r3
    700c:	sub	sp, fp, #4
    7010:	pop	{fp, pc}

00007014 <flatbuffers_uint32_assign_to_pe>:
    7014:	push	{fp, lr}
    7018:	add	fp, sp, #4
    701c:	sub	sp, sp, #8
    7020:	str	r0, [fp, #-8]
    7024:	str	r1, [fp, #-12]
    7028:	ldr	r0, [fp, #-12]
    702c:	bl	124 <flatbuffers_uint32_cast_to_pe>
    7030:	mov	r2, r0
    7034:	ldr	r3, [fp, #-8]
    7038:	str	r2, [r3]
    703c:	ldr	r3, [fp, #-8]
    7040:	mov	r0, r3
    7044:	sub	sp, fp, #4
    7048:	pop	{fp, pc}

0000704c <flatbuffers_uint64_assign_to_pe>:
    704c:	push	{fp, lr}
    7050:	add	fp, sp, #4
    7054:	sub	sp, sp, #16
    7058:	str	r0, [fp, #-8]
    705c:	strd	r2, [fp, #-20]	; 0xffffffec
    7060:	ldrd	r0, [fp, #-20]	; 0xffffffec
    7064:	bl	1a0 <flatbuffers_uint64_cast_to_pe>
    7068:	mov	r2, r0
    706c:	mov	r3, r1
    7070:	ldr	r1, [fp, #-8]
    7074:	strd	r2, [r1]
    7078:	ldr	r3, [fp, #-8]
    707c:	mov	r0, r3
    7080:	sub	sp, fp, #4
    7084:	pop	{fp, pc}

00007088 <flatbuffers_int16_copy_from_pe>:
    7088:	push	{fp, lr}
    708c:	add	fp, sp, #4
    7090:	sub	sp, sp, #8
    7094:	str	r0, [fp, #-8]
    7098:	str	r1, [fp, #-12]
    709c:	ldr	r3, [fp, #-12]
    70a0:	ldrsh	r3, [r3]
    70a4:	mov	r0, r3
    70a8:	bl	284 <flatbuffers_int16_cast_from_pe>
    70ac:	mov	r3, r0
    70b0:	mov	r2, r3
    70b4:	ldr	r3, [fp, #-8]
    70b8:	strh	r2, [r3]
    70bc:	ldr	r3, [fp, #-8]
    70c0:	mov	r0, r3
    70c4:	sub	sp, fp, #4
    70c8:	pop	{fp, pc}

000070cc <flatbuffers_int16_assign_to_pe>:
    70cc:	push	{fp, lr}
    70d0:	add	fp, sp, #4
    70d4:	sub	sp, sp, #8
    70d8:	str	r0, [fp, #-8]
    70dc:	mov	r3, r1
    70e0:	strh	r3, [fp, #-10]
    70e4:	ldrsh	r3, [fp, #-10]
    70e8:	mov	r0, r3
    70ec:	bl	2ac <flatbuffers_int16_cast_to_pe>
    70f0:	mov	r3, r0
    70f4:	mov	r2, r3
    70f8:	ldr	r3, [fp, #-8]
    70fc:	strh	r2, [r3]
    7100:	ldr	r3, [fp, #-8]
    7104:	mov	r0, r3
    7108:	sub	sp, fp, #4
    710c:	pop	{fp, pc}

00007110 <flatbuffers_int32_assign_to_pe>:
    7110:	push	{fp, lr}
    7114:	add	fp, sp, #4
    7118:	sub	sp, sp, #8
    711c:	str	r0, [fp, #-8]
    7120:	str	r1, [fp, #-12]
    7124:	ldr	r0, [fp, #-12]
    7128:	bl	328 <flatbuffers_int32_cast_to_pe>
    712c:	mov	r2, r0
    7130:	ldr	r3, [fp, #-8]
    7134:	str	r2, [r3]
    7138:	ldr	r3, [fp, #-8]
    713c:	mov	r0, r3
    7140:	sub	sp, fp, #4
    7144:	pop	{fp, pc}

00007148 <flatbuffers_int64_assign_to_pe>:
    7148:	push	{fp, lr}
    714c:	add	fp, sp, #4
    7150:	sub	sp, sp, #16
    7154:	str	r0, [fp, #-8]
    7158:	strd	r2, [fp, #-20]	; 0xffffffec
    715c:	ldrd	r0, [fp, #-20]	; 0xffffffec
    7160:	bl	3a4 <flatbuffers_int64_cast_to_pe>
    7164:	mov	r2, r0
    7168:	mov	r3, r1
    716c:	ldr	r1, [fp, #-8]
    7170:	strd	r2, [r1]
    7174:	ldr	r3, [fp, #-8]
    7178:	mov	r0, r3
    717c:	sub	sp, fp, #4
    7180:	pop	{fp, pc}

00007184 <flatbuffers_float_copy_from_pe>:
    7184:	push	{fp, lr}
    7188:	add	fp, sp, #4
    718c:	sub	sp, sp, #8
    7190:	str	r0, [fp, #-8]
    7194:	str	r1, [fp, #-12]
    7198:	ldr	r3, [fp, #-12]
    719c:	vldr	s15, [r3]
    71a0:	vmov.f32	s0, s15
    71a4:	bl	408 <flatbuffers_float_cast_from_pe>
    71a8:	vmov.f32	s15, s0
    71ac:	ldr	r3, [fp, #-8]
    71b0:	vstr	s15, [r3]
    71b4:	ldr	r3, [fp, #-8]
    71b8:	mov	r0, r3
    71bc:	sub	sp, fp, #4
    71c0:	pop	{fp, pc}

000071c4 <flatbuffers_float_assign_to_pe>:
    71c4:	push	{fp, lr}
    71c8:	add	fp, sp, #4
    71cc:	sub	sp, sp, #8
    71d0:	str	r0, [fp, #-8]
    71d4:	vstr	s0, [fp, #-12]
    71d8:	vldr	s0, [fp, #-12]
    71dc:	bl	440 <flatbuffers_float_cast_to_pe>
    71e0:	vmov.f32	s15, s0
    71e4:	ldr	r3, [fp, #-8]
    71e8:	vstr	s15, [r3]
    71ec:	ldr	r3, [fp, #-8]
    71f0:	mov	r0, r3
    71f4:	sub	sp, fp, #4
    71f8:	pop	{fp, pc}

000071fc <flatbuffers_double_copy_from_pe>:
    71fc:	push	{fp, lr}
    7200:	add	fp, sp, #4
    7204:	sub	sp, sp, #8
    7208:	str	r0, [fp, #-8]
    720c:	str	r1, [fp, #-12]
    7210:	ldr	r3, [fp, #-12]
    7214:	vldr	d7, [r3]
    7218:	vmov.f64	d0, d7
    721c:	bl	4a8 <flatbuffers_double_cast_from_pe>
    7220:	vmov.f64	d7, d0
    7224:	ldr	r3, [fp, #-8]
    7228:	vstr	d7, [r3]
    722c:	ldr	r3, [fp, #-8]
    7230:	mov	r0, r3
    7234:	sub	sp, fp, #4
    7238:	pop	{fp, pc}

0000723c <flatbuffers_double_assign_to_pe>:
    723c:	push	{fp, lr}
    7240:	add	fp, sp, #4
    7244:	sub	sp, sp, #16
    7248:	str	r0, [fp, #-8]
    724c:	vstr	d0, [fp, #-20]	; 0xffffffec
    7250:	vldr	d0, [fp, #-20]	; 0xffffffec
    7254:	bl	4e0 <flatbuffers_double_cast_to_pe>
    7258:	vmov.f64	d7, d0
    725c:	ldr	r3, [fp, #-8]
    7260:	vstr	d7, [r3]
    7264:	ldr	r3, [fp, #-8]
    7268:	mov	r0, r3
    726c:	sub	sp, fp, #4
    7270:	pop	{fp, pc}

00007274 <flatbuffers_double_vec_create>:
    7274:	push	{fp, lr}
    7278:	add	fp, sp, #4
    727c:	sub	sp, sp, #24
    7280:	str	r0, [fp, #-8]
    7284:	str	r1, [fp, #-12]
    7288:	str	r2, [fp, #-16]
    728c:	mvn	r3, #-536870912	; 0xe0000000
    7290:	str	r3, [sp, #4]
    7294:	mov	r3, #8
    7298:	str	r3, [sp]
    729c:	mov	r3, #8
    72a0:	ldr	r2, [fp, #-16]
    72a4:	ldr	r1, [fp, #-12]
    72a8:	ldr	r0, [fp, #-8]
    72ac:	bl	0 <flatcc_builder_create_vector>
    72b0:	mov	r3, r0
    72b4:	mov	r0, r3
    72b8:	sub	sp, fp, #4
    72bc:	pop	{fp, pc}

000072c0 <flatbuffers_string_create>:
    72c0:	push	{fp, lr}
    72c4:	add	fp, sp, #4
    72c8:	sub	sp, sp, #16
    72cc:	str	r0, [fp, #-8]
    72d0:	str	r1, [fp, #-12]
    72d4:	str	r2, [fp, #-16]
    72d8:	ldr	r2, [fp, #-16]
    72dc:	ldr	r1, [fp, #-12]
    72e0:	ldr	r0, [fp, #-8]
    72e4:	bl	0 <flatcc_builder_create_string>
    72e8:	mov	r3, r0
    72ec:	mov	r0, r3
    72f0:	sub	sp, fp, #4
    72f4:	pop	{fp, pc}

000072f8 <flatbuffers_string_create_str>:
    72f8:	push	{fp, lr}
    72fc:	add	fp, sp, #4
    7300:	sub	sp, sp, #8
    7304:	str	r0, [fp, #-8]
    7308:	str	r1, [fp, #-12]
    730c:	ldr	r1, [fp, #-12]
    7310:	ldr	r0, [fp, #-8]
    7314:	bl	0 <flatcc_builder_create_string_str>
    7318:	mov	r3, r0
    731c:	mov	r0, r3
    7320:	sub	sp, fp, #4
    7324:	pop	{fp, pc}

00007328 <flatbuffers_string_clone>:
    7328:	push	{fp, lr}
    732c:	add	fp, sp, #4
    7330:	sub	sp, sp, #8
    7334:	str	r0, [fp, #-8]
    7338:	str	r1, [fp, #-12]
    733c:	ldr	r0, [fp, #-12]
    7340:	bl	9fc <flatbuffers_string_len>
    7344:	mov	r3, r0
    7348:	mov	r2, r3
    734c:	ldr	r1, [fp, #-12]
    7350:	ldr	r0, [fp, #-8]
    7354:	bl	0 <flatcc_builder_create_string>
    7358:	mov	r3, r0
    735c:	mov	r0, r3
    7360:	sub	sp, fp, #4
    7364:	pop	{fp, pc}

00007368 <flatbuffers_string_slice>:
    7368:	push	{fp, lr}
    736c:	add	fp, sp, #4
    7370:	sub	sp, sp, #24
    7374:	str	r0, [fp, #-16]
    7378:	str	r1, [fp, #-20]	; 0xffffffec
    737c:	str	r2, [fp, #-24]	; 0xffffffe8
    7380:	str	r3, [fp, #-28]	; 0xffffffe4
    7384:	ldr	r0, [fp, #-20]	; 0xffffffec
    7388:	bl	9fc <flatbuffers_string_len>
    738c:	str	r0, [fp, #-8]
    7390:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7394:	ldr	r3, [fp, #-8]
    7398:	cmp	r2, r3
    739c:	bcc	73a8 <flatbuffers_string_slice+0x40>
    73a0:	ldr	r3, [fp, #-8]
    73a4:	str	r3, [fp, #-24]	; 0xffffffe8
    73a8:	ldr	r2, [fp, #-8]
    73ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    73b0:	sub	r3, r2, r3
    73b4:	str	r3, [fp, #-8]
    73b8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    73bc:	ldr	r3, [fp, #-8]
    73c0:	cmp	r2, r3
    73c4:	bls	73d0 <flatbuffers_string_slice+0x68>
    73c8:	ldr	r3, [fp, #-8]
    73cc:	str	r3, [fp, #-28]	; 0xffffffe4
    73d0:	ldr	r2, [fp, #-20]	; 0xffffffec
    73d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    73d8:	add	r3, r2, r3
    73dc:	ldr	r2, [fp, #-28]	; 0xffffffe4
    73e0:	mov	r1, r3
    73e4:	ldr	r0, [fp, #-16]
    73e8:	bl	0 <flatcc_builder_create_string>
    73ec:	mov	r3, r0
    73f0:	mov	r0, r3
    73f4:	sub	sp, fp, #4
    73f8:	pop	{fp, pc}

000073fc <flatbuffers_string_vec_push>:
    73fc:	push	{fp, lr}
    7400:	add	fp, sp, #4
    7404:	sub	sp, sp, #8
    7408:	str	r0, [fp, #-8]
    740c:	str	r1, [fp, #-12]
    7410:	ldr	r3, [fp, #-12]
    7414:	cmp	r3, #0
    7418:	beq	7430 <flatbuffers_string_vec_push+0x34>
    741c:	ldr	r1, [fp, #-12]
    7420:	ldr	r0, [fp, #-8]
    7424:	bl	0 <flatcc_builder_offset_vector_push>
    7428:	mov	r3, r0
    742c:	b	7434 <flatbuffers_string_vec_push+0x38>
    7430:	mov	r3, #0
    7434:	mov	r0, r3
    7438:	sub	sp, fp, #4
    743c:	pop	{fp, pc}

00007440 <flatbuffers_buffer_start>:
    7440:	push	{fp, lr}
    7444:	add	fp, sp, #4
    7448:	sub	sp, sp, #8
    744c:	str	r0, [fp, #-8]
    7450:	str	r1, [fp, #-12]
    7454:	mov	r3, #0
    7458:	mov	r2, #0
    745c:	ldr	r1, [fp, #-12]
    7460:	ldr	r0, [fp, #-8]
    7464:	bl	0 <flatcc_builder_start_buffer>
    7468:	mov	r3, r0
    746c:	mov	r0, r3
    7470:	sub	sp, fp, #4
    7474:	pop	{fp, pc}

00007478 <flatbuffers_buffer_start_with_size>:
    7478:	push	{fp, lr}
    747c:	add	fp, sp, #4
    7480:	sub	sp, sp, #8
    7484:	str	r0, [fp, #-8]
    7488:	str	r1, [fp, #-12]
    748c:	mov	r3, #2
    7490:	mov	r2, #0
    7494:	ldr	r1, [fp, #-12]
    7498:	ldr	r0, [fp, #-8]
    749c:	bl	0 <flatcc_builder_start_buffer>
    74a0:	mov	r3, r0
    74a4:	mov	r0, r3
    74a8:	sub	sp, fp, #4
    74ac:	pop	{fp, pc}

000074b0 <flatbuffers_buffer_end>:
    74b0:	push	{fp, lr}
    74b4:	add	fp, sp, #4
    74b8:	sub	sp, sp, #8
    74bc:	str	r0, [fp, #-8]
    74c0:	str	r1, [fp, #-12]
    74c4:	ldr	r1, [fp, #-12]
    74c8:	ldr	r0, [fp, #-8]
    74cc:	bl	0 <flatcc_builder_end_buffer>
    74d0:	mov	r3, r0
    74d4:	mov	r0, r3
    74d8:	sub	sp, fp, #4
    74dc:	pop	{fp, pc}

000074e0 <MyGame_Example_Color_assign_to_pe>:
    74e0:	push	{fp, lr}
    74e4:	add	fp, sp, #4
    74e8:	sub	sp, sp, #8
    74ec:	str	r0, [fp, #-8]
    74f0:	mov	r3, r1
    74f4:	strb	r3, [fp, #-9]
    74f8:	ldrsb	r3, [fp, #-9]
    74fc:	mov	r0, r3
    7500:	bl	1b94 <MyGame_Example_Color_cast_to_pe>
    7504:	mov	r3, r0
    7508:	mov	r2, r3
    750c:	ldr	r3, [fp, #-8]
    7510:	strb	r2, [r3]
    7514:	ldr	r3, [fp, #-8]
    7518:	mov	r0, r3
    751c:	sub	sp, fp, #4
    7520:	pop	{fp, pc}

00007524 <MyGame_Example_Test_assign>:
    7524:	push	{fp}		; (str fp, [sp, #-4]!)
    7528:	add	fp, sp, #0
    752c:	sub	sp, sp, #12
    7530:	str	r0, [fp, #-8]
    7534:	mov	r3, r1
    7538:	strh	r3, [fp, #-10]
    753c:	mov	r3, r2
    7540:	strb	r3, [fp, #-11]
    7544:	ldr	r3, [fp, #-8]
    7548:	ldrh	r2, [fp, #-10]
    754c:	strh	r2, [r3]
    7550:	ldr	r3, [fp, #-8]
    7554:	ldrb	r2, [fp, #-11]
    7558:	strb	r2, [r3, #2]
    755c:	ldr	r3, [fp, #-8]
    7560:	mov	r0, r3
    7564:	add	sp, fp, #0
    7568:	pop	{fp}		; (ldr fp, [sp], #4)
    756c:	bx	lr

00007570 <MyGame_Example_Test_assign_to_pe>:
    7570:	push	{fp, lr}
    7574:	add	fp, sp, #4
    7578:	sub	sp, sp, #8
    757c:	str	r0, [fp, #-8]
    7580:	mov	r3, r1
    7584:	strh	r3, [fp, #-10]
    7588:	mov	r3, r2
    758c:	strb	r3, [fp, #-11]
    7590:	ldr	r3, [fp, #-8]
    7594:	ldrsh	r2, [fp, #-10]
    7598:	mov	r1, r2
    759c:	mov	r0, r3
    75a0:	bl	70cc <flatbuffers_int16_assign_to_pe>
    75a4:	ldr	r3, [fp, #-8]
    75a8:	ldrb	r2, [fp, #-11]
    75ac:	strb	r2, [r3, #2]
    75b0:	ldr	r3, [fp, #-8]
    75b4:	mov	r0, r3
    75b8:	sub	sp, fp, #4
    75bc:	pop	{fp, pc}

000075c0 <MyGame_Example_Test_copy_from_pe>:
    75c0:	push	{fp, lr}
    75c4:	add	fp, sp, #4
    75c8:	sub	sp, sp, #8
    75cc:	str	r0, [fp, #-8]
    75d0:	str	r1, [fp, #-12]
    75d4:	ldr	r3, [fp, #-8]
    75d8:	ldr	r2, [fp, #-12]
    75dc:	mov	r1, r2
    75e0:	mov	r0, r3
    75e4:	bl	7088 <flatbuffers_int16_copy_from_pe>
    75e8:	ldr	r3, [fp, #-12]
    75ec:	ldrsb	r2, [r3, #2]
    75f0:	ldr	r3, [fp, #-8]
    75f4:	strb	r2, [r3, #2]
    75f8:	ldr	r3, [fp, #-8]
    75fc:	mov	r0, r3
    7600:	sub	sp, fp, #4
    7604:	pop	{fp, pc}

00007608 <MyGame_Example_Test_vec_start>:
    7608:	push	{fp, lr}
    760c:	add	fp, sp, #4
    7610:	sub	sp, sp, #8
    7614:	str	r0, [fp, #-8]
    7618:	mvn	r3, #-1073741824	; 0xc0000000
    761c:	mov	r2, #2
    7620:	mov	r1, #4
    7624:	ldr	r0, [fp, #-8]
    7628:	bl	0 <flatcc_builder_start_vector>
    762c:	mov	r3, r0
    7630:	mov	r0, r3
    7634:	sub	sp, fp, #4
    7638:	pop	{fp, pc}

0000763c <MyGame_Example_Test_vec_end>:
    763c:	push	{fp, lr}
    7640:	add	fp, sp, #4
    7644:	sub	sp, sp, #8
    7648:	str	r0, [fp, #-8]
    764c:	ldr	r0, [fp, #-8]
    7650:	bl	0 <flatcc_builder_end_vector>
    7654:	mov	r3, r0
    7658:	mov	r0, r3
    765c:	sub	sp, fp, #4
    7660:	pop	{fp, pc}

00007664 <MyGame_Example_Test_vec_clone>:
    7664:	push	{fp, lr}
    7668:	add	fp, sp, #4
    766c:	sub	sp, sp, #16
    7670:	str	r0, [fp, #-8]
    7674:	str	r1, [fp, #-12]
    7678:	ldr	r0, [fp, #-12]
    767c:	bl	1d6c <MyGame_Example_Test_vec_len>
    7680:	mov	r2, r0
    7684:	mvn	r3, #-1073741824	; 0xc0000000
    7688:	str	r3, [sp, #4]
    768c:	mov	r3, #2
    7690:	str	r3, [sp]
    7694:	mov	r3, #4
    7698:	ldr	r1, [fp, #-12]
    769c:	ldr	r0, [fp, #-8]
    76a0:	bl	0 <flatcc_builder_create_vector>
    76a4:	mov	r3, r0
    76a8:	mov	r0, r3
    76ac:	sub	sp, fp, #4
    76b0:	pop	{fp, pc}

000076b4 <MyGame_Example_Test_vec_slice>:
    76b4:	push	{fp, lr}
    76b8:	add	fp, sp, #4
    76bc:	sub	sp, sp, #32
    76c0:	str	r0, [fp, #-16]
    76c4:	str	r1, [fp, #-20]	; 0xffffffec
    76c8:	str	r2, [fp, #-24]	; 0xffffffe8
    76cc:	str	r3, [fp, #-28]	; 0xffffffe4
    76d0:	ldr	r0, [fp, #-20]	; 0xffffffec
    76d4:	bl	1d6c <MyGame_Example_Test_vec_len>
    76d8:	str	r0, [fp, #-8]
    76dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    76e0:	ldr	r3, [fp, #-8]
    76e4:	cmp	r2, r3
    76e8:	bcc	76f4 <MyGame_Example_Test_vec_slice+0x40>
    76ec:	ldr	r3, [fp, #-8]
    76f0:	str	r3, [fp, #-24]	; 0xffffffe8
    76f4:	ldr	r2, [fp, #-8]
    76f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    76fc:	sub	r3, r2, r3
    7700:	str	r3, [fp, #-8]
    7704:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7708:	ldr	r3, [fp, #-8]
    770c:	cmp	r2, r3
    7710:	bls	771c <MyGame_Example_Test_vec_slice+0x68>
    7714:	ldr	r3, [fp, #-8]
    7718:	str	r3, [fp, #-28]	; 0xffffffe4
    771c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7720:	ldr	r0, [fp, #-20]	; 0xffffffec
    7724:	bl	1cb4 <MyGame_Example_Test__const_ptr_add>
    7728:	mov	r1, r0
    772c:	mvn	r3, #-1073741824	; 0xc0000000
    7730:	str	r3, [sp, #4]
    7734:	mov	r3, #2
    7738:	str	r3, [sp]
    773c:	mov	r3, #4
    7740:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7744:	ldr	r0, [fp, #-16]
    7748:	bl	0 <flatcc_builder_create_vector>
    774c:	mov	r3, r0
    7750:	mov	r0, r3
    7754:	sub	sp, fp, #4
    7758:	pop	{fp, pc}

0000775c <MyGame_Example_Test_vec_push>:
    775c:	push	{fp, lr}
    7760:	add	fp, sp, #4
    7764:	sub	sp, sp, #16
    7768:	str	r0, [fp, #-16]
    776c:	str	r1, [fp, #-20]	; 0xffffffec
    7770:	mov	r1, #1
    7774:	ldr	r0, [fp, #-16]
    7778:	bl	0 <flatcc_builder_extend_vector>
    777c:	str	r0, [fp, #-8]
    7780:	ldr	r3, [fp, #-8]
    7784:	cmp	r3, #0
    7788:	beq	77ac <MyGame_Example_Test_vec_push+0x50>
    778c:	bl	1d50 <MyGame_Example_Test__size>
    7790:	mov	r3, r0
    7794:	mov	r2, r3
    7798:	ldr	r1, [fp, #-20]	; 0xffffffec
    779c:	ldr	r0, [fp, #-8]
    77a0:	bl	0 <memcpy>
    77a4:	ldr	r3, [fp, #-8]
    77a8:	b	77b0 <MyGame_Example_Test_vec_push+0x54>
    77ac:	mov	r3, #0
    77b0:	mov	r0, r3
    77b4:	sub	sp, fp, #4
    77b8:	pop	{fp, pc}

000077bc <MyGame_Example_emptystruct_copy_to_pe>:
    77bc:	push	{fp}		; (str fp, [sp, #-4]!)
    77c0:	add	fp, sp, #0
    77c4:	sub	sp, sp, #12
    77c8:	str	r0, [fp, #-8]
    77cc:	str	r1, [fp, #-12]
    77d0:	ldr	r3, [fp, #-8]
    77d4:	mov	r0, r3
    77d8:	add	sp, fp, #0
    77dc:	pop	{fp}		; (ldr fp, [sp], #4)
    77e0:	bx	lr

000077e4 <MyGame_Example_Vec3_assign_to_pe>:
    77e4:	push	{fp, lr}
    77e8:	add	fp, sp, #4
    77ec:	sub	sp, sp, #32
    77f0:	str	r0, [fp, #-8]
    77f4:	vstr	s0, [fp, #-12]
    77f8:	vstr	s1, [fp, #-16]
    77fc:	vstr	s2, [fp, #-20]	; 0xffffffec
    7800:	vstr	d2, [fp, #-28]	; 0xffffffe4
    7804:	mov	r0, r1
    7808:	mov	r1, r3
    780c:	mov	r3, r0
    7810:	strb	r3, [fp, #-29]	; 0xffffffe3
    7814:	strh	r2, [fp, #-32]	; 0xffffffe0
    7818:	mov	r3, r1
    781c:	strb	r3, [fp, #-30]	; 0xffffffe2
    7820:	ldr	r3, [fp, #-8]
    7824:	vldr	s0, [fp, #-12]
    7828:	mov	r0, r3
    782c:	bl	71c4 <flatbuffers_float_assign_to_pe>
    7830:	ldr	r3, [fp, #-8]
    7834:	add	r3, r3, #4
    7838:	vldr	s0, [fp, #-16]
    783c:	mov	r0, r3
    7840:	bl	71c4 <flatbuffers_float_assign_to_pe>
    7844:	ldr	r3, [fp, #-8]
    7848:	add	r3, r3, #8
    784c:	vldr	s0, [fp, #-20]	; 0xffffffec
    7850:	mov	r0, r3
    7854:	bl	71c4 <flatbuffers_float_assign_to_pe>
    7858:	ldr	r3, [fp, #-8]
    785c:	add	r3, r3, #16
    7860:	vldr	d0, [fp, #-28]	; 0xffffffe4
    7864:	mov	r0, r3
    7868:	bl	723c <flatbuffers_double_assign_to_pe>
    786c:	ldr	r3, [fp, #-8]
    7870:	ldrb	r2, [fp, #-29]	; 0xffffffe3
    7874:	strb	r2, [r3, #24]
    7878:	ldr	r3, [fp, #-8]
    787c:	add	r3, r3, #26
    7880:	ldrsb	r2, [fp, #-30]	; 0xffffffe2
    7884:	ldrsh	r1, [fp, #-32]	; 0xffffffe0
    7888:	mov	r0, r3
    788c:	bl	7570 <MyGame_Example_Test_assign_to_pe>
    7890:	ldr	r3, [fp, #-8]
    7894:	mov	r0, r3
    7898:	sub	sp, fp, #4
    789c:	pop	{fp, pc}

000078a0 <MyGame_Example_Vec3_copy_from_pe>:
    78a0:	push	{fp, lr}
    78a4:	add	fp, sp, #4
    78a8:	sub	sp, sp, #8
    78ac:	str	r0, [fp, #-8]
    78b0:	str	r1, [fp, #-12]
    78b4:	ldr	r3, [fp, #-8]
    78b8:	ldr	r2, [fp, #-12]
    78bc:	mov	r1, r2
    78c0:	mov	r0, r3
    78c4:	bl	7184 <flatbuffers_float_copy_from_pe>
    78c8:	ldr	r3, [fp, #-8]
    78cc:	add	r2, r3, #4
    78d0:	ldr	r3, [fp, #-12]
    78d4:	add	r3, r3, #4
    78d8:	mov	r1, r3
    78dc:	mov	r0, r2
    78e0:	bl	7184 <flatbuffers_float_copy_from_pe>
    78e4:	ldr	r3, [fp, #-8]
    78e8:	add	r2, r3, #8
    78ec:	ldr	r3, [fp, #-12]
    78f0:	add	r3, r3, #8
    78f4:	mov	r1, r3
    78f8:	mov	r0, r2
    78fc:	bl	7184 <flatbuffers_float_copy_from_pe>
    7900:	ldr	r3, [fp, #-8]
    7904:	add	r2, r3, #16
    7908:	ldr	r3, [fp, #-12]
    790c:	add	r3, r3, #16
    7910:	mov	r1, r3
    7914:	mov	r0, r2
    7918:	bl	71fc <flatbuffers_double_copy_from_pe>
    791c:	ldr	r3, [fp, #-12]
    7920:	ldrsb	r2, [r3, #24]
    7924:	ldr	r3, [fp, #-8]
    7928:	strb	r2, [r3, #24]
    792c:	ldr	r3, [fp, #-8]
    7930:	add	r2, r3, #26
    7934:	ldr	r3, [fp, #-12]
    7938:	add	r3, r3, #26
    793c:	mov	r1, r3
    7940:	mov	r0, r2
    7944:	bl	75c0 <MyGame_Example_Test_copy_from_pe>
    7948:	ldr	r3, [fp, #-8]
    794c:	mov	r0, r3
    7950:	sub	sp, fp, #4
    7954:	pop	{fp, pc}

00007958 <MyGame_Example_Vec3_from_pe>:
    7958:	push	{fp}		; (str fp, [sp, #-4]!)
    795c:	add	fp, sp, #0
    7960:	sub	sp, sp, #12
    7964:	str	r0, [fp, #-8]
    7968:	ldr	r3, [fp, #-8]
    796c:	mov	r0, r3
    7970:	add	sp, fp, #0
    7974:	pop	{fp}		; (ldr fp, [sp], #4)
    7978:	bx	lr

0000797c <MyGame_Example_Vec3_clear>:
    797c:	push	{fp, lr}
    7980:	add	fp, sp, #4
    7984:	sub	sp, sp, #8
    7988:	str	r0, [fp, #-8]
    798c:	bl	1e50 <MyGame_Example_Vec3__size>
    7990:	mov	r3, r0
    7994:	mov	r2, r3
    7998:	mov	r1, #0
    799c:	ldr	r0, [fp, #-8]
    79a0:	bl	0 <memset>
    79a4:	mov	r3, r0
    79a8:	mov	r0, r3
    79ac:	sub	sp, fp, #4
    79b0:	pop	{fp, pc}

000079b4 <MyGame_Example_Vec3_start>:
    79b4:	push	{fp, lr}
    79b8:	add	fp, sp, #4
    79bc:	sub	sp, sp, #8
    79c0:	str	r0, [fp, #-8]
    79c4:	mov	r2, #16
    79c8:	mov	r1, #32
    79cc:	ldr	r0, [fp, #-8]
    79d0:	bl	0 <flatcc_builder_start_struct>
    79d4:	mov	r3, r0
    79d8:	mov	r0, r3
    79dc:	sub	sp, fp, #4
    79e0:	pop	{fp, pc}

000079e4 <MyGame_Example_Vec3_end_pe>:
    79e4:	push	{fp, lr}
    79e8:	add	fp, sp, #4
    79ec:	sub	sp, sp, #8
    79f0:	str	r0, [fp, #-8]
    79f4:	ldr	r0, [fp, #-8]
    79f8:	bl	0 <flatcc_builder_end_struct>
    79fc:	mov	r3, r0
    7a00:	mov	r0, r3
    7a04:	sub	sp, fp, #4
    7a08:	pop	{fp, pc}

00007a0c <MyGame_Example_Vec3_create>:
    7a0c:	push	{fp, lr}
    7a10:	add	fp, sp, #4
    7a14:	sub	sp, sp, #40	; 0x28
    7a18:	str	r0, [fp, #-16]
    7a1c:	vstr	s0, [fp, #-20]	; 0xffffffec
    7a20:	vstr	s1, [fp, #-24]	; 0xffffffe8
    7a24:	vstr	s2, [fp, #-28]	; 0xffffffe4
    7a28:	vstr	d2, [fp, #-36]	; 0xffffffdc
    7a2c:	mov	r0, r1
    7a30:	mov	r1, r3
    7a34:	mov	r3, r0
    7a38:	strb	r3, [fp, #-37]	; 0xffffffdb
    7a3c:	strh	r2, [fp, #-40]	; 0xffffffd8
    7a40:	mov	r3, r1
    7a44:	strb	r3, [fp, #-38]	; 0xffffffda
    7a48:	ldr	r0, [fp, #-16]
    7a4c:	bl	79b4 <MyGame_Example_Vec3_start>
    7a50:	str	r0, [fp, #-8]
    7a54:	ldr	r3, [fp, #-8]
    7a58:	cmp	r3, #0
    7a5c:	bne	7a68 <MyGame_Example_Vec3_create+0x5c>
    7a60:	mov	r3, #0
    7a64:	b	7a98 <MyGame_Example_Vec3_create+0x8c>
    7a68:	ldrsb	r3, [fp, #-38]	; 0xffffffda
    7a6c:	ldrsh	r2, [fp, #-40]	; 0xffffffd8
    7a70:	ldrsb	r1, [fp, #-37]	; 0xffffffdb
    7a74:	vldr	d2, [fp, #-36]	; 0xffffffdc
    7a78:	vldr	s2, [fp, #-28]	; 0xffffffe4
    7a7c:	vldr	s1, [fp, #-24]	; 0xffffffe8
    7a80:	vldr	s0, [fp, #-20]	; 0xffffffec
    7a84:	ldr	r0, [fp, #-8]
    7a88:	bl	77e4 <MyGame_Example_Vec3_assign_to_pe>
    7a8c:	ldr	r0, [fp, #-16]
    7a90:	bl	79e4 <MyGame_Example_Vec3_end_pe>
    7a94:	mov	r3, r0
    7a98:	mov	r0, r3
    7a9c:	sub	sp, fp, #4
    7aa0:	pop	{fp, pc}

00007aa4 <MyGame_Example_Vec3_create_as_root>:
    7aa4:	push	{fp, lr}
    7aa8:	add	fp, sp, #4
    7aac:	sub	sp, sp, #40	; 0x28
    7ab0:	str	r0, [fp, #-8]
    7ab4:	vstr	s0, [fp, #-12]
    7ab8:	vstr	s1, [fp, #-16]
    7abc:	vstr	s2, [fp, #-20]	; 0xffffffec
    7ac0:	vstr	d2, [fp, #-28]	; 0xffffffe4
    7ac4:	mov	r0, r1
    7ac8:	mov	r1, r3
    7acc:	mov	r3, r0
    7ad0:	strb	r3, [fp, #-29]	; 0xffffffe3
    7ad4:	strh	r2, [fp, #-32]	; 0xffffffe0
    7ad8:	mov	r3, r1
    7adc:	strb	r3, [fp, #-30]	; 0xffffffe2
    7ae0:	ldrsb	r3, [fp, #-30]	; 0xffffffe2
    7ae4:	ldrsh	r2, [fp, #-32]	; 0xffffffe0
    7ae8:	ldrsb	r1, [fp, #-29]	; 0xffffffe3
    7aec:	vldr	d2, [fp, #-28]	; 0xffffffe4
    7af0:	vldr	s2, [fp, #-20]	; 0xffffffec
    7af4:	vldr	s1, [fp, #-16]
    7af8:	vldr	s0, [fp, #-12]
    7afc:	ldr	r0, [fp, #-8]
    7b00:	bl	7a0c <MyGame_Example_Vec3_create>
    7b04:	mov	r2, r0
    7b08:	mov	r3, #0
    7b0c:	str	r3, [sp, #4]
    7b10:	mov	r3, #16
    7b14:	str	r3, [sp]
    7b18:	mov	r3, r2
    7b1c:	mov	r2, #0
    7b20:	ldr	r1, [pc, #20]	; 7b3c <MyGame_Example_Vec3_create_as_root+0x98>
    7b24:	ldr	r0, [fp, #-8]
    7b28:	bl	0 <flatcc_builder_create_buffer>
    7b2c:	mov	r3, r0
    7b30:	mov	r0, r3
    7b34:	sub	sp, fp, #4
    7b38:	pop	{fp, pc}
    7b3c:	.word	0x00000134

00007b40 <MyGame_Example_Vec3_create_as_typed_root>:
    7b40:	push	{fp, lr}
    7b44:	add	fp, sp, #4
    7b48:	sub	sp, sp, #40	; 0x28
    7b4c:	str	r0, [fp, #-8]
    7b50:	vstr	s0, [fp, #-12]
    7b54:	vstr	s1, [fp, #-16]
    7b58:	vstr	s2, [fp, #-20]	; 0xffffffec
    7b5c:	vstr	d2, [fp, #-28]	; 0xffffffe4
    7b60:	mov	r0, r1
    7b64:	mov	r1, r3
    7b68:	mov	r3, r0
    7b6c:	strb	r3, [fp, #-29]	; 0xffffffe3
    7b70:	strh	r2, [fp, #-32]	; 0xffffffe0
    7b74:	mov	r3, r1
    7b78:	strb	r3, [fp, #-30]	; 0xffffffe2
    7b7c:	ldrsb	r3, [fp, #-30]	; 0xffffffe2
    7b80:	ldrsh	r2, [fp, #-32]	; 0xffffffe0
    7b84:	ldrsb	r1, [fp, #-29]	; 0xffffffe3
    7b88:	vldr	d2, [fp, #-28]	; 0xffffffe4
    7b8c:	vldr	s2, [fp, #-20]	; 0xffffffec
    7b90:	vldr	s1, [fp, #-16]
    7b94:	vldr	s0, [fp, #-12]
    7b98:	ldr	r0, [fp, #-8]
    7b9c:	bl	7a0c <MyGame_Example_Vec3_create>
    7ba0:	mov	r2, r0
    7ba4:	mov	r3, #0
    7ba8:	str	r3, [sp, #4]
    7bac:	mov	r3, #16
    7bb0:	str	r3, [sp]
    7bb4:	mov	r3, r2
    7bb8:	mov	r2, #0
    7bbc:	ldr	r1, [pc, #20]	; 7bd8 <MyGame_Example_Vec3_create_as_typed_root+0x98>
    7bc0:	ldr	r0, [fp, #-8]
    7bc4:	bl	0 <flatcc_builder_create_buffer>
    7bc8:	mov	r3, r0
    7bcc:	mov	r0, r3
    7bd0:	sub	sp, fp, #4
    7bd4:	pop	{fp, pc}
    7bd8:	.word	0x00000210

00007bdc <Fantasy_Rapunzel_assign_to_pe>:
    7bdc:	push	{fp, lr}
    7be0:	add	fp, sp, #4
    7be4:	sub	sp, sp, #8
    7be8:	str	r0, [fp, #-8]
    7bec:	mov	r3, r1
    7bf0:	strh	r3, [fp, #-10]
    7bf4:	ldr	r3, [fp, #-8]
    7bf8:	ldrh	r2, [fp, #-10]
    7bfc:	mov	r1, r2
    7c00:	mov	r0, r3
    7c04:	bl	6fd0 <flatbuffers_uint16_assign_to_pe>
    7c08:	ldr	r3, [fp, #-8]
    7c0c:	mov	r0, r3
    7c10:	sub	sp, fp, #4
    7c14:	pop	{fp, pc}

00007c18 <Fantasy_Rapunzel_start>:
    7c18:	push	{fp, lr}
    7c1c:	add	fp, sp, #4
    7c20:	sub	sp, sp, #8
    7c24:	str	r0, [fp, #-8]
    7c28:	mov	r2, #2
    7c2c:	mov	r1, #2
    7c30:	ldr	r0, [fp, #-8]
    7c34:	bl	0 <flatcc_builder_start_struct>
    7c38:	mov	r3, r0
    7c3c:	mov	r0, r3
    7c40:	sub	sp, fp, #4
    7c44:	pop	{fp, pc}

00007c48 <Fantasy_Rapunzel_end_pe>:
    7c48:	push	{fp, lr}
    7c4c:	add	fp, sp, #4
    7c50:	sub	sp, sp, #8
    7c54:	str	r0, [fp, #-8]
    7c58:	ldr	r0, [fp, #-8]
    7c5c:	bl	0 <flatcc_builder_end_struct>
    7c60:	mov	r3, r0
    7c64:	mov	r0, r3
    7c68:	sub	sp, fp, #4
    7c6c:	pop	{fp, pc}

00007c70 <Fantasy_Rapunzel_create>:
    7c70:	push	{fp, lr}
    7c74:	add	fp, sp, #4
    7c78:	sub	sp, sp, #16
    7c7c:	str	r0, [fp, #-16]
    7c80:	mov	r3, r1
    7c84:	strh	r3, [fp, #-18]	; 0xffffffee
    7c88:	ldr	r0, [fp, #-16]
    7c8c:	bl	7c18 <Fantasy_Rapunzel_start>
    7c90:	str	r0, [fp, #-8]
    7c94:	ldr	r3, [fp, #-8]
    7c98:	cmp	r3, #0
    7c9c:	bne	7ca8 <Fantasy_Rapunzel_create+0x38>
    7ca0:	mov	r3, #0
    7ca4:	b	7cc4 <Fantasy_Rapunzel_create+0x54>
    7ca8:	ldrh	r3, [fp, #-18]	; 0xffffffee
    7cac:	mov	r1, r3
    7cb0:	ldr	r0, [fp, #-8]
    7cb4:	bl	7bdc <Fantasy_Rapunzel_assign_to_pe>
    7cb8:	ldr	r0, [fp, #-16]
    7cbc:	bl	7c48 <Fantasy_Rapunzel_end_pe>
    7cc0:	mov	r3, r0
    7cc4:	mov	r0, r3
    7cc8:	sub	sp, fp, #4
    7ccc:	pop	{fp, pc}

00007cd0 <Fantasy_BookReader_assign_to_pe>:
    7cd0:	push	{fp, lr}
    7cd4:	add	fp, sp, #4
    7cd8:	sub	sp, sp, #8
    7cdc:	str	r0, [fp, #-8]
    7ce0:	str	r1, [fp, #-12]
    7ce4:	ldr	r3, [fp, #-8]
    7ce8:	ldr	r1, [fp, #-12]
    7cec:	mov	r0, r3
    7cf0:	bl	7110 <flatbuffers_int32_assign_to_pe>
    7cf4:	ldr	r3, [fp, #-8]
    7cf8:	mov	r0, r3
    7cfc:	sub	sp, fp, #4
    7d00:	pop	{fp, pc}

00007d04 <Fantasy_BookReader_start>:
    7d04:	push	{fp, lr}
    7d08:	add	fp, sp, #4
    7d0c:	sub	sp, sp, #8
    7d10:	str	r0, [fp, #-8]
    7d14:	mov	r2, #4
    7d18:	mov	r1, #4
    7d1c:	ldr	r0, [fp, #-8]
    7d20:	bl	0 <flatcc_builder_start_struct>
    7d24:	mov	r3, r0
    7d28:	mov	r0, r3
    7d2c:	sub	sp, fp, #4
    7d30:	pop	{fp, pc}

00007d34 <Fantasy_BookReader_end>:
    7d34:	push	{fp, lr}
    7d38:	add	fp, sp, #4
    7d3c:	sub	sp, sp, #8
    7d40:	str	r0, [fp, #-8]
    7d44:	ldr	r0, [fp, #-8]
    7d48:	bl	0 <flatcc_builder_end_struct>
    7d4c:	mov	r3, r0
    7d50:	mov	r0, r3
    7d54:	sub	sp, fp, #4
    7d58:	pop	{fp, pc}

00007d5c <Fantasy_BookReader_end_pe>:
    7d5c:	push	{fp, lr}
    7d60:	add	fp, sp, #4
    7d64:	sub	sp, sp, #8
    7d68:	str	r0, [fp, #-8]
    7d6c:	ldr	r0, [fp, #-8]
    7d70:	bl	0 <flatcc_builder_end_struct>
    7d74:	mov	r3, r0
    7d78:	mov	r0, r3
    7d7c:	sub	sp, fp, #4
    7d80:	pop	{fp, pc}

00007d84 <Fantasy_BookReader_create>:
    7d84:	push	{fp, lr}
    7d88:	add	fp, sp, #4
    7d8c:	sub	sp, sp, #16
    7d90:	str	r0, [fp, #-16]
    7d94:	str	r1, [fp, #-20]	; 0xffffffec
    7d98:	ldr	r0, [fp, #-16]
    7d9c:	bl	7d04 <Fantasy_BookReader_start>
    7da0:	str	r0, [fp, #-8]
    7da4:	ldr	r3, [fp, #-8]
    7da8:	cmp	r3, #0
    7dac:	bne	7db8 <Fantasy_BookReader_create+0x34>
    7db0:	mov	r3, #0
    7db4:	b	7dd0 <Fantasy_BookReader_create+0x4c>
    7db8:	ldr	r1, [fp, #-20]	; 0xffffffec
    7dbc:	ldr	r0, [fp, #-8]
    7dc0:	bl	7cd0 <Fantasy_BookReader_assign_to_pe>
    7dc4:	ldr	r0, [fp, #-16]
    7dc8:	bl	7d5c <Fantasy_BookReader_end_pe>
    7dcc:	mov	r3, r0
    7dd0:	mov	r0, r3
    7dd4:	sub	sp, fp, #4
    7dd8:	pop	{fp, pc}

00007ddc <MyGame_Example_with_emptystruct_start>:
    7ddc:	push	{fp, lr}
    7de0:	add	fp, sp, #4
    7de4:	sub	sp, sp, #8
    7de8:	str	r0, [fp, #-8]
    7dec:	mov	r1, #1
    7df0:	ldr	r0, [fp, #-8]
    7df4:	bl	0 <flatcc_builder_start_table>
    7df8:	mov	r3, r0
    7dfc:	mov	r0, r3
    7e00:	sub	sp, fp, #4
    7e04:	pop	{fp, pc}

00007e08 <MyGame_Example_with_emptystruct_end>:
    7e08:	push	{fp, lr}
    7e0c:	add	fp, sp, #4
    7e10:	sub	sp, sp, #8
    7e14:	str	r0, [fp, #-8]
    7e18:	mov	r2, #0
    7e1c:	ldr	r1, [pc, #60]	; 7e60 <MyGame_Example_with_emptystruct_end+0x58>
    7e20:	ldr	r0, [fp, #-8]
    7e24:	bl	0 <flatcc_builder_check_required>
    7e28:	mov	r3, r0
    7e2c:	cmp	r3, #0
    7e30:	bne	7e48 <MyGame_Example_with_emptystruct_end+0x40>
    7e34:	ldr	r3, [pc, #40]	; 7e64 <MyGame_Example_with_emptystruct_end+0x5c>
    7e38:	mov	r2, #215	; 0xd7
    7e3c:	ldr	r1, [pc, #36]	; 7e68 <MyGame_Example_with_emptystruct_end+0x60>
    7e40:	ldr	r0, [pc, #36]	; 7e6c <MyGame_Example_with_emptystruct_end+0x64>
    7e44:	bl	0 <__assert_fail>
    7e48:	ldr	r0, [fp, #-8]
    7e4c:	bl	0 <flatcc_builder_end_table>
    7e50:	mov	r3, r0
    7e54:	mov	r0, r3
    7e58:	sub	sp, fp, #4
    7e5c:	pop	{fp, pc}
    7e60:	.word	0x00000224
    7e64:	.word	0x0000353c
    7e68:	.word	0x00000228
    7e6c:	.word	0x00000294

00007e70 <MyGame_Example_TestSimpleTableWithEnum_start>:
    7e70:	push	{fp, lr}
    7e74:	add	fp, sp, #4
    7e78:	sub	sp, sp, #8
    7e7c:	str	r0, [fp, #-8]
    7e80:	mov	r1, #4
    7e84:	ldr	r0, [fp, #-8]
    7e88:	bl	0 <flatcc_builder_start_table>
    7e8c:	mov	r3, r0
    7e90:	mov	r0, r3
    7e94:	sub	sp, fp, #4
    7e98:	pop	{fp, pc}

00007e9c <MyGame_Example_TestSimpleTableWithEnum_end>:
    7e9c:	push	{fp, lr}
    7ea0:	add	fp, sp, #4
    7ea4:	sub	sp, sp, #8
    7ea8:	str	r0, [fp, #-8]
    7eac:	mov	r2, #0
    7eb0:	ldr	r1, [pc, #60]	; 7ef4 <MyGame_Example_TestSimpleTableWithEnum_end+0x58>
    7eb4:	ldr	r0, [fp, #-8]
    7eb8:	bl	0 <flatcc_builder_check_required>
    7ebc:	mov	r3, r0
    7ec0:	cmp	r3, #0
    7ec4:	bne	7edc <MyGame_Example_TestSimpleTableWithEnum_end+0x40>
    7ec8:	ldr	r3, [pc, #40]	; 7ef8 <MyGame_Example_TestSimpleTableWithEnum_end+0x5c>
    7ecc:	mov	r2, #217	; 0xd9
    7ed0:	ldr	r1, [pc, #36]	; 7efc <MyGame_Example_TestSimpleTableWithEnum_end+0x60>
    7ed4:	ldr	r0, [pc, #36]	; 7f00 <MyGame_Example_TestSimpleTableWithEnum_end+0x64>
    7ed8:	bl	0 <__assert_fail>
    7edc:	ldr	r0, [fp, #-8]
    7ee0:	bl	0 <flatcc_builder_end_table>
    7ee4:	mov	r3, r0
    7ee8:	mov	r0, r3
    7eec:	sub	sp, fp, #4
    7ef0:	pop	{fp, pc}
    7ef4:	.word	0x00000354
    7ef8:	.word	0x00003964
    7efc:	.word	0x00000228
    7f00:	.word	0x00000358

00007f04 <MyGame_Example_Stat_start>:
    7f04:	push	{fp, lr}
    7f08:	add	fp, sp, #4
    7f0c:	sub	sp, sp, #8
    7f10:	str	r0, [fp, #-8]
    7f14:	mov	r1, #3
    7f18:	ldr	r0, [fp, #-8]
    7f1c:	bl	0 <flatcc_builder_start_table>
    7f20:	mov	r3, r0
    7f24:	mov	r0, r3
    7f28:	sub	sp, fp, #4
    7f2c:	pop	{fp, pc}

00007f30 <MyGame_Example_Stat_end>:
    7f30:	push	{fp, lr}
    7f34:	add	fp, sp, #4
    7f38:	sub	sp, sp, #8
    7f3c:	str	r0, [fp, #-8]
    7f40:	mov	r2, #0
    7f44:	ldr	r1, [pc, #60]	; 7f88 <MyGame_Example_Stat_end+0x58>
    7f48:	ldr	r0, [fp, #-8]
    7f4c:	bl	0 <flatcc_builder_check_required>
    7f50:	mov	r3, r0
    7f54:	cmp	r3, #0
    7f58:	bne	7f70 <MyGame_Example_Stat_end+0x40>
    7f5c:	ldr	r3, [pc, #40]	; 7f8c <MyGame_Example_Stat_end+0x5c>
    7f60:	mov	r2, #221	; 0xdd
    7f64:	ldr	r1, [pc, #36]	; 7f90 <MyGame_Example_Stat_end+0x60>
    7f68:	ldr	r0, [pc, #36]	; 7f94 <MyGame_Example_Stat_end+0x64>
    7f6c:	bl	0 <__assert_fail>
    7f70:	ldr	r0, [fp, #-8]
    7f74:	bl	0 <flatcc_builder_end_table>
    7f78:	mov	r3, r0
    7f7c:	mov	r0, r3
    7f80:	sub	sp, fp, #4
    7f84:	pop	{fp, pc}
    7f88:	.word	0x00000430
    7f8c:	.word	0x000038c0
    7f90:	.word	0x00000228
    7f94:	.word	0x00000434

00007f98 <MyGame_Example_Alt_start>:
    7f98:	push	{fp, lr}
    7f9c:	add	fp, sp, #4
    7fa0:	sub	sp, sp, #8
    7fa4:	str	r0, [fp, #-8]
    7fa8:	mov	r1, #4
    7fac:	ldr	r0, [fp, #-8]
    7fb0:	bl	0 <flatcc_builder_start_table>
    7fb4:	mov	r3, r0
    7fb8:	mov	r0, r3
    7fbc:	sub	sp, fp, #4
    7fc0:	pop	{fp, pc}

00007fc4 <MyGame_Example_Alt_end>:
    7fc4:	push	{fp, lr}
    7fc8:	add	fp, sp, #4
    7fcc:	sub	sp, sp, #8
    7fd0:	str	r0, [fp, #-8]
    7fd4:	mov	r2, #0
    7fd8:	ldr	r1, [pc, #60]	; 801c <MyGame_Example_Alt_end+0x58>
    7fdc:	ldr	r0, [fp, #-8]
    7fe0:	bl	0 <flatcc_builder_check_required>
    7fe4:	mov	r3, r0
    7fe8:	cmp	r3, #0
    7fec:	bne	8004 <MyGame_Example_Alt_end+0x40>
    7ff0:	ldr	r3, [pc, #40]	; 8020 <MyGame_Example_Alt_end+0x5c>
    7ff4:	mov	r2, #223	; 0xdf
    7ff8:	ldr	r1, [pc, #36]	; 8024 <MyGame_Example_Alt_end+0x60>
    7ffc:	ldr	r0, [pc, #36]	; 8028 <MyGame_Example_Alt_end+0x64>
    8000:	bl	0 <__assert_fail>
    8004:	ldr	r0, [fp, #-8]
    8008:	bl	0 <flatcc_builder_end_table>
    800c:	mov	r3, r0
    8010:	mov	r0, r3
    8014:	sub	sp, fp, #4
    8018:	pop	{fp, pc}
    801c:	.word	0x000004d0
    8020:	.word	0x00003990
    8024:	.word	0x00000228
    8028:	.word	0x000004d4

0000802c <MyGame_Example_Monster_start>:
    802c:	push	{fp, lr}
    8030:	add	fp, sp, #4
    8034:	sub	sp, sp, #8
    8038:	str	r0, [fp, #-8]
    803c:	mov	r1, #36	; 0x24
    8040:	ldr	r0, [fp, #-8]
    8044:	bl	0 <flatcc_builder_start_table>
    8048:	mov	r3, r0
    804c:	mov	r0, r3
    8050:	sub	sp, fp, #4
    8054:	pop	{fp, pc}

00008058 <MyGame_Example_Monster_end>:
    8058:	push	{fp, lr}
    805c:	add	fp, sp, #4
    8060:	sub	sp, sp, #8
    8064:	str	r0, [fp, #-8]
    8068:	mov	r2, #1
    806c:	ldr	r1, [pc, #60]	; 80b0 <MyGame_Example_Monster_end+0x58>
    8070:	ldr	r0, [fp, #-8]
    8074:	bl	0 <flatcc_builder_check_required>
    8078:	mov	r3, r0
    807c:	cmp	r3, #0
    8080:	bne	8098 <MyGame_Example_Monster_end+0x40>
    8084:	ldr	r3, [pc, #40]	; 80b4 <MyGame_Example_Monster_end+0x5c>
    8088:	mov	r2, #235	; 0xeb
    808c:	ldr	r1, [pc, #36]	; 80b8 <MyGame_Example_Monster_end+0x60>
    8090:	ldr	r0, [pc, #36]	; 80bc <MyGame_Example_Monster_end+0x64>
    8094:	bl	0 <__assert_fail>
    8098:	ldr	r0, [fp, #-8]
    809c:	bl	0 <flatcc_builder_end_table>
    80a0:	mov	r3, r0
    80a4:	mov	r0, r3
    80a8:	sub	sp, fp, #4
    80ac:	pop	{fp, pc}
    80b0:	.word	0x00000580
    80b4:	.word	0x000034f8
    80b8:	.word	0x00000228
    80bc:	.word	0x00000584

000080c0 <MyGame_Example_Monster_vec_push>:
    80c0:	push	{fp, lr}
    80c4:	add	fp, sp, #4
    80c8:	sub	sp, sp, #8
    80cc:	str	r0, [fp, #-8]
    80d0:	str	r1, [fp, #-12]
    80d4:	ldr	r3, [fp, #-12]
    80d8:	cmp	r3, #0
    80dc:	beq	80f4 <MyGame_Example_Monster_vec_push+0x34>
    80e0:	ldr	r1, [fp, #-12]
    80e4:	ldr	r0, [fp, #-8]
    80e8:	bl	0 <flatcc_builder_offset_vector_push>
    80ec:	mov	r3, r0
    80f0:	b	80f8 <MyGame_Example_Monster_vec_push+0x38>
    80f4:	mov	r3, #0
    80f8:	mov	r0, r3
    80fc:	sub	sp, fp, #4
    8100:	pop	{fp, pc}

00008104 <MyGame_Example_TypeAliases_start>:
    8104:	push	{fp, lr}
    8108:	add	fp, sp, #4
    810c:	sub	sp, sp, #8
    8110:	str	r0, [fp, #-8]
    8114:	mov	r1, #12
    8118:	ldr	r0, [fp, #-8]
    811c:	bl	0 <flatcc_builder_start_table>
    8120:	mov	r3, r0
    8124:	mov	r0, r3
    8128:	sub	sp, fp, #4
    812c:	pop	{fp, pc}

00008130 <MyGame_Example_TypeAliases_end>:
    8130:	push	{fp, lr}
    8134:	add	fp, sp, #4
    8138:	sub	sp, sp, #8
    813c:	str	r0, [fp, #-8]
    8140:	mov	r2, #0
    8144:	ldr	r1, [pc, #60]	; 8188 <MyGame_Example_TypeAliases_end+0x58>
    8148:	ldr	r0, [fp, #-8]
    814c:	bl	0 <flatcc_builder_check_required>
    8150:	mov	r3, r0
    8154:	cmp	r3, #0
    8158:	bne	8170 <MyGame_Example_TypeAliases_end+0x40>
    815c:	ldr	r3, [pc, #40]	; 818c <MyGame_Example_TypeAliases_end+0x5c>
    8160:	mov	r2, #237	; 0xed
    8164:	ldr	r1, [pc, #36]	; 8190 <MyGame_Example_TypeAliases_end+0x60>
    8168:	ldr	r0, [pc, #36]	; 8194 <MyGame_Example_TypeAliases_end+0x64>
    816c:	bl	0 <__assert_fail>
    8170:	ldr	r0, [fp, #-8]
    8174:	bl	0 <flatcc_builder_end_table>
    8178:	mov	r3, r0
    817c:	mov	r0, r3
    8180:	sub	sp, fp, #4
    8184:	pop	{fp, pc}
    8188:	.word	0x00000628
    818c:	.word	0x00003398
    8190:	.word	0x00000228
    8194:	.word	0x0000062c

00008198 <Fantasy_Attacker_start>:
    8198:	push	{fp, lr}
    819c:	add	fp, sp, #4
    81a0:	sub	sp, sp, #8
    81a4:	str	r0, [fp, #-8]
    81a8:	mov	r1, #1
    81ac:	ldr	r0, [fp, #-8]
    81b0:	bl	0 <flatcc_builder_start_table>
    81b4:	mov	r3, r0
    81b8:	mov	r0, r3
    81bc:	sub	sp, fp, #4
    81c0:	pop	{fp, pc}

000081c4 <Fantasy_Attacker_end>:
    81c4:	push	{fp, lr}
    81c8:	add	fp, sp, #4
    81cc:	sub	sp, sp, #8
    81d0:	str	r0, [fp, #-8]
    81d4:	mov	r2, #0
    81d8:	ldr	r1, [pc, #60]	; 821c <Fantasy_Attacker_end+0x58>
    81dc:	ldr	r0, [fp, #-8]
    81e0:	bl	0 <flatcc_builder_check_required>
    81e4:	mov	r3, r0
    81e8:	cmp	r3, #0
    81ec:	bne	8204 <Fantasy_Attacker_end+0x40>
    81f0:	ldr	r3, [pc, #40]	; 8220 <Fantasy_Attacker_end+0x5c>
    81f4:	mov	r2, #239	; 0xef
    81f8:	ldr	r1, [pc, #36]	; 8224 <Fantasy_Attacker_end+0x60>
    81fc:	ldr	r0, [pc, #36]	; 8228 <Fantasy_Attacker_end+0x64>
    8200:	bl	0 <__assert_fail>
    8204:	ldr	r0, [fp, #-8]
    8208:	bl	0 <flatcc_builder_end_table>
    820c:	mov	r3, r0
    8210:	mov	r0, r3
    8214:	sub	sp, fp, #4
    8218:	pop	{fp, pc}
    821c:	.word	0x000006dc
    8220:	.word	0x00003abc
    8224:	.word	0x00000228
    8228:	.word	0x000006e0

0000822c <Fantasy_Movie_start>:
    822c:	push	{fp, lr}
    8230:	add	fp, sp, #4
    8234:	sub	sp, sp, #8
    8238:	str	r0, [fp, #-8]
    823c:	mov	r1, #10
    8240:	ldr	r0, [fp, #-8]
    8244:	bl	0 <flatcc_builder_start_table>
    8248:	mov	r3, r0
    824c:	mov	r0, r3
    8250:	sub	sp, fp, #4
    8254:	pop	{fp, pc}

00008258 <Fantasy_Movie_end>:
    8258:	push	{fp, lr}
    825c:	add	fp, sp, #4
    8260:	sub	sp, sp, #8
    8264:	str	r0, [fp, #-8]
    8268:	mov	r2, #0
    826c:	ldr	r1, [pc, #60]	; 82b0 <Fantasy_Movie_end+0x58>
    8270:	ldr	r0, [fp, #-8]
    8274:	bl	0 <flatcc_builder_check_required>
    8278:	mov	r3, r0
    827c:	cmp	r3, #0
    8280:	bne	8298 <Fantasy_Movie_end+0x40>
    8284:	ldr	r3, [pc, #40]	; 82b4 <Fantasy_Movie_end+0x5c>
    8288:	mov	r2, #241	; 0xf1
    828c:	ldr	r1, [pc, #36]	; 82b8 <Fantasy_Movie_end+0x60>
    8290:	ldr	r0, [pc, #36]	; 82bc <Fantasy_Movie_end+0x64>
    8294:	bl	0 <__assert_fail>
    8298:	ldr	r0, [fp, #-8]
    829c:	bl	0 <flatcc_builder_end_table>
    82a0:	mov	r3, r0
    82a4:	mov	r0, r3
    82a8:	sub	sp, fp, #4
    82ac:	pop	{fp, pc}
    82b0:	.word	0x00000770
    82b4:	.word	0x00003ad4
    82b8:	.word	0x00000228
    82bc:	.word	0x00000774

000082c0 <MyGame_Example_Any_as_Monster>:
    82c0:	push	{fp}		; (str fp, [sp, #-4]!)
    82c4:	add	fp, sp, #0
    82c8:	sub	sp, sp, #20
    82cc:	str	r0, [fp, #-16]
    82d0:	str	r1, [fp, #-20]	; 0xffffffec
    82d4:	mov	r3, #1
    82d8:	strb	r3, [fp, #-12]
    82dc:	ldr	r3, [fp, #-20]	; 0xffffffec
    82e0:	str	r3, [fp, #-8]
    82e4:	ldr	r3, [fp, #-16]
    82e8:	mov	r2, r3
    82ec:	sub	r3, fp, #12
    82f0:	ldm	r3, {r0, r1}
    82f4:	stm	r2, {r0, r1}
    82f8:	ldr	r0, [fp, #-16]
    82fc:	add	sp, fp, #0
    8300:	pop	{fp}		; (ldr fp, [sp], #4)
    8304:	bx	lr

00008308 <MyGame_Example_Any_as_TestSimpleTableWithEnum>:
    8308:	push	{fp}		; (str fp, [sp, #-4]!)
    830c:	add	fp, sp, #0
    8310:	sub	sp, sp, #20
    8314:	str	r0, [fp, #-16]
    8318:	str	r1, [fp, #-20]	; 0xffffffec
    831c:	mov	r3, #2
    8320:	strb	r3, [fp, #-12]
    8324:	ldr	r3, [fp, #-20]	; 0xffffffec
    8328:	str	r3, [fp, #-8]
    832c:	ldr	r3, [fp, #-16]
    8330:	mov	r2, r3
    8334:	sub	r3, fp, #12
    8338:	ldm	r3, {r0, r1}
    833c:	stm	r2, {r0, r1}
    8340:	ldr	r0, [fp, #-16]
    8344:	add	sp, fp, #0
    8348:	pop	{fp}		; (ldr fp, [sp], #4)
    834c:	bx	lr

00008350 <MyGame_Example_Any_as_Alt>:
    8350:	push	{fp}		; (str fp, [sp, #-4]!)
    8354:	add	fp, sp, #0
    8358:	sub	sp, sp, #20
    835c:	str	r0, [fp, #-16]
    8360:	str	r1, [fp, #-20]	; 0xffffffec
    8364:	mov	r3, #4
    8368:	strb	r3, [fp, #-12]
    836c:	ldr	r3, [fp, #-20]	; 0xffffffec
    8370:	str	r3, [fp, #-8]
    8374:	ldr	r3, [fp, #-16]
    8378:	mov	r2, r3
    837c:	sub	r3, fp, #12
    8380:	ldm	r3, {r0, r1}
    8384:	stm	r2, {r0, r1}
    8388:	ldr	r0, [fp, #-16]
    838c:	add	sp, fp, #0
    8390:	pop	{fp}		; (ldr fp, [sp], #4)
    8394:	bx	lr

00008398 <MyGame_Example_Any_vec_start>:
    8398:	push	{fp, lr}
    839c:	add	fp, sp, #4
    83a0:	sub	sp, sp, #8
    83a4:	str	r0, [fp, #-8]
    83a8:	ldr	r0, [fp, #-8]
    83ac:	bl	0 <flatcc_builder_start_union_vector>
    83b0:	mov	r3, r0
    83b4:	mov	r0, r3
    83b8:	sub	sp, fp, #4
    83bc:	pop	{fp, pc}

000083c0 <MyGame_Example_Any_vec_end>:
    83c0:	push	{fp, lr}
    83c4:	add	fp, sp, #4
    83c8:	sub	sp, sp, #8
    83cc:	str	r0, [fp, #-8]
    83d0:	str	r1, [fp, #-12]
    83d4:	ldr	r3, [fp, #-8]
    83d8:	ldr	r1, [fp, #-12]
    83dc:	mov	r0, r3
    83e0:	bl	0 <flatcc_builder_end_union_vector>
    83e4:	ldr	r0, [fp, #-8]
    83e8:	sub	sp, fp, #4
    83ec:	pop	{fp, pc}

000083f0 <MyGame_Example_Any_vec_push>:
    83f0:	push	{fp, lr}
    83f4:	add	fp, sp, #4
    83f8:	sub	sp, sp, #16
    83fc:	str	r0, [fp, #-8]
    8400:	sub	r3, fp, #16
    8404:	stm	r3, {r1, r2}
    8408:	sub	r3, fp, #16
    840c:	ldm	r3, {r1, r2}
    8410:	ldr	r0, [fp, #-8]
    8414:	bl	0 <flatcc_builder_union_vector_push>
    8418:	mov	r3, r0
    841c:	mov	r0, r3
    8420:	sub	sp, fp, #4
    8424:	pop	{fp, pc}

00008428 <Fantasy_Character_as_MuLan>:
    8428:	push	{fp}		; (str fp, [sp, #-4]!)
    842c:	add	fp, sp, #0
    8430:	sub	sp, sp, #20
    8434:	str	r0, [fp, #-16]
    8438:	str	r1, [fp, #-20]	; 0xffffffec
    843c:	mov	r3, #2
    8440:	strb	r3, [fp, #-12]
    8444:	ldr	r3, [fp, #-20]	; 0xffffffec
    8448:	str	r3, [fp, #-8]
    844c:	ldr	r3, [fp, #-16]
    8450:	mov	r2, r3
    8454:	sub	r3, fp, #12
    8458:	ldm	r3, {r0, r1}
    845c:	stm	r2, {r0, r1}
    8460:	ldr	r0, [fp, #-16]
    8464:	add	sp, fp, #0
    8468:	pop	{fp}		; (ldr fp, [sp], #4)
    846c:	bx	lr

00008470 <Fantasy_Character_as_Rapunzel>:
    8470:	push	{fp}		; (str fp, [sp, #-4]!)
    8474:	add	fp, sp, #0
    8478:	sub	sp, sp, #20
    847c:	str	r0, [fp, #-16]
    8480:	str	r1, [fp, #-20]	; 0xffffffec
    8484:	mov	r3, #8
    8488:	strb	r3, [fp, #-12]
    848c:	ldr	r3, [fp, #-20]	; 0xffffffec
    8490:	str	r3, [fp, #-8]
    8494:	ldr	r3, [fp, #-16]
    8498:	mov	r2, r3
    849c:	sub	r3, fp, #12
    84a0:	ldm	r3, {r0, r1}
    84a4:	stm	r2, {r0, r1}
    84a8:	ldr	r0, [fp, #-16]
    84ac:	add	sp, fp, #0
    84b0:	pop	{fp}		; (ldr fp, [sp], #4)
    84b4:	bx	lr

000084b8 <Fantasy_Character_as_Belle>:
    84b8:	push	{fp}		; (str fp, [sp, #-4]!)
    84bc:	add	fp, sp, #0
    84c0:	sub	sp, sp, #20
    84c4:	str	r0, [fp, #-16]
    84c8:	str	r1, [fp, #-20]	; 0xffffffec
    84cc:	mov	r3, #9
    84d0:	strb	r3, [fp, #-12]
    84d4:	ldr	r3, [fp, #-20]	; 0xffffffec
    84d8:	str	r3, [fp, #-8]
    84dc:	ldr	r3, [fp, #-16]
    84e0:	mov	r2, r3
    84e4:	sub	r3, fp, #12
    84e8:	ldm	r3, {r0, r1}
    84ec:	stm	r2, {r0, r1}
    84f0:	ldr	r0, [fp, #-16]
    84f4:	add	sp, fp, #0
    84f8:	pop	{fp}		; (ldr fp, [sp], #4)
    84fc:	bx	lr

00008500 <Fantasy_Character_as_Other>:
    8500:	push	{fp}		; (str fp, [sp, #-4]!)
    8504:	add	fp, sp, #0
    8508:	sub	sp, sp, #20
    850c:	str	r0, [fp, #-16]
    8510:	str	r1, [fp, #-20]	; 0xffffffec
    8514:	mov	r3, #11
    8518:	strb	r3, [fp, #-12]
    851c:	ldr	r3, [fp, #-20]	; 0xffffffec
    8520:	str	r3, [fp, #-8]
    8524:	ldr	r3, [fp, #-16]
    8528:	mov	r2, r3
    852c:	sub	r3, fp, #12
    8530:	ldm	r3, {r0, r1}
    8534:	stm	r2, {r0, r1}
    8538:	ldr	r0, [fp, #-16]
    853c:	add	sp, fp, #0
    8540:	pop	{fp}		; (ldr fp, [sp], #4)
    8544:	bx	lr

00008548 <Fantasy_Character_vec_push>:
    8548:	push	{fp, lr}
    854c:	add	fp, sp, #4
    8550:	sub	sp, sp, #16
    8554:	str	r0, [fp, #-8]
    8558:	sub	r3, fp, #16
    855c:	stm	r3, {r1, r2}
    8560:	sub	r3, fp, #16
    8564:	ldm	r3, {r1, r2}
    8568:	ldr	r0, [fp, #-8]
    856c:	bl	0 <flatcc_builder_union_vector_push>
    8570:	mov	r3, r0
    8574:	mov	r0, r3
    8578:	sub	sp, fp, #4
    857c:	pop	{fp, pc}

00008580 <MyGame_Example_with_emptystruct_empty_start>:
    8580:	push	{fp, lr}
    8584:	add	fp, sp, #4
    8588:	sub	sp, sp, #8
    858c:	str	r0, [fp, #-8]
    8590:	mov	r3, #1
    8594:	mov	r2, #0
    8598:	mov	r1, #0
    859c:	ldr	r0, [fp, #-8]
    85a0:	bl	0 <flatcc_builder_table_add>
    85a4:	mov	r3, r0
    85a8:	mov	r0, r3
    85ac:	sub	sp, fp, #4
    85b0:	pop	{fp, pc}

000085b4 <MyGame_Example_with_emptystruct_empty_add>:
    85b4:	push	{fp, lr}
    85b8:	add	fp, sp, #4
    85bc:	sub	sp, sp, #16
    85c0:	str	r0, [fp, #-16]
    85c4:	str	r1, [fp, #-20]	; 0xffffffec
    85c8:	ldr	r0, [fp, #-16]
    85cc:	bl	8580 <MyGame_Example_with_emptystruct_empty_start>
    85d0:	str	r0, [fp, #-8]
    85d4:	ldr	r3, [fp, #-8]
    85d8:	cmp	r3, #0
    85dc:	bne	85e8 <MyGame_Example_with_emptystruct_empty_add+0x34>
    85e0:	mvn	r3, #0
    85e4:	b	85f8 <MyGame_Example_with_emptystruct_empty_add+0x44>
    85e8:	ldr	r1, [fp, #-20]	; 0xffffffec
    85ec:	ldr	r0, [fp, #-8]
    85f0:	bl	77bc <MyGame_Example_emptystruct_copy_to_pe>
    85f4:	mov	r3, #0
    85f8:	mov	r0, r3
    85fc:	sub	sp, fp, #4
    8600:	pop	{fp, pc}

00008604 <MyGame_Example_with_emptystruct_create>:
    8604:	push	{fp, lr}
    8608:	add	fp, sp, #4
    860c:	sub	sp, sp, #8
    8610:	str	r0, [fp, #-8]
    8614:	str	r1, [fp, #-12]
    8618:	ldr	r0, [fp, #-8]
    861c:	bl	7ddc <MyGame_Example_with_emptystruct_start>
    8620:	mov	r3, r0
    8624:	cmp	r3, #0
    8628:	bne	8644 <MyGame_Example_with_emptystruct_create+0x40>
    862c:	ldr	r1, [fp, #-12]
    8630:	ldr	r0, [fp, #-8]
    8634:	bl	85b4 <MyGame_Example_with_emptystruct_empty_add>
    8638:	mov	r3, r0
    863c:	cmp	r3, #0
    8640:	beq	864c <MyGame_Example_with_emptystruct_create+0x48>
    8644:	mov	r3, #0
    8648:	b	8658 <MyGame_Example_with_emptystruct_create+0x54>
    864c:	ldr	r0, [fp, #-8]
    8650:	bl	7e08 <MyGame_Example_with_emptystruct_end>
    8654:	mov	r3, r0
    8658:	mov	r0, r3
    865c:	sub	sp, fp, #4
    8660:	pop	{fp, pc}

00008664 <MyGame_Example_with_emptystruct_create_as_root>:
    8664:	push	{fp, lr}
    8668:	add	fp, sp, #4
    866c:	sub	sp, sp, #8
    8670:	str	r0, [fp, #-8]
    8674:	str	r1, [fp, #-12]
    8678:	ldr	r1, [pc, #68]	; 86c4 <MyGame_Example_with_emptystruct_create_as_root+0x60>
    867c:	ldr	r0, [fp, #-8]
    8680:	bl	7440 <flatbuffers_buffer_start>
    8684:	mov	r3, r0
    8688:	cmp	r3, #0
    868c:	beq	8698 <MyGame_Example_with_emptystruct_create_as_root+0x34>
    8690:	mov	r3, #0
    8694:	b	86b8 <MyGame_Example_with_emptystruct_create_as_root+0x54>
    8698:	ldr	r1, [fp, #-12]
    869c:	ldr	r0, [fp, #-8]
    86a0:	bl	8604 <MyGame_Example_with_emptystruct_create>
    86a4:	mov	r3, r0
    86a8:	mov	r1, r3
    86ac:	ldr	r0, [fp, #-8]
    86b0:	bl	74b0 <flatbuffers_buffer_end>
    86b4:	mov	r3, r0
    86b8:	mov	r0, r3
    86bc:	sub	sp, fp, #4
    86c0:	pop	{fp, pc}
    86c4:	.word	0x00000134

000086c8 <MyGame_Example_with_emptystruct_create_as_typed_root>:
    86c8:	push	{fp, lr}
    86cc:	add	fp, sp, #4
    86d0:	sub	sp, sp, #8
    86d4:	str	r0, [fp, #-8]
    86d8:	str	r1, [fp, #-12]
    86dc:	ldr	r1, [pc, #68]	; 8728 <MyGame_Example_with_emptystruct_create_as_typed_root+0x60>
    86e0:	ldr	r0, [fp, #-8]
    86e4:	bl	7440 <flatbuffers_buffer_start>
    86e8:	mov	r3, r0
    86ec:	cmp	r3, #0
    86f0:	beq	86fc <MyGame_Example_with_emptystruct_create_as_typed_root+0x34>
    86f4:	mov	r3, #0
    86f8:	b	871c <MyGame_Example_with_emptystruct_create_as_typed_root+0x54>
    86fc:	ldr	r1, [fp, #-12]
    8700:	ldr	r0, [fp, #-8]
    8704:	bl	8604 <MyGame_Example_with_emptystruct_create>
    8708:	mov	r3, r0
    870c:	mov	r1, r3
    8710:	ldr	r0, [fp, #-8]
    8714:	bl	74b0 <flatbuffers_buffer_end>
    8718:	mov	r3, r0
    871c:	mov	r0, r3
    8720:	sub	sp, fp, #4
    8724:	pop	{fp, pc}
    8728:	.word	0x000007fc

0000872c <MyGame_Example_TestSimpleTableWithEnum_color_add>:
    872c:	push	{fp, lr}
    8730:	add	fp, sp, #4
    8734:	sub	sp, sp, #16
    8738:	str	r0, [fp, #-16]
    873c:	mov	r3, r1
    8740:	strb	r3, [fp, #-17]	; 0xffffffef
    8744:	ldrsb	r3, [fp, #-17]	; 0xffffffef
    8748:	cmp	r3, #2
    874c:	bne	8758 <MyGame_Example_TestSimpleTableWithEnum_color_add+0x2c>
    8750:	mov	r3, #0
    8754:	b	8798 <MyGame_Example_TestSimpleTableWithEnum_color_add+0x6c>
    8758:	mov	r3, #1
    875c:	mov	r2, #1
    8760:	mov	r1, #0
    8764:	ldr	r0, [fp, #-16]
    8768:	bl	0 <flatcc_builder_table_add>
    876c:	str	r0, [fp, #-8]
    8770:	ldr	r3, [fp, #-8]
    8774:	cmp	r3, #0
    8778:	bne	8784 <MyGame_Example_TestSimpleTableWithEnum_color_add+0x58>
    877c:	mvn	r3, #0
    8780:	b	8798 <MyGame_Example_TestSimpleTableWithEnum_color_add+0x6c>
    8784:	ldrsb	r3, [fp, #-17]	; 0xffffffef
    8788:	mov	r1, r3
    878c:	ldr	r0, [fp, #-8]
    8790:	bl	74e0 <MyGame_Example_Color_assign_to_pe>
    8794:	mov	r3, #0
    8798:	mov	r0, r3
    879c:	sub	sp, fp, #4
    87a0:	pop	{fp, pc}

000087a4 <MyGame_Example_TestSimpleTableWithEnum_color2_add>:
    87a4:	push	{fp, lr}
    87a8:	add	fp, sp, #4
    87ac:	sub	sp, sp, #16
    87b0:	str	r0, [fp, #-16]
    87b4:	mov	r3, r1
    87b8:	strb	r3, [fp, #-17]	; 0xffffffef
    87bc:	ldrsb	r3, [fp, #-17]	; 0xffffffef
    87c0:	cmp	r3, #2
    87c4:	bne	87d0 <MyGame_Example_TestSimpleTableWithEnum_color2_add+0x2c>
    87c8:	mov	r3, #0
    87cc:	b	8810 <MyGame_Example_TestSimpleTableWithEnum_color2_add+0x6c>
    87d0:	mov	r3, #1
    87d4:	mov	r2, #1
    87d8:	mov	r1, #1
    87dc:	ldr	r0, [fp, #-16]
    87e0:	bl	0 <flatcc_builder_table_add>
    87e4:	str	r0, [fp, #-8]
    87e8:	ldr	r3, [fp, #-8]
    87ec:	cmp	r3, #0
    87f0:	bne	87fc <MyGame_Example_TestSimpleTableWithEnum_color2_add+0x58>
    87f4:	mvn	r3, #0
    87f8:	b	8810 <MyGame_Example_TestSimpleTableWithEnum_color2_add+0x6c>
    87fc:	ldrsb	r3, [fp, #-17]	; 0xffffffef
    8800:	mov	r1, r3
    8804:	ldr	r0, [fp, #-8]
    8808:	bl	74e0 <MyGame_Example_Color_assign_to_pe>
    880c:	mov	r3, #0
    8810:	mov	r0, r3
    8814:	sub	sp, fp, #4
    8818:	pop	{fp, pc}

0000881c <MyGame_Example_TestSimpleTableWithEnum_uc_add>:
    881c:	push	{fp, lr}
    8820:	add	fp, sp, #4
    8824:	sub	sp, sp, #16
    8828:	str	r0, [fp, #-16]
    882c:	mov	r3, r1
    8830:	strb	r3, [fp, #-17]	; 0xffffffef
    8834:	ldrb	r3, [fp, #-17]	; 0xffffffef
    8838:	cmp	r3, #2
    883c:	bne	8848 <MyGame_Example_TestSimpleTableWithEnum_uc_add+0x2c>
    8840:	mov	r3, #0
    8844:	b	8888 <MyGame_Example_TestSimpleTableWithEnum_uc_add+0x6c>
    8848:	mov	r3, #1
    884c:	mov	r2, #1
    8850:	mov	r1, #2
    8854:	ldr	r0, [fp, #-16]
    8858:	bl	0 <flatcc_builder_table_add>
    885c:	str	r0, [fp, #-8]
    8860:	ldr	r3, [fp, #-8]
    8864:	cmp	r3, #0
    8868:	bne	8874 <MyGame_Example_TestSimpleTableWithEnum_uc_add+0x58>
    886c:	mvn	r3, #0
    8870:	b	8888 <MyGame_Example_TestSimpleTableWithEnum_uc_add+0x6c>
    8874:	ldrb	r3, [fp, #-17]	; 0xffffffef
    8878:	mov	r1, r3
    887c:	ldr	r0, [fp, #-8]
    8880:	bl	6d18 <flatbuffers_uint8_assign_to_pe>
    8884:	mov	r3, #0
    8888:	mov	r0, r3
    888c:	sub	sp, fp, #4
    8890:	pop	{fp, pc}

00008894 <MyGame_Example_TestSimpleTableWithEnum_uc2_add>:
    8894:	push	{fp, lr}
    8898:	add	fp, sp, #4
    889c:	sub	sp, sp, #16
    88a0:	str	r0, [fp, #-16]
    88a4:	mov	r3, r1
    88a8:	strb	r3, [fp, #-17]	; 0xffffffef
    88ac:	ldrb	r3, [fp, #-17]	; 0xffffffef
    88b0:	cmp	r3, #2
    88b4:	bne	88c0 <MyGame_Example_TestSimpleTableWithEnum_uc2_add+0x2c>
    88b8:	mov	r3, #0
    88bc:	b	8900 <MyGame_Example_TestSimpleTableWithEnum_uc2_add+0x6c>
    88c0:	mov	r3, #1
    88c4:	mov	r2, #1
    88c8:	mov	r1, #3
    88cc:	ldr	r0, [fp, #-16]
    88d0:	bl	0 <flatcc_builder_table_add>
    88d4:	str	r0, [fp, #-8]
    88d8:	ldr	r3, [fp, #-8]
    88dc:	cmp	r3, #0
    88e0:	bne	88ec <MyGame_Example_TestSimpleTableWithEnum_uc2_add+0x58>
    88e4:	mvn	r3, #0
    88e8:	b	8900 <MyGame_Example_TestSimpleTableWithEnum_uc2_add+0x6c>
    88ec:	ldrb	r3, [fp, #-17]	; 0xffffffef
    88f0:	mov	r1, r3
    88f4:	ldr	r0, [fp, #-8]
    88f8:	bl	6d18 <flatbuffers_uint8_assign_to_pe>
    88fc:	mov	r3, #0
    8900:	mov	r0, r3
    8904:	sub	sp, fp, #4
    8908:	pop	{fp, pc}

0000890c <MyGame_Example_TestSimpleTableWithEnum_create>:
    890c:	push	{fp, lr}
    8910:	add	fp, sp, #4
    8914:	sub	sp, sp, #8
    8918:	str	r0, [fp, #-8]
    891c:	mov	r0, r1
    8920:	mov	r1, r2
    8924:	mov	r2, r3
    8928:	mov	r3, r0
    892c:	strb	r3, [fp, #-9]
    8930:	mov	r3, r1
    8934:	strb	r3, [fp, #-10]
    8938:	mov	r3, r2
    893c:	strb	r3, [fp, #-11]
    8940:	ldr	r0, [fp, #-8]
    8944:	bl	7e70 <MyGame_Example_TestSimpleTableWithEnum_start>
    8948:	mov	r3, r0
    894c:	cmp	r3, #0
    8950:	bne	89c4 <MyGame_Example_TestSimpleTableWithEnum_create+0xb8>
    8954:	ldrsb	r3, [fp, #-9]
    8958:	mov	r1, r3
    895c:	ldr	r0, [fp, #-8]
    8960:	bl	872c <MyGame_Example_TestSimpleTableWithEnum_color_add>
    8964:	mov	r3, r0
    8968:	cmp	r3, #0
    896c:	bne	89c4 <MyGame_Example_TestSimpleTableWithEnum_create+0xb8>
    8970:	ldrsb	r3, [fp, #-10]
    8974:	mov	r1, r3
    8978:	ldr	r0, [fp, #-8]
    897c:	bl	87a4 <MyGame_Example_TestSimpleTableWithEnum_color2_add>
    8980:	mov	r3, r0
    8984:	cmp	r3, #0
    8988:	bne	89c4 <MyGame_Example_TestSimpleTableWithEnum_create+0xb8>
    898c:	ldrb	r3, [fp, #-11]
    8990:	mov	r1, r3
    8994:	ldr	r0, [fp, #-8]
    8998:	bl	881c <MyGame_Example_TestSimpleTableWithEnum_uc_add>
    899c:	mov	r3, r0
    89a0:	cmp	r3, #0
    89a4:	bne	89c4 <MyGame_Example_TestSimpleTableWithEnum_create+0xb8>
    89a8:	ldrb	r3, [fp, #4]
    89ac:	mov	r1, r3
    89b0:	ldr	r0, [fp, #-8]
    89b4:	bl	8894 <MyGame_Example_TestSimpleTableWithEnum_uc2_add>
    89b8:	mov	r3, r0
    89bc:	cmp	r3, #0
    89c0:	beq	89cc <MyGame_Example_TestSimpleTableWithEnum_create+0xc0>
    89c4:	mov	r3, #0
    89c8:	b	89d8 <MyGame_Example_TestSimpleTableWithEnum_create+0xcc>
    89cc:	ldr	r0, [fp, #-8]
    89d0:	bl	7e9c <MyGame_Example_TestSimpleTableWithEnum_end>
    89d4:	mov	r3, r0
    89d8:	mov	r0, r3
    89dc:	sub	sp, fp, #4
    89e0:	pop	{fp, pc}

000089e4 <MyGame_Example_Stat_id_add>:
    89e4:	push	{fp, lr}
    89e8:	add	fp, sp, #4
    89ec:	sub	sp, sp, #16
    89f0:	str	r0, [fp, #-16]
    89f4:	str	r1, [fp, #-20]	; 0xffffffec
    89f8:	ldr	r3, [fp, #-20]	; 0xffffffec
    89fc:	cmp	r3, #0
    8a00:	beq	8a34 <MyGame_Example_Stat_id_add+0x50>
    8a04:	mov	r1, #0
    8a08:	ldr	r0, [fp, #-16]
    8a0c:	bl	0 <flatcc_builder_table_add_offset>
    8a10:	str	r0, [fp, #-8]
    8a14:	ldr	r3, [fp, #-8]
    8a18:	cmp	r3, #0
    8a1c:	beq	8a34 <MyGame_Example_Stat_id_add+0x50>
    8a20:	ldr	r3, [fp, #-8]
    8a24:	ldr	r2, [fp, #-20]	; 0xffffffec
    8a28:	str	r2, [r3]
    8a2c:	mov	r3, #0
    8a30:	b	8a38 <MyGame_Example_Stat_id_add+0x54>
    8a34:	mvn	r3, #0
    8a38:	mov	r0, r3
    8a3c:	sub	sp, fp, #4
    8a40:	pop	{fp, pc}

00008a44 <MyGame_Example_Stat_val_add>:
    8a44:	push	{fp, lr}
    8a48:	add	fp, sp, #4
    8a4c:	sub	sp, sp, #24
    8a50:	str	r0, [fp, #-16]
    8a54:	strd	r2, [fp, #-28]	; 0xffffffe4
    8a58:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    8a5c:	orrs	r3, r2, r3
    8a60:	bne	8a6c <MyGame_Example_Stat_val_add+0x28>
    8a64:	mov	r3, #0
    8a68:	b	8aa8 <MyGame_Example_Stat_val_add+0x64>
    8a6c:	mov	r3, #8
    8a70:	mov	r2, #8
    8a74:	mov	r1, #1
    8a78:	ldr	r0, [fp, #-16]
    8a7c:	bl	0 <flatcc_builder_table_add>
    8a80:	str	r0, [fp, #-8]
    8a84:	ldr	r3, [fp, #-8]
    8a88:	cmp	r3, #0
    8a8c:	bne	8a98 <MyGame_Example_Stat_val_add+0x54>
    8a90:	mvn	r3, #0
    8a94:	b	8aa8 <MyGame_Example_Stat_val_add+0x64>
    8a98:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    8a9c:	ldr	r0, [fp, #-8]
    8aa0:	bl	7148 <flatbuffers_int64_assign_to_pe>
    8aa4:	mov	r3, #0
    8aa8:	mov	r0, r3
    8aac:	sub	sp, fp, #4
    8ab0:	pop	{fp, pc}

00008ab4 <MyGame_Example_Stat_count_add>:
    8ab4:	push	{fp, lr}
    8ab8:	add	fp, sp, #4
    8abc:	sub	sp, sp, #16
    8ac0:	str	r0, [fp, #-16]
    8ac4:	mov	r3, r1
    8ac8:	strh	r3, [fp, #-18]	; 0xffffffee
    8acc:	ldrh	r3, [fp, #-18]	; 0xffffffee
    8ad0:	cmp	r3, #0
    8ad4:	bne	8ae0 <MyGame_Example_Stat_count_add+0x2c>
    8ad8:	mov	r3, #0
    8adc:	b	8b20 <MyGame_Example_Stat_count_add+0x6c>
    8ae0:	mov	r3, #2
    8ae4:	mov	r2, #2
    8ae8:	mov	r1, #2
    8aec:	ldr	r0, [fp, #-16]
    8af0:	bl	0 <flatcc_builder_table_add>
    8af4:	str	r0, [fp, #-8]
    8af8:	ldr	r3, [fp, #-8]
    8afc:	cmp	r3, #0
    8b00:	bne	8b0c <MyGame_Example_Stat_count_add+0x58>
    8b04:	mvn	r3, #0
    8b08:	b	8b20 <MyGame_Example_Stat_count_add+0x6c>
    8b0c:	ldrh	r3, [fp, #-18]	; 0xffffffee
    8b10:	mov	r1, r3
    8b14:	ldr	r0, [fp, #-8]
    8b18:	bl	6fd0 <flatbuffers_uint16_assign_to_pe>
    8b1c:	mov	r3, #0
    8b20:	mov	r0, r3
    8b24:	sub	sp, fp, #4
    8b28:	pop	{fp, pc}

00008b2c <MyGame_Example_Stat_create>:
    8b2c:	push	{fp, lr}
    8b30:	add	fp, sp, #4
    8b34:	sub	sp, sp, #16
    8b38:	str	r0, [fp, #-8]
    8b3c:	str	r1, [fp, #-12]
    8b40:	strd	r2, [fp, #-20]	; 0xffffffec
    8b44:	ldr	r0, [fp, #-8]
    8b48:	bl	7f04 <MyGame_Example_Stat_start>
    8b4c:	mov	r3, r0
    8b50:	cmp	r3, #0
    8b54:	bne	8ba4 <MyGame_Example_Stat_create+0x78>
    8b58:	ldrd	r2, [fp, #-20]	; 0xffffffec
    8b5c:	ldr	r0, [fp, #-8]
    8b60:	bl	8a44 <MyGame_Example_Stat_val_add>
    8b64:	mov	r3, r0
    8b68:	cmp	r3, #0
    8b6c:	bne	8ba4 <MyGame_Example_Stat_create+0x78>
    8b70:	ldr	r1, [fp, #-12]
    8b74:	ldr	r0, [fp, #-8]
    8b78:	bl	89e4 <MyGame_Example_Stat_id_add>
    8b7c:	mov	r3, r0
    8b80:	cmp	r3, #0
    8b84:	bne	8ba4 <MyGame_Example_Stat_create+0x78>
    8b88:	ldrh	r3, [fp, #4]
    8b8c:	mov	r1, r3
    8b90:	ldr	r0, [fp, #-8]
    8b94:	bl	8ab4 <MyGame_Example_Stat_count_add>
    8b98:	mov	r3, r0
    8b9c:	cmp	r3, #0
    8ba0:	beq	8bac <MyGame_Example_Stat_create+0x80>
    8ba4:	mov	r3, #0
    8ba8:	b	8bb8 <MyGame_Example_Stat_create+0x8c>
    8bac:	ldr	r0, [fp, #-8]
    8bb0:	bl	7f30 <MyGame_Example_Stat_end>
    8bb4:	mov	r3, r0
    8bb8:	mov	r0, r3
    8bbc:	sub	sp, fp, #4
    8bc0:	pop	{fp, pc}

00008bc4 <MyGame_Example_Alt_manyany_add>:
    8bc4:	push	{fp, lr}
    8bc8:	add	fp, sp, #4
    8bcc:	sub	sp, sp, #24
    8bd0:	str	r0, [fp, #-16]
    8bd4:	sub	r3, fp, #24
    8bd8:	stm	r3, {r1, r2}
    8bdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    8be0:	cmp	r3, #0
    8be4:	beq	8bf4 <MyGame_Example_Alt_manyany_add+0x30>
    8be8:	ldr	r3, [fp, #-20]	; 0xffffffec
    8bec:	cmp	r3, #0
    8bf0:	bne	8c14 <MyGame_Example_Alt_manyany_add+0x50>
    8bf4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    8bf8:	ldr	r3, [fp, #-20]	; 0xffffffec
    8bfc:	cmp	r2, r3
    8c00:	bne	8c0c <MyGame_Example_Alt_manyany_add+0x48>
    8c04:	mov	r3, #0
    8c08:	b	8c78 <MyGame_Example_Alt_manyany_add+0xb4>
    8c0c:	mvn	r3, #0
    8c10:	b	8c78 <MyGame_Example_Alt_manyany_add+0xb4>
    8c14:	mov	r1, #2
    8c18:	ldr	r0, [fp, #-16]
    8c1c:	bl	0 <flatcc_builder_table_add_offset>
    8c20:	str	r0, [fp, #-8]
    8c24:	ldr	r3, [fp, #-8]
    8c28:	cmp	r3, #0
    8c2c:	bne	8c38 <MyGame_Example_Alt_manyany_add+0x74>
    8c30:	mvn	r3, #0
    8c34:	b	8c78 <MyGame_Example_Alt_manyany_add+0xb4>
    8c38:	ldr	r2, [fp, #-24]	; 0xffffffe8
    8c3c:	ldr	r3, [fp, #-8]
    8c40:	str	r2, [r3]
    8c44:	mov	r1, #3
    8c48:	ldr	r0, [fp, #-16]
    8c4c:	bl	0 <flatcc_builder_table_add_offset>
    8c50:	str	r0, [fp, #-8]
    8c54:	ldr	r3, [fp, #-8]
    8c58:	cmp	r3, #0
    8c5c:	bne	8c68 <MyGame_Example_Alt_manyany_add+0xa4>
    8c60:	mvn	r3, #0
    8c64:	b	8c78 <MyGame_Example_Alt_manyany_add+0xb4>
    8c68:	ldr	r2, [fp, #-20]	; 0xffffffec
    8c6c:	ldr	r3, [fp, #-8]
    8c70:	str	r2, [r3]
    8c74:	mov	r3, #0
    8c78:	mov	r0, r3
    8c7c:	sub	sp, fp, #4
    8c80:	pop	{fp, pc}

00008c84 <MyGame_Example_Monster_pos_start>:
    8c84:	push	{fp, lr}
    8c88:	add	fp, sp, #4
    8c8c:	sub	sp, sp, #8
    8c90:	str	r0, [fp, #-8]
    8c94:	mov	r3, #16
    8c98:	mov	r2, #32
    8c9c:	mov	r1, #0
    8ca0:	ldr	r0, [fp, #-8]
    8ca4:	bl	0 <flatcc_builder_table_add>
    8ca8:	mov	r3, r0
    8cac:	mov	r0, r3
    8cb0:	sub	sp, fp, #4
    8cb4:	pop	{fp, pc}

00008cb8 <MyGame_Example_Monster_pos_end>:
    8cb8:	push	{fp}		; (str fp, [sp, #-4]!)
    8cbc:	add	fp, sp, #0
    8cc0:	sub	sp, sp, #12
    8cc4:	str	r0, [fp, #-8]
    8cc8:	mov	r3, #0
    8ccc:	mov	r0, r3
    8cd0:	add	sp, fp, #0
    8cd4:	pop	{fp}		; (ldr fp, [sp], #4)
    8cd8:	bx	lr

00008cdc <MyGame_Example_Monster_pos_clone>:
    8cdc:	push	{fp, lr}
    8ce0:	add	fp, sp, #4
    8ce4:	sub	sp, sp, #16
    8ce8:	str	r0, [fp, #-8]
    8cec:	str	r1, [fp, #-12]
    8cf0:	mov	r3, #16
    8cf4:	str	r3, [sp]
    8cf8:	mov	r3, #32
    8cfc:	ldr	r2, [fp, #-12]
    8d00:	mov	r1, #0
    8d04:	ldr	r0, [fp, #-8]
    8d08:	bl	0 <flatcc_builder_table_add_copy>
    8d0c:	mov	r3, r0
    8d10:	cmp	r3, #0
    8d14:	bne	8d20 <MyGame_Example_Monster_pos_clone+0x44>
    8d18:	mvn	r3, #0
    8d1c:	b	8d24 <MyGame_Example_Monster_pos_clone+0x48>
    8d20:	mov	r3, #0
    8d24:	mov	r0, r3
    8d28:	sub	sp, fp, #4
    8d2c:	pop	{fp, pc}

00008d30 <MyGame_Example_Monster_hp_add>:
    8d30:	push	{fp, lr}
    8d34:	add	fp, sp, #4
    8d38:	sub	sp, sp, #16
    8d3c:	str	r0, [fp, #-16]
    8d40:	mov	r3, r1
    8d44:	strh	r3, [fp, #-18]	; 0xffffffee
    8d48:	ldrsh	r3, [fp, #-18]	; 0xffffffee
    8d4c:	cmp	r3, #100	; 0x64
    8d50:	bne	8d5c <MyGame_Example_Monster_hp_add+0x2c>
    8d54:	mov	r3, #0
    8d58:	b	8d9c <MyGame_Example_Monster_hp_add+0x6c>
    8d5c:	mov	r3, #2
    8d60:	mov	r2, #2
    8d64:	mov	r1, #2
    8d68:	ldr	r0, [fp, #-16]
    8d6c:	bl	0 <flatcc_builder_table_add>
    8d70:	str	r0, [fp, #-8]
    8d74:	ldr	r3, [fp, #-8]
    8d78:	cmp	r3, #0
    8d7c:	bne	8d88 <MyGame_Example_Monster_hp_add+0x58>
    8d80:	mvn	r3, #0
    8d84:	b	8d9c <MyGame_Example_Monster_hp_add+0x6c>
    8d88:	ldrsh	r3, [fp, #-18]	; 0xffffffee
    8d8c:	mov	r1, r3
    8d90:	ldr	r0, [fp, #-8]
    8d94:	bl	70cc <flatbuffers_int16_assign_to_pe>
    8d98:	mov	r3, #0
    8d9c:	mov	r0, r3
    8da0:	sub	sp, fp, #4
    8da4:	pop	{fp, pc}

00008da8 <MyGame_Example_Monster_hp_force_add>:
    8da8:	push	{fp, lr}
    8dac:	add	fp, sp, #4
    8db0:	sub	sp, sp, #16
    8db4:	str	r0, [fp, #-16]
    8db8:	mov	r3, r1
    8dbc:	strh	r3, [fp, #-18]	; 0xffffffee
    8dc0:	mov	r3, #2
    8dc4:	mov	r2, #2
    8dc8:	mov	r1, #2
    8dcc:	ldr	r0, [fp, #-16]
    8dd0:	bl	0 <flatcc_builder_table_add>
    8dd4:	str	r0, [fp, #-8]
    8dd8:	ldr	r3, [fp, #-8]
    8ddc:	cmp	r3, #0
    8de0:	bne	8dec <MyGame_Example_Monster_hp_force_add+0x44>
    8de4:	mvn	r3, #0
    8de8:	b	8e00 <MyGame_Example_Monster_hp_force_add+0x58>
    8dec:	ldrsh	r3, [fp, #-18]	; 0xffffffee
    8df0:	mov	r1, r3
    8df4:	ldr	r0, [fp, #-8]
    8df8:	bl	70cc <flatbuffers_int16_assign_to_pe>
    8dfc:	mov	r3, #0
    8e00:	mov	r0, r3
    8e04:	sub	sp, fp, #4
    8e08:	pop	{fp, pc}

00008e0c <MyGame_Example_Monster_mana_add>:
    8e0c:	push	{fp, lr}
    8e10:	add	fp, sp, #4
    8e14:	sub	sp, sp, #16
    8e18:	str	r0, [fp, #-16]
    8e1c:	mov	r3, r1
    8e20:	strh	r3, [fp, #-18]	; 0xffffffee
    8e24:	ldrsh	r3, [fp, #-18]	; 0xffffffee
    8e28:	cmp	r3, #150	; 0x96
    8e2c:	bne	8e38 <MyGame_Example_Monster_mana_add+0x2c>
    8e30:	mov	r3, #0
    8e34:	b	8e78 <MyGame_Example_Monster_mana_add+0x6c>
    8e38:	mov	r3, #2
    8e3c:	mov	r2, #2
    8e40:	mov	r1, #1
    8e44:	ldr	r0, [fp, #-16]
    8e48:	bl	0 <flatcc_builder_table_add>
    8e4c:	str	r0, [fp, #-8]
    8e50:	ldr	r3, [fp, #-8]
    8e54:	cmp	r3, #0
    8e58:	bne	8e64 <MyGame_Example_Monster_mana_add+0x58>
    8e5c:	mvn	r3, #0
    8e60:	b	8e78 <MyGame_Example_Monster_mana_add+0x6c>
    8e64:	ldrsh	r3, [fp, #-18]	; 0xffffffee
    8e68:	mov	r1, r3
    8e6c:	ldr	r0, [fp, #-8]
    8e70:	bl	70cc <flatbuffers_int16_assign_to_pe>
    8e74:	mov	r3, #0
    8e78:	mov	r0, r3
    8e7c:	sub	sp, fp, #4
    8e80:	pop	{fp, pc}

00008e84 <MyGame_Example_Monster_mana_force_add>:
    8e84:	push	{fp, lr}
    8e88:	add	fp, sp, #4
    8e8c:	sub	sp, sp, #16
    8e90:	str	r0, [fp, #-16]
    8e94:	mov	r3, r1
    8e98:	strh	r3, [fp, #-18]	; 0xffffffee
    8e9c:	mov	r3, #2
    8ea0:	mov	r2, #2
    8ea4:	mov	r1, #1
    8ea8:	ldr	r0, [fp, #-16]
    8eac:	bl	0 <flatcc_builder_table_add>
    8eb0:	str	r0, [fp, #-8]
    8eb4:	ldr	r3, [fp, #-8]
    8eb8:	cmp	r3, #0
    8ebc:	bne	8ec8 <MyGame_Example_Monster_mana_force_add+0x44>
    8ec0:	mvn	r3, #0
    8ec4:	b	8edc <MyGame_Example_Monster_mana_force_add+0x58>
    8ec8:	ldrsh	r3, [fp, #-18]	; 0xffffffee
    8ecc:	mov	r1, r3
    8ed0:	ldr	r0, [fp, #-8]
    8ed4:	bl	70cc <flatbuffers_int16_assign_to_pe>
    8ed8:	mov	r3, #0
    8edc:	mov	r0, r3
    8ee0:	sub	sp, fp, #4
    8ee4:	pop	{fp, pc}

00008ee8 <MyGame_Example_Monster_name_add>:
    8ee8:	push	{fp, lr}
    8eec:	add	fp, sp, #4
    8ef0:	sub	sp, sp, #16
    8ef4:	str	r0, [fp, #-16]
    8ef8:	str	r1, [fp, #-20]	; 0xffffffec
    8efc:	ldr	r3, [fp, #-20]	; 0xffffffec
    8f00:	cmp	r3, #0
    8f04:	beq	8f38 <MyGame_Example_Monster_name_add+0x50>
    8f08:	mov	r1, #3
    8f0c:	ldr	r0, [fp, #-16]
    8f10:	bl	0 <flatcc_builder_table_add_offset>
    8f14:	str	r0, [fp, #-8]
    8f18:	ldr	r3, [fp, #-8]
    8f1c:	cmp	r3, #0
    8f20:	beq	8f38 <MyGame_Example_Monster_name_add+0x50>
    8f24:	ldr	r3, [fp, #-8]
    8f28:	ldr	r2, [fp, #-20]	; 0xffffffec
    8f2c:	str	r2, [r3]
    8f30:	mov	r3, #0
    8f34:	b	8f3c <MyGame_Example_Monster_name_add+0x54>
    8f38:	mvn	r3, #0
    8f3c:	mov	r0, r3
    8f40:	sub	sp, fp, #4
    8f44:	pop	{fp, pc}

00008f48 <MyGame_Example_Monster_name_start>:
    8f48:	push	{fp, lr}
    8f4c:	add	fp, sp, #4
    8f50:	sub	sp, sp, #8
    8f54:	str	r0, [fp, #-8]
    8f58:	ldr	r0, [fp, #-8]
    8f5c:	bl	0 <flatcc_builder_start_string>
    8f60:	mov	r3, r0
    8f64:	mov	r0, r3
    8f68:	sub	sp, fp, #4
    8f6c:	pop	{fp, pc}

00008f70 <MyGame_Example_Monster_name_end>:
    8f70:	push	{fp, lr}
    8f74:	add	fp, sp, #4
    8f78:	sub	sp, sp, #8
    8f7c:	str	r0, [fp, #-8]
    8f80:	ldr	r0, [fp, #-8]
    8f84:	bl	0 <flatcc_builder_end_string>
    8f88:	mov	r3, r0
    8f8c:	mov	r1, r3
    8f90:	ldr	r0, [fp, #-8]
    8f94:	bl	8ee8 <MyGame_Example_Monster_name_add>
    8f98:	mov	r3, r0
    8f9c:	mov	r0, r3
    8fa0:	sub	sp, fp, #4
    8fa4:	pop	{fp, pc}

00008fa8 <MyGame_Example_Monster_name_create_str>:
    8fa8:	push	{fp, lr}
    8fac:	add	fp, sp, #4
    8fb0:	sub	sp, sp, #8
    8fb4:	str	r0, [fp, #-8]
    8fb8:	str	r1, [fp, #-12]
    8fbc:	ldr	r1, [fp, #-12]
    8fc0:	ldr	r0, [fp, #-8]
    8fc4:	bl	0 <flatcc_builder_create_string_str>
    8fc8:	mov	r3, r0
    8fcc:	mov	r1, r3
    8fd0:	ldr	r0, [fp, #-8]
    8fd4:	bl	8ee8 <MyGame_Example_Monster_name_add>
    8fd8:	mov	r3, r0
    8fdc:	mov	r0, r3
    8fe0:	sub	sp, fp, #4
    8fe4:	pop	{fp, pc}

00008fe8 <MyGame_Example_Monster_name_create_strn>:
    8fe8:	push	{fp, lr}
    8fec:	add	fp, sp, #4
    8ff0:	sub	sp, sp, #16
    8ff4:	str	r0, [fp, #-8]
    8ff8:	str	r1, [fp, #-12]
    8ffc:	str	r2, [fp, #-16]
    9000:	ldr	r2, [fp, #-16]
    9004:	ldr	r1, [fp, #-12]
    9008:	ldr	r0, [fp, #-8]
    900c:	bl	0 <flatcc_builder_create_string_strn>
    9010:	mov	r3, r0
    9014:	mov	r1, r3
    9018:	ldr	r0, [fp, #-8]
    901c:	bl	8ee8 <MyGame_Example_Monster_name_add>
    9020:	mov	r3, r0
    9024:	mov	r0, r3
    9028:	sub	sp, fp, #4
    902c:	pop	{fp, pc}

00009030 <MyGame_Example_Monster_name_clone>:
    9030:	push	{fp, lr}
    9034:	add	fp, sp, #4
    9038:	sub	sp, sp, #8
    903c:	str	r0, [fp, #-8]
    9040:	str	r1, [fp, #-12]
    9044:	ldr	r1, [fp, #-12]
    9048:	ldr	r0, [fp, #-8]
    904c:	bl	7328 <flatbuffers_string_clone>
    9050:	mov	r3, r0
    9054:	mov	r1, r3
    9058:	ldr	r0, [fp, #-8]
    905c:	bl	8ee8 <MyGame_Example_Monster_name_add>
    9060:	mov	r3, r0
    9064:	mov	r0, r3
    9068:	sub	sp, fp, #4
    906c:	pop	{fp, pc}

00009070 <MyGame_Example_Monster_name_slice>:
    9070:	push	{fp, lr}
    9074:	add	fp, sp, #4
    9078:	sub	sp, sp, #16
    907c:	str	r0, [fp, #-8]
    9080:	str	r1, [fp, #-12]
    9084:	str	r2, [fp, #-16]
    9088:	str	r3, [fp, #-20]	; 0xffffffec
    908c:	ldr	r3, [fp, #-20]	; 0xffffffec
    9090:	ldr	r2, [fp, #-16]
    9094:	ldr	r1, [fp, #-12]
    9098:	ldr	r0, [fp, #-8]
    909c:	bl	7368 <flatbuffers_string_slice>
    90a0:	mov	r3, r0
    90a4:	mov	r1, r3
    90a8:	ldr	r0, [fp, #-8]
    90ac:	bl	8ee8 <MyGame_Example_Monster_name_add>
    90b0:	mov	r3, r0
    90b4:	mov	r0, r3
    90b8:	sub	sp, fp, #4
    90bc:	pop	{fp, pc}

000090c0 <MyGame_Example_Monster_name_append>:
    90c0:	push	{fp, lr}
    90c4:	add	fp, sp, #4
    90c8:	sub	sp, sp, #16
    90cc:	str	r0, [fp, #-8]
    90d0:	str	r1, [fp, #-12]
    90d4:	str	r2, [fp, #-16]
    90d8:	ldr	r2, [fp, #-16]
    90dc:	ldr	r1, [fp, #-12]
    90e0:	ldr	r0, [fp, #-8]
    90e4:	bl	0 <flatcc_builder_append_string>
    90e8:	mov	r3, r0
    90ec:	mov	r0, r3
    90f0:	sub	sp, fp, #4
    90f4:	pop	{fp, pc}

000090f8 <MyGame_Example_Monster_name_append_str>:
    90f8:	push	{fp, lr}
    90fc:	add	fp, sp, #4
    9100:	sub	sp, sp, #8
    9104:	str	r0, [fp, #-8]
    9108:	str	r1, [fp, #-12]
    910c:	ldr	r1, [fp, #-12]
    9110:	ldr	r0, [fp, #-8]
    9114:	bl	0 <flatcc_builder_append_string_str>
    9118:	mov	r3, r0
    911c:	mov	r0, r3
    9120:	sub	sp, fp, #4
    9124:	pop	{fp, pc}

00009128 <MyGame_Example_Monster_name_append_strn>:
    9128:	push	{fp, lr}
    912c:	add	fp, sp, #4
    9130:	sub	sp, sp, #16
    9134:	str	r0, [fp, #-8]
    9138:	str	r1, [fp, #-12]
    913c:	str	r2, [fp, #-16]
    9140:	ldr	r2, [fp, #-16]
    9144:	ldr	r1, [fp, #-12]
    9148:	ldr	r0, [fp, #-8]
    914c:	bl	0 <flatcc_builder_append_string_strn>
    9150:	mov	r3, r0
    9154:	mov	r0, r3
    9158:	sub	sp, fp, #4
    915c:	pop	{fp, pc}

00009160 <MyGame_Example_Monster_name_reserved_len>:
    9160:	push	{fp, lr}
    9164:	add	fp, sp, #4
    9168:	sub	sp, sp, #8
    916c:	str	r0, [fp, #-8]
    9170:	ldr	r0, [fp, #-8]
    9174:	bl	0 <flatcc_builder_string_len>
    9178:	mov	r3, r0
    917c:	mov	r0, r3
    9180:	sub	sp, fp, #4
    9184:	pop	{fp, pc}

00009188 <MyGame_Example_Monster_name_extend>:
    9188:	push	{fp, lr}
    918c:	add	fp, sp, #4
    9190:	sub	sp, sp, #8
    9194:	str	r0, [fp, #-8]
    9198:	str	r1, [fp, #-12]
    919c:	ldr	r1, [fp, #-12]
    91a0:	ldr	r0, [fp, #-8]
    91a4:	bl	0 <flatcc_builder_extend_string>
    91a8:	mov	r3, r0
    91ac:	mov	r0, r3
    91b0:	sub	sp, fp, #4
    91b4:	pop	{fp, pc}

000091b8 <MyGame_Example_Monster_name_edit>:
    91b8:	push	{fp, lr}
    91bc:	add	fp, sp, #4
    91c0:	sub	sp, sp, #8
    91c4:	str	r0, [fp, #-8]
    91c8:	ldr	r0, [fp, #-8]
    91cc:	bl	0 <flatcc_builder_string_edit>
    91d0:	mov	r3, r0
    91d4:	mov	r0, r3
    91d8:	sub	sp, fp, #4
    91dc:	pop	{fp, pc}

000091e0 <MyGame_Example_Monster_name_truncate>:
    91e0:	push	{fp, lr}
    91e4:	add	fp, sp, #4
    91e8:	sub	sp, sp, #8
    91ec:	str	r0, [fp, #-8]
    91f0:	str	r1, [fp, #-12]
    91f4:	ldr	r1, [fp, #-12]
    91f8:	ldr	r0, [fp, #-8]
    91fc:	bl	0 <flatcc_builder_truncate_string>
    9200:	mov	r3, r0
    9204:	mov	r0, r3
    9208:	sub	sp, fp, #4
    920c:	pop	{fp, pc}

00009210 <MyGame_Example_Monster_color_add>:
    9210:	push	{fp, lr}
    9214:	add	fp, sp, #4
    9218:	sub	sp, sp, #16
    921c:	str	r0, [fp, #-16]
    9220:	mov	r3, r1
    9224:	strb	r3, [fp, #-17]	; 0xffffffef
    9228:	ldrsb	r3, [fp, #-17]	; 0xffffffef
    922c:	cmp	r3, #8
    9230:	bne	923c <MyGame_Example_Monster_color_add+0x2c>
    9234:	mov	r3, #0
    9238:	b	927c <MyGame_Example_Monster_color_add+0x6c>
    923c:	mov	r3, #1
    9240:	mov	r2, #1
    9244:	mov	r1, #6
    9248:	ldr	r0, [fp, #-16]
    924c:	bl	0 <flatcc_builder_table_add>
    9250:	str	r0, [fp, #-8]
    9254:	ldr	r3, [fp, #-8]
    9258:	cmp	r3, #0
    925c:	bne	9268 <MyGame_Example_Monster_color_add+0x58>
    9260:	mvn	r3, #0
    9264:	b	927c <MyGame_Example_Monster_color_add+0x6c>
    9268:	ldrsb	r3, [fp, #-17]	; 0xffffffef
    926c:	mov	r1, r3
    9270:	ldr	r0, [fp, #-8]
    9274:	bl	74e0 <MyGame_Example_Color_assign_to_pe>
    9278:	mov	r3, #0
    927c:	mov	r0, r3
    9280:	sub	sp, fp, #4
    9284:	pop	{fp, pc}

00009288 <MyGame_Example_Monster_color_force_add>:
    9288:	push	{fp, lr}
    928c:	add	fp, sp, #4
    9290:	sub	sp, sp, #16
    9294:	str	r0, [fp, #-16]
    9298:	mov	r3, r1
    929c:	strb	r3, [fp, #-17]	; 0xffffffef
    92a0:	mov	r3, #1
    92a4:	mov	r2, #1
    92a8:	mov	r1, #6
    92ac:	ldr	r0, [fp, #-16]
    92b0:	bl	0 <flatcc_builder_table_add>
    92b4:	str	r0, [fp, #-8]
    92b8:	ldr	r3, [fp, #-8]
    92bc:	cmp	r3, #0
    92c0:	bne	92cc <MyGame_Example_Monster_color_force_add+0x44>
    92c4:	mvn	r3, #0
    92c8:	b	92e0 <MyGame_Example_Monster_color_force_add+0x58>
    92cc:	ldrsb	r3, [fp, #-17]	; 0xffffffef
    92d0:	mov	r1, r3
    92d4:	ldr	r0, [fp, #-8]
    92d8:	bl	74e0 <MyGame_Example_Color_assign_to_pe>
    92dc:	mov	r3, #0
    92e0:	mov	r0, r3
    92e4:	sub	sp, fp, #4
    92e8:	pop	{fp, pc}

000092ec <MyGame_Example_Monster_inventory_add>:
    92ec:	push	{fp, lr}
    92f0:	add	fp, sp, #4
    92f4:	sub	sp, sp, #16
    92f8:	str	r0, [fp, #-16]
    92fc:	str	r1, [fp, #-20]	; 0xffffffec
    9300:	ldr	r3, [fp, #-20]	; 0xffffffec
    9304:	cmp	r3, #0
    9308:	beq	933c <MyGame_Example_Monster_inventory_add+0x50>
    930c:	mov	r1, #5
    9310:	ldr	r0, [fp, #-16]
    9314:	bl	0 <flatcc_builder_table_add_offset>
    9318:	str	r0, [fp, #-8]
    931c:	ldr	r3, [fp, #-8]
    9320:	cmp	r3, #0
    9324:	beq	933c <MyGame_Example_Monster_inventory_add+0x50>
    9328:	ldr	r3, [fp, #-8]
    932c:	ldr	r2, [fp, #-20]	; 0xffffffec
    9330:	str	r2, [r3]
    9334:	mov	r3, #0
    9338:	b	9340 <MyGame_Example_Monster_inventory_add+0x54>
    933c:	mvn	r3, #0
    9340:	mov	r0, r3
    9344:	sub	sp, fp, #4
    9348:	pop	{fp, pc}

0000934c <MyGame_Example_Monster_inventory_create>:
    934c:	push	{fp, lr}
    9350:	add	fp, sp, #4
    9354:	sub	sp, sp, #16
    9358:	str	r0, [fp, #-8]
    935c:	str	r1, [fp, #-12]
    9360:	str	r2, [fp, #-16]
    9364:	ldr	r2, [fp, #-16]
    9368:	ldr	r1, [fp, #-12]
    936c:	ldr	r0, [fp, #-8]
    9370:	bl	6d5c <flatbuffers_uint8_vec_create>
    9374:	mov	r3, r0
    9378:	mov	r1, r3
    937c:	ldr	r0, [fp, #-8]
    9380:	bl	92ec <MyGame_Example_Monster_inventory_add>
    9384:	mov	r3, r0
    9388:	mov	r0, r3
    938c:	sub	sp, fp, #4
    9390:	pop	{fp, pc}

00009394 <MyGame_Example_Monster_testarrayoftables_add>:
    9394:	push	{fp, lr}
    9398:	add	fp, sp, #4
    939c:	sub	sp, sp, #16
    93a0:	str	r0, [fp, #-16]
    93a4:	str	r1, [fp, #-20]	; 0xffffffec
    93a8:	ldr	r3, [fp, #-20]	; 0xffffffec
    93ac:	cmp	r3, #0
    93b0:	beq	93e4 <MyGame_Example_Monster_testarrayoftables_add+0x50>
    93b4:	mov	r1, #11
    93b8:	ldr	r0, [fp, #-16]
    93bc:	bl	0 <flatcc_builder_table_add_offset>
    93c0:	str	r0, [fp, #-8]
    93c4:	ldr	r3, [fp, #-8]
    93c8:	cmp	r3, #0
    93cc:	beq	93e4 <MyGame_Example_Monster_testarrayoftables_add+0x50>
    93d0:	ldr	r3, [fp, #-8]
    93d4:	ldr	r2, [fp, #-20]	; 0xffffffec
    93d8:	str	r2, [r3]
    93dc:	mov	r3, #0
    93e0:	b	93e8 <MyGame_Example_Monster_testarrayoftables_add+0x54>
    93e4:	mvn	r3, #0
    93e8:	mov	r0, r3
    93ec:	sub	sp, fp, #4
    93f0:	pop	{fp, pc}

000093f4 <MyGame_Example_Monster_testarrayoftables_start>:
    93f4:	push	{fp, lr}
    93f8:	add	fp, sp, #4
    93fc:	sub	sp, sp, #8
    9400:	str	r0, [fp, #-8]
    9404:	ldr	r0, [fp, #-8]
    9408:	bl	0 <flatcc_builder_start_offset_vector>
    940c:	mov	r3, r0
    9410:	mov	r0, r3
    9414:	sub	sp, fp, #4
    9418:	pop	{fp, pc}

0000941c <MyGame_Example_Monster_testarrayoftables_end>:
    941c:	push	{fp, lr}
    9420:	add	fp, sp, #4
    9424:	sub	sp, sp, #8
    9428:	str	r0, [fp, #-8]
    942c:	ldr	r0, [fp, #-8]
    9430:	bl	0 <flatcc_builder_end_offset_vector>
    9434:	mov	r3, r0
    9438:	mov	r1, r3
    943c:	ldr	r0, [fp, #-8]
    9440:	bl	9394 <MyGame_Example_Monster_testarrayoftables_add>
    9444:	mov	r3, r0
    9448:	mov	r0, r3
    944c:	sub	sp, fp, #4
    9450:	pop	{fp, pc}

00009454 <MyGame_Example_Monster_testarrayoftables_extend>:
    9454:	push	{fp, lr}
    9458:	add	fp, sp, #4
    945c:	sub	sp, sp, #8
    9460:	str	r0, [fp, #-8]
    9464:	str	r1, [fp, #-12]
    9468:	ldr	r1, [fp, #-12]
    946c:	ldr	r0, [fp, #-8]
    9470:	bl	0 <flatcc_builder_extend_offset_vector>
    9474:	mov	r3, r0
    9478:	mov	r0, r3
    947c:	sub	sp, fp, #4
    9480:	pop	{fp, pc}

00009484 <MyGame_Example_Monster_testarrayoftables_append>:
    9484:	push	{fp, lr}
    9488:	add	fp, sp, #4
    948c:	sub	sp, sp, #16
    9490:	str	r0, [fp, #-8]
    9494:	str	r1, [fp, #-12]
    9498:	str	r2, [fp, #-16]
    949c:	ldr	r2, [fp, #-16]
    94a0:	ldr	r1, [fp, #-12]
    94a4:	ldr	r0, [fp, #-8]
    94a8:	bl	0 <flatcc_builder_append_offset_vector>
    94ac:	mov	r3, r0
    94b0:	mov	r0, r3
    94b4:	sub	sp, fp, #4
    94b8:	pop	{fp, pc}

000094bc <MyGame_Example_Monster_testarrayoftables_truncate>:
    94bc:	push	{fp, lr}
    94c0:	add	fp, sp, #4
    94c4:	sub	sp, sp, #8
    94c8:	str	r0, [fp, #-8]
    94cc:	str	r1, [fp, #-12]
    94d0:	ldr	r1, [fp, #-12]
    94d4:	ldr	r0, [fp, #-8]
    94d8:	bl	0 <flatcc_builder_truncate_offset_vector>
    94dc:	mov	r3, r0
    94e0:	mov	r0, r3
    94e4:	sub	sp, fp, #4
    94e8:	pop	{fp, pc}

000094ec <MyGame_Example_Monster_testarrayoftables_edit>:
    94ec:	push	{fp, lr}
    94f0:	add	fp, sp, #4
    94f4:	sub	sp, sp, #8
    94f8:	str	r0, [fp, #-8]
    94fc:	ldr	r0, [fp, #-8]
    9500:	bl	0 <flatcc_builder_offset_vector_edit>
    9504:	mov	r3, r0
    9508:	mov	r0, r3
    950c:	sub	sp, fp, #4
    9510:	pop	{fp, pc}

00009514 <MyGame_Example_Monster_testarrayoftables_reserved_len>:
    9514:	push	{fp, lr}
    9518:	add	fp, sp, #4
    951c:	sub	sp, sp, #8
    9520:	str	r0, [fp, #-8]
    9524:	ldr	r0, [fp, #-8]
    9528:	bl	0 <flatcc_builder_offset_vector_count>
    952c:	mov	r3, r0
    9530:	mov	r0, r3
    9534:	sub	sp, fp, #4
    9538:	pop	{fp, pc}

0000953c <MyGame_Example_Monster_testarrayoftables_push>:
    953c:	push	{fp, lr}
    9540:	add	fp, sp, #4
    9544:	sub	sp, sp, #8
    9548:	str	r0, [fp, #-8]
    954c:	str	r1, [fp, #-12]
    9550:	ldr	r3, [fp, #-12]
    9554:	cmp	r3, #0
    9558:	beq	9570 <MyGame_Example_Monster_testarrayoftables_push+0x34>
    955c:	ldr	r1, [fp, #-12]
    9560:	ldr	r0, [fp, #-8]
    9564:	bl	0 <flatcc_builder_offset_vector_push>
    9568:	mov	r3, r0
    956c:	b	9574 <MyGame_Example_Monster_testarrayoftables_push+0x38>
    9570:	mov	r3, #0
    9574:	mov	r0, r3
    9578:	sub	sp, fp, #4
    957c:	pop	{fp, pc}

00009580 <MyGame_Example_Monster_testarrayoftables_push_start>:
    9580:	push	{fp, lr}
    9584:	add	fp, sp, #4
    9588:	sub	sp, sp, #8
    958c:	str	r0, [fp, #-8]
    9590:	ldr	r0, [fp, #-8]
    9594:	bl	802c <MyGame_Example_Monster_start>
    9598:	mov	r3, r0
    959c:	mov	r0, r3
    95a0:	sub	sp, fp, #4
    95a4:	pop	{fp, pc}

000095a8 <MyGame_Example_Monster_testarrayoftables_push_end>:
    95a8:	push	{fp, lr}
    95ac:	add	fp, sp, #4
    95b0:	sub	sp, sp, #8
    95b4:	str	r0, [fp, #-8]
    95b8:	ldr	r0, [fp, #-8]
    95bc:	bl	8058 <MyGame_Example_Monster_end>
    95c0:	mov	r3, r0
    95c4:	mov	r1, r3
    95c8:	ldr	r0, [fp, #-8]
    95cc:	bl	953c <MyGame_Example_Monster_testarrayoftables_push>
    95d0:	mov	r3, r0
    95d4:	mov	r0, r3
    95d8:	sub	sp, fp, #4
    95dc:	pop	{fp, pc}

000095e0 <MyGame_Example_Monster_testarrayofstring_add>:
    95e0:	push	{fp, lr}
    95e4:	add	fp, sp, #4
    95e8:	sub	sp, sp, #16
    95ec:	str	r0, [fp, #-16]
    95f0:	str	r1, [fp, #-20]	; 0xffffffec
    95f4:	ldr	r3, [fp, #-20]	; 0xffffffec
    95f8:	cmp	r3, #0
    95fc:	beq	9630 <MyGame_Example_Monster_testarrayofstring_add+0x50>
    9600:	mov	r1, #10
    9604:	ldr	r0, [fp, #-16]
    9608:	bl	0 <flatcc_builder_table_add_offset>
    960c:	str	r0, [fp, #-8]
    9610:	ldr	r3, [fp, #-8]
    9614:	cmp	r3, #0
    9618:	beq	9630 <MyGame_Example_Monster_testarrayofstring_add+0x50>
    961c:	ldr	r3, [fp, #-8]
    9620:	ldr	r2, [fp, #-20]	; 0xffffffec
    9624:	str	r2, [r3]
    9628:	mov	r3, #0
    962c:	b	9634 <MyGame_Example_Monster_testarrayofstring_add+0x54>
    9630:	mvn	r3, #0
    9634:	mov	r0, r3
    9638:	sub	sp, fp, #4
    963c:	pop	{fp, pc}

00009640 <MyGame_Example_Monster_testarrayofstring_start>:
    9640:	push	{fp, lr}
    9644:	add	fp, sp, #4
    9648:	sub	sp, sp, #8
    964c:	str	r0, [fp, #-8]
    9650:	ldr	r0, [fp, #-8]
    9654:	bl	0 <flatcc_builder_start_offset_vector>
    9658:	mov	r3, r0
    965c:	mov	r0, r3
    9660:	sub	sp, fp, #4
    9664:	pop	{fp, pc}

00009668 <MyGame_Example_Monster_testarrayofstring_end>:
    9668:	push	{fp, lr}
    966c:	add	fp, sp, #4
    9670:	sub	sp, sp, #8
    9674:	str	r0, [fp, #-8]
    9678:	ldr	r0, [fp, #-8]
    967c:	bl	0 <flatcc_builder_end_offset_vector>
    9680:	mov	r3, r0
    9684:	mov	r1, r3
    9688:	ldr	r0, [fp, #-8]
    968c:	bl	95e0 <MyGame_Example_Monster_testarrayofstring_add>
    9690:	mov	r3, r0
    9694:	mov	r0, r3
    9698:	sub	sp, fp, #4
    969c:	pop	{fp, pc}

000096a0 <MyGame_Example_Monster_testarrayofstring_create>:
    96a0:	push	{fp, lr}
    96a4:	add	fp, sp, #4
    96a8:	sub	sp, sp, #16
    96ac:	str	r0, [fp, #-8]
    96b0:	str	r1, [fp, #-12]
    96b4:	str	r2, [fp, #-16]
    96b8:	ldr	r2, [fp, #-16]
    96bc:	ldr	r1, [fp, #-12]
    96c0:	ldr	r0, [fp, #-8]
    96c4:	bl	0 <flatcc_builder_create_offset_vector>
    96c8:	mov	r3, r0
    96cc:	mov	r1, r3
    96d0:	ldr	r0, [fp, #-8]
    96d4:	bl	95e0 <MyGame_Example_Monster_testarrayofstring_add>
    96d8:	mov	r3, r0
    96dc:	mov	r0, r3
    96e0:	sub	sp, fp, #4
    96e4:	pop	{fp, pc}

000096e8 <MyGame_Example_Monster_testarrayofstring_push_clone>:
    96e8:	push	{fp, lr}
    96ec:	add	fp, sp, #4
    96f0:	sub	sp, sp, #8
    96f4:	str	r0, [fp, #-8]
    96f8:	str	r1, [fp, #-12]
    96fc:	ldr	r1, [fp, #-12]
    9700:	ldr	r0, [fp, #-8]
    9704:	bl	7328 <flatbuffers_string_clone>
    9708:	mov	r3, r0
    970c:	mov	r1, r3
    9710:	ldr	r0, [fp, #-8]
    9714:	bl	73fc <flatbuffers_string_vec_push>
    9718:	mov	r3, r0
    971c:	mov	r0, r3
    9720:	sub	sp, fp, #4
    9724:	pop	{fp, pc}

00009728 <MyGame_Example_Monster_testarrayofstring_push_slice>:
    9728:	push	{fp, lr}
    972c:	add	fp, sp, #4
    9730:	sub	sp, sp, #16
    9734:	str	r0, [fp, #-8]
    9738:	str	r1, [fp, #-12]
    973c:	str	r2, [fp, #-16]
    9740:	str	r3, [fp, #-20]	; 0xffffffec
    9744:	ldr	r3, [fp, #-20]	; 0xffffffec
    9748:	ldr	r2, [fp, #-16]
    974c:	ldr	r1, [fp, #-12]
    9750:	ldr	r0, [fp, #-8]
    9754:	bl	7368 <flatbuffers_string_slice>
    9758:	mov	r3, r0
    975c:	mov	r1, r3
    9760:	ldr	r0, [fp, #-8]
    9764:	bl	73fc <flatbuffers_string_vec_push>
    9768:	mov	r3, r0
    976c:	mov	r0, r3
    9770:	sub	sp, fp, #4
    9774:	pop	{fp, pc}

00009778 <MyGame_Example_Monster_testarrayofbools_add>:
    9778:	push	{fp, lr}
    977c:	add	fp, sp, #4
    9780:	sub	sp, sp, #16
    9784:	str	r0, [fp, #-16]
    9788:	str	r1, [fp, #-20]	; 0xffffffec
    978c:	ldr	r3, [fp, #-20]	; 0xffffffec
    9790:	cmp	r3, #0
    9794:	beq	97c8 <MyGame_Example_Monster_testarrayofbools_add+0x50>
    9798:	mov	r1, #24
    979c:	ldr	r0, [fp, #-16]
    97a0:	bl	0 <flatcc_builder_table_add_offset>
    97a4:	str	r0, [fp, #-8]
    97a8:	ldr	r3, [fp, #-8]
    97ac:	cmp	r3, #0
    97b0:	beq	97c8 <MyGame_Example_Monster_testarrayofbools_add+0x50>
    97b4:	ldr	r3, [fp, #-8]
    97b8:	ldr	r2, [fp, #-20]	; 0xffffffec
    97bc:	str	r2, [r3]
    97c0:	mov	r3, #0
    97c4:	b	97cc <MyGame_Example_Monster_testarrayofbools_add+0x54>
    97c8:	mvn	r3, #0
    97cc:	mov	r0, r3
    97d0:	sub	sp, fp, #4
    97d4:	pop	{fp, pc}

000097d8 <MyGame_Example_Monster_testarrayofbools_start>:
    97d8:	push	{fp, lr}
    97dc:	add	fp, sp, #4
    97e0:	sub	sp, sp, #8
    97e4:	str	r0, [fp, #-8]
    97e8:	ldr	r0, [fp, #-8]
    97ec:	bl	6e30 <flatbuffers_bool_vec_start>
    97f0:	mov	r3, r0
    97f4:	mov	r0, r3
    97f8:	sub	sp, fp, #4
    97fc:	pop	{fp, pc}

00009800 <MyGame_Example_Monster_testarrayofbools_end>:
    9800:	push	{fp, lr}
    9804:	add	fp, sp, #4
    9808:	sub	sp, sp, #8
    980c:	str	r0, [fp, #-8]
    9810:	ldr	r0, [fp, #-8]
    9814:	bl	6e64 <flatbuffers_bool_vec_end>
    9818:	mov	r3, r0
    981c:	mov	r1, r3
    9820:	ldr	r0, [fp, #-8]
    9824:	bl	9778 <MyGame_Example_Monster_testarrayofbools_add>
    9828:	mov	r3, r0
    982c:	mov	r0, r3
    9830:	sub	sp, fp, #4
    9834:	pop	{fp, pc}

00009838 <MyGame_Example_Monster_testarrayofbools_create>:
    9838:	push	{fp, lr}
    983c:	add	fp, sp, #4
    9840:	sub	sp, sp, #16
    9844:	str	r0, [fp, #-8]
    9848:	str	r1, [fp, #-12]
    984c:	str	r2, [fp, #-16]
    9850:	ldr	r2, [fp, #-16]
    9854:	ldr	r1, [fp, #-12]
    9858:	ldr	r0, [fp, #-8]
    985c:	bl	6e8c <flatbuffers_bool_vec_create>
    9860:	mov	r3, r0
    9864:	mov	r1, r3
    9868:	ldr	r0, [fp, #-8]
    986c:	bl	9778 <MyGame_Example_Monster_testarrayofbools_add>
    9870:	mov	r3, r0
    9874:	mov	r0, r3
    9878:	sub	sp, fp, #4
    987c:	pop	{fp, pc}

00009880 <MyGame_Example_Monster_testarrayofbools_clone>:
    9880:	push	{fp, lr}
    9884:	add	fp, sp, #4
    9888:	sub	sp, sp, #8
    988c:	str	r0, [fp, #-8]
    9890:	str	r1, [fp, #-12]
    9894:	ldr	r1, [fp, #-12]
    9898:	ldr	r0, [fp, #-8]
    989c:	bl	6ed8 <flatbuffers_bool_vec_clone>
    98a0:	mov	r3, r0
    98a4:	mov	r1, r3
    98a8:	ldr	r0, [fp, #-8]
    98ac:	bl	9778 <MyGame_Example_Monster_testarrayofbools_add>
    98b0:	mov	r3, r0
    98b4:	mov	r0, r3
    98b8:	sub	sp, fp, #4
    98bc:	pop	{fp, pc}

000098c0 <MyGame_Example_Monster_testarrayofbools_slice>:
    98c0:	push	{fp, lr}
    98c4:	add	fp, sp, #4
    98c8:	sub	sp, sp, #16
    98cc:	str	r0, [fp, #-8]
    98d0:	str	r1, [fp, #-12]
    98d4:	str	r2, [fp, #-16]
    98d8:	str	r3, [fp, #-20]	; 0xffffffec
    98dc:	ldr	r3, [fp, #-20]	; 0xffffffec
    98e0:	ldr	r2, [fp, #-16]
    98e4:	ldr	r1, [fp, #-12]
    98e8:	ldr	r0, [fp, #-8]
    98ec:	bl	6f28 <flatbuffers_bool_vec_slice>
    98f0:	mov	r3, r0
    98f4:	mov	r1, r3
    98f8:	ldr	r0, [fp, #-8]
    98fc:	bl	9778 <MyGame_Example_Monster_testarrayofbools_add>
    9900:	mov	r3, r0
    9904:	mov	r0, r3
    9908:	sub	sp, fp, #4
    990c:	pop	{fp, pc}

00009910 <MyGame_Example_Monster_testarrayofbools_append>:
    9910:	push	{fp, lr}
    9914:	add	fp, sp, #4
    9918:	sub	sp, sp, #16
    991c:	str	r0, [fp, #-8]
    9920:	str	r1, [fp, #-12]
    9924:	str	r2, [fp, #-16]
    9928:	ldr	r2, [fp, #-16]
    992c:	ldr	r1, [fp, #-12]
    9930:	ldr	r0, [fp, #-8]
    9934:	bl	0 <flatcc_builder_append_vector>
    9938:	mov	r3, r0
    993c:	mov	r0, r3
    9940:	sub	sp, fp, #4
    9944:	pop	{fp, pc}

00009948 <MyGame_Example_Monster_enemy_add>:
    9948:	push	{fp, lr}
    994c:	add	fp, sp, #4
    9950:	sub	sp, sp, #16
    9954:	str	r0, [fp, #-16]
    9958:	str	r1, [fp, #-20]	; 0xffffffec
    995c:	ldr	r3, [fp, #-20]	; 0xffffffec
    9960:	cmp	r3, #0
    9964:	beq	9998 <MyGame_Example_Monster_enemy_add+0x50>
    9968:	mov	r1, #12
    996c:	ldr	r0, [fp, #-16]
    9970:	bl	0 <flatcc_builder_table_add_offset>
    9974:	str	r0, [fp, #-8]
    9978:	ldr	r3, [fp, #-8]
    997c:	cmp	r3, #0
    9980:	beq	9998 <MyGame_Example_Monster_enemy_add+0x50>
    9984:	ldr	r3, [fp, #-8]
    9988:	ldr	r2, [fp, #-20]	; 0xffffffec
    998c:	str	r2, [r3]
    9990:	mov	r3, #0
    9994:	b	999c <MyGame_Example_Monster_enemy_add+0x54>
    9998:	mvn	r3, #0
    999c:	mov	r0, r3
    99a0:	sub	sp, fp, #4
    99a4:	pop	{fp, pc}

000099a8 <MyGame_Example_Monster_enemy_start>:
    99a8:	push	{fp, lr}
    99ac:	add	fp, sp, #4
    99b0:	sub	sp, sp, #8
    99b4:	str	r0, [fp, #-8]
    99b8:	ldr	r0, [fp, #-8]
    99bc:	bl	802c <MyGame_Example_Monster_start>
    99c0:	mov	r3, r0
    99c4:	mov	r0, r3
    99c8:	sub	sp, fp, #4
    99cc:	pop	{fp, pc}

000099d0 <MyGame_Example_Monster_enemy_end>:
    99d0:	push	{fp, lr}
    99d4:	add	fp, sp, #4
    99d8:	sub	sp, sp, #8
    99dc:	str	r0, [fp, #-8]
    99e0:	ldr	r0, [fp, #-8]
    99e4:	bl	8058 <MyGame_Example_Monster_end>
    99e8:	mov	r3, r0
    99ec:	mov	r1, r3
    99f0:	ldr	r0, [fp, #-8]
    99f4:	bl	9948 <MyGame_Example_Monster_enemy_add>
    99f8:	mov	r3, r0
    99fc:	mov	r0, r3
    9a00:	sub	sp, fp, #4
    9a04:	pop	{fp, pc}

00009a08 <MyGame_Example_Monster_test_add>:
    9a08:	push	{fp, lr}
    9a0c:	add	fp, sp, #4
    9a10:	sub	sp, sp, #24
    9a14:	str	r0, [fp, #-16]
    9a18:	sub	r3, fp, #24
    9a1c:	stm	r3, {r1, r2}
    9a20:	ldrb	r3, [fp, #-24]	; 0xffffffe8
    9a24:	cmp	r3, #0
    9a28:	bne	9a34 <MyGame_Example_Monster_test_add+0x2c>
    9a2c:	mov	r3, #0
    9a30:	b	9aac <MyGame_Example_Monster_test_add+0xa4>
    9a34:	ldr	r3, [fp, #-20]	; 0xffffffec
    9a38:	cmp	r3, #0
    9a3c:	bne	9a48 <MyGame_Example_Monster_test_add+0x40>
    9a40:	mvn	r3, #0
    9a44:	b	9aac <MyGame_Example_Monster_test_add+0xa4>
    9a48:	mov	r3, #1
    9a4c:	mov	r2, #1
    9a50:	mov	r1, #7
    9a54:	ldr	r0, [fp, #-16]
    9a58:	bl	0 <flatcc_builder_table_add>
    9a5c:	str	r0, [fp, #-8]
    9a60:	ldr	r3, [fp, #-8]
    9a64:	cmp	r3, #0
    9a68:	beq	9a88 <MyGame_Example_Monster_test_add+0x80>
    9a6c:	mov	r1, #8
    9a70:	ldr	r0, [fp, #-16]
    9a74:	bl	0 <flatcc_builder_table_add_offset>
    9a78:	str	r0, [fp, #-12]
    9a7c:	ldr	r3, [fp, #-12]
    9a80:	cmp	r3, #0
    9a84:	bne	9a90 <MyGame_Example_Monster_test_add+0x88>
    9a88:	mvn	r3, #0
    9a8c:	b	9aac <MyGame_Example_Monster_test_add+0xa4>
    9a90:	ldrb	r2, [fp, #-24]	; 0xffffffe8
    9a94:	ldr	r3, [fp, #-8]
    9a98:	strb	r2, [r3]
    9a9c:	ldr	r2, [fp, #-20]	; 0xffffffec
    9aa0:	ldr	r3, [fp, #-12]
    9aa4:	str	r2, [r3]
    9aa8:	mov	r3, #0
    9aac:	mov	r0, r3
    9ab0:	sub	sp, fp, #4
    9ab4:	pop	{fp, pc}

00009ab8 <MyGame_Example_Monster_test_add_type>:
    9ab8:	push	{fp, lr}
    9abc:	add	fp, sp, #4
    9ac0:	sub	sp, sp, #16
    9ac4:	str	r0, [fp, #-16]
    9ac8:	mov	r3, r1
    9acc:	strb	r3, [fp, #-17]	; 0xffffffef
    9ad0:	ldrb	r3, [fp, #-17]	; 0xffffffef
    9ad4:	cmp	r3, #0
    9ad8:	bne	9ae4 <MyGame_Example_Monster_test_add_type+0x2c>
    9adc:	mov	r3, #0
    9ae0:	b	9b20 <MyGame_Example_Monster_test_add_type+0x68>
    9ae4:	mov	r3, #1
    9ae8:	mov	r2, #1
    9aec:	mov	r1, #7
    9af0:	ldr	r0, [fp, #-16]
    9af4:	bl	0 <flatcc_builder_table_add>
    9af8:	str	r0, [fp, #-8]
    9afc:	ldr	r3, [fp, #-8]
    9b00:	cmp	r3, #0
    9b04:	beq	9b1c <MyGame_Example_Monster_test_add_type+0x64>
    9b08:	ldr	r3, [fp, #-8]
    9b0c:	ldrb	r2, [fp, #-17]	; 0xffffffef
    9b10:	strb	r2, [r3]
    9b14:	mov	r3, #0
    9b18:	b	9b20 <MyGame_Example_Monster_test_add_type+0x68>
    9b1c:	mvn	r3, #0
    9b20:	mov	r0, r3
    9b24:	sub	sp, fp, #4
    9b28:	pop	{fp, pc}

00009b2c <MyGame_Example_Monster_test_add_value>:
    9b2c:	push	{fp, lr}
    9b30:	add	fp, sp, #4
    9b34:	sub	sp, sp, #24
    9b38:	str	r0, [fp, #-16]
    9b3c:	sub	r3, fp, #24
    9b40:	stm	r3, {r1, r2}
    9b44:	ldrb	r3, [fp, #-24]	; 0xffffffe8
    9b48:	cmp	r3, #0
    9b4c:	bne	9b58 <MyGame_Example_Monster_test_add_value+0x2c>
    9b50:	mov	r3, #0
    9b54:	b	9b8c <MyGame_Example_Monster_test_add_value+0x60>
    9b58:	mov	r1, #8
    9b5c:	ldr	r0, [fp, #-16]
    9b60:	bl	0 <flatcc_builder_table_add_offset>
    9b64:	str	r0, [fp, #-8]
    9b68:	ldr	r3, [fp, #-8]
    9b6c:	cmp	r3, #0
    9b70:	beq	9b88 <MyGame_Example_Monster_test_add_value+0x5c>
    9b74:	ldr	r2, [fp, #-20]	; 0xffffffec
    9b78:	ldr	r3, [fp, #-8]
    9b7c:	str	r2, [r3]
    9b80:	mov	r3, #0
    9b84:	b	9b8c <MyGame_Example_Monster_test_add_value+0x60>
    9b88:	mvn	r3, #0
    9b8c:	mov	r0, r3
    9b90:	sub	sp, fp, #4
    9b94:	pop	{fp, pc}

00009b98 <MyGame_Example_Monster_test_Monster_add>:
    9b98:	push	{fp, lr}
    9b9c:	add	fp, sp, #4
    9ba0:	sub	sp, sp, #16
    9ba4:	str	r0, [fp, #-16]
    9ba8:	str	r1, [fp, #-20]	; 0xffffffec
    9bac:	sub	r3, fp, #12
    9bb0:	ldr	r1, [fp, #-20]	; 0xffffffec
    9bb4:	mov	r0, r3
    9bb8:	bl	82c0 <MyGame_Example_Any_as_Monster>
    9bbc:	sub	r3, fp, #12
    9bc0:	ldm	r3, {r1, r2}
    9bc4:	ldr	r0, [fp, #-16]
    9bc8:	bl	9a08 <MyGame_Example_Monster_test_add>
    9bcc:	mov	r3, r0
    9bd0:	mov	r0, r3
    9bd4:	sub	sp, fp, #4
    9bd8:	pop	{fp, pc}

00009bdc <MyGame_Example_Monster_test_Alt_add>:
    9bdc:	push	{fp, lr}
    9be0:	add	fp, sp, #4
    9be4:	sub	sp, sp, #16
    9be8:	str	r0, [fp, #-16]
    9bec:	str	r1, [fp, #-20]	; 0xffffffec
    9bf0:	sub	r3, fp, #12
    9bf4:	ldr	r1, [fp, #-20]	; 0xffffffec
    9bf8:	mov	r0, r3
    9bfc:	bl	8350 <MyGame_Example_Any_as_Alt>
    9c00:	sub	r3, fp, #12
    9c04:	ldm	r3, {r1, r2}
    9c08:	ldr	r0, [fp, #-16]
    9c0c:	bl	9a08 <MyGame_Example_Monster_test_add>
    9c10:	mov	r3, r0
    9c14:	mov	r0, r3
    9c18:	sub	sp, fp, #4
    9c1c:	pop	{fp, pc}

00009c20 <MyGame_Example_Monster_test_Alt_start>:
    9c20:	push	{fp, lr}
    9c24:	add	fp, sp, #4
    9c28:	sub	sp, sp, #8
    9c2c:	str	r0, [fp, #-8]
    9c30:	ldr	r0, [fp, #-8]
    9c34:	bl	7f98 <MyGame_Example_Alt_start>
    9c38:	mov	r3, r0
    9c3c:	mov	r0, r3
    9c40:	sub	sp, fp, #4
    9c44:	pop	{fp, pc}

00009c48 <MyGame_Example_Monster_test_Alt_end>:
    9c48:	push	{fp, lr}
    9c4c:	add	fp, sp, #4
    9c50:	sub	sp, sp, #16
    9c54:	str	r0, [fp, #-16]
    9c58:	ldr	r0, [fp, #-16]
    9c5c:	bl	7fc4 <MyGame_Example_Alt_end>
    9c60:	str	r0, [fp, #-8]
    9c64:	ldr	r3, [fp, #-8]
    9c68:	cmp	r3, #0
    9c6c:	beq	9c84 <MyGame_Example_Monster_test_Alt_end+0x3c>
    9c70:	ldr	r1, [fp, #-8]
    9c74:	ldr	r0, [fp, #-16]
    9c78:	bl	9bdc <MyGame_Example_Monster_test_Alt_add>
    9c7c:	mov	r3, r0
    9c80:	b	9c88 <MyGame_Example_Monster_test_Alt_end+0x40>
    9c84:	mvn	r3, #0
    9c88:	mov	r0, r3
    9c8c:	sub	sp, fp, #4
    9c90:	pop	{fp, pc}

00009c94 <MyGame_Example_Monster_test4_add>:
    9c94:	push	{fp, lr}
    9c98:	add	fp, sp, #4
    9c9c:	sub	sp, sp, #16
    9ca0:	str	r0, [fp, #-16]
    9ca4:	str	r1, [fp, #-20]	; 0xffffffec
    9ca8:	ldr	r3, [fp, #-20]	; 0xffffffec
    9cac:	cmp	r3, #0
    9cb0:	beq	9ce4 <MyGame_Example_Monster_test4_add+0x50>
    9cb4:	mov	r1, #9
    9cb8:	ldr	r0, [fp, #-16]
    9cbc:	bl	0 <flatcc_builder_table_add_offset>
    9cc0:	str	r0, [fp, #-8]
    9cc4:	ldr	r3, [fp, #-8]
    9cc8:	cmp	r3, #0
    9ccc:	beq	9ce4 <MyGame_Example_Monster_test4_add+0x50>
    9cd0:	ldr	r3, [fp, #-8]
    9cd4:	ldr	r2, [fp, #-20]	; 0xffffffec
    9cd8:	str	r2, [r3]
    9cdc:	mov	r3, #0
    9ce0:	b	9ce8 <MyGame_Example_Monster_test4_add+0x54>
    9ce4:	mvn	r3, #0
    9ce8:	mov	r0, r3
    9cec:	sub	sp, fp, #4
    9cf0:	pop	{fp, pc}

00009cf4 <MyGame_Example_Monster_test4_start>:
    9cf4:	push	{fp, lr}
    9cf8:	add	fp, sp, #4
    9cfc:	sub	sp, sp, #8
    9d00:	str	r0, [fp, #-8]
    9d04:	ldr	r0, [fp, #-8]
    9d08:	bl	7608 <MyGame_Example_Test_vec_start>
    9d0c:	mov	r3, r0
    9d10:	mov	r0, r3
    9d14:	sub	sp, fp, #4
    9d18:	pop	{fp, pc}

00009d1c <MyGame_Example_Monster_test4_end>:
    9d1c:	push	{fp, lr}
    9d20:	add	fp, sp, #4
    9d24:	sub	sp, sp, #8
    9d28:	str	r0, [fp, #-8]
    9d2c:	ldr	r0, [fp, #-8]
    9d30:	bl	763c <MyGame_Example_Test_vec_end>
    9d34:	mov	r3, r0
    9d38:	mov	r1, r3
    9d3c:	ldr	r0, [fp, #-8]
    9d40:	bl	9c94 <MyGame_Example_Monster_test4_add>
    9d44:	mov	r3, r0
    9d48:	mov	r0, r3
    9d4c:	sub	sp, fp, #4
    9d50:	pop	{fp, pc}

00009d54 <MyGame_Example_Monster_test4_clone>:
    9d54:	push	{fp, lr}
    9d58:	add	fp, sp, #4
    9d5c:	sub	sp, sp, #8
    9d60:	str	r0, [fp, #-8]
    9d64:	str	r1, [fp, #-12]
    9d68:	ldr	r1, [fp, #-12]
    9d6c:	ldr	r0, [fp, #-8]
    9d70:	bl	7664 <MyGame_Example_Test_vec_clone>
    9d74:	mov	r3, r0
    9d78:	mov	r1, r3
    9d7c:	ldr	r0, [fp, #-8]
    9d80:	bl	9c94 <MyGame_Example_Monster_test4_add>
    9d84:	mov	r3, r0
    9d88:	mov	r0, r3
    9d8c:	sub	sp, fp, #4
    9d90:	pop	{fp, pc}

00009d94 <MyGame_Example_Monster_test4_slice>:
    9d94:	push	{fp, lr}
    9d98:	add	fp, sp, #4
    9d9c:	sub	sp, sp, #16
    9da0:	str	r0, [fp, #-8]
    9da4:	str	r1, [fp, #-12]
    9da8:	str	r2, [fp, #-16]
    9dac:	str	r3, [fp, #-20]	; 0xffffffec
    9db0:	ldr	r3, [fp, #-20]	; 0xffffffec
    9db4:	ldr	r2, [fp, #-16]
    9db8:	ldr	r1, [fp, #-12]
    9dbc:	ldr	r0, [fp, #-8]
    9dc0:	bl	76b4 <MyGame_Example_Test_vec_slice>
    9dc4:	mov	r3, r0
    9dc8:	mov	r1, r3
    9dcc:	ldr	r0, [fp, #-8]
    9dd0:	bl	9c94 <MyGame_Example_Monster_test4_add>
    9dd4:	mov	r3, r0
    9dd8:	mov	r0, r3
    9ddc:	sub	sp, fp, #4
    9de0:	pop	{fp, pc}

00009de4 <MyGame_Example_Monster_test4_extend>:
    9de4:	push	{fp, lr}
    9de8:	add	fp, sp, #4
    9dec:	sub	sp, sp, #8
    9df0:	str	r0, [fp, #-8]
    9df4:	str	r1, [fp, #-12]
    9df8:	ldr	r1, [fp, #-12]
    9dfc:	ldr	r0, [fp, #-8]
    9e00:	bl	0 <flatcc_builder_extend_vector>
    9e04:	mov	r3, r0
    9e08:	mov	r0, r3
    9e0c:	sub	sp, fp, #4
    9e10:	pop	{fp, pc}

00009e14 <MyGame_Example_Monster_test4_truncate>:
    9e14:	push	{fp, lr}
    9e18:	add	fp, sp, #4
    9e1c:	sub	sp, sp, #8
    9e20:	str	r0, [fp, #-8]
    9e24:	str	r1, [fp, #-12]
    9e28:	ldr	r1, [fp, #-12]
    9e2c:	ldr	r0, [fp, #-8]
    9e30:	bl	0 <flatcc_builder_truncate_vector>
    9e34:	mov	r3, r0
    9e38:	mov	r0, r3
    9e3c:	sub	sp, fp, #4
    9e40:	pop	{fp, pc}

00009e44 <MyGame_Example_Monster_test4_edit>:
    9e44:	push	{fp, lr}
    9e48:	add	fp, sp, #4
    9e4c:	sub	sp, sp, #8
    9e50:	str	r0, [fp, #-8]
    9e54:	ldr	r0, [fp, #-8]
    9e58:	bl	0 <flatcc_builder_vector_edit>
    9e5c:	mov	r3, r0
    9e60:	mov	r0, r3
    9e64:	sub	sp, fp, #4
    9e68:	pop	{fp, pc}

00009e6c <MyGame_Example_Monster_test4_reserved_len>:
    9e6c:	push	{fp, lr}
    9e70:	add	fp, sp, #4
    9e74:	sub	sp, sp, #8
    9e78:	str	r0, [fp, #-8]
    9e7c:	ldr	r0, [fp, #-8]
    9e80:	bl	0 <flatcc_builder_vector_count>
    9e84:	mov	r3, r0
    9e88:	mov	r0, r3
    9e8c:	sub	sp, fp, #4
    9e90:	pop	{fp, pc}

00009e94 <MyGame_Example_Monster_test4_push>:
    9e94:	push	{fp, lr}
    9e98:	add	fp, sp, #4
    9e9c:	sub	sp, sp, #16
    9ea0:	str	r0, [fp, #-16]
    9ea4:	str	r1, [fp, #-20]	; 0xffffffec
    9ea8:	mov	r1, #1
    9eac:	ldr	r0, [fp, #-16]
    9eb0:	bl	0 <flatcc_builder_extend_vector>
    9eb4:	str	r0, [fp, #-8]
    9eb8:	ldr	r3, [fp, #-8]
    9ebc:	cmp	r3, #0
    9ec0:	beq	9ee4 <MyGame_Example_Monster_test4_push+0x50>
    9ec4:	bl	1d50 <MyGame_Example_Test__size>
    9ec8:	mov	r3, r0
    9ecc:	mov	r2, r3
    9ed0:	ldr	r1, [fp, #-20]	; 0xffffffec
    9ed4:	ldr	r0, [fp, #-8]
    9ed8:	bl	0 <memcpy>
    9edc:	ldr	r3, [fp, #-8]
    9ee0:	b	9ee8 <MyGame_Example_Monster_test4_push+0x54>
    9ee4:	mov	r3, #0
    9ee8:	mov	r0, r3
    9eec:	sub	sp, fp, #4
    9ef0:	pop	{fp, pc}

00009ef4 <MyGame_Example_Monster_test4_push_create>:
    9ef4:	push	{fp, lr}
    9ef8:	add	fp, sp, #4
    9efc:	sub	sp, sp, #16
    9f00:	str	r0, [fp, #-16]
    9f04:	mov	r3, r1
    9f08:	strh	r3, [fp, #-18]	; 0xffffffee
    9f0c:	mov	r3, r2
    9f10:	strb	r3, [fp, #-19]	; 0xffffffed
    9f14:	mov	r1, #1
    9f18:	ldr	r0, [fp, #-16]
    9f1c:	bl	0 <flatcc_builder_extend_vector>
    9f20:	str	r0, [fp, #-8]
    9f24:	ldr	r3, [fp, #-8]
    9f28:	cmp	r3, #0
    9f2c:	beq	9f4c <MyGame_Example_Monster_test4_push_create+0x58>
    9f30:	ldrsb	r2, [fp, #-19]	; 0xffffffed
    9f34:	ldrsh	r3, [fp, #-18]	; 0xffffffee
    9f38:	mov	r1, r3
    9f3c:	ldr	r0, [fp, #-8]
    9f40:	bl	7524 <MyGame_Example_Test_assign>
    9f44:	mov	r3, r0
    9f48:	b	9f50 <MyGame_Example_Monster_test4_push_create+0x5c>
    9f4c:	mov	r3, #0
    9f50:	mov	r0, r3
    9f54:	sub	sp, fp, #4
    9f58:	pop	{fp, pc}

00009f5c <MyGame_Example_Monster_testnestedflatbuffer_add>:
    9f5c:	push	{fp, lr}
    9f60:	add	fp, sp, #4
    9f64:	sub	sp, sp, #16
    9f68:	str	r0, [fp, #-16]
    9f6c:	str	r1, [fp, #-20]	; 0xffffffec
    9f70:	ldr	r3, [fp, #-20]	; 0xffffffec
    9f74:	cmp	r3, #0
    9f78:	beq	9fac <MyGame_Example_Monster_testnestedflatbuffer_add+0x50>
    9f7c:	mov	r1, #13
    9f80:	ldr	r0, [fp, #-16]
    9f84:	bl	0 <flatcc_builder_table_add_offset>
    9f88:	str	r0, [fp, #-8]
    9f8c:	ldr	r3, [fp, #-8]
    9f90:	cmp	r3, #0
    9f94:	beq	9fac <MyGame_Example_Monster_testnestedflatbuffer_add+0x50>
    9f98:	ldr	r3, [fp, #-8]
    9f9c:	ldr	r2, [fp, #-20]	; 0xffffffec
    9fa0:	str	r2, [r3]
    9fa4:	mov	r3, #0
    9fa8:	b	9fb0 <MyGame_Example_Monster_testnestedflatbuffer_add+0x54>
    9fac:	mvn	r3, #0
    9fb0:	mov	r0, r3
    9fb4:	sub	sp, fp, #4
    9fb8:	pop	{fp, pc}

00009fbc <MyGame_Example_Monster_testnestedflatbuffer_start_as_root>:
    9fbc:	push	{fp, lr}
    9fc0:	add	fp, sp, #4
    9fc4:	sub	sp, sp, #8
    9fc8:	str	r0, [fp, #-8]
    9fcc:	ldr	r1, [pc, #48]	; a004 <MyGame_Example_Monster_testnestedflatbuffer_start_as_root+0x48>
    9fd0:	ldr	r0, [fp, #-8]
    9fd4:	bl	7440 <flatbuffers_buffer_start>
    9fd8:	mov	r3, r0
    9fdc:	cmp	r3, #0
    9fe0:	bne	9ff4 <MyGame_Example_Monster_testnestedflatbuffer_start_as_root+0x38>
    9fe4:	ldr	r0, [fp, #-8]
    9fe8:	bl	802c <MyGame_Example_Monster_start>
    9fec:	mov	r3, r0
    9ff0:	b	9ff8 <MyGame_Example_Monster_testnestedflatbuffer_start_as_root+0x3c>
    9ff4:	mvn	r3, #0
    9ff8:	mov	r0, r3
    9ffc:	sub	sp, fp, #4
    a000:	pop	{fp, pc}
    a004:	.word	0x00000134

0000a008 <MyGame_Example_Monster_testnestedflatbuffer_end_as_root>:
    a008:	push	{fp, lr}
    a00c:	add	fp, sp, #4
    a010:	sub	sp, sp, #8
    a014:	str	r0, [fp, #-8]
    a018:	ldr	r0, [fp, #-8]
    a01c:	bl	8058 <MyGame_Example_Monster_end>
    a020:	mov	r3, r0
    a024:	mov	r1, r3
    a028:	ldr	r0, [fp, #-8]
    a02c:	bl	74b0 <flatbuffers_buffer_end>
    a030:	mov	r3, r0
    a034:	mov	r1, r3
    a038:	ldr	r0, [fp, #-8]
    a03c:	bl	9f5c <MyGame_Example_Monster_testnestedflatbuffer_add>
    a040:	mov	r3, r0
    a044:	mov	r0, r3
    a048:	sub	sp, fp, #4
    a04c:	pop	{fp, pc}

0000a050 <MyGame_Example_Monster_testnestedflatbuffer_nest>:
    a050:	push	{fp, lr}
    a054:	add	fp, sp, #4
    a058:	sub	sp, sp, #24
    a05c:	str	r0, [fp, #-8]
    a060:	str	r1, [fp, #-12]
    a064:	str	r2, [fp, #-16]
    a068:	strh	r3, [fp, #-18]	; 0xffffffee
    a06c:	ldrh	r3, [fp, #-18]	; 0xffffffee
    a070:	cmp	r3, #0
    a074:	beq	a080 <MyGame_Example_Monster_testnestedflatbuffer_nest+0x30>
    a078:	ldrh	r3, [fp, #-18]	; 0xffffffee
    a07c:	b	a084 <MyGame_Example_Monster_testnestedflatbuffer_nest+0x34>
    a080:	mov	r3, #8
    a084:	mvn	r2, #0
    a088:	str	r2, [sp, #4]
    a08c:	str	r3, [sp]
    a090:	mov	r3, #1
    a094:	ldr	r2, [fp, #-16]
    a098:	ldr	r1, [fp, #-12]
    a09c:	ldr	r0, [fp, #-8]
    a0a0:	bl	0 <flatcc_builder_create_vector>
    a0a4:	mov	r3, r0
    a0a8:	mov	r1, r3
    a0ac:	ldr	r0, [fp, #-8]
    a0b0:	bl	9f5c <MyGame_Example_Monster_testnestedflatbuffer_add>
    a0b4:	mov	r3, r0
    a0b8:	mov	r0, r3
    a0bc:	sub	sp, fp, #4
    a0c0:	pop	{fp, pc}

0000a0c4 <MyGame_Example_Monster_testempty_add>:
    a0c4:	push	{fp, lr}
    a0c8:	add	fp, sp, #4
    a0cc:	sub	sp, sp, #16
    a0d0:	str	r0, [fp, #-16]
    a0d4:	str	r1, [fp, #-20]	; 0xffffffec
    a0d8:	ldr	r3, [fp, #-20]	; 0xffffffec
    a0dc:	cmp	r3, #0
    a0e0:	beq	a114 <MyGame_Example_Monster_testempty_add+0x50>
    a0e4:	mov	r1, #14
    a0e8:	ldr	r0, [fp, #-16]
    a0ec:	bl	0 <flatcc_builder_table_add_offset>
    a0f0:	str	r0, [fp, #-8]
    a0f4:	ldr	r3, [fp, #-8]
    a0f8:	cmp	r3, #0
    a0fc:	beq	a114 <MyGame_Example_Monster_testempty_add+0x50>
    a100:	ldr	r3, [fp, #-8]
    a104:	ldr	r2, [fp, #-20]	; 0xffffffec
    a108:	str	r2, [r3]
    a10c:	mov	r3, #0
    a110:	b	a118 <MyGame_Example_Monster_testempty_add+0x54>
    a114:	mvn	r3, #0
    a118:	mov	r0, r3
    a11c:	sub	sp, fp, #4
    a120:	pop	{fp, pc}

0000a124 <MyGame_Example_Monster_testempty_start>:
    a124:	push	{fp, lr}
    a128:	add	fp, sp, #4
    a12c:	sub	sp, sp, #8
    a130:	str	r0, [fp, #-8]
    a134:	ldr	r0, [fp, #-8]
    a138:	bl	7f04 <MyGame_Example_Stat_start>
    a13c:	mov	r3, r0
    a140:	mov	r0, r3
    a144:	sub	sp, fp, #4
    a148:	pop	{fp, pc}

0000a14c <MyGame_Example_Monster_testempty_end>:
    a14c:	push	{fp, lr}
    a150:	add	fp, sp, #4
    a154:	sub	sp, sp, #8
    a158:	str	r0, [fp, #-8]
    a15c:	ldr	r0, [fp, #-8]
    a160:	bl	7f30 <MyGame_Example_Stat_end>
    a164:	mov	r3, r0
    a168:	mov	r1, r3
    a16c:	ldr	r0, [fp, #-8]
    a170:	bl	a0c4 <MyGame_Example_Monster_testempty_add>
    a174:	mov	r3, r0
    a178:	mov	r0, r3
    a17c:	sub	sp, fp, #4
    a180:	pop	{fp, pc}

0000a184 <MyGame_Example_Monster_testempty_create>:
    a184:	push	{fp, lr}
    a188:	add	fp, sp, #4
    a18c:	sub	sp, sp, #24
    a190:	str	r0, [fp, #-8]
    a194:	str	r1, [fp, #-12]
    a198:	strd	r2, [fp, #-20]	; 0xffffffec
    a19c:	ldrh	r3, [fp, #4]
    a1a0:	str	r3, [sp]
    a1a4:	ldrd	r2, [fp, #-20]	; 0xffffffec
    a1a8:	ldr	r1, [fp, #-12]
    a1ac:	ldr	r0, [fp, #-8]
    a1b0:	bl	8b2c <MyGame_Example_Stat_create>
    a1b4:	mov	r3, r0
    a1b8:	mov	r1, r3
    a1bc:	ldr	r0, [fp, #-8]
    a1c0:	bl	a0c4 <MyGame_Example_Monster_testempty_add>
    a1c4:	mov	r3, r0
    a1c8:	mov	r0, r3
    a1cc:	sub	sp, fp, #4
    a1d0:	pop	{fp, pc}

0000a1d4 <MyGame_Example_Monster_testbool_add>:
    a1d4:	push	{fp, lr}
    a1d8:	add	fp, sp, #4
    a1dc:	sub	sp, sp, #16
    a1e0:	str	r0, [fp, #-16]
    a1e4:	mov	r3, r1
    a1e8:	strb	r3, [fp, #-17]	; 0xffffffef
    a1ec:	ldrb	r3, [fp, #-17]	; 0xffffffef
    a1f0:	cmp	r3, #1
    a1f4:	bne	a200 <MyGame_Example_Monster_testbool_add+0x2c>
    a1f8:	mov	r3, #0
    a1fc:	b	a240 <MyGame_Example_Monster_testbool_add+0x6c>
    a200:	mov	r3, #1
    a204:	mov	r2, #1
    a208:	mov	r1, #15
    a20c:	ldr	r0, [fp, #-16]
    a210:	bl	0 <flatcc_builder_table_add>
    a214:	str	r0, [fp, #-8]
    a218:	ldr	r3, [fp, #-8]
    a21c:	cmp	r3, #0
    a220:	bne	a22c <MyGame_Example_Monster_testbool_add+0x58>
    a224:	mvn	r3, #0
    a228:	b	a240 <MyGame_Example_Monster_testbool_add+0x6c>
    a22c:	ldrb	r3, [fp, #-17]	; 0xffffffef
    a230:	mov	r1, r3
    a234:	ldr	r0, [fp, #-8]
    a238:	bl	6dec <flatbuffers_bool_assign_to_pe>
    a23c:	mov	r3, #0
    a240:	mov	r0, r3
    a244:	sub	sp, fp, #4
    a248:	pop	{fp, pc}

0000a24c <MyGame_Example_Monster_vec_push_start>:
    a24c:	push	{fp, lr}
    a250:	add	fp, sp, #4
    a254:	sub	sp, sp, #8
    a258:	str	r0, [fp, #-8]
    a25c:	ldr	r0, [fp, #-8]
    a260:	bl	802c <MyGame_Example_Monster_start>
    a264:	mov	r3, r0
    a268:	mov	r0, r3
    a26c:	sub	sp, fp, #4
    a270:	pop	{fp, pc}

0000a274 <MyGame_Example_Monster_vec_push_end>:
    a274:	push	{fp, lr}
    a278:	add	fp, sp, #4
    a27c:	sub	sp, sp, #8
    a280:	str	r0, [fp, #-8]
    a284:	ldr	r0, [fp, #-8]
    a288:	bl	8058 <MyGame_Example_Monster_end>
    a28c:	mov	r3, r0
    a290:	mov	r1, r3
    a294:	ldr	r0, [fp, #-8]
    a298:	bl	80c0 <MyGame_Example_Monster_vec_push>
    a29c:	mov	r3, r0
    a2a0:	mov	r0, r3
    a2a4:	sub	sp, fp, #4
    a2a8:	pop	{fp, pc}

0000a2ac <MyGame_Example_Monster_start_as_root>:
    a2ac:	push	{fp, lr}
    a2b0:	add	fp, sp, #4
    a2b4:	sub	sp, sp, #8
    a2b8:	str	r0, [fp, #-8]
    a2bc:	ldr	r1, [pc, #48]	; a2f4 <MyGame_Example_Monster_start_as_root+0x48>
    a2c0:	ldr	r0, [fp, #-8]
    a2c4:	bl	7440 <flatbuffers_buffer_start>
    a2c8:	mov	r3, r0
    a2cc:	cmp	r3, #0
    a2d0:	bne	a2e4 <MyGame_Example_Monster_start_as_root+0x38>
    a2d4:	ldr	r0, [fp, #-8]
    a2d8:	bl	802c <MyGame_Example_Monster_start>
    a2dc:	mov	r3, r0
    a2e0:	b	a2e8 <MyGame_Example_Monster_start_as_root+0x3c>
    a2e4:	mvn	r3, #0
    a2e8:	mov	r0, r3
    a2ec:	sub	sp, fp, #4
    a2f0:	pop	{fp, pc}
    a2f4:	.word	0x00000134

0000a2f8 <MyGame_Example_Monster_start_as_root_with_size>:
    a2f8:	push	{fp, lr}
    a2fc:	add	fp, sp, #4
    a300:	sub	sp, sp, #8
    a304:	str	r0, [fp, #-8]
    a308:	ldr	r1, [pc, #48]	; a340 <MyGame_Example_Monster_start_as_root_with_size+0x48>
    a30c:	ldr	r0, [fp, #-8]
    a310:	bl	7478 <flatbuffers_buffer_start_with_size>
    a314:	mov	r3, r0
    a318:	cmp	r3, #0
    a31c:	bne	a330 <MyGame_Example_Monster_start_as_root_with_size+0x38>
    a320:	ldr	r0, [fp, #-8]
    a324:	bl	802c <MyGame_Example_Monster_start>
    a328:	mov	r3, r0
    a32c:	b	a334 <MyGame_Example_Monster_start_as_root_with_size+0x3c>
    a330:	mvn	r3, #0
    a334:	mov	r0, r3
    a338:	sub	sp, fp, #4
    a33c:	pop	{fp, pc}
    a340:	.word	0x00000134

0000a344 <MyGame_Example_Monster_end_as_root>:
    a344:	push	{fp, lr}
    a348:	add	fp, sp, #4
    a34c:	sub	sp, sp, #8
    a350:	str	r0, [fp, #-8]
    a354:	ldr	r0, [fp, #-8]
    a358:	bl	8058 <MyGame_Example_Monster_end>
    a35c:	mov	r3, r0
    a360:	mov	r1, r3
    a364:	ldr	r0, [fp, #-8]
    a368:	bl	74b0 <flatbuffers_buffer_end>
    a36c:	mov	r3, r0
    a370:	mov	r0, r3
    a374:	sub	sp, fp, #4
    a378:	pop	{fp, pc}

0000a37c <MyGame_Example_TypeAliases_i8_add>:
    a37c:	push	{fp, lr}
    a380:	add	fp, sp, #4
    a384:	sub	sp, sp, #16
    a388:	str	r0, [fp, #-16]
    a38c:	mov	r3, r1
    a390:	strb	r3, [fp, #-17]	; 0xffffffef
    a394:	ldrsb	r3, [fp, #-17]	; 0xffffffef
    a398:	cmp	r3, #0
    a39c:	bne	a3a8 <MyGame_Example_TypeAliases_i8_add+0x2c>
    a3a0:	mov	r3, #0
    a3a4:	b	a3e8 <MyGame_Example_TypeAliases_i8_add+0x6c>
    a3a8:	mov	r3, #1
    a3ac:	mov	r2, #1
    a3b0:	mov	r1, #0
    a3b4:	ldr	r0, [fp, #-16]
    a3b8:	bl	0 <flatcc_builder_table_add>
    a3bc:	str	r0, [fp, #-8]
    a3c0:	ldr	r3, [fp, #-8]
    a3c4:	cmp	r3, #0
    a3c8:	bne	a3d4 <MyGame_Example_TypeAliases_i8_add+0x58>
    a3cc:	mvn	r3, #0
    a3d0:	b	a3e8 <MyGame_Example_TypeAliases_i8_add+0x6c>
    a3d4:	ldrsb	r3, [fp, #-17]	; 0xffffffef
    a3d8:	mov	r1, r3
    a3dc:	ldr	r0, [fp, #-8]
    a3e0:	bl	6da8 <flatbuffers_int8_assign_to_pe>
    a3e4:	mov	r3, #0
    a3e8:	mov	r0, r3
    a3ec:	sub	sp, fp, #4
    a3f0:	pop	{fp, pc}

0000a3f4 <MyGame_Example_TypeAliases_u8_add>:
    a3f4:	push	{fp, lr}
    a3f8:	add	fp, sp, #4
    a3fc:	sub	sp, sp, #16
    a400:	str	r0, [fp, #-16]
    a404:	mov	r3, r1
    a408:	strb	r3, [fp, #-17]	; 0xffffffef
    a40c:	ldrb	r3, [fp, #-17]	; 0xffffffef
    a410:	cmp	r3, #0
    a414:	bne	a420 <MyGame_Example_TypeAliases_u8_add+0x2c>
    a418:	mov	r3, #0
    a41c:	b	a460 <MyGame_Example_TypeAliases_u8_add+0x6c>
    a420:	mov	r3, #1
    a424:	mov	r2, #1
    a428:	mov	r1, #1
    a42c:	ldr	r0, [fp, #-16]
    a430:	bl	0 <flatcc_builder_table_add>
    a434:	str	r0, [fp, #-8]
    a438:	ldr	r3, [fp, #-8]
    a43c:	cmp	r3, #0
    a440:	bne	a44c <MyGame_Example_TypeAliases_u8_add+0x58>
    a444:	mvn	r3, #0
    a448:	b	a460 <MyGame_Example_TypeAliases_u8_add+0x6c>
    a44c:	ldrb	r3, [fp, #-17]	; 0xffffffef
    a450:	mov	r1, r3
    a454:	ldr	r0, [fp, #-8]
    a458:	bl	6d18 <flatbuffers_uint8_assign_to_pe>
    a45c:	mov	r3, #0
    a460:	mov	r0, r3
    a464:	sub	sp, fp, #4
    a468:	pop	{fp, pc}

0000a46c <MyGame_Example_TypeAliases_i16_add>:
    a46c:	push	{fp, lr}
    a470:	add	fp, sp, #4
    a474:	sub	sp, sp, #16
    a478:	str	r0, [fp, #-16]
    a47c:	mov	r3, r1
    a480:	strh	r3, [fp, #-18]	; 0xffffffee
    a484:	ldrsh	r3, [fp, #-18]	; 0xffffffee
    a488:	cmp	r3, #0
    a48c:	bne	a498 <MyGame_Example_TypeAliases_i16_add+0x2c>
    a490:	mov	r3, #0
    a494:	b	a4d8 <MyGame_Example_TypeAliases_i16_add+0x6c>
    a498:	mov	r3, #2
    a49c:	mov	r2, #2
    a4a0:	mov	r1, #2
    a4a4:	ldr	r0, [fp, #-16]
    a4a8:	bl	0 <flatcc_builder_table_add>
    a4ac:	str	r0, [fp, #-8]
    a4b0:	ldr	r3, [fp, #-8]
    a4b4:	cmp	r3, #0
    a4b8:	bne	a4c4 <MyGame_Example_TypeAliases_i16_add+0x58>
    a4bc:	mvn	r3, #0
    a4c0:	b	a4d8 <MyGame_Example_TypeAliases_i16_add+0x6c>
    a4c4:	ldrsh	r3, [fp, #-18]	; 0xffffffee
    a4c8:	mov	r1, r3
    a4cc:	ldr	r0, [fp, #-8]
    a4d0:	bl	70cc <flatbuffers_int16_assign_to_pe>
    a4d4:	mov	r3, #0
    a4d8:	mov	r0, r3
    a4dc:	sub	sp, fp, #4
    a4e0:	pop	{fp, pc}

0000a4e4 <MyGame_Example_TypeAliases_u16_add>:
    a4e4:	push	{fp, lr}
    a4e8:	add	fp, sp, #4
    a4ec:	sub	sp, sp, #16
    a4f0:	str	r0, [fp, #-16]
    a4f4:	mov	r3, r1
    a4f8:	strh	r3, [fp, #-18]	; 0xffffffee
    a4fc:	ldrh	r3, [fp, #-18]	; 0xffffffee
    a500:	cmp	r3, #0
    a504:	bne	a510 <MyGame_Example_TypeAliases_u16_add+0x2c>
    a508:	mov	r3, #0
    a50c:	b	a550 <MyGame_Example_TypeAliases_u16_add+0x6c>
    a510:	mov	r3, #2
    a514:	mov	r2, #2
    a518:	mov	r1, #3
    a51c:	ldr	r0, [fp, #-16]
    a520:	bl	0 <flatcc_builder_table_add>
    a524:	str	r0, [fp, #-8]
    a528:	ldr	r3, [fp, #-8]
    a52c:	cmp	r3, #0
    a530:	bne	a53c <MyGame_Example_TypeAliases_u16_add+0x58>
    a534:	mvn	r3, #0
    a538:	b	a550 <MyGame_Example_TypeAliases_u16_add+0x6c>
    a53c:	ldrh	r3, [fp, #-18]	; 0xffffffee
    a540:	mov	r1, r3
    a544:	ldr	r0, [fp, #-8]
    a548:	bl	6fd0 <flatbuffers_uint16_assign_to_pe>
    a54c:	mov	r3, #0
    a550:	mov	r0, r3
    a554:	sub	sp, fp, #4
    a558:	pop	{fp, pc}

0000a55c <MyGame_Example_TypeAliases_i32_add>:
    a55c:	push	{fp, lr}
    a560:	add	fp, sp, #4
    a564:	sub	sp, sp, #16
    a568:	str	r0, [fp, #-16]
    a56c:	str	r1, [fp, #-20]	; 0xffffffec
    a570:	ldr	r3, [fp, #-20]	; 0xffffffec
    a574:	cmp	r3, #0
    a578:	bne	a584 <MyGame_Example_TypeAliases_i32_add+0x28>
    a57c:	mov	r3, #0
    a580:	b	a5c0 <MyGame_Example_TypeAliases_i32_add+0x64>
    a584:	mov	r3, #4
    a588:	mov	r2, #4
    a58c:	mov	r1, #4
    a590:	ldr	r0, [fp, #-16]
    a594:	bl	0 <flatcc_builder_table_add>
    a598:	str	r0, [fp, #-8]
    a59c:	ldr	r3, [fp, #-8]
    a5a0:	cmp	r3, #0
    a5a4:	bne	a5b0 <MyGame_Example_TypeAliases_i32_add+0x54>
    a5a8:	mvn	r3, #0
    a5ac:	b	a5c0 <MyGame_Example_TypeAliases_i32_add+0x64>
    a5b0:	ldr	r1, [fp, #-20]	; 0xffffffec
    a5b4:	ldr	r0, [fp, #-8]
    a5b8:	bl	7110 <flatbuffers_int32_assign_to_pe>
    a5bc:	mov	r3, #0
    a5c0:	mov	r0, r3
    a5c4:	sub	sp, fp, #4
    a5c8:	pop	{fp, pc}

0000a5cc <MyGame_Example_TypeAliases_u32_add>:
    a5cc:	push	{fp, lr}
    a5d0:	add	fp, sp, #4
    a5d4:	sub	sp, sp, #16
    a5d8:	str	r0, [fp, #-16]
    a5dc:	str	r1, [fp, #-20]	; 0xffffffec
    a5e0:	ldr	r3, [fp, #-20]	; 0xffffffec
    a5e4:	cmp	r3, #0
    a5e8:	bne	a5f4 <MyGame_Example_TypeAliases_u32_add+0x28>
    a5ec:	mov	r3, #0
    a5f0:	b	a630 <MyGame_Example_TypeAliases_u32_add+0x64>
    a5f4:	mov	r3, #4
    a5f8:	mov	r2, #4
    a5fc:	mov	r1, #5
    a600:	ldr	r0, [fp, #-16]
    a604:	bl	0 <flatcc_builder_table_add>
    a608:	str	r0, [fp, #-8]
    a60c:	ldr	r3, [fp, #-8]
    a610:	cmp	r3, #0
    a614:	bne	a620 <MyGame_Example_TypeAliases_u32_add+0x54>
    a618:	mvn	r3, #0
    a61c:	b	a630 <MyGame_Example_TypeAliases_u32_add+0x64>
    a620:	ldr	r1, [fp, #-20]	; 0xffffffec
    a624:	ldr	r0, [fp, #-8]
    a628:	bl	7014 <flatbuffers_uint32_assign_to_pe>
    a62c:	mov	r3, #0
    a630:	mov	r0, r3
    a634:	sub	sp, fp, #4
    a638:	pop	{fp, pc}

0000a63c <MyGame_Example_TypeAliases_i64_add>:
    a63c:	push	{fp, lr}
    a640:	add	fp, sp, #4
    a644:	sub	sp, sp, #24
    a648:	str	r0, [fp, #-16]
    a64c:	strd	r2, [fp, #-28]	; 0xffffffe4
    a650:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    a654:	orrs	r3, r2, r3
    a658:	bne	a664 <MyGame_Example_TypeAliases_i64_add+0x28>
    a65c:	mov	r3, #0
    a660:	b	a6a0 <MyGame_Example_TypeAliases_i64_add+0x64>
    a664:	mov	r3, #8
    a668:	mov	r2, #8
    a66c:	mov	r1, #6
    a670:	ldr	r0, [fp, #-16]
    a674:	bl	0 <flatcc_builder_table_add>
    a678:	str	r0, [fp, #-8]
    a67c:	ldr	r3, [fp, #-8]
    a680:	cmp	r3, #0
    a684:	bne	a690 <MyGame_Example_TypeAliases_i64_add+0x54>
    a688:	mvn	r3, #0
    a68c:	b	a6a0 <MyGame_Example_TypeAliases_i64_add+0x64>
    a690:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    a694:	ldr	r0, [fp, #-8]
    a698:	bl	7148 <flatbuffers_int64_assign_to_pe>
    a69c:	mov	r3, #0
    a6a0:	mov	r0, r3
    a6a4:	sub	sp, fp, #4
    a6a8:	pop	{fp, pc}

0000a6ac <MyGame_Example_TypeAliases_u64_add>:
    a6ac:	push	{fp, lr}
    a6b0:	add	fp, sp, #4
    a6b4:	sub	sp, sp, #24
    a6b8:	str	r0, [fp, #-16]
    a6bc:	strd	r2, [fp, #-28]	; 0xffffffe4
    a6c0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    a6c4:	orrs	r3, r2, r3
    a6c8:	bne	a6d4 <MyGame_Example_TypeAliases_u64_add+0x28>
    a6cc:	mov	r3, #0
    a6d0:	b	a710 <MyGame_Example_TypeAliases_u64_add+0x64>
    a6d4:	mov	r3, #8
    a6d8:	mov	r2, #8
    a6dc:	mov	r1, #7
    a6e0:	ldr	r0, [fp, #-16]
    a6e4:	bl	0 <flatcc_builder_table_add>
    a6e8:	str	r0, [fp, #-8]
    a6ec:	ldr	r3, [fp, #-8]
    a6f0:	cmp	r3, #0
    a6f4:	bne	a700 <MyGame_Example_TypeAliases_u64_add+0x54>
    a6f8:	mvn	r3, #0
    a6fc:	b	a710 <MyGame_Example_TypeAliases_u64_add+0x64>
    a700:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    a704:	ldr	r0, [fp, #-8]
    a708:	bl	704c <flatbuffers_uint64_assign_to_pe>
    a70c:	mov	r3, #0
    a710:	mov	r0, r3
    a714:	sub	sp, fp, #4
    a718:	pop	{fp, pc}

0000a71c <MyGame_Example_TypeAliases_f32_add>:
    a71c:	push	{fp, lr}
    a720:	add	fp, sp, #4
    a724:	sub	sp, sp, #16
    a728:	str	r0, [fp, #-16]
    a72c:	vstr	s0, [fp, #-20]	; 0xffffffec
    a730:	vldr	s15, [fp, #-20]	; 0xffffffec
    a734:	vcmp.f32	s15, #0.0
    a738:	vmrs	APSR_nzcv, fpscr
    a73c:	bne	a748 <MyGame_Example_TypeAliases_f32_add+0x2c>
    a740:	mov	r3, #0
    a744:	b	a784 <MyGame_Example_TypeAliases_f32_add+0x68>
    a748:	mov	r3, #4
    a74c:	mov	r2, #4
    a750:	mov	r1, #8
    a754:	ldr	r0, [fp, #-16]
    a758:	bl	0 <flatcc_builder_table_add>
    a75c:	str	r0, [fp, #-8]
    a760:	ldr	r3, [fp, #-8]
    a764:	cmp	r3, #0
    a768:	bne	a774 <MyGame_Example_TypeAliases_f32_add+0x58>
    a76c:	mvn	r3, #0
    a770:	b	a784 <MyGame_Example_TypeAliases_f32_add+0x68>
    a774:	vldr	s0, [fp, #-20]	; 0xffffffec
    a778:	ldr	r0, [fp, #-8]
    a77c:	bl	71c4 <flatbuffers_float_assign_to_pe>
    a780:	mov	r3, #0
    a784:	mov	r0, r3
    a788:	sub	sp, fp, #4
    a78c:	pop	{fp, pc}

0000a790 <MyGame_Example_TypeAliases_f64_add>:
    a790:	push	{fp, lr}
    a794:	add	fp, sp, #4
    a798:	sub	sp, sp, #24
    a79c:	str	r0, [fp, #-16]
    a7a0:	vstr	d0, [fp, #-28]	; 0xffffffe4
    a7a4:	vldr	d7, [fp, #-28]	; 0xffffffe4
    a7a8:	vcmp.f64	d7, #0.0
    a7ac:	vmrs	APSR_nzcv, fpscr
    a7b0:	bne	a7bc <MyGame_Example_TypeAliases_f64_add+0x2c>
    a7b4:	mov	r3, #0
    a7b8:	b	a7f8 <MyGame_Example_TypeAliases_f64_add+0x68>
    a7bc:	mov	r3, #8
    a7c0:	mov	r2, #8
    a7c4:	mov	r1, #9
    a7c8:	ldr	r0, [fp, #-16]
    a7cc:	bl	0 <flatcc_builder_table_add>
    a7d0:	str	r0, [fp, #-8]
    a7d4:	ldr	r3, [fp, #-8]
    a7d8:	cmp	r3, #0
    a7dc:	bne	a7e8 <MyGame_Example_TypeAliases_f64_add+0x58>
    a7e0:	mvn	r3, #0
    a7e4:	b	a7f8 <MyGame_Example_TypeAliases_f64_add+0x68>
    a7e8:	vldr	d0, [fp, #-28]	; 0xffffffe4
    a7ec:	ldr	r0, [fp, #-8]
    a7f0:	bl	723c <flatbuffers_double_assign_to_pe>
    a7f4:	mov	r3, #0
    a7f8:	mov	r0, r3
    a7fc:	sub	sp, fp, #4
    a800:	pop	{fp, pc}

0000a804 <MyGame_Example_TypeAliases_v8_add>:
    a804:	push	{fp, lr}
    a808:	add	fp, sp, #4
    a80c:	sub	sp, sp, #16
    a810:	str	r0, [fp, #-16]
    a814:	str	r1, [fp, #-20]	; 0xffffffec
    a818:	ldr	r3, [fp, #-20]	; 0xffffffec
    a81c:	cmp	r3, #0
    a820:	beq	a854 <MyGame_Example_TypeAliases_v8_add+0x50>
    a824:	mov	r1, #10
    a828:	ldr	r0, [fp, #-16]
    a82c:	bl	0 <flatcc_builder_table_add_offset>
    a830:	str	r0, [fp, #-8]
    a834:	ldr	r3, [fp, #-8]
    a838:	cmp	r3, #0
    a83c:	beq	a854 <MyGame_Example_TypeAliases_v8_add+0x50>
    a840:	ldr	r3, [fp, #-8]
    a844:	ldr	r2, [fp, #-20]	; 0xffffffec
    a848:	str	r2, [r3]
    a84c:	mov	r3, #0
    a850:	b	a858 <MyGame_Example_TypeAliases_v8_add+0x54>
    a854:	mvn	r3, #0
    a858:	mov	r0, r3
    a85c:	sub	sp, fp, #4
    a860:	pop	{fp, pc}

0000a864 <MyGame_Example_TypeAliases_vf64_add>:
    a864:	push	{fp, lr}
    a868:	add	fp, sp, #4
    a86c:	sub	sp, sp, #16
    a870:	str	r0, [fp, #-16]
    a874:	str	r1, [fp, #-20]	; 0xffffffec
    a878:	ldr	r3, [fp, #-20]	; 0xffffffec
    a87c:	cmp	r3, #0
    a880:	beq	a8b4 <MyGame_Example_TypeAliases_vf64_add+0x50>
    a884:	mov	r1, #11
    a888:	ldr	r0, [fp, #-16]
    a88c:	bl	0 <flatcc_builder_table_add_offset>
    a890:	str	r0, [fp, #-8]
    a894:	ldr	r3, [fp, #-8]
    a898:	cmp	r3, #0
    a89c:	beq	a8b4 <MyGame_Example_TypeAliases_vf64_add+0x50>
    a8a0:	ldr	r3, [fp, #-8]
    a8a4:	ldr	r2, [fp, #-20]	; 0xffffffec
    a8a8:	str	r2, [r3]
    a8ac:	mov	r3, #0
    a8b0:	b	a8b8 <MyGame_Example_TypeAliases_vf64_add+0x54>
    a8b4:	mvn	r3, #0
    a8b8:	mov	r0, r3
    a8bc:	sub	sp, fp, #4
    a8c0:	pop	{fp, pc}

0000a8c4 <MyGame_Example_TypeAliases_create>:
    a8c4:	push	{fp, lr}
    a8c8:	add	fp, sp, #4
    a8cc:	sub	sp, sp, #24
    a8d0:	str	r0, [fp, #-8]
    a8d4:	mov	r0, r1
    a8d8:	mov	r1, r2
    a8dc:	vstr	s0, [fp, #-16]
    a8e0:	vstr	d1, [fp, #-28]	; 0xffffffe4
    a8e4:	mov	r2, r0
    a8e8:	strb	r2, [fp, #-9]
    a8ec:	mov	r2, r1
    a8f0:	strb	r2, [fp, #-10]
    a8f4:	strh	r3, [fp, #-12]
    a8f8:	ldr	r0, [fp, #-8]
    a8fc:	bl	8104 <MyGame_Example_TypeAliases_start>
    a900:	mov	r3, r0
    a904:	cmp	r3, #0
    a908:	bne	aa3c <MyGame_Example_TypeAliases_create+0x178>
    a90c:	ldrd	r2, [fp, #20]
    a910:	ldr	r0, [fp, #-8]
    a914:	bl	a63c <MyGame_Example_TypeAliases_i64_add>
    a918:	mov	r3, r0
    a91c:	cmp	r3, #0
    a920:	bne	aa3c <MyGame_Example_TypeAliases_create+0x178>
    a924:	ldrd	r2, [fp, #28]
    a928:	ldr	r0, [fp, #-8]
    a92c:	bl	a6ac <MyGame_Example_TypeAliases_u64_add>
    a930:	mov	r3, r0
    a934:	cmp	r3, #0
    a938:	bne	aa3c <MyGame_Example_TypeAliases_create+0x178>
    a93c:	vldr	d0, [fp, #-28]	; 0xffffffe4
    a940:	ldr	r0, [fp, #-8]
    a944:	bl	a790 <MyGame_Example_TypeAliases_f64_add>
    a948:	mov	r3, r0
    a94c:	cmp	r3, #0
    a950:	bne	aa3c <MyGame_Example_TypeAliases_create+0x178>
    a954:	ldr	r1, [fp, #8]
    a958:	ldr	r0, [fp, #-8]
    a95c:	bl	a55c <MyGame_Example_TypeAliases_i32_add>
    a960:	mov	r3, r0
    a964:	cmp	r3, #0
    a968:	bne	aa3c <MyGame_Example_TypeAliases_create+0x178>
    a96c:	ldr	r1, [fp, #12]
    a970:	ldr	r0, [fp, #-8]
    a974:	bl	a5cc <MyGame_Example_TypeAliases_u32_add>
    a978:	mov	r3, r0
    a97c:	cmp	r3, #0
    a980:	bne	aa3c <MyGame_Example_TypeAliases_create+0x178>
    a984:	vldr	s0, [fp, #-16]
    a988:	ldr	r0, [fp, #-8]
    a98c:	bl	a71c <MyGame_Example_TypeAliases_f32_add>
    a990:	mov	r3, r0
    a994:	cmp	r3, #0
    a998:	bne	aa3c <MyGame_Example_TypeAliases_create+0x178>
    a99c:	ldr	r1, [fp, #36]	; 0x24
    a9a0:	ldr	r0, [fp, #-8]
    a9a4:	bl	a804 <MyGame_Example_TypeAliases_v8_add>
    a9a8:	mov	r3, r0
    a9ac:	cmp	r3, #0
    a9b0:	bne	aa3c <MyGame_Example_TypeAliases_create+0x178>
    a9b4:	ldr	r1, [fp, #40]	; 0x28
    a9b8:	ldr	r0, [fp, #-8]
    a9bc:	bl	a864 <MyGame_Example_TypeAliases_vf64_add>
    a9c0:	mov	r3, r0
    a9c4:	cmp	r3, #0
    a9c8:	bne	aa3c <MyGame_Example_TypeAliases_create+0x178>
    a9cc:	ldrsh	r3, [fp, #-12]
    a9d0:	mov	r1, r3
    a9d4:	ldr	r0, [fp, #-8]
    a9d8:	bl	a46c <MyGame_Example_TypeAliases_i16_add>
    a9dc:	mov	r3, r0
    a9e0:	cmp	r3, #0
    a9e4:	bne	aa3c <MyGame_Example_TypeAliases_create+0x178>
    a9e8:	ldrh	r3, [fp, #4]
    a9ec:	mov	r1, r3
    a9f0:	ldr	r0, [fp, #-8]
    a9f4:	bl	a4e4 <MyGame_Example_TypeAliases_u16_add>
    a9f8:	mov	r3, r0
    a9fc:	cmp	r3, #0
    aa00:	bne	aa3c <MyGame_Example_TypeAliases_create+0x178>
    aa04:	ldrsb	r3, [fp, #-9]
    aa08:	mov	r1, r3
    aa0c:	ldr	r0, [fp, #-8]
    aa10:	bl	a37c <MyGame_Example_TypeAliases_i8_add>
    aa14:	mov	r3, r0
    aa18:	cmp	r3, #0
    aa1c:	bne	aa3c <MyGame_Example_TypeAliases_create+0x178>
    aa20:	ldrb	r3, [fp, #-10]
    aa24:	mov	r1, r3
    aa28:	ldr	r0, [fp, #-8]
    aa2c:	bl	a3f4 <MyGame_Example_TypeAliases_u8_add>
    aa30:	mov	r3, r0
    aa34:	cmp	r3, #0
    aa38:	beq	aa44 <MyGame_Example_TypeAliases_create+0x180>
    aa3c:	mov	r3, #0
    aa40:	b	aa50 <MyGame_Example_TypeAliases_create+0x18c>
    aa44:	ldr	r0, [fp, #-8]
    aa48:	bl	8130 <MyGame_Example_TypeAliases_end>
    aa4c:	mov	r3, r0
    aa50:	mov	r0, r3
    aa54:	sub	sp, fp, #4
    aa58:	pop	{fp, pc}

0000aa5c <MyGame_Example_TypeAliases_create_as_root>:
    aa5c:	push	{fp, lr}
    aa60:	add	fp, sp, #4
    aa64:	sub	sp, sp, #64	; 0x40
    aa68:	str	r0, [fp, #-8]
    aa6c:	mov	r0, r1
    aa70:	mov	r1, r2
    aa74:	vstr	s0, [fp, #-16]
    aa78:	vstr	d1, [fp, #-28]	; 0xffffffe4
    aa7c:	mov	r2, r0
    aa80:	strb	r2, [fp, #-9]
    aa84:	mov	r2, r1
    aa88:	strb	r2, [fp, #-10]
    aa8c:	strh	r3, [fp, #-12]
    aa90:	ldr	r1, [pc, #148]	; ab2c <MyGame_Example_TypeAliases_create_as_root+0xd0>
    aa94:	ldr	r0, [fp, #-8]
    aa98:	bl	7440 <flatbuffers_buffer_start>
    aa9c:	mov	r3, r0
    aaa0:	cmp	r3, #0
    aaa4:	beq	aab0 <MyGame_Example_TypeAliases_create_as_root+0x54>
    aaa8:	mov	r3, #0
    aaac:	b	ab20 <MyGame_Example_TypeAliases_create_as_root+0xc4>
    aab0:	ldrsh	ip, [fp, #-12]
    aab4:	ldrb	r0, [fp, #-10]
    aab8:	ldrsb	r1, [fp, #-9]
    aabc:	ldr	r3, [fp, #40]	; 0x28
    aac0:	str	r3, [sp, #36]	; 0x24
    aac4:	ldr	r3, [fp, #36]	; 0x24
    aac8:	str	r3, [sp, #32]
    aacc:	ldrd	r2, [fp, #28]
    aad0:	strd	r2, [sp, #24]
    aad4:	ldrd	r2, [fp, #20]
    aad8:	strd	r2, [sp, #16]
    aadc:	ldr	r3, [fp, #12]
    aae0:	str	r3, [sp, #8]
    aae4:	ldr	r3, [fp, #8]
    aae8:	str	r3, [sp, #4]
    aaec:	ldrh	r3, [fp, #4]
    aaf0:	str	r3, [sp]
    aaf4:	vldr	d1, [fp, #-28]	; 0xffffffe4
    aaf8:	vldr	s0, [fp, #-16]
    aafc:	mov	r3, ip
    ab00:	mov	r2, r0
    ab04:	ldr	r0, [fp, #-8]
    ab08:	bl	a8c4 <MyGame_Example_TypeAliases_create>
    ab0c:	mov	r3, r0
    ab10:	mov	r1, r3
    ab14:	ldr	r0, [fp, #-8]
    ab18:	bl	74b0 <flatbuffers_buffer_end>
    ab1c:	mov	r3, r0
    ab20:	mov	r0, r3
    ab24:	sub	sp, fp, #4
    ab28:	pop	{fp, pc}
    ab2c:	.word	0x00000134

0000ab30 <Fantasy_Attacker_sword_attack_damage_add>:
    ab30:	push	{fp, lr}
    ab34:	add	fp, sp, #4
    ab38:	sub	sp, sp, #16
    ab3c:	str	r0, [fp, #-16]
    ab40:	str	r1, [fp, #-20]	; 0xffffffec
    ab44:	ldr	r3, [fp, #-20]	; 0xffffffec
    ab48:	cmp	r3, #0
    ab4c:	bne	ab58 <Fantasy_Attacker_sword_attack_damage_add+0x28>
    ab50:	mov	r3, #0
    ab54:	b	ab94 <Fantasy_Attacker_sword_attack_damage_add+0x64>
    ab58:	mov	r3, #4
    ab5c:	mov	r2, #4
    ab60:	mov	r1, #0
    ab64:	ldr	r0, [fp, #-16]
    ab68:	bl	0 <flatcc_builder_table_add>
    ab6c:	str	r0, [fp, #-8]
    ab70:	ldr	r3, [fp, #-8]
    ab74:	cmp	r3, #0
    ab78:	bne	ab84 <Fantasy_Attacker_sword_attack_damage_add+0x54>
    ab7c:	mvn	r3, #0
    ab80:	b	ab94 <Fantasy_Attacker_sword_attack_damage_add+0x64>
    ab84:	ldr	r1, [fp, #-20]	; 0xffffffec
    ab88:	ldr	r0, [fp, #-8]
    ab8c:	bl	7110 <flatbuffers_int32_assign_to_pe>
    ab90:	mov	r3, #0
    ab94:	mov	r0, r3
    ab98:	sub	sp, fp, #4
    ab9c:	pop	{fp, pc}

0000aba0 <Fantasy_Attacker_create>:
    aba0:	push	{fp, lr}
    aba4:	add	fp, sp, #4
    aba8:	sub	sp, sp, #8
    abac:	str	r0, [fp, #-8]
    abb0:	str	r1, [fp, #-12]
    abb4:	ldr	r0, [fp, #-8]
    abb8:	bl	8198 <Fantasy_Attacker_start>
    abbc:	mov	r3, r0
    abc0:	cmp	r3, #0
    abc4:	bne	abe0 <Fantasy_Attacker_create+0x40>
    abc8:	ldr	r1, [fp, #-12]
    abcc:	ldr	r0, [fp, #-8]
    abd0:	bl	ab30 <Fantasy_Attacker_sword_attack_damage_add>
    abd4:	mov	r3, r0
    abd8:	cmp	r3, #0
    abdc:	beq	abe8 <Fantasy_Attacker_create+0x48>
    abe0:	mov	r3, #0
    abe4:	b	abf4 <Fantasy_Attacker_create+0x54>
    abe8:	ldr	r0, [fp, #-8]
    abec:	bl	81c4 <Fantasy_Attacker_end>
    abf0:	mov	r3, r0
    abf4:	mov	r0, r3
    abf8:	sub	sp, fp, #4
    abfc:	pop	{fp, pc}

0000ac00 <Fantasy_Movie_main_character_add>:
    ac00:	push	{fp, lr}
    ac04:	add	fp, sp, #4
    ac08:	sub	sp, sp, #24
    ac0c:	str	r0, [fp, #-16]
    ac10:	sub	r3, fp, #24
    ac14:	stm	r3, {r1, r2}
    ac18:	ldrb	r3, [fp, #-24]	; 0xffffffe8
    ac1c:	cmp	r3, #0
    ac20:	bne	ac2c <Fantasy_Movie_main_character_add+0x2c>
    ac24:	mov	r3, #0
    ac28:	b	aca4 <Fantasy_Movie_main_character_add+0xa4>
    ac2c:	ldr	r3, [fp, #-20]	; 0xffffffec
    ac30:	cmp	r3, #0
    ac34:	bne	ac40 <Fantasy_Movie_main_character_add+0x40>
    ac38:	mvn	r3, #0
    ac3c:	b	aca4 <Fantasy_Movie_main_character_add+0xa4>
    ac40:	mov	r3, #1
    ac44:	mov	r2, #1
    ac48:	mov	r1, #0
    ac4c:	ldr	r0, [fp, #-16]
    ac50:	bl	0 <flatcc_builder_table_add>
    ac54:	str	r0, [fp, #-8]
    ac58:	ldr	r3, [fp, #-8]
    ac5c:	cmp	r3, #0
    ac60:	beq	ac80 <Fantasy_Movie_main_character_add+0x80>
    ac64:	mov	r1, #1
    ac68:	ldr	r0, [fp, #-16]
    ac6c:	bl	0 <flatcc_builder_table_add_offset>
    ac70:	str	r0, [fp, #-12]
    ac74:	ldr	r3, [fp, #-12]
    ac78:	cmp	r3, #0
    ac7c:	bne	ac88 <Fantasy_Movie_main_character_add+0x88>
    ac80:	mvn	r3, #0
    ac84:	b	aca4 <Fantasy_Movie_main_character_add+0xa4>
    ac88:	ldrb	r2, [fp, #-24]	; 0xffffffe8
    ac8c:	ldr	r3, [fp, #-8]
    ac90:	strb	r2, [r3]
    ac94:	ldr	r2, [fp, #-20]	; 0xffffffec
    ac98:	ldr	r3, [fp, #-12]
    ac9c:	str	r2, [r3]
    aca0:	mov	r3, #0
    aca4:	mov	r0, r3
    aca8:	sub	sp, fp, #4
    acac:	pop	{fp, pc}

0000acb0 <Fantasy_Movie_main_character_Rapunzel_create>:
    acb0:	push	{fp, lr}
    acb4:	add	fp, sp, #4
    acb8:	sub	sp, sp, #24
    acbc:	str	r0, [fp, #-24]	; 0xffffffe8
    acc0:	mov	r3, r1
    acc4:	strh	r3, [fp, #-26]	; 0xffffffe6
    acc8:	ldrh	r3, [fp, #-26]	; 0xffffffe6
    accc:	mov	r1, r3
    acd0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    acd4:	bl	7c70 <Fantasy_Rapunzel_create>
    acd8:	str	r0, [fp, #-8]
    acdc:	ldr	r3, [fp, #-8]
    ace0:	cmp	r3, #0
    ace4:	beq	ad10 <Fantasy_Movie_main_character_Rapunzel_create+0x60>
    ace8:	sub	r3, fp, #16
    acec:	ldr	r1, [fp, #-8]
    acf0:	mov	r0, r3
    acf4:	bl	8470 <Fantasy_Character_as_Rapunzel>
    acf8:	sub	r3, fp, #16
    acfc:	ldm	r3, {r1, r2}
    ad00:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ad04:	bl	ac00 <Fantasy_Movie_main_character_add>
    ad08:	mov	r3, r0
    ad0c:	b	ad14 <Fantasy_Movie_main_character_Rapunzel_create+0x64>
    ad10:	mvn	r3, #0
    ad14:	mov	r0, r3
    ad18:	sub	sp, fp, #4
    ad1c:	pop	{fp, pc}

0000ad20 <Fantasy_Movie_antagonist_add>:
    ad20:	push	{fp, lr}
    ad24:	add	fp, sp, #4
    ad28:	sub	sp, sp, #24
    ad2c:	str	r0, [fp, #-16]
    ad30:	sub	r3, fp, #24
    ad34:	stm	r3, {r1, r2}
    ad38:	ldrb	r3, [fp, #-24]	; 0xffffffe8
    ad3c:	cmp	r3, #0
    ad40:	bne	ad4c <Fantasy_Movie_antagonist_add+0x2c>
    ad44:	mov	r3, #0
    ad48:	b	adc4 <Fantasy_Movie_antagonist_add+0xa4>
    ad4c:	ldr	r3, [fp, #-20]	; 0xffffffec
    ad50:	cmp	r3, #0
    ad54:	bne	ad60 <Fantasy_Movie_antagonist_add+0x40>
    ad58:	mvn	r3, #0
    ad5c:	b	adc4 <Fantasy_Movie_antagonist_add+0xa4>
    ad60:	mov	r3, #1
    ad64:	mov	r2, #1
    ad68:	mov	r1, #2
    ad6c:	ldr	r0, [fp, #-16]
    ad70:	bl	0 <flatcc_builder_table_add>
    ad74:	str	r0, [fp, #-8]
    ad78:	ldr	r3, [fp, #-8]
    ad7c:	cmp	r3, #0
    ad80:	beq	ada0 <Fantasy_Movie_antagonist_add+0x80>
    ad84:	mov	r1, #3
    ad88:	ldr	r0, [fp, #-16]
    ad8c:	bl	0 <flatcc_builder_table_add_offset>
    ad90:	str	r0, [fp, #-12]
    ad94:	ldr	r3, [fp, #-12]
    ad98:	cmp	r3, #0
    ad9c:	bne	ada8 <Fantasy_Movie_antagonist_add+0x88>
    ada0:	mvn	r3, #0
    ada4:	b	adc4 <Fantasy_Movie_antagonist_add+0xa4>
    ada8:	ldrb	r2, [fp, #-24]	; 0xffffffe8
    adac:	ldr	r3, [fp, #-8]
    adb0:	strb	r2, [r3]
    adb4:	ldr	r2, [fp, #-20]	; 0xffffffec
    adb8:	ldr	r3, [fp, #-12]
    adbc:	str	r2, [r3]
    adc0:	mov	r3, #0
    adc4:	mov	r0, r3
    adc8:	sub	sp, fp, #4
    adcc:	pop	{fp, pc}

0000add0 <Fantasy_Movie_antagonist_MuLan_add>:
    add0:	push	{fp, lr}
    add4:	add	fp, sp, #4
    add8:	sub	sp, sp, #16
    addc:	str	r0, [fp, #-16]
    ade0:	str	r1, [fp, #-20]	; 0xffffffec
    ade4:	sub	r3, fp, #12
    ade8:	ldr	r1, [fp, #-20]	; 0xffffffec
    adec:	mov	r0, r3
    adf0:	bl	8428 <Fantasy_Character_as_MuLan>
    adf4:	sub	r3, fp, #12
    adf8:	ldm	r3, {r1, r2}
    adfc:	ldr	r0, [fp, #-16]
    ae00:	bl	ad20 <Fantasy_Movie_antagonist_add>
    ae04:	mov	r3, r0
    ae08:	mov	r0, r3
    ae0c:	sub	sp, fp, #4
    ae10:	pop	{fp, pc}

0000ae14 <Fantasy_Movie_side_kick_add>:
    ae14:	push	{fp, lr}
    ae18:	add	fp, sp, #4
    ae1c:	sub	sp, sp, #24
    ae20:	str	r0, [fp, #-16]
    ae24:	sub	r3, fp, #24
    ae28:	stm	r3, {r1, r2}
    ae2c:	ldrb	r3, [fp, #-24]	; 0xffffffe8
    ae30:	cmp	r3, #0
    ae34:	bne	ae40 <Fantasy_Movie_side_kick_add+0x2c>
    ae38:	mov	r3, #0
    ae3c:	b	aeb8 <Fantasy_Movie_side_kick_add+0xa4>
    ae40:	ldr	r3, [fp, #-20]	; 0xffffffec
    ae44:	cmp	r3, #0
    ae48:	bne	ae54 <Fantasy_Movie_side_kick_add+0x40>
    ae4c:	mvn	r3, #0
    ae50:	b	aeb8 <Fantasy_Movie_side_kick_add+0xa4>
    ae54:	mov	r3, #1
    ae58:	mov	r2, #1
    ae5c:	mov	r1, #4
    ae60:	ldr	r0, [fp, #-16]
    ae64:	bl	0 <flatcc_builder_table_add>
    ae68:	str	r0, [fp, #-8]
    ae6c:	ldr	r3, [fp, #-8]
    ae70:	cmp	r3, #0
    ae74:	beq	ae94 <Fantasy_Movie_side_kick_add+0x80>
    ae78:	mov	r1, #5
    ae7c:	ldr	r0, [fp, #-16]
    ae80:	bl	0 <flatcc_builder_table_add_offset>
    ae84:	str	r0, [fp, #-12]
    ae88:	ldr	r3, [fp, #-12]
    ae8c:	cmp	r3, #0
    ae90:	bne	ae9c <Fantasy_Movie_side_kick_add+0x88>
    ae94:	mvn	r3, #0
    ae98:	b	aeb8 <Fantasy_Movie_side_kick_add+0xa4>
    ae9c:	ldrb	r2, [fp, #-24]	; 0xffffffe8
    aea0:	ldr	r3, [fp, #-8]
    aea4:	strb	r2, [r3]
    aea8:	ldr	r2, [fp, #-20]	; 0xffffffec
    aeac:	ldr	r3, [fp, #-12]
    aeb0:	str	r2, [r3]
    aeb4:	mov	r3, #0
    aeb8:	mov	r0, r3
    aebc:	sub	sp, fp, #4
    aec0:	pop	{fp, pc}

0000aec4 <Fantasy_Movie_side_kick_Other_add>:
    aec4:	push	{fp, lr}
    aec8:	add	fp, sp, #4
    aecc:	sub	sp, sp, #16
    aed0:	str	r0, [fp, #-16]
    aed4:	str	r1, [fp, #-20]	; 0xffffffec
    aed8:	sub	r3, fp, #12
    aedc:	ldr	r1, [fp, #-20]	; 0xffffffec
    aee0:	mov	r0, r3
    aee4:	bl	8500 <Fantasy_Character_as_Other>
    aee8:	sub	r3, fp, #12
    aeec:	ldm	r3, {r1, r2}
    aef0:	ldr	r0, [fp, #-16]
    aef4:	bl	ae14 <Fantasy_Movie_side_kick_add>
    aef8:	mov	r3, r0
    aefc:	mov	r0, r3
    af00:	sub	sp, fp, #4
    af04:	pop	{fp, pc}

0000af08 <Fantasy_Movie_side_kick_Other_create_str>:
    af08:	push	{fp, lr}
    af0c:	add	fp, sp, #4
    af10:	sub	sp, sp, #8
    af14:	str	r0, [fp, #-8]
    af18:	str	r1, [fp, #-12]
    af1c:	ldr	r1, [fp, #-12]
    af20:	ldr	r0, [fp, #-8]
    af24:	bl	0 <flatcc_builder_create_string_str>
    af28:	mov	r3, r0
    af2c:	mov	r1, r3
    af30:	ldr	r0, [fp, #-8]
    af34:	bl	aec4 <Fantasy_Movie_side_kick_Other_add>
    af38:	mov	r3, r0
    af3c:	mov	r0, r3
    af40:	sub	sp, fp, #4
    af44:	pop	{fp, pc}

0000af48 <Fantasy_Movie_cameo_add>:
    af48:	push	{fp, lr}
    af4c:	add	fp, sp, #4
    af50:	sub	sp, sp, #24
    af54:	str	r0, [fp, #-16]
    af58:	sub	r3, fp, #24
    af5c:	stm	r3, {r1, r2}
    af60:	ldrb	r3, [fp, #-24]	; 0xffffffe8
    af64:	cmp	r3, #0
    af68:	bne	af74 <Fantasy_Movie_cameo_add+0x2c>
    af6c:	mov	r3, #0
    af70:	b	afec <Fantasy_Movie_cameo_add+0xa4>
    af74:	ldr	r3, [fp, #-20]	; 0xffffffec
    af78:	cmp	r3, #0
    af7c:	bne	af88 <Fantasy_Movie_cameo_add+0x40>
    af80:	mvn	r3, #0
    af84:	b	afec <Fantasy_Movie_cameo_add+0xa4>
    af88:	mov	r3, #1
    af8c:	mov	r2, #1
    af90:	mov	r1, #6
    af94:	ldr	r0, [fp, #-16]
    af98:	bl	0 <flatcc_builder_table_add>
    af9c:	str	r0, [fp, #-8]
    afa0:	ldr	r3, [fp, #-8]
    afa4:	cmp	r3, #0
    afa8:	beq	afc8 <Fantasy_Movie_cameo_add+0x80>
    afac:	mov	r1, #7
    afb0:	ldr	r0, [fp, #-16]
    afb4:	bl	0 <flatcc_builder_table_add_offset>
    afb8:	str	r0, [fp, #-12]
    afbc:	ldr	r3, [fp, #-12]
    afc0:	cmp	r3, #0
    afc4:	bne	afd0 <Fantasy_Movie_cameo_add+0x88>
    afc8:	mvn	r3, #0
    afcc:	b	afec <Fantasy_Movie_cameo_add+0xa4>
    afd0:	ldrb	r2, [fp, #-24]	; 0xffffffe8
    afd4:	ldr	r3, [fp, #-8]
    afd8:	strb	r2, [r3]
    afdc:	ldr	r2, [fp, #-20]	; 0xffffffec
    afe0:	ldr	r3, [fp, #-12]
    afe4:	str	r2, [r3]
    afe8:	mov	r3, #0
    afec:	mov	r0, r3
    aff0:	sub	sp, fp, #4
    aff4:	pop	{fp, pc}

0000aff8 <Fantasy_Movie_cameo_Rapunzel_add>:
    aff8:	push	{fp, lr}
    affc:	add	fp, sp, #4
    b000:	sub	sp, sp, #16
    b004:	str	r0, [fp, #-16]
    b008:	str	r1, [fp, #-20]	; 0xffffffec
    b00c:	sub	r3, fp, #12
    b010:	ldr	r1, [fp, #-20]	; 0xffffffec
    b014:	mov	r0, r3
    b018:	bl	8470 <Fantasy_Character_as_Rapunzel>
    b01c:	sub	r3, fp, #12
    b020:	ldm	r3, {r1, r2}
    b024:	ldr	r0, [fp, #-16]
    b028:	bl	af48 <Fantasy_Movie_cameo_add>
    b02c:	mov	r3, r0
    b030:	mov	r0, r3
    b034:	sub	sp, fp, #4
    b038:	pop	{fp, pc}

0000b03c <Fantasy_Movie_characters_add>:
    b03c:	push	{fp, lr}
    b040:	add	fp, sp, #4
    b044:	sub	sp, sp, #24
    b048:	str	r0, [fp, #-16]
    b04c:	sub	r3, fp, #24
    b050:	stm	r3, {r1, r2}
    b054:	ldr	r3, [fp, #-24]	; 0xffffffe8
    b058:	cmp	r3, #0
    b05c:	beq	b06c <Fantasy_Movie_characters_add+0x30>
    b060:	ldr	r3, [fp, #-20]	; 0xffffffec
    b064:	cmp	r3, #0
    b068:	bne	b08c <Fantasy_Movie_characters_add+0x50>
    b06c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    b070:	ldr	r3, [fp, #-20]	; 0xffffffec
    b074:	cmp	r2, r3
    b078:	bne	b084 <Fantasy_Movie_characters_add+0x48>
    b07c:	mov	r3, #0
    b080:	b	b0f0 <Fantasy_Movie_characters_add+0xb4>
    b084:	mvn	r3, #0
    b088:	b	b0f0 <Fantasy_Movie_characters_add+0xb4>
    b08c:	mov	r1, #8
    b090:	ldr	r0, [fp, #-16]
    b094:	bl	0 <flatcc_builder_table_add_offset>
    b098:	str	r0, [fp, #-8]
    b09c:	ldr	r3, [fp, #-8]
    b0a0:	cmp	r3, #0
    b0a4:	bne	b0b0 <Fantasy_Movie_characters_add+0x74>
    b0a8:	mvn	r3, #0
    b0ac:	b	b0f0 <Fantasy_Movie_characters_add+0xb4>
    b0b0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    b0b4:	ldr	r3, [fp, #-8]
    b0b8:	str	r2, [r3]
    b0bc:	mov	r1, #9
    b0c0:	ldr	r0, [fp, #-16]
    b0c4:	bl	0 <flatcc_builder_table_add_offset>
    b0c8:	str	r0, [fp, #-8]
    b0cc:	ldr	r3, [fp, #-8]
    b0d0:	cmp	r3, #0
    b0d4:	bne	b0e0 <Fantasy_Movie_characters_add+0xa4>
    b0d8:	mvn	r3, #0
    b0dc:	b	b0f0 <Fantasy_Movie_characters_add+0xb4>
    b0e0:	ldr	r2, [fp, #-20]	; 0xffffffec
    b0e4:	ldr	r3, [fp, #-8]
    b0e8:	str	r2, [r3]
    b0ec:	mov	r3, #0
    b0f0:	mov	r0, r3
    b0f4:	sub	sp, fp, #4
    b0f8:	pop	{fp, pc}

0000b0fc <Fantasy_Movie_characters_start>:
    b0fc:	push	{fp, lr}
    b100:	add	fp, sp, #4
    b104:	sub	sp, sp, #8
    b108:	str	r0, [fp, #-8]
    b10c:	ldr	r0, [fp, #-8]
    b110:	bl	0 <flatcc_builder_start_union_vector>
    b114:	mov	r3, r0
    b118:	mov	r0, r3
    b11c:	sub	sp, fp, #4
    b120:	pop	{fp, pc}

0000b124 <Fantasy_Movie_characters_end>:
    b124:	push	{fp, lr}
    b128:	add	fp, sp, #4
    b12c:	sub	sp, sp, #16
    b130:	str	r0, [fp, #-16]
    b134:	sub	r3, fp, #12
    b138:	ldr	r1, [fp, #-16]
    b13c:	mov	r0, r3
    b140:	bl	0 <flatcc_builder_end_union_vector>
    b144:	sub	r3, fp, #12
    b148:	ldm	r3, {r1, r2}
    b14c:	ldr	r0, [fp, #-16]
    b150:	bl	b03c <Fantasy_Movie_characters_add>
    b154:	mov	r3, r0
    b158:	mov	r0, r3
    b15c:	sub	sp, fp, #4
    b160:	pop	{fp, pc}

0000b164 <Fantasy_Movie_characters_push>:
    b164:	push	{fp, lr}
    b168:	add	fp, sp, #4
    b16c:	sub	sp, sp, #16
    b170:	str	r0, [fp, #-8]
    b174:	sub	r3, fp, #16
    b178:	stm	r3, {r1, r2}
    b17c:	sub	r3, fp, #16
    b180:	ldm	r3, {r1, r2}
    b184:	ldr	r0, [fp, #-8]
    b188:	bl	0 <flatcc_builder_union_vector_push>
    b18c:	mov	r3, r0
    b190:	mov	r0, r3
    b194:	sub	sp, fp, #4
    b198:	pop	{fp, pc}

0000b19c <Fantasy_Movie_characters_MuLan_push>:
    b19c:	push	{fp, lr}
    b1a0:	add	fp, sp, #4
    b1a4:	sub	sp, sp, #16
    b1a8:	str	r0, [fp, #-16]
    b1ac:	str	r1, [fp, #-20]	; 0xffffffec
    b1b0:	sub	r3, fp, #12
    b1b4:	ldr	r1, [fp, #-20]	; 0xffffffec
    b1b8:	mov	r0, r3
    b1bc:	bl	8428 <Fantasy_Character_as_MuLan>
    b1c0:	sub	r3, fp, #12
    b1c4:	ldm	r3, {r1, r2}
    b1c8:	ldr	r0, [fp, #-16]
    b1cc:	bl	8548 <Fantasy_Character_vec_push>
    b1d0:	mov	r3, r0
    b1d4:	mov	r0, r3
    b1d8:	sub	sp, fp, #4
    b1dc:	pop	{fp, pc}

0000b1e0 <Fantasy_Movie_characters_MuLan_push_create>:
    b1e0:	push	{fp, lr}
    b1e4:	add	fp, sp, #4
    b1e8:	sub	sp, sp, #16
    b1ec:	str	r0, [fp, #-16]
    b1f0:	str	r1, [fp, #-20]	; 0xffffffec
    b1f4:	ldr	r1, [fp, #-20]	; 0xffffffec
    b1f8:	ldr	r0, [fp, #-16]
    b1fc:	bl	aba0 <Fantasy_Attacker_create>
    b200:	mov	r2, r0
    b204:	sub	r3, fp, #12
    b208:	mov	r1, r2
    b20c:	mov	r0, r3
    b210:	bl	8428 <Fantasy_Character_as_MuLan>
    b214:	sub	r3, fp, #12
    b218:	ldm	r3, {r1, r2}
    b21c:	ldr	r0, [fp, #-16]
    b220:	bl	8548 <Fantasy_Character_vec_push>
    b224:	mov	r3, r0
    b228:	mov	r0, r3
    b22c:	sub	sp, fp, #4
    b230:	pop	{fp, pc}

0000b234 <Fantasy_Movie_characters_Belle_push_start>:
    b234:	push	{fp, lr}
    b238:	add	fp, sp, #4
    b23c:	sub	sp, sp, #8
    b240:	str	r0, [fp, #-8]
    b244:	ldr	r0, [fp, #-8]
    b248:	bl	7d04 <Fantasy_BookReader_start>
    b24c:	mov	r3, r0
    b250:	mov	r0, r3
    b254:	sub	sp, fp, #4
    b258:	pop	{fp, pc}

0000b25c <Fantasy_Movie_characters_Belle_push_end>:
    b25c:	push	{fp, lr}
    b260:	add	fp, sp, #4
    b264:	sub	sp, sp, #16
    b268:	str	r0, [fp, #-16]
    b26c:	ldr	r0, [fp, #-16]
    b270:	bl	7d34 <Fantasy_BookReader_end>
    b274:	mov	r2, r0
    b278:	sub	r3, fp, #12
    b27c:	mov	r1, r2
    b280:	mov	r0, r3
    b284:	bl	84b8 <Fantasy_Character_as_Belle>
    b288:	sub	r3, fp, #12
    b28c:	ldm	r3, {r1, r2}
    b290:	ldr	r0, [fp, #-16]
    b294:	bl	8548 <Fantasy_Character_vec_push>
    b298:	mov	r3, r0
    b29c:	mov	r0, r3
    b2a0:	sub	sp, fp, #4
    b2a4:	pop	{fp, pc}

0000b2a8 <Fantasy_Movie_characters_Belle_push>:
    b2a8:	push	{fp, lr}
    b2ac:	add	fp, sp, #4
    b2b0:	sub	sp, sp, #16
    b2b4:	str	r0, [fp, #-16]
    b2b8:	str	r1, [fp, #-20]	; 0xffffffec
    b2bc:	sub	r3, fp, #12
    b2c0:	ldr	r1, [fp, #-20]	; 0xffffffec
    b2c4:	mov	r0, r3
    b2c8:	bl	84b8 <Fantasy_Character_as_Belle>
    b2cc:	sub	r3, fp, #12
    b2d0:	ldm	r3, {r1, r2}
    b2d4:	ldr	r0, [fp, #-16]
    b2d8:	bl	8548 <Fantasy_Character_vec_push>
    b2dc:	mov	r3, r0
    b2e0:	mov	r0, r3
    b2e4:	sub	sp, fp, #4
    b2e8:	pop	{fp, pc}

0000b2ec <Fantasy_Movie_characters_Belle_push_create>:
    b2ec:	push	{fp, lr}
    b2f0:	add	fp, sp, #4
    b2f4:	sub	sp, sp, #16
    b2f8:	str	r0, [fp, #-16]
    b2fc:	str	r1, [fp, #-20]	; 0xffffffec
    b300:	ldr	r1, [fp, #-20]	; 0xffffffec
    b304:	ldr	r0, [fp, #-16]
    b308:	bl	7d84 <Fantasy_BookReader_create>
    b30c:	mov	r2, r0
    b310:	sub	r3, fp, #12
    b314:	mov	r1, r2
    b318:	mov	r0, r3
    b31c:	bl	84b8 <Fantasy_Character_as_Belle>
    b320:	sub	r3, fp, #12
    b324:	ldm	r3, {r1, r2}
    b328:	ldr	r0, [fp, #-16]
    b32c:	bl	8548 <Fantasy_Character_vec_push>
    b330:	mov	r3, r0
    b334:	mov	r0, r3
    b338:	sub	sp, fp, #4
    b33c:	pop	{fp, pc}

0000b340 <Fantasy_Movie_characters_Other_push>:
    b340:	push	{fp, lr}
    b344:	add	fp, sp, #4
    b348:	sub	sp, sp, #16
    b34c:	str	r0, [fp, #-16]
    b350:	str	r1, [fp, #-20]	; 0xffffffec
    b354:	sub	r3, fp, #12
    b358:	ldr	r1, [fp, #-20]	; 0xffffffec
    b35c:	mov	r0, r3
    b360:	bl	8500 <Fantasy_Character_as_Other>
    b364:	sub	r3, fp, #12
    b368:	ldm	r3, {r1, r2}
    b36c:	ldr	r0, [fp, #-16]
    b370:	bl	8548 <Fantasy_Character_vec_push>
    b374:	mov	r3, r0
    b378:	mov	r0, r3
    b37c:	sub	sp, fp, #4
    b380:	pop	{fp, pc}

0000b384 <Fantasy_Movie_characters_Other_push_create_str>:
    b384:	push	{fp, lr}
    b388:	add	fp, sp, #4
    b38c:	sub	sp, sp, #16
    b390:	str	r0, [fp, #-16]
    b394:	str	r1, [fp, #-20]	; 0xffffffec
    b398:	ldr	r1, [fp, #-20]	; 0xffffffec
    b39c:	ldr	r0, [fp, #-16]
    b3a0:	bl	72f8 <flatbuffers_string_create_str>
    b3a4:	mov	r2, r0
    b3a8:	sub	r3, fp, #12
    b3ac:	mov	r1, r2
    b3b0:	mov	r0, r3
    b3b4:	bl	8500 <Fantasy_Character_as_Other>
    b3b8:	sub	r3, fp, #12
    b3bc:	ldm	r3, {r1, r2}
    b3c0:	ldr	r0, [fp, #-16]
    b3c4:	bl	8548 <Fantasy_Character_vec_push>
    b3c8:	mov	r3, r0
    b3cc:	mov	r0, r3
    b3d0:	sub	sp, fp, #4
    b3d4:	pop	{fp, pc}

0000b3d8 <Fantasy_Movie_start_as_root>:
    b3d8:	push	{fp, lr}
    b3dc:	add	fp, sp, #4
    b3e0:	sub	sp, sp, #8
    b3e4:	str	r0, [fp, #-8]
    b3e8:	ldr	r1, [pc, #48]	; b420 <Fantasy_Movie_start_as_root+0x48>
    b3ec:	ldr	r0, [fp, #-8]
    b3f0:	bl	7440 <flatbuffers_buffer_start>
    b3f4:	mov	r3, r0
    b3f8:	cmp	r3, #0
    b3fc:	bne	b410 <Fantasy_Movie_start_as_root+0x38>
    b400:	ldr	r0, [fp, #-8]
    b404:	bl	822c <Fantasy_Movie_start>
    b408:	mov	r3, r0
    b40c:	b	b414 <Fantasy_Movie_start_as_root+0x3c>
    b410:	mvn	r3, #0
    b414:	mov	r0, r3
    b418:	sub	sp, fp, #4
    b41c:	pop	{fp, pc}
    b420:	.word	0x00000134

0000b424 <Fantasy_Movie_end_as_root>:
    b424:	push	{fp, lr}
    b428:	add	fp, sp, #4
    b42c:	sub	sp, sp, #8
    b430:	str	r0, [fp, #-8]
    b434:	ldr	r0, [fp, #-8]
    b438:	bl	8258 <Fantasy_Movie_end>
    b43c:	mov	r3, r0
    b440:	mov	r1, r3
    b444:	ldr	r0, [fp, #-8]
    b448:	bl	74b0 <flatbuffers_buffer_end>
    b44c:	mov	r3, r0
    b450:	mov	r0, r3
    b454:	sub	sp, fp, #4
    b458:	pop	{fp, pc}

0000b45c <MyGame_Example_Foo_union_verifier>:
    b45c:	push	{fp, lr}
    b460:	add	fp, sp, #4
    b464:	sub	sp, sp, #8
    b468:	str	r0, [fp, #-8]
    b46c:	ldr	r3, [fp, #-8]
    b470:	ldrb	r3, [r3, #12]
    b474:	cmp	r3, #1
    b478:	bne	b490 <MyGame_Example_Foo_union_verifier+0x34>
    b47c:	ldr	r1, [pc, #28]	; b4a0 <MyGame_Example_Foo_union_verifier+0x44>
    b480:	ldr	r0, [fp, #-8]
    b484:	bl	0 <flatcc_verify_union_table>
    b488:	mov	r3, r0
    b48c:	b	b494 <MyGame_Example_Foo_union_verifier+0x38>
    b490:	mov	r3, #0
    b494:	mov	r0, r3
    b498:	sub	sp, fp, #4
    b49c:	pop	{fp, pc}
    b4a0:	.word	0x00000000

0000b4a4 <MyGame_Example_Any_union_verifier>:
    b4a4:	push	{fp, lr}
    b4a8:	add	fp, sp, #4
    b4ac:	sub	sp, sp, #8
    b4b0:	str	r0, [fp, #-8]
    b4b4:	ldr	r3, [fp, #-8]
    b4b8:	ldrb	r3, [r3, #12]
    b4bc:	sub	r3, r3, #1
    b4c0:	cmp	r3, #3
    b4c4:	ldrls	pc, [pc, r3, lsl #2]
    b4c8:	b	b52c <MyGame_Example_Any_union_verifier+0x88>
    b4cc:	.word	0x0000b4dc
    b4d0:	.word	0x0000b4f0
    b4d4:	.word	0x0000b504
    b4d8:	.word	0x0000b518
    b4dc:	ldr	r1, [pc, #88]	; b53c <MyGame_Example_Any_union_verifier+0x98>
    b4e0:	ldr	r0, [fp, #-8]
    b4e4:	bl	0 <flatcc_verify_union_table>
    b4e8:	mov	r3, r0
    b4ec:	b	b530 <MyGame_Example_Any_union_verifier+0x8c>
    b4f0:	ldr	r1, [pc, #72]	; b540 <MyGame_Example_Any_union_verifier+0x9c>
    b4f4:	ldr	r0, [fp, #-8]
    b4f8:	bl	0 <flatcc_verify_union_table>
    b4fc:	mov	r3, r0
    b500:	b	b530 <MyGame_Example_Any_union_verifier+0x8c>
    b504:	ldr	r1, [pc, #56]	; b544 <MyGame_Example_Any_union_verifier+0xa0>
    b508:	ldr	r0, [fp, #-8]
    b50c:	bl	0 <flatcc_verify_union_table>
    b510:	mov	r3, r0
    b514:	b	b530 <MyGame_Example_Any_union_verifier+0x8c>
    b518:	ldr	r1, [pc, #40]	; b548 <MyGame_Example_Any_union_verifier+0xa4>
    b51c:	ldr	r0, [fp, #-8]
    b520:	bl	0 <flatcc_verify_union_table>
    b524:	mov	r3, r0
    b528:	b	b530 <MyGame_Example_Any_union_verifier+0x8c>
    b52c:	mov	r3, #0
    b530:	mov	r0, r3
    b534:	sub	sp, fp, #4
    b538:	pop	{fp, pc}
	...

0000b54c <Fantasy_Character_union_verifier>:
    b54c:	push	{fp, lr}
    b550:	add	fp, sp, #4
    b554:	sub	sp, sp, #8
    b558:	str	r0, [fp, #-8]
    b55c:	ldr	r3, [fp, #-8]
    b560:	ldrb	r3, [r3, #12]
    b564:	cmp	r3, #9
    b568:	beq	b5d0 <Fantasy_Character_union_verifier+0x84>
    b56c:	cmp	r3, #9
    b570:	bgt	b588 <Fantasy_Character_union_verifier+0x3c>
    b574:	cmp	r3, #2
    b578:	beq	b5a4 <Fantasy_Character_union_verifier+0x58>
    b57c:	cmp	r3, #8
    b580:	beq	b5b8 <Fantasy_Character_union_verifier+0x6c>
    b584:	b	b620 <Fantasy_Character_union_verifier+0xd4>
    b588:	cmp	r3, #11
    b58c:	beq	b600 <Fantasy_Character_union_verifier+0xb4>
    b590:	cmp	r3, #11
    b594:	blt	b5e8 <Fantasy_Character_union_verifier+0x9c>
    b598:	cmp	r3, #255	; 0xff
    b59c:	beq	b610 <Fantasy_Character_union_verifier+0xc4>
    b5a0:	b	b620 <Fantasy_Character_union_verifier+0xd4>
    b5a4:	ldr	r1, [pc, #132]	; b630 <Fantasy_Character_union_verifier+0xe4>
    b5a8:	ldr	r0, [fp, #-8]
    b5ac:	bl	0 <flatcc_verify_union_table>
    b5b0:	mov	r3, r0
    b5b4:	b	b624 <Fantasy_Character_union_verifier+0xd8>
    b5b8:	mov	r2, #2
    b5bc:	mov	r1, #2
    b5c0:	ldr	r0, [fp, #-8]
    b5c4:	bl	0 <flatcc_verify_union_struct>
    b5c8:	mov	r3, r0
    b5cc:	b	b624 <Fantasy_Character_union_verifier+0xd8>
    b5d0:	mov	r2, #4
    b5d4:	mov	r1, #4
    b5d8:	ldr	r0, [fp, #-8]
    b5dc:	bl	0 <flatcc_verify_union_struct>
    b5e0:	mov	r3, r0
    b5e4:	b	b624 <Fantasy_Character_union_verifier+0xd8>
    b5e8:	mov	r2, #4
    b5ec:	mov	r1, #4
    b5f0:	ldr	r0, [fp, #-8]
    b5f4:	bl	0 <flatcc_verify_union_struct>
    b5f8:	mov	r3, r0
    b5fc:	b	b624 <Fantasy_Character_union_verifier+0xd8>
    b600:	ldr	r0, [fp, #-8]
    b604:	bl	0 <flatcc_verify_union_string>
    b608:	mov	r3, r0
    b60c:	b	b624 <Fantasy_Character_union_verifier+0xd8>
    b610:	ldr	r0, [fp, #-8]
    b614:	bl	0 <flatcc_verify_union_string>
    b618:	mov	r3, r0
    b61c:	b	b624 <Fantasy_Character_union_verifier+0xd8>
    b620:	mov	r3, #0
    b624:	mov	r0, r3
    b628:	sub	sp, fp, #4
    b62c:	pop	{fp, pc}
    b630:	.word	0x00000000

0000b634 <MyGame_Example_Vec3_verify_as_typed_root>:
    b634:	push	{fp, lr}
    b638:	add	fp, sp, #4
    b63c:	sub	sp, sp, #16
    b640:	str	r0, [fp, #-8]
    b644:	str	r1, [fp, #-12]
    b648:	mov	r3, #16
    b64c:	str	r3, [sp]
    b650:	mov	r3, #32
    b654:	ldr	r2, [pc, #24]	; b674 <MyGame_Example_Vec3_verify_as_typed_root+0x40>
    b658:	ldr	r1, [fp, #-12]
    b65c:	ldr	r0, [fp, #-8]
    b660:	bl	0 <flatcc_verify_struct_as_typed_root>
    b664:	mov	r3, r0
    b668:	mov	r0, r3
    b66c:	sub	sp, fp, #4
    b670:	pop	{fp, pc}
    b674:	.word	0xa8f53ed2

0000b678 <MyGame_Example_Vec3_verify_as_root_with_type_hash>:
    b678:	push	{fp, lr}
    b67c:	add	fp, sp, #4
    b680:	sub	sp, sp, #24
    b684:	str	r0, [fp, #-8]
    b688:	str	r1, [fp, #-12]
    b68c:	str	r2, [fp, #-16]
    b690:	mov	r3, #16
    b694:	str	r3, [sp]
    b698:	mov	r3, #32
    b69c:	ldr	r2, [fp, #-16]
    b6a0:	ldr	r1, [fp, #-12]
    b6a4:	ldr	r0, [fp, #-8]
    b6a8:	bl	0 <flatcc_verify_struct_as_typed_root>
    b6ac:	mov	r3, r0
    b6b0:	mov	r0, r3
    b6b4:	sub	sp, fp, #4
    b6b8:	pop	{fp, pc}

0000b6bc <MyGame_InParentNamespace_verify_table>:
    b6bc:	push	{fp}		; (str fp, [sp, #-4]!)
    b6c0:	add	fp, sp, #0
    b6c4:	sub	sp, sp, #12
    b6c8:	str	r0, [fp, #-8]
    b6cc:	mov	r3, #0
    b6d0:	mov	r0, r3
    b6d4:	add	sp, fp, #0
    b6d8:	pop	{fp}		; (ldr fp, [sp], #4)
    b6dc:	bx	lr

0000b6e0 <MyGame_Example2_Monster_verify_table>:
    b6e0:	push	{fp}		; (str fp, [sp, #-4]!)
    b6e4:	add	fp, sp, #0
    b6e8:	sub	sp, sp, #12
    b6ec:	str	r0, [fp, #-8]
    b6f0:	mov	r3, #0
    b6f4:	mov	r0, r3
    b6f8:	add	sp, fp, #0
    b6fc:	pop	{fp}		; (ldr fp, [sp], #4)
    b700:	bx	lr

0000b704 <MyGame_Example_emptytable_verify_table>:
    b704:	push	{fp}		; (str fp, [sp, #-4]!)
    b708:	add	fp, sp, #0
    b70c:	sub	sp, sp, #12
    b710:	str	r0, [fp, #-8]
    b714:	mov	r3, #0
    b718:	mov	r0, r3
    b71c:	add	sp, fp, #0
    b720:	pop	{fp}		; (ldr fp, [sp], #4)
    b724:	bx	lr

0000b728 <MyGame_Example_with_emptystruct_verify_table>:
    b728:	push	{fp, lr}
    b72c:	add	fp, sp, #4
    b730:	sub	sp, sp, #16
    b734:	str	r0, [fp, #-16]
    b738:	mov	r3, #1
    b73c:	mov	r2, #0
    b740:	mov	r1, #0
    b744:	ldr	r0, [fp, #-16]
    b748:	bl	0 <flatcc_verify_field>
    b74c:	str	r0, [fp, #-8]
    b750:	ldr	r3, [fp, #-8]
    b754:	cmp	r3, #0
    b758:	beq	b764 <MyGame_Example_with_emptystruct_verify_table+0x3c>
    b75c:	ldr	r3, [fp, #-8]
    b760:	b	b768 <MyGame_Example_with_emptystruct_verify_table+0x40>
    b764:	mov	r3, #0
    b768:	mov	r0, r3
    b76c:	sub	sp, fp, #4
    b770:	pop	{fp, pc}

0000b774 <MyGame_Example_with_emptystruct_verify_as_typed_root>:
    b774:	push	{fp, lr}
    b778:	add	fp, sp, #4
    b77c:	sub	sp, sp, #8
    b780:	str	r0, [fp, #-8]
    b784:	str	r1, [fp, #-12]
    b788:	ldr	r3, [pc, #28]	; b7ac <MyGame_Example_with_emptystruct_verify_as_typed_root+0x38>
    b78c:	ldr	r2, [pc, #28]	; b7b0 <MyGame_Example_with_emptystruct_verify_as_typed_root+0x3c>
    b790:	ldr	r1, [fp, #-12]
    b794:	ldr	r0, [fp, #-8]
    b798:	bl	0 <flatcc_verify_table_as_root>
    b79c:	mov	r3, r0
    b7a0:	mov	r0, r3
    b7a4:	sub	sp, fp, #4
    b7a8:	pop	{fp, pc}
    b7ac:	.word	0x00000000
    b7b0:	.word	0x000007fc

0000b7b4 <MyGame_Example_with_emptystruct_verify_as_root_with_identifier>:
    b7b4:	push	{fp, lr}
    b7b8:	add	fp, sp, #4
    b7bc:	sub	sp, sp, #16
    b7c0:	str	r0, [fp, #-8]
    b7c4:	str	r1, [fp, #-12]
    b7c8:	str	r2, [fp, #-16]
    b7cc:	ldr	r3, [pc, #28]	; b7f0 <MyGame_Example_with_emptystruct_verify_as_root_with_identifier+0x3c>
    b7d0:	ldr	r2, [fp, #-16]
    b7d4:	ldr	r1, [fp, #-12]
    b7d8:	ldr	r0, [fp, #-8]
    b7dc:	bl	0 <flatcc_verify_table_as_root>
    b7e0:	mov	r3, r0
    b7e4:	mov	r0, r3
    b7e8:	sub	sp, fp, #4
    b7ec:	pop	{fp, pc}
    b7f0:	.word	0x00000000

0000b7f4 <MyGame_Example_with_emptystruct_verify_as_root_with_type_hash>:
    b7f4:	push	{fp, lr}
    b7f8:	add	fp, sp, #4
    b7fc:	sub	sp, sp, #16
    b800:	str	r0, [fp, #-8]
    b804:	str	r1, [fp, #-12]
    b808:	str	r2, [fp, #-16]
    b80c:	ldr	r3, [pc, #28]	; b830 <MyGame_Example_with_emptystruct_verify_as_root_with_type_hash+0x3c>
    b810:	ldr	r2, [fp, #-16]
    b814:	ldr	r1, [fp, #-12]
    b818:	ldr	r0, [fp, #-8]
    b81c:	bl	0 <flatcc_verify_table_as_typed_root>
    b820:	mov	r3, r0
    b824:	mov	r0, r3
    b828:	sub	sp, fp, #4
    b82c:	pop	{fp, pc}
    b830:	.word	0x00000000

0000b834 <MyGame_Example_TestSimpleTableWithEnum_verify_table>:
    b834:	push	{fp, lr}
    b838:	add	fp, sp, #4
    b83c:	sub	sp, sp, #16
    b840:	str	r0, [fp, #-16]
    b844:	mov	r3, #1
    b848:	mov	r2, #1
    b84c:	mov	r1, #0
    b850:	ldr	r0, [fp, #-16]
    b854:	bl	0 <flatcc_verify_field>
    b858:	str	r0, [fp, #-8]
    b85c:	ldr	r3, [fp, #-8]
    b860:	cmp	r3, #0
    b864:	beq	b870 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x3c>
    b868:	ldr	r3, [fp, #-8]
    b86c:	b	b8f8 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xc4>
    b870:	mov	r3, #1
    b874:	mov	r2, #1
    b878:	mov	r1, #1
    b87c:	ldr	r0, [fp, #-16]
    b880:	bl	0 <flatcc_verify_field>
    b884:	str	r0, [fp, #-8]
    b888:	ldr	r3, [fp, #-8]
    b88c:	cmp	r3, #0
    b890:	beq	b89c <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x68>
    b894:	ldr	r3, [fp, #-8]
    b898:	b	b8f8 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xc4>
    b89c:	mov	r3, #1
    b8a0:	mov	r2, #1
    b8a4:	mov	r1, #2
    b8a8:	ldr	r0, [fp, #-16]
    b8ac:	bl	0 <flatcc_verify_field>
    b8b0:	str	r0, [fp, #-8]
    b8b4:	ldr	r3, [fp, #-8]
    b8b8:	cmp	r3, #0
    b8bc:	beq	b8c8 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x94>
    b8c0:	ldr	r3, [fp, #-8]
    b8c4:	b	b8f8 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xc4>
    b8c8:	mov	r3, #1
    b8cc:	mov	r2, #1
    b8d0:	mov	r1, #3
    b8d4:	ldr	r0, [fp, #-16]
    b8d8:	bl	0 <flatcc_verify_field>
    b8dc:	str	r0, [fp, #-8]
    b8e0:	ldr	r3, [fp, #-8]
    b8e4:	cmp	r3, #0
    b8e8:	beq	b8f4 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xc0>
    b8ec:	ldr	r3, [fp, #-8]
    b8f0:	b	b8f8 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xc4>
    b8f4:	mov	r3, #0
    b8f8:	mov	r0, r3
    b8fc:	sub	sp, fp, #4
    b900:	pop	{fp, pc}

0000b904 <MyGame_Example_TestInclude_verify_table>:
    b904:	push	{fp, lr}
    b908:	add	fp, sp, #4
    b90c:	sub	sp, sp, #16
    b910:	str	r0, [fp, #-16]
    b914:	mov	r3, #1
    b918:	mov	r2, #0
    b91c:	mov	r1, #0
    b920:	ldr	r0, [fp, #-16]
    b924:	bl	0 <flatcc_verify_field>
    b928:	str	r0, [fp, #-8]
    b92c:	ldr	r3, [fp, #-8]
    b930:	cmp	r3, #0
    b934:	beq	b940 <MyGame_Example_TestInclude_verify_table+0x3c>
    b938:	ldr	r3, [fp, #-8]
    b93c:	b	ba20 <MyGame_Example_TestInclude_verify_table+0x11c>
    b940:	mov	r3, #8
    b944:	mov	r2, #8
    b948:	mov	r1, #1
    b94c:	ldr	r0, [fp, #-16]
    b950:	bl	0 <flatcc_verify_field>
    b954:	str	r0, [fp, #-8]
    b958:	ldr	r3, [fp, #-8]
    b95c:	cmp	r3, #0
    b960:	beq	b96c <MyGame_Example_TestInclude_verify_table+0x68>
    b964:	ldr	r3, [fp, #-8]
    b968:	b	ba20 <MyGame_Example_TestInclude_verify_table+0x11c>
    b96c:	mov	r3, #8
    b970:	mov	r2, #8
    b974:	mov	r1, #2
    b978:	ldr	r0, [fp, #-16]
    b97c:	bl	0 <flatcc_verify_field>
    b980:	str	r0, [fp, #-8]
    b984:	ldr	r3, [fp, #-8]
    b988:	cmp	r3, #0
    b98c:	beq	b998 <MyGame_Example_TestInclude_verify_table+0x94>
    b990:	ldr	r3, [fp, #-8]
    b994:	b	ba20 <MyGame_Example_TestInclude_verify_table+0x11c>
    b998:	mov	r3, #4
    b99c:	mov	r2, #4
    b9a0:	mov	r1, #3
    b9a4:	ldr	r0, [fp, #-16]
    b9a8:	bl	0 <flatcc_verify_field>
    b9ac:	str	r0, [fp, #-8]
    b9b0:	ldr	r3, [fp, #-8]
    b9b4:	cmp	r3, #0
    b9b8:	beq	b9c4 <MyGame_Example_TestInclude_verify_table+0xc0>
    b9bc:	ldr	r3, [fp, #-8]
    b9c0:	b	ba20 <MyGame_Example_TestInclude_verify_table+0x11c>
    b9c4:	mov	r3, #8
    b9c8:	mov	r2, #8
    b9cc:	mov	r1, #4
    b9d0:	ldr	r0, [fp, #-16]
    b9d4:	bl	0 <flatcc_verify_field>
    b9d8:	str	r0, [fp, #-8]
    b9dc:	ldr	r3, [fp, #-8]
    b9e0:	cmp	r3, #0
    b9e4:	beq	b9f0 <MyGame_Example_TestInclude_verify_table+0xec>
    b9e8:	ldr	r3, [fp, #-8]
    b9ec:	b	ba20 <MyGame_Example_TestInclude_verify_table+0x11c>
    b9f0:	mov	r3, #8
    b9f4:	mov	r2, #8
    b9f8:	mov	r1, #5
    b9fc:	ldr	r0, [fp, #-16]
    ba00:	bl	0 <flatcc_verify_field>
    ba04:	str	r0, [fp, #-8]
    ba08:	ldr	r3, [fp, #-8]
    ba0c:	cmp	r3, #0
    ba10:	beq	ba1c <MyGame_Example_TestInclude_verify_table+0x118>
    ba14:	ldr	r3, [fp, #-8]
    ba18:	b	ba20 <MyGame_Example_TestInclude_verify_table+0x11c>
    ba1c:	mov	r3, #0
    ba20:	mov	r0, r3
    ba24:	sub	sp, fp, #4
    ba28:	pop	{fp, pc}

0000ba2c <MyGame_Example_Stat_verify_table>:
    ba2c:	push	{fp, lr}
    ba30:	add	fp, sp, #4
    ba34:	sub	sp, sp, #16
    ba38:	str	r0, [fp, #-16]
    ba3c:	mov	r2, #0
    ba40:	mov	r1, #0
    ba44:	ldr	r0, [fp, #-16]
    ba48:	bl	0 <flatcc_verify_string_field>
    ba4c:	str	r0, [fp, #-8]
    ba50:	ldr	r3, [fp, #-8]
    ba54:	cmp	r3, #0
    ba58:	beq	ba64 <MyGame_Example_Stat_verify_table+0x38>
    ba5c:	ldr	r3, [fp, #-8]
    ba60:	b	bac0 <MyGame_Example_Stat_verify_table+0x94>
    ba64:	mov	r3, #8
    ba68:	mov	r2, #8
    ba6c:	mov	r1, #1
    ba70:	ldr	r0, [fp, #-16]
    ba74:	bl	0 <flatcc_verify_field>
    ba78:	str	r0, [fp, #-8]
    ba7c:	ldr	r3, [fp, #-8]
    ba80:	cmp	r3, #0
    ba84:	beq	ba90 <MyGame_Example_Stat_verify_table+0x64>
    ba88:	ldr	r3, [fp, #-8]
    ba8c:	b	bac0 <MyGame_Example_Stat_verify_table+0x94>
    ba90:	mov	r3, #2
    ba94:	mov	r2, #2
    ba98:	mov	r1, #2
    ba9c:	ldr	r0, [fp, #-16]
    baa0:	bl	0 <flatcc_verify_field>
    baa4:	str	r0, [fp, #-8]
    baa8:	ldr	r3, [fp, #-8]
    baac:	cmp	r3, #0
    bab0:	beq	babc <MyGame_Example_Stat_verify_table+0x90>
    bab4:	ldr	r3, [fp, #-8]
    bab8:	b	bac0 <MyGame_Example_Stat_verify_table+0x94>
    babc:	mov	r3, #0
    bac0:	mov	r0, r3
    bac4:	sub	sp, fp, #4
    bac8:	pop	{fp, pc}

0000bacc <MyGame_Example_Alt_verify_table>:
    bacc:	push	{fp, lr}
    bad0:	add	fp, sp, #4
    bad4:	sub	sp, sp, #16
    bad8:	str	r0, [fp, #-16]
    badc:	ldr	r3, [pc, #140]	; bb70 <MyGame_Example_Alt_verify_table+0xa4>
    bae0:	mov	r2, #0
    bae4:	mov	r1, #0
    bae8:	ldr	r0, [fp, #-16]
    baec:	bl	0 <flatcc_verify_table_field>
    baf0:	str	r0, [fp, #-8]
    baf4:	ldr	r3, [fp, #-8]
    baf8:	cmp	r3, #0
    bafc:	beq	bb08 <MyGame_Example_Alt_verify_table+0x3c>
    bb00:	ldr	r3, [fp, #-8]
    bb04:	b	bb64 <MyGame_Example_Alt_verify_table+0x98>
    bb08:	ldr	r3, [pc, #100]	; bb74 <MyGame_Example_Alt_verify_table+0xa8>
    bb0c:	mov	r2, #0
    bb10:	mov	r1, #1
    bb14:	ldr	r0, [fp, #-16]
    bb18:	bl	0 <flatcc_verify_table_field>
    bb1c:	str	r0, [fp, #-8]
    bb20:	ldr	r3, [fp, #-8]
    bb24:	cmp	r3, #0
    bb28:	beq	bb34 <MyGame_Example_Alt_verify_table+0x68>
    bb2c:	ldr	r3, [fp, #-8]
    bb30:	b	bb64 <MyGame_Example_Alt_verify_table+0x98>
    bb34:	ldr	r3, [pc, #60]	; bb78 <MyGame_Example_Alt_verify_table+0xac>
    bb38:	mov	r2, #0
    bb3c:	mov	r1, #3
    bb40:	ldr	r0, [fp, #-16]
    bb44:	bl	0 <flatcc_verify_union_vector_field>
    bb48:	str	r0, [fp, #-8]
    bb4c:	ldr	r3, [fp, #-8]
    bb50:	cmp	r3, #0
    bb54:	beq	bb60 <MyGame_Example_Alt_verify_table+0x94>
    bb58:	ldr	r3, [fp, #-8]
    bb5c:	b	bb64 <MyGame_Example_Alt_verify_table+0x98>
    bb60:	mov	r3, #0
    bb64:	mov	r0, r3
    bb68:	sub	sp, fp, #4
    bb6c:	pop	{fp, pc}
	...

0000bb7c <MyGame_Example_TestJSONPrefix_verify_table>:
    bb7c:	push	{fp, lr}
    bb80:	add	fp, sp, #4
    bb84:	sub	sp, sp, #16
    bb88:	str	r0, [fp, #-16]
    bb8c:	ldr	r3, [pc, #140]	; bc20 <MyGame_Example_TestJSONPrefix_verify_table+0xa4>
    bb90:	mov	r2, #0
    bb94:	mov	r1, #0
    bb98:	ldr	r0, [fp, #-16]
    bb9c:	bl	0 <flatcc_verify_table_field>
    bba0:	str	r0, [fp, #-8]
    bba4:	ldr	r3, [fp, #-8]
    bba8:	cmp	r3, #0
    bbac:	beq	bbb8 <MyGame_Example_TestJSONPrefix_verify_table+0x3c>
    bbb0:	ldr	r3, [fp, #-8]
    bbb4:	b	bc14 <MyGame_Example_TestJSONPrefix_verify_table+0x98>
    bbb8:	ldr	r3, [pc, #100]	; bc24 <MyGame_Example_TestJSONPrefix_verify_table+0xa8>
    bbbc:	mov	r2, #0
    bbc0:	mov	r1, #1
    bbc4:	ldr	r0, [fp, #-16]
    bbc8:	bl	0 <flatcc_verify_table_field>
    bbcc:	str	r0, [fp, #-8]
    bbd0:	ldr	r3, [fp, #-8]
    bbd4:	cmp	r3, #0
    bbd8:	beq	bbe4 <MyGame_Example_TestJSONPrefix_verify_table+0x68>
    bbdc:	ldr	r3, [fp, #-8]
    bbe0:	b	bc14 <MyGame_Example_TestJSONPrefix_verify_table+0x98>
    bbe4:	ldr	r3, [pc, #60]	; bc28 <MyGame_Example_TestJSONPrefix_verify_table+0xac>
    bbe8:	mov	r2, #0
    bbec:	mov	r1, #2
    bbf0:	ldr	r0, [fp, #-16]
    bbf4:	bl	0 <flatcc_verify_table_field>
    bbf8:	str	r0, [fp, #-8]
    bbfc:	ldr	r3, [fp, #-8]
    bc00:	cmp	r3, #0
    bc04:	beq	bc10 <MyGame_Example_TestJSONPrefix_verify_table+0x94>
    bc08:	ldr	r3, [fp, #-8]
    bc0c:	b	bc14 <MyGame_Example_TestJSONPrefix_verify_table+0x98>
    bc10:	mov	r3, #0
    bc14:	mov	r0, r3
    bc18:	sub	sp, fp, #4
    bc1c:	pop	{fp, pc}
	...

0000bc2c <MyGame_Example_TestJSONPrefixParsing_verify_table>:
    bc2c:	push	{fp, lr}
    bc30:	add	fp, sp, #4
    bc34:	sub	sp, sp, #16
    bc38:	str	r0, [fp, #-16]
    bc3c:	mov	r2, #0
    bc40:	mov	r1, #0
    bc44:	ldr	r0, [fp, #-16]
    bc48:	bl	0 <flatcc_verify_string_field>
    bc4c:	str	r0, [fp, #-8]
    bc50:	ldr	r3, [fp, #-8]
    bc54:	cmp	r3, #0
    bc58:	beq	bc64 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x38>
    bc5c:	ldr	r3, [fp, #-8]
    bc60:	b	bdc0 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x194>
    bc64:	mov	r3, #4
    bc68:	mov	r2, #4
    bc6c:	mov	r1, #1
    bc70:	ldr	r0, [fp, #-16]
    bc74:	bl	0 <flatcc_verify_field>
    bc78:	str	r0, [fp, #-8]
    bc7c:	ldr	r3, [fp, #-8]
    bc80:	cmp	r3, #0
    bc84:	beq	bc90 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x64>
    bc88:	ldr	r3, [fp, #-8]
    bc8c:	b	bdc0 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x194>
    bc90:	mov	r2, #0
    bc94:	mov	r1, #2
    bc98:	ldr	r0, [fp, #-16]
    bc9c:	bl	0 <flatcc_verify_string_field>
    bca0:	str	r0, [fp, #-8]
    bca4:	ldr	r3, [fp, #-8]
    bca8:	cmp	r3, #0
    bcac:	beq	bcb8 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x8c>
    bcb0:	ldr	r3, [fp, #-8]
    bcb4:	b	bdc0 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x194>
    bcb8:	mov	r3, #8
    bcbc:	mov	r2, #8
    bcc0:	mov	r1, #3
    bcc4:	ldr	r0, [fp, #-16]
    bcc8:	bl	0 <flatcc_verify_field>
    bccc:	str	r0, [fp, #-8]
    bcd0:	ldr	r3, [fp, #-8]
    bcd4:	cmp	r3, #0
    bcd8:	beq	bce4 <MyGame_Example_TestJSONPrefixParsing_verify_table+0xb8>
    bcdc:	ldr	r3, [fp, #-8]
    bce0:	b	bdc0 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x194>
    bce4:	mov	r2, #0
    bce8:	mov	r1, #4
    bcec:	ldr	r0, [fp, #-16]
    bcf0:	bl	0 <flatcc_verify_string_field>
    bcf4:	str	r0, [fp, #-8]
    bcf8:	ldr	r3, [fp, #-8]
    bcfc:	cmp	r3, #0
    bd00:	beq	bd0c <MyGame_Example_TestJSONPrefixParsing_verify_table+0xe0>
    bd04:	ldr	r3, [fp, #-8]
    bd08:	b	bdc0 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x194>
    bd0c:	mov	r3, #8
    bd10:	mov	r2, #8
    bd14:	mov	r1, #5
    bd18:	ldr	r0, [fp, #-16]
    bd1c:	bl	0 <flatcc_verify_field>
    bd20:	str	r0, [fp, #-8]
    bd24:	ldr	r3, [fp, #-8]
    bd28:	cmp	r3, #0
    bd2c:	beq	bd38 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x10c>
    bd30:	ldr	r3, [fp, #-8]
    bd34:	b	bdc0 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x194>
    bd38:	mov	r3, #4
    bd3c:	mov	r2, #4
    bd40:	mov	r1, #6
    bd44:	ldr	r0, [fp, #-16]
    bd48:	bl	0 <flatcc_verify_field>
    bd4c:	str	r0, [fp, #-8]
    bd50:	ldr	r3, [fp, #-8]
    bd54:	cmp	r3, #0
    bd58:	beq	bd64 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x138>
    bd5c:	ldr	r3, [fp, #-8]
    bd60:	b	bdc0 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x194>
    bd64:	mov	r3, #8
    bd68:	mov	r2, #8
    bd6c:	mov	r1, #7
    bd70:	ldr	r0, [fp, #-16]
    bd74:	bl	0 <flatcc_verify_field>
    bd78:	str	r0, [fp, #-8]
    bd7c:	ldr	r3, [fp, #-8]
    bd80:	cmp	r3, #0
    bd84:	beq	bd90 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x164>
    bd88:	ldr	r3, [fp, #-8]
    bd8c:	b	bdc0 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x194>
    bd90:	mov	r3, #4
    bd94:	mov	r2, #4
    bd98:	mov	r1, #8
    bd9c:	ldr	r0, [fp, #-16]
    bda0:	bl	0 <flatcc_verify_field>
    bda4:	str	r0, [fp, #-8]
    bda8:	ldr	r3, [fp, #-8]
    bdac:	cmp	r3, #0
    bdb0:	beq	bdbc <MyGame_Example_TestJSONPrefixParsing_verify_table+0x190>
    bdb4:	ldr	r3, [fp, #-8]
    bdb8:	b	bdc0 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x194>
    bdbc:	mov	r3, #0
    bdc0:	mov	r0, r3
    bdc4:	sub	sp, fp, #4
    bdc8:	pop	{fp, pc}

0000bdcc <MyGame_Example_TestJSONPrefixParsing2_verify_table>:
    bdcc:	push	{fp, lr}
    bdd0:	add	fp, sp, #4
    bdd4:	sub	sp, sp, #16
    bdd8:	str	r0, [fp, #-16]
    bddc:	mov	r3, #8
    bde0:	mov	r2, #8
    bde4:	mov	r1, #0
    bde8:	ldr	r0, [fp, #-16]
    bdec:	bl	0 <flatcc_verify_field>
    bdf0:	str	r0, [fp, #-8]
    bdf4:	ldr	r3, [fp, #-8]
    bdf8:	cmp	r3, #0
    bdfc:	beq	be08 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x3c>
    be00:	ldr	r3, [fp, #-8]
    be04:	b	be38 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x6c>
    be08:	mov	r3, #4
    be0c:	mov	r2, #4
    be10:	mov	r1, #1
    be14:	ldr	r0, [fp, #-16]
    be18:	bl	0 <flatcc_verify_field>
    be1c:	str	r0, [fp, #-8]
    be20:	ldr	r3, [fp, #-8]
    be24:	cmp	r3, #0
    be28:	beq	be34 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x68>
    be2c:	ldr	r3, [fp, #-8]
    be30:	b	be38 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x6c>
    be34:	mov	r3, #0
    be38:	mov	r0, r3
    be3c:	sub	sp, fp, #4
    be40:	pop	{fp, pc}

0000be44 <MyGame_Example_TestJSONPrefixParsing3_verify_table>:
    be44:	push	{fp, lr}
    be48:	add	fp, sp, #4
    be4c:	sub	sp, sp, #16
    be50:	str	r0, [fp, #-16]
    be54:	mov	r3, #8
    be58:	mov	r2, #8
    be5c:	mov	r1, #0
    be60:	ldr	r0, [fp, #-16]
    be64:	bl	0 <flatcc_verify_field>
    be68:	str	r0, [fp, #-8]
    be6c:	ldr	r3, [fp, #-8]
    be70:	cmp	r3, #0
    be74:	beq	be80 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x3c>
    be78:	ldr	r3, [fp, #-8]
    be7c:	b	beb0 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x6c>
    be80:	mov	r3, #4
    be84:	mov	r2, #4
    be88:	mov	r1, #1
    be8c:	ldr	r0, [fp, #-16]
    be90:	bl	0 <flatcc_verify_field>
    be94:	str	r0, [fp, #-8]
    be98:	ldr	r3, [fp, #-8]
    be9c:	cmp	r3, #0
    bea0:	beq	beac <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x68>
    bea4:	ldr	r3, [fp, #-8]
    bea8:	b	beb0 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x6c>
    beac:	mov	r3, #0
    beb0:	mov	r0, r3
    beb4:	sub	sp, fp, #4
    beb8:	pop	{fp, pc}

0000bebc <MyGame_Example_TestBase64_verify_table>:
    bebc:	push	{fp, lr}
    bec0:	add	fp, sp, #4
    bec4:	sub	sp, sp, #24
    bec8:	str	r0, [fp, #-16]
    becc:	mvn	r3, #0
    bed0:	str	r3, [sp, #4]
    bed4:	mov	r3, #1
    bed8:	str	r3, [sp]
    bedc:	mov	r3, #1
    bee0:	mov	r2, #0
    bee4:	mov	r1, #0
    bee8:	ldr	r0, [fp, #-16]
    beec:	bl	0 <flatcc_verify_vector_field>
    bef0:	str	r0, [fp, #-8]
    bef4:	ldr	r3, [fp, #-8]
    bef8:	cmp	r3, #0
    befc:	beq	bf08 <MyGame_Example_TestBase64_verify_table+0x4c>
    bf00:	ldr	r3, [fp, #-8]
    bf04:	b	bf84 <MyGame_Example_TestBase64_verify_table+0xc8>
    bf08:	mvn	r3, #0
    bf0c:	str	r3, [sp, #4]
    bf10:	mov	r3, #1
    bf14:	str	r3, [sp]
    bf18:	mov	r3, #1
    bf1c:	mov	r2, #0
    bf20:	mov	r1, #1
    bf24:	ldr	r0, [fp, #-16]
    bf28:	bl	0 <flatcc_verify_vector_field>
    bf2c:	str	r0, [fp, #-8]
    bf30:	ldr	r3, [fp, #-8]
    bf34:	cmp	r3, #0
    bf38:	beq	bf44 <MyGame_Example_TestBase64_verify_table+0x88>
    bf3c:	ldr	r3, [fp, #-8]
    bf40:	b	bf84 <MyGame_Example_TestBase64_verify_table+0xc8>
    bf44:	ldr	r3, [pc, #68]	; bf90 <MyGame_Example_TestBase64_verify_table+0xd4>
    bf48:	str	r3, [sp, #4]
    bf4c:	mov	r3, #1
    bf50:	str	r3, [sp]
    bf54:	mov	r3, #0
    bf58:	mov	r2, #0
    bf5c:	mov	r1, #2
    bf60:	ldr	r0, [fp, #-16]
    bf64:	bl	0 <flatcc_verify_table_as_nested_root>
    bf68:	str	r0, [fp, #-8]
    bf6c:	ldr	r3, [fp, #-8]
    bf70:	cmp	r3, #0
    bf74:	beq	bf80 <MyGame_Example_TestBase64_verify_table+0xc4>
    bf78:	ldr	r3, [fp, #-8]
    bf7c:	b	bf84 <MyGame_Example_TestBase64_verify_table+0xc8>
    bf80:	mov	r3, #0
    bf84:	mov	r0, r3
    bf88:	sub	sp, fp, #4
    bf8c:	pop	{fp, pc}
    bf90:	.word	0x00000000

0000bf94 <MyGame_Example_Monster_verify_table>:
    bf94:	push	{fp, lr}
    bf98:	add	fp, sp, #4
    bf9c:	sub	sp, sp, #24
    bfa0:	str	r0, [fp, #-16]
    bfa4:	mov	r3, #16
    bfa8:	mov	r2, #32
    bfac:	mov	r1, #0
    bfb0:	ldr	r0, [fp, #-16]
    bfb4:	bl	0 <flatcc_verify_field>
    bfb8:	str	r0, [fp, #-8]
    bfbc:	ldr	r3, [fp, #-8]
    bfc0:	cmp	r3, #0
    bfc4:	beq	bfd0 <MyGame_Example_Monster_verify_table+0x3c>
    bfc8:	ldr	r3, [fp, #-8]
    bfcc:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    bfd0:	mov	r3, #2
    bfd4:	mov	r2, #2
    bfd8:	mov	r1, #2
    bfdc:	ldr	r0, [fp, #-16]
    bfe0:	bl	0 <flatcc_verify_field>
    bfe4:	str	r0, [fp, #-8]
    bfe8:	ldr	r3, [fp, #-8]
    bfec:	cmp	r3, #0
    bff0:	beq	bffc <MyGame_Example_Monster_verify_table+0x68>
    bff4:	ldr	r3, [fp, #-8]
    bff8:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    bffc:	mov	r3, #2
    c000:	mov	r2, #2
    c004:	mov	r1, #1
    c008:	ldr	r0, [fp, #-16]
    c00c:	bl	0 <flatcc_verify_field>
    c010:	str	r0, [fp, #-8]
    c014:	ldr	r3, [fp, #-8]
    c018:	cmp	r3, #0
    c01c:	beq	c028 <MyGame_Example_Monster_verify_table+0x94>
    c020:	ldr	r3, [fp, #-8]
    c024:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c028:	mov	r2, #1
    c02c:	mov	r1, #3
    c030:	ldr	r0, [fp, #-16]
    c034:	bl	0 <flatcc_verify_string_field>
    c038:	str	r0, [fp, #-8]
    c03c:	ldr	r3, [fp, #-8]
    c040:	cmp	r3, #0
    c044:	beq	c050 <MyGame_Example_Monster_verify_table+0xbc>
    c048:	ldr	r3, [fp, #-8]
    c04c:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c050:	mov	r3, #1
    c054:	mov	r2, #1
    c058:	mov	r1, #6
    c05c:	ldr	r0, [fp, #-16]
    c060:	bl	0 <flatcc_verify_field>
    c064:	str	r0, [fp, #-8]
    c068:	ldr	r3, [fp, #-8]
    c06c:	cmp	r3, #0
    c070:	beq	c07c <MyGame_Example_Monster_verify_table+0xe8>
    c074:	ldr	r3, [fp, #-8]
    c078:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c07c:	mvn	r3, #0
    c080:	str	r3, [sp, #4]
    c084:	mov	r3, #1
    c088:	str	r3, [sp]
    c08c:	mov	r3, #1
    c090:	mov	r2, #0
    c094:	mov	r1, #5
    c098:	ldr	r0, [fp, #-16]
    c09c:	bl	0 <flatcc_verify_vector_field>
    c0a0:	str	r0, [fp, #-8]
    c0a4:	ldr	r3, [fp, #-8]
    c0a8:	cmp	r3, #0
    c0ac:	beq	c0b8 <MyGame_Example_Monster_verify_table+0x124>
    c0b0:	ldr	r3, [fp, #-8]
    c0b4:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c0b8:	ldr	r3, [pc, #1360]	; c610 <MyGame_Example_Monster_verify_table+0x67c>
    c0bc:	mov	r2, #0
    c0c0:	mov	r1, #11
    c0c4:	ldr	r0, [fp, #-16]
    c0c8:	bl	0 <flatcc_verify_table_vector_field>
    c0cc:	str	r0, [fp, #-8]
    c0d0:	ldr	r3, [fp, #-8]
    c0d4:	cmp	r3, #0
    c0d8:	beq	c0e4 <MyGame_Example_Monster_verify_table+0x150>
    c0dc:	ldr	r3, [fp, #-8]
    c0e0:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c0e4:	mov	r2, #0
    c0e8:	mov	r1, #10
    c0ec:	ldr	r0, [fp, #-16]
    c0f0:	bl	0 <flatcc_verify_string_vector_field>
    c0f4:	str	r0, [fp, #-8]
    c0f8:	ldr	r3, [fp, #-8]
    c0fc:	cmp	r3, #0
    c100:	beq	c10c <MyGame_Example_Monster_verify_table+0x178>
    c104:	ldr	r3, [fp, #-8]
    c108:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c10c:	mov	r2, #0
    c110:	mov	r1, #28
    c114:	ldr	r0, [fp, #-16]
    c118:	bl	0 <flatcc_verify_string_vector_field>
    c11c:	str	r0, [fp, #-8]
    c120:	ldr	r3, [fp, #-8]
    c124:	cmp	r3, #0
    c128:	beq	c134 <MyGame_Example_Monster_verify_table+0x1a0>
    c12c:	ldr	r3, [fp, #-8]
    c130:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c134:	mvn	r3, #0
    c138:	str	r3, [sp, #4]
    c13c:	mov	r3, #1
    c140:	str	r3, [sp]
    c144:	mov	r3, #1
    c148:	mov	r2, #0
    c14c:	mov	r1, #24
    c150:	ldr	r0, [fp, #-16]
    c154:	bl	0 <flatcc_verify_vector_field>
    c158:	str	r0, [fp, #-8]
    c15c:	ldr	r3, [fp, #-8]
    c160:	cmp	r3, #0
    c164:	beq	c170 <MyGame_Example_Monster_verify_table+0x1dc>
    c168:	ldr	r3, [fp, #-8]
    c16c:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c170:	mvn	r3, #-536870912	; 0xe0000000
    c174:	str	r3, [sp, #4]
    c178:	mov	r3, #4
    c17c:	str	r3, [sp]
    c180:	mov	r3, #8
    c184:	mov	r2, #0
    c188:	mov	r1, #29
    c18c:	ldr	r0, [fp, #-16]
    c190:	bl	0 <flatcc_verify_vector_field>
    c194:	str	r0, [fp, #-8]
    c198:	ldr	r3, [fp, #-8]
    c19c:	cmp	r3, #0
    c1a0:	beq	c1ac <MyGame_Example_Monster_verify_table+0x218>
    c1a4:	ldr	r3, [fp, #-8]
    c1a8:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c1ac:	ldr	r3, [pc, #1116]	; c610 <MyGame_Example_Monster_verify_table+0x67c>
    c1b0:	mov	r2, #0
    c1b4:	mov	r1, #12
    c1b8:	ldr	r0, [fp, #-16]
    c1bc:	bl	0 <flatcc_verify_table_field>
    c1c0:	str	r0, [fp, #-8]
    c1c4:	ldr	r3, [fp, #-8]
    c1c8:	cmp	r3, #0
    c1cc:	beq	c1d8 <MyGame_Example_Monster_verify_table+0x244>
    c1d0:	ldr	r3, [fp, #-8]
    c1d4:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c1d8:	ldr	r3, [pc, #1076]	; c614 <MyGame_Example_Monster_verify_table+0x680>
    c1dc:	mov	r2, #0
    c1e0:	mov	r1, #8
    c1e4:	ldr	r0, [fp, #-16]
    c1e8:	bl	0 <flatcc_verify_union_field>
    c1ec:	str	r0, [fp, #-8]
    c1f0:	ldr	r3, [fp, #-8]
    c1f4:	cmp	r3, #0
    c1f8:	beq	c204 <MyGame_Example_Monster_verify_table+0x270>
    c1fc:	ldr	r3, [fp, #-8]
    c200:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c204:	mvn	r3, #-1073741824	; 0xc0000000
    c208:	str	r3, [sp, #4]
    c20c:	mov	r3, #2
    c210:	str	r3, [sp]
    c214:	mov	r3, #4
    c218:	mov	r2, #0
    c21c:	mov	r1, #9
    c220:	ldr	r0, [fp, #-16]
    c224:	bl	0 <flatcc_verify_vector_field>
    c228:	str	r0, [fp, #-8]
    c22c:	ldr	r3, [fp, #-8]
    c230:	cmp	r3, #0
    c234:	beq	c240 <MyGame_Example_Monster_verify_table+0x2ac>
    c238:	ldr	r3, [fp, #-8]
    c23c:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c240:	mvn	r3, #-1073741824	; 0xc0000000
    c244:	str	r3, [sp, #4]
    c248:	mov	r3, #2
    c24c:	str	r3, [sp]
    c250:	mov	r3, #4
    c254:	mov	r2, #0
    c258:	mov	r1, #31
    c25c:	ldr	r0, [fp, #-16]
    c260:	bl	0 <flatcc_verify_vector_field>
    c264:	str	r0, [fp, #-8]
    c268:	ldr	r3, [fp, #-8]
    c26c:	cmp	r3, #0
    c270:	beq	c27c <MyGame_Example_Monster_verify_table+0x2e8>
    c274:	ldr	r3, [fp, #-8]
    c278:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c27c:	ldr	r3, [pc, #908]	; c610 <MyGame_Example_Monster_verify_table+0x67c>
    c280:	str	r3, [sp, #4]
    c284:	mov	r3, #1
    c288:	str	r3, [sp]
    c28c:	mov	r3, #0
    c290:	mov	r2, #0
    c294:	mov	r1, #13
    c298:	ldr	r0, [fp, #-16]
    c29c:	bl	0 <flatcc_verify_table_as_nested_root>
    c2a0:	str	r0, [fp, #-8]
    c2a4:	ldr	r3, [fp, #-8]
    c2a8:	cmp	r3, #0
    c2ac:	beq	c2b8 <MyGame_Example_Monster_verify_table+0x324>
    c2b0:	ldr	r3, [fp, #-8]
    c2b4:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c2b8:	ldr	r3, [pc, #856]	; c618 <MyGame_Example_Monster_verify_table+0x684>
    c2bc:	mov	r2, #0
    c2c0:	mov	r1, #14
    c2c4:	ldr	r0, [fp, #-16]
    c2c8:	bl	0 <flatcc_verify_table_field>
    c2cc:	str	r0, [fp, #-8]
    c2d0:	ldr	r3, [fp, #-8]
    c2d4:	cmp	r3, #0
    c2d8:	beq	c2e4 <MyGame_Example_Monster_verify_table+0x350>
    c2dc:	ldr	r3, [fp, #-8]
    c2e0:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c2e4:	mov	r3, #1
    c2e8:	mov	r2, #1
    c2ec:	mov	r1, #15
    c2f0:	ldr	r0, [fp, #-16]
    c2f4:	bl	0 <flatcc_verify_field>
    c2f8:	str	r0, [fp, #-8]
    c2fc:	ldr	r3, [fp, #-8]
    c300:	cmp	r3, #0
    c304:	beq	c310 <MyGame_Example_Monster_verify_table+0x37c>
    c308:	ldr	r3, [fp, #-8]
    c30c:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c310:	mov	r3, #4
    c314:	mov	r2, #4
    c318:	mov	r1, #16
    c31c:	ldr	r0, [fp, #-16]
    c320:	bl	0 <flatcc_verify_field>
    c324:	str	r0, [fp, #-8]
    c328:	ldr	r3, [fp, #-8]
    c32c:	cmp	r3, #0
    c330:	beq	c33c <MyGame_Example_Monster_verify_table+0x3a8>
    c334:	ldr	r3, [fp, #-8]
    c338:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c33c:	mov	r3, #4
    c340:	mov	r2, #4
    c344:	mov	r1, #17
    c348:	ldr	r0, [fp, #-16]
    c34c:	bl	0 <flatcc_verify_field>
    c350:	str	r0, [fp, #-8]
    c354:	ldr	r3, [fp, #-8]
    c358:	cmp	r3, #0
    c35c:	beq	c368 <MyGame_Example_Monster_verify_table+0x3d4>
    c360:	ldr	r3, [fp, #-8]
    c364:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c368:	mov	r3, #8
    c36c:	mov	r2, #8
    c370:	mov	r1, #18
    c374:	ldr	r0, [fp, #-16]
    c378:	bl	0 <flatcc_verify_field>
    c37c:	str	r0, [fp, #-8]
    c380:	ldr	r3, [fp, #-8]
    c384:	cmp	r3, #0
    c388:	beq	c394 <MyGame_Example_Monster_verify_table+0x400>
    c38c:	ldr	r3, [fp, #-8]
    c390:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c394:	mov	r3, #8
    c398:	mov	r2, #8
    c39c:	mov	r1, #19
    c3a0:	ldr	r0, [fp, #-16]
    c3a4:	bl	0 <flatcc_verify_field>
    c3a8:	str	r0, [fp, #-8]
    c3ac:	ldr	r3, [fp, #-8]
    c3b0:	cmp	r3, #0
    c3b4:	beq	c3c0 <MyGame_Example_Monster_verify_table+0x42c>
    c3b8:	ldr	r3, [fp, #-8]
    c3bc:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c3c0:	mov	r3, #4
    c3c4:	mov	r2, #4
    c3c8:	mov	r1, #20
    c3cc:	ldr	r0, [fp, #-16]
    c3d0:	bl	0 <flatcc_verify_field>
    c3d4:	str	r0, [fp, #-8]
    c3d8:	ldr	r3, [fp, #-8]
    c3dc:	cmp	r3, #0
    c3e0:	beq	c3ec <MyGame_Example_Monster_verify_table+0x458>
    c3e4:	ldr	r3, [fp, #-8]
    c3e8:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c3ec:	mov	r3, #4
    c3f0:	mov	r2, #4
    c3f4:	mov	r1, #21
    c3f8:	ldr	r0, [fp, #-16]
    c3fc:	bl	0 <flatcc_verify_field>
    c400:	str	r0, [fp, #-8]
    c404:	ldr	r3, [fp, #-8]
    c408:	cmp	r3, #0
    c40c:	beq	c418 <MyGame_Example_Monster_verify_table+0x484>
    c410:	ldr	r3, [fp, #-8]
    c414:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c418:	mov	r3, #8
    c41c:	mov	r2, #8
    c420:	mov	r1, #22
    c424:	ldr	r0, [fp, #-16]
    c428:	bl	0 <flatcc_verify_field>
    c42c:	str	r0, [fp, #-8]
    c430:	ldr	r3, [fp, #-8]
    c434:	cmp	r3, #0
    c438:	beq	c444 <MyGame_Example_Monster_verify_table+0x4b0>
    c43c:	ldr	r3, [fp, #-8]
    c440:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c444:	mov	r3, #8
    c448:	mov	r2, #8
    c44c:	mov	r1, #23
    c450:	ldr	r0, [fp, #-16]
    c454:	bl	0 <flatcc_verify_field>
    c458:	str	r0, [fp, #-8]
    c45c:	ldr	r3, [fp, #-8]
    c460:	cmp	r3, #0
    c464:	beq	c470 <MyGame_Example_Monster_verify_table+0x4dc>
    c468:	ldr	r3, [fp, #-8]
    c46c:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c470:	mov	r3, #4
    c474:	mov	r2, #4
    c478:	mov	r1, #25
    c47c:	ldr	r0, [fp, #-16]
    c480:	bl	0 <flatcc_verify_field>
    c484:	str	r0, [fp, #-8]
    c488:	ldr	r3, [fp, #-8]
    c48c:	cmp	r3, #0
    c490:	beq	c49c <MyGame_Example_Monster_verify_table+0x508>
    c494:	ldr	r3, [fp, #-8]
    c498:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c49c:	mov	r3, #4
    c4a0:	mov	r2, #4
    c4a4:	mov	r1, #26
    c4a8:	ldr	r0, [fp, #-16]
    c4ac:	bl	0 <flatcc_verify_field>
    c4b0:	str	r0, [fp, #-8]
    c4b4:	ldr	r3, [fp, #-8]
    c4b8:	cmp	r3, #0
    c4bc:	beq	c4c8 <MyGame_Example_Monster_verify_table+0x534>
    c4c0:	ldr	r3, [fp, #-8]
    c4c4:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c4c8:	mov	r3, #4
    c4cc:	mov	r2, #4
    c4d0:	mov	r1, #27
    c4d4:	ldr	r0, [fp, #-16]
    c4d8:	bl	0 <flatcc_verify_field>
    c4dc:	str	r0, [fp, #-8]
    c4e0:	ldr	r3, [fp, #-8]
    c4e4:	cmp	r3, #0
    c4e8:	beq	c4f4 <MyGame_Example_Monster_verify_table+0x560>
    c4ec:	ldr	r3, [fp, #-8]
    c4f0:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c4f4:	mvn	r3, #0
    c4f8:	str	r3, [sp, #4]
    c4fc:	mov	r3, #1
    c500:	str	r3, [sp]
    c504:	mov	r3, #1
    c508:	mov	r2, #0
    c50c:	mov	r1, #30
    c510:	ldr	r0, [fp, #-16]
    c514:	bl	0 <flatcc_verify_vector_field>
    c518:	str	r0, [fp, #-8]
    c51c:	ldr	r3, [fp, #-8]
    c520:	cmp	r3, #0
    c524:	beq	c530 <MyGame_Example_Monster_verify_table+0x59c>
    c528:	ldr	r3, [fp, #-8]
    c52c:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c530:	mvn	r3, #-536870912	; 0xe0000000
    c534:	str	r3, [sp, #4]
    c538:	mov	r3, #8
    c53c:	str	r3, [sp]
    c540:	mov	r3, #8
    c544:	mov	r2, #0
    c548:	mov	r1, #32
    c54c:	ldr	r0, [fp, #-16]
    c550:	bl	0 <flatcc_verify_vector_field>
    c554:	str	r0, [fp, #-8]
    c558:	ldr	r3, [fp, #-8]
    c55c:	cmp	r3, #0
    c560:	beq	c56c <MyGame_Example_Monster_verify_table+0x5d8>
    c564:	ldr	r3, [fp, #-8]
    c568:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c56c:	mvn	r3, #-536870912	; 0xe0000000
    c570:	str	r3, [sp, #4]
    c574:	mov	r3, #8
    c578:	str	r3, [sp]
    c57c:	mov	r3, #8
    c580:	mov	r2, #0
    c584:	mov	r1, #33	; 0x21
    c588:	ldr	r0, [fp, #-16]
    c58c:	bl	0 <flatcc_verify_vector_field>
    c590:	str	r0, [fp, #-8]
    c594:	ldr	r3, [fp, #-8]
    c598:	cmp	r3, #0
    c59c:	beq	c5a8 <MyGame_Example_Monster_verify_table+0x614>
    c5a0:	ldr	r3, [fp, #-8]
    c5a4:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c5a8:	ldr	r3, [pc, #108]	; c61c <MyGame_Example_Monster_verify_table+0x688>
    c5ac:	mov	r2, #0
    c5b0:	mov	r1, #34	; 0x22
    c5b4:	ldr	r0, [fp, #-16]
    c5b8:	bl	0 <flatcc_verify_table_field>
    c5bc:	str	r0, [fp, #-8]
    c5c0:	ldr	r3, [fp, #-8]
    c5c4:	cmp	r3, #0
    c5c8:	beq	c5d4 <MyGame_Example_Monster_verify_table+0x640>
    c5cc:	ldr	r3, [fp, #-8]
    c5d0:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c5d4:	ldr	r3, [pc, #68]	; c620 <MyGame_Example_Monster_verify_table+0x68c>
    c5d8:	mov	r2, #0
    c5dc:	mov	r1, #35	; 0x23
    c5e0:	ldr	r0, [fp, #-16]
    c5e4:	bl	0 <flatcc_verify_table_field>
    c5e8:	str	r0, [fp, #-8]
    c5ec:	ldr	r3, [fp, #-8]
    c5f0:	cmp	r3, #0
    c5f4:	beq	c600 <MyGame_Example_Monster_verify_table+0x66c>
    c5f8:	ldr	r3, [fp, #-8]
    c5fc:	b	c604 <MyGame_Example_Monster_verify_table+0x670>
    c600:	mov	r3, #0
    c604:	mov	r0, r3
    c608:	sub	sp, fp, #4
    c60c:	pop	{fp, pc}
	...

0000c624 <MyGame_Example_Monster_verify_as_root>:
    c624:	push	{fp, lr}
    c628:	add	fp, sp, #4
    c62c:	sub	sp, sp, #8
    c630:	str	r0, [fp, #-8]
    c634:	str	r1, [fp, #-12]
    c638:	ldr	r3, [pc, #28]	; c65c <MyGame_Example_Monster_verify_as_root+0x38>
    c63c:	ldr	r2, [pc, #28]	; c660 <MyGame_Example_Monster_verify_as_root+0x3c>
    c640:	ldr	r1, [fp, #-12]
    c644:	ldr	r0, [fp, #-8]
    c648:	bl	0 <flatcc_verify_table_as_root>
    c64c:	mov	r3, r0
    c650:	mov	r0, r3
    c654:	sub	sp, fp, #4
    c658:	pop	{fp, pc}
    c65c:	.word	0x00000000
    c660:	.word	0x00000134

0000c664 <MyGame_Example_Monster_verify_as_typed_root>:
    c664:	push	{fp, lr}
    c668:	add	fp, sp, #4
    c66c:	sub	sp, sp, #8
    c670:	str	r0, [fp, #-8]
    c674:	str	r1, [fp, #-12]
    c678:	ldr	r3, [pc, #28]	; c69c <MyGame_Example_Monster_verify_as_typed_root+0x38>
    c67c:	ldr	r2, [pc, #28]	; c6a0 <MyGame_Example_Monster_verify_as_typed_root+0x3c>
    c680:	ldr	r1, [fp, #-12]
    c684:	ldr	r0, [fp, #-8]
    c688:	bl	0 <flatcc_verify_table_as_root>
    c68c:	mov	r3, r0
    c690:	mov	r0, r3
    c694:	sub	sp, fp, #4
    c698:	pop	{fp, pc}
    c69c:	.word	0x00000000
    c6a0:	.word	0x00000804

0000c6a4 <MyGame_Example_Monster_verify_as_root_with_identifier>:
    c6a4:	push	{fp, lr}
    c6a8:	add	fp, sp, #4
    c6ac:	sub	sp, sp, #16
    c6b0:	str	r0, [fp, #-8]
    c6b4:	str	r1, [fp, #-12]
    c6b8:	str	r2, [fp, #-16]
    c6bc:	ldr	r3, [pc, #28]	; c6e0 <MyGame_Example_Monster_verify_as_root_with_identifier+0x3c>
    c6c0:	ldr	r2, [fp, #-16]
    c6c4:	ldr	r1, [fp, #-12]
    c6c8:	ldr	r0, [fp, #-8]
    c6cc:	bl	0 <flatcc_verify_table_as_root>
    c6d0:	mov	r3, r0
    c6d4:	mov	r0, r3
    c6d8:	sub	sp, fp, #4
    c6dc:	pop	{fp, pc}
    c6e0:	.word	0x00000000

0000c6e4 <MyGame_Example_Monster_verify_as_root_with_type_hash>:
    c6e4:	push	{fp, lr}
    c6e8:	add	fp, sp, #4
    c6ec:	sub	sp, sp, #16
    c6f0:	str	r0, [fp, #-8]
    c6f4:	str	r1, [fp, #-12]
    c6f8:	str	r2, [fp, #-16]
    c6fc:	ldr	r3, [pc, #28]	; c720 <MyGame_Example_Monster_verify_as_root_with_type_hash+0x3c>
    c700:	ldr	r2, [fp, #-16]
    c704:	ldr	r1, [fp, #-12]
    c708:	ldr	r0, [fp, #-8]
    c70c:	bl	0 <flatcc_verify_table_as_typed_root>
    c710:	mov	r3, r0
    c714:	mov	r0, r3
    c718:	sub	sp, fp, #4
    c71c:	pop	{fp, pc}
    c720:	.word	0x00000000

0000c724 <MyGame_Example_TypeAliases_verify_table>:
    c724:	push	{fp, lr}
    c728:	add	fp, sp, #4
    c72c:	sub	sp, sp, #24
    c730:	str	r0, [fp, #-16]
    c734:	mov	r3, #1
    c738:	mov	r2, #1
    c73c:	mov	r1, #0
    c740:	ldr	r0, [fp, #-16]
    c744:	bl	0 <flatcc_verify_field>
    c748:	str	r0, [fp, #-8]
    c74c:	ldr	r3, [fp, #-8]
    c750:	cmp	r3, #0
    c754:	beq	c760 <MyGame_Example_TypeAliases_verify_table+0x3c>
    c758:	ldr	r3, [fp, #-8]
    c75c:	b	c968 <MyGame_Example_TypeAliases_verify_table+0x244>
    c760:	mov	r3, #1
    c764:	mov	r2, #1
    c768:	mov	r1, #1
    c76c:	ldr	r0, [fp, #-16]
    c770:	bl	0 <flatcc_verify_field>
    c774:	str	r0, [fp, #-8]
    c778:	ldr	r3, [fp, #-8]
    c77c:	cmp	r3, #0
    c780:	beq	c78c <MyGame_Example_TypeAliases_verify_table+0x68>
    c784:	ldr	r3, [fp, #-8]
    c788:	b	c968 <MyGame_Example_TypeAliases_verify_table+0x244>
    c78c:	mov	r3, #2
    c790:	mov	r2, #2
    c794:	mov	r1, #2
    c798:	ldr	r0, [fp, #-16]
    c79c:	bl	0 <flatcc_verify_field>
    c7a0:	str	r0, [fp, #-8]
    c7a4:	ldr	r3, [fp, #-8]
    c7a8:	cmp	r3, #0
    c7ac:	beq	c7b8 <MyGame_Example_TypeAliases_verify_table+0x94>
    c7b0:	ldr	r3, [fp, #-8]
    c7b4:	b	c968 <MyGame_Example_TypeAliases_verify_table+0x244>
    c7b8:	mov	r3, #2
    c7bc:	mov	r2, #2
    c7c0:	mov	r1, #3
    c7c4:	ldr	r0, [fp, #-16]
    c7c8:	bl	0 <flatcc_verify_field>
    c7cc:	str	r0, [fp, #-8]
    c7d0:	ldr	r3, [fp, #-8]
    c7d4:	cmp	r3, #0
    c7d8:	beq	c7e4 <MyGame_Example_TypeAliases_verify_table+0xc0>
    c7dc:	ldr	r3, [fp, #-8]
    c7e0:	b	c968 <MyGame_Example_TypeAliases_verify_table+0x244>
    c7e4:	mov	r3, #4
    c7e8:	mov	r2, #4
    c7ec:	mov	r1, #4
    c7f0:	ldr	r0, [fp, #-16]
    c7f4:	bl	0 <flatcc_verify_field>
    c7f8:	str	r0, [fp, #-8]
    c7fc:	ldr	r3, [fp, #-8]
    c800:	cmp	r3, #0
    c804:	beq	c810 <MyGame_Example_TypeAliases_verify_table+0xec>
    c808:	ldr	r3, [fp, #-8]
    c80c:	b	c968 <MyGame_Example_TypeAliases_verify_table+0x244>
    c810:	mov	r3, #4
    c814:	mov	r2, #4
    c818:	mov	r1, #5
    c81c:	ldr	r0, [fp, #-16]
    c820:	bl	0 <flatcc_verify_field>
    c824:	str	r0, [fp, #-8]
    c828:	ldr	r3, [fp, #-8]
    c82c:	cmp	r3, #0
    c830:	beq	c83c <MyGame_Example_TypeAliases_verify_table+0x118>
    c834:	ldr	r3, [fp, #-8]
    c838:	b	c968 <MyGame_Example_TypeAliases_verify_table+0x244>
    c83c:	mov	r3, #8
    c840:	mov	r2, #8
    c844:	mov	r1, #6
    c848:	ldr	r0, [fp, #-16]
    c84c:	bl	0 <flatcc_verify_field>
    c850:	str	r0, [fp, #-8]
    c854:	ldr	r3, [fp, #-8]
    c858:	cmp	r3, #0
    c85c:	beq	c868 <MyGame_Example_TypeAliases_verify_table+0x144>
    c860:	ldr	r3, [fp, #-8]
    c864:	b	c968 <MyGame_Example_TypeAliases_verify_table+0x244>
    c868:	mov	r3, #8
    c86c:	mov	r2, #8
    c870:	mov	r1, #7
    c874:	ldr	r0, [fp, #-16]
    c878:	bl	0 <flatcc_verify_field>
    c87c:	str	r0, [fp, #-8]
    c880:	ldr	r3, [fp, #-8]
    c884:	cmp	r3, #0
    c888:	beq	c894 <MyGame_Example_TypeAliases_verify_table+0x170>
    c88c:	ldr	r3, [fp, #-8]
    c890:	b	c968 <MyGame_Example_TypeAliases_verify_table+0x244>
    c894:	mov	r3, #4
    c898:	mov	r2, #4
    c89c:	mov	r1, #8
    c8a0:	ldr	r0, [fp, #-16]
    c8a4:	bl	0 <flatcc_verify_field>
    c8a8:	str	r0, [fp, #-8]
    c8ac:	ldr	r3, [fp, #-8]
    c8b0:	cmp	r3, #0
    c8b4:	beq	c8c0 <MyGame_Example_TypeAliases_verify_table+0x19c>
    c8b8:	ldr	r3, [fp, #-8]
    c8bc:	b	c968 <MyGame_Example_TypeAliases_verify_table+0x244>
    c8c0:	mov	r3, #8
    c8c4:	mov	r2, #8
    c8c8:	mov	r1, #9
    c8cc:	ldr	r0, [fp, #-16]
    c8d0:	bl	0 <flatcc_verify_field>
    c8d4:	str	r0, [fp, #-8]
    c8d8:	ldr	r3, [fp, #-8]
    c8dc:	cmp	r3, #0
    c8e0:	beq	c8ec <MyGame_Example_TypeAliases_verify_table+0x1c8>
    c8e4:	ldr	r3, [fp, #-8]
    c8e8:	b	c968 <MyGame_Example_TypeAliases_verify_table+0x244>
    c8ec:	mvn	r3, #0
    c8f0:	str	r3, [sp, #4]
    c8f4:	mov	r3, #1
    c8f8:	str	r3, [sp]
    c8fc:	mov	r3, #1
    c900:	mov	r2, #0
    c904:	mov	r1, #10
    c908:	ldr	r0, [fp, #-16]
    c90c:	bl	0 <flatcc_verify_vector_field>
    c910:	str	r0, [fp, #-8]
    c914:	ldr	r3, [fp, #-8]
    c918:	cmp	r3, #0
    c91c:	beq	c928 <MyGame_Example_TypeAliases_verify_table+0x204>
    c920:	ldr	r3, [fp, #-8]
    c924:	b	c968 <MyGame_Example_TypeAliases_verify_table+0x244>
    c928:	mvn	r3, #-536870912	; 0xe0000000
    c92c:	str	r3, [sp, #4]
    c930:	mov	r3, #8
    c934:	str	r3, [sp]
    c938:	mov	r3, #8
    c93c:	mov	r2, #0
    c940:	mov	r1, #11
    c944:	ldr	r0, [fp, #-16]
    c948:	bl	0 <flatcc_verify_vector_field>
    c94c:	str	r0, [fp, #-8]
    c950:	ldr	r3, [fp, #-8]
    c954:	cmp	r3, #0
    c958:	beq	c964 <MyGame_Example_TypeAliases_verify_table+0x240>
    c95c:	ldr	r3, [fp, #-8]
    c960:	b	c968 <MyGame_Example_TypeAliases_verify_table+0x244>
    c964:	mov	r3, #0
    c968:	mov	r0, r3
    c96c:	sub	sp, fp, #4
    c970:	pop	{fp, pc}

0000c974 <MyGame_Example_TypeAliases_verify_as_root>:
    c974:	push	{fp, lr}
    c978:	add	fp, sp, #4
    c97c:	sub	sp, sp, #8
    c980:	str	r0, [fp, #-8]
    c984:	str	r1, [fp, #-12]
    c988:	ldr	r3, [pc, #28]	; c9ac <MyGame_Example_TypeAliases_verify_as_root+0x38>
    c98c:	ldr	r2, [pc, #28]	; c9b0 <MyGame_Example_TypeAliases_verify_as_root+0x3c>
    c990:	ldr	r1, [fp, #-12]
    c994:	ldr	r0, [fp, #-8]
    c998:	bl	0 <flatcc_verify_table_as_root>
    c99c:	mov	r3, r0
    c9a0:	mov	r0, r3
    c9a4:	sub	sp, fp, #4
    c9a8:	pop	{fp, pc}
    c9ac:	.word	0x00000000
    c9b0:	.word	0x00000134

0000c9b4 <Fantasy_Attacker_verify_table>:
    c9b4:	push	{fp, lr}
    c9b8:	add	fp, sp, #4
    c9bc:	sub	sp, sp, #16
    c9c0:	str	r0, [fp, #-16]
    c9c4:	mov	r3, #4
    c9c8:	mov	r2, #4
    c9cc:	mov	r1, #0
    c9d0:	ldr	r0, [fp, #-16]
    c9d4:	bl	0 <flatcc_verify_field>
    c9d8:	str	r0, [fp, #-8]
    c9dc:	ldr	r3, [fp, #-8]
    c9e0:	cmp	r3, #0
    c9e4:	beq	c9f0 <Fantasy_Attacker_verify_table+0x3c>
    c9e8:	ldr	r3, [fp, #-8]
    c9ec:	b	c9f4 <Fantasy_Attacker_verify_table+0x40>
    c9f0:	mov	r3, #0
    c9f4:	mov	r0, r3
    c9f8:	sub	sp, fp, #4
    c9fc:	pop	{fp, pc}

0000ca00 <Fantasy_Movie_verify_table>:
    ca00:	push	{fp, lr}
    ca04:	add	fp, sp, #4
    ca08:	sub	sp, sp, #16
    ca0c:	str	r0, [fp, #-16]
    ca10:	ldr	r3, [pc, #228]	; cafc <Fantasy_Movie_verify_table+0xfc>
    ca14:	mov	r2, #0
    ca18:	mov	r1, #1
    ca1c:	ldr	r0, [fp, #-16]
    ca20:	bl	0 <flatcc_verify_union_field>
    ca24:	str	r0, [fp, #-8]
    ca28:	ldr	r3, [fp, #-8]
    ca2c:	cmp	r3, #0
    ca30:	beq	ca3c <Fantasy_Movie_verify_table+0x3c>
    ca34:	ldr	r3, [fp, #-8]
    ca38:	b	caf0 <Fantasy_Movie_verify_table+0xf0>
    ca3c:	ldr	r3, [pc, #184]	; cafc <Fantasy_Movie_verify_table+0xfc>
    ca40:	mov	r2, #0
    ca44:	mov	r1, #3
    ca48:	ldr	r0, [fp, #-16]
    ca4c:	bl	0 <flatcc_verify_union_field>
    ca50:	str	r0, [fp, #-8]
    ca54:	ldr	r3, [fp, #-8]
    ca58:	cmp	r3, #0
    ca5c:	beq	ca68 <Fantasy_Movie_verify_table+0x68>
    ca60:	ldr	r3, [fp, #-8]
    ca64:	b	caf0 <Fantasy_Movie_verify_table+0xf0>
    ca68:	ldr	r3, [pc, #140]	; cafc <Fantasy_Movie_verify_table+0xfc>
    ca6c:	mov	r2, #0
    ca70:	mov	r1, #5
    ca74:	ldr	r0, [fp, #-16]
    ca78:	bl	0 <flatcc_verify_union_field>
    ca7c:	str	r0, [fp, #-8]
    ca80:	ldr	r3, [fp, #-8]
    ca84:	cmp	r3, #0
    ca88:	beq	ca94 <Fantasy_Movie_verify_table+0x94>
    ca8c:	ldr	r3, [fp, #-8]
    ca90:	b	caf0 <Fantasy_Movie_verify_table+0xf0>
    ca94:	ldr	r3, [pc, #96]	; cafc <Fantasy_Movie_verify_table+0xfc>
    ca98:	mov	r2, #0
    ca9c:	mov	r1, #7
    caa0:	ldr	r0, [fp, #-16]
    caa4:	bl	0 <flatcc_verify_union_field>
    caa8:	str	r0, [fp, #-8]
    caac:	ldr	r3, [fp, #-8]
    cab0:	cmp	r3, #0
    cab4:	beq	cac0 <Fantasy_Movie_verify_table+0xc0>
    cab8:	ldr	r3, [fp, #-8]
    cabc:	b	caf0 <Fantasy_Movie_verify_table+0xf0>
    cac0:	ldr	r3, [pc, #52]	; cafc <Fantasy_Movie_verify_table+0xfc>
    cac4:	mov	r2, #0
    cac8:	mov	r1, #9
    cacc:	ldr	r0, [fp, #-16]
    cad0:	bl	0 <flatcc_verify_union_vector_field>
    cad4:	str	r0, [fp, #-8]
    cad8:	ldr	r3, [fp, #-8]
    cadc:	cmp	r3, #0
    cae0:	beq	caec <Fantasy_Movie_verify_table+0xec>
    cae4:	ldr	r3, [fp, #-8]
    cae8:	b	caf0 <Fantasy_Movie_verify_table+0xf0>
    caec:	mov	r3, #0
    caf0:	mov	r0, r3
    caf4:	sub	sp, fp, #4
    caf8:	pop	{fp, pc}
    cafc:	.word	0x00000000

0000cb00 <Fantasy_Movie_verify_as_root>:
    cb00:	push	{fp, lr}
    cb04:	add	fp, sp, #4
    cb08:	sub	sp, sp, #8
    cb0c:	str	r0, [fp, #-8]
    cb10:	str	r1, [fp, #-12]
    cb14:	ldr	r3, [pc, #28]	; cb38 <Fantasy_Movie_verify_as_root+0x38>
    cb18:	ldr	r2, [pc, #28]	; cb3c <Fantasy_Movie_verify_as_root+0x3c>
    cb1c:	ldr	r1, [fp, #-12]
    cb20:	ldr	r0, [fp, #-8]
    cb24:	bl	0 <flatcc_verify_table_as_root>
    cb28:	mov	r3, r0
    cb2c:	mov	r0, r3
    cb30:	sub	sp, fp, #4
    cb34:	pop	{fp, pc}
    cb38:	.word	0x00000000
    cb3c:	.word	0x00000134

0000cb40 <hexdump>:
    cb40:	push	{fp, lr}
    cb44:	add	fp, sp, #4
    cb48:	sub	sp, sp, #48	; 0x30
    cb4c:	str	r0, [fp, #-40]	; 0xffffffd8
    cb50:	str	r1, [fp, #-44]	; 0xffffffd4
    cb54:	str	r2, [fp, #-48]	; 0xffffffd0
    cb58:	str	r3, [fp, #-52]	; 0xffffffcc
    cb5c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    cb60:	str	r3, [fp, #-12]
    cb64:	ldr	r3, [fp, #-40]	; 0xffffffd8
    cb68:	cmp	r3, #0
    cb6c:	beq	cb80 <hexdump+0x40>
    cb70:	ldr	r2, [fp, #-40]	; 0xffffffd8
    cb74:	ldr	r1, [pc, #396]	; cd08 <hexdump+0x1c8>
    cb78:	ldr	r0, [fp, #-52]	; 0xffffffcc
    cb7c:	bl	0 <fprintf>
    cb80:	mov	r3, #0
    cb84:	str	r3, [fp, #-8]
    cb88:	b	cca4 <hexdump+0x164>
    cb8c:	ldr	r3, [fp, #-8]
    cb90:	and	r3, r3, #15
    cb94:	cmp	r3, #0
    cb98:	bne	cbd0 <hexdump+0x90>
    cb9c:	ldr	r3, [fp, #-8]
    cba0:	cmp	r3, #0
    cba4:	beq	cbbc <hexdump+0x7c>
    cba8:	sub	r3, fp, #32
    cbac:	mov	r2, r3
    cbb0:	ldr	r1, [pc, #340]	; cd0c <hexdump+0x1cc>
    cbb4:	ldr	r0, [fp, #-52]	; 0xffffffcc
    cbb8:	bl	0 <fprintf>
    cbbc:	ldr	r2, [fp, #-8]
    cbc0:	ldr	r1, [pc, #328]	; cd10 <hexdump+0x1d0>
    cbc4:	ldr	r0, [fp, #-52]	; 0xffffffcc
    cbc8:	bl	0 <fprintf>
    cbcc:	b	cbec <hexdump+0xac>
    cbd0:	ldr	r3, [fp, #-8]
    cbd4:	and	r3, r3, #7
    cbd8:	cmp	r3, #0
    cbdc:	bne	cbec <hexdump+0xac>
    cbe0:	ldr	r1, [fp, #-52]	; 0xffffffcc
    cbe4:	mov	r0, #32
    cbe8:	bl	0 <fputc>
    cbec:	ldr	r2, [fp, #-12]
    cbf0:	ldr	r3, [fp, #-8]
    cbf4:	add	r3, r2, r3
    cbf8:	ldrb	r3, [r3]
    cbfc:	mov	r2, r3
    cc00:	ldr	r1, [pc, #268]	; cd14 <hexdump+0x1d4>
    cc04:	ldr	r0, [fp, #-52]	; 0xffffffcc
    cc08:	bl	0 <fprintf>
    cc0c:	ldr	r2, [fp, #-12]
    cc10:	ldr	r3, [fp, #-8]
    cc14:	add	r3, r2, r3
    cc18:	ldrb	r3, [r3]
    cc1c:	cmp	r3, #31
    cc20:	bls	cc3c <hexdump+0xfc>
    cc24:	ldr	r2, [fp, #-12]
    cc28:	ldr	r3, [fp, #-8]
    cc2c:	add	r3, r2, r3
    cc30:	ldrb	r3, [r3]
    cc34:	cmp	r3, #126	; 0x7e
    cc38:	bls	cc58 <hexdump+0x118>
    cc3c:	ldr	r3, [fp, #-8]
    cc40:	and	r3, r3, #15
    cc44:	sub	r2, fp, #4
    cc48:	add	r3, r2, r3
    cc4c:	mov	r2, #46	; 0x2e
    cc50:	strb	r2, [r3, #-28]	; 0xffffffe4
    cc54:	b	cc7c <hexdump+0x13c>
    cc58:	ldr	r3, [fp, #-8]
    cc5c:	and	r3, r3, #15
    cc60:	ldr	r1, [fp, #-12]
    cc64:	ldr	r2, [fp, #-8]
    cc68:	add	r2, r1, r2
    cc6c:	ldrb	r2, [r2]
    cc70:	sub	r1, fp, #4
    cc74:	add	r3, r1, r3
    cc78:	strb	r2, [r3, #-28]	; 0xffffffe4
    cc7c:	ldr	r3, [fp, #-8]
    cc80:	and	r3, r3, #15
    cc84:	add	r3, r3, #1
    cc88:	sub	r2, fp, #4
    cc8c:	add	r3, r2, r3
    cc90:	mov	r2, #0
    cc94:	strb	r2, [r3, #-28]	; 0xffffffe4
    cc98:	ldr	r3, [fp, #-8]
    cc9c:	add	r3, r3, #1
    cca0:	str	r3, [fp, #-8]
    cca4:	ldr	r2, [fp, #-8]
    cca8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    ccac:	cmp	r2, r3
    ccb0:	bcc	cb8c <hexdump+0x4c>
    ccb4:	b	ccd8 <hexdump+0x198>
    ccb8:	ldr	r3, [fp, #-52]	; 0xffffffcc
    ccbc:	mov	r2, #3
    ccc0:	mov	r1, #1
    ccc4:	ldr	r0, [pc, #76]	; cd18 <hexdump+0x1d8>
    ccc8:	bl	0 <fwrite>
    cccc:	ldr	r3, [fp, #-8]
    ccd0:	add	r3, r3, #1
    ccd4:	str	r3, [fp, #-8]
    ccd8:	ldr	r3, [fp, #-8]
    ccdc:	and	r3, r3, #15
    cce0:	cmp	r3, #0
    cce4:	bne	ccb8 <hexdump+0x178>
    cce8:	sub	r3, fp, #32
    ccec:	mov	r2, r3
    ccf0:	ldr	r1, [pc, #20]	; cd0c <hexdump+0x1cc>
    ccf4:	ldr	r0, [fp, #-52]	; 0xffffffcc
    ccf8:	bl	0 <fprintf>
    ccfc:	nop			; (mov r0, r0)
    cd00:	sub	sp, fp, #4
    cd04:	pop	{fp, pc}
    cd08:	.word	0x0000080c
    cd0c:	.word	0x00000814
    cd10:	.word	0x0000081c
    cd14:	.word	0x00000824
    cd18:	.word	0x0000082c

0000cd1c <elapsed_realtime>:
    cd1c:	push	{fp, lr}
    cd20:	add	fp, sp, #4
    cd24:	sub	sp, sp, #8
    cd28:	sub	r3, fp, #12
    cd2c:	mov	r1, #0
    cd30:	mov	r0, r3
    cd34:	bl	0 <gettimeofday>
    cd38:	ldr	r3, [pc, #112]	; cdb0 <elapsed_realtime+0x94>
    cd3c:	ldr	r3, [r3]
    cd40:	cmp	r3, #0
    cd44:	bne	cd5c <elapsed_realtime+0x40>
    cd48:	ldr	r3, [pc, #96]	; cdb0 <elapsed_realtime+0x94>
    cd4c:	mov	r2, r3
    cd50:	sub	r3, fp, #12
    cd54:	ldm	r3, {r0, r1}
    cd58:	stm	r2, {r0, r1}
    cd5c:	ldr	r2, [fp, #-12]
    cd60:	ldr	r3, [pc, #72]	; cdb0 <elapsed_realtime+0x94>
    cd64:	ldr	r3, [r3]
    cd68:	sub	r3, r2, r3
    cd6c:	vmov	s15, r3
    cd70:	vcvt.f64.s32	d6, s15
    cd74:	ldr	r2, [fp, #-8]
    cd78:	ldr	r3, [pc, #48]	; cdb0 <elapsed_realtime+0x94>
    cd7c:	ldr	r3, [r3, #4]
    cd80:	sub	r3, r2, r3
    cd84:	vmov	s15, r3
    cd88:	vcvt.f64.s32	d5, s15
    cd8c:	vldr	d4, [pc, #20]	; cda8 <elapsed_realtime+0x8c>
    cd90:	vdiv.f64	d7, d5, d4
    cd94:	vadd.f64	d7, d6, d7
    cd98:	vmov.f64	d0, d7
    cd9c:	sub	sp, fp, #4
    cda0:	pop	{fp, pc}
    cda4:	nop			; (mov r0, r0)
    cda8:	.word	0x00000000
    cdac:	.word	0x412e8480
    cdb0:	.word	0x00000064

0000cdb4 <show_benchmark>:
    cdb4:	push	{fp, lr}
    cdb8:	add	fp, sp, #4
    cdbc:	sub	sp, sp, #48	; 0x30
    cdc0:	str	r0, [fp, #-24]	; 0xffffffe8
    cdc4:	vstr	d0, [fp, #-36]	; 0xffffffdc
    cdc8:	vstr	d1, [fp, #-44]	; 0xffffffd4
    cdcc:	str	r1, [fp, #-28]	; 0xffffffe4
    cdd0:	str	r2, [fp, #-48]	; 0xffffffd0
    cdd4:	str	r3, [fp, #-52]	; 0xffffffcc
    cdd8:	vldr	d6, [fp, #-44]	; 0xffffffd4
    cddc:	vldr	d7, [fp, #-36]	; 0xffffffdc
    cde0:	vsub.f64	d7, d6, d7
    cde4:	vstr	d7, [fp, #-12]
    cde8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    cdec:	ldr	r0, [pc, #412]	; cf90 <show_benchmark+0x1dc>
    cdf0:	bl	0 <printf>
    cdf4:	ldrd	r2, [fp, #-12]
    cdf8:	ldr	r0, [pc, #404]	; cf94 <show_benchmark+0x1e0>
    cdfc:	bl	0 <printf>
    ce00:	ldr	r1, [fp, #-48]	; 0xffffffd0
    ce04:	ldr	r0, [pc, #396]	; cf98 <show_benchmark+0x1e4>
    ce08:	bl	0 <printf>
    ce0c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    ce10:	ldr	r0, [pc, #388]	; cf9c <show_benchmark+0x1e8>
    ce14:	bl	0 <printf>
    ce18:	ldr	r3, [fp, #-48]	; 0xffffffd0
    ce1c:	vmov	s15, r3
    ce20:	vcvt.f64.s32	d6, s15
    ce24:	ldr	r3, [fp, #-28]	; 0xffffffe4
    ce28:	vmov	s15, r3
    ce2c:	vcvt.f64.u32	d7, s15
    ce30:	vmul.f64	d7, d6, d7
    ce34:	vldr	d5, [pc, #308]	; cf70 <show_benchmark+0x1bc>
    ce38:	vdiv.f64	d6, d7, d5
    ce3c:	vldr	d7, [fp, #-12]
    ce40:	vdiv.f64	d5, d6, d7
    ce44:	vmov	r2, r3, d5
    ce48:	ldr	r0, [pc, #336]	; cfa0 <show_benchmark+0x1ec>
    ce4c:	bl	0 <printf>
    ce50:	ldr	r3, [fp, #-48]	; 0xffffffd0
    ce54:	vmov	s15, r3
    ce58:	vcvt.f64.s32	d6, s15
    ce5c:	vldr	d7, [fp, #-12]
    ce60:	vdiv.f64	d5, d6, d7
    ce64:	vmov	r2, r3, d5
    ce68:	ldr	r0, [pc, #308]	; cfa4 <show_benchmark+0x1f0>
    ce6c:	bl	0 <printf>
    ce70:	ldr	r3, [fp, #-52]	; 0xffffffcc
    ce74:	cmp	r3, #0
    ce78:	beq	cea4 <show_benchmark+0xf0>
    ce7c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    ce80:	cmp	r3, #1
    ce84:	beq	cea4 <show_benchmark+0xf0>
    ce88:	vldr	d6, [pc, #232]	; cf78 <show_benchmark+0x1c4>
    ce8c:	vldr	d7, [fp, #-12]
    ce90:	vdiv.f64	d5, d6, d7
    ce94:	vmov	r2, r3, d5
    ce98:	ldr	r1, [fp, #-52]	; 0xffffffcc
    ce9c:	ldr	r0, [pc, #260]	; cfa8 <show_benchmark+0x1f4>
    cea0:	bl	0 <printf>
    cea4:	vldr	d7, [fp, #-12]
    cea8:	vldr	d6, [pc, #208]	; cf80 <show_benchmark+0x1cc>
    ceac:	vmul.f64	d5, d7, d6
    ceb0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    ceb4:	vmov	s15, r3
    ceb8:	vcvt.f64.s32	d6, s15
    cebc:	vdiv.f64	d7, d5, d6
    cec0:	vstr	d7, [fp, #-20]	; 0xffffffec
    cec4:	vldr	d7, [fp, #-20]	; 0xffffffec
    cec8:	vldr	d6, [pc, #184]	; cf88 <show_benchmark+0x1d4>
    cecc:	vcmpe.f64	d7, d6
    ced0:	vmrs	APSR_nzcv, fpscr
    ced4:	bpl	cee8 <show_benchmark+0x134>
    ced8:	ldrd	r2, [fp, #-20]	; 0xffffffec
    cedc:	ldr	r0, [pc, #200]	; cfac <show_benchmark+0x1f8>
    cee0:	bl	0 <printf>
    cee4:	b	cf60 <show_benchmark+0x1ac>
    cee8:	vldr	d7, [fp, #-20]	; 0xffffffec
    ceec:	vldr	d6, [pc, #124]	; cf70 <show_benchmark+0x1bc>
    cef0:	vcmpe.f64	d7, d6
    cef4:	vmrs	APSR_nzcv, fpscr
    cef8:	bpl	cf18 <show_benchmark+0x164>
    cefc:	vldr	d7, [fp, #-20]	; 0xffffffec
    cf00:	vldr	d6, [pc, #128]	; cf88 <show_benchmark+0x1d4>
    cf04:	vdiv.f64	d5, d7, d6
    cf08:	vmov	r2, r3, d5
    cf0c:	ldr	r0, [pc, #156]	; cfb0 <show_benchmark+0x1fc>
    cf10:	bl	0 <printf>
    cf14:	b	cf60 <show_benchmark+0x1ac>
    cf18:	vldr	d7, [fp, #-20]	; 0xffffffec
    cf1c:	vldr	d6, [pc, #92]	; cf80 <show_benchmark+0x1cc>
    cf20:	vcmpe.f64	d7, d6
    cf24:	vmrs	APSR_nzcv, fpscr
    cf28:	bpl	cf48 <show_benchmark+0x194>
    cf2c:	vldr	d7, [fp, #-20]	; 0xffffffec
    cf30:	vldr	d6, [pc, #56]	; cf70 <show_benchmark+0x1bc>
    cf34:	vdiv.f64	d5, d7, d6
    cf38:	vmov	r2, r3, d5
    cf3c:	ldr	r0, [pc, #112]	; cfb4 <show_benchmark+0x200>
    cf40:	bl	0 <printf>
    cf44:	b	cf60 <show_benchmark+0x1ac>
    cf48:	vldr	d7, [fp, #-20]	; 0xffffffec
    cf4c:	vldr	d6, [pc, #44]	; cf80 <show_benchmark+0x1cc>
    cf50:	vdiv.f64	d5, d7, d6
    cf54:	vmov	r2, r3, d5
    cf58:	ldr	r0, [pc, #88]	; cfb8 <show_benchmark+0x204>
    cf5c:	bl	0 <printf>
    cf60:	mov	r3, #0
    cf64:	mov	r0, r3
    cf68:	sub	sp, fp, #4
    cf6c:	pop	{fp, pc}
    cf70:	.word	0x00000000
    cf74:	.word	0x412e8480
    cf78:	.word	0x00000000
    cf7c:	.word	0x3ff00000
    cf80:	.word	0x00000000
    cf84:	.word	0x41cdcd65
    cf88:	.word	0x00000000
    cf8c:	.word	0x408f4000
    cf90:	.word	0x00000830
    cf94:	.word	0x00000840
    cf98:	.word	0x00000858
    cf9c:	.word	0x00000868
    cfa0:	.word	0x0000087c
    cfa4:	.word	0x00000894
    cfa8:	.word	0x000008b8
    cfac:	.word	0x000008dc
    cfb0:	.word	0x000008f4
    cfb4:	.word	0x0000090c
    cfb8:	.word	0x00000924

0000cfbc <verify_empty_monster>:
    cfbc:	push	{fp, lr}
    cfc0:	add	fp, sp, #4
    cfc4:	sub	sp, sp, #32
    cfc8:	str	r0, [fp, #-32]	; 0xffffffe0
    cfcc:	ldr	r1, [pc, #380]	; d150 <verify_empty_monster+0x194>
    cfd0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    cfd4:	bl	2d18 <MyGame_Example_Monster_as_root_with_identifier>
    cfd8:	str	r0, [fp, #-8]
    cfdc:	ldr	r1, [pc, #368]	; d154 <verify_empty_monster+0x198>
    cfe0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    cfe4:	bl	2d18 <MyGame_Example_Monster_as_root_with_identifier>
    cfe8:	str	r0, [fp, #-12]
    cfec:	mov	r1, #0
    cff0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    cff4:	bl	2d18 <MyGame_Example_Monster_as_root_with_identifier>
    cff8:	str	r0, [fp, #-16]
    cffc:	ldr	r1, [pc, #340]	; d158 <verify_empty_monster+0x19c>
    d000:	ldr	r0, [fp, #-32]	; 0xffffffe0
    d004:	bl	2d18 <MyGame_Example_Monster_as_root_with_identifier>
    d008:	str	r0, [fp, #-20]	; 0xffffffec
    d00c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    d010:	bl	2d78 <MyGame_Example_Monster_as_root>
    d014:	str	r0, [fp, #-24]	; 0xffffffe8
    d018:	ldr	r3, [fp, #-8]
    d01c:	cmp	r3, #0
    d020:	bne	d034 <verify_empty_monster+0x78>
    d024:	ldr	r0, [pc, #304]	; d15c <verify_empty_monster+0x1a0>
    d028:	bl	0 <puts>
    d02c:	mvn	r3, #0
    d030:	b	d144 <verify_empty_monster+0x188>
    d034:	ldr	r3, [fp, #-12]
    d038:	cmp	r3, #0
    d03c:	beq	d050 <verify_empty_monster+0x94>
    d040:	ldr	r0, [pc, #280]	; d160 <verify_empty_monster+0x1a4>
    d044:	bl	0 <puts>
    d048:	mvn	r3, #0
    d04c:	b	d144 <verify_empty_monster+0x188>
    d050:	ldr	r2, [fp, #-16]
    d054:	ldr	r3, [fp, #-8]
    d058:	cmp	r2, r3
    d05c:	beq	d070 <verify_empty_monster+0xb4>
    d060:	ldr	r0, [pc, #252]	; d164 <verify_empty_monster+0x1a8>
    d064:	bl	0 <puts>
    d068:	mvn	r3, #0
    d06c:	b	d144 <verify_empty_monster+0x188>
    d070:	ldr	r2, [fp, #-20]	; 0xffffffec
    d074:	ldr	r3, [fp, #-8]
    d078:	cmp	r2, r3
    d07c:	beq	d090 <verify_empty_monster+0xd4>
    d080:	ldr	r0, [pc, #224]	; d168 <verify_empty_monster+0x1ac>
    d084:	bl	0 <printf>
    d088:	mvn	r3, #0
    d08c:	b	d144 <verify_empty_monster+0x188>
    d090:	ldr	r2, [fp, #-24]	; 0xffffffe8
    d094:	ldr	r3, [fp, #-8]
    d098:	cmp	r2, r3
    d09c:	beq	d0b0 <verify_empty_monster+0xf4>
    d0a0:	ldr	r0, [pc, #196]	; d16c <verify_empty_monster+0x1b0>
    d0a4:	bl	0 <printf>
    d0a8:	mvn	r3, #0
    d0ac:	b	d144 <verify_empty_monster+0x188>
    d0b0:	ldr	r0, [fp, #-8]
    d0b4:	bl	2f8c <MyGame_Example_Monster_hp>
    d0b8:	mov	r3, r0
    d0bc:	cmp	r3, #100	; 0x64
    d0c0:	beq	d0d4 <verify_empty_monster+0x118>
    d0c4:	ldr	r0, [pc, #164]	; d170 <verify_empty_monster+0x1b4>
    d0c8:	bl	0 <puts>
    d0cc:	mvn	r3, #0
    d0d0:	b	d144 <verify_empty_monster+0x188>
    d0d4:	ldr	r0, [fp, #-8]
    d0d8:	bl	3078 <MyGame_Example_Monster_hp_is_present>
    d0dc:	mov	r3, r0
    d0e0:	cmp	r3, #0
    d0e4:	beq	d0f8 <verify_empty_monster+0x13c>
    d0e8:	ldr	r0, [pc, #132]	; d174 <verify_empty_monster+0x1b8>
    d0ec:	bl	0 <puts>
    d0f0:	mvn	r3, #0
    d0f4:	b	d144 <verify_empty_monster+0x188>
    d0f8:	ldr	r0, [fp, #-8]
    d0fc:	bl	2ebc <MyGame_Example_Monster_pos_is_present>
    d100:	mov	r3, r0
    d104:	cmp	r3, #0
    d108:	beq	d11c <verify_empty_monster+0x160>
    d10c:	ldr	r0, [pc, #100]	; d178 <verify_empty_monster+0x1bc>
    d110:	bl	0 <puts>
    d114:	mvn	r3, #0
    d118:	b	d144 <verify_empty_monster+0x188>
    d11c:	ldr	r0, [fp, #-8]
    d120:	bl	2de0 <MyGame_Example_Monster_pos>
    d124:	mov	r3, r0
    d128:	cmp	r3, #0
    d12c:	beq	d140 <verify_empty_monster+0x184>
    d130:	ldr	r0, [pc, #68]	; d17c <verify_empty_monster+0x1c0>
    d134:	bl	0 <puts>
    d138:	mvn	r3, #0
    d13c:	b	d144 <verify_empty_monster+0x188>
    d140:	mov	r3, #0
    d144:	mov	r0, r3
    d148:	sub	sp, fp, #4
    d14c:	pop	{fp, pc}
    d150:	.word	0x00000134
    d154:	.word	0x0000093c
    d158:	.word	0x00000944
    d15c:	.word	0x0000094c
    d160:	.word	0x00000964
    d164:	.word	0x00000994
    d168:	.word	0x000009cc
    d16c:	.word	0x00000a00
    d170:	.word	0x00000a2c
    d174:	.word	0x00000a50
    d178:	.word	0x00000a70
    d17c:	.word	0x00000a8c

0000d180 <test_enums>:
    d180:	push	{fp}		; (str fp, [sp, #-4]!)
    d184:	add	fp, sp, #0
    d188:	sub	sp, sp, #12
    d18c:	str	r0, [fp, #-8]
    d190:	mov	r3, #0
    d194:	mov	r0, r3
    d198:	add	sp, fp, #0
    d19c:	pop	{fp}		; (ldr fp, [sp], #4)
    d1a0:	bx	lr

0000d1a4 <test_type_aliases>:
    d1a4:	push	{fp, lr}
    d1a8:	add	fp, sp, #4
    d1ac:	sub	sp, sp, #72	; 0x48
    d1b0:	str	r0, [fp, #-32]	; 0xffffffe0
    d1b4:	mov	r3, #0
    d1b8:	str	r3, [fp, #-8]
    d1bc:	mov	r3, #0
    d1c0:	str	r3, [fp, #-12]
    d1c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    d1c8:	bl	0 <flatcc_builder_reset>
    d1cc:	mov	r2, #0
    d1d0:	mov	r1, #0
    d1d4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    d1d8:	bl	6d5c <flatbuffers_uint8_vec_create>
    d1dc:	str	r0, [fp, #-16]
    d1e0:	mov	r2, #0
    d1e4:	mov	r1, #0
    d1e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    d1ec:	bl	7274 <flatbuffers_double_vec_create>
    d1f0:	str	r0, [fp, #-20]	; 0xffffffec
    d1f4:	ldr	r3, [fp, #-20]	; 0xffffffec
    d1f8:	str	r3, [sp, #36]	; 0x24
    d1fc:	ldr	r3, [fp, #-16]
    d200:	str	r3, [sp, #32]
    d204:	mvn	r2, #0
    d208:	mvn	r3, #0
    d20c:	strd	r2, [sp, #24]
    d210:	mov	r2, #0
    d214:	mov	r3, #-2147483648	; 0x80000000
    d218:	strd	r2, [sp, #16]
    d21c:	mvn	r3, #0
    d220:	str	r3, [sp, #8]
    d224:	mov	r3, #-2147483648	; 0x80000000
    d228:	str	r3, [sp, #4]
    d22c:	ldr	r3, [pc, #520]	; d43c <test_type_aliases+0x298>
    d230:	str	r3, [sp]
    d234:	vldr	d1, [pc, #500]	; d430 <test_type_aliases+0x28c>
    d238:	vldr	s0, [pc, #504]	; d438 <test_type_aliases+0x294>
    d23c:	ldr	r3, [pc, #508]	; d440 <test_type_aliases+0x29c>
    d240:	mov	r2, #255	; 0xff
    d244:	mvn	r1, #127	; 0x7f
    d248:	ldr	r0, [fp, #-32]	; 0xffffffe0
    d24c:	bl	aa5c <MyGame_Example_TypeAliases_create_as_root>
    d250:	sub	r3, fp, #28
    d254:	mov	r1, r3
    d258:	ldr	r0, [fp, #-32]	; 0xffffffe0
    d25c:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    d260:	str	r0, [fp, #-12]
    d264:	ldr	r3, [fp, #-28]	; 0xffffffe4
    d268:	mov	r1, r3
    d26c:	ldr	r0, [fp, #-12]
    d270:	bl	c974 <MyGame_Example_TypeAliases_verify_as_root>
    d274:	str	r0, [fp, #-8]
    d278:	ldr	r3, [fp, #-8]
    d27c:	cmp	r3, #0
    d280:	beq	d2b8 <test_type_aliases+0x114>
    d284:	ldr	r2, [fp, #-28]	; 0xffffffe4
    d288:	ldr	r3, [pc, #436]	; d444 <test_type_aliases+0x2a0>
    d28c:	ldr	r3, [r3]
    d290:	ldr	r1, [fp, #-12]
    d294:	ldr	r0, [pc, #428]	; d448 <test_type_aliases+0x2a4>
    d298:	bl	cb40 <hexdump>
    d29c:	ldr	r0, [fp, #-8]
    d2a0:	bl	0 <flatcc_verify_error_string>
    d2a4:	mov	r3, r0
    d2a8:	mov	r1, r3
    d2ac:	ldr	r0, [pc, #408]	; d44c <test_type_aliases+0x2a8>
    d2b0:	bl	0 <printf>
    d2b4:	b	d3b4 <test_type_aliases+0x210>
    d2b8:	ldr	r0, [fp, #-12]
    d2bc:	bl	5388 <MyGame_Example_TypeAliases_as_root>
    d2c0:	str	r0, [fp, #-24]	; 0xffffffe8
    d2c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d2c8:	bl	53f0 <MyGame_Example_TypeAliases_i8>
    d2cc:	mov	r3, r0
    d2d0:	cmn	r3, #128	; 0x80
    d2d4:	bne	d3c4 <test_type_aliases+0x220>
    d2d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d2dc:	bl	55c8 <MyGame_Example_TypeAliases_i16>
    d2e0:	mov	r3, r0
    d2e4:	cmn	r3, #32768	; 0x8000
    d2e8:	bne	d3cc <test_type_aliases+0x228>
    d2ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d2f0:	bl	579c <MyGame_Example_TypeAliases_i32>
    d2f4:	mov	r3, r0
    d2f8:	cmp	r3, #-2147483648	; 0x80000000
    d2fc:	bne	d3d4 <test_type_aliases+0x230>
    d300:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d304:	bl	5974 <MyGame_Example_TypeAliases_i64>
    d308:	mov	r2, r0
    d30c:	mov	r3, r1
    d310:	cmp	r3, #-2147483648	; 0x80000000
    d314:	cmpeq	r2, #0
    d318:	bne	d3dc <test_type_aliases+0x238>
    d31c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d320:	bl	54dc <MyGame_Example_TypeAliases_u8>
    d324:	mov	r3, r0
    d328:	cmp	r3, #255	; 0xff
    d32c:	bne	d3e4 <test_type_aliases+0x240>
    d330:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d334:	bl	56b4 <MyGame_Example_TypeAliases_u16>
    d338:	mov	r3, r0
    d33c:	mov	r2, r3
    d340:	ldr	r3, [pc, #244]	; d43c <test_type_aliases+0x298>
    d344:	cmp	r2, r3
    d348:	bne	d3ec <test_type_aliases+0x248>
    d34c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d350:	bl	5888 <MyGame_Example_TypeAliases_u32>
    d354:	mov	r3, r0
    d358:	cmn	r3, #1
    d35c:	bne	d3f4 <test_type_aliases+0x250>
    d360:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d364:	bl	5a6c <MyGame_Example_TypeAliases_u64>
    d368:	mvn	r2, #0
    d36c:	mvn	r3, #0
    d370:	cmp	r1, r3
    d374:	cmpeq	r0, r2
    d378:	bne	d3fc <test_type_aliases+0x258>
    d37c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d380:	bl	5b60 <MyGame_Example_TypeAliases_f32>
    d384:	vmov.f32	s14, s0
    d388:	vldr	s15, [pc, #168]	; d438 <test_type_aliases+0x294>
    d38c:	vcmp.f32	s14, s15
    d390:	vmrs	APSR_nzcv, fpscr
    d394:	bne	d404 <test_type_aliases+0x260>
    d398:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d39c:	bl	5c50 <MyGame_Example_TypeAliases_f64>
    d3a0:	vmov.f64	d6, d0
    d3a4:	vldr	d7, [pc, #132]	; d430 <test_type_aliases+0x28c>
    d3a8:	vcmp.f64	d6, d7
    d3ac:	vmrs	APSR_nzcv, fpscr
    d3b0:	bne	d40c <test_type_aliases+0x268>
    d3b4:	ldr	r0, [fp, #-12]
    d3b8:	bl	0 <flatcc_builder_aligned_free>
    d3bc:	ldr	r3, [fp, #-8]
    d3c0:	b	d424 <test_type_aliases+0x280>
    d3c4:	nop			; (mov r0, r0)
    d3c8:	b	d410 <test_type_aliases+0x26c>
    d3cc:	nop			; (mov r0, r0)
    d3d0:	b	d410 <test_type_aliases+0x26c>
    d3d4:	nop			; (mov r0, r0)
    d3d8:	b	d410 <test_type_aliases+0x26c>
    d3dc:	nop			; (mov r0, r0)
    d3e0:	b	d410 <test_type_aliases+0x26c>
    d3e4:	nop			; (mov r0, r0)
    d3e8:	b	d410 <test_type_aliases+0x26c>
    d3ec:	nop			; (mov r0, r0)
    d3f0:	b	d410 <test_type_aliases+0x26c>
    d3f4:	nop			; (mov r0, r0)
    d3f8:	b	d410 <test_type_aliases+0x26c>
    d3fc:	nop			; (mov r0, r0)
    d400:	b	d410 <test_type_aliases+0x26c>
    d404:	nop			; (mov r0, r0)
    d408:	b	d410 <test_type_aliases+0x26c>
    d40c:	nop			; (mov r0, r0)
    d410:	mvn	r3, #0
    d414:	str	r3, [fp, #-8]
    d418:	ldr	r0, [pc, #48]	; d450 <test_type_aliases+0x2ac>
    d41c:	bl	0 <puts>
    d420:	b	d3b4 <test_type_aliases+0x210>
    d424:	mov	r0, r3
    d428:	sub	sp, fp, #4
    d42c:	pop	{fp, pc}
    d430:	.word	0x66666666
    d434:	.word	0x40026666
    d438:	.word	0x40133333
    d43c:	.word	0x0000ffff
    d440:	.word	0xffff8000
    d444:	.word	0x00000000
    d448:	.word	0x00000aac
    d44c:	.word	0x00000ac0
    d450:	.word	0x00000aec

0000d454 <test_empty_monster>:
    d454:	push	{fp, lr}
    d458:	add	fp, sp, #4
    d45c:	sub	sp, sp, #24
    d460:	str	r0, [fp, #-24]	; 0xffffffe8
    d464:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d468:	bl	0 <flatcc_builder_reset>
    d46c:	ldr	r1, [pc, #260]	; d578 <test_empty_monster+0x124>
    d470:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d474:	bl	7440 <flatbuffers_buffer_start>
    d478:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d47c:	bl	802c <MyGame_Example_Monster_start>
    d480:	ldr	r1, [pc, #244]	; d57c <test_empty_monster+0x128>
    d484:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d488:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
    d48c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d490:	bl	8058 <MyGame_Example_Monster_end>
    d494:	str	r0, [fp, #-12]
    d498:	ldr	r1, [fp, #-12]
    d49c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d4a0:	bl	74b0 <flatbuffers_buffer_end>
    d4a4:	sub	r3, fp, #20
    d4a8:	mov	r1, r3
    d4ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d4b0:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    d4b4:	str	r0, [fp, #-16]
    d4b8:	ldr	r2, [fp, #-20]	; 0xffffffec
    d4bc:	ldr	r3, [pc, #188]	; d580 <test_empty_monster+0x12c>
    d4c0:	ldr	r3, [r3]
    d4c4:	ldr	r1, [fp, #-16]
    d4c8:	ldr	r0, [pc, #180]	; d584 <test_empty_monster+0x130>
    d4cc:	bl	cb40 <hexdump>
    d4d0:	ldr	r0, [fp, #-16]
    d4d4:	bl	cfbc <verify_empty_monster>
    d4d8:	str	r0, [fp, #-8]
    d4dc:	ldr	r3, [fp, #-8]
    d4e0:	cmp	r3, #0
    d4e4:	bne	d55c <test_empty_monster+0x108>
    d4e8:	ldr	r3, [fp, #-20]	; 0xffffffec
    d4ec:	ldr	r2, [pc, #132]	; d578 <test_empty_monster+0x124>
    d4f0:	mov	r1, r3
    d4f4:	ldr	r0, [fp, #-16]
    d4f8:	bl	c6a4 <MyGame_Example_Monster_verify_as_root_with_identifier>
    d4fc:	str	r0, [fp, #-8]
    d500:	ldr	r3, [fp, #-8]
    d504:	cmp	r3, #0
    d508:	beq	d52c <test_empty_monster+0xd8>
    d50c:	ldr	r0, [fp, #-8]
    d510:	bl	0 <flatcc_verify_error_string>
    d514:	mov	r3, r0
    d518:	mov	r1, r3
    d51c:	ldr	r0, [pc, #100]	; d588 <test_empty_monster+0x134>
    d520:	bl	0 <printf>
    d524:	mvn	r3, #0
    d528:	b	d56c <test_empty_monster+0x118>
    d52c:	ldr	r3, [fp, #-20]	; 0xffffffec
    d530:	sub	r3, r3, #1
    d534:	mov	r1, r3
    d538:	ldr	r0, [fp, #-16]
    d53c:	bl	c624 <MyGame_Example_Monster_verify_as_root>
    d540:	mov	r3, r0
    d544:	cmp	r3, #0
    d548:	bne	d560 <test_empty_monster+0x10c>
    d54c:	ldr	r0, [pc, #56]	; d58c <test_empty_monster+0x138>
    d550:	bl	0 <puts>
    d554:	mvn	r3, #0
    d558:	b	d56c <test_empty_monster+0x118>
    d55c:	nop			; (mov r0, r0)
    d560:	ldr	r0, [fp, #-16]
    d564:	bl	0 <flatcc_builder_aligned_free>
    d568:	ldr	r3, [fp, #-8]
    d56c:	mov	r0, r3
    d570:	sub	sp, fp, #4
    d574:	pop	{fp, pc}
    d578:	.word	0x00000134
    d57c:	.word	0x00000b1c
    d580:	.word	0x00000000
    d584:	.word	0x00000b28
    d588:	.word	0x00000b3c
    d58c:	.word	0x00000b64

0000d590 <test_typed_empty_monster>:
    d590:	push	{r4, fp, lr}
    d594:	add	fp, sp, #8
    d598:	sub	sp, sp, #36	; 0x24
    d59c:	str	r0, [fp, #-40]	; 0xffffffd8
    d5a0:	mvn	r3, #0
    d5a4:	str	r3, [fp, #-16]
    d5a8:	mov	r3, #0
    d5ac:	str	r3, [fp, #-32]	; 0xffffffe0
    d5b0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    d5b4:	bl	0 <flatcc_builder_reset>
    d5b8:	ldr	r1, [pc, #672]	; d860 <test_typed_empty_monster+0x2d0>
    d5bc:	ldr	r0, [fp, #-40]	; 0xffffffd8
    d5c0:	bl	7440 <flatbuffers_buffer_start>
    d5c4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    d5c8:	bl	802c <MyGame_Example_Monster_start>
    d5cc:	ldr	r1, [pc, #656]	; d864 <test_typed_empty_monster+0x2d4>
    d5d0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    d5d4:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
    d5d8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    d5dc:	bl	8058 <MyGame_Example_Monster_end>
    d5e0:	str	r0, [fp, #-20]	; 0xffffffec
    d5e4:	ldr	r1, [fp, #-20]	; 0xffffffec
    d5e8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    d5ec:	bl	74b0 <flatbuffers_buffer_end>
    d5f0:	sub	r3, fp, #28
    d5f4:	mov	r1, r3
    d5f8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    d5fc:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    d600:	str	r0, [fp, #-24]	; 0xffffffe8
    d604:	ldr	r2, [fp, #-28]	; 0xffffffe4
    d608:	ldr	r3, [pc, #600]	; d868 <test_typed_empty_monster+0x2d8>
    d60c:	ldr	r3, [r3]
    d610:	ldr	r1, [fp, #-24]	; 0xffffffe8
    d614:	ldr	r0, [pc, #592]	; d86c <test_typed_empty_monster+0x2dc>
    d618:	bl	cb40 <hexdump>
    d61c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d620:	bl	1af4 <flatbuffers_get_type_hash>
    d624:	mov	r4, r0
    d628:	ldr	r0, [pc, #576]	; d870 <test_typed_empty_monster+0x2e0>
    d62c:	bl	894 <flatbuffers_type_hash_from_name>
    d630:	mov	r3, r0
    d634:	cmp	r4, r3
    d638:	beq	d658 <test_typed_empty_monster+0xc8>
    d63c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d640:	bl	1af4 <flatbuffers_get_type_hash>
    d644:	mov	r3, r0
    d648:	mov	r1, r3
    d64c:	ldr	r0, [pc, #544]	; d874 <test_typed_empty_monster+0x2e4>
    d650:	bl	0 <printf>
    d654:	b	d848 <test_typed_empty_monster+0x2b8>
    d658:	ldr	r1, [pc, #536]	; d878 <test_typed_empty_monster+0x2e8>
    d65c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d660:	bl	1a9c <flatbuffers_has_type_hash>
    d664:	mov	r3, r0
    d668:	cmp	r3, #0
    d66c:	bne	d67c <test_typed_empty_monster+0xec>
    d670:	ldr	r0, [pc, #516]	; d87c <test_typed_empty_monster+0x2ec>
    d674:	bl	0 <puts>
    d678:	b	d848 <test_typed_empty_monster+0x2b8>
    d67c:	ldr	r1, [pc, #500]	; d878 <test_typed_empty_monster+0x2e8>
    d680:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d684:	bl	1a9c <flatbuffers_has_type_hash>
    d688:	mov	r3, r0
    d68c:	cmp	r3, #0
    d690:	bne	d6a0 <test_typed_empty_monster+0x110>
    d694:	ldr	r0, [pc, #480]	; d87c <test_typed_empty_monster+0x2ec>
    d698:	bl	0 <puts>
    d69c:	b	d848 <test_typed_empty_monster+0x2b8>
    d6a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d6a4:	bl	cfbc <verify_empty_monster>
    d6a8:	mov	r3, r0
    d6ac:	cmp	r3, #0
    d6b0:	bne	d6c0 <test_typed_empty_monster+0x130>
    d6b4:	ldr	r0, [pc, #452]	; d880 <test_typed_empty_monster+0x2f0>
    d6b8:	bl	0 <puts>
    d6bc:	b	d848 <test_typed_empty_monster+0x2b8>
    d6c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    d6c4:	ldr	r2, [pc, #404]	; d860 <test_typed_empty_monster+0x2d0>
    d6c8:	mov	r1, r3
    d6cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d6d0:	bl	c6a4 <MyGame_Example_Monster_verify_as_root_with_identifier>
    d6d4:	str	r0, [fp, #-16]
    d6d8:	ldr	r3, [fp, #-16]
    d6dc:	cmp	r3, #0
    d6e0:	beq	d700 <test_typed_empty_monster+0x170>
    d6e4:	ldr	r0, [fp, #-16]
    d6e8:	bl	0 <flatcc_verify_error_string>
    d6ec:	mov	r3, r0
    d6f0:	mov	r1, r3
    d6f4:	ldr	r0, [pc, #392]	; d884 <test_typed_empty_monster+0x2f4>
    d6f8:	bl	0 <printf>
    d6fc:	b	d848 <test_typed_empty_monster+0x2b8>
    d700:	ldr	r3, [fp, #-28]	; 0xffffffe4
    d704:	mov	r1, r3
    d708:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d70c:	bl	c664 <MyGame_Example_Monster_verify_as_typed_root>
    d710:	str	r0, [fp, #-16]
    d714:	ldr	r3, [fp, #-16]
    d718:	cmp	r3, #0
    d71c:	beq	d73c <test_typed_empty_monster+0x1ac>
    d720:	ldr	r0, [fp, #-16]
    d724:	bl	0 <flatcc_verify_error_string>
    d728:	mov	r3, r0
    d72c:	mov	r1, r3
    d730:	ldr	r0, [pc, #332]	; d884 <test_typed_empty_monster+0x2f4>
    d734:	bl	0 <printf>
    d738:	b	d848 <test_typed_empty_monster+0x2b8>
    d73c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    d740:	ldr	r2, [pc, #304]	; d878 <test_typed_empty_monster+0x2e8>
    d744:	mov	r1, r3
    d748:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d74c:	bl	c6e4 <MyGame_Example_Monster_verify_as_root_with_type_hash>
    d750:	str	r0, [fp, #-16]
    d754:	ldr	r3, [fp, #-16]
    d758:	cmp	r3, #0
    d75c:	beq	d77c <test_typed_empty_monster+0x1ec>
    d760:	ldr	r0, [fp, #-16]
    d764:	bl	0 <flatcc_verify_error_string>
    d768:	mov	r3, r0
    d76c:	mov	r1, r3
    d770:	ldr	r0, [pc, #272]	; d888 <test_typed_empty_monster+0x2f8>
    d774:	bl	0 <printf>
    d778:	b	d848 <test_typed_empty_monster+0x2b8>
    d77c:	ldr	r4, [fp, #-28]	; 0xffffffe4
    d780:	ldr	r0, [pc, #232]	; d870 <test_typed_empty_monster+0x2e0>
    d784:	bl	894 <flatbuffers_type_hash_from_name>
    d788:	mov	r3, r0
    d78c:	mov	r2, r3
    d790:	mov	r1, r4
    d794:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d798:	bl	c6e4 <MyGame_Example_Monster_verify_as_root_with_type_hash>
    d79c:	str	r0, [fp, #-16]
    d7a0:	ldr	r3, [fp, #-16]
    d7a4:	cmp	r3, #0
    d7a8:	beq	d7c8 <test_typed_empty_monster+0x238>
    d7ac:	ldr	r0, [fp, #-16]
    d7b0:	bl	0 <flatcc_verify_error_string>
    d7b4:	mov	r3, r0
    d7b8:	mov	r1, r3
    d7bc:	ldr	r0, [pc, #200]	; d88c <test_typed_empty_monster+0x2fc>
    d7c0:	bl	0 <printf>
    d7c4:	b	d848 <test_typed_empty_monster+0x2b8>
    d7c8:	sub	r3, fp, #32
    d7cc:	mov	r1, r3
    d7d0:	ldr	r0, [pc, #160]	; d878 <test_typed_empty_monster+0x2e8>
    d7d4:	bl	924 <flatbuffers_identifier_from_type_hash>
    d7d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    d7dc:	sub	r2, fp, #32
    d7e0:	mov	r1, r3
    d7e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d7e8:	bl	c6a4 <MyGame_Example_Monster_verify_as_root_with_identifier>
    d7ec:	str	r0, [fp, #-16]
    d7f0:	ldr	r3, [fp, #-16]
    d7f4:	cmp	r3, #0
    d7f8:	beq	d818 <test_typed_empty_monster+0x288>
    d7fc:	ldr	r0, [fp, #-16]
    d800:	bl	0 <flatcc_verify_error_string>
    d804:	mov	r3, r0
    d808:	mov	r1, r3
    d80c:	ldr	r0, [pc, #112]	; d884 <test_typed_empty_monster+0x2f4>
    d810:	bl	0 <printf>
    d814:	b	d848 <test_typed_empty_monster+0x2b8>
    d818:	ldr	r3, [fp, #-28]	; 0xffffffe4
    d81c:	mov	r1, r3
    d820:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d824:	bl	c624 <MyGame_Example_Monster_verify_as_root>
    d828:	mov	r3, r0
    d82c:	cmp	r3, #0
    d830:	bne	d840 <test_typed_empty_monster+0x2b0>
    d834:	ldr	r0, [pc, #84]	; d890 <test_typed_empty_monster+0x300>
    d838:	bl	0 <puts>
    d83c:	b	d848 <test_typed_empty_monster+0x2b8>
    d840:	mov	r3, #0
    d844:	str	r3, [fp, #-16]
    d848:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d84c:	bl	0 <flatcc_builder_aligned_free>
    d850:	ldr	r3, [fp, #-16]
    d854:	mov	r0, r3
    d858:	sub	sp, fp, #8
    d85c:	pop	{r4, fp, pc}
    d860:	.word	0x00000804
    d864:	.word	0x00000b1c
    d868:	.word	0x00000000
    d86c:	.word	0x00000b94
    d870:	.word	0x00000bb0
    d874:	.word	0x00000bc8
    d878:	.word	0x330ef481
    d87c:	.word	0x00000bfc
    d880:	.word	0x00000c24
    d884:	.word	0x00000c64
    d888:	.word	0x00000c94
    d88c:	.word	0x00000ccc
    d890:	.word	0x00000d0c

0000d894 <verify_table_with_emptystruct>:
    d894:	push	{fp, lr}
    d898:	add	fp, sp, #4
    d89c:	sub	sp, sp, #16
    d8a0:	str	r0, [fp, #-16]
    d8a4:	ldr	r0, [fp, #-16]
    d8a8:	bl	22e4 <MyGame_Example_with_emptystruct_as_root>
    d8ac:	str	r0, [fp, #-8]
    d8b0:	ldr	r3, [fp, #-8]
    d8b4:	cmp	r3, #0
    d8b8:	bne	d8cc <verify_table_with_emptystruct+0x38>
    d8bc:	ldr	r0, [pc, #96]	; d924 <verify_table_with_emptystruct+0x90>
    d8c0:	bl	0 <puts>
    d8c4:	mvn	r3, #0
    d8c8:	b	d918 <verify_table_with_emptystruct+0x84>
    d8cc:	ldr	r0, [fp, #-8]
    d8d0:	bl	23ac <MyGame_Example_with_emptystruct_empty>
    d8d4:	str	r0, [fp, #-12]
    d8d8:	ldr	r3, [fp, #-12]
    d8dc:	cmp	r3, #0
    d8e0:	bne	d8f4 <verify_table_with_emptystruct+0x60>
    d8e4:	ldr	r0, [pc, #60]	; d928 <verify_table_with_emptystruct+0x94>
    d8e8:	bl	0 <puts>
    d8ec:	mvn	r3, #0
    d8f0:	b	d918 <verify_table_with_emptystruct+0x84>
    d8f4:	bl	1e34 <MyGame_Example_emptystruct__size>
    d8f8:	mov	r3, r0
    d8fc:	cmp	r3, #0
    d900:	beq	d914 <verify_table_with_emptystruct+0x80>
    d904:	ldr	r0, [pc, #32]	; d92c <verify_table_with_emptystruct+0x98>
    d908:	bl	0 <puts>
    d90c:	mvn	r3, #0
    d910:	b	d918 <verify_table_with_emptystruct+0x84>
    d914:	mov	r3, #0
    d918:	mov	r0, r3
    d91c:	sub	sp, fp, #4
    d920:	pop	{fp, pc}
    d924:	.word	0x00000d58
    d928:	.word	0x00000d80
    d92c:	.word	0x00000d9c

0000d930 <test_table_with_emptystruct>:
    d930:	push	{fp, lr}
    d934:	add	fp, sp, #4
    d938:	sub	sp, sp, #24
    d93c:	str	r0, [fp, #-24]	; 0xffffffe8
    d940:	mov	r3, #0
    d944:	str	r3, [fp, #-8]
    d948:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d94c:	bl	0 <flatcc_builder_reset>
    d950:	ldr	r1, [fp, #-8]
    d954:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d958:	bl	8664 <MyGame_Example_with_emptystruct_create_as_root>
    d95c:	sub	r3, fp, #20
    d960:	mov	r1, r3
    d964:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d968:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    d96c:	str	r0, [fp, #-12]
    d970:	ldr	r2, [fp, #-20]	; 0xffffffec
    d974:	ldr	r3, [pc, #48]	; d9ac <test_table_with_emptystruct+0x7c>
    d978:	ldr	r3, [r3]
    d97c:	ldr	r1, [fp, #-12]
    d980:	ldr	r0, [pc, #40]	; d9b0 <test_table_with_emptystruct+0x80>
    d984:	bl	cb40 <hexdump>
    d988:	ldr	r0, [fp, #-12]
    d98c:	bl	d894 <verify_table_with_emptystruct>
    d990:	str	r0, [fp, #-16]
    d994:	ldr	r0, [fp, #-12]
    d998:	bl	0 <flatcc_builder_aligned_free>
    d99c:	ldr	r3, [fp, #-16]
    d9a0:	mov	r0, r3
    d9a4:	sub	sp, fp, #4
    d9a8:	pop	{fp, pc}
    d9ac:	.word	0x00000000
    d9b0:	.word	0x00000db8

0000d9b4 <test_typed_table_with_emptystruct>:
    d9b4:	push	{fp, lr}
    d9b8:	add	fp, sp, #4
    d9bc:	sub	sp, sp, #24
    d9c0:	str	r0, [fp, #-24]	; 0xffffffe8
    d9c4:	mov	r3, #0
    d9c8:	str	r3, [fp, #-8]
    d9cc:	mov	r3, #0
    d9d0:	str	r3, [fp, #-12]
    d9d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d9d8:	bl	0 <flatcc_builder_reset>
    d9dc:	ldr	r1, [fp, #-12]
    d9e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d9e4:	bl	86c8 <MyGame_Example_with_emptystruct_create_as_typed_root>
    d9e8:	sub	r3, fp, #20
    d9ec:	mov	r1, r3
    d9f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d9f4:	bl	0 <flatcc_builder_get_direct_buffer>
    d9f8:	str	r0, [fp, #-16]
    d9fc:	ldr	r2, [fp, #-20]	; 0xffffffec
    da00:	ldr	r3, [pc, #588]	; dc54 <test_typed_table_with_emptystruct+0x2a0>
    da04:	ldr	r3, [r3]
    da08:	ldr	r1, [fp, #-16]
    da0c:	ldr	r0, [pc, #580]	; dc58 <test_typed_table_with_emptystruct+0x2a4>
    da10:	bl	cb40 <hexdump>
    da14:	ldr	r3, [fp, #-20]	; 0xffffffec
    da18:	ldr	r2, [pc, #572]	; dc5c <test_typed_table_with_emptystruct+0x2a8>
    da1c:	mov	r1, r3
    da20:	ldr	r0, [fp, #-16]
    da24:	bl	b7b4 <MyGame_Example_with_emptystruct_verify_as_root_with_identifier>
    da28:	mov	r3, r0
    da2c:	cmp	r3, #0
    da30:	beq	da44 <test_typed_table_with_emptystruct+0x90>
    da34:	ldr	r0, [pc, #548]	; dc60 <test_typed_table_with_emptystruct+0x2ac>
    da38:	bl	0 <puts>
    da3c:	mvn	r3, #0
    da40:	b	dc48 <test_typed_table_with_emptystruct+0x294>
    da44:	ldr	r3, [fp, #-20]	; 0xffffffec
    da48:	mov	r1, r3
    da4c:	ldr	r0, [fp, #-16]
    da50:	bl	b774 <MyGame_Example_with_emptystruct_verify_as_typed_root>
    da54:	mov	r3, r0
    da58:	cmp	r3, #0
    da5c:	beq	da70 <test_typed_table_with_emptystruct+0xbc>
    da60:	ldr	r0, [pc, #508]	; dc64 <test_typed_table_with_emptystruct+0x2b0>
    da64:	bl	0 <puts>
    da68:	mvn	r3, #0
    da6c:	b	dc48 <test_typed_table_with_emptystruct+0x294>
    da70:	ldr	r3, [fp, #-20]	; 0xffffffec
    da74:	ldr	r2, [pc, #492]	; dc68 <test_typed_table_with_emptystruct+0x2b4>
    da78:	mov	r1, r3
    da7c:	ldr	r0, [fp, #-16]
    da80:	bl	b7f4 <MyGame_Example_with_emptystruct_verify_as_root_with_type_hash>
    da84:	mov	r3, r0
    da88:	cmp	r3, #0
    da8c:	beq	daa0 <test_typed_table_with_emptystruct+0xec>
    da90:	ldr	r0, [pc, #468]	; dc6c <test_typed_table_with_emptystruct+0x2b8>
    da94:	bl	0 <puts>
    da98:	mvn	r3, #0
    da9c:	b	dc48 <test_typed_table_with_emptystruct+0x294>
    daa0:	ldr	r3, [fp, #-16]
    daa4:	cmp	r3, #0
    daa8:	bne	dabc <test_typed_table_with_emptystruct+0x108>
    daac:	ldr	r0, [pc, #444]	; dc70 <test_typed_table_with_emptystruct+0x2bc>
    dab0:	bl	0 <puts>
    dab4:	mvn	r3, #0
    dab8:	b	dc48 <test_typed_table_with_emptystruct+0x294>
    dabc:	ldr	r1, [pc, #420]	; dc68 <test_typed_table_with_emptystruct+0x2b4>
    dac0:	ldr	r0, [fp, #-16]
    dac4:	bl	1a9c <flatbuffers_has_type_hash>
    dac8:	mov	r3, r0
    dacc:	cmp	r3, #0
    dad0:	bne	dae4 <test_typed_table_with_emptystruct+0x130>
    dad4:	ldr	r0, [pc, #408]	; dc74 <test_typed_table_with_emptystruct+0x2c0>
    dad8:	bl	0 <puts>
    dadc:	mvn	r3, #0
    dae0:	b	dc48 <test_typed_table_with_emptystruct+0x294>
    dae4:	mov	r1, #0
    dae8:	ldr	r0, [fp, #-16]
    daec:	bl	1a9c <flatbuffers_has_type_hash>
    daf0:	mov	r3, r0
    daf4:	cmp	r3, #0
    daf8:	bne	db0c <test_typed_table_with_emptystruct+0x158>
    dafc:	ldr	r0, [pc, #372]	; dc78 <test_typed_table_with_emptystruct+0x2c4>
    db00:	bl	0 <puts>
    db04:	mvn	r3, #0
    db08:	b	dc48 <test_typed_table_with_emptystruct+0x294>
    db0c:	mov	r1, #1
    db10:	ldr	r0, [fp, #-16]
    db14:	bl	1a9c <flatbuffers_has_type_hash>
    db18:	mov	r3, r0
    db1c:	cmp	r3, #0
    db20:	beq	db34 <test_typed_table_with_emptystruct+0x180>
    db24:	ldr	r0, [pc, #336]	; dc7c <test_typed_table_with_emptystruct+0x2c8>
    db28:	bl	0 <puts>
    db2c:	mvn	r3, #0
    db30:	b	dc48 <test_typed_table_with_emptystruct+0x294>
    db34:	mov	r1, #0
    db38:	ldr	r0, [fp, #-16]
    db3c:	bl	19fc <flatbuffers_has_identifier>
    db40:	mov	r3, r0
    db44:	cmp	r3, #0
    db48:	bne	db5c <test_typed_table_with_emptystruct+0x1a8>
    db4c:	ldr	r0, [pc, #300]	; dc80 <test_typed_table_with_emptystruct+0x2cc>
    db50:	bl	0 <puts>
    db54:	mvn	r3, #0
    db58:	b	dc48 <test_typed_table_with_emptystruct+0x294>
    db5c:	ldr	r1, [pc, #248]	; dc5c <test_typed_table_with_emptystruct+0x2a8>
    db60:	ldr	r0, [fp, #-16]
    db64:	bl	19fc <flatbuffers_has_identifier>
    db68:	mov	r3, r0
    db6c:	cmp	r3, #0
    db70:	bne	db84 <test_typed_table_with_emptystruct+0x1d0>
    db74:	ldr	r0, [pc, #264]	; dc84 <test_typed_table_with_emptystruct+0x2d0>
    db78:	bl	0 <puts>
    db7c:	mvn	r3, #0
    db80:	b	dc48 <test_typed_table_with_emptystruct+0x294>
    db84:	ldr	r0, [fp, #-16]
    db88:	bl	22e4 <MyGame_Example_with_emptystruct_as_root>
    db8c:	mov	r3, r0
    db90:	cmp	r3, #0
    db94:	beq	dba8 <test_typed_table_with_emptystruct+0x1f4>
    db98:	ldr	r0, [pc, #232]	; dc88 <test_typed_table_with_emptystruct+0x2d4>
    db9c:	bl	0 <puts>
    dba0:	mvn	r3, #0
    dba4:	b	dc48 <test_typed_table_with_emptystruct+0x294>
    dba8:	mov	r1, #1
    dbac:	ldr	r0, [fp, #-16]
    dbb0:	bl	2284 <MyGame_Example_with_emptystruct_as_root_with_type_hash>
    dbb4:	mov	r3, r0
    dbb8:	cmp	r3, #0
    dbbc:	beq	dbd0 <test_typed_table_with_emptystruct+0x21c>
    dbc0:	ldr	r0, [pc, #196]	; dc8c <test_typed_table_with_emptystruct+0x2d8>
    dbc4:	bl	0 <puts>
    dbc8:	mvn	r3, #0
    dbcc:	b	dc48 <test_typed_table_with_emptystruct+0x294>
    dbd0:	ldr	r1, [pc, #132]	; dc5c <test_typed_table_with_emptystruct+0x2a8>
    dbd4:	ldr	r0, [fp, #-16]
    dbd8:	bl	2224 <MyGame_Example_with_emptystruct_as_root_with_identifier>
    dbdc:	mov	r3, r0
    dbe0:	cmp	r3, #0
    dbe4:	bne	dbf8 <test_typed_table_with_emptystruct+0x244>
    dbe8:	ldr	r0, [pc, #160]	; dc90 <test_typed_table_with_emptystruct+0x2dc>
    dbec:	bl	0 <puts>
    dbf0:	mvn	r3, #0
    dbf4:	b	dc48 <test_typed_table_with_emptystruct+0x294>
    dbf8:	ldr	r0, [fp, #-16]
    dbfc:	bl	234c <MyGame_Example_with_emptystruct_as_typed_root>
    dc00:	mov	r3, r0
    dc04:	cmp	r3, #0
    dc08:	bne	dc1c <test_typed_table_with_emptystruct+0x268>
    dc0c:	ldr	r0, [pc, #128]	; dc94 <test_typed_table_with_emptystruct+0x2e0>
    dc10:	bl	0 <puts>
    dc14:	mvn	r3, #0
    dc18:	b	dc48 <test_typed_table_with_emptystruct+0x294>
    dc1c:	mov	r1, #0
    dc20:	ldr	r0, [fp, #-16]
    dc24:	bl	2284 <MyGame_Example_with_emptystruct_as_root_with_type_hash>
    dc28:	mov	r3, r0
    dc2c:	cmp	r3, #0
    dc30:	bne	dc44 <test_typed_table_with_emptystruct+0x290>
    dc34:	ldr	r0, [pc, #92]	; dc98 <test_typed_table_with_emptystruct+0x2e4>
    dc38:	bl	0 <puts>
    dc3c:	mvn	r3, #0
    dc40:	b	dc48 <test_typed_table_with_emptystruct+0x294>
    dc44:	ldr	r3, [fp, #-8]
    dc48:	mov	r0, r3
    dc4c:	sub	sp, fp, #4
    dc50:	pop	{fp, pc}
    dc54:	.word	0x00000000
    dc58:	.word	0x00000dd0
    dc5c:	.word	0x000007fc
    dc60:	.word	0x00000df0
    dc64:	.word	0x00000e10
    dc68:	.word	0xb0dd37b6
    dc6c:	.word	0x00000e2c
    dc70:	.word	0x00000e54
    dc74:	.word	0x00000e6c
    dc78:	.word	0x00000e7c
    dc7c:	.word	0x00000e90
    dc80:	.word	0x00000eb4
    dc84:	.word	0x00000ed8
    dc88:	.word	0x00000f04
    dc8c:	.word	0x00000f24
    dc90:	.word	0x00000f4c
    dc94:	.word	0x00000f84
    dc98:	.word	0x00000f9c

0000dc9c <verify_monster>:
    dc9c:	push	{r4, fp, lr}
    dca0:	add	fp, sp, #8
    dca4:	sub	sp, sp, #124	; 0x7c
    dca8:	str	r0, [fp, #-128]	; 0xffffff80
    dcac:	sub	sp, sp, #48	; 0x30
    dcb0:	mov	r3, sp
    dcb4:	add	r3, r3, #15
    dcb8:	lsr	r3, r3, #4
    dcbc:	lsl	r4, r3, #4
    dcc0:	ldr	r3, [pc, #1404]	; e244 <verify_monster+0x5a8>
    dcc4:	sub	ip, fp, #104	; 0x68
    dcc8:	mov	lr, r3
    dccc:	ldm	lr!, {r0, r1, r2, r3}
    dcd0:	stmia	ip!, {r0, r1, r2, r3}
    dcd4:	ldr	r3, [lr]
    dcd8:	str	r3, [ip]
    dcdc:	ldr	r3, [pc, #1380]	; e248 <verify_monster+0x5ac>
    dce0:	sub	ip, fp, #120	; 0x78
    dce4:	ldm	r3, {r0, r1, r2, r3}
    dce8:	stm	ip, {r0, r1, r2, r3}
    dcec:	mov	r1, #0
    dcf0:	ldr	r0, [fp, #-128]	; 0xffffff80
    dcf4:	bl	19fc <flatbuffers_has_identifier>
    dcf8:	mov	r3, r0
    dcfc:	cmp	r3, #0
    dd00:	bne	dd14 <verify_monster+0x78>
    dd04:	ldr	r0, [pc, #1344]	; e24c <verify_monster+0x5b0>
    dd08:	bl	0 <puts>
    dd0c:	mvn	r3, #0
    dd10:	b	eb7c <verify_monster+0xee0>
    dd14:	ldr	r1, [pc, #1332]	; e250 <verify_monster+0x5b4>
    dd18:	ldr	r0, [fp, #-128]	; 0xffffff80
    dd1c:	bl	19fc <flatbuffers_has_identifier>
    dd20:	mov	r3, r0
    dd24:	cmp	r3, #0
    dd28:	bne	dd3c <verify_monster+0xa0>
    dd2c:	ldr	r0, [pc, #1312]	; e254 <verify_monster+0x5b8>
    dd30:	bl	0 <puts>
    dd34:	mvn	r3, #0
    dd38:	b	eb7c <verify_monster+0xee0>
    dd3c:	ldr	r1, [pc, #1300]	; e258 <verify_monster+0x5bc>
    dd40:	ldr	r0, [fp, #-128]	; 0xffffff80
    dd44:	bl	19fc <flatbuffers_has_identifier>
    dd48:	mov	r3, r0
    dd4c:	cmp	r3, #0
    dd50:	bne	dd64 <verify_monster+0xc8>
    dd54:	ldr	r0, [pc, #1280]	; e25c <verify_monster+0x5c0>
    dd58:	bl	0 <puts>
    dd5c:	mvn	r3, #0
    dd60:	b	eb7c <verify_monster+0xee0>
    dd64:	ldr	r1, [pc, #1268]	; e260 <verify_monster+0x5c4>
    dd68:	ldr	r0, [fp, #-128]	; 0xffffff80
    dd6c:	bl	19fc <flatbuffers_has_identifier>
    dd70:	mov	r3, r0
    dd74:	cmp	r3, #0
    dd78:	beq	dd8c <verify_monster+0xf0>
    dd7c:	ldr	r0, [pc, #1248]	; e264 <verify_monster+0x5c8>
    dd80:	bl	0 <puts>
    dd84:	mvn	r3, #0
    dd88:	b	eb7c <verify_monster+0xee0>
    dd8c:	ldr	r1, [pc, #1212]	; e250 <verify_monster+0x5b4>
    dd90:	ldr	r0, [fp, #-128]	; 0xffffff80
    dd94:	bl	19fc <flatbuffers_has_identifier>
    dd98:	mov	r3, r0
    dd9c:	cmp	r3, #0
    dda0:	bne	ddb4 <verify_monster+0x118>
    dda4:	ldr	r0, [pc, #1212]	; e268 <verify_monster+0x5cc>
    dda8:	bl	0 <puts>
    ddac:	mvn	r3, #0
    ddb0:	b	eb7c <verify_monster+0xee0>
    ddb4:	ldr	r0, [fp, #-128]	; 0xffffff80
    ddb8:	bl	2d78 <MyGame_Example_Monster_as_root>
    ddbc:	str	r0, [fp, #-20]	; 0xffffffec
    ddc0:	ldr	r3, [fp, #-20]	; 0xffffffec
    ddc4:	cmp	r3, #0
    ddc8:	bne	dddc <verify_monster+0x140>
    ddcc:	ldr	r0, [pc, #1176]	; e26c <verify_monster+0x5d0>
    ddd0:	bl	0 <puts>
    ddd4:	mvn	r3, #0
    ddd8:	b	eb7c <verify_monster+0xee0>
    dddc:	ldr	r0, [fp, #-20]	; 0xffffffec
    dde0:	bl	2f8c <MyGame_Example_Monster_hp>
    dde4:	mov	r3, r0
    dde8:	cmp	r3, #80	; 0x50
    ddec:	beq	de00 <verify_monster+0x164>
    ddf0:	ldr	r0, [pc, #1144]	; e270 <verify_monster+0x5d4>
    ddf4:	bl	0 <puts>
    ddf8:	mvn	r3, #0
    ddfc:	b	eb7c <verify_monster+0xee0>
    de00:	ldr	r0, [fp, #-20]	; 0xffffffec
    de04:	bl	2de0 <MyGame_Example_Monster_pos>
    de08:	str	r0, [fp, #-24]	; 0xffffffe8
    de0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    de10:	cmp	r3, #0
    de14:	bne	de28 <verify_monster+0x18c>
    de18:	ldr	r0, [pc, #1108]	; e274 <verify_monster+0x5d8>
    de1c:	bl	0 <puts>
    de20:	mvn	r3, #0
    de24:	b	eb7c <verify_monster+0xee0>
    de28:	ldr	r3, [fp, #-24]	; 0xffffffe8
    de2c:	and	r3, r3, #15
    de30:	cmp	r3, #0
    de34:	beq	de40 <verify_monster+0x1a4>
    de38:	ldr	r0, [pc, #1080]	; e278 <verify_monster+0x5dc>
    de3c:	bl	0 <puts>
    de40:	ldr	r0, [fp, #-24]	; 0xffffffe8
    de44:	bl	1ff4 <MyGame_Example_Vec3_z>
    de48:	vmov.f32	s14, s0
    de4c:	vldr	s15, [pc, #996]	; e238 <verify_monster+0x59c>
    de50:	vcmp.f32	s14, s15
    de54:	vmrs	APSR_nzcv, fpscr
    de58:	beq	de6c <verify_monster+0x1d0>
    de5c:	ldr	r0, [pc, #1048]	; e27c <verify_monster+0x5e0>
    de60:	bl	0 <puts>
    de64:	mvn	r3, #0
    de68:	b	eb7c <verify_monster+0xee0>
    de6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    de70:	vldr	s15, [r3]
    de74:	vldr	s14, [pc, #960]	; e23c <verify_monster+0x5a0>
    de78:	vcmp.f32	s15, s14
    de7c:	vmrs	APSR_nzcv, fpscr
    de80:	bne	deb4 <verify_monster+0x218>
    de84:	ldr	r3, [fp, #-24]	; 0xffffffe8
    de88:	vldr	s15, [r3, #4]
    de8c:	vldr	s14, [pc, #940]	; e240 <verify_monster+0x5a4>
    de90:	vcmp.f32	s15, s14
    de94:	vmrs	APSR_nzcv, fpscr
    de98:	bne	deb4 <verify_monster+0x218>
    de9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    dea0:	vldr	s15, [r3, #8]
    dea4:	vldr	s14, [pc, #908]	; e238 <verify_monster+0x59c>
    dea8:	vcmp.f32	s15, s14
    deac:	vmrs	APSR_nzcv, fpscr
    deb0:	beq	dec4 <verify_monster+0x228>
    deb4:	ldr	r0, [pc, #964]	; e280 <verify_monster+0x5e4>
    deb8:	bl	0 <puts>
    debc:	mvn	r3, #0
    dec0:	b	eb7c <verify_monster+0xee0>
    dec4:	mov	r0, r4
    dec8:	bl	797c <MyGame_Example_Vec3_clear>
    decc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    ded0:	mov	r0, r4
    ded4:	bl	78a0 <MyGame_Example_Vec3_copy_from_pe>
    ded8:	vldr	s15, [r4]
    dedc:	vldr	s14, [pc, #856]	; e23c <verify_monster+0x5a0>
    dee0:	vcmp.f32	s15, s14
    dee4:	vmrs	APSR_nzcv, fpscr
    dee8:	bne	df14 <verify_monster+0x278>
    deec:	vldr	s15, [r4, #4]
    def0:	vldr	s14, [pc, #840]	; e240 <verify_monster+0x5a4>
    def4:	vcmp.f32	s15, s14
    def8:	vmrs	APSR_nzcv, fpscr
    defc:	bne	df14 <verify_monster+0x278>
    df00:	vldr	s15, [r4, #8]
    df04:	vldr	s14, [pc, #812]	; e238 <verify_monster+0x59c>
    df08:	vcmp.f32	s15, s14
    df0c:	vmrs	APSR_nzcv, fpscr
    df10:	beq	df24 <verify_monster+0x288>
    df14:	ldr	r0, [pc, #872]	; e284 <verify_monster+0x5e8>
    df18:	bl	0 <puts>
    df1c:	mvn	r3, #0
    df20:	b	eb7c <verify_monster+0xee0>
    df24:	ldr	r3, [fp, #-24]	; 0xffffffe8
    df28:	vldr	d7, [r3, #16]
    df2c:	vcmp.f64	d7, #0.0
    df30:	vmrs	APSR_nzcv, fpscr
    df34:	bne	df70 <verify_monster+0x2d4>
    df38:	ldr	r3, [fp, #-24]	; 0xffffffe8
    df3c:	vldr	d7, [r3, #16]
    df40:	vcmp.f64	d7, #0.0
    df44:	vmrs	APSR_nzcv, fpscr
    df48:	bne	df70 <verify_monster+0x2d4>
    df4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    df50:	add	r3, r3, #26
    df54:	mov	r2, #4
    df58:	ldr	r1, [pc, #808]	; e288 <verify_monster+0x5ec>
    df5c:	mov	r0, r3
    df60:	bl	0 <memcmp>
    df64:	mov	r3, r0
    df68:	cmp	r3, #0
    df6c:	beq	df80 <verify_monster+0x2e4>
    df70:	ldr	r0, [pc, #788]	; e28c <verify_monster+0x5f0>
    df74:	bl	0 <puts>
    df78:	mvn	r3, #0
    df7c:	b	eb7c <verify_monster+0xee0>
    df80:	ldr	r0, [fp, #-20]	; 0xffffffec
    df84:	bl	35e4 <MyGame_Example_Monster_name>
    df88:	str	r0, [fp, #-28]	; 0xffffffe4
    df8c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    df90:	cmp	r3, #0
    df94:	beq	dfb0 <verify_monster+0x314>
    df98:	ldr	r1, [pc, #752]	; e290 <verify_monster+0x5f4>
    df9c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    dfa0:	bl	0 <strcmp>
    dfa4:	mov	r3, r0
    dfa8:	cmp	r3, #0
    dfac:	beq	dfc0 <verify_monster+0x324>
    dfb0:	ldr	r0, [pc, #732]	; e294 <verify_monster+0x5f8>
    dfb4:	bl	0 <puts>
    dfb8:	mvn	r3, #0
    dfbc:	b	eb7c <verify_monster+0xee0>
    dfc0:	ldr	r0, [fp, #-20]	; 0xffffffec
    dfc4:	bl	35e4 <MyGame_Example_Monster_name>
    dfc8:	str	r0, [fp, #-32]	; 0xffffffe0
    dfcc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    dfd0:	bl	9fc <flatbuffers_string_len>
    dfd4:	mov	r3, r0
    dfd8:	cmp	r3, #9
    dfdc:	bne	dff4 <verify_monster+0x358>
    dfe0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    dfe4:	bl	9fc <flatbuffers_string_len>
    dfe8:	mov	r3, r0
    dfec:	cmp	r3, #9
    dff0:	beq	e004 <verify_monster+0x368>
    dff4:	ldr	r0, [pc, #668]	; e298 <verify_monster+0x5fc>
    dff8:	bl	0 <puts>
    dffc:	mvn	r3, #0
    e000:	b	eb7c <verify_monster+0xee0>
    e004:	ldr	r0, [fp, #-20]	; 0xffffffec
    e008:	bl	43b8 <MyGame_Example_Monster_color>
    e00c:	mov	r3, r0
    e010:	cmp	r3, #2
    e014:	beq	e028 <verify_monster+0x38c>
    e018:	ldr	r0, [pc, #636]	; e29c <verify_monster+0x600>
    e01c:	bl	0 <puts>
    e020:	mvn	r3, #0
    e024:	b	eb7c <verify_monster+0xee0>
    e028:	mov	r0, #2
    e02c:	bl	1bec <MyGame_Example_Color_name>
    e030:	mov	r3, r0
    e034:	ldr	r1, [pc, #612]	; e2a0 <verify_monster+0x604>
    e038:	mov	r0, r3
    e03c:	bl	0 <strcmp>
    e040:	mov	r3, r0
    e044:	cmp	r3, #0
    e048:	beq	e05c <verify_monster+0x3c0>
    e04c:	ldr	r0, [pc, #592]	; e2a4 <verify_monster+0x608>
    e050:	bl	0 <puts>
    e054:	mvn	r3, #0
    e058:	b	eb7c <verify_monster+0xee0>
    e05c:	mov	r0, #2
    e060:	bl	1c58 <MyGame_Example_Color_is_known_value>
    e064:	mov	r3, r0
    e068:	cmp	r3, #0
    e06c:	bne	e080 <verify_monster+0x3e4>
    e070:	ldr	r0, [pc, #560]	; e2a8 <verify_monster+0x60c>
    e074:	bl	0 <puts>
    e078:	mvn	r3, #0
    e07c:	b	eb7c <verify_monster+0xee0>
    e080:	mov	r0, #1
    e084:	bl	1c58 <MyGame_Example_Color_is_known_value>
    e088:	mov	r3, r0
    e08c:	cmp	r3, #0
    e090:	bne	e0a4 <verify_monster+0x408>
    e094:	ldr	r0, [pc, #528]	; e2ac <verify_monster+0x610>
    e098:	bl	0 <puts>
    e09c:	mvn	r3, #0
    e0a0:	b	eb7c <verify_monster+0xee0>
    e0a4:	mov	r0, #4
    e0a8:	bl	1c58 <MyGame_Example_Color_is_known_value>
    e0ac:	mov	r3, r0
    e0b0:	cmp	r3, #0
    e0b4:	beq	e0c8 <verify_monster+0x42c>
    e0b8:	ldr	r0, [pc, #496]	; e2b0 <verify_monster+0x614>
    e0bc:	bl	0 <puts>
    e0c0:	mvn	r3, #0
    e0c4:	b	eb7c <verify_monster+0xee0>
    e0c8:	mov	r0, #8
    e0cc:	bl	1c58 <MyGame_Example_Color_is_known_value>
    e0d0:	mov	r3, r0
    e0d4:	cmp	r3, #0
    e0d8:	bne	e0ec <verify_monster+0x450>
    e0dc:	ldr	r0, [pc, #464]	; e2b4 <verify_monster+0x618>
    e0e0:	bl	0 <puts>
    e0e4:	mvn	r3, #0
    e0e8:	b	eb7c <verify_monster+0xee0>
    e0ec:	mov	r0, #9
    e0f0:	bl	1c58 <MyGame_Example_Color_is_known_value>
    e0f4:	mov	r3, r0
    e0f8:	cmp	r3, #0
    e0fc:	beq	e110 <verify_monster+0x474>
    e100:	ldr	r0, [pc, #424]	; e2b0 <verify_monster+0x614>
    e104:	bl	0 <puts>
    e108:	mvn	r3, #0
    e10c:	b	eb7c <verify_monster+0xee0>
    e110:	mov	r0, #1
    e114:	bl	21b0 <MyGame_Example_Any_is_known_type>
    e118:	mov	r3, r0
    e11c:	cmp	r3, #0
    e120:	bne	e134 <verify_monster+0x498>
    e124:	ldr	r0, [pc, #396]	; e2b8 <verify_monster+0x61c>
    e128:	bl	0 <puts>
    e12c:	mvn	r3, #0
    e130:	b	eb7c <verify_monster+0xee0>
    e134:	mov	r0, #42	; 0x2a
    e138:	bl	21b0 <MyGame_Example_Any_is_known_type>
    e13c:	mov	r3, r0
    e140:	cmp	r3, #0
    e144:	beq	e158 <verify_monster+0x4bc>
    e148:	ldr	r0, [pc, #364]	; e2bc <verify_monster+0x620>
    e14c:	bl	0 <puts>
    e150:	mvn	r3, #0
    e154:	b	eb7c <verify_monster+0xee0>
    e158:	ldr	r0, [fp, #-20]	; 0xffffffec
    e15c:	bl	4578 <MyGame_Example_Monster_inventory>
    e160:	str	r0, [fp, #-36]	; 0xffffffdc
    e164:	ldr	r0, [fp, #-36]	; 0xffffffdc
    e168:	bl	de8 <flatbuffers_uint8_vec_len>
    e16c:	mov	r3, r0
    e170:	cmp	r3, #10
    e174:	beq	e188 <verify_monster+0x4ec>
    e178:	ldr	r0, [pc, #320]	; e2c0 <verify_monster+0x624>
    e17c:	bl	0 <puts>
    e180:	mvn	r3, #0
    e184:	b	eb7c <verify_monster+0xee0>
    e188:	mov	r3, #0
    e18c:	str	r3, [fp, #-16]
    e190:	b	e1d8 <verify_monster+0x53c>
    e194:	ldr	r1, [fp, #-16]
    e198:	ldr	r0, [fp, #-36]	; 0xffffffdc
    e19c:	bl	e10 <flatbuffers_uint8_vec_at>
    e1a0:	mov	r3, r0
    e1a4:	mov	r2, r3
    e1a8:	ldr	r3, [fp, #-16]
    e1ac:	cmp	r2, r3
    e1b0:	beq	e1cc <verify_monster+0x530>
    e1b4:	ldr	r3, [fp, #-16]
    e1b8:	mov	r1, r3
    e1bc:	ldr	r0, [pc, #256]	; e2c4 <verify_monster+0x628>
    e1c0:	bl	0 <printf>
    e1c4:	mvn	r3, #0
    e1c8:	b	eb7c <verify_monster+0xee0>
    e1cc:	ldr	r3, [fp, #-16]
    e1d0:	add	r3, r3, #1
    e1d4:	str	r3, [fp, #-16]
    e1d8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    e1dc:	bl	de8 <flatbuffers_uint8_vec_len>
    e1e0:	mov	r2, r0
    e1e4:	ldr	r3, [fp, #-16]
    e1e8:	cmp	r2, r3
    e1ec:	bhi	e194 <verify_monster+0x4f8>
    e1f0:	ldr	r0, [fp, #-20]	; 0xffffffec
    e1f4:	bl	3424 <MyGame_Example_Monster_mana>
    e1f8:	mov	r3, r0
    e1fc:	cmp	r3, #150	; 0x96
    e200:	beq	e214 <verify_monster+0x578>
    e204:	ldr	r0, [pc, #188]	; e2c8 <verify_monster+0x62c>
    e208:	bl	0 <puts>
    e20c:	mvn	r3, #0
    e210:	b	eb7c <verify_monster+0xee0>
    e214:	ldr	r0, [fp, #-20]	; 0xffffffec
    e218:	bl	3510 <MyGame_Example_Monster_mana_is_present>
    e21c:	mov	r3, r0
    e220:	cmp	r3, #0
    e224:	beq	e380 <verify_monster+0x6e4>
    e228:	ldr	r0, [pc, #156]	; e2cc <verify_monster+0x630>
    e22c:	bl	0 <puts>
    e230:	mvn	r3, #0
    e234:	b	eb7c <verify_monster+0xee0>
    e238:	.word	0xc04ccccd
    e23c:	.word	0x3f800000
    e240:	.word	0x40000000
    e244:	.word	0x000018ac
    e248:	.word	0x000018c0
    e24c:	.word	0x00000fb8
    e250:	.word	0x00000134
    e254:	.word	0x00000fe4
    e258:	.word	0x00001010
    e25c:	.word	0x00001018
    e260:	.word	0x0000104c
    e264:	.word	0x00001054
    e268:	.word	0x00001088
    e26c:	.word	0x0000094c
    e270:	.word	0x00000a2c
    e274:	.word	0x000010bc
    e278:	.word	0x000010d0
    e27c:	.word	0x000010f8
    e280:	.word	0x0000111c
    e284:	.word	0x00001134
    e288:	.word	0x00000000
    e28c:	.word	0x00001158
    e290:	.word	0x00000b1c
    e294:	.word	0x0000117c
    e298:	.word	0x00001190
    e29c:	.word	0x000011ac
    e2a0:	.word	0x000000b4
    e2a4:	.word	0x000011cc
    e2a8:	.word	0x000011fc
    e2ac:	.word	0x00001238
    e2b0:	.word	0x00001270
    e2b4:	.word	0x0000129c
    e2b8:	.word	0x000012d8
    e2bc:	.word	0x000012fc
    e2c0:	.word	0x00001320
    e2c4:	.word	0x0000133c
    e2c8:	.word	0x0000135c
    e2cc:	.word	0x00001370
    e2d0:	.word	0x00001384
    e2d4:	.word	0x00000a70
    e2d8:	.word	0x000013a4
    e2dc:	.word	0x000013cc
    e2e0:	.word	0x000013f4
    e2e4:	.word	0x00003560
    e2e8:	.word	0x00000296
    e2ec:	.word	0x00001418
    e2f0:	.word	0x00001474
    e2f4:	.word	0x00001480
    e2f8:	.word	0x00001498
    e2fc:	.word	0x000014d0
    e300:	.word	0x000014fc
    e304:	.word	0x0000152c
    e308:	.word	0x00001554
    e30c:	.word	0x00001578
    e310:	.word	0x00001520
    e314:	.word	0x0000159c
    e318:	.word	0x000014f4
    e31c:	.word	0x000015c4
    e320:	.word	0x000015ec
    e324:	.word	0x00001618
    e328:	.word	0x00001620
    e32c:	.word	0x00001638
    e330:	.word	0x00001654
    e334:	.word	0x00001658
    e338:	.word	0x00001678
    e33c:	.word	0x00001680
    e340:	.word	0x00001698
    e344:	.word	0x000016b4
    e348:	.word	0x000016d4
    e34c:	.word	0x000016f4
    e350:	.word	0x00001720
    e354:	.word	0x00001740
    e358:	.word	0x0000174c
    e35c:	.word	0x0000176c
    e360:	.word	0x00001790
    e364:	.word	0x000017c0
    e368:	.word	0x000017e0
    e36c:	.word	0x00001478
    e370:	.word	0x00001824
    e374:	.word	0x00001860
    e378:	.word	0x00001874
    e37c:	.word	0x00001894
    e380:	ldr	r0, [fp, #-20]	; 0xffffffec
    e384:	bl	3078 <MyGame_Example_Monster_hp_is_present>
    e388:	mov	r3, r0
    e38c:	cmp	r3, #0
    e390:	bne	e3a4 <verify_monster+0x708>
    e394:	ldr	r0, [pc, #-204]	; e2d0 <verify_monster+0x634>
    e398:	bl	0 <puts>
    e39c:	mvn	r3, #0
    e3a0:	b	eb7c <verify_monster+0xee0>
    e3a4:	ldr	r0, [fp, #-20]	; 0xffffffec
    e3a8:	bl	2ebc <MyGame_Example_Monster_pos_is_present>
    e3ac:	mov	r3, r0
    e3b0:	cmp	r3, #0
    e3b4:	bne	e3c8 <verify_monster+0x72c>
    e3b8:	ldr	r0, [pc, #-236]	; e2d4 <verify_monster+0x638>
    e3bc:	bl	0 <puts>
    e3c0:	mvn	r3, #0
    e3c4:	b	eb7c <verify_monster+0xee0>
    e3c8:	ldr	r0, [fp, #-20]	; 0xffffffec
    e3cc:	bl	4e68 <MyGame_Example_Monster_test4>
    e3d0:	str	r0, [fp, #-40]	; 0xffffffd8
    e3d4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    e3d8:	bl	1d6c <MyGame_Example_Test_vec_len>
    e3dc:	mov	r3, r0
    e3e0:	cmp	r3, #5
    e3e4:	beq	e3f8 <verify_monster+0x75c>
    e3e8:	ldr	r0, [pc, #-280]	; e2d8 <verify_monster+0x63c>
    e3ec:	bl	0 <puts>
    e3f0:	mvn	r3, #0
    e3f4:	b	eb7c <verify_monster+0xee0>
    e3f8:	mov	r3, #0
    e3fc:	str	r3, [fp, #-16]
    e400:	b	e4a4 <verify_monster+0x808>
    e404:	ldr	r1, [fp, #-16]
    e408:	ldr	r0, [fp, #-40]	; 0xffffffd8
    e40c:	bl	1ce8 <MyGame_Example_Test_vec_at>
    e410:	str	r0, [fp, #-44]	; 0xffffffd4
    e414:	ldr	r3, [fp, #-16]
    e418:	lsl	r3, r3, #2
    e41c:	sub	r2, fp, #12
    e420:	add	r3, r2, r3
    e424:	sub	r3, r3, #92	; 0x5c
    e428:	ldrsh	r4, [r3]
    e42c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    e430:	bl	1db0 <MyGame_Example_Test_a>
    e434:	mov	r3, r0
    e438:	cmp	r4, r3
    e43c:	beq	e458 <verify_monster+0x7bc>
    e440:	ldr	r3, [fp, #-16]
    e444:	mov	r1, r3
    e448:	ldr	r0, [pc, #-372]	; e2dc <verify_monster+0x640>
    e44c:	bl	0 <printf>
    e450:	mvn	r3, #0
    e454:	b	eb7c <verify_monster+0xee0>
    e458:	ldr	r3, [fp, #-16]
    e45c:	lsl	r3, r3, #2
    e460:	sub	r2, fp, #12
    e464:	add	r3, r2, r3
    e468:	ldrsb	r4, [r3, #-90]	; 0xffffffa6
    e46c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    e470:	bl	1df0 <MyGame_Example_Test_b>
    e474:	mov	r3, r0
    e478:	cmp	r4, r3
    e47c:	beq	e498 <verify_monster+0x7fc>
    e480:	ldr	r3, [fp, #-16]
    e484:	mov	r1, r3
    e488:	ldr	r0, [pc, #-436]	; e2dc <verify_monster+0x640>
    e48c:	bl	0 <printf>
    e490:	mvn	r3, #0
    e494:	b	eb7c <verify_monster+0xee0>
    e498:	ldr	r3, [fp, #-16]
    e49c:	add	r3, r3, #1
    e4a0:	str	r3, [fp, #-16]
    e4a4:	ldr	r3, [fp, #-16]
    e4a8:	cmp	r3, #4
    e4ac:	bls	e404 <verify_monster+0x768>
    e4b0:	ldr	r0, [fp, #-20]	; 0xffffffec
    e4b4:	bl	4674 <MyGame_Example_Monster_testarrayoftables>
    e4b8:	str	r0, [fp, #-48]	; 0xffffffd0
    e4bc:	ldr	r0, [fp, #-48]	; 0xffffffd0
    e4c0:	bl	2c50 <MyGame_Example_Monster_vec_len>
    e4c4:	mov	r3, r0
    e4c8:	cmp	r3, #8
    e4cc:	beq	e4e0 <verify_monster+0x844>
    e4d0:	ldr	r0, [pc, #-504]	; e2e0 <verify_monster+0x644>
    e4d4:	bl	0 <puts>
    e4d8:	mvn	r3, #0
    e4dc:	b	eb7c <verify_monster+0xee0>
    e4e0:	mov	r1, #5
    e4e4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    e4e8:	bl	2c94 <MyGame_Example_Monster_vec_at>
    e4ec:	str	r0, [fp, #-52]	; 0xffffffcc
    e4f0:	ldr	r3, [fp, #-52]	; 0xffffffcc
    e4f4:	cmp	r3, #0
    e4f8:	bne	e510 <verify_monster+0x874>
    e4fc:	ldr	r3, [pc, #-544]	; e2e4 <verify_monster+0x648>
    e500:	ldr	r2, [pc, #-544]	; e2e8 <verify_monster+0x64c>
    e504:	ldr	r1, [pc, #-544]	; e2ec <verify_monster+0x650>
    e508:	ldr	r0, [pc, #-544]	; e2f0 <verify_monster+0x654>
    e50c:	bl	0 <__assert_fail>
    e510:	ldr	r0, [fp, #-52]	; 0xffffffcc
    e514:	bl	35e4 <MyGame_Example_Monster_name>
    e518:	str	r0, [fp, #-28]	; 0xffffffe4
    e51c:	ldr	r1, [pc, #-440]	; e36c <verify_monster+0x6d0>
    e520:	ldr	r0, [fp, #-28]	; 0xffffffe4
    e524:	bl	0 <strcmp>
    e528:	mov	r3, r0
    e52c:	cmp	r3, #0
    e530:	beq	e544 <verify_monster+0x8a8>
    e534:	ldr	r0, [pc, #-584]	; e2f4 <verify_monster+0x658>
    e538:	bl	0 <printf>
    e53c:	mvn	r3, #0
    e540:	b	eb7c <verify_monster+0xee0>
    e544:	mov	r1, #1
    e548:	ldr	r0, [fp, #-48]	; 0xffffffd0
    e54c:	bl	2c94 <MyGame_Example_Monster_vec_at>
    e550:	str	r0, [fp, #-56]	; 0xffffffc8
    e554:	ldr	r2, [fp, #-56]	; 0xffffffc8
    e558:	ldr	r3, [fp, #-52]	; 0xffffffcc
    e55c:	cmp	r2, r3
    e560:	beq	e574 <verify_monster+0x8d8>
    e564:	ldr	r0, [pc, #-628]	; e2f8 <verify_monster+0x65c>
    e568:	bl	0 <puts>
    e56c:	mvn	r3, #0
    e570:	b	eb7c <verify_monster+0xee0>
    e574:	ldr	r0, [fp, #-56]	; 0xffffffc8
    e578:	bl	35e4 <MyGame_Example_Monster_name>
    e57c:	str	r0, [fp, #-28]	; 0xffffffe4
    e580:	ldr	r1, [pc, #-540]	; e36c <verify_monster+0x6d0>
    e584:	ldr	r0, [fp, #-28]	; 0xffffffe4
    e588:	bl	0 <strcmp>
    e58c:	mov	r3, r0
    e590:	cmp	r3, #0
    e594:	beq	e5ac <verify_monster+0x910>
    e598:	ldr	r1, [fp, #-28]	; 0xffffffe4
    e59c:	ldr	r0, [pc, #-680]	; e2fc <verify_monster+0x660>
    e5a0:	bl	0 <printf>
    e5a4:	mvn	r3, #0
    e5a8:	b	eb7c <verify_monster+0xee0>
    e5ac:	mov	r1, #2
    e5b0:	ldr	r0, [fp, #-48]	; 0xffffffd0
    e5b4:	bl	2c94 <MyGame_Example_Monster_vec_at>
    e5b8:	str	r0, [fp, #-52]	; 0xffffffcc
    e5bc:	ldr	r0, [fp, #-52]	; 0xffffffcc
    e5c0:	bl	35e4 <MyGame_Example_Monster_name>
    e5c4:	str	r0, [fp, #-28]	; 0xffffffe4
    e5c8:	ldr	r1, [pc, #-696]	; e318 <verify_monster+0x67c>
    e5cc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    e5d0:	bl	0 <strcmp>
    e5d4:	mov	r3, r0
    e5d8:	cmp	r3, #0
    e5dc:	beq	e5f4 <verify_monster+0x958>
    e5e0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    e5e4:	ldr	r0, [pc, #-748]	; e300 <verify_monster+0x664>
    e5e8:	bl	0 <printf>
    e5ec:	mvn	r3, #0
    e5f0:	b	eb7c <verify_monster+0xee0>
    e5f4:	mov	r1, #0
    e5f8:	ldr	r0, [fp, #-48]	; 0xffffffd0
    e5fc:	bl	2c94 <MyGame_Example_Monster_vec_at>
    e600:	str	r0, [fp, #-52]	; 0xffffffcc
    e604:	ldr	r0, [fp, #-52]	; 0xffffffcc
    e608:	bl	35e4 <MyGame_Example_Monster_name>
    e60c:	str	r0, [fp, #-28]	; 0xffffffe4
    e610:	ldr	r1, [pc, #-776]	; e310 <verify_monster+0x674>
    e614:	ldr	r0, [fp, #-28]	; 0xffffffe4
    e618:	bl	0 <strcmp>
    e61c:	mov	r3, r0
    e620:	cmp	r3, #0
    e624:	beq	e63c <verify_monster+0x9a0>
    e628:	ldr	r1, [fp, #-28]	; 0xffffffe4
    e62c:	ldr	r0, [pc, #-816]	; e304 <verify_monster+0x668>
    e630:	bl	0 <printf>
    e634:	mvn	r3, #0
    e638:	b	eb7c <verify_monster+0xee0>
    e63c:	mov	r1, #3
    e640:	ldr	r0, [fp, #-48]	; 0xffffffd0
    e644:	bl	2c94 <MyGame_Example_Monster_vec_at>
    e648:	str	r0, [fp, #-52]	; 0xffffffcc
    e64c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    e650:	bl	35e4 <MyGame_Example_Monster_name>
    e654:	str	r0, [fp, #-28]	; 0xffffffe4
    e658:	ldr	r1, [pc, #-756]	; e36c <verify_monster+0x6d0>
    e65c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    e660:	bl	0 <strcmp>
    e664:	mov	r3, r0
    e668:	cmp	r3, #0
    e66c:	beq	e684 <verify_monster+0x9e8>
    e670:	ldr	r1, [fp, #-28]	; 0xffffffe4
    e674:	ldr	r0, [pc, #-884]	; e308 <verify_monster+0x66c>
    e678:	bl	0 <printf>
    e67c:	mvn	r3, #0
    e680:	b	eb7c <verify_monster+0xee0>
    e684:	mov	r1, #4
    e688:	ldr	r0, [fp, #-48]	; 0xffffffd0
    e68c:	bl	2c94 <MyGame_Example_Monster_vec_at>
    e690:	str	r0, [fp, #-52]	; 0xffffffcc
    e694:	ldr	r0, [fp, #-52]	; 0xffffffcc
    e698:	bl	35e4 <MyGame_Example_Monster_name>
    e69c:	str	r0, [fp, #-28]	; 0xffffffe4
    e6a0:	ldr	r1, [pc, #-912]	; e318 <verify_monster+0x67c>
    e6a4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    e6a8:	bl	0 <strcmp>
    e6ac:	mov	r3, r0
    e6b0:	cmp	r3, #0
    e6b4:	beq	e6cc <verify_monster+0xa30>
    e6b8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    e6bc:	ldr	r0, [pc, #-952]	; e30c <verify_monster+0x670>
    e6c0:	bl	0 <printf>
    e6c4:	mvn	r3, #0
    e6c8:	b	eb7c <verify_monster+0xee0>
    e6cc:	mov	r1, #6
    e6d0:	ldr	r0, [fp, #-48]	; 0xffffffd0
    e6d4:	bl	2c94 <MyGame_Example_Monster_vec_at>
    e6d8:	str	r0, [fp, #-52]	; 0xffffffcc
    e6dc:	ldr	r0, [fp, #-52]	; 0xffffffcc
    e6e0:	bl	35e4 <MyGame_Example_Monster_name>
    e6e4:	str	r0, [fp, #-28]	; 0xffffffe4
    e6e8:	ldr	r1, [pc, #-992]	; e310 <verify_monster+0x674>
    e6ec:	ldr	r0, [fp, #-28]	; 0xffffffe4
    e6f0:	bl	0 <strcmp>
    e6f4:	mov	r3, r0
    e6f8:	cmp	r3, #0
    e6fc:	beq	e714 <verify_monster+0xa78>
    e700:	ldr	r1, [fp, #-28]	; 0xffffffe4
    e704:	ldr	r0, [pc, #-1016]	; e314 <verify_monster+0x678>
    e708:	bl	0 <printf>
    e70c:	mvn	r3, #0
    e710:	b	eb7c <verify_monster+0xee0>
    e714:	mov	r1, #7
    e718:	ldr	r0, [fp, #-48]	; 0xffffffd0
    e71c:	bl	2c94 <MyGame_Example_Monster_vec_at>
    e720:	str	r0, [fp, #-52]	; 0xffffffcc
    e724:	ldr	r0, [fp, #-52]	; 0xffffffcc
    e728:	bl	35e4 <MyGame_Example_Monster_name>
    e72c:	str	r0, [fp, #-28]	; 0xffffffe4
    e730:	ldr	r1, [pc, #-1056]	; e318 <verify_monster+0x67c>
    e734:	ldr	r0, [fp, #-28]	; 0xffffffe4
    e738:	bl	0 <strcmp>
    e73c:	mov	r3, r0
    e740:	cmp	r3, #0
    e744:	beq	e75c <verify_monster+0xac0>
    e748:	ldr	r1, [fp, #-28]	; 0xffffffe4
    e74c:	ldr	r0, [pc, #-1080]	; e31c <verify_monster+0x680>
    e750:	bl	0 <printf>
    e754:	mvn	r3, #0
    e758:	b	eb7c <verify_monster+0xee0>
    e75c:	ldr	r0, [fp, #-20]	; 0xffffffec
    e760:	bl	4770 <MyGame_Example_Monster_testarrayofstring>
    e764:	str	r0, [fp, #-60]	; 0xffffffc4
    e768:	ldr	r0, [fp, #-60]	; 0xffffffc4
    e76c:	bl	a40 <flatbuffers_string_vec_len>
    e770:	mov	r3, r0
    e774:	cmp	r3, #3
    e778:	beq	e78c <verify_monster+0xaf0>
    e77c:	ldr	r0, [pc, #-1124]	; e320 <verify_monster+0x684>
    e780:	bl	0 <puts>
    e784:	mvn	r3, #0
    e788:	b	eb7c <verify_monster+0xee0>
    e78c:	mov	r1, #0
    e790:	ldr	r0, [fp, #-60]	; 0xffffffc4
    e794:	bl	a84 <flatbuffers_string_vec_at>
    e798:	mov	r3, r0
    e79c:	ldr	r1, [pc, #-1152]	; e324 <verify_monster+0x688>
    e7a0:	mov	r0, r3
    e7a4:	bl	0 <strcmp>
    e7a8:	mov	r3, r0
    e7ac:	cmp	r3, #0
    e7b0:	beq	e7c4 <verify_monster+0xb28>
    e7b4:	ldr	r0, [pc, #-1172]	; e328 <verify_monster+0x68c>
    e7b8:	bl	0 <puts>
    e7bc:	mvn	r3, #0
    e7c0:	b	eb7c <verify_monster+0xee0>
    e7c4:	mov	r1, #1
    e7c8:	ldr	r0, [fp, #-60]	; 0xffffffc4
    e7cc:	bl	a84 <flatbuffers_string_vec_at>
    e7d0:	str	r0, [fp, #-64]	; 0xffffffc0
    e7d4:	ldr	r0, [fp, #-64]	; 0xffffffc0
    e7d8:	bl	9fc <flatbuffers_string_len>
    e7dc:	mov	r3, r0
    e7e0:	cmp	r3, #2
    e7e4:	beq	e7f8 <verify_monster+0xb5c>
    e7e8:	ldr	r0, [pc, #-1220]	; e32c <verify_monster+0x690>
    e7ec:	bl	0 <printf>
    e7f0:	mvn	r3, #0
    e7f4:	b	eb7c <verify_monster+0xee0>
    e7f8:	mov	r2, #2
    e7fc:	ldr	r1, [pc, #-1236]	; e330 <verify_monster+0x694>
    e800:	ldr	r0, [fp, #-64]	; 0xffffffc0
    e804:	bl	0 <memcmp>
    e808:	mov	r3, r0
    e80c:	cmp	r3, #0
    e810:	beq	e824 <verify_monster+0xb88>
    e814:	ldr	r0, [pc, #-1256]	; e334 <verify_monster+0x698>
    e818:	bl	0 <puts>
    e81c:	mvn	r3, #0
    e820:	b	eb7c <verify_monster+0xee0>
    e824:	mov	r1, #2
    e828:	ldr	r0, [fp, #-60]	; 0xffffffc4
    e82c:	bl	a84 <flatbuffers_string_vec_at>
    e830:	mov	r3, r0
    e834:	ldr	r1, [pc, #-1284]	; e338 <verify_monster+0x69c>
    e838:	mov	r0, r3
    e83c:	bl	0 <strcmp>
    e840:	mov	r3, r0
    e844:	cmp	r3, #0
    e848:	beq	e85c <verify_monster+0xbc0>
    e84c:	ldr	r0, [pc, #-1304]	; e33c <verify_monster+0x6a0>
    e850:	bl	0 <puts>
    e854:	mvn	r3, #0
    e858:	b	eb7c <verify_monster+0xee0>
    e85c:	ldr	r0, [fp, #-20]	; 0xffffffec
    e860:	bl	4964 <MyGame_Example_Monster_testarrayofbools_is_present>
    e864:	mov	r3, r0
    e868:	cmp	r3, #0
    e86c:	bne	e880 <verify_monster+0xbe4>
    e870:	ldr	r0, [pc, #-1336]	; e340 <verify_monster+0x6a4>
    e874:	bl	0 <puts>
    e878:	mvn	r3, #0
    e87c:	b	eb7c <verify_monster+0xee0>
    e880:	ldr	r0, [fp, #-20]	; 0xffffffec
    e884:	bl	4868 <MyGame_Example_Monster_testarrayofbools>
    e888:	str	r0, [fp, #-68]	; 0xffffffbc
    e88c:	ldr	r0, [fp, #-68]	; 0xffffffbc
    e890:	bl	d4c <flatbuffers_bool_vec_len>
    e894:	mov	r3, r0
    e898:	cmp	r3, #4
    e89c:	beq	e8b0 <verify_monster+0xc14>
    e8a0:	ldr	r0, [pc, #-1380]	; e344 <verify_monster+0x6a8>
    e8a4:	bl	0 <puts>
    e8a8:	mvn	r3, #0
    e8ac:	b	eb7c <verify_monster+0xee0>
    e8b0:	mov	r3, #0
    e8b4:	str	r3, [fp, #-16]
    e8b8:	b	e910 <verify_monster+0xc74>
    e8bc:	ldr	r1, [fp, #-16]
    e8c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
    e8c4:	bl	d74 <flatbuffers_bool_vec_at>
    e8c8:	mov	r3, r0
    e8cc:	mov	r2, r3
    e8d0:	ldr	r3, [fp, #-16]
    e8d4:	lsl	r3, r3, #2
    e8d8:	sub	r1, fp, #12
    e8dc:	add	r3, r1, r3
    e8e0:	ldr	r3, [r3, #-108]	; 0xffffff94
    e8e4:	cmp	r2, r3
    e8e8:	beq	e904 <verify_monster+0xc68>
    e8ec:	ldr	r3, [fp, #-16]
    e8f0:	mov	r1, r3
    e8f4:	ldr	r0, [pc, #-1460]	; e348 <verify_monster+0x6ac>
    e8f8:	bl	0 <printf>
    e8fc:	mvn	r3, #0
    e900:	b	eb7c <verify_monster+0xee0>
    e904:	ldr	r3, [fp, #-16]
    e908:	add	r3, r3, #1
    e90c:	str	r3, [fp, #-16]
    e910:	ldr	r3, [fp, #-16]
    e914:	cmp	r3, #3
    e918:	bls	e8bc <verify_monster+0xc20>
    e91c:	ldr	r0, [fp, #-20]	; 0xffffffec
    e920:	bl	4bfc <MyGame_Example_Monster_test_type>
    e924:	mov	r3, r0
    e928:	strb	r3, [fp, #-69]	; 0xffffffbb
    e92c:	ldrb	r3, [fp, #-69]	; 0xffffffbb
    e930:	cmp	r3, #1
    e934:	beq	e948 <verify_monster+0xcac>
    e938:	ldr	r0, [pc, #-1524]	; e34c <verify_monster+0x6b0>
    e93c:	bl	0 <puts>
    e940:	mvn	r3, #0
    e944:	b	eb7c <verify_monster+0xee0>
    e948:	ldr	r0, [fp, #-20]	; 0xffffffec
    e94c:	bl	4ce8 <MyGame_Example_Monster_test>
    e950:	str	r0, [fp, #-52]	; 0xffffffcc
    e954:	ldr	r0, [fp, #-52]	; 0xffffffcc
    e958:	bl	35e4 <MyGame_Example_Monster_name>
    e95c:	mov	r3, r0
    e960:	ldr	r1, [pc, #-1532]	; e36c <verify_monster+0x6d0>
    e964:	mov	r0, r3
    e968:	bl	0 <strcmp>
    e96c:	mov	r3, r0
    e970:	cmp	r3, #0
    e974:	beq	e988 <verify_monster+0xcec>
    e978:	ldr	r0, [pc, #-1584]	; e350 <verify_monster+0x6b4>
    e97c:	bl	0 <puts>
    e980:	mvn	r3, #0
    e984:	b	eb7c <verify_monster+0xee0>
    e988:	ldr	r0, [fp, #-20]	; 0xffffffec
    e98c:	bl	4a38 <MyGame_Example_Monster_enemy>
    e990:	str	r0, [fp, #-52]	; 0xffffffcc
    e994:	ldr	r0, [fp, #-52]	; 0xffffffcc
    e998:	bl	35e4 <MyGame_Example_Monster_name>
    e99c:	mov	r3, r0
    e9a0:	ldr	r1, [pc, #-1620]	; e354 <verify_monster+0x6b8>
    e9a4:	mov	r0, r3
    e9a8:	bl	0 <strcmp>
    e9ac:	mov	r3, r0
    e9b0:	cmp	r3, #0
    e9b4:	beq	e9c8 <verify_monster+0xd2c>
    e9b8:	ldr	r0, [pc, #-1640]	; e358 <verify_monster+0x6bc>
    e9bc:	bl	0 <puts>
    e9c0:	mvn	r3, #0
    e9c4:	b	eb7c <verify_monster+0xee0>
    e9c8:	ldr	r0, [fp, #-52]	; 0xffffffcc
    e9cc:	bl	4bfc <MyGame_Example_Monster_test_type>
    e9d0:	mov	r3, r0
    e9d4:	cmp	r3, #0
    e9d8:	beq	e9ec <verify_monster+0xd50>
    e9dc:	ldr	r0, [pc, #-1672]	; e35c <verify_monster+0x6c0>
    e9e0:	bl	0 <puts>
    e9e4:	mvn	r3, #0
    e9e8:	b	eb7c <verify_monster+0xee0>
    e9ec:	sub	r3, fp, #84	; 0x54
    e9f0:	ldr	r1, [fp, #-20]	; 0xffffffec
    e9f4:	mov	r0, r3
    e9f8:	bl	4de0 <MyGame_Example_Monster_test_union>
    e9fc:	ldrb	r3, [fp, #-84]	; 0xffffffac
    ea00:	ldrb	r2, [fp, #-69]	; 0xffffffbb
    ea04:	cmp	r2, r3
    ea08:	beq	ea1c <verify_monster+0xd80>
    ea0c:	ldr	r0, [pc, #-1716]	; e360 <verify_monster+0x6c4>
    ea10:	bl	0 <puts>
    ea14:	mvn	r3, #0
    ea18:	b	eb7c <verify_monster+0xee0>
    ea1c:	ldr	r4, [fp, #-80]	; 0xffffffb0
    ea20:	ldr	r0, [fp, #-20]	; 0xffffffec
    ea24:	bl	4ce8 <MyGame_Example_Monster_test>
    ea28:	mov	r3, r0
    ea2c:	cmp	r4, r3
    ea30:	beq	ea44 <verify_monster+0xda8>
    ea34:	ldr	r0, [pc, #-1752]	; e364 <verify_monster+0x6c8>
    ea38:	bl	0 <puts>
    ea3c:	mvn	r3, #0
    ea40:	b	eb7c <verify_monster+0xee0>
    ea44:	ldr	r0, [fp, #-52]	; 0xffffffcc
    ea48:	bl	4674 <MyGame_Example_Monster_testarrayoftables>
    ea4c:	str	r0, [fp, #-48]	; 0xffffffd0
    ea50:	ldr	r0, [fp, #-48]	; 0xffffffd0
    ea54:	bl	2c50 <MyGame_Example_Monster_vec_len>
    ea58:	str	r0, [fp, #-16]
    ea5c:	ldr	r3, [fp, #-16]
    ea60:	sub	r3, r3, #1
    ea64:	mov	r1, r3
    ea68:	ldr	r0, [fp, #-48]	; 0xffffffd0
    ea6c:	bl	2c94 <MyGame_Example_Monster_vec_at>
    ea70:	str	r0, [fp, #-52]	; 0xffffffcc
    ea74:	ldr	r0, [fp, #-52]	; 0xffffffcc
    ea78:	bl	4bfc <MyGame_Example_Monster_test_type>
    ea7c:	mov	r3, r0
    ea80:	cmp	r3, #1
    ea84:	beq	ea98 <verify_monster+0xdfc>
    ea88:	ldr	r0, [pc, #-1832]	; e368 <verify_monster+0x6cc>
    ea8c:	bl	0 <puts>
    ea90:	mvn	r3, #0
    ea94:	b	eb7c <verify_monster+0xee0>
    ea98:	ldr	r0, [fp, #-52]	; 0xffffffcc
    ea9c:	bl	4ce8 <MyGame_Example_Monster_test>
    eaa0:	str	r0, [fp, #-52]	; 0xffffffcc
    eaa4:	ldr	r0, [fp, #-52]	; 0xffffffcc
    eaa8:	bl	35e4 <MyGame_Example_Monster_name>
    eaac:	mov	r3, r0
    eab0:	ldr	r1, [pc, #-1868]	; e36c <verify_monster+0x6d0>
    eab4:	mov	r0, r3
    eab8:	bl	0 <strcmp>
    eabc:	mov	r3, r0
    eac0:	cmp	r3, #0
    eac4:	beq	ead8 <verify_monster+0xe3c>
    eac8:	ldr	r0, [pc, #-1888]	; e370 <verify_monster+0x6d4>
    eacc:	bl	0 <puts>
    ead0:	mvn	r3, #0
    ead4:	b	eb7c <verify_monster+0xee0>
    ead8:	ldr	r0, [fp, #-20]	; 0xffffffec
    eadc:	bl	529c <MyGame_Example_Monster_testbool>
    eae0:	mov	r3, r0
    eae4:	cmp	r3, #0
    eae8:	beq	eafc <verify_monster+0xe60>
    eaec:	ldr	r0, [pc, #-1920]	; e374 <verify_monster+0x6d8>
    eaf0:	bl	0 <puts>
    eaf4:	mvn	r3, #0
    eaf8:	b	eb7c <verify_monster+0xee0>
    eafc:	ldr	r0, [fp, #-20]	; 0xffffffec
    eb00:	bl	51c8 <MyGame_Example_Monster_testempty_is_present>
    eb04:	mov	r3, r0
    eb08:	cmp	r3, #0
    eb0c:	bne	eb20 <verify_monster+0xe84>
    eb10:	ldr	r0, [pc, #-1952]	; e378 <verify_monster+0x6dc>
    eb14:	bl	0 <puts>
    eb18:	mvn	r3, #0
    eb1c:	b	eb7c <verify_monster+0xee0>
    eb20:	ldr	r0, [fp, #-20]	; 0xffffffec
    eb24:	bl	50d0 <MyGame_Example_Monster_testempty>
    eb28:	str	r0, [fp, #-76]	; 0xffffffb4
    eb2c:	ldr	r0, [fp, #-76]	; 0xffffffb4
    eb30:	bl	2578 <MyGame_Example_Stat_id_is_present>
    eb34:	mov	r3, r0
    eb38:	cmp	r3, #0
    eb3c:	bne	eb68 <verify_monster+0xecc>
    eb40:	ldr	r0, [fp, #-76]	; 0xffffffb4
    eb44:	bl	2740 <MyGame_Example_Stat_val_is_present>
    eb48:	mov	r3, r0
    eb4c:	cmp	r3, #0
    eb50:	bne	eb68 <verify_monster+0xecc>
    eb54:	ldr	r0, [fp, #-76]	; 0xffffffb4
    eb58:	bl	2810 <MyGame_Example_Stat_count_is_present>
    eb5c:	mov	r3, r0
    eb60:	cmp	r3, #0
    eb64:	beq	eb78 <verify_monster+0xedc>
    eb68:	ldr	r0, [pc, #-2036]	; e37c <verify_monster+0x6e0>
    eb6c:	bl	0 <puts>
    eb70:	mvn	r3, #0
    eb74:	b	eb7c <verify_monster+0xee0>
    eb78:	mov	r3, #0
    eb7c:	mov	r0, r3
    eb80:	sub	sp, fp, #8
    eb84:	pop	{r4, fp, pc}

0000eb88 <gen_monster>:
    eb88:	push	{fp, lr}
    eb8c:	add	fp, sp, #4
    eb90:	sub	sp, sp, #96	; 0x60
    eb94:	str	r0, [fp, #-96]	; 0xffffffa0
    eb98:	str	r1, [fp, #-100]	; 0xffffff9c
    eb9c:	ldr	r2, [pc, #1392]	; f114 <gen_monster+0x58c>
    eba0:	sub	r3, fp, #64	; 0x40
    eba4:	ldm	r2, {r0, r1, r2}
    eba8:	stmia	r3!, {r0, r1}
    ebac:	strh	r2, [r3]
    ebb0:	ldr	r3, [pc, #1376]	; f118 <gen_monster+0x590>
    ebb4:	ldr	r3, [r3]
    ebb8:	str	r3, [fp, #-92]	; 0xffffffa4
    ebbc:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ebc0:	bl	0 <flatcc_builder_reset>
    ebc4:	ldr	r3, [fp, #-100]	; 0xffffff9c
    ebc8:	cmp	r3, #0
    ebcc:	beq	ebdc <gen_monster+0x54>
    ebd0:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ebd4:	bl	a2f8 <MyGame_Example_Monster_start_as_root_with_size>
    ebd8:	b	ebe4 <gen_monster+0x5c>
    ebdc:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ebe0:	bl	a2ac <MyGame_Example_Monster_start_as_root>
    ebe4:	mov	r1, #80	; 0x50
    ebe8:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ebec:	bl	8d30 <MyGame_Example_Monster_hp_add>
    ebf0:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ebf4:	bl	8c84 <MyGame_Example_Monster_pos_start>
    ebf8:	str	r0, [fp, #-8]
    ebfc:	ldr	r3, [fp, #-8]
    ec00:	mov	r2, #1065353216	; 0x3f800000
    ec04:	str	r2, [r3]
    ec08:	ldr	r3, [fp, #-8]
    ec0c:	mov	r2, #1073741824	; 0x40000000
    ec10:	str	r2, [r3, #4]
    ec14:	ldr	r3, [fp, #-8]
    ec18:	ldr	r2, [pc, #1276]	; f11c <gen_monster+0x594>
    ec1c:	str	r2, [r3, #8]
    ec20:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ec24:	bl	8cb8 <MyGame_Example_Monster_pos_end>
    ec28:	ldr	r1, [pc, #1264]	; f120 <gen_monster+0x598>
    ec2c:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ec30:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
    ec34:	mov	r1, #2
    ec38:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ec3c:	bl	9210 <MyGame_Example_Monster_color_add>
    ec40:	sub	r3, fp, #64	; 0x40
    ec44:	mov	r2, #10
    ec48:	mov	r1, r3
    ec4c:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ec50:	bl	934c <MyGame_Example_Monster_inventory_create>
    ec54:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ec58:	bl	9cf4 <MyGame_Example_Monster_test4_start>
    ec5c:	mov	r1, #1
    ec60:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ec64:	bl	9de4 <MyGame_Example_Monster_test4_extend>
    ec68:	str	r0, [fp, #-12]
    ec6c:	ldr	r3, [fp, #-12]
    ec70:	mov	r2, #16
    ec74:	strh	r2, [r3]
    ec78:	ldr	r3, [fp, #-12]
    ec7c:	mov	r2, #32
    ec80:	strb	r2, [r3, #2]
    ec84:	mov	r1, #2
    ec88:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ec8c:	bl	9de4 <MyGame_Example_Monster_test4_extend>
    ec90:	str	r0, [fp, #-12]
    ec94:	ldr	r3, [fp, #-12]
    ec98:	mov	r2, #48	; 0x30
    ec9c:	strh	r2, [r3]
    eca0:	ldr	r3, [fp, #-12]
    eca4:	mov	r2, #64	; 0x40
    eca8:	strb	r2, [r3, #2]
    ecac:	ldr	r3, [fp, #-12]
    ecb0:	add	r3, r3, #4
    ecb4:	mov	r2, #80	; 0x50
    ecb8:	strh	r2, [r3]
    ecbc:	ldr	r3, [fp, #-12]
    ecc0:	add	r3, r3, #4
    ecc4:	mov	r2, #96	; 0x60
    ecc8:	strb	r2, [r3, #2]
    eccc:	mvn	r2, #127	; 0x7f
    ecd0:	mov	r1, #112	; 0x70
    ecd4:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ecd8:	bl	9ef4 <MyGame_Example_Monster_test4_push_create>
    ecdc:	mov	r3, #400	; 0x190
    ece0:	strh	r3, [fp, #-68]	; 0xffffffbc
    ece4:	mvn	r3, #110	; 0x6e
    ece8:	strb	r3, [fp, #-66]	; 0xffffffbe
    ecec:	sub	r3, fp, #68	; 0x44
    ecf0:	mov	r1, r3
    ecf4:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ecf8:	bl	9e94 <MyGame_Example_Monster_test4_push>
    ecfc:	sub	r3, fp, #68	; 0x44
    ed00:	mov	r1, r3
    ed04:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ed08:	bl	9e94 <MyGame_Example_Monster_test4_push>
    ed0c:	sub	r3, fp, #68	; 0x44
    ed10:	mov	r1, r3
    ed14:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ed18:	bl	775c <MyGame_Example_Test_vec_push>
    ed1c:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ed20:	bl	9e6c <MyGame_Example_Monster_test4_reserved_len>
    ed24:	mov	r3, r0
    ed28:	cmp	r3, #7
    ed2c:	beq	ed44 <gen_monster+0x1bc>
    ed30:	ldr	r3, [pc, #1004]	; f124 <gen_monster+0x59c>
    ed34:	ldr	r2, [pc, #1004]	; f128 <gen_monster+0x5a0>
    ed38:	ldr	r1, [pc, #1004]	; f12c <gen_monster+0x5a4>
    ed3c:	ldr	r0, [pc, #1004]	; f130 <gen_monster+0x5a8>
    ed40:	bl	0 <__assert_fail>
    ed44:	mov	r1, #2
    ed48:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ed4c:	bl	9e14 <MyGame_Example_Monster_test4_truncate>
    ed50:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ed54:	bl	9e6c <MyGame_Example_Monster_test4_reserved_len>
    ed58:	mov	r3, r0
    ed5c:	cmp	r3, #5
    ed60:	beq	ed78 <gen_monster+0x1f0>
    ed64:	ldr	r3, [pc, #952]	; f124 <gen_monster+0x59c>
    ed68:	ldr	r2, [pc, #964]	; f134 <gen_monster+0x5ac>
    ed6c:	ldr	r1, [pc, #952]	; f12c <gen_monster+0x5a4>
    ed70:	ldr	r0, [pc, #960]	; f138 <gen_monster+0x5b0>
    ed74:	bl	0 <__assert_fail>
    ed78:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ed7c:	bl	9e44 <MyGame_Example_Monster_test4_edit>
    ed80:	str	r0, [fp, #-12]
    ed84:	ldr	r3, [fp, #-12]
    ed88:	add	r3, r3, #16
    ed8c:	ldr	r2, [fp, #-12]
    ed90:	add	r2, r2, #16
    ed94:	ldrsh	r2, [r2]
    ed98:	uxth	r2, r2
    ed9c:	add	r2, r2, #1
    eda0:	uxth	r2, r2
    eda4:	sxth	r2, r2
    eda8:	strh	r2, [r3]
    edac:	ldr	r0, [fp, #-96]	; 0xffffffa0
    edb0:	bl	9d1c <MyGame_Example_Monster_test4_end>
    edb4:	ldr	r0, [fp, #-96]	; 0xffffffa0
    edb8:	bl	802c <MyGame_Example_Monster_start>
    edbc:	mov	r2, #7
    edc0:	ldr	r1, [pc, #884]	; f13c <gen_monster+0x5b4>
    edc4:	ldr	r0, [fp, #-96]	; 0xffffffa0
    edc8:	bl	72c0 <flatbuffers_string_create>
    edcc:	str	r0, [fp, #-16]
    edd0:	ldr	r1, [fp, #-16]
    edd4:	ldr	r0, [fp, #-96]	; 0xffffffa0
    edd8:	bl	8ee8 <MyGame_Example_Monster_name_add>
    eddc:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ede0:	bl	8058 <MyGame_Example_Monster_end>
    ede4:	str	r0, [fp, #-20]	; 0xffffffec
    ede8:	ldr	r0, [fp, #-96]	; 0xffffffa0
    edec:	bl	93f4 <MyGame_Example_Monster_testarrayoftables_start>
    edf0:	mov	r1, #2
    edf4:	ldr	r0, [fp, #-96]	; 0xffffffa0
    edf8:	bl	9454 <MyGame_Example_Monster_testarrayoftables_extend>
    edfc:	str	r0, [fp, #-24]	; 0xffffffe8
    ee00:	ldr	r3, [fp, #-24]	; 0xffffffe8
    ee04:	ldr	r2, [fp, #-20]	; 0xffffffec
    ee08:	str	r2, [r3]
    ee0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    ee10:	add	r3, r3, #4
    ee14:	ldr	r2, [fp, #-20]	; 0xffffffec
    ee18:	str	r2, [r3]
    ee1c:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ee20:	bl	9580 <MyGame_Example_Monster_testarrayoftables_push_start>
    ee24:	mov	r2, #30
    ee28:	ldr	r1, [pc, #784]	; f140 <gen_monster+0x5b8>
    ee2c:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ee30:	bl	8fe8 <MyGame_Example_Monster_name_create_strn>
    ee34:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ee38:	bl	95a8 <MyGame_Example_Monster_testarrayoftables_push_end>
    ee3c:	mov	r3, r0
    ee40:	ldr	r3, [r3]
    ee44:	str	r3, [fp, #-28]	; 0xffffffe4
    ee48:	mov	r1, #3
    ee4c:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ee50:	bl	9454 <MyGame_Example_Monster_testarrayoftables_extend>
    ee54:	str	r0, [fp, #-24]	; 0xffffffe8
    ee58:	ldr	r3, [fp, #-24]	; 0xffffffe8
    ee5c:	ldr	r2, [fp, #-20]	; 0xffffffec
    ee60:	str	r2, [r3]
    ee64:	ldr	r3, [fp, #-24]	; 0xffffffe8
    ee68:	add	r3, r3, #4
    ee6c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    ee70:	str	r2, [r3]
    ee74:	mov	r1, #1
    ee78:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ee7c:	bl	94bc <MyGame_Example_Monster_testarrayoftables_truncate>
    ee80:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ee84:	bl	9514 <MyGame_Example_Monster_testarrayoftables_reserved_len>
    ee88:	mov	r3, r0
    ee8c:	cmp	r3, #5
    ee90:	beq	eea8 <gen_monster+0x320>
    ee94:	ldr	r3, [pc, #648]	; f124 <gen_monster+0x59c>
    ee98:	ldr	r2, [pc, #676]	; f144 <gen_monster+0x5bc>
    ee9c:	ldr	r1, [pc, #648]	; f12c <gen_monster+0x5a4>
    eea0:	ldr	r0, [pc, #672]	; f148 <gen_monster+0x5c0>
    eea4:	bl	0 <__assert_fail>
    eea8:	ldr	r0, [fp, #-96]	; 0xffffffa0
    eeac:	bl	9580 <MyGame_Example_Monster_testarrayoftables_push_start>
    eeb0:	mov	r2, #8
    eeb4:	ldr	r1, [pc, #656]	; f14c <gen_monster+0x5c4>
    eeb8:	ldr	r0, [fp, #-96]	; 0xffffffa0
    eebc:	bl	8fe8 <MyGame_Example_Monster_name_create_strn>
    eec0:	ldr	r0, [fp, #-96]	; 0xffffffa0
    eec4:	bl	95a8 <MyGame_Example_Monster_testarrayoftables_push_end>
    eec8:	mov	r3, r0
    eecc:	ldr	r3, [r3]
    eed0:	str	r3, [fp, #-76]	; 0xffffffb4
    eed4:	ldr	r0, [fp, #-96]	; 0xffffffa0
    eed8:	bl	9514 <MyGame_Example_Monster_testarrayoftables_reserved_len>
    eedc:	mov	r3, r0
    eee0:	cmp	r3, #6
    eee4:	beq	eefc <gen_monster+0x374>
    eee8:	ldr	r3, [pc, #564]	; f124 <gen_monster+0x59c>
    eeec:	ldr	r2, [pc, #604]	; f150 <gen_monster+0x5c8>
    eef0:	ldr	r1, [pc, #564]	; f12c <gen_monster+0x5a4>
    eef4:	ldr	r0, [pc, #600]	; f154 <gen_monster+0x5cc>
    eef8:	bl	0 <__assert_fail>
    eefc:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ef00:	bl	94ec <MyGame_Example_Monster_testarrayoftables_edit>
    ef04:	str	r0, [fp, #-24]	; 0xffffffe8
    ef08:	ldr	r3, [fp, #-24]	; 0xffffffe8
    ef0c:	ldr	r3, [r3, #20]
    ef10:	str	r3, [fp, #-28]	; 0xffffffe4
    ef14:	ldr	r3, [fp, #-24]	; 0xffffffe8
    ef18:	ldr	r3, [r3, #8]
    ef1c:	str	r3, [fp, #-72]	; 0xffffffb8
    ef20:	ldr	r3, [fp, #-24]	; 0xffffffe8
    ef24:	add	r3, r3, #20
    ef28:	ldr	r2, [fp, #-20]	; 0xffffffec
    ef2c:	str	r2, [r3]
    ef30:	ldr	r3, [fp, #-24]	; 0xffffffe8
    ef34:	ldr	r2, [fp, #-28]	; 0xffffffe4
    ef38:	str	r2, [r3]
    ef3c:	sub	r3, fp, #76	; 0x4c
    ef40:	mov	r2, #2
    ef44:	mov	r1, r3
    ef48:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ef4c:	bl	9484 <MyGame_Example_Monster_testarrayoftables_append>
    ef50:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ef54:	bl	941c <MyGame_Example_Monster_testarrayoftables_end>
    ef58:	ldr	r1, [pc, #504]	; f158 <gen_monster+0x5d0>
    ef5c:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ef60:	bl	72f8 <flatbuffers_string_create_str>
    ef64:	mov	r3, r0
    ef68:	str	r3, [fp, #-88]	; 0xffffffa8
    ef6c:	mov	r2, #2
    ef70:	ldr	r1, [pc, #484]	; f15c <gen_monster+0x5d4>
    ef74:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ef78:	bl	72c0 <flatbuffers_string_create>
    ef7c:	mov	r3, r0
    ef80:	str	r3, [fp, #-84]	; 0xffffffac
    ef84:	ldr	r1, [pc, #468]	; f160 <gen_monster+0x5d8>
    ef88:	ldr	r0, [fp, #-96]	; 0xffffffa0
    ef8c:	bl	72f8 <flatbuffers_string_create_str>
    ef90:	mov	r3, r0
    ef94:	str	r3, [fp, #-80]	; 0xffffffb0
    ef98:	sub	r3, fp, #88	; 0x58
    ef9c:	mov	r2, #3
    efa0:	mov	r1, r3
    efa4:	ldr	r0, [fp, #-96]	; 0xffffffa0
    efa8:	bl	96a0 <MyGame_Example_Monster_testarrayofstring_create>
    efac:	ldr	r0, [fp, #-96]	; 0xffffffa0
    efb0:	bl	97d8 <MyGame_Example_Monster_testarrayofbools_start>
    efb4:	sub	r3, fp, #92	; 0x5c
    efb8:	mov	r2, #1
    efbc:	mov	r1, r3
    efc0:	ldr	r0, [fp, #-96]	; 0xffffffa0
    efc4:	bl	9910 <MyGame_Example_Monster_testarrayofbools_append>
    efc8:	sub	r3, fp, #92	; 0x5c
    efcc:	add	r3, r3, #1
    efd0:	mov	r2, #3
    efd4:	mov	r1, r3
    efd8:	ldr	r0, [fp, #-96]	; 0xffffffa0
    efdc:	bl	9910 <MyGame_Example_Monster_testarrayofbools_append>
    efe0:	ldr	r0, [fp, #-96]	; 0xffffffa0
    efe4:	bl	9800 <MyGame_Example_Monster_testarrayofbools_end>
    efe8:	sub	r3, fp, #52	; 0x34
    efec:	ldr	r1, [fp, #-20]	; 0xffffffec
    eff0:	mov	r0, r3
    eff4:	bl	82c0 <MyGame_Example_Any_as_Monster>
    eff8:	sub	r3, fp, #52	; 0x34
    effc:	ldm	r3, {r1, r2}
    f000:	ldr	r0, [fp, #-96]	; 0xffffffa0
    f004:	bl	9a08 <MyGame_Example_Monster_test_add>
    f008:	ldr	r0, [fp, #-96]	; 0xffffffa0
    f00c:	bl	99a8 <MyGame_Example_Monster_enemy_start>
    f010:	ldr	r1, [pc, #332]	; f164 <gen_monster+0x5dc>
    f014:	ldr	r0, [fp, #-96]	; 0xffffffa0
    f018:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
    f01c:	ldr	r0, [fp, #-96]	; 0xffffffa0
    f020:	bl	93f4 <MyGame_Example_Monster_testarrayoftables_start>
    f024:	ldr	r0, [fp, #-96]	; 0xffffffa0
    f028:	bl	a24c <MyGame_Example_Monster_vec_push_start>
    f02c:	sub	r3, fp, #44	; 0x2c
    f030:	ldr	r1, [fp, #-20]	; 0xffffffec
    f034:	mov	r0, r3
    f038:	bl	82c0 <MyGame_Example_Any_as_Monster>
    f03c:	sub	r3, fp, #44	; 0x2c
    f040:	ldm	r3, {r1, r2}
    f044:	ldr	r0, [fp, #-96]	; 0xffffffa0
    f048:	bl	9a08 <MyGame_Example_Monster_test_add>
    f04c:	ldr	r1, [pc, #276]	; f168 <gen_monster+0x5e0>
    f050:	ldr	r0, [fp, #-96]	; 0xffffffa0
    f054:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
    f058:	ldr	r0, [fp, #-96]	; 0xffffffa0
    f05c:	bl	95a8 <MyGame_Example_Monster_testarrayoftables_push_end>
    f060:	ldr	r0, [fp, #-96]	; 0xffffffa0
    f064:	bl	9580 <MyGame_Example_Monster_testarrayoftables_push_start>
    f068:	ldr	r1, [fp, #-20]	; 0xffffffec
    f06c:	ldr	r0, [fp, #-96]	; 0xffffffa0
    f070:	bl	9b98 <MyGame_Example_Monster_test_Monster_add>
    f074:	ldr	r1, [pc, #236]	; f168 <gen_monster+0x5e0>
    f078:	ldr	r0, [fp, #-96]	; 0xffffffa0
    f07c:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
    f080:	ldr	r0, [fp, #-96]	; 0xffffffa0
    f084:	bl	a274 <MyGame_Example_Monster_vec_push_end>
    f088:	ldr	r0, [fp, #-96]	; 0xffffffa0
    f08c:	bl	9580 <MyGame_Example_Monster_testarrayoftables_push_start>
    f090:	sub	r3, fp, #36	; 0x24
    f094:	ldr	r1, [fp, #-20]	; 0xffffffec
    f098:	mov	r0, r3
    f09c:	bl	82c0 <MyGame_Example_Any_as_Monster>
    f0a0:	sub	r3, fp, #36	; 0x24
    f0a4:	ldm	r3, {r1, r2}
    f0a8:	ldr	r0, [fp, #-96]	; 0xffffffa0
    f0ac:	bl	9b2c <MyGame_Example_Monster_test_add_value>
    f0b0:	ldr	r1, [pc, #176]	; f168 <gen_monster+0x5e0>
    f0b4:	ldr	r0, [fp, #-96]	; 0xffffffa0
    f0b8:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
    f0bc:	mov	r1, #1
    f0c0:	ldr	r0, [fp, #-96]	; 0xffffffa0
    f0c4:	bl	9ab8 <MyGame_Example_Monster_test_add_type>
    f0c8:	ldr	r0, [fp, #-96]	; 0xffffffa0
    f0cc:	bl	95a8 <MyGame_Example_Monster_testarrayoftables_push_end>
    f0d0:	ldr	r0, [fp, #-96]	; 0xffffffa0
    f0d4:	bl	941c <MyGame_Example_Monster_testarrayoftables_end>
    f0d8:	ldr	r0, [fp, #-96]	; 0xffffffa0
    f0dc:	bl	99d0 <MyGame_Example_Monster_enemy_end>
    f0e0:	mov	r1, #0
    f0e4:	ldr	r0, [fp, #-96]	; 0xffffffa0
    f0e8:	bl	a1d4 <MyGame_Example_Monster_testbool_add>
    f0ec:	ldr	r0, [fp, #-96]	; 0xffffffa0
    f0f0:	bl	a124 <MyGame_Example_Monster_testempty_start>
    f0f4:	ldr	r0, [fp, #-96]	; 0xffffffa0
    f0f8:	bl	a14c <MyGame_Example_Monster_testempty_end>
    f0fc:	ldr	r0, [fp, #-96]	; 0xffffffa0
    f100:	bl	a344 <MyGame_Example_Monster_end_as_root>
    f104:	mov	r3, #0
    f108:	mov	r0, r3
    f10c:	sub	sp, fp, #4
    f110:	pop	{fp, pc}
    f114:	.word	0x000019b0
    f118:	.word	0x000019bc
    f11c:	.word	0xc04ccccd
    f120:	.word	0x00000b1c
    f124:	.word	0x000038b4
    f128:	.word	0x00000371
    f12c:	.word	0x00001418
    f130:	.word	0x000018d0
    f134:	.word	0x00000373
    f138:	.word	0x000018f8
    f13c:	.word	0x00001478
    f140:	.word	0x000014f4
    f144:	.word	0x0000039b
    f148:	.word	0x00001920
    f14c:	.word	0x00001954
    f150:	.word	0x000003a1
    f154:	.word	0x00001970
    f158:	.word	0x00001618
    f15c:	.word	0x00001654
    f160:	.word	0x00001678
    f164:	.word	0x00001740
    f168:	.word	0x000019a4

0000f16c <test_monster>:
    f16c:	push	{fp, lr}
    f170:	add	fp, sp, #4
    f174:	sub	sp, sp, #24
    f178:	str	r0, [fp, #-24]	; 0xffffffe8
    f17c:	mov	r1, #0
    f180:	ldr	r0, [fp, #-24]	; 0xffffffe8
    f184:	bl	eb88 <gen_monster>
    f188:	sub	r3, fp, #16
    f18c:	mov	r1, r3
    f190:	ldr	r0, [fp, #-24]	; 0xffffffe8
    f194:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    f198:	str	r0, [fp, #-8]
    f19c:	ldr	r2, [fp, #-16]
    f1a0:	ldr	r3, [pc, #112]	; f218 <test_monster+0xac>
    f1a4:	ldr	r3, [r3]
    f1a8:	ldr	r1, [fp, #-8]
    f1ac:	ldr	r0, [pc, #104]	; f21c <test_monster+0xb0>
    f1b0:	bl	cb40 <hexdump>
    f1b4:	ldr	r3, [fp, #-16]
    f1b8:	mov	r1, r3
    f1bc:	ldr	r0, [fp, #-8]
    f1c0:	bl	c624 <MyGame_Example_Monster_verify_as_root>
    f1c4:	str	r0, [fp, #-12]
    f1c8:	ldr	r3, [fp, #-12]
    f1cc:	cmp	r3, #0
    f1d0:	beq	f1f4 <test_monster+0x88>
    f1d4:	ldr	r0, [fp, #-12]
    f1d8:	bl	0 <flatcc_verify_error_string>
    f1dc:	mov	r3, r0
    f1e0:	mov	r1, r3
    f1e4:	ldr	r0, [pc, #52]	; f220 <test_monster+0xb4>
    f1e8:	bl	0 <printf>
    f1ec:	mvn	r3, #0
    f1f0:	b	f20c <test_monster+0xa0>
    f1f4:	ldr	r0, [fp, #-8]
    f1f8:	bl	dc9c <verify_monster>
    f1fc:	str	r0, [fp, #-12]
    f200:	ldr	r0, [fp, #-8]
    f204:	bl	0 <flatcc_builder_aligned_free>
    f208:	ldr	r3, [fp, #-12]
    f20c:	mov	r0, r3
    f210:	sub	sp, fp, #4
    f214:	pop	{fp, pc}
    f218:	.word	0x00000000
    f21c:	.word	0x000019c0
    f220:	.word	0x000019d0

0000f224 <test_monster_with_size>:
    f224:	push	{fp, lr}
    f228:	add	fp, sp, #4
    f22c:	sub	sp, sp, #32
    f230:	str	r0, [fp, #-32]	; 0xffffffe0
    f234:	mov	r1, #1
    f238:	ldr	r0, [fp, #-32]	; 0xffffffe0
    f23c:	bl	eb88 <gen_monster>
    f240:	sub	r3, fp, #24
    f244:	mov	r1, r3
    f248:	ldr	r0, [fp, #-32]	; 0xffffffe0
    f24c:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    f250:	str	r0, [fp, #-8]
    f254:	ldr	r2, [fp, #-24]	; 0xffffffe8
    f258:	ldr	r3, [pc, #240]	; f350 <test_monster_with_size+0x12c>
    f25c:	ldr	r3, [r3]
    f260:	ldr	r1, [fp, #-8]
    f264:	ldr	r0, [pc, #232]	; f354 <test_monster_with_size+0x130>
    f268:	bl	cb40 <hexdump>
    f26c:	ldr	r3, [fp, #-8]
    f270:	and	r3, r3, #15
    f274:	cmp	r3, #0
    f278:	beq	f29c <test_monster_with_size+0x78>
    f27c:	ldr	r0, [pc, #212]	; f358 <test_monster_with_size+0x134>
    f280:	bl	0 <printf>
    f284:	ldr	r3, [fp, #-8]
    f288:	mov	r1, r3
    f28c:	ldr	r0, [pc, #200]	; f35c <test_monster_with_size+0x138>
    f290:	bl	0 <printf>
    f294:	mvn	r3, #0
    f298:	b	f344 <test_monster_with_size+0x120>
    f29c:	sub	r3, fp, #28
    f2a0:	mov	r1, r3
    f2a4:	ldr	r0, [fp, #-8]
    f2a8:	bl	1b24 <flatbuffers_read_size_prefix>
    f2ac:	str	r0, [fp, #-12]
    f2b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    f2b4:	sub	r3, r3, #4
    f2b8:	str	r3, [fp, #-16]
    f2bc:	ldr	r2, [fp, #-28]	; 0xffffffe4
    f2c0:	ldr	r3, [fp, #-16]
    f2c4:	cmp	r2, r3
    f2c8:	beq	f2ec <test_monster_with_size+0xc8>
    f2cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    f2d0:	mov	r1, r3
    f2d4:	ldr	r3, [fp, #-16]
    f2d8:	mov	r2, r3
    f2dc:	ldr	r0, [pc, #124]	; f360 <test_monster_with_size+0x13c>
    f2e0:	bl	0 <printf>
    f2e4:	mvn	r3, #0
    f2e8:	b	f344 <test_monster_with_size+0x120>
    f2ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
    f2f0:	mov	r1, r3
    f2f4:	ldr	r0, [fp, #-12]
    f2f8:	bl	c624 <MyGame_Example_Monster_verify_as_root>
    f2fc:	str	r0, [fp, #-20]	; 0xffffffec
    f300:	ldr	r3, [fp, #-20]	; 0xffffffec
    f304:	cmp	r3, #0
    f308:	beq	f32c <test_monster_with_size+0x108>
    f30c:	ldr	r0, [fp, #-20]	; 0xffffffec
    f310:	bl	0 <flatcc_verify_error_string>
    f314:	mov	r3, r0
    f318:	mov	r1, r3
    f31c:	ldr	r0, [pc, #64]	; f364 <test_monster_with_size+0x140>
    f320:	bl	0 <printf>
    f324:	mvn	r3, #0
    f328:	b	f344 <test_monster_with_size+0x120>
    f32c:	ldr	r0, [fp, #-12]
    f330:	bl	dc9c <verify_monster>
    f334:	str	r0, [fp, #-20]	; 0xffffffec
    f338:	ldr	r0, [fp, #-8]
    f33c:	bl	0 <flatcc_builder_aligned_free>
    f340:	ldr	r3, [fp, #-20]	; 0xffffffec
    f344:	mov	r0, r3
    f348:	sub	sp, fp, #4
    f34c:	pop	{fp, pc}
    f350:	.word	0x00000000
    f354:	.word	0x000019fc
    f358:	.word	0x00001a14
    f35c:	.word	0x00001a68
    f360:	.word	0x00001a7c
    f364:	.word	0x00001ab4

0000f368 <test_string>:
    f368:	push	{fp, lr}
    f36c:	add	fp, sp, #4
    f370:	sub	sp, sp, #24
    f374:	str	r0, [fp, #-24]	; 0xffffffe8
    f378:	ldr	r0, [fp, #-24]	; 0xffffffe8
    f37c:	bl	0 <flatcc_builder_reset>
    f380:	ldr	r0, [fp, #-24]	; 0xffffffe8
    f384:	bl	a2ac <MyGame_Example_Monster_start_as_root>
    f388:	ldr	r0, [fp, #-24]	; 0xffffffe8
    f38c:	bl	8f48 <MyGame_Example_Monster_name_start>
    f390:	mov	r1, #3
    f394:	ldr	r0, [fp, #-24]	; 0xffffffe8
    f398:	bl	9188 <MyGame_Example_Monster_name_extend>
    f39c:	str	r0, [fp, #-8]
    f3a0:	ldr	r3, [fp, #-8]
    f3a4:	mov	r2, #49	; 0x31
    f3a8:	strb	r2, [r3]
    f3ac:	ldr	r3, [fp, #-8]
    f3b0:	add	r3, r3, #1
    f3b4:	mov	r2, #50	; 0x32
    f3b8:	strb	r2, [r3]
    f3bc:	ldr	r3, [fp, #-8]
    f3c0:	add	r3, r3, #2
    f3c4:	mov	r2, #51	; 0x33
    f3c8:	strb	r2, [r3]
    f3cc:	ldr	r1, [pc, #380]	; f550 <test_string+0x1e8>
    f3d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    f3d4:	bl	90f8 <MyGame_Example_Monster_name_append_str>
    f3d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    f3dc:	bl	9160 <MyGame_Example_Monster_name_reserved_len>
    f3e0:	mov	r3, r0
    f3e4:	cmp	r3, #4
    f3e8:	beq	f400 <test_string+0x98>
    f3ec:	ldr	r3, [pc, #352]	; f554 <test_string+0x1ec>
    f3f0:	ldr	r2, [pc, #352]	; f558 <test_string+0x1f0>
    f3f4:	ldr	r1, [pc, #352]	; f55c <test_string+0x1f4>
    f3f8:	ldr	r0, [pc, #352]	; f560 <test_string+0x1f8>
    f3fc:	bl	0 <__assert_fail>
    f400:	mov	r2, #30
    f404:	ldr	r1, [pc, #344]	; f564 <test_string+0x1fc>
    f408:	ldr	r0, [fp, #-24]	; 0xffffffe8
    f40c:	bl	9128 <MyGame_Example_Monster_name_append_strn>
    f410:	ldr	r0, [fp, #-24]	; 0xffffffe8
    f414:	bl	9160 <MyGame_Example_Monster_name_reserved_len>
    f418:	mov	r3, r0
    f41c:	cmp	r3, #8
    f420:	beq	f438 <test_string+0xd0>
    f424:	ldr	r3, [pc, #296]	; f554 <test_string+0x1ec>
    f428:	ldr	r2, [pc, #312]	; f568 <test_string+0x200>
    f42c:	ldr	r1, [pc, #296]	; f55c <test_string+0x1f4>
    f430:	ldr	r0, [pc, #308]	; f56c <test_string+0x204>
    f434:	bl	0 <__assert_fail>
    f438:	mov	r2, #2
    f43c:	ldr	r1, [pc, #300]	; f570 <test_string+0x208>
    f440:	ldr	r0, [fp, #-24]	; 0xffffffe8
    f444:	bl	90c0 <MyGame_Example_Monster_name_append>
    f448:	ldr	r0, [fp, #-24]	; 0xffffffe8
    f44c:	bl	9160 <MyGame_Example_Monster_name_reserved_len>
    f450:	mov	r3, r0
    f454:	cmp	r3, #10
    f458:	beq	f470 <test_string+0x108>
    f45c:	ldr	r3, [pc, #240]	; f554 <test_string+0x1ec>
    f460:	ldr	r2, [pc, #268]	; f574 <test_string+0x20c>
    f464:	ldr	r1, [pc, #240]	; f55c <test_string+0x1f4>
    f468:	ldr	r0, [pc, #264]	; f578 <test_string+0x210>
    f46c:	bl	0 <__assert_fail>
    f470:	mov	r1, #3
    f474:	ldr	r0, [fp, #-24]	; 0xffffffe8
    f478:	bl	91e0 <MyGame_Example_Monster_name_truncate>
    f47c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    f480:	bl	9160 <MyGame_Example_Monster_name_reserved_len>
    f484:	mov	r3, r0
    f488:	cmp	r3, #7
    f48c:	beq	f4a4 <test_string+0x13c>
    f490:	ldr	r3, [pc, #188]	; f554 <test_string+0x1ec>
    f494:	ldr	r2, [pc, #224]	; f57c <test_string+0x214>
    f498:	ldr	r1, [pc, #188]	; f55c <test_string+0x1f4>
    f49c:	ldr	r0, [pc, #220]	; f580 <test_string+0x218>
    f4a0:	bl	0 <__assert_fail>
    f4a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    f4a8:	bl	91b8 <MyGame_Example_Monster_name_edit>
    f4ac:	str	r0, [fp, #-8]
    f4b0:	ldr	r3, [fp, #-8]
    f4b4:	add	r3, r3, #4
    f4b8:	mov	r2, #46	; 0x2e
    f4bc:	strb	r2, [r3]
    f4c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    f4c4:	bl	8f70 <MyGame_Example_Monster_name_end>
    f4c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    f4cc:	bl	a344 <MyGame_Example_Monster_end_as_root>
    f4d0:	mov	r1, #0
    f4d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    f4d8:	bl	0 <flatcc_builder_get_direct_buffer>
    f4dc:	str	r0, [fp, #-12]
    f4e0:	ldr	r3, [fp, #-12]
    f4e4:	cmp	r3, #0
    f4e8:	bne	f500 <test_string+0x198>
    f4ec:	ldr	r3, [pc, #96]	; f554 <test_string+0x1ec>
    f4f0:	ldr	r2, [pc, #140]	; f584 <test_string+0x21c>
    f4f4:	ldr	r1, [pc, #96]	; f55c <test_string+0x1f4>
    f4f8:	ldr	r0, [pc, #136]	; f588 <test_string+0x220>
    f4fc:	bl	0 <__assert_fail>
    f500:	ldr	r0, [fp, #-12]
    f504:	bl	2d78 <MyGame_Example_Monster_as_root>
    f508:	str	r0, [fp, #-16]
    f50c:	ldr	r0, [fp, #-16]
    f510:	bl	35e4 <MyGame_Example_Monster_name>
    f514:	mov	r3, r0
    f518:	ldr	r1, [pc, #108]	; f58c <test_string+0x224>
    f51c:	mov	r0, r3
    f520:	bl	0 <strcmp>
    f524:	mov	r3, r0
    f528:	cmp	r3, #0
    f52c:	beq	f540 <test_string+0x1d8>
    f530:	ldr	r0, [pc, #88]	; f590 <test_string+0x228>
    f534:	bl	0 <puts>
    f538:	mvn	r3, #0
    f53c:	b	f544 <test_string+0x1dc>
    f540:	mov	r3, #0
    f544:	mov	r0, r3
    f548:	sub	sp, fp, #4
    f54c:	pop	{fp, pc}
    f550:	.word	0x00001af0
    f554:	.word	0x000038d8
    f558:	.word	0x00000438
    f55c:	.word	0x00001418
    f560:	.word	0x00001af4
    f564:	.word	0x00001b1c
    f568:	.word	0x0000043a
    f56c:	.word	0x00001b24
    f570:	.word	0x00001b4c
    f574:	.word	0x0000043c
    f578:	.word	0x00001b50
    f57c:	.word	0x0000043e
    f580:	.word	0x00001b78
    f584:	.word	0x00000445
    f588:	.word	0x00001ba0
    f58c:	.word	0x00001ba8
    f590:	.word	0x00001bb0

0000f594 <test_sort_find>:
    f594:	push	{r4, fp, lr}
    f598:	add	fp, sp, #8
    f59c:	sub	sp, sp, #44	; 0x2c
    f5a0:	str	r0, [fp, #-48]	; 0xffffffd0
    f5a4:	mvn	r3, #0
    f5a8:	str	r3, [fp, #-16]
    f5ac:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f5b0:	bl	0 <flatcc_builder_reset>
    f5b4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f5b8:	bl	a2ac <MyGame_Example_Monster_start_as_root>
    f5bc:	ldr	r1, [pc, #1096]	; fa0c <test_sort_find+0x478>
    f5c0:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f5c4:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
    f5c8:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f5cc:	bl	93f4 <MyGame_Example_Monster_testarrayoftables_start>
    f5d0:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f5d4:	bl	9580 <MyGame_Example_Monster_testarrayoftables_push_start>
    f5d8:	ldr	r1, [pc, #1072]	; fa10 <test_sort_find+0x47c>
    f5dc:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f5e0:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
    f5e4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f5e8:	bl	95a8 <MyGame_Example_Monster_testarrayoftables_push_end>
    f5ec:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f5f0:	bl	9580 <MyGame_Example_Monster_testarrayoftables_push_start>
    f5f4:	ldr	r1, [pc, #1048]	; fa14 <test_sort_find+0x480>
    f5f8:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f5fc:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
    f600:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f604:	bl	95a8 <MyGame_Example_Monster_testarrayoftables_push_end>
    f608:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f60c:	bl	9580 <MyGame_Example_Monster_testarrayoftables_push_start>
    f610:	ldr	r1, [pc, #1024]	; fa18 <test_sort_find+0x484>
    f614:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f618:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
    f61c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f620:	bl	95a8 <MyGame_Example_Monster_testarrayoftables_push_end>
    f624:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f628:	bl	9580 <MyGame_Example_Monster_testarrayoftables_push_start>
    f62c:	ldr	r1, [pc, #1000]	; fa1c <test_sort_find+0x488>
    f630:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f634:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
    f638:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f63c:	bl	95a8 <MyGame_Example_Monster_testarrayoftables_push_end>
    f640:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f644:	bl	9580 <MyGame_Example_Monster_testarrayoftables_push_start>
    f648:	ldr	r1, [pc, #968]	; fa18 <test_sort_find+0x484>
    f64c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f650:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
    f654:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f658:	bl	95a8 <MyGame_Example_Monster_testarrayoftables_push_end>
    f65c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f660:	bl	941c <MyGame_Example_Monster_testarrayoftables_end>
    f664:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f668:	bl	a344 <MyGame_Example_Monster_end_as_root>
    f66c:	sub	r3, fp, #40	; 0x28
    f670:	mov	r1, r3
    f674:	ldr	r0, [fp, #-48]	; 0xffffffd0
    f678:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    f67c:	str	r0, [fp, #-20]	; 0xffffffec
    f680:	ldr	r2, [fp, #-40]	; 0xffffffd8
    f684:	ldr	r3, [pc, #916]	; fa20 <test_sort_find+0x48c>
    f688:	ldr	r3, [r3]
    f68c:	ldr	r1, [fp, #-20]	; 0xffffffec
    f690:	ldr	r0, [pc, #908]	; fa24 <test_sort_find+0x490>
    f694:	bl	cb40 <hexdump>
    f698:	ldr	r0, [fp, #-20]	; 0xffffffec
    f69c:	bl	2d78 <MyGame_Example_Monster_as_root>
    f6a0:	str	r0, [fp, #-24]	; 0xffffffe8
    f6a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    f6a8:	bl	4674 <MyGame_Example_Monster_testarrayoftables>
    f6ac:	str	r0, [fp, #-28]	; 0xffffffe4
    f6b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    f6b4:	cmp	r3, #0
    f6b8:	bne	f6d0 <test_sort_find+0x13c>
    f6bc:	ldr	r3, [pc, #868]	; fa28 <test_sort_find+0x494>
    f6c0:	ldr	r2, [pc, #868]	; fa2c <test_sort_find+0x498>
    f6c4:	ldr	r1, [pc, #868]	; fa30 <test_sort_find+0x49c>
    f6c8:	ldr	r0, [pc, #868]	; fa34 <test_sort_find+0x4a0>
    f6cc:	bl	0 <__assert_fail>
    f6d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    f6d4:	str	r3, [fp, #-32]	; 0xffffffe0
    f6d8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    f6dc:	bl	41dc <MyGame_Example_Monster_vec_sort_by_name>
    f6e0:	ldr	r2, [fp, #-40]	; 0xffffffd8
    f6e4:	ldr	r3, [pc, #820]	; fa20 <test_sort_find+0x48c>
    f6e8:	ldr	r3, [r3]
    f6ec:	ldr	r1, [fp, #-20]	; 0xffffffec
    f6f0:	ldr	r0, [pc, #832]	; fa38 <test_sort_find+0x4a4>
    f6f4:	bl	cb40 <hexdump>
    f6f8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    f6fc:	bl	2c50 <MyGame_Example_Monster_vec_len>
    f700:	mov	r3, r0
    f704:	cmp	r3, #5
    f708:	beq	f718 <test_sort_find+0x184>
    f70c:	ldr	r0, [pc, #808]	; fa3c <test_sort_find+0x4a8>
    f710:	bl	0 <puts>
    f714:	b	f9f4 <test_sort_find+0x460>
    f718:	mov	r1, #0
    f71c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    f720:	bl	2c94 <MyGame_Example_Monster_vec_at>
    f724:	mov	r3, r0
    f728:	mov	r0, r3
    f72c:	bl	35e4 <MyGame_Example_Monster_name>
    f730:	mov	r3, r0
    f734:	ldr	r1, [pc, #736]	; fa1c <test_sort_find+0x488>
    f738:	mov	r0, r3
    f73c:	bl	0 <strcmp>
    f740:	mov	r3, r0
    f744:	cmp	r3, #0
    f748:	beq	f758 <test_sort_find+0x1c4>
    f74c:	ldr	r0, [pc, #748]	; fa40 <test_sort_find+0x4ac>
    f750:	bl	0 <puts>
    f754:	b	f9f4 <test_sort_find+0x460>
    f758:	mov	r1, #1
    f75c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    f760:	bl	2c94 <MyGame_Example_Monster_vec_at>
    f764:	mov	r3, r0
    f768:	mov	r0, r3
    f76c:	bl	35e4 <MyGame_Example_Monster_name>
    f770:	mov	r3, r0
    f774:	ldr	r1, [pc, #668]	; fa18 <test_sort_find+0x484>
    f778:	mov	r0, r3
    f77c:	bl	0 <strcmp>
    f780:	mov	r3, r0
    f784:	cmp	r3, #0
    f788:	beq	f798 <test_sort_find+0x204>
    f78c:	ldr	r0, [pc, #688]	; fa44 <test_sort_find+0x4b0>
    f790:	bl	0 <puts>
    f794:	b	f9f4 <test_sort_find+0x460>
    f798:	mov	r1, #2
    f79c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    f7a0:	bl	2c94 <MyGame_Example_Monster_vec_at>
    f7a4:	mov	r3, r0
    f7a8:	mov	r0, r3
    f7ac:	bl	35e4 <MyGame_Example_Monster_name>
    f7b0:	mov	r3, r0
    f7b4:	ldr	r1, [pc, #604]	; fa18 <test_sort_find+0x484>
    f7b8:	mov	r0, r3
    f7bc:	bl	0 <strcmp>
    f7c0:	mov	r3, r0
    f7c4:	cmp	r3, #0
    f7c8:	beq	f7d8 <test_sort_find+0x244>
    f7cc:	ldr	r0, [pc, #628]	; fa48 <test_sort_find+0x4b4>
    f7d0:	bl	0 <puts>
    f7d4:	b	f9f4 <test_sort_find+0x460>
    f7d8:	mov	r1, #3
    f7dc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    f7e0:	bl	2c94 <MyGame_Example_Monster_vec_at>
    f7e4:	mov	r3, r0
    f7e8:	mov	r0, r3
    f7ec:	bl	35e4 <MyGame_Example_Monster_name>
    f7f0:	mov	r3, r0
    f7f4:	ldr	r1, [pc, #536]	; fa14 <test_sort_find+0x480>
    f7f8:	mov	r0, r3
    f7fc:	bl	0 <strcmp>
    f800:	mov	r3, r0
    f804:	cmp	r3, #0
    f808:	beq	f818 <test_sort_find+0x284>
    f80c:	ldr	r0, [pc, #568]	; fa4c <test_sort_find+0x4b8>
    f810:	bl	0 <puts>
    f814:	b	f9f4 <test_sort_find+0x460>
    f818:	mov	r1, #4
    f81c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    f820:	bl	2c94 <MyGame_Example_Monster_vec_at>
    f824:	mov	r3, r0
    f828:	mov	r0, r3
    f82c:	bl	35e4 <MyGame_Example_Monster_name>
    f830:	mov	r3, r0
    f834:	ldr	r1, [pc, #468]	; fa10 <test_sort_find+0x47c>
    f838:	mov	r0, r3
    f83c:	bl	0 <strcmp>
    f840:	mov	r3, r0
    f844:	cmp	r3, #0
    f848:	beq	f858 <test_sort_find+0x2c4>
    f84c:	ldr	r0, [pc, #508]	; fa50 <test_sort_find+0x4bc>
    f850:	bl	0 <puts>
    f854:	b	f9f4 <test_sort_find+0x460>
    f858:	mov	r1, #1
    f85c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    f860:	bl	2c94 <MyGame_Example_Monster_vec_at>
    f864:	mov	r4, r0
    f868:	mov	r1, #2
    f86c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    f870:	bl	2c94 <MyGame_Example_Monster_vec_at>
    f874:	mov	r3, r0
    f878:	cmp	r4, r3
    f87c:	bne	f88c <test_sort_find+0x2f8>
    f880:	ldr	r0, [pc, #460]	; fa54 <test_sort_find+0x4c0>
    f884:	bl	0 <puts>
    f888:	b	f9f4 <test_sort_find+0x460>
    f88c:	ldr	r1, [pc, #384]	; fa14 <test_sort_find+0x480>
    f890:	ldr	r0, [fp, #-28]	; 0xffffffe4
    f894:	bl	4200 <MyGame_Example_Monster_vec_find>
    f898:	mov	r3, r0
    f89c:	cmp	r3, #3
    f8a0:	beq	f8b0 <test_sort_find+0x31c>
    f8a4:	ldr	r0, [pc, #428]	; fa58 <test_sort_find+0x4c4>
    f8a8:	bl	0 <puts>
    f8ac:	b	f9f4 <test_sort_find+0x460>
    f8b0:	mov	r2, #5
    f8b4:	ldr	r1, [pc, #416]	; fa5c <test_sort_find+0x4c8>
    f8b8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    f8bc:	bl	4230 <MyGame_Example_Monster_vec_find_n>
    f8c0:	mov	r3, r0
    f8c4:	cmp	r3, #3
    f8c8:	beq	f8d8 <test_sort_find+0x344>
    f8cc:	ldr	r0, [pc, #396]	; fa60 <test_sort_find+0x4cc>
    f8d0:	bl	0 <puts>
    f8d4:	b	f9f4 <test_sort_find+0x460>
    f8d8:	ldr	r1, [pc, #308]	; fa14 <test_sort_find+0x480>
    f8dc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    f8e0:	bl	3c6c <MyGame_Example_Monster_vec_find_by_name>
    f8e4:	mov	r3, r0
    f8e8:	cmp	r3, #3
    f8ec:	beq	f8fc <test_sort_find+0x368>
    f8f0:	ldr	r0, [pc, #364]	; fa64 <test_sort_find+0x4d0>
    f8f4:	bl	0 <puts>
    f8f8:	b	f9f4 <test_sort_find+0x460>
    f8fc:	mov	r2, #5
    f900:	ldr	r1, [pc, #352]	; fa68 <test_sort_find+0x4d4>
    f904:	ldr	r0, [fp, #-28]	; 0xffffffe4
    f908:	bl	3da0 <MyGame_Example_Monster_vec_find_n_by_name>
    f90c:	mov	r3, r0
    f910:	cmp	r3, #3
    f914:	beq	f924 <test_sort_find+0x390>
    f918:	ldr	r0, [pc, #332]	; fa6c <test_sort_find+0x4d8>
    f91c:	bl	0 <puts>
    f920:	b	f9f4 <test_sort_find+0x460>
    f924:	ldr	r1, [pc, #324]	; fa70 <test_sort_find+0x4dc>
    f928:	ldr	r0, [fp, #-28]	; 0xffffffe4
    f92c:	bl	3c6c <MyGame_Example_Monster_vec_find_by_name>
    f930:	mov	r2, r0
    f934:	ldr	r3, [pc, #312]	; fa74 <test_sort_find+0x4e0>
    f938:	ldr	r3, [r3]
    f93c:	cmp	r2, r3
    f940:	beq	f950 <test_sort_find+0x3bc>
    f944:	ldr	r0, [pc, #300]	; fa78 <test_sort_find+0x4e4>
    f948:	bl	0 <puts>
    f94c:	b	f9f4 <test_sort_find+0x460>
    f950:	ldr	r1, [pc, #196]	; fa1c <test_sort_find+0x488>
    f954:	ldr	r0, [fp, #-28]	; 0xffffffe4
    f958:	bl	3c6c <MyGame_Example_Monster_vec_find_by_name>
    f95c:	mov	r3, r0
    f960:	cmp	r3, #0
    f964:	beq	f974 <test_sort_find+0x3e0>
    f968:	ldr	r0, [pc, #268]	; fa7c <test_sort_find+0x4e8>
    f96c:	bl	0 <puts>
    f970:	b	f9f4 <test_sort_find+0x460>
    f974:	ldr	r1, [pc, #156]	; fa18 <test_sort_find+0x484>
    f978:	ldr	r0, [fp, #-28]	; 0xffffffe4
    f97c:	bl	3c6c <MyGame_Example_Monster_vec_find_by_name>
    f980:	str	r0, [fp, #-36]	; 0xffffffdc
    f984:	ldr	r3, [fp, #-36]	; 0xffffffdc
    f988:	cmp	r3, #1
    f98c:	beq	f9ac <test_sort_find+0x418>
    f990:	ldr	r0, [pc, #232]	; fa80 <test_sort_find+0x4ec>
    f994:	bl	0 <puts>
    f998:	ldr	r3, [fp, #-36]	; 0xffffffdc
    f99c:	mov	r1, r3
    f9a0:	ldr	r0, [pc, #220]	; fa84 <test_sort_find+0x4f0>
    f9a4:	bl	0 <printf>
    f9a8:	b	f9f4 <test_sort_find+0x460>
    f9ac:	ldr	r1, [pc, #92]	; fa10 <test_sort_find+0x47c>
    f9b0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    f9b4:	bl	3c6c <MyGame_Example_Monster_vec_find_by_name>
    f9b8:	str	r0, [fp, #-36]	; 0xffffffdc
    f9bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
    f9c0:	cmp	r3, #4
    f9c4:	beq	f9e4 <test_sort_find+0x450>
    f9c8:	ldr	r0, [pc, #184]	; fa88 <test_sort_find+0x4f4>
    f9cc:	bl	0 <puts>
    f9d0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    f9d4:	mov	r1, r3
    f9d8:	ldr	r0, [pc, #164]	; fa84 <test_sort_find+0x4f0>
    f9dc:	bl	0 <printf>
    f9e0:	b	f9f4 <test_sort_find+0x460>
    f9e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    f9e8:	bl	41dc <MyGame_Example_Monster_vec_sort_by_name>
    f9ec:	mov	r3, #0
    f9f0:	str	r3, [fp, #-16]
    f9f4:	ldr	r0, [fp, #-20]	; 0xffffffec
    f9f8:	bl	0 <flatcc_builder_aligned_free>
    f9fc:	ldr	r3, [fp, #-16]
    fa00:	mov	r0, r3
    fa04:	sub	sp, fp, #8
    fa08:	pop	{r4, fp, pc}
    fa0c:	.word	0x00000b1c
    fa10:	.word	0x00001478
    fa14:	.word	0x000014f4
    fa18:	.word	0x00001520
    fa1c:	.word	0x00001bc4
    fa20:	.word	0x00000000
    fa24:	.word	0x00001bcc
    fa28:	.word	0x000038e4
    fa2c:	.word	0x0000047b
    fa30:	.word	0x00001418
    fa34:	.word	0x00001be4
    fa38:	.word	0x00001bf0
    fa3c:	.word	0x00001c08
    fa40:	.word	0x00001c30
    fa44:	.word	0x00001c50
    fa48:	.word	0x00001c70
    fa4c:	.word	0x00001c90
    fa50:	.word	0x00001cb0
    fa54:	.word	0x00001cd0
    fa58:	.word	0x00001d18
    fa5c:	.word	0x00001d44
    fa60:	.word	0x00001d4c
    fa64:	.word	0x00001d80
    fa68:	.word	0x00001d9c
    fa6c:	.word	0x00001da4
    fa70:	.word	0x00001dc8
    fa74:	.word	0x00000000
    fa78:	.word	0x00001dd0
    fa7c:	.word	0x00001de8
    fa80:	.word	0x00001df8
    fa84:	.word	0x00001e0c
    fa88:	.word	0x00001e14

0000fa8c <count_monsters>:
    fa8c:	push	{fp, lr}
    fa90:	add	fp, sp, #4
    fa94:	sub	sp, sp, #16
    fa98:	str	r0, [fp, #-16]
    fa9c:	str	r1, [fp, #-20]	; 0xffffffec
    faa0:	mov	r3, #0
    faa4:	str	r3, [fp, #-12]
    faa8:	ldr	r1, [fp, #-20]	; 0xffffffec
    faac:	ldr	r0, [fp, #-16]
    fab0:	bl	4268 <MyGame_Example_Monster_vec_scan>
    fab4:	str	r0, [fp, #-8]
    fab8:	b	fae8 <count_monsters+0x5c>
    fabc:	ldr	r3, [fp, #-12]
    fac0:	add	r3, r3, #1
    fac4:	str	r3, [fp, #-12]
    fac8:	ldr	r3, [fp, #-8]
    facc:	add	r1, r3, #1
    fad0:	ldr	r3, [pc, #52]	; fb0c <count_monsters+0x80>
    fad4:	ldr	r2, [r3]
    fad8:	ldr	r3, [fp, #-20]	; 0xffffffec
    fadc:	ldr	r0, [fp, #-16]
    fae0:	bl	42d0 <MyGame_Example_Monster_vec_scan_ex>
    fae4:	str	r0, [fp, #-8]
    fae8:	ldr	r3, [pc, #32]	; fb10 <count_monsters+0x84>
    faec:	ldr	r3, [r3]
    faf0:	ldr	r2, [fp, #-8]
    faf4:	cmp	r2, r3
    faf8:	bne	fabc <count_monsters+0x30>
    fafc:	ldr	r3, [fp, #-12]
    fb00:	mov	r0, r3
    fb04:	sub	sp, fp, #4
    fb08:	pop	{fp, pc}
    fb0c:	.word	0x00000004
    fb10:	.word	0x00000000

0000fb14 <test_scan>:
    fb14:	push	{fp, lr}
    fb18:	add	fp, sp, #4
    fb1c:	sub	sp, sp, #56	; 0x38
    fb20:	str	r0, [fp, #-48]	; 0xffffffd0
    fb24:	ldr	r2, [pc, #2832]	; 1063c <test_scan+0xb28>
    fb28:	sub	r3, fp, #44	; 0x2c
    fb2c:	ldm	r2, {r0, r1}
    fb30:	str	r0, [r3]
    fb34:	add	r3, r3, #4
    fb38:	strh	r1, [r3]
    fb3c:	add	r3, r3, #2
    fb40:	lsr	r2, r1, #16
    fb44:	strb	r2, [r3]
    fb48:	mvn	r3, #0
    fb4c:	str	r3, [fp, #-8]
    fb50:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fb54:	bl	0 <flatcc_builder_reset>
    fb58:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fb5c:	bl	a2ac <MyGame_Example_Monster_start_as_root>
    fb60:	ldr	r1, [pc, #2776]	; 10640 <test_scan+0xb2c>
    fb64:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fb68:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
    fb6c:	sub	r3, fp, #44	; 0x2c
    fb70:	mov	r2, #7
    fb74:	mov	r1, r3
    fb78:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fb7c:	bl	934c <MyGame_Example_Monster_inventory_create>
    fb80:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fb84:	bl	9640 <MyGame_Example_Monster_testarrayofstring_start>
    fb88:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fb8c:	bl	9668 <MyGame_Example_Monster_testarrayofstring_end>
    fb90:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fb94:	bl	93f4 <MyGame_Example_Monster_testarrayoftables_start>
    fb98:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fb9c:	bl	9580 <MyGame_Example_Monster_testarrayoftables_push_start>
    fba0:	ldr	r1, [pc, #2716]	; 10644 <test_scan+0xb30>
    fba4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fba8:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
    fbac:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fbb0:	bl	95a8 <MyGame_Example_Monster_testarrayoftables_push_end>
    fbb4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fbb8:	bl	9580 <MyGame_Example_Monster_testarrayoftables_push_start>
    fbbc:	ldr	r1, [pc, #2692]	; 10648 <test_scan+0xb34>
    fbc0:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fbc4:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
    fbc8:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fbcc:	bl	95a8 <MyGame_Example_Monster_testarrayoftables_push_end>
    fbd0:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fbd4:	bl	9580 <MyGame_Example_Monster_testarrayoftables_push_start>
    fbd8:	ldr	r1, [pc, #2668]	; 1064c <test_scan+0xb38>
    fbdc:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fbe0:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
    fbe4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fbe8:	bl	95a8 <MyGame_Example_Monster_testarrayoftables_push_end>
    fbec:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fbf0:	bl	9580 <MyGame_Example_Monster_testarrayoftables_push_start>
    fbf4:	ldr	r1, [pc, #2644]	; 10650 <test_scan+0xb3c>
    fbf8:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fbfc:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
    fc00:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fc04:	bl	95a8 <MyGame_Example_Monster_testarrayoftables_push_end>
    fc08:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fc0c:	bl	9580 <MyGame_Example_Monster_testarrayoftables_push_start>
    fc10:	ldr	r1, [pc, #2612]	; 1064c <test_scan+0xb38>
    fc14:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fc18:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
    fc1c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fc20:	bl	95a8 <MyGame_Example_Monster_testarrayoftables_push_end>
    fc24:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fc28:	bl	941c <MyGame_Example_Monster_testarrayoftables_end>
    fc2c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fc30:	bl	a344 <MyGame_Example_Monster_end_as_root>
    fc34:	sub	r3, fp, #36	; 0x24
    fc38:	mov	r1, r3
    fc3c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    fc40:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    fc44:	str	r0, [fp, #-12]
    fc48:	ldr	r0, [fp, #-12]
    fc4c:	bl	2d78 <MyGame_Example_Monster_as_root>
    fc50:	str	r0, [fp, #-16]
    fc54:	ldr	r0, [fp, #-16]
    fc58:	bl	4674 <MyGame_Example_Monster_testarrayoftables>
    fc5c:	str	r0, [fp, #-20]	; 0xffffffec
    fc60:	ldr	r3, [fp, #-20]	; 0xffffffec
    fc64:	cmp	r3, #0
    fc68:	bne	fc80 <test_scan+0x16c>
    fc6c:	ldr	r3, [pc, #2528]	; 10654 <test_scan+0xb40>
    fc70:	ldr	r2, [pc, #2528]	; 10658 <test_scan+0xb44>
    fc74:	ldr	r1, [pc, #2528]	; 1065c <test_scan+0xb48>
    fc78:	ldr	r0, [pc, #2528]	; 10660 <test_scan+0xb4c>
    fc7c:	bl	0 <__assert_fail>
    fc80:	ldr	r0, [fp, #-16]
    fc84:	bl	4578 <MyGame_Example_Monster_inventory>
    fc88:	str	r0, [fp, #-24]	; 0xffffffe8
    fc8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    fc90:	cmp	r3, #0
    fc94:	bne	fcac <test_scan+0x198>
    fc98:	ldr	r3, [pc, #2484]	; 10654 <test_scan+0xb40>
    fc9c:	ldr	r2, [pc, #2496]	; 10664 <test_scan+0xb50>
    fca0:	ldr	r1, [pc, #2484]	; 1065c <test_scan+0xb48>
    fca4:	ldr	r0, [pc, #2492]	; 10668 <test_scan+0xb54>
    fca8:	bl	0 <__assert_fail>
    fcac:	ldr	r0, [fp, #-16]
    fcb0:	bl	4770 <MyGame_Example_Monster_testarrayofstring>
    fcb4:	str	r0, [fp, #-28]	; 0xffffffe4
    fcb8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    fcbc:	cmp	r3, #0
    fcc0:	bne	fcd8 <test_scan+0x1c4>
    fcc4:	ldr	r3, [pc, #2440]	; 10654 <test_scan+0xb40>
    fcc8:	ldr	r2, [pc, #2460]	; 1066c <test_scan+0xb58>
    fccc:	ldr	r1, [pc, #2440]	; 1065c <test_scan+0xb48>
    fcd0:	ldr	r0, [pc, #2456]	; 10670 <test_scan+0xb5c>
    fcd4:	bl	0 <__assert_fail>
    fcd8:	ldr	r1, [pc, #2408]	; 10648 <test_scan+0xb34>
    fcdc:	ldr	r0, [fp, #-20]	; 0xffffffec
    fce0:	bl	4268 <MyGame_Example_Monster_vec_scan>
    fce4:	mov	r3, r0
    fce8:	cmp	r3, #1
    fcec:	beq	fcfc <test_scan+0x1e8>
    fcf0:	ldr	r0, [pc, #2428]	; 10674 <test_scan+0xb60>
    fcf4:	bl	0 <puts>
    fcf8:	b	10624 <test_scan+0xb10>
    fcfc:	ldr	r1, [pc, #2372]	; 10648 <test_scan+0xb34>
    fd00:	ldr	r0, [fp, #-20]	; 0xffffffec
    fd04:	bl	4310 <MyGame_Example_Monster_vec_rscan>
    fd08:	mov	r3, r0
    fd0c:	cmp	r3, #1
    fd10:	beq	fd20 <test_scan+0x20c>
    fd14:	ldr	r0, [pc, #2396]	; 10678 <test_scan+0xb64>
    fd18:	bl	0 <puts>
    fd1c:	b	10624 <test_scan+0xb10>
    fd20:	mov	r2, #5
    fd24:	ldr	r1, [pc, #2384]	; 1067c <test_scan+0xb68>
    fd28:	ldr	r0, [fp, #-20]	; 0xffffffec
    fd2c:	bl	4298 <MyGame_Example_Monster_vec_scan_n>
    fd30:	mov	r3, r0
    fd34:	cmp	r3, #1
    fd38:	beq	fd48 <test_scan+0x234>
    fd3c:	ldr	r0, [pc, #2364]	; 10680 <test_scan+0xb6c>
    fd40:	bl	0 <puts>
    fd44:	b	10624 <test_scan+0xb10>
    fd48:	mov	r2, #5
    fd4c:	ldr	r1, [pc, #2344]	; 1067c <test_scan+0xb68>
    fd50:	ldr	r0, [fp, #-20]	; 0xffffffec
    fd54:	bl	4340 <MyGame_Example_Monster_vec_rscan_n>
    fd58:	mov	r3, r0
    fd5c:	cmp	r3, #1
    fd60:	beq	fd70 <test_scan+0x25c>
    fd64:	ldr	r0, [pc, #2324]	; 10680 <test_scan+0xb6c>
    fd68:	bl	0 <puts>
    fd6c:	b	10624 <test_scan+0xb10>
    fd70:	ldr	r3, [pc, #2316]	; 10684 <test_scan+0xb70>
    fd74:	ldr	r2, [r3]
    fd78:	ldr	r3, [pc, #2248]	; 10648 <test_scan+0xb34>
    fd7c:	mov	r1, #2
    fd80:	ldr	r0, [fp, #-20]	; 0xffffffec
    fd84:	bl	42d0 <MyGame_Example_Monster_vec_scan_ex>
    fd88:	mov	r2, r0
    fd8c:	ldr	r3, [pc, #2292]	; 10688 <test_scan+0xb74>
    fd90:	ldr	r3, [r3]
    fd94:	cmp	r2, r3
    fd98:	beq	fda8 <test_scan+0x294>
    fd9c:	ldr	r0, [pc, #2280]	; 1068c <test_scan+0xb78>
    fda0:	bl	0 <puts>
    fda4:	b	10624 <test_scan+0xb10>
    fda8:	ldr	r1, [pc, #2272]	; 10690 <test_scan+0xb7c>
    fdac:	ldr	r0, [fp, #-20]	; 0xffffffec
    fdb0:	bl	4268 <MyGame_Example_Monster_vec_scan>
    fdb4:	mov	r2, r0
    fdb8:	ldr	r3, [pc, #2248]	; 10688 <test_scan+0xb74>
    fdbc:	ldr	r3, [r3]
    fdc0:	cmp	r2, r3
    fdc4:	beq	fdd4 <test_scan+0x2c0>
    fdc8:	ldr	r0, [pc, #2244]	; 10694 <test_scan+0xb80>
    fdcc:	bl	0 <puts>
    fdd0:	b	10624 <test_scan+0xb10>
    fdd4:	ldr	r1, [pc, #2152]	; 10644 <test_scan+0xb30>
    fdd8:	ldr	r0, [fp, #-20]	; 0xffffffec
    fddc:	bl	4268 <MyGame_Example_Monster_vec_scan>
    fde0:	mov	r3, r0
    fde4:	cmp	r3, #0
    fde8:	beq	fdf8 <test_scan+0x2e4>
    fdec:	ldr	r0, [pc, #2212]	; 10698 <test_scan+0xb84>
    fdf0:	bl	0 <puts>
    fdf4:	b	10624 <test_scan+0xb10>
    fdf8:	ldr	r1, [pc, #2124]	; 1064c <test_scan+0xb38>
    fdfc:	ldr	r0, [fp, #-20]	; 0xffffffec
    fe00:	bl	36f4 <MyGame_Example_Monster_vec_scan_by_name>
    fe04:	mov	r3, r0
    fe08:	cmp	r3, #2
    fe0c:	beq	fe1c <test_scan+0x308>
    fe10:	ldr	r0, [pc, #2180]	; 1069c <test_scan+0xb88>
    fe14:	bl	0 <puts>
    fe18:	b	10624 <test_scan+0xb10>
    fe1c:	ldr	r1, [pc, #2088]	; 1064c <test_scan+0xb38>
    fe20:	ldr	r0, [fp, #-20]	; 0xffffffec
    fe24:	bl	39c0 <MyGame_Example_Monster_vec_rscan_by_name>
    fe28:	mov	r3, r0
    fe2c:	cmp	r3, #4
    fe30:	beq	fe40 <test_scan+0x32c>
    fe34:	ldr	r0, [pc, #2144]	; 1069c <test_scan+0xb88>
    fe38:	bl	0 <puts>
    fe3c:	b	10624 <test_scan+0xb10>
    fe40:	mov	r2, #8
    fe44:	ldr	r1, [pc, #2132]	; 106a0 <test_scan+0xb8c>
    fe48:	ldr	r0, [fp, #-20]	; 0xffffffec
    fe4c:	bl	3a50 <MyGame_Example_Monster_vec_rscan_n_by_name>
    fe50:	mov	r3, r0
    fe54:	cmp	r3, #4
    fe58:	beq	fe68 <test_scan+0x354>
    fe5c:	ldr	r0, [pc, #2112]	; 106a4 <test_scan+0xb90>
    fe60:	bl	0 <puts>
    fe64:	b	10624 <test_scan+0xb10>
    fe68:	mov	r3, #8
    fe6c:	str	r3, [sp]
    fe70:	ldr	r3, [pc, #2088]	; 106a0 <test_scan+0xb8c>
    fe74:	mov	r2, #3
    fe78:	mov	r1, #1
    fe7c:	ldr	r0, [fp, #-20]	; 0xffffffec
    fe80:	bl	3ba8 <MyGame_Example_Monster_vec_rscan_ex_n_by_name>
    fe84:	mov	r3, r0
    fe88:	cmp	r3, #2
    fe8c:	beq	fe9c <test_scan+0x388>
    fe90:	ldr	r0, [pc, #2060]	; 106a4 <test_scan+0xb90>
    fe94:	bl	0 <puts>
    fe98:	b	10624 <test_scan+0xb10>
    fe9c:	ldr	r3, [pc, #2016]	; 10684 <test_scan+0xb70>
    fea0:	ldr	r2, [r3]
    fea4:	ldr	r3, [pc, #1952]	; 1064c <test_scan+0xb38>
    fea8:	mov	r1, #2
    feac:	ldr	r0, [fp, #-20]	; 0xffffffec
    feb0:	bl	3834 <MyGame_Example_Monster_vec_scan_ex_by_name>
    feb4:	mov	r3, r0
    feb8:	cmp	r3, #2
    febc:	beq	fecc <test_scan+0x3b8>
    fec0:	ldr	r0, [pc, #2016]	; 106a8 <test_scan+0xb94>
    fec4:	bl	0 <puts>
    fec8:	b	10624 <test_scan+0xb10>
    fecc:	ldr	r3, [pc, #1968]	; 10684 <test_scan+0xb70>
    fed0:	ldr	r2, [r3]
    fed4:	mov	r3, #8
    fed8:	str	r3, [sp]
    fedc:	ldr	r3, [pc, #1980]	; 106a0 <test_scan+0xb8c>
    fee0:	mov	r1, #2
    fee4:	ldr	r0, [fp, #-20]	; 0xffffffec
    fee8:	bl	38f8 <MyGame_Example_Monster_vec_scan_ex_n_by_name>
    feec:	mov	r3, r0
    fef0:	cmp	r3, #2
    fef4:	beq	ff04 <test_scan+0x3f0>
    fef8:	ldr	r0, [pc, #1960]	; 106a8 <test_scan+0xb94>
    fefc:	bl	0 <puts>
    ff00:	b	10624 <test_scan+0xb10>
    ff04:	ldr	r3, [pc, #1912]	; 10684 <test_scan+0xb70>
    ff08:	ldr	r2, [r3]
    ff0c:	ldr	r3, [pc, #1848]	; 1064c <test_scan+0xb38>
    ff10:	mov	r1, #3
    ff14:	ldr	r0, [fp, #-20]	; 0xffffffec
    ff18:	bl	3834 <MyGame_Example_Monster_vec_scan_ex_by_name>
    ff1c:	mov	r3, r0
    ff20:	cmp	r3, #4
    ff24:	beq	ff34 <test_scan+0x420>
    ff28:	ldr	r0, [pc, #1916]	; 106ac <test_scan+0xb98>
    ff2c:	bl	0 <puts>
    ff30:	b	10624 <test_scan+0xb10>
    ff34:	ldr	r3, [pc, #1876]	; 10690 <test_scan+0xb7c>
    ff38:	mov	r2, #3
    ff3c:	mov	r1, #1
    ff40:	ldr	r0, [fp, #-20]	; 0xffffffec
    ff44:	bl	42d0 <MyGame_Example_Monster_vec_scan_ex>
    ff48:	mov	r2, r0
    ff4c:	ldr	r3, [pc, #1844]	; 10688 <test_scan+0xb74>
    ff50:	ldr	r3, [r3]
    ff54:	cmp	r2, r3
    ff58:	beq	ff68 <test_scan+0x454>
    ff5c:	ldr	r0, [pc, #1868]	; 106b0 <test_scan+0xb9c>
    ff60:	bl	0 <puts>
    ff64:	b	10624 <test_scan+0xb10>
    ff68:	ldr	r3, [pc, #1748]	; 10644 <test_scan+0xb30>
    ff6c:	mov	r2, #3
    ff70:	mov	r1, #1
    ff74:	ldr	r0, [fp, #-20]	; 0xffffffec
    ff78:	bl	42d0 <MyGame_Example_Monster_vec_scan_ex>
    ff7c:	mov	r2, r0
    ff80:	ldr	r3, [pc, #1792]	; 10688 <test_scan+0xb74>
    ff84:	ldr	r3, [r3]
    ff88:	cmp	r2, r3
    ff8c:	beq	ff9c <test_scan+0x488>
    ff90:	ldr	r0, [pc, #1820]	; 106b4 <test_scan+0xba0>
    ff94:	bl	0 <puts>
    ff98:	b	10624 <test_scan+0xb10>
    ff9c:	ldr	r3, [pc, #1700]	; 10648 <test_scan+0xb34>
    ffa0:	mov	r2, #3
    ffa4:	mov	r1, #1
    ffa8:	ldr	r0, [fp, #-20]	; 0xffffffec
    ffac:	bl	42d0 <MyGame_Example_Monster_vec_scan_ex>
    ffb0:	mov	r3, r0
    ffb4:	cmp	r3, #1
    ffb8:	beq	ffc8 <test_scan+0x4b4>
    ffbc:	ldr	r0, [pc, #1780]	; 106b8 <test_scan+0xba4>
    ffc0:	bl	0 <puts>
    ffc4:	b	10624 <test_scan+0xb10>
    ffc8:	ldr	r3, [pc, #1660]	; 1064c <test_scan+0xb38>
    ffcc:	mov	r2, #3
    ffd0:	mov	r1, #1
    ffd4:	ldr	r0, [fp, #-20]	; 0xffffffec
    ffd8:	bl	3834 <MyGame_Example_Monster_vec_scan_ex_by_name>
    ffdc:	mov	r3, r0
    ffe0:	cmp	r3, #2
    ffe4:	beq	fff4 <test_scan+0x4e0>
    ffe8:	ldr	r0, [pc, #1740]	; 106bc <test_scan+0xba8>
    ffec:	bl	0 <puts>
    fff0:	b	10624 <test_scan+0xb10>
    fff4:	ldr	r3, [pc, #1620]	; 10650 <test_scan+0xb3c>
    fff8:	mov	r2, #3
    fffc:	mov	r1, #1
   10000:	ldr	r0, [fp, #-20]	; 0xffffffec
   10004:	bl	3834 <MyGame_Example_Monster_vec_scan_ex_by_name>
   10008:	mov	r2, r0
   1000c:	ldr	r3, [pc, #1652]	; 10688 <test_scan+0xb74>
   10010:	ldr	r3, [r3]
   10014:	cmp	r2, r3
   10018:	beq	10028 <test_scan+0x514>
   1001c:	ldr	r0, [pc, #1692]	; 106c0 <test_scan+0xbac>
   10020:	bl	0 <puts>
   10024:	b	10624 <test_scan+0xb10>
   10028:	ldr	r3, [pc, #1632]	; 10690 <test_scan+0xb7c>
   1002c:	mov	r2, #3
   10030:	mov	r1, #1
   10034:	ldr	r0, [fp, #-20]	; 0xffffffec
   10038:	bl	4378 <MyGame_Example_Monster_vec_rscan_ex>
   1003c:	mov	r2, r0
   10040:	ldr	r3, [pc, #1600]	; 10688 <test_scan+0xb74>
   10044:	ldr	r3, [r3]
   10048:	cmp	r2, r3
   1004c:	beq	1005c <test_scan+0x548>
   10050:	ldr	r0, [pc, #1644]	; 106c4 <test_scan+0xbb0>
   10054:	bl	0 <puts>
   10058:	b	10624 <test_scan+0xb10>
   1005c:	ldr	r3, [pc, #1504]	; 10644 <test_scan+0xb30>
   10060:	mov	r2, #3
   10064:	mov	r1, #1
   10068:	ldr	r0, [fp, #-20]	; 0xffffffec
   1006c:	bl	4378 <MyGame_Example_Monster_vec_rscan_ex>
   10070:	mov	r2, r0
   10074:	ldr	r3, [pc, #1548]	; 10688 <test_scan+0xb74>
   10078:	ldr	r3, [r3]
   1007c:	cmp	r2, r3
   10080:	beq	10090 <test_scan+0x57c>
   10084:	ldr	r0, [pc, #1596]	; 106c8 <test_scan+0xbb4>
   10088:	bl	0 <puts>
   1008c:	b	10624 <test_scan+0xb10>
   10090:	ldr	r3, [pc, #1456]	; 10648 <test_scan+0xb34>
   10094:	mov	r2, #3
   10098:	mov	r1, #1
   1009c:	ldr	r0, [fp, #-20]	; 0xffffffec
   100a0:	bl	4378 <MyGame_Example_Monster_vec_rscan_ex>
   100a4:	mov	r3, r0
   100a8:	cmp	r3, #1
   100ac:	beq	100bc <test_scan+0x5a8>
   100b0:	ldr	r0, [pc, #1556]	; 106cc <test_scan+0xbb8>
   100b4:	bl	0 <puts>
   100b8:	b	10624 <test_scan+0xb10>
   100bc:	ldr	r3, [pc, #1416]	; 1064c <test_scan+0xb38>
   100c0:	mov	r2, #3
   100c4:	mov	r1, #1
   100c8:	ldr	r0, [fp, #-20]	; 0xffffffec
   100cc:	bl	3ae8 <MyGame_Example_Monster_vec_rscan_ex_by_name>
   100d0:	mov	r3, r0
   100d4:	cmp	r3, #2
   100d8:	beq	100e8 <test_scan+0x5d4>
   100dc:	ldr	r0, [pc, #1516]	; 106d0 <test_scan+0xbbc>
   100e0:	bl	0 <puts>
   100e4:	b	10624 <test_scan+0xb10>
   100e8:	ldr	r3, [pc, #1376]	; 10650 <test_scan+0xb3c>
   100ec:	mov	r2, #3
   100f0:	mov	r1, #1
   100f4:	ldr	r0, [fp, #-20]	; 0xffffffec
   100f8:	bl	3ae8 <MyGame_Example_Monster_vec_rscan_ex_by_name>
   100fc:	mov	r2, r0
   10100:	ldr	r3, [pc, #1408]	; 10688 <test_scan+0xb74>
   10104:	ldr	r3, [r3]
   10108:	cmp	r2, r3
   1010c:	beq	1011c <test_scan+0x608>
   10110:	ldr	r0, [pc, #1468]	; 106d4 <test_scan+0xbc0>
   10114:	bl	0 <puts>
   10118:	b	10624 <test_scan+0xb10>
   1011c:	ldr	r3, [pc, #1312]	; 10644 <test_scan+0xb30>
   10120:	mov	r2, #0
   10124:	mov	r1, #0
   10128:	ldr	r0, [fp, #-20]	; 0xffffffec
   1012c:	bl	42d0 <MyGame_Example_Monster_vec_scan_ex>
   10130:	mov	r2, r0
   10134:	ldr	r3, [pc, #1356]	; 10688 <test_scan+0xb74>
   10138:	ldr	r3, [r3]
   1013c:	cmp	r2, r3
   10140:	beq	10150 <test_scan+0x63c>
   10144:	ldr	r0, [pc, #1420]	; 106d8 <test_scan+0xbc4>
   10148:	bl	0 <puts>
   1014c:	b	10624 <test_scan+0xb10>
   10150:	ldr	r3, [pc, #1264]	; 10648 <test_scan+0xb34>
   10154:	mov	r2, #0
   10158:	mov	r1, #0
   1015c:	ldr	r0, [fp, #-20]	; 0xffffffec
   10160:	bl	42d0 <MyGame_Example_Monster_vec_scan_ex>
   10164:	mov	r2, r0
   10168:	ldr	r3, [pc, #1304]	; 10688 <test_scan+0xb74>
   1016c:	ldr	r3, [r3]
   10170:	cmp	r2, r3
   10174:	beq	10184 <test_scan+0x670>
   10178:	ldr	r0, [pc, #1372]	; 106dc <test_scan+0xbc8>
   1017c:	bl	0 <puts>
   10180:	b	10624 <test_scan+0xb10>
   10184:	ldr	r3, [pc, #1212]	; 10648 <test_scan+0xb34>
   10188:	mov	r2, #1
   1018c:	mov	r1, #1
   10190:	ldr	r0, [fp, #-20]	; 0xffffffec
   10194:	bl	42d0 <MyGame_Example_Monster_vec_scan_ex>
   10198:	mov	r2, r0
   1019c:	ldr	r3, [pc, #1252]	; 10688 <test_scan+0xb74>
   101a0:	ldr	r3, [r3]
   101a4:	cmp	r2, r3
   101a8:	beq	101b8 <test_scan+0x6a4>
   101ac:	ldr	r0, [pc, #1324]	; 106e0 <test_scan+0xbcc>
   101b0:	bl	0 <puts>
   101b4:	b	10624 <test_scan+0xb10>
   101b8:	ldr	r0, [fp, #-20]	; 0xffffffec
   101bc:	bl	2c50 <MyGame_Example_Monster_vec_len>
   101c0:	mov	r1, r0
   101c4:	ldr	r3, [pc, #1208]	; 10684 <test_scan+0xb70>
   101c8:	ldr	r2, [r3]
   101cc:	ldr	r3, [pc, #1136]	; 10644 <test_scan+0xb30>
   101d0:	ldr	r0, [fp, #-20]	; 0xffffffec
   101d4:	bl	42d0 <MyGame_Example_Monster_vec_scan_ex>
   101d8:	mov	r2, r0
   101dc:	ldr	r3, [pc, #1188]	; 10688 <test_scan+0xb74>
   101e0:	ldr	r3, [r3]
   101e4:	cmp	r2, r3
   101e8:	beq	101f8 <test_scan+0x6e4>
   101ec:	ldr	r0, [pc, #1264]	; 106e4 <test_scan+0xbd0>
   101f0:	bl	0 <puts>
   101f4:	b	10624 <test_scan+0xb10>
   101f8:	ldr	r3, [pc, #1092]	; 10644 <test_scan+0xb30>
   101fc:	mov	r2, #0
   10200:	mov	r1, #0
   10204:	ldr	r0, [fp, #-20]	; 0xffffffec
   10208:	bl	4378 <MyGame_Example_Monster_vec_rscan_ex>
   1020c:	mov	r2, r0
   10210:	ldr	r3, [pc, #1136]	; 10688 <test_scan+0xb74>
   10214:	ldr	r3, [r3]
   10218:	cmp	r2, r3
   1021c:	beq	1022c <test_scan+0x718>
   10220:	ldr	r0, [pc, #1200]	; 106d8 <test_scan+0xbc4>
   10224:	bl	0 <puts>
   10228:	b	10624 <test_scan+0xb10>
   1022c:	ldr	r3, [pc, #1044]	; 10648 <test_scan+0xb34>
   10230:	mov	r2, #0
   10234:	mov	r1, #0
   10238:	ldr	r0, [fp, #-20]	; 0xffffffec
   1023c:	bl	4378 <MyGame_Example_Monster_vec_rscan_ex>
   10240:	mov	r2, r0
   10244:	ldr	r3, [pc, #1084]	; 10688 <test_scan+0xb74>
   10248:	ldr	r3, [r3]
   1024c:	cmp	r2, r3
   10250:	beq	10260 <test_scan+0x74c>
   10254:	ldr	r0, [pc, #1152]	; 106dc <test_scan+0xbc8>
   10258:	bl	0 <puts>
   1025c:	b	10624 <test_scan+0xb10>
   10260:	ldr	r3, [pc, #992]	; 10648 <test_scan+0xb34>
   10264:	mov	r2, #1
   10268:	mov	r1, #1
   1026c:	ldr	r0, [fp, #-20]	; 0xffffffec
   10270:	bl	4378 <MyGame_Example_Monster_vec_rscan_ex>
   10274:	mov	r2, r0
   10278:	ldr	r3, [pc, #1032]	; 10688 <test_scan+0xb74>
   1027c:	ldr	r3, [r3]
   10280:	cmp	r2, r3
   10284:	beq	10294 <test_scan+0x780>
   10288:	ldr	r0, [pc, #1104]	; 106e0 <test_scan+0xbcc>
   1028c:	bl	0 <puts>
   10290:	b	10624 <test_scan+0xb10>
   10294:	ldr	r0, [fp, #-20]	; 0xffffffec
   10298:	bl	2c50 <MyGame_Example_Monster_vec_len>
   1029c:	mov	r1, r0
   102a0:	ldr	r3, [pc, #988]	; 10684 <test_scan+0xb70>
   102a4:	ldr	r2, [r3]
   102a8:	ldr	r3, [pc, #916]	; 10644 <test_scan+0xb30>
   102ac:	ldr	r0, [fp, #-20]	; 0xffffffec
   102b0:	bl	4378 <MyGame_Example_Monster_vec_rscan_ex>
   102b4:	mov	r2, r0
   102b8:	ldr	r3, [pc, #968]	; 10688 <test_scan+0xb74>
   102bc:	ldr	r3, [r3]
   102c0:	cmp	r2, r3
   102c4:	beq	102d4 <test_scan+0x7c0>
   102c8:	ldr	r0, [pc, #1044]	; 106e4 <test_scan+0xbd0>
   102cc:	bl	0 <puts>
   102d0:	b	10624 <test_scan+0xb10>
   102d4:	ldr	r1, [pc, #876]	; 10648 <test_scan+0xb34>
   102d8:	ldr	r0, [fp, #-20]	; 0xffffffec
   102dc:	bl	fa8c <count_monsters>
   102e0:	mov	r3, r0
   102e4:	cmp	r3, #1
   102e8:	beq	102f8 <test_scan+0x7e4>
   102ec:	ldr	r0, [pc, #1012]	; 106e8 <test_scan+0xbd4>
   102f0:	bl	0 <puts>
   102f4:	b	10624 <test_scan+0xb10>
   102f8:	ldr	r1, [pc, #912]	; 10690 <test_scan+0xb7c>
   102fc:	ldr	r0, [fp, #-20]	; 0xffffffec
   10300:	bl	fa8c <count_monsters>
   10304:	mov	r3, r0
   10308:	cmp	r3, #0
   1030c:	beq	1031c <test_scan+0x808>
   10310:	ldr	r0, [pc, #980]	; 106ec <test_scan+0xbd8>
   10314:	bl	0 <puts>
   10318:	b	10624 <test_scan+0xb10>
   1031c:	ldr	r1, [pc, #800]	; 10644 <test_scan+0xb30>
   10320:	ldr	r0, [fp, #-20]	; 0xffffffec
   10324:	bl	fa8c <count_monsters>
   10328:	mov	r3, r0
   1032c:	cmp	r3, #1
   10330:	beq	10340 <test_scan+0x82c>
   10334:	ldr	r0, [pc, #948]	; 106f0 <test_scan+0xbdc>
   10338:	bl	0 <puts>
   1033c:	b	10624 <test_scan+0xb10>
   10340:	ldr	r1, [pc, #772]	; 1064c <test_scan+0xb38>
   10344:	ldr	r0, [fp, #-20]	; 0xffffffec
   10348:	bl	fa8c <count_monsters>
   1034c:	mov	r3, r0
   10350:	cmp	r3, #2
   10354:	beq	10364 <test_scan+0x850>
   10358:	ldr	r0, [pc, #916]	; 106f4 <test_scan+0xbe0>
   1035c:	bl	0 <puts>
   10360:	b	10624 <test_scan+0xb10>
   10364:	mov	r1, #6
   10368:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1036c:	bl	fa4 <flatbuffers_uint8_vec_scan>
   10370:	str	r0, [fp, #-32]	; 0xffffffe0
   10374:	ldr	r3, [fp, #-32]	; 0xffffffe0
   10378:	cmp	r3, #0
   1037c:	beq	1038c <test_scan+0x878>
   10380:	ldr	r0, [pc, #880]	; 106f8 <test_scan+0xbe4>
   10384:	bl	0 <puts>
   10388:	b	10624 <test_scan+0xb10>
   1038c:	mov	r1, #1
   10390:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10394:	bl	fa4 <flatbuffers_uint8_vec_scan>
   10398:	str	r0, [fp, #-32]	; 0xffffffe0
   1039c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   103a0:	cmp	r3, #2
   103a4:	beq	103b4 <test_scan+0x8a0>
   103a8:	ldr	r0, [pc, #844]	; 106fc <test_scan+0xbe8>
   103ac:	bl	0 <puts>
   103b0:	b	10624 <test_scan+0xb10>
   103b4:	ldr	r3, [pc, #712]	; 10684 <test_scan+0xb70>
   103b8:	ldr	r2, [r3]
   103bc:	mov	r3, #1
   103c0:	mov	r1, #3
   103c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   103c8:	bl	1040 <flatbuffers_uint8_vec_scan_ex>
   103cc:	str	r0, [fp, #-32]	; 0xffffffe0
   103d0:	ldr	r3, [pc, #688]	; 10688 <test_scan+0xb74>
   103d4:	ldr	r3, [r3]
   103d8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   103dc:	cmp	r2, r3
   103e0:	beq	103f0 <test_scan+0x8dc>
   103e4:	ldr	r0, [pc, #788]	; 10700 <test_scan+0xbec>
   103e8:	bl	0 <puts>
   103ec:	b	10624 <test_scan+0xb10>
   103f0:	mov	r1, #5
   103f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   103f8:	bl	fa4 <flatbuffers_uint8_vec_scan>
   103fc:	str	r0, [fp, #-32]	; 0xffffffe0
   10400:	ldr	r3, [pc, #640]	; 10688 <test_scan+0xb74>
   10404:	ldr	r3, [r3]
   10408:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1040c:	cmp	r2, r3
   10410:	beq	10420 <test_scan+0x90c>
   10414:	ldr	r0, [pc, #744]	; 10704 <test_scan+0xbf0>
   10418:	bl	0 <puts>
   1041c:	b	10624 <test_scan+0xb10>
   10420:	mov	r1, #2
   10424:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10428:	bl	fa4 <flatbuffers_uint8_vec_scan>
   1042c:	str	r0, [fp, #-32]	; 0xffffffe0
   10430:	ldr	r3, [fp, #-32]	; 0xffffffe0
   10434:	cmp	r3, #6
   10438:	beq	10448 <test_scan+0x934>
   1043c:	ldr	r0, [pc, #708]	; 10708 <test_scan+0xbf4>
   10440:	bl	0 <puts>
   10444:	b	10624 <test_scan+0xb10>
   10448:	mov	r1, #3
   1044c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10450:	bl	fa4 <flatbuffers_uint8_vec_scan>
   10454:	str	r0, [fp, #-32]	; 0xffffffe0
   10458:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1045c:	cmp	r3, #3
   10460:	beq	10470 <test_scan+0x95c>
   10464:	ldr	r0, [pc, #664]	; 10704 <test_scan+0xbf0>
   10468:	bl	0 <puts>
   1046c:	b	10624 <test_scan+0xb10>
   10470:	ldr	r3, [pc, #524]	; 10684 <test_scan+0xb70>
   10474:	ldr	r2, [r3]
   10478:	mov	r3, #3
   1047c:	mov	r1, #3
   10480:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10484:	bl	1040 <flatbuffers_uint8_vec_scan_ex>
   10488:	str	r0, [fp, #-32]	; 0xffffffe0
   1048c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   10490:	cmp	r3, #3
   10494:	beq	104a4 <test_scan+0x990>
   10498:	ldr	r0, [pc, #620]	; 1070c <test_scan+0xbf8>
   1049c:	bl	0 <puts>
   104a0:	b	10624 <test_scan+0xb10>
   104a4:	ldr	r3, [pc, #472]	; 10684 <test_scan+0xb70>
   104a8:	ldr	r2, [r3]
   104ac:	mov	r3, #3
   104b0:	mov	r1, #4
   104b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   104b8:	bl	1040 <flatbuffers_uint8_vec_scan_ex>
   104bc:	str	r0, [fp, #-32]	; 0xffffffe0
   104c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   104c4:	cmp	r3, #5
   104c8:	beq	104d8 <test_scan+0x9c4>
   104cc:	ldr	r0, [pc, #572]	; 10710 <test_scan+0xbfc>
   104d0:	bl	0 <puts>
   104d4:	b	10624 <test_scan+0xb10>
   104d8:	mov	r1, #3
   104dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   104e0:	bl	1100 <flatbuffers_uint8_vec_rscan>
   104e4:	str	r0, [fp, #-32]	; 0xffffffe0
   104e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   104ec:	cmp	r3, #5
   104f0:	beq	10500 <test_scan+0x9ec>
   104f4:	ldr	r0, [pc, #536]	; 10714 <test_scan+0xc00>
   104f8:	bl	0 <puts>
   104fc:	b	10624 <test_scan+0xb10>
   10500:	mov	r3, #3
   10504:	mov	r2, #4
   10508:	mov	r1, #1
   1050c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10510:	bl	1190 <flatbuffers_uint8_vec_rscan_ex>
   10514:	str	r0, [fp, #-32]	; 0xffffffe0
   10518:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1051c:	cmp	r3, #3
   10520:	beq	10530 <test_scan+0xa1c>
   10524:	ldr	r0, [pc, #492]	; 10718 <test_scan+0xc04>
   10528:	bl	0 <puts>
   1052c:	b	10624 <test_scan+0xb10>
   10530:	ldr	r1, [pc, #484]	; 1071c <test_scan+0xc08>
   10534:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10538:	bl	14f4 <flatbuffers_string_vec_scan>
   1053c:	ldr	r3, [pc, #320]	; 10684 <test_scan+0xb70>
   10540:	ldr	r2, [r3]
   10544:	ldr	r3, [pc, #464]	; 1071c <test_scan+0xc08>
   10548:	mov	r1, #0
   1054c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10550:	bl	1618 <flatbuffers_string_vec_scan_ex>
   10554:	mov	r2, #4
   10558:	ldr	r1, [pc, #444]	; 1071c <test_scan+0xc08>
   1055c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10560:	bl	1584 <flatbuffers_string_vec_scan_n>
   10564:	ldr	r3, [pc, #280]	; 10684 <test_scan+0xb70>
   10568:	ldr	r2, [r3]
   1056c:	mov	r3, #4
   10570:	str	r3, [sp]
   10574:	ldr	r3, [pc, #416]	; 1071c <test_scan+0xc08>
   10578:	mov	r1, #0
   1057c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10580:	bl	16d0 <flatbuffers_string_vec_scan_ex_n>
   10584:	ldr	r1, [pc, #400]	; 1071c <test_scan+0xc08>
   10588:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1058c:	bl	1788 <flatbuffers_string_vec_rscan>
   10590:	ldr	r3, [pc, #236]	; 10684 <test_scan+0xb70>
   10594:	ldr	r2, [r3]
   10598:	ldr	r3, [pc, #380]	; 1071c <test_scan+0xc08>
   1059c:	mov	r1, #0
   105a0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   105a4:	bl	1894 <flatbuffers_string_vec_rscan_ex>
   105a8:	mov	r2, #4
   105ac:	ldr	r1, [pc, #360]	; 1071c <test_scan+0xc08>
   105b0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   105b4:	bl	180c <flatbuffers_string_vec_rscan_n>
   105b8:	ldr	r3, [pc, #196]	; 10684 <test_scan+0xb70>
   105bc:	ldr	r2, [r3]
   105c0:	mov	r3, #4
   105c4:	str	r3, [sp]
   105c8:	ldr	r3, [pc, #332]	; 1071c <test_scan+0xc08>
   105cc:	mov	r1, #0
   105d0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   105d4:	bl	1948 <flatbuffers_string_vec_rscan_ex_n>
   105d8:	mov	r1, #13
   105dc:	ldr	r0, [fp, #-20]	; 0xffffffec
   105e0:	bl	314c <MyGame_Example_Monster_vec_scan_by_hp>
   105e4:	ldr	r3, [pc, #152]	; 10684 <test_scan+0xb70>
   105e8:	ldr	r2, [r3]
   105ec:	mov	r3, #42	; 0x2a
   105f0:	mov	r1, #1
   105f4:	ldr	r0, [fp, #-20]	; 0xffffffec
   105f8:	bl	31f4 <MyGame_Example_Monster_vec_scan_ex_by_hp>
   105fc:	mov	r1, #1
   10600:	ldr	r0, [fp, #-20]	; 0xffffffec
   10604:	bl	32c0 <MyGame_Example_Monster_vec_rscan_by_hp>
   10608:	mov	r3, #42	; 0x2a
   1060c:	mov	r2, #2
   10610:	mov	r1, #0
   10614:	ldr	r0, [fp, #-20]	; 0xffffffec
   10618:	bl	335c <MyGame_Example_Monster_vec_rscan_ex_by_hp>
   1061c:	mov	r3, #0
   10620:	str	r3, [fp, #-8]
   10624:	ldr	r0, [fp, #-12]
   10628:	bl	0 <flatcc_builder_aligned_free>
   1062c:	ldr	r3, [fp, #-8]
   10630:	mov	r0, r3
   10634:	sub	sp, fp, #4
   10638:	pop	{fp, pc}
   1063c:	.word	0x000023b0
   10640:	.word	0x00000b1c
   10644:	.word	0x00001478
   10648:	.word	0x000014f4
   1064c:	.word	0x00001520
   10650:	.word	0x00001bc4
   10654:	.word	0x000038f4
   10658:	.word	0x00000519
   1065c:	.word	0x00001418
   10660:	.word	0x00001be4
   10664:	.word	0x0000051b
   10668:	.word	0x00001e28
   1066c:	.word	0x0000051d
   10670:	.word	0x00001e2c
   10674:	.word	0x00001e34
   10678:	.word	0x00001e54
   1067c:	.word	0x00001d9c
   10680:	.word	0x00001e74
   10684:	.word	0x00000004
   10688:	.word	0x00000000
   1068c:	.word	0x00001e9c
   10690:	.word	0x00001dc8
   10694:	.word	0x00001dd0
   10698:	.word	0x00001e14
   1069c:	.word	0x00001df8
   106a0:	.word	0x00001ec8
   106a4:	.word	0x00001ed4
   106a8:	.word	0x00001ef0
   106ac:	.word	0x00001f1c
   106b0:	.word	0x00001f38
   106b4:	.word	0x00001f5c
   106b8:	.word	0x00001f80
   106bc:	.word	0x00001fa4
   106c0:	.word	0x00001fcc
   106c4:	.word	0x00001ff8
   106c8:	.word	0x00002028
   106cc:	.word	0x00002054
   106d0:	.word	0x0000207c
   106d4:	.word	0x000020a4
   106d8:	.word	0x000020d0
   106dc:	.word	0x000020f0
   106e0:	.word	0x00002110
   106e4:	.word	0x00002138
   106e8:	.word	0x00002164
   106ec:	.word	0x00002180
   106f0:	.word	0x0000219c
   106f4:	.word	0x000021b8
   106f8:	.word	0x000021d8
   106fc:	.word	0x00002204
   10700:	.word	0x00002234
   10704:	.word	0x0000226c
   10708:	.word	0x000022a0
   1070c:	.word	0x000022cc
   10710:	.word	0x00002308
   10714:	.word	0x00002344
   10718:	.word	0x00002378
   1071c:	.word	0x00001618

00010720 <test_basic_sort>:
   10720:	push	{r4, fp, lr}
   10724:	add	fp, sp, #8
   10728:	sub	sp, sp, #60	; 0x3c
   1072c:	str	r0, [fp, #-64]	; 0xffffffc0
   10730:	ldr	r2, [pc, #420]	; 108dc <test_basic_sort+0x1bc>
   10734:	sub	r3, fp, #48	; 0x30
   10738:	ldm	r2, {r0, r1}
   1073c:	str	r0, [r3]
   10740:	add	r3, r3, #4
   10744:	strh	r1, [r3]
   10748:	add	r3, r3, #2
   1074c:	lsr	r2, r1, #16
   10750:	strb	r2, [r3]
   10754:	ldr	r2, [pc, #388]	; 108e0 <test_basic_sort+0x1c0>
   10758:	sub	r3, fp, #56	; 0x38
   1075c:	ldm	r2, {r0, r1}
   10760:	str	r0, [r3]
   10764:	add	r3, r3, #4
   10768:	strh	r1, [r3]
   1076c:	add	r3, r3, #2
   10770:	lsr	r2, r1, #16
   10774:	strb	r2, [r3]
   10778:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1077c:	bl	0 <flatcc_builder_reset>
   10780:	ldr	r0, [fp, #-64]	; 0xffffffc0
   10784:	bl	a2ac <MyGame_Example_Monster_start_as_root>
   10788:	ldr	r1, [pc, #340]	; 108e4 <test_basic_sort+0x1c4>
   1078c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   10790:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
   10794:	sub	r3, fp, #48	; 0x30
   10798:	mov	r2, #7
   1079c:	mov	r1, r3
   107a0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   107a4:	bl	934c <MyGame_Example_Monster_inventory_create>
   107a8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   107ac:	bl	a344 <MyGame_Example_Monster_end_as_root>
   107b0:	sub	r3, fp, #40	; 0x28
   107b4:	mov	r1, r3
   107b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   107bc:	bl	0 <flatcc_builder_get_direct_buffer>
   107c0:	str	r0, [fp, #-20]	; 0xffffffec
   107c4:	ldr	r0, [fp, #-20]	; 0xffffffec
   107c8:	bl	2d78 <MyGame_Example_Monster_as_root>
   107cc:	str	r0, [fp, #-24]	; 0xffffffe8
   107d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   107d4:	bl	4578 <MyGame_Example_Monster_inventory>
   107d8:	str	r0, [fp, #-28]	; 0xffffffe4
   107dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   107e0:	str	r3, [fp, #-32]	; 0xffffffe0
   107e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   107e8:	bl	145c <flatbuffers_uint8_vec_sort>
   107ec:	ldr	r0, [fp, #-28]	; 0xffffffe4
   107f0:	bl	de8 <flatbuffers_uint8_vec_len>
   107f4:	mov	r3, r0
   107f8:	cmp	r3, #7
   107fc:	beq	10814 <test_basic_sort+0xf4>
   10800:	ldr	r3, [pc, #224]	; 108e8 <test_basic_sort+0x1c8>
   10804:	mov	r2, #1552	; 0x610
   10808:	ldr	r1, [pc, #220]	; 108ec <test_basic_sort+0x1cc>
   1080c:	ldr	r0, [pc, #220]	; 108f0 <test_basic_sort+0x1d0>
   10810:	bl	0 <__assert_fail>
   10814:	mov	r3, #0
   10818:	strb	r3, [fp, #-13]
   1081c:	b	108b4 <test_basic_sort+0x194>
   10820:	ldrb	r3, [fp, #-13]
   10824:	mov	r1, r3
   10828:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1082c:	bl	e10 <flatbuffers_uint8_vec_at>
   10830:	mov	r3, r0
   10834:	strb	r3, [fp, #-33]	; 0xffffffdf
   10838:	ldrb	r3, [fp, #-13]
   1083c:	sub	r2, fp, #12
   10840:	add	r3, r2, r3
   10844:	ldrb	r3, [r3, #-44]	; 0xffffffd4
   10848:	ldrb	r2, [fp, #-33]	; 0xffffffdf
   1084c:	cmp	r2, r3
   10850:	beq	10864 <test_basic_sort+0x144>
   10854:	ldr	r0, [pc, #152]	; 108f4 <test_basic_sort+0x1d4>
   10858:	bl	0 <puts>
   1085c:	mvn	r3, #0
   10860:	b	108d0 <test_basic_sort+0x1b0>
   10864:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   10868:	mov	r1, r3
   1086c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10870:	bl	e84 <flatbuffers_uint8_vec_find>
   10874:	mov	r2, r0
   10878:	ldrb	r3, [fp, #-13]
   1087c:	cmp	r3, #3
   10880:	beq	1088c <test_basic_sort+0x16c>
   10884:	ldrb	r3, [fp, #-13]
   10888:	b	10890 <test_basic_sort+0x170>
   1088c:	mov	r3, #2
   10890:	cmp	r2, r3
   10894:	beq	108a8 <test_basic_sort+0x188>
   10898:	ldr	r0, [pc, #88]	; 108f8 <test_basic_sort+0x1d8>
   1089c:	bl	0 <puts>
   108a0:	mvn	r3, #0
   108a4:	b	108d0 <test_basic_sort+0x1b0>
   108a8:	ldrb	r3, [fp, #-13]
   108ac:	add	r3, r3, #1
   108b0:	strb	r3, [fp, #-13]
   108b4:	ldrb	r4, [fp, #-13]
   108b8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   108bc:	bl	de8 <flatbuffers_uint8_vec_len>
   108c0:	mov	r3, r0
   108c4:	cmp	r4, r3
   108c8:	bcc	10820 <test_basic_sort+0x100>
   108cc:	mov	r3, #0
   108d0:	mov	r0, r3
   108d4:	sub	sp, fp, #8
   108d8:	pop	{r4, fp, pc}
   108dc:	.word	0x000023b0
   108e0:	.word	0x00002420
   108e4:	.word	0x00000b1c
   108e8:	.word	0x00003900
   108ec:	.word	0x00001418
   108f0:	.word	0x000023b8
   108f4:	.word	0x000023e8
   108f8:	.word	0x00002400

000108fc <test_clone_slice>:
   108fc:	push	{fp, lr}
   10900:	add	fp, sp, #4
   10904:	sub	sp, sp, #80	; 0x50
   10908:	str	r0, [fp, #-80]	; 0xffffffb0
   1090c:	mvn	r3, #0
   10910:	str	r3, [fp, #-8]
   10914:	ldr	r2, [pc, #1608]	; 10f64 <test_clone_slice+0x668>
   10918:	sub	r3, fp, #72	; 0x48
   1091c:	ldm	r2, {r0, r1}
   10920:	str	r0, [r3]
   10924:	add	r3, r3, #4
   10928:	strh	r1, [r3]
   1092c:	add	r3, r3, #2
   10930:	lsr	r2, r1, #16
   10934:	strb	r2, [r3]
   10938:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1093c:	bl	0 <flatcc_builder_reset>
   10940:	ldr	r0, [fp, #-80]	; 0xffffffb0
   10944:	bl	a2ac <MyGame_Example_Monster_start_as_root>
   10948:	ldr	r1, [pc, #1560]	; 10f68 <test_clone_slice+0x66c>
   1094c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   10950:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
   10954:	sub	r3, fp, #72	; 0x48
   10958:	mov	r2, #7
   1095c:	mov	r1, r3
   10960:	ldr	r0, [fp, #-80]	; 0xffffffb0
   10964:	bl	9838 <MyGame_Example_Monster_testarrayofbools_create>
   10968:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1096c:	bl	9cf4 <MyGame_Example_Monster_test4_start>
   10970:	mov	r1, #2
   10974:	ldr	r0, [fp, #-80]	; 0xffffffb0
   10978:	bl	9de4 <MyGame_Example_Monster_test4_extend>
   1097c:	str	r0, [fp, #-12]
   10980:	ldr	r3, [fp, #-12]
   10984:	mov	r2, #22
   10988:	strh	r2, [r3]
   1098c:	ldr	r3, [fp, #-12]
   10990:	add	r3, r3, #4
   10994:	mov	r2, #44	; 0x2c
   10998:	strh	r2, [r3]
   1099c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   109a0:	bl	9d1c <MyGame_Example_Monster_test4_end>
   109a4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   109a8:	bl	8c84 <MyGame_Example_Monster_pos_start>
   109ac:	mov	r2, r0
   109b0:	ldr	r3, [pc, #1460]	; 10f6c <test_clone_slice+0x670>
   109b4:	str	r3, [r2]
   109b8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   109bc:	bl	a344 <MyGame_Example_Monster_end_as_root>
   109c0:	sub	r3, fp, #64	; 0x40
   109c4:	mov	r1, r3
   109c8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   109cc:	bl	0 <flatcc_builder_finalize_aligned_buffer>
   109d0:	str	r0, [fp, #-16]
   109d4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   109d8:	ldr	r3, [pc, #1424]	; 10f70 <test_clone_slice+0x674>
   109dc:	ldr	r3, [r3]
   109e0:	ldr	r1, [fp, #-16]
   109e4:	ldr	r0, [pc, #1416]	; 10f74 <test_clone_slice+0x678>
   109e8:	bl	cb40 <hexdump>
   109ec:	ldr	r0, [fp, #-16]
   109f0:	bl	2d78 <MyGame_Example_Monster_as_root>
   109f4:	str	r0, [fp, #-20]	; 0xffffffec
   109f8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   109fc:	bl	0 <flatcc_builder_reset>
   10a00:	ldr	r0, [fp, #-80]	; 0xffffffb0
   10a04:	bl	a2ac <MyGame_Example_Monster_start_as_root>
   10a08:	ldr	r0, [fp, #-20]	; 0xffffffec
   10a0c:	bl	35e4 <MyGame_Example_Monster_name>
   10a10:	str	r0, [fp, #-24]	; 0xffffffe8
   10a14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10a18:	cmp	r3, #0
   10a1c:	bne	10a34 <test_clone_slice+0x138>
   10a20:	ldr	r3, [pc, #1360]	; 10f78 <test_clone_slice+0x67c>
   10a24:	ldr	r2, [pc, #1360]	; 10f7c <test_clone_slice+0x680>
   10a28:	ldr	r1, [pc, #1360]	; 10f80 <test_clone_slice+0x684>
   10a2c:	ldr	r0, [pc, #1360]	; 10f84 <test_clone_slice+0x688>
   10a30:	bl	0 <__assert_fail>
   10a34:	ldr	r0, [fp, #-20]	; 0xffffffec
   10a38:	bl	4868 <MyGame_Example_Monster_testarrayofbools>
   10a3c:	str	r0, [fp, #-28]	; 0xffffffe4
   10a40:	ldr	r3, [fp, #-28]	; 0xffffffe4
   10a44:	cmp	r3, #0
   10a48:	bne	10a60 <test_clone_slice+0x164>
   10a4c:	ldr	r3, [pc, #1316]	; 10f78 <test_clone_slice+0x67c>
   10a50:	ldr	r2, [pc, #1328]	; 10f88 <test_clone_slice+0x68c>
   10a54:	ldr	r1, [pc, #1316]	; 10f80 <test_clone_slice+0x684>
   10a58:	ldr	r0, [pc, #1324]	; 10f8c <test_clone_slice+0x690>
   10a5c:	bl	0 <__assert_fail>
   10a60:	ldr	r0, [fp, #-20]	; 0xffffffec
   10a64:	bl	4e68 <MyGame_Example_Monster_test4>
   10a68:	str	r0, [fp, #-32]	; 0xffffffe0
   10a6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   10a70:	cmp	r3, #0
   10a74:	bne	10a8c <test_clone_slice+0x190>
   10a78:	ldr	r3, [pc, #1272]	; 10f78 <test_clone_slice+0x67c>
   10a7c:	ldr	r2, [pc, #1292]	; 10f90 <test_clone_slice+0x694>
   10a80:	ldr	r1, [pc, #1272]	; 10f80 <test_clone_slice+0x684>
   10a84:	ldr	r0, [pc, #1288]	; 10f94 <test_clone_slice+0x698>
   10a88:	bl	0 <__assert_fail>
   10a8c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   10a90:	ldr	r0, [fp, #-80]	; 0xffffffb0
   10a94:	bl	9030 <MyGame_Example_Monster_name_clone>
   10a98:	ldr	r0, [fp, #-80]	; 0xffffffb0
   10a9c:	bl	9640 <MyGame_Example_Monster_testarrayofstring_start>
   10aa0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   10aa4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   10aa8:	bl	96e8 <MyGame_Example_Monster_testarrayofstring_push_clone>
   10aac:	mov	r3, #20
   10ab0:	mov	r2, #4
   10ab4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   10ab8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   10abc:	bl	9728 <MyGame_Example_Monster_testarrayofstring_push_slice>
   10ac0:	mov	r3, #3
   10ac4:	mov	r2, #0
   10ac8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   10acc:	ldr	r0, [fp, #-80]	; 0xffffffb0
   10ad0:	bl	9728 <MyGame_Example_Monster_testarrayofstring_push_slice>
   10ad4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   10ad8:	bl	9668 <MyGame_Example_Monster_testarrayofstring_end>
   10adc:	ldr	r0, [fp, #-80]	; 0xffffffb0
   10ae0:	bl	802c <MyGame_Example_Monster_start>
   10ae4:	mov	r3, #20
   10ae8:	mov	r2, #2
   10aec:	ldr	r1, [fp, #-24]	; 0xffffffe8
   10af0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   10af4:	bl	9070 <MyGame_Example_Monster_name_slice>
   10af8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   10afc:	ldr	r0, [fp, #-80]	; 0xffffffb0
   10b00:	bl	9880 <MyGame_Example_Monster_testarrayofbools_clone>
   10b04:	mov	r3, #2
   10b08:	mov	r2, #1
   10b0c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   10b10:	ldr	r0, [fp, #-80]	; 0xffffffb0
   10b14:	bl	9d94 <MyGame_Example_Monster_test4_slice>
   10b18:	ldr	r0, [fp, #-80]	; 0xffffffb0
   10b1c:	bl	8058 <MyGame_Example_Monster_end>
   10b20:	str	r0, [fp, #-36]	; 0xffffffdc
   10b24:	sub	r3, fp, #60	; 0x3c
   10b28:	ldr	r1, [fp, #-36]	; 0xffffffdc
   10b2c:	mov	r0, r3
   10b30:	bl	82c0 <MyGame_Example_Any_as_Monster>
   10b34:	sub	r3, fp, #60	; 0x3c
   10b38:	ldm	r3, {r1, r2}
   10b3c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   10b40:	bl	9a08 <MyGame_Example_Monster_test_add>
   10b44:	mvn	r3, #0
   10b48:	mov	r2, #3
   10b4c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   10b50:	ldr	r0, [fp, #-80]	; 0xffffffb0
   10b54:	bl	98c0 <MyGame_Example_Monster_testarrayofbools_slice>
   10b58:	ldr	r0, [fp, #-20]	; 0xffffffec
   10b5c:	bl	2de0 <MyGame_Example_Monster_pos>
   10b60:	mov	r3, r0
   10b64:	mov	r1, r3
   10b68:	ldr	r0, [fp, #-80]	; 0xffffffb0
   10b6c:	bl	8cdc <MyGame_Example_Monster_pos_clone>
   10b70:	ldr	r1, [fp, #-32]	; 0xffffffe0
   10b74:	ldr	r0, [fp, #-80]	; 0xffffffb0
   10b78:	bl	9d54 <MyGame_Example_Monster_test4_clone>
   10b7c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   10b80:	bl	a344 <MyGame_Example_Monster_end_as_root>
   10b84:	sub	r3, fp, #64	; 0x40
   10b88:	mov	r1, r3
   10b8c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   10b90:	bl	0 <flatcc_builder_get_direct_buffer>
   10b94:	str	r0, [fp, #-40]	; 0xffffffd8
   10b98:	ldr	r2, [fp, #-64]	; 0xffffffc0
   10b9c:	ldr	r3, [pc, #972]	; 10f70 <test_clone_slice+0x674>
   10ba0:	ldr	r3, [r3]
   10ba4:	ldr	r1, [fp, #-40]	; 0xffffffd8
   10ba8:	ldr	r0, [pc, #1000]	; 10f98 <test_clone_slice+0x69c>
   10bac:	bl	cb40 <hexdump>
   10bb0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   10bb4:	bl	2d78 <MyGame_Example_Monster_as_root>
   10bb8:	str	r0, [fp, #-44]	; 0xffffffd4
   10bbc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   10bc0:	bl	35e4 <MyGame_Example_Monster_name>
   10bc4:	mov	r3, r0
   10bc8:	ldr	r1, [pc, #920]	; 10f68 <test_clone_slice+0x66c>
   10bcc:	mov	r0, r3
   10bd0:	bl	0 <strcmp>
   10bd4:	mov	r3, r0
   10bd8:	cmp	r3, #0
   10bdc:	beq	10bec <test_clone_slice+0x2f0>
   10be0:	ldr	r0, [pc, #948]	; 10f9c <test_clone_slice+0x6a0>
   10be4:	bl	0 <puts>
   10be8:	b	10f48 <test_clone_slice+0x64c>
   10bec:	ldr	r0, [fp, #-44]	; 0xffffffd4
   10bf0:	bl	4770 <MyGame_Example_Monster_testarrayofstring>
   10bf4:	str	r0, [fp, #-48]	; 0xffffffd0
   10bf8:	mov	r1, #0
   10bfc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10c00:	bl	a84 <flatbuffers_string_vec_at>
   10c04:	mov	r3, r0
   10c08:	ldr	r1, [pc, #856]	; 10f68 <test_clone_slice+0x66c>
   10c0c:	mov	r0, r3
   10c10:	bl	0 <strcmp>
   10c14:	mov	r3, r0
   10c18:	cmp	r3, #0
   10c1c:	beq	10c2c <test_clone_slice+0x330>
   10c20:	ldr	r0, [pc, #888]	; 10fa0 <test_clone_slice+0x6a4>
   10c24:	bl	0 <puts>
   10c28:	b	10f48 <test_clone_slice+0x64c>
   10c2c:	mov	r1, #1
   10c30:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10c34:	bl	a84 <flatbuffers_string_vec_at>
   10c38:	mov	r3, r0
   10c3c:	mov	r0, r3
   10c40:	bl	9fc <flatbuffers_string_len>
   10c44:	mov	r3, r0
   10c48:	cmp	r3, #6
   10c4c:	beq	10c5c <test_clone_slice+0x360>
   10c50:	ldr	r0, [pc, #844]	; 10fa4 <test_clone_slice+0x6a8>
   10c54:	bl	0 <puts>
   10c58:	b	10f48 <test_clone_slice+0x64c>
   10c5c:	mov	r1, #1
   10c60:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10c64:	bl	a84 <flatbuffers_string_vec_at>
   10c68:	mov	r3, r0
   10c6c:	ldr	r1, [pc, #820]	; 10fa8 <test_clone_slice+0x6ac>
   10c70:	mov	r0, r3
   10c74:	bl	0 <strcmp>
   10c78:	mov	r3, r0
   10c7c:	cmp	r3, #0
   10c80:	beq	10c90 <test_clone_slice+0x394>
   10c84:	ldr	r0, [pc, #800]	; 10fac <test_clone_slice+0x6b0>
   10c88:	bl	0 <puts>
   10c8c:	b	10f48 <test_clone_slice+0x64c>
   10c90:	mov	r1, #2
   10c94:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10c98:	bl	a84 <flatbuffers_string_vec_at>
   10c9c:	mov	r3, r0
   10ca0:	mov	r0, r3
   10ca4:	bl	9fc <flatbuffers_string_len>
   10ca8:	mov	r3, r0
   10cac:	cmp	r3, #3
   10cb0:	beq	10cc0 <test_clone_slice+0x3c4>
   10cb4:	ldr	r0, [pc, #756]	; 10fb0 <test_clone_slice+0x6b4>
   10cb8:	bl	0 <puts>
   10cbc:	b	10f48 <test_clone_slice+0x64c>
   10cc0:	mov	r1, #2
   10cc4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   10cc8:	bl	a84 <flatbuffers_string_vec_at>
   10ccc:	mov	r3, r0
   10cd0:	ldr	r1, [pc, #732]	; 10fb4 <test_clone_slice+0x6b8>
   10cd4:	mov	r0, r3
   10cd8:	bl	0 <strcmp>
   10cdc:	mov	r3, r0
   10ce0:	cmp	r3, #0
   10ce4:	beq	10cf4 <test_clone_slice+0x3f8>
   10ce8:	ldr	r0, [pc, #712]	; 10fb8 <test_clone_slice+0x6bc>
   10cec:	bl	0 <puts>
   10cf0:	b	10f48 <test_clone_slice+0x64c>
   10cf4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   10cf8:	bl	4ce8 <MyGame_Example_Monster_test>
   10cfc:	str	r0, [fp, #-20]	; 0xffffffec
   10d00:	ldr	r3, [fp, #-20]	; 0xffffffec
   10d04:	cmp	r3, #0
   10d08:	bne	10d20 <test_clone_slice+0x424>
   10d0c:	ldr	r3, [pc, #612]	; 10f78 <test_clone_slice+0x67c>
   10d10:	mov	r2, #1664	; 0x680
   10d14:	ldr	r1, [pc, #612]	; 10f80 <test_clone_slice+0x684>
   10d18:	ldr	r0, [pc, #668]	; 10fbc <test_clone_slice+0x6c0>
   10d1c:	bl	0 <__assert_fail>
   10d20:	ldr	r0, [fp, #-20]	; 0xffffffec
   10d24:	bl	35e4 <MyGame_Example_Monster_name>
   10d28:	mov	r3, r0
   10d2c:	ldr	r1, [pc, #652]	; 10fc0 <test_clone_slice+0x6c4>
   10d30:	mov	r0, r3
   10d34:	bl	0 <strcmp>
   10d38:	mov	r3, r0
   10d3c:	cmp	r3, #0
   10d40:	beq	10d50 <test_clone_slice+0x454>
   10d44:	ldr	r0, [pc, #632]	; 10fc4 <test_clone_slice+0x6c8>
   10d48:	bl	0 <printf>
   10d4c:	b	10f48 <test_clone_slice+0x64c>
   10d50:	ldr	r0, [fp, #-20]	; 0xffffffec
   10d54:	bl	4868 <MyGame_Example_Monster_testarrayofbools>
   10d58:	str	r0, [fp, #-28]	; 0xffffffe4
   10d5c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10d60:	bl	d4c <flatbuffers_bool_vec_len>
   10d64:	mov	r3, r0
   10d68:	cmp	r3, #7
   10d6c:	beq	10d7c <test_clone_slice+0x480>
   10d70:	ldr	r0, [pc, #592]	; 10fc8 <test_clone_slice+0x6cc>
   10d74:	bl	0 <puts>
   10d78:	b	10f48 <test_clone_slice+0x64c>
   10d7c:	sub	r3, fp, #72	; 0x48
   10d80:	mov	r2, #7
   10d84:	mov	r1, r3
   10d88:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10d8c:	bl	0 <memcmp>
   10d90:	mov	r3, r0
   10d94:	cmp	r3, #0
   10d98:	beq	10da8 <test_clone_slice+0x4ac>
   10d9c:	ldr	r0, [pc, #552]	; 10fcc <test_clone_slice+0x6d0>
   10da0:	bl	0 <puts>
   10da4:	b	10f48 <test_clone_slice+0x64c>
   10da8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   10dac:	bl	4868 <MyGame_Example_Monster_testarrayofbools>
   10db0:	str	r0, [fp, #-28]	; 0xffffffe4
   10db4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10db8:	bl	d4c <flatbuffers_bool_vec_len>
   10dbc:	mov	r3, r0
   10dc0:	cmp	r3, #4
   10dc4:	beq	10dd4 <test_clone_slice+0x4d8>
   10dc8:	ldr	r0, [pc, #512]	; 10fd0 <test_clone_slice+0x6d4>
   10dcc:	bl	0 <puts>
   10dd0:	b	10f48 <test_clone_slice+0x64c>
   10dd4:	sub	r3, fp, #72	; 0x48
   10dd8:	add	r3, r3, #3
   10ddc:	mov	r2, #4
   10de0:	mov	r1, r3
   10de4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10de8:	bl	0 <memcmp>
   10dec:	mov	r3, r0
   10df0:	cmp	r3, #0
   10df4:	beq	10e04 <test_clone_slice+0x508>
   10df8:	ldr	r0, [pc, #468]	; 10fd4 <test_clone_slice+0x6d8>
   10dfc:	bl	0 <puts>
   10e00:	b	10f48 <test_clone_slice+0x64c>
   10e04:	ldr	r0, [fp, #-44]	; 0xffffffd4
   10e08:	bl	2de0 <MyGame_Example_Monster_pos>
   10e0c:	mov	r3, r0
   10e10:	vldr	s15, [r3]
   10e14:	vldr	s14, [pc, #324]	; 10f60 <test_clone_slice+0x664>
   10e18:	vcmp.f32	s15, s14
   10e1c:	vmrs	APSR_nzcv, fpscr
   10e20:	beq	10e30 <test_clone_slice+0x534>
   10e24:	ldr	r0, [pc, #428]	; 10fd8 <test_clone_slice+0x6dc>
   10e28:	bl	0 <puts>
   10e2c:	b	10f48 <test_clone_slice+0x64c>
   10e30:	ldr	r0, [fp, #-44]	; 0xffffffd4
   10e34:	bl	4e68 <MyGame_Example_Monster_test4>
   10e38:	str	r0, [fp, #-32]	; 0xffffffe0
   10e3c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   10e40:	bl	1d6c <MyGame_Example_Test_vec_len>
   10e44:	mov	r3, r0
   10e48:	cmp	r3, #2
   10e4c:	beq	10e5c <test_clone_slice+0x560>
   10e50:	ldr	r0, [pc, #388]	; 10fdc <test_clone_slice+0x6e0>
   10e54:	bl	0 <puts>
   10e58:	b	10f48 <test_clone_slice+0x64c>
   10e5c:	mov	r1, #0
   10e60:	ldr	r0, [fp, #-32]	; 0xffffffe0
   10e64:	bl	1ce8 <MyGame_Example_Test_vec_at>
   10e68:	str	r0, [fp, #-52]	; 0xffffffcc
   10e6c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   10e70:	bl	1db0 <MyGame_Example_Test_a>
   10e74:	mov	r3, r0
   10e78:	cmp	r3, #22
   10e7c:	beq	10e8c <test_clone_slice+0x590>
   10e80:	ldr	r0, [pc, #344]	; 10fe0 <test_clone_slice+0x6e4>
   10e84:	bl	0 <puts>
   10e88:	b	10f48 <test_clone_slice+0x64c>
   10e8c:	mov	r1, #0
   10e90:	ldr	r0, [fp, #-32]	; 0xffffffe0
   10e94:	bl	1ce8 <MyGame_Example_Test_vec_at>
   10e98:	mov	r3, r0
   10e9c:	ldrsh	r3, [r3]
   10ea0:	cmp	r3, #22
   10ea4:	beq	10eb4 <test_clone_slice+0x5b8>
   10ea8:	ldr	r0, [pc, #308]	; 10fe4 <test_clone_slice+0x6e8>
   10eac:	bl	0 <puts>
   10eb0:	b	10f48 <test_clone_slice+0x64c>
   10eb4:	mov	r1, #1
   10eb8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   10ebc:	bl	1ce8 <MyGame_Example_Test_vec_at>
   10ec0:	str	r0, [fp, #-52]	; 0xffffffcc
   10ec4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   10ec8:	bl	1db0 <MyGame_Example_Test_a>
   10ecc:	mov	r3, r0
   10ed0:	cmp	r3, #44	; 0x2c
   10ed4:	beq	10ee4 <test_clone_slice+0x5e8>
   10ed8:	ldr	r0, [pc, #264]	; 10fe8 <test_clone_slice+0x6ec>
   10edc:	bl	0 <puts>
   10ee0:	b	10f48 <test_clone_slice+0x64c>
   10ee4:	ldr	r0, [fp, #-20]	; 0xffffffec
   10ee8:	bl	4e68 <MyGame_Example_Monster_test4>
   10eec:	str	r0, [fp, #-32]	; 0xffffffe0
   10ef0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   10ef4:	bl	1d6c <MyGame_Example_Test_vec_len>
   10ef8:	mov	r3, r0
   10efc:	cmp	r3, #1
   10f00:	beq	10f10 <test_clone_slice+0x614>
   10f04:	ldr	r0, [pc, #224]	; 10fec <test_clone_slice+0x6f0>
   10f08:	bl	0 <puts>
   10f0c:	b	10f48 <test_clone_slice+0x64c>
   10f10:	mov	r1, #0
   10f14:	ldr	r0, [fp, #-32]	; 0xffffffe0
   10f18:	bl	1ce8 <MyGame_Example_Test_vec_at>
   10f1c:	str	r0, [fp, #-52]	; 0xffffffcc
   10f20:	ldr	r0, [fp, #-52]	; 0xffffffcc
   10f24:	bl	1db0 <MyGame_Example_Test_a>
   10f28:	mov	r3, r0
   10f2c:	cmp	r3, #44	; 0x2c
   10f30:	beq	10f40 <test_clone_slice+0x644>
   10f34:	ldr	r0, [pc, #180]	; 10ff0 <test_clone_slice+0x6f4>
   10f38:	bl	0 <puts>
   10f3c:	b	10f48 <test_clone_slice+0x64c>
   10f40:	mov	r3, #0
   10f44:	str	r3, [fp, #-8]
   10f48:	ldr	r0, [fp, #-16]
   10f4c:	bl	0 <flatcc_builder_aligned_free>
   10f50:	ldr	r3, [fp, #-8]
   10f54:	mov	r0, r3
   10f58:	sub	sp, fp, #4
   10f5c:	pop	{fp, pc}
   10f60:	.word	0xc2293333
   10f64:	.word	0x000026ec
   10f68:	.word	0x00002428
   10f6c:	.word	0xc2293333
   10f70:	.word	0x00000000
   10f74:	.word	0x00002434
   10f78:	.word	0x00003910
   10f7c:	.word	0x00000644
   10f80:	.word	0x00001418
   10f84:	.word	0x00002450
   10f88:	.word	0x00000646
   10f8c:	.word	0x00002458
   10f90:	.word	0x00000648
   10f94:	.word	0x00002460
   10f98:	.word	0x00002468
   10f9c:	.word	0x00002480
   10fa0:	.word	0x0000249c
   10fa4:	.word	0x000024bc
   10fa8:	.word	0x000024e0
   10fac:	.word	0x000024e8
   10fb0:	.word	0x00002504
   10fb4:	.word	0x00002524
   10fb8:	.word	0x00002528
   10fbc:	.word	0x00001474
   10fc0:	.word	0x00002540
   10fc4:	.word	0x0000254c
   10fc8:	.word	0x0000257c
   10fcc:	.word	0x00002598
   10fd0:	.word	0x000025b8
   10fd4:	.word	0x000025d4
   10fd8:	.word	0x000025f4
   10fdc:	.word	0x00002610
   10fe0:	.word	0x00002644
   10fe4:	.word	0x00002660
   10fe8:	.word	0x0000268c
   10fec:	.word	0x000026a8
   10ff0:	.word	0x000026c8

00010ff4 <test_create_add_field>:
   10ff4:	push	{fp, lr}
   10ff8:	add	fp, sp, #4
   10ffc:	sub	sp, sp, #40	; 0x28
   11000:	str	r0, [fp, #-32]	; 0xffffffe0
   11004:	mvn	r3, #0
   11008:	str	r3, [fp, #-8]
   1100c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11010:	bl	0 <flatcc_builder_reset>
   11014:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11018:	bl	a2ac <MyGame_Example_Monster_start_as_root>
   1101c:	ldr	r1, [pc, #212]	; 110f8 <test_create_add_field+0x104>
   11020:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11024:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
   11028:	ldr	r1, [pc, #204]	; 110fc <test_create_add_field+0x108>
   1102c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11030:	bl	72f8 <flatbuffers_string_create_str>
   11034:	mov	r1, r0
   11038:	mov	r3, #2
   1103c:	str	r3, [sp]
   11040:	mvn	r2, #99	; 0x63
   11044:	mvn	r3, #0
   11048:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1104c:	bl	a184 <MyGame_Example_Monster_testempty_create>
   11050:	mov	r1, #0
   11054:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11058:	bl	9948 <MyGame_Example_Monster_enemy_add>
   1105c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11060:	bl	a344 <MyGame_Example_Monster_end_as_root>
   11064:	sub	r3, fp, #24
   11068:	mov	r1, r3
   1106c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11070:	bl	0 <flatcc_builder_finalize_aligned_buffer>
   11074:	str	r0, [fp, #-12]
   11078:	ldr	r0, [fp, #-12]
   1107c:	bl	2d78 <MyGame_Example_Monster_as_root>
   11080:	str	r0, [fp, #-16]
   11084:	ldr	r0, [fp, #-16]
   11088:	bl	4b2c <MyGame_Example_Monster_enemy_is_present>
   1108c:	mov	r3, r0
   11090:	cmp	r3, #0
   11094:	beq	110a4 <test_create_add_field+0xb0>
   11098:	ldr	r0, [pc, #96]	; 11100 <test_create_add_field+0x10c>
   1109c:	bl	0 <puts>
   110a0:	b	110e0 <test_create_add_field+0xec>
   110a4:	ldr	r0, [fp, #-16]
   110a8:	bl	50d0 <MyGame_Example_Monster_testempty>
   110ac:	str	r0, [fp, #-20]	; 0xffffffec
   110b0:	ldr	r0, [fp, #-20]	; 0xffffffec
   110b4:	bl	264c <MyGame_Example_Stat_val>
   110b8:	mvn	r2, #99	; 0x63
   110bc:	mvn	r3, #0
   110c0:	cmp	r1, r3
   110c4:	cmpeq	r0, r2
   110c8:	beq	110d8 <test_create_add_field+0xe4>
   110cc:	ldr	r0, [pc, #48]	; 11104 <test_create_add_field+0x110>
   110d0:	bl	0 <puts>
   110d4:	b	110e0 <test_create_add_field+0xec>
   110d8:	mov	r3, #0
   110dc:	str	r3, [fp, #-8]
   110e0:	ldr	r0, [fp, #-12]
   110e4:	bl	0 <flatcc_builder_aligned_free>
   110e8:	ldr	r3, [fp, #-8]
   110ec:	mov	r0, r3
   110f0:	sub	sp, fp, #4
   110f4:	pop	{fp, pc}
   110f8:	.word	0x00000b1c
   110fc:	.word	0x000026f4
   11100:	.word	0x000026fc
   11104:	.word	0x0000272c

00011108 <test_union_vector>:
   11108:	push	{r4, fp, lr}
   1110c:	add	fp, sp, #8
   11110:	sub	sp, sp, #100	; 0x64
   11114:	str	r0, [fp, #-96]	; 0xffffffa0
   11118:	mvn	r3, #0
   1111c:	str	r3, [fp, #-16]
   11120:	ldr	r0, [fp, #-96]	; 0xffffffa0
   11124:	bl	0 <flatcc_builder_reset>
   11128:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1112c:	bl	a2ac <MyGame_Example_Monster_start_as_root>
   11130:	ldr	r1, [pc, #668]	; 113d4 <test_union_vector+0x2cc>
   11134:	ldr	r0, [fp, #-96]	; 0xffffffa0
   11138:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
   1113c:	mov	r3, #2
   11140:	str	r3, [sp]
   11144:	mov	r3, #2
   11148:	mov	r2, #2
   1114c:	mov	r1, #2
   11150:	ldr	r0, [fp, #-96]	; 0xffffffa0
   11154:	bl	890c <MyGame_Example_TestSimpleTableWithEnum_create>
   11158:	str	r0, [fp, #-20]	; 0xffffffec
   1115c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   11160:	bl	8398 <MyGame_Example_Any_vec_start>
   11164:	sub	r3, fp, #60	; 0x3c
   11168:	ldr	r1, [fp, #-20]	; 0xffffffec
   1116c:	mov	r0, r3
   11170:	bl	8308 <MyGame_Example_Any_as_TestSimpleTableWithEnum>
   11174:	sub	r3, fp, #60	; 0x3c
   11178:	ldm	r3, {r1, r2}
   1117c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   11180:	bl	83f0 <MyGame_Example_Any_vec_push>
   11184:	sub	r3, fp, #72	; 0x48
   11188:	ldr	r1, [fp, #-96]	; 0xffffffa0
   1118c:	mov	r0, r3
   11190:	bl	83c0 <MyGame_Example_Any_vec_end>
   11194:	ldr	r0, [fp, #-96]	; 0xffffffa0
   11198:	bl	9c20 <MyGame_Example_Monster_test_Alt_start>
   1119c:	sub	r3, fp, #72	; 0x48
   111a0:	ldm	r3, {r1, r2}
   111a4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   111a8:	bl	8bc4 <MyGame_Example_Alt_manyany_add>
   111ac:	ldr	r0, [fp, #-96]	; 0xffffffa0
   111b0:	bl	9c48 <MyGame_Example_Monster_test_Alt_end>
   111b4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   111b8:	bl	a344 <MyGame_Example_Monster_end_as_root>
   111bc:	sub	r3, fp, #64	; 0x40
   111c0:	mov	r1, r3
   111c4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   111c8:	bl	0 <flatcc_builder_finalize_aligned_buffer>
   111cc:	str	r0, [fp, #-24]	; 0xffffffe8
   111d0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   111d4:	mov	r1, r3
   111d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   111dc:	bl	c624 <MyGame_Example_Monster_verify_as_root>
   111e0:	str	r0, [fp, #-16]
   111e4:	ldr	r3, [fp, #-16]
   111e8:	cmp	r3, #0
   111ec:	beq	11210 <test_union_vector+0x108>
   111f0:	ldr	r0, [fp, #-16]
   111f4:	bl	0 <flatcc_verify_error_string>
   111f8:	mov	r3, r0
   111fc:	mov	r1, r3
   11200:	ldr	r0, [pc, #464]	; 113d8 <test_union_vector+0x2d0>
   11204:	bl	0 <printf>
   11208:	mvn	r3, #0
   1120c:	b	113c8 <test_union_vector+0x2c0>
   11210:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11214:	bl	2d78 <MyGame_Example_Monster_as_root>
   11218:	str	r0, [fp, #-28]	; 0xffffffe4
   1121c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11220:	bl	4bfc <MyGame_Example_Monster_test_type>
   11224:	mov	r3, r0
   11228:	cmp	r3, #4
   1122c:	beq	1123c <test_union_vector+0x134>
   11230:	ldr	r0, [pc, #420]	; 113dc <test_union_vector+0x2d4>
   11234:	bl	0 <printf>
   11238:	b	113bc <test_union_vector+0x2b4>
   1123c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11240:	bl	4ce8 <MyGame_Example_Monster_test>
   11244:	str	r0, [fp, #-32]	; 0xffffffe0
   11248:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1124c:	cmp	r3, #0
   11250:	beq	11268 <test_union_vector+0x160>
   11254:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11258:	bl	2adc <MyGame_Example_Alt_manyany_is_present>
   1125c:	mov	r3, r0
   11260:	cmp	r3, #0
   11264:	beq	11274 <test_union_vector+0x16c>
   11268:	ldr	r0, [pc, #368]	; 113e0 <test_union_vector+0x2d8>
   1126c:	bl	0 <puts>
   11270:	b	113bc <test_union_vector+0x2b4>
   11274:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11278:	bl	28e4 <MyGame_Example_Alt_manyany_type>
   1127c:	str	r0, [fp, #-36]	; 0xffffffdc
   11280:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11284:	bl	29e0 <MyGame_Example_Alt_manyany>
   11288:	str	r0, [fp, #-40]	; 0xffffffd8
   1128c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11290:	bl	207c <MyGame_Example_Any_vec_len>
   11294:	str	r0, [fp, #-44]	; 0xffffffd4
   11298:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1129c:	cmp	r3, #1
   112a0:	beq	112b0 <test_union_vector+0x1a8>
   112a4:	ldr	r0, [pc, #312]	; 113e4 <test_union_vector+0x2dc>
   112a8:	bl	0 <puts>
   112ac:	b	113bc <test_union_vector+0x2b4>
   112b0:	mov	r1, #0
   112b4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   112b8:	bl	1480 <flatbuffers_union_type_vec_at>
   112bc:	mov	r3, r0
   112c0:	cmp	r3, #2
   112c4:	beq	112d4 <test_union_vector+0x1cc>
   112c8:	ldr	r0, [pc, #280]	; 113e8 <test_union_vector+0x2e0>
   112cc:	bl	0 <puts>
   112d0:	b	113bc <test_union_vector+0x2b4>
   112d4:	mov	r1, #0
   112d8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   112dc:	bl	b48 <flatbuffers_generic_vec_at>
   112e0:	str	r0, [fp, #-48]	; 0xffffffd0
   112e4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   112e8:	cmp	r3, #0
   112ec:	bne	112fc <test_union_vector+0x1f4>
   112f0:	ldr	r0, [pc, #244]	; 113ec <test_union_vector+0x2e4>
   112f4:	bl	0 <puts>
   112f8:	b	113bc <test_union_vector+0x2b4>
   112fc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11300:	bl	248c <MyGame_Example_TestSimpleTableWithEnum_color>
   11304:	mov	r3, r0
   11308:	str	r3, [fp, #-52]	; 0xffffffcc
   1130c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11310:	cmp	r3, #2
   11314:	beq	11328 <test_union_vector+0x220>
   11318:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1131c:	ldr	r0, [pc, #204]	; 113f0 <test_union_vector+0x2e8>
   11320:	bl	0 <printf>
   11324:	b	113bc <test_union_vector+0x2b4>
   11328:	sub	r3, fp, #80	; 0x50
   1132c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   11330:	mov	r0, r3
   11334:	bl	2bb0 <MyGame_Example_Alt_manyany_union>
   11338:	sub	r3, fp, #80	; 0x50
   1133c:	ldm	r3, {r0, r1}
   11340:	bl	20a4 <MyGame_Example_Any_union_vec_len>
   11344:	mov	r3, r0
   11348:	cmp	r3, #1
   1134c:	beq	1135c <test_union_vector+0x254>
   11350:	ldr	r0, [pc, #156]	; 113f4 <test_union_vector+0x2ec>
   11354:	bl	0 <puts>
   11358:	b	113bc <test_union_vector+0x2b4>
   1135c:	sub	r0, fp, #88	; 0x58
   11360:	mov	r3, #0
   11364:	sub	r2, fp, #80	; 0x50
   11368:	ldm	r2, {r1, r2}
   1136c:	bl	20d4 <MyGame_Example_Any_union_vec_at>
   11370:	ldrb	r4, [fp, #-88]	; 0xffffffa8
   11374:	mov	r1, #0
   11378:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1137c:	bl	1480 <flatbuffers_union_type_vec_at>
   11380:	mov	r3, r0
   11384:	cmp	r4, r3
   11388:	beq	11398 <test_union_vector+0x290>
   1138c:	ldr	r0, [pc, #100]	; 113f8 <test_union_vector+0x2f0>
   11390:	bl	0 <puts>
   11394:	b	113bc <test_union_vector+0x2b4>
   11398:	ldr	r2, [fp, #-84]	; 0xffffffac
   1139c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   113a0:	cmp	r2, r3
   113a4:	beq	113b4 <test_union_vector+0x2ac>
   113a8:	ldr	r0, [pc, #76]	; 113fc <test_union_vector+0x2f4>
   113ac:	bl	0 <puts>
   113b0:	b	113bc <test_union_vector+0x2b4>
   113b4:	mov	r3, #0
   113b8:	str	r3, [fp, #-16]
   113bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   113c0:	bl	0 <flatcc_builder_aligned_free>
   113c4:	ldr	r3, [fp, #-16]
   113c8:	mov	r0, r3
   113cc:	sub	sp, fp, #8
   113d0:	pop	{r4, fp, pc}
   113d4:	.word	0x00002740
   113d8:	.word	0x00002748
   113dc:	.word	0x00002784
   113e0:	.word	0x000027a8
   113e4:	.word	0x000027d0
   113e8:	.word	0x000027f8
   113ec:	.word	0x00002828
   113f0:	.word	0x00002838
   113f4:	.word	0x00002858
   113f8:	.word	0x0000289c
   113fc:	.word	0x000028b8

00011400 <test_mixed_type_union>:
   11400:	push	{fp, lr}
   11404:	add	fp, sp, #4
   11408:	sub	sp, sp, #96	; 0x60
   1140c:	str	r0, [fp, #-88]	; 0xffffffa8
   11410:	mvn	r3, #0
   11414:	str	r3, [fp, #-8]
   11418:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1141c:	bl	0 <flatcc_builder_reset>
   11420:	ldr	r0, [fp, #-88]	; 0xffffffa8
   11424:	bl	b3d8 <Fantasy_Movie_start_as_root>
   11428:	mov	r1, #10
   1142c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   11430:	bl	7d84 <Fantasy_BookReader_create>
   11434:	str	r0, [fp, #-12]
   11438:	mov	r1, #22
   1143c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   11440:	bl	7c70 <Fantasy_Rapunzel_create>
   11444:	str	r0, [fp, #-16]
   11448:	sub	r3, fp, #64	; 0x40
   1144c:	ldr	r1, [fp, #-16]
   11450:	mov	r0, r3
   11454:	bl	8470 <Fantasy_Character_as_Rapunzel>
   11458:	mov	r1, #19
   1145c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   11460:	bl	acb0 <Fantasy_Movie_main_character_Rapunzel_create>
   11464:	ldr	r1, [fp, #-16]
   11468:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1146c:	bl	aff8 <Fantasy_Movie_cameo_Rapunzel_add>
   11470:	mov	r1, #42	; 0x2a
   11474:	ldr	r0, [fp, #-88]	; 0xffffffa8
   11478:	bl	aba0 <Fantasy_Attacker_create>
   1147c:	str	r0, [fp, #-20]	; 0xffffffec
   11480:	ldr	r1, [fp, #-20]	; 0xffffffec
   11484:	ldr	r0, [fp, #-88]	; 0xffffffa8
   11488:	bl	add0 <Fantasy_Movie_antagonist_MuLan_add>
   1148c:	ldr	r1, [pc, #1980]	; 11c50 <test_mixed_type_union+0x850>
   11490:	ldr	r0, [fp, #-88]	; 0xffffffa8
   11494:	bl	af08 <Fantasy_Movie_side_kick_Other_create_str>
   11498:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1149c:	bl	b0fc <Fantasy_Movie_characters_start>
   114a0:	sub	r3, fp, #64	; 0x40
   114a4:	ldm	r3, {r1, r2}
   114a8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   114ac:	bl	b164 <Fantasy_Movie_characters_push>
   114b0:	ldr	r1, [fp, #-20]	; 0xffffffec
   114b4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   114b8:	bl	b19c <Fantasy_Movie_characters_MuLan_push>
   114bc:	mov	r1, #1
   114c0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   114c4:	bl	b1e0 <Fantasy_Movie_characters_MuLan_push_create>
   114c8:	ldr	r1, [pc, #1924]	; 11c54 <test_mixed_type_union+0x854>
   114cc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   114d0:	bl	72f8 <flatbuffers_string_create_str>
   114d4:	mov	r2, r0
   114d8:	sub	r3, fp, #52	; 0x34
   114dc:	mov	r1, r2
   114e0:	mov	r0, r3
   114e4:	bl	8500 <Fantasy_Character_as_Other>
   114e8:	sub	r3, fp, #52	; 0x34
   114ec:	ldm	r3, {r1, r2}
   114f0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   114f4:	bl	8548 <Fantasy_Character_vec_push>
   114f8:	ldr	r1, [fp, #-12]
   114fc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   11500:	bl	b2a8 <Fantasy_Movie_characters_Belle_push>
   11504:	ldr	r0, [fp, #-88]	; 0xffffffa8
   11508:	bl	b234 <Fantasy_Movie_characters_Belle_push_start>
   1150c:	str	r0, [fp, #-24]	; 0xffffffe8
   11510:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11514:	mov	r2, #3
   11518:	str	r2, [r3]
   1151c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   11520:	bl	b25c <Fantasy_Movie_characters_Belle_push_end>
   11524:	mov	r1, #1
   11528:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1152c:	bl	7d84 <Fantasy_BookReader_create>
   11530:	mov	r3, r0
   11534:	mov	r1, r3
   11538:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1153c:	bl	b2a8 <Fantasy_Movie_characters_Belle_push>
   11540:	mov	r1, #2
   11544:	ldr	r0, [fp, #-88]	; 0xffffffa8
   11548:	bl	b2ec <Fantasy_Movie_characters_Belle_push_create>
   1154c:	ldr	r1, [pc, #1796]	; 11c58 <test_mixed_type_union+0x858>
   11550:	ldr	r0, [fp, #-88]	; 0xffffffa8
   11554:	bl	72f8 <flatbuffers_string_create_str>
   11558:	mov	r3, r0
   1155c:	mov	r1, r3
   11560:	ldr	r0, [fp, #-88]	; 0xffffffa8
   11564:	bl	b340 <Fantasy_Movie_characters_Other_push>
   11568:	ldr	r1, [pc, #1772]	; 11c5c <test_mixed_type_union+0x85c>
   1156c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   11570:	bl	b384 <Fantasy_Movie_characters_Other_push_create_str>
   11574:	ldr	r0, [fp, #-88]	; 0xffffffa8
   11578:	bl	b124 <Fantasy_Movie_characters_end>
   1157c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   11580:	bl	b424 <Fantasy_Movie_end_as_root>
   11584:	sub	r3, fp, #56	; 0x38
   11588:	mov	r1, r3
   1158c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   11590:	bl	0 <flatcc_builder_finalize_aligned_buffer>
   11594:	str	r0, [fp, #-28]	; 0xffffffe4
   11598:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1159c:	ldr	r3, [pc, #1724]	; 11c60 <test_mixed_type_union+0x860>
   115a0:	ldr	r3, [r3]
   115a4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   115a8:	ldr	r0, [pc, #1716]	; 11c64 <test_mixed_type_union+0x864>
   115ac:	bl	cb40 <hexdump>
   115b0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   115b4:	mov	r1, r3
   115b8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   115bc:	bl	cb00 <Fantasy_Movie_verify_as_root>
   115c0:	str	r0, [fp, #-8]
   115c4:	ldr	r3, [fp, #-8]
   115c8:	cmp	r3, #0
   115cc:	beq	115f0 <test_mixed_type_union+0x1f0>
   115d0:	ldr	r0, [fp, #-8]
   115d4:	bl	0 <flatcc_verify_error_string>
   115d8:	mov	r3, r0
   115dc:	mov	r1, r3
   115e0:	ldr	r0, [pc, #1664]	; 11c68 <test_mixed_type_union+0x868>
   115e4:	bl	0 <printf>
   115e8:	mvn	r3, #0
   115ec:	b	11c44 <test_mixed_type_union+0x844>
   115f0:	mvn	r3, #0
   115f4:	str	r3, [fp, #-8]
   115f8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   115fc:	bl	5f7c <Fantasy_Movie_as_root>
   11600:	str	r0, [fp, #-32]	; 0xffffffe0
   11604:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11608:	bl	61c8 <Fantasy_Movie_main_character_is_present>
   1160c:	mov	r3, r0
   11610:	cmp	r3, #0
   11614:	bne	11624 <test_mixed_type_union+0x224>
   11618:	ldr	r0, [pc, #1612]	; 11c6c <test_mixed_type_union+0x86c>
   1161c:	bl	0 <puts>
   11620:	b	11c38 <test_mixed_type_union+0x838>
   11624:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11628:	bl	6b7c <Fantasy_Movie_characters_is_present>
   1162c:	mov	r3, r0
   11630:	cmp	r3, #0
   11634:	bne	11644 <test_mixed_type_union+0x244>
   11638:	ldr	r0, [pc, #1584]	; 11c70 <test_mixed_type_union+0x870>
   1163c:	bl	0 <puts>
   11640:	b	11c38 <test_mixed_type_union+0x838>
   11644:	sub	r3, fp, #80	; 0x50
   11648:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1164c:	mov	r0, r3
   11650:	bl	629c <Fantasy_Movie_main_character_union>
   11654:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   11658:	cmp	r3, #8
   1165c:	beq	1166c <test_mixed_type_union+0x26c>
   11660:	ldr	r0, [pc, #1548]	; 11c74 <test_mixed_type_union+0x874>
   11664:	bl	0 <puts>
   11668:	b	11c38 <test_mixed_type_union+0x838>
   1166c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   11670:	str	r3, [fp, #-36]	; 0xffffffdc
   11674:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11678:	cmp	r3, #0
   1167c:	bne	11688 <test_mixed_type_union+0x288>
   11680:	ldr	r0, [pc, #1520]	; 11c78 <test_mixed_type_union+0x878>
   11684:	bl	0 <puts>
   11688:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1168c:	bl	203c <Fantasy_Rapunzel_hair_length>
   11690:	mov	r3, r0
   11694:	cmp	r3, #19
   11698:	bls	116a8 <test_mixed_type_union+0x2a8>
   1169c:	ldr	r0, [pc, #1496]	; 11c7c <test_mixed_type_union+0x87c>
   116a0:	bl	0 <puts>
   116a4:	b	11c38 <test_mixed_type_union+0x838>
   116a8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   116ac:	bl	203c <Fantasy_Rapunzel_hair_length>
   116b0:	mov	r3, r0
   116b4:	cmp	r3, #18
   116b8:	bhi	116c8 <test_mixed_type_union+0x2c8>
   116bc:	ldr	r0, [pc, #1468]	; 11c80 <test_mixed_type_union+0x880>
   116c0:	bl	0 <puts>
   116c4:	b	11c38 <test_mixed_type_union+0x838>
   116c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   116cc:	bl	67a0 <Fantasy_Movie_cameo_type>
   116d0:	mov	r3, r0
   116d4:	cmp	r3, #8
   116d8:	beq	116e8 <test_mixed_type_union+0x2e8>
   116dc:	ldr	r0, [pc, #1440]	; 11c84 <test_mixed_type_union+0x884>
   116e0:	bl	0 <puts>
   116e4:	b	11c38 <test_mixed_type_union+0x838>
   116e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   116ec:	bl	688c <Fantasy_Movie_cameo>
   116f0:	str	r0, [fp, #-36]	; 0xffffffdc
   116f4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   116f8:	cmp	r3, #0
   116fc:	bne	1170c <test_mixed_type_union+0x30c>
   11700:	ldr	r0, [pc, #1408]	; 11c88 <test_mixed_type_union+0x888>
   11704:	bl	0 <puts>
   11708:	b	11c38 <test_mixed_type_union+0x838>
   1170c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11710:	bl	203c <Fantasy_Rapunzel_hair_length>
   11714:	mov	r3, r0
   11718:	cmp	r3, #22
   1171c:	beq	1172c <test_mixed_type_union+0x32c>
   11720:	ldr	r0, [pc, #1380]	; 11c8c <test_mixed_type_union+0x88c>
   11724:	bl	0 <puts>
   11728:	b	11c38 <test_mixed_type_union+0x838>
   1172c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11730:	bl	6324 <Fantasy_Movie_antagonist_type>
   11734:	mov	r3, r0
   11738:	cmp	r3, #2
   1173c:	beq	1174c <test_mixed_type_union+0x34c>
   11740:	ldr	r0, [pc, #1352]	; 11c90 <test_mixed_type_union+0x890>
   11744:	bl	0 <puts>
   11748:	b	11c38 <test_mixed_type_union+0x838>
   1174c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11750:	bl	640c <Fantasy_Movie_antagonist>
   11754:	str	r0, [fp, #-40]	; 0xffffffd8
   11758:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1175c:	cmp	r3, #0
   11760:	beq	11778 <test_mixed_type_union+0x378>
   11764:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11768:	bl	5d48 <Fantasy_Attacker_sword_attack_damage>
   1176c:	mov	r3, r0
   11770:	cmp	r3, #42	; 0x2a
   11774:	beq	11784 <test_mixed_type_union+0x384>
   11778:	ldr	r0, [pc, #1300]	; 11c94 <test_mixed_type_union+0x894>
   1177c:	bl	0 <puts>
   11780:	b	11c38 <test_mixed_type_union+0x838>
   11784:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11788:	bl	6500 <Fantasy_Movie_side_kick_type>
   1178c:	mov	r3, r0
   11790:	cmp	r3, #11
   11794:	beq	117a4 <test_mixed_type_union+0x3a4>
   11798:	ldr	r0, [pc, #1272]	; 11c98 <test_mixed_type_union+0x898>
   1179c:	bl	0 <puts>
   117a0:	b	11c38 <test_mixed_type_union+0x838>
   117a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   117a8:	bl	65ec <Fantasy_Movie_side_kick>
   117ac:	mov	r3, r0
   117b0:	mov	r0, r3
   117b4:	bl	b08 <flatbuffers_string_cast_from_generic>
   117b8:	str	r0, [fp, #-44]	; 0xffffffd4
   117bc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   117c0:	cmp	r3, #0
   117c4:	bne	117d4 <test_mixed_type_union+0x3d4>
   117c8:	ldr	r0, [pc, #1228]	; 11c9c <test_mixed_type_union+0x89c>
   117cc:	bl	0 <puts>
   117d0:	b	11c38 <test_mixed_type_union+0x838>
   117d4:	ldr	r1, [pc, #1140]	; 11c50 <test_mixed_type_union+0x850>
   117d8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   117dc:	bl	0 <strcmp>
   117e0:	mov	r3, r0
   117e4:	cmp	r3, #0
   117e8:	beq	117fc <test_mixed_type_union+0x3fc>
   117ec:	ldr	r1, [fp, #-44]	; 0xffffffd4
   117f0:	ldr	r0, [pc, #1192]	; 11ca0 <test_mixed_type_union+0x8a0>
   117f4:	bl	0 <printf>
   117f8:	b	11c38 <test_mixed_type_union+0x838>
   117fc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11800:	bl	676c <Fantasy_Movie_side_kick_as_string>
   11804:	str	r0, [fp, #-44]	; 0xffffffd4
   11808:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1180c:	cmp	r3, #0
   11810:	bne	11820 <test_mixed_type_union+0x420>
   11814:	ldr	r0, [pc, #1152]	; 11c9c <test_mixed_type_union+0x89c>
   11818:	bl	0 <puts>
   1181c:	b	11c38 <test_mixed_type_union+0x838>
   11820:	ldr	r1, [pc, #1064]	; 11c50 <test_mixed_type_union+0x850>
   11824:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11828:	bl	0 <strcmp>
   1182c:	mov	r3, r0
   11830:	cmp	r3, #0
   11834:	beq	11848 <test_mixed_type_union+0x448>
   11838:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1183c:	ldr	r0, [pc, #1120]	; 11ca4 <test_mixed_type_union+0x8a4>
   11840:	bl	0 <printf>
   11844:	b	11c38 <test_mixed_type_union+0x838>
   11848:	sub	r3, fp, #100	; 0x64
   1184c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   11850:	mov	r0, r3
   11854:	bl	66e4 <Fantasy_Movie_side_kick_union>
   11858:	sub	r3, fp, #80	; 0x50
   1185c:	sub	r2, fp, #100	; 0x64
   11860:	ldm	r2, {r0, r1}
   11864:	stm	r3, {r0, r1}
   11868:	sub	r3, fp, #80	; 0x50
   1186c:	ldm	r3, {r0, r1}
   11870:	bl	c4c <flatbuffers_string_cast_from_union>
   11874:	str	r0, [fp, #-44]	; 0xffffffd4
   11878:	ldr	r1, [pc, #976]	; 11c50 <test_mixed_type_union+0x850>
   1187c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11880:	bl	0 <strcmp>
   11884:	mov	r3, r0
   11888:	cmp	r3, #0
   1188c:	beq	118a0 <test_mixed_type_union+0x4a0>
   11890:	ldr	r1, [fp, #-44]	; 0xffffffd4
   11894:	ldr	r0, [pc, #1036]	; 11ca8 <test_mixed_type_union+0x8a8>
   11898:	bl	0 <printf>
   1189c:	b	11c38 <test_mixed_type_union+0x838>
   118a0:	sub	r3, fp, #72	; 0x48
   118a4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   118a8:	mov	r0, r3
   118ac:	bl	6c50 <Fantasy_Movie_characters_union>
   118b0:	sub	r0, fp, #100	; 0x64
   118b4:	mov	r3, #0
   118b8:	sub	r2, fp, #72	; 0x48
   118bc:	ldm	r2, {r1, r2}
   118c0:	bl	5e64 <Fantasy_Character_union_vec_at>
   118c4:	sub	r3, fp, #80	; 0x50
   118c8:	sub	r2, fp, #100	; 0x64
   118cc:	ldm	r2, {r0, r1}
   118d0:	stm	r3, {r0, r1}
   118d4:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   118d8:	cmp	r3, #8
   118dc:	beq	118ec <test_mixed_type_union+0x4ec>
   118e0:	ldr	r0, [pc, #964]	; 11cac <test_mixed_type_union+0x8ac>
   118e4:	bl	0 <printf>
   118e8:	b	11c38 <test_mixed_type_union+0x838>
   118ec:	sub	r0, fp, #100	; 0x64
   118f0:	mov	r3, #1
   118f4:	sub	r2, fp, #72	; 0x48
   118f8:	ldm	r2, {r1, r2}
   118fc:	bl	5e64 <Fantasy_Character_union_vec_at>
   11900:	sub	r3, fp, #80	; 0x50
   11904:	sub	r2, fp, #100	; 0x64
   11908:	ldm	r2, {r0, r1}
   1190c:	stm	r3, {r0, r1}
   11910:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   11914:	cmp	r3, #2
   11918:	beq	11928 <test_mixed_type_union+0x528>
   1191c:	ldr	r0, [pc, #908]	; 11cb0 <test_mixed_type_union+0x8b0>
   11920:	bl	0 <printf>
   11924:	b	11c38 <test_mixed_type_union+0x838>
   11928:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1192c:	str	r3, [fp, #-40]	; 0xffffffd8
   11930:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11934:	bl	5d48 <Fantasy_Attacker_sword_attack_damage>
   11938:	mov	r3, r0
   1193c:	cmp	r3, #42	; 0x2a
   11940:	beq	11950 <test_mixed_type_union+0x550>
   11944:	ldr	r0, [pc, #872]	; 11cb4 <test_mixed_type_union+0x8b4>
   11948:	bl	0 <printf>
   1194c:	b	11c38 <test_mixed_type_union+0x838>
   11950:	sub	r0, fp, #100	; 0x64
   11954:	mov	r3, #2
   11958:	sub	r2, fp, #72	; 0x48
   1195c:	ldm	r2, {r1, r2}
   11960:	bl	5e64 <Fantasy_Character_union_vec_at>
   11964:	sub	r3, fp, #80	; 0x50
   11968:	sub	r2, fp, #100	; 0x64
   1196c:	ldm	r2, {r0, r1}
   11970:	stm	r3, {r0, r1}
   11974:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   11978:	cmp	r3, #2
   1197c:	beq	1198c <test_mixed_type_union+0x58c>
   11980:	ldr	r0, [pc, #816]	; 11cb8 <test_mixed_type_union+0x8b8>
   11984:	bl	0 <printf>
   11988:	b	11c38 <test_mixed_type_union+0x838>
   1198c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   11990:	str	r3, [fp, #-40]	; 0xffffffd8
   11994:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11998:	bl	5d48 <Fantasy_Attacker_sword_attack_damage>
   1199c:	mov	r3, r0
   119a0:	cmp	r3, #1
   119a4:	beq	119b4 <test_mixed_type_union+0x5b4>
   119a8:	ldr	r0, [pc, #780]	; 11cbc <test_mixed_type_union+0x8bc>
   119ac:	bl	0 <printf>
   119b0:	b	11c38 <test_mixed_type_union+0x838>
   119b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   119b8:	bl	6984 <Fantasy_Movie_characters_type>
   119bc:	mov	r3, r0
   119c0:	mov	r1, #3
   119c4:	mov	r0, r3
   119c8:	bl	1480 <flatbuffers_union_type_vec_at>
   119cc:	mov	r3, r0
   119d0:	cmp	r3, #11
   119d4:	beq	119e4 <test_mixed_type_union+0x5e4>
   119d8:	ldr	r0, [pc, #736]	; 11cc0 <test_mixed_type_union+0x8c0>
   119dc:	bl	0 <puts>
   119e0:	b	11c38 <test_mixed_type_union+0x838>
   119e4:	mov	r2, #3
   119e8:	sub	r3, fp, #72	; 0x48
   119ec:	ldm	r3, {r0, r1}
   119f0:	bl	5f44 <Fantasy_Character_union_vec_at_as_string>
   119f4:	str	r0, [fp, #-44]	; 0xffffffd4
   119f8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   119fc:	cmp	r3, #0
   11a00:	beq	11a1c <test_mixed_type_union+0x61c>
   11a04:	ldr	r1, [pc, #584]	; 11c54 <test_mixed_type_union+0x854>
   11a08:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11a0c:	bl	0 <strcmp>
   11a10:	mov	r3, r0
   11a14:	cmp	r3, #0
   11a18:	beq	11a28 <test_mixed_type_union+0x628>
   11a1c:	ldr	r0, [pc, #672]	; 11cc4 <test_mixed_type_union+0x8c4>
   11a20:	bl	0 <puts>
   11a24:	b	11c38 <test_mixed_type_union+0x838>
   11a28:	sub	r0, fp, #100	; 0x64
   11a2c:	mov	r3, #3
   11a30:	sub	r2, fp, #72	; 0x48
   11a34:	ldm	r2, {r1, r2}
   11a38:	bl	5e64 <Fantasy_Character_union_vec_at>
   11a3c:	sub	r3, fp, #80	; 0x50
   11a40:	sub	r2, fp, #100	; 0x64
   11a44:	ldm	r2, {r0, r1}
   11a48:	stm	r3, {r0, r1}
   11a4c:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   11a50:	cmp	r3, #11
   11a54:	beq	11a64 <test_mixed_type_union+0x664>
   11a58:	ldr	r0, [pc, #616]	; 11cc8 <test_mixed_type_union+0x8c8>
   11a5c:	bl	0 <printf>
   11a60:	b	11c38 <test_mixed_type_union+0x838>
   11a64:	sub	r3, fp, #80	; 0x50
   11a68:	ldm	r3, {r0, r1}
   11a6c:	bl	c4c <flatbuffers_string_cast_from_union>
   11a70:	str	r0, [fp, #-44]	; 0xffffffd4
   11a74:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11a78:	cmp	r3, #0
   11a7c:	beq	11a98 <test_mixed_type_union+0x698>
   11a80:	ldr	r1, [pc, #460]	; 11c54 <test_mixed_type_union+0x854>
   11a84:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11a88:	bl	0 <strcmp>
   11a8c:	mov	r3, r0
   11a90:	cmp	r3, #0
   11a94:	beq	11aa4 <test_mixed_type_union+0x6a4>
   11a98:	ldr	r0, [pc, #556]	; 11ccc <test_mixed_type_union+0x8cc>
   11a9c:	bl	0 <puts>
   11aa0:	b	11c38 <test_mixed_type_union+0x838>
   11aa4:	sub	r0, fp, #100	; 0x64
   11aa8:	mov	r3, #4
   11aac:	sub	r2, fp, #72	; 0x48
   11ab0:	ldm	r2, {r1, r2}
   11ab4:	bl	5e64 <Fantasy_Character_union_vec_at>
   11ab8:	sub	r3, fp, #80	; 0x50
   11abc:	sub	r2, fp, #100	; 0x64
   11ac0:	ldm	r2, {r0, r1}
   11ac4:	stm	r3, {r0, r1}
   11ac8:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   11acc:	cmp	r3, #9
   11ad0:	beq	11ae0 <test_mixed_type_union+0x6e0>
   11ad4:	ldr	r0, [pc, #500]	; 11cd0 <test_mixed_type_union+0x8d0>
   11ad8:	bl	0 <printf>
   11adc:	b	11c38 <test_mixed_type_union+0x838>
   11ae0:	sub	r0, fp, #100	; 0x64
   11ae4:	mov	r3, #5
   11ae8:	sub	r2, fp, #72	; 0x48
   11aec:	ldm	r2, {r1, r2}
   11af0:	bl	5e64 <Fantasy_Character_union_vec_at>
   11af4:	sub	r3, fp, #80	; 0x50
   11af8:	sub	r2, fp, #100	; 0x64
   11afc:	ldm	r2, {r0, r1}
   11b00:	stm	r3, {r0, r1}
   11b04:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   11b08:	cmp	r3, #9
   11b0c:	beq	11b1c <test_mixed_type_union+0x71c>
   11b10:	ldr	r0, [pc, #444]	; 11cd4 <test_mixed_type_union+0x8d4>
   11b14:	bl	0 <printf>
   11b18:	b	11c38 <test_mixed_type_union+0x838>
   11b1c:	sub	r0, fp, #100	; 0x64
   11b20:	mov	r3, #6
   11b24:	sub	r2, fp, #72	; 0x48
   11b28:	ldm	r2, {r1, r2}
   11b2c:	bl	5e64 <Fantasy_Character_union_vec_at>
   11b30:	sub	r3, fp, #80	; 0x50
   11b34:	sub	r2, fp, #100	; 0x64
   11b38:	ldm	r2, {r0, r1}
   11b3c:	stm	r3, {r0, r1}
   11b40:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   11b44:	cmp	r3, #9
   11b48:	beq	11b58 <test_mixed_type_union+0x758>
   11b4c:	ldr	r0, [pc, #388]	; 11cd8 <test_mixed_type_union+0x8d8>
   11b50:	bl	0 <printf>
   11b54:	b	11c38 <test_mixed_type_union+0x838>
   11b58:	sub	r0, fp, #100	; 0x64
   11b5c:	mov	r3, #7
   11b60:	sub	r2, fp, #72	; 0x48
   11b64:	ldm	r2, {r1, r2}
   11b68:	bl	5e64 <Fantasy_Character_union_vec_at>
   11b6c:	sub	r3, fp, #80	; 0x50
   11b70:	sub	r2, fp, #100	; 0x64
   11b74:	ldm	r2, {r0, r1}
   11b78:	stm	r3, {r0, r1}
   11b7c:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   11b80:	cmp	r3, #9
   11b84:	beq	11b94 <test_mixed_type_union+0x794>
   11b88:	ldr	r0, [pc, #332]	; 11cdc <test_mixed_type_union+0x8dc>
   11b8c:	bl	0 <printf>
   11b90:	b	11c38 <test_mixed_type_union+0x838>
   11b94:	sub	r0, fp, #100	; 0x64
   11b98:	mov	r3, #8
   11b9c:	sub	r2, fp, #72	; 0x48
   11ba0:	ldm	r2, {r1, r2}
   11ba4:	bl	5e64 <Fantasy_Character_union_vec_at>
   11ba8:	sub	r3, fp, #80	; 0x50
   11bac:	sub	r2, fp, #100	; 0x64
   11bb0:	ldm	r2, {r0, r1}
   11bb4:	stm	r3, {r0, r1}
   11bb8:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   11bbc:	cmp	r3, #11
   11bc0:	beq	11bd0 <test_mixed_type_union+0x7d0>
   11bc4:	ldr	r0, [pc, #276]	; 11ce0 <test_mixed_type_union+0x8e0>
   11bc8:	bl	0 <printf>
   11bcc:	b	11c38 <test_mixed_type_union+0x838>
   11bd0:	sub	r0, fp, #100	; 0x64
   11bd4:	mov	r3, #9
   11bd8:	sub	r2, fp, #72	; 0x48
   11bdc:	ldm	r2, {r1, r2}
   11be0:	bl	5e64 <Fantasy_Character_union_vec_at>
   11be4:	sub	r3, fp, #80	; 0x50
   11be8:	sub	r2, fp, #100	; 0x64
   11bec:	ldm	r2, {r0, r1}
   11bf0:	stm	r3, {r0, r1}
   11bf4:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   11bf8:	cmp	r3, #11
   11bfc:	beq	11c0c <test_mixed_type_union+0x80c>
   11c00:	ldr	r0, [pc, #216]	; 11ce0 <test_mixed_type_union+0x8e0>
   11c04:	bl	0 <printf>
   11c08:	b	11c38 <test_mixed_type_union+0x838>
   11c0c:	sub	r3, fp, #72	; 0x48
   11c10:	ldm	r3, {r0, r1}
   11c14:	bl	5e34 <Fantasy_Character_union_vec_len>
   11c18:	mov	r3, r0
   11c1c:	cmp	r3, #10
   11c20:	beq	11c30 <test_mixed_type_union+0x830>
   11c24:	ldr	r0, [pc, #184]	; 11ce4 <test_mixed_type_union+0x8e4>
   11c28:	bl	0 <printf>
   11c2c:	b	11c38 <test_mixed_type_union+0x838>
   11c30:	mov	r3, #0
   11c34:	str	r3, [fp, #-8]
   11c38:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11c3c:	bl	0 <flatcc_builder_aligned_free>
   11c40:	ldr	r3, [fp, #-8]
   11c44:	mov	r0, r3
   11c48:	sub	sp, fp, #4
   11c4c:	pop	{fp, pc}
   11c50:	.word	0x000028d0
   11c54:	.word	0x000028d8
   11c58:	.word	0x000028e0
   11c5c:	.word	0x000028e8
   11c60:	.word	0x00000000
   11c64:	.word	0x000028f4
   11c68:	.word	0x00002904
   11c6c:	.word	0x00002954
   11c70:	.word	0x00002980
   11c74:	.word	0x000029ac
   11c78:	.word	0x000029c8
   11c7c:	.word	0x000029e0
   11c80:	.word	0x00002a08
   11c84:	.word	0x00002a38
   11c88:	.word	0x00002a6c
   11c8c:	.word	0x00002a9c
   11c90:	.word	0x00002acc
   11c94:	.word	0x00002ae4
   11c98:	.word	0x00002b08
   11c9c:	.word	0x00002b20
   11ca0:	.word	0x00002b3c
   11ca4:	.word	0x00002b60
   11ca8:	.word	0x00002b90
   11cac:	.word	0x00002bc0
   11cb0:	.word	0x00002be8
   11cb4:	.word	0x00002c0c
   11cb8:	.word	0x00002c40
   11cbc:	.word	0x00002c64
   11cc0:	.word	0x00002c98
   11cc4:	.word	0x00002cc8
   11cc8:	.word	0x00002cfc
   11ccc:	.word	0x00002d34
   11cd0:	.word	0x00002d74
   11cd4:	.word	0x00002d98
   11cd8:	.word	0x00002dbc
   11cdc:	.word	0x00002de0
   11ce0:	.word	0x00002e04
   11ce4:	.word	0x00002e30

00011ce8 <test_add_set_defaults>:
   11ce8:	push	{fp, lr}
   11cec:	add	fp, sp, #4
   11cf0:	sub	sp, sp, #24
   11cf4:	str	r0, [fp, #-24]	; 0xffffffe8
   11cf8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11cfc:	bl	0 <flatcc_builder_reset>
   11d00:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11d04:	bl	a2ac <MyGame_Example_Monster_start_as_root>
   11d08:	ldr	r1, [pc, #416]	; 11eb0 <test_add_set_defaults+0x1c8>
   11d0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11d10:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
   11d14:	mov	r1, #100	; 0x64
   11d18:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11d1c:	bl	8d30 <MyGame_Example_Monster_hp_add>
   11d20:	mov	r1, #100	; 0x64
   11d24:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11d28:	bl	8e0c <MyGame_Example_Monster_mana_add>
   11d2c:	mov	r1, #8
   11d30:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11d34:	bl	9210 <MyGame_Example_Monster_color_add>
   11d38:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11d3c:	bl	a344 <MyGame_Example_Monster_end_as_root>
   11d40:	sub	r3, fp, #16
   11d44:	mov	r1, r3
   11d48:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11d4c:	bl	0 <flatcc_builder_get_direct_buffer>
   11d50:	str	r0, [fp, #-8]
   11d54:	ldr	r0, [fp, #-8]
   11d58:	bl	2d78 <MyGame_Example_Monster_as_root>
   11d5c:	str	r0, [fp, #-12]
   11d60:	ldr	r0, [fp, #-12]
   11d64:	bl	3078 <MyGame_Example_Monster_hp_is_present>
   11d68:	mov	r3, r0
   11d6c:	cmp	r3, #0
   11d70:	beq	11d84 <test_add_set_defaults+0x9c>
   11d74:	ldr	r0, [pc, #312]	; 11eb4 <test_add_set_defaults+0x1cc>
   11d78:	bl	0 <puts>
   11d7c:	mvn	r3, #0
   11d80:	b	11ea4 <test_add_set_defaults+0x1bc>
   11d84:	ldr	r0, [fp, #-12]
   11d88:	bl	3510 <MyGame_Example_Monster_mana_is_present>
   11d8c:	mov	r3, r0
   11d90:	cmp	r3, #0
   11d94:	bne	11da8 <test_add_set_defaults+0xc0>
   11d98:	ldr	r0, [pc, #280]	; 11eb8 <test_add_set_defaults+0x1d0>
   11d9c:	bl	0 <puts>
   11da0:	mvn	r3, #0
   11da4:	b	11ea4 <test_add_set_defaults+0x1bc>
   11da8:	ldr	r0, [fp, #-12]
   11dac:	bl	44a4 <MyGame_Example_Monster_color_is_present>
   11db0:	mov	r3, r0
   11db4:	cmp	r3, #0
   11db8:	beq	11dcc <test_add_set_defaults+0xe4>
   11dbc:	ldr	r0, [pc, #248]	; 11ebc <test_add_set_defaults+0x1d4>
   11dc0:	bl	0 <puts>
   11dc4:	mvn	r3, #0
   11dc8:	b	11ea4 <test_add_set_defaults+0x1bc>
   11dcc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11dd0:	bl	0 <flatcc_builder_reset>
   11dd4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11dd8:	bl	a2ac <MyGame_Example_Monster_start_as_root>
   11ddc:	ldr	r1, [pc, #204]	; 11eb0 <test_add_set_defaults+0x1c8>
   11de0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11de4:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
   11de8:	mov	r1, #100	; 0x64
   11dec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11df0:	bl	8da8 <MyGame_Example_Monster_hp_force_add>
   11df4:	mov	r1, #100	; 0x64
   11df8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11dfc:	bl	8e84 <MyGame_Example_Monster_mana_force_add>
   11e00:	mov	r1, #8
   11e04:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11e08:	bl	9288 <MyGame_Example_Monster_color_force_add>
   11e0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11e10:	bl	a344 <MyGame_Example_Monster_end_as_root>
   11e14:	sub	r3, fp, #16
   11e18:	mov	r1, r3
   11e1c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11e20:	bl	0 <flatcc_builder_get_direct_buffer>
   11e24:	str	r0, [fp, #-8]
   11e28:	ldr	r0, [fp, #-8]
   11e2c:	bl	2d78 <MyGame_Example_Monster_as_root>
   11e30:	str	r0, [fp, #-12]
   11e34:	ldr	r0, [fp, #-12]
   11e38:	bl	3078 <MyGame_Example_Monster_hp_is_present>
   11e3c:	mov	r3, r0
   11e40:	cmp	r3, #0
   11e44:	bne	11e58 <test_add_set_defaults+0x170>
   11e48:	ldr	r0, [pc, #112]	; 11ec0 <test_add_set_defaults+0x1d8>
   11e4c:	bl	0 <puts>
   11e50:	mvn	r3, #0
   11e54:	b	11ea4 <test_add_set_defaults+0x1bc>
   11e58:	ldr	r0, [fp, #-12]
   11e5c:	bl	3510 <MyGame_Example_Monster_mana_is_present>
   11e60:	mov	r3, r0
   11e64:	cmp	r3, #0
   11e68:	bne	11e7c <test_add_set_defaults+0x194>
   11e6c:	ldr	r0, [pc, #80]	; 11ec4 <test_add_set_defaults+0x1dc>
   11e70:	bl	0 <puts>
   11e74:	mvn	r3, #0
   11e78:	b	11ea4 <test_add_set_defaults+0x1bc>
   11e7c:	ldr	r0, [fp, #-12]
   11e80:	bl	44a4 <MyGame_Example_Monster_color_is_present>
   11e84:	mov	r3, r0
   11e88:	cmp	r3, #0
   11e8c:	bne	11ea0 <test_add_set_defaults+0x1b8>
   11e90:	ldr	r0, [pc, #48]	; 11ec8 <test_add_set_defaults+0x1e0>
   11e94:	bl	0 <puts>
   11e98:	mvn	r3, #0
   11e9c:	b	11ea4 <test_add_set_defaults+0x1bc>
   11ea0:	mov	r3, #0
   11ea4:	mov	r0, r3
   11ea8:	sub	sp, fp, #4
   11eac:	pop	{fp, pc}
   11eb0:	.word	0x00000b1c
   11eb4:	.word	0x00002e58
   11eb8:	.word	0x00002e84
   11ebc:	.word	0x00002eb4
   11ec0:	.word	0x00002ee4
   11ec4:	.word	0x00002f18
   11ec8:	.word	0x00002f58

00011ecc <test_nested_buffer>:
   11ecc:	push	{fp, lr}
   11ed0:	add	fp, sp, #4
   11ed4:	sub	sp, sp, #24
   11ed8:	str	r0, [fp, #-24]	; 0xffffffe8
   11edc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11ee0:	bl	0 <flatcc_builder_reset>
   11ee4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11ee8:	bl	a2ac <MyGame_Example_Monster_start_as_root>
   11eec:	ldr	r1, [pc, #316]	; 12030 <test_nested_buffer+0x164>
   11ef0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11ef4:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
   11ef8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11efc:	bl	9fbc <MyGame_Example_Monster_testnestedflatbuffer_start_as_root>
   11f00:	ldr	r1, [pc, #300]	; 12034 <test_nested_buffer+0x168>
   11f04:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11f08:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
   11f0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11f10:	bl	a008 <MyGame_Example_Monster_testnestedflatbuffer_end_as_root>
   11f14:	mov	r1, #10
   11f18:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11f1c:	bl	8d30 <MyGame_Example_Monster_hp_add>
   11f20:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11f24:	bl	a344 <MyGame_Example_Monster_end_as_root>
   11f28:	sub	r3, fp, #20
   11f2c:	mov	r1, r3
   11f30:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11f34:	bl	0 <flatcc_builder_get_direct_buffer>
   11f38:	str	r0, [fp, #-8]
   11f3c:	ldr	r2, [fp, #-20]	; 0xffffffec
   11f40:	ldr	r3, [pc, #240]	; 12038 <test_nested_buffer+0x16c>
   11f44:	ldr	r3, [r3]
   11f48:	ldr	r1, [fp, #-8]
   11f4c:	ldr	r0, [pc, #232]	; 1203c <test_nested_buffer+0x170>
   11f50:	bl	cb40 <hexdump>
   11f54:	ldr	r0, [fp, #-8]
   11f58:	bl	2d78 <MyGame_Example_Monster_as_root>
   11f5c:	str	r0, [fp, #-12]
   11f60:	ldr	r0, [fp, #-12]
   11f64:	bl	35e4 <MyGame_Example_Monster_name>
   11f68:	mov	r3, r0
   11f6c:	ldr	r1, [pc, #188]	; 12030 <test_nested_buffer+0x164>
   11f70:	mov	r0, r3
   11f74:	bl	0 <strcmp>
   11f78:	mov	r3, r0
   11f7c:	cmp	r3, #0
   11f80:	beq	11f94 <test_nested_buffer+0xc8>
   11f84:	ldr	r0, [pc, #180]	; 12040 <test_nested_buffer+0x174>
   11f88:	bl	0 <puts>
   11f8c:	mvn	r3, #0
   11f90:	b	12024 <test_nested_buffer+0x158>
   11f94:	ldr	r0, [fp, #-12]
   11f98:	bl	505c <MyGame_Example_Monster_testnestedflatbuffer_as_root>
   11f9c:	str	r0, [fp, #-16]
   11fa0:	ldr	r0, [fp, #-12]
   11fa4:	bl	2f8c <MyGame_Example_Monster_hp>
   11fa8:	mov	r3, r0
   11fac:	cmp	r3, #10
   11fb0:	beq	11fc4 <test_nested_buffer+0xf8>
   11fb4:	ldr	r0, [pc, #136]	; 12044 <test_nested_buffer+0x178>
   11fb8:	bl	0 <puts>
   11fbc:	mvn	r3, #0
   11fc0:	b	12024 <test_nested_buffer+0x158>
   11fc4:	ldr	r0, [fp, #-16]
   11fc8:	bl	35e4 <MyGame_Example_Monster_name>
   11fcc:	mov	r3, r0
   11fd0:	cmp	r3, #0
   11fd4:	bne	11fec <test_nested_buffer+0x120>
   11fd8:	ldr	r3, [pc, #104]	; 12048 <test_nested_buffer+0x17c>
   11fdc:	ldr	r2, [pc, #104]	; 1204c <test_nested_buffer+0x180>
   11fe0:	ldr	r1, [pc, #104]	; 12050 <test_nested_buffer+0x184>
   11fe4:	ldr	r0, [pc, #104]	; 12054 <test_nested_buffer+0x188>
   11fe8:	bl	0 <__assert_fail>
   11fec:	ldr	r0, [fp, #-16]
   11ff0:	bl	35e4 <MyGame_Example_Monster_name>
   11ff4:	mov	r3, r0
   11ff8:	ldr	r1, [pc, #52]	; 12034 <test_nested_buffer+0x168>
   11ffc:	mov	r0, r3
   12000:	bl	0 <strcmp>
   12004:	mov	r3, r0
   12008:	cmp	r3, #0
   1200c:	beq	12020 <test_nested_buffer+0x154>
   12010:	ldr	r0, [pc, #64]	; 12058 <test_nested_buffer+0x18c>
   12014:	bl	0 <puts>
   12018:	mvn	r3, #0
   1201c:	b	12024 <test_nested_buffer+0x158>
   12020:	mov	r3, #0
   12024:	mov	r0, r3
   12028:	sub	sp, fp, #4
   1202c:	pop	{fp, pc}
   12030:	.word	0x00000b1c
   12034:	.word	0x00002f90
   12038:	.word	0x00000000
   1203c:	.word	0x00002fa0
   12040:	.word	0x00002fb4
   12044:	.word	0x00002fd0
   12048:	.word	0x00003d10
   1204c:	.word	0x0000088c
   12050:	.word	0x00001418
   12054:	.word	0x00002ff4
   12058:	.word	0x00003010

0001205c <test_nested_buffer_first>:
   1205c:	push	{fp, lr}
   12060:	add	fp, sp, #4
   12064:	sub	sp, sp, #24
   12068:	str	r0, [fp, #-24]	; 0xffffffe8
   1206c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12070:	bl	0 <flatcc_builder_reset>
   12074:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12078:	bl	a2ac <MyGame_Example_Monster_start_as_root>
   1207c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12080:	bl	9fbc <MyGame_Example_Monster_testnestedflatbuffer_start_as_root>
   12084:	ldr	r1, [pc, #308]	; 121c0 <test_nested_buffer_first+0x164>
   12088:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1208c:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
   12090:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12094:	bl	a008 <MyGame_Example_Monster_testnestedflatbuffer_end_as_root>
   12098:	mov	r1, #10
   1209c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   120a0:	bl	8d30 <MyGame_Example_Monster_hp_add>
   120a4:	ldr	r1, [pc, #280]	; 121c4 <test_nested_buffer_first+0x168>
   120a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   120ac:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
   120b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   120b4:	bl	a344 <MyGame_Example_Monster_end_as_root>
   120b8:	sub	r3, fp, #20
   120bc:	mov	r1, r3
   120c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   120c4:	bl	0 <flatcc_builder_get_direct_buffer>
   120c8:	str	r0, [fp, #-8]
   120cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   120d0:	ldr	r3, [pc, #240]	; 121c8 <test_nested_buffer_first+0x16c>
   120d4:	ldr	r3, [r3]
   120d8:	ldr	r1, [fp, #-8]
   120dc:	ldr	r0, [pc, #232]	; 121cc <test_nested_buffer_first+0x170>
   120e0:	bl	cb40 <hexdump>
   120e4:	ldr	r0, [fp, #-8]
   120e8:	bl	2d78 <MyGame_Example_Monster_as_root>
   120ec:	str	r0, [fp, #-12]
   120f0:	ldr	r0, [fp, #-12]
   120f4:	bl	35e4 <MyGame_Example_Monster_name>
   120f8:	mov	r3, r0
   120fc:	ldr	r1, [pc, #192]	; 121c4 <test_nested_buffer_first+0x168>
   12100:	mov	r0, r3
   12104:	bl	0 <strcmp>
   12108:	mov	r3, r0
   1210c:	cmp	r3, #0
   12110:	beq	12124 <test_nested_buffer_first+0xc8>
   12114:	ldr	r0, [pc, #180]	; 121d0 <test_nested_buffer_first+0x174>
   12118:	bl	0 <puts>
   1211c:	mvn	r3, #0
   12120:	b	121b4 <test_nested_buffer_first+0x158>
   12124:	ldr	r0, [fp, #-12]
   12128:	bl	505c <MyGame_Example_Monster_testnestedflatbuffer_as_root>
   1212c:	str	r0, [fp, #-16]
   12130:	ldr	r0, [fp, #-12]
   12134:	bl	2f8c <MyGame_Example_Monster_hp>
   12138:	mov	r3, r0
   1213c:	cmp	r3, #10
   12140:	beq	12154 <test_nested_buffer_first+0xf8>
   12144:	ldr	r0, [pc, #136]	; 121d4 <test_nested_buffer_first+0x178>
   12148:	bl	0 <puts>
   1214c:	mvn	r3, #0
   12150:	b	121b4 <test_nested_buffer_first+0x158>
   12154:	ldr	r0, [fp, #-16]
   12158:	bl	35e4 <MyGame_Example_Monster_name>
   1215c:	mov	r3, r0
   12160:	cmp	r3, #0
   12164:	bne	1217c <test_nested_buffer_first+0x120>
   12168:	ldr	r3, [pc, #104]	; 121d8 <test_nested_buffer_first+0x17c>
   1216c:	ldr	r2, [pc, #104]	; 121dc <test_nested_buffer_first+0x180>
   12170:	ldr	r1, [pc, #104]	; 121e0 <test_nested_buffer_first+0x184>
   12174:	ldr	r0, [pc, #104]	; 121e4 <test_nested_buffer_first+0x188>
   12178:	bl	0 <__assert_fail>
   1217c:	ldr	r0, [fp, #-16]
   12180:	bl	35e4 <MyGame_Example_Monster_name>
   12184:	mov	r3, r0
   12188:	ldr	r1, [pc, #48]	; 121c0 <test_nested_buffer_first+0x164>
   1218c:	mov	r0, r3
   12190:	bl	0 <strcmp>
   12194:	mov	r3, r0
   12198:	cmp	r3, #0
   1219c:	beq	121b0 <test_nested_buffer_first+0x154>
   121a0:	ldr	r0, [pc, #64]	; 121e8 <test_nested_buffer_first+0x18c>
   121a4:	bl	0 <puts>
   121a8:	mvn	r3, #0
   121ac:	b	121b4 <test_nested_buffer_first+0x158>
   121b0:	mov	r3, #0
   121b4:	mov	r0, r3
   121b8:	sub	sp, fp, #4
   121bc:	pop	{fp, pc}
   121c0:	.word	0x00002f90
   121c4:	.word	0x00000b1c
   121c8:	.word	0x00000000
   121cc:	.word	0x00002fa0
   121d0:	.word	0x00002fb4
   121d4:	.word	0x00002fd0
   121d8:	.word	0x00003d50
   121dc:	.word	0x000008c1
   121e0:	.word	0x00001418
   121e4:	.word	0x00002ff4
   121e8:	.word	0x00003010

000121ec <test_nested_buffer_using_nest>:
   121ec:	push	{fp, lr}
   121f0:	add	fp, sp, #4
   121f4:	sub	sp, sp, #1056	; 0x420
   121f8:	str	r0, [fp, #-1056]	; 0xfffffbe0
   121fc:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   12200:	bl	0 <flatcc_builder_reset>
   12204:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   12208:	bl	a2ac <MyGame_Example_Monster_start_as_root>
   1220c:	ldr	r1, [pc, #468]	; 123e8 <test_nested_buffer_using_nest+0x1fc>
   12210:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   12214:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
   12218:	mov	r1, #42	; 0x2a
   1221c:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   12220:	bl	8e0c <MyGame_Example_Monster_mana_add>
   12224:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   12228:	bl	a344 <MyGame_Example_Monster_end_as_root>
   1222c:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   12230:	bl	0 <flatcc_builder_get_buffer_size>
   12234:	str	r0, [fp, #-8]
   12238:	sub	r3, fp, #1040	; 0x410
   1223c:	sub	r3, r3, #4
   12240:	mov	r2, #1024	; 0x400
   12244:	mov	r1, r3
   12248:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   1224c:	bl	0 <flatcc_builder_copy_buffer>
   12250:	mov	r3, r0
   12254:	cmp	r3, #0
   12258:	bne	1226c <test_nested_buffer_using_nest+0x80>
   1225c:	ldr	r0, [pc, #392]	; 123ec <test_nested_buffer_using_nest+0x200>
   12260:	bl	0 <puts>
   12264:	mvn	r3, #0
   12268:	b	123dc <test_nested_buffer_using_nest+0x1f0>
   1226c:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   12270:	bl	0 <flatcc_builder_reset>
   12274:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   12278:	bl	a2ac <MyGame_Example_Monster_start_as_root>
   1227c:	sub	r1, fp, #1040	; 0x410
   12280:	sub	r1, r1, #4
   12284:	mov	r3, #0
   12288:	ldr	r2, [fp, #-8]
   1228c:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   12290:	bl	a050 <MyGame_Example_Monster_testnestedflatbuffer_nest>
   12294:	mov	r1, #10
   12298:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   1229c:	bl	8d30 <MyGame_Example_Monster_hp_add>
   122a0:	ldr	r1, [pc, #328]	; 123f0 <test_nested_buffer_using_nest+0x204>
   122a4:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   122a8:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
   122ac:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   122b0:	bl	a344 <MyGame_Example_Monster_end_as_root>
   122b4:	sub	r3, fp, #1040	; 0x410
   122b8:	sub	r3, r3, #4
   122bc:	sub	r3, r3, #4
   122c0:	mov	r1, r3
   122c4:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   122c8:	bl	0 <flatcc_builder_get_direct_buffer>
   122cc:	str	r0, [fp, #-12]
   122d0:	ldr	r2, [fp, #-1048]	; 0xfffffbe8
   122d4:	ldr	r3, [pc, #280]	; 123f4 <test_nested_buffer_using_nest+0x208>
   122d8:	ldr	r3, [r3]
   122dc:	ldr	r1, [fp, #-12]
   122e0:	ldr	r0, [pc, #272]	; 123f8 <test_nested_buffer_using_nest+0x20c>
   122e4:	bl	cb40 <hexdump>
   122e8:	ldr	r0, [fp, #-12]
   122ec:	bl	2d78 <MyGame_Example_Monster_as_root>
   122f0:	str	r0, [fp, #-16]
   122f4:	ldr	r0, [fp, #-16]
   122f8:	bl	35e4 <MyGame_Example_Monster_name>
   122fc:	mov	r3, r0
   12300:	ldr	r1, [pc, #232]	; 123f0 <test_nested_buffer_using_nest+0x204>
   12304:	mov	r0, r3
   12308:	bl	0 <strcmp>
   1230c:	mov	r3, r0
   12310:	cmp	r3, #0
   12314:	beq	12328 <test_nested_buffer_using_nest+0x13c>
   12318:	ldr	r0, [pc, #220]	; 123fc <test_nested_buffer_using_nest+0x210>
   1231c:	bl	0 <puts>
   12320:	mvn	r3, #0
   12324:	b	123dc <test_nested_buffer_using_nest+0x1f0>
   12328:	ldr	r0, [fp, #-16]
   1232c:	bl	505c <MyGame_Example_Monster_testnestedflatbuffer_as_root>
   12330:	str	r0, [fp, #-20]	; 0xffffffec
   12334:	ldr	r0, [fp, #-16]
   12338:	bl	2f8c <MyGame_Example_Monster_hp>
   1233c:	mov	r3, r0
   12340:	cmp	r3, #10
   12344:	beq	12358 <test_nested_buffer_using_nest+0x16c>
   12348:	ldr	r0, [pc, #176]	; 12400 <test_nested_buffer_using_nest+0x214>
   1234c:	bl	0 <puts>
   12350:	mvn	r3, #0
   12354:	b	123dc <test_nested_buffer_using_nest+0x1f0>
   12358:	ldr	r0, [fp, #-20]	; 0xffffffec
   1235c:	bl	35e4 <MyGame_Example_Monster_name>
   12360:	mov	r3, r0
   12364:	cmp	r3, #0
   12368:	bne	12380 <test_nested_buffer_using_nest+0x194>
   1236c:	ldr	r3, [pc, #144]	; 12404 <test_nested_buffer_using_nest+0x218>
   12370:	ldr	r2, [pc, #144]	; 12408 <test_nested_buffer_using_nest+0x21c>
   12374:	ldr	r1, [pc, #144]	; 1240c <test_nested_buffer_using_nest+0x220>
   12378:	ldr	r0, [pc, #144]	; 12410 <test_nested_buffer_using_nest+0x224>
   1237c:	bl	0 <__assert_fail>
   12380:	ldr	r0, [fp, #-20]	; 0xffffffec
   12384:	bl	35e4 <MyGame_Example_Monster_name>
   12388:	mov	r3, r0
   1238c:	ldr	r1, [pc, #84]	; 123e8 <test_nested_buffer_using_nest+0x1fc>
   12390:	mov	r0, r3
   12394:	bl	0 <strcmp>
   12398:	mov	r3, r0
   1239c:	cmp	r3, #0
   123a0:	beq	123b4 <test_nested_buffer_using_nest+0x1c8>
   123a4:	ldr	r0, [pc, #104]	; 12414 <test_nested_buffer_using_nest+0x228>
   123a8:	bl	0 <puts>
   123ac:	mvn	r3, #0
   123b0:	b	123dc <test_nested_buffer_using_nest+0x1f0>
   123b4:	ldr	r0, [fp, #-20]	; 0xffffffec
   123b8:	bl	3424 <MyGame_Example_Monster_mana>
   123bc:	mov	r3, r0
   123c0:	cmp	r3, #42	; 0x2a
   123c4:	beq	123d8 <test_nested_buffer_using_nest+0x1ec>
   123c8:	ldr	r0, [pc, #72]	; 12418 <test_nested_buffer_using_nest+0x22c>
   123cc:	bl	0 <puts>
   123d0:	mvn	r3, #0
   123d4:	b	123dc <test_nested_buffer_using_nest+0x1f0>
   123d8:	mov	r3, #0
   123dc:	mov	r0, r3
   123e0:	sub	sp, fp, #4
   123e4:	pop	{fp, pc}
   123e8:	.word	0x00002f90
   123ec:	.word	0x00003030
   123f0:	.word	0x00000b1c
   123f4:	.word	0x00000000
   123f8:	.word	0x0000304c
   123fc:	.word	0x00002fb4
   12400:	.word	0x00002fd0
   12404:	.word	0x00003d6c
   12408:	.word	0x000008fa
   1240c:	.word	0x00001418
   12410:	.word	0x00002ff4
   12414:	.word	0x00003010
   12418:	.word	0x00003070

0001241c <verify_include>:
   1241c:	push	{fp}		; (str fp, [sp, #-4]!)
   12420:	add	fp, sp, #0
   12424:	sub	sp, sp, #12
   12428:	str	r0, [fp, #-8]
   1242c:	mov	r3, #0
   12430:	mov	r0, r3
   12434:	add	sp, fp, #0
   12438:	pop	{fp}		; (ldr fp, [sp], #4)
   1243c:	bx	lr

00012440 <test_struct_buffer>:
   12440:	push	{fp, lr}
   12444:	add	fp, sp, #4
   12448:	sub	sp, sp, #120	; 0x78
   1244c:	str	r0, [fp, #-120]	; 0xffffff88
   12450:	ldr	r0, [fp, #-120]	; 0xffffff88
   12454:	bl	0 <flatcc_builder_reset>
   12458:	mvn	r3, #16
   1245c:	ldr	r2, [pc, #576]	; 126a4 <test_struct_buffer+0x264>
   12460:	mov	r1, #8
   12464:	vldr	d2, [pc, #548]	; 12690 <test_struct_buffer+0x250>
   12468:	vldr	s2, [pc, #552]	; 12698 <test_struct_buffer+0x258>
   1246c:	vldr	s1, [pc, #552]	; 1269c <test_struct_buffer+0x25c>
   12470:	vldr	s0, [pc, #552]	; 126a0 <test_struct_buffer+0x260>
   12474:	ldr	r0, [fp, #-120]	; 0xffffff88
   12478:	bl	7aa4 <MyGame_Example_Vec3_create_as_root>
   1247c:	ldr	r0, [fp, #-120]	; 0xffffff88
   12480:	bl	0 <flatcc_builder_get_buffer_size>
   12484:	str	r0, [fp, #-8]
   12488:	ldr	r3, [fp, #-8]
   1248c:	cmp	r3, #48	; 0x30
   12490:	beq	124a8 <test_struct_buffer+0x68>
   12494:	ldr	r3, [pc, #524]	; 126a8 <test_struct_buffer+0x268>
   12498:	ldr	r2, [pc, #524]	; 126ac <test_struct_buffer+0x26c>
   1249c:	ldr	r1, [pc, #524]	; 126b0 <test_struct_buffer+0x270>
   124a0:	ldr	r0, [pc, #524]	; 126b4 <test_struct_buffer+0x274>
   124a4:	bl	0 <__assert_fail>
   124a8:	ldr	r3, [fp, #-8]
   124ac:	mov	r1, r3
   124b0:	ldr	r0, [pc, #512]	; 126b8 <test_struct_buffer+0x278>
   124b4:	bl	0 <printf>
   124b8:	ldr	r0, [fp, #-120]	; 0xffffff88
   124bc:	bl	0 <flatcc_builder_get_emit_context>
   124c0:	mov	r3, r0
   124c4:	mov	r0, r3
   124c8:	bl	6cf0 <flatcc_emitter_get_buffer_size>
   124cc:	mov	r2, r0
   124d0:	ldr	r3, [fp, #-8]
   124d4:	cmp	r2, r3
   124d8:	beq	124f0 <test_struct_buffer+0xb0>
   124dc:	ldr	r3, [pc, #452]	; 126a8 <test_struct_buffer+0x268>
   124e0:	ldr	r2, [pc, #468]	; 126bc <test_struct_buffer+0x27c>
   124e4:	ldr	r1, [pc, #452]	; 126b0 <test_struct_buffer+0x270>
   124e8:	ldr	r0, [pc, #464]	; 126c0 <test_struct_buffer+0x280>
   124ec:	bl	0 <__assert_fail>
   124f0:	sub	r3, fp, #116	; 0x74
   124f4:	mov	r2, #100	; 0x64
   124f8:	mov	r1, r3
   124fc:	ldr	r0, [fp, #-120]	; 0xffffff88
   12500:	bl	0 <flatcc_builder_copy_buffer>
   12504:	mov	r3, r0
   12508:	cmp	r3, #0
   1250c:	bne	12520 <test_struct_buffer+0xe0>
   12510:	ldr	r0, [pc, #428]	; 126c4 <test_struct_buffer+0x284>
   12514:	bl	0 <puts>
   12518:	mvn	r3, #0
   1251c:	b	12684 <test_struct_buffer+0x244>
   12520:	ldr	r3, [pc, #416]	; 126c8 <test_struct_buffer+0x288>
   12524:	ldr	r3, [r3]
   12528:	sub	r1, fp, #116	; 0x74
   1252c:	ldr	r2, [fp, #-8]
   12530:	ldr	r0, [pc, #404]	; 126cc <test_struct_buffer+0x28c>
   12534:	bl	cb40 <hexdump>
   12538:	sub	r3, fp, #116	; 0x74
   1253c:	ldr	r1, [pc, #396]	; 126d0 <test_struct_buffer+0x290>
   12540:	mov	r0, r3
   12544:	bl	19fc <flatbuffers_has_identifier>
   12548:	mov	r3, r0
   1254c:	cmp	r3, #0
   12550:	bne	12564 <test_struct_buffer+0x124>
   12554:	ldr	r0, [pc, #376]	; 126d4 <test_struct_buffer+0x294>
   12558:	bl	0 <puts>
   1255c:	mvn	r3, #0
   12560:	b	12684 <test_struct_buffer+0x244>
   12564:	sub	r3, fp, #116	; 0x74
   12568:	ldr	r1, [pc, #360]	; 126d8 <test_struct_buffer+0x298>
   1256c:	mov	r0, r3
   12570:	bl	19fc <flatbuffers_has_identifier>
   12574:	mov	r3, r0
   12578:	cmp	r3, #0
   1257c:	beq	12590 <test_struct_buffer+0x150>
   12580:	ldr	r0, [pc, #340]	; 126dc <test_struct_buffer+0x29c>
   12584:	bl	0 <puts>
   12588:	mvn	r3, #0
   1258c:	b	12684 <test_struct_buffer+0x244>
   12590:	sub	r3, fp, #116	; 0x74
   12594:	ldr	r1, [pc, #308]	; 126d0 <test_struct_buffer+0x290>
   12598:	mov	r0, r3
   1259c:	bl	19fc <flatbuffers_has_identifier>
   125a0:	mov	r3, r0
   125a4:	cmp	r3, #0
   125a8:	bne	125bc <test_struct_buffer+0x17c>
   125ac:	ldr	r0, [pc, #300]	; 126e0 <test_struct_buffer+0x2a0>
   125b0:	bl	0 <puts>
   125b4:	mvn	r3, #0
   125b8:	b	12684 <test_struct_buffer+0x244>
   125bc:	sub	r3, fp, #116	; 0x74
   125c0:	mov	r0, r3
   125c4:	bl	1f2c <MyGame_Example_Vec3_as_root>
   125c8:	str	r0, [fp, #-12]
   125cc:	ldr	r3, [fp, #-12]
   125d0:	str	r3, [fp, #-16]
   125d4:	ldr	r0, [fp, #-16]
   125d8:	bl	7958 <MyGame_Example_Vec3_from_pe>
   125dc:	ldr	r3, [fp, #-16]
   125e0:	vldr	s15, [r3]
   125e4:	vldr	s14, [pc, #180]	; 126a0 <test_struct_buffer+0x260>
   125e8:	vcmp.f32	s15, s14
   125ec:	vmrs	APSR_nzcv, fpscr
   125f0:	bne	12670 <test_struct_buffer+0x230>
   125f4:	ldr	r3, [fp, #-16]
   125f8:	vldr	s15, [r3, #4]
   125fc:	vldr	s14, [pc, #152]	; 1269c <test_struct_buffer+0x25c>
   12600:	vcmp.f32	s15, s14
   12604:	vmrs	APSR_nzcv, fpscr
   12608:	bne	12670 <test_struct_buffer+0x230>
   1260c:	ldr	r3, [fp, #-16]
   12610:	vldr	s15, [r3, #8]
   12614:	vldr	s14, [pc, #124]	; 12698 <test_struct_buffer+0x258>
   12618:	vcmp.f32	s15, s14
   1261c:	vmrs	APSR_nzcv, fpscr
   12620:	bne	12670 <test_struct_buffer+0x230>
   12624:	ldr	r3, [fp, #-16]
   12628:	vldr	d7, [r3, #16]
   1262c:	vldr	d6, [pc, #92]	; 12690 <test_struct_buffer+0x250>
   12630:	vcmp.f64	d7, d6
   12634:	vmrs	APSR_nzcv, fpscr
   12638:	bne	12670 <test_struct_buffer+0x230>
   1263c:	ldr	r3, [fp, #-16]
   12640:	ldrsb	r3, [r3, #24]
   12644:	cmp	r3, #8
   12648:	bne	12670 <test_struct_buffer+0x230>
   1264c:	ldr	r3, [fp, #-16]
   12650:	ldrsh	r3, [r3, #26]
   12654:	ldr	r2, [pc, #72]	; 126a4 <test_struct_buffer+0x264>
   12658:	cmp	r3, r2
   1265c:	bne	12670 <test_struct_buffer+0x230>
   12660:	ldr	r3, [fp, #-16]
   12664:	ldrsb	r3, [r3, #28]
   12668:	cmn	r3, #17
   1266c:	beq	12680 <test_struct_buffer+0x240>
   12670:	ldr	r0, [pc, #108]	; 126e4 <test_struct_buffer+0x2a4>
   12674:	bl	0 <puts>
   12678:	mvn	r3, #0
   1267c:	b	12684 <test_struct_buffer+0x244>
   12680:	mov	r3, #0
   12684:	mov	r0, r3
   12688:	sub	sp, fp, #4
   1268c:	pop	{fp, pc}
   12690:	.word	0xcccccccd
   12694:	.word	0x4010cccc
   12698:	.word	0x40400000
   1269c:	.word	0x40000000
   126a0:	.word	0x3f800000
   126a4:	.word	0x00000aaa
   126a8:	.word	0x00003d8c
   126ac:	.word	0x00000923
   126b0:	.word	0x00001418
   126b4:	.word	0x00003094
   126b8:	.word	0x000030a0
   126bc:	.word	0x00000925
   126c0:	.word	0x000030c0
   126c4:	.word	0x0000310c
   126c8:	.word	0x00000000
   126cc:	.word	0x00003118
   126d0:	.word	0x00000134
   126d4:	.word	0x0000312c
   126d8:	.word	0x00003150
   126dc:	.word	0x00003158
   126e0:	.word	0x00003184
   126e4:	.word	0x000031a8

000126e8 <test_typed_struct_buffer>:
   126e8:	push	{fp, lr}
   126ec:	add	fp, sp, #4
   126f0:	sub	sp, sp, #120	; 0x78
   126f4:	str	r0, [fp, #-120]	; 0xffffff88
   126f8:	ldr	r0, [fp, #-120]	; 0xffffff88
   126fc:	bl	0 <flatcc_builder_reset>
   12700:	mvn	r3, #16
   12704:	ldr	r2, [pc, #744]	; 129f4 <test_typed_struct_buffer+0x30c>
   12708:	mov	r1, #8
   1270c:	vldr	d2, [pc, #716]	; 129e0 <test_typed_struct_buffer+0x2f8>
   12710:	vldr	s2, [pc, #720]	; 129e8 <test_typed_struct_buffer+0x300>
   12714:	vldr	s1, [pc, #720]	; 129ec <test_typed_struct_buffer+0x304>
   12718:	vldr	s0, [pc, #720]	; 129f0 <test_typed_struct_buffer+0x308>
   1271c:	ldr	r0, [fp, #-120]	; 0xffffff88
   12720:	bl	7b40 <MyGame_Example_Vec3_create_as_typed_root>
   12724:	ldr	r0, [fp, #-120]	; 0xffffff88
   12728:	bl	0 <flatcc_builder_get_buffer_size>
   1272c:	str	r0, [fp, #-8]
   12730:	ldr	r3, [fp, #-8]
   12734:	cmp	r3, #48	; 0x30
   12738:	beq	12750 <test_typed_struct_buffer+0x68>
   1273c:	ldr	r3, [pc, #692]	; 129f8 <test_typed_struct_buffer+0x310>
   12740:	ldr	r2, [pc, #692]	; 129fc <test_typed_struct_buffer+0x314>
   12744:	ldr	r1, [pc, #692]	; 12a00 <test_typed_struct_buffer+0x318>
   12748:	ldr	r0, [pc, #692]	; 12a04 <test_typed_struct_buffer+0x31c>
   1274c:	bl	0 <__assert_fail>
   12750:	ldr	r3, [fp, #-8]
   12754:	mov	r1, r3
   12758:	ldr	r0, [pc, #680]	; 12a08 <test_typed_struct_buffer+0x320>
   1275c:	bl	0 <printf>
   12760:	ldr	r0, [fp, #-120]	; 0xffffff88
   12764:	bl	0 <flatcc_builder_get_emit_context>
   12768:	mov	r3, r0
   1276c:	mov	r0, r3
   12770:	bl	6cf0 <flatcc_emitter_get_buffer_size>
   12774:	mov	r2, r0
   12778:	ldr	r3, [fp, #-8]
   1277c:	cmp	r2, r3
   12780:	beq	12798 <test_typed_struct_buffer+0xb0>
   12784:	ldr	r3, [pc, #620]	; 129f8 <test_typed_struct_buffer+0x310>
   12788:	ldr	r2, [pc, #636]	; 12a0c <test_typed_struct_buffer+0x324>
   1278c:	ldr	r1, [pc, #620]	; 12a00 <test_typed_struct_buffer+0x318>
   12790:	ldr	r0, [pc, #632]	; 12a10 <test_typed_struct_buffer+0x328>
   12794:	bl	0 <__assert_fail>
   12798:	sub	r3, fp, #116	; 0x74
   1279c:	mov	r2, #100	; 0x64
   127a0:	mov	r1, r3
   127a4:	ldr	r0, [fp, #-120]	; 0xffffff88
   127a8:	bl	0 <flatcc_builder_copy_buffer>
   127ac:	mov	r3, r0
   127b0:	cmp	r3, #0
   127b4:	bne	127c8 <test_typed_struct_buffer+0xe0>
   127b8:	ldr	r0, [pc, #596]	; 12a14 <test_typed_struct_buffer+0x32c>
   127bc:	bl	0 <puts>
   127c0:	mvn	r3, #0
   127c4:	b	129d0 <test_typed_struct_buffer+0x2e8>
   127c8:	ldr	r3, [pc, #584]	; 12a18 <test_typed_struct_buffer+0x330>
   127cc:	ldr	r3, [r3]
   127d0:	sub	r1, fp, #116	; 0x74
   127d4:	ldr	r2, [fp, #-8]
   127d8:	ldr	r0, [pc, #572]	; 12a1c <test_typed_struct_buffer+0x334>
   127dc:	bl	cb40 <hexdump>
   127e0:	sub	r3, fp, #116	; 0x74
   127e4:	ldr	r1, [pc, #564]	; 12a20 <test_typed_struct_buffer+0x338>
   127e8:	mov	r0, r3
   127ec:	bl	19fc <flatbuffers_has_identifier>
   127f0:	mov	r3, r0
   127f4:	cmp	r3, #0
   127f8:	bne	1280c <test_typed_struct_buffer+0x124>
   127fc:	ldr	r0, [pc, #544]	; 12a24 <test_typed_struct_buffer+0x33c>
   12800:	bl	0 <puts>
   12804:	mvn	r3, #0
   12808:	b	129d0 <test_typed_struct_buffer+0x2e8>
   1280c:	sub	r3, fp, #116	; 0x74
   12810:	ldr	r1, [pc, #528]	; 12a28 <test_typed_struct_buffer+0x340>
   12814:	mov	r0, r3
   12818:	bl	19fc <flatbuffers_has_identifier>
   1281c:	mov	r3, r0
   12820:	cmp	r3, #0
   12824:	beq	12838 <test_typed_struct_buffer+0x150>
   12828:	ldr	r0, [pc, #508]	; 12a2c <test_typed_struct_buffer+0x344>
   1282c:	bl	0 <puts>
   12830:	mvn	r3, #0
   12834:	b	129d0 <test_typed_struct_buffer+0x2e8>
   12838:	sub	r3, fp, #116	; 0x74
   1283c:	ldr	r1, [pc, #476]	; 12a20 <test_typed_struct_buffer+0x338>
   12840:	mov	r0, r3
   12844:	bl	19fc <flatbuffers_has_identifier>
   12848:	mov	r3, r0
   1284c:	cmp	r3, #0
   12850:	bne	12864 <test_typed_struct_buffer+0x17c>
   12854:	ldr	r0, [pc, #468]	; 12a30 <test_typed_struct_buffer+0x348>
   12858:	bl	0 <puts>
   1285c:	mvn	r3, #0
   12860:	b	129d0 <test_typed_struct_buffer+0x2e8>
   12864:	sub	r3, fp, #116	; 0x74
   12868:	ldr	r1, [pc, #452]	; 12a34 <test_typed_struct_buffer+0x34c>
   1286c:	mov	r0, r3
   12870:	bl	1ecc <MyGame_Example_Vec3_as_root_with_type_hash>
   12874:	mov	r3, r0
   12878:	cmp	r3, #0
   1287c:	bne	12890 <test_typed_struct_buffer+0x1a8>
   12880:	ldr	r0, [pc, #432]	; 12a38 <test_typed_struct_buffer+0x350>
   12884:	bl	0 <puts>
   12888:	mvn	r3, #0
   1288c:	b	129d0 <test_typed_struct_buffer+0x2e8>
   12890:	sub	r3, fp, #116	; 0x74
   12894:	ldr	r2, [pc, #408]	; 12a34 <test_typed_struct_buffer+0x34c>
   12898:	ldr	r1, [fp, #-8]
   1289c:	mov	r0, r3
   128a0:	bl	b678 <MyGame_Example_Vec3_verify_as_root_with_type_hash>
   128a4:	mov	r3, r0
   128a8:	cmp	r3, #0
   128ac:	beq	128c0 <test_typed_struct_buffer+0x1d8>
   128b0:	ldr	r0, [pc, #388]	; 12a3c <test_typed_struct_buffer+0x354>
   128b4:	bl	0 <puts>
   128b8:	mvn	r3, #0
   128bc:	b	129d0 <test_typed_struct_buffer+0x2e8>
   128c0:	sub	r3, fp, #116	; 0x74
   128c4:	mov	r0, r3
   128c8:	bl	1f94 <MyGame_Example_Vec3_as_typed_root>
   128cc:	str	r0, [fp, #-12]
   128d0:	ldr	r3, [fp, #-12]
   128d4:	cmp	r3, #0
   128d8:	bne	128ec <test_typed_struct_buffer+0x204>
   128dc:	ldr	r0, [pc, #348]	; 12a40 <test_typed_struct_buffer+0x358>
   128e0:	bl	0 <puts>
   128e4:	mvn	r3, #0
   128e8:	b	129d0 <test_typed_struct_buffer+0x2e8>
   128ec:	sub	r3, fp, #116	; 0x74
   128f0:	ldr	r1, [fp, #-8]
   128f4:	mov	r0, r3
   128f8:	bl	b634 <MyGame_Example_Vec3_verify_as_typed_root>
   128fc:	mov	r3, r0
   12900:	cmp	r3, #0
   12904:	beq	12918 <test_typed_struct_buffer+0x230>
   12908:	ldr	r0, [pc, #308]	; 12a44 <test_typed_struct_buffer+0x35c>
   1290c:	bl	0 <puts>
   12910:	mvn	r3, #0
   12914:	b	129d0 <test_typed_struct_buffer+0x2e8>
   12918:	ldr	r3, [fp, #-12]
   1291c:	str	r3, [fp, #-16]
   12920:	ldr	r0, [fp, #-16]
   12924:	bl	7958 <MyGame_Example_Vec3_from_pe>
   12928:	ldr	r3, [fp, #-16]
   1292c:	vldr	s15, [r3]
   12930:	vldr	s14, [pc, #184]	; 129f0 <test_typed_struct_buffer+0x308>
   12934:	vcmp.f32	s15, s14
   12938:	vmrs	APSR_nzcv, fpscr
   1293c:	bne	129bc <test_typed_struct_buffer+0x2d4>
   12940:	ldr	r3, [fp, #-16]
   12944:	vldr	s15, [r3, #4]
   12948:	vldr	s14, [pc, #156]	; 129ec <test_typed_struct_buffer+0x304>
   1294c:	vcmp.f32	s15, s14
   12950:	vmrs	APSR_nzcv, fpscr
   12954:	bne	129bc <test_typed_struct_buffer+0x2d4>
   12958:	ldr	r3, [fp, #-16]
   1295c:	vldr	s15, [r3, #8]
   12960:	vldr	s14, [pc, #128]	; 129e8 <test_typed_struct_buffer+0x300>
   12964:	vcmp.f32	s15, s14
   12968:	vmrs	APSR_nzcv, fpscr
   1296c:	bne	129bc <test_typed_struct_buffer+0x2d4>
   12970:	ldr	r3, [fp, #-16]
   12974:	vldr	d7, [r3, #16]
   12978:	vldr	d6, [pc, #96]	; 129e0 <test_typed_struct_buffer+0x2f8>
   1297c:	vcmp.f64	d7, d6
   12980:	vmrs	APSR_nzcv, fpscr
   12984:	bne	129bc <test_typed_struct_buffer+0x2d4>
   12988:	ldr	r3, [fp, #-16]
   1298c:	ldrsb	r3, [r3, #24]
   12990:	cmp	r3, #8
   12994:	bne	129bc <test_typed_struct_buffer+0x2d4>
   12998:	ldr	r3, [fp, #-16]
   1299c:	ldrsh	r3, [r3, #26]
   129a0:	ldr	r2, [pc, #76]	; 129f4 <test_typed_struct_buffer+0x30c>
   129a4:	cmp	r3, r2
   129a8:	bne	129bc <test_typed_struct_buffer+0x2d4>
   129ac:	ldr	r3, [fp, #-16]
   129b0:	ldrsb	r3, [r3, #28]
   129b4:	cmn	r3, #17
   129b8:	beq	129cc <test_typed_struct_buffer+0x2e4>
   129bc:	ldr	r0, [pc, #132]	; 12a48 <test_typed_struct_buffer+0x360>
   129c0:	bl	0 <puts>
   129c4:	mvn	r3, #0
   129c8:	b	129d0 <test_typed_struct_buffer+0x2e8>
   129cc:	mov	r3, #0
   129d0:	mov	r0, r3
   129d4:	sub	sp, fp, #4
   129d8:	pop	{fp, pc}
   129dc:	nop			; (mov r0, r0)
   129e0:	.word	0xcccccccd
   129e4:	.word	0x4010cccc
   129e8:	.word	0x40400000
   129ec:	.word	0x40000000
   129f0:	.word	0x3f800000
   129f4:	.word	0x00000aaa
   129f8:	.word	0x00003da0
   129fc:	.word	0x00000954
   12a00:	.word	0x00001418
   12a04:	.word	0x00003094
   12a08:	.word	0x000030a0
   12a0c:	.word	0x00000956
   12a10:	.word	0x000030c0
   12a14:	.word	0x0000310c
   12a18:	.word	0x00000000
   12a1c:	.word	0x000031c0
   12a20:	.word	0x00000210
   12a24:	.word	0x0000312c
   12a28:	.word	0x00003150
   12a2c:	.word	0x00003158
   12a30:	.word	0x00003184
   12a34:	.word	0xa8f53ed2
   12a38:	.word	0x000031dc
   12a3c:	.word	0x00003204
   12a40:	.word	0x00003228
   12a44:	.word	0x00003248
   12a48:	.word	0x000031a8

00012a4c <gen_monster_benchmark>:
   12a4c:	push	{fp, lr}
   12a50:	add	fp, sp, #4
   12a54:	sub	sp, sp, #32
   12a58:	str	r0, [fp, #-32]	; 0xffffffe0
   12a5c:	ldr	r2, [pc, #328]	; 12bac <gen_monster_benchmark+0x160>
   12a60:	sub	r3, fp, #24
   12a64:	ldm	r2, {r0, r1, r2}
   12a68:	stmia	r3!, {r0, r1}
   12a6c:	strh	r2, [r3]
   12a70:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12a74:	bl	0 <flatcc_builder_reset>
   12a78:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12a7c:	bl	a2ac <MyGame_Example_Monster_start_as_root>
   12a80:	mov	r1, #80	; 0x50
   12a84:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12a88:	bl	8d30 <MyGame_Example_Monster_hp_add>
   12a8c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12a90:	bl	8c84 <MyGame_Example_Monster_pos_start>
   12a94:	str	r0, [fp, #-8]
   12a98:	ldr	r3, [fp, #-8]
   12a9c:	mov	r2, #1065353216	; 0x3f800000
   12aa0:	str	r2, [r3]
   12aa4:	ldr	r3, [fp, #-8]
   12aa8:	mov	r2, #1073741824	; 0x40000000
   12aac:	str	r2, [r3, #4]
   12ab0:	ldr	r3, [fp, #-8]
   12ab4:	ldr	r2, [pc, #244]	; 12bb0 <gen_monster_benchmark+0x164>
   12ab8:	str	r2, [r3, #8]
   12abc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12ac0:	bl	8cb8 <MyGame_Example_Monster_pos_end>
   12ac4:	ldr	r1, [pc, #232]	; 12bb4 <gen_monster_benchmark+0x168>
   12ac8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12acc:	bl	8fa8 <MyGame_Example_Monster_name_create_str>
   12ad0:	sub	r3, fp, #24
   12ad4:	mov	r2, #10
   12ad8:	mov	r1, r3
   12adc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12ae0:	bl	934c <MyGame_Example_Monster_inventory_create>
   12ae4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12ae8:	bl	9cf4 <MyGame_Example_Monster_test4_start>
   12aec:	mov	r1, #1
   12af0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12af4:	bl	9de4 <MyGame_Example_Monster_test4_extend>
   12af8:	str	r0, [fp, #-12]
   12afc:	ldr	r3, [fp, #-12]
   12b00:	mov	r2, #16
   12b04:	strh	r2, [r3]
   12b08:	ldr	r3, [fp, #-12]
   12b0c:	mov	r2, #32
   12b10:	strb	r2, [r3, #2]
   12b14:	mov	r1, #2
   12b18:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12b1c:	bl	9de4 <MyGame_Example_Monster_test4_extend>
   12b20:	str	r0, [fp, #-12]
   12b24:	ldr	r3, [fp, #-12]
   12b28:	mov	r2, #48	; 0x30
   12b2c:	strh	r2, [r3]
   12b30:	ldr	r3, [fp, #-12]
   12b34:	mov	r2, #64	; 0x40
   12b38:	strb	r2, [r3, #2]
   12b3c:	ldr	r3, [fp, #-12]
   12b40:	add	r3, r3, #4
   12b44:	mov	r2, #80	; 0x50
   12b48:	strh	r2, [r3]
   12b4c:	ldr	r3, [fp, #-12]
   12b50:	add	r3, r3, #4
   12b54:	mov	r2, #96	; 0x60
   12b58:	strb	r2, [r3, #2]
   12b5c:	mvn	r2, #127	; 0x7f
   12b60:	mov	r1, #112	; 0x70
   12b64:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12b68:	bl	9ef4 <MyGame_Example_Monster_test4_push_create>
   12b6c:	ldr	r3, [pc, #68]	; 12bb8 <gen_monster_benchmark+0x16c>
   12b70:	strh	r3, [fp, #-28]	; 0xffffffe4
   12b74:	mvn	r3, #110	; 0x6e
   12b78:	strb	r3, [fp, #-26]	; 0xffffffe6
   12b7c:	sub	r3, fp, #28
   12b80:	mov	r1, r3
   12b84:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12b88:	bl	9e94 <MyGame_Example_Monster_test4_push>
   12b8c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12b90:	bl	9d1c <MyGame_Example_Monster_test4_end>
   12b94:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12b98:	bl	a344 <MyGame_Example_Monster_end_as_root>
   12b9c:	mov	r3, #0
   12ba0:	mov	r0, r3
   12ba4:	sub	sp, fp, #4
   12ba8:	pop	{fp, pc}
   12bac:	.word	0x000019b0
   12bb0:	.word	0xc04ccccd
   12bb4:	.word	0x00000b1c
   12bb8:	.word	0x00000191

00012bbc <time_monster>:
   12bbc:	push	{fp, lr}
   12bc0:	add	fp, sp, #4
   12bc4:	sub	sp, sp, #40	; 0x28
   12bc8:	str	r0, [fp, #-40]	; 0xffffffd8
   12bcc:	ldr	r3, [pc, #128]	; 12c54 <time_monster+0x98>
   12bd0:	str	r3, [fp, #-12]
   12bd4:	ldr	r0, [pc, #124]	; 12c58 <time_monster+0x9c>
   12bd8:	bl	0 <puts>
   12bdc:	bl	cd1c <elapsed_realtime>
   12be0:	vstr	d0, [fp, #-20]	; 0xffffffec
   12be4:	mov	r3, #0
   12be8:	str	r3, [fp, #-8]
   12bec:	b	12c04 <time_monster+0x48>
   12bf0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12bf4:	bl	12a4c <gen_monster_benchmark>
   12bf8:	ldr	r3, [fp, #-8]
   12bfc:	add	r3, r3, #1
   12c00:	str	r3, [fp, #-8]
   12c04:	ldr	r2, [fp, #-8]
   12c08:	ldr	r3, [fp, #-12]
   12c0c:	cmp	r2, r3
   12c10:	blt	12bf0 <time_monster+0x34>
   12c14:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12c18:	bl	0 <flatcc_builder_get_buffer_size>
   12c1c:	str	r0, [fp, #-24]	; 0xffffffe8
   12c20:	bl	cd1c <elapsed_realtime>
   12c24:	vstr	d0, [fp, #-36]	; 0xffffffdc
   12c28:	ldr	r3, [pc, #44]	; 12c5c <time_monster+0xa0>
   12c2c:	ldr	r2, [fp, #-12]
   12c30:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12c34:	vldr	d1, [fp, #-36]	; 0xffffffdc
   12c38:	vldr	d0, [fp, #-20]	; 0xffffffec
   12c3c:	ldr	r0, [pc, #28]	; 12c60 <time_monster+0xa4>
   12c40:	bl	cdb4 <show_benchmark>
   12c44:	mov	r3, #0
   12c48:	mov	r0, r3
   12c4c:	sub	sp, fp, #4
   12c50:	pop	{fp, pc}
   12c54:	.word	0x000f4240
   12c58:	.word	0x00003270
   12c5c:	.word	0x00003284
   12c60:	.word	0x0000328c

00012c64 <gen_struct_buffer_benchmark>:
   12c64:	push	{fp, lr}
   12c68:	add	fp, sp, #4
   12c6c:	sub	sp, sp, #24
   12c70:	str	r0, [fp, #-24]	; 0xffffffe8
   12c74:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12c78:	bl	0 <flatcc_builder_reset>
   12c7c:	mvn	r3, #16
   12c80:	ldr	r2, [pc, #284]	; 12da4 <gen_struct_buffer_benchmark+0x140>
   12c84:	mov	r1, #8
   12c88:	vldr	d2, [pc, #256]	; 12d90 <gen_struct_buffer_benchmark+0x12c>
   12c8c:	vldr	s2, [pc, #260]	; 12d98 <gen_struct_buffer_benchmark+0x134>
   12c90:	vldr	s1, [pc, #260]	; 12d9c <gen_struct_buffer_benchmark+0x138>
   12c94:	vldr	s0, [pc, #260]	; 12da0 <gen_struct_buffer_benchmark+0x13c>
   12c98:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12c9c:	bl	7aa4 <MyGame_Example_Vec3_create_as_root>
   12ca0:	mov	r1, #0
   12ca4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12ca8:	bl	0 <flatcc_builder_get_direct_buffer>
   12cac:	str	r0, [fp, #-8]
   12cb0:	ldr	r3, [fp, #-8]
   12cb4:	cmp	r3, #0
   12cb8:	bne	12cc4 <gen_struct_buffer_benchmark+0x60>
   12cbc:	mvn	r3, #0
   12cc0:	b	12d84 <gen_struct_buffer_benchmark+0x120>
   12cc4:	mov	r1, #0
   12cc8:	ldr	r0, [fp, #-8]
   12ccc:	bl	1e6c <MyGame_Example_Vec3_as_root_with_identifier>
   12cd0:	str	r0, [fp, #-12]
   12cd4:	ldr	r3, [fp, #-12]
   12cd8:	str	r3, [fp, #-16]
   12cdc:	ldr	r0, [fp, #-16]
   12ce0:	bl	7958 <MyGame_Example_Vec3_from_pe>
   12ce4:	ldr	r3, [fp, #-16]
   12ce8:	vldr	s15, [r3]
   12cec:	vldr	s14, [pc, #172]	; 12da0 <gen_struct_buffer_benchmark+0x13c>
   12cf0:	vcmp.f32	s15, s14
   12cf4:	vmrs	APSR_nzcv, fpscr
   12cf8:	bne	12d78 <gen_struct_buffer_benchmark+0x114>
   12cfc:	ldr	r3, [fp, #-16]
   12d00:	vldr	s15, [r3, #4]
   12d04:	vldr	s14, [pc, #144]	; 12d9c <gen_struct_buffer_benchmark+0x138>
   12d08:	vcmp.f32	s15, s14
   12d0c:	vmrs	APSR_nzcv, fpscr
   12d10:	bne	12d78 <gen_struct_buffer_benchmark+0x114>
   12d14:	ldr	r3, [fp, #-16]
   12d18:	vldr	s15, [r3, #8]
   12d1c:	vldr	s14, [pc, #116]	; 12d98 <gen_struct_buffer_benchmark+0x134>
   12d20:	vcmp.f32	s15, s14
   12d24:	vmrs	APSR_nzcv, fpscr
   12d28:	bne	12d78 <gen_struct_buffer_benchmark+0x114>
   12d2c:	ldr	r3, [fp, #-16]
   12d30:	vldr	d7, [r3, #16]
   12d34:	vldr	d6, [pc, #84]	; 12d90 <gen_struct_buffer_benchmark+0x12c>
   12d38:	vcmp.f64	d7, d6
   12d3c:	vmrs	APSR_nzcv, fpscr
   12d40:	bne	12d78 <gen_struct_buffer_benchmark+0x114>
   12d44:	ldr	r3, [fp, #-16]
   12d48:	ldrsb	r3, [r3, #24]
   12d4c:	cmp	r3, #8
   12d50:	bne	12d78 <gen_struct_buffer_benchmark+0x114>
   12d54:	ldr	r3, [fp, #-16]
   12d58:	ldrsh	r3, [r3, #26]
   12d5c:	ldr	r2, [pc, #64]	; 12da4 <gen_struct_buffer_benchmark+0x140>
   12d60:	cmp	r3, r2
   12d64:	bne	12d78 <gen_struct_buffer_benchmark+0x114>
   12d68:	ldr	r3, [fp, #-16]
   12d6c:	ldrsb	r3, [r3, #28]
   12d70:	cmn	r3, #17
   12d74:	beq	12d80 <gen_struct_buffer_benchmark+0x11c>
   12d78:	mvn	r3, #0
   12d7c:	b	12d84 <gen_struct_buffer_benchmark+0x120>
   12d80:	mov	r3, #0
   12d84:	mov	r0, r3
   12d88:	sub	sp, fp, #4
   12d8c:	pop	{fp, pc}
   12d90:	.word	0xcccccccd
   12d94:	.word	0x4010cccc
   12d98:	.word	0x40400000
   12d9c:	.word	0x40000000
   12da0:	.word	0x3f800000
   12da4:	.word	0x00000aaa

00012da8 <time_struct_buffer>:
   12da8:	push	{fp, lr}
   12dac:	add	fp, sp, #4
   12db0:	sub	sp, sp, #48	; 0x30
   12db4:	str	r0, [fp, #-48]	; 0xffffffd0
   12db8:	ldr	r3, [pc, #172]	; 12e6c <time_struct_buffer+0xc4>
   12dbc:	str	r3, [fp, #-16]
   12dc0:	mov	r3, #0
   12dc4:	str	r3, [fp, #-12]
   12dc8:	ldr	r0, [pc, #160]	; 12e70 <time_struct_buffer+0xc8>
   12dcc:	bl	0 <puts>
   12dd0:	bl	cd1c <elapsed_realtime>
   12dd4:	vstr	d0, [fp, #-28]	; 0xffffffe4
   12dd8:	mov	r3, #0
   12ddc:	str	r3, [fp, #-8]
   12de0:	b	12e08 <time_struct_buffer+0x60>
   12de4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12de8:	bl	12c64 <gen_struct_buffer_benchmark>
   12dec:	mov	r2, r0
   12df0:	ldr	r3, [fp, #-12]
   12df4:	orr	r3, r3, r2
   12df8:	str	r3, [fp, #-12]
   12dfc:	ldr	r3, [fp, #-8]
   12e00:	add	r3, r3, #1
   12e04:	str	r3, [fp, #-8]
   12e08:	ldr	r2, [fp, #-8]
   12e0c:	ldr	r3, [fp, #-16]
   12e10:	cmp	r2, r3
   12e14:	blt	12de4 <time_struct_buffer+0x3c>
   12e18:	bl	cd1c <elapsed_realtime>
   12e1c:	vstr	d0, [fp, #-36]	; 0xffffffdc
   12e20:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12e24:	bl	0 <flatcc_builder_get_buffer_size>
   12e28:	str	r0, [fp, #-40]	; 0xffffffd8
   12e2c:	ldr	r3, [fp, #-12]
   12e30:	cmp	r3, #0
   12e34:	beq	12e40 <time_struct_buffer+0x98>
   12e38:	ldr	r0, [pc, #52]	; 12e74 <time_struct_buffer+0xcc>
   12e3c:	bl	0 <puts>
   12e40:	ldr	r3, [pc, #48]	; 12e78 <time_struct_buffer+0xd0>
   12e44:	ldr	r2, [fp, #-16]
   12e48:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12e4c:	vldr	d1, [fp, #-36]	; 0xffffffdc
   12e50:	vldr	d0, [fp, #-28]	; 0xffffffe4
   12e54:	ldr	r0, [pc, #32]	; 12e7c <time_struct_buffer+0xd4>
   12e58:	bl	cdb4 <show_benchmark>
   12e5c:	ldr	r3, [fp, #-12]
   12e60:	mov	r0, r3
   12e64:	sub	sp, fp, #4
   12e68:	pop	{fp, pc}
   12e6c:	.word	0x000f4240
   12e70:	.word	0x00003270
   12e74:	.word	0x000032a4
   12e78:	.word	0x00003284
   12e7c:	.word	0x000032b8

00012e80 <main>:
   12e80:	push	{fp, lr}
   12e84:	add	fp, sp, #4
   12e88:	sub	sp, sp, #248	; 0xf8
   12e8c:	str	r0, [fp, #-248]	; 0xffffff08
   12e90:	str	r1, [fp, #-252]	; 0xffffff04
   12e94:	sub	r3, fp, #240	; 0xf0
   12e98:	str	r3, [fp, #-8]
   12e9c:	ldr	r0, [fp, #-8]
   12ea0:	bl	0 <flatcc_builder_init>
   12ea4:	ldr	r0, [pc, #852]	; 13200 <main+0x380>
   12ea8:	bl	0 <puts>
   12eac:	ldr	r0, [fp, #-8]
   12eb0:	bl	d930 <test_table_with_emptystruct>
   12eb4:	mov	r3, r0
   12eb8:	cmp	r3, #0
   12ebc:	beq	12ed0 <main+0x50>
   12ec0:	ldr	r0, [pc, #828]	; 13204 <main+0x384>
   12ec4:	bl	0 <puts>
   12ec8:	mvn	r3, #0
   12ecc:	b	131f4 <main+0x374>
   12ed0:	ldr	r0, [fp, #-8]
   12ed4:	bl	d180 <test_enums>
   12ed8:	mov	r3, r0
   12edc:	cmp	r3, #0
   12ee0:	beq	12ef4 <main+0x74>
   12ee4:	ldr	r0, [pc, #792]	; 13204 <main+0x384>
   12ee8:	bl	0 <puts>
   12eec:	mvn	r3, #0
   12ef0:	b	131f4 <main+0x374>
   12ef4:	ldr	r0, [fp, #-8]
   12ef8:	bl	d454 <test_empty_monster>
   12efc:	mov	r3, r0
   12f00:	cmp	r3, #0
   12f04:	beq	12f18 <main+0x98>
   12f08:	ldr	r0, [pc, #756]	; 13204 <main+0x384>
   12f0c:	bl	0 <puts>
   12f10:	mvn	r3, #0
   12f14:	b	131f4 <main+0x374>
   12f18:	ldr	r0, [fp, #-8]
   12f1c:	bl	f16c <test_monster>
   12f20:	mov	r3, r0
   12f24:	cmp	r3, #0
   12f28:	beq	12f3c <main+0xbc>
   12f2c:	ldr	r0, [pc, #720]	; 13204 <main+0x384>
   12f30:	bl	0 <puts>
   12f34:	mvn	r3, #0
   12f38:	b	131f4 <main+0x374>
   12f3c:	ldr	r0, [fp, #-8]
   12f40:	bl	f224 <test_monster_with_size>
   12f44:	mov	r3, r0
   12f48:	cmp	r3, #0
   12f4c:	beq	12f60 <main+0xe0>
   12f50:	ldr	r0, [pc, #684]	; 13204 <main+0x384>
   12f54:	bl	0 <puts>
   12f58:	mvn	r3, #0
   12f5c:	b	131f4 <main+0x374>
   12f60:	ldr	r0, [fp, #-8]
   12f64:	bl	f368 <test_string>
   12f68:	mov	r3, r0
   12f6c:	cmp	r3, #0
   12f70:	beq	12f84 <main+0x104>
   12f74:	ldr	r0, [pc, #648]	; 13204 <main+0x384>
   12f78:	bl	0 <puts>
   12f7c:	mvn	r3, #0
   12f80:	b	131f4 <main+0x374>
   12f84:	ldr	r0, [fp, #-8]
   12f88:	bl	12440 <test_struct_buffer>
   12f8c:	mov	r3, r0
   12f90:	cmp	r3, #0
   12f94:	beq	12fa8 <main+0x128>
   12f98:	ldr	r0, [pc, #612]	; 13204 <main+0x384>
   12f9c:	bl	0 <puts>
   12fa0:	mvn	r3, #0
   12fa4:	b	131f4 <main+0x374>
   12fa8:	ldr	r0, [fp, #-8]
   12fac:	bl	d590 <test_typed_empty_monster>
   12fb0:	mov	r3, r0
   12fb4:	cmp	r3, #0
   12fb8:	beq	12fcc <main+0x14c>
   12fbc:	ldr	r0, [pc, #576]	; 13204 <main+0x384>
   12fc0:	bl	0 <puts>
   12fc4:	mvn	r3, #0
   12fc8:	b	131f4 <main+0x374>
   12fcc:	ldr	r0, [fp, #-8]
   12fd0:	bl	d9b4 <test_typed_table_with_emptystruct>
   12fd4:	mov	r3, r0
   12fd8:	cmp	r3, #0
   12fdc:	beq	12ff0 <main+0x170>
   12fe0:	ldr	r0, [pc, #540]	; 13204 <main+0x384>
   12fe4:	bl	0 <puts>
   12fe8:	mvn	r3, #0
   12fec:	b	131f4 <main+0x374>
   12ff0:	ldr	r0, [fp, #-8]
   12ff4:	bl	126e8 <test_typed_struct_buffer>
   12ff8:	mov	r3, r0
   12ffc:	cmp	r3, #0
   13000:	beq	13014 <main+0x194>
   13004:	ldr	r0, [pc, #504]	; 13204 <main+0x384>
   13008:	bl	0 <puts>
   1300c:	mvn	r3, #0
   13010:	b	131f4 <main+0x374>
   13014:	ldr	r0, [fp, #-8]
   13018:	bl	108fc <test_clone_slice>
   1301c:	mov	r3, r0
   13020:	cmp	r3, #0
   13024:	beq	13038 <main+0x1b8>
   13028:	ldr	r0, [pc, #468]	; 13204 <main+0x384>
   1302c:	bl	0 <puts>
   13030:	mvn	r3, #0
   13034:	b	131f4 <main+0x374>
   13038:	ldr	r0, [fp, #-8]
   1303c:	bl	11ce8 <test_add_set_defaults>
   13040:	mov	r3, r0
   13044:	cmp	r3, #0
   13048:	beq	1305c <main+0x1dc>
   1304c:	ldr	r0, [pc, #432]	; 13204 <main+0x384>
   13050:	bl	0 <puts>
   13054:	mvn	r3, #0
   13058:	b	131f4 <main+0x374>
   1305c:	ldr	r0, [fp, #-8]
   13060:	bl	10ff4 <test_create_add_field>
   13064:	mov	r3, r0
   13068:	cmp	r3, #0
   1306c:	beq	13080 <main+0x200>
   13070:	ldr	r0, [pc, #396]	; 13204 <main+0x384>
   13074:	bl	0 <puts>
   13078:	mvn	r3, #0
   1307c:	b	131f4 <main+0x374>
   13080:	ldr	r0, [fp, #-8]
   13084:	bl	11108 <test_union_vector>
   13088:	mov	r3, r0
   1308c:	cmp	r3, #0
   13090:	beq	130a4 <main+0x224>
   13094:	ldr	r0, [pc, #360]	; 13204 <main+0x384>
   13098:	bl	0 <puts>
   1309c:	mvn	r3, #0
   130a0:	b	131f4 <main+0x374>
   130a4:	ldr	r0, [fp, #-8]
   130a8:	bl	10720 <test_basic_sort>
   130ac:	mov	r3, r0
   130b0:	cmp	r3, #0
   130b4:	beq	130c8 <main+0x248>
   130b8:	ldr	r0, [pc, #324]	; 13204 <main+0x384>
   130bc:	bl	0 <puts>
   130c0:	mvn	r3, #0
   130c4:	b	131f4 <main+0x374>
   130c8:	ldr	r0, [fp, #-8]
   130cc:	bl	f594 <test_sort_find>
   130d0:	mov	r3, r0
   130d4:	cmp	r3, #0
   130d8:	beq	130ec <main+0x26c>
   130dc:	ldr	r0, [pc, #288]	; 13204 <main+0x384>
   130e0:	bl	0 <puts>
   130e4:	mvn	r3, #0
   130e8:	b	131f4 <main+0x374>
   130ec:	ldr	r0, [fp, #-8]
   130f0:	bl	fb14 <test_scan>
   130f4:	mov	r3, r0
   130f8:	cmp	r3, #0
   130fc:	beq	13110 <main+0x290>
   13100:	ldr	r0, [pc, #252]	; 13204 <main+0x384>
   13104:	bl	0 <puts>
   13108:	mvn	r3, #0
   1310c:	b	131f4 <main+0x374>
   13110:	ldr	r0, [fp, #-8]
   13114:	bl	11ecc <test_nested_buffer>
   13118:	mov	r3, r0
   1311c:	cmp	r3, #0
   13120:	beq	13134 <main+0x2b4>
   13124:	ldr	r0, [pc, #216]	; 13204 <main+0x384>
   13128:	bl	0 <puts>
   1312c:	mvn	r3, #0
   13130:	b	131f4 <main+0x374>
   13134:	ldr	r0, [fp, #-8]
   13138:	bl	1205c <test_nested_buffer_first>
   1313c:	mov	r3, r0
   13140:	cmp	r3, #0
   13144:	beq	13158 <main+0x2d8>
   13148:	ldr	r0, [pc, #180]	; 13204 <main+0x384>
   1314c:	bl	0 <puts>
   13150:	mvn	r3, #0
   13154:	b	131f4 <main+0x374>
   13158:	ldr	r0, [fp, #-8]
   1315c:	bl	121ec <test_nested_buffer_using_nest>
   13160:	mov	r3, r0
   13164:	cmp	r3, #0
   13168:	beq	1317c <main+0x2fc>
   1316c:	ldr	r0, [pc, #144]	; 13204 <main+0x384>
   13170:	bl	0 <puts>
   13174:	mvn	r3, #0
   13178:	b	131f4 <main+0x374>
   1317c:	ldr	r0, [fp, #-8]
   13180:	bl	1241c <verify_include>
   13184:	mov	r3, r0
   13188:	cmp	r3, #0
   1318c:	beq	131a0 <main+0x320>
   13190:	ldr	r0, [pc, #108]	; 13204 <main+0x384>
   13194:	bl	0 <puts>
   13198:	mvn	r3, #0
   1319c:	b	131f4 <main+0x374>
   131a0:	ldr	r0, [fp, #-8]
   131a4:	bl	d1a4 <test_type_aliases>
   131a8:	mov	r3, r0
   131ac:	cmp	r3, #0
   131b0:	beq	131c4 <main+0x344>
   131b4:	ldr	r0, [pc, #72]	; 13204 <main+0x384>
   131b8:	bl	0 <puts>
   131bc:	mvn	r3, #0
   131c0:	b	131f4 <main+0x374>
   131c4:	ldr	r0, [fp, #-8]
   131c8:	bl	11400 <test_mixed_type_union>
   131cc:	mov	r3, r0
   131d0:	cmp	r3, #0
   131d4:	beq	131e8 <main+0x368>
   131d8:	ldr	r0, [pc, #36]	; 13204 <main+0x384>
   131dc:	bl	0 <puts>
   131e0:	mvn	r3, #0
   131e4:	b	131f4 <main+0x374>
   131e8:	ldr	r0, [fp, #-8]
   131ec:	bl	0 <flatcc_builder_clear>
   131f0:	mov	r3, #0
   131f4:	mov	r0, r3
   131f8:	sub	sp, fp, #4
   131fc:	pop	{fp, pc}
   13200:	.word	0x000032e8
   13204:	.word	0x00003304
