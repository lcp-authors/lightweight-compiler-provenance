
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-debug.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_debug_data>:
       0:	push	{r4, r5, fp, lr}
       4:	add	fp, sp, #8
       8:	sub	sp, sp, #560	; 0x230
       c:	str	r0, [fp, #-12]
      10:	str	r1, [fp, #-16]
      14:	str	r2, [fp, #-20]	; 0xffffffec
      18:	ldr	r0, [fp, #-12]
      1c:	movw	r1, #0
      20:	cmp	r0, r1
      24:	bne	44 <print_debug_data+0x44>
      28:	movw	r0, #0
      2c:	movt	r0, #0
      30:	ldr	r0, [r0]
      34:	sub	r1, fp, #24
      38:	bl	0 <coda_open>
      3c:	str	r0, [sp, #16]
      40:	b	6c <print_debug_data+0x6c>
      44:	movw	r0, #0
      48:	movt	r0, #0
      4c:	ldr	r0, [r0]
      50:	ldr	r1, [fp, #-12]
      54:	ldr	r2, [fp, #-16]
      58:	ldr	r3, [fp, #-20]	; 0xffffffec
      5c:	sub	ip, fp, #24
      60:	str	ip, [sp]
      64:	bl	0 <coda_open_as>
      68:	str	r0, [sp, #16]
      6c:	ldr	r0, [sp, #16]
      70:	cmp	r0, #0
      74:	beq	ec <print_debug_data+0xec>
      78:	bl	0 <coda_get_errno>
      7c:	ldr	r0, [r0]
      80:	cmn	r0, #21
      84:	bne	ec <print_debug_data+0xec>
      88:	movw	r0, #0
      8c:	bl	0 <coda_set_option_use_mmap>
      90:	ldr	r1, [fp, #-12]
      94:	movw	r2, #0
      98:	cmp	r1, r2
      9c:	bne	bc <print_debug_data+0xbc>
      a0:	movw	r0, #0
      a4:	movt	r0, #0
      a8:	ldr	r0, [r0]
      ac:	sub	r1, fp, #24
      b0:	bl	0 <coda_open>
      b4:	str	r0, [sp, #16]
      b8:	b	e4 <print_debug_data+0xe4>
      bc:	movw	r0, #0
      c0:	movt	r0, #0
      c4:	ldr	r0, [r0]
      c8:	ldr	r1, [fp, #-12]
      cc:	ldr	r2, [fp, #-16]
      d0:	ldr	r3, [fp, #-20]	; 0xffffffec
      d4:	sub	ip, fp, #24
      d8:	str	ip, [sp]
      dc:	bl	0 <coda_open_as>
      e0:	str	r0, [sp, #16]
      e4:	movw	r0, #1
      e8:	bl	0 <coda_set_option_use_mmap>
      ec:	ldr	r0, [sp, #16]
      f0:	cmp	r0, #0
      f4:	beq	104 <print_debug_data+0x104>
      f8:	movw	r0, #0
      fc:	movt	r0, #0
     100:	blx	r0
     104:	ldr	r0, [fp, #-24]	; 0xffffffe8
     108:	add	r1, sp, #20
     10c:	bl	0 <coda_get_product_format>
     110:	cmp	r0, #0
     114:	beq	124 <print_debug_data+0x124>
     118:	movw	r0, #0
     11c:	movt	r0, #0
     120:	blx	r0
     124:	ldr	r0, [sp, #20]
     128:	cmp	r0, #0
     12c:	movw	r0, #1
     130:	str	r0, [sp, #12]
     134:	beq	160 <print_debug_data+0x160>
     138:	ldr	r0, [sp, #20]
     13c:	cmp	r0, #1
     140:	movw	r0, #1
     144:	str	r0, [sp, #12]
     148:	beq	160 <print_debug_data+0x160>
     14c:	ldr	r0, [sp, #20]
     150:	cmp	r0, #2
     154:	movw	r0, #0
     158:	moveq	r0, #1
     15c:	str	r0, [sp, #12]
     160:	ldr	r0, [sp, #12]
     164:	and	r0, r0, #1
     168:	movw	r1, #0
     16c:	movt	r1, #0
     170:	str	r0, [r1]
     174:	ldr	r1, [fp, #-24]	; 0xffffffe8
     178:	add	r0, sp, #24
     17c:	bl	0 <coda_cursor_set_product>
     180:	cmp	r0, #0
     184:	beq	194 <print_debug_data+0x194>
     188:	movw	r0, #0
     18c:	movt	r0, #0
     190:	blx	r0
     194:	movw	r0, #0
     198:	movt	r0, #0
     19c:	ldr	r0, [r0]
     1a0:	movw	r1, #0
     1a4:	cmp	r0, r1
     1a8:	beq	1e0 <print_debug_data+0x1e0>
     1ac:	movw	r0, #0
     1b0:	movt	r0, #0
     1b4:	ldr	r1, [r0]
     1b8:	add	r0, sp, #24
     1bc:	bl	0 <coda_cursor_goto>
     1c0:	str	r0, [sp, #16]
     1c4:	ldr	r0, [sp, #16]
     1c8:	cmp	r0, #0
     1cc:	beq	1dc <print_debug_data+0x1dc>
     1d0:	movw	r0, #0
     1d4:	movt	r0, #0
     1d8:	blx	r0
     1dc:	b	1e0 <print_debug_data+0x1e0>
     1e0:	movw	r0, #0
     1e4:	bl	0 <coda_set_option_perform_boundary_checks>
     1e8:	add	r1, sp, #24
     1ec:	str	r0, [sp, #8]
     1f0:	mov	r0, r1
     1f4:	movw	r1, #0
     1f8:	bl	20c <print_data>
     1fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
     200:	bl	0 <coda_close>
     204:	sub	sp, fp, #8
     208:	pop	{r4, r5, fp, pc}

0000020c <print_data>:
     20c:	push	{r4, r5, fp, lr}
     210:	add	fp, sp, #8
     214:	sub	sp, sp, #1040	; 0x410
     218:	str	r0, [fp, #-12]
     21c:	str	r1, [fp, #-16]
     220:	ldr	r0, [fp, #-12]
     224:	sub	r1, fp, #24
     228:	bl	0 <coda_cursor_has_attributes>
     22c:	cmp	r0, #0
     230:	beq	240 <print_data+0x34>
     234:	movw	r0, #0
     238:	movt	r0, #0
     23c:	blx	r0
     240:	ldr	r0, [fp, #-24]	; 0xffffffe8
     244:	cmp	r0, #0
     248:	beq	2c0 <print_data+0xb4>
     24c:	ldr	r0, [fp, #-12]
     250:	bl	0 <coda_cursor_goto_attributes>
     254:	cmp	r0, #0
     258:	beq	268 <print_data+0x5c>
     25c:	movw	r0, #0
     260:	movt	r0, #0
     264:	blx	r0
     268:	movw	r0, #0
     26c:	movt	r0, #0
     270:	bl	1108 <fi_printf>
     274:	movw	r1, #0
     278:	movt	r1, #0
     27c:	ldr	r2, [r1]
     280:	add	r2, r2, #1
     284:	str	r2, [r1]
     288:	ldr	r1, [fp, #-12]
     28c:	ldr	r2, [fp, #-16]
     290:	str	r0, [sp, #76]	; 0x4c
     294:	mov	r0, r1
     298:	mov	r1, r2
     29c:	bl	20c <print_data>
     2a0:	movw	r0, #0
     2a4:	movt	r0, #0
     2a8:	ldr	r1, [r0]
     2ac:	mvn	r2, #0
     2b0:	add	r1, r1, r2
     2b4:	str	r1, [r0]
     2b8:	ldr	r0, [fp, #-12]
     2bc:	bl	0 <coda_cursor_goto_parent>
     2c0:	ldr	r0, [fp, #-12]
     2c4:	sub	r1, fp, #20
     2c8:	bl	0 <coda_cursor_get_type_class>
     2cc:	cmp	r0, #0
     2d0:	beq	2e0 <print_data+0xd4>
     2d4:	movw	r0, #0
     2d8:	movt	r0, #0
     2dc:	blx	r0
     2e0:	ldr	r0, [fp, #-20]	; 0xffffffec
     2e4:	cmp	r0, #6
     2e8:	str	r0, [sp, #72]	; 0x48
     2ec:	bhi	1100 <print_data+0xef4>
     2f0:	add	r0, pc, #8
     2f4:	ldr	r1, [sp, #72]	; 0x48
     2f8:	ldr	r0, [r0, r1, lsl #2]
     2fc:	mov	pc, r0
     300:	.word	0x0000031c
     304:	.word	0x0000071c
     308:	.word	0x00000a54
     30c:	.word	0x00000a54
     310:	.word	0x00000a54
     314:	.word	0x00000a54
     318:	.word	0x00000f0c
     31c:	ldr	r0, [fp, #-12]
     320:	sub	r1, fp, #28
     324:	bl	0 <coda_cursor_get_num_elements>
     328:	cmp	r0, #0
     32c:	beq	33c <print_data+0x130>
     330:	movw	r0, #0
     334:	movt	r0, #0
     338:	blx	r0
     33c:	ldr	r0, [fp, #-28]	; 0xffffffe4
     340:	cmp	r0, #0
     344:	ble	718 <print_data+0x50c>
     348:	ldr	r0, [fp, #-12]
     34c:	sub	r1, fp, #32
     350:	bl	0 <coda_cursor_get_type>
     354:	cmp	r0, #0
     358:	beq	368 <print_data+0x15c>
     35c:	movw	r0, #0
     360:	movt	r0, #0
     364:	blx	r0
     368:	ldr	r0, [fp, #-32]	; 0xffffffe0
     36c:	sub	r1, fp, #36	; 0x24
     370:	bl	0 <coda_type_get_record_union_status>
     374:	cmp	r0, #0
     378:	beq	388 <print_data+0x17c>
     37c:	movw	r0, #0
     380:	movt	r0, #0
     384:	blx	r0
     388:	ldr	r0, [fp, #-36]	; 0xffffffdc
     38c:	cmp	r0, #0
     390:	beq	538 <print_data+0x32c>
     394:	ldr	r0, [fp, #-12]
     398:	sub	r1, fp, #40	; 0x28
     39c:	bl	0 <coda_cursor_get_available_union_field_index>
     3a0:	cmp	r0, #0
     3a4:	beq	3b4 <print_data+0x1a8>
     3a8:	movw	r0, #0
     3ac:	movt	r0, #0
     3b0:	blx	r0
     3b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     3b8:	ldr	r1, [fp, #-40]	; 0xffffffd8
     3bc:	sub	r2, fp, #44	; 0x2c
     3c0:	bl	0 <coda_type_get_record_field_name>
     3c4:	cmp	r0, #0
     3c8:	beq	3d8 <print_data+0x1cc>
     3cc:	movw	r0, #0
     3d0:	movt	r0, #0
     3d4:	blx	r0
     3d8:	ldr	r0, [fp, #-12]
     3dc:	ldr	r1, [fp, #-40]	; 0xffffffd8
     3e0:	bl	0 <coda_cursor_goto_record_field_by_index>
     3e4:	cmp	r0, #0
     3e8:	beq	3f8 <print_data+0x1ec>
     3ec:	movw	r0, #0
     3f0:	movt	r0, #0
     3f4:	blx	r0
     3f8:	ldr	r1, [fp, #-44]	; 0xffffffd4
     3fc:	movw	r0, #0
     400:	movt	r0, #0
     404:	bl	1108 <fi_printf>
     408:	movw	r1, #0
     40c:	movt	r1, #0
     410:	ldr	r1, [r1]
     414:	cmp	r1, #0
     418:	beq	4a8 <print_data+0x29c>
     41c:	ldr	r0, [fp, #-12]
     420:	sub	r1, fp, #56	; 0x38
     424:	bl	0 <coda_cursor_get_file_bit_offset>
     428:	cmp	r0, #0
     42c:	beq	43c <print_data+0x230>
     430:	movw	r0, #0
     434:	movt	r0, #0
     438:	blx	r0
     43c:	ldr	r0, [fp, #-52]	; 0xffffffcc
     440:	cmp	r0, #0
     444:	bmi	4a4 <print_data+0x298>
     448:	b	44c <print_data+0x240>
     44c:	ldr	r0, [fp, #-56]	; 0xffffffc8
     450:	ldr	r1, [fp, #-52]	; 0xffffffcc
     454:	lsr	r0, r0, #3
     458:	orr	r0, r0, r1, lsl #29
     45c:	asr	r1, r1, #3
     460:	sub	r2, fp, #77	; 0x4d
     464:	str	r2, [sp, #68]	; 0x44
     468:	bl	0 <coda_str64>
     46c:	movw	r0, #0
     470:	movt	r0, #0
     474:	ldr	r1, [sp, #68]	; 0x44
     478:	bl	1170 <ff_printf>
     47c:	ldrb	r1, [fp, #-56]	; 0xffffffc8
     480:	tst	r1, #7
     484:	beq	4a0 <print_data+0x294>
     488:	b	48c <print_data+0x280>
     48c:	ldr	r0, [fp, #-56]	; 0xffffffc8
     490:	and	r1, r0, #7
     494:	movw	r0, #0
     498:	movt	r0, #0
     49c:	bl	1170 <ff_printf>
     4a0:	b	4a4 <print_data+0x298>
     4a4:	b	4a8 <print_data+0x29c>
     4a8:	movw	r0, #0
     4ac:	movt	r0, #0
     4b0:	bl	1170 <ff_printf>
     4b4:	movw	r1, #0
     4b8:	movt	r1, #0
     4bc:	ldr	r2, [r1]
     4c0:	add	r2, r2, #1
     4c4:	str	r2, [r1]
     4c8:	movw	r1, #0
     4cc:	movt	r1, #0
     4d0:	ldr	r1, [r1]
     4d4:	cmp	r1, #0
     4d8:	blt	4f4 <print_data+0x2e8>
     4dc:	ldr	r0, [fp, #-16]
     4e0:	movw	r1, #0
     4e4:	movt	r1, #0
     4e8:	ldr	r1, [r1]
     4ec:	cmp	r0, r1
     4f0:	bge	508 <print_data+0x2fc>
     4f4:	ldr	r0, [fp, #-12]
     4f8:	ldr	r1, [fp, #-16]
     4fc:	add	r1, r1, #1
     500:	bl	20c <print_data>
     504:	b	514 <print_data+0x308>
     508:	movw	r0, #0
     50c:	movt	r0, #0
     510:	bl	1108 <fi_printf>
     514:	movw	r0, #0
     518:	movt	r0, #0
     51c:	ldr	r1, [r0]
     520:	mvn	r2, #0
     524:	add	r1, r1, r2
     528:	str	r1, [r0]
     52c:	ldr	r0, [fp, #-12]
     530:	bl	0 <coda_cursor_goto_parent>
     534:	b	714 <print_data+0x508>
     538:	ldr	r0, [fp, #-12]
     53c:	bl	0 <coda_cursor_goto_first_record_field>
     540:	cmp	r0, #0
     544:	beq	554 <print_data+0x348>
     548:	movw	r0, #0
     54c:	movt	r0, #0
     550:	blx	r0
     554:	movw	r0, #0
     558:	str	r0, [fp, #-40]	; 0xffffffd8
     55c:	ldr	r0, [fp, #-40]	; 0xffffffd8
     560:	ldr	r1, [fp, #-28]	; 0xffffffe4
     564:	cmp	r0, r1
     568:	bge	70c <print_data+0x500>
     56c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     570:	ldr	r1, [fp, #-40]	; 0xffffffd8
     574:	sub	r2, fp, #84	; 0x54
     578:	bl	0 <coda_type_get_record_field_name>
     57c:	cmp	r0, #0
     580:	beq	590 <print_data+0x384>
     584:	movw	r0, #0
     588:	movt	r0, #0
     58c:	blx	r0
     590:	ldr	r1, [fp, #-84]	; 0xffffffac
     594:	movw	r0, #0
     598:	movt	r0, #0
     59c:	bl	1108 <fi_printf>
     5a0:	movw	r1, #0
     5a4:	movt	r1, #0
     5a8:	ldr	r1, [r1]
     5ac:	cmp	r1, #0
     5b0:	beq	640 <print_data+0x434>
     5b4:	ldr	r0, [fp, #-12]
     5b8:	sub	r1, fp, #96	; 0x60
     5bc:	bl	0 <coda_cursor_get_file_bit_offset>
     5c0:	cmp	r0, #0
     5c4:	beq	5d4 <print_data+0x3c8>
     5c8:	movw	r0, #0
     5cc:	movt	r0, #0
     5d0:	blx	r0
     5d4:	ldr	r0, [fp, #-92]	; 0xffffffa4
     5d8:	cmp	r0, #0
     5dc:	bmi	63c <print_data+0x430>
     5e0:	b	5e4 <print_data+0x3d8>
     5e4:	ldr	r0, [fp, #-96]	; 0xffffffa0
     5e8:	ldr	r1, [fp, #-92]	; 0xffffffa4
     5ec:	lsr	r0, r0, #3
     5f0:	orr	r0, r0, r1, lsl #29
     5f4:	asr	r1, r1, #3
     5f8:	sub	r2, fp, #117	; 0x75
     5fc:	str	r2, [sp, #64]	; 0x40
     600:	bl	0 <coda_str64>
     604:	movw	r0, #0
     608:	movt	r0, #0
     60c:	ldr	r1, [sp, #64]	; 0x40
     610:	bl	1170 <ff_printf>
     614:	ldrb	r1, [fp, #-96]	; 0xffffffa0
     618:	tst	r1, #7
     61c:	beq	638 <print_data+0x42c>
     620:	b	624 <print_data+0x418>
     624:	ldr	r0, [fp, #-96]	; 0xffffffa0
     628:	and	r1, r0, #7
     62c:	movw	r0, #0
     630:	movt	r0, #0
     634:	bl	1170 <ff_printf>
     638:	b	63c <print_data+0x430>
     63c:	b	640 <print_data+0x434>
     640:	movw	r0, #0
     644:	movt	r0, #0
     648:	bl	1170 <ff_printf>
     64c:	movw	r1, #0
     650:	movt	r1, #0
     654:	ldr	r2, [r1]
     658:	add	r2, r2, #1
     65c:	str	r2, [r1]
     660:	movw	r1, #0
     664:	movt	r1, #0
     668:	ldr	r1, [r1]
     66c:	cmp	r1, #0
     670:	blt	68c <print_data+0x480>
     674:	ldr	r0, [fp, #-16]
     678:	movw	r1, #0
     67c:	movt	r1, #0
     680:	ldr	r1, [r1]
     684:	cmp	r0, r1
     688:	bge	6a0 <print_data+0x494>
     68c:	ldr	r0, [fp, #-12]
     690:	ldr	r1, [fp, #-16]
     694:	add	r1, r1, #1
     698:	bl	20c <print_data>
     69c:	b	6ac <print_data+0x4a0>
     6a0:	movw	r0, #0
     6a4:	movt	r0, #0
     6a8:	bl	1108 <fi_printf>
     6ac:	movw	r0, #0
     6b0:	movt	r0, #0
     6b4:	ldr	r1, [r0]
     6b8:	mvn	r2, #0
     6bc:	add	r1, r1, r2
     6c0:	str	r1, [r0]
     6c4:	ldr	r0, [fp, #-40]	; 0xffffffd8
     6c8:	ldr	r1, [fp, #-28]	; 0xffffffe4
     6cc:	sub	r1, r1, #1
     6d0:	cmp	r0, r1
     6d4:	bge	6f8 <print_data+0x4ec>
     6d8:	ldr	r0, [fp, #-12]
     6dc:	bl	0 <coda_cursor_goto_next_record_field>
     6e0:	cmp	r0, #0
     6e4:	beq	6f4 <print_data+0x4e8>
     6e8:	movw	r0, #0
     6ec:	movt	r0, #0
     6f0:	blx	r0
     6f4:	b	6f8 <print_data+0x4ec>
     6f8:	b	6fc <print_data+0x4f0>
     6fc:	ldr	r0, [fp, #-40]	; 0xffffffd8
     700:	add	r0, r0, #1
     704:	str	r0, [fp, #-40]	; 0xffffffd8
     708:	b	55c <print_data+0x350>
     70c:	ldr	r0, [fp, #-12]
     710:	bl	0 <coda_cursor_goto_parent>
     714:	b	718 <print_data+0x50c>
     718:	b	1100 <print_data+0xef4>
     71c:	sub	r2, fp, #152	; 0x98
     720:	ldr	r0, [fp, #-12]
     724:	sub	r1, fp, #156	; 0x9c
     728:	bl	0 <coda_cursor_get_array_dim>
     72c:	cmp	r0, #0
     730:	beq	740 <print_data+0x534>
     734:	movw	r0, #0
     738:	movt	r0, #0
     73c:	blx	r0
     740:	ldr	r0, [fp, #-156]	; 0xffffff64
     744:	cmp	r0, #0
     748:	blt	a50 <print_data+0x844>
     74c:	movw	r0, #1
     750:	str	r0, [fp, #-160]	; 0xffffff60
     754:	movw	r0, #0
     758:	str	r0, [fp, #-196]	; 0xffffff3c
     75c:	ldr	r0, [fp, #-196]	; 0xffffff3c
     760:	ldr	r1, [fp, #-156]	; 0xffffff64
     764:	cmp	r0, r1
     768:	bge	7a8 <print_data+0x59c>
     76c:	ldr	r0, [fp, #-196]	; 0xffffff3c
     770:	sub	r1, fp, #152	; 0x98
     774:	ldr	r0, [r1, r0, lsl #2]
     778:	ldr	r1, [fp, #-160]	; 0xffffff60
     77c:	mul	r0, r1, r0
     780:	str	r0, [fp, #-160]	; 0xffffff60
     784:	ldr	r0, [fp, #-196]	; 0xffffff3c
     788:	sub	r1, fp, #192	; 0xc0
     78c:	add	r0, r1, r0, lsl #2
     790:	movw	r1, #0
     794:	str	r1, [r0]
     798:	ldr	r0, [fp, #-196]	; 0xffffff3c
     79c:	add	r0, r0, #1
     7a0:	str	r0, [fp, #-196]	; 0xffffff3c
     7a4:	b	75c <print_data+0x550>
     7a8:	ldr	r0, [fp, #-160]	; 0xffffff60
     7ac:	cmp	r0, #0
     7b0:	ble	a4c <print_data+0x840>
     7b4:	ldr	r0, [fp, #-12]
     7b8:	bl	0 <coda_cursor_goto_first_array_element>
     7bc:	cmp	r0, #0
     7c0:	beq	7d0 <print_data+0x5c4>
     7c4:	movw	r0, #0
     7c8:	movt	r0, #0
     7cc:	blx	r0
     7d0:	movw	r0, #0
     7d4:	str	r0, [fp, #-196]	; 0xffffff3c
     7d8:	ldr	r0, [fp, #-196]	; 0xffffff3c
     7dc:	ldr	r1, [fp, #-160]	; 0xffffff60
     7e0:	cmp	r0, r1
     7e4:	bge	a44 <print_data+0x838>
     7e8:	movw	r0, #0
     7ec:	movt	r0, #0
     7f0:	bl	1108 <fi_printf>
     7f4:	movw	r1, #0
     7f8:	str	r1, [fp, #-200]	; 0xffffff38
     7fc:	ldr	r0, [fp, #-200]	; 0xffffff38
     800:	ldr	r1, [fp, #-156]	; 0xffffff64
     804:	cmp	r0, r1
     808:	bge	85c <print_data+0x650>
     80c:	ldr	r0, [fp, #-200]	; 0xffffff38
     810:	sub	r1, fp, #192	; 0xc0
     814:	add	r0, r1, r0, lsl #2
     818:	ldr	r1, [r0]
     81c:	movw	r0, #0
     820:	movt	r0, #0
     824:	bl	1170 <ff_printf>
     828:	ldr	r1, [fp, #-200]	; 0xffffff38
     82c:	ldr	r2, [fp, #-156]	; 0xffffff64
     830:	sub	r2, r2, #1
     834:	cmp	r1, r2
     838:	bge	848 <print_data+0x63c>
     83c:	movw	r0, #0
     840:	movt	r0, #0
     844:	bl	1170 <ff_printf>
     848:	b	84c <print_data+0x640>
     84c:	ldr	r0, [fp, #-200]	; 0xffffff38
     850:	add	r0, r0, #1
     854:	str	r0, [fp, #-200]	; 0xffffff38
     858:	b	7fc <print_data+0x5f0>
     85c:	movw	r0, #0
     860:	movt	r0, #0
     864:	bl	1170 <ff_printf>
     868:	movw	r1, #0
     86c:	movt	r1, #0
     870:	ldr	r1, [r1]
     874:	cmp	r1, #0
     878:	beq	908 <print_data+0x6fc>
     87c:	ldr	r0, [fp, #-12]
     880:	sub	r1, fp, #208	; 0xd0
     884:	bl	0 <coda_cursor_get_file_bit_offset>
     888:	cmp	r0, #0
     88c:	beq	89c <print_data+0x690>
     890:	movw	r0, #0
     894:	movt	r0, #0
     898:	blx	r0
     89c:	ldr	r0, [fp, #-204]	; 0xffffff34
     8a0:	cmp	r0, #0
     8a4:	bmi	904 <print_data+0x6f8>
     8a8:	b	8ac <print_data+0x6a0>
     8ac:	ldr	r0, [fp, #-208]	; 0xffffff30
     8b0:	ldr	r1, [fp, #-204]	; 0xffffff34
     8b4:	lsr	r0, r0, #3
     8b8:	orr	r0, r0, r1, lsl #29
     8bc:	asr	r1, r1, #3
     8c0:	sub	r2, fp, #229	; 0xe5
     8c4:	str	r2, [sp, #60]	; 0x3c
     8c8:	bl	0 <coda_str64>
     8cc:	movw	r0, #0
     8d0:	movt	r0, #0
     8d4:	ldr	r1, [sp, #60]	; 0x3c
     8d8:	bl	1170 <ff_printf>
     8dc:	ldrb	r1, [fp, #-208]	; 0xffffff30
     8e0:	tst	r1, #7
     8e4:	beq	900 <print_data+0x6f4>
     8e8:	b	8ec <print_data+0x6e0>
     8ec:	ldr	r0, [fp, #-208]	; 0xffffff30
     8f0:	and	r1, r0, #7
     8f4:	movw	r0, #0
     8f8:	movt	r0, #0
     8fc:	bl	1170 <ff_printf>
     900:	b	904 <print_data+0x6f8>
     904:	b	908 <print_data+0x6fc>
     908:	movw	r0, #0
     90c:	movt	r0, #0
     910:	bl	1170 <ff_printf>
     914:	movw	r1, #0
     918:	movt	r1, #0
     91c:	ldr	r2, [r1]
     920:	add	r2, r2, #1
     924:	str	r2, [r1]
     928:	movw	r1, #0
     92c:	movt	r1, #0
     930:	ldr	r1, [r1]
     934:	cmp	r1, #0
     938:	blt	954 <print_data+0x748>
     93c:	ldr	r0, [fp, #-16]
     940:	movw	r1, #0
     944:	movt	r1, #0
     948:	ldr	r1, [r1]
     94c:	cmp	r0, r1
     950:	bge	968 <print_data+0x75c>
     954:	ldr	r0, [fp, #-12]
     958:	ldr	r1, [fp, #-16]
     95c:	add	r1, r1, #1
     960:	bl	20c <print_data>
     964:	b	974 <print_data+0x768>
     968:	movw	r0, #0
     96c:	movt	r0, #0
     970:	bl	1108 <fi_printf>
     974:	movw	r0, #0
     978:	movt	r0, #0
     97c:	ldr	r1, [r0]
     980:	mvn	r2, #0
     984:	add	r1, r1, r2
     988:	str	r1, [r0]
     98c:	ldr	r0, [fp, #-156]	; 0xffffff64
     990:	sub	r0, r0, #1
     994:	str	r0, [fp, #-200]	; 0xffffff38
     998:	ldr	r0, [fp, #-200]	; 0xffffff38
     99c:	cmp	r0, #0
     9a0:	blt	9fc <print_data+0x7f0>
     9a4:	ldr	r0, [fp, #-200]	; 0xffffff38
     9a8:	sub	r1, fp, #192	; 0xc0
     9ac:	ldr	r2, [r1, r0, lsl #2]
     9b0:	add	r2, r2, #1
     9b4:	str	r2, [r1, r0, lsl #2]
     9b8:	ldr	r0, [fp, #-200]	; 0xffffff38
     9bc:	ldr	r1, [r1, r0, lsl #2]
     9c0:	sub	r2, fp, #152	; 0x98
     9c4:	add	r0, r2, r0, lsl #2
     9c8:	ldr	r0, [r0]
     9cc:	cmp	r1, r0
     9d0:	bne	9f4 <print_data+0x7e8>
     9d4:	ldr	r0, [fp, #-200]	; 0xffffff38
     9d8:	sub	r1, r0, #1
     9dc:	str	r1, [fp, #-200]	; 0xffffff38
     9e0:	sub	r1, fp, #192	; 0xc0
     9e4:	add	r0, r1, r0, lsl #2
     9e8:	movw	r1, #0
     9ec:	str	r1, [r0]
     9f0:	b	9f8 <print_data+0x7ec>
     9f4:	b	9fc <print_data+0x7f0>
     9f8:	b	998 <print_data+0x78c>
     9fc:	ldr	r0, [fp, #-196]	; 0xffffff3c
     a00:	ldr	r1, [fp, #-160]	; 0xffffff60
     a04:	sub	r1, r1, #1
     a08:	cmp	r0, r1
     a0c:	bge	a30 <print_data+0x824>
     a10:	ldr	r0, [fp, #-12]
     a14:	bl	0 <coda_cursor_goto_next_array_element>
     a18:	cmp	r0, #0
     a1c:	beq	a2c <print_data+0x820>
     a20:	movw	r0, #0
     a24:	movt	r0, #0
     a28:	blx	r0
     a2c:	b	a30 <print_data+0x824>
     a30:	b	a34 <print_data+0x828>
     a34:	ldr	r0, [fp, #-196]	; 0xffffff3c
     a38:	add	r0, r0, #1
     a3c:	str	r0, [fp, #-196]	; 0xffffff3c
     a40:	b	7d8 <print_data+0x5cc>
     a44:	ldr	r0, [fp, #-12]
     a48:	bl	0 <coda_cursor_goto_parent>
     a4c:	b	a50 <print_data+0x844>
     a50:	b	1100 <print_data+0xef4>
     a54:	ldr	r0, [fp, #-12]
     a58:	sub	r1, fp, #240	; 0xf0
     a5c:	bl	0 <coda_cursor_has_ascii_content>
     a60:	cmp	r0, #0
     a64:	beq	a74 <print_data+0x868>
     a68:	movw	r0, #0
     a6c:	movt	r0, #0
     a70:	blx	r0
     a74:	ldr	r0, [fp, #-240]	; 0xffffff10
     a78:	cmp	r0, #0
     a7c:	beq	b60 <print_data+0x954>
     a80:	ldr	r0, [fp, #-12]
     a84:	sub	r1, fp, #244	; 0xf4
     a88:	bl	0 <coda_cursor_get_string_length>
     a8c:	cmp	r0, #0
     a90:	beq	aa0 <print_data+0x894>
     a94:	movw	r0, #0
     a98:	movt	r0, #0
     a9c:	blx	r0
     aa0:	ldr	r0, [fp, #-244]	; 0xffffff0c
     aa4:	add	r0, r0, #1
     aa8:	bl	0 <malloc>
     aac:	str	r0, [fp, #-248]	; 0xffffff08
     ab0:	ldr	r0, [fp, #-248]	; 0xffffff08
     ab4:	movw	r1, #0
     ab8:	cmp	r0, r1
     abc:	bne	af4 <print_data+0x8e8>
     ac0:	ldr	r0, [fp, #-244]	; 0xffffff0c
     ac4:	add	r2, r0, #1
     ac8:	mvn	r0, #0
     acc:	movw	r1, #0
     ad0:	movt	r1, #0
     ad4:	movw	r3, #0
     ad8:	movt	r3, #0
     adc:	movw	ip, #410	; 0x19a
     ae0:	str	ip, [sp]
     ae4:	bl	0 <coda_set_error>
     ae8:	movw	r0, #0
     aec:	movt	r0, #0
     af0:	blx	r0
     af4:	ldr	r0, [fp, #-12]
     af8:	ldr	r1, [fp, #-248]	; 0xffffff08
     afc:	ldr	r2, [fp, #-244]	; 0xffffff0c
     b00:	add	r2, r2, #1
     b04:	bl	0 <coda_cursor_read_string>
     b08:	cmp	r0, #0
     b0c:	beq	b1c <print_data+0x910>
     b10:	movw	r0, #0
     b14:	movt	r0, #0
     b18:	blx	r0
     b1c:	movw	r0, #0
     b20:	movt	r0, #0
     b24:	bl	1108 <fi_printf>
     b28:	ldr	r1, [fp, #-248]	; 0xffffff08
     b2c:	ldr	r2, [fp, #-244]	; 0xffffff0c
     b30:	str	r0, [sp, #56]	; 0x38
     b34:	mov	r0, r1
     b38:	mov	r1, r2
     b3c:	bl	11d4 <print_escaped>
     b40:	ldr	r1, [fp, #-244]	; 0xffffff0c
     b44:	movw	r0, #0
     b48:	movt	r0, #0
     b4c:	bl	1170 <ff_printf>
     b50:	ldr	r1, [fp, #-248]	; 0xffffff08
     b54:	str	r0, [sp, #52]	; 0x34
     b58:	mov	r0, r1
     b5c:	bl	0 <free>
     b60:	ldr	r0, [fp, #-12]
     b64:	sub	r1, fp, #236	; 0xec
     b68:	bl	0 <coda_cursor_get_read_type>
     b6c:	cmp	r0, #0
     b70:	beq	b80 <print_data+0x974>
     b74:	movw	r0, #0
     b78:	movt	r0, #0
     b7c:	blx	r0
     b80:	ldr	r0, [fp, #-236]	; 0xffffff14
     b84:	add	r0, r0, #1
     b88:	cmp	r0, #13
     b8c:	str	r0, [sp, #48]	; 0x30
     b90:	bhi	f08 <print_data+0xcfc>
     b94:	add	r0, pc, #8
     b98:	ldr	r1, [sp, #48]	; 0x30
     b9c:	ldr	r0, [r0, r1, lsl #2]
     ba0:	mov	pc, r0
     ba4:	.word	0x00000ed4
     ba8:	.word	0x00000d78
     bac:	.word	0x00000dac
     bb0:	.word	0x00000d78
     bb4:	.word	0x00000dac
     bb8:	.word	0x00000d78
     bbc:	.word	0x00000dac
     bc0:	.word	0x00000de0
     bc4:	.word	0x00000e2c
     bc8:	.word	0x00000e78
     bcc:	.word	0x00000e78
     bd0:	.word	0x00000ed4
     bd4:	.word	0x00000ed4
     bd8:	.word	0x00000bdc
     bdc:	ldr	r0, [fp, #-12]
     be0:	sub	r1, fp, #256	; 0x100
     be4:	bl	0 <coda_cursor_get_bit_size>
     be8:	cmp	r0, #0
     bec:	beq	bfc <print_data+0x9f0>
     bf0:	movw	r0, #0
     bf4:	movt	r0, #0
     bf8:	blx	r0
     bfc:	ldr	r0, [fp, #-256]	; 0xffffff00
     c00:	ldr	r1, [fp, #-252]	; 0xffffff04
     c04:	lsr	r2, r0, #3
     c08:	orr	r2, r2, r1, lsl #29
     c0c:	asr	r1, r1, #3
     c10:	and	r0, r0, #7
     c14:	adds	r3, r2, #1
     c18:	adc	ip, r1, #0
     c1c:	cmp	r0, #0
     c20:	movne	r2, r3
     c24:	cmp	r0, #0
     c28:	movne	r1, ip
     c2c:	str	r2, [fp, #-264]	; 0xfffffef8
     c30:	str	r1, [fp, #-260]	; 0xfffffefc
     c34:	ldr	r0, [fp, #-264]	; 0xfffffef8
     c38:	bl	0 <malloc>
     c3c:	str	r0, [fp, #-268]	; 0xfffffef4
     c40:	ldr	r0, [fp, #-268]	; 0xfffffef4
     c44:	movw	r1, #0
     c48:	cmp	r0, r1
     c4c:	bne	c80 <print_data+0xa74>
     c50:	ldr	r2, [fp, #-264]	; 0xfffffef8
     c54:	mvn	r0, #0
     c58:	movw	r1, #0
     c5c:	movt	r1, #0
     c60:	movw	r3, #0
     c64:	movt	r3, #0
     c68:	movw	ip, #447	; 0x1bf
     c6c:	str	ip, [sp]
     c70:	bl	0 <coda_set_error>
     c74:	movw	r0, #0
     c78:	movt	r0, #0
     c7c:	blx	r0
     c80:	ldr	r0, [fp, #-12]
     c84:	ldr	r1, [fp, #-268]	; 0xfffffef4
     c88:	ldr	r2, [fp, #-256]	; 0xffffff00
     c8c:	ldr	r3, [fp, #-252]	; 0xffffff04
     c90:	mov	ip, sp
     c94:	str	r3, [ip, #4]
     c98:	str	r2, [ip]
     c9c:	mov	r2, #0
     ca0:	str	r2, [sp, #44]	; 0x2c
     ca4:	ldr	r3, [sp, #44]	; 0x2c
     ca8:	bl	0 <coda_cursor_read_bits>
     cac:	cmp	r0, #0
     cb0:	beq	cc0 <print_data+0xab4>
     cb4:	movw	r0, #0
     cb8:	movt	r0, #0
     cbc:	blx	r0
     cc0:	movw	r0, #0
     cc4:	movt	r0, #0
     cc8:	bl	1108 <fi_printf>
     ccc:	ldr	r1, [fp, #-268]	; 0xfffffef4
     cd0:	ldr	r2, [fp, #-264]	; 0xfffffef8
     cd4:	str	r0, [sp, #40]	; 0x28
     cd8:	mov	r0, r1
     cdc:	mov	r1, r2
     ce0:	bl	11d4 <print_escaped>
     ce4:	movw	r0, #0
     ce8:	movt	r0, #0
     cec:	bl	1170 <ff_printf>
     cf0:	ldr	r1, [fp, #-256]	; 0xffffff00
     cf4:	ldr	r2, [fp, #-252]	; 0xffffff04
     cf8:	lsr	r1, r1, #3
     cfc:	orr	r1, r1, r2, lsl #29
     d00:	asr	r2, r2, #3
     d04:	sub	lr, fp, #256	; 0x100
     d08:	sub	r3, lr, #33	; 0x21
     d0c:	str	r0, [sp, #36]	; 0x24
     d10:	mov	r0, r1
     d14:	mov	r1, r2
     d18:	mov	r2, r3
     d1c:	str	r3, [sp, #32]
     d20:	bl	0 <coda_str64>
     d24:	movw	r0, #0
     d28:	movt	r0, #0
     d2c:	ldr	r1, [sp, #32]
     d30:	bl	1170 <ff_printf>
     d34:	ldrb	r1, [fp, #-256]	; 0xffffff00
     d38:	tst	r1, #7
     d3c:	beq	d58 <print_data+0xb4c>
     d40:	b	d44 <print_data+0xb38>
     d44:	ldr	r0, [fp, #-256]	; 0xffffff00
     d48:	and	r1, r0, #7
     d4c:	movw	r0, #0
     d50:	movt	r0, #0
     d54:	bl	1170 <ff_printf>
     d58:	movw	r0, #0
     d5c:	movt	r0, #0
     d60:	bl	1170 <ff_printf>
     d64:	ldr	r1, [fp, #-268]	; 0xfffffef4
     d68:	str	r0, [sp, #28]
     d6c:	mov	r0, r1
     d70:	bl	0 <free>
     d74:	b	f08 <print_data+0xcfc>
     d78:	ldr	r0, [fp, #-12]
     d7c:	sub	r1, fp, #296	; 0x128
     d80:	bl	0 <coda_cursor_read_int32>
     d84:	cmp	r0, #0
     d88:	beq	d98 <print_data+0xb8c>
     d8c:	movw	r0, #0
     d90:	movt	r0, #0
     d94:	blx	r0
     d98:	ldr	r1, [fp, #-296]	; 0xfffffed8
     d9c:	movw	r0, #0
     da0:	movt	r0, #0
     da4:	bl	1108 <fi_printf>
     da8:	b	f08 <print_data+0xcfc>
     dac:	ldr	r0, [fp, #-12]
     db0:	sub	r1, fp, #300	; 0x12c
     db4:	bl	0 <coda_cursor_read_uint32>
     db8:	cmp	r0, #0
     dbc:	beq	dcc <print_data+0xbc0>
     dc0:	movw	r0, #0
     dc4:	movt	r0, #0
     dc8:	blx	r0
     dcc:	ldr	r1, [fp, #-300]	; 0xfffffed4
     dd0:	movw	r0, #0
     dd4:	movt	r0, #0
     dd8:	bl	1108 <fi_printf>
     ddc:	b	f08 <print_data+0xcfc>
     de0:	ldr	r0, [fp, #-12]
     de4:	sub	r1, fp, #312	; 0x138
     de8:	bl	0 <coda_cursor_read_int64>
     dec:	cmp	r0, #0
     df0:	beq	e00 <print_data+0xbf4>
     df4:	movw	r0, #0
     df8:	movt	r0, #0
     dfc:	blx	r0
     e00:	sub	lr, fp, #256	; 0x100
     e04:	sub	r2, lr, #77	; 0x4d
     e08:	ldr	r0, [fp, #-312]	; 0xfffffec8
     e0c:	ldr	r1, [fp, #-308]	; 0xfffffecc
     e10:	bl	0 <coda_str64>
     e14:	sub	lr, fp, #256	; 0x100
     e18:	sub	r1, lr, #77	; 0x4d
     e1c:	movw	r0, #0
     e20:	movt	r0, #0
     e24:	bl	1108 <fi_printf>
     e28:	b	f08 <print_data+0xcfc>
     e2c:	ldr	r0, [fp, #-12]
     e30:	sub	r1, fp, #344	; 0x158
     e34:	bl	0 <coda_cursor_read_uint64>
     e38:	cmp	r0, #0
     e3c:	beq	e4c <print_data+0xc40>
     e40:	movw	r0, #0
     e44:	movt	r0, #0
     e48:	blx	r0
     e4c:	sub	lr, fp, #256	; 0x100
     e50:	sub	r2, lr, #109	; 0x6d
     e54:	ldr	r0, [fp, #-344]	; 0xfffffea8
     e58:	ldr	r1, [fp, #-340]	; 0xfffffeac
     e5c:	bl	0 <coda_str64u>
     e60:	sub	lr, fp, #256	; 0x100
     e64:	sub	r1, lr, #109	; 0x6d
     e68:	movw	r0, #0
     e6c:	movt	r0, #0
     e70:	bl	1108 <fi_printf>
     e74:	b	f08 <print_data+0xcfc>
     e78:	ldr	r0, [fp, #-12]
     e7c:	sub	r1, fp, #376	; 0x178
     e80:	bl	0 <coda_cursor_read_double>
     e84:	cmp	r0, #0
     e88:	beq	e98 <print_data+0xc8c>
     e8c:	movw	r0, #0
     e90:	movt	r0, #0
     e94:	blx	r0
     e98:	ldr	r0, [fp, #-236]	; 0xffffff14
     e9c:	cmp	r0, #8
     ea0:	bne	ebc <print_data+0xcb0>
     ea4:	vldr	d16, [fp, #-376]	; 0xfffffe88
     ea8:	movw	r0, #0
     eac:	movt	r0, #0
     eb0:	vmov	r2, r3, d16
     eb4:	bl	1108 <fi_printf>
     eb8:	b	ed0 <print_data+0xcc4>
     ebc:	vldr	d16, [fp, #-376]	; 0xfffffe88
     ec0:	movw	r0, #0
     ec4:	movt	r0, #0
     ec8:	vmov	r2, r3, d16
     ecc:	bl	1108 <fi_printf>
     ed0:	b	f08 <print_data+0xcfc>
     ed4:	ldr	r0, [fp, #-240]	; 0xffffff10
     ed8:	cmp	r0, #0
     edc:	beq	ee4 <print_data+0xcd8>
     ee0:	b	f04 <print_data+0xcf8>
     ee4:	movw	r0, #0
     ee8:	movt	r0, #0
     eec:	movw	r1, #0
     ef0:	movt	r1, #0
     ef4:	movw	r2, #548	; 0x224
     ef8:	movw	r3, #0
     efc:	movt	r3, #0
     f00:	bl	0 <__assert_fail>
     f04:	b	f08 <print_data+0xcfc>
     f08:	b	1100 <print_data+0xef4>
     f0c:	ldr	r0, [fp, #-12]
     f10:	sub	r1, fp, #380	; 0x17c
     f14:	bl	0 <coda_cursor_get_special_type>
     f18:	cmp	r0, #0
     f1c:	beq	f2c <print_data+0xd20>
     f20:	movw	r0, #0
     f24:	movt	r0, #0
     f28:	blx	r0
     f2c:	ldr	r0, [fp, #-380]	; 0xfffffe84
     f30:	cmp	r0, #0
     f34:	beq	f88 <print_data+0xd7c>
     f38:	ldr	r0, [fp, #-12]
     f3c:	add	r1, sp, #144	; 0x90
     f40:	mov	r2, r1
     f44:	str	r0, [sp, #24]
     f48:	mov	r0, r2
     f4c:	ldr	r2, [sp, #24]
     f50:	str	r1, [sp, #20]
     f54:	mov	r1, r2
     f58:	movw	r2, #520	; 0x208
     f5c:	bl	0 <memcpy>
     f60:	ldr	r0, [sp, #20]
     f64:	bl	0 <coda_cursor_use_base_type_of_special_type>
     f68:	cmp	r0, #0
     f6c:	beq	f7c <print_data+0xd70>
     f70:	movw	r0, #0
     f74:	movt	r0, #0
     f78:	blx	r0
     f7c:	ldr	r1, [fp, #-16]
     f80:	add	r0, sp, #144	; 0x90
     f84:	bl	20c <print_data>
     f88:	ldr	r0, [fp, #-380]	; 0xfffffe84
     f8c:	bl	0 <coda_type_get_special_type_name>
     f90:	movw	r1, #0
     f94:	movt	r1, #0
     f98:	str	r0, [sp, #16]
     f9c:	mov	r0, r1
     fa0:	ldr	r1, [sp, #16]
     fa4:	bl	1108 <fi_printf>
     fa8:	ldr	r1, [fp, #-380]	; 0xfffffe84
     fac:	cmp	r1, #3
     fb0:	str	r1, [sp, #12]
     fb4:	bhi	10fc <print_data+0xef0>
     fb8:	add	r0, pc, #8
     fbc:	ldr	r1, [sp, #12]
     fc0:	ldr	r0, [r0, r1, lsl #2]
     fc4:	mov	pc, r0
     fc8:	.word	0x00000fd8
     fcc:	.word	0x00000fe8
     fd0:	.word	0x00001020
     fd4:	.word	0x000010bc
     fd8:	movw	r0, #0
     fdc:	movt	r0, #0
     fe0:	bl	1170 <ff_printf>
     fe4:	b	10fc <print_data+0xef0>
     fe8:	ldr	r0, [fp, #-12]
     fec:	add	r1, sp, #136	; 0x88
     ff0:	bl	0 <coda_cursor_read_double>
     ff4:	cmp	r0, #0
     ff8:	beq	1008 <print_data+0xdfc>
     ffc:	movw	r0, #0
    1000:	movt	r0, #0
    1004:	blx	r0
    1008:	vldr	d16, [sp, #136]	; 0x88
    100c:	movw	r0, #0
    1010:	movt	r0, #0
    1014:	vmov	r2, r3, d16
    1018:	bl	1170 <ff_printf>
    101c:	b	10fc <print_data+0xef0>
    1020:	ldr	r0, [fp, #-12]
    1024:	add	r1, sp, #128	; 0x80
    1028:	bl	0 <coda_cursor_read_double>
    102c:	cmp	r0, #0
    1030:	beq	1040 <print_data+0xe34>
    1034:	movw	r0, #0
    1038:	movt	r0, #0
    103c:	blx	r0
    1040:	vldr	d0, [sp, #128]	; 0x80
    1044:	bl	0 <coda_isNaN>
    1048:	cmp	r0, #0
    104c:	bne	1060 <print_data+0xe54>
    1050:	vldr	d0, [sp, #128]	; 0x80
    1054:	bl	0 <coda_isInf>
    1058:	cmp	r0, #0
    105c:	beq	1078 <print_data+0xe6c>
    1060:	vldr	d16, [sp, #128]	; 0x80
    1064:	movw	r0, #0
    1068:	movt	r0, #0
    106c:	vmov	r2, r3, d16
    1070:	bl	1170 <ff_printf>
    1074:	b	10b8 <print_data+0xeac>
    1078:	add	r1, sp, #101	; 0x65
    107c:	vldr	d0, [sp, #128]	; 0x80
    1080:	movw	r0, #0
    1084:	movt	r0, #0
    1088:	bl	0 <coda_time_double_to_string>
    108c:	cmp	r0, #0
    1090:	beq	10a4 <print_data+0xe98>
    1094:	movw	r0, #0
    1098:	movt	r0, #0
    109c:	bl	1170 <ff_printf>
    10a0:	b	10b4 <print_data+0xea8>
    10a4:	add	r1, sp, #101	; 0x65
    10a8:	movw	r0, #0
    10ac:	movt	r0, #0
    10b0:	bl	1170 <ff_printf>
    10b4:	b	10b8 <print_data+0xeac>
    10b8:	b	10fc <print_data+0xef0>
    10bc:	ldr	r0, [fp, #-12]
    10c0:	add	r1, sp, #88	; 0x58
    10c4:	add	r2, sp, #80	; 0x50
    10c8:	bl	0 <coda_cursor_read_complex_double_split>
    10cc:	cmp	r0, #0
    10d0:	beq	10e0 <print_data+0xed4>
    10d4:	movw	r0, #0
    10d8:	movt	r0, #0
    10dc:	blx	r0
    10e0:	vldr	d16, [sp, #88]	; 0x58
    10e4:	vldr	d17, [sp, #80]	; 0x50
    10e8:	movw	r0, #0
    10ec:	movt	r0, #0
    10f0:	vmov	r2, r3, d16
    10f4:	vstr	d17, [sp]
    10f8:	bl	1170 <ff_printf>
    10fc:	b	1100 <print_data+0xef4>
    1100:	sub	sp, fp, #8
    1104:	pop	{r4, r5, fp, pc}

00001108 <fi_printf>:
    1108:	sub	sp, sp, #12
    110c:	push	{fp, lr}
    1110:	mov	fp, sp
    1114:	sub	sp, sp, #20
    1118:	str	r3, [fp, #16]
    111c:	str	r2, [fp, #12]
    1120:	str	r1, [fp, #8]
    1124:	str	r0, [fp, #-4]
    1128:	bl	1374 <indent>
    112c:	add	r0, fp, #8
    1130:	str	r0, [sp, #8]
    1134:	movw	r0, #0
    1138:	movt	r0, #0
    113c:	ldr	r0, [r0]
    1140:	ldr	r1, [fp, #-4]
    1144:	ldr	r2, [sp, #8]
    1148:	bl	0 <vfprintf>
    114c:	str	r0, [fp, #-8]
    1150:	add	r0, sp, #8
    1154:	ldr	r1, [fp, #-8]
    1158:	str	r0, [sp, #4]
    115c:	mov	r0, r1
    1160:	mov	sp, fp
    1164:	pop	{fp, lr}
    1168:	add	sp, sp, #12
    116c:	bx	lr

00001170 <ff_printf>:
    1170:	sub	sp, sp, #12
    1174:	push	{fp, lr}
    1178:	mov	fp, sp
    117c:	sub	sp, sp, #20
    1180:	str	r3, [fp, #16]
    1184:	str	r2, [fp, #12]
    1188:	str	r1, [fp, #8]
    118c:	str	r0, [fp, #-4]
    1190:	add	r0, fp, #8
    1194:	str	r0, [sp, #8]
    1198:	movw	r0, #0
    119c:	movt	r0, #0
    11a0:	ldr	r0, [r0]
    11a4:	ldr	r1, [fp, #-4]
    11a8:	ldr	r2, [sp, #8]
    11ac:	bl	0 <vfprintf>
    11b0:	str	r0, [fp, #-8]
    11b4:	add	r0, sp, #8
    11b8:	ldr	r1, [fp, #-8]
    11bc:	str	r0, [sp, #4]
    11c0:	mov	r0, r1
    11c4:	mov	sp, fp
    11c8:	pop	{fp, lr}
    11cc:	add	sp, sp, #12
    11d0:	bx	lr

000011d4 <print_escaped>:
    11d4:	push	{fp, lr}
    11d8:	mov	fp, sp
    11dc:	sub	sp, sp, #24
    11e0:	str	r0, [fp, #-4]
    11e4:	str	r1, [fp, #-8]
    11e8:	movw	r0, #0
    11ec:	str	r0, [sp, #12]
    11f0:	ldr	r0, [sp, #12]
    11f4:	ldr	r1, [fp, #-8]
    11f8:	cmp	r0, r1
    11fc:	bge	136c <print_escaped+0x198>
    1200:	ldr	r0, [fp, #-4]
    1204:	ldr	r1, [sp, #12]
    1208:	ldrb	r0, [r0, r1]
    120c:	strb	r0, [sp, #11]
    1210:	ldrb	r0, [sp, #11]
    1214:	mov	r1, r0
    1218:	cmp	r0, #7
    121c:	str	r1, [sp, #4]
    1220:	beq	1298 <print_escaped+0xc4>
    1224:	b	1228 <print_escaped+0x54>
    1228:	ldr	r0, [sp, #4]
    122c:	cmp	r0, #8
    1230:	beq	12a8 <print_escaped+0xd4>
    1234:	b	1238 <print_escaped+0x64>
    1238:	ldr	r0, [sp, #4]
    123c:	cmp	r0, #9
    1240:	beq	12b8 <print_escaped+0xe4>
    1244:	b	1248 <print_escaped+0x74>
    1248:	ldr	r0, [sp, #4]
    124c:	cmp	r0, #10
    1250:	beq	12c8 <print_escaped+0xf4>
    1254:	b	1258 <print_escaped+0x84>
    1258:	ldr	r0, [sp, #4]
    125c:	cmp	r0, #11
    1260:	beq	12d8 <print_escaped+0x104>
    1264:	b	1268 <print_escaped+0x94>
    1268:	ldr	r0, [sp, #4]
    126c:	cmp	r0, #12
    1270:	beq	12e8 <print_escaped+0x114>
    1274:	b	1278 <print_escaped+0xa4>
    1278:	ldr	r0, [sp, #4]
    127c:	cmp	r0, #13
    1280:	beq	12f8 <print_escaped+0x124>
    1284:	b	1288 <print_escaped+0xb4>
    1288:	ldr	r0, [sp, #4]
    128c:	cmp	r0, #92	; 0x5c
    1290:	beq	1308 <print_escaped+0x134>
    1294:	b	1318 <print_escaped+0x144>
    1298:	movw	r0, #0
    129c:	movt	r0, #0
    12a0:	bl	1170 <ff_printf>
    12a4:	b	1358 <print_escaped+0x184>
    12a8:	movw	r0, #0
    12ac:	movt	r0, #0
    12b0:	bl	1170 <ff_printf>
    12b4:	b	1358 <print_escaped+0x184>
    12b8:	movw	r0, #0
    12bc:	movt	r0, #0
    12c0:	bl	1170 <ff_printf>
    12c4:	b	1358 <print_escaped+0x184>
    12c8:	movw	r0, #0
    12cc:	movt	r0, #0
    12d0:	bl	1170 <ff_printf>
    12d4:	b	1358 <print_escaped+0x184>
    12d8:	movw	r0, #0
    12dc:	movt	r0, #0
    12e0:	bl	1170 <ff_printf>
    12e4:	b	1358 <print_escaped+0x184>
    12e8:	movw	r0, #0
    12ec:	movt	r0, #0
    12f0:	bl	1170 <ff_printf>
    12f4:	b	1358 <print_escaped+0x184>
    12f8:	movw	r0, #0
    12fc:	movt	r0, #0
    1300:	bl	1170 <ff_printf>
    1304:	b	1358 <print_escaped+0x184>
    1308:	movw	r0, #0
    130c:	movt	r0, #0
    1310:	bl	1170 <ff_printf>
    1314:	b	1358 <print_escaped+0x184>
    1318:	ldrb	r0, [sp, #11]
    131c:	cmp	r0, #32
    1320:	blt	1344 <print_escaped+0x170>
    1324:	ldrb	r0, [sp, #11]
    1328:	cmp	r0, #126	; 0x7e
    132c:	bgt	1344 <print_escaped+0x170>
    1330:	ldrb	r1, [sp, #11]
    1334:	movw	r0, #0
    1338:	movt	r0, #0
    133c:	bl	1170 <ff_printf>
    1340:	b	1354 <print_escaped+0x180>
    1344:	ldrb	r1, [sp, #11]
    1348:	movw	r0, #0
    134c:	movt	r0, #0
    1350:	bl	1170 <ff_printf>
    1354:	b	1358 <print_escaped+0x184>
    1358:	b	135c <print_escaped+0x188>
    135c:	ldr	r0, [sp, #12]
    1360:	add	r0, r0, #1
    1364:	str	r0, [sp, #12]
    1368:	b	11f0 <print_escaped+0x1c>
    136c:	mov	sp, fp
    1370:	pop	{fp, pc}

00001374 <indent>:
    1374:	push	{fp, lr}
    1378:	mov	fp, sp
    137c:	sub	sp, sp, #8
    1380:	movw	r0, #0
    1384:	movt	r0, #0
    1388:	ldr	r0, [r0]
    138c:	cmp	r0, #0
    1390:	blt	1398 <indent+0x24>
    1394:	b	13b8 <indent+0x44>
    1398:	movw	r0, #0
    139c:	movt	r0, #0
    13a0:	movw	r1, #0
    13a4:	movt	r1, #0
    13a8:	movw	r2, #44	; 0x2c
    13ac:	movw	r3, #0
    13b0:	movt	r3, #0
    13b4:	bl	0 <__assert_fail>
    13b8:	movw	r0, #0
    13bc:	movt	r0, #0
    13c0:	ldr	r0, [r0]
    13c4:	str	r0, [sp, #4]
    13c8:	ldr	r0, [sp, #4]
    13cc:	cmp	r0, #0
    13d0:	ble	1400 <indent+0x8c>
    13d4:	movw	r0, #0
    13d8:	movt	r0, #0
    13dc:	ldr	r0, [r0]
    13e0:	movw	r1, #0
    13e4:	movt	r1, #0
    13e8:	bl	0 <fprintf>
    13ec:	ldr	r0, [sp, #4]
    13f0:	mvn	r1, #0
    13f4:	add	r0, r0, r1
    13f8:	str	r0, [sp, #4]
    13fc:	b	13c8 <indent+0x54>
    1400:	mov	sp, fp
    1404:	pop	{fp, pc}
