
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-grib-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
       0:	strd	r4, [sp, #-24]!	; 0xffffffe8
       4:	strd	r6, [sp, #8]
       8:	str	fp, [sp, #16]
       c:	str	lr, [sp, #20]
      10:	add	fp, sp, #20
      14:	sub	sp, sp, #96	; 0x60
      18:	str	r0, [fp, #-96]	; 0xffffffa0
      1c:	strd	r2, [fp, #-108]	; 0xffffff94
      20:	ldr	r3, [fp, #-96]	; 0xffffffa0
      24:	ldr	r3, [r3, #48]	; 0x30
      28:	cmp	r3, #0
      2c:	beq	110 <read_bytes+0x110>
      30:	ldrd	r0, [fp, #-108]	; 0xffffff94
      34:	ldrd	r2, [fp, #4]
      38:	adds	r6, r0, r2
      3c:	adc	r7, r1, r3
      40:	ldr	r3, [fp, #-96]	; 0xffffffa0
      44:	ldrd	r2, [r3, #40]	; 0x28
      48:	cmp	r7, r3
      4c:	cmpeq	r6, r2
      50:	bls	ec <read_bytes+0xec>
      54:	ldr	r3, [fp, #-96]	; 0xffffffa0
      58:	ldr	r3, [r3, #16]
      5c:	cmp	r3, #0
      60:	beq	74 <read_bytes+0x74>
      64:	ldr	r3, [fp, #-96]	; 0xffffffa0
      68:	ldr	r3, [r3, #16]
      6c:	cmp	r3, #1
      70:	bne	8c <read_bytes+0x8c>
      74:	movw	r1, #0
      78:	movt	r1, #0
      7c:	mvn	r0, #300	; 0x12c
      80:	bl	0 <coda_set_error>
      84:	mvn	r3, #0
      88:	b	1e8 <read_bytes+0x1e8>
      8c:	sub	r3, fp, #44	; 0x2c
      90:	mov	r2, r3
      94:	ldrd	r0, [fp, #4]
      98:	bl	0 <coda_str64>
      9c:	sub	r3, fp, #68	; 0x44
      a0:	mov	r2, r3
      a4:	ldrd	r0, [fp, #-108]	; 0xffffff94
      a8:	bl	0 <coda_str64>
      ac:	ldr	r3, [fp, #-96]	; 0xffffffa0
      b0:	ldrd	r0, [r3, #40]	; 0x28
      b4:	sub	r3, fp, #92	; 0x5c
      b8:	mov	r2, r3
      bc:	bl	0 <coda_str64>
      c0:	sub	r1, fp, #68	; 0x44
      c4:	sub	r2, fp, #44	; 0x2c
      c8:	sub	r3, fp, #92	; 0x5c
      cc:	str	r3, [sp]
      d0:	mov	r3, r1
      d4:	movw	r1, #0
      d8:	movt	r1, #0
      dc:	mvn	r0, #300	; 0x12c
      e0:	bl	0 <coda_set_error>
      e4:	mvn	r3, #0
      e8:	b	1e8 <read_bytes+0x1e8>
      ec:	ldr	r3, [fp, #-96]	; 0xffffffa0
      f0:	ldr	r2, [r3, #48]	; 0x30
      f4:	ldr	r3, [fp, #-108]	; 0xffffff94
      f8:	add	r3, r2, r3
      fc:	ldr	r2, [fp, #4]
     100:	mov	r1, r3
     104:	ldr	r0, [fp, #12]
     108:	bl	0 <memcpy>
     10c:	b	1e4 <read_bytes+0x1e4>
     110:	ldr	r3, [fp, #-96]	; 0xffffffa0
     114:	ldr	r3, [r3, #16]
     118:	cmp	r3, #0
     11c:	beq	150 <read_bytes+0x150>
     120:	ldr	r3, [fp, #-96]	; 0xffffffa0
     124:	ldr	r3, [r3, #16]
     128:	cmp	r3, #1
     12c:	beq	150 <read_bytes+0x150>
     130:	movw	r3, #0
     134:	movt	r3, #0
     138:	mov	r2, #83	; 0x53
     13c:	movw	r1, #0
     140:	movt	r1, #0
     144:	movw	r0, #0
     148:	movt	r0, #0
     14c:	bl	0 <__assert_fail>
     150:	ldrd	r0, [fp, #-108]	; 0xffffff94
     154:	ldrd	r2, [fp, #4]
     158:	adds	r4, r0, r2
     15c:	adc	r5, r1, r3
     160:	ldr	r3, [fp, #-96]	; 0xffffffa0
     164:	ldrd	r2, [r3, #8]
     168:	cmp	r5, r3
     16c:	cmpeq	r4, r2
     170:	bls	18c <read_bytes+0x18c>
     174:	movw	r1, #0
     178:	movt	r1, #0
     17c:	mvn	r0, #300	; 0x12c
     180:	bl	0 <coda_set_error>
     184:	mvn	r3, #0
     188:	b	1e8 <read_bytes+0x1e8>
     18c:	ldr	r3, [fp, #-96]	; 0xffffffa0
     190:	ldr	r0, [r3, #56]	; 0x38
     194:	ldr	r2, [fp, #4]
     198:	ldr	r3, [fp, #-108]	; 0xffffff94
     19c:	ldr	r1, [fp, #12]
     1a0:	bl	0 <pread>
     1a4:	mov	r3, r0
     1a8:	cmp	r3, #0
     1ac:	bge	1e4 <read_bytes+0x1e4>
     1b0:	bl	0 <__errno_location>
     1b4:	mov	r3, r0
     1b8:	ldr	r3, [r3]
     1bc:	mov	r0, r3
     1c0:	bl	0 <strerror>
     1c4:	mov	r3, r0
     1c8:	mov	r2, r3
     1cc:	movw	r1, #0
     1d0:	movt	r1, #0
     1d4:	mvn	r0, #21
     1d8:	bl	0 <coda_set_error>
     1dc:	mvn	r3, #0
     1e0:	b	1e8 <read_bytes+0x1e8>
     1e4:	mov	r3, #0
     1e8:	mov	r0, r3
     1ec:	sub	sp, fp, #20
     1f0:	ldrd	r4, [sp]
     1f4:	ldrd	r6, [sp, #8]
     1f8:	ldr	fp, [sp, #16]
     1fc:	add	sp, sp, #20
     200:	pop	{pc}		; (ldr pc, [sp], #4)

00000204 <read_bits>:
     204:	strd	r4, [sp, #-32]!	; 0xffffffe0
     208:	strd	r6, [sp, #8]
     20c:	strd	r8, [sp, #16]
     210:	str	fp, [sp, #24]
     214:	str	lr, [sp, #28]
     218:	add	fp, sp, #28
     21c:	sub	sp, sp, #136	; 0x88
     220:	str	r0, [fp, #-80]	; 0xffffffb0
     224:	strd	r2, [fp, #-92]	; 0xffffffa4
     228:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     22c:	mov	r2, #7
     230:	mov	r3, #0
     234:	and	r4, r0, r2
     238:	and	r5, r1, r3
     23c:	ldrd	r2, [fp, #4]
     240:	adds	r6, r2, r4
     244:	adc	r7, r3, r5
     248:	strd	r6, [fp, #-44]	; 0xffffffd4
     24c:	ldr	r3, [fp, #-44]	; 0xffffffd4
     250:	rsb	r3, r3, #0
     254:	and	r3, r3, #7
     258:	str	r3, [fp, #-48]	; 0xffffffd0
     25c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
     260:	cmp	r2, #9
     264:	sbcs	r3, r3, #0
     268:	bge	33c <read_bits+0x138>
     26c:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     270:	mov	r2, #0
     274:	mov	r3, #0
     278:	lsr	r2, r0, #3
     27c:	orr	r2, r2, r1, lsl #29
     280:	asr	r3, r1, #3
     284:	ldr	r1, [fp, #12]
     288:	str	r1, [sp, #8]
     28c:	mov	r0, #1
     290:	mov	r1, #0
     294:	strd	r0, [sp]
     298:	ldr	r0, [fp, #-80]	; 0xffffffb0
     29c:	bl	0 <read_bytes>
     2a0:	mov	r3, r0
     2a4:	cmp	r3, #0
     2a8:	beq	2b4 <read_bits+0xb0>
     2ac:	mvn	r3, #0
     2b0:	b	7fc <read_bits+0x5f8>
     2b4:	ldr	r3, [fp, #-48]	; 0xffffffd0
     2b8:	cmp	r3, #0
     2bc:	beq	2e0 <read_bits+0xdc>
     2c0:	ldr	r3, [fp, #12]
     2c4:	ldrb	r3, [r3]
     2c8:	mov	r2, r3
     2cc:	ldr	r3, [fp, #-48]	; 0xffffffd0
     2d0:	asr	r3, r2, r3
     2d4:	uxtb	r2, r3
     2d8:	ldr	r3, [fp, #12]
     2dc:	strb	r2, [r3]
     2e0:	ldrd	r2, [fp, #4]
     2e4:	mov	r0, #7
     2e8:	mov	r1, #0
     2ec:	and	r8, r2, r0
     2f0:	and	r9, r3, r1
     2f4:	orrs	r3, r8, r9
     2f8:	beq	7f8 <read_bits+0x5f4>
     2fc:	ldr	r3, [fp, #12]
     300:	ldrb	r3, [r3]
     304:	sxtb	r2, r3
     308:	ldr	r3, [fp, #4]
     30c:	mov	r1, #1
     310:	lsl	r3, r1, r3
     314:	uxtb	r3, r3
     318:	sub	r3, r3, #1
     31c:	uxtb	r3, r3
     320:	sxtb	r3, r3
     324:	and	r3, r3, r2
     328:	sxtb	r3, r3
     32c:	uxtb	r2, r3
     330:	ldr	r3, [fp, #12]
     334:	strb	r2, [r3]
     338:	b	7f8 <read_bits+0x5f4>
     33c:	ldr	r3, [fp, #-48]	; 0xffffffd0
     340:	cmp	r3, #0
     344:	bne	4c8 <read_bits+0x2c4>
     348:	ldrd	r2, [fp, #4]
     34c:	mov	r0, #7
     350:	mov	r1, #0
     354:	and	ip, r2, r0
     358:	str	ip, [fp, #-100]	; 0xffffff9c
     35c:	and	r3, r3, r1
     360:	str	r3, [fp, #-96]	; 0xffffffa0
     364:	ldrd	r2, [fp, #-100]	; 0xffffff9c
     368:	orrs	r3, r2, r3
     36c:	beq	458 <read_bits+0x254>
     370:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     374:	mov	r2, #0
     378:	mov	r3, #0
     37c:	lsr	r2, r0, #3
     380:	orr	r2, r2, r1, lsl #29
     384:	asr	r3, r1, #3
     388:	sub	r1, fp, #65	; 0x41
     38c:	str	r1, [sp, #8]
     390:	mov	r0, #1
     394:	mov	r1, #0
     398:	strd	r0, [sp]
     39c:	ldr	r0, [fp, #-80]	; 0xffffffb0
     3a0:	bl	0 <read_bytes>
     3a4:	mov	r3, r0
     3a8:	cmp	r3, #0
     3ac:	beq	3b8 <read_bits+0x1b4>
     3b0:	mvn	r3, #0
     3b4:	b	7fc <read_bits+0x5f8>
     3b8:	ldr	r3, [fp, #4]
     3bc:	and	r3, r3, #7
     3c0:	str	r3, [fp, #-52]	; 0xffffffcc
     3c4:	mov	r2, #1
     3c8:	ldr	r3, [fp, #-52]	; 0xffffffcc
     3cc:	lsl	r3, r2, r3
     3d0:	uxtb	r3, r3
     3d4:	sub	r3, r3, #1
     3d8:	uxtb	r3, r3
     3dc:	sxtb	r2, r3
     3e0:	ldrb	r3, [fp, #-65]	; 0xffffffbf
     3e4:	sxtb	r3, r3
     3e8:	and	r3, r3, r2
     3ec:	sxtb	r3, r3
     3f0:	uxtb	r2, r3
     3f4:	ldr	r3, [fp, #12]
     3f8:	strb	r2, [r3]
     3fc:	ldr	r3, [fp, #12]
     400:	add	r3, r3, #1
     404:	str	r3, [fp, #12]
     408:	ldr	r3, [fp, #-52]	; 0xffffffcc
     40c:	mov	r2, r3
     410:	mov	r3, #0
     414:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     418:	adds	ip, r0, r2
     41c:	str	ip, [fp, #-108]	; 0xffffff94
     420:	adc	r3, r1, r3
     424:	str	r3, [fp, #-104]	; 0xffffff98
     428:	ldrd	r2, [fp, #-108]	; 0xffffff94
     42c:	strd	r2, [fp, #-92]	; 0xffffffa4
     430:	ldr	r3, [fp, #-52]	; 0xffffffcc
     434:	mov	r2, r3
     438:	mov	r3, #0
     43c:	ldrd	r0, [fp, #4]
     440:	subs	ip, r0, r2
     444:	str	ip, [fp, #-116]	; 0xffffff8c
     448:	sbc	r3, r1, r3
     44c:	str	r3, [fp, #-112]	; 0xffffff90
     450:	ldrd	r2, [fp, #-116]	; 0xffffff8c
     454:	strd	r2, [fp, #4]
     458:	ldrd	r2, [fp, #4]
     45c:	cmp	r2, #1
     460:	sbcs	r3, r3, #0
     464:	blt	7f8 <read_bits+0x5f4>
     468:	ldrd	r2, [fp, #-92]	; 0xffffffa4
     46c:	mov	r0, #0
     470:	mov	r1, #0
     474:	lsr	r0, r2, #3
     478:	orr	r0, r0, r3, lsl #29
     47c:	asr	r1, r3, #3
     480:	ldrd	r4, [fp, #4]
     484:	mov	r2, #0
     488:	mov	r3, #0
     48c:	lsr	r2, r4, #3
     490:	orr	r2, r2, r5, lsl #29
     494:	asr	r3, r5, #3
     498:	ldr	ip, [fp, #12]
     49c:	str	ip, [sp, #8]
     4a0:	strd	r2, [sp]
     4a4:	mov	r2, r0
     4a8:	mov	r3, r1
     4ac:	ldr	r0, [fp, #-80]	; 0xffffffb0
     4b0:	bl	0 <read_bytes>
     4b4:	mov	r3, r0
     4b8:	cmp	r3, #0
     4bc:	beq	7f8 <read_bits+0x5f4>
     4c0:	mvn	r3, #0
     4c4:	b	7fc <read_bits+0x5f8>
     4c8:	ldrd	r0, [fp, #4]
     4cc:	mov	r2, #24
     4d0:	mov	r3, #0
     4d4:	bl	0 <__aeabi_ldivmod>
     4d8:	orrs	r3, r2, r3
     4dc:	beq	7e8 <read_bits+0x5e4>
     4e0:	ldrd	r0, [fp, #4]
     4e4:	mov	r2, #24
     4e8:	mov	r3, #0
     4ec:	bl	0 <__aeabi_ldivmod>
     4f0:	mov	r3, r2
     4f4:	str	r3, [fp, #-56]	; 0xffffffc8
     4f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
     4fc:	and	r2, r3, #7
     500:	ldr	r3, [fp, #-56]	; 0xffffffc8
     504:	add	r3, r2, r3
     508:	lsr	r3, r3, #3
     50c:	ldrb	r2, [fp, #-92]	; 0xffffffa4
     510:	and	r2, r2, #7
     514:	uxtb	r1, r2
     518:	ldr	r2, [fp, #-56]	; 0xffffffc8
     51c:	uxtb	r2, r2
     520:	add	r2, r1, r2
     524:	uxtb	r2, r2
     528:	and	r2, r2, #7
     52c:	cmp	r2, #0
     530:	movne	r2, #1
     534:	moveq	r2, #0
     538:	uxtb	r2, r2
     53c:	add	r3, r3, r2
     540:	str	r3, [fp, #-60]	; 0xffffffc4
     544:	ldr	r3, [fp, #-56]	; 0xffffffc8
     548:	lsr	r3, r3, #3
     54c:	ldr	r2, [fp, #-56]	; 0xffffffc8
     550:	uxtb	r2, r2
     554:	and	r2, r2, #7
     558:	cmp	r2, #0
     55c:	movne	r2, #1
     560:	moveq	r2, #0
     564:	uxtb	r2, r2
     568:	add	r3, r3, r2
     56c:	str	r3, [fp, #-64]	; 0xffffffc0
     570:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     574:	mov	r2, #0
     578:	mov	r3, #0
     57c:	lsr	r2, r0, #3
     580:	orr	r2, r2, r1, lsl #29
     584:	asr	r3, r1, #3
     588:	ldr	r1, [fp, #-60]	; 0xffffffc4
     58c:	mov	r0, r1
     590:	mov	r1, #0
     594:	sub	ip, fp, #72	; 0x48
     598:	str	ip, [sp, #8]
     59c:	strd	r0, [sp]
     5a0:	ldr	r0, [fp, #-80]	; 0xffffffb0
     5a4:	bl	0 <read_bytes>
     5a8:	mov	r3, r0
     5ac:	cmp	r3, #0
     5b0:	beq	5bc <read_bits+0x3b8>
     5b4:	mvn	r3, #0
     5b8:	b	7fc <read_bits+0x5f8>
     5bc:	mov	r3, #0
     5c0:	str	r3, [fp, #-76]	; 0xffffffb4
     5c4:	mov	r3, #0
     5c8:	str	r3, [fp, #-32]	; 0xffffffe0
     5cc:	b	600 <read_bits+0x3fc>
     5d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
     5d4:	rsb	r3, r3, #3
     5d8:	sub	r1, fp, #72	; 0x48
     5dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
     5e0:	add	r2, r1, r2
     5e4:	ldrb	r2, [r2]
     5e8:	sub	r1, fp, #28
     5ec:	add	r3, r1, r3
     5f0:	strb	r2, [r3, #-48]	; 0xffffffd0
     5f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     5f8:	add	r3, r3, #1
     5fc:	str	r3, [fp, #-32]	; 0xffffffe0
     600:	ldr	r2, [fp, #-32]	; 0xffffffe0
     604:	ldr	r3, [fp, #-60]	; 0xffffffc4
     608:	cmp	r2, r3
     60c:	bcc	5d0 <read_bits+0x3cc>
     610:	ldr	r2, [fp, #-76]	; 0xffffffb4
     614:	ldr	r3, [fp, #-60]	; 0xffffffc4
     618:	lsl	r3, r3, #3
     61c:	rsb	r1, r3, #0
     620:	ldr	r3, [fp, #-48]	; 0xffffffd0
     624:	add	r3, r1, r3
     628:	add	r3, r3, #32
     62c:	lsr	r3, r2, r3
     630:	mov	r1, #1
     634:	ldr	r2, [fp, #-56]	; 0xffffffc8
     638:	lsl	r2, r1, r2
     63c:	sub	r2, r2, #1
     640:	and	r3, r3, r2
     644:	str	r3, [fp, #-76]	; 0xffffffb4
     648:	mov	r3, #0
     64c:	str	r3, [fp, #-32]	; 0xffffffe0
     650:	b	68c <read_bits+0x488>
     654:	ldr	r2, [fp, #-64]	; 0xffffffc0
     658:	ldr	r3, [fp, #-32]	; 0xffffffe0
     65c:	sub	r3, r2, r3
     660:	sub	r2, r3, #1
     664:	ldr	r1, [fp, #12]
     668:	ldr	r3, [fp, #-32]	; 0xffffffe0
     66c:	add	r3, r1, r3
     670:	sub	r1, fp, #28
     674:	add	r2, r1, r2
     678:	ldrb	r2, [r2, #-48]	; 0xffffffd0
     67c:	strb	r2, [r3]
     680:	ldr	r3, [fp, #-32]	; 0xffffffe0
     684:	add	r3, r3, #1
     688:	str	r3, [fp, #-32]	; 0xffffffe0
     68c:	ldr	r2, [fp, #-32]	; 0xffffffe0
     690:	ldr	r3, [fp, #-64]	; 0xffffffc0
     694:	cmp	r2, r3
     698:	bcc	654 <read_bits+0x450>
     69c:	ldr	r2, [fp, #12]
     6a0:	ldr	r3, [fp, #-64]	; 0xffffffc0
     6a4:	add	r3, r2, r3
     6a8:	str	r3, [fp, #12]
     6ac:	ldr	r3, [fp, #-56]	; 0xffffffc8
     6b0:	mov	r2, r3
     6b4:	mov	r3, #0
     6b8:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     6bc:	adds	ip, r0, r2
     6c0:	str	ip, [fp, #-124]	; 0xffffff84
     6c4:	adc	r3, r1, r3
     6c8:	str	r3, [fp, #-120]	; 0xffffff88
     6cc:	ldrd	r2, [fp, #-124]	; 0xffffff84
     6d0:	strd	r2, [fp, #-92]	; 0xffffffa4
     6d4:	ldr	r3, [fp, #-56]	; 0xffffffc8
     6d8:	mov	r2, r3
     6dc:	mov	r3, #0
     6e0:	ldrd	r0, [fp, #4]
     6e4:	subs	ip, r0, r2
     6e8:	str	ip, [fp, #-132]	; 0xffffff7c
     6ec:	sbc	r3, r1, r3
     6f0:	str	r3, [fp, #-128]	; 0xffffff80
     6f4:	ldrd	r2, [fp, #-132]	; 0xffffff7c
     6f8:	strd	r2, [fp, #4]
     6fc:	b	7e8 <read_bits+0x5e4>
     700:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     704:	mov	r2, #0
     708:	mov	r3, #0
     70c:	lsr	r2, r0, #3
     710:	orr	r2, r2, r1, lsl #29
     714:	asr	r3, r1, #3
     718:	sub	r1, fp, #72	; 0x48
     71c:	str	r1, [sp, #8]
     720:	mov	r0, #4
     724:	mov	r1, #0
     728:	strd	r0, [sp]
     72c:	ldr	r0, [fp, #-80]	; 0xffffffb0
     730:	bl	0 <read_bytes>
     734:	mov	r3, r0
     738:	cmp	r3, #0
     73c:	beq	748 <read_bits+0x544>
     740:	mvn	r3, #0
     744:	b	7fc <read_bits+0x5f8>
     748:	ldrb	r3, [fp, #-69]	; 0xffffffbb
     74c:	strb	r3, [fp, #-76]	; 0xffffffb4
     750:	ldrb	r3, [fp, #-70]	; 0xffffffba
     754:	strb	r3, [fp, #-75]	; 0xffffffb5
     758:	ldrb	r3, [fp, #-71]	; 0xffffffb9
     75c:	strb	r3, [fp, #-74]	; 0xffffffb6
     760:	ldrb	r3, [fp, #-72]	; 0xffffffb8
     764:	strb	r3, [fp, #-73]	; 0xffffffb7
     768:	ldr	r2, [fp, #-76]	; 0xffffffb4
     76c:	ldr	r3, [fp, #-48]	; 0xffffffd0
     770:	lsr	r3, r2, r3
     774:	str	r3, [fp, #-76]	; 0xffffffb4
     778:	ldrb	r2, [fp, #-74]	; 0xffffffb6
     77c:	ldr	r3, [fp, #12]
     780:	strb	r2, [r3]
     784:	ldr	r3, [fp, #12]
     788:	add	r3, r3, #1
     78c:	ldrb	r2, [fp, #-75]	; 0xffffffb5
     790:	strb	r2, [r3]
     794:	ldr	r3, [fp, #12]
     798:	add	r3, r3, #2
     79c:	ldrb	r2, [fp, #-76]	; 0xffffffb4
     7a0:	strb	r2, [r3]
     7a4:	ldr	r3, [fp, #12]
     7a8:	add	r3, r3, #3
     7ac:	str	r3, [fp, #12]
     7b0:	ldrd	r2, [fp, #-92]	; 0xffffffa4
     7b4:	adds	r1, r2, #24
     7b8:	str	r1, [fp, #-140]	; 0xffffff74
     7bc:	adc	r3, r3, #0
     7c0:	str	r3, [fp, #-136]	; 0xffffff78
     7c4:	ldrd	r2, [fp, #-140]	; 0xffffff74
     7c8:	strd	r2, [fp, #-92]	; 0xffffffa4
     7cc:	ldrd	r2, [fp, #4]
     7d0:	subs	r1, r2, #24
     7d4:	str	r1, [fp, #-148]	; 0xffffff6c
     7d8:	sbc	r3, r3, #0
     7dc:	str	r3, [fp, #-144]	; 0xffffff70
     7e0:	ldrd	r2, [fp, #-148]	; 0xffffff6c
     7e4:	strd	r2, [fp, #4]
     7e8:	ldrd	r2, [fp, #4]
     7ec:	cmp	r2, #1
     7f0:	sbcs	r3, r3, #0
     7f4:	bge	700 <read_bits+0x4fc>
     7f8:	mov	r3, #0
     7fc:	mov	r0, r3
     800:	sub	sp, fp, #28
     804:	ldrd	r4, [sp]
     808:	ldrd	r6, [sp, #8]
     80c:	ldrd	r8, [sp, #16]
     810:	ldr	fp, [sp, #24]
     814:	add	sp, sp, #28
     818:	pop	{pc}		; (ldr pc, [sp], #4)

0000081c <swap4>:
     81c:	push	{fp}		; (str fp, [sp, #-4]!)
     820:	add	fp, sp, #0
     824:	sub	sp, sp, #20
     828:	str	r0, [fp, #-16]
     82c:	ldr	r3, [fp, #-16]
     830:	str	r3, [fp, #-8]
     834:	ldr	r3, [fp, #-8]
     838:	ldrb	r2, [r3]
     83c:	ldr	r3, [fp, #-8]
     840:	add	r3, r3, #3
     844:	ldrb	r3, [r3]
     848:	eor	r3, r3, r2
     84c:	uxtb	r2, r3
     850:	ldr	r3, [fp, #-8]
     854:	strb	r2, [r3]
     858:	ldr	r3, [fp, #-8]
     85c:	ldrb	r1, [r3]
     860:	ldr	r3, [fp, #-8]
     864:	add	r3, r3, #3
     868:	ldrb	r2, [r3]
     86c:	ldr	r3, [fp, #-8]
     870:	add	r3, r3, #3
     874:	eor	r2, r2, r1
     878:	uxtb	r2, r2
     87c:	strb	r2, [r3]
     880:	ldr	r3, [fp, #-8]
     884:	ldrb	r2, [r3]
     888:	ldr	r3, [fp, #-8]
     88c:	add	r3, r3, #3
     890:	ldrb	r3, [r3]
     894:	eor	r3, r3, r2
     898:	uxtb	r2, r3
     89c:	ldr	r3, [fp, #-8]
     8a0:	strb	r2, [r3]
     8a4:	ldr	r3, [fp, #-8]
     8a8:	add	r3, r3, #1
     8ac:	ldrb	r1, [r3]
     8b0:	ldr	r3, [fp, #-8]
     8b4:	add	r3, r3, #2
     8b8:	ldrb	r2, [r3]
     8bc:	ldr	r3, [fp, #-8]
     8c0:	add	r3, r3, #1
     8c4:	eor	r2, r2, r1
     8c8:	uxtb	r2, r2
     8cc:	strb	r2, [r3]
     8d0:	ldr	r3, [fp, #-8]
     8d4:	add	r3, r3, #1
     8d8:	ldrb	r1, [r3]
     8dc:	ldr	r3, [fp, #-8]
     8e0:	add	r3, r3, #2
     8e4:	ldrb	r2, [r3]
     8e8:	ldr	r3, [fp, #-8]
     8ec:	add	r3, r3, #2
     8f0:	eor	r2, r2, r1
     8f4:	uxtb	r2, r2
     8f8:	strb	r2, [r3]
     8fc:	ldr	r3, [fp, #-8]
     900:	add	r3, r3, #1
     904:	ldrb	r1, [r3]
     908:	ldr	r3, [fp, #-8]
     90c:	add	r3, r3, #2
     910:	ldrb	r2, [r3]
     914:	ldr	r3, [fp, #-8]
     918:	add	r3, r3, #1
     91c:	eor	r2, r2, r1
     920:	uxtb	r2, r2
     924:	strb	r2, [r3]
     928:	nop	{0}
     92c:	add	sp, fp, #0
     930:	pop	{fp}		; (ldr fp, [sp], #4)
     934:	bx	lr

00000938 <swap8>:
     938:	push	{fp}		; (str fp, [sp, #-4]!)
     93c:	add	fp, sp, #0
     940:	sub	sp, sp, #20
     944:	str	r0, [fp, #-16]
     948:	ldr	r3, [fp, #-16]
     94c:	str	r3, [fp, #-8]
     950:	ldr	r3, [fp, #-8]
     954:	ldrb	r2, [r3]
     958:	ldr	r3, [fp, #-8]
     95c:	add	r3, r3, #7
     960:	ldrb	r3, [r3]
     964:	eor	r3, r3, r2
     968:	uxtb	r2, r3
     96c:	ldr	r3, [fp, #-8]
     970:	strb	r2, [r3]
     974:	ldr	r3, [fp, #-8]
     978:	ldrb	r1, [r3]
     97c:	ldr	r3, [fp, #-8]
     980:	add	r3, r3, #7
     984:	ldrb	r2, [r3]
     988:	ldr	r3, [fp, #-8]
     98c:	add	r3, r3, #7
     990:	eor	r2, r2, r1
     994:	uxtb	r2, r2
     998:	strb	r2, [r3]
     99c:	ldr	r3, [fp, #-8]
     9a0:	ldrb	r2, [r3]
     9a4:	ldr	r3, [fp, #-8]
     9a8:	add	r3, r3, #7
     9ac:	ldrb	r3, [r3]
     9b0:	eor	r3, r3, r2
     9b4:	uxtb	r2, r3
     9b8:	ldr	r3, [fp, #-8]
     9bc:	strb	r2, [r3]
     9c0:	ldr	r3, [fp, #-8]
     9c4:	add	r3, r3, #1
     9c8:	ldrb	r1, [r3]
     9cc:	ldr	r3, [fp, #-8]
     9d0:	add	r3, r3, #6
     9d4:	ldrb	r2, [r3]
     9d8:	ldr	r3, [fp, #-8]
     9dc:	add	r3, r3, #1
     9e0:	eor	r2, r2, r1
     9e4:	uxtb	r2, r2
     9e8:	strb	r2, [r3]
     9ec:	ldr	r3, [fp, #-8]
     9f0:	add	r3, r3, #1
     9f4:	ldrb	r1, [r3]
     9f8:	ldr	r3, [fp, #-8]
     9fc:	add	r3, r3, #6
     a00:	ldrb	r2, [r3]
     a04:	ldr	r3, [fp, #-8]
     a08:	add	r3, r3, #6
     a0c:	eor	r2, r2, r1
     a10:	uxtb	r2, r2
     a14:	strb	r2, [r3]
     a18:	ldr	r3, [fp, #-8]
     a1c:	add	r3, r3, #1
     a20:	ldrb	r1, [r3]
     a24:	ldr	r3, [fp, #-8]
     a28:	add	r3, r3, #6
     a2c:	ldrb	r2, [r3]
     a30:	ldr	r3, [fp, #-8]
     a34:	add	r3, r3, #1
     a38:	eor	r2, r2, r1
     a3c:	uxtb	r2, r2
     a40:	strb	r2, [r3]
     a44:	ldr	r3, [fp, #-8]
     a48:	add	r3, r3, #2
     a4c:	ldrb	r1, [r3]
     a50:	ldr	r3, [fp, #-8]
     a54:	add	r3, r3, #5
     a58:	ldrb	r2, [r3]
     a5c:	ldr	r3, [fp, #-8]
     a60:	add	r3, r3, #2
     a64:	eor	r2, r2, r1
     a68:	uxtb	r2, r2
     a6c:	strb	r2, [r3]
     a70:	ldr	r3, [fp, #-8]
     a74:	add	r3, r3, #2
     a78:	ldrb	r1, [r3]
     a7c:	ldr	r3, [fp, #-8]
     a80:	add	r3, r3, #5
     a84:	ldrb	r2, [r3]
     a88:	ldr	r3, [fp, #-8]
     a8c:	add	r3, r3, #5
     a90:	eor	r2, r2, r1
     a94:	uxtb	r2, r2
     a98:	strb	r2, [r3]
     a9c:	ldr	r3, [fp, #-8]
     aa0:	add	r3, r3, #2
     aa4:	ldrb	r1, [r3]
     aa8:	ldr	r3, [fp, #-8]
     aac:	add	r3, r3, #5
     ab0:	ldrb	r2, [r3]
     ab4:	ldr	r3, [fp, #-8]
     ab8:	add	r3, r3, #2
     abc:	eor	r2, r2, r1
     ac0:	uxtb	r2, r2
     ac4:	strb	r2, [r3]
     ac8:	ldr	r3, [fp, #-8]
     acc:	add	r3, r3, #3
     ad0:	ldrb	r1, [r3]
     ad4:	ldr	r3, [fp, #-8]
     ad8:	add	r3, r3, #4
     adc:	ldrb	r2, [r3]
     ae0:	ldr	r3, [fp, #-8]
     ae4:	add	r3, r3, #3
     ae8:	eor	r2, r2, r1
     aec:	uxtb	r2, r2
     af0:	strb	r2, [r3]
     af4:	ldr	r3, [fp, #-8]
     af8:	add	r3, r3, #3
     afc:	ldrb	r1, [r3]
     b00:	ldr	r3, [fp, #-8]
     b04:	add	r3, r3, #4
     b08:	ldrb	r2, [r3]
     b0c:	ldr	r3, [fp, #-8]
     b10:	add	r3, r3, #4
     b14:	eor	r2, r2, r1
     b18:	uxtb	r2, r2
     b1c:	strb	r2, [r3]
     b20:	ldr	r3, [fp, #-8]
     b24:	add	r3, r3, #3
     b28:	ldrb	r1, [r3]
     b2c:	ldr	r3, [fp, #-8]
     b30:	add	r3, r3, #4
     b34:	ldrb	r2, [r3]
     b38:	ldr	r3, [fp, #-8]
     b3c:	add	r3, r3, #3
     b40:	eor	r2, r2, r1
     b44:	uxtb	r2, r2
     b48:	strb	r2, [r3]
     b4c:	nop	{0}
     b50:	add	sp, fp, #0
     b54:	pop	{fp}		; (ldr fp, [sp], #4)
     b58:	bx	lr

00000b5c <coda_grib_cursor_set_product>:
     b5c:	push	{fp}		; (str fp, [sp, #-4]!)
     b60:	add	fp, sp, #0
     b64:	sub	sp, sp, #12
     b68:	str	r0, [fp, #-8]
     b6c:	str	r1, [fp, #-12]
     b70:	ldr	r3, [fp, #-8]
     b74:	ldr	r2, [fp, #-12]
     b78:	str	r2, [r3]
     b7c:	ldr	r3, [fp, #-8]
     b80:	mov	r2, #1
     b84:	str	r2, [r3, #4]
     b88:	ldr	r3, [fp, #-12]
     b8c:	ldr	r2, [r3, #20]
     b90:	ldr	r3, [fp, #-8]
     b94:	str	r2, [r3, #8]
     b98:	ldr	r3, [fp, #-8]
     b9c:	mvn	r2, #0
     ba0:	str	r2, [r3, #12]
     ba4:	ldr	r1, [fp, #-8]
     ba8:	mvn	r2, #0
     bac:	mvn	r3, #0
     bb0:	strd	r2, [r1, #16]
     bb4:	mov	r3, #0
     bb8:	mov	r0, r3
     bbc:	add	sp, fp, #0
     bc0:	pop	{fp}		; (ldr fp, [sp], #4)
     bc4:	bx	lr

00000bc8 <coda_grib_cursor_goto_array_element>:
     bc8:	str	fp, [sp, #-8]!
     bcc:	str	lr, [sp, #4]
     bd0:	add	fp, sp, #4
     bd4:	sub	sp, sp, #24
     bd8:	str	r0, [fp, #-8]
     bdc:	str	r1, [fp, #-12]
     be0:	str	r2, [fp, #-16]
     be4:	ldr	r3, [fp, #-12]
     be8:	cmp	r3, #1
     bec:	beq	c1c <coda_grib_cursor_goto_array_element+0x54>
     bf0:	mov	r3, #68	; 0x44
     bf4:	str	r3, [sp]
     bf8:	movw	r3, #0
     bfc:	movt	r3, #0
     c00:	ldr	r2, [fp, #-12]
     c04:	movw	r1, #0
     c08:	movt	r1, #0
     c0c:	mvn	r0, #105	; 0x69
     c10:	bl	0 <coda_set_error>
     c14:	mvn	r3, #0
     c18:	b	c34 <coda_grib_cursor_goto_array_element+0x6c>
     c1c:	ldr	r3, [fp, #-16]
     c20:	ldr	r3, [r3]
     c24:	mov	r1, r3
     c28:	ldr	r0, [fp, #-8]
     c2c:	bl	c48 <coda_grib_cursor_goto_array_element_by_index>
     c30:	mov	r3, r0
     c34:	mov	r0, r3
     c38:	sub	sp, fp, #4
     c3c:	ldr	fp, [sp]
     c40:	add	sp, sp, #4
     c44:	pop	{pc}		; (ldr pc, [sp], #4)

00000c48 <coda_grib_cursor_goto_array_element_by_index>:
     c48:	str	fp, [sp, #-8]!
     c4c:	str	lr, [sp, #4]
     c50:	add	fp, sp, #4
     c54:	sub	sp, sp, #24
     c58:	str	r0, [fp, #-16]
     c5c:	str	r1, [fp, #-20]	; 0xffffffec
     c60:	ldr	r3, [fp, #-16]
     c64:	ldr	r3, [r3, #4]
     c68:	sub	r3, r3, #1
     c6c:	ldr	r2, [fp, #-16]
     c70:	lsl	r3, r3, #4
     c74:	add	r3, r2, r3
     c78:	ldr	r3, [r3, #8]
     c7c:	str	r3, [fp, #-8]
     c80:	ldr	r3, [pc, #260]	; d8c <coda_grib_cursor_goto_array_element_by_index+0x144>
     c84:	ldr	r3, [pc, r3]
     c88:	mrc	15, 0, r2, cr13, cr0, {3}
     c8c:	ldr	r3, [r2, r3]
     c90:	cmp	r3, #0
     c94:	beq	cf4 <coda_grib_cursor_goto_array_element_by_index+0xac>
     c98:	ldr	r3, [fp, #-20]	; 0xffffffec
     c9c:	cmp	r3, #0
     ca0:	blt	cb8 <coda_grib_cursor_goto_array_element_by_index+0x70>
     ca4:	ldr	r3, [fp, #-8]
     ca8:	ldr	r3, [r3, #8]
     cac:	ldr	r2, [fp, #-20]	; 0xffffffec
     cb0:	cmp	r2, r3
     cb4:	blt	cf4 <coda_grib_cursor_goto_array_element_by_index+0xac>
     cb8:	ldr	r3, [fp, #-8]
     cbc:	ldr	r2, [r3, #8]
     cc0:	mov	r3, #84	; 0x54
     cc4:	str	r3, [sp, #4]
     cc8:	movw	r3, #0
     ccc:	movt	r3, #0
     cd0:	str	r3, [sp]
     cd4:	mov	r3, r2
     cd8:	ldr	r2, [fp, #-20]	; 0xffffffec
     cdc:	movw	r1, #0
     ce0:	movt	r1, #0
     ce4:	mvn	r0, #106	; 0x6a
     ce8:	bl	0 <coda_set_error>
     cec:	mvn	r3, #0
     cf0:	b	d78 <coda_grib_cursor_goto_array_element_by_index+0x130>
     cf4:	ldr	r3, [fp, #-16]
     cf8:	ldr	r3, [r3, #4]
     cfc:	add	r2, r3, #1
     d00:	ldr	r3, [fp, #-16]
     d04:	str	r2, [r3, #4]
     d08:	ldr	r3, [fp, #-16]
     d0c:	ldr	r3, [r3, #4]
     d10:	sub	r3, r3, #1
     d14:	ldr	r2, [fp, #-8]
     d18:	ldr	r2, [r2, #12]
     d1c:	ldr	r1, [fp, #-16]
     d20:	lsl	r3, r3, #4
     d24:	add	r3, r1, r3
     d28:	str	r2, [r3, #8]
     d2c:	ldr	r3, [fp, #-16]
     d30:	ldr	r3, [r3, #4]
     d34:	sub	r3, r3, #1
     d38:	ldr	r2, [fp, #-16]
     d3c:	lsl	r3, r3, #4
     d40:	add	r3, r2, r3
     d44:	ldr	r2, [fp, #-20]	; 0xffffffec
     d48:	str	r2, [r3, #12]
     d4c:	ldr	r3, [fp, #-16]
     d50:	ldr	r3, [r3, #4]
     d54:	sub	r3, r3, #1
     d58:	ldr	r2, [fp, #-16]
     d5c:	add	r3, r3, #1
     d60:	lsl	r3, r3, #4
     d64:	add	r1, r2, r3
     d68:	mvn	r2, #0
     d6c:	mvn	r3, #0
     d70:	strd	r2, [r1]
     d74:	mov	r3, #0
     d78:	mov	r0, r3
     d7c:	sub	sp, fp, #4
     d80:	ldr	fp, [sp]
     d84:	add	sp, sp, #4
     d88:	pop	{pc}		; (ldr pc, [sp], #4)
     d8c:	.word	0x00000100

00000d90 <coda_grib_cursor_goto_next_array_element>:
     d90:	str	fp, [sp, #-8]!
     d94:	str	lr, [sp, #4]
     d98:	add	fp, sp, #4
     d9c:	sub	sp, sp, #8
     da0:	str	r0, [fp, #-8]
     da4:	ldr	r3, [fp, #-8]
     da8:	ldr	r3, [r3, #4]
     dac:	sub	r2, r3, #1
     db0:	ldr	r3, [fp, #-8]
     db4:	str	r2, [r3, #4]
     db8:	ldr	r3, [fp, #-8]
     dbc:	ldr	r3, [r3, #4]
     dc0:	ldr	r2, [fp, #-8]
     dc4:	lsl	r3, r3, #4
     dc8:	add	r3, r2, r3
     dcc:	ldr	r3, [r3, #12]
     dd0:	add	r3, r3, #1
     dd4:	mov	r1, r3
     dd8:	ldr	r0, [fp, #-8]
     ddc:	bl	c48 <coda_grib_cursor_goto_array_element_by_index>
     de0:	mov	r3, r0
     de4:	cmp	r3, #0
     de8:	beq	e08 <coda_grib_cursor_goto_next_array_element+0x78>
     dec:	ldr	r3, [fp, #-8]
     df0:	ldr	r3, [r3, #4]
     df4:	add	r2, r3, #1
     df8:	ldr	r3, [fp, #-8]
     dfc:	str	r2, [r3, #4]
     e00:	mvn	r3, #0
     e04:	b	e0c <coda_grib_cursor_goto_next_array_element+0x7c>
     e08:	mov	r3, #0
     e0c:	mov	r0, r3
     e10:	sub	sp, fp, #4
     e14:	ldr	fp, [sp]
     e18:	add	sp, sp, #4
     e1c:	pop	{pc}		; (ldr pc, [sp], #4)

00000e20 <coda_grib_cursor_goto_attributes>:
     e20:	str	r4, [sp, #-12]!
     e24:	str	fp, [sp, #4]
     e28:	str	lr, [sp, #8]
     e2c:	add	fp, sp, #8
     e30:	sub	sp, sp, #20
     e34:	str	r0, [fp, #-24]	; 0xffffffe8
     e38:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e3c:	ldr	r3, [r3, #4]
     e40:	sub	r3, r3, #1
     e44:	ldr	r2, [fp, #-24]	; 0xffffffe8
     e48:	lsl	r3, r3, #4
     e4c:	add	r3, r2, r3
     e50:	ldr	r3, [r3, #8]
     e54:	ldr	r3, [r3, #4]
     e58:	ldr	r3, [r3]
     e5c:	str	r3, [fp, #-16]
     e60:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e64:	ldr	r3, [r3, #4]
     e68:	add	r2, r3, #1
     e6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e70:	str	r2, [r3, #4]
     e74:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e78:	ldr	r3, [r3, #4]
     e7c:	sub	r4, r3, #1
     e80:	ldr	r0, [fp, #-16]
     e84:	bl	0 <coda_mem_empty_record>
     e88:	mov	r1, r0
     e8c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     e90:	lsl	r3, r4, #4
     e94:	add	r3, r2, r3
     e98:	str	r1, [r3, #8]
     e9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ea0:	ldr	r3, [r3, #4]
     ea4:	sub	r3, r3, #1
     ea8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     eac:	lsl	r3, r3, #4
     eb0:	add	r3, r2, r3
     eb4:	mvn	r2, #0
     eb8:	str	r2, [r3, #12]
     ebc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ec0:	ldr	r3, [r3, #4]
     ec4:	sub	r3, r3, #1
     ec8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     ecc:	add	r3, r3, #1
     ed0:	lsl	r3, r3, #4
     ed4:	add	r1, r2, r3
     ed8:	mvn	r2, #0
     edc:	mvn	r3, #0
     ee0:	strd	r2, [r1]
     ee4:	mov	r3, #0
     ee8:	mov	r0, r3
     eec:	sub	sp, fp, #8
     ef0:	ldr	r4, [sp]
     ef4:	ldr	fp, [sp, #4]
     ef8:	add	sp, sp, #8
     efc:	pop	{pc}		; (ldr pc, [sp], #4)

00000f00 <coda_grib_cursor_get_num_elements>:
     f00:	push	{fp}		; (str fp, [sp, #-4]!)
     f04:	add	fp, sp, #0
     f08:	sub	sp, sp, #12
     f0c:	str	r0, [fp, #-8]
     f10:	str	r1, [fp, #-12]
     f14:	ldr	r3, [fp, #-8]
     f18:	ldr	r3, [r3, #4]
     f1c:	sub	r3, r3, #1
     f20:	ldr	r2, [fp, #-8]
     f24:	lsl	r3, r3, #4
     f28:	add	r3, r2, r3
     f2c:	ldr	r3, [r3, #8]
     f30:	ldr	r3, [r3, #4]
     f34:	ldr	r3, [r3, #8]
     f38:	cmp	r3, #1
     f3c:	bne	f6c <coda_grib_cursor_get_num_elements+0x6c>
     f40:	ldr	r3, [fp, #-8]
     f44:	ldr	r3, [r3, #4]
     f48:	sub	r3, r3, #1
     f4c:	ldr	r2, [fp, #-8]
     f50:	lsl	r3, r3, #4
     f54:	add	r3, r2, r3
     f58:	ldr	r3, [r3, #8]
     f5c:	ldr	r2, [r3, #8]
     f60:	ldr	r3, [fp, #-12]
     f64:	str	r2, [r3]
     f68:	b	f78 <coda_grib_cursor_get_num_elements+0x78>
     f6c:	ldr	r3, [fp, #-12]
     f70:	mov	r2, #1
     f74:	str	r2, [r3]
     f78:	mov	r3, #0
     f7c:	mov	r0, r3
     f80:	add	sp, fp, #0
     f84:	pop	{fp}		; (ldr fp, [sp], #4)
     f88:	bx	lr

00000f8c <coda_grib_cursor_get_array_dim>:
     f8c:	str	fp, [sp, #-8]!
     f90:	str	lr, [sp, #4]
     f94:	add	fp, sp, #4
     f98:	sub	sp, sp, #16
     f9c:	str	r0, [fp, #-8]
     fa0:	str	r1, [fp, #-12]
     fa4:	str	r2, [fp, #-16]
     fa8:	ldr	r3, [fp, #-12]
     fac:	mov	r2, #1
     fb0:	str	r2, [r3]
     fb4:	ldr	r1, [fp, #-16]
     fb8:	ldr	r0, [fp, #-8]
     fbc:	bl	f00 <coda_grib_cursor_get_num_elements>
     fc0:	mov	r3, r0
     fc4:	mov	r0, r3
     fc8:	sub	sp, fp, #4
     fcc:	ldr	fp, [sp]
     fd0:	add	sp, sp, #4
     fd4:	pop	{pc}		; (ldr pc, [sp], #4)

00000fd8 <coda_grib_cursor_read_float>:
     fd8:	strd	r4, [sp, #-24]!	; 0xffffffe8
     fdc:	strd	r6, [sp, #8]
     fe0:	str	fp, [sp, #16]
     fe4:	str	lr, [sp, #20]
     fe8:	add	fp, sp, #20
     fec:	sub	sp, sp, #64	; 0x40
     ff0:	str	r0, [fp, #-64]	; 0xffffffc0
     ff4:	str	r1, [fp, #-68]	; 0xffffffbc
     ff8:	ldr	r3, [fp, #-64]	; 0xffffffc0
     ffc:	ldr	r3, [r3, #4]
    1000:	cmp	r3, #1
    1004:	bgt	1028 <coda_grib_cursor_read_float+0x50>
    1008:	movw	r3, #0
    100c:	movt	r3, #0
    1010:	mov	r2, #144	; 0x90
    1014:	movw	r1, #0
    1018:	movt	r1, #0
    101c:	movw	r0, #0
    1020:	movt	r0, #0
    1024:	bl	0 <__assert_fail>
    1028:	ldr	r3, [fp, #-64]	; 0xffffffc0
    102c:	ldr	r3, [r3, #4]
    1030:	sub	r3, r3, #2
    1034:	ldr	r2, [fp, #-64]	; 0xffffffc0
    1038:	lsl	r3, r3, #4
    103c:	add	r3, r2, r3
    1040:	ldr	r3, [r3, #8]
    1044:	str	r3, [fp, #-36]	; 0xffffffdc
    1048:	ldr	r3, [fp, #-36]	; 0xffffffdc
    104c:	ldr	r3, [r3, #4]
    1050:	ldr	r3, [r3, #8]
    1054:	cmp	r3, #1
    1058:	beq	107c <coda_grib_cursor_read_float+0xa4>
    105c:	movw	r3, #0
    1060:	movt	r3, #0
    1064:	mov	r2, #146	; 0x92
    1068:	movw	r1, #0
    106c:	movt	r1, #0
    1070:	movw	r0, #0
    1074:	movt	r0, #0
    1078:	bl	0 <__assert_fail>
    107c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1080:	ldr	r3, [r3, #4]
    1084:	sub	r3, r3, #1
    1088:	ldr	r2, [fp, #-64]	; 0xffffffc0
    108c:	lsl	r3, r3, #4
    1090:	add	r3, r2, r3
    1094:	ldr	r3, [r3, #12]
    1098:	str	r3, [fp, #-24]	; 0xffffffe8
    109c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    10a0:	ldr	r3, [r3, #24]
    10a4:	cmp	r3, #0
    10a8:	beq	1354 <coda_grib_cursor_read_float+0x37c>
    10ac:	mov	r2, #0
    10b0:	mov	r3, #0
    10b4:	strd	r2, [fp, #-60]	; 0xffffffc4
    10b8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    10bc:	ldr	r3, [r3, #28]
    10c0:	cmp	r3, #0
    10c4:	bne	10e0 <coda_grib_cursor_read_float+0x108>
    10c8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    10cc:	ldr	r2, [r3, #36]	; 0x24
    10d0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    10d4:	str	r2, [r3]
    10d8:	mov	r3, #0
    10dc:	b	13d8 <coda_grib_cursor_read_float+0x400>
    10e0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    10e4:	ldr	r3, [r3, #56]	; 0x38
    10e8:	cmp	r3, #0
    10ec:	beq	1254 <coda_grib_cursor_read_float+0x27c>
    10f0:	mov	r3, #0
    10f4:	str	r3, [fp, #-28]	; 0xffffffe4
    10f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    10fc:	asr	r3, r3, #3
    1100:	str	r3, [fp, #-40]	; 0xffffffd8
    1104:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1108:	ldr	r2, [r3, #56]	; 0x38
    110c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1110:	add	r3, r2, r3
    1114:	ldrb	r3, [r3]
    1118:	strb	r3, [fp, #-41]	; 0xffffffd7
    111c:	ldrb	r2, [fp, #-41]	; 0xffffffd7
    1120:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1124:	mvn	r3, r3
    1128:	and	r3, r3, #7
    112c:	asr	r3, r2, r3
    1130:	and	r3, r3, #1
    1134:	cmp	r3, #0
    1138:	bne	1158 <coda_grib_cursor_read_float+0x180>
    113c:	bl	0 <coda_NaN>
    1140:	vmov.f64	d7, d0
    1144:	vcvt.f32.f64	s15, d7
    1148:	ldr	r3, [fp, #-68]	; 0xffffffbc
    114c:	vstr	s15, [r3]
    1150:	mov	r3, #0
    1154:	b	13d8 <coda_grib_cursor_read_float+0x400>
    1158:	mov	r3, #0
    115c:	str	r3, [fp, #-32]	; 0xffffffe0
    1160:	b	119c <coda_grib_cursor_read_float+0x1c4>
    1164:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1168:	ldr	r2, [r3, #60]	; 0x3c
    116c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1170:	lsl	r3, r3, #4
    1174:	add	r3, r3, #15
    1178:	add	r3, r2, r3
    117c:	ldrb	r3, [r3]
    1180:	mov	r2, r3
    1184:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1188:	add	r3, r3, r2
    118c:	str	r3, [fp, #-28]	; 0xffffffe4
    1190:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1194:	add	r3, r3, #1
    1198:	str	r3, [fp, #-32]	; 0xffffffe0
    119c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    11a0:	asr	r3, r3, #4
    11a4:	ldr	r2, [fp, #-32]	; 0xffffffe0
    11a8:	cmp	r2, r3
    11ac:	blt	1164 <coda_grib_cursor_read_float+0x18c>
    11b0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    11b4:	and	r3, r3, #15
    11b8:	cmp	r3, #0
    11bc:	beq	11e8 <coda_grib_cursor_read_float+0x210>
    11c0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    11c4:	ldr	r2, [r3, #60]	; 0x3c
    11c8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    11cc:	sub	r3, r3, #1
    11d0:	add	r3, r2, r3
    11d4:	ldrb	r3, [r3]
    11d8:	mov	r2, r3
    11dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    11e0:	add	r3, r3, r2
    11e4:	str	r3, [fp, #-28]	; 0xffffffe4
    11e8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    11ec:	ldr	r2, [r3, #56]	; 0x38
    11f0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    11f4:	add	r3, r2, r3
    11f8:	ldrb	r3, [r3]
    11fc:	strb	r3, [fp, #-41]	; 0xffffffd7
    1200:	mov	r3, #0
    1204:	str	r3, [fp, #-32]	; 0xffffffe0
    1208:	b	1238 <coda_grib_cursor_read_float+0x260>
    120c:	ldrb	r2, [fp, #-41]	; 0xffffffd7
    1210:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1214:	rsb	r3, r3, #7
    1218:	asr	r3, r2, r3
    121c:	and	r3, r3, #1
    1220:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1224:	add	r3, r2, r3
    1228:	str	r3, [fp, #-28]	; 0xffffffe4
    122c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1230:	add	r3, r3, #1
    1234:	str	r3, [fp, #-32]	; 0xffffffe0
    1238:	ldr	r3, [fp, #-24]	; 0xffffffe8
    123c:	and	r3, r3, #7
    1240:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1244:	cmp	r2, r3
    1248:	blt	120c <coda_grib_cursor_read_float+0x234>
    124c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1250:	str	r3, [fp, #-24]	; 0xffffffe8
    1254:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1258:	ldr	r3, [r3, #28]
    125c:	asr	r3, r3, #3
    1260:	ldr	r2, [fp, #-36]	; 0xffffffdc
    1264:	ldr	r2, [r2, #28]
    1268:	uxtb	r2, r2
    126c:	and	r2, r2, #7
    1270:	cmp	r2, #0
    1274:	movne	r2, #1
    1278:	moveq	r2, #0
    127c:	uxtb	r2, r2
    1280:	add	r3, r3, r2
    1284:	rsb	r3, r3, #8
    1288:	mov	r2, r3
    128c:	sub	r3, fp, #60	; 0x3c
    1290:	add	r3, r3, r2
    1294:	str	r3, [fp, #-48]	; 0xffffffd0
    1298:	ldr	r3, [fp, #-64]	; 0xffffffc0
    129c:	ldr	r3, [r3]
    12a0:	ldr	ip, [r3, #52]	; 0x34
    12a4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    12a8:	ldrd	r0, [r3, #16]
    12ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
    12b0:	ldr	r3, [r3, #28]
    12b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    12b8:	mul	r3, r2, r3
    12bc:	mov	r2, r3
    12c0:	asr	r3, r2, #31
    12c4:	adds	r6, r0, r2
    12c8:	adc	r7, r1, r3
    12cc:	ldr	r3, [fp, #-36]	; 0xffffffdc
    12d0:	ldr	r3, [r3, #28]
    12d4:	mov	r2, r3
    12d8:	asr	r3, r2, #31
    12dc:	ldr	r1, [fp, #-48]	; 0xffffffd0
    12e0:	str	r1, [sp, #8]
    12e4:	strd	r2, [sp]
    12e8:	mov	r2, r6
    12ec:	mov	r3, r7
    12f0:	mov	r0, ip
    12f4:	bl	204 <read_bits>
    12f8:	mov	r3, r0
    12fc:	cmp	r3, #0
    1300:	beq	130c <coda_grib_cursor_read_float+0x334>
    1304:	mvn	r3, #0
    1308:	b	13d8 <coda_grib_cursor_read_float+0x400>
    130c:	sub	r3, fp, #60	; 0x3c
    1310:	mov	r0, r3
    1314:	bl	938 <swap8>
    1318:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    131c:	mov	r0, r2
    1320:	mov	r1, r3
    1324:	bl	0 <__aeabi_l2d>
    1328:	vmov	d6, r0, r1
    132c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1330:	vldr	d7, [r3, #40]	; 0x28
    1334:	vmul.f64	d6, d6, d7
    1338:	ldr	r3, [fp, #-36]	; 0xffffffdc
    133c:	vldr	d7, [r3, #48]	; 0x30
    1340:	vadd.f64	d7, d6, d7
    1344:	vcvt.f32.f64	s15, d7
    1348:	ldr	r3, [fp, #-68]	; 0xffffffbc
    134c:	vstr	s15, [r3]
    1350:	b	13d4 <coda_grib_cursor_read_float+0x3fc>
    1354:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1358:	ldr	r3, [r3]
    135c:	ldr	ip, [r3, #52]	; 0x34
    1360:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1364:	ldrd	r0, [r3, #16]
    1368:	mov	r2, #0
    136c:	mov	r3, #0
    1370:	lsr	r2, r0, #3
    1374:	orr	r2, r2, r1, lsl #29
    1378:	asr	r3, r1, #3
    137c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1380:	lsl	r1, r1, #2
    1384:	mov	r0, r1
    1388:	asr	r1, r0, #31
    138c:	adds	r4, r2, r0
    1390:	adc	r5, r3, r1
    1394:	ldr	r3, [fp, #-68]	; 0xffffffbc
    1398:	str	r3, [sp, #8]
    139c:	mov	r2, #4
    13a0:	mov	r3, #0
    13a4:	strd	r2, [sp]
    13a8:	mov	r2, r4
    13ac:	mov	r3, r5
    13b0:	mov	r0, ip
    13b4:	bl	0 <read_bytes>
    13b8:	mov	r3, r0
    13bc:	cmp	r3, #0
    13c0:	beq	13cc <coda_grib_cursor_read_float+0x3f4>
    13c4:	mvn	r3, #0
    13c8:	b	13d8 <coda_grib_cursor_read_float+0x400>
    13cc:	ldr	r0, [fp, #-68]	; 0xffffffbc
    13d0:	bl	81c <swap4>
    13d4:	mov	r3, #0
    13d8:	mov	r0, r3
    13dc:	sub	sp, fp, #20
    13e0:	ldrd	r4, [sp]
    13e4:	ldrd	r6, [sp, #8]
    13e8:	ldr	fp, [sp, #16]
    13ec:	add	sp, sp, #20
    13f0:	pop	{pc}		; (ldr pc, [sp], #4)

000013f4 <coda_grib_cursor_read_float_array>:
    13f4:	str	fp, [sp, #-8]!
    13f8:	str	lr, [sp, #4]
    13fc:	add	fp, sp, #4
    1400:	sub	sp, sp, #536	; 0x218
    1404:	str	r0, [fp, #-536]	; 0xfffffde8
    1408:	str	r1, [fp, #-540]	; 0xfffffde4
    140c:	ldr	r3, [fp, #-536]	; 0xfffffde8
    1410:	ldr	r3, [r3, #4]
    1414:	sub	r3, r3, #1
    1418:	ldr	r2, [fp, #-536]	; 0xfffffde8
    141c:	lsl	r3, r3, #4
    1420:	add	r3, r2, r3
    1424:	ldr	r3, [r3, #8]
    1428:	str	r3, [fp, #-12]
    142c:	ldr	r3, [fp, #-12]
    1430:	ldr	r3, [r3, #8]
    1434:	cmp	r3, #0
    1438:	ble	1520 <coda_grib_cursor_read_float_array+0x12c>
    143c:	ldr	r2, [fp, #-536]	; 0xfffffde8
    1440:	sub	r3, fp, #532	; 0x214
    1444:	mov	r1, r2
    1448:	mov	r2, #520	; 0x208
    144c:	mov	r0, r3
    1450:	bl	0 <memcpy>
    1454:	ldr	r3, [fp, #-528]	; 0xfffffdf0
    1458:	add	r3, r3, #1
    145c:	str	r3, [fp, #-528]	; 0xfffffdf0
    1460:	ldr	r3, [fp, #-528]	; 0xfffffdf0
    1464:	sub	r3, r3, #1
    1468:	ldr	r2, [fp, #-12]
    146c:	ldr	r2, [r2, #12]
    1470:	lsl	r3, r3, #4
    1474:	sub	r1, fp, #4
    1478:	add	r3, r1, r3
    147c:	str	r2, [r3, #-520]	; 0xfffffdf8
    1480:	ldr	r3, [fp, #-528]	; 0xfffffdf0
    1484:	sub	r3, r3, #1
    1488:	sub	r2, fp, #532	; 0x214
    148c:	add	r3, r3, #1
    1490:	lsl	r3, r3, #4
    1494:	add	r1, r2, r3
    1498:	mvn	r2, #0
    149c:	mvn	r3, #0
    14a0:	strd	r2, [r1]
    14a4:	mov	r3, #0
    14a8:	str	r3, [fp, #-8]
    14ac:	b	150c <coda_grib_cursor_read_float_array+0x118>
    14b0:	ldr	r3, [fp, #-528]	; 0xfffffdf0
    14b4:	sub	r3, r3, #1
    14b8:	lsl	r3, r3, #4
    14bc:	sub	r2, fp, #4
    14c0:	add	r3, r2, r3
    14c4:	ldr	r2, [fp, #-8]
    14c8:	str	r2, [r3, #-516]	; 0xfffffdfc
    14cc:	ldr	r3, [fp, #-8]
    14d0:	lsl	r3, r3, #2
    14d4:	ldr	r2, [fp, #-540]	; 0xfffffde4
    14d8:	add	r2, r2, r3
    14dc:	sub	r3, fp, #532	; 0x214
    14e0:	mov	r1, r2
    14e4:	mov	r0, r3
    14e8:	bl	fd8 <coda_grib_cursor_read_float>
    14ec:	mov	r3, r0
    14f0:	cmp	r3, #0
    14f4:	beq	1500 <coda_grib_cursor_read_float_array+0x10c>
    14f8:	mvn	r3, #0
    14fc:	b	1524 <coda_grib_cursor_read_float_array+0x130>
    1500:	ldr	r3, [fp, #-8]
    1504:	add	r3, r3, #1
    1508:	str	r3, [fp, #-8]
    150c:	ldr	r3, [fp, #-12]
    1510:	ldr	r3, [r3, #8]
    1514:	ldr	r2, [fp, #-8]
    1518:	cmp	r2, r3
    151c:	blt	14b0 <coda_grib_cursor_read_float_array+0xbc>
    1520:	mov	r3, #0
    1524:	mov	r0, r3
    1528:	sub	sp, fp, #4
    152c:	ldr	fp, [sp]
    1530:	add	sp, sp, #4
    1534:	pop	{pc}		; (ldr pc, [sp], #4)

00001538 <coda_grib_cursor_read_float_partial_array>:
    1538:	str	fp, [sp, #-8]!
    153c:	str	lr, [sp, #4]
    1540:	add	fp, sp, #4
    1544:	sub	sp, sp, #544	; 0x220
    1548:	str	r0, [fp, #-536]	; 0xfffffde8
    154c:	str	r1, [fp, #-540]	; 0xfffffde4
    1550:	str	r2, [fp, #-544]	; 0xfffffde0
    1554:	str	r3, [fp, #-548]	; 0xfffffddc
    1558:	ldr	r3, [fp, #-536]	; 0xfffffde8
    155c:	ldr	r3, [r3, #4]
    1560:	sub	r3, r3, #1
    1564:	ldr	r2, [fp, #-536]	; 0xfffffde8
    1568:	lsl	r3, r3, #4
    156c:	add	r3, r2, r3
    1570:	ldr	r3, [r3, #8]
    1574:	str	r3, [fp, #-12]
    1578:	ldr	r3, [fp, #-12]
    157c:	ldr	r3, [r3, #8]
    1580:	cmp	r3, #0
    1584:	ble	1670 <coda_grib_cursor_read_float_partial_array+0x138>
    1588:	ldr	r2, [fp, #-536]	; 0xfffffde8
    158c:	sub	r3, fp, #532	; 0x214
    1590:	mov	r1, r2
    1594:	mov	r2, #520	; 0x208
    1598:	mov	r0, r3
    159c:	bl	0 <memcpy>
    15a0:	ldr	r3, [fp, #-528]	; 0xfffffdf0
    15a4:	add	r3, r3, #1
    15a8:	str	r3, [fp, #-528]	; 0xfffffdf0
    15ac:	ldr	r3, [fp, #-528]	; 0xfffffdf0
    15b0:	sub	r3, r3, #1
    15b4:	ldr	r2, [fp, #-12]
    15b8:	ldr	r2, [r2, #12]
    15bc:	lsl	r3, r3, #4
    15c0:	sub	r1, fp, #4
    15c4:	add	r3, r1, r3
    15c8:	str	r2, [r3, #-520]	; 0xfffffdf8
    15cc:	ldr	r3, [fp, #-528]	; 0xfffffdf0
    15d0:	sub	r3, r3, #1
    15d4:	sub	r2, fp, #532	; 0x214
    15d8:	add	r3, r3, #1
    15dc:	lsl	r3, r3, #4
    15e0:	add	r1, r2, r3
    15e4:	mvn	r2, #0
    15e8:	mvn	r3, #0
    15ec:	strd	r2, [r1]
    15f0:	mov	r3, #0
    15f4:	str	r3, [fp, #-8]
    15f8:	b	1660 <coda_grib_cursor_read_float_partial_array+0x128>
    15fc:	ldr	r3, [fp, #-528]	; 0xfffffdf0
    1600:	sub	r3, r3, #1
    1604:	ldr	r1, [fp, #-540]	; 0xfffffde4
    1608:	ldr	r2, [fp, #-8]
    160c:	add	r2, r1, r2
    1610:	lsl	r3, r3, #4
    1614:	sub	r1, fp, #4
    1618:	add	r3, r1, r3
    161c:	str	r2, [r3, #-516]	; 0xfffffdfc
    1620:	ldr	r3, [fp, #-8]
    1624:	lsl	r3, r3, #2
    1628:	ldr	r2, [fp, #-548]	; 0xfffffddc
    162c:	add	r2, r2, r3
    1630:	sub	r3, fp, #532	; 0x214
    1634:	mov	r1, r2
    1638:	mov	r0, r3
    163c:	bl	fd8 <coda_grib_cursor_read_float>
    1640:	mov	r3, r0
    1644:	cmp	r3, #0
    1648:	beq	1654 <coda_grib_cursor_read_float_partial_array+0x11c>
    164c:	mvn	r3, #0
    1650:	b	1674 <coda_grib_cursor_read_float_partial_array+0x13c>
    1654:	ldr	r3, [fp, #-8]
    1658:	add	r3, r3, #1
    165c:	str	r3, [fp, #-8]
    1660:	ldr	r2, [fp, #-8]
    1664:	ldr	r3, [fp, #-544]	; 0xfffffde0
    1668:	cmp	r2, r3
    166c:	blt	15fc <coda_grib_cursor_read_float_partial_array+0xc4>
    1670:	mov	r3, #0
    1674:	mov	r0, r3
    1678:	sub	sp, fp, #4
    167c:	ldr	fp, [sp]
    1680:	add	sp, sp, #4
    1684:	pop	{pc}		; (ldr pc, [sp], #4)
