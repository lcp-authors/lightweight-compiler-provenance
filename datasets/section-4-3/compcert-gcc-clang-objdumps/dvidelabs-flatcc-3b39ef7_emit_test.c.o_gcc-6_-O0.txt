
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/emit_test/CMakeFiles/emit_test.dir/emit_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <flatbuffers_uint8_cast_from_pe>:
       0:	push	{fp}		; (str fp, [sp, #-4]!)
       4:	add	fp, sp, #0
       8:	sub	sp, sp, #12
       c:	mov	r3, r0
      10:	strb	r3, [fp, #-5]
      14:	ldrb	r3, [fp, #-5]
      18:	mov	r0, r3
      1c:	add	sp, fp, #0
      20:	pop	{fp}		; (ldr fp, [sp], #4)
      24:	bx	lr

00000028 <flatbuffers_uint8_cast_to_pe>:
      28:	push	{fp}		; (str fp, [sp, #-4]!)
      2c:	add	fp, sp, #0
      30:	sub	sp, sp, #12
      34:	mov	r3, r0
      38:	strb	r3, [fp, #-5]
      3c:	ldrb	r3, [fp, #-5]
      40:	mov	r0, r3
      44:	add	sp, fp, #0
      48:	pop	{fp}		; (ldr fp, [sp], #4)
      4c:	bx	lr

00000050 <flatbuffers_uint8_read_from_pe>:
      50:	push	{fp, lr}
      54:	add	fp, sp, #4
      58:	sub	sp, sp, #8
      5c:	str	r0, [fp, #-8]
      60:	ldr	r3, [fp, #-8]
      64:	ldrb	r3, [r3]
      68:	mov	r0, r3
      6c:	bl	0 <flatbuffers_uint8_cast_from_pe>
      70:	mov	r3, r0
      74:	mov	r0, r3
      78:	sub	sp, fp, #4
      7c:	pop	{fp, pc}

00000080 <flatbuffers_int64_cast_from_pe>:
      80:	push	{fp}		; (str fp, [sp, #-4]!)
      84:	add	fp, sp, #0
      88:	sub	sp, sp, #12
      8c:	strd	r0, [fp, #-12]
      90:	ldrd	r2, [fp, #-12]
      94:	mov	r0, r2
      98:	mov	r1, r3
      9c:	add	sp, fp, #0
      a0:	pop	{fp}		; (ldr fp, [sp], #4)
      a4:	bx	lr

000000a8 <flatbuffers_int64_cast_to_pe>:
      a8:	push	{fp}		; (str fp, [sp, #-4]!)
      ac:	add	fp, sp, #0
      b0:	sub	sp, sp, #12
      b4:	strd	r0, [fp, #-12]
      b8:	ldrd	r2, [fp, #-12]
      bc:	mov	r0, r2
      c0:	mov	r1, r3
      c4:	add	sp, fp, #0
      c8:	pop	{fp}		; (ldr fp, [sp], #4)
      cc:	bx	lr

000000d0 <flatbuffers_int64_read_from_pe>:
      d0:	push	{fp, lr}
      d4:	add	fp, sp, #4
      d8:	sub	sp, sp, #8
      dc:	str	r0, [fp, #-8]
      e0:	ldr	r3, [fp, #-8]
      e4:	ldrd	r2, [r3]
      e8:	mov	r0, r2
      ec:	mov	r1, r3
      f0:	bl	80 <flatbuffers_int64_cast_from_pe>
      f4:	mov	r2, r0
      f8:	mov	r3, r1
      fc:	mov	r0, r2
     100:	mov	r1, r3
     104:	sub	sp, fp, #4
     108:	pop	{fp, pc}

0000010c <flatbuffers_float_cast_from_pe>:
     10c:	push	{fp}		; (str fp, [sp, #-4]!)
     110:	add	fp, sp, #0
     114:	sub	sp, sp, #20
     118:	vstr	s0, [fp, #-16]
     11c:	ldr	r3, [fp, #-16]
     120:	str	r3, [fp, #-8]
     124:	ldr	r3, [fp, #-8]
     128:	str	r3, [fp, #-8]
     12c:	ldr	r3, [fp, #-8]
     130:	vmov	s15, r3
     134:	vmov.f32	s0, s15
     138:	add	sp, fp, #0
     13c:	pop	{fp}		; (ldr fp, [sp], #4)
     140:	bx	lr

00000144 <flatbuffers_float_read_from_pe>:
     144:	push	{fp, lr}
     148:	add	fp, sp, #4
     14c:	sub	sp, sp, #8
     150:	str	r0, [fp, #-8]
     154:	ldr	r3, [fp, #-8]
     158:	vldr	s15, [r3]
     15c:	vmov.f32	s0, s15
     160:	bl	10c <flatbuffers_float_cast_from_pe>
     164:	vmov.f32	s15, s0
     168:	vmov.f32	s0, s15
     16c:	sub	sp, fp, #4
     170:	pop	{fp, pc}

00000174 <__flatbuffers_uoffset_cast_from_pe>:
     174:	push	{fp}		; (str fp, [sp, #-4]!)
     178:	add	fp, sp, #0
     17c:	sub	sp, sp, #12
     180:	str	r0, [fp, #-8]
     184:	ldr	r3, [fp, #-8]
     188:	mov	r0, r3
     18c:	add	sp, fp, #0
     190:	pop	{fp}		; (ldr fp, [sp], #4)
     194:	bx	lr

00000198 <__flatbuffers_uoffset_read_from_pe>:
     198:	push	{fp, lr}
     19c:	add	fp, sp, #4
     1a0:	sub	sp, sp, #8
     1a4:	str	r0, [fp, #-8]
     1a8:	ldr	r3, [fp, #-8]
     1ac:	ldr	r3, [r3]
     1b0:	mov	r0, r3
     1b4:	bl	174 <__flatbuffers_uoffset_cast_from_pe>
     1b8:	mov	r3, r0
     1bc:	mov	r0, r3
     1c0:	sub	sp, fp, #4
     1c4:	pop	{fp, pc}

000001c8 <__flatbuffers_soffset_cast_from_pe>:
     1c8:	push	{fp}		; (str fp, [sp, #-4]!)
     1cc:	add	fp, sp, #0
     1d0:	sub	sp, sp, #12
     1d4:	str	r0, [fp, #-8]
     1d8:	ldr	r3, [fp, #-8]
     1dc:	mov	r0, r3
     1e0:	add	sp, fp, #0
     1e4:	pop	{fp}		; (ldr fp, [sp], #4)
     1e8:	bx	lr

000001ec <__flatbuffers_soffset_read_from_pe>:
     1ec:	push	{fp, lr}
     1f0:	add	fp, sp, #4
     1f4:	sub	sp, sp, #8
     1f8:	str	r0, [fp, #-8]
     1fc:	ldr	r3, [fp, #-8]
     200:	ldr	r3, [r3]
     204:	mov	r0, r3
     208:	bl	1c8 <__flatbuffers_soffset_cast_from_pe>
     20c:	mov	r3, r0
     210:	mov	r0, r3
     214:	sub	sp, fp, #4
     218:	pop	{fp, pc}

0000021c <__flatbuffers_voffset_cast_from_pe>:
     21c:	push	{fp}		; (str fp, [sp, #-4]!)
     220:	add	fp, sp, #0
     224:	sub	sp, sp, #12
     228:	mov	r3, r0
     22c:	strh	r3, [fp, #-6]
     230:	ldrh	r3, [fp, #-6]
     234:	mov	r0, r3
     238:	add	sp, fp, #0
     23c:	pop	{fp}		; (ldr fp, [sp], #4)
     240:	bx	lr

00000244 <__flatbuffers_voffset_read_from_pe>:
     244:	push	{fp, lr}
     248:	add	fp, sp, #4
     24c:	sub	sp, sp, #8
     250:	str	r0, [fp, #-8]
     254:	ldr	r3, [fp, #-8]
     258:	ldrh	r3, [r3]
     25c:	mov	r0, r3
     260:	bl	21c <__flatbuffers_voffset_cast_from_pe>
     264:	mov	r3, r0
     268:	mov	r0, r3
     26c:	sub	sp, fp, #4
     270:	pop	{fp, pc}

00000274 <__flatbuffers_thash_cast_from_pe>:
     274:	push	{fp}		; (str fp, [sp, #-4]!)
     278:	add	fp, sp, #0
     27c:	sub	sp, sp, #12
     280:	str	r0, [fp, #-8]
     284:	ldr	r3, [fp, #-8]
     288:	mov	r0, r3
     28c:	add	sp, fp, #0
     290:	pop	{fp}		; (ldr fp, [sp], #4)
     294:	bx	lr

00000298 <__flatbuffers_thash_cast_from_le>:
     298:	push	{fp}		; (str fp, [sp, #-4]!)
     29c:	add	fp, sp, #0
     2a0:	sub	sp, sp, #12
     2a4:	str	r0, [fp, #-8]
     2a8:	ldr	r3, [fp, #-8]
     2ac:	mov	r0, r3
     2b0:	add	sp, fp, #0
     2b4:	pop	{fp}		; (ldr fp, [sp], #4)
     2b8:	bx	lr

000002bc <__flatbuffers_thash_read_from_pe>:
     2bc:	push	{fp, lr}
     2c0:	add	fp, sp, #4
     2c4:	sub	sp, sp, #8
     2c8:	str	r0, [fp, #-8]
     2cc:	ldr	r3, [fp, #-8]
     2d0:	ldr	r3, [r3]
     2d4:	mov	r0, r3
     2d8:	bl	274 <__flatbuffers_thash_cast_from_pe>
     2dc:	mov	r3, r0
     2e0:	mov	r0, r3
     2e4:	sub	sp, fp, #4
     2e8:	pop	{fp, pc}

000002ec <flatbuffers_vec_len>:
     2ec:	push	{fp, lr}
     2f0:	add	fp, sp, #4
     2f4:	sub	sp, sp, #8
     2f8:	str	r0, [fp, #-8]
     2fc:	ldr	r3, [fp, #-8]
     300:	cmp	r3, #0
     304:	beq	320 <flatbuffers_vec_len+0x34>
     308:	ldr	r3, [fp, #-8]
     30c:	sub	r3, r3, #4
     310:	mov	r0, r3
     314:	bl	198 <__flatbuffers_uoffset_read_from_pe>
     318:	mov	r3, r0
     31c:	b	324 <flatbuffers_vec_len+0x38>
     320:	mov	r3, #0
     324:	mov	r0, r3
     328:	sub	sp, fp, #4
     32c:	pop	{fp, pc}

00000330 <flatbuffers_float_vec_len>:
     330:	push	{fp, lr}
     334:	add	fp, sp, #4
     338:	sub	sp, sp, #8
     33c:	str	r0, [fp, #-8]
     340:	ldr	r0, [fp, #-8]
     344:	bl	2ec <flatbuffers_vec_len>
     348:	mov	r3, r0
     34c:	mov	r0, r3
     350:	sub	sp, fp, #4
     354:	pop	{fp, pc}

00000358 <flatbuffers_float_vec_at>:
     358:	push	{fp, lr}
     35c:	add	fp, sp, #4
     360:	sub	sp, sp, #8
     364:	str	r0, [fp, #-8]
     368:	str	r1, [fp, #-12]
     36c:	ldr	r0, [fp, #-8]
     370:	bl	2ec <flatbuffers_vec_len>
     374:	mov	r2, r0
     378:	ldr	r3, [fp, #-12]
     37c:	cmp	r2, r3
     380:	bhi	398 <flatbuffers_float_vec_at+0x40>
     384:	ldr	r3, [pc, #52]	; 3c0 <flatbuffers_float_vec_at+0x68>
     388:	ldr	r2, [pc, #52]	; 3c4 <flatbuffers_float_vec_at+0x6c>
     38c:	ldr	r1, [pc, #52]	; 3c8 <flatbuffers_float_vec_at+0x70>
     390:	ldr	r0, [pc, #52]	; 3cc <flatbuffers_float_vec_at+0x74>
     394:	bl	0 <__assert_fail>
     398:	ldr	r3, [fp, #-12]
     39c:	lsl	r3, r3, #2
     3a0:	ldr	r2, [fp, #-8]
     3a4:	add	r3, r2, r3
     3a8:	mov	r0, r3
     3ac:	bl	144 <flatbuffers_float_read_from_pe>
     3b0:	vmov.f32	s15, s0
     3b4:	vmov.f32	s0, s15
     3b8:	sub	sp, fp, #4
     3bc:	pop	{fp, pc}
     3c0:	.word	0x00000418
     3c4:	.word	0x00000193
     3c8:	.word	0x00000004
     3cc:	.word	0x00000074

000003d0 <flatbuffers_has_identifier>:
     3d0:	push	{fp, lr}
     3d4:	add	fp, sp, #4
     3d8:	sub	sp, sp, #16
     3dc:	str	r0, [fp, #-16]
     3e0:	str	r1, [fp, #-20]	; 0xffffffec
     3e4:	mov	r3, #0
     3e8:	str	r3, [fp, #-12]
     3ec:	ldr	r3, [fp, #-20]	; 0xffffffec
     3f0:	cmp	r3, #0
     3f4:	bne	400 <flatbuffers_has_identifier+0x30>
     3f8:	mov	r3, #1
     3fc:	b	464 <flatbuffers_has_identifier+0x94>
     400:	sub	r3, fp, #12
     404:	mov	r2, #4
     408:	ldr	r1, [fp, #-20]	; 0xffffffec
     40c:	mov	r0, r3
     410:	bl	0 <strncpy>
     414:	ldr	r3, [fp, #-12]
     418:	mov	r0, r3
     41c:	bl	298 <__flatbuffers_thash_cast_from_le>
     420:	mov	r3, r0
     424:	str	r3, [fp, #-12]
     428:	ldr	r3, [fp, #-16]
     42c:	add	r3, r3, #4
     430:	mov	r0, r3
     434:	bl	2bc <__flatbuffers_thash_read_from_pe>
     438:	str	r0, [fp, #-8]
     43c:	ldr	r3, [fp, #-12]
     440:	cmp	r3, #0
     444:	beq	458 <flatbuffers_has_identifier+0x88>
     448:	ldr	r3, [fp, #-12]
     44c:	ldr	r2, [fp, #-8]
     450:	cmp	r2, r3
     454:	bne	460 <flatbuffers_has_identifier+0x90>
     458:	mov	r3, #1
     45c:	b	464 <flatbuffers_has_identifier+0x94>
     460:	mov	r3, #0
     464:	mov	r0, r3
     468:	sub	sp, fp, #4
     46c:	pop	{fp, pc}

00000470 <main_as_root>:
     470:	push	{fp, lr}
     474:	add	fp, sp, #4
     478:	sub	sp, sp, #16
     47c:	str	r0, [fp, #-16]
     480:	mov	r3, #0
     484:	str	r3, [fp, #-8]
     488:	ldr	r3, [fp, #-16]
     48c:	cmp	r3, #0
     490:	beq	4c4 <main_as_root+0x54>
     494:	ldr	r1, [fp, #-8]
     498:	ldr	r0, [fp, #-16]
     49c:	bl	3d0 <flatbuffers_has_identifier>
     4a0:	mov	r3, r0
     4a4:	cmp	r3, #0
     4a8:	beq	4c4 <main_as_root+0x54>
     4ac:	ldr	r0, [fp, #-16]
     4b0:	bl	198 <__flatbuffers_uoffset_read_from_pe>
     4b4:	mov	r2, r0
     4b8:	ldr	r3, [fp, #-16]
     4bc:	add	r3, r3, r2
     4c0:	b	4c8 <main_as_root+0x58>
     4c4:	mov	r3, #0
     4c8:	mov	r0, r3
     4cc:	sub	sp, fp, #4
     4d0:	pop	{fp, pc}

000004d4 <main_time>:
     4d4:	push	{fp, lr}
     4d8:	add	fp, sp, #4
     4dc:	sub	sp, sp, #16
     4e0:	str	r0, [fp, #-16]
     4e4:	mov	r3, #0
     4e8:	strh	r3, [fp, #-6]
     4ec:	ldr	r3, [fp, #-16]
     4f0:	cmp	r3, #0
     4f4:	bne	50c <main_time+0x38>
     4f8:	ldr	r3, [pc, #188]	; 5bc <main_time+0xe8>
     4fc:	mov	r2, #41	; 0x29
     500:	ldr	r1, [pc, #184]	; 5c0 <main_time+0xec>
     504:	ldr	r0, [pc, #184]	; 5c4 <main_time+0xf0>
     508:	bl	0 <__assert_fail>
     50c:	mov	r3, #0
     510:	strh	r3, [fp, #-8]
     514:	ldr	r0, [fp, #-16]
     518:	bl	1ec <__flatbuffers_soffset_read_from_pe>
     51c:	mov	r3, r0
     520:	rsb	r3, r3, #0
     524:	ldr	r2, [fp, #-16]
     528:	add	r3, r2, r3
     52c:	str	r3, [fp, #-12]
     530:	ldr	r0, [fp, #-12]
     534:	bl	244 <__flatbuffers_voffset_read_from_pe>
     538:	mov	r3, r0
     53c:	mov	r2, r3
     540:	ldrh	r3, [fp, #-8]
     544:	add	r3, r3, #3
     548:	lsl	r3, r3, #1
     54c:	cmp	r2, r3
     550:	bcc	578 <main_time+0xa4>
     554:	ldrh	r3, [fp, #-8]
     558:	add	r3, r3, #2
     55c:	lsl	r3, r3, #1
     560:	ldr	r2, [fp, #-12]
     564:	add	r3, r2, r3
     568:	mov	r0, r3
     56c:	bl	244 <__flatbuffers_voffset_read_from_pe>
     570:	mov	r3, r0
     574:	strh	r3, [fp, #-6]
     578:	ldrh	r3, [fp, #-6]
     57c:	cmp	r3, #0
     580:	beq	5a4 <main_time+0xd0>
     584:	ldrh	r3, [fp, #-6]
     588:	ldr	r2, [fp, #-16]
     58c:	add	r3, r2, r3
     590:	mov	r0, r3
     594:	bl	d0 <flatbuffers_int64_read_from_pe>
     598:	mov	r2, r0
     59c:	mov	r3, r1
     5a0:	b	5ac <main_time+0xd8>
     5a4:	mov	r2, #0
     5a8:	mov	r3, #0
     5ac:	mov	r0, r2
     5b0:	mov	r1, r3
     5b4:	sub	sp, fp, #4
     5b8:	pop	{fp, pc}
     5bc:	.word	0x000003f0
     5c0:	.word	0x000000ac
     5c4:	.word	0x00000114

000005c8 <main_device>:
     5c8:	push	{fp, lr}
     5cc:	add	fp, sp, #4
     5d0:	sub	sp, sp, #16
     5d4:	str	r0, [fp, #-16]
     5d8:	mov	r3, #0
     5dc:	strh	r3, [fp, #-6]
     5e0:	ldr	r3, [fp, #-16]
     5e4:	cmp	r3, #0
     5e8:	bne	600 <main_device+0x38>
     5ec:	ldr	r3, [pc, #176]	; 6a4 <main_device+0xdc>
     5f0:	mov	r2, #42	; 0x2a
     5f4:	ldr	r1, [pc, #172]	; 6a8 <main_device+0xe0>
     5f8:	ldr	r0, [pc, #172]	; 6ac <main_device+0xe4>
     5fc:	bl	0 <__assert_fail>
     600:	mov	r3, #1
     604:	strh	r3, [fp, #-8]
     608:	ldr	r0, [fp, #-16]
     60c:	bl	1ec <__flatbuffers_soffset_read_from_pe>
     610:	mov	r3, r0
     614:	rsb	r3, r3, #0
     618:	ldr	r2, [fp, #-16]
     61c:	add	r3, r2, r3
     620:	str	r3, [fp, #-12]
     624:	ldr	r0, [fp, #-12]
     628:	bl	244 <__flatbuffers_voffset_read_from_pe>
     62c:	mov	r3, r0
     630:	mov	r2, r3
     634:	ldrh	r3, [fp, #-8]
     638:	add	r3, r3, #3
     63c:	lsl	r3, r3, #1
     640:	cmp	r2, r3
     644:	bcc	66c <main_device+0xa4>
     648:	ldrh	r3, [fp, #-8]
     64c:	add	r3, r3, #2
     650:	lsl	r3, r3, #1
     654:	ldr	r2, [fp, #-12]
     658:	add	r3, r2, r3
     65c:	mov	r0, r3
     660:	bl	244 <__flatbuffers_voffset_read_from_pe>
     664:	mov	r3, r0
     668:	strh	r3, [fp, #-6]
     66c:	ldrh	r3, [fp, #-6]
     670:	cmp	r3, #0
     674:	beq	694 <main_device+0xcc>
     678:	ldrh	r3, [fp, #-6]
     67c:	ldr	r2, [fp, #-16]
     680:	add	r3, r2, r3
     684:	mov	r0, r3
     688:	bl	50 <flatbuffers_uint8_read_from_pe>
     68c:	mov	r3, r0
     690:	b	698 <main_device+0xd0>
     694:	mov	r3, #0
     698:	mov	r0, r3
     69c:	sub	sp, fp, #4
     6a0:	pop	{fp, pc}
     6a4:	.word	0x000003fc
     6a8:	.word	0x000000ac
     6ac:	.word	0x00000114

000006b0 <main_samples>:
     6b0:	push	{fp, lr}
     6b4:	add	fp, sp, #4
     6b8:	sub	sp, sp, #24
     6bc:	str	r0, [fp, #-24]	; 0xffffffe8
     6c0:	mov	r3, #0
     6c4:	strh	r3, [fp, #-6]
     6c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     6cc:	cmp	r3, #0
     6d0:	bne	6e8 <main_samples+0x38>
     6d4:	ldr	r3, [pc, #192]	; 79c <main_samples+0xec>
     6d8:	mov	r2, #43	; 0x2b
     6dc:	ldr	r1, [pc, #188]	; 7a0 <main_samples+0xf0>
     6e0:	ldr	r0, [pc, #188]	; 7a4 <main_samples+0xf4>
     6e4:	bl	0 <__assert_fail>
     6e8:	mov	r3, #2
     6ec:	strh	r3, [fp, #-8]
     6f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     6f4:	bl	1ec <__flatbuffers_soffset_read_from_pe>
     6f8:	mov	r3, r0
     6fc:	rsb	r3, r3, #0
     700:	ldr	r2, [fp, #-24]	; 0xffffffe8
     704:	add	r3, r2, r3
     708:	str	r3, [fp, #-12]
     70c:	ldr	r0, [fp, #-12]
     710:	bl	244 <__flatbuffers_voffset_read_from_pe>
     714:	mov	r3, r0
     718:	mov	r2, r3
     71c:	ldrh	r3, [fp, #-8]
     720:	add	r3, r3, #3
     724:	lsl	r3, r3, #1
     728:	cmp	r2, r3
     72c:	bcc	754 <main_samples+0xa4>
     730:	ldrh	r3, [fp, #-8]
     734:	add	r3, r3, #2
     738:	lsl	r3, r3, #1
     73c:	ldr	r2, [fp, #-12]
     740:	add	r3, r2, r3
     744:	mov	r0, r3
     748:	bl	244 <__flatbuffers_voffset_read_from_pe>
     74c:	mov	r3, r0
     750:	strh	r3, [fp, #-6]
     754:	ldrh	r3, [fp, #-6]
     758:	cmp	r3, #0
     75c:	beq	78c <main_samples+0xdc>
     760:	ldrh	r3, [fp, #-6]
     764:	ldr	r2, [fp, #-24]	; 0xffffffe8
     768:	add	r3, r2, r3
     76c:	str	r3, [fp, #-16]
     770:	ldr	r0, [fp, #-16]
     774:	bl	198 <__flatbuffers_uoffset_read_from_pe>
     778:	mov	r3, r0
     77c:	add	r3, r3, #4
     780:	ldr	r2, [fp, #-16]
     784:	add	r3, r2, r3
     788:	b	790 <main_samples+0xe0>
     78c:	mov	r3, #0
     790:	mov	r0, r3
     794:	sub	sp, fp, #4
     798:	pop	{fp, pc}
     79c:	.word	0x00000408
     7a0:	.word	0x000000ac
     7a4:	.word	0x00000114

000007a8 <flatcc_emitter_get_buffer_size>:
     7a8:	push	{fp}		; (str fp, [sp, #-4]!)
     7ac:	add	fp, sp, #0
     7b0:	sub	sp, sp, #12
     7b4:	str	r0, [fp, #-8]
     7b8:	ldr	r3, [fp, #-8]
     7bc:	ldr	r3, [r3, #24]
     7c0:	mov	r0, r3
     7c4:	add	sp, fp, #0
     7c8:	pop	{fp}		; (ldr fp, [sp], #4)
     7cc:	bx	lr

000007d0 <flatcc_emitter_get_direct_buffer>:
     7d0:	push	{fp}		; (str fp, [sp, #-4]!)
     7d4:	add	fp, sp, #0
     7d8:	sub	sp, sp, #12
     7dc:	str	r0, [fp, #-8]
     7e0:	str	r1, [fp, #-12]
     7e4:	ldr	r3, [fp, #-8]
     7e8:	ldr	r2, [r3]
     7ec:	ldr	r3, [fp, #-8]
     7f0:	ldr	r3, [r3, #4]
     7f4:	cmp	r2, r3
     7f8:	bne	824 <flatcc_emitter_get_direct_buffer+0x54>
     7fc:	ldr	r3, [fp, #-12]
     800:	cmp	r3, #0
     804:	beq	818 <flatcc_emitter_get_direct_buffer+0x48>
     808:	ldr	r3, [fp, #-8]
     80c:	ldr	r2, [r3, #24]
     810:	ldr	r3, [fp, #-12]
     814:	str	r2, [r3]
     818:	ldr	r3, [fp, #-8]
     81c:	ldr	r3, [r3, #8]
     820:	b	840 <flatcc_emitter_get_direct_buffer+0x70>
     824:	ldr	r3, [fp, #-12]
     828:	cmp	r3, #0
     82c:	beq	83c <flatcc_emitter_get_direct_buffer+0x6c>
     830:	ldr	r3, [fp, #-12]
     834:	mov	r2, #0
     838:	str	r2, [r3]
     83c:	mov	r3, #0
     840:	mov	r0, r3
     844:	add	sp, fp, #0
     848:	pop	{fp}		; (ldr fp, [sp], #4)
     84c:	bx	lr

00000850 <flatbuffers_uint8_assign_to_pe>:
     850:	push	{fp, lr}
     854:	add	fp, sp, #4
     858:	sub	sp, sp, #8
     85c:	str	r0, [fp, #-8]
     860:	mov	r3, r1
     864:	strb	r3, [fp, #-9]
     868:	ldrb	r3, [fp, #-9]
     86c:	mov	r0, r3
     870:	bl	28 <flatbuffers_uint8_cast_to_pe>
     874:	mov	r3, r0
     878:	mov	r2, r3
     87c:	ldr	r3, [fp, #-8]
     880:	strb	r2, [r3]
     884:	ldr	r3, [fp, #-8]
     888:	mov	r0, r3
     88c:	sub	sp, fp, #4
     890:	pop	{fp, pc}

00000894 <flatbuffers_int64_assign_to_pe>:
     894:	push	{fp, lr}
     898:	add	fp, sp, #4
     89c:	sub	sp, sp, #16
     8a0:	str	r0, [fp, #-8]
     8a4:	strd	r2, [fp, #-20]	; 0xffffffec
     8a8:	ldrd	r0, [fp, #-20]	; 0xffffffec
     8ac:	bl	a8 <flatbuffers_int64_cast_to_pe>
     8b0:	mov	r2, r0
     8b4:	mov	r3, r1
     8b8:	ldr	r1, [fp, #-8]
     8bc:	strd	r2, [r1]
     8c0:	ldr	r3, [fp, #-8]
     8c4:	mov	r0, r3
     8c8:	sub	sp, fp, #4
     8cc:	pop	{fp, pc}

000008d0 <flatbuffers_float_vec_create>:
     8d0:	push	{fp, lr}
     8d4:	add	fp, sp, #4
     8d8:	sub	sp, sp, #24
     8dc:	str	r0, [fp, #-8]
     8e0:	str	r1, [fp, #-12]
     8e4:	str	r2, [fp, #-16]
     8e8:	mvn	r3, #-1073741824	; 0xc0000000
     8ec:	str	r3, [sp, #4]
     8f0:	mov	r3, #4
     8f4:	str	r3, [sp]
     8f8:	mov	r3, #4
     8fc:	ldr	r2, [fp, #-16]
     900:	ldr	r1, [fp, #-12]
     904:	ldr	r0, [fp, #-8]
     908:	bl	0 <flatcc_builder_create_vector>
     90c:	mov	r3, r0
     910:	mov	r0, r3
     914:	sub	sp, fp, #4
     918:	pop	{fp, pc}

0000091c <flatbuffers_buffer_start>:
     91c:	push	{fp, lr}
     920:	add	fp, sp, #4
     924:	sub	sp, sp, #8
     928:	str	r0, [fp, #-8]
     92c:	str	r1, [fp, #-12]
     930:	mov	r3, #0
     934:	mov	r2, #0
     938:	ldr	r1, [fp, #-12]
     93c:	ldr	r0, [fp, #-8]
     940:	bl	0 <flatcc_builder_start_buffer>
     944:	mov	r3, r0
     948:	mov	r0, r3
     94c:	sub	sp, fp, #4
     950:	pop	{fp, pc}

00000954 <flatbuffers_buffer_end>:
     954:	push	{fp, lr}
     958:	add	fp, sp, #4
     95c:	sub	sp, sp, #8
     960:	str	r0, [fp, #-8]
     964:	str	r1, [fp, #-12]
     968:	ldr	r1, [fp, #-12]
     96c:	ldr	r0, [fp, #-8]
     970:	bl	0 <flatcc_builder_end_buffer>
     974:	mov	r3, r0
     978:	mov	r0, r3
     97c:	sub	sp, fp, #4
     980:	pop	{fp, pc}

00000984 <main_start>:
     984:	push	{fp, lr}
     988:	add	fp, sp, #4
     98c:	sub	sp, sp, #8
     990:	str	r0, [fp, #-8]
     994:	mov	r1, #3
     998:	ldr	r0, [fp, #-8]
     99c:	bl	0 <flatcc_builder_start_table>
     9a0:	mov	r3, r0
     9a4:	mov	r0, r3
     9a8:	sub	sp, fp, #4
     9ac:	pop	{fp, pc}

000009b0 <main_end>:
     9b0:	push	{fp, lr}
     9b4:	add	fp, sp, #4
     9b8:	sub	sp, sp, #8
     9bc:	str	r0, [fp, #-8]
     9c0:	mov	r2, #0
     9c4:	ldr	r1, [pc, #60]	; a08 <main_end+0x58>
     9c8:	ldr	r0, [fp, #-8]
     9cc:	bl	0 <flatcc_builder_check_required>
     9d0:	mov	r3, r0
     9d4:	cmp	r3, #0
     9d8:	bne	9f0 <main_end+0x40>
     9dc:	ldr	r3, [pc, #40]	; a0c <main_end+0x5c>
     9e0:	mov	r2, #21
     9e4:	ldr	r1, [pc, #36]	; a10 <main_end+0x60>
     9e8:	ldr	r0, [pc, #36]	; a14 <main_end+0x64>
     9ec:	bl	0 <__assert_fail>
     9f0:	ldr	r0, [fp, #-8]
     9f4:	bl	0 <flatcc_builder_end_table>
     9f8:	mov	r3, r0
     9fc:	mov	r0, r3
     a00:	sub	sp, fp, #4
     a04:	pop	{fp, pc}
     a08:	.word	0x0000013c
     a0c:	.word	0x000003d8
     a10:	.word	0x00000140
     a14:	.word	0x000001a8

00000a18 <main_time_add>:
     a18:	push	{fp, lr}
     a1c:	add	fp, sp, #4
     a20:	sub	sp, sp, #24
     a24:	str	r0, [fp, #-16]
     a28:	strd	r2, [fp, #-28]	; 0xffffffe4
     a2c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
     a30:	orrs	r3, r2, r3
     a34:	bne	a40 <main_time_add+0x28>
     a38:	mov	r3, #0
     a3c:	b	a7c <main_time_add+0x64>
     a40:	mov	r3, #8
     a44:	mov	r2, #8
     a48:	mov	r1, #0
     a4c:	ldr	r0, [fp, #-16]
     a50:	bl	0 <flatcc_builder_table_add>
     a54:	str	r0, [fp, #-8]
     a58:	ldr	r3, [fp, #-8]
     a5c:	cmp	r3, #0
     a60:	bne	a6c <main_time_add+0x54>
     a64:	mvn	r3, #0
     a68:	b	a7c <main_time_add+0x64>
     a6c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
     a70:	ldr	r0, [fp, #-8]
     a74:	bl	894 <flatbuffers_int64_assign_to_pe>
     a78:	mov	r3, #0
     a7c:	mov	r0, r3
     a80:	sub	sp, fp, #4
     a84:	pop	{fp, pc}

00000a88 <main_device_add>:
     a88:	push	{fp, lr}
     a8c:	add	fp, sp, #4
     a90:	sub	sp, sp, #16
     a94:	str	r0, [fp, #-16]
     a98:	mov	r3, r1
     a9c:	strb	r3, [fp, #-17]	; 0xffffffef
     aa0:	ldrb	r3, [fp, #-17]	; 0xffffffef
     aa4:	cmp	r3, #0
     aa8:	bne	ab4 <main_device_add+0x2c>
     aac:	mov	r3, #0
     ab0:	b	af4 <main_device_add+0x6c>
     ab4:	mov	r3, #1
     ab8:	mov	r2, #1
     abc:	mov	r1, #1
     ac0:	ldr	r0, [fp, #-16]
     ac4:	bl	0 <flatcc_builder_table_add>
     ac8:	str	r0, [fp, #-8]
     acc:	ldr	r3, [fp, #-8]
     ad0:	cmp	r3, #0
     ad4:	bne	ae0 <main_device_add+0x58>
     ad8:	mvn	r3, #0
     adc:	b	af4 <main_device_add+0x6c>
     ae0:	ldrb	r3, [fp, #-17]	; 0xffffffef
     ae4:	mov	r1, r3
     ae8:	ldr	r0, [fp, #-8]
     aec:	bl	850 <flatbuffers_uint8_assign_to_pe>
     af0:	mov	r3, #0
     af4:	mov	r0, r3
     af8:	sub	sp, fp, #4
     afc:	pop	{fp, pc}

00000b00 <main_samples_add>:
     b00:	push	{fp, lr}
     b04:	add	fp, sp, #4
     b08:	sub	sp, sp, #16
     b0c:	str	r0, [fp, #-16]
     b10:	str	r1, [fp, #-20]	; 0xffffffec
     b14:	ldr	r3, [fp, #-20]	; 0xffffffec
     b18:	cmp	r3, #0
     b1c:	beq	b50 <main_samples_add+0x50>
     b20:	mov	r1, #2
     b24:	ldr	r0, [fp, #-16]
     b28:	bl	0 <flatcc_builder_table_add_offset>
     b2c:	str	r0, [fp, #-8]
     b30:	ldr	r3, [fp, #-8]
     b34:	cmp	r3, #0
     b38:	beq	b50 <main_samples_add+0x50>
     b3c:	ldr	r3, [fp, #-8]
     b40:	ldr	r2, [fp, #-20]	; 0xffffffec
     b44:	str	r2, [r3]
     b48:	mov	r3, #0
     b4c:	b	b54 <main_samples_add+0x54>
     b50:	mvn	r3, #0
     b54:	mov	r0, r3
     b58:	sub	sp, fp, #4
     b5c:	pop	{fp, pc}

00000b60 <main_create>:
     b60:	push	{fp, lr}
     b64:	add	fp, sp, #4
     b68:	sub	sp, sp, #16
     b6c:	str	r0, [fp, #-8]
     b70:	strd	r2, [fp, #-20]	; 0xffffffec
     b74:	ldr	r0, [fp, #-8]
     b78:	bl	984 <main_start>
     b7c:	mov	r3, r0
     b80:	cmp	r3, #0
     b84:	bne	bd4 <main_create+0x74>
     b88:	ldrd	r2, [fp, #-20]	; 0xffffffec
     b8c:	ldr	r0, [fp, #-8]
     b90:	bl	a18 <main_time_add>
     b94:	mov	r3, r0
     b98:	cmp	r3, #0
     b9c:	bne	bd4 <main_create+0x74>
     ba0:	ldr	r1, [fp, #8]
     ba4:	ldr	r0, [fp, #-8]
     ba8:	bl	b00 <main_samples_add>
     bac:	mov	r3, r0
     bb0:	cmp	r3, #0
     bb4:	bne	bd4 <main_create+0x74>
     bb8:	ldrb	r3, [fp, #4]
     bbc:	mov	r1, r3
     bc0:	ldr	r0, [fp, #-8]
     bc4:	bl	a88 <main_device_add>
     bc8:	mov	r3, r0
     bcc:	cmp	r3, #0
     bd0:	beq	bdc <main_create+0x7c>
     bd4:	mov	r3, #0
     bd8:	b	be8 <main_create+0x88>
     bdc:	ldr	r0, [fp, #-8]
     be0:	bl	9b0 <main_end>
     be4:	mov	r3, r0
     be8:	mov	r0, r3
     bec:	sub	sp, fp, #4
     bf0:	pop	{fp, pc}

00000bf4 <main_create_as_root>:
     bf4:	push	{fp, lr}
     bf8:	add	fp, sp, #4
     bfc:	sub	sp, sp, #24
     c00:	str	r0, [fp, #-8]
     c04:	strd	r2, [fp, #-20]	; 0xffffffec
     c08:	mov	r1, #0
     c0c:	ldr	r0, [fp, #-8]
     c10:	bl	91c <flatbuffers_buffer_start>
     c14:	mov	r3, r0
     c18:	cmp	r3, #0
     c1c:	beq	c28 <main_create_as_root+0x34>
     c20:	mov	r3, #0
     c24:	b	c58 <main_create_as_root+0x64>
     c28:	ldr	r3, [fp, #8]
     c2c:	str	r3, [sp, #4]
     c30:	ldrb	r3, [fp, #4]
     c34:	str	r3, [sp]
     c38:	ldrd	r2, [fp, #-20]	; 0xffffffec
     c3c:	ldr	r0, [fp, #-8]
     c40:	bl	b60 <main_create>
     c44:	mov	r3, r0
     c48:	mov	r1, r3
     c4c:	ldr	r0, [fp, #-8]
     c50:	bl	954 <flatbuffers_buffer_end>
     c54:	mov	r3, r0
     c58:	mov	r0, r3
     c5c:	sub	sp, fp, #4
     c60:	pop	{fp, pc}

00000c64 <hexdump>:
     c64:	push	{fp, lr}
     c68:	add	fp, sp, #4
     c6c:	sub	sp, sp, #48	; 0x30
     c70:	str	r0, [fp, #-40]	; 0xffffffd8
     c74:	str	r1, [fp, #-44]	; 0xffffffd4
     c78:	str	r2, [fp, #-48]	; 0xffffffd0
     c7c:	str	r3, [fp, #-52]	; 0xffffffcc
     c80:	ldr	r3, [fp, #-44]	; 0xffffffd4
     c84:	str	r3, [fp, #-12]
     c88:	ldr	r3, [fp, #-40]	; 0xffffffd8
     c8c:	cmp	r3, #0
     c90:	beq	ca4 <hexdump+0x40>
     c94:	ldr	r2, [fp, #-40]	; 0xffffffd8
     c98:	ldr	r1, [pc, #396]	; e2c <hexdump+0x1c8>
     c9c:	ldr	r0, [fp, #-52]	; 0xffffffcc
     ca0:	bl	0 <fprintf>
     ca4:	mov	r3, #0
     ca8:	str	r3, [fp, #-8]
     cac:	b	dc8 <hexdump+0x164>
     cb0:	ldr	r3, [fp, #-8]
     cb4:	and	r3, r3, #15
     cb8:	cmp	r3, #0
     cbc:	bne	cf4 <hexdump+0x90>
     cc0:	ldr	r3, [fp, #-8]
     cc4:	cmp	r3, #0
     cc8:	beq	ce0 <hexdump+0x7c>
     ccc:	sub	r3, fp, #32
     cd0:	mov	r2, r3
     cd4:	ldr	r1, [pc, #340]	; e30 <hexdump+0x1cc>
     cd8:	ldr	r0, [fp, #-52]	; 0xffffffcc
     cdc:	bl	0 <fprintf>
     ce0:	ldr	r2, [fp, #-8]
     ce4:	ldr	r1, [pc, #328]	; e34 <hexdump+0x1d0>
     ce8:	ldr	r0, [fp, #-52]	; 0xffffffcc
     cec:	bl	0 <fprintf>
     cf0:	b	d10 <hexdump+0xac>
     cf4:	ldr	r3, [fp, #-8]
     cf8:	and	r3, r3, #7
     cfc:	cmp	r3, #0
     d00:	bne	d10 <hexdump+0xac>
     d04:	ldr	r1, [fp, #-52]	; 0xffffffcc
     d08:	mov	r0, #32
     d0c:	bl	0 <fputc>
     d10:	ldr	r2, [fp, #-12]
     d14:	ldr	r3, [fp, #-8]
     d18:	add	r3, r2, r3
     d1c:	ldrb	r3, [r3]
     d20:	mov	r2, r3
     d24:	ldr	r1, [pc, #268]	; e38 <hexdump+0x1d4>
     d28:	ldr	r0, [fp, #-52]	; 0xffffffcc
     d2c:	bl	0 <fprintf>
     d30:	ldr	r2, [fp, #-12]
     d34:	ldr	r3, [fp, #-8]
     d38:	add	r3, r2, r3
     d3c:	ldrb	r3, [r3]
     d40:	cmp	r3, #31
     d44:	bls	d60 <hexdump+0xfc>
     d48:	ldr	r2, [fp, #-12]
     d4c:	ldr	r3, [fp, #-8]
     d50:	add	r3, r2, r3
     d54:	ldrb	r3, [r3]
     d58:	cmp	r3, #126	; 0x7e
     d5c:	bls	d7c <hexdump+0x118>
     d60:	ldr	r3, [fp, #-8]
     d64:	and	r3, r3, #15
     d68:	sub	r2, fp, #4
     d6c:	add	r3, r2, r3
     d70:	mov	r2, #46	; 0x2e
     d74:	strb	r2, [r3, #-28]	; 0xffffffe4
     d78:	b	da0 <hexdump+0x13c>
     d7c:	ldr	r3, [fp, #-8]
     d80:	and	r3, r3, #15
     d84:	ldr	r1, [fp, #-12]
     d88:	ldr	r2, [fp, #-8]
     d8c:	add	r2, r1, r2
     d90:	ldrb	r2, [r2]
     d94:	sub	r1, fp, #4
     d98:	add	r3, r1, r3
     d9c:	strb	r2, [r3, #-28]	; 0xffffffe4
     da0:	ldr	r3, [fp, #-8]
     da4:	and	r3, r3, #15
     da8:	add	r3, r3, #1
     dac:	sub	r2, fp, #4
     db0:	add	r3, r2, r3
     db4:	mov	r2, #0
     db8:	strb	r2, [r3, #-28]	; 0xffffffe4
     dbc:	ldr	r3, [fp, #-8]
     dc0:	add	r3, r3, #1
     dc4:	str	r3, [fp, #-8]
     dc8:	ldr	r2, [fp, #-8]
     dcc:	ldr	r3, [fp, #-48]	; 0xffffffd0
     dd0:	cmp	r2, r3
     dd4:	bcc	cb0 <hexdump+0x4c>
     dd8:	b	dfc <hexdump+0x198>
     ddc:	ldr	r3, [fp, #-52]	; 0xffffffcc
     de0:	mov	r2, #3
     de4:	mov	r1, #1
     de8:	ldr	r0, [pc, #76]	; e3c <hexdump+0x1d8>
     dec:	bl	0 <fwrite>
     df0:	ldr	r3, [fp, #-8]
     df4:	add	r3, r3, #1
     df8:	str	r3, [fp, #-8]
     dfc:	ldr	r3, [fp, #-8]
     e00:	and	r3, r3, #15
     e04:	cmp	r3, #0
     e08:	bne	ddc <hexdump+0x178>
     e0c:	sub	r3, fp, #32
     e10:	mov	r2, r3
     e14:	ldr	r1, [pc, #20]	; e30 <hexdump+0x1cc>
     e18:	ldr	r0, [fp, #-52]	; 0xffffffcc
     e1c:	bl	0 <fprintf>
     e20:	nop			; (mov r0, r0)
     e24:	sub	sp, fp, #4
     e28:	pop	{fp, pc}
     e2c:	.word	0x00000214
     e30:	.word	0x0000021c
     e34:	.word	0x00000224
     e38:	.word	0x0000022c
     e3c:	.word	0x00000234

00000e40 <dbg_emitter>:
     e40:	push	{fp, lr}
     e44:	add	fp, sp, #4
     e48:	sub	sp, sp, #24
     e4c:	str	r0, [fp, #-16]
     e50:	str	r1, [fp, #-20]	; 0xffffffec
     e54:	str	r2, [fp, #-24]	; 0xffffffe8
     e58:	str	r3, [fp, #-28]	; 0xffffffe4
     e5c:	ldr	r3, [fp, #4]
     e60:	ldr	r2, [fp, #-28]	; 0xffffffe4
     e64:	ldr	r1, [fp, #-24]	; 0xffffffe8
     e68:	ldr	r0, [pc, #224]	; f50 <dbg_emitter+0x110>
     e6c:	bl	0 <printf>
     e70:	mov	r3, #0
     e74:	str	r3, [fp, #-8]
     e78:	b	f30 <dbg_emitter+0xf0>
     e7c:	ldr	r3, [fp, #-8]
     e80:	lsl	r3, r3, #3
     e84:	ldr	r2, [fp, #-20]	; 0xffffffec
     e88:	add	r3, r2, r3
     e8c:	ldr	r3, [r3]
     e90:	ldr	r2, [pc, #188]	; f54 <dbg_emitter+0x114>
     e94:	cmp	r3, r2
     e98:	bne	ec0 <dbg_emitter+0x80>
     e9c:	ldr	r3, [fp, #-8]
     ea0:	lsl	r3, r3, #3
     ea4:	ldr	r2, [fp, #-20]	; 0xffffffec
     ea8:	add	r3, r2, r3
     eac:	ldr	r3, [r3, #4]
     eb0:	mov	r2, r3
     eb4:	ldr	r1, [fp, #-28]	; 0xffffffe4
     eb8:	ldr	r0, [pc, #152]	; f58 <dbg_emitter+0x118>
     ebc:	bl	0 <printf>
     ec0:	ldr	r3, [fp, #-8]
     ec4:	lsl	r3, r3, #3
     ec8:	ldr	r2, [fp, #-20]	; 0xffffffec
     ecc:	add	r3, r2, r3
     ed0:	ldr	r3, [r3]
     ed4:	cmp	r3, #0
     ed8:	bne	f00 <dbg_emitter+0xc0>
     edc:	ldr	r3, [fp, #-8]
     ee0:	lsl	r3, r3, #3
     ee4:	ldr	r2, [fp, #-20]	; 0xffffffec
     ee8:	add	r3, r2, r3
     eec:	ldr	r3, [r3, #4]
     ef0:	mov	r2, r3
     ef4:	ldr	r1, [fp, #-28]	; 0xffffffe4
     ef8:	ldr	r0, [pc, #92]	; f5c <dbg_emitter+0x11c>
     efc:	bl	0 <printf>
     f00:	ldr	r3, [fp, #-8]
     f04:	lsl	r3, r3, #3
     f08:	ldr	r2, [fp, #-20]	; 0xffffffec
     f0c:	add	r3, r2, r3
     f10:	ldr	r3, [r3, #4]
     f14:	mov	r2, r3
     f18:	ldr	r3, [fp, #-28]	; 0xffffffe4
     f1c:	add	r3, r3, r2
     f20:	str	r3, [fp, #-28]	; 0xffffffe4
     f24:	ldr	r3, [fp, #-8]
     f28:	add	r3, r3, #1
     f2c:	str	r3, [fp, #-8]
     f30:	ldr	r2, [fp, #-8]
     f34:	ldr	r3, [fp, #-24]	; 0xffffffe8
     f38:	cmp	r2, r3
     f3c:	blt	e7c <dbg_emitter+0x3c>
     f40:	mov	r3, #0
     f44:	mov	r0, r3
     f48:	sub	sp, fp, #4
     f4c:	pop	{fp, pc}
     f50:	.word	0x00000238
     f54:	.word	0x00000000
     f58:	.word	0x0000026c
     f5c:	.word	0x00000290

00000f60 <debug_test>:
     f60:	push	{fp, lr}
     f64:	add	fp, sp, #4
     f68:	sub	sp, sp, #288	; 0x120
     f6c:	sub	r3, fp, #280	; 0x118
     f70:	mov	r2, #40	; 0x28
     f74:	mov	r1, #0
     f78:	mov	r0, r3
     f7c:	bl	0 <memset>
     f80:	sub	r3, fp, #240	; 0xf0
     f84:	str	r3, [fp, #-8]
     f88:	ldr	r0, [pc, #104]	; ff8 <debug_test+0x98>
     f8c:	bl	0 <puts>
     f90:	mov	r3, #0
     f94:	str	r3, [sp]
     f98:	mov	r3, #0
     f9c:	mov	r2, #0
     fa0:	ldr	r1, [pc, #84]	; ffc <debug_test+0x9c>
     fa4:	ldr	r0, [fp, #-8]
     fa8:	bl	0 <flatcc_builder_custom_init>
     fac:	sub	r3, fp, #280	; 0x118
     fb0:	mov	r2, #10
     fb4:	mov	r1, r3
     fb8:	ldr	r0, [fp, #-8]
     fbc:	bl	8d0 <flatbuffers_float_vec_create>
     fc0:	mov	r3, r0
     fc4:	str	r3, [sp, #4]
     fc8:	mov	r3, #1
     fcc:	str	r3, [sp]
     fd0:	mov	r2, #42	; 0x2a
     fd4:	mov	r3, #0
     fd8:	ldr	r0, [fp, #-8]
     fdc:	bl	bf4 <main_create_as_root>
     fe0:	ldr	r0, [fp, #-8]
     fe4:	bl	0 <flatcc_builder_clear>
     fe8:	mov	r3, #0
     fec:	mov	r0, r3
     ff0:	sub	sp, fp, #4
     ff4:	pop	{fp, pc}
     ff8:	.word	0x000002c0
     ffc:	.word	0x00000000

00001000 <emit_test>:
    1000:	push	{fp, lr}
    1004:	add	fp, sp, #4
    1008:	sub	sp, sp, #352	; 0x160
    100c:	ldr	r3, [pc, #696]	; 12cc <emit_test+0x2cc>
    1010:	sub	ip, fp, #96	; 0x60
    1014:	mov	lr, r3
    1018:	ldm	lr!, {r0, r1, r2, r3}
    101c:	stmia	ip!, {r0, r1, r2, r3}
    1020:	ldm	lr!, {r0, r1, r2, r3}
    1024:	stmia	ip!, {r0, r1, r2, r3}
    1028:	ldm	lr!, {r0, r1, r2, r3}
    102c:	stmia	ip!, {r0, r1, r2, r3}
    1030:	ldm	lr, {r0, r1, r2}
    1034:	stmia	ip!, {r0, r1}
    1038:	strh	r2, [ip]
    103c:	add	ip, ip, #2
    1040:	lsr	r3, r2, #16
    1044:	strb	r3, [ip]
    1048:	ldr	r3, [pc, #640]	; 12d0 <emit_test+0x2d0>
    104c:	sub	ip, fp, #348	; 0x15c
    1050:	ldm	r3, {r0, r1, r2, r3}
    1054:	stm	ip, {r0, r1, r2, r3}
    1058:	sub	r3, fp, #332	; 0x14c
    105c:	str	r3, [fp, #-8]
    1060:	ldr	r0, [fp, #-8]
    1064:	bl	0 <flatcc_builder_init>
    1068:	ldr	r0, [fp, #-8]
    106c:	bl	0 <flatcc_builder_get_emit_context>
    1070:	str	r0, [fp, #-12]
    1074:	sub	r3, fp, #348	; 0x15c
    1078:	mov	r2, #4
    107c:	mov	r1, r3
    1080:	ldr	r0, [fp, #-8]
    1084:	bl	8d0 <flatbuffers_float_vec_create>
    1088:	str	r0, [fp, #-16]
    108c:	ldr	r3, [fp, #-16]
    1090:	str	r3, [sp, #4]
    1094:	mov	r3, #1
    1098:	str	r3, [sp]
    109c:	mov	r2, #42	; 0x2a
    10a0:	mov	r3, #0
    10a4:	ldr	r0, [fp, #-8]
    10a8:	bl	bf4 <main_create_as_root>
    10ac:	sub	r3, fp, #100	; 0x64
    10b0:	mov	r1, r3
    10b4:	ldr	r0, [fp, #-12]
    10b8:	bl	7d0 <flatcc_emitter_get_direct_buffer>
    10bc:	str	r0, [fp, #-20]	; 0xffffffec
    10c0:	ldr	r3, [fp, #-20]	; 0xffffffec
    10c4:	cmp	r3, #0
    10c8:	bne	10d4 <emit_test+0xd4>
    10cc:	mvn	r3, #0
    10d0:	b	12bc <emit_test+0x2bc>
    10d4:	ldr	r0, [fp, #-12]
    10d8:	bl	7a8 <flatcc_emitter_get_buffer_size>
    10dc:	mov	r2, r0
    10e0:	ldr	r3, [fp, #-100]	; 0xffffff9c
    10e4:	cmp	r2, r3
    10e8:	beq	1100 <emit_test+0x100>
    10ec:	ldr	r3, [pc, #480]	; 12d4 <emit_test+0x2d4>
    10f0:	mov	r2, #100	; 0x64
    10f4:	ldr	r1, [pc, #476]	; 12d8 <emit_test+0x2d8>
    10f8:	ldr	r0, [pc, #476]	; 12dc <emit_test+0x2dc>
    10fc:	bl	0 <__assert_fail>
    1100:	ldr	r0, [fp, #-8]
    1104:	bl	0 <flatcc_builder_get_buffer_size>
    1108:	mov	r2, r0
    110c:	ldr	r3, [fp, #-100]	; 0xffffff9c
    1110:	cmp	r2, r3
    1114:	beq	112c <emit_test+0x12c>
    1118:	ldr	r3, [pc, #436]	; 12d4 <emit_test+0x2d4>
    111c:	mov	r2, #101	; 0x65
    1120:	ldr	r1, [pc, #432]	; 12d8 <emit_test+0x2d8>
    1124:	ldr	r0, [pc, #432]	; 12dc <emit_test+0x2dc>
    1128:	bl	0 <__assert_fail>
    112c:	ldr	r3, [pc, #428]	; 12e0 <emit_test+0x2e0>
    1130:	ldr	r3, [r3]
    1134:	ldr	r2, [fp, #-100]	; 0xffffff9c
    1138:	ldr	r1, [pc, #420]	; 12e4 <emit_test+0x2e4>
    113c:	mov	r0, r3
    1140:	bl	0 <fprintf>
    1144:	ldr	r2, [fp, #-100]	; 0xffffff9c
    1148:	ldr	r3, [pc, #400]	; 12e0 <emit_test+0x2e0>
    114c:	ldr	r3, [r3]
    1150:	ldr	r1, [fp, #-20]	; 0xffffffec
    1154:	ldr	r0, [pc, #396]	; 12e8 <emit_test+0x2e8>
    1158:	bl	c64 <hexdump>
    115c:	ldr	r3, [fp, #-100]	; 0xffffff9c
    1160:	cmp	r3, #58	; 0x3a
    1164:	beq	117c <emit_test+0x17c>
    1168:	ldr	r3, [pc, #356]	; 12d4 <emit_test+0x2d4>
    116c:	mov	r2, #106	; 0x6a
    1170:	ldr	r1, [pc, #352]	; 12d8 <emit_test+0x2d8>
    1174:	ldr	r0, [pc, #352]	; 12dc <emit_test+0x2dc>
    1178:	bl	0 <__assert_fail>
    117c:	ldr	r3, [fp, #-100]	; 0xffffff9c
    1180:	cmp	r3, #58	; 0x3a
    1184:	beq	119c <emit_test+0x19c>
    1188:	ldr	r3, [pc, #324]	; 12d4 <emit_test+0x2d4>
    118c:	mov	r2, #107	; 0x6b
    1190:	ldr	r1, [pc, #320]	; 12d8 <emit_test+0x2d8>
    1194:	ldr	r0, [pc, #320]	; 12dc <emit_test+0x2dc>
    1198:	bl	0 <__assert_fail>
    119c:	ldr	r2, [fp, #-100]	; 0xffffff9c
    11a0:	sub	r3, fp, #96	; 0x60
    11a4:	mov	r1, r3
    11a8:	ldr	r0, [fp, #-20]	; 0xffffffec
    11ac:	bl	0 <memcmp>
    11b0:	mov	r3, r0
    11b4:	cmp	r3, #0
    11b8:	beq	11d0 <emit_test+0x1d0>
    11bc:	ldr	r3, [pc, #272]	; 12d4 <emit_test+0x2d4>
    11c0:	mov	r2, #108	; 0x6c
    11c4:	ldr	r1, [pc, #268]	; 12d8 <emit_test+0x2d8>
    11c8:	ldr	r0, [pc, #268]	; 12dc <emit_test+0x2dc>
    11cc:	bl	0 <__assert_fail>
    11d0:	ldr	r0, [fp, #-20]	; 0xffffffec
    11d4:	bl	470 <main_as_root>
    11d8:	str	r0, [fp, #-24]	; 0xffffffe8
    11dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    11e0:	bl	4d4 <main_time>
    11e4:	mov	r2, r0
    11e8:	mov	r3, r1
    11ec:	strd	r2, [fp, #-36]	; 0xffffffdc
    11f0:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    11f4:	cmp	r3, #0
    11f8:	cmpeq	r2, #42	; 0x2a
    11fc:	beq	1214 <emit_test+0x214>
    1200:	ldr	r3, [pc, #204]	; 12d4 <emit_test+0x2d4>
    1204:	mov	r2, #112	; 0x70
    1208:	ldr	r1, [pc, #200]	; 12d8 <emit_test+0x2d8>
    120c:	ldr	r0, [pc, #200]	; 12dc <emit_test+0x2dc>
    1210:	bl	0 <__assert_fail>
    1214:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1218:	bl	5c8 <main_device>
    121c:	mov	r3, r0
    1220:	cmp	r3, #1
    1224:	beq	123c <emit_test+0x23c>
    1228:	ldr	r3, [pc, #164]	; 12d4 <emit_test+0x2d4>
    122c:	mov	r2, #113	; 0x71
    1230:	ldr	r1, [pc, #160]	; 12d8 <emit_test+0x2d8>
    1234:	ldr	r0, [pc, #160]	; 12dc <emit_test+0x2dc>
    1238:	bl	0 <__assert_fail>
    123c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1240:	bl	6b0 <main_samples>
    1244:	mov	r3, r0
    1248:	mov	r0, r3
    124c:	bl	330 <flatbuffers_float_vec_len>
    1250:	mov	r3, r0
    1254:	cmp	r3, #4
    1258:	beq	1270 <emit_test+0x270>
    125c:	ldr	r3, [pc, #112]	; 12d4 <emit_test+0x2d4>
    1260:	mov	r2, #114	; 0x72
    1264:	ldr	r1, [pc, #108]	; 12d8 <emit_test+0x2d8>
    1268:	ldr	r0, [pc, #108]	; 12dc <emit_test+0x2dc>
    126c:	bl	0 <__assert_fail>
    1270:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1274:	bl	6b0 <main_samples>
    1278:	mov	r3, r0
    127c:	mov	r1, #2
    1280:	mov	r0, r3
    1284:	bl	358 <flatbuffers_float_vec_at>
    1288:	vmov.f32	s14, s0
    128c:	vldr	s15, [pc, #52]	; 12c8 <emit_test+0x2c8>
    1290:	vcmp.f32	s14, s15
    1294:	vmrs	APSR_nzcv, fpscr
    1298:	beq	12b0 <emit_test+0x2b0>
    129c:	ldr	r3, [pc, #48]	; 12d4 <emit_test+0x2d4>
    12a0:	mov	r2, #115	; 0x73
    12a4:	ldr	r1, [pc, #44]	; 12d8 <emit_test+0x2d8>
    12a8:	ldr	r0, [pc, #44]	; 12dc <emit_test+0x2dc>
    12ac:	bl	0 <__assert_fail>
    12b0:	ldr	r0, [fp, #-8]
    12b4:	bl	0 <flatcc_builder_clear>
    12b8:	mov	r3, #0
    12bc:	mov	r0, r3
    12c0:	sub	sp, fp, #4
    12c4:	pop	{fp, pc}
    12c8:	.word	0x3f99999a
    12cc:	.word	0x0000038c
    12d0:	.word	0x000003c8
    12d4:	.word	0x000003e4
    12d8:	.word	0x00000314
    12dc:	.word	0x00000368
    12e0:	.word	0x00000000
    12e4:	.word	0x0000036c
    12e8:	.word	0x00000380

000012ec <main>:
    12ec:	push	{fp, lr}
    12f0:	add	fp, sp, #4
    12f4:	sub	sp, sp, #16
    12f8:	str	r0, [fp, #-16]
    12fc:	str	r1, [fp, #-20]	; 0xffffffec
    1300:	mov	r3, #0
    1304:	str	r3, [fp, #-8]
    1308:	bl	f60 <debug_test>
    130c:	mov	r2, r0
    1310:	ldr	r3, [fp, #-8]
    1314:	orr	r3, r3, r2
    1318:	str	r3, [fp, #-8]
    131c:	bl	1000 <emit_test>
    1320:	mov	r2, r0
    1324:	ldr	r3, [fp, #-8]
    1328:	orr	r3, r3, r2
    132c:	str	r3, [fp, #-8]
    1330:	ldr	r3, [fp, #-8]
    1334:	mov	r0, r3
    1338:	sub	sp, fp, #4
    133c:	pop	{fp, pc}
