
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-xml.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_xml_reopen>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	sub	sp, sp, #32
   c:	str	r0, [fp, #-8]
  10:	movw	r0, #56	; 0x38
  14:	bl	0 <malloc>
  18:	str	r0, [fp, #-12]
  1c:	ldr	r0, [fp, #-12]
  20:	movw	lr, #0
  24:	cmp	r0, lr
  28:	bne	6c <coda_xml_reopen+0x6c>
  2c:	mvn	r0, #0
  30:	movw	r1, #0
  34:	movt	r1, #0
  38:	movw	r2, #56	; 0x38
  3c:	movw	r3, #0
  40:	movt	r3, #0
  44:	movw	ip, #53	; 0x35
  48:	str	ip, [sp]
  4c:	bl	0 <coda_set_error>
  50:	ldr	r0, [fp, #-8]
  54:	ldr	r0, [r0]
  58:	bl	0 <coda_close>
  5c:	mvn	r1, #0
  60:	str	r1, [fp, #-4]
  64:	str	r0, [sp, #16]
  68:	b	184 <coda_xml_reopen+0x184>
  6c:	ldr	r0, [fp, #-12]
  70:	mov	r1, #0
  74:	str	r1, [r0]
  78:	ldr	r0, [fp, #-8]
  7c:	ldr	r0, [r0]
  80:	ldr	r2, [r0, #8]
  84:	ldr	r0, [r0, #12]
  88:	ldr	r3, [fp, #-12]
  8c:	str	r0, [r3, #12]
  90:	str	r2, [r3, #8]
  94:	ldr	r0, [fp, #-12]
  98:	mov	r2, #2
  9c:	str	r2, [r0, #16]
  a0:	ldr	r0, [fp, #-12]
  a4:	str	r1, [r0, #20]
  a8:	ldr	r0, [fp, #-12]
  ac:	str	r1, [r0, #24]
  b0:	ldr	r0, [fp, #-12]
  b4:	str	r1, [r0, #28]
  b8:	ldr	r0, [fp, #-12]
  bc:	str	r1, [r0, #32]
  c0:	ldr	r0, [fp, #-12]
  c4:	str	r1, [r0, #44]	; 0x2c
  c8:	str	r1, [r0, #40]	; 0x28
  cc:	ldr	r0, [fp, #-12]
  d0:	movw	r1, #0
  d4:	str	r1, [r0, #48]	; 0x30
  d8:	ldr	r0, [fp, #-8]
  dc:	ldr	r0, [r0]
  e0:	ldr	r1, [fp, #-12]
  e4:	str	r0, [r1, #52]	; 0x34
  e8:	ldr	r0, [fp, #-8]
  ec:	ldr	r0, [r0]
  f0:	ldr	r0, [r0]
  f4:	bl	0 <strdup>
  f8:	ldr	r1, [fp, #-12]
  fc:	str	r0, [r1]
 100:	ldr	r0, [fp, #-12]
 104:	ldr	r0, [r0]
 108:	movw	r1, #0
 10c:	cmp	r0, r1
 110:	bne	148 <coda_xml_reopen+0x148>
 114:	mvn	r0, #0
 118:	movw	r1, #0
 11c:	movt	r1, #0
 120:	movw	r2, #0
 124:	movt	r2, #0
 128:	movw	r3, #72	; 0x48
 12c:	bl	0 <coda_set_error>
 130:	ldr	r0, [fp, #-12]
 134:	bl	0 <coda_close>
 138:	mvn	r1, #0
 13c:	str	r1, [fp, #-4]
 140:	str	r0, [sp, #12]
 144:	b	184 <coda_xml_reopen+0x184>
 148:	ldr	r0, [fp, #-12]
 14c:	bl	0 <coda_xml_parse>
 150:	cmp	r0, #0
 154:	beq	170 <coda_xml_reopen+0x170>
 158:	ldr	r0, [fp, #-12]
 15c:	bl	0 <coda_close>
 160:	mvn	lr, #0
 164:	str	lr, [fp, #-4]
 168:	str	r0, [sp, #8]
 16c:	b	184 <coda_xml_reopen+0x184>
 170:	ldr	r0, [fp, #-12]
 174:	ldr	r1, [fp, #-8]
 178:	str	r0, [r1]
 17c:	movw	r0, #0
 180:	str	r0, [fp, #-4]
 184:	ldr	r0, [fp, #-4]
 188:	mov	sp, fp
 18c:	pop	{fp, pc}

00000190 <coda_xml_reopen_with_definition>:
 190:	push	{fp, lr}
 194:	mov	fp, sp
 198:	sub	sp, sp, #16
 19c:	str	r0, [sp, #8]
 1a0:	str	r1, [sp, #4]
 1a4:	ldr	r0, [sp, #8]
 1a8:	ldr	r0, [r0]
 1ac:	str	r0, [sp]
 1b0:	ldr	r0, [sp, #4]
 1b4:	movw	r1, #0
 1b8:	cmp	r0, r1
 1bc:	beq	1c4 <coda_xml_reopen_with_definition+0x34>
 1c0:	b	1e4 <coda_xml_reopen_with_definition+0x54>
 1c4:	movw	r0, #0
 1c8:	movt	r0, #0
 1cc:	movw	r1, #0
 1d0:	movt	r1, #0
 1d4:	movw	r2, #92	; 0x5c
 1d8:	movw	r3, #0
 1dc:	movt	r3, #0
 1e0:	bl	0 <__assert_fail>
 1e4:	ldr	r0, [sp]
 1e8:	ldr	r0, [r0, #16]
 1ec:	cmp	r0, #2
 1f0:	bne	1f8 <coda_xml_reopen_with_definition+0x68>
 1f4:	b	218 <coda_xml_reopen_with_definition+0x88>
 1f8:	movw	r0, #0
 1fc:	movt	r0, #0
 200:	movw	r1, #0
 204:	movt	r1, #0
 208:	movw	r2, #93	; 0x5d
 20c:	movw	r3, #0
 210:	movt	r3, #0
 214:	bl	0 <__assert_fail>
 218:	ldr	r0, [sp, #4]
 21c:	ldr	r0, [r0]
 220:	cmp	r0, #2
 224:	bne	22c <coda_xml_reopen_with_definition+0x9c>
 228:	b	24c <coda_xml_reopen_with_definition+0xbc>
 22c:	movw	r0, #0
 230:	movt	r0, #0
 234:	movw	r1, #0
 238:	movt	r1, #0
 23c:	movw	r2, #94	; 0x5e
 240:	movw	r3, #0
 244:	movt	r3, #0
 248:	bl	0 <__assert_fail>
 24c:	ldr	r0, [sp]
 250:	ldr	r0, [r0, #20]
 254:	bl	0 <coda_dynamic_type_delete>
 258:	ldr	r0, [sp]
 25c:	mov	lr, #0
 260:	str	lr, [r0, #20]
 264:	ldr	r0, [sp]
 268:	str	lr, [r0, #44]	; 0x2c
 26c:	str	lr, [r0, #40]	; 0x28
 270:	ldr	r0, [sp]
 274:	ldr	r0, [r0, #48]	; 0x30
 278:	movw	lr, #0
 27c:	cmp	r0, lr
 280:	beq	29c <coda_xml_reopen_with_definition+0x10c>
 284:	ldr	r0, [sp]
 288:	ldr	r0, [r0, #48]	; 0x30
 28c:	bl	0 <free>
 290:	ldr	r0, [sp]
 294:	movw	lr, #0
 298:	str	lr, [r0, #48]	; 0x30
 29c:	ldr	r0, [sp, #4]
 2a0:	ldr	r1, [sp]
 2a4:	str	r0, [r1, #24]
 2a8:	ldr	r0, [sp]
 2ac:	bl	0 <coda_xml_parse>
 2b0:	cmp	r0, #0
 2b4:	beq	2c4 <coda_xml_reopen_with_definition+0x134>
 2b8:	mvn	r0, #0
 2bc:	str	r0, [fp, #-4]
 2c0:	b	2cc <coda_xml_reopen_with_definition+0x13c>
 2c4:	movw	r0, #0
 2c8:	str	r0, [fp, #-4]
 2cc:	ldr	r0, [fp, #-4]
 2d0:	mov	sp, fp
 2d4:	pop	{fp, pc}

000002d8 <coda_xml_close>:
 2d8:	push	{fp, lr}
 2dc:	mov	fp, sp
 2e0:	sub	sp, sp, #16
 2e4:	str	r0, [fp, #-4]
 2e8:	ldr	r0, [fp, #-4]
 2ec:	str	r0, [sp, #8]
 2f0:	ldr	r0, [sp, #8]
 2f4:	ldr	r0, [r0]
 2f8:	movw	r1, #0
 2fc:	cmp	r0, r1
 300:	beq	310 <coda_xml_close+0x38>
 304:	ldr	r0, [sp, #8]
 308:	ldr	r0, [r0]
 30c:	bl	0 <free>
 310:	ldr	r0, [sp, #8]
 314:	ldr	r0, [r0, #20]
 318:	movw	r1, #0
 31c:	cmp	r0, r1
 320:	beq	330 <coda_xml_close+0x58>
 324:	ldr	r0, [sp, #8]
 328:	ldr	r0, [r0, #20]
 32c:	bl	0 <coda_dynamic_type_delete>
 330:	ldr	r0, [sp, #8]
 334:	ldr	r0, [r0, #48]	; 0x30
 338:	movw	r1, #0
 33c:	cmp	r0, r1
 340:	beq	350 <coda_xml_close+0x78>
 344:	ldr	r0, [sp, #8]
 348:	ldr	r0, [r0, #48]	; 0x30
 34c:	bl	0 <free>
 350:	ldr	r0, [sp, #8]
 354:	ldr	r0, [r0, #52]	; 0x34
 358:	movw	r1, #0
 35c:	cmp	r0, r1
 360:	beq	374 <coda_xml_close+0x9c>
 364:	ldr	r0, [sp, #8]
 368:	ldr	r0, [r0, #52]	; 0x34
 36c:	bl	0 <coda_bin_close>
 370:	str	r0, [sp, #4]
 374:	ldr	r0, [sp, #8]
 378:	bl	0 <free>
 37c:	movw	r0, #0
 380:	mov	sp, fp
 384:	pop	{fp, pc}

00000388 <coda_xml_cursor_set_product>:
 388:	sub	sp, sp, #8
 38c:	str	r0, [sp, #4]
 390:	str	r1, [sp]
 394:	ldr	r0, [sp]
 398:	ldr	r1, [sp, #4]
 39c:	str	r0, [r1]
 3a0:	ldr	r0, [sp, #4]
 3a4:	mov	r1, #1
 3a8:	str	r1, [r0, #4]
 3ac:	ldr	r0, [sp]
 3b0:	ldr	r0, [r0, #20]
 3b4:	ldr	r1, [sp, #4]
 3b8:	str	r0, [r1, #8]
 3bc:	ldr	r0, [sp, #4]
 3c0:	mvn	r1, #0
 3c4:	str	r1, [r0, #12]
 3c8:	ldr	r0, [sp, #4]
 3cc:	mov	r1, #0
 3d0:	str	r1, [r0, #20]
 3d4:	str	r1, [r0, #16]
 3d8:	movw	r0, #0
 3dc:	add	sp, sp, #8
 3e0:	bx	lr
