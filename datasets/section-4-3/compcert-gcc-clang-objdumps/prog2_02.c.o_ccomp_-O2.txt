
../repos/prog2/CMakeFiles/3.2.dir/Aula03_Vetores_e_algoritmos_de_pesquisa_e_ordenacao/02.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <comp_int_asc>:
   0:	mov	ip, sp
   4:	sub	sp, sp, #8
   8:	str	ip, [sp]
   c:	str	lr, [sp, #4]
  10:	ldr	r2, [r0]
  14:	ldr	r3, [r1]
  18:	cmp	r3, r2
  1c:	ble	28 <comp_int_asc+0x28>
  20:	mvn	r0, #0
  24:	b	3c <comp_int_asc+0x3c>
  28:	cmp	r2, r3
  2c:	ble	38 <comp_int_asc+0x38>
  30:	mov	r0, #1
  34:	b	3c <comp_int_asc+0x3c>
  38:	mov	r0, #0
  3c:	ldr	lr, [sp, #4]
  40:	add	sp, sp, #8
  44:	bx	lr

00000048 <get_elem>:
  48:	mov	ip, sp
  4c:	sub	sp, sp, #8
  50:	str	ip, [sp]
  54:	str	lr, [sp, #4]
  58:	mla	r0, r1, r2, r0
  5c:	ldr	lr, [sp, #4]
  60:	add	sp, sp, #8
  64:	bx	lr

00000068 <swap>:
  68:	mov	ip, sp
  6c:	sub	sp, sp, #16
  70:	str	ip, [sp]
  74:	str	lr, [sp, #4]
  78:	str	r4, [sp, #8]
  7c:	mov	r4, #0
  80:	cmp	r4, r2
  84:	bge	a0 <swap+0x38>
  88:	ldrb	r3, [r0, r4]
  8c:	ldrb	ip, [r1, r4]
  90:	strb	ip, [r0, r4]
  94:	strb	r3, [r1, r4]
  98:	add	r4, r4, #1
  9c:	b	80 <swap+0x18>
  a0:	ldr	r4, [sp, #8]
  a4:	ldr	lr, [sp, #4]
  a8:	add	sp, sp, #16
  ac:	bx	lr

000000b0 <sort>:
  b0:	mov	ip, sp
  b4:	sub	sp, sp, #48	; 0x30
  b8:	str	ip, [sp]
  bc:	str	lr, [sp, #4]
  c0:	str	r4, [sp, #12]
  c4:	str	r5, [sp, #16]
  c8:	str	r6, [sp, #20]
  cc:	str	r7, [sp, #24]
  d0:	str	r8, [sp, #28]
  d4:	str	r9, [sp, #32]
  d8:	str	sl, [sp, #36]	; 0x24
  dc:	str	fp, [sp, #40]	; 0x28
  e0:	mov	fp, r3
  e4:	mov	sl, r2
  e8:	mov	r9, r1
  ec:	str	r0, [sp, #8]
  f0:	mov	r5, #0
  f4:	cmp	r5, r9
  f8:	bge	16c <sort+0xbc>
  fc:	mov	r2, sl
 100:	mov	r1, r5
 104:	ldr	r0, [sp, #8]
 108:	bl	48 <get_elem>
 10c:	mov	r6, r0
 110:	mov	r4, r6
 114:	add	r7, r5, #1
 118:	cmp	r7, r9
 11c:	bge	154 <sort+0xa4>
 120:	mov	r2, sl
 124:	mov	r1, r7
 128:	ldr	r0, [sp, #8]
 12c:	bl	48 <get_elem>
 130:	mov	r8, r0
 134:	mov	r1, r4
 138:	mov	r0, r8
 13c:	blx	fp
 140:	cmp	r0, #0
 144:	movlt	r4, r8
 148:	movge	r4, r4
 14c:	add	r7, r7, #1
 150:	b	118 <sort+0x68>
 154:	mov	r2, sl
 158:	mov	r1, r6
 15c:	mov	r0, r4
 160:	bl	68 <swap>
 164:	add	r5, r5, #1
 168:	b	f4 <sort+0x44>
 16c:	ldr	r4, [sp, #12]
 170:	ldr	r5, [sp, #16]
 174:	ldr	r6, [sp, #20]
 178:	ldr	r7, [sp, #24]
 17c:	ldr	r8, [sp, #28]
 180:	ldr	r9, [sp, #32]
 184:	ldr	sl, [sp, #36]	; 0x24
 188:	ldr	fp, [sp, #40]	; 0x28
 18c:	ldr	lr, [sp, #4]
 190:	add	sp, sp, #48	; 0x30
 194:	bx	lr

00000198 <linear_search>:
 198:	mov	ip, sp
 19c:	sub	sp, sp, #32
 1a0:	str	ip, [sp]
 1a4:	str	lr, [sp, #4]
 1a8:	str	r4, [sp, #8]
 1ac:	str	r5, [sp, #12]
 1b0:	str	r6, [sp, #16]
 1b4:	str	r7, [sp, #20]
 1b8:	str	r8, [sp, #24]
 1bc:	str	r9, [sp, #28]
 1c0:	ldr	r9, [ip]
 1c4:	mov	r4, r3
 1c8:	mov	r7, r2
 1cc:	mov	r6, r1
 1d0:	mov	r8, r0
 1d4:	mov	r5, #0
 1d8:	cmp	r5, r7
 1dc:	bge	238 <linear_search+0xa0>
 1e0:	mov	r2, r7
 1e4:	mov	r1, r5
 1e8:	mov	r0, r6
 1ec:	bl	48 <get_elem>
 1f0:	mov	r1, r8
 1f4:	blx	r9
 1f8:	cmp	r0, #0
 1fc:	bne	230 <linear_search+0x98>
 200:	mov	r2, r4
 204:	mov	r1, r5
 208:	mov	r0, r6
 20c:	ldr	r4, [sp, #8]
 210:	ldr	r5, [sp, #12]
 214:	ldr	r6, [sp, #16]
 218:	ldr	r7, [sp, #20]
 21c:	ldr	r8, [sp, #24]
 220:	ldr	r9, [sp, #28]
 224:	ldr	lr, [sp, #4]
 228:	add	sp, sp, #32
 22c:	b	48 <get_elem>
 230:	add	r5, r5, #1
 234:	b	1d8 <linear_search+0x40>
 238:	mov	r0, #0
 23c:	ldr	r4, [sp, #8]
 240:	ldr	r5, [sp, #12]
 244:	ldr	r6, [sp, #16]
 248:	ldr	r7, [sp, #20]
 24c:	ldr	r8, [sp, #24]
 250:	ldr	r9, [sp, #28]
 254:	ldr	lr, [sp, #4]
 258:	add	sp, sp, #32
 25c:	bx	lr

00000260 <binary_search>:
 260:	mov	ip, sp
 264:	sub	sp, sp, #40	; 0x28
 268:	str	ip, [sp]
 26c:	str	lr, [sp, #4]
 270:	str	r4, [sp, #8]
 274:	str	r5, [sp, #12]
 278:	str	r6, [sp, #16]
 27c:	str	r7, [sp, #20]
 280:	str	r8, [sp, #24]
 284:	str	r9, [sp, #28]
 288:	str	sl, [sp, #32]
 28c:	ldr	r9, [ip]
 290:	mov	r4, r3
 294:	mov	r6, r1
 298:	mov	r7, r0
 29c:	mov	r8, #0
 2a0:	sub	sl, r2, #1
 2a4:	cmp	r8, sl
 2a8:	bgt	348 <binary_search+0xe8>
 2ac:	add	r3, r8, sl
 2b0:	asr	lr, r3, #31
 2b4:	add	lr, r3, lr, lsr #31
 2b8:	asr	r5, lr, #1
 2bc:	mov	r2, r4
 2c0:	mov	r1, r5
 2c4:	mov	r0, r6
 2c8:	bl	48 <get_elem>
 2cc:	mov	r1, r0
 2d0:	mov	r0, r7
 2d4:	blx	r9
 2d8:	cmp	r0, #0
 2dc:	bne	314 <binary_search+0xb4>
 2e0:	mov	r2, r4
 2e4:	mov	r1, r5
 2e8:	mov	r0, r6
 2ec:	bl	48 <get_elem>
 2f0:	mov	r1, r0
 2f4:	mov	r0, r7
 2f8:	blx	r9
 2fc:	cmn	r0, #1
 300:	beq	30c <binary_search+0xac>
 304:	add	r8, r5, #1
 308:	b	2a4 <binary_search+0x44>
 30c:	sub	sl, r5, #1
 310:	b	2a4 <binary_search+0x44>
 314:	mov	r2, r4
 318:	mov	r1, r5
 31c:	mov	r0, r6
 320:	ldr	r4, [sp, #8]
 324:	ldr	r5, [sp, #12]
 328:	ldr	r6, [sp, #16]
 32c:	ldr	r7, [sp, #20]
 330:	ldr	r8, [sp, #24]
 334:	ldr	r9, [sp, #28]
 338:	ldr	sl, [sp, #32]
 33c:	ldr	lr, [sp, #4]
 340:	add	sp, sp, #40	; 0x28
 344:	b	48 <get_elem>
 348:	mov	r0, #0
 34c:	ldr	r4, [sp, #8]
 350:	ldr	r5, [sp, #12]
 354:	ldr	r6, [sp, #16]
 358:	ldr	r7, [sp, #20]
 35c:	ldr	r8, [sp, #24]
 360:	ldr	r9, [sp, #28]
 364:	ldr	sl, [sp, #32]
 368:	ldr	lr, [sp, #4]
 36c:	add	sp, sp, #40	; 0x28
 370:	bx	lr

00000374 <insertion_sort>:
 374:	mov	ip, sp
 378:	sub	sp, sp, #40	; 0x28
 37c:	str	ip, [sp]
 380:	str	lr, [sp, #4]
 384:	str	r4, [sp, #8]
 388:	str	r5, [sp, #12]
 38c:	str	r6, [sp, #16]
 390:	str	r7, [sp, #20]
 394:	str	r8, [sp, #24]
 398:	str	r9, [sp, #28]
 39c:	str	sl, [sp, #32]
 3a0:	mov	r9, r3
 3a4:	mov	r7, r2
 3a8:	mov	sl, r1
 3ac:	mov	r8, r0
 3b0:	mov	r4, #1
 3b4:	cmp	r4, sl
 3b8:	bge	444 <insertion_sort+0xd0>
 3bc:	mov	r5, r4
 3c0:	cmp	r5, #0
 3c4:	ble	43c <insertion_sort+0xc8>
 3c8:	mov	r2, r7
 3cc:	mov	r1, r5
 3d0:	mov	r0, r8
 3d4:	bl	48 <get_elem>
 3d8:	mov	r6, r0
 3dc:	sub	r1, r5, #1
 3e0:	mov	r2, r7
 3e4:	mov	r0, r8
 3e8:	bl	48 <get_elem>
 3ec:	mov	r1, r0
 3f0:	mov	r0, r6
 3f4:	blx	r9
 3f8:	cmn	r0, #1
 3fc:	bne	43c <insertion_sort+0xc8>
 400:	mov	r2, r7
 404:	mov	r1, r5
 408:	mov	r0, r8
 40c:	bl	48 <get_elem>
 410:	mov	r6, r0
 414:	sub	r1, r5, #1
 418:	mov	r2, r7
 41c:	mov	r0, r8
 420:	bl	48 <get_elem>
 424:	mov	r1, r0
 428:	mov	r2, r7
 42c:	mov	r0, r6
 430:	bl	68 <swap>
 434:	sub	r5, r5, #1
 438:	b	3c0 <insertion_sort+0x4c>
 43c:	add	r4, r4, #1
 440:	b	3b4 <insertion_sort+0x40>
 444:	ldr	r4, [sp, #8]
 448:	ldr	r5, [sp, #12]
 44c:	ldr	r6, [sp, #16]
 450:	ldr	r7, [sp, #20]
 454:	ldr	r8, [sp, #24]
 458:	ldr	r9, [sp, #28]
 45c:	ldr	sl, [sp, #32]
 460:	ldr	lr, [sp, #4]
 464:	add	sp, sp, #40	; 0x28
 468:	bx	lr

0000046c <comp_char_desc>:
 46c:	mov	ip, sp
 470:	sub	sp, sp, #8
 474:	str	ip, [sp]
 478:	str	lr, [sp, #4]
 47c:	ldrb	r2, [r0]
 480:	and	r3, r2, #255	; 0xff
 484:	ldrb	r2, [r1]
 488:	and	ip, r2, #255	; 0xff
 48c:	cmp	r3, ip
 490:	bge	49c <comp_char_desc+0x30>
 494:	mov	r0, #1
 498:	b	4b0 <comp_char_desc+0x44>
 49c:	cmp	r3, ip
 4a0:	ble	4ac <comp_char_desc+0x40>
 4a4:	mvn	r0, #0
 4a8:	b	4b0 <comp_char_desc+0x44>
 4ac:	mov	r0, #0
 4b0:	ldr	lr, [sp, #4]
 4b4:	add	sp, sp, #8
 4b8:	bx	lr

000004bc <main>:
 4bc:	mov	ip, sp
 4c0:	sub	sp, sp, #88	; 0x58
 4c4:	str	ip, [sp, #4]
 4c8:	str	lr, [sp, #8]
 4cc:	str	r4, [sp, #16]
 4d0:	mov	r0, #3
 4d4:	str	r0, [sp, #40]	; 0x28
 4d8:	mvn	r0, #1
 4dc:	str	r0, [sp, #44]	; 0x2c
 4e0:	mov	r0, #4
 4e4:	str	r0, [sp, #48]	; 0x30
 4e8:	mov	r0, #5
 4ec:	str	r0, [sp, #52]	; 0x34
 4f0:	mov	r0, #9
 4f4:	str	r0, [sp, #56]	; 0x38
 4f8:	mov	r0, #1
 4fc:	str	r0, [sp, #60]	; 0x3c
 500:	add	r0, sp, #64	; 0x40
 504:	add	r1, sp, #40	; 0x28
 508:	mov	r2, #24
 50c:	bl	0 <memcpy>
 510:	ldr	r0, [pc, #672]	; 7b8 <main+0x2fc>
 514:	bl	0 <puts>
 518:	ldr	r0, [pc, #652]	; 7ac <main+0x2f0>
 51c:	bl	0 <printf>
 520:	mov	r4, #0
 524:	ldr	r0, [pc, #648]	; 7b4 <main+0x2f8>
 528:	add	r2, sp, #64	; 0x40
 52c:	ldr	r1, [r2, r4, lsl #2]
 530:	bl	0 <printf>
 534:	add	r4, r4, #1
 538:	cmp	r4, #6
 53c:	blt	524 <main+0x68>
 540:	ldr	r0, [pc, #632]	; 7c0 <main+0x304>
 544:	bl	0 <puts>
 548:	add	r0, sp, #64	; 0x40
 54c:	mov	r1, #6
 550:	mov	r2, #4
 554:	ldr	r3, [pc, #572]	; 798 <main+0x2dc>
 558:	bl	b0 <sort>
 55c:	ldr	r0, [pc, #560]	; 794 <main+0x2d8>
 560:	bl	0 <printf>
 564:	mov	r4, #0
 568:	ldr	r0, [pc, #580]	; 7b4 <main+0x2f8>
 56c:	add	ip, sp, #64	; 0x40
 570:	ldr	r1, [ip, r4, lsl #2]
 574:	bl	0 <printf>
 578:	add	r4, r4, #1
 57c:	cmp	r4, #6
 580:	blt	568 <main+0xac>
 584:	ldr	r0, [pc, #564]	; 7c0 <main+0x304>
 588:	bl	0 <puts>
 58c:	add	r0, sp, #64	; 0x40
 590:	add	r1, sp, #40	; 0x28
 594:	mov	r2, #24
 598:	bl	0 <memcpy>
 59c:	ldr	r0, [pc, #536]	; 7bc <main+0x300>
 5a0:	bl	0 <puts>
 5a4:	mov	r0, #4
 5a8:	str	r0, [sp, #24]
 5ac:	add	r0, sp, #24
 5b0:	add	r1, sp, #64	; 0x40
 5b4:	mov	r2, #6
 5b8:	mov	r3, #4
 5bc:	ldr	r4, [pc, #468]	; 798 <main+0x2dc>
 5c0:	str	r4, [sp]
 5c4:	bl	198 <linear_search>
 5c8:	mov	r2, r0
 5cc:	cmp	r2, #0
 5d0:	beq	5f8 <main+0x13c>
 5d4:	ldr	r0, [pc, #468]	; 7b0 <main+0x2f4>
 5d8:	ldr	r1, [sp, #24]
 5dc:	add	ip, sp, #64	; 0x40
 5e0:	sub	r2, r2, ip
 5e4:	asr	lr, r2, #31
 5e8:	add	lr, r2, lr, lsr #30
 5ec:	asr	r2, lr, #2
 5f0:	bl	0 <printf>
 5f4:	b	604 <main+0x148>
 5f8:	ldr	r0, [pc, #424]	; 7a8 <main+0x2ec>
 5fc:	ldr	r1, [sp, #24]
 600:	bl	0 <printf>
 604:	add	r0, sp, #64	; 0x40
 608:	add	r1, sp, #40	; 0x28
 60c:	mov	r2, #24
 610:	bl	0 <memcpy>
 614:	add	r0, sp, #64	; 0x40
 618:	mov	r1, #6
 61c:	mov	r2, #4
 620:	ldr	r3, [pc, #368]	; 798 <main+0x2dc>
 624:	bl	b0 <sort>
 628:	ldr	r0, [pc, #372]	; 7a4 <main+0x2e8>
 62c:	bl	0 <puts>
 630:	add	r0, sp, #24
 634:	add	r1, sp, #64	; 0x40
 638:	mov	r2, #6
 63c:	mov	r3, #4
 640:	ldr	ip, [pc, #336]	; 798 <main+0x2dc>
 644:	str	ip, [sp]
 648:	bl	260 <binary_search>
 64c:	mov	r2, r0
 650:	cmp	r2, #0
 654:	beq	67c <main+0x1c0>
 658:	ldr	r0, [pc, #336]	; 7b0 <main+0x2f4>
 65c:	ldr	r1, [sp, #24]
 660:	add	r3, sp, #64	; 0x40
 664:	sub	r2, r2, r3
 668:	asr	lr, r2, #31
 66c:	add	lr, r2, lr, lsr #30
 670:	asr	r2, lr, #2
 674:	bl	0 <printf>
 678:	b	688 <main+0x1cc>
 67c:	ldr	r0, [pc, #292]	; 7a8 <main+0x2ec>
 680:	ldr	r1, [sp, #24]
 684:	bl	0 <printf>
 688:	add	r0, sp, #64	; 0x40
 68c:	add	r1, sp, #40	; 0x28
 690:	mov	r2, #24
 694:	bl	0 <memcpy>
 698:	ldr	r0, [pc, #292]	; 7c4 <main+0x308>
 69c:	bl	0 <puts>
 6a0:	ldr	r0, [pc, #260]	; 7ac <main+0x2f0>
 6a4:	bl	0 <printf>
 6a8:	mov	r4, #0
 6ac:	ldr	r0, [pc, #256]	; 7b4 <main+0x2f8>
 6b0:	add	ip, sp, #64	; 0x40
 6b4:	ldr	r1, [ip, r4, lsl #2]
 6b8:	bl	0 <printf>
 6bc:	add	r4, r4, #1
 6c0:	cmp	r4, #6
 6c4:	blt	6ac <main+0x1f0>
 6c8:	ldr	r0, [pc, #240]	; 7c0 <main+0x304>
 6cc:	bl	0 <puts>
 6d0:	add	r0, sp, #64	; 0x40
 6d4:	mov	r1, #6
 6d8:	mov	r2, #4
 6dc:	ldr	r3, [pc, #180]	; 798 <main+0x2dc>
 6e0:	bl	374 <insertion_sort>
 6e4:	ldr	r0, [pc, #168]	; 794 <main+0x2d8>
 6e8:	bl	0 <printf>
 6ec:	mov	r4, #0
 6f0:	ldr	r0, [pc, #188]	; 7b4 <main+0x2f8>
 6f4:	add	r2, sp, #64	; 0x40
 6f8:	ldr	r1, [r2, r4, lsl #2]
 6fc:	bl	0 <printf>
 700:	add	r4, r4, #1
 704:	cmp	r4, #6
 708:	blt	6f0 <main+0x234>
 70c:	ldr	r0, [pc, #172]	; 7c0 <main+0x304>
 710:	bl	0 <puts>
 714:	ldr	r0, [pc, #128]	; 79c <main+0x2e0>
 718:	bl	0 <puts>
 71c:	mov	r0, #65	; 0x41
 720:	strb	r0, [sp, #28]
 724:	mov	r0, #98	; 0x62
 728:	strb	r0, [sp, #29]
 72c:	mov	r0, #90	; 0x5a
 730:	strb	r0, [sp, #30]
 734:	mov	r0, #97	; 0x61
 738:	strb	r0, [sp, #31]
 73c:	mov	r0, #0
 740:	strb	r0, [sp, #32]
 744:	ldr	r0, [pc, #96]	; 7ac <main+0x2f0>
 748:	bl	0 <printf>
 74c:	add	r0, sp, #28
 750:	bl	0 <puts>
 754:	add	r0, sp, #28
 758:	bl	0 <strlen>
 75c:	mov	r1, r0
 760:	add	r0, sp, #28
 764:	mov	r2, #1
 768:	ldr	r3, [pc, #48]	; 7a0 <main+0x2e4>
 76c:	bl	b0 <sort>
 770:	ldr	r0, [pc, #28]	; 794 <main+0x2d8>
 774:	bl	0 <printf>
 778:	add	r0, sp, #28
 77c:	bl	0 <puts>
 780:	mov	r0, #0
 784:	ldr	r4, [sp, #16]
 788:	ldr	lr, [sp, #8]
 78c:	add	sp, sp, #88	; 0x58
 790:	bx	lr
 794:	.word	0x0000000a
 798:	.word	0x00000000
 79c:	.word	0x00000012
 7a0:	.word	0x00000000
 7a4:	.word	0x0000008e
 7a8:	.word	0x00000049
 7ac:	.word	0x0000006b
 7b0:	.word	0x0000001c
 7b4:	.word	0x00000072
 7b8:	.word	0x00000080
 7bc:	.word	0x00000000
 7c0:	.word	0x00000098
 7c4:	.word	0x00000076
