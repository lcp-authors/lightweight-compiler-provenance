
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-expr.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_expression_new>:
       0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
       4:	add	fp, sp, #28
       8:	sub	sp, sp, #20
       c:	mov	r7, r0
      10:	sub	r0, r0, #18
      14:	mov	sl, r3
      18:	mov	r6, r2
      1c:	mov	r5, r1
      20:	cmp	r0, #42	; 0x2a
      24:	bhi	294 <coda_expression_new+0x294>
      28:	add	r1, pc, #0
      2c:	ldr	pc, [r1, r0, lsl #2]
      30:	.word	0x000000dc
      34:	.word	0x0000012c
      38:	.word	0x00000198
      3c:	.word	0x00000204
      40:	.word	0x00000244
      44:	.word	0x00000294
      48:	.word	0x00000294
      4c:	.word	0x00000294
      50:	.word	0x00000294
      54:	.word	0x00000294
      58:	.word	0x00000294
      5c:	.word	0x00000294
      60:	.word	0x00000294
      64:	.word	0x00000294
      68:	.word	0x00000294
      6c:	.word	0x00000294
      70:	.word	0x00000294
      74:	.word	0x00000294
      78:	.word	0x00000294
      7c:	.word	0x00000294
      80:	.word	0x00000294
      84:	.word	0x00000294
      88:	.word	0x00000294
      8c:	.word	0x00000294
      90:	.word	0x00000294
      94:	.word	0x00000294
      98:	.word	0x00000294
      9c:	.word	0x00000294
      a0:	.word	0x00000294
      a4:	.word	0x00000294
      a8:	.word	0x00000294
      ac:	.word	0x00000294
      b0:	.word	0x00000294
      b4:	.word	0x00000294
      b8:	.word	0x00000294
      bc:	.word	0x00000294
      c0:	.word	0x00000294
      c4:	.word	0x00000294
      c8:	.word	0x00000294
      cc:	.word	0x00000294
      d0:	.word	0x00000294
      d4:	.word	0x00000294
      d8:	.word	0x0000026c
      dc:	mov	r0, #16
      e0:	bl	0 <malloc>
      e4:	cmp	r0, #0
      e8:	beq	6f8 <coda_expression_new+0x6f8>
      ec:	ldrb	r3, [r5]
      f0:	mov	r4, r0
      f4:	mov	r2, #18
      f8:	mov	r0, #1
      fc:	mov	r1, #0
     100:	str	r2, [r4]
     104:	str	r1, [r4, #4]
     108:	str	r0, [r4, #8]
     10c:	mov	r0, r5
     110:	orr	r3, r3, #32
     114:	sub	r3, r3, #116	; 0x74
     118:	clz	r3, r3
     11c:	lsr	r3, r3, #5
     120:	str	r3, [r4, #12]
     124:	bl	0 <free>
     128:	b	88c <coda_expression_new+0x88c>
     12c:	mov	r0, r5
     130:	bl	0 <strlen>
     134:	mov	r1, r0
     138:	add	r2, sp, #8
     13c:	mov	r0, r5
     140:	mov	r3, #0
     144:	mov	r4, #0
     148:	bl	0 <coda_ascii_parse_double>
     14c:	mov	r6, r0
     150:	mov	r0, r5
     154:	bl	0 <free>
     158:	cmp	r6, #0
     15c:	bmi	88c <coda_expression_new+0x88c>
     160:	mov	r0, #24
     164:	bl	0 <malloc>
     168:	cmp	r0, #0
     16c:	beq	7d4 <coda_expression_new+0x7d4>
     170:	vldr	d16, [sp, #8]
     174:	mov	r3, #19
     178:	mov	r1, #1
     17c:	mov	r2, #2
     180:	mov	r4, r0
     184:	str	r3, [r0]
     188:	str	r2, [r0, #4]
     18c:	str	r1, [r0, #8]
     190:	vstr	d16, [r0, #16]
     194:	b	88c <coda_expression_new+0x88c>
     198:	mov	r0, r5
     19c:	bl	0 <strlen>
     1a0:	mov	r1, r0
     1a4:	add	r2, sp, #8
     1a8:	mov	r0, r5
     1ac:	mov	r3, #0
     1b0:	mov	r4, #0
     1b4:	bl	0 <coda_ascii_parse_int64>
     1b8:	mov	r6, r0
     1bc:	mov	r0, r5
     1c0:	bl	0 <free>
     1c4:	cmp	r6, #0
     1c8:	bmi	88c <coda_expression_new+0x88c>
     1cc:	mov	r0, #24
     1d0:	bl	0 <malloc>
     1d4:	cmp	r0, #0
     1d8:	beq	7dc <coda_expression_new+0x7dc>
     1dc:	mov	r2, #20
     1e0:	ldr	r3, [sp, #12]
     1e4:	mov	r1, #1
     1e8:	mov	r4, r0
     1ec:	str	r2, [r0]
     1f0:	ldr	r2, [sp, #8]
     1f4:	str	r1, [r0, #4]
     1f8:	str	r1, [r0, #8]
     1fc:	strd	r2, [r0, #16]
     200:	b	88c <coda_expression_new+0x88c>
     204:	mov	r0, #20
     208:	bl	0 <malloc>
     20c:	cmp	r0, #0
     210:	beq	720 <coda_expression_new+0x720>
     214:	mov	r4, r0
     218:	mov	r2, #21
     21c:	mov	r0, #1
     220:	mov	r1, #3
     224:	str	r2, [r4]
     228:	str	r1, [r4, #4]
     22c:	str	r0, [r4, #8]
     230:	mov	r0, r5
     234:	bl	0 <strlen>
     238:	str	r0, [r4, #12]
     23c:	str	r5, [r4, #16]
     240:	b	88c <coda_expression_new+0x88c>
     244:	cmp	r5, #0
     248:	beq	728 <coda_expression_new+0x728>
     24c:	mov	lr, #0
     250:	mov	sl, #12
     254:	mov	r2, #10
     258:	mov	r3, #13
     25c:	mov	r7, #9
     260:	mov	ip, #11
     264:	mov	r6, #0
     268:	b	4bc <coda_expression_new+0x4bc>
     26c:	ldr	r0, [r6]
     270:	cmp	r0, #20
     274:	beq	770 <coda_expression_new+0x770>
     278:	cmp	r0, #19
     27c:	bne	294 <coda_expression_new+0x294>
     280:	vldr	d16, [r6, #16]
     284:	mov	r4, r6
     288:	vneg.f64	d16, d16
     28c:	vstr	d16, [r6, #16]
     290:	b	88c <coda_expression_new+0x88c>
     294:	ldr	r8, [fp, #12]
     298:	ldr	r9, [fp, #8]
     29c:	mov	r0, #32
     2a0:	bl	0 <malloc>
     2a4:	cmp	r0, #0
     2a8:	beq	43c <coda_expression_new+0x43c>
     2ac:	add	r1, r0, #12
     2b0:	mov	r4, r0
     2b4:	cmp	r7, #86	; 0x56
     2b8:	stm	r1, {r5, r6, sl}
     2bc:	str	r9, [r0, #24]
     2c0:	str	r8, [r0, #28]
     2c4:	str	r7, [r0]
     2c8:	bhi	858 <coda_expression_new+0x858>
     2cc:	add	r1, pc, #4
     2d0:	mov	r0, #0
     2d4:	ldr	pc, [r1, r7, lsl #2]
     2d8:	.word	0x00000850
     2dc:	.word	0x00000814
     2e0:	.word	0x00000434
     2e4:	.word	0x00000838
     2e8:	.word	0x00000854
     2ec:	.word	0x00000434
     2f0:	.word	0x00000854
     2f4:	.word	0x00000434
     2f8:	.word	0x00000838
     2fc:	.word	0x00000838
     300:	.word	0x0000080c
     304:	.word	0x00000838
     308:	.word	0x00000434
     30c:	.word	0x00000434
     310:	.word	0x00000434
     314:	.word	0x00000434
     318:	.word	0x00000804
     31c:	.word	0x00000840
     320:	.word	0x00000858
     324:	.word	0x00000858
     328:	.word	0x00000858
     32c:	.word	0x00000858
     330:	.word	0x00000858
     334:	.word	0x00000434
     338:	.word	0x00000814
     33c:	.word	0x00000854
     340:	.word	0x00000854
     344:	.word	0x00000434
     348:	.word	0x00000804
     34c:	.word	0x00000840
     350:	.word	0x00000840
     354:	.word	0x00000848
     358:	.word	0x0000080c
     35c:	.word	0x0000080c
     360:	.word	0x0000080c
     364:	.word	0x0000080c
     368:	.word	0x0000080c
     36c:	.word	0x0000080c
     370:	.word	0x0000080c
     374:	.word	0x00000848
     378:	.word	0x00000854
     37c:	.word	0x00000854
     380:	.word	0x00000838
     384:	.word	0x00000434
     388:	.word	0x00000434
     38c:	.word	0x00000434
     390:	.word	0x00000854
     394:	.word	0x00000854
     398:	.word	0x00000854
     39c:	.word	0x00000854
     3a0:	.word	0x00000434
     3a4:	.word	0x00000854
     3a8:	.word	0x00000854
     3ac:	.word	0x00000854
     3b0:	.word	0x00000854
     3b4:	.word	0x00000804
     3b8:	.word	0x00000814
     3bc:	.word	0x00000814
     3c0:	.word	0x00000814
     3c4:	.word	0x00000814
     3c8:	.word	0x00000850
     3cc:	.word	0x00000854
     3d0:	.word	0x00000854
     3d4:	.word	0x00000434
     3d8:	.word	0x00000434
     3dc:	.word	0x00000434
     3e0:	.word	0x00000840
     3e4:	.word	0x00000804
     3e8:	.word	0x00000804
     3ec:	.word	0x00000804
     3f0:	.word	0x00000434
     3f4:	.word	0x000008fc
     3f8:	.word	0x00000840
     3fc:	.word	0x00000804
     400:	.word	0x00000848
     404:	.word	0x00000804
     408:	.word	0x00000804
     40c:	.word	0x00000804
     410:	.word	0x00000814
     414:	.word	0x00000840
     418:	.word	0x00000804
     41c:	.word	0x00000434
     420:	.word	0x00000854
     424:	.word	0x00000434
     428:	.word	0x00000848
     42c:	.word	0x00000434
     430:	.word	0x00000838
     434:	mov	r0, #1
     438:	b	854 <coda_expression_new+0x854>
     43c:	movw	r1, #0
     440:	movw	r3, #0
     444:	movw	r0, #387	; 0x183
     448:	mov	r2, #32
     44c:	movt	r1, #0
     450:	movt	r3, #0
     454:	str	r0, [sp]
     458:	mvn	r0, #0
     45c:	bl	0 <coda_set_error>
     460:	cmp	r5, #0
     464:	beq	470 <coda_expression_new+0x470>
     468:	mov	r0, r5
     46c:	bl	0 <free>
     470:	cmp	r6, #0
     474:	movne	r0, r6
     478:	blne	920 <coda_expression_delete>
     47c:	cmp	sl, #0
     480:	movne	r0, sl
     484:	blne	920 <coda_expression_delete>
     488:	cmp	r9, #0
     48c:	movne	r0, r9
     490:	blne	920 <coda_expression_delete>
     494:	mov	r4, #0
     498:	cmp	r8, #0
     49c:	beq	88c <coda_expression_new+0x88c>
     4a0:	mov	r0, r8
     4a4:	bl	920 <coda_expression_delete>
     4a8:	b	88c <coda_expression_new+0x88c>
     4ac:	mov	r0, #39	; 0x27
     4b0:	strb	r0, [r5, r6]
     4b4:	add	lr, r8, #1
     4b8:	add	r6, r6, #1
     4bc:	ldrb	r4, [r5, lr]
     4c0:	cmp	r4, #92	; 0x5c
     4c4:	beq	4dc <coda_expression_new+0x4dc>
     4c8:	cmp	r4, #0
     4cc:	beq	730 <coda_expression_new+0x730>
     4d0:	strb	r4, [r5, r6]
     4d4:	mov	r8, lr
     4d8:	b	4b4 <coda_expression_new+0x4b4>
     4dc:	add	r8, lr, #1
     4e0:	ldrb	r9, [r5, r8]
     4e4:	sub	r0, r9, #34	; 0x22
     4e8:	cmp	r0, #84	; 0x54
     4ec:	bhi	654 <coda_expression_new+0x654>
     4f0:	add	r4, pc, #0
     4f4:	ldr	pc, [r4, r0, lsl #2]
     4f8:	.word	0x0000064c
     4fc:	.word	0x00000654
     500:	.word	0x00000654
     504:	.word	0x00000654
     508:	.word	0x00000654
     50c:	.word	0x000004ac
     510:	.word	0x00000654
     514:	.word	0x00000654
     518:	.word	0x00000654
     51c:	.word	0x00000654
     520:	.word	0x00000654
     524:	.word	0x00000654
     528:	.word	0x00000654
     52c:	.word	0x00000654
     530:	.word	0x00000654
     534:	.word	0x00000654
     538:	.word	0x00000654
     53c:	.word	0x00000654
     540:	.word	0x00000654
     544:	.word	0x00000654
     548:	.word	0x00000654
     54c:	.word	0x00000654
     550:	.word	0x00000654
     554:	.word	0x00000654
     558:	.word	0x00000654
     55c:	.word	0x00000654
     560:	.word	0x00000654
     564:	.word	0x00000654
     568:	.word	0x00000654
     56c:	.word	0x00000654
     570:	.word	0x00000654
     574:	.word	0x00000654
     578:	.word	0x00000654
     57c:	.word	0x00000654
     580:	.word	0x00000654
     584:	.word	0x00000654
     588:	.word	0x00000654
     58c:	.word	0x00000654
     590:	.word	0x00000654
     594:	.word	0x00000654
     598:	.word	0x00000654
     59c:	.word	0x00000654
     5a0:	.word	0x00000654
     5a4:	.word	0x00000654
     5a8:	.word	0x00000654
     5ac:	.word	0x00000654
     5b0:	.word	0x00000654
     5b4:	.word	0x00000654
     5b8:	.word	0x00000654
     5bc:	.word	0x00000654
     5c0:	.word	0x00000654
     5c4:	.word	0x00000654
     5c8:	.word	0x00000654
     5cc:	.word	0x00000654
     5d0:	.word	0x00000654
     5d4:	.word	0x00000654
     5d8:	.word	0x00000654
     5dc:	.word	0x00000654
     5e0:	.word	0x000006b0
     5e4:	.word	0x00000654
     5e8:	.word	0x00000654
     5ec:	.word	0x00000654
     5f0:	.word	0x00000654
     5f4:	.word	0x000006b8
     5f8:	.word	0x000006c0
     5fc:	.word	0x00000654
     600:	.word	0x00000654
     604:	.word	0x000006c8
     608:	.word	0x000006d0
     60c:	.word	0x00000654
     610:	.word	0x00000654
     614:	.word	0x00000654
     618:	.word	0x00000654
     61c:	.word	0x00000654
     620:	.word	0x00000654
     624:	.word	0x00000654
     628:	.word	0x000006d8
     62c:	.word	0x00000654
     630:	.word	0x00000654
     634:	.word	0x00000654
     638:	.word	0x000006e0
     63c:	.word	0x00000654
     640:	.word	0x000006e8
     644:	.word	0x00000654
     648:	.word	0x000006f0
     64c:	mov	r0, #34	; 0x22
     650:	b	4b0 <coda_expression_new+0x4b0>
     654:	sub	r0, r9, #48	; 0x30
     658:	uxtb	r0, r0
     65c:	cmp	r0, #9
     660:	bhi	7b4 <coda_expression_new+0x7b4>
     664:	lsl	r4, r9, #6
     668:	add	r0, lr, r5
     66c:	strb	r4, [r5, r6]
     670:	ldrb	r0, [r0, #2]
     674:	sub	r1, r0, #48	; 0x30
     678:	uxtb	r1, r1
     67c:	cmp	r1, #9
     680:	mvnls	r1, #127	; 0x7f
     684:	addls	r8, lr, #3
     688:	eorls	r0, r1, r0, lsl #3
     68c:	addls	r4, r0, r4
     690:	strbls	r4, [r5, r6]
     694:	ldrbls	r0, [r5, r8]
     698:	subls	r0, r0, #48	; 0x30
     69c:	uxtbls	r1, r0
     6a0:	cmpls	r1, #9
     6a4:	bhi	7b4 <coda_expression_new+0x7b4>
     6a8:	add	r0, r0, r4
     6ac:	b	4b0 <coda_expression_new+0x4b0>
     6b0:	mov	r0, #92	; 0x5c
     6b4:	b	4b0 <coda_expression_new+0x4b0>
     6b8:	mov	r0, #7
     6bc:	b	4b0 <coda_expression_new+0x4b0>
     6c0:	mov	r0, #8
     6c4:	b	4b0 <coda_expression_new+0x4b0>
     6c8:	mov	r0, #27
     6cc:	b	4b0 <coda_expression_new+0x4b0>
     6d0:	strb	sl, [r5, r6]
     6d4:	b	4b4 <coda_expression_new+0x4b4>
     6d8:	strb	r2, [r5, r6]
     6dc:	b	4b4 <coda_expression_new+0x4b4>
     6e0:	strb	r3, [r5, r6]
     6e4:	b	4b4 <coda_expression_new+0x4b4>
     6e8:	strb	r7, [r5, r6]
     6ec:	b	4b4 <coda_expression_new+0x4b4>
     6f0:	strb	ip, [r5, r6]
     6f4:	b	4b4 <coda_expression_new+0x4b4>
     6f8:	movw	r1, #0
     6fc:	movw	r3, #0
     700:	mov	r0, #232	; 0xe8
     704:	mov	r2, #16
     708:	movt	r1, #0
     70c:	movt	r3, #0
     710:	str	r0, [sp]
     714:	mvn	r0, #0
     718:	bl	0 <coda_set_error>
     71c:	b	7c4 <coda_expression_new+0x7c4>
     720:	movw	r0, #307	; 0x133
     724:	b	78c <coda_expression_new+0x78c>
     728:	mov	r6, #0
     72c:	b	738 <coda_expression_new+0x738>
     730:	mov	r0, #0
     734:	strb	r0, [r5, r6]
     738:	mov	r0, #20
     73c:	bl	0 <malloc>
     740:	cmp	r0, #0
     744:	beq	788 <coda_expression_new+0x788>
     748:	mov	r4, r0
     74c:	mov	r2, #22
     750:	mov	r0, #1
     754:	mov	r1, #3
     758:	str	r2, [r4]
     75c:	str	r1, [r4, #4]
     760:	str	r0, [r4, #8]
     764:	str	r6, [r4, #12]
     768:	str	r5, [r4, #16]
     76c:	b	88c <coda_expression_new+0x88c>
     770:	ldrd	r0, [r6, #16]
     774:	mov	r4, r6
     778:	rsbs	r0, r0, #0
     77c:	rsc	r1, r1, #0
     780:	strd	r0, [r6, #16]
     784:	b	88c <coda_expression_new+0x88c>
     788:	movw	r0, #335	; 0x14f
     78c:	movw	r1, #0
     790:	movw	r3, #0
     794:	str	r0, [sp]
     798:	mvn	r0, #0
     79c:	mov	r2, #20
     7a0:	movt	r1, #0
     7a4:	movt	r3, #0
     7a8:	bl	0 <coda_set_error>
     7ac:	mov	r4, #0
     7b0:	b	88c <coda_expression_new+0x88c>
     7b4:	movw	r1, #0
     7b8:	mvn	r0, #102	; 0x66
     7bc:	movt	r1, #0
     7c0:	bl	0 <coda_set_error>
     7c4:	mov	r0, r5
     7c8:	bl	0 <free>
     7cc:	mov	r4, #0
     7d0:	b	88c <coda_expression_new+0x88c>
     7d4:	movw	r0, #261	; 0x105
     7d8:	b	7e0 <coda_expression_new+0x7e0>
     7dc:	mov	r0, #288	; 0x120
     7e0:	movw	r1, #0
     7e4:	movw	r3, #0
     7e8:	str	r0, [sp]
     7ec:	mvn	r0, #0
     7f0:	mov	r2, #24
     7f4:	movt	r1, #0
     7f8:	movt	r3, #0
     7fc:	bl	0 <coda_set_error>
     800:	b	88c <coda_expression_new+0x88c>
     804:	mov	r0, #3
     808:	b	854 <coda_expression_new+0x854>
     80c:	mov	r0, #4
     810:	b	854 <coda_expression_new+0x854>
     814:	ldr	r1, [r6, #4]
     818:	mov	r0, #2
     81c:	cmp	r1, #2
     820:	beq	854 <coda_expression_new+0x854>
     824:	ldr	r0, [sl, #4]
     828:	cmp	r0, #2
     82c:	moveq	r1, r0
     830:	mov	r0, r1
     834:	b	854 <coda_expression_new+0x854>
     838:	ldr	r0, [sl, #4]
     83c:	b	854 <coda_expression_new+0x854>
     840:	mov	r0, #2
     844:	b	854 <coda_expression_new+0x854>
     848:	mov	r0, #5
     84c:	b	854 <coda_expression_new+0x854>
     850:	ldr	r0, [r6, #4]
     854:	str	r0, [r4, #4]
     858:	sub	r2, r7, #67	; 0x43
     85c:	mov	r1, #0
     860:	cmp	r2, #18
     864:	bhi	87c <coda_expression_new+0x87c>
     868:	movw	r5, #15
     86c:	mov	r3, #1
     870:	movt	r5, #7
     874:	tst	r5, r3, lsl r2
     878:	bne	888 <coda_expression_new+0x888>
     87c:	sub	r2, r7, #27
     880:	cmp	r2, #2
     884:	bcs	898 <coda_expression_new+0x898>
     888:	str	r1, [r4, #8]
     88c:	mov	r0, r4
     890:	sub	sp, fp, #28
     894:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     898:	cmp	r0, #4
     89c:	beq	888 <coda_expression_new+0x888>
     8a0:	cmp	r6, #0
     8a4:	beq	8b4 <coda_expression_new+0x8b4>
     8a8:	ldr	r0, [r6, #8]
     8ac:	cmp	r0, #0
     8b0:	beq	8f4 <coda_expression_new+0x8f4>
     8b4:	cmp	sl, #0
     8b8:	beq	8c8 <coda_expression_new+0x8c8>
     8bc:	ldr	r0, [sl, #8]
     8c0:	cmp	r0, #0
     8c4:	beq	8f4 <coda_expression_new+0x8f4>
     8c8:	cmp	r9, #0
     8cc:	beq	8dc <coda_expression_new+0x8dc>
     8d0:	ldr	r0, [r9, #8]
     8d4:	cmp	r0, #0
     8d8:	beq	8f4 <coda_expression_new+0x8f4>
     8dc:	cmp	r8, #0
     8e0:	beq	918 <coda_expression_new+0x918>
     8e4:	ldr	r1, [r8, #8]
     8e8:	cmp	r1, #0
     8ec:	movwne	r1, #1
     8f0:	b	888 <coda_expression_new+0x888>
     8f4:	mov	r1, #0
     8f8:	b	888 <coda_expression_new+0x888>
     8fc:	cmp	r9, #0
     900:	mov	r0, r9
     904:	movwne	r0, #3
     908:	str	r0, [r4, #4]
     90c:	cmp	r6, #0
     910:	bne	8a8 <coda_expression_new+0x8a8>
     914:	b	8b4 <coda_expression_new+0x8b4>
     918:	mov	r1, #1
     91c:	b	888 <coda_expression_new+0x888>

00000920 <coda_expression_delete>:
     920:	push	{r4, sl, fp, lr}
     924:	add	fp, sp, #8
     928:	mov	r4, r0
     92c:	ldr	r0, [r0]
     930:	sub	r1, r0, #18
     934:	cmp	r1, #3
     938:	bcc	9a0 <coda_expression_delete+0x80>
     93c:	sub	r0, r0, #21
     940:	cmp	r0, #1
     944:	bhi	95c <coda_expression_delete+0x3c>
     948:	ldr	r0, [r4, #16]
     94c:	cmp	r0, #0
     950:	beq	9a0 <coda_expression_delete+0x80>
     954:	bl	0 <free>
     958:	b	9a0 <coda_expression_delete+0x80>
     95c:	ldr	r0, [r4, #12]
     960:	cmp	r0, #0
     964:	beq	96c <coda_expression_delete+0x4c>
     968:	bl	0 <free>
     96c:	ldr	r0, [r4, #16]
     970:	cmp	r0, #0
     974:	blne	920 <coda_expression_delete>
     978:	ldr	r0, [r4, #20]
     97c:	cmp	r0, #0
     980:	blne	920 <coda_expression_delete>
     984:	ldr	r0, [r4, #24]
     988:	cmp	r0, #0
     98c:	blne	920 <coda_expression_delete>
     990:	ldr	r0, [r4, #28]
     994:	cmp	r0, #0
     998:	beq	9a0 <coda_expression_delete+0x80>
     99c:	bl	920 <coda_expression_delete>
     9a0:	mov	r0, r4
     9a4:	pop	{r4, sl, fp, lr}
     9a8:	b	0 <free>

000009ac <coda_expression_eval_void>:
     9ac:	push	{r4, sl, fp, lr}
     9b0:	add	fp, sp, #8
     9b4:	sub	sp, sp, #568	; 0x238
     9b8:	mov	r4, r0
     9bc:	ldr	r0, [r0, #4]
     9c0:	cmp	r0, #5
     9c4:	bne	9e8 <coda_expression_eval_void+0x3c>
     9c8:	cmp	r1, #0
     9cc:	beq	a04 <coda_expression_eval_void+0x58>
     9d0:	mov	r0, sp
     9d4:	mov	r2, #520	; 0x208
     9d8:	str	r1, [sp]
     9dc:	add	r0, r0, #8
     9e0:	bl	0 <memcpy>
     9e4:	b	a18 <coda_expression_eval_void+0x6c>
     9e8:	movw	r1, #0
     9ec:	movt	r1, #0
     9f0:	mvn	r0, #99	; 0x63
     9f4:	bl	0 <coda_set_error>
     9f8:	mvn	r0, #0
     9fc:	sub	sp, fp, #8
     a00:	pop	{r4, sl, fp, pc}
     a04:	ldr	r0, [r4, #8]
     a08:	cmp	r0, #0
     a0c:	beq	a48 <coda_expression_eval_void+0x9c>
     a10:	mov	r0, #0
     a14:	str	r0, [sp]
     a18:	vmov.i32	q8, #0	; 0x00000000
     a1c:	mov	r0, sp
     a20:	add	r1, r0, #544	; 0x220
     a24:	vst1.64	{d16-d17}, [r1]
     a28:	add	r1, r0, #528	; 0x210
     a2c:	vst1.64	{d16-d17}, [r1]
     a30:	mov	r1, #0
     a34:	str	r1, [sp, #560]	; 0x230
     a38:	mov	r1, r4
     a3c:	bl	a54 <eval_void>
     a40:	sub	sp, fp, #8
     a44:	pop	{r4, sl, fp, pc}
     a48:	movw	r1, #0
     a4c:	movt	r1, #0
     a50:	b	9f0 <coda_expression_eval_void+0x44>

00000a54 <eval_void>:
     a54:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     a58:	add	fp, sp, #24
     a5c:	sub	sp, sp, #24
     a60:	mov	r4, r0
     a64:	ldr	r0, [r1]
     a68:	mov	r5, r1
     a6c:	cmp	r0, #73	; 0x49
     a70:	bgt	b68 <eval_void+0x114>
     a74:	cmp	r0, #31
     a78:	bne	b98 <eval_void+0x144>
     a7c:	mov	r0, #0
     a80:	add	r2, sp, #16
     a84:	str	r0, [sp, #4]
     a88:	mov	r0, #1
     a8c:	str	r0, [sp]
     a90:	ldr	r0, [r5, #12]
     a94:	ldr	r1, [r5, #16]
     a98:	ldrb	r0, [r0]
     a9c:	add	r6, r4, r0, lsl #3
     aa0:	mov	r0, r4
     aa4:	ldr	r8, [r6, #-312]!	; 0xfffffec8
     aa8:	ldr	r9, [r6, #4]
     aac:	bl	3bd0 <eval_integer>
     ab0:	cmp	r0, #0
     ab4:	bne	c34 <eval_void+0x1e0>
     ab8:	ldr	r1, [r5, #20]
     abc:	add	r2, sp, #8
     ac0:	mov	r0, r4
     ac4:	bl	3bd0 <eval_integer>
     ac8:	cmp	r0, #0
     acc:	bne	c34 <eval_void+0x1e0>
     ad0:	ldr	r1, [r5, #24]
     ad4:	cmp	r1, #0
     ad8:	beq	c58 <eval_void+0x204>
     adc:	mov	r2, sp
     ae0:	mov	r0, r4
     ae4:	bl	3bd0 <eval_integer>
     ae8:	cmp	r0, #0
     aec:	bne	c34 <eval_void+0x1e0>
     af0:	ldm	sp, {ip, lr}
     af4:	orrs	r0, ip, lr
     af8:	beq	cc0 <eval_void+0x26c>
     afc:	ldr	r0, [sp, #16]
     b00:	ldr	r1, [sp, #20]
     b04:	rsbs	r2, ip, #0
     b08:	rscs	r2, lr, #0
     b0c:	strd	r0, [r6]
     b10:	ldr	r7, [sp, #8]
     b14:	ldr	r3, [sp, #12]
     b18:	blt	c6c <eval_void+0x218>
     b1c:	subs	r0, r0, r7
     b20:	sbcs	r0, r1, r3
     b24:	blt	cb4 <eval_void+0x260>
     b28:	ldr	r1, [r5, #28]
     b2c:	mov	r0, r4
     b30:	bl	a54 <eval_void>
     b34:	cmp	r0, #0
     b38:	bne	c34 <eval_void+0x1e0>
     b3c:	ldrd	r0, [r6]
     b40:	ldm	sp, {r2, r3}
     b44:	adds	r0, r0, r2
     b48:	adc	r1, r1, r3
     b4c:	strd	r0, [r6]
     b50:	ldr	r2, [sp, #8]
     b54:	ldr	r3, [sp, #12]
     b58:	subs	r0, r0, r2
     b5c:	sbcs	r0, r1, r3
     b60:	bge	b28 <eval_void+0xd4>
     b64:	b	cb4 <eval_void+0x260>
     b68:	cmp	r0, #74	; 0x4a
     b6c:	bne	bbc <eval_void+0x168>
     b70:	ldr	r1, [r5, #16]
     b74:	mov	r0, r4
     b78:	bl	a54 <eval_void>
     b7c:	mvn	r6, #0
     b80:	cmp	r0, #0
     b84:	bne	c38 <eval_void+0x1e4>
     b88:	ldr	r1, [r5, #20]
     b8c:	mov	r0, r4
     b90:	bl	a54 <eval_void>
     b94:	b	bb0 <eval_void+0x15c>
     b98:	cmp	r0, #39	; 0x27
     b9c:	bne	cd4 <eval_void+0x280>
     ba0:	ldr	r1, [r5, #16]
     ba4:	mov	r0, r4
     ba8:	bl	7afc <eval_cursor>
     bac:	mvn	r6, #0
     bb0:	cmp	r0, #0
     bb4:	moveq	r6, #0
     bb8:	b	c38 <eval_void+0x1e4>
     bbc:	cmp	r0, #84	; 0x54
     bc0:	bne	cd4 <eval_void+0x280>
     bc4:	mov	r0, #0
     bc8:	str	r0, [sp, #20]
     bcc:	str	r0, [sp, #16]
     bd0:	ldr	r0, [r4]
     bd4:	cmp	r0, #0
     bd8:	beq	cec <eval_void+0x298>
     bdc:	ldr	r1, [r5, #16]
     be0:	cmp	r1, #0
     be4:	beq	bfc <eval_void+0x1a8>
     be8:	add	r2, sp, #16
     bec:	mov	r0, r4
     bf0:	bl	3bd0 <eval_integer>
     bf4:	cmp	r0, #0
     bf8:	bne	c34 <eval_void+0x1e0>
     bfc:	ldr	r1, [r5, #20]
     c00:	add	r2, sp, #8
     c04:	mov	r0, r4
     c08:	bl	3bd0 <eval_integer>
     c0c:	cmp	r0, #0
     c10:	bne	c34 <eval_void+0x1e0>
     c14:	ldr	r0, [r4]
     c18:	ldr	r1, [r5, #12]
     c1c:	ldr	r2, [sp, #16]
     c20:	mov	r3, sp
     c24:	ldr	r0, [r0]
     c28:	bl	0 <coda_product_variable_get_pointer>
     c2c:	cmp	r0, #0
     c30:	beq	c44 <eval_void+0x1f0>
     c34:	mvn	r6, #0
     c38:	mov	r0, r6
     c3c:	sub	sp, fp, #24
     c40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     c44:	ldr	r0, [sp]
     c48:	ldr	r2, [sp, #8]
     c4c:	ldr	r3, [sp, #12]
     c50:	strd	r2, [r0]
     c54:	b	cb8 <eval_void+0x264>
     c58:	ldr	r0, [sp, #16]
     c5c:	ldr	r1, [sp, #20]
     c60:	strd	r0, [r6]
     c64:	ldr	r7, [sp, #8]
     c68:	ldr	r3, [sp, #12]
     c6c:	subs	r0, r7, r0
     c70:	sbcs	r0, r3, r1
     c74:	blt	cb4 <eval_void+0x260>
     c78:	ldr	r1, [r5, #28]
     c7c:	mov	r0, r4
     c80:	bl	a54 <eval_void>
     c84:	cmp	r0, #0
     c88:	bne	c34 <eval_void+0x1e0>
     c8c:	ldrd	r0, [r6]
     c90:	ldm	sp, {r2, r3}
     c94:	adds	r0, r0, r2
     c98:	adc	r1, r1, r3
     c9c:	strd	r0, [r6]
     ca0:	ldr	r2, [sp, #8]
     ca4:	ldr	r3, [sp, #12]
     ca8:	subs	r0, r2, r0
     cac:	sbcs	r0, r3, r1
     cb0:	bge	c78 <eval_void+0x224>
     cb4:	strd	r8, [r6]
     cb8:	mov	r6, #0
     cbc:	b	c38 <eval_void+0x1e4>
     cc0:	movw	r1, #0
     cc4:	mvn	r0, #400	; 0x190
     cc8:	movt	r1, #0
     ccc:	bl	0 <coda_set_error>
     cd0:	b	c34 <eval_void+0x1e0>
     cd4:	movw	r0, #0
     cd8:	movw	r1, #0
     cdc:	movw	r3, #0
     ce0:	movw	r2, #3902	; 0xf3e
     ce4:	movt	r0, #0
     ce8:	b	d00 <eval_void+0x2ac>
     cec:	movw	r0, #0
     cf0:	movw	r1, #0
     cf4:	movw	r3, #0
     cf8:	movw	r2, #3881	; 0xf29
     cfc:	movt	r0, #0
     d00:	movt	r1, #0
     d04:	movt	r3, #0
     d08:	bl	0 <__assert_fail>

00000d0c <coda_expression_print_html>:
     d0c:	push	{fp, lr}
     d10:	mov	fp, sp
     d14:	sub	sp, sp, #8
     d18:	mov	r2, #15
     d1c:	mov	r3, #1
     d20:	str	r2, [sp]
     d24:	mov	r2, #1
     d28:	bl	d38 <print_expression>
     d2c:	mov	r0, #0
     d30:	mov	sp, fp
     d34:	pop	{fp, pc}

00000d38 <print_expression>:
     d38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d3c:	add	fp, sp, #28
     d40:	sub	sp, sp, #44	; 0x2c
     d44:	cmp	r0, #0
     d48:	beq	2388 <print_expression+0x1650>
     d4c:	mov	r6, r0
     d50:	ldr	r0, [r0]
     d54:	cmp	r0, #86	; 0x56
     d58:	bhi	209c <print_expression+0x1364>
     d5c:	ldr	r7, [fp, #8]
     d60:	mov	r5, r2
     d64:	mov	r2, r1
     d68:	add	r1, pc, #4
     d6c:	mov	r4, r3
     d70:	ldr	pc, [r1, r0, lsl #2]
     d74:	.word	0x00001934
     d78:	.word	0x00001948
     d7c:	.word	0x00001988
     d80:	.word	0x00001a04
     d84:	.word	0x000015f8
     d88:	.word	0x00001a18
     d8c:	.word	0x00001a2c
     d90:	.word	0x00001a40
     d94:	.word	0x00000ed0
     d98:	.word	0x00001214
     d9c:	.word	0x0000160c
     da0:	.word	0x00001a54
     da4:	.word	0x00001620
     da8:	.word	0x00001aa8
     dac:	.word	0x00001634
     db0:	.word	0x00001abc
     db4:	.word	0x00001ad0
     db8:	.word	0x00001b70
     dbc:	.word	0x00001b84
     dc0:	.word	0x00001ba4
     dc4:	.word	0x00001bbc
     dc8:	.word	0x00000ee4
     dcc:	.word	0x00000ee4
     dd0:	.word	0x00001648
     dd4:	.word	0x00001f14
     dd8:	.word	0x00001690
     ddc:	.word	0x00001be8
     de0:	.word	0x00001bfc
     de4:	.word	0x00001c10
     de8:	.word	0x00001c24
     dec:	.word	0x00001c38
     df0:	.word	0x000016d0
     df4:	.word	0x000017a8
     df8:	.word	0x00001310
     dfc:	.word	0x0000134c
     e00:	.word	0x00001358
     e04:	.word	0x00001f54
     e08:	.word	0x00001c4c
     e0c:	.word	0x000017ec
     e10:	.word	0x00001c90
     e14:	.word	0x00001ca4
     e18:	.word	0x000013a8
     e1c:	.word	0x000017f8
     e20:	.word	0x00001cf8
     e24:	.word	0x00001f60
     e28:	.word	0x000013fc
     e2c:	.word	0x0000185c
     e30:	.word	0x00001870
     e34:	.word	0x000012b8
     e38:	.word	0x000020b8
     e3c:	.word	0x00001f88
     e40:	.word	0x00001410
     e44:	.word	0x00001f9c
     e48:	.word	0x00002024
     e4c:	.word	0x00001464
     e50:	.word	0x00001d0c
     e54:	.word	0x00000ed0
     e58:	.word	0x00001214
     e5c:	.word	0x00001884
     e60:	.word	0x00001d20
     e64:	.word	0x000018c4
     e68:	.word	0x00001d60
     e6c:	.word	0x00001da0
     e70:	.word	0x00001dc0
     e74:	.word	0x000018d0
     e78:	.word	0x00001dd4
     e7c:	.word	0x000014e0
     e80:	.word	0x000018e4
     e84:	.word	0x000020cc
     e88:	.word	0x00001520
     e8c:	.word	0x000012cc
     e90:	.word	0x00001534
     e94:	.word	0x000020a4
     e98:	.word	0x000020f0
     e9c:	.word	0x00002144
     ea0:	.word	0x000015d0
     ea4:	.word	0x00001e14
     ea8:	.word	0x000012e0
     eac:	.word	0x00002180
     eb0:	.word	0x000012fc
     eb4:	.word	0x000015e4
     eb8:	.word	0x000018f8
     ebc:	.word	0x0000190c
     ec0:	.word	0x00001228
     ec4:	.word	0x0000123c
     ec8:	.word	0x00001e98
     ecc:	.word	0x00001eec
     ed0:	movw	r1, #0
     ed4:	movw	r0, #0
     ed8:	movt	r1, #0
     edc:	movt	r0, #0
     ee0:	b	1a64 <print_expression+0xd2c>
     ee4:	movw	r0, #0
     ee8:	movw	r8, #0
     eec:	cmp	r5, #0
     ef0:	mov	r9, r2
     ef4:	movt	r0, #0
     ef8:	movt	r8, #0
     efc:	moveq	r8, r0
     f00:	mov	r0, r8
     f04:	blx	r2
     f08:	ldr	r7, [r6, #16]
     f0c:	mov	r2, r9
     f10:	cmp	r7, #0
     f14:	ldrne	r6, [r6, #12]
     f18:	cmpne	r6, #0
     f1c:	beq	120c <print_expression+0x4d4>
     f20:	cmn	r6, #1
     f24:	bgt	f40 <print_expression+0x208>
     f28:	mov	r0, r7
     f2c:	bl	0 <strlen>
     f30:	mov	r2, r9
     f34:	mov	r6, r0
     f38:	cmp	r0, #1
     f3c:	blt	120c <print_expression+0x4d4>
     f40:	movw	r0, #0
     f44:	movw	r1, #0
     f48:	cmp	r5, #0
     f4c:	movw	r3, #0
     f50:	movt	r0, #0
     f54:	movt	r1, #0
     f58:	movt	r3, #0
     f5c:	moveq	r1, r0
     f60:	orrs	r0, r4, r5
     f64:	movw	r4, #0
     f68:	movw	r5, #0
     f6c:	str	r1, [sp, #16]
     f70:	movw	r1, #0
     f74:	movt	r4, #0
     f78:	movt	r5, #0
     f7c:	movt	r1, #0
     f80:	moveq	r3, r1
     f84:	movw	r1, #0
     f88:	movt	r1, #0
     f8c:	str	r3, [sp, #12]
     f90:	movw	r3, #0
     f94:	movt	r3, #0
     f98:	moveq	r3, r1
     f9c:	movw	r1, #0
     fa0:	cmp	r0, #0
     fa4:	movw	r0, #0
     fa8:	movt	r1, #0
     fac:	movt	r0, #0
     fb0:	str	r3, [sp, #8]
     fb4:	moveq	r4, r1
     fb8:	moveq	r5, r0
     fbc:	ldrb	sl, [r7]
     fc0:	sub	r0, sl, #7
     fc4:	cmp	r0, #85	; 0x55
     fc8:	bhi	11d4 <print_expression+0x49c>
     fcc:	add	r1, pc, #0
     fd0:	ldr	pc, [r1, r0, lsl #2]
     fd4:	.word	0x0000112c
     fd8:	.word	0x00001174
     fdc:	.word	0x00001180
     fe0:	.word	0x0000118c
     fe4:	.word	0x00001138
     fe8:	.word	0x00001144
     fec:	.word	0x00001198
     ff0:	.word	0x000011d4
     ff4:	.word	0x000011d4
     ff8:	.word	0x000011d4
     ffc:	.word	0x000011d4
    1000:	.word	0x000011d4
    1004:	.word	0x000011d4
    1008:	.word	0x000011d4
    100c:	.word	0x000011d4
    1010:	.word	0x000011d4
    1014:	.word	0x000011d4
    1018:	.word	0x000011d4
    101c:	.word	0x000011d4
    1020:	.word	0x000011d4
    1024:	.word	0x000011a4
    1028:	.word	0x000011d4
    102c:	.word	0x000011d4
    1030:	.word	0x000011d4
    1034:	.word	0x000011d4
    1038:	.word	0x000011b0
    103c:	.word	0x000011d4
    1040:	.word	0x000011b8
    1044:	.word	0x000011d4
    1048:	.word	0x000011d4
    104c:	.word	0x000011d4
    1050:	.word	0x00001150
    1054:	.word	0x000011d4
    1058:	.word	0x000011d4
    105c:	.word	0x000011d4
    1060:	.word	0x000011d4
    1064:	.word	0x000011d4
    1068:	.word	0x000011d4
    106c:	.word	0x000011d4
    1070:	.word	0x000011d4
    1074:	.word	0x000011d4
    1078:	.word	0x000011d4
    107c:	.word	0x000011d4
    1080:	.word	0x000011d4
    1084:	.word	0x000011d4
    1088:	.word	0x000011d4
    108c:	.word	0x000011d4
    1090:	.word	0x000011d4
    1094:	.word	0x000011d4
    1098:	.word	0x000011d4
    109c:	.word	0x000011d4
    10a0:	.word	0x000011d4
    10a4:	.word	0x000011d4
    10a8:	.word	0x00001158
    10ac:	.word	0x000011d4
    10b0:	.word	0x00001160
    10b4:	.word	0x000011d4
    10b8:	.word	0x000011d4
    10bc:	.word	0x000011d4
    10c0:	.word	0x000011d4
    10c4:	.word	0x000011d4
    10c8:	.word	0x000011d4
    10cc:	.word	0x000011d4
    10d0:	.word	0x000011d4
    10d4:	.word	0x000011d4
    10d8:	.word	0x000011d4
    10dc:	.word	0x000011d4
    10e0:	.word	0x000011d4
    10e4:	.word	0x000011d4
    10e8:	.word	0x000011d4
    10ec:	.word	0x000011d4
    10f0:	.word	0x000011d4
    10f4:	.word	0x000011d4
    10f8:	.word	0x000011d4
    10fc:	.word	0x000011d4
    1100:	.word	0x000011d4
    1104:	.word	0x000011d4
    1108:	.word	0x000011d4
    110c:	.word	0x000011d4
    1110:	.word	0x000011d4
    1114:	.word	0x000011d4
    1118:	.word	0x000011d4
    111c:	.word	0x000011d4
    1120:	.word	0x000011d4
    1124:	.word	0x000011d4
    1128:	.word	0x00001168
    112c:	movw	r0, #0
    1130:	movt	r0, #0
    1134:	b	11bc <print_expression+0x484>
    1138:	movw	r0, #0
    113c:	movt	r0, #0
    1140:	b	11bc <print_expression+0x484>
    1144:	movw	r0, #0
    1148:	movt	r0, #0
    114c:	b	11bc <print_expression+0x484>
    1150:	mov	r0, r4
    1154:	b	11bc <print_expression+0x484>
    1158:	ldr	r0, [sp, #12]
    115c:	b	11bc <print_expression+0x484>
    1160:	ldr	r0, [sp, #8]
    1164:	b	11bc <print_expression+0x484>
    1168:	movw	r0, #0
    116c:	movt	r0, #0
    1170:	b	11bc <print_expression+0x484>
    1174:	movw	r0, #0
    1178:	movt	r0, #0
    117c:	b	11bc <print_expression+0x484>
    1180:	movw	r0, #0
    1184:	movt	r0, #0
    1188:	b	11bc <print_expression+0x484>
    118c:	movw	r0, #0
    1190:	movt	r0, #0
    1194:	b	11bc <print_expression+0x484>
    1198:	movw	r0, #0
    119c:	movt	r0, #0
    11a0:	b	11bc <print_expression+0x484>
    11a4:	movw	r0, #0
    11a8:	movt	r0, #0
    11ac:	b	11bc <print_expression+0x484>
    11b0:	mov	r0, r5
    11b4:	b	11bc <print_expression+0x484>
    11b8:	ldr	r0, [sp, #16]
    11bc:	blx	r2
    11c0:	add	r7, r7, #1
    11c4:	subs	r6, r6, #1
    11c8:	mov	r2, r9
    11cc:	bne	fbc <print_expression+0x284>
    11d0:	b	120c <print_expression+0x4d4>
    11d4:	bl	0 <__ctype_b_loc>
    11d8:	ldr	r0, [r0]
    11dc:	add	r0, r0, sl, lsl #1
    11e0:	ldrb	r0, [r0, #1]
    11e4:	tst	r0, #64	; 0x40
    11e8:	bne	11f8 <print_expression+0x4c0>
    11ec:	movw	r0, #0
    11f0:	movt	r0, #0
    11f4:	b	1200 <print_expression+0x4c8>
    11f8:	movw	r0, #0
    11fc:	movt	r0, #0
    1200:	mov	r1, sl
    1204:	blx	r9
    1208:	b	11c0 <print_expression+0x488>
    120c:	mov	r0, r8
    1210:	b	20e4 <print_expression+0x13ac>
    1214:	movw	r1, #0
    1218:	movw	r0, #0
    121c:	movt	r1, #0
    1220:	movt	r0, #0
    1224:	b	1a64 <print_expression+0xd2c>
    1228:	movw	r1, #0
    122c:	movw	r0, #0
    1230:	movt	r1, #0
    1234:	movt	r0, #0
    1238:	b	191c <print_expression+0xbe4>
    123c:	movw	r1, #0
    1240:	movw	r0, #0
    1244:	cmp	r4, #0
    1248:	mov	r7, r2
    124c:	movt	r1, #0
    1250:	movt	r0, #0
    1254:	moveq	r0, r1
    1258:	ldr	r1, [r6, #12]
    125c:	blx	r2
    1260:	ldr	r0, [r6, #16]
    1264:	cmp	r0, #0
    1268:	beq	12a0 <print_expression+0x568>
    126c:	movw	r0, #0
    1270:	movt	r0, #0
    1274:	blx	r7
    1278:	ldr	r0, [r6, #16]
    127c:	mov	r1, #15
    1280:	mov	r2, r5
    1284:	mov	r3, r4
    1288:	str	r1, [sp]
    128c:	mov	r1, r7
    1290:	bl	d38 <print_expression>
    1294:	movw	r0, #0
    1298:	movt	r0, #0
    129c:	blx	r7
    12a0:	movw	r0, #0
    12a4:	movt	r0, #0
    12a8:	blx	r7
    12ac:	ldr	r0, [r6, #20]
    12b0:	mov	r1, #15
    12b4:	b	1db8 <print_expression+0x1080>
    12b8:	movw	r1, #0
    12bc:	movw	r0, #0
    12c0:	movt	r1, #0
    12c4:	movt	r0, #0
    12c8:	b	2100 <print_expression+0x13c8>
    12cc:	movw	r1, #0
    12d0:	movw	r0, #0
    12d4:	movt	r1, #0
    12d8:	movt	r0, #0
    12dc:	b	20dc <print_expression+0x13a4>
    12e0:	movw	r1, #0
    12e4:	movw	r0, #0
    12e8:	cmp	r4, #0
    12ec:	movt	r1, #0
    12f0:	movt	r0, #0
    12f4:	moveq	r0, r1
    12f8:	b	1800 <print_expression+0xac8>
    12fc:	movw	r1, #0
    1300:	movw	r0, #0
    1304:	movt	r1, #0
    1308:	movt	r0, #0
    130c:	b	1a64 <print_expression+0xd2c>
    1310:	ldr	r0, [r6, #16]
    1314:	cmp	r0, #0
    1318:	beq	133c <print_expression+0x604>
    131c:	mov	r1, #15
    1320:	mov	r7, r2
    1324:	mov	r3, r4
    1328:	str	r1, [sp]
    132c:	mov	r1, r2
    1330:	mov	r2, r5
    1334:	bl	d38 <print_expression>
    1338:	mov	r2, r7
    133c:	ldr	r1, [r6, #12]
    1340:	movw	r0, #0
    1344:	movt	r0, #0
    1348:	b	1f7c <print_expression+0x1244>
    134c:	movw	r0, #0
    1350:	movt	r0, #0
    1354:	b	20e4 <print_expression+0x13ac>
    1358:	ldr	r0, [r6, #16]
    135c:	mov	r1, #15
    1360:	mov	r7, r2
    1364:	mov	r3, r4
    1368:	str	r1, [sp]
    136c:	mov	r1, r2
    1370:	mov	r2, r5
    1374:	bl	d38 <print_expression>
    1378:	ldr	r0, [r6, #16]
    137c:	ldr	r0, [r0]
    1380:	cmp	r0, #38	; 0x26
    1384:	beq	1394 <print_expression+0x65c>
    1388:	movw	r0, #0
    138c:	movt	r0, #0
    1390:	blx	r7
    1394:	ldr	r1, [r6, #12]
    1398:	movw	r0, #0
    139c:	mov	r2, r7
    13a0:	movt	r0, #0
    13a4:	b	1f7c <print_expression+0x1244>
    13a8:	cmp	r7, #4
    13ac:	bgt	13c4 <print_expression+0x68c>
    13b0:	movw	r0, #0
    13b4:	mov	r8, r2
    13b8:	movt	r0, #0
    13bc:	blx	r2
    13c0:	mov	r2, r8
    13c4:	ldr	r0, [r6, #16]
    13c8:	mov	r8, #5
    13cc:	mov	r1, r2
    13d0:	mov	r9, r2
    13d4:	mov	r2, r5
    13d8:	mov	r3, r4
    13dc:	str	r8, [sp]
    13e0:	bl	d38 <print_expression>
    13e4:	movw	r1, #0
    13e8:	orrs	r0, r4, r5
    13ec:	movw	r0, #0
    13f0:	movt	r1, #0
    13f4:	movt	r0, #0
    13f8:	b	1fec <print_expression+0x12b4>
    13fc:	movw	r1, #0
    1400:	movw	r0, #0
    1404:	movt	r1, #0
    1408:	movt	r0, #0
    140c:	b	2100 <print_expression+0x13c8>
    1410:	cmp	r7, #4
    1414:	bgt	142c <print_expression+0x6f4>
    1418:	movw	r0, #0
    141c:	mov	r8, r2
    1420:	movt	r0, #0
    1424:	blx	r2
    1428:	mov	r2, r8
    142c:	ldr	r0, [r6, #16]
    1430:	mov	r8, #5
    1434:	mov	r1, r2
    1438:	mov	r9, r2
    143c:	mov	r2, r5
    1440:	mov	r3, r4
    1444:	str	r8, [sp]
    1448:	bl	d38 <print_expression>
    144c:	movw	r1, #0
    1450:	orrs	r0, r4, r5
    1454:	movw	r0, #0
    1458:	movt	r1, #0
    145c:	movt	r0, #0
    1460:	b	1fec <print_expression+0x12b4>
    1464:	cmp	r7, #9
    1468:	bgt	1480 <print_expression+0x748>
    146c:	movw	r0, #0
    1470:	mov	r8, r2
    1474:	movt	r0, #0
    1478:	blx	r2
    147c:	mov	r2, r8
    1480:	ldr	r0, [r6, #16]
    1484:	mov	r8, #10
    1488:	mov	r1, r2
    148c:	mov	r9, r2
    1490:	mov	r2, r5
    1494:	mov	r3, r4
    1498:	str	r8, [sp]
    149c:	bl	d38 <print_expression>
    14a0:	movw	r1, #0
    14a4:	movw	r0, #0
    14a8:	cmp	r4, #0
    14ac:	movt	r1, #0
    14b0:	movt	r0, #0
    14b4:	moveq	r0, r1
    14b8:	blx	r9
    14bc:	ldr	r0, [r6, #20]
    14c0:	mov	r1, r9
    14c4:	mov	r2, r5
    14c8:	mov	r3, r4
    14cc:	str	r8, [sp]
    14d0:	bl	d38 <print_expression>
    14d4:	cmp	r7, #9
    14d8:	ble	2014 <print_expression+0x12dc>
    14dc:	b	209c <print_expression+0x1364>
    14e0:	cmp	r7, #1
    14e4:	bgt	21c0 <print_expression+0x1488>
    14e8:	movw	r0, #0
    14ec:	mov	r7, r2
    14f0:	movt	r0, #0
    14f4:	blx	r2
    14f8:	ldr	r0, [r6, #16]
    14fc:	mov	r8, #2
    1500:	mov	r1, r7
    1504:	mov	r2, r5
    1508:	mov	r3, r4
    150c:	str	r8, [sp]
    1510:	bl	d38 <print_expression>
    1514:	movw	r0, #0
    1518:	movt	r0, #0
    151c:	b	1a98 <print_expression+0xd60>
    1520:	movw	r1, #0
    1524:	movw	r0, #0
    1528:	movt	r1, #0
    152c:	movt	r0, #0
    1530:	b	20dc <print_expression+0x13a4>
    1534:	movw	r1, #0
    1538:	movw	r0, #0
    153c:	cmp	r4, #0
    1540:	mov	r7, r2
    1544:	movt	r1, #0
    1548:	movt	r0, #0
    154c:	moveq	r0, r1
    1550:	blx	r2
    1554:	ldr	r0, [r6, #16]
    1558:	mov	r8, #15
    155c:	mov	r1, r7
    1560:	mov	r2, r5
    1564:	mov	r3, r4
    1568:	str	r8, [sp]
    156c:	bl	d38 <print_expression>
    1570:	movw	r0, #0
    1574:	movt	r0, #0
    1578:	blx	r7
    157c:	ldr	r0, [r6, #20]
    1580:	mov	r1, r7
    1584:	mov	r2, r5
    1588:	mov	r3, r4
    158c:	str	r8, [sp]
    1590:	mov	r9, r7
    1594:	bl	d38 <print_expression>
    1598:	ldr	r0, [r6, #24]
    159c:	cmp	r0, #0
    15a0:	beq	2014 <print_expression+0x12dc>
    15a4:	movw	r0, #0
    15a8:	mov	r7, r9
    15ac:	movt	r0, #0
    15b0:	blx	r9
    15b4:	ldr	r0, [r6, #24]
    15b8:	mov	r1, r9
    15bc:	mov	r2, r5
    15c0:	mov	r3, r4
    15c4:	str	r8, [sp]
    15c8:	bl	d38 <print_expression>
    15cc:	b	2014 <print_expression+0x12dc>
    15d0:	movw	r1, #0
    15d4:	movw	r0, #0
    15d8:	movt	r1, #0
    15dc:	movt	r0, #0
    15e0:	b	1e24 <print_expression+0x10ec>
    15e4:	movw	r1, #0
    15e8:	movw	r0, #0
    15ec:	movt	r1, #0
    15f0:	movt	r0, #0
    15f4:	b	2100 <print_expression+0x13c8>
    15f8:	movw	r1, #0
    15fc:	movw	r0, #0
    1600:	movt	r1, #0
    1604:	movt	r0, #0
    1608:	b	1a64 <print_expression+0xd2c>
    160c:	movw	r1, #0
    1610:	movw	r0, #0
    1614:	movt	r1, #0
    1618:	movt	r0, #0
    161c:	b	20dc <print_expression+0x13a4>
    1620:	movw	r1, #0
    1624:	movw	r0, #0
    1628:	movt	r1, #0
    162c:	movt	r0, #0
    1630:	b	2100 <print_expression+0x13c8>
    1634:	movw	r1, #0
    1638:	movw	r0, #0
    163c:	movt	r1, #0
    1640:	movt	r0, #0
    1644:	b	2100 <print_expression+0x13c8>
    1648:	movw	r1, #0
    164c:	movw	r0, #0
    1650:	cmp	r4, #0
    1654:	mov	r7, r2
    1658:	movt	r1, #0
    165c:	movt	r0, #0
    1660:	moveq	r0, r1
    1664:	blx	r2
    1668:	ldr	r0, [r6, #16]
    166c:	mov	r8, #15
    1670:	mov	r1, r7
    1674:	mov	r2, r5
    1678:	mov	r3, r4
    167c:	str	r8, [sp]
    1680:	bl	d38 <print_expression>
    1684:	movw	r0, #0
    1688:	movt	r0, #0
    168c:	b	1a98 <print_expression+0xd60>
    1690:	cmp	r7, #5
    1694:	bgt	21ec <print_expression+0x14b4>
    1698:	movw	r0, #0
    169c:	mov	r7, r2
    16a0:	movt	r0, #0
    16a4:	blx	r2
    16a8:	ldr	r0, [r6, #16]
    16ac:	mov	r8, #6
    16b0:	mov	r1, r7
    16b4:	mov	r2, r5
    16b8:	mov	r3, r4
    16bc:	str	r8, [sp]
    16c0:	bl	d38 <print_expression>
    16c4:	movw	r0, #0
    16c8:	movt	r0, #0
    16cc:	b	1a98 <print_expression+0xd60>
    16d0:	movw	r1, #0
    16d4:	movw	r0, #0
    16d8:	cmp	r4, #0
    16dc:	mov	r7, r2
    16e0:	movt	r1, #0
    16e4:	movt	r0, #0
    16e8:	movne	r0, r1
    16ec:	ldr	r1, [r6, #12]
    16f0:	blx	r2
    16f4:	ldr	r0, [r6, #16]
    16f8:	mov	r8, #15
    16fc:	mov	r1, r7
    1700:	mov	r2, r5
    1704:	mov	r3, r4
    1708:	str	r8, [sp]
    170c:	bl	d38 <print_expression>
    1710:	movw	r1, #0
    1714:	movw	r0, #0
    1718:	cmp	r4, #0
    171c:	movt	r1, #0
    1720:	movt	r0, #0
    1724:	movne	r0, r1
    1728:	blx	r7
    172c:	ldr	r0, [r6, #20]
    1730:	mov	r1, r7
    1734:	mov	r2, r5
    1738:	mov	r3, r4
    173c:	str	r8, [sp]
    1740:	bl	d38 <print_expression>
    1744:	ldr	r0, [r6, #24]
    1748:	cmp	r0, #0
    174c:	beq	1784 <print_expression+0xa4c>
    1750:	movw	r1, #0
    1754:	movw	r0, #0
    1758:	cmp	r4, #0
    175c:	movt	r1, #0
    1760:	movt	r0, #0
    1764:	movne	r0, r1
    1768:	blx	r7
    176c:	ldr	r0, [r6, #24]
    1770:	mov	r1, r7
    1774:	mov	r2, r5
    1778:	mov	r3, r4
    177c:	str	r8, [sp]
    1780:	bl	d38 <print_expression>
    1784:	movw	r1, #0
    1788:	movw	r0, #0
    178c:	cmp	r4, #0
    1790:	movt	r1, #0
    1794:	movt	r0, #0
    1798:	movne	r0, r1
    179c:	blx	r7
    17a0:	ldr	r0, [r6, #28]
    17a4:	b	2350 <print_expression+0x1618>
    17a8:	ldr	r0, [r6, #16]
    17ac:	cmp	r0, #0
    17b0:	beq	17d4 <print_expression+0xa9c>
    17b4:	mov	r1, #15
    17b8:	mov	r7, r2
    17bc:	mov	r3, r4
    17c0:	str	r1, [sp]
    17c4:	mov	r1, r2
    17c8:	mov	r2, r5
    17cc:	bl	d38 <print_expression>
    17d0:	mov	r2, r7
    17d4:	movw	r0, #0
    17d8:	mov	r7, r2
    17dc:	movt	r0, #0
    17e0:	blx	r2
    17e4:	ldr	r0, [r6, #20]
    17e8:	b	1ec8 <print_expression+0x1190>
    17ec:	movw	r0, #0
    17f0:	movt	r0, #0
    17f4:	b	20e4 <print_expression+0x13ac>
    17f8:	movw	r0, #0
    17fc:	movt	r0, #0
    1800:	mov	r7, r2
    1804:	blx	r2
    1808:	ldr	r0, [r6, #16]
    180c:	mov	r8, #15
    1810:	mov	r1, r7
    1814:	mov	r2, r5
    1818:	mov	r3, r4
    181c:	str	r8, [sp]
    1820:	bl	d38 <print_expression>
    1824:	movw	r9, #0
    1828:	movt	r9, #0
    182c:	mov	r0, r9
    1830:	blx	r7
    1834:	ldr	r0, [r6, #20]
    1838:	mov	r1, r7
    183c:	mov	r2, r5
    1840:	mov	r3, r4
    1844:	str	r8, [sp]
    1848:	bl	d38 <print_expression>
    184c:	mov	r0, r9
    1850:	blx	r7
    1854:	ldr	r0, [r6, #24]
    1858:	b	1aa0 <print_expression+0xd68>
    185c:	movw	r1, #0
    1860:	movw	r0, #0
    1864:	movt	r1, #0
    1868:	movt	r0, #0
    186c:	b	2100 <print_expression+0x13c8>
    1870:	movw	r1, #0
    1874:	movw	r0, #0
    1878:	movt	r1, #0
    187c:	movt	r0, #0
    1880:	b	2100 <print_expression+0x13c8>
    1884:	cmp	r7, #2
    1888:	bgt	2218 <print_expression+0x14e0>
    188c:	movw	r0, #0
    1890:	mov	r7, r2
    1894:	movt	r0, #0
    1898:	blx	r2
    189c:	ldr	r0, [r6, #16]
    18a0:	mov	r8, #3
    18a4:	mov	r1, r7
    18a8:	mov	r2, r5
    18ac:	mov	r3, r4
    18b0:	str	r8, [sp]
    18b4:	bl	d38 <print_expression>
    18b8:	movw	r0, #0
    18bc:	movt	r0, #0
    18c0:	b	1a98 <print_expression+0xd60>
    18c4:	movw	r0, #0
    18c8:	movt	r0, #0
    18cc:	b	1da8 <print_expression+0x1070>
    18d0:	movw	r1, #0
    18d4:	movw	r0, #0
    18d8:	movt	r1, #0
    18dc:	movt	r0, #0
    18e0:	b	2100 <print_expression+0x13c8>
    18e4:	movw	r1, #0
    18e8:	movw	r0, #0
    18ec:	movt	r1, #0
    18f0:	movt	r0, #0
    18f4:	b	20dc <print_expression+0x13a4>
    18f8:	movw	r1, #0
    18fc:	movw	r0, #0
    1900:	movt	r1, #0
    1904:	movt	r0, #0
    1908:	b	1a64 <print_expression+0xd2c>
    190c:	movw	r1, #0
    1910:	movw	r0, #0
    1914:	movt	r1, #0
    1918:	movt	r0, #0
    191c:	cmp	r4, #0
    1920:	mov	r7, r2
    1924:	moveq	r0, r1
    1928:	ldr	r1, [r6, #12]
    192c:	blx	r2
    1930:	b	2110 <print_expression+0x13d8>
    1934:	movw	r1, #0
    1938:	movw	r0, #0
    193c:	movt	r1, #0
    1940:	movt	r0, #0
    1944:	b	2100 <print_expression+0x13c8>
    1948:	cmp	r7, #3
    194c:	bgt	2244 <print_expression+0x150c>
    1950:	movw	r0, #0
    1954:	mov	r7, r2
    1958:	movt	r0, #0
    195c:	blx	r2
    1960:	ldr	r0, [r6, #16]
    1964:	mov	r8, #4
    1968:	mov	r1, r7
    196c:	mov	r2, r5
    1970:	mov	r3, r4
    1974:	str	r8, [sp]
    1978:	bl	d38 <print_expression>
    197c:	movw	r0, #0
    1980:	movt	r0, #0
    1984:	b	1a98 <print_expression+0xd60>
    1988:	cmp	r7, #6
    198c:	bgt	19a4 <print_expression+0xc6c>
    1990:	movw	r0, #0
    1994:	mov	r8, r2
    1998:	movt	r0, #0
    199c:	blx	r2
    19a0:	mov	r2, r8
    19a4:	ldr	r0, [r6, #16]
    19a8:	mov	r8, #7
    19ac:	mov	r1, r2
    19b0:	mov	r9, r2
    19b4:	mov	r2, r5
    19b8:	mov	r3, r4
    19bc:	str	r8, [sp]
    19c0:	bl	d38 <print_expression>
    19c4:	movw	r1, #0
    19c8:	orrs	r0, r4, r5
    19cc:	movw	r0, #0
    19d0:	movt	r1, #0
    19d4:	movt	r0, #0
    19d8:	moveq	r0, r1
    19dc:	blx	r9
    19e0:	ldr	r0, [r6, #20]
    19e4:	mov	r1, r9
    19e8:	mov	r2, r5
    19ec:	mov	r3, r4
    19f0:	str	r8, [sp]
    19f4:	bl	d38 <print_expression>
    19f8:	cmp	r7, #6
    19fc:	ble	2014 <print_expression+0x12dc>
    1a00:	b	209c <print_expression+0x1364>
    1a04:	movw	r1, #0
    1a08:	movw	r0, #0
    1a0c:	movt	r1, #0
    1a10:	movt	r0, #0
    1a14:	b	1a64 <print_expression+0xd2c>
    1a18:	movw	r1, #0
    1a1c:	movw	r0, #0
    1a20:	movt	r1, #0
    1a24:	movt	r0, #0
    1a28:	b	1a64 <print_expression+0xd2c>
    1a2c:	movw	r1, #0
    1a30:	movw	r0, #0
    1a34:	movt	r1, #0
    1a38:	movt	r0, #0
    1a3c:	b	1a64 <print_expression+0xd2c>
    1a40:	movw	r1, #0
    1a44:	movw	r0, #0
    1a48:	movt	r1, #0
    1a4c:	movt	r0, #0
    1a50:	b	1a64 <print_expression+0xd2c>
    1a54:	movw	r1, #0
    1a58:	movw	r0, #0
    1a5c:	movt	r1, #0
    1a60:	movt	r0, #0
    1a64:	cmp	r4, #0
    1a68:	mov	r7, r2
    1a6c:	moveq	r0, r1
    1a70:	blx	r2
    1a74:	ldr	r0, [r6, #16]
    1a78:	mov	r8, #15
    1a7c:	mov	r1, r7
    1a80:	mov	r2, r5
    1a84:	mov	r3, r4
    1a88:	str	r8, [sp]
    1a8c:	bl	d38 <print_expression>
    1a90:	movw	r0, #0
    1a94:	movt	r0, #0
    1a98:	blx	r7
    1a9c:	ldr	r0, [r6, #20]
    1aa0:	str	r8, [sp]
    1aa4:	b	211c <print_expression+0x13e4>
    1aa8:	movw	r1, #0
    1aac:	movw	r0, #0
    1ab0:	movt	r1, #0
    1ab4:	movt	r0, #0
    1ab8:	b	2100 <print_expression+0x13c8>
    1abc:	movw	r1, #0
    1ac0:	movw	r0, #0
    1ac4:	movt	r1, #0
    1ac8:	movt	r0, #0
    1acc:	b	2100 <print_expression+0x13c8>
    1ad0:	movw	r1, #0
    1ad4:	movw	r0, #0
    1ad8:	cmp	r4, #0
    1adc:	mov	r7, r2
    1ae0:	movt	r1, #0
    1ae4:	movt	r0, #0
    1ae8:	moveq	r0, r1
    1aec:	blx	r2
    1af0:	ldr	r0, [r6, #16]
    1af4:	mov	r9, #15
    1af8:	mov	r1, r7
    1afc:	mov	r2, r5
    1b00:	mov	r3, r4
    1b04:	mov	r8, r7
    1b08:	str	r9, [sp]
    1b0c:	bl	d38 <print_expression>
    1b10:	ldr	r0, [r6, #20]
    1b14:	cmp	r0, #0
    1b18:	beq	1b44 <print_expression+0xe0c>
    1b1c:	movw	r0, #0
    1b20:	mov	r7, r8
    1b24:	movt	r0, #0
    1b28:	blx	r8
    1b2c:	ldr	r0, [r6, #20]
    1b30:	mov	r1, r8
    1b34:	mov	r2, r5
    1b38:	mov	r3, r4
    1b3c:	str	r9, [sp]
    1b40:	bl	d38 <print_expression>
    1b44:	ldr	r0, [r6, #24]
    1b48:	cmp	r0, #0
    1b4c:	beq	1e88 <print_expression+0x1150>
    1b50:	movw	r0, #0
    1b54:	mov	r7, r8
    1b58:	movt	r0, #0
    1b5c:	blx	r8
    1b60:	ldr	r0, [r6, #24]
    1b64:	mov	r1, #15
    1b68:	str	r1, [sp]
    1b6c:	b	1e78 <print_expression+0x1140>
    1b70:	movw	r1, #0
    1b74:	movw	r0, #0
    1b78:	movt	r1, #0
    1b7c:	movt	r0, #0
    1b80:	b	2100 <print_expression+0x13c8>
    1b84:	ldr	r0, [r6, #12]
    1b88:	cmp	r0, #0
    1b8c:	beq	236c <print_expression+0x1634>
    1b90:	movw	r1, #0
    1b94:	movw	r0, #0
    1b98:	movt	r1, #0
    1b9c:	movt	r0, #0
    1ba0:	b	237c <print_expression+0x1644>
    1ba4:	vldr	d0, [r6, #16]
    1ba8:	add	r4, sp, #20
    1bac:	mov	r5, r2
    1bb0:	mov	r0, r4
    1bb4:	bl	0 <coda_strfl>
    1bb8:	b	1bd0 <print_expression+0xe98>
    1bbc:	ldrd	r0, [r6, #16]
    1bc0:	add	r4, sp, #20
    1bc4:	mov	r5, r2
    1bc8:	mov	r2, r4
    1bcc:	bl	0 <coda_str64>
    1bd0:	movw	r0, #0
    1bd4:	mov	r1, r4
    1bd8:	movt	r0, #0
    1bdc:	blx	r5
    1be0:	sub	sp, fp, #28
    1be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1be8:	movw	r1, #0
    1bec:	movw	r0, #0
    1bf0:	movt	r1, #0
    1bf4:	movt	r0, #0
    1bf8:	b	2100 <print_expression+0x13c8>
    1bfc:	movw	r1, #0
    1c00:	movw	r0, #0
    1c04:	movt	r1, #0
    1c08:	movt	r0, #0
    1c0c:	b	20dc <print_expression+0x13a4>
    1c10:	movw	r1, #0
    1c14:	movw	r0, #0
    1c18:	movt	r1, #0
    1c1c:	movt	r0, #0
    1c20:	b	20dc <print_expression+0x13a4>
    1c24:	movw	r1, #0
    1c28:	movw	r0, #0
    1c2c:	movt	r1, #0
    1c30:	movt	r0, #0
    1c34:	b	2100 <print_expression+0x13c8>
    1c38:	movw	r1, #0
    1c3c:	movw	r0, #0
    1c40:	movt	r1, #0
    1c44:	movt	r0, #0
    1c48:	b	2100 <print_expression+0x13c8>
    1c4c:	ldr	r0, [r6, #16]
    1c50:	cmp	r0, #0
    1c54:	beq	1c84 <print_expression+0xf4c>
    1c58:	mov	r1, #15
    1c5c:	mov	r6, r2
    1c60:	mov	r3, r4
    1c64:	str	r1, [sp]
    1c68:	mov	r1, r2
    1c6c:	mov	r2, r5
    1c70:	bl	d38 <print_expression>
    1c74:	movw	r0, #0
    1c78:	movt	r0, #0
    1c7c:	blx	r6
    1c80:	mov	r2, r6
    1c84:	movw	r0, #0
    1c88:	movt	r0, #0
    1c8c:	b	20e4 <print_expression+0x13ac>
    1c90:	movw	r1, #0
    1c94:	movw	r0, #0
    1c98:	movt	r1, #0
    1c9c:	movt	r0, #0
    1ca0:	b	2100 <print_expression+0x13c8>
    1ca4:	cmp	r7, #4
    1ca8:	bgt	1cc0 <print_expression+0xf88>
    1cac:	movw	r0, #0
    1cb0:	mov	r8, r2
    1cb4:	movt	r0, #0
    1cb8:	blx	r2
    1cbc:	mov	r2, r8
    1cc0:	ldr	r0, [r6, #16]
    1cc4:	mov	r8, #5
    1cc8:	mov	r1, r2
    1ccc:	mov	r9, r2
    1cd0:	mov	r2, r5
    1cd4:	mov	r3, r4
    1cd8:	str	r8, [sp]
    1cdc:	bl	d38 <print_expression>
    1ce0:	movw	r1, #0
    1ce4:	orrs	r0, r4, r5
    1ce8:	movw	r0, #0
    1cec:	movt	r1, #0
    1cf0:	movt	r0, #0
    1cf4:	b	1fec <print_expression+0x12b4>
    1cf8:	movw	r1, #0
    1cfc:	movw	r0, #0
    1d00:	movt	r1, #0
    1d04:	movt	r0, #0
    1d08:	b	2100 <print_expression+0x13c8>
    1d0c:	movw	r1, #0
    1d10:	movw	r0, #0
    1d14:	movt	r1, #0
    1d18:	movt	r0, #0
    1d1c:	b	2100 <print_expression+0x13c8>
    1d20:	cmp	r7, #2
    1d24:	bgt	2270 <print_expression+0x1538>
    1d28:	movw	r0, #0
    1d2c:	mov	r7, r2
    1d30:	movt	r0, #0
    1d34:	blx	r2
    1d38:	ldr	r0, [r6, #16]
    1d3c:	mov	r8, #3
    1d40:	mov	r1, r7
    1d44:	mov	r2, r5
    1d48:	mov	r3, r4
    1d4c:	str	r8, [sp]
    1d50:	bl	d38 <print_expression>
    1d54:	movw	r0, #0
    1d58:	movt	r0, #0
    1d5c:	b	1a98 <print_expression+0xd60>
    1d60:	cmp	r7, #5
    1d64:	bgt	229c <print_expression+0x1564>
    1d68:	movw	r0, #0
    1d6c:	mov	r7, r2
    1d70:	movt	r0, #0
    1d74:	blx	r2
    1d78:	ldr	r0, [r6, #16]
    1d7c:	mov	r8, #6
    1d80:	mov	r1, r7
    1d84:	mov	r2, r5
    1d88:	mov	r3, r4
    1d8c:	str	r8, [sp]
    1d90:	bl	d38 <print_expression>
    1d94:	movw	r0, #0
    1d98:	movt	r0, #0
    1d9c:	b	1a98 <print_expression+0xd60>
    1da0:	movw	r0, #0
    1da4:	movt	r0, #0
    1da8:	mov	r7, r2
    1dac:	blx	r2
    1db0:	ldr	r0, [r6, #16]
    1db4:	mov	r1, #1
    1db8:	str	r1, [sp]
    1dbc:	b	2354 <print_expression+0x161c>
    1dc0:	movw	r1, #0
    1dc4:	movw	r0, #0
    1dc8:	movt	r1, #0
    1dcc:	movt	r0, #0
    1dd0:	b	2100 <print_expression+0x13c8>
    1dd4:	cmp	r7, #6
    1dd8:	bgt	22c8 <print_expression+0x1590>
    1ddc:	movw	r0, #0
    1de0:	mov	r7, r2
    1de4:	movt	r0, #0
    1de8:	blx	r2
    1dec:	ldr	r0, [r6, #16]
    1df0:	mov	r8, #7
    1df4:	mov	r1, r7
    1df8:	mov	r2, r5
    1dfc:	mov	r3, r4
    1e00:	str	r8, [sp]
    1e04:	bl	d38 <print_expression>
    1e08:	movw	r0, #0
    1e0c:	movt	r0, #0
    1e10:	b	1a98 <print_expression+0xd60>
    1e14:	movw	r1, #0
    1e18:	movw	r0, #0
    1e1c:	movt	r1, #0
    1e20:	movt	r0, #0
    1e24:	cmp	r4, #0
    1e28:	mov	r7, r2
    1e2c:	moveq	r0, r1
    1e30:	blx	r2
    1e34:	ldr	r0, [r6, #16]
    1e38:	mov	r9, #15
    1e3c:	mov	r1, r7
    1e40:	mov	r2, r5
    1e44:	mov	r3, r4
    1e48:	mov	r8, r7
    1e4c:	str	r9, [sp]
    1e50:	bl	d38 <print_expression>
    1e54:	ldr	r0, [r6, #20]
    1e58:	cmp	r0, #0
    1e5c:	beq	1e88 <print_expression+0x1150>
    1e60:	movw	r0, #0
    1e64:	mov	r7, r8
    1e68:	movt	r0, #0
    1e6c:	blx	r8
    1e70:	ldr	r0, [r6, #20]
    1e74:	str	r9, [sp]
    1e78:	mov	r1, r8
    1e7c:	mov	r2, r5
    1e80:	mov	r3, r4
    1e84:	bl	d38 <print_expression>
    1e88:	movw	r0, #0
    1e8c:	mov	r1, r8
    1e90:	movt	r0, #0
    1e94:	b	2138 <print_expression+0x1400>
    1e98:	ldr	r1, [r6, #12]
    1e9c:	movw	r0, #0
    1ea0:	mov	r7, r2
    1ea4:	movt	r0, #0
    1ea8:	blx	r2
    1eac:	ldr	r0, [r6, #16]
    1eb0:	cmp	r0, #0
    1eb4:	beq	209c <print_expression+0x1364>
    1eb8:	movw	r0, #0
    1ebc:	movt	r0, #0
    1ec0:	blx	r7
    1ec4:	ldr	r0, [r6, #16]
    1ec8:	mov	r1, #15
    1ecc:	mov	r2, r5
    1ed0:	mov	r3, r4
    1ed4:	str	r1, [sp]
    1ed8:	mov	r1, r7
    1edc:	bl	d38 <print_expression>
    1ee0:	movw	r0, #0
    1ee4:	movt	r0, #0
    1ee8:	b	2134 <print_expression+0x13fc>
    1eec:	movw	r1, #0
    1ef0:	movw	r0, #0
    1ef4:	cmp	r4, #0
    1ef8:	mov	r7, r2
    1efc:	movt	r1, #0
    1f00:	movt	r0, #0
    1f04:	moveq	r0, r1
    1f08:	ldr	r1, [r6, #12]
    1f0c:	blx	r2
    1f10:	b	1a74 <print_expression+0xd3c>
    1f14:	cmp	r7, #2
    1f18:	bgt	22f4 <print_expression+0x15bc>
    1f1c:	movw	r0, #0
    1f20:	mov	r7, r2
    1f24:	movt	r0, #0
    1f28:	blx	r2
    1f2c:	ldr	r0, [r6, #16]
    1f30:	mov	r8, #3
    1f34:	mov	r1, r7
    1f38:	mov	r2, r5
    1f3c:	mov	r3, r4
    1f40:	str	r8, [sp]
    1f44:	bl	d38 <print_expression>
    1f48:	movw	r0, #0
    1f4c:	movt	r0, #0
    1f50:	b	1a98 <print_expression+0xd60>
    1f54:	movw	r0, #0
    1f58:	movt	r0, #0
    1f5c:	b	20e4 <print_expression+0x13ac>
    1f60:	movw	r1, #0
    1f64:	movw	r0, #0
    1f68:	cmp	r4, #0
    1f6c:	movt	r1, #0
    1f70:	movt	r0, #0
    1f74:	moveq	r0, r1
    1f78:	ldr	r1, [r6, #12]
    1f7c:	sub	sp, fp, #28
    1f80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f84:	bx	r2
    1f88:	movw	r1, #0
    1f8c:	movw	r0, #0
    1f90:	movt	r1, #0
    1f94:	movt	r0, #0
    1f98:	b	2100 <print_expression+0x13c8>
    1f9c:	cmp	r7, #4
    1fa0:	bgt	1fb8 <print_expression+0x1280>
    1fa4:	movw	r0, #0
    1fa8:	mov	r8, r2
    1fac:	movt	r0, #0
    1fb0:	blx	r2
    1fb4:	mov	r2, r8
    1fb8:	ldr	r0, [r6, #16]
    1fbc:	mov	r8, #5
    1fc0:	mov	r1, r2
    1fc4:	mov	r9, r2
    1fc8:	mov	r2, r5
    1fcc:	mov	r3, r4
    1fd0:	str	r8, [sp]
    1fd4:	bl	d38 <print_expression>
    1fd8:	movw	r1, #0
    1fdc:	orrs	r0, r4, r5
    1fe0:	movw	r0, #0
    1fe4:	movt	r1, #0
    1fe8:	movt	r0, #0
    1fec:	moveq	r0, r1
    1ff0:	blx	r9
    1ff4:	ldr	r0, [r6, #20]
    1ff8:	mov	r1, r9
    1ffc:	mov	r2, r5
    2000:	mov	r3, r4
    2004:	str	r8, [sp]
    2008:	bl	d38 <print_expression>
    200c:	cmp	r7, #4
    2010:	bgt	209c <print_expression+0x1364>
    2014:	movw	r0, #0
    2018:	mov	r1, r9
    201c:	movt	r0, #0
    2020:	b	2138 <print_expression+0x1400>
    2024:	cmp	r7, #8
    2028:	bgt	2040 <print_expression+0x1308>
    202c:	movw	r0, #0
    2030:	mov	r8, r2
    2034:	movt	r0, #0
    2038:	blx	r2
    203c:	mov	r2, r8
    2040:	ldr	r0, [r6, #16]
    2044:	mov	r8, #9
    2048:	mov	r1, r2
    204c:	mov	r9, r2
    2050:	mov	r2, r5
    2054:	mov	r3, r4
    2058:	str	r8, [sp]
    205c:	bl	d38 <print_expression>
    2060:	movw	r1, #0
    2064:	movw	r0, #0
    2068:	cmp	r4, #0
    206c:	movt	r1, #0
    2070:	movt	r0, #0
    2074:	moveq	r0, r1
    2078:	blx	r9
    207c:	ldr	r0, [r6, #20]
    2080:	mov	r1, r9
    2084:	mov	r2, r5
    2088:	mov	r3, r4
    208c:	str	r8, [sp]
    2090:	bl	d38 <print_expression>
    2094:	cmp	r7, #8
    2098:	ble	2014 <print_expression+0x12dc>
    209c:	sub	sp, fp, #28
    20a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20a4:	movw	r1, #0
    20a8:	movw	r0, #0
    20ac:	movt	r1, #0
    20b0:	movt	r0, #0
    20b4:	b	2100 <print_expression+0x13c8>
    20b8:	movw	r1, #0
    20bc:	movw	r0, #0
    20c0:	movt	r1, #0
    20c4:	movt	r0, #0
    20c8:	b	2100 <print_expression+0x13c8>
    20cc:	movw	r1, #0
    20d0:	movw	r0, #0
    20d4:	movt	r1, #0
    20d8:	movt	r0, #0
    20dc:	cmp	r4, #0
    20e0:	moveq	r0, r1
    20e4:	sub	sp, fp, #28
    20e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20ec:	bx	r2
    20f0:	movw	r1, #0
    20f4:	movw	r0, #0
    20f8:	movt	r1, #0
    20fc:	movt	r0, #0
    2100:	cmp	r4, #0
    2104:	mov	r7, r2
    2108:	moveq	r0, r1
    210c:	blx	r2
    2110:	ldr	r0, [r6, #16]
    2114:	mov	r1, #15
    2118:	str	r1, [sp]
    211c:	mov	r1, r7
    2120:	mov	r2, r5
    2124:	mov	r3, r4
    2128:	bl	d38 <print_expression>
    212c:	movw	r0, #0
    2130:	movt	r0, #0
    2134:	mov	r1, r7
    2138:	sub	sp, fp, #28
    213c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2140:	bx	r1
    2144:	ldr	r0, [r6, #16]
    2148:	mov	r8, #15
    214c:	mov	r1, r2
    2150:	mov	r7, r2
    2154:	mov	r2, r5
    2158:	mov	r3, r4
    215c:	str	r8, [sp]
    2160:	bl	d38 <print_expression>
    2164:	movw	r1, #0
    2168:	movw	r0, #0
    216c:	cmp	r4, #0
    2170:	movt	r1, #0
    2174:	movt	r0, #0
    2178:	moveq	r0, r1
    217c:	b	2348 <print_expression+0x1610>
    2180:	cmp	r7, #3
    2184:	bgt	2320 <print_expression+0x15e8>
    2188:	movw	r0, #0
    218c:	mov	r7, r2
    2190:	movt	r0, #0
    2194:	blx	r2
    2198:	ldr	r0, [r6, #16]
    219c:	mov	r8, #4
    21a0:	mov	r1, r7
    21a4:	mov	r2, r5
    21a8:	mov	r3, r4
    21ac:	str	r8, [sp]
    21b0:	bl	d38 <print_expression>
    21b4:	movw	r0, #0
    21b8:	movt	r0, #0
    21bc:	b	1a98 <print_expression+0xd60>
    21c0:	ldr	r0, [r6, #16]
    21c4:	mov	r8, #2
    21c8:	mov	r1, r2
    21cc:	mov	r7, r2
    21d0:	mov	r2, r5
    21d4:	mov	r3, r4
    21d8:	str	r8, [sp]
    21dc:	bl	d38 <print_expression>
    21e0:	movw	r0, #0
    21e4:	movt	r0, #0
    21e8:	b	2348 <print_expression+0x1610>
    21ec:	ldr	r0, [r6, #16]
    21f0:	mov	r8, #6
    21f4:	mov	r1, r2
    21f8:	mov	r7, r2
    21fc:	mov	r2, r5
    2200:	mov	r3, r4
    2204:	str	r8, [sp]
    2208:	bl	d38 <print_expression>
    220c:	movw	r0, #0
    2210:	movt	r0, #0
    2214:	b	2348 <print_expression+0x1610>
    2218:	ldr	r0, [r6, #16]
    221c:	mov	r8, #3
    2220:	mov	r1, r2
    2224:	mov	r7, r2
    2228:	mov	r2, r5
    222c:	mov	r3, r4
    2230:	str	r8, [sp]
    2234:	bl	d38 <print_expression>
    2238:	movw	r0, #0
    223c:	movt	r0, #0
    2240:	b	2348 <print_expression+0x1610>
    2244:	ldr	r0, [r6, #16]
    2248:	mov	r8, #4
    224c:	mov	r1, r2
    2250:	mov	r7, r2
    2254:	mov	r2, r5
    2258:	mov	r3, r4
    225c:	str	r8, [sp]
    2260:	bl	d38 <print_expression>
    2264:	movw	r0, #0
    2268:	movt	r0, #0
    226c:	b	2348 <print_expression+0x1610>
    2270:	ldr	r0, [r6, #16]
    2274:	mov	r8, #3
    2278:	mov	r1, r2
    227c:	mov	r7, r2
    2280:	mov	r2, r5
    2284:	mov	r3, r4
    2288:	str	r8, [sp]
    228c:	bl	d38 <print_expression>
    2290:	movw	r0, #0
    2294:	movt	r0, #0
    2298:	b	2348 <print_expression+0x1610>
    229c:	ldr	r0, [r6, #16]
    22a0:	mov	r8, #6
    22a4:	mov	r1, r2
    22a8:	mov	r7, r2
    22ac:	mov	r2, r5
    22b0:	mov	r3, r4
    22b4:	str	r8, [sp]
    22b8:	bl	d38 <print_expression>
    22bc:	movw	r0, #0
    22c0:	movt	r0, #0
    22c4:	b	2348 <print_expression+0x1610>
    22c8:	ldr	r0, [r6, #16]
    22cc:	mov	r8, #7
    22d0:	mov	r1, r2
    22d4:	mov	r7, r2
    22d8:	mov	r2, r5
    22dc:	mov	r3, r4
    22e0:	str	r8, [sp]
    22e4:	bl	d38 <print_expression>
    22e8:	movw	r0, #0
    22ec:	movt	r0, #0
    22f0:	b	2348 <print_expression+0x1610>
    22f4:	ldr	r0, [r6, #16]
    22f8:	mov	r8, #3
    22fc:	mov	r1, r2
    2300:	mov	r7, r2
    2304:	mov	r2, r5
    2308:	mov	r3, r4
    230c:	str	r8, [sp]
    2310:	bl	d38 <print_expression>
    2314:	movw	r0, #0
    2318:	movt	r0, #0
    231c:	b	2348 <print_expression+0x1610>
    2320:	ldr	r0, [r6, #16]
    2324:	mov	r8, #4
    2328:	mov	r1, r2
    232c:	mov	r7, r2
    2330:	mov	r2, r5
    2334:	mov	r3, r4
    2338:	str	r8, [sp]
    233c:	bl	d38 <print_expression>
    2340:	movw	r0, #0
    2344:	movt	r0, #0
    2348:	blx	r7
    234c:	ldr	r0, [r6, #20]
    2350:	str	r8, [sp]
    2354:	mov	r1, r7
    2358:	mov	r2, r5
    235c:	mov	r3, r4
    2360:	bl	d38 <print_expression>
    2364:	sub	sp, fp, #28
    2368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    236c:	movw	r1, #0
    2370:	movw	r0, #0
    2374:	movt	r1, #0
    2378:	movt	r0, #0
    237c:	cmp	r4, #0
    2380:	movne	r0, r1
    2384:	b	20e4 <print_expression+0x13ac>
    2388:	movw	r0, #0
    238c:	movw	r1, #0
    2390:	movw	r3, #0
    2394:	movw	r2, #4196	; 0x1064
    2398:	movt	r0, #0
    239c:	movt	r1, #0
    23a0:	movt	r3, #0
    23a4:	bl	0 <__assert_fail>

000023a8 <coda_expression_print_xml>:
    23a8:	push	{fp, lr}
    23ac:	mov	fp, sp
    23b0:	sub	sp, sp, #8
    23b4:	mov	r2, #15
    23b8:	mov	r3, #0
    23bc:	str	r2, [sp]
    23c0:	mov	r2, #1
    23c4:	bl	d38 <print_expression>
    23c8:	mov	r0, #0
    23cc:	mov	sp, fp
    23d0:	pop	{fp, pc}

000023d4 <coda_expression_print>:
    23d4:	push	{fp, lr}
    23d8:	mov	fp, sp
    23dc:	sub	sp, sp, #8
    23e0:	mov	r2, #15
    23e4:	mov	r3, #0
    23e8:	str	r2, [sp]
    23ec:	mov	r2, #0
    23f0:	bl	d38 <print_expression>
    23f4:	mov	r0, #0
    23f8:	mov	sp, fp
    23fc:	pop	{fp, pc}

00002400 <coda_expression_get_type_name>:
    2400:	cmp	r0, #5
    2404:	movwhi	r0, #0
    2408:	movthi	r0, #0
    240c:	bxhi	lr
    2410:	movw	r1, #0
    2414:	movt	r1, #0
    2418:	ldr	r0, [r1, r0, lsl #2]
    241c:	bx	lr

00002420 <coda_expression_is_constant>:
    2420:	push	{fp, lr}
    2424:	mov	fp, sp
    2428:	cmp	r0, #0
    242c:	beq	2438 <coda_expression_is_constant+0x18>
    2430:	ldr	r0, [r0, #8]
    2434:	pop	{fp, pc}
    2438:	movw	r1, #0
    243c:	movw	r2, #0
    2440:	mvn	r0, #99	; 0x63
    2444:	movw	r3, #4969	; 0x1369
    2448:	movt	r1, #0
    244c:	movt	r2, #0
    2450:	bl	0 <coda_set_error>
    2454:	mvn	r0, #0
    2458:	pop	{fp, pc}

0000245c <coda_expression_is_equal>:
    245c:	push	{r4, r5, r6, sl, fp, lr}
    2460:	add	fp, sp, #16
    2464:	mov	r5, r0
    2468:	orr	r0, r0, r1
    246c:	clz	r0, r0
    2470:	cmp	r5, #0
    2474:	movne	r6, r1
    2478:	lsr	r4, r0, #5
    247c:	cmpne	r1, #0
    2480:	bne	248c <coda_expression_is_equal+0x30>
    2484:	mov	r0, r4
    2488:	pop	{r4, r5, r6, sl, fp, pc}
    248c:	ldr	r0, [r5]
    2490:	ldr	r1, [r6]
    2494:	mov	r4, #0
    2498:	cmp	r0, r1
    249c:	bne	2484 <coda_expression_is_equal+0x28>
    24a0:	sub	r0, r0, #18
    24a4:	cmp	r0, #4
    24a8:	bhi	24e8 <coda_expression_is_equal+0x8c>
    24ac:	add	r1, pc, #0
    24b0:	ldr	pc, [r1, r0, lsl #2]
    24b4:	.word	0x00002510
    24b8:	.word	0x00002520
    24bc:	.word	0x00002540
    24c0:	.word	0x000024c8
    24c4:	.word	0x000024c8
    24c8:	ldr	r2, [r5, #12]
    24cc:	ldr	r0, [r6, #12]
    24d0:	cmp	r2, r0
    24d4:	bne	2484 <coda_expression_is_equal+0x28>
    24d8:	ldr	r1, [r6, #16]
    24dc:	ldr	r0, [r5, #16]
    24e0:	bl	0 <bcmp>
    24e4:	b	2554 <coda_expression_is_equal+0xf8>
    24e8:	ldr	r0, [r5, #12]
    24ec:	ldr	r1, [r6, #12]
    24f0:	cmp	r0, #0
    24f4:	beq	2564 <coda_expression_is_equal+0x108>
    24f8:	cmp	r1, #0
    24fc:	beq	2484 <coda_expression_is_equal+0x28>
    2500:	bl	0 <strcmp>
    2504:	cmp	r0, #0
    2508:	bne	2484 <coda_expression_is_equal+0x28>
    250c:	b	256c <coda_expression_is_equal+0x110>
    2510:	ldr	r0, [r6, #12]
    2514:	ldr	r1, [r5, #12]
    2518:	sub	r0, r1, r0
    251c:	b	2554 <coda_expression_is_equal+0xf8>
    2520:	vldr	d16, [r6, #16]
    2524:	vldr	d17, [r5, #16]
    2528:	mov	r4, #0
    252c:	vcmp.f64	d17, d16
    2530:	vmrs	APSR_nzcv, fpscr
    2534:	movweq	r4, #1
    2538:	mov	r0, r4
    253c:	pop	{r4, r5, r6, sl, fp, pc}
    2540:	ldrd	r0, [r6, #16]
    2544:	ldrd	r2, [r5, #16]
    2548:	eor	r1, r3, r1
    254c:	eor	r0, r2, r0
    2550:	orr	r0, r0, r1
    2554:	clz	r0, r0
    2558:	lsr	r4, r0, #5
    255c:	mov	r0, r4
    2560:	pop	{r4, r5, r6, sl, fp, pc}
    2564:	cmp	r1, #0
    2568:	bne	2484 <coda_expression_is_equal+0x28>
    256c:	ldr	r1, [r6, #16]
    2570:	ldr	r0, [r5, #16]
    2574:	bl	245c <coda_expression_is_equal>
    2578:	cmp	r0, #0
    257c:	beq	2484 <coda_expression_is_equal+0x28>
    2580:	ldr	r1, [r6, #20]
    2584:	ldr	r0, [r5, #20]
    2588:	bl	245c <coda_expression_is_equal>
    258c:	cmp	r0, #0
    2590:	beq	2484 <coda_expression_is_equal+0x28>
    2594:	ldr	r1, [r6, #24]
    2598:	ldr	r0, [r5, #24]
    259c:	bl	245c <coda_expression_is_equal>
    25a0:	cmp	r0, #0
    25a4:	beq	2484 <coda_expression_is_equal+0x28>
    25a8:	ldr	r1, [r6, #28]
    25ac:	ldr	r0, [r5, #28]
    25b0:	bl	245c <coda_expression_is_equal>
    25b4:	cmp	r0, #0
    25b8:	mov	r4, r0
    25bc:	movwne	r4, #1
    25c0:	mov	r0, r4
    25c4:	pop	{r4, r5, r6, sl, fp, pc}

000025c8 <coda_expression_get_type>:
    25c8:	push	{fp, lr}
    25cc:	mov	fp, sp
    25d0:	cmp	r0, #0
    25d4:	beq	25e8 <coda_expression_get_type+0x20>
    25d8:	ldr	r0, [r0, #4]
    25dc:	str	r0, [r1]
    25e0:	mov	r0, #0
    25e4:	pop	{fp, pc}
    25e8:	movw	r1, #0
    25ec:	movw	r2, #0
    25f0:	mvn	r0, #99	; 0x63
    25f4:	movw	r3, #5071	; 0x13cf
    25f8:	movt	r1, #0
    25fc:	movt	r2, #0
    2600:	bl	0 <coda_set_error>
    2604:	mvn	r0, #0
    2608:	pop	{fp, pc}

0000260c <coda_expression_eval_bool>:
    260c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    2610:	add	fp, sp, #24
    2614:	sub	sp, sp, #568	; 0x238
    2618:	mov	r6, r0
    261c:	ldr	r0, [r0, #4]
    2620:	cmp	r0, #0
    2624:	beq	2640 <coda_expression_eval_bool+0x34>
    2628:	movw	r1, #0
    262c:	movt	r1, #0
    2630:	mvn	r0, #99	; 0x63
    2634:	bl	0 <coda_set_error>
    2638:	mvn	r5, #0
    263c:	b	26c8 <coda_expression_eval_bool+0xbc>
    2640:	mov	r5, r2
    2644:	mov	r4, r1
    2648:	cmp	r1, #0
    264c:	beq	266c <coda_expression_eval_bool+0x60>
    2650:	mov	r0, sp
    2654:	mov	r1, r4
    2658:	mov	r2, #520	; 0x208
    265c:	str	r4, [sp]
    2660:	add	r0, r0, #8
    2664:	bl	0 <memcpy>
    2668:	b	2680 <coda_expression_eval_bool+0x74>
    266c:	ldr	r0, [r6, #8]
    2670:	cmp	r0, #0
    2674:	beq	26fc <coda_expression_eval_bool+0xf0>
    2678:	mov	r0, #0
    267c:	str	r0, [sp]
    2680:	vmov.i32	q8, #0	; 0x00000000
    2684:	mov	r7, sp
    2688:	mov	r1, r6
    268c:	mov	r2, r5
    2690:	add	r0, r7, #544	; 0x220
    2694:	vst1.64	{d16-d17}, [r0]
    2698:	add	r0, r7, #528	; 0x210
    269c:	vst1.64	{d16-d17}, [r0]
    26a0:	mov	r0, #0
    26a4:	str	r0, [sp, #560]	; 0x230
    26a8:	mov	r0, r7
    26ac:	bl	2708 <eval_boolean>
    26b0:	cmp	r0, #0
    26b4:	mov	r5, r0
    26b8:	mvnne	r5, #0
    26bc:	cmp	r4, #0
    26c0:	cmpne	r0, #0
    26c4:	bne	26d4 <coda_expression_eval_bool+0xc8>
    26c8:	mov	r0, r5
    26cc:	sub	sp, fp, #24
    26d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    26d4:	add	r6, r7, #8
    26d8:	mov	r0, r4
    26dc:	mov	r1, r6
    26e0:	bl	0 <coda_cursor_compare>
    26e4:	mvn	r5, #0
    26e8:	cmp	r0, #0
    26ec:	beq	26c8 <coda_expression_eval_bool+0xbc>
    26f0:	mov	r0, r6
    26f4:	bl	0 <coda_cursor_add_to_error_message>
    26f8:	b	26c8 <coda_expression_eval_bool+0xbc>
    26fc:	movw	r1, #0
    2700:	movt	r1, #0
    2704:	b	2630 <coda_expression_eval_bool+0x24>

00002708 <eval_boolean>:
    2708:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    270c:	add	fp, sp, #28
    2710:	sub	sp, sp, #580	; 0x244
    2714:	mov	r5, r0
    2718:	ldr	r0, [r1]
    271c:	sub	r0, r0, #4
    2720:	cmp	r0, #82	; 0x52
    2724:	bhi	39cc <eval_boolean+0x12c4>
    2728:	mov	r6, r1
    272c:	add	r1, pc, #4
    2730:	mov	r8, r2
    2734:	ldr	pc, [r1, r0, lsl #2]
    2738:	.word	0x00002884
    273c:	.word	0x000039cc
    2740:	.word	0x00002c94
    2744:	.word	0x000039cc
    2748:	.word	0x000039cc
    274c:	.word	0x000039cc
    2750:	.word	0x000039cc
    2754:	.word	0x00002dc0
    2758:	.word	0x000039cc
    275c:	.word	0x000039cc
    2760:	.word	0x000039cc
    2764:	.word	0x000039cc
    2768:	.word	0x000039cc
    276c:	.word	0x000039cc
    2770:	.word	0x00002c24
    2774:	.word	0x000039cc
    2778:	.word	0x000039cc
    277c:	.word	0x000039cc
    2780:	.word	0x000039cc
    2784:	.word	0x000039cc
    2788:	.word	0x000039cc
    278c:	.word	0x00002bbc
    2790:	.word	0x00002a20
    2794:	.word	0x000039cc
    2798:	.word	0x000039cc
    279c:	.word	0x000039cc
    27a0:	.word	0x000039cc
    27a4:	.word	0x000039cc
    27a8:	.word	0x000039cc
    27ac:	.word	0x000039cc
    27b0:	.word	0x000039cc
    27b4:	.word	0x000039cc
    27b8:	.word	0x000039cc
    27bc:	.word	0x000039cc
    27c0:	.word	0x000039cc
    27c4:	.word	0x000039cc
    27c8:	.word	0x00002b08
    27cc:	.word	0x00002974
    27d0:	.word	0x00002b90
    27d4:	.word	0x000039cc
    27d8:	.word	0x000039cc
    27dc:	.word	0x000039cc
    27e0:	.word	0x00002950
    27e4:	.word	0x00002b6c
    27e8:	.word	0x00002908
    27ec:	.word	0x0000292c
    27f0:	.word	0x000039cc
    27f4:	.word	0x00002aa0
    27f8:	.word	0x00002e10
    27fc:	.word	0x000029dc
    2800:	.word	0x00002ed0
    2804:	.word	0x000039cc
    2808:	.word	0x000039cc
    280c:	.word	0x000039cc
    2810:	.word	0x000039cc
    2814:	.word	0x000039cc
    2818:	.word	0x000039cc
    281c:	.word	0x00002c2c
    2820:	.word	0x00002d94
    2824:	.word	0x000039cc
    2828:	.word	0x000039cc
    282c:	.word	0x000039cc
    2830:	.word	0x000039cc
    2834:	.word	0x000039cc
    2838:	.word	0x000039cc
    283c:	.word	0x000039cc
    2840:	.word	0x000039cc
    2844:	.word	0x00002e78
    2848:	.word	0x000039cc
    284c:	.word	0x000039cc
    2850:	.word	0x000039cc
    2854:	.word	0x000039cc
    2858:	.word	0x000039cc
    285c:	.word	0x000039cc
    2860:	.word	0x000039cc
    2864:	.word	0x000039cc
    2868:	.word	0x000039cc
    286c:	.word	0x000039cc
    2870:	.word	0x00002d18
    2874:	.word	0x000039cc
    2878:	.word	0x000039cc
    287c:	.word	0x000039cc
    2880:	.word	0x00002d44
    2884:	ldr	r0, [r5]
    2888:	cmp	r0, #0
    288c:	beq	39ec <eval_boolean+0x12e4>
    2890:	add	r4, r5, #8
    2894:	add	r0, sp, #16
    2898:	mov	r2, #520	; 0x208
    289c:	mov	r1, r4
    28a0:	bl	0 <memcpy>
    28a4:	ldr	r1, [r6, #16]
    28a8:	mov	r0, r5
    28ac:	bl	7afc <eval_cursor>
    28b0:	mvn	r7, #0
    28b4:	cmp	r0, #0
    28b8:	bne	35b8 <eval_boolean+0xeb0>
    28bc:	sub	r1, fp, #40	; 0x28
    28c0:	mov	r0, r4
    28c4:	bl	0 <coda_cursor_get_num_elements>
    28c8:	cmp	r0, #0
    28cc:	bne	35b8 <eval_boolean+0xeb0>
    28d0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    28d4:	cmp	r0, #1
    28d8:	blt	32c8 <eval_boolean+0xbc0>
    28dc:	mov	r0, r4
    28e0:	bl	0 <coda_cursor_goto_first_array_element>
    28e4:	cmp	r0, #0
    28e8:	bne	35b8 <eval_boolean+0xeb0>
    28ec:	ldr	r0, [fp, #-40]	; 0xffffffd8
    28f0:	cmp	r0, #1
    28f4:	blt	32c8 <eval_boolean+0xbc0>
    28f8:	mov	sl, #0
    28fc:	sub	r9, fp, #44	; 0x2c
    2900:	mvn	r7, #0
    2904:	b	327c <eval_boolean+0xb74>
    2908:	ldr	r1, [r6, #16]
    290c:	add	r2, sp, #16
    2910:	mov	r0, r5
    2914:	bl	5274 <eval_float>
    2918:	cmp	r0, #0
    291c:	bne	35b4 <eval_boolean+0xeac>
    2920:	vldr	d0, [sp, #16]
    2924:	bl	0 <coda_isNaN>
    2928:	b	30f4 <eval_boolean+0x9ec>
    292c:	ldr	r1, [r6, #16]
    2930:	add	r2, sp, #16
    2934:	mov	r0, r5
    2938:	bl	5274 <eval_float>
    293c:	cmp	r0, #0
    2940:	bne	35b4 <eval_boolean+0xeac>
    2944:	vldr	d0, [sp, #16]
    2948:	bl	0 <coda_isPlusInf>
    294c:	b	30f4 <eval_boolean+0x9ec>
    2950:	ldr	r1, [r6, #16]
    2954:	add	r2, sp, #16
    2958:	mov	r0, r5
    295c:	bl	5274 <eval_float>
    2960:	cmp	r0, #0
    2964:	bne	35b4 <eval_boolean+0xeac>
    2968:	vldr	d0, [sp, #16]
    296c:	bl	0 <coda_isInf>
    2970:	b	30f4 <eval_boolean+0x9ec>
    2974:	ldr	r1, [r6, #16]
    2978:	ldr	r0, [r1, #4]
    297c:	cmp	r0, #2
    2980:	beq	2994 <eval_boolean+0x28c>
    2984:	ldr	r2, [r6, #20]
    2988:	ldr	r2, [r2, #4]
    298c:	cmp	r2, #2
    2990:	bne	2ff8 <eval_boolean+0x8f0>
    2994:	add	r2, sp, #16
    2998:	mov	r0, r5
    299c:	bl	5274 <eval_float>
    29a0:	cmp	r0, #0
    29a4:	bne	35b4 <eval_boolean+0xeac>
    29a8:	ldr	r1, [r6, #20]
    29ac:	sub	r2, fp, #40	; 0x28
    29b0:	mov	r0, r5
    29b4:	bl	5274 <eval_float>
    29b8:	cmp	r0, #0
    29bc:	bne	35b4 <eval_boolean+0xeac>
    29c0:	vldr	d16, [fp, #-40]	; 0xffffffd8
    29c4:	vldr	d17, [sp, #16]
    29c8:	mov	r0, #0
    29cc:	vcmpe.f64	d17, d16
    29d0:	vmrs	APSR_nzcv, fpscr
    29d4:	movwgt	r0, #1
    29d8:	b	30f4 <eval_boolean+0x9ec>
    29dc:	ldr	r1, [r6, #16]
    29e0:	mov	r0, r5
    29e4:	mov	r2, r8
    29e8:	bl	2708 <eval_boolean>
    29ec:	mvn	r7, #0
    29f0:	cmp	r0, #0
    29f4:	bne	35b8 <eval_boolean+0xeb0>
    29f8:	ldr	r0, [r8]
    29fc:	cmp	r0, #0
    2a00:	beq	384c <eval_boolean+0x1144>
    2a04:	ldr	r1, [r6, #20]
    2a08:	mov	r0, r5
    2a0c:	mov	r2, r8
    2a10:	bl	2708 <eval_boolean>
    2a14:	cmp	r0, #0
    2a18:	bne	35b8 <eval_boolean+0xeb0>
    2a1c:	b	384c <eval_boolean+0x1144>
    2a20:	ldr	r0, [r5]
    2a24:	cmp	r0, #0
    2a28:	beq	3a00 <eval_boolean+0x12f8>
    2a2c:	add	r4, r5, #8
    2a30:	add	r0, sp, #16
    2a34:	mov	r2, #520	; 0x208
    2a38:	mov	r1, r4
    2a3c:	bl	0 <memcpy>
    2a40:	ldr	r1, [r6, #16]
    2a44:	mov	r0, r5
    2a48:	bl	7afc <eval_cursor>
    2a4c:	cmp	r0, #0
    2a50:	beq	2f1c <eval_boolean+0x814>
    2a54:	ldr	r0, [pc, #4088]	; 3a54 <eval_boolean+0x134c>
    2a58:	ldr	r1, [pc, r0]
    2a5c:	bl	0 <__aeabi_read_tp>
    2a60:	ldr	r0, [r0, r1]
    2a64:	mvn	r1, #400	; 0x190
    2a68:	mvn	r7, #0
    2a6c:	cmp	r0, r1
    2a70:	beq	35b8 <eval_boolean+0xeb0>
    2a74:	ldr	r0, [pc, #4080]	; 3a6c <eval_boolean+0x1364>
    2a78:	mov	r7, #0
    2a7c:	ldr	r1, [pc, r0]
    2a80:	bl	0 <__aeabi_read_tp>
    2a84:	str	r7, [r0, r1]
    2a88:	add	r1, sp, #16
    2a8c:	mov	r0, r4
    2a90:	mov	r2, #520	; 0x208
    2a94:	str	r7, [r8]
    2a98:	bl	0 <memcpy>
    2a9c:	b	35b8 <eval_boolean+0xeb0>
    2aa0:	ldr	r1, [r6, #16]
    2aa4:	ldr	r0, [r1, #4]
    2aa8:	cmp	r0, #2
    2aac:	beq	2ac0 <eval_boolean+0x3b8>
    2ab0:	ldr	r2, [r6, #20]
    2ab4:	ldr	r2, [r2, #4]
    2ab8:	cmp	r2, #2
    2abc:	bne	3048 <eval_boolean+0x940>
    2ac0:	add	r2, sp, #16
    2ac4:	mov	r0, r5
    2ac8:	bl	5274 <eval_float>
    2acc:	cmp	r0, #0
    2ad0:	bne	35b4 <eval_boolean+0xeac>
    2ad4:	ldr	r1, [r6, #20]
    2ad8:	sub	r2, fp, #40	; 0x28
    2adc:	mov	r0, r5
    2ae0:	bl	5274 <eval_float>
    2ae4:	cmp	r0, #0
    2ae8:	bne	35b4 <eval_boolean+0xeac>
    2aec:	vldr	d16, [fp, #-40]	; 0xffffffd8
    2af0:	vldr	d17, [sp, #16]
    2af4:	mov	r0, #0
    2af8:	vcmpe.f64	d17, d16
    2afc:	vmrs	APSR_nzcv, fpscr
    2b00:	movwls	r0, #1
    2b04:	b	30f4 <eval_boolean+0x9ec>
    2b08:	ldr	r1, [r6, #16]
    2b0c:	ldr	r0, [r1, #4]
    2b10:	cmp	r0, #2
    2b14:	beq	2b28 <eval_boolean+0x420>
    2b18:	ldr	r2, [r6, #20]
    2b1c:	ldr	r2, [r2, #4]
    2b20:	cmp	r2, #2
    2b24:	bne	3098 <eval_boolean+0x990>
    2b28:	add	r2, sp, #16
    2b2c:	mov	r0, r5
    2b30:	bl	5274 <eval_float>
    2b34:	cmp	r0, #0
    2b38:	bne	35b4 <eval_boolean+0xeac>
    2b3c:	ldr	r1, [r6, #20]
    2b40:	sub	r2, fp, #40	; 0x28
    2b44:	mov	r0, r5
    2b48:	bl	5274 <eval_float>
    2b4c:	cmp	r0, #0
    2b50:	bne	35b4 <eval_boolean+0xeac>
    2b54:	vldr	d16, [fp, #-40]	; 0xffffffd8
    2b58:	vldr	d17, [sp, #16]
    2b5c:	mov	r0, #0
    2b60:	vcmpe.f64	d17, d16
    2b64:	vmrs	APSR_nzcv, fpscr
    2b68:	b	30f0 <eval_boolean+0x9e8>
    2b6c:	ldr	r1, [r6, #16]
    2b70:	add	r2, sp, #16
    2b74:	mov	r0, r5
    2b78:	bl	5274 <eval_float>
    2b7c:	cmp	r0, #0
    2b80:	bne	35b4 <eval_boolean+0xeac>
    2b84:	vldr	d0, [sp, #16]
    2b88:	bl	0 <coda_isMinInf>
    2b8c:	b	30f4 <eval_boolean+0x9ec>
    2b90:	ldr	r1, [r6, #16]
    2b94:	add	r2, sp, #16
    2b98:	mov	r0, r5
    2b9c:	bl	2708 <eval_boolean>
    2ba0:	cmp	r0, #0
    2ba4:	bne	35b4 <eval_boolean+0xeac>
    2ba8:	ldr	r0, [sp, #16]
    2bac:	cmp	r0, #0
    2bb0:	beq	32d0 <eval_boolean+0xbc8>
    2bb4:	ldr	r1, [r6, #20]
    2bb8:	b	32d4 <eval_boolean+0xbcc>
    2bbc:	ldr	r1, [r6, #16]
    2bc0:	ldr	r0, [r1, #4]
    2bc4:	cmp	r0, #2
    2bc8:	beq	2bdc <eval_boolean+0x4d4>
    2bcc:	ldr	r2, [r6, #20]
    2bd0:	ldr	r2, [r2, #4]
    2bd4:	cmp	r2, #2
    2bd8:	bne	3100 <eval_boolean+0x9f8>
    2bdc:	add	r2, sp, #16
    2be0:	mov	r0, r5
    2be4:	bl	5274 <eval_float>
    2be8:	cmp	r0, #0
    2bec:	bne	35b4 <eval_boolean+0xeac>
    2bf0:	ldr	r1, [r6, #20]
    2bf4:	sub	r2, fp, #40	; 0x28
    2bf8:	mov	r0, r5
    2bfc:	bl	5274 <eval_float>
    2c00:	cmp	r0, #0
    2c04:	bne	35b4 <eval_boolean+0xeac>
    2c08:	vldr	d16, [fp, #-40]	; 0xffffffd8
    2c0c:	vldr	d17, [sp, #16]
    2c10:	mov	r0, #0
    2c14:	vcmp.f64	d17, d16
    2c18:	vmrs	APSR_nzcv, fpscr
    2c1c:	movweq	r0, #1
    2c20:	b	30f4 <eval_boolean+0x9ec>
    2c24:	ldr	r0, [r6, #12]
    2c28:	b	30f4 <eval_boolean+0x9ec>
    2c2c:	ldr	r1, [r6, #16]
    2c30:	ldr	r0, [r1, #4]
    2c34:	cmp	r0, #2
    2c38:	beq	2c4c <eval_boolean+0x544>
    2c3c:	ldr	r2, [r6, #20]
    2c40:	ldr	r2, [r2, #4]
    2c44:	cmp	r2, #2
    2c48:	bne	315c <eval_boolean+0xa54>
    2c4c:	add	r2, sp, #16
    2c50:	mov	r0, r5
    2c54:	bl	5274 <eval_float>
    2c58:	cmp	r0, #0
    2c5c:	bne	35b4 <eval_boolean+0xeac>
    2c60:	ldr	r1, [r6, #20]
    2c64:	sub	r2, fp, #40	; 0x28
    2c68:	mov	r0, r5
    2c6c:	bl	5274 <eval_float>
    2c70:	cmp	r0, #0
    2c74:	bne	35b4 <eval_boolean+0xeac>
    2c78:	vldr	d16, [fp, #-40]	; 0xffffffd8
    2c7c:	vldr	d17, [sp, #16]
    2c80:	mov	r0, #0
    2c84:	vcmp.f64	d17, d16
    2c88:	vmrs	APSR_nzcv, fpscr
    2c8c:	movwne	r0, #1
    2c90:	b	30f4 <eval_boolean+0x9ec>
    2c94:	ldr	r0, [r5]
    2c98:	cmp	r0, #0
    2c9c:	beq	3a14 <eval_boolean+0x130c>
    2ca0:	add	r4, r5, #8
    2ca4:	add	r0, sp, #16
    2ca8:	mov	r2, #520	; 0x208
    2cac:	mov	r1, r4
    2cb0:	bl	0 <memcpy>
    2cb4:	ldr	r1, [r6, #16]
    2cb8:	mov	r0, r5
    2cbc:	bl	7afc <eval_cursor>
    2cc0:	mvn	r7, #0
    2cc4:	cmp	r0, #0
    2cc8:	bne	35b8 <eval_boolean+0xeb0>
    2ccc:	sub	r1, fp, #40	; 0x28
    2cd0:	mov	r0, r4
    2cd4:	bl	0 <coda_cursor_get_num_elements>
    2cd8:	cmp	r0, #0
    2cdc:	bne	35b8 <eval_boolean+0xeb0>
    2ce0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2ce4:	cmp	r0, #1
    2ce8:	blt	35c4 <eval_boolean+0xebc>
    2cec:	mov	r0, r4
    2cf0:	bl	0 <coda_cursor_goto_first_array_element>
    2cf4:	cmp	r0, #0
    2cf8:	bne	35b8 <eval_boolean+0xeb0>
    2cfc:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2d00:	cmp	r0, #1
    2d04:	blt	35c4 <eval_boolean+0xebc>
    2d08:	mov	sl, #0
    2d0c:	sub	r9, fp, #44	; 0x2c
    2d10:	mvn	r7, #0
    2d14:	b	3224 <eval_boolean+0xb1c>
    2d18:	ldr	r0, [r5]
    2d1c:	cmp	r0, #0
    2d20:	beq	3a28 <eval_boolean+0x1320>
    2d24:	ldr	r1, [r5, #560]	; 0x230
    2d28:	cmp	r1, #0
    2d2c:	beq	2f6c <eval_boolean+0x864>
    2d30:	movw	r1, #0
    2d34:	mvn	r0, #400	; 0x190
    2d38:	movt	r1, #0
    2d3c:	bl	0 <coda_set_error>
    2d40:	b	35b4 <eval_boolean+0xeac>
    2d44:	ldr	r0, [r6, #12]
    2d48:	ldr	r1, [r6, #16]
    2d4c:	ldrb	r0, [r0]
    2d50:	add	r4, r5, r0, lsl #3
    2d54:	mov	r0, r5
    2d58:	ldr	r9, [r4, #-312]!	; 0xfffffec8
    2d5c:	ldr	sl, [r4, #4]
    2d60:	mov	r2, r4
    2d64:	bl	3bd0 <eval_integer>
    2d68:	mvn	r7, #0
    2d6c:	cmp	r0, #0
    2d70:	bne	35b8 <eval_boolean+0xeb0>
    2d74:	ldr	r1, [r6, #20]
    2d78:	mov	r0, r5
    2d7c:	mov	r2, r8
    2d80:	bl	2708 <eval_boolean>
    2d84:	cmp	r0, #0
    2d88:	bne	35b8 <eval_boolean+0xeb0>
    2d8c:	stm	r4, {r9, sl}
    2d90:	b	384c <eval_boolean+0x1144>
    2d94:	ldr	r1, [r6, #16]
    2d98:	mov	r0, r5
    2d9c:	mov	r2, r8
    2da0:	bl	2708 <eval_boolean>
    2da4:	mvn	r7, #0
    2da8:	cmp	r0, #0
    2dac:	bne	35b8 <eval_boolean+0xeb0>
    2db0:	ldr	r0, [r8]
    2db4:	clz	r0, r0
    2db8:	lsr	r0, r0, #5
    2dbc:	b	30f4 <eval_boolean+0x9ec>
    2dc0:	ldr	r0, [r5]
    2dc4:	cmp	r0, #0
    2dc8:	beq	3a3c <eval_boolean+0x1334>
    2dcc:	add	r4, r5, #8
    2dd0:	add	r0, sp, #16
    2dd4:	mov	r2, #520	; 0x208
    2dd8:	mov	r1, r4
    2ddc:	bl	0 <memcpy>
    2de0:	ldr	r1, [r6, #16]
    2de4:	mov	r0, r5
    2de8:	bl	7afc <eval_cursor>
    2dec:	cmp	r0, #0
    2df0:	bne	35b4 <eval_boolean+0xeac>
    2df4:	ldr	r1, [r6, #20]
    2df8:	mov	r0, r5
    2dfc:	mov	r2, r8
    2e00:	bl	2708 <eval_boolean>
    2e04:	cmp	r0, #0
    2e08:	bne	35b4 <eval_boolean+0xeac>
    2e0c:	b	35cc <eval_boolean+0xec4>
    2e10:	ldr	r1, [r6, #16]
    2e14:	ldr	r0, [r1, #4]
    2e18:	cmp	r0, #2
    2e1c:	beq	2e30 <eval_boolean+0x728>
    2e20:	ldr	r2, [r6, #20]
    2e24:	ldr	r2, [r2, #4]
    2e28:	cmp	r2, #2
    2e2c:	bne	31b8 <eval_boolean+0xab0>
    2e30:	add	r2, sp, #16
    2e34:	mov	r0, r5
    2e38:	bl	5274 <eval_float>
    2e3c:	cmp	r0, #0
    2e40:	bne	35b4 <eval_boolean+0xeac>
    2e44:	ldr	r1, [r6, #20]
    2e48:	sub	r2, fp, #40	; 0x28
    2e4c:	mov	r0, r5
    2e50:	bl	5274 <eval_float>
    2e54:	cmp	r0, #0
    2e58:	bne	35b4 <eval_boolean+0xeac>
    2e5c:	vldr	d16, [fp, #-40]	; 0xffffffd8
    2e60:	vldr	d17, [sp, #16]
    2e64:	mov	r0, #0
    2e68:	vcmpe.f64	d17, d16
    2e6c:	vmrs	APSR_nzcv, fpscr
    2e70:	movwmi	r0, #1
    2e74:	b	30f4 <eval_boolean+0x9ec>
    2e78:	ldr	r1, [r6, #16]
    2e7c:	sub	r0, fp, #68	; 0x44
    2e80:	sub	r2, fp, #60	; 0x3c
    2e84:	sub	r3, fp, #64	; 0x40
    2e88:	str	r0, [sp]
    2e8c:	mov	r0, r5
    2e90:	bl	60dc <eval_string>
    2e94:	cmp	r0, #0
    2e98:	bne	35b4 <eval_boolean+0xeac>
    2e9c:	ldr	r1, [r6, #20]
    2ea0:	sub	r0, fp, #56	; 0x38
    2ea4:	sub	r2, fp, #48	; 0x30
    2ea8:	sub	r3, fp, #52	; 0x34
    2eac:	str	r0, [sp]
    2eb0:	mov	r0, r5
    2eb4:	bl	60dc <eval_string>
    2eb8:	cmp	r0, #0
    2ebc:	beq	32ec <eval_boolean+0xbe4>
    2ec0:	ldr	r0, [fp, #-68]	; 0xffffffbc
    2ec4:	cmp	r0, #0
    2ec8:	bne	35b0 <eval_boolean+0xea8>
    2ecc:	b	35b4 <eval_boolean+0xeac>
    2ed0:	ldr	r1, [r6, #16]
    2ed4:	mov	r0, r5
    2ed8:	mov	r2, r8
    2edc:	bl	2708 <eval_boolean>
    2ee0:	mvn	r7, #0
    2ee4:	cmp	r0, #0
    2ee8:	bne	35b8 <eval_boolean+0xeb0>
    2eec:	ldr	r0, [r8]
    2ef0:	mov	r7, #0
    2ef4:	cmp	r0, #0
    2ef8:	bne	35b8 <eval_boolean+0xeb0>
    2efc:	ldr	r1, [r6, #20]
    2f00:	mov	r0, r5
    2f04:	mov	r2, r8
    2f08:	bl	2708 <eval_boolean>
    2f0c:	cmp	r0, #0
    2f10:	mvn	r7, #0
    2f14:	moveq	r7, #0
    2f18:	b	35b8 <eval_boolean+0xeb0>
    2f1c:	sub	r1, fp, #40	; 0x28
    2f20:	mov	r0, r4
    2f24:	bl	0 <coda_cursor_get_type_class>
    2f28:	mvn	r7, #0
    2f2c:	cmp	r0, #0
    2f30:	bne	35b8 <eval_boolean+0xeb0>
    2f34:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2f38:	cmp	r0, #6
    2f3c:	bne	32c8 <eval_boolean+0xbc0>
    2f40:	sub	r1, fp, #44	; 0x2c
    2f44:	mov	r0, r4
    2f48:	bl	0 <coda_cursor_get_special_type>
    2f4c:	mvn	r7, #0
    2f50:	cmp	r0, #0
    2f54:	bne	35b8 <eval_boolean+0xeb0>
    2f58:	ldr	r0, [fp, #-44]	; 0xffffffd4
    2f5c:	cmp	r0, #0
    2f60:	bne	32c8 <eval_boolean+0xbc0>
    2f64:	mov	r7, #0
    2f68:	b	2a88 <eval_boolean+0x380>
    2f6c:	ldr	r1, [r6, #12]
    2f70:	ldr	r0, [r0]
    2f74:	add	r2, sp, #16
    2f78:	bl	0 <coda_product_variable_get_size>
    2f7c:	mvn	r7, #0
    2f80:	cmp	r0, #0
    2f84:	bne	35b8 <eval_boolean+0xeb0>
    2f88:	ldr	r0, [r6, #12]
    2f8c:	str	r0, [r5, #560]	; 0x230
    2f90:	ldr	r0, [sp, #16]
    2f94:	cmp	r0, #1
    2f98:	blt	2fe4 <eval_boolean+0x8dc>
    2f9c:	add	r7, r5, #552	; 0x228
    2fa0:	mov	r9, #0
    2fa4:	sub	sl, fp, #40	; 0x28
    2fa8:	mov	r4, #0
    2fac:	stm	r7, {r4, r9}
    2fb0:	mov	r0, r5
    2fb4:	mov	r2, sl
    2fb8:	ldr	r1, [r6, #16]
    2fbc:	bl	2708 <eval_boolean>
    2fc0:	cmp	r0, #0
    2fc4:	bne	35b4 <eval_boolean+0xeac>
    2fc8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2fcc:	cmp	r0, #0
    2fd0:	bne	36ec <eval_boolean+0xfe4>
    2fd4:	ldr	r0, [sp, #16]
    2fd8:	add	r4, r4, #1
    2fdc:	cmp	r4, r0
    2fe0:	blt	2fac <eval_boolean+0x8a4>
    2fe4:	mov	r0, #0
    2fe8:	mov	r7, #0
    2fec:	str	r0, [r8]
    2ff0:	str	r0, [r5, #560]	; 0x230
    2ff4:	b	35b8 <eval_boolean+0xeb0>
    2ff8:	cmp	r0, #3
    2ffc:	beq	331c <eval_boolean+0xc14>
    3000:	cmp	r0, #1
    3004:	bne	3a58 <eval_boolean+0x1350>
    3008:	add	r2, sp, #16
    300c:	mov	r0, r5
    3010:	bl	3bd0 <eval_integer>
    3014:	cmp	r0, #0
    3018:	bne	35b4 <eval_boolean+0xeac>
    301c:	ldr	r1, [r6, #20]
    3020:	sub	r2, fp, #40	; 0x28
    3024:	mov	r0, r5
    3028:	bl	3bd0 <eval_integer>
    302c:	cmp	r0, #0
    3030:	bne	35b4 <eval_boolean+0xeac>
    3034:	ldr	r1, [sp, #16]
    3038:	ldr	r2, [sp, #20]
    303c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3040:	ldr	r7, [fp, #-36]	; 0xffffffdc
    3044:	b	3204 <eval_boolean+0xafc>
    3048:	cmp	r0, #3
    304c:	beq	3394 <eval_boolean+0xc8c>
    3050:	cmp	r0, #1
    3054:	bne	3a70 <eval_boolean+0x1368>
    3058:	add	r2, sp, #16
    305c:	mov	r0, r5
    3060:	bl	3bd0 <eval_integer>
    3064:	cmp	r0, #0
    3068:	bne	35b4 <eval_boolean+0xeac>
    306c:	ldr	r1, [r6, #20]
    3070:	sub	r2, fp, #40	; 0x28
    3074:	mov	r0, r5
    3078:	bl	3bd0 <eval_integer>
    307c:	cmp	r0, #0
    3080:	bne	35b4 <eval_boolean+0xeac>
    3084:	ldr	r1, [sp, #16]
    3088:	ldr	r2, [sp, #20]
    308c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3090:	ldr	r7, [fp, #-36]	; 0xffffffdc
    3094:	b	30e4 <eval_boolean+0x9dc>
    3098:	cmp	r0, #3
    309c:	beq	340c <eval_boolean+0xd04>
    30a0:	cmp	r0, #1
    30a4:	bne	3a84 <eval_boolean+0x137c>
    30a8:	add	r2, sp, #16
    30ac:	mov	r0, r5
    30b0:	bl	3bd0 <eval_integer>
    30b4:	cmp	r0, #0
    30b8:	bne	35b4 <eval_boolean+0xeac>
    30bc:	ldr	r1, [r6, #20]
    30c0:	sub	r2, fp, #40	; 0x28
    30c4:	mov	r0, r5
    30c8:	bl	3bd0 <eval_integer>
    30cc:	cmp	r0, #0
    30d0:	bne	35b4 <eval_boolean+0xeac>
    30d4:	ldr	r1, [fp, #-40]	; 0xffffffd8
    30d8:	ldr	r2, [fp, #-36]	; 0xffffffdc
    30dc:	ldr	r3, [sp, #16]
    30e0:	ldr	r7, [sp, #20]
    30e4:	mov	r0, #0
    30e8:	subs	r1, r3, r1
    30ec:	sbcs	r1, r7, r2
    30f0:	movwge	r0, #1
    30f4:	str	r0, [r8]
    30f8:	mov	r7, #0
    30fc:	b	35b8 <eval_boolean+0xeb0>
    3100:	cmp	r0, #3
    3104:	beq	3484 <eval_boolean+0xd7c>
    3108:	cmp	r0, #1
    310c:	bne	3a98 <eval_boolean+0x1390>
    3110:	add	r2, sp, #16
    3114:	mov	r0, r5
    3118:	bl	3bd0 <eval_integer>
    311c:	cmp	r0, #0
    3120:	bne	35b4 <eval_boolean+0xeac>
    3124:	ldr	r1, [r6, #20]
    3128:	sub	r2, fp, #40	; 0x28
    312c:	mov	r0, r5
    3130:	bl	3bd0 <eval_integer>
    3134:	cmp	r0, #0
    3138:	bne	35b4 <eval_boolean+0xeac>
    313c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3140:	ldr	r2, [sp, #16]
    3144:	ldr	r1, [fp, #-36]	; 0xffffffdc
    3148:	ldr	r3, [sp, #20]
    314c:	eor	r1, r3, r1
    3150:	eor	r0, r2, r0
    3154:	orr	r0, r0, r1
    3158:	b	2db4 <eval_boolean+0x6ac>
    315c:	cmp	r0, #3
    3160:	beq	34f8 <eval_boolean+0xdf0>
    3164:	cmp	r0, #1
    3168:	bne	3aac <eval_boolean+0x13a4>
    316c:	add	r2, sp, #16
    3170:	mov	r0, r5
    3174:	bl	3bd0 <eval_integer>
    3178:	cmp	r0, #0
    317c:	bne	35b4 <eval_boolean+0xeac>
    3180:	ldr	r1, [r6, #20]
    3184:	sub	r2, fp, #40	; 0x28
    3188:	mov	r0, r5
    318c:	bl	3bd0 <eval_integer>
    3190:	cmp	r0, #0
    3194:	bne	35b4 <eval_boolean+0xeac>
    3198:	ldr	r0, [fp, #-40]	; 0xffffffd8
    319c:	ldr	r2, [sp, #16]
    31a0:	ldr	r1, [fp, #-36]	; 0xffffffdc
    31a4:	ldr	r3, [sp, #20]
    31a8:	eor	r1, r3, r1
    31ac:	eor	r0, r2, r0
    31b0:	orrs	r0, r0, r1
    31b4:	b	2c8c <eval_boolean+0x584>
    31b8:	cmp	r0, #3
    31bc:	beq	3568 <eval_boolean+0xe60>
    31c0:	cmp	r0, #1
    31c4:	bne	3ac0 <eval_boolean+0x13b8>
    31c8:	add	r2, sp, #16
    31cc:	mov	r0, r5
    31d0:	bl	3bd0 <eval_integer>
    31d4:	cmp	r0, #0
    31d8:	bne	35b4 <eval_boolean+0xeac>
    31dc:	ldr	r1, [r6, #20]
    31e0:	sub	r2, fp, #40	; 0x28
    31e4:	mov	r0, r5
    31e8:	bl	3bd0 <eval_integer>
    31ec:	cmp	r0, #0
    31f0:	bne	35b4 <eval_boolean+0xeac>
    31f4:	ldr	r1, [fp, #-40]	; 0xffffffd8
    31f8:	ldr	r2, [fp, #-36]	; 0xffffffdc
    31fc:	ldr	r3, [sp, #16]
    3200:	ldr	r7, [sp, #20]
    3204:	mov	r0, #0
    3208:	subs	r1, r3, r1
    320c:	sbcs	r1, r7, r2
    3210:	movwlt	r0, #1
    3214:	b	30f4 <eval_boolean+0x9ec>
    3218:	add	sl, sl, #1
    321c:	cmp	sl, r0
    3220:	bge	35c4 <eval_boolean+0xebc>
    3224:	ldr	r1, [r6, #20]
    3228:	mov	r0, r5
    322c:	mov	r2, r9
    3230:	bl	2708 <eval_boolean>
    3234:	cmp	r0, #0
    3238:	bne	35b8 <eval_boolean+0xeb0>
    323c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3240:	cmp	r0, #0
    3244:	bne	3880 <eval_boolean+0x1178>
    3248:	ldr	r0, [fp, #-40]	; 0xffffffd8
    324c:	sub	r1, r0, #1
    3250:	cmp	sl, r1
    3254:	bge	3218 <eval_boolean+0xb10>
    3258:	mov	r0, r4
    325c:	bl	0 <coda_cursor_goto_next_array_element>
    3260:	cmp	r0, #0
    3264:	bne	35b8 <eval_boolean+0xeb0>
    3268:	ldr	r0, [fp, #-40]	; 0xffffffd8
    326c:	b	3218 <eval_boolean+0xb10>
    3270:	add	sl, sl, #1
    3274:	cmp	sl, r0
    3278:	bge	32c8 <eval_boolean+0xbc0>
    327c:	ldr	r1, [r6, #20]
    3280:	mov	r0, r5
    3284:	mov	r2, r9
    3288:	bl	2708 <eval_boolean>
    328c:	cmp	r0, #0
    3290:	bne	35b8 <eval_boolean+0xeb0>
    3294:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3298:	cmp	r0, #0
    329c:	beq	3888 <eval_boolean+0x1180>
    32a0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    32a4:	sub	r1, r0, #1
    32a8:	cmp	sl, r1
    32ac:	bge	3270 <eval_boolean+0xb68>
    32b0:	mov	r0, r4
    32b4:	bl	0 <coda_cursor_goto_next_array_element>
    32b8:	cmp	r0, #0
    32bc:	bne	35b8 <eval_boolean+0xeb0>
    32c0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    32c4:	b	3270 <eval_boolean+0xb68>
    32c8:	mov	r0, #1
    32cc:	b	35c8 <eval_boolean+0xec0>
    32d0:	ldr	r1, [r6, #24]
    32d4:	mov	r0, r5
    32d8:	mov	r2, r8
    32dc:	bl	2708 <eval_boolean>
    32e0:	cmp	r0, #0
    32e4:	bne	35b4 <eval_boolean+0xeac>
    32e8:	b	384c <eval_boolean+0x1144>
    32ec:	ldr	r0, [fp, #-64]	; 0xffffffc0
    32f0:	cmp	r0, #1
    32f4:	blt	35e4 <eval_boolean+0xedc>
    32f8:	ldr	r1, [fp, #-60]	; 0xffffffc4
    32fc:	mov	r2, #0
    3300:	add	r0, r1, r0
    3304:	ldr	r1, [fp, #-68]	; 0xffffffbc
    3308:	strb	r2, [r1, r0]
    330c:	ldr	r0, [fp, #-60]	; 0xffffffc4
    3310:	ldr	r1, [fp, #-68]	; 0xffffffbc
    3314:	add	r0, r1, r0
    3318:	b	35ec <eval_boolean+0xee4>
    331c:	sub	r0, fp, #52	; 0x34
    3320:	add	r2, sp, #16
    3324:	sub	r3, fp, #44	; 0x2c
    3328:	str	r0, [sp]
    332c:	mov	r0, r5
    3330:	bl	60dc <eval_string>
    3334:	cmp	r0, #0
    3338:	bne	35b4 <eval_boolean+0xeac>
    333c:	ldr	r1, [r6, #20]
    3340:	sub	r0, fp, #56	; 0x38
    3344:	sub	r2, fp, #40	; 0x28
    3348:	sub	r3, fp, #48	; 0x30
    334c:	str	r0, [sp]
    3350:	mov	r0, r5
    3354:	bl	60dc <eval_string>
    3358:	cmp	r0, #0
    335c:	bne	35ac <eval_boolean+0xea4>
    3360:	sub	lr, fp, #52	; 0x34
    3364:	ldr	ip, [fp, #-56]	; 0xffffffc8
    3368:	ldr	r9, [sp, #16]
    336c:	mov	r7, #0
    3370:	ldm	lr, {r0, r1, r2, lr}
    3374:	cmp	r2, #1
    3378:	cmpge	r1, #1
    337c:	bge	3894 <eval_boolean+0x118c>
    3380:	cmp	r7, r2
    3384:	bne	377c <eval_boolean+0x1074>
    3388:	subs	r3, r7, r1
    338c:	mvnne	r3, #0
    3390:	b	37a4 <eval_boolean+0x109c>
    3394:	sub	r0, fp, #52	; 0x34
    3398:	add	r2, sp, #16
    339c:	sub	r3, fp, #44	; 0x2c
    33a0:	str	r0, [sp]
    33a4:	mov	r0, r5
    33a8:	bl	60dc <eval_string>
    33ac:	cmp	r0, #0
    33b0:	bne	35b4 <eval_boolean+0xeac>
    33b4:	ldr	r1, [r6, #20]
    33b8:	sub	r0, fp, #56	; 0x38
    33bc:	sub	r2, fp, #40	; 0x28
    33c0:	sub	r3, fp, #48	; 0x30
    33c4:	str	r0, [sp]
    33c8:	mov	r0, r5
    33cc:	bl	60dc <eval_string>
    33d0:	cmp	r0, #0
    33d4:	bne	35ac <eval_boolean+0xea4>
    33d8:	sub	lr, fp, #52	; 0x34
    33dc:	ldr	ip, [fp, #-56]	; 0xffffffc8
    33e0:	ldr	r9, [sp, #16]
    33e4:	mov	r7, #0
    33e8:	ldm	lr, {r0, r1, r2, lr}
    33ec:	cmp	r2, #1
    33f0:	cmpge	r1, #1
    33f4:	bge	38c4 <eval_boolean+0x11bc>
    33f8:	cmp	r7, r2
    33fc:	bne	37b4 <eval_boolean+0x10ac>
    3400:	subs	r3, r7, r1
    3404:	mvnne	r3, #0
    3408:	b	37dc <eval_boolean+0x10d4>
    340c:	sub	r0, fp, #52	; 0x34
    3410:	add	r2, sp, #16
    3414:	sub	r3, fp, #44	; 0x2c
    3418:	str	r0, [sp]
    341c:	mov	r0, r5
    3420:	bl	60dc <eval_string>
    3424:	cmp	r0, #0
    3428:	bne	35b4 <eval_boolean+0xeac>
    342c:	ldr	r1, [r6, #20]
    3430:	sub	r0, fp, #56	; 0x38
    3434:	sub	r2, fp, #40	; 0x28
    3438:	sub	r3, fp, #48	; 0x30
    343c:	str	r0, [sp]
    3440:	mov	r0, r5
    3444:	bl	60dc <eval_string>
    3448:	cmp	r0, #0
    344c:	bne	35ac <eval_boolean+0xea4>
    3450:	sub	lr, fp, #52	; 0x34
    3454:	ldr	ip, [fp, #-56]	; 0xffffffc8
    3458:	ldr	r9, [sp, #16]
    345c:	mov	r7, #0
    3460:	ldm	lr, {r0, r1, r2, lr}
    3464:	cmp	r2, #1
    3468:	cmpge	r1, #1
    346c:	bge	38f4 <eval_boolean+0x11ec>
    3470:	cmp	r7, r2
    3474:	bne	37f8 <eval_boolean+0x10f0>
    3478:	subs	r3, r7, r1
    347c:	mvnne	r3, #0
    3480:	b	3820 <eval_boolean+0x1118>
    3484:	sub	r0, fp, #52	; 0x34
    3488:	add	r2, sp, #16
    348c:	sub	r3, fp, #44	; 0x2c
    3490:	str	r0, [sp]
    3494:	mov	r0, r5
    3498:	bl	60dc <eval_string>
    349c:	cmp	r0, #0
    34a0:	bne	35b4 <eval_boolean+0xeac>
    34a4:	ldr	r1, [r6, #20]
    34a8:	sub	r0, fp, #56	; 0x38
    34ac:	sub	r2, fp, #40	; 0x28
    34b0:	sub	r3, fp, #48	; 0x30
    34b4:	str	r0, [sp]
    34b8:	mov	r0, r5
    34bc:	bl	60dc <eval_string>
    34c0:	cmp	r0, #0
    34c4:	bne	35ac <eval_boolean+0xea4>
    34c8:	sub	r2, fp, #52	; 0x34
    34cc:	mov	r3, #0
    34d0:	ldm	r2, {r0, r1, r2}
    34d4:	cmp	r2, #1
    34d8:	cmpge	r1, #1
    34dc:	bge	3924 <eval_boolean+0x121c>
    34e0:	eor	r7, r3, r1
    34e4:	eor	r3, r3, r2
    34e8:	orr	r3, r3, r7
    34ec:	clz	r3, r3
    34f0:	lsr	r3, r3, #5
    34f4:	b	3828 <eval_boolean+0x1120>
    34f8:	sub	r0, fp, #52	; 0x34
    34fc:	add	r2, sp, #16
    3500:	sub	r3, fp, #44	; 0x2c
    3504:	str	r0, [sp]
    3508:	mov	r0, r5
    350c:	bl	60dc <eval_string>
    3510:	cmp	r0, #0
    3514:	bne	35b4 <eval_boolean+0xeac>
    3518:	ldr	r1, [r6, #20]
    351c:	sub	r0, fp, #56	; 0x38
    3520:	sub	r2, fp, #40	; 0x28
    3524:	sub	r3, fp, #48	; 0x30
    3528:	str	r0, [sp]
    352c:	mov	r0, r5
    3530:	bl	60dc <eval_string>
    3534:	cmp	r0, #0
    3538:	bne	35ac <eval_boolean+0xea4>
    353c:	sub	r2, fp, #52	; 0x34
    3540:	mov	r3, #0
    3544:	ldm	r2, {r0, r1, r2}
    3548:	cmp	r2, #1
    354c:	cmpge	r1, #1
    3550:	bge	3960 <eval_boolean+0x1258>
    3554:	eor	r7, r3, r2
    3558:	eor	r3, r3, r1
    355c:	orrs	r3, r3, r7
    3560:	movwne	r3, #1
    3564:	b	3828 <eval_boolean+0x1120>
    3568:	sub	r0, fp, #52	; 0x34
    356c:	add	r2, sp, #16
    3570:	sub	r3, fp, #44	; 0x2c
    3574:	str	r0, [sp]
    3578:	mov	r0, r5
    357c:	bl	60dc <eval_string>
    3580:	cmp	r0, #0
    3584:	bne	35b4 <eval_boolean+0xeac>
    3588:	ldr	r1, [r6, #20]
    358c:	sub	r0, fp, #56	; 0x38
    3590:	sub	r2, fp, #40	; 0x28
    3594:	sub	r3, fp, #48	; 0x30
    3598:	str	r0, [sp]
    359c:	mov	r0, r5
    35a0:	bl	60dc <eval_string>
    35a4:	cmp	r0, #0
    35a8:	beq	3700 <eval_boolean+0xff8>
    35ac:	ldr	r0, [fp, #-52]	; 0xffffffcc
    35b0:	bl	0 <free>
    35b4:	mvn	r7, #0
    35b8:	mov	r0, r7
    35bc:	sub	sp, fp, #28
    35c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    35c4:	mov	r0, #0
    35c8:	str	r0, [r8]
    35cc:	add	r1, sp, #16
    35d0:	mov	r0, r4
    35d4:	mov	r2, #520	; 0x208
    35d8:	bl	0 <memcpy>
    35dc:	mov	r7, #0
    35e0:	b	35b8 <eval_boolean+0xeb0>
    35e4:	movw	r0, #0
    35e8:	movt	r0, #0
    35ec:	mov	r1, #0
    35f0:	sub	r2, fp, #40	; 0x28
    35f4:	sub	r3, fp, #44	; 0x2c
    35f8:	str	r1, [sp]
    35fc:	mov	r1, #36	; 0x24
    3600:	bl	0 <coda_pcre_compile>
    3604:	mov	r4, r0
    3608:	ldr	r0, [fp, #-68]	; 0xffffffbc
    360c:	cmp	r0, #0
    3610:	beq	3618 <eval_boolean+0xf10>
    3614:	bl	0 <free>
    3618:	cmp	r4, #0
    361c:	beq	36b4 <eval_boolean+0xfac>
    3620:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3624:	cmp	r0, #0
    3628:	bne	3644 <eval_boolean+0xf3c>
    362c:	movw	r0, #0
    3630:	movt	r0, #0
    3634:	bl	0 <strdup>
    3638:	cmp	r0, #0
    363c:	str	r0, [fp, #-56]	; 0xffffffc8
    3640:	beq	3744 <eval_boolean+0x103c>
    3644:	ldr	r1, [fp, #-48]	; 0xffffffd0
    3648:	ldr	r3, [fp, #-52]	; 0xffffffcc
    364c:	mov	r6, #0
    3650:	mov	r2, #48	; 0x30
    3654:	add	r7, sp, #16
    3658:	str	r6, [sp]
    365c:	stmib	sp, {r6, r7}
    3660:	str	r2, [sp, #12]
    3664:	add	r2, r0, r1
    3668:	mov	r0, r4
    366c:	mov	r1, #0
    3670:	bl	0 <coda_pcre_exec>
    3674:	mov	r5, r0
    3678:	ldr	r0, [fp, #-56]	; 0xffffffc8
    367c:	bl	0 <free>
    3680:	movw	r0, #0
    3684:	movt	r0, #0
    3688:	ldr	r1, [r0]
    368c:	mov	r0, r4
    3690:	blx	r1
    3694:	cmn	r5, #2
    3698:	bgt	36dc <eval_boolean+0xfd4>
    369c:	movw	r1, #0
    36a0:	mvn	r0, #400	; 0x190
    36a4:	mov	r2, r5
    36a8:	movt	r1, #0
    36ac:	bl	0 <coda_set_error>
    36b0:	b	35b4 <eval_boolean+0xeac>
    36b4:	ldr	r3, [fp, #-44]	; 0xffffffd4
    36b8:	ldr	r2, [fp, #-40]	; 0xffffffd8
    36bc:	movw	r1, #0
    36c0:	mvn	r0, #400	; 0x190
    36c4:	movt	r1, #0
    36c8:	bl	0 <coda_set_error>
    36cc:	ldr	r0, [fp, #-56]	; 0xffffffc8
    36d0:	cmp	r0, #0
    36d4:	bne	35b0 <eval_boolean+0xea8>
    36d8:	b	35b4 <eval_boolean+0xeac>
    36dc:	cmp	r5, #0
    36e0:	beq	3734 <eval_boolean+0x102c>
    36e4:	mov	r0, #0
    36e8:	b	29d4 <eval_boolean+0x2cc>
    36ec:	mov	r0, #1
    36f0:	mov	r7, #0
    36f4:	str	r0, [r8]
    36f8:	str	r7, [r5, #560]	; 0x230
    36fc:	b	35b8 <eval_boolean+0xeb0>
    3700:	sub	lr, fp, #52	; 0x34
    3704:	ldr	ip, [fp, #-56]	; 0xffffffc8
    3708:	ldr	r9, [sp, #16]
    370c:	mov	r7, #0
    3710:	ldm	lr, {r0, r1, r2, lr}
    3714:	cmp	r2, #1
    3718:	cmpge	r1, #1
    371c:	bge	399c <eval_boolean+0x1294>
    3720:	cmp	r7, r2
    3724:	bne	3854 <eval_boolean+0x114c>
    3728:	subs	r3, r7, r1
    372c:	mvnne	r3, #0
    3730:	b	3824 <eval_boolean+0x111c>
    3734:	movw	r1, #0
    3738:	mvn	r0, #400	; 0x190
    373c:	movt	r1, #0
    3740:	b	2d3c <eval_boolean+0x634>
    3744:	movw	r1, #0
    3748:	movw	r2, #0
    374c:	mvn	r0, #0
    3750:	mov	r3, #1120	; 0x460
    3754:	mvn	r7, #0
    3758:	movt	r1, #0
    375c:	movt	r2, #0
    3760:	bl	0 <coda_set_error>
    3764:	movw	r0, #0
    3768:	movt	r0, #0
    376c:	ldr	r1, [r0]
    3770:	mov	r0, r4
    3774:	blx	r1
    3778:	b	35b8 <eval_boolean+0xeb0>
    377c:	mov	r3, #1
    3780:	cmp	r7, r1
    3784:	beq	37a4 <eval_boolean+0x109c>
    3788:	add	r3, r7, lr
    378c:	ldrb	r6, [ip, r3]
    3790:	add	r3, r7, r9
    3794:	ldrb	r7, [r0, r3]
    3798:	mvn	r3, #0
    379c:	cmp	r7, r6
    37a0:	movwhi	r3, #1
    37a4:	cmp	r3, #0
    37a8:	mov	r7, #0
    37ac:	movwgt	r7, #1
    37b0:	b	37e8 <eval_boolean+0x10e0>
    37b4:	mov	r3, #1
    37b8:	cmp	r7, r1
    37bc:	beq	37dc <eval_boolean+0x10d4>
    37c0:	add	r3, r7, lr
    37c4:	ldrb	r6, [ip, r3]
    37c8:	add	r3, r7, r9
    37cc:	ldrb	r7, [r0, r3]
    37d0:	mvn	r3, #0
    37d4:	cmp	r7, r6
    37d8:	movwhi	r3, #1
    37dc:	cmp	r3, #1
    37e0:	mov	r7, #0
    37e4:	movwlt	r7, #1
    37e8:	str	r7, [r8]
    37ec:	cmp	r2, #1
    37f0:	bge	3834 <eval_boolean+0x112c>
    37f4:	b	383c <eval_boolean+0x1134>
    37f8:	mov	r3, #1
    37fc:	cmp	r7, r1
    3800:	beq	3820 <eval_boolean+0x1118>
    3804:	add	r3, r7, lr
    3808:	ldrb	r6, [ip, r3]
    380c:	add	r3, r7, r9
    3810:	ldrb	r7, [r0, r3]
    3814:	mvn	r3, #0
    3818:	cmp	r7, r6
    381c:	movwhi	r3, #1
    3820:	mvn	r3, r3
    3824:	lsr	r3, r3, #31
    3828:	str	r3, [r8]
    382c:	cmp	r2, #1
    3830:	blt	383c <eval_boolean+0x1134>
    3834:	bl	0 <free>
    3838:	ldr	r1, [fp, #-48]	; 0xffffffd0
    383c:	cmp	r1, #1
    3840:	blt	384c <eval_boolean+0x1144>
    3844:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3848:	bl	0 <free>
    384c:	mov	r7, #0
    3850:	b	35b8 <eval_boolean+0xeb0>
    3854:	mov	r3, #1
    3858:	cmp	r7, r1
    385c:	beq	3824 <eval_boolean+0x111c>
    3860:	add	r3, r7, lr
    3864:	ldrb	r6, [ip, r3]
    3868:	add	r3, r7, r9
    386c:	ldrb	r7, [r0, r3]
    3870:	mvn	r3, #0
    3874:	cmp	r7, r6
    3878:	movwhi	r3, #1
    387c:	b	3824 <eval_boolean+0x111c>
    3880:	mov	r0, #1
    3884:	b	30f4 <eval_boolean+0x9ec>
    3888:	mov	r7, #0
    388c:	str	r7, [r8]
    3890:	b	35b8 <eval_boolean+0xeb0>
    3894:	add	r4, r0, r9
    3898:	add	r3, ip, lr
    389c:	mov	r7, #0
    38a0:	ldrb	r6, [r3, r7]
    38a4:	ldrb	r5, [r4, r7]
    38a8:	cmp	r5, r6
    38ac:	bne	3380 <eval_boolean+0xc78>
    38b0:	add	r7, r7, #1
    38b4:	cmp	r7, r2
    38b8:	cmplt	r7, r1
    38bc:	blt	38a0 <eval_boolean+0x1198>
    38c0:	b	3380 <eval_boolean+0xc78>
    38c4:	add	r4, r0, r9
    38c8:	add	r3, ip, lr
    38cc:	mov	r7, #0
    38d0:	ldrb	r6, [r3, r7]
    38d4:	ldrb	r5, [r4, r7]
    38d8:	cmp	r5, r6
    38dc:	bne	33f8 <eval_boolean+0xcf0>
    38e0:	add	r7, r7, #1
    38e4:	cmp	r7, r2
    38e8:	cmplt	r7, r1
    38ec:	blt	38d0 <eval_boolean+0x11c8>
    38f0:	b	33f8 <eval_boolean+0xcf0>
    38f4:	add	r4, r0, r9
    38f8:	add	r3, ip, lr
    38fc:	mov	r7, #0
    3900:	ldrb	r6, [r3, r7]
    3904:	ldrb	r5, [r4, r7]
    3908:	cmp	r5, r6
    390c:	bne	3470 <eval_boolean+0xd68>
    3910:	add	r7, r7, #1
    3914:	cmp	r7, r2
    3918:	cmplt	r7, r1
    391c:	blt	3900 <eval_boolean+0x11f8>
    3920:	b	3470 <eval_boolean+0xd68>
    3924:	ldr	r7, [sp, #16]
    3928:	ldr	r3, [fp, #-56]	; 0xffffffc8
    392c:	ldr	r6, [fp, #-40]	; 0xffffffd8
    3930:	add	r6, r3, r6
    3934:	add	r7, r0, r7
    3938:	mov	r3, #0
    393c:	ldrb	r5, [r6, r3]
    3940:	ldrb	r4, [r7, r3]
    3944:	cmp	r4, r5
    3948:	bne	34e0 <eval_boolean+0xdd8>
    394c:	add	r3, r3, #1
    3950:	cmp	r3, r2
    3954:	cmplt	r3, r1
    3958:	blt	393c <eval_boolean+0x1234>
    395c:	b	34e0 <eval_boolean+0xdd8>
    3960:	ldr	r7, [sp, #16]
    3964:	ldr	r3, [fp, #-56]	; 0xffffffc8
    3968:	ldr	r6, [fp, #-40]	; 0xffffffd8
    396c:	add	r6, r3, r6
    3970:	add	r7, r0, r7
    3974:	mov	r3, #0
    3978:	ldrb	r5, [r6, r3]
    397c:	ldrb	r4, [r7, r3]
    3980:	cmp	r4, r5
    3984:	bne	3554 <eval_boolean+0xe4c>
    3988:	add	r3, r3, #1
    398c:	cmp	r3, r2
    3990:	cmplt	r3, r1
    3994:	blt	3978 <eval_boolean+0x1270>
    3998:	b	3554 <eval_boolean+0xe4c>
    399c:	add	r4, r0, r9
    39a0:	add	r3, ip, lr
    39a4:	mov	r7, #0
    39a8:	ldrb	r6, [r3, r7]
    39ac:	ldrb	r5, [r4, r7]
    39b0:	cmp	r5, r6
    39b4:	bne	3720 <eval_boolean+0x1018>
    39b8:	add	r7, r7, #1
    39bc:	cmp	r7, r2
    39c0:	cmplt	r7, r1
    39c4:	blt	39a8 <eval_boolean+0x12a0>
    39c8:	b	3720 <eval_boolean+0x1018>
    39cc:	movw	r0, #0
    39d0:	movw	r1, #0
    39d4:	movw	r3, #0
    39d8:	movw	r2, #1379	; 0x563
    39dc:	movt	r0, #0
    39e0:	movt	r1, #0
    39e4:	movt	r3, #0
    39e8:	bl	0 <__assert_fail>
    39ec:	movw	r0, #0
    39f0:	movw	r1, #0
    39f4:	movw	r3, #0
    39f8:	movw	r2, #1190	; 0x4a6
    39fc:	b	3a4c <eval_boolean+0x1344>
    3a00:	movw	r0, #0
    3a04:	movw	r1, #0
    3a08:	movw	r3, #0
    3a0c:	movw	r2, #1148	; 0x47c
    3a10:	b	3a4c <eval_boolean+0x1344>
    3a14:	movw	r0, #0
    3a18:	movw	r1, #0
    3a1c:	movw	r3, #0
    3a20:	movw	r2, #1239	; 0x4d7
    3a24:	b	3a4c <eval_boolean+0x1344>
    3a28:	movw	r0, #0
    3a2c:	movw	r1, #0
    3a30:	movw	r3, #0
    3a34:	movw	r2, #1288	; 0x508
    3a38:	b	3a4c <eval_boolean+0x1344>
    3a3c:	movw	r0, #0
    3a40:	movw	r1, #0
    3a44:	movw	r3, #0
    3a48:	movw	r2, #1348	; 0x544
    3a4c:	movt	r0, #0
    3a50:	b	39e0 <eval_boolean+0x12d8>
    3a54:	.word	0x00000ff4
    3a58:	movw	r0, #0
    3a5c:	movw	r1, #0
    3a60:	movw	r3, #0
    3a64:	mov	r2, #792	; 0x318
    3a68:	b	39dc <eval_boolean+0x12d4>
    3a6c:	.word	0x00000fe8
    3a70:	movw	r0, #0
    3a74:	movw	r1, #0
    3a78:	movw	r3, #0
    3a7c:	movw	r2, #978	; 0x3d2
    3a80:	b	39dc <eval_boolean+0x12d4>
    3a84:	movw	r0, #0
    3a88:	movw	r1, #0
    3a8c:	movw	r3, #0
    3a90:	movw	r2, #854	; 0x356
    3a94:	b	39dc <eval_boolean+0x12d4>
    3a98:	movw	r0, #0
    3a9c:	movw	r1, #0
    3aa0:	movw	r3, #0
    3aa4:	mov	r2, #668	; 0x29c
    3aa8:	b	39dc <eval_boolean+0x12d4>
    3aac:	movw	r0, #0
    3ab0:	movw	r1, #0
    3ab4:	movw	r3, #0
    3ab8:	movw	r2, #730	; 0x2da
    3abc:	b	39dc <eval_boolean+0x12d4>
    3ac0:	movw	r0, #0
    3ac4:	movw	r1, #0
    3ac8:	movw	r3, #0
    3acc:	mov	r2, #916	; 0x394
    3ad0:	b	39dc <eval_boolean+0x12d4>

00003ad4 <coda_expression_eval_integer>:
    3ad4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3ad8:	add	fp, sp, #24
    3adc:	sub	sp, sp, #568	; 0x238
    3ae0:	mov	r6, r0
    3ae4:	ldr	r0, [r0, #4]
    3ae8:	cmp	r0, #1
    3aec:	bne	3b1c <coda_expression_eval_integer+0x48>
    3af0:	mov	r5, r2
    3af4:	mov	r4, r1
    3af8:	cmp	r1, #0
    3afc:	beq	3b34 <coda_expression_eval_integer+0x60>
    3b00:	mov	r0, sp
    3b04:	mov	r1, r4
    3b08:	mov	r2, #520	; 0x208
    3b0c:	str	r4, [sp]
    3b10:	add	r0, r0, #8
    3b14:	bl	0 <memcpy>
    3b18:	b	3b48 <coda_expression_eval_integer+0x74>
    3b1c:	movw	r1, #0
    3b20:	movt	r1, #0
    3b24:	mvn	r0, #99	; 0x63
    3b28:	bl	0 <coda_set_error>
    3b2c:	mvn	r5, #0
    3b30:	b	3b90 <coda_expression_eval_integer+0xbc>
    3b34:	ldr	r0, [r6, #8]
    3b38:	cmp	r0, #0
    3b3c:	beq	3bc4 <coda_expression_eval_integer+0xf0>
    3b40:	mov	r0, #0
    3b44:	str	r0, [sp]
    3b48:	vmov.i32	q8, #0	; 0x00000000
    3b4c:	mov	r7, sp
    3b50:	mov	r1, r6
    3b54:	mov	r2, r5
    3b58:	add	r0, r7, #544	; 0x220
    3b5c:	vst1.64	{d16-d17}, [r0]
    3b60:	add	r0, r7, #528	; 0x210
    3b64:	vst1.64	{d16-d17}, [r0]
    3b68:	mov	r0, #0
    3b6c:	str	r0, [sp, #560]	; 0x230
    3b70:	mov	r0, r7
    3b74:	bl	3bd0 <eval_integer>
    3b78:	cmp	r0, #0
    3b7c:	mov	r5, r0
    3b80:	mvnne	r5, #0
    3b84:	cmp	r4, #0
    3b88:	cmpne	r0, #0
    3b8c:	bne	3b9c <coda_expression_eval_integer+0xc8>
    3b90:	mov	r0, r5
    3b94:	sub	sp, fp, #24
    3b98:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3b9c:	add	r6, r7, #8
    3ba0:	mov	r0, r4
    3ba4:	mov	r1, r6
    3ba8:	bl	0 <coda_cursor_compare>
    3bac:	mvn	r5, #0
    3bb0:	cmp	r0, #0
    3bb4:	beq	3b90 <coda_expression_eval_integer+0xbc>
    3bb8:	mov	r0, r6
    3bbc:	bl	0 <coda_cursor_add_to_error_message>
    3bc0:	b	3b90 <coda_expression_eval_integer+0xbc>
    3bc4:	movw	r1, #0
    3bc8:	movt	r1, #0
    3bcc:	b	3b24 <coda_expression_eval_integer+0x50>

00003bd0 <eval_integer>:
    3bd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3bd4:	add	fp, sp, #28
    3bd8:	sub	sp, sp, #580	; 0x244
    3bdc:	mov	r5, r0
    3be0:	ldr	r0, [r1]
    3be4:	cmp	r0, #86	; 0x56
    3be8:	bhi	4f98 <eval_integer+0x13c8>
    3bec:	mov	r6, r1
    3bf0:	add	r1, pc, #4
    3bf4:	mov	sl, r2
    3bf8:	ldr	pc, [r1, r0, lsl #2]
    3bfc:	.word	0x00003d58
    3c00:	.word	0x00004260
    3c04:	.word	0x000041a4
    3c08:	.word	0x0000411c
    3c0c:	.word	0x00004f98
    3c10:	.word	0x000042ac
    3c14:	.word	0x00004f98
    3c18:	.word	0x000044e0
    3c1c:	.word	0x00003f48
    3c20:	.word	0x00004610
    3c24:	.word	0x00004f98
    3c28:	.word	0x00003fd0
    3c2c:	.word	0x00004698
    3c30:	.word	0x000041f0
    3c34:	.word	0x000046e4
    3c38:	.word	0x00003ef4
    3c3c:	.word	0x00004f98
    3c40:	.word	0x00004f98
    3c44:	.word	0x00004f98
    3c48:	.word	0x00004f98
    3c4c:	.word	0x00004258
    3c50:	.word	0x00004f98
    3c54:	.word	0x00004f98
    3c58:	.word	0x00004794
    3c5c:	.word	0x00004074
    3c60:	.word	0x00004f98
    3c64:	.word	0x00004f98
    3c68:	.word	0x00004850
    3c6c:	.word	0x00004f98
    3c70:	.word	0x00004f98
    3c74:	.word	0x00004f98
    3c78:	.word	0x00004f98
    3c7c:	.word	0x00004f98
    3c80:	.word	0x00004f98
    3c84:	.word	0x00004f98
    3c88:	.word	0x00004f98
    3c8c:	.word	0x00004f98
    3c90:	.word	0x00004f98
    3c94:	.word	0x00004f98
    3c98:	.word	0x00004f98
    3c9c:	.word	0x00004f98
    3ca0:	.word	0x00004f98
    3ca4:	.word	0x00004380
    3ca8:	.word	0x00004494
    3cac:	.word	0x00004834
    3cb0:	.word	0x000043ac
    3cb4:	.word	0x00004f98
    3cb8:	.word	0x00004f98
    3cbc:	.word	0x00004f98
    3cc0:	.word	0x00004f98
    3cc4:	.word	0x0000442c
    3cc8:	.word	0x00004f98
    3ccc:	.word	0x00004f98
    3cd0:	.word	0x00004f98
    3cd4:	.word	0x00004f98
    3cd8:	.word	0x00004f98
    3cdc:	.word	0x00004730
    3ce0:	.word	0x00004878
    3ce4:	.word	0x000040c4
    3ce8:	.word	0x00004020
    3cec:	.word	0x00004984
    3cf0:	.word	0x00004f98
    3cf4:	.word	0x00004f98
    3cf8:	.word	0x00003de8
    3cfc:	.word	0x000048dc
    3d00:	.word	0x00004938
    3d04:	.word	0x00004f98
    3d08:	.word	0x00004f98
    3d0c:	.word	0x00004f98
    3d10:	.word	0x00004f98
    3d14:	.word	0x00004570
    3d18:	.word	0x00004f98
    3d1c:	.word	0x00004f98
    3d20:	.word	0x00004f98
    3d24:	.word	0x00004f98
    3d28:	.word	0x00004f98
    3d2c:	.word	0x00004f98
    3d30:	.word	0x00004f98
    3d34:	.word	0x00004334
    3d38:	.word	0x00004f98
    3d3c:	.word	0x00004f98
    3d40:	.word	0x00004594
    3d44:	.word	0x00004f98
    3d48:	.word	0x00003ec4
    3d4c:	.word	0x00004f98
    3d50:	.word	0x00003e5c
    3d54:	.word	0x00003d94
    3d58:	ldr	r1, [r6, #16]
    3d5c:	mov	r0, r5
    3d60:	mov	r2, sl
    3d64:	bl	3bd0 <eval_integer>
    3d68:	mvn	r9, #0
    3d6c:	cmp	r0, #0
    3d70:	bne	4f58 <eval_integer+0x1388>
    3d74:	ldrd	r0, [sl]
    3d78:	rsbs	r2, r0, #0
    3d7c:	rsc	r3, r1, #0
    3d80:	cmp	r1, #0
    3d84:	movpl	r2, r0
    3d88:	movpl	r3, r1
    3d8c:	strd	r2, [sl]
    3d90:	b	4f54 <eval_integer+0x1384>
    3d94:	ldr	r0, [r6, #12]
    3d98:	ldr	r1, [r6, #16]
    3d9c:	ldrb	r0, [r0]
    3da0:	add	r7, r5, r0, lsl #3
    3da4:	mov	r0, r5
    3da8:	ldr	r8, [r7, #-312]!	; 0xfffffec8
    3dac:	ldr	r4, [r7, #4]
    3db0:	mov	r2, r7
    3db4:	bl	3bd0 <eval_integer>
    3db8:	mvn	r9, #0
    3dbc:	cmp	r0, #0
    3dc0:	bne	4f58 <eval_integer+0x1388>
    3dc4:	ldr	r1, [r6, #20]
    3dc8:	mov	r0, r5
    3dcc:	mov	r2, sl
    3dd0:	bl	3bd0 <eval_integer>
    3dd4:	cmp	r0, #0
    3dd8:	bne	4f58 <eval_integer+0x1388>
    3ddc:	str	r8, [r7]
    3de0:	str	r4, [r7, #4]
    3de4:	b	4f54 <eval_integer+0x1384>
    3de8:	ldr	r0, [r5]
    3dec:	cmp	r0, #0
    3df0:	beq	4fb0 <eval_integer+0x13e0>
    3df4:	add	r7, r5, #8
    3df8:	add	r0, sp, #56	; 0x38
    3dfc:	mov	r2, #520	; 0x208
    3e00:	mov	r1, r7
    3e04:	bl	0 <memcpy>
    3e08:	ldr	r1, [r6, #16]
    3e0c:	mov	r0, r5
    3e10:	bl	7afc <eval_cursor>
    3e14:	cmp	r0, #0
    3e18:	bne	4c74 <eval_integer+0x10a4>
    3e1c:	add	r1, sp, #24
    3e20:	mov	r0, r7
    3e24:	bl	0 <coda_cursor_get_type>
    3e28:	cmp	r0, #0
    3e2c:	bne	4c74 <eval_integer+0x10a4>
    3e30:	ldr	r0, [sp, #24]
    3e34:	add	r1, sp, #8
    3e38:	bl	0 <coda_type_get_array_num_dims>
    3e3c:	cmp	r0, #0
    3e40:	bne	4c74 <eval_integer+0x10a4>
    3e44:	add	r1, sp, #56	; 0x38
    3e48:	mov	r0, r7
    3e4c:	mov	r2, #520	; 0x208
    3e50:	bl	0 <memcpy>
    3e54:	ldr	r0, [sp, #8]
    3e58:	b	4af8 <eval_integer+0xf28>
    3e5c:	mov	r0, #0
    3e60:	str	r0, [sp, #60]	; 0x3c
    3e64:	str	r0, [sp, #56]	; 0x38
    3e68:	ldr	r4, [r5]
    3e6c:	cmp	r4, #0
    3e70:	beq	4fc4 <eval_integer+0x13f4>
    3e74:	ldr	r7, [r6, #16]
    3e78:	ldr	r1, [r5, #560]	; 0x230
    3e7c:	cmp	r7, #0
    3e80:	beq	49f0 <eval_integer+0xe20>
    3e84:	cmp	r1, #0
    3e88:	beq	3ea0 <eval_integer+0x2d0>
    3e8c:	ldr	r8, [r6, #12]
    3e90:	mov	r0, r8
    3e94:	bl	0 <strcmp>
    3e98:	cmp	r0, #0
    3e9c:	beq	4c40 <eval_integer+0x1070>
    3ea0:	add	r2, sp, #56	; 0x38
    3ea4:	mov	r0, r5
    3ea8:	mov	r1, r7
    3eac:	bl	3bd0 <eval_integer>
    3eb0:	cmp	r0, #0
    3eb4:	bne	4c74 <eval_integer+0x10a4>
    3eb8:	ldr	r4, [r5]
    3ebc:	ldr	r7, [sp, #56]	; 0x38
    3ec0:	b	4a24 <eval_integer+0xe54>
    3ec4:	ldr	r0, [r5]
    3ec8:	cmp	r0, #0
    3ecc:	beq	4fd8 <eval_integer+0x1408>
    3ed0:	ldr	r1, [r5, #560]	; 0x230
    3ed4:	cmp	r1, #0
    3ed8:	beq	4a4c <eval_integer+0xe7c>
    3edc:	movw	r1, #0
    3ee0:	movt	r1, #0
    3ee4:	mvn	r0, #400	; 0x190
    3ee8:	bl	0 <coda_set_error>
    3eec:	mvn	r9, #0
    3ef0:	b	4f58 <eval_integer+0x1388>
    3ef4:	ldr	r0, [r5]
    3ef8:	cmp	r0, #0
    3efc:	beq	4fec <eval_integer+0x141c>
    3f00:	add	r7, r5, #8
    3f04:	add	r0, sp, #56	; 0x38
    3f08:	mov	r2, #520	; 0x208
    3f0c:	mov	r1, r7
    3f10:	bl	0 <memcpy>
    3f14:	ldr	r1, [r6, #16]
    3f18:	mov	r0, r5
    3f1c:	bl	7afc <eval_cursor>
    3f20:	cmp	r0, #0
    3f24:	bne	4c74 <eval_integer+0x10a4>
    3f28:	bl	0 <coda_get_option_use_fast_size_expressions>
    3f2c:	mov	r5, r0
    3f30:	mov	r0, #0
    3f34:	bl	0 <coda_set_option_use_fast_size_expressions>
    3f38:	mov	r0, r7
    3f3c:	mov	r1, sl
    3f40:	bl	0 <coda_cursor_get_byte_size>
    3f44:	b	4240 <eval_integer+0x670>
    3f48:	ldr	r0, [r5]
    3f4c:	cmp	r0, #0
    3f50:	beq	5000 <eval_integer+0x1430>
    3f54:	add	r9, r5, #8
    3f58:	add	r0, sp, #56	; 0x38
    3f5c:	mov	r2, #520	; 0x208
    3f60:	mov	r1, r9
    3f64:	bl	0 <memcpy>
    3f68:	ldr	r1, [r6, #16]
    3f6c:	mov	r0, r5
    3f70:	bl	7afc <eval_cursor>
    3f74:	cmp	r0, #0
    3f78:	bne	4c74 <eval_integer+0x10a4>
    3f7c:	add	r1, sp, #8
    3f80:	mov	r0, r9
    3f84:	bl	0 <coda_cursor_get_num_elements>
    3f88:	cmp	r0, #0
    3f8c:	bne	4c74 <eval_integer+0x10a4>
    3f90:	mov	r0, #0
    3f94:	str	r0, [sl]
    3f98:	str	r0, [sl, #4]
    3f9c:	ldr	r0, [sp, #8]
    3fa0:	cmp	r0, #1
    3fa4:	blt	4de4 <eval_integer+0x1214>
    3fa8:	mov	r0, r9
    3fac:	bl	0 <coda_cursor_goto_first_array_element>
    3fb0:	cmp	r0, #0
    3fb4:	bne	4c74 <eval_integer+0x10a4>
    3fb8:	ldr	r0, [sp, #8]
    3fbc:	cmp	r0, #1
    3fc0:	blt	4de4 <eval_integer+0x1214>
    3fc4:	mov	r7, #0
    3fc8:	add	r8, sp, #24
    3fcc:	b	4d1c <eval_integer+0x114c>
    3fd0:	ldr	r0, [r5]
    3fd4:	cmp	r0, #0
    3fd8:	beq	5014 <eval_integer+0x1444>
    3fdc:	add	r7, r5, #8
    3fe0:	add	r0, sp, #56	; 0x38
    3fe4:	mov	r2, #520	; 0x208
    3fe8:	mov	r1, r7
    3fec:	bl	0 <memcpy>
    3ff0:	ldr	r1, [r6, #16]
    3ff4:	mov	r0, r5
    3ff8:	bl	7afc <eval_cursor>
    3ffc:	cmp	r0, #0
    4000:	bne	4c74 <eval_integer+0x10a4>
    4004:	ldr	r1, [r6, #20]
    4008:	mov	r0, r5
    400c:	mov	r2, sl
    4010:	bl	3bd0 <eval_integer>
    4014:	cmp	r0, #0
    4018:	bne	4c74 <eval_integer+0x10a4>
    401c:	b	4f44 <eval_integer+0x1374>
    4020:	ldr	r1, [r6, #16]
    4024:	add	r2, sp, #56	; 0x38
    4028:	mov	r0, r5
    402c:	bl	3bd0 <eval_integer>
    4030:	cmp	r0, #0
    4034:	bne	4c74 <eval_integer+0x10a4>
    4038:	ldr	r1, [r6, #20]
    403c:	add	r2, sp, #24
    4040:	mov	r0, r5
    4044:	bl	3bd0 <eval_integer>
    4048:	cmp	r0, #0
    404c:	bne	4c74 <eval_integer+0x10a4>
    4050:	ldr	r0, [sp, #56]	; 0x38
    4054:	ldr	r2, [sp, #24]
    4058:	ldr	r1, [sp, #60]	; 0x3c
    405c:	ldr	r3, [sp, #28]
    4060:	umull	r4, r7, r2, r0
    4064:	mla	r1, r2, r1, r7
    4068:	mla	r5, r3, r0, r1
    406c:	strd	r4, [sl]
    4070:	b	4f54 <eval_integer+0x1384>
    4074:	ldr	r1, [r6, #16]
    4078:	add	r2, sp, #56	; 0x38
    407c:	mov	r0, r5
    4080:	bl	3bd0 <eval_integer>
    4084:	cmp	r0, #0
    4088:	bne	4c74 <eval_integer+0x10a4>
    408c:	ldr	r1, [r6, #20]
    4090:	add	r2, sp, #24
    4094:	mov	r0, r5
    4098:	bl	3bd0 <eval_integer>
    409c:	cmp	r0, #0
    40a0:	bne	4c74 <eval_integer+0x10a4>
    40a4:	ldr	r2, [sp, #24]
    40a8:	ldr	r3, [sp, #28]
    40ac:	orrs	r0, r2, r3
    40b0:	beq	4e60 <eval_integer+0x1290>
    40b4:	ldr	r0, [sp, #56]	; 0x38
    40b8:	ldr	r1, [sp, #60]	; 0x3c
    40bc:	bl	0 <__aeabi_ldivmod>
    40c0:	b	4afc <eval_integer+0xf2c>
    40c4:	ldr	r1, [r6, #16]
    40c8:	add	r2, sp, #56	; 0x38
    40cc:	mov	r0, r5
    40d0:	bl	3bd0 <eval_integer>
    40d4:	cmp	r0, #0
    40d8:	bne	4c74 <eval_integer+0x10a4>
    40dc:	ldr	r1, [r6, #20]
    40e0:	add	r2, sp, #24
    40e4:	mov	r0, r5
    40e8:	bl	3bd0 <eval_integer>
    40ec:	cmp	r0, #0
    40f0:	bne	4c74 <eval_integer+0x10a4>
    40f4:	ldr	r2, [sp, #24]
    40f8:	ldr	r3, [sp, #28]
    40fc:	orrs	r0, r2, r3
    4100:	beq	4e6c <eval_integer+0x129c>
    4104:	ldr	r0, [sp, #56]	; 0x38
    4108:	ldr	r1, [sp, #60]	; 0x3c
    410c:	bl	0 <__aeabi_ldivmod>
    4110:	mov	r0, r2
    4114:	mov	r1, r3
    4118:	b	4afc <eval_integer+0xf2c>
    411c:	ldr	r0, [r5]
    4120:	cmp	r0, #0
    4124:	beq	5028 <eval_integer+0x1458>
    4128:	add	r9, r5, #8
    412c:	add	r0, sp, #56	; 0x38
    4130:	mov	r2, #520	; 0x208
    4134:	mov	r1, r9
    4138:	bl	0 <memcpy>
    413c:	ldr	r1, [r6, #16]
    4140:	mov	r0, r5
    4144:	bl	7afc <eval_cursor>
    4148:	cmp	r0, #0
    414c:	bne	4c74 <eval_integer+0x10a4>
    4150:	add	r1, sp, #8
    4154:	mov	r0, r9
    4158:	bl	0 <coda_cursor_get_num_elements>
    415c:	cmp	r0, #0
    4160:	bne	4c74 <eval_integer+0x10a4>
    4164:	mov	r0, #0
    4168:	str	r0, [sl]
    416c:	str	r0, [sl, #4]
    4170:	ldr	r0, [sp, #8]
    4174:	cmp	r0, #1
    4178:	blt	4de4 <eval_integer+0x1214>
    417c:	mov	r0, r9
    4180:	bl	0 <coda_cursor_goto_first_array_element>
    4184:	cmp	r0, #0
    4188:	bne	4c74 <eval_integer+0x10a4>
    418c:	ldr	r0, [sp, #8]
    4190:	cmp	r0, #1
    4194:	blt	4de4 <eval_integer+0x1214>
    4198:	mov	r7, #0
    419c:	add	r8, sp, #24
    41a0:	b	4d90 <eval_integer+0x11c0>
    41a4:	ldr	r1, [r6, #16]
    41a8:	add	r2, sp, #56	; 0x38
    41ac:	mov	r0, r5
    41b0:	bl	3bd0 <eval_integer>
    41b4:	cmp	r0, #0
    41b8:	bne	4c74 <eval_integer+0x10a4>
    41bc:	ldr	r1, [r6, #20]
    41c0:	add	r2, sp, #24
    41c4:	mov	r0, r5
    41c8:	bl	3bd0 <eval_integer>
    41cc:	cmp	r0, #0
    41d0:	bne	4c74 <eval_integer+0x10a4>
    41d4:	ldr	r0, [sp, #56]	; 0x38
    41d8:	ldr	r2, [sp, #24]
    41dc:	ldr	r1, [sp, #60]	; 0x3c
    41e0:	ldr	r3, [sp, #28]
    41e4:	and	r1, r3, r1
    41e8:	and	r0, r2, r0
    41ec:	b	4afc <eval_integer+0xf2c>
    41f0:	ldr	r0, [r5]
    41f4:	cmp	r0, #0
    41f8:	beq	503c <eval_integer+0x146c>
    41fc:	add	r7, r5, #8
    4200:	add	r0, sp, #56	; 0x38
    4204:	mov	r2, #520	; 0x208
    4208:	mov	r1, r7
    420c:	bl	0 <memcpy>
    4210:	ldr	r1, [r6, #16]
    4214:	mov	r0, r5
    4218:	bl	7afc <eval_cursor>
    421c:	cmp	r0, #0
    4220:	bne	4c74 <eval_integer+0x10a4>
    4224:	bl	0 <coda_get_option_use_fast_size_expressions>
    4228:	mov	r5, r0
    422c:	mov	r0, #0
    4230:	bl	0 <coda_set_option_use_fast_size_expressions>
    4234:	mov	r0, r7
    4238:	mov	r1, sl
    423c:	bl	0 <coda_cursor_get_bit_size>
    4240:	mov	r4, r0
    4244:	mov	r0, r5
    4248:	bl	0 <coda_set_option_use_fast_size_expressions>
    424c:	cmp	r4, #0
    4250:	bne	4c74 <eval_integer+0x10a4>
    4254:	b	4f44 <eval_integer+0x1374>
    4258:	ldrd	r0, [r6, #16]
    425c:	b	4afc <eval_integer+0xf2c>
    4260:	ldr	r1, [r6, #16]
    4264:	add	r2, sp, #56	; 0x38
    4268:	mov	r0, r5
    426c:	bl	3bd0 <eval_integer>
    4270:	cmp	r0, #0
    4274:	bne	4c74 <eval_integer+0x10a4>
    4278:	ldr	r1, [r6, #20]
    427c:	add	r2, sp, #24
    4280:	mov	r0, r5
    4284:	bl	3bd0 <eval_integer>
    4288:	cmp	r0, #0
    428c:	bne	4c74 <eval_integer+0x10a4>
    4290:	ldr	r0, [sp, #56]	; 0x38
    4294:	ldr	r2, [sp, #24]
    4298:	ldr	r1, [sp, #60]	; 0x3c
    429c:	ldr	r3, [sp, #28]
    42a0:	adds	r0, r2, r0
    42a4:	adc	r1, r3, r1
    42a8:	b	4afc <eval_integer+0xf2c>
    42ac:	ldr	r0, [r5]
    42b0:	cmp	r0, #0
    42b4:	beq	5050 <eval_integer+0x1480>
    42b8:	add	r9, r5, #8
    42bc:	add	r0, sp, #56	; 0x38
    42c0:	mov	r2, #520	; 0x208
    42c4:	mov	r1, r9
    42c8:	bl	0 <memcpy>
    42cc:	ldr	r1, [r6, #16]
    42d0:	mov	r0, r5
    42d4:	bl	7afc <eval_cursor>
    42d8:	cmp	r0, #0
    42dc:	bne	4c74 <eval_integer+0x10a4>
    42e0:	add	r1, sp, #24
    42e4:	mov	r0, r9
    42e8:	bl	0 <coda_cursor_get_num_elements>
    42ec:	cmp	r0, #0
    42f0:	bne	4c74 <eval_integer+0x10a4>
    42f4:	mov	r0, #0
    42f8:	str	r0, [sl]
    42fc:	str	r0, [sl, #4]
    4300:	ldr	r0, [sp, #24]
    4304:	cmp	r0, #1
    4308:	blt	4de4 <eval_integer+0x1214>
    430c:	mov	r0, r9
    4310:	bl	0 <coda_cursor_goto_first_array_element>
    4314:	cmp	r0, #0
    4318:	bne	4c74 <eval_integer+0x10a4>
    431c:	ldr	r0, [sp, #24]
    4320:	cmp	r0, #1
    4324:	blt	4de4 <eval_integer+0x1214>
    4328:	mov	r7, #0
    432c:	add	r8, sp, #8
    4330:	b	4b70 <eval_integer+0xfa0>
    4334:	ldr	r1, [r6, #16]
    4338:	add	r2, sp, #56	; 0x38
    433c:	mov	r0, r5
    4340:	bl	3bd0 <eval_integer>
    4344:	cmp	r0, #0
    4348:	bne	4c74 <eval_integer+0x10a4>
    434c:	ldr	r1, [r6, #20]
    4350:	add	r2, sp, #24
    4354:	mov	r0, r5
    4358:	bl	3bd0 <eval_integer>
    435c:	cmp	r0, #0
    4360:	bne	4c74 <eval_integer+0x10a4>
    4364:	ldr	r0, [sp, #24]
    4368:	ldr	r2, [sp, #56]	; 0x38
    436c:	ldr	r1, [sp, #28]
    4370:	ldr	r3, [sp, #60]	; 0x3c
    4374:	subs	r0, r2, r0
    4378:	sbc	r1, r3, r1
    437c:	b	4afc <eval_integer+0xf2c>
    4380:	ldr	r1, [r6, #16]
    4384:	add	r2, sp, #56	; 0x38
    4388:	mov	r0, r5
    438c:	bl	2708 <eval_boolean>
    4390:	cmp	r0, #0
    4394:	bne	4c74 <eval_integer+0x10a4>
    4398:	ldr	r0, [sp, #56]	; 0x38
    439c:	cmp	r0, #0
    43a0:	beq	4c5c <eval_integer+0x108c>
    43a4:	ldr	r1, [r6, #20]
    43a8:	b	4c60 <eval_integer+0x1090>
    43ac:	ldr	r7, [r6, #16]
    43b0:	ldr	r0, [r7, #4]
    43b4:	cmp	r0, #0
    43b8:	beq	4adc <eval_integer+0xf0c>
    43bc:	cmp	r0, #4
    43c0:	bne	4b04 <eval_integer+0xf34>
    43c4:	ldr	r0, [r5]
    43c8:	cmp	r0, #0
    43cc:	beq	5140 <eval_integer+0x1570>
    43d0:	add	r6, r5, #8
    43d4:	add	r0, sp, #56	; 0x38
    43d8:	mov	r2, #520	; 0x208
    43dc:	mov	r1, r6
    43e0:	bl	0 <memcpy>
    43e4:	mov	r0, r5
    43e8:	mov	r1, r7
    43ec:	bl	7afc <eval_cursor>
    43f0:	cmp	r0, #0
    43f4:	bne	4c74 <eval_integer+0x10a4>
    43f8:	bl	0 <coda_get_option_perform_conversions>
    43fc:	mov	r5, r0
    4400:	mov	r0, #0
    4404:	bl	0 <coda_set_option_perform_conversions>
    4408:	add	r1, sp, #8
    440c:	mov	r0, r6
    4410:	bl	0 <coda_cursor_get_read_type>
    4414:	cmp	r0, #0
    4418:	beq	4e78 <eval_integer+0x12a8>
    441c:	mov	r0, r5
    4420:	bl	0 <coda_set_option_perform_conversions>
    4424:	mvn	r9, #0
    4428:	b	4f58 <eval_integer+0x1388>
    442c:	ldr	r7, [r6, #16]
    4430:	ldr	r0, [r7, #4]
    4434:	cmp	r0, #4
    4438:	bne	49b0 <eval_integer+0xde0>
    443c:	ldr	r0, [r5]
    4440:	cmp	r0, #0
    4444:	beq	512c <eval_integer+0x155c>
    4448:	add	r6, r5, #8
    444c:	add	r0, sp, #56	; 0x38
    4450:	mov	r2, #520	; 0x208
    4454:	mov	r1, r6
    4458:	bl	0 <memcpy>
    445c:	mov	r0, r5
    4460:	mov	r1, r7
    4464:	bl	7afc <eval_cursor>
    4468:	cmp	r0, #0
    446c:	bne	4c74 <eval_integer+0x10a4>
    4470:	add	r1, sp, #24
    4474:	mov	r0, r6
    4478:	bl	0 <coda_cursor_get_string_length>
    447c:	cmp	r0, #0
    4480:	bne	4c74 <eval_integer+0x10a4>
    4484:	ldr	r0, [sp, #24]
    4488:	asr	r1, r0, #31
    448c:	strd	r0, [sl]
    4490:	b	4efc <eval_integer+0x132c>
    4494:	ldr	r0, [r5]
    4498:	cmp	r0, #0
    449c:	beq	5064 <eval_integer+0x1494>
    44a0:	add	r7, r5, #8
    44a4:	add	r0, sp, #56	; 0x38
    44a8:	mov	r2, #520	; 0x208
    44ac:	mov	r1, r7
    44b0:	bl	0 <memcpy>
    44b4:	ldr	r1, [r6, #16]
    44b8:	mov	r0, r5
    44bc:	bl	7afc <eval_cursor>
    44c0:	cmp	r0, #0
    44c4:	bne	4c74 <eval_integer+0x10a4>
    44c8:	add	r1, sp, #24
    44cc:	mov	r0, r7
    44d0:	bl	0 <coda_cursor_get_index>
    44d4:	cmp	r0, #0
    44d8:	bne	4c74 <eval_integer+0x10a4>
    44dc:	b	4924 <eval_integer+0xd54>
    44e0:	ldr	r0, [r5]
    44e4:	cmp	r0, #0
    44e8:	beq	5078 <eval_integer+0x14a8>
    44ec:	add	r4, r5, #8
    44f0:	add	r0, sp, #56	; 0x38
    44f4:	mov	r2, #520	; 0x208
    44f8:	mov	r1, r4
    44fc:	bl	0 <memcpy>
    4500:	ldr	r1, [r6, #16]
    4504:	mov	r0, r5
    4508:	bl	7afc <eval_cursor>
    450c:	mvn	r9, #0
    4510:	cmp	r0, #0
    4514:	bne	4f58 <eval_integer+0x1388>
    4518:	add	r1, sp, #24
    451c:	mov	r0, r4
    4520:	bl	0 <coda_cursor_get_num_elements>
    4524:	cmp	r0, #0
    4528:	bne	4f58 <eval_integer+0x1388>
    452c:	mov	r0, #0
    4530:	str	r0, [sl]
    4534:	str	r0, [sl, #4]
    4538:	ldr	r0, [sp, #24]
    453c:	cmp	r0, #1
    4540:	blt	4e48 <eval_integer+0x1278>
    4544:	mov	r0, r4
    4548:	bl	0 <coda_cursor_goto_first_array_element>
    454c:	cmp	r0, #0
    4550:	bne	4f58 <eval_integer+0x1388>
    4554:	ldr	r0, [sp, #24]
    4558:	cmp	r0, #1
    455c:	blt	4e48 <eval_integer+0x1278>
    4560:	mov	r7, #0
    4564:	add	r8, sp, #8
    4568:	mvn	r9, #0
    456c:	b	4e00 <eval_integer+0x1230>
    4570:	ldr	r0, [r5]
    4574:	cmp	r0, #0
    4578:	beq	508c <eval_integer+0x14bc>
    457c:	ldr	r0, [r0]
    4580:	add	r1, sp, #56	; 0x38
    4584:	bl	0 <coda_get_product_version>
    4588:	cmp	r0, #0
    458c:	bne	4c74 <eval_integer+0x10a4>
    4590:	b	4af4 <eval_integer+0xf24>
    4594:	mov	r0, #0
    4598:	str	r0, [sp, #24]
    459c:	ldr	r0, [r5]
    45a0:	cmp	r0, #0
    45a4:	beq	50a0 <eval_integer+0x14d0>
    45a8:	add	r7, r5, #8
    45ac:	add	r0, sp, #56	; 0x38
    45b0:	mov	r2, #520	; 0x208
    45b4:	mov	r1, r7
    45b8:	bl	0 <memcpy>
    45bc:	ldr	r1, [r6, #16]
    45c0:	mov	r0, r5
    45c4:	bl	7afc <eval_cursor>
    45c8:	cmp	r0, #0
    45cc:	bne	4c74 <eval_integer+0x10a4>
    45d0:	ldr	r0, [pc, #2952]	; 5160 <eval_integer+0x1590>
    45d4:	ldr	r1, [pc, r0]
    45d8:	bl	0 <__aeabi_read_tp>
    45dc:	ldr	r9, [r0, r1]
    45e0:	mov	r4, #0
    45e4:	str	r4, [r0, r1]
    45e8:	mov	r0, r7
    45ec:	bl	0 <coda_cursor_goto_first_array_element>
    45f0:	cmp	r0, #0
    45f4:	beq	4c7c <eval_integer+0x10ac>
    45f8:	ldr	r0, [pc, #2916]	; 5164 <eval_integer+0x1594>
    45fc:	ldr	r1, [pc, r0]
    4600:	bl	0 <__aeabi_read_tp>
    4604:	str	r9, [r0, r1]
    4608:	mvn	r9, #0
    460c:	b	4f58 <eval_integer+0x1388>
    4610:	ldr	r0, [r5]
    4614:	cmp	r0, #0
    4618:	beq	50b4 <eval_integer+0x14e4>
    461c:	add	r9, r5, #8
    4620:	add	r0, sp, #56	; 0x38
    4624:	mov	r2, #520	; 0x208
    4628:	mov	r1, r9
    462c:	bl	0 <memcpy>
    4630:	ldr	r1, [r6, #16]
    4634:	mov	r0, r5
    4638:	bl	7afc <eval_cursor>
    463c:	cmp	r0, #0
    4640:	bne	4c74 <eval_integer+0x10a4>
    4644:	add	r1, sp, #8
    4648:	mov	r0, r9
    464c:	bl	0 <coda_cursor_get_num_elements>
    4650:	cmp	r0, #0
    4654:	bne	4c74 <eval_integer+0x10a4>
    4658:	mov	r0, #0
    465c:	str	r0, [sl]
    4660:	str	r0, [sl, #4]
    4664:	ldr	r0, [sp, #8]
    4668:	cmp	r0, #1
    466c:	blt	4de4 <eval_integer+0x1214>
    4670:	mov	r0, r9
    4674:	bl	0 <coda_cursor_goto_first_array_element>
    4678:	cmp	r0, #0
    467c:	bne	4c74 <eval_integer+0x10a4>
    4680:	ldr	r0, [sp, #8]
    4684:	cmp	r0, #1
    4688:	blt	4de4 <eval_integer+0x1214>
    468c:	mov	r7, #0
    4690:	add	r8, sp, #24
    4694:	b	4bd8 <eval_integer+0x1008>
    4698:	ldr	r0, [r5]
    469c:	cmp	r0, #0
    46a0:	beq	50c8 <eval_integer+0x14f8>
    46a4:	add	r7, r5, #8
    46a8:	add	r0, sp, #56	; 0x38
    46ac:	mov	r2, #520	; 0x208
    46b0:	mov	r1, r7
    46b4:	bl	0 <memcpy>
    46b8:	ldr	r1, [r6, #16]
    46bc:	mov	r0, r5
    46c0:	bl	7afc <eval_cursor>
    46c4:	cmp	r0, #0
    46c8:	bne	4c74 <eval_integer+0x10a4>
    46cc:	mov	r0, r7
    46d0:	mov	r1, sl
    46d4:	bl	0 <coda_cursor_get_file_bit_offset>
    46d8:	cmp	r0, #0
    46dc:	bne	4c74 <eval_integer+0x10a4>
    46e0:	b	4f44 <eval_integer+0x1374>
    46e4:	ldr	r0, [r5]
    46e8:	cmp	r0, #0
    46ec:	beq	50dc <eval_integer+0x150c>
    46f0:	add	r7, r5, #8
    46f4:	add	r0, sp, #56	; 0x38
    46f8:	mov	r2, #520	; 0x208
    46fc:	mov	r1, r7
    4700:	bl	0 <memcpy>
    4704:	ldr	r1, [r6, #16]
    4708:	mov	r0, r5
    470c:	bl	7afc <eval_cursor>
    4710:	cmp	r0, #0
    4714:	bne	4c74 <eval_integer+0x10a4>
    4718:	mov	r0, r7
    471c:	mov	r1, sl
    4720:	bl	0 <coda_cursor_get_file_byte_offset>
    4724:	cmp	r0, #0
    4728:	bne	4c74 <eval_integer+0x10a4>
    472c:	b	4f44 <eval_integer+0x1374>
    4730:	ldr	r1, [r6, #16]
    4734:	add	r2, sp, #56	; 0x38
    4738:	mov	r0, r5
    473c:	bl	3bd0 <eval_integer>
    4740:	cmp	r0, #0
    4744:	bne	4c74 <eval_integer+0x10a4>
    4748:	ldr	r1, [r6, #20]
    474c:	add	r2, sp, #24
    4750:	mov	r0, r5
    4754:	bl	3bd0 <eval_integer>
    4758:	cmp	r0, #0
    475c:	bne	4c74 <eval_integer+0x10a4>
    4760:	ldr	r1, [sp, #56]	; 0x38
    4764:	ldr	r4, [sp, #24]
    4768:	ldr	r2, [sp, #60]	; 0x3c
    476c:	ldr	r5, [sp, #28]
    4770:	mov	r0, #0
    4774:	subs	r3, r4, r1
    4778:	sbcs	r3, r5, r2
    477c:	movwlt	r0, #1
    4780:	cmp	r0, #0
    4784:	movne	r5, r2
    4788:	movne	r4, r1
    478c:	strd	r4, [sl]
    4790:	b	4f54 <eval_integer+0x1384>
    4794:	ldr	r0, [r5]
    4798:	cmp	r0, #0
    479c:	beq	50f0 <eval_integer+0x1520>
    47a0:	add	r7, r5, #8
    47a4:	add	r0, sp, #56	; 0x38
    47a8:	mov	r2, #520	; 0x208
    47ac:	mov	r1, r7
    47b0:	bl	0 <memcpy>
    47b4:	ldr	r1, [r6, #16]
    47b8:	mov	r0, r5
    47bc:	bl	7afc <eval_cursor>
    47c0:	cmp	r0, #0
    47c4:	bne	4c74 <eval_integer+0x10a4>
    47c8:	ldr	r1, [r6, #20]
    47cc:	add	r2, sp, #8
    47d0:	mov	r0, r5
    47d4:	bl	3bd0 <eval_integer>
    47d8:	cmp	r0, #0
    47dc:	bne	4c74 <eval_integer+0x10a4>
    47e0:	add	r6, sp, #24
    47e4:	add	r1, sp, #20
    47e8:	mov	r0, r7
    47ec:	mov	r2, r6
    47f0:	bl	0 <coda_cursor_get_array_dim>
    47f4:	cmp	r0, #0
    47f8:	bne	4c74 <eval_integer+0x10a4>
    47fc:	ldr	r0, [sp, #12]
    4800:	ldr	r5, [sp, #8]
    4804:	cmn	r0, #1
    4808:	ble	4f08 <eval_integer+0x1338>
    480c:	ldr	r3, [sp, #20]
    4810:	subs	r1, r5, r3
    4814:	sbcs	r0, r0, r3, asr #31
    4818:	bge	4f64 <eval_integer+0x1394>
    481c:	add	r1, sp, #56	; 0x38
    4820:	mov	r0, r7
    4824:	mov	r2, #520	; 0x208
    4828:	bl	0 <memcpy>
    482c:	ldr	r0, [r6, r5, lsl #2]
    4830:	b	4af8 <eval_integer+0xf28>
    4834:	ldr	r0, [r6, #12]
    4838:	ldrb	r0, [r0]
    483c:	add	r0, r5, r0, lsl #3
    4840:	ldr	r2, [r0, #-312]	; 0xfffffec8
    4844:	ldr	r3, [r0, #-308]	; 0xfffffecc
    4848:	strd	r2, [sl]
    484c:	b	4f54 <eval_integer+0x1384>
    4850:	ldr	r0, [r5]
    4854:	cmp	r0, #0
    4858:	beq	5104 <eval_integer+0x1534>
    485c:	ldr	r0, [r0]
    4860:	mov	r1, sl
    4864:	bl	0 <coda_get_product_file_size>
    4868:	cmp	r0, #0
    486c:	mvn	r9, #0
    4870:	moveq	r9, #0
    4874:	b	4f58 <eval_integer+0x1388>
    4878:	ldr	r1, [r6, #16]
    487c:	add	r2, sp, #56	; 0x38
    4880:	mov	r0, r5
    4884:	bl	3bd0 <eval_integer>
    4888:	cmp	r0, #0
    488c:	bne	4c74 <eval_integer+0x10a4>
    4890:	ldr	r1, [r6, #20]
    4894:	add	r2, sp, #24
    4898:	mov	r0, r5
    489c:	bl	3bd0 <eval_integer>
    48a0:	cmp	r0, #0
    48a4:	bne	4c74 <eval_integer+0x10a4>
    48a8:	ldr	r2, [sp, #24]
    48ac:	ldr	r1, [sp, #56]	; 0x38
    48b0:	ldr	r3, [sp, #28]
    48b4:	ldr	r7, [sp, #60]	; 0x3c
    48b8:	mov	r0, #0
    48bc:	subs	r6, r1, r2
    48c0:	sbcs	r6, r7, r3
    48c4:	movwlt	r0, #1
    48c8:	cmp	r0, #0
    48cc:	movne	r3, r7
    48d0:	movne	r2, r1
    48d4:	strd	r2, [sl]
    48d8:	b	4f54 <eval_integer+0x1384>
    48dc:	ldr	r0, [r5]
    48e0:	cmp	r0, #0
    48e4:	beq	5118 <eval_integer+0x1548>
    48e8:	add	r7, r5, #8
    48ec:	add	r0, sp, #56	; 0x38
    48f0:	mov	r2, #520	; 0x208
    48f4:	mov	r1, r7
    48f8:	bl	0 <memcpy>
    48fc:	ldr	r1, [r6, #16]
    4900:	mov	r0, r5
    4904:	bl	7afc <eval_cursor>
    4908:	cmp	r0, #0
    490c:	bne	4c74 <eval_integer+0x10a4>
    4910:	add	r1, sp, #24
    4914:	mov	r0, r7
    4918:	bl	0 <coda_cursor_get_num_elements>
    491c:	cmp	r0, #0
    4920:	bne	4c74 <eval_integer+0x10a4>
    4924:	add	r1, sp, #56	; 0x38
    4928:	mov	r0, r7
    492c:	mov	r2, #520	; 0x208
    4930:	bl	0 <memcpy>
    4934:	b	49e8 <eval_integer+0xe18>
    4938:	ldr	r1, [r6, #16]
    493c:	add	r2, sp, #56	; 0x38
    4940:	mov	r0, r5
    4944:	bl	3bd0 <eval_integer>
    4948:	cmp	r0, #0
    494c:	bne	4c74 <eval_integer+0x10a4>
    4950:	ldr	r1, [r6, #20]
    4954:	add	r2, sp, #24
    4958:	mov	r0, r5
    495c:	bl	3bd0 <eval_integer>
    4960:	cmp	r0, #0
    4964:	bne	4c74 <eval_integer+0x10a4>
    4968:	ldr	r0, [sp, #56]	; 0x38
    496c:	ldr	r2, [sp, #24]
    4970:	ldr	r1, [sp, #60]	; 0x3c
    4974:	ldr	r3, [sp, #28]
    4978:	orr	r1, r3, r1
    497c:	orr	r0, r2, r0
    4980:	b	4afc <eval_integer+0xf2c>
    4984:	ldr	r1, [r6, #16]
    4988:	mov	r0, r5
    498c:	mov	r2, sl
    4990:	bl	3bd0 <eval_integer>
    4994:	mvn	r9, #0
    4998:	cmp	r0, #0
    499c:	bne	4f58 <eval_integer+0x1388>
    49a0:	ldrd	r0, [sl]
    49a4:	rsbs	r0, r0, #0
    49a8:	rsc	r1, r1, #0
    49ac:	b	4afc <eval_integer+0xf2c>
    49b0:	add	r0, sp, #8
    49b4:	add	r2, sp, #56	; 0x38
    49b8:	add	r3, sp, #24
    49bc:	mov	r1, r7
    49c0:	str	r0, [sp]
    49c4:	mov	r0, r5
    49c8:	bl	60dc <eval_string>
    49cc:	cmp	r0, #0
    49d0:	bne	4c74 <eval_integer+0x10a4>
    49d4:	ldr	r0, [sp, #24]
    49d8:	cmp	r0, #1
    49dc:	blt	4af8 <eval_integer+0xf28>
    49e0:	ldr	r0, [sp, #8]
    49e4:	bl	0 <free>
    49e8:	ldr	r0, [sp, #24]
    49ec:	b	4af8 <eval_integer+0xf28>
    49f0:	mov	r7, #0
    49f4:	cmp	r1, #0
    49f8:	beq	4a24 <eval_integer+0xe54>
    49fc:	ldr	r2, [r6, #12]
    4a00:	mov	r0, r1
    4a04:	mov	r1, r2
    4a08:	bl	0 <strcmp>
    4a0c:	cmp	r0, #0
    4a10:	bne	4a24 <eval_integer+0xe54>
    4a14:	ldr	r7, [r5, #552]	; 0x228
    4a18:	ldr	r0, [r5, #556]	; 0x22c
    4a1c:	str	r0, [sp, #60]	; 0x3c
    4a20:	str	r7, [sp, #56]	; 0x38
    4a24:	ldr	r1, [r6, #12]
    4a28:	ldr	r0, [r4]
    4a2c:	add	r3, sp, #24
    4a30:	mov	r2, r7
    4a34:	bl	0 <coda_product_variable_get_pointer>
    4a38:	cmp	r0, #0
    4a3c:	bne	4c74 <eval_integer+0x10a4>
    4a40:	ldr	r0, [sp, #24]
    4a44:	ldrd	r0, [r0]
    4a48:	b	4afc <eval_integer+0xf2c>
    4a4c:	ldr	r1, [r6, #12]
    4a50:	ldr	r0, [r0]
    4a54:	add	r2, sp, #56	; 0x38
    4a58:	bl	0 <coda_product_variable_get_size>
    4a5c:	mvn	r9, #0
    4a60:	cmp	r0, #0
    4a64:	bne	4f58 <eval_integer+0x1388>
    4a68:	ldr	r0, [r6, #12]
    4a6c:	str	r0, [r5, #560]	; 0x230
    4a70:	ldr	r0, [sp, #56]	; 0x38
    4a74:	cmp	r0, #1
    4a78:	blt	4ac4 <eval_integer+0xef4>
    4a7c:	add	r4, r5, #552	; 0x228
    4a80:	mov	r9, #0
    4a84:	add	r7, sp, #24
    4a88:	mov	r8, #0
    4a8c:	strd	r8, [r4]
    4a90:	mov	r0, r5
    4a94:	mov	r2, r7
    4a98:	ldr	r1, [r6, #16]
    4a9c:	bl	2708 <eval_boolean>
    4aa0:	cmp	r0, #0
    4aa4:	bne	4c74 <eval_integer+0x10a4>
    4aa8:	ldr	r0, [sp, #24]
    4aac:	cmp	r0, #0
    4ab0:	bne	4eb8 <eval_integer+0x12e8>
    4ab4:	ldr	r0, [sp, #56]	; 0x38
    4ab8:	add	r8, r8, #1
    4abc:	cmp	r8, r0
    4ac0:	blt	4a8c <eval_integer+0xebc>
    4ac4:	mvn	r0, #0
    4ac8:	str	r0, [sl]
    4acc:	str	r0, [sl, #4]
    4ad0:	mov	r0, #0
    4ad4:	str	r0, [r5, #560]	; 0x230
    4ad8:	b	4f54 <eval_integer+0x1384>
    4adc:	add	r2, sp, #56	; 0x38
    4ae0:	mov	r0, r5
    4ae4:	mov	r1, r7
    4ae8:	bl	2708 <eval_boolean>
    4aec:	cmp	r0, #0
    4af0:	bne	4c74 <eval_integer+0x10a4>
    4af4:	ldr	r0, [sp, #56]	; 0x38
    4af8:	asr	r1, r0, #31
    4afc:	strd	r0, [sl]
    4b00:	b	4f54 <eval_integer+0x1384>
    4b04:	add	r0, sp, #8
    4b08:	add	r2, sp, #56	; 0x38
    4b0c:	add	r3, sp, #24
    4b10:	mov	r1, r7
    4b14:	str	r0, [sp]
    4b18:	mov	r0, r5
    4b1c:	bl	60dc <eval_string>
    4b20:	cmp	r0, #0
    4b24:	bne	4c74 <eval_integer+0x10a4>
    4b28:	ldr	r1, [sp, #24]
    4b2c:	cmp	r1, #0
    4b30:	beq	4ea8 <eval_integer+0x12d8>
    4b34:	ldr	r0, [sp, #56]	; 0x38
    4b38:	ldr	r2, [sp, #8]
    4b3c:	mov	r3, #0
    4b40:	add	r0, r2, r0
    4b44:	mov	r2, sl
    4b48:	bl	0 <coda_ascii_parse_int64>
    4b4c:	mov	r4, r0
    4b50:	ldr	r0, [sp, #8]
    4b54:	bl	0 <free>
    4b58:	cmn	r4, #1
    4b5c:	bgt	4f54 <eval_integer+0x1384>
    4b60:	b	4c74 <eval_integer+0x10a4>
    4b64:	add	r7, r7, #1
    4b68:	cmp	r7, r0
    4b6c:	bge	4de4 <eval_integer+0x1214>
    4b70:	ldr	r1, [r6, #20]
    4b74:	mov	r0, r5
    4b78:	mov	r2, r8
    4b7c:	bl	2708 <eval_boolean>
    4b80:	cmp	r0, #0
    4b84:	bne	4c74 <eval_integer+0x10a4>
    4b88:	ldr	r0, [sp, #8]
    4b8c:	cmp	r0, #0
    4b90:	beq	4ba4 <eval_integer+0xfd4>
    4b94:	ldrd	r0, [sl]
    4b98:	adds	r0, r0, #1
    4b9c:	adc	r1, r1, #0
    4ba0:	strd	r0, [sl]
    4ba4:	ldr	r0, [sp, #24]
    4ba8:	sub	r1, r0, #1
    4bac:	cmp	r7, r1
    4bb0:	bge	4b64 <eval_integer+0xf94>
    4bb4:	mov	r0, r9
    4bb8:	bl	0 <coda_cursor_goto_next_array_element>
    4bbc:	cmp	r0, #0
    4bc0:	bne	4c74 <eval_integer+0x10a4>
    4bc4:	ldr	r0, [sp, #24]
    4bc8:	b	4b64 <eval_integer+0xf94>
    4bcc:	add	r7, r7, #1
    4bd0:	cmp	r7, r0
    4bd4:	bge	4de4 <eval_integer+0x1214>
    4bd8:	ldr	r1, [r6, #20]
    4bdc:	mov	r0, r5
    4be0:	mov	r2, r8
    4be4:	bl	3bd0 <eval_integer>
    4be8:	cmp	r0, #0
    4bec:	bne	4c74 <eval_integer+0x10a4>
    4bf0:	ldr	r0, [sp, #24]
    4bf4:	ldr	r1, [sp, #28]
    4bf8:	cmp	r7, #0
    4bfc:	beq	4c14 <eval_integer+0x1044>
    4c00:	ldrd	r2, [sl]
    4c04:	subs	r2, r0, r2
    4c08:	sbcs	r2, r1, r3
    4c0c:	strdlt	r0, [sl]
    4c10:	b	4c18 <eval_integer+0x1048>
    4c14:	strd	r0, [sl]
    4c18:	ldr	r0, [sp, #8]
    4c1c:	sub	r1, r0, #1
    4c20:	cmp	r7, r1
    4c24:	bge	4bcc <eval_integer+0xffc>
    4c28:	mov	r0, r9
    4c2c:	bl	0 <coda_cursor_goto_next_array_element>
    4c30:	cmp	r0, #0
    4c34:	bne	4c74 <eval_integer+0x10a4>
    4c38:	ldr	r0, [sp, #8]
    4c3c:	b	4bcc <eval_integer+0xffc>
    4c40:	movw	r1, #0
    4c44:	mvn	r0, #400	; 0x190
    4c48:	mov	r2, r8
    4c4c:	movt	r1, #0
    4c50:	bl	0 <coda_set_error>
    4c54:	mvn	r9, #0
    4c58:	b	4f58 <eval_integer+0x1388>
    4c5c:	ldr	r1, [r6, #24]
    4c60:	mov	r0, r5
    4c64:	mov	r2, sl
    4c68:	bl	3bd0 <eval_integer>
    4c6c:	cmp	r0, #0
    4c70:	beq	4f54 <eval_integer+0x1384>
    4c74:	mvn	r9, #0
    4c78:	b	4f58 <eval_integer+0x1388>
    4c7c:	add	r8, sp, #24
    4c80:	str	r4, [sl]
    4c84:	str	r4, [sl, #4]
    4c88:	ldr	r0, [r6, #24]
    4c8c:	cmp	r0, #0
    4c90:	beq	4cb8 <eval_integer+0x10e8>
    4c94:	ldr	r1, [r6, #20]
    4c98:	mov	r0, r5
    4c9c:	mov	r2, r8
    4ca0:	bl	2708 <eval_boolean>
    4ca4:	cmp	r0, #0
    4ca8:	bne	4f1c <eval_integer+0x134c>
    4cac:	ldr	r0, [sp, #24]
    4cb0:	cmp	r0, #0
    4cb4:	bne	4f28 <eval_integer+0x1358>
    4cb8:	ldr	r1, [r6, #20]
    4cbc:	mov	r0, r5
    4cc0:	mov	r2, r8
    4cc4:	bl	2708 <eval_boolean>
    4cc8:	cmp	r0, #0
    4ccc:	bne	4ec8 <eval_integer+0x12f8>
    4cd0:	ldr	r0, [sp, #24]
    4cd4:	cmp	r0, #0
    4cd8:	bne	4f34 <eval_integer+0x1364>
    4cdc:	ldrd	r0, [sl]
    4ce0:	adds	r0, r0, #1
    4ce4:	adc	r1, r1, #0
    4ce8:	strd	r0, [sl]
    4cec:	mov	r0, r7
    4cf0:	bl	0 <coda_cursor_goto_next_array_element>
    4cf4:	cmp	r0, #0
    4cf8:	bne	4ed4 <eval_integer+0x1304>
    4cfc:	ldr	r0, [sp, #24]
    4d00:	cmp	r0, #0
    4d04:	beq	4c88 <eval_integer+0x10b8>
    4d08:	b	4f34 <eval_integer+0x1364>
    4d0c:	ldr	r0, [sp, #8]
    4d10:	add	r7, r7, #1
    4d14:	cmp	r7, r0
    4d18:	bge	4de4 <eval_integer+0x1214>
    4d1c:	ldr	r1, [r6, #20]
    4d20:	mov	r0, r5
    4d24:	mov	r2, r8
    4d28:	bl	3bd0 <eval_integer>
    4d2c:	cmp	r0, #0
    4d30:	bne	4c74 <eval_integer+0x10a4>
    4d34:	ldr	r0, [sp, #24]
    4d38:	ldr	r1, [sp, #28]
    4d3c:	cmp	r7, #0
    4d40:	beq	4d58 <eval_integer+0x1188>
    4d44:	ldrd	r2, [sl]
    4d48:	subs	r2, r2, r0
    4d4c:	sbcs	r2, r3, r1
    4d50:	strdlt	r0, [sl]
    4d54:	b	4d5c <eval_integer+0x118c>
    4d58:	strd	r0, [sl]
    4d5c:	ldr	r0, [sp, #8]
    4d60:	sub	r1, r0, #1
    4d64:	cmp	r7, r1
    4d68:	bge	4d10 <eval_integer+0x1140>
    4d6c:	mov	r0, r9
    4d70:	bl	0 <coda_cursor_goto_next_array_element>
    4d74:	cmp	r0, #0
    4d78:	beq	4d0c <eval_integer+0x113c>
    4d7c:	b	4c74 <eval_integer+0x10a4>
    4d80:	ldr	r0, [sp, #8]
    4d84:	add	r7, r7, #1
    4d88:	cmp	r7, r0
    4d8c:	bge	4de4 <eval_integer+0x1214>
    4d90:	ldr	r1, [r6, #20]
    4d94:	mov	r0, r5
    4d98:	mov	r2, r8
    4d9c:	bl	3bd0 <eval_integer>
    4da0:	cmp	r0, #0
    4da4:	bne	4c74 <eval_integer+0x10a4>
    4da8:	ldrd	r0, [sl]
    4dac:	ldr	r2, [sp, #24]
    4db0:	ldr	r3, [sp, #28]
    4db4:	adds	r0, r0, r2
    4db8:	adc	r1, r1, r3
    4dbc:	strd	r0, [sl]
    4dc0:	ldr	r0, [sp, #8]
    4dc4:	sub	r1, r0, #1
    4dc8:	cmp	r7, r1
    4dcc:	bge	4d84 <eval_integer+0x11b4>
    4dd0:	mov	r0, r9
    4dd4:	bl	0 <coda_cursor_goto_next_array_element>
    4dd8:	cmp	r0, #0
    4ddc:	beq	4d80 <eval_integer+0x11b0>
    4de0:	b	4c74 <eval_integer+0x10a4>
    4de4:	add	r1, sp, #56	; 0x38
    4de8:	mov	r0, r9
    4dec:	b	4f4c <eval_integer+0x137c>
    4df0:	ldr	r0, [sp, #24]
    4df4:	add	r7, r7, #1
    4df8:	cmp	r7, r0
    4dfc:	bge	4e48 <eval_integer+0x1278>
    4e00:	ldr	r1, [r6, #20]
    4e04:	mov	r0, r5
    4e08:	mov	r2, r8
    4e0c:	bl	2708 <eval_boolean>
    4e10:	cmp	r0, #0
    4e14:	bne	4f58 <eval_integer+0x1388>
    4e18:	ldr	r0, [sp, #8]
    4e1c:	cmp	r0, #0
    4e20:	bne	4f7c <eval_integer+0x13ac>
    4e24:	ldr	r0, [sp, #24]
    4e28:	sub	r1, r0, #1
    4e2c:	cmp	r7, r1
    4e30:	bge	4df4 <eval_integer+0x1224>
    4e34:	mov	r0, r4
    4e38:	bl	0 <coda_cursor_goto_next_array_element>
    4e3c:	cmp	r0, #0
    4e40:	beq	4df0 <eval_integer+0x1220>
    4e44:	b	4f58 <eval_integer+0x1388>
    4e48:	mvn	r0, #0
    4e4c:	add	r1, sp, #56	; 0x38
    4e50:	str	r0, [sl]
    4e54:	str	r0, [sl, #4]
    4e58:	mov	r0, r4
    4e5c:	b	4f4c <eval_integer+0x137c>
    4e60:	movw	r1, #0
    4e64:	movt	r1, #0
    4e68:	b	3ee4 <eval_integer+0x314>
    4e6c:	movw	r1, #0
    4e70:	movt	r1, #0
    4e74:	b	3ee4 <eval_integer+0x314>
    4e78:	ldr	r0, [sp, #8]
    4e7c:	cmp	r0, #7
    4e80:	bne	4ee0 <eval_integer+0x1310>
    4e84:	add	r1, sp, #24
    4e88:	mov	r0, r6
    4e8c:	bl	0 <coda_cursor_read_uint64>
    4e90:	cmp	r0, #0
    4e94:	bne	441c <eval_integer+0x84c>
    4e98:	ldr	r0, [sp, #24]
    4e9c:	ldr	r1, [sp, #28]
    4ea0:	strd	r0, [sl]
    4ea4:	b	4ef4 <eval_integer+0x1324>
    4ea8:	movw	r1, #0
    4eac:	mvn	r0, #102	; 0x66
    4eb0:	movt	r1, #0
    4eb4:	b	3ee8 <eval_integer+0x318>
    4eb8:	mov	r9, #0
    4ebc:	strd	r8, [sl]
    4ec0:	str	r9, [r5, #560]	; 0x230
    4ec4:	b	4f58 <eval_integer+0x1388>
    4ec8:	ldr	r0, [pc, #668]	; 516c <eval_integer+0x159c>
    4ecc:	ldr	r1, [pc, r0]
    4ed0:	b	4600 <eval_integer+0xa30>
    4ed4:	ldr	r0, [pc, #660]	; 5170 <eval_integer+0x15a0>
    4ed8:	ldr	r1, [pc, r0]
    4edc:	b	4600 <eval_integer+0xa30>
    4ee0:	mov	r0, r6
    4ee4:	mov	r1, sl
    4ee8:	bl	0 <coda_cursor_read_int64>
    4eec:	cmp	r0, #0
    4ef0:	bne	441c <eval_integer+0x84c>
    4ef4:	mov	r0, r5
    4ef8:	bl	0 <coda_set_option_perform_conversions>
    4efc:	add	r1, sp, #56	; 0x38
    4f00:	mov	r0, r6
    4f04:	b	4f4c <eval_integer+0x137c>
    4f08:	movw	r1, #0
    4f0c:	mvn	r0, #400	; 0x190
    4f10:	mov	r2, r5
    4f14:	movt	r1, #0
    4f18:	b	4c50 <eval_integer+0x1080>
    4f1c:	ldr	r0, [pc, #580]	; 5168 <eval_integer+0x1598>
    4f20:	ldr	r1, [pc, r0]
    4f24:	b	4600 <eval_integer+0xa30>
    4f28:	mvn	r0, #0
    4f2c:	str	r0, [sl]
    4f30:	str	r0, [sl, #4]
    4f34:	ldr	r0, [pc, #568]	; 5174 <eval_integer+0x15a4>
    4f38:	ldr	r1, [pc, r0]
    4f3c:	bl	0 <__aeabi_read_tp>
    4f40:	str	r9, [r0, r1]
    4f44:	add	r1, sp, #56	; 0x38
    4f48:	mov	r0, r7
    4f4c:	mov	r2, #520	; 0x208
    4f50:	bl	0 <memcpy>
    4f54:	mov	r9, #0
    4f58:	mov	r0, r9
    4f5c:	sub	sp, fp, #28
    4f60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f64:	movw	r1, #0
    4f68:	mvn	r0, #400	; 0x190
    4f6c:	mov	r2, r5
    4f70:	movt	r1, #0
    4f74:	bl	0 <coda_set_error>
    4f78:	b	4c74 <eval_integer+0x10a4>
    4f7c:	add	r1, sp, #56	; 0x38
    4f80:	mov	r0, r4
    4f84:	mov	r2, #520	; 0x208
    4f88:	mov	r9, #0
    4f8c:	stm	sl, {r7, r9}
    4f90:	bl	0 <memcpy>
    4f94:	b	4f58 <eval_integer+0x1388>
    4f98:	movw	r0, #0
    4f9c:	movw	r1, #0
    4fa0:	movw	r3, #0
    4fa4:	movw	r2, #2823	; 0xb07
    4fa8:	movt	r0, #0
    4fac:	b	5154 <eval_integer+0x1584>
    4fb0:	movw	r0, #0
    4fb4:	movw	r1, #0
    4fb8:	movw	r3, #0
    4fbc:	movw	r2, #2563	; 0xa03
    4fc0:	b	5150 <eval_integer+0x1580>
    4fc4:	movw	r0, #0
    4fc8:	movw	r1, #0
    4fcc:	movw	r3, #0
    4fd0:	movw	r2, #2761	; 0xac9
    4fd4:	b	5150 <eval_integer+0x1580>
    4fd8:	movw	r0, #0
    4fdc:	movw	r1, #0
    4fe0:	movw	r3, #0
    4fe4:	movw	r2, #2724	; 0xaa4
    4fe8:	b	5150 <eval_integer+0x1580>
    4fec:	movw	r0, #0
    4ff0:	movw	r1, #0
    4ff4:	movw	r3, #0
    4ff8:	movw	r2, #2627	; 0xa43
    4ffc:	b	5150 <eval_integer+0x1580>
    5000:	movw	r0, #0
    5004:	movw	r1, #0
    5008:	movw	r3, #0
    500c:	movw	r2, #2287	; 0x8ef
    5010:	b	5150 <eval_integer+0x1580>
    5014:	movw	r0, #0
    5018:	movw	r1, #0
    501c:	movw	r3, #0
    5020:	movw	r2, #2792	; 0xae8
    5024:	b	5150 <eval_integer+0x1580>
    5028:	movw	r0, #0
    502c:	movw	r1, #0
    5030:	movw	r3, #0
    5034:	movw	r2, #2242	; 0x8c2
    5038:	b	5150 <eval_integer+0x1580>
    503c:	movw	r0, #0
    5040:	movw	r1, #0
    5044:	movw	r3, #0
    5048:	movw	r2, #2605	; 0xa2d
    504c:	b	5150 <eval_integer+0x1580>
    5050:	movw	r0, #0
    5054:	movw	r1, #0
    5058:	movw	r3, #0
    505c:	movw	r2, #2194	; 0x892
    5060:	b	5150 <eval_integer+0x1580>
    5064:	movw	r0, #0
    5068:	movw	r1, #0
    506c:	movw	r3, #0
    5070:	movw	r2, #2702	; 0xa8e
    5074:	b	5150 <eval_integer+0x1580>
    5078:	movw	r0, #0
    507c:	movw	r1, #0
    5080:	movw	r3, #0
    5084:	movw	r2, #2383	; 0x94f
    5088:	b	5150 <eval_integer+0x1580>
    508c:	movw	r0, #0
    5090:	movw	r1, #0
    5094:	movw	r3, #0
    5098:	movw	r2, #2689	; 0xa81
    509c:	b	5150 <eval_integer+0x1580>
    50a0:	movw	r0, #0
    50a4:	movw	r1, #0
    50a8:	movw	r3, #0
    50ac:	movw	r2, #2435	; 0x983
    50b0:	b	5150 <eval_integer+0x1580>
    50b4:	movw	r0, #0
    50b8:	movw	r1, #0
    50bc:	movw	r3, #0
    50c0:	movw	r2, #2335	; 0x91f
    50c4:	b	5150 <eval_integer+0x1580>
    50c8:	movw	r0, #0
    50cc:	movw	r1, #0
    50d0:	movw	r3, #0
    50d4:	movw	r2, #2648	; 0xa58
    50d8:	b	5150 <eval_integer+0x1580>
    50dc:	movw	r0, #0
    50e0:	movw	r1, #0
    50e4:	movw	r3, #0
    50e8:	movw	r2, #2665	; 0xa69
    50ec:	b	5150 <eval_integer+0x1580>
    50f0:	movw	r0, #0
    50f4:	movw	r1, #0
    50f8:	movw	r3, #0
    50fc:	mov	r2, #2528	; 0x9e0
    5100:	b	5150 <eval_integer+0x1580>
    5104:	movw	r0, #0
    5108:	movw	r1, #0
    510c:	movw	r3, #0
    5110:	movw	r2, #2679	; 0xa77
    5114:	b	5150 <eval_integer+0x1580>
    5118:	movw	r0, #0
    511c:	movw	r1, #0
    5120:	movw	r3, #0
    5124:	movw	r2, #2586	; 0xa1a
    5128:	b	5150 <eval_integer+0x1580>
    512c:	movw	r0, #0
    5130:	movw	r1, #0
    5134:	movw	r3, #0
    5138:	movw	r2, #2491	; 0x9bb
    513c:	b	5150 <eval_integer+0x1580>
    5140:	movw	r0, #0
    5144:	movw	r1, #0
    5148:	movw	r3, #0
    514c:	mov	r2, #1936	; 0x790
    5150:	movt	r0, #0
    5154:	movt	r1, #0
    5158:	movt	r3, #0
    515c:	bl	0 <__assert_fail>
    5160:	.word	0x00000b84
    5164:	.word	0x00000b60
    5168:	.word	0x00000240
    516c:	.word	0x00000298
    5170:	.word	0x00000290
    5174:	.word	0x00000234

00005178 <coda_expression_eval_float>:
    5178:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    517c:	add	fp, sp, #24
    5180:	sub	sp, sp, #568	; 0x238
    5184:	mov	r6, r0
    5188:	ldr	r0, [r0, #4]
    518c:	cmp	r0, #2
    5190:	bne	51c0 <coda_expression_eval_float+0x48>
    5194:	mov	r5, r2
    5198:	mov	r4, r1
    519c:	cmp	r1, #0
    51a0:	beq	51d8 <coda_expression_eval_float+0x60>
    51a4:	mov	r0, sp
    51a8:	mov	r1, r4
    51ac:	mov	r2, #520	; 0x208
    51b0:	str	r4, [sp]
    51b4:	add	r0, r0, #8
    51b8:	bl	0 <memcpy>
    51bc:	b	51ec <coda_expression_eval_float+0x74>
    51c0:	movw	r1, #0
    51c4:	movt	r1, #0
    51c8:	mvn	r0, #99	; 0x63
    51cc:	bl	0 <coda_set_error>
    51d0:	mvn	r5, #0
    51d4:	b	5234 <coda_expression_eval_float+0xbc>
    51d8:	ldr	r0, [r6, #8]
    51dc:	cmp	r0, #0
    51e0:	beq	5268 <coda_expression_eval_float+0xf0>
    51e4:	mov	r0, #0
    51e8:	str	r0, [sp]
    51ec:	vmov.i32	q8, #0	; 0x00000000
    51f0:	mov	r7, sp
    51f4:	mov	r1, r6
    51f8:	mov	r2, r5
    51fc:	add	r0, r7, #544	; 0x220
    5200:	vst1.64	{d16-d17}, [r0]
    5204:	add	r0, r7, #528	; 0x210
    5208:	vst1.64	{d16-d17}, [r0]
    520c:	mov	r0, #0
    5210:	str	r0, [sp, #560]	; 0x230
    5214:	mov	r0, r7
    5218:	bl	5274 <eval_float>
    521c:	cmp	r0, #0
    5220:	mov	r5, r0
    5224:	mvnne	r5, #0
    5228:	cmp	r4, #0
    522c:	cmpne	r0, #0
    5230:	bne	5240 <coda_expression_eval_float+0xc8>
    5234:	mov	r0, r5
    5238:	sub	sp, fp, #24
    523c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    5240:	add	r6, r7, #8
    5244:	mov	r0, r4
    5248:	mov	r1, r6
    524c:	bl	0 <coda_cursor_compare>
    5250:	mvn	r5, #0
    5254:	cmp	r0, #0
    5258:	beq	5234 <coda_expression_eval_float+0xbc>
    525c:	mov	r0, r6
    5260:	bl	0 <coda_cursor_add_to_error_message>
    5264:	b	5234 <coda_expression_eval_float+0xbc>
    5268:	movw	r1, #0
    526c:	movt	r1, #0
    5270:	b	51c8 <coda_expression_eval_float+0x50>

00005274 <eval_float>:
    5274:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5278:	add	fp, sp, #28
    527c:	sub	sp, sp, #4
    5280:	vpush	{d8}
    5284:	sub	sp, sp, #560	; 0x230
    5288:	mov	r5, r0
    528c:	ldr	r0, [r1, #4]
    5290:	mov	r9, r2
    5294:	mov	r6, r1
    5298:	cmp	r0, #1
    529c:	bne	52d0 <eval_float+0x5c>
    52a0:	add	r2, sp, #32
    52a4:	mov	r0, r5
    52a8:	mov	r1, r6
    52ac:	bl	3bd0 <eval_integer>
    52b0:	mvn	r7, #0
    52b4:	cmp	r0, #0
    52b8:	bne	5de4 <eval_float+0xb70>
    52bc:	ldr	r0, [sp, #32]
    52c0:	ldr	r1, [sp, #36]	; 0x24
    52c4:	bl	0 <__aeabi_l2d>
    52c8:	strd	r0, [r9]
    52cc:	b	5de0 <eval_float+0xb6c>
    52d0:	ldr	r0, [r6]
    52d4:	cmp	r0, #86	; 0x56
    52d8:	bhi	5eb0 <eval_float+0xc3c>
    52dc:	add	r1, pc, #0
    52e0:	ldr	pc, [r1, r0, lsl #2]
    52e4:	.word	0x00005440
    52e8:	.word	0x0000589c
    52ec:	.word	0x00005eb0
    52f0:	.word	0x000059e4
    52f4:	.word	0x00005eb0
    52f8:	.word	0x00005eb0
    52fc:	.word	0x00005eb0
    5300:	.word	0x00005eb0
    5304:	.word	0x00005768
    5308:	.word	0x000056e4
    530c:	.word	0x00005eb0
    5310:	.word	0x000055b0
    5314:	.word	0x00005eb0
    5318:	.word	0x00005eb0
    531c:	.word	0x00005eb0
    5320:	.word	0x00005eb0
    5324:	.word	0x00005eb0
    5328:	.word	0x00005648
    532c:	.word	0x00005eb0
    5330:	.word	0x00005568
    5334:	.word	0x00005eb0
    5338:	.word	0x00005eb0
    533c:	.word	0x00005eb0
    5340:	.word	0x00005eb0
    5344:	.word	0x00005670
    5348:	.word	0x00005eb0
    534c:	.word	0x00005eb0
    5350:	.word	0x00005eb0
    5354:	.word	0x00005eb0
    5358:	.word	0x000054e0
    535c:	.word	0x000056bc
    5360:	.word	0x00005eb0
    5364:	.word	0x00005eb0
    5368:	.word	0x00005eb0
    536c:	.word	0x00005eb0
    5370:	.word	0x00005eb0
    5374:	.word	0x00005eb0
    5378:	.word	0x00005eb0
    537c:	.word	0x00005eb0
    5380:	.word	0x00005eb0
    5384:	.word	0x00005eb0
    5388:	.word	0x00005eb0
    538c:	.word	0x00005474
    5390:	.word	0x00005eb0
    5394:	.word	0x00005eb0
    5398:	.word	0x00005eb0
    539c:	.word	0x00005eb0
    53a0:	.word	0x00005eb0
    53a4:	.word	0x00005eb0
    53a8:	.word	0x00005eb0
    53ac:	.word	0x00005eb0
    53b0:	.word	0x00005eb0
    53b4:	.word	0x00005eb0
    53b8:	.word	0x00005eb0
    53bc:	.word	0x00005eb0
    53c0:	.word	0x00005eb0
    53c4:	.word	0x000054a0
    53c8:	.word	0x00005600
    53cc:	.word	0x00005a6c
    53d0:	.word	0x00005570
    53d4:	.word	0x00005af8
    53d8:	.word	0x00005eb0
    53dc:	.word	0x00005eb0
    53e0:	.word	0x00005eb0
    53e4:	.word	0x00005eb0
    53e8:	.word	0x00005eb0
    53ec:	.word	0x000057ec
    53f0:	.word	0x00005eb0
    53f4:	.word	0x00005eb0
    53f8:	.word	0x00005eb0
    53fc:	.word	0x00005eb0
    5400:	.word	0x00005eb0
    5404:	.word	0x000059a8
    5408:	.word	0x00005eb0
    540c:	.word	0x00005eb0
    5410:	.word	0x00005eb0
    5414:	.word	0x00005eb0
    5418:	.word	0x00005eb0
    541c:	.word	0x00005ab8
    5420:	.word	0x000058dc
    5424:	.word	0x00005eb0
    5428:	.word	0x00005eb0
    542c:	.word	0x00005eb0
    5430:	.word	0x00005eb0
    5434:	.word	0x00005eb0
    5438:	.word	0x00005eb0
    543c:	.word	0x00005958
    5440:	ldr	r1, [r6, #16]
    5444:	mov	r0, r5
    5448:	mov	r2, r9
    544c:	bl	5274 <eval_float>
    5450:	mvn	r7, #0
    5454:	cmp	r0, #0
    5458:	bne	5de4 <eval_float+0xb70>
    545c:	vldr	d16, [r9]
    5460:	vcmpe.f64	d16, #0.0
    5464:	vneg.f64	d17, d16
    5468:	vmrs	APSR_nzcv, fpscr
    546c:	vselge.f64	d16, d16, d17
    5470:	b	5ddc <eval_float+0xb68>
    5474:	ldr	r1, [r6, #16]
    5478:	add	r2, sp, #32
    547c:	mov	r0, r5
    5480:	bl	2708 <eval_boolean>
    5484:	cmp	r0, #0
    5488:	bne	5d3c <eval_float+0xac8>
    548c:	ldr	r0, [sp, #32]
    5490:	cmp	r0, #0
    5494:	beq	5d24 <eval_float+0xab0>
    5498:	ldr	r1, [r6, #20]
    549c:	b	5d28 <eval_float+0xab4>
    54a0:	ldr	r1, [r6, #16]
    54a4:	add	r2, sp, #32
    54a8:	mov	r0, r5
    54ac:	bl	5274 <eval_float>
    54b0:	cmp	r0, #0
    54b4:	bne	5d3c <eval_float+0xac8>
    54b8:	ldr	r1, [r6, #20]
    54bc:	add	r2, sp, #24
    54c0:	mov	r0, r5
    54c4:	bl	5274 <eval_float>
    54c8:	cmp	r0, #0
    54cc:	bne	5d3c <eval_float+0xac8>
    54d0:	vldr	d16, [sp, #24]
    54d4:	vldr	d17, [sp, #32]
    54d8:	vcmpe.f64	d17, d16
    54dc:	b	563c <eval_float+0x3c8>
    54e0:	ldr	r7, [r6, #16]
    54e4:	ldr	r0, [r7, #4]
    54e8:	cmp	r0, #3
    54ec:	beq	5b20 <eval_float+0x8ac>
    54f0:	cmp	r0, #4
    54f4:	bne	5b80 <eval_float+0x90c>
    54f8:	ldr	r0, [r5]
    54fc:	cmp	r0, #0
    5500:	beq	5f20 <eval_float+0xcac>
    5504:	add	r6, r5, #8
    5508:	add	r0, sp, #32
    550c:	mov	r2, #520	; 0x208
    5510:	mov	r1, r6
    5514:	bl	0 <memcpy>
    5518:	mov	r0, r5
    551c:	mov	r1, r7
    5520:	bl	7afc <eval_cursor>
    5524:	cmp	r0, #0
    5528:	bne	5d3c <eval_float+0xac8>
    552c:	bl	0 <coda_get_option_perform_conversions>
    5530:	mov	r4, r0
    5534:	mov	r0, #0
    5538:	bl	0 <coda_set_option_perform_conversions>
    553c:	mov	r0, r6
    5540:	mov	r1, r9
    5544:	bl	0 <coda_cursor_read_double>
    5548:	mov	r5, r0
    554c:	mov	r0, r4
    5550:	bl	0 <coda_set_option_perform_conversions>
    5554:	cmp	r5, #0
    5558:	bne	5d3c <eval_float+0xac8>
    555c:	add	r1, sp, #32
    5560:	mov	r0, r6
    5564:	b	5ce0 <eval_float+0xa6c>
    5568:	vldr	d16, [r6, #16]
    556c:	b	5ddc <eval_float+0xb68>
    5570:	ldr	r1, [r6, #16]
    5574:	add	r2, sp, #32
    5578:	mov	r0, r5
    557c:	bl	5274 <eval_float>
    5580:	cmp	r0, #0
    5584:	bne	5d3c <eval_float+0xac8>
    5588:	ldr	r1, [r6, #20]
    558c:	add	r2, sp, #24
    5590:	mov	r0, r5
    5594:	bl	5274 <eval_float>
    5598:	cmp	r0, #0
    559c:	bne	5d3c <eval_float+0xac8>
    55a0:	vldr	d16, [sp, #24]
    55a4:	vldr	d17, [sp, #32]
    55a8:	vmul.f64	d16, d17, d16
    55ac:	b	5ddc <eval_float+0xb68>
    55b0:	ldr	r0, [r5]
    55b4:	cmp	r0, #0
    55b8:	beq	5ed0 <eval_float+0xc5c>
    55bc:	add	r7, r5, #8
    55c0:	add	r0, sp, #32
    55c4:	mov	r2, #520	; 0x208
    55c8:	mov	r1, r7
    55cc:	bl	0 <memcpy>
    55d0:	ldr	r1, [r6, #16]
    55d4:	mov	r0, r5
    55d8:	bl	7afc <eval_cursor>
    55dc:	cmp	r0, #0
    55e0:	bne	5d3c <eval_float+0xac8>
    55e4:	ldr	r1, [r6, #20]
    55e8:	mov	r0, r5
    55ec:	mov	r2, r9
    55f0:	bl	5274 <eval_float>
    55f4:	cmp	r0, #0
    55f8:	bne	5d3c <eval_float+0xac8>
    55fc:	b	5cd8 <eval_float+0xa64>
    5600:	ldr	r1, [r6, #16]
    5604:	add	r2, sp, #32
    5608:	mov	r0, r5
    560c:	bl	5274 <eval_float>
    5610:	cmp	r0, #0
    5614:	bne	5d3c <eval_float+0xac8>
    5618:	ldr	r1, [r6, #20]
    561c:	add	r2, sp, #24
    5620:	mov	r0, r5
    5624:	bl	5274 <eval_float>
    5628:	cmp	r0, #0
    562c:	bne	5d3c <eval_float+0xac8>
    5630:	vldr	d16, [sp, #24]
    5634:	vldr	d17, [sp, #32]
    5638:	vcmpe.f64	d16, d17
    563c:	vmrs	APSR_nzcv, fpscr
    5640:	vselgt.f64	d16, d17, d16
    5644:	b	5ddc <eval_float+0xb68>
    5648:	ldr	r1, [r6, #16]
    564c:	mov	r0, r5
    5650:	mov	r2, r9
    5654:	bl	5274 <eval_float>
    5658:	mvn	r7, #0
    565c:	cmp	r0, #0
    5660:	bne	5de4 <eval_float+0xb70>
    5664:	vldr	d16, [r9]
    5668:	vrintp.f64	d16, d16
    566c:	b	5ddc <eval_float+0xb68>
    5670:	ldr	r1, [r6, #16]
    5674:	add	r2, sp, #32
    5678:	mov	r0, r5
    567c:	bl	5274 <eval_float>
    5680:	cmp	r0, #0
    5684:	bne	5d3c <eval_float+0xac8>
    5688:	ldr	r1, [r6, #20]
    568c:	add	r2, sp, #24
    5690:	mov	r0, r5
    5694:	bl	5274 <eval_float>
    5698:	cmp	r0, #0
    569c:	bne	5d3c <eval_float+0xac8>
    56a0:	vldr	d16, [sp, #24]
    56a4:	vcmp.f64	d16, #0.0
    56a8:	vmrs	APSR_nzcv, fpscr
    56ac:	bne	5dd4 <eval_float+0xb60>
    56b0:	movw	r1, #0
    56b4:	movt	r1, #0
    56b8:	b	5d58 <eval_float+0xae4>
    56bc:	ldr	r1, [r6, #16]
    56c0:	mov	r0, r5
    56c4:	mov	r2, r9
    56c8:	bl	5274 <eval_float>
    56cc:	mvn	r7, #0
    56d0:	cmp	r0, #0
    56d4:	bne	5de4 <eval_float+0xb70>
    56d8:	vldr	d16, [r9]
    56dc:	vrintm.f64	d16, d16
    56e0:	b	5ddc <eval_float+0xb68>
    56e4:	ldr	r0, [r5]
    56e8:	cmp	r0, #0
    56ec:	beq	5ee4 <eval_float+0xc70>
    56f0:	add	r7, r5, #8
    56f4:	add	r0, sp, #32
    56f8:	mov	r2, #520	; 0x208
    56fc:	mov	r1, r7
    5700:	bl	0 <memcpy>
    5704:	ldr	r1, [r6, #16]
    5708:	mov	r0, r5
    570c:	bl	7afc <eval_cursor>
    5710:	cmp	r0, #0
    5714:	bne	5d3c <eval_float+0xac8>
    5718:	add	r1, sp, #16
    571c:	mov	r0, r7
    5720:	bl	0 <coda_cursor_get_num_elements>
    5724:	cmp	r0, #0
    5728:	bne	5d3c <eval_float+0xac8>
    572c:	bl	0 <coda_NaN>
    5730:	vstr	d0, [r9]
    5734:	ldr	r0, [sp, #16]
    5738:	cmp	r0, #1
    573c:	blt	5cd8 <eval_float+0xa64>
    5740:	mov	r0, r7
    5744:	bl	0 <coda_cursor_goto_first_array_element>
    5748:	cmp	r0, #0
    574c:	bne	5d3c <eval_float+0xac8>
    5750:	ldr	r0, [sp, #16]
    5754:	cmp	r0, #1
    5758:	blt	5cd8 <eval_float+0xa64>
    575c:	mov	r4, #0
    5760:	add	r8, sp, #24
    5764:	b	5ba8 <eval_float+0x934>
    5768:	ldr	r0, [r5]
    576c:	cmp	r0, #0
    5770:	beq	5ef8 <eval_float+0xc84>
    5774:	add	r7, r5, #8
    5778:	add	r0, sp, #32
    577c:	mov	r2, #520	; 0x208
    5780:	mov	r1, r7
    5784:	bl	0 <memcpy>
    5788:	ldr	r1, [r6, #16]
    578c:	mov	r0, r5
    5790:	bl	7afc <eval_cursor>
    5794:	cmp	r0, #0
    5798:	bne	5d3c <eval_float+0xac8>
    579c:	add	r1, sp, #16
    57a0:	mov	r0, r7
    57a4:	bl	0 <coda_cursor_get_num_elements>
    57a8:	cmp	r0, #0
    57ac:	bne	5d3c <eval_float+0xac8>
    57b0:	bl	0 <coda_NaN>
    57b4:	vstr	d0, [r9]
    57b8:	ldr	r0, [sp, #16]
    57bc:	cmp	r0, #1
    57c0:	blt	5cd8 <eval_float+0xa64>
    57c4:	mov	r0, r7
    57c8:	bl	0 <coda_cursor_goto_first_array_element>
    57cc:	cmp	r0, #0
    57d0:	bne	5d3c <eval_float+0xac8>
    57d4:	ldr	r0, [sp, #16]
    57d8:	cmp	r0, #1
    57dc:	blt	5cd8 <eval_float+0xa64>
    57e0:	mov	r4, #0
    57e4:	add	r8, sp, #24
    57e8:	b	5c18 <eval_float+0x9a4>
    57ec:	ldr	r1, [r6, #16]
    57f0:	add	r2, sp, #32
    57f4:	mov	r0, r5
    57f8:	bl	5274 <eval_float>
    57fc:	cmp	r0, #0
    5800:	bne	5d3c <eval_float+0xac8>
    5804:	ldr	r1, [r6, #20]
    5808:	ldr	r0, [r1, #4]
    580c:	cmp	r0, #1
    5810:	bne	5cec <eval_float+0xa78>
    5814:	add	r2, sp, #16
    5818:	mov	r0, r5
    581c:	bl	3bd0 <eval_integer>
    5820:	cmp	r0, #0
    5824:	bne	5d3c <eval_float+0xac8>
    5828:	ldr	r0, [sp, #16]
    582c:	ldr	r1, [sp, #20]
    5830:	vldr	d8, [sp, #32]
    5834:	adds	r2, r0, #64	; 0x40
    5838:	adc	r3, r1, #0
    583c:	rsbs	r2, r2, #128	; 0x80
    5840:	rscs	r2, r3, #0
    5844:	bcc	5e18 <eval_float+0xba4>
    5848:	cmn	r0, #1
    584c:	ble	5e3c <eval_float+0xbc8>
    5850:	cmp	r0, #0
    5854:	beq	5e70 <eval_float+0xbfc>
    5858:	vmov.f64	d0, #112	; 0x3f800000  1.0
    585c:	ands	r2, r0, #3
    5860:	sub	r1, r0, #1
    5864:	beq	5878 <eval_float+0x604>
    5868:	vmul.f64	d0, d8, d0
    586c:	subs	r2, r2, #1
    5870:	sub	r0, r0, #1
    5874:	bne	5868 <eval_float+0x5f4>
    5878:	cmp	r1, #3
    587c:	bcc	5e28 <eval_float+0xbb4>
    5880:	vmul.f64	d16, d8, d0
    5884:	subs	r0, r0, #4
    5888:	vmul.f64	d16, d8, d16
    588c:	vmul.f64	d16, d8, d16
    5890:	vmul.f64	d0, d8, d16
    5894:	bne	5880 <eval_float+0x60c>
    5898:	b	5e28 <eval_float+0xbb4>
    589c:	ldr	r1, [r6, #16]
    58a0:	add	r2, sp, #32
    58a4:	mov	r0, r5
    58a8:	bl	5274 <eval_float>
    58ac:	cmp	r0, #0
    58b0:	bne	5d3c <eval_float+0xac8>
    58b4:	ldr	r1, [r6, #20]
    58b8:	add	r2, sp, #24
    58bc:	mov	r0, r5
    58c0:	bl	5274 <eval_float>
    58c4:	cmp	r0, #0
    58c8:	bne	5d3c <eval_float+0xac8>
    58cc:	vldr	d16, [sp, #24]
    58d0:	vldr	d17, [sp, #32]
    58d4:	vadd.f64	d16, d17, d16
    58d8:	b	5ddc <eval_float+0xb68>
    58dc:	ldr	r1, [r6, #16]
    58e0:	add	r0, sp, #8
    58e4:	add	r2, sp, #32
    58e8:	add	r3, sp, #16
    58ec:	str	r0, [sp]
    58f0:	mov	r0, r5
    58f4:	bl	60dc <eval_string>
    58f8:	cmp	r0, #0
    58fc:	bne	5d3c <eval_float+0xac8>
    5900:	ldr	r0, [sp, #16]
    5904:	cmn	r0, #1
    5908:	ble	5d44 <eval_float+0xad0>
    590c:	cmp	r0, #0
    5910:	beq	5d50 <eval_float+0xadc>
    5914:	ldr	r1, [sp, #32]
    5918:	mov	r2, #0
    591c:	add	r3, sp, #12
    5920:	add	r0, r1, r0
    5924:	ldr	r1, [sp, #8]
    5928:	strb	r2, [r1, r0]
    592c:	add	r0, sp, #4
    5930:	add	r2, sp, #24
    5934:	ldr	r1, [r6, #20]
    5938:	str	r0, [sp]
    593c:	mov	r0, r5
    5940:	bl	60dc <eval_string>
    5944:	cmp	r0, #0
    5948:	beq	5d68 <eval_float+0xaf4>
    594c:	ldr	r0, [sp, #8]
    5950:	bl	0 <free>
    5954:	b	5d3c <eval_float+0xac8>
    5958:	ldr	r0, [r6, #12]
    595c:	ldr	r1, [r6, #16]
    5960:	ldrb	r0, [r0]
    5964:	add	r4, r5, r0, lsl #3
    5968:	mov	r0, r5
    596c:	ldr	r8, [r4, #-312]!	; 0xfffffec8
    5970:	ldr	sl, [r4, #4]
    5974:	mov	r2, r4
    5978:	bl	3bd0 <eval_integer>
    597c:	mvn	r7, #0
    5980:	cmp	r0, #0
    5984:	bne	5de4 <eval_float+0xb70>
    5988:	ldr	r1, [r6, #20]
    598c:	mov	r0, r5
    5990:	mov	r2, r9
    5994:	bl	5274 <eval_float>
    5998:	cmp	r0, #0
    599c:	bne	5de4 <eval_float+0xb70>
    59a0:	stm	r4, {r8, sl}
    59a4:	b	5de0 <eval_float+0xb6c>
    59a8:	ldr	r1, [r6, #16]
    59ac:	mov	r0, r5
    59b0:	mov	r2, r9
    59b4:	bl	5274 <eval_float>
    59b8:	mvn	r7, #0
    59bc:	cmp	r0, #0
    59c0:	bne	5de4 <eval_float+0xb70>
    59c4:	vldr	d16, [r9]
    59c8:	vcmpe.f64	d16, #0.0
    59cc:	vmrs	APSR_nzcv, fpscr
    59d0:	bpl	5d14 <eval_float+0xaa0>
    59d4:	vmov.f64	d17, #224	; 0xbf000000 -0.5
    59d8:	vadd.f64	d16, d16, d17
    59dc:	vrintp.f64	d16, d16
    59e0:	b	5ddc <eval_float+0xb68>
    59e4:	ldr	r0, [r5]
    59e8:	cmp	r0, #0
    59ec:	beq	5f0c <eval_float+0xc98>
    59f0:	add	r7, r5, #8
    59f4:	add	r0, sp, #32
    59f8:	mov	r2, #520	; 0x208
    59fc:	mov	r1, r7
    5a00:	bl	0 <memcpy>
    5a04:	ldr	r1, [r6, #16]
    5a08:	mov	r0, r5
    5a0c:	bl	7afc <eval_cursor>
    5a10:	cmp	r0, #0
    5a14:	bne	5d3c <eval_float+0xac8>
    5a18:	add	r1, sp, #16
    5a1c:	mov	r0, r7
    5a20:	bl	0 <coda_cursor_get_num_elements>
    5a24:	cmp	r0, #0
    5a28:	bne	5d3c <eval_float+0xac8>
    5a2c:	mov	r0, #0
    5a30:	str	r0, [r9]
    5a34:	str	r0, [r9, #4]
    5a38:	ldr	r0, [sp, #16]
    5a3c:	cmp	r0, #1
    5a40:	blt	5cd8 <eval_float+0xa64>
    5a44:	mov	r0, r7
    5a48:	bl	0 <coda_cursor_goto_first_array_element>
    5a4c:	cmp	r0, #0
    5a50:	bne	5d3c <eval_float+0xac8>
    5a54:	ldr	r0, [sp, #16]
    5a58:	cmp	r0, #1
    5a5c:	blt	5cd8 <eval_float+0xa64>
    5a60:	mov	r4, #0
    5a64:	add	r8, sp, #24
    5a68:	b	5c88 <eval_float+0xa14>
    5a6c:	ldr	r1, [r6, #16]
    5a70:	add	r2, sp, #32
    5a74:	mov	r0, r5
    5a78:	bl	5274 <eval_float>
    5a7c:	cmp	r0, #0
    5a80:	bne	5d3c <eval_float+0xac8>
    5a84:	ldr	r1, [r6, #20]
    5a88:	add	r2, sp, #24
    5a8c:	mov	r0, r5
    5a90:	bl	5274 <eval_float>
    5a94:	cmp	r0, #0
    5a98:	bne	5d3c <eval_float+0xac8>
    5a9c:	vldr	d1, [sp, #24]
    5aa0:	vcmp.f64	d1, #0.0
    5aa4:	vmrs	APSR_nzcv, fpscr
    5aa8:	bne	5df8 <eval_float+0xb84>
    5aac:	movw	r1, #0
    5ab0:	movt	r1, #0
    5ab4:	b	5d58 <eval_float+0xae4>
    5ab8:	ldr	r1, [r6, #16]
    5abc:	add	r2, sp, #32
    5ac0:	mov	r0, r5
    5ac4:	bl	5274 <eval_float>
    5ac8:	cmp	r0, #0
    5acc:	bne	5d3c <eval_float+0xac8>
    5ad0:	ldr	r1, [r6, #20]
    5ad4:	add	r2, sp, #24
    5ad8:	mov	r0, r5
    5adc:	bl	5274 <eval_float>
    5ae0:	cmp	r0, #0
    5ae4:	bne	5d3c <eval_float+0xac8>
    5ae8:	vldr	d16, [sp, #24]
    5aec:	vldr	d17, [sp, #32]
    5af0:	vsub.f64	d16, d17, d16
    5af4:	b	5ddc <eval_float+0xb68>
    5af8:	ldr	r1, [r6, #16]
    5afc:	mov	r0, r5
    5b00:	mov	r2, r9
    5b04:	bl	5274 <eval_float>
    5b08:	mvn	r7, #0
    5b0c:	cmp	r0, #0
    5b10:	bne	5de4 <eval_float+0xb70>
    5b14:	vldr	d16, [r9]
    5b18:	vneg.f64	d16, d16
    5b1c:	b	5ddc <eval_float+0xb68>
    5b20:	add	r0, sp, #16
    5b24:	add	r2, sp, #32
    5b28:	add	r3, sp, #24
    5b2c:	mov	r1, r7
    5b30:	str	r0, [sp]
    5b34:	mov	r0, r5
    5b38:	bl	60dc <eval_string>
    5b3c:	cmp	r0, #0
    5b40:	bne	5d3c <eval_float+0xac8>
    5b44:	ldr	r1, [sp, #24]
    5b48:	cmp	r1, #0
    5b4c:	beq	5e08 <eval_float+0xb94>
    5b50:	ldr	r0, [sp, #32]
    5b54:	ldr	r2, [sp, #16]
    5b58:	mov	r3, #0
    5b5c:	add	r0, r2, r0
    5b60:	mov	r2, r9
    5b64:	bl	0 <coda_ascii_parse_double>
    5b68:	mov	r4, r0
    5b6c:	ldr	r0, [sp, #16]
    5b70:	bl	0 <free>
    5b74:	cmn	r4, #1
    5b78:	bgt	5de0 <eval_float+0xb6c>
    5b7c:	b	5d3c <eval_float+0xac8>
    5b80:	add	r2, sp, #32
    5b84:	mov	r0, r5
    5b88:	mov	r1, r7
    5b8c:	bl	3bd0 <eval_integer>
    5b90:	cmp	r0, #0
    5b94:	bne	5d3c <eval_float+0xac8>
    5b98:	b	52bc <eval_float+0x48>
    5b9c:	add	r4, r4, #1
    5ba0:	cmp	r4, r0
    5ba4:	bge	5cd8 <eval_float+0xa64>
    5ba8:	ldr	r1, [r6, #20]
    5bac:	mov	r0, r5
    5bb0:	mov	r2, r8
    5bb4:	bl	5274 <eval_float>
    5bb8:	cmp	r0, #0
    5bbc:	bne	5d3c <eval_float+0xac8>
    5bc0:	vldr	d16, [sp, #24]
    5bc4:	cmp	r4, #0
    5bc8:	beq	5be0 <eval_float+0x96c>
    5bcc:	vldr	d17, [r9]
    5bd0:	vcmpe.f64	d16, d17
    5bd4:	vmrs	APSR_nzcv, fpscr
    5bd8:	vstrmi	d16, [r9]
    5bdc:	b	5be4 <eval_float+0x970>
    5be0:	vstr	d16, [r9]
    5be4:	ldr	r0, [sp, #16]
    5be8:	sub	r1, r0, #1
    5bec:	cmp	r4, r1
    5bf0:	bge	5b9c <eval_float+0x928>
    5bf4:	mov	r0, r7
    5bf8:	bl	0 <coda_cursor_goto_next_array_element>
    5bfc:	cmp	r0, #0
    5c00:	bne	5d3c <eval_float+0xac8>
    5c04:	ldr	r0, [sp, #16]
    5c08:	b	5b9c <eval_float+0x928>
    5c0c:	add	r4, r4, #1
    5c10:	cmp	r4, r0
    5c14:	bge	5cd8 <eval_float+0xa64>
    5c18:	ldr	r1, [r6, #20]
    5c1c:	mov	r0, r5
    5c20:	mov	r2, r8
    5c24:	bl	5274 <eval_float>
    5c28:	cmp	r0, #0
    5c2c:	bne	5d3c <eval_float+0xac8>
    5c30:	vldr	d16, [sp, #24]
    5c34:	cmp	r4, #0
    5c38:	beq	5c50 <eval_float+0x9dc>
    5c3c:	vldr	d17, [r9]
    5c40:	vcmpe.f64	d16, d17
    5c44:	vmrs	APSR_nzcv, fpscr
    5c48:	vstrgt	d16, [r9]
    5c4c:	b	5c54 <eval_float+0x9e0>
    5c50:	vstr	d16, [r9]
    5c54:	ldr	r0, [sp, #16]
    5c58:	sub	r1, r0, #1
    5c5c:	cmp	r4, r1
    5c60:	bge	5c0c <eval_float+0x998>
    5c64:	mov	r0, r7
    5c68:	bl	0 <coda_cursor_goto_next_array_element>
    5c6c:	cmp	r0, #0
    5c70:	bne	5d3c <eval_float+0xac8>
    5c74:	ldr	r0, [sp, #16]
    5c78:	b	5c0c <eval_float+0x998>
    5c7c:	add	r4, r4, #1
    5c80:	cmp	r4, r0
    5c84:	bge	5cd8 <eval_float+0xa64>
    5c88:	ldr	r1, [r6, #20]
    5c8c:	mov	r0, r5
    5c90:	mov	r2, r8
    5c94:	bl	5274 <eval_float>
    5c98:	cmp	r0, #0
    5c9c:	bne	5d3c <eval_float+0xac8>
    5ca0:	vldr	d16, [sp, #24]
    5ca4:	vldr	d17, [r9]
    5ca8:	vadd.f64	d16, d16, d17
    5cac:	vstr	d16, [r9]
    5cb0:	ldr	r0, [sp, #16]
    5cb4:	sub	r1, r0, #1
    5cb8:	cmp	r4, r1
    5cbc:	bge	5c7c <eval_float+0xa08>
    5cc0:	mov	r0, r7
    5cc4:	bl	0 <coda_cursor_goto_next_array_element>
    5cc8:	cmp	r0, #0
    5ccc:	bne	5d3c <eval_float+0xac8>
    5cd0:	ldr	r0, [sp, #16]
    5cd4:	b	5c7c <eval_float+0xa08>
    5cd8:	add	r1, sp, #32
    5cdc:	mov	r0, r7
    5ce0:	mov	r2, #520	; 0x208
    5ce4:	bl	0 <memcpy>
    5ce8:	b	5de0 <eval_float+0xb6c>
    5cec:	add	r2, sp, #24
    5cf0:	mov	r0, r5
    5cf4:	bl	5274 <eval_float>
    5cf8:	cmp	r0, #0
    5cfc:	bne	5d3c <eval_float+0xac8>
    5d00:	vldr	d1, [sp, #24]
    5d04:	vldr	d0, [sp, #32]
    5d08:	bl	0 <pow>
    5d0c:	vstr	d0, [r9]
    5d10:	b	5de0 <eval_float+0xb6c>
    5d14:	vmov.f64	d17, #96	; 0x3f000000  0.5
    5d18:	vadd.f64	d16, d16, d17
    5d1c:	vrintm.f64	d16, d16
    5d20:	b	5ddc <eval_float+0xb68>
    5d24:	ldr	r1, [r6, #24]
    5d28:	mov	r0, r5
    5d2c:	mov	r2, r9
    5d30:	bl	5274 <eval_float>
    5d34:	cmp	r0, #0
    5d38:	beq	5de0 <eval_float+0xb6c>
    5d3c:	mvn	r7, #0
    5d40:	b	5de4 <eval_float+0xb70>
    5d44:	movw	r1, #0
    5d48:	movt	r1, #0
    5d4c:	b	5d58 <eval_float+0xae4>
    5d50:	movw	r1, #0
    5d54:	movt	r1, #0
    5d58:	mvn	r0, #400	; 0x190
    5d5c:	bl	0 <coda_set_error>
    5d60:	mvn	r7, #0
    5d64:	b	5de4 <eval_float+0xb70>
    5d68:	ldr	r0, [sp, #12]
    5d6c:	cmn	r0, #1
    5d70:	ble	5e30 <eval_float+0xbbc>
    5d74:	cmp	r0, #0
    5d78:	beq	5e64 <eval_float+0xbf0>
    5d7c:	ldr	r1, [sp, #24]
    5d80:	mov	r2, #0
    5d84:	add	r0, r1, r0
    5d88:	ldr	r1, [sp, #4]
    5d8c:	strb	r2, [r1, r0]
    5d90:	ldr	r0, [sp, #24]
    5d94:	ldr	r1, [sp, #4]
    5d98:	ldr	r2, [sp, #8]
    5d9c:	add	r0, r1, r0
    5da0:	ldr	r1, [sp, #32]
    5da4:	add	r1, r2, r1
    5da8:	mov	r2, r9
    5dac:	bl	0 <coda_time_string_to_double>
    5db0:	mov	r4, r0
    5db4:	ldr	r0, [sp, #4]
    5db8:	bl	0 <free>
    5dbc:	ldr	r0, [sp, #8]
    5dc0:	bl	0 <free>
    5dc4:	cmp	r4, #0
    5dc8:	mvn	r7, #0
    5dcc:	moveq	r7, #0
    5dd0:	b	5de4 <eval_float+0xb70>
    5dd4:	vldr	d17, [sp, #32]
    5dd8:	vdiv.f64	d16, d17, d16
    5ddc:	vstr	d16, [r9]
    5de0:	mov	r7, #0
    5de4:	mov	r0, r7
    5de8:	sub	sp, fp, #40	; 0x28
    5dec:	vpop	{d8}
    5df0:	add	sp, sp, #4
    5df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5df8:	vldr	d0, [sp, #32]
    5dfc:	bl	0 <fmod>
    5e00:	vstr	d0, [r9]
    5e04:	b	5de0 <eval_float+0xb6c>
    5e08:	movw	r1, #0
    5e0c:	mvn	r0, #102	; 0x66
    5e10:	movt	r1, #0
    5e14:	b	5d5c <eval_float+0xae8>
    5e18:	bl	0 <__aeabi_l2d>
    5e1c:	vmov	d1, r0, r1
    5e20:	vorr	d0, d8, d8
    5e24:	bl	0 <pow>
    5e28:	vstr	d0, [r9]
    5e2c:	b	5de0 <eval_float+0xb6c>
    5e30:	movw	r1, #0
    5e34:	movt	r1, #0
    5e38:	b	5d58 <eval_float+0xae4>
    5e3c:	vmov.f64	d16, #112	; 0x3f800000  1.0
    5e40:	rsb	r1, r0, #0
    5e44:	ands	r2, r1, #3
    5e48:	beq	5e7c <eval_float+0xc08>
    5e4c:	mov	r1, r0
    5e50:	vmul.f64	d16, d8, d16
    5e54:	subs	r2, r2, #1
    5e58:	add	r1, r1, #1
    5e5c:	bne	5e50 <eval_float+0xbdc>
    5e60:	b	5e80 <eval_float+0xc0c>
    5e64:	movw	r1, #0
    5e68:	movt	r1, #0
    5e6c:	b	5d58 <eval_float+0xae4>
    5e70:	vmov.f64	d0, #112	; 0x3f800000  1.0
    5e74:	vstr	d0, [r9]
    5e78:	b	5de0 <eval_float+0xb6c>
    5e7c:	mov	r1, r0
    5e80:	cmn	r0, #4
    5e84:	bhi	5ea0 <eval_float+0xc2c>
    5e88:	vmul.f64	d16, d8, d16
    5e8c:	adds	r1, r1, #4
    5e90:	vmul.f64	d16, d8, d16
    5e94:	vmul.f64	d16, d8, d16
    5e98:	vmul.f64	d16, d8, d16
    5e9c:	bne	5e88 <eval_float+0xc14>
    5ea0:	vmov.f64	d17, #112	; 0x3f800000  1.0
    5ea4:	vdiv.f64	d0, d17, d16
    5ea8:	vstr	d0, [r9]
    5eac:	b	5de0 <eval_float+0xb6c>
    5eb0:	movw	r0, #0
    5eb4:	movw	r1, #0
    5eb8:	movw	r3, #0
    5ebc:	movw	r2, #1909	; 0x775
    5ec0:	movt	r0, #0
    5ec4:	movt	r1, #0
    5ec8:	movt	r3, #0
    5ecc:	bl	0 <__assert_fail>
    5ed0:	movw	r0, #0
    5ed4:	movw	r1, #0
    5ed8:	movw	r3, #0
    5edc:	movw	r2, #1878	; 0x756
    5ee0:	b	5f30 <eval_float+0xcbc>
    5ee4:	movw	r0, #0
    5ee8:	movw	r1, #0
    5eec:	movw	r3, #0
    5ef0:	movw	r2, #1831	; 0x727
    5ef4:	b	5f30 <eval_float+0xcbc>
    5ef8:	movw	r0, #0
    5efc:	movw	r1, #0
    5f00:	movw	r3, #0
    5f04:	movw	r2, #1783	; 0x6f7
    5f08:	b	5f30 <eval_float+0xcbc>
    5f0c:	movw	r0, #0
    5f10:	movw	r1, #0
    5f14:	movw	r3, #0
    5f18:	movw	r2, #1738	; 0x6ca
    5f1c:	b	5f30 <eval_float+0xcbc>
    5f20:	movw	r0, #0
    5f24:	movw	r1, #0
    5f28:	movw	r3, #0
    5f2c:	movw	r2, #1418	; 0x58a
    5f30:	movt	r0, #0
    5f34:	b	5ec4 <eval_float+0xc50>

00005f38 <coda_expression_eval_string>:
    5f38:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    5f3c:	add	fp, sp, #24
    5f40:	sub	sp, sp, #584	; 0x248
    5f44:	mov	r7, r0
    5f48:	ldr	r0, [r0, #4]
    5f4c:	cmp	r0, #3
    5f50:	bne	5f84 <coda_expression_eval_string+0x4c>
    5f54:	mov	r5, r3
    5f58:	mov	r8, r2
    5f5c:	mov	r6, r1
    5f60:	cmp	r1, #0
    5f64:	beq	5fa4 <coda_expression_eval_string+0x6c>
    5f68:	add	r0, sp, #8
    5f6c:	mov	r1, r6
    5f70:	mov	r2, #520	; 0x208
    5f74:	str	r6, [sp, #8]
    5f78:	add	r0, r0, #8
    5f7c:	bl	0 <memcpy>
    5f80:	b	5fb8 <coda_expression_eval_string+0x80>
    5f84:	movw	r1, #0
    5f88:	movt	r1, #0
    5f8c:	mvn	r0, #99	; 0x63
    5f90:	bl	0 <coda_set_error>
    5f94:	mvn	r5, #0
    5f98:	mov	r0, r5
    5f9c:	sub	sp, fp, #24
    5fa0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    5fa4:	ldr	r0, [r7, #8]
    5fa8:	cmp	r0, #0
    5fac:	beq	6078 <coda_expression_eval_string+0x140>
    5fb0:	mov	r0, #0
    5fb4:	str	r0, [sp, #8]
    5fb8:	vmov.i32	q8, #0	; 0x00000000
    5fbc:	add	r4, sp, #8
    5fc0:	add	r2, sp, #4
    5fc4:	mov	r1, r7
    5fc8:	mov	r3, r5
    5fcc:	str	r8, [sp]
    5fd0:	add	r0, r4, #544	; 0x220
    5fd4:	vst1.64	{d16-d17}, [r0]
    5fd8:	add	r0, r4, #528	; 0x210
    5fdc:	vst1.64	{d16-d17}, [r0]
    5fe0:	mov	r0, #0
    5fe4:	str	r0, [sp, #568]	; 0x238
    5fe8:	mov	r0, r4
    5fec:	bl	60dc <eval_string>
    5ff0:	cmp	r0, #0
    5ff4:	beq	6028 <coda_expression_eval_string+0xf0>
    5ff8:	mvn	r5, #0
    5ffc:	cmp	r6, #0
    6000:	beq	5f98 <coda_expression_eval_string+0x60>
    6004:	add	r4, r4, #8
    6008:	mov	r0, r6
    600c:	mov	r1, r4
    6010:	bl	0 <coda_cursor_compare>
    6014:	cmp	r0, #0
    6018:	beq	5f98 <coda_expression_eval_string+0x60>
    601c:	mov	r0, r4
    6020:	bl	0 <coda_cursor_add_to_error_message>
    6024:	b	5f98 <coda_expression_eval_string+0x60>
    6028:	ldr	r6, [r5]
    602c:	cmp	r6, #1
    6030:	blt	6084 <coda_expression_eval_string+0x14c>
    6034:	ldr	r4, [sp, #4]
    6038:	cmp	r4, #0
    603c:	beq	60a0 <coda_expression_eval_string+0x168>
    6040:	add	r0, r6, #1
    6044:	bl	0 <malloc>
    6048:	cmp	r0, #0
    604c:	beq	60b0 <coda_expression_eval_string+0x178>
    6050:	ldr	r9, [r8]
    6054:	mov	r2, r6
    6058:	mov	r7, r0
    605c:	add	r1, r9, r4
    6060:	bl	0 <memcpy>
    6064:	mov	r0, r9
    6068:	bl	0 <free>
    606c:	str	r7, [r8]
    6070:	ldr	r6, [r5]
    6074:	b	60a4 <coda_expression_eval_string+0x16c>
    6078:	movw	r1, #0
    607c:	movt	r1, #0
    6080:	b	5f8c <coda_expression_eval_string+0x54>
    6084:	ldr	r0, [r8]
    6088:	cmp	r0, #0
    608c:	beq	6094 <coda_expression_eval_string+0x15c>
    6090:	bl	0 <free>
    6094:	mov	r5, #0
    6098:	str	r5, [r8]
    609c:	b	5f98 <coda_expression_eval_string+0x60>
    60a0:	ldr	r7, [r8]
    60a4:	mov	r5, #0
    60a8:	strb	r5, [r7, r6]
    60ac:	b	5f98 <coda_expression_eval_string+0x60>
    60b0:	movw	r1, #0
    60b4:	movw	r3, #0
    60b8:	movw	r0, #5251	; 0x1483
    60bc:	mov	r2, r6
    60c0:	mvn	r5, #0
    60c4:	movt	r1, #0
    60c8:	movt	r3, #0
    60cc:	str	r0, [sp]
    60d0:	mvn	r0, #0
    60d4:	bl	0 <coda_set_error>
    60d8:	b	5f98 <coda_expression_eval_string+0x60>

000060dc <eval_string>:
    60dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    60e0:	add	fp, sp, #28
    60e4:	sub	sp, sp, #620	; 0x26c
    60e8:	mov	r5, r0
    60ec:	ldr	r0, [r1]
    60f0:	ldr	r8, [fp, #8]
    60f4:	mov	r4, r1
    60f8:	mov	r9, r3
    60fc:	mov	sl, r2
    6100:	sub	r1, r0, #21
    6104:	cmp	r1, #1
    6108:	bhi	6148 <eval_string+0x6c>
    610c:	mov	r7, #0
    6110:	str	r7, [sl]
    6114:	ldr	r5, [r4, #12]
    6118:	cmp	r5, #1
    611c:	str	r5, [r9]
    6120:	blt	6384 <eval_string+0x2a8>
    6124:	add	r0, r5, #1
    6128:	bl	0 <malloc>
    612c:	cmp	r0, #0
    6130:	str	r0, [r8]
    6134:	beq	638c <eval_string+0x2b0>
    6138:	ldr	r1, [r4, #16]
    613c:	mov	r2, r5
    6140:	bl	0 <memcpy>
    6144:	b	77a0 <eval_string+0x16c4>
    6148:	sub	r0, r0, #1
    614c:	cmp	r0, #85	; 0x55
    6150:	bhi	7938 <eval_string+0x185c>
    6154:	add	r1, pc, #0
    6158:	ldr	pc, [r1, r0, lsl #2]
    615c:	.word	0x000062b4
    6160:	.word	0x00007938
    6164:	.word	0x00006920
    6168:	.word	0x00007938
    616c:	.word	0x00007938
    6170:	.word	0x00007938
    6174:	.word	0x00007938
    6178:	.word	0x00006ae0
    617c:	.word	0x0000681c
    6180:	.word	0x00007938
    6184:	.word	0x00006740
    6188:	.word	0x00007938
    618c:	.word	0x00007938
    6190:	.word	0x00007938
    6194:	.word	0x00007938
    6198:	.word	0x000065b4
    619c:	.word	0x00007938
    61a0:	.word	0x00007938
    61a4:	.word	0x00007938
    61a8:	.word	0x00007938
    61ac:	.word	0x00007938
    61b0:	.word	0x00007938
    61b4:	.word	0x00007938
    61b8:	.word	0x00007938
    61bc:	.word	0x00007938
    61c0:	.word	0x00007938
    61c4:	.word	0x00007938
    61c8:	.word	0x0000669c
    61cc:	.word	0x00007938
    61d0:	.word	0x00007938
    61d4:	.word	0x00007938
    61d8:	.word	0x00007938
    61dc:	.word	0x00007938
    61e0:	.word	0x00007938
    61e4:	.word	0x00007938
    61e8:	.word	0x00007938
    61ec:	.word	0x00007938
    61f0:	.word	0x00007938
    61f4:	.word	0x00007938
    61f8:	.word	0x00007938
    61fc:	.word	0x00007938
    6200:	.word	0x00006508
    6204:	.word	0x00007938
    6208:	.word	0x00007938
    620c:	.word	0x00007938
    6210:	.word	0x00007938
    6214:	.word	0x00007938
    6218:	.word	0x00007938
    621c:	.word	0x00007938
    6220:	.word	0x00007938
    6224:	.word	0x00007938
    6228:	.word	0x00007938
    622c:	.word	0x00007938
    6230:	.word	0x00007938
    6234:	.word	0x00006798
    6238:	.word	0x00006484
    623c:	.word	0x000066f0
    6240:	.word	0x00007938
    6244:	.word	0x00007938
    6248:	.word	0x00007938
    624c:	.word	0x00007938
    6250:	.word	0x00007938
    6254:	.word	0x00007938
    6258:	.word	0x00007938
    625c:	.word	0x00007938
    6260:	.word	0x00007938
    6264:	.word	0x000063b0
    6268:	.word	0x0000641c
    626c:	.word	0x0000662c
    6270:	.word	0x00007938
    6274:	.word	0x00006b6c
    6278:	.word	0x00007938
    627c:	.word	0x00006534
    6280:	.word	0x00007938
    6284:	.word	0x00006c50
    6288:	.word	0x000068a8
    628c:	.word	0x00006a18
    6290:	.word	0x00007938
    6294:	.word	0x00007938
    6298:	.word	0x00006bcc
    629c:	.word	0x00007938
    62a0:	.word	0x00007938
    62a4:	.word	0x00007938
    62a8:	.word	0x00007938
    62ac:	.word	0x00007938
    62b0:	.word	0x000069ac
    62b4:	ldr	r1, [r4, #16]
    62b8:	add	r0, sp, #68	; 0x44
    62bc:	add	r2, sp, #96	; 0x60
    62c0:	add	r3, sp, #80	; 0x50
    62c4:	str	r0, [sp]
    62c8:	mov	r0, r5
    62cc:	bl	60dc <eval_string>
    62d0:	cmp	r0, #0
    62d4:	bne	779c <eval_string+0x16c0>
    62d8:	ldr	r1, [r4, #20]
    62dc:	add	r0, sp, #64	; 0x40
    62e0:	add	r2, sp, #88	; 0x58
    62e4:	add	r3, sp, #72	; 0x48
    62e8:	str	r0, [sp]
    62ec:	mov	r0, r5
    62f0:	bl	60dc <eval_string>
    62f4:	cmp	r0, #0
    62f8:	bne	6738 <eval_string+0x65c>
    62fc:	mov	r0, #0
    6300:	str	r0, [sl]
    6304:	ldr	r5, [sp, #80]	; 0x50
    6308:	ldr	r4, [sp, #72]	; 0x48
    630c:	add	r1, r4, r5
    6310:	cmp	r1, #1
    6314:	str	r1, [r9]
    6318:	blt	74d0 <eval_string+0x13f4>
    631c:	add	r9, r1, #1
    6320:	mov	r0, r9
    6324:	bl	0 <malloc>
    6328:	cmp	r0, #0
    632c:	str	r0, [r8]
    6330:	beq	770c <eval_string+0x1630>
    6334:	mov	r6, r0
    6338:	cmp	r5, #1
    633c:	blt	6358 <eval_string+0x27c>
    6340:	ldr	r0, [sp, #96]	; 0x60
    6344:	ldr	r1, [sp, #68]	; 0x44
    6348:	mov	r2, r5
    634c:	add	r1, r1, r0
    6350:	mov	r0, r6
    6354:	bl	0 <memcpy>
    6358:	cmp	r4, #1
    635c:	blt	74d4 <eval_string+0x13f8>
    6360:	ldr	r1, [sp, #88]	; 0x58
    6364:	ldr	r2, [sp, #64]	; 0x40
    6368:	add	r0, r6, r5
    636c:	add	r1, r2, r1
    6370:	mov	r2, r4
    6374:	bl	0 <memcpy>
    6378:	cmp	r5, #1
    637c:	bge	74dc <eval_string+0x1400>
    6380:	b	74e8 <eval_string+0x140c>
    6384:	str	r7, [r8]
    6388:	b	77a0 <eval_string+0x16c4>
    638c:	movw	r1, #0
    6390:	movw	r2, #0
    6394:	mvn	r0, #0
    6398:	movw	r3, #2845	; 0xb1d
    639c:	mvn	r7, #0
    63a0:	movt	r1, #0
    63a4:	movt	r2, #0
    63a8:	bl	0 <coda_set_error>
    63ac:	b	77a0 <eval_string+0x16c4>
    63b0:	ldr	r0, [r5]
    63b4:	cmp	r0, #0
    63b8:	beq	7958 <eval_string+0x187c>
    63bc:	ldr	r0, [r0]
    63c0:	add	r1, sp, #96	; 0x60
    63c4:	bl	0 <coda_get_product_class>
    63c8:	cmp	r0, #0
    63cc:	bne	779c <eval_string+0x16c0>
    63d0:	mov	r7, #0
    63d4:	str	r7, [sl]
    63d8:	str	r7, [r9]
    63dc:	ldr	r5, [sp, #96]	; 0x60
    63e0:	cmp	r5, #0
    63e4:	beq	77a0 <eval_string+0x16c4>
    63e8:	mov	r0, r5
    63ec:	bl	0 <strlen>
    63f0:	mov	r4, r0
    63f4:	str	r0, [r9]
    63f8:	add	r0, r0, #1
    63fc:	bl	0 <malloc>
    6400:	cmp	r0, #0
    6404:	str	r0, [r8]
    6408:	beq	731c <eval_string+0x1240>
    640c:	mov	r1, r5
    6410:	mov	r2, r4
    6414:	bl	0 <memcpy>
    6418:	b	77a0 <eval_string+0x16c4>
    641c:	ldr	r0, [r5]
    6420:	cmp	r0, #0
    6424:	beq	796c <eval_string+0x1890>
    6428:	ldr	r0, [r0]
    642c:	add	r1, sp, #96	; 0x60
    6430:	bl	0 <coda_get_product_format>
    6434:	cmp	r0, #0
    6438:	bne	779c <eval_string+0x16c0>
    643c:	ldr	r0, [sp, #96]	; 0x60
    6440:	bl	0 <coda_type_get_format_name>
    6444:	mov	r7, #0
    6448:	cmp	r0, #0
    644c:	str	r7, [sl]
    6450:	str	r7, [r9]
    6454:	beq	77a0 <eval_string+0x16c4>
    6458:	mov	r4, r0
    645c:	bl	0 <strlen>
    6460:	mov	r5, r0
    6464:	str	r0, [r9]
    6468:	add	r0, r0, #1
    646c:	bl	0 <malloc>
    6470:	cmp	r0, #0
    6474:	str	r0, [r8]
    6478:	bne	6d80 <eval_string+0xca4>
    647c:	movw	r0, #3665	; 0xe51
    6480:	b	733c <eval_string+0x1260>
    6484:	ldr	r1, [r4, #16]
    6488:	add	r0, sp, #68	; 0x44
    648c:	add	r2, sp, #96	; 0x60
    6490:	add	r3, sp, #80	; 0x50
    6494:	str	r0, [sp]
    6498:	mov	r0, r5
    649c:	bl	60dc <eval_string>
    64a0:	cmp	r0, #0
    64a4:	bne	779c <eval_string+0x16c0>
    64a8:	ldr	r1, [r4, #20]
    64ac:	add	r0, sp, #64	; 0x40
    64b0:	add	r2, sp, #88	; 0x58
    64b4:	add	r3, sp, #72	; 0x48
    64b8:	str	r0, [sp]
    64bc:	mov	r0, r5
    64c0:	bl	60dc <eval_string>
    64c4:	cmp	r0, #0
    64c8:	bne	6738 <eval_string+0x65c>
    64cc:	ldr	r3, [sp, #80]	; 0x50
    64d0:	ldr	r2, [sp, #72]	; 0x48
    64d4:	ldr	r0, [sp, #64]	; 0x40
    64d8:	ldr	ip, [sp, #88]	; 0x58
    64dc:	ldr	lr, [sp, #68]	; 0x44
    64e0:	ldr	r8, [sp, #96]	; 0x60
    64e4:	mov	r5, #0
    64e8:	cmp	r3, #1
    64ec:	cmpge	r2, #1
    64f0:	bge	758c <eval_string+0x14b0>
    64f4:	cmp	r5, r3
    64f8:	bne	7378 <eval_string+0x129c>
    64fc:	cmp	r5, r2
    6500:	beq	7398 <eval_string+0x12bc>
    6504:	b	7408 <eval_string+0x132c>
    6508:	ldr	r1, [r4, #16]
    650c:	add	r2, sp, #96	; 0x60
    6510:	mov	r0, r5
    6514:	bl	2708 <eval_boolean>
    6518:	cmp	r0, #0
    651c:	bne	779c <eval_string+0x16c0>
    6520:	ldr	r0, [sp, #96]	; 0x60
    6524:	cmp	r0, #0
    6528:	beq	6fc8 <eval_string+0xeec>
    652c:	ldr	r1, [r4, #20]
    6530:	b	6fcc <eval_string+0xef0>
    6534:	ldr	r1, [r4, #16]
    6538:	mov	r0, r5
    653c:	mov	r2, sl
    6540:	mov	r3, r9
    6544:	str	r8, [sp]
    6548:	bl	60dc <eval_string>
    654c:	mvn	r7, #0
    6550:	cmp	r0, #0
    6554:	bne	77a0 <eval_string+0x16c4>
    6558:	ldr	r0, [r9]
    655c:	mov	r7, #0
    6560:	cmp	r0, #1
    6564:	blt	77a0 <eval_string+0x16c4>
    6568:	sub	r1, r0, #1
    656c:	ldr	r0, [r8]
    6570:	movw	r3, #19
    6574:	mov	r2, #1
    6578:	movt	r3, #128	; 0x80
    657c:	ldr	r6, [sl]
    6580:	add	r6, r0, r6
    6584:	ldrb	r6, [r6, r1]
    6588:	sub	r6, r6, #9
    658c:	cmp	r6, #23
    6590:	bhi	77a0 <eval_string+0x16c4>
    6594:	tst	r3, r2, lsl r6
    6598:	beq	77a0 <eval_string+0x16c4>
    659c:	sub	r6, r1, #1
    65a0:	str	r1, [r9]
    65a4:	cmp	r1, #0
    65a8:	mov	r1, r6
    65ac:	bgt	657c <eval_string+0x4a0>
    65b0:	b	77a0 <eval_string+0x16c4>
    65b4:	mov	r0, #0
    65b8:	str	r0, [sp, #92]	; 0x5c
    65bc:	str	r0, [sp, #88]	; 0x58
    65c0:	mvn	r0, #0
    65c4:	str	r0, [sp, #76]	; 0x4c
    65c8:	str	r0, [sp, #72]	; 0x48
    65cc:	ldr	r0, [r5]
    65d0:	cmp	r0, #0
    65d4:	beq	7980 <eval_string+0x18a4>
    65d8:	add	r7, r5, #8
    65dc:	add	r0, sp, #96	; 0x60
    65e0:	mov	r2, #520	; 0x208
    65e4:	mov	r1, r7
    65e8:	bl	0 <memcpy>
    65ec:	ldr	r1, [r4, #16]
    65f0:	mov	r0, r5
    65f4:	bl	7afc <eval_cursor>
    65f8:	cmp	r0, #0
    65fc:	bne	779c <eval_string+0x16c0>
    6600:	ldr	r0, [r4, #24]
    6604:	ldr	r1, [r4, #20]
    6608:	cmp	r0, #0
    660c:	beq	705c <eval_string+0xf80>
    6610:	add	r2, sp, #88	; 0x58
    6614:	mov	r0, r5
    6618:	bl	3bd0 <eval_integer>
    661c:	cmp	r0, #0
    6620:	bne	779c <eval_string+0x16c0>
    6624:	ldr	r1, [r4, #24]
    6628:	b	7064 <eval_string+0xf88>
    662c:	ldr	r0, [r5]
    6630:	cmp	r0, #0
    6634:	beq	7994 <eval_string+0x18b8>
    6638:	ldr	r0, [r0]
    663c:	add	r1, sp, #96	; 0x60
    6640:	bl	0 <coda_get_product_type>
    6644:	cmp	r0, #0
    6648:	bne	779c <eval_string+0x16c0>
    664c:	mov	r7, #0
    6650:	str	r7, [sl]
    6654:	str	r7, [r9]
    6658:	ldr	r4, [sp, #96]	; 0x60
    665c:	cmp	r4, #0
    6660:	beq	77a0 <eval_string+0x16c4>
    6664:	mov	r0, r4
    6668:	bl	0 <strlen>
    666c:	add	r5, r0, #1
    6670:	mov	r6, r0
    6674:	str	r0, [r9]
    6678:	mov	r0, r5
    667c:	bl	0 <malloc>
    6680:	cmp	r0, #0
    6684:	str	r0, [r8]
    6688:	beq	7338 <eval_string+0x125c>
    668c:	mov	r1, r4
    6690:	mov	r2, r6
    6694:	bl	0 <memcpy>
    6698:	b	77a0 <eval_string+0x16c4>
    669c:	ldr	r0, [r5]
    66a0:	cmp	r0, #0
    66a4:	beq	79a8 <eval_string+0x18cc>
    66a8:	ldr	r0, [r0]
    66ac:	add	r1, sp, #96	; 0x60
    66b0:	bl	0 <coda_get_product_filename>
    66b4:	cmp	r0, #0
    66b8:	bne	779c <eval_string+0x16c0>
    66bc:	ldr	r4, [sp, #96]	; 0x60
    66c0:	add	r0, r4, #1
    66c4:	b	66d8 <eval_string+0x5fc>
    66c8:	cmp	r1, #0
    66cc:	beq	6d54 <eval_string+0xc78>
    66d0:	str	r0, [sp, #96]	; 0x60
    66d4:	add	r0, r0, #1
    66d8:	ldrb	r1, [r0, #-1]
    66dc:	cmp	r1, #47	; 0x2f
    66e0:	cmpne	r1, #92	; 0x5c
    66e4:	bne	66c8 <eval_string+0x5ec>
    66e8:	mov	r4, r0
    66ec:	b	66d0 <eval_string+0x5f4>
    66f0:	ldr	r1, [r4, #16]
    66f4:	add	r0, sp, #68	; 0x44
    66f8:	add	r2, sp, #96	; 0x60
    66fc:	add	r3, sp, #80	; 0x50
    6700:	str	r0, [sp]
    6704:	mov	r0, r5
    6708:	bl	60dc <eval_string>
    670c:	cmp	r0, #0
    6710:	bne	779c <eval_string+0x16c0>
    6714:	ldr	r1, [r4, #20]
    6718:	add	r0, sp, #64	; 0x40
    671c:	add	r2, sp, #88	; 0x58
    6720:	add	r3, sp, #72	; 0x48
    6724:	str	r0, [sp]
    6728:	mov	r0, r5
    672c:	bl	60dc <eval_string>
    6730:	cmp	r0, #0
    6734:	beq	6fec <eval_string+0xf10>
    6738:	ldr	r0, [sp, #68]	; 0x44
    673c:	b	7798 <eval_string+0x16bc>
    6740:	ldr	r0, [r5]
    6744:	cmp	r0, #0
    6748:	beq	79bc <eval_string+0x18e0>
    674c:	add	r7, r5, #8
    6750:	add	r0, sp, #96	; 0x60
    6754:	mov	r2, #520	; 0x208
    6758:	mov	r1, r7
    675c:	bl	0 <memcpy>
    6760:	ldr	r1, [r4, #16]
    6764:	mov	r0, r5
    6768:	bl	7afc <eval_cursor>
    676c:	cmp	r0, #0
    6770:	bne	779c <eval_string+0x16c0>
    6774:	ldr	r1, [r4, #20]
    6778:	mov	r0, r5
    677c:	mov	r2, sl
    6780:	mov	r3, r9
    6784:	str	r8, [sp]
    6788:	bl	60dc <eval_string>
    678c:	cmp	r0, #0
    6790:	bne	779c <eval_string+0x16c0>
    6794:	b	76f4 <eval_string+0x1618>
    6798:	ldr	r1, [r4, #16]
    679c:	mov	r0, r5
    67a0:	mov	r2, sl
    67a4:	mov	r3, r9
    67a8:	str	r8, [sp]
    67ac:	bl	60dc <eval_string>
    67b0:	mvn	r7, #0
    67b4:	cmp	r0, #0
    67b8:	bne	77a0 <eval_string+0x16c4>
    67bc:	ldr	r0, [r9]
    67c0:	mov	r7, #0
    67c4:	cmp	r0, #1
    67c8:	blt	77a0 <eval_string+0x16c4>
    67cc:	ldr	r6, [sl]
    67d0:	ldr	r1, [r8]
    67d4:	movw	r3, #19
    67d8:	mov	r2, #1
    67dc:	movt	r3, #128	; 0x80
    67e0:	ldrb	r6, [r1, r6]
    67e4:	sub	r6, r6, #9
    67e8:	cmp	r6, #23
    67ec:	bhi	77a0 <eval_string+0x16c4>
    67f0:	tst	r3, r2, lsl r6
    67f4:	beq	77a0 <eval_string+0x16c4>
    67f8:	sub	r0, r0, #1
    67fc:	str	r0, [r9]
    6800:	ldr	r0, [sl]
    6804:	add	r6, r0, #1
    6808:	str	r6, [sl]
    680c:	ldr	r0, [r9]
    6810:	cmp	r0, #0
    6814:	bgt	67e0 <eval_string+0x704>
    6818:	b	77a0 <eval_string+0x16c4>
    681c:	ldr	r0, [r5]
    6820:	cmp	r0, #0
    6824:	beq	79d0 <eval_string+0x18f4>
    6828:	add	r6, r5, #8
    682c:	add	r0, sp, #96	; 0x60
    6830:	mov	r2, #520	; 0x208
    6834:	mov	r1, r6
    6838:	bl	0 <memcpy>
    683c:	ldr	r1, [r4, #16]
    6840:	mov	r0, r5
    6844:	bl	7afc <eval_cursor>
    6848:	cmp	r0, #0
    684c:	bne	779c <eval_string+0x16c0>
    6850:	add	r1, sp, #88	; 0x58
    6854:	mov	r0, r6
    6858:	bl	0 <coda_cursor_get_num_elements>
    685c:	cmp	r0, #0
    6860:	bne	779c <eval_string+0x16c0>
    6864:	mov	r7, #0
    6868:	str	r7, [sl]
    686c:	str	r7, [r9]
    6870:	str	r7, [r8]
    6874:	ldr	r0, [sp, #88]	; 0x58
    6878:	cmp	r0, #1
    687c:	blt	72cc <eval_string+0x11f0>
    6880:	mov	r0, r6
    6884:	bl	0 <coda_cursor_goto_first_array_element>
    6888:	cmp	r0, #0
    688c:	bne	779c <eval_string+0x16c0>
    6890:	ldr	r0, [sp, #88]	; 0x58
    6894:	cmp	r0, #1
    6898:	blt	72cc <eval_string+0x11f0>
    689c:	mov	r1, #0
    68a0:	str	r6, [sp, #16]
    68a4:	b	6d94 <eval_string+0xcb8>
    68a8:	ldr	r1, [r4, #16]
    68ac:	add	r2, sp, #96	; 0x60
    68b0:	mov	r0, r5
    68b4:	bl	5274 <eval_float>
    68b8:	cmp	r0, #0
    68bc:	bne	779c <eval_string+0x16c0>
    68c0:	ldr	r1, [r4, #20]
    68c4:	cmp	r1, #0
    68c8:	beq	70b4 <eval_string+0xfd8>
    68cc:	add	r0, sp, #72	; 0x48
    68d0:	add	r2, sp, #88	; 0x58
    68d4:	add	r3, sp, #80	; 0x50
    68d8:	str	r0, [sp]
    68dc:	mov	r0, r5
    68e0:	bl	60dc <eval_string>
    68e4:	cmp	r0, #0
    68e8:	bne	779c <eval_string+0x16c0>
    68ec:	ldr	r0, [sp, #80]	; 0x50
    68f0:	cmn	r0, #1
    68f4:	ble	7738 <eval_string+0x165c>
    68f8:	cmp	r0, #0
    68fc:	beq	77ac <eval_string+0x16d0>
    6900:	ldr	r1, [sp, #88]	; 0x58
    6904:	mov	r2, #0
    6908:	add	r0, r1, r0
    690c:	ldr	r1, [sp, #72]	; 0x48
    6910:	strb	r2, [r1, r0]
    6914:	ldr	r0, [sp, #80]	; 0x50
    6918:	add	r0, r0, #1
    691c:	b	70d4 <eval_string+0xff8>
    6920:	ldr	r0, [r5]
    6924:	cmp	r0, #0
    6928:	beq	79e4 <eval_string+0x1908>
    692c:	add	r6, r5, #8
    6930:	add	r0, sp, #96	; 0x60
    6934:	mov	r2, #520	; 0x208
    6938:	mov	r1, r6
    693c:	bl	0 <memcpy>
    6940:	ldr	r1, [r4, #16]
    6944:	mov	r0, r5
    6948:	bl	7afc <eval_cursor>
    694c:	cmp	r0, #0
    6950:	bne	779c <eval_string+0x16c0>
    6954:	add	r1, sp, #88	; 0x58
    6958:	mov	r0, r6
    695c:	bl	0 <coda_cursor_get_num_elements>
    6960:	cmp	r0, #0
    6964:	bne	779c <eval_string+0x16c0>
    6968:	mov	r7, #0
    696c:	str	r6, [sp, #36]	; 0x24
    6970:	str	r7, [sl]
    6974:	str	r7, [r9]
    6978:	str	r7, [r8]
    697c:	ldr	r0, [sp, #88]	; 0x58
    6980:	cmp	r0, #1
    6984:	blt	7364 <eval_string+0x1288>
    6988:	ldr	r0, [sp, #36]	; 0x24
    698c:	bl	0 <coda_cursor_goto_first_array_element>
    6990:	cmp	r0, #0
    6994:	bne	779c <eval_string+0x16c0>
    6998:	ldr	r0, [sp, #88]	; 0x58
    699c:	cmp	r0, #1
    69a0:	blt	7364 <eval_string+0x1288>
    69a4:	mov	r6, #0
    69a8:	b	6f14 <eval_string+0xe38>
    69ac:	ldr	r0, [r4, #12]
    69b0:	ldr	r1, [r4, #16]
    69b4:	ldrb	r0, [r0]
    69b8:	add	r6, r5, r0, lsl #3
    69bc:	ldr	r0, [r6, #-312]!	; 0xfffffec8
    69c0:	ldr	r8, [r6, #4]
    69c4:	mov	r2, r6
    69c8:	str	r0, [sp, #36]	; 0x24
    69cc:	mov	r0, r5
    69d0:	bl	3bd0 <eval_integer>
    69d4:	mvn	r7, #0
    69d8:	cmp	r0, #0
    69dc:	bne	77a0 <eval_string+0x16c4>
    69e0:	ldr	r0, [fp, #8]
    69e4:	ldr	r1, [r4, #20]
    69e8:	mov	r2, sl
    69ec:	mov	r3, r9
    69f0:	str	r8, [sp, #32]
    69f4:	str	r0, [sp]
    69f8:	mov	r0, r5
    69fc:	bl	60dc <eval_string>
    6a00:	cmp	r0, #0
    6a04:	bne	77a0 <eval_string+0x16c4>
    6a08:	ldr	r0, [sp, #36]	; 0x24
    6a0c:	ldr	r1, [sp, #32]
    6a10:	strd	r0, [r6]
    6a14:	b	7704 <eval_string+0x1628>
    6a18:	ldr	r1, [r4, #16]
    6a1c:	add	r2, sp, #96	; 0x60
    6a20:	mov	r0, r5
    6a24:	bl	3bd0 <eval_integer>
    6a28:	mvn	r7, #0
    6a2c:	cmp	r0, #0
    6a30:	bne	77a0 <eval_string+0x16c4>
    6a34:	ldr	r0, [sp, #100]	; 0x64
    6a38:	cmn	r0, #1
    6a3c:	ble	7120 <eval_string+0x1044>
    6a40:	ldr	r1, [r4, #20]
    6a44:	add	r2, sp, #88	; 0x58
    6a48:	mov	r0, r5
    6a4c:	bl	3bd0 <eval_integer>
    6a50:	cmp	r0, #0
    6a54:	bne	77a0 <eval_string+0x16c4>
    6a58:	ldr	r1, [sp, #88]	; 0x58
    6a5c:	ldr	r0, [sp, #92]	; 0x5c
    6a60:	orrs	r1, r1, r0
    6a64:	beq	7744 <eval_string+0x1668>
    6a68:	cmn	r0, #1
    6a6c:	ble	77c0 <eval_string+0x16e4>
    6a70:	ldr	r1, [r4, #24]
    6a74:	mov	r0, r5
    6a78:	mov	r2, sl
    6a7c:	mov	r3, r9
    6a80:	str	r8, [sp]
    6a84:	bl	60dc <eval_string>
    6a88:	cmp	r0, #0
    6a8c:	bne	77a0 <eval_string+0x16c4>
    6a90:	ldr	r1, [r9]
    6a94:	cmp	r1, #0
    6a98:	beq	7704 <eval_string+0x1628>
    6a9c:	ldr	r0, [sp, #96]	; 0x60
    6aa0:	ldr	r2, [sp, #100]	; 0x64
    6aa4:	subs	r3, r0, r1
    6aa8:	sbcs	r1, r2, r1, asr #31
    6aac:	bge	7880 <eval_string+0x17a4>
    6ab0:	ldr	r1, [sl]
    6ab4:	add	r1, r1, r0
    6ab8:	str	r1, [sl]
    6abc:	ldr	r1, [r9]
    6ac0:	sub	r1, r1, r0
    6ac4:	str	r1, [r9]
    6ac8:	ldr	r0, [sp, #88]	; 0x58
    6acc:	ldr	r2, [sp, #92]	; 0x5c
    6ad0:	subs	r3, r0, r1
    6ad4:	sbcs	r1, r2, r1, asr #31
    6ad8:	strlt	r0, [r9]
    6adc:	b	7704 <eval_string+0x1628>
    6ae0:	ldr	r0, [r5]
    6ae4:	cmp	r0, #0
    6ae8:	beq	79f8 <eval_string+0x191c>
    6aec:	add	r6, r5, #8
    6af0:	add	r0, sp, #96	; 0x60
    6af4:	mov	r2, #520	; 0x208
    6af8:	mov	r1, r6
    6afc:	bl	0 <memcpy>
    6b00:	ldr	r1, [r4, #16]
    6b04:	mov	r0, r5
    6b08:	bl	7afc <eval_cursor>
    6b0c:	cmp	r0, #0
    6b10:	bne	779c <eval_string+0x16c0>
    6b14:	add	r1, sp, #88	; 0x58
    6b18:	mov	r0, r6
    6b1c:	bl	0 <coda_cursor_get_num_elements>
    6b20:	cmp	r0, #0
    6b24:	bne	779c <eval_string+0x16c0>
    6b28:	mov	r7, #0
    6b2c:	str	r7, [sl]
    6b30:	str	r7, [r9]
    6b34:	str	r7, [r8]
    6b38:	ldr	r0, [sp, #88]	; 0x58
    6b3c:	cmp	r0, #1
    6b40:	blt	72cc <eval_string+0x11f0>
    6b44:	mov	r0, r6
    6b48:	bl	0 <coda_cursor_goto_first_array_element>
    6b4c:	cmp	r0, #0
    6b50:	bne	779c <eval_string+0x16c0>
    6b54:	ldr	r0, [sp, #88]	; 0x58
    6b58:	cmp	r0, #1
    6b5c:	blt	72cc <eval_string+0x11f0>
    6b60:	mov	r1, #0
    6b64:	str	r6, [sp, #20]
    6b68:	b	7178 <eval_string+0x109c>
    6b6c:	mov	r0, #0
    6b70:	add	r2, sp, #56	; 0x38
    6b74:	add	r3, sp, #52	; 0x34
    6b78:	str	r0, [sp, #48]	; 0x30
    6b7c:	add	r0, sp, #48	; 0x30
    6b80:	ldr	r1, [r4, #16]
    6b84:	str	r0, [sp]
    6b88:	mov	r0, r5
    6b8c:	bl	60dc <eval_string>
    6b90:	cmp	r0, #0
    6b94:	bne	779c <eval_string+0x16c0>
    6b98:	ldr	r1, [r4, #20]
    6b9c:	add	r0, sp, #60	; 0x3c
    6ba0:	add	r2, sp, #68	; 0x44
    6ba4:	add	r3, sp, #64	; 0x40
    6ba8:	str	r0, [sp]
    6bac:	mov	r0, r5
    6bb0:	bl	60dc <eval_string>
    6bb4:	cmp	r0, #0
    6bb8:	beq	7134 <eval_string+0x1058>
    6bbc:	ldr	r0, [sp, #48]	; 0x30
    6bc0:	cmp	r0, #0
    6bc4:	bne	7798 <eval_string+0x16bc>
    6bc8:	b	779c <eval_string+0x16c0>
    6bcc:	ldr	r1, [r4, #16]
    6bd0:	mov	r0, r5
    6bd4:	mov	r2, sl
    6bd8:	mov	r3, r9
    6bdc:	str	r8, [sp]
    6be0:	bl	60dc <eval_string>
    6be4:	mvn	r7, #0
    6be8:	cmp	r0, #0
    6bec:	bne	77a0 <eval_string+0x16c4>
    6bf0:	ldr	r1, [r9]
    6bf4:	mov	r7, #0
    6bf8:	cmp	r1, #1
    6bfc:	blt	77a0 <eval_string+0x16c4>
    6c00:	ldr	r6, [sl]
    6c04:	ldr	r2, [r8]
    6c08:	movw	r0, #19
    6c0c:	mov	r3, #1
    6c10:	movt	r0, #128	; 0x80
    6c14:	ldrb	r6, [r2, r6]
    6c18:	sub	r6, r6, #9
    6c1c:	cmp	r6, #23
    6c20:	bhi	72d8 <eval_string+0x11fc>
    6c24:	tst	r0, r3, lsl r6
    6c28:	beq	72d8 <eval_string+0x11fc>
    6c2c:	sub	r1, r1, #1
    6c30:	str	r1, [r9]
    6c34:	ldr	r1, [sl]
    6c38:	add	r6, r1, #1
    6c3c:	str	r6, [sl]
    6c40:	ldr	r1, [r9]
    6c44:	cmp	r1, #0
    6c48:	bgt	6c14 <eval_string+0xb38>
    6c4c:	b	77a0 <eval_string+0x16c4>
    6c50:	ldr	r6, [r4, #16]
    6c54:	ldr	r0, [r6, #4]
    6c58:	cmp	r0, #4
    6c5c:	bne	6cfc <eval_string+0xc20>
    6c60:	ldr	r0, [r5]
    6c64:	cmp	r0, #0
    6c68:	beq	7a0c <eval_string+0x1930>
    6c6c:	add	r7, r5, #8
    6c70:	add	r0, sp, #96	; 0x60
    6c74:	mov	r2, #520	; 0x208
    6c78:	mov	r1, r7
    6c7c:	bl	0 <memcpy>
    6c80:	mov	r0, r5
    6c84:	mov	r1, r6
    6c88:	bl	7afc <eval_cursor>
    6c8c:	cmp	r0, #0
    6c90:	bne	779c <eval_string+0x16c0>
    6c94:	mov	r0, #0
    6c98:	mov	r1, r9
    6c9c:	str	r0, [sl]
    6ca0:	mov	r0, r7
    6ca4:	bl	0 <coda_cursor_get_string_length>
    6ca8:	cmp	r0, #0
    6cac:	bne	779c <eval_string+0x16c0>
    6cb0:	ldr	r1, [r4, #20]
    6cb4:	cmp	r1, #0
    6cb8:	beq	7758 <eval_string+0x167c>
    6cbc:	add	r2, sp, #88	; 0x58
    6cc0:	mov	r0, r5
    6cc4:	bl	3bd0 <eval_integer>
    6cc8:	cmp	r0, #0
    6ccc:	bne	779c <eval_string+0x16c0>
    6cd0:	ldr	r4, [r9]
    6cd4:	ldr	r0, [sp, #88]	; 0x58
    6cd8:	ldr	r1, [sp, #92]	; 0x5c
    6cdc:	subs	r2, r0, r4
    6ce0:	sbcs	r1, r1, r4, asr #31
    6ce4:	movlt	r4, r0
    6ce8:	strlt	r0, [r9]
    6cec:	cmp	r4, #1
    6cf0:	bge	7764 <eval_string+0x1688>
    6cf4:	mov	r0, #0
    6cf8:	b	76f0 <eval_string+0x1614>
    6cfc:	add	r2, sp, #88	; 0x58
    6d00:	mov	r0, r5
    6d04:	mov	r1, r6
    6d08:	bl	3bd0 <eval_integer>
    6d0c:	cmp	r0, #0
    6d10:	bne	779c <eval_string+0x16c0>
    6d14:	ldr	r0, [sp, #88]	; 0x58
    6d18:	ldr	r1, [sp, #92]	; 0x5c
    6d1c:	add	r4, sp, #96	; 0x60
    6d20:	mov	r2, r4
    6d24:	bl	0 <coda_str64>
    6d28:	mov	r0, r4
    6d2c:	bl	0 <strdup>
    6d30:	cmp	r0, #0
    6d34:	str	r0, [r8]
    6d38:	beq	73b8 <eval_string+0x12dc>
    6d3c:	mov	r7, #0
    6d40:	add	r0, sp, #96	; 0x60
    6d44:	str	r7, [sl]
    6d48:	bl	0 <strlen>
    6d4c:	str	r0, [r9]
    6d50:	b	77a0 <eval_string+0x16c4>
    6d54:	mov	r7, #0
    6d58:	mov	r0, r4
    6d5c:	str	r7, [sl]
    6d60:	bl	0 <strlen>
    6d64:	mov	r5, r0
    6d68:	str	r0, [r9]
    6d6c:	add	r0, r0, #1
    6d70:	bl	0 <malloc>
    6d74:	cmp	r0, #0
    6d78:	str	r0, [r8]
    6d7c:	beq	7118 <eval_string+0x103c>
    6d80:	mov	r1, r4
    6d84:	b	613c <eval_string+0x60>
    6d88:	add	r1, r1, #1
    6d8c:	cmp	r1, r0
    6d90:	bge	72cc <eval_string+0x11f0>
    6d94:	str	r1, [sp, #36]	; 0x24
    6d98:	ldr	r1, [r4, #20]
    6d9c:	add	r0, sp, #68	; 0x44
    6da0:	add	r2, sp, #80	; 0x50
    6da4:	add	r3, sp, #72	; 0x48
    6da8:	str	r0, [sp]
    6dac:	mov	r0, r5
    6db0:	bl	60dc <eval_string>
    6db4:	cmp	r0, #0
    6db8:	bne	779c <eval_string+0x16c0>
    6dbc:	ldr	r0, [r8]
    6dc0:	ldr	r3, [r9]
    6dc4:	ldr	r2, [sp, #80]	; 0x50
    6dc8:	mov	ip, #0
    6dcc:	str	r0, [sp, #24]
    6dd0:	ldr	r0, [sl]
    6dd4:	str	r2, [sp, #28]
    6dd8:	str	r0, [sp, #20]
    6ddc:	ldr	r0, [sp, #68]	; 0x44
    6de0:	str	r0, [sp, #32]
    6de4:	ldr	r0, [sp, #72]	; 0x48
    6de8:	cmp	r0, #1
    6dec:	cmpge	r3, #1
    6df0:	bge	6e84 <eval_string+0xda8>
    6df4:	cmp	ip, r0
    6df8:	bne	6e14 <eval_string+0xd38>
    6dfc:	ldr	r8, [fp, #8]
    6e00:	ldr	r6, [sp, #16]
    6e04:	ldr	r1, [sp, #32]
    6e08:	cmp	ip, r3
    6e0c:	beq	6e50 <eval_string+0xd74>
    6e10:	b	6e64 <eval_string+0xd88>
    6e14:	ldr	r8, [fp, #8]
    6e18:	ldr	r6, [sp, #16]
    6e1c:	ldr	r1, [sp, #32]
    6e20:	cmp	ip, r3
    6e24:	beq	6e50 <eval_string+0xd74>
    6e28:	ldr	r2, [sp, #20]
    6e2c:	ldr	r6, [sp, #24]
    6e30:	add	r2, ip, r2
    6e34:	ldrb	r2, [r6, r2]
    6e38:	ldr	r6, [sp, #28]
    6e3c:	add	r6, ip, r6
    6e40:	ldrb	r6, [r1, r6]
    6e44:	cmp	r6, r2
    6e48:	ldr	r6, [sp, #16]
    6e4c:	bls	6e64 <eval_string+0xd88>
    6e50:	cmp	r0, #1
    6e54:	blt	6ed4 <eval_string+0xdf8>
    6e58:	mov	r0, r1
    6e5c:	bl	0 <free>
    6e60:	b	6ed4 <eval_string+0xdf8>
    6e64:	cmp	r3, #1
    6e68:	blt	6ec4 <eval_string+0xde8>
    6e6c:	mov	r0, r8
    6e70:	bl	0 <free>
    6e74:	ldr	r1, [sp, #68]	; 0x44
    6e78:	ldr	r0, [sp, #72]	; 0x48
    6e7c:	ldr	r2, [sp, #80]	; 0x50
    6e80:	b	6ec8 <eval_string+0xdec>
    6e84:	ldr	r2, [sp, #28]
    6e88:	ldr	r1, [sp, #32]
    6e8c:	ldr	r6, [sp, #24]
    6e90:	mov	ip, #0
    6e94:	add	r2, r1, r2
    6e98:	ldr	r1, [sp, #20]
    6e9c:	add	lr, r6, r1
    6ea0:	ldrb	r8, [lr, ip]
    6ea4:	ldrb	r6, [r2, ip]
    6ea8:	cmp	r6, r8
    6eac:	bne	6df4 <eval_string+0xd18>
    6eb0:	add	ip, ip, #1
    6eb4:	cmp	ip, r0
    6eb8:	cmplt	ip, r3
    6ebc:	blt	6ea0 <eval_string+0xdc4>
    6ec0:	b	6df4 <eval_string+0xd18>
    6ec4:	ldr	r2, [sp, #28]
    6ec8:	str	r2, [sl]
    6ecc:	str	r0, [r9]
    6ed0:	str	r1, [r8]
    6ed4:	ldr	r0, [sp, #88]	; 0x58
    6ed8:	ldr	r2, [sp, #36]	; 0x24
    6edc:	sub	r1, r0, #1
    6ee0:	cmp	r2, r1
    6ee4:	mov	r1, r2
    6ee8:	bge	6d88 <eval_string+0xcac>
    6eec:	mov	r0, r6
    6ef0:	bl	0 <coda_cursor_goto_next_array_element>
    6ef4:	cmp	r0, #0
    6ef8:	bne	779c <eval_string+0x16c0>
    6efc:	ldr	r0, [sp, #88]	; 0x58
    6f00:	ldr	r1, [sp, #36]	; 0x24
    6f04:	b	6d88 <eval_string+0xcac>
    6f08:	add	r6, r6, #1
    6f0c:	cmp	r6, r0
    6f10:	bge	7364 <eval_string+0x1288>
    6f14:	ldr	r1, [r4, #20]
    6f18:	add	r0, sp, #68	; 0x44
    6f1c:	add	r2, sp, #80	; 0x50
    6f20:	add	r3, sp, #72	; 0x48
    6f24:	str	r0, [sp]
    6f28:	mov	r0, r5
    6f2c:	bl	60dc <eval_string>
    6f30:	cmp	r0, #0
    6f34:	bne	779c <eval_string+0x16c0>
    6f38:	ldr	r0, [sp, #72]	; 0x48
    6f3c:	cmp	r0, #1
    6f40:	blt	6fa0 <eval_string+0xec4>
    6f44:	ldr	r1, [r9]
    6f48:	add	r0, r0, r1
    6f4c:	add	r1, r0, #1
    6f50:	ldr	r0, [r8]
    6f54:	bl	0 <realloc>
    6f58:	mov	sl, r0
    6f5c:	ldr	r0, [r9]
    6f60:	cmp	sl, #0
    6f64:	beq	7854 <eval_string+0x1778>
    6f68:	ldr	r2, [sp, #68]	; 0x44
    6f6c:	ldr	r1, [sp, #80]	; 0x50
    6f70:	add	r0, sl, r0
    6f74:	str	r2, [sp, #32]
    6f78:	add	r1, r2, r1
    6f7c:	ldr	r2, [sp, #72]	; 0x48
    6f80:	bl	0 <memcpy>
    6f84:	ldr	r0, [sp, #32]
    6f88:	bl	0 <free>
    6f8c:	ldr	r0, [r9]
    6f90:	ldr	r1, [sp, #72]	; 0x48
    6f94:	add	r0, r0, r1
    6f98:	str	r0, [r9]
    6f9c:	str	sl, [r8]
    6fa0:	ldr	r0, [sp, #88]	; 0x58
    6fa4:	sub	r1, r0, #1
    6fa8:	cmp	r6, r1
    6fac:	bge	6f08 <eval_string+0xe2c>
    6fb0:	ldr	r0, [sp, #36]	; 0x24
    6fb4:	bl	0 <coda_cursor_goto_next_array_element>
    6fb8:	cmp	r0, #0
    6fbc:	bne	779c <eval_string+0x16c0>
    6fc0:	ldr	r0, [sp, #88]	; 0x58
    6fc4:	b	6f08 <eval_string+0xe2c>
    6fc8:	ldr	r1, [r4, #24]
    6fcc:	mov	r0, r5
    6fd0:	mov	r2, sl
    6fd4:	mov	r3, r9
    6fd8:	str	r8, [sp]
    6fdc:	bl	60dc <eval_string>
    6fe0:	cmp	r0, #0
    6fe4:	bne	779c <eval_string+0x16c0>
    6fe8:	b	7704 <eval_string+0x1628>
    6fec:	ldr	r3, [sp, #80]	; 0x50
    6ff0:	ldr	r2, [sp, #72]	; 0x48
    6ff4:	ldr	r0, [sp, #64]	; 0x40
    6ff8:	ldr	ip, [sp, #88]	; 0x58
    6ffc:	ldr	lr, [sp, #68]	; 0x44
    7000:	ldr	r8, [sp, #96]	; 0x60
    7004:	mov	r5, #0
    7008:	cmp	r3, #1
    700c:	cmpge	r2, #1
    7010:	bge	75bc <eval_string+0x14e0>
    7014:	cmp	r5, r3
    7018:	beq	7398 <eval_string+0x12bc>
    701c:	cmp	r5, r2
    7020:	beq	703c <eval_string+0xf60>
    7024:	add	r1, r5, ip
    7028:	add	r4, r5, r8
    702c:	ldrb	r1, [r0, r1]
    7030:	ldrb	r4, [lr, r4]
    7034:	cmp	r4, r1
    7038:	bls	7398 <eval_string+0x12bc>
    703c:	ldr	r1, [fp, #8]
    7040:	cmp	r3, #1
    7044:	str	ip, [sl]
    7048:	str	r2, [r9]
    704c:	str	r0, [r1]
    7050:	blt	7704 <eval_string+0x1628>
    7054:	mov	r0, lr
    7058:	b	73b0 <eval_string+0x12d4>
    705c:	cmp	r1, #0
    7060:	beq	742c <eval_string+0x1350>
    7064:	add	r2, sp, #80	; 0x50
    7068:	mov	r0, r5
    706c:	bl	3bd0 <eval_integer>
    7070:	cmp	r0, #0
    7074:	bne	779c <eval_string+0x16c0>
    7078:	ldr	r0, [sp, #80]	; 0x50
    707c:	ldr	r1, [sp, #84]	; 0x54
    7080:	subs	r2, r0, #1
    7084:	sbcs	r2, r1, #0
    7088:	blt	7440 <eval_string+0x1364>
    708c:	lsl	r1, r1, #3
    7090:	lsl	r5, r0, #3
    7094:	orr	r6, r1, r0, lsr #29
    7098:	str	r5, [sp, #72]	; 0x48
    709c:	str	r6, [sp, #76]	; 0x4c
    70a0:	cmn	r6, #1
    70a4:	bgt	7450 <eval_string+0x1374>
    70a8:	movw	r1, #0
    70ac:	movt	r1, #0
    70b0:	b	77b4 <eval_string+0x16d8>
    70b4:	mov	r0, #28
    70b8:	str	r0, [sp, #80]	; 0x50
    70bc:	movw	r0, #0
    70c0:	movt	r0, #0
    70c4:	str	r0, [sp, #72]	; 0x48
    70c8:	mov	r0, #0
    70cc:	str	r0, [sp, #88]	; 0x58
    70d0:	mov	r0, #29
    70d4:	bl	0 <malloc>
    70d8:	cmp	r0, #0
    70dc:	str	r0, [r8]
    70e0:	beq	73cc <eval_string+0x12f0>
    70e4:	mov	r1, r0
    70e8:	ldr	r0, [sp, #88]	; 0x58
    70ec:	ldr	r2, [sp, #72]	; 0x48
    70f0:	vldr	d0, [sp, #96]	; 0x60
    70f4:	add	r0, r2, r0
    70f8:	bl	0 <coda_time_double_to_string>
    70fc:	cmp	r0, #0
    7100:	beq	76c4 <eval_string+0x15e8>
    7104:	ldr	r0, [r4, #20]
    7108:	cmp	r0, #0
    710c:	beq	779c <eval_string+0x16c0>
    7110:	ldr	r0, [sp, #72]	; 0x48
    7114:	b	7798 <eval_string+0x16bc>
    7118:	movw	r0, #3469	; 0xd8d
    711c:	b	733c <eval_string+0x1260>
    7120:	movw	r1, #0
    7124:	movt	r1, #0
    7128:	mvn	r0, #400	; 0x190
    712c:	bl	0 <coda_set_error>
    7130:	b	77a0 <eval_string+0x16c4>
    7134:	ldr	r0, [sp, #52]	; 0x34
    7138:	cmp	r0, #1
    713c:	blt	74fc <eval_string+0x1420>
    7140:	ldr	r1, [sp, #56]	; 0x38
    7144:	mov	r2, #0
    7148:	add	r0, r1, r0
    714c:	ldr	r1, [sp, #48]	; 0x30
    7150:	strb	r2, [r1, r0]
    7154:	ldr	r0, [sp, #56]	; 0x38
    7158:	ldr	r1, [sp, #48]	; 0x30
    715c:	add	r0, r1, r0
    7160:	b	7504 <eval_string+0x1428>
    7164:	ldr	r0, [sp, #88]	; 0x58
    7168:	ldr	r1, [sp, #36]	; 0x24
    716c:	add	r1, r1, #1
    7170:	cmp	r1, r0
    7174:	bge	72cc <eval_string+0x11f0>
    7178:	str	r1, [sp, #36]	; 0x24
    717c:	ldr	r1, [r4, #20]
    7180:	add	r0, sp, #68	; 0x44
    7184:	add	r2, sp, #80	; 0x50
    7188:	add	r3, sp, #72	; 0x48
    718c:	str	r0, [sp]
    7190:	mov	r0, r5
    7194:	bl	60dc <eval_string>
    7198:	cmp	r0, #0
    719c:	bne	779c <eval_string+0x16c0>
    71a0:	ldr	r0, [r8]
    71a4:	ldr	r2, [sp, #72]	; 0x48
    71a8:	ldr	r1, [r9]
    71ac:	ldr	r3, [sp, #80]	; 0x50
    71b0:	mov	ip, #0
    71b4:	str	r0, [sp, #32]
    71b8:	ldr	r0, [sl]
    71bc:	cmp	r2, #1
    71c0:	str	r3, [sp, #28]
    71c4:	cmpge	r1, #1
    71c8:	str	r0, [sp, #24]
    71cc:	ldr	r0, [sp, #68]	; 0x44
    71d0:	bge	7248 <eval_string+0x116c>
    71d4:	cmp	ip, r2
    71d8:	bne	71f4 <eval_string+0x1118>
    71dc:	ldr	r8, [fp, #8]
    71e0:	ldr	r6, [sp, #20]
    71e4:	cmp	r2, #1
    71e8:	blt	72a0 <eval_string+0x11c4>
    71ec:	bl	0 <free>
    71f0:	b	72a0 <eval_string+0x11c4>
    71f4:	cmp	ip, r1
    71f8:	beq	7220 <eval_string+0x1144>
    71fc:	ldr	r3, [sp, #24]
    7200:	ldr	r6, [sp, #32]
    7204:	add	r3, ip, r3
    7208:	ldrb	r3, [r6, r3]
    720c:	ldr	r6, [sp, #28]
    7210:	add	r6, ip, r6
    7214:	ldrb	r6, [r0, r6]
    7218:	cmp	r6, r3
    721c:	bls	71dc <eval_string+0x1100>
    7220:	ldr	r8, [fp, #8]
    7224:	cmp	r1, #1
    7228:	blt	728c <eval_string+0x11b0>
    722c:	ldr	r0, [sp, #32]
    7230:	bl	0 <free>
    7234:	ldr	r0, [sp, #68]	; 0x44
    7238:	ldr	r2, [sp, #72]	; 0x48
    723c:	ldr	r1, [sp, #80]	; 0x50
    7240:	ldr	r6, [sp, #20]
    7244:	b	7294 <eval_string+0x11b8>
    7248:	ldr	r3, [sp, #28]
    724c:	mov	ip, r2
    7250:	ldr	r6, [sp, #32]
    7254:	ldr	r2, [sp, #24]
    7258:	add	lr, r6, r2
    725c:	mov	r2, ip
    7260:	add	r3, r0, r3
    7264:	mov	ip, #0
    7268:	ldrb	r8, [lr, ip]
    726c:	ldrb	r6, [r3, ip]
    7270:	cmp	r6, r8
    7274:	bne	71d4 <eval_string+0x10f8>
    7278:	add	ip, ip, #1
    727c:	cmp	ip, r2
    7280:	cmplt	ip, r1
    7284:	blt	7268 <eval_string+0x118c>
    7288:	b	71d4 <eval_string+0x10f8>
    728c:	ldr	r6, [sp, #20]
    7290:	ldr	r1, [sp, #28]
    7294:	str	r1, [sl]
    7298:	str	r2, [r9]
    729c:	str	r0, [r8]
    72a0:	ldr	r0, [sp, #88]	; 0x58
    72a4:	ldr	r2, [sp, #36]	; 0x24
    72a8:	sub	r1, r0, #1
    72ac:	cmp	r2, r1
    72b0:	mov	r1, r2
    72b4:	bge	716c <eval_string+0x1090>
    72b8:	mov	r0, r6
    72bc:	bl	0 <coda_cursor_goto_next_array_element>
    72c0:	cmp	r0, #0
    72c4:	beq	7164 <eval_string+0x1088>
    72c8:	b	779c <eval_string+0x16c0>
    72cc:	add	r1, sp, #96	; 0x60
    72d0:	mov	r0, r6
    72d4:	b	736c <eval_string+0x1290>
    72d8:	sub	r2, r1, #1
    72dc:	ldr	r1, [r8]
    72e0:	mov	r3, #1
    72e4:	ldr	r6, [sl]
    72e8:	add	r6, r1, r6
    72ec:	ldrb	r6, [r6, r2]
    72f0:	sub	r6, r6, #9
    72f4:	cmp	r6, #23
    72f8:	bhi	77a0 <eval_string+0x16c4>
    72fc:	tst	r0, r3, lsl r6
    7300:	beq	77a0 <eval_string+0x16c4>
    7304:	sub	r6, r2, #1
    7308:	str	r2, [r9]
    730c:	cmp	r2, #0
    7310:	mov	r2, r6
    7314:	bgt	72e4 <eval_string+0x1208>
    7318:	b	77a0 <eval_string+0x16c4>
    731c:	movw	r0, #3638	; 0xe36
    7320:	movw	r1, #0
    7324:	movw	r3, #0
    7328:	str	r0, [sp]
    732c:	mvn	r0, #0
    7330:	mov	r2, r4
    7334:	b	7350 <eval_string+0x1274>
    7338:	movw	r0, #3690	; 0xe6a
    733c:	movw	r1, #0
    7340:	movw	r3, #0
    7344:	str	r0, [sp]
    7348:	mvn	r0, #0
    734c:	mov	r2, r5
    7350:	mvn	r7, #0
    7354:	movt	r1, #0
    7358:	movt	r3, #0
    735c:	bl	0 <coda_set_error>
    7360:	b	77a0 <eval_string+0x16c4>
    7364:	ldr	r0, [sp, #36]	; 0x24
    7368:	add	r1, sp, #96	; 0x60
    736c:	mov	r2, #520	; 0x208
    7370:	bl	0 <memcpy>
    7374:	b	77a0 <eval_string+0x16c4>
    7378:	cmp	r5, r2
    737c:	beq	7398 <eval_string+0x12bc>
    7380:	add	r1, r5, ip
    7384:	add	r4, r5, r8
    7388:	ldrb	r1, [r0, r1]
    738c:	ldrb	r4, [lr, r4]
    7390:	cmp	r4, r1
    7394:	bls	7408 <eval_string+0x132c>
    7398:	ldr	r1, [fp, #8]
    739c:	cmp	r2, #1
    73a0:	str	r8, [sl]
    73a4:	str	r3, [r9]
    73a8:	str	lr, [r1]
    73ac:	blt	7704 <eval_string+0x1628>
    73b0:	bl	0 <free>
    73b4:	b	7704 <eval_string+0x1628>
    73b8:	movw	r1, #0
    73bc:	movw	r2, #0
    73c0:	mvn	r0, #0
    73c4:	movw	r3, #2924	; 0xb6c
    73c8:	b	639c <eval_string+0x2c0>
    73cc:	ldr	r0, [r4, #20]
    73d0:	cmp	r0, #0
    73d4:	beq	73e0 <eval_string+0x1304>
    73d8:	ldr	r0, [sp, #72]	; 0x48
    73dc:	bl	0 <free>
    73e0:	ldr	r0, [r9]
    73e4:	movw	r1, #3740	; 0xe9c
    73e8:	movw	r3, #0
    73ec:	mvn	r7, #0
    73f0:	str	r1, [sp]
    73f4:	movw	r1, #0
    73f8:	movt	r3, #0
    73fc:	movt	r1, #0
    7400:	add	r2, r0, #1
    7404:	b	772c <eval_string+0x1650>
    7408:	ldr	r1, [fp, #8]
    740c:	cmp	r3, #1
    7410:	str	ip, [sl]
    7414:	str	r2, [r9]
    7418:	str	r0, [r1]
    741c:	blt	7704 <eval_string+0x1628>
    7420:	mov	r0, lr
    7424:	bl	0 <free>
    7428:	b	7704 <eval_string+0x1628>
    742c:	add	r1, sp, #72	; 0x48
    7430:	mov	r0, r7
    7434:	bl	0 <coda_cursor_get_bit_size>
    7438:	cmp	r0, #0
    743c:	bne	779c <eval_string+0x16c0>
    7440:	ldr	r5, [sp, #72]	; 0x48
    7444:	ldr	r6, [sp, #76]	; 0x4c
    7448:	cmn	r6, #1
    744c:	ble	70a8 <eval_string+0xfcc>
    7450:	lsr	r0, r5, #3
    7454:	lsr	r1, r6, #3
    7458:	orr	r0, r0, r6, lsl #29
    745c:	adds	r4, r0, #1
    7460:	adc	r2, r1, #0
    7464:	ands	r3, r5, #7
    7468:	moveq	r4, r0
    746c:	moveq	r2, r1
    7470:	mov	r0, #0
    7474:	orrs	r1, r4, r2
    7478:	str	r4, [sp, #80]	; 0x50
    747c:	str	r2, [sp, #84]	; 0x54
    7480:	str	r0, [sl]
    7484:	str	r4, [r9]
    7488:	beq	76f0 <eval_string+0x1614>
    748c:	add	r0, r4, #1
    7490:	bl	0 <malloc>
    7494:	cmp	r0, #0
    7498:	str	r0, [r8]
    749c:	beq	77cc <eval_string+0x16f0>
    74a0:	ldr	r2, [sp, #92]	; 0x5c
    74a4:	mov	r1, r0
    74a8:	ldr	r0, [sp, #88]	; 0x58
    74ac:	stm	sp, {r5, r6}
    74b0:	lsl	r2, r2, #3
    74b4:	orr	r3, r2, r0, lsr #29
    74b8:	lsl	r2, r0, #3
    74bc:	mov	r0, r7
    74c0:	bl	0 <coda_cursor_read_bits>
    74c4:	cmp	r0, #0
    74c8:	bne	7794 <eval_string+0x16b8>
    74cc:	b	76f4 <eval_string+0x1618>
    74d0:	str	r0, [r8]
    74d4:	cmp	r5, #1
    74d8:	blt	74e8 <eval_string+0x140c>
    74dc:	ldr	r0, [sp, #68]	; 0x44
    74e0:	bl	0 <free>
    74e4:	ldr	r4, [sp, #72]	; 0x48
    74e8:	cmp	r4, #1
    74ec:	blt	7704 <eval_string+0x1628>
    74f0:	ldr	r0, [sp, #64]	; 0x40
    74f4:	bl	0 <free>
    74f8:	b	7704 <eval_string+0x1628>
    74fc:	movw	r0, #0
    7500:	movt	r0, #0
    7504:	mov	r1, #0
    7508:	add	r2, sp, #80	; 0x50
    750c:	add	r3, sp, #72	; 0x48
    7510:	str	r1, [sp]
    7514:	mov	r1, #36	; 0x24
    7518:	bl	0 <coda_pcre_compile>
    751c:	mov	r6, r0
    7520:	ldr	r0, [sp, #48]	; 0x30
    7524:	cmp	r0, #0
    7528:	beq	7530 <eval_string+0x1454>
    752c:	bl	0 <free>
    7530:	cmp	r6, #0
    7534:	beq	7564 <eval_string+0x1488>
    7538:	ldr	r1, [r4, #24]
    753c:	ldr	r0, [r1, #4]
    7540:	cmp	r0, #1
    7544:	bne	75ec <eval_string+0x1510>
    7548:	add	r2, sp, #88	; 0x58
    754c:	mov	r0, r5
    7550:	bl	3bd0 <eval_integer>
    7554:	cmp	r0, #0
    7558:	bne	78b4 <eval_string+0x17d8>
    755c:	ldr	r4, [sp, #88]	; 0x58
    7560:	b	7634 <eval_string+0x1558>
    7564:	ldr	r3, [sp, #72]	; 0x48
    7568:	ldr	r2, [sp, #80]	; 0x50
    756c:	movw	r1, #0
    7570:	mvn	r0, #400	; 0x190
    7574:	movt	r1, #0
    7578:	bl	0 <coda_set_error>
    757c:	ldr	r0, [sp, #60]	; 0x3c
    7580:	cmp	r0, #0
    7584:	bne	7798 <eval_string+0x16bc>
    7588:	b	779c <eval_string+0x16c0>
    758c:	add	r4, lr, r8
    7590:	add	r7, r0, ip
    7594:	mov	r5, #0
    7598:	ldrb	r1, [r7, r5]
    759c:	ldrb	r6, [r4, r5]
    75a0:	cmp	r6, r1
    75a4:	bne	64f4 <eval_string+0x418>
    75a8:	add	r5, r5, #1
    75ac:	cmp	r5, r3
    75b0:	cmplt	r5, r2
    75b4:	blt	7598 <eval_string+0x14bc>
    75b8:	b	64f4 <eval_string+0x418>
    75bc:	add	r4, lr, r8
    75c0:	add	r7, r0, ip
    75c4:	mov	r5, #0
    75c8:	ldrb	r1, [r7, r5]
    75cc:	ldrb	r6, [r4, r5]
    75d0:	cmp	r6, r1
    75d4:	bne	7014 <eval_string+0xf38>
    75d8:	add	r5, r5, #1
    75dc:	cmp	r5, r3
    75e0:	cmplt	r5, r2
    75e4:	blt	75c8 <eval_string+0x14ec>
    75e8:	b	7014 <eval_string+0xf38>
    75ec:	add	r0, sp, #40	; 0x28
    75f0:	add	r2, sp, #88	; 0x58
    75f4:	add	r3, sp, #44	; 0x2c
    75f8:	str	r0, [sp]
    75fc:	mov	r0, r5
    7600:	bl	60dc <eval_string>
    7604:	cmp	r0, #0
    7608:	bne	78b4 <eval_string+0x17d8>
    760c:	cmp	r9, #0
    7610:	beq	7834 <eval_string+0x1758>
    7614:	ldr	r1, [sp, #40]	; 0x28
    7618:	mov	r0, r6
    761c:	bl	0 <coda_pcre_get_stringnumber>
    7620:	cmn	r0, #1
    7624:	ble	789c <eval_string+0x17c0>
    7628:	mov	r4, r0
    762c:	ldr	r0, [sp, #40]	; 0x28
    7630:	bl	0 <free>
    7634:	ldr	r0, [sp, #60]	; 0x3c
    7638:	cmp	r0, #0
    763c:	bne	7658 <eval_string+0x157c>
    7640:	movw	r0, #0
    7644:	movt	r0, #0
    7648:	bl	0 <strdup>
    764c:	cmp	r0, #0
    7650:	str	r0, [sp, #60]	; 0x3c
    7654:	beq	78e4 <eval_string+0x1808>
    7658:	ldr	r1, [sp, #68]	; 0x44
    765c:	ldr	r3, [sp, #64]	; 0x40
    7660:	mov	r5, #0
    7664:	mov	r2, #48	; 0x30
    7668:	add	r7, sp, #96	; 0x60
    766c:	str	r5, [sp]
    7670:	stmib	sp, {r5, r7}
    7674:	str	r2, [sp, #12]
    7678:	add	r2, r0, r1
    767c:	mov	r0, r6
    7680:	mov	r1, #0
    7684:	bl	0 <coda_pcre_exec>
    7688:	mov	r5, r0
    768c:	movw	r0, #0
    7690:	movt	r0, #0
    7694:	ldr	r1, [r0]
    7698:	mov	r0, r6
    769c:	blx	r1
    76a0:	cmn	r5, #2
    76a4:	bgt	77fc <eval_string+0x1720>
    76a8:	movw	r1, #0
    76ac:	mvn	r0, #400	; 0x190
    76b0:	mov	r2, r5
    76b4:	movt	r1, #0
    76b8:	bl	0 <coda_set_error>
    76bc:	ldr	r0, [sp, #60]	; 0x3c
    76c0:	b	7798 <eval_string+0x16bc>
    76c4:	mov	r7, #0
    76c8:	str	r7, [sl]
    76cc:	ldr	r0, [r8]
    76d0:	bl	0 <strlen>
    76d4:	str	r0, [r9]
    76d8:	ldr	r0, [r4, #20]
    76dc:	cmp	r0, #0
    76e0:	beq	77a0 <eval_string+0x16c4>
    76e4:	ldr	r0, [sp, #72]	; 0x48
    76e8:	bl	0 <free>
    76ec:	b	77a0 <eval_string+0x16c4>
    76f0:	str	r0, [r8]
    76f4:	add	r1, sp, #96	; 0x60
    76f8:	mov	r0, r7
    76fc:	mov	r2, #520	; 0x208
    7700:	bl	0 <memcpy>
    7704:	mov	r7, #0
    7708:	b	77a0 <eval_string+0x16c4>
    770c:	movw	r1, #0
    7710:	movw	r3, #0
    7714:	movw	r0, #3031	; 0xbd7
    7718:	mov	r2, r9
    771c:	mvn	r7, #0
    7720:	movt	r1, #0
    7724:	movt	r3, #0
    7728:	str	r0, [sp]
    772c:	mvn	r0, #0
    7730:	bl	0 <coda_set_error>
    7734:	b	77a0 <eval_string+0x16c4>
    7738:	movw	r1, #0
    773c:	movt	r1, #0
    7740:	b	77b4 <eval_string+0x16d8>
    7744:	mov	r7, #0
    7748:	str	r7, [sl]
    774c:	str	r7, [r9]
    7750:	str	r7, [r8]
    7754:	b	77a0 <eval_string+0x16c4>
    7758:	ldr	r4, [r9]
    775c:	cmp	r4, #1
    7760:	blt	6cf4 <eval_string+0xc18>
    7764:	add	r5, r4, #1
    7768:	mov	r0, r5
    776c:	bl	0 <malloc>
    7770:	cmp	r0, #0
    7774:	str	r0, [r8]
    7778:	beq	77d4 <eval_string+0x16f8>
    777c:	mov	r1, r0
    7780:	mov	r0, r7
    7784:	mov	r2, r5
    7788:	bl	0 <coda_cursor_read_string>
    778c:	cmp	r0, #0
    7790:	beq	76f4 <eval_string+0x1618>
    7794:	ldr	r0, [r8]
    7798:	bl	0 <free>
    779c:	mvn	r7, #0
    77a0:	mov	r0, r7
    77a4:	sub	sp, fp, #28
    77a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    77ac:	movw	r1, #0
    77b0:	movt	r1, #0
    77b4:	mvn	r0, #400	; 0x190
    77b8:	bl	0 <coda_set_error>
    77bc:	b	779c <eval_string+0x16c0>
    77c0:	movw	r1, #0
    77c4:	movt	r1, #0
    77c8:	b	7128 <eval_string+0x104c>
    77cc:	movw	r0, #2991	; 0xbaf
    77d0:	b	7320 <eval_string+0x1244>
    77d4:	movw	r1, #0
    77d8:	movw	r3, #0
    77dc:	movw	r0, #2895	; 0xb4f
    77e0:	mov	r2, r4
    77e4:	movt	r1, #0
    77e8:	movt	r3, #0
    77ec:	str	r0, [sp]
    77f0:	mvn	r0, #0
    77f4:	bl	0 <coda_set_error>
    77f8:	b	779c <eval_string+0x16c0>
    77fc:	cmp	r5, #0
    7800:	beq	78cc <eval_string+0x17f0>
    7804:	cmp	r4, r5
    7808:	bge	791c <eval_string+0x1840>
    780c:	ldr	r0, [r7, r4, lsl #3]
    7810:	mov	r1, #4
    7814:	orr	r1, r1, r4, lsl #3
    7818:	str	r0, [sl]
    781c:	ldr	r1, [r7, r1]
    7820:	sub	r0, r1, r0
    7824:	str	r0, [r9]
    7828:	ldr	r0, [sp, #60]	; 0x3c
    782c:	str	r0, [r8]
    7830:	b	7704 <eval_string+0x1628>
    7834:	movw	r1, #0
    7838:	mvn	r0, #400	; 0x190
    783c:	movt	r1, #0
    7840:	bl	0 <coda_set_error>
    7844:	ldr	r0, [sp, #40]	; 0x28
    7848:	cmp	r0, #0
    784c:	bne	78b0 <eval_string+0x17d4>
    7850:	b	78b4 <eval_string+0x17d8>
    7854:	ldr	r1, [sp, #72]	; 0x48
    7858:	movw	r2, #3275	; 0xccb
    785c:	movw	r3, #0
    7860:	str	r2, [sp]
    7864:	movt	r3, #0
    7868:	add	r2, r1, r0
    786c:	movw	r1, #0
    7870:	mvn	r0, #0
    7874:	movt	r1, #0
    7878:	bl	0 <coda_set_error>
    787c:	b	6738 <eval_string+0x65c>
    7880:	mov	r7, #0
    7884:	str	r7, [sl]
    7888:	str	r7, [r9]
    788c:	ldr	r0, [r8]
    7890:	bl	0 <free>
    7894:	str	r7, [r8]
    7898:	b	77a0 <eval_string+0x16c4>
    789c:	movw	r1, #0
    78a0:	mvn	r0, #400	; 0x190
    78a4:	movt	r1, #0
    78a8:	bl	0 <coda_set_error>
    78ac:	ldr	r0, [sp, #40]	; 0x28
    78b0:	bl	0 <free>
    78b4:	movw	r0, #0
    78b8:	movt	r0, #0
    78bc:	ldr	r1, [r0]
    78c0:	mov	r0, r6
    78c4:	blx	r1
    78c8:	b	779c <eval_string+0x16c0>
    78cc:	movw	r1, #0
    78d0:	mvn	r0, #400	; 0x190
    78d4:	movt	r1, #0
    78d8:	bl	0 <coda_set_error>
    78dc:	ldr	r0, [sp, #60]	; 0x3c
    78e0:	b	7798 <eval_string+0x16bc>
    78e4:	movw	r1, #0
    78e8:	movw	r2, #0
    78ec:	mvn	r0, #0
    78f0:	movw	r3, #3583	; 0xdff
    78f4:	mvn	r7, #0
    78f8:	movt	r1, #0
    78fc:	movt	r2, #0
    7900:	bl	0 <coda_set_error>
    7904:	movw	r0, #0
    7908:	movt	r0, #0
    790c:	ldr	r1, [r0]
    7910:	mov	r0, r6
    7914:	blx	r1
    7918:	b	77a0 <eval_string+0x16c4>
    791c:	mov	r7, #0
    7920:	str	r7, [sl]
    7924:	str	r7, [r9]
    7928:	str	r7, [r8]
    792c:	ldr	r0, [sp, #60]	; 0x3c
    7930:	bl	0 <free>
    7934:	b	77a0 <eval_string+0x16c4>
    7938:	movw	r0, #0
    793c:	movw	r1, #0
    7940:	movw	r3, #0
    7944:	movw	r2, #3794	; 0xed2
    7948:	movt	r0, #0
    794c:	movt	r1, #0
    7950:	movt	r3, #0
    7954:	bl	0 <__assert_fail>
    7958:	movw	r0, #0
    795c:	movw	r1, #0
    7960:	movw	r3, #0
    7964:	movw	r2, #3624	; 0xe28
    7968:	b	7a1c <eval_string+0x1940>
    796c:	movw	r0, #0
    7970:	movw	r1, #0
    7974:	movw	r3, #0
    7978:	movw	r2, #3650	; 0xe42
    797c:	b	7a1c <eval_string+0x1940>
    7980:	movw	r0, #0
    7984:	movw	r1, #0
    7988:	movw	r3, #0
    798c:	movw	r2, #2938	; 0xb7a
    7990:	b	7a1c <eval_string+0x1940>
    7994:	movw	r0, #0
    7998:	movw	r1, #0
    799c:	movw	r3, #0
    79a0:	movw	r2, #3676	; 0xe5c
    79a4:	b	7a1c <eval_string+0x1940>
    79a8:	movw	r0, #0
    79ac:	movw	r1, #0
    79b0:	movw	r3, #0
    79b4:	movw	r2, #3449	; 0xd79
    79b8:	b	7a1c <eval_string+0x1940>
    79bc:	movw	r0, #0
    79c0:	movw	r1, #0
    79c4:	movw	r3, #0
    79c8:	movw	r2, #3763	; 0xeb3
    79cc:	b	7a1c <eval_string+0x1940>
    79d0:	movw	r0, #0
    79d4:	movw	r1, #0
    79d8:	movw	r3, #0
    79dc:	movw	r2, #3301	; 0xce5
    79e0:	b	7a1c <eval_string+0x1940>
    79e4:	movw	r0, #0
    79e8:	movw	r1, #0
    79ec:	movw	r3, #0
    79f0:	movw	r2, #3234	; 0xca2
    79f4:	b	7a1c <eval_string+0x1940>
    79f8:	movw	r0, #0
    79fc:	movw	r1, #0
    7a00:	movw	r3, #0
    7a04:	movw	r2, #3363	; 0xd23
    7a08:	b	7a1c <eval_string+0x1940>
    7a0c:	movw	r0, #0
    7a10:	movw	r1, #0
    7a14:	movw	r3, #0
    7a18:	movw	r2, #2865	; 0xb31
    7a1c:	movt	r0, #0
    7a20:	b	794c <eval_string+0x1870>

00007a24 <coda_expression_eval_node>:
    7a24:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    7a28:	add	fp, sp, #24
    7a2c:	sub	sp, sp, #568	; 0x238
    7a30:	mov	r7, r0
    7a34:	ldr	r0, [r0, #4]
    7a38:	cmp	r0, #4
    7a3c:	bne	7abc <coda_expression_eval_node+0x98>
    7a40:	mov	r4, r1
    7a44:	cmp	r1, #0
    7a48:	beq	7ac8 <coda_expression_eval_node+0xa4>
    7a4c:	mov	r6, sp
    7a50:	mov	r1, r4
    7a54:	mov	r2, #520	; 0x208
    7a58:	str	r4, [sp]
    7a5c:	add	r8, r6, #8
    7a60:	mov	r0, r8
    7a64:	bl	0 <memcpy>
    7a68:	vmov.i32	q8, #0	; 0x00000000
    7a6c:	add	r0, r6, #528	; 0x210
    7a70:	mov	r5, #0
    7a74:	mov	r1, r7
    7a78:	str	r5, [sp, #560]	; 0x230
    7a7c:	vst1.64	{d16-d17}, [r0]
    7a80:	add	r0, r6, #544	; 0x220
    7a84:	vst1.64	{d16-d17}, [r0]
    7a88:	mov	r0, r6
    7a8c:	bl	7afc <eval_cursor>
    7a90:	cmp	r0, #0
    7a94:	beq	7ae8 <coda_expression_eval_node+0xc4>
    7a98:	mov	r0, r4
    7a9c:	mov	r1, r8
    7aa0:	bl	0 <coda_cursor_compare>
    7aa4:	mvn	r5, #0
    7aa8:	cmp	r0, #0
    7aac:	beq	7adc <coda_expression_eval_node+0xb8>
    7ab0:	mov	r0, r8
    7ab4:	bl	0 <coda_cursor_add_to_error_message>
    7ab8:	b	7adc <coda_expression_eval_node+0xb8>
    7abc:	movw	r1, #0
    7ac0:	movt	r1, #0
    7ac4:	b	7ad0 <coda_expression_eval_node+0xac>
    7ac8:	movw	r1, #0
    7acc:	movt	r1, #0
    7ad0:	mvn	r0, #99	; 0x63
    7ad4:	bl	0 <coda_set_error>
    7ad8:	mvn	r5, #0
    7adc:	mov	r0, r5
    7ae0:	sub	sp, fp, #24
    7ae4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    7ae8:	mov	r0, r4
    7aec:	mov	r1, r8
    7af0:	mov	r2, #520	; 0x208
    7af4:	bl	0 <memcpy>
    7af8:	b	7adc <coda_expression_eval_node+0xb8>

00007afc <eval_cursor>:
    7afc:	push	{r4, r5, r6, sl, fp, lr}
    7b00:	add	fp, sp, #16
    7b04:	sub	sp, sp, #24
    7b08:	mov	r5, r1
    7b0c:	ldr	r1, [r0]
    7b10:	cmp	r1, #0
    7b14:	beq	7e58 <eval_cursor+0x35c>
    7b18:	mov	r4, r0
    7b1c:	ldr	r0, [r5]
    7b20:	sub	r0, r0, #10
    7b24:	cmp	r0, #28
    7b28:	bhi	7e40 <eval_cursor+0x344>
    7b2c:	add	r2, pc, #0
    7b30:	ldr	pc, [r2, r0, lsl #2]
    7b34:	.word	0x00007ba8
    7b38:	.word	0x00007e40
    7b3c:	.word	0x00007e40
    7b40:	.word	0x00007e40
    7b44:	.word	0x00007e40
    7b48:	.word	0x00007e40
    7b4c:	.word	0x00007e40
    7b50:	.word	0x00007e40
    7b54:	.word	0x00007e40
    7b58:	.word	0x00007e40
    7b5c:	.word	0x00007e40
    7b60:	.word	0x00007e40
    7b64:	.word	0x00007e40
    7b68:	.word	0x00007e40
    7b6c:	.word	0x00007e40
    7b70:	.word	0x00007e40
    7b74:	.word	0x00007e40
    7b78:	.word	0x00007e40
    7b7c:	.word	0x00007e40
    7b80:	.word	0x00007e40
    7b84:	.word	0x00007e40
    7b88:	.word	0x00007e40
    7b8c:	.word	0x00007c1c
    7b90:	.word	0x00007bd4
    7b94:	.word	0x00007cc0
    7b98:	.word	0x00007c50
    7b9c:	.word	0x00007ccc
    7ba0:	.word	0x00007cd4
    7ba4:	.word	0x00007c40
    7ba8:	ldr	r1, [r1]
    7bac:	ldr	r0, [r1, #16]
    7bb0:	cmp	r0, #0
    7bb4:	beq	7d00 <eval_cursor+0x204>
    7bb8:	bl	0 <coda_type_get_format_name>
    7bbc:	movw	r1, #0
    7bc0:	mov	r2, r0
    7bc4:	mvn	r0, #400	; 0x190
    7bc8:	movt	r1, #0
    7bcc:	bl	0 <coda_set_error>
    7bd0:	b	7d44 <eval_cursor+0x248>
    7bd4:	ldr	r1, [r5, #16]
    7bd8:	cmp	r1, #0
    7bdc:	beq	7bf4 <eval_cursor+0xf8>
    7be0:	mov	r0, r4
    7be4:	bl	7afc <eval_cursor>
    7be8:	mvn	r6, #0
    7bec:	cmp	r0, #0
    7bf0:	bne	7d48 <eval_cursor+0x24c>
    7bf4:	add	r4, r4, #8
    7bf8:	mov	r0, r4
    7bfc:	bl	0 <coda_cursor_goto_attributes>
    7c00:	mvn	r6, #0
    7c04:	cmp	r0, #0
    7c08:	bne	7d48 <eval_cursor+0x24c>
    7c0c:	ldr	r1, [r5, #12]
    7c10:	mov	r0, r4
    7c14:	bl	0 <coda_cursor_goto_record_field_by_name>
    7c18:	b	7d0c <eval_cursor+0x210>
    7c1c:	ldr	r2, [r5, #16]
    7c20:	cmp	r2, #0
    7c24:	beq	7d18 <eval_cursor+0x21c>
    7c28:	mov	r0, r4
    7c2c:	mov	r1, r2
    7c30:	bl	7afc <eval_cursor>
    7c34:	cmp	r0, #0
    7c38:	bne	7d44 <eval_cursor+0x248>
    7c3c:	b	7d2c <eval_cursor+0x230>
    7c40:	ldr	r1, [r1]
    7c44:	add	r0, r4, #8
    7c48:	bl	0 <coda_cursor_set_product>
    7c4c:	b	7d08 <eval_cursor+0x20c>
    7c50:	ldr	r1, [r5, #16]
    7c54:	cmp	r1, #0
    7c58:	beq	7c6c <eval_cursor+0x170>
    7c5c:	mov	r0, r4
    7c60:	bl	7afc <eval_cursor>
    7c64:	cmp	r0, #0
    7c68:	bne	7d44 <eval_cursor+0x248>
    7c6c:	add	r6, r4, #8
    7c70:	add	r1, sp, #20
    7c74:	mov	r0, r6
    7c78:	bl	0 <coda_cursor_get_type_class>
    7c7c:	cmp	r0, #0
    7c80:	bne	7d44 <eval_cursor+0x248>
    7c84:	ldr	r0, [sp, #20]
    7c88:	cmp	r0, #6
    7c8c:	bne	7ca0 <eval_cursor+0x1a4>
    7c90:	mov	r0, r6
    7c94:	bl	0 <coda_cursor_use_base_type_of_special_type>
    7c98:	cmp	r0, #0
    7c9c:	bne	7d44 <eval_cursor+0x248>
    7ca0:	ldr	r1, [r5, #12]
    7ca4:	cmp	r1, #0
    7ca8:	beq	7d88 <eval_cursor+0x28c>
    7cac:	mov	r0, r6
    7cb0:	bl	0 <coda_cursor_goto_record_field_by_name>
    7cb4:	cmp	r0, #0
    7cb8:	bne	7d44 <eval_cursor+0x248>
    7cbc:	b	7ccc <eval_cursor+0x1d0>
    7cc0:	add	r0, r4, #8
    7cc4:	mov	r2, #520	; 0x208
    7cc8:	bl	0 <memcpy>
    7ccc:	mov	r6, #0
    7cd0:	b	7d48 <eval_cursor+0x24c>
    7cd4:	ldr	r1, [r5, #16]
    7cd8:	cmp	r1, #0
    7cdc:	beq	7cf4 <eval_cursor+0x1f8>
    7ce0:	mov	r0, r4
    7ce4:	bl	7afc <eval_cursor>
    7ce8:	mvn	r6, #0
    7cec:	cmp	r0, #0
    7cf0:	bne	7d48 <eval_cursor+0x24c>
    7cf4:	add	r0, r4, #8
    7cf8:	bl	0 <coda_cursor_goto_parent>
    7cfc:	b	7d08 <eval_cursor+0x20c>
    7d00:	add	r0, r4, #8
    7d04:	bl	0 <coda_ascii_cursor_set_asciilines>
    7d08:	mvn	r6, #0
    7d0c:	cmp	r0, #0
    7d10:	moveq	r6, #0
    7d14:	b	7d48 <eval_cursor+0x24c>
    7d18:	ldr	r1, [r1]
    7d1c:	add	r0, r4, #8
    7d20:	bl	0 <coda_cursor_set_product>
    7d24:	cmp	r0, #0
    7d28:	bne	7d44 <eval_cursor+0x248>
    7d2c:	ldr	r1, [r5, #20]
    7d30:	add	r2, sp, #8
    7d34:	mov	r0, r4
    7d38:	bl	3bd0 <eval_integer>
    7d3c:	cmp	r0, #0
    7d40:	beq	7d54 <eval_cursor+0x258>
    7d44:	mvn	r6, #0
    7d48:	mov	r0, r6
    7d4c:	sub	sp, fp, #16
    7d50:	pop	{r4, r5, r6, sl, fp, pc}
    7d54:	ldr	r0, [pc, #284]	; 7e78 <eval_cursor+0x37c>
    7d58:	ldr	r1, [pc, r0]
    7d5c:	bl	0 <__aeabi_read_tp>
    7d60:	ldr	r0, [r0, r1]
    7d64:	cmp	r0, #0
    7d68:	beq	7db8 <eval_cursor+0x2bc>
    7d6c:	ldr	r2, [sp, #8]
    7d70:	add	r0, r4, #8
    7d74:	mov	r1, r2
    7d78:	bl	0 <coda_cursor_goto_array_element_by_index>
    7d7c:	cmp	r0, #0
    7d80:	bne	7d44 <eval_cursor+0x248>
    7d84:	b	7ccc <eval_cursor+0x1d0>
    7d88:	ldr	r1, [r5, #20]
    7d8c:	add	r2, sp, #8
    7d90:	mov	r0, r4
    7d94:	bl	3bd0 <eval_integer>
    7d98:	cmp	r0, #0
    7d9c:	bne	7d44 <eval_cursor+0x248>
    7da0:	ldr	r1, [sp, #8]
    7da4:	mov	r0, r6
    7da8:	bl	0 <coda_cursor_goto_record_field_by_index>
    7dac:	cmp	r0, #0
    7db0:	bne	7d44 <eval_cursor+0x248>
    7db4:	b	7ccc <eval_cursor+0x1d0>
    7db8:	add	r5, r4, #8
    7dbc:	add	r1, sp, #4
    7dc0:	mov	r0, r5
    7dc4:	bl	0 <coda_cursor_get_type_class>
    7dc8:	cmp	r0, #0
    7dcc:	bne	7d44 <eval_cursor+0x248>
    7dd0:	ldr	r0, [sp, #4]
    7dd4:	cmp	r0, #1
    7dd8:	bne	7e28 <eval_cursor+0x32c>
    7ddc:	add	r1, sp, #20
    7de0:	mov	r0, r5
    7de4:	bl	0 <coda_cursor_get_num_elements>
    7de8:	cmp	r0, #0
    7dec:	bne	7d44 <eval_cursor+0x248>
    7df0:	ldr	r0, [sp, #12]
    7df4:	ldr	r3, [sp, #20]
    7df8:	ldr	r2, [sp, #8]
    7dfc:	cmp	r0, #0
    7e00:	bmi	7e14 <eval_cursor+0x318>
    7e04:	asr	r1, r3, #31
    7e08:	subs	r6, r2, r3
    7e0c:	sbcs	r0, r0, r1
    7e10:	blt	7d70 <eval_cursor+0x274>
    7e14:	movw	r1, #0
    7e18:	mvn	r0, #106	; 0x6a
    7e1c:	movt	r1, #0
    7e20:	bl	0 <coda_set_error>
    7e24:	b	7d44 <eval_cursor+0x248>
    7e28:	bl	0 <coda_type_get_class_name>
    7e2c:	movw	r1, #0
    7e30:	mov	r2, r0
    7e34:	mvn	r0, #104	; 0x68
    7e38:	movt	r1, #0
    7e3c:	b	7bcc <eval_cursor+0xd0>
    7e40:	movw	r0, #0
    7e44:	movw	r1, #0
    7e48:	movw	r3, #0
    7e4c:	movw	r2, #4079	; 0xfef
    7e50:	movt	r0, #0
    7e54:	b	7e6c <eval_cursor+0x370>
    7e58:	movw	r0, #0
    7e5c:	movw	r1, #0
    7e60:	movw	r3, #0
    7e64:	movw	r2, #3913	; 0xf49
    7e68:	movt	r0, #0
    7e6c:	movt	r1, #0
    7e70:	movt	r3, #0
    7e74:	bl	0 <__assert_fail>
    7e78:	.word	0x00000118
