
../compcert-repos/prog2/CMakeFiles/1.5.dir/Aula01_Ficheiros_e_Formatos_de_dados/05.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <main>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	movw	r0, #0
   c:	movw	r1, #0
  10:	movt	r0, #0
  14:	movt	r1, #0
  18:	bl	0 <fopen>
  1c:	mov	r4, r0
  20:	mov	r5, #0
  24:	b	30 <main+0x30>
  28:	mov	r2, #1
  2c:	bl	0 <fseek>
  30:	mov	r0, r4
  34:	bl	0 <fgetc_unlocked>
  38:	uxtb	r0, r0
  3c:	cmp	r0, #111	; 0x6f
  40:	ble	98 <main+0x98>
  44:	cmp	r0, #112	; 0x70
  48:	beq	c4 <main+0xc4>
  4c:	cmp	r0, #115	; 0x73
  50:	bne	30 <main+0x30>
  54:	mov	r0, r4
  58:	mvn	r1, #0
  5c:	mov	r2, #1
  60:	bl	0 <fseek>
  64:	mov	r0, r4
  68:	bl	0 <fgetc_unlocked>
  6c:	mov	r0, r4
  70:	bl	0 <fgetc_unlocked>
  74:	mov	r0, r4
  78:	bl	0 <fgetc_unlocked>
  7c:	mov	r0, r4
  80:	bl	0 <fgetc_unlocked>
  84:	mov	r0, r4
  88:	bl	0 <fgetc_unlocked>
  8c:	mov	r0, r4
  90:	mvn	r1, #3
  94:	b	28 <main+0x28>
  98:	cmp	r0, #42	; 0x2a
  9c:	beq	110 <main+0x110>
  a0:	cmp	r0, #47	; 0x2f
  a4:	bne	30 <main+0x30>
  a8:	mov	r0, r4
  ac:	bl	0 <fgetc_unlocked>
  b0:	cmp	r5, #0
  b4:	cmpeq	r0, #42	; 0x2a
  b8:	bne	128 <main+0x128>
  bc:	mov	r5, #1
  c0:	b	30 <main+0x30>
  c4:	mov	r0, r4
  c8:	mvn	r1, #0
  cc:	mov	r2, #1
  d0:	bl	0 <fseek>
  d4:	mov	r0, r4
  d8:	bl	0 <fgetc_unlocked>
  dc:	mov	r0, r4
  e0:	bl	0 <fgetc_unlocked>
  e4:	mov	r0, r4
  e8:	bl	0 <fgetc_unlocked>
  ec:	mov	r0, r4
  f0:	bl	0 <fgetc_unlocked>
  f4:	mov	r0, r4
  f8:	bl	0 <fgetc_unlocked>
  fc:	mov	r0, r4
 100:	bl	0 <fgetc_unlocked>
 104:	mov	r0, r4
 108:	mvn	r1, #4
 10c:	b	28 <main+0x28>
 110:	mov	r0, r4
 114:	bl	0 <fgetc_unlocked>
 118:	cmp	r5, #0
 11c:	beq	128 <main+0x128>
 120:	cmp	r0, #47	; 0x2f
 124:	beq	20 <main+0x20>
 128:	mov	r0, r4
 12c:	mvn	r1, #0
 130:	b	28 <main+0x28>

00000134 <IsIOFunction>:
 134:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 138:	add	fp, sp, #24
 13c:	sub	sp, sp, #8
 140:	mov	r8, r0
 144:	mov	r5, r1
 148:	mov	r0, r1
 14c:	mvn	r1, #0
 150:	mov	r2, #1
 154:	bl	0 <fseek>
 158:	mov	r0, r8
 15c:	bl	0 <strlen>
 160:	mov	r9, #0
 164:	mov	r7, r0
 168:	cmp	r0, #1
 16c:	strb	r9, [sp, #6]
 170:	strh	r9, [sp, #4]
 174:	str	r9, [sp]
 178:	blt	1a4 <IsIOFunction+0x70>
 17c:	mov	r4, sp
 180:	mov	r6, r7
 184:	mov	r0, r5
 188:	bl	0 <fgetc>
 18c:	strb	r0, [r4], #1
 190:	subs	r6, r6, #1
 194:	bne	184 <IsIOFunction+0x50>
 198:	mov	r0, sp
 19c:	add	r0, r0, r7
 1a0:	b	1a8 <IsIOFunction+0x74>
 1a4:	mov	r0, sp
 1a8:	strb	r9, [r0]
 1ac:	rsb	r1, r7, #1
 1b0:	mov	r0, r5
 1b4:	mov	r2, #1
 1b8:	bl	0 <fseek>
 1bc:	mov	r1, sp
 1c0:	mov	r0, r8
 1c4:	bl	0 <strcmp>
 1c8:	clz	r0, r0
 1cc:	lsr	r0, r0, #5
 1d0:	sub	sp, fp, #24
 1d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
