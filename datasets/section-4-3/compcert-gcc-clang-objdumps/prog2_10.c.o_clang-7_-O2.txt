
../compcert-repos/prog2/CMakeFiles/0.10.dir/Aula00_Conceitos_base/10.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <nova_tarefa>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	sub	sp, sp, #8
   c:	mov	r1, r0
  10:	add	r0, r0, #64	; 0x40
  14:	str	r0, [sp]
  18:	movw	r0, #0
  1c:	add	r2, r1, #30
  20:	add	r3, r1, #60	; 0x3c
  24:	movt	r0, #0
  28:	bl	0 <__isoc99_scanf>
  2c:	sub	r0, r0, #4
  30:	clz	r0, r0
  34:	lsr	r0, r0, #5
  38:	mov	sp, fp
  3c:	pop	{fp, pc}

00000040 <ler_tarefas>:
  40:	push	{r4, r5, r6, sl, fp, lr}
  44:	add	fp, sp, #16
  48:	sub	sp, sp, #8
  4c:	movw	r6, #0
  50:	mov	r5, r0
  54:	mvn	r4, #0
  58:	movt	r6, #0
  5c:	add	r0, r5, #64	; 0x40
  60:	add	r2, r5, #30
  64:	add	r3, r5, #60	; 0x3c
  68:	mov	r1, r5
  6c:	str	r0, [sp]
  70:	mov	r0, r6
  74:	bl	0 <__isoc99_scanf>
  78:	add	r4, r4, #1
  7c:	cmp	r4, #99	; 0x63
  80:	bhi	90 <ler_tarefas+0x50>
  84:	add	r5, r5, #68	; 0x44
  88:	cmp	r0, #4
  8c:	beq	5c <ler_tarefas+0x1c>
  90:	mov	r0, r4
  94:	sub	sp, fp, #16
  98:	pop	{r4, r5, r6, sl, fp, pc}

0000009c <lista_tarefas>:
  9c:	push	{r4, r5, r6, sl, fp, lr}
  a0:	add	fp, sp, #16
  a4:	sub	sp, sp, #8
  a8:	cmp	r1, #1
  ac:	blt	e8 <lista_tarefas+0x4c>
  b0:	movw	r6, #0
  b4:	mov	r4, r1
  b8:	mov	r5, r0
  bc:	movt	r6, #0
  c0:	ldr	r0, [r5, #64]	; 0x40
  c4:	ldr	r3, [r5, #60]	; 0x3c
  c8:	add	r2, r5, #30
  cc:	mov	r1, r5
  d0:	str	r0, [sp]
  d4:	mov	r0, r6
  d8:	bl	0 <printf>
  dc:	add	r5, r5, #68	; 0x44
  e0:	subs	r4, r4, #1
  e4:	bne	c0 <lista_tarefas+0x24>
  e8:	sub	sp, fp, #16
  ec:	pop	{r4, r5, r6, sl, fp, pc}

000000f0 <analisa_tarefas>:
  f0:	cmp	r1, #1
  f4:	vldrlt	s0, [pc, #112]	; 16c <analisa_tarefas+0x7c>
  f8:	vdivlt.f32	s0, s0, s0
  fc:	bxlt	lr
 100:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 104:	add	fp, sp, #24
 108:	add	r6, r0, #60	; 0x3c
 10c:	mov	r9, r2
 110:	mov	r8, r1
 114:	mov	r0, #0
 118:	mov	r4, r1
 11c:	mov	r7, #0
 120:	ldr	r5, [r6]
 124:	cmp	r5, r0
 128:	ble	140 <analisa_tarefas+0x50>
 12c:	sub	r1, r6, #60	; 0x3c
 130:	mov	r0, r9
 134:	mov	r2, #68	; 0x44
 138:	bl	0 <memcpy>
 13c:	mov	r0, r5
 140:	add	r7, r5, r7
 144:	add	r6, r6, #68	; 0x44
 148:	subs	r4, r4, #1
 14c:	bne	120 <analisa_tarefas+0x30>
 150:	vmov	s0, r8
 154:	vmov	s2, r7
 158:	vcvt.f32.s32	s0, s0
 15c:	vcvt.f32.s32	s2, s2
 160:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
 164:	vdiv.f32	s0, s2, s0
 168:	bx	lr
 16c:	.word	0x00000000

00000170 <main>:
 170:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 174:	add	fp, sp, #24
 178:	sub	sp, sp, #2784	; 0xae0
 17c:	sub	sp, sp, #4096	; 0x1000
 180:	movw	r6, #0
 184:	mvn	r4, #0
 188:	mov	r7, #0
 18c:	add	r5, sp, #76	; 0x4c
 190:	movt	r6, #0
 194:	add	r1, r5, r7
 198:	add	r0, r1, #64	; 0x40
 19c:	add	r2, r1, #30
 1a0:	add	r3, r1, #60	; 0x3c
 1a4:	str	r0, [sp]
 1a8:	mov	r0, r6
 1ac:	bl	0 <__isoc99_scanf>
 1b0:	add	r4, r4, #1
 1b4:	add	r7, r7, #68	; 0x44
 1b8:	cmp	r4, #99	; 0x63
 1bc:	bhi	1c8 <main+0x58>
 1c0:	cmp	r0, #4
 1c4:	beq	194 <main+0x24>
 1c8:	cmp	r7, #68	; 0x44
 1cc:	bne	1ec <main+0x7c>
 1d0:	movw	r0, #0
 1d4:	mov	r1, #0
 1d8:	movt	r0, #0
 1dc:	bl	0 <printf>
 1e0:	vldr	s0, [pc, #220]	; 2c4 <main+0x154>
 1e4:	vmov.f32	s2, s0
 1e8:	b	290 <main+0x120>
 1ec:	movw	r6, #0
 1f0:	mov	r7, #0
 1f4:	movt	r6, #0
 1f8:	ldr	r0, [r5, #64]	; 0x40
 1fc:	ldr	r3, [r5, #60]	; 0x3c
 200:	add	r2, r5, #30
 204:	mov	r1, r5
 208:	str	r0, [sp]
 20c:	mov	r0, r6
 210:	bl	0 <printf>
 214:	add	r7, r7, #1
 218:	add	r5, r5, #68	; 0x44
 21c:	cmp	r4, r7
 220:	bne	1f8 <main+0x88>
 224:	movw	r0, #0
 228:	mov	r1, r4
 22c:	movt	r0, #0
 230:	bl	0 <printf>
 234:	add	r0, sp, #76	; 0x4c
 238:	add	r8, sp, #8
 23c:	mov	r7, #0
 240:	mov	r5, #0
 244:	add	r6, r0, #60	; 0x3c
 248:	mov	r0, #0
 24c:	ldr	r9, [r6]
 250:	cmp	r9, r0
 254:	ble	26c <main+0xfc>
 258:	sub	r1, r6, #60	; 0x3c
 25c:	mov	r0, r8
 260:	mov	r2, #68	; 0x44
 264:	bl	0 <memcpy>
 268:	mov	r0, r9
 26c:	add	r5, r5, #1
 270:	add	r7, r9, r7
 274:	add	r6, r6, #68	; 0x44
 278:	cmp	r4, r5
 27c:	bne	24c <main+0xdc>
 280:	vmov	s0, r4
 284:	vmov	s2, r7
 288:	vcvt.f32.s32	s0, s0
 28c:	vcvt.f32.s32	s2, s2
 290:	vdiv.f32	s0, s2, s0
 294:	movw	r0, #0
 298:	vcvt.f64.f32	d16, s0
 29c:	movt	r0, #0
 2a0:	vmov	r2, r3, d16
 2a4:	bl	0 <printf>
 2a8:	movw	r0, #0
 2ac:	add	r1, sp, #8
 2b0:	movt	r0, #0
 2b4:	bl	0 <printf>
 2b8:	mov	r0, #0
 2bc:	sub	sp, fp, #24
 2c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 2c4:	.word	0x00000000
