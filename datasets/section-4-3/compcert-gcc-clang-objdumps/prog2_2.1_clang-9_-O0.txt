
../compcert-repos/prog2/2.1:     file format elf32-littlearm


Disassembly of section .init:

00010698 <.init>:
   10698:	push	{r3, lr}
   1069c:	bl	10754 <_start@@Base+0x3c>
   106a0:	pop	{r3, pc}

Disassembly of section .plt:

000106a4 <printf@plt-0x14>:
   106a4:	push	{lr}		; (str lr, [sp, #-4]!)
   106a8:	ldr	lr, [pc, #4]	; 106b4 <printf@plt-0x4>
   106ac:	add	lr, pc, lr
   106b0:	ldr	pc, [lr, #8]!
   106b4:	andeq	r0, r1, ip, asr #18

000106b8 <printf@plt>:
   106b8:	add	ip, pc, #0, 12
   106bc:	add	ip, ip, #16, 20	; 0x10000
   106c0:	ldr	pc, [ip, #2380]!	; 0x94c

000106c4 <free@plt>:
   106c4:	add	ip, pc, #0, 12
   106c8:	add	ip, ip, #16, 20	; 0x10000
   106cc:	ldr	pc, [ip, #2372]!	; 0x944

000106d0 <realloc@plt>:
   106d0:	add	ip, pc, #0, 12
   106d4:	add	ip, ip, #16, 20	; 0x10000
   106d8:	ldr	pc, [ip, #2364]!	; 0x93c

000106dc <malloc@plt>:
   106dc:	add	ip, pc, #0, 12
   106e0:	add	ip, ip, #16, 20	; 0x10000
   106e4:	ldr	pc, [ip, #2356]!	; 0x934

000106e8 <__libc_start_main@plt>:
   106e8:	add	ip, pc, #0, 12
   106ec:	add	ip, ip, #16, 20	; 0x10000
   106f0:	ldr	pc, [ip, #2348]!	; 0x92c

000106f4 <__gmon_start__@plt>:
   106f4:	add	ip, pc, #0, 12
   106f8:	add	ip, ip, #16, 20	; 0x10000
   106fc:	ldr	pc, [ip, #2340]!	; 0x924

00010700 <__isoc99_scanf@plt>:
   10700:	add	ip, pc, #0, 12
   10704:	add	ip, ip, #16, 20	; 0x10000
   10708:	ldr	pc, [ip, #2332]!	; 0x91c

0001070c <abort@plt>:
   1070c:	add	ip, pc, #0, 12
   10710:	add	ip, ip, #16, 20	; 0x10000
   10714:	ldr	pc, [ip, #2324]!	; 0x914

Disassembly of section .text:

00010718 <_start@@Base>:
   10718:	mov	fp, #0
   1071c:	mov	lr, #0
   10720:	pop	{r1}		; (ldr r1, [sp], #4)
   10724:	mov	r2, sp
   10728:	push	{r2}		; (str r2, [sp, #-4]!)
   1072c:	push	{r0}		; (str r0, [sp, #-4]!)
   10730:	ldr	ip, [pc, #16]	; 10748 <_start@@Base+0x30>
   10734:	push	{ip}		; (str ip, [sp, #-4]!)
   10738:	ldr	r0, [pc, #12]	; 1074c <_start@@Base+0x34>
   1073c:	ldr	r3, [pc, #12]	; 10750 <_start@@Base+0x38>
   10740:	bl	106e8 <__libc_start_main@plt>
   10744:	bl	1070c <abort@plt>
   10748:	andeq	r0, r1, r8, ror #21
   1074c:	andeq	r0, r1, r8, lsl #16
   10750:	andeq	r0, r1, r8, lsl #21
   10754:	ldr	r3, [pc, #20]	; 10770 <_start@@Base+0x58>
   10758:	ldr	r2, [pc, #20]	; 10774 <_start@@Base+0x5c>
   1075c:	add	r3, pc, r3
   10760:	ldr	r2, [r3, r2]
   10764:	cmp	r2, #0
   10768:	bxeq	lr
   1076c:	b	106f4 <__gmon_start__@plt>
   10770:	muleq	r1, ip, r8
   10774:	andeq	r0, r0, ip, lsr #32
   10778:	ldr	r0, [pc, #24]	; 10798 <_start@@Base+0x80>
   1077c:	ldr	r3, [pc, #24]	; 1079c <_start@@Base+0x84>
   10780:	cmp	r3, r0
   10784:	bxeq	lr
   10788:	ldr	r3, [pc, #16]	; 107a0 <_start@@Base+0x88>
   1078c:	cmp	r3, #0
   10790:	bxeq	lr
   10794:	bx	r3
   10798:	andeq	r1, r2, r8, lsr r0
   1079c:	andeq	r1, r2, r8, lsr r0
   107a0:	andeq	r0, r0, r0
   107a4:	ldr	r0, [pc, #36]	; 107d0 <_start@@Base+0xb8>
   107a8:	ldr	r1, [pc, #36]	; 107d4 <_start@@Base+0xbc>
   107ac:	sub	r1, r1, r0
   107b0:	asr	r1, r1, #2
   107b4:	add	r1, r1, r1, lsr #31
   107b8:	asrs	r1, r1, #1
   107bc:	bxeq	lr
   107c0:	ldr	r3, [pc, #16]	; 107d8 <_start@@Base+0xc0>
   107c4:	cmp	r3, #0
   107c8:	bxeq	lr
   107cc:	bx	r3
   107d0:	andeq	r1, r2, r8, lsr r0
   107d4:	andeq	r1, r2, r8, lsr r0
   107d8:	andeq	r0, r0, r0
   107dc:	push	{r4, lr}
   107e0:	ldr	r4, [pc, #24]	; 10800 <_start@@Base+0xe8>
   107e4:	ldrb	r3, [r4]
   107e8:	cmp	r3, #0
   107ec:	popne	{r4, pc}
   107f0:	bl	10778 <_start@@Base+0x60>
   107f4:	mov	r3, #1
   107f8:	strb	r3, [r4]
   107fc:	pop	{r4, pc}
   10800:	andeq	r1, r2, r8, lsr r0
   10804:	b	107a4 <_start@@Base+0x8c>

00010808 <main@@Base>:
   10808:	push	{fp, lr}
   1080c:	mov	fp, sp
   10810:	sub	sp, sp, #56	; 0x38
   10814:	mov	r0, #0
   10818:	str	r0, [fp, #-4]
   1081c:	str	r0, [fp, #-12]
   10820:	str	r0, [fp, #-16]
   10824:	movw	r0, #2808	; 0xaf8
   10828:	movt	r0, #1
   1082c:	bl	106b8 <printf@plt>
   10830:	movw	r1, #2912	; 0xb60
   10834:	movt	r1, #1
   10838:	sub	r2, fp, #8
   1083c:	str	r0, [sp, #20]
   10840:	mov	r0, r1
   10844:	mov	r1, r2
   10848:	bl	10700 <__isoc99_scanf@plt>
   1084c:	ldr	r1, [fp, #-8]
   10850:	lsl	r1, r1, #2
   10854:	str	r0, [sp, #16]
   10858:	mov	r0, r1
   1085c:	bl	106dc <malloc@plt>
   10860:	str	r0, [fp, #-20]	; 0xffffffec
   10864:	ldr	r0, [fp, #-8]
   10868:	lsl	r0, r0, #2
   1086c:	bl	106dc <malloc@plt>
   10870:	str	r0, [fp, #-24]	; 0xffffffe8
   10874:	ldr	r0, [fp, #-8]
   10878:	lsl	r0, r0, #2
   1087c:	bl	106dc <malloc@plt>
   10880:	str	r0, [sp, #28]
   10884:	movw	r0, #0
   10888:	str	r0, [sp, #24]
   1088c:	ldr	r0, [sp, #24]
   10890:	ldr	r1, [fp, #-8]
   10894:	cmp	r0, r1
   10898:	bge	10958 <main@@Base+0x150>
   1089c:	ldr	r0, [sp, #24]
   108a0:	add	r1, r0, #1
   108a4:	movw	r0, #2830	; 0xb0e
   108a8:	movt	r0, #1
   108ac:	bl	106b8 <printf@plt>
   108b0:	ldr	r1, [fp, #-20]	; 0xffffffec
   108b4:	ldr	r2, [sp, #24]
   108b8:	add	r1, r1, r2, lsl #2
   108bc:	movw	r2, #2912	; 0xb60
   108c0:	movt	r2, #1
   108c4:	str	r0, [sp, #12]
   108c8:	mov	r0, r2
   108cc:	bl	10700 <__isoc99_scanf@plt>
   108d0:	ldr	r1, [fp, #-20]	; 0xffffffec
   108d4:	ldr	r2, [sp, #24]
   108d8:	ldr	r1, [r1, r2, lsl #2]
   108dc:	add	r2, r1, r1, lsr #31
   108e0:	bic	r2, r2, #1
   108e4:	sub	r1, r1, r2
   108e8:	cmp	r1, #0
   108ec:	beq	1091c <main@@Base+0x114>
   108f0:	ldr	r0, [fp, #-20]	; 0xffffffec
   108f4:	ldr	r1, [sp, #24]
   108f8:	ldr	r0, [r0, r1, lsl #2]
   108fc:	ldr	r1, [sp, #28]
   10900:	ldr	r2, [fp, #-16]
   10904:	add	r1, r1, r2, lsl #2
   10908:	str	r0, [r1]
   1090c:	ldr	r0, [fp, #-16]
   10910:	add	r0, r0, #1
   10914:	str	r0, [fp, #-16]
   10918:	b	10944 <main@@Base+0x13c>
   1091c:	ldr	r0, [fp, #-20]	; 0xffffffec
   10920:	ldr	r1, [sp, #24]
   10924:	ldr	r0, [r0, r1, lsl #2]
   10928:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1092c:	ldr	r2, [fp, #-12]
   10930:	add	r1, r1, r2, lsl #2
   10934:	str	r0, [r1]
   10938:	ldr	r0, [fp, #-12]
   1093c:	add	r0, r0, #1
   10940:	str	r0, [fp, #-12]
   10944:	b	10948 <main@@Base+0x140>
   10948:	ldr	r0, [sp, #24]
   1094c:	add	r0, r0, #1
   10950:	str	r0, [sp, #24]
   10954:	b	1088c <main@@Base+0x84>
   10958:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1095c:	ldr	r1, [fp, #-12]
   10960:	lsl	r1, r1, #2
   10964:	bl	106d0 <realloc@plt>
   10968:	str	r0, [fp, #-24]	; 0xffffffe8
   1096c:	ldr	r0, [sp, #28]
   10970:	ldr	r1, [fp, #-16]
   10974:	lsl	r1, r1, #2
   10978:	bl	106d0 <realloc@plt>
   1097c:	str	r0, [sp, #28]
   10980:	movw	r0, #2858	; 0xb2a
   10984:	movt	r0, #1
   10988:	bl	106b8 <printf@plt>
   1098c:	ldr	r1, [fp, #-20]	; 0xffffffec
   10990:	ldr	r2, [fp, #-8]
   10994:	str	r0, [sp, #8]
   10998:	mov	r0, r1
   1099c:	mov	r1, r2
   109a0:	bl	10a10 <PrintArray@@Base>
   109a4:	movw	r0, #2875	; 0xb3b
   109a8:	movt	r0, #1
   109ac:	bl	106b8 <printf@plt>
   109b0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   109b4:	ldr	r2, [fp, #-12]
   109b8:	str	r0, [sp, #4]
   109bc:	mov	r0, r1
   109c0:	mov	r1, r2
   109c4:	bl	10a10 <PrintArray@@Base>
   109c8:	movw	r0, #2891	; 0xb4b
   109cc:	movt	r0, #1
   109d0:	bl	106b8 <printf@plt>
   109d4:	ldr	r1, [sp, #28]
   109d8:	ldr	r2, [fp, #-16]
   109dc:	str	r0, [sp]
   109e0:	mov	r0, r1
   109e4:	mov	r1, r2
   109e8:	bl	10a10 <PrintArray@@Base>
   109ec:	ldr	r0, [fp, #-20]	; 0xffffffec
   109f0:	bl	106c4 <free@plt>
   109f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   109f8:	bl	106c4 <free@plt>
   109fc:	ldr	r0, [sp, #28]
   10a00:	bl	106c4 <free@plt>
   10a04:	ldr	r0, [fp, #-4]
   10a08:	mov	sp, fp
   10a0c:	pop	{fp, pc}

00010a10 <PrintArray@@Base>:
   10a10:	push	{fp, lr}
   10a14:	mov	fp, sp
   10a18:	sub	sp, sp, #16
   10a1c:	str	r0, [fp, #-4]
   10a20:	str	r1, [sp, #8]
   10a24:	movw	r0, #2909	; 0xb5d
   10a28:	movt	r0, #1
   10a2c:	bl	106b8 <printf@plt>
   10a30:	movw	r1, #0
   10a34:	str	r1, [sp, #4]
   10a38:	ldr	r0, [sp, #4]
   10a3c:	ldr	r1, [sp, #8]
   10a40:	cmp	r0, r1
   10a44:	bge	10a74 <PrintArray@@Base+0x64>
   10a48:	ldr	r0, [fp, #-4]
   10a4c:	ldr	r1, [sp, #4]
   10a50:	add	r0, r0, r1, lsl #2
   10a54:	ldr	r1, [r0]
   10a58:	movw	r0, #2911	; 0xb5f
   10a5c:	movt	r0, #1
   10a60:	bl	106b8 <printf@plt>
   10a64:	ldr	r0, [sp, #4]
   10a68:	add	r0, r0, #1
   10a6c:	str	r0, [sp, #4]
   10a70:	b	10a38 <PrintArray@@Base+0x28>
   10a74:	movw	r0, #2915	; 0xb63
   10a78:	movt	r0, #1
   10a7c:	bl	106b8 <printf@plt>
   10a80:	mov	sp, fp
   10a84:	pop	{fp, pc}

00010a88 <__libc_csu_init@@Base>:
   10a88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a8c:	mov	r7, r0
   10a90:	ldr	r6, [pc, #72]	; 10ae0 <__libc_csu_init@@Base+0x58>
   10a94:	ldr	r5, [pc, #72]	; 10ae4 <__libc_csu_init@@Base+0x5c>
   10a98:	add	r6, pc, r6
   10a9c:	add	r5, pc, r5
   10aa0:	sub	r6, r6, r5
   10aa4:	mov	r8, r1
   10aa8:	mov	r9, r2
   10aac:	bl	10698 <printf@plt-0x20>
   10ab0:	asrs	r6, r6, #2
   10ab4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ab8:	mov	r4, #0
   10abc:	add	r4, r4, #1
   10ac0:	ldr	r3, [r5], #4
   10ac4:	mov	r2, r9
   10ac8:	mov	r1, r8
   10acc:	mov	r0, r7
   10ad0:	blx	r3
   10ad4:	cmp	r6, r4
   10ad8:	bne	10abc <__libc_csu_init@@Base+0x34>
   10adc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ae0:	andeq	r0, r1, ip, ror #8
   10ae4:	andeq	r0, r1, r4, ror #8

00010ae8 <__libc_csu_fini@@Base>:
   10ae8:	bx	lr

Disassembly of section .fini:

00010aec <.fini>:
   10aec:	push	{r3, lr}
   10af0:	pop	{r3, pc}
