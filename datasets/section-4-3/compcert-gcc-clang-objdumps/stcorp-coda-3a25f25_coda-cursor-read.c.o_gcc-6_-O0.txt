
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-cursor-read.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_array>:
       0:	push	{fp, lr}
       4:	add	fp, sp, #4
       8:	sub	sp, sp, #632	; 0x278
       c:	str	r0, [fp, #-624]	; 0xfffffd90
      10:	str	r1, [fp, #-628]	; 0xfffffd8c
      14:	str	r2, [fp, #-632]	; 0xfffffd88
      18:	str	r3, [fp, #-636]	; 0xfffffd84
      1c:	sub	r2, fp, #580	; 0x244
      20:	sub	r3, fp, #584	; 0x248
      24:	mov	r1, r3
      28:	ldr	r0, [fp, #-624]	; 0xfffffd90
      2c:	bl	0 <coda_cursor_get_array_dim>
      30:	mov	r3, r0
      34:	cmp	r3, #0
      38:	beq	44 <read_array+0x44>
      3c:	mvn	r3, #0
      40:	b	3f0 <read_array+0x3f0>
      44:	ldr	r2, [fp, #-624]	; 0xfffffd90
      48:	sub	r3, fp, #548	; 0x224
      4c:	mov	r1, r2
      50:	mov	r2, #520	; 0x208
      54:	mov	r0, r3
      58:	bl	0 <memcpy>
      5c:	ldr	r3, [fp, #-584]	; 0xfffffdb8
      60:	cmp	r3, #1
      64:	ble	74 <read_array+0x74>
      68:	ldr	r3, [fp, #4]
      6c:	cmp	r3, #1
      70:	beq	190 <read_array+0x190>
      74:	mov	r3, #1
      78:	str	r3, [fp, #-8]
      7c:	mov	r3, #0
      80:	str	r3, [fp, #-12]
      84:	b	b4 <read_array+0xb4>
      88:	ldr	r3, [fp, #-12]
      8c:	lsl	r3, r3, #2
      90:	sub	r2, fp, #4
      94:	add	r3, r2, r3
      98:	ldr	r2, [r3, #-576]	; 0xfffffdc0
      9c:	ldr	r3, [fp, #-8]
      a0:	mul	r3, r2, r3
      a4:	str	r3, [fp, #-8]
      a8:	ldr	r3, [fp, #-12]
      ac:	add	r3, r3, #1
      b0:	str	r3, [fp, #-12]
      b4:	ldr	r3, [fp, #-584]	; 0xfffffdb8
      b8:	ldr	r2, [fp, #-12]
      bc:	cmp	r2, r3
      c0:	blt	88 <read_array+0x88>
      c4:	ldr	r3, [fp, #-8]
      c8:	cmp	r3, #0
      cc:	ble	3ec <read_array+0x3ec>
      d0:	sub	r3, fp, #548	; 0x224
      d4:	mov	r1, #0
      d8:	mov	r0, r3
      dc:	bl	0 <coda_cursor_goto_array_element_by_index>
      e0:	mov	r3, r0
      e4:	cmp	r3, #0
      e8:	beq	f4 <read_array+0xf4>
      ec:	mvn	r3, #0
      f0:	b	3f0 <read_array+0x3f0>
      f4:	mov	r3, #0
      f8:	str	r3, [fp, #-12]
      fc:	b	17c <read_array+0x17c>
     100:	ldr	r3, [fp, #-12]
     104:	ldr	r2, [fp, #-636]	; 0xfffffd84
     108:	mul	r3, r2, r3
     10c:	mov	r2, r3
     110:	ldr	r3, [fp, #-632]	; 0xfffffd88
     114:	add	r1, r3, r2
     118:	sub	r2, fp, #548	; 0x224
     11c:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     120:	mov	r0, r2
     124:	blx	r3
     128:	mov	r3, r0
     12c:	cmp	r3, #0
     130:	beq	13c <read_array+0x13c>
     134:	mvn	r3, #0
     138:	b	3f0 <read_array+0x3f0>
     13c:	ldr	r3, [fp, #-8]
     140:	sub	r2, r3, #1
     144:	ldr	r3, [fp, #-12]
     148:	cmp	r2, r3
     14c:	ble	170 <read_array+0x170>
     150:	sub	r3, fp, #548	; 0x224
     154:	mov	r0, r3
     158:	bl	0 <coda_cursor_goto_next_array_element>
     15c:	mov	r3, r0
     160:	cmp	r3, #0
     164:	beq	170 <read_array+0x170>
     168:	mvn	r3, #0
     16c:	b	3f0 <read_array+0x3f0>
     170:	ldr	r3, [fp, #-12]
     174:	add	r3, r3, #1
     178:	str	r3, [fp, #-12]
     17c:	ldr	r2, [fp, #-12]
     180:	ldr	r3, [fp, #-8]
     184:	cmp	r2, r3
     188:	blt	100 <read_array+0x100>
     18c:	b	3ec <read_array+0x3ec>
     190:	mov	r3, #1
     194:	str	r3, [fp, #-620]	; 0xfffffd94
     198:	mov	r3, #0
     19c:	str	r3, [fp, #-12]
     1a0:	b	1f4 <read_array+0x1f4>
     1a4:	ldr	r3, [fp, #-12]
     1a8:	add	r1, r3, #1
     1ac:	ldr	r3, [fp, #-12]
     1b0:	lsl	r3, r3, #2
     1b4:	sub	r2, fp, #4
     1b8:	add	r3, r2, r3
     1bc:	ldr	r2, [r3, #-616]	; 0xfffffd98
     1c0:	ldr	r3, [fp, #-12]
     1c4:	lsl	r3, r3, #2
     1c8:	sub	r0, fp, #4
     1cc:	add	r3, r0, r3
     1d0:	ldr	r3, [r3, #-576]	; 0xfffffdc0
     1d4:	mul	r2, r3, r2
     1d8:	lsl	r3, r1, #2
     1dc:	sub	r1, fp, #4
     1e0:	add	r3, r1, r3
     1e4:	str	r2, [r3, #-616]	; 0xfffffd98
     1e8:	ldr	r3, [fp, #-12]
     1ec:	add	r3, r3, #1
     1f0:	str	r3, [fp, #-12]
     1f4:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     1f8:	ldr	r2, [fp, #-12]
     1fc:	cmp	r2, r3
     200:	blt	1a4 <read_array+0x1a4>
     204:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     208:	sub	r3, r3, #1
     20c:	lsl	r3, r3, #2
     210:	sub	r2, fp, #4
     214:	add	r3, r2, r3
     218:	ldr	r3, [r3, #-616]	; 0xfffffd98
     21c:	str	r3, [fp, #-24]	; 0xffffffe8
     220:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     224:	lsl	r3, r3, #2
     228:	sub	r2, fp, #4
     22c:	add	r3, r2, r3
     230:	ldr	r3, [r3, #-616]	; 0xfffffd98
     234:	str	r3, [fp, #-8]
     238:	ldr	r3, [fp, #-8]
     23c:	cmp	r3, #0
     240:	ble	3ec <read_array+0x3ec>
     244:	mov	r3, #0
     248:	str	r3, [fp, #-16]
     24c:	mov	r3, #0
     250:	str	r3, [fp, #-20]	; 0xffffffec
     254:	sub	r3, fp, #548	; 0x224
     258:	mov	r1, #0
     25c:	mov	r0, r3
     260:	bl	0 <coda_cursor_goto_array_element_by_index>
     264:	mov	r3, r0
     268:	cmp	r3, #0
     26c:	beq	278 <read_array+0x278>
     270:	mvn	r3, #0
     274:	b	3f0 <read_array+0x3f0>
     278:	ldr	r3, [fp, #-20]	; 0xffffffec
     27c:	ldr	r2, [fp, #-636]	; 0xfffffd84
     280:	mul	r3, r2, r3
     284:	mov	r2, r3
     288:	ldr	r3, [fp, #-632]	; 0xfffffd88
     28c:	add	r1, r3, r2
     290:	sub	r2, fp, #548	; 0x224
     294:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     298:	mov	r0, r2
     29c:	blx	r3
     2a0:	mov	r3, r0
     2a4:	cmp	r3, #0
     2a8:	beq	2b4 <read_array+0x2b4>
     2ac:	mvn	r3, #0
     2b0:	b	3f0 <read_array+0x3f0>
     2b4:	ldr	r3, [fp, #-16]
     2b8:	add	r3, r3, #1
     2bc:	str	r3, [fp, #-16]
     2c0:	ldr	r2, [fp, #-16]
     2c4:	ldr	r3, [fp, #-8]
     2c8:	cmp	r2, r3
     2cc:	bge	2f0 <read_array+0x2f0>
     2d0:	sub	r3, fp, #548	; 0x224
     2d4:	mov	r0, r3
     2d8:	bl	0 <coda_cursor_goto_next_array_element>
     2dc:	mov	r3, r0
     2e0:	cmp	r3, #0
     2e4:	beq	2f0 <read_array+0x2f0>
     2e8:	mvn	r3, #0
     2ec:	b	3f0 <read_array+0x3f0>
     2f0:	ldr	r2, [fp, #-20]	; 0xffffffec
     2f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     2f8:	add	r3, r2, r3
     2fc:	str	r3, [fp, #-20]	; 0xffffffec
     300:	ldr	r2, [fp, #-20]	; 0xffffffec
     304:	ldr	r3, [fp, #-8]
     308:	cmp	r2, r3
     30c:	blt	278 <read_array+0x278>
     310:	ldr	r2, [fp, #-16]
     314:	ldr	r3, [fp, #-8]
     318:	cmp	r2, r3
     31c:	beq	3e8 <read_array+0x3e8>
     320:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     324:	sub	r3, r3, #2
     328:	lsl	r3, r3, #2
     32c:	sub	r2, fp, #4
     330:	add	r3, r2, r3
     334:	ldr	r2, [r3, #-616]	; 0xfffffd98
     338:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     33c:	lsl	r3, r3, #2
     340:	sub	r1, fp, #4
     344:	add	r3, r1, r3
     348:	ldr	r3, [r3, #-616]	; 0xfffffd98
     34c:	sub	r3, r2, r3
     350:	ldr	r2, [fp, #-20]	; 0xffffffec
     354:	add	r3, r2, r3
     358:	str	r3, [fp, #-20]	; 0xffffffec
     35c:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     360:	sub	r3, r3, #3
     364:	str	r3, [fp, #-12]
     368:	b	3b4 <read_array+0x3b4>
     36c:	ldr	r3, [fp, #-12]
     370:	lsl	r3, r3, #2
     374:	sub	r2, fp, #4
     378:	add	r3, r2, r3
     37c:	ldr	r2, [r3, #-616]	; 0xfffffd98
     380:	ldr	r3, [fp, #-12]
     384:	add	r3, r3, #2
     388:	lsl	r3, r3, #2
     38c:	sub	r1, fp, #4
     390:	add	r3, r1, r3
     394:	ldr	r3, [r3, #-616]	; 0xfffffd98
     398:	sub	r3, r2, r3
     39c:	ldr	r2, [fp, #-20]	; 0xffffffec
     3a0:	add	r3, r2, r3
     3a4:	str	r3, [fp, #-20]	; 0xffffffec
     3a8:	ldr	r3, [fp, #-12]
     3ac:	sub	r3, r3, #1
     3b0:	str	r3, [fp, #-12]
     3b4:	ldr	r3, [fp, #-12]
     3b8:	cmp	r3, #0
     3bc:	blt	278 <read_array+0x278>
     3c0:	ldr	r3, [fp, #-12]
     3c4:	add	r3, r3, #2
     3c8:	lsl	r3, r3, #2
     3cc:	sub	r2, fp, #4
     3d0:	add	r3, r2, r3
     3d4:	ldr	r2, [r3, #-616]	; 0xfffffd98
     3d8:	ldr	r3, [fp, #-20]	; 0xffffffec
     3dc:	cmp	r2, r3
     3e0:	ble	36c <read_array+0x36c>
     3e4:	b	278 <read_array+0x278>
     3e8:	nop			; (mov r0, r0)
     3ec:	mov	r3, #0
     3f0:	mov	r0, r3
     3f4:	sub	sp, fp, #4
     3f8:	pop	{fp, pc}

000003fc <read_partial_array>:
     3fc:	push	{fp, lr}
     400:	add	fp, sp, #4
     404:	sub	sp, sp, #544	; 0x220
     408:	str	r0, [fp, #-536]	; 0xfffffde8
     40c:	str	r1, [fp, #-540]	; 0xfffffde4
     410:	str	r2, [fp, #-544]	; 0xfffffde0
     414:	str	r3, [fp, #-548]	; 0xfffffddc
     418:	ldr	r2, [fp, #-536]	; 0xfffffde8
     41c:	sub	r3, fp, #532	; 0x214
     420:	mov	r1, r2
     424:	mov	r2, #520	; 0x208
     428:	mov	r0, r3
     42c:	bl	0 <memcpy>
     430:	ldr	r3, [fp, #-548]	; 0xfffffddc
     434:	cmp	r3, #0
     438:	ble	4f8 <read_partial_array+0xfc>
     43c:	sub	r3, fp, #532	; 0x214
     440:	ldr	r1, [fp, #-544]	; 0xfffffde0
     444:	mov	r0, r3
     448:	bl	0 <coda_cursor_goto_array_element_by_index>
     44c:	mov	r3, r0
     450:	cmp	r3, #0
     454:	beq	460 <read_partial_array+0x64>
     458:	mvn	r3, #0
     45c:	b	4fc <read_partial_array+0x100>
     460:	mov	r3, #0
     464:	str	r3, [fp, #-8]
     468:	b	4e8 <read_partial_array+0xec>
     46c:	ldr	r3, [fp, #-8]
     470:	ldr	r2, [fp, #8]
     474:	mul	r3, r2, r3
     478:	mov	r2, r3
     47c:	ldr	r3, [fp, #4]
     480:	add	r1, r3, r2
     484:	sub	r2, fp, #532	; 0x214
     488:	ldr	r3, [fp, #-540]	; 0xfffffde4
     48c:	mov	r0, r2
     490:	blx	r3
     494:	mov	r3, r0
     498:	cmp	r3, #0
     49c:	beq	4a8 <read_partial_array+0xac>
     4a0:	mvn	r3, #0
     4a4:	b	4fc <read_partial_array+0x100>
     4a8:	ldr	r3, [fp, #-548]	; 0xfffffddc
     4ac:	sub	r2, r3, #1
     4b0:	ldr	r3, [fp, #-8]
     4b4:	cmp	r2, r3
     4b8:	ble	4dc <read_partial_array+0xe0>
     4bc:	sub	r3, fp, #532	; 0x214
     4c0:	mov	r0, r3
     4c4:	bl	0 <coda_cursor_goto_next_array_element>
     4c8:	mov	r3, r0
     4cc:	cmp	r3, #0
     4d0:	beq	4dc <read_partial_array+0xe0>
     4d4:	mvn	r3, #0
     4d8:	b	4fc <read_partial_array+0x100>
     4dc:	ldr	r3, [fp, #-8]
     4e0:	add	r3, r3, #1
     4e4:	str	r3, [fp, #-8]
     4e8:	ldr	r2, [fp, #-8]
     4ec:	ldr	r3, [fp, #-548]	; 0xfffffddc
     4f0:	cmp	r2, r3
     4f4:	blt	46c <read_partial_array+0x70>
     4f8:	mov	r3, #0
     4fc:	mov	r0, r3
     500:	sub	sp, fp, #4
     504:	pop	{fp, pc}

00000508 <transpose_array>:
     508:	push	{fp, lr}
     50c:	add	fp, sp, #4
     510:	sub	sp, sp, #208	; 0xd0
     514:	str	r0, [fp, #-192]	; 0xffffff40
     518:	str	r1, [fp, #-196]	; 0xffffff3c
     51c:	str	r2, [fp, #-200]	; 0xffffff38
     520:	mov	r3, #0
     524:	str	r3, [fp, #-12]
     528:	sub	r2, fp, #72	; 0x48
     52c:	sub	r3, fp, #76	; 0x4c
     530:	mov	r1, r3
     534:	ldr	r0, [fp, #-192]	; 0xffffff40
     538:	bl	0 <coda_cursor_get_array_dim>
     53c:	mov	r3, r0
     540:	cmp	r3, #0
     544:	beq	550 <transpose_array+0x48>
     548:	mvn	r3, #0
     54c:	b	db0 <transpose_array+0x8a8>
     550:	ldr	r3, [fp, #-76]	; 0xffffffb4
     554:	cmp	r3, #1
     558:	bgt	564 <transpose_array+0x5c>
     55c:	mov	r3, #0
     560:	b	db0 <transpose_array+0x8a8>
     564:	ldr	r3, [fp, #-196]	; 0xffffff3c
     568:	str	r3, [fp, #-36]	; 0xffffffdc
     56c:	mov	r3, #1
     570:	str	r3, [fp, #-8]
     574:	mov	r3, #0
     578:	str	r3, [fp, #-16]
     57c:	b	5f8 <transpose_array+0xf0>
     580:	ldr	r3, [fp, #-16]
     584:	lsl	r3, r3, #2
     588:	sub	r2, fp, #4
     58c:	add	r3, r2, r3
     590:	ldr	r2, [r3, #-68]	; 0xffffffbc
     594:	ldr	r3, [fp, #-8]
     598:	mul	r3, r2, r3
     59c:	str	r3, [fp, #-8]
     5a0:	ldr	r3, [fp, #-16]
     5a4:	lsl	r3, r3, #2
     5a8:	sub	r2, fp, #4
     5ac:	add	r3, r2, r3
     5b0:	mov	r2, #0
     5b4:	str	r2, [r3, #-144]	; 0xffffff70
     5b8:	ldr	r3, [fp, #-76]	; 0xffffffb4
     5bc:	sub	r2, r3, #1
     5c0:	ldr	r3, [fp, #-16]
     5c4:	sub	r3, r2, r3
     5c8:	lsl	r3, r3, #2
     5cc:	sub	r2, fp, #4
     5d0:	add	r3, r2, r3
     5d4:	ldr	r2, [r3, #-68]	; 0xffffffbc
     5d8:	ldr	r3, [fp, #-16]
     5dc:	lsl	r3, r3, #2
     5e0:	sub	r1, fp, #4
     5e4:	add	r3, r1, r3
     5e8:	str	r2, [r3, #-180]	; 0xffffff4c
     5ec:	ldr	r3, [fp, #-16]
     5f0:	add	r3, r3, #1
     5f4:	str	r3, [fp, #-16]
     5f8:	ldr	r3, [fp, #-76]	; 0xffffffb4
     5fc:	ldr	r2, [fp, #-16]
     600:	cmp	r2, r3
     604:	blt	580 <transpose_array+0x78>
     608:	ldr	r3, [fp, #-8]
     60c:	cmp	r3, #1
     610:	bgt	61c <transpose_array+0x114>
     614:	mov	r3, #0
     618:	b	db0 <transpose_array+0x8a8>
     61c:	ldr	r3, [fp, #-76]	; 0xffffffb4
     620:	lsl	r3, r3, #2
     624:	sub	r2, fp, #4
     628:	add	r3, r2, r3
     62c:	mov	r2, #1
     630:	str	r2, [r3, #-108]	; 0xffffff94
     634:	ldr	r3, [fp, #-76]	; 0xffffffb4
     638:	lsl	r3, r3, #2
     63c:	sub	r2, fp, #4
     640:	add	r3, r2, r3
     644:	mov	r2, #1
     648:	str	r2, [r3, #-180]	; 0xffffff4c
     64c:	ldr	r3, [fp, #-76]	; 0xffffffb4
     650:	str	r3, [fp, #-16]
     654:	b	6a8 <transpose_array+0x1a0>
     658:	ldr	r3, [fp, #-16]
     65c:	sub	r1, r3, #1
     660:	ldr	r3, [fp, #-16]
     664:	lsl	r3, r3, #2
     668:	sub	r2, fp, #4
     66c:	add	r3, r2, r3
     670:	ldr	r2, [r3, #-108]	; 0xffffff94
     674:	ldr	r3, [fp, #-16]
     678:	lsl	r3, r3, #2
     67c:	sub	r0, fp, #4
     680:	add	r3, r0, r3
     684:	ldr	r3, [r3, #-180]	; 0xffffff4c
     688:	mul	r2, r3, r2
     68c:	lsl	r3, r1, #2
     690:	sub	r1, fp, #4
     694:	add	r3, r1, r3
     698:	str	r2, [r3, #-108]	; 0xffffff94
     69c:	ldr	r3, [fp, #-16]
     6a0:	sub	r3, r3, #1
     6a4:	str	r3, [fp, #-16]
     6a8:	ldr	r3, [fp, #-16]
     6ac:	cmp	r3, #0
     6b0:	bgt	658 <transpose_array+0x150>
     6b4:	ldr	r3, [fp, #-76]	; 0xffffffb4
     6b8:	lsl	r3, r3, #2
     6bc:	sub	r2, fp, #4
     6c0:	add	r3, r2, r3
     6c4:	mov	r2, #0
     6c8:	str	r2, [r3, #-180]	; 0xffffff4c
     6cc:	ldr	r3, [fp, #-76]	; 0xffffffb4
     6d0:	lsl	r3, r3, #2
     6d4:	sub	r2, fp, #4
     6d8:	add	r3, r2, r3
     6dc:	mov	r2, #0
     6e0:	str	r2, [r3, #-144]	; 0xffffff70
     6e4:	ldr	r3, [fp, #-8]
     6e8:	ldr	r2, [fp, #-200]	; 0xffffff38
     6ec:	mul	r3, r2, r3
     6f0:	mov	r0, r3
     6f4:	bl	0 <malloc>
     6f8:	mov	r3, r0
     6fc:	str	r3, [fp, #-40]	; 0xffffffd8
     700:	ldr	r3, [fp, #-40]	; 0xffffffd8
     704:	cmp	r3, #0
     708:	bne	738 <transpose_array+0x230>
     70c:	ldr	r3, [fp, #-8]
     710:	ldr	r2, [fp, #-200]	; 0xffffff38
     714:	mul	r2, r2, r3
     718:	mov	r3, #93	; 0x5d
     71c:	str	r3, [sp]
     720:	ldr	r3, [pc, #1684]	; dbc <transpose_array+0x8b4>
     724:	ldr	r1, [pc, #1684]	; dc0 <transpose_array+0x8b8>
     728:	mvn	r0, #0
     72c:	bl	0 <coda_set_error>
     730:	mvn	r3, #0
     734:	b	db0 <transpose_array+0x8a8>
     738:	ldr	r3, [fp, #-200]	; 0xffffff38
     73c:	sub	r3, r3, #1
     740:	cmp	r3, #7
     744:	ldrls	pc, [pc, r3, lsl #2]
     748:	b	d74 <transpose_array+0x86c>
     74c:	.word	0x0000076c
     750:	.word	0x000008e8
     754:	.word	0x00000d74
     758:	.word	0x00000a6c
     75c:	.word	0x00000d74
     760:	.word	0x00000d74
     764:	.word	0x00000d74
     768:	.word	0x00000bf0
     76c:	mov	r3, #0
     770:	str	r3, [fp, #-16]
     774:	b	8d4 <transpose_array+0x3cc>
     778:	mov	r3, #0
     77c:	str	r3, [fp, #-20]	; 0xffffffec
     780:	ldr	r3, [fp, #-12]
     784:	ldr	r2, [fp, #-40]	; 0xffffffd8
     788:	add	r3, r2, r3
     78c:	ldr	r2, [fp, #-16]
     790:	ldr	r1, [fp, #-36]	; 0xffffffdc
     794:	add	r2, r1, r2
     798:	ldrb	r2, [r2]
     79c:	strb	r2, [r3]
     7a0:	ldr	r3, [fp, #-20]	; 0xffffffec
     7a4:	lsl	r3, r3, #2
     7a8:	sub	r2, fp, #4
     7ac:	add	r3, r2, r3
     7b0:	ldr	r3, [r3, #-108]	; 0xffffff94
     7b4:	ldr	r2, [fp, #-12]
     7b8:	add	r3, r2, r3
     7bc:	str	r3, [fp, #-12]
     7c0:	ldr	r3, [fp, #-20]	; 0xffffffec
     7c4:	lsl	r3, r3, #2
     7c8:	sub	r2, fp, #4
     7cc:	add	r3, r2, r3
     7d0:	ldr	r3, [r3, #-144]	; 0xffffff70
     7d4:	add	r2, r3, #1
     7d8:	ldr	r3, [fp, #-20]	; 0xffffffec
     7dc:	lsl	r3, r3, #2
     7e0:	sub	r1, fp, #4
     7e4:	add	r3, r1, r3
     7e8:	str	r2, [r3, #-144]	; 0xffffff70
     7ec:	b	898 <transpose_array+0x390>
     7f0:	ldr	r3, [fp, #-20]	; 0xffffffec
     7f4:	lsl	r3, r3, #2
     7f8:	sub	r2, fp, #4
     7fc:	add	r3, r2, r3
     800:	mov	r2, #0
     804:	str	r2, [r3, #-144]	; 0xffffff70
     808:	ldr	r3, [fp, #-20]	; 0xffffffec
     80c:	lsl	r3, r3, #2
     810:	sub	r2, fp, #4
     814:	add	r3, r2, r3
     818:	ldr	r2, [r3, #-108]	; 0xffffff94
     81c:	ldr	r3, [fp, #-20]	; 0xffffffec
     820:	lsl	r3, r3, #2
     824:	sub	r1, fp, #4
     828:	add	r3, r1, r3
     82c:	ldr	r3, [r3, #-180]	; 0xffffff4c
     830:	mul	r3, r3, r2
     834:	ldr	r2, [fp, #-12]
     838:	sub	r3, r2, r3
     83c:	str	r3, [fp, #-12]
     840:	ldr	r3, [fp, #-20]	; 0xffffffec
     844:	add	r3, r3, #1
     848:	str	r3, [fp, #-20]	; 0xffffffec
     84c:	ldr	r3, [fp, #-20]	; 0xffffffec
     850:	lsl	r3, r3, #2
     854:	sub	r2, fp, #4
     858:	add	r3, r2, r3
     85c:	ldr	r3, [r3, #-108]	; 0xffffff94
     860:	ldr	r2, [fp, #-12]
     864:	add	r3, r2, r3
     868:	str	r3, [fp, #-12]
     86c:	ldr	r3, [fp, #-20]	; 0xffffffec
     870:	lsl	r3, r3, #2
     874:	sub	r2, fp, #4
     878:	add	r3, r2, r3
     87c:	ldr	r3, [r3, #-144]	; 0xffffff70
     880:	add	r2, r3, #1
     884:	ldr	r3, [fp, #-20]	; 0xffffffec
     888:	lsl	r3, r3, #2
     88c:	sub	r1, fp, #4
     890:	add	r3, r1, r3
     894:	str	r2, [r3, #-144]	; 0xffffff70
     898:	ldr	r3, [fp, #-20]	; 0xffffffec
     89c:	lsl	r3, r3, #2
     8a0:	sub	r2, fp, #4
     8a4:	add	r3, r2, r3
     8a8:	ldr	r2, [r3, #-144]	; 0xffffff70
     8ac:	ldr	r3, [fp, #-20]	; 0xffffffec
     8b0:	lsl	r3, r3, #2
     8b4:	sub	r1, fp, #4
     8b8:	add	r3, r1, r3
     8bc:	ldr	r3, [r3, #-180]	; 0xffffff4c
     8c0:	cmp	r2, r3
     8c4:	beq	7f0 <transpose_array+0x2e8>
     8c8:	ldr	r3, [fp, #-16]
     8cc:	add	r3, r3, #1
     8d0:	str	r3, [fp, #-16]
     8d4:	ldr	r2, [fp, #-16]
     8d8:	ldr	r3, [fp, #-8]
     8dc:	cmp	r2, r3
     8e0:	blt	778 <transpose_array+0x270>
     8e4:	b	d88 <transpose_array+0x880>
     8e8:	mov	r3, #0
     8ec:	str	r3, [fp, #-16]
     8f0:	b	a58 <transpose_array+0x550>
     8f4:	mov	r3, #0
     8f8:	str	r3, [fp, #-24]	; 0xffffffe8
     8fc:	ldr	r3, [fp, #-12]
     900:	lsl	r3, r3, #1
     904:	ldr	r2, [fp, #-40]	; 0xffffffd8
     908:	add	r3, r2, r3
     90c:	ldr	r2, [fp, #-16]
     910:	lsl	r2, r2, #1
     914:	ldr	r1, [fp, #-36]	; 0xffffffdc
     918:	add	r2, r1, r2
     91c:	ldrh	r2, [r2]
     920:	strh	r2, [r3]
     924:	ldr	r3, [fp, #-24]	; 0xffffffe8
     928:	lsl	r3, r3, #2
     92c:	sub	r2, fp, #4
     930:	add	r3, r2, r3
     934:	ldr	r3, [r3, #-108]	; 0xffffff94
     938:	ldr	r2, [fp, #-12]
     93c:	add	r3, r2, r3
     940:	str	r3, [fp, #-12]
     944:	ldr	r3, [fp, #-24]	; 0xffffffe8
     948:	lsl	r3, r3, #2
     94c:	sub	r2, fp, #4
     950:	add	r3, r2, r3
     954:	ldr	r3, [r3, #-144]	; 0xffffff70
     958:	add	r2, r3, #1
     95c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     960:	lsl	r3, r3, #2
     964:	sub	r1, fp, #4
     968:	add	r3, r1, r3
     96c:	str	r2, [r3, #-144]	; 0xffffff70
     970:	b	a1c <transpose_array+0x514>
     974:	ldr	r3, [fp, #-24]	; 0xffffffe8
     978:	lsl	r3, r3, #2
     97c:	sub	r2, fp, #4
     980:	add	r3, r2, r3
     984:	mov	r2, #0
     988:	str	r2, [r3, #-144]	; 0xffffff70
     98c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     990:	lsl	r3, r3, #2
     994:	sub	r2, fp, #4
     998:	add	r3, r2, r3
     99c:	ldr	r2, [r3, #-108]	; 0xffffff94
     9a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     9a4:	lsl	r3, r3, #2
     9a8:	sub	r1, fp, #4
     9ac:	add	r3, r1, r3
     9b0:	ldr	r3, [r3, #-180]	; 0xffffff4c
     9b4:	mul	r3, r3, r2
     9b8:	ldr	r2, [fp, #-12]
     9bc:	sub	r3, r2, r3
     9c0:	str	r3, [fp, #-12]
     9c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     9c8:	add	r3, r3, #1
     9cc:	str	r3, [fp, #-24]	; 0xffffffe8
     9d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     9d4:	lsl	r3, r3, #2
     9d8:	sub	r2, fp, #4
     9dc:	add	r3, r2, r3
     9e0:	ldr	r3, [r3, #-108]	; 0xffffff94
     9e4:	ldr	r2, [fp, #-12]
     9e8:	add	r3, r2, r3
     9ec:	str	r3, [fp, #-12]
     9f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     9f4:	lsl	r3, r3, #2
     9f8:	sub	r2, fp, #4
     9fc:	add	r3, r2, r3
     a00:	ldr	r3, [r3, #-144]	; 0xffffff70
     a04:	add	r2, r3, #1
     a08:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a0c:	lsl	r3, r3, #2
     a10:	sub	r1, fp, #4
     a14:	add	r3, r1, r3
     a18:	str	r2, [r3, #-144]	; 0xffffff70
     a1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a20:	lsl	r3, r3, #2
     a24:	sub	r2, fp, #4
     a28:	add	r3, r2, r3
     a2c:	ldr	r2, [r3, #-144]	; 0xffffff70
     a30:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a34:	lsl	r3, r3, #2
     a38:	sub	r1, fp, #4
     a3c:	add	r3, r1, r3
     a40:	ldr	r3, [r3, #-180]	; 0xffffff4c
     a44:	cmp	r2, r3
     a48:	beq	974 <transpose_array+0x46c>
     a4c:	ldr	r3, [fp, #-16]
     a50:	add	r3, r3, #1
     a54:	str	r3, [fp, #-16]
     a58:	ldr	r2, [fp, #-16]
     a5c:	ldr	r3, [fp, #-8]
     a60:	cmp	r2, r3
     a64:	blt	8f4 <transpose_array+0x3ec>
     a68:	b	d88 <transpose_array+0x880>
     a6c:	mov	r3, #0
     a70:	str	r3, [fp, #-16]
     a74:	b	bdc <transpose_array+0x6d4>
     a78:	mov	r3, #0
     a7c:	str	r3, [fp, #-28]	; 0xffffffe4
     a80:	ldr	r3, [fp, #-12]
     a84:	lsl	r3, r3, #2
     a88:	ldr	r2, [fp, #-40]	; 0xffffffd8
     a8c:	add	r3, r2, r3
     a90:	ldr	r2, [fp, #-16]
     a94:	lsl	r2, r2, #2
     a98:	ldr	r1, [fp, #-36]	; 0xffffffdc
     a9c:	add	r2, r1, r2
     aa0:	ldr	r2, [r2]
     aa4:	str	r2, [r3]
     aa8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     aac:	lsl	r3, r3, #2
     ab0:	sub	r2, fp, #4
     ab4:	add	r3, r2, r3
     ab8:	ldr	r3, [r3, #-108]	; 0xffffff94
     abc:	ldr	r2, [fp, #-12]
     ac0:	add	r3, r2, r3
     ac4:	str	r3, [fp, #-12]
     ac8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     acc:	lsl	r3, r3, #2
     ad0:	sub	r2, fp, #4
     ad4:	add	r3, r2, r3
     ad8:	ldr	r3, [r3, #-144]	; 0xffffff70
     adc:	add	r2, r3, #1
     ae0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ae4:	lsl	r3, r3, #2
     ae8:	sub	r1, fp, #4
     aec:	add	r3, r1, r3
     af0:	str	r2, [r3, #-144]	; 0xffffff70
     af4:	b	ba0 <transpose_array+0x698>
     af8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     afc:	lsl	r3, r3, #2
     b00:	sub	r2, fp, #4
     b04:	add	r3, r2, r3
     b08:	mov	r2, #0
     b0c:	str	r2, [r3, #-144]	; 0xffffff70
     b10:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b14:	lsl	r3, r3, #2
     b18:	sub	r2, fp, #4
     b1c:	add	r3, r2, r3
     b20:	ldr	r2, [r3, #-108]	; 0xffffff94
     b24:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b28:	lsl	r3, r3, #2
     b2c:	sub	r1, fp, #4
     b30:	add	r3, r1, r3
     b34:	ldr	r3, [r3, #-180]	; 0xffffff4c
     b38:	mul	r3, r3, r2
     b3c:	ldr	r2, [fp, #-12]
     b40:	sub	r3, r2, r3
     b44:	str	r3, [fp, #-12]
     b48:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b4c:	add	r3, r3, #1
     b50:	str	r3, [fp, #-28]	; 0xffffffe4
     b54:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b58:	lsl	r3, r3, #2
     b5c:	sub	r2, fp, #4
     b60:	add	r3, r2, r3
     b64:	ldr	r3, [r3, #-108]	; 0xffffff94
     b68:	ldr	r2, [fp, #-12]
     b6c:	add	r3, r2, r3
     b70:	str	r3, [fp, #-12]
     b74:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b78:	lsl	r3, r3, #2
     b7c:	sub	r2, fp, #4
     b80:	add	r3, r2, r3
     b84:	ldr	r3, [r3, #-144]	; 0xffffff70
     b88:	add	r2, r3, #1
     b8c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b90:	lsl	r3, r3, #2
     b94:	sub	r1, fp, #4
     b98:	add	r3, r1, r3
     b9c:	str	r2, [r3, #-144]	; 0xffffff70
     ba0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ba4:	lsl	r3, r3, #2
     ba8:	sub	r2, fp, #4
     bac:	add	r3, r2, r3
     bb0:	ldr	r2, [r3, #-144]	; 0xffffff70
     bb4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     bb8:	lsl	r3, r3, #2
     bbc:	sub	r1, fp, #4
     bc0:	add	r3, r1, r3
     bc4:	ldr	r3, [r3, #-180]	; 0xffffff4c
     bc8:	cmp	r2, r3
     bcc:	beq	af8 <transpose_array+0x5f0>
     bd0:	ldr	r3, [fp, #-16]
     bd4:	add	r3, r3, #1
     bd8:	str	r3, [fp, #-16]
     bdc:	ldr	r2, [fp, #-16]
     be0:	ldr	r3, [fp, #-8]
     be4:	cmp	r2, r3
     be8:	blt	a78 <transpose_array+0x570>
     bec:	b	d88 <transpose_array+0x880>
     bf0:	mov	r3, #0
     bf4:	str	r3, [fp, #-16]
     bf8:	b	d60 <transpose_array+0x858>
     bfc:	mov	r3, #0
     c00:	str	r3, [fp, #-32]	; 0xffffffe0
     c04:	ldr	r3, [fp, #-12]
     c08:	lsl	r3, r3, #3
     c0c:	ldr	r2, [fp, #-40]	; 0xffffffd8
     c10:	add	r1, r2, r3
     c14:	ldr	r3, [fp, #-16]
     c18:	lsl	r3, r3, #3
     c1c:	ldr	r2, [fp, #-36]	; 0xffffffdc
     c20:	add	r3, r2, r3
     c24:	ldrd	r2, [r3]
     c28:	strd	r2, [r1]
     c2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     c30:	lsl	r3, r3, #2
     c34:	sub	r2, fp, #4
     c38:	add	r3, r2, r3
     c3c:	ldr	r3, [r3, #-108]	; 0xffffff94
     c40:	ldr	r2, [fp, #-12]
     c44:	add	r3, r2, r3
     c48:	str	r3, [fp, #-12]
     c4c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     c50:	lsl	r3, r3, #2
     c54:	sub	r2, fp, #4
     c58:	add	r3, r2, r3
     c5c:	ldr	r3, [r3, #-144]	; 0xffffff70
     c60:	add	r2, r3, #1
     c64:	ldr	r3, [fp, #-32]	; 0xffffffe0
     c68:	lsl	r3, r3, #2
     c6c:	sub	r1, fp, #4
     c70:	add	r3, r1, r3
     c74:	str	r2, [r3, #-144]	; 0xffffff70
     c78:	b	d24 <transpose_array+0x81c>
     c7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     c80:	lsl	r3, r3, #2
     c84:	sub	r2, fp, #4
     c88:	add	r3, r2, r3
     c8c:	mov	r2, #0
     c90:	str	r2, [r3, #-144]	; 0xffffff70
     c94:	ldr	r3, [fp, #-32]	; 0xffffffe0
     c98:	lsl	r3, r3, #2
     c9c:	sub	r2, fp, #4
     ca0:	add	r3, r2, r3
     ca4:	ldr	r2, [r3, #-108]	; 0xffffff94
     ca8:	ldr	r3, [fp, #-32]	; 0xffffffe0
     cac:	lsl	r3, r3, #2
     cb0:	sub	r1, fp, #4
     cb4:	add	r3, r1, r3
     cb8:	ldr	r3, [r3, #-180]	; 0xffffff4c
     cbc:	mul	r3, r3, r2
     cc0:	ldr	r2, [fp, #-12]
     cc4:	sub	r3, r2, r3
     cc8:	str	r3, [fp, #-12]
     ccc:	ldr	r3, [fp, #-32]	; 0xffffffe0
     cd0:	add	r3, r3, #1
     cd4:	str	r3, [fp, #-32]	; 0xffffffe0
     cd8:	ldr	r3, [fp, #-32]	; 0xffffffe0
     cdc:	lsl	r3, r3, #2
     ce0:	sub	r2, fp, #4
     ce4:	add	r3, r2, r3
     ce8:	ldr	r3, [r3, #-108]	; 0xffffff94
     cec:	ldr	r2, [fp, #-12]
     cf0:	add	r3, r2, r3
     cf4:	str	r3, [fp, #-12]
     cf8:	ldr	r3, [fp, #-32]	; 0xffffffe0
     cfc:	lsl	r3, r3, #2
     d00:	sub	r2, fp, #4
     d04:	add	r3, r2, r3
     d08:	ldr	r3, [r3, #-144]	; 0xffffff70
     d0c:	add	r2, r3, #1
     d10:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d14:	lsl	r3, r3, #2
     d18:	sub	r1, fp, #4
     d1c:	add	r3, r1, r3
     d20:	str	r2, [r3, #-144]	; 0xffffff70
     d24:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d28:	lsl	r3, r3, #2
     d2c:	sub	r2, fp, #4
     d30:	add	r3, r2, r3
     d34:	ldr	r2, [r3, #-144]	; 0xffffff70
     d38:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d3c:	lsl	r3, r3, #2
     d40:	sub	r1, fp, #4
     d44:	add	r3, r1, r3
     d48:	ldr	r3, [r3, #-180]	; 0xffffff4c
     d4c:	cmp	r2, r3
     d50:	beq	c7c <transpose_array+0x774>
     d54:	ldr	r3, [fp, #-16]
     d58:	add	r3, r3, #1
     d5c:	str	r3, [fp, #-16]
     d60:	ldr	r2, [fp, #-16]
     d64:	ldr	r3, [fp, #-8]
     d68:	cmp	r2, r3
     d6c:	blt	bfc <transpose_array+0x6f4>
     d70:	b	d88 <transpose_array+0x880>
     d74:	ldr	r3, [pc, #72]	; dc4 <transpose_array+0x8bc>
     d78:	mov	r2, #172	; 0xac
     d7c:	ldr	r1, [pc, #56]	; dbc <transpose_array+0x8b4>
     d80:	ldr	r0, [pc, #64]	; dc8 <transpose_array+0x8c0>
     d84:	bl	0 <__assert_fail>
     d88:	ldr	r3, [fp, #-8]
     d8c:	ldr	r2, [fp, #-200]	; 0xffffff38
     d90:	mul	r3, r2, r3
     d94:	mov	r2, r3
     d98:	ldr	r1, [fp, #-40]	; 0xffffffd8
     d9c:	ldr	r0, [fp, #-196]	; 0xffffff3c
     da0:	bl	0 <memcpy>
     da4:	ldr	r0, [fp, #-40]	; 0xffffffd8
     da8:	bl	0 <free>
     dac:	mov	r3, #0
     db0:	mov	r0, r3
     db4:	sub	sp, fp, #4
     db8:	pop	{fp, pc}
     dbc:	.word	0x00000000
     dc0:	.word	0x00000054
     dc4:	.word	0x00000598
     dc8:	.word	0x0000008c

00000dcc <ipow>:
     dcc:	push	{fp}		; (str fp, [sp, #-4]!)
     dd0:	add	fp, sp, #0
     dd4:	sub	sp, sp, #28
     dd8:	vstr	d0, [fp, #-20]	; 0xffffffec
     ddc:	str	r0, [fp, #-24]	; 0xffffffe8
     de0:	mov	r2, #0
     de4:	ldr	r3, [pc, #140]	; e78 <ipow+0xac>
     de8:	strd	r2, [fp, #-12]
     dec:	ldr	r3, [fp, #-24]	; 0xffffffe8
     df0:	cmp	r3, #0
     df4:	bge	e44 <ipow+0x78>
     df8:	b	e0c <ipow+0x40>
     dfc:	vldr	d6, [fp, #-12]
     e00:	vldr	d7, [fp, #-20]	; 0xffffffec
     e04:	vmul.f64	d7, d6, d7
     e08:	vstr	d7, [fp, #-12]
     e0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e10:	add	r2, r3, #1
     e14:	str	r2, [fp, #-24]	; 0xffffffe8
     e18:	cmp	r3, #0
     e1c:	bne	dfc <ipow+0x30>
     e20:	vldr	d5, [pc, #72]	; e70 <ipow+0xa4>
     e24:	vldr	d6, [fp, #-12]
     e28:	vdiv.f64	d7, d5, d6
     e2c:	vstr	d7, [fp, #-12]
     e30:	b	e58 <ipow+0x8c>
     e34:	vldr	d6, [fp, #-12]
     e38:	vldr	d7, [fp, #-20]	; 0xffffffec
     e3c:	vmul.f64	d7, d6, d7
     e40:	vstr	d7, [fp, #-12]
     e44:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e48:	sub	r2, r3, #1
     e4c:	str	r2, [fp, #-24]	; 0xffffffe8
     e50:	cmp	r3, #0
     e54:	bne	e34 <ipow+0x68>
     e58:	ldrd	r2, [fp, #-12]
     e5c:	vmov	d7, r2, r3
     e60:	vmov.f64	d0, d7
     e64:	add	sp, fp, #0
     e68:	pop	{fp}		; (ldr fp, [sp], #4)
     e6c:	bx	lr
     e70:	.word	0x00000000
     e74:	.word	0x3ff00000
     e78:	.word	0x3ff00000

00000e7c <get_read_type>:
     e7c:	push	{fp, lr}
     e80:	add	fp, sp, #4
     e84:	sub	sp, sp, #16
     e88:	str	r0, [fp, #-16]
     e8c:	str	r1, [fp, #-20]	; 0xffffffec
     e90:	ldr	r3, [fp, #-16]
     e94:	ldr	r3, [r3, #4]
     e98:	sub	r3, r3, #1
     e9c:	ldr	r2, [fp, #-16]
     ea0:	lsl	r3, r3, #4
     ea4:	add	r3, r2, r3
     ea8:	ldr	r3, [r3, #8]
     eac:	ldr	r3, [r3]
     eb0:	cmp	r3, #99	; 0x63
     eb4:	bhi	ed8 <get_read_type+0x5c>
     eb8:	ldr	r3, [fp, #-16]
     ebc:	ldr	r3, [r3, #4]
     ec0:	sub	r3, r3, #1
     ec4:	ldr	r2, [fp, #-16]
     ec8:	lsl	r3, r3, #4
     ecc:	add	r3, r2, r3
     ed0:	ldr	r3, [r3, #8]
     ed4:	b	ef8 <get_read_type+0x7c>
     ed8:	ldr	r3, [fp, #-16]
     edc:	ldr	r3, [r3, #4]
     ee0:	sub	r3, r3, #1
     ee4:	ldr	r2, [fp, #-16]
     ee8:	lsl	r3, r3, #4
     eec:	add	r3, r2, r3
     ef0:	ldr	r3, [r3, #8]
     ef4:	ldr	r3, [r3, #4]
     ef8:	str	r3, [fp, #-8]
     efc:	ldr	r3, [fp, #-8]
     f00:	ldr	r3, [r3, #8]
     f04:	cmp	r3, #2
     f08:	beq	f1c <get_read_type+0xa0>
     f0c:	ldr	r3, [fp, #-8]
     f10:	ldr	r3, [r3, #8]
     f14:	cmp	r3, #3
     f18:	bne	f58 <get_read_type+0xdc>
     f1c:	ldr	r3, [pc, #84]	; f78 <get_read_type+0xfc>
     f20:	ldr	r3, [pc, r3]
     f24:	bl	0 <__aeabi_read_tp>
     f28:	mov	r2, r0
     f2c:	ldr	r3, [r2, r3]
     f30:	cmp	r3, #0
     f34:	beq	f58 <get_read_type+0xdc>
     f38:	ldr	r3, [fp, #-8]
     f3c:	ldr	r3, [r3, #48]	; 0x30
     f40:	cmp	r3, #0
     f44:	beq	f58 <get_read_type+0xdc>
     f48:	ldr	r3, [fp, #-20]	; 0xffffffec
     f4c:	mov	r2, #9
     f50:	str	r2, [r3]
     f54:	b	f68 <get_read_type+0xec>
     f58:	ldr	r3, [fp, #-8]
     f5c:	ldr	r2, [r3, #12]
     f60:	ldr	r3, [fp, #-20]	; 0xffffffec
     f64:	str	r2, [r3]
     f68:	mov	r3, #0
     f6c:	mov	r0, r3
     f70:	sub	sp, fp, #4
     f74:	pop	{fp, pc}
     f78:	.word	0x00000050

00000f7c <get_unconverted_read_type>:
     f7c:	push	{fp, lr}
     f80:	add	fp, sp, #4
     f84:	sub	sp, sp, #24
     f88:	str	r0, [fp, #-16]
     f8c:	str	r1, [fp, #-20]	; 0xffffffec
     f90:	str	r2, [fp, #-24]	; 0xffffffe8
     f94:	ldr	r3, [fp, #-16]
     f98:	ldr	r3, [r3, #4]
     f9c:	sub	r3, r3, #1
     fa0:	ldr	r2, [fp, #-16]
     fa4:	lsl	r3, r3, #4
     fa8:	add	r3, r2, r3
     fac:	ldr	r3, [r3, #8]
     fb0:	ldr	r3, [r3]
     fb4:	cmp	r3, #99	; 0x63
     fb8:	bhi	fdc <get_unconverted_read_type+0x60>
     fbc:	ldr	r3, [fp, #-16]
     fc0:	ldr	r3, [r3, #4]
     fc4:	sub	r3, r3, #1
     fc8:	ldr	r2, [fp, #-16]
     fcc:	lsl	r3, r3, #4
     fd0:	add	r3, r2, r3
     fd4:	ldr	r3, [r3, #8]
     fd8:	b	ffc <get_unconverted_read_type+0x80>
     fdc:	ldr	r3, [fp, #-16]
     fe0:	ldr	r3, [r3, #4]
     fe4:	sub	r3, r3, #1
     fe8:	ldr	r2, [fp, #-16]
     fec:	lsl	r3, r3, #4
     ff0:	add	r3, r2, r3
     ff4:	ldr	r3, [r3, #8]
     ff8:	ldr	r3, [r3, #4]
     ffc:	str	r3, [fp, #-8]
    1000:	ldr	r3, [fp, #-8]
    1004:	ldr	r2, [r3, #12]
    1008:	ldr	r3, [fp, #-20]	; 0xffffffec
    100c:	str	r2, [r3]
    1010:	ldr	r3, [fp, #-8]
    1014:	ldr	r3, [r3, #8]
    1018:	cmp	r3, #2
    101c:	beq	1030 <get_unconverted_read_type+0xb4>
    1020:	ldr	r3, [fp, #-8]
    1024:	ldr	r3, [r3, #8]
    1028:	cmp	r3, #3
    102c:	bne	1060 <get_unconverted_read_type+0xe4>
    1030:	ldr	r3, [pc, #68]	; 107c <get_unconverted_read_type+0x100>
    1034:	ldr	r3, [pc, r3]
    1038:	bl	0 <__aeabi_read_tp>
    103c:	mov	r2, r0
    1040:	ldr	r3, [r2, r3]
    1044:	cmp	r3, #0
    1048:	beq	1060 <get_unconverted_read_type+0xe4>
    104c:	ldr	r3, [fp, #-8]
    1050:	ldr	r2, [r3, #48]	; 0x30
    1054:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1058:	str	r2, [r3]
    105c:	b	106c <get_unconverted_read_type+0xf0>
    1060:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1064:	mov	r2, #0
    1068:	str	r2, [r3]
    106c:	mov	r3, #0
    1070:	mov	r0, r3
    1074:	sub	sp, fp, #4
    1078:	pop	{fp, pc}
    107c:	.word	0x00000040

00001080 <get_array_element_read_type>:
    1080:	push	{fp, lr}
    1084:	add	fp, sp, #4
    1088:	sub	sp, sp, #16
    108c:	str	r0, [fp, #-16]
    1090:	str	r1, [fp, #-20]	; 0xffffffec
    1094:	ldr	r3, [fp, #-16]
    1098:	ldr	r3, [r3, #40]	; 0x28
    109c:	str	r3, [fp, #-8]
    10a0:	ldr	r3, [fp, #-8]
    10a4:	ldr	r3, [r3, #8]
    10a8:	cmp	r3, #2
    10ac:	beq	10c0 <get_array_element_read_type+0x40>
    10b0:	ldr	r3, [fp, #-8]
    10b4:	ldr	r3, [r3, #8]
    10b8:	cmp	r3, #3
    10bc:	bne	10fc <get_array_element_read_type+0x7c>
    10c0:	ldr	r3, [pc, #84]	; 111c <get_array_element_read_type+0x9c>
    10c4:	ldr	r3, [pc, r3]
    10c8:	bl	0 <__aeabi_read_tp>
    10cc:	mov	r2, r0
    10d0:	ldr	r3, [r2, r3]
    10d4:	cmp	r3, #0
    10d8:	beq	10fc <get_array_element_read_type+0x7c>
    10dc:	ldr	r3, [fp, #-8]
    10e0:	ldr	r3, [r3, #48]	; 0x30
    10e4:	cmp	r3, #0
    10e8:	beq	10fc <get_array_element_read_type+0x7c>
    10ec:	ldr	r3, [fp, #-20]	; 0xffffffec
    10f0:	mov	r2, #9
    10f4:	str	r2, [r3]
    10f8:	b	110c <get_array_element_read_type+0x8c>
    10fc:	ldr	r3, [fp, #-8]
    1100:	ldr	r2, [r3, #12]
    1104:	ldr	r3, [fp, #-20]	; 0xffffffec
    1108:	str	r2, [r3]
    110c:	mov	r3, #0
    1110:	mov	r0, r3
    1114:	sub	sp, fp, #4
    1118:	pop	{fp, pc}
    111c:	.word	0x00000050

00001120 <get_array_element_unconverted_read_type>:
    1120:	push	{fp, lr}
    1124:	add	fp, sp, #4
    1128:	sub	sp, sp, #24
    112c:	str	r0, [fp, #-16]
    1130:	str	r1, [fp, #-20]	; 0xffffffec
    1134:	str	r2, [fp, #-24]	; 0xffffffe8
    1138:	ldr	r3, [fp, #-16]
    113c:	ldr	r3, [r3, #40]	; 0x28
    1140:	str	r3, [fp, #-8]
    1144:	ldr	r3, [fp, #-8]
    1148:	ldr	r2, [r3, #12]
    114c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1150:	str	r2, [r3]
    1154:	ldr	r3, [fp, #-8]
    1158:	ldr	r3, [r3, #8]
    115c:	cmp	r3, #2
    1160:	beq	1174 <get_array_element_unconverted_read_type+0x54>
    1164:	ldr	r3, [fp, #-8]
    1168:	ldr	r3, [r3, #8]
    116c:	cmp	r3, #3
    1170:	bne	11a4 <get_array_element_unconverted_read_type+0x84>
    1174:	ldr	r3, [pc, #68]	; 11c0 <get_array_element_unconverted_read_type+0xa0>
    1178:	ldr	r3, [pc, r3]
    117c:	bl	0 <__aeabi_read_tp>
    1180:	mov	r2, r0
    1184:	ldr	r3, [r2, r3]
    1188:	cmp	r3, #0
    118c:	beq	11a4 <get_array_element_unconverted_read_type+0x84>
    1190:	ldr	r3, [fp, #-8]
    1194:	ldr	r2, [r3, #48]	; 0x30
    1198:	ldr	r3, [fp, #-24]	; 0xffffffe8
    119c:	str	r2, [r3]
    11a0:	b	11b0 <get_array_element_unconverted_read_type+0x90>
    11a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    11a8:	mov	r2, #0
    11ac:	str	r2, [r3]
    11b0:	mov	r3, #0
    11b4:	mov	r0, r3
    11b8:	sub	sp, fp, #4
    11bc:	pop	{fp, pc}
    11c0:	.word	0x00000040

000011c4 <read_split_array>:
    11c4:	push	{fp, lr}
    11c8:	add	fp, sp, #4
    11cc:	sub	sp, sp, #648	; 0x288
    11d0:	str	r0, [fp, #-640]	; 0xfffffd80
    11d4:	str	r1, [fp, #-644]	; 0xfffffd7c
    11d8:	str	r2, [fp, #-648]	; 0xfffffd78
    11dc:	str	r3, [fp, #-652]	; 0xfffffd74
    11e0:	sub	r2, fp, #596	; 0x254
    11e4:	sub	r3, fp, #600	; 0x258
    11e8:	mov	r1, r3
    11ec:	ldr	r0, [fp, #-640]	; 0xfffffd80
    11f0:	bl	0 <coda_cursor_get_array_dim>
    11f4:	mov	r3, r0
    11f8:	cmp	r3, #0
    11fc:	beq	1208 <read_split_array+0x44>
    1200:	mvn	r3, #0
    1204:	b	1614 <read_split_array+0x450>
    1208:	ldr	r2, [fp, #-640]	; 0xfffffd80
    120c:	sub	r3, fp, #548	; 0x224
    1210:	mov	r1, r2
    1214:	mov	r2, #520	; 0x208
    1218:	mov	r0, r3
    121c:	bl	0 <memcpy>
    1220:	ldr	r3, [fp, #-600]	; 0xfffffda8
    1224:	cmp	r3, #1
    1228:	ble	1238 <read_split_array+0x74>
    122c:	ldr	r3, [fp, #8]
    1230:	cmp	r3, #1
    1234:	beq	1384 <read_split_array+0x1c0>
    1238:	mov	r3, #1
    123c:	str	r3, [fp, #-8]
    1240:	mov	r3, #0
    1244:	str	r3, [fp, #-12]
    1248:	b	1278 <read_split_array+0xb4>
    124c:	ldr	r3, [fp, #-12]
    1250:	lsl	r3, r3, #2
    1254:	sub	r2, fp, #4
    1258:	add	r3, r2, r3
    125c:	ldr	r2, [r3, #-592]	; 0xfffffdb0
    1260:	ldr	r3, [fp, #-8]
    1264:	mul	r3, r2, r3
    1268:	str	r3, [fp, #-8]
    126c:	ldr	r3, [fp, #-12]
    1270:	add	r3, r3, #1
    1274:	str	r3, [fp, #-12]
    1278:	ldr	r3, [fp, #-600]	; 0xfffffda8
    127c:	ldr	r2, [fp, #-12]
    1280:	cmp	r2, r3
    1284:	blt	124c <read_split_array+0x88>
    1288:	ldr	r3, [fp, #-8]
    128c:	cmp	r3, #0
    1290:	ble	1610 <read_split_array+0x44c>
    1294:	sub	r3, fp, #548	; 0x224
    1298:	mov	r1, #0
    129c:	mov	r0, r3
    12a0:	bl	0 <coda_cursor_goto_array_element_by_index>
    12a4:	mov	r3, r0
    12a8:	cmp	r3, #0
    12ac:	beq	12b8 <read_split_array+0xf4>
    12b0:	mvn	r3, #0
    12b4:	b	1614 <read_split_array+0x450>
    12b8:	mov	r3, #0
    12bc:	str	r3, [fp, #-12]
    12c0:	b	1370 <read_split_array+0x1ac>
    12c4:	sub	r1, fp, #564	; 0x234
    12c8:	sub	r2, fp, #548	; 0x224
    12cc:	ldr	r3, [fp, #-644]	; 0xfffffd7c
    12d0:	mov	r0, r2
    12d4:	blx	r3
    12d8:	ldr	r3, [fp, #-12]
    12dc:	ldr	r2, [fp, #4]
    12e0:	mul	r3, r2, r3
    12e4:	mov	r2, r3
    12e8:	ldr	r3, [fp, #-648]	; 0xfffffd78
    12ec:	add	r3, r3, r2
    12f0:	ldr	r2, [fp, #4]
    12f4:	sub	r1, fp, #564	; 0x234
    12f8:	mov	r0, r3
    12fc:	bl	0 <memcpy>
    1300:	ldr	r3, [fp, #-12]
    1304:	ldr	r2, [fp, #4]
    1308:	mul	r3, r2, r3
    130c:	mov	r2, r3
    1310:	ldr	r3, [fp, #-652]	; 0xfffffd74
    1314:	add	r0, r3, r2
    1318:	sub	r2, fp, #564	; 0x234
    131c:	ldr	r3, [fp, #4]
    1320:	add	r3, r2, r3
    1324:	ldr	r2, [fp, #4]
    1328:	mov	r1, r3
    132c:	bl	0 <memcpy>
    1330:	ldr	r3, [fp, #-8]
    1334:	sub	r2, r3, #1
    1338:	ldr	r3, [fp, #-12]
    133c:	cmp	r2, r3
    1340:	ble	1364 <read_split_array+0x1a0>
    1344:	sub	r3, fp, #548	; 0x224
    1348:	mov	r0, r3
    134c:	bl	0 <coda_cursor_goto_next_array_element>
    1350:	mov	r3, r0
    1354:	cmp	r3, #0
    1358:	beq	1364 <read_split_array+0x1a0>
    135c:	mvn	r3, #0
    1360:	b	1614 <read_split_array+0x450>
    1364:	ldr	r3, [fp, #-12]
    1368:	add	r3, r3, #1
    136c:	str	r3, [fp, #-12]
    1370:	ldr	r2, [fp, #-12]
    1374:	ldr	r3, [fp, #-8]
    1378:	cmp	r2, r3
    137c:	blt	12c4 <read_split_array+0x100>
    1380:	b	1610 <read_split_array+0x44c>
    1384:	mov	r3, #1
    1388:	str	r3, [fp, #-636]	; 0xfffffd84
    138c:	mov	r3, #0
    1390:	str	r3, [fp, #-12]
    1394:	b	13e8 <read_split_array+0x224>
    1398:	ldr	r3, [fp, #-12]
    139c:	add	r1, r3, #1
    13a0:	ldr	r3, [fp, #-12]
    13a4:	lsl	r3, r3, #2
    13a8:	sub	r2, fp, #4
    13ac:	add	r3, r2, r3
    13b0:	ldr	r2, [r3, #-632]	; 0xfffffd88
    13b4:	ldr	r3, [fp, #-12]
    13b8:	lsl	r3, r3, #2
    13bc:	sub	r0, fp, #4
    13c0:	add	r3, r0, r3
    13c4:	ldr	r3, [r3, #-592]	; 0xfffffdb0
    13c8:	mul	r2, r3, r2
    13cc:	lsl	r3, r1, #2
    13d0:	sub	r1, fp, #4
    13d4:	add	r3, r1, r3
    13d8:	str	r2, [r3, #-632]	; 0xfffffd88
    13dc:	ldr	r3, [fp, #-12]
    13e0:	add	r3, r3, #1
    13e4:	str	r3, [fp, #-12]
    13e8:	ldr	r3, [fp, #-600]	; 0xfffffda8
    13ec:	ldr	r2, [fp, #-12]
    13f0:	cmp	r2, r3
    13f4:	blt	1398 <read_split_array+0x1d4>
    13f8:	ldr	r3, [fp, #-600]	; 0xfffffda8
    13fc:	sub	r3, r3, #1
    1400:	lsl	r3, r3, #2
    1404:	sub	r2, fp, #4
    1408:	add	r3, r2, r3
    140c:	ldr	r3, [r3, #-632]	; 0xfffffd88
    1410:	str	r3, [fp, #-24]	; 0xffffffe8
    1414:	ldr	r3, [fp, #-600]	; 0xfffffda8
    1418:	lsl	r3, r3, #2
    141c:	sub	r2, fp, #4
    1420:	add	r3, r2, r3
    1424:	ldr	r3, [r3, #-632]	; 0xfffffd88
    1428:	str	r3, [fp, #-8]
    142c:	ldr	r3, [fp, #-8]
    1430:	cmp	r3, #0
    1434:	ble	1610 <read_split_array+0x44c>
    1438:	mov	r3, #0
    143c:	str	r3, [fp, #-16]
    1440:	mov	r3, #0
    1444:	str	r3, [fp, #-20]	; 0xffffffec
    1448:	sub	r3, fp, #548	; 0x224
    144c:	mov	r1, #0
    1450:	mov	r0, r3
    1454:	bl	0 <coda_cursor_goto_array_element_by_index>
    1458:	mov	r3, r0
    145c:	cmp	r3, #0
    1460:	beq	146c <read_split_array+0x2a8>
    1464:	mvn	r3, #0
    1468:	b	1614 <read_split_array+0x450>
    146c:	sub	r1, fp, #564	; 0x234
    1470:	sub	r2, fp, #548	; 0x224
    1474:	ldr	r3, [fp, #-644]	; 0xfffffd7c
    1478:	mov	r0, r2
    147c:	blx	r3
    1480:	ldr	r3, [fp, #-20]	; 0xffffffec
    1484:	ldr	r2, [fp, #4]
    1488:	mul	r3, r2, r3
    148c:	mov	r2, r3
    1490:	ldr	r3, [fp, #-648]	; 0xfffffd78
    1494:	add	r3, r3, r2
    1498:	ldr	r2, [fp, #4]
    149c:	sub	r1, fp, #564	; 0x234
    14a0:	mov	r0, r3
    14a4:	bl	0 <memcpy>
    14a8:	ldr	r3, [fp, #-20]	; 0xffffffec
    14ac:	ldr	r2, [fp, #4]
    14b0:	mul	r3, r2, r3
    14b4:	mov	r2, r3
    14b8:	ldr	r3, [fp, #-652]	; 0xfffffd74
    14bc:	add	r0, r3, r2
    14c0:	sub	r2, fp, #564	; 0x234
    14c4:	ldr	r3, [fp, #4]
    14c8:	add	r3, r2, r3
    14cc:	ldr	r2, [fp, #4]
    14d0:	mov	r1, r3
    14d4:	bl	0 <memcpy>
    14d8:	ldr	r3, [fp, #-16]
    14dc:	add	r3, r3, #1
    14e0:	str	r3, [fp, #-16]
    14e4:	ldr	r2, [fp, #-16]
    14e8:	ldr	r3, [fp, #-8]
    14ec:	cmp	r2, r3
    14f0:	bge	1514 <read_split_array+0x350>
    14f4:	sub	r3, fp, #548	; 0x224
    14f8:	mov	r0, r3
    14fc:	bl	0 <coda_cursor_goto_next_array_element>
    1500:	mov	r3, r0
    1504:	cmp	r3, #0
    1508:	beq	1514 <read_split_array+0x350>
    150c:	mvn	r3, #0
    1510:	b	1614 <read_split_array+0x450>
    1514:	ldr	r2, [fp, #-20]	; 0xffffffec
    1518:	ldr	r3, [fp, #-24]	; 0xffffffe8
    151c:	add	r3, r2, r3
    1520:	str	r3, [fp, #-20]	; 0xffffffec
    1524:	ldr	r2, [fp, #-20]	; 0xffffffec
    1528:	ldr	r3, [fp, #-8]
    152c:	cmp	r2, r3
    1530:	blt	146c <read_split_array+0x2a8>
    1534:	ldr	r2, [fp, #-16]
    1538:	ldr	r3, [fp, #-8]
    153c:	cmp	r2, r3
    1540:	beq	160c <read_split_array+0x448>
    1544:	ldr	r3, [fp, #-600]	; 0xfffffda8
    1548:	sub	r3, r3, #2
    154c:	lsl	r3, r3, #2
    1550:	sub	r2, fp, #4
    1554:	add	r3, r2, r3
    1558:	ldr	r2, [r3, #-632]	; 0xfffffd88
    155c:	ldr	r3, [fp, #-600]	; 0xfffffda8
    1560:	lsl	r3, r3, #2
    1564:	sub	r1, fp, #4
    1568:	add	r3, r1, r3
    156c:	ldr	r3, [r3, #-632]	; 0xfffffd88
    1570:	sub	r3, r2, r3
    1574:	ldr	r2, [fp, #-20]	; 0xffffffec
    1578:	add	r3, r2, r3
    157c:	str	r3, [fp, #-20]	; 0xffffffec
    1580:	ldr	r3, [fp, #-600]	; 0xfffffda8
    1584:	sub	r3, r3, #3
    1588:	str	r3, [fp, #-12]
    158c:	b	15d8 <read_split_array+0x414>
    1590:	ldr	r3, [fp, #-12]
    1594:	lsl	r3, r3, #2
    1598:	sub	r2, fp, #4
    159c:	add	r3, r2, r3
    15a0:	ldr	r2, [r3, #-632]	; 0xfffffd88
    15a4:	ldr	r3, [fp, #-12]
    15a8:	add	r3, r3, #2
    15ac:	lsl	r3, r3, #2
    15b0:	sub	r1, fp, #4
    15b4:	add	r3, r1, r3
    15b8:	ldr	r3, [r3, #-632]	; 0xfffffd88
    15bc:	sub	r3, r2, r3
    15c0:	ldr	r2, [fp, #-20]	; 0xffffffec
    15c4:	add	r3, r2, r3
    15c8:	str	r3, [fp, #-20]	; 0xffffffec
    15cc:	ldr	r3, [fp, #-12]
    15d0:	sub	r3, r3, #1
    15d4:	str	r3, [fp, #-12]
    15d8:	ldr	r3, [fp, #-12]
    15dc:	cmp	r3, #0
    15e0:	blt	146c <read_split_array+0x2a8>
    15e4:	ldr	r3, [fp, #-12]
    15e8:	add	r3, r3, #2
    15ec:	lsl	r3, r3, #2
    15f0:	sub	r2, fp, #4
    15f4:	add	r3, r2, r3
    15f8:	ldr	r2, [r3, #-632]	; 0xfffffd88
    15fc:	ldr	r3, [fp, #-20]	; 0xffffffec
    1600:	cmp	r2, r3
    1604:	ble	1590 <read_split_array+0x3cc>
    1608:	b	146c <read_split_array+0x2a8>
    160c:	nop			; (mov r0, r0)
    1610:	mov	r3, #0
    1614:	mov	r0, r3
    1618:	sub	sp, fp, #4
    161c:	pop	{fp, pc}

00001620 <read_double_pair>:
    1620:	push	{fp, lr}
    1624:	add	fp, sp, #4
    1628:	sub	sp, sp, #528	; 0x210
    162c:	str	r0, [fp, #-528]	; 0xfffffdf0
    1630:	str	r1, [fp, #-532]	; 0xfffffdec
    1634:	ldr	r3, [fp, #-528]	; 0xfffffdf0
    1638:	ldr	r3, [r3, #4]
    163c:	sub	r3, r3, #1
    1640:	ldr	r2, [fp, #-528]	; 0xfffffdf0
    1644:	lsl	r3, r3, #4
    1648:	add	r3, r2, r3
    164c:	ldr	r3, [r3, #8]
    1650:	ldr	r3, [r3, #8]
    1654:	cmp	r3, #6
    1658:	bne	1684 <read_double_pair+0x64>
    165c:	ldr	r3, [fp, #-528]	; 0xfffffdf0
    1660:	ldr	r3, [r3, #4]
    1664:	sub	r3, r3, #1
    1668:	ldr	r2, [fp, #-528]	; 0xfffffdf0
    166c:	lsl	r3, r3, #4
    1670:	add	r3, r2, r3
    1674:	ldr	r3, [r3, #8]
    1678:	ldr	r3, [r3, #40]	; 0x28
    167c:	cmp	r3, #3
    1680:	beq	1698 <read_double_pair+0x78>
    1684:	ldr	r1, [pc, #232]	; 1774 <read_double_pair+0x154>
    1688:	mvn	r0, #104	; 0x68
    168c:	bl	0 <coda_set_error>
    1690:	mvn	r3, #0
    1694:	b	1768 <read_double_pair+0x148>
    1698:	ldr	r2, [fp, #-528]	; 0xfffffdf0
    169c:	sub	r3, fp, #524	; 0x20c
    16a0:	mov	r1, r2
    16a4:	mov	r2, #520	; 0x208
    16a8:	mov	r0, r3
    16ac:	bl	0 <memcpy>
    16b0:	sub	r3, fp, #524	; 0x20c
    16b4:	mov	r0, r3
    16b8:	bl	0 <coda_cursor_use_base_type_of_special_type>
    16bc:	mov	r3, r0
    16c0:	cmp	r3, #0
    16c4:	beq	16d0 <read_double_pair+0xb0>
    16c8:	mvn	r3, #0
    16cc:	b	1768 <read_double_pair+0x148>
    16d0:	sub	r3, fp, #524	; 0x20c
    16d4:	mov	r1, #0
    16d8:	mov	r0, r3
    16dc:	bl	0 <coda_cursor_goto_record_field_by_index>
    16e0:	mov	r3, r0
    16e4:	cmp	r3, #0
    16e8:	beq	16f4 <read_double_pair+0xd4>
    16ec:	mvn	r3, #0
    16f0:	b	1768 <read_double_pair+0x148>
    16f4:	sub	r3, fp, #524	; 0x20c
    16f8:	ldr	r1, [fp, #-532]	; 0xfffffdec
    16fc:	mov	r0, r3
    1700:	bl	5bbc <coda_cursor_read_double>
    1704:	mov	r3, r0
    1708:	cmp	r3, #0
    170c:	beq	1718 <read_double_pair+0xf8>
    1710:	mvn	r3, #0
    1714:	b	1768 <read_double_pair+0x148>
    1718:	sub	r3, fp, #524	; 0x20c
    171c:	mov	r0, r3
    1720:	bl	0 <coda_cursor_goto_next_record_field>
    1724:	mov	r3, r0
    1728:	cmp	r3, #0
    172c:	beq	1738 <read_double_pair+0x118>
    1730:	mvn	r3, #0
    1734:	b	1768 <read_double_pair+0x148>
    1738:	ldr	r3, [fp, #-532]	; 0xfffffdec
    173c:	add	r2, r3, #8
    1740:	sub	r3, fp, #524	; 0x20c
    1744:	mov	r1, r2
    1748:	mov	r0, r3
    174c:	bl	5bbc <coda_cursor_read_double>
    1750:	mov	r3, r0
    1754:	cmp	r3, #0
    1758:	beq	1764 <read_double_pair+0x144>
    175c:	mvn	r3, #0
    1760:	b	1768 <read_double_pair+0x148>
    1764:	mov	r3, #0
    1768:	mov	r0, r3
    176c:	sub	sp, fp, #4
    1770:	pop	{fp, pc}
    1774:	.word	0x00000090

00001778 <read_time>:
    1778:	push	{fp, lr}
    177c:	add	fp, sp, #4
    1780:	sub	sp, sp, #536	; 0x218
    1784:	str	r0, [fp, #-536]	; 0xfffffde8
    1788:	str	r1, [fp, #-540]	; 0xfffffde4
    178c:	ldr	r2, [fp, #-536]	; 0xfffffde8
    1790:	sub	r3, fp, #532	; 0x214
    1794:	mov	r1, r2
    1798:	mov	r2, #520	; 0x208
    179c:	mov	r0, r3
    17a0:	bl	0 <memcpy>
    17a4:	ldr	r3, [fp, #-536]	; 0xfffffde8
    17a8:	ldr	r3, [r3, #4]
    17ac:	sub	r3, r3, #1
    17b0:	ldr	r2, [fp, #-536]	; 0xfffffde8
    17b4:	lsl	r3, r3, #4
    17b8:	add	r3, r2, r3
    17bc:	ldr	r3, [r3, #8]
    17c0:	ldr	r3, [r3]
    17c4:	cmp	r3, #99	; 0x63
    17c8:	bhi	17ec <read_time+0x74>
    17cc:	ldr	r3, [fp, #-536]	; 0xfffffde8
    17d0:	ldr	r3, [r3, #4]
    17d4:	sub	r3, r3, #1
    17d8:	ldr	r2, [fp, #-536]	; 0xfffffde8
    17dc:	lsl	r3, r3, #4
    17e0:	add	r3, r2, r3
    17e4:	ldr	r3, [r3, #8]
    17e8:	b	180c <read_time+0x94>
    17ec:	ldr	r3, [fp, #-536]	; 0xfffffde8
    17f0:	ldr	r3, [r3, #4]
    17f4:	sub	r3, r3, #1
    17f8:	ldr	r2, [fp, #-536]	; 0xfffffde8
    17fc:	lsl	r3, r3, #4
    1800:	add	r3, r2, r3
    1804:	ldr	r3, [r3, #8]
    1808:	ldr	r3, [r3, #4]
    180c:	str	r3, [fp, #-8]
    1810:	sub	r3, fp, #532	; 0x214
    1814:	mov	r0, r3
    1818:	bl	0 <coda_cursor_use_base_type_of_special_type>
    181c:	mov	r3, r0
    1820:	cmp	r3, #0
    1824:	beq	1830 <read_time+0xb8>
    1828:	mvn	r3, #0
    182c:	b	184c <read_time+0xd4>
    1830:	ldr	r3, [fp, #-8]
    1834:	ldr	r3, [r3, #52]	; 0x34
    1838:	sub	r1, fp, #532	; 0x214
    183c:	ldr	r2, [fp, #-540]	; 0xfffffde4
    1840:	mov	r0, r3
    1844:	bl	0 <coda_expression_eval_float>
    1848:	mov	r3, r0
    184c:	mov	r0, r3
    1850:	sub	sp, fp, #4
    1854:	pop	{fp, pc}

00001858 <read_vsf_integer>:
    1858:	push	{fp, lr}
    185c:	add	fp, sp, #4
    1860:	sub	sp, sp, #544	; 0x220
    1864:	str	r0, [fp, #-544]	; 0xfffffde0
    1868:	str	r1, [fp, #-548]	; 0xfffffddc
    186c:	ldr	r2, [fp, #-544]	; 0xfffffde0
    1870:	sub	r3, fp, #524	; 0x20c
    1874:	mov	r1, r2
    1878:	mov	r2, #520	; 0x208
    187c:	mov	r0, r3
    1880:	bl	0 <memcpy>
    1884:	sub	r3, fp, #524	; 0x20c
    1888:	mov	r0, r3
    188c:	bl	0 <coda_cursor_use_base_type_of_special_type>
    1890:	mov	r3, r0
    1894:	cmp	r3, #0
    1898:	beq	18a4 <read_vsf_integer+0x4c>
    189c:	mvn	r3, #0
    18a0:	b	1960 <read_vsf_integer+0x108>
    18a4:	sub	r3, fp, #524	; 0x20c
    18a8:	mov	r0, r3
    18ac:	bl	0 <coda_cursor_goto_first_record_field>
    18b0:	mov	r3, r0
    18b4:	cmp	r3, #0
    18b8:	beq	18c4 <read_vsf_integer+0x6c>
    18bc:	mvn	r3, #0
    18c0:	b	1960 <read_vsf_integer+0x108>
    18c4:	sub	r2, fp, #528	; 0x210
    18c8:	sub	r3, fp, #524	; 0x20c
    18cc:	mov	r1, r2
    18d0:	mov	r0, r3
    18d4:	bl	4f18 <coda_cursor_read_int32>
    18d8:	mov	r3, r0
    18dc:	cmp	r3, #0
    18e0:	beq	18ec <read_vsf_integer+0x94>
    18e4:	mvn	r3, #0
    18e8:	b	1960 <read_vsf_integer+0x108>
    18ec:	sub	r3, fp, #524	; 0x20c
    18f0:	mov	r0, r3
    18f4:	bl	0 <coda_cursor_goto_next_record_field>
    18f8:	mov	r3, r0
    18fc:	cmp	r3, #0
    1900:	beq	190c <read_vsf_integer+0xb4>
    1904:	mvn	r3, #0
    1908:	b	1960 <read_vsf_integer+0x108>
    190c:	sub	r2, fp, #540	; 0x21c
    1910:	sub	r3, fp, #524	; 0x20c
    1914:	mov	r1, r2
    1918:	mov	r0, r3
    191c:	bl	5bbc <coda_cursor_read_double>
    1920:	mov	r3, r0
    1924:	cmp	r3, #0
    1928:	beq	1934 <read_vsf_integer+0xdc>
    192c:	mvn	r3, #0
    1930:	b	1960 <read_vsf_integer+0x108>
    1934:	ldr	r3, [fp, #-528]	; 0xfffffdf0
    1938:	rsb	r3, r3, #0
    193c:	mov	r0, r3
    1940:	vldr	d0, [pc, #40]	; 1970 <read_vsf_integer+0x118>
    1944:	bl	dcc <ipow>
    1948:	vmov.f64	d6, d0
    194c:	vldr	d7, [fp, #-540]	; 0xfffffde4
    1950:	vmul.f64	d7, d6, d7
    1954:	ldr	r3, [fp, #-548]	; 0xfffffddc
    1958:	vstr	d7, [r3]
    195c:	mov	r3, #0
    1960:	mov	r0, r3
    1964:	sub	sp, fp, #4
    1968:	pop	{fp, pc}
    196c:	nop			; (mov r0, r0)
    1970:	.word	0x00000000
    1974:	.word	0x40240000

00001978 <read_int8>:
    1978:	push	{fp, lr}
    197c:	add	fp, sp, #4
    1980:	sub	sp, sp, #8
    1984:	str	r0, [fp, #-8]
    1988:	str	r1, [fp, #-12]
    198c:	ldr	r3, [fp, #-8]
    1990:	ldr	r3, [r3, #4]
    1994:	sub	r3, r3, #1
    1998:	ldr	r2, [fp, #-8]
    199c:	lsl	r3, r3, #4
    19a0:	add	r3, r2, r3
    19a4:	ldr	r3, [r3, #8]
    19a8:	ldr	r3, [r3]
    19ac:	cmp	r3, #101	; 0x65
    19b0:	beq	1a34 <read_int8+0xbc>
    19b4:	cmp	r3, #101	; 0x65
    19b8:	bhi	19d8 <read_int8+0x60>
    19bc:	cmp	r3, #1
    19c0:	beq	1a0c <read_int8+0x94>
    19c4:	cmp	r3, #1
    19c8:	bcc	19f8 <read_int8+0x80>
    19cc:	cmp	r3, #100	; 0x64
    19d0:	beq	1a20 <read_int8+0xa8>
    19d4:	b	1a84 <read_int8+0x10c>
    19d8:	cmp	r3, #103	; 0x67
    19dc:	beq	1a5c <read_int8+0xe4>
    19e0:	cmp	r3, #103	; 0x67
    19e4:	bcc	1a48 <read_int8+0xd0>
    19e8:	cmp	r3, #104	; 0x68
    19ec:	beq	1a70 <read_int8+0xf8>
    19f0:	cmp	r3, #105	; 0x69
    19f4:	b	1a84 <read_int8+0x10c>
    19f8:	ldr	r1, [fp, #-12]
    19fc:	ldr	r0, [fp, #-8]
    1a00:	bl	0 <coda_ascii_cursor_read_int8>
    1a04:	mov	r3, r0
    1a08:	b	1a98 <read_int8+0x120>
    1a0c:	ldr	r1, [fp, #-12]
    1a10:	ldr	r0, [fp, #-8]
    1a14:	bl	0 <coda_bin_cursor_read_int8>
    1a18:	mov	r3, r0
    1a1c:	b	1a98 <read_int8+0x120>
    1a20:	ldr	r1, [fp, #-12]
    1a24:	ldr	r0, [fp, #-8]
    1a28:	bl	0 <coda_mem_cursor_read_int8>
    1a2c:	mov	r3, r0
    1a30:	b	1a98 <read_int8+0x120>
    1a34:	mov	r1, #0
    1a38:	mvn	r0, #10
    1a3c:	bl	0 <coda_set_error>
    1a40:	mvn	r3, #0
    1a44:	b	1a98 <read_int8+0x120>
    1a48:	mov	r1, #0
    1a4c:	mvn	r0, #12
    1a50:	bl	0 <coda_set_error>
    1a54:	mvn	r3, #0
    1a58:	b	1a98 <read_int8+0x120>
    1a5c:	ldr	r1, [fp, #-12]
    1a60:	ldr	r0, [fp, #-8]
    1a64:	bl	0 <coda_cdf_cursor_read_int8>
    1a68:	mov	r3, r0
    1a6c:	b	1a98 <read_int8+0x120>
    1a70:	ldr	r1, [fp, #-12]
    1a74:	ldr	r0, [fp, #-8]
    1a78:	bl	0 <coda_netcdf_cursor_read_int8>
    1a7c:	mov	r3, r0
    1a80:	b	1a98 <read_int8+0x120>
    1a84:	ldr	r3, [pc, #24]	; 1aa4 <read_int8+0x12c>
    1a88:	ldr	r2, [pc, #24]	; 1aa8 <read_int8+0x130>
    1a8c:	ldr	r1, [pc, #24]	; 1aac <read_int8+0x134>
    1a90:	ldr	r0, [pc, #24]	; 1ab0 <read_int8+0x138>
    1a94:	bl	0 <__assert_fail>
    1a98:	mov	r0, r3
    1a9c:	sub	sp, fp, #4
    1aa0:	pop	{fp, pc}
    1aa4:	.word	0x000005a8
    1aa8:	.word	0x00000167
    1aac:	.word	0x000000c8
    1ab0:	.word	0x0000008c

00001ab4 <read_uint8>:
    1ab4:	push	{fp, lr}
    1ab8:	add	fp, sp, #4
    1abc:	sub	sp, sp, #8
    1ac0:	str	r0, [fp, #-8]
    1ac4:	str	r1, [fp, #-12]
    1ac8:	ldr	r3, [fp, #-8]
    1acc:	ldr	r3, [r3, #4]
    1ad0:	sub	r3, r3, #1
    1ad4:	ldr	r2, [fp, #-8]
    1ad8:	lsl	r3, r3, #4
    1adc:	add	r3, r2, r3
    1ae0:	ldr	r3, [r3, #8]
    1ae4:	ldr	r3, [r3]
    1ae8:	cmp	r3, #101	; 0x65
    1aec:	beq	1b6c <read_uint8+0xb8>
    1af0:	cmp	r3, #101	; 0x65
    1af4:	bhi	1b14 <read_uint8+0x60>
    1af8:	cmp	r3, #1
    1afc:	beq	1b44 <read_uint8+0x90>
    1b00:	cmp	r3, #1
    1b04:	bcc	1b30 <read_uint8+0x7c>
    1b08:	cmp	r3, #100	; 0x64
    1b0c:	beq	1b58 <read_uint8+0xa4>
    1b10:	b	1ba8 <read_uint8+0xf4>
    1b14:	cmp	r3, #103	; 0x67
    1b18:	beq	1b94 <read_uint8+0xe0>
    1b1c:	cmp	r3, #103	; 0x67
    1b20:	bcc	1b80 <read_uint8+0xcc>
    1b24:	cmp	r3, #105	; 0x69
    1b28:	bhi	1ba8 <read_uint8+0xf4>
    1b2c:	b	1ba8 <read_uint8+0xf4>
    1b30:	ldr	r1, [fp, #-12]
    1b34:	ldr	r0, [fp, #-8]
    1b38:	bl	0 <coda_ascii_cursor_read_uint8>
    1b3c:	mov	r3, r0
    1b40:	b	1bbc <read_uint8+0x108>
    1b44:	ldr	r1, [fp, #-12]
    1b48:	ldr	r0, [fp, #-8]
    1b4c:	bl	0 <coda_bin_cursor_read_uint8>
    1b50:	mov	r3, r0
    1b54:	b	1bbc <read_uint8+0x108>
    1b58:	ldr	r1, [fp, #-12]
    1b5c:	ldr	r0, [fp, #-8]
    1b60:	bl	0 <coda_mem_cursor_read_uint8>
    1b64:	mov	r3, r0
    1b68:	b	1bbc <read_uint8+0x108>
    1b6c:	mov	r1, #0
    1b70:	mvn	r0, #10
    1b74:	bl	0 <coda_set_error>
    1b78:	mvn	r3, #0
    1b7c:	b	1bbc <read_uint8+0x108>
    1b80:	mov	r1, #0
    1b84:	mvn	r0, #12
    1b88:	bl	0 <coda_set_error>
    1b8c:	mvn	r3, #0
    1b90:	b	1bbc <read_uint8+0x108>
    1b94:	ldr	r1, [fp, #-12]
    1b98:	ldr	r0, [fp, #-8]
    1b9c:	bl	0 <coda_cdf_cursor_read_uint8>
    1ba0:	mov	r3, r0
    1ba4:	b	1bbc <read_uint8+0x108>
    1ba8:	ldr	r3, [pc, #24]	; 1bc8 <read_uint8+0x114>
    1bac:	ldr	r2, [pc, #24]	; 1bcc <read_uint8+0x118>
    1bb0:	ldr	r1, [pc, #24]	; 1bd0 <read_uint8+0x11c>
    1bb4:	ldr	r0, [pc, #24]	; 1bd4 <read_uint8+0x120>
    1bb8:	bl	0 <__assert_fail>
    1bbc:	mov	r0, r3
    1bc0:	sub	sp, fp, #4
    1bc4:	pop	{fp, pc}
    1bc8:	.word	0x000005b4
    1bcc:	.word	0x0000018a
    1bd0:	.word	0x000000c8
    1bd4:	.word	0x0000008c

00001bd8 <read_int16>:
    1bd8:	push	{fp, lr}
    1bdc:	add	fp, sp, #4
    1be0:	sub	sp, sp, #8
    1be4:	str	r0, [fp, #-8]
    1be8:	str	r1, [fp, #-12]
    1bec:	ldr	r3, [fp, #-8]
    1bf0:	ldr	r3, [r3, #4]
    1bf4:	sub	r3, r3, #1
    1bf8:	ldr	r2, [fp, #-8]
    1bfc:	lsl	r3, r3, #4
    1c00:	add	r3, r2, r3
    1c04:	ldr	r3, [r3, #8]
    1c08:	ldr	r3, [r3]
    1c0c:	cmp	r3, #101	; 0x65
    1c10:	beq	1c98 <read_int16+0xc0>
    1c14:	cmp	r3, #101	; 0x65
    1c18:	bhi	1c38 <read_int16+0x60>
    1c1c:	cmp	r3, #1
    1c20:	beq	1c70 <read_int16+0x98>
    1c24:	cmp	r3, #1
    1c28:	bcc	1c5c <read_int16+0x84>
    1c2c:	cmp	r3, #100	; 0x64
    1c30:	beq	1c84 <read_int16+0xac>
    1c34:	b	1cfc <read_int16+0x124>
    1c38:	cmp	r3, #103	; 0x67
    1c3c:	beq	1cc0 <read_int16+0xe8>
    1c40:	cmp	r3, #103	; 0x67
    1c44:	bcc	1cac <read_int16+0xd4>
    1c48:	cmp	r3, #104	; 0x68
    1c4c:	beq	1cd4 <read_int16+0xfc>
    1c50:	cmp	r3, #105	; 0x69
    1c54:	beq	1ce8 <read_int16+0x110>
    1c58:	b	1cfc <read_int16+0x124>
    1c5c:	ldr	r1, [fp, #-12]
    1c60:	ldr	r0, [fp, #-8]
    1c64:	bl	0 <coda_ascii_cursor_read_int16>
    1c68:	mov	r3, r0
    1c6c:	b	1d00 <read_int16+0x128>
    1c70:	ldr	r1, [fp, #-12]
    1c74:	ldr	r0, [fp, #-8]
    1c78:	bl	0 <coda_bin_cursor_read_int16>
    1c7c:	mov	r3, r0
    1c80:	b	1d00 <read_int16+0x128>
    1c84:	ldr	r1, [fp, #-12]
    1c88:	ldr	r0, [fp, #-8]
    1c8c:	bl	0 <coda_mem_cursor_read_int16>
    1c90:	mov	r3, r0
    1c94:	b	1d00 <read_int16+0x128>
    1c98:	mov	r1, #0
    1c9c:	mvn	r0, #10
    1ca0:	bl	0 <coda_set_error>
    1ca4:	mvn	r3, #0
    1ca8:	b	1d00 <read_int16+0x128>
    1cac:	mov	r1, #0
    1cb0:	mvn	r0, #12
    1cb4:	bl	0 <coda_set_error>
    1cb8:	mvn	r3, #0
    1cbc:	b	1d00 <read_int16+0x128>
    1cc0:	ldr	r1, [fp, #-12]
    1cc4:	ldr	r0, [fp, #-8]
    1cc8:	bl	0 <coda_cdf_cursor_read_int16>
    1ccc:	mov	r3, r0
    1cd0:	b	1d00 <read_int16+0x128>
    1cd4:	ldr	r1, [fp, #-12]
    1cd8:	ldr	r0, [fp, #-8]
    1cdc:	bl	0 <coda_netcdf_cursor_read_int16>
    1ce0:	mov	r3, r0
    1ce4:	b	1d00 <read_int16+0x128>
    1ce8:	ldr	r3, [pc, #28]	; 1d0c <read_int16+0x134>
    1cec:	ldr	r2, [pc, #28]	; 1d10 <read_int16+0x138>
    1cf0:	ldr	r1, [pc, #28]	; 1d14 <read_int16+0x13c>
    1cf4:	ldr	r0, [pc, #28]	; 1d18 <read_int16+0x140>
    1cf8:	bl	0 <__assert_fail>
    1cfc:	mov	r3, #0
    1d00:	mov	r0, r3
    1d04:	sub	sp, fp, #4
    1d08:	pop	{fp, pc}
    1d0c:	.word	0x000005c0
    1d10:	.word	0x000001ab
    1d14:	.word	0x000000c8
    1d18:	.word	0x0000008c

00001d1c <read_uint16>:
    1d1c:	push	{fp, lr}
    1d20:	add	fp, sp, #4
    1d24:	sub	sp, sp, #8
    1d28:	str	r0, [fp, #-8]
    1d2c:	str	r1, [fp, #-12]
    1d30:	ldr	r3, [fp, #-8]
    1d34:	ldr	r3, [r3, #4]
    1d38:	sub	r3, r3, #1
    1d3c:	ldr	r2, [fp, #-8]
    1d40:	lsl	r3, r3, #4
    1d44:	add	r3, r2, r3
    1d48:	ldr	r3, [r3, #8]
    1d4c:	ldr	r3, [r3]
    1d50:	cmp	r3, #101	; 0x65
    1d54:	beq	1dd4 <read_uint16+0xb8>
    1d58:	cmp	r3, #101	; 0x65
    1d5c:	bhi	1d7c <read_uint16+0x60>
    1d60:	cmp	r3, #1
    1d64:	beq	1dac <read_uint16+0x90>
    1d68:	cmp	r3, #1
    1d6c:	bcc	1d98 <read_uint16+0x7c>
    1d70:	cmp	r3, #100	; 0x64
    1d74:	beq	1dc0 <read_uint16+0xa4>
    1d78:	b	1e10 <read_uint16+0xf4>
    1d7c:	cmp	r3, #103	; 0x67
    1d80:	beq	1dfc <read_uint16+0xe0>
    1d84:	cmp	r3, #103	; 0x67
    1d88:	bcc	1de8 <read_uint16+0xcc>
    1d8c:	cmp	r3, #105	; 0x69
    1d90:	bhi	1e10 <read_uint16+0xf4>
    1d94:	b	1e10 <read_uint16+0xf4>
    1d98:	ldr	r1, [fp, #-12]
    1d9c:	ldr	r0, [fp, #-8]
    1da0:	bl	0 <coda_ascii_cursor_read_uint16>
    1da4:	mov	r3, r0
    1da8:	b	1e24 <read_uint16+0x108>
    1dac:	ldr	r1, [fp, #-12]
    1db0:	ldr	r0, [fp, #-8]
    1db4:	bl	0 <coda_bin_cursor_read_uint16>
    1db8:	mov	r3, r0
    1dbc:	b	1e24 <read_uint16+0x108>
    1dc0:	ldr	r1, [fp, #-12]
    1dc4:	ldr	r0, [fp, #-8]
    1dc8:	bl	0 <coda_mem_cursor_read_uint16>
    1dcc:	mov	r3, r0
    1dd0:	b	1e24 <read_uint16+0x108>
    1dd4:	mov	r1, #0
    1dd8:	mvn	r0, #10
    1ddc:	bl	0 <coda_set_error>
    1de0:	mvn	r3, #0
    1de4:	b	1e24 <read_uint16+0x108>
    1de8:	mov	r1, #0
    1dec:	mvn	r0, #12
    1df0:	bl	0 <coda_set_error>
    1df4:	mvn	r3, #0
    1df8:	b	1e24 <read_uint16+0x108>
    1dfc:	ldr	r1, [fp, #-12]
    1e00:	ldr	r0, [fp, #-8]
    1e04:	bl	0 <coda_cdf_cursor_read_uint16>
    1e08:	mov	r3, r0
    1e0c:	b	1e24 <read_uint16+0x108>
    1e10:	ldr	r3, [pc, #24]	; 1e30 <read_uint16+0x114>
    1e14:	ldr	r2, [pc, #24]	; 1e34 <read_uint16+0x118>
    1e18:	ldr	r1, [pc, #24]	; 1e38 <read_uint16+0x11c>
    1e1c:	ldr	r0, [pc, #24]	; 1e3c <read_uint16+0x120>
    1e20:	bl	0 <__assert_fail>
    1e24:	mov	r0, r3
    1e28:	sub	sp, fp, #4
    1e2c:	pop	{fp, pc}
    1e30:	.word	0x000005cc
    1e34:	.word	0x000001d1
    1e38:	.word	0x000000c8
    1e3c:	.word	0x0000008c

00001e40 <read_int32>:
    1e40:	push	{fp, lr}
    1e44:	add	fp, sp, #4
    1e48:	sub	sp, sp, #8
    1e4c:	str	r0, [fp, #-8]
    1e50:	str	r1, [fp, #-12]
    1e54:	ldr	r3, [fp, #-8]
    1e58:	ldr	r3, [r3, #4]
    1e5c:	sub	r3, r3, #1
    1e60:	ldr	r2, [fp, #-8]
    1e64:	lsl	r3, r3, #4
    1e68:	add	r3, r2, r3
    1e6c:	ldr	r3, [r3, #8]
    1e70:	ldr	r3, [r3]
    1e74:	cmp	r3, #101	; 0x65
    1e78:	beq	1f00 <read_int32+0xc0>
    1e7c:	cmp	r3, #101	; 0x65
    1e80:	bhi	1ea0 <read_int32+0x60>
    1e84:	cmp	r3, #1
    1e88:	beq	1ed8 <read_int32+0x98>
    1e8c:	cmp	r3, #1
    1e90:	bcc	1ec4 <read_int32+0x84>
    1e94:	cmp	r3, #100	; 0x64
    1e98:	beq	1eec <read_int32+0xac>
    1e9c:	b	1f64 <read_int32+0x124>
    1ea0:	cmp	r3, #103	; 0x67
    1ea4:	beq	1f28 <read_int32+0xe8>
    1ea8:	cmp	r3, #103	; 0x67
    1eac:	bcc	1f14 <read_int32+0xd4>
    1eb0:	cmp	r3, #104	; 0x68
    1eb4:	beq	1f3c <read_int32+0xfc>
    1eb8:	cmp	r3, #105	; 0x69
    1ebc:	beq	1f50 <read_int32+0x110>
    1ec0:	b	1f64 <read_int32+0x124>
    1ec4:	ldr	r1, [fp, #-12]
    1ec8:	ldr	r0, [fp, #-8]
    1ecc:	bl	0 <coda_ascii_cursor_read_int32>
    1ed0:	mov	r3, r0
    1ed4:	b	1f68 <read_int32+0x128>
    1ed8:	ldr	r1, [fp, #-12]
    1edc:	ldr	r0, [fp, #-8]
    1ee0:	bl	0 <coda_bin_cursor_read_int32>
    1ee4:	mov	r3, r0
    1ee8:	b	1f68 <read_int32+0x128>
    1eec:	ldr	r1, [fp, #-12]
    1ef0:	ldr	r0, [fp, #-8]
    1ef4:	bl	0 <coda_mem_cursor_read_int32>
    1ef8:	mov	r3, r0
    1efc:	b	1f68 <read_int32+0x128>
    1f00:	mov	r1, #0
    1f04:	mvn	r0, #10
    1f08:	bl	0 <coda_set_error>
    1f0c:	mvn	r3, #0
    1f10:	b	1f68 <read_int32+0x128>
    1f14:	mov	r1, #0
    1f18:	mvn	r0, #12
    1f1c:	bl	0 <coda_set_error>
    1f20:	mvn	r3, #0
    1f24:	b	1f68 <read_int32+0x128>
    1f28:	ldr	r1, [fp, #-12]
    1f2c:	ldr	r0, [fp, #-8]
    1f30:	bl	0 <coda_cdf_cursor_read_int32>
    1f34:	mov	r3, r0
    1f38:	b	1f68 <read_int32+0x128>
    1f3c:	ldr	r1, [fp, #-12]
    1f40:	ldr	r0, [fp, #-8]
    1f44:	bl	0 <coda_netcdf_cursor_read_int32>
    1f48:	mov	r3, r0
    1f4c:	b	1f68 <read_int32+0x128>
    1f50:	ldr	r3, [pc, #28]	; 1f74 <read_int32+0x134>
    1f54:	ldr	r2, [pc, #28]	; 1f78 <read_int32+0x138>
    1f58:	ldr	r1, [pc, #28]	; 1f7c <read_int32+0x13c>
    1f5c:	ldr	r0, [pc, #28]	; 1f80 <read_int32+0x140>
    1f60:	bl	0 <__assert_fail>
    1f64:	mov	r3, #0
    1f68:	mov	r0, r3
    1f6c:	sub	sp, fp, #4
    1f70:	pop	{fp, pc}
    1f74:	.word	0x000005d8
    1f78:	.word	0x000001f3
    1f7c:	.word	0x000000c8
    1f80:	.word	0x0000008c

00001f84 <read_uint32>:
    1f84:	push	{fp, lr}
    1f88:	add	fp, sp, #4
    1f8c:	sub	sp, sp, #8
    1f90:	str	r0, [fp, #-8]
    1f94:	str	r1, [fp, #-12]
    1f98:	ldr	r3, [fp, #-8]
    1f9c:	ldr	r3, [r3, #4]
    1fa0:	sub	r3, r3, #1
    1fa4:	ldr	r2, [fp, #-8]
    1fa8:	lsl	r3, r3, #4
    1fac:	add	r3, r2, r3
    1fb0:	ldr	r3, [r3, #8]
    1fb4:	ldr	r3, [r3]
    1fb8:	cmp	r3, #101	; 0x65
    1fbc:	beq	203c <read_uint32+0xb8>
    1fc0:	cmp	r3, #101	; 0x65
    1fc4:	bhi	1fe4 <read_uint32+0x60>
    1fc8:	cmp	r3, #1
    1fcc:	beq	2014 <read_uint32+0x90>
    1fd0:	cmp	r3, #1
    1fd4:	bcc	2000 <read_uint32+0x7c>
    1fd8:	cmp	r3, #100	; 0x64
    1fdc:	beq	2028 <read_uint32+0xa4>
    1fe0:	b	2078 <read_uint32+0xf4>
    1fe4:	cmp	r3, #103	; 0x67
    1fe8:	beq	2064 <read_uint32+0xe0>
    1fec:	cmp	r3, #103	; 0x67
    1ff0:	bcc	2050 <read_uint32+0xcc>
    1ff4:	cmp	r3, #105	; 0x69
    1ff8:	bhi	2078 <read_uint32+0xf4>
    1ffc:	b	2078 <read_uint32+0xf4>
    2000:	ldr	r1, [fp, #-12]
    2004:	ldr	r0, [fp, #-8]
    2008:	bl	0 <coda_ascii_cursor_read_uint32>
    200c:	mov	r3, r0
    2010:	b	208c <read_uint32+0x108>
    2014:	ldr	r1, [fp, #-12]
    2018:	ldr	r0, [fp, #-8]
    201c:	bl	0 <coda_bin_cursor_read_uint32>
    2020:	mov	r3, r0
    2024:	b	208c <read_uint32+0x108>
    2028:	ldr	r1, [fp, #-12]
    202c:	ldr	r0, [fp, #-8]
    2030:	bl	0 <coda_mem_cursor_read_uint32>
    2034:	mov	r3, r0
    2038:	b	208c <read_uint32+0x108>
    203c:	mov	r1, #0
    2040:	mvn	r0, #10
    2044:	bl	0 <coda_set_error>
    2048:	mvn	r3, #0
    204c:	b	208c <read_uint32+0x108>
    2050:	mov	r1, #0
    2054:	mvn	r0, #12
    2058:	bl	0 <coda_set_error>
    205c:	mvn	r3, #0
    2060:	b	208c <read_uint32+0x108>
    2064:	ldr	r1, [fp, #-12]
    2068:	ldr	r0, [fp, #-8]
    206c:	bl	0 <coda_cdf_cursor_read_uint32>
    2070:	mov	r3, r0
    2074:	b	208c <read_uint32+0x108>
    2078:	ldr	r3, [pc, #24]	; 2098 <read_uint32+0x114>
    207c:	ldr	r2, [pc, #24]	; 209c <read_uint32+0x118>
    2080:	ldr	r1, [pc, #24]	; 20a0 <read_uint32+0x11c>
    2084:	ldr	r0, [pc, #24]	; 20a4 <read_uint32+0x120>
    2088:	bl	0 <__assert_fail>
    208c:	mov	r0, r3
    2090:	sub	sp, fp, #4
    2094:	pop	{fp, pc}
    2098:	.word	0x000005e4
    209c:	.word	0x00000219
    20a0:	.word	0x000000c8
    20a4:	.word	0x0000008c

000020a8 <read_int64>:
    20a8:	push	{fp, lr}
    20ac:	add	fp, sp, #4
    20b0:	sub	sp, sp, #8
    20b4:	str	r0, [fp, #-8]
    20b8:	str	r1, [fp, #-12]
    20bc:	ldr	r3, [fp, #-8]
    20c0:	ldr	r3, [r3, #4]
    20c4:	sub	r3, r3, #1
    20c8:	ldr	r2, [fp, #-8]
    20cc:	lsl	r3, r3, #4
    20d0:	add	r3, r2, r3
    20d4:	ldr	r3, [r3, #8]
    20d8:	ldr	r3, [r3]
    20dc:	cmp	r3, #101	; 0x65
    20e0:	beq	2160 <read_int64+0xb8>
    20e4:	cmp	r3, #101	; 0x65
    20e8:	bhi	2108 <read_int64+0x60>
    20ec:	cmp	r3, #1
    20f0:	beq	2138 <read_int64+0x90>
    20f4:	cmp	r3, #1
    20f8:	bcc	2124 <read_int64+0x7c>
    20fc:	cmp	r3, #100	; 0x64
    2100:	beq	214c <read_int64+0xa4>
    2104:	b	219c <read_int64+0xf4>
    2108:	cmp	r3, #103	; 0x67
    210c:	beq	2188 <read_int64+0xe0>
    2110:	cmp	r3, #103	; 0x67
    2114:	bcc	2174 <read_int64+0xcc>
    2118:	cmp	r3, #105	; 0x69
    211c:	bhi	219c <read_int64+0xf4>
    2120:	b	219c <read_int64+0xf4>
    2124:	ldr	r1, [fp, #-12]
    2128:	ldr	r0, [fp, #-8]
    212c:	bl	0 <coda_ascii_cursor_read_int64>
    2130:	mov	r3, r0
    2134:	b	21b0 <read_int64+0x108>
    2138:	ldr	r1, [fp, #-12]
    213c:	ldr	r0, [fp, #-8]
    2140:	bl	0 <coda_bin_cursor_read_int64>
    2144:	mov	r3, r0
    2148:	b	21b0 <read_int64+0x108>
    214c:	ldr	r1, [fp, #-12]
    2150:	ldr	r0, [fp, #-8]
    2154:	bl	0 <coda_mem_cursor_read_int64>
    2158:	mov	r3, r0
    215c:	b	21b0 <read_int64+0x108>
    2160:	mov	r1, #0
    2164:	mvn	r0, #10
    2168:	bl	0 <coda_set_error>
    216c:	mvn	r3, #0
    2170:	b	21b0 <read_int64+0x108>
    2174:	mov	r1, #0
    2178:	mvn	r0, #12
    217c:	bl	0 <coda_set_error>
    2180:	mvn	r3, #0
    2184:	b	21b0 <read_int64+0x108>
    2188:	ldr	r1, [fp, #-12]
    218c:	ldr	r0, [fp, #-8]
    2190:	bl	0 <coda_cdf_cursor_read_int64>
    2194:	mov	r3, r0
    2198:	b	21b0 <read_int64+0x108>
    219c:	ldr	r3, [pc, #24]	; 21bc <read_int64+0x114>
    21a0:	mov	r2, #572	; 0x23c
    21a4:	ldr	r1, [pc, #20]	; 21c0 <read_int64+0x118>
    21a8:	ldr	r0, [pc, #20]	; 21c4 <read_int64+0x11c>
    21ac:	bl	0 <__assert_fail>
    21b0:	mov	r0, r3
    21b4:	sub	sp, fp, #4
    21b8:	pop	{fp, pc}
    21bc:	.word	0x000005f0
    21c0:	.word	0x000000c8
    21c4:	.word	0x0000008c

000021c8 <read_uint64>:
    21c8:	push	{fp, lr}
    21cc:	add	fp, sp, #4
    21d0:	sub	sp, sp, #8
    21d4:	str	r0, [fp, #-8]
    21d8:	str	r1, [fp, #-12]
    21dc:	ldr	r3, [fp, #-8]
    21e0:	ldr	r3, [r3, #4]
    21e4:	sub	r3, r3, #1
    21e8:	ldr	r2, [fp, #-8]
    21ec:	lsl	r3, r3, #4
    21f0:	add	r3, r2, r3
    21f4:	ldr	r3, [r3, #8]
    21f8:	ldr	r3, [r3]
    21fc:	cmp	r3, #101	; 0x65
    2200:	beq	2278 <read_uint64+0xb0>
    2204:	cmp	r3, #101	; 0x65
    2208:	bhi	2228 <read_uint64+0x60>
    220c:	cmp	r3, #1
    2210:	beq	2250 <read_uint64+0x88>
    2214:	cmp	r3, #1
    2218:	bcc	223c <read_uint64+0x74>
    221c:	cmp	r3, #100	; 0x64
    2220:	beq	2264 <read_uint64+0x9c>
    2224:	b	22a0 <read_uint64+0xd8>
    2228:	cmp	r3, #102	; 0x66
    222c:	beq	228c <read_uint64+0xc4>
    2230:	cmp	r3, #105	; 0x69
    2234:	bhi	22a0 <read_uint64+0xd8>
    2238:	b	22a0 <read_uint64+0xd8>
    223c:	ldr	r1, [fp, #-12]
    2240:	ldr	r0, [fp, #-8]
    2244:	bl	0 <coda_ascii_cursor_read_uint64>
    2248:	mov	r3, r0
    224c:	b	22b4 <read_uint64+0xec>
    2250:	ldr	r1, [fp, #-12]
    2254:	ldr	r0, [fp, #-8]
    2258:	bl	0 <coda_bin_cursor_read_uint64>
    225c:	mov	r3, r0
    2260:	b	22b4 <read_uint64+0xec>
    2264:	ldr	r1, [fp, #-12]
    2268:	ldr	r0, [fp, #-8]
    226c:	bl	0 <coda_mem_cursor_read_uint64>
    2270:	mov	r3, r0
    2274:	b	22b4 <read_uint64+0xec>
    2278:	mov	r1, #0
    227c:	mvn	r0, #10
    2280:	bl	0 <coda_set_error>
    2284:	mvn	r3, #0
    2288:	b	22b4 <read_uint64+0xec>
    228c:	mov	r1, #0
    2290:	mvn	r0, #12
    2294:	bl	0 <coda_set_error>
    2298:	mvn	r3, #0
    229c:	b	22b4 <read_uint64+0xec>
    22a0:	ldr	r3, [pc, #24]	; 22c0 <read_uint64+0xf8>
    22a4:	ldr	r2, [pc, #24]	; 22c4 <read_uint64+0xfc>
    22a8:	ldr	r1, [pc, #24]	; 22c8 <read_uint64+0x100>
    22ac:	ldr	r0, [pc, #24]	; 22cc <read_uint64+0x104>
    22b0:	bl	0 <__assert_fail>
    22b4:	mov	r0, r3
    22b8:	sub	sp, fp, #4
    22bc:	pop	{fp, pc}
    22c0:	.word	0x000005fc
    22c4:	.word	0x0000025e
    22c8:	.word	0x000000c8
    22cc:	.word	0x0000008c

000022d0 <read_float>:
    22d0:	push	{fp, lr}
    22d4:	add	fp, sp, #4
    22d8:	sub	sp, sp, #8
    22dc:	str	r0, [fp, #-8]
    22e0:	str	r1, [fp, #-12]
    22e4:	ldr	r3, [fp, #-8]
    22e8:	ldr	r3, [r3, #4]
    22ec:	sub	r3, r3, #1
    22f0:	ldr	r2, [fp, #-8]
    22f4:	lsl	r3, r3, #4
    22f8:	add	r3, r2, r3
    22fc:	ldr	r3, [r3, #8]
    2300:	ldr	r3, [r3]
    2304:	cmp	r3, #101	; 0x65
    2308:	beq	2390 <read_float+0xc0>
    230c:	cmp	r3, #101	; 0x65
    2310:	bhi	2330 <read_float+0x60>
    2314:	cmp	r3, #1
    2318:	beq	2368 <read_float+0x98>
    231c:	cmp	r3, #1
    2320:	bcc	2354 <read_float+0x84>
    2324:	cmp	r3, #100	; 0x64
    2328:	beq	237c <read_float+0xac>
    232c:	b	23f4 <read_float+0x124>
    2330:	cmp	r3, #103	; 0x67
    2334:	beq	23b8 <read_float+0xe8>
    2338:	cmp	r3, #103	; 0x67
    233c:	bcc	23a4 <read_float+0xd4>
    2340:	cmp	r3, #104	; 0x68
    2344:	beq	23cc <read_float+0xfc>
    2348:	cmp	r3, #105	; 0x69
    234c:	beq	23e0 <read_float+0x110>
    2350:	b	23f4 <read_float+0x124>
    2354:	ldr	r1, [fp, #-12]
    2358:	ldr	r0, [fp, #-8]
    235c:	bl	0 <coda_ascii_cursor_read_float>
    2360:	mov	r3, r0
    2364:	b	2408 <read_float+0x138>
    2368:	ldr	r1, [fp, #-12]
    236c:	ldr	r0, [fp, #-8]
    2370:	bl	0 <coda_bin_cursor_read_float>
    2374:	mov	r3, r0
    2378:	b	2408 <read_float+0x138>
    237c:	ldr	r1, [fp, #-12]
    2380:	ldr	r0, [fp, #-8]
    2384:	bl	0 <coda_mem_cursor_read_float>
    2388:	mov	r3, r0
    238c:	b	2408 <read_float+0x138>
    2390:	mov	r1, #0
    2394:	mvn	r0, #10
    2398:	bl	0 <coda_set_error>
    239c:	mvn	r3, #0
    23a0:	b	2408 <read_float+0x138>
    23a4:	mov	r1, #0
    23a8:	mvn	r0, #12
    23ac:	bl	0 <coda_set_error>
    23b0:	mvn	r3, #0
    23b4:	b	2408 <read_float+0x138>
    23b8:	ldr	r1, [fp, #-12]
    23bc:	ldr	r0, [fp, #-8]
    23c0:	bl	0 <coda_cdf_cursor_read_float>
    23c4:	mov	r3, r0
    23c8:	b	2408 <read_float+0x138>
    23cc:	ldr	r1, [fp, #-12]
    23d0:	ldr	r0, [fp, #-8]
    23d4:	bl	0 <coda_netcdf_cursor_read_float>
    23d8:	mov	r3, r0
    23dc:	b	2408 <read_float+0x138>
    23e0:	ldr	r1, [fp, #-12]
    23e4:	ldr	r0, [fp, #-8]
    23e8:	bl	0 <coda_grib_cursor_read_float>
    23ec:	mov	r3, r0
    23f0:	b	2408 <read_float+0x138>
    23f4:	ldr	r3, [pc, #24]	; 2414 <read_float+0x144>
    23f8:	ldr	r2, [pc, #24]	; 2418 <read_float+0x148>
    23fc:	ldr	r1, [pc, #24]	; 241c <read_float+0x14c>
    2400:	ldr	r0, [pc, #24]	; 2420 <read_float+0x150>
    2404:	bl	0 <__assert_fail>
    2408:	mov	r0, r3
    240c:	sub	sp, fp, #4
    2410:	pop	{fp, pc}
    2414:	.word	0x00000608
    2418:	.word	0x00000282
    241c:	.word	0x000000c8
    2420:	.word	0x0000008c

00002424 <read_double>:
    2424:	push	{fp, lr}
    2428:	add	fp, sp, #4
    242c:	sub	sp, sp, #16
    2430:	str	r0, [fp, #-16]
    2434:	str	r1, [fp, #-20]	; 0xffffffec
    2438:	ldr	r3, [fp, #-16]
    243c:	ldr	r3, [r3, #4]
    2440:	sub	r3, r3, #1
    2444:	ldr	r2, [fp, #-16]
    2448:	lsl	r3, r3, #4
    244c:	add	r3, r2, r3
    2450:	ldr	r3, [r3, #8]
    2454:	ldr	r3, [r3]
    2458:	cmp	r3, #99	; 0x63
    245c:	bhi	2480 <read_double+0x5c>
    2460:	ldr	r3, [fp, #-16]
    2464:	ldr	r3, [r3, #4]
    2468:	sub	r3, r3, #1
    246c:	ldr	r2, [fp, #-16]
    2470:	lsl	r3, r3, #4
    2474:	add	r3, r2, r3
    2478:	ldr	r3, [r3, #8]
    247c:	b	24a0 <read_double+0x7c>
    2480:	ldr	r3, [fp, #-16]
    2484:	ldr	r3, [r3, #4]
    2488:	sub	r3, r3, #1
    248c:	ldr	r2, [fp, #-16]
    2490:	lsl	r3, r3, #4
    2494:	add	r3, r2, r3
    2498:	ldr	r3, [r3, #8]
    249c:	ldr	r3, [r3, #4]
    24a0:	str	r3, [fp, #-8]
    24a4:	ldr	r3, [fp, #-8]
    24a8:	ldr	r3, [r3, #8]
    24ac:	cmp	r3, #6
    24b0:	bne	24fc <read_double+0xd8>
    24b4:	ldr	r3, [fp, #-8]
    24b8:	ldr	r3, [r3, #40]	; 0x28
    24bc:	cmp	r3, #2
    24c0:	bne	24d8 <read_double+0xb4>
    24c4:	ldr	r1, [fp, #-20]	; 0xffffffec
    24c8:	ldr	r0, [fp, #-16]
    24cc:	bl	1778 <read_time>
    24d0:	mov	r3, r0
    24d4:	b	2608 <read_double+0x1e4>
    24d8:	ldr	r3, [fp, #-8]
    24dc:	ldr	r3, [r3, #40]	; 0x28
    24e0:	cmp	r3, #1
    24e4:	bne	24fc <read_double+0xd8>
    24e8:	ldr	r1, [fp, #-20]	; 0xffffffec
    24ec:	ldr	r0, [fp, #-16]
    24f0:	bl	1858 <read_vsf_integer>
    24f4:	mov	r3, r0
    24f8:	b	2608 <read_double+0x1e4>
    24fc:	ldr	r3, [fp, #-16]
    2500:	ldr	r3, [r3, #4]
    2504:	sub	r3, r3, #1
    2508:	ldr	r2, [fp, #-16]
    250c:	lsl	r3, r3, #4
    2510:	add	r3, r2, r3
    2514:	ldr	r3, [r3, #8]
    2518:	ldr	r3, [r3]
    251c:	cmp	r3, #101	; 0x65
    2520:	beq	25a4 <read_double+0x180>
    2524:	cmp	r3, #101	; 0x65
    2528:	bhi	2548 <read_double+0x124>
    252c:	cmp	r3, #1
    2530:	beq	257c <read_double+0x158>
    2534:	cmp	r3, #1
    2538:	bcc	2568 <read_double+0x144>
    253c:	cmp	r3, #100	; 0x64
    2540:	beq	2590 <read_double+0x16c>
    2544:	b	25f4 <read_double+0x1d0>
    2548:	cmp	r3, #103	; 0x67
    254c:	beq	25cc <read_double+0x1a8>
    2550:	cmp	r3, #103	; 0x67
    2554:	bcc	25b8 <read_double+0x194>
    2558:	cmp	r3, #104	; 0x68
    255c:	beq	25e0 <read_double+0x1bc>
    2560:	cmp	r3, #105	; 0x69
    2564:	b	25f4 <read_double+0x1d0>
    2568:	ldr	r1, [fp, #-20]	; 0xffffffec
    256c:	ldr	r0, [fp, #-16]
    2570:	bl	0 <coda_ascii_cursor_read_double>
    2574:	mov	r3, r0
    2578:	b	2608 <read_double+0x1e4>
    257c:	ldr	r1, [fp, #-20]	; 0xffffffec
    2580:	ldr	r0, [fp, #-16]
    2584:	bl	0 <coda_bin_cursor_read_double>
    2588:	mov	r3, r0
    258c:	b	2608 <read_double+0x1e4>
    2590:	ldr	r1, [fp, #-20]	; 0xffffffec
    2594:	ldr	r0, [fp, #-16]
    2598:	bl	0 <coda_mem_cursor_read_double>
    259c:	mov	r3, r0
    25a0:	b	2608 <read_double+0x1e4>
    25a4:	mov	r1, #0
    25a8:	mvn	r0, #10
    25ac:	bl	0 <coda_set_error>
    25b0:	mvn	r3, #0
    25b4:	b	2608 <read_double+0x1e4>
    25b8:	mov	r1, #0
    25bc:	mvn	r0, #12
    25c0:	bl	0 <coda_set_error>
    25c4:	mvn	r3, #0
    25c8:	b	2608 <read_double+0x1e4>
    25cc:	ldr	r1, [fp, #-20]	; 0xffffffec
    25d0:	ldr	r0, [fp, #-16]
    25d4:	bl	0 <coda_cdf_cursor_read_double>
    25d8:	mov	r3, r0
    25dc:	b	2608 <read_double+0x1e4>
    25e0:	ldr	r1, [fp, #-20]	; 0xffffffec
    25e4:	ldr	r0, [fp, #-16]
    25e8:	bl	0 <coda_netcdf_cursor_read_double>
    25ec:	mov	r3, r0
    25f0:	b	2608 <read_double+0x1e4>
    25f4:	ldr	r3, [pc, #24]	; 2614 <read_double+0x1f0>
    25f8:	mov	r2, #692	; 0x2b4
    25fc:	ldr	r1, [pc, #20]	; 2618 <read_double+0x1f4>
    2600:	ldr	r0, [pc, #20]	; 261c <read_double+0x1f8>
    2604:	bl	0 <__assert_fail>
    2608:	mov	r0, r3
    260c:	sub	sp, fp, #4
    2610:	pop	{fp, pc}
    2614:	.word	0x00000614
    2618:	.word	0x000000c8
    261c:	.word	0x0000008c

00002620 <read_char>:
    2620:	push	{fp, lr}
    2624:	add	fp, sp, #4
    2628:	sub	sp, sp, #8
    262c:	str	r0, [fp, #-8]
    2630:	str	r1, [fp, #-12]
    2634:	ldr	r3, [fp, #-8]
    2638:	ldr	r3, [r3, #4]
    263c:	sub	r3, r3, #1
    2640:	ldr	r2, [fp, #-8]
    2644:	lsl	r3, r3, #4
    2648:	add	r3, r2, r3
    264c:	ldr	r3, [r3, #8]
    2650:	ldr	r3, [r3]
    2654:	cmp	r3, #101	; 0x65
    2658:	beq	26dc <read_char+0xbc>
    265c:	cmp	r3, #101	; 0x65
    2660:	bhi	2680 <read_char+0x60>
    2664:	cmp	r3, #1
    2668:	beq	26b4 <read_char+0x94>
    266c:	cmp	r3, #1
    2670:	bcc	26a0 <read_char+0x80>
    2674:	cmp	r3, #100	; 0x64
    2678:	beq	26c8 <read_char+0xa8>
    267c:	b	271c <read_char+0xfc>
    2680:	cmp	r3, #103	; 0x67
    2684:	beq	26f0 <read_char+0xd0>
    2688:	cmp	r3, #103	; 0x67
    268c:	bcc	2718 <read_char+0xf8>
    2690:	cmp	r3, #104	; 0x68
    2694:	beq	2704 <read_char+0xe4>
    2698:	cmp	r3, #105	; 0x69
    269c:	b	2718 <read_char+0xf8>
    26a0:	ldr	r1, [fp, #-12]
    26a4:	ldr	r0, [fp, #-8]
    26a8:	bl	0 <coda_ascii_cursor_read_char>
    26ac:	mov	r3, r0
    26b0:	b	2730 <read_char+0x110>
    26b4:	ldr	r1, [fp, #-12]
    26b8:	ldr	r0, [fp, #-8]
    26bc:	bl	0 <coda_bin_cursor_read_char>
    26c0:	mov	r3, r0
    26c4:	b	2730 <read_char+0x110>
    26c8:	ldr	r1, [fp, #-12]
    26cc:	ldr	r0, [fp, #-8]
    26d0:	bl	0 <coda_mem_cursor_read_char>
    26d4:	mov	r3, r0
    26d8:	b	2730 <read_char+0x110>
    26dc:	mov	r1, #0
    26e0:	mvn	r0, #10
    26e4:	bl	0 <coda_set_error>
    26e8:	mvn	r3, #0
    26ec:	b	2730 <read_char+0x110>
    26f0:	ldr	r1, [fp, #-12]
    26f4:	ldr	r0, [fp, #-8]
    26f8:	bl	0 <coda_cdf_cursor_read_char>
    26fc:	mov	r3, r0
    2700:	b	2730 <read_char+0x110>
    2704:	ldr	r1, [fp, #-12]
    2708:	ldr	r0, [fp, #-8]
    270c:	bl	0 <coda_netcdf_cursor_read_char>
    2710:	mov	r3, r0
    2714:	b	2730 <read_char+0x110>
    2718:	nop			; (mov r0, r0)
    271c:	ldr	r3, [pc, #24]	; 273c <read_char+0x11c>
    2720:	ldr	r2, [pc, #24]	; 2740 <read_char+0x120>
    2724:	ldr	r1, [pc, #24]	; 2744 <read_char+0x124>
    2728:	ldr	r0, [pc, #24]	; 2748 <read_char+0x128>
    272c:	bl	0 <__assert_fail>
    2730:	mov	r0, r3
    2734:	sub	sp, fp, #4
    2738:	pop	{fp, pc}
    273c:	.word	0x00000620
    2740:	.word	0x000002d2
    2744:	.word	0x000000c8
    2748:	.word	0x0000008c

0000274c <read_string>:
    274c:	push	{fp, lr}
    2750:	add	fp, sp, #4
    2754:	sub	sp, sp, #16
    2758:	str	r0, [fp, #-8]
    275c:	str	r1, [fp, #-12]
    2760:	str	r2, [fp, #-16]
    2764:	ldr	r3, [fp, #-8]
    2768:	ldr	r3, [r3, #4]
    276c:	sub	r3, r3, #1
    2770:	ldr	r2, [fp, #-8]
    2774:	lsl	r3, r3, #4
    2778:	add	r3, r2, r3
    277c:	ldr	r3, [r3, #8]
    2780:	ldr	r3, [r3]
    2784:	cmp	r3, #101	; 0x65
    2788:	beq	2818 <read_string+0xcc>
    278c:	cmp	r3, #101	; 0x65
    2790:	bhi	27b0 <read_string+0x64>
    2794:	cmp	r3, #1
    2798:	beq	27e8 <read_string+0x9c>
    279c:	cmp	r3, #1
    27a0:	bcc	27d0 <read_string+0x84>
    27a4:	cmp	r3, #100	; 0x64
    27a8:	beq	2800 <read_string+0xb4>
    27ac:	b	2870 <read_string+0x124>
    27b0:	cmp	r3, #103	; 0x67
    27b4:	beq	2840 <read_string+0xf4>
    27b8:	cmp	r3, #103	; 0x67
    27bc:	bcc	282c <read_string+0xe0>
    27c0:	cmp	r3, #104	; 0x68
    27c4:	beq	2858 <read_string+0x10c>
    27c8:	cmp	r3, #105	; 0x69
    27cc:	b	2870 <read_string+0x124>
    27d0:	ldr	r2, [fp, #-16]
    27d4:	ldr	r1, [fp, #-12]
    27d8:	ldr	r0, [fp, #-8]
    27dc:	bl	0 <coda_ascii_cursor_read_string>
    27e0:	mov	r3, r0
    27e4:	b	2884 <read_string+0x138>
    27e8:	ldr	r2, [fp, #-16]
    27ec:	ldr	r1, [fp, #-12]
    27f0:	ldr	r0, [fp, #-8]
    27f4:	bl	0 <coda_bin_cursor_read_string>
    27f8:	mov	r3, r0
    27fc:	b	2884 <read_string+0x138>
    2800:	ldr	r2, [fp, #-16]
    2804:	ldr	r1, [fp, #-12]
    2808:	ldr	r0, [fp, #-8]
    280c:	bl	0 <coda_mem_cursor_read_string>
    2810:	mov	r3, r0
    2814:	b	2884 <read_string+0x138>
    2818:	mov	r1, #0
    281c:	mvn	r0, #10
    2820:	bl	0 <coda_set_error>
    2824:	mvn	r3, #0
    2828:	b	2884 <read_string+0x138>
    282c:	mov	r1, #0
    2830:	mvn	r0, #12
    2834:	bl	0 <coda_set_error>
    2838:	mvn	r3, #0
    283c:	b	2884 <read_string+0x138>
    2840:	ldr	r2, [fp, #-16]
    2844:	ldr	r1, [fp, #-12]
    2848:	ldr	r0, [fp, #-8]
    284c:	bl	0 <coda_cdf_cursor_read_string>
    2850:	mov	r3, r0
    2854:	b	2884 <read_string+0x138>
    2858:	ldr	r2, [fp, #-16]
    285c:	ldr	r1, [fp, #-12]
    2860:	ldr	r0, [fp, #-8]
    2864:	bl	0 <coda_netcdf_cursor_read_string>
    2868:	mov	r3, r0
    286c:	b	2884 <read_string+0x138>
    2870:	ldr	r3, [pc, #24]	; 2890 <read_string+0x144>
    2874:	ldr	r2, [pc, #24]	; 2894 <read_string+0x148>
    2878:	ldr	r1, [pc, #24]	; 2898 <read_string+0x14c>
    287c:	ldr	r0, [pc, #24]	; 289c <read_string+0x150>
    2880:	bl	0 <__assert_fail>
    2884:	mov	r0, r3
    2888:	sub	sp, fp, #4
    288c:	pop	{fp, pc}
    2890:	.word	0x0000062c
    2894:	.word	0x000002f6
    2898:	.word	0x000000c8
    289c:	.word	0x0000008c

000028a0 <read_int8_array>:
    28a0:	push	{fp, lr}
    28a4:	add	fp, sp, #4
    28a8:	sub	sp, sp, #16
    28ac:	str	r0, [fp, #-8]
    28b0:	str	r1, [fp, #-12]
    28b4:	str	r2, [fp, #-16]
    28b8:	ldr	r3, [fp, #-8]
    28bc:	ldr	r3, [r3, #4]
    28c0:	sub	r3, r3, #1
    28c4:	ldr	r2, [fp, #-8]
    28c8:	lsl	r3, r3, #4
    28cc:	add	r3, r2, r3
    28d0:	ldr	r3, [r3, #8]
    28d4:	ldr	r3, [r3]
    28d8:	cmp	r3, #101	; 0x65
    28dc:	beq	2970 <read_int8_array+0xd0>
    28e0:	cmp	r3, #101	; 0x65
    28e4:	bhi	2904 <read_int8_array+0x64>
    28e8:	cmp	r3, #1
    28ec:	beq	2940 <read_int8_array+0xa0>
    28f0:	cmp	r3, #1
    28f4:	bcc	2928 <read_int8_array+0x88>
    28f8:	cmp	r3, #100	; 0x64
    28fc:	beq	2958 <read_int8_array+0xb8>
    2900:	b	29f8 <read_int8_array+0x158>
    2904:	cmp	r3, #103	; 0x67
    2908:	beq	2998 <read_int8_array+0xf8>
    290c:	cmp	r3, #103	; 0x67
    2910:	bcc	2984 <read_int8_array+0xe4>
    2914:	cmp	r3, #104	; 0x68
    2918:	beq	29b8 <read_int8_array+0x118>
    291c:	cmp	r3, #105	; 0x69
    2920:	beq	29d8 <read_int8_array+0x138>
    2924:	b	29f8 <read_int8_array+0x158>
    2928:	ldr	r2, [fp, #-16]
    292c:	ldr	r1, [fp, #-12]
    2930:	ldr	r0, [fp, #-8]
    2934:	bl	0 <coda_ascii_cursor_read_int8_array>
    2938:	mov	r3, r0
    293c:	b	2a20 <read_int8_array+0x180>
    2940:	ldr	r2, [fp, #-16]
    2944:	ldr	r1, [fp, #-12]
    2948:	ldr	r0, [fp, #-8]
    294c:	bl	0 <coda_bin_cursor_read_int8_array>
    2950:	mov	r3, r0
    2954:	b	2a20 <read_int8_array+0x180>
    2958:	ldr	r2, [fp, #-16]
    295c:	ldr	r1, [fp, #-12]
    2960:	ldr	r0, [fp, #-8]
    2964:	bl	0 <coda_mem_cursor_read_int8_array>
    2968:	mov	r3, r0
    296c:	b	2a20 <read_int8_array+0x180>
    2970:	mov	r1, #0
    2974:	mvn	r0, #10
    2978:	bl	0 <coda_set_error>
    297c:	mvn	r3, #0
    2980:	b	2a20 <read_int8_array+0x180>
    2984:	mov	r1, #0
    2988:	mvn	r0, #12
    298c:	bl	0 <coda_set_error>
    2990:	mvn	r3, #0
    2994:	b	2a20 <read_int8_array+0x180>
    2998:	ldr	r1, [fp, #-12]
    299c:	ldr	r0, [fp, #-8]
    29a0:	bl	0 <coda_cdf_cursor_read_int8_array>
    29a4:	mov	r3, r0
    29a8:	cmp	r3, #0
    29ac:	beq	29ec <read_int8_array+0x14c>
    29b0:	mvn	r3, #0
    29b4:	b	2a20 <read_int8_array+0x180>
    29b8:	ldr	r1, [fp, #-12]
    29bc:	ldr	r0, [fp, #-8]
    29c0:	bl	0 <coda_netcdf_cursor_read_int8_array>
    29c4:	mov	r3, r0
    29c8:	cmp	r3, #0
    29cc:	beq	29f4 <read_int8_array+0x154>
    29d0:	mvn	r3, #0
    29d4:	b	2a20 <read_int8_array+0x180>
    29d8:	ldr	r3, [pc, #76]	; 2a2c <read_int8_array+0x18c>
    29dc:	ldr	r2, [pc, #76]	; 2a30 <read_int8_array+0x190>
    29e0:	ldr	r1, [pc, #76]	; 2a34 <read_int8_array+0x194>
    29e4:	ldr	r0, [pc, #76]	; 2a38 <read_int8_array+0x198>
    29e8:	bl	0 <__assert_fail>
    29ec:	nop			; (mov r0, r0)
    29f0:	b	29f8 <read_int8_array+0x158>
    29f4:	nop			; (mov r0, r0)
    29f8:	ldr	r3, [fp, #-16]
    29fc:	cmp	r3, #0
    2a00:	beq	2a1c <read_int8_array+0x17c>
    2a04:	mov	r2, #1
    2a08:	ldr	r1, [fp, #-12]
    2a0c:	ldr	r0, [fp, #-8]
    2a10:	bl	508 <transpose_array>
    2a14:	mov	r3, r0
    2a18:	b	2a20 <read_int8_array+0x180>
    2a1c:	mov	r3, #0
    2a20:	mov	r0, r3
    2a24:	sub	sp, fp, #4
    2a28:	pop	{fp, pc}
    2a2c:	.word	0x00000638
    2a30:	.word	0x00000327
    2a34:	.word	0x000000c8
    2a38:	.word	0x0000008c

00002a3c <read_uint8_array>:
    2a3c:	push	{fp, lr}
    2a40:	add	fp, sp, #4
    2a44:	sub	sp, sp, #16
    2a48:	str	r0, [fp, #-8]
    2a4c:	str	r1, [fp, #-12]
    2a50:	str	r2, [fp, #-16]
    2a54:	ldr	r3, [fp, #-8]
    2a58:	ldr	r3, [r3, #4]
    2a5c:	sub	r3, r3, #1
    2a60:	ldr	r2, [fp, #-8]
    2a64:	lsl	r3, r3, #4
    2a68:	add	r3, r2, r3
    2a6c:	ldr	r3, [r3, #8]
    2a70:	ldr	r3, [r3]
    2a74:	cmp	r3, #101	; 0x65
    2a78:	beq	2b04 <read_uint8_array+0xc8>
    2a7c:	cmp	r3, #101	; 0x65
    2a80:	bhi	2aa0 <read_uint8_array+0x64>
    2a84:	cmp	r3, #1
    2a88:	beq	2ad4 <read_uint8_array+0x98>
    2a8c:	cmp	r3, #1
    2a90:	bcc	2abc <read_uint8_array+0x80>
    2a94:	cmp	r3, #100	; 0x64
    2a98:	beq	2aec <read_uint8_array+0xb0>
    2a9c:	b	2b64 <read_uint8_array+0x128>
    2aa0:	cmp	r3, #103	; 0x67
    2aa4:	beq	2b2c <read_uint8_array+0xf0>
    2aa8:	cmp	r3, #103	; 0x67
    2aac:	bcc	2b18 <read_uint8_array+0xdc>
    2ab0:	cmp	r3, #105	; 0x69
    2ab4:	bhi	2b64 <read_uint8_array+0x128>
    2ab8:	b	2b4c <read_uint8_array+0x110>
    2abc:	ldr	r2, [fp, #-16]
    2ac0:	ldr	r1, [fp, #-12]
    2ac4:	ldr	r0, [fp, #-8]
    2ac8:	bl	0 <coda_ascii_cursor_read_uint8_array>
    2acc:	mov	r3, r0
    2ad0:	b	2b8c <read_uint8_array+0x150>
    2ad4:	ldr	r2, [fp, #-16]
    2ad8:	ldr	r1, [fp, #-12]
    2adc:	ldr	r0, [fp, #-8]
    2ae0:	bl	0 <coda_bin_cursor_read_uint8_array>
    2ae4:	mov	r3, r0
    2ae8:	b	2b8c <read_uint8_array+0x150>
    2aec:	ldr	r2, [fp, #-16]
    2af0:	ldr	r1, [fp, #-12]
    2af4:	ldr	r0, [fp, #-8]
    2af8:	bl	0 <coda_mem_cursor_read_uint8_array>
    2afc:	mov	r3, r0
    2b00:	b	2b8c <read_uint8_array+0x150>
    2b04:	mov	r1, #0
    2b08:	mvn	r0, #10
    2b0c:	bl	0 <coda_set_error>
    2b10:	mvn	r3, #0
    2b14:	b	2b8c <read_uint8_array+0x150>
    2b18:	mov	r1, #0
    2b1c:	mvn	r0, #12
    2b20:	bl	0 <coda_set_error>
    2b24:	mvn	r3, #0
    2b28:	b	2b8c <read_uint8_array+0x150>
    2b2c:	ldr	r1, [fp, #-12]
    2b30:	ldr	r0, [fp, #-8]
    2b34:	bl	0 <coda_cdf_cursor_read_uint8_array>
    2b38:	mov	r3, r0
    2b3c:	cmp	r3, #0
    2b40:	beq	2b60 <read_uint8_array+0x124>
    2b44:	mvn	r3, #0
    2b48:	b	2b8c <read_uint8_array+0x150>
    2b4c:	ldr	r3, [pc, #68]	; 2b98 <read_uint8_array+0x15c>
    2b50:	ldr	r2, [pc, #68]	; 2b9c <read_uint8_array+0x160>
    2b54:	ldr	r1, [pc, #68]	; 2ba0 <read_uint8_array+0x164>
    2b58:	ldr	r0, [pc, #68]	; 2ba4 <read_uint8_array+0x168>
    2b5c:	bl	0 <__assert_fail>
    2b60:	nop			; (mov r0, r0)
    2b64:	ldr	r3, [fp, #-16]
    2b68:	cmp	r3, #0
    2b6c:	beq	2b88 <read_uint8_array+0x14c>
    2b70:	mov	r2, #1
    2b74:	ldr	r1, [fp, #-12]
    2b78:	ldr	r0, [fp, #-8]
    2b7c:	bl	508 <transpose_array>
    2b80:	mov	r3, r0
    2b84:	b	2b8c <read_uint8_array+0x150>
    2b88:	mov	r3, #0
    2b8c:	mov	r0, r3
    2b90:	sub	sp, fp, #4
    2b94:	pop	{fp, pc}
    2b98:	.word	0x00000648
    2b9c:	.word	0x0000035b
    2ba0:	.word	0x000000c8
    2ba4:	.word	0x0000008c

00002ba8 <read_int16_array>:
    2ba8:	push	{fp, lr}
    2bac:	add	fp, sp, #4
    2bb0:	sub	sp, sp, #16
    2bb4:	str	r0, [fp, #-8]
    2bb8:	str	r1, [fp, #-12]
    2bbc:	str	r2, [fp, #-16]
    2bc0:	ldr	r3, [fp, #-8]
    2bc4:	ldr	r3, [r3, #4]
    2bc8:	sub	r3, r3, #1
    2bcc:	ldr	r2, [fp, #-8]
    2bd0:	lsl	r3, r3, #4
    2bd4:	add	r3, r2, r3
    2bd8:	ldr	r3, [r3, #8]
    2bdc:	ldr	r3, [r3]
    2be0:	cmp	r3, #101	; 0x65
    2be4:	beq	2c78 <read_int16_array+0xd0>
    2be8:	cmp	r3, #101	; 0x65
    2bec:	bhi	2c0c <read_int16_array+0x64>
    2bf0:	cmp	r3, #1
    2bf4:	beq	2c48 <read_int16_array+0xa0>
    2bf8:	cmp	r3, #1
    2bfc:	bcc	2c30 <read_int16_array+0x88>
    2c00:	cmp	r3, #100	; 0x64
    2c04:	beq	2c60 <read_int16_array+0xb8>
    2c08:	b	2d00 <read_int16_array+0x158>
    2c0c:	cmp	r3, #103	; 0x67
    2c10:	beq	2ca0 <read_int16_array+0xf8>
    2c14:	cmp	r3, #103	; 0x67
    2c18:	bcc	2c8c <read_int16_array+0xe4>
    2c1c:	cmp	r3, #104	; 0x68
    2c20:	beq	2cc0 <read_int16_array+0x118>
    2c24:	cmp	r3, #105	; 0x69
    2c28:	beq	2ce0 <read_int16_array+0x138>
    2c2c:	b	2d00 <read_int16_array+0x158>
    2c30:	ldr	r2, [fp, #-16]
    2c34:	ldr	r1, [fp, #-12]
    2c38:	ldr	r0, [fp, #-8]
    2c3c:	bl	0 <coda_ascii_cursor_read_int16_array>
    2c40:	mov	r3, r0
    2c44:	b	2d28 <read_int16_array+0x180>
    2c48:	ldr	r2, [fp, #-16]
    2c4c:	ldr	r1, [fp, #-12]
    2c50:	ldr	r0, [fp, #-8]
    2c54:	bl	0 <coda_bin_cursor_read_int16_array>
    2c58:	mov	r3, r0
    2c5c:	b	2d28 <read_int16_array+0x180>
    2c60:	ldr	r2, [fp, #-16]
    2c64:	ldr	r1, [fp, #-12]
    2c68:	ldr	r0, [fp, #-8]
    2c6c:	bl	0 <coda_mem_cursor_read_int16_array>
    2c70:	mov	r3, r0
    2c74:	b	2d28 <read_int16_array+0x180>
    2c78:	mov	r1, #0
    2c7c:	mvn	r0, #10
    2c80:	bl	0 <coda_set_error>
    2c84:	mvn	r3, #0
    2c88:	b	2d28 <read_int16_array+0x180>
    2c8c:	mov	r1, #0
    2c90:	mvn	r0, #12
    2c94:	bl	0 <coda_set_error>
    2c98:	mvn	r3, #0
    2c9c:	b	2d28 <read_int16_array+0x180>
    2ca0:	ldr	r1, [fp, #-12]
    2ca4:	ldr	r0, [fp, #-8]
    2ca8:	bl	0 <coda_cdf_cursor_read_int16_array>
    2cac:	mov	r3, r0
    2cb0:	cmp	r3, #0
    2cb4:	beq	2cf4 <read_int16_array+0x14c>
    2cb8:	mvn	r3, #0
    2cbc:	b	2d28 <read_int16_array+0x180>
    2cc0:	ldr	r1, [fp, #-12]
    2cc4:	ldr	r0, [fp, #-8]
    2cc8:	bl	0 <coda_netcdf_cursor_read_int16_array>
    2ccc:	mov	r3, r0
    2cd0:	cmp	r3, #0
    2cd4:	beq	2cfc <read_int16_array+0x154>
    2cd8:	mvn	r3, #0
    2cdc:	b	2d28 <read_int16_array+0x180>
    2ce0:	ldr	r3, [pc, #76]	; 2d34 <read_int16_array+0x18c>
    2ce4:	mov	r2, #916	; 0x394
    2ce8:	ldr	r1, [pc, #72]	; 2d38 <read_int16_array+0x190>
    2cec:	ldr	r0, [pc, #72]	; 2d3c <read_int16_array+0x194>
    2cf0:	bl	0 <__assert_fail>
    2cf4:	nop			; (mov r0, r0)
    2cf8:	b	2d00 <read_int16_array+0x158>
    2cfc:	nop			; (mov r0, r0)
    2d00:	ldr	r3, [fp, #-16]
    2d04:	cmp	r3, #0
    2d08:	beq	2d24 <read_int16_array+0x17c>
    2d0c:	mov	r2, #2
    2d10:	ldr	r1, [fp, #-12]
    2d14:	ldr	r0, [fp, #-8]
    2d18:	bl	508 <transpose_array>
    2d1c:	mov	r3, r0
    2d20:	b	2d28 <read_int16_array+0x180>
    2d24:	mov	r3, #0
    2d28:	mov	r0, r3
    2d2c:	sub	sp, fp, #4
    2d30:	pop	{fp, pc}
    2d34:	.word	0x0000065c
    2d38:	.word	0x000000c8
    2d3c:	.word	0x0000008c

00002d40 <read_uint16_array>:
    2d40:	push	{fp, lr}
    2d44:	add	fp, sp, #4
    2d48:	sub	sp, sp, #16
    2d4c:	str	r0, [fp, #-8]
    2d50:	str	r1, [fp, #-12]
    2d54:	str	r2, [fp, #-16]
    2d58:	ldr	r3, [fp, #-8]
    2d5c:	ldr	r3, [r3, #4]
    2d60:	sub	r3, r3, #1
    2d64:	ldr	r2, [fp, #-8]
    2d68:	lsl	r3, r3, #4
    2d6c:	add	r3, r2, r3
    2d70:	ldr	r3, [r3, #8]
    2d74:	ldr	r3, [r3]
    2d78:	cmp	r3, #101	; 0x65
    2d7c:	beq	2e08 <read_uint16_array+0xc8>
    2d80:	cmp	r3, #101	; 0x65
    2d84:	bhi	2da4 <read_uint16_array+0x64>
    2d88:	cmp	r3, #1
    2d8c:	beq	2dd8 <read_uint16_array+0x98>
    2d90:	cmp	r3, #1
    2d94:	bcc	2dc0 <read_uint16_array+0x80>
    2d98:	cmp	r3, #100	; 0x64
    2d9c:	beq	2df0 <read_uint16_array+0xb0>
    2da0:	b	2e68 <read_uint16_array+0x128>
    2da4:	cmp	r3, #103	; 0x67
    2da8:	beq	2e30 <read_uint16_array+0xf0>
    2dac:	cmp	r3, #103	; 0x67
    2db0:	bcc	2e1c <read_uint16_array+0xdc>
    2db4:	cmp	r3, #105	; 0x69
    2db8:	bhi	2e68 <read_uint16_array+0x128>
    2dbc:	b	2e50 <read_uint16_array+0x110>
    2dc0:	ldr	r2, [fp, #-16]
    2dc4:	ldr	r1, [fp, #-12]
    2dc8:	ldr	r0, [fp, #-8]
    2dcc:	bl	0 <coda_ascii_cursor_read_uint16_array>
    2dd0:	mov	r3, r0
    2dd4:	b	2e90 <read_uint16_array+0x150>
    2dd8:	ldr	r2, [fp, #-16]
    2ddc:	ldr	r1, [fp, #-12]
    2de0:	ldr	r0, [fp, #-8]
    2de4:	bl	0 <coda_bin_cursor_read_uint16_array>
    2de8:	mov	r3, r0
    2dec:	b	2e90 <read_uint16_array+0x150>
    2df0:	ldr	r2, [fp, #-16]
    2df4:	ldr	r1, [fp, #-12]
    2df8:	ldr	r0, [fp, #-8]
    2dfc:	bl	0 <coda_mem_cursor_read_uint16_array>
    2e00:	mov	r3, r0
    2e04:	b	2e90 <read_uint16_array+0x150>
    2e08:	mov	r1, #0
    2e0c:	mvn	r0, #10
    2e10:	bl	0 <coda_set_error>
    2e14:	mvn	r3, #0
    2e18:	b	2e90 <read_uint16_array+0x150>
    2e1c:	mov	r1, #0
    2e20:	mvn	r0, #12
    2e24:	bl	0 <coda_set_error>
    2e28:	mvn	r3, #0
    2e2c:	b	2e90 <read_uint16_array+0x150>
    2e30:	ldr	r1, [fp, #-12]
    2e34:	ldr	r0, [fp, #-8]
    2e38:	bl	0 <coda_cdf_cursor_read_uint16_array>
    2e3c:	mov	r3, r0
    2e40:	cmp	r3, #0
    2e44:	beq	2e64 <read_uint16_array+0x124>
    2e48:	mvn	r3, #0
    2e4c:	b	2e90 <read_uint16_array+0x150>
    2e50:	ldr	r3, [pc, #68]	; 2e9c <read_uint16_array+0x15c>
    2e54:	mov	r2, #968	; 0x3c8
    2e58:	ldr	r1, [pc, #64]	; 2ea0 <read_uint16_array+0x160>
    2e5c:	ldr	r0, [pc, #64]	; 2ea4 <read_uint16_array+0x164>
    2e60:	bl	0 <__assert_fail>
    2e64:	nop			; (mov r0, r0)
    2e68:	ldr	r3, [fp, #-16]
    2e6c:	cmp	r3, #0
    2e70:	beq	2e8c <read_uint16_array+0x14c>
    2e74:	mov	r2, #2
    2e78:	ldr	r1, [fp, #-12]
    2e7c:	ldr	r0, [fp, #-8]
    2e80:	bl	508 <transpose_array>
    2e84:	mov	r3, r0
    2e88:	b	2e90 <read_uint16_array+0x150>
    2e8c:	mov	r3, #0
    2e90:	mov	r0, r3
    2e94:	sub	sp, fp, #4
    2e98:	pop	{fp, pc}
    2e9c:	.word	0x00000670
    2ea0:	.word	0x000000c8
    2ea4:	.word	0x0000008c

00002ea8 <read_int32_array>:
    2ea8:	push	{fp, lr}
    2eac:	add	fp, sp, #4
    2eb0:	sub	sp, sp, #16
    2eb4:	str	r0, [fp, #-8]
    2eb8:	str	r1, [fp, #-12]
    2ebc:	str	r2, [fp, #-16]
    2ec0:	ldr	r3, [fp, #-8]
    2ec4:	ldr	r3, [r3, #4]
    2ec8:	sub	r3, r3, #1
    2ecc:	ldr	r2, [fp, #-8]
    2ed0:	lsl	r3, r3, #4
    2ed4:	add	r3, r2, r3
    2ed8:	ldr	r3, [r3, #8]
    2edc:	ldr	r3, [r3]
    2ee0:	cmp	r3, #101	; 0x65
    2ee4:	beq	2f78 <read_int32_array+0xd0>
    2ee8:	cmp	r3, #101	; 0x65
    2eec:	bhi	2f0c <read_int32_array+0x64>
    2ef0:	cmp	r3, #1
    2ef4:	beq	2f48 <read_int32_array+0xa0>
    2ef8:	cmp	r3, #1
    2efc:	bcc	2f30 <read_int32_array+0x88>
    2f00:	cmp	r3, #100	; 0x64
    2f04:	beq	2f60 <read_int32_array+0xb8>
    2f08:	b	3000 <read_int32_array+0x158>
    2f0c:	cmp	r3, #103	; 0x67
    2f10:	beq	2fa0 <read_int32_array+0xf8>
    2f14:	cmp	r3, #103	; 0x67
    2f18:	bcc	2f8c <read_int32_array+0xe4>
    2f1c:	cmp	r3, #104	; 0x68
    2f20:	beq	2fc0 <read_int32_array+0x118>
    2f24:	cmp	r3, #105	; 0x69
    2f28:	beq	2fe0 <read_int32_array+0x138>
    2f2c:	b	3000 <read_int32_array+0x158>
    2f30:	ldr	r2, [fp, #-16]
    2f34:	ldr	r1, [fp, #-12]
    2f38:	ldr	r0, [fp, #-8]
    2f3c:	bl	0 <coda_ascii_cursor_read_int32_array>
    2f40:	mov	r3, r0
    2f44:	b	3028 <read_int32_array+0x180>
    2f48:	ldr	r2, [fp, #-16]
    2f4c:	ldr	r1, [fp, #-12]
    2f50:	ldr	r0, [fp, #-8]
    2f54:	bl	0 <coda_bin_cursor_read_int32_array>
    2f58:	mov	r3, r0
    2f5c:	b	3028 <read_int32_array+0x180>
    2f60:	ldr	r2, [fp, #-16]
    2f64:	ldr	r1, [fp, #-12]
    2f68:	ldr	r0, [fp, #-8]
    2f6c:	bl	0 <coda_mem_cursor_read_int32_array>
    2f70:	mov	r3, r0
    2f74:	b	3028 <read_int32_array+0x180>
    2f78:	mov	r1, #0
    2f7c:	mvn	r0, #10
    2f80:	bl	0 <coda_set_error>
    2f84:	mvn	r3, #0
    2f88:	b	3028 <read_int32_array+0x180>
    2f8c:	mov	r1, #0
    2f90:	mvn	r0, #12
    2f94:	bl	0 <coda_set_error>
    2f98:	mvn	r3, #0
    2f9c:	b	3028 <read_int32_array+0x180>
    2fa0:	ldr	r1, [fp, #-12]
    2fa4:	ldr	r0, [fp, #-8]
    2fa8:	bl	0 <coda_cdf_cursor_read_int32_array>
    2fac:	mov	r3, r0
    2fb0:	cmp	r3, #0
    2fb4:	beq	2ff4 <read_int32_array+0x14c>
    2fb8:	mvn	r3, #0
    2fbc:	b	3028 <read_int32_array+0x180>
    2fc0:	ldr	r1, [fp, #-12]
    2fc4:	ldr	r0, [fp, #-8]
    2fc8:	bl	0 <coda_netcdf_cursor_read_int32_array>
    2fcc:	mov	r3, r0
    2fd0:	cmp	r3, #0
    2fd4:	beq	2ffc <read_int32_array+0x154>
    2fd8:	mvn	r3, #0
    2fdc:	b	3028 <read_int32_array+0x180>
    2fe0:	ldr	r3, [pc, #76]	; 3034 <read_int32_array+0x18c>
    2fe4:	ldr	r2, [pc, #76]	; 3038 <read_int32_array+0x190>
    2fe8:	ldr	r1, [pc, #76]	; 303c <read_int32_array+0x194>
    2fec:	ldr	r0, [pc, #76]	; 3040 <read_int32_array+0x198>
    2ff0:	bl	0 <__assert_fail>
    2ff4:	nop			; (mov r0, r0)
    2ff8:	b	3000 <read_int32_array+0x158>
    2ffc:	nop			; (mov r0, r0)
    3000:	ldr	r3, [fp, #-16]
    3004:	cmp	r3, #0
    3008:	beq	3024 <read_int32_array+0x17c>
    300c:	mov	r2, #4
    3010:	ldr	r1, [fp, #-12]
    3014:	ldr	r0, [fp, #-8]
    3018:	bl	508 <transpose_array>
    301c:	mov	r3, r0
    3020:	b	3028 <read_int32_array+0x180>
    3024:	mov	r3, #0
    3028:	mov	r0, r3
    302c:	sub	sp, fp, #4
    3030:	pop	{fp, pc}
    3034:	.word	0x00000684
    3038:	.word	0x00000401
    303c:	.word	0x000000c8
    3040:	.word	0x0000008c

00003044 <read_uint32_array>:
    3044:	push	{fp, lr}
    3048:	add	fp, sp, #4
    304c:	sub	sp, sp, #16
    3050:	str	r0, [fp, #-8]
    3054:	str	r1, [fp, #-12]
    3058:	str	r2, [fp, #-16]
    305c:	ldr	r3, [fp, #-8]
    3060:	ldr	r3, [r3, #4]
    3064:	sub	r3, r3, #1
    3068:	ldr	r2, [fp, #-8]
    306c:	lsl	r3, r3, #4
    3070:	add	r3, r2, r3
    3074:	ldr	r3, [r3, #8]
    3078:	ldr	r3, [r3]
    307c:	cmp	r3, #101	; 0x65
    3080:	beq	310c <read_uint32_array+0xc8>
    3084:	cmp	r3, #101	; 0x65
    3088:	bhi	30a8 <read_uint32_array+0x64>
    308c:	cmp	r3, #1
    3090:	beq	30dc <read_uint32_array+0x98>
    3094:	cmp	r3, #1
    3098:	bcc	30c4 <read_uint32_array+0x80>
    309c:	cmp	r3, #100	; 0x64
    30a0:	beq	30f4 <read_uint32_array+0xb0>
    30a4:	b	316c <read_uint32_array+0x128>
    30a8:	cmp	r3, #103	; 0x67
    30ac:	beq	3134 <read_uint32_array+0xf0>
    30b0:	cmp	r3, #103	; 0x67
    30b4:	bcc	3120 <read_uint32_array+0xdc>
    30b8:	cmp	r3, #105	; 0x69
    30bc:	bhi	316c <read_uint32_array+0x128>
    30c0:	b	3154 <read_uint32_array+0x110>
    30c4:	ldr	r2, [fp, #-16]
    30c8:	ldr	r1, [fp, #-12]
    30cc:	ldr	r0, [fp, #-8]
    30d0:	bl	0 <coda_ascii_cursor_read_uint32_array>
    30d4:	mov	r3, r0
    30d8:	b	3194 <read_uint32_array+0x150>
    30dc:	ldr	r2, [fp, #-16]
    30e0:	ldr	r1, [fp, #-12]
    30e4:	ldr	r0, [fp, #-8]
    30e8:	bl	0 <coda_bin_cursor_read_uint32_array>
    30ec:	mov	r3, r0
    30f0:	b	3194 <read_uint32_array+0x150>
    30f4:	ldr	r2, [fp, #-16]
    30f8:	ldr	r1, [fp, #-12]
    30fc:	ldr	r0, [fp, #-8]
    3100:	bl	0 <coda_mem_cursor_read_uint32_array>
    3104:	mov	r3, r0
    3108:	b	3194 <read_uint32_array+0x150>
    310c:	mov	r1, #0
    3110:	mvn	r0, #10
    3114:	bl	0 <coda_set_error>
    3118:	mvn	r3, #0
    311c:	b	3194 <read_uint32_array+0x150>
    3120:	mov	r1, #0
    3124:	mvn	r0, #12
    3128:	bl	0 <coda_set_error>
    312c:	mvn	r3, #0
    3130:	b	3194 <read_uint32_array+0x150>
    3134:	ldr	r1, [fp, #-12]
    3138:	ldr	r0, [fp, #-8]
    313c:	bl	0 <coda_cdf_cursor_read_uint32_array>
    3140:	mov	r3, r0
    3144:	cmp	r3, #0
    3148:	beq	3168 <read_uint32_array+0x124>
    314c:	mvn	r3, #0
    3150:	b	3194 <read_uint32_array+0x150>
    3154:	ldr	r3, [pc, #68]	; 31a0 <read_uint32_array+0x15c>
    3158:	ldr	r2, [pc, #68]	; 31a4 <read_uint32_array+0x160>
    315c:	ldr	r1, [pc, #68]	; 31a8 <read_uint32_array+0x164>
    3160:	ldr	r0, [pc, #68]	; 31ac <read_uint32_array+0x168>
    3164:	bl	0 <__assert_fail>
    3168:	nop			; (mov r0, r0)
    316c:	ldr	r3, [fp, #-16]
    3170:	cmp	r3, #0
    3174:	beq	3190 <read_uint32_array+0x14c>
    3178:	mov	r2, #4
    317c:	ldr	r1, [fp, #-12]
    3180:	ldr	r0, [fp, #-8]
    3184:	bl	508 <transpose_array>
    3188:	mov	r3, r0
    318c:	b	3194 <read_uint32_array+0x150>
    3190:	mov	r3, #0
    3194:	mov	r0, r3
    3198:	sub	sp, fp, #4
    319c:	pop	{fp, pc}
    31a0:	.word	0x00000698
    31a4:	.word	0x00000435
    31a8:	.word	0x000000c8
    31ac:	.word	0x0000008c

000031b0 <read_int64_array>:
    31b0:	push	{fp, lr}
    31b4:	add	fp, sp, #4
    31b8:	sub	sp, sp, #16
    31bc:	str	r0, [fp, #-8]
    31c0:	str	r1, [fp, #-12]
    31c4:	str	r2, [fp, #-16]
    31c8:	ldr	r3, [fp, #-8]
    31cc:	ldr	r3, [r3, #4]
    31d0:	sub	r3, r3, #1
    31d4:	ldr	r2, [fp, #-8]
    31d8:	lsl	r3, r3, #4
    31dc:	add	r3, r2, r3
    31e0:	ldr	r3, [r3, #8]
    31e4:	ldr	r3, [r3]
    31e8:	cmp	r3, #101	; 0x65
    31ec:	beq	3278 <read_int64_array+0xc8>
    31f0:	cmp	r3, #101	; 0x65
    31f4:	bhi	3214 <read_int64_array+0x64>
    31f8:	cmp	r3, #1
    31fc:	beq	3248 <read_int64_array+0x98>
    3200:	cmp	r3, #1
    3204:	bcc	3230 <read_int64_array+0x80>
    3208:	cmp	r3, #100	; 0x64
    320c:	beq	3260 <read_int64_array+0xb0>
    3210:	b	32d8 <read_int64_array+0x128>
    3214:	cmp	r3, #103	; 0x67
    3218:	beq	32a0 <read_int64_array+0xf0>
    321c:	cmp	r3, #103	; 0x67
    3220:	bcc	328c <read_int64_array+0xdc>
    3224:	cmp	r3, #105	; 0x69
    3228:	bhi	32d8 <read_int64_array+0x128>
    322c:	b	32c0 <read_int64_array+0x110>
    3230:	ldr	r2, [fp, #-16]
    3234:	ldr	r1, [fp, #-12]
    3238:	ldr	r0, [fp, #-8]
    323c:	bl	0 <coda_ascii_cursor_read_int64_array>
    3240:	mov	r3, r0
    3244:	b	3300 <read_int64_array+0x150>
    3248:	ldr	r2, [fp, #-16]
    324c:	ldr	r1, [fp, #-12]
    3250:	ldr	r0, [fp, #-8]
    3254:	bl	0 <coda_bin_cursor_read_int64_array>
    3258:	mov	r3, r0
    325c:	b	3300 <read_int64_array+0x150>
    3260:	ldr	r2, [fp, #-16]
    3264:	ldr	r1, [fp, #-12]
    3268:	ldr	r0, [fp, #-8]
    326c:	bl	0 <coda_mem_cursor_read_int64_array>
    3270:	mov	r3, r0
    3274:	b	3300 <read_int64_array+0x150>
    3278:	mov	r1, #0
    327c:	mvn	r0, #10
    3280:	bl	0 <coda_set_error>
    3284:	mvn	r3, #0
    3288:	b	3300 <read_int64_array+0x150>
    328c:	mov	r1, #0
    3290:	mvn	r0, #12
    3294:	bl	0 <coda_set_error>
    3298:	mvn	r3, #0
    329c:	b	3300 <read_int64_array+0x150>
    32a0:	ldr	r1, [fp, #-12]
    32a4:	ldr	r0, [fp, #-8]
    32a8:	bl	0 <coda_cdf_cursor_read_int64_array>
    32ac:	mov	r3, r0
    32b0:	cmp	r3, #0
    32b4:	beq	32d4 <read_int64_array+0x124>
    32b8:	mvn	r3, #0
    32bc:	b	3300 <read_int64_array+0x150>
    32c0:	ldr	r3, [pc, #68]	; 330c <read_int64_array+0x15c>
    32c4:	ldr	r2, [pc, #68]	; 3310 <read_int64_array+0x160>
    32c8:	ldr	r1, [pc, #68]	; 3314 <read_int64_array+0x164>
    32cc:	ldr	r0, [pc, #68]	; 3318 <read_int64_array+0x168>
    32d0:	bl	0 <__assert_fail>
    32d4:	nop			; (mov r0, r0)
    32d8:	ldr	r3, [fp, #-16]
    32dc:	cmp	r3, #0
    32e0:	beq	32fc <read_int64_array+0x14c>
    32e4:	mov	r2, #8
    32e8:	ldr	r1, [fp, #-12]
    32ec:	ldr	r0, [fp, #-8]
    32f0:	bl	508 <transpose_array>
    32f4:	mov	r3, r0
    32f8:	b	3300 <read_int64_array+0x150>
    32fc:	mov	r3, #0
    3300:	mov	r0, r3
    3304:	sub	sp, fp, #4
    3308:	pop	{fp, pc}
    330c:	.word	0x000006ac
    3310:	.word	0x00000469
    3314:	.word	0x000000c8
    3318:	.word	0x0000008c

0000331c <read_uint64_array>:
    331c:	push	{fp, lr}
    3320:	add	fp, sp, #4
    3324:	sub	sp, sp, #16
    3328:	str	r0, [fp, #-8]
    332c:	str	r1, [fp, #-12]
    3330:	str	r2, [fp, #-16]
    3334:	ldr	r3, [fp, #-8]
    3338:	ldr	r3, [r3, #4]
    333c:	sub	r3, r3, #1
    3340:	ldr	r2, [fp, #-8]
    3344:	lsl	r3, r3, #4
    3348:	add	r3, r2, r3
    334c:	ldr	r3, [r3, #8]
    3350:	ldr	r3, [r3]
    3354:	cmp	r3, #101	; 0x65
    3358:	beq	33dc <read_uint64_array+0xc0>
    335c:	cmp	r3, #101	; 0x65
    3360:	bhi	3380 <read_uint64_array+0x64>
    3364:	cmp	r3, #1
    3368:	beq	33ac <read_uint64_array+0x90>
    336c:	cmp	r3, #1
    3370:	bcc	3394 <read_uint64_array+0x78>
    3374:	cmp	r3, #100	; 0x64
    3378:	beq	33c4 <read_uint64_array+0xa8>
    337c:	b	3418 <read_uint64_array+0xfc>
    3380:	cmp	r3, #102	; 0x66
    3384:	beq	33f0 <read_uint64_array+0xd4>
    3388:	cmp	r3, #105	; 0x69
    338c:	bhi	3418 <read_uint64_array+0xfc>
    3390:	b	3404 <read_uint64_array+0xe8>
    3394:	ldr	r2, [fp, #-16]
    3398:	ldr	r1, [fp, #-12]
    339c:	ldr	r0, [fp, #-8]
    33a0:	bl	0 <coda_ascii_cursor_read_uint64_array>
    33a4:	mov	r3, r0
    33a8:	b	3440 <read_uint64_array+0x124>
    33ac:	ldr	r2, [fp, #-16]
    33b0:	ldr	r1, [fp, #-12]
    33b4:	ldr	r0, [fp, #-8]
    33b8:	bl	0 <coda_bin_cursor_read_uint64_array>
    33bc:	mov	r3, r0
    33c0:	b	3440 <read_uint64_array+0x124>
    33c4:	ldr	r2, [fp, #-16]
    33c8:	ldr	r1, [fp, #-12]
    33cc:	ldr	r0, [fp, #-8]
    33d0:	bl	0 <coda_mem_cursor_read_uint64_array>
    33d4:	mov	r3, r0
    33d8:	b	3440 <read_uint64_array+0x124>
    33dc:	mov	r1, #0
    33e0:	mvn	r0, #10
    33e4:	bl	0 <coda_set_error>
    33e8:	mvn	r3, #0
    33ec:	b	3440 <read_uint64_array+0x124>
    33f0:	mov	r1, #0
    33f4:	mvn	r0, #12
    33f8:	bl	0 <coda_set_error>
    33fc:	mvn	r3, #0
    3400:	b	3440 <read_uint64_array+0x124>
    3404:	ldr	r3, [pc, #64]	; 344c <read_uint64_array+0x130>
    3408:	ldr	r2, [pc, #64]	; 3450 <read_uint64_array+0x134>
    340c:	ldr	r1, [pc, #64]	; 3454 <read_uint64_array+0x138>
    3410:	ldr	r0, [pc, #64]	; 3458 <read_uint64_array+0x13c>
    3414:	bl	0 <__assert_fail>
    3418:	ldr	r3, [fp, #-16]
    341c:	cmp	r3, #0
    3420:	beq	343c <read_uint64_array+0x120>
    3424:	mov	r2, #8
    3428:	ldr	r1, [fp, #-12]
    342c:	ldr	r0, [fp, #-8]
    3430:	bl	508 <transpose_array>
    3434:	mov	r3, r0
    3438:	b	3440 <read_uint64_array+0x124>
    343c:	mov	r3, #0
    3440:	mov	r0, r3
    3444:	sub	sp, fp, #4
    3448:	pop	{fp, pc}
    344c:	.word	0x000006c0
    3450:	.word	0x00000498
    3454:	.word	0x000000c8
    3458:	.word	0x0000008c

0000345c <read_float_array>:
    345c:	push	{fp, lr}
    3460:	add	fp, sp, #4
    3464:	sub	sp, sp, #16
    3468:	str	r0, [fp, #-8]
    346c:	str	r1, [fp, #-12]
    3470:	str	r2, [fp, #-16]
    3474:	ldr	r3, [fp, #-8]
    3478:	ldr	r3, [r3, #4]
    347c:	sub	r3, r3, #1
    3480:	ldr	r2, [fp, #-8]
    3484:	lsl	r3, r3, #4
    3488:	add	r3, r2, r3
    348c:	ldr	r3, [r3, #8]
    3490:	ldr	r3, [r3]
    3494:	cmp	r3, #101	; 0x65
    3498:	beq	352c <read_float_array+0xd0>
    349c:	cmp	r3, #101	; 0x65
    34a0:	bhi	34c0 <read_float_array+0x64>
    34a4:	cmp	r3, #1
    34a8:	beq	34fc <read_float_array+0xa0>
    34ac:	cmp	r3, #1
    34b0:	bcc	34e4 <read_float_array+0x88>
    34b4:	cmp	r3, #100	; 0x64
    34b8:	beq	3514 <read_float_array+0xb8>
    34bc:	b	35c8 <read_float_array+0x16c>
    34c0:	cmp	r3, #103	; 0x67
    34c4:	beq	3554 <read_float_array+0xf8>
    34c8:	cmp	r3, #103	; 0x67
    34cc:	bcc	3540 <read_float_array+0xe4>
    34d0:	cmp	r3, #104	; 0x68
    34d4:	beq	3574 <read_float_array+0x118>
    34d8:	cmp	r3, #105	; 0x69
    34dc:	beq	3594 <read_float_array+0x138>
    34e0:	b	35c8 <read_float_array+0x16c>
    34e4:	ldr	r2, [fp, #-16]
    34e8:	ldr	r1, [fp, #-12]
    34ec:	ldr	r0, [fp, #-8]
    34f0:	bl	0 <coda_ascii_cursor_read_float_array>
    34f4:	mov	r3, r0
    34f8:	b	35f0 <read_float_array+0x194>
    34fc:	ldr	r2, [fp, #-16]
    3500:	ldr	r1, [fp, #-12]
    3504:	ldr	r0, [fp, #-8]
    3508:	bl	0 <coda_bin_cursor_read_float_array>
    350c:	mov	r3, r0
    3510:	b	35f0 <read_float_array+0x194>
    3514:	ldr	r2, [fp, #-16]
    3518:	ldr	r1, [fp, #-12]
    351c:	ldr	r0, [fp, #-8]
    3520:	bl	0 <coda_mem_cursor_read_float_array>
    3524:	mov	r3, r0
    3528:	b	35f0 <read_float_array+0x194>
    352c:	mov	r1, #0
    3530:	mvn	r0, #10
    3534:	bl	0 <coda_set_error>
    3538:	mvn	r3, #0
    353c:	b	35f0 <read_float_array+0x194>
    3540:	mov	r1, #0
    3544:	mvn	r0, #12
    3548:	bl	0 <coda_set_error>
    354c:	mvn	r3, #0
    3550:	b	35f0 <read_float_array+0x194>
    3554:	ldr	r1, [fp, #-12]
    3558:	ldr	r0, [fp, #-8]
    355c:	bl	0 <coda_cdf_cursor_read_float_array>
    3560:	mov	r3, r0
    3564:	cmp	r3, #0
    3568:	beq	35b4 <read_float_array+0x158>
    356c:	mvn	r3, #0
    3570:	b	35f0 <read_float_array+0x194>
    3574:	ldr	r1, [fp, #-12]
    3578:	ldr	r0, [fp, #-8]
    357c:	bl	0 <coda_netcdf_cursor_read_float_array>
    3580:	mov	r3, r0
    3584:	cmp	r3, #0
    3588:	beq	35bc <read_float_array+0x160>
    358c:	mvn	r3, #0
    3590:	b	35f0 <read_float_array+0x194>
    3594:	ldr	r1, [fp, #-12]
    3598:	ldr	r0, [fp, #-8]
    359c:	bl	0 <coda_grib_cursor_read_float_array>
    35a0:	mov	r3, r0
    35a4:	cmp	r3, #0
    35a8:	beq	35c4 <read_float_array+0x168>
    35ac:	mvn	r3, #0
    35b0:	b	35f0 <read_float_array+0x194>
    35b4:	nop			; (mov r0, r0)
    35b8:	b	35c8 <read_float_array+0x16c>
    35bc:	nop			; (mov r0, r0)
    35c0:	b	35c8 <read_float_array+0x16c>
    35c4:	nop			; (mov r0, r0)
    35c8:	ldr	r3, [fp, #-16]
    35cc:	cmp	r3, #0
    35d0:	beq	35ec <read_float_array+0x190>
    35d4:	mov	r2, #4
    35d8:	ldr	r1, [fp, #-12]
    35dc:	ldr	r0, [fp, #-8]
    35e0:	bl	508 <transpose_array>
    35e4:	mov	r3, r0
    35e8:	b	35f0 <read_float_array+0x194>
    35ec:	mov	r3, #0
    35f0:	mov	r0, r3
    35f4:	sub	sp, fp, #4
    35f8:	pop	{fp, pc}

000035fc <read_double_array>:
    35fc:	push	{fp, lr}
    3600:	add	fp, sp, #4
    3604:	sub	sp, sp, #32
    3608:	str	r0, [fp, #-16]
    360c:	str	r1, [fp, #-20]	; 0xffffffec
    3610:	str	r2, [fp, #-24]	; 0xffffffe8
    3614:	ldr	r3, [fp, #-16]
    3618:	ldr	r3, [r3, #4]
    361c:	sub	r3, r3, #1
    3620:	ldr	r2, [fp, #-16]
    3624:	lsl	r3, r3, #4
    3628:	add	r3, r2, r3
    362c:	ldr	r3, [r3, #8]
    3630:	ldr	r3, [r3]
    3634:	cmp	r3, #99	; 0x63
    3638:	bhi	365c <read_double_array+0x60>
    363c:	ldr	r3, [fp, #-16]
    3640:	ldr	r3, [r3, #4]
    3644:	sub	r3, r3, #1
    3648:	ldr	r2, [fp, #-16]
    364c:	lsl	r3, r3, #4
    3650:	add	r3, r2, r3
    3654:	ldr	r3, [r3, #8]
    3658:	b	367c <read_double_array+0x80>
    365c:	ldr	r3, [fp, #-16]
    3660:	ldr	r3, [r3, #4]
    3664:	sub	r3, r3, #1
    3668:	ldr	r2, [fp, #-16]
    366c:	lsl	r3, r3, #4
    3670:	add	r3, r2, r3
    3674:	ldr	r3, [r3, #8]
    3678:	ldr	r3, [r3, #4]
    367c:	str	r3, [fp, #-8]
    3680:	ldr	r3, [fp, #-8]
    3684:	ldr	r3, [r3, #40]	; 0x28
    3688:	ldr	r3, [r3, #8]
    368c:	cmp	r3, #6
    3690:	bne	36b8 <read_double_array+0xbc>
    3694:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3698:	str	r3, [sp]
    369c:	mov	r3, #8
    36a0:	ldr	r2, [fp, #-20]	; 0xffffffec
    36a4:	ldr	r1, [pc, #384]	; 382c <read_double_array+0x230>
    36a8:	ldr	r0, [fp, #-16]
    36ac:	bl	0 <read_array>
    36b0:	mov	r3, r0
    36b4:	b	3820 <read_double_array+0x224>
    36b8:	ldr	r3, [fp, #-16]
    36bc:	ldr	r3, [r3, #4]
    36c0:	sub	r3, r3, #1
    36c4:	ldr	r2, [fp, #-16]
    36c8:	lsl	r3, r3, #4
    36cc:	add	r3, r2, r3
    36d0:	ldr	r3, [r3, #8]
    36d4:	ldr	r3, [r3]
    36d8:	cmp	r3, #101	; 0x65
    36dc:	beq	3770 <read_double_array+0x174>
    36e0:	cmp	r3, #101	; 0x65
    36e4:	bhi	3704 <read_double_array+0x108>
    36e8:	cmp	r3, #1
    36ec:	beq	3740 <read_double_array+0x144>
    36f0:	cmp	r3, #1
    36f4:	bcc	3728 <read_double_array+0x12c>
    36f8:	cmp	r3, #100	; 0x64
    36fc:	beq	3758 <read_double_array+0x15c>
    3700:	b	37f8 <read_double_array+0x1fc>
    3704:	cmp	r3, #103	; 0x67
    3708:	beq	3798 <read_double_array+0x19c>
    370c:	cmp	r3, #103	; 0x67
    3710:	bcc	3784 <read_double_array+0x188>
    3714:	cmp	r3, #104	; 0x68
    3718:	beq	37b8 <read_double_array+0x1bc>
    371c:	cmp	r3, #105	; 0x69
    3720:	beq	37d8 <read_double_array+0x1dc>
    3724:	b	37f8 <read_double_array+0x1fc>
    3728:	ldr	r2, [fp, #-24]	; 0xffffffe8
    372c:	ldr	r1, [fp, #-20]	; 0xffffffec
    3730:	ldr	r0, [fp, #-16]
    3734:	bl	0 <coda_ascii_cursor_read_double_array>
    3738:	mov	r3, r0
    373c:	b	3820 <read_double_array+0x224>
    3740:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3744:	ldr	r1, [fp, #-20]	; 0xffffffec
    3748:	ldr	r0, [fp, #-16]
    374c:	bl	0 <coda_bin_cursor_read_double_array>
    3750:	mov	r3, r0
    3754:	b	3820 <read_double_array+0x224>
    3758:	ldr	r2, [fp, #-24]	; 0xffffffe8
    375c:	ldr	r1, [fp, #-20]	; 0xffffffec
    3760:	ldr	r0, [fp, #-16]
    3764:	bl	0 <coda_mem_cursor_read_double_array>
    3768:	mov	r3, r0
    376c:	b	3820 <read_double_array+0x224>
    3770:	mov	r1, #0
    3774:	mvn	r0, #10
    3778:	bl	0 <coda_set_error>
    377c:	mvn	r3, #0
    3780:	b	3820 <read_double_array+0x224>
    3784:	mov	r1, #0
    3788:	mvn	r0, #12
    378c:	bl	0 <coda_set_error>
    3790:	mvn	r3, #0
    3794:	b	3820 <read_double_array+0x224>
    3798:	ldr	r1, [fp, #-20]	; 0xffffffec
    379c:	ldr	r0, [fp, #-16]
    37a0:	bl	0 <coda_cdf_cursor_read_double_array>
    37a4:	mov	r3, r0
    37a8:	cmp	r3, #0
    37ac:	beq	37ec <read_double_array+0x1f0>
    37b0:	mvn	r3, #0
    37b4:	b	3820 <read_double_array+0x224>
    37b8:	ldr	r1, [fp, #-20]	; 0xffffffec
    37bc:	ldr	r0, [fp, #-16]
    37c0:	bl	0 <coda_netcdf_cursor_read_double_array>
    37c4:	mov	r3, r0
    37c8:	cmp	r3, #0
    37cc:	beq	37f4 <read_double_array+0x1f8>
    37d0:	mvn	r3, #0
    37d4:	b	3820 <read_double_array+0x224>
    37d8:	ldr	r3, [pc, #80]	; 3830 <read_double_array+0x234>
    37dc:	ldr	r2, [pc, #80]	; 3834 <read_double_array+0x238>
    37e0:	ldr	r1, [pc, #80]	; 3838 <read_double_array+0x23c>
    37e4:	ldr	r0, [pc, #80]	; 383c <read_double_array+0x240>
    37e8:	bl	0 <__assert_fail>
    37ec:	nop			; (mov r0, r0)
    37f0:	b	37f8 <read_double_array+0x1fc>
    37f4:	nop			; (mov r0, r0)
    37f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    37fc:	cmp	r3, #0
    3800:	beq	381c <read_double_array+0x220>
    3804:	mov	r2, #8
    3808:	ldr	r1, [fp, #-20]	; 0xffffffec
    380c:	ldr	r0, [fp, #-16]
    3810:	bl	508 <transpose_array>
    3814:	mov	r3, r0
    3818:	b	3820 <read_double_array+0x224>
    381c:	mov	r3, #0
    3820:	mov	r0, r3
    3824:	sub	sp, fp, #4
    3828:	pop	{fp, pc}
    382c:	.word	0x00000000
    3830:	.word	0x000006d4
    3834:	.word	0x00000515
    3838:	.word	0x000000c8
    383c:	.word	0x0000008c

00003840 <read_char_array>:
    3840:	push	{fp, lr}
    3844:	add	fp, sp, #4
    3848:	sub	sp, sp, #16
    384c:	str	r0, [fp, #-8]
    3850:	str	r1, [fp, #-12]
    3854:	str	r2, [fp, #-16]
    3858:	ldr	r3, [fp, #-8]
    385c:	ldr	r3, [r3, #4]
    3860:	sub	r3, r3, #1
    3864:	ldr	r2, [fp, #-8]
    3868:	lsl	r3, r3, #4
    386c:	add	r3, r2, r3
    3870:	ldr	r3, [r3, #8]
    3874:	ldr	r3, [r3]
    3878:	cmp	r3, #101	; 0x65
    387c:	beq	3910 <read_char_array+0xd0>
    3880:	cmp	r3, #101	; 0x65
    3884:	bhi	38a4 <read_char_array+0x64>
    3888:	cmp	r3, #1
    388c:	beq	38e0 <read_char_array+0xa0>
    3890:	cmp	r3, #1
    3894:	bcc	38c8 <read_char_array+0x88>
    3898:	cmp	r3, #100	; 0x64
    389c:	beq	38f8 <read_char_array+0xb8>
    38a0:	b	3984 <read_char_array+0x144>
    38a4:	cmp	r3, #103	; 0x67
    38a8:	beq	3924 <read_char_array+0xe4>
    38ac:	cmp	r3, #103	; 0x67
    38b0:	bcc	3964 <read_char_array+0x124>
    38b4:	cmp	r3, #104	; 0x68
    38b8:	beq	3944 <read_char_array+0x104>
    38bc:	cmp	r3, #105	; 0x69
    38c0:	beq	3964 <read_char_array+0x124>
    38c4:	b	3984 <read_char_array+0x144>
    38c8:	ldr	r2, [fp, #-16]
    38cc:	ldr	r1, [fp, #-12]
    38d0:	ldr	r0, [fp, #-8]
    38d4:	bl	0 <coda_ascii_cursor_read_char_array>
    38d8:	mov	r3, r0
    38dc:	b	39ac <read_char_array+0x16c>
    38e0:	ldr	r2, [fp, #-16]
    38e4:	ldr	r1, [fp, #-12]
    38e8:	ldr	r0, [fp, #-8]
    38ec:	bl	0 <coda_bin_cursor_read_char_array>
    38f0:	mov	r3, r0
    38f4:	b	39ac <read_char_array+0x16c>
    38f8:	ldr	r2, [fp, #-16]
    38fc:	ldr	r1, [fp, #-12]
    3900:	ldr	r0, [fp, #-8]
    3904:	bl	0 <coda_mem_cursor_read_char_array>
    3908:	mov	r3, r0
    390c:	b	39ac <read_char_array+0x16c>
    3910:	mov	r1, #0
    3914:	mvn	r0, #10
    3918:	bl	0 <coda_set_error>
    391c:	mvn	r3, #0
    3920:	b	39ac <read_char_array+0x16c>
    3924:	ldr	r1, [fp, #-12]
    3928:	ldr	r0, [fp, #-8]
    392c:	bl	0 <coda_cdf_cursor_read_char_array>
    3930:	mov	r3, r0
    3934:	cmp	r3, #0
    3938:	beq	3978 <read_char_array+0x138>
    393c:	mvn	r3, #0
    3940:	b	39ac <read_char_array+0x16c>
    3944:	ldr	r1, [fp, #-12]
    3948:	ldr	r0, [fp, #-8]
    394c:	bl	0 <coda_netcdf_cursor_read_char_array>
    3950:	mov	r3, r0
    3954:	cmp	r3, #0
    3958:	beq	3980 <read_char_array+0x140>
    395c:	mvn	r3, #0
    3960:	b	39ac <read_char_array+0x16c>
    3964:	ldr	r3, [pc, #76]	; 39b8 <read_char_array+0x178>
    3968:	ldr	r2, [pc, #76]	; 39bc <read_char_array+0x17c>
    396c:	ldr	r1, [pc, #76]	; 39c0 <read_char_array+0x180>
    3970:	ldr	r0, [pc, #76]	; 39c4 <read_char_array+0x184>
    3974:	bl	0 <__assert_fail>
    3978:	nop			; (mov r0, r0)
    397c:	b	3984 <read_char_array+0x144>
    3980:	nop			; (mov r0, r0)
    3984:	ldr	r3, [fp, #-16]
    3988:	cmp	r3, #0
    398c:	beq	39a8 <read_char_array+0x168>
    3990:	mov	r2, #1
    3994:	ldr	r1, [fp, #-12]
    3998:	ldr	r0, [fp, #-8]
    399c:	bl	508 <transpose_array>
    39a0:	mov	r3, r0
    39a4:	b	39ac <read_char_array+0x16c>
    39a8:	mov	r3, #0
    39ac:	mov	r0, r3
    39b0:	sub	sp, fp, #4
    39b4:	pop	{fp, pc}
    39b8:	.word	0x000006e8
    39bc:	.word	0x00000544
    39c0:	.word	0x000000c8
    39c4:	.word	0x0000008c

000039c8 <read_int8_partial_array>:
    39c8:	push	{fp, lr}
    39cc:	add	fp, sp, #4
    39d0:	sub	sp, sp, #16
    39d4:	str	r0, [fp, #-8]
    39d8:	str	r1, [fp, #-12]
    39dc:	str	r2, [fp, #-16]
    39e0:	str	r3, [fp, #-20]	; 0xffffffec
    39e4:	ldr	r3, [fp, #-8]
    39e8:	ldr	r3, [r3, #4]
    39ec:	sub	r3, r3, #1
    39f0:	ldr	r2, [fp, #-8]
    39f4:	lsl	r3, r3, #4
    39f8:	add	r3, r2, r3
    39fc:	ldr	r3, [r3, #8]
    3a00:	ldr	r3, [r3]
    3a04:	cmp	r3, #101	; 0x65
    3a08:	beq	3aa4 <read_int8_partial_array+0xdc>
    3a0c:	cmp	r3, #101	; 0x65
    3a10:	bhi	3a30 <read_int8_partial_array+0x68>
    3a14:	cmp	r3, #1
    3a18:	beq	3a6c <read_int8_partial_array+0xa4>
    3a1c:	cmp	r3, #1
    3a20:	bcc	3a50 <read_int8_partial_array+0x88>
    3a24:	cmp	r3, #100	; 0x64
    3a28:	beq	3a88 <read_int8_partial_array+0xc0>
    3a2c:	b	3b04 <read_int8_partial_array+0x13c>
    3a30:	cmp	r3, #103	; 0x67
    3a34:	beq	3acc <read_int8_partial_array+0x104>
    3a38:	cmp	r3, #103	; 0x67
    3a3c:	bcc	3ab8 <read_int8_partial_array+0xf0>
    3a40:	cmp	r3, #104	; 0x68
    3a44:	beq	3ae8 <read_int8_partial_array+0x120>
    3a48:	cmp	r3, #105	; 0x69
    3a4c:	b	3b04 <read_int8_partial_array+0x13c>
    3a50:	ldr	r3, [fp, #-20]	; 0xffffffec
    3a54:	ldr	r2, [fp, #-16]
    3a58:	ldr	r1, [fp, #-12]
    3a5c:	ldr	r0, [fp, #-8]
    3a60:	bl	0 <coda_ascii_cursor_read_int8_partial_array>
    3a64:	mov	r3, r0
    3a68:	b	3b18 <read_int8_partial_array+0x150>
    3a6c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3a70:	ldr	r2, [fp, #-16]
    3a74:	ldr	r1, [fp, #-12]
    3a78:	ldr	r0, [fp, #-8]
    3a7c:	bl	0 <coda_bin_cursor_read_int8_partial_array>
    3a80:	mov	r3, r0
    3a84:	b	3b18 <read_int8_partial_array+0x150>
    3a88:	ldr	r3, [fp, #-20]	; 0xffffffec
    3a8c:	ldr	r2, [fp, #-16]
    3a90:	ldr	r1, [fp, #-12]
    3a94:	ldr	r0, [fp, #-8]
    3a98:	bl	0 <coda_mem_cursor_read_int8_partial_array>
    3a9c:	mov	r3, r0
    3aa0:	b	3b18 <read_int8_partial_array+0x150>
    3aa4:	mov	r1, #0
    3aa8:	mvn	r0, #10
    3aac:	bl	0 <coda_set_error>
    3ab0:	mvn	r3, #0
    3ab4:	b	3b18 <read_int8_partial_array+0x150>
    3ab8:	mov	r1, #0
    3abc:	mvn	r0, #12
    3ac0:	bl	0 <coda_set_error>
    3ac4:	mvn	r3, #0
    3ac8:	b	3b18 <read_int8_partial_array+0x150>
    3acc:	ldr	r3, [fp, #-20]	; 0xffffffec
    3ad0:	ldr	r2, [fp, #-16]
    3ad4:	ldr	r1, [fp, #-12]
    3ad8:	ldr	r0, [fp, #-8]
    3adc:	bl	0 <coda_cdf_cursor_read_int8_partial_array>
    3ae0:	mov	r3, r0
    3ae4:	b	3b18 <read_int8_partial_array+0x150>
    3ae8:	ldr	r3, [fp, #-20]	; 0xffffffec
    3aec:	ldr	r2, [fp, #-16]
    3af0:	ldr	r1, [fp, #-12]
    3af4:	ldr	r0, [fp, #-8]
    3af8:	bl	0 <coda_netcdf_cursor_read_int8_partial_array>
    3afc:	mov	r3, r0
    3b00:	b	3b18 <read_int8_partial_array+0x150>
    3b04:	ldr	r3, [pc, #24]	; 3b24 <read_int8_partial_array+0x15c>
    3b08:	mov	r2, #1392	; 0x570
    3b0c:	ldr	r1, [pc, #20]	; 3b28 <read_int8_partial_array+0x160>
    3b10:	ldr	r0, [pc, #20]	; 3b2c <read_int8_partial_array+0x164>
    3b14:	bl	0 <__assert_fail>
    3b18:	mov	r0, r3
    3b1c:	sub	sp, fp, #4
    3b20:	pop	{fp, pc}
    3b24:	.word	0x000006f8
    3b28:	.word	0x000000c8
    3b2c:	.word	0x0000008c

00003b30 <read_uint8_partial_array>:
    3b30:	push	{fp, lr}
    3b34:	add	fp, sp, #4
    3b38:	sub	sp, sp, #16
    3b3c:	str	r0, [fp, #-8]
    3b40:	str	r1, [fp, #-12]
    3b44:	str	r2, [fp, #-16]
    3b48:	str	r3, [fp, #-20]	; 0xffffffec
    3b4c:	ldr	r3, [fp, #-8]
    3b50:	ldr	r3, [r3, #4]
    3b54:	sub	r3, r3, #1
    3b58:	ldr	r2, [fp, #-8]
    3b5c:	lsl	r3, r3, #4
    3b60:	add	r3, r2, r3
    3b64:	ldr	r3, [r3, #8]
    3b68:	ldr	r3, [r3]
    3b6c:	cmp	r3, #101	; 0x65
    3b70:	beq	3c08 <read_uint8_partial_array+0xd8>
    3b74:	cmp	r3, #101	; 0x65
    3b78:	bhi	3b98 <read_uint8_partial_array+0x68>
    3b7c:	cmp	r3, #1
    3b80:	beq	3bd0 <read_uint8_partial_array+0xa0>
    3b84:	cmp	r3, #1
    3b88:	bcc	3bb4 <read_uint8_partial_array+0x84>
    3b8c:	cmp	r3, #100	; 0x64
    3b90:	beq	3bec <read_uint8_partial_array+0xbc>
    3b94:	b	3c4c <read_uint8_partial_array+0x11c>
    3b98:	cmp	r3, #103	; 0x67
    3b9c:	beq	3c30 <read_uint8_partial_array+0x100>
    3ba0:	cmp	r3, #103	; 0x67
    3ba4:	bcc	3c1c <read_uint8_partial_array+0xec>
    3ba8:	cmp	r3, #105	; 0x69
    3bac:	bhi	3c4c <read_uint8_partial_array+0x11c>
    3bb0:	b	3c4c <read_uint8_partial_array+0x11c>
    3bb4:	ldr	r3, [fp, #-20]	; 0xffffffec
    3bb8:	ldr	r2, [fp, #-16]
    3bbc:	ldr	r1, [fp, #-12]
    3bc0:	ldr	r0, [fp, #-8]
    3bc4:	bl	0 <coda_ascii_cursor_read_uint8_partial_array>
    3bc8:	mov	r3, r0
    3bcc:	b	3c60 <read_uint8_partial_array+0x130>
    3bd0:	ldr	r3, [fp, #-20]	; 0xffffffec
    3bd4:	ldr	r2, [fp, #-16]
    3bd8:	ldr	r1, [fp, #-12]
    3bdc:	ldr	r0, [fp, #-8]
    3be0:	bl	0 <coda_bin_cursor_read_uint8_partial_array>
    3be4:	mov	r3, r0
    3be8:	b	3c60 <read_uint8_partial_array+0x130>
    3bec:	ldr	r3, [fp, #-20]	; 0xffffffec
    3bf0:	ldr	r2, [fp, #-16]
    3bf4:	ldr	r1, [fp, #-12]
    3bf8:	ldr	r0, [fp, #-8]
    3bfc:	bl	0 <coda_mem_cursor_read_uint8_partial_array>
    3c00:	mov	r3, r0
    3c04:	b	3c60 <read_uint8_partial_array+0x130>
    3c08:	mov	r1, #0
    3c0c:	mvn	r0, #10
    3c10:	bl	0 <coda_set_error>
    3c14:	mvn	r3, #0
    3c18:	b	3c60 <read_uint8_partial_array+0x130>
    3c1c:	mov	r1, #0
    3c20:	mvn	r0, #12
    3c24:	bl	0 <coda_set_error>
    3c28:	mvn	r3, #0
    3c2c:	b	3c60 <read_uint8_partial_array+0x130>
    3c30:	ldr	r3, [fp, #-20]	; 0xffffffec
    3c34:	ldr	r2, [fp, #-16]
    3c38:	ldr	r1, [fp, #-12]
    3c3c:	ldr	r0, [fp, #-8]
    3c40:	bl	0 <coda_cdf_cursor_read_uint8_partial_array>
    3c44:	mov	r3, r0
    3c48:	b	3c60 <read_uint8_partial_array+0x130>
    3c4c:	ldr	r3, [pc, #24]	; 3c6c <read_uint8_partial_array+0x13c>
    3c50:	ldr	r2, [pc, #24]	; 3c70 <read_uint8_partial_array+0x140>
    3c54:	ldr	r1, [pc, #24]	; 3c74 <read_uint8_partial_array+0x144>
    3c58:	ldr	r0, [pc, #24]	; 3c78 <read_uint8_partial_array+0x148>
    3c5c:	bl	0 <__assert_fail>
    3c60:	mov	r0, r3
    3c64:	sub	sp, fp, #4
    3c68:	pop	{fp, pc}
    3c6c:	.word	0x00000710
    3c70:	.word	0x00000593
    3c74:	.word	0x000000c8
    3c78:	.word	0x0000008c

00003c7c <read_int16_partial_array>:
    3c7c:	push	{fp, lr}
    3c80:	add	fp, sp, #4
    3c84:	sub	sp, sp, #16
    3c88:	str	r0, [fp, #-8]
    3c8c:	str	r1, [fp, #-12]
    3c90:	str	r2, [fp, #-16]
    3c94:	str	r3, [fp, #-20]	; 0xffffffec
    3c98:	ldr	r3, [fp, #-8]
    3c9c:	ldr	r3, [r3, #4]
    3ca0:	sub	r3, r3, #1
    3ca4:	ldr	r2, [fp, #-8]
    3ca8:	lsl	r3, r3, #4
    3cac:	add	r3, r2, r3
    3cb0:	ldr	r3, [r3, #8]
    3cb4:	ldr	r3, [r3]
    3cb8:	cmp	r3, #101	; 0x65
    3cbc:	beq	3d58 <read_int16_partial_array+0xdc>
    3cc0:	cmp	r3, #101	; 0x65
    3cc4:	bhi	3ce4 <read_int16_partial_array+0x68>
    3cc8:	cmp	r3, #1
    3ccc:	beq	3d20 <read_int16_partial_array+0xa4>
    3cd0:	cmp	r3, #1
    3cd4:	bcc	3d04 <read_int16_partial_array+0x88>
    3cd8:	cmp	r3, #100	; 0x64
    3cdc:	beq	3d3c <read_int16_partial_array+0xc0>
    3ce0:	b	3db8 <read_int16_partial_array+0x13c>
    3ce4:	cmp	r3, #103	; 0x67
    3ce8:	beq	3d80 <read_int16_partial_array+0x104>
    3cec:	cmp	r3, #103	; 0x67
    3cf0:	bcc	3d6c <read_int16_partial_array+0xf0>
    3cf4:	cmp	r3, #104	; 0x68
    3cf8:	beq	3d9c <read_int16_partial_array+0x120>
    3cfc:	cmp	r3, #105	; 0x69
    3d00:	b	3db8 <read_int16_partial_array+0x13c>
    3d04:	ldr	r3, [fp, #-20]	; 0xffffffec
    3d08:	ldr	r2, [fp, #-16]
    3d0c:	ldr	r1, [fp, #-12]
    3d10:	ldr	r0, [fp, #-8]
    3d14:	bl	0 <coda_ascii_cursor_read_int16_partial_array>
    3d18:	mov	r3, r0
    3d1c:	b	3dcc <read_int16_partial_array+0x150>
    3d20:	ldr	r3, [fp, #-20]	; 0xffffffec
    3d24:	ldr	r2, [fp, #-16]
    3d28:	ldr	r1, [fp, #-12]
    3d2c:	ldr	r0, [fp, #-8]
    3d30:	bl	0 <coda_bin_cursor_read_int16_partial_array>
    3d34:	mov	r3, r0
    3d38:	b	3dcc <read_int16_partial_array+0x150>
    3d3c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3d40:	ldr	r2, [fp, #-16]
    3d44:	ldr	r1, [fp, #-12]
    3d48:	ldr	r0, [fp, #-8]
    3d4c:	bl	0 <coda_mem_cursor_read_int16_partial_array>
    3d50:	mov	r3, r0
    3d54:	b	3dcc <read_int16_partial_array+0x150>
    3d58:	mov	r1, #0
    3d5c:	mvn	r0, #10
    3d60:	bl	0 <coda_set_error>
    3d64:	mvn	r3, #0
    3d68:	b	3dcc <read_int16_partial_array+0x150>
    3d6c:	mov	r1, #0
    3d70:	mvn	r0, #12
    3d74:	bl	0 <coda_set_error>
    3d78:	mvn	r3, #0
    3d7c:	b	3dcc <read_int16_partial_array+0x150>
    3d80:	ldr	r3, [fp, #-20]	; 0xffffffec
    3d84:	ldr	r2, [fp, #-16]
    3d88:	ldr	r1, [fp, #-12]
    3d8c:	ldr	r0, [fp, #-8]
    3d90:	bl	0 <coda_cdf_cursor_read_int16_partial_array>
    3d94:	mov	r3, r0
    3d98:	b	3dcc <read_int16_partial_array+0x150>
    3d9c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3da0:	ldr	r2, [fp, #-16]
    3da4:	ldr	r1, [fp, #-12]
    3da8:	ldr	r0, [fp, #-8]
    3dac:	bl	0 <coda_netcdf_cursor_read_int16_partial_array>
    3db0:	mov	r3, r0
    3db4:	b	3dcc <read_int16_partial_array+0x150>
    3db8:	ldr	r3, [pc, #24]	; 3dd8 <read_int16_partial_array+0x15c>
    3dbc:	ldr	r2, [pc, #24]	; 3ddc <read_int16_partial_array+0x160>
    3dc0:	ldr	r1, [pc, #24]	; 3de0 <read_int16_partial_array+0x164>
    3dc4:	ldr	r0, [pc, #24]	; 3de4 <read_int16_partial_array+0x168>
    3dc8:	bl	0 <__assert_fail>
    3dcc:	mov	r0, r3
    3dd0:	sub	sp, fp, #4
    3dd4:	pop	{fp, pc}
    3dd8:	.word	0x0000072c
    3ddc:	.word	0x000005b7
    3de0:	.word	0x000000c8
    3de4:	.word	0x0000008c

00003de8 <read_uint16_partial_array>:
    3de8:	push	{fp, lr}
    3dec:	add	fp, sp, #4
    3df0:	sub	sp, sp, #16
    3df4:	str	r0, [fp, #-8]
    3df8:	str	r1, [fp, #-12]
    3dfc:	str	r2, [fp, #-16]
    3e00:	str	r3, [fp, #-20]	; 0xffffffec
    3e04:	ldr	r3, [fp, #-8]
    3e08:	ldr	r3, [r3, #4]
    3e0c:	sub	r3, r3, #1
    3e10:	ldr	r2, [fp, #-8]
    3e14:	lsl	r3, r3, #4
    3e18:	add	r3, r2, r3
    3e1c:	ldr	r3, [r3, #8]
    3e20:	ldr	r3, [r3]
    3e24:	cmp	r3, #101	; 0x65
    3e28:	beq	3ec0 <read_uint16_partial_array+0xd8>
    3e2c:	cmp	r3, #101	; 0x65
    3e30:	bhi	3e50 <read_uint16_partial_array+0x68>
    3e34:	cmp	r3, #1
    3e38:	beq	3e88 <read_uint16_partial_array+0xa0>
    3e3c:	cmp	r3, #1
    3e40:	bcc	3e6c <read_uint16_partial_array+0x84>
    3e44:	cmp	r3, #100	; 0x64
    3e48:	beq	3ea4 <read_uint16_partial_array+0xbc>
    3e4c:	b	3f04 <read_uint16_partial_array+0x11c>
    3e50:	cmp	r3, #103	; 0x67
    3e54:	beq	3ee8 <read_uint16_partial_array+0x100>
    3e58:	cmp	r3, #103	; 0x67
    3e5c:	bcc	3ed4 <read_uint16_partial_array+0xec>
    3e60:	cmp	r3, #105	; 0x69
    3e64:	bhi	3f04 <read_uint16_partial_array+0x11c>
    3e68:	b	3f04 <read_uint16_partial_array+0x11c>
    3e6c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3e70:	ldr	r2, [fp, #-16]
    3e74:	ldr	r1, [fp, #-12]
    3e78:	ldr	r0, [fp, #-8]
    3e7c:	bl	0 <coda_ascii_cursor_read_uint16_partial_array>
    3e80:	mov	r3, r0
    3e84:	b	3f18 <read_uint16_partial_array+0x130>
    3e88:	ldr	r3, [fp, #-20]	; 0xffffffec
    3e8c:	ldr	r2, [fp, #-16]
    3e90:	ldr	r1, [fp, #-12]
    3e94:	ldr	r0, [fp, #-8]
    3e98:	bl	0 <coda_bin_cursor_read_uint16_partial_array>
    3e9c:	mov	r3, r0
    3ea0:	b	3f18 <read_uint16_partial_array+0x130>
    3ea4:	ldr	r3, [fp, #-20]	; 0xffffffec
    3ea8:	ldr	r2, [fp, #-16]
    3eac:	ldr	r1, [fp, #-12]
    3eb0:	ldr	r0, [fp, #-8]
    3eb4:	bl	0 <coda_mem_cursor_read_uint16_partial_array>
    3eb8:	mov	r3, r0
    3ebc:	b	3f18 <read_uint16_partial_array+0x130>
    3ec0:	mov	r1, #0
    3ec4:	mvn	r0, #10
    3ec8:	bl	0 <coda_set_error>
    3ecc:	mvn	r3, #0
    3ed0:	b	3f18 <read_uint16_partial_array+0x130>
    3ed4:	mov	r1, #0
    3ed8:	mvn	r0, #12
    3edc:	bl	0 <coda_set_error>
    3ee0:	mvn	r3, #0
    3ee4:	b	3f18 <read_uint16_partial_array+0x130>
    3ee8:	ldr	r3, [fp, #-20]	; 0xffffffec
    3eec:	ldr	r2, [fp, #-16]
    3ef0:	ldr	r1, [fp, #-12]
    3ef4:	ldr	r0, [fp, #-8]
    3ef8:	bl	0 <coda_cdf_cursor_read_uint16_partial_array>
    3efc:	mov	r3, r0
    3f00:	b	3f18 <read_uint16_partial_array+0x130>
    3f04:	ldr	r3, [pc, #24]	; 3f24 <read_uint16_partial_array+0x13c>
    3f08:	ldr	r2, [pc, #24]	; 3f28 <read_uint16_partial_array+0x140>
    3f0c:	ldr	r1, [pc, #24]	; 3f2c <read_uint16_partial_array+0x144>
    3f10:	ldr	r0, [pc, #24]	; 3f30 <read_uint16_partial_array+0x148>
    3f14:	bl	0 <__assert_fail>
    3f18:	mov	r0, r3
    3f1c:	sub	sp, fp, #4
    3f20:	pop	{fp, pc}
    3f24:	.word	0x00000748
    3f28:	.word	0x000005da
    3f2c:	.word	0x000000c8
    3f30:	.word	0x0000008c

00003f34 <read_int32_partial_array>:
    3f34:	push	{fp, lr}
    3f38:	add	fp, sp, #4
    3f3c:	sub	sp, sp, #16
    3f40:	str	r0, [fp, #-8]
    3f44:	str	r1, [fp, #-12]
    3f48:	str	r2, [fp, #-16]
    3f4c:	str	r3, [fp, #-20]	; 0xffffffec
    3f50:	ldr	r3, [fp, #-8]
    3f54:	ldr	r3, [r3, #4]
    3f58:	sub	r3, r3, #1
    3f5c:	ldr	r2, [fp, #-8]
    3f60:	lsl	r3, r3, #4
    3f64:	add	r3, r2, r3
    3f68:	ldr	r3, [r3, #8]
    3f6c:	ldr	r3, [r3]
    3f70:	cmp	r3, #101	; 0x65
    3f74:	beq	4010 <read_int32_partial_array+0xdc>
    3f78:	cmp	r3, #101	; 0x65
    3f7c:	bhi	3f9c <read_int32_partial_array+0x68>
    3f80:	cmp	r3, #1
    3f84:	beq	3fd8 <read_int32_partial_array+0xa4>
    3f88:	cmp	r3, #1
    3f8c:	bcc	3fbc <read_int32_partial_array+0x88>
    3f90:	cmp	r3, #100	; 0x64
    3f94:	beq	3ff4 <read_int32_partial_array+0xc0>
    3f98:	b	4070 <read_int32_partial_array+0x13c>
    3f9c:	cmp	r3, #103	; 0x67
    3fa0:	beq	4038 <read_int32_partial_array+0x104>
    3fa4:	cmp	r3, #103	; 0x67
    3fa8:	bcc	4024 <read_int32_partial_array+0xf0>
    3fac:	cmp	r3, #104	; 0x68
    3fb0:	beq	4054 <read_int32_partial_array+0x120>
    3fb4:	cmp	r3, #105	; 0x69
    3fb8:	b	4070 <read_int32_partial_array+0x13c>
    3fbc:	ldr	r3, [fp, #-20]	; 0xffffffec
    3fc0:	ldr	r2, [fp, #-16]
    3fc4:	ldr	r1, [fp, #-12]
    3fc8:	ldr	r0, [fp, #-8]
    3fcc:	bl	0 <coda_ascii_cursor_read_int32_partial_array>
    3fd0:	mov	r3, r0
    3fd4:	b	4084 <read_int32_partial_array+0x150>
    3fd8:	ldr	r3, [fp, #-20]	; 0xffffffec
    3fdc:	ldr	r2, [fp, #-16]
    3fe0:	ldr	r1, [fp, #-12]
    3fe4:	ldr	r0, [fp, #-8]
    3fe8:	bl	0 <coda_bin_cursor_read_int32_partial_array>
    3fec:	mov	r3, r0
    3ff0:	b	4084 <read_int32_partial_array+0x150>
    3ff4:	ldr	r3, [fp, #-20]	; 0xffffffec
    3ff8:	ldr	r2, [fp, #-16]
    3ffc:	ldr	r1, [fp, #-12]
    4000:	ldr	r0, [fp, #-8]
    4004:	bl	0 <coda_mem_cursor_read_int32_partial_array>
    4008:	mov	r3, r0
    400c:	b	4084 <read_int32_partial_array+0x150>
    4010:	mov	r1, #0
    4014:	mvn	r0, #10
    4018:	bl	0 <coda_set_error>
    401c:	mvn	r3, #0
    4020:	b	4084 <read_int32_partial_array+0x150>
    4024:	mov	r1, #0
    4028:	mvn	r0, #12
    402c:	bl	0 <coda_set_error>
    4030:	mvn	r3, #0
    4034:	b	4084 <read_int32_partial_array+0x150>
    4038:	ldr	r3, [fp, #-20]	; 0xffffffec
    403c:	ldr	r2, [fp, #-16]
    4040:	ldr	r1, [fp, #-12]
    4044:	ldr	r0, [fp, #-8]
    4048:	bl	0 <coda_cdf_cursor_read_int32_partial_array>
    404c:	mov	r3, r0
    4050:	b	4084 <read_int32_partial_array+0x150>
    4054:	ldr	r3, [fp, #-20]	; 0xffffffec
    4058:	ldr	r2, [fp, #-16]
    405c:	ldr	r1, [fp, #-12]
    4060:	ldr	r0, [fp, #-8]
    4064:	bl	0 <coda_netcdf_cursor_read_int32_partial_array>
    4068:	mov	r3, r0
    406c:	b	4084 <read_int32_partial_array+0x150>
    4070:	ldr	r3, [pc, #24]	; 4090 <read_int32_partial_array+0x15c>
    4074:	ldr	r2, [pc, #24]	; 4094 <read_int32_partial_array+0x160>
    4078:	ldr	r1, [pc, #24]	; 4098 <read_int32_partial_array+0x164>
    407c:	ldr	r0, [pc, #24]	; 409c <read_int32_partial_array+0x168>
    4080:	bl	0 <__assert_fail>
    4084:	mov	r0, r3
    4088:	sub	sp, fp, #4
    408c:	pop	{fp, pc}
    4090:	.word	0x00000764
    4094:	.word	0x000005fe
    4098:	.word	0x000000c8
    409c:	.word	0x0000008c

000040a0 <read_uint32_partial_array>:
    40a0:	push	{fp, lr}
    40a4:	add	fp, sp, #4
    40a8:	sub	sp, sp, #16
    40ac:	str	r0, [fp, #-8]
    40b0:	str	r1, [fp, #-12]
    40b4:	str	r2, [fp, #-16]
    40b8:	str	r3, [fp, #-20]	; 0xffffffec
    40bc:	ldr	r3, [fp, #-8]
    40c0:	ldr	r3, [r3, #4]
    40c4:	sub	r3, r3, #1
    40c8:	ldr	r2, [fp, #-8]
    40cc:	lsl	r3, r3, #4
    40d0:	add	r3, r2, r3
    40d4:	ldr	r3, [r3, #8]
    40d8:	ldr	r3, [r3]
    40dc:	cmp	r3, #101	; 0x65
    40e0:	beq	4178 <read_uint32_partial_array+0xd8>
    40e4:	cmp	r3, #101	; 0x65
    40e8:	bhi	4108 <read_uint32_partial_array+0x68>
    40ec:	cmp	r3, #1
    40f0:	beq	4140 <read_uint32_partial_array+0xa0>
    40f4:	cmp	r3, #1
    40f8:	bcc	4124 <read_uint32_partial_array+0x84>
    40fc:	cmp	r3, #100	; 0x64
    4100:	beq	415c <read_uint32_partial_array+0xbc>
    4104:	b	41bc <read_uint32_partial_array+0x11c>
    4108:	cmp	r3, #103	; 0x67
    410c:	beq	41a0 <read_uint32_partial_array+0x100>
    4110:	cmp	r3, #103	; 0x67
    4114:	bcc	418c <read_uint32_partial_array+0xec>
    4118:	cmp	r3, #105	; 0x69
    411c:	bhi	41bc <read_uint32_partial_array+0x11c>
    4120:	b	41bc <read_uint32_partial_array+0x11c>
    4124:	ldr	r3, [fp, #-20]	; 0xffffffec
    4128:	ldr	r2, [fp, #-16]
    412c:	ldr	r1, [fp, #-12]
    4130:	ldr	r0, [fp, #-8]
    4134:	bl	0 <coda_ascii_cursor_read_uint32_partial_array>
    4138:	mov	r3, r0
    413c:	b	41d0 <read_uint32_partial_array+0x130>
    4140:	ldr	r3, [fp, #-20]	; 0xffffffec
    4144:	ldr	r2, [fp, #-16]
    4148:	ldr	r1, [fp, #-12]
    414c:	ldr	r0, [fp, #-8]
    4150:	bl	0 <coda_bin_cursor_read_uint32_partial_array>
    4154:	mov	r3, r0
    4158:	b	41d0 <read_uint32_partial_array+0x130>
    415c:	ldr	r3, [fp, #-20]	; 0xffffffec
    4160:	ldr	r2, [fp, #-16]
    4164:	ldr	r1, [fp, #-12]
    4168:	ldr	r0, [fp, #-8]
    416c:	bl	0 <coda_mem_cursor_read_uint32_partial_array>
    4170:	mov	r3, r0
    4174:	b	41d0 <read_uint32_partial_array+0x130>
    4178:	mov	r1, #0
    417c:	mvn	r0, #10
    4180:	bl	0 <coda_set_error>
    4184:	mvn	r3, #0
    4188:	b	41d0 <read_uint32_partial_array+0x130>
    418c:	mov	r1, #0
    4190:	mvn	r0, #12
    4194:	bl	0 <coda_set_error>
    4198:	mvn	r3, #0
    419c:	b	41d0 <read_uint32_partial_array+0x130>
    41a0:	ldr	r3, [fp, #-20]	; 0xffffffec
    41a4:	ldr	r2, [fp, #-16]
    41a8:	ldr	r1, [fp, #-12]
    41ac:	ldr	r0, [fp, #-8]
    41b0:	bl	0 <coda_cdf_cursor_read_uint32_partial_array>
    41b4:	mov	r3, r0
    41b8:	b	41d0 <read_uint32_partial_array+0x130>
    41bc:	ldr	r3, [pc, #24]	; 41dc <read_uint32_partial_array+0x13c>
    41c0:	ldr	r2, [pc, #24]	; 41e0 <read_uint32_partial_array+0x140>
    41c4:	ldr	r1, [pc, #24]	; 41e4 <read_uint32_partial_array+0x144>
    41c8:	ldr	r0, [pc, #24]	; 41e8 <read_uint32_partial_array+0x148>
    41cc:	bl	0 <__assert_fail>
    41d0:	mov	r0, r3
    41d4:	sub	sp, fp, #4
    41d8:	pop	{fp, pc}
    41dc:	.word	0x00000780
    41e0:	.word	0x00000621
    41e4:	.word	0x000000c8
    41e8:	.word	0x0000008c

000041ec <read_int64_partial_array>:
    41ec:	push	{fp, lr}
    41f0:	add	fp, sp, #4
    41f4:	sub	sp, sp, #16
    41f8:	str	r0, [fp, #-8]
    41fc:	str	r1, [fp, #-12]
    4200:	str	r2, [fp, #-16]
    4204:	str	r3, [fp, #-20]	; 0xffffffec
    4208:	ldr	r3, [fp, #-8]
    420c:	ldr	r3, [r3, #4]
    4210:	sub	r3, r3, #1
    4214:	ldr	r2, [fp, #-8]
    4218:	lsl	r3, r3, #4
    421c:	add	r3, r2, r3
    4220:	ldr	r3, [r3, #8]
    4224:	ldr	r3, [r3]
    4228:	cmp	r3, #101	; 0x65
    422c:	beq	42c4 <read_int64_partial_array+0xd8>
    4230:	cmp	r3, #101	; 0x65
    4234:	bhi	4254 <read_int64_partial_array+0x68>
    4238:	cmp	r3, #1
    423c:	beq	428c <read_int64_partial_array+0xa0>
    4240:	cmp	r3, #1
    4244:	bcc	4270 <read_int64_partial_array+0x84>
    4248:	cmp	r3, #100	; 0x64
    424c:	beq	42a8 <read_int64_partial_array+0xbc>
    4250:	b	4308 <read_int64_partial_array+0x11c>
    4254:	cmp	r3, #103	; 0x67
    4258:	beq	42ec <read_int64_partial_array+0x100>
    425c:	cmp	r3, #103	; 0x67
    4260:	bcc	42d8 <read_int64_partial_array+0xec>
    4264:	cmp	r3, #105	; 0x69
    4268:	bhi	4308 <read_int64_partial_array+0x11c>
    426c:	b	4308 <read_int64_partial_array+0x11c>
    4270:	ldr	r3, [fp, #-20]	; 0xffffffec
    4274:	ldr	r2, [fp, #-16]
    4278:	ldr	r1, [fp, #-12]
    427c:	ldr	r0, [fp, #-8]
    4280:	bl	0 <coda_ascii_cursor_read_int64_partial_array>
    4284:	mov	r3, r0
    4288:	b	431c <read_int64_partial_array+0x130>
    428c:	ldr	r3, [fp, #-20]	; 0xffffffec
    4290:	ldr	r2, [fp, #-16]
    4294:	ldr	r1, [fp, #-12]
    4298:	ldr	r0, [fp, #-8]
    429c:	bl	0 <coda_bin_cursor_read_int64_partial_array>
    42a0:	mov	r3, r0
    42a4:	b	431c <read_int64_partial_array+0x130>
    42a8:	ldr	r3, [fp, #-20]	; 0xffffffec
    42ac:	ldr	r2, [fp, #-16]
    42b0:	ldr	r1, [fp, #-12]
    42b4:	ldr	r0, [fp, #-8]
    42b8:	bl	0 <coda_mem_cursor_read_int64_partial_array>
    42bc:	mov	r3, r0
    42c0:	b	431c <read_int64_partial_array+0x130>
    42c4:	mov	r1, #0
    42c8:	mvn	r0, #10
    42cc:	bl	0 <coda_set_error>
    42d0:	mvn	r3, #0
    42d4:	b	431c <read_int64_partial_array+0x130>
    42d8:	mov	r1, #0
    42dc:	mvn	r0, #12
    42e0:	bl	0 <coda_set_error>
    42e4:	mvn	r3, #0
    42e8:	b	431c <read_int64_partial_array+0x130>
    42ec:	ldr	r3, [fp, #-20]	; 0xffffffec
    42f0:	ldr	r2, [fp, #-16]
    42f4:	ldr	r1, [fp, #-12]
    42f8:	ldr	r0, [fp, #-8]
    42fc:	bl	0 <coda_cdf_cursor_read_int64_partial_array>
    4300:	mov	r3, r0
    4304:	b	431c <read_int64_partial_array+0x130>
    4308:	ldr	r3, [pc, #24]	; 4328 <read_int64_partial_array+0x13c>
    430c:	ldr	r2, [pc, #24]	; 432c <read_int64_partial_array+0x140>
    4310:	ldr	r1, [pc, #24]	; 4330 <read_int64_partial_array+0x144>
    4314:	ldr	r0, [pc, #24]	; 4334 <read_int64_partial_array+0x148>
    4318:	bl	0 <__assert_fail>
    431c:	mov	r0, r3
    4320:	sub	sp, fp, #4
    4324:	pop	{fp, pc}
    4328:	.word	0x0000079c
    432c:	.word	0x00000644
    4330:	.word	0x000000c8
    4334:	.word	0x0000008c

00004338 <read_uint64_partial_array>:
    4338:	push	{fp, lr}
    433c:	add	fp, sp, #4
    4340:	sub	sp, sp, #16
    4344:	str	r0, [fp, #-8]
    4348:	str	r1, [fp, #-12]
    434c:	str	r2, [fp, #-16]
    4350:	str	r3, [fp, #-20]	; 0xffffffec
    4354:	ldr	r3, [fp, #-8]
    4358:	ldr	r3, [r3, #4]
    435c:	sub	r3, r3, #1
    4360:	ldr	r2, [fp, #-8]
    4364:	lsl	r3, r3, #4
    4368:	add	r3, r2, r3
    436c:	ldr	r3, [r3, #8]
    4370:	ldr	r3, [r3]
    4374:	cmp	r3, #101	; 0x65
    4378:	beq	4408 <read_uint64_partial_array+0xd0>
    437c:	cmp	r3, #101	; 0x65
    4380:	bhi	43a0 <read_uint64_partial_array+0x68>
    4384:	cmp	r3, #1
    4388:	beq	43d0 <read_uint64_partial_array+0x98>
    438c:	cmp	r3, #1
    4390:	bcc	43b4 <read_uint64_partial_array+0x7c>
    4394:	cmp	r3, #100	; 0x64
    4398:	beq	43ec <read_uint64_partial_array+0xb4>
    439c:	b	4430 <read_uint64_partial_array+0xf8>
    43a0:	cmp	r3, #102	; 0x66
    43a4:	beq	441c <read_uint64_partial_array+0xe4>
    43a8:	cmp	r3, #105	; 0x69
    43ac:	bhi	4430 <read_uint64_partial_array+0xf8>
    43b0:	b	4430 <read_uint64_partial_array+0xf8>
    43b4:	ldr	r3, [fp, #-20]	; 0xffffffec
    43b8:	ldr	r2, [fp, #-16]
    43bc:	ldr	r1, [fp, #-12]
    43c0:	ldr	r0, [fp, #-8]
    43c4:	bl	0 <coda_ascii_cursor_read_uint64_partial_array>
    43c8:	mov	r3, r0
    43cc:	b	4444 <read_uint64_partial_array+0x10c>
    43d0:	ldr	r3, [fp, #-20]	; 0xffffffec
    43d4:	ldr	r2, [fp, #-16]
    43d8:	ldr	r1, [fp, #-12]
    43dc:	ldr	r0, [fp, #-8]
    43e0:	bl	0 <coda_bin_cursor_read_uint64_partial_array>
    43e4:	mov	r3, r0
    43e8:	b	4444 <read_uint64_partial_array+0x10c>
    43ec:	ldr	r3, [fp, #-20]	; 0xffffffec
    43f0:	ldr	r2, [fp, #-16]
    43f4:	ldr	r1, [fp, #-12]
    43f8:	ldr	r0, [fp, #-8]
    43fc:	bl	0 <coda_mem_cursor_read_uint64_partial_array>
    4400:	mov	r3, r0
    4404:	b	4444 <read_uint64_partial_array+0x10c>
    4408:	mov	r1, #0
    440c:	mvn	r0, #10
    4410:	bl	0 <coda_set_error>
    4414:	mvn	r3, #0
    4418:	b	4444 <read_uint64_partial_array+0x10c>
    441c:	mov	r1, #0
    4420:	mvn	r0, #12
    4424:	bl	0 <coda_set_error>
    4428:	mvn	r3, #0
    442c:	b	4444 <read_uint64_partial_array+0x10c>
    4430:	ldr	r3, [pc, #24]	; 4450 <read_uint64_partial_array+0x118>
    4434:	ldr	r2, [pc, #24]	; 4454 <read_uint64_partial_array+0x11c>
    4438:	ldr	r1, [pc, #24]	; 4458 <read_uint64_partial_array+0x120>
    443c:	ldr	r0, [pc, #24]	; 445c <read_uint64_partial_array+0x124>
    4440:	bl	0 <__assert_fail>
    4444:	mov	r0, r3
    4448:	sub	sp, fp, #4
    444c:	pop	{fp, pc}
    4450:	.word	0x000007b8
    4454:	.word	0x00000666
    4458:	.word	0x000000c8
    445c:	.word	0x0000008c

00004460 <read_float_partial_array>:
    4460:	push	{fp, lr}
    4464:	add	fp, sp, #4
    4468:	sub	sp, sp, #16
    446c:	str	r0, [fp, #-8]
    4470:	str	r1, [fp, #-12]
    4474:	str	r2, [fp, #-16]
    4478:	str	r3, [fp, #-20]	; 0xffffffec
    447c:	ldr	r3, [fp, #-8]
    4480:	ldr	r3, [r3, #4]
    4484:	sub	r3, r3, #1
    4488:	ldr	r2, [fp, #-8]
    448c:	lsl	r3, r3, #4
    4490:	add	r3, r2, r3
    4494:	ldr	r3, [r3, #8]
    4498:	ldr	r3, [r3]
    449c:	cmp	r3, #101	; 0x65
    44a0:	beq	4540 <read_float_partial_array+0xe0>
    44a4:	cmp	r3, #101	; 0x65
    44a8:	bhi	44c8 <read_float_partial_array+0x68>
    44ac:	cmp	r3, #1
    44b0:	beq	4508 <read_float_partial_array+0xa8>
    44b4:	cmp	r3, #1
    44b8:	bcc	44ec <read_float_partial_array+0x8c>
    44bc:	cmp	r3, #100	; 0x64
    44c0:	beq	4524 <read_float_partial_array+0xc4>
    44c4:	b	45bc <read_float_partial_array+0x15c>
    44c8:	cmp	r3, #103	; 0x67
    44cc:	beq	4568 <read_float_partial_array+0x108>
    44d0:	cmp	r3, #103	; 0x67
    44d4:	bcc	4554 <read_float_partial_array+0xf4>
    44d8:	cmp	r3, #104	; 0x68
    44dc:	beq	4584 <read_float_partial_array+0x124>
    44e0:	cmp	r3, #105	; 0x69
    44e4:	beq	45a0 <read_float_partial_array+0x140>
    44e8:	b	45bc <read_float_partial_array+0x15c>
    44ec:	ldr	r3, [fp, #-20]	; 0xffffffec
    44f0:	ldr	r2, [fp, #-16]
    44f4:	ldr	r1, [fp, #-12]
    44f8:	ldr	r0, [fp, #-8]
    44fc:	bl	0 <coda_ascii_cursor_read_float_partial_array>
    4500:	mov	r3, r0
    4504:	b	45d0 <read_float_partial_array+0x170>
    4508:	ldr	r3, [fp, #-20]	; 0xffffffec
    450c:	ldr	r2, [fp, #-16]
    4510:	ldr	r1, [fp, #-12]
    4514:	ldr	r0, [fp, #-8]
    4518:	bl	0 <coda_bin_cursor_read_float_partial_array>
    451c:	mov	r3, r0
    4520:	b	45d0 <read_float_partial_array+0x170>
    4524:	ldr	r3, [fp, #-20]	; 0xffffffec
    4528:	ldr	r2, [fp, #-16]
    452c:	ldr	r1, [fp, #-12]
    4530:	ldr	r0, [fp, #-8]
    4534:	bl	0 <coda_mem_cursor_read_float_partial_array>
    4538:	mov	r3, r0
    453c:	b	45d0 <read_float_partial_array+0x170>
    4540:	mov	r1, #0
    4544:	mvn	r0, #10
    4548:	bl	0 <coda_set_error>
    454c:	mvn	r3, #0
    4550:	b	45d0 <read_float_partial_array+0x170>
    4554:	mov	r1, #0
    4558:	mvn	r0, #12
    455c:	bl	0 <coda_set_error>
    4560:	mvn	r3, #0
    4564:	b	45d0 <read_float_partial_array+0x170>
    4568:	ldr	r3, [fp, #-20]	; 0xffffffec
    456c:	ldr	r2, [fp, #-16]
    4570:	ldr	r1, [fp, #-12]
    4574:	ldr	r0, [fp, #-8]
    4578:	bl	0 <coda_cdf_cursor_read_float_partial_array>
    457c:	mov	r3, r0
    4580:	b	45d0 <read_float_partial_array+0x170>
    4584:	ldr	r3, [fp, #-20]	; 0xffffffec
    4588:	ldr	r2, [fp, #-16]
    458c:	ldr	r1, [fp, #-12]
    4590:	ldr	r0, [fp, #-8]
    4594:	bl	0 <coda_netcdf_cursor_read_float_partial_array>
    4598:	mov	r3, r0
    459c:	b	45d0 <read_float_partial_array+0x170>
    45a0:	ldr	r3, [fp, #-20]	; 0xffffffec
    45a4:	ldr	r2, [fp, #-16]
    45a8:	ldr	r1, [fp, #-12]
    45ac:	ldr	r0, [fp, #-8]
    45b0:	bl	0 <coda_grib_cursor_read_float_partial_array>
    45b4:	mov	r3, r0
    45b8:	b	45d0 <read_float_partial_array+0x170>
    45bc:	ldr	r3, [pc, #24]	; 45dc <read_float_partial_array+0x17c>
    45c0:	ldr	r2, [pc, #24]	; 45e0 <read_float_partial_array+0x180>
    45c4:	ldr	r1, [pc, #24]	; 45e4 <read_float_partial_array+0x184>
    45c8:	ldr	r0, [pc, #24]	; 45e8 <read_float_partial_array+0x188>
    45cc:	bl	0 <__assert_fail>
    45d0:	mov	r0, r3
    45d4:	sub	sp, fp, #4
    45d8:	pop	{fp, pc}
    45dc:	.word	0x000007d4
    45e0:	.word	0x0000068a
    45e4:	.word	0x000000c8
    45e8:	.word	0x0000008c

000045ec <read_double_partial_array>:
    45ec:	push	{fp, lr}
    45f0:	add	fp, sp, #4
    45f4:	sub	sp, sp, #32
    45f8:	str	r0, [fp, #-16]
    45fc:	str	r1, [fp, #-20]	; 0xffffffec
    4600:	str	r2, [fp, #-24]	; 0xffffffe8
    4604:	str	r3, [fp, #-28]	; 0xffffffe4
    4608:	ldr	r3, [fp, #-16]
    460c:	ldr	r3, [r3, #4]
    4610:	sub	r3, r3, #1
    4614:	ldr	r2, [fp, #-16]
    4618:	lsl	r3, r3, #4
    461c:	add	r3, r2, r3
    4620:	ldr	r3, [r3, #8]
    4624:	ldr	r3, [r3]
    4628:	cmp	r3, #99	; 0x63
    462c:	bhi	4650 <read_double_partial_array+0x64>
    4630:	ldr	r3, [fp, #-16]
    4634:	ldr	r3, [r3, #4]
    4638:	sub	r3, r3, #1
    463c:	ldr	r2, [fp, #-16]
    4640:	lsl	r3, r3, #4
    4644:	add	r3, r2, r3
    4648:	ldr	r3, [r3, #8]
    464c:	b	4670 <read_double_partial_array+0x84>
    4650:	ldr	r3, [fp, #-16]
    4654:	ldr	r3, [r3, #4]
    4658:	sub	r3, r3, #1
    465c:	ldr	r2, [fp, #-16]
    4660:	lsl	r3, r3, #4
    4664:	add	r3, r2, r3
    4668:	ldr	r3, [r3, #8]
    466c:	ldr	r3, [r3, #4]
    4670:	str	r3, [fp, #-8]
    4674:	ldr	r3, [fp, #-8]
    4678:	ldr	r3, [r3, #40]	; 0x28
    467c:	ldr	r3, [r3, #8]
    4680:	cmp	r3, #6
    4684:	bne	46b4 <read_double_partial_array+0xc8>
    4688:	mov	r3, #8
    468c:	str	r3, [sp, #4]
    4690:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4694:	str	r3, [sp]
    4698:	ldr	r3, [fp, #-24]	; 0xffffffe8
    469c:	ldr	r2, [fp, #-20]	; 0xffffffec
    46a0:	ldr	r1, [pc, #332]	; 47f4 <read_double_partial_array+0x208>
    46a4:	ldr	r0, [fp, #-16]
    46a8:	bl	3fc <read_partial_array>
    46ac:	mov	r3, r0
    46b0:	b	47e8 <read_double_partial_array+0x1fc>
    46b4:	ldr	r3, [fp, #-16]
    46b8:	ldr	r3, [r3, #4]
    46bc:	sub	r3, r3, #1
    46c0:	ldr	r2, [fp, #-16]
    46c4:	lsl	r3, r3, #4
    46c8:	add	r3, r2, r3
    46cc:	ldr	r3, [r3, #8]
    46d0:	ldr	r3, [r3]
    46d4:	cmp	r3, #101	; 0x65
    46d8:	beq	4774 <read_double_partial_array+0x188>
    46dc:	cmp	r3, #101	; 0x65
    46e0:	bhi	4700 <read_double_partial_array+0x114>
    46e4:	cmp	r3, #1
    46e8:	beq	473c <read_double_partial_array+0x150>
    46ec:	cmp	r3, #1
    46f0:	bcc	4720 <read_double_partial_array+0x134>
    46f4:	cmp	r3, #100	; 0x64
    46f8:	beq	4758 <read_double_partial_array+0x16c>
    46fc:	b	47d4 <read_double_partial_array+0x1e8>
    4700:	cmp	r3, #103	; 0x67
    4704:	beq	479c <read_double_partial_array+0x1b0>
    4708:	cmp	r3, #103	; 0x67
    470c:	bcc	4788 <read_double_partial_array+0x19c>
    4710:	cmp	r3, #104	; 0x68
    4714:	beq	47b8 <read_double_partial_array+0x1cc>
    4718:	cmp	r3, #105	; 0x69
    471c:	b	47d4 <read_double_partial_array+0x1e8>
    4720:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4724:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4728:	ldr	r1, [fp, #-20]	; 0xffffffec
    472c:	ldr	r0, [fp, #-16]
    4730:	bl	0 <coda_ascii_cursor_read_double_partial_array>
    4734:	mov	r3, r0
    4738:	b	47e8 <read_double_partial_array+0x1fc>
    473c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4740:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4744:	ldr	r1, [fp, #-20]	; 0xffffffec
    4748:	ldr	r0, [fp, #-16]
    474c:	bl	0 <coda_bin_cursor_read_double_partial_array>
    4750:	mov	r3, r0
    4754:	b	47e8 <read_double_partial_array+0x1fc>
    4758:	ldr	r3, [fp, #-28]	; 0xffffffe4
    475c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4760:	ldr	r1, [fp, #-20]	; 0xffffffec
    4764:	ldr	r0, [fp, #-16]
    4768:	bl	0 <coda_mem_cursor_read_double_partial_array>
    476c:	mov	r3, r0
    4770:	b	47e8 <read_double_partial_array+0x1fc>
    4774:	mov	r1, #0
    4778:	mvn	r0, #10
    477c:	bl	0 <coda_set_error>
    4780:	mvn	r3, #0
    4784:	b	47e8 <read_double_partial_array+0x1fc>
    4788:	mov	r1, #0
    478c:	mvn	r0, #12
    4790:	bl	0 <coda_set_error>
    4794:	mvn	r3, #0
    4798:	b	47e8 <read_double_partial_array+0x1fc>
    479c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    47a0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    47a4:	ldr	r1, [fp, #-20]	; 0xffffffec
    47a8:	ldr	r0, [fp, #-16]
    47ac:	bl	0 <coda_cdf_cursor_read_double_partial_array>
    47b0:	mov	r3, r0
    47b4:	b	47e8 <read_double_partial_array+0x1fc>
    47b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    47bc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    47c0:	ldr	r1, [fp, #-20]	; 0xffffffec
    47c4:	ldr	r0, [fp, #-16]
    47c8:	bl	0 <coda_netcdf_cursor_read_double_partial_array>
    47cc:	mov	r3, r0
    47d0:	b	47e8 <read_double_partial_array+0x1fc>
    47d4:	ldr	r3, [pc, #28]	; 47f8 <read_double_partial_array+0x20c>
    47d8:	ldr	r2, [pc, #28]	; 47fc <read_double_partial_array+0x210>
    47dc:	ldr	r1, [pc, #28]	; 4800 <read_double_partial_array+0x214>
    47e0:	ldr	r0, [pc, #28]	; 4804 <read_double_partial_array+0x218>
    47e4:	bl	0 <__assert_fail>
    47e8:	mov	r0, r3
    47ec:	sub	sp, fp, #4
    47f0:	pop	{fp, pc}
    47f4:	.word	0x00000000
    47f8:	.word	0x000007f0
    47fc:	.word	0x000006b6
    4800:	.word	0x000000c8
    4804:	.word	0x0000008c

00004808 <read_char_partial_array>:
    4808:	push	{fp, lr}
    480c:	add	fp, sp, #4
    4810:	sub	sp, sp, #16
    4814:	str	r0, [fp, #-8]
    4818:	str	r1, [fp, #-12]
    481c:	str	r2, [fp, #-16]
    4820:	str	r3, [fp, #-20]	; 0xffffffec
    4824:	ldr	r3, [fp, #-8]
    4828:	ldr	r3, [r3, #4]
    482c:	sub	r3, r3, #1
    4830:	ldr	r2, [fp, #-8]
    4834:	lsl	r3, r3, #4
    4838:	add	r3, r2, r3
    483c:	ldr	r3, [r3, #8]
    4840:	ldr	r3, [r3]
    4844:	cmp	r3, #101	; 0x65
    4848:	beq	48e4 <read_char_partial_array+0xdc>
    484c:	cmp	r3, #101	; 0x65
    4850:	bhi	4870 <read_char_partial_array+0x68>
    4854:	cmp	r3, #1
    4858:	beq	48ac <read_char_partial_array+0xa4>
    485c:	cmp	r3, #1
    4860:	bcc	4890 <read_char_partial_array+0x88>
    4864:	cmp	r3, #100	; 0x64
    4868:	beq	48c8 <read_char_partial_array+0xc0>
    486c:	b	4934 <read_char_partial_array+0x12c>
    4870:	cmp	r3, #103	; 0x67
    4874:	beq	48f8 <read_char_partial_array+0xf0>
    4878:	cmp	r3, #103	; 0x67
    487c:	bcc	4930 <read_char_partial_array+0x128>
    4880:	cmp	r3, #104	; 0x68
    4884:	beq	4914 <read_char_partial_array+0x10c>
    4888:	cmp	r3, #105	; 0x69
    488c:	b	4930 <read_char_partial_array+0x128>
    4890:	ldr	r3, [fp, #-20]	; 0xffffffec
    4894:	ldr	r2, [fp, #-16]
    4898:	ldr	r1, [fp, #-12]
    489c:	ldr	r0, [fp, #-8]
    48a0:	bl	0 <coda_ascii_cursor_read_char_partial_array>
    48a4:	mov	r3, r0
    48a8:	b	4948 <read_char_partial_array+0x140>
    48ac:	ldr	r3, [fp, #-20]	; 0xffffffec
    48b0:	ldr	r2, [fp, #-16]
    48b4:	ldr	r1, [fp, #-12]
    48b8:	ldr	r0, [fp, #-8]
    48bc:	bl	0 <coda_bin_cursor_read_char_partial_array>
    48c0:	mov	r3, r0
    48c4:	b	4948 <read_char_partial_array+0x140>
    48c8:	ldr	r3, [fp, #-20]	; 0xffffffec
    48cc:	ldr	r2, [fp, #-16]
    48d0:	ldr	r1, [fp, #-12]
    48d4:	ldr	r0, [fp, #-8]
    48d8:	bl	0 <coda_mem_cursor_read_char_partial_array>
    48dc:	mov	r3, r0
    48e0:	b	4948 <read_char_partial_array+0x140>
    48e4:	mov	r1, #0
    48e8:	mvn	r0, #10
    48ec:	bl	0 <coda_set_error>
    48f0:	mvn	r3, #0
    48f4:	b	4948 <read_char_partial_array+0x140>
    48f8:	ldr	r3, [fp, #-20]	; 0xffffffec
    48fc:	ldr	r2, [fp, #-16]
    4900:	ldr	r1, [fp, #-12]
    4904:	ldr	r0, [fp, #-8]
    4908:	bl	0 <coda_cdf_cursor_read_char_partial_array>
    490c:	mov	r3, r0
    4910:	b	4948 <read_char_partial_array+0x140>
    4914:	ldr	r3, [fp, #-20]	; 0xffffffec
    4918:	ldr	r2, [fp, #-16]
    491c:	ldr	r1, [fp, #-12]
    4920:	ldr	r0, [fp, #-8]
    4924:	bl	0 <coda_netcdf_cursor_read_char_partial_array>
    4928:	mov	r3, r0
    492c:	b	4948 <read_char_partial_array+0x140>
    4930:	nop			; (mov r0, r0)
    4934:	ldr	r3, [pc, #24]	; 4954 <read_char_partial_array+0x14c>
    4938:	ldr	r2, [pc, #24]	; 4958 <read_char_partial_array+0x150>
    493c:	ldr	r1, [pc, #24]	; 495c <read_char_partial_array+0x154>
    4940:	ldr	r0, [pc, #24]	; 4960 <read_char_partial_array+0x158>
    4944:	bl	0 <__assert_fail>
    4948:	mov	r0, r3
    494c:	sub	sp, fp, #4
    4950:	pop	{fp, pc}
    4954:	.word	0x0000080c
    4958:	.word	0x000006d4
    495c:	.word	0x000000c8
    4960:	.word	0x0000008c

00004964 <coda_cursor_read_int8>:
    4964:	push	{fp, lr}
    4968:	add	fp, sp, #4
    496c:	sub	sp, sp, #16
    4970:	str	r0, [fp, #-16]
    4974:	str	r1, [fp, #-20]	; 0xffffffec
    4978:	ldr	r3, [fp, #-16]
    497c:	cmp	r3, #0
    4980:	beq	49b8 <coda_cursor_read_int8+0x54>
    4984:	ldr	r3, [fp, #-16]
    4988:	ldr	r3, [r3, #4]
    498c:	cmp	r3, #0
    4990:	ble	49b8 <coda_cursor_read_int8+0x54>
    4994:	ldr	r3, [fp, #-16]
    4998:	ldr	r3, [r3, #4]
    499c:	sub	r3, r3, #1
    49a0:	ldr	r2, [fp, #-16]
    49a4:	lsl	r3, r3, #4
    49a8:	add	r3, r2, r3
    49ac:	ldr	r3, [r3, #8]
    49b0:	cmp	r3, #0
    49b4:	bne	49d4 <coda_cursor_read_int8+0x70>
    49b8:	ldr	r3, [pc, #200]	; 4a88 <coda_cursor_read_int8+0x124>
    49bc:	ldr	r2, [pc, #200]	; 4a8c <coda_cursor_read_int8+0x128>
    49c0:	ldr	r1, [pc, #200]	; 4a90 <coda_cursor_read_int8+0x12c>
    49c4:	mvn	r0, #99	; 0x63
    49c8:	bl	0 <coda_set_error>
    49cc:	mvn	r3, #0
    49d0:	b	4a7c <coda_cursor_read_int8+0x118>
    49d4:	ldr	r3, [fp, #-20]	; 0xffffffec
    49d8:	cmp	r3, #0
    49dc:	bne	49fc <coda_cursor_read_int8+0x98>
    49e0:	ldr	r3, [pc, #172]	; 4a94 <coda_cursor_read_int8+0x130>
    49e4:	ldr	r2, [pc, #160]	; 4a8c <coda_cursor_read_int8+0x128>
    49e8:	ldr	r1, [pc, #168]	; 4a98 <coda_cursor_read_int8+0x134>
    49ec:	mvn	r0, #99	; 0x63
    49f0:	bl	0 <coda_set_error>
    49f4:	mvn	r3, #0
    49f8:	b	4a7c <coda_cursor_read_int8+0x118>
    49fc:	sub	r3, fp, #8
    4a00:	mov	r1, r3
    4a04:	ldr	r0, [fp, #-16]
    4a08:	bl	e7c <get_read_type>
    4a0c:	mov	r3, r0
    4a10:	cmp	r3, #0
    4a14:	beq	4a20 <coda_cursor_read_int8+0xbc>
    4a18:	mvn	r3, #0
    4a1c:	b	4a7c <coda_cursor_read_int8+0x118>
    4a20:	ldr	r3, [fp, #-8]
    4a24:	cmp	r3, #0
    4a28:	bne	4a4c <coda_cursor_read_int8+0xe8>
    4a2c:	ldr	r1, [fp, #-20]	; 0xffffffec
    4a30:	ldr	r0, [fp, #-16]
    4a34:	bl	1978 <read_int8>
    4a38:	mov	r3, r0
    4a3c:	cmp	r3, #0
    4a40:	beq	4a74 <coda_cursor_read_int8+0x110>
    4a44:	mvn	r3, #0
    4a48:	b	4a7c <coda_cursor_read_int8+0x118>
    4a4c:	ldr	r3, [fp, #-8]
    4a50:	mov	r0, r3
    4a54:	bl	0 <coda_type_get_native_type_name>
    4a58:	mov	r3, r0
    4a5c:	mov	r2, r3
    4a60:	ldr	r1, [pc, #52]	; 4a9c <coda_cursor_read_int8+0x138>
    4a64:	mvn	r0, #104	; 0x68
    4a68:	bl	0 <coda_set_error>
    4a6c:	mvn	r3, #0
    4a70:	b	4a7c <coda_cursor_read_int8+0x118>
    4a74:	nop			; (mov r0, r0)
    4a78:	mov	r3, #0
    4a7c:	mov	r0, r3
    4a80:	sub	sp, fp, #4
    4a84:	pop	{fp, pc}
    4a88:	.word	0x000006ed
    4a8c:	.word	0x000000c8
    4a90:	.word	0x00000118
    4a94:	.word	0x000006f2
    4a98:	.word	0x00000138
    4a9c:	.word	0x00000158

00004aa0 <coda_cursor_read_uint8>:
    4aa0:	push	{fp, lr}
    4aa4:	add	fp, sp, #4
    4aa8:	sub	sp, sp, #16
    4aac:	str	r0, [fp, #-16]
    4ab0:	str	r1, [fp, #-20]	; 0xffffffec
    4ab4:	ldr	r3, [fp, #-16]
    4ab8:	cmp	r3, #0
    4abc:	beq	4af4 <coda_cursor_read_uint8+0x54>
    4ac0:	ldr	r3, [fp, #-16]
    4ac4:	ldr	r3, [r3, #4]
    4ac8:	cmp	r3, #0
    4acc:	ble	4af4 <coda_cursor_read_uint8+0x54>
    4ad0:	ldr	r3, [fp, #-16]
    4ad4:	ldr	r3, [r3, #4]
    4ad8:	sub	r3, r3, #1
    4adc:	ldr	r2, [fp, #-16]
    4ae0:	lsl	r3, r3, #4
    4ae4:	add	r3, r2, r3
    4ae8:	ldr	r3, [r3, #8]
    4aec:	cmp	r3, #0
    4af0:	bne	4b10 <coda_cursor_read_uint8+0x70>
    4af4:	ldr	r3, [pc, #200]	; 4bc4 <coda_cursor_read_uint8+0x124>
    4af8:	ldr	r2, [pc, #200]	; 4bc8 <coda_cursor_read_uint8+0x128>
    4afc:	ldr	r1, [pc, #200]	; 4bcc <coda_cursor_read_uint8+0x12c>
    4b00:	mvn	r0, #99	; 0x63
    4b04:	bl	0 <coda_set_error>
    4b08:	mvn	r3, #0
    4b0c:	b	4bb8 <coda_cursor_read_uint8+0x118>
    4b10:	ldr	r3, [fp, #-20]	; 0xffffffec
    4b14:	cmp	r3, #0
    4b18:	bne	4b38 <coda_cursor_read_uint8+0x98>
    4b1c:	ldr	r3, [pc, #172]	; 4bd0 <coda_cursor_read_uint8+0x130>
    4b20:	ldr	r2, [pc, #160]	; 4bc8 <coda_cursor_read_uint8+0x128>
    4b24:	ldr	r1, [pc, #168]	; 4bd4 <coda_cursor_read_uint8+0x134>
    4b28:	mvn	r0, #99	; 0x63
    4b2c:	bl	0 <coda_set_error>
    4b30:	mvn	r3, #0
    4b34:	b	4bb8 <coda_cursor_read_uint8+0x118>
    4b38:	sub	r3, fp, #8
    4b3c:	mov	r1, r3
    4b40:	ldr	r0, [fp, #-16]
    4b44:	bl	e7c <get_read_type>
    4b48:	mov	r3, r0
    4b4c:	cmp	r3, #0
    4b50:	beq	4b5c <coda_cursor_read_uint8+0xbc>
    4b54:	mvn	r3, #0
    4b58:	b	4bb8 <coda_cursor_read_uint8+0x118>
    4b5c:	ldr	r3, [fp, #-8]
    4b60:	cmp	r3, #1
    4b64:	bne	4b88 <coda_cursor_read_uint8+0xe8>
    4b68:	ldr	r1, [fp, #-20]	; 0xffffffec
    4b6c:	ldr	r0, [fp, #-16]
    4b70:	bl	1ab4 <read_uint8>
    4b74:	mov	r3, r0
    4b78:	cmp	r3, #0
    4b7c:	beq	4bb0 <coda_cursor_read_uint8+0x110>
    4b80:	mvn	r3, #0
    4b84:	b	4bb8 <coda_cursor_read_uint8+0x118>
    4b88:	ldr	r3, [fp, #-8]
    4b8c:	mov	r0, r3
    4b90:	bl	0 <coda_type_get_native_type_name>
    4b94:	mov	r3, r0
    4b98:	mov	r2, r3
    4b9c:	ldr	r1, [pc, #52]	; 4bd8 <coda_cursor_read_uint8+0x138>
    4ba0:	mvn	r0, #104	; 0x68
    4ba4:	bl	0 <coda_set_error>
    4ba8:	mvn	r3, #0
    4bac:	b	4bb8 <coda_cursor_read_uint8+0x118>
    4bb0:	nop			; (mov r0, r0)
    4bb4:	mov	r3, #0
    4bb8:	mov	r0, r3
    4bbc:	sub	sp, fp, #4
    4bc0:	pop	{fp, pc}
    4bc4:	.word	0x0000071c
    4bc8:	.word	0x000000c8
    4bcc:	.word	0x00000118
    4bd0:	.word	0x00000721
    4bd4:	.word	0x00000138
    4bd8:	.word	0x00000184

00004bdc <coda_cursor_read_int16>:
    4bdc:	push	{fp, lr}
    4be0:	add	fp, sp, #4
    4be4:	sub	sp, sp, #16
    4be8:	str	r0, [fp, #-16]
    4bec:	str	r1, [fp, #-20]	; 0xffffffec
    4bf0:	ldr	r3, [fp, #-16]
    4bf4:	cmp	r3, #0
    4bf8:	beq	4c30 <coda_cursor_read_int16+0x54>
    4bfc:	ldr	r3, [fp, #-16]
    4c00:	ldr	r3, [r3, #4]
    4c04:	cmp	r3, #0
    4c08:	ble	4c30 <coda_cursor_read_int16+0x54>
    4c0c:	ldr	r3, [fp, #-16]
    4c10:	ldr	r3, [r3, #4]
    4c14:	sub	r3, r3, #1
    4c18:	ldr	r2, [fp, #-16]
    4c1c:	lsl	r3, r3, #4
    4c20:	add	r3, r2, r3
    4c24:	ldr	r3, [r3, #8]
    4c28:	cmp	r3, #0
    4c2c:	bne	4c4c <coda_cursor_read_int16+0x70>
    4c30:	ldr	r3, [pc, #328]	; 4d80 <coda_cursor_read_int16+0x1a4>
    4c34:	ldr	r2, [pc, #328]	; 4d84 <coda_cursor_read_int16+0x1a8>
    4c38:	ldr	r1, [pc, #328]	; 4d88 <coda_cursor_read_int16+0x1ac>
    4c3c:	mvn	r0, #99	; 0x63
    4c40:	bl	0 <coda_set_error>
    4c44:	mvn	r3, #0
    4c48:	b	4d74 <coda_cursor_read_int16+0x198>
    4c4c:	ldr	r3, [fp, #-20]	; 0xffffffec
    4c50:	cmp	r3, #0
    4c54:	bne	4c74 <coda_cursor_read_int16+0x98>
    4c58:	ldr	r3, [pc, #300]	; 4d8c <coda_cursor_read_int16+0x1b0>
    4c5c:	ldr	r2, [pc, #288]	; 4d84 <coda_cursor_read_int16+0x1a8>
    4c60:	ldr	r1, [pc, #296]	; 4d90 <coda_cursor_read_int16+0x1b4>
    4c64:	mvn	r0, #99	; 0x63
    4c68:	bl	0 <coda_set_error>
    4c6c:	mvn	r3, #0
    4c70:	b	4d74 <coda_cursor_read_int16+0x198>
    4c74:	sub	r3, fp, #8
    4c78:	mov	r1, r3
    4c7c:	ldr	r0, [fp, #-16]
    4c80:	bl	e7c <get_read_type>
    4c84:	mov	r3, r0
    4c88:	cmp	r3, #0
    4c8c:	beq	4c98 <coda_cursor_read_int16+0xbc>
    4c90:	mvn	r3, #0
    4c94:	b	4d74 <coda_cursor_read_int16+0x198>
    4c98:	ldr	r3, [fp, #-8]
    4c9c:	cmp	r3, #1
    4ca0:	beq	4cec <coda_cursor_read_int16+0x110>
    4ca4:	cmp	r3, #2
    4ca8:	beq	4d24 <coda_cursor_read_int16+0x148>
    4cac:	cmp	r3, #0
    4cb0:	bne	4d44 <coda_cursor_read_int16+0x168>
    4cb4:	sub	r3, fp, #9
    4cb8:	mov	r1, r3
    4cbc:	ldr	r0, [fp, #-16]
    4cc0:	bl	1978 <read_int8>
    4cc4:	mov	r3, r0
    4cc8:	cmp	r3, #0
    4ccc:	beq	4cd8 <coda_cursor_read_int16+0xfc>
    4cd0:	mvn	r3, #0
    4cd4:	b	4d74 <coda_cursor_read_int16+0x198>
    4cd8:	ldrsb	r3, [fp, #-9]
    4cdc:	sxth	r2, r3
    4ce0:	ldr	r3, [fp, #-20]	; 0xffffffec
    4ce4:	strh	r2, [r3]
    4ce8:	b	4d70 <coda_cursor_read_int16+0x194>
    4cec:	sub	r3, fp, #10
    4cf0:	mov	r1, r3
    4cf4:	ldr	r0, [fp, #-16]
    4cf8:	bl	1ab4 <read_uint8>
    4cfc:	mov	r3, r0
    4d00:	cmp	r3, #0
    4d04:	beq	4d10 <coda_cursor_read_int16+0x134>
    4d08:	mvn	r3, #0
    4d0c:	b	4d74 <coda_cursor_read_int16+0x198>
    4d10:	ldrb	r3, [fp, #-10]
    4d14:	sxth	r2, r3
    4d18:	ldr	r3, [fp, #-20]	; 0xffffffec
    4d1c:	strh	r2, [r3]
    4d20:	b	4d70 <coda_cursor_read_int16+0x194>
    4d24:	ldr	r1, [fp, #-20]	; 0xffffffec
    4d28:	ldr	r0, [fp, #-16]
    4d2c:	bl	1bd8 <read_int16>
    4d30:	mov	r3, r0
    4d34:	cmp	r3, #0
    4d38:	beq	4d6c <coda_cursor_read_int16+0x190>
    4d3c:	mvn	r3, #0
    4d40:	b	4d74 <coda_cursor_read_int16+0x198>
    4d44:	ldr	r3, [fp, #-8]
    4d48:	mov	r0, r3
    4d4c:	bl	0 <coda_type_get_native_type_name>
    4d50:	mov	r3, r0
    4d54:	mov	r2, r3
    4d58:	ldr	r1, [pc, #52]	; 4d94 <coda_cursor_read_int16+0x1b8>
    4d5c:	mvn	r0, #104	; 0x68
    4d60:	bl	0 <coda_set_error>
    4d64:	mvn	r3, #0
    4d68:	b	4d74 <coda_cursor_read_int16+0x198>
    4d6c:	nop			; (mov r0, r0)
    4d70:	mov	r3, #0
    4d74:	mov	r0, r3
    4d78:	sub	sp, fp, #4
    4d7c:	pop	{fp, pc}
    4d80:	.word	0x0000074d
    4d84:	.word	0x000000c8
    4d88:	.word	0x00000118
    4d8c:	.word	0x00000752
    4d90:	.word	0x00000138
    4d94:	.word	0x000001b4

00004d98 <coda_cursor_read_uint16>:
    4d98:	push	{fp, lr}
    4d9c:	add	fp, sp, #4
    4da0:	sub	sp, sp, #16
    4da4:	str	r0, [fp, #-16]
    4da8:	str	r1, [fp, #-20]	; 0xffffffec
    4dac:	ldr	r3, [fp, #-16]
    4db0:	cmp	r3, #0
    4db4:	beq	4dec <coda_cursor_read_uint16+0x54>
    4db8:	ldr	r3, [fp, #-16]
    4dbc:	ldr	r3, [r3, #4]
    4dc0:	cmp	r3, #0
    4dc4:	ble	4dec <coda_cursor_read_uint16+0x54>
    4dc8:	ldr	r3, [fp, #-16]
    4dcc:	ldr	r3, [r3, #4]
    4dd0:	sub	r3, r3, #1
    4dd4:	ldr	r2, [fp, #-16]
    4dd8:	lsl	r3, r3, #4
    4ddc:	add	r3, r2, r3
    4de0:	ldr	r3, [r3, #8]
    4de4:	cmp	r3, #0
    4de8:	bne	4e08 <coda_cursor_read_uint16+0x70>
    4dec:	ldr	r3, [pc, #268]	; 4f00 <coda_cursor_read_uint16+0x168>
    4df0:	ldr	r2, [pc, #268]	; 4f04 <coda_cursor_read_uint16+0x16c>
    4df4:	ldr	r1, [pc, #268]	; 4f08 <coda_cursor_read_uint16+0x170>
    4df8:	mvn	r0, #99	; 0x63
    4dfc:	bl	0 <coda_set_error>
    4e00:	mvn	r3, #0
    4e04:	b	4ef4 <coda_cursor_read_uint16+0x15c>
    4e08:	ldr	r3, [fp, #-20]	; 0xffffffec
    4e0c:	cmp	r3, #0
    4e10:	bne	4e30 <coda_cursor_read_uint16+0x98>
    4e14:	ldr	r3, [pc, #240]	; 4f0c <coda_cursor_read_uint16+0x174>
    4e18:	ldr	r2, [pc, #228]	; 4f04 <coda_cursor_read_uint16+0x16c>
    4e1c:	ldr	r1, [pc, #236]	; 4f10 <coda_cursor_read_uint16+0x178>
    4e20:	mvn	r0, #99	; 0x63
    4e24:	bl	0 <coda_set_error>
    4e28:	mvn	r3, #0
    4e2c:	b	4ef4 <coda_cursor_read_uint16+0x15c>
    4e30:	sub	r3, fp, #8
    4e34:	mov	r1, r3
    4e38:	ldr	r0, [fp, #-16]
    4e3c:	bl	e7c <get_read_type>
    4e40:	mov	r3, r0
    4e44:	cmp	r3, #0
    4e48:	beq	4e54 <coda_cursor_read_uint16+0xbc>
    4e4c:	mvn	r3, #0
    4e50:	b	4ef4 <coda_cursor_read_uint16+0x15c>
    4e54:	ldr	r3, [fp, #-8]
    4e58:	cmp	r3, #1
    4e5c:	beq	4e6c <coda_cursor_read_uint16+0xd4>
    4e60:	cmp	r3, #3
    4e64:	beq	4ea4 <coda_cursor_read_uint16+0x10c>
    4e68:	b	4ec4 <coda_cursor_read_uint16+0x12c>
    4e6c:	sub	r3, fp, #9
    4e70:	mov	r1, r3
    4e74:	ldr	r0, [fp, #-16]
    4e78:	bl	1ab4 <read_uint8>
    4e7c:	mov	r3, r0
    4e80:	cmp	r3, #0
    4e84:	beq	4e90 <coda_cursor_read_uint16+0xf8>
    4e88:	mvn	r3, #0
    4e8c:	b	4ef4 <coda_cursor_read_uint16+0x15c>
    4e90:	ldrb	r3, [fp, #-9]
    4e94:	uxth	r2, r3
    4e98:	ldr	r3, [fp, #-20]	; 0xffffffec
    4e9c:	strh	r2, [r3]
    4ea0:	b	4ef0 <coda_cursor_read_uint16+0x158>
    4ea4:	ldr	r1, [fp, #-20]	; 0xffffffec
    4ea8:	ldr	r0, [fp, #-16]
    4eac:	bl	1d1c <read_uint16>
    4eb0:	mov	r3, r0
    4eb4:	cmp	r3, #0
    4eb8:	beq	4eec <coda_cursor_read_uint16+0x154>
    4ebc:	mvn	r3, #0
    4ec0:	b	4ef4 <coda_cursor_read_uint16+0x15c>
    4ec4:	ldr	r3, [fp, #-8]
    4ec8:	mov	r0, r3
    4ecc:	bl	0 <coda_type_get_native_type_name>
    4ed0:	mov	r3, r0
    4ed4:	mov	r2, r3
    4ed8:	ldr	r1, [pc, #52]	; 4f14 <coda_cursor_read_uint16+0x17c>
    4edc:	mvn	r0, #104	; 0x68
    4ee0:	bl	0 <coda_set_error>
    4ee4:	mvn	r3, #0
    4ee8:	b	4ef4 <coda_cursor_read_uint16+0x15c>
    4eec:	nop			; (mov r0, r0)
    4ef0:	mov	r3, #0
    4ef4:	mov	r0, r3
    4ef8:	sub	sp, fp, #4
    4efc:	pop	{fp, pc}
    4f00:	.word	0x00000793
    4f04:	.word	0x000000c8
    4f08:	.word	0x00000118
    4f0c:	.word	0x00000798
    4f10:	.word	0x00000138
    4f14:	.word	0x000001e4

00004f18 <coda_cursor_read_int32>:
    4f18:	push	{fp, lr}
    4f1c:	add	fp, sp, #4
    4f20:	sub	sp, sp, #24
    4f24:	str	r0, [fp, #-24]	; 0xffffffe8
    4f28:	str	r1, [fp, #-28]	; 0xffffffe4
    4f2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4f30:	cmp	r3, #0
    4f34:	beq	4f6c <coda_cursor_read_int32+0x54>
    4f38:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4f3c:	ldr	r3, [r3, #4]
    4f40:	cmp	r3, #0
    4f44:	ble	4f6c <coda_cursor_read_int32+0x54>
    4f48:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4f4c:	ldr	r3, [r3, #4]
    4f50:	sub	r3, r3, #1
    4f54:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4f58:	lsl	r3, r3, #4
    4f5c:	add	r3, r2, r3
    4f60:	ldr	r3, [r3, #8]
    4f64:	cmp	r3, #0
    4f68:	bne	4f88 <coda_cursor_read_int32+0x70>
    4f6c:	ldr	r3, [pc, #448]	; 5134 <coda_cursor_read_int32+0x21c>
    4f70:	ldr	r2, [pc, #448]	; 5138 <coda_cursor_read_int32+0x220>
    4f74:	ldr	r1, [pc, #448]	; 513c <coda_cursor_read_int32+0x224>
    4f78:	mvn	r0, #99	; 0x63
    4f7c:	bl	0 <coda_set_error>
    4f80:	mvn	r3, #0
    4f84:	b	5128 <coda_cursor_read_int32+0x210>
    4f88:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4f8c:	cmp	r3, #0
    4f90:	bne	4fb0 <coda_cursor_read_int32+0x98>
    4f94:	ldr	r3, [pc, #420]	; 5140 <coda_cursor_read_int32+0x228>
    4f98:	ldr	r2, [pc, #408]	; 5138 <coda_cursor_read_int32+0x220>
    4f9c:	ldr	r1, [pc, #416]	; 5144 <coda_cursor_read_int32+0x22c>
    4fa0:	mvn	r0, #99	; 0x63
    4fa4:	bl	0 <coda_set_error>
    4fa8:	mvn	r3, #0
    4fac:	b	5128 <coda_cursor_read_int32+0x210>
    4fb0:	sub	r3, fp, #8
    4fb4:	mov	r1, r3
    4fb8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    4fbc:	bl	e7c <get_read_type>
    4fc0:	mov	r3, r0
    4fc4:	cmp	r3, #0
    4fc8:	beq	4fd4 <coda_cursor_read_int32+0xbc>
    4fcc:	mvn	r3, #0
    4fd0:	b	5128 <coda_cursor_read_int32+0x210>
    4fd4:	ldr	r3, [fp, #-8]
    4fd8:	cmp	r3, #4
    4fdc:	ldrls	pc, [pc, r3, lsl #2]
    4fe0:	b	50f8 <coda_cursor_read_int32+0x1e0>
    4fe4:	.word	0x00004ff8
    4fe8:	.word	0x00005030
    4fec:	.word	0x00005068
    4ff0:	.word	0x000050a0
    4ff4:	.word	0x000050d8
    4ff8:	sub	r3, fp, #9
    4ffc:	mov	r1, r3
    5000:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5004:	bl	1978 <read_int8>
    5008:	mov	r3, r0
    500c:	cmp	r3, #0
    5010:	beq	501c <coda_cursor_read_int32+0x104>
    5014:	mvn	r3, #0
    5018:	b	5128 <coda_cursor_read_int32+0x210>
    501c:	ldrsb	r3, [fp, #-9]
    5020:	mov	r2, r3
    5024:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5028:	str	r2, [r3]
    502c:	b	5124 <coda_cursor_read_int32+0x20c>
    5030:	sub	r3, fp, #10
    5034:	mov	r1, r3
    5038:	ldr	r0, [fp, #-24]	; 0xffffffe8
    503c:	bl	1ab4 <read_uint8>
    5040:	mov	r3, r0
    5044:	cmp	r3, #0
    5048:	beq	5054 <coda_cursor_read_int32+0x13c>
    504c:	mvn	r3, #0
    5050:	b	5128 <coda_cursor_read_int32+0x210>
    5054:	ldrb	r3, [fp, #-10]
    5058:	mov	r2, r3
    505c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5060:	str	r2, [r3]
    5064:	b	5124 <coda_cursor_read_int32+0x20c>
    5068:	sub	r3, fp, #12
    506c:	mov	r1, r3
    5070:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5074:	bl	1bd8 <read_int16>
    5078:	mov	r3, r0
    507c:	cmp	r3, #0
    5080:	beq	508c <coda_cursor_read_int32+0x174>
    5084:	mvn	r3, #0
    5088:	b	5128 <coda_cursor_read_int32+0x210>
    508c:	ldrsh	r3, [fp, #-12]
    5090:	mov	r2, r3
    5094:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5098:	str	r2, [r3]
    509c:	b	5124 <coda_cursor_read_int32+0x20c>
    50a0:	sub	r3, fp, #14
    50a4:	mov	r1, r3
    50a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    50ac:	bl	1d1c <read_uint16>
    50b0:	mov	r3, r0
    50b4:	cmp	r3, #0
    50b8:	beq	50c4 <coda_cursor_read_int32+0x1ac>
    50bc:	mvn	r3, #0
    50c0:	b	5128 <coda_cursor_read_int32+0x210>
    50c4:	ldrh	r3, [fp, #-14]
    50c8:	mov	r2, r3
    50cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    50d0:	str	r2, [r3]
    50d4:	b	5124 <coda_cursor_read_int32+0x20c>
    50d8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    50dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    50e0:	bl	1e40 <read_int32>
    50e4:	mov	r3, r0
    50e8:	cmp	r3, #0
    50ec:	beq	5120 <coda_cursor_read_int32+0x208>
    50f0:	mvn	r3, #0
    50f4:	b	5128 <coda_cursor_read_int32+0x210>
    50f8:	ldr	r3, [fp, #-8]
    50fc:	mov	r0, r3
    5100:	bl	0 <coda_type_get_native_type_name>
    5104:	mov	r3, r0
    5108:	mov	r2, r3
    510c:	ldr	r1, [pc, #52]	; 5148 <coda_cursor_read_int32+0x230>
    5110:	mvn	r0, #104	; 0x68
    5114:	bl	0 <coda_set_error>
    5118:	mvn	r3, #0
    511c:	b	5128 <coda_cursor_read_int32+0x210>
    5120:	nop			; (mov r0, r0)
    5124:	mov	r3, #0
    5128:	mov	r0, r3
    512c:	sub	sp, fp, #4
    5130:	pop	{fp, pc}
    5134:	.word	0x000007d1
    5138:	.word	0x000000c8
    513c:	.word	0x00000118
    5140:	.word	0x000007d6
    5144:	.word	0x00000138
    5148:	.word	0x00000214

0000514c <coda_cursor_read_uint32>:
    514c:	push	{fp, lr}
    5150:	add	fp, sp, #4
    5154:	sub	sp, sp, #16
    5158:	str	r0, [fp, #-16]
    515c:	str	r1, [fp, #-20]	; 0xffffffec
    5160:	ldr	r3, [fp, #-16]
    5164:	cmp	r3, #0
    5168:	beq	51a0 <coda_cursor_read_uint32+0x54>
    516c:	ldr	r3, [fp, #-16]
    5170:	ldr	r3, [r3, #4]
    5174:	cmp	r3, #0
    5178:	ble	51a0 <coda_cursor_read_uint32+0x54>
    517c:	ldr	r3, [fp, #-16]
    5180:	ldr	r3, [r3, #4]
    5184:	sub	r3, r3, #1
    5188:	ldr	r2, [fp, #-16]
    518c:	lsl	r3, r3, #4
    5190:	add	r3, r2, r3
    5194:	ldr	r3, [r3, #8]
    5198:	cmp	r3, #0
    519c:	bne	51bc <coda_cursor_read_uint32+0x70>
    51a0:	ldr	r3, [pc, #328]	; 52f0 <coda_cursor_read_uint32+0x1a4>
    51a4:	ldr	r2, [pc, #328]	; 52f4 <coda_cursor_read_uint32+0x1a8>
    51a8:	ldr	r1, [pc, #328]	; 52f8 <coda_cursor_read_uint32+0x1ac>
    51ac:	mvn	r0, #99	; 0x63
    51b0:	bl	0 <coda_set_error>
    51b4:	mvn	r3, #0
    51b8:	b	52e4 <coda_cursor_read_uint32+0x198>
    51bc:	ldr	r3, [fp, #-20]	; 0xffffffec
    51c0:	cmp	r3, #0
    51c4:	bne	51e4 <coda_cursor_read_uint32+0x98>
    51c8:	ldr	r3, [pc, #300]	; 52fc <coda_cursor_read_uint32+0x1b0>
    51cc:	ldr	r2, [pc, #288]	; 52f4 <coda_cursor_read_uint32+0x1a8>
    51d0:	ldr	r1, [pc, #296]	; 5300 <coda_cursor_read_uint32+0x1b4>
    51d4:	mvn	r0, #99	; 0x63
    51d8:	bl	0 <coda_set_error>
    51dc:	mvn	r3, #0
    51e0:	b	52e4 <coda_cursor_read_uint32+0x198>
    51e4:	sub	r3, fp, #8
    51e8:	mov	r1, r3
    51ec:	ldr	r0, [fp, #-16]
    51f0:	bl	e7c <get_read_type>
    51f4:	mov	r3, r0
    51f8:	cmp	r3, #0
    51fc:	beq	5208 <coda_cursor_read_uint32+0xbc>
    5200:	mvn	r3, #0
    5204:	b	52e4 <coda_cursor_read_uint32+0x198>
    5208:	ldr	r3, [fp, #-8]
    520c:	cmp	r3, #3
    5210:	beq	525c <coda_cursor_read_uint32+0x110>
    5214:	cmp	r3, #5
    5218:	beq	5294 <coda_cursor_read_uint32+0x148>
    521c:	cmp	r3, #1
    5220:	bne	52b4 <coda_cursor_read_uint32+0x168>
    5224:	sub	r3, fp, #9
    5228:	mov	r1, r3
    522c:	ldr	r0, [fp, #-16]
    5230:	bl	1ab4 <read_uint8>
    5234:	mov	r3, r0
    5238:	cmp	r3, #0
    523c:	beq	5248 <coda_cursor_read_uint32+0xfc>
    5240:	mvn	r3, #0
    5244:	b	52e4 <coda_cursor_read_uint32+0x198>
    5248:	ldrb	r3, [fp, #-9]
    524c:	mov	r2, r3
    5250:	ldr	r3, [fp, #-20]	; 0xffffffec
    5254:	str	r2, [r3]
    5258:	b	52e0 <coda_cursor_read_uint32+0x194>
    525c:	sub	r3, fp, #12
    5260:	mov	r1, r3
    5264:	ldr	r0, [fp, #-16]
    5268:	bl	1d1c <read_uint16>
    526c:	mov	r3, r0
    5270:	cmp	r3, #0
    5274:	beq	5280 <coda_cursor_read_uint32+0x134>
    5278:	mvn	r3, #0
    527c:	b	52e4 <coda_cursor_read_uint32+0x198>
    5280:	ldrh	r3, [fp, #-12]
    5284:	mov	r2, r3
    5288:	ldr	r3, [fp, #-20]	; 0xffffffec
    528c:	str	r2, [r3]
    5290:	b	52e0 <coda_cursor_read_uint32+0x194>
    5294:	ldr	r1, [fp, #-20]	; 0xffffffec
    5298:	ldr	r0, [fp, #-16]
    529c:	bl	1f84 <read_uint32>
    52a0:	mov	r3, r0
    52a4:	cmp	r3, #0
    52a8:	beq	52dc <coda_cursor_read_uint32+0x190>
    52ac:	mvn	r3, #0
    52b0:	b	52e4 <coda_cursor_read_uint32+0x198>
    52b4:	ldr	r3, [fp, #-8]
    52b8:	mov	r0, r3
    52bc:	bl	0 <coda_type_get_native_type_name>
    52c0:	mov	r3, r0
    52c4:	mov	r2, r3
    52c8:	ldr	r1, [pc, #52]	; 5304 <coda_cursor_read_uint32+0x1b8>
    52cc:	mvn	r0, #104	; 0x68
    52d0:	bl	0 <coda_set_error>
    52d4:	mvn	r3, #0
    52d8:	b	52e4 <coda_cursor_read_uint32+0x198>
    52dc:	nop			; (mov r0, r0)
    52e0:	mov	r3, #0
    52e4:	mov	r0, r3
    52e8:	sub	sp, fp, #4
    52ec:	pop	{fp, pc}
    52f0:	.word	0x0000082e
    52f4:	.word	0x000000c8
    52f8:	.word	0x00000118
    52fc:	.word	0x00000833
    5300:	.word	0x00000138
    5304:	.word	0x00000244

00005308 <coda_cursor_read_int64>:
    5308:	push	{fp, lr}
    530c:	add	fp, sp, #4
    5310:	sub	sp, sp, #32
    5314:	str	r0, [fp, #-32]	; 0xffffffe0
    5318:	str	r1, [fp, #-36]	; 0xffffffdc
    531c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    5320:	cmp	r3, #0
    5324:	beq	535c <coda_cursor_read_int64+0x54>
    5328:	ldr	r3, [fp, #-32]	; 0xffffffe0
    532c:	ldr	r3, [r3, #4]
    5330:	cmp	r3, #0
    5334:	ble	535c <coda_cursor_read_int64+0x54>
    5338:	ldr	r3, [fp, #-32]	; 0xffffffe0
    533c:	ldr	r3, [r3, #4]
    5340:	sub	r3, r3, #1
    5344:	ldr	r2, [fp, #-32]	; 0xffffffe0
    5348:	lsl	r3, r3, #4
    534c:	add	r3, r2, r3
    5350:	ldr	r3, [r3, #8]
    5354:	cmp	r3, #0
    5358:	bne	5378 <coda_cursor_read_int64+0x70>
    535c:	ldr	r3, [pc, #592]	; 55b4 <coda_cursor_read_int64+0x2ac>
    5360:	ldr	r2, [pc, #592]	; 55b8 <coda_cursor_read_int64+0x2b0>
    5364:	ldr	r1, [pc, #592]	; 55bc <coda_cursor_read_int64+0x2b4>
    5368:	mvn	r0, #99	; 0x63
    536c:	bl	0 <coda_set_error>
    5370:	mvn	r3, #0
    5374:	b	55a8 <coda_cursor_read_int64+0x2a0>
    5378:	ldr	r3, [fp, #-36]	; 0xffffffdc
    537c:	cmp	r3, #0
    5380:	bne	53a0 <coda_cursor_read_int64+0x98>
    5384:	ldr	r3, [pc, #564]	; 55c0 <coda_cursor_read_int64+0x2b8>
    5388:	ldr	r2, [pc, #552]	; 55b8 <coda_cursor_read_int64+0x2b0>
    538c:	ldr	r1, [pc, #560]	; 55c4 <coda_cursor_read_int64+0x2bc>
    5390:	mvn	r0, #99	; 0x63
    5394:	bl	0 <coda_set_error>
    5398:	mvn	r3, #0
    539c:	b	55a8 <coda_cursor_read_int64+0x2a0>
    53a0:	sub	r3, fp, #8
    53a4:	mov	r1, r3
    53a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    53ac:	bl	e7c <get_read_type>
    53b0:	mov	r3, r0
    53b4:	cmp	r3, #0
    53b8:	beq	53c4 <coda_cursor_read_int64+0xbc>
    53bc:	mvn	r3, #0
    53c0:	b	55a8 <coda_cursor_read_int64+0x2a0>
    53c4:	ldr	r3, [fp, #-8]
    53c8:	cmp	r3, #6
    53cc:	ldrls	pc, [pc, r3, lsl #2]
    53d0:	b	5578 <coda_cursor_read_int64+0x270>
    53d4:	.word	0x000053f0
    53d8:	.word	0x0000542c
    53dc:	.word	0x00005468
    53e0:	.word	0x000054a4
    53e4:	.word	0x000054e0
    53e8:	.word	0x0000551c
    53ec:	.word	0x00005558
    53f0:	sub	r3, fp, #9
    53f4:	mov	r1, r3
    53f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    53fc:	bl	1978 <read_int8>
    5400:	mov	r3, r0
    5404:	cmp	r3, #0
    5408:	beq	5414 <coda_cursor_read_int64+0x10c>
    540c:	mvn	r3, #0
    5410:	b	55a8 <coda_cursor_read_int64+0x2a0>
    5414:	ldrsb	r3, [fp, #-9]
    5418:	sxtb	r2, r3
    541c:	asr	r3, r2, #31
    5420:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5424:	strd	r2, [r1]
    5428:	b	55a4 <coda_cursor_read_int64+0x29c>
    542c:	sub	r3, fp, #10
    5430:	mov	r1, r3
    5434:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5438:	bl	1ab4 <read_uint8>
    543c:	mov	r3, r0
    5440:	cmp	r3, #0
    5444:	beq	5450 <coda_cursor_read_int64+0x148>
    5448:	mvn	r3, #0
    544c:	b	55a8 <coda_cursor_read_int64+0x2a0>
    5450:	ldrb	r3, [fp, #-10]
    5454:	uxtb	r2, r3
    5458:	mov	r3, #0
    545c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5460:	strd	r2, [r1]
    5464:	b	55a4 <coda_cursor_read_int64+0x29c>
    5468:	sub	r3, fp, #12
    546c:	mov	r1, r3
    5470:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5474:	bl	1bd8 <read_int16>
    5478:	mov	r3, r0
    547c:	cmp	r3, #0
    5480:	beq	548c <coda_cursor_read_int64+0x184>
    5484:	mvn	r3, #0
    5488:	b	55a8 <coda_cursor_read_int64+0x2a0>
    548c:	ldrsh	r3, [fp, #-12]
    5490:	sxth	r2, r3
    5494:	asr	r3, r2, #31
    5498:	ldr	r1, [fp, #-36]	; 0xffffffdc
    549c:	strd	r2, [r1]
    54a0:	b	55a4 <coda_cursor_read_int64+0x29c>
    54a4:	sub	r3, fp, #14
    54a8:	mov	r1, r3
    54ac:	ldr	r0, [fp, #-32]	; 0xffffffe0
    54b0:	bl	1d1c <read_uint16>
    54b4:	mov	r3, r0
    54b8:	cmp	r3, #0
    54bc:	beq	54c8 <coda_cursor_read_int64+0x1c0>
    54c0:	mvn	r3, #0
    54c4:	b	55a8 <coda_cursor_read_int64+0x2a0>
    54c8:	ldrh	r3, [fp, #-14]
    54cc:	uxth	r2, r3
    54d0:	mov	r3, #0
    54d4:	ldr	r1, [fp, #-36]	; 0xffffffdc
    54d8:	strd	r2, [r1]
    54dc:	b	55a4 <coda_cursor_read_int64+0x29c>
    54e0:	sub	r3, fp, #20
    54e4:	mov	r1, r3
    54e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    54ec:	bl	1e40 <read_int32>
    54f0:	mov	r3, r0
    54f4:	cmp	r3, #0
    54f8:	beq	5504 <coda_cursor_read_int64+0x1fc>
    54fc:	mvn	r3, #0
    5500:	b	55a8 <coda_cursor_read_int64+0x2a0>
    5504:	ldr	r3, [fp, #-20]	; 0xffffffec
    5508:	mov	r2, r3
    550c:	asr	r3, r2, #31
    5510:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5514:	strd	r2, [r1]
    5518:	b	55a4 <coda_cursor_read_int64+0x29c>
    551c:	sub	r3, fp, #24
    5520:	mov	r1, r3
    5524:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5528:	bl	1f84 <read_uint32>
    552c:	mov	r3, r0
    5530:	cmp	r3, #0
    5534:	beq	5540 <coda_cursor_read_int64+0x238>
    5538:	mvn	r3, #0
    553c:	b	55a8 <coda_cursor_read_int64+0x2a0>
    5540:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5544:	mov	r2, r3
    5548:	mov	r3, #0
    554c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5550:	strd	r2, [r1]
    5554:	b	55a4 <coda_cursor_read_int64+0x29c>
    5558:	ldr	r1, [fp, #-36]	; 0xffffffdc
    555c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5560:	bl	20a8 <read_int64>
    5564:	mov	r3, r0
    5568:	cmp	r3, #0
    556c:	beq	55a0 <coda_cursor_read_int64+0x298>
    5570:	mvn	r3, #0
    5574:	b	55a8 <coda_cursor_read_int64+0x2a0>
    5578:	ldr	r3, [fp, #-8]
    557c:	mov	r0, r3
    5580:	bl	0 <coda_type_get_native_type_name>
    5584:	mov	r3, r0
    5588:	mov	r2, r3
    558c:	ldr	r1, [pc, #52]	; 55c8 <coda_cursor_read_int64+0x2c0>
    5590:	mvn	r0, #104	; 0x68
    5594:	bl	0 <coda_set_error>
    5598:	mvn	r3, #0
    559c:	b	55a8 <coda_cursor_read_int64+0x2a0>
    55a0:	nop			; (mov r0, r0)
    55a4:	mov	r3, #0
    55a8:	mov	r0, r3
    55ac:	sub	sp, fp, #4
    55b0:	pop	{fp, pc}
    55b4:	.word	0x00000879
    55b8:	.word	0x000000c8
    55bc:	.word	0x00000118
    55c0:	.word	0x0000087e
    55c4:	.word	0x00000138
    55c8:	.word	0x00000274

000055cc <coda_cursor_read_uint64>:
    55cc:	push	{fp, lr}
    55d0:	add	fp, sp, #4
    55d4:	sub	sp, sp, #24
    55d8:	str	r0, [fp, #-24]	; 0xffffffe8
    55dc:	str	r1, [fp, #-28]	; 0xffffffe4
    55e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    55e4:	cmp	r3, #0
    55e8:	beq	5620 <coda_cursor_read_uint64+0x54>
    55ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
    55f0:	ldr	r3, [r3, #4]
    55f4:	cmp	r3, #0
    55f8:	ble	5620 <coda_cursor_read_uint64+0x54>
    55fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5600:	ldr	r3, [r3, #4]
    5604:	sub	r3, r3, #1
    5608:	ldr	r2, [fp, #-24]	; 0xffffffe8
    560c:	lsl	r3, r3, #4
    5610:	add	r3, r2, r3
    5614:	ldr	r3, [r3, #8]
    5618:	cmp	r3, #0
    561c:	bne	563c <coda_cursor_read_uint64+0x70>
    5620:	ldr	r3, [pc, #416]	; 57c8 <coda_cursor_read_uint64+0x1fc>
    5624:	ldr	r2, [pc, #416]	; 57cc <coda_cursor_read_uint64+0x200>
    5628:	ldr	r1, [pc, #416]	; 57d0 <coda_cursor_read_uint64+0x204>
    562c:	mvn	r0, #99	; 0x63
    5630:	bl	0 <coda_set_error>
    5634:	mvn	r3, #0
    5638:	b	57bc <coda_cursor_read_uint64+0x1f0>
    563c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5640:	cmp	r3, #0
    5644:	bne	5664 <coda_cursor_read_uint64+0x98>
    5648:	ldr	r3, [pc, #388]	; 57d4 <coda_cursor_read_uint64+0x208>
    564c:	ldr	r2, [pc, #376]	; 57cc <coda_cursor_read_uint64+0x200>
    5650:	ldr	r1, [pc, #384]	; 57d8 <coda_cursor_read_uint64+0x20c>
    5654:	mvn	r0, #99	; 0x63
    5658:	bl	0 <coda_set_error>
    565c:	mvn	r3, #0
    5660:	b	57bc <coda_cursor_read_uint64+0x1f0>
    5664:	sub	r3, fp, #8
    5668:	mov	r1, r3
    566c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5670:	bl	e7c <get_read_type>
    5674:	mov	r3, r0
    5678:	cmp	r3, #0
    567c:	beq	5688 <coda_cursor_read_uint64+0xbc>
    5680:	mvn	r3, #0
    5684:	b	57bc <coda_cursor_read_uint64+0x1f0>
    5688:	ldr	r3, [fp, #-8]
    568c:	sub	r3, r3, #1
    5690:	cmp	r3, #6
    5694:	ldrls	pc, [pc, r3, lsl #2]
    5698:	b	578c <coda_cursor_read_uint64+0x1c0>
    569c:	.word	0x000056b8
    56a0:	.word	0x0000578c
    56a4:	.word	0x000056f4
    56a8:	.word	0x0000578c
    56ac:	.word	0x00005730
    56b0:	.word	0x0000578c
    56b4:	.word	0x0000576c
    56b8:	sub	r3, fp, #9
    56bc:	mov	r1, r3
    56c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    56c4:	bl	1ab4 <read_uint8>
    56c8:	mov	r3, r0
    56cc:	cmp	r3, #0
    56d0:	beq	56dc <coda_cursor_read_uint64+0x110>
    56d4:	mvn	r3, #0
    56d8:	b	57bc <coda_cursor_read_uint64+0x1f0>
    56dc:	ldrb	r3, [fp, #-9]
    56e0:	uxtb	r2, r3
    56e4:	mov	r3, #0
    56e8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    56ec:	strd	r2, [r1]
    56f0:	b	57b8 <coda_cursor_read_uint64+0x1ec>
    56f4:	sub	r3, fp, #12
    56f8:	mov	r1, r3
    56fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5700:	bl	1d1c <read_uint16>
    5704:	mov	r3, r0
    5708:	cmp	r3, #0
    570c:	beq	5718 <coda_cursor_read_uint64+0x14c>
    5710:	mvn	r3, #0
    5714:	b	57bc <coda_cursor_read_uint64+0x1f0>
    5718:	ldrh	r3, [fp, #-12]
    571c:	uxth	r2, r3
    5720:	mov	r3, #0
    5724:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5728:	strd	r2, [r1]
    572c:	b	57b8 <coda_cursor_read_uint64+0x1ec>
    5730:	sub	r3, fp, #16
    5734:	mov	r1, r3
    5738:	ldr	r0, [fp, #-24]	; 0xffffffe8
    573c:	bl	1f84 <read_uint32>
    5740:	mov	r3, r0
    5744:	cmp	r3, #0
    5748:	beq	5754 <coda_cursor_read_uint64+0x188>
    574c:	mvn	r3, #0
    5750:	b	57bc <coda_cursor_read_uint64+0x1f0>
    5754:	ldr	r3, [fp, #-16]
    5758:	mov	r2, r3
    575c:	mov	r3, #0
    5760:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5764:	strd	r2, [r1]
    5768:	b	57b8 <coda_cursor_read_uint64+0x1ec>
    576c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5770:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5774:	bl	21c8 <read_uint64>
    5778:	mov	r3, r0
    577c:	cmp	r3, #0
    5780:	beq	57b4 <coda_cursor_read_uint64+0x1e8>
    5784:	mvn	r3, #0
    5788:	b	57bc <coda_cursor_read_uint64+0x1f0>
    578c:	ldr	r3, [fp, #-8]
    5790:	mov	r0, r3
    5794:	bl	0 <coda_type_get_native_type_name>
    5798:	mov	r3, r0
    579c:	mov	r2, r3
    57a0:	ldr	r1, [pc, #52]	; 57dc <coda_cursor_read_uint64+0x210>
    57a4:	mvn	r0, #104	; 0x68
    57a8:	bl	0 <coda_set_error>
    57ac:	mvn	r3, #0
    57b0:	b	57bc <coda_cursor_read_uint64+0x1f0>
    57b4:	nop			; (mov r0, r0)
    57b8:	mov	r3, #0
    57bc:	mov	r0, r3
    57c0:	sub	sp, fp, #4
    57c4:	pop	{fp, pc}
    57c8:	.word	0x000008ed
    57cc:	.word	0x000000c8
    57d0:	.word	0x00000118
    57d4:	.word	0x000008f2
    57d8:	.word	0x00000138
    57dc:	.word	0x000002a4

000057e0 <coda_cursor_read_float>:
    57e0:	push	{fp, lr}
    57e4:	add	fp, sp, #4
    57e8:	sub	sp, sp, #64	; 0x40
    57ec:	str	r0, [fp, #-64]	; 0xffffffc0
    57f0:	str	r1, [fp, #-68]	; 0xffffffbc
    57f4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    57f8:	cmp	r3, #0
    57fc:	beq	5834 <coda_cursor_read_float+0x54>
    5800:	ldr	r3, [fp, #-64]	; 0xffffffc0
    5804:	ldr	r3, [r3, #4]
    5808:	cmp	r3, #0
    580c:	ble	5834 <coda_cursor_read_float+0x54>
    5810:	ldr	r3, [fp, #-64]	; 0xffffffc0
    5814:	ldr	r3, [r3, #4]
    5818:	sub	r3, r3, #1
    581c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    5820:	lsl	r3, r3, #4
    5824:	add	r3, r2, r3
    5828:	ldr	r3, [r3, #8]
    582c:	cmp	r3, #0
    5830:	bne	5850 <coda_cursor_read_float+0x70>
    5834:	ldr	r3, [pc, #872]	; 5ba4 <coda_cursor_read_float+0x3c4>
    5838:	ldr	r2, [pc, #872]	; 5ba8 <coda_cursor_read_float+0x3c8>
    583c:	ldr	r1, [pc, #872]	; 5bac <coda_cursor_read_float+0x3cc>
    5840:	mvn	r0, #99	; 0x63
    5844:	bl	0 <coda_set_error>
    5848:	mvn	r3, #0
    584c:	b	5b98 <coda_cursor_read_float+0x3b8>
    5850:	ldr	r3, [fp, #-68]	; 0xffffffbc
    5854:	cmp	r3, #0
    5858:	bne	5878 <coda_cursor_read_float+0x98>
    585c:	ldr	r3, [pc, #844]	; 5bb0 <coda_cursor_read_float+0x3d0>
    5860:	ldr	r2, [pc, #832]	; 5ba8 <coda_cursor_read_float+0x3c8>
    5864:	ldr	r1, [pc, #840]	; 5bb4 <coda_cursor_read_float+0x3d4>
    5868:	mvn	r0, #99	; 0x63
    586c:	bl	0 <coda_set_error>
    5870:	mvn	r3, #0
    5874:	b	5b98 <coda_cursor_read_float+0x3b8>
    5878:	sub	r2, fp, #12
    587c:	sub	r3, fp, #8
    5880:	mov	r1, r3
    5884:	ldr	r0, [fp, #-64]	; 0xffffffc0
    5888:	bl	f7c <get_unconverted_read_type>
    588c:	mov	r3, r0
    5890:	cmp	r3, #0
    5894:	beq	58a0 <coda_cursor_read_float+0xc0>
    5898:	mvn	r3, #0
    589c:	b	5b98 <coda_cursor_read_float+0x3b8>
    58a0:	ldr	r3, [fp, #-12]
    58a4:	cmp	r3, #0
    58a8:	beq	58e8 <coda_cursor_read_float+0x108>
    58ac:	sub	r3, fp, #20
    58b0:	mov	r1, r3
    58b4:	ldr	r0, [fp, #-64]	; 0xffffffc0
    58b8:	bl	5bbc <coda_cursor_read_double>
    58bc:	mov	r3, r0
    58c0:	cmp	r3, #0
    58c4:	beq	58d0 <coda_cursor_read_float+0xf0>
    58c8:	mvn	r3, #0
    58cc:	b	5b98 <coda_cursor_read_float+0x3b8>
    58d0:	vldr	d7, [fp, #-20]	; 0xffffffec
    58d4:	vcvt.f32.f64	s15, d7
    58d8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    58dc:	vstr	s15, [r3]
    58e0:	mov	r3, #0
    58e4:	b	5b98 <coda_cursor_read_float+0x3b8>
    58e8:	ldr	r3, [fp, #-8]
    58ec:	cmp	r3, #9
    58f0:	ldrls	pc, [pc, r3, lsl #2]
    58f4:	b	5b68 <coda_cursor_read_float+0x388>
    58f8:	.word	0x00005920
    58fc:	.word	0x0000595c
    5900:	.word	0x00005998
    5904:	.word	0x000059d4
    5908:	.word	0x00005a10
    590c:	.word	0x00005a4c
    5910:	.word	0x00005a88
    5914:	.word	0x00005acc
    5918:	.word	0x00005b10
    591c:	.word	0x00005b30
    5920:	sub	r3, fp, #21
    5924:	mov	r1, r3
    5928:	ldr	r0, [fp, #-64]	; 0xffffffc0
    592c:	bl	1978 <read_int8>
    5930:	mov	r3, r0
    5934:	cmp	r3, #0
    5938:	beq	5944 <coda_cursor_read_float+0x164>
    593c:	mvn	r3, #0
    5940:	b	5b98 <coda_cursor_read_float+0x3b8>
    5944:	ldrsb	r3, [fp, #-21]	; 0xffffffeb
    5948:	vmov	s15, r3
    594c:	vcvt.f32.s32	s15, s15
    5950:	ldr	r3, [fp, #-68]	; 0xffffffbc
    5954:	vstr	s15, [r3]
    5958:	b	5b94 <coda_cursor_read_float+0x3b4>
    595c:	sub	r3, fp, #22
    5960:	mov	r1, r3
    5964:	ldr	r0, [fp, #-64]	; 0xffffffc0
    5968:	bl	1ab4 <read_uint8>
    596c:	mov	r3, r0
    5970:	cmp	r3, #0
    5974:	beq	5980 <coda_cursor_read_float+0x1a0>
    5978:	mvn	r3, #0
    597c:	b	5b98 <coda_cursor_read_float+0x3b8>
    5980:	ldrb	r3, [fp, #-22]	; 0xffffffea
    5984:	vmov	s15, r3
    5988:	vcvt.f32.u32	s15, s15
    598c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    5990:	vstr	s15, [r3]
    5994:	b	5b94 <coda_cursor_read_float+0x3b4>
    5998:	sub	r3, fp, #24
    599c:	mov	r1, r3
    59a0:	ldr	r0, [fp, #-64]	; 0xffffffc0
    59a4:	bl	1bd8 <read_int16>
    59a8:	mov	r3, r0
    59ac:	cmp	r3, #0
    59b0:	beq	59bc <coda_cursor_read_float+0x1dc>
    59b4:	mvn	r3, #0
    59b8:	b	5b98 <coda_cursor_read_float+0x3b8>
    59bc:	ldrsh	r3, [fp, #-24]	; 0xffffffe8
    59c0:	vmov	s15, r3
    59c4:	vcvt.f32.s32	s15, s15
    59c8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    59cc:	vstr	s15, [r3]
    59d0:	b	5b94 <coda_cursor_read_float+0x3b4>
    59d4:	sub	r3, fp, #26
    59d8:	mov	r1, r3
    59dc:	ldr	r0, [fp, #-64]	; 0xffffffc0
    59e0:	bl	1d1c <read_uint16>
    59e4:	mov	r3, r0
    59e8:	cmp	r3, #0
    59ec:	beq	59f8 <coda_cursor_read_float+0x218>
    59f0:	mvn	r3, #0
    59f4:	b	5b98 <coda_cursor_read_float+0x3b8>
    59f8:	ldrh	r3, [fp, #-26]	; 0xffffffe6
    59fc:	vmov	s15, r3
    5a00:	vcvt.f32.u32	s15, s15
    5a04:	ldr	r3, [fp, #-68]	; 0xffffffbc
    5a08:	vstr	s15, [r3]
    5a0c:	b	5b94 <coda_cursor_read_float+0x3b4>
    5a10:	sub	r3, fp, #32
    5a14:	mov	r1, r3
    5a18:	ldr	r0, [fp, #-64]	; 0xffffffc0
    5a1c:	bl	1e40 <read_int32>
    5a20:	mov	r3, r0
    5a24:	cmp	r3, #0
    5a28:	beq	5a34 <coda_cursor_read_float+0x254>
    5a2c:	mvn	r3, #0
    5a30:	b	5b98 <coda_cursor_read_float+0x3b8>
    5a34:	ldr	r3, [fp, #-32]	; 0xffffffe0
    5a38:	vmov	s15, r3
    5a3c:	vcvt.f32.s32	s15, s15
    5a40:	ldr	r3, [fp, #-68]	; 0xffffffbc
    5a44:	vstr	s15, [r3]
    5a48:	b	5b94 <coda_cursor_read_float+0x3b4>
    5a4c:	sub	r3, fp, #36	; 0x24
    5a50:	mov	r1, r3
    5a54:	ldr	r0, [fp, #-64]	; 0xffffffc0
    5a58:	bl	1f84 <read_uint32>
    5a5c:	mov	r3, r0
    5a60:	cmp	r3, #0
    5a64:	beq	5a70 <coda_cursor_read_float+0x290>
    5a68:	mvn	r3, #0
    5a6c:	b	5b98 <coda_cursor_read_float+0x3b8>
    5a70:	ldr	r3, [fp, #-36]	; 0xffffffdc
    5a74:	vmov	s15, r3
    5a78:	vcvt.f32.u32	s15, s15
    5a7c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    5a80:	vstr	s15, [r3]
    5a84:	b	5b94 <coda_cursor_read_float+0x3b4>
    5a88:	sub	r3, fp, #44	; 0x2c
    5a8c:	mov	r1, r3
    5a90:	ldr	r0, [fp, #-64]	; 0xffffffc0
    5a94:	bl	20a8 <read_int64>
    5a98:	mov	r3, r0
    5a9c:	cmp	r3, #0
    5aa0:	beq	5aac <coda_cursor_read_float+0x2cc>
    5aa4:	mvn	r3, #0
    5aa8:	b	5b98 <coda_cursor_read_float+0x3b8>
    5aac:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    5ab0:	mov	r0, r2
    5ab4:	mov	r1, r3
    5ab8:	bl	0 <__aeabi_l2f>
    5abc:	mov	r2, r0
    5ac0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    5ac4:	str	r2, [r3]
    5ac8:	b	5b94 <coda_cursor_read_float+0x3b4>
    5acc:	sub	r3, fp, #52	; 0x34
    5ad0:	mov	r1, r3
    5ad4:	ldr	r0, [fp, #-64]	; 0xffffffc0
    5ad8:	bl	21c8 <read_uint64>
    5adc:	mov	r3, r0
    5ae0:	cmp	r3, #0
    5ae4:	beq	5af0 <coda_cursor_read_float+0x310>
    5ae8:	mvn	r3, #0
    5aec:	b	5b98 <coda_cursor_read_float+0x3b8>
    5af0:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    5af4:	mov	r0, r2
    5af8:	mov	r1, r3
    5afc:	bl	0 <__aeabi_l2f>
    5b00:	mov	r2, r0
    5b04:	ldr	r3, [fp, #-68]	; 0xffffffbc
    5b08:	str	r2, [r3]
    5b0c:	b	5b94 <coda_cursor_read_float+0x3b4>
    5b10:	ldr	r1, [fp, #-68]	; 0xffffffbc
    5b14:	ldr	r0, [fp, #-64]	; 0xffffffc0
    5b18:	bl	22d0 <read_float>
    5b1c:	mov	r3, r0
    5b20:	cmp	r3, #0
    5b24:	beq	5b90 <coda_cursor_read_float+0x3b0>
    5b28:	mvn	r3, #0
    5b2c:	b	5b98 <coda_cursor_read_float+0x3b8>
    5b30:	sub	r3, fp, #60	; 0x3c
    5b34:	mov	r1, r3
    5b38:	ldr	r0, [fp, #-64]	; 0xffffffc0
    5b3c:	bl	2424 <read_double>
    5b40:	mov	r3, r0
    5b44:	cmp	r3, #0
    5b48:	beq	5b54 <coda_cursor_read_float+0x374>
    5b4c:	mvn	r3, #0
    5b50:	b	5b98 <coda_cursor_read_float+0x3b8>
    5b54:	vldr	d7, [fp, #-60]	; 0xffffffc4
    5b58:	vcvt.f32.f64	s15, d7
    5b5c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    5b60:	vstr	s15, [r3]
    5b64:	b	5b94 <coda_cursor_read_float+0x3b4>
    5b68:	ldr	r3, [fp, #-8]
    5b6c:	mov	r0, r3
    5b70:	bl	0 <coda_type_get_native_type_name>
    5b74:	mov	r3, r0
    5b78:	mov	r2, r3
    5b7c:	ldr	r1, [pc, #52]	; 5bb8 <coda_cursor_read_float+0x3d8>
    5b80:	mvn	r0, #104	; 0x68
    5b84:	bl	0 <coda_set_error>
    5b88:	mvn	r3, #0
    5b8c:	b	5b98 <coda_cursor_read_float+0x3b8>
    5b90:	nop			; (mov r0, r0)
    5b94:	mov	r3, #0
    5b98:	mov	r0, r3
    5b9c:	sub	sp, fp, #4
    5ba0:	pop	{fp, pc}
    5ba4:	.word	0x00000947
    5ba8:	.word	0x000000c8
    5bac:	.word	0x00000118
    5bb0:	.word	0x0000094c
    5bb4:	.word	0x00000138
    5bb8:	.word	0x000002d4

00005bbc <coda_cursor_read_double>:
    5bbc:	push	{fp, lr}
    5bc0:	add	fp, sp, #4
    5bc4:	sub	sp, sp, #56	; 0x38
    5bc8:	str	r0, [fp, #-56]	; 0xffffffc8
    5bcc:	str	r1, [fp, #-60]	; 0xffffffc4
    5bd0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    5bd4:	cmp	r3, #0
    5bd8:	beq	5c10 <coda_cursor_read_double+0x54>
    5bdc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    5be0:	ldr	r3, [r3, #4]
    5be4:	cmp	r3, #0
    5be8:	ble	5c10 <coda_cursor_read_double+0x54>
    5bec:	ldr	r3, [fp, #-56]	; 0xffffffc8
    5bf0:	ldr	r3, [r3, #4]
    5bf4:	sub	r3, r3, #1
    5bf8:	ldr	r2, [fp, #-56]	; 0xffffffc8
    5bfc:	lsl	r3, r3, #4
    5c00:	add	r3, r2, r3
    5c04:	ldr	r3, [r3, #8]
    5c08:	cmp	r3, #0
    5c0c:	bne	5c2c <coda_cursor_read_double+0x70>
    5c10:	ldr	r3, [pc, #920]	; 5fb0 <coda_cursor_read_double+0x3f4>
    5c14:	ldr	r2, [pc, #920]	; 5fb4 <coda_cursor_read_double+0x3f8>
    5c18:	ldr	r1, [pc, #920]	; 5fb8 <coda_cursor_read_double+0x3fc>
    5c1c:	mvn	r0, #99	; 0x63
    5c20:	bl	0 <coda_set_error>
    5c24:	mvn	r3, #0
    5c28:	b	5fa4 <coda_cursor_read_double+0x3e8>
    5c2c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    5c30:	cmp	r3, #0
    5c34:	bne	5c54 <coda_cursor_read_double+0x98>
    5c38:	ldr	r3, [pc, #892]	; 5fbc <coda_cursor_read_double+0x400>
    5c3c:	ldr	r2, [pc, #880]	; 5fb4 <coda_cursor_read_double+0x3f8>
    5c40:	ldr	r1, [pc, #888]	; 5fc0 <coda_cursor_read_double+0x404>
    5c44:	mvn	r0, #99	; 0x63
    5c48:	bl	0 <coda_set_error>
    5c4c:	mvn	r3, #0
    5c50:	b	5fa4 <coda_cursor_read_double+0x3e8>
    5c54:	sub	r2, fp, #12
    5c58:	sub	r3, fp, #8
    5c5c:	mov	r1, r3
    5c60:	ldr	r0, [fp, #-56]	; 0xffffffc8
    5c64:	bl	f7c <get_unconverted_read_type>
    5c68:	mov	r3, r0
    5c6c:	cmp	r3, #0
    5c70:	beq	5c7c <coda_cursor_read_double+0xc0>
    5c74:	mvn	r3, #0
    5c78:	b	5fa4 <coda_cursor_read_double+0x3e8>
    5c7c:	ldr	r3, [fp, #-8]
    5c80:	cmp	r3, #9
    5c84:	ldrls	pc, [pc, r3, lsl #2]
    5c88:	b	5f04 <coda_cursor_read_double+0x348>
    5c8c:	.word	0x00005cb4
    5c90:	.word	0x00005cf0
    5c94:	.word	0x00005d2c
    5c98:	.word	0x00005d68
    5c9c:	.word	0x00005da4
    5ca0:	.word	0x00005de0
    5ca4:	.word	0x00005e1c
    5ca8:	.word	0x00005e64
    5cac:	.word	0x00005eac
    5cb0:	.word	0x00005ee4
    5cb4:	sub	r3, fp, #13
    5cb8:	mov	r1, r3
    5cbc:	ldr	r0, [fp, #-56]	; 0xffffffc8
    5cc0:	bl	1978 <read_int8>
    5cc4:	mov	r3, r0
    5cc8:	cmp	r3, #0
    5ccc:	beq	5cd8 <coda_cursor_read_double+0x11c>
    5cd0:	mvn	r3, #0
    5cd4:	b	5fa4 <coda_cursor_read_double+0x3e8>
    5cd8:	ldrsb	r3, [fp, #-13]
    5cdc:	vmov	s15, r3
    5ce0:	vcvt.f64.s32	d7, s15
    5ce4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    5ce8:	vstr	d7, [r3]
    5cec:	b	5f30 <coda_cursor_read_double+0x374>
    5cf0:	sub	r3, fp, #14
    5cf4:	mov	r1, r3
    5cf8:	ldr	r0, [fp, #-56]	; 0xffffffc8
    5cfc:	bl	1ab4 <read_uint8>
    5d00:	mov	r3, r0
    5d04:	cmp	r3, #0
    5d08:	beq	5d14 <coda_cursor_read_double+0x158>
    5d0c:	mvn	r3, #0
    5d10:	b	5fa4 <coda_cursor_read_double+0x3e8>
    5d14:	ldrb	r3, [fp, #-14]
    5d18:	vmov	s15, r3
    5d1c:	vcvt.f64.u32	d7, s15
    5d20:	ldr	r3, [fp, #-60]	; 0xffffffc4
    5d24:	vstr	d7, [r3]
    5d28:	b	5f30 <coda_cursor_read_double+0x374>
    5d2c:	sub	r3, fp, #16
    5d30:	mov	r1, r3
    5d34:	ldr	r0, [fp, #-56]	; 0xffffffc8
    5d38:	bl	1bd8 <read_int16>
    5d3c:	mov	r3, r0
    5d40:	cmp	r3, #0
    5d44:	beq	5d50 <coda_cursor_read_double+0x194>
    5d48:	mvn	r3, #0
    5d4c:	b	5fa4 <coda_cursor_read_double+0x3e8>
    5d50:	ldrsh	r3, [fp, #-16]
    5d54:	vmov	s15, r3
    5d58:	vcvt.f64.s32	d7, s15
    5d5c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    5d60:	vstr	d7, [r3]
    5d64:	b	5f30 <coda_cursor_read_double+0x374>
    5d68:	sub	r3, fp, #18
    5d6c:	mov	r1, r3
    5d70:	ldr	r0, [fp, #-56]	; 0xffffffc8
    5d74:	bl	1d1c <read_uint16>
    5d78:	mov	r3, r0
    5d7c:	cmp	r3, #0
    5d80:	beq	5d8c <coda_cursor_read_double+0x1d0>
    5d84:	mvn	r3, #0
    5d88:	b	5fa4 <coda_cursor_read_double+0x3e8>
    5d8c:	ldrh	r3, [fp, #-18]	; 0xffffffee
    5d90:	vmov	s15, r3
    5d94:	vcvt.f64.u32	d7, s15
    5d98:	ldr	r3, [fp, #-60]	; 0xffffffc4
    5d9c:	vstr	d7, [r3]
    5da0:	b	5f30 <coda_cursor_read_double+0x374>
    5da4:	sub	r3, fp, #24
    5da8:	mov	r1, r3
    5dac:	ldr	r0, [fp, #-56]	; 0xffffffc8
    5db0:	bl	1e40 <read_int32>
    5db4:	mov	r3, r0
    5db8:	cmp	r3, #0
    5dbc:	beq	5dc8 <coda_cursor_read_double+0x20c>
    5dc0:	mvn	r3, #0
    5dc4:	b	5fa4 <coda_cursor_read_double+0x3e8>
    5dc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5dcc:	vmov	s15, r3
    5dd0:	vcvt.f64.s32	d7, s15
    5dd4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    5dd8:	vstr	d7, [r3]
    5ddc:	b	5f30 <coda_cursor_read_double+0x374>
    5de0:	sub	r3, fp, #28
    5de4:	mov	r1, r3
    5de8:	ldr	r0, [fp, #-56]	; 0xffffffc8
    5dec:	bl	1f84 <read_uint32>
    5df0:	mov	r3, r0
    5df4:	cmp	r3, #0
    5df8:	beq	5e04 <coda_cursor_read_double+0x248>
    5dfc:	mvn	r3, #0
    5e00:	b	5fa4 <coda_cursor_read_double+0x3e8>
    5e04:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5e08:	vmov	s15, r3
    5e0c:	vcvt.f64.u32	d7, s15
    5e10:	ldr	r3, [fp, #-60]	; 0xffffffc4
    5e14:	vstr	d7, [r3]
    5e18:	b	5f30 <coda_cursor_read_double+0x374>
    5e1c:	sub	r3, fp, #36	; 0x24
    5e20:	mov	r1, r3
    5e24:	ldr	r0, [fp, #-56]	; 0xffffffc8
    5e28:	bl	20a8 <read_int64>
    5e2c:	mov	r3, r0
    5e30:	cmp	r3, #0
    5e34:	beq	5e40 <coda_cursor_read_double+0x284>
    5e38:	mvn	r3, #0
    5e3c:	b	5fa4 <coda_cursor_read_double+0x3e8>
    5e40:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    5e44:	mov	r0, r2
    5e48:	mov	r1, r3
    5e4c:	bl	0 <__aeabi_l2d>
    5e50:	mov	r2, r0
    5e54:	mov	r3, r1
    5e58:	ldr	r1, [fp, #-60]	; 0xffffffc4
    5e5c:	strd	r2, [r1]
    5e60:	b	5f30 <coda_cursor_read_double+0x374>
    5e64:	sub	r3, fp, #44	; 0x2c
    5e68:	mov	r1, r3
    5e6c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    5e70:	bl	21c8 <read_uint64>
    5e74:	mov	r3, r0
    5e78:	cmp	r3, #0
    5e7c:	beq	5e88 <coda_cursor_read_double+0x2cc>
    5e80:	mvn	r3, #0
    5e84:	b	5fa4 <coda_cursor_read_double+0x3e8>
    5e88:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    5e8c:	mov	r0, r2
    5e90:	mov	r1, r3
    5e94:	bl	0 <__aeabi_l2d>
    5e98:	mov	r2, r0
    5e9c:	mov	r3, r1
    5ea0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    5ea4:	strd	r2, [r1]
    5ea8:	b	5f30 <coda_cursor_read_double+0x374>
    5eac:	sub	r3, fp, #48	; 0x30
    5eb0:	mov	r1, r3
    5eb4:	ldr	r0, [fp, #-56]	; 0xffffffc8
    5eb8:	bl	22d0 <read_float>
    5ebc:	mov	r3, r0
    5ec0:	cmp	r3, #0
    5ec4:	beq	5ed0 <coda_cursor_read_double+0x314>
    5ec8:	mvn	r3, #0
    5ecc:	b	5fa4 <coda_cursor_read_double+0x3e8>
    5ed0:	vldr	s15, [fp, #-48]	; 0xffffffd0
    5ed4:	vcvt.f64.f32	d7, s15
    5ed8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    5edc:	vstr	d7, [r3]
    5ee0:	b	5f30 <coda_cursor_read_double+0x374>
    5ee4:	ldr	r1, [fp, #-60]	; 0xffffffc4
    5ee8:	ldr	r0, [fp, #-56]	; 0xffffffc8
    5eec:	bl	2424 <read_double>
    5ef0:	mov	r3, r0
    5ef4:	cmp	r3, #0
    5ef8:	beq	5f2c <coda_cursor_read_double+0x370>
    5efc:	mvn	r3, #0
    5f00:	b	5fa4 <coda_cursor_read_double+0x3e8>
    5f04:	ldr	r3, [fp, #-8]
    5f08:	mov	r0, r3
    5f0c:	bl	0 <coda_type_get_native_type_name>
    5f10:	mov	r3, r0
    5f14:	mov	r2, r3
    5f18:	ldr	r1, [pc, #164]	; 5fc4 <coda_cursor_read_double+0x408>
    5f1c:	mvn	r0, #104	; 0x68
    5f20:	bl	0 <coda_set_error>
    5f24:	mvn	r3, #0
    5f28:	b	5fa4 <coda_cursor_read_double+0x3e8>
    5f2c:	nop			; (mov r0, r0)
    5f30:	ldr	r3, [fp, #-12]
    5f34:	cmp	r3, #0
    5f38:	beq	5fa0 <coda_cursor_read_double+0x3e4>
    5f3c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    5f40:	vldr	d6, [r3]
    5f44:	ldr	r3, [fp, #-12]
    5f48:	vldr	d7, [r3, #24]
    5f4c:	vcmp.f64	d6, d7
    5f50:	vmrs	APSR_nzcv, fpscr
    5f54:	bne	5f6c <coda_cursor_read_double+0x3b0>
    5f58:	bl	0 <coda_NaN>
    5f5c:	vmov.f64	d7, d0
    5f60:	ldr	r3, [fp, #-60]	; 0xffffffc4
    5f64:	vstr	d7, [r3]
    5f68:	b	5fa0 <coda_cursor_read_double+0x3e4>
    5f6c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    5f70:	vldr	d6, [r3]
    5f74:	ldr	r3, [fp, #-12]
    5f78:	vldr	d7, [r3]
    5f7c:	vmul.f64	d5, d6, d7
    5f80:	ldr	r3, [fp, #-12]
    5f84:	vldr	d7, [r3, #8]
    5f88:	vdiv.f64	d6, d5, d7
    5f8c:	ldr	r3, [fp, #-12]
    5f90:	vldr	d7, [r3, #16]
    5f94:	vadd.f64	d7, d6, d7
    5f98:	ldr	r3, [fp, #-60]	; 0xffffffc4
    5f9c:	vstr	d7, [r3]
    5fa0:	mov	r3, #0
    5fa4:	mov	r0, r3
    5fa8:	sub	sp, fp, #4
    5fac:	pop	{fp, pc}
    5fb0:	.word	0x000009ef
    5fb4:	.word	0x000000c8
    5fb8:	.word	0x00000118
    5fbc:	.word	0x000009f4
    5fc0:	.word	0x00000138
    5fc4:	.word	0x00000304

00005fc8 <coda_cursor_read_char>:
    5fc8:	push	{fp, lr}
    5fcc:	add	fp, sp, #4
    5fd0:	sub	sp, sp, #16
    5fd4:	str	r0, [fp, #-16]
    5fd8:	str	r1, [fp, #-20]	; 0xffffffec
    5fdc:	ldr	r3, [fp, #-16]
    5fe0:	cmp	r3, #0
    5fe4:	beq	601c <coda_cursor_read_char+0x54>
    5fe8:	ldr	r3, [fp, #-16]
    5fec:	ldr	r3, [r3, #4]
    5ff0:	cmp	r3, #0
    5ff4:	ble	601c <coda_cursor_read_char+0x54>
    5ff8:	ldr	r3, [fp, #-16]
    5ffc:	ldr	r3, [r3, #4]
    6000:	sub	r3, r3, #1
    6004:	ldr	r2, [fp, #-16]
    6008:	lsl	r3, r3, #4
    600c:	add	r3, r2, r3
    6010:	ldr	r3, [r3, #8]
    6014:	cmp	r3, #0
    6018:	bne	6038 <coda_cursor_read_char+0x70>
    601c:	ldr	r3, [pc, #200]	; 60ec <coda_cursor_read_char+0x124>
    6020:	ldr	r2, [pc, #200]	; 60f0 <coda_cursor_read_char+0x128>
    6024:	ldr	r1, [pc, #200]	; 60f4 <coda_cursor_read_char+0x12c>
    6028:	mvn	r0, #99	; 0x63
    602c:	bl	0 <coda_set_error>
    6030:	mvn	r3, #0
    6034:	b	60e0 <coda_cursor_read_char+0x118>
    6038:	ldr	r3, [fp, #-20]	; 0xffffffec
    603c:	cmp	r3, #0
    6040:	bne	6060 <coda_cursor_read_char+0x98>
    6044:	ldr	r3, [pc, #172]	; 60f8 <coda_cursor_read_char+0x130>
    6048:	ldr	r2, [pc, #160]	; 60f0 <coda_cursor_read_char+0x128>
    604c:	ldr	r1, [pc, #168]	; 60fc <coda_cursor_read_char+0x134>
    6050:	mvn	r0, #99	; 0x63
    6054:	bl	0 <coda_set_error>
    6058:	mvn	r3, #0
    605c:	b	60e0 <coda_cursor_read_char+0x118>
    6060:	sub	r3, fp, #8
    6064:	mov	r1, r3
    6068:	ldr	r0, [fp, #-16]
    606c:	bl	e7c <get_read_type>
    6070:	mov	r3, r0
    6074:	cmp	r3, #0
    6078:	beq	6084 <coda_cursor_read_char+0xbc>
    607c:	mvn	r3, #0
    6080:	b	60e0 <coda_cursor_read_char+0x118>
    6084:	ldr	r3, [fp, #-8]
    6088:	cmp	r3, #10
    608c:	bne	60b0 <coda_cursor_read_char+0xe8>
    6090:	ldr	r1, [fp, #-20]	; 0xffffffec
    6094:	ldr	r0, [fp, #-16]
    6098:	bl	2620 <read_char>
    609c:	mov	r3, r0
    60a0:	cmp	r3, #0
    60a4:	beq	60d8 <coda_cursor_read_char+0x110>
    60a8:	mvn	r3, #0
    60ac:	b	60e0 <coda_cursor_read_char+0x118>
    60b0:	ldr	r3, [fp, #-8]
    60b4:	mov	r0, r3
    60b8:	bl	0 <coda_type_get_native_type_name>
    60bc:	mov	r3, r0
    60c0:	mov	r2, r3
    60c4:	ldr	r1, [pc, #52]	; 6100 <coda_cursor_read_char+0x138>
    60c8:	mvn	r0, #104	; 0x68
    60cc:	bl	0 <coda_set_error>
    60d0:	mvn	r3, #0
    60d4:	b	60e0 <coda_cursor_read_char+0x118>
    60d8:	nop			; (mov r0, r0)
    60dc:	mov	r3, #0
    60e0:	mov	r0, r3
    60e4:	sub	sp, fp, #4
    60e8:	pop	{fp, pc}
    60ec:	.word	0x00000a8a
    60f0:	.word	0x000000c8
    60f4:	.word	0x00000118
    60f8:	.word	0x00000a8f
    60fc:	.word	0x00000138
    6100:	.word	0x00000334

00006104 <coda_cursor_read_string>:
    6104:	push	{fp, lr}
    6108:	add	fp, sp, #4
    610c:	sub	sp, sp, #32
    6110:	str	r0, [fp, #-16]
    6114:	str	r1, [fp, #-20]	; 0xffffffec
    6118:	str	r2, [fp, #-24]	; 0xffffffe8
    611c:	ldr	r3, [fp, #-20]	; 0xffffffec
    6120:	cmp	r3, #0
    6124:	bne	6144 <coda_cursor_read_string+0x40>
    6128:	ldr	r3, [pc, #168]	; 61d8 <coda_cursor_read_string+0xd4>
    612c:	ldr	r2, [pc, #168]	; 61dc <coda_cursor_read_string+0xd8>
    6130:	ldr	r1, [pc, #168]	; 61e0 <coda_cursor_read_string+0xdc>
    6134:	mvn	r0, #99	; 0x63
    6138:	bl	0 <coda_set_error>
    613c:	mvn	r3, #0
    6140:	b	61cc <coda_cursor_read_string+0xc8>
    6144:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6148:	cmp	r3, #0
    614c:	bgt	6174 <coda_cursor_read_string+0x70>
    6150:	ldr	r3, [pc, #140]	; 61e4 <coda_cursor_read_string+0xe0>
    6154:	str	r3, [sp]
    6158:	ldr	r3, [pc, #124]	; 61dc <coda_cursor_read_string+0xd8>
    615c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6160:	ldr	r1, [pc, #128]	; 61e8 <coda_cursor_read_string+0xe4>
    6164:	mvn	r0, #99	; 0x63
    6168:	bl	0 <coda_set_error>
    616c:	mvn	r3, #0
    6170:	b	61cc <coda_cursor_read_string+0xc8>
    6174:	sub	r3, fp, #8
    6178:	mov	r1, r3
    617c:	ldr	r0, [fp, #-16]
    6180:	bl	0 <coda_cursor_has_ascii_content>
    6184:	mov	r3, r0
    6188:	cmp	r3, #0
    618c:	beq	6198 <coda_cursor_read_string+0x94>
    6190:	mvn	r3, #0
    6194:	b	61cc <coda_cursor_read_string+0xc8>
    6198:	ldr	r3, [fp, #-8]
    619c:	cmp	r3, #0
    61a0:	bne	61b8 <coda_cursor_read_string+0xb4>
    61a4:	ldr	r1, [pc, #64]	; 61ec <coda_cursor_read_string+0xe8>
    61a8:	mvn	r0, #104	; 0x68
    61ac:	bl	0 <coda_set_error>
    61b0:	mvn	r3, #0
    61b4:	b	61cc <coda_cursor_read_string+0xc8>
    61b8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    61bc:	ldr	r1, [fp, #-20]	; 0xffffffec
    61c0:	ldr	r0, [fp, #-16]
    61c4:	bl	274c <read_string>
    61c8:	mov	r3, r0
    61cc:	mov	r0, r3
    61d0:	sub	sp, fp, #4
    61d4:	pop	{fp, pc}
    61d8:	.word	0x00000abb
    61dc:	.word	0x000000c8
    61e0:	.word	0x00000138
    61e4:	.word	0x00000ac1
    61e8:	.word	0x00000360
    61ec:	.word	0x00000388

000061f0 <coda_cursor_read_bits>:
    61f0:	push	{fp, lr}
    61f4:	add	fp, sp, #4
    61f8:	sub	sp, sp, #24
    61fc:	str	r0, [fp, #-8]
    6200:	str	r1, [fp, #-12]
    6204:	strd	r2, [fp, #-20]	; 0xffffffec
    6208:	ldr	r3, [fp, #-8]
    620c:	cmp	r3, #0
    6210:	beq	6248 <coda_cursor_read_bits+0x58>
    6214:	ldr	r3, [fp, #-8]
    6218:	ldr	r3, [r3, #4]
    621c:	cmp	r3, #0
    6220:	ble	6248 <coda_cursor_read_bits+0x58>
    6224:	ldr	r3, [fp, #-8]
    6228:	ldr	r3, [r3, #4]
    622c:	sub	r3, r3, #1
    6230:	ldr	r2, [fp, #-8]
    6234:	lsl	r3, r3, #4
    6238:	add	r3, r2, r3
    623c:	ldr	r3, [r3, #8]
    6240:	cmp	r3, #0
    6244:	bne	6264 <coda_cursor_read_bits+0x74>
    6248:	ldr	r3, [pc, #328]	; 6398 <coda_cursor_read_bits+0x1a8>
    624c:	ldr	r2, [pc, #328]	; 639c <coda_cursor_read_bits+0x1ac>
    6250:	ldr	r1, [pc, #328]	; 63a0 <coda_cursor_read_bits+0x1b0>
    6254:	mvn	r0, #99	; 0x63
    6258:	bl	0 <coda_set_error>
    625c:	mvn	r3, #0
    6260:	b	638c <coda_cursor_read_bits+0x19c>
    6264:	ldr	r3, [fp, #-12]
    6268:	cmp	r3, #0
    626c:	bne	628c <coda_cursor_read_bits+0x9c>
    6270:	ldr	r3, [pc, #300]	; 63a4 <coda_cursor_read_bits+0x1b4>
    6274:	ldr	r2, [pc, #288]	; 639c <coda_cursor_read_bits+0x1ac>
    6278:	ldr	r1, [pc, #296]	; 63a8 <coda_cursor_read_bits+0x1b8>
    627c:	mvn	r0, #99	; 0x63
    6280:	bl	0 <coda_set_error>
    6284:	mvn	r3, #0
    6288:	b	638c <coda_cursor_read_bits+0x19c>
    628c:	ldrd	r2, [fp, #4]
    6290:	cmp	r2, #0
    6294:	sbcs	r3, r3, #0
    6298:	bge	62b8 <coda_cursor_read_bits+0xc8>
    629c:	ldr	r3, [pc, #264]	; 63ac <coda_cursor_read_bits+0x1bc>
    62a0:	ldr	r2, [pc, #244]	; 639c <coda_cursor_read_bits+0x1ac>
    62a4:	ldr	r1, [pc, #260]	; 63b0 <coda_cursor_read_bits+0x1c0>
    62a8:	mvn	r0, #99	; 0x63
    62ac:	bl	0 <coda_set_error>
    62b0:	mvn	r3, #0
    62b4:	b	638c <coda_cursor_read_bits+0x19c>
    62b8:	ldrd	r2, [fp, #4]
    62bc:	orrs	r3, r2, r3
    62c0:	bne	62cc <coda_cursor_read_bits+0xdc>
    62c4:	mov	r3, #0
    62c8:	b	638c <coda_cursor_read_bits+0x19c>
    62cc:	ldr	r3, [fp, #-8]
    62d0:	ldr	r3, [r3, #4]
    62d4:	sub	r3, r3, #1
    62d8:	ldr	r2, [fp, #-8]
    62dc:	lsl	r3, r3, #4
    62e0:	add	r3, r2, r3
    62e4:	ldr	r3, [r3, #8]
    62e8:	ldr	r3, [r3]
    62ec:	cmp	r3, #100	; 0x64
    62f0:	beq	635c <coda_cursor_read_bits+0x16c>
    62f4:	cmp	r3, #100	; 0x64
    62f8:	bhi	6310 <coda_cursor_read_bits+0x120>
    62fc:	cmp	r3, #0
    6300:	beq	631c <coda_cursor_read_bits+0x12c>
    6304:	cmp	r3, #1
    6308:	beq	633c <coda_cursor_read_bits+0x14c>
    630c:	b	637c <coda_cursor_read_bits+0x18c>
    6310:	cmp	r3, #105	; 0x69
    6314:	bhi	637c <coda_cursor_read_bits+0x18c>
    6318:	b	637c <coda_cursor_read_bits+0x18c>
    631c:	ldrd	r2, [fp, #4]
    6320:	strd	r2, [sp]
    6324:	ldrd	r2, [fp, #-20]	; 0xffffffec
    6328:	ldr	r1, [fp, #-12]
    632c:	ldr	r0, [fp, #-8]
    6330:	bl	0 <coda_ascii_cursor_read_bits>
    6334:	mov	r3, r0
    6338:	b	638c <coda_cursor_read_bits+0x19c>
    633c:	ldrd	r2, [fp, #4]
    6340:	strd	r2, [sp]
    6344:	ldrd	r2, [fp, #-20]	; 0xffffffec
    6348:	ldr	r1, [fp, #-12]
    634c:	ldr	r0, [fp, #-8]
    6350:	bl	0 <coda_bin_cursor_read_bits>
    6354:	mov	r3, r0
    6358:	b	638c <coda_cursor_read_bits+0x19c>
    635c:	ldrd	r2, [fp, #4]
    6360:	strd	r2, [sp]
    6364:	ldrd	r2, [fp, #-20]	; 0xffffffec
    6368:	ldr	r1, [fp, #-12]
    636c:	ldr	r0, [fp, #-8]
    6370:	bl	0 <coda_mem_cursor_read_bits>
    6374:	mov	r3, r0
    6378:	b	638c <coda_cursor_read_bits+0x19c>
    637c:	ldr	r1, [pc, #48]	; 63b4 <coda_cursor_read_bits+0x1c4>
    6380:	mvn	r0, #104	; 0x68
    6384:	bl	0 <coda_set_error>
    6388:	mvn	r3, #0
    638c:	mov	r0, r3
    6390:	sub	sp, fp, #4
    6394:	pop	{fp, pc}
    6398:	.word	0x00000ae5
    639c:	.word	0x000000c8
    63a0:	.word	0x00000118
    63a4:	.word	0x00000aea
    63a8:	.word	0x00000138
    63ac:	.word	0x00000aef
    63b0:	.word	0x000003a8
    63b4:	.word	0x000003d0

000063b8 <coda_cursor_read_bytes>:
    63b8:	push	{fp, lr}
    63bc:	add	fp, sp, #4
    63c0:	sub	sp, sp, #24
    63c4:	str	r0, [fp, #-8]
    63c8:	str	r1, [fp, #-12]
    63cc:	strd	r2, [fp, #-20]	; 0xffffffec
    63d0:	ldr	r3, [fp, #-8]
    63d4:	cmp	r3, #0
    63d8:	beq	6410 <coda_cursor_read_bytes+0x58>
    63dc:	ldr	r3, [fp, #-8]
    63e0:	ldr	r3, [r3, #4]
    63e4:	cmp	r3, #0
    63e8:	ble	6410 <coda_cursor_read_bytes+0x58>
    63ec:	ldr	r3, [fp, #-8]
    63f0:	ldr	r3, [r3, #4]
    63f4:	sub	r3, r3, #1
    63f8:	ldr	r2, [fp, #-8]
    63fc:	lsl	r3, r3, #4
    6400:	add	r3, r2, r3
    6404:	ldr	r3, [r3, #8]
    6408:	cmp	r3, #0
    640c:	bne	642c <coda_cursor_read_bytes+0x74>
    6410:	ldr	r3, [pc, #372]	; 658c <coda_cursor_read_bytes+0x1d4>
    6414:	ldr	r2, [pc, #372]	; 6590 <coda_cursor_read_bytes+0x1d8>
    6418:	ldr	r1, [pc, #372]	; 6594 <coda_cursor_read_bytes+0x1dc>
    641c:	mvn	r0, #99	; 0x63
    6420:	bl	0 <coda_set_error>
    6424:	mvn	r3, #0
    6428:	b	6580 <coda_cursor_read_bytes+0x1c8>
    642c:	ldr	r3, [fp, #-12]
    6430:	cmp	r3, #0
    6434:	bne	6454 <coda_cursor_read_bytes+0x9c>
    6438:	ldr	r3, [pc, #344]	; 6598 <coda_cursor_read_bytes+0x1e0>
    643c:	ldr	r2, [pc, #332]	; 6590 <coda_cursor_read_bytes+0x1d8>
    6440:	ldr	r1, [pc, #340]	; 659c <coda_cursor_read_bytes+0x1e4>
    6444:	mvn	r0, #99	; 0x63
    6448:	bl	0 <coda_set_error>
    644c:	mvn	r3, #0
    6450:	b	6580 <coda_cursor_read_bytes+0x1c8>
    6454:	ldrd	r2, [fp, #-20]	; 0xffffffec
    6458:	cmp	r2, #0
    645c:	sbcs	r3, r3, #0
    6460:	bge	6480 <coda_cursor_read_bytes+0xc8>
    6464:	ldr	r3, [pc, #308]	; 65a0 <coda_cursor_read_bytes+0x1e8>
    6468:	ldr	r2, [pc, #288]	; 6590 <coda_cursor_read_bytes+0x1d8>
    646c:	ldr	r1, [pc, #304]	; 65a4 <coda_cursor_read_bytes+0x1ec>
    6470:	mvn	r0, #99	; 0x63
    6474:	bl	0 <coda_set_error>
    6478:	mvn	r3, #0
    647c:	b	6580 <coda_cursor_read_bytes+0x1c8>
    6480:	ldrd	r2, [fp, #4]
    6484:	cmp	r2, #0
    6488:	sbcs	r3, r3, #0
    648c:	bge	64ac <coda_cursor_read_bytes+0xf4>
    6490:	ldr	r3, [pc, #272]	; 65a8 <coda_cursor_read_bytes+0x1f0>
    6494:	ldr	r2, [pc, #244]	; 6590 <coda_cursor_read_bytes+0x1d8>
    6498:	ldr	r1, [pc, #268]	; 65ac <coda_cursor_read_bytes+0x1f4>
    649c:	mvn	r0, #99	; 0x63
    64a0:	bl	0 <coda_set_error>
    64a4:	mvn	r3, #0
    64a8:	b	6580 <coda_cursor_read_bytes+0x1c8>
    64ac:	ldrd	r2, [fp, #4]
    64b0:	orrs	r3, r2, r3
    64b4:	bne	64c0 <coda_cursor_read_bytes+0x108>
    64b8:	mov	r3, #0
    64bc:	b	6580 <coda_cursor_read_bytes+0x1c8>
    64c0:	ldr	r3, [fp, #-8]
    64c4:	ldr	r3, [r3, #4]
    64c8:	sub	r3, r3, #1
    64cc:	ldr	r2, [fp, #-8]
    64d0:	lsl	r3, r3, #4
    64d4:	add	r3, r2, r3
    64d8:	ldr	r3, [r3, #8]
    64dc:	ldr	r3, [r3]
    64e0:	cmp	r3, #100	; 0x64
    64e4:	beq	6550 <coda_cursor_read_bytes+0x198>
    64e8:	cmp	r3, #100	; 0x64
    64ec:	bhi	6504 <coda_cursor_read_bytes+0x14c>
    64f0:	cmp	r3, #0
    64f4:	beq	6510 <coda_cursor_read_bytes+0x158>
    64f8:	cmp	r3, #1
    64fc:	beq	6530 <coda_cursor_read_bytes+0x178>
    6500:	b	6570 <coda_cursor_read_bytes+0x1b8>
    6504:	cmp	r3, #105	; 0x69
    6508:	bhi	6570 <coda_cursor_read_bytes+0x1b8>
    650c:	b	6570 <coda_cursor_read_bytes+0x1b8>
    6510:	ldrd	r2, [fp, #4]
    6514:	strd	r2, [sp]
    6518:	ldrd	r2, [fp, #-20]	; 0xffffffec
    651c:	ldr	r1, [fp, #-12]
    6520:	ldr	r0, [fp, #-8]
    6524:	bl	0 <coda_ascii_cursor_read_bytes>
    6528:	mov	r3, r0
    652c:	b	6580 <coda_cursor_read_bytes+0x1c8>
    6530:	ldrd	r2, [fp, #4]
    6534:	strd	r2, [sp]
    6538:	ldrd	r2, [fp, #-20]	; 0xffffffec
    653c:	ldr	r1, [fp, #-12]
    6540:	ldr	r0, [fp, #-8]
    6544:	bl	0 <coda_bin_cursor_read_bytes>
    6548:	mov	r3, r0
    654c:	b	6580 <coda_cursor_read_bytes+0x1c8>
    6550:	ldrd	r2, [fp, #4]
    6554:	strd	r2, [sp]
    6558:	ldrd	r2, [fp, #-20]	; 0xffffffec
    655c:	ldr	r1, [fp, #-12]
    6560:	ldr	r0, [fp, #-8]
    6564:	bl	0 <coda_mem_cursor_read_bytes>
    6568:	mov	r3, r0
    656c:	b	6580 <coda_cursor_read_bytes+0x1c8>
    6570:	ldr	r1, [pc, #56]	; 65b0 <coda_cursor_read_bytes+0x1f8>
    6574:	mvn	r0, #104	; 0x68
    6578:	bl	0 <coda_set_error>
    657c:	mvn	r3, #0
    6580:	mov	r0, r3
    6584:	sub	sp, fp, #4
    6588:	pop	{fp, pc}
    658c:	.word	0x00000b1d
    6590:	.word	0x000000c8
    6594:	.word	0x00000118
    6598:	.word	0x00000b22
    659c:	.word	0x00000138
    65a0:	.word	0x00000b27
    65a4:	.word	0x00000404
    65a8:	.word	0x00000b2c
    65ac:	.word	0x00000428
    65b0:	.word	0x0000044c

000065b4 <coda_cursor_read_int8_array>:
    65b4:	push	{fp, lr}
    65b8:	add	fp, sp, #4
    65bc:	sub	sp, sp, #24
    65c0:	str	r0, [fp, #-16]
    65c4:	str	r1, [fp, #-20]	; 0xffffffec
    65c8:	str	r2, [fp, #-24]	; 0xffffffe8
    65cc:	ldr	r3, [fp, #-16]
    65d0:	cmp	r3, #0
    65d4:	beq	660c <coda_cursor_read_int8_array+0x58>
    65d8:	ldr	r3, [fp, #-16]
    65dc:	ldr	r3, [r3, #4]
    65e0:	cmp	r3, #0
    65e4:	ble	660c <coda_cursor_read_int8_array+0x58>
    65e8:	ldr	r3, [fp, #-16]
    65ec:	ldr	r3, [r3, #4]
    65f0:	sub	r3, r3, #1
    65f4:	ldr	r2, [fp, #-16]
    65f8:	lsl	r3, r3, #4
    65fc:	add	r3, r2, r3
    6600:	ldr	r3, [r3, #8]
    6604:	cmp	r3, #0
    6608:	bne	6628 <coda_cursor_read_int8_array+0x74>
    660c:	ldr	r3, [pc, #372]	; 6788 <coda_cursor_read_int8_array+0x1d4>
    6610:	ldr	r2, [pc, #372]	; 678c <coda_cursor_read_int8_array+0x1d8>
    6614:	ldr	r1, [pc, #372]	; 6790 <coda_cursor_read_int8_array+0x1dc>
    6618:	mvn	r0, #99	; 0x63
    661c:	bl	0 <coda_set_error>
    6620:	mvn	r3, #0
    6624:	b	677c <coda_cursor_read_int8_array+0x1c8>
    6628:	ldr	r3, [fp, #-20]	; 0xffffffec
    662c:	cmp	r3, #0
    6630:	bne	6650 <coda_cursor_read_int8_array+0x9c>
    6634:	ldr	r3, [pc, #344]	; 6794 <coda_cursor_read_int8_array+0x1e0>
    6638:	ldr	r2, [pc, #332]	; 678c <coda_cursor_read_int8_array+0x1d8>
    663c:	ldr	r1, [pc, #340]	; 6798 <coda_cursor_read_int8_array+0x1e4>
    6640:	mvn	r0, #99	; 0x63
    6644:	bl	0 <coda_set_error>
    6648:	mvn	r3, #0
    664c:	b	677c <coda_cursor_read_int8_array+0x1c8>
    6650:	ldr	r3, [fp, #-16]
    6654:	ldr	r3, [r3, #4]
    6658:	sub	r3, r3, #1
    665c:	ldr	r2, [fp, #-16]
    6660:	lsl	r3, r3, #4
    6664:	add	r3, r2, r3
    6668:	ldr	r3, [r3, #8]
    666c:	ldr	r3, [r3]
    6670:	cmp	r3, #99	; 0x63
    6674:	bhi	6698 <coda_cursor_read_int8_array+0xe4>
    6678:	ldr	r3, [fp, #-16]
    667c:	ldr	r3, [r3, #4]
    6680:	sub	r3, r3, #1
    6684:	ldr	r2, [fp, #-16]
    6688:	lsl	r3, r3, #4
    668c:	add	r3, r2, r3
    6690:	ldr	r3, [r3, #8]
    6694:	b	66b8 <coda_cursor_read_int8_array+0x104>
    6698:	ldr	r3, [fp, #-16]
    669c:	ldr	r3, [r3, #4]
    66a0:	sub	r3, r3, #1
    66a4:	ldr	r2, [fp, #-16]
    66a8:	lsl	r3, r3, #4
    66ac:	add	r3, r2, r3
    66b0:	ldr	r3, [r3, #8]
    66b4:	ldr	r3, [r3, #4]
    66b8:	str	r3, [fp, #-8]
    66bc:	ldr	r3, [fp, #-8]
    66c0:	ldr	r3, [r3, #8]
    66c4:	cmp	r3, #1
    66c8:	beq	66f8 <coda_cursor_read_int8_array+0x144>
    66cc:	ldr	r3, [fp, #-8]
    66d0:	ldr	r3, [r3, #8]
    66d4:	mov	r0, r3
    66d8:	bl	0 <coda_type_get_class_name>
    66dc:	mov	r3, r0
    66e0:	mov	r2, r3
    66e4:	ldr	r1, [pc, #176]	; 679c <coda_cursor_read_int8_array+0x1e8>
    66e8:	mvn	r0, #104	; 0x68
    66ec:	bl	0 <coda_set_error>
    66f0:	mvn	r3, #0
    66f4:	b	677c <coda_cursor_read_int8_array+0x1c8>
    66f8:	sub	r3, fp, #12
    66fc:	mov	r1, r3
    6700:	ldr	r0, [fp, #-8]
    6704:	bl	1080 <get_array_element_read_type>
    6708:	mov	r3, r0
    670c:	cmp	r3, #0
    6710:	beq	671c <coda_cursor_read_int8_array+0x168>
    6714:	mvn	r3, #0
    6718:	b	677c <coda_cursor_read_int8_array+0x1c8>
    671c:	ldr	r3, [fp, #-12]
    6720:	cmp	r3, #0
    6724:	bne	674c <coda_cursor_read_int8_array+0x198>
    6728:	ldr	r2, [fp, #-24]	; 0xffffffe8
    672c:	ldr	r1, [fp, #-20]	; 0xffffffec
    6730:	ldr	r0, [fp, #-16]
    6734:	bl	28a0 <read_int8_array>
    6738:	mov	r3, r0
    673c:	cmp	r3, #0
    6740:	beq	6774 <coda_cursor_read_int8_array+0x1c0>
    6744:	mvn	r3, #0
    6748:	b	677c <coda_cursor_read_int8_array+0x1c8>
    674c:	ldr	r3, [fp, #-12]
    6750:	mov	r0, r3
    6754:	bl	0 <coda_type_get_native_type_name>
    6758:	mov	r3, r0
    675c:	mov	r2, r3
    6760:	ldr	r1, [pc, #56]	; 67a0 <coda_cursor_read_int8_array+0x1ec>
    6764:	mvn	r0, #104	; 0x68
    6768:	bl	0 <coda_set_error>
    676c:	mvn	r3, #0
    6770:	b	677c <coda_cursor_read_int8_array+0x1c8>
    6774:	nop			; (mov r0, r0)
    6778:	mov	r3, #0
    677c:	mov	r0, r3
    6780:	sub	sp, fp, #4
    6784:	pop	{fp, pc}
    6788:	.word	0x00000b5c
    678c:	.word	0x000000c8
    6790:	.word	0x00000118
    6794:	.word	0x00000b61
    6798:	.word	0x00000138
    679c:	.word	0x00000480
    67a0:	.word	0x00000158

000067a4 <coda_cursor_read_uint8_array>:
    67a4:	push	{fp, lr}
    67a8:	add	fp, sp, #4
    67ac:	sub	sp, sp, #24
    67b0:	str	r0, [fp, #-16]
    67b4:	str	r1, [fp, #-20]	; 0xffffffec
    67b8:	str	r2, [fp, #-24]	; 0xffffffe8
    67bc:	ldr	r3, [fp, #-16]
    67c0:	cmp	r3, #0
    67c4:	beq	67fc <coda_cursor_read_uint8_array+0x58>
    67c8:	ldr	r3, [fp, #-16]
    67cc:	ldr	r3, [r3, #4]
    67d0:	cmp	r3, #0
    67d4:	ble	67fc <coda_cursor_read_uint8_array+0x58>
    67d8:	ldr	r3, [fp, #-16]
    67dc:	ldr	r3, [r3, #4]
    67e0:	sub	r3, r3, #1
    67e4:	ldr	r2, [fp, #-16]
    67e8:	lsl	r3, r3, #4
    67ec:	add	r3, r2, r3
    67f0:	ldr	r3, [r3, #8]
    67f4:	cmp	r3, #0
    67f8:	bne	6818 <coda_cursor_read_uint8_array+0x74>
    67fc:	ldr	r3, [pc, #372]	; 6978 <coda_cursor_read_uint8_array+0x1d4>
    6800:	ldr	r2, [pc, #372]	; 697c <coda_cursor_read_uint8_array+0x1d8>
    6804:	ldr	r1, [pc, #372]	; 6980 <coda_cursor_read_uint8_array+0x1dc>
    6808:	mvn	r0, #99	; 0x63
    680c:	bl	0 <coda_set_error>
    6810:	mvn	r3, #0
    6814:	b	696c <coda_cursor_read_uint8_array+0x1c8>
    6818:	ldr	r3, [fp, #-20]	; 0xffffffec
    681c:	cmp	r3, #0
    6820:	bne	6840 <coda_cursor_read_uint8_array+0x9c>
    6824:	ldr	r3, [pc, #344]	; 6984 <coda_cursor_read_uint8_array+0x1e0>
    6828:	ldr	r2, [pc, #332]	; 697c <coda_cursor_read_uint8_array+0x1d8>
    682c:	ldr	r1, [pc, #340]	; 6988 <coda_cursor_read_uint8_array+0x1e4>
    6830:	mvn	r0, #99	; 0x63
    6834:	bl	0 <coda_set_error>
    6838:	mvn	r3, #0
    683c:	b	696c <coda_cursor_read_uint8_array+0x1c8>
    6840:	ldr	r3, [fp, #-16]
    6844:	ldr	r3, [r3, #4]
    6848:	sub	r3, r3, #1
    684c:	ldr	r2, [fp, #-16]
    6850:	lsl	r3, r3, #4
    6854:	add	r3, r2, r3
    6858:	ldr	r3, [r3, #8]
    685c:	ldr	r3, [r3]
    6860:	cmp	r3, #99	; 0x63
    6864:	bhi	6888 <coda_cursor_read_uint8_array+0xe4>
    6868:	ldr	r3, [fp, #-16]
    686c:	ldr	r3, [r3, #4]
    6870:	sub	r3, r3, #1
    6874:	ldr	r2, [fp, #-16]
    6878:	lsl	r3, r3, #4
    687c:	add	r3, r2, r3
    6880:	ldr	r3, [r3, #8]
    6884:	b	68a8 <coda_cursor_read_uint8_array+0x104>
    6888:	ldr	r3, [fp, #-16]
    688c:	ldr	r3, [r3, #4]
    6890:	sub	r3, r3, #1
    6894:	ldr	r2, [fp, #-16]
    6898:	lsl	r3, r3, #4
    689c:	add	r3, r2, r3
    68a0:	ldr	r3, [r3, #8]
    68a4:	ldr	r3, [r3, #4]
    68a8:	str	r3, [fp, #-8]
    68ac:	ldr	r3, [fp, #-8]
    68b0:	ldr	r3, [r3, #8]
    68b4:	cmp	r3, #1
    68b8:	beq	68e8 <coda_cursor_read_uint8_array+0x144>
    68bc:	ldr	r3, [fp, #-8]
    68c0:	ldr	r3, [r3, #8]
    68c4:	mov	r0, r3
    68c8:	bl	0 <coda_type_get_class_name>
    68cc:	mov	r3, r0
    68d0:	mov	r2, r3
    68d4:	ldr	r1, [pc, #176]	; 698c <coda_cursor_read_uint8_array+0x1e8>
    68d8:	mvn	r0, #104	; 0x68
    68dc:	bl	0 <coda_set_error>
    68e0:	mvn	r3, #0
    68e4:	b	696c <coda_cursor_read_uint8_array+0x1c8>
    68e8:	sub	r3, fp, #12
    68ec:	mov	r1, r3
    68f0:	ldr	r0, [fp, #-8]
    68f4:	bl	1080 <get_array_element_read_type>
    68f8:	mov	r3, r0
    68fc:	cmp	r3, #0
    6900:	beq	690c <coda_cursor_read_uint8_array+0x168>
    6904:	mvn	r3, #0
    6908:	b	696c <coda_cursor_read_uint8_array+0x1c8>
    690c:	ldr	r3, [fp, #-12]
    6910:	cmp	r3, #1
    6914:	bne	693c <coda_cursor_read_uint8_array+0x198>
    6918:	ldr	r2, [fp, #-24]	; 0xffffffe8
    691c:	ldr	r1, [fp, #-20]	; 0xffffffec
    6920:	ldr	r0, [fp, #-16]
    6924:	bl	2a3c <read_uint8_array>
    6928:	mov	r3, r0
    692c:	cmp	r3, #0
    6930:	beq	6964 <coda_cursor_read_uint8_array+0x1c0>
    6934:	mvn	r3, #0
    6938:	b	696c <coda_cursor_read_uint8_array+0x1c8>
    693c:	ldr	r3, [fp, #-12]
    6940:	mov	r0, r3
    6944:	bl	0 <coda_type_get_native_type_name>
    6948:	mov	r3, r0
    694c:	mov	r2, r3
    6950:	ldr	r1, [pc, #56]	; 6990 <coda_cursor_read_uint8_array+0x1ec>
    6954:	mvn	r0, #104	; 0x68
    6958:	bl	0 <coda_set_error>
    695c:	mvn	r3, #0
    6960:	b	696c <coda_cursor_read_uint8_array+0x1c8>
    6964:	nop			; (mov r0, r0)
    6968:	mov	r3, #0
    696c:	mov	r0, r3
    6970:	sub	sp, fp, #4
    6974:	pop	{fp, pc}
    6978:	.word	0x00000b97
    697c:	.word	0x000000c8
    6980:	.word	0x00000118
    6984:	.word	0x00000b9c
    6988:	.word	0x00000138
    698c:	.word	0x00000480
    6990:	.word	0x00000184

00006994 <coda_cursor_read_int16_array>:
    6994:	push	{fp, lr}
    6998:	add	fp, sp, #4
    699c:	sub	sp, sp, #32
    69a0:	str	r0, [fp, #-24]	; 0xffffffe8
    69a4:	str	r1, [fp, #-28]	; 0xffffffe4
    69a8:	str	r2, [fp, #-32]	; 0xffffffe0
    69ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    69b0:	cmp	r3, #0
    69b4:	beq	69ec <coda_cursor_read_int16_array+0x58>
    69b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    69bc:	ldr	r3, [r3, #4]
    69c0:	cmp	r3, #0
    69c4:	ble	69ec <coda_cursor_read_int16_array+0x58>
    69c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    69cc:	ldr	r3, [r3, #4]
    69d0:	sub	r3, r3, #1
    69d4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    69d8:	lsl	r3, r3, #4
    69dc:	add	r3, r2, r3
    69e0:	ldr	r3, [r3, #8]
    69e4:	cmp	r3, #0
    69e8:	bne	6a08 <coda_cursor_read_int16_array+0x74>
    69ec:	ldr	r3, [pc, #700]	; 6cb0 <coda_cursor_read_int16_array+0x31c>
    69f0:	ldr	r2, [pc, #700]	; 6cb4 <coda_cursor_read_int16_array+0x320>
    69f4:	ldr	r1, [pc, #700]	; 6cb8 <coda_cursor_read_int16_array+0x324>
    69f8:	mvn	r0, #99	; 0x63
    69fc:	bl	0 <coda_set_error>
    6a00:	mvn	r3, #0
    6a04:	b	6ca4 <coda_cursor_read_int16_array+0x310>
    6a08:	ldr	r3, [fp, #-28]	; 0xffffffe4
    6a0c:	cmp	r3, #0
    6a10:	bne	6a30 <coda_cursor_read_int16_array+0x9c>
    6a14:	ldr	r3, [pc, #672]	; 6cbc <coda_cursor_read_int16_array+0x328>
    6a18:	ldr	r2, [pc, #660]	; 6cb4 <coda_cursor_read_int16_array+0x320>
    6a1c:	ldr	r1, [pc, #668]	; 6cc0 <coda_cursor_read_int16_array+0x32c>
    6a20:	mvn	r0, #99	; 0x63
    6a24:	bl	0 <coda_set_error>
    6a28:	mvn	r3, #0
    6a2c:	b	6ca4 <coda_cursor_read_int16_array+0x310>
    6a30:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6a34:	ldr	r3, [r3, #4]
    6a38:	sub	r3, r3, #1
    6a3c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6a40:	lsl	r3, r3, #4
    6a44:	add	r3, r2, r3
    6a48:	ldr	r3, [r3, #8]
    6a4c:	ldr	r3, [r3]
    6a50:	cmp	r3, #99	; 0x63
    6a54:	bhi	6a78 <coda_cursor_read_int16_array+0xe4>
    6a58:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6a5c:	ldr	r3, [r3, #4]
    6a60:	sub	r3, r3, #1
    6a64:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6a68:	lsl	r3, r3, #4
    6a6c:	add	r3, r2, r3
    6a70:	ldr	r3, [r3, #8]
    6a74:	b	6a98 <coda_cursor_read_int16_array+0x104>
    6a78:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6a7c:	ldr	r3, [r3, #4]
    6a80:	sub	r3, r3, #1
    6a84:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6a88:	lsl	r3, r3, #4
    6a8c:	add	r3, r2, r3
    6a90:	ldr	r3, [r3, #8]
    6a94:	ldr	r3, [r3, #4]
    6a98:	str	r3, [fp, #-12]
    6a9c:	ldr	r3, [fp, #-12]
    6aa0:	ldr	r3, [r3, #8]
    6aa4:	cmp	r3, #1
    6aa8:	beq	6ad8 <coda_cursor_read_int16_array+0x144>
    6aac:	ldr	r3, [fp, #-12]
    6ab0:	ldr	r3, [r3, #8]
    6ab4:	mov	r0, r3
    6ab8:	bl	0 <coda_type_get_class_name>
    6abc:	mov	r3, r0
    6ac0:	mov	r2, r3
    6ac4:	ldr	r1, [pc, #504]	; 6cc4 <coda_cursor_read_int16_array+0x330>
    6ac8:	mvn	r0, #104	; 0x68
    6acc:	bl	0 <coda_set_error>
    6ad0:	mvn	r3, #0
    6ad4:	b	6ca4 <coda_cursor_read_int16_array+0x310>
    6ad8:	sub	r3, fp, #16
    6adc:	mov	r1, r3
    6ae0:	ldr	r0, [fp, #-12]
    6ae4:	bl	1080 <get_array_element_read_type>
    6ae8:	mov	r3, r0
    6aec:	cmp	r3, #0
    6af0:	beq	6afc <coda_cursor_read_int16_array+0x168>
    6af4:	mvn	r3, #0
    6af8:	b	6ca4 <coda_cursor_read_int16_array+0x310>
    6afc:	ldr	r3, [fp, #-16]
    6b00:	cmp	r3, #1
    6b04:	beq	6bb4 <coda_cursor_read_int16_array+0x220>
    6b08:	cmp	r3, #2
    6b0c:	beq	6c50 <coda_cursor_read_int16_array+0x2bc>
    6b10:	cmp	r3, #0
    6b14:	bne	6c74 <coda_cursor_read_int16_array+0x2e0>
    6b18:	ldr	r2, [fp, #-32]	; 0xffffffe0
    6b1c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6b20:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6b24:	bl	28a0 <read_int8_array>
    6b28:	mov	r3, r0
    6b2c:	cmp	r3, #0
    6b30:	beq	6b3c <coda_cursor_read_int16_array+0x1a8>
    6b34:	mvn	r3, #0
    6b38:	b	6ca4 <coda_cursor_read_int16_array+0x310>
    6b3c:	sub	r3, fp, #20
    6b40:	mov	r1, r3
    6b44:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6b48:	bl	0 <coda_cursor_get_num_elements>
    6b4c:	mov	r3, r0
    6b50:	cmp	r3, #0
    6b54:	beq	6b60 <coda_cursor_read_int16_array+0x1cc>
    6b58:	mvn	r3, #0
    6b5c:	b	6ca4 <coda_cursor_read_int16_array+0x310>
    6b60:	ldr	r3, [fp, #-20]	; 0xffffffec
    6b64:	sub	r3, r3, #1
    6b68:	str	r3, [fp, #-8]
    6b6c:	b	6ba4 <coda_cursor_read_int16_array+0x210>
    6b70:	ldr	r3, [fp, #-8]
    6b74:	lsl	r3, r3, #1
    6b78:	ldr	r2, [fp, #-28]	; 0xffffffe4
    6b7c:	add	r3, r2, r3
    6b80:	ldr	r2, [fp, #-8]
    6b84:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6b88:	add	r2, r1, r2
    6b8c:	ldrsb	r2, [r2]
    6b90:	sxth	r2, r2
    6b94:	strh	r2, [r3]
    6b98:	ldr	r3, [fp, #-8]
    6b9c:	sub	r3, r3, #1
    6ba0:	str	r3, [fp, #-8]
    6ba4:	ldr	r3, [fp, #-8]
    6ba8:	cmp	r3, #0
    6bac:	bge	6b70 <coda_cursor_read_int16_array+0x1dc>
    6bb0:	b	6ca0 <coda_cursor_read_int16_array+0x30c>
    6bb4:	ldr	r2, [fp, #-32]	; 0xffffffe0
    6bb8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6bbc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6bc0:	bl	2a3c <read_uint8_array>
    6bc4:	mov	r3, r0
    6bc8:	cmp	r3, #0
    6bcc:	beq	6bd8 <coda_cursor_read_int16_array+0x244>
    6bd0:	mvn	r3, #0
    6bd4:	b	6ca4 <coda_cursor_read_int16_array+0x310>
    6bd8:	sub	r3, fp, #20
    6bdc:	mov	r1, r3
    6be0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6be4:	bl	0 <coda_cursor_get_num_elements>
    6be8:	mov	r3, r0
    6bec:	cmp	r3, #0
    6bf0:	beq	6bfc <coda_cursor_read_int16_array+0x268>
    6bf4:	mvn	r3, #0
    6bf8:	b	6ca4 <coda_cursor_read_int16_array+0x310>
    6bfc:	ldr	r3, [fp, #-20]	; 0xffffffec
    6c00:	sub	r3, r3, #1
    6c04:	str	r3, [fp, #-8]
    6c08:	b	6c40 <coda_cursor_read_int16_array+0x2ac>
    6c0c:	ldr	r3, [fp, #-8]
    6c10:	lsl	r3, r3, #1
    6c14:	ldr	r2, [fp, #-28]	; 0xffffffe4
    6c18:	add	r3, r2, r3
    6c1c:	ldr	r2, [fp, #-8]
    6c20:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6c24:	add	r2, r1, r2
    6c28:	ldrb	r2, [r2]
    6c2c:	sxth	r2, r2
    6c30:	strh	r2, [r3]
    6c34:	ldr	r3, [fp, #-8]
    6c38:	sub	r3, r3, #1
    6c3c:	str	r3, [fp, #-8]
    6c40:	ldr	r3, [fp, #-8]
    6c44:	cmp	r3, #0
    6c48:	bge	6c0c <coda_cursor_read_int16_array+0x278>
    6c4c:	b	6ca0 <coda_cursor_read_int16_array+0x30c>
    6c50:	ldr	r2, [fp, #-32]	; 0xffffffe0
    6c54:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6c58:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6c5c:	bl	2ba8 <read_int16_array>
    6c60:	mov	r3, r0
    6c64:	cmp	r3, #0
    6c68:	beq	6c9c <coda_cursor_read_int16_array+0x308>
    6c6c:	mvn	r3, #0
    6c70:	b	6ca4 <coda_cursor_read_int16_array+0x310>
    6c74:	ldr	r3, [fp, #-16]
    6c78:	mov	r0, r3
    6c7c:	bl	0 <coda_type_get_native_type_name>
    6c80:	mov	r3, r0
    6c84:	mov	r2, r3
    6c88:	ldr	r1, [pc, #56]	; 6cc8 <coda_cursor_read_int16_array+0x334>
    6c8c:	mvn	r0, #104	; 0x68
    6c90:	bl	0 <coda_set_error>
    6c94:	mvn	r3, #0
    6c98:	b	6ca4 <coda_cursor_read_int16_array+0x310>
    6c9c:	nop			; (mov r0, r0)
    6ca0:	mov	r3, #0
    6ca4:	mov	r0, r3
    6ca8:	sub	sp, fp, #4
    6cac:	pop	{fp, pc}
    6cb0:	.word	0x00000bd6
    6cb4:	.word	0x000000c8
    6cb8:	.word	0x00000118
    6cbc:	.word	0x00000bdb
    6cc0:	.word	0x00000138
    6cc4:	.word	0x00000480
    6cc8:	.word	0x000001b4

00006ccc <coda_cursor_read_uint16_array>:
    6ccc:	push	{fp, lr}
    6cd0:	add	fp, sp, #4
    6cd4:	sub	sp, sp, #32
    6cd8:	str	r0, [fp, #-24]	; 0xffffffe8
    6cdc:	str	r1, [fp, #-28]	; 0xffffffe4
    6ce0:	str	r2, [fp, #-32]	; 0xffffffe0
    6ce4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6ce8:	cmp	r3, #0
    6cec:	beq	6d24 <coda_cursor_read_uint16_array+0x58>
    6cf0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6cf4:	ldr	r3, [r3, #4]
    6cf8:	cmp	r3, #0
    6cfc:	ble	6d24 <coda_cursor_read_uint16_array+0x58>
    6d00:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6d04:	ldr	r3, [r3, #4]
    6d08:	sub	r3, r3, #1
    6d0c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6d10:	lsl	r3, r3, #4
    6d14:	add	r3, r2, r3
    6d18:	ldr	r3, [r3, #8]
    6d1c:	cmp	r3, #0
    6d20:	bne	6d40 <coda_cursor_read_uint16_array+0x74>
    6d24:	mov	r3, #3120	; 0xc30
    6d28:	ldr	r2, [pc, #536]	; 6f48 <coda_cursor_read_uint16_array+0x27c>
    6d2c:	ldr	r1, [pc, #536]	; 6f4c <coda_cursor_read_uint16_array+0x280>
    6d30:	mvn	r0, #99	; 0x63
    6d34:	bl	0 <coda_set_error>
    6d38:	mvn	r3, #0
    6d3c:	b	6f3c <coda_cursor_read_uint16_array+0x270>
    6d40:	ldr	r3, [fp, #-28]	; 0xffffffe4
    6d44:	cmp	r3, #0
    6d48:	bne	6d68 <coda_cursor_read_uint16_array+0x9c>
    6d4c:	ldr	r3, [pc, #508]	; 6f50 <coda_cursor_read_uint16_array+0x284>
    6d50:	ldr	r2, [pc, #496]	; 6f48 <coda_cursor_read_uint16_array+0x27c>
    6d54:	ldr	r1, [pc, #504]	; 6f54 <coda_cursor_read_uint16_array+0x288>
    6d58:	mvn	r0, #99	; 0x63
    6d5c:	bl	0 <coda_set_error>
    6d60:	mvn	r3, #0
    6d64:	b	6f3c <coda_cursor_read_uint16_array+0x270>
    6d68:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6d6c:	ldr	r3, [r3, #4]
    6d70:	sub	r3, r3, #1
    6d74:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6d78:	lsl	r3, r3, #4
    6d7c:	add	r3, r2, r3
    6d80:	ldr	r3, [r3, #8]
    6d84:	ldr	r3, [r3]
    6d88:	cmp	r3, #99	; 0x63
    6d8c:	bhi	6db0 <coda_cursor_read_uint16_array+0xe4>
    6d90:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6d94:	ldr	r3, [r3, #4]
    6d98:	sub	r3, r3, #1
    6d9c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6da0:	lsl	r3, r3, #4
    6da4:	add	r3, r2, r3
    6da8:	ldr	r3, [r3, #8]
    6dac:	b	6dd0 <coda_cursor_read_uint16_array+0x104>
    6db0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6db4:	ldr	r3, [r3, #4]
    6db8:	sub	r3, r3, #1
    6dbc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6dc0:	lsl	r3, r3, #4
    6dc4:	add	r3, r2, r3
    6dc8:	ldr	r3, [r3, #8]
    6dcc:	ldr	r3, [r3, #4]
    6dd0:	str	r3, [fp, #-12]
    6dd4:	ldr	r3, [fp, #-12]
    6dd8:	ldr	r3, [r3, #8]
    6ddc:	cmp	r3, #1
    6de0:	beq	6e10 <coda_cursor_read_uint16_array+0x144>
    6de4:	ldr	r3, [fp, #-12]
    6de8:	ldr	r3, [r3, #8]
    6dec:	mov	r0, r3
    6df0:	bl	0 <coda_type_get_class_name>
    6df4:	mov	r3, r0
    6df8:	mov	r2, r3
    6dfc:	ldr	r1, [pc, #340]	; 6f58 <coda_cursor_read_uint16_array+0x28c>
    6e00:	mvn	r0, #104	; 0x68
    6e04:	bl	0 <coda_set_error>
    6e08:	mvn	r3, #0
    6e0c:	b	6f3c <coda_cursor_read_uint16_array+0x270>
    6e10:	sub	r3, fp, #16
    6e14:	mov	r1, r3
    6e18:	ldr	r0, [fp, #-12]
    6e1c:	bl	1080 <get_array_element_read_type>
    6e20:	mov	r3, r0
    6e24:	cmp	r3, #0
    6e28:	beq	6e34 <coda_cursor_read_uint16_array+0x168>
    6e2c:	mvn	r3, #0
    6e30:	b	6f3c <coda_cursor_read_uint16_array+0x270>
    6e34:	ldr	r3, [fp, #-16]
    6e38:	cmp	r3, #1
    6e3c:	beq	6e4c <coda_cursor_read_uint16_array+0x180>
    6e40:	cmp	r3, #3
    6e44:	beq	6ee8 <coda_cursor_read_uint16_array+0x21c>
    6e48:	b	6f0c <coda_cursor_read_uint16_array+0x240>
    6e4c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    6e50:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6e54:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6e58:	bl	2a3c <read_uint8_array>
    6e5c:	mov	r3, r0
    6e60:	cmp	r3, #0
    6e64:	beq	6e70 <coda_cursor_read_uint16_array+0x1a4>
    6e68:	mvn	r3, #0
    6e6c:	b	6f3c <coda_cursor_read_uint16_array+0x270>
    6e70:	sub	r3, fp, #20
    6e74:	mov	r1, r3
    6e78:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6e7c:	bl	0 <coda_cursor_get_num_elements>
    6e80:	mov	r3, r0
    6e84:	cmp	r3, #0
    6e88:	beq	6e94 <coda_cursor_read_uint16_array+0x1c8>
    6e8c:	mvn	r3, #0
    6e90:	b	6f3c <coda_cursor_read_uint16_array+0x270>
    6e94:	ldr	r3, [fp, #-20]	; 0xffffffec
    6e98:	sub	r3, r3, #1
    6e9c:	str	r3, [fp, #-8]
    6ea0:	b	6ed8 <coda_cursor_read_uint16_array+0x20c>
    6ea4:	ldr	r3, [fp, #-8]
    6ea8:	lsl	r3, r3, #1
    6eac:	ldr	r2, [fp, #-28]	; 0xffffffe4
    6eb0:	add	r3, r2, r3
    6eb4:	ldr	r2, [fp, #-8]
    6eb8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6ebc:	add	r2, r1, r2
    6ec0:	ldrb	r2, [r2]
    6ec4:	uxth	r2, r2
    6ec8:	strh	r2, [r3]
    6ecc:	ldr	r3, [fp, #-8]
    6ed0:	sub	r3, r3, #1
    6ed4:	str	r3, [fp, #-8]
    6ed8:	ldr	r3, [fp, #-8]
    6edc:	cmp	r3, #0
    6ee0:	bge	6ea4 <coda_cursor_read_uint16_array+0x1d8>
    6ee4:	b	6f38 <coda_cursor_read_uint16_array+0x26c>
    6ee8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    6eec:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6ef0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6ef4:	bl	2d40 <read_uint16_array>
    6ef8:	mov	r3, r0
    6efc:	cmp	r3, #0
    6f00:	beq	6f34 <coda_cursor_read_uint16_array+0x268>
    6f04:	mvn	r3, #0
    6f08:	b	6f3c <coda_cursor_read_uint16_array+0x270>
    6f0c:	ldr	r3, [fp, #-16]
    6f10:	mov	r0, r3
    6f14:	bl	0 <coda_type_get_native_type_name>
    6f18:	mov	r3, r0
    6f1c:	mov	r2, r3
    6f20:	ldr	r1, [pc, #52]	; 6f5c <coda_cursor_read_uint16_array+0x290>
    6f24:	mvn	r0, #104	; 0x68
    6f28:	bl	0 <coda_set_error>
    6f2c:	mvn	r3, #0
    6f30:	b	6f3c <coda_cursor_read_uint16_array+0x270>
    6f34:	nop			; (mov r0, r0)
    6f38:	mov	r3, #0
    6f3c:	mov	r0, r3
    6f40:	sub	sp, fp, #4
    6f44:	pop	{fp, pc}
    6f48:	.word	0x000000c8
    6f4c:	.word	0x00000118
    6f50:	.word	0x00000c35
    6f54:	.word	0x00000138
    6f58:	.word	0x00000480
    6f5c:	.word	0x000001e4

00006f60 <coda_cursor_read_int32_array>:
    6f60:	push	{fp, lr}
    6f64:	add	fp, sp, #4
    6f68:	sub	sp, sp, #32
    6f6c:	str	r0, [fp, #-24]	; 0xffffffe8
    6f70:	str	r1, [fp, #-28]	; 0xffffffe4
    6f74:	str	r2, [fp, #-32]	; 0xffffffe0
    6f78:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6f7c:	cmp	r3, #0
    6f80:	beq	6fb8 <coda_cursor_read_int32_array+0x58>
    6f84:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6f88:	ldr	r3, [r3, #4]
    6f8c:	cmp	r3, #0
    6f90:	ble	6fb8 <coda_cursor_read_int32_array+0x58>
    6f94:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6f98:	ldr	r3, [r3, #4]
    6f9c:	sub	r3, r3, #1
    6fa0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6fa4:	lsl	r3, r3, #4
    6fa8:	add	r3, r2, r3
    6fac:	ldr	r3, [r3, #8]
    6fb0:	cmp	r3, #0
    6fb4:	bne	6fd4 <coda_cursor_read_int32_array+0x74>
    6fb8:	ldr	r3, [pc, #1012]	; 73b4 <coda_cursor_read_int32_array+0x454>
    6fbc:	ldr	r2, [pc, #1012]	; 73b8 <coda_cursor_read_int32_array+0x458>
    6fc0:	ldr	r1, [pc, #1012]	; 73bc <coda_cursor_read_int32_array+0x45c>
    6fc4:	mvn	r0, #99	; 0x63
    6fc8:	bl	0 <coda_set_error>
    6fcc:	mvn	r3, #0
    6fd0:	b	73a8 <coda_cursor_read_int32_array+0x448>
    6fd4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    6fd8:	cmp	r3, #0
    6fdc:	bne	6ffc <coda_cursor_read_int32_array+0x9c>
    6fe0:	ldr	r3, [pc, #984]	; 73c0 <coda_cursor_read_int32_array+0x460>
    6fe4:	ldr	r2, [pc, #972]	; 73b8 <coda_cursor_read_int32_array+0x458>
    6fe8:	ldr	r1, [pc, #980]	; 73c4 <coda_cursor_read_int32_array+0x464>
    6fec:	mvn	r0, #99	; 0x63
    6ff0:	bl	0 <coda_set_error>
    6ff4:	mvn	r3, #0
    6ff8:	b	73a8 <coda_cursor_read_int32_array+0x448>
    6ffc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7000:	ldr	r3, [r3, #4]
    7004:	sub	r3, r3, #1
    7008:	ldr	r2, [fp, #-24]	; 0xffffffe8
    700c:	lsl	r3, r3, #4
    7010:	add	r3, r2, r3
    7014:	ldr	r3, [r3, #8]
    7018:	ldr	r3, [r3]
    701c:	cmp	r3, #99	; 0x63
    7020:	bhi	7044 <coda_cursor_read_int32_array+0xe4>
    7024:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7028:	ldr	r3, [r3, #4]
    702c:	sub	r3, r3, #1
    7030:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7034:	lsl	r3, r3, #4
    7038:	add	r3, r2, r3
    703c:	ldr	r3, [r3, #8]
    7040:	b	7064 <coda_cursor_read_int32_array+0x104>
    7044:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7048:	ldr	r3, [r3, #4]
    704c:	sub	r3, r3, #1
    7050:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7054:	lsl	r3, r3, #4
    7058:	add	r3, r2, r3
    705c:	ldr	r3, [r3, #8]
    7060:	ldr	r3, [r3, #4]
    7064:	str	r3, [fp, #-12]
    7068:	ldr	r3, [fp, #-12]
    706c:	ldr	r3, [r3, #8]
    7070:	cmp	r3, #1
    7074:	beq	70a4 <coda_cursor_read_int32_array+0x144>
    7078:	ldr	r3, [fp, #-12]
    707c:	ldr	r3, [r3, #8]
    7080:	mov	r0, r3
    7084:	bl	0 <coda_type_get_class_name>
    7088:	mov	r3, r0
    708c:	mov	r2, r3
    7090:	ldr	r1, [pc, #816]	; 73c8 <coda_cursor_read_int32_array+0x468>
    7094:	mvn	r0, #104	; 0x68
    7098:	bl	0 <coda_set_error>
    709c:	mvn	r3, #0
    70a0:	b	73a8 <coda_cursor_read_int32_array+0x448>
    70a4:	sub	r3, fp, #16
    70a8:	mov	r1, r3
    70ac:	ldr	r0, [fp, #-12]
    70b0:	bl	1080 <get_array_element_read_type>
    70b4:	mov	r3, r0
    70b8:	cmp	r3, #0
    70bc:	beq	70c8 <coda_cursor_read_int32_array+0x168>
    70c0:	mvn	r3, #0
    70c4:	b	73a8 <coda_cursor_read_int32_array+0x448>
    70c8:	ldr	r3, [fp, #-16]
    70cc:	cmp	r3, #4
    70d0:	ldrls	pc, [pc, r3, lsl #2]
    70d4:	b	7378 <coda_cursor_read_int32_array+0x418>
    70d8:	.word	0x000070ec
    70dc:	.word	0x00007184
    70e0:	.word	0x0000721c
    70e4:	.word	0x000072b8
    70e8:	.word	0x00007354
    70ec:	ldr	r2, [fp, #-32]	; 0xffffffe0
    70f0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    70f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    70f8:	bl	28a0 <read_int8_array>
    70fc:	mov	r3, r0
    7100:	cmp	r3, #0
    7104:	beq	7110 <coda_cursor_read_int32_array+0x1b0>
    7108:	mvn	r3, #0
    710c:	b	73a8 <coda_cursor_read_int32_array+0x448>
    7110:	sub	r3, fp, #20
    7114:	mov	r1, r3
    7118:	ldr	r0, [fp, #-24]	; 0xffffffe8
    711c:	bl	0 <coda_cursor_get_num_elements>
    7120:	mov	r3, r0
    7124:	cmp	r3, #0
    7128:	beq	7134 <coda_cursor_read_int32_array+0x1d4>
    712c:	mvn	r3, #0
    7130:	b	73a8 <coda_cursor_read_int32_array+0x448>
    7134:	ldr	r3, [fp, #-20]	; 0xffffffec
    7138:	sub	r3, r3, #1
    713c:	str	r3, [fp, #-8]
    7140:	b	7174 <coda_cursor_read_int32_array+0x214>
    7144:	ldr	r3, [fp, #-8]
    7148:	lsl	r3, r3, #2
    714c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7150:	add	r3, r2, r3
    7154:	ldr	r2, [fp, #-8]
    7158:	ldr	r1, [fp, #-28]	; 0xffffffe4
    715c:	add	r2, r1, r2
    7160:	ldrsb	r2, [r2]
    7164:	str	r2, [r3]
    7168:	ldr	r3, [fp, #-8]
    716c:	sub	r3, r3, #1
    7170:	str	r3, [fp, #-8]
    7174:	ldr	r3, [fp, #-8]
    7178:	cmp	r3, #0
    717c:	bge	7144 <coda_cursor_read_int32_array+0x1e4>
    7180:	b	73a4 <coda_cursor_read_int32_array+0x444>
    7184:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7188:	ldr	r1, [fp, #-28]	; 0xffffffe4
    718c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7190:	bl	2a3c <read_uint8_array>
    7194:	mov	r3, r0
    7198:	cmp	r3, #0
    719c:	beq	71a8 <coda_cursor_read_int32_array+0x248>
    71a0:	mvn	r3, #0
    71a4:	b	73a8 <coda_cursor_read_int32_array+0x448>
    71a8:	sub	r3, fp, #20
    71ac:	mov	r1, r3
    71b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    71b4:	bl	0 <coda_cursor_get_num_elements>
    71b8:	mov	r3, r0
    71bc:	cmp	r3, #0
    71c0:	beq	71cc <coda_cursor_read_int32_array+0x26c>
    71c4:	mvn	r3, #0
    71c8:	b	73a8 <coda_cursor_read_int32_array+0x448>
    71cc:	ldr	r3, [fp, #-20]	; 0xffffffec
    71d0:	sub	r3, r3, #1
    71d4:	str	r3, [fp, #-8]
    71d8:	b	720c <coda_cursor_read_int32_array+0x2ac>
    71dc:	ldr	r3, [fp, #-8]
    71e0:	lsl	r3, r3, #2
    71e4:	ldr	r2, [fp, #-28]	; 0xffffffe4
    71e8:	add	r3, r2, r3
    71ec:	ldr	r2, [fp, #-8]
    71f0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    71f4:	add	r2, r1, r2
    71f8:	ldrb	r2, [r2]
    71fc:	str	r2, [r3]
    7200:	ldr	r3, [fp, #-8]
    7204:	sub	r3, r3, #1
    7208:	str	r3, [fp, #-8]
    720c:	ldr	r3, [fp, #-8]
    7210:	cmp	r3, #0
    7214:	bge	71dc <coda_cursor_read_int32_array+0x27c>
    7218:	b	73a4 <coda_cursor_read_int32_array+0x444>
    721c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7220:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7224:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7228:	bl	2ba8 <read_int16_array>
    722c:	mov	r3, r0
    7230:	cmp	r3, #0
    7234:	beq	7240 <coda_cursor_read_int32_array+0x2e0>
    7238:	mvn	r3, #0
    723c:	b	73a8 <coda_cursor_read_int32_array+0x448>
    7240:	sub	r3, fp, #20
    7244:	mov	r1, r3
    7248:	ldr	r0, [fp, #-24]	; 0xffffffe8
    724c:	bl	0 <coda_cursor_get_num_elements>
    7250:	mov	r3, r0
    7254:	cmp	r3, #0
    7258:	beq	7264 <coda_cursor_read_int32_array+0x304>
    725c:	mvn	r3, #0
    7260:	b	73a8 <coda_cursor_read_int32_array+0x448>
    7264:	ldr	r3, [fp, #-20]	; 0xffffffec
    7268:	sub	r3, r3, #1
    726c:	str	r3, [fp, #-8]
    7270:	b	72a8 <coda_cursor_read_int32_array+0x348>
    7274:	ldr	r3, [fp, #-8]
    7278:	lsl	r3, r3, #2
    727c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7280:	add	r3, r2, r3
    7284:	ldr	r2, [fp, #-8]
    7288:	lsl	r2, r2, #1
    728c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7290:	add	r2, r1, r2
    7294:	ldrsh	r2, [r2]
    7298:	str	r2, [r3]
    729c:	ldr	r3, [fp, #-8]
    72a0:	sub	r3, r3, #1
    72a4:	str	r3, [fp, #-8]
    72a8:	ldr	r3, [fp, #-8]
    72ac:	cmp	r3, #0
    72b0:	bge	7274 <coda_cursor_read_int32_array+0x314>
    72b4:	b	73a4 <coda_cursor_read_int32_array+0x444>
    72b8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    72bc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    72c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    72c4:	bl	2d40 <read_uint16_array>
    72c8:	mov	r3, r0
    72cc:	cmp	r3, #0
    72d0:	beq	72dc <coda_cursor_read_int32_array+0x37c>
    72d4:	mvn	r3, #0
    72d8:	b	73a8 <coda_cursor_read_int32_array+0x448>
    72dc:	sub	r3, fp, #20
    72e0:	mov	r1, r3
    72e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    72e8:	bl	0 <coda_cursor_get_num_elements>
    72ec:	mov	r3, r0
    72f0:	cmp	r3, #0
    72f4:	beq	7300 <coda_cursor_read_int32_array+0x3a0>
    72f8:	mvn	r3, #0
    72fc:	b	73a8 <coda_cursor_read_int32_array+0x448>
    7300:	ldr	r3, [fp, #-20]	; 0xffffffec
    7304:	sub	r3, r3, #1
    7308:	str	r3, [fp, #-8]
    730c:	b	7344 <coda_cursor_read_int32_array+0x3e4>
    7310:	ldr	r3, [fp, #-8]
    7314:	lsl	r3, r3, #2
    7318:	ldr	r2, [fp, #-28]	; 0xffffffe4
    731c:	add	r3, r2, r3
    7320:	ldr	r2, [fp, #-8]
    7324:	lsl	r2, r2, #1
    7328:	ldr	r1, [fp, #-28]	; 0xffffffe4
    732c:	add	r2, r1, r2
    7330:	ldrh	r2, [r2]
    7334:	str	r2, [r3]
    7338:	ldr	r3, [fp, #-8]
    733c:	sub	r3, r3, #1
    7340:	str	r3, [fp, #-8]
    7344:	ldr	r3, [fp, #-8]
    7348:	cmp	r3, #0
    734c:	bge	7310 <coda_cursor_read_int32_array+0x3b0>
    7350:	b	73a4 <coda_cursor_read_int32_array+0x444>
    7354:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7358:	ldr	r1, [fp, #-28]	; 0xffffffe4
    735c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7360:	bl	2ea8 <read_int32_array>
    7364:	mov	r3, r0
    7368:	cmp	r3, #0
    736c:	beq	73a0 <coda_cursor_read_int32_array+0x440>
    7370:	mvn	r3, #0
    7374:	b	73a8 <coda_cursor_read_int32_array+0x448>
    7378:	ldr	r3, [fp, #-16]
    737c:	mov	r0, r3
    7380:	bl	0 <coda_type_get_native_type_name>
    7384:	mov	r3, r0
    7388:	mov	r2, r3
    738c:	ldr	r1, [pc, #56]	; 73cc <coda_cursor_read_int32_array+0x46c>
    7390:	mvn	r0, #104	; 0x68
    7394:	bl	0 <coda_set_error>
    7398:	mvn	r3, #0
    739c:	b	73a8 <coda_cursor_read_int32_array+0x448>
    73a0:	nop			; (mov r0, r0)
    73a4:	mov	r3, #0
    73a8:	mov	r0, r3
    73ac:	sub	sp, fp, #4
    73b0:	pop	{fp, pc}
    73b4:	.word	0x00000c7f
    73b8:	.word	0x000000c8
    73bc:	.word	0x00000118
    73c0:	.word	0x00000c84
    73c4:	.word	0x00000138
    73c8:	.word	0x00000480
    73cc:	.word	0x00000214

000073d0 <coda_cursor_read_uint32_array>:
    73d0:	push	{fp, lr}
    73d4:	add	fp, sp, #4
    73d8:	sub	sp, sp, #32
    73dc:	str	r0, [fp, #-24]	; 0xffffffe8
    73e0:	str	r1, [fp, #-28]	; 0xffffffe4
    73e4:	str	r2, [fp, #-32]	; 0xffffffe0
    73e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    73ec:	cmp	r3, #0
    73f0:	beq	7428 <coda_cursor_read_uint32_array+0x58>
    73f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    73f8:	ldr	r3, [r3, #4]
    73fc:	cmp	r3, #0
    7400:	ble	7428 <coda_cursor_read_uint32_array+0x58>
    7404:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7408:	ldr	r3, [r3, #4]
    740c:	sub	r3, r3, #1
    7410:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7414:	lsl	r3, r3, #4
    7418:	add	r3, r2, r3
    741c:	ldr	r3, [r3, #8]
    7420:	cmp	r3, #0
    7424:	bne	7444 <coda_cursor_read_uint32_array+0x74>
    7428:	ldr	r3, [pc, #696]	; 76e8 <coda_cursor_read_uint32_array+0x318>
    742c:	ldr	r2, [pc, #696]	; 76ec <coda_cursor_read_uint32_array+0x31c>
    7430:	ldr	r1, [pc, #696]	; 76f0 <coda_cursor_read_uint32_array+0x320>
    7434:	mvn	r0, #99	; 0x63
    7438:	bl	0 <coda_set_error>
    743c:	mvn	r3, #0
    7440:	b	76dc <coda_cursor_read_uint32_array+0x30c>
    7444:	ldr	r3, [fp, #-28]	; 0xffffffe4
    7448:	cmp	r3, #0
    744c:	bne	746c <coda_cursor_read_uint32_array+0x9c>
    7450:	ldr	r3, [pc, #668]	; 76f4 <coda_cursor_read_uint32_array+0x324>
    7454:	ldr	r2, [pc, #656]	; 76ec <coda_cursor_read_uint32_array+0x31c>
    7458:	ldr	r1, [pc, #664]	; 76f8 <coda_cursor_read_uint32_array+0x328>
    745c:	mvn	r0, #99	; 0x63
    7460:	bl	0 <coda_set_error>
    7464:	mvn	r3, #0
    7468:	b	76dc <coda_cursor_read_uint32_array+0x30c>
    746c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7470:	ldr	r3, [r3, #4]
    7474:	sub	r3, r3, #1
    7478:	ldr	r2, [fp, #-24]	; 0xffffffe8
    747c:	lsl	r3, r3, #4
    7480:	add	r3, r2, r3
    7484:	ldr	r3, [r3, #8]
    7488:	ldr	r3, [r3]
    748c:	cmp	r3, #99	; 0x63
    7490:	bhi	74b4 <coda_cursor_read_uint32_array+0xe4>
    7494:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7498:	ldr	r3, [r3, #4]
    749c:	sub	r3, r3, #1
    74a0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    74a4:	lsl	r3, r3, #4
    74a8:	add	r3, r2, r3
    74ac:	ldr	r3, [r3, #8]
    74b0:	b	74d4 <coda_cursor_read_uint32_array+0x104>
    74b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    74b8:	ldr	r3, [r3, #4]
    74bc:	sub	r3, r3, #1
    74c0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    74c4:	lsl	r3, r3, #4
    74c8:	add	r3, r2, r3
    74cc:	ldr	r3, [r3, #8]
    74d0:	ldr	r3, [r3, #4]
    74d4:	str	r3, [fp, #-12]
    74d8:	ldr	r3, [fp, #-12]
    74dc:	ldr	r3, [r3, #8]
    74e0:	cmp	r3, #1
    74e4:	beq	7514 <coda_cursor_read_uint32_array+0x144>
    74e8:	ldr	r3, [fp, #-12]
    74ec:	ldr	r3, [r3, #8]
    74f0:	mov	r0, r3
    74f4:	bl	0 <coda_type_get_class_name>
    74f8:	mov	r3, r0
    74fc:	mov	r2, r3
    7500:	ldr	r1, [pc, #500]	; 76fc <coda_cursor_read_uint32_array+0x32c>
    7504:	mvn	r0, #104	; 0x68
    7508:	bl	0 <coda_set_error>
    750c:	mvn	r3, #0
    7510:	b	76dc <coda_cursor_read_uint32_array+0x30c>
    7514:	sub	r3, fp, #16
    7518:	mov	r1, r3
    751c:	ldr	r0, [fp, #-12]
    7520:	bl	1080 <get_array_element_read_type>
    7524:	mov	r3, r0
    7528:	cmp	r3, #0
    752c:	beq	7538 <coda_cursor_read_uint32_array+0x168>
    7530:	mvn	r3, #0
    7534:	b	76dc <coda_cursor_read_uint32_array+0x30c>
    7538:	ldr	r3, [fp, #-16]
    753c:	cmp	r3, #3
    7540:	beq	75ec <coda_cursor_read_uint32_array+0x21c>
    7544:	cmp	r3, #5
    7548:	beq	7688 <coda_cursor_read_uint32_array+0x2b8>
    754c:	cmp	r3, #1
    7550:	bne	76ac <coda_cursor_read_uint32_array+0x2dc>
    7554:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7558:	ldr	r1, [fp, #-28]	; 0xffffffe4
    755c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7560:	bl	2a3c <read_uint8_array>
    7564:	mov	r3, r0
    7568:	cmp	r3, #0
    756c:	beq	7578 <coda_cursor_read_uint32_array+0x1a8>
    7570:	mvn	r3, #0
    7574:	b	76dc <coda_cursor_read_uint32_array+0x30c>
    7578:	sub	r3, fp, #20
    757c:	mov	r1, r3
    7580:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7584:	bl	0 <coda_cursor_get_num_elements>
    7588:	mov	r3, r0
    758c:	cmp	r3, #0
    7590:	beq	759c <coda_cursor_read_uint32_array+0x1cc>
    7594:	mvn	r3, #0
    7598:	b	76dc <coda_cursor_read_uint32_array+0x30c>
    759c:	ldr	r3, [fp, #-20]	; 0xffffffec
    75a0:	sub	r3, r3, #1
    75a4:	str	r3, [fp, #-8]
    75a8:	b	75dc <coda_cursor_read_uint32_array+0x20c>
    75ac:	ldr	r3, [fp, #-8]
    75b0:	lsl	r3, r3, #2
    75b4:	ldr	r2, [fp, #-28]	; 0xffffffe4
    75b8:	add	r3, r2, r3
    75bc:	ldr	r2, [fp, #-8]
    75c0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    75c4:	add	r2, r1, r2
    75c8:	ldrb	r2, [r2]
    75cc:	str	r2, [r3]
    75d0:	ldr	r3, [fp, #-8]
    75d4:	sub	r3, r3, #1
    75d8:	str	r3, [fp, #-8]
    75dc:	ldr	r3, [fp, #-8]
    75e0:	cmp	r3, #0
    75e4:	bge	75ac <coda_cursor_read_uint32_array+0x1dc>
    75e8:	b	76d8 <coda_cursor_read_uint32_array+0x308>
    75ec:	ldr	r2, [fp, #-32]	; 0xffffffe0
    75f0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    75f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    75f8:	bl	2d40 <read_uint16_array>
    75fc:	mov	r3, r0
    7600:	cmp	r3, #0
    7604:	beq	7610 <coda_cursor_read_uint32_array+0x240>
    7608:	mvn	r3, #0
    760c:	b	76dc <coda_cursor_read_uint32_array+0x30c>
    7610:	sub	r3, fp, #20
    7614:	mov	r1, r3
    7618:	ldr	r0, [fp, #-24]	; 0xffffffe8
    761c:	bl	0 <coda_cursor_get_num_elements>
    7620:	mov	r3, r0
    7624:	cmp	r3, #0
    7628:	beq	7634 <coda_cursor_read_uint32_array+0x264>
    762c:	mvn	r3, #0
    7630:	b	76dc <coda_cursor_read_uint32_array+0x30c>
    7634:	ldr	r3, [fp, #-20]	; 0xffffffec
    7638:	sub	r3, r3, #1
    763c:	str	r3, [fp, #-8]
    7640:	b	7678 <coda_cursor_read_uint32_array+0x2a8>
    7644:	ldr	r3, [fp, #-8]
    7648:	lsl	r3, r3, #2
    764c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7650:	add	r3, r2, r3
    7654:	ldr	r2, [fp, #-8]
    7658:	lsl	r2, r2, #1
    765c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7660:	add	r2, r1, r2
    7664:	ldrh	r2, [r2]
    7668:	str	r2, [r3]
    766c:	ldr	r3, [fp, #-8]
    7670:	sub	r3, r3, #1
    7674:	str	r3, [fp, #-8]
    7678:	ldr	r3, [fp, #-8]
    767c:	cmp	r3, #0
    7680:	bge	7644 <coda_cursor_read_uint32_array+0x274>
    7684:	b	76d8 <coda_cursor_read_uint32_array+0x308>
    7688:	ldr	r2, [fp, #-32]	; 0xffffffe0
    768c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7690:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7694:	bl	3044 <read_uint32_array>
    7698:	mov	r3, r0
    769c:	cmp	r3, #0
    76a0:	beq	76d4 <coda_cursor_read_uint32_array+0x304>
    76a4:	mvn	r3, #0
    76a8:	b	76dc <coda_cursor_read_uint32_array+0x30c>
    76ac:	ldr	r3, [fp, #-16]
    76b0:	mov	r0, r3
    76b4:	bl	0 <coda_type_get_native_type_name>
    76b8:	mov	r3, r0
    76bc:	mov	r2, r3
    76c0:	ldr	r1, [pc, #56]	; 7700 <coda_cursor_read_uint32_array+0x330>
    76c4:	mvn	r0, #104	; 0x68
    76c8:	bl	0 <coda_set_error>
    76cc:	mvn	r3, #0
    76d0:	b	76dc <coda_cursor_read_uint32_array+0x30c>
    76d4:	nop			; (mov r0, r0)
    76d8:	mov	r3, #0
    76dc:	mov	r0, r3
    76e0:	sub	sp, fp, #4
    76e4:	pop	{fp, pc}
    76e8:	.word	0x00000cf6
    76ec:	.word	0x000000c8
    76f0:	.word	0x00000118
    76f4:	.word	0x00000cfb
    76f8:	.word	0x00000138
    76fc:	.word	0x00000480
    7700:	.word	0x00000244

00007704 <coda_cursor_read_int64_array>:
    7704:	push	{fp, lr}
    7708:	add	fp, sp, #4
    770c:	sub	sp, sp, #32
    7710:	str	r0, [fp, #-24]	; 0xffffffe8
    7714:	str	r1, [fp, #-28]	; 0xffffffe4
    7718:	str	r2, [fp, #-32]	; 0xffffffe0
    771c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7720:	cmp	r3, #0
    7724:	beq	775c <coda_cursor_read_int64_array+0x58>
    7728:	ldr	r3, [fp, #-24]	; 0xffffffe8
    772c:	ldr	r3, [r3, #4]
    7730:	cmp	r3, #0
    7734:	ble	775c <coda_cursor_read_int64_array+0x58>
    7738:	ldr	r3, [fp, #-24]	; 0xffffffe8
    773c:	ldr	r3, [r3, #4]
    7740:	sub	r3, r3, #1
    7744:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7748:	lsl	r3, r3, #4
    774c:	add	r3, r2, r3
    7750:	ldr	r3, [r3, #8]
    7754:	cmp	r3, #0
    7758:	bne	7778 <coda_cursor_read_int64_array+0x74>
    775c:	ldr	r3, [pc, #1380]	; 7cc8 <coda_cursor_read_int64_array+0x5c4>
    7760:	ldr	r2, [pc, #1380]	; 7ccc <coda_cursor_read_int64_array+0x5c8>
    7764:	ldr	r1, [pc, #1380]	; 7cd0 <coda_cursor_read_int64_array+0x5cc>
    7768:	mvn	r0, #99	; 0x63
    776c:	bl	0 <coda_set_error>
    7770:	mvn	r3, #0
    7774:	b	7cbc <coda_cursor_read_int64_array+0x5b8>
    7778:	ldr	r3, [fp, #-28]	; 0xffffffe4
    777c:	cmp	r3, #0
    7780:	bne	77a0 <coda_cursor_read_int64_array+0x9c>
    7784:	ldr	r3, [pc, #1352]	; 7cd4 <coda_cursor_read_int64_array+0x5d0>
    7788:	ldr	r2, [pc, #1340]	; 7ccc <coda_cursor_read_int64_array+0x5c8>
    778c:	ldr	r1, [pc, #1348]	; 7cd8 <coda_cursor_read_int64_array+0x5d4>
    7790:	mvn	r0, #99	; 0x63
    7794:	bl	0 <coda_set_error>
    7798:	mvn	r3, #0
    779c:	b	7cbc <coda_cursor_read_int64_array+0x5b8>
    77a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    77a4:	ldr	r3, [r3, #4]
    77a8:	sub	r3, r3, #1
    77ac:	ldr	r2, [fp, #-24]	; 0xffffffe8
    77b0:	lsl	r3, r3, #4
    77b4:	add	r3, r2, r3
    77b8:	ldr	r3, [r3, #8]
    77bc:	ldr	r3, [r3]
    77c0:	cmp	r3, #99	; 0x63
    77c4:	bhi	77e8 <coda_cursor_read_int64_array+0xe4>
    77c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    77cc:	ldr	r3, [r3, #4]
    77d0:	sub	r3, r3, #1
    77d4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    77d8:	lsl	r3, r3, #4
    77dc:	add	r3, r2, r3
    77e0:	ldr	r3, [r3, #8]
    77e4:	b	7808 <coda_cursor_read_int64_array+0x104>
    77e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    77ec:	ldr	r3, [r3, #4]
    77f0:	sub	r3, r3, #1
    77f4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    77f8:	lsl	r3, r3, #4
    77fc:	add	r3, r2, r3
    7800:	ldr	r3, [r3, #8]
    7804:	ldr	r3, [r3, #4]
    7808:	str	r3, [fp, #-12]
    780c:	ldr	r3, [fp, #-12]
    7810:	ldr	r3, [r3, #8]
    7814:	cmp	r3, #1
    7818:	beq	7848 <coda_cursor_read_int64_array+0x144>
    781c:	ldr	r3, [fp, #-12]
    7820:	ldr	r3, [r3, #8]
    7824:	mov	r0, r3
    7828:	bl	0 <coda_type_get_class_name>
    782c:	mov	r3, r0
    7830:	mov	r2, r3
    7834:	ldr	r1, [pc, #1184]	; 7cdc <coda_cursor_read_int64_array+0x5d8>
    7838:	mvn	r0, #104	; 0x68
    783c:	bl	0 <coda_set_error>
    7840:	mvn	r3, #0
    7844:	b	7cbc <coda_cursor_read_int64_array+0x5b8>
    7848:	sub	r3, fp, #16
    784c:	mov	r1, r3
    7850:	ldr	r0, [fp, #-12]
    7854:	bl	1080 <get_array_element_read_type>
    7858:	mov	r3, r0
    785c:	cmp	r3, #0
    7860:	beq	786c <coda_cursor_read_int64_array+0x168>
    7864:	mvn	r3, #0
    7868:	b	7cbc <coda_cursor_read_int64_array+0x5b8>
    786c:	ldr	r3, [fp, #-16]
    7870:	cmp	r3, #6
    7874:	ldrls	pc, [pc, r3, lsl #2]
    7878:	b	7c8c <coda_cursor_read_int64_array+0x588>
    787c:	.word	0x00007898
    7880:	.word	0x00007938
    7884:	.word	0x000079d8
    7888:	.word	0x00007a7c
    788c:	.word	0x00007b20
    7890:	.word	0x00007bc4
    7894:	.word	0x00007c68
    7898:	ldr	r2, [fp, #-32]	; 0xffffffe0
    789c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    78a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    78a4:	bl	28a0 <read_int8_array>
    78a8:	mov	r3, r0
    78ac:	cmp	r3, #0
    78b0:	beq	78bc <coda_cursor_read_int64_array+0x1b8>
    78b4:	mvn	r3, #0
    78b8:	b	7cbc <coda_cursor_read_int64_array+0x5b8>
    78bc:	sub	r3, fp, #20
    78c0:	mov	r1, r3
    78c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    78c8:	bl	0 <coda_cursor_get_num_elements>
    78cc:	mov	r3, r0
    78d0:	cmp	r3, #0
    78d4:	beq	78e0 <coda_cursor_read_int64_array+0x1dc>
    78d8:	mvn	r3, #0
    78dc:	b	7cbc <coda_cursor_read_int64_array+0x5b8>
    78e0:	ldr	r3, [fp, #-20]	; 0xffffffec
    78e4:	sub	r3, r3, #1
    78e8:	str	r3, [fp, #-8]
    78ec:	b	7928 <coda_cursor_read_int64_array+0x224>
    78f0:	ldr	r3, [fp, #-8]
    78f4:	lsl	r3, r3, #3
    78f8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    78fc:	add	r1, r2, r3
    7900:	ldr	r3, [fp, #-8]
    7904:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7908:	add	r3, r2, r3
    790c:	ldrsb	r3, [r3]
    7910:	sxtb	r2, r3
    7914:	asr	r3, r2, #31
    7918:	strd	r2, [r1]
    791c:	ldr	r3, [fp, #-8]
    7920:	sub	r3, r3, #1
    7924:	str	r3, [fp, #-8]
    7928:	ldr	r3, [fp, #-8]
    792c:	cmp	r3, #0
    7930:	bge	78f0 <coda_cursor_read_int64_array+0x1ec>
    7934:	b	7cb8 <coda_cursor_read_int64_array+0x5b4>
    7938:	ldr	r2, [fp, #-32]	; 0xffffffe0
    793c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7940:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7944:	bl	2a3c <read_uint8_array>
    7948:	mov	r3, r0
    794c:	cmp	r3, #0
    7950:	beq	795c <coda_cursor_read_int64_array+0x258>
    7954:	mvn	r3, #0
    7958:	b	7cbc <coda_cursor_read_int64_array+0x5b8>
    795c:	sub	r3, fp, #20
    7960:	mov	r1, r3
    7964:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7968:	bl	0 <coda_cursor_get_num_elements>
    796c:	mov	r3, r0
    7970:	cmp	r3, #0
    7974:	beq	7980 <coda_cursor_read_int64_array+0x27c>
    7978:	mvn	r3, #0
    797c:	b	7cbc <coda_cursor_read_int64_array+0x5b8>
    7980:	ldr	r3, [fp, #-20]	; 0xffffffec
    7984:	sub	r3, r3, #1
    7988:	str	r3, [fp, #-8]
    798c:	b	79c8 <coda_cursor_read_int64_array+0x2c4>
    7990:	ldr	r3, [fp, #-8]
    7994:	lsl	r3, r3, #3
    7998:	ldr	r2, [fp, #-28]	; 0xffffffe4
    799c:	add	r1, r2, r3
    79a0:	ldr	r3, [fp, #-8]
    79a4:	ldr	r2, [fp, #-28]	; 0xffffffe4
    79a8:	add	r3, r2, r3
    79ac:	ldrb	r3, [r3]
    79b0:	uxtb	r2, r3
    79b4:	mov	r3, #0
    79b8:	strd	r2, [r1]
    79bc:	ldr	r3, [fp, #-8]
    79c0:	sub	r3, r3, #1
    79c4:	str	r3, [fp, #-8]
    79c8:	ldr	r3, [fp, #-8]
    79cc:	cmp	r3, #0
    79d0:	bge	7990 <coda_cursor_read_int64_array+0x28c>
    79d4:	b	7cb8 <coda_cursor_read_int64_array+0x5b4>
    79d8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    79dc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    79e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    79e4:	bl	2ba8 <read_int16_array>
    79e8:	mov	r3, r0
    79ec:	cmp	r3, #0
    79f0:	beq	79fc <coda_cursor_read_int64_array+0x2f8>
    79f4:	mvn	r3, #0
    79f8:	b	7cbc <coda_cursor_read_int64_array+0x5b8>
    79fc:	sub	r3, fp, #20
    7a00:	mov	r1, r3
    7a04:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7a08:	bl	0 <coda_cursor_get_num_elements>
    7a0c:	mov	r3, r0
    7a10:	cmp	r3, #0
    7a14:	beq	7a20 <coda_cursor_read_int64_array+0x31c>
    7a18:	mvn	r3, #0
    7a1c:	b	7cbc <coda_cursor_read_int64_array+0x5b8>
    7a20:	ldr	r3, [fp, #-20]	; 0xffffffec
    7a24:	sub	r3, r3, #1
    7a28:	str	r3, [fp, #-8]
    7a2c:	b	7a6c <coda_cursor_read_int64_array+0x368>
    7a30:	ldr	r3, [fp, #-8]
    7a34:	lsl	r3, r3, #3
    7a38:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7a3c:	add	r1, r2, r3
    7a40:	ldr	r3, [fp, #-8]
    7a44:	lsl	r3, r3, #1
    7a48:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7a4c:	add	r3, r2, r3
    7a50:	ldrsh	r3, [r3]
    7a54:	sxth	r2, r3
    7a58:	asr	r3, r2, #31
    7a5c:	strd	r2, [r1]
    7a60:	ldr	r3, [fp, #-8]
    7a64:	sub	r3, r3, #1
    7a68:	str	r3, [fp, #-8]
    7a6c:	ldr	r3, [fp, #-8]
    7a70:	cmp	r3, #0
    7a74:	bge	7a30 <coda_cursor_read_int64_array+0x32c>
    7a78:	b	7cb8 <coda_cursor_read_int64_array+0x5b4>
    7a7c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7a80:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7a84:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7a88:	bl	2d40 <read_uint16_array>
    7a8c:	mov	r3, r0
    7a90:	cmp	r3, #0
    7a94:	beq	7aa0 <coda_cursor_read_int64_array+0x39c>
    7a98:	mvn	r3, #0
    7a9c:	b	7cbc <coda_cursor_read_int64_array+0x5b8>
    7aa0:	sub	r3, fp, #20
    7aa4:	mov	r1, r3
    7aa8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7aac:	bl	0 <coda_cursor_get_num_elements>
    7ab0:	mov	r3, r0
    7ab4:	cmp	r3, #0
    7ab8:	beq	7ac4 <coda_cursor_read_int64_array+0x3c0>
    7abc:	mvn	r3, #0
    7ac0:	b	7cbc <coda_cursor_read_int64_array+0x5b8>
    7ac4:	ldr	r3, [fp, #-20]	; 0xffffffec
    7ac8:	sub	r3, r3, #1
    7acc:	str	r3, [fp, #-8]
    7ad0:	b	7b10 <coda_cursor_read_int64_array+0x40c>
    7ad4:	ldr	r3, [fp, #-8]
    7ad8:	lsl	r3, r3, #3
    7adc:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7ae0:	add	r1, r2, r3
    7ae4:	ldr	r3, [fp, #-8]
    7ae8:	lsl	r3, r3, #1
    7aec:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7af0:	add	r3, r2, r3
    7af4:	ldrh	r3, [r3]
    7af8:	uxth	r2, r3
    7afc:	mov	r3, #0
    7b00:	strd	r2, [r1]
    7b04:	ldr	r3, [fp, #-8]
    7b08:	sub	r3, r3, #1
    7b0c:	str	r3, [fp, #-8]
    7b10:	ldr	r3, [fp, #-8]
    7b14:	cmp	r3, #0
    7b18:	bge	7ad4 <coda_cursor_read_int64_array+0x3d0>
    7b1c:	b	7cb8 <coda_cursor_read_int64_array+0x5b4>
    7b20:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7b24:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7b28:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7b2c:	bl	2ea8 <read_int32_array>
    7b30:	mov	r3, r0
    7b34:	cmp	r3, #0
    7b38:	beq	7b44 <coda_cursor_read_int64_array+0x440>
    7b3c:	mvn	r3, #0
    7b40:	b	7cbc <coda_cursor_read_int64_array+0x5b8>
    7b44:	sub	r3, fp, #20
    7b48:	mov	r1, r3
    7b4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7b50:	bl	0 <coda_cursor_get_num_elements>
    7b54:	mov	r3, r0
    7b58:	cmp	r3, #0
    7b5c:	beq	7b68 <coda_cursor_read_int64_array+0x464>
    7b60:	mvn	r3, #0
    7b64:	b	7cbc <coda_cursor_read_int64_array+0x5b8>
    7b68:	ldr	r3, [fp, #-20]	; 0xffffffec
    7b6c:	sub	r3, r3, #1
    7b70:	str	r3, [fp, #-8]
    7b74:	b	7bb4 <coda_cursor_read_int64_array+0x4b0>
    7b78:	ldr	r3, [fp, #-8]
    7b7c:	lsl	r3, r3, #3
    7b80:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7b84:	add	r1, r2, r3
    7b88:	ldr	r3, [fp, #-8]
    7b8c:	lsl	r3, r3, #2
    7b90:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7b94:	add	r3, r2, r3
    7b98:	ldr	r3, [r3]
    7b9c:	mov	r2, r3
    7ba0:	asr	r3, r2, #31
    7ba4:	strd	r2, [r1]
    7ba8:	ldr	r3, [fp, #-8]
    7bac:	sub	r3, r3, #1
    7bb0:	str	r3, [fp, #-8]
    7bb4:	ldr	r3, [fp, #-8]
    7bb8:	cmp	r3, #0
    7bbc:	bge	7b78 <coda_cursor_read_int64_array+0x474>
    7bc0:	b	7cb8 <coda_cursor_read_int64_array+0x5b4>
    7bc4:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7bc8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7bcc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7bd0:	bl	3044 <read_uint32_array>
    7bd4:	mov	r3, r0
    7bd8:	cmp	r3, #0
    7bdc:	beq	7be8 <coda_cursor_read_int64_array+0x4e4>
    7be0:	mvn	r3, #0
    7be4:	b	7cbc <coda_cursor_read_int64_array+0x5b8>
    7be8:	sub	r3, fp, #20
    7bec:	mov	r1, r3
    7bf0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7bf4:	bl	0 <coda_cursor_get_num_elements>
    7bf8:	mov	r3, r0
    7bfc:	cmp	r3, #0
    7c00:	beq	7c0c <coda_cursor_read_int64_array+0x508>
    7c04:	mvn	r3, #0
    7c08:	b	7cbc <coda_cursor_read_int64_array+0x5b8>
    7c0c:	ldr	r3, [fp, #-20]	; 0xffffffec
    7c10:	sub	r3, r3, #1
    7c14:	str	r3, [fp, #-8]
    7c18:	b	7c58 <coda_cursor_read_int64_array+0x554>
    7c1c:	ldr	r3, [fp, #-8]
    7c20:	lsl	r3, r3, #3
    7c24:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7c28:	add	r1, r2, r3
    7c2c:	ldr	r3, [fp, #-8]
    7c30:	lsl	r3, r3, #2
    7c34:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7c38:	add	r3, r2, r3
    7c3c:	ldr	r3, [r3]
    7c40:	mov	r2, r3
    7c44:	mov	r3, #0
    7c48:	strd	r2, [r1]
    7c4c:	ldr	r3, [fp, #-8]
    7c50:	sub	r3, r3, #1
    7c54:	str	r3, [fp, #-8]
    7c58:	ldr	r3, [fp, #-8]
    7c5c:	cmp	r3, #0
    7c60:	bge	7c1c <coda_cursor_read_int64_array+0x518>
    7c64:	b	7cb8 <coda_cursor_read_int64_array+0x5b4>
    7c68:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7c6c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7c70:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7c74:	bl	31b0 <read_int64_array>
    7c78:	mov	r3, r0
    7c7c:	cmp	r3, #0
    7c80:	beq	7cb4 <coda_cursor_read_int64_array+0x5b0>
    7c84:	mvn	r3, #0
    7c88:	b	7cbc <coda_cursor_read_int64_array+0x5b8>
    7c8c:	ldr	r3, [fp, #-16]
    7c90:	mov	r0, r3
    7c94:	bl	0 <coda_type_get_native_type_name>
    7c98:	mov	r3, r0
    7c9c:	mov	r2, r3
    7ca0:	ldr	r1, [pc, #56]	; 7ce0 <coda_cursor_read_int64_array+0x5dc>
    7ca4:	mvn	r0, #104	; 0x68
    7ca8:	bl	0 <coda_set_error>
    7cac:	mvn	r3, #0
    7cb0:	b	7cbc <coda_cursor_read_int64_array+0x5b8>
    7cb4:	nop			; (mov r0, r0)
    7cb8:	mov	r3, #0
    7cbc:	mov	r0, r3
    7cc0:	sub	sp, fp, #4
    7cc4:	pop	{fp, pc}
    7cc8:	.word	0x00000d55
    7ccc:	.word	0x000000c8
    7cd0:	.word	0x00000118
    7cd4:	.word	0x00000d5a
    7cd8:	.word	0x00000138
    7cdc:	.word	0x00000480
    7ce0:	.word	0x00000274

00007ce4 <coda_cursor_read_uint64_array>:
    7ce4:	push	{fp, lr}
    7ce8:	add	fp, sp, #4
    7cec:	sub	sp, sp, #32
    7cf0:	str	r0, [fp, #-24]	; 0xffffffe8
    7cf4:	str	r1, [fp, #-28]	; 0xffffffe4
    7cf8:	str	r2, [fp, #-32]	; 0xffffffe0
    7cfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7d00:	cmp	r3, #0
    7d04:	beq	7d3c <coda_cursor_read_uint64_array+0x58>
    7d08:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7d0c:	ldr	r3, [r3, #4]
    7d10:	cmp	r3, #0
    7d14:	ble	7d3c <coda_cursor_read_uint64_array+0x58>
    7d18:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7d1c:	ldr	r3, [r3, #4]
    7d20:	sub	r3, r3, #1
    7d24:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7d28:	lsl	r3, r3, #4
    7d2c:	add	r3, r2, r3
    7d30:	ldr	r3, [r3, #8]
    7d34:	cmp	r3, #0
    7d38:	bne	7d58 <coda_cursor_read_uint64_array+0x74>
    7d3c:	ldr	r3, [pc, #896]	; 80c4 <coda_cursor_read_uint64_array+0x3e0>
    7d40:	ldr	r2, [pc, #896]	; 80c8 <coda_cursor_read_uint64_array+0x3e4>
    7d44:	ldr	r1, [pc, #896]	; 80cc <coda_cursor_read_uint64_array+0x3e8>
    7d48:	mvn	r0, #99	; 0x63
    7d4c:	bl	0 <coda_set_error>
    7d50:	mvn	r3, #0
    7d54:	b	80b8 <coda_cursor_read_uint64_array+0x3d4>
    7d58:	ldr	r3, [fp, #-28]	; 0xffffffe4
    7d5c:	cmp	r3, #0
    7d60:	bne	7d80 <coda_cursor_read_uint64_array+0x9c>
    7d64:	ldr	r3, [pc, #868]	; 80d0 <coda_cursor_read_uint64_array+0x3ec>
    7d68:	ldr	r2, [pc, #856]	; 80c8 <coda_cursor_read_uint64_array+0x3e4>
    7d6c:	ldr	r1, [pc, #864]	; 80d4 <coda_cursor_read_uint64_array+0x3f0>
    7d70:	mvn	r0, #99	; 0x63
    7d74:	bl	0 <coda_set_error>
    7d78:	mvn	r3, #0
    7d7c:	b	80b8 <coda_cursor_read_uint64_array+0x3d4>
    7d80:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7d84:	ldr	r3, [r3, #4]
    7d88:	sub	r3, r3, #1
    7d8c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7d90:	lsl	r3, r3, #4
    7d94:	add	r3, r2, r3
    7d98:	ldr	r3, [r3, #8]
    7d9c:	ldr	r3, [r3]
    7da0:	cmp	r3, #99	; 0x63
    7da4:	bhi	7dc8 <coda_cursor_read_uint64_array+0xe4>
    7da8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7dac:	ldr	r3, [r3, #4]
    7db0:	sub	r3, r3, #1
    7db4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7db8:	lsl	r3, r3, #4
    7dbc:	add	r3, r2, r3
    7dc0:	ldr	r3, [r3, #8]
    7dc4:	b	7de8 <coda_cursor_read_uint64_array+0x104>
    7dc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7dcc:	ldr	r3, [r3, #4]
    7dd0:	sub	r3, r3, #1
    7dd4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7dd8:	lsl	r3, r3, #4
    7ddc:	add	r3, r2, r3
    7de0:	ldr	r3, [r3, #8]
    7de4:	ldr	r3, [r3, #4]
    7de8:	str	r3, [fp, #-12]
    7dec:	ldr	r3, [fp, #-12]
    7df0:	ldr	r3, [r3, #8]
    7df4:	cmp	r3, #1
    7df8:	beq	7e28 <coda_cursor_read_uint64_array+0x144>
    7dfc:	ldr	r3, [fp, #-12]
    7e00:	ldr	r3, [r3, #8]
    7e04:	mov	r0, r3
    7e08:	bl	0 <coda_type_get_class_name>
    7e0c:	mov	r3, r0
    7e10:	mov	r2, r3
    7e14:	ldr	r1, [pc, #700]	; 80d8 <coda_cursor_read_uint64_array+0x3f4>
    7e18:	mvn	r0, #104	; 0x68
    7e1c:	bl	0 <coda_set_error>
    7e20:	mvn	r3, #0
    7e24:	b	80b8 <coda_cursor_read_uint64_array+0x3d4>
    7e28:	sub	r3, fp, #16
    7e2c:	mov	r1, r3
    7e30:	ldr	r0, [fp, #-12]
    7e34:	bl	1080 <get_array_element_read_type>
    7e38:	mov	r3, r0
    7e3c:	cmp	r3, #0
    7e40:	beq	7e4c <coda_cursor_read_uint64_array+0x168>
    7e44:	mvn	r3, #0
    7e48:	b	80b8 <coda_cursor_read_uint64_array+0x3d4>
    7e4c:	ldr	r3, [fp, #-16]
    7e50:	sub	r3, r3, #1
    7e54:	cmp	r3, #6
    7e58:	ldrls	pc, [pc, r3, lsl #2]
    7e5c:	b	8088 <coda_cursor_read_uint64_array+0x3a4>
    7e60:	.word	0x00007e7c
    7e64:	.word	0x00008088
    7e68:	.word	0x00007f1c
    7e6c:	.word	0x00008088
    7e70:	.word	0x00007fc0
    7e74:	.word	0x00008088
    7e78:	.word	0x00008064
    7e7c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7e80:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7e84:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7e88:	bl	2a3c <read_uint8_array>
    7e8c:	mov	r3, r0
    7e90:	cmp	r3, #0
    7e94:	beq	7ea0 <coda_cursor_read_uint64_array+0x1bc>
    7e98:	mvn	r3, #0
    7e9c:	b	80b8 <coda_cursor_read_uint64_array+0x3d4>
    7ea0:	sub	r3, fp, #20
    7ea4:	mov	r1, r3
    7ea8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7eac:	bl	0 <coda_cursor_get_num_elements>
    7eb0:	mov	r3, r0
    7eb4:	cmp	r3, #0
    7eb8:	beq	7ec4 <coda_cursor_read_uint64_array+0x1e0>
    7ebc:	mvn	r3, #0
    7ec0:	b	80b8 <coda_cursor_read_uint64_array+0x3d4>
    7ec4:	ldr	r3, [fp, #-20]	; 0xffffffec
    7ec8:	sub	r3, r3, #1
    7ecc:	str	r3, [fp, #-8]
    7ed0:	b	7f0c <coda_cursor_read_uint64_array+0x228>
    7ed4:	ldr	r3, [fp, #-8]
    7ed8:	lsl	r3, r3, #3
    7edc:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7ee0:	add	r1, r2, r3
    7ee4:	ldr	r3, [fp, #-8]
    7ee8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7eec:	add	r3, r2, r3
    7ef0:	ldrb	r3, [r3]
    7ef4:	uxtb	r2, r3
    7ef8:	mov	r3, #0
    7efc:	strd	r2, [r1]
    7f00:	ldr	r3, [fp, #-8]
    7f04:	sub	r3, r3, #1
    7f08:	str	r3, [fp, #-8]
    7f0c:	ldr	r3, [fp, #-8]
    7f10:	cmp	r3, #0
    7f14:	bge	7ed4 <coda_cursor_read_uint64_array+0x1f0>
    7f18:	b	80b4 <coda_cursor_read_uint64_array+0x3d0>
    7f1c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7f20:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7f24:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7f28:	bl	2d40 <read_uint16_array>
    7f2c:	mov	r3, r0
    7f30:	cmp	r3, #0
    7f34:	beq	7f40 <coda_cursor_read_uint64_array+0x25c>
    7f38:	mvn	r3, #0
    7f3c:	b	80b8 <coda_cursor_read_uint64_array+0x3d4>
    7f40:	sub	r3, fp, #20
    7f44:	mov	r1, r3
    7f48:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7f4c:	bl	0 <coda_cursor_get_num_elements>
    7f50:	mov	r3, r0
    7f54:	cmp	r3, #0
    7f58:	beq	7f64 <coda_cursor_read_uint64_array+0x280>
    7f5c:	mvn	r3, #0
    7f60:	b	80b8 <coda_cursor_read_uint64_array+0x3d4>
    7f64:	ldr	r3, [fp, #-20]	; 0xffffffec
    7f68:	sub	r3, r3, #1
    7f6c:	str	r3, [fp, #-8]
    7f70:	b	7fb0 <coda_cursor_read_uint64_array+0x2cc>
    7f74:	ldr	r3, [fp, #-8]
    7f78:	lsl	r3, r3, #3
    7f7c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7f80:	add	r1, r2, r3
    7f84:	ldr	r3, [fp, #-8]
    7f88:	lsl	r3, r3, #1
    7f8c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    7f90:	add	r3, r2, r3
    7f94:	ldrh	r3, [r3]
    7f98:	uxth	r2, r3
    7f9c:	mov	r3, #0
    7fa0:	strd	r2, [r1]
    7fa4:	ldr	r3, [fp, #-8]
    7fa8:	sub	r3, r3, #1
    7fac:	str	r3, [fp, #-8]
    7fb0:	ldr	r3, [fp, #-8]
    7fb4:	cmp	r3, #0
    7fb8:	bge	7f74 <coda_cursor_read_uint64_array+0x290>
    7fbc:	b	80b4 <coda_cursor_read_uint64_array+0x3d0>
    7fc0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7fc4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7fc8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7fcc:	bl	3044 <read_uint32_array>
    7fd0:	mov	r3, r0
    7fd4:	cmp	r3, #0
    7fd8:	beq	7fe4 <coda_cursor_read_uint64_array+0x300>
    7fdc:	mvn	r3, #0
    7fe0:	b	80b8 <coda_cursor_read_uint64_array+0x3d4>
    7fe4:	sub	r3, fp, #20
    7fe8:	mov	r1, r3
    7fec:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7ff0:	bl	0 <coda_cursor_get_num_elements>
    7ff4:	mov	r3, r0
    7ff8:	cmp	r3, #0
    7ffc:	beq	8008 <coda_cursor_read_uint64_array+0x324>
    8000:	mvn	r3, #0
    8004:	b	80b8 <coda_cursor_read_uint64_array+0x3d4>
    8008:	ldr	r3, [fp, #-20]	; 0xffffffec
    800c:	sub	r3, r3, #1
    8010:	str	r3, [fp, #-8]
    8014:	b	8054 <coda_cursor_read_uint64_array+0x370>
    8018:	ldr	r3, [fp, #-8]
    801c:	lsl	r3, r3, #3
    8020:	ldr	r2, [fp, #-28]	; 0xffffffe4
    8024:	add	r1, r2, r3
    8028:	ldr	r3, [fp, #-8]
    802c:	lsl	r3, r3, #2
    8030:	ldr	r2, [fp, #-28]	; 0xffffffe4
    8034:	add	r3, r2, r3
    8038:	ldr	r3, [r3]
    803c:	mov	r2, r3
    8040:	mov	r3, #0
    8044:	strd	r2, [r1]
    8048:	ldr	r3, [fp, #-8]
    804c:	sub	r3, r3, #1
    8050:	str	r3, [fp, #-8]
    8054:	ldr	r3, [fp, #-8]
    8058:	cmp	r3, #0
    805c:	bge	8018 <coda_cursor_read_uint64_array+0x334>
    8060:	b	80b4 <coda_cursor_read_uint64_array+0x3d0>
    8064:	ldr	r2, [fp, #-32]	; 0xffffffe0
    8068:	ldr	r1, [fp, #-28]	; 0xffffffe4
    806c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8070:	bl	331c <read_uint64_array>
    8074:	mov	r3, r0
    8078:	cmp	r3, #0
    807c:	beq	80b0 <coda_cursor_read_uint64_array+0x3cc>
    8080:	mvn	r3, #0
    8084:	b	80b8 <coda_cursor_read_uint64_array+0x3d4>
    8088:	ldr	r3, [fp, #-16]
    808c:	mov	r0, r3
    8090:	bl	0 <coda_type_get_native_type_name>
    8094:	mov	r3, r0
    8098:	mov	r2, r3
    809c:	ldr	r1, [pc, #56]	; 80dc <coda_cursor_read_uint64_array+0x3f8>
    80a0:	mvn	r0, #104	; 0x68
    80a4:	bl	0 <coda_set_error>
    80a8:	mvn	r3, #0
    80ac:	b	80b8 <coda_cursor_read_uint64_array+0x3d4>
    80b0:	nop			; (mov r0, r0)
    80b4:	mov	r3, #0
    80b8:	mov	r0, r3
    80bc:	sub	sp, fp, #4
    80c0:	pop	{fp, pc}
    80c4:	.word	0x00000de9
    80c8:	.word	0x000000c8
    80cc:	.word	0x00000118
    80d0:	.word	0x00000dee
    80d4:	.word	0x00000138
    80d8:	.word	0x00000480
    80dc:	.word	0x000002a4

000080e0 <coda_cursor_read_float_array>:
    80e0:	push	{r4, fp, lr}
    80e4:	add	fp, sp, #8
    80e8:	sub	sp, sp, #68	; 0x44
    80ec:	str	r0, [fp, #-56]	; 0xffffffc8
    80f0:	str	r1, [fp, #-60]	; 0xffffffc4
    80f4:	str	r2, [fp, #-64]	; 0xffffffc0
    80f8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    80fc:	cmp	r3, #0
    8100:	beq	8138 <coda_cursor_read_float_array+0x58>
    8104:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8108:	ldr	r3, [r3, #4]
    810c:	cmp	r3, #0
    8110:	ble	8138 <coda_cursor_read_float_array+0x58>
    8114:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8118:	ldr	r3, [r3, #4]
    811c:	sub	r3, r3, #1
    8120:	ldr	r2, [fp, #-56]	; 0xffffffc8
    8124:	lsl	r3, r3, #4
    8128:	add	r3, r2, r3
    812c:	ldr	r3, [r3, #8]
    8130:	cmp	r3, #0
    8134:	bne	8154 <coda_cursor_read_float_array+0x74>
    8138:	ldr	r3, [pc, #2444]	; 8acc <coda_cursor_read_float_array+0x9ec>
    813c:	ldr	r2, [pc, #2444]	; 8ad0 <coda_cursor_read_float_array+0x9f0>
    8140:	ldr	r1, [pc, #2444]	; 8ad4 <coda_cursor_read_float_array+0x9f4>
    8144:	mvn	r0, #99	; 0x63
    8148:	bl	0 <coda_set_error>
    814c:	mvn	r3, #0
    8150:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    8154:	ldr	r3, [fp, #-60]	; 0xffffffc4
    8158:	cmp	r3, #0
    815c:	bne	817c <coda_cursor_read_float_array+0x9c>
    8160:	ldr	r3, [pc, #2416]	; 8ad8 <coda_cursor_read_float_array+0x9f8>
    8164:	ldr	r2, [pc, #2404]	; 8ad0 <coda_cursor_read_float_array+0x9f0>
    8168:	ldr	r1, [pc, #2412]	; 8adc <coda_cursor_read_float_array+0x9fc>
    816c:	mvn	r0, #99	; 0x63
    8170:	bl	0 <coda_set_error>
    8174:	mvn	r3, #0
    8178:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    817c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8180:	ldr	r3, [r3, #4]
    8184:	sub	r3, r3, #1
    8188:	ldr	r2, [fp, #-56]	; 0xffffffc8
    818c:	lsl	r3, r3, #4
    8190:	add	r3, r2, r3
    8194:	ldr	r3, [r3, #8]
    8198:	ldr	r3, [r3]
    819c:	cmp	r3, #99	; 0x63
    81a0:	bhi	81c4 <coda_cursor_read_float_array+0xe4>
    81a4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    81a8:	ldr	r3, [r3, #4]
    81ac:	sub	r3, r3, #1
    81b0:	ldr	r2, [fp, #-56]	; 0xffffffc8
    81b4:	lsl	r3, r3, #4
    81b8:	add	r3, r2, r3
    81bc:	ldr	r3, [r3, #8]
    81c0:	b	81e4 <coda_cursor_read_float_array+0x104>
    81c4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    81c8:	ldr	r3, [r3, #4]
    81cc:	sub	r3, r3, #1
    81d0:	ldr	r2, [fp, #-56]	; 0xffffffc8
    81d4:	lsl	r3, r3, #4
    81d8:	add	r3, r2, r3
    81dc:	ldr	r3, [r3, #8]
    81e0:	ldr	r3, [r3, #4]
    81e4:	str	r3, [fp, #-20]	; 0xffffffec
    81e8:	ldr	r3, [fp, #-20]	; 0xffffffec
    81ec:	ldr	r3, [r3, #8]
    81f0:	cmp	r3, #1
    81f4:	beq	8224 <coda_cursor_read_float_array+0x144>
    81f8:	ldr	r3, [fp, #-20]	; 0xffffffec
    81fc:	ldr	r3, [r3, #8]
    8200:	mov	r0, r3
    8204:	bl	0 <coda_type_get_class_name>
    8208:	mov	r3, r0
    820c:	mov	r2, r3
    8210:	ldr	r1, [pc, #2248]	; 8ae0 <coda_cursor_read_float_array+0xa00>
    8214:	mvn	r0, #104	; 0x68
    8218:	bl	0 <coda_set_error>
    821c:	mvn	r3, #0
    8220:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    8224:	sub	r2, fp, #44	; 0x2c
    8228:	sub	r3, fp, #40	; 0x28
    822c:	mov	r1, r3
    8230:	ldr	r0, [fp, #-20]	; 0xffffffec
    8234:	bl	1120 <get_array_element_unconverted_read_type>
    8238:	mov	r3, r0
    823c:	cmp	r3, #0
    8240:	beq	824c <coda_cursor_read_float_array+0x16c>
    8244:	mvn	r3, #0
    8248:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    824c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    8250:	cmp	r3, #0
    8254:	beq	8358 <coda_cursor_read_float_array+0x278>
    8258:	sub	r3, fp, #48	; 0x30
    825c:	mov	r1, r3
    8260:	ldr	r0, [fp, #-56]	; 0xffffffc8
    8264:	bl	0 <coda_cursor_get_num_elements>
    8268:	mov	r3, r0
    826c:	cmp	r3, #0
    8270:	beq	827c <coda_cursor_read_float_array+0x19c>
    8274:	mvn	r3, #0
    8278:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    827c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8280:	lsl	r3, r3, #3
    8284:	mov	r0, r3
    8288:	bl	0 <malloc>
    828c:	mov	r3, r0
    8290:	str	r3, [fp, #-24]	; 0xffffffe8
    8294:	ldr	r3, [fp, #-24]	; 0xffffffe8
    8298:	cmp	r3, #0
    829c:	bne	82c8 <coda_cursor_read_float_array+0x1e8>
    82a0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    82a4:	lsl	r2, r3, #3
    82a8:	ldr	r3, [pc, #2100]	; 8ae4 <coda_cursor_read_float_array+0xa04>
    82ac:	str	r3, [sp]
    82b0:	ldr	r3, [pc, #2072]	; 8ad0 <coda_cursor_read_float_array+0x9f0>
    82b4:	ldr	r1, [pc, #2092]	; 8ae8 <coda_cursor_read_float_array+0xa08>
    82b8:	mvn	r0, #0
    82bc:	bl	0 <coda_set_error>
    82c0:	mvn	r3, #0
    82c4:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    82c8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    82cc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    82d0:	ldr	r0, [fp, #-56]	; 0xffffffc8
    82d4:	bl	8afc <coda_cursor_read_double_array>
    82d8:	mov	r3, r0
    82dc:	cmp	r3, #0
    82e0:	beq	82f4 <coda_cursor_read_float_array+0x214>
    82e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    82e8:	bl	0 <free>
    82ec:	mvn	r3, #0
    82f0:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    82f4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    82f8:	sub	r3, r3, #1
    82fc:	str	r3, [fp, #-16]
    8300:	b	833c <coda_cursor_read_float_array+0x25c>
    8304:	ldr	r3, [fp, #-16]
    8308:	lsl	r3, r3, #2
    830c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    8310:	add	r3, r2, r3
    8314:	ldr	r2, [fp, #-16]
    8318:	lsl	r2, r2, #3
    831c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    8320:	add	r2, r1, r2
    8324:	vldr	d7, [r2]
    8328:	vcvt.f32.f64	s15, d7
    832c:	vstr	s15, [r3]
    8330:	ldr	r3, [fp, #-16]
    8334:	sub	r3, r3, #1
    8338:	str	r3, [fp, #-16]
    833c:	ldr	r3, [fp, #-16]
    8340:	cmp	r3, #0
    8344:	bge	8304 <coda_cursor_read_float_array+0x224>
    8348:	ldr	r0, [fp, #-24]	; 0xffffffe8
    834c:	bl	0 <free>
    8350:	mov	r3, #0
    8354:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    8358:	ldr	r3, [fp, #-40]	; 0xffffffd8
    835c:	cmp	r3, #9
    8360:	ldrls	pc, [pc, r3, lsl #2]
    8364:	b	8a90 <coda_cursor_read_float_array+0x9b0>
    8368:	.word	0x00008390
    836c:	.word	0x00008430
    8370:	.word	0x000084d0
    8374:	.word	0x00008574
    8378:	.word	0x00008618
    837c:	.word	0x000086bc
    8380:	.word	0x00008760
    8384:	.word	0x00008868
    8388:	.word	0x00008970
    838c:	.word	0x00008994
    8390:	ldr	r2, [fp, #-64]	; 0xffffffc0
    8394:	ldr	r1, [fp, #-60]	; 0xffffffc4
    8398:	ldr	r0, [fp, #-56]	; 0xffffffc8
    839c:	bl	28a0 <read_int8_array>
    83a0:	mov	r3, r0
    83a4:	cmp	r3, #0
    83a8:	beq	83b4 <coda_cursor_read_float_array+0x2d4>
    83ac:	mvn	r3, #0
    83b0:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    83b4:	sub	r3, fp, #48	; 0x30
    83b8:	mov	r1, r3
    83bc:	ldr	r0, [fp, #-56]	; 0xffffffc8
    83c0:	bl	0 <coda_cursor_get_num_elements>
    83c4:	mov	r3, r0
    83c8:	cmp	r3, #0
    83cc:	beq	83d8 <coda_cursor_read_float_array+0x2f8>
    83d0:	mvn	r3, #0
    83d4:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    83d8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    83dc:	sub	r3, r3, #1
    83e0:	str	r3, [fp, #-16]
    83e4:	b	8420 <coda_cursor_read_float_array+0x340>
    83e8:	ldr	r3, [fp, #-16]
    83ec:	lsl	r3, r3, #2
    83f0:	ldr	r2, [fp, #-60]	; 0xffffffc4
    83f4:	add	r3, r2, r3
    83f8:	ldr	r2, [fp, #-16]
    83fc:	ldr	r1, [fp, #-60]	; 0xffffffc4
    8400:	add	r2, r1, r2
    8404:	ldrsb	r2, [r2]
    8408:	vmov	s15, r2
    840c:	vcvt.f32.s32	s15, s15
    8410:	vstr	s15, [r3]
    8414:	ldr	r3, [fp, #-16]
    8418:	sub	r3, r3, #1
    841c:	str	r3, [fp, #-16]
    8420:	ldr	r3, [fp, #-16]
    8424:	cmp	r3, #0
    8428:	bge	83e8 <coda_cursor_read_float_array+0x308>
    842c:	b	8abc <coda_cursor_read_float_array+0x9dc>
    8430:	ldr	r2, [fp, #-64]	; 0xffffffc0
    8434:	ldr	r1, [fp, #-60]	; 0xffffffc4
    8438:	ldr	r0, [fp, #-56]	; 0xffffffc8
    843c:	bl	2a3c <read_uint8_array>
    8440:	mov	r3, r0
    8444:	cmp	r3, #0
    8448:	beq	8454 <coda_cursor_read_float_array+0x374>
    844c:	mvn	r3, #0
    8450:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    8454:	sub	r3, fp, #48	; 0x30
    8458:	mov	r1, r3
    845c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    8460:	bl	0 <coda_cursor_get_num_elements>
    8464:	mov	r3, r0
    8468:	cmp	r3, #0
    846c:	beq	8478 <coda_cursor_read_float_array+0x398>
    8470:	mvn	r3, #0
    8474:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    8478:	ldr	r3, [fp, #-48]	; 0xffffffd0
    847c:	sub	r3, r3, #1
    8480:	str	r3, [fp, #-16]
    8484:	b	84c0 <coda_cursor_read_float_array+0x3e0>
    8488:	ldr	r3, [fp, #-16]
    848c:	lsl	r3, r3, #2
    8490:	ldr	r2, [fp, #-60]	; 0xffffffc4
    8494:	add	r3, r2, r3
    8498:	ldr	r2, [fp, #-16]
    849c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    84a0:	add	r2, r1, r2
    84a4:	ldrb	r2, [r2]
    84a8:	vmov	s15, r2
    84ac:	vcvt.f32.u32	s15, s15
    84b0:	vstr	s15, [r3]
    84b4:	ldr	r3, [fp, #-16]
    84b8:	sub	r3, r3, #1
    84bc:	str	r3, [fp, #-16]
    84c0:	ldr	r3, [fp, #-16]
    84c4:	cmp	r3, #0
    84c8:	bge	8488 <coda_cursor_read_float_array+0x3a8>
    84cc:	b	8abc <coda_cursor_read_float_array+0x9dc>
    84d0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    84d4:	ldr	r1, [fp, #-60]	; 0xffffffc4
    84d8:	ldr	r0, [fp, #-56]	; 0xffffffc8
    84dc:	bl	2ba8 <read_int16_array>
    84e0:	mov	r3, r0
    84e4:	cmp	r3, #0
    84e8:	beq	84f4 <coda_cursor_read_float_array+0x414>
    84ec:	mvn	r3, #0
    84f0:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    84f4:	sub	r3, fp, #48	; 0x30
    84f8:	mov	r1, r3
    84fc:	ldr	r0, [fp, #-56]	; 0xffffffc8
    8500:	bl	0 <coda_cursor_get_num_elements>
    8504:	mov	r3, r0
    8508:	cmp	r3, #0
    850c:	beq	8518 <coda_cursor_read_float_array+0x438>
    8510:	mvn	r3, #0
    8514:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    8518:	ldr	r3, [fp, #-48]	; 0xffffffd0
    851c:	sub	r3, r3, #1
    8520:	str	r3, [fp, #-16]
    8524:	b	8564 <coda_cursor_read_float_array+0x484>
    8528:	ldr	r3, [fp, #-16]
    852c:	lsl	r3, r3, #2
    8530:	ldr	r2, [fp, #-60]	; 0xffffffc4
    8534:	add	r3, r2, r3
    8538:	ldr	r2, [fp, #-16]
    853c:	lsl	r2, r2, #1
    8540:	ldr	r1, [fp, #-60]	; 0xffffffc4
    8544:	add	r2, r1, r2
    8548:	ldrsh	r2, [r2]
    854c:	vmov	s15, r2
    8550:	vcvt.f32.s32	s15, s15
    8554:	vstr	s15, [r3]
    8558:	ldr	r3, [fp, #-16]
    855c:	sub	r3, r3, #1
    8560:	str	r3, [fp, #-16]
    8564:	ldr	r3, [fp, #-16]
    8568:	cmp	r3, #0
    856c:	bge	8528 <coda_cursor_read_float_array+0x448>
    8570:	b	8abc <coda_cursor_read_float_array+0x9dc>
    8574:	ldr	r2, [fp, #-64]	; 0xffffffc0
    8578:	ldr	r1, [fp, #-60]	; 0xffffffc4
    857c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    8580:	bl	2d40 <read_uint16_array>
    8584:	mov	r3, r0
    8588:	cmp	r3, #0
    858c:	beq	8598 <coda_cursor_read_float_array+0x4b8>
    8590:	mvn	r3, #0
    8594:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    8598:	sub	r3, fp, #48	; 0x30
    859c:	mov	r1, r3
    85a0:	ldr	r0, [fp, #-56]	; 0xffffffc8
    85a4:	bl	0 <coda_cursor_get_num_elements>
    85a8:	mov	r3, r0
    85ac:	cmp	r3, #0
    85b0:	beq	85bc <coda_cursor_read_float_array+0x4dc>
    85b4:	mvn	r3, #0
    85b8:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    85bc:	ldr	r3, [fp, #-48]	; 0xffffffd0
    85c0:	sub	r3, r3, #1
    85c4:	str	r3, [fp, #-16]
    85c8:	b	8608 <coda_cursor_read_float_array+0x528>
    85cc:	ldr	r3, [fp, #-16]
    85d0:	lsl	r3, r3, #2
    85d4:	ldr	r2, [fp, #-60]	; 0xffffffc4
    85d8:	add	r3, r2, r3
    85dc:	ldr	r2, [fp, #-16]
    85e0:	lsl	r2, r2, #1
    85e4:	ldr	r1, [fp, #-60]	; 0xffffffc4
    85e8:	add	r2, r1, r2
    85ec:	ldrh	r2, [r2]
    85f0:	vmov	s15, r2
    85f4:	vcvt.f32.u32	s15, s15
    85f8:	vstr	s15, [r3]
    85fc:	ldr	r3, [fp, #-16]
    8600:	sub	r3, r3, #1
    8604:	str	r3, [fp, #-16]
    8608:	ldr	r3, [fp, #-16]
    860c:	cmp	r3, #0
    8610:	bge	85cc <coda_cursor_read_float_array+0x4ec>
    8614:	b	8abc <coda_cursor_read_float_array+0x9dc>
    8618:	ldr	r2, [fp, #-64]	; 0xffffffc0
    861c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    8620:	ldr	r0, [fp, #-56]	; 0xffffffc8
    8624:	bl	2ea8 <read_int32_array>
    8628:	mov	r3, r0
    862c:	cmp	r3, #0
    8630:	beq	863c <coda_cursor_read_float_array+0x55c>
    8634:	mvn	r3, #0
    8638:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    863c:	sub	r3, fp, #48	; 0x30
    8640:	mov	r1, r3
    8644:	ldr	r0, [fp, #-56]	; 0xffffffc8
    8648:	bl	0 <coda_cursor_get_num_elements>
    864c:	mov	r3, r0
    8650:	cmp	r3, #0
    8654:	beq	8660 <coda_cursor_read_float_array+0x580>
    8658:	mvn	r3, #0
    865c:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    8660:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8664:	sub	r3, r3, #1
    8668:	str	r3, [fp, #-16]
    866c:	b	86ac <coda_cursor_read_float_array+0x5cc>
    8670:	ldr	r3, [fp, #-16]
    8674:	lsl	r3, r3, #2
    8678:	ldr	r2, [fp, #-60]	; 0xffffffc4
    867c:	add	r3, r2, r3
    8680:	ldr	r2, [fp, #-16]
    8684:	lsl	r2, r2, #2
    8688:	ldr	r1, [fp, #-60]	; 0xffffffc4
    868c:	add	r2, r1, r2
    8690:	ldr	r2, [r2]
    8694:	vmov	s15, r2
    8698:	vcvt.f32.s32	s15, s15
    869c:	vstr	s15, [r3]
    86a0:	ldr	r3, [fp, #-16]
    86a4:	sub	r3, r3, #1
    86a8:	str	r3, [fp, #-16]
    86ac:	ldr	r3, [fp, #-16]
    86b0:	cmp	r3, #0
    86b4:	bge	8670 <coda_cursor_read_float_array+0x590>
    86b8:	b	8abc <coda_cursor_read_float_array+0x9dc>
    86bc:	ldr	r2, [fp, #-64]	; 0xffffffc0
    86c0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    86c4:	ldr	r0, [fp, #-56]	; 0xffffffc8
    86c8:	bl	3044 <read_uint32_array>
    86cc:	mov	r3, r0
    86d0:	cmp	r3, #0
    86d4:	beq	86e0 <coda_cursor_read_float_array+0x600>
    86d8:	mvn	r3, #0
    86dc:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    86e0:	sub	r3, fp, #48	; 0x30
    86e4:	mov	r1, r3
    86e8:	ldr	r0, [fp, #-56]	; 0xffffffc8
    86ec:	bl	0 <coda_cursor_get_num_elements>
    86f0:	mov	r3, r0
    86f4:	cmp	r3, #0
    86f8:	beq	8704 <coda_cursor_read_float_array+0x624>
    86fc:	mvn	r3, #0
    8700:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    8704:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8708:	sub	r3, r3, #1
    870c:	str	r3, [fp, #-16]
    8710:	b	8750 <coda_cursor_read_float_array+0x670>
    8714:	ldr	r3, [fp, #-16]
    8718:	lsl	r3, r3, #2
    871c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    8720:	add	r3, r2, r3
    8724:	ldr	r2, [fp, #-16]
    8728:	lsl	r2, r2, #2
    872c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    8730:	add	r2, r1, r2
    8734:	ldr	r2, [r2]
    8738:	vmov	s15, r2
    873c:	vcvt.f32.u32	s15, s15
    8740:	vstr	s15, [r3]
    8744:	ldr	r3, [fp, #-16]
    8748:	sub	r3, r3, #1
    874c:	str	r3, [fp, #-16]
    8750:	ldr	r3, [fp, #-16]
    8754:	cmp	r3, #0
    8758:	bge	8714 <coda_cursor_read_float_array+0x634>
    875c:	b	8abc <coda_cursor_read_float_array+0x9dc>
    8760:	sub	r3, fp, #48	; 0x30
    8764:	mov	r1, r3
    8768:	ldr	r0, [fp, #-56]	; 0xffffffc8
    876c:	bl	0 <coda_cursor_get_num_elements>
    8770:	mov	r3, r0
    8774:	cmp	r3, #0
    8778:	beq	8784 <coda_cursor_read_float_array+0x6a4>
    877c:	mvn	r3, #0
    8780:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    8784:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8788:	lsl	r3, r3, #3
    878c:	mov	r0, r3
    8790:	bl	0 <malloc>
    8794:	mov	r3, r0
    8798:	str	r3, [fp, #-28]	; 0xffffffe4
    879c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    87a0:	cmp	r3, #0
    87a4:	bne	87d0 <coda_cursor_read_float_array+0x6f0>
    87a8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    87ac:	lsl	r2, r3, #3
    87b0:	ldr	r3, [pc, #820]	; 8aec <coda_cursor_read_float_array+0xa0c>
    87b4:	str	r3, [sp]
    87b8:	ldr	r3, [pc, #784]	; 8ad0 <coda_cursor_read_float_array+0x9f0>
    87bc:	ldr	r1, [pc, #804]	; 8ae8 <coda_cursor_read_float_array+0xa08>
    87c0:	mvn	r0, #0
    87c4:	bl	0 <coda_set_error>
    87c8:	mvn	r3, #0
    87cc:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    87d0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    87d4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    87d8:	ldr	r0, [fp, #-56]	; 0xffffffc8
    87dc:	bl	31b0 <read_int64_array>
    87e0:	mov	r3, r0
    87e4:	cmp	r3, #0
    87e8:	beq	87fc <coda_cursor_read_float_array+0x71c>
    87ec:	ldr	r0, [fp, #-28]	; 0xffffffe4
    87f0:	bl	0 <free>
    87f4:	mvn	r3, #0
    87f8:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    87fc:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8800:	sub	r3, r3, #1
    8804:	str	r3, [fp, #-16]
    8808:	b	8850 <coda_cursor_read_float_array+0x770>
    880c:	ldr	r3, [fp, #-16]
    8810:	lsl	r3, r3, #2
    8814:	ldr	r2, [fp, #-60]	; 0xffffffc4
    8818:	add	r4, r2, r3
    881c:	ldr	r3, [fp, #-16]
    8820:	lsl	r3, r3, #3
    8824:	ldr	r2, [fp, #-28]	; 0xffffffe4
    8828:	add	r3, r2, r3
    882c:	ldrd	r2, [r3]
    8830:	mov	r0, r2
    8834:	mov	r1, r3
    8838:	bl	0 <__aeabi_l2f>
    883c:	mov	r3, r0
    8840:	str	r3, [r4]
    8844:	ldr	r3, [fp, #-16]
    8848:	sub	r3, r3, #1
    884c:	str	r3, [fp, #-16]
    8850:	ldr	r3, [fp, #-16]
    8854:	cmp	r3, #0
    8858:	bge	880c <coda_cursor_read_float_array+0x72c>
    885c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8860:	bl	0 <free>
    8864:	b	8abc <coda_cursor_read_float_array+0x9dc>
    8868:	sub	r3, fp, #48	; 0x30
    886c:	mov	r1, r3
    8870:	ldr	r0, [fp, #-56]	; 0xffffffc8
    8874:	bl	0 <coda_cursor_get_num_elements>
    8878:	mov	r3, r0
    887c:	cmp	r3, #0
    8880:	beq	888c <coda_cursor_read_float_array+0x7ac>
    8884:	mvn	r3, #0
    8888:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    888c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8890:	lsl	r3, r3, #3
    8894:	mov	r0, r3
    8898:	bl	0 <malloc>
    889c:	mov	r3, r0
    88a0:	str	r3, [fp, #-32]	; 0xffffffe0
    88a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    88a8:	cmp	r3, #0
    88ac:	bne	88d8 <coda_cursor_read_float_array+0x7f8>
    88b0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    88b4:	lsl	r2, r3, #3
    88b8:	ldr	r3, [pc, #560]	; 8af0 <coda_cursor_read_float_array+0xa10>
    88bc:	str	r3, [sp]
    88c0:	ldr	r3, [pc, #520]	; 8ad0 <coda_cursor_read_float_array+0x9f0>
    88c4:	ldr	r1, [pc, #540]	; 8ae8 <coda_cursor_read_float_array+0xa08>
    88c8:	mvn	r0, #0
    88cc:	bl	0 <coda_set_error>
    88d0:	mvn	r3, #0
    88d4:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    88d8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    88dc:	ldr	r1, [fp, #-32]	; 0xffffffe0
    88e0:	ldr	r0, [fp, #-56]	; 0xffffffc8
    88e4:	bl	331c <read_uint64_array>
    88e8:	mov	r3, r0
    88ec:	cmp	r3, #0
    88f0:	beq	8904 <coda_cursor_read_float_array+0x824>
    88f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    88f8:	bl	0 <free>
    88fc:	mvn	r3, #0
    8900:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    8904:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8908:	sub	r3, r3, #1
    890c:	str	r3, [fp, #-16]
    8910:	b	8958 <coda_cursor_read_float_array+0x878>
    8914:	ldr	r3, [fp, #-16]
    8918:	lsl	r3, r3, #2
    891c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    8920:	add	r4, r2, r3
    8924:	ldr	r3, [fp, #-16]
    8928:	lsl	r3, r3, #3
    892c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    8930:	add	r3, r2, r3
    8934:	ldrd	r2, [r3]
    8938:	mov	r0, r2
    893c:	mov	r1, r3
    8940:	bl	0 <__aeabi_ul2f>
    8944:	mov	r3, r0
    8948:	str	r3, [r4]
    894c:	ldr	r3, [fp, #-16]
    8950:	sub	r3, r3, #1
    8954:	str	r3, [fp, #-16]
    8958:	ldr	r3, [fp, #-16]
    895c:	cmp	r3, #0
    8960:	bge	8914 <coda_cursor_read_float_array+0x834>
    8964:	ldr	r0, [fp, #-32]	; 0xffffffe0
    8968:	bl	0 <free>
    896c:	b	8abc <coda_cursor_read_float_array+0x9dc>
    8970:	ldr	r2, [fp, #-64]	; 0xffffffc0
    8974:	ldr	r1, [fp, #-60]	; 0xffffffc4
    8978:	ldr	r0, [fp, #-56]	; 0xffffffc8
    897c:	bl	345c <read_float_array>
    8980:	mov	r3, r0
    8984:	cmp	r3, #0
    8988:	beq	8ab8 <coda_cursor_read_float_array+0x9d8>
    898c:	mvn	r3, #0
    8990:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    8994:	sub	r3, fp, #48	; 0x30
    8998:	mov	r1, r3
    899c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    89a0:	bl	0 <coda_cursor_get_num_elements>
    89a4:	mov	r3, r0
    89a8:	cmp	r3, #0
    89ac:	beq	89b8 <coda_cursor_read_float_array+0x8d8>
    89b0:	mvn	r3, #0
    89b4:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    89b8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    89bc:	lsl	r3, r3, #3
    89c0:	mov	r0, r3
    89c4:	bl	0 <malloc>
    89c8:	mov	r3, r0
    89cc:	str	r3, [fp, #-36]	; 0xffffffdc
    89d0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    89d4:	cmp	r3, #0
    89d8:	bne	8a04 <coda_cursor_read_float_array+0x924>
    89dc:	ldr	r3, [fp, #-48]	; 0xffffffd0
    89e0:	lsl	r2, r3, #3
    89e4:	ldr	r3, [pc, #264]	; 8af4 <coda_cursor_read_float_array+0xa14>
    89e8:	str	r3, [sp]
    89ec:	ldr	r3, [pc, #220]	; 8ad0 <coda_cursor_read_float_array+0x9f0>
    89f0:	ldr	r1, [pc, #240]	; 8ae8 <coda_cursor_read_float_array+0xa08>
    89f4:	mvn	r0, #0
    89f8:	bl	0 <coda_set_error>
    89fc:	mvn	r3, #0
    8a00:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    8a04:	ldr	r2, [fp, #-64]	; 0xffffffc0
    8a08:	ldr	r1, [fp, #-36]	; 0xffffffdc
    8a0c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    8a10:	bl	35fc <read_double_array>
    8a14:	mov	r3, r0
    8a18:	cmp	r3, #0
    8a1c:	beq	8a30 <coda_cursor_read_float_array+0x950>
    8a20:	ldr	r0, [fp, #-36]	; 0xffffffdc
    8a24:	bl	0 <free>
    8a28:	mvn	r3, #0
    8a2c:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    8a30:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8a34:	sub	r3, r3, #1
    8a38:	str	r3, [fp, #-16]
    8a3c:	b	8a78 <coda_cursor_read_float_array+0x998>
    8a40:	ldr	r3, [fp, #-16]
    8a44:	lsl	r3, r3, #2
    8a48:	ldr	r2, [fp, #-60]	; 0xffffffc4
    8a4c:	add	r3, r2, r3
    8a50:	ldr	r2, [fp, #-16]
    8a54:	lsl	r2, r2, #3
    8a58:	ldr	r1, [fp, #-36]	; 0xffffffdc
    8a5c:	add	r2, r1, r2
    8a60:	vldr	d7, [r2]
    8a64:	vcvt.f32.f64	s15, d7
    8a68:	vstr	s15, [r3]
    8a6c:	ldr	r3, [fp, #-16]
    8a70:	sub	r3, r3, #1
    8a74:	str	r3, [fp, #-16]
    8a78:	ldr	r3, [fp, #-16]
    8a7c:	cmp	r3, #0
    8a80:	bge	8a40 <coda_cursor_read_float_array+0x960>
    8a84:	ldr	r0, [fp, #-36]	; 0xffffffdc
    8a88:	bl	0 <free>
    8a8c:	b	8abc <coda_cursor_read_float_array+0x9dc>
    8a90:	ldr	r3, [fp, #-40]	; 0xffffffd8
    8a94:	mov	r0, r3
    8a98:	bl	0 <coda_type_get_native_type_name>
    8a9c:	mov	r3, r0
    8aa0:	mov	r2, r3
    8aa4:	ldr	r1, [pc, #76]	; 8af8 <coda_cursor_read_float_array+0xa18>
    8aa8:	mvn	r0, #104	; 0x68
    8aac:	bl	0 <coda_set_error>
    8ab0:	mvn	r3, #0
    8ab4:	b	8ac0 <coda_cursor_read_float_array+0x9e0>
    8ab8:	nop			; (mov r0, r0)
    8abc:	mov	r3, #0
    8ac0:	mov	r0, r3
    8ac4:	sub	sp, fp, #8
    8ac8:	pop	{r4, fp, pc}
    8acc:	.word	0x00000e59
    8ad0:	.word	0x000000c8
    8ad4:	.word	0x00000118
    8ad8:	.word	0x00000e5e
    8adc:	.word	0x00000138
    8ae0:	.word	0x00000480
    8ae4:	.word	0x00000e7b
    8ae8:	.word	0x00000054
    8aec:	.word	0x00000eec
    8af0:	.word	0x00000f07
    8af4:	.word	0x00000f28
    8af8:	.word	0x000002d4

00008afc <coda_cursor_read_double_array>:
    8afc:	push	{r4, fp, lr}
    8b00:	add	fp, sp, #8
    8b04:	sub	sp, sp, #44	; 0x2c
    8b08:	str	r0, [fp, #-40]	; 0xffffffd8
    8b0c:	str	r1, [fp, #-44]	; 0xffffffd4
    8b10:	str	r2, [fp, #-48]	; 0xffffffd0
    8b14:	ldr	r3, [fp, #-40]	; 0xffffffd8
    8b18:	cmp	r3, #0
    8b1c:	beq	8b54 <coda_cursor_read_double_array+0x58>
    8b20:	ldr	r3, [fp, #-40]	; 0xffffffd8
    8b24:	ldr	r3, [r3, #4]
    8b28:	cmp	r3, #0
    8b2c:	ble	8b54 <coda_cursor_read_double_array+0x58>
    8b30:	ldr	r3, [fp, #-40]	; 0xffffffd8
    8b34:	ldr	r3, [r3, #4]
    8b38:	sub	r3, r3, #1
    8b3c:	ldr	r2, [fp, #-40]	; 0xffffffd8
    8b40:	lsl	r3, r3, #4
    8b44:	add	r3, r2, r3
    8b48:	ldr	r3, [r3, #8]
    8b4c:	cmp	r3, #0
    8b50:	bne	8b70 <coda_cursor_read_double_array+0x74>
    8b54:	ldr	r3, [pc, #2144]	; 93bc <coda_cursor_read_double_array+0x8c0>
    8b58:	ldr	r2, [pc, #2144]	; 93c0 <coda_cursor_read_double_array+0x8c4>
    8b5c:	ldr	r1, [pc, #2144]	; 93c4 <coda_cursor_read_double_array+0x8c8>
    8b60:	mvn	r0, #99	; 0x63
    8b64:	bl	0 <coda_set_error>
    8b68:	mvn	r3, #0
    8b6c:	b	93b0 <coda_cursor_read_double_array+0x8b4>
    8b70:	ldr	r3, [fp, #-44]	; 0xffffffd4
    8b74:	cmp	r3, #0
    8b78:	bne	8b98 <coda_cursor_read_double_array+0x9c>
    8b7c:	ldr	r3, [pc, #2116]	; 93c8 <coda_cursor_read_double_array+0x8cc>
    8b80:	ldr	r2, [pc, #2104]	; 93c0 <coda_cursor_read_double_array+0x8c4>
    8b84:	ldr	r1, [pc, #2112]	; 93cc <coda_cursor_read_double_array+0x8d0>
    8b88:	mvn	r0, #99	; 0x63
    8b8c:	bl	0 <coda_set_error>
    8b90:	mvn	r3, #0
    8b94:	b	93b0 <coda_cursor_read_double_array+0x8b4>
    8b98:	ldr	r3, [fp, #-40]	; 0xffffffd8
    8b9c:	ldr	r3, [r3, #4]
    8ba0:	sub	r3, r3, #1
    8ba4:	ldr	r2, [fp, #-40]	; 0xffffffd8
    8ba8:	lsl	r3, r3, #4
    8bac:	add	r3, r2, r3
    8bb0:	ldr	r3, [r3, #8]
    8bb4:	ldr	r3, [r3]
    8bb8:	cmp	r3, #99	; 0x63
    8bbc:	bhi	8be0 <coda_cursor_read_double_array+0xe4>
    8bc0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    8bc4:	ldr	r3, [r3, #4]
    8bc8:	sub	r3, r3, #1
    8bcc:	ldr	r2, [fp, #-40]	; 0xffffffd8
    8bd0:	lsl	r3, r3, #4
    8bd4:	add	r3, r2, r3
    8bd8:	ldr	r3, [r3, #8]
    8bdc:	b	8c00 <coda_cursor_read_double_array+0x104>
    8be0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    8be4:	ldr	r3, [r3, #4]
    8be8:	sub	r3, r3, #1
    8bec:	ldr	r2, [fp, #-40]	; 0xffffffd8
    8bf0:	lsl	r3, r3, #4
    8bf4:	add	r3, r2, r3
    8bf8:	ldr	r3, [r3, #8]
    8bfc:	ldr	r3, [r3, #4]
    8c00:	str	r3, [fp, #-20]	; 0xffffffec
    8c04:	ldr	r3, [fp, #-20]	; 0xffffffec
    8c08:	ldr	r3, [r3, #8]
    8c0c:	cmp	r3, #1
    8c10:	beq	8c40 <coda_cursor_read_double_array+0x144>
    8c14:	ldr	r3, [fp, #-20]	; 0xffffffec
    8c18:	ldr	r3, [r3, #8]
    8c1c:	mov	r0, r3
    8c20:	bl	0 <coda_type_get_class_name>
    8c24:	mov	r3, r0
    8c28:	mov	r2, r3
    8c2c:	ldr	r1, [pc, #1948]	; 93d0 <coda_cursor_read_double_array+0x8d4>
    8c30:	mvn	r0, #104	; 0x68
    8c34:	bl	0 <coda_set_error>
    8c38:	mvn	r3, #0
    8c3c:	b	93b0 <coda_cursor_read_double_array+0x8b4>
    8c40:	sub	r2, fp, #28
    8c44:	sub	r3, fp, #24
    8c48:	mov	r1, r3
    8c4c:	ldr	r0, [fp, #-20]	; 0xffffffec
    8c50:	bl	1120 <get_array_element_unconverted_read_type>
    8c54:	mov	r3, r0
    8c58:	cmp	r3, #0
    8c5c:	beq	8c68 <coda_cursor_read_double_array+0x16c>
    8c60:	mvn	r3, #0
    8c64:	b	93b0 <coda_cursor_read_double_array+0x8b4>
    8c68:	ldr	r3, [fp, #-24]	; 0xffffffe8
    8c6c:	cmp	r3, #9
    8c70:	ldrls	pc, [pc, r3, lsl #2]
    8c74:	b	9294 <coda_cursor_read_double_array+0x798>
    8c78:	.word	0x00008ca0
    8c7c:	.word	0x00008d40
    8c80:	.word	0x00008de0
    8c84:	.word	0x00008e84
    8c88:	.word	0x00008f28
    8c8c:	.word	0x00008fcc
    8c90:	.word	0x00009070
    8c94:	.word	0x00009120
    8c98:	.word	0x000091d0
    8c9c:	.word	0x00009270
    8ca0:	ldr	r2, [fp, #-48]	; 0xffffffd0
    8ca4:	ldr	r1, [fp, #-44]	; 0xffffffd4
    8ca8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    8cac:	bl	28a0 <read_int8_array>
    8cb0:	mov	r3, r0
    8cb4:	cmp	r3, #0
    8cb8:	beq	8cc4 <coda_cursor_read_double_array+0x1c8>
    8cbc:	mvn	r3, #0
    8cc0:	b	93b0 <coda_cursor_read_double_array+0x8b4>
    8cc4:	sub	r3, fp, #32
    8cc8:	mov	r1, r3
    8ccc:	ldr	r0, [fp, #-40]	; 0xffffffd8
    8cd0:	bl	0 <coda_cursor_get_num_elements>
    8cd4:	mov	r3, r0
    8cd8:	cmp	r3, #0
    8cdc:	beq	8ce8 <coda_cursor_read_double_array+0x1ec>
    8ce0:	mvn	r3, #0
    8ce4:	b	93b0 <coda_cursor_read_double_array+0x8b4>
    8ce8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    8cec:	sub	r3, r3, #1
    8cf0:	str	r3, [fp, #-16]
    8cf4:	b	8d30 <coda_cursor_read_double_array+0x234>
    8cf8:	ldr	r3, [fp, #-16]
    8cfc:	lsl	r3, r3, #3
    8d00:	ldr	r2, [fp, #-44]	; 0xffffffd4
    8d04:	add	r3, r2, r3
    8d08:	ldr	r2, [fp, #-16]
    8d0c:	ldr	r1, [fp, #-44]	; 0xffffffd4
    8d10:	add	r2, r1, r2
    8d14:	ldrsb	r2, [r2]
    8d18:	vmov	s15, r2
    8d1c:	vcvt.f64.s32	d7, s15
    8d20:	vstr	d7, [r3]
    8d24:	ldr	r3, [fp, #-16]
    8d28:	sub	r3, r3, #1
    8d2c:	str	r3, [fp, #-16]
    8d30:	ldr	r3, [fp, #-16]
    8d34:	cmp	r3, #0
    8d38:	bge	8cf8 <coda_cursor_read_double_array+0x1fc>
    8d3c:	b	92c0 <coda_cursor_read_double_array+0x7c4>
    8d40:	ldr	r2, [fp, #-48]	; 0xffffffd0
    8d44:	ldr	r1, [fp, #-44]	; 0xffffffd4
    8d48:	ldr	r0, [fp, #-40]	; 0xffffffd8
    8d4c:	bl	2a3c <read_uint8_array>
    8d50:	mov	r3, r0
    8d54:	cmp	r3, #0
    8d58:	beq	8d64 <coda_cursor_read_double_array+0x268>
    8d5c:	mvn	r3, #0
    8d60:	b	93b0 <coda_cursor_read_double_array+0x8b4>
    8d64:	sub	r3, fp, #32
    8d68:	mov	r1, r3
    8d6c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    8d70:	bl	0 <coda_cursor_get_num_elements>
    8d74:	mov	r3, r0
    8d78:	cmp	r3, #0
    8d7c:	beq	8d88 <coda_cursor_read_double_array+0x28c>
    8d80:	mvn	r3, #0
    8d84:	b	93b0 <coda_cursor_read_double_array+0x8b4>
    8d88:	ldr	r3, [fp, #-32]	; 0xffffffe0
    8d8c:	sub	r3, r3, #1
    8d90:	str	r3, [fp, #-16]
    8d94:	b	8dd0 <coda_cursor_read_double_array+0x2d4>
    8d98:	ldr	r3, [fp, #-16]
    8d9c:	lsl	r3, r3, #3
    8da0:	ldr	r2, [fp, #-44]	; 0xffffffd4
    8da4:	add	r3, r2, r3
    8da8:	ldr	r2, [fp, #-16]
    8dac:	ldr	r1, [fp, #-44]	; 0xffffffd4
    8db0:	add	r2, r1, r2
    8db4:	ldrb	r2, [r2]
    8db8:	vmov	s15, r2
    8dbc:	vcvt.f64.u32	d7, s15
    8dc0:	vstr	d7, [r3]
    8dc4:	ldr	r3, [fp, #-16]
    8dc8:	sub	r3, r3, #1
    8dcc:	str	r3, [fp, #-16]
    8dd0:	ldr	r3, [fp, #-16]
    8dd4:	cmp	r3, #0
    8dd8:	bge	8d98 <coda_cursor_read_double_array+0x29c>
    8ddc:	b	92c0 <coda_cursor_read_double_array+0x7c4>
    8de0:	ldr	r2, [fp, #-48]	; 0xffffffd0
    8de4:	ldr	r1, [fp, #-44]	; 0xffffffd4
    8de8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    8dec:	bl	2ba8 <read_int16_array>
    8df0:	mov	r3, r0
    8df4:	cmp	r3, #0
    8df8:	beq	8e04 <coda_cursor_read_double_array+0x308>
    8dfc:	mvn	r3, #0
    8e00:	b	93b0 <coda_cursor_read_double_array+0x8b4>
    8e04:	sub	r3, fp, #32
    8e08:	mov	r1, r3
    8e0c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    8e10:	bl	0 <coda_cursor_get_num_elements>
    8e14:	mov	r3, r0
    8e18:	cmp	r3, #0
    8e1c:	beq	8e28 <coda_cursor_read_double_array+0x32c>
    8e20:	mvn	r3, #0
    8e24:	b	93b0 <coda_cursor_read_double_array+0x8b4>
    8e28:	ldr	r3, [fp, #-32]	; 0xffffffe0
    8e2c:	sub	r3, r3, #1
    8e30:	str	r3, [fp, #-16]
    8e34:	b	8e74 <coda_cursor_read_double_array+0x378>
    8e38:	ldr	r3, [fp, #-16]
    8e3c:	lsl	r3, r3, #3
    8e40:	ldr	r2, [fp, #-44]	; 0xffffffd4
    8e44:	add	r3, r2, r3
    8e48:	ldr	r2, [fp, #-16]
    8e4c:	lsl	r2, r2, #1
    8e50:	ldr	r1, [fp, #-44]	; 0xffffffd4
    8e54:	add	r2, r1, r2
    8e58:	ldrsh	r2, [r2]
    8e5c:	vmov	s15, r2
    8e60:	vcvt.f64.s32	d7, s15
    8e64:	vstr	d7, [r3]
    8e68:	ldr	r3, [fp, #-16]
    8e6c:	sub	r3, r3, #1
    8e70:	str	r3, [fp, #-16]
    8e74:	ldr	r3, [fp, #-16]
    8e78:	cmp	r3, #0
    8e7c:	bge	8e38 <coda_cursor_read_double_array+0x33c>
    8e80:	b	92c0 <coda_cursor_read_double_array+0x7c4>
    8e84:	ldr	r2, [fp, #-48]	; 0xffffffd0
    8e88:	ldr	r1, [fp, #-44]	; 0xffffffd4
    8e8c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    8e90:	bl	2d40 <read_uint16_array>
    8e94:	mov	r3, r0
    8e98:	cmp	r3, #0
    8e9c:	beq	8ea8 <coda_cursor_read_double_array+0x3ac>
    8ea0:	mvn	r3, #0
    8ea4:	b	93b0 <coda_cursor_read_double_array+0x8b4>
    8ea8:	sub	r3, fp, #32
    8eac:	mov	r1, r3
    8eb0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    8eb4:	bl	0 <coda_cursor_get_num_elements>
    8eb8:	mov	r3, r0
    8ebc:	cmp	r3, #0
    8ec0:	beq	8ecc <coda_cursor_read_double_array+0x3d0>
    8ec4:	mvn	r3, #0
    8ec8:	b	93b0 <coda_cursor_read_double_array+0x8b4>
    8ecc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    8ed0:	sub	r3, r3, #1
    8ed4:	str	r3, [fp, #-16]
    8ed8:	b	8f18 <coda_cursor_read_double_array+0x41c>
    8edc:	ldr	r3, [fp, #-16]
    8ee0:	lsl	r3, r3, #3
    8ee4:	ldr	r2, [fp, #-44]	; 0xffffffd4
    8ee8:	add	r3, r2, r3
    8eec:	ldr	r2, [fp, #-16]
    8ef0:	lsl	r2, r2, #1
    8ef4:	ldr	r1, [fp, #-44]	; 0xffffffd4
    8ef8:	add	r2, r1, r2
    8efc:	ldrh	r2, [r2]
    8f00:	vmov	s15, r2
    8f04:	vcvt.f64.u32	d7, s15
    8f08:	vstr	d7, [r3]
    8f0c:	ldr	r3, [fp, #-16]
    8f10:	sub	r3, r3, #1
    8f14:	str	r3, [fp, #-16]
    8f18:	ldr	r3, [fp, #-16]
    8f1c:	cmp	r3, #0
    8f20:	bge	8edc <coda_cursor_read_double_array+0x3e0>
    8f24:	b	92c0 <coda_cursor_read_double_array+0x7c4>
    8f28:	ldr	r2, [fp, #-48]	; 0xffffffd0
    8f2c:	ldr	r1, [fp, #-44]	; 0xffffffd4
    8f30:	ldr	r0, [fp, #-40]	; 0xffffffd8
    8f34:	bl	2ea8 <read_int32_array>
    8f38:	mov	r3, r0
    8f3c:	cmp	r3, #0
    8f40:	beq	8f4c <coda_cursor_read_double_array+0x450>
    8f44:	mvn	r3, #0
    8f48:	b	93b0 <coda_cursor_read_double_array+0x8b4>
    8f4c:	sub	r3, fp, #32
    8f50:	mov	r1, r3
    8f54:	ldr	r0, [fp, #-40]	; 0xffffffd8
    8f58:	bl	0 <coda_cursor_get_num_elements>
    8f5c:	mov	r3, r0
    8f60:	cmp	r3, #0
    8f64:	beq	8f70 <coda_cursor_read_double_array+0x474>
    8f68:	mvn	r3, #0
    8f6c:	b	93b0 <coda_cursor_read_double_array+0x8b4>
    8f70:	ldr	r3, [fp, #-32]	; 0xffffffe0
    8f74:	sub	r3, r3, #1
    8f78:	str	r3, [fp, #-16]
    8f7c:	b	8fbc <coda_cursor_read_double_array+0x4c0>
    8f80:	ldr	r3, [fp, #-16]
    8f84:	lsl	r3, r3, #3
    8f88:	ldr	r2, [fp, #-44]	; 0xffffffd4
    8f8c:	add	r3, r2, r3
    8f90:	ldr	r2, [fp, #-16]
    8f94:	lsl	r2, r2, #2
    8f98:	ldr	r1, [fp, #-44]	; 0xffffffd4
    8f9c:	add	r2, r1, r2
    8fa0:	ldr	r2, [r2]
    8fa4:	vmov	s15, r2
    8fa8:	vcvt.f64.s32	d7, s15
    8fac:	vstr	d7, [r3]
    8fb0:	ldr	r3, [fp, #-16]
    8fb4:	sub	r3, r3, #1
    8fb8:	str	r3, [fp, #-16]
    8fbc:	ldr	r3, [fp, #-16]
    8fc0:	cmp	r3, #0
    8fc4:	bge	8f80 <coda_cursor_read_double_array+0x484>
    8fc8:	b	92c0 <coda_cursor_read_double_array+0x7c4>
    8fcc:	ldr	r2, [fp, #-48]	; 0xffffffd0
    8fd0:	ldr	r1, [fp, #-44]	; 0xffffffd4
    8fd4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    8fd8:	bl	3044 <read_uint32_array>
    8fdc:	mov	r3, r0
    8fe0:	cmp	r3, #0
    8fe4:	beq	8ff0 <coda_cursor_read_double_array+0x4f4>
    8fe8:	mvn	r3, #0
    8fec:	b	93b0 <coda_cursor_read_double_array+0x8b4>
    8ff0:	sub	r3, fp, #32
    8ff4:	mov	r1, r3
    8ff8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    8ffc:	bl	0 <coda_cursor_get_num_elements>
    9000:	mov	r3, r0
    9004:	cmp	r3, #0
    9008:	beq	9014 <coda_cursor_read_double_array+0x518>
    900c:	mvn	r3, #0
    9010:	b	93b0 <coda_cursor_read_double_array+0x8b4>
    9014:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9018:	sub	r3, r3, #1
    901c:	str	r3, [fp, #-16]
    9020:	b	9060 <coda_cursor_read_double_array+0x564>
    9024:	ldr	r3, [fp, #-16]
    9028:	lsl	r3, r3, #3
    902c:	ldr	r2, [fp, #-44]	; 0xffffffd4
    9030:	add	r3, r2, r3
    9034:	ldr	r2, [fp, #-16]
    9038:	lsl	r2, r2, #2
    903c:	ldr	r1, [fp, #-44]	; 0xffffffd4
    9040:	add	r2, r1, r2
    9044:	ldr	r2, [r2]
    9048:	vmov	s15, r2
    904c:	vcvt.f64.u32	d7, s15
    9050:	vstr	d7, [r3]
    9054:	ldr	r3, [fp, #-16]
    9058:	sub	r3, r3, #1
    905c:	str	r3, [fp, #-16]
    9060:	ldr	r3, [fp, #-16]
    9064:	cmp	r3, #0
    9068:	bge	9024 <coda_cursor_read_double_array+0x528>
    906c:	b	92c0 <coda_cursor_read_double_array+0x7c4>
    9070:	ldr	r2, [fp, #-48]	; 0xffffffd0
    9074:	ldr	r1, [fp, #-44]	; 0xffffffd4
    9078:	ldr	r0, [fp, #-40]	; 0xffffffd8
    907c:	bl	31b0 <read_int64_array>
    9080:	mov	r3, r0
    9084:	cmp	r3, #0
    9088:	beq	9094 <coda_cursor_read_double_array+0x598>
    908c:	mvn	r3, #0
    9090:	b	93b0 <coda_cursor_read_double_array+0x8b4>
    9094:	sub	r3, fp, #32
    9098:	mov	r1, r3
    909c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    90a0:	bl	0 <coda_cursor_get_num_elements>
    90a4:	mov	r3, r0
    90a8:	cmp	r3, #0
    90ac:	beq	90b8 <coda_cursor_read_double_array+0x5bc>
    90b0:	mvn	r3, #0
    90b4:	b	93b0 <coda_cursor_read_double_array+0x8b4>
    90b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    90bc:	sub	r3, r3, #1
    90c0:	str	r3, [fp, #-16]
    90c4:	b	9110 <coda_cursor_read_double_array+0x614>
    90c8:	ldr	r3, [fp, #-16]
    90cc:	lsl	r3, r3, #3
    90d0:	ldr	r2, [fp, #-44]	; 0xffffffd4
    90d4:	add	r4, r2, r3
    90d8:	ldr	r3, [fp, #-16]
    90dc:	lsl	r3, r3, #3
    90e0:	ldr	r2, [fp, #-44]	; 0xffffffd4
    90e4:	add	r3, r2, r3
    90e8:	ldrd	r2, [r3]
    90ec:	mov	r0, r2
    90f0:	mov	r1, r3
    90f4:	bl	0 <__aeabi_l2d>
    90f8:	mov	r2, r0
    90fc:	mov	r3, r1
    9100:	strd	r2, [r4]
    9104:	ldr	r3, [fp, #-16]
    9108:	sub	r3, r3, #1
    910c:	str	r3, [fp, #-16]
    9110:	ldr	r3, [fp, #-16]
    9114:	cmp	r3, #0
    9118:	bge	90c8 <coda_cursor_read_double_array+0x5cc>
    911c:	b	92c0 <coda_cursor_read_double_array+0x7c4>
    9120:	ldr	r2, [fp, #-48]	; 0xffffffd0
    9124:	ldr	r1, [fp, #-44]	; 0xffffffd4
    9128:	ldr	r0, [fp, #-40]	; 0xffffffd8
    912c:	bl	331c <read_uint64_array>
    9130:	mov	r3, r0
    9134:	cmp	r3, #0
    9138:	beq	9144 <coda_cursor_read_double_array+0x648>
    913c:	mvn	r3, #0
    9140:	b	93b0 <coda_cursor_read_double_array+0x8b4>
    9144:	sub	r3, fp, #32
    9148:	mov	r1, r3
    914c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    9150:	bl	0 <coda_cursor_get_num_elements>
    9154:	mov	r3, r0
    9158:	cmp	r3, #0
    915c:	beq	9168 <coda_cursor_read_double_array+0x66c>
    9160:	mvn	r3, #0
    9164:	b	93b0 <coda_cursor_read_double_array+0x8b4>
    9168:	ldr	r3, [fp, #-32]	; 0xffffffe0
    916c:	sub	r3, r3, #1
    9170:	str	r3, [fp, #-16]
    9174:	b	91c0 <coda_cursor_read_double_array+0x6c4>
    9178:	ldr	r3, [fp, #-16]
    917c:	lsl	r3, r3, #3
    9180:	ldr	r2, [fp, #-44]	; 0xffffffd4
    9184:	add	r4, r2, r3
    9188:	ldr	r3, [fp, #-16]
    918c:	lsl	r3, r3, #3
    9190:	ldr	r2, [fp, #-44]	; 0xffffffd4
    9194:	add	r3, r2, r3
    9198:	ldrd	r2, [r3]
    919c:	mov	r0, r2
    91a0:	mov	r1, r3
    91a4:	bl	0 <__aeabi_ul2d>
    91a8:	mov	r2, r0
    91ac:	mov	r3, r1
    91b0:	strd	r2, [r4]
    91b4:	ldr	r3, [fp, #-16]
    91b8:	sub	r3, r3, #1
    91bc:	str	r3, [fp, #-16]
    91c0:	ldr	r3, [fp, #-16]
    91c4:	cmp	r3, #0
    91c8:	bge	9178 <coda_cursor_read_double_array+0x67c>
    91cc:	b	92c0 <coda_cursor_read_double_array+0x7c4>
    91d0:	ldr	r2, [fp, #-48]	; 0xffffffd0
    91d4:	ldr	r1, [fp, #-44]	; 0xffffffd4
    91d8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    91dc:	bl	345c <read_float_array>
    91e0:	mov	r3, r0
    91e4:	cmp	r3, #0
    91e8:	beq	91f4 <coda_cursor_read_double_array+0x6f8>
    91ec:	mvn	r3, #0
    91f0:	b	93b0 <coda_cursor_read_double_array+0x8b4>
    91f4:	sub	r3, fp, #32
    91f8:	mov	r1, r3
    91fc:	ldr	r0, [fp, #-40]	; 0xffffffd8
    9200:	bl	0 <coda_cursor_get_num_elements>
    9204:	mov	r3, r0
    9208:	cmp	r3, #0
    920c:	beq	9218 <coda_cursor_read_double_array+0x71c>
    9210:	mvn	r3, #0
    9214:	b	93b0 <coda_cursor_read_double_array+0x8b4>
    9218:	ldr	r3, [fp, #-32]	; 0xffffffe0
    921c:	sub	r3, r3, #1
    9220:	str	r3, [fp, #-16]
    9224:	b	9260 <coda_cursor_read_double_array+0x764>
    9228:	ldr	r3, [fp, #-16]
    922c:	lsl	r3, r3, #3
    9230:	ldr	r2, [fp, #-44]	; 0xffffffd4
    9234:	add	r3, r2, r3
    9238:	ldr	r2, [fp, #-16]
    923c:	lsl	r2, r2, #2
    9240:	ldr	r1, [fp, #-44]	; 0xffffffd4
    9244:	add	r2, r1, r2
    9248:	vldr	s15, [r2]
    924c:	vcvt.f64.f32	d7, s15
    9250:	vstr	d7, [r3]
    9254:	ldr	r3, [fp, #-16]
    9258:	sub	r3, r3, #1
    925c:	str	r3, [fp, #-16]
    9260:	ldr	r3, [fp, #-16]
    9264:	cmp	r3, #0
    9268:	bge	9228 <coda_cursor_read_double_array+0x72c>
    926c:	b	92c0 <coda_cursor_read_double_array+0x7c4>
    9270:	ldr	r2, [fp, #-48]	; 0xffffffd0
    9274:	ldr	r1, [fp, #-44]	; 0xffffffd4
    9278:	ldr	r0, [fp, #-40]	; 0xffffffd8
    927c:	bl	35fc <read_double_array>
    9280:	mov	r3, r0
    9284:	cmp	r3, #0
    9288:	beq	92bc <coda_cursor_read_double_array+0x7c0>
    928c:	mvn	r3, #0
    9290:	b	93b0 <coda_cursor_read_double_array+0x8b4>
    9294:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9298:	mov	r0, r3
    929c:	bl	0 <coda_type_get_native_type_name>
    92a0:	mov	r3, r0
    92a4:	mov	r2, r3
    92a8:	ldr	r1, [pc, #292]	; 93d4 <coda_cursor_read_double_array+0x8d8>
    92ac:	mvn	r0, #104	; 0x68
    92b0:	bl	0 <coda_set_error>
    92b4:	mvn	r3, #0
    92b8:	b	93b0 <coda_cursor_read_double_array+0x8b4>
    92bc:	nop			; (mov r0, r0)
    92c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    92c4:	cmp	r3, #0
    92c8:	beq	93ac <coda_cursor_read_double_array+0x8b0>
    92cc:	sub	r3, fp, #32
    92d0:	mov	r1, r3
    92d4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    92d8:	bl	0 <coda_cursor_get_num_elements>
    92dc:	mov	r3, r0
    92e0:	cmp	r3, #0
    92e4:	beq	92f0 <coda_cursor_read_double_array+0x7f4>
    92e8:	mvn	r3, #0
    92ec:	b	93b0 <coda_cursor_read_double_array+0x8b4>
    92f0:	mov	r3, #0
    92f4:	str	r3, [fp, #-16]
    92f8:	b	939c <coda_cursor_read_double_array+0x8a0>
    92fc:	ldr	r3, [fp, #-16]
    9300:	lsl	r3, r3, #3
    9304:	ldr	r2, [fp, #-44]	; 0xffffffd4
    9308:	add	r3, r2, r3
    930c:	vldr	d6, [r3]
    9310:	ldr	r3, [fp, #-28]	; 0xffffffe4
    9314:	vldr	d7, [r3, #24]
    9318:	vcmp.f64	d6, d7
    931c:	vmrs	APSR_nzcv, fpscr
    9320:	bne	9344 <coda_cursor_read_double_array+0x848>
    9324:	ldr	r3, [fp, #-16]
    9328:	lsl	r3, r3, #3
    932c:	ldr	r2, [fp, #-44]	; 0xffffffd4
    9330:	add	r4, r2, r3
    9334:	bl	0 <coda_NaN>
    9338:	vmov.f64	d7, d0
    933c:	vstr	d7, [r4]
    9340:	b	9390 <coda_cursor_read_double_array+0x894>
    9344:	ldr	r3, [fp, #-16]
    9348:	lsl	r3, r3, #3
    934c:	ldr	r2, [fp, #-44]	; 0xffffffd4
    9350:	add	r3, r2, r3
    9354:	ldr	r2, [fp, #-16]
    9358:	lsl	r2, r2, #3
    935c:	ldr	r1, [fp, #-44]	; 0xffffffd4
    9360:	add	r2, r1, r2
    9364:	vldr	d6, [r2]
    9368:	ldr	r2, [fp, #-28]	; 0xffffffe4
    936c:	vldr	d7, [r2]
    9370:	vmul.f64	d5, d6, d7
    9374:	ldr	r2, [fp, #-28]	; 0xffffffe4
    9378:	vldr	d7, [r2, #8]
    937c:	vdiv.f64	d6, d5, d7
    9380:	ldr	r2, [fp, #-28]	; 0xffffffe4
    9384:	vldr	d7, [r2, #16]
    9388:	vadd.f64	d7, d6, d7
    938c:	vstr	d7, [r3]
    9390:	ldr	r3, [fp, #-16]
    9394:	add	r3, r3, #1
    9398:	str	r3, [fp, #-16]
    939c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    93a0:	ldr	r2, [fp, #-16]
    93a4:	cmp	r2, r3
    93a8:	blt	92fc <coda_cursor_read_double_array+0x800>
    93ac:	mov	r3, #0
    93b0:	mov	r0, r3
    93b4:	sub	sp, fp, #8
    93b8:	pop	{r4, fp, pc}
    93bc:	.word	0x00000f61
    93c0:	.word	0x000000c8
    93c4:	.word	0x00000118
    93c8:	.word	0x00000f66
    93cc:	.word	0x00000138
    93d0:	.word	0x00000480
    93d4:	.word	0x00000304

000093d8 <coda_cursor_read_char_array>:
    93d8:	push	{fp, lr}
    93dc:	add	fp, sp, #4
    93e0:	sub	sp, sp, #24
    93e4:	str	r0, [fp, #-16]
    93e8:	str	r1, [fp, #-20]	; 0xffffffec
    93ec:	str	r2, [fp, #-24]	; 0xffffffe8
    93f0:	ldr	r3, [fp, #-16]
    93f4:	cmp	r3, #0
    93f8:	beq	9430 <coda_cursor_read_char_array+0x58>
    93fc:	ldr	r3, [fp, #-16]
    9400:	ldr	r3, [r3, #4]
    9404:	cmp	r3, #0
    9408:	ble	9430 <coda_cursor_read_char_array+0x58>
    940c:	ldr	r3, [fp, #-16]
    9410:	ldr	r3, [r3, #4]
    9414:	sub	r3, r3, #1
    9418:	ldr	r2, [fp, #-16]
    941c:	lsl	r3, r3, #4
    9420:	add	r3, r2, r3
    9424:	ldr	r3, [r3, #8]
    9428:	cmp	r3, #0
    942c:	bne	944c <coda_cursor_read_char_array+0x74>
    9430:	ldr	r3, [pc, #372]	; 95ac <coda_cursor_read_char_array+0x1d4>
    9434:	ldr	r2, [pc, #372]	; 95b0 <coda_cursor_read_char_array+0x1d8>
    9438:	ldr	r1, [pc, #372]	; 95b4 <coda_cursor_read_char_array+0x1dc>
    943c:	mvn	r0, #99	; 0x63
    9440:	bl	0 <coda_set_error>
    9444:	mvn	r3, #0
    9448:	b	95a0 <coda_cursor_read_char_array+0x1c8>
    944c:	ldr	r3, [fp, #-20]	; 0xffffffec
    9450:	cmp	r3, #0
    9454:	bne	9474 <coda_cursor_read_char_array+0x9c>
    9458:	ldr	r3, [pc, #344]	; 95b8 <coda_cursor_read_char_array+0x1e0>
    945c:	ldr	r2, [pc, #332]	; 95b0 <coda_cursor_read_char_array+0x1d8>
    9460:	ldr	r1, [pc, #340]	; 95bc <coda_cursor_read_char_array+0x1e4>
    9464:	mvn	r0, #99	; 0x63
    9468:	bl	0 <coda_set_error>
    946c:	mvn	r3, #0
    9470:	b	95a0 <coda_cursor_read_char_array+0x1c8>
    9474:	ldr	r3, [fp, #-16]
    9478:	ldr	r3, [r3, #4]
    947c:	sub	r3, r3, #1
    9480:	ldr	r2, [fp, #-16]
    9484:	lsl	r3, r3, #4
    9488:	add	r3, r2, r3
    948c:	ldr	r3, [r3, #8]
    9490:	ldr	r3, [r3]
    9494:	cmp	r3, #99	; 0x63
    9498:	bhi	94bc <coda_cursor_read_char_array+0xe4>
    949c:	ldr	r3, [fp, #-16]
    94a0:	ldr	r3, [r3, #4]
    94a4:	sub	r3, r3, #1
    94a8:	ldr	r2, [fp, #-16]
    94ac:	lsl	r3, r3, #4
    94b0:	add	r3, r2, r3
    94b4:	ldr	r3, [r3, #8]
    94b8:	b	94dc <coda_cursor_read_char_array+0x104>
    94bc:	ldr	r3, [fp, #-16]
    94c0:	ldr	r3, [r3, #4]
    94c4:	sub	r3, r3, #1
    94c8:	ldr	r2, [fp, #-16]
    94cc:	lsl	r3, r3, #4
    94d0:	add	r3, r2, r3
    94d4:	ldr	r3, [r3, #8]
    94d8:	ldr	r3, [r3, #4]
    94dc:	str	r3, [fp, #-8]
    94e0:	ldr	r3, [fp, #-8]
    94e4:	ldr	r3, [r3, #8]
    94e8:	cmp	r3, #1
    94ec:	beq	951c <coda_cursor_read_char_array+0x144>
    94f0:	ldr	r3, [fp, #-8]
    94f4:	ldr	r3, [r3, #8]
    94f8:	mov	r0, r3
    94fc:	bl	0 <coda_type_get_class_name>
    9500:	mov	r3, r0
    9504:	mov	r2, r3
    9508:	ldr	r1, [pc, #176]	; 95c0 <coda_cursor_read_char_array+0x1e8>
    950c:	mvn	r0, #104	; 0x68
    9510:	bl	0 <coda_set_error>
    9514:	mvn	r3, #0
    9518:	b	95a0 <coda_cursor_read_char_array+0x1c8>
    951c:	sub	r3, fp, #12
    9520:	mov	r1, r3
    9524:	ldr	r0, [fp, #-8]
    9528:	bl	1080 <get_array_element_read_type>
    952c:	mov	r3, r0
    9530:	cmp	r3, #0
    9534:	beq	9540 <coda_cursor_read_char_array+0x168>
    9538:	mvn	r3, #0
    953c:	b	95a0 <coda_cursor_read_char_array+0x1c8>
    9540:	ldr	r3, [fp, #-12]
    9544:	cmp	r3, #10
    9548:	bne	9570 <coda_cursor_read_char_array+0x198>
    954c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9550:	ldr	r1, [fp, #-20]	; 0xffffffec
    9554:	ldr	r0, [fp, #-16]
    9558:	bl	3840 <read_char_array>
    955c:	mov	r3, r0
    9560:	cmp	r3, #0
    9564:	beq	9598 <coda_cursor_read_char_array+0x1c0>
    9568:	mvn	r3, #0
    956c:	b	95a0 <coda_cursor_read_char_array+0x1c8>
    9570:	ldr	r3, [fp, #-12]
    9574:	mov	r0, r3
    9578:	bl	0 <coda_type_get_native_type_name>
    957c:	mov	r3, r0
    9580:	mov	r2, r3
    9584:	ldr	r1, [pc, #56]	; 95c4 <coda_cursor_read_char_array+0x1ec>
    9588:	mvn	r0, #104	; 0x68
    958c:	bl	0 <coda_set_error>
    9590:	mvn	r3, #0
    9594:	b	95a0 <coda_cursor_read_char_array+0x1c8>
    9598:	nop			; (mov r0, r0)
    959c:	mov	r3, #0
    95a0:	mov	r0, r3
    95a4:	sub	sp, fp, #4
    95a8:	pop	{fp, pc}
    95ac:	.word	0x00001028
    95b0:	.word	0x000000c8
    95b4:	.word	0x00000118
    95b8:	.word	0x0000102d
    95bc:	.word	0x00000138
    95c0:	.word	0x00000480
    95c4:	.word	0x00000334

000095c8 <coda_cursor_read_int8_partial_array>:
    95c8:	push	{fp, lr}
    95cc:	add	fp, sp, #4
    95d0:	sub	sp, sp, #40	; 0x28
    95d4:	str	r0, [fp, #-24]	; 0xffffffe8
    95d8:	str	r1, [fp, #-28]	; 0xffffffe4
    95dc:	str	r2, [fp, #-32]	; 0xffffffe0
    95e0:	str	r3, [fp, #-36]	; 0xffffffdc
    95e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    95e8:	cmp	r3, #0
    95ec:	beq	9624 <coda_cursor_read_int8_partial_array+0x5c>
    95f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    95f4:	ldr	r3, [r3, #4]
    95f8:	cmp	r3, #0
    95fc:	ble	9624 <coda_cursor_read_int8_partial_array+0x5c>
    9600:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9604:	ldr	r3, [r3, #4]
    9608:	sub	r3, r3, #1
    960c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9610:	lsl	r3, r3, #4
    9614:	add	r3, r2, r3
    9618:	ldr	r3, [r3, #8]
    961c:	cmp	r3, #0
    9620:	bne	9640 <coda_cursor_read_int8_partial_array+0x78>
    9624:	ldr	r3, [pc, #556]	; 9858 <coda_cursor_read_int8_partial_array+0x290>
    9628:	ldr	r2, [pc, #556]	; 985c <coda_cursor_read_int8_partial_array+0x294>
    962c:	ldr	r1, [pc, #556]	; 9860 <coda_cursor_read_int8_partial_array+0x298>
    9630:	mvn	r0, #99	; 0x63
    9634:	bl	0 <coda_set_error>
    9638:	mvn	r3, #0
    963c:	b	984c <coda_cursor_read_int8_partial_array+0x284>
    9640:	ldr	r3, [fp, #-36]	; 0xffffffdc
    9644:	cmp	r3, #0
    9648:	bne	9668 <coda_cursor_read_int8_partial_array+0xa0>
    964c:	ldr	r3, [pc, #528]	; 9864 <coda_cursor_read_int8_partial_array+0x29c>
    9650:	ldr	r2, [pc, #516]	; 985c <coda_cursor_read_int8_partial_array+0x294>
    9654:	ldr	r1, [pc, #524]	; 9868 <coda_cursor_read_int8_partial_array+0x2a0>
    9658:	mvn	r0, #99	; 0x63
    965c:	bl	0 <coda_set_error>
    9660:	mvn	r3, #0
    9664:	b	984c <coda_cursor_read_int8_partial_array+0x284>
    9668:	ldr	r3, [fp, #-24]	; 0xffffffe8
    966c:	ldr	r3, [r3, #4]
    9670:	sub	r3, r3, #1
    9674:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9678:	lsl	r3, r3, #4
    967c:	add	r3, r2, r3
    9680:	ldr	r3, [r3, #8]
    9684:	ldr	r3, [r3]
    9688:	cmp	r3, #99	; 0x63
    968c:	bhi	96b0 <coda_cursor_read_int8_partial_array+0xe8>
    9690:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9694:	ldr	r3, [r3, #4]
    9698:	sub	r3, r3, #1
    969c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    96a0:	lsl	r3, r3, #4
    96a4:	add	r3, r2, r3
    96a8:	ldr	r3, [r3, #8]
    96ac:	b	96d0 <coda_cursor_read_int8_partial_array+0x108>
    96b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    96b4:	ldr	r3, [r3, #4]
    96b8:	sub	r3, r3, #1
    96bc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    96c0:	lsl	r3, r3, #4
    96c4:	add	r3, r2, r3
    96c8:	ldr	r3, [r3, #8]
    96cc:	ldr	r3, [r3, #4]
    96d0:	str	r3, [fp, #-8]
    96d4:	ldr	r3, [fp, #-8]
    96d8:	ldr	r3, [r3, #8]
    96dc:	cmp	r3, #1
    96e0:	beq	9710 <coda_cursor_read_int8_partial_array+0x148>
    96e4:	ldr	r3, [fp, #-8]
    96e8:	ldr	r3, [r3, #8]
    96ec:	mov	r0, r3
    96f0:	bl	0 <coda_type_get_class_name>
    96f4:	mov	r3, r0
    96f8:	mov	r2, r3
    96fc:	ldr	r1, [pc, #360]	; 986c <coda_cursor_read_int8_partial_array+0x2a4>
    9700:	mvn	r0, #104	; 0x68
    9704:	bl	0 <coda_set_error>
    9708:	mvn	r3, #0
    970c:	b	984c <coda_cursor_read_int8_partial_array+0x284>
    9710:	ldr	r3, [pc, #344]	; 9870 <coda_cursor_read_int8_partial_array+0x2a8>
    9714:	ldr	r3, [pc, r3]
    9718:	bl	0 <__aeabi_read_tp>
    971c:	mov	r2, r0
    9720:	ldr	r3, [r2, r3]
    9724:	cmp	r3, #0
    9728:	beq	97c4 <coda_cursor_read_int8_partial_array+0x1fc>
    972c:	sub	r3, fp, #16
    9730:	mov	r1, r3
    9734:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9738:	bl	0 <coda_cursor_get_num_elements>
    973c:	mov	r3, r0
    9740:	cmp	r3, #0
    9744:	beq	9750 <coda_cursor_read_int8_partial_array+0x188>
    9748:	mvn	r3, #0
    974c:	b	984c <coda_cursor_read_int8_partial_array+0x284>
    9750:	ldr	r3, [fp, #-28]	; 0xffffffe4
    9754:	cmp	r3, #0
    9758:	blt	976c <coda_cursor_read_int8_partial_array+0x1a4>
    975c:	ldr	r3, [fp, #-16]
    9760:	ldr	r2, [fp, #-28]	; 0xffffffe4
    9764:	cmp	r2, r3
    9768:	blt	9788 <coda_cursor_read_int8_partial_array+0x1c0>
    976c:	ldr	r3, [fp, #-16]
    9770:	ldr	r2, [fp, #-28]	; 0xffffffe4
    9774:	ldr	r1, [pc, #248]	; 9874 <coda_cursor_read_int8_partial_array+0x2ac>
    9778:	mvn	r0, #106	; 0x6a
    977c:	bl	0 <coda_set_error>
    9780:	mvn	r3, #0
    9784:	b	984c <coda_cursor_read_int8_partial_array+0x284>
    9788:	ldr	r2, [fp, #-28]	; 0xffffffe4
    978c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9790:	add	r2, r2, r3
    9794:	ldr	r3, [fp, #-16]
    9798:	cmp	r2, r3
    979c:	ble	97c4 <coda_cursor_read_int8_partial_array+0x1fc>
    97a0:	ldr	r3, [fp, #-16]
    97a4:	str	r3, [sp]
    97a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    97ac:	ldr	r2, [fp, #-28]	; 0xffffffe4
    97b0:	ldr	r1, [pc, #192]	; 9878 <coda_cursor_read_int8_partial_array+0x2b0>
    97b4:	mvn	r0, #106	; 0x6a
    97b8:	bl	0 <coda_set_error>
    97bc:	mvn	r3, #0
    97c0:	b	984c <coda_cursor_read_int8_partial_array+0x284>
    97c4:	sub	r3, fp, #12
    97c8:	mov	r1, r3
    97cc:	ldr	r0, [fp, #-8]
    97d0:	bl	1080 <get_array_element_read_type>
    97d4:	mov	r3, r0
    97d8:	cmp	r3, #0
    97dc:	beq	97e8 <coda_cursor_read_int8_partial_array+0x220>
    97e0:	mvn	r3, #0
    97e4:	b	984c <coda_cursor_read_int8_partial_array+0x284>
    97e8:	ldr	r3, [fp, #-12]
    97ec:	cmp	r3, #0
    97f0:	bne	981c <coda_cursor_read_int8_partial_array+0x254>
    97f4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    97f8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    97fc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9800:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9804:	bl	39c8 <read_int8_partial_array>
    9808:	mov	r3, r0
    980c:	cmp	r3, #0
    9810:	beq	9844 <coda_cursor_read_int8_partial_array+0x27c>
    9814:	mvn	r3, #0
    9818:	b	984c <coda_cursor_read_int8_partial_array+0x284>
    981c:	ldr	r3, [fp, #-12]
    9820:	mov	r0, r3
    9824:	bl	0 <coda_type_get_native_type_name>
    9828:	mov	r3, r0
    982c:	mov	r2, r3
    9830:	ldr	r1, [pc, #68]	; 987c <coda_cursor_read_int8_partial_array+0x2b4>
    9834:	mvn	r0, #104	; 0x68
    9838:	bl	0 <coda_set_error>
    983c:	mvn	r3, #0
    9840:	b	984c <coda_cursor_read_int8_partial_array+0x284>
    9844:	nop			; (mov r0, r0)
    9848:	mov	r3, #0
    984c:	mov	r0, r3
    9850:	sub	sp, fp, #4
    9854:	pop	{fp, pc}
    9858:	.word	0x00001067
    985c:	.word	0x000000c8
    9860:	.word	0x00000118
    9864:	.word	0x0000106c
    9868:	.word	0x00000138
    986c:	.word	0x00000480
    9870:	.word	0x00000154
    9874:	.word	0x000004b8
    9878:	.word	0x000004e8
    987c:	.word	0x00000158

00009880 <coda_cursor_read_uint8_partial_array>:
    9880:	push	{fp, lr}
    9884:	add	fp, sp, #4
    9888:	sub	sp, sp, #40	; 0x28
    988c:	str	r0, [fp, #-24]	; 0xffffffe8
    9890:	str	r1, [fp, #-28]	; 0xffffffe4
    9894:	str	r2, [fp, #-32]	; 0xffffffe0
    9898:	str	r3, [fp, #-36]	; 0xffffffdc
    989c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    98a0:	cmp	r3, #0
    98a4:	beq	98dc <coda_cursor_read_uint8_partial_array+0x5c>
    98a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    98ac:	ldr	r3, [r3, #4]
    98b0:	cmp	r3, #0
    98b4:	ble	98dc <coda_cursor_read_uint8_partial_array+0x5c>
    98b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    98bc:	ldr	r3, [r3, #4]
    98c0:	sub	r3, r3, #1
    98c4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    98c8:	lsl	r3, r3, #4
    98cc:	add	r3, r2, r3
    98d0:	ldr	r3, [r3, #8]
    98d4:	cmp	r3, #0
    98d8:	bne	98f8 <coda_cursor_read_uint8_partial_array+0x78>
    98dc:	ldr	r3, [pc, #556]	; 9b10 <coda_cursor_read_uint8_partial_array+0x290>
    98e0:	ldr	r2, [pc, #556]	; 9b14 <coda_cursor_read_uint8_partial_array+0x294>
    98e4:	ldr	r1, [pc, #556]	; 9b18 <coda_cursor_read_uint8_partial_array+0x298>
    98e8:	mvn	r0, #99	; 0x63
    98ec:	bl	0 <coda_set_error>
    98f0:	mvn	r3, #0
    98f4:	b	9b04 <coda_cursor_read_uint8_partial_array+0x284>
    98f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    98fc:	cmp	r3, #0
    9900:	bne	9920 <coda_cursor_read_uint8_partial_array+0xa0>
    9904:	ldr	r3, [pc, #528]	; 9b1c <coda_cursor_read_uint8_partial_array+0x29c>
    9908:	ldr	r2, [pc, #516]	; 9b14 <coda_cursor_read_uint8_partial_array+0x294>
    990c:	ldr	r1, [pc, #524]	; 9b20 <coda_cursor_read_uint8_partial_array+0x2a0>
    9910:	mvn	r0, #99	; 0x63
    9914:	bl	0 <coda_set_error>
    9918:	mvn	r3, #0
    991c:	b	9b04 <coda_cursor_read_uint8_partial_array+0x284>
    9920:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9924:	ldr	r3, [r3, #4]
    9928:	sub	r3, r3, #1
    992c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9930:	lsl	r3, r3, #4
    9934:	add	r3, r2, r3
    9938:	ldr	r3, [r3, #8]
    993c:	ldr	r3, [r3]
    9940:	cmp	r3, #99	; 0x63
    9944:	bhi	9968 <coda_cursor_read_uint8_partial_array+0xe8>
    9948:	ldr	r3, [fp, #-24]	; 0xffffffe8
    994c:	ldr	r3, [r3, #4]
    9950:	sub	r3, r3, #1
    9954:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9958:	lsl	r3, r3, #4
    995c:	add	r3, r2, r3
    9960:	ldr	r3, [r3, #8]
    9964:	b	9988 <coda_cursor_read_uint8_partial_array+0x108>
    9968:	ldr	r3, [fp, #-24]	; 0xffffffe8
    996c:	ldr	r3, [r3, #4]
    9970:	sub	r3, r3, #1
    9974:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9978:	lsl	r3, r3, #4
    997c:	add	r3, r2, r3
    9980:	ldr	r3, [r3, #8]
    9984:	ldr	r3, [r3, #4]
    9988:	str	r3, [fp, #-8]
    998c:	ldr	r3, [fp, #-8]
    9990:	ldr	r3, [r3, #8]
    9994:	cmp	r3, #1
    9998:	beq	99c8 <coda_cursor_read_uint8_partial_array+0x148>
    999c:	ldr	r3, [fp, #-8]
    99a0:	ldr	r3, [r3, #8]
    99a4:	mov	r0, r3
    99a8:	bl	0 <coda_type_get_class_name>
    99ac:	mov	r3, r0
    99b0:	mov	r2, r3
    99b4:	ldr	r1, [pc, #360]	; 9b24 <coda_cursor_read_uint8_partial_array+0x2a4>
    99b8:	mvn	r0, #104	; 0x68
    99bc:	bl	0 <coda_set_error>
    99c0:	mvn	r3, #0
    99c4:	b	9b04 <coda_cursor_read_uint8_partial_array+0x284>
    99c8:	ldr	r3, [pc, #344]	; 9b28 <coda_cursor_read_uint8_partial_array+0x2a8>
    99cc:	ldr	r3, [pc, r3]
    99d0:	bl	0 <__aeabi_read_tp>
    99d4:	mov	r2, r0
    99d8:	ldr	r3, [r2, r3]
    99dc:	cmp	r3, #0
    99e0:	beq	9a7c <coda_cursor_read_uint8_partial_array+0x1fc>
    99e4:	sub	r3, fp, #16
    99e8:	mov	r1, r3
    99ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
    99f0:	bl	0 <coda_cursor_get_num_elements>
    99f4:	mov	r3, r0
    99f8:	cmp	r3, #0
    99fc:	beq	9a08 <coda_cursor_read_uint8_partial_array+0x188>
    9a00:	mvn	r3, #0
    9a04:	b	9b04 <coda_cursor_read_uint8_partial_array+0x284>
    9a08:	ldr	r3, [fp, #-28]	; 0xffffffe4
    9a0c:	cmp	r3, #0
    9a10:	blt	9a24 <coda_cursor_read_uint8_partial_array+0x1a4>
    9a14:	ldr	r3, [fp, #-16]
    9a18:	ldr	r2, [fp, #-28]	; 0xffffffe4
    9a1c:	cmp	r2, r3
    9a20:	blt	9a40 <coda_cursor_read_uint8_partial_array+0x1c0>
    9a24:	ldr	r3, [fp, #-16]
    9a28:	ldr	r2, [fp, #-28]	; 0xffffffe4
    9a2c:	ldr	r1, [pc, #248]	; 9b2c <coda_cursor_read_uint8_partial_array+0x2ac>
    9a30:	mvn	r0, #106	; 0x6a
    9a34:	bl	0 <coda_set_error>
    9a38:	mvn	r3, #0
    9a3c:	b	9b04 <coda_cursor_read_uint8_partial_array+0x284>
    9a40:	ldr	r2, [fp, #-28]	; 0xffffffe4
    9a44:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9a48:	add	r2, r2, r3
    9a4c:	ldr	r3, [fp, #-16]
    9a50:	cmp	r2, r3
    9a54:	ble	9a7c <coda_cursor_read_uint8_partial_array+0x1fc>
    9a58:	ldr	r3, [fp, #-16]
    9a5c:	str	r3, [sp]
    9a60:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9a64:	ldr	r2, [fp, #-28]	; 0xffffffe4
    9a68:	ldr	r1, [pc, #192]	; 9b30 <coda_cursor_read_uint8_partial_array+0x2b0>
    9a6c:	mvn	r0, #106	; 0x6a
    9a70:	bl	0 <coda_set_error>
    9a74:	mvn	r3, #0
    9a78:	b	9b04 <coda_cursor_read_uint8_partial_array+0x284>
    9a7c:	sub	r3, fp, #12
    9a80:	mov	r1, r3
    9a84:	ldr	r0, [fp, #-8]
    9a88:	bl	1080 <get_array_element_read_type>
    9a8c:	mov	r3, r0
    9a90:	cmp	r3, #0
    9a94:	beq	9aa0 <coda_cursor_read_uint8_partial_array+0x220>
    9a98:	mvn	r3, #0
    9a9c:	b	9b04 <coda_cursor_read_uint8_partial_array+0x284>
    9aa0:	ldr	r3, [fp, #-12]
    9aa4:	cmp	r3, #1
    9aa8:	bne	9ad4 <coda_cursor_read_uint8_partial_array+0x254>
    9aac:	ldr	r3, [fp, #-36]	; 0xffffffdc
    9ab0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    9ab4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9ab8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9abc:	bl	3b30 <read_uint8_partial_array>
    9ac0:	mov	r3, r0
    9ac4:	cmp	r3, #0
    9ac8:	beq	9afc <coda_cursor_read_uint8_partial_array+0x27c>
    9acc:	mvn	r3, #0
    9ad0:	b	9b04 <coda_cursor_read_uint8_partial_array+0x284>
    9ad4:	ldr	r3, [fp, #-12]
    9ad8:	mov	r0, r3
    9adc:	bl	0 <coda_type_get_native_type_name>
    9ae0:	mov	r3, r0
    9ae4:	mov	r2, r3
    9ae8:	ldr	r1, [pc, #68]	; 9b34 <coda_cursor_read_uint8_partial_array+0x2b4>
    9aec:	mvn	r0, #104	; 0x68
    9af0:	bl	0 <coda_set_error>
    9af4:	mvn	r3, #0
    9af8:	b	9b04 <coda_cursor_read_uint8_partial_array+0x284>
    9afc:	nop			; (mov r0, r0)
    9b00:	mov	r3, #0
    9b04:	mov	r0, r3
    9b08:	sub	sp, fp, #4
    9b0c:	pop	{fp, pc}
    9b10:	.word	0x000010bd
    9b14:	.word	0x000000c8
    9b18:	.word	0x00000118
    9b1c:	.word	0x000010c2
    9b20:	.word	0x00000138
    9b24:	.word	0x00000480
    9b28:	.word	0x00000154
    9b2c:	.word	0x000004b8
    9b30:	.word	0x000004e8
    9b34:	.word	0x00000184

00009b38 <coda_cursor_read_int16_partial_array>:
    9b38:	push	{fp, lr}
    9b3c:	add	fp, sp, #4
    9b40:	sub	sp, sp, #40	; 0x28
    9b44:	str	r0, [fp, #-24]	; 0xffffffe8
    9b48:	str	r1, [fp, #-28]	; 0xffffffe4
    9b4c:	str	r2, [fp, #-32]	; 0xffffffe0
    9b50:	str	r3, [fp, #-36]	; 0xffffffdc
    9b54:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9b58:	cmp	r3, #0
    9b5c:	beq	9b94 <coda_cursor_read_int16_partial_array+0x5c>
    9b60:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9b64:	ldr	r3, [r3, #4]
    9b68:	cmp	r3, #0
    9b6c:	ble	9b94 <coda_cursor_read_int16_partial_array+0x5c>
    9b70:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9b74:	ldr	r3, [r3, #4]
    9b78:	sub	r3, r3, #1
    9b7c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9b80:	lsl	r3, r3, #4
    9b84:	add	r3, r2, r3
    9b88:	ldr	r3, [r3, #8]
    9b8c:	cmp	r3, #0
    9b90:	bne	9bb0 <coda_cursor_read_int16_partial_array+0x78>
    9b94:	ldr	r3, [pc, #820]	; 9ed0 <coda_cursor_read_int16_partial_array+0x398>
    9b98:	ldr	r2, [pc, #820]	; 9ed4 <coda_cursor_read_int16_partial_array+0x39c>
    9b9c:	ldr	r1, [pc, #820]	; 9ed8 <coda_cursor_read_int16_partial_array+0x3a0>
    9ba0:	mvn	r0, #99	; 0x63
    9ba4:	bl	0 <coda_set_error>
    9ba8:	mvn	r3, #0
    9bac:	b	9ec4 <coda_cursor_read_int16_partial_array+0x38c>
    9bb0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    9bb4:	cmp	r3, #0
    9bb8:	bne	9bd8 <coda_cursor_read_int16_partial_array+0xa0>
    9bbc:	ldr	r3, [pc, #792]	; 9edc <coda_cursor_read_int16_partial_array+0x3a4>
    9bc0:	ldr	r2, [pc, #780]	; 9ed4 <coda_cursor_read_int16_partial_array+0x39c>
    9bc4:	ldr	r1, [pc, #788]	; 9ee0 <coda_cursor_read_int16_partial_array+0x3a8>
    9bc8:	mvn	r0, #99	; 0x63
    9bcc:	bl	0 <coda_set_error>
    9bd0:	mvn	r3, #0
    9bd4:	b	9ec4 <coda_cursor_read_int16_partial_array+0x38c>
    9bd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9bdc:	ldr	r3, [r3, #4]
    9be0:	sub	r3, r3, #1
    9be4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9be8:	lsl	r3, r3, #4
    9bec:	add	r3, r2, r3
    9bf0:	ldr	r3, [r3, #8]
    9bf4:	ldr	r3, [r3]
    9bf8:	cmp	r3, #99	; 0x63
    9bfc:	bhi	9c20 <coda_cursor_read_int16_partial_array+0xe8>
    9c00:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9c04:	ldr	r3, [r3, #4]
    9c08:	sub	r3, r3, #1
    9c0c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9c10:	lsl	r3, r3, #4
    9c14:	add	r3, r2, r3
    9c18:	ldr	r3, [r3, #8]
    9c1c:	b	9c40 <coda_cursor_read_int16_partial_array+0x108>
    9c20:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9c24:	ldr	r3, [r3, #4]
    9c28:	sub	r3, r3, #1
    9c2c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9c30:	lsl	r3, r3, #4
    9c34:	add	r3, r2, r3
    9c38:	ldr	r3, [r3, #8]
    9c3c:	ldr	r3, [r3, #4]
    9c40:	str	r3, [fp, #-12]
    9c44:	ldr	r3, [fp, #-12]
    9c48:	ldr	r3, [r3, #8]
    9c4c:	cmp	r3, #1
    9c50:	beq	9c80 <coda_cursor_read_int16_partial_array+0x148>
    9c54:	ldr	r3, [fp, #-12]
    9c58:	ldr	r3, [r3, #8]
    9c5c:	mov	r0, r3
    9c60:	bl	0 <coda_type_get_class_name>
    9c64:	mov	r3, r0
    9c68:	mov	r2, r3
    9c6c:	ldr	r1, [pc, #624]	; 9ee4 <coda_cursor_read_int16_partial_array+0x3ac>
    9c70:	mvn	r0, #104	; 0x68
    9c74:	bl	0 <coda_set_error>
    9c78:	mvn	r3, #0
    9c7c:	b	9ec4 <coda_cursor_read_int16_partial_array+0x38c>
    9c80:	ldr	r3, [pc, #608]	; 9ee8 <coda_cursor_read_int16_partial_array+0x3b0>
    9c84:	ldr	r3, [pc, r3]
    9c88:	bl	0 <__aeabi_read_tp>
    9c8c:	mov	r2, r0
    9c90:	ldr	r3, [r2, r3]
    9c94:	cmp	r3, #0
    9c98:	beq	9d34 <coda_cursor_read_int16_partial_array+0x1fc>
    9c9c:	sub	r3, fp, #20
    9ca0:	mov	r1, r3
    9ca4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9ca8:	bl	0 <coda_cursor_get_num_elements>
    9cac:	mov	r3, r0
    9cb0:	cmp	r3, #0
    9cb4:	beq	9cc0 <coda_cursor_read_int16_partial_array+0x188>
    9cb8:	mvn	r3, #0
    9cbc:	b	9ec4 <coda_cursor_read_int16_partial_array+0x38c>
    9cc0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    9cc4:	cmp	r3, #0
    9cc8:	blt	9cdc <coda_cursor_read_int16_partial_array+0x1a4>
    9ccc:	ldr	r3, [fp, #-20]	; 0xffffffec
    9cd0:	ldr	r2, [fp, #-28]	; 0xffffffe4
    9cd4:	cmp	r2, r3
    9cd8:	blt	9cf8 <coda_cursor_read_int16_partial_array+0x1c0>
    9cdc:	ldr	r3, [fp, #-20]	; 0xffffffec
    9ce0:	ldr	r2, [fp, #-28]	; 0xffffffe4
    9ce4:	ldr	r1, [pc, #512]	; 9eec <coda_cursor_read_int16_partial_array+0x3b4>
    9ce8:	mvn	r0, #106	; 0x6a
    9cec:	bl	0 <coda_set_error>
    9cf0:	mvn	r3, #0
    9cf4:	b	9ec4 <coda_cursor_read_int16_partial_array+0x38c>
    9cf8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    9cfc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9d00:	add	r2, r2, r3
    9d04:	ldr	r3, [fp, #-20]	; 0xffffffec
    9d08:	cmp	r2, r3
    9d0c:	ble	9d34 <coda_cursor_read_int16_partial_array+0x1fc>
    9d10:	ldr	r3, [fp, #-20]	; 0xffffffec
    9d14:	str	r3, [sp]
    9d18:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9d1c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    9d20:	ldr	r1, [pc, #456]	; 9ef0 <coda_cursor_read_int16_partial_array+0x3b8>
    9d24:	mvn	r0, #106	; 0x6a
    9d28:	bl	0 <coda_set_error>
    9d2c:	mvn	r3, #0
    9d30:	b	9ec4 <coda_cursor_read_int16_partial_array+0x38c>
    9d34:	sub	r3, fp, #16
    9d38:	mov	r1, r3
    9d3c:	ldr	r0, [fp, #-12]
    9d40:	bl	1080 <get_array_element_read_type>
    9d44:	mov	r3, r0
    9d48:	cmp	r3, #0
    9d4c:	beq	9d58 <coda_cursor_read_int16_partial_array+0x220>
    9d50:	mvn	r3, #0
    9d54:	b	9ec4 <coda_cursor_read_int16_partial_array+0x38c>
    9d58:	ldr	r3, [fp, #-16]
    9d5c:	cmp	r3, #1
    9d60:	beq	9df0 <coda_cursor_read_int16_partial_array+0x2b8>
    9d64:	cmp	r3, #2
    9d68:	beq	9e6c <coda_cursor_read_int16_partial_array+0x334>
    9d6c:	cmp	r3, #0
    9d70:	bne	9e94 <coda_cursor_read_int16_partial_array+0x35c>
    9d74:	ldr	r3, [fp, #-36]	; 0xffffffdc
    9d78:	ldr	r2, [fp, #-32]	; 0xffffffe0
    9d7c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9d80:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9d84:	bl	39c8 <read_int8_partial_array>
    9d88:	mov	r3, r0
    9d8c:	cmp	r3, #0
    9d90:	beq	9d9c <coda_cursor_read_int16_partial_array+0x264>
    9d94:	mvn	r3, #0
    9d98:	b	9ec4 <coda_cursor_read_int16_partial_array+0x38c>
    9d9c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9da0:	sub	r3, r3, #1
    9da4:	str	r3, [fp, #-8]
    9da8:	b	9de0 <coda_cursor_read_int16_partial_array+0x2a8>
    9dac:	ldr	r3, [fp, #-8]
    9db0:	lsl	r3, r3, #1
    9db4:	ldr	r2, [fp, #-36]	; 0xffffffdc
    9db8:	add	r3, r2, r3
    9dbc:	ldr	r2, [fp, #-8]
    9dc0:	ldr	r1, [fp, #-36]	; 0xffffffdc
    9dc4:	add	r2, r1, r2
    9dc8:	ldrsb	r2, [r2]
    9dcc:	sxth	r2, r2
    9dd0:	strh	r2, [r3]
    9dd4:	ldr	r3, [fp, #-8]
    9dd8:	sub	r3, r3, #1
    9ddc:	str	r3, [fp, #-8]
    9de0:	ldr	r3, [fp, #-8]
    9de4:	cmp	r3, #0
    9de8:	bge	9dac <coda_cursor_read_int16_partial_array+0x274>
    9dec:	b	9ec0 <coda_cursor_read_int16_partial_array+0x388>
    9df0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    9df4:	ldr	r2, [fp, #-32]	; 0xffffffe0
    9df8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9dfc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9e00:	bl	3b30 <read_uint8_partial_array>
    9e04:	mov	r3, r0
    9e08:	cmp	r3, #0
    9e0c:	beq	9e18 <coda_cursor_read_int16_partial_array+0x2e0>
    9e10:	mvn	r3, #0
    9e14:	b	9ec4 <coda_cursor_read_int16_partial_array+0x38c>
    9e18:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9e1c:	sub	r3, r3, #1
    9e20:	str	r3, [fp, #-8]
    9e24:	b	9e5c <coda_cursor_read_int16_partial_array+0x324>
    9e28:	ldr	r3, [fp, #-8]
    9e2c:	lsl	r3, r3, #1
    9e30:	ldr	r2, [fp, #-36]	; 0xffffffdc
    9e34:	add	r3, r2, r3
    9e38:	ldr	r2, [fp, #-8]
    9e3c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    9e40:	add	r2, r1, r2
    9e44:	ldrb	r2, [r2]
    9e48:	sxth	r2, r2
    9e4c:	strh	r2, [r3]
    9e50:	ldr	r3, [fp, #-8]
    9e54:	sub	r3, r3, #1
    9e58:	str	r3, [fp, #-8]
    9e5c:	ldr	r3, [fp, #-8]
    9e60:	cmp	r3, #0
    9e64:	bge	9e28 <coda_cursor_read_int16_partial_array+0x2f0>
    9e68:	b	9ec0 <coda_cursor_read_int16_partial_array+0x388>
    9e6c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    9e70:	ldr	r2, [fp, #-32]	; 0xffffffe0
    9e74:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9e78:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9e7c:	bl	3c7c <read_int16_partial_array>
    9e80:	mov	r3, r0
    9e84:	cmp	r3, #0
    9e88:	beq	9ebc <coda_cursor_read_int16_partial_array+0x384>
    9e8c:	mvn	r3, #0
    9e90:	b	9ec4 <coda_cursor_read_int16_partial_array+0x38c>
    9e94:	ldr	r3, [fp, #-16]
    9e98:	mov	r0, r3
    9e9c:	bl	0 <coda_type_get_native_type_name>
    9ea0:	mov	r3, r0
    9ea4:	mov	r2, r3
    9ea8:	ldr	r1, [pc, #68]	; 9ef4 <coda_cursor_read_int16_partial_array+0x3bc>
    9eac:	mvn	r0, #104	; 0x68
    9eb0:	bl	0 <coda_set_error>
    9eb4:	mvn	r3, #0
    9eb8:	b	9ec4 <coda_cursor_read_int16_partial_array+0x38c>
    9ebc:	nop			; (mov r0, r0)
    9ec0:	mov	r3, #0
    9ec4:	mov	r0, r3
    9ec8:	sub	sp, fp, #4
    9ecc:	pop	{fp, pc}
    9ed0:	.word	0x00001116
    9ed4:	.word	0x000000c8
    9ed8:	.word	0x00000118
    9edc:	.word	0x0000111b
    9ee0:	.word	0x00000138
    9ee4:	.word	0x00000480
    9ee8:	.word	0x0000025c
    9eec:	.word	0x000004b8
    9ef0:	.word	0x000004e8
    9ef4:	.word	0x000001b4

00009ef8 <coda_cursor_read_uint16_partial_array>:
    9ef8:	push	{fp, lr}
    9efc:	add	fp, sp, #4
    9f00:	sub	sp, sp, #40	; 0x28
    9f04:	str	r0, [fp, #-24]	; 0xffffffe8
    9f08:	str	r1, [fp, #-28]	; 0xffffffe4
    9f0c:	str	r2, [fp, #-32]	; 0xffffffe0
    9f10:	str	r3, [fp, #-36]	; 0xffffffdc
    9f14:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9f18:	cmp	r3, #0
    9f1c:	beq	9f54 <coda_cursor_read_uint16_partial_array+0x5c>
    9f20:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9f24:	ldr	r3, [r3, #4]
    9f28:	cmp	r3, #0
    9f2c:	ble	9f54 <coda_cursor_read_uint16_partial_array+0x5c>
    9f30:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9f34:	ldr	r3, [r3, #4]
    9f38:	sub	r3, r3, #1
    9f3c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9f40:	lsl	r3, r3, #4
    9f44:	add	r3, r2, r3
    9f48:	ldr	r3, [r3, #8]
    9f4c:	cmp	r3, #0
    9f50:	bne	9f70 <coda_cursor_read_uint16_partial_array+0x78>
    9f54:	ldr	r3, [pc, #692]	; a210 <coda_cursor_read_uint16_partial_array+0x318>
    9f58:	ldr	r2, [pc, #692]	; a214 <coda_cursor_read_uint16_partial_array+0x31c>
    9f5c:	ldr	r1, [pc, #692]	; a218 <coda_cursor_read_uint16_partial_array+0x320>
    9f60:	mvn	r0, #99	; 0x63
    9f64:	bl	0 <coda_set_error>
    9f68:	mvn	r3, #0
    9f6c:	b	a204 <coda_cursor_read_uint16_partial_array+0x30c>
    9f70:	ldr	r3, [fp, #-36]	; 0xffffffdc
    9f74:	cmp	r3, #0
    9f78:	bne	9f98 <coda_cursor_read_uint16_partial_array+0xa0>
    9f7c:	ldr	r3, [pc, #664]	; a21c <coda_cursor_read_uint16_partial_array+0x324>
    9f80:	ldr	r2, [pc, #652]	; a214 <coda_cursor_read_uint16_partial_array+0x31c>
    9f84:	ldr	r1, [pc, #660]	; a220 <coda_cursor_read_uint16_partial_array+0x328>
    9f88:	mvn	r0, #99	; 0x63
    9f8c:	bl	0 <coda_set_error>
    9f90:	mvn	r3, #0
    9f94:	b	a204 <coda_cursor_read_uint16_partial_array+0x30c>
    9f98:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9f9c:	ldr	r3, [r3, #4]
    9fa0:	sub	r3, r3, #1
    9fa4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9fa8:	lsl	r3, r3, #4
    9fac:	add	r3, r2, r3
    9fb0:	ldr	r3, [r3, #8]
    9fb4:	ldr	r3, [r3]
    9fb8:	cmp	r3, #99	; 0x63
    9fbc:	bhi	9fe0 <coda_cursor_read_uint16_partial_array+0xe8>
    9fc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9fc4:	ldr	r3, [r3, #4]
    9fc8:	sub	r3, r3, #1
    9fcc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9fd0:	lsl	r3, r3, #4
    9fd4:	add	r3, r2, r3
    9fd8:	ldr	r3, [r3, #8]
    9fdc:	b	a000 <coda_cursor_read_uint16_partial_array+0x108>
    9fe0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9fe4:	ldr	r3, [r3, #4]
    9fe8:	sub	r3, r3, #1
    9fec:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9ff0:	lsl	r3, r3, #4
    9ff4:	add	r3, r2, r3
    9ff8:	ldr	r3, [r3, #8]
    9ffc:	ldr	r3, [r3, #4]
    a000:	str	r3, [fp, #-12]
    a004:	ldr	r3, [fp, #-12]
    a008:	ldr	r3, [r3, #8]
    a00c:	cmp	r3, #1
    a010:	beq	a040 <coda_cursor_read_uint16_partial_array+0x148>
    a014:	ldr	r3, [fp, #-12]
    a018:	ldr	r3, [r3, #8]
    a01c:	mov	r0, r3
    a020:	bl	0 <coda_type_get_class_name>
    a024:	mov	r3, r0
    a028:	mov	r2, r3
    a02c:	ldr	r1, [pc, #496]	; a224 <coda_cursor_read_uint16_partial_array+0x32c>
    a030:	mvn	r0, #104	; 0x68
    a034:	bl	0 <coda_set_error>
    a038:	mvn	r3, #0
    a03c:	b	a204 <coda_cursor_read_uint16_partial_array+0x30c>
    a040:	ldr	r3, [pc, #480]	; a228 <coda_cursor_read_uint16_partial_array+0x330>
    a044:	ldr	r3, [pc, r3]
    a048:	bl	0 <__aeabi_read_tp>
    a04c:	mov	r2, r0
    a050:	ldr	r3, [r2, r3]
    a054:	cmp	r3, #0
    a058:	beq	a0f4 <coda_cursor_read_uint16_partial_array+0x1fc>
    a05c:	sub	r3, fp, #20
    a060:	mov	r1, r3
    a064:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a068:	bl	0 <coda_cursor_get_num_elements>
    a06c:	mov	r3, r0
    a070:	cmp	r3, #0
    a074:	beq	a080 <coda_cursor_read_uint16_partial_array+0x188>
    a078:	mvn	r3, #0
    a07c:	b	a204 <coda_cursor_read_uint16_partial_array+0x30c>
    a080:	ldr	r3, [fp, #-28]	; 0xffffffe4
    a084:	cmp	r3, #0
    a088:	blt	a09c <coda_cursor_read_uint16_partial_array+0x1a4>
    a08c:	ldr	r3, [fp, #-20]	; 0xffffffec
    a090:	ldr	r2, [fp, #-28]	; 0xffffffe4
    a094:	cmp	r2, r3
    a098:	blt	a0b8 <coda_cursor_read_uint16_partial_array+0x1c0>
    a09c:	ldr	r3, [fp, #-20]	; 0xffffffec
    a0a0:	ldr	r2, [fp, #-28]	; 0xffffffe4
    a0a4:	ldr	r1, [pc, #384]	; a22c <coda_cursor_read_uint16_partial_array+0x334>
    a0a8:	mvn	r0, #106	; 0x6a
    a0ac:	bl	0 <coda_set_error>
    a0b0:	mvn	r3, #0
    a0b4:	b	a204 <coda_cursor_read_uint16_partial_array+0x30c>
    a0b8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    a0bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a0c0:	add	r2, r2, r3
    a0c4:	ldr	r3, [fp, #-20]	; 0xffffffec
    a0c8:	cmp	r2, r3
    a0cc:	ble	a0f4 <coda_cursor_read_uint16_partial_array+0x1fc>
    a0d0:	ldr	r3, [fp, #-20]	; 0xffffffec
    a0d4:	str	r3, [sp]
    a0d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a0dc:	ldr	r2, [fp, #-28]	; 0xffffffe4
    a0e0:	ldr	r1, [pc, #328]	; a230 <coda_cursor_read_uint16_partial_array+0x338>
    a0e4:	mvn	r0, #106	; 0x6a
    a0e8:	bl	0 <coda_set_error>
    a0ec:	mvn	r3, #0
    a0f0:	b	a204 <coda_cursor_read_uint16_partial_array+0x30c>
    a0f4:	sub	r3, fp, #16
    a0f8:	mov	r1, r3
    a0fc:	ldr	r0, [fp, #-12]
    a100:	bl	1080 <get_array_element_read_type>
    a104:	mov	r3, r0
    a108:	cmp	r3, #0
    a10c:	beq	a118 <coda_cursor_read_uint16_partial_array+0x220>
    a110:	mvn	r3, #0
    a114:	b	a204 <coda_cursor_read_uint16_partial_array+0x30c>
    a118:	ldr	r3, [fp, #-16]
    a11c:	cmp	r3, #1
    a120:	beq	a130 <coda_cursor_read_uint16_partial_array+0x238>
    a124:	cmp	r3, #3
    a128:	beq	a1ac <coda_cursor_read_uint16_partial_array+0x2b4>
    a12c:	b	a1d4 <coda_cursor_read_uint16_partial_array+0x2dc>
    a130:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a134:	ldr	r2, [fp, #-32]	; 0xffffffe0
    a138:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a13c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a140:	bl	3b30 <read_uint8_partial_array>
    a144:	mov	r3, r0
    a148:	cmp	r3, #0
    a14c:	beq	a158 <coda_cursor_read_uint16_partial_array+0x260>
    a150:	mvn	r3, #0
    a154:	b	a204 <coda_cursor_read_uint16_partial_array+0x30c>
    a158:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a15c:	sub	r3, r3, #1
    a160:	str	r3, [fp, #-8]
    a164:	b	a19c <coda_cursor_read_uint16_partial_array+0x2a4>
    a168:	ldr	r3, [fp, #-8]
    a16c:	lsl	r3, r3, #1
    a170:	ldr	r2, [fp, #-36]	; 0xffffffdc
    a174:	add	r3, r2, r3
    a178:	ldr	r2, [fp, #-8]
    a17c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    a180:	add	r2, r1, r2
    a184:	ldrb	r2, [r2]
    a188:	uxth	r2, r2
    a18c:	strh	r2, [r3]
    a190:	ldr	r3, [fp, #-8]
    a194:	sub	r3, r3, #1
    a198:	str	r3, [fp, #-8]
    a19c:	ldr	r3, [fp, #-8]
    a1a0:	cmp	r3, #0
    a1a4:	bge	a168 <coda_cursor_read_uint16_partial_array+0x270>
    a1a8:	b	a200 <coda_cursor_read_uint16_partial_array+0x308>
    a1ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a1b0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    a1b4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a1b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a1bc:	bl	3de8 <read_uint16_partial_array>
    a1c0:	mov	r3, r0
    a1c4:	cmp	r3, #0
    a1c8:	beq	a1fc <coda_cursor_read_uint16_partial_array+0x304>
    a1cc:	mvn	r3, #0
    a1d0:	b	a204 <coda_cursor_read_uint16_partial_array+0x30c>
    a1d4:	ldr	r3, [fp, #-16]
    a1d8:	mov	r0, r3
    a1dc:	bl	0 <coda_type_get_native_type_name>
    a1e0:	mov	r3, r0
    a1e4:	mov	r2, r3
    a1e8:	ldr	r1, [pc, #68]	; a234 <coda_cursor_read_uint16_partial_array+0x33c>
    a1ec:	mvn	r0, #104	; 0x68
    a1f0:	bl	0 <coda_set_error>
    a1f4:	mvn	r3, #0
    a1f8:	b	a204 <coda_cursor_read_uint16_partial_array+0x30c>
    a1fc:	nop			; (mov r0, r0)
    a200:	mov	r3, #0
    a204:	mov	r0, r3
    a208:	sub	sp, fp, #4
    a20c:	pop	{fp, pc}
    a210:	.word	0x00001183
    a214:	.word	0x000000c8
    a218:	.word	0x00000118
    a21c:	.word	0x00001188
    a220:	.word	0x00000138
    a224:	.word	0x00000480
    a228:	.word	0x000001dc
    a22c:	.word	0x000004b8
    a230:	.word	0x000004e8
    a234:	.word	0x000001e4

0000a238 <coda_cursor_read_int32_partial_array>:
    a238:	push	{fp, lr}
    a23c:	add	fp, sp, #4
    a240:	sub	sp, sp, #40	; 0x28
    a244:	str	r0, [fp, #-24]	; 0xffffffe8
    a248:	str	r1, [fp, #-28]	; 0xffffffe4
    a24c:	str	r2, [fp, #-32]	; 0xffffffe0
    a250:	str	r3, [fp, #-36]	; 0xffffffdc
    a254:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a258:	cmp	r3, #0
    a25c:	beq	a294 <coda_cursor_read_int32_partial_array+0x5c>
    a260:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a264:	ldr	r3, [r3, #4]
    a268:	cmp	r3, #0
    a26c:	ble	a294 <coda_cursor_read_int32_partial_array+0x5c>
    a270:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a274:	ldr	r3, [r3, #4]
    a278:	sub	r3, r3, #1
    a27c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a280:	lsl	r3, r3, #4
    a284:	add	r3, r2, r3
    a288:	ldr	r3, [r3, #8]
    a28c:	cmp	r3, #0
    a290:	bne	a2b0 <coda_cursor_read_int32_partial_array+0x78>
    a294:	ldr	r3, [pc, #1068]	; a6c8 <coda_cursor_read_int32_partial_array+0x490>
    a298:	ldr	r2, [pc, #1068]	; a6cc <coda_cursor_read_int32_partial_array+0x494>
    a29c:	ldr	r1, [pc, #1068]	; a6d0 <coda_cursor_read_int32_partial_array+0x498>
    a2a0:	mvn	r0, #99	; 0x63
    a2a4:	bl	0 <coda_set_error>
    a2a8:	mvn	r3, #0
    a2ac:	b	a6bc <coda_cursor_read_int32_partial_array+0x484>
    a2b0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a2b4:	cmp	r3, #0
    a2b8:	bne	a2d8 <coda_cursor_read_int32_partial_array+0xa0>
    a2bc:	ldr	r3, [pc, #1040]	; a6d4 <coda_cursor_read_int32_partial_array+0x49c>
    a2c0:	ldr	r2, [pc, #1028]	; a6cc <coda_cursor_read_int32_partial_array+0x494>
    a2c4:	ldr	r1, [pc, #1036]	; a6d8 <coda_cursor_read_int32_partial_array+0x4a0>
    a2c8:	mvn	r0, #99	; 0x63
    a2cc:	bl	0 <coda_set_error>
    a2d0:	mvn	r3, #0
    a2d4:	b	a6bc <coda_cursor_read_int32_partial_array+0x484>
    a2d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a2dc:	ldr	r3, [r3, #4]
    a2e0:	sub	r3, r3, #1
    a2e4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a2e8:	lsl	r3, r3, #4
    a2ec:	add	r3, r2, r3
    a2f0:	ldr	r3, [r3, #8]
    a2f4:	ldr	r3, [r3]
    a2f8:	cmp	r3, #99	; 0x63
    a2fc:	bhi	a320 <coda_cursor_read_int32_partial_array+0xe8>
    a300:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a304:	ldr	r3, [r3, #4]
    a308:	sub	r3, r3, #1
    a30c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a310:	lsl	r3, r3, #4
    a314:	add	r3, r2, r3
    a318:	ldr	r3, [r3, #8]
    a31c:	b	a340 <coda_cursor_read_int32_partial_array+0x108>
    a320:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a324:	ldr	r3, [r3, #4]
    a328:	sub	r3, r3, #1
    a32c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a330:	lsl	r3, r3, #4
    a334:	add	r3, r2, r3
    a338:	ldr	r3, [r3, #8]
    a33c:	ldr	r3, [r3, #4]
    a340:	str	r3, [fp, #-12]
    a344:	ldr	r3, [fp, #-12]
    a348:	ldr	r3, [r3, #8]
    a34c:	cmp	r3, #1
    a350:	beq	a380 <coda_cursor_read_int32_partial_array+0x148>
    a354:	ldr	r3, [fp, #-12]
    a358:	ldr	r3, [r3, #8]
    a35c:	mov	r0, r3
    a360:	bl	0 <coda_type_get_class_name>
    a364:	mov	r3, r0
    a368:	mov	r2, r3
    a36c:	ldr	r1, [pc, #872]	; a6dc <coda_cursor_read_int32_partial_array+0x4a4>
    a370:	mvn	r0, #104	; 0x68
    a374:	bl	0 <coda_set_error>
    a378:	mvn	r3, #0
    a37c:	b	a6bc <coda_cursor_read_int32_partial_array+0x484>
    a380:	ldr	r3, [pc, #856]	; a6e0 <coda_cursor_read_int32_partial_array+0x4a8>
    a384:	ldr	r3, [pc, r3]
    a388:	bl	0 <__aeabi_read_tp>
    a38c:	mov	r2, r0
    a390:	ldr	r3, [r2, r3]
    a394:	cmp	r3, #0
    a398:	beq	a434 <coda_cursor_read_int32_partial_array+0x1fc>
    a39c:	sub	r3, fp, #20
    a3a0:	mov	r1, r3
    a3a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a3a8:	bl	0 <coda_cursor_get_num_elements>
    a3ac:	mov	r3, r0
    a3b0:	cmp	r3, #0
    a3b4:	beq	a3c0 <coda_cursor_read_int32_partial_array+0x188>
    a3b8:	mvn	r3, #0
    a3bc:	b	a6bc <coda_cursor_read_int32_partial_array+0x484>
    a3c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    a3c4:	cmp	r3, #0
    a3c8:	blt	a3dc <coda_cursor_read_int32_partial_array+0x1a4>
    a3cc:	ldr	r3, [fp, #-20]	; 0xffffffec
    a3d0:	ldr	r2, [fp, #-28]	; 0xffffffe4
    a3d4:	cmp	r2, r3
    a3d8:	blt	a3f8 <coda_cursor_read_int32_partial_array+0x1c0>
    a3dc:	ldr	r3, [fp, #-20]	; 0xffffffec
    a3e0:	ldr	r2, [fp, #-28]	; 0xffffffe4
    a3e4:	ldr	r1, [pc, #760]	; a6e4 <coda_cursor_read_int32_partial_array+0x4ac>
    a3e8:	mvn	r0, #106	; 0x6a
    a3ec:	bl	0 <coda_set_error>
    a3f0:	mvn	r3, #0
    a3f4:	b	a6bc <coda_cursor_read_int32_partial_array+0x484>
    a3f8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    a3fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a400:	add	r2, r2, r3
    a404:	ldr	r3, [fp, #-20]	; 0xffffffec
    a408:	cmp	r2, r3
    a40c:	ble	a434 <coda_cursor_read_int32_partial_array+0x1fc>
    a410:	ldr	r3, [fp, #-20]	; 0xffffffec
    a414:	str	r3, [sp]
    a418:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a41c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    a420:	ldr	r1, [pc, #704]	; a6e8 <coda_cursor_read_int32_partial_array+0x4b0>
    a424:	mvn	r0, #106	; 0x6a
    a428:	bl	0 <coda_set_error>
    a42c:	mvn	r3, #0
    a430:	b	a6bc <coda_cursor_read_int32_partial_array+0x484>
    a434:	sub	r3, fp, #16
    a438:	mov	r1, r3
    a43c:	ldr	r0, [fp, #-12]
    a440:	bl	1080 <get_array_element_read_type>
    a444:	mov	r3, r0
    a448:	cmp	r3, #0
    a44c:	beq	a458 <coda_cursor_read_int32_partial_array+0x220>
    a450:	mvn	r3, #0
    a454:	b	a6bc <coda_cursor_read_int32_partial_array+0x484>
    a458:	ldr	r3, [fp, #-16]
    a45c:	cmp	r3, #4
    a460:	ldrls	pc, [pc, r3, lsl #2]
    a464:	b	a68c <coda_cursor_read_int32_partial_array+0x454>
    a468:	.word	0x0000a47c
    a46c:	.word	0x0000a4f4
    a470:	.word	0x0000a56c
    a474:	.word	0x0000a5e8
    a478:	.word	0x0000a664
    a47c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a480:	ldr	r2, [fp, #-32]	; 0xffffffe0
    a484:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a488:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a48c:	bl	39c8 <read_int8_partial_array>
    a490:	mov	r3, r0
    a494:	cmp	r3, #0
    a498:	beq	a4a4 <coda_cursor_read_int32_partial_array+0x26c>
    a49c:	mvn	r3, #0
    a4a0:	b	a6bc <coda_cursor_read_int32_partial_array+0x484>
    a4a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a4a8:	sub	r3, r3, #1
    a4ac:	str	r3, [fp, #-8]
    a4b0:	b	a4e4 <coda_cursor_read_int32_partial_array+0x2ac>
    a4b4:	ldr	r3, [fp, #-8]
    a4b8:	lsl	r3, r3, #2
    a4bc:	ldr	r2, [fp, #-36]	; 0xffffffdc
    a4c0:	add	r3, r2, r3
    a4c4:	ldr	r2, [fp, #-8]
    a4c8:	ldr	r1, [fp, #-36]	; 0xffffffdc
    a4cc:	add	r2, r1, r2
    a4d0:	ldrsb	r2, [r2]
    a4d4:	str	r2, [r3]
    a4d8:	ldr	r3, [fp, #-8]
    a4dc:	sub	r3, r3, #1
    a4e0:	str	r3, [fp, #-8]
    a4e4:	ldr	r3, [fp, #-8]
    a4e8:	cmp	r3, #0
    a4ec:	bge	a4b4 <coda_cursor_read_int32_partial_array+0x27c>
    a4f0:	b	a6b8 <coda_cursor_read_int32_partial_array+0x480>
    a4f4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a4f8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    a4fc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a500:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a504:	bl	3b30 <read_uint8_partial_array>
    a508:	mov	r3, r0
    a50c:	cmp	r3, #0
    a510:	beq	a51c <coda_cursor_read_int32_partial_array+0x2e4>
    a514:	mvn	r3, #0
    a518:	b	a6bc <coda_cursor_read_int32_partial_array+0x484>
    a51c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a520:	sub	r3, r3, #1
    a524:	str	r3, [fp, #-8]
    a528:	b	a55c <coda_cursor_read_int32_partial_array+0x324>
    a52c:	ldr	r3, [fp, #-8]
    a530:	lsl	r3, r3, #2
    a534:	ldr	r2, [fp, #-36]	; 0xffffffdc
    a538:	add	r3, r2, r3
    a53c:	ldr	r2, [fp, #-8]
    a540:	ldr	r1, [fp, #-36]	; 0xffffffdc
    a544:	add	r2, r1, r2
    a548:	ldrb	r2, [r2]
    a54c:	str	r2, [r3]
    a550:	ldr	r3, [fp, #-8]
    a554:	sub	r3, r3, #1
    a558:	str	r3, [fp, #-8]
    a55c:	ldr	r3, [fp, #-8]
    a560:	cmp	r3, #0
    a564:	bge	a52c <coda_cursor_read_int32_partial_array+0x2f4>
    a568:	b	a6b8 <coda_cursor_read_int32_partial_array+0x480>
    a56c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a570:	ldr	r2, [fp, #-32]	; 0xffffffe0
    a574:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a578:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a57c:	bl	3c7c <read_int16_partial_array>
    a580:	mov	r3, r0
    a584:	cmp	r3, #0
    a588:	beq	a594 <coda_cursor_read_int32_partial_array+0x35c>
    a58c:	mvn	r3, #0
    a590:	b	a6bc <coda_cursor_read_int32_partial_array+0x484>
    a594:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a598:	sub	r3, r3, #1
    a59c:	str	r3, [fp, #-8]
    a5a0:	b	a5d8 <coda_cursor_read_int32_partial_array+0x3a0>
    a5a4:	ldr	r3, [fp, #-8]
    a5a8:	lsl	r3, r3, #2
    a5ac:	ldr	r2, [fp, #-36]	; 0xffffffdc
    a5b0:	add	r3, r2, r3
    a5b4:	ldr	r2, [fp, #-8]
    a5b8:	lsl	r2, r2, #1
    a5bc:	ldr	r1, [fp, #-36]	; 0xffffffdc
    a5c0:	add	r2, r1, r2
    a5c4:	ldrsh	r2, [r2]
    a5c8:	str	r2, [r3]
    a5cc:	ldr	r3, [fp, #-8]
    a5d0:	sub	r3, r3, #1
    a5d4:	str	r3, [fp, #-8]
    a5d8:	ldr	r3, [fp, #-8]
    a5dc:	cmp	r3, #0
    a5e0:	bge	a5a4 <coda_cursor_read_int32_partial_array+0x36c>
    a5e4:	b	a6b8 <coda_cursor_read_int32_partial_array+0x480>
    a5e8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a5ec:	ldr	r2, [fp, #-32]	; 0xffffffe0
    a5f0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a5f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a5f8:	bl	3de8 <read_uint16_partial_array>
    a5fc:	mov	r3, r0
    a600:	cmp	r3, #0
    a604:	beq	a610 <coda_cursor_read_int32_partial_array+0x3d8>
    a608:	mvn	r3, #0
    a60c:	b	a6bc <coda_cursor_read_int32_partial_array+0x484>
    a610:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a614:	sub	r3, r3, #1
    a618:	str	r3, [fp, #-8]
    a61c:	b	a654 <coda_cursor_read_int32_partial_array+0x41c>
    a620:	ldr	r3, [fp, #-8]
    a624:	lsl	r3, r3, #2
    a628:	ldr	r2, [fp, #-36]	; 0xffffffdc
    a62c:	add	r3, r2, r3
    a630:	ldr	r2, [fp, #-8]
    a634:	lsl	r2, r2, #1
    a638:	ldr	r1, [fp, #-36]	; 0xffffffdc
    a63c:	add	r2, r1, r2
    a640:	ldrh	r2, [r2]
    a644:	str	r2, [r3]
    a648:	ldr	r3, [fp, #-8]
    a64c:	sub	r3, r3, #1
    a650:	str	r3, [fp, #-8]
    a654:	ldr	r3, [fp, #-8]
    a658:	cmp	r3, #0
    a65c:	bge	a620 <coda_cursor_read_int32_partial_array+0x3e8>
    a660:	b	a6b8 <coda_cursor_read_int32_partial_array+0x480>
    a664:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a668:	ldr	r2, [fp, #-32]	; 0xffffffe0
    a66c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a670:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a674:	bl	3f34 <read_int32_partial_array>
    a678:	mov	r3, r0
    a67c:	cmp	r3, #0
    a680:	beq	a6b4 <coda_cursor_read_int32_partial_array+0x47c>
    a684:	mvn	r3, #0
    a688:	b	a6bc <coda_cursor_read_int32_partial_array+0x484>
    a68c:	ldr	r3, [fp, #-16]
    a690:	mov	r0, r3
    a694:	bl	0 <coda_type_get_native_type_name>
    a698:	mov	r3, r0
    a69c:	mov	r2, r3
    a6a0:	ldr	r1, [pc, #68]	; a6ec <coda_cursor_read_int32_partial_array+0x4b4>
    a6a4:	mvn	r0, #104	; 0x68
    a6a8:	bl	0 <coda_set_error>
    a6ac:	mvn	r3, #0
    a6b0:	b	a6bc <coda_cursor_read_int32_partial_array+0x484>
    a6b4:	nop			; (mov r0, r0)
    a6b8:	mov	r3, #0
    a6bc:	mov	r0, r3
    a6c0:	sub	sp, fp, #4
    a6c4:	pop	{fp, pc}
    a6c8:	.word	0x000011e8
    a6cc:	.word	0x000000c8
    a6d0:	.word	0x00000118
    a6d4:	.word	0x000011ed
    a6d8:	.word	0x00000138
    a6dc:	.word	0x00000480
    a6e0:	.word	0x00000354
    a6e4:	.word	0x000004b8
    a6e8:	.word	0x000004e8
    a6ec:	.word	0x00000214

0000a6f0 <coda_cursor_read_uint32_partial_array>:
    a6f0:	push	{fp, lr}
    a6f4:	add	fp, sp, #4
    a6f8:	sub	sp, sp, #40	; 0x28
    a6fc:	str	r0, [fp, #-24]	; 0xffffffe8
    a700:	str	r1, [fp, #-28]	; 0xffffffe4
    a704:	str	r2, [fp, #-32]	; 0xffffffe0
    a708:	str	r3, [fp, #-36]	; 0xffffffdc
    a70c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a710:	cmp	r3, #0
    a714:	beq	a74c <coda_cursor_read_uint32_partial_array+0x5c>
    a718:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a71c:	ldr	r3, [r3, #4]
    a720:	cmp	r3, #0
    a724:	ble	a74c <coda_cursor_read_uint32_partial_array+0x5c>
    a728:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a72c:	ldr	r3, [r3, #4]
    a730:	sub	r3, r3, #1
    a734:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a738:	lsl	r3, r3, #4
    a73c:	add	r3, r2, r3
    a740:	ldr	r3, [r3, #8]
    a744:	cmp	r3, #0
    a748:	bne	a768 <coda_cursor_read_uint32_partial_array+0x78>
    a74c:	ldr	r3, [pc, #816]	; aa84 <coda_cursor_read_uint32_partial_array+0x394>
    a750:	ldr	r2, [pc, #816]	; aa88 <coda_cursor_read_uint32_partial_array+0x398>
    a754:	ldr	r1, [pc, #816]	; aa8c <coda_cursor_read_uint32_partial_array+0x39c>
    a758:	mvn	r0, #99	; 0x63
    a75c:	bl	0 <coda_set_error>
    a760:	mvn	r3, #0
    a764:	b	aa78 <coda_cursor_read_uint32_partial_array+0x388>
    a768:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a76c:	cmp	r3, #0
    a770:	bne	a790 <coda_cursor_read_uint32_partial_array+0xa0>
    a774:	ldr	r3, [pc, #788]	; aa90 <coda_cursor_read_uint32_partial_array+0x3a0>
    a778:	ldr	r2, [pc, #776]	; aa88 <coda_cursor_read_uint32_partial_array+0x398>
    a77c:	ldr	r1, [pc, #784]	; aa94 <coda_cursor_read_uint32_partial_array+0x3a4>
    a780:	mvn	r0, #99	; 0x63
    a784:	bl	0 <coda_set_error>
    a788:	mvn	r3, #0
    a78c:	b	aa78 <coda_cursor_read_uint32_partial_array+0x388>
    a790:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a794:	ldr	r3, [r3, #4]
    a798:	sub	r3, r3, #1
    a79c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a7a0:	lsl	r3, r3, #4
    a7a4:	add	r3, r2, r3
    a7a8:	ldr	r3, [r3, #8]
    a7ac:	ldr	r3, [r3]
    a7b0:	cmp	r3, #99	; 0x63
    a7b4:	bhi	a7d8 <coda_cursor_read_uint32_partial_array+0xe8>
    a7b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a7bc:	ldr	r3, [r3, #4]
    a7c0:	sub	r3, r3, #1
    a7c4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a7c8:	lsl	r3, r3, #4
    a7cc:	add	r3, r2, r3
    a7d0:	ldr	r3, [r3, #8]
    a7d4:	b	a7f8 <coda_cursor_read_uint32_partial_array+0x108>
    a7d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a7dc:	ldr	r3, [r3, #4]
    a7e0:	sub	r3, r3, #1
    a7e4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a7e8:	lsl	r3, r3, #4
    a7ec:	add	r3, r2, r3
    a7f0:	ldr	r3, [r3, #8]
    a7f4:	ldr	r3, [r3, #4]
    a7f8:	str	r3, [fp, #-12]
    a7fc:	ldr	r3, [fp, #-12]
    a800:	ldr	r3, [r3, #8]
    a804:	cmp	r3, #1
    a808:	beq	a838 <coda_cursor_read_uint32_partial_array+0x148>
    a80c:	ldr	r3, [fp, #-12]
    a810:	ldr	r3, [r3, #8]
    a814:	mov	r0, r3
    a818:	bl	0 <coda_type_get_class_name>
    a81c:	mov	r3, r0
    a820:	mov	r2, r3
    a824:	ldr	r1, [pc, #620]	; aa98 <coda_cursor_read_uint32_partial_array+0x3a8>
    a828:	mvn	r0, #104	; 0x68
    a82c:	bl	0 <coda_set_error>
    a830:	mvn	r3, #0
    a834:	b	aa78 <coda_cursor_read_uint32_partial_array+0x388>
    a838:	ldr	r3, [pc, #604]	; aa9c <coda_cursor_read_uint32_partial_array+0x3ac>
    a83c:	ldr	r3, [pc, r3]
    a840:	bl	0 <__aeabi_read_tp>
    a844:	mov	r2, r0
    a848:	ldr	r3, [r2, r3]
    a84c:	cmp	r3, #0
    a850:	beq	a8ec <coda_cursor_read_uint32_partial_array+0x1fc>
    a854:	sub	r3, fp, #20
    a858:	mov	r1, r3
    a85c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a860:	bl	0 <coda_cursor_get_num_elements>
    a864:	mov	r3, r0
    a868:	cmp	r3, #0
    a86c:	beq	a878 <coda_cursor_read_uint32_partial_array+0x188>
    a870:	mvn	r3, #0
    a874:	b	aa78 <coda_cursor_read_uint32_partial_array+0x388>
    a878:	ldr	r3, [fp, #-28]	; 0xffffffe4
    a87c:	cmp	r3, #0
    a880:	blt	a894 <coda_cursor_read_uint32_partial_array+0x1a4>
    a884:	ldr	r3, [fp, #-20]	; 0xffffffec
    a888:	ldr	r2, [fp, #-28]	; 0xffffffe4
    a88c:	cmp	r2, r3
    a890:	blt	a8b0 <coda_cursor_read_uint32_partial_array+0x1c0>
    a894:	ldr	r3, [fp, #-20]	; 0xffffffec
    a898:	ldr	r2, [fp, #-28]	; 0xffffffe4
    a89c:	ldr	r1, [pc, #508]	; aaa0 <coda_cursor_read_uint32_partial_array+0x3b0>
    a8a0:	mvn	r0, #106	; 0x6a
    a8a4:	bl	0 <coda_set_error>
    a8a8:	mvn	r3, #0
    a8ac:	b	aa78 <coda_cursor_read_uint32_partial_array+0x388>
    a8b0:	ldr	r2, [fp, #-28]	; 0xffffffe4
    a8b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a8b8:	add	r2, r2, r3
    a8bc:	ldr	r3, [fp, #-20]	; 0xffffffec
    a8c0:	cmp	r2, r3
    a8c4:	ble	a8ec <coda_cursor_read_uint32_partial_array+0x1fc>
    a8c8:	ldr	r3, [fp, #-20]	; 0xffffffec
    a8cc:	str	r3, [sp]
    a8d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a8d4:	ldr	r2, [fp, #-28]	; 0xffffffe4
    a8d8:	ldr	r1, [pc, #452]	; aaa4 <coda_cursor_read_uint32_partial_array+0x3b4>
    a8dc:	mvn	r0, #106	; 0x6a
    a8e0:	bl	0 <coda_set_error>
    a8e4:	mvn	r3, #0
    a8e8:	b	aa78 <coda_cursor_read_uint32_partial_array+0x388>
    a8ec:	sub	r3, fp, #16
    a8f0:	mov	r1, r3
    a8f4:	ldr	r0, [fp, #-12]
    a8f8:	bl	1080 <get_array_element_read_type>
    a8fc:	mov	r3, r0
    a900:	cmp	r3, #0
    a904:	beq	a910 <coda_cursor_read_uint32_partial_array+0x220>
    a908:	mvn	r3, #0
    a90c:	b	aa78 <coda_cursor_read_uint32_partial_array+0x388>
    a910:	ldr	r3, [fp, #-16]
    a914:	cmp	r3, #3
    a918:	beq	a9a4 <coda_cursor_read_uint32_partial_array+0x2b4>
    a91c:	cmp	r3, #5
    a920:	beq	aa20 <coda_cursor_read_uint32_partial_array+0x330>
    a924:	cmp	r3, #1
    a928:	bne	aa48 <coda_cursor_read_uint32_partial_array+0x358>
    a92c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a930:	ldr	r2, [fp, #-32]	; 0xffffffe0
    a934:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a938:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a93c:	bl	3b30 <read_uint8_partial_array>
    a940:	mov	r3, r0
    a944:	cmp	r3, #0
    a948:	beq	a954 <coda_cursor_read_uint32_partial_array+0x264>
    a94c:	mvn	r3, #0
    a950:	b	aa78 <coda_cursor_read_uint32_partial_array+0x388>
    a954:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a958:	sub	r3, r3, #1
    a95c:	str	r3, [fp, #-8]
    a960:	b	a994 <coda_cursor_read_uint32_partial_array+0x2a4>
    a964:	ldr	r3, [fp, #-8]
    a968:	lsl	r3, r3, #2
    a96c:	ldr	r2, [fp, #-36]	; 0xffffffdc
    a970:	add	r3, r2, r3
    a974:	ldr	r2, [fp, #-8]
    a978:	ldr	r1, [fp, #-36]	; 0xffffffdc
    a97c:	add	r2, r1, r2
    a980:	ldrb	r2, [r2]
    a984:	str	r2, [r3]
    a988:	ldr	r3, [fp, #-8]
    a98c:	sub	r3, r3, #1
    a990:	str	r3, [fp, #-8]
    a994:	ldr	r3, [fp, #-8]
    a998:	cmp	r3, #0
    a99c:	bge	a964 <coda_cursor_read_uint32_partial_array+0x274>
    a9a0:	b	aa74 <coda_cursor_read_uint32_partial_array+0x384>
    a9a4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a9a8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    a9ac:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a9b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a9b4:	bl	3de8 <read_uint16_partial_array>
    a9b8:	mov	r3, r0
    a9bc:	cmp	r3, #0
    a9c0:	beq	a9cc <coda_cursor_read_uint32_partial_array+0x2dc>
    a9c4:	mvn	r3, #0
    a9c8:	b	aa78 <coda_cursor_read_uint32_partial_array+0x388>
    a9cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a9d0:	sub	r3, r3, #1
    a9d4:	str	r3, [fp, #-8]
    a9d8:	b	aa10 <coda_cursor_read_uint32_partial_array+0x320>
    a9dc:	ldr	r3, [fp, #-8]
    a9e0:	lsl	r3, r3, #2
    a9e4:	ldr	r2, [fp, #-36]	; 0xffffffdc
    a9e8:	add	r3, r2, r3
    a9ec:	ldr	r2, [fp, #-8]
    a9f0:	lsl	r2, r2, #1
    a9f4:	ldr	r1, [fp, #-36]	; 0xffffffdc
    a9f8:	add	r2, r1, r2
    a9fc:	ldrh	r2, [r2]
    aa00:	str	r2, [r3]
    aa04:	ldr	r3, [fp, #-8]
    aa08:	sub	r3, r3, #1
    aa0c:	str	r3, [fp, #-8]
    aa10:	ldr	r3, [fp, #-8]
    aa14:	cmp	r3, #0
    aa18:	bge	a9dc <coda_cursor_read_uint32_partial_array+0x2ec>
    aa1c:	b	aa74 <coda_cursor_read_uint32_partial_array+0x384>
    aa20:	ldr	r3, [fp, #-36]	; 0xffffffdc
    aa24:	ldr	r2, [fp, #-32]	; 0xffffffe0
    aa28:	ldr	r1, [fp, #-28]	; 0xffffffe4
    aa2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    aa30:	bl	40a0 <read_uint32_partial_array>
    aa34:	mov	r3, r0
    aa38:	cmp	r3, #0
    aa3c:	beq	aa70 <coda_cursor_read_uint32_partial_array+0x380>
    aa40:	mvn	r3, #0
    aa44:	b	aa78 <coda_cursor_read_uint32_partial_array+0x388>
    aa48:	ldr	r3, [fp, #-16]
    aa4c:	mov	r0, r3
    aa50:	bl	0 <coda_type_get_native_type_name>
    aa54:	mov	r3, r0
    aa58:	mov	r2, r3
    aa5c:	ldr	r1, [pc, #68]	; aaa8 <coda_cursor_read_uint32_partial_array+0x3b8>
    aa60:	mvn	r0, #104	; 0x68
    aa64:	bl	0 <coda_set_error>
    aa68:	mvn	r3, #0
    aa6c:	b	aa78 <coda_cursor_read_uint32_partial_array+0x388>
    aa70:	nop			; (mov r0, r0)
    aa74:	mov	r3, #0
    aa78:	mov	r0, r3
    aa7c:	sub	sp, fp, #4
    aa80:	pop	{fp, pc}
    aa84:	.word	0x0000126a
    aa88:	.word	0x000000c8
    aa8c:	.word	0x00000118
    aa90:	.word	0x0000126f
    aa94:	.word	0x00000138
    aa98:	.word	0x00000480
    aa9c:	.word	0x00000258
    aaa0:	.word	0x000004b8
    aaa4:	.word	0x000004e8
    aaa8:	.word	0x00000244

0000aaac <coda_cursor_read_int64_partial_array>:
    aaac:	push	{fp, lr}
    aab0:	add	fp, sp, #4
    aab4:	sub	sp, sp, #40	; 0x28
    aab8:	str	r0, [fp, #-24]	; 0xffffffe8
    aabc:	str	r1, [fp, #-28]	; 0xffffffe4
    aac0:	str	r2, [fp, #-32]	; 0xffffffe0
    aac4:	str	r3, [fp, #-36]	; 0xffffffdc
    aac8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    aacc:	cmp	r3, #0
    aad0:	beq	ab08 <coda_cursor_read_int64_partial_array+0x5c>
    aad4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    aad8:	ldr	r3, [r3, #4]
    aadc:	cmp	r3, #0
    aae0:	ble	ab08 <coda_cursor_read_int64_partial_array+0x5c>
    aae4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    aae8:	ldr	r3, [r3, #4]
    aaec:	sub	r3, r3, #1
    aaf0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    aaf4:	lsl	r3, r3, #4
    aaf8:	add	r3, r2, r3
    aafc:	ldr	r3, [r3, #8]
    ab00:	cmp	r3, #0
    ab04:	bne	ab24 <coda_cursor_read_int64_partial_array+0x78>
    ab08:	ldr	r3, [pc, #1372]	; b06c <coda_cursor_read_int64_partial_array+0x5c0>
    ab0c:	ldr	r2, [pc, #1372]	; b070 <coda_cursor_read_int64_partial_array+0x5c4>
    ab10:	ldr	r1, [pc, #1372]	; b074 <coda_cursor_read_int64_partial_array+0x5c8>
    ab14:	mvn	r0, #99	; 0x63
    ab18:	bl	0 <coda_set_error>
    ab1c:	mvn	r3, #0
    ab20:	b	b060 <coda_cursor_read_int64_partial_array+0x5b4>
    ab24:	ldr	r3, [fp, #-36]	; 0xffffffdc
    ab28:	cmp	r3, #0
    ab2c:	bne	ab4c <coda_cursor_read_int64_partial_array+0xa0>
    ab30:	ldr	r3, [pc, #1344]	; b078 <coda_cursor_read_int64_partial_array+0x5cc>
    ab34:	ldr	r2, [pc, #1332]	; b070 <coda_cursor_read_int64_partial_array+0x5c4>
    ab38:	ldr	r1, [pc, #1340]	; b07c <coda_cursor_read_int64_partial_array+0x5d0>
    ab3c:	mvn	r0, #99	; 0x63
    ab40:	bl	0 <coda_set_error>
    ab44:	mvn	r3, #0
    ab48:	b	b060 <coda_cursor_read_int64_partial_array+0x5b4>
    ab4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    ab50:	ldr	r3, [r3, #4]
    ab54:	sub	r3, r3, #1
    ab58:	ldr	r2, [fp, #-24]	; 0xffffffe8
    ab5c:	lsl	r3, r3, #4
    ab60:	add	r3, r2, r3
    ab64:	ldr	r3, [r3, #8]
    ab68:	ldr	r3, [r3]
    ab6c:	cmp	r3, #99	; 0x63
    ab70:	bhi	ab94 <coda_cursor_read_int64_partial_array+0xe8>
    ab74:	ldr	r3, [fp, #-24]	; 0xffffffe8
    ab78:	ldr	r3, [r3, #4]
    ab7c:	sub	r3, r3, #1
    ab80:	ldr	r2, [fp, #-24]	; 0xffffffe8
    ab84:	lsl	r3, r3, #4
    ab88:	add	r3, r2, r3
    ab8c:	ldr	r3, [r3, #8]
    ab90:	b	abb4 <coda_cursor_read_int64_partial_array+0x108>
    ab94:	ldr	r3, [fp, #-24]	; 0xffffffe8
    ab98:	ldr	r3, [r3, #4]
    ab9c:	sub	r3, r3, #1
    aba0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    aba4:	lsl	r3, r3, #4
    aba8:	add	r3, r2, r3
    abac:	ldr	r3, [r3, #8]
    abb0:	ldr	r3, [r3, #4]
    abb4:	str	r3, [fp, #-12]
    abb8:	ldr	r3, [fp, #-12]
    abbc:	ldr	r3, [r3, #8]
    abc0:	cmp	r3, #1
    abc4:	beq	abf4 <coda_cursor_read_int64_partial_array+0x148>
    abc8:	ldr	r3, [fp, #-12]
    abcc:	ldr	r3, [r3, #8]
    abd0:	mov	r0, r3
    abd4:	bl	0 <coda_type_get_class_name>
    abd8:	mov	r3, r0
    abdc:	mov	r2, r3
    abe0:	ldr	r1, [pc, #1176]	; b080 <coda_cursor_read_int64_partial_array+0x5d4>
    abe4:	mvn	r0, #104	; 0x68
    abe8:	bl	0 <coda_set_error>
    abec:	mvn	r3, #0
    abf0:	b	b060 <coda_cursor_read_int64_partial_array+0x5b4>
    abf4:	ldr	r3, [pc, #1160]	; b084 <coda_cursor_read_int64_partial_array+0x5d8>
    abf8:	ldr	r3, [pc, r3]
    abfc:	bl	0 <__aeabi_read_tp>
    ac00:	mov	r2, r0
    ac04:	ldr	r3, [r2, r3]
    ac08:	cmp	r3, #0
    ac0c:	beq	aca8 <coda_cursor_read_int64_partial_array+0x1fc>
    ac10:	sub	r3, fp, #20
    ac14:	mov	r1, r3
    ac18:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ac1c:	bl	0 <coda_cursor_get_num_elements>
    ac20:	mov	r3, r0
    ac24:	cmp	r3, #0
    ac28:	beq	ac34 <coda_cursor_read_int64_partial_array+0x188>
    ac2c:	mvn	r3, #0
    ac30:	b	b060 <coda_cursor_read_int64_partial_array+0x5b4>
    ac34:	ldr	r3, [fp, #-28]	; 0xffffffe4
    ac38:	cmp	r3, #0
    ac3c:	blt	ac50 <coda_cursor_read_int64_partial_array+0x1a4>
    ac40:	ldr	r3, [fp, #-20]	; 0xffffffec
    ac44:	ldr	r2, [fp, #-28]	; 0xffffffe4
    ac48:	cmp	r2, r3
    ac4c:	blt	ac6c <coda_cursor_read_int64_partial_array+0x1c0>
    ac50:	ldr	r3, [fp, #-20]	; 0xffffffec
    ac54:	ldr	r2, [fp, #-28]	; 0xffffffe4
    ac58:	ldr	r1, [pc, #1064]	; b088 <coda_cursor_read_int64_partial_array+0x5dc>
    ac5c:	mvn	r0, #106	; 0x6a
    ac60:	bl	0 <coda_set_error>
    ac64:	mvn	r3, #0
    ac68:	b	b060 <coda_cursor_read_int64_partial_array+0x5b4>
    ac6c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    ac70:	ldr	r3, [fp, #-32]	; 0xffffffe0
    ac74:	add	r2, r2, r3
    ac78:	ldr	r3, [fp, #-20]	; 0xffffffec
    ac7c:	cmp	r2, r3
    ac80:	ble	aca8 <coda_cursor_read_int64_partial_array+0x1fc>
    ac84:	ldr	r3, [fp, #-20]	; 0xffffffec
    ac88:	str	r3, [sp]
    ac8c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    ac90:	ldr	r2, [fp, #-28]	; 0xffffffe4
    ac94:	ldr	r1, [pc, #1008]	; b08c <coda_cursor_read_int64_partial_array+0x5e0>
    ac98:	mvn	r0, #106	; 0x6a
    ac9c:	bl	0 <coda_set_error>
    aca0:	mvn	r3, #0
    aca4:	b	b060 <coda_cursor_read_int64_partial_array+0x5b4>
    aca8:	sub	r3, fp, #16
    acac:	mov	r1, r3
    acb0:	ldr	r0, [fp, #-12]
    acb4:	bl	1080 <get_array_element_read_type>
    acb8:	mov	r3, r0
    acbc:	cmp	r3, #0
    acc0:	beq	accc <coda_cursor_read_int64_partial_array+0x220>
    acc4:	mvn	r3, #0
    acc8:	b	b060 <coda_cursor_read_int64_partial_array+0x5b4>
    accc:	ldr	r3, [fp, #-16]
    acd0:	cmp	r3, #6
    acd4:	ldrls	pc, [pc, r3, lsl #2]
    acd8:	b	b030 <coda_cursor_read_int64_partial_array+0x584>
    acdc:	.word	0x0000acf8
    ace0:	.word	0x0000ad78
    ace4:	.word	0x0000adf8
    ace8:	.word	0x0000ae7c
    acec:	.word	0x0000af00
    acf0:	.word	0x0000af84
    acf4:	.word	0x0000b008
    acf8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    acfc:	ldr	r2, [fp, #-32]	; 0xffffffe0
    ad00:	ldr	r1, [fp, #-28]	; 0xffffffe4
    ad04:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ad08:	bl	39c8 <read_int8_partial_array>
    ad0c:	mov	r3, r0
    ad10:	cmp	r3, #0
    ad14:	beq	ad20 <coda_cursor_read_int64_partial_array+0x274>
    ad18:	mvn	r3, #0
    ad1c:	b	b060 <coda_cursor_read_int64_partial_array+0x5b4>
    ad20:	ldr	r3, [fp, #-32]	; 0xffffffe0
    ad24:	sub	r3, r3, #1
    ad28:	str	r3, [fp, #-8]
    ad2c:	b	ad68 <coda_cursor_read_int64_partial_array+0x2bc>
    ad30:	ldr	r3, [fp, #-8]
    ad34:	lsl	r3, r3, #3
    ad38:	ldr	r2, [fp, #-36]	; 0xffffffdc
    ad3c:	add	r1, r2, r3
    ad40:	ldr	r3, [fp, #-8]
    ad44:	ldr	r2, [fp, #-36]	; 0xffffffdc
    ad48:	add	r3, r2, r3
    ad4c:	ldrsb	r3, [r3]
    ad50:	sxtb	r2, r3
    ad54:	asr	r3, r2, #31
    ad58:	strd	r2, [r1]
    ad5c:	ldr	r3, [fp, #-8]
    ad60:	sub	r3, r3, #1
    ad64:	str	r3, [fp, #-8]
    ad68:	ldr	r3, [fp, #-8]
    ad6c:	cmp	r3, #0
    ad70:	bge	ad30 <coda_cursor_read_int64_partial_array+0x284>
    ad74:	b	b05c <coda_cursor_read_int64_partial_array+0x5b0>
    ad78:	ldr	r3, [fp, #-36]	; 0xffffffdc
    ad7c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    ad80:	ldr	r1, [fp, #-28]	; 0xffffffe4
    ad84:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ad88:	bl	3b30 <read_uint8_partial_array>
    ad8c:	mov	r3, r0
    ad90:	cmp	r3, #0
    ad94:	beq	ada0 <coda_cursor_read_int64_partial_array+0x2f4>
    ad98:	mvn	r3, #0
    ad9c:	b	b060 <coda_cursor_read_int64_partial_array+0x5b4>
    ada0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    ada4:	sub	r3, r3, #1
    ada8:	str	r3, [fp, #-8]
    adac:	b	ade8 <coda_cursor_read_int64_partial_array+0x33c>
    adb0:	ldr	r3, [fp, #-8]
    adb4:	lsl	r3, r3, #3
    adb8:	ldr	r2, [fp, #-36]	; 0xffffffdc
    adbc:	add	r1, r2, r3
    adc0:	ldr	r3, [fp, #-8]
    adc4:	ldr	r2, [fp, #-36]	; 0xffffffdc
    adc8:	add	r3, r2, r3
    adcc:	ldrb	r3, [r3]
    add0:	uxtb	r2, r3
    add4:	mov	r3, #0
    add8:	strd	r2, [r1]
    addc:	ldr	r3, [fp, #-8]
    ade0:	sub	r3, r3, #1
    ade4:	str	r3, [fp, #-8]
    ade8:	ldr	r3, [fp, #-8]
    adec:	cmp	r3, #0
    adf0:	bge	adb0 <coda_cursor_read_int64_partial_array+0x304>
    adf4:	b	b05c <coda_cursor_read_int64_partial_array+0x5b0>
    adf8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    adfc:	ldr	r2, [fp, #-32]	; 0xffffffe0
    ae00:	ldr	r1, [fp, #-28]	; 0xffffffe4
    ae04:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ae08:	bl	3c7c <read_int16_partial_array>
    ae0c:	mov	r3, r0
    ae10:	cmp	r3, #0
    ae14:	beq	ae20 <coda_cursor_read_int64_partial_array+0x374>
    ae18:	mvn	r3, #0
    ae1c:	b	b060 <coda_cursor_read_int64_partial_array+0x5b4>
    ae20:	ldr	r3, [fp, #-32]	; 0xffffffe0
    ae24:	sub	r3, r3, #1
    ae28:	str	r3, [fp, #-8]
    ae2c:	b	ae6c <coda_cursor_read_int64_partial_array+0x3c0>
    ae30:	ldr	r3, [fp, #-8]
    ae34:	lsl	r3, r3, #3
    ae38:	ldr	r2, [fp, #-36]	; 0xffffffdc
    ae3c:	add	r1, r2, r3
    ae40:	ldr	r3, [fp, #-8]
    ae44:	lsl	r3, r3, #1
    ae48:	ldr	r2, [fp, #-36]	; 0xffffffdc
    ae4c:	add	r3, r2, r3
    ae50:	ldrsh	r3, [r3]
    ae54:	sxth	r2, r3
    ae58:	asr	r3, r2, #31
    ae5c:	strd	r2, [r1]
    ae60:	ldr	r3, [fp, #-8]
    ae64:	sub	r3, r3, #1
    ae68:	str	r3, [fp, #-8]
    ae6c:	ldr	r3, [fp, #-8]
    ae70:	cmp	r3, #0
    ae74:	bge	ae30 <coda_cursor_read_int64_partial_array+0x384>
    ae78:	b	b05c <coda_cursor_read_int64_partial_array+0x5b0>
    ae7c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    ae80:	ldr	r2, [fp, #-32]	; 0xffffffe0
    ae84:	ldr	r1, [fp, #-28]	; 0xffffffe4
    ae88:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ae8c:	bl	3de8 <read_uint16_partial_array>
    ae90:	mov	r3, r0
    ae94:	cmp	r3, #0
    ae98:	beq	aea4 <coda_cursor_read_int64_partial_array+0x3f8>
    ae9c:	mvn	r3, #0
    aea0:	b	b060 <coda_cursor_read_int64_partial_array+0x5b4>
    aea4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    aea8:	sub	r3, r3, #1
    aeac:	str	r3, [fp, #-8]
    aeb0:	b	aef0 <coda_cursor_read_int64_partial_array+0x444>
    aeb4:	ldr	r3, [fp, #-8]
    aeb8:	lsl	r3, r3, #3
    aebc:	ldr	r2, [fp, #-36]	; 0xffffffdc
    aec0:	add	r1, r2, r3
    aec4:	ldr	r3, [fp, #-8]
    aec8:	lsl	r3, r3, #1
    aecc:	ldr	r2, [fp, #-36]	; 0xffffffdc
    aed0:	add	r3, r2, r3
    aed4:	ldrh	r3, [r3]
    aed8:	uxth	r2, r3
    aedc:	mov	r3, #0
    aee0:	strd	r2, [r1]
    aee4:	ldr	r3, [fp, #-8]
    aee8:	sub	r3, r3, #1
    aeec:	str	r3, [fp, #-8]
    aef0:	ldr	r3, [fp, #-8]
    aef4:	cmp	r3, #0
    aef8:	bge	aeb4 <coda_cursor_read_int64_partial_array+0x408>
    aefc:	b	b05c <coda_cursor_read_int64_partial_array+0x5b0>
    af00:	ldr	r3, [fp, #-36]	; 0xffffffdc
    af04:	ldr	r2, [fp, #-32]	; 0xffffffe0
    af08:	ldr	r1, [fp, #-28]	; 0xffffffe4
    af0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    af10:	bl	3f34 <read_int32_partial_array>
    af14:	mov	r3, r0
    af18:	cmp	r3, #0
    af1c:	beq	af28 <coda_cursor_read_int64_partial_array+0x47c>
    af20:	mvn	r3, #0
    af24:	b	b060 <coda_cursor_read_int64_partial_array+0x5b4>
    af28:	ldr	r3, [fp, #-32]	; 0xffffffe0
    af2c:	sub	r3, r3, #1
    af30:	str	r3, [fp, #-8]
    af34:	b	af74 <coda_cursor_read_int64_partial_array+0x4c8>
    af38:	ldr	r3, [fp, #-8]
    af3c:	lsl	r3, r3, #3
    af40:	ldr	r2, [fp, #-36]	; 0xffffffdc
    af44:	add	r1, r2, r3
    af48:	ldr	r3, [fp, #-8]
    af4c:	lsl	r3, r3, #2
    af50:	ldr	r2, [fp, #-36]	; 0xffffffdc
    af54:	add	r3, r2, r3
    af58:	ldr	r3, [r3]
    af5c:	mov	r2, r3
    af60:	asr	r3, r2, #31
    af64:	strd	r2, [r1]
    af68:	ldr	r3, [fp, #-8]
    af6c:	sub	r3, r3, #1
    af70:	str	r3, [fp, #-8]
    af74:	ldr	r3, [fp, #-8]
    af78:	cmp	r3, #0
    af7c:	bge	af38 <coda_cursor_read_int64_partial_array+0x48c>
    af80:	b	b05c <coda_cursor_read_int64_partial_array+0x5b0>
    af84:	ldr	r3, [fp, #-36]	; 0xffffffdc
    af88:	ldr	r2, [fp, #-32]	; 0xffffffe0
    af8c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    af90:	ldr	r0, [fp, #-24]	; 0xffffffe8
    af94:	bl	40a0 <read_uint32_partial_array>
    af98:	mov	r3, r0
    af9c:	cmp	r3, #0
    afa0:	beq	afac <coda_cursor_read_int64_partial_array+0x500>
    afa4:	mvn	r3, #0
    afa8:	b	b060 <coda_cursor_read_int64_partial_array+0x5b4>
    afac:	ldr	r3, [fp, #-32]	; 0xffffffe0
    afb0:	sub	r3, r3, #1
    afb4:	str	r3, [fp, #-8]
    afb8:	b	aff8 <coda_cursor_read_int64_partial_array+0x54c>
    afbc:	ldr	r3, [fp, #-8]
    afc0:	lsl	r3, r3, #3
    afc4:	ldr	r2, [fp, #-36]	; 0xffffffdc
    afc8:	add	r1, r2, r3
    afcc:	ldr	r3, [fp, #-8]
    afd0:	lsl	r3, r3, #2
    afd4:	ldr	r2, [fp, #-36]	; 0xffffffdc
    afd8:	add	r3, r2, r3
    afdc:	ldr	r3, [r3]
    afe0:	mov	r2, r3
    afe4:	mov	r3, #0
    afe8:	strd	r2, [r1]
    afec:	ldr	r3, [fp, #-8]
    aff0:	sub	r3, r3, #1
    aff4:	str	r3, [fp, #-8]
    aff8:	ldr	r3, [fp, #-8]
    affc:	cmp	r3, #0
    b000:	bge	afbc <coda_cursor_read_int64_partial_array+0x510>
    b004:	b	b05c <coda_cursor_read_int64_partial_array+0x5b0>
    b008:	ldr	r3, [fp, #-36]	; 0xffffffdc
    b00c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    b010:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b014:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b018:	bl	41ec <read_int64_partial_array>
    b01c:	mov	r3, r0
    b020:	cmp	r3, #0
    b024:	beq	b058 <coda_cursor_read_int64_partial_array+0x5ac>
    b028:	mvn	r3, #0
    b02c:	b	b060 <coda_cursor_read_int64_partial_array+0x5b4>
    b030:	ldr	r3, [fp, #-16]
    b034:	mov	r0, r3
    b038:	bl	0 <coda_type_get_native_type_name>
    b03c:	mov	r3, r0
    b040:	mov	r2, r3
    b044:	ldr	r1, [pc, #68]	; b090 <coda_cursor_read_int64_partial_array+0x5e4>
    b048:	mvn	r0, #104	; 0x68
    b04c:	bl	0 <coda_set_error>
    b050:	mvn	r3, #0
    b054:	b	b060 <coda_cursor_read_int64_partial_array+0x5b4>
    b058:	nop			; (mov r0, r0)
    b05c:	mov	r3, #0
    b060:	mov	r0, r3
    b064:	sub	sp, fp, #4
    b068:	pop	{fp, pc}
    b06c:	.word	0x000012db
    b070:	.word	0x000000c8
    b074:	.word	0x00000118
    b078:	.word	0x000012e0
    b07c:	.word	0x00000138
    b080:	.word	0x00000480
    b084:	.word	0x00000484
    b088:	.word	0x000004b8
    b08c:	.word	0x000004e8
    b090:	.word	0x00000274

0000b094 <coda_cursor_read_uint64_partial_array>:
    b094:	push	{fp, lr}
    b098:	add	fp, sp, #4
    b09c:	sub	sp, sp, #40	; 0x28
    b0a0:	str	r0, [fp, #-24]	; 0xffffffe8
    b0a4:	str	r1, [fp, #-28]	; 0xffffffe4
    b0a8:	str	r2, [fp, #-32]	; 0xffffffe0
    b0ac:	str	r3, [fp, #-36]	; 0xffffffdc
    b0b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    b0b4:	cmp	r3, #0
    b0b8:	beq	b0f0 <coda_cursor_read_uint64_partial_array+0x5c>
    b0bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    b0c0:	ldr	r3, [r3, #4]
    b0c4:	cmp	r3, #0
    b0c8:	ble	b0f0 <coda_cursor_read_uint64_partial_array+0x5c>
    b0cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    b0d0:	ldr	r3, [r3, #4]
    b0d4:	sub	r3, r3, #1
    b0d8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    b0dc:	lsl	r3, r3, #4
    b0e0:	add	r3, r2, r3
    b0e4:	ldr	r3, [r3, #8]
    b0e8:	cmp	r3, #0
    b0ec:	bne	b10c <coda_cursor_read_uint64_partial_array+0x78>
    b0f0:	ldr	r3, [pc, #984]	; b4d0 <coda_cursor_read_uint64_partial_array+0x43c>
    b0f4:	ldr	r2, [pc, #984]	; b4d4 <coda_cursor_read_uint64_partial_array+0x440>
    b0f8:	ldr	r1, [pc, #984]	; b4d8 <coda_cursor_read_uint64_partial_array+0x444>
    b0fc:	mvn	r0, #99	; 0x63
    b100:	bl	0 <coda_set_error>
    b104:	mvn	r3, #0
    b108:	b	b4c4 <coda_cursor_read_uint64_partial_array+0x430>
    b10c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    b110:	cmp	r3, #0
    b114:	bne	b134 <coda_cursor_read_uint64_partial_array+0xa0>
    b118:	ldr	r3, [pc, #956]	; b4dc <coda_cursor_read_uint64_partial_array+0x448>
    b11c:	ldr	r2, [pc, #944]	; b4d4 <coda_cursor_read_uint64_partial_array+0x440>
    b120:	ldr	r1, [pc, #952]	; b4e0 <coda_cursor_read_uint64_partial_array+0x44c>
    b124:	mvn	r0, #99	; 0x63
    b128:	bl	0 <coda_set_error>
    b12c:	mvn	r3, #0
    b130:	b	b4c4 <coda_cursor_read_uint64_partial_array+0x430>
    b134:	ldr	r3, [fp, #-24]	; 0xffffffe8
    b138:	ldr	r3, [r3, #4]
    b13c:	sub	r3, r3, #1
    b140:	ldr	r2, [fp, #-24]	; 0xffffffe8
    b144:	lsl	r3, r3, #4
    b148:	add	r3, r2, r3
    b14c:	ldr	r3, [r3, #8]
    b150:	ldr	r3, [r3]
    b154:	cmp	r3, #99	; 0x63
    b158:	bhi	b17c <coda_cursor_read_uint64_partial_array+0xe8>
    b15c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    b160:	ldr	r3, [r3, #4]
    b164:	sub	r3, r3, #1
    b168:	ldr	r2, [fp, #-24]	; 0xffffffe8
    b16c:	lsl	r3, r3, #4
    b170:	add	r3, r2, r3
    b174:	ldr	r3, [r3, #8]
    b178:	b	b19c <coda_cursor_read_uint64_partial_array+0x108>
    b17c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    b180:	ldr	r3, [r3, #4]
    b184:	sub	r3, r3, #1
    b188:	ldr	r2, [fp, #-24]	; 0xffffffe8
    b18c:	lsl	r3, r3, #4
    b190:	add	r3, r2, r3
    b194:	ldr	r3, [r3, #8]
    b198:	ldr	r3, [r3, #4]
    b19c:	str	r3, [fp, #-12]
    b1a0:	ldr	r3, [fp, #-12]
    b1a4:	ldr	r3, [r3, #8]
    b1a8:	cmp	r3, #1
    b1ac:	beq	b1dc <coda_cursor_read_uint64_partial_array+0x148>
    b1b0:	ldr	r3, [fp, #-12]
    b1b4:	ldr	r3, [r3, #8]
    b1b8:	mov	r0, r3
    b1bc:	bl	0 <coda_type_get_class_name>
    b1c0:	mov	r3, r0
    b1c4:	mov	r2, r3
    b1c8:	ldr	r1, [pc, #788]	; b4e4 <coda_cursor_read_uint64_partial_array+0x450>
    b1cc:	mvn	r0, #104	; 0x68
    b1d0:	bl	0 <coda_set_error>
    b1d4:	mvn	r3, #0
    b1d8:	b	b4c4 <coda_cursor_read_uint64_partial_array+0x430>
    b1dc:	ldr	r3, [pc, #772]	; b4e8 <coda_cursor_read_uint64_partial_array+0x454>
    b1e0:	ldr	r3, [pc, r3]
    b1e4:	bl	0 <__aeabi_read_tp>
    b1e8:	mov	r2, r0
    b1ec:	ldr	r3, [r2, r3]
    b1f0:	cmp	r3, #0
    b1f4:	beq	b290 <coda_cursor_read_uint64_partial_array+0x1fc>
    b1f8:	sub	r3, fp, #20
    b1fc:	mov	r1, r3
    b200:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b204:	bl	0 <coda_cursor_get_num_elements>
    b208:	mov	r3, r0
    b20c:	cmp	r3, #0
    b210:	beq	b21c <coda_cursor_read_uint64_partial_array+0x188>
    b214:	mvn	r3, #0
    b218:	b	b4c4 <coda_cursor_read_uint64_partial_array+0x430>
    b21c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    b220:	cmp	r3, #0
    b224:	blt	b238 <coda_cursor_read_uint64_partial_array+0x1a4>
    b228:	ldr	r3, [fp, #-20]	; 0xffffffec
    b22c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    b230:	cmp	r2, r3
    b234:	blt	b254 <coda_cursor_read_uint64_partial_array+0x1c0>
    b238:	ldr	r3, [fp, #-20]	; 0xffffffec
    b23c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    b240:	ldr	r1, [pc, #676]	; b4ec <coda_cursor_read_uint64_partial_array+0x458>
    b244:	mvn	r0, #106	; 0x6a
    b248:	bl	0 <coda_set_error>
    b24c:	mvn	r3, #0
    b250:	b	b4c4 <coda_cursor_read_uint64_partial_array+0x430>
    b254:	ldr	r2, [fp, #-28]	; 0xffffffe4
    b258:	ldr	r3, [fp, #-32]	; 0xffffffe0
    b25c:	add	r2, r2, r3
    b260:	ldr	r3, [fp, #-20]	; 0xffffffec
    b264:	cmp	r2, r3
    b268:	ble	b290 <coda_cursor_read_uint64_partial_array+0x1fc>
    b26c:	ldr	r3, [fp, #-20]	; 0xffffffec
    b270:	str	r3, [sp]
    b274:	ldr	r3, [fp, #-32]	; 0xffffffe0
    b278:	ldr	r2, [fp, #-28]	; 0xffffffe4
    b27c:	ldr	r1, [pc, #620]	; b4f0 <coda_cursor_read_uint64_partial_array+0x45c>
    b280:	mvn	r0, #106	; 0x6a
    b284:	bl	0 <coda_set_error>
    b288:	mvn	r3, #0
    b28c:	b	b4c4 <coda_cursor_read_uint64_partial_array+0x430>
    b290:	sub	r3, fp, #16
    b294:	mov	r1, r3
    b298:	ldr	r0, [fp, #-12]
    b29c:	bl	1080 <get_array_element_read_type>
    b2a0:	mov	r3, r0
    b2a4:	cmp	r3, #0
    b2a8:	beq	b2b4 <coda_cursor_read_uint64_partial_array+0x220>
    b2ac:	mvn	r3, #0
    b2b0:	b	b4c4 <coda_cursor_read_uint64_partial_array+0x430>
    b2b4:	ldr	r3, [fp, #-16]
    b2b8:	sub	r3, r3, #1
    b2bc:	cmp	r3, #6
    b2c0:	ldrls	pc, [pc, r3, lsl #2]
    b2c4:	b	b494 <coda_cursor_read_uint64_partial_array+0x400>
    b2c8:	.word	0x0000b2e4
    b2cc:	.word	0x0000b494
    b2d0:	.word	0x0000b364
    b2d4:	.word	0x0000b494
    b2d8:	.word	0x0000b3e8
    b2dc:	.word	0x0000b494
    b2e0:	.word	0x0000b46c
    b2e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    b2e8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    b2ec:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b2f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b2f4:	bl	3b30 <read_uint8_partial_array>
    b2f8:	mov	r3, r0
    b2fc:	cmp	r3, #0
    b300:	beq	b30c <coda_cursor_read_uint64_partial_array+0x278>
    b304:	mvn	r3, #0
    b308:	b	b4c4 <coda_cursor_read_uint64_partial_array+0x430>
    b30c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    b310:	sub	r3, r3, #1
    b314:	str	r3, [fp, #-8]
    b318:	b	b354 <coda_cursor_read_uint64_partial_array+0x2c0>
    b31c:	ldr	r3, [fp, #-8]
    b320:	lsl	r3, r3, #3
    b324:	ldr	r2, [fp, #-36]	; 0xffffffdc
    b328:	add	r1, r2, r3
    b32c:	ldr	r3, [fp, #-8]
    b330:	ldr	r2, [fp, #-36]	; 0xffffffdc
    b334:	add	r3, r2, r3
    b338:	ldrb	r3, [r3]
    b33c:	uxtb	r2, r3
    b340:	mov	r3, #0
    b344:	strd	r2, [r1]
    b348:	ldr	r3, [fp, #-8]
    b34c:	sub	r3, r3, #1
    b350:	str	r3, [fp, #-8]
    b354:	ldr	r3, [fp, #-8]
    b358:	cmp	r3, #0
    b35c:	bge	b31c <coda_cursor_read_uint64_partial_array+0x288>
    b360:	b	b4c0 <coda_cursor_read_uint64_partial_array+0x42c>
    b364:	ldr	r3, [fp, #-36]	; 0xffffffdc
    b368:	ldr	r2, [fp, #-32]	; 0xffffffe0
    b36c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b370:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b374:	bl	3de8 <read_uint16_partial_array>
    b378:	mov	r3, r0
    b37c:	cmp	r3, #0
    b380:	beq	b38c <coda_cursor_read_uint64_partial_array+0x2f8>
    b384:	mvn	r3, #0
    b388:	b	b4c4 <coda_cursor_read_uint64_partial_array+0x430>
    b38c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    b390:	sub	r3, r3, #1
    b394:	str	r3, [fp, #-8]
    b398:	b	b3d8 <coda_cursor_read_uint64_partial_array+0x344>
    b39c:	ldr	r3, [fp, #-8]
    b3a0:	lsl	r3, r3, #3
    b3a4:	ldr	r2, [fp, #-36]	; 0xffffffdc
    b3a8:	add	r1, r2, r3
    b3ac:	ldr	r3, [fp, #-8]
    b3b0:	lsl	r3, r3, #1
    b3b4:	ldr	r2, [fp, #-36]	; 0xffffffdc
    b3b8:	add	r3, r2, r3
    b3bc:	ldrh	r3, [r3]
    b3c0:	uxth	r2, r3
    b3c4:	mov	r3, #0
    b3c8:	strd	r2, [r1]
    b3cc:	ldr	r3, [fp, #-8]
    b3d0:	sub	r3, r3, #1
    b3d4:	str	r3, [fp, #-8]
    b3d8:	ldr	r3, [fp, #-8]
    b3dc:	cmp	r3, #0
    b3e0:	bge	b39c <coda_cursor_read_uint64_partial_array+0x308>
    b3e4:	b	b4c0 <coda_cursor_read_uint64_partial_array+0x42c>
    b3e8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    b3ec:	ldr	r2, [fp, #-32]	; 0xffffffe0
    b3f0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b3f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b3f8:	bl	40a0 <read_uint32_partial_array>
    b3fc:	mov	r3, r0
    b400:	cmp	r3, #0
    b404:	beq	b410 <coda_cursor_read_uint64_partial_array+0x37c>
    b408:	mvn	r3, #0
    b40c:	b	b4c4 <coda_cursor_read_uint64_partial_array+0x430>
    b410:	ldr	r3, [fp, #-32]	; 0xffffffe0
    b414:	sub	r3, r3, #1
    b418:	str	r3, [fp, #-8]
    b41c:	b	b45c <coda_cursor_read_uint64_partial_array+0x3c8>
    b420:	ldr	r3, [fp, #-8]
    b424:	lsl	r3, r3, #3
    b428:	ldr	r2, [fp, #-36]	; 0xffffffdc
    b42c:	add	r1, r2, r3
    b430:	ldr	r3, [fp, #-8]
    b434:	lsl	r3, r3, #2
    b438:	ldr	r2, [fp, #-36]	; 0xffffffdc
    b43c:	add	r3, r2, r3
    b440:	ldr	r3, [r3]
    b444:	mov	r2, r3
    b448:	mov	r3, #0
    b44c:	strd	r2, [r1]
    b450:	ldr	r3, [fp, #-8]
    b454:	sub	r3, r3, #1
    b458:	str	r3, [fp, #-8]
    b45c:	ldr	r3, [fp, #-8]
    b460:	cmp	r3, #0
    b464:	bge	b420 <coda_cursor_read_uint64_partial_array+0x38c>
    b468:	b	b4c0 <coda_cursor_read_uint64_partial_array+0x42c>
    b46c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    b470:	ldr	r2, [fp, #-32]	; 0xffffffe0
    b474:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b478:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b47c:	bl	4338 <read_uint64_partial_array>
    b480:	mov	r3, r0
    b484:	cmp	r3, #0
    b488:	beq	b4bc <coda_cursor_read_uint64_partial_array+0x428>
    b48c:	mvn	r3, #0
    b490:	b	b4c4 <coda_cursor_read_uint64_partial_array+0x430>
    b494:	ldr	r3, [fp, #-16]
    b498:	mov	r0, r3
    b49c:	bl	0 <coda_type_get_native_type_name>
    b4a0:	mov	r3, r0
    b4a4:	mov	r2, r3
    b4a8:	ldr	r1, [pc, #68]	; b4f4 <coda_cursor_read_uint64_partial_array+0x460>
    b4ac:	mvn	r0, #104	; 0x68
    b4b0:	bl	0 <coda_set_error>
    b4b4:	mvn	r3, #0
    b4b8:	b	b4c4 <coda_cursor_read_uint64_partial_array+0x430>
    b4bc:	nop			; (mov r0, r0)
    b4c0:	mov	r3, #0
    b4c4:	mov	r0, r3
    b4c8:	sub	sp, fp, #4
    b4cc:	pop	{fp, pc}
    b4d0:	.word	0x00001372
    b4d4:	.word	0x000000c8
    b4d8:	.word	0x00000118
    b4dc:	.word	0x00001377
    b4e0:	.word	0x00000138
    b4e4:	.word	0x00000480
    b4e8:	.word	0x00000300
    b4ec:	.word	0x000004b8
    b4f0:	.word	0x000004e8
    b4f4:	.word	0x000002a4

0000b4f8 <coda_cursor_read_float_partial_array>:
    b4f8:	push	{r4, fp, lr}
    b4fc:	add	fp, sp, #8
    b500:	sub	sp, sp, #68	; 0x44
    b504:	str	r0, [fp, #-56]	; 0xffffffc8
    b508:	str	r1, [fp, #-60]	; 0xffffffc4
    b50c:	str	r2, [fp, #-64]	; 0xffffffc0
    b510:	str	r3, [fp, #-68]	; 0xffffffbc
    b514:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b518:	cmp	r3, #0
    b51c:	beq	b554 <coda_cursor_read_float_partial_array+0x5c>
    b520:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b524:	ldr	r3, [r3, #4]
    b528:	cmp	r3, #0
    b52c:	ble	b554 <coda_cursor_read_float_partial_array+0x5c>
    b530:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b534:	ldr	r3, [r3, #4]
    b538:	sub	r3, r3, #1
    b53c:	ldr	r2, [fp, #-56]	; 0xffffffc8
    b540:	lsl	r3, r3, #4
    b544:	add	r3, r2, r3
    b548:	ldr	r3, [r3, #8]
    b54c:	cmp	r3, #0
    b550:	bne	b570 <coda_cursor_read_float_partial_array+0x78>
    b554:	ldr	r3, [pc, #2276]	; be40 <coda_cursor_read_float_partial_array+0x948>
    b558:	ldr	r2, [pc, #2276]	; be44 <coda_cursor_read_float_partial_array+0x94c>
    b55c:	ldr	r1, [pc, #2276]	; be48 <coda_cursor_read_float_partial_array+0x950>
    b560:	mvn	r0, #99	; 0x63
    b564:	bl	0 <coda_set_error>
    b568:	mvn	r3, #0
    b56c:	b	be34 <coda_cursor_read_float_partial_array+0x93c>
    b570:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b574:	cmp	r3, #0
    b578:	bne	b598 <coda_cursor_read_float_partial_array+0xa0>
    b57c:	ldr	r3, [pc, #2248]	; be4c <coda_cursor_read_float_partial_array+0x954>
    b580:	ldr	r2, [pc, #2236]	; be44 <coda_cursor_read_float_partial_array+0x94c>
    b584:	ldr	r1, [pc, #2244]	; be50 <coda_cursor_read_float_partial_array+0x958>
    b588:	mvn	r0, #99	; 0x63
    b58c:	bl	0 <coda_set_error>
    b590:	mvn	r3, #0
    b594:	b	be34 <coda_cursor_read_float_partial_array+0x93c>
    b598:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b59c:	ldr	r3, [r3, #4]
    b5a0:	sub	r3, r3, #1
    b5a4:	ldr	r2, [fp, #-56]	; 0xffffffc8
    b5a8:	lsl	r3, r3, #4
    b5ac:	add	r3, r2, r3
    b5b0:	ldr	r3, [r3, #8]
    b5b4:	ldr	r3, [r3]
    b5b8:	cmp	r3, #99	; 0x63
    b5bc:	bhi	b5e0 <coda_cursor_read_float_partial_array+0xe8>
    b5c0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b5c4:	ldr	r3, [r3, #4]
    b5c8:	sub	r3, r3, #1
    b5cc:	ldr	r2, [fp, #-56]	; 0xffffffc8
    b5d0:	lsl	r3, r3, #4
    b5d4:	add	r3, r2, r3
    b5d8:	ldr	r3, [r3, #8]
    b5dc:	b	b600 <coda_cursor_read_float_partial_array+0x108>
    b5e0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b5e4:	ldr	r3, [r3, #4]
    b5e8:	sub	r3, r3, #1
    b5ec:	ldr	r2, [fp, #-56]	; 0xffffffc8
    b5f0:	lsl	r3, r3, #4
    b5f4:	add	r3, r2, r3
    b5f8:	ldr	r3, [r3, #8]
    b5fc:	ldr	r3, [r3, #4]
    b600:	str	r3, [fp, #-20]	; 0xffffffec
    b604:	ldr	r3, [fp, #-20]	; 0xffffffec
    b608:	ldr	r3, [r3, #8]
    b60c:	cmp	r3, #1
    b610:	beq	b640 <coda_cursor_read_float_partial_array+0x148>
    b614:	ldr	r3, [fp, #-20]	; 0xffffffec
    b618:	ldr	r3, [r3, #8]
    b61c:	mov	r0, r3
    b620:	bl	0 <coda_type_get_class_name>
    b624:	mov	r3, r0
    b628:	mov	r2, r3
    b62c:	ldr	r1, [pc, #2080]	; be54 <coda_cursor_read_float_partial_array+0x95c>
    b630:	mvn	r0, #104	; 0x68
    b634:	bl	0 <coda_set_error>
    b638:	mvn	r3, #0
    b63c:	b	be34 <coda_cursor_read_float_partial_array+0x93c>
    b640:	ldr	r3, [pc, #2064]	; be58 <coda_cursor_read_float_partial_array+0x960>
    b644:	ldr	r3, [pc, r3]
    b648:	bl	0 <__aeabi_read_tp>
    b64c:	mov	r2, r0
    b650:	ldr	r3, [r2, r3]
    b654:	cmp	r3, #0
    b658:	beq	b6f4 <coda_cursor_read_float_partial_array+0x1fc>
    b65c:	sub	r3, fp, #48	; 0x30
    b660:	mov	r1, r3
    b664:	ldr	r0, [fp, #-56]	; 0xffffffc8
    b668:	bl	0 <coda_cursor_get_num_elements>
    b66c:	mov	r3, r0
    b670:	cmp	r3, #0
    b674:	beq	b680 <coda_cursor_read_float_partial_array+0x188>
    b678:	mvn	r3, #0
    b67c:	b	be34 <coda_cursor_read_float_partial_array+0x93c>
    b680:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b684:	cmp	r3, #0
    b688:	blt	b69c <coda_cursor_read_float_partial_array+0x1a4>
    b68c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    b690:	ldr	r2, [fp, #-60]	; 0xffffffc4
    b694:	cmp	r2, r3
    b698:	blt	b6b8 <coda_cursor_read_float_partial_array+0x1c0>
    b69c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    b6a0:	ldr	r2, [fp, #-60]	; 0xffffffc4
    b6a4:	ldr	r1, [pc, #1968]	; be5c <coda_cursor_read_float_partial_array+0x964>
    b6a8:	mvn	r0, #106	; 0x6a
    b6ac:	bl	0 <coda_set_error>
    b6b0:	mvn	r3, #0
    b6b4:	b	be34 <coda_cursor_read_float_partial_array+0x93c>
    b6b8:	ldr	r2, [fp, #-60]	; 0xffffffc4
    b6bc:	ldr	r3, [fp, #-64]	; 0xffffffc0
    b6c0:	add	r2, r2, r3
    b6c4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    b6c8:	cmp	r2, r3
    b6cc:	ble	b6f4 <coda_cursor_read_float_partial_array+0x1fc>
    b6d0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    b6d4:	str	r3, [sp]
    b6d8:	ldr	r3, [fp, #-64]	; 0xffffffc0
    b6dc:	ldr	r2, [fp, #-60]	; 0xffffffc4
    b6e0:	ldr	r1, [pc, #1912]	; be60 <coda_cursor_read_float_partial_array+0x968>
    b6e4:	mvn	r0, #106	; 0x6a
    b6e8:	bl	0 <coda_set_error>
    b6ec:	mvn	r3, #0
    b6f0:	b	be34 <coda_cursor_read_float_partial_array+0x93c>
    b6f4:	sub	r2, fp, #44	; 0x2c
    b6f8:	sub	r3, fp, #40	; 0x28
    b6fc:	mov	r1, r3
    b700:	ldr	r0, [fp, #-20]	; 0xffffffec
    b704:	bl	1120 <get_array_element_unconverted_read_type>
    b708:	mov	r3, r0
    b70c:	cmp	r3, #0
    b710:	beq	b71c <coda_cursor_read_float_partial_array+0x224>
    b714:	mvn	r3, #0
    b718:	b	be34 <coda_cursor_read_float_partial_array+0x93c>
    b71c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    b720:	cmp	r3, #0
    b724:	beq	b800 <coda_cursor_read_float_partial_array+0x308>
    b728:	ldr	r3, [fp, #-64]	; 0xffffffc0
    b72c:	lsl	r3, r3, #3
    b730:	mov	r0, r3
    b734:	bl	0 <malloc>
    b738:	mov	r3, r0
    b73c:	str	r3, [fp, #-24]	; 0xffffffe8
    b740:	ldr	r3, [fp, #-24]	; 0xffffffe8
    b744:	cmp	r3, #0
    b748:	bne	b76c <coda_cursor_read_float_partial_array+0x274>
    b74c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    b750:	lsl	r3, r3, #3
    b754:	mov	r2, r3
    b758:	ldr	r1, [pc, #1796]	; be64 <coda_cursor_read_float_partial_array+0x96c>
    b75c:	mvn	r0, #0
    b760:	bl	0 <coda_set_error>
    b764:	mvn	r3, #0
    b768:	b	be34 <coda_cursor_read_float_partial_array+0x93c>
    b76c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    b770:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b774:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b778:	ldr	r0, [fp, #-56]	; 0xffffffc8
    b77c:	bl	be6c <coda_cursor_read_double_partial_array>
    b780:	mov	r3, r0
    b784:	cmp	r3, #0
    b788:	beq	b79c <coda_cursor_read_float_partial_array+0x2a4>
    b78c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b790:	bl	0 <free>
    b794:	mvn	r3, #0
    b798:	b	be34 <coda_cursor_read_float_partial_array+0x93c>
    b79c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    b7a0:	sub	r3, r3, #1
    b7a4:	str	r3, [fp, #-16]
    b7a8:	b	b7e4 <coda_cursor_read_float_partial_array+0x2ec>
    b7ac:	ldr	r3, [fp, #-16]
    b7b0:	lsl	r3, r3, #2
    b7b4:	ldr	r2, [fp, #-68]	; 0xffffffbc
    b7b8:	add	r3, r2, r3
    b7bc:	ldr	r2, [fp, #-16]
    b7c0:	lsl	r2, r2, #3
    b7c4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    b7c8:	add	r2, r1, r2
    b7cc:	vldr	d7, [r2]
    b7d0:	vcvt.f32.f64	s15, d7
    b7d4:	vstr	s15, [r3]
    b7d8:	ldr	r3, [fp, #-16]
    b7dc:	sub	r3, r3, #1
    b7e0:	str	r3, [fp, #-16]
    b7e4:	ldr	r3, [fp, #-16]
    b7e8:	cmp	r3, #0
    b7ec:	bge	b7ac <coda_cursor_read_float_partial_array+0x2b4>
    b7f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b7f4:	bl	0 <free>
    b7f8:	mov	r3, #0
    b7fc:	b	be34 <coda_cursor_read_float_partial_array+0x93c>
    b800:	ldr	r3, [fp, #-40]	; 0xffffffd8
    b804:	cmp	r3, #9
    b808:	ldrls	pc, [pc, r3, lsl #2]
    b80c:	b	be04 <coda_cursor_read_float_partial_array+0x90c>
    b810:	.word	0x0000b838
    b814:	.word	0x0000b8b8
    b818:	.word	0x0000b938
    b81c:	.word	0x0000b9bc
    b820:	.word	0x0000ba40
    b824:	.word	0x0000bac4
    b828:	.word	0x0000bb48
    b82c:	.word	0x0000bc28
    b830:	.word	0x0000bd08
    b834:	.word	0x0000bd30
    b838:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b83c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b840:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b844:	ldr	r0, [fp, #-56]	; 0xffffffc8
    b848:	bl	39c8 <read_int8_partial_array>
    b84c:	mov	r3, r0
    b850:	cmp	r3, #0
    b854:	beq	b860 <coda_cursor_read_float_partial_array+0x368>
    b858:	mvn	r3, #0
    b85c:	b	be34 <coda_cursor_read_float_partial_array+0x93c>
    b860:	ldr	r3, [fp, #-64]	; 0xffffffc0
    b864:	sub	r3, r3, #1
    b868:	str	r3, [fp, #-16]
    b86c:	b	b8a8 <coda_cursor_read_float_partial_array+0x3b0>
    b870:	ldr	r3, [fp, #-16]
    b874:	lsl	r3, r3, #2
    b878:	ldr	r2, [fp, #-68]	; 0xffffffbc
    b87c:	add	r3, r2, r3
    b880:	ldr	r2, [fp, #-16]
    b884:	ldr	r1, [fp, #-68]	; 0xffffffbc
    b888:	add	r2, r1, r2
    b88c:	ldrsb	r2, [r2]
    b890:	vmov	s15, r2
    b894:	vcvt.f32.s32	s15, s15
    b898:	vstr	s15, [r3]
    b89c:	ldr	r3, [fp, #-16]
    b8a0:	sub	r3, r3, #1
    b8a4:	str	r3, [fp, #-16]
    b8a8:	ldr	r3, [fp, #-16]
    b8ac:	cmp	r3, #0
    b8b0:	bge	b870 <coda_cursor_read_float_partial_array+0x378>
    b8b4:	b	be30 <coda_cursor_read_float_partial_array+0x938>
    b8b8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b8bc:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b8c0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b8c4:	ldr	r0, [fp, #-56]	; 0xffffffc8
    b8c8:	bl	3b30 <read_uint8_partial_array>
    b8cc:	mov	r3, r0
    b8d0:	cmp	r3, #0
    b8d4:	beq	b8e0 <coda_cursor_read_float_partial_array+0x3e8>
    b8d8:	mvn	r3, #0
    b8dc:	b	be34 <coda_cursor_read_float_partial_array+0x93c>
    b8e0:	ldr	r3, [fp, #-64]	; 0xffffffc0
    b8e4:	sub	r3, r3, #1
    b8e8:	str	r3, [fp, #-16]
    b8ec:	b	b928 <coda_cursor_read_float_partial_array+0x430>
    b8f0:	ldr	r3, [fp, #-16]
    b8f4:	lsl	r3, r3, #2
    b8f8:	ldr	r2, [fp, #-68]	; 0xffffffbc
    b8fc:	add	r3, r2, r3
    b900:	ldr	r2, [fp, #-16]
    b904:	ldr	r1, [fp, #-68]	; 0xffffffbc
    b908:	add	r2, r1, r2
    b90c:	ldrb	r2, [r2]
    b910:	vmov	s15, r2
    b914:	vcvt.f32.u32	s15, s15
    b918:	vstr	s15, [r3]
    b91c:	ldr	r3, [fp, #-16]
    b920:	sub	r3, r3, #1
    b924:	str	r3, [fp, #-16]
    b928:	ldr	r3, [fp, #-16]
    b92c:	cmp	r3, #0
    b930:	bge	b8f0 <coda_cursor_read_float_partial_array+0x3f8>
    b934:	b	be30 <coda_cursor_read_float_partial_array+0x938>
    b938:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b93c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b940:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b944:	ldr	r0, [fp, #-56]	; 0xffffffc8
    b948:	bl	3c7c <read_int16_partial_array>
    b94c:	mov	r3, r0
    b950:	cmp	r3, #0
    b954:	beq	b960 <coda_cursor_read_float_partial_array+0x468>
    b958:	mvn	r3, #0
    b95c:	b	be34 <coda_cursor_read_float_partial_array+0x93c>
    b960:	ldr	r3, [fp, #-64]	; 0xffffffc0
    b964:	sub	r3, r3, #1
    b968:	str	r3, [fp, #-16]
    b96c:	b	b9ac <coda_cursor_read_float_partial_array+0x4b4>
    b970:	ldr	r3, [fp, #-16]
    b974:	lsl	r3, r3, #2
    b978:	ldr	r2, [fp, #-68]	; 0xffffffbc
    b97c:	add	r3, r2, r3
    b980:	ldr	r2, [fp, #-16]
    b984:	lsl	r2, r2, #1
    b988:	ldr	r1, [fp, #-68]	; 0xffffffbc
    b98c:	add	r2, r1, r2
    b990:	ldrsh	r2, [r2]
    b994:	vmov	s15, r2
    b998:	vcvt.f32.s32	s15, s15
    b99c:	vstr	s15, [r3]
    b9a0:	ldr	r3, [fp, #-16]
    b9a4:	sub	r3, r3, #1
    b9a8:	str	r3, [fp, #-16]
    b9ac:	ldr	r3, [fp, #-16]
    b9b0:	cmp	r3, #0
    b9b4:	bge	b970 <coda_cursor_read_float_partial_array+0x478>
    b9b8:	b	be30 <coda_cursor_read_float_partial_array+0x938>
    b9bc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b9c0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b9c4:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b9c8:	ldr	r0, [fp, #-56]	; 0xffffffc8
    b9cc:	bl	3de8 <read_uint16_partial_array>
    b9d0:	mov	r3, r0
    b9d4:	cmp	r3, #0
    b9d8:	beq	b9e4 <coda_cursor_read_float_partial_array+0x4ec>
    b9dc:	mvn	r3, #0
    b9e0:	b	be34 <coda_cursor_read_float_partial_array+0x93c>
    b9e4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    b9e8:	sub	r3, r3, #1
    b9ec:	str	r3, [fp, #-16]
    b9f0:	b	ba30 <coda_cursor_read_float_partial_array+0x538>
    b9f4:	ldr	r3, [fp, #-16]
    b9f8:	lsl	r3, r3, #2
    b9fc:	ldr	r2, [fp, #-68]	; 0xffffffbc
    ba00:	add	r3, r2, r3
    ba04:	ldr	r2, [fp, #-16]
    ba08:	lsl	r2, r2, #1
    ba0c:	ldr	r1, [fp, #-68]	; 0xffffffbc
    ba10:	add	r2, r1, r2
    ba14:	ldrh	r2, [r2]
    ba18:	vmov	s15, r2
    ba1c:	vcvt.f32.u32	s15, s15
    ba20:	vstr	s15, [r3]
    ba24:	ldr	r3, [fp, #-16]
    ba28:	sub	r3, r3, #1
    ba2c:	str	r3, [fp, #-16]
    ba30:	ldr	r3, [fp, #-16]
    ba34:	cmp	r3, #0
    ba38:	bge	b9f4 <coda_cursor_read_float_partial_array+0x4fc>
    ba3c:	b	be30 <coda_cursor_read_float_partial_array+0x938>
    ba40:	ldr	r3, [fp, #-68]	; 0xffffffbc
    ba44:	ldr	r2, [fp, #-64]	; 0xffffffc0
    ba48:	ldr	r1, [fp, #-60]	; 0xffffffc4
    ba4c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    ba50:	bl	3f34 <read_int32_partial_array>
    ba54:	mov	r3, r0
    ba58:	cmp	r3, #0
    ba5c:	beq	ba68 <coda_cursor_read_float_partial_array+0x570>
    ba60:	mvn	r3, #0
    ba64:	b	be34 <coda_cursor_read_float_partial_array+0x93c>
    ba68:	ldr	r3, [fp, #-64]	; 0xffffffc0
    ba6c:	sub	r3, r3, #1
    ba70:	str	r3, [fp, #-16]
    ba74:	b	bab4 <coda_cursor_read_float_partial_array+0x5bc>
    ba78:	ldr	r3, [fp, #-16]
    ba7c:	lsl	r3, r3, #2
    ba80:	ldr	r2, [fp, #-68]	; 0xffffffbc
    ba84:	add	r3, r2, r3
    ba88:	ldr	r2, [fp, #-16]
    ba8c:	lsl	r2, r2, #2
    ba90:	ldr	r1, [fp, #-68]	; 0xffffffbc
    ba94:	add	r2, r1, r2
    ba98:	ldr	r2, [r2]
    ba9c:	vmov	s15, r2
    baa0:	vcvt.f32.s32	s15, s15
    baa4:	vstr	s15, [r3]
    baa8:	ldr	r3, [fp, #-16]
    baac:	sub	r3, r3, #1
    bab0:	str	r3, [fp, #-16]
    bab4:	ldr	r3, [fp, #-16]
    bab8:	cmp	r3, #0
    babc:	bge	ba78 <coda_cursor_read_float_partial_array+0x580>
    bac0:	b	be30 <coda_cursor_read_float_partial_array+0x938>
    bac4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bac8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bacc:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bad0:	ldr	r0, [fp, #-56]	; 0xffffffc8
    bad4:	bl	40a0 <read_uint32_partial_array>
    bad8:	mov	r3, r0
    badc:	cmp	r3, #0
    bae0:	beq	baec <coda_cursor_read_float_partial_array+0x5f4>
    bae4:	mvn	r3, #0
    bae8:	b	be34 <coda_cursor_read_float_partial_array+0x93c>
    baec:	ldr	r3, [fp, #-64]	; 0xffffffc0
    baf0:	sub	r3, r3, #1
    baf4:	str	r3, [fp, #-16]
    baf8:	b	bb38 <coda_cursor_read_float_partial_array+0x640>
    bafc:	ldr	r3, [fp, #-16]
    bb00:	lsl	r3, r3, #2
    bb04:	ldr	r2, [fp, #-68]	; 0xffffffbc
    bb08:	add	r3, r2, r3
    bb0c:	ldr	r2, [fp, #-16]
    bb10:	lsl	r2, r2, #2
    bb14:	ldr	r1, [fp, #-68]	; 0xffffffbc
    bb18:	add	r2, r1, r2
    bb1c:	ldr	r2, [r2]
    bb20:	vmov	s15, r2
    bb24:	vcvt.f32.u32	s15, s15
    bb28:	vstr	s15, [r3]
    bb2c:	ldr	r3, [fp, #-16]
    bb30:	sub	r3, r3, #1
    bb34:	str	r3, [fp, #-16]
    bb38:	ldr	r3, [fp, #-16]
    bb3c:	cmp	r3, #0
    bb40:	bge	bafc <coda_cursor_read_float_partial_array+0x604>
    bb44:	b	be30 <coda_cursor_read_float_partial_array+0x938>
    bb48:	ldr	r3, [fp, #-64]	; 0xffffffc0
    bb4c:	lsl	r3, r3, #3
    bb50:	mov	r0, r3
    bb54:	bl	0 <malloc>
    bb58:	mov	r3, r0
    bb5c:	str	r3, [fp, #-28]	; 0xffffffe4
    bb60:	ldr	r3, [fp, #-28]	; 0xffffffe4
    bb64:	cmp	r3, #0
    bb68:	bne	bb8c <coda_cursor_read_float_partial_array+0x694>
    bb6c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    bb70:	lsl	r3, r3, #3
    bb74:	mov	r2, r3
    bb78:	ldr	r1, [pc, #740]	; be64 <coda_cursor_read_float_partial_array+0x96c>
    bb7c:	mvn	r0, #0
    bb80:	bl	0 <coda_set_error>
    bb84:	mvn	r3, #0
    bb88:	b	be34 <coda_cursor_read_float_partial_array+0x93c>
    bb8c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    bb90:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bb94:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bb98:	ldr	r0, [fp, #-56]	; 0xffffffc8
    bb9c:	bl	41ec <read_int64_partial_array>
    bba0:	mov	r3, r0
    bba4:	cmp	r3, #0
    bba8:	beq	bbbc <coda_cursor_read_float_partial_array+0x6c4>
    bbac:	ldr	r0, [fp, #-28]	; 0xffffffe4
    bbb0:	bl	0 <free>
    bbb4:	mvn	r3, #0
    bbb8:	b	be34 <coda_cursor_read_float_partial_array+0x93c>
    bbbc:	ldr	r3, [fp, #-64]	; 0xffffffc0
    bbc0:	sub	r3, r3, #1
    bbc4:	str	r3, [fp, #-16]
    bbc8:	b	bc10 <coda_cursor_read_float_partial_array+0x718>
    bbcc:	ldr	r3, [fp, #-16]
    bbd0:	lsl	r3, r3, #2
    bbd4:	ldr	r2, [fp, #-68]	; 0xffffffbc
    bbd8:	add	r4, r2, r3
    bbdc:	ldr	r3, [fp, #-16]
    bbe0:	lsl	r3, r3, #3
    bbe4:	ldr	r2, [fp, #-28]	; 0xffffffe4
    bbe8:	add	r3, r2, r3
    bbec:	ldrd	r2, [r3]
    bbf0:	mov	r0, r2
    bbf4:	mov	r1, r3
    bbf8:	bl	0 <__aeabi_l2f>
    bbfc:	mov	r3, r0
    bc00:	str	r3, [r4]
    bc04:	ldr	r3, [fp, #-16]
    bc08:	sub	r3, r3, #1
    bc0c:	str	r3, [fp, #-16]
    bc10:	ldr	r3, [fp, #-16]
    bc14:	cmp	r3, #0
    bc18:	bge	bbcc <coda_cursor_read_float_partial_array+0x6d4>
    bc1c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    bc20:	bl	0 <free>
    bc24:	b	be30 <coda_cursor_read_float_partial_array+0x938>
    bc28:	ldr	r3, [fp, #-64]	; 0xffffffc0
    bc2c:	lsl	r3, r3, #3
    bc30:	mov	r0, r3
    bc34:	bl	0 <malloc>
    bc38:	mov	r3, r0
    bc3c:	str	r3, [fp, #-32]	; 0xffffffe0
    bc40:	ldr	r3, [fp, #-32]	; 0xffffffe0
    bc44:	cmp	r3, #0
    bc48:	bne	bc6c <coda_cursor_read_float_partial_array+0x774>
    bc4c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    bc50:	lsl	r3, r3, #3
    bc54:	mov	r2, r3
    bc58:	ldr	r1, [pc, #516]	; be64 <coda_cursor_read_float_partial_array+0x96c>
    bc5c:	mvn	r0, #0
    bc60:	bl	0 <coda_set_error>
    bc64:	mvn	r3, #0
    bc68:	b	be34 <coda_cursor_read_float_partial_array+0x93c>
    bc6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    bc70:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bc74:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bc78:	ldr	r0, [fp, #-56]	; 0xffffffc8
    bc7c:	bl	4338 <read_uint64_partial_array>
    bc80:	mov	r3, r0
    bc84:	cmp	r3, #0
    bc88:	beq	bc9c <coda_cursor_read_float_partial_array+0x7a4>
    bc8c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    bc90:	bl	0 <free>
    bc94:	mvn	r3, #0
    bc98:	b	be34 <coda_cursor_read_float_partial_array+0x93c>
    bc9c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    bca0:	sub	r3, r3, #1
    bca4:	str	r3, [fp, #-16]
    bca8:	b	bcf0 <coda_cursor_read_float_partial_array+0x7f8>
    bcac:	ldr	r3, [fp, #-16]
    bcb0:	lsl	r3, r3, #2
    bcb4:	ldr	r2, [fp, #-68]	; 0xffffffbc
    bcb8:	add	r4, r2, r3
    bcbc:	ldr	r3, [fp, #-16]
    bcc0:	lsl	r3, r3, #3
    bcc4:	ldr	r2, [fp, #-32]	; 0xffffffe0
    bcc8:	add	r3, r2, r3
    bccc:	ldrd	r2, [r3]
    bcd0:	mov	r0, r2
    bcd4:	mov	r1, r3
    bcd8:	bl	0 <__aeabi_ul2f>
    bcdc:	mov	r3, r0
    bce0:	str	r3, [r4]
    bce4:	ldr	r3, [fp, #-16]
    bce8:	sub	r3, r3, #1
    bcec:	str	r3, [fp, #-16]
    bcf0:	ldr	r3, [fp, #-16]
    bcf4:	cmp	r3, #0
    bcf8:	bge	bcac <coda_cursor_read_float_partial_array+0x7b4>
    bcfc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    bd00:	bl	0 <free>
    bd04:	b	be30 <coda_cursor_read_float_partial_array+0x938>
    bd08:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bd0c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bd10:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bd14:	ldr	r0, [fp, #-56]	; 0xffffffc8
    bd18:	bl	4460 <read_float_partial_array>
    bd1c:	mov	r3, r0
    bd20:	cmp	r3, #0
    bd24:	beq	be2c <coda_cursor_read_float_partial_array+0x934>
    bd28:	mvn	r3, #0
    bd2c:	b	be34 <coda_cursor_read_float_partial_array+0x93c>
    bd30:	ldr	r3, [fp, #-64]	; 0xffffffc0
    bd34:	lsl	r3, r3, #3
    bd38:	mov	r0, r3
    bd3c:	bl	0 <malloc>
    bd40:	mov	r3, r0
    bd44:	str	r3, [fp, #-36]	; 0xffffffdc
    bd48:	ldr	r3, [fp, #-36]	; 0xffffffdc
    bd4c:	cmp	r3, #0
    bd50:	bne	bd74 <coda_cursor_read_float_partial_array+0x87c>
    bd54:	ldr	r3, [fp, #-64]	; 0xffffffc0
    bd58:	lsl	r3, r3, #3
    bd5c:	mov	r2, r3
    bd60:	ldr	r1, [pc, #252]	; be64 <coda_cursor_read_float_partial_array+0x96c>
    bd64:	mvn	r0, #0
    bd68:	bl	0 <coda_set_error>
    bd6c:	mvn	r3, #0
    bd70:	b	be34 <coda_cursor_read_float_partial_array+0x93c>
    bd74:	ldr	r3, [fp, #-36]	; 0xffffffdc
    bd78:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bd7c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bd80:	ldr	r0, [fp, #-56]	; 0xffffffc8
    bd84:	bl	45ec <read_double_partial_array>
    bd88:	mov	r3, r0
    bd8c:	cmp	r3, #0
    bd90:	beq	bda4 <coda_cursor_read_float_partial_array+0x8ac>
    bd94:	ldr	r0, [fp, #-36]	; 0xffffffdc
    bd98:	bl	0 <free>
    bd9c:	mvn	r3, #0
    bda0:	b	be34 <coda_cursor_read_float_partial_array+0x93c>
    bda4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    bda8:	sub	r3, r3, #1
    bdac:	str	r3, [fp, #-16]
    bdb0:	b	bdec <coda_cursor_read_float_partial_array+0x8f4>
    bdb4:	ldr	r3, [fp, #-16]
    bdb8:	lsl	r3, r3, #2
    bdbc:	ldr	r2, [fp, #-68]	; 0xffffffbc
    bdc0:	add	r3, r2, r3
    bdc4:	ldr	r2, [fp, #-16]
    bdc8:	lsl	r2, r2, #3
    bdcc:	ldr	r1, [fp, #-36]	; 0xffffffdc
    bdd0:	add	r2, r1, r2
    bdd4:	vldr	d7, [r2]
    bdd8:	vcvt.f32.f64	s15, d7
    bddc:	vstr	s15, [r3]
    bde0:	ldr	r3, [fp, #-16]
    bde4:	sub	r3, r3, #1
    bde8:	str	r3, [fp, #-16]
    bdec:	ldr	r3, [fp, #-16]
    bdf0:	cmp	r3, #0
    bdf4:	bge	bdb4 <coda_cursor_read_float_partial_array+0x8bc>
    bdf8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    bdfc:	bl	0 <free>
    be00:	b	be30 <coda_cursor_read_float_partial_array+0x938>
    be04:	ldr	r3, [fp, #-40]	; 0xffffffd8
    be08:	mov	r0, r3
    be0c:	bl	0 <coda_type_get_native_type_name>
    be10:	mov	r3, r0
    be14:	mov	r2, r3
    be18:	ldr	r1, [pc, #72]	; be68 <coda_cursor_read_float_partial_array+0x970>
    be1c:	mvn	r0, #104	; 0x68
    be20:	bl	0 <coda_set_error>
    be24:	mvn	r3, #0
    be28:	b	be34 <coda_cursor_read_float_partial_array+0x93c>
    be2c:	nop			; (mov r0, r0)
    be30:	mov	r3, #0
    be34:	mov	r0, r3
    be38:	sub	sp, fp, #8
    be3c:	pop	{r4, fp, pc}
    be40:	.word	0x000013f1
    be44:	.word	0x000000c8
    be48:	.word	0x00000118
    be4c:	.word	0x000013f6
    be50:	.word	0x00000138
    be54:	.word	0x00000480
    be58:	.word	0x0000080c
    be5c:	.word	0x000004b8
    be60:	.word	0x000004e8
    be64:	.word	0x00000528
    be68:	.word	0x000002d4

0000be6c <coda_cursor_read_double_partial_array>:
    be6c:	push	{r4, fp, lr}
    be70:	add	fp, sp, #8
    be74:	sub	sp, sp, #52	; 0x34
    be78:	str	r0, [fp, #-40]	; 0xffffffd8
    be7c:	str	r1, [fp, #-44]	; 0xffffffd4
    be80:	str	r2, [fp, #-48]	; 0xffffffd0
    be84:	str	r3, [fp, #-52]	; 0xffffffcc
    be88:	ldr	r3, [fp, #-40]	; 0xffffffd8
    be8c:	cmp	r3, #0
    be90:	beq	bec8 <coda_cursor_read_double_partial_array+0x5c>
    be94:	ldr	r3, [fp, #-40]	; 0xffffffd8
    be98:	ldr	r3, [r3, #4]
    be9c:	cmp	r3, #0
    bea0:	ble	bec8 <coda_cursor_read_double_partial_array+0x5c>
    bea4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    bea8:	ldr	r3, [r3, #4]
    beac:	sub	r3, r3, #1
    beb0:	ldr	r2, [fp, #-40]	; 0xffffffd8
    beb4:	lsl	r3, r3, #4
    beb8:	add	r3, r2, r3
    bebc:	ldr	r3, [r3, #8]
    bec0:	cmp	r3, #0
    bec4:	bne	bee4 <coda_cursor_read_double_partial_array+0x78>
    bec8:	ldr	r3, [pc, #2004]	; c6a4 <coda_cursor_read_double_partial_array+0x838>
    becc:	ldr	r2, [pc, #2004]	; c6a8 <coda_cursor_read_double_partial_array+0x83c>
    bed0:	ldr	r1, [pc, #2004]	; c6ac <coda_cursor_read_double_partial_array+0x840>
    bed4:	mvn	r0, #99	; 0x63
    bed8:	bl	0 <coda_set_error>
    bedc:	mvn	r3, #0
    bee0:	b	c698 <coda_cursor_read_double_partial_array+0x82c>
    bee4:	ldr	r3, [fp, #-52]	; 0xffffffcc
    bee8:	cmp	r3, #0
    beec:	bne	bf0c <coda_cursor_read_double_partial_array+0xa0>
    bef0:	ldr	r3, [pc, #1976]	; c6b0 <coda_cursor_read_double_partial_array+0x844>
    bef4:	ldr	r2, [pc, #1964]	; c6a8 <coda_cursor_read_double_partial_array+0x83c>
    bef8:	ldr	r1, [pc, #1972]	; c6b4 <coda_cursor_read_double_partial_array+0x848>
    befc:	mvn	r0, #99	; 0x63
    bf00:	bl	0 <coda_set_error>
    bf04:	mvn	r3, #0
    bf08:	b	c698 <coda_cursor_read_double_partial_array+0x82c>
    bf0c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    bf10:	ldr	r3, [r3, #4]
    bf14:	sub	r3, r3, #1
    bf18:	ldr	r2, [fp, #-40]	; 0xffffffd8
    bf1c:	lsl	r3, r3, #4
    bf20:	add	r3, r2, r3
    bf24:	ldr	r3, [r3, #8]
    bf28:	ldr	r3, [r3]
    bf2c:	cmp	r3, #99	; 0x63
    bf30:	bhi	bf54 <coda_cursor_read_double_partial_array+0xe8>
    bf34:	ldr	r3, [fp, #-40]	; 0xffffffd8
    bf38:	ldr	r3, [r3, #4]
    bf3c:	sub	r3, r3, #1
    bf40:	ldr	r2, [fp, #-40]	; 0xffffffd8
    bf44:	lsl	r3, r3, #4
    bf48:	add	r3, r2, r3
    bf4c:	ldr	r3, [r3, #8]
    bf50:	b	bf74 <coda_cursor_read_double_partial_array+0x108>
    bf54:	ldr	r3, [fp, #-40]	; 0xffffffd8
    bf58:	ldr	r3, [r3, #4]
    bf5c:	sub	r3, r3, #1
    bf60:	ldr	r2, [fp, #-40]	; 0xffffffd8
    bf64:	lsl	r3, r3, #4
    bf68:	add	r3, r2, r3
    bf6c:	ldr	r3, [r3, #8]
    bf70:	ldr	r3, [r3, #4]
    bf74:	str	r3, [fp, #-20]	; 0xffffffec
    bf78:	ldr	r3, [fp, #-20]	; 0xffffffec
    bf7c:	ldr	r3, [r3, #8]
    bf80:	cmp	r3, #1
    bf84:	beq	bfb4 <coda_cursor_read_double_partial_array+0x148>
    bf88:	ldr	r3, [fp, #-20]	; 0xffffffec
    bf8c:	ldr	r3, [r3, #8]
    bf90:	mov	r0, r3
    bf94:	bl	0 <coda_type_get_class_name>
    bf98:	mov	r3, r0
    bf9c:	mov	r2, r3
    bfa0:	ldr	r1, [pc, #1808]	; c6b8 <coda_cursor_read_double_partial_array+0x84c>
    bfa4:	mvn	r0, #104	; 0x68
    bfa8:	bl	0 <coda_set_error>
    bfac:	mvn	r3, #0
    bfb0:	b	c698 <coda_cursor_read_double_partial_array+0x82c>
    bfb4:	ldr	r3, [pc, #1792]	; c6bc <coda_cursor_read_double_partial_array+0x850>
    bfb8:	ldr	r3, [pc, r3]
    bfbc:	bl	0 <__aeabi_read_tp>
    bfc0:	mov	r2, r0
    bfc4:	ldr	r3, [r2, r3]
    bfc8:	cmp	r3, #0
    bfcc:	beq	c068 <coda_cursor_read_double_partial_array+0x1fc>
    bfd0:	sub	r3, fp, #32
    bfd4:	mov	r1, r3
    bfd8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    bfdc:	bl	0 <coda_cursor_get_num_elements>
    bfe0:	mov	r3, r0
    bfe4:	cmp	r3, #0
    bfe8:	beq	bff4 <coda_cursor_read_double_partial_array+0x188>
    bfec:	mvn	r3, #0
    bff0:	b	c698 <coda_cursor_read_double_partial_array+0x82c>
    bff4:	ldr	r3, [fp, #-44]	; 0xffffffd4
    bff8:	cmp	r3, #0
    bffc:	blt	c010 <coda_cursor_read_double_partial_array+0x1a4>
    c000:	ldr	r3, [fp, #-32]	; 0xffffffe0
    c004:	ldr	r2, [fp, #-44]	; 0xffffffd4
    c008:	cmp	r2, r3
    c00c:	blt	c02c <coda_cursor_read_double_partial_array+0x1c0>
    c010:	ldr	r3, [fp, #-32]	; 0xffffffe0
    c014:	ldr	r2, [fp, #-44]	; 0xffffffd4
    c018:	ldr	r1, [pc, #1696]	; c6c0 <coda_cursor_read_double_partial_array+0x854>
    c01c:	mvn	r0, #106	; 0x6a
    c020:	bl	0 <coda_set_error>
    c024:	mvn	r3, #0
    c028:	b	c698 <coda_cursor_read_double_partial_array+0x82c>
    c02c:	ldr	r2, [fp, #-44]	; 0xffffffd4
    c030:	ldr	r3, [fp, #-48]	; 0xffffffd0
    c034:	add	r2, r2, r3
    c038:	ldr	r3, [fp, #-32]	; 0xffffffe0
    c03c:	cmp	r2, r3
    c040:	ble	c068 <coda_cursor_read_double_partial_array+0x1fc>
    c044:	ldr	r3, [fp, #-32]	; 0xffffffe0
    c048:	str	r3, [sp]
    c04c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    c050:	ldr	r2, [fp, #-44]	; 0xffffffd4
    c054:	ldr	r1, [pc, #1640]	; c6c4 <coda_cursor_read_double_partial_array+0x858>
    c058:	mvn	r0, #106	; 0x6a
    c05c:	bl	0 <coda_set_error>
    c060:	mvn	r3, #0
    c064:	b	c698 <coda_cursor_read_double_partial_array+0x82c>
    c068:	sub	r2, fp, #28
    c06c:	sub	r3, fp, #24
    c070:	mov	r1, r3
    c074:	ldr	r0, [fp, #-20]	; 0xffffffec
    c078:	bl	1120 <get_array_element_unconverted_read_type>
    c07c:	mov	r3, r0
    c080:	cmp	r3, #0
    c084:	beq	c090 <coda_cursor_read_double_partial_array+0x224>
    c088:	mvn	r3, #0
    c08c:	b	c698 <coda_cursor_read_double_partial_array+0x82c>
    c090:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c094:	cmp	r3, #9
    c098:	ldrls	pc, [pc, r3, lsl #2]
    c09c:	b	c5a0 <coda_cursor_read_double_partial_array+0x734>
    c0a0:	.word	0x0000c0c8
    c0a4:	.word	0x0000c148
    c0a8:	.word	0x0000c1c8
    c0ac:	.word	0x0000c24c
    c0b0:	.word	0x0000c2d0
    c0b4:	.word	0x0000c354
    c0b8:	.word	0x0000c3d8
    c0bc:	.word	0x0000c468
    c0c0:	.word	0x0000c4f8
    c0c4:	.word	0x0000c578
    c0c8:	ldr	r3, [fp, #-52]	; 0xffffffcc
    c0cc:	ldr	r2, [fp, #-48]	; 0xffffffd0
    c0d0:	ldr	r1, [fp, #-44]	; 0xffffffd4
    c0d4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    c0d8:	bl	39c8 <read_int8_partial_array>
    c0dc:	mov	r3, r0
    c0e0:	cmp	r3, #0
    c0e4:	beq	c0f0 <coda_cursor_read_double_partial_array+0x284>
    c0e8:	mvn	r3, #0
    c0ec:	b	c698 <coda_cursor_read_double_partial_array+0x82c>
    c0f0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    c0f4:	sub	r3, r3, #1
    c0f8:	str	r3, [fp, #-16]
    c0fc:	b	c138 <coda_cursor_read_double_partial_array+0x2cc>
    c100:	ldr	r3, [fp, #-16]
    c104:	lsl	r3, r3, #3
    c108:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c10c:	add	r3, r2, r3
    c110:	ldr	r2, [fp, #-16]
    c114:	ldr	r1, [fp, #-52]	; 0xffffffcc
    c118:	add	r2, r1, r2
    c11c:	ldrsb	r2, [r2]
    c120:	vmov	s15, r2
    c124:	vcvt.f64.s32	d7, s15
    c128:	vstr	d7, [r3]
    c12c:	ldr	r3, [fp, #-16]
    c130:	sub	r3, r3, #1
    c134:	str	r3, [fp, #-16]
    c138:	ldr	r3, [fp, #-16]
    c13c:	cmp	r3, #0
    c140:	bge	c100 <coda_cursor_read_double_partial_array+0x294>
    c144:	b	c5cc <coda_cursor_read_double_partial_array+0x760>
    c148:	ldr	r3, [fp, #-52]	; 0xffffffcc
    c14c:	ldr	r2, [fp, #-48]	; 0xffffffd0
    c150:	ldr	r1, [fp, #-44]	; 0xffffffd4
    c154:	ldr	r0, [fp, #-40]	; 0xffffffd8
    c158:	bl	3b30 <read_uint8_partial_array>
    c15c:	mov	r3, r0
    c160:	cmp	r3, #0
    c164:	beq	c170 <coda_cursor_read_double_partial_array+0x304>
    c168:	mvn	r3, #0
    c16c:	b	c698 <coda_cursor_read_double_partial_array+0x82c>
    c170:	ldr	r3, [fp, #-48]	; 0xffffffd0
    c174:	sub	r3, r3, #1
    c178:	str	r3, [fp, #-16]
    c17c:	b	c1b8 <coda_cursor_read_double_partial_array+0x34c>
    c180:	ldr	r3, [fp, #-16]
    c184:	lsl	r3, r3, #3
    c188:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c18c:	add	r3, r2, r3
    c190:	ldr	r2, [fp, #-16]
    c194:	ldr	r1, [fp, #-52]	; 0xffffffcc
    c198:	add	r2, r1, r2
    c19c:	ldrb	r2, [r2]
    c1a0:	vmov	s15, r2
    c1a4:	vcvt.f64.u32	d7, s15
    c1a8:	vstr	d7, [r3]
    c1ac:	ldr	r3, [fp, #-16]
    c1b0:	sub	r3, r3, #1
    c1b4:	str	r3, [fp, #-16]
    c1b8:	ldr	r3, [fp, #-16]
    c1bc:	cmp	r3, #0
    c1c0:	bge	c180 <coda_cursor_read_double_partial_array+0x314>
    c1c4:	b	c5cc <coda_cursor_read_double_partial_array+0x760>
    c1c8:	ldr	r3, [fp, #-52]	; 0xffffffcc
    c1cc:	ldr	r2, [fp, #-48]	; 0xffffffd0
    c1d0:	ldr	r1, [fp, #-44]	; 0xffffffd4
    c1d4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    c1d8:	bl	3c7c <read_int16_partial_array>
    c1dc:	mov	r3, r0
    c1e0:	cmp	r3, #0
    c1e4:	beq	c1f0 <coda_cursor_read_double_partial_array+0x384>
    c1e8:	mvn	r3, #0
    c1ec:	b	c698 <coda_cursor_read_double_partial_array+0x82c>
    c1f0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    c1f4:	sub	r3, r3, #1
    c1f8:	str	r3, [fp, #-16]
    c1fc:	b	c23c <coda_cursor_read_double_partial_array+0x3d0>
    c200:	ldr	r3, [fp, #-16]
    c204:	lsl	r3, r3, #3
    c208:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c20c:	add	r3, r2, r3
    c210:	ldr	r2, [fp, #-16]
    c214:	lsl	r2, r2, #1
    c218:	ldr	r1, [fp, #-52]	; 0xffffffcc
    c21c:	add	r2, r1, r2
    c220:	ldrsh	r2, [r2]
    c224:	vmov	s15, r2
    c228:	vcvt.f64.s32	d7, s15
    c22c:	vstr	d7, [r3]
    c230:	ldr	r3, [fp, #-16]
    c234:	sub	r3, r3, #1
    c238:	str	r3, [fp, #-16]
    c23c:	ldr	r3, [fp, #-16]
    c240:	cmp	r3, #0
    c244:	bge	c200 <coda_cursor_read_double_partial_array+0x394>
    c248:	b	c5cc <coda_cursor_read_double_partial_array+0x760>
    c24c:	ldr	r3, [fp, #-52]	; 0xffffffcc
    c250:	ldr	r2, [fp, #-48]	; 0xffffffd0
    c254:	ldr	r1, [fp, #-44]	; 0xffffffd4
    c258:	ldr	r0, [fp, #-40]	; 0xffffffd8
    c25c:	bl	3de8 <read_uint16_partial_array>
    c260:	mov	r3, r0
    c264:	cmp	r3, #0
    c268:	beq	c274 <coda_cursor_read_double_partial_array+0x408>
    c26c:	mvn	r3, #0
    c270:	b	c698 <coda_cursor_read_double_partial_array+0x82c>
    c274:	ldr	r3, [fp, #-48]	; 0xffffffd0
    c278:	sub	r3, r3, #1
    c27c:	str	r3, [fp, #-16]
    c280:	b	c2c0 <coda_cursor_read_double_partial_array+0x454>
    c284:	ldr	r3, [fp, #-16]
    c288:	lsl	r3, r3, #3
    c28c:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c290:	add	r3, r2, r3
    c294:	ldr	r2, [fp, #-16]
    c298:	lsl	r2, r2, #1
    c29c:	ldr	r1, [fp, #-52]	; 0xffffffcc
    c2a0:	add	r2, r1, r2
    c2a4:	ldrh	r2, [r2]
    c2a8:	vmov	s15, r2
    c2ac:	vcvt.f64.u32	d7, s15
    c2b0:	vstr	d7, [r3]
    c2b4:	ldr	r3, [fp, #-16]
    c2b8:	sub	r3, r3, #1
    c2bc:	str	r3, [fp, #-16]
    c2c0:	ldr	r3, [fp, #-16]
    c2c4:	cmp	r3, #0
    c2c8:	bge	c284 <coda_cursor_read_double_partial_array+0x418>
    c2cc:	b	c5cc <coda_cursor_read_double_partial_array+0x760>
    c2d0:	ldr	r3, [fp, #-52]	; 0xffffffcc
    c2d4:	ldr	r2, [fp, #-48]	; 0xffffffd0
    c2d8:	ldr	r1, [fp, #-44]	; 0xffffffd4
    c2dc:	ldr	r0, [fp, #-40]	; 0xffffffd8
    c2e0:	bl	3f34 <read_int32_partial_array>
    c2e4:	mov	r3, r0
    c2e8:	cmp	r3, #0
    c2ec:	beq	c2f8 <coda_cursor_read_double_partial_array+0x48c>
    c2f0:	mvn	r3, #0
    c2f4:	b	c698 <coda_cursor_read_double_partial_array+0x82c>
    c2f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    c2fc:	sub	r3, r3, #1
    c300:	str	r3, [fp, #-16]
    c304:	b	c344 <coda_cursor_read_double_partial_array+0x4d8>
    c308:	ldr	r3, [fp, #-16]
    c30c:	lsl	r3, r3, #3
    c310:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c314:	add	r3, r2, r3
    c318:	ldr	r2, [fp, #-16]
    c31c:	lsl	r2, r2, #2
    c320:	ldr	r1, [fp, #-52]	; 0xffffffcc
    c324:	add	r2, r1, r2
    c328:	ldr	r2, [r2]
    c32c:	vmov	s15, r2
    c330:	vcvt.f64.s32	d7, s15
    c334:	vstr	d7, [r3]
    c338:	ldr	r3, [fp, #-16]
    c33c:	sub	r3, r3, #1
    c340:	str	r3, [fp, #-16]
    c344:	ldr	r3, [fp, #-16]
    c348:	cmp	r3, #0
    c34c:	bge	c308 <coda_cursor_read_double_partial_array+0x49c>
    c350:	b	c5cc <coda_cursor_read_double_partial_array+0x760>
    c354:	ldr	r3, [fp, #-52]	; 0xffffffcc
    c358:	ldr	r2, [fp, #-48]	; 0xffffffd0
    c35c:	ldr	r1, [fp, #-44]	; 0xffffffd4
    c360:	ldr	r0, [fp, #-40]	; 0xffffffd8
    c364:	bl	40a0 <read_uint32_partial_array>
    c368:	mov	r3, r0
    c36c:	cmp	r3, #0
    c370:	beq	c37c <coda_cursor_read_double_partial_array+0x510>
    c374:	mvn	r3, #0
    c378:	b	c698 <coda_cursor_read_double_partial_array+0x82c>
    c37c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    c380:	sub	r3, r3, #1
    c384:	str	r3, [fp, #-16]
    c388:	b	c3c8 <coda_cursor_read_double_partial_array+0x55c>
    c38c:	ldr	r3, [fp, #-16]
    c390:	lsl	r3, r3, #3
    c394:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c398:	add	r3, r2, r3
    c39c:	ldr	r2, [fp, #-16]
    c3a0:	lsl	r2, r2, #2
    c3a4:	ldr	r1, [fp, #-52]	; 0xffffffcc
    c3a8:	add	r2, r1, r2
    c3ac:	ldr	r2, [r2]
    c3b0:	vmov	s15, r2
    c3b4:	vcvt.f64.u32	d7, s15
    c3b8:	vstr	d7, [r3]
    c3bc:	ldr	r3, [fp, #-16]
    c3c0:	sub	r3, r3, #1
    c3c4:	str	r3, [fp, #-16]
    c3c8:	ldr	r3, [fp, #-16]
    c3cc:	cmp	r3, #0
    c3d0:	bge	c38c <coda_cursor_read_double_partial_array+0x520>
    c3d4:	b	c5cc <coda_cursor_read_double_partial_array+0x760>
    c3d8:	ldr	r3, [fp, #-52]	; 0xffffffcc
    c3dc:	ldr	r2, [fp, #-48]	; 0xffffffd0
    c3e0:	ldr	r1, [fp, #-44]	; 0xffffffd4
    c3e4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    c3e8:	bl	41ec <read_int64_partial_array>
    c3ec:	mov	r3, r0
    c3f0:	cmp	r3, #0
    c3f4:	beq	c400 <coda_cursor_read_double_partial_array+0x594>
    c3f8:	mvn	r3, #0
    c3fc:	b	c698 <coda_cursor_read_double_partial_array+0x82c>
    c400:	ldr	r3, [fp, #-48]	; 0xffffffd0
    c404:	sub	r3, r3, #1
    c408:	str	r3, [fp, #-16]
    c40c:	b	c458 <coda_cursor_read_double_partial_array+0x5ec>
    c410:	ldr	r3, [fp, #-16]
    c414:	lsl	r3, r3, #3
    c418:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c41c:	add	r4, r2, r3
    c420:	ldr	r3, [fp, #-16]
    c424:	lsl	r3, r3, #3
    c428:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c42c:	add	r3, r2, r3
    c430:	ldrd	r2, [r3]
    c434:	mov	r0, r2
    c438:	mov	r1, r3
    c43c:	bl	0 <__aeabi_l2d>
    c440:	mov	r2, r0
    c444:	mov	r3, r1
    c448:	strd	r2, [r4]
    c44c:	ldr	r3, [fp, #-16]
    c450:	sub	r3, r3, #1
    c454:	str	r3, [fp, #-16]
    c458:	ldr	r3, [fp, #-16]
    c45c:	cmp	r3, #0
    c460:	bge	c410 <coda_cursor_read_double_partial_array+0x5a4>
    c464:	b	c5cc <coda_cursor_read_double_partial_array+0x760>
    c468:	ldr	r3, [fp, #-52]	; 0xffffffcc
    c46c:	ldr	r2, [fp, #-48]	; 0xffffffd0
    c470:	ldr	r1, [fp, #-44]	; 0xffffffd4
    c474:	ldr	r0, [fp, #-40]	; 0xffffffd8
    c478:	bl	4338 <read_uint64_partial_array>
    c47c:	mov	r3, r0
    c480:	cmp	r3, #0
    c484:	beq	c490 <coda_cursor_read_double_partial_array+0x624>
    c488:	mvn	r3, #0
    c48c:	b	c698 <coda_cursor_read_double_partial_array+0x82c>
    c490:	ldr	r3, [fp, #-48]	; 0xffffffd0
    c494:	sub	r3, r3, #1
    c498:	str	r3, [fp, #-16]
    c49c:	b	c4e8 <coda_cursor_read_double_partial_array+0x67c>
    c4a0:	ldr	r3, [fp, #-16]
    c4a4:	lsl	r3, r3, #3
    c4a8:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c4ac:	add	r4, r2, r3
    c4b0:	ldr	r3, [fp, #-16]
    c4b4:	lsl	r3, r3, #3
    c4b8:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c4bc:	add	r3, r2, r3
    c4c0:	ldrd	r2, [r3]
    c4c4:	mov	r0, r2
    c4c8:	mov	r1, r3
    c4cc:	bl	0 <__aeabi_ul2d>
    c4d0:	mov	r2, r0
    c4d4:	mov	r3, r1
    c4d8:	strd	r2, [r4]
    c4dc:	ldr	r3, [fp, #-16]
    c4e0:	sub	r3, r3, #1
    c4e4:	str	r3, [fp, #-16]
    c4e8:	ldr	r3, [fp, #-16]
    c4ec:	cmp	r3, #0
    c4f0:	bge	c4a0 <coda_cursor_read_double_partial_array+0x634>
    c4f4:	b	c5cc <coda_cursor_read_double_partial_array+0x760>
    c4f8:	ldr	r3, [fp, #-52]	; 0xffffffcc
    c4fc:	ldr	r2, [fp, #-48]	; 0xffffffd0
    c500:	ldr	r1, [fp, #-44]	; 0xffffffd4
    c504:	ldr	r0, [fp, #-40]	; 0xffffffd8
    c508:	bl	4460 <read_float_partial_array>
    c50c:	mov	r3, r0
    c510:	cmp	r3, #0
    c514:	beq	c520 <coda_cursor_read_double_partial_array+0x6b4>
    c518:	mvn	r3, #0
    c51c:	b	c698 <coda_cursor_read_double_partial_array+0x82c>
    c520:	ldr	r3, [fp, #-48]	; 0xffffffd0
    c524:	sub	r3, r3, #1
    c528:	str	r3, [fp, #-16]
    c52c:	b	c568 <coda_cursor_read_double_partial_array+0x6fc>
    c530:	ldr	r3, [fp, #-16]
    c534:	lsl	r3, r3, #3
    c538:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c53c:	add	r3, r2, r3
    c540:	ldr	r2, [fp, #-16]
    c544:	lsl	r2, r2, #2
    c548:	ldr	r1, [fp, #-52]	; 0xffffffcc
    c54c:	add	r2, r1, r2
    c550:	vldr	s15, [r2]
    c554:	vcvt.f64.f32	d7, s15
    c558:	vstr	d7, [r3]
    c55c:	ldr	r3, [fp, #-16]
    c560:	sub	r3, r3, #1
    c564:	str	r3, [fp, #-16]
    c568:	ldr	r3, [fp, #-16]
    c56c:	cmp	r3, #0
    c570:	bge	c530 <coda_cursor_read_double_partial_array+0x6c4>
    c574:	b	c5cc <coda_cursor_read_double_partial_array+0x760>
    c578:	ldr	r3, [fp, #-52]	; 0xffffffcc
    c57c:	ldr	r2, [fp, #-48]	; 0xffffffd0
    c580:	ldr	r1, [fp, #-44]	; 0xffffffd4
    c584:	ldr	r0, [fp, #-40]	; 0xffffffd8
    c588:	bl	45ec <read_double_partial_array>
    c58c:	mov	r3, r0
    c590:	cmp	r3, #0
    c594:	beq	c5c8 <coda_cursor_read_double_partial_array+0x75c>
    c598:	mvn	r3, #0
    c59c:	b	c698 <coda_cursor_read_double_partial_array+0x82c>
    c5a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c5a4:	mov	r0, r3
    c5a8:	bl	0 <coda_type_get_native_type_name>
    c5ac:	mov	r3, r0
    c5b0:	mov	r2, r3
    c5b4:	ldr	r1, [pc, #268]	; c6c8 <coda_cursor_read_double_partial_array+0x85c>
    c5b8:	mvn	r0, #104	; 0x68
    c5bc:	bl	0 <coda_set_error>
    c5c0:	mvn	r3, #0
    c5c4:	b	c698 <coda_cursor_read_double_partial_array+0x82c>
    c5c8:	nop			; (mov r0, r0)
    c5cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    c5d0:	cmp	r3, #0
    c5d4:	beq	c694 <coda_cursor_read_double_partial_array+0x828>
    c5d8:	mov	r3, #0
    c5dc:	str	r3, [fp, #-16]
    c5e0:	b	c684 <coda_cursor_read_double_partial_array+0x818>
    c5e4:	ldr	r3, [fp, #-16]
    c5e8:	lsl	r3, r3, #3
    c5ec:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c5f0:	add	r3, r2, r3
    c5f4:	vldr	d6, [r3]
    c5f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    c5fc:	vldr	d7, [r3, #24]
    c600:	vcmp.f64	d6, d7
    c604:	vmrs	APSR_nzcv, fpscr
    c608:	bne	c62c <coda_cursor_read_double_partial_array+0x7c0>
    c60c:	ldr	r3, [fp, #-16]
    c610:	lsl	r3, r3, #3
    c614:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c618:	add	r4, r2, r3
    c61c:	bl	0 <coda_NaN>
    c620:	vmov.f64	d7, d0
    c624:	vstr	d7, [r4]
    c628:	b	c678 <coda_cursor_read_double_partial_array+0x80c>
    c62c:	ldr	r3, [fp, #-16]
    c630:	lsl	r3, r3, #3
    c634:	ldr	r2, [fp, #-52]	; 0xffffffcc
    c638:	add	r3, r2, r3
    c63c:	ldr	r2, [fp, #-16]
    c640:	lsl	r2, r2, #3
    c644:	ldr	r1, [fp, #-52]	; 0xffffffcc
    c648:	add	r2, r1, r2
    c64c:	vldr	d6, [r2]
    c650:	ldr	r2, [fp, #-28]	; 0xffffffe4
    c654:	vldr	d7, [r2]
    c658:	vmul.f64	d5, d6, d7
    c65c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    c660:	vldr	d7, [r2, #8]
    c664:	vdiv.f64	d6, d5, d7
    c668:	ldr	r2, [fp, #-28]	; 0xffffffe4
    c66c:	vldr	d7, [r2, #16]
    c670:	vadd.f64	d7, d6, d7
    c674:	vstr	d7, [r3]
    c678:	ldr	r3, [fp, #-16]
    c67c:	add	r3, r3, #1
    c680:	str	r3, [fp, #-16]
    c684:	ldr	r2, [fp, #-16]
    c688:	ldr	r3, [fp, #-48]	; 0xffffffd0
    c68c:	cmp	r2, r3
    c690:	blt	c5e4 <coda_cursor_read_double_partial_array+0x778>
    c694:	mov	r3, #0
    c698:	mov	r0, r3
    c69c:	sub	sp, fp, #8
    c6a0:	pop	{r4, fp, pc}
    c6a4:	.word	0x000014eb
    c6a8:	.word	0x000000c8
    c6ac:	.word	0x00000118
    c6b0:	.word	0x000014f0
    c6b4:	.word	0x00000138
    c6b8:	.word	0x00000480
    c6bc:	.word	0x000006fc
    c6c0:	.word	0x000004b8
    c6c4:	.word	0x000004e8
    c6c8:	.word	0x00000304

0000c6cc <coda_cursor_read_char_partial_array>:
    c6cc:	push	{fp, lr}
    c6d0:	add	fp, sp, #4
    c6d4:	sub	sp, sp, #40	; 0x28
    c6d8:	str	r0, [fp, #-24]	; 0xffffffe8
    c6dc:	str	r1, [fp, #-28]	; 0xffffffe4
    c6e0:	str	r2, [fp, #-32]	; 0xffffffe0
    c6e4:	str	r3, [fp, #-36]	; 0xffffffdc
    c6e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c6ec:	cmp	r3, #0
    c6f0:	beq	c728 <coda_cursor_read_char_partial_array+0x5c>
    c6f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c6f8:	ldr	r3, [r3, #4]
    c6fc:	cmp	r3, #0
    c700:	ble	c728 <coda_cursor_read_char_partial_array+0x5c>
    c704:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c708:	ldr	r3, [r3, #4]
    c70c:	sub	r3, r3, #1
    c710:	ldr	r2, [fp, #-24]	; 0xffffffe8
    c714:	lsl	r3, r3, #4
    c718:	add	r3, r2, r3
    c71c:	ldr	r3, [r3, #8]
    c720:	cmp	r3, #0
    c724:	bne	c744 <coda_cursor_read_char_partial_array+0x78>
    c728:	ldr	r3, [pc, #556]	; c95c <coda_cursor_read_char_partial_array+0x290>
    c72c:	ldr	r2, [pc, #556]	; c960 <coda_cursor_read_char_partial_array+0x294>
    c730:	ldr	r1, [pc, #556]	; c964 <coda_cursor_read_char_partial_array+0x298>
    c734:	mvn	r0, #99	; 0x63
    c738:	bl	0 <coda_set_error>
    c73c:	mvn	r3, #0
    c740:	b	c950 <coda_cursor_read_char_partial_array+0x284>
    c744:	ldr	r3, [fp, #-36]	; 0xffffffdc
    c748:	cmp	r3, #0
    c74c:	bne	c76c <coda_cursor_read_char_partial_array+0xa0>
    c750:	ldr	r3, [pc, #528]	; c968 <coda_cursor_read_char_partial_array+0x29c>
    c754:	ldr	r2, [pc, #516]	; c960 <coda_cursor_read_char_partial_array+0x294>
    c758:	ldr	r1, [pc, #524]	; c96c <coda_cursor_read_char_partial_array+0x2a0>
    c75c:	mvn	r0, #99	; 0x63
    c760:	bl	0 <coda_set_error>
    c764:	mvn	r3, #0
    c768:	b	c950 <coda_cursor_read_char_partial_array+0x284>
    c76c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c770:	ldr	r3, [r3, #4]
    c774:	sub	r3, r3, #1
    c778:	ldr	r2, [fp, #-24]	; 0xffffffe8
    c77c:	lsl	r3, r3, #4
    c780:	add	r3, r2, r3
    c784:	ldr	r3, [r3, #8]
    c788:	ldr	r3, [r3]
    c78c:	cmp	r3, #99	; 0x63
    c790:	bhi	c7b4 <coda_cursor_read_char_partial_array+0xe8>
    c794:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c798:	ldr	r3, [r3, #4]
    c79c:	sub	r3, r3, #1
    c7a0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    c7a4:	lsl	r3, r3, #4
    c7a8:	add	r3, r2, r3
    c7ac:	ldr	r3, [r3, #8]
    c7b0:	b	c7d4 <coda_cursor_read_char_partial_array+0x108>
    c7b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c7b8:	ldr	r3, [r3, #4]
    c7bc:	sub	r3, r3, #1
    c7c0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    c7c4:	lsl	r3, r3, #4
    c7c8:	add	r3, r2, r3
    c7cc:	ldr	r3, [r3, #8]
    c7d0:	ldr	r3, [r3, #4]
    c7d4:	str	r3, [fp, #-8]
    c7d8:	ldr	r3, [fp, #-8]
    c7dc:	ldr	r3, [r3, #8]
    c7e0:	cmp	r3, #1
    c7e4:	beq	c814 <coda_cursor_read_char_partial_array+0x148>
    c7e8:	ldr	r3, [fp, #-8]
    c7ec:	ldr	r3, [r3, #8]
    c7f0:	mov	r0, r3
    c7f4:	bl	0 <coda_type_get_class_name>
    c7f8:	mov	r3, r0
    c7fc:	mov	r2, r3
    c800:	ldr	r1, [pc, #360]	; c970 <coda_cursor_read_char_partial_array+0x2a4>
    c804:	mvn	r0, #104	; 0x68
    c808:	bl	0 <coda_set_error>
    c80c:	mvn	r3, #0
    c810:	b	c950 <coda_cursor_read_char_partial_array+0x284>
    c814:	ldr	r3, [pc, #344]	; c974 <coda_cursor_read_char_partial_array+0x2a8>
    c818:	ldr	r3, [pc, r3]
    c81c:	bl	0 <__aeabi_read_tp>
    c820:	mov	r2, r0
    c824:	ldr	r3, [r2, r3]
    c828:	cmp	r3, #0
    c82c:	beq	c8c8 <coda_cursor_read_char_partial_array+0x1fc>
    c830:	sub	r3, fp, #16
    c834:	mov	r1, r3
    c838:	ldr	r0, [fp, #-24]	; 0xffffffe8
    c83c:	bl	0 <coda_cursor_get_num_elements>
    c840:	mov	r3, r0
    c844:	cmp	r3, #0
    c848:	beq	c854 <coda_cursor_read_char_partial_array+0x188>
    c84c:	mvn	r3, #0
    c850:	b	c950 <coda_cursor_read_char_partial_array+0x284>
    c854:	ldr	r3, [fp, #-28]	; 0xffffffe4
    c858:	cmp	r3, #0
    c85c:	blt	c870 <coda_cursor_read_char_partial_array+0x1a4>
    c860:	ldr	r3, [fp, #-16]
    c864:	ldr	r2, [fp, #-28]	; 0xffffffe4
    c868:	cmp	r2, r3
    c86c:	blt	c88c <coda_cursor_read_char_partial_array+0x1c0>
    c870:	ldr	r3, [fp, #-16]
    c874:	ldr	r2, [fp, #-28]	; 0xffffffe4
    c878:	ldr	r1, [pc, #248]	; c978 <coda_cursor_read_char_partial_array+0x2ac>
    c87c:	mvn	r0, #106	; 0x6a
    c880:	bl	0 <coda_set_error>
    c884:	mvn	r3, #0
    c888:	b	c950 <coda_cursor_read_char_partial_array+0x284>
    c88c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    c890:	ldr	r3, [fp, #-32]	; 0xffffffe0
    c894:	add	r2, r2, r3
    c898:	ldr	r3, [fp, #-16]
    c89c:	cmp	r2, r3
    c8a0:	ble	c8c8 <coda_cursor_read_char_partial_array+0x1fc>
    c8a4:	ldr	r3, [fp, #-16]
    c8a8:	str	r3, [sp]
    c8ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
    c8b0:	ldr	r2, [fp, #-28]	; 0xffffffe4
    c8b4:	ldr	r1, [pc, #192]	; c97c <coda_cursor_read_char_partial_array+0x2b0>
    c8b8:	mvn	r0, #106	; 0x6a
    c8bc:	bl	0 <coda_set_error>
    c8c0:	mvn	r3, #0
    c8c4:	b	c950 <coda_cursor_read_char_partial_array+0x284>
    c8c8:	sub	r3, fp, #12
    c8cc:	mov	r1, r3
    c8d0:	ldr	r0, [fp, #-8]
    c8d4:	bl	1080 <get_array_element_read_type>
    c8d8:	mov	r3, r0
    c8dc:	cmp	r3, #0
    c8e0:	beq	c8ec <coda_cursor_read_char_partial_array+0x220>
    c8e4:	mvn	r3, #0
    c8e8:	b	c950 <coda_cursor_read_char_partial_array+0x284>
    c8ec:	ldr	r3, [fp, #-12]
    c8f0:	cmp	r3, #10
    c8f4:	bne	c920 <coda_cursor_read_char_partial_array+0x254>
    c8f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    c8fc:	ldr	r2, [fp, #-32]	; 0xffffffe0
    c900:	ldr	r1, [fp, #-28]	; 0xffffffe4
    c904:	ldr	r0, [fp, #-24]	; 0xffffffe8
    c908:	bl	4808 <read_char_partial_array>
    c90c:	mov	r3, r0
    c910:	cmp	r3, #0
    c914:	beq	c948 <coda_cursor_read_char_partial_array+0x27c>
    c918:	mvn	r3, #0
    c91c:	b	c950 <coda_cursor_read_char_partial_array+0x284>
    c920:	ldr	r3, [fp, #-12]
    c924:	mov	r0, r3
    c928:	bl	0 <coda_type_get_native_type_name>
    c92c:	mov	r3, r0
    c930:	mov	r2, r3
    c934:	ldr	r1, [pc, #68]	; c980 <coda_cursor_read_char_partial_array+0x2b4>
    c938:	mvn	r0, #104	; 0x68
    c93c:	bl	0 <coda_set_error>
    c940:	mvn	r3, #0
    c944:	b	c950 <coda_cursor_read_char_partial_array+0x284>
    c948:	nop			; (mov r0, r0)
    c94c:	mov	r3, #0
    c950:	mov	r0, r3
    c954:	sub	sp, fp, #4
    c958:	pop	{fp, pc}
    c95c:	.word	0x000015a6
    c960:	.word	0x000000c8
    c964:	.word	0x00000118
    c968:	.word	0x000015ab
    c96c:	.word	0x00000138
    c970:	.word	0x00000480
    c974:	.word	0x00000154
    c978:	.word	0x000004b8
    c97c:	.word	0x000004e8
    c980:	.word	0x00000334

0000c984 <coda_cursor_read_complex_double_pair>:
    c984:	push	{fp, lr}
    c988:	add	fp, sp, #4
    c98c:	sub	sp, sp, #8
    c990:	str	r0, [fp, #-8]
    c994:	str	r1, [fp, #-12]
    c998:	ldr	r3, [fp, #-8]
    c99c:	cmp	r3, #0
    c9a0:	beq	c9d8 <coda_cursor_read_complex_double_pair+0x54>
    c9a4:	ldr	r3, [fp, #-8]
    c9a8:	ldr	r3, [r3, #4]
    c9ac:	cmp	r3, #0
    c9b0:	ble	c9d8 <coda_cursor_read_complex_double_pair+0x54>
    c9b4:	ldr	r3, [fp, #-8]
    c9b8:	ldr	r3, [r3, #4]
    c9bc:	sub	r3, r3, #1
    c9c0:	ldr	r2, [fp, #-8]
    c9c4:	lsl	r3, r3, #4
    c9c8:	add	r3, r2, r3
    c9cc:	ldr	r3, [r3, #8]
    c9d0:	cmp	r3, #0
    c9d4:	bne	c9f4 <coda_cursor_read_complex_double_pair+0x70>
    c9d8:	ldr	r3, [pc, #88]	; ca38 <coda_cursor_read_complex_double_pair+0xb4>
    c9dc:	ldr	r2, [pc, #88]	; ca3c <coda_cursor_read_complex_double_pair+0xb8>
    c9e0:	ldr	r1, [pc, #88]	; ca40 <coda_cursor_read_complex_double_pair+0xbc>
    c9e4:	mvn	r0, #99	; 0x63
    c9e8:	bl	0 <coda_set_error>
    c9ec:	mvn	r3, #0
    c9f0:	b	ca2c <coda_cursor_read_complex_double_pair+0xa8>
    c9f4:	ldr	r3, [fp, #-12]
    c9f8:	cmp	r3, #0
    c9fc:	bne	ca1c <coda_cursor_read_complex_double_pair+0x98>
    ca00:	ldr	r3, [pc, #60]	; ca44 <coda_cursor_read_complex_double_pair+0xc0>
    ca04:	ldr	r2, [pc, #48]	; ca3c <coda_cursor_read_complex_double_pair+0xb8>
    ca08:	ldr	r1, [pc, #56]	; ca48 <coda_cursor_read_complex_double_pair+0xc4>
    ca0c:	mvn	r0, #99	; 0x63
    ca10:	bl	0 <coda_set_error>
    ca14:	mvn	r3, #0
    ca18:	b	ca2c <coda_cursor_read_complex_double_pair+0xa8>
    ca1c:	ldr	r1, [fp, #-12]
    ca20:	ldr	r0, [fp, #-8]
    ca24:	bl	1620 <read_double_pair>
    ca28:	mov	r3, r0
    ca2c:	mov	r0, r3
    ca30:	sub	sp, fp, #4
    ca34:	pop	{fp, pc}
    ca38:	.word	0x000015f1
    ca3c:	.word	0x000000c8
    ca40:	.word	0x00000118
    ca44:	.word	0x000015f6
    ca48:	.word	0x00000138

0000ca4c <coda_cursor_read_complex_double_pairs_array>:
    ca4c:	push	{fp, lr}
    ca50:	add	fp, sp, #4
    ca54:	sub	sp, sp, #32
    ca58:	str	r0, [fp, #-16]
    ca5c:	str	r1, [fp, #-20]	; 0xffffffec
    ca60:	str	r2, [fp, #-24]	; 0xffffffe8
    ca64:	ldr	r3, [fp, #-16]
    ca68:	cmp	r3, #0
    ca6c:	beq	caa4 <coda_cursor_read_complex_double_pairs_array+0x58>
    ca70:	ldr	r3, [fp, #-16]
    ca74:	ldr	r3, [r3, #4]
    ca78:	cmp	r3, #0
    ca7c:	ble	caa4 <coda_cursor_read_complex_double_pairs_array+0x58>
    ca80:	ldr	r3, [fp, #-16]
    ca84:	ldr	r3, [r3, #4]
    ca88:	sub	r3, r3, #1
    ca8c:	ldr	r2, [fp, #-16]
    ca90:	lsl	r3, r3, #4
    ca94:	add	r3, r2, r3
    ca98:	ldr	r3, [r3, #8]
    ca9c:	cmp	r3, #0
    caa0:	bne	cac0 <coda_cursor_read_complex_double_pairs_array+0x74>
    caa4:	ldr	r3, [pc, #272]	; cbbc <coda_cursor_read_complex_double_pairs_array+0x170>
    caa8:	ldr	r2, [pc, #272]	; cbc0 <coda_cursor_read_complex_double_pairs_array+0x174>
    caac:	ldr	r1, [pc, #272]	; cbc4 <coda_cursor_read_complex_double_pairs_array+0x178>
    cab0:	mvn	r0, #99	; 0x63
    cab4:	bl	0 <coda_set_error>
    cab8:	mvn	r3, #0
    cabc:	b	cbb0 <coda_cursor_read_complex_double_pairs_array+0x164>
    cac0:	ldr	r3, [fp, #-20]	; 0xffffffec
    cac4:	cmp	r3, #0
    cac8:	bne	cae8 <coda_cursor_read_complex_double_pairs_array+0x9c>
    cacc:	ldr	r3, [pc, #244]	; cbc8 <coda_cursor_read_complex_double_pairs_array+0x17c>
    cad0:	ldr	r2, [pc, #232]	; cbc0 <coda_cursor_read_complex_double_pairs_array+0x174>
    cad4:	ldr	r1, [pc, #240]	; cbcc <coda_cursor_read_complex_double_pairs_array+0x180>
    cad8:	mvn	r0, #99	; 0x63
    cadc:	bl	0 <coda_set_error>
    cae0:	mvn	r3, #0
    cae4:	b	cbb0 <coda_cursor_read_complex_double_pairs_array+0x164>
    cae8:	ldr	r3, [fp, #-16]
    caec:	ldr	r3, [r3, #4]
    caf0:	sub	r3, r3, #1
    caf4:	ldr	r2, [fp, #-16]
    caf8:	lsl	r3, r3, #4
    cafc:	add	r3, r2, r3
    cb00:	ldr	r3, [r3, #8]
    cb04:	ldr	r3, [r3]
    cb08:	cmp	r3, #99	; 0x63
    cb0c:	bhi	cb30 <coda_cursor_read_complex_double_pairs_array+0xe4>
    cb10:	ldr	r3, [fp, #-16]
    cb14:	ldr	r3, [r3, #4]
    cb18:	sub	r3, r3, #1
    cb1c:	ldr	r2, [fp, #-16]
    cb20:	lsl	r3, r3, #4
    cb24:	add	r3, r2, r3
    cb28:	ldr	r3, [r3, #8]
    cb2c:	b	cb50 <coda_cursor_read_complex_double_pairs_array+0x104>
    cb30:	ldr	r3, [fp, #-16]
    cb34:	ldr	r3, [r3, #4]
    cb38:	sub	r3, r3, #1
    cb3c:	ldr	r2, [fp, #-16]
    cb40:	lsl	r3, r3, #4
    cb44:	add	r3, r2, r3
    cb48:	ldr	r3, [r3, #8]
    cb4c:	ldr	r3, [r3, #4]
    cb50:	str	r3, [fp, #-8]
    cb54:	ldr	r3, [fp, #-8]
    cb58:	ldr	r3, [r3, #8]
    cb5c:	cmp	r3, #1
    cb60:	beq	cb90 <coda_cursor_read_complex_double_pairs_array+0x144>
    cb64:	ldr	r3, [fp, #-8]
    cb68:	ldr	r3, [r3, #8]
    cb6c:	mov	r0, r3
    cb70:	bl	0 <coda_type_get_class_name>
    cb74:	mov	r3, r0
    cb78:	mov	r2, r3
    cb7c:	ldr	r1, [pc, #76]	; cbd0 <coda_cursor_read_complex_double_pairs_array+0x184>
    cb80:	mvn	r0, #104	; 0x68
    cb84:	bl	0 <coda_set_error>
    cb88:	mvn	r3, #0
    cb8c:	b	cbb0 <coda_cursor_read_complex_double_pairs_array+0x164>
    cb90:	ldr	r3, [fp, #-24]	; 0xffffffe8
    cb94:	str	r3, [sp]
    cb98:	mov	r3, #16
    cb9c:	ldr	r2, [fp, #-20]	; 0xffffffec
    cba0:	ldr	r1, [pc, #44]	; cbd4 <coda_cursor_read_complex_double_pairs_array+0x188>
    cba4:	ldr	r0, [fp, #-16]
    cba8:	bl	0 <read_array>
    cbac:	mov	r3, r0
    cbb0:	mov	r0, r3
    cbb4:	sub	sp, fp, #4
    cbb8:	pop	{fp, pc}
    cbbc:	.word	0x00001611
    cbc0:	.word	0x000000c8
    cbc4:	.word	0x00000118
    cbc8:	.word	0x00001616
    cbcc:	.word	0x00000138
    cbd0:	.word	0x00000480
    cbd4:	.word	0x00000000

0000cbd8 <coda_cursor_read_complex_double_split>:
    cbd8:	push	{fp, lr}
    cbdc:	add	fp, sp, #4
    cbe0:	sub	sp, sp, #32
    cbe4:	str	r0, [fp, #-24]	; 0xffffffe8
    cbe8:	str	r1, [fp, #-28]	; 0xffffffe4
    cbec:	str	r2, [fp, #-32]	; 0xffffffe0
    cbf0:	sub	r3, fp, #20
    cbf4:	mov	r1, r3
    cbf8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    cbfc:	bl	c984 <coda_cursor_read_complex_double_pair>
    cc00:	mov	r3, r0
    cc04:	cmp	r3, #0
    cc08:	beq	cc14 <coda_cursor_read_complex_double_split+0x3c>
    cc0c:	mvn	r3, #0
    cc10:	b	cc30 <coda_cursor_read_complex_double_split+0x58>
    cc14:	ldrd	r2, [fp, #-20]	; 0xffffffec
    cc18:	ldr	r1, [fp, #-28]	; 0xffffffe4
    cc1c:	strd	r2, [r1]
    cc20:	ldrd	r2, [fp, #-12]
    cc24:	ldr	r1, [fp, #-32]	; 0xffffffe0
    cc28:	strd	r2, [r1]
    cc2c:	mov	r3, #0
    cc30:	mov	r0, r3
    cc34:	sub	sp, fp, #4
    cc38:	pop	{fp, pc}

0000cc3c <coda_cursor_read_complex_double_split_array>:
    cc3c:	push	{fp, lr}
    cc40:	add	fp, sp, #4
    cc44:	sub	sp, sp, #32
    cc48:	str	r0, [fp, #-16]
    cc4c:	str	r1, [fp, #-20]	; 0xffffffec
    cc50:	str	r2, [fp, #-24]	; 0xffffffe8
    cc54:	str	r3, [fp, #-28]	; 0xffffffe4
    cc58:	ldr	r3, [fp, #-16]
    cc5c:	cmp	r3, #0
    cc60:	beq	cc98 <coda_cursor_read_complex_double_split_array+0x5c>
    cc64:	ldr	r3, [fp, #-16]
    cc68:	ldr	r3, [r3, #4]
    cc6c:	cmp	r3, #0
    cc70:	ble	cc98 <coda_cursor_read_complex_double_split_array+0x5c>
    cc74:	ldr	r3, [fp, #-16]
    cc78:	ldr	r3, [r3, #4]
    cc7c:	sub	r3, r3, #1
    cc80:	ldr	r2, [fp, #-16]
    cc84:	lsl	r3, r3, #4
    cc88:	add	r3, r2, r3
    cc8c:	ldr	r3, [r3, #8]
    cc90:	cmp	r3, #0
    cc94:	bne	ccb4 <coda_cursor_read_complex_double_split_array+0x78>
    cc98:	ldr	r3, [pc, #320]	; cde0 <coda_cursor_read_complex_double_split_array+0x1a4>
    cc9c:	ldr	r2, [pc, #320]	; cde4 <coda_cursor_read_complex_double_split_array+0x1a8>
    cca0:	ldr	r1, [pc, #320]	; cde8 <coda_cursor_read_complex_double_split_array+0x1ac>
    cca4:	mvn	r0, #99	; 0x63
    cca8:	bl	0 <coda_set_error>
    ccac:	mvn	r3, #0
    ccb0:	b	cdd4 <coda_cursor_read_complex_double_split_array+0x198>
    ccb4:	ldr	r3, [fp, #-20]	; 0xffffffec
    ccb8:	cmp	r3, #0
    ccbc:	bne	ccdc <coda_cursor_read_complex_double_split_array+0xa0>
    ccc0:	ldr	r3, [pc, #292]	; cdec <coda_cursor_read_complex_double_split_array+0x1b0>
    ccc4:	ldr	r2, [pc, #280]	; cde4 <coda_cursor_read_complex_double_split_array+0x1a8>
    ccc8:	ldr	r1, [pc, #288]	; cdf0 <coda_cursor_read_complex_double_split_array+0x1b4>
    cccc:	mvn	r0, #99	; 0x63
    ccd0:	bl	0 <coda_set_error>
    ccd4:	mvn	r3, #0
    ccd8:	b	cdd4 <coda_cursor_read_complex_double_split_array+0x198>
    ccdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    cce0:	cmp	r3, #0
    cce4:	bne	cd04 <coda_cursor_read_complex_double_split_array+0xc8>
    cce8:	ldr	r3, [pc, #260]	; cdf4 <coda_cursor_read_complex_double_split_array+0x1b8>
    ccec:	ldr	r2, [pc, #240]	; cde4 <coda_cursor_read_complex_double_split_array+0x1a8>
    ccf0:	ldr	r1, [pc, #256]	; cdf8 <coda_cursor_read_complex_double_split_array+0x1bc>
    ccf4:	mvn	r0, #99	; 0x63
    ccf8:	bl	0 <coda_set_error>
    ccfc:	mvn	r3, #0
    cd00:	b	cdd4 <coda_cursor_read_complex_double_split_array+0x198>
    cd04:	ldr	r3, [fp, #-16]
    cd08:	ldr	r3, [r3, #4]
    cd0c:	sub	r3, r3, #1
    cd10:	ldr	r2, [fp, #-16]
    cd14:	lsl	r3, r3, #4
    cd18:	add	r3, r2, r3
    cd1c:	ldr	r3, [r3, #8]
    cd20:	ldr	r3, [r3]
    cd24:	cmp	r3, #99	; 0x63
    cd28:	bhi	cd4c <coda_cursor_read_complex_double_split_array+0x110>
    cd2c:	ldr	r3, [fp, #-16]
    cd30:	ldr	r3, [r3, #4]
    cd34:	sub	r3, r3, #1
    cd38:	ldr	r2, [fp, #-16]
    cd3c:	lsl	r3, r3, #4
    cd40:	add	r3, r2, r3
    cd44:	ldr	r3, [r3, #8]
    cd48:	b	cd6c <coda_cursor_read_complex_double_split_array+0x130>
    cd4c:	ldr	r3, [fp, #-16]
    cd50:	ldr	r3, [r3, #4]
    cd54:	sub	r3, r3, #1
    cd58:	ldr	r2, [fp, #-16]
    cd5c:	lsl	r3, r3, #4
    cd60:	add	r3, r2, r3
    cd64:	ldr	r3, [r3, #8]
    cd68:	ldr	r3, [r3, #4]
    cd6c:	str	r3, [fp, #-8]
    cd70:	ldr	r3, [fp, #-8]
    cd74:	ldr	r3, [r3, #8]
    cd78:	cmp	r3, #1
    cd7c:	beq	cdac <coda_cursor_read_complex_double_split_array+0x170>
    cd80:	ldr	r3, [fp, #-8]
    cd84:	ldr	r3, [r3, #8]
    cd88:	mov	r0, r3
    cd8c:	bl	0 <coda_type_get_class_name>
    cd90:	mov	r3, r0
    cd94:	mov	r2, r3
    cd98:	ldr	r1, [pc, #92]	; cdfc <coda_cursor_read_complex_double_split_array+0x1c0>
    cd9c:	mvn	r0, #104	; 0x68
    cda0:	bl	0 <coda_set_error>
    cda4:	mvn	r3, #0
    cda8:	b	cdd4 <coda_cursor_read_complex_double_split_array+0x198>
    cdac:	ldr	r3, [fp, #-28]	; 0xffffffe4
    cdb0:	str	r3, [sp, #4]
    cdb4:	mov	r3, #8
    cdb8:	str	r3, [sp]
    cdbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    cdc0:	ldr	r2, [fp, #-20]	; 0xffffffec
    cdc4:	ldr	r1, [pc, #52]	; ce00 <coda_cursor_read_complex_double_split_array+0x1c4>
    cdc8:	ldr	r0, [fp, #-16]
    cdcc:	bl	11c4 <read_split_array>
    cdd0:	mov	r3, r0
    cdd4:	mov	r0, r3
    cdd8:	sub	sp, fp, #4
    cddc:	pop	{fp, pc}
    cde0:	.word	0x00001651
    cde4:	.word	0x000000c8
    cde8:	.word	0x00000118
    cdec:	.word	0x00001656
    cdf0:	.word	0x00000558
    cdf4:	.word	0x0000165b
    cdf8:	.word	0x00000578
    cdfc:	.word	0x00000480
    ce00:	.word	0x00000000
