
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-utils.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_format_from_string>:
   0:	push	{r4, r5, r6, lr}
   4:	mov	r5, r1
   8:	ldr	r1, [pc, #332]	; 15c <coda_format_from_string+0x15c>
   c:	mov	r4, r0
  10:	bl	0 <strcmp>
  14:	cmp	r0, #0
  18:	beq	e8 <coda_format_from_string+0xe8>
  1c:	ldr	r1, [pc, #316]	; 160 <coda_format_from_string+0x160>
  20:	mov	r0, r4
  24:	bl	0 <strcmp>
  28:	cmp	r0, #0
  2c:	beq	dc <coda_format_from_string+0xdc>
  30:	ldr	r1, [pc, #300]	; 164 <coda_format_from_string+0x164>
  34:	mov	r0, r4
  38:	bl	0 <strcmp>
  3c:	cmp	r0, #0
  40:	beq	fc <coda_format_from_string+0xfc>
  44:	ldr	r1, [pc, #284]	; 168 <coda_format_from_string+0x168>
  48:	mov	r0, r4
  4c:	bl	0 <strcmp>
  50:	cmp	r0, #0
  54:	beq	f0 <coda_format_from_string+0xf0>
  58:	ldr	r1, [pc, #268]	; 16c <coda_format_from_string+0x16c>
  5c:	mov	r0, r4
  60:	bl	0 <strcmp>
  64:	cmp	r0, #0
  68:	beq	108 <coda_format_from_string+0x108>
  6c:	ldr	r1, [pc, #252]	; 170 <coda_format_from_string+0x170>
  70:	mov	r0, r4
  74:	bl	0 <strcmp>
  78:	cmp	r0, #0
  7c:	beq	120 <coda_format_from_string+0x120>
  80:	ldr	r1, [pc, #236]	; 174 <coda_format_from_string+0x174>
  84:	mov	r0, r4
  88:	bl	0 <strcmp>
  8c:	cmp	r0, #0
  90:	beq	114 <coda_format_from_string+0x114>
  94:	ldr	r1, [pc, #220]	; 178 <coda_format_from_string+0x178>
  98:	mov	r0, r4
  9c:	bl	0 <strcmp>
  a0:	cmp	r0, #0
  a4:	beq	12c <coda_format_from_string+0x12c>
  a8:	ldr	r1, [pc, #204]	; 17c <coda_format_from_string+0x17c>
  ac:	mov	r0, r4
  b0:	bl	0 <strcmp>
  b4:	cmp	r0, #0
  b8:	beq	138 <coda_format_from_string+0x138>
  bc:	ldr	r1, [pc, #188]	; 180 <coda_format_from_string+0x180>
  c0:	mov	r0, r4
  c4:	bl	0 <strcmp>
  c8:	cmp	r0, #0
  cc:	bne	144 <coda_format_from_string+0x144>
  d0:	mov	r3, #9
  d4:	str	r3, [r5]
  d8:	pop	{r4, r5, r6, pc}
  dc:	mov	r3, #1
  e0:	str	r3, [r5]
  e4:	pop	{r4, r5, r6, pc}
  e8:	str	r0, [r5]
  ec:	pop	{r4, r5, r6, pc}
  f0:	mov	r3, #3
  f4:	str	r3, [r5]
  f8:	pop	{r4, r5, r6, pc}
  fc:	mov	r3, #2
 100:	str	r3, [r5]
 104:	pop	{r4, r5, r6, pc}
 108:	mov	r3, #4
 10c:	str	r3, [r5]
 110:	pop	{r4, r5, r6, pc}
 114:	mov	r3, #6
 118:	str	r3, [r5]
 11c:	pop	{r4, r5, r6, pc}
 120:	mov	r3, #5
 124:	str	r3, [r5]
 128:	pop	{r4, r5, r6, pc}
 12c:	mov	r3, #7
 130:	str	r3, [r5]
 134:	pop	{r4, r5, r6, pc}
 138:	mov	r3, #8
 13c:	str	r3, [r5]
 140:	pop	{r4, r5, r6, pc}
 144:	mov	r2, r4
 148:	ldr	r1, [pc, #52]	; 184 <coda_format_from_string+0x184>
 14c:	ldr	r0, [pc, #52]	; 188 <coda_format_from_string+0x188>
 150:	bl	0 <coda_set_error>
 154:	mvn	r0, #0
 158:	pop	{r4, r5, r6, pc}
 15c:	.word	0x00000000
 160:	.word	0x00000008
 164:	.word	0x00000010
 168:	.word	0x00000014
 16c:	.word	0x0000001c
 170:	.word	0x00000024
 174:	.word	0x00000028
 178:	.word	0x00000030
 17c:	.word	0x00000038
 180:	.word	0x00000040
 184:	.word	0x00000044
 188:	.word	0xfffffe70

0000018c <coda_element_name_from_xml_name>:
 18c:	ldrb	r3, [r0]
 190:	mov	r2, r0
 194:	tst	r3, #223	; 0xdf
 198:	beq	1a8 <coda_element_name_from_xml_name+0x1c>
 19c:	ldrb	r3, [r2, #1]!
 1a0:	tst	r3, #223	; 0xdf
 1a4:	bne	19c <coda_element_name_from_xml_name+0x10>
 1a8:	cmp	r3, #0
 1ac:	addne	r0, r2, #1
 1b0:	bx	lr

000001b4 <coda_is_identifier>:
 1b4:	push	{r4, lr}
 1b8:	subs	r4, r0, #0
 1bc:	beq	24c <coda_is_identifier+0x98>
 1c0:	bl	0 <__ctype_b_loc>
 1c4:	ldrb	r3, [r4]
 1c8:	lsl	r3, r3, #1
 1cc:	ldr	ip, [r0]
 1d0:	ldrh	r1, [ip, r3]
 1d4:	ands	r1, r1, #1024	; 0x400
 1d8:	beq	24c <coda_is_identifier+0x98>
 1dc:	ldrb	r2, [r4, #1]
 1e0:	cmp	r2, #0
 1e4:	beq	244 <coda_is_identifier+0x90>
 1e8:	lsl	r3, r2, #1
 1ec:	ldrh	r3, [ip, r3]
 1f0:	lsr	r3, r3, #3
 1f4:	eor	r3, r3, #1
 1f8:	cmp	r2, #95	; 0x5f
 1fc:	moveq	r3, #0
 200:	andne	r3, r3, #1
 204:	cmp	r3, #0
 208:	bne	24c <coda_is_identifier+0x98>
 20c:	add	r1, r4, #1
 210:	b	234 <coda_is_identifier+0x80>
 214:	ldrh	r3, [ip, r3]
 218:	lsr	r3, r3, #3
 21c:	eor	r3, r3, #1
 220:	cmp	r2, #95	; 0x5f
 224:	moveq	r3, #0
 228:	andne	r3, r3, #1
 22c:	cmp	r3, #0
 230:	bne	24c <coda_is_identifier+0x98>
 234:	ldrb	r2, [r1, #1]!
 238:	cmp	r2, #0
 23c:	lsl	r3, r2, #1
 240:	bne	214 <coda_is_identifier+0x60>
 244:	mov	r0, #1
 248:	pop	{r4, pc}
 24c:	mov	r0, #0
 250:	pop	{r4, pc}

00000254 <coda_identifier_from_name>:
 254:	push	{r4, r5, r6, r7, r8, r9, lr}
 258:	subs	r5, r0, #0
 25c:	sub	sp, sp, #12
 260:	mov	r6, r1
 264:	beq	328 <coda_identifier_from_name+0xd4>
 268:	ldrb	r4, [r5]
 26c:	cmp	r4, #0
 270:	beq	328 <coda_identifier_from_name+0xd4>
 274:	bl	0 <__ctype_b_loc>
 278:	ldr	r9, [r0]
 27c:	b	28c <coda_identifier_from_name+0x38>
 280:	ldrb	r4, [r5, #1]!
 284:	cmp	r4, #0
 288:	beq	328 <coda_identifier_from_name+0xd4>
 28c:	lsl	r4, r4, #1
 290:	ldrh	r3, [r9, r4]
 294:	tst	r3, #1024	; 0x400
 298:	beq	280 <coda_identifier_from_name+0x2c>
 29c:	mov	r0, r5
 2a0:	bl	0 <strlen>
 2a4:	mov	r8, r0
 2a8:	add	r0, r0, #5
 2ac:	bl	0 <malloc>
 2b0:	mov	ip, r8
 2b4:	subs	r7, r0, #0
 2b8:	addeq	r2, r8, #4
 2bc:	beq	3a4 <coda_identifier_from_name+0x150>
 2c0:	ldrb	r3, [r5]
 2c4:	cmp	r8, #1
 2c8:	strb	r3, [r7]
 2cc:	bgt	354 <coda_identifier_from_name+0x100>
 2d0:	mov	r4, #0
 2d4:	cmp	r6, #0
 2d8:	strb	r4, [r7, r8]
 2dc:	add	r8, r7, r8
 2e0:	beq	31c <coda_identifier_from_name+0xc8>
 2e4:	ldr	r5, [pc, #216]	; 3c4 <coda_identifier_from_name+0x170>
 2e8:	b	308 <coda_identifier_from_name+0xb4>
 2ec:	add	r4, r4, #1
 2f0:	cmp	r4, #1000	; 0x3e8
 2f4:	beq	38c <coda_identifier_from_name+0x138>
 2f8:	mov	r2, r4
 2fc:	mov	r1, r5
 300:	mov	r0, r8
 304:	bl	0 <sprintf>
 308:	mov	r1, r7
 30c:	mov	r0, r6
 310:	bl	0 <coda_hashtable_get_index_from_name>
 314:	cmp	r0, #0
 318:	bge	2ec <coda_identifier_from_name+0x98>
 31c:	mov	r0, r7
 320:	add	sp, sp, #12
 324:	pop	{r4, r5, r6, r7, r8, r9, pc}
 328:	mov	r0, #12
 32c:	bl	0 <malloc>
 330:	subs	r7, r0, #0
 334:	beq	3a0 <coda_identifier_from_name+0x14c>
 338:	mov	r3, #117	; 0x75
 33c:	strb	r3, [r7]
 340:	bl	0 <__ctype_b_loc>
 344:	ldr	r5, [pc, #124]	; 3c8 <coda_identifier_from_name+0x174>
 348:	mov	ip, #7
 34c:	mov	r8, ip
 350:	ldr	r9, [r0]
 354:	add	r2, r7, #1
 358:	mov	r3, #1
 35c:	mov	lr, #95	; 0x5f
 360:	ldrb	r1, [r5, #1]!
 364:	add	r3, r3, #1
 368:	add	r2, r2, #1
 36c:	lsl	r0, r1, #1
 370:	ldrh	r0, [r9, r0]
 374:	tst	r0, #8
 378:	strbne	r1, [r2, #-1]
 37c:	strbeq	lr, [r2, #-1]
 380:	cmp	r3, ip
 384:	blt	360 <coda_identifier_from_name+0x10c>
 388:	b	2d0 <coda_identifier_from_name+0x7c>
 38c:	ldr	r3, [pc, #56]	; 3cc <coda_identifier_from_name+0x178>
 390:	mov	r2, #203	; 0xcb
 394:	ldr	r1, [pc, #52]	; 3d0 <coda_identifier_from_name+0x17c>
 398:	ldr	r0, [pc, #52]	; 3d4 <coda_identifier_from_name+0x180>
 39c:	bl	0 <__assert_fail>
 3a0:	mov	r2, #11
 3a4:	mov	r3, #172	; 0xac
 3a8:	str	r3, [sp]
 3ac:	ldr	r1, [pc, #36]	; 3d8 <coda_identifier_from_name+0x184>
 3b0:	ldr	r3, [pc, #24]	; 3d0 <coda_identifier_from_name+0x17c>
 3b4:	mvn	r0, #0
 3b8:	bl	0 <coda_set_error>
 3bc:	mov	r7, #0
 3c0:	b	31c <coda_identifier_from_name+0xc8>
 3c4:	.word	0x00000108
 3c8:	.word	0x0000006c
 3cc:	.word	0x00000000
 3d0:	.word	0x00000074
 3d4:	.word	0x000000f8
 3d8:	.word	0x000000c0

000003dc <coda_c_index_to_fortran_index>:
 3dc:	cmp	r0, #8
 3e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 3e4:	mov	sl, r0
 3e8:	sub	sp, sp, #32
 3ec:	bgt	480 <coda_c_index_to_fortran_index+0xa4>
 3f0:	cmp	r0, #0
 3f4:	ble	474 <coda_c_index_to_fortran_index+0x98>
 3f8:	lsl	r8, r0, #2
 3fc:	sub	r7, r8, #4
 400:	mov	r9, r1
 404:	mov	r5, r2
 408:	add	r7, sp, r7
 40c:	add	r4, r1, r8
 410:	ldr	r6, [r4, #-4]!
 414:	mov	r0, r5
 418:	mov	r1, r6
 41c:	bl	0 <__aeabi_idivmod>
 420:	mov	r0, r5
 424:	str	r1, [r7], #-4
 428:	mov	r1, r6
 42c:	bl	0 <__aeabi_idiv>
 430:	cmp	r4, r9
 434:	mov	r5, r0
 438:	bne	410 <coda_c_index_to_fortran_index+0x34>
 43c:	cmp	sl, #0
 440:	addgt	lr, r4, r8
 444:	movgt	r2, sp
 448:	movgt	r3, #1
 44c:	movgt	r0, #0
 450:	ble	474 <coda_c_index_to_fortran_index+0x98>
 454:	ldr	r1, [r4], #4
 458:	ldr	ip, [r2], #4
 45c:	cmp	lr, r4
 460:	mla	r0, r3, ip, r0
 464:	mul	r3, r1, r3
 468:	bne	454 <coda_c_index_to_fortran_index+0x78>
 46c:	add	sp, sp, #32
 470:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 474:	mov	r0, #0
 478:	add	sp, sp, #32
 47c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 480:	mov	r2, r0
 484:	mov	r3, #8
 488:	mvn	r0, #99	; 0x63
 48c:	ldr	r1, [pc, #8]	; 49c <coda_c_index_to_fortran_index+0xc0>
 490:	bl	0 <coda_set_error>
 494:	mvn	r0, #0
 498:	b	46c <coda_c_index_to_fortran_index+0x90>
 49c:	.word	0x0000010c

000004a0 <coda_path_find_file>:
 4a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 4a4:	sub	sp, sp, #108	; 0x6c
 4a8:	mov	r4, r0
 4ac:	mov	r0, r1
 4b0:	mov	r7, r1
 4b4:	str	r2, [sp, #8]
 4b8:	bl	0 <strlen>
 4bc:	cmp	r4, #0
 4c0:	beq	4d0 <coda_path_find_file+0x30>
 4c4:	ldrb	r3, [r4]
 4c8:	cmp	r3, #0
 4cc:	bne	4e8 <coda_path_find_file+0x48>
 4d0:	ldr	r2, [sp, #8]
 4d4:	mov	r3, #0
 4d8:	str	r3, [r2]
 4dc:	mov	r0, r3
 4e0:	add	sp, sp, #108	; 0x6c
 4e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 4e8:	mov	r8, r0
 4ec:	mov	r0, r4
 4f0:	bl	0 <strdup>
 4f4:	subs	r3, r0, #0
 4f8:	str	r3, [sp, #12]
 4fc:	beq	654 <coda_path_find_file+0x1b4>
 500:	ldrb	r3, [r3]
 504:	cmp	r3, #0
 508:	beq	5e4 <coda_path_find_file+0x144>
 50c:	ldr	fp, [sp, #12]
 510:	mov	r6, #0
 514:	cmp	r3, #58	; 0x3a
 518:	mov	r5, r6
 51c:	ldr	sl, [pc, #332]	; 670 <coda_path_find_file+0x1d0>
 520:	mov	r9, #3
 524:	mov	r4, fp
 528:	beq	5d0 <coda_path_find_file+0x130>
 52c:	ldrb	r3, [r4, #1]!
 530:	cmp	r3, #0
 534:	cmpne	r3, #58	; 0x3a
 538:	bne	52c <coda_path_find_file+0x8c>
 53c:	cmp	r3, #0
 540:	bne	5d0 <coda_path_find_file+0x130>
 544:	mov	r0, fp
 548:	bl	0 <strlen>
 54c:	add	r3, r8, r0
 550:	cmp	r3, r6
 554:	blt	57c <coda_path_find_file+0xdc>
 558:	add	r1, r3, #2
 55c:	mov	r0, r5
 560:	str	r3, [sp, #4]
 564:	bl	0 <realloc>
 568:	ldr	r3, [sp, #4]
 56c:	cmp	r0, #0
 570:	beq	608 <coda_path_find_file+0x168>
 574:	add	r6, r3, #1
 578:	mov	r5, r0
 57c:	mov	r2, fp
 580:	mov	r3, r7
 584:	mov	r1, sl
 588:	mov	r0, r5
 58c:	bl	0 <sprintf>
 590:	add	r2, sp, #16
 594:	mov	r1, r5
 598:	mov	r0, r9
 59c:	bl	0 <__xstat>
 5a0:	cmp	r0, #0
 5a4:	bne	5b4 <coda_path_find_file+0x114>
 5a8:	ldr	r3, [sp, #32]
 5ac:	tst	r3, #32768	; 0x8000
 5b0:	bne	638 <coda_path_find_file+0x198>
 5b4:	ldrb	r3, [r4]
 5b8:	cmp	r3, #0
 5bc:	beq	5dc <coda_path_find_file+0x13c>
 5c0:	mov	fp, r4
 5c4:	cmp	r3, #58	; 0x3a
 5c8:	mov	r4, fp
 5cc:	bne	52c <coda_path_find_file+0x8c>
 5d0:	mov	r3, #0
 5d4:	strb	r3, [r4], #1
 5d8:	b	544 <coda_path_find_file+0xa4>
 5dc:	mov	r0, r5
 5e0:	bl	0 <free>
 5e4:	ldr	r0, [sp, #12]
 5e8:	bl	0 <free>
 5ec:	ldr	r1, [sp, #8]
 5f0:	mov	r2, #0
 5f4:	mov	r3, r2
 5f8:	mov	r0, r3
 5fc:	str	r2, [r1]
 600:	add	sp, sp, #108	; 0x6c
 604:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 608:	ldr	r3, [pc, #100]	; 674 <coda_path_find_file+0x1d4>
 60c:	ldr	r2, [pc, #100]	; 678 <coda_path_find_file+0x1d8>
 610:	ldr	r1, [pc, #100]	; 67c <coda_path_find_file+0x1dc>
 614:	mvn	r0, #0
 618:	bl	0 <coda_set_error>
 61c:	cmp	r5, #0
 620:	mvneq	r3, #0
 624:	beq	4dc <coda_path_find_file+0x3c>
 628:	mov	r0, r5
 62c:	bl	0 <free>
 630:	mvn	r3, #0
 634:	b	4dc <coda_path_find_file+0x3c>
 638:	ldr	r3, [sp, #8]
 63c:	str	r0, [sp, #4]
 640:	ldr	r0, [sp, #12]
 644:	str	r5, [r3]
 648:	bl	0 <free>
 64c:	ldr	r3, [sp, #4]
 650:	b	4dc <coda_path_find_file+0x3c>
 654:	ldr	r3, [pc, #36]	; 680 <coda_path_find_file+0x1e0>
 658:	ldr	r2, [pc, #24]	; 678 <coda_path_find_file+0x1d8>
 65c:	ldr	r1, [pc, #24]	; 67c <coda_path_find_file+0x1dc>
 660:	mvn	r0, #0
 664:	bl	0 <coda_set_error>
 668:	mvn	r3, #0
 66c:	b	4dc <coda_path_find_file+0x3c>
 670:	.word	0x0000016c
 674:	.word	0x000001a5
 678:	.word	0x00000074
 67c:	.word	0x00000138
 680:	.word	0x00000187

00000684 <coda_path_from_path>:
 684:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 688:	mov	r6, r2
 68c:	mov	r4, r1
 690:	mov	sl, r3
 694:	mov	r9, r0
 698:	bl	0 <strlen>
 69c:	cmp	r6, #0
 6a0:	mov	fp, r0
 6a4:	mov	r5, r0
 6a8:	beq	920 <coda_path_from_path+0x29c>
 6ac:	mov	r0, r6
 6b0:	bl	0 <strlen>
 6b4:	mov	r8, r0
 6b8:	mov	r7, r0
 6bc:	cmp	r4, #0
 6c0:	cmpne	fp, #0
 6c4:	ble	714 <coda_path_from_path+0x90>
 6c8:	add	r0, r9, fp
 6cc:	ldrb	r3, [r0, #-1]!
 6d0:	cmp	r3, #92	; 0x5c
 6d4:	cmpne	r3, #47	; 0x2f
 6d8:	beq	80c <coda_path_from_path+0x188>
 6dc:	subs	r5, r5, #1
 6e0:	bne	6cc <coda_path_from_path+0x48>
 6e4:	add	r0, r7, #2
 6e8:	bl	0 <malloc>
 6ec:	cmp	r0, #0
 6f0:	str	r0, [sl]
 6f4:	bne	738 <coda_path_from_path+0xb4>
 6f8:	ldr	r3, [pc, #612]	; 964 <coda_path_from_path+0x2e0>
 6fc:	ldr	r2, [pc, #612]	; 968 <coda_path_from_path+0x2e4>
 700:	ldr	r1, [pc, #612]	; 96c <coda_path_from_path+0x2e8>
 704:	mvn	r0, #0
 708:	bl	0 <coda_set_error>
 70c:	mvn	r0, #0
 710:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 714:	add	r0, fp, r7
 718:	add	r0, r0, #2
 71c:	bl	0 <malloc>
 720:	cmp	r0, #0
 724:	str	r0, [sl]
 728:	mov	r4, r0
 72c:	beq	6f8 <coda_path_from_path+0x74>
 730:	cmp	fp, #0
 734:	bgt	82c <coda_path_from_path+0x1a8>
 738:	cmp	r7, #0
 73c:	mov	r5, r0
 740:	mov	r4, r0
 744:	bgt	854 <coda_path_from_path+0x1d0>
 748:	mov	r3, #0
 74c:	strb	r3, [r5]
 750:	ldrb	r0, [r4]
 754:	cmp	r0, r3
 758:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 75c:	cmp	r0, #46	; 0x2e
 760:	bne	798 <coda_path_from_path+0x114>
 764:	ldrb	r2, [r4, #1]
 768:	cmp	r2, #47	; 0x2f
 76c:	bne	798 <coda_path_from_path+0x114>
 770:	mov	r2, r4
 774:	b	784 <coda_path_from_path+0x100>
 778:	ldrb	r1, [r2, #1]
 77c:	cmp	r1, #47	; 0x2f
 780:	bne	798 <coda_path_from_path+0x114>
 784:	ldrb	r0, [r2, #2]
 788:	add	r3, r3, #2
 78c:	add	r2, r2, #2
 790:	cmp	r0, #46	; 0x2e
 794:	beq	778 <coda_path_from_path+0xf4>
 798:	mov	r2, #0
 79c:	mov	r6, r2
 7a0:	mov	r5, #2
 7a4:	b	7e8 <coda_path_from_path+0x164>
 7a8:	cmp	r0, #92	; 0x5c
 7ac:	cmpne	r0, #47	; 0x2f
 7b0:	bne	7d4 <coda_path_from_path+0x150>
 7b4:	add	ip, r4, r3
 7b8:	ldrb	r1, [ip, #1]
 7bc:	cmp	r1, #92	; 0x5c
 7c0:	cmpne	r1, #47	; 0x2f
 7c4:	addeq	r3, r3, #1
 7c8:	beq	7e4 <coda_path_from_path+0x160>
 7cc:	cmp	r1, #46	; 0x2e
 7d0:	beq	86c <coda_path_from_path+0x1e8>
 7d4:	mov	r1, r2
 7d8:	add	r3, r3, #1
 7dc:	add	r2, r2, #1
 7e0:	strb	r0, [r4, r1]
 7e4:	ldrb	r0, [r4, r3]
 7e8:	cmp	r0, #0
 7ec:	bne	7a8 <coda_path_from_path+0x124>
 7f0:	cmp	r2, #0
 7f4:	moveq	r2, #1
 7f8:	moveq	r3, #46	; 0x2e
 7fc:	mov	r0, #0
 800:	strbeq	r3, [r4]
 804:	strb	r0, [r4, r2]
 808:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80c:	add	r0, r5, r7
 810:	add	r0, r0, #2
 814:	bl	0 <malloc>
 818:	cmp	r0, #0
 81c:	mov	r4, r0
 820:	str	r0, [sl]
 824:	beq	6f8 <coda_path_from_path+0x74>
 828:	mov	fp, r5
 82c:	mov	r1, r9
 830:	mov	r2, fp
 834:	mov	r0, r4
 838:	bl	0 <memcpy>
 83c:	cmp	r7, #0
 840:	add	r5, r4, fp
 844:	ble	748 <coda_path_from_path+0xc4>
 848:	add	r5, r5, #1
 84c:	mov	r3, #47	; 0x2f
 850:	strb	r3, [r4, fp]
 854:	mov	r0, r5
 858:	mov	r1, r6
 85c:	mov	r2, r8
 860:	bl	0 <memcpy>
 864:	add	r5, r5, r8
 868:	b	748 <coda_path_from_path+0xc4>
 86c:	ldrb	r1, [ip, #2]
 870:	cmp	r1, #47	; 0x2f
 874:	cmpne	r1, #0
 878:	moveq	lr, #1
 87c:	movne	lr, #0
 880:	cmp	r1, #92	; 0x5c
 884:	orreq	lr, lr, #1
 888:	cmp	lr, #0
 88c:	addne	r3, r3, #2
 890:	bne	7e4 <coda_path_from_path+0x160>
 894:	cmp	r1, #46	; 0x2e
 898:	bne	7d4 <coda_path_from_path+0x150>
 89c:	ldrb	ip, [ip, #3]
 8a0:	cmp	ip, #47	; 0x2f
 8a4:	cmpne	ip, #0
 8a8:	moveq	r1, #1
 8ac:	movne	r1, #0
 8b0:	cmp	ip, #92	; 0x5c
 8b4:	orreq	r1, r1, #1
 8b8:	cmp	r1, #0
 8bc:	beq	7d4 <coda_path_from_path+0x150>
 8c0:	cmp	r2, #1
 8c4:	ble	8dc <coda_path_from_path+0x258>
 8c8:	add	ip, r4, r2
 8cc:	mov	r1, r2
 8d0:	ldrb	lr, [ip, #-1]
 8d4:	cmp	lr, #46	; 0x2e
 8d8:	beq	92c <coda_path_from_path+0x2a8>
 8dc:	subs	ip, r2, #1
 8e0:	bcc	954 <coda_path_from_path+0x2d0>
 8e4:	ldrb	r1, [r4, ip]
 8e8:	cmp	r1, #92	; 0x5c
 8ec:	cmpne	r1, #47	; 0x2f
 8f0:	beq	914 <coda_path_from_path+0x290>
 8f4:	mov	r1, r2
 8f8:	add	r7, r4, ip
 8fc:	subs	ip, ip, #1
 900:	bcc	7d8 <coda_path_from_path+0x154>
 904:	ldrb	lr, [r7, #-1]!
 908:	cmp	lr, #92	; 0x5c
 90c:	cmpne	lr, #47	; 0x2f
 910:	bne	8fc <coda_path_from_path+0x278>
 914:	mov	r2, ip
 918:	add	r3, r3, #3
 91c:	b	7e4 <coda_path_from_path+0x160>
 920:	mov	r7, r6
 924:	mov	r8, r6
 928:	b	6bc <coda_path_from_path+0x38>
 92c:	ldrb	lr, [ip, #-2]
 930:	cmp	lr, #46	; 0x2e
 934:	bne	8dc <coda_path_from_path+0x258>
 938:	cmp	r2, #2
 93c:	beq	95c <coda_path_from_path+0x2d8>
 940:	ldrb	ip, [ip, #-3]
 944:	cmp	ip, #47	; 0x2f
 948:	cmpne	ip, #92	; 0x5c
 94c:	bne	8dc <coda_path_from_path+0x258>
 950:	b	7d8 <coda_path_from_path+0x154>
 954:	mov	r1, r6
 958:	b	7d8 <coda_path_from_path+0x154>
 95c:	mov	r1, r5
 960:	b	7d8 <coda_path_from_path+0x154>
 964:	.word	0x000001e1
 968:	.word	0x00000074
 96c:	.word	0x00000138

00000970 <coda_path_for_program>:
 970:	push	{r4, r5, r6, lr}
 974:	mov	r3, #0
 978:	subs	r5, r0, #0
 97c:	sub	sp, sp, #1040	; 0x410
 980:	str	r3, [r1]
 984:	beq	a8c <coda_path_for_program+0x11c>
 988:	ldrb	r3, [r5]
 98c:	mov	r4, r1
 990:	cmp	r3, #0
 994:	beq	9c4 <coda_path_for_program+0x54>
 998:	cmp	r3, #47	; 0x2f
 99c:	cmpne	r3, #92	; 0x5c
 9a0:	beq	a9c <coda_path_for_program+0x12c>
 9a4:	mov	r2, r5
 9a8:	b	9b8 <coda_path_for_program+0x48>
 9ac:	cmp	r3, #92	; 0x5c
 9b0:	cmpne	r3, #47	; 0x2f
 9b4:	beq	a9c <coda_path_for_program+0x12c>
 9b8:	ldrb	r3, [r2, #1]!
 9bc:	cmp	r3, #0
 9c0:	bne	9ac <coda_path_for_program+0x3c>
 9c4:	ldr	r0, [pc, #304]	; afc <coda_path_for_program+0x18c>
 9c8:	bl	0 <getenv>
 9cc:	cmp	r0, #0
 9d0:	beq	ae0 <coda_path_for_program+0x170>
 9d4:	ldr	r0, [pc, #288]	; afc <coda_path_for_program+0x18c>
 9d8:	bl	0 <getenv>
 9dc:	mov	r2, r4
 9e0:	mov	r1, r5
 9e4:	bl	4a0 <coda_path_find_file>
 9e8:	cmp	r0, #0
 9ec:	bne	af4 <coda_path_for_program+0x184>
 9f0:	ldr	r6, [r4]
 9f4:	cmp	r6, #0
 9f8:	beq	a8c <coda_path_for_program+0x11c>
 9fc:	ldrb	r5, [r6]
 a00:	cmp	r5, #92	; 0x5c
 a04:	cmpne	r5, #47	; 0x2f
 a08:	beq	a8c <coda_path_for_program+0x11c>
 a0c:	bl	0 <__ctype_b_loc>
 a10:	lsl	r5, r5, #1
 a14:	ldr	r3, [r0]
 a18:	ldrh	r3, [r3, r5]
 a1c:	tst	r3, #1024	; 0x400
 a20:	beq	a30 <coda_path_for_program+0xc0>
 a24:	ldrb	r3, [r6, #1]
 a28:	cmp	r3, #58	; 0x3a
 a2c:	beq	a8c <coda_path_for_program+0x11c>
 a30:	add	r3, sp, #12
 a34:	mov	r0, r3
 a38:	mov	r1, #1024	; 0x400
 a3c:	str	r3, [sp, #4]
 a40:	bl	0 <getcwd>
 a44:	cmp	r0, #0
 a48:	beq	a8c <coda_path_for_program+0x11c>
 a4c:	ldr	r5, [r4]
 a50:	mov	ip, #0
 a54:	mov	r3, r4
 a58:	ldr	r0, [sp, #4]
 a5c:	mov	r2, r5
 a60:	mov	r1, ip
 a64:	strb	ip, [sp, #1036]	; 0x40c
 a68:	bl	684 <coda_path_from_path>
 a6c:	subs	r4, r0, #0
 a70:	mov	r0, r5
 a74:	beq	ad0 <coda_path_for_program+0x160>
 a78:	bl	0 <free>
 a7c:	mvn	r4, #0
 a80:	mov	r0, r4
 a84:	add	sp, sp, #1040	; 0x410
 a88:	pop	{r4, r5, r6, pc}
 a8c:	mov	r4, #0
 a90:	mov	r0, r4
 a94:	add	sp, sp, #1040	; 0x410
 a98:	pop	{r4, r5, r6, pc}
 a9c:	mov	r0, r5
 aa0:	bl	0 <strdup>
 aa4:	cmp	r0, #0
 aa8:	mov	r6, r0
 aac:	str	r0, [r4]
 ab0:	bne	9fc <coda_path_for_program+0x8c>
 ab4:	ldr	r3, [pc, #68]	; b00 <coda_path_for_program+0x190>
 ab8:	ldr	r2, [pc, #68]	; b04 <coda_path_for_program+0x194>
 abc:	ldr	r1, [pc, #68]	; b08 <coda_path_for_program+0x198>
 ac0:	mvn	r0, #0
 ac4:	bl	0 <coda_set_error>
 ac8:	mvn	r4, #0
 acc:	b	a90 <coda_path_for_program+0x120>
 ad0:	bl	0 <free>
 ad4:	mov	r0, r4
 ad8:	add	sp, sp, #1040	; 0x410
 adc:	pop	{r4, r5, r6, pc}
 ae0:	str	r0, [r4]
 ae4:	mov	r4, r0
 ae8:	mov	r0, r4
 aec:	add	sp, sp, #1040	; 0x410
 af0:	pop	{r4, r5, r6, pc}
 af4:	mvn	r4, #0
 af8:	b	a90 <coda_path_for_program+0x120>
 afc:	.word	0x00000174
 b00:	.word	0x00000219
 b04:	.word	0x00000074
 b08:	.word	0x00000138

00000b0c <coda_isNaN>:
 b0c:	vmov	r2, r3, d0
 b10:	ldr	r1, [pc, #64]	; b58 <coda_isNaN+0x4c>
 b14:	mov	r0, #0
 b18:	push	{r4, r5}
 b1c:	and	r5, r3, r1
 b20:	and	r4, r2, r0
 b24:	cmp	r5, r1
 b28:	cmpeq	r4, r0
 b2c:	movne	r0, #0
 b30:	bne	b50 <coda_isNaN+0x44>
 b34:	ldr	r1, [pc, #32]	; b5c <coda_isNaN+0x50>
 b38:	mvn	r0, #0
 b3c:	and	r2, r2, r0
 b40:	and	r3, r3, r1
 b44:	orrs	r3, r2, r3
 b48:	movne	r0, #1
 b4c:	moveq	r0, #0
 b50:	pop	{r4, r5}
 b54:	bx	lr
 b58:	.word	0x7ff00000
 b5c:	.word	0x000fffff

00000b60 <coda_NaN>:
 b60:	vldr	d0, [pc]	; b68 <coda_NaN+0x8>
 b64:	bx	lr
 b68:	.word	0x00000000
 b6c:	.word	0x7ff80000

00000b70 <coda_isInf>:
 b70:	vmov	r2, r3, d0
 b74:	vmov	r2, s0
 b78:	ldr	r1, [pc, #24]	; b98 <coda_isInf+0x28>
 b7c:	mov	r0, #0
 b80:	bic	r3, r3, #-2147483648	; 0x80000000
 b84:	cmp	r3, r1
 b88:	cmpeq	r2, r0
 b8c:	moveq	r0, #1
 b90:	movne	r0, #0
 b94:	bx	lr
 b98:	.word	0x7ff00000

00000b9c <coda_isPlusInf>:
 b9c:	vmov	r2, r3, d0
 ba0:	ldr	r1, [pc, #20]	; bbc <coda_isPlusInf+0x20>
 ba4:	mov	r0, #0
 ba8:	cmp	r3, r1
 bac:	cmpeq	r2, r0
 bb0:	moveq	r0, #1
 bb4:	movne	r0, #0
 bb8:	bx	lr
 bbc:	.word	0x7ff00000

00000bc0 <coda_isMinInf>:
 bc0:	vmov	r2, r3, d0
 bc4:	ldr	r1, [pc, #20]	; be0 <coda_isMinInf+0x20>
 bc8:	mov	r0, #0
 bcc:	cmp	r3, r1
 bd0:	cmpeq	r2, r0
 bd4:	moveq	r0, #1
 bd8:	movne	r0, #0
 bdc:	bx	lr
 be0:	.word	0xfff00000

00000be4 <coda_PlusInf>:
 be4:	vldr	d0, [pc, #4]	; bf0 <coda_PlusInf+0xc>
 be8:	bx	lr
 bec:	nop			; (mov r0, r0)
 bf0:	.word	0x00000000
 bf4:	.word	0x7ff00000

00000bf8 <coda_MinInf>:
 bf8:	vldr	d0, [pc]	; c00 <coda_MinInf+0x8>
 bfc:	bx	lr
 c00:	.word	0x00000000
 c04:	.word	0xfff00000

00000c08 <coda_str64u>:
 c08:	push	{r4, r5, r6, r7, r8, lr}
 c0c:	mov	r7, #0
 c10:	mvn	r6, #0
 c14:	cmp	r1, r7
 c18:	cmpeq	r0, r6
 c1c:	sub	sp, sp, #8
 c20:	mov	r4, r0
 c24:	mov	r6, r2
 c28:	bls	cbc <coda_str64u+0xb4>
 c2c:	add	r3, pc, #164	; 0xa4
 c30:	ldrd	r2, [r3]
 c34:	mov	r5, r1
 c38:	bl	0 <__aeabi_uldivmod>
 c3c:	mov	r0, r4
 c40:	mov	r1, r5
 c44:	mov	r8, r2
 c48:	add	r3, pc, #136	; 0x88
 c4c:	ldrd	r2, [r3]
 c50:	bl	0 <__aeabi_uldivmod>
 c54:	add	r3, pc, #124	; 0x7c
 c58:	ldrd	r2, [r3]
 c5c:	bl	0 <__aeabi_uldivmod>
 c60:	mov	r0, r4
 c64:	mov	r1, r5
 c68:	mov	r7, r2
 c6c:	add	r3, pc, #108	; 0x6c
 c70:	ldrd	r2, [r3]
 c74:	bl	0 <__aeabi_uldivmod>
 c78:	orrs	r3, r0, r1
 c7c:	bne	c9c <coda_str64u+0x94>
 c80:	mov	r3, r8
 c84:	mov	r2, r7
 c88:	mov	r0, r6
 c8c:	ldr	r1, [pc, #84]	; ce8 <coda_str64u+0xe0>
 c90:	add	sp, sp, #8
 c94:	pop	{r4, r5, r6, r7, r8, lr}
 c98:	b	0 <sprintf>
 c9c:	mov	r2, r0
 ca0:	str	r8, [sp]
 ca4:	mov	r3, r7
 ca8:	mov	r0, r6
 cac:	ldr	r1, [pc, #56]	; cec <coda_str64u+0xe4>
 cb0:	bl	0 <sprintf>
 cb4:	add	sp, sp, #8
 cb8:	pop	{r4, r5, r6, r7, r8, pc}
 cbc:	mov	r2, r0
 cc0:	ldr	r1, [pc, #40]	; cf0 <coda_str64u+0xe8>
 cc4:	mov	r0, r6
 cc8:	add	sp, sp, #8
 ccc:	pop	{r4, r5, r6, r7, r8, lr}
 cd0:	b	0 <sprintf>
 cd4:	nop			; (mov r0, r0)
 cd8:	.word	0x05f5e100
 cdc:	.word	0x00000000
 ce0:	.word	0x6fc10000
 ce4:	.word	0x002386f2
 ce8:	.word	0x00000190
 cec:	.word	0x00000180
 cf0:	.word	0x0000017c

00000cf4 <coda_str64>:
 cf4:	cmp	r0, #0
 cf8:	sbcs	r3, r1, #0
 cfc:	blt	d04 <coda_str64+0x10>
 d00:	b	c08 <coda_str64u>
 d04:	mov	r3, #45	; 0x2d
 d08:	rsbs	r0, r0, #0
 d0c:	push	{r4, r5}
 d10:	rsc	r1, r1, #0
 d14:	strb	r3, [r2], #1
 d18:	pop	{r4, r5}
 d1c:	b	c08 <coda_str64u>

00000d20 <coda_strfl>:
 d20:	vmov	r2, r3, d0
 d24:	push	{r4, r5, r6, r7, lr}
 d28:	mov	r4, #0
 d2c:	ldr	r5, [pc, #172]	; de0 <coda_strfl+0xc0>
 d30:	and	r6, r2, r4
 d34:	and	r7, r3, r5
 d38:	cmp	r7, r5
 d3c:	cmpeq	r6, r4
 d40:	mov	ip, r0
 d44:	mov	r1, r3
 d48:	vmov	r0, s0
 d4c:	beq	d88 <coda_strfl+0x68>
 d50:	ldr	r5, [pc, #136]	; de0 <coda_strfl+0xc0>
 d54:	mov	r4, #0
 d58:	cmp	r1, r5
 d5c:	cmpeq	r0, r4
 d60:	beq	dc8 <coda_strfl+0xa8>
 d64:	ldr	r5, [pc, #120]	; de4 <coda_strfl+0xc4>
 d68:	mov	r4, #0
 d6c:	cmp	r1, r5
 d70:	cmpeq	r0, r4
 d74:	beq	db0 <coda_strfl+0x90>
 d78:	mov	r0, ip
 d7c:	ldr	r1, [pc, #100]	; de8 <coda_strfl+0xc8>
 d80:	pop	{r4, r5, r6, r7, lr}
 d84:	b	0 <sprintf>
 d88:	ldr	r5, [pc, #92]	; dec <coda_strfl+0xcc>
 d8c:	mvn	r4, #0
 d90:	and	r4, r4, r2
 d94:	and	r5, r5, r3
 d98:	orrs	lr, r4, r5
 d9c:	beq	d50 <coda_strfl+0x30>
 da0:	ldr	r3, [pc, #72]	; df0 <coda_strfl+0xd0>
 da4:	ldr	r0, [r3]
 da8:	str	r0, [ip]
 dac:	pop	{r4, r5, r6, r7, pc}
 db0:	ldr	r3, [pc, #60]	; df4 <coda_strfl+0xd4>
 db4:	ldrb	r2, [r3, #4]
 db8:	ldr	r0, [r3]
 dbc:	strb	r2, [ip, #4]
 dc0:	str	r0, [ip]
 dc4:	pop	{r4, r5, r6, r7, pc}
 dc8:	ldr	r3, [pc, #40]	; df8 <coda_strfl+0xd8>
 dcc:	ldrb	r2, [r3, #4]
 dd0:	ldr	r0, [r3]
 dd4:	strb	r2, [ip, #4]
 dd8:	str	r0, [ip]
 ddc:	pop	{r4, r5, r6, r7, pc}
 de0:	.word	0x7ff00000
 de4:	.word	0xfff00000
 de8:	.word	0x000001b0
 dec:	.word	0x000fffff
 df0:	.word	0x0000019c
 df4:	.word	0x000001a8
 df8:	.word	0x000001a0
