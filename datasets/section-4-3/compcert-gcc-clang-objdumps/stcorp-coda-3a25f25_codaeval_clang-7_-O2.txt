
../compcert-repos/stcorp-coda-3a25f25/codaeval:     file format elf32-littlearm


Disassembly of section .init:

00010e04 <.init>:
   10e04:	push	{r3, lr}
   10e08:	bl	11028 <_start@@Base+0x3c>
   10e0c:	pop	{r3, pc}

Disassembly of section .plt:

00010e10 <coda_match_filefilter@plt-0x14>:
   10e10:	push	{lr}		; (str lr, [sp, #-4]!)
   10e14:	ldr	lr, [pc, #4]	; 10e20 <coda_match_filefilter@plt-0x4>
   10e18:	add	lr, pc, lr
   10e1c:	ldr	pc, [lr, #8]!
   10e20:	andeq	r2, r1, r0, ror #3

00010e24 <coda_match_filefilter@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #73728	; 0x12000
   10e2c:	ldr	pc, [ip, #480]!	; 0x1e0

00010e30 <coda_expression_eval_integer@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #73728	; 0x12000
   10e38:	ldr	pc, [ip, #472]!	; 0x1d8

00010e3c <strcmp@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #73728	; 0x12000
   10e44:	ldr	pc, [ip, #464]!	; 0x1d0

00010e48 <printf@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #73728	; 0x12000
   10e50:	ldr	pc, [ip, #456]!	; 0x1c8

00010e54 <coda_set_error@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #73728	; 0x12000
   10e5c:	ldr	pc, [ip, #448]!	; 0x1c0

00010e60 <coda_open@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #73728	; 0x12000
   10e68:	ldr	pc, [ip, #440]!	; 0x1b8

00010e6c <free@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #73728	; 0x12000
   10e74:	ldr	pc, [ip, #432]!	; 0x1b0

00010e78 <coda_set_definition_path_conditional@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #73728	; 0x12000
   10e80:	ldr	pc, [ip, #424]!	; 0x1a8

00010e84 <coda_set_definition_path@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #73728	; 0x12000
   10e8c:	ldr	pc, [ip, #416]!	; 0x1a0

00010e90 <fwrite@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #73728	; 0x12000
   10e98:	ldr	pc, [ip, #408]!	; 0x198

00010e9c <coda_expression_eval_bool@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #73728	; 0x12000
   10ea4:	ldr	pc, [ip, #400]!	; 0x190

00010ea8 <coda_cursor_set_product@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #73728	; 0x12000
   10eb0:	ldr	pc, [ip, #392]!	; 0x188

00010eb4 <coda_done@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #73728	; 0x12000
   10ebc:	ldr	pc, [ip, #384]!	; 0x180

00010ec0 <puts@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #73728	; 0x12000
   10ec8:	ldr	pc, [ip, #376]!	; 0x178

00010ecc <__libc_start_main@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #73728	; 0x12000
   10ed4:	ldr	pc, [ip, #368]!	; 0x170

00010ed8 <coda_expression_delete@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #73728	; 0x12000
   10ee0:	ldr	pc, [ip, #360]!	; 0x168

00010ee4 <__gmon_start__@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #73728	; 0x12000
   10eec:	ldr	pc, [ip, #352]!	; 0x160

00010ef0 <__ctype_b_loc@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #73728	; 0x12000
   10ef8:	ldr	pc, [ip, #344]!	; 0x158

00010efc <exit@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #73728	; 0x12000
   10f04:	ldr	pc, [ip, #336]!	; 0x150

00010f08 <strlen@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #73728	; 0x12000
   10f10:	ldr	pc, [ip, #328]!	; 0x148

00010f14 <fprintf@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #73728	; 0x12000
   10f1c:	ldr	pc, [ip, #320]!	; 0x140

00010f20 <coda_init@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #73728	; 0x12000
   10f28:	ldr	pc, [ip, #312]!	; 0x138

00010f2c <coda_set_option_perform_conversions@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #73728	; 0x12000
   10f34:	ldr	pc, [ip, #304]!	; 0x130

00010f38 <coda_expression_eval_string@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #73728	; 0x12000
   10f40:	ldr	pc, [ip, #296]!	; 0x128

00010f44 <putchar@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #73728	; 0x12000
   10f4c:	ldr	pc, [ip, #288]!	; 0x120

00010f50 <coda_expression_get_type@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #73728	; 0x12000
   10f58:	ldr	pc, [ip, #280]!	; 0x118

00010f5c <coda_close@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #73728	; 0x12000
   10f64:	ldr	pc, [ip, #272]!	; 0x110

00010f68 <coda_expression_is_constant@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #73728	; 0x12000
   10f70:	ldr	pc, [ip, #264]!	; 0x108

00010f74 <coda_expression_eval_float@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #73728	; 0x12000
   10f7c:	ldr	pc, [ip, #256]!	; 0x100

00010f80 <coda_expression_eval_node@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #73728	; 0x12000
   10f88:	ldr	pc, [ip, #248]!	; 0xf8

00010f8c <coda_errno_to_string@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #73728	; 0x12000
   10f94:	ldr	pc, [ip, #240]!	; 0xf0

00010f98 <coda_expression_get_type_name@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #73728	; 0x12000
   10fa0:	ldr	pc, [ip, #232]!	; 0xe8

00010fa4 <coda_expression_from_string@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #73728	; 0x12000
   10fac:	ldr	pc, [ip, #224]!	; 0xe0

00010fb0 <coda_get_libcoda_version@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #73728	; 0x12000
   10fb8:	ldr	pc, [ip, #216]!	; 0xd8

00010fbc <coda_get_errno@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #73728	; 0x12000
   10fc4:	ldr	pc, [ip, #208]!	; 0xd0

00010fc8 <abort@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #73728	; 0x12000
   10fd0:	ldr	pc, [ip, #200]!	; 0xc8

00010fd4 <coda_str64@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #73728	; 0x12000
   10fdc:	ldr	pc, [ip, #192]!	; 0xc0

00010fe0 <__assert_fail@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #73728	; 0x12000
   10fe8:	ldr	pc, [ip, #184]!	; 0xb8

Disassembly of section .text:

00010fec <_start@@Base>:
   10fec:	mov	fp, #0
   10ff0:	mov	lr, #0
   10ff4:	pop	{r1}		; (ldr r1, [sp], #4)
   10ff8:	mov	r2, sp
   10ffc:	push	{r2}		; (str r2, [sp, #-4]!)
   11000:	push	{r0}		; (str r0, [sp, #-4]!)
   11004:	ldr	ip, [pc, #16]	; 1101c <_start@@Base+0x30>
   11008:	push	{ip}		; (str ip, [sp, #-4]!)
   1100c:	ldr	r0, [pc, #12]	; 11020 <_start@@Base+0x34>
   11010:	ldr	r3, [pc, #12]	; 11024 <_start@@Base+0x38>
   11014:	bl	10ecc <__libc_start_main@plt>
   11018:	bl	10fc8 <abort@plt>
   1101c:	andeq	r1, r1, r0, lsr sp
   11020:	andeq	r1, r1, r8, ror r2
   11024:	ldrdeq	r1, [r1], -r0
   11028:	ldr	r3, [pc, #20]	; 11044 <_start@@Base+0x58>
   1102c:	ldr	r2, [pc, #20]	; 11048 <_start@@Base+0x5c>
   11030:	add	r3, pc, r3
   11034:	ldr	r2, [r3, r2]
   11038:	cmp	r2, #0
   1103c:	bxeq	lr
   11040:	b	10ee4 <__gmon_start__@plt>
   11044:	andeq	r1, r1, r8, asr #31
   11048:	andeq	r0, r0, r4, lsr #1
   1104c:	ldr	r0, [pc, #24]	; 1106c <_start@@Base+0x80>
   11050:	ldr	r3, [pc, #24]	; 11070 <_start@@Base+0x84>
   11054:	cmp	r3, r0
   11058:	bxeq	lr
   1105c:	ldr	r3, [pc, #16]	; 11074 <_start@@Base+0x88>
   11060:	cmp	r3, #0
   11064:	bxeq	lr
   11068:	bx	r3
   1106c:	strheq	r3, [r2], -r0
   11070:	strheq	r3, [r2], -r0
   11074:	andeq	r0, r0, r0
   11078:	ldr	r0, [pc, #36]	; 110a4 <_start@@Base+0xb8>
   1107c:	ldr	r1, [pc, #36]	; 110a8 <_start@@Base+0xbc>
   11080:	sub	r1, r1, r0
   11084:	asr	r1, r1, #2
   11088:	add	r1, r1, r1, lsr #31
   1108c:	asrs	r1, r1, #1
   11090:	bxeq	lr
   11094:	ldr	r3, [pc, #16]	; 110ac <_start@@Base+0xc0>
   11098:	cmp	r3, #0
   1109c:	bxeq	lr
   110a0:	bx	r3
   110a4:	strheq	r3, [r2], -r0
   110a8:	strheq	r3, [r2], -r0
   110ac:	andeq	r0, r0, r0
   110b0:	push	{r4, lr}
   110b4:	ldr	r4, [pc, #24]	; 110d4 <_start@@Base+0xe8>
   110b8:	ldrb	r3, [r4]
   110bc:	cmp	r3, #0
   110c0:	popne	{r4, pc}
   110c4:	bl	1104c <_start@@Base+0x60>
   110c8:	mov	r3, #1
   110cc:	strb	r3, [r4]
   110d0:	pop	{r4, pc}
   110d4:	strheq	r3, [r2], -r4
   110d8:	b	11078 <_start@@Base+0x8c>

000110dc <callback@@Base>:
   110dc:	push	{r4, r5, r6, r7, fp, lr}
   110e0:	add	fp, sp, #16
   110e4:	sub	sp, sp, #528	; 0x210
   110e8:	mov	r5, #0
   110ec:	cmp	r1, #4
   110f0:	bhi	111fc <callback@@Base+0x120>
   110f4:	mov	r4, r0
   110f8:	add	r0, pc, #4
   110fc:	mov	r3, r2
   11100:	ldr	pc, [r0, r1, lsl #2]
   11104:	andeq	r1, r1, r4, lsr #3
   11108:	andeq	r1, r1, r0, asr #3
   1110c:	andeq	r1, r1, r0, ror #3
   11110:	strdeq	r1, [r1], -ip
   11114:	andeq	r1, r1, r8, lsl r1
   11118:	mov	r0, #0
   1111c:	sub	r1, fp, #20
   11120:	str	r0, [fp, #-20]	; 0xffffffec
   11124:	mov	r0, r4
   11128:	bl	10e60 <coda_open@plt>
   1112c:	mov	r5, #1
   11130:	cmp	r0, #0
   11134:	bne	111fc <callback@@Base+0x120>
   11138:	ldr	r1, [fp, #-20]	; 0xffffffec
   1113c:	mov	r0, sp
   11140:	bl	10ea8 <coda_cursor_set_product@plt>
   11144:	cmp	r0, #0
   11148:	beq	11158 <callback@@Base+0x7c>
   1114c:	ldr	r0, [fp, #-20]	; 0xffffffec
   11150:	bl	10f5c <coda_close@plt>
   11154:	b	111fc <callback@@Base+0x120>
   11158:	movw	r0, #12472	; 0x30b8
   1115c:	movt	r0, #2
   11160:	ldr	r0, [r0]
   11164:	cmp	r0, #0
   11168:	beq	1117c <callback@@Base+0xa0>
   1116c:	mov	r1, sp
   11170:	bl	10f80 <coda_expression_eval_node@plt>
   11174:	cmp	r0, #0
   11178:	bne	1123c <callback@@Base+0x160>
   1117c:	mov	r0, sp
   11180:	bl	11670 <main@@Base+0x3f8>
   11184:	cmp	r0, #0
   11188:	bne	11208 <callback@@Base+0x12c>
   1118c:	ldr	r0, [fp, #-20]	; 0xffffffec
   11190:	bl	10f5c <coda_close@plt>
   11194:	mov	r5, r0
   11198:	cmp	r0, #0
   1119c:	movwne	r5, #1
   111a0:	b	111fc <callback@@Base+0x120>
   111a4:	movw	r0, #12464	; 0x30b0
   111a8:	movw	r1, #7492	; 0x1d44
   111ac:	mov	r2, r3
   111b0:	mov	r3, r4
   111b4:	movt	r0, #2
   111b8:	movt	r1, #1
   111bc:	b	111d4 <callback@@Base+0xf8>
   111c0:	movw	r0, #12464	; 0x30b0
   111c4:	movw	r1, #7548	; 0x1d7c
   111c8:	mov	r2, r4
   111cc:	movt	r0, #2
   111d0:	movt	r1, #1
   111d4:	ldr	r0, [r0]
   111d8:	bl	10f14 <fprintf@plt>
   111dc:	b	111fc <callback@@Base+0x120>
   111e0:	movw	r0, #12464	; 0x30b0
   111e4:	movw	r1, #7510	; 0x1d56
   111e8:	mov	r2, r4
   111ec:	movt	r0, #2
   111f0:	movt	r1, #1
   111f4:	ldr	r0, [r0]
   111f8:	bl	10f14 <fprintf@plt>
   111fc:	mov	r0, r5
   11200:	sub	sp, fp, #16
   11204:	pop	{r4, r5, r6, r7, fp, pc}
   11208:	movw	r0, #12464	; 0x30b0
   1120c:	movt	r0, #2
   11210:	ldr	r5, [r0]
   11214:	bl	10fbc <coda_get_errno@plt>
   11218:	ldr	r0, [r0]
   1121c:	bl	10f8c <coda_errno_to_string@plt>
   11220:	movw	r1, #7492	; 0x1d44
   11224:	mov	r2, r0
   11228:	mov	r0, r5
   1122c:	mov	r3, r4
   11230:	movt	r1, #1
   11234:	bl	10f14 <fprintf@plt>
   11238:	b	1118c <callback@@Base+0xb0>
   1123c:	movw	r0, #12464	; 0x30b0
   11240:	movt	r0, #2
   11244:	ldr	r4, [r0]
   11248:	bl	10fbc <coda_get_errno@plt>
   1124c:	ldr	r0, [r0]
   11250:	bl	10f8c <coda_errno_to_string@plt>
   11254:	movw	r1, #8037	; 0x1f65
   11258:	mov	r2, r0
   1125c:	mov	r0, r4
   11260:	movt	r1, #1
   11264:	bl	10f14 <fprintf@plt>
   11268:	ldr	r0, [fp, #-20]	; 0xffffffec
   1126c:	bl	10f5c <coda_close@plt>
   11270:	mov	r5, #0
   11274:	b	111fc <callback@@Base+0x120>

00011278 <main@@Base>:
   11278:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1127c:	add	fp, sp, #28
   11280:	sub	sp, sp, #12
   11284:	cmp	r0, #1
   11288:	beq	115a4 <main@@Base+0x32c>
   1128c:	ldr	r6, [r1, #4]
   11290:	mov	r4, r1
   11294:	movw	r1, #7584	; 0x1da0
   11298:	mov	r5, r0
   1129c:	movt	r1, #1
   112a0:	mov	r0, r6
   112a4:	bl	10e3c <strcmp@plt>
   112a8:	cmp	r0, #0
   112ac:	beq	115a4 <main@@Base+0x32c>
   112b0:	movw	r1, #7587	; 0x1da3
   112b4:	mov	r0, r6
   112b8:	movt	r1, #1
   112bc:	bl	10e3c <strcmp@plt>
   112c0:	cmp	r0, #0
   112c4:	beq	115a4 <main@@Base+0x32c>
   112c8:	movw	r1, #7594	; 0x1daa
   112cc:	mov	r0, r6
   112d0:	movt	r1, #1
   112d4:	bl	10e3c <strcmp@plt>
   112d8:	cmp	r0, #0
   112dc:	beq	115d8 <main@@Base+0x360>
   112e0:	movw	r1, #7597	; 0x1dad
   112e4:	mov	r0, r6
   112e8:	movt	r1, #1
   112ec:	bl	10e3c <strcmp@plt>
   112f0:	cmp	r0, #0
   112f4:	beq	115d8 <main@@Base+0x360>
   112f8:	cmp	r5, #3
   112fc:	blt	11318 <main@@Base+0xa0>
   11300:	movw	r1, #7607	; 0x1db7
   11304:	mov	r0, r6
   11308:	movt	r1, #1
   1130c:	bl	10e3c <strcmp@plt>
   11310:	cmp	r0, #0
   11314:	beq	114f8 <main@@Base+0x280>
   11318:	ldr	r0, [r4]
   1131c:	movw	r2, #7610	; 0x1dba
   11320:	mov	r1, #0
   11324:	movt	r2, #1
   11328:	bl	10e78 <coda_set_definition_path_conditional@plt>
   1132c:	mov	r7, #1
   11330:	cmp	r0, #0
   11334:	bne	115b0 <main@@Base+0x338>
   11338:	cmp	r7, r5
   1133c:	bge	11420 <main@@Base+0x1a8>
   11340:	movw	r6, #7647	; 0x1ddf
   11344:	mov	r0, #1
   11348:	mov	r9, #0
   1134c:	movt	r6, #1
   11350:	str	r0, [sp, #8]
   11354:	ldr	r8, [r4, r7, lsl #2]
   11358:	mov	r1, r6
   1135c:	mov	r0, r8
   11360:	bl	10e3c <strcmp@plt>
   11364:	cmp	r0, #0
   11368:	beq	11400 <main@@Base+0x188>
   1136c:	movw	r1, #7650	; 0x1de2
   11370:	mov	r0, r8
   11374:	movt	r1, #1
   11378:	bl	10e3c <strcmp@plt>
   1137c:	cmp	r0, #0
   11380:	beq	11400 <main@@Base+0x188>
   11384:	movw	r1, #7658	; 0x1dea
   11388:	mov	r0, r8
   1138c:	movt	r1, #1
   11390:	bl	10e3c <strcmp@plt>
   11394:	cmp	r0, #0
   11398:	beq	11408 <main@@Base+0x190>
   1139c:	movw	r1, #7661	; 0x1ded
   113a0:	mov	r0, r8
   113a4:	movt	r1, #1
   113a8:	bl	10e3c <strcmp@plt>
   113ac:	cmp	r0, #0
   113b0:	beq	11408 <main@@Base+0x190>
   113b4:	movw	r1, #7683	; 0x1e03
   113b8:	mov	r0, r8
   113bc:	movt	r1, #1
   113c0:	bl	10e3c <strcmp@plt>
   113c4:	cmp	r0, #0
   113c8:	bne	1144c <main@@Base+0x1d4>
   113cc:	add	sl, r7, #1
   113d0:	cmp	sl, r5
   113d4:	bge	1144c <main@@Base+0x1d4>
   113d8:	ldr	r0, [r4, sl, lsl #2]
   113dc:	ldrb	r1, [r0]
   113e0:	cmp	r1, #45	; 0x2d
   113e4:	beq	1144c <main@@Base+0x1d4>
   113e8:	movw	r1, #12472	; 0x30b8
   113ec:	movt	r1, #2
   113f0:	bl	10fa4 <coda_expression_from_string@plt>
   113f4:	cmp	r0, #0
   113f8:	beq	11414 <main@@Base+0x19c>
   113fc:	b	11570 <main@@Base+0x2f8>
   11400:	mov	r9, #1
   11404:	b	11410 <main@@Base+0x198>
   11408:	mov	r0, #0
   1140c:	str	r0, [sp, #8]
   11410:	mov	sl, r7
   11414:	add	r7, sl, #1
   11418:	cmp	r7, r5
   1141c:	blt	11354 <main@@Base+0xdc>
   11420:	movw	r0, #12464	; 0x30b0
   11424:	mov	r1, #25
   11428:	mov	r2, #1
   1142c:	movt	r0, #2
   11430:	ldr	r3, [r0]
   11434:	movw	r0, #7723	; 0x1e2b
   11438:	movt	r0, #1
   1143c:	bl	10e90 <fwrite@plt>
   11440:	bl	11ae0 <main@@Base+0x868>
   11444:	mov	r0, #1
   11448:	bl	10efc <exit@plt>
   1144c:	ldrb	r0, [r8]
   11450:	cmp	r0, #45	; 0x2d
   11454:	beq	11420 <main@@Base+0x1a8>
   11458:	movw	sl, #12476	; 0x30bc
   1145c:	mov	r0, r8
   11460:	movt	sl, #2
   11464:	mov	r1, sl
   11468:	bl	10fa4 <coda_expression_from_string@plt>
   1146c:	cmp	r0, #0
   11470:	bne	115e4 <main@@Base+0x36c>
   11474:	ldr	r0, [sl]
   11478:	movw	r6, #12480	; 0x30c0
   1147c:	movt	r6, #2
   11480:	mov	r1, r6
   11484:	bl	10f50 <coda_expression_get_type@plt>
   11488:	cmp	r0, #0
   1148c:	bne	115b0 <main@@Base+0x338>
   11490:	ldr	r0, [r6]
   11494:	orr	r1, r0, #1
   11498:	cmp	r1, #5
   1149c:	beq	1160c <main@@Base+0x394>
   114a0:	cmp	r9, #0
   114a4:	bne	11544 <main@@Base+0x2cc>
   114a8:	add	r6, r7, #1
   114ac:	cmp	r6, r5
   114b0:	bge	11510 <main@@Base+0x298>
   114b4:	bl	10f20 <coda_init@plt>
   114b8:	cmp	r0, #0
   114bc:	bne	115b0 <main@@Base+0x338>
   114c0:	ldr	r0, [sp, #8]
   114c4:	bl	10f2c <coda_set_option_perform_conversions@plt>
   114c8:	movw	r3, #4316	; 0x10dc
   114cc:	mov	r0, #0
   114d0:	sub	r1, r5, r6
   114d4:	add	r2, r4, r6, lsl #2
   114d8:	str	r0, [sp]
   114dc:	movt	r3, #1
   114e0:	mov	r0, #0
   114e4:	bl	10e24 <coda_match_filefilter@plt>
   114e8:	cmp	r0, #0
   114ec:	bne	115b0 <main@@Base+0x338>
   114f0:	bl	10eb4 <coda_done@plt>
   114f4:	b	11544 <main@@Base+0x2cc>
   114f8:	ldr	r0, [r4, #8]
   114fc:	bl	10e84 <coda_set_definition_path@plt>
   11500:	mov	r7, #3
   11504:	cmp	r7, r5
   11508:	blt	11340 <main@@Base+0xc8>
   1150c:	b	11420 <main@@Base+0x1a8>
   11510:	movw	r0, #12472	; 0x30b8
   11514:	movt	r0, #2
   11518:	ldr	r0, [r0]
   1151c:	cmp	r0, #0
   11520:	bne	1162c <main@@Base+0x3b4>
   11524:	ldr	r0, [sl]
   11528:	bl	10f68 <coda_expression_is_constant@plt>
   1152c:	cmp	r0, #0
   11530:	beq	11648 <main@@Base+0x3d0>
   11534:	mov	r0, #0
   11538:	bl	11670 <main@@Base+0x3f8>
   1153c:	cmp	r0, #0
   11540:	bne	115b0 <main@@Base+0x338>
   11544:	ldr	r0, [sl]
   11548:	bl	10ed8 <coda_expression_delete@plt>
   1154c:	movw	r0, #12472	; 0x30b8
   11550:	movt	r0, #2
   11554:	ldr	r0, [r0]
   11558:	cmp	r0, #0
   1155c:	beq	11564 <main@@Base+0x2ec>
   11560:	bl	10ed8 <coda_expression_delete@plt>
   11564:	mov	r0, #0
   11568:	sub	sp, fp, #28
   1156c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11570:	movw	r0, #12464	; 0x30b0
   11574:	movt	r0, #2
   11578:	ldr	r4, [r0]
   1157c:	bl	10fbc <coda_get_errno@plt>
   11580:	ldr	r0, [r0]
   11584:	bl	10f8c <coda_errno_to_string@plt>
   11588:	movw	r1, #7686	; 0x1e06
   1158c:	mov	r2, r0
   11590:	movt	r1, #1
   11594:	mov	r0, r4
   11598:	bl	10f14 <fprintf@plt>
   1159c:	mov	r0, #1
   115a0:	bl	10efc <exit@plt>
   115a4:	bl	11ae0 <main@@Base+0x868>
   115a8:	mov	r0, #0
   115ac:	bl	10efc <exit@plt>
   115b0:	movw	r0, #12464	; 0x30b0
   115b4:	movt	r0, #2
   115b8:	ldr	r4, [r0]
   115bc:	bl	10fbc <coda_get_errno@plt>
   115c0:	ldr	r0, [r0]
   115c4:	bl	10f8c <coda_errno_to_string@plt>
   115c8:	movw	r1, #7636	; 0x1dd4
   115cc:	mov	r2, r0
   115d0:	movt	r1, #1
   115d4:	b	11594 <main@@Base+0x31c>
   115d8:	bl	11c9c <main@@Base+0xa24>
   115dc:	mov	r0, #0
   115e0:	bl	10efc <exit@plt>
   115e4:	movw	r0, #12464	; 0x30b0
   115e8:	movt	r0, #2
   115ec:	ldr	r4, [r0]
   115f0:	bl	10fbc <coda_get_errno@plt>
   115f4:	ldr	r0, [r0]
   115f8:	bl	10f8c <coda_errno_to_string@plt>
   115fc:	movw	r1, #7749	; 0x1e45
   11600:	mov	r2, r0
   11604:	movt	r1, #1
   11608:	b	11594 <main@@Base+0x31c>
   1160c:	movw	r1, #12464	; 0x30b0
   11610:	movt	r1, #2
   11614:	ldr	r4, [r1]
   11618:	bl	10f98 <coda_expression_get_type_name@plt>
   1161c:	movw	r1, #7781	; 0x1e65
   11620:	mov	r2, r0
   11624:	movt	r1, #1
   11628:	b	11594 <main@@Base+0x31c>
   1162c:	movw	r0, #12464	; 0x30b0
   11630:	mov	r1, #96	; 0x60
   11634:	movt	r0, #2
   11638:	ldr	r3, [r0]
   1163c:	movw	r0, #7828	; 0x1e94
   11640:	movt	r0, #1
   11644:	b	11660 <main@@Base+0x3e8>
   11648:	movw	r0, #12464	; 0x30b0
   1164c:	mov	r1, #111	; 0x6f
   11650:	movt	r0, #2
   11654:	ldr	r3, [r0]
   11658:	movw	r0, #7925	; 0x1ef5
   1165c:	movt	r0, #1
   11660:	mov	r2, #1
   11664:	bl	10e90 <fwrite@plt>
   11668:	mov	r0, #1
   1166c:	bl	10efc <exit@plt>
   11670:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11674:	add	fp, sp, #28
   11678:	sub	sp, sp, #36	; 0x24
   1167c:	mov	r1, r0
   11680:	movw	r0, #12480	; 0x30c0
   11684:	mov	r4, #0
   11688:	movt	r0, #2
   1168c:	ldr	r0, [r0]
   11690:	cmp	r0, #5
   11694:	bhi	11ab4 <main@@Base+0x83c>
   11698:	add	r2, pc, #0
   1169c:	ldr	pc, [r2, r0, lsl #2]
   116a0:			; <UNDEFINED> instruction: 0x000116b8
   116a4:	strdeq	r1, [r1], -r0
   116a8:	andeq	r1, r1, r8, lsr #14
   116ac:	andeq	r1, r1, r0, ror #14
   116b0:	andeq	r1, r1, r0, asr #21
   116b4:	andeq	r1, r1, r0, asr #21
   116b8:	movw	r0, #12476	; 0x30bc
   116bc:	mov	r2, sp
   116c0:	movt	r0, #2
   116c4:	ldr	r0, [r0]
   116c8:	bl	10e9c <coda_expression_eval_bool@plt>
   116cc:	cmp	r0, #0
   116d0:	beq	117b0 <main@@Base+0x538>
   116d4:	bl	10fbc <coda_get_errno@plt>
   116d8:	ldr	r0, [r0]
   116dc:	bl	10f8c <coda_errno_to_string@plt>
   116e0:	movw	r1, #8097	; 0x1fa1
   116e4:	mov	r2, r0
   116e8:	movt	r1, #1
   116ec:	b	117a0 <main@@Base+0x528>
   116f0:	movw	r0, #12476	; 0x30bc
   116f4:	add	r2, sp, #24
   116f8:	movt	r0, #2
   116fc:	ldr	r0, [r0]
   11700:	bl	10e30 <coda_expression_eval_integer@plt>
   11704:	cmp	r0, #0
   11708:	beq	117d0 <main@@Base+0x558>
   1170c:	bl	10fbc <coda_get_errno@plt>
   11710:	ldr	r0, [r0]
   11714:	bl	10f8c <coda_errno_to_string@plt>
   11718:	movw	r1, #8148	; 0x1fd4
   1171c:	mov	r2, r0
   11720:	movt	r1, #1
   11724:	b	117a0 <main@@Base+0x528>
   11728:	movw	r0, #12476	; 0x30bc
   1172c:	mov	r2, sp
   11730:	movt	r0, #2
   11734:	ldr	r0, [r0]
   11738:	bl	10f74 <coda_expression_eval_float@plt>
   1173c:	cmp	r0, #0
   11740:	beq	117f0 <main@@Base+0x578>
   11744:	bl	10fbc <coda_get_errno@plt>
   11748:	ldr	r0, [r0]
   1174c:	bl	10f8c <coda_errno_to_string@plt>
   11750:	movw	r1, #8188	; 0x1ffc
   11754:	mov	r2, r0
   11758:	movt	r1, #1
   1175c:	b	117a0 <main@@Base+0x528>
   11760:	mov	r0, #0
   11764:	mov	r2, sp
   11768:	add	r3, sp, #24
   1176c:	str	r0, [sp]
   11770:	movw	r0, #12476	; 0x30bc
   11774:	movt	r0, #2
   11778:	ldr	r0, [r0]
   1177c:	bl	10f38 <coda_expression_eval_string@plt>
   11780:	cmp	r0, #0
   11784:	beq	11808 <main@@Base+0x590>
   11788:	bl	10fbc <coda_get_errno@plt>
   1178c:	ldr	r0, [r0]
   11790:	bl	10f8c <coda_errno_to_string@plt>
   11794:	movw	r1, #8242	; 0x2032
   11798:	mov	r2, r0
   1179c:	movt	r1, #1
   117a0:	mvn	r0, #400	; 0x190
   117a4:	bl	10e54 <coda_set_error@plt>
   117a8:	mvn	r4, #0
   117ac:	b	11ab4 <main@@Base+0x83c>
   117b0:	ldr	r1, [sp]
   117b4:	movw	r2, #8142	; 0x1fce
   117b8:	movw	r0, #8137	; 0x1fc9
   117bc:	movt	r2, #1
   117c0:	movt	r0, #1
   117c4:	cmp	r1, #0
   117c8:	moveq	r0, r2
   117cc:	b	117e8 <main@@Base+0x570>
   117d0:	ldr	r0, [sp, #24]
   117d4:	ldr	r1, [sp, #28]
   117d8:	mov	r5, sp
   117dc:	mov	r2, r5
   117e0:	bl	10fd4 <coda_str64@plt>
   117e4:	mov	r0, r5
   117e8:	bl	10ec0 <puts@plt>
   117ec:	b	11ab4 <main@@Base+0x83c>
   117f0:	vldr	d16, [sp]
   117f4:	movw	r0, #8235	; 0x202b
   117f8:	movt	r0, #1
   117fc:	vmov	r2, r3, d16
   11800:	bl	10e48 <printf@plt>
   11804:	b	11ab4 <main@@Base+0x83c>
   11808:	ldr	r4, [sp]
   1180c:	cmp	r4, #0
   11810:	ldrne	r5, [sp, #24]
   11814:	cmpne	r5, #0
   11818:	beq	11a98 <main@@Base+0x820>
   1181c:	cmn	r5, #1
   11820:	bgt	11838 <main@@Base+0x5c0>
   11824:	mov	r0, r4
   11828:	bl	10f08 <strlen@plt>
   1182c:	mov	r5, r0
   11830:	cmp	r0, #1
   11834:	blt	11a98 <main@@Base+0x820>
   11838:	movw	sl, #8411	; 0x20db
   1183c:	movw	r7, #8396	; 0x20cc
   11840:	movw	r6, #8423	; 0x20e7
   11844:	movw	r8, #8420	; 0x20e4
   11848:	movt	sl, #1
   1184c:	movt	r7, #1
   11850:	movt	r6, #1
   11854:	movt	r8, #1
   11858:	ldrb	r9, [r4]
   1185c:	sub	r0, r9, #7
   11860:	cmp	r0, #85	; 0x55
   11864:	bhi	11a24 <main@@Base+0x7ac>
   11868:	add	r1, pc, #0
   1186c:	ldr	pc, [r1, r0, lsl #2]
   11870:	andeq	r1, r1, r8, asr #19
   11874:	ldrdeq	r1, [r1], -r8
   11878:	andeq	r1, r1, r8, ror #19
   1187c:	strdeq	r1, [r1], -r8
   11880:	andeq	r1, r1, ip, asr sl
   11884:	andeq	r1, r1, r8, lsl #20
   11888:	andeq	r1, r1, r8, lsl sl
   1188c:	andeq	r1, r1, r4, lsr #20
   11890:	andeq	r1, r1, r4, lsr #20
   11894:	andeq	r1, r1, r4, lsr #20
   11898:	andeq	r1, r1, r4, lsr #20
   1189c:	andeq	r1, r1, r4, lsr #20
   118a0:	andeq	r1, r1, r4, lsr #20
   118a4:	andeq	r1, r1, r4, lsr #20
   118a8:	andeq	r1, r1, r4, lsr #20
   118ac:	andeq	r1, r1, r4, lsr #20
   118b0:	andeq	r1, r1, r4, lsr #20
   118b4:	andeq	r1, r1, r4, lsr #20
   118b8:	andeq	r1, r1, r4, lsr #20
   118bc:	andeq	r1, r1, r4, lsr #20
   118c0:	andeq	r1, r1, r0, asr sl
   118c4:	andeq	r1, r1, r4, lsr #20
   118c8:	andeq	r1, r1, r4, lsr #20
   118cc:	andeq	r1, r1, r4, lsr #20
   118d0:	andeq	r1, r1, r4, lsr #20
   118d4:	andeq	r1, r1, r4, lsr #20
   118d8:	andeq	r1, r1, r4, lsr #20
   118dc:	andeq	r1, r1, ip, ror #20
   118e0:	andeq	r1, r1, r4, lsr #20
   118e4:	andeq	r1, r1, r4, lsr #20
   118e8:	andeq	r1, r1, r4, lsr #20
   118ec:	andeq	r1, r1, r4, lsr #20
   118f0:	andeq	r1, r1, r4, lsr #20
   118f4:	andeq	r1, r1, r4, lsr #20
   118f8:	andeq	r1, r1, r4, lsr #20
   118fc:	andeq	r1, r1, r4, lsr #20
   11900:	andeq	r1, r1, r4, lsr #20
   11904:	andeq	r1, r1, r4, lsr #20
   11908:	andeq	r1, r1, r4, lsr #20
   1190c:	andeq	r1, r1, r4, lsr #20
   11910:	andeq	r1, r1, r4, lsr #20
   11914:	andeq	r1, r1, r4, lsr #20
   11918:	andeq	r1, r1, r4, lsr #20
   1191c:	andeq	r1, r1, r4, lsr #20
   11920:	andeq	r1, r1, r4, lsr #20
   11924:	andeq	r1, r1, r4, lsr #20
   11928:	andeq	r1, r1, r4, lsr #20
   1192c:	andeq	r1, r1, r4, lsr #20
   11930:	andeq	r1, r1, r4, lsr #20
   11934:	andeq	r1, r1, r4, lsr #20
   11938:	andeq	r1, r1, r4, lsr #20
   1193c:	andeq	r1, r1, r4, lsr #20
   11940:	andeq	r1, r1, r4, lsr #20
   11944:	andeq	r1, r1, r4, lsr #20
   11948:	andeq	r1, r1, r4, lsr #20
   1194c:	andeq	r1, r1, r4, lsr #20
   11950:	andeq	r1, r1, r4, lsr #20
   11954:	andeq	r1, r1, r4, lsr #20
   11958:	andeq	r1, r1, r4, lsr #20
   1195c:	andeq	r1, r1, r4, lsr #20
   11960:	andeq	r1, r1, r4, lsr #20
   11964:	andeq	r1, r1, r4, lsr #20
   11968:	andeq	r1, r1, r4, lsr #20
   1196c:	andeq	r1, r1, r4, lsr #20
   11970:	andeq	r1, r1, r4, lsr #20
   11974:	andeq	r1, r1, r4, lsr #20
   11978:	andeq	r1, r1, r4, lsr #20
   1197c:	andeq	r1, r1, r4, lsr #20
   11980:	andeq	r1, r1, r4, lsr #20
   11984:	andeq	r1, r1, r4, lsr #20
   11988:	andeq	r1, r1, r4, lsr #20
   1198c:	andeq	r1, r1, r4, lsr #20
   11990:	andeq	r1, r1, r4, lsr #20
   11994:	andeq	r1, r1, r4, lsr #20
   11998:	andeq	r1, r1, r4, lsr #20
   1199c:	andeq	r1, r1, r4, lsr #20
   119a0:	andeq	r1, r1, r4, lsr #20
   119a4:	andeq	r1, r1, r4, lsr #20
   119a8:	andeq	r1, r1, r4, lsr #20
   119ac:	andeq	r1, r1, r4, lsr #20
   119b0:	andeq	r1, r1, r4, lsr #20
   119b4:	andeq	r1, r1, r4, lsr #20
   119b8:	andeq	r1, r1, r4, lsr #20
   119bc:	andeq	r1, r1, r4, lsr #20
   119c0:	andeq	r1, r1, r4, lsr #20
   119c4:	andeq	r1, r1, r8, ror sl
   119c8:	movw	r0, #8399	; 0x20cf
   119cc:	movt	r0, #1
   119d0:	bl	10e48 <printf@plt>
   119d4:	b	11a8c <main@@Base+0x814>
   119d8:	movw	r0, #8402	; 0x20d2
   119dc:	movt	r0, #1
   119e0:	bl	10e48 <printf@plt>
   119e4:	b	11a8c <main@@Base+0x814>
   119e8:	movw	r0, #8414	; 0x20de
   119ec:	movt	r0, #1
   119f0:	bl	10e48 <printf@plt>
   119f4:	b	11a8c <main@@Base+0x814>
   119f8:	movw	r0, #8408	; 0x20d8
   119fc:	movt	r0, #1
   11a00:	bl	10e48 <printf@plt>
   11a04:	b	11a8c <main@@Base+0x814>
   11a08:	movw	r0, #8405	; 0x20d5
   11a0c:	movt	r0, #1
   11a10:	bl	10e48 <printf@plt>
   11a14:	b	11a8c <main@@Base+0x814>
   11a18:	mov	r0, sl
   11a1c:	bl	10e48 <printf@plt>
   11a20:	b	11a8c <main@@Base+0x814>
   11a24:	bl	10ef0 <__ctype_b_loc@plt>
   11a28:	ldr	r0, [r0]
   11a2c:	add	r0, r0, r9, lsl #1
   11a30:	ldrb	r0, [r0, #1]
   11a34:	tst	r0, #64	; 0x40
   11a38:	bne	11a84 <main@@Base+0x80c>
   11a3c:	movw	r0, #8426	; 0x20ea
   11a40:	mov	r1, r9
   11a44:	movt	r0, #1
   11a48:	bl	10e48 <printf@plt>
   11a4c:	b	11a8c <main@@Base+0x814>
   11a50:	mov	r0, r7
   11a54:	bl	10e48 <printf@plt>
   11a58:	b	11a8c <main@@Base+0x814>
   11a5c:	movw	r0, #8417	; 0x20e1
   11a60:	movt	r0, #1
   11a64:	bl	10e48 <printf@plt>
   11a68:	b	11a8c <main@@Base+0x814>
   11a6c:	mov	r0, r6
   11a70:	bl	10e48 <printf@plt>
   11a74:	b	11a8c <main@@Base+0x814>
   11a78:	mov	r0, r8
   11a7c:	bl	10e48 <printf@plt>
   11a80:	b	11a8c <main@@Base+0x814>
   11a84:	mov	r0, r9
   11a88:	bl	10f44 <putchar@plt>
   11a8c:	add	r4, r4, #1
   11a90:	subs	r5, r5, #1
   11a94:	bne	11858 <main@@Base+0x5e0>
   11a98:	mov	r0, #10
   11a9c:	bl	10f44 <putchar@plt>
   11aa0:	ldr	r0, [sp]
   11aa4:	cmp	r0, #0
   11aa8:	beq	11ab0 <main@@Base+0x838>
   11aac:	bl	10e6c <free@plt>
   11ab0:	mov	r4, #0
   11ab4:	mov	r0, r4
   11ab8:	sub	sp, fp, #28
   11abc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ac0:	movw	r0, #8281	; 0x2059
   11ac4:	movw	r1, #8283	; 0x205b
   11ac8:	movw	r3, #8361	; 0x20a9
   11acc:	mov	r2, #230	; 0xe6
   11ad0:	movt	r0, #1
   11ad4:	movt	r1, #1
   11ad8:	movt	r3, #1
   11adc:	bl	10fe0 <__assert_fail@plt>
   11ae0:	push	{fp, lr}
   11ae4:	mov	fp, sp
   11ae8:	movw	r0, #8432	; 0x20f0
   11aec:	movt	r0, #1
   11af0:	bl	10ec0 <puts@plt>
   11af4:	movw	r0, #8448	; 0x2100
   11af8:	movt	r0, #1
   11afc:	bl	10ec0 <puts@plt>
   11b00:	movw	r0, #8528	; 0x2150
   11b04:	movt	r0, #1
   11b08:	bl	10ec0 <puts@plt>
   11b0c:	movw	r0, #8608	; 0x21a0
   11b10:	movt	r0, #1
   11b14:	bl	10ec0 <puts@plt>
   11b18:	movw	r0, #8656	; 0x21d0
   11b1c:	movt	r0, #1
   11b20:	bl	10ec0 <puts@plt>
   11b24:	movw	r0, #8736	; 0x2220
   11b28:	movt	r0, #1
   11b2c:	bl	10ec0 <puts@plt>
   11b30:	movw	r0, #8816	; 0x2270
   11b34:	movt	r0, #1
   11b38:	bl	10ec0 <puts@plt>
   11b3c:	mov	r0, #10
   11b40:	bl	10f44 <putchar@plt>
   11b44:	movw	r0, #8864	; 0x22a0
   11b48:	movt	r0, #1
   11b4c:	bl	10ec0 <puts@plt>
   11b50:	movw	r0, #8896	; 0x22c0
   11b54:	movt	r0, #1
   11b58:	bl	10ec0 <puts@plt>
   11b5c:	movw	r0, #8928	; 0x22e0
   11b60:	movt	r0, #1
   11b64:	bl	10ec0 <puts@plt>
   11b68:	movw	r0, #9008	; 0x2330
   11b6c:	movt	r0, #1
   11b70:	bl	10ec0 <puts@plt>
   11b74:	movw	r0, #9088	; 0x2380
   11b78:	movt	r0, #1
   11b7c:	bl	10ec0 <puts@plt>
   11b80:	movw	r0, #9136	; 0x23b0
   11b84:	movt	r0, #1
   11b88:	bl	10ec0 <puts@plt>
   11b8c:	movw	r0, #9200	; 0x23f0
   11b90:	movt	r0, #1
   11b94:	bl	10ec0 <puts@plt>
   11b98:	movw	r0, #9232	; 0x2410
   11b9c:	movt	r0, #1
   11ba0:	bl	10ec0 <puts@plt>
   11ba4:	movw	r0, #9312	; 0x2460
   11ba8:	movt	r0, #1
   11bac:	bl	10ec0 <puts@plt>
   11bb0:	movw	r0, #9392	; 0x24b0
   11bb4:	movt	r0, #1
   11bb8:	bl	10ec0 <puts@plt>
   11bbc:	movw	r0, #9424	; 0x24d0
   11bc0:	movt	r0, #1
   11bc4:	bl	10ec0 <puts@plt>
   11bc8:	movw	r0, #9504	; 0x2520
   11bcc:	movt	r0, #1
   11bd0:	bl	10ec0 <puts@plt>
   11bd4:	mov	r0, #10
   11bd8:	bl	10f44 <putchar@plt>
   11bdc:	movw	r0, #9552	; 0x2550
   11be0:	movt	r0, #1
   11be4:	bl	10ec0 <puts@plt>
   11be8:	movw	r0, #9632	; 0x25a0
   11bec:	movt	r0, #1
   11bf0:	bl	10ec0 <puts@plt>
   11bf4:	mov	r0, #10
   11bf8:	bl	10f44 <putchar@plt>
   11bfc:	movw	r0, #9664	; 0x25c0
   11c00:	movt	r0, #1
   11c04:	bl	10ec0 <puts@plt>
   11c08:	movw	r0, #9696	; 0x25e0
   11c0c:	movt	r0, #1
   11c10:	bl	10ec0 <puts@plt>
   11c14:	mov	r0, #10
   11c18:	bl	10f44 <putchar@plt>
   11c1c:	movw	r0, #9728	; 0x2600
   11c20:	movt	r0, #1
   11c24:	bl	10ec0 <puts@plt>
   11c28:	movw	r0, #9760	; 0x2620
   11c2c:	movt	r0, #1
   11c30:	bl	10ec0 <puts@plt>
   11c34:	mov	r0, #10
   11c38:	bl	10f44 <putchar@plt>
   11c3c:	movw	r0, #9824	; 0x2660
   11c40:	movt	r0, #1
   11c44:	bl	10ec0 <puts@plt>
   11c48:	movw	r0, #9904	; 0x26b0
   11c4c:	movt	r0, #1
   11c50:	bl	10ec0 <puts@plt>
   11c54:	movw	r0, #9984	; 0x2700
   11c58:	movt	r0, #1
   11c5c:	bl	10ec0 <puts@plt>
   11c60:	movw	r0, #10032	; 0x2730
   11c64:	movt	r0, #1
   11c68:	bl	10ec0 <puts@plt>
   11c6c:	movw	r0, #10112	; 0x2780
   11c70:	movt	r0, #1
   11c74:	bl	10ec0 <puts@plt>
   11c78:	movw	r0, #10192	; 0x27d0
   11c7c:	movt	r0, #1
   11c80:	bl	10ec0 <puts@plt>
   11c84:	movw	r0, #10256	; 0x2810
   11c88:	movt	r0, #1
   11c8c:	bl	10ec0 <puts@plt>
   11c90:	mov	r0, #10
   11c94:	pop	{fp, lr}
   11c98:	b	10f44 <putchar@plt>
   11c9c:	push	{fp, lr}
   11ca0:	mov	fp, sp
   11ca4:	bl	10fb0 <coda_get_libcoda_version@plt>
   11ca8:	mov	r1, r0
   11cac:	movw	r0, #8084	; 0x1f94
   11cb0:	movt	r0, #1
   11cb4:	bl	10e48 <printf@plt>
   11cb8:	movw	r0, #10320	; 0x2850
   11cbc:	movt	r0, #1
   11cc0:	bl	10ec0 <puts@plt>
   11cc4:	mov	r0, #10
   11cc8:	pop	{fp, lr}
   11ccc:	b	10f44 <putchar@plt>

00011cd0 <__libc_csu_init@@Base>:
   11cd0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11cd4:	mov	r7, r0
   11cd8:	ldr	r6, [pc, #72]	; 11d28 <__libc_csu_init@@Base+0x58>
   11cdc:	ldr	r5, [pc, #72]	; 11d2c <__libc_csu_init@@Base+0x5c>
   11ce0:	add	r6, pc, r6
   11ce4:	add	r5, pc, r5
   11ce8:	sub	r6, r6, r5
   11cec:	mov	r8, r1
   11cf0:	mov	r9, r2
   11cf4:	bl	10e04 <coda_match_filefilter@plt-0x20>
   11cf8:	asrs	r6, r6, #2
   11cfc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d00:	mov	r4, #0
   11d04:	add	r4, r4, #1
   11d08:	ldr	r3, [r5], #4
   11d0c:	mov	r2, r9
   11d10:	mov	r1, r8
   11d14:	mov	r0, r7
   11d18:	blx	r3
   11d1c:	cmp	r6, r4
   11d20:	bne	11d04 <__libc_csu_init@@Base+0x34>
   11d24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d28:	andeq	r1, r1, ip, lsl #4
   11d2c:	andeq	r1, r1, r4, lsl #4

00011d30 <__libc_csu_fini@@Base>:
   11d30:	bx	lr

Disassembly of section .fini:

00011d34 <.fini>:
   11d34:	push	{r3, lr}
   11d38:	pop	{r3, pc}
