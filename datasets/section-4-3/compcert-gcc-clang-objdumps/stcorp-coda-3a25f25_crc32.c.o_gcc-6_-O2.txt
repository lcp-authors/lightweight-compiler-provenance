
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/zlib/crc32.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <crc32_combine_>:
   0:	cmp	r2, #0
   4:	bxle	lr
   8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c:	sub	sp, sp, #260	; 0x104
  10:	ldr	r3, [pc, #504]	; 210 <crc32_combine_+0x210>
  14:	add	r7, sp, #256	; 0x100
  18:	add	ip, sp, #252	; 0xfc
  1c:	str	r3, [r7, #-128]!	; 0xffffff80
  20:	mov	r3, #1
  24:	mov	r6, r7
  28:	str	r3, [r6, #4]!
  2c:	cmp	r6, ip
  30:	lsl	r3, r3, #1
  34:	bne	28 <crc32_combine_+0x28>
  38:	add	r8, sp, #124	; 0x7c
  3c:	mov	r5, r8
  40:	sub	r9, sp, #4
  44:	ldr	r3, [r5, #4]!
  48:	cmp	r3, #0
  4c:	beq	1fc <crc32_combine_+0x1fc>
  50:	mov	lr, #0
  54:	mov	ip, r7
  58:	tst	r3, #1
  5c:	add	ip, ip, #4
  60:	ldrne	r4, [ip, #-4]
  64:	eorne	lr, lr, r4
  68:	lsrs	r3, r3, #1
  6c:	bne	58 <crc32_combine_+0x58>
  70:	cmp	r5, r6
  74:	str	lr, [r9, #4]!
  78:	bne	44 <crc32_combine_+0x44>
  7c:	mov	r9, r8
  80:	sub	r6, sp, #4
  84:	ldr	r3, [r6, #4]!
  88:	cmp	r3, #0
  8c:	beq	1e8 <crc32_combine_+0x1e8>
  90:	mov	lr, #0
  94:	mov	ip, sp
  98:	tst	r3, #1
  9c:	add	ip, ip, #4
  a0:	ldrne	r4, [ip, #-4]
  a4:	eorne	lr, lr, r4
  a8:	lsrs	r3, r3, #1
  ac:	bne	98 <crc32_combine_+0x98>
  b0:	cmp	r6, r8
  b4:	str	lr, [r9, #4]!
  b8:	bne	84 <crc32_combine_+0x84>
  bc:	sub	sl, sp, #4
  c0:	mov	r9, r8
  c4:	ldr	r3, [r9, #4]!
  c8:	cmp	r3, #0
  cc:	beq	1c0 <crc32_combine_+0x1c0>
  d0:	mov	lr, #0
  d4:	mov	ip, r7
  d8:	tst	r3, #1
  dc:	add	ip, ip, #4
  e0:	ldrne	r4, [ip, #-4]
  e4:	eorne	lr, lr, r4
  e8:	lsrs	r3, r3, #1
  ec:	bne	d8 <crc32_combine_+0xd8>
  f0:	cmp	r9, r5
  f4:	str	lr, [sl, #4]!
  f8:	bne	c4 <crc32_combine_+0xc4>
  fc:	tst	r2, #1
 100:	beq	130 <crc32_combine_+0x130>
 104:	cmp	r0, #0
 108:	beq	130 <crc32_combine_+0x130>
 10c:	mov	r3, r0
 110:	mov	ip, sp
 114:	mov	r0, #0
 118:	tst	r3, #1
 11c:	add	ip, ip, #4
 120:	ldrne	lr, [ip, #-4]
 124:	eorne	r0, r0, lr
 128:	lsrs	r3, r3, #1
 12c:	bne	118 <crc32_combine_+0x118>
 130:	asrs	fp, r2, #1
 134:	beq	1b4 <crc32_combine_+0x1b4>
 138:	mov	sl, r8
 13c:	sub	r9, sp, #4
 140:	ldr	r3, [r9, #4]!
 144:	cmp	r3, #0
 148:	beq	1d4 <crc32_combine_+0x1d4>
 14c:	mov	lr, #0
 150:	mov	ip, sp
 154:	tst	r3, #1
 158:	add	ip, ip, #4
 15c:	ldrne	r4, [ip, #-4]
 160:	eorne	lr, lr, r4
 164:	lsrs	r3, r3, #1
 168:	bne	154 <crc32_combine_+0x154>
 16c:	cmp	r6, r9
 170:	str	lr, [sl, #4]!
 174:	bne	140 <crc32_combine_+0x140>
 178:	tst	fp, #1
 17c:	beq	1ac <crc32_combine_+0x1ac>
 180:	cmp	r0, #0
 184:	beq	1ac <crc32_combine_+0x1ac>
 188:	mov	r3, r0
 18c:	mov	ip, r7
 190:	mov	r0, #0
 194:	tst	r3, #1
 198:	add	ip, ip, #4
 19c:	ldrne	lr, [ip, #-4]
 1a0:	eorne	r0, r0, lr
 1a4:	lsrs	r3, r3, #1
 1a8:	bne	194 <crc32_combine_+0x194>
 1ac:	asrs	r2, r2, #2
 1b0:	bne	bc <crc32_combine_+0xbc>
 1b4:	eor	r0, r0, r1
 1b8:	add	sp, sp, #260	; 0x104
 1bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1c0:	mov	lr, r3
 1c4:	cmp	r9, r5
 1c8:	str	lr, [sl, #4]!
 1cc:	bne	c4 <crc32_combine_+0xc4>
 1d0:	b	fc <crc32_combine_+0xfc>
 1d4:	mov	lr, r3
 1d8:	cmp	r6, r9
 1dc:	str	lr, [sl, #4]!
 1e0:	bne	140 <crc32_combine_+0x140>
 1e4:	b	178 <crc32_combine_+0x178>
 1e8:	mov	lr, r3
 1ec:	cmp	r6, r8
 1f0:	str	lr, [r9, #4]!
 1f4:	bne	84 <crc32_combine_+0x84>
 1f8:	b	bc <crc32_combine_+0xbc>
 1fc:	mov	lr, r3
 200:	cmp	r5, r6
 204:	str	lr, [r9, #4]!
 208:	bne	44 <crc32_combine_+0x44>
 20c:	b	7c <crc32_combine_+0x7c>
 210:	.word	0xedb88320

00000214 <coda_get_crc_table>:
 214:	ldr	r0, [pc]	; 21c <coda_get_crc_table+0x8>
 218:	bx	lr
 21c:	.word	0x00000000

00000220 <coda_crc32>:
 220:	cmp	r1, #0
 224:	beq	5a0 <coda_crc32+0x380>
 228:	cmp	r2, #0
 22c:	push	{r4, r5, r6, r7, r8, r9, lr}
 230:	mvn	r6, r0
 234:	beq	26c <coda_crc32+0x4c>
 238:	tst	r1, #3
 23c:	beq	274 <coda_crc32+0x54>
 240:	ldr	r3, [pc, #864]	; 5a8 <coda_crc32+0x388>
 244:	b	250 <coda_crc32+0x30>
 248:	tst	r1, #3
 24c:	beq	274 <coda_crc32+0x54>
 250:	ldrb	ip, [r1], #1
 254:	subs	r2, r2, #1
 258:	eor	ip, ip, r6
 25c:	uxtb	ip, ip
 260:	ldr	r0, [r3, ip, lsl #2]
 264:	eor	r6, r0, r6, lsr #8
 268:	bne	248 <coda_crc32+0x28>
 26c:	mvn	r0, r6
 270:	pop	{r4, r5, r6, r7, r8, r9, pc}
 274:	cmp	r2, #31
 278:	mov	r4, r1
 27c:	bls	4f0 <coda_crc32+0x2d0>
 280:	ldr	r3, [pc, #800]	; 5a8 <coda_crc32+0x388>
 284:	add	lr, r1, #32
 288:	mov	r4, r2
 28c:	ldr	r0, [lr, #-32]	; 0xffffffe0
 290:	ldr	r5, [lr, #-28]	; 0xffffffe4
 294:	eor	r0, r0, r6
 298:	ldr	r7, [lr, #-24]	; 0xffffffe8
 29c:	uxtb	r8, r0
 2a0:	lsr	r6, r0, #8
 2a4:	add	r8, r8, #768	; 0x300
 2a8:	lsr	r9, r0, #24
 2ac:	lsr	ip, r0, #16
 2b0:	uxtb	r6, r6
 2b4:	ldr	r0, [r3, r8, lsl #2]
 2b8:	add	r6, r6, #512	; 0x200
 2bc:	ldr	r8, [r3, r9, lsl #2]
 2c0:	uxtb	ip, ip
 2c4:	add	ip, ip, #256	; 0x100
 2c8:	ldr	r6, [r3, r6, lsl #2]
 2cc:	eor	r0, r0, r8
 2d0:	eor	r0, r0, r5
 2d4:	ldr	r5, [r3, ip, lsl #2]
 2d8:	eor	r0, r0, r6
 2dc:	eor	r0, r0, r5
 2e0:	ldr	r6, [lr, #-20]	; 0xffffffec
 2e4:	uxtb	ip, r0
 2e8:	lsr	r5, r0, #8
 2ec:	lsr	r8, r0, #24
 2f0:	add	ip, ip, #768	; 0x300
 2f4:	lsr	r0, r0, #16
 2f8:	uxtb	r5, r5
 2fc:	ldr	r8, [r3, r8, lsl #2]
 300:	ldr	ip, [r3, ip, lsl #2]
 304:	add	r5, r5, #512	; 0x200
 308:	uxtb	r0, r0
 30c:	add	r0, r0, #256	; 0x100
 310:	eor	ip, ip, r8
 314:	ldr	r8, [r3, r5, lsl #2]
 318:	eor	ip, ip, r7
 31c:	ldr	r5, [r3, r0, lsl #2]
 320:	eor	ip, ip, r8
 324:	eor	ip, ip, r5
 328:	ldr	r7, [lr, #-16]
 32c:	uxtb	r0, ip
 330:	lsr	r5, ip, #8
 334:	lsr	r8, ip, #24
 338:	add	r0, r0, #768	; 0x300
 33c:	lsr	ip, ip, #16
 340:	uxtb	r5, r5
 344:	ldr	r8, [r3, r8, lsl #2]
 348:	ldr	r0, [r3, r0, lsl #2]
 34c:	add	r5, r5, #512	; 0x200
 350:	uxtb	ip, ip
 354:	add	ip, ip, #256	; 0x100
 358:	ldr	r5, [r3, r5, lsl #2]
 35c:	eor	r0, r0, r8
 360:	ldr	ip, [r3, ip, lsl #2]
 364:	eor	r0, r0, r6
 368:	eor	r0, r0, r5
 36c:	eor	r0, r0, ip
 370:	ldr	r6, [lr, #-12]
 374:	uxtb	r5, r0
 378:	lsr	ip, r0, #8
 37c:	lsr	r8, r0, #24
 380:	add	r5, r5, #768	; 0x300
 384:	lsr	r0, r0, #16
 388:	uxtb	ip, ip
 38c:	ldr	r8, [r3, r8, lsl #2]
 390:	ldr	r5, [r3, r5, lsl #2]
 394:	add	ip, ip, #512	; 0x200
 398:	uxtb	r0, r0
 39c:	add	r0, r0, #256	; 0x100
 3a0:	ldr	ip, [r3, ip, lsl #2]
 3a4:	eor	r5, r5, r8
 3a8:	ldr	r0, [r3, r0, lsl #2]
 3ac:	eor	r5, r5, r7
 3b0:	eor	r5, r5, ip
 3b4:	eor	r5, r5, r0
 3b8:	ldr	r0, [lr, #-8]
 3bc:	uxtb	ip, r5
 3c0:	lsr	r7, r5, #8
 3c4:	lsr	r8, r5, #24
 3c8:	add	ip, ip, #768	; 0x300
 3cc:	lsr	r5, r5, #16
 3d0:	uxtb	r7, r7
 3d4:	ldr	ip, [r3, ip, lsl #2]
 3d8:	ldr	r8, [r3, r8, lsl #2]
 3dc:	add	r7, r7, #512	; 0x200
 3e0:	uxtb	r5, r5
 3e4:	add	r5, r5, #256	; 0x100
 3e8:	ldr	r7, [r3, r7, lsl #2]
 3ec:	eor	ip, ip, r8
 3f0:	ldr	r5, [r3, r5, lsl #2]
 3f4:	eor	ip, ip, r6
 3f8:	eor	ip, ip, r7
 3fc:	eor	ip, ip, r5
 400:	sub	r4, r4, #32
 404:	uxtb	r5, ip
 408:	lsr	r6, ip, #8
 40c:	lsr	r7, ip, #24
 410:	add	r5, r5, #768	; 0x300
 414:	lsr	ip, ip, #16
 418:	uxtb	r6, r6
 41c:	ldr	r7, [r3, r7, lsl #2]
 420:	ldr	r5, [r3, r5, lsl #2]
 424:	add	r6, r6, #512	; 0x200
 428:	uxtb	ip, ip
 42c:	add	ip, ip, #256	; 0x100
 430:	eor	r5, r5, r7
 434:	ldr	r6, [r3, r6, lsl #2]
 438:	ldr	ip, [r3, ip, lsl #2]
 43c:	eor	r0, r0, r5
 440:	eor	r0, r0, r6
 444:	eor	r0, r0, ip
 448:	cmp	r4, #31
 44c:	lsr	ip, r0, #16
 450:	uxtb	r7, r0
 454:	lsr	r5, r0, #8
 458:	uxtb	ip, ip
 45c:	add	ip, ip, #256	; 0x100
 460:	add	r7, r7, #768	; 0x300
 464:	lsr	r0, r0, #24
 468:	uxtb	r5, r5
 46c:	ldr	r6, [r3, ip, lsl #2]
 470:	add	r5, r5, #512	; 0x200
 474:	ldr	ip, [r3, r7, lsl #2]
 478:	ldr	r0, [r3, r0, lsl #2]
 47c:	ldr	r7, [lr, #-4]
 480:	eor	r0, r0, ip
 484:	ldr	ip, [r3, r5, lsl #2]
 488:	eor	r0, r0, r7
 48c:	eor	r0, r0, ip
 490:	eor	r0, r0, r6
 494:	add	lr, lr, #32
 498:	lsr	r6, r0, #8
 49c:	uxtb	ip, r0
 4a0:	lsr	r5, r0, #16
 4a4:	uxtb	r6, r6
 4a8:	add	ip, ip, #768	; 0x300
 4ac:	lsr	r0, r0, #24
 4b0:	add	r6, r6, #512	; 0x200
 4b4:	uxtb	r5, r5
 4b8:	ldr	ip, [r3, ip, lsl #2]
 4bc:	ldr	r0, [r3, r0, lsl #2]
 4c0:	add	r5, r5, #256	; 0x100
 4c4:	ldr	r7, [r3, r6, lsl #2]
 4c8:	eor	r0, r0, ip
 4cc:	ldr	r6, [r3, r5, lsl #2]
 4d0:	eor	r0, r0, r7
 4d4:	eor	r6, r6, r0
 4d8:	bhi	28c <coda_crc32+0x6c>
 4dc:	sub	r4, r2, #32
 4e0:	bic	r4, r4, #31
 4e4:	add	r4, r4, #32
 4e8:	add	r4, r1, r4
 4ec:	and	r2, r2, #31
 4f0:	cmp	r2, #3
 4f4:	bls	56c <coda_crc32+0x34c>
 4f8:	ldr	r3, [pc, #168]	; 5a8 <coda_crc32+0x388>
 4fc:	mov	lr, r2
 500:	mov	r5, r4
 504:	ldr	r0, [r5], #4
 508:	sub	lr, lr, #4
 50c:	eor	r0, r0, r6
 510:	cmp	lr, #3
 514:	lsr	r6, r0, #8
 518:	uxtb	r1, r0
 51c:	lsr	ip, r0, #16
 520:	uxtb	r6, r6
 524:	add	r1, r1, #768	; 0x300
 528:	lsr	r0, r0, #24
 52c:	add	r6, r6, #512	; 0x200
 530:	uxtb	ip, ip
 534:	ldr	r1, [r3, r1, lsl #2]
 538:	ldr	r0, [r3, r0, lsl #2]
 53c:	add	ip, ip, #256	; 0x100
 540:	ldr	r7, [r3, r6, lsl #2]
 544:	eor	r0, r0, r1
 548:	ldr	r6, [r3, ip, lsl #2]
 54c:	eor	r0, r0, r7
 550:	eor	r6, r6, r0
 554:	bhi	504 <coda_crc32+0x2e4>
 558:	sub	r3, r2, #4
 55c:	bic	r3, r3, #3
 560:	add	r3, r3, #4
 564:	add	r4, r4, r3
 568:	and	r2, r2, #3
 56c:	cmp	r2, #0
 570:	beq	26c <coda_crc32+0x4c>
 574:	ldr	r3, [pc, #44]	; 5a8 <coda_crc32+0x388>
 578:	add	r2, r4, r2
 57c:	ldrb	r1, [r4], #1
 580:	eor	r1, r1, r6
 584:	cmp	r4, r2
 588:	uxtb	r1, r1
 58c:	ldr	r1, [r3, r1, lsl #2]
 590:	eor	r6, r1, r6, lsr #8
 594:	bne	57c <coda_crc32+0x35c>
 598:	mvn	r0, r6
 59c:	pop	{r4, r5, r6, r7, r8, r9, pc}
 5a0:	mov	r0, r1
 5a4:	bx	lr
 5a8:	.word	0x00000000

000005ac <coda_crc32_combine>:
 5ac:	b	0 <crc32_combine_>

000005b0 <coda_crc32_combine64>:
 5b0:	b	0 <crc32_combine_>
