
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadd.dir/tools/codadd/codadd-list.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_path>:
   0:	push	{fp, lr}
   4:	add	fp, sp, #4
   8:	sub	sp, sp, #64	; 0x40
   c:	str	r0, [fp, #-64]	; 0xffffffc0
  10:	mov	r0, #47	; 0x2f
  14:	bl	0 <putchar>
  18:	mov	r3, #0
  1c:	str	r3, [fp, #-8]
  20:	b	1f4 <print_path+0x1f4>
  24:	ldr	r3, [fp, #-8]
  28:	add	r3, r3, #1
  2c:	ldr	r2, [pc, #476]	; 210 <print_path+0x210>
  30:	ldr	r3, [r2, r3, lsl #2]
  34:	cmn	r3, #1
  38:	bne	48 <print_path+0x48>
  3c:	mov	r0, #64	; 0x40
  40:	bl	0 <putchar>
  44:	b	1e8 <print_path+0x1e8>
  48:	ldr	r2, [pc, #452]	; 214 <print_path+0x214>
  4c:	ldr	r3, [fp, #-8]
  50:	ldr	r3, [r2, r3, lsl #2]
  54:	str	r3, [fp, #-16]
  58:	ldr	r3, [fp, #-16]
  5c:	ldr	r3, [r3, #8]
  60:	cmp	r3, #0
  64:	beq	74 <print_path+0x74>
  68:	cmp	r3, #1
  6c:	beq	d0 <print_path+0xd0>
  70:	b	1d4 <print_path+0x1d4>
  74:	ldr	r3, [fp, #-8]
  78:	add	r3, r3, #1
  7c:	ldr	r2, [pc, #396]	; 210 <print_path+0x210>
  80:	ldr	r3, [r2, r3, lsl #2]
  84:	sub	r2, fp, #20
  88:	mov	r1, r3
  8c:	ldr	r0, [fp, #-16]
  90:	bl	0 <coda_type_get_record_field_name>
  94:	ldr	r3, [fp, #-8]
  98:	cmp	r3, #0
  9c:	ble	bc <print_path+0xbc>
  a0:	ldr	r2, [pc, #360]	; 210 <print_path+0x210>
  a4:	ldr	r3, [fp, #-8]
  a8:	ldr	r3, [r2, r3, lsl #2]
  ac:	cmn	r3, #1
  b0:	beq	bc <print_path+0xbc>
  b4:	mov	r0, #47	; 0x2f
  b8:	bl	0 <putchar>
  bc:	ldr	r3, [fp, #-20]	; 0xffffffec
  c0:	mov	r1, r3
  c4:	ldr	r0, [pc, #332]	; 218 <print_path+0x218>
  c8:	bl	0 <printf>
  cc:	b	1e8 <print_path+0x1e8>
  d0:	sub	r2, fp, #56	; 0x38
  d4:	sub	r3, fp, #24
  d8:	mov	r1, r3
  dc:	ldr	r0, [fp, #-16]
  e0:	bl	0 <coda_type_get_array_dim>
  e4:	mov	r0, #91	; 0x5b
  e8:	bl	0 <putchar>
  ec:	mov	r3, #0
  f0:	str	r3, [fp, #-12]
  f4:	b	1b8 <print_path+0x1b8>
  f8:	ldr	r3, [fp, #-12]
  fc:	cmp	r3, #0
 100:	ble	10c <print_path+0x10c>
 104:	mov	r0, #44	; 0x2c
 108:	bl	0 <putchar>
 10c:	ldr	r3, [fp, #-12]
 110:	lsl	r3, r3, #2
 114:	sub	r2, fp, #4
 118:	add	r3, r2, r3
 11c:	ldr	r3, [r3, #-52]	; 0xffffffcc
 120:	cmp	r3, #0
 124:	bge	18c <print_path+0x18c>
 128:	ldr	r3, [pc, #236]	; 21c <print_path+0x21c>
 12c:	ldr	r3, [r3]
 130:	cmp	r3, #0
 134:	beq	180 <print_path+0x180>
 138:	ldr	r2, [fp, #-16]
 13c:	ldr	r3, [fp, #-12]
 140:	add	r3, r3, #20
 144:	lsl	r3, r3, #2
 148:	add	r3, r2, r3
 14c:	ldr	r3, [r3, #4]
 150:	cmp	r3, #0
 154:	beq	180 <print_path+0x180>
 158:	ldr	r2, [fp, #-16]
 15c:	ldr	r3, [fp, #-12]
 160:	add	r3, r3, #20
 164:	lsl	r3, r3, #2
 168:	add	r3, r2, r3
 16c:	ldr	r3, [r3, #4]
 170:	ldr	r1, [pc, #168]	; 220 <print_path+0x220>
 174:	mov	r0, r3
 178:	bl	0 <coda_expression_print>
 17c:	b	1ac <print_path+0x1ac>
 180:	mov	r0, #63	; 0x3f
 184:	bl	0 <putchar>
 188:	b	1ac <print_path+0x1ac>
 18c:	ldr	r3, [fp, #-12]
 190:	lsl	r3, r3, #2
 194:	sub	r2, fp, #4
 198:	add	r3, r2, r3
 19c:	ldr	r3, [r3, #-52]	; 0xffffffcc
 1a0:	mov	r1, r3
 1a4:	ldr	r0, [pc, #120]	; 224 <print_path+0x224>
 1a8:	bl	0 <printf>
 1ac:	ldr	r3, [fp, #-12]
 1b0:	add	r3, r3, #1
 1b4:	str	r3, [fp, #-12]
 1b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
 1bc:	ldr	r2, [fp, #-12]
 1c0:	cmp	r2, r3
 1c4:	blt	f8 <print_path+0xf8>
 1c8:	mov	r0, #93	; 0x5d
 1cc:	bl	0 <putchar>
 1d0:	b	1e8 <print_path+0x1e8>
 1d4:	ldr	r3, [pc, #76]	; 228 <print_path+0x228>
 1d8:	mov	r2, #125	; 0x7d
 1dc:	ldr	r1, [pc, #72]	; 22c <print_path+0x22c>
 1e0:	ldr	r0, [pc, #72]	; 230 <print_path+0x230>
 1e4:	bl	0 <__assert_fail>
 1e8:	ldr	r3, [fp, #-8]
 1ec:	add	r3, r3, #1
 1f0:	str	r3, [fp, #-8]
 1f4:	ldr	r2, [fp, #-8]
 1f8:	ldr	r3, [fp, #-64]	; 0xffffffc0
 1fc:	cmp	r2, r3
 200:	blt	24 <print_path+0x24>
 204:	nop			; (mov r0, r0)
 208:	sub	sp, fp, #4
 20c:	pop	{fp, pc}
	...
 224:	.word	0x00000004
 228:	.word	0x000000c4
 22c:	.word	0x00000008
 230:	.word	0x00000058

00000234 <print_type>:
 234:	push	{r4, fp, lr}
 238:	add	fp, sp, #8
 23c:	sub	sp, sp, #68	; 0x44
 240:	str	r0, [fp, #-72]	; 0xffffffb8
 244:	str	r1, [fp, #-76]	; 0xffffffb4
 248:	mov	r3, #0
 24c:	str	r3, [fp, #-16]
 250:	ldr	r3, [fp, #-76]	; 0xffffffb4
 254:	cmp	r3, #31
 258:	ble	284 <print_type+0x50>
 25c:	mov	r0, #10
 260:	bl	0 <putchar>
 264:	ldr	r3, [pc, #1004]	; 658 <print_type+0x424>
 268:	ldr	r0, [r3]
 26c:	mov	r3, #32
 270:	ldr	r2, [fp, #-76]	; 0xffffffb4
 274:	ldr	r1, [pc, #992]	; 65c <print_type+0x428>
 278:	bl	0 <fprintf>
 27c:	mov	r0, #1
 280:	bl	0 <exit>
 284:	ldr	r1, [pc, #980]	; 660 <print_type+0x42c>
 288:	ldr	r3, [fp, #-76]	; 0xffffffb4
 28c:	ldr	r2, [fp, #-72]	; 0xffffffb8
 290:	str	r2, [r1, r3, lsl #2]
 294:	sub	r3, fp, #24
 298:	mov	r1, r3
 29c:	ldr	r0, [fp, #-72]	; 0xffffffb8
 2a0:	bl	0 <coda_type_get_class>
 2a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
 2a8:	cmp	r3, #0
 2ac:	beq	2bc <print_type+0x88>
 2b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
 2b4:	cmp	r3, #1
 2b8:	bne	2cc <print_type+0x98>
 2bc:	ldr	r3, [pc, #928]	; 664 <print_type+0x430>
 2c0:	ldr	r3, [r3]
 2c4:	str	r3, [fp, #-16]
 2c8:	b	2f0 <print_type+0xbc>
 2cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
 2d0:	cmp	r3, #6
 2d4:	bne	2e8 <print_type+0xb4>
 2d8:	ldr	r3, [pc, #904]	; 668 <print_type+0x434>
 2dc:	ldr	r3, [r3]
 2e0:	str	r3, [fp, #-16]
 2e4:	b	2f0 <print_type+0xbc>
 2e8:	mov	r3, #1
 2ec:	str	r3, [fp, #-16]
 2f0:	ldr	r3, [fp, #-16]
 2f4:	cmp	r3, #0
 2f8:	beq	49c <print_type+0x268>
 2fc:	ldr	r0, [fp, #-76]	; 0xffffffb4
 300:	bl	0 <print_path>
 304:	ldr	r3, [pc, #864]	; 66c <print_type+0x438>
 308:	ldr	r3, [r3]
 30c:	cmp	r3, #0
 310:	beq	34c <print_type+0x118>
 314:	sub	r3, fp, #28
 318:	mov	r1, r3
 31c:	ldr	r0, [fp, #-72]	; 0xffffffb8
 320:	bl	0 <coda_type_get_read_type>
 324:	ldr	r3, [pc, #836]	; 670 <print_type+0x43c>
 328:	ldr	r4, [r3]
 32c:	ldr	r3, [fp, #-28]	; 0xffffffe4
 330:	mov	r0, r3
 334:	bl	0 <coda_type_get_native_type_name>
 338:	mov	r3, r0
 33c:	mov	r2, r3
 340:	mov	r1, r4
 344:	ldr	r0, [pc, #808]	; 674 <print_type+0x440>
 348:	bl	0 <printf>
 34c:	ldr	r3, [pc, #804]	; 678 <print_type+0x444>
 350:	ldr	r3, [r3]
 354:	cmp	r3, #0
 358:	beq	394 <print_type+0x160>
 35c:	sub	r3, fp, #32
 360:	mov	r1, r3
 364:	ldr	r0, [fp, #-72]	; 0xffffffb8
 368:	bl	0 <coda_type_get_format>
 36c:	ldr	r3, [pc, #764]	; 670 <print_type+0x43c>
 370:	ldr	r4, [r3]
 374:	ldr	r3, [fp, #-32]	; 0xffffffe0
 378:	mov	r0, r3
 37c:	bl	0 <coda_type_get_format_name>
 380:	mov	r3, r0
 384:	mov	r2, r3
 388:	mov	r1, r4
 38c:	ldr	r0, [pc, #736]	; 674 <print_type+0x440>
 390:	bl	0 <printf>
 394:	ldr	r3, [pc, #736]	; 67c <print_type+0x448>
 398:	ldr	r3, [r3]
 39c:	cmp	r3, #0
 3a0:	beq	414 <print_type+0x1e0>
 3a4:	ldr	r3, [pc, #708]	; 670 <print_type+0x43c>
 3a8:	ldr	r3, [r3]
 3ac:	mov	r1, r3
 3b0:	ldr	r0, [pc, #712]	; 680 <print_type+0x44c>
 3b4:	bl	0 <printf>
 3b8:	sub	r3, fp, #36	; 0x24
 3bc:	mov	r1, r3
 3c0:	ldr	r0, [fp, #-72]	; 0xffffffb8
 3c4:	bl	0 <coda_type_get_unit>
 3c8:	ldr	r3, [fp, #-36]	; 0xffffffdc
 3cc:	cmp	r3, #0
 3d0:	beq	414 <print_type+0x1e0>
 3d4:	ldr	r3, [pc, #680]	; 684 <print_type+0x450>
 3d8:	ldr	r3, [r3]
 3dc:	cmp	r3, #0
 3e0:	beq	3ec <print_type+0x1b8>
 3e4:	mov	r0, #34	; 0x22
 3e8:	bl	0 <putchar>
 3ec:	ldr	r3, [fp, #-36]	; 0xffffffdc
 3f0:	mov	r1, r3
 3f4:	ldr	r0, [pc, #644]	; 680 <print_type+0x44c>
 3f8:	bl	0 <printf>
 3fc:	ldr	r3, [pc, #640]	; 684 <print_type+0x450>
 400:	ldr	r3, [r3]
 404:	cmp	r3, #0
 408:	beq	414 <print_type+0x1e0>
 40c:	mov	r0, #34	; 0x22
 410:	bl	0 <putchar>
 414:	ldr	r3, [pc, #620]	; 688 <print_type+0x454>
 418:	ldr	r3, [r3]
 41c:	cmp	r3, #0
 420:	beq	494 <print_type+0x260>
 424:	ldr	r3, [pc, #580]	; 670 <print_type+0x43c>
 428:	ldr	r3, [r3]
 42c:	mov	r1, r3
 430:	ldr	r0, [pc, #584]	; 680 <print_type+0x44c>
 434:	bl	0 <printf>
 438:	sub	r3, fp, #40	; 0x28
 43c:	mov	r1, r3
 440:	ldr	r0, [fp, #-72]	; 0xffffffb8
 444:	bl	0 <coda_type_get_description>
 448:	ldr	r3, [fp, #-40]	; 0xffffffd8
 44c:	cmp	r3, #0
 450:	beq	494 <print_type+0x260>
 454:	ldr	r3, [pc, #552]	; 684 <print_type+0x450>
 458:	ldr	r3, [r3]
 45c:	cmp	r3, #0
 460:	beq	46c <print_type+0x238>
 464:	mov	r0, #34	; 0x22
 468:	bl	0 <putchar>
 46c:	ldr	r3, [fp, #-40]	; 0xffffffd8
 470:	mov	r1, r3
 474:	ldr	r0, [pc, #516]	; 680 <print_type+0x44c>
 478:	bl	0 <printf>
 47c:	ldr	r3, [pc, #512]	; 684 <print_type+0x450>
 480:	ldr	r3, [r3]
 484:	cmp	r3, #0
 488:	beq	494 <print_type+0x260>
 48c:	mov	r0, #34	; 0x22
 490:	bl	0 <putchar>
 494:	mov	r0, #10
 498:	bl	0 <putchar>
 49c:	ldr	r3, [pc, #488]	; 68c <print_type+0x458>
 4a0:	ldr	r3, [r3]
 4a4:	cmp	r3, #0
 4a8:	beq	504 <print_type+0x2d0>
 4ac:	sub	r3, fp, #44	; 0x2c
 4b0:	mov	r1, r3
 4b4:	ldr	r0, [fp, #-72]	; 0xffffffb8
 4b8:	bl	0 <coda_type_has_attributes>
 4bc:	ldr	r3, [fp, #-44]	; 0xffffffd4
 4c0:	cmp	r3, #0
 4c4:	beq	504 <print_type+0x2d0>
 4c8:	sub	r3, fp, #48	; 0x30
 4cc:	mov	r1, r3
 4d0:	ldr	r0, [fp, #-72]	; 0xffffffb8
 4d4:	bl	0 <coda_type_get_attributes>
 4d8:	ldr	r3, [fp, #-76]	; 0xffffffb4
 4dc:	add	r3, r3, #1
 4e0:	ldr	r2, [pc, #424]	; 690 <print_type+0x45c>
 4e4:	mvn	r1, #0
 4e8:	str	r1, [r2, r3, lsl #2]
 4ec:	ldr	r2, [fp, #-48]	; 0xffffffd0
 4f0:	ldr	r3, [fp, #-76]	; 0xffffffb4
 4f4:	add	r3, r3, #1
 4f8:	mov	r1, r3
 4fc:	mov	r0, r2
 500:	bl	234 <print_type>
 504:	ldr	r3, [fp, #-24]	; 0xffffffe8
 508:	cmp	r3, #1
 50c:	beq	5d0 <print_type+0x39c>
 510:	cmp	r3, #1
 514:	bcc	524 <print_type+0x2f0>
 518:	cmp	r3, #6
 51c:	beq	610 <print_type+0x3dc>
 520:	b	648 <print_type+0x414>
 524:	sub	r3, fp, #52	; 0x34
 528:	mov	r1, r3
 52c:	ldr	r0, [fp, #-72]	; 0xffffffb8
 530:	bl	0 <coda_type_get_num_record_fields>
 534:	mov	r3, #0
 538:	str	r3, [fp, #-20]	; 0xffffffec
 53c:	b	5bc <print_type+0x388>
 540:	sub	r3, fp, #56	; 0x38
 544:	mov	r2, r3
 548:	ldr	r1, [fp, #-20]	; 0xffffffec
 54c:	ldr	r0, [fp, #-72]	; 0xffffffb8
 550:	bl	0 <coda_type_get_record_field_type>
 554:	ldr	r3, [pc, #312]	; 694 <print_type+0x460>
 558:	ldr	r3, [r3]
 55c:	cmp	r3, #0
 560:	bne	584 <print_type+0x350>
 564:	sub	r3, fp, #60	; 0x3c
 568:	mov	r2, r3
 56c:	ldr	r1, [fp, #-20]	; 0xffffffec
 570:	ldr	r0, [fp, #-72]	; 0xffffffb8
 574:	bl	0 <coda_type_get_record_field_hidden_status>
 578:	ldr	r3, [fp, #-60]	; 0xffffffc4
 57c:	cmp	r3, #0
 580:	bne	5b0 <print_type+0x37c>
 584:	ldr	r3, [fp, #-76]	; 0xffffffb4
 588:	add	r3, r3, #1
 58c:	ldr	r1, [pc, #252]	; 690 <print_type+0x45c>
 590:	ldr	r2, [fp, #-20]	; 0xffffffec
 594:	str	r2, [r1, r3, lsl #2]
 598:	ldr	r2, [fp, #-56]	; 0xffffffc8
 59c:	ldr	r3, [fp, #-76]	; 0xffffffb4
 5a0:	add	r3, r3, #1
 5a4:	mov	r1, r3
 5a8:	mov	r0, r2
 5ac:	bl	234 <print_type>
 5b0:	ldr	r3, [fp, #-20]	; 0xffffffec
 5b4:	add	r3, r3, #1
 5b8:	str	r3, [fp, #-20]	; 0xffffffec
 5bc:	ldr	r3, [fp, #-52]	; 0xffffffcc
 5c0:	ldr	r2, [fp, #-20]	; 0xffffffec
 5c4:	cmp	r2, r3
 5c8:	blt	540 <print_type+0x30c>
 5cc:	b	64c <print_type+0x418>
 5d0:	sub	r3, fp, #64	; 0x40
 5d4:	mov	r1, r3
 5d8:	ldr	r0, [fp, #-72]	; 0xffffffb8
 5dc:	bl	0 <coda_type_get_array_base_type>
 5e0:	ldr	r3, [fp, #-76]	; 0xffffffb4
 5e4:	add	r3, r3, #1
 5e8:	ldr	r2, [pc, #160]	; 690 <print_type+0x45c>
 5ec:	mov	r1, #0
 5f0:	str	r1, [r2, r3, lsl #2]
 5f4:	ldr	r2, [fp, #-64]	; 0xffffffc0
 5f8:	ldr	r3, [fp, #-76]	; 0xffffffb4
 5fc:	add	r3, r3, #1
 600:	mov	r1, r3
 604:	mov	r0, r2
 608:	bl	234 <print_type>
 60c:	b	64c <print_type+0x418>
 610:	ldr	r3, [pc, #80]	; 668 <print_type+0x434>
 614:	ldr	r3, [r3]
 618:	cmp	r3, #0
 61c:	bne	648 <print_type+0x414>
 620:	sub	r3, fp, #68	; 0x44
 624:	mov	r1, r3
 628:	ldr	r0, [fp, #-72]	; 0xffffffb8
 62c:	bl	0 <coda_type_get_special_base_type>
 630:	ldr	r3, [fp, #-68]	; 0xffffffbc
 634:	ldr	r1, [fp, #-76]	; 0xffffffb4
 638:	mov	r0, r3
 63c:	bl	234 <print_type>
 640:	nop			; (mov r0, r0)
 644:	b	64c <print_type+0x418>
 648:	nop			; (mov r0, r0)
 64c:	nop			; (mov r0, r0)
 650:	sub	sp, fp, #8
 654:	pop	{r4, fp, pc}
 658:	.word	0x00000000
 65c:	.word	0x0000005c
	...
 674:	.word	0x000000a4
	...

00000698 <generate_field_list>:
 698:	push	{r4, fp, lr}
 69c:	add	fp, sp, #8
 6a0:	sub	sp, sp, #36	; 0x24
 6a4:	str	r0, [fp, #-32]	; 0xffffffe0
 6a8:	str	r1, [fp, #-36]	; 0xffffffdc
 6ac:	str	r2, [fp, #-40]	; 0xffffffd8
 6b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
 6b4:	bl	0 <coda_data_dictionary_get_product_class>
 6b8:	str	r0, [fp, #-16]
 6bc:	ldr	r3, [fp, #-16]
 6c0:	cmp	r3, #0
 6c4:	bne	708 <generate_field_list+0x70>
 6c8:	ldr	r3, [pc, #288]	; 7f0 <generate_field_list+0x158>
 6cc:	ldr	r4, [r3]
 6d0:	ldr	r3, [pc, #284]	; 7f4 <generate_field_list+0x15c>
 6d4:	ldr	r3, [pc, r3]
 6d8:	bl	0 <__aeabi_read_tp>
 6dc:	mov	r2, r0
 6e0:	ldr	r3, [r2, r3]
 6e4:	mov	r0, r3
 6e8:	bl	0 <coda_errno_to_string>
 6ec:	mov	r3, r0
 6f0:	mov	r2, r3
 6f4:	ldr	r1, [pc, #252]	; 7f8 <generate_field_list+0x160>
 6f8:	mov	r0, r4
 6fc:	bl	0 <fprintf>
 700:	mov	r0, #1
 704:	bl	0 <exit>
 708:	ldr	r1, [fp, #-36]	; 0xffffffdc
 70c:	ldr	r0, [fp, #-16]
 710:	bl	0 <coda_product_class_get_product_type>
 714:	str	r0, [fp, #-20]	; 0xffffffec
 718:	ldr	r3, [fp, #-20]	; 0xffffffec
 71c:	cmp	r3, #0
 720:	bne	764 <generate_field_list+0xcc>
 724:	ldr	r3, [pc, #196]	; 7f0 <generate_field_list+0x158>
 728:	ldr	r4, [r3]
 72c:	ldr	r3, [pc, #200]	; 7fc <generate_field_list+0x164>
 730:	ldr	r3, [pc, r3]
 734:	bl	0 <__aeabi_read_tp>
 738:	mov	r2, r0
 73c:	ldr	r3, [r2, r3]
 740:	mov	r0, r3
 744:	bl	0 <coda_errno_to_string>
 748:	mov	r3, r0
 74c:	mov	r2, r3
 750:	ldr	r1, [pc, #160]	; 7f8 <generate_field_list+0x160>
 754:	mov	r0, r4
 758:	bl	0 <fprintf>
 75c:	mov	r0, #1
 760:	bl	0 <exit>
 764:	ldr	r1, [fp, #-40]	; 0xffffffd8
 768:	ldr	r0, [fp, #-20]	; 0xffffffec
 76c:	bl	0 <coda_product_type_get_product_definition_by_version>
 770:	str	r0, [fp, #-24]	; 0xffffffe8
 774:	ldr	r3, [fp, #-24]	; 0xffffffe8
 778:	cmp	r3, #0
 77c:	bne	7c0 <generate_field_list+0x128>
 780:	ldr	r3, [pc, #104]	; 7f0 <generate_field_list+0x158>
 784:	ldr	r4, [r3]
 788:	ldr	r3, [pc, #112]	; 800 <generate_field_list+0x168>
 78c:	ldr	r3, [pc, r3]
 790:	bl	0 <__aeabi_read_tp>
 794:	mov	r2, r0
 798:	ldr	r3, [r2, r3]
 79c:	mov	r0, r3
 7a0:	bl	0 <coda_errno_to_string>
 7a4:	mov	r3, r0
 7a8:	mov	r2, r3
 7ac:	ldr	r1, [pc, #68]	; 7f8 <generate_field_list+0x160>
 7b0:	mov	r0, r4
 7b4:	bl	0 <fprintf>
 7b8:	mov	r0, #1
 7bc:	bl	0 <exit>
 7c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
 7c4:	ldr	r3, [r3, #28]
 7c8:	cmp	r3, #0
 7cc:	beq	7e4 <generate_field_list+0x14c>
 7d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
 7d4:	ldr	r3, [r3, #28]
 7d8:	mov	r1, #0
 7dc:	mov	r0, r3
 7e0:	bl	234 <print_type>
 7e4:	nop			; (mov r0, r0)
 7e8:	sub	sp, fp, #8
 7ec:	pop	{r4, fp, pc}
 7f0:	.word	0x00000000
 7f4:	.word	0x00000118
 7f8:	.word	0x000000ac
 7fc:	.word	0x000000c4
 800:	.word	0x0000006c

00000804 <generate_product_list>:
 804:	push	{r4, fp, lr}
 808:	add	fp, sp, #8
 80c:	sub	sp, sp, #44	; 0x2c
 810:	str	r0, [fp, #-40]	; 0xffffffd8
 814:	str	r1, [fp, #-44]	; 0xffffffd4
 818:	mov	r3, #0
 81c:	str	r3, [fp, #-16]
 820:	b	a60 <generate_product_list+0x25c>
 824:	ldr	r3, [pc, #612]	; a90 <generate_product_list+0x28c>
 828:	ldr	r3, [pc, r3]
 82c:	bl	0 <__aeabi_read_tp>
 830:	mov	r2, r0
 834:	ldr	r3, [r2, r3]
 838:	ldr	r2, [r3, #4]
 83c:	ldr	r3, [fp, #-16]
 840:	lsl	r3, r3, #2
 844:	add	r3, r2, r3
 848:	ldr	r3, [r3]
 84c:	str	r3, [fp, #-28]	; 0xffffffe4
 850:	ldr	r3, [fp, #-40]	; 0xffffffd8
 854:	cmp	r3, #0
 858:	beq	87c <generate_product_list+0x78>
 85c:	ldr	r3, [fp, #-28]	; 0xffffffe4
 860:	ldr	r3, [r3]
 864:	ldr	r1, [fp, #-40]	; 0xffffffd8
 868:	mov	r0, r3
 86c:	bl	0 <strcmp>
 870:	mov	r3, r0
 874:	cmp	r3, #0
 878:	bne	a50 <generate_product_list+0x24c>
 87c:	mov	r3, #0
 880:	str	r3, [fp, #-20]	; 0xffffffec
 884:	b	a38 <generate_product_list+0x234>
 888:	ldr	r3, [fp, #-28]	; 0xffffffe4
 88c:	ldr	r2, [r3, #32]
 890:	ldr	r3, [fp, #-20]	; 0xffffffec
 894:	lsl	r3, r3, #2
 898:	add	r3, r2, r3
 89c:	ldr	r3, [r3]
 8a0:	str	r3, [fp, #-32]	; 0xffffffe0
 8a4:	ldr	r3, [fp, #-44]	; 0xffffffd4
 8a8:	cmp	r3, #0
 8ac:	beq	8d0 <generate_product_list+0xcc>
 8b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
 8b4:	ldr	r3, [r3]
 8b8:	ldr	r1, [fp, #-44]	; 0xffffffd4
 8bc:	mov	r0, r3
 8c0:	bl	0 <strcmp>
 8c4:	mov	r3, r0
 8c8:	cmp	r3, #0
 8cc:	bne	a28 <generate_product_list+0x224>
 8d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
 8d4:	ldr	r3, [r3, #8]
 8d8:	cmp	r3, #0
 8dc:	ble	a2c <generate_product_list+0x228>
 8e0:	mov	r3, #0
 8e4:	str	r3, [fp, #-24]	; 0xffffffe8
 8e8:	b	a10 <generate_product_list+0x20c>
 8ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
 8f0:	ldr	r2, [r3, #12]
 8f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
 8f8:	lsl	r3, r3, #2
 8fc:	add	r3, r2, r3
 900:	ldr	r3, [r3]
 904:	str	r3, [fp, #-36]	; 0xffffffdc
 908:	ldr	r3, [fp, #-28]	; 0xffffffe4
 90c:	ldr	r1, [r3]
 910:	ldr	r3, [pc, #380]	; a94 <generate_product_list+0x290>
 914:	ldr	r0, [r3]
 918:	ldr	r3, [fp, #-32]	; 0xffffffe0
 91c:	ldr	ip, [r3]
 920:	ldr	r3, [pc, #364]	; a94 <generate_product_list+0x290>
 924:	ldr	r3, [r3]
 928:	ldr	r2, [fp, #-36]	; 0xffffffdc
 92c:	ldr	r2, [r2, #4]
 930:	str	r2, [sp, #4]
 934:	str	r3, [sp]
 938:	mov	r3, ip
 93c:	mov	r2, r0
 940:	ldr	r0, [pc, #336]	; a98 <generate_product_list+0x294>
 944:	bl	0 <printf>
 948:	ldr	r3, [pc, #332]	; a9c <generate_product_list+0x298>
 94c:	ldr	r3, [r3]
 950:	cmp	r3, #0
 954:	beq	984 <generate_product_list+0x180>
 958:	ldr	r3, [pc, #308]	; a94 <generate_product_list+0x290>
 95c:	ldr	r4, [r3]
 960:	ldr	r3, [fp, #-36]	; 0xffffffdc
 964:	ldr	r3, [r3]
 968:	mov	r0, r3
 96c:	bl	0 <coda_type_get_format_name>
 970:	mov	r3, r0
 974:	mov	r2, r3
 978:	mov	r1, r4
 97c:	ldr	r0, [pc, #284]	; aa0 <generate_product_list+0x29c>
 980:	bl	0 <printf>
 984:	ldr	r3, [pc, #280]	; aa4 <generate_product_list+0x2a0>
 988:	ldr	r3, [r3]
 98c:	cmp	r3, #0
 990:	beq	9fc <generate_product_list+0x1f8>
 994:	ldr	r3, [pc, #248]	; a94 <generate_product_list+0x290>
 998:	ldr	r3, [r3]
 99c:	mov	r1, r3
 9a0:	ldr	r0, [pc, #256]	; aa8 <generate_product_list+0x2a4>
 9a4:	bl	0 <printf>
 9a8:	ldr	r3, [fp, #-36]	; 0xffffffdc
 9ac:	ldr	r3, [r3, #12]
 9b0:	cmp	r3, #0
 9b4:	beq	9fc <generate_product_list+0x1f8>
 9b8:	ldr	r3, [pc, #236]	; aac <generate_product_list+0x2a8>
 9bc:	ldr	r3, [r3]
 9c0:	cmp	r3, #0
 9c4:	beq	9d0 <generate_product_list+0x1cc>
 9c8:	mov	r0, #34	; 0x22
 9cc:	bl	0 <putchar>
 9d0:	ldr	r3, [fp, #-36]	; 0xffffffdc
 9d4:	ldr	r3, [r3, #12]
 9d8:	mov	r1, r3
 9dc:	ldr	r0, [pc, #196]	; aa8 <generate_product_list+0x2a4>
 9e0:	bl	0 <printf>
 9e4:	ldr	r3, [pc, #192]	; aac <generate_product_list+0x2a8>
 9e8:	ldr	r3, [r3]
 9ec:	cmp	r3, #0
 9f0:	beq	9fc <generate_product_list+0x1f8>
 9f4:	mov	r0, #34	; 0x22
 9f8:	bl	0 <putchar>
 9fc:	mov	r0, #10
 a00:	bl	0 <putchar>
 a04:	ldr	r3, [fp, #-24]	; 0xffffffe8
 a08:	add	r3, r3, #1
 a0c:	str	r3, [fp, #-24]	; 0xffffffe8
 a10:	ldr	r3, [fp, #-32]	; 0xffffffe0
 a14:	ldr	r2, [r3, #8]
 a18:	ldr	r3, [fp, #-24]	; 0xffffffe8
 a1c:	cmp	r2, r3
 a20:	bgt	8ec <generate_product_list+0xe8>
 a24:	b	a2c <generate_product_list+0x228>
 a28:	nop			; (mov r0, r0)
 a2c:	ldr	r3, [fp, #-20]	; 0xffffffec
 a30:	add	r3, r3, #1
 a34:	str	r3, [fp, #-20]	; 0xffffffec
 a38:	ldr	r3, [fp, #-28]	; 0xffffffe4
 a3c:	ldr	r2, [r3, #28]
 a40:	ldr	r3, [fp, #-20]	; 0xffffffec
 a44:	cmp	r2, r3
 a48:	bgt	888 <generate_product_list+0x84>
 a4c:	b	a54 <generate_product_list+0x250>
 a50:	nop			; (mov r0, r0)
 a54:	ldr	r3, [fp, #-16]
 a58:	add	r3, r3, #1
 a5c:	str	r3, [fp, #-16]
 a60:	ldr	r3, [pc, #72]	; ab0 <generate_product_list+0x2ac>
 a64:	ldr	r3, [pc, r3]
 a68:	bl	0 <__aeabi_read_tp>
 a6c:	mov	r2, r0
 a70:	ldr	r3, [r2, r3]
 a74:	ldr	r2, [r3]
 a78:	ldr	r3, [fp, #-16]
 a7c:	cmp	r2, r3
 a80:	bgt	824 <generate_product_list+0x20>
 a84:	nop			; (mov r0, r0)
 a88:	sub	sp, fp, #8
 a8c:	pop	{r4, fp, pc}
 a90:	.word	0x00000260
 a94:	.word	0x00000000
 a98:	.word	0x000000b8
 a9c:	.word	0x00000000
 aa0:	.word	0x000000a4
	...
 ab0:	.word	0x00000044

00000ab4 <generate_list>:
 ab4:	push	{fp, lr}
 ab8:	add	fp, sp, #4
 abc:	sub	sp, sp, #16
 ac0:	str	r0, [fp, #-8]
 ac4:	str	r1, [fp, #-12]
 ac8:	str	r2, [fp, #-16]
 acc:	ldr	r3, [fp, #-16]
 ad0:	cmp	r3, #0
 ad4:	bge	ae8 <generate_list+0x34>
 ad8:	ldr	r1, [fp, #-12]
 adc:	ldr	r0, [fp, #-8]
 ae0:	bl	804 <generate_product_list>
 ae4:	b	af8 <generate_list+0x44>
 ae8:	ldr	r2, [fp, #-16]
 aec:	ldr	r1, [fp, #-12]
 af0:	ldr	r0, [fp, #-8]
 af4:	bl	698 <generate_field_list>
 af8:	nop			; (mov r0, r0)
 afc:	sub	sp, fp, #4
 b00:	pop	{fp, pc}
