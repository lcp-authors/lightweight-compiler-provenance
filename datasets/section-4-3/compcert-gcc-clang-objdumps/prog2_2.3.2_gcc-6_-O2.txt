
../compcert-repos/prog2/2.3.2:     file format elf32-littlearm


Disassembly of section .init:

000109c0 <.init>:
   109c0:	push	{r3, lr}
   109c4:	bl	10c1c <_start@@Base+0x3c>
   109c8:	pop	{r3, pc}

Disassembly of section .plt:

000109cc <calloc@plt-0x14>:
   109cc:	push	{lr}		; (str lr, [sp, #-4]!)
   109d0:	ldr	lr, [pc, #4]	; 109dc <calloc@plt-0x4>
   109d4:	add	lr, pc, lr
   109d8:	ldr	pc, [lr, #8]!
   109dc:	andeq	r1, r1, r4, lsr #12

000109e0 <calloc@plt>:
   109e0:	add	ip, pc, #0, 12
   109e4:	add	ip, ip, #69632	; 0x11000
   109e8:	ldr	pc, [ip, #1572]!	; 0x624

000109ec <raise@plt>:
   109ec:	add	ip, pc, #0, 12
   109f0:	add	ip, ip, #69632	; 0x11000
   109f4:	ldr	pc, [ip, #1564]!	; 0x61c

000109f8 <strcmp@plt>:
   109f8:	add	ip, pc, #0, 12
   109fc:	add	ip, ip, #69632	; 0x11000
   10a00:	ldr	pc, [ip, #1556]!	; 0x614

00010a04 <printf@plt>:
   10a04:	add	ip, pc, #0, 12
   10a08:	add	ip, ip, #69632	; 0x11000
   10a0c:	ldr	pc, [ip, #1548]!	; 0x60c

00010a10 <free@plt>:
   10a10:	add	ip, pc, #0, 12
   10a14:	add	ip, ip, #69632	; 0x11000
   10a18:	ldr	pc, [ip, #1540]!	; 0x604

00010a1c <fgets@plt>:
   10a1c:	add	ip, pc, #0, 12
   10a20:	add	ip, ip, #69632	; 0x11000
   10a24:	ldr	pc, [ip, #1532]!	; 0x5fc

00010a28 <time@plt>:
   10a28:	add	ip, pc, #0, 12
   10a2c:	add	ip, ip, #69632	; 0x11000
   10a30:	ldr	pc, [ip, #1524]!	; 0x5f4

00010a34 <realloc@plt>:
   10a34:	add	ip, pc, #0, 12
   10a38:	add	ip, ip, #69632	; 0x11000
   10a3c:	ldr	pc, [ip, #1516]!	; 0x5ec

00010a40 <strcat@plt>:
   10a40:	add	ip, pc, #0, 12
   10a44:	add	ip, ip, #69632	; 0x11000
   10a48:	ldr	pc, [ip, #1508]!	; 0x5e4

00010a4c <strcpy@plt>:
   10a4c:	add	ip, pc, #0, 12
   10a50:	add	ip, ip, #69632	; 0x11000
   10a54:	ldr	pc, [ip, #1500]!	; 0x5dc

00010a58 <puts@plt>:
   10a58:	add	ip, pc, #0, 12
   10a5c:	add	ip, ip, #69632	; 0x11000
   10a60:	ldr	pc, [ip, #1492]!	; 0x5d4

00010a64 <malloc@plt>:
   10a64:	add	ip, pc, #0, 12
   10a68:	add	ip, ip, #69632	; 0x11000
   10a6c:	ldr	pc, [ip, #1484]!	; 0x5cc

00010a70 <__libc_start_main@plt>:
   10a70:	add	ip, pc, #0, 12
   10a74:	add	ip, ip, #69632	; 0x11000
   10a78:	ldr	pc, [ip, #1476]!	; 0x5c4

00010a7c <__gmon_start__@plt>:
   10a7c:	add	ip, pc, #0, 12
   10a80:	add	ip, ip, #69632	; 0x11000
   10a84:	ldr	pc, [ip, #1468]!	; 0x5bc

00010a88 <strlen@plt>:
   10a88:	add	ip, pc, #0, 12
   10a8c:	add	ip, ip, #69632	; 0x11000
   10a90:	ldr	pc, [ip, #1460]!	; 0x5b4

00010a94 <srand@plt>:
   10a94:	add	ip, pc, #0, 12
   10a98:	add	ip, ip, #69632	; 0x11000
   10a9c:	ldr	pc, [ip, #1452]!	; 0x5ac

00010aa0 <rand@plt>:
   10aa0:	add	ip, pc, #0, 12
   10aa4:	add	ip, ip, #69632	; 0x11000
   10aa8:	ldr	pc, [ip, #1444]!	; 0x5a4

00010aac <__isoc99_scanf@plt>:
   10aac:	add	ip, pc, #0, 12
   10ab0:	add	ip, ip, #69632	; 0x11000
   10ab4:	ldr	pc, [ip, #1436]!	; 0x59c

00010ab8 <abort@plt>:
   10ab8:	add	ip, pc, #0, 12
   10abc:	add	ip, ip, #69632	; 0x11000
   10ac0:	ldr	pc, [ip, #1428]!	; 0x594

Disassembly of section .text:

00010ac4 <main@@Base>:
   10ac4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10ac8:	sub	sp, sp, #104	; 0x68
   10acc:	bl	10d48 <vetor_novo@@Base>
   10ad0:	mov	r4, #0
   10ad4:	ldr	sl, [pc, #232]	; 10bc4 <main@@Base+0x100>
   10ad8:	ldr	r9, [pc, #232]	; 10bc8 <main@@Base+0x104>
   10adc:	mov	r8, r4
   10ae0:	mov	r7, #100	; 0x64
   10ae4:	mov	r6, r0
   10ae8:	add	r5, r4, #1
   10aec:	mov	r1, r5
   10af0:	mov	r0, r9
   10af4:	bl	10a04 <printf@plt>
   10af8:	ldr	r2, [sl]
   10afc:	mov	r1, r7
   10b00:	add	r0, sp, #4
   10b04:	bl	10a1c <fgets@plt>
   10b08:	add	r0, sp, #4
   10b0c:	bl	10a88 <strlen@plt>
   10b10:	add	r3, sp, #104	; 0x68
   10b14:	mov	r2, r4
   10b18:	add	r1, sp, #4
   10b1c:	mov	r4, r5
   10b20:	add	r3, r3, r0
   10b24:	mov	r0, r6
   10b28:	strb	r8, [r3, #-101]	; 0xffffff9b
   10b2c:	bl	10e90 <vetor_insere@@Base>
   10b30:	cmp	r5, #5
   10b34:	bne	10ae8 <main@@Base+0x24>
   10b38:	mov	r0, r6
   10b3c:	bl	10d08 <imprime@@Base>
   10b40:	ldr	r0, [pc, #132]	; 10bcc <main@@Base+0x108>
   10b44:	bl	10a04 <printf@plt>
   10b48:	add	r1, sp, #4
   10b4c:	ldr	r0, [pc, #124]	; 10bd0 <main@@Base+0x10c>
   10b50:	bl	10aac <__isoc99_scanf@plt>
   10b54:	add	r1, sp, #4
   10b58:	mov	r0, r6
   10b5c:	bl	10fec <vetor_pesquisa@@Base>
   10b60:	mov	r1, r0
   10b64:	mov	r0, r6
   10b68:	bl	10f6c <vetor_remove@@Base>
   10b6c:	cmp	r0, #0
   10b70:	beq	10bb8 <main@@Base+0xf4>
   10b74:	ldr	r0, [pc, #88]	; 10bd4 <main@@Base+0x110>
   10b78:	bl	10a58 <puts@plt>
   10b7c:	mov	r0, r6
   10b80:	bl	1104c <vetor_ordena@@Base>
   10b84:	cmp	r0, #0
   10b88:	beq	10b94 <main@@Base+0xd0>
   10b8c:	ldr	r0, [pc, #68]	; 10bd8 <main@@Base+0x114>
   10b90:	bl	10a04 <printf@plt>
   10b94:	ldr	r0, [pc, #64]	; 10bdc <main@@Base+0x118>
   10b98:	bl	10a58 <puts@plt>
   10b9c:	mov	r0, r6
   10ba0:	bl	10d08 <imprime@@Base>
   10ba4:	mov	r0, r6
   10ba8:	bl	10d6c <vetor_apaga@@Base>
   10bac:	mov	r0, #0
   10bb0:	add	sp, sp, #104	; 0x68
   10bb4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10bb8:	mov	r0, r6
   10bbc:	bl	10d08 <imprime@@Base>
   10bc0:	b	10b7c <main@@Base+0xb8>
   10bc4:	andeq	r2, r2, r8, rrx
   10bc8:	andeq	r1, r1, ip, lsr #10
   10bcc:	andeq	r1, r1, r0, asr #10
   10bd0:	andeq	r1, r1, r0, ror #10
   10bd4:	andeq	r1, r1, r4, ror #10
   10bd8:	andeq	r1, r1, ip, ror r5
   10bdc:	andeq	r1, r1, r0, lsr #11

00010be0 <_start@@Base>:
   10be0:	mov	fp, #0
   10be4:	mov	lr, #0
   10be8:	pop	{r1}		; (ldr r1, [sp], #4)
   10bec:	mov	r2, sp
   10bf0:	push	{r2}		; (str r2, [sp, #-4]!)
   10bf4:	push	{r0}		; (str r0, [sp, #-4]!)
   10bf8:	ldr	ip, [pc, #16]	; 10c10 <_start@@Base+0x30>
   10bfc:	push	{ip}		; (str ip, [sp, #-4]!)
   10c00:	ldr	r0, [pc, #12]	; 10c14 <_start@@Base+0x34>
   10c04:	ldr	r3, [pc, #12]	; 10c18 <_start@@Base+0x38>
   10c08:	bl	10a70 <__libc_start_main@plt>
   10c0c:	bl	10ab8 <abort@plt>
   10c10:	strdeq	r1, [r1], -ip
   10c14:	andeq	r0, r1, r4, asr #21
   10c18:	muleq	r1, ip, r4
   10c1c:	ldr	r3, [pc, #20]	; 10c38 <_start@@Base+0x58>
   10c20:	ldr	r2, [pc, #20]	; 10c3c <_start@@Base+0x5c>
   10c24:	add	r3, pc, r3
   10c28:	ldr	r2, [r3, r2]
   10c2c:	cmp	r2, #0
   10c30:	bxeq	lr
   10c34:	b	10a7c <__gmon_start__@plt>
   10c38:	ldrdeq	r1, [r1], -r4
   10c3c:	andeq	r0, r0, r8, asr r0
   10c40:	ldr	r3, [pc, #28]	; 10c64 <_start@@Base+0x84>
   10c44:	ldr	r0, [pc, #28]	; 10c68 <_start@@Base+0x88>
   10c48:	sub	r3, r3, r0
   10c4c:	cmp	r3, #6
   10c50:	bxls	lr
   10c54:	ldr	r3, [pc, #16]	; 10c6c <_start@@Base+0x8c>
   10c58:	cmp	r3, #0
   10c5c:	bxeq	lr
   10c60:	bx	r3
   10c64:	andeq	r2, r2, r7, rrx
   10c68:	andeq	r2, r2, r4, rrx
   10c6c:	andeq	r0, r0, r0
   10c70:	ldr	r1, [pc, #36]	; 10c9c <_start@@Base+0xbc>
   10c74:	ldr	r0, [pc, #36]	; 10ca0 <_start@@Base+0xc0>
   10c78:	sub	r1, r1, r0
   10c7c:	asr	r1, r1, #2
   10c80:	add	r1, r1, r1, lsr #31
   10c84:	asrs	r1, r1, #1
   10c88:	bxeq	lr
   10c8c:	ldr	r3, [pc, #16]	; 10ca4 <_start@@Base+0xc4>
   10c90:	cmp	r3, #0
   10c94:	bxeq	lr
   10c98:	bx	r3
   10c9c:	andeq	r2, r2, r4, rrx
   10ca0:	andeq	r2, r2, r4, rrx
   10ca4:	andeq	r0, r0, r0
   10ca8:	push	{r4, lr}
   10cac:	ldr	r4, [pc, #24]	; 10ccc <_start@@Base+0xec>
   10cb0:	ldrb	r3, [r4]
   10cb4:	cmp	r3, #0
   10cb8:	popne	{r4, pc}
   10cbc:	bl	10c40 <_start@@Base+0x60>
   10cc0:	mov	r3, #1
   10cc4:	strb	r3, [r4]
   10cc8:	pop	{r4, pc}
   10ccc:	andeq	r2, r2, ip, rrx
   10cd0:	ldr	r0, [pc, #40]	; 10d00 <_start@@Base+0x120>
   10cd4:	ldr	r3, [r0]
   10cd8:	cmp	r3, #0
   10cdc:	bne	10ce4 <_start@@Base+0x104>
   10ce0:	b	10c70 <_start@@Base+0x90>
   10ce4:	ldr	r3, [pc, #24]	; 10d04 <_start@@Base+0x124>
   10ce8:	cmp	r3, #0
   10cec:	beq	10ce0 <_start@@Base+0x100>
   10cf0:	push	{r4, lr}
   10cf4:	blx	r3
   10cf8:	pop	{r4, lr}
   10cfc:	b	10c70 <_start@@Base+0x90>
   10d00:	andeq	r1, r2, r4, lsl pc
   10d04:	andeq	r0, r0, r0

00010d08 <imprime@@Base>:
   10d08:	push	{r4, r5, r6, lr}
   10d0c:	mov	r1, #0
   10d10:	ldr	r6, [pc, #44]	; 10d44 <imprime@@Base+0x3c>
   10d14:	mov	r5, r0
   10d18:	mov	r0, r5
   10d1c:	add	r4, r1, #1
   10d20:	bl	10e5c <vetor_elemento@@Base>
   10d24:	mov	r1, r4
   10d28:	mov	r2, r0
   10d2c:	mov	r0, r6
   10d30:	bl	10a04 <printf@plt>
   10d34:	cmp	r4, #5
   10d38:	mov	r1, r4
   10d3c:	bne	10d18 <imprime@@Base+0x10>
   10d40:	pop	{r4, r5, r6, pc}
   10d44:	andeq	r1, r1, ip, lsl #10

00010d48 <vetor_novo@@Base>:
   10d48:	push	{r4, lr}
   10d4c:	mov	r0, #12
   10d50:	bl	10a64 <malloc@plt>
   10d54:	cmp	r0, #0
   10d58:	movne	r3, #0
   10d5c:	strne	r3, [r0]
   10d60:	strne	r3, [r0, #4]
   10d64:	strne	r3, [r0, #8]
   10d68:	pop	{r4, pc}

00010d6c <vetor_apaga@@Base>:
   10d6c:	push	{r4, r5, r6, lr}
   10d70:	subs	r5, r0, #0
   10d74:	popeq	{r4, r5, r6, pc}
   10d78:	ldr	r3, [r5]
   10d7c:	cmp	r3, #0
   10d80:	movgt	r4, #0
   10d84:	ble	10da4 <vetor_apaga@@Base+0x38>
   10d88:	ldr	r3, [r5, #8]
   10d8c:	ldr	r0, [r3, r4, lsl #2]
   10d90:	bl	10a10 <free@plt>
   10d94:	ldr	r3, [r5]
   10d98:	add	r4, r4, #1
   10d9c:	cmp	r3, r4
   10da0:	bgt	10d88 <vetor_apaga@@Base+0x1c>
   10da4:	ldr	r0, [r5, #8]
   10da8:	bl	10a10 <free@plt>
   10dac:	mov	r0, r5
   10db0:	pop	{r4, r5, r6, lr}
   10db4:	b	10a10 <free@plt>

00010db8 <vetor_atribui@@Base>:
   10db8:	clz	r3, r0
   10dbc:	lsr	r3, r3, #5
   10dc0:	orrs	r3, r3, r1, lsr #31
   10dc4:	bne	10e44 <vetor_atribui@@Base+0x8c>
   10dc8:	ldr	r3, [r0]
   10dcc:	cmp	r1, r3
   10dd0:	bge	10e44 <vetor_atribui@@Base+0x8c>
   10dd4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10dd8:	mov	r5, r0
   10ddc:	mov	r0, r2
   10de0:	mov	r4, r1
   10de4:	mov	r6, r2
   10de8:	bl	10a88 <strlen@plt>
   10dec:	ldr	r8, [r5, #8]
   10df0:	ldr	r7, [r8, r4, lsl #2]
   10df4:	mov	r9, r0
   10df8:	mov	r0, r7
   10dfc:	bl	10a88 <strlen@plt>
   10e00:	cmp	r9, r0
   10e04:	bls	10e28 <vetor_atribui@@Base+0x70>
   10e08:	mov	r0, r7
   10e0c:	add	r1, r9, #1
   10e10:	bl	10a34 <realloc@plt>
   10e14:	ldr	r3, [r5, #8]
   10e18:	str	r0, [r8, r4, lsl #2]
   10e1c:	ldr	r7, [r3, r4, lsl #2]
   10e20:	cmp	r7, #0
   10e24:	beq	10e3c <vetor_atribui@@Base+0x84>
   10e28:	mov	r1, r6
   10e2c:	mov	r0, r7
   10e30:	bl	10a4c <strcpy@plt>
   10e34:	mov	r0, r4
   10e38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10e3c:	mvn	r0, #0
   10e40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10e44:	mvn	r0, #0
   10e48:	bx	lr

00010e4c <vetor_tamanho@@Base>:
   10e4c:	cmp	r0, #0
   10e50:	ldrne	r0, [r0]
   10e54:	mvneq	r0, #0
   10e58:	bx	lr

00010e5c <vetor_elemento@@Base>:
   10e5c:	lsr	r3, r1, #31
   10e60:	cmp	r0, #0
   10e64:	orreq	r3, r3, #1
   10e68:	cmp	r3, #0
   10e6c:	bne	10e88 <vetor_elemento@@Base+0x2c>
   10e70:	ldr	r2, [r0]
   10e74:	cmp	r1, r2
   10e78:	bge	10e88 <vetor_elemento@@Base+0x2c>
   10e7c:	ldr	r3, [r0, #8]
   10e80:	ldr	r0, [r3, r1, lsl #2]
   10e84:	bx	lr
   10e88:	mov	r0, #0
   10e8c:	bx	lr

00010e90 <vetor_insere@@Base>:
   10e90:	clz	r3, r0
   10e94:	lsr	r3, r3, #5
   10e98:	orrs	r3, r3, r2, lsr #31
   10e9c:	bne	10f64 <vetor_insere@@Base+0xd4>
   10ea0:	push	{r4, r5, r6, r7, r8, lr}
   10ea4:	ldr	r7, [r0]
   10ea8:	cmp	r2, r7
   10eac:	bgt	10f5c <vetor_insere@@Base+0xcc>
   10eb0:	ldr	r3, [r0, #4]
   10eb4:	mov	r6, r0
   10eb8:	cmp	r7, r3
   10ebc:	mov	r8, r1
   10ec0:	mov	r4, r2
   10ec4:	beq	10f24 <vetor_insere@@Base+0x94>
   10ec8:	ldr	r5, [r0, #8]
   10ecc:	cmp	r4, r7
   10ed0:	addlt	r3, r5, r7, lsl #2
   10ed4:	addlt	r2, r5, r4, lsl #2
   10ed8:	bge	10eec <vetor_insere@@Base+0x5c>
   10edc:	ldr	ip, [r3, #-4]
   10ee0:	str	ip, [r3], #-4
   10ee4:	cmp	r2, r3
   10ee8:	bne	10edc <vetor_insere@@Base+0x4c>
   10eec:	mov	r0, r8
   10ef0:	bl	10a88 <strlen@plt>
   10ef4:	mov	r1, #1
   10ef8:	add	r0, r0, r1
   10efc:	bl	109e0 <calloc@plt>
   10f00:	cmp	r0, #0
   10f04:	str	r0, [r5, r4, lsl #2]
   10f08:	beq	10f5c <vetor_insere@@Base+0xcc>
   10f0c:	mov	r1, r8
   10f10:	bl	10a4c <strcpy@plt>
   10f14:	add	r3, r7, #1
   10f18:	mov	r0, r4
   10f1c:	str	r3, [r6]
   10f20:	pop	{r4, r5, r6, r7, r8, pc}
   10f24:	cmp	r7, #0
   10f28:	moveq	r3, #1
   10f2c:	lslne	r3, r7, #1
   10f30:	streq	r3, [r0, #4]
   10f34:	strne	r3, [r0, #4]
   10f38:	moveq	r1, #4
   10f3c:	lslne	r1, r7, #3
   10f40:	ldr	r0, [r0, #8]
   10f44:	bl	10a34 <realloc@plt>
   10f48:	cmp	r0, #0
   10f4c:	str	r0, [r6, #8]
   10f50:	ldrne	r7, [r6]
   10f54:	movne	r5, r0
   10f58:	bne	10ecc <vetor_insere@@Base+0x3c>
   10f5c:	mvn	r0, #0
   10f60:	pop	{r4, r5, r6, r7, r8, pc}
   10f64:	mvn	r0, #0
   10f68:	bx	lr

00010f6c <vetor_remove@@Base>:
   10f6c:	clz	r3, r0
   10f70:	lsr	r3, r3, #5
   10f74:	orrs	r3, r3, r1, lsr #31
   10f78:	bne	10fe4 <vetor_remove@@Base+0x78>
   10f7c:	ldr	r3, [r0]
   10f80:	cmp	r1, r3
   10f84:	bge	10fe4 <vetor_remove@@Base+0x78>
   10f88:	ldr	r3, [r0, #8]
   10f8c:	push	{r4, r5, r6, lr}
   10f90:	mov	r6, r0
   10f94:	ldr	r0, [r3, r1, lsl #2]
   10f98:	mov	r5, r1
   10f9c:	lsl	r4, r1, #2
   10fa0:	bl	10a10 <free@plt>
   10fa4:	ldr	r0, [r6]
   10fa8:	add	r1, r5, #1
   10fac:	cmp	r1, r0
   10fb0:	bge	10fd4 <vetor_remove@@Base+0x68>
   10fb4:	ldr	r2, [r6, #8]
   10fb8:	sub	r1, r0, #-1073741823	; 0xc0000001
   10fbc:	add	r3, r2, r4
   10fc0:	add	r1, r2, r1, lsl #2
   10fc4:	ldr	r2, [r3, #4]
   10fc8:	str	r2, [r3], #4
   10fcc:	cmp	r3, r1
   10fd0:	bne	10fc4 <vetor_remove@@Base+0x58>
   10fd4:	sub	r0, r0, #1
   10fd8:	str	r0, [r6]
   10fdc:	mov	r0, #0
   10fe0:	pop	{r4, r5, r6, pc}
   10fe4:	mvn	r0, #0
   10fe8:	bx	lr

00010fec <vetor_pesquisa@@Base>:
   10fec:	cmp	r0, #0
   10ff0:	push	{r4, r5, r6, r7, r8, lr}
   10ff4:	beq	11040 <vetor_pesquisa@@Base+0x54>
   10ff8:	ldr	r7, [r0]
   10ffc:	cmp	r7, #0
   11000:	ble	11040 <vetor_pesquisa@@Base+0x54>
   11004:	ldr	r5, [r0, #8]
   11008:	mov	r6, r1
   1100c:	mov	r4, #0
   11010:	sub	r5, r5, #4
   11014:	b	11024 <vetor_pesquisa@@Base+0x38>
   11018:	add	r4, r4, #1
   1101c:	cmp	r4, r7
   11020:	beq	11040 <vetor_pesquisa@@Base+0x54>
   11024:	mov	r1, r6
   11028:	ldr	r0, [r5, #4]!
   1102c:	bl	109f8 <strcmp@plt>
   11030:	cmp	r0, #0
   11034:	bne	11018 <vetor_pesquisa@@Base+0x2c>
   11038:	mov	r0, r4
   1103c:	pop	{r4, r5, r6, r7, r8, pc}
   11040:	mvn	r4, #0
   11044:	mov	r0, r4
   11048:	pop	{r4, r5, r6, r7, r8, pc}

0001104c <vetor_ordena@@Base>:
   1104c:	cmp	r0, #0
   11050:	beq	110c8 <vetor_ordena@@Base+0x7c>
   11054:	ldr	r3, [r0]
   11058:	cmp	r3, #1
   1105c:	ble	110c0 <vetor_ordena@@Base+0x74>
   11060:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11064:	sub	r3, r3, #-1073741823	; 0xc0000001
   11068:	ldr	sl, [r0, #8]
   1106c:	mov	r8, #1
   11070:	mov	r7, sl
   11074:	add	r9, sl, r3, lsl #2
   11078:	ldr	r6, [r7, #4]!
   1107c:	mov	r5, r8
   11080:	mov	r4, r7
   11084:	ldr	r1, [r4, #-4]
   11088:	mov	r0, r6
   1108c:	bl	109f8 <strcmp@plt>
   11090:	cmp	r0, #0
   11094:	bge	110a8 <vetor_ordena@@Base+0x5c>
   11098:	ldr	r3, [r4, #-4]!
   1109c:	subs	r5, r5, #1
   110a0:	str	r3, [r4, #4]
   110a4:	bne	11084 <vetor_ordena@@Base+0x38>
   110a8:	cmp	r9, r7
   110ac:	str	r6, [sl, r5, lsl #2]
   110b0:	add	r8, r8, #1
   110b4:	bne	11078 <vetor_ordena@@Base+0x2c>
   110b8:	mov	r0, #0
   110bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   110c0:	mov	r0, #0
   110c4:	bx	lr
   110c8:	mvn	r0, #0
   110cc:	bx	lr

000110d0 <vetor_concatena@@Base>:
   110d0:	cmp	r1, #0
   110d4:	cmpne	r0, #0
   110d8:	push	{r4, r5, r6, r7, r8, lr}
   110dc:	moveq	r7, #1
   110e0:	movne	r7, #0
   110e4:	beq	1115c <vetor_concatena@@Base+0x8c>
   110e8:	mov	r5, r0
   110ec:	mov	r0, #12
   110f0:	mov	r6, r1
   110f4:	bl	10a64 <malloc@plt>
   110f8:	subs	r4, r0, #0
   110fc:	beq	11148 <vetor_concatena@@Base+0x78>
   11100:	ldm	r5, {r2, r3, ip}
   11104:	ldr	r1, [r6]
   11108:	ldr	lr, [r6, #4]
   1110c:	str	r7, [r4]
   11110:	add	r0, r2, r1, lsl #2
   11114:	add	r3, r3, lr
   11118:	str	r0, [r4, #8]
   1111c:	ldr	r0, [r2, r1, lsl #2]
   11120:	ldr	r1, [ip]
   11124:	str	r3, [r4, #4]
   11128:	bl	10a4c <strcpy@plt>
   1112c:	ldr	r2, [r6, #8]
   11130:	ldr	r3, [r4, #8]
   11134:	ldr	r1, [r2]
   11138:	ldr	r0, [r3]
   1113c:	bl	10a40 <strcat@plt>
   11140:	mov	r0, r4
   11144:	pop	{r4, r5, r6, r7, r8, pc}
   11148:	ldr	r2, [r6]
   1114c:	ldr	r3, [r5]
   11150:	add	r3, r3, r2, lsl #2
   11154:	str	r3, [r4, #8]
   11158:	udf	#0
   1115c:	mov	r4, #0
   11160:	mov	r0, r4
   11164:	pop	{r4, r5, r6, r7, r8, pc}

00011168 <vetor_inverte@@Base>:
   11168:	cmp	r0, #0
   1116c:	beq	111c8 <vetor_inverte@@Base+0x60>
   11170:	ldr	ip, [r0]
   11174:	cmp	ip, #0
   11178:	ble	111c8 <vetor_inverte@@Base+0x60>
   1117c:	ldr	r2, [r0, #8]
   11180:	mov	r3, ip
   11184:	sub	r0, r2, #4
   11188:	mov	r1, #0
   1118c:	add	r2, r2, ip, lsl #2
   11190:	push	{r4, r5, lr}
   11194:	sub	r3, r3, #1
   11198:	cmp	ip, r3
   1119c:	ldr	lr, [r0, #4]
   111a0:	ldr	r4, [r2]
   111a4:	add	r1, r1, #1
   111a8:	movlt	r5, ip
   111ac:	movge	r5, r3
   111b0:	cmp	r1, r5
   111b4:	str	r4, [r0, #4]!
   111b8:	str	lr, [r2], #-4
   111bc:	blt	11194 <vetor_inverte@@Base+0x2c>
   111c0:	mov	r0, #0
   111c4:	pop	{r4, r5, pc}
   111c8:	mov	r0, #0
   111cc:	bx	lr

000111d0 <vetor_baralha@@Base>:
   111d0:	push	{r4, r5, r6, r7, r8, lr}
   111d4:	sub	sp, sp, #8
   111d8:	ldr	r7, [r0]
   111dc:	mov	r0, #12
   111e0:	bl	10a64 <malloc@plt>
   111e4:	subs	r6, r0, #0
   111e8:	movne	r3, #0
   111ec:	strne	r3, [r6]
   111f0:	strne	r3, [r6, #4]
   111f4:	strne	r3, [r6, #8]
   111f8:	add	r0, sp, #4
   111fc:	bl	10a28 <time@plt>
   11200:	bl	10a94 <srand@plt>
   11204:	cmp	r7, #0
   11208:	ble	11240 <vetor_baralha@@Base+0x70>
   1120c:	add	r8, r7, #1
   11210:	mov	r4, #0
   11214:	bl	10aa0 <rand@plt>
   11218:	mov	r1, r8
   1121c:	bl	1146c <vetor_baralha@@Base+0x29c>
   11220:	ldr	r5, [r6, #8]
   11224:	ldr	r3, [r5, r4, lsl #2]
   11228:	ldr	r2, [r5, r1, lsl #2]
   1122c:	str	r2, [r5, r4, lsl #2]
   11230:	add	r4, r4, #1
   11234:	cmp	r7, r4
   11238:	str	r3, [r5, r1, lsl #2]
   1123c:	bne	11214 <vetor_baralha@@Base+0x44>
   11240:	mov	r0, r6
   11244:	add	sp, sp, #8
   11248:	pop	{r4, r5, r6, r7, r8, pc}
   1124c:	cmp	r1, #0
   11250:	beq	1145c <vetor_baralha@@Base+0x28c>
   11254:	eor	ip, r0, r1
   11258:	rsbmi	r1, r1, #0
   1125c:	subs	r2, r1, #1
   11260:	beq	11428 <vetor_baralha@@Base+0x258>
   11264:	movs	r3, r0
   11268:	rsbmi	r3, r0, #0
   1126c:	cmp	r3, r1
   11270:	bls	11434 <vetor_baralha@@Base+0x264>
   11274:	tst	r1, r2
   11278:	beq	11444 <vetor_baralha@@Base+0x274>
   1127c:	clz	r2, r3
   11280:	clz	r0, r1
   11284:	sub	r2, r0, r2
   11288:	rsbs	r2, r2, #31
   1128c:	addne	r2, r2, r2, lsl #1
   11290:	mov	r0, #0
   11294:	addne	pc, pc, r2, lsl #2
   11298:	nop			; (mov r0, r0)
   1129c:	cmp	r3, r1, lsl #31
   112a0:	adc	r0, r0, r0
   112a4:	subcs	r3, r3, r1, lsl #31
   112a8:	cmp	r3, r1, lsl #30
   112ac:	adc	r0, r0, r0
   112b0:	subcs	r3, r3, r1, lsl #30
   112b4:	cmp	r3, r1, lsl #29
   112b8:	adc	r0, r0, r0
   112bc:	subcs	r3, r3, r1, lsl #29
   112c0:	cmp	r3, r1, lsl #28
   112c4:	adc	r0, r0, r0
   112c8:	subcs	r3, r3, r1, lsl #28
   112cc:	cmp	r3, r1, lsl #27
   112d0:	adc	r0, r0, r0
   112d4:	subcs	r3, r3, r1, lsl #27
   112d8:	cmp	r3, r1, lsl #26
   112dc:	adc	r0, r0, r0
   112e0:	subcs	r3, r3, r1, lsl #26
   112e4:	cmp	r3, r1, lsl #25
   112e8:	adc	r0, r0, r0
   112ec:	subcs	r3, r3, r1, lsl #25
   112f0:	cmp	r3, r1, lsl #24
   112f4:	adc	r0, r0, r0
   112f8:	subcs	r3, r3, r1, lsl #24
   112fc:	cmp	r3, r1, lsl #23
   11300:	adc	r0, r0, r0
   11304:	subcs	r3, r3, r1, lsl #23
   11308:	cmp	r3, r1, lsl #22
   1130c:	adc	r0, r0, r0
   11310:	subcs	r3, r3, r1, lsl #22
   11314:	cmp	r3, r1, lsl #21
   11318:	adc	r0, r0, r0
   1131c:	subcs	r3, r3, r1, lsl #21
   11320:	cmp	r3, r1, lsl #20
   11324:	adc	r0, r0, r0
   11328:	subcs	r3, r3, r1, lsl #20
   1132c:	cmp	r3, r1, lsl #19
   11330:	adc	r0, r0, r0
   11334:	subcs	r3, r3, r1, lsl #19
   11338:	cmp	r3, r1, lsl #18
   1133c:	adc	r0, r0, r0
   11340:	subcs	r3, r3, r1, lsl #18
   11344:	cmp	r3, r1, lsl #17
   11348:	adc	r0, r0, r0
   1134c:	subcs	r3, r3, r1, lsl #17
   11350:	cmp	r3, r1, lsl #16
   11354:	adc	r0, r0, r0
   11358:	subcs	r3, r3, r1, lsl #16
   1135c:	cmp	r3, r1, lsl #15
   11360:	adc	r0, r0, r0
   11364:	subcs	r3, r3, r1, lsl #15
   11368:	cmp	r3, r1, lsl #14
   1136c:	adc	r0, r0, r0
   11370:	subcs	r3, r3, r1, lsl #14
   11374:	cmp	r3, r1, lsl #13
   11378:	adc	r0, r0, r0
   1137c:	subcs	r3, r3, r1, lsl #13
   11380:	cmp	r3, r1, lsl #12
   11384:	adc	r0, r0, r0
   11388:	subcs	r3, r3, r1, lsl #12
   1138c:	cmp	r3, r1, lsl #11
   11390:	adc	r0, r0, r0
   11394:	subcs	r3, r3, r1, lsl #11
   11398:	cmp	r3, r1, lsl #10
   1139c:	adc	r0, r0, r0
   113a0:	subcs	r3, r3, r1, lsl #10
   113a4:	cmp	r3, r1, lsl #9
   113a8:	adc	r0, r0, r0
   113ac:	subcs	r3, r3, r1, lsl #9
   113b0:	cmp	r3, r1, lsl #8
   113b4:	adc	r0, r0, r0
   113b8:	subcs	r3, r3, r1, lsl #8
   113bc:	cmp	r3, r1, lsl #7
   113c0:	adc	r0, r0, r0
   113c4:	subcs	r3, r3, r1, lsl #7
   113c8:	cmp	r3, r1, lsl #6
   113cc:	adc	r0, r0, r0
   113d0:	subcs	r3, r3, r1, lsl #6
   113d4:	cmp	r3, r1, lsl #5
   113d8:	adc	r0, r0, r0
   113dc:	subcs	r3, r3, r1, lsl #5
   113e0:	cmp	r3, r1, lsl #4
   113e4:	adc	r0, r0, r0
   113e8:	subcs	r3, r3, r1, lsl #4
   113ec:	cmp	r3, r1, lsl #3
   113f0:	adc	r0, r0, r0
   113f4:	subcs	r3, r3, r1, lsl #3
   113f8:	cmp	r3, r1, lsl #2
   113fc:	adc	r0, r0, r0
   11400:	subcs	r3, r3, r1, lsl #2
   11404:	cmp	r3, r1, lsl #1
   11408:	adc	r0, r0, r0
   1140c:	subcs	r3, r3, r1, lsl #1
   11410:	cmp	r3, r1
   11414:	adc	r0, r0, r0
   11418:	subcs	r3, r3, r1
   1141c:	cmp	ip, #0
   11420:	rsbmi	r0, r0, #0
   11424:	bx	lr
   11428:	teq	ip, r0
   1142c:	rsbmi	r0, r0, #0
   11430:	bx	lr
   11434:	movcc	r0, #0
   11438:	asreq	r0, ip, #31
   1143c:	orreq	r0, r0, #1
   11440:	bx	lr
   11444:	clz	r2, r1
   11448:	rsb	r2, r2, #31
   1144c:	cmp	ip, #0
   11450:	lsr	r0, r3, r2
   11454:	rsbmi	r0, r0, #0
   11458:	bx	lr
   1145c:	cmp	r0, #0
   11460:	mvngt	r0, #-2147483648	; 0x80000000
   11464:	movlt	r0, #-2147483648	; 0x80000000
   11468:	b	1148c <vetor_baralha@@Base+0x2bc>
   1146c:	cmp	r1, #0
   11470:	beq	1145c <vetor_baralha@@Base+0x28c>
   11474:	push	{r0, r1, lr}
   11478:	bl	11254 <vetor_baralha@@Base+0x84>
   1147c:	pop	{r1, r2, lr}
   11480:	mul	r3, r2, r0
   11484:	sub	r1, r1, r3
   11488:	bx	lr
   1148c:	push	{r1, lr}
   11490:	mov	r0, #8
   11494:	bl	109ec <raise@plt>
   11498:	pop	{r1, pc}

0001149c <__libc_csu_init@@Base>:
   1149c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   114a0:	mov	r7, r0
   114a4:	ldr	r6, [pc, #72]	; 114f4 <__libc_csu_init@@Base+0x58>
   114a8:	ldr	r5, [pc, #72]	; 114f8 <__libc_csu_init@@Base+0x5c>
   114ac:	add	r6, pc, r6
   114b0:	add	r5, pc, r5
   114b4:	sub	r6, r6, r5
   114b8:	mov	r8, r1
   114bc:	mov	r9, r2
   114c0:	bl	109c0 <calloc@plt-0x20>
   114c4:	asrs	r6, r6, #2
   114c8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   114cc:	mov	r4, #0
   114d0:	add	r4, r4, #1
   114d4:	ldr	r3, [r5], #4
   114d8:	mov	r2, r9
   114dc:	mov	r1, r8
   114e0:	mov	r0, r7
   114e4:	blx	r3
   114e8:	cmp	r6, r4
   114ec:	bne	114d0 <__libc_csu_init@@Base+0x34>
   114f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   114f4:	andeq	r0, r1, ip, asr sl
   114f8:	andeq	r0, r1, r4, asr sl

000114fc <__libc_csu_fini@@Base>:
   114fc:	bx	lr

Disassembly of section .fini:

00011500 <.fini>:
   11500:	push	{r3, lr}
   11504:	pop	{r3, pc}
