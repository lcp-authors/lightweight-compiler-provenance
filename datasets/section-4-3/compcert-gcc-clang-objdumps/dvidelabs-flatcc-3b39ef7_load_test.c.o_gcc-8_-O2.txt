
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/load_test/CMakeFiles/load_test.dir/load_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <elapsed_realtime>:
   0:	push	{lr}		; (str lr, [sp, #-4]!)
   4:	sub	sp, sp, #12
   8:	mov	r1, #0
   c:	mov	r0, sp
  10:	bl	0 <gettimeofday>
  14:	movw	r3, #0
  18:	movt	r3, #0
  1c:	vldr	d5, [pc, #68]	; 68 <elapsed_realtime+0x68>
  20:	ldr	r2, [r3]
  24:	cmp	r2, #0
  28:	ldr	r2, [sp]
  2c:	ldrdeq	r0, [sp]
  30:	strdeq	r0, [r3]
  34:	ldr	r1, [sp, #4]
  38:	ldr	r0, [r3, #4]
  3c:	ldr	r3, [r3]
  40:	sub	r1, r1, r0
  44:	vmov	s15, r1
  48:	sub	r3, r2, r3
  4c:	vmov	s0, r3
  50:	vcvt.f64.s32	d7, s15
  54:	vcvt.f64.s32	d0, s0
  58:	vdiv.f64	d6, d7, d5
  5c:	vadd.f64	d0, d6, d0
  60:	add	sp, sp, #12
  64:	pop	{pc}		; (ldr pc, [sp], #4)
  68:	.word	0x00000000
  6c:	.word	0x412e8480

00000070 <create_root_monster>:
  70:	strd	r4, [sp, #-24]!	; 0xffffffe8
  74:	mov	r4, r0
  78:	strd	r6, [sp, #8]
  7c:	str	r8, [sp, #16]
  80:	str	lr, [sp, #20]
  84:	bl	0 <flatcc_builder_reset>
  88:	mov	r3, #0
  8c:	mov	r0, r4
  90:	mov	r2, r3
  94:	movw	r1, #0
  98:	movt	r1, #0
  9c:	bl	0 <flatcc_builder_start_buffer>
  a0:	cmp	r0, #0
  a4:	bne	b4 <create_root_monster+0x44>
  a8:	mov	r1, #36	; 0x24
  ac:	mov	r0, r4
  b0:	bl	0 <flatcc_builder_start_table>
  b4:	movw	r1, #0
  b8:	movt	r1, #0
  bc:	mov	r0, r4
  c0:	bl	0 <flatcc_builder_create_string_str>
  c4:	subs	r5, r0, #0
  c8:	beq	e0 <create_root_monster+0x70>
  cc:	mov	r1, #3
  d0:	mov	r0, r4
  d4:	bl	0 <flatcc_builder_table_add_offset>
  d8:	cmp	r0, #0
  dc:	strne	r5, [r0]
  e0:	mov	r0, r4
  e4:	movw	r6, #0
  e8:	movt	r6, #0
  ec:	ldr	r8, [pc, #424]	; 29c <create_root_monster+0x22c>
  f0:	mov	r5, #1000	; 0x3e8
  f4:	bl	0 <flatcc_builder_start_offset_vector>
  f8:	mov	r1, #36	; 0x24
  fc:	mov	r0, r4
 100:	bl	0 <flatcc_builder_start_table>
 104:	mov	r0, r4
 108:	mov	r7, #100	; 0x64
 10c:	bl	0 <flatcc_builder_start_string>
 110:	mov	r2, #7
 114:	mov	r1, r6
 118:	mov	r0, r4
 11c:	bl	0 <flatcc_builder_append_string>
 120:	subs	r7, r7, #1
 124:	bne	110 <create_root_monster+0xa0>
 128:	mov	r0, r4
 12c:	bl	0 <flatcc_builder_end_string>
 130:	subs	r7, r0, #0
 134:	beq	14c <create_root_monster+0xdc>
 138:	mov	r1, #3
 13c:	mov	r0, r4
 140:	bl	0 <flatcc_builder_table_add_offset>
 144:	cmp	r0, #0
 148:	strne	r7, [r0]
 14c:	mov	r2, #1
 150:	mvn	r3, #0
 154:	mov	r1, r2
 158:	mov	r0, r4
 15c:	mov	r7, #100	; 0x64
 160:	bl	0 <flatcc_builder_start_vector>
 164:	mov	r2, #1000	; 0x3e8
 168:	mov	r1, r8
 16c:	mov	r0, r4
 170:	bl	0 <flatcc_builder_append_vector>
 174:	subs	r7, r7, #1
 178:	bne	164 <create_root_monster+0xf4>
 17c:	mov	r0, r4
 180:	bl	0 <flatcc_builder_end_vector>
 184:	subs	r7, r0, #0
 188:	beq	1a0 <create_root_monster+0x130>
 18c:	mov	r1, #5
 190:	mov	r0, r4
 194:	bl	0 <flatcc_builder_table_add_offset>
 198:	cmp	r0, #0
 19c:	strne	r7, [r0]
 1a0:	movw	r1, #0
 1a4:	movt	r1, #0
 1a8:	mov	r2, #1
 1ac:	mov	r0, r4
 1b0:	bl	0 <flatcc_builder_check_required>
 1b4:	cmp	r0, #0
 1b8:	beq	248 <create_root_monster+0x1d8>
 1bc:	mov	r0, r4
 1c0:	bl	0 <flatcc_builder_end_table>
 1c4:	subs	r1, r0, #0
 1c8:	beq	264 <create_root_monster+0x1f4>
 1cc:	mov	r0, r4
 1d0:	bl	0 <flatcc_builder_offset_vector_push>
 1d4:	subs	r5, r5, #1
 1d8:	bne	f8 <create_root_monster+0x88>
 1dc:	mov	r0, r4
 1e0:	bl	0 <flatcc_builder_end_offset_vector>
 1e4:	subs	r5, r0, #0
 1e8:	beq	280 <create_root_monster+0x210>
 1ec:	mov	r1, #11
 1f0:	mov	r0, r4
 1f4:	bl	0 <flatcc_builder_table_add_offset>
 1f8:	cmp	r0, #0
 1fc:	movw	r1, #0
 200:	movt	r1, #0
 204:	mov	r2, #1
 208:	strne	r5, [r0]
 20c:	mov	r0, r4
 210:	bl	0 <flatcc_builder_check_required>
 214:	cmp	r0, #0
 218:	beq	248 <create_root_monster+0x1d8>
 21c:	mov	r0, r4
 220:	bl	0 <flatcc_builder_end_table>
 224:	mov	r1, r0
 228:	mov	r0, r4
 22c:	bl	0 <flatcc_builder_end_buffer>
 230:	ldrd	r4, [sp]
 234:	mov	r0, #0
 238:	ldrd	r6, [sp, #8]
 23c:	ldr	r8, [sp, #16]
 240:	add	sp, sp, #20
 244:	pop	{pc}		; (ldr pc, [sp], #4)
 248:	movw	r1, #0
 24c:	movt	r1, #0
 250:	ldr	r3, [pc, #72]	; 2a0 <create_root_monster+0x230>
 254:	movw	r0, #0
 258:	movt	r0, #0
 25c:	mov	r2, #235	; 0xeb
 260:	bl	0 <__assert_fail>
 264:	movw	r1, #0
 268:	movt	r1, #0
 26c:	ldr	r3, [pc, #48]	; 2a4 <create_root_monster+0x234>
 270:	movw	r0, #0
 274:	movt	r0, #0
 278:	mov	r2, #42	; 0x2a
 27c:	bl	0 <__assert_fail>
 280:	movw	r1, #0
 284:	movt	r1, #0
 288:	ldr	r3, [pc, #24]	; 2a8 <create_root_monster+0x238>
 28c:	movw	r0, #0
 290:	movt	r0, #0
 294:	mov	r2, #56	; 0x38
 298:	bl	0 <__assert_fail>
 29c:	.word	0x00000008
 2a0:	.word	0x00000004
 2a4:	.word	0x00000020
 2a8:	.word	0x00000030

Disassembly of section .text.startup:

00000000 <main>:
   0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   4:	strd	r6, [sp, #8]
   8:	strd	r8, [sp, #16]
   c:	strd	sl, [sp, #24]
  10:	str	lr, [sp, #32]
  14:	vpush	{d8-d10}
  18:	sub	sp, sp, #268	; 0x10c
  1c:	add	r0, sp, #32
  20:	bl	0 <flatcc_builder_init>
  24:	add	r0, sp, #32
  28:	bl	70 <main+0x70>
  2c:	add	r1, sp, #28
  30:	add	r0, sp, #32
  34:	bl	0 <flatcc_builder_finalize_buffer>
  38:	mov	r8, r0
  3c:	movw	r1, #0
  40:	movt	r1, #0
  44:	movw	r0, #0
  48:	movt	r0, #0
  4c:	bl	0 <fopen>
  50:	subs	r4, r0, #0
  54:	beq	138 <main+0x138>
  58:	mov	r3, r4
  5c:	mov	r1, #1
  60:	ldr	r2, [sp, #28]
  64:	mov	r0, r8
  68:	bl	0 <fwrite>
  6c:	ldr	r5, [sp, #28]
  70:	mov	r6, r0
  74:	mov	r0, r4
  78:	bl	0 <fclose>
  7c:	cmp	r6, r5
  80:	beq	9c <main+0x9c>
  84:	add	r0, sp, #32
  88:	mov	r5, #1
  8c:	bl	0 <flatcc_builder_clear>
  90:	mov	r0, r8
  94:	bl	0 <free>
  98:	b	14c <main+0x14c>
  9c:	movw	r0, #0
  a0:	movt	r0, #0
  a4:	ldr	r1, [sp, #28]
  a8:	bl	0 <printf>
  ac:	movw	r0, #0
  b0:	movt	r0, #0
  b4:	bl	0 <puts>
  b8:	bl	0 <main>
  bc:	movw	r3, #20301	; 0x4f4d
  c0:	movt	r3, #21326	; 0x534e
  c4:	vmov.f64	d8, d0
  c8:	movw	r6, #0
  cc:	movt	r6, #0
  d0:	str	r3, [sp, #12]
  d4:	movw	r3, #0
  d8:	movt	r3, #0
  dc:	str	r3, [sp, #16]
  e0:	movw	r3, #34464	; 0x86a0
  e4:	movt	r3, #1
  e8:	str	r3, [sp, #20]
  ec:	mov	r3, #10
  f0:	str	r3, [sp, #4]
  f4:	add	r0, sp, #32
  f8:	bl	70 <main+0x70>
  fc:	mov	r1, r8
 100:	add	r0, sp, #32
 104:	ldr	r2, [sp, #28]
 108:	bl	0 <flatcc_builder_copy_buffer>
 10c:	ldr	r3, [r8, #4]
 110:	ldr	r2, [sp, #12]
 114:	cmp	r3, r2
 118:	beq	17c <main+0x17c>
 11c:	movw	r1, #0
 120:	movt	r1, #0
 124:	ldr	r3, [pc, #1068]	; 558 <main+0x558>
 128:	movw	r0, #0
 12c:	movt	r0, #0
 130:	movw	r2, #699	; 0x2bb
 134:	bl	0 <__assert_fail>
 138:	add	r0, sp, #32
 13c:	mvn	r5, #0
 140:	bl	0 <flatcc_builder_clear>
 144:	mov	r0, r8
 148:	bl	0 <free>
 14c:	movw	r0, #0
 150:	movt	r0, #0
 154:	bl	0 <puts>
 158:	mov	r0, r5
 15c:	add	sp, sp, #268	; 0x10c
 160:	vpop	{d8-d10}
 164:	ldrd	r4, [sp]
 168:	ldrd	r6, [sp, #8]
 16c:	ldrd	r8, [sp, #16]
 170:	ldrd	sl, [sp, #24]
 174:	add	sp, sp, #32
 178:	pop	{pc}		; (ldr pc, [sp], #4)
 17c:	ldr	r3, [r8]
 180:	adds	r4, r8, r3
 184:	beq	11c <main+0x11c>
 188:	ldr	r5, [r8, r3]
 18c:	sub	r5, r4, r5
 190:	ldrh	r7, [r5]
 194:	cmp	r7, #11
 198:	bls	518 <main+0x518>
 19c:	ldrh	r3, [r5, #10]
 1a0:	cmp	r3, #0
 1a4:	beq	518 <main+0x518>
 1a8:	ldr	r0, [r4, r3]
 1ac:	add	r3, r4, r3
 1b0:	ldr	r1, [sp, #16]
 1b4:	add	r0, r0, #4
 1b8:	add	r0, r3, r0
 1bc:	bl	0 <strcmp>
 1c0:	cmp	r0, #0
 1c4:	bne	4fc <main+0x4fc>
 1c8:	cmp	r7, #27
 1cc:	bls	440 <main+0x440>
 1d0:	ldrh	r9, [r5, #26]
 1d4:	cmp	r9, #0
 1d8:	beq	440 <main+0x440>
 1dc:	ldr	r3, [r4, r9]
 1e0:	add	r9, r4, r9
 1e4:	add	r3, r3, #4
 1e8:	adds	r9, r9, r3
 1ec:	beq	440 <main+0x440>
 1f0:	ldr	r3, [r9, #-4]
 1f4:	cmp	r3, #1000	; 0x3e8
 1f8:	bne	440 <main+0x440>
 1fc:	ldr	r7, [pc, #856]	; 55c <main+0x55c>
 200:	add	r3, r9, #4000	; 0xfa0
 204:	str	r3, [sp, #8]
 208:	mov	r2, r9
 20c:	add	r9, r9, #4
 210:	ldr	r1, [r2]
 214:	adds	r3, r2, r1
 218:	beq	11c <main+0x11c>
 21c:	ldr	r1, [r2, r1]
 220:	sub	r1, r3, r1
 224:	ldrh	r0, [r1]
 228:	cmp	r0, #11
 22c:	bls	518 <main+0x518>
 230:	ldrh	r2, [r1, #10]
 234:	cmp	r2, #0
 238:	beq	518 <main+0x518>
 23c:	ldr	sl, [r3, r2]
 240:	cmp	r0, #15
 244:	add	r2, r3, r2
 248:	movls	r4, #0
 24c:	add	sl, sl, #4
 250:	add	sl, r2, sl
 254:	bls	274 <main+0x274>
 258:	ldrh	r4, [r1, #14]
 25c:	cmp	r4, #0
 260:	beq	274 <main+0x274>
 264:	ldr	r2, [r3, r4]
 268:	add	r4, r3, r4
 26c:	add	r3, r2, #4
 270:	add	r4, r4, r3
 274:	cmp	sl, #0
 278:	beq	408 <main+0x408>
 27c:	ldr	r3, [sl, #-4]
 280:	cmp	r3, #700	; 0x2bc
 284:	bne	408 <main+0x408>
 288:	cmp	r4, #0
 28c:	beq	424 <main+0x424>
 290:	ldr	r3, [r4, #-4]
 294:	ldr	r2, [sp, #20]
 298:	cmp	r3, r2
 29c:	bne	424 <main+0x424>
 2a0:	mov	r5, sl
 2a4:	mov	fp, #0
 2a8:	mov	r2, #7
 2ac:	mov	r1, r6
 2b0:	mov	r0, r5
 2b4:	bl	0 <memcmp>
 2b8:	cmp	r0, #0
 2bc:	bne	4bc <main+0x4bc>
 2c0:	add	fp, fp, #1
 2c4:	add	r5, r5, #7
 2c8:	cmp	fp, #100	; 0x64
 2cc:	bne	2a8 <main+0x2a8>
 2d0:	add	r5, r4, #99328	; 0x18400
 2d4:	add	r5, r5, #672	; 0x2a0
 2d8:	mov	r2, #1000	; 0x3e8
 2dc:	mov	r1, r7
 2e0:	mov	r0, r4
 2e4:	bl	0 <memcmp>
 2e8:	cmp	r0, #0
 2ec:	bne	4a0 <main+0x4a0>
 2f0:	add	r4, r4, #1000	; 0x3e8
 2f4:	cmp	r4, r5
 2f8:	bne	2d8 <main+0x2d8>
 2fc:	ldr	r3, [sp, #8]
 300:	cmp	r9, r3
 304:	bne	208 <main+0x208>
 308:	ldr	r3, [sp, #4]
 30c:	subs	r3, r3, #1
 310:	str	r3, [sp, #4]
 314:	bne	f4 <main+0xf4>
 318:	mov	r5, r0
 31c:	vldr	d9, [pc, #532]	; 538 <main+0x538>
 320:	bl	0 <main>
 324:	vsub.f64	d8, d0, d8
 328:	ldr	r4, [sp, #28]
 32c:	movw	r1, #0
 330:	movt	r1, #0
 334:	movw	r0, #0
 338:	movt	r0, #0
 33c:	vldr	d10, [pc, #508]	; 540 <main+0x540>
 340:	bl	0 <printf>
 344:	movw	r0, #0
 348:	movt	r0, #0
 34c:	vmov	r2, r3, d8
 350:	bl	0 <printf>
 354:	mov	r1, #10
 358:	movw	r0, #0
 35c:	movt	r0, #0
 360:	bl	0 <printf>
 364:	mov	r1, r4
 368:	movw	r0, #0
 36c:	movt	r0, #0
 370:	bl	0 <printf>
 374:	vmov	s15, r4
 378:	movw	r0, #0
 37c:	movt	r0, #0
 380:	vcvt.f64.u32	d7, s15
 384:	vmul.f64	d7, d7, d9
 388:	vdiv.f64	d6, d7, d10
 38c:	vdiv.f64	d7, d6, d8
 390:	vmov	r2, r3, d7
 394:	bl	0 <printf>
 398:	vdiv.f64	d7, d9, d8
 39c:	movw	r0, #0
 3a0:	movt	r0, #0
 3a4:	vmov	r2, r3, d7
 3a8:	bl	0 <printf>
 3ac:	vldr	d6, [pc, #404]	; 548 <main+0x548>
 3b0:	vldr	d5, [pc, #408]	; 550 <main+0x550>
 3b4:	vmul.f64	d8, d8, d6
 3b8:	vdiv.f64	d7, d8, d9
 3bc:	vcmpe.f64	d7, d5
 3c0:	vmrs	APSR_nzcv, fpscr
 3c4:	bmi	48c <main+0x48c>
 3c8:	vcmpe.f64	d7, d10
 3cc:	vmrs	APSR_nzcv, fpscr
 3d0:	bmi	474 <main+0x474>
 3d4:	vcmpe.f64	d7, d6
 3d8:	vmrs	APSR_nzcv, fpscr
 3dc:	bpl	45c <main+0x45c>
 3e0:	vdiv.f64	d7, d7, d10
 3e4:	movw	r0, #0
 3e8:	movt	r0, #0
 3ec:	vmov	r2, r3, d7
 3f0:	bl	0 <printf>
 3f4:	add	r0, sp, #32
 3f8:	bl	0 <flatcc_builder_clear>
 3fc:	mov	r0, r8
 400:	bl	0 <free>
 404:	b	158 <main+0x158>
 408:	movw	r1, #0
 40c:	movt	r1, #0
 410:	ldr	r3, [pc, #328]	; 560 <main+0x560>
 414:	movw	r0, #0
 418:	movt	r0, #0
 41c:	mov	r2, #74	; 0x4a
 420:	bl	0 <__assert_fail>
 424:	movw	r1, #0
 428:	movt	r1, #0
 42c:	ldr	r3, [pc, #300]	; 560 <main+0x560>
 430:	movw	r0, #0
 434:	movt	r0, #0
 438:	mov	r2, #78	; 0x4e
 43c:	bl	0 <__assert_fail>
 440:	movw	r1, #0
 444:	movt	r1, #0
 448:	ldr	r3, [pc, #276]	; 564 <main+0x564>
 44c:	movw	r0, #0
 450:	movt	r0, #0
 454:	mov	r2, #143	; 0x8f
 458:	bl	0 <__assert_fail>
 45c:	vdiv.f64	d7, d7, d6
 460:	movw	r0, #0
 464:	movt	r0, #0
 468:	vmov	r2, r3, d7
 46c:	bl	0 <printf>
 470:	b	3f4 <main+0x3f4>
 474:	vdiv.f64	d7, d7, d5
 478:	movw	r0, #0
 47c:	movt	r0, #0
 480:	vmov	r2, r3, d7
 484:	bl	0 <printf>
 488:	b	3f4 <main+0x3f4>
 48c:	movw	r0, #0
 490:	movt	r0, #0
 494:	vmov	r2, r3, d7
 498:	bl	0 <printf>
 49c:	b	3f4 <main+0x3f4>
 4a0:	movw	r1, #0
 4a4:	movt	r1, #0
 4a8:	ldr	r3, [pc, #176]	; 560 <main+0x560>
 4ac:	movw	r0, #0
 4b0:	movt	r0, #0
 4b4:	mov	r2, #91	; 0x5b
 4b8:	bl	0 <__assert_fail>
 4bc:	mov	r2, sl
 4c0:	mov	r1, fp
 4c4:	movw	r0, #0
 4c8:	movt	r0, #0
 4cc:	bl	0 <printf>
 4d0:	sub	r1, r5, r8
 4d4:	movw	r0, #0
 4d8:	movt	r0, #0
 4dc:	bl	0 <printf>
 4e0:	movw	r1, #0
 4e4:	movt	r1, #0
 4e8:	ldr	r3, [pc, #112]	; 560 <main+0x560>
 4ec:	movw	r0, #0
 4f0:	movt	r0, #0
 4f4:	mov	r2, #85	; 0x55
 4f8:	bl	0 <__assert_fail>
 4fc:	movw	r1, #0
 500:	movt	r1, #0
 504:	ldr	r3, [pc, #88]	; 564 <main+0x564>
 508:	movw	r0, #0
 50c:	movt	r0, #0
 510:	mov	r2, #139	; 0x8b
 514:	bl	0 <__assert_fail>
 518:	movw	r1, #0
 51c:	movt	r1, #0
 520:	ldr	r3, [pc, #48]	; 558 <main+0x558>
 524:	movw	r0, #0
 528:	movt	r0, #0
 52c:	movw	r2, #699	; 0x2bb
 530:	bl	0 <__assert_fail>
 534:	nop	{0}
 538:	.word	0x00000000
 53c:	.word	0x40240000
 540:	.word	0x00000000
 544:	.word	0x412e8480
 548:	.word	0x00000000
 54c:	.word	0x41cdcd65
 550:	.word	0x00000000
 554:	.word	0x408f4000
 558:	.word	0x00000044
 55c:	.word	0x00000008
 560:	.word	0x00000068
 564:	.word	0x00000060
