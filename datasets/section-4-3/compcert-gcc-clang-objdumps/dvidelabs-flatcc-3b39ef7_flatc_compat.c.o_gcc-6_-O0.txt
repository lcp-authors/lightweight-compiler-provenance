
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/flatc_compat/CMakeFiles/flatc_compat.dir/flatc_compat.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__portable_aligned_alloc>:
       0:	push	{fp, lr}
       4:	add	fp, sp, #4
       8:	sub	sp, sp, #16
       c:	str	r0, [fp, #-16]
      10:	str	r1, [fp, #-20]	; 0xffffffec
      14:	mov	r3, #0
      18:	str	r3, [fp, #-12]
      1c:	ldr	r3, [fp, #-16]
      20:	cmp	r3, #3
      24:	bhi	30 <__portable_aligned_alloc+0x30>
      28:	mov	r3, #4
      2c:	str	r3, [fp, #-16]
      30:	sub	r3, fp, #12
      34:	ldr	r2, [fp, #-20]	; 0xffffffec
      38:	ldr	r1, [fp, #-16]
      3c:	mov	r0, r3
      40:	bl	0 <posix_memalign>
      44:	str	r0, [fp, #-8]
      48:	ldr	r3, [fp, #-8]
      4c:	cmp	r3, #0
      50:	beq	74 <__portable_aligned_alloc+0x74>
      54:	ldr	r3, [fp, #-12]
      58:	cmp	r3, #0
      5c:	beq	74 <__portable_aligned_alloc+0x74>
      60:	ldr	r3, [fp, #-12]
      64:	mov	r0, r3
      68:	bl	0 <free>
      6c:	mov	r3, #0
      70:	str	r3, [fp, #-12]
      74:	ldr	r3, [fp, #-12]
      78:	mov	r0, r3
      7c:	sub	sp, fp, #4
      80:	pop	{fp, pc}

00000084 <flatbuffers_uint8_cast_from_pe>:
      84:	push	{fp}		; (str fp, [sp, #-4]!)
      88:	add	fp, sp, #0
      8c:	sub	sp, sp, #12
      90:	mov	r3, r0
      94:	strb	r3, [fp, #-5]
      98:	ldrb	r3, [fp, #-5]
      9c:	mov	r0, r3
      a0:	add	sp, fp, #0
      a4:	pop	{fp}		; (ldr fp, [sp], #4)
      a8:	bx	lr

000000ac <flatbuffers_uint8_read_from_pe>:
      ac:	push	{fp, lr}
      b0:	add	fp, sp, #4
      b4:	sub	sp, sp, #8
      b8:	str	r0, [fp, #-8]
      bc:	ldr	r3, [fp, #-8]
      c0:	ldrb	r3, [r3]
      c4:	mov	r0, r3
      c8:	bl	84 <flatbuffers_uint8_cast_from_pe>
      cc:	mov	r3, r0
      d0:	mov	r0, r3
      d4:	sub	sp, fp, #4
      d8:	pop	{fp, pc}

000000dc <flatbuffers_uint32_cast_from_pe>:
      dc:	push	{fp}		; (str fp, [sp, #-4]!)
      e0:	add	fp, sp, #0
      e4:	sub	sp, sp, #12
      e8:	str	r0, [fp, #-8]
      ec:	ldr	r3, [fp, #-8]
      f0:	mov	r0, r3
      f4:	add	sp, fp, #0
      f8:	pop	{fp}		; (ldr fp, [sp], #4)
      fc:	bx	lr

00000100 <flatbuffers_uint32_read_from_pe>:
     100:	push	{fp, lr}
     104:	add	fp, sp, #4
     108:	sub	sp, sp, #8
     10c:	str	r0, [fp, #-8]
     110:	ldr	r3, [fp, #-8]
     114:	ldr	r3, [r3]
     118:	mov	r0, r3
     11c:	bl	dc <flatbuffers_uint32_cast_from_pe>
     120:	mov	r3, r0
     124:	mov	r0, r3
     128:	sub	sp, fp, #4
     12c:	pop	{fp, pc}

00000130 <flatbuffers_uint64_cast_from_pe>:
     130:	push	{fp}		; (str fp, [sp, #-4]!)
     134:	add	fp, sp, #0
     138:	sub	sp, sp, #12
     13c:	strd	r0, [fp, #-12]
     140:	ldrd	r2, [fp, #-12]
     144:	mov	r0, r2
     148:	mov	r1, r3
     14c:	add	sp, fp, #0
     150:	pop	{fp}		; (ldr fp, [sp], #4)
     154:	bx	lr

00000158 <flatbuffers_uint64_read_from_pe>:
     158:	push	{fp, lr}
     15c:	add	fp, sp, #4
     160:	sub	sp, sp, #8
     164:	str	r0, [fp, #-8]
     168:	ldr	r3, [fp, #-8]
     16c:	ldrd	r2, [r3]
     170:	mov	r0, r2
     174:	mov	r1, r3
     178:	bl	130 <flatbuffers_uint64_cast_from_pe>
     17c:	mov	r2, r0
     180:	mov	r3, r1
     184:	mov	r0, r2
     188:	mov	r1, r3
     18c:	sub	sp, fp, #4
     190:	pop	{fp, pc}

00000194 <flatbuffers_int8_cast_from_pe>:
     194:	push	{fp}		; (str fp, [sp, #-4]!)
     198:	add	fp, sp, #0
     19c:	sub	sp, sp, #12
     1a0:	mov	r3, r0
     1a4:	strb	r3, [fp, #-5]
     1a8:	ldrsb	r3, [fp, #-5]
     1ac:	mov	r0, r3
     1b0:	add	sp, fp, #0
     1b4:	pop	{fp}		; (ldr fp, [sp], #4)
     1b8:	bx	lr

000001bc <flatbuffers_int8_read_from_pe>:
     1bc:	push	{fp, lr}
     1c0:	add	fp, sp, #4
     1c4:	sub	sp, sp, #8
     1c8:	str	r0, [fp, #-8]
     1cc:	ldr	r3, [fp, #-8]
     1d0:	ldrsb	r3, [r3]
     1d4:	mov	r0, r3
     1d8:	bl	194 <flatbuffers_int8_cast_from_pe>
     1dc:	mov	r3, r0
     1e0:	mov	r0, r3
     1e4:	sub	sp, fp, #4
     1e8:	pop	{fp, pc}

000001ec <flatbuffers_int16_cast_from_pe>:
     1ec:	push	{fp}		; (str fp, [sp, #-4]!)
     1f0:	add	fp, sp, #0
     1f4:	sub	sp, sp, #12
     1f8:	mov	r3, r0
     1fc:	strh	r3, [fp, #-6]
     200:	ldrsh	r3, [fp, #-6]
     204:	mov	r0, r3
     208:	add	sp, fp, #0
     20c:	pop	{fp}		; (ldr fp, [sp], #4)
     210:	bx	lr

00000214 <flatbuffers_int16_read_from_pe>:
     214:	push	{fp, lr}
     218:	add	fp, sp, #4
     21c:	sub	sp, sp, #8
     220:	str	r0, [fp, #-8]
     224:	ldr	r3, [fp, #-8]
     228:	ldrsh	r3, [r3]
     22c:	mov	r0, r3
     230:	bl	1ec <flatbuffers_int16_cast_from_pe>
     234:	mov	r3, r0
     238:	mov	r0, r3
     23c:	sub	sp, fp, #4
     240:	pop	{fp, pc}

00000244 <flatbuffers_int32_cast_from_pe>:
     244:	push	{fp}		; (str fp, [sp, #-4]!)
     248:	add	fp, sp, #0
     24c:	sub	sp, sp, #12
     250:	str	r0, [fp, #-8]
     254:	ldr	r3, [fp, #-8]
     258:	mov	r0, r3
     25c:	add	sp, fp, #0
     260:	pop	{fp}		; (ldr fp, [sp], #4)
     264:	bx	lr

00000268 <flatbuffers_int32_read_from_pe>:
     268:	push	{fp, lr}
     26c:	add	fp, sp, #4
     270:	sub	sp, sp, #8
     274:	str	r0, [fp, #-8]
     278:	ldr	r3, [fp, #-8]
     27c:	ldr	r3, [r3]
     280:	mov	r0, r3
     284:	bl	244 <flatbuffers_int32_cast_from_pe>
     288:	mov	r3, r0
     28c:	mov	r0, r3
     290:	sub	sp, fp, #4
     294:	pop	{fp, pc}

00000298 <flatbuffers_int64_cast_from_pe>:
     298:	push	{fp}		; (str fp, [sp, #-4]!)
     29c:	add	fp, sp, #0
     2a0:	sub	sp, sp, #12
     2a4:	strd	r0, [fp, #-12]
     2a8:	ldrd	r2, [fp, #-12]
     2ac:	mov	r0, r2
     2b0:	mov	r1, r3
     2b4:	add	sp, fp, #0
     2b8:	pop	{fp}		; (ldr fp, [sp], #4)
     2bc:	bx	lr

000002c0 <flatbuffers_int64_read_from_pe>:
     2c0:	push	{fp, lr}
     2c4:	add	fp, sp, #4
     2c8:	sub	sp, sp, #8
     2cc:	str	r0, [fp, #-8]
     2d0:	ldr	r3, [fp, #-8]
     2d4:	ldrd	r2, [r3]
     2d8:	mov	r0, r2
     2dc:	mov	r1, r3
     2e0:	bl	298 <flatbuffers_int64_cast_from_pe>
     2e4:	mov	r2, r0
     2e8:	mov	r3, r1
     2ec:	mov	r0, r2
     2f0:	mov	r1, r3
     2f4:	sub	sp, fp, #4
     2f8:	pop	{fp, pc}

000002fc <flatbuffers_float_cast_from_pe>:
     2fc:	push	{fp}		; (str fp, [sp, #-4]!)
     300:	add	fp, sp, #0
     304:	sub	sp, sp, #20
     308:	vstr	s0, [fp, #-16]
     30c:	ldr	r3, [fp, #-16]
     310:	str	r3, [fp, #-8]
     314:	ldr	r3, [fp, #-8]
     318:	str	r3, [fp, #-8]
     31c:	ldr	r3, [fp, #-8]
     320:	vmov	s15, r3
     324:	vmov.f32	s0, s15
     328:	add	sp, fp, #0
     32c:	pop	{fp}		; (ldr fp, [sp], #4)
     330:	bx	lr

00000334 <flatbuffers_float_read_from_pe>:
     334:	push	{fp, lr}
     338:	add	fp, sp, #4
     33c:	sub	sp, sp, #8
     340:	str	r0, [fp, #-8]
     344:	ldr	r3, [fp, #-8]
     348:	vldr	s15, [r3]
     34c:	vmov.f32	s0, s15
     350:	bl	2fc <flatbuffers_float_cast_from_pe>
     354:	vmov.f32	s15, s0
     358:	vmov.f32	s0, s15
     35c:	sub	sp, fp, #4
     360:	pop	{fp, pc}

00000364 <flatbuffers_double_cast_from_pe>:
     364:	push	{fp}		; (str fp, [sp, #-4]!)
     368:	add	fp, sp, #0
     36c:	sub	sp, sp, #20
     370:	vstr	d0, [fp, #-20]	; 0xffffffec
     374:	ldrd	r2, [fp, #-20]	; 0xffffffec
     378:	strd	r2, [fp, #-12]
     37c:	ldrd	r2, [fp, #-12]
     380:	strd	r2, [fp, #-12]
     384:	ldrd	r2, [fp, #-12]
     388:	vmov	d7, r2, r3
     38c:	vmov.f64	d0, d7
     390:	add	sp, fp, #0
     394:	pop	{fp}		; (ldr fp, [sp], #4)
     398:	bx	lr

0000039c <flatbuffers_double_read_from_pe>:
     39c:	push	{fp, lr}
     3a0:	add	fp, sp, #4
     3a4:	sub	sp, sp, #8
     3a8:	str	r0, [fp, #-8]
     3ac:	ldr	r3, [fp, #-8]
     3b0:	vldr	d7, [r3]
     3b4:	vmov.f64	d0, d7
     3b8:	bl	364 <flatbuffers_double_cast_from_pe>
     3bc:	vmov.f64	d7, d0
     3c0:	vmov.f64	d0, d7
     3c4:	sub	sp, fp, #4
     3c8:	pop	{fp, pc}

000003cc <__flatbuffers_uoffset_cast_from_pe>:
     3cc:	push	{fp}		; (str fp, [sp, #-4]!)
     3d0:	add	fp, sp, #0
     3d4:	sub	sp, sp, #12
     3d8:	str	r0, [fp, #-8]
     3dc:	ldr	r3, [fp, #-8]
     3e0:	mov	r0, r3
     3e4:	add	sp, fp, #0
     3e8:	pop	{fp}		; (ldr fp, [sp], #4)
     3ec:	bx	lr

000003f0 <__flatbuffers_uoffset_read_from_pe>:
     3f0:	push	{fp, lr}
     3f4:	add	fp, sp, #4
     3f8:	sub	sp, sp, #8
     3fc:	str	r0, [fp, #-8]
     400:	ldr	r3, [fp, #-8]
     404:	ldr	r3, [r3]
     408:	mov	r0, r3
     40c:	bl	3cc <__flatbuffers_uoffset_cast_from_pe>
     410:	mov	r3, r0
     414:	mov	r0, r3
     418:	sub	sp, fp, #4
     41c:	pop	{fp, pc}

00000420 <__flatbuffers_soffset_cast_from_pe>:
     420:	push	{fp}		; (str fp, [sp, #-4]!)
     424:	add	fp, sp, #0
     428:	sub	sp, sp, #12
     42c:	str	r0, [fp, #-8]
     430:	ldr	r3, [fp, #-8]
     434:	mov	r0, r3
     438:	add	sp, fp, #0
     43c:	pop	{fp}		; (ldr fp, [sp], #4)
     440:	bx	lr

00000444 <__flatbuffers_soffset_read_from_pe>:
     444:	push	{fp, lr}
     448:	add	fp, sp, #4
     44c:	sub	sp, sp, #8
     450:	str	r0, [fp, #-8]
     454:	ldr	r3, [fp, #-8]
     458:	ldr	r3, [r3]
     45c:	mov	r0, r3
     460:	bl	420 <__flatbuffers_soffset_cast_from_pe>
     464:	mov	r3, r0
     468:	mov	r0, r3
     46c:	sub	sp, fp, #4
     470:	pop	{fp, pc}

00000474 <__flatbuffers_voffset_cast_from_pe>:
     474:	push	{fp}		; (str fp, [sp, #-4]!)
     478:	add	fp, sp, #0
     47c:	sub	sp, sp, #12
     480:	mov	r3, r0
     484:	strh	r3, [fp, #-6]
     488:	ldrh	r3, [fp, #-6]
     48c:	mov	r0, r3
     490:	add	sp, fp, #0
     494:	pop	{fp}		; (ldr fp, [sp], #4)
     498:	bx	lr

0000049c <__flatbuffers_voffset_read_from_pe>:
     49c:	push	{fp, lr}
     4a0:	add	fp, sp, #4
     4a4:	sub	sp, sp, #8
     4a8:	str	r0, [fp, #-8]
     4ac:	ldr	r3, [fp, #-8]
     4b0:	ldrh	r3, [r3]
     4b4:	mov	r0, r3
     4b8:	bl	474 <__flatbuffers_voffset_cast_from_pe>
     4bc:	mov	r3, r0
     4c0:	mov	r0, r3
     4c4:	sub	sp, fp, #4
     4c8:	pop	{fp, pc}

000004cc <__flatbuffers_utype_cast_from_pe>:
     4cc:	push	{fp}		; (str fp, [sp, #-4]!)
     4d0:	add	fp, sp, #0
     4d4:	sub	sp, sp, #12
     4d8:	mov	r3, r0
     4dc:	strb	r3, [fp, #-5]
     4e0:	ldrb	r3, [fp, #-5]
     4e4:	mov	r0, r3
     4e8:	add	sp, fp, #0
     4ec:	pop	{fp}		; (ldr fp, [sp], #4)
     4f0:	bx	lr

000004f4 <__flatbuffers_utype_read_from_pe>:
     4f4:	push	{fp, lr}
     4f8:	add	fp, sp, #4
     4fc:	sub	sp, sp, #8
     500:	str	r0, [fp, #-8]
     504:	ldr	r3, [fp, #-8]
     508:	ldrb	r3, [r3]
     50c:	mov	r0, r3
     510:	bl	4cc <__flatbuffers_utype_cast_from_pe>
     514:	mov	r3, r0
     518:	mov	r0, r3
     51c:	sub	sp, fp, #4
     520:	pop	{fp, pc}

00000524 <__flatbuffers_thash_cast_from_pe>:
     524:	push	{fp}		; (str fp, [sp, #-4]!)
     528:	add	fp, sp, #0
     52c:	sub	sp, sp, #12
     530:	str	r0, [fp, #-8]
     534:	ldr	r3, [fp, #-8]
     538:	mov	r0, r3
     53c:	add	sp, fp, #0
     540:	pop	{fp}		; (ldr fp, [sp], #4)
     544:	bx	lr

00000548 <__flatbuffers_thash_cast_from_le>:
     548:	push	{fp}		; (str fp, [sp, #-4]!)
     54c:	add	fp, sp, #0
     550:	sub	sp, sp, #12
     554:	str	r0, [fp, #-8]
     558:	ldr	r3, [fp, #-8]
     55c:	mov	r0, r3
     560:	add	sp, fp, #0
     564:	pop	{fp}		; (ldr fp, [sp], #4)
     568:	bx	lr

0000056c <__flatbuffers_thash_read_from_pe>:
     56c:	push	{fp, lr}
     570:	add	fp, sp, #4
     574:	sub	sp, sp, #8
     578:	str	r0, [fp, #-8]
     57c:	ldr	r3, [fp, #-8]
     580:	ldr	r3, [r3]
     584:	mov	r0, r3
     588:	bl	524 <__flatbuffers_thash_cast_from_pe>
     58c:	mov	r3, r0
     590:	mov	r0, r3
     594:	sub	sp, fp, #4
     598:	pop	{fp, pc}

0000059c <flatbuffers_vec_len>:
     59c:	push	{fp, lr}
     5a0:	add	fp, sp, #4
     5a4:	sub	sp, sp, #8
     5a8:	str	r0, [fp, #-8]
     5ac:	ldr	r3, [fp, #-8]
     5b0:	cmp	r3, #0
     5b4:	beq	5d0 <flatbuffers_vec_len+0x34>
     5b8:	ldr	r3, [fp, #-8]
     5bc:	sub	r3, r3, #4
     5c0:	mov	r0, r3
     5c4:	bl	3f0 <__flatbuffers_uoffset_read_from_pe>
     5c8:	mov	r3, r0
     5cc:	b	5d4 <flatbuffers_vec_len+0x38>
     5d0:	mov	r3, #0
     5d4:	mov	r0, r3
     5d8:	sub	sp, fp, #4
     5dc:	pop	{fp, pc}

000005e0 <flatbuffers_string_len>:
     5e0:	push	{fp, lr}
     5e4:	add	fp, sp, #4
     5e8:	sub	sp, sp, #8
     5ec:	str	r0, [fp, #-8]
     5f0:	ldr	r3, [fp, #-8]
     5f4:	cmp	r3, #0
     5f8:	beq	614 <flatbuffers_string_len+0x34>
     5fc:	ldr	r3, [fp, #-8]
     600:	sub	r3, r3, #4
     604:	mov	r0, r3
     608:	bl	3f0 <__flatbuffers_uoffset_read_from_pe>
     60c:	mov	r3, r0
     610:	b	618 <flatbuffers_string_len+0x38>
     614:	mov	r3, #0
     618:	mov	r0, r3
     61c:	sub	sp, fp, #4
     620:	pop	{fp, pc}

00000624 <flatbuffers_string_vec_len>:
     624:	push	{fp, lr}
     628:	add	fp, sp, #4
     62c:	sub	sp, sp, #8
     630:	str	r0, [fp, #-8]
     634:	ldr	r3, [fp, #-8]
     638:	cmp	r3, #0
     63c:	beq	658 <flatbuffers_string_vec_len+0x34>
     640:	ldr	r3, [fp, #-8]
     644:	sub	r3, r3, #4
     648:	mov	r0, r3
     64c:	bl	3f0 <__flatbuffers_uoffset_read_from_pe>
     650:	mov	r3, r0
     654:	b	65c <flatbuffers_string_vec_len+0x38>
     658:	mov	r3, #0
     65c:	mov	r0, r3
     660:	sub	sp, fp, #4
     664:	pop	{fp, pc}

00000668 <flatbuffers_string_vec_at>:
     668:	push	{fp, lr}
     66c:	add	fp, sp, #4
     670:	sub	sp, sp, #16
     674:	str	r0, [fp, #-16]
     678:	str	r1, [fp, #-20]	; 0xffffffec
     67c:	ldr	r3, [fp, #-20]	; 0xffffffec
     680:	lsl	r3, r3, #2
     684:	ldr	r2, [fp, #-16]
     688:	add	r3, r2, r3
     68c:	str	r3, [fp, #-8]
     690:	ldr	r0, [fp, #-16]
     694:	bl	59c <flatbuffers_vec_len>
     698:	mov	r2, r0
     69c:	ldr	r3, [fp, #-20]	; 0xffffffec
     6a0:	cmp	r2, r3
     6a4:	bhi	6bc <flatbuffers_string_vec_at+0x54>
     6a8:	ldr	r3, [pc, #48]	; 6e0 <flatbuffers_string_vec_at+0x78>
     6ac:	mov	r2, #108	; 0x6c
     6b0:	ldr	r1, [pc, #44]	; 6e4 <flatbuffers_string_vec_at+0x7c>
     6b4:	ldr	r0, [pc, #44]	; 6e8 <flatbuffers_string_vec_at+0x80>
     6b8:	bl	0 <__assert_fail>
     6bc:	ldr	r0, [fp, #-8]
     6c0:	bl	3f0 <__flatbuffers_uoffset_read_from_pe>
     6c4:	mov	r3, r0
     6c8:	add	r3, r3, #4
     6cc:	ldr	r2, [fp, #-8]
     6d0:	add	r3, r2, r3
     6d4:	mov	r0, r3
     6d8:	sub	sp, fp, #4
     6dc:	pop	{fp, pc}
     6e0:	.word	0x0000087c
     6e4:	.word	0x00000004
     6e8:	.word	0x00000078

000006ec <flatbuffers_uint8_vec_len>:
     6ec:	push	{fp, lr}
     6f0:	add	fp, sp, #4
     6f4:	sub	sp, sp, #8
     6f8:	str	r0, [fp, #-8]
     6fc:	ldr	r0, [fp, #-8]
     700:	bl	59c <flatbuffers_vec_len>
     704:	mov	r3, r0
     708:	mov	r0, r3
     70c:	sub	sp, fp, #4
     710:	pop	{fp, pc}

00000714 <flatbuffers_uint8_vec_at>:
     714:	push	{fp, lr}
     718:	add	fp, sp, #4
     71c:	sub	sp, sp, #8
     720:	str	r0, [fp, #-8]
     724:	str	r1, [fp, #-12]
     728:	ldr	r0, [fp, #-8]
     72c:	bl	59c <flatbuffers_vec_len>
     730:	mov	r2, r0
     734:	ldr	r3, [fp, #-12]
     738:	cmp	r2, r3
     73c:	bhi	754 <flatbuffers_uint8_vec_at+0x40>
     740:	ldr	r3, [pc, #48]	; 778 <flatbuffers_uint8_vec_at+0x64>
     744:	ldr	r2, [pc, #48]	; 77c <flatbuffers_uint8_vec_at+0x68>
     748:	ldr	r1, [pc, #48]	; 780 <flatbuffers_uint8_vec_at+0x6c>
     74c:	ldr	r0, [pc, #48]	; 784 <flatbuffers_uint8_vec_at+0x70>
     750:	bl	0 <__assert_fail>
     754:	ldr	r2, [fp, #-8]
     758:	ldr	r3, [fp, #-12]
     75c:	add	r3, r2, r3
     760:	mov	r0, r3
     764:	bl	ac <flatbuffers_uint8_read_from_pe>
     768:	mov	r3, r0
     76c:	mov	r0, r3
     770:	sub	sp, fp, #4
     774:	pop	{fp, pc}
     778:	.word	0x00000834
     77c:	.word	0x0000018b
     780:	.word	0x00000004
     784:	.word	0x00000078

00000788 <flatbuffers_has_identifier>:
     788:	push	{fp, lr}
     78c:	add	fp, sp, #4
     790:	sub	sp, sp, #16
     794:	str	r0, [fp, #-16]
     798:	str	r1, [fp, #-20]	; 0xffffffec
     79c:	mov	r3, #0
     7a0:	str	r3, [fp, #-12]
     7a4:	ldr	r3, [fp, #-20]	; 0xffffffec
     7a8:	cmp	r3, #0
     7ac:	bne	7b8 <flatbuffers_has_identifier+0x30>
     7b0:	mov	r3, #1
     7b4:	b	81c <flatbuffers_has_identifier+0x94>
     7b8:	sub	r3, fp, #12
     7bc:	mov	r2, #4
     7c0:	ldr	r1, [fp, #-20]	; 0xffffffec
     7c4:	mov	r0, r3
     7c8:	bl	0 <strncpy>
     7cc:	ldr	r3, [fp, #-12]
     7d0:	mov	r0, r3
     7d4:	bl	548 <__flatbuffers_thash_cast_from_le>
     7d8:	mov	r3, r0
     7dc:	str	r3, [fp, #-12]
     7e0:	ldr	r3, [fp, #-16]
     7e4:	add	r3, r3, #4
     7e8:	mov	r0, r3
     7ec:	bl	56c <__flatbuffers_thash_read_from_pe>
     7f0:	str	r0, [fp, #-8]
     7f4:	ldr	r3, [fp, #-12]
     7f8:	cmp	r3, #0
     7fc:	beq	810 <flatbuffers_has_identifier+0x88>
     800:	ldr	r3, [fp, #-12]
     804:	ldr	r2, [fp, #-8]
     808:	cmp	r2, r3
     80c:	bne	818 <flatbuffers_has_identifier+0x90>
     810:	mov	r3, #1
     814:	b	81c <flatbuffers_has_identifier+0x94>
     818:	mov	r3, #0
     81c:	mov	r0, r3
     820:	sub	sp, fp, #4
     824:	pop	{fp, pc}

00000828 <MyGame_Example_Color_cast_from_pe>:
     828:	push	{fp}		; (str fp, [sp, #-4]!)
     82c:	add	fp, sp, #0
     830:	sub	sp, sp, #12
     834:	mov	r3, r0
     838:	strb	r3, [fp, #-5]
     83c:	ldrsb	r3, [fp, #-5]
     840:	mov	r0, r3
     844:	add	sp, fp, #0
     848:	pop	{fp}		; (ldr fp, [sp], #4)
     84c:	bx	lr

00000850 <MyGame_Example_Color_read_from_pe>:
     850:	push	{fp, lr}
     854:	add	fp, sp, #4
     858:	sub	sp, sp, #8
     85c:	str	r0, [fp, #-8]
     860:	ldr	r3, [fp, #-8]
     864:	ldrsb	r3, [r3]
     868:	mov	r0, r3
     86c:	bl	828 <MyGame_Example_Color_cast_from_pe>
     870:	mov	r3, r0
     874:	mov	r0, r3
     878:	sub	sp, fp, #4
     87c:	pop	{fp, pc}

00000880 <MyGame_Example_Test_vec_at>:
     880:	push	{fp, lr}
     884:	add	fp, sp, #4
     888:	sub	sp, sp, #8
     88c:	str	r0, [fp, #-8]
     890:	str	r1, [fp, #-12]
     894:	ldr	r0, [fp, #-8]
     898:	bl	59c <flatbuffers_vec_len>
     89c:	mov	r2, r0
     8a0:	ldr	r3, [fp, #-12]
     8a4:	cmp	r2, r3
     8a8:	bhi	8c0 <MyGame_Example_Test_vec_at+0x40>
     8ac:	ldr	r3, [pc, #40]	; 8dc <MyGame_Example_Test_vec_at+0x5c>
     8b0:	mov	r2, #380	; 0x17c
     8b4:	ldr	r1, [pc, #36]	; 8e0 <MyGame_Example_Test_vec_at+0x60>
     8b8:	ldr	r0, [pc, #36]	; 8e4 <MyGame_Example_Test_vec_at+0x64>
     8bc:	bl	0 <__assert_fail>
     8c0:	ldr	r3, [fp, #-12]
     8c4:	lsl	r3, r3, #2
     8c8:	ldr	r2, [fp, #-8]
     8cc:	add	r3, r2, r3
     8d0:	mov	r0, r3
     8d4:	sub	sp, fp, #4
     8d8:	pop	{fp, pc}
     8dc:	.word	0x00000914
     8e0:	.word	0x000000b0
     8e4:	.word	0x00000078

000008e8 <MyGame_Example_Test_vec_len>:
     8e8:	push	{fp, lr}
     8ec:	add	fp, sp, #4
     8f0:	sub	sp, sp, #8
     8f4:	str	r0, [fp, #-8]
     8f8:	ldr	r3, [fp, #-8]
     8fc:	cmp	r3, #0
     900:	beq	91c <MyGame_Example_Test_vec_len+0x34>
     904:	ldr	r3, [fp, #-8]
     908:	sub	r3, r3, #4
     90c:	mov	r0, r3
     910:	bl	3f0 <__flatbuffers_uoffset_read_from_pe>
     914:	mov	r3, r0
     918:	b	920 <MyGame_Example_Test_vec_len+0x38>
     91c:	mov	r3, #0
     920:	mov	r0, r3
     924:	sub	sp, fp, #4
     928:	pop	{fp, pc}

0000092c <MyGame_Example_Test_a>:
     92c:	push	{fp, lr}
     930:	add	fp, sp, #4
     934:	sub	sp, sp, #8
     938:	str	r0, [fp, #-8]
     93c:	ldr	r3, [fp, #-8]
     940:	cmp	r3, #0
     944:	beq	95c <MyGame_Example_Test_a+0x30>
     948:	ldr	r3, [fp, #-8]
     94c:	mov	r0, r3
     950:	bl	214 <flatbuffers_int16_read_from_pe>
     954:	mov	r3, r0
     958:	b	960 <MyGame_Example_Test_a+0x34>
     95c:	mov	r3, #0
     960:	mov	r0, r3
     964:	sub	sp, fp, #4
     968:	pop	{fp, pc}

0000096c <MyGame_Example_Test_b>:
     96c:	push	{fp, lr}
     970:	add	fp, sp, #4
     974:	sub	sp, sp, #8
     978:	str	r0, [fp, #-8]
     97c:	ldr	r3, [fp, #-8]
     980:	cmp	r3, #0
     984:	beq	9a0 <MyGame_Example_Test_b+0x34>
     988:	ldr	r3, [fp, #-8]
     98c:	add	r3, r3, #2
     990:	mov	r0, r3
     994:	bl	1bc <flatbuffers_int8_read_from_pe>
     998:	mov	r3, r0
     99c:	b	9a4 <MyGame_Example_Test_b+0x38>
     9a0:	mov	r3, #0
     9a4:	mov	r0, r3
     9a8:	sub	sp, fp, #4
     9ac:	pop	{fp, pc}

000009b0 <MyGame_Example_Vec3_x>:
     9b0:	push	{fp, lr}
     9b4:	add	fp, sp, #4
     9b8:	sub	sp, sp, #8
     9bc:	str	r0, [fp, #-8]
     9c0:	ldr	r3, [fp, #-8]
     9c4:	cmp	r3, #0
     9c8:	beq	9e0 <MyGame_Example_Vec3_x+0x30>
     9cc:	ldr	r3, [fp, #-8]
     9d0:	mov	r0, r3
     9d4:	bl	334 <flatbuffers_float_read_from_pe>
     9d8:	vmov.f32	s15, s0
     9dc:	b	9e4 <MyGame_Example_Vec3_x+0x34>
     9e0:	vldr	s15, [pc, #8]	; 9f0 <MyGame_Example_Vec3_x+0x40>
     9e4:	vmov.f32	s0, s15
     9e8:	sub	sp, fp, #4
     9ec:	pop	{fp, pc}
     9f0:	.word	0x00000000

000009f4 <MyGame_Example_Vec3_y>:
     9f4:	push	{fp, lr}
     9f8:	add	fp, sp, #4
     9fc:	sub	sp, sp, #8
     a00:	str	r0, [fp, #-8]
     a04:	ldr	r3, [fp, #-8]
     a08:	cmp	r3, #0
     a0c:	beq	a28 <MyGame_Example_Vec3_y+0x34>
     a10:	ldr	r3, [fp, #-8]
     a14:	add	r3, r3, #4
     a18:	mov	r0, r3
     a1c:	bl	334 <flatbuffers_float_read_from_pe>
     a20:	vmov.f32	s15, s0
     a24:	b	a2c <MyGame_Example_Vec3_y+0x38>
     a28:	vldr	s15, [pc, #8]	; a38 <MyGame_Example_Vec3_y+0x44>
     a2c:	vmov.f32	s0, s15
     a30:	sub	sp, fp, #4
     a34:	pop	{fp, pc}
     a38:	.word	0x00000000

00000a3c <MyGame_Example_Vec3_z>:
     a3c:	push	{fp, lr}
     a40:	add	fp, sp, #4
     a44:	sub	sp, sp, #8
     a48:	str	r0, [fp, #-8]
     a4c:	ldr	r3, [fp, #-8]
     a50:	cmp	r3, #0
     a54:	beq	a70 <MyGame_Example_Vec3_z+0x34>
     a58:	ldr	r3, [fp, #-8]
     a5c:	add	r3, r3, #8
     a60:	mov	r0, r3
     a64:	bl	334 <flatbuffers_float_read_from_pe>
     a68:	vmov.f32	s15, s0
     a6c:	b	a74 <MyGame_Example_Vec3_z+0x38>
     a70:	vldr	s15, [pc, #8]	; a80 <MyGame_Example_Vec3_z+0x44>
     a74:	vmov.f32	s0, s15
     a78:	sub	sp, fp, #4
     a7c:	pop	{fp, pc}
     a80:	.word	0x00000000

00000a84 <MyGame_Example_Vec3_test1>:
     a84:	push	{fp, lr}
     a88:	add	fp, sp, #4
     a8c:	sub	sp, sp, #8
     a90:	str	r0, [fp, #-8]
     a94:	ldr	r3, [fp, #-8]
     a98:	cmp	r3, #0
     a9c:	beq	ab8 <MyGame_Example_Vec3_test1+0x34>
     aa0:	ldr	r3, [fp, #-8]
     aa4:	add	r3, r3, #16
     aa8:	mov	r0, r3
     aac:	bl	39c <flatbuffers_double_read_from_pe>
     ab0:	vmov.f64	d7, d0
     ab4:	b	abc <MyGame_Example_Vec3_test1+0x38>
     ab8:	vldr	d7, [pc, #8]	; ac8 <MyGame_Example_Vec3_test1+0x44>
     abc:	vmov.f64	d0, d7
     ac0:	sub	sp, fp, #4
     ac4:	pop	{fp, pc}
	...

00000ad0 <MyGame_Example_Vec3_test2>:
     ad0:	push	{fp, lr}
     ad4:	add	fp, sp, #4
     ad8:	sub	sp, sp, #8
     adc:	str	r0, [fp, #-8]
     ae0:	ldr	r3, [fp, #-8]
     ae4:	cmp	r3, #0
     ae8:	beq	b04 <MyGame_Example_Vec3_test2+0x34>
     aec:	ldr	r3, [fp, #-8]
     af0:	add	r3, r3, #24
     af4:	mov	r0, r3
     af8:	bl	850 <MyGame_Example_Color_read_from_pe>
     afc:	mov	r3, r0
     b00:	b	b08 <MyGame_Example_Vec3_test2+0x38>
     b04:	mov	r3, #0
     b08:	mov	r0, r3
     b0c:	sub	sp, fp, #4
     b10:	pop	{fp, pc}

00000b14 <MyGame_Example_Vec3_test3>:
     b14:	push	{fp}		; (str fp, [sp, #-4]!)
     b18:	add	fp, sp, #0
     b1c:	sub	sp, sp, #12
     b20:	str	r0, [fp, #-8]
     b24:	ldr	r3, [fp, #-8]
     b28:	cmp	r3, #0
     b2c:	beq	b3c <MyGame_Example_Vec3_test3+0x28>
     b30:	ldr	r3, [fp, #-8]
     b34:	add	r3, r3, #26
     b38:	b	b40 <MyGame_Example_Vec3_test3+0x2c>
     b3c:	mov	r3, #0
     b40:	mov	r0, r3
     b44:	add	sp, fp, #0
     b48:	pop	{fp}		; (ldr fp, [sp], #4)
     b4c:	bx	lr

00000b50 <MyGame_Example_Monster_as_root>:
     b50:	push	{fp, lr}
     b54:	add	fp, sp, #4
     b58:	sub	sp, sp, #16
     b5c:	str	r0, [fp, #-16]
     b60:	ldr	r3, [pc, #76]	; bb4 <MyGame_Example_Monster_as_root+0x64>
     b64:	str	r3, [fp, #-8]
     b68:	ldr	r3, [fp, #-16]
     b6c:	cmp	r3, #0
     b70:	beq	ba4 <MyGame_Example_Monster_as_root+0x54>
     b74:	ldr	r1, [fp, #-8]
     b78:	ldr	r0, [fp, #-16]
     b7c:	bl	788 <flatbuffers_has_identifier>
     b80:	mov	r3, r0
     b84:	cmp	r3, #0
     b88:	beq	ba4 <MyGame_Example_Monster_as_root+0x54>
     b8c:	ldr	r0, [fp, #-16]
     b90:	bl	3f0 <__flatbuffers_uoffset_read_from_pe>
     b94:	mov	r2, r0
     b98:	ldr	r3, [fp, #-16]
     b9c:	add	r3, r3, r2
     ba0:	b	ba8 <MyGame_Example_Monster_as_root+0x58>
     ba4:	mov	r3, #0
     ba8:	mov	r0, r3
     bac:	sub	sp, fp, #4
     bb0:	pop	{fp, pc}
     bb4:	.word	0x0000011c

00000bb8 <MyGame_Example_Monster_pos>:
     bb8:	push	{fp, lr}
     bbc:	add	fp, sp, #4
     bc0:	sub	sp, sp, #16
     bc4:	str	r0, [fp, #-16]
     bc8:	mov	r3, #0
     bcc:	strh	r3, [fp, #-6]
     bd0:	ldr	r3, [fp, #-16]
     bd4:	cmp	r3, #0
     bd8:	bne	bf0 <MyGame_Example_Monster_pos+0x38>
     bdc:	ldr	r3, [pc, #164]	; c88 <MyGame_Example_Monster_pos+0xd0>
     be0:	mov	r2, #696	; 0x2b8
     be4:	ldr	r1, [pc, #160]	; c8c <MyGame_Example_Monster_pos+0xd4>
     be8:	ldr	r0, [pc, #160]	; c90 <MyGame_Example_Monster_pos+0xd8>
     bec:	bl	0 <__assert_fail>
     bf0:	mov	r3, #0
     bf4:	strh	r3, [fp, #-8]
     bf8:	ldr	r0, [fp, #-16]
     bfc:	bl	444 <__flatbuffers_soffset_read_from_pe>
     c00:	mov	r3, r0
     c04:	rsb	r3, r3, #0
     c08:	ldr	r2, [fp, #-16]
     c0c:	add	r3, r2, r3
     c10:	str	r3, [fp, #-12]
     c14:	ldr	r0, [fp, #-12]
     c18:	bl	49c <__flatbuffers_voffset_read_from_pe>
     c1c:	mov	r3, r0
     c20:	mov	r2, r3
     c24:	ldrh	r3, [fp, #-8]
     c28:	add	r3, r3, #3
     c2c:	lsl	r3, r3, #1
     c30:	cmp	r2, r3
     c34:	bcc	c5c <MyGame_Example_Monster_pos+0xa4>
     c38:	ldrh	r3, [fp, #-8]
     c3c:	add	r3, r3, #2
     c40:	lsl	r3, r3, #1
     c44:	ldr	r2, [fp, #-12]
     c48:	add	r3, r2, r3
     c4c:	mov	r0, r3
     c50:	bl	49c <__flatbuffers_voffset_read_from_pe>
     c54:	mov	r3, r0
     c58:	strh	r3, [fp, #-6]
     c5c:	ldrh	r3, [fp, #-6]
     c60:	cmp	r3, #0
     c64:	beq	c78 <MyGame_Example_Monster_pos+0xc0>
     c68:	ldrh	r3, [fp, #-6]
     c6c:	ldr	r2, [fp, #-16]
     c70:	add	r3, r2, r3
     c74:	b	c7c <MyGame_Example_Monster_pos+0xc4>
     c78:	mov	r3, #0
     c7c:	mov	r0, r3
     c80:	sub	sp, fp, #4
     c84:	pop	{fp, pc}
     c88:	.word	0x000007f4
     c8c:	.word	0x000000b0
     c90:	.word	0x00000124

00000c94 <MyGame_Example_Monster_hp>:
     c94:	push	{fp, lr}
     c98:	add	fp, sp, #4
     c9c:	sub	sp, sp, #16
     ca0:	str	r0, [fp, #-16]
     ca4:	mov	r3, #0
     ca8:	strh	r3, [fp, #-6]
     cac:	ldr	r3, [fp, #-16]
     cb0:	cmp	r3, #0
     cb4:	bne	ccc <MyGame_Example_Monster_hp+0x38>
     cb8:	ldr	r3, [pc, #176]	; d70 <MyGame_Example_Monster_hp+0xdc>
     cbc:	ldr	r2, [pc, #176]	; d74 <MyGame_Example_Monster_hp+0xe0>
     cc0:	ldr	r1, [pc, #176]	; d78 <MyGame_Example_Monster_hp+0xe4>
     cc4:	ldr	r0, [pc, #176]	; d7c <MyGame_Example_Monster_hp+0xe8>
     cc8:	bl	0 <__assert_fail>
     ccc:	mov	r3, #2
     cd0:	strh	r3, [fp, #-8]
     cd4:	ldr	r0, [fp, #-16]
     cd8:	bl	444 <__flatbuffers_soffset_read_from_pe>
     cdc:	mov	r3, r0
     ce0:	rsb	r3, r3, #0
     ce4:	ldr	r2, [fp, #-16]
     ce8:	add	r3, r2, r3
     cec:	str	r3, [fp, #-12]
     cf0:	ldr	r0, [fp, #-12]
     cf4:	bl	49c <__flatbuffers_voffset_read_from_pe>
     cf8:	mov	r3, r0
     cfc:	mov	r2, r3
     d00:	ldrh	r3, [fp, #-8]
     d04:	add	r3, r3, #3
     d08:	lsl	r3, r3, #1
     d0c:	cmp	r2, r3
     d10:	bcc	d38 <MyGame_Example_Monster_hp+0xa4>
     d14:	ldrh	r3, [fp, #-8]
     d18:	add	r3, r3, #2
     d1c:	lsl	r3, r3, #1
     d20:	ldr	r2, [fp, #-12]
     d24:	add	r3, r2, r3
     d28:	mov	r0, r3
     d2c:	bl	49c <__flatbuffers_voffset_read_from_pe>
     d30:	mov	r3, r0
     d34:	strh	r3, [fp, #-6]
     d38:	ldrh	r3, [fp, #-6]
     d3c:	cmp	r3, #0
     d40:	beq	d60 <MyGame_Example_Monster_hp+0xcc>
     d44:	ldrh	r3, [fp, #-6]
     d48:	ldr	r2, [fp, #-16]
     d4c:	add	r3, r2, r3
     d50:	mov	r0, r3
     d54:	bl	214 <flatbuffers_int16_read_from_pe>
     d58:	mov	r3, r0
     d5c:	b	d64 <MyGame_Example_Monster_hp+0xd0>
     d60:	mov	r3, #100	; 0x64
     d64:	mov	r0, r3
     d68:	sub	sp, fp, #4
     d6c:	pop	{fp, pc}
     d70:	.word	0x000007d8
     d74:	.word	0x000002b9
     d78:	.word	0x000000b0
     d7c:	.word	0x00000124

00000d80 <MyGame_Example_Monster_name>:
     d80:	push	{fp, lr}
     d84:	add	fp, sp, #4
     d88:	sub	sp, sp, #24
     d8c:	str	r0, [fp, #-24]	; 0xffffffe8
     d90:	mov	r3, #0
     d94:	strh	r3, [fp, #-6]
     d98:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d9c:	cmp	r3, #0
     da0:	bne	db8 <MyGame_Example_Monster_name+0x38>
     da4:	ldr	r3, [pc, #208]	; e7c <MyGame_Example_Monster_name+0xfc>
     da8:	ldr	r2, [pc, #208]	; e80 <MyGame_Example_Monster_name+0x100>
     dac:	ldr	r1, [pc, #208]	; e84 <MyGame_Example_Monster_name+0x104>
     db0:	ldr	r0, [pc, #208]	; e88 <MyGame_Example_Monster_name+0x108>
     db4:	bl	0 <__assert_fail>
     db8:	mov	r3, #3
     dbc:	strh	r3, [fp, #-8]
     dc0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     dc4:	bl	444 <__flatbuffers_soffset_read_from_pe>
     dc8:	mov	r3, r0
     dcc:	rsb	r3, r3, #0
     dd0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     dd4:	add	r3, r2, r3
     dd8:	str	r3, [fp, #-12]
     ddc:	ldr	r0, [fp, #-12]
     de0:	bl	49c <__flatbuffers_voffset_read_from_pe>
     de4:	mov	r3, r0
     de8:	mov	r2, r3
     dec:	ldrh	r3, [fp, #-8]
     df0:	add	r3, r3, #3
     df4:	lsl	r3, r3, #1
     df8:	cmp	r2, r3
     dfc:	bcc	e24 <MyGame_Example_Monster_name+0xa4>
     e00:	ldrh	r3, [fp, #-8]
     e04:	add	r3, r3, #2
     e08:	lsl	r3, r3, #1
     e0c:	ldr	r2, [fp, #-12]
     e10:	add	r3, r2, r3
     e14:	mov	r0, r3
     e18:	bl	49c <__flatbuffers_voffset_read_from_pe>
     e1c:	mov	r3, r0
     e20:	strh	r3, [fp, #-6]
     e24:	ldrh	r3, [fp, #-6]
     e28:	cmp	r3, #0
     e2c:	beq	e5c <MyGame_Example_Monster_name+0xdc>
     e30:	ldrh	r3, [fp, #-6]
     e34:	ldr	r2, [fp, #-24]	; 0xffffffe8
     e38:	add	r3, r2, r3
     e3c:	str	r3, [fp, #-16]
     e40:	ldr	r0, [fp, #-16]
     e44:	bl	3f0 <__flatbuffers_uoffset_read_from_pe>
     e48:	mov	r3, r0
     e4c:	add	r3, r3, #4
     e50:	ldr	r2, [fp, #-16]
     e54:	add	r3, r2, r3
     e58:	b	e70 <MyGame_Example_Monster_name+0xf0>
     e5c:	ldr	r3, [pc, #24]	; e7c <MyGame_Example_Monster_name+0xfc>
     e60:	ldr	r2, [pc, #24]	; e80 <MyGame_Example_Monster_name+0x100>
     e64:	ldr	r1, [pc, #24]	; e84 <MyGame_Example_Monster_name+0x104>
     e68:	ldr	r0, [pc, #28]	; e8c <MyGame_Example_Monster_name+0x10c>
     e6c:	bl	0 <__assert_fail>
     e70:	mov	r0, r3
     e74:	sub	sp, fp, #4
     e78:	pop	{fp, pc}
     e7c:	.word	0x000008d8
     e80:	.word	0x000002bb
     e84:	.word	0x000000b0
     e88:	.word	0x00000124
     e8c:	.word	0x0000014c

00000e90 <MyGame_Example_Monster_inventory>:
     e90:	push	{fp, lr}
     e94:	add	fp, sp, #4
     e98:	sub	sp, sp, #24
     e9c:	str	r0, [fp, #-24]	; 0xffffffe8
     ea0:	mov	r3, #0
     ea4:	strh	r3, [fp, #-6]
     ea8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     eac:	cmp	r3, #0
     eb0:	bne	ec8 <MyGame_Example_Monster_inventory+0x38>
     eb4:	ldr	r3, [pc, #192]	; f7c <MyGame_Example_Monster_inventory+0xec>
     eb8:	ldr	r2, [pc, #192]	; f80 <MyGame_Example_Monster_inventory+0xf0>
     ebc:	ldr	r1, [pc, #192]	; f84 <MyGame_Example_Monster_inventory+0xf4>
     ec0:	ldr	r0, [pc, #192]	; f88 <MyGame_Example_Monster_inventory+0xf8>
     ec4:	bl	0 <__assert_fail>
     ec8:	mov	r3, #5
     ecc:	strh	r3, [fp, #-8]
     ed0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     ed4:	bl	444 <__flatbuffers_soffset_read_from_pe>
     ed8:	mov	r3, r0
     edc:	rsb	r3, r3, #0
     ee0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     ee4:	add	r3, r2, r3
     ee8:	str	r3, [fp, #-12]
     eec:	ldr	r0, [fp, #-12]
     ef0:	bl	49c <__flatbuffers_voffset_read_from_pe>
     ef4:	mov	r3, r0
     ef8:	mov	r2, r3
     efc:	ldrh	r3, [fp, #-8]
     f00:	add	r3, r3, #3
     f04:	lsl	r3, r3, #1
     f08:	cmp	r2, r3
     f0c:	bcc	f34 <MyGame_Example_Monster_inventory+0xa4>
     f10:	ldrh	r3, [fp, #-8]
     f14:	add	r3, r3, #2
     f18:	lsl	r3, r3, #1
     f1c:	ldr	r2, [fp, #-12]
     f20:	add	r3, r2, r3
     f24:	mov	r0, r3
     f28:	bl	49c <__flatbuffers_voffset_read_from_pe>
     f2c:	mov	r3, r0
     f30:	strh	r3, [fp, #-6]
     f34:	ldrh	r3, [fp, #-6]
     f38:	cmp	r3, #0
     f3c:	beq	f6c <MyGame_Example_Monster_inventory+0xdc>
     f40:	ldrh	r3, [fp, #-6]
     f44:	ldr	r2, [fp, #-24]	; 0xffffffe8
     f48:	add	r3, r2, r3
     f4c:	str	r3, [fp, #-16]
     f50:	ldr	r0, [fp, #-16]
     f54:	bl	3f0 <__flatbuffers_uoffset_read_from_pe>
     f58:	mov	r3, r0
     f5c:	add	r3, r3, #4
     f60:	ldr	r2, [fp, #-16]
     f64:	add	r3, r2, r3
     f68:	b	f70 <MyGame_Example_Monster_inventory+0xe0>
     f6c:	mov	r3, #0
     f70:	mov	r0, r3
     f74:	sub	sp, fp, #4
     f78:	pop	{fp, pc}
     f7c:	.word	0x00000810
     f80:	.word	0x000002c2
     f84:	.word	0x000000b0
     f88:	.word	0x00000124

00000f8c <MyGame_Example_Monster_testarrayofstring>:
     f8c:	push	{fp, lr}
     f90:	add	fp, sp, #4
     f94:	sub	sp, sp, #24
     f98:	str	r0, [fp, #-24]	; 0xffffffe8
     f9c:	mov	r3, #0
     fa0:	strh	r3, [fp, #-6]
     fa4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     fa8:	cmp	r3, #0
     fac:	bne	fc4 <MyGame_Example_Monster_testarrayofstring+0x38>
     fb0:	ldr	r3, [pc, #192]	; 1078 <MyGame_Example_Monster_testarrayofstring+0xec>
     fb4:	mov	r2, #712	; 0x2c8
     fb8:	ldr	r1, [pc, #188]	; 107c <MyGame_Example_Monster_testarrayofstring+0xf0>
     fbc:	ldr	r0, [pc, #188]	; 1080 <MyGame_Example_Monster_testarrayofstring+0xf4>
     fc0:	bl	0 <__assert_fail>
     fc4:	mov	r3, #10
     fc8:	strh	r3, [fp, #-8]
     fcc:	ldr	r0, [fp, #-24]	; 0xffffffe8
     fd0:	bl	444 <__flatbuffers_soffset_read_from_pe>
     fd4:	mov	r3, r0
     fd8:	rsb	r3, r3, #0
     fdc:	ldr	r2, [fp, #-24]	; 0xffffffe8
     fe0:	add	r3, r2, r3
     fe4:	str	r3, [fp, #-12]
     fe8:	ldr	r0, [fp, #-12]
     fec:	bl	49c <__flatbuffers_voffset_read_from_pe>
     ff0:	mov	r3, r0
     ff4:	mov	r2, r3
     ff8:	ldrh	r3, [fp, #-8]
     ffc:	add	r3, r3, #3
    1000:	lsl	r3, r3, #1
    1004:	cmp	r2, r3
    1008:	bcc	1030 <MyGame_Example_Monster_testarrayofstring+0xa4>
    100c:	ldrh	r3, [fp, #-8]
    1010:	add	r3, r3, #2
    1014:	lsl	r3, r3, #1
    1018:	ldr	r2, [fp, #-12]
    101c:	add	r3, r2, r3
    1020:	mov	r0, r3
    1024:	bl	49c <__flatbuffers_voffset_read_from_pe>
    1028:	mov	r3, r0
    102c:	strh	r3, [fp, #-6]
    1030:	ldrh	r3, [fp, #-6]
    1034:	cmp	r3, #0
    1038:	beq	1068 <MyGame_Example_Monster_testarrayofstring+0xdc>
    103c:	ldrh	r3, [fp, #-6]
    1040:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1044:	add	r3, r2, r3
    1048:	str	r3, [fp, #-16]
    104c:	ldr	r0, [fp, #-16]
    1050:	bl	3f0 <__flatbuffers_uoffset_read_from_pe>
    1054:	mov	r3, r0
    1058:	add	r3, r3, #4
    105c:	ldr	r2, [fp, #-16]
    1060:	add	r3, r2, r3
    1064:	b	106c <MyGame_Example_Monster_testarrayofstring+0xe0>
    1068:	mov	r3, #0
    106c:	mov	r0, r3
    1070:	sub	sp, fp, #4
    1074:	pop	{fp, pc}
    1078:	.word	0x00000850
    107c:	.word	0x000000b0
    1080:	.word	0x00000124

00001084 <MyGame_Example_Monster_test_type>:
    1084:	push	{fp, lr}
    1088:	add	fp, sp, #4
    108c:	sub	sp, sp, #16
    1090:	str	r0, [fp, #-16]
    1094:	mov	r3, #0
    1098:	strh	r3, [fp, #-6]
    109c:	ldr	r3, [fp, #-16]
    10a0:	cmp	r3, #0
    10a4:	bne	10bc <MyGame_Example_Monster_test_type+0x38>
    10a8:	ldr	r3, [pc, #176]	; 1160 <MyGame_Example_Monster_test_type+0xdc>
    10ac:	ldr	r2, [pc, #176]	; 1164 <MyGame_Example_Monster_test_type+0xe0>
    10b0:	ldr	r1, [pc, #176]	; 1168 <MyGame_Example_Monster_test_type+0xe4>
    10b4:	ldr	r0, [pc, #176]	; 116c <MyGame_Example_Monster_test_type+0xe8>
    10b8:	bl	0 <__assert_fail>
    10bc:	mov	r3, #7
    10c0:	strh	r3, [fp, #-8]
    10c4:	ldr	r0, [fp, #-16]
    10c8:	bl	444 <__flatbuffers_soffset_read_from_pe>
    10cc:	mov	r3, r0
    10d0:	rsb	r3, r3, #0
    10d4:	ldr	r2, [fp, #-16]
    10d8:	add	r3, r2, r3
    10dc:	str	r3, [fp, #-12]
    10e0:	ldr	r0, [fp, #-12]
    10e4:	bl	49c <__flatbuffers_voffset_read_from_pe>
    10e8:	mov	r3, r0
    10ec:	mov	r2, r3
    10f0:	ldrh	r3, [fp, #-8]
    10f4:	add	r3, r3, #3
    10f8:	lsl	r3, r3, #1
    10fc:	cmp	r2, r3
    1100:	bcc	1128 <MyGame_Example_Monster_test_type+0xa4>
    1104:	ldrh	r3, [fp, #-8]
    1108:	add	r3, r3, #2
    110c:	lsl	r3, r3, #1
    1110:	ldr	r2, [fp, #-12]
    1114:	add	r3, r2, r3
    1118:	mov	r0, r3
    111c:	bl	49c <__flatbuffers_voffset_read_from_pe>
    1120:	mov	r3, r0
    1124:	strh	r3, [fp, #-6]
    1128:	ldrh	r3, [fp, #-6]
    112c:	cmp	r3, #0
    1130:	beq	1150 <MyGame_Example_Monster_test_type+0xcc>
    1134:	ldrh	r3, [fp, #-6]
    1138:	ldr	r2, [fp, #-16]
    113c:	add	r3, r2, r3
    1140:	mov	r0, r3
    1144:	bl	4f4 <__flatbuffers_utype_read_from_pe>
    1148:	mov	r3, r0
    114c:	b	1154 <MyGame_Example_Monster_test_type+0xd0>
    1150:	mov	r3, #0
    1154:	mov	r0, r3
    1158:	sub	sp, fp, #4
    115c:	pop	{fp, pc}
    1160:	.word	0x00000898
    1164:	.word	0x000002cd
    1168:	.word	0x000000b0
    116c:	.word	0x00000124

00001170 <MyGame_Example_Monster_test>:
    1170:	push	{fp, lr}
    1174:	add	fp, sp, #4
    1178:	sub	sp, sp, #24
    117c:	str	r0, [fp, #-24]	; 0xffffffe8
    1180:	mov	r3, #0
    1184:	strh	r3, [fp, #-6]
    1188:	ldr	r3, [fp, #-24]	; 0xffffffe8
    118c:	cmp	r3, #0
    1190:	bne	11a8 <MyGame_Example_Monster_test+0x38>
    1194:	ldr	r3, [pc, #188]	; 1258 <MyGame_Example_Monster_test+0xe8>
    1198:	ldr	r2, [pc, #188]	; 125c <MyGame_Example_Monster_test+0xec>
    119c:	ldr	r1, [pc, #188]	; 1260 <MyGame_Example_Monster_test+0xf0>
    11a0:	ldr	r0, [pc, #188]	; 1264 <MyGame_Example_Monster_test+0xf4>
    11a4:	bl	0 <__assert_fail>
    11a8:	mov	r3, #8
    11ac:	strh	r3, [fp, #-8]
    11b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    11b4:	bl	444 <__flatbuffers_soffset_read_from_pe>
    11b8:	mov	r3, r0
    11bc:	rsb	r3, r3, #0
    11c0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    11c4:	add	r3, r2, r3
    11c8:	str	r3, [fp, #-12]
    11cc:	ldr	r0, [fp, #-12]
    11d0:	bl	49c <__flatbuffers_voffset_read_from_pe>
    11d4:	mov	r3, r0
    11d8:	mov	r2, r3
    11dc:	ldrh	r3, [fp, #-8]
    11e0:	add	r3, r3, #3
    11e4:	lsl	r3, r3, #1
    11e8:	cmp	r2, r3
    11ec:	bcc	1214 <MyGame_Example_Monster_test+0xa4>
    11f0:	ldrh	r3, [fp, #-8]
    11f4:	add	r3, r3, #2
    11f8:	lsl	r3, r3, #1
    11fc:	ldr	r2, [fp, #-12]
    1200:	add	r3, r2, r3
    1204:	mov	r0, r3
    1208:	bl	49c <__flatbuffers_voffset_read_from_pe>
    120c:	mov	r3, r0
    1210:	strh	r3, [fp, #-6]
    1214:	ldrh	r3, [fp, #-6]
    1218:	cmp	r3, #0
    121c:	beq	1248 <MyGame_Example_Monster_test+0xd8>
    1220:	ldrh	r3, [fp, #-6]
    1224:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1228:	add	r3, r2, r3
    122c:	str	r3, [fp, #-16]
    1230:	ldr	r0, [fp, #-16]
    1234:	bl	3f0 <__flatbuffers_uoffset_read_from_pe>
    1238:	mov	r2, r0
    123c:	ldr	r3, [fp, #-16]
    1240:	add	r3, r3, r2
    1244:	b	124c <MyGame_Example_Monster_test+0xdc>
    1248:	mov	r3, #0
    124c:	mov	r0, r3
    1250:	sub	sp, fp, #4
    1254:	pop	{fp, pc}
    1258:	.word	0x000008bc
    125c:	.word	0x000002cd
    1260:	.word	0x000000b0
    1264:	.word	0x00000124

00001268 <MyGame_Example_Monster_test4>:
    1268:	push	{fp, lr}
    126c:	add	fp, sp, #4
    1270:	sub	sp, sp, #24
    1274:	str	r0, [fp, #-24]	; 0xffffffe8
    1278:	mov	r3, #0
    127c:	strh	r3, [fp, #-6]
    1280:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1284:	cmp	r3, #0
    1288:	bne	12a0 <MyGame_Example_Monster_test4+0x38>
    128c:	ldr	r3, [pc, #192]	; 1354 <MyGame_Example_Monster_test4+0xec>
    1290:	ldr	r2, [pc, #192]	; 1358 <MyGame_Example_Monster_test4+0xf0>
    1294:	ldr	r1, [pc, #192]	; 135c <MyGame_Example_Monster_test4+0xf4>
    1298:	ldr	r0, [pc, #192]	; 1360 <MyGame_Example_Monster_test4+0xf8>
    129c:	bl	0 <__assert_fail>
    12a0:	mov	r3, #9
    12a4:	strh	r3, [fp, #-8]
    12a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    12ac:	bl	444 <__flatbuffers_soffset_read_from_pe>
    12b0:	mov	r3, r0
    12b4:	rsb	r3, r3, #0
    12b8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    12bc:	add	r3, r2, r3
    12c0:	str	r3, [fp, #-12]
    12c4:	ldr	r0, [fp, #-12]
    12c8:	bl	49c <__flatbuffers_voffset_read_from_pe>
    12cc:	mov	r3, r0
    12d0:	mov	r2, r3
    12d4:	ldrh	r3, [fp, #-8]
    12d8:	add	r3, r3, #3
    12dc:	lsl	r3, r3, #1
    12e0:	cmp	r2, r3
    12e4:	bcc	130c <MyGame_Example_Monster_test4+0xa4>
    12e8:	ldrh	r3, [fp, #-8]
    12ec:	add	r3, r3, #2
    12f0:	lsl	r3, r3, #1
    12f4:	ldr	r2, [fp, #-12]
    12f8:	add	r3, r2, r3
    12fc:	mov	r0, r3
    1300:	bl	49c <__flatbuffers_voffset_read_from_pe>
    1304:	mov	r3, r0
    1308:	strh	r3, [fp, #-6]
    130c:	ldrh	r3, [fp, #-6]
    1310:	cmp	r3, #0
    1314:	beq	1344 <MyGame_Example_Monster_test4+0xdc>
    1318:	ldrh	r3, [fp, #-6]
    131c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1320:	add	r3, r2, r3
    1324:	str	r3, [fp, #-16]
    1328:	ldr	r0, [fp, #-16]
    132c:	bl	3f0 <__flatbuffers_uoffset_read_from_pe>
    1330:	mov	r3, r0
    1334:	add	r3, r3, #4
    1338:	ldr	r2, [fp, #-16]
    133c:	add	r3, r2, r3
    1340:	b	1348 <MyGame_Example_Monster_test4+0xe0>
    1344:	mov	r3, #0
    1348:	mov	r0, r3
    134c:	sub	sp, fp, #4
    1350:	pop	{fp, pc}
    1354:	.word	0x000008f4
    1358:	.word	0x000002ce
    135c:	.word	0x000000b0
    1360:	.word	0x00000124

00001364 <MyGame_Example_Monster_testhashs32_fnv1>:
    1364:	push	{fp, lr}
    1368:	add	fp, sp, #4
    136c:	sub	sp, sp, #16
    1370:	str	r0, [fp, #-16]
    1374:	mov	r3, #0
    1378:	strh	r3, [fp, #-6]
    137c:	ldr	r3, [fp, #-16]
    1380:	cmp	r3, #0
    1384:	bne	139c <MyGame_Example_Monster_testhashs32_fnv1+0x38>
    1388:	ldr	r3, [pc, #176]	; 1440 <MyGame_Example_Monster_testhashs32_fnv1+0xdc>
    138c:	mov	r2, #724	; 0x2d4
    1390:	ldr	r1, [pc, #172]	; 1444 <MyGame_Example_Monster_testhashs32_fnv1+0xe0>
    1394:	ldr	r0, [pc, #172]	; 1448 <MyGame_Example_Monster_testhashs32_fnv1+0xe4>
    1398:	bl	0 <__assert_fail>
    139c:	mov	r3, #16
    13a0:	strh	r3, [fp, #-8]
    13a4:	ldr	r0, [fp, #-16]
    13a8:	bl	444 <__flatbuffers_soffset_read_from_pe>
    13ac:	mov	r3, r0
    13b0:	rsb	r3, r3, #0
    13b4:	ldr	r2, [fp, #-16]
    13b8:	add	r3, r2, r3
    13bc:	str	r3, [fp, #-12]
    13c0:	ldr	r0, [fp, #-12]
    13c4:	bl	49c <__flatbuffers_voffset_read_from_pe>
    13c8:	mov	r3, r0
    13cc:	mov	r2, r3
    13d0:	ldrh	r3, [fp, #-8]
    13d4:	add	r3, r3, #3
    13d8:	lsl	r3, r3, #1
    13dc:	cmp	r2, r3
    13e0:	bcc	1408 <MyGame_Example_Monster_testhashs32_fnv1+0xa4>
    13e4:	ldrh	r3, [fp, #-8]
    13e8:	add	r3, r3, #2
    13ec:	lsl	r3, r3, #1
    13f0:	ldr	r2, [fp, #-12]
    13f4:	add	r3, r2, r3
    13f8:	mov	r0, r3
    13fc:	bl	49c <__flatbuffers_voffset_read_from_pe>
    1400:	mov	r3, r0
    1404:	strh	r3, [fp, #-6]
    1408:	ldrh	r3, [fp, #-6]
    140c:	cmp	r3, #0
    1410:	beq	1430 <MyGame_Example_Monster_testhashs32_fnv1+0xcc>
    1414:	ldrh	r3, [fp, #-6]
    1418:	ldr	r2, [fp, #-16]
    141c:	add	r3, r2, r3
    1420:	mov	r0, r3
    1424:	bl	268 <flatbuffers_int32_read_from_pe>
    1428:	mov	r3, r0
    142c:	b	1434 <MyGame_Example_Monster_testhashs32_fnv1+0xd0>
    1430:	mov	r3, #0
    1434:	mov	r0, r3
    1438:	sub	sp, fp, #4
    143c:	pop	{fp, pc}
    1440:	.word	0x00000930
    1444:	.word	0x000000b0
    1448:	.word	0x00000124

0000144c <MyGame_Example_Monster_testhashu32_fnv1>:
    144c:	push	{fp, lr}
    1450:	add	fp, sp, #4
    1454:	sub	sp, sp, #16
    1458:	str	r0, [fp, #-16]
    145c:	mov	r3, #0
    1460:	strh	r3, [fp, #-6]
    1464:	ldr	r3, [fp, #-16]
    1468:	cmp	r3, #0
    146c:	bne	1484 <MyGame_Example_Monster_testhashu32_fnv1+0x38>
    1470:	ldr	r3, [pc, #176]	; 1528 <MyGame_Example_Monster_testhashu32_fnv1+0xdc>
    1474:	ldr	r2, [pc, #176]	; 152c <MyGame_Example_Monster_testhashu32_fnv1+0xe0>
    1478:	ldr	r1, [pc, #176]	; 1530 <MyGame_Example_Monster_testhashu32_fnv1+0xe4>
    147c:	ldr	r0, [pc, #176]	; 1534 <MyGame_Example_Monster_testhashu32_fnv1+0xe8>
    1480:	bl	0 <__assert_fail>
    1484:	mov	r3, #17
    1488:	strh	r3, [fp, #-8]
    148c:	ldr	r0, [fp, #-16]
    1490:	bl	444 <__flatbuffers_soffset_read_from_pe>
    1494:	mov	r3, r0
    1498:	rsb	r3, r3, #0
    149c:	ldr	r2, [fp, #-16]
    14a0:	add	r3, r2, r3
    14a4:	str	r3, [fp, #-12]
    14a8:	ldr	r0, [fp, #-12]
    14ac:	bl	49c <__flatbuffers_voffset_read_from_pe>
    14b0:	mov	r3, r0
    14b4:	mov	r2, r3
    14b8:	ldrh	r3, [fp, #-8]
    14bc:	add	r3, r3, #3
    14c0:	lsl	r3, r3, #1
    14c4:	cmp	r2, r3
    14c8:	bcc	14f0 <MyGame_Example_Monster_testhashu32_fnv1+0xa4>
    14cc:	ldrh	r3, [fp, #-8]
    14d0:	add	r3, r3, #2
    14d4:	lsl	r3, r3, #1
    14d8:	ldr	r2, [fp, #-12]
    14dc:	add	r3, r2, r3
    14e0:	mov	r0, r3
    14e4:	bl	49c <__flatbuffers_voffset_read_from_pe>
    14e8:	mov	r3, r0
    14ec:	strh	r3, [fp, #-6]
    14f0:	ldrh	r3, [fp, #-6]
    14f4:	cmp	r3, #0
    14f8:	beq	1518 <MyGame_Example_Monster_testhashu32_fnv1+0xcc>
    14fc:	ldrh	r3, [fp, #-6]
    1500:	ldr	r2, [fp, #-16]
    1504:	add	r3, r2, r3
    1508:	mov	r0, r3
    150c:	bl	100 <flatbuffers_uint32_read_from_pe>
    1510:	mov	r3, r0
    1514:	b	151c <MyGame_Example_Monster_testhashu32_fnv1+0xd0>
    1518:	mov	r3, #0
    151c:	mov	r0, r3
    1520:	sub	sp, fp, #4
    1524:	pop	{fp, pc}
    1528:	.word	0x00000958
    152c:	.word	0x000002d5
    1530:	.word	0x000000b0
    1534:	.word	0x00000124

00001538 <MyGame_Example_Monster_testhashs64_fnv1>:
    1538:	push	{fp, lr}
    153c:	add	fp, sp, #4
    1540:	sub	sp, sp, #16
    1544:	str	r0, [fp, #-16]
    1548:	mov	r3, #0
    154c:	strh	r3, [fp, #-6]
    1550:	ldr	r3, [fp, #-16]
    1554:	cmp	r3, #0
    1558:	bne	1570 <MyGame_Example_Monster_testhashs64_fnv1+0x38>
    155c:	ldr	r3, [pc, #188]	; 1620 <MyGame_Example_Monster_testhashs64_fnv1+0xe8>
    1560:	ldr	r2, [pc, #188]	; 1624 <MyGame_Example_Monster_testhashs64_fnv1+0xec>
    1564:	ldr	r1, [pc, #188]	; 1628 <MyGame_Example_Monster_testhashs64_fnv1+0xf0>
    1568:	ldr	r0, [pc, #188]	; 162c <MyGame_Example_Monster_testhashs64_fnv1+0xf4>
    156c:	bl	0 <__assert_fail>
    1570:	mov	r3, #18
    1574:	strh	r3, [fp, #-8]
    1578:	ldr	r0, [fp, #-16]
    157c:	bl	444 <__flatbuffers_soffset_read_from_pe>
    1580:	mov	r3, r0
    1584:	rsb	r3, r3, #0
    1588:	ldr	r2, [fp, #-16]
    158c:	add	r3, r2, r3
    1590:	str	r3, [fp, #-12]
    1594:	ldr	r0, [fp, #-12]
    1598:	bl	49c <__flatbuffers_voffset_read_from_pe>
    159c:	mov	r3, r0
    15a0:	mov	r2, r3
    15a4:	ldrh	r3, [fp, #-8]
    15a8:	add	r3, r3, #3
    15ac:	lsl	r3, r3, #1
    15b0:	cmp	r2, r3
    15b4:	bcc	15dc <MyGame_Example_Monster_testhashs64_fnv1+0xa4>
    15b8:	ldrh	r3, [fp, #-8]
    15bc:	add	r3, r3, #2
    15c0:	lsl	r3, r3, #1
    15c4:	ldr	r2, [fp, #-12]
    15c8:	add	r3, r2, r3
    15cc:	mov	r0, r3
    15d0:	bl	49c <__flatbuffers_voffset_read_from_pe>
    15d4:	mov	r3, r0
    15d8:	strh	r3, [fp, #-6]
    15dc:	ldrh	r3, [fp, #-6]
    15e0:	cmp	r3, #0
    15e4:	beq	1608 <MyGame_Example_Monster_testhashs64_fnv1+0xd0>
    15e8:	ldrh	r3, [fp, #-6]
    15ec:	ldr	r2, [fp, #-16]
    15f0:	add	r3, r2, r3
    15f4:	mov	r0, r3
    15f8:	bl	2c0 <flatbuffers_int64_read_from_pe>
    15fc:	mov	r2, r0
    1600:	mov	r3, r1
    1604:	b	1610 <MyGame_Example_Monster_testhashs64_fnv1+0xd8>
    1608:	mov	r2, #0
    160c:	mov	r3, #0
    1610:	mov	r0, r2
    1614:	mov	r1, r3
    1618:	sub	sp, fp, #4
    161c:	pop	{fp, pc}
    1620:	.word	0x00000980
    1624:	.word	0x000002d6
    1628:	.word	0x000000b0
    162c:	.word	0x00000124

00001630 <MyGame_Example_Monster_testhashu64_fnv1>:
    1630:	push	{fp, lr}
    1634:	add	fp, sp, #4
    1638:	sub	sp, sp, #16
    163c:	str	r0, [fp, #-16]
    1640:	mov	r3, #0
    1644:	strh	r3, [fp, #-6]
    1648:	ldr	r3, [fp, #-16]
    164c:	cmp	r3, #0
    1650:	bne	1668 <MyGame_Example_Monster_testhashu64_fnv1+0x38>
    1654:	ldr	r3, [pc, #188]	; 1718 <MyGame_Example_Monster_testhashu64_fnv1+0xe8>
    1658:	ldr	r2, [pc, #188]	; 171c <MyGame_Example_Monster_testhashu64_fnv1+0xec>
    165c:	ldr	r1, [pc, #188]	; 1720 <MyGame_Example_Monster_testhashu64_fnv1+0xf0>
    1660:	ldr	r0, [pc, #188]	; 1724 <MyGame_Example_Monster_testhashu64_fnv1+0xf4>
    1664:	bl	0 <__assert_fail>
    1668:	mov	r3, #19
    166c:	strh	r3, [fp, #-8]
    1670:	ldr	r0, [fp, #-16]
    1674:	bl	444 <__flatbuffers_soffset_read_from_pe>
    1678:	mov	r3, r0
    167c:	rsb	r3, r3, #0
    1680:	ldr	r2, [fp, #-16]
    1684:	add	r3, r2, r3
    1688:	str	r3, [fp, #-12]
    168c:	ldr	r0, [fp, #-12]
    1690:	bl	49c <__flatbuffers_voffset_read_from_pe>
    1694:	mov	r3, r0
    1698:	mov	r2, r3
    169c:	ldrh	r3, [fp, #-8]
    16a0:	add	r3, r3, #3
    16a4:	lsl	r3, r3, #1
    16a8:	cmp	r2, r3
    16ac:	bcc	16d4 <MyGame_Example_Monster_testhashu64_fnv1+0xa4>
    16b0:	ldrh	r3, [fp, #-8]
    16b4:	add	r3, r3, #2
    16b8:	lsl	r3, r3, #1
    16bc:	ldr	r2, [fp, #-12]
    16c0:	add	r3, r2, r3
    16c4:	mov	r0, r3
    16c8:	bl	49c <__flatbuffers_voffset_read_from_pe>
    16cc:	mov	r3, r0
    16d0:	strh	r3, [fp, #-6]
    16d4:	ldrh	r3, [fp, #-6]
    16d8:	cmp	r3, #0
    16dc:	beq	1700 <MyGame_Example_Monster_testhashu64_fnv1+0xd0>
    16e0:	ldrh	r3, [fp, #-6]
    16e4:	ldr	r2, [fp, #-16]
    16e8:	add	r3, r2, r3
    16ec:	mov	r0, r3
    16f0:	bl	158 <flatbuffers_uint64_read_from_pe>
    16f4:	mov	r2, r0
    16f8:	mov	r3, r1
    16fc:	b	1708 <MyGame_Example_Monster_testhashu64_fnv1+0xd8>
    1700:	mov	r2, #0
    1704:	mov	r3, #0
    1708:	mov	r0, r2
    170c:	mov	r1, r3
    1710:	sub	sp, fp, #4
    1714:	pop	{fp, pc}
    1718:	.word	0x000009a8
    171c:	.word	0x000002d7
    1720:	.word	0x000000b0
    1724:	.word	0x00000124

00001728 <MyGame_Example_Monster_testhashs32_fnv1a>:
    1728:	push	{fp, lr}
    172c:	add	fp, sp, #4
    1730:	sub	sp, sp, #16
    1734:	str	r0, [fp, #-16]
    1738:	mov	r3, #0
    173c:	strh	r3, [fp, #-6]
    1740:	ldr	r3, [fp, #-16]
    1744:	cmp	r3, #0
    1748:	bne	1760 <MyGame_Example_Monster_testhashs32_fnv1a+0x38>
    174c:	ldr	r3, [pc, #176]	; 1804 <MyGame_Example_Monster_testhashs32_fnv1a+0xdc>
    1750:	mov	r2, #728	; 0x2d8
    1754:	ldr	r1, [pc, #172]	; 1808 <MyGame_Example_Monster_testhashs32_fnv1a+0xe0>
    1758:	ldr	r0, [pc, #172]	; 180c <MyGame_Example_Monster_testhashs32_fnv1a+0xe4>
    175c:	bl	0 <__assert_fail>
    1760:	mov	r3, #20
    1764:	strh	r3, [fp, #-8]
    1768:	ldr	r0, [fp, #-16]
    176c:	bl	444 <__flatbuffers_soffset_read_from_pe>
    1770:	mov	r3, r0
    1774:	rsb	r3, r3, #0
    1778:	ldr	r2, [fp, #-16]
    177c:	add	r3, r2, r3
    1780:	str	r3, [fp, #-12]
    1784:	ldr	r0, [fp, #-12]
    1788:	bl	49c <__flatbuffers_voffset_read_from_pe>
    178c:	mov	r3, r0
    1790:	mov	r2, r3
    1794:	ldrh	r3, [fp, #-8]
    1798:	add	r3, r3, #3
    179c:	lsl	r3, r3, #1
    17a0:	cmp	r2, r3
    17a4:	bcc	17cc <MyGame_Example_Monster_testhashs32_fnv1a+0xa4>
    17a8:	ldrh	r3, [fp, #-8]
    17ac:	add	r3, r3, #2
    17b0:	lsl	r3, r3, #1
    17b4:	ldr	r2, [fp, #-12]
    17b8:	add	r3, r2, r3
    17bc:	mov	r0, r3
    17c0:	bl	49c <__flatbuffers_voffset_read_from_pe>
    17c4:	mov	r3, r0
    17c8:	strh	r3, [fp, #-6]
    17cc:	ldrh	r3, [fp, #-6]
    17d0:	cmp	r3, #0
    17d4:	beq	17f4 <MyGame_Example_Monster_testhashs32_fnv1a+0xcc>
    17d8:	ldrh	r3, [fp, #-6]
    17dc:	ldr	r2, [fp, #-16]
    17e0:	add	r3, r2, r3
    17e4:	mov	r0, r3
    17e8:	bl	268 <flatbuffers_int32_read_from_pe>
    17ec:	mov	r3, r0
    17f0:	b	17f8 <MyGame_Example_Monster_testhashs32_fnv1a+0xd0>
    17f4:	mov	r3, #0
    17f8:	mov	r0, r3
    17fc:	sub	sp, fp, #4
    1800:	pop	{fp, pc}
    1804:	.word	0x000009d0
    1808:	.word	0x000000b0
    180c:	.word	0x00000124

00001810 <MyGame_Example_Monster_testhashu32_fnv1a>:
    1810:	push	{fp, lr}
    1814:	add	fp, sp, #4
    1818:	sub	sp, sp, #16
    181c:	str	r0, [fp, #-16]
    1820:	mov	r3, #0
    1824:	strh	r3, [fp, #-6]
    1828:	ldr	r3, [fp, #-16]
    182c:	cmp	r3, #0
    1830:	bne	1848 <MyGame_Example_Monster_testhashu32_fnv1a+0x38>
    1834:	ldr	r3, [pc, #176]	; 18ec <MyGame_Example_Monster_testhashu32_fnv1a+0xdc>
    1838:	ldr	r2, [pc, #176]	; 18f0 <MyGame_Example_Monster_testhashu32_fnv1a+0xe0>
    183c:	ldr	r1, [pc, #176]	; 18f4 <MyGame_Example_Monster_testhashu32_fnv1a+0xe4>
    1840:	ldr	r0, [pc, #176]	; 18f8 <MyGame_Example_Monster_testhashu32_fnv1a+0xe8>
    1844:	bl	0 <__assert_fail>
    1848:	mov	r3, #21
    184c:	strh	r3, [fp, #-8]
    1850:	ldr	r0, [fp, #-16]
    1854:	bl	444 <__flatbuffers_soffset_read_from_pe>
    1858:	mov	r3, r0
    185c:	rsb	r3, r3, #0
    1860:	ldr	r2, [fp, #-16]
    1864:	add	r3, r2, r3
    1868:	str	r3, [fp, #-12]
    186c:	ldr	r0, [fp, #-12]
    1870:	bl	49c <__flatbuffers_voffset_read_from_pe>
    1874:	mov	r3, r0
    1878:	mov	r2, r3
    187c:	ldrh	r3, [fp, #-8]
    1880:	add	r3, r3, #3
    1884:	lsl	r3, r3, #1
    1888:	cmp	r2, r3
    188c:	bcc	18b4 <MyGame_Example_Monster_testhashu32_fnv1a+0xa4>
    1890:	ldrh	r3, [fp, #-8]
    1894:	add	r3, r3, #2
    1898:	lsl	r3, r3, #1
    189c:	ldr	r2, [fp, #-12]
    18a0:	add	r3, r2, r3
    18a4:	mov	r0, r3
    18a8:	bl	49c <__flatbuffers_voffset_read_from_pe>
    18ac:	mov	r3, r0
    18b0:	strh	r3, [fp, #-6]
    18b4:	ldrh	r3, [fp, #-6]
    18b8:	cmp	r3, #0
    18bc:	beq	18dc <MyGame_Example_Monster_testhashu32_fnv1a+0xcc>
    18c0:	ldrh	r3, [fp, #-6]
    18c4:	ldr	r2, [fp, #-16]
    18c8:	add	r3, r2, r3
    18cc:	mov	r0, r3
    18d0:	bl	100 <flatbuffers_uint32_read_from_pe>
    18d4:	mov	r3, r0
    18d8:	b	18e0 <MyGame_Example_Monster_testhashu32_fnv1a+0xd0>
    18dc:	mov	r3, #0
    18e0:	mov	r0, r3
    18e4:	sub	sp, fp, #4
    18e8:	pop	{fp, pc}
    18ec:	.word	0x000009fc
    18f0:	.word	0x000002d9
    18f4:	.word	0x000000b0
    18f8:	.word	0x00000124

000018fc <MyGame_Example_Monster_testhashs64_fnv1a>:
    18fc:	push	{fp, lr}
    1900:	add	fp, sp, #4
    1904:	sub	sp, sp, #16
    1908:	str	r0, [fp, #-16]
    190c:	mov	r3, #0
    1910:	strh	r3, [fp, #-6]
    1914:	ldr	r3, [fp, #-16]
    1918:	cmp	r3, #0
    191c:	bne	1934 <MyGame_Example_Monster_testhashs64_fnv1a+0x38>
    1920:	ldr	r3, [pc, #188]	; 19e4 <MyGame_Example_Monster_testhashs64_fnv1a+0xe8>
    1924:	ldr	r2, [pc, #188]	; 19e8 <MyGame_Example_Monster_testhashs64_fnv1a+0xec>
    1928:	ldr	r1, [pc, #188]	; 19ec <MyGame_Example_Monster_testhashs64_fnv1a+0xf0>
    192c:	ldr	r0, [pc, #188]	; 19f0 <MyGame_Example_Monster_testhashs64_fnv1a+0xf4>
    1930:	bl	0 <__assert_fail>
    1934:	mov	r3, #22
    1938:	strh	r3, [fp, #-8]
    193c:	ldr	r0, [fp, #-16]
    1940:	bl	444 <__flatbuffers_soffset_read_from_pe>
    1944:	mov	r3, r0
    1948:	rsb	r3, r3, #0
    194c:	ldr	r2, [fp, #-16]
    1950:	add	r3, r2, r3
    1954:	str	r3, [fp, #-12]
    1958:	ldr	r0, [fp, #-12]
    195c:	bl	49c <__flatbuffers_voffset_read_from_pe>
    1960:	mov	r3, r0
    1964:	mov	r2, r3
    1968:	ldrh	r3, [fp, #-8]
    196c:	add	r3, r3, #3
    1970:	lsl	r3, r3, #1
    1974:	cmp	r2, r3
    1978:	bcc	19a0 <MyGame_Example_Monster_testhashs64_fnv1a+0xa4>
    197c:	ldrh	r3, [fp, #-8]
    1980:	add	r3, r3, #2
    1984:	lsl	r3, r3, #1
    1988:	ldr	r2, [fp, #-12]
    198c:	add	r3, r2, r3
    1990:	mov	r0, r3
    1994:	bl	49c <__flatbuffers_voffset_read_from_pe>
    1998:	mov	r3, r0
    199c:	strh	r3, [fp, #-6]
    19a0:	ldrh	r3, [fp, #-6]
    19a4:	cmp	r3, #0
    19a8:	beq	19cc <MyGame_Example_Monster_testhashs64_fnv1a+0xd0>
    19ac:	ldrh	r3, [fp, #-6]
    19b0:	ldr	r2, [fp, #-16]
    19b4:	add	r3, r2, r3
    19b8:	mov	r0, r3
    19bc:	bl	2c0 <flatbuffers_int64_read_from_pe>
    19c0:	mov	r2, r0
    19c4:	mov	r3, r1
    19c8:	b	19d4 <MyGame_Example_Monster_testhashs64_fnv1a+0xd8>
    19cc:	mov	r2, #0
    19d0:	mov	r3, #0
    19d4:	mov	r0, r2
    19d8:	mov	r1, r3
    19dc:	sub	sp, fp, #4
    19e0:	pop	{fp, pc}
    19e4:	.word	0x00000a28
    19e8:	.word	0x000002da
    19ec:	.word	0x000000b0
    19f0:	.word	0x00000124

000019f4 <MyGame_Example_Monster_testhashu64_fnv1a>:
    19f4:	push	{fp, lr}
    19f8:	add	fp, sp, #4
    19fc:	sub	sp, sp, #16
    1a00:	str	r0, [fp, #-16]
    1a04:	mov	r3, #0
    1a08:	strh	r3, [fp, #-6]
    1a0c:	ldr	r3, [fp, #-16]
    1a10:	cmp	r3, #0
    1a14:	bne	1a2c <MyGame_Example_Monster_testhashu64_fnv1a+0x38>
    1a18:	ldr	r3, [pc, #188]	; 1adc <MyGame_Example_Monster_testhashu64_fnv1a+0xe8>
    1a1c:	ldr	r2, [pc, #188]	; 1ae0 <MyGame_Example_Monster_testhashu64_fnv1a+0xec>
    1a20:	ldr	r1, [pc, #188]	; 1ae4 <MyGame_Example_Monster_testhashu64_fnv1a+0xf0>
    1a24:	ldr	r0, [pc, #188]	; 1ae8 <MyGame_Example_Monster_testhashu64_fnv1a+0xf4>
    1a28:	bl	0 <__assert_fail>
    1a2c:	mov	r3, #23
    1a30:	strh	r3, [fp, #-8]
    1a34:	ldr	r0, [fp, #-16]
    1a38:	bl	444 <__flatbuffers_soffset_read_from_pe>
    1a3c:	mov	r3, r0
    1a40:	rsb	r3, r3, #0
    1a44:	ldr	r2, [fp, #-16]
    1a48:	add	r3, r2, r3
    1a4c:	str	r3, [fp, #-12]
    1a50:	ldr	r0, [fp, #-12]
    1a54:	bl	49c <__flatbuffers_voffset_read_from_pe>
    1a58:	mov	r3, r0
    1a5c:	mov	r2, r3
    1a60:	ldrh	r3, [fp, #-8]
    1a64:	add	r3, r3, #3
    1a68:	lsl	r3, r3, #1
    1a6c:	cmp	r2, r3
    1a70:	bcc	1a98 <MyGame_Example_Monster_testhashu64_fnv1a+0xa4>
    1a74:	ldrh	r3, [fp, #-8]
    1a78:	add	r3, r3, #2
    1a7c:	lsl	r3, r3, #1
    1a80:	ldr	r2, [fp, #-12]
    1a84:	add	r3, r2, r3
    1a88:	mov	r0, r3
    1a8c:	bl	49c <__flatbuffers_voffset_read_from_pe>
    1a90:	mov	r3, r0
    1a94:	strh	r3, [fp, #-6]
    1a98:	ldrh	r3, [fp, #-6]
    1a9c:	cmp	r3, #0
    1aa0:	beq	1ac4 <MyGame_Example_Monster_testhashu64_fnv1a+0xd0>
    1aa4:	ldrh	r3, [fp, #-6]
    1aa8:	ldr	r2, [fp, #-16]
    1aac:	add	r3, r2, r3
    1ab0:	mov	r0, r3
    1ab4:	bl	158 <flatbuffers_uint64_read_from_pe>
    1ab8:	mov	r2, r0
    1abc:	mov	r3, r1
    1ac0:	b	1acc <MyGame_Example_Monster_testhashu64_fnv1a+0xd8>
    1ac4:	mov	r2, #0
    1ac8:	mov	r3, #0
    1acc:	mov	r0, r2
    1ad0:	mov	r1, r3
    1ad4:	sub	sp, fp, #4
    1ad8:	pop	{fp, pc}
    1adc:	.word	0x00000a54
    1ae0:	.word	0x000002db
    1ae4:	.word	0x000000b0
    1ae8:	.word	0x00000124

00001aec <MyGame_Example_Foo_union_verifier>:
    1aec:	push	{fp, lr}
    1af0:	add	fp, sp, #4
    1af4:	sub	sp, sp, #8
    1af8:	str	r0, [fp, #-8]
    1afc:	ldr	r3, [fp, #-8]
    1b00:	ldrb	r3, [r3, #12]
    1b04:	cmp	r3, #1
    1b08:	bne	1b20 <MyGame_Example_Foo_union_verifier+0x34>
    1b0c:	ldr	r1, [pc, #28]	; 1b30 <MyGame_Example_Foo_union_verifier+0x44>
    1b10:	ldr	r0, [fp, #-8]
    1b14:	bl	0 <flatcc_verify_union_table>
    1b18:	mov	r3, r0
    1b1c:	b	1b24 <MyGame_Example_Foo_union_verifier+0x38>
    1b20:	mov	r3, #0
    1b24:	mov	r0, r3
    1b28:	sub	sp, fp, #4
    1b2c:	pop	{fp, pc}
    1b30:	.word	0x00000000

00001b34 <MyGame_Example_Any_union_verifier>:
    1b34:	push	{fp, lr}
    1b38:	add	fp, sp, #4
    1b3c:	sub	sp, sp, #8
    1b40:	str	r0, [fp, #-8]
    1b44:	ldr	r3, [fp, #-8]
    1b48:	ldrb	r3, [r3, #12]
    1b4c:	sub	r3, r3, #1
    1b50:	cmp	r3, #3
    1b54:	ldrls	pc, [pc, r3, lsl #2]
    1b58:	b	1bbc <MyGame_Example_Any_union_verifier+0x88>
    1b5c:	.word	0x00001b6c
    1b60:	.word	0x00001b80
    1b64:	.word	0x00001b94
    1b68:	.word	0x00001ba8
    1b6c:	ldr	r1, [pc, #88]	; 1bcc <MyGame_Example_Any_union_verifier+0x98>
    1b70:	ldr	r0, [fp, #-8]
    1b74:	bl	0 <flatcc_verify_union_table>
    1b78:	mov	r3, r0
    1b7c:	b	1bc0 <MyGame_Example_Any_union_verifier+0x8c>
    1b80:	ldr	r1, [pc, #72]	; 1bd0 <MyGame_Example_Any_union_verifier+0x9c>
    1b84:	ldr	r0, [fp, #-8]
    1b88:	bl	0 <flatcc_verify_union_table>
    1b8c:	mov	r3, r0
    1b90:	b	1bc0 <MyGame_Example_Any_union_verifier+0x8c>
    1b94:	ldr	r1, [pc, #56]	; 1bd4 <MyGame_Example_Any_union_verifier+0xa0>
    1b98:	ldr	r0, [fp, #-8]
    1b9c:	bl	0 <flatcc_verify_union_table>
    1ba0:	mov	r3, r0
    1ba4:	b	1bc0 <MyGame_Example_Any_union_verifier+0x8c>
    1ba8:	ldr	r1, [pc, #40]	; 1bd8 <MyGame_Example_Any_union_verifier+0xa4>
    1bac:	ldr	r0, [fp, #-8]
    1bb0:	bl	0 <flatcc_verify_union_table>
    1bb4:	mov	r3, r0
    1bb8:	b	1bc0 <MyGame_Example_Any_union_verifier+0x8c>
    1bbc:	mov	r3, #0
    1bc0:	mov	r0, r3
    1bc4:	sub	sp, fp, #4
    1bc8:	pop	{fp, pc}
	...

00001bdc <Fantasy_Character_union_verifier>:
    1bdc:	push	{fp, lr}
    1be0:	add	fp, sp, #4
    1be4:	sub	sp, sp, #8
    1be8:	str	r0, [fp, #-8]
    1bec:	ldr	r3, [fp, #-8]
    1bf0:	ldrb	r3, [r3, #12]
    1bf4:	cmp	r3, #9
    1bf8:	beq	1c60 <Fantasy_Character_union_verifier+0x84>
    1bfc:	cmp	r3, #9
    1c00:	bgt	1c18 <Fantasy_Character_union_verifier+0x3c>
    1c04:	cmp	r3, #2
    1c08:	beq	1c34 <Fantasy_Character_union_verifier+0x58>
    1c0c:	cmp	r3, #8
    1c10:	beq	1c48 <Fantasy_Character_union_verifier+0x6c>
    1c14:	b	1cb0 <Fantasy_Character_union_verifier+0xd4>
    1c18:	cmp	r3, #11
    1c1c:	beq	1c90 <Fantasy_Character_union_verifier+0xb4>
    1c20:	cmp	r3, #11
    1c24:	blt	1c78 <Fantasy_Character_union_verifier+0x9c>
    1c28:	cmp	r3, #255	; 0xff
    1c2c:	beq	1ca0 <Fantasy_Character_union_verifier+0xc4>
    1c30:	b	1cb0 <Fantasy_Character_union_verifier+0xd4>
    1c34:	ldr	r1, [pc, #132]	; 1cc0 <Fantasy_Character_union_verifier+0xe4>
    1c38:	ldr	r0, [fp, #-8]
    1c3c:	bl	0 <flatcc_verify_union_table>
    1c40:	mov	r3, r0
    1c44:	b	1cb4 <Fantasy_Character_union_verifier+0xd8>
    1c48:	mov	r2, #2
    1c4c:	mov	r1, #2
    1c50:	ldr	r0, [fp, #-8]
    1c54:	bl	0 <flatcc_verify_union_struct>
    1c58:	mov	r3, r0
    1c5c:	b	1cb4 <Fantasy_Character_union_verifier+0xd8>
    1c60:	mov	r2, #4
    1c64:	mov	r1, #4
    1c68:	ldr	r0, [fp, #-8]
    1c6c:	bl	0 <flatcc_verify_union_struct>
    1c70:	mov	r3, r0
    1c74:	b	1cb4 <Fantasy_Character_union_verifier+0xd8>
    1c78:	mov	r2, #4
    1c7c:	mov	r1, #4
    1c80:	ldr	r0, [fp, #-8]
    1c84:	bl	0 <flatcc_verify_union_struct>
    1c88:	mov	r3, r0
    1c8c:	b	1cb4 <Fantasy_Character_union_verifier+0xd8>
    1c90:	ldr	r0, [fp, #-8]
    1c94:	bl	0 <flatcc_verify_union_string>
    1c98:	mov	r3, r0
    1c9c:	b	1cb4 <Fantasy_Character_union_verifier+0xd8>
    1ca0:	ldr	r0, [fp, #-8]
    1ca4:	bl	0 <flatcc_verify_union_string>
    1ca8:	mov	r3, r0
    1cac:	b	1cb4 <Fantasy_Character_union_verifier+0xd8>
    1cb0:	mov	r3, #0
    1cb4:	mov	r0, r3
    1cb8:	sub	sp, fp, #4
    1cbc:	pop	{fp, pc}
    1cc0:	.word	0x00000000

00001cc4 <MyGame_InParentNamespace_verify_table>:
    1cc4:	push	{fp}		; (str fp, [sp, #-4]!)
    1cc8:	add	fp, sp, #0
    1ccc:	sub	sp, sp, #12
    1cd0:	str	r0, [fp, #-8]
    1cd4:	mov	r3, #0
    1cd8:	mov	r0, r3
    1cdc:	add	sp, fp, #0
    1ce0:	pop	{fp}		; (ldr fp, [sp], #4)
    1ce4:	bx	lr

00001ce8 <MyGame_Example2_Monster_verify_table>:
    1ce8:	push	{fp}		; (str fp, [sp, #-4]!)
    1cec:	add	fp, sp, #0
    1cf0:	sub	sp, sp, #12
    1cf4:	str	r0, [fp, #-8]
    1cf8:	mov	r3, #0
    1cfc:	mov	r0, r3
    1d00:	add	sp, fp, #0
    1d04:	pop	{fp}		; (ldr fp, [sp], #4)
    1d08:	bx	lr

00001d0c <MyGame_Example_emptytable_verify_table>:
    1d0c:	push	{fp}		; (str fp, [sp, #-4]!)
    1d10:	add	fp, sp, #0
    1d14:	sub	sp, sp, #12
    1d18:	str	r0, [fp, #-8]
    1d1c:	mov	r3, #0
    1d20:	mov	r0, r3
    1d24:	add	sp, fp, #0
    1d28:	pop	{fp}		; (ldr fp, [sp], #4)
    1d2c:	bx	lr

00001d30 <MyGame_Example_with_emptystruct_verify_table>:
    1d30:	push	{fp, lr}
    1d34:	add	fp, sp, #4
    1d38:	sub	sp, sp, #16
    1d3c:	str	r0, [fp, #-16]
    1d40:	mov	r3, #1
    1d44:	mov	r2, #0
    1d48:	mov	r1, #0
    1d4c:	ldr	r0, [fp, #-16]
    1d50:	bl	0 <flatcc_verify_field>
    1d54:	str	r0, [fp, #-8]
    1d58:	ldr	r3, [fp, #-8]
    1d5c:	cmp	r3, #0
    1d60:	beq	1d6c <MyGame_Example_with_emptystruct_verify_table+0x3c>
    1d64:	ldr	r3, [fp, #-8]
    1d68:	b	1d70 <MyGame_Example_with_emptystruct_verify_table+0x40>
    1d6c:	mov	r3, #0
    1d70:	mov	r0, r3
    1d74:	sub	sp, fp, #4
    1d78:	pop	{fp, pc}

00001d7c <MyGame_Example_TestSimpleTableWithEnum_verify_table>:
    1d7c:	push	{fp, lr}
    1d80:	add	fp, sp, #4
    1d84:	sub	sp, sp, #16
    1d88:	str	r0, [fp, #-16]
    1d8c:	mov	r3, #1
    1d90:	mov	r2, #1
    1d94:	mov	r1, #0
    1d98:	ldr	r0, [fp, #-16]
    1d9c:	bl	0 <flatcc_verify_field>
    1da0:	str	r0, [fp, #-8]
    1da4:	ldr	r3, [fp, #-8]
    1da8:	cmp	r3, #0
    1dac:	beq	1db8 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x3c>
    1db0:	ldr	r3, [fp, #-8]
    1db4:	b	1e40 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xc4>
    1db8:	mov	r3, #1
    1dbc:	mov	r2, #1
    1dc0:	mov	r1, #1
    1dc4:	ldr	r0, [fp, #-16]
    1dc8:	bl	0 <flatcc_verify_field>
    1dcc:	str	r0, [fp, #-8]
    1dd0:	ldr	r3, [fp, #-8]
    1dd4:	cmp	r3, #0
    1dd8:	beq	1de4 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x68>
    1ddc:	ldr	r3, [fp, #-8]
    1de0:	b	1e40 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xc4>
    1de4:	mov	r3, #1
    1de8:	mov	r2, #1
    1dec:	mov	r1, #2
    1df0:	ldr	r0, [fp, #-16]
    1df4:	bl	0 <flatcc_verify_field>
    1df8:	str	r0, [fp, #-8]
    1dfc:	ldr	r3, [fp, #-8]
    1e00:	cmp	r3, #0
    1e04:	beq	1e10 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x94>
    1e08:	ldr	r3, [fp, #-8]
    1e0c:	b	1e40 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xc4>
    1e10:	mov	r3, #1
    1e14:	mov	r2, #1
    1e18:	mov	r1, #3
    1e1c:	ldr	r0, [fp, #-16]
    1e20:	bl	0 <flatcc_verify_field>
    1e24:	str	r0, [fp, #-8]
    1e28:	ldr	r3, [fp, #-8]
    1e2c:	cmp	r3, #0
    1e30:	beq	1e3c <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xc0>
    1e34:	ldr	r3, [fp, #-8]
    1e38:	b	1e40 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xc4>
    1e3c:	mov	r3, #0
    1e40:	mov	r0, r3
    1e44:	sub	sp, fp, #4
    1e48:	pop	{fp, pc}

00001e4c <MyGame_Example_TestInclude_verify_table>:
    1e4c:	push	{fp, lr}
    1e50:	add	fp, sp, #4
    1e54:	sub	sp, sp, #16
    1e58:	str	r0, [fp, #-16]
    1e5c:	mov	r3, #1
    1e60:	mov	r2, #0
    1e64:	mov	r1, #0
    1e68:	ldr	r0, [fp, #-16]
    1e6c:	bl	0 <flatcc_verify_field>
    1e70:	str	r0, [fp, #-8]
    1e74:	ldr	r3, [fp, #-8]
    1e78:	cmp	r3, #0
    1e7c:	beq	1e88 <MyGame_Example_TestInclude_verify_table+0x3c>
    1e80:	ldr	r3, [fp, #-8]
    1e84:	b	1f68 <MyGame_Example_TestInclude_verify_table+0x11c>
    1e88:	mov	r3, #8
    1e8c:	mov	r2, #8
    1e90:	mov	r1, #1
    1e94:	ldr	r0, [fp, #-16]
    1e98:	bl	0 <flatcc_verify_field>
    1e9c:	str	r0, [fp, #-8]
    1ea0:	ldr	r3, [fp, #-8]
    1ea4:	cmp	r3, #0
    1ea8:	beq	1eb4 <MyGame_Example_TestInclude_verify_table+0x68>
    1eac:	ldr	r3, [fp, #-8]
    1eb0:	b	1f68 <MyGame_Example_TestInclude_verify_table+0x11c>
    1eb4:	mov	r3, #8
    1eb8:	mov	r2, #8
    1ebc:	mov	r1, #2
    1ec0:	ldr	r0, [fp, #-16]
    1ec4:	bl	0 <flatcc_verify_field>
    1ec8:	str	r0, [fp, #-8]
    1ecc:	ldr	r3, [fp, #-8]
    1ed0:	cmp	r3, #0
    1ed4:	beq	1ee0 <MyGame_Example_TestInclude_verify_table+0x94>
    1ed8:	ldr	r3, [fp, #-8]
    1edc:	b	1f68 <MyGame_Example_TestInclude_verify_table+0x11c>
    1ee0:	mov	r3, #4
    1ee4:	mov	r2, #4
    1ee8:	mov	r1, #3
    1eec:	ldr	r0, [fp, #-16]
    1ef0:	bl	0 <flatcc_verify_field>
    1ef4:	str	r0, [fp, #-8]
    1ef8:	ldr	r3, [fp, #-8]
    1efc:	cmp	r3, #0
    1f00:	beq	1f0c <MyGame_Example_TestInclude_verify_table+0xc0>
    1f04:	ldr	r3, [fp, #-8]
    1f08:	b	1f68 <MyGame_Example_TestInclude_verify_table+0x11c>
    1f0c:	mov	r3, #8
    1f10:	mov	r2, #8
    1f14:	mov	r1, #4
    1f18:	ldr	r0, [fp, #-16]
    1f1c:	bl	0 <flatcc_verify_field>
    1f20:	str	r0, [fp, #-8]
    1f24:	ldr	r3, [fp, #-8]
    1f28:	cmp	r3, #0
    1f2c:	beq	1f38 <MyGame_Example_TestInclude_verify_table+0xec>
    1f30:	ldr	r3, [fp, #-8]
    1f34:	b	1f68 <MyGame_Example_TestInclude_verify_table+0x11c>
    1f38:	mov	r3, #8
    1f3c:	mov	r2, #8
    1f40:	mov	r1, #5
    1f44:	ldr	r0, [fp, #-16]
    1f48:	bl	0 <flatcc_verify_field>
    1f4c:	str	r0, [fp, #-8]
    1f50:	ldr	r3, [fp, #-8]
    1f54:	cmp	r3, #0
    1f58:	beq	1f64 <MyGame_Example_TestInclude_verify_table+0x118>
    1f5c:	ldr	r3, [fp, #-8]
    1f60:	b	1f68 <MyGame_Example_TestInclude_verify_table+0x11c>
    1f64:	mov	r3, #0
    1f68:	mov	r0, r3
    1f6c:	sub	sp, fp, #4
    1f70:	pop	{fp, pc}

00001f74 <MyGame_Example_Stat_verify_table>:
    1f74:	push	{fp, lr}
    1f78:	add	fp, sp, #4
    1f7c:	sub	sp, sp, #16
    1f80:	str	r0, [fp, #-16]
    1f84:	mov	r2, #0
    1f88:	mov	r1, #0
    1f8c:	ldr	r0, [fp, #-16]
    1f90:	bl	0 <flatcc_verify_string_field>
    1f94:	str	r0, [fp, #-8]
    1f98:	ldr	r3, [fp, #-8]
    1f9c:	cmp	r3, #0
    1fa0:	beq	1fac <MyGame_Example_Stat_verify_table+0x38>
    1fa4:	ldr	r3, [fp, #-8]
    1fa8:	b	2008 <MyGame_Example_Stat_verify_table+0x94>
    1fac:	mov	r3, #8
    1fb0:	mov	r2, #8
    1fb4:	mov	r1, #1
    1fb8:	ldr	r0, [fp, #-16]
    1fbc:	bl	0 <flatcc_verify_field>
    1fc0:	str	r0, [fp, #-8]
    1fc4:	ldr	r3, [fp, #-8]
    1fc8:	cmp	r3, #0
    1fcc:	beq	1fd8 <MyGame_Example_Stat_verify_table+0x64>
    1fd0:	ldr	r3, [fp, #-8]
    1fd4:	b	2008 <MyGame_Example_Stat_verify_table+0x94>
    1fd8:	mov	r3, #2
    1fdc:	mov	r2, #2
    1fe0:	mov	r1, #2
    1fe4:	ldr	r0, [fp, #-16]
    1fe8:	bl	0 <flatcc_verify_field>
    1fec:	str	r0, [fp, #-8]
    1ff0:	ldr	r3, [fp, #-8]
    1ff4:	cmp	r3, #0
    1ff8:	beq	2004 <MyGame_Example_Stat_verify_table+0x90>
    1ffc:	ldr	r3, [fp, #-8]
    2000:	b	2008 <MyGame_Example_Stat_verify_table+0x94>
    2004:	mov	r3, #0
    2008:	mov	r0, r3
    200c:	sub	sp, fp, #4
    2010:	pop	{fp, pc}

00002014 <MyGame_Example_Alt_verify_table>:
    2014:	push	{fp, lr}
    2018:	add	fp, sp, #4
    201c:	sub	sp, sp, #16
    2020:	str	r0, [fp, #-16]
    2024:	ldr	r3, [pc, #140]	; 20b8 <MyGame_Example_Alt_verify_table+0xa4>
    2028:	mov	r2, #0
    202c:	mov	r1, #0
    2030:	ldr	r0, [fp, #-16]
    2034:	bl	0 <flatcc_verify_table_field>
    2038:	str	r0, [fp, #-8]
    203c:	ldr	r3, [fp, #-8]
    2040:	cmp	r3, #0
    2044:	beq	2050 <MyGame_Example_Alt_verify_table+0x3c>
    2048:	ldr	r3, [fp, #-8]
    204c:	b	20ac <MyGame_Example_Alt_verify_table+0x98>
    2050:	ldr	r3, [pc, #100]	; 20bc <MyGame_Example_Alt_verify_table+0xa8>
    2054:	mov	r2, #0
    2058:	mov	r1, #1
    205c:	ldr	r0, [fp, #-16]
    2060:	bl	0 <flatcc_verify_table_field>
    2064:	str	r0, [fp, #-8]
    2068:	ldr	r3, [fp, #-8]
    206c:	cmp	r3, #0
    2070:	beq	207c <MyGame_Example_Alt_verify_table+0x68>
    2074:	ldr	r3, [fp, #-8]
    2078:	b	20ac <MyGame_Example_Alt_verify_table+0x98>
    207c:	ldr	r3, [pc, #60]	; 20c0 <MyGame_Example_Alt_verify_table+0xac>
    2080:	mov	r2, #0
    2084:	mov	r1, #3
    2088:	ldr	r0, [fp, #-16]
    208c:	bl	0 <flatcc_verify_union_vector_field>
    2090:	str	r0, [fp, #-8]
    2094:	ldr	r3, [fp, #-8]
    2098:	cmp	r3, #0
    209c:	beq	20a8 <MyGame_Example_Alt_verify_table+0x94>
    20a0:	ldr	r3, [fp, #-8]
    20a4:	b	20ac <MyGame_Example_Alt_verify_table+0x98>
    20a8:	mov	r3, #0
    20ac:	mov	r0, r3
    20b0:	sub	sp, fp, #4
    20b4:	pop	{fp, pc}
	...

000020c4 <MyGame_Example_TestJSONPrefix_verify_table>:
    20c4:	push	{fp, lr}
    20c8:	add	fp, sp, #4
    20cc:	sub	sp, sp, #16
    20d0:	str	r0, [fp, #-16]
    20d4:	ldr	r3, [pc, #140]	; 2168 <MyGame_Example_TestJSONPrefix_verify_table+0xa4>
    20d8:	mov	r2, #0
    20dc:	mov	r1, #0
    20e0:	ldr	r0, [fp, #-16]
    20e4:	bl	0 <flatcc_verify_table_field>
    20e8:	str	r0, [fp, #-8]
    20ec:	ldr	r3, [fp, #-8]
    20f0:	cmp	r3, #0
    20f4:	beq	2100 <MyGame_Example_TestJSONPrefix_verify_table+0x3c>
    20f8:	ldr	r3, [fp, #-8]
    20fc:	b	215c <MyGame_Example_TestJSONPrefix_verify_table+0x98>
    2100:	ldr	r3, [pc, #100]	; 216c <MyGame_Example_TestJSONPrefix_verify_table+0xa8>
    2104:	mov	r2, #0
    2108:	mov	r1, #1
    210c:	ldr	r0, [fp, #-16]
    2110:	bl	0 <flatcc_verify_table_field>
    2114:	str	r0, [fp, #-8]
    2118:	ldr	r3, [fp, #-8]
    211c:	cmp	r3, #0
    2120:	beq	212c <MyGame_Example_TestJSONPrefix_verify_table+0x68>
    2124:	ldr	r3, [fp, #-8]
    2128:	b	215c <MyGame_Example_TestJSONPrefix_verify_table+0x98>
    212c:	ldr	r3, [pc, #60]	; 2170 <MyGame_Example_TestJSONPrefix_verify_table+0xac>
    2130:	mov	r2, #0
    2134:	mov	r1, #2
    2138:	ldr	r0, [fp, #-16]
    213c:	bl	0 <flatcc_verify_table_field>
    2140:	str	r0, [fp, #-8]
    2144:	ldr	r3, [fp, #-8]
    2148:	cmp	r3, #0
    214c:	beq	2158 <MyGame_Example_TestJSONPrefix_verify_table+0x94>
    2150:	ldr	r3, [fp, #-8]
    2154:	b	215c <MyGame_Example_TestJSONPrefix_verify_table+0x98>
    2158:	mov	r3, #0
    215c:	mov	r0, r3
    2160:	sub	sp, fp, #4
    2164:	pop	{fp, pc}
	...

00002174 <MyGame_Example_TestJSONPrefixParsing_verify_table>:
    2174:	push	{fp, lr}
    2178:	add	fp, sp, #4
    217c:	sub	sp, sp, #16
    2180:	str	r0, [fp, #-16]
    2184:	mov	r2, #0
    2188:	mov	r1, #0
    218c:	ldr	r0, [fp, #-16]
    2190:	bl	0 <flatcc_verify_string_field>
    2194:	str	r0, [fp, #-8]
    2198:	ldr	r3, [fp, #-8]
    219c:	cmp	r3, #0
    21a0:	beq	21ac <MyGame_Example_TestJSONPrefixParsing_verify_table+0x38>
    21a4:	ldr	r3, [fp, #-8]
    21a8:	b	2308 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x194>
    21ac:	mov	r3, #4
    21b0:	mov	r2, #4
    21b4:	mov	r1, #1
    21b8:	ldr	r0, [fp, #-16]
    21bc:	bl	0 <flatcc_verify_field>
    21c0:	str	r0, [fp, #-8]
    21c4:	ldr	r3, [fp, #-8]
    21c8:	cmp	r3, #0
    21cc:	beq	21d8 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x64>
    21d0:	ldr	r3, [fp, #-8]
    21d4:	b	2308 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x194>
    21d8:	mov	r2, #0
    21dc:	mov	r1, #2
    21e0:	ldr	r0, [fp, #-16]
    21e4:	bl	0 <flatcc_verify_string_field>
    21e8:	str	r0, [fp, #-8]
    21ec:	ldr	r3, [fp, #-8]
    21f0:	cmp	r3, #0
    21f4:	beq	2200 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x8c>
    21f8:	ldr	r3, [fp, #-8]
    21fc:	b	2308 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x194>
    2200:	mov	r3, #8
    2204:	mov	r2, #8
    2208:	mov	r1, #3
    220c:	ldr	r0, [fp, #-16]
    2210:	bl	0 <flatcc_verify_field>
    2214:	str	r0, [fp, #-8]
    2218:	ldr	r3, [fp, #-8]
    221c:	cmp	r3, #0
    2220:	beq	222c <MyGame_Example_TestJSONPrefixParsing_verify_table+0xb8>
    2224:	ldr	r3, [fp, #-8]
    2228:	b	2308 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x194>
    222c:	mov	r2, #0
    2230:	mov	r1, #4
    2234:	ldr	r0, [fp, #-16]
    2238:	bl	0 <flatcc_verify_string_field>
    223c:	str	r0, [fp, #-8]
    2240:	ldr	r3, [fp, #-8]
    2244:	cmp	r3, #0
    2248:	beq	2254 <MyGame_Example_TestJSONPrefixParsing_verify_table+0xe0>
    224c:	ldr	r3, [fp, #-8]
    2250:	b	2308 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x194>
    2254:	mov	r3, #8
    2258:	mov	r2, #8
    225c:	mov	r1, #5
    2260:	ldr	r0, [fp, #-16]
    2264:	bl	0 <flatcc_verify_field>
    2268:	str	r0, [fp, #-8]
    226c:	ldr	r3, [fp, #-8]
    2270:	cmp	r3, #0
    2274:	beq	2280 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x10c>
    2278:	ldr	r3, [fp, #-8]
    227c:	b	2308 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x194>
    2280:	mov	r3, #4
    2284:	mov	r2, #4
    2288:	mov	r1, #6
    228c:	ldr	r0, [fp, #-16]
    2290:	bl	0 <flatcc_verify_field>
    2294:	str	r0, [fp, #-8]
    2298:	ldr	r3, [fp, #-8]
    229c:	cmp	r3, #0
    22a0:	beq	22ac <MyGame_Example_TestJSONPrefixParsing_verify_table+0x138>
    22a4:	ldr	r3, [fp, #-8]
    22a8:	b	2308 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x194>
    22ac:	mov	r3, #8
    22b0:	mov	r2, #8
    22b4:	mov	r1, #7
    22b8:	ldr	r0, [fp, #-16]
    22bc:	bl	0 <flatcc_verify_field>
    22c0:	str	r0, [fp, #-8]
    22c4:	ldr	r3, [fp, #-8]
    22c8:	cmp	r3, #0
    22cc:	beq	22d8 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x164>
    22d0:	ldr	r3, [fp, #-8]
    22d4:	b	2308 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x194>
    22d8:	mov	r3, #4
    22dc:	mov	r2, #4
    22e0:	mov	r1, #8
    22e4:	ldr	r0, [fp, #-16]
    22e8:	bl	0 <flatcc_verify_field>
    22ec:	str	r0, [fp, #-8]
    22f0:	ldr	r3, [fp, #-8]
    22f4:	cmp	r3, #0
    22f8:	beq	2304 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x190>
    22fc:	ldr	r3, [fp, #-8]
    2300:	b	2308 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x194>
    2304:	mov	r3, #0
    2308:	mov	r0, r3
    230c:	sub	sp, fp, #4
    2310:	pop	{fp, pc}

00002314 <MyGame_Example_TestJSONPrefixParsing2_verify_table>:
    2314:	push	{fp, lr}
    2318:	add	fp, sp, #4
    231c:	sub	sp, sp, #16
    2320:	str	r0, [fp, #-16]
    2324:	mov	r3, #8
    2328:	mov	r2, #8
    232c:	mov	r1, #0
    2330:	ldr	r0, [fp, #-16]
    2334:	bl	0 <flatcc_verify_field>
    2338:	str	r0, [fp, #-8]
    233c:	ldr	r3, [fp, #-8]
    2340:	cmp	r3, #0
    2344:	beq	2350 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x3c>
    2348:	ldr	r3, [fp, #-8]
    234c:	b	2380 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x6c>
    2350:	mov	r3, #4
    2354:	mov	r2, #4
    2358:	mov	r1, #1
    235c:	ldr	r0, [fp, #-16]
    2360:	bl	0 <flatcc_verify_field>
    2364:	str	r0, [fp, #-8]
    2368:	ldr	r3, [fp, #-8]
    236c:	cmp	r3, #0
    2370:	beq	237c <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x68>
    2374:	ldr	r3, [fp, #-8]
    2378:	b	2380 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x6c>
    237c:	mov	r3, #0
    2380:	mov	r0, r3
    2384:	sub	sp, fp, #4
    2388:	pop	{fp, pc}

0000238c <MyGame_Example_TestJSONPrefixParsing3_verify_table>:
    238c:	push	{fp, lr}
    2390:	add	fp, sp, #4
    2394:	sub	sp, sp, #16
    2398:	str	r0, [fp, #-16]
    239c:	mov	r3, #8
    23a0:	mov	r2, #8
    23a4:	mov	r1, #0
    23a8:	ldr	r0, [fp, #-16]
    23ac:	bl	0 <flatcc_verify_field>
    23b0:	str	r0, [fp, #-8]
    23b4:	ldr	r3, [fp, #-8]
    23b8:	cmp	r3, #0
    23bc:	beq	23c8 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x3c>
    23c0:	ldr	r3, [fp, #-8]
    23c4:	b	23f8 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x6c>
    23c8:	mov	r3, #4
    23cc:	mov	r2, #4
    23d0:	mov	r1, #1
    23d4:	ldr	r0, [fp, #-16]
    23d8:	bl	0 <flatcc_verify_field>
    23dc:	str	r0, [fp, #-8]
    23e0:	ldr	r3, [fp, #-8]
    23e4:	cmp	r3, #0
    23e8:	beq	23f4 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x68>
    23ec:	ldr	r3, [fp, #-8]
    23f0:	b	23f8 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x6c>
    23f4:	mov	r3, #0
    23f8:	mov	r0, r3
    23fc:	sub	sp, fp, #4
    2400:	pop	{fp, pc}

00002404 <MyGame_Example_TestBase64_verify_table>:
    2404:	push	{fp, lr}
    2408:	add	fp, sp, #4
    240c:	sub	sp, sp, #24
    2410:	str	r0, [fp, #-16]
    2414:	mvn	r3, #0
    2418:	str	r3, [sp, #4]
    241c:	mov	r3, #1
    2420:	str	r3, [sp]
    2424:	mov	r3, #1
    2428:	mov	r2, #0
    242c:	mov	r1, #0
    2430:	ldr	r0, [fp, #-16]
    2434:	bl	0 <flatcc_verify_vector_field>
    2438:	str	r0, [fp, #-8]
    243c:	ldr	r3, [fp, #-8]
    2440:	cmp	r3, #0
    2444:	beq	2450 <MyGame_Example_TestBase64_verify_table+0x4c>
    2448:	ldr	r3, [fp, #-8]
    244c:	b	24cc <MyGame_Example_TestBase64_verify_table+0xc8>
    2450:	mvn	r3, #0
    2454:	str	r3, [sp, #4]
    2458:	mov	r3, #1
    245c:	str	r3, [sp]
    2460:	mov	r3, #1
    2464:	mov	r2, #0
    2468:	mov	r1, #1
    246c:	ldr	r0, [fp, #-16]
    2470:	bl	0 <flatcc_verify_vector_field>
    2474:	str	r0, [fp, #-8]
    2478:	ldr	r3, [fp, #-8]
    247c:	cmp	r3, #0
    2480:	beq	248c <MyGame_Example_TestBase64_verify_table+0x88>
    2484:	ldr	r3, [fp, #-8]
    2488:	b	24cc <MyGame_Example_TestBase64_verify_table+0xc8>
    248c:	ldr	r3, [pc, #68]	; 24d8 <MyGame_Example_TestBase64_verify_table+0xd4>
    2490:	str	r3, [sp, #4]
    2494:	mov	r3, #1
    2498:	str	r3, [sp]
    249c:	mov	r3, #0
    24a0:	mov	r2, #0
    24a4:	mov	r1, #2
    24a8:	ldr	r0, [fp, #-16]
    24ac:	bl	0 <flatcc_verify_table_as_nested_root>
    24b0:	str	r0, [fp, #-8]
    24b4:	ldr	r3, [fp, #-8]
    24b8:	cmp	r3, #0
    24bc:	beq	24c8 <MyGame_Example_TestBase64_verify_table+0xc4>
    24c0:	ldr	r3, [fp, #-8]
    24c4:	b	24cc <MyGame_Example_TestBase64_verify_table+0xc8>
    24c8:	mov	r3, #0
    24cc:	mov	r0, r3
    24d0:	sub	sp, fp, #4
    24d4:	pop	{fp, pc}
    24d8:	.word	0x00000000

000024dc <MyGame_Example_Monster_verify_table>:
    24dc:	push	{fp, lr}
    24e0:	add	fp, sp, #4
    24e4:	sub	sp, sp, #24
    24e8:	str	r0, [fp, #-16]
    24ec:	mov	r3, #16
    24f0:	mov	r2, #32
    24f4:	mov	r1, #0
    24f8:	ldr	r0, [fp, #-16]
    24fc:	bl	0 <flatcc_verify_field>
    2500:	str	r0, [fp, #-8]
    2504:	ldr	r3, [fp, #-8]
    2508:	cmp	r3, #0
    250c:	beq	2518 <MyGame_Example_Monster_verify_table+0x3c>
    2510:	ldr	r3, [fp, #-8]
    2514:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    2518:	mov	r3, #2
    251c:	mov	r2, #2
    2520:	mov	r1, #2
    2524:	ldr	r0, [fp, #-16]
    2528:	bl	0 <flatcc_verify_field>
    252c:	str	r0, [fp, #-8]
    2530:	ldr	r3, [fp, #-8]
    2534:	cmp	r3, #0
    2538:	beq	2544 <MyGame_Example_Monster_verify_table+0x68>
    253c:	ldr	r3, [fp, #-8]
    2540:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    2544:	mov	r3, #2
    2548:	mov	r2, #2
    254c:	mov	r1, #1
    2550:	ldr	r0, [fp, #-16]
    2554:	bl	0 <flatcc_verify_field>
    2558:	str	r0, [fp, #-8]
    255c:	ldr	r3, [fp, #-8]
    2560:	cmp	r3, #0
    2564:	beq	2570 <MyGame_Example_Monster_verify_table+0x94>
    2568:	ldr	r3, [fp, #-8]
    256c:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    2570:	mov	r2, #1
    2574:	mov	r1, #3
    2578:	ldr	r0, [fp, #-16]
    257c:	bl	0 <flatcc_verify_string_field>
    2580:	str	r0, [fp, #-8]
    2584:	ldr	r3, [fp, #-8]
    2588:	cmp	r3, #0
    258c:	beq	2598 <MyGame_Example_Monster_verify_table+0xbc>
    2590:	ldr	r3, [fp, #-8]
    2594:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    2598:	mov	r3, #1
    259c:	mov	r2, #1
    25a0:	mov	r1, #6
    25a4:	ldr	r0, [fp, #-16]
    25a8:	bl	0 <flatcc_verify_field>
    25ac:	str	r0, [fp, #-8]
    25b0:	ldr	r3, [fp, #-8]
    25b4:	cmp	r3, #0
    25b8:	beq	25c4 <MyGame_Example_Monster_verify_table+0xe8>
    25bc:	ldr	r3, [fp, #-8]
    25c0:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    25c4:	mvn	r3, #0
    25c8:	str	r3, [sp, #4]
    25cc:	mov	r3, #1
    25d0:	str	r3, [sp]
    25d4:	mov	r3, #1
    25d8:	mov	r2, #0
    25dc:	mov	r1, #5
    25e0:	ldr	r0, [fp, #-16]
    25e4:	bl	0 <flatcc_verify_vector_field>
    25e8:	str	r0, [fp, #-8]
    25ec:	ldr	r3, [fp, #-8]
    25f0:	cmp	r3, #0
    25f4:	beq	2600 <MyGame_Example_Monster_verify_table+0x124>
    25f8:	ldr	r3, [fp, #-8]
    25fc:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    2600:	ldr	r3, [pc, #1360]	; 2b58 <MyGame_Example_Monster_verify_table+0x67c>
    2604:	mov	r2, #0
    2608:	mov	r1, #11
    260c:	ldr	r0, [fp, #-16]
    2610:	bl	0 <flatcc_verify_table_vector_field>
    2614:	str	r0, [fp, #-8]
    2618:	ldr	r3, [fp, #-8]
    261c:	cmp	r3, #0
    2620:	beq	262c <MyGame_Example_Monster_verify_table+0x150>
    2624:	ldr	r3, [fp, #-8]
    2628:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    262c:	mov	r2, #0
    2630:	mov	r1, #10
    2634:	ldr	r0, [fp, #-16]
    2638:	bl	0 <flatcc_verify_string_vector_field>
    263c:	str	r0, [fp, #-8]
    2640:	ldr	r3, [fp, #-8]
    2644:	cmp	r3, #0
    2648:	beq	2654 <MyGame_Example_Monster_verify_table+0x178>
    264c:	ldr	r3, [fp, #-8]
    2650:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    2654:	mov	r2, #0
    2658:	mov	r1, #28
    265c:	ldr	r0, [fp, #-16]
    2660:	bl	0 <flatcc_verify_string_vector_field>
    2664:	str	r0, [fp, #-8]
    2668:	ldr	r3, [fp, #-8]
    266c:	cmp	r3, #0
    2670:	beq	267c <MyGame_Example_Monster_verify_table+0x1a0>
    2674:	ldr	r3, [fp, #-8]
    2678:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    267c:	mvn	r3, #0
    2680:	str	r3, [sp, #4]
    2684:	mov	r3, #1
    2688:	str	r3, [sp]
    268c:	mov	r3, #1
    2690:	mov	r2, #0
    2694:	mov	r1, #24
    2698:	ldr	r0, [fp, #-16]
    269c:	bl	0 <flatcc_verify_vector_field>
    26a0:	str	r0, [fp, #-8]
    26a4:	ldr	r3, [fp, #-8]
    26a8:	cmp	r3, #0
    26ac:	beq	26b8 <MyGame_Example_Monster_verify_table+0x1dc>
    26b0:	ldr	r3, [fp, #-8]
    26b4:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    26b8:	mvn	r3, #-536870912	; 0xe0000000
    26bc:	str	r3, [sp, #4]
    26c0:	mov	r3, #4
    26c4:	str	r3, [sp]
    26c8:	mov	r3, #8
    26cc:	mov	r2, #0
    26d0:	mov	r1, #29
    26d4:	ldr	r0, [fp, #-16]
    26d8:	bl	0 <flatcc_verify_vector_field>
    26dc:	str	r0, [fp, #-8]
    26e0:	ldr	r3, [fp, #-8]
    26e4:	cmp	r3, #0
    26e8:	beq	26f4 <MyGame_Example_Monster_verify_table+0x218>
    26ec:	ldr	r3, [fp, #-8]
    26f0:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    26f4:	ldr	r3, [pc, #1116]	; 2b58 <MyGame_Example_Monster_verify_table+0x67c>
    26f8:	mov	r2, #0
    26fc:	mov	r1, #12
    2700:	ldr	r0, [fp, #-16]
    2704:	bl	0 <flatcc_verify_table_field>
    2708:	str	r0, [fp, #-8]
    270c:	ldr	r3, [fp, #-8]
    2710:	cmp	r3, #0
    2714:	beq	2720 <MyGame_Example_Monster_verify_table+0x244>
    2718:	ldr	r3, [fp, #-8]
    271c:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    2720:	ldr	r3, [pc, #1076]	; 2b5c <MyGame_Example_Monster_verify_table+0x680>
    2724:	mov	r2, #0
    2728:	mov	r1, #8
    272c:	ldr	r0, [fp, #-16]
    2730:	bl	0 <flatcc_verify_union_field>
    2734:	str	r0, [fp, #-8]
    2738:	ldr	r3, [fp, #-8]
    273c:	cmp	r3, #0
    2740:	beq	274c <MyGame_Example_Monster_verify_table+0x270>
    2744:	ldr	r3, [fp, #-8]
    2748:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    274c:	mvn	r3, #-1073741824	; 0xc0000000
    2750:	str	r3, [sp, #4]
    2754:	mov	r3, #2
    2758:	str	r3, [sp]
    275c:	mov	r3, #4
    2760:	mov	r2, #0
    2764:	mov	r1, #9
    2768:	ldr	r0, [fp, #-16]
    276c:	bl	0 <flatcc_verify_vector_field>
    2770:	str	r0, [fp, #-8]
    2774:	ldr	r3, [fp, #-8]
    2778:	cmp	r3, #0
    277c:	beq	2788 <MyGame_Example_Monster_verify_table+0x2ac>
    2780:	ldr	r3, [fp, #-8]
    2784:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    2788:	mvn	r3, #-1073741824	; 0xc0000000
    278c:	str	r3, [sp, #4]
    2790:	mov	r3, #2
    2794:	str	r3, [sp]
    2798:	mov	r3, #4
    279c:	mov	r2, #0
    27a0:	mov	r1, #31
    27a4:	ldr	r0, [fp, #-16]
    27a8:	bl	0 <flatcc_verify_vector_field>
    27ac:	str	r0, [fp, #-8]
    27b0:	ldr	r3, [fp, #-8]
    27b4:	cmp	r3, #0
    27b8:	beq	27c4 <MyGame_Example_Monster_verify_table+0x2e8>
    27bc:	ldr	r3, [fp, #-8]
    27c0:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    27c4:	ldr	r3, [pc, #908]	; 2b58 <MyGame_Example_Monster_verify_table+0x67c>
    27c8:	str	r3, [sp, #4]
    27cc:	mov	r3, #1
    27d0:	str	r3, [sp]
    27d4:	mov	r3, #0
    27d8:	mov	r2, #0
    27dc:	mov	r1, #13
    27e0:	ldr	r0, [fp, #-16]
    27e4:	bl	0 <flatcc_verify_table_as_nested_root>
    27e8:	str	r0, [fp, #-8]
    27ec:	ldr	r3, [fp, #-8]
    27f0:	cmp	r3, #0
    27f4:	beq	2800 <MyGame_Example_Monster_verify_table+0x324>
    27f8:	ldr	r3, [fp, #-8]
    27fc:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    2800:	ldr	r3, [pc, #856]	; 2b60 <MyGame_Example_Monster_verify_table+0x684>
    2804:	mov	r2, #0
    2808:	mov	r1, #14
    280c:	ldr	r0, [fp, #-16]
    2810:	bl	0 <flatcc_verify_table_field>
    2814:	str	r0, [fp, #-8]
    2818:	ldr	r3, [fp, #-8]
    281c:	cmp	r3, #0
    2820:	beq	282c <MyGame_Example_Monster_verify_table+0x350>
    2824:	ldr	r3, [fp, #-8]
    2828:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    282c:	mov	r3, #1
    2830:	mov	r2, #1
    2834:	mov	r1, #15
    2838:	ldr	r0, [fp, #-16]
    283c:	bl	0 <flatcc_verify_field>
    2840:	str	r0, [fp, #-8]
    2844:	ldr	r3, [fp, #-8]
    2848:	cmp	r3, #0
    284c:	beq	2858 <MyGame_Example_Monster_verify_table+0x37c>
    2850:	ldr	r3, [fp, #-8]
    2854:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    2858:	mov	r3, #4
    285c:	mov	r2, #4
    2860:	mov	r1, #16
    2864:	ldr	r0, [fp, #-16]
    2868:	bl	0 <flatcc_verify_field>
    286c:	str	r0, [fp, #-8]
    2870:	ldr	r3, [fp, #-8]
    2874:	cmp	r3, #0
    2878:	beq	2884 <MyGame_Example_Monster_verify_table+0x3a8>
    287c:	ldr	r3, [fp, #-8]
    2880:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    2884:	mov	r3, #4
    2888:	mov	r2, #4
    288c:	mov	r1, #17
    2890:	ldr	r0, [fp, #-16]
    2894:	bl	0 <flatcc_verify_field>
    2898:	str	r0, [fp, #-8]
    289c:	ldr	r3, [fp, #-8]
    28a0:	cmp	r3, #0
    28a4:	beq	28b0 <MyGame_Example_Monster_verify_table+0x3d4>
    28a8:	ldr	r3, [fp, #-8]
    28ac:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    28b0:	mov	r3, #8
    28b4:	mov	r2, #8
    28b8:	mov	r1, #18
    28bc:	ldr	r0, [fp, #-16]
    28c0:	bl	0 <flatcc_verify_field>
    28c4:	str	r0, [fp, #-8]
    28c8:	ldr	r3, [fp, #-8]
    28cc:	cmp	r3, #0
    28d0:	beq	28dc <MyGame_Example_Monster_verify_table+0x400>
    28d4:	ldr	r3, [fp, #-8]
    28d8:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    28dc:	mov	r3, #8
    28e0:	mov	r2, #8
    28e4:	mov	r1, #19
    28e8:	ldr	r0, [fp, #-16]
    28ec:	bl	0 <flatcc_verify_field>
    28f0:	str	r0, [fp, #-8]
    28f4:	ldr	r3, [fp, #-8]
    28f8:	cmp	r3, #0
    28fc:	beq	2908 <MyGame_Example_Monster_verify_table+0x42c>
    2900:	ldr	r3, [fp, #-8]
    2904:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    2908:	mov	r3, #4
    290c:	mov	r2, #4
    2910:	mov	r1, #20
    2914:	ldr	r0, [fp, #-16]
    2918:	bl	0 <flatcc_verify_field>
    291c:	str	r0, [fp, #-8]
    2920:	ldr	r3, [fp, #-8]
    2924:	cmp	r3, #0
    2928:	beq	2934 <MyGame_Example_Monster_verify_table+0x458>
    292c:	ldr	r3, [fp, #-8]
    2930:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    2934:	mov	r3, #4
    2938:	mov	r2, #4
    293c:	mov	r1, #21
    2940:	ldr	r0, [fp, #-16]
    2944:	bl	0 <flatcc_verify_field>
    2948:	str	r0, [fp, #-8]
    294c:	ldr	r3, [fp, #-8]
    2950:	cmp	r3, #0
    2954:	beq	2960 <MyGame_Example_Monster_verify_table+0x484>
    2958:	ldr	r3, [fp, #-8]
    295c:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    2960:	mov	r3, #8
    2964:	mov	r2, #8
    2968:	mov	r1, #22
    296c:	ldr	r0, [fp, #-16]
    2970:	bl	0 <flatcc_verify_field>
    2974:	str	r0, [fp, #-8]
    2978:	ldr	r3, [fp, #-8]
    297c:	cmp	r3, #0
    2980:	beq	298c <MyGame_Example_Monster_verify_table+0x4b0>
    2984:	ldr	r3, [fp, #-8]
    2988:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    298c:	mov	r3, #8
    2990:	mov	r2, #8
    2994:	mov	r1, #23
    2998:	ldr	r0, [fp, #-16]
    299c:	bl	0 <flatcc_verify_field>
    29a0:	str	r0, [fp, #-8]
    29a4:	ldr	r3, [fp, #-8]
    29a8:	cmp	r3, #0
    29ac:	beq	29b8 <MyGame_Example_Monster_verify_table+0x4dc>
    29b0:	ldr	r3, [fp, #-8]
    29b4:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    29b8:	mov	r3, #4
    29bc:	mov	r2, #4
    29c0:	mov	r1, #25
    29c4:	ldr	r0, [fp, #-16]
    29c8:	bl	0 <flatcc_verify_field>
    29cc:	str	r0, [fp, #-8]
    29d0:	ldr	r3, [fp, #-8]
    29d4:	cmp	r3, #0
    29d8:	beq	29e4 <MyGame_Example_Monster_verify_table+0x508>
    29dc:	ldr	r3, [fp, #-8]
    29e0:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    29e4:	mov	r3, #4
    29e8:	mov	r2, #4
    29ec:	mov	r1, #26
    29f0:	ldr	r0, [fp, #-16]
    29f4:	bl	0 <flatcc_verify_field>
    29f8:	str	r0, [fp, #-8]
    29fc:	ldr	r3, [fp, #-8]
    2a00:	cmp	r3, #0
    2a04:	beq	2a10 <MyGame_Example_Monster_verify_table+0x534>
    2a08:	ldr	r3, [fp, #-8]
    2a0c:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    2a10:	mov	r3, #4
    2a14:	mov	r2, #4
    2a18:	mov	r1, #27
    2a1c:	ldr	r0, [fp, #-16]
    2a20:	bl	0 <flatcc_verify_field>
    2a24:	str	r0, [fp, #-8]
    2a28:	ldr	r3, [fp, #-8]
    2a2c:	cmp	r3, #0
    2a30:	beq	2a3c <MyGame_Example_Monster_verify_table+0x560>
    2a34:	ldr	r3, [fp, #-8]
    2a38:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    2a3c:	mvn	r3, #0
    2a40:	str	r3, [sp, #4]
    2a44:	mov	r3, #1
    2a48:	str	r3, [sp]
    2a4c:	mov	r3, #1
    2a50:	mov	r2, #0
    2a54:	mov	r1, #30
    2a58:	ldr	r0, [fp, #-16]
    2a5c:	bl	0 <flatcc_verify_vector_field>
    2a60:	str	r0, [fp, #-8]
    2a64:	ldr	r3, [fp, #-8]
    2a68:	cmp	r3, #0
    2a6c:	beq	2a78 <MyGame_Example_Monster_verify_table+0x59c>
    2a70:	ldr	r3, [fp, #-8]
    2a74:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    2a78:	mvn	r3, #-536870912	; 0xe0000000
    2a7c:	str	r3, [sp, #4]
    2a80:	mov	r3, #8
    2a84:	str	r3, [sp]
    2a88:	mov	r3, #8
    2a8c:	mov	r2, #0
    2a90:	mov	r1, #32
    2a94:	ldr	r0, [fp, #-16]
    2a98:	bl	0 <flatcc_verify_vector_field>
    2a9c:	str	r0, [fp, #-8]
    2aa0:	ldr	r3, [fp, #-8]
    2aa4:	cmp	r3, #0
    2aa8:	beq	2ab4 <MyGame_Example_Monster_verify_table+0x5d8>
    2aac:	ldr	r3, [fp, #-8]
    2ab0:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    2ab4:	mvn	r3, #-536870912	; 0xe0000000
    2ab8:	str	r3, [sp, #4]
    2abc:	mov	r3, #8
    2ac0:	str	r3, [sp]
    2ac4:	mov	r3, #8
    2ac8:	mov	r2, #0
    2acc:	mov	r1, #33	; 0x21
    2ad0:	ldr	r0, [fp, #-16]
    2ad4:	bl	0 <flatcc_verify_vector_field>
    2ad8:	str	r0, [fp, #-8]
    2adc:	ldr	r3, [fp, #-8]
    2ae0:	cmp	r3, #0
    2ae4:	beq	2af0 <MyGame_Example_Monster_verify_table+0x614>
    2ae8:	ldr	r3, [fp, #-8]
    2aec:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    2af0:	ldr	r3, [pc, #108]	; 2b64 <MyGame_Example_Monster_verify_table+0x688>
    2af4:	mov	r2, #0
    2af8:	mov	r1, #34	; 0x22
    2afc:	ldr	r0, [fp, #-16]
    2b00:	bl	0 <flatcc_verify_table_field>
    2b04:	str	r0, [fp, #-8]
    2b08:	ldr	r3, [fp, #-8]
    2b0c:	cmp	r3, #0
    2b10:	beq	2b1c <MyGame_Example_Monster_verify_table+0x640>
    2b14:	ldr	r3, [fp, #-8]
    2b18:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    2b1c:	ldr	r3, [pc, #68]	; 2b68 <MyGame_Example_Monster_verify_table+0x68c>
    2b20:	mov	r2, #0
    2b24:	mov	r1, #35	; 0x23
    2b28:	ldr	r0, [fp, #-16]
    2b2c:	bl	0 <flatcc_verify_table_field>
    2b30:	str	r0, [fp, #-8]
    2b34:	ldr	r3, [fp, #-8]
    2b38:	cmp	r3, #0
    2b3c:	beq	2b48 <MyGame_Example_Monster_verify_table+0x66c>
    2b40:	ldr	r3, [fp, #-8]
    2b44:	b	2b4c <MyGame_Example_Monster_verify_table+0x670>
    2b48:	mov	r3, #0
    2b4c:	mov	r0, r3
    2b50:	sub	sp, fp, #4
    2b54:	pop	{fp, pc}
	...

00002b6c <MyGame_Example_Monster_verify_as_root>:
    2b6c:	push	{fp, lr}
    2b70:	add	fp, sp, #4
    2b74:	sub	sp, sp, #8
    2b78:	str	r0, [fp, #-8]
    2b7c:	str	r1, [fp, #-12]
    2b80:	ldr	r3, [pc, #28]	; 2ba4 <MyGame_Example_Monster_verify_as_root+0x38>
    2b84:	ldr	r2, [pc, #28]	; 2ba8 <MyGame_Example_Monster_verify_as_root+0x3c>
    2b88:	ldr	r1, [fp, #-12]
    2b8c:	ldr	r0, [fp, #-8]
    2b90:	bl	0 <flatcc_verify_table_as_root>
    2b94:	mov	r3, r0
    2b98:	mov	r0, r3
    2b9c:	sub	sp, fp, #4
    2ba0:	pop	{fp, pc}
    2ba4:	.word	0x00000000
    2ba8:	.word	0x0000011c

00002bac <MyGame_Example_Monster_verify_as_root_with_identifier>:
    2bac:	push	{fp, lr}
    2bb0:	add	fp, sp, #4
    2bb4:	sub	sp, sp, #16
    2bb8:	str	r0, [fp, #-8]
    2bbc:	str	r1, [fp, #-12]
    2bc0:	str	r2, [fp, #-16]
    2bc4:	ldr	r3, [pc, #28]	; 2be8 <MyGame_Example_Monster_verify_as_root_with_identifier+0x3c>
    2bc8:	ldr	r2, [fp, #-16]
    2bcc:	ldr	r1, [fp, #-12]
    2bd0:	ldr	r0, [fp, #-8]
    2bd4:	bl	0 <flatcc_verify_table_as_root>
    2bd8:	mov	r3, r0
    2bdc:	mov	r0, r3
    2be0:	sub	sp, fp, #4
    2be4:	pop	{fp, pc}
    2be8:	.word	0x00000000

00002bec <MyGame_Example_TypeAliases_verify_table>:
    2bec:	push	{fp, lr}
    2bf0:	add	fp, sp, #4
    2bf4:	sub	sp, sp, #24
    2bf8:	str	r0, [fp, #-16]
    2bfc:	mov	r3, #1
    2c00:	mov	r2, #1
    2c04:	mov	r1, #0
    2c08:	ldr	r0, [fp, #-16]
    2c0c:	bl	0 <flatcc_verify_field>
    2c10:	str	r0, [fp, #-8]
    2c14:	ldr	r3, [fp, #-8]
    2c18:	cmp	r3, #0
    2c1c:	beq	2c28 <MyGame_Example_TypeAliases_verify_table+0x3c>
    2c20:	ldr	r3, [fp, #-8]
    2c24:	b	2e30 <MyGame_Example_TypeAliases_verify_table+0x244>
    2c28:	mov	r3, #1
    2c2c:	mov	r2, #1
    2c30:	mov	r1, #1
    2c34:	ldr	r0, [fp, #-16]
    2c38:	bl	0 <flatcc_verify_field>
    2c3c:	str	r0, [fp, #-8]
    2c40:	ldr	r3, [fp, #-8]
    2c44:	cmp	r3, #0
    2c48:	beq	2c54 <MyGame_Example_TypeAliases_verify_table+0x68>
    2c4c:	ldr	r3, [fp, #-8]
    2c50:	b	2e30 <MyGame_Example_TypeAliases_verify_table+0x244>
    2c54:	mov	r3, #2
    2c58:	mov	r2, #2
    2c5c:	mov	r1, #2
    2c60:	ldr	r0, [fp, #-16]
    2c64:	bl	0 <flatcc_verify_field>
    2c68:	str	r0, [fp, #-8]
    2c6c:	ldr	r3, [fp, #-8]
    2c70:	cmp	r3, #0
    2c74:	beq	2c80 <MyGame_Example_TypeAliases_verify_table+0x94>
    2c78:	ldr	r3, [fp, #-8]
    2c7c:	b	2e30 <MyGame_Example_TypeAliases_verify_table+0x244>
    2c80:	mov	r3, #2
    2c84:	mov	r2, #2
    2c88:	mov	r1, #3
    2c8c:	ldr	r0, [fp, #-16]
    2c90:	bl	0 <flatcc_verify_field>
    2c94:	str	r0, [fp, #-8]
    2c98:	ldr	r3, [fp, #-8]
    2c9c:	cmp	r3, #0
    2ca0:	beq	2cac <MyGame_Example_TypeAliases_verify_table+0xc0>
    2ca4:	ldr	r3, [fp, #-8]
    2ca8:	b	2e30 <MyGame_Example_TypeAliases_verify_table+0x244>
    2cac:	mov	r3, #4
    2cb0:	mov	r2, #4
    2cb4:	mov	r1, #4
    2cb8:	ldr	r0, [fp, #-16]
    2cbc:	bl	0 <flatcc_verify_field>
    2cc0:	str	r0, [fp, #-8]
    2cc4:	ldr	r3, [fp, #-8]
    2cc8:	cmp	r3, #0
    2ccc:	beq	2cd8 <MyGame_Example_TypeAliases_verify_table+0xec>
    2cd0:	ldr	r3, [fp, #-8]
    2cd4:	b	2e30 <MyGame_Example_TypeAliases_verify_table+0x244>
    2cd8:	mov	r3, #4
    2cdc:	mov	r2, #4
    2ce0:	mov	r1, #5
    2ce4:	ldr	r0, [fp, #-16]
    2ce8:	bl	0 <flatcc_verify_field>
    2cec:	str	r0, [fp, #-8]
    2cf0:	ldr	r3, [fp, #-8]
    2cf4:	cmp	r3, #0
    2cf8:	beq	2d04 <MyGame_Example_TypeAliases_verify_table+0x118>
    2cfc:	ldr	r3, [fp, #-8]
    2d00:	b	2e30 <MyGame_Example_TypeAliases_verify_table+0x244>
    2d04:	mov	r3, #8
    2d08:	mov	r2, #8
    2d0c:	mov	r1, #6
    2d10:	ldr	r0, [fp, #-16]
    2d14:	bl	0 <flatcc_verify_field>
    2d18:	str	r0, [fp, #-8]
    2d1c:	ldr	r3, [fp, #-8]
    2d20:	cmp	r3, #0
    2d24:	beq	2d30 <MyGame_Example_TypeAliases_verify_table+0x144>
    2d28:	ldr	r3, [fp, #-8]
    2d2c:	b	2e30 <MyGame_Example_TypeAliases_verify_table+0x244>
    2d30:	mov	r3, #8
    2d34:	mov	r2, #8
    2d38:	mov	r1, #7
    2d3c:	ldr	r0, [fp, #-16]
    2d40:	bl	0 <flatcc_verify_field>
    2d44:	str	r0, [fp, #-8]
    2d48:	ldr	r3, [fp, #-8]
    2d4c:	cmp	r3, #0
    2d50:	beq	2d5c <MyGame_Example_TypeAliases_verify_table+0x170>
    2d54:	ldr	r3, [fp, #-8]
    2d58:	b	2e30 <MyGame_Example_TypeAliases_verify_table+0x244>
    2d5c:	mov	r3, #4
    2d60:	mov	r2, #4
    2d64:	mov	r1, #8
    2d68:	ldr	r0, [fp, #-16]
    2d6c:	bl	0 <flatcc_verify_field>
    2d70:	str	r0, [fp, #-8]
    2d74:	ldr	r3, [fp, #-8]
    2d78:	cmp	r3, #0
    2d7c:	beq	2d88 <MyGame_Example_TypeAliases_verify_table+0x19c>
    2d80:	ldr	r3, [fp, #-8]
    2d84:	b	2e30 <MyGame_Example_TypeAliases_verify_table+0x244>
    2d88:	mov	r3, #8
    2d8c:	mov	r2, #8
    2d90:	mov	r1, #9
    2d94:	ldr	r0, [fp, #-16]
    2d98:	bl	0 <flatcc_verify_field>
    2d9c:	str	r0, [fp, #-8]
    2da0:	ldr	r3, [fp, #-8]
    2da4:	cmp	r3, #0
    2da8:	beq	2db4 <MyGame_Example_TypeAliases_verify_table+0x1c8>
    2dac:	ldr	r3, [fp, #-8]
    2db0:	b	2e30 <MyGame_Example_TypeAliases_verify_table+0x244>
    2db4:	mvn	r3, #0
    2db8:	str	r3, [sp, #4]
    2dbc:	mov	r3, #1
    2dc0:	str	r3, [sp]
    2dc4:	mov	r3, #1
    2dc8:	mov	r2, #0
    2dcc:	mov	r1, #10
    2dd0:	ldr	r0, [fp, #-16]
    2dd4:	bl	0 <flatcc_verify_vector_field>
    2dd8:	str	r0, [fp, #-8]
    2ddc:	ldr	r3, [fp, #-8]
    2de0:	cmp	r3, #0
    2de4:	beq	2df0 <MyGame_Example_TypeAliases_verify_table+0x204>
    2de8:	ldr	r3, [fp, #-8]
    2dec:	b	2e30 <MyGame_Example_TypeAliases_verify_table+0x244>
    2df0:	mvn	r3, #-536870912	; 0xe0000000
    2df4:	str	r3, [sp, #4]
    2df8:	mov	r3, #8
    2dfc:	str	r3, [sp]
    2e00:	mov	r3, #8
    2e04:	mov	r2, #0
    2e08:	mov	r1, #11
    2e0c:	ldr	r0, [fp, #-16]
    2e10:	bl	0 <flatcc_verify_vector_field>
    2e14:	str	r0, [fp, #-8]
    2e18:	ldr	r3, [fp, #-8]
    2e1c:	cmp	r3, #0
    2e20:	beq	2e2c <MyGame_Example_TypeAliases_verify_table+0x240>
    2e24:	ldr	r3, [fp, #-8]
    2e28:	b	2e30 <MyGame_Example_TypeAliases_verify_table+0x244>
    2e2c:	mov	r3, #0
    2e30:	mov	r0, r3
    2e34:	sub	sp, fp, #4
    2e38:	pop	{fp, pc}

00002e3c <Fantasy_Attacker_verify_table>:
    2e3c:	push	{fp, lr}
    2e40:	add	fp, sp, #4
    2e44:	sub	sp, sp, #16
    2e48:	str	r0, [fp, #-16]
    2e4c:	mov	r3, #4
    2e50:	mov	r2, #4
    2e54:	mov	r1, #0
    2e58:	ldr	r0, [fp, #-16]
    2e5c:	bl	0 <flatcc_verify_field>
    2e60:	str	r0, [fp, #-8]
    2e64:	ldr	r3, [fp, #-8]
    2e68:	cmp	r3, #0
    2e6c:	beq	2e78 <Fantasy_Attacker_verify_table+0x3c>
    2e70:	ldr	r3, [fp, #-8]
    2e74:	b	2e7c <Fantasy_Attacker_verify_table+0x40>
    2e78:	mov	r3, #0
    2e7c:	mov	r0, r3
    2e80:	sub	sp, fp, #4
    2e84:	pop	{fp, pc}

00002e88 <Fantasy_Movie_verify_table>:
    2e88:	push	{fp, lr}
    2e8c:	add	fp, sp, #4
    2e90:	sub	sp, sp, #16
    2e94:	str	r0, [fp, #-16]
    2e98:	ldr	r3, [pc, #228]	; 2f84 <Fantasy_Movie_verify_table+0xfc>
    2e9c:	mov	r2, #0
    2ea0:	mov	r1, #1
    2ea4:	ldr	r0, [fp, #-16]
    2ea8:	bl	0 <flatcc_verify_union_field>
    2eac:	str	r0, [fp, #-8]
    2eb0:	ldr	r3, [fp, #-8]
    2eb4:	cmp	r3, #0
    2eb8:	beq	2ec4 <Fantasy_Movie_verify_table+0x3c>
    2ebc:	ldr	r3, [fp, #-8]
    2ec0:	b	2f78 <Fantasy_Movie_verify_table+0xf0>
    2ec4:	ldr	r3, [pc, #184]	; 2f84 <Fantasy_Movie_verify_table+0xfc>
    2ec8:	mov	r2, #0
    2ecc:	mov	r1, #3
    2ed0:	ldr	r0, [fp, #-16]
    2ed4:	bl	0 <flatcc_verify_union_field>
    2ed8:	str	r0, [fp, #-8]
    2edc:	ldr	r3, [fp, #-8]
    2ee0:	cmp	r3, #0
    2ee4:	beq	2ef0 <Fantasy_Movie_verify_table+0x68>
    2ee8:	ldr	r3, [fp, #-8]
    2eec:	b	2f78 <Fantasy_Movie_verify_table+0xf0>
    2ef0:	ldr	r3, [pc, #140]	; 2f84 <Fantasy_Movie_verify_table+0xfc>
    2ef4:	mov	r2, #0
    2ef8:	mov	r1, #5
    2efc:	ldr	r0, [fp, #-16]
    2f00:	bl	0 <flatcc_verify_union_field>
    2f04:	str	r0, [fp, #-8]
    2f08:	ldr	r3, [fp, #-8]
    2f0c:	cmp	r3, #0
    2f10:	beq	2f1c <Fantasy_Movie_verify_table+0x94>
    2f14:	ldr	r3, [fp, #-8]
    2f18:	b	2f78 <Fantasy_Movie_verify_table+0xf0>
    2f1c:	ldr	r3, [pc, #96]	; 2f84 <Fantasy_Movie_verify_table+0xfc>
    2f20:	mov	r2, #0
    2f24:	mov	r1, #7
    2f28:	ldr	r0, [fp, #-16]
    2f2c:	bl	0 <flatcc_verify_union_field>
    2f30:	str	r0, [fp, #-8]
    2f34:	ldr	r3, [fp, #-8]
    2f38:	cmp	r3, #0
    2f3c:	beq	2f48 <Fantasy_Movie_verify_table+0xc0>
    2f40:	ldr	r3, [fp, #-8]
    2f44:	b	2f78 <Fantasy_Movie_verify_table+0xf0>
    2f48:	ldr	r3, [pc, #52]	; 2f84 <Fantasy_Movie_verify_table+0xfc>
    2f4c:	mov	r2, #0
    2f50:	mov	r1, #9
    2f54:	ldr	r0, [fp, #-16]
    2f58:	bl	0 <flatcc_verify_union_vector_field>
    2f5c:	str	r0, [fp, #-8]
    2f60:	ldr	r3, [fp, #-8]
    2f64:	cmp	r3, #0
    2f68:	beq	2f74 <Fantasy_Movie_verify_table+0xec>
    2f6c:	ldr	r3, [fp, #-8]
    2f70:	b	2f78 <Fantasy_Movie_verify_table+0xf0>
    2f74:	mov	r3, #0
    2f78:	mov	r0, r3
    2f7c:	sub	sp, fp, #4
    2f80:	pop	{fp, pc}
    2f84:	.word	0x00000000

00002f88 <readfile>:
    2f88:	push	{fp, lr}
    2f8c:	add	fp, sp, #4
    2f90:	sub	sp, sp, #40	; 0x28
    2f94:	str	r0, [fp, #-32]	; 0xffffffe0
    2f98:	str	r1, [fp, #-36]	; 0xffffffdc
    2f9c:	str	r2, [fp, #-40]	; 0xffffffd8
    2fa0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    2fa4:	cmp	r3, #0
    2fa8:	bne	2fb4 <readfile+0x2c>
    2fac:	sub	r3, fp, #28
    2fb0:	b	2fb8 <readfile+0x30>
    2fb4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    2fb8:	str	r3, [fp, #-40]	; 0xffffffd8
    2fbc:	ldr	r1, [pc, #388]	; 3148 <readfile+0x1c0>
    2fc0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2fc4:	bl	0 <fopen>
    2fc8:	str	r0, [fp, #-20]	; 0xffffffec
    2fcc:	mov	r3, #0
    2fd0:	str	r3, [fp, #-8]
    2fd4:	mov	r3, #0
    2fd8:	str	r3, [fp, #-16]
    2fdc:	ldr	r3, [fp, #-20]	; 0xffffffec
    2fe0:	cmp	r3, #0
    2fe4:	beq	30e8 <readfile+0x160>
    2fe8:	mov	r2, #2
    2fec:	mov	r1, #0
    2ff0:	ldr	r0, [fp, #-20]	; 0xffffffec
    2ff4:	bl	0 <fseek>
    2ff8:	ldr	r0, [fp, #-20]	; 0xffffffec
    2ffc:	bl	0 <ftell>
    3000:	mov	r3, r0
    3004:	str	r3, [fp, #-8]
    3008:	ldr	r3, [fp, #-40]	; 0xffffffd8
    300c:	ldr	r2, [fp, #-8]
    3010:	str	r2, [r3]
    3014:	ldr	r3, [fp, #-36]	; 0xffffffdc
    3018:	cmp	r3, #0
    301c:	beq	3030 <readfile+0xa8>
    3020:	ldr	r2, [fp, #-8]
    3024:	ldr	r3, [fp, #-36]	; 0xffffffdc
    3028:	cmp	r2, r3
    302c:	bhi	30f0 <readfile+0x168>
    3030:	ldr	r0, [fp, #-20]	; 0xffffffec
    3034:	bl	0 <rewind>
    3038:	ldr	r3, [fp, #-8]
    303c:	cmp	r3, #0
    3040:	beq	304c <readfile+0xc4>
    3044:	ldr	r3, [fp, #-8]
    3048:	b	3050 <readfile+0xc8>
    304c:	mov	r3, #1
    3050:	mov	r0, r3
    3054:	bl	0 <malloc>
    3058:	mov	r3, r0
    305c:	str	r3, [fp, #-16]
    3060:	ldr	r3, [fp, #-16]
    3064:	cmp	r3, #0
    3068:	beq	30f8 <readfile+0x170>
    306c:	mov	r3, #0
    3070:	str	r3, [fp, #-12]
    3074:	b	3088 <readfile+0x100>
    3078:	ldr	r2, [fp, #-12]
    307c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3080:	add	r3, r2, r3
    3084:	str	r3, [fp, #-12]
    3088:	ldr	r2, [fp, #-16]
    308c:	ldr	r3, [fp, #-12]
    3090:	add	r0, r2, r3
    3094:	ldr	r2, [fp, #-8]
    3098:	ldr	r3, [fp, #-12]
    309c:	sub	r2, r2, r3
    30a0:	ldr	r3, [fp, #-20]	; 0xffffffec
    30a4:	mov	r1, #1
    30a8:	bl	0 <fread>
    30ac:	str	r0, [fp, #-24]	; 0xffffffe8
    30b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    30b4:	cmp	r3, #0
    30b8:	bne	3078 <readfile+0xf0>
    30bc:	ldr	r2, [fp, #-12]
    30c0:	ldr	r3, [fp, #-8]
    30c4:	cmp	r2, r3
    30c8:	bne	3100 <readfile+0x178>
    30cc:	ldr	r0, [fp, #-20]	; 0xffffffec
    30d0:	bl	0 <fclose>
    30d4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    30d8:	ldr	r2, [fp, #-8]
    30dc:	str	r2, [r3]
    30e0:	ldr	r3, [fp, #-16]
    30e4:	b	313c <readfile+0x1b4>
    30e8:	nop			; (mov r0, r0)
    30ec:	b	3104 <readfile+0x17c>
    30f0:	nop			; (mov r0, r0)
    30f4:	b	3104 <readfile+0x17c>
    30f8:	nop			; (mov r0, r0)
    30fc:	b	3104 <readfile+0x17c>
    3100:	nop			; (mov r0, r0)
    3104:	ldr	r3, [fp, #-20]	; 0xffffffec
    3108:	cmp	r3, #0
    310c:	beq	3118 <readfile+0x190>
    3110:	ldr	r0, [fp, #-20]	; 0xffffffec
    3114:	bl	0 <fclose>
    3118:	ldr	r3, [fp, #-16]
    311c:	cmp	r3, #0
    3120:	beq	312c <readfile+0x1a4>
    3124:	ldr	r0, [fp, #-16]
    3128:	bl	0 <free>
    312c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3130:	ldr	r2, [fp, #-8]
    3134:	str	r2, [r3]
    3138:	mov	r3, #0
    313c:	mov	r0, r3
    3140:	sub	sp, fp, #4
    3144:	pop	{fp, pc}
    3148:	.word	0x00000170

0000314c <hexdump>:
    314c:	push	{fp, lr}
    3150:	add	fp, sp, #4
    3154:	sub	sp, sp, #48	; 0x30
    3158:	str	r0, [fp, #-40]	; 0xffffffd8
    315c:	str	r1, [fp, #-44]	; 0xffffffd4
    3160:	str	r2, [fp, #-48]	; 0xffffffd0
    3164:	str	r3, [fp, #-52]	; 0xffffffcc
    3168:	ldr	r3, [fp, #-44]	; 0xffffffd4
    316c:	str	r3, [fp, #-12]
    3170:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3174:	cmp	r3, #0
    3178:	beq	318c <hexdump+0x40>
    317c:	ldr	r2, [fp, #-40]	; 0xffffffd8
    3180:	ldr	r1, [pc, #396]	; 3314 <hexdump+0x1c8>
    3184:	ldr	r0, [fp, #-52]	; 0xffffffcc
    3188:	bl	0 <fprintf>
    318c:	mov	r3, #0
    3190:	str	r3, [fp, #-8]
    3194:	b	32b0 <hexdump+0x164>
    3198:	ldr	r3, [fp, #-8]
    319c:	and	r3, r3, #15
    31a0:	cmp	r3, #0
    31a4:	bne	31dc <hexdump+0x90>
    31a8:	ldr	r3, [fp, #-8]
    31ac:	cmp	r3, #0
    31b0:	beq	31c8 <hexdump+0x7c>
    31b4:	sub	r3, fp, #32
    31b8:	mov	r2, r3
    31bc:	ldr	r1, [pc, #340]	; 3318 <hexdump+0x1cc>
    31c0:	ldr	r0, [fp, #-52]	; 0xffffffcc
    31c4:	bl	0 <fprintf>
    31c8:	ldr	r2, [fp, #-8]
    31cc:	ldr	r1, [pc, #328]	; 331c <hexdump+0x1d0>
    31d0:	ldr	r0, [fp, #-52]	; 0xffffffcc
    31d4:	bl	0 <fprintf>
    31d8:	b	31f8 <hexdump+0xac>
    31dc:	ldr	r3, [fp, #-8]
    31e0:	and	r3, r3, #7
    31e4:	cmp	r3, #0
    31e8:	bne	31f8 <hexdump+0xac>
    31ec:	ldr	r1, [fp, #-52]	; 0xffffffcc
    31f0:	mov	r0, #32
    31f4:	bl	0 <fputc>
    31f8:	ldr	r2, [fp, #-12]
    31fc:	ldr	r3, [fp, #-8]
    3200:	add	r3, r2, r3
    3204:	ldrb	r3, [r3]
    3208:	mov	r2, r3
    320c:	ldr	r1, [pc, #268]	; 3320 <hexdump+0x1d4>
    3210:	ldr	r0, [fp, #-52]	; 0xffffffcc
    3214:	bl	0 <fprintf>
    3218:	ldr	r2, [fp, #-12]
    321c:	ldr	r3, [fp, #-8]
    3220:	add	r3, r2, r3
    3224:	ldrb	r3, [r3]
    3228:	cmp	r3, #31
    322c:	bls	3248 <hexdump+0xfc>
    3230:	ldr	r2, [fp, #-12]
    3234:	ldr	r3, [fp, #-8]
    3238:	add	r3, r2, r3
    323c:	ldrb	r3, [r3]
    3240:	cmp	r3, #126	; 0x7e
    3244:	bls	3264 <hexdump+0x118>
    3248:	ldr	r3, [fp, #-8]
    324c:	and	r3, r3, #15
    3250:	sub	r2, fp, #4
    3254:	add	r3, r2, r3
    3258:	mov	r2, #46	; 0x2e
    325c:	strb	r2, [r3, #-28]	; 0xffffffe4
    3260:	b	3288 <hexdump+0x13c>
    3264:	ldr	r3, [fp, #-8]
    3268:	and	r3, r3, #15
    326c:	ldr	r1, [fp, #-12]
    3270:	ldr	r2, [fp, #-8]
    3274:	add	r2, r1, r2
    3278:	ldrb	r2, [r2]
    327c:	sub	r1, fp, #4
    3280:	add	r3, r1, r3
    3284:	strb	r2, [r3, #-28]	; 0xffffffe4
    3288:	ldr	r3, [fp, #-8]
    328c:	and	r3, r3, #15
    3290:	add	r3, r3, #1
    3294:	sub	r2, fp, #4
    3298:	add	r3, r2, r3
    329c:	mov	r2, #0
    32a0:	strb	r2, [r3, #-28]	; 0xffffffe4
    32a4:	ldr	r3, [fp, #-8]
    32a8:	add	r3, r3, #1
    32ac:	str	r3, [fp, #-8]
    32b0:	ldr	r2, [fp, #-8]
    32b4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    32b8:	cmp	r2, r3
    32bc:	bcc	3198 <hexdump+0x4c>
    32c0:	b	32e4 <hexdump+0x198>
    32c4:	ldr	r3, [fp, #-52]	; 0xffffffcc
    32c8:	mov	r2, #3
    32cc:	mov	r1, #1
    32d0:	ldr	r0, [pc, #76]	; 3324 <hexdump+0x1d8>
    32d4:	bl	0 <fwrite>
    32d8:	ldr	r3, [fp, #-8]
    32dc:	add	r3, r3, #1
    32e0:	str	r3, [fp, #-8]
    32e4:	ldr	r3, [fp, #-8]
    32e8:	and	r3, r3, #15
    32ec:	cmp	r3, #0
    32f0:	bne	32c4 <hexdump+0x178>
    32f4:	sub	r3, fp, #32
    32f8:	mov	r2, r3
    32fc:	ldr	r1, [pc, #20]	; 3318 <hexdump+0x1cc>
    3300:	ldr	r0, [fp, #-52]	; 0xffffffcc
    3304:	bl	0 <fprintf>
    3308:	nop			; (mov r0, r0)
    330c:	sub	sp, fp, #4
    3310:	pop	{fp, pc}
    3314:	.word	0x00000174
    3318:	.word	0x0000017c
    331c:	.word	0x00000184
    3320:	.word	0x0000018c
    3324:	.word	0x00000194

00003328 <verify_monster>:
    3328:	push	{fp, lr}
    332c:	add	fp, sp, #4
    3330:	sub	sp, sp, #56	; 0x38
    3334:	str	r0, [fp, #-56]	; 0xffffffc8
    3338:	ldr	r0, [fp, #-56]	; 0xffffffc8
    333c:	bl	b50 <MyGame_Example_Monster_as_root>
    3340:	str	r0, [fp, #-12]
    3344:	ldr	r3, [fp, #-12]
    3348:	cmp	r3, #0
    334c:	bne	3360 <verify_monster+0x38>
    3350:	ldr	r0, [pc, #1132]	; 37c4 <verify_monster+0x49c>
    3354:	bl	0 <puts>
    3358:	mvn	r3, #0
    335c:	b	3a1c <verify_monster+0x6f4>
    3360:	ldr	r0, [fp, #-12]
    3364:	bl	c94 <MyGame_Example_Monster_hp>
    3368:	mov	r3, r0
    336c:	cmp	r3, #80	; 0x50
    3370:	beq	3384 <verify_monster+0x5c>
    3374:	ldr	r0, [pc, #1100]	; 37c8 <verify_monster+0x4a0>
    3378:	bl	0 <puts>
    337c:	mvn	r3, #0
    3380:	b	3a1c <verify_monster+0x6f4>
    3384:	ldr	r0, [fp, #-12]
    3388:	bl	bb8 <MyGame_Example_Monster_pos>
    338c:	str	r0, [fp, #-16]
    3390:	ldr	r3, [fp, #-16]
    3394:	cmp	r3, #0
    3398:	bne	33ac <verify_monster+0x84>
    339c:	ldr	r0, [pc, #1064]	; 37cc <verify_monster+0x4a4>
    33a0:	bl	0 <puts>
    33a4:	mvn	r3, #0
    33a8:	b	3a1c <verify_monster+0x6f4>
    33ac:	ldr	r2, [fp, #-16]
    33b0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    33b4:	sub	r3, r2, r3
    33b8:	str	r3, [fp, #-20]	; 0xffffffec
    33bc:	ldr	r3, [fp, #-20]	; 0xffffffec
    33c0:	and	r3, r3, #15
    33c4:	cmp	r3, #0
    33c8:	beq	33dc <verify_monster+0xb4>
    33cc:	ldr	r0, [pc, #1020]	; 37d0 <verify_monster+0x4a8>
    33d0:	bl	0 <puts>
    33d4:	mvn	r3, #0
    33d8:	b	3a1c <verify_monster+0x6f4>
    33dc:	ldr	r0, [fp, #-16]
    33e0:	bl	9b0 <MyGame_Example_Vec3_x>
    33e4:	vmov.f32	s14, s0
    33e8:	vldr	s15, [pc, #968]	; 37b8 <verify_monster+0x490>
    33ec:	vcmp.f32	s14, s15
    33f0:	vmrs	APSR_nzcv, fpscr
    33f4:	beq	3408 <verify_monster+0xe0>
    33f8:	ldr	r0, [pc, #980]	; 37d4 <verify_monster+0x4ac>
    33fc:	bl	0 <puts>
    3400:	mvn	r3, #0
    3404:	b	3a1c <verify_monster+0x6f4>
    3408:	ldr	r0, [fp, #-16]
    340c:	bl	9f4 <MyGame_Example_Vec3_y>
    3410:	vmov.f32	s14, s0
    3414:	vldr	s15, [pc, #928]	; 37bc <verify_monster+0x494>
    3418:	vcmp.f32	s14, s15
    341c:	vmrs	APSR_nzcv, fpscr
    3420:	beq	3434 <verify_monster+0x10c>
    3424:	ldr	r0, [pc, #940]	; 37d8 <verify_monster+0x4b0>
    3428:	bl	0 <puts>
    342c:	mvn	r3, #0
    3430:	b	3a1c <verify_monster+0x6f4>
    3434:	ldr	r0, [fp, #-16]
    3438:	bl	a3c <MyGame_Example_Vec3_z>
    343c:	vmov.f32	s14, s0
    3440:	vldr	s15, [pc, #888]	; 37c0 <verify_monster+0x498>
    3444:	vcmp.f32	s14, s15
    3448:	vmrs	APSR_nzcv, fpscr
    344c:	beq	3460 <verify_monster+0x138>
    3450:	ldr	r0, [pc, #900]	; 37dc <verify_monster+0x4b4>
    3454:	bl	0 <puts>
    3458:	mvn	r3, #0
    345c:	b	3a1c <verify_monster+0x6f4>
    3460:	ldr	r0, [fp, #-16]
    3464:	bl	a84 <MyGame_Example_Vec3_test1>
    3468:	vmov.f64	d6, d0
    346c:	vldr	d7, [pc, #828]	; 37b0 <verify_monster+0x488>
    3470:	vcmp.f64	d6, d7
    3474:	vmrs	APSR_nzcv, fpscr
    3478:	beq	348c <verify_monster+0x164>
    347c:	ldr	r0, [pc, #860]	; 37e0 <verify_monster+0x4b8>
    3480:	bl	0 <puts>
    3484:	mvn	r3, #0
    3488:	b	3a1c <verify_monster+0x6f4>
    348c:	ldr	r0, [fp, #-16]
    3490:	bl	ad0 <MyGame_Example_Vec3_test2>
    3494:	mov	r3, r0
    3498:	cmp	r3, #2
    349c:	beq	34b0 <verify_monster+0x188>
    34a0:	ldr	r0, [pc, #828]	; 37e4 <verify_monster+0x4bc>
    34a4:	bl	0 <puts>
    34a8:	mvn	r3, #0
    34ac:	b	3a1c <verify_monster+0x6f4>
    34b0:	ldr	r0, [fp, #-16]
    34b4:	bl	b14 <MyGame_Example_Vec3_test3>
    34b8:	str	r0, [fp, #-24]	; 0xffffffe8
    34bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    34c0:	bl	92c <MyGame_Example_Test_a>
    34c4:	mov	r3, r0
    34c8:	cmp	r3, #5
    34cc:	bne	34e4 <verify_monster+0x1bc>
    34d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    34d4:	bl	96c <MyGame_Example_Test_b>
    34d8:	mov	r3, r0
    34dc:	cmp	r3, #6
    34e0:	beq	34f4 <verify_monster+0x1cc>
    34e4:	ldr	r0, [pc, #764]	; 37e8 <verify_monster+0x4c0>
    34e8:	bl	0 <puts>
    34ec:	mvn	r3, #0
    34f0:	b	3a1c <verify_monster+0x6f4>
    34f4:	ldr	r0, [fp, #-12]
    34f8:	bl	d80 <MyGame_Example_Monster_name>
    34fc:	str	r0, [fp, #-28]	; 0xffffffe4
    3500:	ldr	r0, [fp, #-28]	; 0xffffffe4
    3504:	bl	5e0 <flatbuffers_string_len>
    3508:	mov	r3, r0
    350c:	cmp	r3, #9
    3510:	beq	3524 <verify_monster+0x1fc>
    3514:	ldr	r0, [pc, #720]	; 37ec <verify_monster+0x4c4>
    3518:	bl	0 <puts>
    351c:	mvn	r3, #0
    3520:	b	3a1c <verify_monster+0x6f4>
    3524:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3528:	cmp	r3, #0
    352c:	beq	3548 <verify_monster+0x220>
    3530:	ldr	r1, [pc, #696]	; 37f0 <verify_monster+0x4c8>
    3534:	ldr	r0, [fp, #-28]	; 0xffffffe4
    3538:	bl	0 <strcmp>
    353c:	mov	r3, r0
    3540:	cmp	r3, #0
    3544:	beq	3558 <verify_monster+0x230>
    3548:	ldr	r0, [pc, #676]	; 37f4 <verify_monster+0x4cc>
    354c:	bl	0 <puts>
    3550:	mvn	r3, #0
    3554:	b	3a1c <verify_monster+0x6f4>
    3558:	ldr	r0, [fp, #-12]
    355c:	bl	e90 <MyGame_Example_Monster_inventory>
    3560:	str	r0, [fp, #-32]	; 0xffffffe0
    3564:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3568:	bl	6ec <flatbuffers_uint8_vec_len>
    356c:	mov	r3, r0
    3570:	cmp	r3, #5
    3574:	beq	3588 <verify_monster+0x260>
    3578:	ldr	r0, [pc, #632]	; 37f8 <verify_monster+0x4d0>
    357c:	bl	0 <puts>
    3580:	mvn	r3, #0
    3584:	b	3a1c <verify_monster+0x6f4>
    3588:	mov	r3, #0
    358c:	str	r3, [fp, #-8]
    3590:	b	35d8 <verify_monster+0x2b0>
    3594:	ldr	r3, [fp, #-8]
    3598:	mov	r1, r3
    359c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    35a0:	bl	714 <flatbuffers_uint8_vec_at>
    35a4:	mov	r3, r0
    35a8:	mov	r2, r3
    35ac:	ldr	r3, [fp, #-8]
    35b0:	cmp	r2, r3
    35b4:	beq	35cc <verify_monster+0x2a4>
    35b8:	ldr	r1, [fp, #-8]
    35bc:	ldr	r0, [pc, #568]	; 37fc <verify_monster+0x4d4>
    35c0:	bl	0 <printf>
    35c4:	mvn	r3, #0
    35c8:	b	3a1c <verify_monster+0x6f4>
    35cc:	ldr	r3, [fp, #-8]
    35d0:	add	r3, r3, #1
    35d4:	str	r3, [fp, #-8]
    35d8:	ldr	r3, [fp, #-8]
    35dc:	cmp	r3, #4
    35e0:	ble	3594 <verify_monster+0x26c>
    35e4:	ldr	r0, [fp, #-12]
    35e8:	bl	f8c <MyGame_Example_Monster_testarrayofstring>
    35ec:	str	r0, [fp, #-36]	; 0xffffffdc
    35f0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    35f4:	cmp	r3, #0
    35f8:	bne	360c <verify_monster+0x2e4>
    35fc:	ldr	r0, [pc, #508]	; 3800 <verify_monster+0x4d8>
    3600:	bl	0 <puts>
    3604:	mvn	r3, #0
    3608:	b	3a1c <verify_monster+0x6f4>
    360c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    3610:	bl	624 <flatbuffers_string_vec_len>
    3614:	mov	r3, r0
    3618:	cmp	r3, #2
    361c:	beq	3630 <verify_monster+0x308>
    3620:	ldr	r0, [pc, #476]	; 3804 <verify_monster+0x4dc>
    3624:	bl	0 <puts>
    3628:	mvn	r3, #0
    362c:	b	3a1c <verify_monster+0x6f4>
    3630:	mov	r1, #0
    3634:	ldr	r0, [fp, #-36]	; 0xffffffdc
    3638:	bl	668 <flatbuffers_string_vec_at>
    363c:	str	r0, [fp, #-40]	; 0xffffffd8
    3640:	ldr	r1, [pc, #448]	; 3808 <verify_monster+0x4e0>
    3644:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3648:	bl	0 <strcmp>
    364c:	mov	r3, r0
    3650:	cmp	r3, #0
    3654:	beq	3668 <verify_monster+0x340>
    3658:	ldr	r0, [pc, #428]	; 380c <verify_monster+0x4e4>
    365c:	bl	0 <puts>
    3660:	mvn	r3, #0
    3664:	b	3a1c <verify_monster+0x6f4>
    3668:	mov	r1, #1
    366c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    3670:	bl	668 <flatbuffers_string_vec_at>
    3674:	str	r0, [fp, #-40]	; 0xffffffd8
    3678:	ldr	r1, [pc, #400]	; 3810 <verify_monster+0x4e8>
    367c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3680:	bl	0 <strcmp>
    3684:	mov	r3, r0
    3688:	cmp	r3, #0
    368c:	beq	36a0 <verify_monster+0x378>
    3690:	ldr	r0, [pc, #380]	; 3814 <verify_monster+0x4ec>
    3694:	bl	0 <puts>
    3698:	mvn	r3, #0
    369c:	b	3a1c <verify_monster+0x6f4>
    36a0:	ldr	r0, [fp, #-12]
    36a4:	bl	1084 <MyGame_Example_Monster_test_type>
    36a8:	mov	r3, r0
    36ac:	strb	r3, [fp, #-41]	; 0xffffffd7
    36b0:	ldrb	r3, [fp, #-41]	; 0xffffffd7
    36b4:	cmp	r3, #1
    36b8:	beq	36cc <verify_monster+0x3a4>
    36bc:	ldr	r0, [pc, #340]	; 3818 <verify_monster+0x4f0>
    36c0:	bl	0 <puts>
    36c4:	mvn	r3, #0
    36c8:	b	3a1c <verify_monster+0x6f4>
    36cc:	ldr	r0, [fp, #-12]
    36d0:	bl	1170 <MyGame_Example_Monster_test>
    36d4:	str	r0, [fp, #-48]	; 0xffffffd0
    36d8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    36dc:	cmp	r3, #0
    36e0:	bne	36f4 <verify_monster+0x3cc>
    36e4:	ldr	r0, [pc, #304]	; 381c <verify_monster+0x4f4>
    36e8:	bl	0 <puts>
    36ec:	mvn	r3, #0
    36f0:	b	3a1c <verify_monster+0x6f4>
    36f4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    36f8:	bl	d80 <MyGame_Example_Monster_name>
    36fc:	mov	r3, r0
    3700:	ldr	r1, [pc, #280]	; 3820 <verify_monster+0x4f8>
    3704:	mov	r0, r3
    3708:	bl	0 <strcmp>
    370c:	mov	r3, r0
    3710:	cmp	r3, #0
    3714:	beq	3728 <verify_monster+0x400>
    3718:	ldr	r0, [pc, #260]	; 3824 <verify_monster+0x4fc>
    371c:	bl	0 <puts>
    3720:	mvn	r3, #0
    3724:	b	3a1c <verify_monster+0x6f4>
    3728:	ldr	r0, [fp, #-12]
    372c:	bl	1268 <MyGame_Example_Monster_test4>
    3730:	str	r0, [fp, #-52]	; 0xffffffcc
    3734:	ldr	r0, [fp, #-52]	; 0xffffffcc
    3738:	bl	8e8 <MyGame_Example_Test_vec_len>
    373c:	mov	r3, r0
    3740:	cmp	r3, #2
    3744:	beq	3758 <verify_monster+0x430>
    3748:	ldr	r0, [pc, #216]	; 3828 <verify_monster+0x500>
    374c:	bl	0 <puts>
    3750:	mvn	r3, #0
    3754:	b	3a1c <verify_monster+0x6f4>
    3758:	mov	r1, #0
    375c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    3760:	bl	880 <MyGame_Example_Test_vec_at>
    3764:	str	r0, [fp, #-24]	; 0xffffffe8
    3768:	ldr	r0, [fp, #-24]	; 0xffffffe8
    376c:	bl	92c <MyGame_Example_Test_a>
    3770:	mov	r3, r0
    3774:	cmp	r3, #10
    3778:	beq	378c <verify_monster+0x464>
    377c:	ldr	r0, [pc, #168]	; 382c <verify_monster+0x504>
    3780:	bl	0 <puts>
    3784:	mvn	r3, #0
    3788:	b	3a1c <verify_monster+0x6f4>
    378c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3790:	bl	96c <MyGame_Example_Test_b>
    3794:	mov	r3, r0
    3798:	cmp	r3, #20
    379c:	beq	3850 <verify_monster+0x528>
    37a0:	ldr	r0, [pc, #136]	; 3830 <verify_monster+0x508>
    37a4:	bl	0 <puts>
    37a8:	mvn	r3, #0
    37ac:	b	3a1c <verify_monster+0x6f4>
    37b0:	.word	0x00000000
    37b4:	.word	0x40080000
    37b8:	.word	0x3f800000
    37bc:	.word	0x40000000
    37c0:	.word	0x40400000
    37c4:	.word	0x000001b0
    37c8:	.word	0x000001c8
    37cc:	.word	0x000001ec
    37d0:	.word	0x00000200
    37d4:	.word	0x00000228
    37d8:	.word	0x0000024c
    37dc:	.word	0x00000270
    37e0:	.word	0x00000294
    37e4:	.word	0x000002a8
    37e8:	.word	0x000002c0
    37ec:	.word	0x000002d8
    37f0:	.word	0x000002f4
    37f4:	.word	0x00000300
    37f8:	.word	0x00000314
    37fc:	.word	0x00000330
    3800:	.word	0x00000350
    3804:	.word	0x0000036c
    3808:	.word	0x00000394
    380c:	.word	0x0000039c
    3810:	.word	0x000003c0
    3814:	.word	0x000003c8
    3818:	.word	0x000003f0
    381c:	.word	0x00000400
    3820:	.word	0x00000418
    3824:	.word	0x00000420
    3828:	.word	0x00000438
    382c:	.word	0x0000045c
    3830:	.word	0x00000474
    3834:	.word	0x0000048c
    3838:	.word	0x000004a4
    383c:	.word	0x00000518
    3840:	.word	0xdd79c941
    3844:	.word	0x000007c8
    3848:	.word	0x000004bc
    384c:	.word	0x00000550
    3850:	mov	r1, #1
    3854:	ldr	r0, [fp, #-52]	; 0xffffffcc
    3858:	bl	880 <MyGame_Example_Test_vec_at>
    385c:	str	r0, [fp, #-24]	; 0xffffffe8
    3860:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3864:	bl	92c <MyGame_Example_Test_a>
    3868:	mov	r3, r0
    386c:	cmp	r3, #30
    3870:	beq	3884 <verify_monster+0x55c>
    3874:	ldr	r0, [pc, #-72]	; 3834 <verify_monster+0x50c>
    3878:	bl	0 <puts>
    387c:	mvn	r3, #0
    3880:	b	3a1c <verify_monster+0x6f4>
    3884:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3888:	bl	96c <MyGame_Example_Test_b>
    388c:	mov	r3, r0
    3890:	cmp	r3, #40	; 0x28
    3894:	beq	38a8 <verify_monster+0x580>
    3898:	ldr	r0, [pc, #-104]	; 3838 <verify_monster+0x510>
    389c:	bl	0 <puts>
    38a0:	mvn	r3, #0
    38a4:	b	3a1c <verify_monster+0x6f4>
    38a8:	ldr	r0, [fp, #-12]
    38ac:	bl	1364 <MyGame_Example_Monster_testhashs32_fnv1>
    38b0:	mov	r2, r0
    38b4:	ldr	r3, [pc, #-124]	; 3840 <verify_monster+0x518>
    38b8:	cmp	r2, r3
    38bc:	beq	38d4 <verify_monster+0x5ac>
    38c0:	ldr	r3, [pc, #-132]	; 3844 <verify_monster+0x51c>
    38c4:	mov	r2, #148	; 0x94
    38c8:	ldr	r1, [pc, #-136]	; 3848 <verify_monster+0x520>
    38cc:	ldr	r0, [pc, #-152]	; 383c <verify_monster+0x514>
    38d0:	bl	0 <__assert_fail>
    38d4:	ldr	r0, [fp, #-12]
    38d8:	bl	144c <MyGame_Example_Monster_testhashu32_fnv1>
    38dc:	mov	r2, r0
    38e0:	ldr	r3, [pc, #-168]	; 3840 <verify_monster+0x518>
    38e4:	cmp	r2, r3
    38e8:	beq	3900 <verify_monster+0x5d8>
    38ec:	ldr	r3, [pc, #-176]	; 3844 <verify_monster+0x51c>
    38f0:	mov	r2, #149	; 0x95
    38f4:	ldr	r1, [pc, #-180]	; 3848 <verify_monster+0x520>
    38f8:	ldr	r0, [pc, #-180]	; 384c <verify_monster+0x524>
    38fc:	bl	0 <__assert_fail>
    3900:	ldr	r0, [fp, #-12]
    3904:	bl	1538 <MyGame_Example_Monster_testhashs64_fnv1>
    3908:	add	r3, pc, #280	; 0x118
    390c:	ldrd	r2, [r3]
    3910:	cmp	r1, r3
    3914:	cmpeq	r0, r2
    3918:	beq	3930 <verify_monster+0x608>
    391c:	ldr	r3, [pc, #276]	; 3a38 <verify_monster+0x710>
    3920:	mov	r2, #150	; 0x96
    3924:	ldr	r1, [pc, #272]	; 3a3c <verify_monster+0x714>
    3928:	ldr	r0, [pc, #272]	; 3a40 <verify_monster+0x718>
    392c:	bl	0 <__assert_fail>
    3930:	ldr	r0, [fp, #-12]
    3934:	bl	1630 <MyGame_Example_Monster_testhashu64_fnv1>
    3938:	add	r3, pc, #232	; 0xe8
    393c:	ldrd	r2, [r3]
    3940:	cmp	r1, r3
    3944:	cmpeq	r0, r2
    3948:	beq	3960 <verify_monster+0x638>
    394c:	ldr	r3, [pc, #228]	; 3a38 <verify_monster+0x710>
    3950:	mov	r2, #151	; 0x97
    3954:	ldr	r1, [pc, #224]	; 3a3c <verify_monster+0x714>
    3958:	ldr	r0, [pc, #228]	; 3a44 <verify_monster+0x71c>
    395c:	bl	0 <__assert_fail>
    3960:	ldr	r0, [fp, #-12]
    3964:	bl	1728 <MyGame_Example_Monster_testhashs32_fnv1a>
    3968:	mov	r2, r0
    396c:	ldr	r3, [pc, #212]	; 3a48 <verify_monster+0x720>
    3970:	cmp	r2, r3
    3974:	beq	398c <verify_monster+0x664>
    3978:	ldr	r3, [pc, #184]	; 3a38 <verify_monster+0x710>
    397c:	mov	r2, #152	; 0x98
    3980:	ldr	r1, [pc, #180]	; 3a3c <verify_monster+0x714>
    3984:	ldr	r0, [pc, #192]	; 3a4c <verify_monster+0x724>
    3988:	bl	0 <__assert_fail>
    398c:	ldr	r0, [fp, #-12]
    3990:	bl	1810 <MyGame_Example_Monster_testhashu32_fnv1a>
    3994:	mov	r2, r0
    3998:	ldr	r3, [pc, #168]	; 3a48 <verify_monster+0x720>
    399c:	cmp	r2, r3
    39a0:	beq	39b8 <verify_monster+0x690>
    39a4:	ldr	r3, [pc, #140]	; 3a38 <verify_monster+0x710>
    39a8:	mov	r2, #153	; 0x99
    39ac:	ldr	r1, [pc, #136]	; 3a3c <verify_monster+0x714>
    39b0:	ldr	r0, [pc, #152]	; 3a50 <verify_monster+0x728>
    39b4:	bl	0 <__assert_fail>
    39b8:	ldr	r0, [fp, #-12]
    39bc:	bl	18fc <MyGame_Example_Monster_testhashs64_fnv1a>
    39c0:	add	r3, pc, #104	; 0x68
    39c4:	ldrd	r2, [r3]
    39c8:	cmp	r1, r3
    39cc:	cmpeq	r0, r2
    39d0:	beq	39e8 <verify_monster+0x6c0>
    39d4:	ldr	r3, [pc, #92]	; 3a38 <verify_monster+0x710>
    39d8:	mov	r2, #154	; 0x9a
    39dc:	ldr	r1, [pc, #88]	; 3a3c <verify_monster+0x714>
    39e0:	ldr	r0, [pc, #108]	; 3a54 <verify_monster+0x72c>
    39e4:	bl	0 <__assert_fail>
    39e8:	ldr	r0, [fp, #-12]
    39ec:	bl	19f4 <MyGame_Example_Monster_testhashu64_fnv1a>
    39f0:	add	r3, pc, #56	; 0x38
    39f4:	ldrd	r2, [r3]
    39f8:	cmp	r1, r3
    39fc:	cmpeq	r0, r2
    3a00:	beq	3a18 <verify_monster+0x6f0>
    3a04:	ldr	r3, [pc, #44]	; 3a38 <verify_monster+0x710>
    3a08:	mov	r2, #155	; 0x9b
    3a0c:	ldr	r1, [pc, #40]	; 3a3c <verify_monster+0x714>
    3a10:	ldr	r0, [pc, #64]	; 3a58 <verify_monster+0x730>
    3a14:	bl	0 <__assert_fail>
    3a18:	mov	r3, #0
    3a1c:	mov	r0, r3
    3a20:	sub	sp, fp, #4
    3a24:	pop	{fp, pc}
    3a28:	.word	0xf27b9181
    3a2c:	.word	0x6e0f80cd
    3a30:	.word	0xc767ddf1
    3a34:	.word	0x43f948dc
    3a38:	.word	0x000007c8
    3a3c:	.word	0x000004bc
    3a40:	.word	0x00000588
    3a44:	.word	0x000005c8
    3a48:	.word	0x8e81a471
    3a4c:	.word	0x00000608
    3a50:	.word	0x00000640
    3a54:	.word	0x00000678
    3a58:	.word	0x000006b8

00003a5c <main>:
    3a5c:	push	{fp, lr}
    3a60:	add	fp, sp, #4
    3a64:	sub	sp, sp, #24
    3a68:	str	r0, [fp, #-24]	; 0xffffffe8
    3a6c:	str	r1, [fp, #-28]	; 0xffffffe4
    3a70:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3a74:	cmp	r3, #1
    3a78:	beq	3aa8 <main+0x4c>
    3a7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3a80:	cmp	r3, #2
    3a84:	beq	3aa8 <main+0x4c>
    3a88:	ldr	r3, [pc, #376]	; 3c08 <main+0x1ac>
    3a8c:	ldr	r3, [r3]
    3a90:	mov	r2, #63	; 0x3f
    3a94:	mov	r1, #1
    3a98:	ldr	r0, [pc, #364]	; 3c0c <main+0x1b0>
    3a9c:	bl	0 <fwrite>
    3aa0:	mov	r0, #1
    3aa4:	bl	0 <exit>
    3aa8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3aac:	cmp	r3, #2
    3ab0:	bne	3ac4 <main+0x68>
    3ab4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3ab8:	ldr	r3, [r3, #4]
    3abc:	ldr	r2, [pc, #332]	; 3c10 <main+0x1b4>
    3ac0:	str	r3, [r2]
    3ac4:	ldr	r3, [pc, #324]	; 3c10 <main+0x1b4>
    3ac8:	ldr	r3, [r3]
    3acc:	sub	r2, fp, #20
    3ad0:	mov	r1, #1024	; 0x400
    3ad4:	mov	r0, r3
    3ad8:	bl	2f88 <readfile>
    3adc:	str	r0, [fp, #-12]
    3ae0:	ldr	r3, [fp, #-20]	; 0xffffffec
    3ae4:	add	r3, r3, #255	; 0xff
    3ae8:	bic	r3, r3, #255	; 0xff
    3aec:	mov	r1, r3
    3af0:	mov	r0, #256	; 0x100
    3af4:	bl	0 <__portable_aligned_alloc>
    3af8:	str	r0, [fp, #-16]
    3afc:	ldr	r3, [fp, #-20]	; 0xffffffec
    3b00:	mov	r2, r3
    3b04:	ldr	r1, [fp, #-12]
    3b08:	ldr	r0, [fp, #-16]
    3b0c:	bl	0 <memcpy>
    3b10:	ldr	r0, [fp, #-12]
    3b14:	bl	0 <free>
    3b18:	ldr	r3, [fp, #-16]
    3b1c:	cmp	r3, #0
    3b20:	bne	3b48 <main+0xec>
    3b24:	ldr	r3, [pc, #220]	; 3c08 <main+0x1ac>
    3b28:	ldr	r0, [r3]
    3b2c:	ldr	r3, [pc, #220]	; 3c10 <main+0x1b4>
    3b30:	ldr	r3, [r3]
    3b34:	mov	r2, r3
    3b38:	ldr	r1, [pc, #212]	; 3c14 <main+0x1b8>
    3b3c:	bl	0 <fprintf>
    3b40:	mvn	r3, #0
    3b44:	b	3bfc <main+0x1a0>
    3b48:	ldr	r2, [fp, #-20]	; 0xffffffec
    3b4c:	ldr	r3, [pc, #180]	; 3c08 <main+0x1ac>
    3b50:	ldr	r3, [r3]
    3b54:	ldr	r1, [fp, #-16]
    3b58:	ldr	r0, [pc, #184]	; 3c18 <main+0x1bc>
    3b5c:	bl	314c <hexdump>
    3b60:	ldr	r3, [fp, #-20]	; 0xffffffec
    3b64:	ldr	r2, [pc, #176]	; 3c1c <main+0x1c0>
    3b68:	mov	r1, r3
    3b6c:	ldr	r0, [fp, #-16]
    3b70:	bl	2bac <MyGame_Example_Monster_verify_as_root_with_identifier>
    3b74:	mov	r3, r0
    3b78:	cmp	r3, #0
    3b7c:	beq	3ba4 <main+0x148>
    3b80:	ldr	r3, [pc, #128]	; 3c08 <main+0x1ac>
    3b84:	ldr	r3, [r3]
    3b88:	mov	r2, #38	; 0x26
    3b8c:	mov	r1, #1
    3b90:	ldr	r0, [pc, #136]	; 3c20 <main+0x1c4>
    3b94:	bl	0 <fwrite>
    3b98:	mvn	r3, #0
    3b9c:	str	r3, [fp, #-8]
    3ba0:	b	3bf0 <main+0x194>
    3ba4:	ldr	r3, [fp, #-20]	; 0xffffffec
    3ba8:	mov	r1, r3
    3bac:	ldr	r0, [fp, #-16]
    3bb0:	bl	2b6c <MyGame_Example_Monster_verify_as_root>
    3bb4:	mov	r3, r0
    3bb8:	cmp	r3, #0
    3bbc:	beq	3be4 <main+0x188>
    3bc0:	ldr	r3, [pc, #64]	; 3c08 <main+0x1ac>
    3bc4:	ldr	r3, [r3]
    3bc8:	mov	r2, #62	; 0x3e
    3bcc:	mov	r1, #1
    3bd0:	ldr	r0, [pc, #76]	; 3c24 <main+0x1c8>
    3bd4:	bl	0 <fwrite>
    3bd8:	mvn	r3, #0
    3bdc:	str	r3, [fp, #-8]
    3be0:	b	3bf0 <main+0x194>
    3be4:	ldr	r0, [fp, #-16]
    3be8:	bl	3328 <verify_monster>
    3bec:	str	r0, [fp, #-8]
    3bf0:	ldr	r0, [fp, #-16]
    3bf4:	bl	0 <free>
    3bf8:	ldr	r3, [fp, #-8]
    3bfc:	mov	r0, r3
    3c00:	sub	sp, fp, #4
    3c04:	pop	{fp, pc}
    3c08:	.word	0x00000000
    3c0c:	.word	0x000006f8
    3c10:	.word	0x00000000
    3c14:	.word	0x00000738
    3c18:	.word	0x00000198
    3c1c:	.word	0x0000011c
    3c20:	.word	0x00000760
    3c24:	.word	0x00000788
