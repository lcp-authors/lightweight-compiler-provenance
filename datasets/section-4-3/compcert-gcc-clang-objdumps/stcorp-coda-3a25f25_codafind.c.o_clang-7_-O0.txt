
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codafind.dir/tools/codafind/codafind.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <callback>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	sub	sp, sp, #56	; 0x38
   c:	str	r0, [fp, #-4]
  10:	str	r1, [fp, #-8]
  14:	str	r2, [fp, #-12]
  18:	str	r3, [fp, #-16]
  1c:	ldr	r0, [fp, #-8]
  20:	cmp	r0, #0
  24:	bne	50 <callback+0x50>
  28:	movw	r0, #0
  2c:	movt	r0, #0
  30:	ldr	r0, [r0]
  34:	ldr	r2, [fp, #-4]
  38:	ldr	r3, [fp, #-12]
  3c:	movw	r1, #0
  40:	movt	r1, #0
  44:	bl	0 <fprintf>
  48:	str	r0, [fp, #-20]	; 0xffffffec
  4c:	b	1a0 <callback+0x1a0>
  50:	ldr	r0, [fp, #-8]
  54:	cmp	r0, #2
  58:	bne	80 <callback+0x80>
  5c:	movw	r0, #0
  60:	movt	r0, #0
  64:	ldr	r0, [r0]
  68:	ldr	r2, [fp, #-4]
  6c:	movw	r1, #0
  70:	movt	r1, #0
  74:	bl	0 <fprintf>
  78:	str	r0, [fp, #-24]	; 0xffffffe8
  7c:	b	19c <callback+0x19c>
  80:	ldr	r0, [fp, #-8]
  84:	cmp	r0, #1
  88:	bne	b4 <callback+0xb4>
  8c:	movw	r0, #0
  90:	movt	r0, #0
  94:	ldr	r0, [r0]
  98:	ldr	r2, [fp, #-4]
  9c:	ldr	r3, [fp, #-12]
  a0:	movw	r1, #0
  a4:	movt	r1, #0
  a8:	bl	0 <fprintf>
  ac:	str	r0, [sp, #28]
  b0:	b	198 <callback+0x198>
  b4:	movw	r0, #0
  b8:	movt	r0, #0
  bc:	ldr	r0, [r0]
  c0:	cmp	r0, #0
  c4:	beq	170 <callback+0x170>
  c8:	ldr	r1, [fp, #-4]
  cc:	movw	r0, #0
  d0:	movt	r0, #0
  d4:	bl	0 <printf>
  d8:	ldr	r1, [fp, #-8]
  dc:	cmp	r1, #5
  e0:	str	r0, [sp, #24]
  e4:	str	r1, [sp, #20]
  e8:	bhi	16c <callback+0x16c>
  ec:	add	r0, pc, #8
  f0:	ldr	r1, [sp, #20]
  f4:	ldr	r0, [r0, r1, lsl #2]
  f8:	mov	pc, r0
  fc:	.word	0x00000114
 100:	.word	0x00000114
 104:	.word	0x00000114
 108:	.word	0x00000134
 10c:	.word	0x0000015c
 110:	.word	0x00000148
 114:	movw	r0, #0
 118:	movt	r0, #0
 11c:	movw	r1, #0
 120:	movt	r1, #0
 124:	movw	r2, #110	; 0x6e
 128:	movw	r3, #0
 12c:	movt	r3, #0
 130:	bl	0 <__assert_fail>
 134:	movw	r0, #0
 138:	movt	r0, #0
 13c:	bl	0 <printf>
 140:	str	r0, [sp, #16]
 144:	b	16c <callback+0x16c>
 148:	movw	r0, #0
 14c:	movt	r0, #0
 150:	bl	0 <printf>
 154:	str	r0, [sp, #12]
 158:	b	16c <callback+0x16c>
 15c:	movw	r0, #0
 160:	movt	r0, #0
 164:	bl	0 <printf>
 168:	str	r0, [sp, #8]
 16c:	b	194 <callback+0x194>
 170:	ldr	r0, [fp, #-8]
 174:	cmp	r0, #4
 178:	bne	190 <callback+0x190>
 17c:	ldr	r1, [fp, #-4]
 180:	movw	r0, #0
 184:	movt	r0, #0
 188:	bl	0 <printf>
 18c:	str	r0, [sp, #4]
 190:	b	194 <callback+0x194>
 194:	b	198 <callback+0x198>
 198:	b	19c <callback+0x19c>
 19c:	b	1a0 <callback+0x1a0>
 1a0:	movw	r0, #0
 1a4:	mov	sp, fp
 1a8:	pop	{fp, pc}

000001ac <main>:
 1ac:	push	{fp, lr}
 1b0:	mov	fp, sp
 1b4:	sub	sp, sp, #88	; 0x58
 1b8:	movw	r2, #0
 1bc:	str	r2, [fp, #-4]
 1c0:	str	r0, [fp, #-8]
 1c4:	str	r1, [fp, #-12]
 1c8:	str	r2, [fp, #-16]
 1cc:	movw	r0, #0
 1d0:	movt	r0, #0
 1d4:	str	r2, [r0]
 1d8:	movw	r0, #1
 1dc:	str	r0, [fp, #-20]	; 0xffffffec
 1e0:	ldr	r0, [fp, #-8]
 1e4:	cmp	r0, #1
 1e8:	beq	224 <main+0x78>
 1ec:	ldr	r0, [fp, #-12]
 1f0:	ldr	r0, [r0, #4]
 1f4:	movw	r1, #0
 1f8:	movt	r1, #0
 1fc:	bl	0 <strcmp>
 200:	cmp	r0, #0
 204:	beq	224 <main+0x78>
 208:	ldr	r0, [fp, #-12]
 20c:	ldr	r0, [r0, #4]
 210:	movw	r1, #0
 214:	movt	r1, #0
 218:	bl	0 <strcmp>
 21c:	cmp	r0, #0
 220:	bne	230 <main+0x84>
 224:	bl	644 <print_help>
 228:	movw	r0, #0
 22c:	bl	0 <exit>
 230:	ldr	r0, [fp, #-12]
 234:	ldr	r0, [r0, #4]
 238:	movw	r1, #0
 23c:	movt	r1, #0
 240:	bl	0 <strcmp>
 244:	cmp	r0, #0
 248:	beq	268 <main+0xbc>
 24c:	ldr	r0, [fp, #-12]
 250:	ldr	r0, [r0, #4]
 254:	movw	r1, #0
 258:	movt	r1, #0
 25c:	bl	0 <strcmp>
 260:	cmp	r0, #0
 264:	bne	274 <main+0xc8>
 268:	bl	898 <print_version>
 26c:	movw	r0, #0
 270:	bl	0 <exit>
 274:	movw	r0, #1
 278:	str	r0, [fp, #-24]	; 0xffffffe8
 27c:	ldr	r0, [fp, #-24]	; 0xffffffe8
 280:	add	r0, r0, #1
 284:	ldr	r1, [fp, #-8]
 288:	cmp	r0, r1
 28c:	bge	2e0 <main+0x134>
 290:	ldr	r0, [fp, #-12]
 294:	ldr	r1, [fp, #-24]	; 0xffffffe8
 298:	add	r0, r0, r1, lsl #2
 29c:	ldr	r0, [r0]
 2a0:	movw	r1, #0
 2a4:	movt	r1, #0
 2a8:	bl	0 <strcmp>
 2ac:	cmp	r0, #0
 2b0:	bne	2e0 <main+0x134>
 2b4:	ldr	r0, [fp, #-12]
 2b8:	ldr	r1, [fp, #-24]	; 0xffffffe8
 2bc:	add	r1, r1, #1
 2c0:	add	r0, r0, r1, lsl #2
 2c4:	ldr	r0, [r0]
 2c8:	bl	0 <coda_set_definition_path>
 2cc:	ldr	r1, [fp, #-24]	; 0xffffffe8
 2d0:	add	r1, r1, #2
 2d4:	str	r1, [fp, #-24]	; 0xffffffe8
 2d8:	str	r0, [fp, #-32]	; 0xffffffe0
 2dc:	b	354 <main+0x1a8>
 2e0:	movw	r0, #0
 2e4:	movt	r0, #0
 2e8:	str	r0, [fp, #-28]	; 0xffffffe4
 2ec:	ldr	r0, [fp, #-12]
 2f0:	ldr	r0, [r0]
 2f4:	ldr	r2, [fp, #-28]	; 0xffffffe4
 2f8:	movw	r1, #0
 2fc:	bl	0 <coda_set_definition_path_conditional>
 300:	cmp	r0, #0
 304:	beq	350 <main+0x1a4>
 308:	movw	r0, #0
 30c:	movt	r0, #0
 310:	ldr	r0, [r0]
 314:	str	r0, [fp, #-36]	; 0xffffffdc
 318:	bl	0 <coda_get_errno>
 31c:	ldr	r0, [r0]
 320:	bl	0 <coda_errno_to_string>
 324:	ldr	lr, [fp, #-36]	; 0xffffffdc
 328:	str	r0, [fp, #-40]	; 0xffffffd8
 32c:	mov	r0, lr
 330:	movw	r1, #0
 334:	movt	r1, #0
 338:	ldr	r2, [fp, #-40]	; 0xffffffd8
 33c:	bl	0 <fprintf>
 340:	movw	r1, #1
 344:	str	r0, [sp, #44]	; 0x2c
 348:	mov	r0, r1
 34c:	bl	0 <exit>
 350:	b	354 <main+0x1a8>
 354:	b	358 <main+0x1ac>
 358:	ldr	r0, [fp, #-24]	; 0xffffffe8
 35c:	ldr	r1, [fp, #-8]
 360:	cmp	r0, r1
 364:	bge	51c <main+0x370>
 368:	ldr	r0, [fp, #-12]
 36c:	ldr	r1, [fp, #-24]	; 0xffffffe8
 370:	add	r0, r0, r1, lsl #2
 374:	ldr	r0, [r0]
 378:	movw	r1, #0
 37c:	movt	r1, #0
 380:	bl	0 <strcmp>
 384:	cmp	r0, #0
 388:	beq	3b0 <main+0x204>
 38c:	ldr	r0, [fp, #-12]
 390:	ldr	r1, [fp, #-24]	; 0xffffffe8
 394:	add	r0, r0, r1, lsl #2
 398:	ldr	r0, [r0]
 39c:	movw	r1, #0
 3a0:	movt	r1, #0
 3a4:	bl	0 <strcmp>
 3a8:	cmp	r0, #0
 3ac:	bne	3bc <main+0x210>
 3b0:	movw	r0, #0
 3b4:	str	r0, [fp, #-20]	; 0xffffffec
 3b8:	b	50c <main+0x360>
 3bc:	ldr	r0, [fp, #-12]
 3c0:	ldr	r1, [fp, #-24]	; 0xffffffe8
 3c4:	add	r0, r0, r1, lsl #2
 3c8:	ldr	r0, [r0]
 3cc:	movw	r1, #0
 3d0:	movt	r1, #0
 3d4:	bl	0 <strcmp>
 3d8:	cmp	r0, #0
 3dc:	beq	404 <main+0x258>
 3e0:	ldr	r0, [fp, #-12]
 3e4:	ldr	r1, [fp, #-24]	; 0xffffffe8
 3e8:	add	r0, r0, r1, lsl #2
 3ec:	ldr	r0, [r0]
 3f0:	movw	r1, #0
 3f4:	movt	r1, #0
 3f8:	bl	0 <strcmp>
 3fc:	cmp	r0, #0
 400:	bne	460 <main+0x2b4>
 404:	ldr	r0, [fp, #-24]	; 0xffffffe8
 408:	add	r0, r0, #1
 40c:	ldr	r1, [fp, #-8]
 410:	cmp	r0, r1
 414:	bge	460 <main+0x2b4>
 418:	ldr	r0, [fp, #-12]
 41c:	ldr	r1, [fp, #-24]	; 0xffffffe8
 420:	add	r1, r1, #1
 424:	add	r0, r0, r1, lsl #2
 428:	ldr	r0, [r0]
 42c:	ldrb	r0, [r0]
 430:	cmp	r0, #45	; 0x2d
 434:	beq	460 <main+0x2b4>
 438:	ldr	r0, [fp, #-12]
 43c:	ldr	r1, [fp, #-24]	; 0xffffffe8
 440:	add	r1, r1, #1
 444:	add	r0, r0, r1, lsl #2
 448:	ldr	r0, [r0]
 44c:	str	r0, [fp, #-16]
 450:	ldr	r0, [fp, #-24]	; 0xffffffe8
 454:	add	r0, r0, #1
 458:	str	r0, [fp, #-24]	; 0xffffffe8
 45c:	b	508 <main+0x35c>
 460:	ldr	r0, [fp, #-12]
 464:	ldr	r1, [fp, #-24]	; 0xffffffe8
 468:	add	r0, r0, r1, lsl #2
 46c:	ldr	r0, [r0]
 470:	movw	r1, #0
 474:	movt	r1, #0
 478:	bl	0 <strcmp>
 47c:	cmp	r0, #0
 480:	beq	4a8 <main+0x2fc>
 484:	ldr	r0, [fp, #-12]
 488:	ldr	r1, [fp, #-24]	; 0xffffffe8
 48c:	add	r0, r0, r1, lsl #2
 490:	ldr	r0, [r0]
 494:	movw	r1, #0
 498:	movt	r1, #0
 49c:	bl	0 <strcmp>
 4a0:	cmp	r0, #0
 4a4:	bne	4bc <main+0x310>
 4a8:	movw	r0, #0
 4ac:	movt	r0, #0
 4b0:	movw	r1, #1
 4b4:	str	r1, [r0]
 4b8:	b	504 <main+0x358>
 4bc:	ldr	r0, [fp, #-12]
 4c0:	ldr	r1, [fp, #-24]	; 0xffffffe8
 4c4:	add	r0, r0, r1, lsl #2
 4c8:	ldr	r0, [r0]
 4cc:	ldrb	r0, [r0]
 4d0:	cmp	r0, #45	; 0x2d
 4d4:	beq	4dc <main+0x330>
 4d8:	b	51c <main+0x370>
 4dc:	movw	r0, #0
 4e0:	movt	r0, #0
 4e4:	ldr	r0, [r0]
 4e8:	movw	r1, #0
 4ec:	movt	r1, #0
 4f0:	bl	0 <fprintf>
 4f4:	str	r0, [sp, #40]	; 0x28
 4f8:	bl	644 <print_help>
 4fc:	movw	r0, #1
 500:	bl	0 <exit>
 504:	b	508 <main+0x35c>
 508:	b	50c <main+0x360>
 50c:	ldr	r0, [fp, #-24]	; 0xffffffe8
 510:	add	r0, r0, #1
 514:	str	r0, [fp, #-24]	; 0xffffffe8
 518:	b	358 <main+0x1ac>
 51c:	ldr	r0, [fp, #-24]	; 0xffffffe8
 520:	ldr	r1, [fp, #-8]
 524:	cmp	r0, r1
 528:	bne	554 <main+0x3a8>
 52c:	movw	r0, #0
 530:	movt	r0, #0
 534:	ldr	r0, [r0]
 538:	movw	r1, #0
 53c:	movt	r1, #0
 540:	bl	0 <fprintf>
 544:	str	r0, [sp, #36]	; 0x24
 548:	bl	644 <print_help>
 54c:	movw	r0, #1
 550:	bl	0 <exit>
 554:	bl	0 <coda_init>
 558:	cmp	r0, #0
 55c:	beq	5a8 <main+0x3fc>
 560:	movw	r0, #0
 564:	movt	r0, #0
 568:	ldr	r0, [r0]
 56c:	str	r0, [sp, #32]
 570:	bl	0 <coda_get_errno>
 574:	ldr	r0, [r0]
 578:	bl	0 <coda_errno_to_string>
 57c:	ldr	lr, [sp, #32]
 580:	str	r0, [sp, #28]
 584:	mov	r0, lr
 588:	movw	r1, #0
 58c:	movt	r1, #0
 590:	ldr	r2, [sp, #28]
 594:	bl	0 <fprintf>
 598:	movw	r1, #1
 59c:	str	r0, [sp, #24]
 5a0:	mov	r0, r1
 5a4:	bl	0 <exit>
 5a8:	ldr	r0, [fp, #-20]	; 0xffffffec
 5ac:	bl	0 <coda_set_option_perform_conversions>
 5b0:	ldr	lr, [fp, #-16]
 5b4:	ldr	r1, [fp, #-8]
 5b8:	ldr	r2, [fp, #-24]	; 0xffffffe8
 5bc:	sub	r1, r1, r2
 5c0:	ldr	r3, [fp, #-12]
 5c4:	add	r2, r3, r2, lsl #2
 5c8:	str	r0, [sp, #20]
 5cc:	mov	r0, lr
 5d0:	movw	r3, #0
 5d4:	movt	r3, #0
 5d8:	movw	lr, #0
 5dc:	str	lr, [sp]
 5e0:	bl	0 <coda_match_filefilter>
 5e4:	cmp	r0, #0
 5e8:	beq	634 <main+0x488>
 5ec:	movw	r0, #0
 5f0:	movt	r0, #0
 5f4:	ldr	r0, [r0]
 5f8:	str	r0, [sp, #16]
 5fc:	bl	0 <coda_get_errno>
 600:	ldr	r0, [r0]
 604:	bl	0 <coda_errno_to_string>
 608:	ldr	lr, [sp, #16]
 60c:	str	r0, [sp, #12]
 610:	mov	r0, lr
 614:	movw	r1, #0
 618:	movt	r1, #0
 61c:	ldr	r2, [sp, #12]
 620:	bl	0 <fprintf>
 624:	movw	r1, #1
 628:	str	r0, [sp, #8]
 62c:	mov	r0, r1
 630:	bl	0 <exit>
 634:	bl	0 <coda_done>
 638:	movw	r0, #0
 63c:	mov	sp, fp
 640:	pop	{fp, pc}

00000644 <print_help>:
 644:	push	{fp, lr}
 648:	mov	fp, sp
 64c:	sub	sp, sp, #120	; 0x78
 650:	movw	r0, #0
 654:	movt	r0, #0
 658:	bl	0 <printf>
 65c:	movw	lr, #0
 660:	movt	lr, #0
 664:	str	r0, [fp, #-4]
 668:	mov	r0, lr
 66c:	bl	0 <printf>
 670:	movw	lr, #0
 674:	movt	lr, #0
 678:	str	r0, [fp, #-8]
 67c:	mov	r0, lr
 680:	bl	0 <printf>
 684:	movw	lr, #0
 688:	movt	lr, #0
 68c:	str	r0, [fp, #-12]
 690:	mov	r0, lr
 694:	bl	0 <printf>
 698:	movw	lr, #0
 69c:	movt	lr, #0
 6a0:	str	r0, [fp, #-16]
 6a4:	mov	r0, lr
 6a8:	bl	0 <printf>
 6ac:	movw	lr, #0
 6b0:	movt	lr, #0
 6b4:	str	r0, [fp, #-20]	; 0xffffffec
 6b8:	mov	r0, lr
 6bc:	bl	0 <printf>
 6c0:	movw	lr, #0
 6c4:	movt	lr, #0
 6c8:	str	r0, [fp, #-24]	; 0xffffffe8
 6cc:	mov	r0, lr
 6d0:	bl	0 <printf>
 6d4:	movw	lr, #0
 6d8:	movt	lr, #0
 6dc:	str	r0, [fp, #-28]	; 0xffffffe4
 6e0:	mov	r0, lr
 6e4:	bl	0 <printf>
 6e8:	movw	lr, #0
 6ec:	movt	lr, #0
 6f0:	str	r0, [fp, #-32]	; 0xffffffe0
 6f4:	mov	r0, lr
 6f8:	bl	0 <printf>
 6fc:	movw	lr, #0
 700:	movt	lr, #0
 704:	str	r0, [fp, #-36]	; 0xffffffdc
 708:	mov	r0, lr
 70c:	bl	0 <printf>
 710:	movw	lr, #0
 714:	movt	lr, #0
 718:	str	r0, [fp, #-40]	; 0xffffffd8
 71c:	mov	r0, lr
 720:	bl	0 <printf>
 724:	movw	lr, #0
 728:	movt	lr, #0
 72c:	str	r0, [fp, #-44]	; 0xffffffd4
 730:	mov	r0, lr
 734:	bl	0 <printf>
 738:	movw	lr, #0
 73c:	movt	lr, #0
 740:	str	r0, [fp, #-48]	; 0xffffffd0
 744:	mov	r0, lr
 748:	bl	0 <printf>
 74c:	movw	lr, #0
 750:	movt	lr, #0
 754:	str	r0, [fp, #-52]	; 0xffffffcc
 758:	mov	r0, lr
 75c:	bl	0 <printf>
 760:	movw	lr, #0
 764:	movt	lr, #0
 768:	str	r0, [fp, #-56]	; 0xffffffc8
 76c:	mov	r0, lr
 770:	bl	0 <printf>
 774:	movw	lr, #0
 778:	movt	lr, #0
 77c:	str	r0, [sp, #60]	; 0x3c
 780:	mov	r0, lr
 784:	bl	0 <printf>
 788:	movw	lr, #0
 78c:	movt	lr, #0
 790:	str	r0, [sp, #56]	; 0x38
 794:	mov	r0, lr
 798:	bl	0 <printf>
 79c:	movw	lr, #0
 7a0:	movt	lr, #0
 7a4:	str	r0, [sp, #52]	; 0x34
 7a8:	mov	r0, lr
 7ac:	bl	0 <printf>
 7b0:	movw	lr, #0
 7b4:	movt	lr, #0
 7b8:	str	r0, [sp, #48]	; 0x30
 7bc:	mov	r0, lr
 7c0:	bl	0 <printf>
 7c4:	movw	lr, #0
 7c8:	movt	lr, #0
 7cc:	str	r0, [sp, #44]	; 0x2c
 7d0:	mov	r0, lr
 7d4:	bl	0 <printf>
 7d8:	movw	lr, #0
 7dc:	movt	lr, #0
 7e0:	str	r0, [sp, #40]	; 0x28
 7e4:	mov	r0, lr
 7e8:	bl	0 <printf>
 7ec:	movw	lr, #0
 7f0:	movt	lr, #0
 7f4:	str	r0, [sp, #36]	; 0x24
 7f8:	mov	r0, lr
 7fc:	bl	0 <printf>
 800:	movw	lr, #0
 804:	movt	lr, #0
 808:	str	r0, [sp, #32]
 80c:	mov	r0, lr
 810:	bl	0 <printf>
 814:	movw	lr, #0
 818:	movt	lr, #0
 81c:	str	r0, [sp, #28]
 820:	mov	r0, lr
 824:	bl	0 <printf>
 828:	movw	lr, #0
 82c:	movt	lr, #0
 830:	str	r0, [sp, #24]
 834:	mov	r0, lr
 838:	bl	0 <printf>
 83c:	movw	lr, #0
 840:	movt	lr, #0
 844:	str	r0, [sp, #20]
 848:	mov	r0, lr
 84c:	bl	0 <printf>
 850:	movw	lr, #0
 854:	movt	lr, #0
 858:	str	r0, [sp, #16]
 85c:	mov	r0, lr
 860:	bl	0 <printf>
 864:	movw	lr, #0
 868:	movt	lr, #0
 86c:	str	r0, [sp, #12]
 870:	mov	r0, lr
 874:	bl	0 <printf>
 878:	movw	lr, #0
 87c:	movt	lr, #0
 880:	str	r0, [sp, #8]
 884:	mov	r0, lr
 888:	bl	0 <printf>
 88c:	str	r0, [sp, #4]
 890:	mov	sp, fp
 894:	pop	{fp, pc}

00000898 <print_version>:
 898:	push	{fp, lr}
 89c:	mov	fp, sp
 8a0:	sub	sp, sp, #16
 8a4:	bl	0 <coda_get_libcoda_version>
 8a8:	movw	lr, #0
 8ac:	movt	lr, #0
 8b0:	str	r0, [fp, #-4]
 8b4:	mov	r0, lr
 8b8:	ldr	r1, [fp, #-4]
 8bc:	bl	0 <printf>
 8c0:	movw	r1, #0
 8c4:	movt	r1, #0
 8c8:	str	r0, [sp, #8]
 8cc:	mov	r0, r1
 8d0:	bl	0 <printf>
 8d4:	movw	r1, #0
 8d8:	movt	r1, #0
 8dc:	str	r0, [sp, #4]
 8e0:	mov	r0, r1
 8e4:	bl	0 <printf>
 8e8:	str	r0, [sp]
 8ec:	mov	sp, fp
 8f0:	pop	{fp, pc}
