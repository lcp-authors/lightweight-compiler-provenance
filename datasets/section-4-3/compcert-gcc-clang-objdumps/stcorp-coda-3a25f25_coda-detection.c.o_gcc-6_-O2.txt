
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-detection.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <delete_detection_node>:
   0:	push	{r4, r5, r6, lr}
   4:	mov	r5, r0
   8:	ldr	r0, [r0]
   c:	cmp	r0, #0
  10:	beq	18 <delete_detection_node+0x18>
  14:	bl	0 <free>
  18:	ldr	r0, [r5, #16]
  1c:	cmp	r0, #0
  20:	beq	54 <delete_detection_node+0x54>
  24:	ldr	r3, [r5, #12]
  28:	cmp	r3, #0
  2c:	ble	50 <delete_detection_node+0x50>
  30:	mov	r4, #0
  34:	ldr	r0, [r0, r4, lsl #2]
  38:	bl	0 <delete_detection_node>
  3c:	ldr	r3, [r5, #12]
  40:	add	r4, r4, #1
  44:	cmp	r3, r4
  48:	ldr	r0, [r5, #16]
  4c:	bgt	34 <delete_detection_node+0x34>
  50:	bl	0 <free>
  54:	mov	r0, r5
  58:	pop	{r4, r5, r6, lr}
  5c:	b	0 <free>

00000060 <detection_node_new>:
  60:	push	{r4, lr}
  64:	mov	r0, #20
  68:	sub	sp, sp, #8
  6c:	bl	0 <malloc>
  70:	subs	r4, r0, #0
  74:	beq	9c <detection_node_new+0x3c>
  78:	mov	r3, #0
  7c:	str	r3, [r4]
  80:	str	r3, [r4, #4]
  84:	str	r3, [r4, #8]
  88:	str	r3, [r4, #12]
  8c:	str	r3, [r4, #16]
  90:	mov	r0, r4
  94:	add	sp, sp, #8
  98:	pop	{r4, pc}
  9c:	mov	r3, #202	; 0xca
  a0:	str	r3, [sp]
  a4:	mov	r2, #20
  a8:	ldr	r3, [pc, #12]	; bc <detection_node_new+0x5c>
  ac:	ldr	r1, [pc, #12]	; c0 <detection_node_new+0x60>
  b0:	mvn	r0, #0
  b4:	bl	0 <coda_set_error>
  b8:	b	90 <detection_node_new+0x30>
  bc:	.word	0x00000000
  c0:	.word	0x00000050

000000c4 <detection_node_add_node.isra.1>:
  c4:	push	{r4, r5, r6, lr}
  c8:	mov	r6, r1
  cc:	ldr	r1, [r0]
  d0:	sub	sp, sp, #8
  d4:	tst	r1, #15
  d8:	mov	r5, r0
  dc:	mov	r4, r2
  e0:	beq	184 <detection_node_add_node.isra.1+0xc0>
  e4:	ldr	r0, [r6]
  e8:	lsl	r3, r1, #2
  ec:	add	r2, r1, #1
  f0:	cmp	r1, #0
  f4:	str	r4, [r0, r1, lsl #2]
  f8:	add	ip, r0, r3
  fc:	str	r2, [r5]
 100:	ble	178 <detection_node_add_node.isra.1+0xb4>
 104:	ldr	r2, [r4]
 108:	cmp	r2, #0
 10c:	beq	178 <detection_node_add_node.isra.1+0xb4>
 110:	sub	r3, r3, #4
 114:	add	lr, r0, r3
 118:	ldr	r2, [r0, r3]
 11c:	ldr	r3, [r2, #4]
 120:	cmp	r3, #0
 124:	beq	178 <detection_node_add_node.isra.1+0xb4>
 128:	sub	r5, r1, #-1073741822	; 0xc0000002
 12c:	lsl	r5, r5, #2
 130:	add	r3, r5, #4
 134:	add	r3, r0, r3
 138:	add	r0, r0, r5
 13c:	b	160 <detection_node_add_node.isra.1+0x9c>
 140:	ldr	r4, [r3], #-4
 144:	ldr	r2, [r4]
 148:	cmp	r2, #0
 14c:	beq	178 <detection_node_add_node.isra.1+0xb4>
 150:	ldr	r2, [r0], #-4
 154:	ldr	r5, [r2, #4]
 158:	cmp	r5, #0
 15c:	beq	178 <detection_node_add_node.isra.1+0xb4>
 160:	subs	r1, r1, #1
 164:	str	r2, [ip]
 168:	str	r4, [lr]
 16c:	mov	ip, r3
 170:	mov	lr, r0
 174:	bne	140 <detection_node_add_node.isra.1+0x7c>
 178:	mov	r0, #0
 17c:	add	sp, sp, #8
 180:	pop	{r4, r5, r6, pc}
 184:	add	r1, r1, #16
 188:	ldr	r0, [r6]
 18c:	lsl	r1, r1, #2
 190:	bl	0 <realloc>
 194:	cmp	r0, #0
 198:	ldrne	r1, [r5]
 19c:	strne	r0, [r6]
 1a0:	bne	e8 <detection_node_add_node.isra.1+0x24>
 1a4:	ldr	r2, [r5]
 1a8:	mov	r3, #226	; 0xe2
 1ac:	add	r2, r2, #16
 1b0:	str	r3, [sp]
 1b4:	mvn	r0, #0
 1b8:	lsl	r2, r2, #2
 1bc:	ldr	r3, [pc, #12]	; 1d0 <detection_node_add_node.isra.1+0x10c>
 1c0:	ldr	r1, [pc, #12]	; 1d4 <detection_node_add_node.isra.1+0x110>
 1c4:	bl	0 <coda_set_error>
 1c8:	mvn	r0, #0
 1cc:	b	17c <detection_node_add_node.isra.1+0xb8>
 1d0:	.word	0x00000000
 1d4:	.word	0x00000050

000001d8 <coda_detection_rule_entry_delete>:
 1d8:	push	{r4, lr}
 1dc:	mov	r4, r0
 1e0:	ldr	r0, [r0]
 1e4:	cmp	r0, #0
 1e8:	beq	1f0 <coda_detection_rule_entry_delete+0x18>
 1ec:	bl	0 <free>
 1f0:	ldr	r0, [r4, #4]
 1f4:	cmp	r0, #0
 1f8:	beq	200 <coda_detection_rule_entry_delete+0x28>
 1fc:	bl	0 <coda_expression_delete>
 200:	mov	r0, r4
 204:	pop	{r4, lr}
 208:	b	0 <free>

0000020c <coda_detection_rule_entry_new>:
 20c:	push	{r4, r5, r6, lr}
 210:	subs	r5, r0, #0
 214:	sub	sp, sp, #16
 218:	beq	28c <coda_detection_rule_entry_new+0x80>
 21c:	add	r1, sp, #12
 220:	bl	0 <coda_expression_from_string>
 224:	cmp	r0, #0
 228:	bne	2c0 <coda_detection_rule_entry_new+0xb4>
 22c:	add	r1, sp, #8
 230:	ldr	r0, [sp, #12]
 234:	bl	0 <coda_expression_get_type>
 238:	subs	r6, r0, #0
 23c:	ldr	r0, [sp, #12]
 240:	bne	2d0 <coda_detection_rule_entry_new+0xc4>
 244:	bl	0 <coda_expression_delete>
 248:	ldr	r3, [sp, #8]
 24c:	cmp	r3, #4
 250:	bne	2d8 <coda_detection_rule_entry_new+0xcc>
 254:	mov	r0, #8
 258:	bl	0 <malloc>
 25c:	subs	r4, r0, #0
 260:	beq	2a4 <coda_detection_rule_entry_new+0x98>
 264:	mov	r0, r5
 268:	str	r6, [r4, #4]
 26c:	bl	0 <strdup>
 270:	cmp	r0, #0
 274:	mov	r5, r0
 278:	str	r0, [r4]
 27c:	beq	2e8 <coda_detection_rule_entry_new+0xdc>
 280:	mov	r0, r4
 284:	add	sp, sp, #16
 288:	pop	{r4, r5, r6, pc}
 28c:	mov	r0, #8
 290:	bl	0 <malloc>
 294:	subs	r4, r0, #0
 298:	strne	r5, [r4]
 29c:	strne	r5, [r4, #4]
 2a0:	bne	280 <coda_detection_rule_entry_new+0x74>
 2a4:	mov	r3, #82	; 0x52
 2a8:	str	r3, [sp]
 2ac:	mov	r2, #8
 2b0:	ldr	r3, [pc, #84]	; 30c <coda_detection_rule_entry_new+0x100>
 2b4:	ldr	r1, [pc, #84]	; 310 <coda_detection_rule_entry_new+0x104>
 2b8:	mvn	r0, #0
 2bc:	bl	0 <coda_set_error>
 2c0:	mov	r4, #0
 2c4:	mov	r0, r4
 2c8:	add	sp, sp, #16
 2cc:	pop	{r4, r5, r6, pc}
 2d0:	bl	0 <coda_expression_delete>
 2d4:	b	2c0 <coda_detection_rule_entry_new+0xb4>
 2d8:	ldr	r1, [pc, #52]	; 314 <coda_detection_rule_entry_new+0x108>
 2dc:	ldr	r0, [pc, #52]	; 318 <coda_detection_rule_entry_new+0x10c>
 2e0:	bl	0 <coda_set_error>
 2e4:	b	2c0 <coda_detection_rule_entry_new+0xb4>
 2e8:	mov	r3, #94	; 0x5e
 2ec:	ldr	r2, [pc, #24]	; 30c <coda_detection_rule_entry_new+0x100>
 2f0:	ldr	r1, [pc, #36]	; 31c <coda_detection_rule_entry_new+0x110>
 2f4:	mvn	r0, #0
 2f8:	bl	0 <coda_set_error>
 2fc:	mov	r0, r4
 300:	bl	0 <free>
 304:	mov	r4, r5
 308:	b	280 <coda_detection_rule_entry_new+0x74>
 30c:	.word	0x00000000
 310:	.word	0x00000050
 314:	.word	0x00000088
 318:	.word	0xfffffe70
 31c:	.word	0x000000ac

00000320 <coda_detection_rule_entry_set_expression>:
 320:	ldr	r3, [r0, #4]
 324:	cmp	r3, #0
 328:	bne	338 <coda_detection_rule_entry_set_expression+0x18>
 32c:	str	r1, [r0, #4]
 330:	mov	r0, r3
 334:	bx	lr
 338:	push	{r4, lr}
 33c:	ldr	r1, [pc, #16]	; 354 <coda_detection_rule_entry_set_expression+0x34>
 340:	ldr	r0, [pc, #16]	; 358 <coda_detection_rule_entry_set_expression+0x38>
 344:	bl	0 <coda_set_error>
 348:	mvn	r3, #0
 34c:	mov	r0, r3
 350:	pop	{r4, pc}
 354:	.word	0x000000e0
 358:	.word	0xfffffe70

0000035c <coda_detection_rule_delete>:
 35c:	ldr	r2, [r0, #4]
 360:	push	{r4, r5, r6, lr}
 364:	cmp	r2, #0
 368:	mov	r5, r0
 36c:	beq	3a8 <coda_detection_rule_delete+0x4c>
 370:	ldr	r1, [r0]
 374:	cmp	r1, #0
 378:	ble	3a0 <coda_detection_rule_delete+0x44>
 37c:	mov	r4, #0
 380:	ldr	r3, [r2, r4, lsl #2]
 384:	add	r4, r4, #1
 388:	subs	r0, r3, #0
 38c:	beq	398 <coda_detection_rule_delete+0x3c>
 390:	bl	1d8 <coda_detection_rule_entry_delete>
 394:	ldm	r5, {r1, r2}
 398:	cmp	r1, r4
 39c:	bgt	380 <coda_detection_rule_delete+0x24>
 3a0:	mov	r0, r2
 3a4:	bl	0 <free>
 3a8:	mov	r0, r5
 3ac:	pop	{r4, r5, r6, lr}
 3b0:	b	0 <free>

000003b4 <coda_detection_rule_new>:
 3b4:	push	{r4, lr}
 3b8:	mov	r0, #12
 3bc:	sub	sp, sp, #8
 3c0:	bl	0 <malloc>
 3c4:	subs	r4, r0, #0
 3c8:	movne	r3, #0
 3cc:	strne	r3, [r4]
 3d0:	strne	r3, [r4, #4]
 3d4:	strne	r3, [r4, #8]
 3d8:	beq	3e8 <coda_detection_rule_new+0x34>
 3dc:	mov	r0, r4
 3e0:	add	sp, sp, #8
 3e4:	pop	{r4, pc}
 3e8:	mov	r3, #141	; 0x8d
 3ec:	str	r3, [sp]
 3f0:	mov	r2, #12
 3f4:	ldr	r3, [pc, #12]	; 408 <coda_detection_rule_new+0x54>
 3f8:	ldr	r1, [pc, #12]	; 40c <coda_detection_rule_new+0x58>
 3fc:	mvn	r0, #0
 400:	bl	0 <coda_set_error>
 404:	b	3dc <coda_detection_rule_new+0x28>
 408:	.word	0x00000000
 40c:	.word	0x00000050

00000410 <coda_detection_rule_add_entry>:
 410:	ldr	r3, [r1]
 414:	push	{r4, r5, lr}
 418:	cmp	r3, #0
 41c:	sub	sp, sp, #12
 420:	mov	r5, r1
 424:	mov	r4, r0
 428:	beq	464 <coda_detection_rule_add_entry+0x54>
 42c:	ldr	r1, [r4]
 430:	ldr	r0, [r4, #4]
 434:	add	r1, r1, #1
 438:	lsl	r1, r1, #2
 43c:	bl	0 <realloc>
 440:	ldr	r2, [r4]
 444:	subs	r3, r0, #0
 448:	beq	484 <coda_detection_rule_add_entry+0x74>
 44c:	add	r1, r2, #1
 450:	mov	r0, #0
 454:	stm	r4, {r1, r3}
 458:	str	r5, [r3, r2, lsl #2]
 45c:	add	sp, sp, #12
 460:	pop	{r4, r5, pc}
 464:	ldr	r3, [r1, #4]
 468:	cmp	r3, #0
 46c:	bne	42c <coda_detection_rule_add_entry+0x1c>
 470:	ldr	r0, [pc, #52]	; 4ac <coda_detection_rule_add_entry+0x9c>
 474:	ldr	r1, [pc, #52]	; 4b0 <coda_detection_rule_add_entry+0xa0>
 478:	bl	0 <coda_set_error>
 47c:	mvn	r0, #0
 480:	b	45c <coda_detection_rule_add_entry+0x4c>
 484:	add	r2, r2, #1
 488:	mov	r3, #165	; 0xa5
 48c:	str	r3, [sp]
 490:	mvn	r0, #0
 494:	lsl	r2, r2, #2
 498:	ldr	r3, [pc, #20]	; 4b4 <coda_detection_rule_add_entry+0xa4>
 49c:	ldr	r1, [pc, #20]	; 4b8 <coda_detection_rule_add_entry+0xa8>
 4a0:	bl	0 <coda_set_error>
 4a4:	mvn	r0, #0
 4a8:	b	45c <coda_detection_rule_add_entry+0x4c>
 4ac:	.word	0xfffffe70
 4b0:	.word	0x0000010c
 4b4:	.word	0x00000000
 4b8:	.word	0x00000050

000004bc <coda_detection_tree_delete>:
 4bc:	b	0 <delete_detection_node>

000004c0 <coda_detection_tree_add_rule>:
 4c0:	ldr	r3, [r1]
 4c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 4c8:	sub	sp, sp, #28
 4cc:	cmp	r3, #0
 4d0:	str	r1, [sp, #12]
 4d4:	beq	8cc <coda_detection_tree_add_rule+0x40c>
 4d8:	ldr	sl, [r0]
 4dc:	mov	r4, r0
 4e0:	cmp	sl, #0
 4e4:	beq	938 <coda_detection_tree_add_rule+0x478>
 4e8:	cmp	r3, #0
 4ec:	ble	838 <coda_detection_tree_add_rule+0x378>
 4f0:	mov	r3, #0
 4f4:	mov	r9, r3
 4f8:	str	r3, [sp, #16]
 4fc:	ldr	r3, [sp, #12]
 500:	ldr	r2, [sp, #16]
 504:	mov	r8, sl
 508:	ldr	r3, [r3, #4]
 50c:	ldr	r3, [r3, r2, lsl #2]
 510:	str	r3, [sp, #8]
 514:	ldr	r7, [r3]
 518:	cmp	r7, #0
 51c:	bne	7c4 <coda_detection_tree_add_rule+0x304>
 520:	ldr	r3, [r8, #12]
 524:	cmp	r3, #0
 528:	ble	644 <coda_detection_tree_add_rule+0x184>
 52c:	mov	r6, #0
 530:	mov	fp, r6
 534:	cmp	r7, #0
 538:	ldr	r3, [r8, #16]
 53c:	beq	7e4 <coda_detection_tree_add_rule+0x324>
 540:	ldr	sl, [r3, r6]
 544:	ldr	lr, [sl]
 548:	cmp	lr, #0
 54c:	beq	5c8 <coda_detection_tree_add_rule+0x108>
 550:	ldrb	r4, [lr]
 554:	cmp	r4, #0
 558:	beq	88c <coda_detection_tree_add_rule+0x3cc>
 55c:	ldrb	r3, [r7]
 560:	cmp	r3, r4
 564:	bne	5c8 <coda_detection_tree_add_rule+0x108>
 568:	mov	r2, lr
 56c:	mov	ip, r7
 570:	mov	r1, r9
 574:	b	588 <coda_detection_tree_add_rule+0xc8>
 578:	ldrb	r0, [ip, #1]!
 57c:	cmp	r3, r0
 580:	bne	688 <coda_detection_tree_add_rule+0x1c8>
 584:	mov	r1, r4
 588:	ldrb	r3, [r2, #1]!
 58c:	add	r4, r1, #1
 590:	mov	r5, r4
 594:	cmp	r3, #0
 598:	bne	578 <coda_detection_tree_add_rule+0xb8>
 59c:	ldrb	r3, [r7, r5]
 5a0:	cmp	r3, #0
 5a4:	beq	874 <coda_detection_tree_add_rule+0x3b4>
 5a8:	cmp	r3, #47	; 0x2f
 5ac:	cmpne	r3, #64	; 0x40
 5b0:	sub	r2, r3, #47	; 0x2f
 5b4:	clz	r2, r2
 5b8:	lsr	r2, r2, #5
 5bc:	beq	898 <coda_detection_tree_add_rule+0x3d8>
 5c0:	cmp	r3, #91	; 0x5b
 5c4:	beq	894 <coda_detection_tree_add_rule+0x3d4>
 5c8:	ldr	r3, [r8, #12]
 5cc:	add	fp, fp, #1
 5d0:	cmp	fp, r3
 5d4:	add	r6, r6, #4
 5d8:	blt	534 <coda_detection_tree_add_rule+0x74>
 5dc:	bl	60 <detection_node_new>
 5e0:	subs	sl, r0, #0
 5e4:	beq	86c <coda_detection_tree_add_rule+0x3ac>
 5e8:	cmp	r7, #0
 5ec:	beq	650 <coda_detection_tree_add_rule+0x190>
 5f0:	mov	r4, r8
 5f4:	mov	r8, sl
 5f8:	mov	r0, r7
 5fc:	bl	0 <strdup>
 600:	cmp	r0, #0
 604:	str	r0, [r8]
 608:	beq	91c <coda_detection_tree_add_rule+0x45c>
 60c:	mov	r2, r8
 610:	add	r1, r4, #16
 614:	add	r0, r4, #12
 618:	bl	c4 <detection_node_add_node.isra.1>
 61c:	cmp	r0, #0
 620:	bne	914 <coda_detection_tree_add_rule+0x454>
 624:	ldr	r3, [sp, #8]
 628:	ldr	r3, [r3, #4]
 62c:	cmp	r3, #0
 630:	beq	90c <coda_detection_tree_add_rule+0x44c>
 634:	ldr	r3, [r8, #12]
 638:	mov	r7, #0
 63c:	cmp	r3, r7
 640:	bgt	52c <coda_detection_tree_add_rule+0x6c>
 644:	bl	60 <detection_node_new>
 648:	subs	sl, r0, #0
 64c:	beq	86c <coda_detection_tree_add_rule+0x3ac>
 650:	ldr	r3, [sp, #8]
 654:	mov	r2, sl
 658:	add	r1, r8, #16
 65c:	ldr	r3, [r3, #4]
 660:	add	r0, r8, #12
 664:	str	r3, [sl, #4]
 668:	bl	c4 <detection_node_add_node.isra.1>
 66c:	cmp	r0, #0
 670:	beq	81c <coda_detection_tree_add_rule+0x35c>
 674:	mov	r0, sl
 678:	bl	0 <delete_detection_node>
 67c:	mvn	r0, #0
 680:	add	sp, sp, #28
 684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 688:	cmp	r4, #1
 68c:	beq	6ac <coda_detection_tree_add_rule+0x1ec>
 690:	add	r3, r7, r4
 694:	ldrb	r3, [r3, #-1]
 698:	cmp	r3, #91	; 0x5b
 69c:	cmpne	r3, #47	; 0x2f
 6a0:	moveq	r5, r1
 6a4:	ldrbeq	r0, [r7, r1]
 6a8:	moveq	r4, r5
 6ac:	sub	r1, r0, #47	; 0x2f
 6b0:	clz	r1, r1
 6b4:	lsr	r1, r1, #5
 6b8:	cmp	r0, #64	; 0x40
 6bc:	movne	r3, r1
 6c0:	orreq	r3, r1, #1
 6c4:	cmp	r0, #91	; 0x5b
 6c8:	movne	r0, r3
 6cc:	orreq	r0, r3, #1
 6d0:	cmp	r0, #0
 6d4:	beq	5c8 <coda_detection_tree_add_rule+0x108>
 6d8:	ldrb	r3, [lr, r5]
 6dc:	cmp	r3, #47	; 0x2f
 6e0:	cmpne	r3, #64	; 0x40
 6e4:	sub	r2, r3, #47	; 0x2f
 6e8:	clz	r2, r2
 6ec:	lsr	r2, r2, #5
 6f0:	beq	700 <coda_detection_tree_add_rule+0x240>
 6f4:	cmp	r3, #91	; 0x5b
 6f8:	bne	5c8 <coda_detection_tree_add_rule+0x108>
 6fc:	mov	r2, r9
 700:	add	r3, r1, r4
 704:	add	fp, r4, r2
 708:	str	r3, [sp, #20]
 70c:	bl	60 <detection_node_new>
 710:	subs	sl, r0, #0
 714:	beq	86c <coda_detection_tree_add_rule+0x3ac>
 718:	add	r0, r4, #1
 71c:	bl	0 <malloc>
 720:	cmp	r0, #0
 724:	str	r0, [sl]
 728:	beq	8e8 <coda_detection_tree_add_rule+0x428>
 72c:	mov	r2, r5
 730:	mov	r1, r7
 734:	bl	0 <memcpy>
 738:	mov	r1, sl
 73c:	add	r0, sl, #12
 740:	ldr	r3, [r1], #16
 744:	strb	r9, [r3, r5]
 748:	ldr	r3, [r8, #16]
 74c:	ldr	r2, [r3, r6]
 750:	bl	c4 <detection_node_add_node.isra.1>
 754:	cmp	r0, #0
 758:	bne	674 <coda_detection_tree_add_rule+0x1b4>
 75c:	ldr	r3, [r8, #16]
 760:	ldr	r3, [r3, r6]
 764:	ldr	r2, [r3]
 768:	ldrb	r1, [r2, fp]
 76c:	cmp	r1, #0
 770:	moveq	r3, r9
 774:	beq	7a4 <coda_detection_tree_add_rule+0x2e4>
 778:	mov	r3, fp
 77c:	sub	r0, r3, fp
 780:	add	r3, r3, #1
 784:	strb	r1, [r2, r0]
 788:	ldr	r2, [r8, #16]
 78c:	ldr	r2, [r2, r6]
 790:	ldr	r2, [r2]
 794:	ldrb	r1, [r2, r3]
 798:	cmp	r1, #0
 79c:	bne	77c <coda_detection_tree_add_rule+0x2bc>
 7a0:	sub	r3, r3, fp
 7a4:	strb	r9, [r2, r3]
 7a8:	ldr	r2, [sp, #20]
 7ac:	ldr	r3, [r8, #16]
 7b0:	add	r7, r7, r2
 7b4:	cmp	r7, #0
 7b8:	mov	r8, sl
 7bc:	str	sl, [r3, r6]
 7c0:	beq	520 <coda_detection_tree_add_rule+0x60>
 7c4:	ldrb	r3, [r7]
 7c8:	cmp	r3, #0
 7cc:	bne	8a8 <coda_detection_tree_add_rule+0x3e8>
 7d0:	ldr	r2, [r8, #12]
 7d4:	cmp	r2, #0
 7d8:	ble	644 <coda_detection_tree_add_rule+0x184>
 7dc:	mov	r7, r3
 7e0:	b	52c <coda_detection_tree_add_rule+0x6c>
 7e4:	ldr	r3, [r3, r6]
 7e8:	ldr	r2, [r3]
 7ec:	cmp	r2, #0
 7f0:	bne	5c8 <coda_detection_tree_add_rule+0x108>
 7f4:	ldr	r1, [r3, #4]
 7f8:	ldr	r3, [sp, #8]
 7fc:	ldr	r0, [r3, #4]
 800:	bl	0 <coda_expression_is_equal>
 804:	cmp	r0, #0
 808:	beq	5c8 <coda_detection_tree_add_rule+0x108>
 80c:	ldr	r3, [r8, #16]
 810:	ldr	sl, [r3, r6]
 814:	cmp	sl, #0
 818:	beq	86c <coda_detection_tree_add_rule+0x3ac>
 81c:	ldr	r3, [sp, #12]
 820:	ldr	r2, [sp, #16]
 824:	ldr	r3, [r3]
 828:	add	r2, r2, #1
 82c:	cmp	r3, r2
 830:	str	r2, [sp, #16]
 834:	bgt	4fc <coda_detection_tree_add_rule+0x3c>
 838:	ldr	r0, [sl, #8]
 83c:	cmp	r0, #0
 840:	ldreq	r3, [sp, #12]
 844:	streq	r3, [sl, #8]
 848:	beq	680 <coda_detection_tree_add_rule+0x1c0>
 84c:	ldr	r2, [sp, #12]
 850:	ldr	r3, [r0, #8]
 854:	ldr	r1, [pc, #248]	; 954 <coda_detection_tree_add_rule+0x494>
 858:	ldr	r2, [r2, #8]
 85c:	ldr	r3, [r3, #8]
 860:	ldr	r0, [pc, #240]	; 958 <coda_detection_tree_add_rule+0x498>
 864:	ldr	r2, [r2, #8]
 868:	bl	0 <coda_set_error>
 86c:	mvn	r0, #0
 870:	b	680 <coda_detection_tree_add_rule+0x1c0>
 874:	ldr	r3, [sp, #8]
 878:	ldr	r3, [r3, #4]
 87c:	cmp	r3, #0
 880:	beq	81c <coda_detection_tree_add_rule+0x35c>
 884:	mov	r8, sl
 888:	b	634 <coda_detection_tree_add_rule+0x174>
 88c:	mov	r5, r9
 890:	b	59c <coda_detection_tree_add_rule+0xdc>
 894:	mov	r2, r9
 898:	add	r2, r4, r2
 89c:	add	r7, r7, r2
 8a0:	mov	r8, sl
 8a4:	b	518 <coda_detection_tree_add_rule+0x58>
 8a8:	ldr	r3, [r8, #12]
 8ac:	cmp	r3, #0
 8b0:	bgt	52c <coda_detection_tree_add_rule+0x6c>
 8b4:	bl	60 <detection_node_new>
 8b8:	cmp	r0, #0
 8bc:	beq	86c <coda_detection_tree_add_rule+0x3ac>
 8c0:	mov	r4, r8
 8c4:	mov	r8, r0
 8c8:	b	5f8 <coda_detection_tree_add_rule+0x138>
 8cc:	ldr	r3, [r1, #8]
 8d0:	ldr	r0, [pc, #128]	; 958 <coda_detection_tree_add_rule+0x498>
 8d4:	ldr	r1, [pc, #128]	; 95c <coda_detection_tree_add_rule+0x49c>
 8d8:	ldr	r2, [r3, #8]
 8dc:	bl	0 <coda_set_error>
 8e0:	mvn	r0, #0
 8e4:	b	680 <coda_detection_tree_add_rule+0x1c0>
 8e8:	ldr	r3, [pc, #112]	; 960 <coda_detection_tree_add_rule+0x4a0>
 8ec:	mvn	r0, #0
 8f0:	str	r3, [sp]
 8f4:	mov	r2, r4
 8f8:	ldr	r3, [pc, #100]	; 964 <coda_detection_tree_add_rule+0x4a4>
 8fc:	ldr	r1, [pc, #100]	; 968 <coda_detection_tree_add_rule+0x4a8>
 900:	bl	0 <coda_set_error>
 904:	mvn	r0, #0
 908:	b	680 <coda_detection_tree_add_rule+0x1c0>
 90c:	mov	sl, r8
 910:	b	81c <coda_detection_tree_add_rule+0x35c>
 914:	mov	sl, r8
 918:	b	674 <coda_detection_tree_add_rule+0x1b4>
 91c:	mvn	r0, #0
 920:	ldr	r3, [pc, #68]	; 96c <coda_detection_tree_add_rule+0x4ac>
 924:	ldr	r2, [pc, #56]	; 964 <coda_detection_tree_add_rule+0x4a4>
 928:	ldr	r1, [pc, #64]	; 970 <coda_detection_tree_add_rule+0x4b0>
 92c:	bl	0 <coda_set_error>
 930:	mvn	r0, #0
 934:	b	680 <coda_detection_tree_add_rule+0x1c0>
 938:	bl	60 <detection_node_new>
 93c:	subs	sl, r0, #0
 940:	beq	86c <coda_detection_tree_add_rule+0x3ac>
 944:	ldr	r3, [sp, #12]
 948:	ldr	r3, [r3]
 94c:	str	sl, [r4]
 950:	b	4e8 <coda_detection_tree_add_rule+0x28>
 954:	.word	0x0000017c
 958:	.word	0xfffffe70
 95c:	.word	0x00000144
 960:	.word	0x0000014b
 964:	.word	0x00000000
 968:	.word	0x00000050
 96c:	.word	0x0000017f
 970:	.word	0x000000ac

00000974 <coda_evaluate_detection_node>:
 974:	push	{r4, r5, r6, r7, lr}
 978:	sub	sp, sp, #532	; 0x214
 97c:	mov	r5, r0
 980:	mov	r6, r2
 984:	mov	r7, #0
 988:	add	r0, sp, #8
 98c:	mov	r2, #520	; 0x208
 990:	bl	0 <memcpy>
 994:	cmp	r5, r7
 998:	str	r7, [r6]
 99c:	beq	a68 <coda_evaluate_detection_node+0xf4>
 9a0:	ldr	r4, [r5]
 9a4:	cmp	r4, #0
 9a8:	beq	a38 <coda_evaluate_detection_node+0xc4>
 9ac:	mov	r1, r4
 9b0:	add	r0, sp, #8
 9b4:	bl	0 <coda_cursor_goto>
 9b8:	cmp	r0, #0
 9bc:	bne	a18 <coda_evaluate_detection_node+0xa4>
 9c0:	ldr	r3, [r5, #12]
 9c4:	cmp	r3, #0
 9c8:	movgt	r4, #0
 9cc:	bgt	9ec <coda_evaluate_detection_node+0x78>
 9d0:	b	a74 <coda_evaluate_detection_node+0x100>
 9d4:	ldr	r3, [r6]
 9d8:	cmp	r3, #0
 9dc:	bne	a68 <coda_evaluate_detection_node+0xf4>
 9e0:	ldr	r3, [r5, #12]
 9e4:	cmp	r3, r4
 9e8:	ble	a74 <coda_evaluate_detection_node+0x100>
 9ec:	ldr	r3, [r5, #16]
 9f0:	mov	r2, r6
 9f4:	add	r1, sp, #8
 9f8:	ldr	r0, [r3, r4, lsl #2]
 9fc:	bl	974 <coda_evaluate_detection_node>
 a00:	add	r4, r4, #1
 a04:	cmp	r0, #0
 a08:	beq	9d4 <coda_evaluate_detection_node+0x60>
 a0c:	mvn	r0, #0
 a10:	add	sp, sp, #532	; 0x214
 a14:	pop	{r4, r5, r6, r7, pc}
 a18:	ldr	r3, [pc, #132]	; aa4 <coda_evaluate_detection_node+0x130>
 a1c:	bl	0 <__aeabi_read_tp>
 a20:	mov	r2, r0
 a24:	ldr	r3, [pc, r3]
 a28:	mov	r0, r7
 a2c:	str	r7, [r2, r3]
 a30:	add	sp, sp, #532	; 0x214
 a34:	pop	{r4, r5, r6, r7, pc}
 a38:	ldr	r0, [r5, #4]
 a3c:	cmp	r0, #0
 a40:	beq	9c0 <coda_evaluate_detection_node+0x4c>
 a44:	add	r2, sp, #4
 a48:	add	r1, sp, #8
 a4c:	bl	0 <coda_expression_eval_bool>
 a50:	cmp	r0, #0
 a54:	beq	a94 <coda_evaluate_detection_node+0x120>
 a58:	ldr	r3, [pc, #72]	; aa8 <coda_evaluate_detection_node+0x134>
 a5c:	bl	0 <__aeabi_read_tp>
 a60:	ldr	r3, [pc, r3]
 a64:	str	r4, [r0, r3]
 a68:	mov	r0, #0
 a6c:	add	sp, sp, #532	; 0x214
 a70:	pop	{r4, r5, r6, r7, pc}
 a74:	ldr	r3, [r5, #8]
 a78:	cmp	r3, #0
 a7c:	beq	a68 <coda_evaluate_detection_node+0xf4>
 a80:	ldr	r3, [r3, #8]
 a84:	mov	r0, #0
 a88:	str	r3, [r6]
 a8c:	add	sp, sp, #532	; 0x214
 a90:	pop	{r4, r5, r6, r7, pc}
 a94:	ldr	r3, [sp, #4]
 a98:	cmp	r3, #0
 a9c:	bne	9c0 <coda_evaluate_detection_node+0x4c>
 aa0:	b	a68 <coda_evaluate_detection_node+0xf4>
 aa4:	.word	0x00000078
 aa8:	.word	0x00000040
