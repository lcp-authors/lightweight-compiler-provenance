
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-netcdf-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
       0:	strd	r4, [sp, #-24]!	; 0xffffffe8
       4:	strd	r6, [sp, #8]
       8:	str	fp, [sp, #16]
       c:	str	lr, [sp, #20]
      10:	add	fp, sp, #20
      14:	sub	sp, sp, #96	; 0x60
      18:	str	r0, [fp, #-96]	; 0xffffffa0
      1c:	strd	r2, [fp, #-108]	; 0xffffff94
      20:	ldr	r3, [fp, #-96]	; 0xffffffa0
      24:	ldr	r3, [r3, #48]	; 0x30
      28:	cmp	r3, #0
      2c:	beq	110 <read_bytes+0x110>
      30:	ldrd	r0, [fp, #-108]	; 0xffffff94
      34:	ldrd	r2, [fp, #4]
      38:	adds	r6, r0, r2
      3c:	adc	r7, r1, r3
      40:	ldr	r3, [fp, #-96]	; 0xffffffa0
      44:	ldrd	r2, [r3, #40]	; 0x28
      48:	cmp	r7, r3
      4c:	cmpeq	r6, r2
      50:	bls	ec <read_bytes+0xec>
      54:	ldr	r3, [fp, #-96]	; 0xffffffa0
      58:	ldr	r3, [r3, #16]
      5c:	cmp	r3, #0
      60:	beq	74 <read_bytes+0x74>
      64:	ldr	r3, [fp, #-96]	; 0xffffffa0
      68:	ldr	r3, [r3, #16]
      6c:	cmp	r3, #1
      70:	bne	8c <read_bytes+0x8c>
      74:	movw	r1, #0
      78:	movt	r1, #0
      7c:	mvn	r0, #300	; 0x12c
      80:	bl	0 <coda_set_error>
      84:	mvn	r3, #0
      88:	b	1e8 <read_bytes+0x1e8>
      8c:	sub	r3, fp, #44	; 0x2c
      90:	mov	r2, r3
      94:	ldrd	r0, [fp, #4]
      98:	bl	0 <coda_str64>
      9c:	sub	r3, fp, #68	; 0x44
      a0:	mov	r2, r3
      a4:	ldrd	r0, [fp, #-108]	; 0xffffff94
      a8:	bl	0 <coda_str64>
      ac:	ldr	r3, [fp, #-96]	; 0xffffffa0
      b0:	ldrd	r0, [r3, #40]	; 0x28
      b4:	sub	r3, fp, #92	; 0x5c
      b8:	mov	r2, r3
      bc:	bl	0 <coda_str64>
      c0:	sub	r1, fp, #68	; 0x44
      c4:	sub	r2, fp, #44	; 0x2c
      c8:	sub	r3, fp, #92	; 0x5c
      cc:	str	r3, [sp]
      d0:	mov	r3, r1
      d4:	movw	r1, #0
      d8:	movt	r1, #0
      dc:	mvn	r0, #300	; 0x12c
      e0:	bl	0 <coda_set_error>
      e4:	mvn	r3, #0
      e8:	b	1e8 <read_bytes+0x1e8>
      ec:	ldr	r3, [fp, #-96]	; 0xffffffa0
      f0:	ldr	r2, [r3, #48]	; 0x30
      f4:	ldr	r3, [fp, #-108]	; 0xffffff94
      f8:	add	r3, r2, r3
      fc:	ldr	r2, [fp, #4]
     100:	mov	r1, r3
     104:	ldr	r0, [fp, #12]
     108:	bl	0 <memcpy>
     10c:	b	1e4 <read_bytes+0x1e4>
     110:	ldr	r3, [fp, #-96]	; 0xffffffa0
     114:	ldr	r3, [r3, #16]
     118:	cmp	r3, #0
     11c:	beq	150 <read_bytes+0x150>
     120:	ldr	r3, [fp, #-96]	; 0xffffffa0
     124:	ldr	r3, [r3, #16]
     128:	cmp	r3, #1
     12c:	beq	150 <read_bytes+0x150>
     130:	movw	r3, #0
     134:	movt	r3, #0
     138:	mov	r2, #83	; 0x53
     13c:	movw	r1, #0
     140:	movt	r1, #0
     144:	movw	r0, #0
     148:	movt	r0, #0
     14c:	bl	0 <__assert_fail>
     150:	ldrd	r0, [fp, #-108]	; 0xffffff94
     154:	ldrd	r2, [fp, #4]
     158:	adds	r4, r0, r2
     15c:	adc	r5, r1, r3
     160:	ldr	r3, [fp, #-96]	; 0xffffffa0
     164:	ldrd	r2, [r3, #8]
     168:	cmp	r5, r3
     16c:	cmpeq	r4, r2
     170:	bls	18c <read_bytes+0x18c>
     174:	movw	r1, #0
     178:	movt	r1, #0
     17c:	mvn	r0, #300	; 0x12c
     180:	bl	0 <coda_set_error>
     184:	mvn	r3, #0
     188:	b	1e8 <read_bytes+0x1e8>
     18c:	ldr	r3, [fp, #-96]	; 0xffffffa0
     190:	ldr	r0, [r3, #56]	; 0x38
     194:	ldr	r2, [fp, #4]
     198:	ldr	r3, [fp, #-108]	; 0xffffff94
     19c:	ldr	r1, [fp, #12]
     1a0:	bl	0 <pread>
     1a4:	mov	r3, r0
     1a8:	cmp	r3, #0
     1ac:	bge	1e4 <read_bytes+0x1e4>
     1b0:	bl	0 <__errno_location>
     1b4:	mov	r3, r0
     1b8:	ldr	r3, [r3]
     1bc:	mov	r0, r3
     1c0:	bl	0 <strerror>
     1c4:	mov	r3, r0
     1c8:	mov	r2, r3
     1cc:	movw	r1, #0
     1d0:	movt	r1, #0
     1d4:	mvn	r0, #21
     1d8:	bl	0 <coda_set_error>
     1dc:	mvn	r3, #0
     1e0:	b	1e8 <read_bytes+0x1e8>
     1e4:	mov	r3, #0
     1e8:	mov	r0, r3
     1ec:	sub	sp, fp, #20
     1f0:	ldrd	r4, [sp]
     1f4:	ldrd	r6, [sp, #8]
     1f8:	ldr	fp, [sp, #16]
     1fc:	add	sp, sp, #20
     200:	pop	{pc}		; (ldr pc, [sp], #4)

00000204 <swap2>:
     204:	push	{fp}		; (str fp, [sp, #-4]!)
     208:	add	fp, sp, #0
     20c:	sub	sp, sp, #20
     210:	str	r0, [fp, #-16]
     214:	ldr	r3, [fp, #-16]
     218:	str	r3, [fp, #-8]
     21c:	ldr	r3, [fp, #-8]
     220:	ldrb	r2, [r3]
     224:	ldr	r3, [fp, #-8]
     228:	add	r3, r3, #1
     22c:	ldrb	r3, [r3]
     230:	eor	r3, r3, r2
     234:	uxtb	r2, r3
     238:	ldr	r3, [fp, #-8]
     23c:	strb	r2, [r3]
     240:	ldr	r3, [fp, #-8]
     244:	ldrb	r1, [r3]
     248:	ldr	r3, [fp, #-8]
     24c:	add	r3, r3, #1
     250:	ldrb	r2, [r3]
     254:	ldr	r3, [fp, #-8]
     258:	add	r3, r3, #1
     25c:	eor	r2, r2, r1
     260:	uxtb	r2, r2
     264:	strb	r2, [r3]
     268:	ldr	r3, [fp, #-8]
     26c:	ldrb	r2, [r3]
     270:	ldr	r3, [fp, #-8]
     274:	add	r3, r3, #1
     278:	ldrb	r3, [r3]
     27c:	eor	r3, r3, r2
     280:	uxtb	r2, r3
     284:	ldr	r3, [fp, #-8]
     288:	strb	r2, [r3]
     28c:	nop	{0}
     290:	add	sp, fp, #0
     294:	pop	{fp}		; (ldr fp, [sp], #4)
     298:	bx	lr

0000029c <swap4>:
     29c:	push	{fp}		; (str fp, [sp, #-4]!)
     2a0:	add	fp, sp, #0
     2a4:	sub	sp, sp, #20
     2a8:	str	r0, [fp, #-16]
     2ac:	ldr	r3, [fp, #-16]
     2b0:	str	r3, [fp, #-8]
     2b4:	ldr	r3, [fp, #-8]
     2b8:	ldrb	r2, [r3]
     2bc:	ldr	r3, [fp, #-8]
     2c0:	add	r3, r3, #3
     2c4:	ldrb	r3, [r3]
     2c8:	eor	r3, r3, r2
     2cc:	uxtb	r2, r3
     2d0:	ldr	r3, [fp, #-8]
     2d4:	strb	r2, [r3]
     2d8:	ldr	r3, [fp, #-8]
     2dc:	ldrb	r1, [r3]
     2e0:	ldr	r3, [fp, #-8]
     2e4:	add	r3, r3, #3
     2e8:	ldrb	r2, [r3]
     2ec:	ldr	r3, [fp, #-8]
     2f0:	add	r3, r3, #3
     2f4:	eor	r2, r2, r1
     2f8:	uxtb	r2, r2
     2fc:	strb	r2, [r3]
     300:	ldr	r3, [fp, #-8]
     304:	ldrb	r2, [r3]
     308:	ldr	r3, [fp, #-8]
     30c:	add	r3, r3, #3
     310:	ldrb	r3, [r3]
     314:	eor	r3, r3, r2
     318:	uxtb	r2, r3
     31c:	ldr	r3, [fp, #-8]
     320:	strb	r2, [r3]
     324:	ldr	r3, [fp, #-8]
     328:	add	r3, r3, #1
     32c:	ldrb	r1, [r3]
     330:	ldr	r3, [fp, #-8]
     334:	add	r3, r3, #2
     338:	ldrb	r2, [r3]
     33c:	ldr	r3, [fp, #-8]
     340:	add	r3, r3, #1
     344:	eor	r2, r2, r1
     348:	uxtb	r2, r2
     34c:	strb	r2, [r3]
     350:	ldr	r3, [fp, #-8]
     354:	add	r3, r3, #1
     358:	ldrb	r1, [r3]
     35c:	ldr	r3, [fp, #-8]
     360:	add	r3, r3, #2
     364:	ldrb	r2, [r3]
     368:	ldr	r3, [fp, #-8]
     36c:	add	r3, r3, #2
     370:	eor	r2, r2, r1
     374:	uxtb	r2, r2
     378:	strb	r2, [r3]
     37c:	ldr	r3, [fp, #-8]
     380:	add	r3, r3, #1
     384:	ldrb	r1, [r3]
     388:	ldr	r3, [fp, #-8]
     38c:	add	r3, r3, #2
     390:	ldrb	r2, [r3]
     394:	ldr	r3, [fp, #-8]
     398:	add	r3, r3, #1
     39c:	eor	r2, r2, r1
     3a0:	uxtb	r2, r2
     3a4:	strb	r2, [r3]
     3a8:	nop	{0}
     3ac:	add	sp, fp, #0
     3b0:	pop	{fp}		; (ldr fp, [sp], #4)
     3b4:	bx	lr

000003b8 <swap8>:
     3b8:	push	{fp}		; (str fp, [sp, #-4]!)
     3bc:	add	fp, sp, #0
     3c0:	sub	sp, sp, #20
     3c4:	str	r0, [fp, #-16]
     3c8:	ldr	r3, [fp, #-16]
     3cc:	str	r3, [fp, #-8]
     3d0:	ldr	r3, [fp, #-8]
     3d4:	ldrb	r2, [r3]
     3d8:	ldr	r3, [fp, #-8]
     3dc:	add	r3, r3, #7
     3e0:	ldrb	r3, [r3]
     3e4:	eor	r3, r3, r2
     3e8:	uxtb	r2, r3
     3ec:	ldr	r3, [fp, #-8]
     3f0:	strb	r2, [r3]
     3f4:	ldr	r3, [fp, #-8]
     3f8:	ldrb	r1, [r3]
     3fc:	ldr	r3, [fp, #-8]
     400:	add	r3, r3, #7
     404:	ldrb	r2, [r3]
     408:	ldr	r3, [fp, #-8]
     40c:	add	r3, r3, #7
     410:	eor	r2, r2, r1
     414:	uxtb	r2, r2
     418:	strb	r2, [r3]
     41c:	ldr	r3, [fp, #-8]
     420:	ldrb	r2, [r3]
     424:	ldr	r3, [fp, #-8]
     428:	add	r3, r3, #7
     42c:	ldrb	r3, [r3]
     430:	eor	r3, r3, r2
     434:	uxtb	r2, r3
     438:	ldr	r3, [fp, #-8]
     43c:	strb	r2, [r3]
     440:	ldr	r3, [fp, #-8]
     444:	add	r3, r3, #1
     448:	ldrb	r1, [r3]
     44c:	ldr	r3, [fp, #-8]
     450:	add	r3, r3, #6
     454:	ldrb	r2, [r3]
     458:	ldr	r3, [fp, #-8]
     45c:	add	r3, r3, #1
     460:	eor	r2, r2, r1
     464:	uxtb	r2, r2
     468:	strb	r2, [r3]
     46c:	ldr	r3, [fp, #-8]
     470:	add	r3, r3, #1
     474:	ldrb	r1, [r3]
     478:	ldr	r3, [fp, #-8]
     47c:	add	r3, r3, #6
     480:	ldrb	r2, [r3]
     484:	ldr	r3, [fp, #-8]
     488:	add	r3, r3, #6
     48c:	eor	r2, r2, r1
     490:	uxtb	r2, r2
     494:	strb	r2, [r3]
     498:	ldr	r3, [fp, #-8]
     49c:	add	r3, r3, #1
     4a0:	ldrb	r1, [r3]
     4a4:	ldr	r3, [fp, #-8]
     4a8:	add	r3, r3, #6
     4ac:	ldrb	r2, [r3]
     4b0:	ldr	r3, [fp, #-8]
     4b4:	add	r3, r3, #1
     4b8:	eor	r2, r2, r1
     4bc:	uxtb	r2, r2
     4c0:	strb	r2, [r3]
     4c4:	ldr	r3, [fp, #-8]
     4c8:	add	r3, r3, #2
     4cc:	ldrb	r1, [r3]
     4d0:	ldr	r3, [fp, #-8]
     4d4:	add	r3, r3, #5
     4d8:	ldrb	r2, [r3]
     4dc:	ldr	r3, [fp, #-8]
     4e0:	add	r3, r3, #2
     4e4:	eor	r2, r2, r1
     4e8:	uxtb	r2, r2
     4ec:	strb	r2, [r3]
     4f0:	ldr	r3, [fp, #-8]
     4f4:	add	r3, r3, #2
     4f8:	ldrb	r1, [r3]
     4fc:	ldr	r3, [fp, #-8]
     500:	add	r3, r3, #5
     504:	ldrb	r2, [r3]
     508:	ldr	r3, [fp, #-8]
     50c:	add	r3, r3, #5
     510:	eor	r2, r2, r1
     514:	uxtb	r2, r2
     518:	strb	r2, [r3]
     51c:	ldr	r3, [fp, #-8]
     520:	add	r3, r3, #2
     524:	ldrb	r1, [r3]
     528:	ldr	r3, [fp, #-8]
     52c:	add	r3, r3, #5
     530:	ldrb	r2, [r3]
     534:	ldr	r3, [fp, #-8]
     538:	add	r3, r3, #2
     53c:	eor	r2, r2, r1
     540:	uxtb	r2, r2
     544:	strb	r2, [r3]
     548:	ldr	r3, [fp, #-8]
     54c:	add	r3, r3, #3
     550:	ldrb	r1, [r3]
     554:	ldr	r3, [fp, #-8]
     558:	add	r3, r3, #4
     55c:	ldrb	r2, [r3]
     560:	ldr	r3, [fp, #-8]
     564:	add	r3, r3, #3
     568:	eor	r2, r2, r1
     56c:	uxtb	r2, r2
     570:	strb	r2, [r3]
     574:	ldr	r3, [fp, #-8]
     578:	add	r3, r3, #3
     57c:	ldrb	r1, [r3]
     580:	ldr	r3, [fp, #-8]
     584:	add	r3, r3, #4
     588:	ldrb	r2, [r3]
     58c:	ldr	r3, [fp, #-8]
     590:	add	r3, r3, #4
     594:	eor	r2, r2, r1
     598:	uxtb	r2, r2
     59c:	strb	r2, [r3]
     5a0:	ldr	r3, [fp, #-8]
     5a4:	add	r3, r3, #3
     5a8:	ldrb	r1, [r3]
     5ac:	ldr	r3, [fp, #-8]
     5b0:	add	r3, r3, #4
     5b4:	ldrb	r2, [r3]
     5b8:	ldr	r3, [fp, #-8]
     5bc:	add	r3, r3, #3
     5c0:	eor	r2, r2, r1
     5c4:	uxtb	r2, r2
     5c8:	strb	r2, [r3]
     5cc:	nop	{0}
     5d0:	add	sp, fp, #0
     5d4:	pop	{fp}		; (ldr fp, [sp], #4)
     5d8:	bx	lr

000005dc <coda_netcdf_cursor_set_product>:
     5dc:	push	{fp}		; (str fp, [sp, #-4]!)
     5e0:	add	fp, sp, #0
     5e4:	sub	sp, sp, #12
     5e8:	str	r0, [fp, #-8]
     5ec:	str	r1, [fp, #-12]
     5f0:	ldr	r3, [fp, #-8]
     5f4:	ldr	r2, [fp, #-12]
     5f8:	str	r2, [r3]
     5fc:	ldr	r3, [fp, #-8]
     600:	mov	r2, #1
     604:	str	r2, [r3, #4]
     608:	ldr	r3, [fp, #-12]
     60c:	ldr	r2, [r3, #20]
     610:	ldr	r3, [fp, #-8]
     614:	str	r2, [r3, #8]
     618:	ldr	r3, [fp, #-8]
     61c:	mvn	r2, #0
     620:	str	r2, [r3, #12]
     624:	ldr	r1, [fp, #-8]
     628:	mvn	r2, #0
     62c:	mvn	r3, #0
     630:	strd	r2, [r1, #16]
     634:	mov	r3, #0
     638:	mov	r0, r3
     63c:	add	sp, fp, #0
     640:	pop	{fp}		; (ldr fp, [sp], #4)
     644:	bx	lr

00000648 <coda_netcdf_cursor_goto_array_element>:
     648:	str	fp, [sp, #-8]!
     64c:	str	lr, [sp, #4]
     650:	add	fp, sp, #4
     654:	sub	sp, sp, #64	; 0x40
     658:	str	r0, [fp, #-56]	; 0xffffffc8
     65c:	str	r1, [fp, #-60]	; 0xffffffc4
     660:	str	r2, [fp, #-64]	; 0xffffffc0
     664:	ldr	r3, [fp, #-56]	; 0xffffffc8
     668:	ldr	r3, [r3, #4]
     66c:	sub	r3, r3, #1
     670:	ldr	r2, [fp, #-56]	; 0xffffffc8
     674:	lsl	r3, r3, #4
     678:	add	r3, r2, r3
     67c:	ldr	r3, [r3, #8]
     680:	ldr	r3, [r3, #4]
     684:	sub	r2, fp, #52	; 0x34
     688:	sub	r1, fp, #20
     68c:	mov	r0, r3
     690:	bl	0 <coda_type_get_array_dim>
     694:	mov	r3, r0
     698:	cmp	r3, #0
     69c:	beq	6a8 <coda_netcdf_cursor_goto_array_element+0x60>
     6a0:	mvn	r3, #0
     6a4:	b	884 <coda_netcdf_cursor_goto_array_element+0x23c>
     6a8:	ldr	r3, [fp, #-20]	; 0xffffffec
     6ac:	ldr	r2, [fp, #-60]	; 0xffffffc4
     6b0:	cmp	r2, r3
     6b4:	beq	6d8 <coda_netcdf_cursor_goto_array_element+0x90>
     6b8:	ldr	r3, [fp, #-20]	; 0xffffffec
     6bc:	ldr	r2, [fp, #-60]	; 0xffffffc4
     6c0:	movw	r1, #0
     6c4:	movt	r1, #0
     6c8:	mvn	r0, #105	; 0x69
     6cc:	bl	0 <coda_set_error>
     6d0:	mvn	r3, #0
     6d4:	b	884 <coda_netcdf_cursor_goto_array_element+0x23c>
     6d8:	mov	r3, #0
     6dc:	str	r3, [fp, #-8]
     6e0:	mov	r3, #0
     6e4:	str	r3, [fp, #-12]
     6e8:	b	7d0 <coda_netcdf_cursor_goto_array_element+0x188>
     6ec:	ldr	r3, [fp, #-12]
     6f0:	lsl	r3, r3, #2
     6f4:	ldr	r2, [fp, #-64]	; 0xffffffc0
     6f8:	add	r3, r2, r3
     6fc:	ldr	r3, [r3]
     700:	cmp	r3, #0
     704:	blt	738 <coda_netcdf_cursor_goto_array_element+0xf0>
     708:	ldr	r3, [fp, #-12]
     70c:	lsl	r3, r3, #2
     710:	ldr	r2, [fp, #-64]	; 0xffffffc0
     714:	add	r3, r2, r3
     718:	ldr	r2, [r3]
     71c:	ldr	r3, [fp, #-12]
     720:	lsl	r3, r3, #2
     724:	sub	r1, fp, #4
     728:	add	r3, r1, r3
     72c:	ldr	r3, [r3, #-48]	; 0xffffffd0
     730:	cmp	r2, r3
     734:	blt	778 <coda_netcdf_cursor_goto_array_element+0x130>
     738:	ldr	r3, [fp, #-12]
     73c:	lsl	r3, r3, #2
     740:	ldr	r2, [fp, #-64]	; 0xffffffc0
     744:	add	r3, r2, r3
     748:	ldr	r2, [r3]
     74c:	ldr	r3, [fp, #-12]
     750:	lsl	r3, r3, #2
     754:	sub	r1, fp, #4
     758:	add	r3, r1, r3
     75c:	ldr	r3, [r3, #-48]	; 0xffffffd0
     760:	movw	r1, #0
     764:	movt	r1, #0
     768:	mvn	r0, #106	; 0x6a
     76c:	bl	0 <coda_set_error>
     770:	mvn	r3, #0
     774:	b	884 <coda_netcdf_cursor_goto_array_element+0x23c>
     778:	ldr	r3, [fp, #-12]
     77c:	cmp	r3, #0
     780:	ble	7a4 <coda_netcdf_cursor_goto_array_element+0x15c>
     784:	ldr	r3, [fp, #-12]
     788:	lsl	r3, r3, #2
     78c:	sub	r2, fp, #4
     790:	add	r3, r2, r3
     794:	ldr	r2, [r3, #-48]	; 0xffffffd0
     798:	ldr	r3, [fp, #-8]
     79c:	mul	r3, r2, r3
     7a0:	str	r3, [fp, #-8]
     7a4:	ldr	r3, [fp, #-12]
     7a8:	lsl	r3, r3, #2
     7ac:	ldr	r2, [fp, #-64]	; 0xffffffc0
     7b0:	add	r3, r2, r3
     7b4:	ldr	r3, [r3]
     7b8:	ldr	r2, [fp, #-8]
     7bc:	add	r3, r2, r3
     7c0:	str	r3, [fp, #-8]
     7c4:	ldr	r3, [fp, #-12]
     7c8:	add	r3, r3, #1
     7cc:	str	r3, [fp, #-12]
     7d0:	ldr	r3, [fp, #-20]	; 0xffffffec
     7d4:	ldr	r2, [fp, #-12]
     7d8:	cmp	r2, r3
     7dc:	blt	6ec <coda_netcdf_cursor_goto_array_element+0xa4>
     7e0:	ldr	r3, [fp, #-56]	; 0xffffffc8
     7e4:	ldr	r3, [r3, #4]
     7e8:	sub	r3, r3, #1
     7ec:	ldr	r2, [fp, #-56]	; 0xffffffc8
     7f0:	lsl	r3, r3, #4
     7f4:	add	r3, r2, r3
     7f8:	ldr	r3, [r3, #8]
     7fc:	ldr	r3, [r3, #12]
     800:	str	r3, [fp, #-16]
     804:	ldr	r3, [fp, #-56]	; 0xffffffc8
     808:	ldr	r3, [r3, #4]
     80c:	add	r2, r3, #1
     810:	ldr	r3, [fp, #-56]	; 0xffffffc8
     814:	str	r2, [r3, #4]
     818:	ldr	r3, [fp, #-56]	; 0xffffffc8
     81c:	ldr	r3, [r3, #4]
     820:	sub	r3, r3, #1
     824:	ldr	r2, [fp, #-56]	; 0xffffffc8
     828:	lsl	r3, r3, #4
     82c:	add	r3, r2, r3
     830:	ldr	r2, [fp, #-16]
     834:	str	r2, [r3, #8]
     838:	ldr	r3, [fp, #-56]	; 0xffffffc8
     83c:	ldr	r3, [r3, #4]
     840:	sub	r3, r3, #1
     844:	ldr	r2, [fp, #-56]	; 0xffffffc8
     848:	lsl	r3, r3, #4
     84c:	add	r3, r2, r3
     850:	ldr	r2, [fp, #-8]
     854:	str	r2, [r3, #12]
     858:	ldr	r3, [fp, #-56]	; 0xffffffc8
     85c:	ldr	r3, [r3, #4]
     860:	sub	r3, r3, #1
     864:	ldr	r2, [fp, #-56]	; 0xffffffc8
     868:	add	r3, r3, #1
     86c:	lsl	r3, r3, #4
     870:	add	r1, r2, r3
     874:	mvn	r2, #0
     878:	mvn	r3, #0
     87c:	strd	r2, [r1]
     880:	mov	r3, #0
     884:	mov	r0, r3
     888:	sub	sp, fp, #4
     88c:	ldr	fp, [sp]
     890:	add	sp, sp, #4
     894:	pop	{pc}		; (ldr pc, [sp], #4)

00000898 <coda_netcdf_cursor_goto_array_element_by_index>:
     898:	str	fp, [sp, #-8]!
     89c:	str	lr, [sp, #4]
     8a0:	add	fp, sp, #4
     8a4:	sub	sp, sp, #16
     8a8:	str	r0, [fp, #-16]
     8ac:	str	r1, [fp, #-20]	; 0xffffffec
     8b0:	ldr	r3, [pc, #300]	; 9e4 <coda_netcdf_cursor_goto_array_element_by_index+0x14c>
     8b4:	ldr	r3, [pc, r3]
     8b8:	mrc	15, 0, r2, cr13, cr0, {3}
     8bc:	ldr	r3, [r2, r3]
     8c0:	cmp	r3, #0
     8c4:	beq	92c <coda_netcdf_cursor_goto_array_element_by_index+0x94>
     8c8:	ldr	r3, [fp, #-16]
     8cc:	ldr	r3, [r3, #4]
     8d0:	sub	r3, r3, #1
     8d4:	ldr	r2, [fp, #-16]
     8d8:	lsl	r3, r3, #4
     8dc:	add	r3, r2, r3
     8e0:	ldr	r3, [r3, #8]
     8e4:	ldr	r3, [r3, #4]
     8e8:	ldr	r3, [r3, #44]	; 0x2c
     8ec:	str	r3, [fp, #-8]
     8f0:	ldr	r3, [fp, #-20]	; 0xffffffec
     8f4:	cmp	r3, #0
     8f8:	blt	90c <coda_netcdf_cursor_goto_array_element_by_index+0x74>
     8fc:	ldr	r2, [fp, #-20]	; 0xffffffec
     900:	ldr	r3, [fp, #-8]
     904:	cmp	r2, r3
     908:	blt	92c <coda_netcdf_cursor_goto_array_element_by_index+0x94>
     90c:	ldr	r3, [fp, #-8]
     910:	ldr	r2, [fp, #-20]	; 0xffffffec
     914:	movw	r1, #0
     918:	movt	r1, #0
     91c:	mvn	r0, #106	; 0x6a
     920:	bl	0 <coda_set_error>
     924:	mvn	r3, #0
     928:	b	9d0 <coda_netcdf_cursor_goto_array_element_by_index+0x138>
     92c:	ldr	r3, [fp, #-16]
     930:	ldr	r3, [r3, #4]
     934:	sub	r3, r3, #1
     938:	ldr	r2, [fp, #-16]
     93c:	lsl	r3, r3, #4
     940:	add	r3, r2, r3
     944:	ldr	r3, [r3, #8]
     948:	ldr	r3, [r3, #12]
     94c:	str	r3, [fp, #-12]
     950:	ldr	r3, [fp, #-16]
     954:	ldr	r3, [r3, #4]
     958:	add	r2, r3, #1
     95c:	ldr	r3, [fp, #-16]
     960:	str	r2, [r3, #4]
     964:	ldr	r3, [fp, #-16]
     968:	ldr	r3, [r3, #4]
     96c:	sub	r3, r3, #1
     970:	ldr	r2, [fp, #-16]
     974:	lsl	r3, r3, #4
     978:	add	r3, r2, r3
     97c:	ldr	r2, [fp, #-12]
     980:	str	r2, [r3, #8]
     984:	ldr	r3, [fp, #-16]
     988:	ldr	r3, [r3, #4]
     98c:	sub	r3, r3, #1
     990:	ldr	r2, [fp, #-16]
     994:	lsl	r3, r3, #4
     998:	add	r3, r2, r3
     99c:	ldr	r2, [fp, #-20]	; 0xffffffec
     9a0:	str	r2, [r3, #12]
     9a4:	ldr	r3, [fp, #-16]
     9a8:	ldr	r3, [r3, #4]
     9ac:	sub	r3, r3, #1
     9b0:	ldr	r2, [fp, #-16]
     9b4:	add	r3, r3, #1
     9b8:	lsl	r3, r3, #4
     9bc:	add	r1, r2, r3
     9c0:	mvn	r2, #0
     9c4:	mvn	r3, #0
     9c8:	strd	r2, [r1]
     9cc:	mov	r3, #0
     9d0:	mov	r0, r3
     9d4:	sub	sp, fp, #4
     9d8:	ldr	fp, [sp]
     9dc:	add	sp, sp, #4
     9e0:	pop	{pc}		; (ldr pc, [sp], #4)
     9e4:	.word	0x00000128

000009e8 <coda_netcdf_cursor_goto_next_array_element>:
     9e8:	str	fp, [sp, #-8]!
     9ec:	str	lr, [sp, #4]
     9f0:	add	fp, sp, #4
     9f4:	sub	sp, sp, #16
     9f8:	str	r0, [fp, #-16]
     9fc:	ldr	r3, [pc, #224]	; ae4 <coda_netcdf_cursor_goto_next_array_element+0xfc>
     a00:	ldr	r3, [pc, r3]
     a04:	mrc	15, 0, r2, cr13, cr0, {3}
     a08:	ldr	r3, [r2, r3]
     a0c:	cmp	r3, #0
     a10:	beq	a9c <coda_netcdf_cursor_goto_next_array_element+0xb4>
     a14:	ldr	r3, [fp, #-16]
     a18:	ldr	r3, [r3, #4]
     a1c:	sub	r3, r3, #1
     a20:	ldr	r2, [fp, #-16]
     a24:	lsl	r3, r3, #4
     a28:	add	r3, r2, r3
     a2c:	ldr	r3, [r3, #12]
     a30:	add	r3, r3, #1
     a34:	str	r3, [fp, #-8]
     a38:	ldr	r3, [fp, #-16]
     a3c:	ldr	r3, [r3, #4]
     a40:	sub	r3, r3, #2
     a44:	ldr	r2, [fp, #-16]
     a48:	lsl	r3, r3, #4
     a4c:	add	r3, r2, r3
     a50:	ldr	r3, [r3, #8]
     a54:	ldr	r3, [r3, #4]
     a58:	ldr	r3, [r3, #44]	; 0x2c
     a5c:	str	r3, [fp, #-12]
     a60:	ldr	r3, [fp, #-8]
     a64:	cmp	r3, #0
     a68:	blt	a7c <coda_netcdf_cursor_goto_next_array_element+0x94>
     a6c:	ldr	r2, [fp, #-8]
     a70:	ldr	r3, [fp, #-12]
     a74:	cmp	r2, r3
     a78:	blt	a9c <coda_netcdf_cursor_goto_next_array_element+0xb4>
     a7c:	ldr	r3, [fp, #-12]
     a80:	ldr	r2, [fp, #-8]
     a84:	movw	r1, #0
     a88:	movt	r1, #0
     a8c:	mvn	r0, #106	; 0x6a
     a90:	bl	0 <coda_set_error>
     a94:	mvn	r3, #0
     a98:	b	ad0 <coda_netcdf_cursor_goto_next_array_element+0xe8>
     a9c:	ldr	r3, [fp, #-16]
     aa0:	ldr	r3, [r3, #4]
     aa4:	sub	r2, r3, #1
     aa8:	ldr	r1, [fp, #-16]
     aac:	lsl	r3, r2, #4
     ab0:	add	r3, r1, r3
     ab4:	ldr	r3, [r3, #12]
     ab8:	add	r1, r3, #1
     abc:	ldr	r0, [fp, #-16]
     ac0:	lsl	r3, r2, #4
     ac4:	add	r3, r0, r3
     ac8:	str	r1, [r3, #12]
     acc:	mov	r3, #0
     ad0:	mov	r0, r3
     ad4:	sub	sp, fp, #4
     ad8:	ldr	fp, [sp]
     adc:	add	sp, sp, #4
     ae0:	pop	{pc}		; (ldr pc, [sp], #4)
     ae4:	.word	0x000000dc

00000ae8 <coda_netcdf_cursor_goto_attributes>:
     ae8:	str	r4, [sp, #-12]!
     aec:	str	fp, [sp, #4]
     af0:	str	lr, [sp, #8]
     af4:	add	fp, sp, #8
     af8:	sub	sp, sp, #20
     afc:	str	r0, [fp, #-24]	; 0xffffffe8
     b00:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b04:	ldr	r3, [r3, #4]
     b08:	sub	r3, r3, #1
     b0c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     b10:	lsl	r3, r3, #4
     b14:	add	r3, r2, r3
     b18:	ldr	r3, [r3, #8]
     b1c:	str	r3, [fp, #-16]
     b20:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b24:	ldr	r3, [r3, #4]
     b28:	add	r2, r3, #1
     b2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b30:	str	r2, [r3, #4]
     b34:	ldr	r3, [fp, #-16]
     b38:	ldr	r3, [r3, #8]
     b3c:	cmp	r3, #0
     b40:	beq	b6c <coda_netcdf_cursor_goto_attributes+0x84>
     b44:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b48:	ldr	r3, [r3, #4]
     b4c:	sub	r3, r3, #1
     b50:	ldr	r2, [fp, #-16]
     b54:	ldr	r2, [r2, #8]
     b58:	ldr	r1, [fp, #-24]	; 0xffffffe8
     b5c:	lsl	r3, r3, #4
     b60:	add	r3, r1, r3
     b64:	str	r2, [r3, #8]
     b68:	b	b94 <coda_netcdf_cursor_goto_attributes+0xac>
     b6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b70:	ldr	r3, [r3, #4]
     b74:	sub	r4, r3, #1
     b78:	mov	r0, #6
     b7c:	bl	0 <coda_mem_empty_record>
     b80:	mov	r1, r0
     b84:	ldr	r2, [fp, #-24]	; 0xffffffe8
     b88:	lsl	r3, r4, #4
     b8c:	add	r3, r2, r3
     b90:	str	r1, [r3, #8]
     b94:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b98:	ldr	r3, [r3, #4]
     b9c:	sub	r3, r3, #1
     ba0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     ba4:	lsl	r3, r3, #4
     ba8:	add	r3, r2, r3
     bac:	mvn	r2, #0
     bb0:	str	r2, [r3, #12]
     bb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     bb8:	ldr	r3, [r3, #4]
     bbc:	sub	r3, r3, #1
     bc0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     bc4:	add	r3, r3, #1
     bc8:	lsl	r3, r3, #4
     bcc:	add	r1, r2, r3
     bd0:	mvn	r2, #0
     bd4:	mvn	r3, #0
     bd8:	strd	r2, [r1]
     bdc:	mov	r3, #0
     be0:	mov	r0, r3
     be4:	sub	sp, fp, #8
     be8:	ldr	r4, [sp]
     bec:	ldr	fp, [sp, #4]
     bf0:	add	sp, sp, #8
     bf4:	pop	{pc}		; (ldr pc, [sp], #4)

00000bf8 <coda_netcdf_cursor_get_num_elements>:
     bf8:	push	{fp}		; (str fp, [sp, #-4]!)
     bfc:	add	fp, sp, #0
     c00:	sub	sp, sp, #12
     c04:	str	r0, [fp, #-8]
     c08:	str	r1, [fp, #-12]
     c0c:	ldr	r3, [fp, #-8]
     c10:	ldr	r3, [r3, #4]
     c14:	sub	r3, r3, #1
     c18:	ldr	r2, [fp, #-8]
     c1c:	lsl	r3, r3, #4
     c20:	add	r3, r2, r3
     c24:	ldr	r3, [r3, #8]
     c28:	ldr	r3, [r3, #4]
     c2c:	ldr	r3, [r3, #8]
     c30:	cmp	r3, #1
     c34:	bne	c68 <coda_netcdf_cursor_get_num_elements+0x70>
     c38:	ldr	r3, [fp, #-8]
     c3c:	ldr	r3, [r3, #4]
     c40:	sub	r3, r3, #1
     c44:	ldr	r2, [fp, #-8]
     c48:	lsl	r3, r3, #4
     c4c:	add	r3, r2, r3
     c50:	ldr	r3, [r3, #8]
     c54:	ldr	r3, [r3, #4]
     c58:	ldr	r2, [r3, #44]	; 0x2c
     c5c:	ldr	r3, [fp, #-12]
     c60:	str	r2, [r3]
     c64:	b	c74 <coda_netcdf_cursor_get_num_elements+0x7c>
     c68:	ldr	r3, [fp, #-12]
     c6c:	mov	r2, #1
     c70:	str	r2, [r3]
     c74:	mov	r3, #0
     c78:	mov	r0, r3
     c7c:	add	sp, fp, #0
     c80:	pop	{fp}		; (ldr fp, [sp], #4)
     c84:	bx	lr

00000c88 <coda_netcdf_cursor_get_string_length>:
     c88:	str	fp, [sp, #-8]!
     c8c:	str	lr, [sp, #4]
     c90:	add	fp, sp, #4
     c94:	sub	sp, sp, #8
     c98:	str	r0, [fp, #-8]
     c9c:	str	r1, [fp, #-12]
     ca0:	ldr	r3, [fp, #-8]
     ca4:	ldr	r3, [r3, #4]
     ca8:	sub	r3, r3, #1
     cac:	ldr	r2, [fp, #-8]
     cb0:	lsl	r3, r3, #4
     cb4:	add	r3, r2, r3
     cb8:	ldr	r3, [r3, #8]
     cbc:	ldr	r3, [r3, #4]
     cc0:	ldr	r1, [fp, #-12]
     cc4:	mov	r0, r3
     cc8:	bl	0 <coda_type_get_string_length>
     ccc:	mov	r3, r0
     cd0:	mov	r0, r3
     cd4:	sub	sp, fp, #4
     cd8:	ldr	fp, [sp]
     cdc:	add	sp, sp, #4
     ce0:	pop	{pc}		; (ldr pc, [sp], #4)

00000ce4 <coda_netcdf_cursor_get_array_dim>:
     ce4:	str	fp, [sp, #-8]!
     ce8:	str	lr, [sp, #4]
     cec:	add	fp, sp, #4
     cf0:	sub	sp, sp, #16
     cf4:	str	r0, [fp, #-8]
     cf8:	str	r1, [fp, #-12]
     cfc:	str	r2, [fp, #-16]
     d00:	ldr	r3, [fp, #-8]
     d04:	ldr	r3, [r3, #4]
     d08:	sub	r3, r3, #1
     d0c:	ldr	r2, [fp, #-8]
     d10:	lsl	r3, r3, #4
     d14:	add	r3, r2, r3
     d18:	ldr	r3, [r3, #8]
     d1c:	ldr	r3, [r3, #4]
     d20:	ldr	r2, [fp, #-16]
     d24:	ldr	r1, [fp, #-12]
     d28:	mov	r0, r3
     d2c:	bl	0 <coda_type_get_array_dim>
     d30:	mov	r3, r0
     d34:	mov	r0, r3
     d38:	sub	sp, fp, #4
     d3c:	ldr	fp, [sp]
     d40:	add	sp, sp, #4
     d44:	pop	{pc}		; (ldr pc, [sp], #4)

00000d48 <read_array>:
     d48:	strd	r4, [sp, #-16]!
     d4c:	str	fp, [sp, #8]
     d50:	str	lr, [sp, #12]
     d54:	add	fp, sp, #12
     d58:	sub	sp, sp, #48	; 0x30
     d5c:	str	r0, [fp, #-40]	; 0xffffffd8
     d60:	str	r1, [fp, #-44]	; 0xffffffd4
     d64:	ldr	r3, [fp, #-40]	; 0xffffffd8
     d68:	ldr	r3, [r3, #4]
     d6c:	sub	r3, r3, #1
     d70:	ldr	r2, [fp, #-40]	; 0xffffffd8
     d74:	lsl	r3, r3, #4
     d78:	add	r3, r2, r3
     d7c:	ldr	r3, [r3, #8]
     d80:	str	r3, [fp, #-20]	; 0xffffffec
     d84:	ldr	r3, [fp, #-40]	; 0xffffffd8
     d88:	ldr	r3, [r3]
     d8c:	str	r3, [fp, #-24]	; 0xffffffe8
     d90:	ldr	r3, [fp, #-20]	; 0xffffffec
     d94:	ldr	r3, [r3, #4]
     d98:	ldr	r3, [r3, #44]	; 0x2c
     d9c:	mov	ip, r3
     da0:	ldr	r3, [fp, #-20]	; 0xffffffec
     da4:	ldr	r3, [r3, #12]
     da8:	ldr	r3, [r3, #4]
     dac:	ldrd	r0, [r3, #24]
     db0:	mov	r2, #0
     db4:	mov	r3, #0
     db8:	lsr	r2, r0, #3
     dbc:	orr	r2, r2, r1, lsl #29
     dc0:	asr	r3, r1, #3
     dc4:	mov	r3, r2
     dc8:	mul	r3, r3, ip
     dcc:	str	r3, [fp, #-28]	; 0xffffffe4
     dd0:	ldr	r3, [fp, #-20]	; 0xffffffec
     dd4:	ldr	r3, [r3, #12]
     dd8:	ldr	r3, [r3, #24]
     ddc:	cmp	r3, #0
     de0:	beq	eb4 <read_array+0x16c>
     de4:	ldr	r3, [fp, #-20]	; 0xffffffec
     de8:	ldr	r3, [r3, #4]
     dec:	ldr	r3, [r3, #52]	; 0x34
     df0:	str	r3, [fp, #-32]	; 0xffffffe0
     df4:	ldr	r2, [fp, #-28]	; 0xffffffe4
     df8:	ldr	r3, [fp, #-32]	; 0xffffffe0
     dfc:	sdiv	r3, r2, r3
     e00:	str	r3, [fp, #-28]	; 0xffffffe4
     e04:	mov	r3, #0
     e08:	str	r3, [fp, #-16]
     e0c:	b	ea0 <read_array+0x158>
     e10:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e14:	ldr	ip, [r3, #52]	; 0x34
     e18:	ldr	r3, [fp, #-20]	; 0xffffffec
     e1c:	ldr	r3, [r3, #12]
     e20:	ldrd	r0, [r3, #16]
     e24:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e28:	ldr	r3, [r3, #60]	; 0x3c
     e2c:	ldr	r2, [fp, #-16]
     e30:	mul	r3, r2, r3
     e34:	mov	r2, r3
     e38:	asr	r3, r2, #31
     e3c:	adds	r4, r0, r2
     e40:	adc	r5, r1, r3
     e44:	ldr	r3, [fp, #-28]	; 0xffffffe4
     e48:	mov	r2, r3
     e4c:	asr	r3, r2, #31
     e50:	ldr	r1, [fp, #-16]
     e54:	ldr	r0, [fp, #-28]	; 0xffffffe4
     e58:	mul	r1, r0, r1
     e5c:	mov	r0, r1
     e60:	ldr	r1, [fp, #-44]	; 0xffffffd4
     e64:	add	r1, r1, r0
     e68:	str	r1, [sp, #8]
     e6c:	strd	r2, [sp]
     e70:	mov	r2, r4
     e74:	mov	r3, r5
     e78:	mov	r0, ip
     e7c:	bl	0 <read_bytes>
     e80:	mov	r3, r0
     e84:	cmp	r3, #0
     e88:	beq	e94 <read_array+0x14c>
     e8c:	mvn	r3, #0
     e90:	b	1064 <read_array+0x31c>
     e94:	ldr	r3, [fp, #-16]
     e98:	add	r3, r3, #1
     e9c:	str	r3, [fp, #-16]
     ea0:	ldr	r2, [fp, #-16]
     ea4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     ea8:	cmp	r2, r3
     eac:	blt	e10 <read_array+0xc8>
     eb0:	b	f04 <read_array+0x1bc>
     eb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     eb8:	ldr	lr, [r3, #52]	; 0x34
     ebc:	ldr	r3, [fp, #-20]	; 0xffffffec
     ec0:	ldr	r3, [r3, #12]
     ec4:	ldrd	r0, [r3, #16]
     ec8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ecc:	mov	r2, r3
     ed0:	asr	r3, r2, #31
     ed4:	ldr	ip, [fp, #-44]	; 0xffffffd4
     ed8:	str	ip, [sp, #8]
     edc:	strd	r2, [sp]
     ee0:	mov	r2, r0
     ee4:	mov	r3, r1
     ee8:	mov	r0, lr
     eec:	bl	0 <read_bytes>
     ef0:	mov	r3, r0
     ef4:	cmp	r3, #0
     ef8:	beq	f04 <read_array+0x1bc>
     efc:	mvn	r3, #0
     f00:	b	1064 <read_array+0x31c>
     f04:	ldr	r3, [fp, #-20]	; 0xffffffec
     f08:	ldr	r3, [r3, #12]
     f0c:	ldr	r3, [r3, #4]
     f10:	ldrd	r2, [r3, #24]
     f14:	cmp	r3, #0
     f18:	cmpeq	r2, #16
     f1c:	beq	f58 <read_array+0x210>
     f20:	cmp	r2, #17
     f24:	sbcs	r1, r3, #0
     f28:	bge	f3c <read_array+0x1f4>
     f2c:	cmp	r3, #0
     f30:	cmpeq	r2, #8
     f34:	beq	105c <read_array+0x314>
     f38:	b	103c <read_array+0x2f4>
     f3c:	cmp	r3, #0
     f40:	cmpeq	r2, #32
     f44:	beq	fa4 <read_array+0x25c>
     f48:	cmp	r3, #0
     f4c:	cmpeq	r2, #64	; 0x40
     f50:	beq	ff0 <read_array+0x2a8>
     f54:	b	103c <read_array+0x2f4>
     f58:	mov	r3, #0
     f5c:	str	r3, [fp, #-16]
     f60:	b	f88 <read_array+0x240>
     f64:	ldr	r3, [fp, #-16]
     f68:	lsl	r3, r3, #1
     f6c:	ldr	r2, [fp, #-44]	; 0xffffffd4
     f70:	add	r3, r2, r3
     f74:	mov	r0, r3
     f78:	bl	204 <swap2>
     f7c:	ldr	r3, [fp, #-16]
     f80:	add	r3, r3, #1
     f84:	str	r3, [fp, #-16]
     f88:	ldr	r3, [fp, #-20]	; 0xffffffec
     f8c:	ldr	r3, [r3, #4]
     f90:	ldr	r3, [r3, #44]	; 0x2c
     f94:	ldr	r2, [fp, #-16]
     f98:	cmp	r2, r3
     f9c:	blt	f64 <read_array+0x21c>
     fa0:	b	1060 <read_array+0x318>
     fa4:	mov	r3, #0
     fa8:	str	r3, [fp, #-16]
     fac:	b	fd4 <read_array+0x28c>
     fb0:	ldr	r3, [fp, #-16]
     fb4:	lsl	r3, r3, #2
     fb8:	ldr	r2, [fp, #-44]	; 0xffffffd4
     fbc:	add	r3, r2, r3
     fc0:	mov	r0, r3
     fc4:	bl	29c <swap4>
     fc8:	ldr	r3, [fp, #-16]
     fcc:	add	r3, r3, #1
     fd0:	str	r3, [fp, #-16]
     fd4:	ldr	r3, [fp, #-20]	; 0xffffffec
     fd8:	ldr	r3, [r3, #4]
     fdc:	ldr	r3, [r3, #44]	; 0x2c
     fe0:	ldr	r2, [fp, #-16]
     fe4:	cmp	r2, r3
     fe8:	blt	fb0 <read_array+0x268>
     fec:	b	1060 <read_array+0x318>
     ff0:	mov	r3, #0
     ff4:	str	r3, [fp, #-16]
     ff8:	b	1020 <read_array+0x2d8>
     ffc:	ldr	r3, [fp, #-16]
    1000:	lsl	r3, r3, #3
    1004:	ldr	r2, [fp, #-44]	; 0xffffffd4
    1008:	add	r3, r2, r3
    100c:	mov	r0, r3
    1010:	bl	3b8 <swap8>
    1014:	ldr	r3, [fp, #-16]
    1018:	add	r3, r3, #1
    101c:	str	r3, [fp, #-16]
    1020:	ldr	r3, [fp, #-20]	; 0xffffffec
    1024:	ldr	r3, [r3, #4]
    1028:	ldr	r3, [r3, #44]	; 0x2c
    102c:	ldr	r2, [fp, #-16]
    1030:	cmp	r2, r3
    1034:	blt	ffc <read_array+0x2b4>
    1038:	b	1060 <read_array+0x318>
    103c:	movw	r3, #0
    1040:	movt	r3, #0
    1044:	movw	r2, #262	; 0x106
    1048:	movw	r1, #0
    104c:	movt	r1, #0
    1050:	movw	r0, #0
    1054:	movt	r0, #0
    1058:	bl	0 <__assert_fail>
    105c:	nop	{0}
    1060:	mov	r3, #0
    1064:	mov	r0, r3
    1068:	sub	sp, fp, #12
    106c:	ldrd	r4, [sp]
    1070:	ldr	fp, [sp, #8]
    1074:	add	sp, sp, #12
    1078:	pop	{pc}		; (ldr pc, [sp], #4)

0000107c <read_partial_array>:
    107c:	strd	r4, [sp, #-32]!	; 0xffffffe0
    1080:	strd	r6, [sp, #8]
    1084:	strd	r8, [sp, #16]
    1088:	str	fp, [sp, #24]
    108c:	str	lr, [sp, #28]
    1090:	add	fp, sp, #28
    1094:	sub	sp, sp, #104	; 0x68
    1098:	str	r0, [fp, #-88]	; 0xffffffa8
    109c:	str	r1, [fp, #-92]	; 0xffffffa4
    10a0:	str	r2, [fp, #-96]	; 0xffffffa0
    10a4:	str	r3, [fp, #-100]	; 0xffffff9c
    10a8:	ldr	r3, [fp, #-88]	; 0xffffffa8
    10ac:	ldr	r3, [r3, #4]
    10b0:	sub	r3, r3, #1
    10b4:	ldr	r2, [fp, #-88]	; 0xffffffa8
    10b8:	lsl	r3, r3, #4
    10bc:	add	r3, r2, r3
    10c0:	ldr	r3, [r3, #8]
    10c4:	str	r3, [fp, #-64]	; 0xffffffc0
    10c8:	ldr	r3, [fp, #-88]	; 0xffffffa8
    10cc:	ldr	r3, [r3]
    10d0:	str	r3, [fp, #-68]	; 0xffffffbc
    10d4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    10d8:	ldr	r3, [r3, #12]
    10dc:	ldr	r3, [r3, #4]
    10e0:	ldrd	r0, [r3, #24]
    10e4:	mov	r2, #0
    10e8:	mov	r3, #0
    10ec:	lsr	r2, r0, #3
    10f0:	orr	r2, r2, r1, lsl #29
    10f4:	asr	r3, r1, #3
    10f8:	mov	r3, r2
    10fc:	str	r3, [fp, #-72]	; 0xffffffb8
    1100:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1104:	ldr	r3, [r3, #12]
    1108:	ldr	r3, [r3, #24]
    110c:	cmp	r3, #0
    1110:	beq	12d4 <read_partial_array+0x258>
    1114:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1118:	ldr	r3, [r3, #4]
    111c:	ldr	r3, [r3, #52]	; 0x34
    1120:	str	r3, [fp, #-76]	; 0xffffffb4
    1124:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1128:	ldr	r3, [r3, #4]
    112c:	ldr	r2, [r3, #44]	; 0x2c
    1130:	ldr	r3, [fp, #-76]	; 0xffffffb4
    1134:	sdiv	r3, r2, r3
    1138:	str	r3, [fp, #-80]	; 0xffffffb0
    113c:	mov	r2, #0
    1140:	mov	r3, #0
    1144:	strd	r2, [fp, #-44]	; 0xffffffd4
    1148:	mov	r3, #0
    114c:	str	r3, [fp, #-32]	; 0xffffffe0
    1150:	b	12c0 <read_partial_array+0x244>
    1154:	mov	r2, #0
    1158:	mov	r3, #0
    115c:	strd	r2, [fp, #-52]	; 0xffffffcc
    1160:	ldr	r3, [fp, #-80]	; 0xffffffb0
    1164:	ldr	r2, [fp, #-72]	; 0xffffffb8
    1168:	mul	r3, r2, r3
    116c:	mov	r2, r3
    1170:	asr	r3, r2, #31
    1174:	strd	r2, [fp, #-60]	; 0xffffffc4
    1178:	ldr	r2, [fp, #-92]	; 0xffffffa4
    117c:	ldr	r3, [fp, #-96]	; 0xffffffa0
    1180:	add	r2, r2, r3
    1184:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1188:	add	r3, r3, #1
    118c:	ldr	r1, [fp, #-80]	; 0xffffffb0
    1190:	mul	r3, r1, r3
    1194:	cmp	r2, r3
    1198:	bge	11cc <read_partial_array+0x150>
    119c:	ldr	r2, [fp, #-92]	; 0xffffffa4
    11a0:	ldr	r3, [fp, #-96]	; 0xffffffa0
    11a4:	add	r2, r2, r3
    11a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    11ac:	ldr	r1, [fp, #-80]	; 0xffffffb0
    11b0:	mul	r3, r1, r3
    11b4:	sub	r3, r2, r3
    11b8:	ldr	r2, [fp, #-72]	; 0xffffffb8
    11bc:	mul	r3, r2, r3
    11c0:	mov	r2, r3
    11c4:	asr	r3, r2, #31
    11c8:	strd	r2, [fp, #-60]	; 0xffffffc4
    11cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    11d0:	ldr	r2, [fp, #-80]	; 0xffffffb0
    11d4:	mul	r3, r2, r3
    11d8:	ldr	r2, [fp, #-92]	; 0xffffffa4
    11dc:	cmp	r2, r3
    11e0:	ble	1220 <read_partial_array+0x1a4>
    11e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    11e8:	ldr	r2, [fp, #-80]	; 0xffffffb0
    11ec:	mul	r3, r2, r3
    11f0:	ldr	r2, [fp, #-92]	; 0xffffffa4
    11f4:	sub	r3, r2, r3
    11f8:	ldr	r2, [fp, #-72]	; 0xffffffb8
    11fc:	mul	r3, r2, r3
    1200:	mov	r2, r3
    1204:	asr	r3, r2, #31
    1208:	strd	r2, [fp, #-52]	; 0xffffffcc
    120c:	ldrd	r0, [fp, #-60]	; 0xffffffc4
    1210:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    1214:	subs	r6, r0, r2
    1218:	sbc	r7, r1, r3
    121c:	strd	r6, [fp, #-60]	; 0xffffffc4
    1220:	ldr	r3, [fp, #-68]	; 0xffffffbc
    1224:	ldr	ip, [r3, #52]	; 0x34
    1228:	ldr	r3, [fp, #-64]	; 0xffffffc0
    122c:	ldr	r3, [r3, #12]
    1230:	ldrd	r0, [r3, #16]
    1234:	ldr	r3, [fp, #-68]	; 0xffffffbc
    1238:	ldr	r3, [r3, #60]	; 0x3c
    123c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1240:	mul	r3, r2, r3
    1244:	mov	r2, r3
    1248:	asr	r3, r2, #31
    124c:	adds	r4, r0, r2
    1250:	adc	r5, r1, r3
    1254:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    1258:	adds	r1, r4, r2
    125c:	str	r1, [fp, #-108]	; 0xffffff94
    1260:	adc	r3, r5, r3
    1264:	str	r3, [fp, #-104]	; 0xffffff98
    1268:	ldr	r3, [fp, #-44]	; 0xffffffd4
    126c:	ldr	r2, [fp, #-100]	; 0xffffff9c
    1270:	add	r3, r2, r3
    1274:	str	r3, [sp, #8]
    1278:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    127c:	strd	r2, [sp]
    1280:	ldrd	r2, [fp, #-108]	; 0xffffff94
    1284:	mov	r0, ip
    1288:	bl	0 <read_bytes>
    128c:	mov	r3, r0
    1290:	cmp	r3, #0
    1294:	beq	12a0 <read_partial_array+0x224>
    1298:	mvn	r3, #0
    129c:	b	14ac <read_partial_array+0x430>
    12a0:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    12a4:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    12a8:	adds	r8, r0, r2
    12ac:	adc	r9, r1, r3
    12b0:	strd	r8, [fp, #-44]	; 0xffffffd4
    12b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    12b8:	add	r3, r3, #1
    12bc:	str	r3, [fp, #-32]	; 0xffffffe0
    12c0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    12c4:	ldr	r3, [fp, #-76]	; 0xffffffb4
    12c8:	cmp	r2, r3
    12cc:	blt	1154 <read_partial_array+0xd8>
    12d0:	b	134c <read_partial_array+0x2d0>
    12d4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    12d8:	ldr	ip, [r3, #52]	; 0x34
    12dc:	ldr	r3, [fp, #-64]	; 0xffffffc0
    12e0:	ldr	r3, [r3, #12]
    12e4:	ldrd	r0, [r3, #16]
    12e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
    12ec:	ldr	r2, [fp, #-72]	; 0xffffffb8
    12f0:	mul	r3, r2, r3
    12f4:	mov	r2, r3
    12f8:	asr	r3, r2, #31
    12fc:	adds	lr, r0, r2
    1300:	str	lr, [fp, #-116]	; 0xffffff8c
    1304:	adc	r3, r1, r3
    1308:	str	r3, [fp, #-112]	; 0xffffff90
    130c:	ldr	r3, [fp, #-96]	; 0xffffffa0
    1310:	ldr	r2, [fp, #-72]	; 0xffffffb8
    1314:	mul	r3, r2, r3
    1318:	mov	r2, r3
    131c:	asr	r3, r2, #31
    1320:	ldr	r1, [fp, #-100]	; 0xffffff9c
    1324:	str	r1, [sp, #8]
    1328:	strd	r2, [sp]
    132c:	ldrd	r2, [fp, #-116]	; 0xffffff8c
    1330:	mov	r0, ip
    1334:	bl	0 <read_bytes>
    1338:	mov	r3, r0
    133c:	cmp	r3, #0
    1340:	beq	134c <read_partial_array+0x2d0>
    1344:	mvn	r3, #0
    1348:	b	14ac <read_partial_array+0x430>
    134c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1350:	ldr	r3, [r3, #12]
    1354:	ldr	r3, [r3, #4]
    1358:	ldrd	r2, [r3, #24]
    135c:	cmp	r3, #0
    1360:	cmpeq	r2, #16
    1364:	beq	13a0 <read_partial_array+0x324>
    1368:	cmp	r2, #17
    136c:	sbcs	r1, r3, #0
    1370:	bge	1384 <read_partial_array+0x308>
    1374:	cmp	r3, #0
    1378:	cmpeq	r2, #8
    137c:	beq	14a4 <read_partial_array+0x428>
    1380:	b	1484 <read_partial_array+0x408>
    1384:	cmp	r3, #0
    1388:	cmpeq	r2, #32
    138c:	beq	13ec <read_partial_array+0x370>
    1390:	cmp	r3, #0
    1394:	cmpeq	r2, #64	; 0x40
    1398:	beq	1438 <read_partial_array+0x3bc>
    139c:	b	1484 <read_partial_array+0x408>
    13a0:	mov	r3, #0
    13a4:	str	r3, [fp, #-32]	; 0xffffffe0
    13a8:	b	13d0 <read_partial_array+0x354>
    13ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
    13b0:	lsl	r3, r3, #1
    13b4:	ldr	r2, [fp, #-100]	; 0xffffff9c
    13b8:	add	r3, r2, r3
    13bc:	mov	r0, r3
    13c0:	bl	204 <swap2>
    13c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    13c8:	add	r3, r3, #1
    13cc:	str	r3, [fp, #-32]	; 0xffffffe0
    13d0:	ldr	r3, [fp, #-64]	; 0xffffffc0
    13d4:	ldr	r3, [r3, #4]
    13d8:	ldr	r3, [r3, #44]	; 0x2c
    13dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
    13e0:	cmp	r2, r3
    13e4:	blt	13ac <read_partial_array+0x330>
    13e8:	b	14a8 <read_partial_array+0x42c>
    13ec:	mov	r3, #0
    13f0:	str	r3, [fp, #-32]	; 0xffffffe0
    13f4:	b	141c <read_partial_array+0x3a0>
    13f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    13fc:	lsl	r3, r3, #2
    1400:	ldr	r2, [fp, #-100]	; 0xffffff9c
    1404:	add	r3, r2, r3
    1408:	mov	r0, r3
    140c:	bl	29c <swap4>
    1410:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1414:	add	r3, r3, #1
    1418:	str	r3, [fp, #-32]	; 0xffffffe0
    141c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1420:	ldr	r3, [r3, #4]
    1424:	ldr	r3, [r3, #44]	; 0x2c
    1428:	ldr	r2, [fp, #-32]	; 0xffffffe0
    142c:	cmp	r2, r3
    1430:	blt	13f8 <read_partial_array+0x37c>
    1434:	b	14a8 <read_partial_array+0x42c>
    1438:	mov	r3, #0
    143c:	str	r3, [fp, #-32]	; 0xffffffe0
    1440:	b	1468 <read_partial_array+0x3ec>
    1444:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1448:	lsl	r3, r3, #3
    144c:	ldr	r2, [fp, #-100]	; 0xffffff9c
    1450:	add	r3, r2, r3
    1454:	mov	r0, r3
    1458:	bl	3b8 <swap8>
    145c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1460:	add	r3, r3, #1
    1464:	str	r3, [fp, #-32]	; 0xffffffe0
    1468:	ldr	r3, [fp, #-64]	; 0xffffffc0
    146c:	ldr	r3, [r3, #4]
    1470:	ldr	r3, [r3, #44]	; 0x2c
    1474:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1478:	cmp	r2, r3
    147c:	blt	1444 <read_partial_array+0x3c8>
    1480:	b	14a8 <read_partial_array+0x42c>
    1484:	movw	r3, #0
    1488:	movt	r3, #0
    148c:	movw	r2, #347	; 0x15b
    1490:	movw	r1, #0
    1494:	movt	r1, #0
    1498:	movw	r0, #0
    149c:	movt	r0, #0
    14a0:	bl	0 <__assert_fail>
    14a4:	nop	{0}
    14a8:	mov	r3, #0
    14ac:	mov	r0, r3
    14b0:	sub	sp, fp, #28
    14b4:	ldrd	r4, [sp]
    14b8:	ldrd	r6, [sp, #8]
    14bc:	ldrd	r8, [sp, #16]
    14c0:	ldr	fp, [sp, #24]
    14c4:	add	sp, sp, #28
    14c8:	pop	{pc}		; (ldr pc, [sp], #4)

000014cc <read_basic_type>:
    14cc:	strd	r4, [sp, #-32]!	; 0xffffffe0
    14d0:	strd	r6, [sp, #8]
    14d4:	strd	r8, [sp, #16]
    14d8:	str	fp, [sp, #24]
    14dc:	str	lr, [sp, #28]
    14e0:	add	fp, sp, #28
    14e4:	sub	sp, sp, #72	; 0x48
    14e8:	str	r0, [fp, #-72]	; 0xffffffb8
    14ec:	str	r1, [fp, #-76]	; 0xffffffb4
    14f0:	str	r2, [fp, #-80]	; 0xffffffb0
    14f4:	ldr	r3, [fp, #-72]	; 0xffffffb8
    14f8:	ldr	r3, [r3, #4]
    14fc:	sub	r3, r3, #1
    1500:	ldr	r2, [fp, #-72]	; 0xffffffb8
    1504:	lsl	r3, r3, #4
    1508:	add	r3, r2, r3
    150c:	ldr	r3, [r3, #8]
    1510:	str	r3, [fp, #-40]	; 0xffffffd8
    1514:	ldr	r3, [fp, #-72]	; 0xffffffb8
    1518:	ldr	r3, [r3]
    151c:	str	r3, [fp, #-44]	; 0xffffffd4
    1520:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1524:	ldrd	r2, [r3, #16]
    1528:	strd	r2, [fp, #-36]	; 0xffffffdc
    152c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1530:	ldr	r3, [r3, #4]
    1534:	ldrd	r0, [r3, #24]
    1538:	mov	r2, #0
    153c:	mov	r3, #0
    1540:	lsr	r2, r0, #3
    1544:	orr	r2, r2, r1, lsl #29
    1548:	asr	r3, r1, #3
    154c:	strd	r2, [fp, #-52]	; 0xffffffcc
    1550:	ldr	r3, [fp, #-72]	; 0xffffffb8
    1554:	ldr	r3, [r3, #4]
    1558:	sub	r3, r3, #2
    155c:	ldr	r2, [fp, #-72]	; 0xffffffb8
    1560:	lsl	r3, r3, #4
    1564:	add	r3, r2, r3
    1568:	ldr	r3, [r3, #8]
    156c:	ldr	r3, [r3]
    1570:	cmp	r3, #104	; 0x68
    1574:	bne	1708 <read_basic_type+0x23c>
    1578:	ldr	r3, [fp, #-72]	; 0xffffffb8
    157c:	ldr	r3, [r3, #4]
    1580:	sub	r3, r3, #2
    1584:	ldr	r2, [fp, #-72]	; 0xffffffb8
    1588:	lsl	r3, r3, #4
    158c:	add	r3, r2, r3
    1590:	ldr	r3, [r3, #8]
    1594:	ldr	r3, [r3, #4]
    1598:	ldr	r3, [r3, #8]
    159c:	cmp	r3, #1
    15a0:	bne	1708 <read_basic_type+0x23c>
    15a4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    15a8:	ldr	r3, [r3, #24]
    15ac:	cmp	r3, #0
    15b0:	beq	16b0 <read_basic_type+0x1e4>
    15b4:	ldr	r3, [fp, #-72]	; 0xffffffb8
    15b8:	ldr	r3, [r3, #4]
    15bc:	sub	r3, r3, #2
    15c0:	ldr	r2, [fp, #-72]	; 0xffffffb8
    15c4:	lsl	r3, r3, #4
    15c8:	add	r3, r2, r3
    15cc:	ldr	r3, [r3, #8]
    15d0:	str	r3, [fp, #-56]	; 0xffffffc8
    15d4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    15d8:	ldr	r3, [r3, #4]
    15dc:	ldr	r2, [r3, #44]	; 0x2c
    15e0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    15e4:	ldr	r3, [r3, #4]
    15e8:	ldr	r3, [r3, #52]	; 0x34
    15ec:	sdiv	r3, r2, r3
    15f0:	str	r3, [fp, #-60]	; 0xffffffc4
    15f4:	ldr	r3, [fp, #-72]	; 0xffffffb8
    15f8:	ldr	r3, [r3, #4]
    15fc:	sub	r3, r3, #1
    1600:	ldr	r2, [fp, #-72]	; 0xffffffb8
    1604:	lsl	r3, r3, #4
    1608:	add	r3, r2, r3
    160c:	ldr	r2, [r3, #12]
    1610:	ldr	r3, [fp, #-60]	; 0xffffffc4
    1614:	sdiv	r3, r2, r3
    1618:	str	r3, [fp, #-64]	; 0xffffffc0
    161c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1620:	ldr	r3, [r3, #60]	; 0x3c
    1624:	ldr	r2, [fp, #-64]	; 0xffffffc0
    1628:	mul	r3, r2, r3
    162c:	mov	r2, r3
    1630:	asr	r3, r2, #31
    1634:	ldrd	r0, [fp, #-36]	; 0xffffffdc
    1638:	adds	r8, r0, r2
    163c:	adc	r9, r1, r3
    1640:	strd	r8, [fp, #-36]	; 0xffffffdc
    1644:	ldr	r3, [fp, #-72]	; 0xffffffb8
    1648:	ldr	r3, [r3, #4]
    164c:	sub	r3, r3, #1
    1650:	ldr	r2, [fp, #-72]	; 0xffffffb8
    1654:	lsl	r3, r3, #4
    1658:	add	r3, r2, r3
    165c:	ldr	r2, [r3, #12]
    1660:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1664:	ldr	r1, [fp, #-60]	; 0xffffffc4
    1668:	mul	r3, r1, r3
    166c:	sub	r3, r2, r3
    1670:	mov	r2, r3
    1674:	asr	r3, r2, #31
    1678:	ldr	r1, [fp, #-52]	; 0xffffffcc
    167c:	mul	r0, r3, r1
    1680:	ldr	r1, [fp, #-48]	; 0xffffffd0
    1684:	mul	r1, r2, r1
    1688:	add	r1, r0, r1
    168c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    1690:	umull	r2, r3, r0, r2
    1694:	add	r1, r1, r3
    1698:	mov	r3, r1
    169c:	ldrd	r0, [fp, #-36]	; 0xffffffdc
    16a0:	adds	r6, r0, r2
    16a4:	adc	r7, r1, r3
    16a8:	strd	r6, [fp, #-36]	; 0xffffffdc
    16ac:	b	1708 <read_basic_type+0x23c>
    16b0:	ldr	r3, [fp, #-72]	; 0xffffffb8
    16b4:	ldr	r3, [r3, #4]
    16b8:	sub	r3, r3, #1
    16bc:	ldr	r2, [fp, #-72]	; 0xffffffb8
    16c0:	lsl	r3, r3, #4
    16c4:	add	r3, r2, r3
    16c8:	ldr	r3, [r3, #12]
    16cc:	mov	r2, r3
    16d0:	asr	r3, r2, #31
    16d4:	ldr	r1, [fp, #-52]	; 0xffffffcc
    16d8:	mul	r0, r3, r1
    16dc:	ldr	r1, [fp, #-48]	; 0xffffffd0
    16e0:	mul	r1, r2, r1
    16e4:	add	r1, r0, r1
    16e8:	ldr	r0, [fp, #-52]	; 0xffffffcc
    16ec:	umull	r2, r3, r0, r2
    16f0:	add	r1, r1, r3
    16f4:	mov	r3, r1
    16f8:	ldrd	r0, [fp, #-36]	; 0xffffffdc
    16fc:	adds	r4, r0, r2
    1700:	adc	r5, r1, r3
    1704:	strd	r4, [fp, #-36]	; 0xffffffdc
    1708:	ldr	r3, [fp, #-80]	; 0xffffffb0
    170c:	cmp	r3, #0
    1710:	blt	176c <read_basic_type+0x2a0>
    1714:	ldr	r3, [fp, #-80]	; 0xffffffb0
    1718:	mov	r0, r3
    171c:	asr	r1, r0, #31
    1720:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    1724:	cmp	r0, r2
    1728:	sbcs	r3, r1, r3
    172c:	bge	176c <read_basic_type+0x2a0>
    1730:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1734:	ldr	r0, [r3, #52]	; 0x34
    1738:	ldr	r3, [fp, #-80]	; 0xffffffb0
    173c:	mov	r2, r3
    1740:	asr	r3, r2, #31
    1744:	ldr	r1, [fp, #-76]	; 0xffffffb4
    1748:	str	r1, [sp, #8]
    174c:	strd	r2, [sp]
    1750:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    1754:	bl	0 <read_bytes>
    1758:	mov	r3, r0
    175c:	cmp	r3, #0
    1760:	beq	17a4 <read_basic_type+0x2d8>
    1764:	mvn	r3, #0
    1768:	b	1870 <read_basic_type+0x3a4>
    176c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1770:	ldr	r1, [r3, #52]	; 0x34
    1774:	ldr	r3, [fp, #-76]	; 0xffffffb4
    1778:	str	r3, [sp, #8]
    177c:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    1780:	strd	r2, [sp]
    1784:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    1788:	mov	r0, r1
    178c:	bl	0 <read_bytes>
    1790:	mov	r3, r0
    1794:	cmp	r3, #0
    1798:	beq	17a4 <read_basic_type+0x2d8>
    179c:	mvn	r3, #0
    17a0:	b	1870 <read_basic_type+0x3a4>
    17a4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    17a8:	ldr	r3, [r3, #4]
    17ac:	ldr	r3, [r3, #8]
    17b0:	cmp	r3, #2
    17b4:	beq	17cc <read_basic_type+0x300>
    17b8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    17bc:	ldr	r3, [r3, #4]
    17c0:	ldr	r3, [r3, #8]
    17c4:	cmp	r3, #3
    17c8:	bne	1860 <read_basic_type+0x394>
    17cc:	ldr	r3, [fp, #-40]	; 0xffffffd8
    17d0:	ldr	r3, [r3, #4]
    17d4:	ldrd	r2, [r3, #24]
    17d8:	cmp	r3, #0
    17dc:	cmpeq	r2, #16
    17e0:	beq	181c <read_basic_type+0x350>
    17e4:	cmp	r2, #17
    17e8:	sbcs	r1, r3, #0
    17ec:	bge	1800 <read_basic_type+0x334>
    17f0:	cmp	r3, #0
    17f4:	cmpeq	r2, #8
    17f8:	beq	1868 <read_basic_type+0x39c>
    17fc:	b	1840 <read_basic_type+0x374>
    1800:	cmp	r3, #0
    1804:	cmpeq	r2, #32
    1808:	beq	1828 <read_basic_type+0x35c>
    180c:	cmp	r3, #0
    1810:	cmpeq	r2, #64	; 0x40
    1814:	beq	1834 <read_basic_type+0x368>
    1818:	b	1840 <read_basic_type+0x374>
    181c:	ldr	r0, [fp, #-76]	; 0xffffffb4
    1820:	bl	204 <swap2>
    1824:	b	186c <read_basic_type+0x3a0>
    1828:	ldr	r0, [fp, #-76]	; 0xffffffb4
    182c:	bl	29c <swap4>
    1830:	b	186c <read_basic_type+0x3a0>
    1834:	ldr	r0, [fp, #-76]	; 0xffffffb4
    1838:	bl	3b8 <swap8>
    183c:	b	186c <read_basic_type+0x3a0>
    1840:	movw	r3, #0
    1844:	movt	r3, #0
    1848:	movw	r2, #422	; 0x1a6
    184c:	movw	r1, #0
    1850:	movt	r1, #0
    1854:	movw	r0, #0
    1858:	movt	r0, #0
    185c:	bl	0 <__assert_fail>
    1860:	nop	{0}
    1864:	b	186c <read_basic_type+0x3a0>
    1868:	nop	{0}
    186c:	mov	r3, #0
    1870:	mov	r0, r3
    1874:	sub	sp, fp, #28
    1878:	ldrd	r4, [sp]
    187c:	ldrd	r6, [sp, #8]
    1880:	ldrd	r8, [sp, #16]
    1884:	ldr	fp, [sp, #24]
    1888:	add	sp, sp, #28
    188c:	pop	{pc}		; (ldr pc, [sp], #4)

00001890 <coda_netcdf_cursor_read_int8>:
    1890:	str	fp, [sp, #-8]!
    1894:	str	lr, [sp, #4]
    1898:	add	fp, sp, #4
    189c:	sub	sp, sp, #8
    18a0:	str	r0, [fp, #-8]
    18a4:	str	r1, [fp, #-12]
    18a8:	mvn	r2, #0
    18ac:	ldr	r1, [fp, #-12]
    18b0:	ldr	r0, [fp, #-8]
    18b4:	bl	14cc <read_basic_type>
    18b8:	mov	r3, r0
    18bc:	mov	r0, r3
    18c0:	sub	sp, fp, #4
    18c4:	ldr	fp, [sp]
    18c8:	add	sp, sp, #4
    18cc:	pop	{pc}		; (ldr pc, [sp], #4)

000018d0 <coda_netcdf_cursor_read_int16>:
    18d0:	str	fp, [sp, #-8]!
    18d4:	str	lr, [sp, #4]
    18d8:	add	fp, sp, #4
    18dc:	sub	sp, sp, #8
    18e0:	str	r0, [fp, #-8]
    18e4:	str	r1, [fp, #-12]
    18e8:	mvn	r2, #0
    18ec:	ldr	r1, [fp, #-12]
    18f0:	ldr	r0, [fp, #-8]
    18f4:	bl	14cc <read_basic_type>
    18f8:	mov	r3, r0
    18fc:	mov	r0, r3
    1900:	sub	sp, fp, #4
    1904:	ldr	fp, [sp]
    1908:	add	sp, sp, #4
    190c:	pop	{pc}		; (ldr pc, [sp], #4)

00001910 <coda_netcdf_cursor_read_int32>:
    1910:	str	fp, [sp, #-8]!
    1914:	str	lr, [sp, #4]
    1918:	add	fp, sp, #4
    191c:	sub	sp, sp, #8
    1920:	str	r0, [fp, #-8]
    1924:	str	r1, [fp, #-12]
    1928:	mvn	r2, #0
    192c:	ldr	r1, [fp, #-12]
    1930:	ldr	r0, [fp, #-8]
    1934:	bl	14cc <read_basic_type>
    1938:	mov	r3, r0
    193c:	mov	r0, r3
    1940:	sub	sp, fp, #4
    1944:	ldr	fp, [sp]
    1948:	add	sp, sp, #4
    194c:	pop	{pc}		; (ldr pc, [sp], #4)

00001950 <coda_netcdf_cursor_read_float>:
    1950:	str	fp, [sp, #-8]!
    1954:	str	lr, [sp, #4]
    1958:	add	fp, sp, #4
    195c:	sub	sp, sp, #8
    1960:	str	r0, [fp, #-8]
    1964:	str	r1, [fp, #-12]
    1968:	mvn	r2, #0
    196c:	ldr	r1, [fp, #-12]
    1970:	ldr	r0, [fp, #-8]
    1974:	bl	14cc <read_basic_type>
    1978:	mov	r3, r0
    197c:	mov	r0, r3
    1980:	sub	sp, fp, #4
    1984:	ldr	fp, [sp]
    1988:	add	sp, sp, #4
    198c:	pop	{pc}		; (ldr pc, [sp], #4)

00001990 <coda_netcdf_cursor_read_double>:
    1990:	str	fp, [sp, #-8]!
    1994:	str	lr, [sp, #4]
    1998:	add	fp, sp, #4
    199c:	sub	sp, sp, #8
    19a0:	str	r0, [fp, #-8]
    19a4:	str	r1, [fp, #-12]
    19a8:	mvn	r2, #0
    19ac:	ldr	r1, [fp, #-12]
    19b0:	ldr	r0, [fp, #-8]
    19b4:	bl	14cc <read_basic_type>
    19b8:	mov	r3, r0
    19bc:	mov	r0, r3
    19c0:	sub	sp, fp, #4
    19c4:	ldr	fp, [sp]
    19c8:	add	sp, sp, #4
    19cc:	pop	{pc}		; (ldr pc, [sp], #4)

000019d0 <coda_netcdf_cursor_read_char>:
    19d0:	str	fp, [sp, #-8]!
    19d4:	str	lr, [sp, #4]
    19d8:	add	fp, sp, #4
    19dc:	sub	sp, sp, #8
    19e0:	str	r0, [fp, #-8]
    19e4:	str	r1, [fp, #-12]
    19e8:	mvn	r2, #0
    19ec:	ldr	r1, [fp, #-12]
    19f0:	ldr	r0, [fp, #-8]
    19f4:	bl	14cc <read_basic_type>
    19f8:	mov	r3, r0
    19fc:	mov	r0, r3
    1a00:	sub	sp, fp, #4
    1a04:	ldr	fp, [sp]
    1a08:	add	sp, sp, #4
    1a0c:	pop	{pc}		; (ldr pc, [sp], #4)

00001a10 <coda_netcdf_cursor_read_string>:
    1a10:	str	fp, [sp, #-8]!
    1a14:	str	lr, [sp, #4]
    1a18:	add	fp, sp, #4
    1a1c:	sub	sp, sp, #16
    1a20:	str	r0, [fp, #-8]
    1a24:	str	r1, [fp, #-12]
    1a28:	str	r2, [fp, #-16]
    1a2c:	ldr	r2, [fp, #-16]
    1a30:	ldr	r1, [fp, #-12]
    1a34:	ldr	r0, [fp, #-8]
    1a38:	bl	14cc <read_basic_type>
    1a3c:	mov	r3, r0
    1a40:	cmp	r3, #0
    1a44:	beq	1a50 <coda_netcdf_cursor_read_string+0x40>
    1a48:	mvn	r3, #0
    1a4c:	b	1a6c <coda_netcdf_cursor_read_string+0x5c>
    1a50:	ldr	r3, [fp, #-16]
    1a54:	sub	r3, r3, #1
    1a58:	ldr	r2, [fp, #-12]
    1a5c:	add	r3, r2, r3
    1a60:	mov	r2, #0
    1a64:	strb	r2, [r3]
    1a68:	mov	r3, #0
    1a6c:	mov	r0, r3
    1a70:	sub	sp, fp, #4
    1a74:	ldr	fp, [sp]
    1a78:	add	sp, sp, #4
    1a7c:	pop	{pc}		; (ldr pc, [sp], #4)

00001a80 <coda_netcdf_cursor_read_int8_array>:
    1a80:	str	fp, [sp, #-8]!
    1a84:	str	lr, [sp, #4]
    1a88:	add	fp, sp, #4
    1a8c:	sub	sp, sp, #8
    1a90:	str	r0, [fp, #-8]
    1a94:	str	r1, [fp, #-12]
    1a98:	ldr	r1, [fp, #-12]
    1a9c:	ldr	r0, [fp, #-8]
    1aa0:	bl	d48 <read_array>
    1aa4:	mov	r3, r0
    1aa8:	mov	r0, r3
    1aac:	sub	sp, fp, #4
    1ab0:	ldr	fp, [sp]
    1ab4:	add	sp, sp, #4
    1ab8:	pop	{pc}		; (ldr pc, [sp], #4)

00001abc <coda_netcdf_cursor_read_int16_array>:
    1abc:	str	fp, [sp, #-8]!
    1ac0:	str	lr, [sp, #4]
    1ac4:	add	fp, sp, #4
    1ac8:	sub	sp, sp, #8
    1acc:	str	r0, [fp, #-8]
    1ad0:	str	r1, [fp, #-12]
    1ad4:	ldr	r1, [fp, #-12]
    1ad8:	ldr	r0, [fp, #-8]
    1adc:	bl	d48 <read_array>
    1ae0:	mov	r3, r0
    1ae4:	mov	r0, r3
    1ae8:	sub	sp, fp, #4
    1aec:	ldr	fp, [sp]
    1af0:	add	sp, sp, #4
    1af4:	pop	{pc}		; (ldr pc, [sp], #4)

00001af8 <coda_netcdf_cursor_read_int32_array>:
    1af8:	str	fp, [sp, #-8]!
    1afc:	str	lr, [sp, #4]
    1b00:	add	fp, sp, #4
    1b04:	sub	sp, sp, #8
    1b08:	str	r0, [fp, #-8]
    1b0c:	str	r1, [fp, #-12]
    1b10:	ldr	r1, [fp, #-12]
    1b14:	ldr	r0, [fp, #-8]
    1b18:	bl	d48 <read_array>
    1b1c:	mov	r3, r0
    1b20:	mov	r0, r3
    1b24:	sub	sp, fp, #4
    1b28:	ldr	fp, [sp]
    1b2c:	add	sp, sp, #4
    1b30:	pop	{pc}		; (ldr pc, [sp], #4)

00001b34 <coda_netcdf_cursor_read_float_array>:
    1b34:	str	fp, [sp, #-8]!
    1b38:	str	lr, [sp, #4]
    1b3c:	add	fp, sp, #4
    1b40:	sub	sp, sp, #8
    1b44:	str	r0, [fp, #-8]
    1b48:	str	r1, [fp, #-12]
    1b4c:	ldr	r1, [fp, #-12]
    1b50:	ldr	r0, [fp, #-8]
    1b54:	bl	d48 <read_array>
    1b58:	mov	r3, r0
    1b5c:	mov	r0, r3
    1b60:	sub	sp, fp, #4
    1b64:	ldr	fp, [sp]
    1b68:	add	sp, sp, #4
    1b6c:	pop	{pc}		; (ldr pc, [sp], #4)

00001b70 <coda_netcdf_cursor_read_double_array>:
    1b70:	str	fp, [sp, #-8]!
    1b74:	str	lr, [sp, #4]
    1b78:	add	fp, sp, #4
    1b7c:	sub	sp, sp, #8
    1b80:	str	r0, [fp, #-8]
    1b84:	str	r1, [fp, #-12]
    1b88:	ldr	r1, [fp, #-12]
    1b8c:	ldr	r0, [fp, #-8]
    1b90:	bl	d48 <read_array>
    1b94:	mov	r3, r0
    1b98:	mov	r0, r3
    1b9c:	sub	sp, fp, #4
    1ba0:	ldr	fp, [sp]
    1ba4:	add	sp, sp, #4
    1ba8:	pop	{pc}		; (ldr pc, [sp], #4)

00001bac <coda_netcdf_cursor_read_char_array>:
    1bac:	str	fp, [sp, #-8]!
    1bb0:	str	lr, [sp, #4]
    1bb4:	add	fp, sp, #4
    1bb8:	sub	sp, sp, #8
    1bbc:	str	r0, [fp, #-8]
    1bc0:	str	r1, [fp, #-12]
    1bc4:	ldr	r1, [fp, #-12]
    1bc8:	ldr	r0, [fp, #-8]
    1bcc:	bl	d48 <read_array>
    1bd0:	mov	r3, r0
    1bd4:	mov	r0, r3
    1bd8:	sub	sp, fp, #4
    1bdc:	ldr	fp, [sp]
    1be0:	add	sp, sp, #4
    1be4:	pop	{pc}		; (ldr pc, [sp], #4)

00001be8 <coda_netcdf_cursor_read_int8_partial_array>:
    1be8:	str	fp, [sp, #-8]!
    1bec:	str	lr, [sp, #4]
    1bf0:	add	fp, sp, #4
    1bf4:	sub	sp, sp, #16
    1bf8:	str	r0, [fp, #-8]
    1bfc:	str	r1, [fp, #-12]
    1c00:	str	r2, [fp, #-16]
    1c04:	str	r3, [fp, #-20]	; 0xffffffec
    1c08:	ldr	r3, [fp, #-20]	; 0xffffffec
    1c0c:	ldr	r2, [fp, #-16]
    1c10:	ldr	r1, [fp, #-12]
    1c14:	ldr	r0, [fp, #-8]
    1c18:	bl	107c <read_partial_array>
    1c1c:	mov	r3, r0
    1c20:	mov	r0, r3
    1c24:	sub	sp, fp, #4
    1c28:	ldr	fp, [sp]
    1c2c:	add	sp, sp, #4
    1c30:	pop	{pc}		; (ldr pc, [sp], #4)

00001c34 <coda_netcdf_cursor_read_int16_partial_array>:
    1c34:	str	fp, [sp, #-8]!
    1c38:	str	lr, [sp, #4]
    1c3c:	add	fp, sp, #4
    1c40:	sub	sp, sp, #16
    1c44:	str	r0, [fp, #-8]
    1c48:	str	r1, [fp, #-12]
    1c4c:	str	r2, [fp, #-16]
    1c50:	str	r3, [fp, #-20]	; 0xffffffec
    1c54:	ldr	r3, [fp, #-20]	; 0xffffffec
    1c58:	ldr	r2, [fp, #-16]
    1c5c:	ldr	r1, [fp, #-12]
    1c60:	ldr	r0, [fp, #-8]
    1c64:	bl	107c <read_partial_array>
    1c68:	mov	r3, r0
    1c6c:	mov	r0, r3
    1c70:	sub	sp, fp, #4
    1c74:	ldr	fp, [sp]
    1c78:	add	sp, sp, #4
    1c7c:	pop	{pc}		; (ldr pc, [sp], #4)

00001c80 <coda_netcdf_cursor_read_int32_partial_array>:
    1c80:	str	fp, [sp, #-8]!
    1c84:	str	lr, [sp, #4]
    1c88:	add	fp, sp, #4
    1c8c:	sub	sp, sp, #16
    1c90:	str	r0, [fp, #-8]
    1c94:	str	r1, [fp, #-12]
    1c98:	str	r2, [fp, #-16]
    1c9c:	str	r3, [fp, #-20]	; 0xffffffec
    1ca0:	ldr	r3, [fp, #-20]	; 0xffffffec
    1ca4:	ldr	r2, [fp, #-16]
    1ca8:	ldr	r1, [fp, #-12]
    1cac:	ldr	r0, [fp, #-8]
    1cb0:	bl	107c <read_partial_array>
    1cb4:	mov	r3, r0
    1cb8:	mov	r0, r3
    1cbc:	sub	sp, fp, #4
    1cc0:	ldr	fp, [sp]
    1cc4:	add	sp, sp, #4
    1cc8:	pop	{pc}		; (ldr pc, [sp], #4)

00001ccc <coda_netcdf_cursor_read_float_partial_array>:
    1ccc:	str	fp, [sp, #-8]!
    1cd0:	str	lr, [sp, #4]
    1cd4:	add	fp, sp, #4
    1cd8:	sub	sp, sp, #16
    1cdc:	str	r0, [fp, #-8]
    1ce0:	str	r1, [fp, #-12]
    1ce4:	str	r2, [fp, #-16]
    1ce8:	str	r3, [fp, #-20]	; 0xffffffec
    1cec:	ldr	r3, [fp, #-20]	; 0xffffffec
    1cf0:	ldr	r2, [fp, #-16]
    1cf4:	ldr	r1, [fp, #-12]
    1cf8:	ldr	r0, [fp, #-8]
    1cfc:	bl	107c <read_partial_array>
    1d00:	mov	r3, r0
    1d04:	mov	r0, r3
    1d08:	sub	sp, fp, #4
    1d0c:	ldr	fp, [sp]
    1d10:	add	sp, sp, #4
    1d14:	pop	{pc}		; (ldr pc, [sp], #4)

00001d18 <coda_netcdf_cursor_read_double_partial_array>:
    1d18:	str	fp, [sp, #-8]!
    1d1c:	str	lr, [sp, #4]
    1d20:	add	fp, sp, #4
    1d24:	sub	sp, sp, #16
    1d28:	str	r0, [fp, #-8]
    1d2c:	str	r1, [fp, #-12]
    1d30:	str	r2, [fp, #-16]
    1d34:	str	r3, [fp, #-20]	; 0xffffffec
    1d38:	ldr	r3, [fp, #-20]	; 0xffffffec
    1d3c:	ldr	r2, [fp, #-16]
    1d40:	ldr	r1, [fp, #-12]
    1d44:	ldr	r0, [fp, #-8]
    1d48:	bl	107c <read_partial_array>
    1d4c:	mov	r3, r0
    1d50:	mov	r0, r3
    1d54:	sub	sp, fp, #4
    1d58:	ldr	fp, [sp]
    1d5c:	add	sp, sp, #4
    1d60:	pop	{pc}		; (ldr pc, [sp], #4)

00001d64 <coda_netcdf_cursor_read_char_partial_array>:
    1d64:	str	fp, [sp, #-8]!
    1d68:	str	lr, [sp, #4]
    1d6c:	add	fp, sp, #4
    1d70:	sub	sp, sp, #16
    1d74:	str	r0, [fp, #-8]
    1d78:	str	r1, [fp, #-12]
    1d7c:	str	r2, [fp, #-16]
    1d80:	str	r3, [fp, #-20]	; 0xffffffec
    1d84:	ldr	r3, [fp, #-20]	; 0xffffffec
    1d88:	ldr	r2, [fp, #-16]
    1d8c:	ldr	r1, [fp, #-12]
    1d90:	ldr	r0, [fp, #-8]
    1d94:	bl	107c <read_partial_array>
    1d98:	mov	r3, r0
    1d9c:	mov	r0, r3
    1da0:	sub	sp, fp, #4
    1da4:	ldr	fp, [sp]
    1da8:	add	sp, sp, #4
    1dac:	pop	{pc}		; (ldr pc, [sp], #4)
