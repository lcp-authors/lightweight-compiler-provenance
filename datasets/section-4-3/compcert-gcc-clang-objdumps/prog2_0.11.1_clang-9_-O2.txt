
../compcert-repos/prog2/0.11.1:     file format elf32-littlearm


Disassembly of section .init:

0001061c <.init>:
   1061c:	push	{r3, lr}
   10620:	bl	106b4 <_start@@Base+0x3c>
   10624:	pop	{r3, pc}

Disassembly of section .plt:

00010628 <printf@plt-0x14>:
   10628:	push	{lr}		; (str lr, [sp, #-4]!)
   1062c:	ldr	lr, [pc, #4]	; 10638 <printf@plt-0x4>
   10630:	add	lr, pc, lr
   10634:	ldr	pc, [lr, #8]!
   10638:	andeq	r0, r1, r8, asr #19

0001063c <printf@plt>:
   1063c:	add	ip, pc, #0, 12
   10640:	add	ip, ip, #16, 20	; 0x10000
   10644:	ldr	pc, [ip, #2504]!	; 0x9c8

00010648 <__libc_start_main@plt>:
   10648:	add	ip, pc, #0, 12
   1064c:	add	ip, ip, #16, 20	; 0x10000
   10650:	ldr	pc, [ip, #2496]!	; 0x9c0

00010654 <__gmon_start__@plt>:
   10654:	add	ip, pc, #0, 12
   10658:	add	ip, ip, #16, 20	; 0x10000
   1065c:	ldr	pc, [ip, #2488]!	; 0x9b8

00010660 <__isoc99_scanf@plt>:
   10660:	add	ip, pc, #0, 12
   10664:	add	ip, ip, #16, 20	; 0x10000
   10668:	ldr	pc, [ip, #2480]!	; 0x9b0

0001066c <abort@plt>:
   1066c:	add	ip, pc, #0, 12
   10670:	add	ip, ip, #16, 20	; 0x10000
   10674:	ldr	pc, [ip, #2472]!	; 0x9a8

Disassembly of section .text:

00010678 <_start@@Base>:
   10678:	mov	fp, #0
   1067c:	mov	lr, #0
   10680:	pop	{r1}		; (ldr r1, [sp], #4)
   10684:	mov	r2, sp
   10688:	push	{r2}		; (str r2, [sp, #-4]!)
   1068c:	push	{r0}		; (str r0, [sp, #-4]!)
   10690:	ldr	ip, [pc, #16]	; 106a8 <_start@@Base+0x30>
   10694:	push	{ip}		; (str ip, [sp, #-4]!)
   10698:	ldr	r0, [pc, #12]	; 106ac <_start@@Base+0x34>
   1069c:	ldr	r3, [pc, #12]	; 106b0 <_start@@Base+0x38>
   106a0:	bl	10648 <__libc_start_main@plt>
   106a4:	bl	1066c <abort@plt>
   106a8:	andeq	r0, r1, r4, asr r9
   106ac:			; <UNDEFINED> instruction: 0x000107b4
   106b0:	strdeq	r0, [r1], -r4
   106b4:	ldr	r3, [pc, #20]	; 106d0 <_start@@Base+0x58>
   106b8:	ldr	r2, [pc, #20]	; 106d4 <_start@@Base+0x5c>
   106bc:	add	r3, pc, r3
   106c0:	ldr	r2, [r3, r2]
   106c4:	cmp	r2, #0
   106c8:	bxeq	lr
   106cc:	b	10654 <__gmon_start__@plt>
   106d0:	andeq	r0, r1, ip, lsr r9
   106d4:	andeq	r0, r0, r0, lsr #32
   106d8:	ldr	r0, [pc, #24]	; 106f8 <_start@@Base+0x80>
   106dc:	ldr	r3, [pc, #24]	; 106fc <_start@@Base+0x84>
   106e0:	cmp	r3, r0
   106e4:	bxeq	lr
   106e8:	ldr	r3, [pc, #16]	; 10700 <_start@@Base+0x88>
   106ec:	cmp	r3, #0
   106f0:	bxeq	lr
   106f4:	bx	r3
   106f8:	andeq	r1, r2, ip, lsr #32
   106fc:	andeq	r1, r2, ip, lsr #32
   10700:	andeq	r0, r0, r0
   10704:	ldr	r0, [pc, #36]	; 10730 <_start@@Base+0xb8>
   10708:	ldr	r1, [pc, #36]	; 10734 <_start@@Base+0xbc>
   1070c:	sub	r1, r1, r0
   10710:	asr	r1, r1, #2
   10714:	add	r1, r1, r1, lsr #31
   10718:	asrs	r1, r1, #1
   1071c:	bxeq	lr
   10720:	ldr	r3, [pc, #16]	; 10738 <_start@@Base+0xc0>
   10724:	cmp	r3, #0
   10728:	bxeq	lr
   1072c:	bx	r3
   10730:	andeq	r1, r2, ip, lsr #32
   10734:	andeq	r1, r2, ip, lsr #32
   10738:	andeq	r0, r0, r0
   1073c:	push	{r4, lr}
   10740:	ldr	r4, [pc, #24]	; 10760 <_start@@Base+0xe8>
   10744:	ldrb	r3, [r4]
   10748:	cmp	r3, #0
   1074c:	popne	{r4, pc}
   10750:	bl	106d8 <_start@@Base+0x60>
   10754:	mov	r3, #1
   10758:	strb	r3, [r4]
   1075c:	pop	{r4, pc}
   10760:	andeq	r1, r2, ip, lsr #32
   10764:	b	10704 <_start@@Base+0x8c>

00010768 <invert@@Base>:
   10768:	cmp	r0, #0
   1076c:	moveq	r0, #0
   10770:	bxeq	lr
   10774:	movw	ip, #26215	; 0x6667
   10778:	mov	r1, r0
   1077c:	mov	r0, #0
   10780:	movt	ip, #26214	; 0x6666
   10784:	smmul	r3, r1, ip
   10788:	add	r0, r0, r0, lsl #2
   1078c:	asr	r2, r3, #2
   10790:	add	r2, r2, r3, lsr #31
   10794:	add	r3, r2, r2, lsl #2
   10798:	sub	r3, r1, r3, lsl #1
   1079c:	add	r1, r1, #9
   107a0:	cmp	r1, #18
   107a4:	mov	r1, r2
   107a8:	add	r0, r3, r0, lsl #1
   107ac:	bhi	10784 <invert@@Base+0x1c>
   107b0:	bx	lr

000107b4 <main@@Base>:
   107b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107b8:	add	fp, sp, #28
   107bc:	sub	sp, sp, #12
   107c0:	movw	r0, #2407	; 0x967
   107c4:	add	r1, sp, #8
   107c8:	movt	r0, #1
   107cc:	bl	10660 <__isoc99_scanf@plt>
   107d0:	ldr	r0, [sp, #8]
   107d4:	cmp	r0, #1
   107d8:	blt	108e8 <main@@Base+0x134>
   107dc:	movw	r8, #2410	; 0x96a
   107e0:	movw	r5, #26215	; 0x6667
   107e4:	mov	r4, #0
   107e8:	add	r9, sp, #4
   107ec:	mov	sl, sp
   107f0:	movt	r8, #1
   107f4:	movt	r5, #26214	; 0x6666
   107f8:	b	10814 <main@@Base+0x60>
   107fc:	mov	r0, r8
   10800:	bl	1063c <printf@plt>
   10804:	ldr	r0, [sp, #8]
   10808:	add	r4, r4, #1
   1080c:	cmp	r4, r0
   10810:	bge	108e8 <main@@Base+0x134>
   10814:	movw	r0, #2404	; 0x964
   10818:	mov	r1, r9
   1081c:	mov	r2, sl
   10820:	movt	r0, #1
   10824:	bl	10660 <__isoc99_scanf@plt>
   10828:	ldr	r1, [sp, #4]
   1082c:	mov	r0, #0
   10830:	cmp	r1, #0
   10834:	beq	10868 <main@@Base+0xb4>
   10838:	mov	r0, #0
   1083c:	smmul	r2, r1, r5
   10840:	add	r0, r0, r0, lsl #2
   10844:	asr	r3, r2, #2
   10848:	add	r2, r3, r2, lsr #31
   1084c:	add	r3, r2, r2, lsl #2
   10850:	sub	r3, r1, r3, lsl #1
   10854:	add	r1, r1, #9
   10858:	cmp	r1, #18
   1085c:	mov	r1, r2
   10860:	add	r0, r3, r0, lsl #1
   10864:	bhi	1083c <main@@Base+0x88>
   10868:	ldr	r3, [sp]
   1086c:	mov	r1, #0
   10870:	mov	r2, #0
   10874:	cmp	r3, #0
   10878:	beq	108ac <main@@Base+0xf8>
   1087c:	mov	r2, #0
   10880:	smmul	r6, r3, r5
   10884:	add	r2, r2, r2, lsl #2
   10888:	asr	r7, r6, #2
   1088c:	add	r7, r7, r6, lsr #31
   10890:	add	r6, r7, r7, lsl #2
   10894:	sub	r6, r3, r6, lsl #1
   10898:	add	r3, r3, #9
   1089c:	cmp	r3, #18
   108a0:	mov	r3, r7
   108a4:	add	r2, r6, r2, lsl #1
   108a8:	bhi	10880 <main@@Base+0xcc>
   108ac:	adds	r0, r2, r0
   108b0:	beq	107fc <main@@Base+0x48>
   108b4:	mov	r1, #0
   108b8:	smmul	r2, r0, r5
   108bc:	add	r1, r1, r1, lsl #2
   108c0:	asr	r3, r2, #2
   108c4:	add	r2, r3, r2, lsr #31
   108c8:	add	r3, r2, r2, lsl #2
   108cc:	sub	r3, r0, r3, lsl #1
   108d0:	add	r0, r0, #9
   108d4:	cmp	r0, #18
   108d8:	mov	r0, r2
   108dc:	add	r1, r3, r1, lsl #1
   108e0:	bhi	108b8 <main@@Base+0x104>
   108e4:	b	107fc <main@@Base+0x48>
   108e8:	mov	r0, #0
   108ec:	sub	sp, fp, #28
   108f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000108f4 <__libc_csu_init@@Base>:
   108f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   108f8:	mov	r7, r0
   108fc:	ldr	r6, [pc, #72]	; 1094c <__libc_csu_init@@Base+0x58>
   10900:	ldr	r5, [pc, #72]	; 10950 <__libc_csu_init@@Base+0x5c>
   10904:	add	r6, pc, r6
   10908:	add	r5, pc, r5
   1090c:	sub	r6, r6, r5
   10910:	mov	r8, r1
   10914:	mov	r9, r2
   10918:	bl	1061c <printf@plt-0x20>
   1091c:	asrs	r6, r6, #2
   10920:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10924:	mov	r4, #0
   10928:	add	r4, r4, #1
   1092c:	ldr	r3, [r5], #4
   10930:	mov	r2, r9
   10934:	mov	r1, r8
   10938:	mov	r0, r7
   1093c:	blx	r3
   10940:	cmp	r6, r4
   10944:	bne	10928 <__libc_csu_init@@Base+0x34>
   10948:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1094c:	andeq	r0, r1, r0, lsl #12
   10950:	strdeq	r0, [r1], -r8

00010954 <__libc_csu_fini@@Base>:
   10954:	bx	lr

Disassembly of section .fini:

00010958 <.fini>:
   10958:	push	{r3, lr}
   1095c:	pop	{r3, pc}
