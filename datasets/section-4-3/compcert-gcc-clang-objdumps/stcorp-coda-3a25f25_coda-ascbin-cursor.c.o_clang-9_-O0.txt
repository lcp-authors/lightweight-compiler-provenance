
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-ascbin-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_ascbin_cursor_set_product>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #8
       c:	str	r0, [sp, #4]
      10:	str	r1, [sp]
      14:	ldr	r0, [sp]
      18:	ldr	r1, [sp, #4]
      1c:	str	r0, [r1]
      20:	ldr	r0, [sp, #4]
      24:	movw	r1, #1
      28:	str	r1, [r0, #4]
      2c:	ldr	r0, [sp]
      30:	ldr	r0, [r0, #20]
      34:	movw	r1, #0
      38:	cmp	r0, r1
      3c:	beq	44 <coda_ascbin_cursor_set_product+0x44>
      40:	b	64 <coda_ascbin_cursor_set_product+0x64>
      44:	movw	r0, #0
      48:	movt	r0, #0
      4c:	movw	r1, #0
      50:	movt	r1, #0
      54:	movw	r2, #234	; 0xea
      58:	movw	r3, #0
      5c:	movt	r3, #0
      60:	bl	0 <__assert_fail>
      64:	ldr	r0, [sp]
      68:	ldr	r0, [r0, #20]
      6c:	ldr	r1, [sp, #4]
      70:	str	r0, [r1, #8]
      74:	ldr	r0, [sp, #4]
      78:	mvn	r1, #0
      7c:	str	r1, [r0, #12]
      80:	ldr	r0, [sp, #4]
      84:	mov	r1, #0
      88:	str	r1, [r0, #20]
      8c:	str	r1, [r0, #16]
      90:	movw	r0, #0
      94:	mov	sp, fp
      98:	pop	{fp, pc}

0000009c <coda_ascbin_cursor_goto_record_field_by_index>:
      9c:	push	{fp, lr}
      a0:	mov	fp, sp
      a4:	sub	sp, sp, #48	; 0x30
      a8:	str	r0, [fp, #-8]
      ac:	str	r1, [fp, #-12]
      b0:	mov	r0, #1
      b4:	str	r0, [sp, #20]
      b8:	ldr	r0, [fp, #-8]
      bc:	add	r1, r0, #8
      c0:	ldr	r0, [r0, #4]
      c4:	sub	r0, r0, #1
      c8:	add	r0, r1, r0, lsl #4
      cc:	ldr	r0, [r0]
      d0:	ldr	r0, [r0]
      d4:	cmp	r0, #100	; 0x64
      d8:	bcs	fc <coda_ascbin_cursor_goto_record_field_by_index+0x60>
      dc:	ldr	r0, [fp, #-8]
      e0:	add	r1, r0, #8
      e4:	ldr	r0, [r0, #4]
      e8:	sub	r0, r0, #1
      ec:	add	r0, r1, r0, lsl #4
      f0:	ldr	r0, [r0]
      f4:	str	r0, [sp, #4]
      f8:	b	11c <coda_ascbin_cursor_goto_record_field_by_index+0x80>
      fc:	ldr	r0, [fp, #-8]
     100:	add	r1, r0, #8
     104:	ldr	r0, [r0, #4]
     108:	sub	r0, r0, #1
     10c:	add	r0, r1, r0, lsl #4
     110:	ldr	r0, [r0]
     114:	ldr	r0, [r0, #4]
     118:	str	r0, [sp, #4]
     11c:	ldr	r0, [sp, #4]
     120:	str	r0, [fp, #-16]
     124:	ldr	r0, [fp, #-12]
     128:	cmp	r0, #0
     12c:	blt	144 <coda_ascbin_cursor_goto_record_field_by_index+0xa8>
     130:	ldr	r0, [fp, #-12]
     134:	ldr	r1, [fp, #-16]
     138:	ldr	r1, [r1, #48]	; 0x30
     13c:	cmp	r0, r1
     140:	blt	16c <coda_ascbin_cursor_goto_record_field_by_index+0xd0>
     144:	ldr	r2, [fp, #-12]
     148:	ldr	r0, [fp, #-16]
     14c:	ldr	r3, [r0, #48]	; 0x30
     150:	mvn	r0, #100	; 0x64
     154:	movw	r1, #0
     158:	movt	r1, #0
     15c:	bl	0 <coda_set_error>
     160:	mvn	r0, #0
     164:	str	r0, [fp, #-4]
     168:	b	334 <coda_ascbin_cursor_goto_record_field_by_index+0x298>
     16c:	ldr	r0, [fp, #-8]
     170:	ldr	r1, [r0, #4]
     174:	ldr	r1, [r0, r1, lsl #4]!
     178:	ldr	r0, [r0, #4]
     17c:	str	r0, [sp, #28]
     180:	str	r1, [sp, #24]
     184:	ldr	r0, [fp, #-16]
     188:	ldr	r0, [r0, #68]	; 0x44
     18c:	movw	r1, #0
     190:	cmp	r0, r1
     194:	beq	1d4 <coda_ascbin_cursor_goto_record_field_by_index+0x138>
     198:	ldr	r0, [fp, #-8]
     19c:	add	r1, sp, #16
     1a0:	bl	0 <coda_cursor_get_available_union_field_index>
     1a4:	cmp	r0, #0
     1a8:	beq	1b8 <coda_ascbin_cursor_goto_record_field_by_index+0x11c>
     1ac:	mvn	r0, #0
     1b0:	str	r0, [fp, #-4]
     1b4:	b	334 <coda_ascbin_cursor_goto_record_field_by_index+0x298>
     1b8:	ldr	r0, [fp, #-12]
     1bc:	ldr	r1, [sp, #16]
     1c0:	cmp	r0, r1
     1c4:	beq	1d0 <coda_ascbin_cursor_goto_record_field_by_index+0x134>
     1c8:	movw	r0, #0
     1cc:	str	r0, [sp, #20]
     1d0:	b	290 <coda_ascbin_cursor_goto_record_field_by_index+0x1f4>
     1d4:	ldr	r0, [fp, #-8]
     1d8:	ldr	r1, [fp, #-12]
     1dc:	add	r2, sp, #8
     1e0:	bl	340 <get_relative_field_bit_offset_by_index>
     1e4:	cmp	r0, #0
     1e8:	beq	1f8 <coda_ascbin_cursor_goto_record_field_by_index+0x15c>
     1ec:	mvn	r0, #0
     1f0:	str	r0, [fp, #-4]
     1f4:	b	334 <coda_ascbin_cursor_goto_record_field_by_index+0x298>
     1f8:	ldr	r0, [sp, #8]
     1fc:	ldr	r1, [sp, #12]
     200:	ldr	r2, [sp, #24]
     204:	ldr	r3, [sp, #28]
     208:	adds	r0, r2, r0
     20c:	adc	r1, r3, r1
     210:	str	r0, [sp, #24]
     214:	str	r1, [sp, #28]
     218:	ldr	r0, [fp, #-16]
     21c:	ldr	r0, [r0, #52]	; 0x34
     220:	ldr	r1, [fp, #-12]
     224:	add	r0, r0, r1, lsl #2
     228:	ldr	r0, [r0]
     22c:	ldr	r0, [r0, #20]
     230:	movw	r1, #0
     234:	cmp	r0, r1
     238:	beq	28c <coda_ascbin_cursor_goto_record_field_by_index+0x1f0>
     23c:	ldr	r0, [fp, #-16]
     240:	ldr	r0, [r0, #52]	; 0x34
     244:	ldr	r1, [fp, #-12]
     248:	add	r0, r0, r1, lsl #2
     24c:	ldr	r0, [r0]
     250:	ldr	r0, [r0, #20]
     254:	ldr	r1, [fp, #-8]
     258:	add	r2, sp, #20
     25c:	bl	0 <coda_expression_eval_bool>
     260:	cmp	r0, #0
     264:	beq	288 <coda_ascbin_cursor_goto_record_field_by_index+0x1ec>
     268:	movw	r0, #0
     26c:	movt	r0, #0
     270:	bl	0 <coda_add_error_message>
     274:	ldr	r0, [fp, #-8]
     278:	bl	0 <coda_cursor_add_to_error_message>
     27c:	mvn	r0, #0
     280:	str	r0, [fp, #-4]
     284:	b	334 <coda_ascbin_cursor_goto_record_field_by_index+0x298>
     288:	b	28c <coda_ascbin_cursor_goto_record_field_by_index+0x1f0>
     28c:	b	290 <coda_ascbin_cursor_goto_record_field_by_index+0x1f4>
     290:	ldr	r0, [fp, #-8]
     294:	ldr	r1, [r0, #4]
     298:	add	r1, r1, #1
     29c:	str	r1, [r0, #4]
     2a0:	ldr	r0, [sp, #20]
     2a4:	cmp	r0, #0
     2a8:	beq	2dc <coda_ascbin_cursor_goto_record_field_by_index+0x240>
     2ac:	ldr	r0, [fp, #-16]
     2b0:	ldr	r0, [r0, #52]	; 0x34
     2b4:	ldr	r1, [fp, #-12]
     2b8:	ldr	r0, [r0, r1, lsl #2]
     2bc:	ldr	r0, [r0, #8]
     2c0:	ldr	r1, [fp, #-8]
     2c4:	add	r2, r1, #8
     2c8:	ldr	r1, [r1, #4]
     2cc:	sub	r1, r1, #1
     2d0:	add	r1, r2, r1, lsl #4
     2d4:	str	r0, [r1]
     2d8:	b	300 <coda_ascbin_cursor_goto_record_field_by_index+0x264>
     2dc:	ldr	r0, [fp, #-16]
     2e0:	ldr	r0, [r0]
     2e4:	bl	0 <coda_no_data_singleton>
     2e8:	ldr	r1, [fp, #-8]
     2ec:	add	r2, r1, #8
     2f0:	ldr	r1, [r1, #4]
     2f4:	sub	r1, r1, #1
     2f8:	add	r1, r2, r1, lsl #4
     2fc:	str	r0, [r1]
     300:	ldr	r0, [fp, #-12]
     304:	ldr	r1, [fp, #-8]
     308:	ldr	r2, [r1, #4]
     30c:	add	r1, r1, r2, lsl #4
     310:	str	r0, [r1, #-4]
     314:	ldr	r0, [sp, #24]
     318:	ldr	r1, [sp, #28]
     31c:	ldr	r2, [fp, #-8]
     320:	ldr	r3, [r2, #4]
     324:	str	r0, [r2, r3, lsl #4]!
     328:	str	r1, [r2, #4]
     32c:	movw	r0, #0
     330:	str	r0, [fp, #-4]
     334:	ldr	r0, [fp, #-4]
     338:	mov	sp, fp
     33c:	pop	{fp, pc}

00000340 <get_relative_field_bit_offset_by_index>:
     340:	push	{r4, sl, fp, lr}
     344:	add	fp, sp, #8
     348:	sub	sp, sp, #592	; 0x250
     34c:	str	r0, [fp, #-16]
     350:	str	r1, [fp, #-20]	; 0xffffffec
     354:	str	r2, [fp, #-24]	; 0xffffffe8
     358:	ldr	r0, [fp, #-16]
     35c:	ldr	r1, [r0, #4]
     360:	add	r0, r0, r1, lsl #4
     364:	ldr	r0, [r0, #-8]
     368:	str	r0, [fp, #-32]	; 0xffffffe0
     36c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     370:	ldr	r0, [r0, #52]	; 0x34
     374:	ldr	r1, [fp, #-20]	; 0xffffffec
     378:	ldr	r0, [r0, r1, lsl #2]
     37c:	str	r0, [fp, #-28]	; 0xffffffe4
     380:	ldr	r0, [fp, #-28]	; 0xffffffe4
     384:	ldr	r0, [r0, #28]
     388:	cmp	r0, #0
     38c:	bmi	3b8 <get_relative_field_bit_offset_by_index+0x78>
     390:	b	394 <get_relative_field_bit_offset_by_index+0x54>
     394:	ldr	r0, [fp, #-28]	; 0xffffffe4
     398:	ldr	r1, [r0, #24]
     39c:	ldr	r0, [r0, #28]
     3a0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     3a4:	str	r0, [r2, #4]
     3a8:	str	r1, [r2]
     3ac:	movw	r0, #0
     3b0:	str	r0, [fp, #-12]
     3b4:	b	790 <get_relative_field_bit_offset_by_index+0x450>
     3b8:	ldr	r0, [fp, #-28]	; 0xffffffe4
     3bc:	ldr	r0, [r0, #32]
     3c0:	movw	r1, #0
     3c4:	cmp	r0, r1
     3c8:	beq	4b8 <get_relative_field_bit_offset_by_index+0x178>
     3cc:	ldr	r0, [fp, #-28]	; 0xffffffe4
     3d0:	ldr	r0, [r0, #20]
     3d4:	movw	r1, #0
     3d8:	cmp	r0, r1
     3dc:	beq	470 <get_relative_field_bit_offset_by_index+0x130>
     3e0:	ldr	r0, [fp, #-28]	; 0xffffffe4
     3e4:	ldr	r0, [r0, #20]
     3e8:	ldr	r1, [fp, #-16]
     3ec:	add	r2, sp, #28
     3f0:	bl	0 <coda_expression_eval_bool>
     3f4:	cmp	r0, #0
     3f8:	beq	41c <get_relative_field_bit_offset_by_index+0xdc>
     3fc:	movw	r0, #0
     400:	movt	r0, #0
     404:	bl	0 <coda_add_error_message>
     408:	ldr	r0, [fp, #-16]
     40c:	bl	0 <coda_cursor_add_to_error_message>
     410:	mvn	r0, #0
     414:	str	r0, [fp, #-12]
     418:	b	790 <get_relative_field_bit_offset_by_index+0x450>
     41c:	ldr	r0, [sp, #28]
     420:	cmp	r0, #0
     424:	bne	46c <get_relative_field_bit_offset_by_index+0x12c>
     428:	ldr	r0, [fp, #-20]	; 0xffffffec
     42c:	cmp	r0, #0
     430:	bne	450 <get_relative_field_bit_offset_by_index+0x110>
     434:	ldr	r0, [fp, #-24]	; 0xffffffe8
     438:	mov	r1, #0
     43c:	str	r1, [r0, #4]
     440:	str	r1, [r0]
     444:	movw	r0, #0
     448:	str	r0, [fp, #-12]
     44c:	b	790 <get_relative_field_bit_offset_by_index+0x450>
     450:	ldr	r0, [fp, #-16]
     454:	ldr	r1, [fp, #-20]	; 0xffffffec
     458:	sub	r1, r1, #1
     45c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     460:	bl	340 <get_relative_field_bit_offset_by_index>
     464:	str	r0, [fp, #-12]
     468:	b	790 <get_relative_field_bit_offset_by_index+0x450>
     46c:	b	470 <get_relative_field_bit_offset_by_index+0x130>
     470:	ldr	r0, [fp, #-28]	; 0xffffffe4
     474:	ldr	r0, [r0, #32]
     478:	ldr	r1, [fp, #-16]
     47c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     480:	bl	0 <coda_expression_eval_integer>
     484:	cmp	r0, #0
     488:	beq	4ac <get_relative_field_bit_offset_by_index+0x16c>
     48c:	movw	r0, #0
     490:	movt	r0, #0
     494:	bl	0 <coda_add_error_message>
     498:	ldr	r0, [fp, #-16]
     49c:	bl	0 <coda_cursor_add_to_error_message>
     4a0:	mvn	r0, #0
     4a4:	str	r0, [fp, #-12]
     4a8:	b	790 <get_relative_field_bit_offset_by_index+0x450>
     4ac:	movw	r0, #0
     4b0:	str	r0, [fp, #-12]
     4b4:	b	790 <get_relative_field_bit_offset_by_index+0x450>
     4b8:	ldr	r0, [fp, #-20]	; 0xffffffec
     4bc:	cmp	r0, #0
     4c0:	beq	4c8 <get_relative_field_bit_offset_by_index+0x188>
     4c4:	b	4e8 <get_relative_field_bit_offset_by_index+0x1a8>
     4c8:	movw	r0, #0
     4cc:	movt	r0, #0
     4d0:	movw	r1, #0
     4d4:	movt	r1, #0
     4d8:	movw	r2, #99	; 0x63
     4dc:	movw	r3, #0
     4e0:	movt	r3, #0
     4e4:	bl	0 <__assert_fail>
     4e8:	ldr	r0, [fp, #-20]	; 0xffffffec
     4ec:	sub	r0, r0, #1
     4f0:	str	r0, [sp, #36]	; 0x24
     4f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     4f8:	ldr	r0, [r0, #52]	; 0x34
     4fc:	ldr	r1, [sp, #36]	; 0x24
     500:	ldr	r0, [r0, r1, lsl #2]
     504:	ldr	r1, [r0, #24]
     508:	ldr	r0, [r0, #28]
     50c:	and	r0, r1, r0
     510:	mov	r1, #0
     514:	cmn	r0, #1
     518:	str	r1, [sp, #8]
     51c:	bne	550 <get_relative_field_bit_offset_by_index+0x210>
     520:	b	524 <get_relative_field_bit_offset_by_index+0x1e4>
     524:	ldr	r0, [fp, #-32]	; 0xffffffe0
     528:	ldr	r0, [r0, #52]	; 0x34
     52c:	ldr	r1, [sp, #36]	; 0x24
     530:	add	r0, r0, r1, lsl #2
     534:	ldr	r0, [r0]
     538:	ldr	r0, [r0, #32]
     53c:	movw	r1, #0
     540:	cmp	r0, r1
     544:	movw	r0, #0
     548:	moveq	r0, #1
     54c:	str	r0, [sp, #8]
     550:	ldr	r0, [sp, #8]
     554:	tst	r0, #1
     558:	beq	5a0 <get_relative_field_bit_offset_by_index+0x260>
     55c:	ldr	r0, [sp, #36]	; 0x24
     560:	mvn	r1, #0
     564:	add	r0, r0, r1
     568:	str	r0, [sp, #36]	; 0x24
     56c:	ldr	r0, [sp, #36]	; 0x24
     570:	cmp	r0, #0
     574:	blt	57c <get_relative_field_bit_offset_by_index+0x23c>
     578:	b	59c <get_relative_field_bit_offset_by_index+0x25c>
     57c:	movw	r0, #0
     580:	movt	r0, #0
     584:	movw	r1, #0
     588:	movt	r1, #0
     58c:	movw	r2, #110	; 0x6e
     590:	movw	r3, #0
     594:	movt	r3, #0
     598:	bl	0 <__assert_fail>
     59c:	b	4f4 <get_relative_field_bit_offset_by_index+0x1b4>
     5a0:	ldr	r0, [fp, #-16]
     5a4:	ldr	r1, [sp, #36]	; 0x24
     5a8:	add	r2, sp, #40	; 0x28
     5ac:	bl	340 <get_relative_field_bit_offset_by_index>
     5b0:	cmp	r0, #0
     5b4:	beq	5c4 <get_relative_field_bit_offset_by_index+0x284>
     5b8:	mvn	r0, #0
     5bc:	str	r0, [fp, #-12]
     5c0:	b	790 <get_relative_field_bit_offset_by_index+0x450>
     5c4:	ldr	r1, [fp, #-16]
     5c8:	add	r0, sp, #48	; 0x30
     5cc:	mov	r2, #520	; 0x208
     5d0:	str	r0, [sp, #4]
     5d4:	bl	0 <memcpy>
     5d8:	ldr	r1, [sp, #52]	; 0x34
     5dc:	add	r1, r1, #1
     5e0:	str	r1, [sp, #52]	; 0x34
     5e4:	ldr	r1, [fp, #-16]
     5e8:	ldr	r2, [r1, #4]
     5ec:	ldr	r2, [r1, r2, lsl #4]!
     5f0:	ldr	r1, [r1, #4]
     5f4:	ldr	r3, [sp, #40]	; 0x28
     5f8:	ldr	ip, [sp, #44]	; 0x2c
     5fc:	adds	r2, r2, r3
     600:	adc	r1, r1, ip
     604:	ldr	r3, [sp, #52]	; 0x34
     608:	lsl	ip, r3, #4
     60c:	ldr	lr, [sp, #4]
     610:	add	r3, lr, r3, lsl #4
     614:	str	r2, [ip, lr]
     618:	str	r1, [r3, #4]
     61c:	ldr	r1, [sp, #36]	; 0x24
     620:	str	r1, [sp, #32]
     624:	ldr	r0, [sp, #32]
     628:	ldr	r1, [fp, #-20]	; 0xffffffec
     62c:	cmp	r0, r1
     630:	bge	774 <get_relative_field_bit_offset_by_index+0x434>
     634:	mov	r0, #1
     638:	str	r0, [sp, #12]
     63c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     640:	ldr	r0, [r0, #52]	; 0x34
     644:	ldr	r1, [sp, #32]
     648:	add	r0, r0, r1, lsl #2
     64c:	ldr	r0, [r0]
     650:	ldr	r0, [r0, #20]
     654:	movw	r1, #0
     658:	cmp	r0, r1
     65c:	beq	6a8 <get_relative_field_bit_offset_by_index+0x368>
     660:	ldr	r0, [fp, #-32]	; 0xffffffe0
     664:	ldr	r0, [r0, #52]	; 0x34
     668:	ldr	r1, [sp, #32]
     66c:	add	r0, r0, r1, lsl #2
     670:	ldr	r0, [r0]
     674:	ldr	r0, [r0, #20]
     678:	ldr	r1, [fp, #-16]
     67c:	add	r2, sp, #12
     680:	bl	0 <coda_expression_eval_bool>
     684:	cmp	r0, #0
     688:	beq	6a4 <get_relative_field_bit_offset_by_index+0x364>
     68c:	movw	r0, #0
     690:	movt	r0, #0
     694:	bl	0 <coda_add_error_message>
     698:	mvn	r0, #0
     69c:	str	r0, [fp, #-12]
     6a0:	b	790 <get_relative_field_bit_offset_by_index+0x450>
     6a4:	b	6a8 <get_relative_field_bit_offset_by_index+0x368>
     6a8:	ldr	r0, [sp, #12]
     6ac:	cmp	r0, #0
     6b0:	beq	760 <get_relative_field_bit_offset_by_index+0x420>
     6b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     6b8:	ldr	r0, [r0, #52]	; 0x34
     6bc:	ldr	r1, [sp, #32]
     6c0:	ldr	r0, [r0, r1, lsl #2]
     6c4:	ldr	r0, [r0, #8]
     6c8:	add	r1, sp, #48	; 0x30
     6cc:	add	r1, r1, #8
     6d0:	ldr	r2, [sp, #52]	; 0x34
     6d4:	add	r2, r1, r2, lsl #4
     6d8:	str	r0, [r2, #-16]
     6dc:	ldr	r0, [sp, #32]
     6e0:	ldr	r2, [sp, #52]	; 0x34
     6e4:	sub	r2, r2, #1
     6e8:	add	r1, r1, r2, lsl #4
     6ec:	str	r0, [r1, #4]
     6f0:	add	r0, sp, #48	; 0x30
     6f4:	add	r1, sp, #16
     6f8:	bl	0 <coda_cursor_get_bit_size>
     6fc:	cmp	r0, #0
     700:	beq	710 <get_relative_field_bit_offset_by_index+0x3d0>
     704:	mvn	r0, #0
     708:	str	r0, [fp, #-12]
     70c:	b	790 <get_relative_field_bit_offset_by_index+0x450>
     710:	ldr	r0, [sp, #16]
     714:	ldr	r1, [sp, #20]
     718:	ldr	r2, [sp, #40]	; 0x28
     71c:	ldr	r3, [sp, #44]	; 0x2c
     720:	adds	r0, r2, r0
     724:	adc	r1, r3, r1
     728:	str	r0, [sp, #40]	; 0x28
     72c:	str	r1, [sp, #44]	; 0x2c
     730:	ldr	r0, [sp, #16]
     734:	ldr	r1, [sp, #20]
     738:	ldr	r2, [sp, #52]	; 0x34
     73c:	lsl	r3, r2, #4
     740:	add	ip, sp, #48	; 0x30
     744:	add	lr, ip, r2, lsl #4
     748:	ldr	r4, [lr, #4]
     74c:	ldr	r2, [ip, r2, lsl #4]
     750:	adds	r0, r2, r0
     754:	adc	r1, r4, r1
     758:	str	r0, [r3, ip]
     75c:	str	r1, [lr, #4]
     760:	b	764 <get_relative_field_bit_offset_by_index+0x424>
     764:	ldr	r0, [sp, #32]
     768:	add	r0, r0, #1
     76c:	str	r0, [sp, #32]
     770:	b	624 <get_relative_field_bit_offset_by_index+0x2e4>
     774:	ldr	r0, [sp, #40]	; 0x28
     778:	ldr	r1, [sp, #44]	; 0x2c
     77c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     780:	str	r1, [r2, #4]
     784:	str	r0, [r2]
     788:	movw	r0, #0
     78c:	str	r0, [fp, #-12]
     790:	ldr	r0, [fp, #-12]
     794:	sub	sp, fp, #8
     798:	pop	{r4, sl, fp, pc}

0000079c <coda_ascbin_cursor_goto_next_record_field>:
     79c:	push	{r4, r5, fp, lr}
     7a0:	add	fp, sp, #8
     7a4:	sub	sp, sp, #1104	; 0x450
     7a8:	str	r0, [fp, #-16]
     7ac:	mov	r0, #1
     7b0:	str	r0, [fp, #-36]	; 0xffffffdc
     7b4:	ldr	r0, [fp, #-16]
     7b8:	add	r1, r0, #8
     7bc:	ldr	r0, [r0, #4]
     7c0:	sub	r0, r0, #2
     7c4:	add	r0, r1, r0, lsl #4
     7c8:	ldr	r0, [r0]
     7cc:	ldr	r0, [r0]
     7d0:	cmp	r0, #100	; 0x64
     7d4:	bcs	7f8 <coda_ascbin_cursor_goto_next_record_field+0x5c>
     7d8:	ldr	r0, [fp, #-16]
     7dc:	add	r1, r0, #8
     7e0:	ldr	r0, [r0, #4]
     7e4:	sub	r0, r0, #2
     7e8:	add	r0, r1, r0, lsl #4
     7ec:	ldr	r0, [r0]
     7f0:	str	r0, [sp, #12]
     7f4:	b	818 <coda_ascbin_cursor_goto_next_record_field+0x7c>
     7f8:	ldr	r0, [fp, #-16]
     7fc:	add	r1, r0, #8
     800:	ldr	r0, [r0, #4]
     804:	sub	r0, r0, #2
     808:	add	r0, r1, r0, lsl #4
     80c:	ldr	r0, [r0]
     810:	ldr	r0, [r0, #4]
     814:	str	r0, [sp, #12]
     818:	ldr	r0, [sp, #12]
     81c:	str	r0, [fp, #-20]	; 0xffffffec
     820:	ldr	r0, [fp, #-16]
     824:	add	r1, r0, #8
     828:	ldr	r0, [r0, #4]
     82c:	sub	r0, r0, #1
     830:	add	r0, r1, r0, lsl #4
     834:	ldr	r0, [r0, #4]
     838:	add	r0, r0, #1
     83c:	str	r0, [fp, #-40]	; 0xffffffd8
     840:	ldr	r0, [fp, #-40]	; 0xffffffd8
     844:	cmp	r0, #0
     848:	blt	860 <coda_ascbin_cursor_goto_next_record_field+0xc4>
     84c:	ldr	r0, [fp, #-40]	; 0xffffffd8
     850:	ldr	r1, [fp, #-20]	; 0xffffffec
     854:	ldr	r1, [r1, #48]	; 0x30
     858:	cmp	r0, r1
     85c:	blt	888 <coda_ascbin_cursor_goto_next_record_field+0xec>
     860:	ldr	r2, [fp, #-40]	; 0xffffffd8
     864:	ldr	r0, [fp, #-20]	; 0xffffffec
     868:	ldr	r3, [r0, #48]	; 0x30
     86c:	mvn	r0, #100	; 0x64
     870:	movw	r1, #0
     874:	movt	r1, #0
     878:	bl	0 <coda_set_error>
     87c:	mvn	r0, #0
     880:	str	r0, [fp, #-12]
     884:	b	aa0 <coda_ascbin_cursor_goto_next_record_field+0x304>
     888:	ldr	r0, [fp, #-16]
     88c:	ldr	r1, [r0, #4]
     890:	add	r0, r0, r1, lsl #4
     894:	ldr	r1, [r0, #-16]
     898:	ldr	r0, [r0, #-12]
     89c:	str	r0, [fp, #-28]	; 0xffffffe4
     8a0:	str	r1, [fp, #-32]	; 0xffffffe0
     8a4:	ldr	r0, [fp, #-20]	; 0xffffffec
     8a8:	ldr	r0, [r0, #68]	; 0x44
     8ac:	movw	r1, #0
     8b0:	cmp	r0, r1
     8b4:	beq	92c <coda_ascbin_cursor_goto_next_record_field+0x190>
     8b8:	ldr	r0, [fp, #-16]
     8bc:	add	r1, sp, #552	; 0x228
     8c0:	mov	r2, r1
     8c4:	str	r0, [sp, #8]
     8c8:	mov	r0, r2
     8cc:	ldr	r2, [sp, #8]
     8d0:	str	r1, [sp, #4]
     8d4:	mov	r1, r2
     8d8:	movw	r2, #520	; 0x208
     8dc:	bl	0 <memcpy>
     8e0:	ldr	r0, [sp, #556]	; 0x22c
     8e4:	mvn	r1, #0
     8e8:	add	r0, r0, r1
     8ec:	str	r0, [sp, #556]	; 0x22c
     8f0:	ldr	r0, [sp, #4]
     8f4:	add	r1, sp, #548	; 0x224
     8f8:	bl	0 <coda_cursor_get_available_union_field_index>
     8fc:	cmp	r0, #0
     900:	beq	910 <coda_ascbin_cursor_goto_next_record_field+0x174>
     904:	mvn	r0, #0
     908:	str	r0, [fp, #-12]
     90c:	b	aa0 <coda_ascbin_cursor_goto_next_record_field+0x304>
     910:	ldr	r0, [fp, #-40]	; 0xffffffd8
     914:	ldr	r1, [sp, #548]	; 0x224
     918:	cmp	r0, r1
     91c:	beq	928 <coda_ascbin_cursor_goto_next_record_field+0x18c>
     920:	movw	r0, #0
     924:	str	r0, [fp, #-36]	; 0xffffffdc
     928:	b	a0c <coda_ascbin_cursor_goto_next_record_field+0x270>
     92c:	ldr	r0, [fp, #-16]
     930:	add	r1, sp, #536	; 0x218
     934:	movw	r2, #0
     938:	bl	aac <get_next_relative_field_bit_offset>
     93c:	cmp	r0, #0
     940:	beq	950 <coda_ascbin_cursor_goto_next_record_field+0x1b4>
     944:	mvn	r0, #0
     948:	str	r0, [fp, #-12]
     94c:	b	aa0 <coda_ascbin_cursor_goto_next_record_field+0x304>
     950:	ldr	r0, [sp, #536]	; 0x218
     954:	ldr	r1, [sp, #540]	; 0x21c
     958:	ldr	r2, [fp, #-32]	; 0xffffffe0
     95c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     960:	adds	r0, r2, r0
     964:	adc	r1, r3, r1
     968:	str	r0, [fp, #-32]	; 0xffffffe0
     96c:	str	r1, [fp, #-28]	; 0xffffffe4
     970:	ldr	r0, [fp, #-20]	; 0xffffffec
     974:	ldr	r0, [r0, #52]	; 0x34
     978:	ldr	r1, [fp, #-40]	; 0xffffffd8
     97c:	add	r0, r0, r1, lsl #2
     980:	ldr	r0, [r0]
     984:	ldr	r0, [r0, #20]
     988:	movw	r1, #0
     98c:	cmp	r0, r1
     990:	beq	a08 <coda_ascbin_cursor_goto_next_record_field+0x26c>
     994:	ldr	r1, [fp, #-16]
     998:	add	r0, sp, #16
     99c:	mov	r2, #520	; 0x208
     9a0:	bl	0 <memcpy>
     9a4:	ldr	r1, [sp, #20]
     9a8:	sub	r1, r1, #1
     9ac:	str	r1, [sp, #20]
     9b0:	ldr	r1, [fp, #-20]	; 0xffffffec
     9b4:	ldr	r1, [r1, #52]	; 0x34
     9b8:	ldr	r2, [fp, #-40]	; 0xffffffd8
     9bc:	add	r1, r1, r2, lsl #2
     9c0:	ldr	r1, [r1]
     9c4:	ldr	r1, [r1, #20]
     9c8:	str	r0, [sp]
     9cc:	mov	r0, r1
     9d0:	add	r1, sp, #16
     9d4:	sub	r2, fp, #36	; 0x24
     9d8:	bl	0 <coda_expression_eval_bool>
     9dc:	cmp	r0, #0
     9e0:	beq	a04 <coda_ascbin_cursor_goto_next_record_field+0x268>
     9e4:	movw	r0, #0
     9e8:	movt	r0, #0
     9ec:	bl	0 <coda_add_error_message>
     9f0:	ldr	r0, [fp, #-16]
     9f4:	bl	0 <coda_cursor_add_to_error_message>
     9f8:	mvn	r0, #0
     9fc:	str	r0, [fp, #-12]
     a00:	b	aa0 <coda_ascbin_cursor_goto_next_record_field+0x304>
     a04:	b	a08 <coda_ascbin_cursor_goto_next_record_field+0x26c>
     a08:	b	a0c <coda_ascbin_cursor_goto_next_record_field+0x270>
     a0c:	ldr	r0, [fp, #-36]	; 0xffffffdc
     a10:	cmp	r0, #0
     a14:	beq	a48 <coda_ascbin_cursor_goto_next_record_field+0x2ac>
     a18:	ldr	r0, [fp, #-20]	; 0xffffffec
     a1c:	ldr	r0, [r0, #52]	; 0x34
     a20:	ldr	r1, [fp, #-40]	; 0xffffffd8
     a24:	ldr	r0, [r0, r1, lsl #2]
     a28:	ldr	r0, [r0, #8]
     a2c:	ldr	r1, [fp, #-16]
     a30:	add	r2, r1, #8
     a34:	ldr	r1, [r1, #4]
     a38:	sub	r1, r1, #1
     a3c:	add	r1, r2, r1, lsl #4
     a40:	str	r0, [r1]
     a44:	b	a6c <coda_ascbin_cursor_goto_next_record_field+0x2d0>
     a48:	ldr	r0, [fp, #-20]	; 0xffffffec
     a4c:	ldr	r0, [r0]
     a50:	bl	0 <coda_no_data_singleton>
     a54:	ldr	r1, [fp, #-16]
     a58:	add	r2, r1, #8
     a5c:	ldr	r1, [r1, #4]
     a60:	sub	r1, r1, #1
     a64:	add	r1, r2, r1, lsl #4
     a68:	str	r0, [r1]
     a6c:	ldr	r0, [fp, #-40]	; 0xffffffd8
     a70:	ldr	r1, [fp, #-16]
     a74:	ldr	r2, [r1, #4]
     a78:	add	r1, r1, r2, lsl #4
     a7c:	str	r0, [r1, #-4]
     a80:	ldr	r0, [fp, #-32]	; 0xffffffe0
     a84:	ldr	r1, [fp, #-28]	; 0xffffffe4
     a88:	ldr	r2, [fp, #-16]
     a8c:	ldr	r3, [r2, #4]
     a90:	str	r0, [r2, r3, lsl #4]!
     a94:	str	r1, [r2, #4]
     a98:	movw	r0, #0
     a9c:	str	r0, [fp, #-12]
     aa0:	ldr	r0, [fp, #-12]
     aa4:	sub	sp, fp, #8
     aa8:	pop	{r4, r5, fp, pc}

00000aac <get_next_relative_field_bit_offset>:
     aac:	push	{r4, r5, fp, lr}
     ab0:	add	fp, sp, #8
     ab4:	sub	sp, sp, #576	; 0x240
     ab8:	str	r0, [fp, #-16]
     abc:	str	r1, [fp, #-20]	; 0xffffffec
     ac0:	str	r2, [fp, #-24]	; 0xffffffe8
     ac4:	ldr	r0, [fp, #-16]
     ac8:	ldr	r1, [r0, #4]
     acc:	add	r0, r0, r1, lsl #4
     ad0:	ldr	r0, [r0, #-24]	; 0xffffffe8
     ad4:	str	r0, [fp, #-32]	; 0xffffffe0
     ad8:	ldr	r0, [fp, #-16]
     adc:	add	r1, r0, #8
     ae0:	ldr	r0, [r0, #4]
     ae4:	sub	r0, r0, #1
     ae8:	add	r0, r1, r0, lsl #4
     aec:	ldr	r0, [r0, #4]
     af0:	add	r0, r0, #1
     af4:	str	r0, [fp, #-52]	; 0xffffffcc
     af8:	ldr	r0, [fp, #-52]	; 0xffffffcc
     afc:	ldr	r1, [fp, #-32]	; 0xffffffe0
     b00:	ldr	r1, [r1, #48]	; 0x30
     b04:	cmp	r0, r1
     b08:	bge	b10 <get_next_relative_field_bit_offset+0x64>
     b0c:	b	b30 <get_next_relative_field_bit_offset+0x84>
     b10:	movw	r0, #0
     b14:	movt	r0, #0
     b18:	movw	r1, #0
     b1c:	movt	r1, #0
     b20:	movw	r2, #161	; 0xa1
     b24:	movw	r3, #0
     b28:	movt	r3, #0
     b2c:	bl	0 <__assert_fail>
     b30:	ldr	r0, [fp, #-32]	; 0xffffffe0
     b34:	ldr	r0, [r0, #52]	; 0x34
     b38:	ldr	r1, [fp, #-52]	; 0xffffffcc
     b3c:	ldr	r0, [r0, r1, lsl #2]
     b40:	str	r0, [fp, #-28]	; 0xffffffe4
     b44:	ldr	r0, [fp, #-28]	; 0xffffffe4
     b48:	ldr	r0, [r0, #28]
     b4c:	cmp	r0, #0
     b50:	bmi	b9c <get_next_relative_field_bit_offset+0xf0>
     b54:	b	b58 <get_next_relative_field_bit_offset+0xac>
     b58:	ldr	r0, [fp, #-28]	; 0xffffffe4
     b5c:	ldr	r1, [r0, #24]
     b60:	ldr	r0, [r0, #28]
     b64:	ldr	r2, [fp, #-20]	; 0xffffffec
     b68:	str	r0, [r2, #4]
     b6c:	str	r1, [r2]
     b70:	ldr	r0, [fp, #-24]	; 0xffffffe8
     b74:	movw	r1, #0
     b78:	cmp	r0, r1
     b7c:	beq	b90 <get_next_relative_field_bit_offset+0xe4>
     b80:	ldr	r0, [fp, #-24]	; 0xffffffe8
     b84:	mvn	r1, #0
     b88:	str	r1, [r0, #4]
     b8c:	str	r1, [r0]
     b90:	movw	r0, #0
     b94:	str	r0, [fp, #-12]
     b98:	b	d5c <get_next_relative_field_bit_offset+0x2b0>
     b9c:	ldr	r0, [fp, #-16]
     ba0:	ldr	r1, [r0, #4]
     ba4:	ldr	r1, [r0, r1, lsl #4]!
     ba8:	ldr	r2, [r0, #-16]
     bac:	ldr	r3, [r0, #-12]
     bb0:	ldr	r0, [r0, #4]
     bb4:	subs	r1, r1, r2
     bb8:	sbc	r0, r0, r3
     bbc:	str	r1, [fp, #-40]	; 0xffffffd8
     bc0:	str	r0, [fp, #-36]	; 0xffffffdc
     bc4:	ldr	r0, [fp, #-28]	; 0xffffffe4
     bc8:	ldr	r0, [r0, #32]
     bcc:	movw	r1, #0
     bd0:	cmp	r0, r1
     bd4:	beq	cec <get_next_relative_field_bit_offset+0x240>
     bd8:	ldr	r0, [fp, #-16]
     bdc:	add	r1, sp, #8
     be0:	str	r0, [sp]
     be4:	mov	r0, r1
     be8:	ldr	r1, [sp]
     bec:	movw	r2, #520	; 0x208
     bf0:	bl	0 <memcpy>
     bf4:	ldr	r0, [sp, #12]
     bf8:	mvn	r1, #0
     bfc:	add	r0, r0, r1
     c00:	str	r0, [sp, #12]
     c04:	ldr	r0, [fp, #-24]	; 0xffffffe8
     c08:	movw	r1, #0
     c0c:	cmp	r0, r1
     c10:	beq	c24 <get_next_relative_field_bit_offset+0x178>
     c14:	ldr	r0, [fp, #-24]	; 0xffffffe8
     c18:	mvn	r1, #0
     c1c:	str	r1, [r0, #4]
     c20:	str	r1, [r0]
     c24:	ldr	r0, [fp, #-28]	; 0xffffffe4
     c28:	ldr	r0, [r0, #20]
     c2c:	movw	r1, #0
     c30:	cmp	r0, r1
     c34:	beq	ca4 <get_next_relative_field_bit_offset+0x1f8>
     c38:	ldr	r0, [fp, #-28]	; 0xffffffe4
     c3c:	ldr	r0, [r0, #20]
     c40:	add	r1, sp, #8
     c44:	add	r2, sp, #4
     c48:	bl	0 <coda_expression_eval_bool>
     c4c:	cmp	r0, #0
     c50:	beq	c74 <get_next_relative_field_bit_offset+0x1c8>
     c54:	movw	r0, #0
     c58:	movt	r0, #0
     c5c:	bl	0 <coda_add_error_message>
     c60:	ldr	r0, [fp, #-16]
     c64:	bl	0 <coda_cursor_add_to_error_message>
     c68:	mvn	r0, #0
     c6c:	str	r0, [fp, #-12]
     c70:	b	d5c <get_next_relative_field_bit_offset+0x2b0>
     c74:	ldr	r0, [sp, #4]
     c78:	cmp	r0, #0
     c7c:	bne	ca0 <get_next_relative_field_bit_offset+0x1f4>
     c80:	ldr	r0, [fp, #-40]	; 0xffffffd8
     c84:	ldr	r1, [fp, #-36]	; 0xffffffdc
     c88:	ldr	r2, [fp, #-20]	; 0xffffffec
     c8c:	str	r1, [r2, #4]
     c90:	str	r0, [r2]
     c94:	movw	r0, #0
     c98:	str	r0, [fp, #-12]
     c9c:	b	d5c <get_next_relative_field_bit_offset+0x2b0>
     ca0:	b	ca4 <get_next_relative_field_bit_offset+0x1f8>
     ca4:	ldr	r0, [fp, #-28]	; 0xffffffe4
     ca8:	ldr	r0, [r0, #32]
     cac:	ldr	r2, [fp, #-20]	; 0xffffffec
     cb0:	add	r1, sp, #8
     cb4:	bl	0 <coda_expression_eval_integer>
     cb8:	cmp	r0, #0
     cbc:	beq	ce0 <get_next_relative_field_bit_offset+0x234>
     cc0:	movw	r0, #0
     cc4:	movt	r0, #0
     cc8:	bl	0 <coda_add_error_message>
     ccc:	ldr	r0, [fp, #-16]
     cd0:	bl	0 <coda_cursor_add_to_error_message>
     cd4:	mvn	r0, #0
     cd8:	str	r0, [fp, #-12]
     cdc:	b	d5c <get_next_relative_field_bit_offset+0x2b0>
     ce0:	movw	r0, #0
     ce4:	str	r0, [fp, #-12]
     ce8:	b	d5c <get_next_relative_field_bit_offset+0x2b0>
     cec:	ldr	r0, [fp, #-16]
     cf0:	sub	r1, fp, #48	; 0x30
     cf4:	bl	0 <coda_cursor_get_bit_size>
     cf8:	cmp	r0, #0
     cfc:	beq	d0c <get_next_relative_field_bit_offset+0x260>
     d00:	mvn	r0, #0
     d04:	str	r0, [fp, #-12]
     d08:	b	d5c <get_next_relative_field_bit_offset+0x2b0>
     d0c:	ldr	r0, [fp, #-40]	; 0xffffffd8
     d10:	ldr	r1, [fp, #-36]	; 0xffffffdc
     d14:	ldr	r2, [fp, #-48]	; 0xffffffd0
     d18:	ldr	r3, [fp, #-44]	; 0xffffffd4
     d1c:	adds	r0, r0, r2
     d20:	adc	r1, r1, r3
     d24:	ldr	r2, [fp, #-20]	; 0xffffffec
     d28:	str	r0, [r2]
     d2c:	str	r1, [r2, #4]
     d30:	ldr	r0, [fp, #-24]	; 0xffffffe8
     d34:	movw	r1, #0
     d38:	cmp	r0, r1
     d3c:	beq	d54 <get_next_relative_field_bit_offset+0x2a8>
     d40:	ldr	r0, [fp, #-48]	; 0xffffffd0
     d44:	ldr	r1, [fp, #-44]	; 0xffffffd4
     d48:	ldr	r2, [fp, #-24]	; 0xffffffe8
     d4c:	str	r1, [r2, #4]
     d50:	str	r0, [r2]
     d54:	movw	r0, #0
     d58:	str	r0, [fp, #-12]
     d5c:	ldr	r0, [fp, #-12]
     d60:	sub	sp, fp, #8
     d64:	pop	{r4, r5, fp, pc}

00000d68 <coda_ascbin_cursor_goto_available_union_field>:
     d68:	push	{fp, lr}
     d6c:	mov	fp, sp
     d70:	sub	sp, sp, #24
     d74:	str	r0, [fp, #-8]
     d78:	ldr	r0, [fp, #-8]
     d7c:	add	r1, r0, #8
     d80:	ldr	r0, [r0, #4]
     d84:	sub	r0, r0, #1
     d88:	add	r0, r1, r0, lsl #4
     d8c:	ldr	r0, [r0]
     d90:	ldr	r0, [r0]
     d94:	cmp	r0, #100	; 0x64
     d98:	bcs	dbc <coda_ascbin_cursor_goto_available_union_field+0x54>
     d9c:	ldr	r0, [fp, #-8]
     da0:	add	r1, r0, #8
     da4:	ldr	r0, [r0, #4]
     da8:	sub	r0, r0, #1
     dac:	add	r0, r1, r0, lsl #4
     db0:	ldr	r0, [r0]
     db4:	str	r0, [sp, #4]
     db8:	b	ddc <coda_ascbin_cursor_goto_available_union_field+0x74>
     dbc:	ldr	r0, [fp, #-8]
     dc0:	add	r1, r0, #8
     dc4:	ldr	r0, [r0, #4]
     dc8:	sub	r0, r0, #1
     dcc:	add	r0, r1, r0, lsl #4
     dd0:	ldr	r0, [r0]
     dd4:	ldr	r0, [r0, #4]
     dd8:	str	r0, [sp, #4]
     ddc:	ldr	r0, [sp, #4]
     de0:	str	r0, [sp, #12]
     de4:	ldr	r0, [sp, #12]
     de8:	ldr	r0, [r0, #68]	; 0x44
     dec:	movw	r1, #0
     df0:	cmp	r0, r1
     df4:	bne	e14 <coda_ascbin_cursor_goto_available_union_field+0xac>
     df8:	mvn	r0, #104	; 0x68
     dfc:	movw	r1, #0
     e00:	movt	r1, #0
     e04:	bl	0 <coda_set_error>
     e08:	mvn	r0, #0
     e0c:	str	r0, [fp, #-4]
     e10:	b	ea0 <coda_ascbin_cursor_goto_available_union_field+0x138>
     e14:	ldr	r0, [fp, #-8]
     e18:	add	r1, sp, #8
     e1c:	bl	eac <coda_ascbin_cursor_get_available_union_field_index>
     e20:	cmp	r0, #0
     e24:	beq	e34 <coda_ascbin_cursor_goto_available_union_field+0xcc>
     e28:	mvn	r0, #0
     e2c:	str	r0, [fp, #-4]
     e30:	b	ea0 <coda_ascbin_cursor_goto_available_union_field+0x138>
     e34:	ldr	r0, [fp, #-8]
     e38:	ldr	r1, [r0, #4]
     e3c:	add	r1, r1, #1
     e40:	str	r1, [r0, #4]
     e44:	ldr	r0, [sp, #12]
     e48:	ldr	r0, [r0, #52]	; 0x34
     e4c:	ldr	r1, [sp, #8]
     e50:	ldr	r0, [r0, r1, lsl #2]
     e54:	ldr	r0, [r0, #8]
     e58:	ldr	r1, [fp, #-8]
     e5c:	ldr	r2, [r1, #4]
     e60:	add	r1, r1, r2, lsl #4
     e64:	str	r0, [r1, #-8]
     e68:	ldr	r0, [sp, #8]
     e6c:	ldr	r1, [fp, #-8]
     e70:	ldr	r2, [r1, #4]
     e74:	add	r1, r1, r2, lsl #4
     e78:	str	r0, [r1, #-4]
     e7c:	ldr	r0, [fp, #-8]
     e80:	ldr	r1, [r0, #4]
     e84:	add	r2, r0, r1, lsl #4
     e88:	ldr	r3, [r2, #-16]
     e8c:	ldr	ip, [r2, #-12]
     e90:	str	r3, [r0, r1, lsl #4]
     e94:	str	ip, [r2, #4]
     e98:	movw	r0, #0
     e9c:	str	r0, [fp, #-4]
     ea0:	ldr	r0, [fp, #-4]
     ea4:	mov	sp, fp
     ea8:	pop	{fp, pc}

00000eac <coda_ascbin_cursor_get_available_union_field_index>:
     eac:	push	{r4, r5, fp, lr}
     eb0:	add	fp, sp, #8
     eb4:	sub	sp, sp, #632	; 0x278
     eb8:	str	r0, [fp, #-16]
     ebc:	str	r1, [fp, #-20]	; 0xffffffec
     ec0:	ldr	r0, [fp, #-16]
     ec4:	add	r1, r0, #8
     ec8:	ldr	r0, [r0, #4]
     ecc:	sub	r0, r0, #1
     ed0:	add	r0, r1, r0, lsl #4
     ed4:	ldr	r0, [r0]
     ed8:	ldr	r0, [r0]
     edc:	cmp	r0, #100	; 0x64
     ee0:	bcs	f04 <coda_ascbin_cursor_get_available_union_field_index+0x58>
     ee4:	ldr	r0, [fp, #-16]
     ee8:	add	r1, r0, #8
     eec:	ldr	r0, [r0, #4]
     ef0:	sub	r0, r0, #1
     ef4:	add	r0, r1, r0, lsl #4
     ef8:	ldr	r0, [r0]
     efc:	str	r0, [sp, #40]	; 0x28
     f00:	b	f24 <coda_ascbin_cursor_get_available_union_field_index+0x78>
     f04:	ldr	r0, [fp, #-16]
     f08:	add	r1, r0, #8
     f0c:	ldr	r0, [r0, #4]
     f10:	sub	r0, r0, #1
     f14:	add	r0, r1, r0, lsl #4
     f18:	ldr	r0, [r0]
     f1c:	ldr	r0, [r0, #4]
     f20:	str	r0, [sp, #40]	; 0x28
     f24:	ldr	r0, [sp, #40]	; 0x28
     f28:	str	r0, [fp, #-24]	; 0xffffffe8
     f2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     f30:	ldr	r0, [r0, #68]	; 0x44
     f34:	movw	r1, #0
     f38:	cmp	r0, r1
     f3c:	bne	f5c <coda_ascbin_cursor_get_available_union_field_index+0xb0>
     f40:	mvn	r0, #104	; 0x68
     f44:	movw	r1, #0
     f48:	movt	r1, #0
     f4c:	bl	0 <coda_set_error>
     f50:	mvn	r0, #0
     f54:	str	r0, [fp, #-12]
     f58:	b	113c <coda_ascbin_cursor_get_available_union_field_index+0x290>
     f5c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     f60:	ldr	r0, [r0, #48]	; 0x30
     f64:	cmp	r0, #0
     f68:	ble	f70 <coda_ascbin_cursor_get_available_union_field_index+0xc4>
     f6c:	b	f90 <coda_ascbin_cursor_get_available_union_field_index+0xe4>
     f70:	movw	r0, #0
     f74:	movt	r0, #0
     f78:	movw	r1, #0
     f7c:	movt	r1, #0
     f80:	movw	r2, #889	; 0x379
     f84:	movw	r3, #0
     f88:	movt	r3, #0
     f8c:	bl	0 <__assert_fail>
     f90:	ldr	r1, [fp, #-16]
     f94:	add	r0, sp, #96	; 0x60
     f98:	mov	r2, #520	; 0x208
     f9c:	str	r0, [sp, #36]	; 0x24
     fa0:	bl	0 <memcpy>
     fa4:	ldr	r1, [sp, #100]	; 0x64
     fa8:	add	r1, r1, #1
     fac:	str	r1, [sp, #100]	; 0x64
     fb0:	ldr	r1, [fp, #-24]	; 0xffffffe8
     fb4:	ldr	r1, [r1, #52]	; 0x34
     fb8:	ldr	r1, [r1]
     fbc:	ldr	r1, [r1, #8]
     fc0:	ldr	r2, [sp, #36]	; 0x24
     fc4:	add	r3, r2, #8
     fc8:	ldr	ip, [sp, #100]	; 0x64
     fcc:	add	ip, r3, ip, lsl #4
     fd0:	str	r1, [ip, #-16]
     fd4:	ldr	r1, [sp, #100]	; 0x64
     fd8:	add	r1, r3, r1, lsl #4
     fdc:	mvn	ip, #0
     fe0:	str	ip, [r1, #-12]
     fe4:	ldr	r1, [sp, #100]	; 0x64
     fe8:	add	r1, r3, r1, lsl #4
     fec:	ldr	r3, [r1, #-24]	; 0xffffffe8
     ff0:	ldr	ip, [r1, #-20]	; 0xffffffec
     ff4:	str	ip, [r1, #-4]
     ff8:	str	r3, [r1, #-8]
     ffc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1000:	ldr	r1, [r1, #68]	; 0x44
    1004:	str	r0, [sp, #32]
    1008:	mov	r0, r1
    100c:	add	r1, sp, #96	; 0x60
    1010:	add	r2, sp, #88	; 0x58
    1014:	bl	0 <coda_expression_eval_integer>
    1018:	cmp	r0, #0
    101c:	beq	1040 <coda_ascbin_cursor_get_available_union_field_index+0x194>
    1020:	movw	r0, #0
    1024:	movt	r0, #0
    1028:	bl	0 <coda_add_error_message>
    102c:	ldr	r0, [fp, #-16]
    1030:	bl	0 <coda_cursor_add_to_error_message>
    1034:	mvn	r0, #0
    1038:	str	r0, [fp, #-12]
    103c:	b	113c <coda_ascbin_cursor_get_available_union_field_index+0x290>
    1040:	ldr	r0, [sp, #92]	; 0x5c
    1044:	cmp	r0, #0
    1048:	bmi	1070 <coda_ascbin_cursor_get_available_union_field_index+0x1c4>
    104c:	b	1050 <coda_ascbin_cursor_get_available_union_field_index+0x1a4>
    1050:	ldr	r0, [sp, #88]	; 0x58
    1054:	ldr	r1, [sp, #92]	; 0x5c
    1058:	ldr	r2, [fp, #-24]	; 0xffffffe8
    105c:	ldr	r2, [r2, #48]	; 0x30
    1060:	subs	r0, r0, r2
    1064:	sbcs	r1, r1, r2, asr #31
    1068:	blt	1128 <coda_ascbin_cursor_get_available_union_field_index+0x27c>
    106c:	b	1070 <coda_ascbin_cursor_get_available_union_field_index+0x1c4>
    1070:	ldr	r0, [pc, #208]	; 1148 <coda_ascbin_cursor_get_available_union_field_index+0x29c>
    1074:	ldr	r1, [sp, #88]	; 0x58
    1078:	ldr	r2, [sp, #92]	; 0x5c
    107c:	add	r3, sp, #67	; 0x43
    1080:	str	r0, [sp, #28]
    1084:	mov	r0, r1
    1088:	mov	r1, r2
    108c:	mov	r2, r3
    1090:	str	r3, [sp, #24]
    1094:	bl	0 <coda_str64>
    1098:	ldr	r0, [fp, #-16]
    109c:	ldr	r1, [r0, #4]
    10a0:	ldr	r1, [r0, r1, lsl #4]!
    10a4:	ldr	r0, [r0, #4]
    10a8:	lsr	r1, r1, #3
    10ac:	orr	r1, r1, r0, lsl #29
    10b0:	asr	r0, r0, #3
    10b4:	add	r2, sp, #46	; 0x2e
    10b8:	str	r0, [sp, #20]
    10bc:	mov	r0, r1
    10c0:	ldr	r1, [sp, #20]
    10c4:	str	r2, [sp, #16]
    10c8:	bl	0 <coda_str64>
    10cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    10d0:	ldr	r3, [r0, #48]	; 0x30
    10d4:	ldr	r0, [fp, #-16]
    10d8:	ldr	r1, [r0, #4]
    10dc:	lsl	r1, r1, #4
    10e0:	ldr	r0, [r1, r0]
    10e4:	and	r0, r0, #7
    10e8:	ldr	r1, [sp, #28]
    10ec:	str	r0, [sp, #12]
    10f0:	mov	r0, r1
    10f4:	movw	r1, #0
    10f8:	movt	r1, #0
    10fc:	ldr	r2, [sp, #24]
    1100:	ldr	ip, [sp, #16]
    1104:	str	ip, [sp]
    1108:	ldr	lr, [sp, #12]
    110c:	str	lr, [sp, #4]
    1110:	bl	0 <coda_set_error>
    1114:	ldr	r0, [fp, #-16]
    1118:	bl	0 <coda_cursor_add_to_error_message>
    111c:	mvn	r0, #0
    1120:	str	r0, [fp, #-12]
    1124:	b	113c <coda_ascbin_cursor_get_available_union_field_index+0x290>
    1128:	ldr	r0, [sp, #88]	; 0x58
    112c:	ldr	r1, [fp, #-20]	; 0xffffffec
    1130:	str	r0, [r1]
    1134:	movw	r0, #0
    1138:	str	r0, [fp, #-12]
    113c:	ldr	r0, [fp, #-12]
    1140:	sub	sp, fp, #8
    1144:	pop	{r4, r5, fp, pc}
    1148:	.word	0xfffffed4

0000114c <coda_ascbin_cursor_goto_array_element>:
    114c:	push	{fp, lr}
    1150:	mov	fp, sp
    1154:	sub	sp, sp, #56	; 0x38
    1158:	str	r0, [fp, #-8]
    115c:	str	r1, [fp, #-12]
    1160:	str	r2, [fp, #-16]
    1164:	ldr	r0, [fp, #-8]
    1168:	add	r1, r0, #8
    116c:	ldr	r0, [r0, #4]
    1170:	sub	r0, r0, #1
    1174:	add	r0, r1, r0, lsl #4
    1178:	ldr	r0, [r0]
    117c:	ldr	r0, [r0]
    1180:	cmp	r0, #100	; 0x64
    1184:	bcs	11a8 <coda_ascbin_cursor_goto_array_element+0x5c>
    1188:	ldr	r0, [fp, #-8]
    118c:	add	r1, r0, #8
    1190:	ldr	r0, [r0, #4]
    1194:	sub	r0, r0, #1
    1198:	add	r0, r1, r0, lsl #4
    119c:	ldr	r0, [r0]
    11a0:	str	r0, [sp, #4]
    11a4:	b	11c8 <coda_ascbin_cursor_goto_array_element+0x7c>
    11a8:	ldr	r0, [fp, #-8]
    11ac:	add	r1, r0, #8
    11b0:	ldr	r0, [r0, #4]
    11b4:	sub	r0, r0, #1
    11b8:	add	r0, r1, r0, lsl #4
    11bc:	ldr	r0, [r0]
    11c0:	ldr	r0, [r0, #4]
    11c4:	str	r0, [sp, #4]
    11c8:	ldr	r0, [sp, #4]
    11cc:	str	r0, [fp, #-20]	; 0xffffffec
    11d0:	ldr	r0, [fp, #-12]
    11d4:	ldr	r1, [fp, #-20]	; 0xffffffec
    11d8:	ldr	r1, [r1, #48]	; 0x30
    11dc:	cmp	r0, r1
    11e0:	beq	120c <coda_ascbin_cursor_goto_array_element+0xc0>
    11e4:	ldr	r2, [fp, #-12]
    11e8:	ldr	r0, [fp, #-20]	; 0xffffffec
    11ec:	ldr	r3, [r0, #48]	; 0x30
    11f0:	mvn	r0, #105	; 0x69
    11f4:	movw	r1, #0
    11f8:	movt	r1, #0
    11fc:	bl	0 <coda_set_error>
    1200:	mvn	r0, #0
    1204:	str	r0, [fp, #-4]
    1208:	b	14e4 <coda_ascbin_cursor_goto_array_element+0x398>
    120c:	movw	r0, #0
    1210:	str	r0, [fp, #-24]	; 0xffffffe8
    1214:	str	r0, [sp, #28]
    1218:	ldr	r0, [sp, #28]
    121c:	ldr	r1, [fp, #-20]	; 0xffffffec
    1220:	ldr	r1, [r1, #48]	; 0x30
    1224:	cmp	r0, r1
    1228:	bge	1364 <coda_ascbin_cursor_goto_array_element+0x218>
    122c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1230:	add	r0, r0, #52	; 0x34
    1234:	ldr	r1, [sp, #28]
    1238:	add	r0, r0, r1, lsl #2
    123c:	ldr	r0, [r0]
    1240:	cmn	r0, #1
    1244:	bne	12a0 <coda_ascbin_cursor_goto_array_element+0x154>
    1248:	ldr	r0, [fp, #-20]	; 0xffffffec
    124c:	add	r0, r0, #84	; 0x54
    1250:	ldr	r1, [sp, #28]
    1254:	add	r0, r0, r1, lsl #2
    1258:	ldr	r0, [r0]
    125c:	ldr	r1, [fp, #-8]
    1260:	add	r2, sp, #16
    1264:	bl	0 <coda_expression_eval_integer>
    1268:	cmp	r0, #0
    126c:	beq	1294 <coda_ascbin_cursor_goto_array_element+0x148>
    1270:	ldr	r1, [sp, #28]
    1274:	movw	r0, #0
    1278:	movt	r0, #0
    127c:	bl	0 <coda_add_error_message>
    1280:	ldr	r0, [fp, #-8]
    1284:	bl	0 <coda_cursor_add_to_error_message>
    1288:	mvn	r0, #0
    128c:	str	r0, [fp, #-4]
    1290:	b	14e4 <coda_ascbin_cursor_goto_array_element+0x398>
    1294:	ldr	r0, [sp, #16]
    1298:	str	r0, [sp, #24]
    129c:	b	12b8 <coda_ascbin_cursor_goto_array_element+0x16c>
    12a0:	ldr	r0, [fp, #-20]	; 0xffffffec
    12a4:	add	r0, r0, #52	; 0x34
    12a8:	ldr	r1, [sp, #28]
    12ac:	add	r0, r0, r1, lsl #2
    12b0:	ldr	r0, [r0]
    12b4:	str	r0, [sp, #24]
    12b8:	ldr	r0, [fp, #-16]
    12bc:	ldr	r1, [sp, #28]
    12c0:	add	r0, r0, r1, lsl #2
    12c4:	ldr	r0, [r0]
    12c8:	cmp	r0, #0
    12cc:	blt	12ec <coda_ascbin_cursor_goto_array_element+0x1a0>
    12d0:	ldr	r0, [fp, #-16]
    12d4:	ldr	r1, [sp, #28]
    12d8:	add	r0, r0, r1, lsl #2
    12dc:	ldr	r0, [r0]
    12e0:	ldr	r1, [sp, #24]
    12e4:	cmp	r0, r1
    12e8:	blt	131c <coda_ascbin_cursor_goto_array_element+0x1d0>
    12ec:	ldr	r0, [fp, #-16]
    12f0:	ldr	r1, [sp, #28]
    12f4:	add	r0, r0, r1, lsl #2
    12f8:	ldr	r2, [r0]
    12fc:	ldr	r3, [sp, #24]
    1300:	mvn	r0, #106	; 0x6a
    1304:	movw	r1, #0
    1308:	movt	r1, #0
    130c:	bl	0 <coda_set_error>
    1310:	mvn	r0, #0
    1314:	str	r0, [fp, #-4]
    1318:	b	14e4 <coda_ascbin_cursor_goto_array_element+0x398>
    131c:	ldr	r0, [sp, #28]
    1320:	cmp	r0, #0
    1324:	ble	1338 <coda_ascbin_cursor_goto_array_element+0x1ec>
    1328:	ldr	r0, [sp, #24]
    132c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1330:	mul	r0, r1, r0
    1334:	str	r0, [fp, #-24]	; 0xffffffe8
    1338:	ldr	r0, [fp, #-16]
    133c:	ldr	r1, [sp, #28]
    1340:	add	r0, r0, r1, lsl #2
    1344:	ldr	r0, [r0]
    1348:	ldr	r1, [fp, #-24]	; 0xffffffe8
    134c:	add	r0, r1, r0
    1350:	str	r0, [fp, #-24]	; 0xffffffe8
    1354:	ldr	r0, [sp, #28]
    1358:	add	r0, r0, #1
    135c:	str	r0, [sp, #28]
    1360:	b	1218 <coda_ascbin_cursor_goto_array_element+0xcc>
    1364:	ldr	r0, [fp, #-8]
    1368:	ldr	r1, [r0, #4]
    136c:	add	r1, r1, #1
    1370:	str	r1, [r0, #4]
    1374:	ldr	r0, [fp, #-8]
    1378:	ldr	r1, [r0, #4]
    137c:	add	r2, r0, r1, lsl #4
    1380:	ldr	r3, [r2, #-16]
    1384:	ldr	ip, [r2, #-12]
    1388:	str	r3, [r0, r1, lsl #4]
    138c:	str	ip, [r2, #4]
    1390:	ldr	r0, [fp, #-20]	; 0xffffffec
    1394:	ldr	r0, [r0, #40]	; 0x28
    1398:	ldr	r0, [r0, #28]
    139c:	cmp	r0, #0
    13a0:	bmi	13f0 <coda_ascbin_cursor_goto_array_element+0x2a4>
    13a4:	b	13a8 <coda_ascbin_cursor_goto_array_element+0x25c>
    13a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    13ac:	asr	r1, r0, #31
    13b0:	ldr	r2, [fp, #-20]	; 0xffffffec
    13b4:	ldr	r2, [r2, #40]	; 0x28
    13b8:	ldr	r3, [r2, #24]
    13bc:	ldr	r2, [r2, #28]
    13c0:	umull	ip, lr, r0, r3
    13c4:	mla	r0, r0, r2, lr
    13c8:	mla	r0, r1, r3, r0
    13cc:	ldr	r1, [fp, #-8]
    13d0:	ldr	r2, [r1, #4]
    13d4:	ldr	r2, [r1, r2, lsl #4]!
    13d8:	ldr	r3, [r1, #4]
    13dc:	adds	r2, r2, ip
    13e0:	adc	r0, r3, r0
    13e4:	str	r2, [r1]
    13e8:	str	r0, [r1, #4]
    13ec:	b	14a8 <coda_ascbin_cursor_goto_array_element+0x35c>
    13f0:	movw	r0, #0
    13f4:	str	r0, [sp, #28]
    13f8:	ldr	r0, [sp, #28]
    13fc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1400:	cmp	r0, r1
    1404:	bge	14a4 <coda_ascbin_cursor_goto_array_element+0x358>
    1408:	ldr	r0, [fp, #-20]	; 0xffffffec
    140c:	ldr	r0, [r0, #40]	; 0x28
    1410:	ldr	r1, [fp, #-8]
    1414:	ldr	r2, [r1, #4]
    1418:	add	r1, r1, r2, lsl #4
    141c:	str	r0, [r1, #-8]
    1420:	ldr	r0, [sp, #28]
    1424:	ldr	r1, [fp, #-8]
    1428:	add	r2, r1, #8
    142c:	ldr	r1, [r1, #4]
    1430:	sub	r1, r1, #1
    1434:	add	r1, r2, r1, lsl #4
    1438:	str	r0, [r1, #4]
    143c:	ldr	r0, [fp, #-8]
    1440:	add	r1, sp, #8
    1444:	bl	0 <coda_cursor_get_bit_size>
    1448:	cmp	r0, #0
    144c:	beq	146c <coda_ascbin_cursor_goto_array_element+0x320>
    1450:	ldr	r0, [fp, #-8]
    1454:	ldr	r1, [r0, #4]
    1458:	mvn	r2, #0
    145c:	add	r1, r1, r2
    1460:	str	r1, [r0, #4]
    1464:	str	r2, [fp, #-4]
    1468:	b	14e4 <coda_ascbin_cursor_goto_array_element+0x398>
    146c:	ldr	r0, [sp, #8]
    1470:	ldr	r1, [sp, #12]
    1474:	ldr	r2, [fp, #-8]
    1478:	ldr	r3, [r2, #4]
    147c:	ldr	r3, [r2, r3, lsl #4]!
    1480:	ldr	ip, [r2, #4]
    1484:	adds	r0, r3, r0
    1488:	adc	r1, ip, r1
    148c:	str	r0, [r2]
    1490:	str	r1, [r2, #4]
    1494:	ldr	r0, [sp, #28]
    1498:	add	r0, r0, #1
    149c:	str	r0, [sp, #28]
    14a0:	b	13f8 <coda_ascbin_cursor_goto_array_element+0x2ac>
    14a4:	b	14a8 <coda_ascbin_cursor_goto_array_element+0x35c>
    14a8:	ldr	r0, [fp, #-20]	; 0xffffffec
    14ac:	ldr	r0, [r0, #40]	; 0x28
    14b0:	ldr	r1, [fp, #-8]
    14b4:	ldr	r2, [r1, #4]
    14b8:	add	r1, r1, r2, lsl #4
    14bc:	str	r0, [r1, #-8]
    14c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    14c4:	ldr	r1, [fp, #-8]
    14c8:	add	r2, r1, #8
    14cc:	ldr	r1, [r1, #4]
    14d0:	sub	r1, r1, #1
    14d4:	add	r1, r2, r1, lsl #4
    14d8:	str	r0, [r1, #4]
    14dc:	movw	r0, #0
    14e0:	str	r0, [fp, #-4]
    14e4:	ldr	r0, [fp, #-4]
    14e8:	mov	sp, fp
    14ec:	pop	{fp, pc}

000014f0 <coda_ascbin_cursor_goto_array_element_by_index>:
    14f0:	push	{fp, lr}
    14f4:	mov	fp, sp
    14f8:	sub	sp, sp, #40	; 0x28
    14fc:	str	r0, [fp, #-8]
    1500:	str	r1, [fp, #-12]
    1504:	ldr	r0, [fp, #-8]
    1508:	add	r1, r0, #8
    150c:	ldr	r0, [r0, #4]
    1510:	sub	r0, r0, #1
    1514:	add	r0, r1, r0, lsl #4
    1518:	ldr	r0, [r0]
    151c:	ldr	r0, [r0]
    1520:	cmp	r0, #100	; 0x64
    1524:	bcs	1548 <coda_ascbin_cursor_goto_array_element_by_index+0x58>
    1528:	ldr	r0, [fp, #-8]
    152c:	add	r1, r0, #8
    1530:	ldr	r0, [r0, #4]
    1534:	sub	r0, r0, #1
    1538:	add	r0, r1, r0, lsl #4
    153c:	ldr	r0, [r0]
    1540:	str	r0, [sp, #4]
    1544:	b	1568 <coda_ascbin_cursor_goto_array_element_by_index+0x78>
    1548:	ldr	r0, [fp, #-8]
    154c:	add	r1, r0, #8
    1550:	ldr	r0, [r0, #4]
    1554:	sub	r0, r0, #1
    1558:	add	r0, r1, r0, lsl #4
    155c:	ldr	r0, [r0]
    1560:	ldr	r0, [r0, #4]
    1564:	str	r0, [sp, #4]
    1568:	ldr	r0, [sp, #4]
    156c:	str	r0, [fp, #-16]
    1570:	ldr	r0, [pc, #520]	; 1780 <coda_ascbin_cursor_goto_array_element_by_index+0x290>
    1574:	ldr	r0, [pc, r0]
    1578:	str	r0, [sp]
    157c:	bl	0 <__aeabi_read_tp>
    1580:	ldr	r1, [sp]
    1584:	ldr	r0, [r0, r1]
    1588:	cmp	r0, #0
    158c:	beq	15f4 <coda_ascbin_cursor_goto_array_element_by_index+0x104>
    1590:	ldr	r0, [fp, #-8]
    1594:	add	r1, sp, #16
    1598:	bl	0 <coda_cursor_get_num_elements>
    159c:	cmp	r0, #0
    15a0:	beq	15b0 <coda_ascbin_cursor_goto_array_element_by_index+0xc0>
    15a4:	mvn	r0, #0
    15a8:	str	r0, [fp, #-4]
    15ac:	b	1774 <coda_ascbin_cursor_goto_array_element_by_index+0x284>
    15b0:	ldr	r0, [fp, #-12]
    15b4:	cmp	r0, #0
    15b8:	blt	15cc <coda_ascbin_cursor_goto_array_element_by_index+0xdc>
    15bc:	ldr	r0, [fp, #-12]
    15c0:	ldr	r1, [sp, #16]
    15c4:	cmp	r0, r1
    15c8:	blt	15f0 <coda_ascbin_cursor_goto_array_element_by_index+0x100>
    15cc:	ldr	r2, [fp, #-12]
    15d0:	ldr	r3, [sp, #16]
    15d4:	mvn	r0, #106	; 0x6a
    15d8:	movw	r1, #0
    15dc:	movt	r1, #0
    15e0:	bl	0 <coda_set_error>
    15e4:	mvn	r0, #0
    15e8:	str	r0, [fp, #-4]
    15ec:	b	1774 <coda_ascbin_cursor_goto_array_element_by_index+0x284>
    15f0:	b	15f4 <coda_ascbin_cursor_goto_array_element_by_index+0x104>
    15f4:	ldr	r0, [fp, #-8]
    15f8:	ldr	r1, [r0, #4]
    15fc:	add	r1, r1, #1
    1600:	str	r1, [r0, #4]
    1604:	ldr	r0, [fp, #-8]
    1608:	ldr	r1, [r0, #4]
    160c:	add	r2, r0, r1, lsl #4
    1610:	ldr	r3, [r2, #-16]
    1614:	ldr	ip, [r2, #-12]
    1618:	str	r3, [r0, r1, lsl #4]
    161c:	str	ip, [r2, #4]
    1620:	ldr	r0, [fp, #-16]
    1624:	ldr	r0, [r0, #40]	; 0x28
    1628:	ldr	r0, [r0, #28]
    162c:	cmp	r0, #0
    1630:	bmi	1680 <coda_ascbin_cursor_goto_array_element_by_index+0x190>
    1634:	b	1638 <coda_ascbin_cursor_goto_array_element_by_index+0x148>
    1638:	ldr	r0, [fp, #-12]
    163c:	asr	r1, r0, #31
    1640:	ldr	r2, [fp, #-16]
    1644:	ldr	r2, [r2, #40]	; 0x28
    1648:	ldr	r3, [r2, #24]
    164c:	ldr	r2, [r2, #28]
    1650:	umull	ip, lr, r0, r3
    1654:	mla	r0, r0, r2, lr
    1658:	mla	r0, r1, r3, r0
    165c:	ldr	r1, [fp, #-8]
    1660:	ldr	r2, [r1, #4]
    1664:	ldr	r2, [r1, r2, lsl #4]!
    1668:	ldr	r3, [r1, #4]
    166c:	adds	r2, r2, ip
    1670:	adc	r0, r3, r0
    1674:	str	r2, [r1]
    1678:	str	r0, [r1, #4]
    167c:	b	1738 <coda_ascbin_cursor_goto_array_element_by_index+0x248>
    1680:	movw	r0, #0
    1684:	str	r0, [sp, #20]
    1688:	ldr	r0, [sp, #20]
    168c:	ldr	r1, [fp, #-12]
    1690:	cmp	r0, r1
    1694:	bge	1734 <coda_ascbin_cursor_goto_array_element_by_index+0x244>
    1698:	ldr	r0, [fp, #-16]
    169c:	ldr	r0, [r0, #40]	; 0x28
    16a0:	ldr	r1, [fp, #-8]
    16a4:	ldr	r2, [r1, #4]
    16a8:	add	r1, r1, r2, lsl #4
    16ac:	str	r0, [r1, #-8]
    16b0:	ldr	r0, [sp, #20]
    16b4:	ldr	r1, [fp, #-8]
    16b8:	add	r2, r1, #8
    16bc:	ldr	r1, [r1, #4]
    16c0:	sub	r1, r1, #1
    16c4:	add	r1, r2, r1, lsl #4
    16c8:	str	r0, [r1, #4]
    16cc:	ldr	r0, [fp, #-8]
    16d0:	add	r1, sp, #8
    16d4:	bl	0 <coda_cursor_get_bit_size>
    16d8:	cmp	r0, #0
    16dc:	beq	16fc <coda_ascbin_cursor_goto_array_element_by_index+0x20c>
    16e0:	ldr	r0, [fp, #-8]
    16e4:	ldr	r1, [r0, #4]
    16e8:	mvn	r2, #0
    16ec:	add	r1, r1, r2
    16f0:	str	r1, [r0, #4]
    16f4:	str	r2, [fp, #-4]
    16f8:	b	1774 <coda_ascbin_cursor_goto_array_element_by_index+0x284>
    16fc:	ldr	r0, [sp, #8]
    1700:	ldr	r1, [sp, #12]
    1704:	ldr	r2, [fp, #-8]
    1708:	ldr	r3, [r2, #4]
    170c:	ldr	r3, [r2, r3, lsl #4]!
    1710:	ldr	ip, [r2, #4]
    1714:	adds	r0, r3, r0
    1718:	adc	r1, ip, r1
    171c:	str	r0, [r2]
    1720:	str	r1, [r2, #4]
    1724:	ldr	r0, [sp, #20]
    1728:	add	r0, r0, #1
    172c:	str	r0, [sp, #20]
    1730:	b	1688 <coda_ascbin_cursor_goto_array_element_by_index+0x198>
    1734:	b	1738 <coda_ascbin_cursor_goto_array_element_by_index+0x248>
    1738:	ldr	r0, [fp, #-16]
    173c:	ldr	r0, [r0, #40]	; 0x28
    1740:	ldr	r1, [fp, #-8]
    1744:	ldr	r2, [r1, #4]
    1748:	add	r1, r1, r2, lsl #4
    174c:	str	r0, [r1, #-8]
    1750:	ldr	r0, [fp, #-12]
    1754:	ldr	r1, [fp, #-8]
    1758:	add	r2, r1, #8
    175c:	ldr	r1, [r1, #4]
    1760:	sub	r1, r1, #1
    1764:	add	r1, r2, r1, lsl #4
    1768:	str	r0, [r1, #4]
    176c:	movw	r0, #0
    1770:	str	r0, [fp, #-4]
    1774:	ldr	r0, [fp, #-4]
    1778:	mov	sp, fp
    177c:	pop	{fp, pc}
    1780:	.word	0x00000204

00001784 <coda_ascbin_cursor_goto_next_array_element>:
    1784:	push	{fp, lr}
    1788:	mov	fp, sp
    178c:	sub	sp, sp, #40	; 0x28
    1790:	str	r0, [fp, #-8]
    1794:	ldr	r0, [fp, #-8]
    1798:	add	r1, r0, #8
    179c:	ldr	r0, [r0, #4]
    17a0:	sub	r0, r0, #2
    17a4:	add	r0, r1, r0, lsl #4
    17a8:	ldr	r0, [r0]
    17ac:	ldr	r0, [r0]
    17b0:	cmp	r0, #100	; 0x64
    17b4:	bcs	17d8 <coda_ascbin_cursor_goto_next_array_element+0x54>
    17b8:	ldr	r0, [fp, #-8]
    17bc:	add	r1, r0, #8
    17c0:	ldr	r0, [r0, #4]
    17c4:	sub	r0, r0, #2
    17c8:	add	r0, r1, r0, lsl #4
    17cc:	ldr	r0, [r0]
    17d0:	str	r0, [sp, #4]
    17d4:	b	17f8 <coda_ascbin_cursor_goto_next_array_element+0x74>
    17d8:	ldr	r0, [fp, #-8]
    17dc:	add	r1, r0, #8
    17e0:	ldr	r0, [r0, #4]
    17e4:	sub	r0, r0, #2
    17e8:	add	r0, r1, r0, lsl #4
    17ec:	ldr	r0, [r0]
    17f0:	ldr	r0, [r0, #4]
    17f4:	str	r0, [sp, #4]
    17f8:	ldr	r0, [sp, #4]
    17fc:	str	r0, [fp, #-12]
    1800:	ldr	r0, [fp, #-8]
    1804:	ldr	r1, [r0, #4]
    1808:	add	r0, r0, r1, lsl #4
    180c:	ldr	r0, [r0, #-4]
    1810:	add	r0, r0, #1
    1814:	str	r0, [sp, #12]
    1818:	ldr	r0, [pc, #312]	; 1958 <coda_ascbin_cursor_goto_next_array_element+0x1d4>
    181c:	ldr	r0, [pc, r0]
    1820:	str	r0, [sp]
    1824:	bl	0 <__aeabi_read_tp>
    1828:	ldr	r1, [sp]
    182c:	ldr	r0, [r0, r1]
    1830:	cmp	r0, #0
    1834:	beq	18d0 <coda_ascbin_cursor_goto_next_array_element+0x14c>
    1838:	ldr	r0, [fp, #-8]
    183c:	ldr	r1, [r0, #4]
    1840:	mvn	r2, #0
    1844:	add	r1, r1, r2
    1848:	str	r1, [r0, #4]
    184c:	ldr	r0, [fp, #-8]
    1850:	add	r1, sp, #8
    1854:	bl	0 <coda_cursor_get_num_elements>
    1858:	cmp	r0, #0
    185c:	beq	187c <coda_ascbin_cursor_goto_next_array_element+0xf8>
    1860:	ldr	r0, [fp, #-8]
    1864:	ldr	r1, [r0, #4]
    1868:	add	r1, r1, #1
    186c:	str	r1, [r0, #4]
    1870:	mvn	r0, #0
    1874:	str	r0, [fp, #-4]
    1878:	b	194c <coda_ascbin_cursor_goto_next_array_element+0x1c8>
    187c:	ldr	r0, [fp, #-8]
    1880:	ldr	r1, [r0, #4]
    1884:	add	r1, r1, #1
    1888:	str	r1, [r0, #4]
    188c:	ldr	r0, [sp, #12]
    1890:	cmp	r0, #0
    1894:	blt	18a8 <coda_ascbin_cursor_goto_next_array_element+0x124>
    1898:	ldr	r0, [sp, #12]
    189c:	ldr	r1, [sp, #8]
    18a0:	cmp	r0, r1
    18a4:	blt	18cc <coda_ascbin_cursor_goto_next_array_element+0x148>
    18a8:	ldr	r2, [sp, #12]
    18ac:	ldr	r3, [sp, #8]
    18b0:	mvn	r0, #106	; 0x6a
    18b4:	movw	r1, #0
    18b8:	movt	r1, #0
    18bc:	bl	0 <coda_set_error>
    18c0:	mvn	r0, #0
    18c4:	str	r0, [fp, #-4]
    18c8:	b	194c <coda_ascbin_cursor_goto_next_array_element+0x1c8>
    18cc:	b	18d0 <coda_ascbin_cursor_goto_next_array_element+0x14c>
    18d0:	ldr	r0, [fp, #-8]
    18d4:	add	r1, sp, #16
    18d8:	bl	0 <coda_cursor_get_bit_size>
    18dc:	cmp	r0, #0
    18e0:	beq	18f0 <coda_ascbin_cursor_goto_next_array_element+0x16c>
    18e4:	mvn	r0, #0
    18e8:	str	r0, [fp, #-4]
    18ec:	b	194c <coda_ascbin_cursor_goto_next_array_element+0x1c8>
    18f0:	ldr	r0, [fp, #-12]
    18f4:	ldr	r0, [r0, #40]	; 0x28
    18f8:	ldr	r1, [fp, #-8]
    18fc:	ldr	r2, [r1, #4]
    1900:	add	r1, r1, r2, lsl #4
    1904:	str	r0, [r1, #-8]
    1908:	ldr	r0, [sp, #12]
    190c:	ldr	r1, [fp, #-8]
    1910:	ldr	r2, [r1, #4]
    1914:	add	r1, r1, r2, lsl #4
    1918:	str	r0, [r1, #-4]
    191c:	ldr	r0, [sp, #16]
    1920:	ldr	r1, [sp, #20]
    1924:	ldr	r2, [fp, #-8]
    1928:	ldr	r3, [r2, #4]
    192c:	ldr	r3, [r2, r3, lsl #4]!
    1930:	ldr	ip, [r2, #4]
    1934:	adds	r0, r3, r0
    1938:	adc	r1, ip, r1
    193c:	str	r0, [r2]
    1940:	str	r1, [r2, #4]
    1944:	movw	r0, #0
    1948:	str	r0, [fp, #-4]
    194c:	ldr	r0, [fp, #-4]
    1950:	mov	sp, fp
    1954:	pop	{fp, pc}
    1958:	.word	0x00000134

0000195c <coda_ascbin_cursor_goto_attributes>:
    195c:	push	{fp, lr}
    1960:	mov	fp, sp
    1964:	sub	sp, sp, #16
    1968:	str	r0, [fp, #-4]
    196c:	ldr	r0, [fp, #-4]
    1970:	add	r1, r0, #8
    1974:	ldr	r0, [r0, #4]
    1978:	sub	r0, r0, #1
    197c:	add	r0, r1, r0, lsl #4
    1980:	ldr	r0, [r0]
    1984:	ldr	r0, [r0]
    1988:	cmp	r0, #100	; 0x64
    198c:	bcs	19b0 <coda_ascbin_cursor_goto_attributes+0x54>
    1990:	ldr	r0, [fp, #-4]
    1994:	add	r1, r0, #8
    1998:	ldr	r0, [r0, #4]
    199c:	sub	r0, r0, #1
    19a0:	add	r0, r1, r0, lsl #4
    19a4:	ldr	r0, [r0]
    19a8:	str	r0, [sp, #4]
    19ac:	b	19d0 <coda_ascbin_cursor_goto_attributes+0x74>
    19b0:	ldr	r0, [fp, #-4]
    19b4:	add	r1, r0, #8
    19b8:	ldr	r0, [r0, #4]
    19bc:	sub	r0, r0, #1
    19c0:	add	r0, r1, r0, lsl #4
    19c4:	ldr	r0, [r0]
    19c8:	ldr	r0, [r0, #4]
    19cc:	str	r0, [sp, #4]
    19d0:	ldr	r0, [sp, #4]
    19d4:	ldr	r0, [r0]
    19d8:	str	r0, [sp, #8]
    19dc:	ldr	r0, [fp, #-4]
    19e0:	ldr	r1, [r0, #4]
    19e4:	add	r1, r1, #1
    19e8:	str	r1, [r0, #4]
    19ec:	ldr	r0, [sp, #8]
    19f0:	bl	0 <coda_type_empty_record>
    19f4:	ldr	r1, [fp, #-4]
    19f8:	ldr	r2, [r1, #4]
    19fc:	add	r1, r1, r2, lsl #4
    1a00:	str	r0, [r1, #-8]
    1a04:	ldr	r0, [fp, #-4]
    1a08:	ldr	r1, [r0, #4]
    1a0c:	add	r0, r0, r1, lsl #4
    1a10:	mvn	r1, #0
    1a14:	str	r1, [r0, #-4]
    1a18:	ldr	r0, [fp, #-4]
    1a1c:	ldr	r2, [r0, #4]
    1a20:	str	r1, [r0, r2, lsl #4]!
    1a24:	str	r1, [r0, #4]
    1a28:	movw	r0, #0
    1a2c:	mov	sp, fp
    1a30:	pop	{fp, pc}

00001a34 <coda_ascbin_cursor_use_base_type_of_special_type>:
    1a34:	sub	sp, sp, #12
    1a38:	str	r0, [sp, #8]
    1a3c:	ldr	r0, [sp, #8]
    1a40:	add	r1, r0, #8
    1a44:	ldr	r0, [r0, #4]
    1a48:	sub	r0, r0, #1
    1a4c:	add	r0, r1, r0, lsl #4
    1a50:	ldr	r0, [r0]
    1a54:	ldr	r0, [r0]
    1a58:	cmp	r0, #100	; 0x64
    1a5c:	bcs	1a80 <coda_ascbin_cursor_use_base_type_of_special_type+0x4c>
    1a60:	ldr	r0, [sp, #8]
    1a64:	add	r1, r0, #8
    1a68:	ldr	r0, [r0, #4]
    1a6c:	sub	r0, r0, #1
    1a70:	add	r0, r1, r0, lsl #4
    1a74:	ldr	r0, [r0]
    1a78:	str	r0, [sp]
    1a7c:	b	1aa0 <coda_ascbin_cursor_use_base_type_of_special_type+0x6c>
    1a80:	ldr	r0, [sp, #8]
    1a84:	add	r1, r0, #8
    1a88:	ldr	r0, [r0, #4]
    1a8c:	sub	r0, r0, #1
    1a90:	add	r0, r1, r0, lsl #4
    1a94:	ldr	r0, [r0]
    1a98:	ldr	r0, [r0, #4]
    1a9c:	str	r0, [sp]
    1aa0:	ldr	r0, [sp]
    1aa4:	str	r0, [sp, #4]
    1aa8:	ldr	r0, [sp, #4]
    1aac:	ldr	r0, [r0, #44]	; 0x2c
    1ab0:	ldr	r1, [sp, #8]
    1ab4:	add	r2, r1, #8
    1ab8:	ldr	r1, [r1, #4]
    1abc:	sub	r1, r1, #1
    1ac0:	add	r1, r2, r1, lsl #4
    1ac4:	str	r0, [r1]
    1ac8:	movw	r0, #0
    1acc:	add	sp, sp, #12
    1ad0:	bx	lr

00001ad4 <coda_ascbin_cursor_get_bit_size>:
    1ad4:	push	{r4, sl, fp, lr}
    1ad8:	add	fp, sp, #8
    1adc:	sub	sp, sp, #664	; 0x298
    1ae0:	sub	sp, sp, #1024	; 0x400
    1ae4:	str	r0, [fp, #-16]
    1ae8:	str	r1, [fp, #-20]	; 0xffffffec
    1aec:	ldr	r0, [fp, #-16]
    1af0:	add	r1, r0, #8
    1af4:	ldr	r0, [r0, #4]
    1af8:	sub	r0, r0, #1
    1afc:	add	r0, r1, r0, lsl #4
    1b00:	ldr	r0, [r0]
    1b04:	ldr	r0, [r0]
    1b08:	cmp	r0, #100	; 0x64
    1b0c:	bcs	1b30 <coda_ascbin_cursor_get_bit_size+0x5c>
    1b10:	ldr	r0, [fp, #-16]
    1b14:	add	r1, r0, #8
    1b18:	ldr	r0, [r0, #4]
    1b1c:	sub	r0, r0, #1
    1b20:	add	r0, r1, r0, lsl #4
    1b24:	ldr	r0, [r0]
    1b28:	str	r0, [sp, #28]
    1b2c:	b	1b50 <coda_ascbin_cursor_get_bit_size+0x7c>
    1b30:	ldr	r0, [fp, #-16]
    1b34:	add	r1, r0, #8
    1b38:	ldr	r0, [r0, #4]
    1b3c:	sub	r0, r0, #1
    1b40:	add	r0, r1, r0, lsl #4
    1b44:	ldr	r0, [r0]
    1b48:	ldr	r0, [r0, #4]
    1b4c:	str	r0, [sp, #28]
    1b50:	ldr	r0, [sp, #28]
    1b54:	str	r0, [fp, #-24]	; 0xffffffe8
    1b58:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1b5c:	ldr	r0, [r0, #28]
    1b60:	cmp	r0, #0
    1b64:	bmi	1b88 <coda_ascbin_cursor_get_bit_size+0xb4>
    1b68:	b	1b6c <coda_ascbin_cursor_get_bit_size+0x98>
    1b6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1b70:	ldr	r1, [r0, #24]
    1b74:	ldr	r0, [r0, #28]
    1b78:	ldr	r2, [fp, #-20]	; 0xffffffec
    1b7c:	str	r0, [r2, #4]
    1b80:	str	r1, [r2]
    1b84:	b	219c <coda_ascbin_cursor_get_bit_size+0x6c8>
    1b88:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1b8c:	ldr	r0, [r0, #8]
    1b90:	cmp	r0, #0
    1b94:	str	r0, [sp, #24]
    1b98:	beq	1bb0 <coda_ascbin_cursor_get_bit_size+0xdc>
    1b9c:	b	1ba0 <coda_ascbin_cursor_get_bit_size+0xcc>
    1ba0:	ldr	r0, [sp, #24]
    1ba4:	cmp	r0, #1
    1ba8:	beq	1fb8 <coda_ascbin_cursor_get_bit_size+0x4e4>
    1bac:	b	2178 <coda_ascbin_cursor_get_bit_size+0x6a4>
    1bb0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1bb4:	str	r0, [fp, #-28]	; 0xffffffe4
    1bb8:	ldr	r0, [pc, #1520]	; 21b0 <coda_ascbin_cursor_get_bit_size+0x6dc>
    1bbc:	ldr	r0, [pc, r0]
    1bc0:	str	r0, [sp, #20]
    1bc4:	bl	0 <__aeabi_read_tp>
    1bc8:	ldr	r1, [sp, #20]
    1bcc:	ldr	r0, [r0, r1]
    1bd0:	cmp	r0, #0
    1bd4:	beq	1cb4 <coda_ascbin_cursor_get_bit_size+0x1e0>
    1bd8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1bdc:	ldr	r0, [r0, #32]
    1be0:	movw	r1, #0
    1be4:	cmp	r0, r1
    1be8:	beq	1cb4 <coda_ascbin_cursor_get_bit_size+0x1e0>
    1bec:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1bf0:	ldr	r0, [r0, #32]
    1bf4:	ldr	r1, [fp, #-16]
    1bf8:	ldr	r2, [fp, #-20]	; 0xffffffec
    1bfc:	bl	0 <coda_expression_eval_integer>
    1c00:	cmp	r0, #0
    1c04:	beq	1c28 <coda_ascbin_cursor_get_bit_size+0x154>
    1c08:	movw	r0, #0
    1c0c:	movt	r0, #0
    1c10:	bl	0 <coda_add_error_message>
    1c14:	ldr	r0, [fp, #-16]
    1c18:	bl	0 <coda_cursor_add_to_error_message>
    1c1c:	mvn	r0, #0
    1c20:	str	r0, [fp, #-12]
    1c24:	b	21a4 <coda_ascbin_cursor_get_bit_size+0x6d0>
    1c28:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1c2c:	ldr	r1, [r0, #24]
    1c30:	ldr	r0, [r0, #28]
    1c34:	mvn	r2, #7
    1c38:	eor	r1, r1, r2
    1c3c:	mvn	r0, r0
    1c40:	orr	r0, r1, r0
    1c44:	cmp	r0, #0
    1c48:	bne	1c70 <coda_ascbin_cursor_get_bit_size+0x19c>
    1c4c:	b	1c50 <coda_ascbin_cursor_get_bit_size+0x17c>
    1c50:	ldr	r0, [fp, #-20]	; 0xffffffec
    1c54:	ldr	r1, [r0]
    1c58:	ldr	r2, [r0, #4]
    1c5c:	lsl	r2, r2, #3
    1c60:	orr	r2, r2, r1, lsr #29
    1c64:	lsl	r1, r1, #3
    1c68:	str	r1, [r0]
    1c6c:	str	r2, [r0, #4]
    1c70:	ldr	r0, [fp, #-20]	; 0xffffffec
    1c74:	ldr	r0, [r0, #4]
    1c78:	cmn	r0, #1
    1c7c:	bgt	1cb0 <coda_ascbin_cursor_get_bit_size+0x1dc>
    1c80:	b	1c84 <coda_ascbin_cursor_get_bit_size+0x1b0>
    1c84:	ldr	r0, [pc, #1320]	; 21b4 <coda_ascbin_cursor_get_bit_size+0x6e0>
    1c88:	ldr	r1, [fp, #-20]	; 0xffffffec
    1c8c:	ldr	r2, [r1]
    1c90:	movw	r1, #0
    1c94:	movt	r1, #0
    1c98:	bl	0 <coda_set_error>
    1c9c:	ldr	r0, [fp, #-16]
    1ca0:	bl	0 <coda_cursor_add_to_error_message>
    1ca4:	mvn	r0, #0
    1ca8:	str	r0, [fp, #-12]
    1cac:	b	21a4 <coda_ascbin_cursor_get_bit_size+0x6d0>
    1cb0:	b	1fb4 <coda_ascbin_cursor_get_bit_size+0x4e0>
    1cb4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1cb8:	ldr	r0, [r0, #68]	; 0x44
    1cbc:	movw	r1, #0
    1cc0:	cmp	r0, r1
    1cc4:	beq	1d30 <coda_ascbin_cursor_get_bit_size+0x25c>
    1cc8:	ldr	r0, [fp, #-16]
    1ccc:	sub	r1, fp, #552	; 0x228
    1cd0:	mov	r2, r1
    1cd4:	str	r0, [sp, #16]
    1cd8:	mov	r0, r2
    1cdc:	ldr	r2, [sp, #16]
    1ce0:	str	r1, [sp, #12]
    1ce4:	mov	r1, r2
    1ce8:	movw	r2, #520	; 0x208
    1cec:	bl	0 <memcpy>
    1cf0:	ldr	r0, [sp, #12]
    1cf4:	bl	0 <coda_cursor_goto_available_union_field>
    1cf8:	cmp	r0, #0
    1cfc:	beq	1d0c <coda_ascbin_cursor_get_bit_size+0x238>
    1d00:	mvn	r0, #0
    1d04:	str	r0, [fp, #-12]
    1d08:	b	21a4 <coda_ascbin_cursor_get_bit_size+0x6d0>
    1d0c:	ldr	r1, [fp, #-20]	; 0xffffffec
    1d10:	sub	r0, fp, #552	; 0x228
    1d14:	bl	0 <coda_cursor_get_bit_size>
    1d18:	cmp	r0, #0
    1d1c:	beq	1d2c <coda_ascbin_cursor_get_bit_size+0x258>
    1d20:	mvn	r0, #0
    1d24:	str	r0, [fp, #-12]
    1d28:	b	21a4 <coda_ascbin_cursor_get_bit_size+0x6d0>
    1d2c:	b	1fb0 <coda_ascbin_cursor_get_bit_size+0x4dc>
    1d30:	mov	r0, #0
    1d34:	str	r0, [fp, #-556]	; 0xfffffdd4
    1d38:	str	r0, [fp, #-560]	; 0xfffffdd0
    1d3c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1d40:	ldr	r0, [r0, #48]	; 0x30
    1d44:	cmp	r0, #0
    1d48:	ble	1f9c <coda_ascbin_cursor_get_bit_size+0x4c8>
    1d4c:	ldr	r0, [fp, #-16]
    1d50:	add	r1, sp, #616	; 0x268
    1d54:	mov	r2, r1
    1d58:	str	r0, [sp, #8]
    1d5c:	mov	r0, r2
    1d60:	ldr	r2, [sp, #8]
    1d64:	str	r1, [sp, #4]
    1d68:	mov	r1, r2
    1d6c:	movw	r2, #520	; 0x208
    1d70:	bl	0 <memcpy>
    1d74:	ldr	r0, [sp, #4]
    1d78:	bl	0 <coda_cursor_goto_first_record_field>
    1d7c:	cmp	r0, #0
    1d80:	beq	1d90 <coda_ascbin_cursor_get_bit_size+0x2bc>
    1d84:	mvn	r0, #0
    1d88:	str	r0, [fp, #-12]
    1d8c:	b	21a4 <coda_ascbin_cursor_get_bit_size+0x6d0>
    1d90:	movw	r0, #0
    1d94:	str	r0, [sp, #612]	; 0x264
    1d98:	ldr	r0, [sp, #612]	; 0x264
    1d9c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1da0:	ldr	r1, [r1, #48]	; 0x30
    1da4:	cmp	r0, r1
    1da8:	bge	1f98 <coda_ascbin_cursor_get_bit_size+0x4c4>
    1dac:	mvn	r0, #0
    1db0:	str	r0, [sp, #596]	; 0x254
    1db4:	str	r0, [sp, #592]	; 0x250
    1db8:	ldr	r0, [sp, #612]	; 0x264
    1dbc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1dc0:	ldr	r1, [r1, #48]	; 0x30
    1dc4:	sub	r1, r1, #1
    1dc8:	cmp	r0, r1
    1dcc:	bge	1df8 <coda_ascbin_cursor_get_bit_size+0x324>
    1dd0:	add	r0, sp, #616	; 0x268
    1dd4:	add	r1, sp, #600	; 0x258
    1dd8:	add	r2, sp, #592	; 0x250
    1ddc:	bl	aac <get_next_relative_field_bit_offset>
    1de0:	cmp	r0, #0
    1de4:	beq	1df4 <coda_ascbin_cursor_get_bit_size+0x320>
    1de8:	mvn	r0, #0
    1dec:	str	r0, [fp, #-12]
    1df0:	b	21a4 <coda_ascbin_cursor_get_bit_size+0x6d0>
    1df4:	b	1df8 <coda_ascbin_cursor_get_bit_size+0x324>
    1df8:	ldr	r0, [sp, #596]	; 0x254
    1dfc:	cmn	r0, #1
    1e00:	bgt	1e2c <coda_ascbin_cursor_get_bit_size+0x358>
    1e04:	b	1e08 <coda_ascbin_cursor_get_bit_size+0x334>
    1e08:	add	r0, sp, #616	; 0x268
    1e0c:	add	r1, sp, #592	; 0x250
    1e10:	bl	0 <coda_cursor_get_bit_size>
    1e14:	cmp	r0, #0
    1e18:	beq	1e28 <coda_ascbin_cursor_get_bit_size+0x354>
    1e1c:	mvn	r0, #0
    1e20:	str	r0, [fp, #-12]
    1e24:	b	21a4 <coda_ascbin_cursor_get_bit_size+0x6d0>
    1e28:	b	1e2c <coda_ascbin_cursor_get_bit_size+0x358>
    1e2c:	ldr	r0, [sp, #592]	; 0x250
    1e30:	ldr	r1, [sp, #596]	; 0x254
    1e34:	ldr	r2, [fp, #-560]	; 0xfffffdd0
    1e38:	ldr	r3, [fp, #-556]	; 0xfffffdd4
    1e3c:	adds	r0, r2, r0
    1e40:	adc	r1, r3, r1
    1e44:	str	r0, [fp, #-560]	; 0xfffffdd0
    1e48:	str	r1, [fp, #-556]	; 0xfffffdd4
    1e4c:	ldr	r0, [sp, #612]	; 0x264
    1e50:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1e54:	ldr	r1, [r1, #48]	; 0x30
    1e58:	sub	r1, r1, #1
    1e5c:	cmp	r0, r1
    1e60:	bge	1f84 <coda_ascbin_cursor_get_bit_size+0x4b0>
    1e64:	mov	r0, #1
    1e68:	str	r0, [sp, #588]	; 0x24c
    1e6c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1e70:	ldr	r0, [r0, #52]	; 0x34
    1e74:	ldr	r1, [sp, #612]	; 0x264
    1e78:	add	r1, r1, #1
    1e7c:	add	r0, r0, r1, lsl #2
    1e80:	ldr	r0, [r0]
    1e84:	ldr	r0, [r0, #20]
    1e88:	movw	r1, #0
    1e8c:	cmp	r0, r1
    1e90:	beq	1ed4 <coda_ascbin_cursor_get_bit_size+0x400>
    1e94:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1e98:	ldr	r0, [r0, #52]	; 0x34
    1e9c:	ldr	r1, [sp, #612]	; 0x264
    1ea0:	add	r1, r1, #1
    1ea4:	add	r0, r0, r1, lsl #2
    1ea8:	ldr	r0, [r0]
    1eac:	ldr	r0, [r0, #20]
    1eb0:	ldr	r1, [fp, #-16]
    1eb4:	add	r2, sp, #588	; 0x24c
    1eb8:	bl	0 <coda_expression_eval_bool>
    1ebc:	cmp	r0, #0
    1ec0:	beq	1ed0 <coda_ascbin_cursor_get_bit_size+0x3fc>
    1ec4:	mvn	r0, #0
    1ec8:	str	r0, [fp, #-12]
    1ecc:	b	21a4 <coda_ascbin_cursor_get_bit_size+0x6d0>
    1ed0:	b	1ed4 <coda_ascbin_cursor_get_bit_size+0x400>
    1ed4:	ldr	r0, [sp, #588]	; 0x24c
    1ed8:	cmp	r0, #0
    1edc:	beq	1f14 <coda_ascbin_cursor_get_bit_size+0x440>
    1ee0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1ee4:	ldr	r0, [r0, #52]	; 0x34
    1ee8:	ldr	r1, [sp, #612]	; 0x264
    1eec:	add	r0, r0, r1, lsl #2
    1ef0:	ldr	r0, [r0, #4]
    1ef4:	ldr	r0, [r0, #8]
    1ef8:	add	r1, sp, #616	; 0x268
    1efc:	add	r1, r1, #8
    1f00:	ldr	r2, [sp, #620]	; 0x26c
    1f04:	sub	r2, r2, #1
    1f08:	add	r1, r1, r2, lsl #4
    1f0c:	str	r0, [r1]
    1f10:	b	1f38 <coda_ascbin_cursor_get_bit_size+0x464>
    1f14:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1f18:	ldr	r0, [r0]
    1f1c:	bl	0 <coda_no_data_singleton>
    1f20:	add	r1, sp, #616	; 0x268
    1f24:	add	r1, r1, #8
    1f28:	ldr	r2, [sp, #620]	; 0x26c
    1f2c:	sub	r2, r2, #1
    1f30:	add	r1, r1, r2, lsl #4
    1f34:	str	r0, [r1]
    1f38:	ldr	r0, [sp, #612]	; 0x264
    1f3c:	add	r0, r0, #1
    1f40:	add	r1, sp, #616	; 0x268
    1f44:	add	r1, r1, #8
    1f48:	ldr	r2, [sp, #620]	; 0x26c
    1f4c:	add	r2, r1, r2, lsl #4
    1f50:	str	r0, [r2, #-12]
    1f54:	ldr	r0, [fp, #-16]
    1f58:	ldr	r2, [r0, #4]
    1f5c:	ldr	r2, [r0, r2, lsl #4]!
    1f60:	ldr	r0, [r0, #4]
    1f64:	ldr	r3, [sp, #600]	; 0x258
    1f68:	ldr	ip, [sp, #604]	; 0x25c
    1f6c:	adds	r2, r2, r3
    1f70:	adc	r0, r0, ip
    1f74:	ldr	r3, [sp, #620]	; 0x26c
    1f78:	add	r1, r1, r3, lsl #4
    1f7c:	str	r2, [r1, #-8]
    1f80:	str	r0, [r1, #-4]
    1f84:	b	1f88 <coda_ascbin_cursor_get_bit_size+0x4b4>
    1f88:	ldr	r0, [sp, #612]	; 0x264
    1f8c:	add	r0, r0, #1
    1f90:	str	r0, [sp, #612]	; 0x264
    1f94:	b	1d98 <coda_ascbin_cursor_get_bit_size+0x2c4>
    1f98:	b	1f9c <coda_ascbin_cursor_get_bit_size+0x4c8>
    1f9c:	ldr	r0, [fp, #-560]	; 0xfffffdd0
    1fa0:	ldr	r1, [fp, #-556]	; 0xfffffdd4
    1fa4:	ldr	r2, [fp, #-20]	; 0xffffffec
    1fa8:	str	r1, [r2, #4]
    1fac:	str	r0, [r2]
    1fb0:	b	1fb4 <coda_ascbin_cursor_get_bit_size+0x4e0>
    1fb4:	b	2198 <coda_ascbin_cursor_get_bit_size+0x6c4>
    1fb8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1fbc:	str	r0, [sp, #584]	; 0x248
    1fc0:	ldr	r0, [fp, #-16]
    1fc4:	add	r1, sp, #580	; 0x244
    1fc8:	bl	0 <coda_cursor_get_num_elements>
    1fcc:	cmp	r0, #0
    1fd0:	beq	1fe0 <coda_ascbin_cursor_get_bit_size+0x50c>
    1fd4:	mvn	r0, #0
    1fd8:	str	r0, [fp, #-12]
    1fdc:	b	21a4 <coda_ascbin_cursor_get_bit_size+0x6d0>
    1fe0:	ldr	r0, [sp, #580]	; 0x244
    1fe4:	cmp	r0, #0
    1fe8:	bne	2000 <coda_ascbin_cursor_get_bit_size+0x52c>
    1fec:	ldr	r0, [fp, #-20]	; 0xffffffec
    1ff0:	mov	r1, #0
    1ff4:	str	r1, [r0, #4]
    1ff8:	str	r1, [r0]
    1ffc:	b	2174 <coda_ascbin_cursor_get_bit_size+0x6a0>
    2000:	ldr	r0, [sp, #584]	; 0x248
    2004:	ldr	r0, [r0, #40]	; 0x28
    2008:	ldr	r0, [r0, #28]
    200c:	cmp	r0, #0
    2010:	bmi	204c <coda_ascbin_cursor_get_bit_size+0x578>
    2014:	b	2018 <coda_ascbin_cursor_get_bit_size+0x544>
    2018:	ldr	r0, [sp, #580]	; 0x244
    201c:	asr	r1, r0, #31
    2020:	ldr	r2, [sp, #584]	; 0x248
    2024:	ldr	r2, [r2, #40]	; 0x28
    2028:	ldr	r3, [r2, #24]
    202c:	ldr	r2, [r2, #28]
    2030:	umull	ip, lr, r0, r3
    2034:	mla	r0, r0, r2, lr
    2038:	mla	r0, r1, r3, r0
    203c:	ldr	r1, [fp, #-20]	; 0xffffffec
    2040:	str	ip, [r1]
    2044:	str	r0, [r1, #4]
    2048:	b	2170 <coda_ascbin_cursor_get_bit_size+0x69c>
    204c:	mov	r0, #0
    2050:	str	r0, [sp, #52]	; 0x34
    2054:	str	r0, [sp, #48]	; 0x30
    2058:	ldr	r1, [fp, #-16]
    205c:	add	r0, sp, #56	; 0x38
    2060:	mov	r2, #520	; 0x208
    2064:	str	r0, [sp]
    2068:	bl	0 <memcpy>
    206c:	ldr	r1, [sp, #60]	; 0x3c
    2070:	add	r1, r1, #1
    2074:	str	r1, [sp, #60]	; 0x3c
    2078:	ldr	r1, [sp, #60]	; 0x3c
    207c:	ldr	r2, [sp]
    2080:	add	r3, r2, r1, lsl #4
    2084:	ldr	ip, [r3, #-16]
    2088:	ldr	lr, [r3, #-12]
    208c:	str	ip, [r2, r1, lsl #4]
    2090:	str	lr, [r3, #4]
    2094:	movw	r1, #0
    2098:	str	r1, [sp, #44]	; 0x2c
    209c:	ldr	r0, [sp, #44]	; 0x2c
    20a0:	ldr	r1, [sp, #580]	; 0x244
    20a4:	cmp	r0, r1
    20a8:	bge	215c <coda_ascbin_cursor_get_bit_size+0x688>
    20ac:	ldr	r0, [sp, #584]	; 0x248
    20b0:	ldr	r0, [r0, #40]	; 0x28
    20b4:	add	r1, sp, #56	; 0x38
    20b8:	add	r1, r1, #8
    20bc:	ldr	r2, [sp, #60]	; 0x3c
    20c0:	add	r2, r1, r2, lsl #4
    20c4:	str	r0, [r2, #-16]
    20c8:	ldr	r0, [sp, #44]	; 0x2c
    20cc:	ldr	r2, [sp, #60]	; 0x3c
    20d0:	sub	r2, r2, #1
    20d4:	add	r1, r1, r2, lsl #4
    20d8:	str	r0, [r1, #4]
    20dc:	add	r0, sp, #56	; 0x38
    20e0:	add	r1, sp, #32
    20e4:	bl	0 <coda_cursor_get_bit_size>
    20e8:	cmp	r0, #0
    20ec:	beq	20fc <coda_ascbin_cursor_get_bit_size+0x628>
    20f0:	mvn	r0, #0
    20f4:	str	r0, [fp, #-12]
    20f8:	b	21a4 <coda_ascbin_cursor_get_bit_size+0x6d0>
    20fc:	ldr	r0, [sp, #32]
    2100:	ldr	r1, [sp, #36]	; 0x24
    2104:	ldr	r2, [sp, #48]	; 0x30
    2108:	ldr	r3, [sp, #52]	; 0x34
    210c:	adds	r0, r2, r0
    2110:	adc	r1, r3, r1
    2114:	str	r0, [sp, #48]	; 0x30
    2118:	str	r1, [sp, #52]	; 0x34
    211c:	ldr	r0, [sp, #32]
    2120:	ldr	r1, [sp, #36]	; 0x24
    2124:	ldr	r2, [sp, #60]	; 0x3c
    2128:	lsl	r3, r2, #4
    212c:	add	ip, sp, #56	; 0x38
    2130:	add	lr, ip, r2, lsl #4
    2134:	ldr	r4, [lr, #4]
    2138:	ldr	r2, [ip, r2, lsl #4]
    213c:	adds	r0, r2, r0
    2140:	adc	r1, r4, r1
    2144:	str	r0, [r3, ip]
    2148:	str	r1, [lr, #4]
    214c:	ldr	r0, [sp, #44]	; 0x2c
    2150:	add	r0, r0, #1
    2154:	str	r0, [sp, #44]	; 0x2c
    2158:	b	209c <coda_ascbin_cursor_get_bit_size+0x5c8>
    215c:	ldr	r0, [sp, #48]	; 0x30
    2160:	ldr	r1, [sp, #52]	; 0x34
    2164:	ldr	r2, [fp, #-20]	; 0xffffffec
    2168:	str	r1, [r2, #4]
    216c:	str	r0, [r2]
    2170:	b	2174 <coda_ascbin_cursor_get_bit_size+0x6a0>
    2174:	b	2198 <coda_ascbin_cursor_get_bit_size+0x6c4>
    2178:	movw	r0, #0
    217c:	movt	r0, #0
    2180:	movw	r1, #0
    2184:	movt	r1, #0
    2188:	movw	r2, #768	; 0x300
    218c:	movw	r3, #0
    2190:	movt	r3, #0
    2194:	bl	0 <__assert_fail>
    2198:	b	219c <coda_ascbin_cursor_get_bit_size+0x6c8>
    219c:	movw	r0, #0
    21a0:	str	r0, [fp, #-12]
    21a4:	ldr	r0, [fp, #-12]
    21a8:	sub	sp, fp, #8
    21ac:	pop	{r4, sl, fp, pc}
    21b0:	.word	0x000005ec
    21b4:	.word	0xfffffed4

000021b8 <coda_ascbin_cursor_get_num_elements>:
    21b8:	push	{fp, lr}
    21bc:	mov	fp, sp
    21c0:	sub	sp, sp, #72	; 0x48
    21c4:	str	r0, [fp, #-8]
    21c8:	str	r1, [fp, #-12]
    21cc:	ldr	r0, [fp, #-8]
    21d0:	add	r1, r0, #8
    21d4:	ldr	r0, [r0, #4]
    21d8:	sub	r0, r0, #1
    21dc:	add	r0, r1, r0, lsl #4
    21e0:	ldr	r0, [r0]
    21e4:	ldr	r0, [r0]
    21e8:	cmp	r0, #100	; 0x64
    21ec:	bcs	2210 <coda_ascbin_cursor_get_num_elements+0x58>
    21f0:	ldr	r0, [fp, #-8]
    21f4:	add	r1, r0, #8
    21f8:	ldr	r0, [r0, #4]
    21fc:	sub	r0, r0, #1
    2200:	add	r0, r1, r0, lsl #4
    2204:	ldr	r0, [r0]
    2208:	str	r0, [sp, #4]
    220c:	b	2230 <coda_ascbin_cursor_get_num_elements+0x78>
    2210:	ldr	r0, [fp, #-8]
    2214:	add	r1, r0, #8
    2218:	ldr	r0, [r0, #4]
    221c:	sub	r0, r0, #1
    2220:	add	r0, r1, r0, lsl #4
    2224:	ldr	r0, [r0]
    2228:	ldr	r0, [r0, #4]
    222c:	str	r0, [sp, #4]
    2230:	ldr	r0, [sp, #4]
    2234:	str	r0, [fp, #-16]
    2238:	ldr	r0, [fp, #-16]
    223c:	ldr	r0, [r0, #8]
    2240:	cmp	r0, #0
    2244:	str	r0, [sp]
    2248:	beq	2260 <coda_ascbin_cursor_get_num_elements+0xa8>
    224c:	b	2250 <coda_ascbin_cursor_get_num_elements+0x98>
    2250:	ldr	r0, [sp]
    2254:	cmp	r0, #1
    2258:	beq	2274 <coda_ascbin_cursor_get_num_elements+0xbc>
    225c:	b	23cc <coda_ascbin_cursor_get_num_elements+0x214>
    2260:	ldr	r0, [fp, #-16]
    2264:	ldr	r0, [r0, #48]	; 0x30
    2268:	ldr	r1, [fp, #-12]
    226c:	str	r0, [r1]
    2270:	b	23ec <coda_ascbin_cursor_get_num_elements+0x234>
    2274:	ldr	r0, [fp, #-16]
    2278:	str	r0, [fp, #-20]	; 0xffffffec
    227c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2280:	ldr	r0, [r0, #44]	; 0x2c
    2284:	cmn	r0, #1
    2288:	beq	22a0 <coda_ascbin_cursor_get_num_elements+0xe8>
    228c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2290:	ldr	r0, [r0, #44]	; 0x2c
    2294:	ldr	r1, [fp, #-12]
    2298:	str	r0, [r1]
    229c:	b	23c8 <coda_ascbin_cursor_get_num_elements+0x210>
    22a0:	movw	r0, #1
    22a4:	str	r0, [fp, #-24]	; 0xffffffe8
    22a8:	movw	r0, #0
    22ac:	str	r0, [fp, #-28]	; 0xffffffe4
    22b0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    22b4:	ldr	r1, [fp, #-20]	; 0xffffffec
    22b8:	ldr	r1, [r1, #48]	; 0x30
    22bc:	cmp	r0, r1
    22c0:	bge	23bc <coda_ascbin_cursor_get_num_elements+0x204>
    22c4:	ldr	r0, [fp, #-20]	; 0xffffffec
    22c8:	add	r0, r0, #52	; 0x34
    22cc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    22d0:	add	r0, r0, r1, lsl #2
    22d4:	ldr	r0, [r0]
    22d8:	cmn	r0, #1
    22dc:	bne	2388 <coda_ascbin_cursor_get_num_elements+0x1d0>
    22e0:	ldr	r0, [fp, #-20]	; 0xffffffec
    22e4:	add	r0, r0, #84	; 0x54
    22e8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    22ec:	add	r0, r0, r1, lsl #2
    22f0:	ldr	r0, [r0]
    22f4:	ldr	r1, [fp, #-8]
    22f8:	add	r2, sp, #32
    22fc:	bl	0 <coda_expression_eval_integer>
    2300:	cmp	r0, #0
    2304:	beq	232c <coda_ascbin_cursor_get_num_elements+0x174>
    2308:	ldr	r1, [fp, #-28]	; 0xffffffe4
    230c:	movw	r0, #0
    2310:	movt	r0, #0
    2314:	bl	0 <coda_add_error_message>
    2318:	ldr	r0, [fp, #-8]
    231c:	bl	0 <coda_cursor_add_to_error_message>
    2320:	mvn	r0, #0
    2324:	str	r0, [fp, #-4]
    2328:	b	23f4 <coda_ascbin_cursor_get_num_elements+0x23c>
    232c:	ldr	r0, [sp, #36]	; 0x24
    2330:	cmn	r0, #1
    2334:	bgt	2374 <coda_ascbin_cursor_get_num_elements+0x1bc>
    2338:	b	233c <coda_ascbin_cursor_get_num_elements+0x184>
    233c:	add	r2, sp, #11
    2340:	ldr	r0, [sp, #32]
    2344:	ldr	r1, [sp, #36]	; 0x24
    2348:	bl	0 <coda_str64>
    234c:	ldr	r0, [pc, #172]	; 2400 <coda_ascbin_cursor_get_num_elements+0x248>
    2350:	add	r2, sp, #11
    2354:	movw	r1, #0
    2358:	movt	r1, #0
    235c:	bl	0 <coda_set_error>
    2360:	ldr	r0, [fp, #-8]
    2364:	bl	0 <coda_cursor_add_to_error_message>
    2368:	mvn	r0, #0
    236c:	str	r0, [fp, #-4]
    2370:	b	23f4 <coda_ascbin_cursor_get_num_elements+0x23c>
    2374:	ldr	r0, [sp, #32]
    2378:	ldr	r1, [fp, #-24]	; 0xffffffe8
    237c:	mul	r0, r1, r0
    2380:	str	r0, [fp, #-24]	; 0xffffffe8
    2384:	b	23a8 <coda_ascbin_cursor_get_num_elements+0x1f0>
    2388:	ldr	r0, [fp, #-20]	; 0xffffffec
    238c:	add	r0, r0, #52	; 0x34
    2390:	ldr	r1, [fp, #-28]	; 0xffffffe4
    2394:	add	r0, r0, r1, lsl #2
    2398:	ldr	r0, [r0]
    239c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    23a0:	mul	r0, r1, r0
    23a4:	str	r0, [fp, #-24]	; 0xffffffe8
    23a8:	b	23ac <coda_ascbin_cursor_get_num_elements+0x1f4>
    23ac:	ldr	r0, [fp, #-28]	; 0xffffffe4
    23b0:	add	r0, r0, #1
    23b4:	str	r0, [fp, #-28]	; 0xffffffe4
    23b8:	b	22b0 <coda_ascbin_cursor_get_num_elements+0xf8>
    23bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    23c0:	ldr	r1, [fp, #-12]
    23c4:	str	r0, [r1]
    23c8:	b	23ec <coda_ascbin_cursor_get_num_elements+0x234>
    23cc:	movw	r0, #0
    23d0:	movt	r0, #0
    23d4:	movw	r1, #0
    23d8:	movt	r1, #0
    23dc:	movw	r2, #835	; 0x343
    23e0:	movw	r3, #0
    23e4:	movt	r3, #0
    23e8:	bl	0 <__assert_fail>
    23ec:	movw	r0, #0
    23f0:	str	r0, [fp, #-4]
    23f4:	ldr	r0, [fp, #-4]
    23f8:	mov	sp, fp
    23fc:	pop	{fp, pc}
    2400:	.word	0xfffffed4

00002404 <coda_ascbin_cursor_get_record_field_available_status>:
    2404:	push	{fp, lr}
    2408:	mov	fp, sp
    240c:	sub	sp, sp, #32
    2410:	str	r0, [fp, #-8]
    2414:	str	r1, [fp, #-12]
    2418:	str	r2, [sp, #16]
    241c:	ldr	r0, [fp, #-8]
    2420:	add	r1, r0, #8
    2424:	ldr	r0, [r0, #4]
    2428:	sub	r0, r0, #1
    242c:	add	r0, r1, r0, lsl #4
    2430:	ldr	r0, [r0]
    2434:	ldr	r0, [r0]
    2438:	cmp	r0, #100	; 0x64
    243c:	bcs	2460 <coda_ascbin_cursor_get_record_field_available_status+0x5c>
    2440:	ldr	r0, [fp, #-8]
    2444:	add	r1, r0, #8
    2448:	ldr	r0, [r0, #4]
    244c:	sub	r0, r0, #1
    2450:	add	r0, r1, r0, lsl #4
    2454:	ldr	r0, [r0]
    2458:	str	r0, [sp, #4]
    245c:	b	2480 <coda_ascbin_cursor_get_record_field_available_status+0x7c>
    2460:	ldr	r0, [fp, #-8]
    2464:	add	r1, r0, #8
    2468:	ldr	r0, [r0, #4]
    246c:	sub	r0, r0, #1
    2470:	add	r0, r1, r0, lsl #4
    2474:	ldr	r0, [r0]
    2478:	ldr	r0, [r0, #4]
    247c:	str	r0, [sp, #4]
    2480:	ldr	r0, [sp, #4]
    2484:	str	r0, [sp, #12]
    2488:	ldr	r0, [fp, #-12]
    248c:	cmp	r0, #0
    2490:	blt	24a8 <coda_ascbin_cursor_get_record_field_available_status+0xa4>
    2494:	ldr	r0, [fp, #-12]
    2498:	ldr	r1, [sp, #12]
    249c:	ldr	r1, [r1, #48]	; 0x30
    24a0:	cmp	r0, r1
    24a4:	blt	24d0 <coda_ascbin_cursor_get_record_field_available_status+0xcc>
    24a8:	ldr	r2, [fp, #-12]
    24ac:	ldr	r0, [sp, #12]
    24b0:	ldr	r3, [r0, #48]	; 0x30
    24b4:	mvn	r0, #100	; 0x64
    24b8:	movw	r1, #0
    24bc:	movt	r1, #0
    24c0:	bl	0 <coda_set_error>
    24c4:	mvn	r0, #0
    24c8:	str	r0, [fp, #-4]
    24cc:	b	25a0 <coda_ascbin_cursor_get_record_field_available_status+0x19c>
    24d0:	ldr	r0, [sp, #12]
    24d4:	ldr	r0, [r0, #68]	; 0x44
    24d8:	movw	r1, #0
    24dc:	cmp	r0, r1
    24e0:	beq	2528 <coda_ascbin_cursor_get_record_field_available_status+0x124>
    24e4:	ldr	r0, [fp, #-8]
    24e8:	add	r1, sp, #8
    24ec:	bl	0 <coda_cursor_get_available_union_field_index>
    24f0:	cmp	r0, #0
    24f4:	beq	2504 <coda_ascbin_cursor_get_record_field_available_status+0x100>
    24f8:	mvn	r0, #0
    24fc:	str	r0, [fp, #-4]
    2500:	b	25a0 <coda_ascbin_cursor_get_record_field_available_status+0x19c>
    2504:	ldr	r0, [fp, #-12]
    2508:	ldr	r1, [sp, #8]
    250c:	cmp	r0, r1
    2510:	movw	r0, #0
    2514:	moveq	r0, #1
    2518:	and	r0, r0, #1
    251c:	ldr	r1, [sp, #16]
    2520:	str	r0, [r1]
    2524:	b	2598 <coda_ascbin_cursor_get_record_field_available_status+0x194>
    2528:	ldr	r0, [sp, #12]
    252c:	ldr	r0, [r0, #52]	; 0x34
    2530:	ldr	r1, [fp, #-12]
    2534:	add	r0, r0, r1, lsl #2
    2538:	ldr	r0, [r0]
    253c:	ldr	r0, [r0, #20]
    2540:	movw	r1, #0
    2544:	cmp	r0, r1
    2548:	beq	2588 <coda_ascbin_cursor_get_record_field_available_status+0x184>
    254c:	ldr	r0, [sp, #12]
    2550:	ldr	r0, [r0, #52]	; 0x34
    2554:	ldr	r1, [fp, #-12]
    2558:	add	r0, r0, r1, lsl #2
    255c:	ldr	r0, [r0]
    2560:	ldr	r0, [r0, #20]
    2564:	ldr	r1, [fp, #-8]
    2568:	ldr	r2, [sp, #16]
    256c:	bl	0 <coda_expression_eval_bool>
    2570:	cmp	r0, #0
    2574:	beq	2584 <coda_ascbin_cursor_get_record_field_available_status+0x180>
    2578:	mvn	r0, #0
    257c:	str	r0, [fp, #-4]
    2580:	b	25a0 <coda_ascbin_cursor_get_record_field_available_status+0x19c>
    2584:	b	2594 <coda_ascbin_cursor_get_record_field_available_status+0x190>
    2588:	ldr	r0, [sp, #16]
    258c:	movw	r1, #1
    2590:	str	r1, [r0]
    2594:	b	2598 <coda_ascbin_cursor_get_record_field_available_status+0x194>
    2598:	movw	r0, #0
    259c:	str	r0, [fp, #-4]
    25a0:	ldr	r0, [fp, #-4]
    25a4:	mov	sp, fp
    25a8:	pop	{fp, pc}

000025ac <coda_ascbin_cursor_get_array_dim>:
    25ac:	push	{fp, lr}
    25b0:	mov	fp, sp
    25b4:	sub	sp, sp, #64	; 0x40
    25b8:	str	r0, [fp, #-8]
    25bc:	str	r1, [fp, #-12]
    25c0:	str	r2, [fp, #-16]
    25c4:	ldr	r0, [fp, #-8]
    25c8:	add	r1, r0, #8
    25cc:	ldr	r0, [r0, #4]
    25d0:	sub	r0, r0, #1
    25d4:	add	r0, r1, r0, lsl #4
    25d8:	ldr	r0, [r0]
    25dc:	ldr	r0, [r0]
    25e0:	cmp	r0, #100	; 0x64
    25e4:	bcs	2608 <coda_ascbin_cursor_get_array_dim+0x5c>
    25e8:	ldr	r0, [fp, #-8]
    25ec:	add	r1, r0, #8
    25f0:	ldr	r0, [r0, #4]
    25f4:	sub	r0, r0, #1
    25f8:	add	r0, r1, r0, lsl #4
    25fc:	ldr	r0, [r0]
    2600:	str	r0, [sp, #4]
    2604:	b	2628 <coda_ascbin_cursor_get_array_dim+0x7c>
    2608:	ldr	r0, [fp, #-8]
    260c:	add	r1, r0, #8
    2610:	ldr	r0, [r0, #4]
    2614:	sub	r0, r0, #1
    2618:	add	r0, r1, r0, lsl #4
    261c:	ldr	r0, [r0]
    2620:	ldr	r0, [r0, #4]
    2624:	str	r0, [sp, #4]
    2628:	ldr	r0, [sp, #4]
    262c:	str	r0, [fp, #-20]	; 0xffffffec
    2630:	ldr	r0, [fp, #-20]	; 0xffffffec
    2634:	ldr	r0, [r0, #48]	; 0x30
    2638:	ldr	r1, [fp, #-12]
    263c:	str	r0, [r1]
    2640:	movw	r0, #0
    2644:	str	r0, [fp, #-24]	; 0xffffffe8
    2648:	ldr	r0, [fp, #-24]	; 0xffffffe8
    264c:	ldr	r1, [fp, #-20]	; 0xffffffec
    2650:	ldr	r1, [r1, #48]	; 0x30
    2654:	cmp	r0, r1
    2658:	bge	2754 <coda_ascbin_cursor_get_array_dim+0x1a8>
    265c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2660:	add	r0, r0, #52	; 0x34
    2664:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2668:	add	r0, r0, r1, lsl #2
    266c:	ldr	r0, [r0]
    2670:	cmn	r0, #1
    2674:	bne	2724 <coda_ascbin_cursor_get_array_dim+0x178>
    2678:	ldr	r0, [fp, #-20]	; 0xffffffec
    267c:	add	r0, r0, #84	; 0x54
    2680:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2684:	add	r0, r0, r1, lsl #2
    2688:	ldr	r0, [r0]
    268c:	ldr	r1, [fp, #-8]
    2690:	add	r2, sp, #32
    2694:	bl	0 <coda_expression_eval_integer>
    2698:	cmp	r0, #0
    269c:	beq	26c4 <coda_ascbin_cursor_get_array_dim+0x118>
    26a0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    26a4:	movw	r0, #0
    26a8:	movt	r0, #0
    26ac:	bl	0 <coda_add_error_message>
    26b0:	ldr	r0, [fp, #-8]
    26b4:	bl	0 <coda_cursor_add_to_error_message>
    26b8:	mvn	r0, #0
    26bc:	str	r0, [fp, #-4]
    26c0:	b	275c <coda_ascbin_cursor_get_array_dim+0x1b0>
    26c4:	ldr	r0, [sp, #36]	; 0x24
    26c8:	cmn	r0, #1
    26cc:	bgt	270c <coda_ascbin_cursor_get_array_dim+0x160>
    26d0:	b	26d4 <coda_ascbin_cursor_get_array_dim+0x128>
    26d4:	add	r2, sp, #11
    26d8:	ldr	r0, [sp, #32]
    26dc:	ldr	r1, [sp, #36]	; 0x24
    26e0:	bl	0 <coda_str64>
    26e4:	ldr	r0, [pc, #124]	; 2768 <coda_ascbin_cursor_get_array_dim+0x1bc>
    26e8:	add	r2, sp, #11
    26ec:	movw	r1, #0
    26f0:	movt	r1, #0
    26f4:	bl	0 <coda_set_error>
    26f8:	ldr	r0, [fp, #-8]
    26fc:	bl	0 <coda_cursor_add_to_error_message>
    2700:	mvn	r0, #0
    2704:	str	r0, [fp, #-4]
    2708:	b	275c <coda_ascbin_cursor_get_array_dim+0x1b0>
    270c:	ldr	r0, [sp, #32]
    2710:	ldr	r1, [fp, #-16]
    2714:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2718:	add	r1, r1, r2, lsl #2
    271c:	str	r0, [r1]
    2720:	b	2740 <coda_ascbin_cursor_get_array_dim+0x194>
    2724:	ldr	r0, [fp, #-20]	; 0xffffffec
    2728:	ldr	r1, [fp, #-24]	; 0xffffffe8
    272c:	add	r0, r0, r1, lsl #2
    2730:	ldr	r0, [r0, #52]	; 0x34
    2734:	ldr	r2, [fp, #-16]
    2738:	add	r1, r2, r1, lsl #2
    273c:	str	r0, [r1]
    2740:	b	2744 <coda_ascbin_cursor_get_array_dim+0x198>
    2744:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2748:	add	r0, r0, #1
    274c:	str	r0, [fp, #-24]	; 0xffffffe8
    2750:	b	2648 <coda_ascbin_cursor_get_array_dim+0x9c>
    2754:	movw	r0, #0
    2758:	str	r0, [fp, #-4]
    275c:	ldr	r0, [fp, #-4]
    2760:	mov	sp, fp
    2764:	pop	{fp, pc}
    2768:	.word	0xfffffed4
