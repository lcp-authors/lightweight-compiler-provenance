
../compcert-repos/prog2/CMakeFiles/MT2E1-2.dir/Extras/Miniteste2-Exemplo1/prob2/heap.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <heap_nova>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	sub	sp, sp, #16
   c:	str	r0, [sp, #8]
  10:	movw	r0, #12
  14:	bl	0 <malloc>
  18:	str	r0, [sp, #4]
  1c:	ldr	r0, [sp, #4]
  20:	movw	lr, #0
  24:	cmp	r0, lr
  28:	bne	38 <heap_nova+0x38>
  2c:	movw	r0, #0
  30:	str	r0, [fp, #-4]
  34:	b	94 <heap_nova+0x94>
  38:	ldr	r0, [sp, #4]
  3c:	movw	r1, #0
  40:	str	r1, [r0]
  44:	ldr	r0, [sp, #8]
  48:	ldr	r1, [sp, #4]
  4c:	str	r0, [r1, #4]
  50:	ldr	r0, [sp, #8]
  54:	movw	r1, #4
  58:	bl	0 <calloc>
  5c:	ldr	r1, [sp, #4]
  60:	str	r0, [r1, #8]
  64:	ldr	r0, [sp, #4]
  68:	ldr	r0, [r0, #8]
  6c:	movw	r1, #0
  70:	cmp	r0, r1
  74:	bne	8c <heap_nova+0x8c>
  78:	ldr	r0, [sp, #4]
  7c:	bl	0 <free>
  80:	movw	r0, #0
  84:	str	r0, [fp, #-4]
  88:	b	94 <heap_nova+0x94>
  8c:	ldr	r0, [sp, #4]
  90:	str	r0, [fp, #-4]
  94:	ldr	r0, [fp, #-4]
  98:	mov	sp, fp
  9c:	pop	{fp, pc}

000000a0 <heap_apaga>:
  a0:	push	{fp, lr}
  a4:	mov	fp, sp
  a8:	sub	sp, sp, #8
  ac:	str	r0, [sp, #4]
  b0:	ldr	r0, [sp, #4]
  b4:	movw	r1, #0
  b8:	cmp	r0, r1
  bc:	bne	c4 <heap_apaga+0x24>
  c0:	b	148 <heap_apaga+0xa8>
  c4:	movw	r0, #0
  c8:	str	r0, [sp]
  cc:	ldr	r0, [sp]
  d0:	ldr	r1, [sp, #4]
  d4:	ldr	r1, [r1]
  d8:	cmp	r0, r1
  dc:	bge	134 <heap_apaga+0x94>
  e0:	ldr	r0, [sp, #4]
  e4:	ldr	r0, [r0, #8]
  e8:	ldr	r1, [sp]
  ec:	ldr	r0, [r0, r1, lsl #2]
  f0:	ldr	r0, [r0, #4]
  f4:	bl	0 <free>
  f8:	ldr	r0, [sp, #4]
  fc:	ldr	r0, [r0, #8]
 100:	ldr	r1, [sp]
 104:	ldr	r0, [r0, r1, lsl #2]
 108:	bl	0 <free>
 10c:	ldr	r0, [sp, #4]
 110:	ldr	r0, [r0, #8]
 114:	ldr	r1, [sp]
 118:	add	r0, r0, r1, lsl #2
 11c:	movw	r1, #0
 120:	str	r1, [r0]
 124:	ldr	r0, [sp]
 128:	add	r0, r0, #1
 12c:	str	r0, [sp]
 130:	b	cc <heap_apaga+0x2c>
 134:	ldr	r0, [sp, #4]
 138:	ldr	r0, [r0, #8]
 13c:	bl	0 <free>
 140:	ldr	r0, [sp, #4]
 144:	bl	0 <free>
 148:	mov	sp, fp
 14c:	pop	{fp, pc}

00000150 <elemento_cria>:
 150:	push	{fp, lr}
 154:	mov	fp, sp
 158:	sub	sp, sp, #24
 15c:	str	r0, [fp, #-8]
 160:	str	r1, [sp, #12]
 164:	movw	r0, #8
 168:	bl	0 <malloc>
 16c:	str	r0, [sp, #8]
 170:	ldr	r0, [sp, #8]
 174:	movw	r1, #0
 178:	cmp	r0, r1
 17c:	bne	18c <elemento_cria+0x3c>
 180:	movw	r0, #0
 184:	str	r0, [fp, #-4]
 188:	b	1f8 <elemento_cria+0xa8>
 18c:	ldr	r0, [sp, #12]
 190:	bl	0 <strlen>
 194:	add	r0, r0, #1
 198:	movw	r1, #1
 19c:	bl	0 <calloc>
 1a0:	ldr	r1, [sp, #8]
 1a4:	str	r0, [r1, #4]
 1a8:	ldr	r0, [sp, #8]
 1ac:	ldr	r0, [r0, #4]
 1b0:	movw	r1, #0
 1b4:	cmp	r0, r1
 1b8:	bne	1d0 <elemento_cria+0x80>
 1bc:	ldr	r0, [sp, #8]
 1c0:	bl	0 <free>
 1c4:	movw	r0, #0
 1c8:	str	r0, [fp, #-4]
 1cc:	b	1f8 <elemento_cria+0xa8>
 1d0:	ldr	r0, [sp, #8]
 1d4:	ldr	r0, [r0, #4]
 1d8:	ldr	r1, [sp, #12]
 1dc:	bl	0 <strcpy>
 1e0:	ldr	r1, [fp, #-8]
 1e4:	ldr	lr, [sp, #8]
 1e8:	str	r1, [lr]
 1ec:	ldr	r1, [sp, #8]
 1f0:	str	r1, [fp, #-4]
 1f4:	str	r0, [sp, #4]
 1f8:	ldr	r0, [fp, #-4]
 1fc:	mov	sp, fp
 200:	pop	{fp, pc}

00000204 <heap_insere>:
 204:	push	{fp, lr}
 208:	mov	fp, sp
 20c:	sub	sp, sp, #32
 210:	str	r0, [fp, #-8]
 214:	str	r1, [fp, #-12]
 218:	str	r2, [sp, #16]
 21c:	ldr	r0, [fp, #-8]
 220:	ldr	r0, [r0]
 224:	ldr	r1, [fp, #-8]
 228:	ldr	r1, [r1, #4]
 22c:	cmp	r0, r1
 230:	blt	240 <heap_insere+0x3c>
 234:	movw	r0, #0
 238:	str	r0, [fp, #-4]
 23c:	b	378 <heap_insere+0x174>
 240:	ldr	r0, [sp, #16]
 244:	ldr	r1, [fp, #-12]
 248:	bl	150 <elemento_cria>
 24c:	str	r0, [sp, #8]
 250:	ldr	r0, [sp, #8]
 254:	movw	r1, #0
 258:	cmp	r0, r1
 25c:	bne	26c <heap_insere+0x68>
 260:	movw	r0, #0
 264:	str	r0, [fp, #-4]
 268:	b	378 <heap_insere+0x174>
 26c:	ldr	r0, [fp, #-8]
 270:	ldr	r0, [r0]
 274:	str	r0, [sp, #4]
 278:	ldr	r0, [sp, #8]
 27c:	ldr	r1, [fp, #-8]
 280:	ldr	r1, [r1, #8]
 284:	ldr	r2, [sp, #4]
 288:	add	r1, r1, r2, lsl #2
 28c:	str	r0, [r1]
 290:	ldr	r0, [fp, #-8]
 294:	ldr	r1, [r0]
 298:	add	r1, r1, #1
 29c:	str	r1, [r0]
 2a0:	ldr	r0, [sp, #4]
 2a4:	cmp	r0, #0
 2a8:	movw	r0, #0
 2ac:	str	r0, [sp]
 2b0:	beq	2f0 <heap_insere+0xec>
 2b4:	ldr	r0, [fp, #-8]
 2b8:	ldr	r0, [r0, #8]
 2bc:	ldr	r1, [sp, #4]
 2c0:	ldr	r2, [r0, r1, lsl #2]
 2c4:	sub	r1, r1, #1
 2c8:	add	r1, r1, r1, lsr #31
 2cc:	asr	r1, r1, #1
 2d0:	add	r0, r0, r1, lsl #2
 2d4:	ldr	r1, [r0]
 2d8:	mov	r0, r2
 2dc:	bl	384 <menor_que>
 2e0:	cmp	r0, #0
 2e4:	movw	r0, #0
 2e8:	movne	r0, #1
 2ec:	str	r0, [sp]
 2f0:	ldr	r0, [sp]
 2f4:	tst	r0, #1
 2f8:	beq	370 <heap_insere+0x16c>
 2fc:	ldr	r0, [fp, #-8]
 300:	ldr	r0, [r0, #8]
 304:	ldr	r1, [sp, #4]
 308:	sub	r1, r1, #1
 30c:	add	r1, r1, r1, lsr #31
 310:	mvn	r2, #3
 314:	and	r1, r2, r1, lsl #1
 318:	ldr	r0, [r0, r1]
 31c:	str	r0, [sp, #12]
 320:	ldr	r0, [fp, #-8]
 324:	ldr	r0, [r0, #8]
 328:	ldr	r1, [sp, #4]
 32c:	ldr	r3, [r0, r1, lsl #2]
 330:	sub	r1, r1, #1
 334:	add	r1, r1, r1, lsr #31
 338:	and	r1, r2, r1, lsl #1
 33c:	str	r3, [r0, r1]
 340:	ldr	r0, [sp, #12]
 344:	ldr	r1, [fp, #-8]
 348:	ldr	r1, [r1, #8]
 34c:	ldr	r2, [sp, #4]
 350:	add	r1, r1, r2, lsl #2
 354:	str	r0, [r1]
 358:	ldr	r0, [sp, #4]
 35c:	sub	r0, r0, #1
 360:	movw	r1, #2
 364:	sdiv	r0, r0, r1
 368:	str	r0, [sp, #4]
 36c:	b	2a0 <heap_insere+0x9c>
 370:	movw	r0, #1
 374:	str	r0, [fp, #-4]
 378:	ldr	r0, [fp, #-4]
 37c:	mov	sp, fp
 380:	pop	{fp, pc}

00000384 <menor_que>:
 384:	sub	sp, sp, #12
 388:	str	r0, [sp, #4]
 38c:	str	r1, [sp]
 390:	ldr	r0, [sp, #4]
 394:	movw	r1, #0
 398:	cmp	r0, r1
 39c:	beq	3b0 <menor_que+0x2c>
 3a0:	ldr	r0, [sp]
 3a4:	movw	r1, #0
 3a8:	cmp	r0, r1
 3ac:	bne	3bc <menor_que+0x38>
 3b0:	movw	r0, #0
 3b4:	str	r0, [sp, #8]
 3b8:	b	3e0 <menor_que+0x5c>
 3bc:	ldr	r0, [sp, #4]
 3c0:	ldr	r0, [r0]
 3c4:	ldr	r1, [sp]
 3c8:	ldr	r1, [r1]
 3cc:	cmp	r0, r1
 3d0:	movw	r0, #0
 3d4:	movlt	r0, #1
 3d8:	and	r0, r0, #1
 3dc:	str	r0, [sp, #8]
 3e0:	ldr	r0, [sp, #8]
 3e4:	add	sp, sp, #12
 3e8:	bx	lr

000003ec <heap_remove>:
 3ec:	push	{fp, lr}
 3f0:	mov	fp, sp
 3f4:	sub	sp, sp, #32
 3f8:	str	r0, [fp, #-8]
 3fc:	ldr	r0, [fp, #-8]
 400:	movw	r1, #0
 404:	cmp	r0, r1
 408:	beq	41c <heap_remove+0x30>
 40c:	ldr	r0, [fp, #-8]
 410:	ldr	r0, [r0]
 414:	cmp	r0, #0
 418:	bgt	428 <heap_remove+0x3c>
 41c:	movw	r0, #0
 420:	str	r0, [fp, #-4]
 424:	b	5ac <heap_remove+0x1c0>
 428:	ldr	r0, [fp, #-8]
 42c:	ldr	r0, [r0, #8]
 430:	ldr	r0, [r0]
 434:	ldr	r0, [r0, #4]
 438:	str	r0, [sp, #8]
 43c:	ldr	r0, [fp, #-8]
 440:	ldr	r0, [r0, #8]
 444:	ldr	r0, [r0]
 448:	bl	0 <free>
 44c:	ldr	r0, [fp, #-8]
 450:	ldr	lr, [r0]
 454:	sub	lr, lr, #1
 458:	str	lr, [r0]
 45c:	ldr	r0, [fp, #-8]
 460:	ldr	lr, [r0]
 464:	ldr	r0, [r0, #8]
 468:	ldr	lr, [r0, lr, lsl #2]
 46c:	str	lr, [r0]
 470:	ldr	r0, [fp, #-8]
 474:	ldr	lr, [r0]
 478:	ldr	r0, [r0, #8]
 47c:	add	r0, r0, lr, lsl #2
 480:	movw	lr, #0
 484:	str	lr, [r0]
 488:	str	lr, [fp, #-12]
 48c:	ldr	r0, [fp, #-12]
 490:	lsl	r0, r0, #1
 494:	add	r0, r0, #1
 498:	ldr	r1, [fp, #-8]
 49c:	ldr	r1, [r1]
 4a0:	cmp	r0, r1
 4a4:	bge	5a4 <heap_remove+0x1b8>
 4a8:	ldr	r0, [fp, #-12]
 4ac:	mov	r1, #1
 4b0:	orr	r0, r1, r0, lsl #1
 4b4:	str	r0, [sp, #16]
 4b8:	ldr	r0, [fp, #-12]
 4bc:	lsl	r0, r0, #1
 4c0:	add	r0, r0, #2
 4c4:	ldr	r1, [fp, #-8]
 4c8:	ldr	r1, [r1]
 4cc:	cmp	r0, r1
 4d0:	bge	518 <heap_remove+0x12c>
 4d4:	ldr	r0, [fp, #-8]
 4d8:	ldr	r0, [r0, #8]
 4dc:	ldr	r1, [fp, #-12]
 4e0:	add	r2, r0, r1, lsl #3
 4e4:	ldr	r2, [r2, #8]
 4e8:	mov	r3, #1
 4ec:	orr	r1, r3, r1, lsl #1
 4f0:	add	r0, r0, r1, lsl #2
 4f4:	ldr	r1, [r0]
 4f8:	mov	r0, r2
 4fc:	bl	384 <menor_que>
 500:	cmp	r0, #0
 504:	beq	518 <heap_remove+0x12c>
 508:	ldr	r0, [fp, #-12]
 50c:	lsl	r0, r0, #1
 510:	add	r0, r0, #2
 514:	str	r0, [sp, #16]
 518:	ldr	r0, [fp, #-8]
 51c:	ldr	r0, [r0, #8]
 520:	ldr	r1, [sp, #16]
 524:	ldr	r1, [r0, r1, lsl #2]
 528:	ldr	r2, [fp, #-12]
 52c:	add	r0, r0, r2, lsl #2
 530:	ldr	r0, [r0]
 534:	str	r0, [sp, #4]
 538:	mov	r0, r1
 53c:	ldr	r1, [sp, #4]
 540:	bl	384 <menor_que>
 544:	cmp	r0, #0
 548:	beq	59c <heap_remove+0x1b0>
 54c:	ldr	r0, [fp, #-8]
 550:	ldr	r0, [r0, #8]
 554:	ldr	r1, [sp, #16]
 558:	ldr	r0, [r0, r1, lsl #2]
 55c:	str	r0, [sp, #12]
 560:	ldr	r0, [fp, #-8]
 564:	ldr	r0, [r0, #8]
 568:	ldr	r1, [fp, #-12]
 56c:	ldr	r1, [r0, r1, lsl #2]
 570:	ldr	r2, [sp, #16]
 574:	str	r1, [r0, r2, lsl #2]
 578:	ldr	r0, [sp, #12]
 57c:	ldr	r1, [fp, #-8]
 580:	ldr	r1, [r1, #8]
 584:	ldr	r2, [fp, #-12]
 588:	add	r1, r1, r2, lsl #2
 58c:	str	r0, [r1]
 590:	ldr	r0, [sp, #16]
 594:	str	r0, [fp, #-12]
 598:	b	5a0 <heap_remove+0x1b4>
 59c:	b	5a4 <heap_remove+0x1b8>
 5a0:	b	48c <heap_remove+0xa0>
 5a4:	ldr	r0, [sp, #8]
 5a8:	str	r0, [fp, #-4]
 5ac:	ldr	r0, [fp, #-4]
 5b0:	mov	sp, fp
 5b4:	pop	{fp, pc}

000005b8 <mostraHeap>:
 5b8:	push	{fp, lr}
 5bc:	mov	fp, sp
 5c0:	sub	sp, sp, #32
 5c4:	str	r0, [fp, #-4]
 5c8:	str	r1, [fp, #-8]
 5cc:	movw	r0, #0
 5d0:	str	r0, [sp, #16]
 5d4:	ldr	r0, [fp, #-8]
 5d8:	ldr	r1, [fp, #-4]
 5dc:	ldr	r1, [r1]
 5e0:	cmp	r0, r1
 5e4:	bge	6b8 <mostraHeap+0x100>
 5e8:	ldr	r0, [fp, #-8]
 5ec:	str	r0, [fp, #-12]
 5f0:	ldr	r0, [fp, #-12]
 5f4:	cmp	r0, #0
 5f8:	ble	620 <mostraHeap+0x68>
 5fc:	ldr	r0, [fp, #-12]
 600:	sub	r0, r0, #1
 604:	movw	r1, #2
 608:	sdiv	r0, r0, r1
 60c:	str	r0, [fp, #-12]
 610:	ldr	r0, [sp, #16]
 614:	add	r0, r0, #1
 618:	str	r0, [sp, #16]
 61c:	b	5f0 <mostraHeap+0x38>
 620:	ldr	r0, [fp, #-4]
 624:	ldr	r1, [fp, #-8]
 628:	lsl	r1, r1, #1
 62c:	add	r1, r1, #1
 630:	bl	5b8 <mostraHeap>
 634:	movw	r0, #0
 638:	str	r0, [fp, #-12]
 63c:	ldr	r0, [fp, #-12]
 640:	ldr	r1, [sp, #16]
 644:	movw	r2, #3
 648:	mul	r1, r1, r2
 64c:	cmp	r0, r1
 650:	bge	674 <mostraHeap+0xbc>
 654:	movw	r0, #0
 658:	movt	r0, #0
 65c:	bl	0 <printf>
 660:	str	r0, [sp, #12]
 664:	ldr	r0, [fp, #-12]
 668:	add	r0, r0, #1
 66c:	str	r0, [fp, #-12]
 670:	b	63c <mostraHeap+0x84>
 674:	ldr	r0, [fp, #-4]
 678:	ldr	r0, [r0, #8]
 67c:	ldr	r1, [fp, #-8]
 680:	ldr	r0, [r0, r1, lsl #2]
 684:	ldr	r2, [r0]
 688:	ldr	r1, [r0, #4]
 68c:	movw	r0, #0
 690:	movt	r0, #0
 694:	bl	0 <printf>
 698:	ldr	r1, [fp, #-4]
 69c:	ldr	r2, [fp, #-8]
 6a0:	lsl	r2, r2, #1
 6a4:	add	r2, r2, #2
 6a8:	str	r0, [sp, #8]
 6ac:	mov	r0, r1
 6b0:	mov	r1, r2
 6b4:	bl	5b8 <mostraHeap>
 6b8:	ldr	r0, [sp, #16]
 6bc:	cmp	r0, #0
 6c0:	bne	6d4 <mostraHeap+0x11c>
 6c4:	movw	r0, #0
 6c8:	movt	r0, #0
 6cc:	bl	0 <printf>
 6d0:	str	r0, [sp, #4]
 6d4:	mov	sp, fp
 6d8:	pop	{fp, pc}
