
../repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/flatcc.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <flatcc_init_options>:
   0:	mov	ip, sp
   4:	sub	sp, sp, #16
   8:	str	ip, [sp]
   c:	str	lr, [sp, #4]
  10:	str	r4, [sp, #8]
  14:	mov	r4, r0
  18:	mov	r1, #0
  1c:	mov	r2, #224	; 0xe0
  20:	mov	r0, r4
  24:	bl	0 <memset>
  28:	mov	r0, #65536	; 0x10000
  2c:	str	r0, [r4]
  30:	mov	ip, #100	; 0x64
  34:	str	ip, [r4, #4]
  38:	mov	r2, #100	; 0x64
  3c:	str	r2, [r4, #8]
  40:	mov	r3, #1
  44:	str	r3, [r4, #16]
  48:	mov	r1, #1
  4c:	str	r1, [r4, #20]
  50:	mov	r3, #1
  54:	str	r3, [r4, #24]
  58:	mov	r0, #1
  5c:	str	r0, [r4, #28]
  60:	mov	r2, #1
  64:	str	r2, [r4, #32]
  68:	mov	r1, #1
  6c:	str	r1, [r4, #36]	; 0x24
  70:	mov	ip, #1
  74:	str	ip, [r4, #40]	; 0x28
  78:	mov	ip, #1
  7c:	str	ip, [r4, #44]	; 0x2c
  80:	mov	r2, #1
  84:	str	r2, [r4, #48]	; 0x30
  88:	mov	ip, #1
  8c:	str	ip, [r4, #52]	; 0x34
  90:	mov	ip, #0
  94:	str	ip, [r4, #56]	; 0x38
  98:	mov	r2, #0
  9c:	str	r2, [r4, #60]	; 0x3c
  a0:	mov	r2, #4
  a4:	str	r2, [r4, #64]	; 0x40
  a8:	mov	ip, #2
  ac:	str	ip, [r4, #68]	; 0x44
  b0:	mov	r0, #1
  b4:	str	r0, [r4, #72]	; 0x48
  b8:	mov	ip, #1
  bc:	str	ip, [r4, #76]	; 0x4c
  c0:	mov	r2, #0
  c4:	str	r2, [r4, #80]	; 0x50
  c8:	mov	r1, #1
  cc:	str	r1, [r4, #84]	; 0x54
  d0:	mov	r1, #0
  d4:	movw	r0, #65534	; 0xfffe
  d8:	str	r0, [r4, #88]	; 0x58
  dc:	str	r1, [r4, #92]	; 0x5c
  e0:	ldr	r1, [pc, #128]	; 168 <flatcc_init_options+0x168>
  e4:	str	r1, [r4, #96]	; 0x60
  e8:	ldr	r3, [pc, #128]	; 170 <flatcc_init_options+0x170>
  ec:	str	r3, [r4, #100]	; 0x64
  f0:	ldr	r0, [pc, #116]	; 16c <flatcc_init_options+0x16c>
  f4:	str	r0, [r4, #104]	; 0x68
  f8:	mov	r0, #0
  fc:	str	r0, [r4, #132]	; 0x84
 100:	mov	r3, #1
 104:	str	r3, [r4, #136]	; 0x88
 108:	mov	r1, #1
 10c:	str	r1, [r4, #140]	; 0x8c
 110:	mov	r3, #0
 114:	str	r3, [r4, #144]	; 0x90
 118:	mov	r3, #0
 11c:	str	r3, [r4, #148]	; 0x94
 120:	mov	r0, #0
 124:	str	r0, [r4, #152]	; 0x98
 128:	mov	r2, #0
 12c:	str	r2, [r4, #156]	; 0x9c
 130:	mov	r0, #0
 134:	str	r0, [r4, #164]	; 0xa4
 138:	mov	r3, #4
 13c:	str	r3, [r4, #176]	; 0xb0
 140:	mov	r3, #0
 144:	str	r3, [r4, #180]	; 0xb4
 148:	mov	r2, #1
 14c:	str	r2, [r4, #184]	; 0xb8
 150:	mov	r1, #0
 154:	str	r1, [r4, #188]	; 0xbc
 158:	ldr	r4, [sp, #8]
 15c:	ldr	lr, [sp, #4]
 160:	add	sp, sp, #16
 164:	bx	lr
 168:	.word	0x00000176
 16c:	.word	0x00000123
 170:	.word	0x00000041

00000174 <flatcc_create_context>:
 174:	mov	ip, sp
 178:	sub	sp, sp, #40	; 0x28
 17c:	str	ip, [sp, #8]
 180:	str	lr, [sp, #12]
 184:	str	r4, [sp, #16]
 188:	str	r5, [sp, #20]
 18c:	str	r6, [sp, #24]
 190:	str	r7, [sp, #28]
 194:	str	r8, [sp, #32]
 198:	mov	r8, r3
 19c:	mov	r5, r2
 1a0:	mov	r6, r1
 1a4:	mov	r7, r0
 1a8:	mov	r0, #560	; 0x230
 1ac:	bl	0 <malloc>
 1b0:	mov	r4, r0
 1b4:	cmp	r4, #0
 1b8:	bne	1c4 <flatcc_create_context+0x50>
 1bc:	mov	r0, #0
 1c0:	b	200 <flatcc_create_context+0x8c>
 1c4:	mov	r2, #0
 1c8:	str	r2, [sp, #4]
 1cc:	str	r8, [sp]
 1d0:	mov	r3, r5
 1d4:	mov	r2, r6
 1d8:	mov	r1, r7
 1dc:	mov	r0, r4
 1e0:	bl	0 <__flatcc_fb_init_parser>
 1e4:	cmp	r0, #0
 1e8:	beq	1fc <flatcc_create_context+0x88>
 1ec:	mov	r0, r4
 1f0:	bl	0 <free>
 1f4:	mov	r0, #0
 1f8:	b	200 <flatcc_create_context+0x8c>
 1fc:	mov	r0, r4
 200:	ldr	r4, [sp, #16]
 204:	ldr	r5, [sp, #20]
 208:	ldr	r6, [sp, #24]
 20c:	ldr	r7, [sp, #28]
 210:	ldr	r8, [sp, #32]
 214:	ldr	lr, [sp, #12]
 218:	add	sp, sp, #40	; 0x28
 21c:	bx	lr

00000220 <flatcc_parse_buffer>:
 220:	mov	ip, sp
 224:	sub	sp, sp, #24
 228:	str	ip, [sp]
 22c:	str	lr, [sp, #4]
 230:	str	r4, [sp, #8]
 234:	str	r5, [sp, #12]
 238:	str	r6, [sp, #16]
 23c:	mov	r5, r2
 240:	mov	r6, r1
 244:	mov	r4, r0
 248:	mov	r2, #1
 24c:	str	r2, [r4, #140]	; 0x8c
 250:	ldr	r0, [r4, #128]	; 0x80
 254:	cmp	r5, r0
 258:	bls	278 <flatcc_parse_buffer+0x58>
 25c:	cmp	r0, #0
 260:	bls	278 <flatcc_parse_buffer+0x58>
 264:	ldr	r1, [pc, #128]	; 2ec <flatcc_parse_buffer+0xcc>
 268:	mov	r0, r4
 26c:	bl	0 <__flatcc_fb_print_error>
 270:	mvn	r0, #0
 274:	b	2d4 <flatcc_parse_buffer+0xb4>
 278:	add	r0, r4, #524	; 0x20c
 27c:	add	r1, r4, #352	; 0x160
 280:	mov	r2, #1
 284:	bl	0 <ptr_set_insert_item>
 288:	mov	r3, #0
 28c:	mov	r2, r5
 290:	mov	r1, r6
 294:	mov	r0, r4
 298:	bl	0 <__flatcc_fb_parse>
 29c:	cmp	r0, #0
 2a0:	bne	2bc <flatcc_parse_buffer+0x9c>
 2a4:	mov	r0, r4
 2a8:	bl	0 <__flatcc_fb_build_schema>
 2ac:	cmp	r0, #0
 2b0:	movne	r3, #1
 2b4:	moveq	r3, #0
 2b8:	b	2c0 <flatcc_parse_buffer+0xa0>
 2bc:	mov	r3, #1
 2c0:	mvn	ip, #0
 2c4:	mov	r1, #0
 2c8:	cmp	r3, #0
 2cc:	movne	r0, ip
 2d0:	moveq	r0, r1
 2d4:	ldr	r4, [sp, #8]
 2d8:	ldr	r5, [sp, #12]
 2dc:	ldr	r6, [sp, #16]
 2e0:	ldr	lr, [sp, #4]
 2e4:	add	sp, sp, #24
 2e8:	bx	lr
 2ec:	.word	0x000000c6

000002f0 <visit_dep>:
 2f0:	mov	ip, sp
 2f4:	sub	sp, sp, #8
 2f8:	str	ip, [sp]
 2fc:	str	lr, [sp, #4]
 300:	add	r0, r0, #172	; 0xac
 304:	mov	r2, #1
 308:	bl	0 <ptr_set_insert_item>
 30c:	ldr	lr, [sp, #4]
 310:	add	sp, sp, #8
 314:	bx	lr

00000318 <add_visible_schema>:
 318:	mov	ip, sp
 31c:	sub	sp, sp, #8
 320:	str	ip, [sp]
 324:	str	lr, [sp, #4]
 328:	mov	r2, r0
 32c:	add	r0, r1, #172	; 0xac
 330:	ldr	r1, [pc, #8]	; 340 <add_visible_schema+0x28>
 334:	ldr	lr, [sp, #4]
 338:	add	sp, sp, #8
 33c:	b	0 <ptr_set_visit>
 340:	.word	0x00000000

00000344 <flatcc_parse_file>:
 344:	mov	ip, sp
 348:	sub	sp, sp, #72	; 0x48
 34c:	str	ip, [sp, #8]
 350:	str	lr, [sp, #12]
 354:	str	r4, [sp, #32]
 358:	str	r5, [sp, #36]	; 0x24
 35c:	str	r6, [sp, #40]	; 0x28
 360:	str	r7, [sp, #44]	; 0x2c
 364:	str	r8, [sp, #48]	; 0x30
 368:	str	r9, [sp, #52]	; 0x34
 36c:	str	sl, [sp, #56]	; 0x38
 370:	str	fp, [sp, #60]	; 0x3c
 374:	mov	r9, r1
 378:	mov	r4, r0
 37c:	mov	r0, r9
 380:	bl	0 <strlen>
 384:	mov	fp, r0
 388:	ldr	r2, [r4, #412]	; 0x19c
 38c:	add	r0, r2, #32
 390:	add	r1, r4, #352	; 0x160
 394:	mov	r2, #1
 398:	bl	0 <fb_schema_table_insert_item>
 39c:	cmp	r0, #0
 3a0:	beq	3ac <flatcc_parse_file+0x68>
 3a4:	mov	r0, #0
 3a8:	b	adc <flatcc_parse_file+0x798>
 3ac:	mov	r5, #0
 3b0:	mov	r7, #0
 3b4:	mov	ip, #0
 3b8:	str	ip, [sp, #28]
 3bc:	mvn	r6, #0
 3c0:	ldr	ip, [r4, #552]	; 0x228
 3c4:	cmp	ip, #0
 3c8:	moveq	sl, #1
 3cc:	movne	sl, #0
 3d0:	cmp	ip, #0
 3d4:	bne	45c <flatcc_parse_file+0x118>
 3d8:	ldr	r1, [r4, #128]	; 0x80
 3dc:	add	r2, sp, #64	; 0x40
 3e0:	mov	r0, r9
 3e4:	bl	0 <__flatcc_fb_read_file>
 3e8:	mov	r5, r0
 3ec:	cmp	r0, #0
 3f0:	bne	42c <flatcc_parse_file+0xe8>
 3f4:	ldr	r0, [sp, #64]	; 0x40
 3f8:	ldr	r1, [r4, #412]	; 0x19c
 3fc:	ldr	r2, [r1, #56]	; 0x38
 400:	add	ip, r0, r2
 404:	ldr	r3, [r4, #128]	; 0x80
 408:	cmp	ip, r3
 40c:	bls	45c <flatcc_parse_file+0x118>
 410:	cmp	r3, #0
 414:	bls	45c <flatcc_parse_file+0x118>
 418:	ldr	r1, [pc, #1768]	; b08 <flatcc_parse_file+0x7c4>
 41c:	mov	r0, r4
 420:	bl	0 <__flatcc_fb_print_error>
 424:	mvn	r6, #0
 428:	b	ad8 <flatcc_parse_file+0x794>
 42c:	mov	r0, r9
 430:	bl	0 <__flatcc_fb_copy_path>
 434:	mov	r7, r0
 438:	mov	r2, r7
 43c:	cmp	r2, #0
 440:	bne	45c <flatcc_parse_file+0x118>
 444:	ldr	ip, [pc, #1784]	; b44 <flatcc_parse_file+0x800>
 448:	ldr	r0, [ip]
 44c:	ldr	r1, [pc, #1768]	; b3c <flatcc_parse_file+0x7f8>
 450:	bl	0 <fprintf>
 454:	mov	r0, #1
 458:	bl	0 <exit>
 45c:	mov	r8, #0
 460:	cmp	r5, #0
 464:	bne	528 <flatcc_parse_file+0x1e4>
 468:	ldr	r0, [r4, #336]	; 0x150
 46c:	cmp	r8, r0
 470:	bge	528 <flatcc_parse_file+0x1e4>
 474:	ldr	r2, [r4, #328]	; 0x148
 478:	ldr	r5, [r2, r8, lsl #2]
 47c:	mov	r0, r5
 480:	bl	0 <strlen>
 484:	ldr	r2, [pc, #1704]	; b34 <flatcc_parse_file+0x7f0>
 488:	mov	r1, #1
 48c:	str	r1, [sp, #4]
 490:	str	r2, [sp]
 494:	mov	r3, fp
 498:	mov	r2, r9
 49c:	mov	r1, r0
 4a0:	mov	r0, r5
 4a4:	bl	0 <__flatcc_fb_create_join_path_n>
 4a8:	mov	r7, r0
 4ac:	cmp	r0, #0
 4b0:	bne	4cc <flatcc_parse_file+0x188>
 4b4:	ldr	r2, [pc, #1672]	; b44 <flatcc_parse_file+0x800>
 4b8:	ldr	r0, [r2]
 4bc:	ldr	r1, [pc, #1656]	; b3c <flatcc_parse_file+0x7f8>
 4c0:	bl	0 <fprintf>
 4c4:	mov	r0, #1
 4c8:	bl	0 <exit>
 4cc:	ldr	r1, [r4, #128]	; 0x80
 4d0:	add	r2, sp, #64	; 0x40
 4d4:	mov	r0, r7
 4d8:	bl	0 <__flatcc_fb_read_file>
 4dc:	mov	r5, r0
 4e0:	cmp	r5, #0
 4e4:	bne	520 <flatcc_parse_file+0x1dc>
 4e8:	mov	r0, r7
 4ec:	bl	0 <free>
 4f0:	mov	r7, #0
 4f4:	ldr	r1, [sp, #64]	; 0x40
 4f8:	ldr	r0, [r4, #128]	; 0x80
 4fc:	cmp	r1, r0
 500:	bls	520 <flatcc_parse_file+0x1dc>
 504:	cmp	r0, #0
 508:	bls	520 <flatcc_parse_file+0x1dc>
 50c:	ldr	r1, [pc, #1524]	; b08 <flatcc_parse_file+0x7c4>
 510:	mov	r0, r4
 514:	bl	0 <__flatcc_fb_print_error>
 518:	mvn	r6, #0
 51c:	b	ad8 <flatcc_parse_file+0x794>
 520:	add	r8, r8, #1
 524:	b	460 <flatcc_parse_file+0x11c>
 528:	eor	ip, sl, #1
 52c:	mov	r1, #0
 530:	cmp	r5, #0
 534:	moveq	r3, ip
 538:	movne	r3, r1
 53c:	cmp	r3, #0
 540:	beq	5f8 <flatcc_parse_file+0x2b4>
 544:	ldr	r5, [r4, #552]	; 0x228
 548:	mov	r0, r5
 54c:	bl	0 <strlen>
 550:	mov	r1, r0
 554:	mov	r0, r5
 558:	bl	0 <__flatcc_fb_find_basename>
 55c:	ldr	r1, [pc, #1488]	; b34 <flatcc_parse_file+0x7f0>
 560:	mov	r3, #1
 564:	str	r3, [sp, #4]
 568:	str	r1, [sp]
 56c:	mov	r3, fp
 570:	mov	r2, r9
 574:	mov	r1, r0
 578:	mov	r0, r5
 57c:	bl	0 <__flatcc_fb_create_join_path_n>
 580:	mov	r7, r0
 584:	cmp	r0, #0
 588:	bne	5a4 <flatcc_parse_file+0x260>
 58c:	ldr	ip, [pc, #1456]	; b44 <flatcc_parse_file+0x800>
 590:	ldr	r0, [ip]
 594:	ldr	r1, [pc, #1440]	; b3c <flatcc_parse_file+0x7f8>
 598:	bl	0 <fprintf>
 59c:	mov	r0, #1
 5a0:	bl	0 <exit>
 5a4:	ldr	r1, [r4, #128]	; 0x80
 5a8:	add	r2, sp, #64	; 0x40
 5ac:	mov	r0, r7
 5b0:	bl	0 <__flatcc_fb_read_file>
 5b4:	mov	r5, r0
 5b8:	cmp	r0, #0
 5bc:	bne	5f8 <flatcc_parse_file+0x2b4>
 5c0:	mov	r0, r7
 5c4:	bl	0 <free>
 5c8:	mov	r7, #0
 5cc:	ldr	r0, [sp, #64]	; 0x40
 5d0:	ldr	r2, [r4, #128]	; 0x80
 5d4:	cmp	r0, r2
 5d8:	bls	5f8 <flatcc_parse_file+0x2b4>
 5dc:	cmp	r2, #0
 5e0:	bls	5f8 <flatcc_parse_file+0x2b4>
 5e4:	ldr	r1, [pc, #1308]	; b08 <flatcc_parse_file+0x7c4>
 5e8:	mov	r0, r4
 5ec:	bl	0 <__flatcc_fb_print_error>
 5f0:	mvn	r6, #0
 5f4:	b	ad8 <flatcc_parse_file+0x794>
 5f8:	cmp	r5, #0
 5fc:	bne	614 <flatcc_parse_file+0x2d0>
 600:	ldr	r1, [pc, #1292]	; b14 <flatcc_parse_file+0x7d0>
 604:	mov	r2, r9
 608:	mov	r0, r4
 60c:	bl	0 <__flatcc_fb_print_error>
 610:	b	aac <flatcc_parse_file+0x768>
 614:	ldr	r0, [r4, #412]	; 0x19c
 618:	ldr	ip, [r0, #56]	; 0x38
 61c:	ldr	r3, [sp, #64]	; 0x40
 620:	add	r1, ip, r3
 624:	str	r1, [r0, #56]	; 0x38
 628:	str	r7, [r4, #548]	; 0x224
 62c:	mov	r7, #0
 630:	ldr	r2, [sp, #64]	; 0x40
 634:	mov	r3, #1
 638:	mov	r1, r5
 63c:	mov	r0, r4
 640:	bl	0 <__flatcc_fb_parse>
 644:	mov	r6, r0
 648:	cmp	r6, #0
 64c:	bne	ad4 <flatcc_parse_file+0x790>
 650:	ldr	r9, [r4, #352]	; 0x160
 654:	cmp	r9, #0
 658:	beq	820 <flatcc_parse_file+0x4dc>
 65c:	ldr	r0, [r9, #8]
 660:	ldr	r1, [r9, #12]
 664:	bl	0 <__flatcc_fb_copy_path_n>
 668:	str	r0, [sp, #28]
 66c:	ldr	ip, [sp, #28]
 670:	cmp	ip, #0
 674:	bne	690 <flatcc_parse_file+0x34c>
 678:	ldr	r3, [pc, #1220]	; b44 <flatcc_parse_file+0x800>
 67c:	ldr	r0, [r3]
 680:	ldr	r1, [pc, #1204]	; b3c <flatcc_parse_file+0x7f8>
 684:	bl	0 <fprintf>
 688:	mov	r0, #1
 68c:	bl	0 <exit>
 690:	ldr	r0, [sp, #28]
 694:	str	r0, [sp, #20]
 698:	mov	r5, r4
 69c:	add	fp, r5, #128	; 0x80
 6a0:	ldr	r8, [r5, #412]	; 0x19c
 6a4:	ldr	r3, [r8, #52]	; 0x34
 6a8:	ldr	ip, [r5, #132]	; 0x84
 6ac:	cmp	r3, ip
 6b0:	blt	6d0 <flatcc_parse_file+0x38c>
 6b4:	cmp	ip, #0
 6b8:	ble	6d0 <flatcc_parse_file+0x38c>
 6bc:	ldr	r1, [pc, #1148]	; b40 <flatcc_parse_file+0x7fc>
 6c0:	mov	r0, r5
 6c4:	bl	0 <__flatcc_fb_print_error>
 6c8:	mvn	r2, #0
 6cc:	b	800 <flatcc_parse_file+0x4bc>
 6d0:	ldr	r3, [r8, #48]	; 0x30
 6d4:	ldr	r1, [fp, #8]
 6d8:	cmp	r3, r1
 6dc:	blt	6fc <flatcc_parse_file+0x3b8>
 6e0:	cmp	r1, #0
 6e4:	ble	6fc <flatcc_parse_file+0x3b8>
 6e8:	ldr	r1, [pc, #1112]	; b48 <flatcc_parse_file+0x804>
 6ec:	mov	r0, r5
 6f0:	bl	0 <__flatcc_fb_print_error>
 6f4:	mvn	r2, #0
 6f8:	b	800 <flatcc_parse_file+0x4bc>
 6fc:	ldr	r3, [sp, #20]
 700:	str	r3, [sp, #24]
 704:	mov	r0, #560	; 0x230
 708:	bl	0 <malloc>
 70c:	str	r0, [sp, #16]
 710:	ldr	r2, [sp, #16]
 714:	cmp	r2, #0
 718:	bne	724 <flatcc_parse_file+0x3e0>
 71c:	mov	r0, #0
 720:	b	764 <flatcc_parse_file+0x420>
 724:	ldr	r3, [r5, #8]
 728:	ldr	r2, [r5, #12]
 72c:	ldr	r0, [r5, #412]	; 0x19c
 730:	str	r0, [sp, #4]
 734:	str	r2, [sp]
 738:	ldr	r2, [sp, #24]
 73c:	mov	r1, fp
 740:	ldr	r0, [sp, #16]
 744:	bl	0 <__flatcc_fb_init_parser>
 748:	cmp	r0, #0
 74c:	beq	760 <flatcc_parse_file+0x41c>
 750:	ldr	r0, [sp, #16]
 754:	bl	0 <free>
 758:	mov	r0, #0
 75c:	b	764 <flatcc_parse_file+0x420>
 760:	ldr	r0, [sp, #16]
 764:	mov	fp, r0
 768:	cmp	r0, #0
 76c:	bne	778 <flatcc_parse_file+0x434>
 770:	mvn	r2, #0
 774:	b	800 <flatcc_parse_file+0x4bc>
 778:	add	r0, r8, #32
 77c:	add	r1, fp, #352	; 0x160
 780:	bl	0 <fb_schema_table_find_item>
 784:	mov	r1, r0
 788:	cmp	r0, #0
 78c:	beq	7a8 <flatcc_parse_file+0x464>
 790:	add	r0, r5, #352	; 0x160
 794:	bl	318 <add_visible_schema>
 798:	mov	r0, fp
 79c:	bl	d50 <flatcc_destroy_context>
 7a0:	mov	r2, #0
 7a4:	b	800 <flatcc_parse_file+0x4bc>
 7a8:	ldr	r2, [r5]
 7ac:	str	r2, [fp]
 7b0:	str	fp, [r5]
 7b4:	ldr	r0, [r5, #548]	; 0x224
 7b8:	str	r0, [fp, #552]	; 0x228
 7bc:	ldr	ip, [r8, #52]	; 0x34
 7c0:	add	r2, ip, #1
 7c4:	str	r2, [r8, #52]	; 0x34
 7c8:	ldr	r3, [r8, #48]	; 0x30
 7cc:	add	ip, r3, #1
 7d0:	str	ip, [r8, #48]	; 0x30
 7d4:	ldr	r1, [sp, #20]
 7d8:	mov	r0, fp
 7dc:	bl	344 <flatcc_parse_file>
 7e0:	cmp	r0, #0
 7e4:	beq	7f0 <flatcc_parse_file+0x4ac>
 7e8:	mvn	r2, #0
 7ec:	b	800 <flatcc_parse_file+0x4bc>
 7f0:	add	r0, r5, #352	; 0x160
 7f4:	add	r1, fp, #352	; 0x160
 7f8:	bl	318 <add_visible_schema>
 7fc:	mov	r2, #0
 800:	cmp	r2, #0
 804:	bne	aac <flatcc_parse_file+0x768>
 808:	ldr	r0, [sp, #28]
 80c:	bl	0 <free>
 810:	mov	r2, #0
 814:	str	r2, [sp, #28]
 818:	ldr	r9, [r9]
 81c:	b	654 <flatcc_parse_file+0x310>
 820:	add	r0, r4, #524	; 0x20c
 824:	add	r1, r4, #352	; 0x160
 828:	mov	r2, #1
 82c:	bl	0 <ptr_set_insert_item>
 830:	mov	r0, r4
 834:	bl	0 <__flatcc_fb_build_schema>
 838:	cmp	r0, #0
 83c:	bne	aac <flatcc_parse_file+0x768>
 840:	mov	ip, #0
 844:	ldr	r0, [r4, #240]	; 0xf0
 848:	cmp	r0, #0
 84c:	movne	ip, sl
 850:	moveq	ip, ip
 854:	cmp	ip, #0
 858:	beq	ad4 <flatcc_parse_file+0x790>
 85c:	mov	r9, #0
 860:	mvn	fp, #0
 864:	ldr	r0, [r4, #552]	; 0x228
 868:	cmp	r0, #0
 86c:	beq	884 <flatcc_parse_file+0x540>
 870:	ldr	r0, [pc, #724]	; b4c <flatcc_parse_file+0x808>
 874:	ldr	r1, [pc, #660]	; b10 <flatcc_parse_file+0x7cc>
 878:	mov	r2, #220	; 0xdc
 87c:	ldr	r3, [pc, #672]	; b24 <flatcc_parse_file+0x7e0>
 880:	bl	0 <__assert_fail>
 884:	ldr	r5, [r4, #344]	; 0x158
 888:	cmp	r5, #0
 88c:	bne	894 <flatcc_parse_file+0x550>
 890:	ldr	r5, [pc, #668]	; b34 <flatcc_parse_file+0x7f0>
 894:	ldr	ip, [r4, #512]	; 0x200
 898:	ldr	sl, [r4, #248]	; 0xf8
 89c:	ldr	r1, [r4, #244]	; 0xf4
 8a0:	cmp	r1, #0
 8a4:	beq	8b4 <flatcc_parse_file+0x570>
 8a8:	ldr	r0, [pc, #644]	; b34 <flatcc_parse_file+0x7f0>
 8ac:	mov	r2, r0
 8b0:	b	8c0 <flatcc_parse_file+0x57c>
 8b4:	mov	r1, ip
 8b8:	mov	r0, r5
 8bc:	ldr	r2, [pc, #596]	; b18 <flatcc_parse_file+0x7d4>
 8c0:	cmp	sl, #0
 8c4:	bne	8e8 <flatcc_parse_file+0x5a4>
 8c8:	ldr	r3, [pc, #608]	; b30 <flatcc_parse_file+0x7ec>
 8cc:	ldr	sl, [pc, #584]	; b1c <flatcc_parse_file+0x7d8>
 8d0:	ldr	r8, [r4, #308]	; 0x134
 8d4:	cmp	r8, #0
 8d8:	movne	r8, r3
 8dc:	moveq	r8, sl
 8e0:	mov	sl, ip
 8e4:	b	8f0 <flatcc_parse_file+0x5ac>
 8e8:	ldr	r8, [pc, #580]	; b34 <flatcc_parse_file+0x7f0>
 8ec:	mov	r5, r8
 8f0:	mov	r3, #1
 8f4:	bl	0 <__flatcc_fb_create_join_path>
 8f8:	str	r0, [sp, #16]
 8fc:	cmp	r0, #0
 900:	bne	91c <flatcc_parse_file+0x5d8>
 904:	ldr	r1, [pc, #568]	; b44 <flatcc_parse_file+0x800>
 908:	ldr	r0, [r1]
 90c:	ldr	r1, [pc, #552]	; b3c <flatcc_parse_file+0x7f8>
 910:	bl	0 <fprintf>
 914:	mov	r0, #1
 918:	bl	0 <exit>
 91c:	mov	r3, #1
 920:	mov	r2, r8
 924:	mov	r1, sl
 928:	mov	r0, r5
 92c:	bl	0 <__flatcc_fb_create_join_path>
 930:	mov	sl, r0
 934:	mov	r3, sl
 938:	cmp	r3, #0
 93c:	bne	958 <flatcc_parse_file+0x614>
 940:	ldr	r2, [pc, #508]	; b44 <flatcc_parse_file+0x800>
 944:	ldr	r0, [r2]
 948:	ldr	r1, [pc, #492]	; b3c <flatcc_parse_file+0x7f8>
 94c:	bl	0 <fprintf>
 950:	mov	r0, #1
 954:	bl	0 <exit>
 958:	mov	r0, sl
 95c:	bl	0 <__flatcc_fb_create_make_path>
 960:	mov	r8, r0
 964:	mov	r2, r8
 968:	cmp	r2, #0
 96c:	bne	988 <flatcc_parse_file+0x644>
 970:	ldr	r0, [pc, #460]	; b44 <flatcc_parse_file+0x800>
 974:	ldr	r0, [r0]
 978:	ldr	r1, [pc, #444]	; b3c <flatcc_parse_file+0x7f8>
 97c:	bl	0 <fprintf>
 980:	mov	r0, #1
 984:	bl	0 <exit>
 988:	cmp	sl, #0
 98c:	beq	99c <flatcc_parse_file+0x658>
 990:	mov	r0, sl
 994:	bl	0 <free>
 998:	mov	sl, #0
 99c:	ldr	r1, [pc, #360]	; b0c <flatcc_parse_file+0x7c8>
 9a0:	ldr	r0, [sp, #16]
 9a4:	bl	0 <fopen>
 9a8:	mov	r5, r0
 9ac:	cmp	r5, #0
 9b0:	bne	9c8 <flatcc_parse_file+0x684>
 9b4:	ldr	r1, [pc, #356]	; b20 <flatcc_parse_file+0x7dc>
 9b8:	ldr	r2, [sp, #16]
 9bc:	mov	r0, r4
 9c0:	bl	0 <__flatcc_fb_print_error>
 9c4:	b	a50 <flatcc_parse_file+0x70c>
 9c8:	ldr	r1, [pc, #344]	; b28 <flatcc_parse_file+0x7e4>
 9cc:	mov	r2, r8
 9d0:	mov	r0, r5
 9d4:	bl	0 <fprintf>
 9d8:	ldr	r4, [r4]
 9dc:	cmp	r4, #0
 9e0:	beq	a40 <flatcc_parse_file+0x6fc>
 9e4:	ldr	r0, [r4, #548]	; 0x224
 9e8:	bl	0 <__flatcc_fb_create_make_path>
 9ec:	mov	r9, r0
 9f0:	mov	r1, r9
 9f4:	cmp	r1, #0
 9f8:	bne	a14 <flatcc_parse_file+0x6d0>
 9fc:	ldr	r0, [pc, #320]	; b44 <flatcc_parse_file+0x800>
 a00:	ldr	r0, [r0]
 a04:	ldr	r1, [pc, #304]	; b3c <flatcc_parse_file+0x7f8>
 a08:	bl	0 <fprintf>
 a0c:	mov	r0, #1
 a10:	bl	0 <exit>
 a14:	ldr	r1, [pc, #272]	; b2c <flatcc_parse_file+0x7e8>
 a18:	mov	r2, r9
 a1c:	mov	r0, r5
 a20:	bl	0 <fprintf>
 a24:	ldr	r4, [r4]
 a28:	cmp	r9, #0
 a2c:	beq	9dc <flatcc_parse_file+0x698>
 a30:	mov	r0, r9
 a34:	bl	0 <free>
 a38:	mov	r9, #0
 a3c:	b	9dc <flatcc_parse_file+0x698>
 a40:	ldr	r1, [pc, #240]	; b38 <flatcc_parse_file+0x7f4>
 a44:	mov	r0, r5
 a48:	bl	0 <fprintf>
 a4c:	mov	fp, #0
 a50:	ldr	r1, [sp, #16]
 a54:	cmp	r1, #0
 a58:	beq	a64 <flatcc_parse_file+0x720>
 a5c:	ldr	r0, [sp, #16]
 a60:	bl	0 <free>
 a64:	cmp	sl, #0
 a68:	beq	a74 <flatcc_parse_file+0x730>
 a6c:	mov	r0, sl
 a70:	bl	0 <free>
 a74:	cmp	r8, #0
 a78:	beq	a84 <flatcc_parse_file+0x740>
 a7c:	mov	r0, r8
 a80:	bl	0 <free>
 a84:	cmp	r9, #0
 a88:	beq	a94 <flatcc_parse_file+0x750>
 a8c:	mov	r0, r9
 a90:	bl	0 <free>
 a94:	cmp	r5, #0
 a98:	beq	aa4 <flatcc_parse_file+0x760>
 a9c:	mov	r0, r5
 aa0:	bl	0 <fclose>
 aa4:	cmp	fp, #0
 aa8:	beq	ad4 <flatcc_parse_file+0x790>
 aac:	cmp	r7, #0
 ab0:	beq	abc <flatcc_parse_file+0x778>
 ab4:	mov	r0, r7
 ab8:	bl	0 <free>
 abc:	ldr	r1, [sp, #28]
 ac0:	cmp	r1, #0
 ac4:	beq	ad8 <flatcc_parse_file+0x794>
 ac8:	ldr	r0, [sp, #28]
 acc:	bl	0 <free>
 ad0:	b	ad8 <flatcc_parse_file+0x794>
 ad4:	mov	r6, #0
 ad8:	mov	r0, r6
 adc:	ldr	r4, [sp, #32]
 ae0:	ldr	r5, [sp, #36]	; 0x24
 ae4:	ldr	r6, [sp, #40]	; 0x28
 ae8:	ldr	r7, [sp, #44]	; 0x2c
 aec:	ldr	r8, [sp, #48]	; 0x30
 af0:	ldr	r9, [sp, #52]	; 0x34
 af4:	ldr	sl, [sp, #56]	; 0x38
 af8:	ldr	fp, [sp, #60]	; 0x3c
 afc:	ldr	lr, [sp, #12]
 b00:	add	sp, sp, #72	; 0x48
 b04:	bx	lr
 b08:	.word	0x000000c6
 b0c:	.word	0x000000bc
 b10:	.word	0x00000047
 b14:	.word	0x0000012a
 b18:	.word	0x000000bf
 b1c:	.word	0x00000119
 b20:	.word	0x000000ea
 b24:	.word	0x00000180
 b28:	.word	0x0000017b
 b2c:	.word	0x00000152
 b30:	.word	0x00000041
 b34:	.word	0x0000017f
 b38:	.word	0x00000128
 b3c:	.word	0x0000001e
 b40:	.word	0x00000156
	...
 b4c:	.word	0x000000a7

00000b50 <flatcc_generate_binary_schema_to_buffer>:
 b50:	mov	ip, sp
 b54:	sub	sp, sp, #16
 b58:	str	ip, [sp]
 b5c:	str	lr, [sp, #4]
 b60:	str	r2, [sp, #8]
 b64:	mov	r2, r0
 b68:	add	r0, r2, #128	; 0x80
 b6c:	add	r2, r2, #352	; 0x160
 b70:	add	r3, sp, #8
 b74:	mov	ip, r1
 b78:	mov	r1, r2
 b7c:	mov	r2, ip
 b80:	bl	0 <__flatcc_fb_codegen_bfbs_to_buffer>
 b84:	cmp	r0, #0
 b88:	beq	b94 <flatcc_generate_binary_schema_to_buffer+0x44>
 b8c:	ldr	r0, [sp, #8]
 b90:	b	b98 <flatcc_generate_binary_schema_to_buffer+0x48>
 b94:	mvn	r0, #0
 b98:	ldr	lr, [sp, #4]
 b9c:	add	sp, sp, #16
 ba0:	bx	lr

00000ba4 <flatcc_generate_binary_schema>:
 ba4:	mov	ip, sp
 ba8:	sub	sp, sp, #8
 bac:	str	ip, [sp]
 bb0:	str	lr, [sp, #4]
 bb4:	mov	r2, r0
 bb8:	add	r0, r2, #128	; 0x80
 bbc:	add	r2, r2, #352	; 0x160
 bc0:	mov	r3, r1
 bc4:	mov	r1, r2
 bc8:	mov	r2, r3
 bcc:	ldr	lr, [sp, #4]
 bd0:	add	sp, sp, #8
 bd4:	b	0 <__flatcc_fb_codegen_bfbs_alloc_buffer>

00000bd8 <flatcc_generate_files>:
 bd8:	mov	ip, sp
 bdc:	sub	sp, sp, #256	; 0x100
 be0:	str	ip, [sp]
 be4:	str	lr, [sp, #4]
 be8:	str	r4, [sp, #8]
 bec:	str	r5, [sp, #12]
 bf0:	str	r6, [sp, #16]
 bf4:	str	r7, [sp, #20]
 bf8:	mov	r7, r0
 bfc:	mov	r0, r7
 c00:	mov	r4, #0
 c04:	add	r6, sp, #24
 c08:	cmp	r0, #0
 c0c:	beq	d30 <flatcc_generate_files+0x158>
 c10:	ldr	r2, [r0, #108]	; 0x6c
 c14:	cmp	r2, #0
 c18:	bne	d30 <flatcc_generate_files+0x158>
 c1c:	mov	r5, #0
 c20:	cmp	r0, #0
 c24:	beq	c38 <flatcc_generate_files+0x60>
 c28:	str	r5, [r0, #4]
 c2c:	mov	r5, r0
 c30:	ldr	r0, [r0]
 c34:	b	c20 <flatcc_generate_files+0x48>
 c38:	ldr	ip, [r7, #308]	; 0x134
 c3c:	cmp	ip, #0
 c40:	beq	c60 <flatcc_generate_files+0x88>
 c44:	add	r0, r7, #128	; 0x80
 c48:	add	r1, r7, #352	; 0x160
 c4c:	bl	0 <__flatcc_fb_codegen_bfbs_to_file>
 c50:	cmp	r0, #0
 c54:	beq	c60 <flatcc_generate_files+0x88>
 c58:	mvn	r0, #0
 c5c:	b	d34 <flatcc_generate_files+0x15c>
 c60:	add	r1, r7, #128	; 0x80
 c64:	mov	r0, r6
 c68:	bl	0 <__flatcc_fb_init_output_c>
 c6c:	cmp	r0, #0
 c70:	beq	c7c <flatcc_generate_files+0xa4>
 c74:	mvn	r0, #0
 c78:	b	d34 <flatcc_generate_files+0x15c>
 c7c:	ldr	r0, [r7, #256]	; 0x100
 c80:	cmp	r0, #0
 c84:	bne	c9c <flatcc_generate_files+0xc4>
 c88:	mov	r0, r6
 c8c:	bl	0 <__flatcc_fb_codegen_common_c>
 c90:	mov	r4, r0
 c94:	cmp	r4, #0
 c98:	bne	d20 <flatcc_generate_files+0x148>
 c9c:	ldr	r2, [r7, #120]	; 0x78
 ca0:	cmp	r2, #0
 ca4:	beq	d20 <flatcc_generate_files+0x148>
 ca8:	ldr	r3, [r7, #300]	; 0x12c
 cac:	cmp	r3, #0
 cb0:	bne	cc8 <flatcc_generate_files+0xf0>
 cb4:	add	r1, r7, #352	; 0x160
 cb8:	mov	r0, r6
 cbc:	bl	0 <__flatcc_fb_codegen_c>
 cc0:	mov	r4, r0
 cc4:	b	d20 <flatcc_generate_files+0x148>
 cc8:	cmp	r5, #0
 ccc:	movne	r3, #1
 cd0:	moveq	r3, #0
 cd4:	mov	r0, #0
 cd8:	cmp	r4, #0
 cdc:	moveq	r1, r3
 ce0:	movne	r1, r0
 ce4:	cmp	r1, #0
 ce8:	beq	d20 <flatcc_generate_files+0x148>
 cec:	ldr	r1, [r5, #108]	; 0x6c
 cf0:	cmp	r1, #0
 cf4:	bne	d14 <flatcc_generate_files+0x13c>
 cf8:	add	r1, r5, #352	; 0x160
 cfc:	mov	r0, r6
 d00:	bl	0 <__flatcc_fb_codegen_c>
 d04:	cmp	r0, #0
 d08:	movne	r4, #1
 d0c:	moveq	r4, #0
 d10:	b	d18 <flatcc_generate_files+0x140>
 d14:	mov	r4, #1
 d18:	ldr	r5, [r5, #4]
 d1c:	b	cc8 <flatcc_generate_files+0xf0>
 d20:	mov	r0, r6
 d24:	bl	0 <__flatcc_fb_end_output_c>
 d28:	mov	r0, r4
 d2c:	b	d34 <flatcc_generate_files+0x15c>
 d30:	mvn	r0, #0
 d34:	ldr	r4, [sp, #8]
 d38:	ldr	r5, [sp, #12]
 d3c:	ldr	r6, [sp, #16]
 d40:	ldr	r7, [sp, #20]
 d44:	ldr	lr, [sp, #4]
 d48:	add	sp, sp, #256	; 0x100
 d4c:	bx	lr

00000d50 <flatcc_destroy_context>:
 d50:	mov	ip, sp
 d54:	sub	sp, sp, #16
 d58:	str	ip, [sp]
 d5c:	str	lr, [sp, #4]
 d60:	str	r4, [sp, #8]
 d64:	str	r5, [sp, #12]
 d68:	mov	r4, r0
 d6c:	cmp	r4, #0
 d70:	beq	d90 <flatcc_destroy_context+0x40>
 d74:	ldr	r5, [r4]
 d78:	mov	r0, r4
 d7c:	bl	0 <__flatcc_fb_clear_parser>
 d80:	mov	r0, r4
 d84:	bl	0 <free>
 d88:	mov	r4, r5
 d8c:	b	d6c <flatcc_destroy_context+0x1c>
 d90:	ldr	r4, [sp, #8]
 d94:	ldr	r5, [sp, #12]
 d98:	ldr	lr, [sp, #4]
 d9c:	add	sp, sp, #16
 da0:	bx	lr
