
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_get_libcoda_version>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	sub	sp, sp, #4
   c:	ldr	r0, [pc, #20]	; 28 <coda_get_libcoda_version+0x28>
  10:	str	r0, [sp]
  14:	bl	0 <__aeabi_read_tp>
  18:	ldr	r1, [sp]
  1c:	ldr	r0, [r0, r1]
  20:	mov	sp, fp
  24:	pop	{fp, pc}
  28:	.word	0x00000000

0000002c <coda_set_option_bypass_special_types>:
  2c:	push	{fp, lr}
  30:	mov	fp, sp
  34:	sub	sp, sp, #16
  38:	str	r0, [sp, #8]
  3c:	ldr	r0, [sp, #8]
  40:	cmp	r0, #0
  44:	beq	74 <coda_set_option_bypass_special_types+0x48>
  48:	ldr	r0, [sp, #8]
  4c:	cmp	r0, #1
  50:	beq	74 <coda_set_option_bypass_special_types+0x48>
  54:	ldr	r2, [sp, #8]
  58:	mvn	r0, #99	; 0x63
  5c:	movw	r1, #0
  60:	movt	r1, #0
  64:	bl	0 <coda_set_error>
  68:	mvn	r0, #0
  6c:	str	r0, [fp, #-4]
  70:	b	9c <coda_set_option_bypass_special_types+0x70>
  74:	ldr	r0, [sp, #8]
  78:	ldr	r1, [pc, #40]	; a8 <coda_set_option_bypass_special_types+0x7c>
  7c:	str	r0, [sp, #4]
  80:	str	r1, [sp]
  84:	bl	0 <__aeabi_read_tp>
  88:	ldr	r1, [sp, #4]
  8c:	ldr	r2, [sp]
  90:	str	r1, [r0, r2]
  94:	movw	r0, #0
  98:	str	r0, [fp, #-4]
  9c:	ldr	r0, [fp, #-4]
  a0:	mov	sp, fp
  a4:	pop	{fp, pc}
  a8:	.word	0x00000000

000000ac <coda_get_option_bypass_special_types>:
  ac:	push	{fp, lr}
  b0:	mov	fp, sp
  b4:	sub	sp, sp, #4
  b8:	ldr	r0, [pc, #20]	; d4 <coda_get_option_bypass_special_types+0x28>
  bc:	str	r0, [sp]
  c0:	bl	0 <__aeabi_read_tp>
  c4:	ldr	r1, [sp]
  c8:	ldr	r0, [r0, r1]
  cc:	mov	sp, fp
  d0:	pop	{fp, pc}
  d4:	.word	0x00000000

000000d8 <coda_set_option_perform_boundary_checks>:
  d8:	push	{fp, lr}
  dc:	mov	fp, sp
  e0:	sub	sp, sp, #16
  e4:	str	r0, [sp, #8]
  e8:	ldr	r0, [sp, #8]
  ec:	cmp	r0, #0
  f0:	beq	120 <coda_set_option_perform_boundary_checks+0x48>
  f4:	ldr	r0, [sp, #8]
  f8:	cmp	r0, #1
  fc:	beq	120 <coda_set_option_perform_boundary_checks+0x48>
 100:	ldr	r2, [sp, #8]
 104:	mvn	r0, #99	; 0x63
 108:	movw	r1, #0
 10c:	movt	r1, #0
 110:	bl	0 <coda_set_error>
 114:	mvn	r0, #0
 118:	str	r0, [fp, #-4]
 11c:	b	148 <coda_set_option_perform_boundary_checks+0x70>
 120:	ldr	r0, [sp, #8]
 124:	ldr	r1, [pc, #40]	; 154 <coda_set_option_perform_boundary_checks+0x7c>
 128:	str	r0, [sp, #4]
 12c:	str	r1, [sp]
 130:	bl	0 <__aeabi_read_tp>
 134:	ldr	r1, [sp, #4]
 138:	ldr	r2, [sp]
 13c:	str	r1, [r0, r2]
 140:	movw	r0, #0
 144:	str	r0, [fp, #-4]
 148:	ldr	r0, [fp, #-4]
 14c:	mov	sp, fp
 150:	pop	{fp, pc}
 154:	.word	0x00000000

00000158 <coda_get_option_perform_boundary_checks>:
 158:	push	{fp, lr}
 15c:	mov	fp, sp
 160:	sub	sp, sp, #4
 164:	ldr	r0, [pc, #20]	; 180 <coda_get_option_perform_boundary_checks+0x28>
 168:	str	r0, [sp]
 16c:	bl	0 <__aeabi_read_tp>
 170:	ldr	r1, [sp]
 174:	ldr	r0, [r0, r1]
 178:	mov	sp, fp
 17c:	pop	{fp, pc}
 180:	.word	0x00000000

00000184 <coda_set_option_perform_conversions>:
 184:	push	{fp, lr}
 188:	mov	fp, sp
 18c:	sub	sp, sp, #16
 190:	str	r0, [sp, #8]
 194:	ldr	r0, [sp, #8]
 198:	cmp	r0, #0
 19c:	beq	1cc <coda_set_option_perform_conversions+0x48>
 1a0:	ldr	r0, [sp, #8]
 1a4:	cmp	r0, #1
 1a8:	beq	1cc <coda_set_option_perform_conversions+0x48>
 1ac:	ldr	r2, [sp, #8]
 1b0:	mvn	r0, #99	; 0x63
 1b4:	movw	r1, #0
 1b8:	movt	r1, #0
 1bc:	bl	0 <coda_set_error>
 1c0:	mvn	r0, #0
 1c4:	str	r0, [fp, #-4]
 1c8:	b	1f4 <coda_set_option_perform_conversions+0x70>
 1cc:	ldr	r0, [sp, #8]
 1d0:	ldr	r1, [pc, #40]	; 200 <coda_set_option_perform_conversions+0x7c>
 1d4:	str	r0, [sp, #4]
 1d8:	str	r1, [sp]
 1dc:	bl	0 <__aeabi_read_tp>
 1e0:	ldr	r1, [sp, #4]
 1e4:	ldr	r2, [sp]
 1e8:	str	r1, [r0, r2]
 1ec:	movw	r0, #0
 1f0:	str	r0, [fp, #-4]
 1f4:	ldr	r0, [fp, #-4]
 1f8:	mov	sp, fp
 1fc:	pop	{fp, pc}
 200:	.word	0x00000000

00000204 <coda_get_option_perform_conversions>:
 204:	push	{fp, lr}
 208:	mov	fp, sp
 20c:	sub	sp, sp, #4
 210:	ldr	r0, [pc, #20]	; 22c <coda_get_option_perform_conversions+0x28>
 214:	str	r0, [sp]
 218:	bl	0 <__aeabi_read_tp>
 21c:	ldr	r1, [sp]
 220:	ldr	r0, [r0, r1]
 224:	mov	sp, fp
 228:	pop	{fp, pc}
 22c:	.word	0x00000000

00000230 <coda_set_option_use_fast_size_expressions>:
 230:	push	{fp, lr}
 234:	mov	fp, sp
 238:	sub	sp, sp, #16
 23c:	str	r0, [sp, #8]
 240:	ldr	r0, [sp, #8]
 244:	cmp	r0, #0
 248:	beq	278 <coda_set_option_use_fast_size_expressions+0x48>
 24c:	ldr	r0, [sp, #8]
 250:	cmp	r0, #1
 254:	beq	278 <coda_set_option_use_fast_size_expressions+0x48>
 258:	ldr	r2, [sp, #8]
 25c:	mvn	r0, #99	; 0x63
 260:	movw	r1, #0
 264:	movt	r1, #0
 268:	bl	0 <coda_set_error>
 26c:	mvn	r0, #0
 270:	str	r0, [fp, #-4]
 274:	b	2a0 <coda_set_option_use_fast_size_expressions+0x70>
 278:	ldr	r0, [sp, #8]
 27c:	ldr	r1, [pc, #40]	; 2ac <coda_set_option_use_fast_size_expressions+0x7c>
 280:	str	r0, [sp, #4]
 284:	str	r1, [sp]
 288:	bl	0 <__aeabi_read_tp>
 28c:	ldr	r1, [sp, #4]
 290:	ldr	r2, [sp]
 294:	str	r1, [r0, r2]
 298:	movw	r0, #0
 29c:	str	r0, [fp, #-4]
 2a0:	ldr	r0, [fp, #-4]
 2a4:	mov	sp, fp
 2a8:	pop	{fp, pc}
 2ac:	.word	0x00000000

000002b0 <coda_get_option_use_fast_size_expressions>:
 2b0:	push	{fp, lr}
 2b4:	mov	fp, sp
 2b8:	sub	sp, sp, #4
 2bc:	ldr	r0, [pc, #20]	; 2d8 <coda_get_option_use_fast_size_expressions+0x28>
 2c0:	str	r0, [sp]
 2c4:	bl	0 <__aeabi_read_tp>
 2c8:	ldr	r1, [sp]
 2cc:	ldr	r0, [r0, r1]
 2d0:	mov	sp, fp
 2d4:	pop	{fp, pc}
 2d8:	.word	0x00000000

000002dc <coda_set_option_use_mmap>:
 2dc:	push	{fp, lr}
 2e0:	mov	fp, sp
 2e4:	sub	sp, sp, #16
 2e8:	str	r0, [sp, #8]
 2ec:	ldr	r0, [sp, #8]
 2f0:	cmp	r0, #0
 2f4:	beq	324 <coda_set_option_use_mmap+0x48>
 2f8:	ldr	r0, [sp, #8]
 2fc:	cmp	r0, #1
 300:	beq	324 <coda_set_option_use_mmap+0x48>
 304:	ldr	r2, [sp, #8]
 308:	mvn	r0, #99	; 0x63
 30c:	movw	r1, #0
 310:	movt	r1, #0
 314:	bl	0 <coda_set_error>
 318:	mvn	r0, #0
 31c:	str	r0, [fp, #-4]
 320:	b	34c <coda_set_option_use_mmap+0x70>
 324:	ldr	r0, [sp, #8]
 328:	ldr	r1, [pc, #40]	; 358 <coda_set_option_use_mmap+0x7c>
 32c:	str	r0, [sp, #4]
 330:	str	r1, [sp]
 334:	bl	0 <__aeabi_read_tp>
 338:	ldr	r1, [sp, #4]
 33c:	ldr	r2, [sp]
 340:	str	r1, [r0, r2]
 344:	movw	r0, #0
 348:	str	r0, [fp, #-4]
 34c:	ldr	r0, [fp, #-4]
 350:	mov	sp, fp
 354:	pop	{fp, pc}
 358:	.word	0x00000000

0000035c <coda_get_option_use_mmap>:
 35c:	push	{fp, lr}
 360:	mov	fp, sp
 364:	sub	sp, sp, #4
 368:	ldr	r0, [pc, #20]	; 384 <coda_get_option_use_mmap+0x28>
 36c:	str	r0, [sp]
 370:	bl	0 <__aeabi_read_tp>
 374:	ldr	r1, [sp]
 378:	ldr	r0, [r0, r1]
 37c:	mov	sp, fp
 380:	pop	{fp, pc}
 384:	.word	0x00000000

00000388 <coda_set_definition_path>:
 388:	push	{fp, lr}
 38c:	mov	fp, sp
 390:	sub	sp, sp, #32
 394:	str	r0, [fp, #-8]
 398:	ldr	r0, [pc, #212]	; 474 <coda_set_definition_path+0xec>
 39c:	str	r0, [fp, #-12]
 3a0:	bl	0 <__aeabi_read_tp>
 3a4:	ldr	r1, [fp, #-12]
 3a8:	ldr	r0, [r0, r1]
 3ac:	movw	r1, #0
 3b0:	cmp	r0, r1
 3b4:	beq	3e8 <coda_set_definition_path+0x60>
 3b8:	ldr	r0, [pc, #180]	; 474 <coda_set_definition_path+0xec>
 3bc:	str	r0, [sp, #16]
 3c0:	bl	0 <__aeabi_read_tp>
 3c4:	ldr	r1, [sp, #16]
 3c8:	ldr	r2, [r0, r1]
 3cc:	str	r0, [sp, #12]
 3d0:	mov	r0, r2
 3d4:	bl	0 <free>
 3d8:	mov	r0, #0
 3dc:	ldr	r1, [sp, #12]
 3e0:	ldr	r2, [sp, #16]
 3e4:	str	r0, [r1, r2]
 3e8:	ldr	r0, [fp, #-8]
 3ec:	movw	r1, #0
 3f0:	cmp	r0, r1
 3f4:	bne	404 <coda_set_definition_path+0x7c>
 3f8:	movw	r0, #0
 3fc:	str	r0, [fp, #-4]
 400:	b	468 <coda_set_definition_path+0xe0>
 404:	ldr	r0, [fp, #-8]
 408:	bl	0 <strdup>
 40c:	ldr	r1, [pc, #96]	; 474 <coda_set_definition_path+0xec>
 410:	str	r0, [sp, #8]
 414:	str	r1, [sp, #4]
 418:	bl	0 <__aeabi_read_tp>
 41c:	ldr	r1, [sp, #8]
 420:	ldr	r2, [sp, #4]
 424:	str	r1, [r0, r2]
 428:	ldr	r0, [r0, r2]
 42c:	movw	r3, #0
 430:	cmp	r0, r3
 434:	bne	460 <coda_set_definition_path+0xd8>
 438:	mvn	r0, #0
 43c:	movw	r1, #0
 440:	movt	r1, #0
 444:	movw	r2, #0
 448:	movt	r2, #0
 44c:	movw	r3, #385	; 0x181
 450:	bl	0 <coda_set_error>
 454:	mvn	r0, #0
 458:	str	r0, [fp, #-4]
 45c:	b	468 <coda_set_definition_path+0xe0>
 460:	movw	r0, #0
 464:	str	r0, [fp, #-4]
 468:	ldr	r0, [fp, #-4]
 46c:	mov	sp, fp
 470:	pop	{fp, pc}
 474:	.word	0x00000000

00000478 <coda_set_definition_path_conditional>:
 478:	push	{fp, lr}
 47c:	mov	fp, sp
 480:	sub	sp, sp, #24
 484:	str	r0, [fp, #-8]
 488:	str	r1, [sp, #12]
 48c:	str	r2, [sp, #8]
 490:	movw	r0, #0
 494:	movt	r0, #0
 498:	bl	0 <getenv>
 49c:	movw	r1, #0
 4a0:	cmp	r0, r1
 4a4:	beq	4b4 <coda_set_definition_path_conditional+0x3c>
 4a8:	movw	r0, #0
 4ac:	str	r0, [fp, #-4]
 4b0:	b	58c <coda_set_definition_path_conditional+0x114>
 4b4:	ldr	r0, [sp, #12]
 4b8:	movw	r1, #0
 4bc:	cmp	r0, r1
 4c0:	bne	4e8 <coda_set_definition_path_conditional+0x70>
 4c4:	ldr	r0, [fp, #-8]
 4c8:	add	r1, sp, #4
 4cc:	bl	0 <coda_path_for_program>
 4d0:	cmp	r0, #0
 4d4:	beq	4e4 <coda_set_definition_path_conditional+0x6c>
 4d8:	mvn	r0, #0
 4dc:	str	r0, [fp, #-4]
 4e0:	b	58c <coda_set_definition_path_conditional+0x114>
 4e4:	b	510 <coda_set_definition_path_conditional+0x98>
 4e8:	ldr	r0, [sp, #12]
 4ec:	ldr	r1, [fp, #-8]
 4f0:	add	r2, sp, #4
 4f4:	bl	0 <coda_path_find_file>
 4f8:	cmp	r0, #0
 4fc:	beq	50c <coda_set_definition_path_conditional+0x94>
 500:	mvn	r0, #0
 504:	str	r0, [fp, #-4]
 508:	b	58c <coda_set_definition_path_conditional+0x114>
 50c:	b	510 <coda_set_definition_path_conditional+0x98>
 510:	ldr	r0, [sp, #4]
 514:	movw	r1, #0
 518:	cmp	r0, r1
 51c:	beq	584 <coda_set_definition_path_conditional+0x10c>
 520:	ldr	r0, [sp, #4]
 524:	ldr	r2, [sp, #8]
 528:	movw	r1, #1
 52c:	mov	r3, sp
 530:	bl	0 <coda_path_from_path>
 534:	cmp	r0, #0
 538:	beq	550 <coda_set_definition_path_conditional+0xd8>
 53c:	ldr	r0, [sp, #4]
 540:	bl	0 <free>
 544:	mvn	r0, #0
 548:	str	r0, [fp, #-4]
 54c:	b	58c <coda_set_definition_path_conditional+0x114>
 550:	ldr	r0, [sp, #4]
 554:	bl	0 <free>
 558:	ldr	r0, [sp]
 55c:	bl	388 <coda_set_definition_path>
 560:	cmp	r0, #0
 564:	beq	57c <coda_set_definition_path_conditional+0x104>
 568:	ldr	r0, [sp]
 56c:	bl	0 <free>
 570:	mvn	r0, #0
 574:	str	r0, [fp, #-4]
 578:	b	58c <coda_set_definition_path_conditional+0x114>
 57c:	ldr	r0, [sp]
 580:	bl	0 <free>
 584:	movw	r0, #0
 588:	str	r0, [fp, #-4]
 58c:	ldr	r0, [fp, #-4]
 590:	mov	sp, fp
 594:	pop	{fp, pc}

00000598 <coda_init>:
 598:	push	{fp, lr}
 59c:	mov	fp, sp
 5a0:	sub	sp, sp, #40	; 0x28
 5a4:	ldr	r0, [pc, #412]	; 748 <coda_init+0x1b0>
 5a8:	str	r0, [fp, #-8]
 5ac:	bl	0 <__aeabi_read_tp>
 5b0:	ldr	r1, [fp, #-8]
 5b4:	ldr	r0, [r0, r1]
 5b8:	cmp	r0, #0
 5bc:	bne	718 <coda_init+0x180>
 5c0:	bl	0 <coda_leap_second_table_init>
 5c4:	cmp	r0, #0
 5c8:	beq	5d8 <coda_init+0x40>
 5cc:	mvn	r0, #0
 5d0:	str	r0, [fp, #-4]
 5d4:	b	73c <coda_init+0x1a4>
 5d8:	bl	0 <coda_data_dictionary_init>
 5dc:	cmp	r0, #0
 5e0:	beq	5f4 <coda_init+0x5c>
 5e4:	bl	0 <coda_leap_second_table_done>
 5e8:	mvn	r0, #0
 5ec:	str	r0, [fp, #-4]
 5f0:	b	73c <coda_init+0x1a4>
 5f4:	ldr	r0, [pc, #336]	; 74c <coda_init+0x1b4>
 5f8:	str	r0, [fp, #-12]
 5fc:	bl	0 <__aeabi_read_tp>
 600:	ldr	r1, [fp, #-12]
 604:	ldr	r0, [r0, r1]
 608:	movw	r1, #0
 60c:	cmp	r0, r1
 610:	bne	6a0 <coda_init+0x108>
 614:	movw	r0, #0
 618:	movt	r0, #0
 61c:	bl	0 <getenv>
 620:	movw	r1, #0
 624:	cmp	r0, r1
 628:	beq	69c <coda_init+0x104>
 62c:	movw	r0, #0
 630:	movt	r0, #0
 634:	bl	0 <getenv>
 638:	bl	0 <strdup>
 63c:	ldr	r1, [pc, #264]	; 74c <coda_init+0x1b4>
 640:	str	r0, [fp, #-16]
 644:	str	r1, [sp, #20]
 648:	bl	0 <__aeabi_read_tp>
 64c:	ldr	r1, [fp, #-16]
 650:	ldr	r2, [sp, #20]
 654:	str	r1, [r0, r2]
 658:	ldr	r0, [r0, r2]
 65c:	movw	r3, #0
 660:	cmp	r0, r3
 664:	bne	698 <coda_init+0x100>
 668:	bl	0 <coda_data_dictionary_done>
 66c:	bl	0 <coda_leap_second_table_done>
 670:	mvn	r0, #0
 674:	movw	r1, #0
 678:	movt	r1, #0
 67c:	movw	r2, #0
 680:	movt	r2, #0
 684:	movw	r3, #512	; 0x200
 688:	bl	0 <coda_set_error>
 68c:	mvn	r0, #0
 690:	str	r0, [fp, #-4]
 694:	b	73c <coda_init+0x1a4>
 698:	b	69c <coda_init+0x104>
 69c:	b	6a0 <coda_init+0x108>
 6a0:	ldr	r0, [pc, #164]	; 74c <coda_init+0x1b4>
 6a4:	str	r0, [sp, #16]
 6a8:	bl	0 <__aeabi_read_tp>
 6ac:	ldr	r1, [sp, #16]
 6b0:	ldr	r0, [r0, r1]
 6b4:	movw	r1, #0
 6b8:	cmp	r0, r1
 6bc:	beq	6f8 <coda_init+0x160>
 6c0:	ldr	r0, [pc, #132]	; 74c <coda_init+0x1b4>
 6c4:	str	r0, [sp, #12]
 6c8:	bl	0 <__aeabi_read_tp>
 6cc:	ldr	r1, [sp, #12]
 6d0:	ldr	r0, [r0, r1]
 6d4:	bl	0 <coda_read_definitions>
 6d8:	cmp	r0, #0
 6dc:	beq	6f4 <coda_init+0x15c>
 6e0:	bl	0 <coda_data_dictionary_done>
 6e4:	bl	0 <coda_leap_second_table_done>
 6e8:	mvn	r0, #0
 6ec:	str	r0, [fp, #-4]
 6f0:	b	73c <coda_init+0x1a4>
 6f4:	b	6f8 <coda_init+0x160>
 6f8:	ldr	r0, [pc, #80]	; 750 <coda_init+0x1b8>
 6fc:	str	r0, [sp, #8]
 700:	bl	0 <__aeabi_read_tp>
 704:	mov	r1, #1
 708:	ldr	r2, [sp, #8]
 70c:	str	r1, [r0, r2]
 710:	ldr	r2, [pc, #60]	; 754 <coda_init+0x1bc>
 714:	str	r1, [r0, r2]
 718:	ldr	r0, [pc, #40]	; 748 <coda_init+0x1b0>
 71c:	str	r0, [sp, #4]
 720:	bl	0 <__aeabi_read_tp>
 724:	ldr	r1, [sp, #4]
 728:	ldr	r2, [r0, r1]
 72c:	add	r2, r2, #1
 730:	str	r2, [r0, r1]
 734:	movw	r0, #0
 738:	str	r0, [fp, #-4]
 73c:	ldr	r0, [fp, #-4]
 740:	mov	sp, fp
 744:	pop	{fp, pc}
	...

00000758 <coda_done>:
 758:	push	{fp, lr}
 75c:	mov	fp, sp
 760:	sub	sp, sp, #24
 764:	ldr	r0, [pc, #180]	; 820 <coda_done+0xc8>
 768:	str	r0, [fp, #-4]
 76c:	bl	0 <__aeabi_read_tp>
 770:	ldr	r1, [fp, #-4]
 774:	ldr	r0, [r0, r1]
 778:	cmp	r0, #0
 77c:	ble	818 <coda_done+0xc0>
 780:	ldr	r0, [pc, #152]	; 820 <coda_done+0xc8>
 784:	str	r0, [fp, #-8]
 788:	bl	0 <__aeabi_read_tp>
 78c:	ldr	r1, [fp, #-8]
 790:	ldr	r2, [r0, r1]
 794:	sub	r2, r2, #1
 798:	str	r2, [r0, r1]
 79c:	ldr	r0, [r0, r1]
 7a0:	cmp	r0, #0
 7a4:	bne	814 <coda_done+0xbc>
 7a8:	bl	0 <coda_sp3_done>
 7ac:	bl	0 <coda_rinex_done>
 7b0:	bl	0 <coda_grib_done>
 7b4:	bl	0 <coda_data_dictionary_done>
 7b8:	ldr	r0, [pc, #100]	; 824 <coda_done+0xcc>
 7bc:	str	r0, [sp, #12]
 7c0:	bl	0 <__aeabi_read_tp>
 7c4:	ldr	r1, [sp, #12]
 7c8:	ldr	r0, [r0, r1]
 7cc:	movw	r1, #0
 7d0:	cmp	r0, r1
 7d4:	beq	808 <coda_done+0xb0>
 7d8:	ldr	r0, [pc, #68]	; 824 <coda_done+0xcc>
 7dc:	str	r0, [sp, #8]
 7e0:	bl	0 <__aeabi_read_tp>
 7e4:	ldr	r1, [sp, #8]
 7e8:	ldr	r2, [r0, r1]
 7ec:	str	r0, [sp, #4]
 7f0:	mov	r0, r2
 7f4:	bl	0 <free>
 7f8:	mov	r0, #0
 7fc:	ldr	r1, [sp, #4]
 800:	ldr	r2, [sp, #8]
 804:	str	r0, [r1, r2]
 808:	bl	0 <coda_mem_done>
 80c:	bl	0 <coda_type_done>
 810:	bl	0 <coda_leap_second_table_done>
 814:	b	818 <coda_done+0xc0>
 818:	mov	sp, fp
 81c:	pop	{fp, pc}
	...

00000828 <coda_free>:
 828:	push	{fp, lr}
 82c:	mov	fp, sp
 830:	sub	sp, sp, #8
 834:	str	r0, [sp, #4]
 838:	ldr	r0, [sp, #4]
 83c:	bl	0 <free>
 840:	mov	sp, fp
 844:	pop	{fp, pc}
