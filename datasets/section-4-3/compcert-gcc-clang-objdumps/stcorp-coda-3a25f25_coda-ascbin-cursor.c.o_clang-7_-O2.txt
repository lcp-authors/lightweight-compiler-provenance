
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-ascbin-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_ascbin_cursor_set_product>:
       0:	mov	r2, r1
       4:	mov	r3, #1
       8:	strd	r2, [r0]
       c:	ldr	r1, [r1, #20]
      10:	cmp	r1, #0
      14:	movne	r2, #0
      18:	mvnne	r3, #0
      1c:	strne	r1, [r0, #8]
      20:	strne	r3, [r0, #12]
      24:	strne	r2, [r0, #16]
      28:	strne	r2, [r0, #20]
      2c:	movne	r0, #0
      30:	bxne	lr
      34:	push	{fp, lr}
      38:	mov	fp, sp
      3c:	movw	r0, #0
      40:	movw	r1, #0
      44:	movw	r3, #0
      48:	mov	r2, #234	; 0xea
      4c:	movt	r0, #0
      50:	movt	r1, #0
      54:	movt	r3, #0
      58:	bl	0 <__assert_fail>

0000005c <coda_ascbin_cursor_goto_record_field_by_index>:
      5c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
      60:	add	fp, sp, #24
      64:	sub	sp, sp, #16
      68:	mov	r5, r0
      6c:	mov	r0, #1
      70:	mov	r4, r1
      74:	str	r0, [sp, #12]
      78:	ldr	r0, [r5, #4]
      7c:	sub	r0, r0, #1
      80:	add	r0, r5, r0, lsl #4
      84:	ldr	r6, [r0, #8]
      88:	ldr	r1, [r6]
      8c:	cmp	r1, #99	; 0x63
      90:	ldrhi	r6, [r6, #4]
      94:	cmp	r4, #0
      98:	ldr	r3, [r6, #48]	; 0x30
      9c:	cmpge	r3, r4
      a0:	bgt	bc <coda_ascbin_cursor_goto_record_field_by_index+0x60>
      a4:	movw	r1, #0
      a8:	mvn	r0, #100	; 0x64
      ac:	mov	r2, r4
      b0:	movt	r1, #0
      b4:	bl	0 <coda_set_error>
      b8:	b	13c <coda_ascbin_cursor_goto_record_field_by_index+0xe0>
      bc:	ldr	r8, [r0, #16]
      c0:	ldr	r7, [r0, #20]
      c4:	ldr	r0, [r6, #68]	; 0x44
      c8:	cmp	r0, #0
      cc:	beq	124 <coda_ascbin_cursor_goto_record_field_by_index+0xc8>
      d0:	mov	r1, sp
      d4:	mov	r0, r5
      d8:	bl	0 <coda_cursor_get_available_union_field_index>
      dc:	cmp	r0, #0
      e0:	bne	13c <coda_ascbin_cursor_goto_record_field_by_index+0xe0>
      e4:	ldr	r0, [sp]
      e8:	cmp	r0, r4
      ec:	movne	r0, #0
      f0:	strne	r0, [sp, #12]
      f4:	ldr	r1, [r5, #4]
      f8:	add	r0, r1, #1
      fc:	str	r0, [r5, #4]
     100:	ldr	r0, [sp, #12]
     104:	cmp	r0, #0
     108:	beq	194 <coda_ascbin_cursor_goto_record_field_by_index+0x138>
     10c:	ldr	r2, [r6, #52]	; 0x34
     110:	add	r0, r5, r1, lsl #4
     114:	ldr	r2, [r2, r4, lsl #2]
     118:	ldr	r2, [r2, #8]
     11c:	str	r2, [r0, #8]
     120:	b	1ac <coda_ascbin_cursor_goto_record_field_by_index+0x150>
     124:	mov	r2, sp
     128:	mov	r0, r5
     12c:	mov	r1, r4
     130:	bl	1c8 <get_relative_field_bit_offset_by_index>
     134:	cmp	r0, #0
     138:	beq	148 <coda_ascbin_cursor_goto_record_field_by_index+0xec>
     13c:	mvn	r0, #0
     140:	sub	sp, fp, #24
     144:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
     148:	ldm	sp, {r0, r1}
     14c:	adds	r8, r0, r8
     150:	ldr	r0, [r6, #52]	; 0x34
     154:	adc	r7, r1, r7
     158:	ldr	r0, [r0, r4, lsl #2]
     15c:	ldr	r0, [r0, #20]
     160:	cmp	r0, #0
     164:	beq	f4 <coda_ascbin_cursor_goto_record_field_by_index+0x98>
     168:	add	r2, sp, #12
     16c:	mov	r1, r5
     170:	bl	0 <coda_expression_eval_bool>
     174:	cmp	r0, #0
     178:	beq	f4 <coda_ascbin_cursor_goto_record_field_by_index+0x98>
     17c:	movw	r0, #0
     180:	movt	r0, #0
     184:	bl	0 <coda_add_error_message>
     188:	mov	r0, r5
     18c:	bl	0 <coda_cursor_add_to_error_message>
     190:	b	13c <coda_ascbin_cursor_goto_record_field_by_index+0xe0>
     194:	ldr	r0, [r6]
     198:	bl	0 <coda_no_data_singleton>
     19c:	ldr	r1, [r5, #4]
     1a0:	sub	r1, r1, #1
     1a4:	add	r2, r5, r1, lsl #4
     1a8:	str	r0, [r2, #8]
     1ac:	add	r0, r5, r1, lsl #4
     1b0:	str	r4, [r0, #12]
     1b4:	str	r8, [r0, #16]
     1b8:	str	r7, [r0, #20]
     1bc:	mov	r0, #0
     1c0:	sub	sp, fp, #24
     1c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000001c8 <get_relative_field_bit_offset_by_index>:
     1c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     1cc:	add	fp, sp, #28
     1d0:	sub	sp, sp, #548	; 0x224
     1d4:	mov	r4, r0
     1d8:	ldr	r0, [r0, #4]
     1dc:	mov	r8, r1
     1e0:	mov	r9, r2
     1e4:	add	r0, r4, r0, lsl #4
     1e8:	ldr	sl, [r0, #-8]
     1ec:	ldr	r1, [sl, #52]	; 0x34
     1f0:	ldr	r5, [r1, r8, lsl #2]
     1f4:	ldr	r3, [r5, #28]
     1f8:	cmp	r3, #0
     1fc:	blt	210 <get_relative_field_bit_offset_by_index+0x48>
     200:	ldr	r2, [r5, #24]
     204:	strd	r2, [r9]
     208:	mov	r7, #0
     20c:	b	438 <get_relative_field_bit_offset_by_index+0x270>
     210:	ldr	r0, [r5, #32]
     214:	cmp	r0, #0
     218:	beq	24c <get_relative_field_bit_offset_by_index+0x84>
     21c:	ldr	r1, [r5, #20]
     220:	cmp	r1, #0
     224:	beq	40c <get_relative_field_bit_offset_by_index+0x244>
     228:	mov	r0, r1
     22c:	add	r2, sp, #24
     230:	mov	r1, r4
     234:	bl	0 <coda_expression_eval_bool>
     238:	cmp	r0, #0
     23c:	beq	3fc <get_relative_field_bit_offset_by_index+0x234>
     240:	movw	r0, #0
     244:	movt	r0, #0
     248:	b	428 <get_relative_field_bit_offset_by_index+0x260>
     24c:	cmp	r8, #0
     250:	beq	484 <get_relative_field_bit_offset_by_index+0x2bc>
     254:	mvn	r0, #0
     258:	sub	r1, r1, #4
     25c:	mov	r6, r8
     260:	ldr	r2, [r1, r6, lsl #2]
     264:	ldr	r3, [r2, #24]
     268:	ldr	r5, [r2, #28]
     26c:	eor	r7, r5, r0
     270:	eor	r3, r3, r0
     274:	orrs	r3, r3, r7
     278:	ldreq	r2, [r2, #32]
     27c:	cmpeq	r2, #0
     280:	bne	2b4 <get_relative_field_bit_offset_by_index+0xec>
     284:	sub	r6, r6, #1
     288:	add	r2, r6, #1
     28c:	cmp	r2, #1
     290:	bgt	260 <get_relative_field_bit_offset_by_index+0x98>
     294:	movw	r0, #0
     298:	movw	r1, #0
     29c:	movw	r3, #0
     2a0:	mov	r2, #110	; 0x6e
     2a4:	movt	r0, #0
     2a8:	movt	r1, #0
     2ac:	movt	r3, #0
     2b0:	bl	0 <__assert_fail>
     2b4:	sub	r5, r6, #1
     2b8:	add	r2, sp, #16
     2bc:	mov	r0, r4
     2c0:	mov	r1, r5
     2c4:	bl	1c8 <get_relative_field_bit_offset_by_index>
     2c8:	mvn	r7, #0
     2cc:	cmp	r0, #0
     2d0:	bne	438 <get_relative_field_bit_offset_by_index+0x270>
     2d4:	str	r9, [sp]
     2d8:	add	r9, sp, #24
     2dc:	mov	r1, r4
     2e0:	mov	r2, #520	; 0x208
     2e4:	mov	r0, r9
     2e8:	bl	0 <memcpy>
     2ec:	ldr	r0, [sp, #28]
     2f0:	mov	r2, r4
     2f4:	add	r1, r0, #1
     2f8:	add	ip, r9, r0, lsl #4
     2fc:	ldr	r0, [sp, #16]
     300:	str	r1, [sp, #28]
     304:	ldr	r1, [r4, #4]
     308:	ldr	r3, [r2, r1, lsl #4]!
     30c:	ldr	r1, [sp, #20]
     310:	ldr	r2, [r2, #4]
     314:	adds	r3, r0, r3
     318:	str	r3, [ip, #16]
     31c:	adc	r2, r1, r2
     320:	cmp	r6, r8
     324:	str	r2, [ip, #20]
     328:	bgt	3f0 <get_relative_field_bit_offset_by_index+0x228>
     32c:	mov	r6, #1
     330:	str	r6, [sp, #4]
     334:	ldr	r0, [sl, #52]	; 0x34
     338:	ldr	r0, [r0, r5, lsl #2]
     33c:	ldr	r0, [r0, #20]
     340:	cmp	r0, #0
     344:	beq	368 <get_relative_field_bit_offset_by_index+0x1a0>
     348:	mov	r1, r4
     34c:	add	r2, sp, #4
     350:	bl	0 <coda_expression_eval_bool>
     354:	cmp	r0, #0
     358:	bne	474 <get_relative_field_bit_offset_by_index+0x2ac>
     35c:	ldr	r0, [sp, #4]
     360:	cmp	r0, #0
     364:	beq	3dc <get_relative_field_bit_offset_by_index+0x214>
     368:	ldr	r1, [sl, #52]	; 0x34
     36c:	ldr	r0, [sp, #28]
     370:	ldr	r1, [r1, r5, lsl #2]
     374:	add	r0, r9, r0, lsl #4
     378:	ldr	r1, [r1, #8]
     37c:	str	r1, [r0, #-8]!
     380:	add	r1, sp, #8
     384:	orr	r0, r0, #4
     388:	str	r5, [r0]
     38c:	mov	r0, r9
     390:	bl	0 <coda_cursor_get_bit_size>
     394:	cmp	r0, #0
     398:	bne	438 <get_relative_field_bit_offset_by_index+0x270>
     39c:	ldr	r0, [sp, #28]
     3a0:	ldr	r2, [sp, #8]
     3a4:	ldr	r3, [sp, #12]
     3a8:	ldr	r1, [r9, r0, lsl #4]
     3ac:	adds	r1, r1, r2
     3b0:	str	r1, [r9, r0, lsl #4]
     3b4:	add	r0, r9, r0, lsl #4
     3b8:	ldr	r1, [r0, #4]
     3bc:	adc	r1, r1, r3
     3c0:	str	r1, [r0, #4]
     3c4:	ldr	r0, [sp, #16]
     3c8:	ldr	r1, [sp, #20]
     3cc:	adds	r0, r0, r2
     3d0:	str	r0, [sp, #16]
     3d4:	adc	r0, r1, r3
     3d8:	str	r0, [sp, #20]
     3dc:	add	r5, r5, #1
     3e0:	cmp	r5, r8
     3e4:	blt	330 <get_relative_field_bit_offset_by_index+0x168>
     3e8:	ldr	r0, [sp, #16]
     3ec:	ldr	r1, [sp, #20]
     3f0:	ldr	r2, [sp]
     3f4:	strd	r0, [r2]
     3f8:	b	208 <get_relative_field_bit_offset_by_index+0x40>
     3fc:	ldr	r0, [sp, #24]
     400:	cmp	r0, #0
     404:	beq	444 <get_relative_field_bit_offset_by_index+0x27c>
     408:	ldr	r0, [r5, #32]
     40c:	mov	r1, r4
     410:	mov	r2, r9
     414:	bl	0 <coda_expression_eval_integer>
     418:	cmp	r0, #0
     41c:	beq	208 <get_relative_field_bit_offset_by_index+0x40>
     420:	movw	r0, #0
     424:	movt	r0, #0
     428:	bl	0 <coda_add_error_message>
     42c:	mov	r0, r4
     430:	bl	0 <coda_cursor_add_to_error_message>
     434:	mvn	r7, #0
     438:	mov	r0, r7
     43c:	sub	sp, fp, #28
     440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     444:	cmp	r8, #0
     448:	beq	464 <get_relative_field_bit_offset_by_index+0x29c>
     44c:	sub	r1, r8, #1
     450:	mov	r0, r4
     454:	mov	r2, r9
     458:	bl	1c8 <get_relative_field_bit_offset_by_index>
     45c:	mov	r7, r0
     460:	b	438 <get_relative_field_bit_offset_by_index+0x270>
     464:	mov	r7, #0
     468:	str	r7, [r9]
     46c:	str	r7, [r9, #4]
     470:	b	438 <get_relative_field_bit_offset_by_index+0x270>
     474:	movw	r0, #0
     478:	movt	r0, #0
     47c:	bl	0 <coda_add_error_message>
     480:	b	438 <get_relative_field_bit_offset_by_index+0x270>
     484:	movw	r0, #0
     488:	movw	r1, #0
     48c:	movw	r3, #0
     490:	mov	r2, #99	; 0x63
     494:	movt	r0, #0
     498:	movt	r1, #0
     49c:	movt	r3, #0
     4a0:	bl	0 <__assert_fail>

000004a4 <coda_ascbin_cursor_goto_next_record_field>:
     4a4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     4a8:	add	fp, sp, #24
     4ac:	sub	sp, sp, #536	; 0x218
     4b0:	mov	r4, r0
     4b4:	mov	r0, #1
     4b8:	str	r0, [fp, #-32]	; 0xffffffe0
     4bc:	ldr	r1, [r4, #4]
     4c0:	sub	r0, r1, #2
     4c4:	add	r1, r4, r1, lsl #4
     4c8:	add	r0, r4, r0, lsl #4
     4cc:	ldr	r1, [r1, #-4]
     4d0:	ldr	r7, [r0, #8]
     4d4:	add	r5, r1, #1
     4d8:	ldr	r2, [r7]
     4dc:	cmp	r2, #99	; 0x63
     4e0:	ldrhi	r7, [r7, #4]
     4e4:	cmn	r1, #1
     4e8:	ldr	r3, [r7, #48]	; 0x30
     4ec:	blt	578 <coda_ascbin_cursor_goto_next_record_field+0xd4>
     4f0:	cmp	r5, r3
     4f4:	bge	578 <coda_ascbin_cursor_goto_next_record_field+0xd4>
     4f8:	ldrd	r8, [r0, #16]
     4fc:	ldr	r0, [r7, #68]	; 0x44
     500:	cmp	r0, #0
     504:	beq	598 <coda_ascbin_cursor_goto_next_record_field+0xf4>
     508:	add	r6, sp, #8
     50c:	mov	r1, r4
     510:	mov	r2, #520	; 0x208
     514:	mov	r0, r6
     518:	bl	0 <memcpy>
     51c:	ldr	r0, [sp, #12]
     520:	mov	r1, sp
     524:	sub	r0, r0, #1
     528:	str	r0, [sp, #12]
     52c:	mov	r0, r6
     530:	bl	0 <coda_cursor_get_available_union_field_index>
     534:	cmp	r0, #0
     538:	bne	58c <coda_ascbin_cursor_goto_next_record_field+0xe8>
     53c:	ldr	r0, [sp]
     540:	cmp	r5, r0
     544:	movne	r0, #0
     548:	strne	r0, [fp, #-32]	; 0xffffffe0
     54c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     550:	cmp	r0, #0
     554:	beq	628 <coda_ascbin_cursor_goto_next_record_field+0x184>
     558:	ldr	r2, [r7, #52]	; 0x34
     55c:	ldr	r0, [r4, #4]
     560:	ldr	r2, [r2, r5, lsl #2]
     564:	sub	r1, r0, #1
     568:	add	r0, r4, r1, lsl #4
     56c:	ldr	r2, [r2, #8]
     570:	str	r2, [r0, #8]
     574:	b	640 <coda_ascbin_cursor_goto_next_record_field+0x19c>
     578:	movw	r1, #0
     57c:	mvn	r0, #100	; 0x64
     580:	mov	r2, r5
     584:	movt	r1, #0
     588:	bl	0 <coda_set_error>
     58c:	mvn	r0, #0
     590:	sub	sp, fp, #24
     594:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     598:	mov	r1, sp
     59c:	mov	r0, r4
     5a0:	mov	r2, #0
     5a4:	bl	658 <get_next_relative_field_bit_offset>
     5a8:	cmp	r0, #0
     5ac:	bne	58c <coda_ascbin_cursor_goto_next_record_field+0xe8>
     5b0:	ldm	sp, {r0, r1}
     5b4:	adds	r8, r0, r8
     5b8:	ldr	r0, [r7, #52]	; 0x34
     5bc:	adc	r9, r1, r9
     5c0:	ldr	r0, [r0, r5, lsl #2]
     5c4:	ldr	r0, [r0, #20]
     5c8:	cmp	r0, #0
     5cc:	beq	54c <coda_ascbin_cursor_goto_next_record_field+0xa8>
     5d0:	add	r6, sp, #8
     5d4:	mov	r1, r4
     5d8:	mov	r2, #520	; 0x208
     5dc:	mov	r0, r6
     5e0:	bl	0 <memcpy>
     5e4:	ldr	r0, [sp, #12]
     5e8:	sub	r2, fp, #32
     5ec:	mov	r1, r6
     5f0:	sub	r0, r0, #1
     5f4:	str	r0, [sp, #12]
     5f8:	ldr	r0, [r7, #52]	; 0x34
     5fc:	ldr	r0, [r0, r5, lsl #2]
     600:	ldr	r0, [r0, #20]
     604:	bl	0 <coda_expression_eval_bool>
     608:	cmp	r0, #0
     60c:	beq	54c <coda_ascbin_cursor_goto_next_record_field+0xa8>
     610:	movw	r0, #0
     614:	movt	r0, #0
     618:	bl	0 <coda_add_error_message>
     61c:	mov	r0, r4
     620:	bl	0 <coda_cursor_add_to_error_message>
     624:	b	58c <coda_ascbin_cursor_goto_next_record_field+0xe8>
     628:	ldr	r0, [r7]
     62c:	bl	0 <coda_no_data_singleton>
     630:	ldr	r1, [r4, #4]
     634:	sub	r1, r1, #1
     638:	add	r2, r4, r1, lsl #4
     63c:	str	r0, [r2, #8]
     640:	add	r0, r4, r1, lsl #4
     644:	add	r0, r0, #12
     648:	stm	r0, {r5, r8, r9}
     64c:	mov	r0, #0
     650:	sub	sp, fp, #24
     654:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00000658 <get_next_relative_field_bit_offset>:
     658:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     65c:	add	fp, sp, #28
     660:	sub	sp, sp, #532	; 0x214
     664:	mov	r4, r0
     668:	mov	r6, r2
     66c:	mov	r8, r1
     670:	add	r0, r0, #8
     674:	ldr	r2, [r4, #4]
     678:	sub	r1, r2, #2
     67c:	sub	r2, r2, #1
     680:	ldr	r3, [r0, r1, lsl #4]
     684:	add	r2, r0, r2, lsl #4
     688:	ldr	r7, [r2, #4]
     68c:	ldr	r5, [r3, #48]	; 0x30
     690:	add	r7, r7, #1
     694:	cmp	r7, r5
     698:	bge	7f0 <get_next_relative_field_bit_offset+0x198>
     69c:	ldr	r3, [r3, #52]	; 0x34
     6a0:	mvn	sl, #0
     6a4:	ldr	r7, [r3, r7, lsl #2]
     6a8:	ldr	r3, [r7, #28]
     6ac:	cmp	r3, #0
     6b0:	blt	6dc <get_next_relative_field_bit_offset+0x84>
     6b4:	ldr	r2, [r7, #24]
     6b8:	mov	r0, #0
     6bc:	cmp	r6, #0
     6c0:	strd	r2, [r8]
     6c4:	strne	sl, [r6]
     6c8:	strne	sl, [r6, #4]
     6cc:	subne	sp, fp, #28
     6d0:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     6d4:	sub	sp, fp, #28
     6d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     6dc:	add	r0, r0, r1, lsl #4
     6e0:	ldrd	r2, [r2, #8]
     6e4:	ldrd	r0, [r0, #8]
     6e8:	subs	r5, r2, r0
     6ec:	ldr	r0, [r7, #32]
     6f0:	sbc	r9, r3, r1
     6f4:	cmp	r0, #0
     6f8:	beq	750 <get_next_relative_field_bit_offset+0xf8>
     6fc:	add	r0, sp, #8
     700:	mov	r1, r4
     704:	mov	r2, #520	; 0x208
     708:	bl	0 <memcpy>
     70c:	ldr	r0, [sp, #12]
     710:	cmp	r6, #0
     714:	sub	r0, r0, #1
     718:	str	r0, [sp, #12]
     71c:	strne	sl, [r6]
     720:	strne	sl, [r6, #4]
     724:	ldr	r0, [r7, #20]
     728:	cmp	r0, #0
     72c:	beq	780 <get_next_relative_field_bit_offset+0x128>
     730:	add	r1, sp, #8
     734:	add	r2, sp, #4
     738:	bl	0 <coda_expression_eval_bool>
     73c:	cmp	r0, #0
     740:	beq	774 <get_next_relative_field_bit_offset+0x11c>
     744:	movw	r0, #0
     748:	movt	r0, #0
     74c:	b	7a0 <get_next_relative_field_bit_offset+0x148>
     750:	add	r1, sp, #8
     754:	mov	r0, r4
     758:	bl	0 <coda_cursor_get_bit_size>
     75c:	mov	r1, r0
     760:	mvn	r0, #0
     764:	cmp	r1, #0
     768:	beq	7b8 <get_next_relative_field_bit_offset+0x160>
     76c:	sub	sp, fp, #28
     770:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     774:	ldr	r0, [sp, #4]
     778:	cmp	r0, #0
     77c:	beq	7e0 <get_next_relative_field_bit_offset+0x188>
     780:	ldr	r0, [r7, #32]
     784:	add	r1, sp, #8
     788:	mov	r2, r8
     78c:	bl	0 <coda_expression_eval_integer>
     790:	cmp	r0, #0
     794:	beq	7e4 <get_next_relative_field_bit_offset+0x18c>
     798:	movw	r0, #0
     79c:	movt	r0, #0
     7a0:	bl	0 <coda_add_error_message>
     7a4:	mov	r0, r4
     7a8:	bl	0 <coda_cursor_add_to_error_message>
     7ac:	mvn	r0, #0
     7b0:	sub	sp, fp, #28
     7b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7b8:	ldr	r2, [sp, #8]
     7bc:	ldr	r3, [sp, #12]
     7c0:	adds	r0, r2, r5
     7c4:	adc	r1, r3, r9
     7c8:	cmp	r6, #0
     7cc:	strd	r0, [r8]
     7d0:	mov	r0, #0
     7d4:	strdne	r2, [r6]
     7d8:	sub	sp, fp, #28
     7dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7e0:	stm	r8, {r5, r9}
     7e4:	mov	r0, #0
     7e8:	sub	sp, fp, #28
     7ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7f0:	movw	r0, #0
     7f4:	movw	r1, #0
     7f8:	movw	r3, #0
     7fc:	mov	r2, #161	; 0xa1
     800:	movt	r0, #0
     804:	movt	r1, #0
     808:	movt	r3, #0
     80c:	bl	0 <__assert_fail>

00000810 <coda_ascbin_cursor_goto_available_union_field>:
     810:	push	{r4, r5, fp, lr}
     814:	add	fp, sp, #8
     818:	sub	sp, sp, #8
     81c:	mov	r4, r0
     820:	ldr	r0, [r0, #4]
     824:	add	r0, r4, r0, lsl #4
     828:	ldr	r5, [r0, #-8]
     82c:	ldr	r0, [r5]
     830:	cmp	r0, #99	; 0x63
     834:	ldrhi	r5, [r5, #4]
     838:	ldr	r0, [r5, #68]	; 0x44
     83c:	cmp	r0, #0
     840:	beq	868 <coda_ascbin_cursor_goto_available_union_field+0x58>
     844:	add	r1, sp, #4
     848:	mov	r0, r4
     84c:	bl	8c4 <coda_ascbin_cursor_get_available_union_field_index>
     850:	mov	r1, r0
     854:	mvn	r0, #0
     858:	cmp	r1, #0
     85c:	beq	884 <coda_ascbin_cursor_goto_available_union_field+0x74>
     860:	sub	sp, fp, #8
     864:	pop	{r4, r5, fp, pc}
     868:	movw	r1, #0
     86c:	mvn	r0, #104	; 0x68
     870:	movt	r1, #0
     874:	bl	0 <coda_set_error>
     878:	mvn	r0, #0
     87c:	sub	sp, fp, #8
     880:	pop	{r4, r5, fp, pc}
     884:	ldr	r0, [r4, #4]
     888:	add	r1, r0, #1
     88c:	str	r1, [r4, #4]
     890:	ldr	r1, [r5, #52]	; 0x34
     894:	ldr	r2, [sp, #4]
     898:	ldr	r0, [r4, r0, lsl #4]!
     89c:	ldr	r1, [r1, r2, lsl #2]
     8a0:	ldr	r3, [r4, #4]
     8a4:	ldr	r1, [r1, #8]
     8a8:	str	r1, [r4, #8]
     8ac:	str	r2, [r4, #12]
     8b0:	str	r0, [r4, #16]
     8b4:	mov	r0, #0
     8b8:	str	r3, [r4, #20]
     8bc:	sub	sp, fp, #8
     8c0:	pop	{r4, r5, fp, pc}

000008c4 <coda_ascbin_cursor_get_available_union_field_index>:
     8c4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     8c8:	add	fp, sp, #24
     8cc:	sub	sp, sp, #592	; 0x250
     8d0:	mov	r4, r0
     8d4:	ldr	r0, [r0, #4]
     8d8:	mov	r8, r1
     8dc:	add	r0, r4, r0, lsl #4
     8e0:	ldr	r6, [r0, #-8]
     8e4:	ldr	r0, [r6]
     8e8:	cmp	r0, #99	; 0x63
     8ec:	ldrhi	r6, [r6, #4]
     8f0:	ldr	r0, [r6, #68]	; 0x44
     8f4:	cmp	r0, #0
     8f8:	beq	980 <coda_ascbin_cursor_get_available_union_field_index+0xbc>
     8fc:	ldr	r0, [r6, #48]	; 0x30
     900:	cmp	r0, #0
     904:	ble	a40 <coda_ascbin_cursor_get_available_union_field_index+0x17c>
     908:	add	r7, sp, #64	; 0x40
     90c:	mov	r1, r4
     910:	mov	r2, #520	; 0x208
     914:	mov	r0, r7
     918:	bl	0 <memcpy>
     91c:	ldr	r0, [sp, #68]	; 0x44
     920:	mvn	r5, #0
     924:	add	r1, r0, #1
     928:	str	r1, [sp, #68]	; 0x44
     92c:	add	r1, r7, r0, lsl #4
     930:	ldr	r2, [r6, #52]	; 0x34
     934:	ldr	r3, [r1, #4]
     938:	ldr	r0, [r7, r0, lsl #4]
     93c:	ldr	r2, [r2]
     940:	ldr	r2, [r2, #8]
     944:	str	r0, [r1, #16]
     948:	str	r3, [r1, #20]
     94c:	str	r2, [r1, #8]!
     950:	add	r2, sp, #56	; 0x38
     954:	orr	r0, r1, #4
     958:	mov	r1, r7
     95c:	str	r5, [r0]
     960:	ldr	r0, [r6, #68]	; 0x44
     964:	bl	0 <coda_expression_eval_integer>
     968:	cmp	r0, #0
     96c:	beq	998 <coda_ascbin_cursor_get_available_union_field_index+0xd4>
     970:	movw	r0, #0
     974:	movt	r0, #0
     978:	bl	0 <coda_add_error_message>
     97c:	b	a2c <coda_ascbin_cursor_get_available_union_field_index+0x168>
     980:	movw	r1, #0
     984:	mvn	r0, #104	; 0x68
     988:	movt	r1, #0
     98c:	bl	0 <coda_set_error>
     990:	mvn	r5, #0
     994:	b	a34 <coda_ascbin_cursor_get_available_union_field_index+0x170>
     998:	ldr	r1, [sp, #60]	; 0x3c
     99c:	ldr	r0, [sp, #56]	; 0x38
     9a0:	cmp	r1, #0
     9a4:	blt	9c4 <coda_ascbin_cursor_get_available_union_field_index+0x100>
     9a8:	ldr	r2, [r6, #48]	; 0x30
     9ac:	subs	r3, r0, r2
     9b0:	sbcs	r2, r1, r2, asr #31
     9b4:	bge	9c4 <coda_ascbin_cursor_get_available_union_field_index+0x100>
     9b8:	mov	r5, #0
     9bc:	str	r0, [r8]
     9c0:	b	a34 <coda_ascbin_cursor_get_available_union_field_index+0x170>
     9c4:	add	r8, sp, #35	; 0x23
     9c8:	mov	r2, r8
     9cc:	bl	0 <coda_str64>
     9d0:	ldr	r0, [r4, #4]
     9d4:	add	r7, r4, #8
     9d8:	add	r9, sp, #14
     9dc:	mov	r2, r9
     9e0:	add	r0, r7, r0, lsl #4
     9e4:	ldrd	r0, [r0, #-8]
     9e8:	lsr	r0, r0, #3
     9ec:	orr	r0, r0, r1, lsl #29
     9f0:	asr	r1, r1, #3
     9f4:	bl	0 <coda_str64>
     9f8:	ldr	r0, [r4, #4]
     9fc:	ldr	r3, [r6, #48]	; 0x30
     a00:	movw	r1, #0
     a04:	mov	r2, r8
     a08:	movt	r1, #0
     a0c:	add	r0, r7, r0, lsl #4
     a10:	ldr	r0, [r0, #-8]
     a14:	str	r9, [sp]
     a18:	and	r0, r0, #7
     a1c:	str	r0, [sp, #4]
     a20:	movw	r0, #65236	; 0xfed4
     a24:	movt	r0, #65535	; 0xffff
     a28:	bl	0 <coda_set_error>
     a2c:	mov	r0, r4
     a30:	bl	0 <coda_cursor_add_to_error_message>
     a34:	mov	r0, r5
     a38:	sub	sp, fp, #24
     a3c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     a40:	movw	r0, #0
     a44:	movw	r1, #0
     a48:	movw	r3, #0
     a4c:	movw	r2, #889	; 0x379
     a50:	movt	r0, #0
     a54:	movt	r1, #0
     a58:	movt	r3, #0
     a5c:	bl	0 <__assert_fail>

00000a60 <coda_ascbin_cursor_goto_array_element>:
     a60:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     a64:	add	fp, sp, #24
     a68:	sub	sp, sp, #8
     a6c:	mov	r4, r0
     a70:	ldr	r0, [r0, #4]
     a74:	mov	r5, r2
     a78:	mov	r2, r1
     a7c:	sub	r6, r0, #1
     a80:	add	r1, r4, r6, lsl #4
     a84:	ldr	r7, [r1, #8]
     a88:	ldr	r1, [r7]
     a8c:	cmp	r1, #99	; 0x63
     a90:	ldrhi	r7, [r7, #4]
     a94:	ldr	r3, [r7, #48]	; 0x30
     a98:	cmp	r3, r2
     a9c:	bne	b1c <coda_ascbin_cursor_goto_array_element+0xbc>
     aa0:	cmp	r2, #1
     aa4:	blt	b2c <coda_ascbin_cursor_goto_array_element+0xcc>
     aa8:	mov	r6, #0
     aac:	mov	r8, sp
     ab0:	mov	r9, #0
     ab4:	add	r0, r7, r6, lsl #2
     ab8:	ldr	r3, [r0, #52]	; 0x34
     abc:	cmn	r3, #1
     ac0:	bne	ae0 <coda_ascbin_cursor_goto_array_element+0x80>
     ac4:	ldr	r0, [r0, #84]	; 0x54
     ac8:	mov	r1, r4
     acc:	mov	r2, r8
     ad0:	bl	0 <coda_expression_eval_integer>
     ad4:	cmp	r0, #0
     ad8:	bne	c4c <coda_ascbin_cursor_goto_array_element+0x1ec>
     adc:	ldr	r3, [sp]
     ae0:	ldr	r2, [r5, r6, lsl #2]
     ae4:	cmp	r2, #0
     ae8:	blt	b9c <coda_ascbin_cursor_goto_array_element+0x13c>
     aec:	cmp	r2, r3
     af0:	bge	b9c <coda_ascbin_cursor_goto_array_element+0x13c>
     af4:	ldr	r0, [r7, #48]	; 0x30
     af8:	cmp	r6, #0
     afc:	add	r6, r6, #1
     b00:	movweq	r3, #1
     b04:	mla	r9, r3, r9, r2
     b08:	cmp	r6, r0
     b0c:	blt	ab4 <coda_ascbin_cursor_goto_array_element+0x54>
     b10:	ldr	r0, [r4, #4]
     b14:	sub	r6, r0, #1
     b18:	b	b30 <coda_ascbin_cursor_goto_array_element+0xd0>
     b1c:	movw	r1, #0
     b20:	mvn	r0, #105	; 0x69
     b24:	movt	r1, #0
     b28:	b	ba8 <coda_ascbin_cursor_goto_array_element+0x148>
     b2c:	mov	r9, #0
     b30:	add	r1, r0, #1
     b34:	add	r2, r4, #8
     b38:	add	r3, r2, r0, lsl #4
     b3c:	str	r1, [r4, #4]
     b40:	add	r2, r2, r6, lsl #4
     b44:	ldr	r6, [r2, #8]
     b48:	ldr	ip, [r2, #12]
     b4c:	str	r6, [r3, #8]!
     b50:	str	ip, [r3, #4]
     b54:	ldr	r2, [r7, #40]	; 0x28
     b58:	ldr	r5, [r2, #28]
     b5c:	cmn	r5, #1
     b60:	ble	bb8 <coda_ascbin_cursor_goto_array_element+0x158>
     b64:	ldr	r0, [r2, #24]
     b68:	umull	r7, lr, r0, r9
     b6c:	adds	r6, r7, r6
     b70:	asr	r7, r9, #31
     b74:	mla	r0, r0, r7, lr
     b78:	mla	r0, r5, r9, r0
     b7c:	adc	r7, r0, ip
     b80:	strd	r6, [r3]
     b84:	add	r0, r4, r1, lsl #4
     b88:	str	r2, [r0, #-8]
     b8c:	str	r9, [r0, #-4]
     b90:	mov	r0, #0
     b94:	sub	sp, fp, #24
     b98:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     b9c:	movw	r1, #0
     ba0:	mvn	r0, #106	; 0x6a
     ba4:	movt	r1, #0
     ba8:	bl	0 <coda_set_error>
     bac:	mvn	r0, #0
     bb0:	sub	sp, fp, #24
     bb4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     bb8:	cmp	r9, #1
     bbc:	blt	b84 <coda_ascbin_cursor_goto_array_element+0x124>
     bc0:	add	r0, r4, r0, lsl #4
     bc4:	mov	r3, #0
     bc8:	mov	r1, sp
     bcc:	strd	r2, [r0, #8]
     bd0:	mov	r0, r4
     bd4:	bl	0 <coda_cursor_get_bit_size>
     bd8:	cmp	r0, #0
     bdc:	bne	c3c <coda_ascbin_cursor_goto_array_element+0x1dc>
     be0:	mov	r6, #1
     be4:	mov	r8, sp
     be8:	ldr	r1, [r4, #4]
     bec:	mov	r0, r4
     bf0:	ldr	r2, [r0, r1, lsl #4]!
     bf4:	ldm	sp, {r3, r5}
     bf8:	adds	r2, r2, r3
     bfc:	str	r2, [r0]
     c00:	ldr	r2, [r0, #4]
     c04:	adc	r2, r2, r5
     c08:	cmp	r6, r9
     c0c:	str	r2, [r0, #4]
     c10:	ldr	r2, [r7, #40]	; 0x28
     c14:	bge	b84 <coda_ascbin_cursor_goto_array_element+0x124>
     c18:	add	r0, r4, r1, lsl #4
     c1c:	mov	r1, r8
     c20:	str	r2, [r0, #-8]
     c24:	str	r6, [r0, #-4]
     c28:	mov	r0, r4
     c2c:	bl	0 <coda_cursor_get_bit_size>
     c30:	add	r6, r6, #1
     c34:	cmp	r0, #0
     c38:	beq	be8 <coda_ascbin_cursor_goto_array_element+0x188>
     c3c:	ldr	r0, [r4, #4]
     c40:	sub	r0, r0, #1
     c44:	str	r0, [r4, #4]
     c48:	b	bac <coda_ascbin_cursor_goto_array_element+0x14c>
     c4c:	movw	r0, #0
     c50:	mov	r1, r6
     c54:	movt	r0, #0
     c58:	bl	0 <coda_add_error_message>
     c5c:	mov	r0, r4
     c60:	bl	0 <coda_cursor_add_to_error_message>
     c64:	b	bac <coda_ascbin_cursor_goto_array_element+0x14c>

00000c68 <coda_ascbin_cursor_goto_array_element_by_index>:
     c68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c6c:	add	fp, sp, #28
     c70:	sub	sp, sp, #12
     c74:	mov	sl, r1
     c78:	ldr	r1, [r0, #4]
     c7c:	mov	r4, r0
     c80:	sub	r2, r1, #1
     c84:	add	r0, r0, r2, lsl #4
     c88:	ldr	r6, [r0, #8]
     c8c:	ldr	r0, [r6]
     c90:	cmp	r0, #99	; 0x63
     c94:	ldr	r0, [pc, #352]	; dfc <coda_ascbin_cursor_goto_array_element_by_index+0x194>
     c98:	ldrhi	r6, [r6, #4]
     c9c:	ldr	r3, [pc, r0]
     ca0:	bl	0 <__aeabi_read_tp>
     ca4:	ldr	r0, [r0, r3]
     ca8:	cmp	r0, #0
     cac:	beq	cf4 <coda_ascbin_cursor_goto_array_element_by_index+0x8c>
     cb0:	add	r1, sp, #8
     cb4:	mov	r0, r4
     cb8:	bl	0 <coda_cursor_get_num_elements>
     cbc:	cmp	r0, #0
     cc0:	bne	df0 <coda_ascbin_cursor_goto_array_element_by_index+0x188>
     cc4:	ldr	r3, [sp, #8]
     cc8:	cmp	sl, #0
     ccc:	cmpge	r3, sl
     cd0:	bgt	cec <coda_ascbin_cursor_goto_array_element_by_index+0x84>
     cd4:	movw	r1, #0
     cd8:	mvn	r0, #106	; 0x6a
     cdc:	mov	r2, sl
     ce0:	movt	r1, #0
     ce4:	bl	0 <coda_set_error>
     ce8:	b	df0 <coda_ascbin_cursor_goto_array_element_by_index+0x188>
     cec:	ldr	r1, [r4, #4]
     cf0:	sub	r2, r1, #1
     cf4:	add	r7, r4, #8
     cf8:	add	r0, r1, #1
     cfc:	str	r0, [r4, #4]
     d00:	add	r2, r7, r2, lsl #4
     d04:	add	r3, r7, r1, lsl #4
     d08:	ldr	r8, [r2, #8]
     d0c:	ldr	r5, [r2, #12]
     d10:	str	r8, [r3, #8]!
     d14:	str	r5, [r3, #4]
     d18:	ldr	r2, [r6, #40]	; 0x28
     d1c:	ldr	r7, [r2, #28]
     d20:	cmn	r7, #1
     d24:	ble	d60 <coda_ascbin_cursor_goto_array_element_by_index+0xf8>
     d28:	ldr	r1, [r2, #24]
     d2c:	umull	r6, ip, r1, sl
     d30:	adds	r8, r6, r8
     d34:	asr	r6, sl, #31
     d38:	mla	r1, r1, r6, ip
     d3c:	mla	r1, r7, sl, r1
     d40:	adc	r9, r1, r5
     d44:	strd	r8, [r3]
     d48:	add	r0, r4, r0, lsl #4
     d4c:	str	r2, [r0, #-8]
     d50:	str	sl, [r0, #-4]
     d54:	mov	r0, #0
     d58:	sub	sp, fp, #28
     d5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d60:	cmp	sl, #1
     d64:	blt	d48 <coda_ascbin_cursor_goto_array_element_by_index+0xe0>
     d68:	add	r0, r4, r1, lsl #4
     d6c:	mov	r3, #0
     d70:	mov	r1, sp
     d74:	strd	r2, [r0, #8]
     d78:	mov	r0, r4
     d7c:	bl	0 <coda_cursor_get_bit_size>
     d80:	cmp	r0, #0
     d84:	bne	de4 <coda_ascbin_cursor_goto_array_element_by_index+0x17c>
     d88:	mov	r9, #1
     d8c:	mov	r5, sp
     d90:	ldr	r0, [r4, #4]
     d94:	mov	r1, r4
     d98:	ldr	r2, [r1, r0, lsl #4]!
     d9c:	ldm	sp, {r3, r7}
     da0:	adds	r2, r2, r3
     da4:	str	r2, [r1]
     da8:	ldr	r2, [r1, #4]
     dac:	adc	r2, r2, r7
     db0:	cmp	r9, sl
     db4:	str	r2, [r1, #4]
     db8:	ldr	r2, [r6, #40]	; 0x28
     dbc:	bge	d48 <coda_ascbin_cursor_goto_array_element_by_index+0xe0>
     dc0:	add	r0, r4, r0, lsl #4
     dc4:	mov	r1, r5
     dc8:	str	r2, [r0, #-8]
     dcc:	str	r9, [r0, #-4]
     dd0:	mov	r0, r4
     dd4:	bl	0 <coda_cursor_get_bit_size>
     dd8:	add	r9, r9, #1
     ddc:	cmp	r0, #0
     de0:	beq	d90 <coda_ascbin_cursor_goto_array_element_by_index+0x128>
     de4:	ldr	r0, [r4, #4]
     de8:	sub	r0, r0, #1
     dec:	str	r0, [r4, #4]
     df0:	mvn	r0, #0
     df4:	sub	sp, fp, #28
     df8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     dfc:	.word	0x00000158

00000e00 <coda_ascbin_cursor_goto_next_array_element>:
     e00:	push	{r4, r5, r6, r7, fp, lr}
     e04:	add	fp, sp, #16
     e08:	sub	sp, sp, #16
     e0c:	ldr	r1, [r0, #4]
     e10:	mov	r4, r0
     e14:	add	r0, r0, r1, lsl #4
     e18:	ldr	r6, [r0, #-24]	; 0xffffffe8
     e1c:	ldr	r0, [r6]
     e20:	cmp	r0, #99	; 0x63
     e24:	ldr	r0, [pc, #216]	; f04 <coda_ascbin_cursor_goto_next_array_element+0x104>
     e28:	ldrhi	r6, [r6, #4]
     e2c:	ldr	r2, [pc, r0]
     e30:	bl	0 <__aeabi_read_tp>
     e34:	ldr	r2, [r0, r2]
     e38:	sub	r0, r1, #1
     e3c:	add	r1, r4, r0, lsl #4
     e40:	ldr	r7, [r1, #12]
     e44:	cmp	r2, #0
     e48:	add	r5, r7, #1
     e4c:	beq	e88 <coda_ascbin_cursor_goto_next_array_element+0x88>
     e50:	str	r0, [r4, #4]
     e54:	add	r1, sp, #4
     e58:	mov	r0, r4
     e5c:	bl	0 <coda_cursor_get_num_elements>
     e60:	ldr	r1, [r4, #4]
     e64:	cmp	r0, #0
     e68:	add	r1, r1, #1
     e6c:	str	r1, [r4, #4]
     e70:	bne	ef8 <coda_ascbin_cursor_goto_next_array_element+0xf8>
     e74:	ldr	r3, [sp, #4]
     e78:	cmn	r7, #1
     e7c:	blt	ee4 <coda_ascbin_cursor_goto_next_array_element+0xe4>
     e80:	cmp	r5, r3
     e84:	bge	ee4 <coda_ascbin_cursor_goto_next_array_element+0xe4>
     e88:	add	r1, sp, #8
     e8c:	mov	r0, r4
     e90:	bl	0 <coda_cursor_get_bit_size>
     e94:	mov	r1, r0
     e98:	mvn	r0, #0
     e9c:	cmp	r1, #0
     ea0:	beq	eac <coda_ascbin_cursor_goto_next_array_element+0xac>
     ea4:	sub	sp, fp, #16
     ea8:	pop	{r4, r5, r6, r7, fp, pc}
     eac:	ldr	r0, [r4, #4]
     eb0:	ldr	r1, [r6, #40]	; 0x28
     eb4:	ldr	r0, [r4, r0, lsl #4]!
     eb8:	stmdb	r4, {r1, r5}
     ebc:	ldr	r1, [sp, #8]
     ec0:	ldr	r2, [sp, #12]
     ec4:	adds	r0, r0, r1
     ec8:	str	r0, [r4]
     ecc:	ldr	r0, [r4, #4]
     ed0:	adc	r0, r0, r2
     ed4:	str	r0, [r4, #4]
     ed8:	mov	r0, #0
     edc:	sub	sp, fp, #16
     ee0:	pop	{r4, r5, r6, r7, fp, pc}
     ee4:	movw	r1, #0
     ee8:	mvn	r0, #106	; 0x6a
     eec:	mov	r2, r5
     ef0:	movt	r1, #0
     ef4:	bl	0 <coda_set_error>
     ef8:	mvn	r0, #0
     efc:	sub	sp, fp, #16
     f00:	pop	{r4, r5, r6, r7, fp, pc}
     f04:	.word	0x000000d0

00000f08 <coda_ascbin_cursor_goto_attributes>:
     f08:	push	{r4, sl, fp, lr}
     f0c:	add	fp, sp, #8
     f10:	ldr	r1, [r0, #4]
     f14:	mov	r4, r0
     f18:	add	r0, r0, r1, lsl #4
     f1c:	add	r1, r1, #1
     f20:	ldr	r0, [r0, #-8]
     f24:	ldr	r2, [r0]
     f28:	cmp	r2, #99	; 0x63
     f2c:	ldrhi	r0, [r0, #4]
     f30:	ldr	r0, [r0]
     f34:	str	r1, [r4, #4]
     f38:	bl	0 <coda_type_empty_record>
     f3c:	ldr	r1, [r4, #4]
     f40:	mvn	r3, #0
     f44:	str	r3, [r4, r1, lsl #4]!
     f48:	str	r0, [r4, #-8]
     f4c:	mov	r0, #0
     f50:	str	r3, [r4, #-4]
     f54:	str	r3, [r4, #4]
     f58:	pop	{r4, sl, fp, pc}

00000f5c <coda_ascbin_cursor_use_base_type_of_special_type>:
     f5c:	ldr	r1, [r0, #4]
     f60:	sub	r1, r1, #1
     f64:	add	r0, r0, r1, lsl #4
     f68:	ldr	r1, [r0, #8]
     f6c:	ldr	r2, [r1]
     f70:	cmp	r2, #99	; 0x63
     f74:	ldrhi	r1, [r1, #4]
     f78:	ldr	r1, [r1, #44]	; 0x2c
     f7c:	str	r1, [r0, #8]
     f80:	mov	r0, #0
     f84:	bx	lr

00000f88 <coda_ascbin_cursor_get_bit_size>:
     f88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f8c:	add	fp, sp, #28
     f90:	sub	sp, sp, #556	; 0x22c
     f94:	mov	r5, r0
     f98:	ldr	r0, [r0, #4]
     f9c:	mov	r4, r1
     fa0:	add	r0, r5, r0, lsl #4
     fa4:	ldr	sl, [r0, #-8]
     fa8:	ldr	r0, [sl]
     fac:	cmp	r0, #99	; 0x63
     fb0:	ldrhi	sl, [sl, #4]
     fb4:	mov	r6, sl
     fb8:	ldr	r0, [r6, #24]!
     fbc:	ldr	r1, [r6, #4]
     fc0:	cmp	r1, #0
     fc4:	blt	fd4 <coda_ascbin_cursor_get_bit_size+0x4c>
     fc8:	strd	r0, [r4]
     fcc:	mov	r6, #0
     fd0:	b	1344 <coda_ascbin_cursor_get_bit_size+0x3bc>
     fd4:	ldr	r0, [sl, #8]
     fd8:	mvn	r8, #0
     fdc:	cmp	r0, #1
     fe0:	beq	1054 <coda_ascbin_cursor_get_bit_size+0xcc>
     fe4:	cmp	r0, #0
     fe8:	bne	13f0 <coda_ascbin_cursor_get_bit_size+0x468>
     fec:	ldr	r0, [pc, #1052]	; 1410 <coda_ascbin_cursor_get_bit_size+0x488>
     ff0:	ldr	r1, [pc, r0]
     ff4:	bl	0 <__aeabi_read_tp>
     ff8:	ldr	r0, [r0, r1]
     ffc:	cmp	r0, #0
    1000:	ldrne	r0, [sl, #32]
    1004:	cmpne	r0, #0
    1008:	bne	10a4 <coda_ascbin_cursor_get_bit_size+0x11c>
    100c:	ldr	r0, [sl, #68]	; 0x44
    1010:	cmp	r0, #0
    1014:	beq	10d0 <coda_ascbin_cursor_get_bit_size+0x148>
    1018:	add	r6, sp, #32
    101c:	mov	r1, r5
    1020:	mov	r2, #520	; 0x208
    1024:	mov	r0, r6
    1028:	bl	0 <memcpy>
    102c:	mov	r0, r6
    1030:	bl	0 <coda_cursor_goto_available_union_field>
    1034:	cmp	r0, #0
    1038:	bne	1340 <coda_ascbin_cursor_get_bit_size+0x3b8>
    103c:	add	r0, sp, #32
    1040:	mov	r1, r4
    1044:	bl	0 <coda_cursor_get_bit_size>
    1048:	cmp	r0, #0
    104c:	bne	1340 <coda_ascbin_cursor_get_bit_size+0x3b8>
    1050:	b	109c <coda_ascbin_cursor_get_bit_size+0x114>
    1054:	add	r1, sp, #16
    1058:	mov	r0, r5
    105c:	bl	0 <coda_cursor_get_num_elements>
    1060:	cmp	r0, #0
    1064:	bne	1340 <coda_ascbin_cursor_get_bit_size+0x3b8>
    1068:	ldr	r9, [sp, #16]
    106c:	cmp	r9, #0
    1070:	beq	1274 <coda_ascbin_cursor_get_bit_size+0x2ec>
    1074:	ldr	r0, [sl, #40]	; 0x28
    1078:	ldrd	r0, [r0, #24]
    107c:	subs	r2, r8, r0
    1080:	sbcs	r2, r8, r1
    1084:	bge	1284 <coda_ascbin_cursor_get_bit_size+0x2fc>
    1088:	umull	r2, r3, r0, r9
    108c:	asr	r7, r9, #31
    1090:	mla	r0, r0, r7, r3
    1094:	mla	r3, r1, r9, r0
    1098:	strd	r2, [r4]
    109c:	mov	r6, #0
    10a0:	b	1344 <coda_ascbin_cursor_get_bit_size+0x3bc>
    10a4:	mov	r1, r5
    10a8:	mov	r2, r4
    10ac:	bl	0 <coda_expression_eval_integer>
    10b0:	cmp	r0, #0
    10b4:	beq	1350 <coda_ascbin_cursor_get_bit_size+0x3c8>
    10b8:	movw	r0, #0
    10bc:	movt	r0, #0
    10c0:	bl	0 <coda_add_error_message>
    10c4:	mov	r0, r5
    10c8:	bl	0 <coda_cursor_add_to_error_message>
    10cc:	b	1340 <coda_ascbin_cursor_get_bit_size+0x3b8>
    10d0:	ldr	r0, [sl, #48]	; 0x30
    10d4:	mov	r6, #0
    10d8:	cmp	r0, #1
    10dc:	blt	1388 <coda_ascbin_cursor_get_bit_size+0x400>
    10e0:	add	r7, sp, #32
    10e4:	mov	r1, r5
    10e8:	mov	r2, #520	; 0x208
    10ec:	mov	r0, r7
    10f0:	bl	0 <memcpy>
    10f4:	mov	r0, r7
    10f8:	bl	0 <coda_cursor_goto_first_record_field>
    10fc:	cmp	r0, #0
    1100:	bne	1340 <coda_ascbin_cursor_get_bit_size+0x3b8>
    1104:	ldr	r0, [sl, #48]	; 0x30
    1108:	str	r4, [sp, #4]
    110c:	cmp	r0, #1
    1110:	blt	13d4 <coda_ascbin_cursor_get_bit_size+0x44c>
    1114:	mov	r1, #0
    1118:	mov	r7, #0
    111c:	mov	r9, #0
    1120:	add	r4, sp, #32
    1124:	str	r1, [sp, #8]
    1128:	sub	r0, r0, #1
    112c:	str	r8, [sp, #20]
    1130:	str	r8, [sp, #16]
    1134:	cmp	r7, r0
    1138:	bge	1168 <coda_ascbin_cursor_get_bit_size+0x1e0>
    113c:	mov	r0, r4
    1140:	add	r1, sp, #24
    1144:	add	r2, sp, #16
    1148:	bl	658 <get_next_relative_field_bit_offset>
    114c:	cmp	r0, #0
    1150:	bne	1340 <coda_ascbin_cursor_get_bit_size+0x3b8>
    1154:	ldr	r0, [sp, #20]
    1158:	cmn	r0, #1
    115c:	ble	1168 <coda_ascbin_cursor_get_bit_size+0x1e0>
    1160:	ldr	r1, [sp, #16]
    1164:	b	1184 <coda_ascbin_cursor_get_bit_size+0x1fc>
    1168:	mov	r0, r4
    116c:	add	r1, sp, #16
    1170:	bl	0 <coda_cursor_get_bit_size>
    1174:	cmp	r0, #0
    1178:	bne	1340 <coda_ascbin_cursor_get_bit_size+0x3b8>
    117c:	ldr	r1, [sp, #16]
    1180:	ldr	r0, [sp, #20]
    1184:	ldr	r2, [sp, #8]
    1188:	adds	r2, r1, r2
    118c:	adc	r9, r0, r9
    1190:	ldr	r0, [sl, #48]	; 0x30
    1194:	str	r2, [sp, #8]
    1198:	sub	r1, r0, #1
    119c:	cmp	r7, r1
    11a0:	bge	1204 <coda_ascbin_cursor_get_bit_size+0x27c>
    11a4:	mov	r0, #1
    11a8:	add	r7, r7, #1
    11ac:	str	r0, [sp, #12]
    11b0:	ldr	r0, [sl, #52]	; 0x34
    11b4:	ldr	r0, [r0, r7, lsl #2]
    11b8:	ldr	r0, [r0, #20]
    11bc:	cmp	r0, #0
    11c0:	beq	11e4 <coda_ascbin_cursor_get_bit_size+0x25c>
    11c4:	mov	r1, r5
    11c8:	add	r2, sp, #12
    11cc:	bl	0 <coda_expression_eval_bool>
    11d0:	cmp	r0, #0
    11d4:	bne	1340 <coda_ascbin_cursor_get_bit_size+0x3b8>
    11d8:	ldr	r0, [sp, #12]
    11dc:	cmp	r0, #0
    11e0:	beq	1214 <coda_ascbin_cursor_get_bit_size+0x28c>
    11e4:	ldr	r2, [sl, #52]	; 0x34
    11e8:	ldr	r0, [sp, #36]	; 0x24
    11ec:	ldr	r2, [r2, r7, lsl #2]
    11f0:	sub	r1, r0, #1
    11f4:	add	r0, r4, r1, lsl #4
    11f8:	ldr	r2, [r2, #8]
    11fc:	str	r2, [r0, #8]
    1200:	b	122c <coda_ascbin_cursor_get_bit_size+0x2a4>
    1204:	add	r7, r7, #1
    1208:	cmp	r7, r0
    120c:	blt	1128 <coda_ascbin_cursor_get_bit_size+0x1a0>
    1210:	b	13e0 <coda_ascbin_cursor_get_bit_size+0x458>
    1214:	ldr	r0, [sl]
    1218:	bl	0 <coda_no_data_singleton>
    121c:	ldr	r1, [sp, #36]	; 0x24
    1220:	sub	r1, r1, #1
    1224:	add	r2, r4, r1, lsl #4
    1228:	str	r0, [r2, #8]
    122c:	add	r0, r4, r1, lsl #4
    1230:	mov	r2, r5
    1234:	ldr	r3, [sp, #24]
    1238:	ldr	r4, [sp, #28]
    123c:	add	r1, r0, #8
    1240:	str	r7, [r1, #4]
    1244:	ldr	r1, [r5, #4]
    1248:	ldr	r1, [r2, r1, lsl #4]!
    124c:	ldr	r2, [r2, #4]
    1250:	adds	r1, r3, r1
    1254:	str	r1, [r0, #16]
    1258:	adc	r3, r4, r2
    125c:	add	r4, sp, #32
    1260:	str	r3, [r0, #20]
    1264:	ldr	r0, [sl, #48]	; 0x30
    1268:	cmp	r7, r0
    126c:	blt	1128 <coda_ascbin_cursor_get_bit_size+0x1a0>
    1270:	b	13e0 <coda_ascbin_cursor_get_bit_size+0x458>
    1274:	mov	r6, #0
    1278:	str	r6, [r4]
    127c:	str	r6, [r4, #4]
    1280:	b	1344 <coda_ascbin_cursor_get_bit_size+0x3bc>
    1284:	add	r7, sp, #32
    1288:	mov	r1, r5
    128c:	mov	r2, #520	; 0x208
    1290:	str	r4, [sp, #4]
    1294:	mov	r0, r7
    1298:	bl	0 <memcpy>
    129c:	ldr	r1, [sp, #36]	; 0x24
    12a0:	cmp	r9, #1
    12a4:	add	r0, r1, #1
    12a8:	add	r2, r7, r1, lsl #4
    12ac:	str	r0, [sp, #36]	; 0x24
    12b0:	ldr	r6, [r7, r1, lsl #4]
    12b4:	ldr	r3, [r2, #4]
    12b8:	str	r6, [r2, #16]
    12bc:	mov	r6, #0
    12c0:	str	r3, [r2, #20]
    12c4:	blt	13c0 <coda_ascbin_cursor_get_bit_size+0x438>
    12c8:	mov	r5, #0
    12cc:	mov	r8, #0
    12d0:	mov	r9, #0
    12d4:	ldr	r1, [sl, #40]	; 0x28
    12d8:	add	r0, r7, r0, lsl #4
    12dc:	str	r1, [r0, #-8]!
    12e0:	add	r1, sp, #24
    12e4:	orr	r0, r0, #4
    12e8:	str	r5, [r0]
    12ec:	mov	r0, r7
    12f0:	bl	0 <coda_cursor_get_bit_size>
    12f4:	cmp	r0, #0
    12f8:	bne	1340 <coda_ascbin_cursor_get_bit_size+0x3b8>
    12fc:	ldr	r0, [sp, #36]	; 0x24
    1300:	ldr	r2, [sp, #24]
    1304:	ldr	r3, [sp, #28]
    1308:	add	r5, r5, #1
    130c:	ldr	r1, [r7, r0, lsl #4]
    1310:	adds	r1, r1, r2
    1314:	str	r1, [r7, r0, lsl #4]
    1318:	add	r1, r7, r0, lsl #4
    131c:	ldr	r4, [r1, #4]
    1320:	adc	r4, r4, r3
    1324:	adds	r8, r2, r8
    1328:	str	r4, [r1, #4]
    132c:	ldr	r1, [sp, #16]
    1330:	adc	r9, r3, r9
    1334:	cmp	r5, r1
    1338:	blt	12d4 <coda_ascbin_cursor_get_bit_size+0x34c>
    133c:	b	13c8 <coda_ascbin_cursor_get_bit_size+0x440>
    1340:	mvn	r6, #0
    1344:	mov	r0, r6
    1348:	sub	sp, fp, #28
    134c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1350:	ldrd	r2, [r6]
    1354:	subs	r0, r8, #7
    1358:	sbc	r1, r8, #0
    135c:	eor	r1, r3, r1
    1360:	eor	r0, r2, r0
    1364:	orrs	r0, r0, r1
    1368:	ldrd	r0, [r4]
    136c:	bne	1398 <coda_ascbin_cursor_get_bit_size+0x410>
    1370:	lsl	r1, r1, #3
    1374:	lsl	r2, r0, #3
    1378:	orr	r1, r1, r0, lsr #29
    137c:	str	r2, [r4]
    1380:	str	r1, [r4, #4]
    1384:	b	139c <coda_ascbin_cursor_get_bit_size+0x414>
    1388:	str	r4, [sp, #4]
    138c:	mov	r1, #0
    1390:	mov	r9, #0
    1394:	b	13e4 <coda_ascbin_cursor_get_bit_size+0x45c>
    1398:	mov	r2, r0
    139c:	mov	r6, #0
    13a0:	cmn	r1, #1
    13a4:	bgt	1344 <coda_ascbin_cursor_get_bit_size+0x3bc>
    13a8:	movw	r0, #65236	; 0xfed4
    13ac:	movw	r1, #0
    13b0:	movt	r0, #65535	; 0xffff
    13b4:	movt	r1, #0
    13b8:	bl	0 <coda_set_error>
    13bc:	b	10c4 <coda_ascbin_cursor_get_bit_size+0x13c>
    13c0:	mov	r8, #0
    13c4:	mov	r9, #0
    13c8:	ldr	r0, [sp, #4]
    13cc:	strd	r8, [r0]
    13d0:	b	1344 <coda_ascbin_cursor_get_bit_size+0x3bc>
    13d4:	mov	r0, #0
    13d8:	mov	r9, #0
    13dc:	str	r0, [sp, #8]
    13e0:	ldr	r1, [sp, #8]
    13e4:	ldr	r0, [sp, #4]
    13e8:	stm	r0, {r1, r9}
    13ec:	b	1344 <coda_ascbin_cursor_get_bit_size+0x3bc>
    13f0:	movw	r0, #0
    13f4:	movw	r1, #0
    13f8:	movw	r3, #0
    13fc:	mov	r2, #768	; 0x300
    1400:	movt	r0, #0
    1404:	movt	r1, #0
    1408:	movt	r3, #0
    140c:	bl	0 <__assert_fail>
    1410:	.word	0x00000418

00001414 <coda_ascbin_cursor_get_num_elements>:
    1414:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    1418:	add	fp, sp, #24
    141c:	sub	sp, sp, #32
    1420:	mov	r4, r0
    1424:	ldr	r0, [r0, #4]
    1428:	mov	r9, r1
    142c:	add	r0, r4, r0, lsl #4
    1430:	ldr	r7, [r0, #-8]
    1434:	ldr	r0, [r7]
    1438:	cmp	r0, #99	; 0x63
    143c:	ldrhi	r7, [r7, #4]
    1440:	ldr	r0, [r7, #8]
    1444:	cmp	r0, #1
    1448:	beq	145c <coda_ascbin_cursor_get_num_elements+0x48>
    144c:	cmp	r0, #0
    1450:	bne	1530 <coda_ascbin_cursor_get_num_elements+0x11c>
    1454:	ldr	r0, [r7, #48]	; 0x30
    1458:	b	1468 <coda_ascbin_cursor_get_num_elements+0x54>
    145c:	ldr	r0, [r7, #44]	; 0x2c
    1460:	cmn	r0, #1
    1464:	beq	1478 <coda_ascbin_cursor_get_num_elements+0x64>
    1468:	str	r0, [r9]
    146c:	mov	r0, #0
    1470:	sub	sp, fp, #24
    1474:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    1478:	ldr	r1, [r7, #48]	; 0x30
    147c:	mov	r5, #1
    1480:	cmp	r1, #1
    1484:	blt	14dc <coda_ascbin_cursor_get_num_elements+0xc8>
    1488:	mov	r6, #0
    148c:	add	r8, sp, #24
    1490:	add	r2, r7, r6, lsl #2
    1494:	ldr	r0, [r2, #52]	; 0x34
    1498:	cmn	r0, #1
    149c:	bne	14cc <coda_ascbin_cursor_get_num_elements+0xb8>
    14a0:	ldr	r0, [r2, #84]	; 0x54
    14a4:	mov	r1, r4
    14a8:	mov	r2, r8
    14ac:	bl	0 <coda_expression_eval_integer>
    14b0:	cmp	r0, #0
    14b4:	bne	14e4 <coda_ascbin_cursor_get_num_elements+0xd0>
    14b8:	ldr	r1, [sp, #28]
    14bc:	ldr	r0, [sp, #24]
    14c0:	cmn	r1, #1
    14c4:	ble	14f8 <coda_ascbin_cursor_get_num_elements+0xe4>
    14c8:	ldr	r1, [r7, #48]	; 0x30
    14cc:	add	r6, r6, #1
    14d0:	mul	r5, r0, r5
    14d4:	cmp	r6, r1
    14d8:	blt	1490 <coda_ascbin_cursor_get_num_elements+0x7c>
    14dc:	str	r5, [r9]
    14e0:	b	146c <coda_ascbin_cursor_get_num_elements+0x58>
    14e4:	movw	r0, #0
    14e8:	mov	r1, r6
    14ec:	movt	r0, #0
    14f0:	bl	0 <coda_add_error_message>
    14f4:	b	151c <coda_ascbin_cursor_get_num_elements+0x108>
    14f8:	add	r5, sp, #3
    14fc:	mov	r2, r5
    1500:	bl	0 <coda_str64>
    1504:	movw	r0, #65236	; 0xfed4
    1508:	movw	r1, #0
    150c:	mov	r2, r5
    1510:	movt	r0, #65535	; 0xffff
    1514:	movt	r1, #0
    1518:	bl	0 <coda_set_error>
    151c:	mov	r0, r4
    1520:	bl	0 <coda_cursor_add_to_error_message>
    1524:	mvn	r0, #0
    1528:	sub	sp, fp, #24
    152c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    1530:	movw	r0, #0
    1534:	movw	r1, #0
    1538:	movw	r3, #0
    153c:	movw	r2, #835	; 0x343
    1540:	movt	r0, #0
    1544:	movt	r1, #0
    1548:	movt	r3, #0
    154c:	bl	0 <__assert_fail>

00001550 <coda_ascbin_cursor_get_record_field_available_status>:
    1550:	push	{r4, r5, fp, lr}
    1554:	add	fp, sp, #8
    1558:	sub	sp, sp, #8
    155c:	mov	r4, r2
    1560:	mov	r2, r0
    1564:	ldr	r0, [r0, #4]
    1568:	mov	r5, r1
    156c:	add	r0, r2, r0, lsl #4
    1570:	ldr	r0, [r0, #-8]
    1574:	ldr	r1, [r0]
    1578:	cmp	r1, #99	; 0x63
    157c:	ldrhi	r0, [r0, #4]
    1580:	cmp	r5, #0
    1584:	ldr	r3, [r0, #48]	; 0x30
    1588:	cmpge	r3, r5
    158c:	bgt	15a8 <coda_ascbin_cursor_get_record_field_available_status+0x58>
    1590:	movw	r1, #0
    1594:	mvn	r0, #100	; 0x64
    1598:	mov	r2, r5
    159c:	movt	r1, #0
    15a0:	bl	0 <coda_set_error>
    15a4:	b	15c8 <coda_ascbin_cursor_get_record_field_available_status+0x78>
    15a8:	ldr	r1, [r0, #68]	; 0x44
    15ac:	cmp	r1, #0
    15b0:	beq	15d4 <coda_ascbin_cursor_get_record_field_available_status+0x84>
    15b4:	add	r1, sp, #4
    15b8:	mov	r0, r2
    15bc:	bl	0 <coda_cursor_get_available_union_field_index>
    15c0:	cmp	r0, #0
    15c4:	beq	160c <coda_ascbin_cursor_get_record_field_available_status+0xbc>
    15c8:	mvn	r0, #0
    15cc:	sub	sp, fp, #8
    15d0:	pop	{r4, r5, fp, pc}
    15d4:	ldr	r0, [r0, #52]	; 0x34
    15d8:	ldr	r0, [r0, r5, lsl #2]
    15dc:	ldr	r0, [r0, #20]
    15e0:	cmp	r0, #0
    15e4:	beq	1620 <coda_ascbin_cursor_get_record_field_available_status+0xd0>
    15e8:	mov	r1, r2
    15ec:	mov	r2, r4
    15f0:	bl	0 <coda_expression_eval_bool>
    15f4:	mov	r1, r0
    15f8:	mvn	r0, #0
    15fc:	cmp	r1, #0
    1600:	moveq	r0, #0
    1604:	sub	sp, fp, #8
    1608:	pop	{r4, r5, fp, pc}
    160c:	ldr	r0, [sp, #4]
    1610:	sub	r0, r0, r5
    1614:	clz	r0, r0
    1618:	lsr	r0, r0, #5
    161c:	b	1624 <coda_ascbin_cursor_get_record_field_available_status+0xd4>
    1620:	mov	r0, #1
    1624:	str	r0, [r4]
    1628:	mov	r0, #0
    162c:	sub	sp, fp, #8
    1630:	pop	{r4, r5, fp, pc}

00001634 <coda_ascbin_cursor_get_array_dim>:
    1634:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    1638:	add	fp, sp, #24
    163c:	sub	sp, sp, #32
    1640:	mov	r4, r0
    1644:	ldr	r0, [r0, #4]
    1648:	mov	r5, r2
    164c:	add	r0, r4, r0, lsl #4
    1650:	ldr	r7, [r0, #-8]
    1654:	ldr	r0, [r7]
    1658:	cmp	r0, #99	; 0x63
    165c:	ldrhi	r7, [r7, #4]
    1660:	ldr	r0, [r7, #48]	; 0x30
    1664:	str	r0, [r1]
    1668:	ldr	r0, [r7, #48]	; 0x30
    166c:	cmp	r0, #1
    1670:	blt	16d0 <coda_ascbin_cursor_get_array_dim+0x9c>
    1674:	mov	r6, #0
    1678:	add	r8, sp, #24
    167c:	add	r1, r7, r6, lsl #2
    1680:	ldr	r2, [r1, #52]	; 0x34
    1684:	cmn	r2, #1
    1688:	beq	1694 <coda_ascbin_cursor_get_array_dim+0x60>
    168c:	str	r2, [r5, r6, lsl #2]
    1690:	b	16c4 <coda_ascbin_cursor_get_array_dim+0x90>
    1694:	ldr	r0, [r1, #84]	; 0x54
    1698:	mov	r1, r4
    169c:	mov	r2, r8
    16a0:	bl	0 <coda_expression_eval_integer>
    16a4:	cmp	r0, #0
    16a8:	bne	16dc <coda_ascbin_cursor_get_array_dim+0xa8>
    16ac:	ldr	r1, [sp, #28]
    16b0:	ldr	r0, [sp, #24]
    16b4:	cmn	r1, #1
    16b8:	ble	16f0 <coda_ascbin_cursor_get_array_dim+0xbc>
    16bc:	str	r0, [r5, r6, lsl #2]
    16c0:	ldr	r0, [r7, #48]	; 0x30
    16c4:	add	r6, r6, #1
    16c8:	cmp	r6, r0
    16cc:	blt	167c <coda_ascbin_cursor_get_array_dim+0x48>
    16d0:	mov	r0, #0
    16d4:	sub	sp, fp, #24
    16d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    16dc:	movw	r0, #0
    16e0:	mov	r1, r6
    16e4:	movt	r0, #0
    16e8:	bl	0 <coda_add_error_message>
    16ec:	b	1714 <coda_ascbin_cursor_get_array_dim+0xe0>
    16f0:	add	r5, sp, #3
    16f4:	mov	r2, r5
    16f8:	bl	0 <coda_str64>
    16fc:	movw	r0, #65236	; 0xfed4
    1700:	movw	r1, #0
    1704:	mov	r2, r5
    1708:	movt	r0, #65535	; 0xffff
    170c:	movt	r1, #0
    1710:	bl	0 <coda_set_error>
    1714:	mov	r0, r4
    1718:	bl	0 <coda_cursor_add_to_error_message>
    171c:	mvn	r0, #0
    1720:	sub	sp, fp, #24
    1724:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
