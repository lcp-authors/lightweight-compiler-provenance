
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/json_test/CMakeFiles/json_test_uq.dir/__/__/src/runtime/verifier.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <flatcc_verify_error_string>:
       0:	sub	sp, sp, #12
       4:	str	r0, [sp, #4]
       8:	ldr	r0, [sp, #4]
       c:	cmp	r0, #36	; 0x24
      10:	str	r0, [sp]
      14:	bhi	30c <flatcc_verify_error_string+0x30c>
      18:	add	r0, pc, #8
      1c:	ldr	r1, [sp]
      20:	ldr	r0, [r0, r1, lsl #2]
      24:	mov	pc, r0
      28:	.word	0x000000bc
      2c:	.word	0x000000cc
      30:	.word	0x000000dc
      34:	.word	0x000000ec
      38:	.word	0x000000fc
      3c:	.word	0x0000010c
      40:	.word	0x0000011c
      44:	.word	0x0000012c
      48:	.word	0x0000013c
      4c:	.word	0x0000014c
      50:	.word	0x0000015c
      54:	.word	0x0000016c
      58:	.word	0x0000017c
      5c:	.word	0x0000018c
      60:	.word	0x0000019c
      64:	.word	0x000001ac
      68:	.word	0x000001bc
      6c:	.word	0x000001cc
      70:	.word	0x000001dc
      74:	.word	0x000001ec
      78:	.word	0x000001fc
      7c:	.word	0x0000020c
      80:	.word	0x0000021c
      84:	.word	0x0000022c
      88:	.word	0x0000023c
      8c:	.word	0x0000024c
      90:	.word	0x0000025c
      94:	.word	0x0000026c
      98:	.word	0x0000027c
      9c:	.word	0x0000028c
      a0:	.word	0x0000029c
      a4:	.word	0x000002ac
      a8:	.word	0x000002bc
      ac:	.word	0x000002cc
      b0:	.word	0x000002dc
      b4:	.word	0x000002ec
      b8:	.word	0x000002fc
      bc:	movw	r0, #0
      c0:	movt	r0, #0
      c4:	str	r0, [sp, #8]
      c8:	b	318 <flatcc_verify_error_string+0x318>
      cc:	movw	r0, #0
      d0:	movt	r0, #0
      d4:	str	r0, [sp, #8]
      d8:	b	318 <flatcc_verify_error_string+0x318>
      dc:	movw	r0, #0
      e0:	movt	r0, #0
      e4:	str	r0, [sp, #8]
      e8:	b	318 <flatcc_verify_error_string+0x318>
      ec:	movw	r0, #0
      f0:	movt	r0, #0
      f4:	str	r0, [sp, #8]
      f8:	b	318 <flatcc_verify_error_string+0x318>
      fc:	movw	r0, #0
     100:	movt	r0, #0
     104:	str	r0, [sp, #8]
     108:	b	318 <flatcc_verify_error_string+0x318>
     10c:	movw	r0, #0
     110:	movt	r0, #0
     114:	str	r0, [sp, #8]
     118:	b	318 <flatcc_verify_error_string+0x318>
     11c:	movw	r0, #0
     120:	movt	r0, #0
     124:	str	r0, [sp, #8]
     128:	b	318 <flatcc_verify_error_string+0x318>
     12c:	movw	r0, #0
     130:	movt	r0, #0
     134:	str	r0, [sp, #8]
     138:	b	318 <flatcc_verify_error_string+0x318>
     13c:	movw	r0, #0
     140:	movt	r0, #0
     144:	str	r0, [sp, #8]
     148:	b	318 <flatcc_verify_error_string+0x318>
     14c:	movw	r0, #0
     150:	movt	r0, #0
     154:	str	r0, [sp, #8]
     158:	b	318 <flatcc_verify_error_string+0x318>
     15c:	movw	r0, #0
     160:	movt	r0, #0
     164:	str	r0, [sp, #8]
     168:	b	318 <flatcc_verify_error_string+0x318>
     16c:	movw	r0, #0
     170:	movt	r0, #0
     174:	str	r0, [sp, #8]
     178:	b	318 <flatcc_verify_error_string+0x318>
     17c:	movw	r0, #0
     180:	movt	r0, #0
     184:	str	r0, [sp, #8]
     188:	b	318 <flatcc_verify_error_string+0x318>
     18c:	movw	r0, #0
     190:	movt	r0, #0
     194:	str	r0, [sp, #8]
     198:	b	318 <flatcc_verify_error_string+0x318>
     19c:	movw	r0, #0
     1a0:	movt	r0, #0
     1a4:	str	r0, [sp, #8]
     1a8:	b	318 <flatcc_verify_error_string+0x318>
     1ac:	movw	r0, #0
     1b0:	movt	r0, #0
     1b4:	str	r0, [sp, #8]
     1b8:	b	318 <flatcc_verify_error_string+0x318>
     1bc:	movw	r0, #0
     1c0:	movt	r0, #0
     1c4:	str	r0, [sp, #8]
     1c8:	b	318 <flatcc_verify_error_string+0x318>
     1cc:	movw	r0, #0
     1d0:	movt	r0, #0
     1d4:	str	r0, [sp, #8]
     1d8:	b	318 <flatcc_verify_error_string+0x318>
     1dc:	movw	r0, #0
     1e0:	movt	r0, #0
     1e4:	str	r0, [sp, #8]
     1e8:	b	318 <flatcc_verify_error_string+0x318>
     1ec:	movw	r0, #0
     1f0:	movt	r0, #0
     1f4:	str	r0, [sp, #8]
     1f8:	b	318 <flatcc_verify_error_string+0x318>
     1fc:	movw	r0, #0
     200:	movt	r0, #0
     204:	str	r0, [sp, #8]
     208:	b	318 <flatcc_verify_error_string+0x318>
     20c:	movw	r0, #0
     210:	movt	r0, #0
     214:	str	r0, [sp, #8]
     218:	b	318 <flatcc_verify_error_string+0x318>
     21c:	movw	r0, #0
     220:	movt	r0, #0
     224:	str	r0, [sp, #8]
     228:	b	318 <flatcc_verify_error_string+0x318>
     22c:	movw	r0, #0
     230:	movt	r0, #0
     234:	str	r0, [sp, #8]
     238:	b	318 <flatcc_verify_error_string+0x318>
     23c:	movw	r0, #0
     240:	movt	r0, #0
     244:	str	r0, [sp, #8]
     248:	b	318 <flatcc_verify_error_string+0x318>
     24c:	movw	r0, #0
     250:	movt	r0, #0
     254:	str	r0, [sp, #8]
     258:	b	318 <flatcc_verify_error_string+0x318>
     25c:	movw	r0, #0
     260:	movt	r0, #0
     264:	str	r0, [sp, #8]
     268:	b	318 <flatcc_verify_error_string+0x318>
     26c:	movw	r0, #0
     270:	movt	r0, #0
     274:	str	r0, [sp, #8]
     278:	b	318 <flatcc_verify_error_string+0x318>
     27c:	movw	r0, #0
     280:	movt	r0, #0
     284:	str	r0, [sp, #8]
     288:	b	318 <flatcc_verify_error_string+0x318>
     28c:	movw	r0, #0
     290:	movt	r0, #0
     294:	str	r0, [sp, #8]
     298:	b	318 <flatcc_verify_error_string+0x318>
     29c:	movw	r0, #0
     2a0:	movt	r0, #0
     2a4:	str	r0, [sp, #8]
     2a8:	b	318 <flatcc_verify_error_string+0x318>
     2ac:	movw	r0, #0
     2b0:	movt	r0, #0
     2b4:	str	r0, [sp, #8]
     2b8:	b	318 <flatcc_verify_error_string+0x318>
     2bc:	movw	r0, #0
     2c0:	movt	r0, #0
     2c4:	str	r0, [sp, #8]
     2c8:	b	318 <flatcc_verify_error_string+0x318>
     2cc:	movw	r0, #0
     2d0:	movt	r0, #0
     2d4:	str	r0, [sp, #8]
     2d8:	b	318 <flatcc_verify_error_string+0x318>
     2dc:	movw	r0, #0
     2e0:	movt	r0, #0
     2e4:	str	r0, [sp, #8]
     2e8:	b	318 <flatcc_verify_error_string+0x318>
     2ec:	movw	r0, #0
     2f0:	movt	r0, #0
     2f4:	str	r0, [sp, #8]
     2f8:	b	318 <flatcc_verify_error_string+0x318>
     2fc:	movw	r0, #0
     300:	movt	r0, #0
     304:	str	r0, [sp, #8]
     308:	b	318 <flatcc_verify_error_string+0x318>
     30c:	movw	r0, #0
     310:	movt	r0, #0
     314:	str	r0, [sp, #8]
     318:	ldr	r0, [sp, #8]
     31c:	add	sp, sp, #12
     320:	bx	lr

00000324 <flatcc_verify_field>:
     324:	push	{fp, lr}
     328:	mov	fp, sp
     32c:	sub	sp, sp, #24
     330:	str	r0, [fp, #-8]
     334:	strh	r1, [fp, #-10]
     338:	str	r2, [sp, #8]
     33c:	strh	r3, [sp, #6]
     340:	ldr	r0, [fp, #-8]
     344:	ldrh	r1, [fp, #-10]
     348:	ldr	r3, [sp, #8]
     34c:	uxth	r1, r1
     350:	movw	r2, #0
     354:	ldrh	ip, [sp, #6]
     358:	str	ip, [sp]
     35c:	bl	3a4 <verify_field>
     360:	cmp	r0, #0
     364:	beq	390 <flatcc_verify_field+0x6c>
     368:	ldr	r0, [fp, #-8]
     36c:	ldrh	r1, [fp, #-10]
     370:	ldr	r3, [sp, #8]
     374:	uxth	r1, r1
     378:	movw	r2, #0
     37c:	ldrh	ip, [sp, #6]
     380:	str	ip, [sp]
     384:	bl	3a4 <verify_field>
     388:	str	r0, [fp, #-4]
     38c:	b	398 <flatcc_verify_field+0x74>
     390:	movw	r0, #0
     394:	str	r0, [fp, #-4]
     398:	ldr	r0, [fp, #-4]
     39c:	mov	sp, fp
     3a0:	pop	{fp, pc}

000003a4 <verify_field>:
     3a4:	push	{fp, lr}
     3a8:	mov	fp, sp
     3ac:	sub	sp, sp, #56	; 0x38
     3b0:	ldr	ip, [fp, #8]
     3b4:	str	r0, [fp, #-8]
     3b8:	strh	r1, [fp, #-10]
     3bc:	str	r2, [fp, #-16]
     3c0:	str	r3, [fp, #-20]	; 0xffffffec
     3c4:	strh	ip, [fp, #-22]	; 0xffffffea
     3c8:	ldr	r0, [fp, #-8]
     3cc:	ldr	r0, [r0]
     3d0:	str	r0, [sp, #16]
     3d4:	ldr	r0, [fp, #-8]
     3d8:	ldrh	r1, [fp, #-10]
     3dc:	bl	221c <read_vt_entry>
     3e0:	strh	r0, [sp, #22]
     3e4:	ldrsh	r0, [sp, #22]
     3e8:	cmp	r0, #0
     3ec:	bne	43c <verify_field+0x98>
     3f0:	b	3f4 <verify_field+0x50>
     3f4:	ldr	r0, [fp, #-16]
     3f8:	cmp	r0, #0
     3fc:	movw	r0, #0
     400:	movne	r0, #1
     404:	mvn	r1, #0
     408:	eor	r0, r0, r1
     40c:	and	r0, r0, #1
     410:	str	r0, [sp, #12]
     414:	ldr	r0, [sp, #12]
     418:	cmp	r0, #0
     41c:	bne	42c <verify_field+0x88>
     420:	movw	r0, #4
     424:	str	r0, [fp, #-4]
     428:	b	524 <verify_field+0x180>
     42c:	b	430 <verify_field+0x8c>
     430:	movw	r0, #0
     434:	str	r0, [fp, #-4]
     438:	b	524 <verify_field+0x180>
     43c:	ldrh	r0, [sp, #22]
     440:	str	r0, [sp, #28]
     444:	ldr	r0, [sp, #28]
     448:	ldr	r1, [fp, #-20]	; 0xffffffec
     44c:	add	r0, r0, r1
     450:	str	r0, [sp, #24]
     454:	ldr	r0, [sp, #24]
     458:	ldr	r1, [fp, #-8]
     45c:	ldrh	r1, [r1, #20]
     460:	cmp	r0, r1
     464:	movw	r0, #0
     468:	movls	r0, #1
     46c:	and	r0, r0, #1
     470:	str	r0, [sp, #8]
     474:	ldr	r0, [sp, #8]
     478:	cmp	r0, #0
     47c:	bne	48c <verify_field+0xe8>
     480:	movw	r0, #13
     484:	str	r0, [fp, #-4]
     488:	b	524 <verify_field+0x180>
     48c:	b	490 <verify_field+0xec>
     490:	b	494 <verify_field+0xf0>
     494:	movw	r0, #1
     498:	str	r0, [sp, #4]
     49c:	ldr	r0, [sp, #4]
     4a0:	cmp	r0, #0
     4a4:	bne	4b4 <verify_field+0x110>
     4a8:	movw	r0, #14
     4ac:	str	r0, [fp, #-4]
     4b0:	b	524 <verify_field+0x180>
     4b4:	b	4b8 <verify_field+0x114>
     4b8:	ldr	r0, [fp, #-8]
     4bc:	ldr	r0, [r0, #16]
     4c0:	ldr	r1, [sp, #16]
     4c4:	add	r0, r0, r1
     4c8:	ldr	r1, [sp, #28]
     4cc:	add	r0, r1, r0
     4d0:	str	r0, [sp, #28]
     4d4:	ldr	r0, [sp, #28]
     4d8:	ldrh	r1, [fp, #-22]	; 0xffffffea
     4dc:	sub	r1, r1, #1
     4e0:	and	r0, r0, r1
     4e4:	cmp	r0, #0
     4e8:	movw	r0, #0
     4ec:	movne	r0, #1
     4f0:	mvn	r1, #0
     4f4:	eor	r0, r0, r1
     4f8:	and	r0, r0, #1
     4fc:	str	r0, [sp]
     500:	ldr	r0, [sp]
     504:	cmp	r0, #0
     508:	bne	518 <verify_field+0x174>
     50c:	movw	r0, #12
     510:	str	r0, [fp, #-4]
     514:	b	524 <verify_field+0x180>
     518:	b	51c <verify_field+0x178>
     51c:	movw	r0, #0
     520:	str	r0, [fp, #-4]
     524:	ldr	r0, [fp, #-4]
     528:	mov	sp, fp
     52c:	pop	{fp, pc}

00000530 <flatcc_verify_string_field>:
     530:	push	{fp, lr}
     534:	mov	fp, sp
     538:	sub	sp, sp, #40	; 0x28
     53c:	str	r0, [fp, #-8]
     540:	strh	r1, [fp, #-10]
     544:	str	r2, [fp, #-16]
     548:	ldr	r0, [fp, #-8]
     54c:	ldrh	r1, [fp, #-10]
     550:	ldr	r2, [fp, #-16]
     554:	uxth	r1, r1
     558:	add	r3, sp, #20
     55c:	bl	5f0 <get_offset_field>
     560:	str	r0, [sp, #16]
     564:	ldr	r0, [sp, #16]
     568:	cmp	r0, #0
     56c:	bne	57c <flatcc_verify_string_field+0x4c>
     570:	ldr	r0, [sp, #20]
     574:	cmp	r0, #0
     578:	bne	588 <flatcc_verify_string_field+0x58>
     57c:	ldr	r0, [sp, #16]
     580:	str	r0, [fp, #-4]
     584:	b	5e4 <flatcc_verify_string_field+0xb4>
     588:	b	58c <flatcc_verify_string_field+0x5c>
     58c:	ldr	r0, [fp, #-8]
     590:	ldr	r0, [r0]
     594:	ldr	r1, [fp, #-8]
     598:	ldr	r1, [r1, #4]
     59c:	ldr	r2, [sp, #20]
     5a0:	ldr	r3, [fp, #-8]
     5a4:	ldr	r3, [r3]
     5a8:	ldr	ip, [sp, #20]
     5ac:	str	r0, [sp, #12]
     5b0:	mov	r0, r3
     5b4:	str	r1, [sp, #8]
     5b8:	mov	r1, ip
     5bc:	str	r2, [sp, #4]
     5c0:	bl	860 <read_uoffset>
     5c4:	ldr	r1, [sp, #12]
     5c8:	str	r0, [sp]
     5cc:	mov	r0, r1
     5d0:	ldr	r1, [sp, #8]
     5d4:	ldr	r2, [sp, #4]
     5d8:	ldr	r3, [sp]
     5dc:	bl	744 <verify_string>
     5e0:	str	r0, [fp, #-4]
     5e4:	ldr	r0, [fp, #-4]
     5e8:	mov	sp, fp
     5ec:	pop	{fp, pc}

000005f0 <get_offset_field>:
     5f0:	push	{fp, lr}
     5f4:	mov	fp, sp
     5f8:	sub	sp, sp, #48	; 0x30
     5fc:	str	r0, [fp, #-8]
     600:	strh	r1, [fp, #-10]
     604:	str	r2, [fp, #-16]
     608:	str	r3, [fp, #-20]	; 0xffffffec
     60c:	ldr	r0, [fp, #-8]
     610:	ldrh	r1, [fp, #-10]
     614:	bl	221c <read_vt_entry>
     618:	strh	r0, [sp, #18]
     61c:	ldrsh	r0, [sp, #18]
     620:	cmp	r0, #0
     624:	bne	658 <get_offset_field+0x68>
     628:	ldr	r0, [fp, #-20]	; 0xffffffec
     62c:	movw	r1, #0
     630:	str	r1, [r0]
     634:	ldr	r0, [fp, #-16]
     638:	cmp	r0, #0
     63c:	beq	64c <get_offset_field+0x5c>
     640:	movw	r0, #4
     644:	str	r0, [fp, #-4]
     648:	b	738 <get_offset_field+0x148>
     64c:	movw	r0, #0
     650:	str	r0, [fp, #-4]
     654:	b	738 <get_offset_field+0x148>
     658:	ldrh	r0, [sp, #18]
     65c:	str	r0, [sp, #24]
     660:	ldr	r0, [sp, #24]
     664:	add	r0, r0, #4
     668:	str	r0, [sp, #20]
     66c:	ldr	r0, [sp, #20]
     670:	ldr	r1, [fp, #-8]
     674:	ldrh	r1, [r1, #20]
     678:	cmp	r0, r1
     67c:	movw	r0, #0
     680:	movls	r0, #1
     684:	and	r0, r0, #1
     688:	str	r0, [sp, #12]
     68c:	ldr	r0, [sp, #12]
     690:	cmp	r0, #0
     694:	bne	6a4 <get_offset_field+0xb4>
     698:	movw	r0, #13
     69c:	str	r0, [fp, #-4]
     6a0:	b	738 <get_offset_field+0x148>
     6a4:	b	6a8 <get_offset_field+0xb8>
     6a8:	b	6ac <get_offset_field+0xbc>
     6ac:	movw	r0, #1
     6b0:	str	r0, [sp, #8]
     6b4:	ldr	r0, [sp, #8]
     6b8:	cmp	r0, #0
     6bc:	bne	6cc <get_offset_field+0xdc>
     6c0:	movw	r0, #14
     6c4:	str	r0, [fp, #-4]
     6c8:	b	738 <get_offset_field+0x148>
     6cc:	b	6d0 <get_offset_field+0xe0>
     6d0:	ldr	r0, [fp, #-8]
     6d4:	ldr	r0, [r0, #16]
     6d8:	ldr	r1, [sp, #24]
     6dc:	add	r0, r1, r0
     6e0:	str	r0, [sp, #24]
     6e4:	ldr	r0, [sp, #24]
     6e8:	and	r0, r0, #3
     6ec:	cmp	r0, #0
     6f0:	movw	r0, #0
     6f4:	movne	r0, #1
     6f8:	mvn	r1, #0
     6fc:	eor	r0, r0, r1
     700:	and	r0, r0, #1
     704:	str	r0, [sp, #4]
     708:	ldr	r0, [sp, #4]
     70c:	cmp	r0, #0
     710:	bne	720 <get_offset_field+0x130>
     714:	movw	r0, #12
     718:	str	r0, [fp, #-4]
     71c:	b	738 <get_offset_field+0x148>
     720:	b	724 <get_offset_field+0x134>
     724:	ldr	r0, [sp, #24]
     728:	ldr	r1, [fp, #-20]	; 0xffffffec
     72c:	str	r0, [r1]
     730:	movw	r0, #0
     734:	str	r0, [fp, #-4]
     738:	ldr	r0, [fp, #-4]
     73c:	mov	sp, fp
     740:	pop	{fp, pc}

00000744 <verify_string>:
     744:	push	{fp, lr}
     748:	mov	fp, sp
     74c:	sub	sp, sp, #40	; 0x28
     750:	str	r0, [fp, #-8]
     754:	str	r1, [fp, #-12]
     758:	str	r2, [fp, #-16]
     75c:	str	r3, [sp, #20]
     760:	ldr	r0, [fp, #-12]
     764:	ldr	r1, [fp, #-16]
     768:	ldr	r2, [sp, #20]
     76c:	bl	27f0 <check_header>
     770:	str	r0, [sp, #12]
     774:	ldr	r0, [sp, #12]
     778:	cmp	r0, #0
     77c:	bne	78c <verify_string+0x48>
     780:	movw	r0, #17
     784:	str	r0, [fp, #-4]
     788:	b	854 <verify_string+0x110>
     78c:	b	790 <verify_string+0x4c>
     790:	ldr	r0, [sp, #20]
     794:	ldr	r1, [fp, #-16]
     798:	add	r0, r1, r0
     79c:	str	r0, [fp, #-16]
     7a0:	ldr	r0, [fp, #-8]
     7a4:	ldr	r1, [fp, #-16]
     7a8:	bl	860 <read_uoffset>
     7ac:	str	r0, [sp, #16]
     7b0:	ldr	r0, [fp, #-16]
     7b4:	add	r0, r0, #4
     7b8:	str	r0, [fp, #-16]
     7bc:	ldr	r0, [fp, #-12]
     7c0:	ldr	r1, [fp, #-16]
     7c4:	sub	r0, r0, r1
     7c8:	ldr	r1, [sp, #16]
     7cc:	add	r1, r1, #1
     7d0:	cmp	r0, r1
     7d4:	movw	r0, #0
     7d8:	movcs	r0, #1
     7dc:	and	r0, r0, #1
     7e0:	str	r0, [sp, #8]
     7e4:	ldr	r0, [sp, #8]
     7e8:	cmp	r0, #0
     7ec:	bne	7fc <verify_string+0xb8>
     7f0:	movw	r0, #8
     7f4:	str	r0, [fp, #-4]
     7f8:	b	854 <verify_string+0x110>
     7fc:	b	800 <verify_string+0xbc>
     800:	b	804 <verify_string+0xc0>
     804:	ldr	r0, [fp, #-8]
     808:	ldr	r1, [fp, #-16]
     80c:	add	r0, r0, r1
     810:	ldr	r1, [sp, #16]
     814:	add	r0, r0, r1
     818:	ldrb	r0, [r0]
     81c:	cmp	r0, #0
     820:	movw	r0, #0
     824:	moveq	r0, #1
     828:	and	r0, r0, #1
     82c:	str	r0, [sp, #4]
     830:	ldr	r0, [sp, #4]
     834:	cmp	r0, #0
     838:	bne	848 <verify_string+0x104>
     83c:	movw	r0, #7
     840:	str	r0, [fp, #-4]
     844:	b	854 <verify_string+0x110>
     848:	b	84c <verify_string+0x108>
     84c:	movw	r0, #0
     850:	str	r0, [fp, #-4]
     854:	ldr	r0, [fp, #-4]
     858:	mov	sp, fp
     85c:	pop	{fp, pc}

00000860 <read_uoffset>:
     860:	push	{fp, lr}
     864:	mov	fp, sp
     868:	sub	sp, sp, #8
     86c:	str	r0, [sp, #4]
     870:	str	r1, [sp]
     874:	ldr	r0, [sp, #4]
     878:	ldr	r1, [sp]
     87c:	add	r0, r0, r1
     880:	bl	2874 <__flatbuffers_uoffset_read_from_pe>
     884:	mov	sp, fp
     888:	pop	{fp, pc}

0000088c <flatcc_verify_vector_field>:
     88c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
     890:	add	fp, sp, #24
     894:	sub	sp, sp, #72	; 0x48
     898:	ldr	ip, [fp, #12]
     89c:	ldr	lr, [fp, #8]
     8a0:	str	r0, [fp, #-32]	; 0xffffffe0
     8a4:	strh	r1, [fp, #-34]	; 0xffffffde
     8a8:	str	r2, [fp, #-40]	; 0xffffffd8
     8ac:	str	r3, [fp, #-44]	; 0xffffffd4
     8b0:	strh	lr, [fp, #-46]	; 0xffffffd2
     8b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     8b8:	ldrh	r1, [fp, #-34]	; 0xffffffde
     8bc:	ldr	r2, [fp, #-40]	; 0xffffffd8
     8c0:	uxth	r1, r1
     8c4:	add	r3, sp, #44	; 0x2c
     8c8:	bl	5f0 <get_offset_field>
     8cc:	str	r0, [sp, #40]	; 0x28
     8d0:	ldr	r0, [sp, #40]	; 0x28
     8d4:	cmp	r0, #0
     8d8:	bne	8e8 <flatcc_verify_vector_field+0x5c>
     8dc:	ldr	r0, [sp, #44]	; 0x2c
     8e0:	cmp	r0, #0
     8e4:	bne	8f4 <flatcc_verify_vector_field+0x68>
     8e8:	ldr	r0, [sp, #40]	; 0x28
     8ec:	str	r0, [fp, #-28]	; 0xffffffe4
     8f0:	b	990 <flatcc_verify_vector_field+0x104>
     8f4:	b	8f8 <flatcc_verify_vector_field+0x6c>
     8f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
     8fc:	ldr	r0, [r0]
     900:	ldr	r1, [fp, #-32]	; 0xffffffe0
     904:	ldr	r1, [r1, #4]
     908:	ldr	r2, [sp, #44]	; 0x2c
     90c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     910:	ldr	r3, [r3]
     914:	ldr	ip, [sp, #44]	; 0x2c
     918:	str	r0, [sp, #36]	; 0x24
     91c:	mov	r0, r3
     920:	str	r1, [sp, #32]
     924:	mov	r1, ip
     928:	str	r2, [sp, #28]
     92c:	bl	860 <read_uoffset>
     930:	ldr	r1, [fp, #-44]	; 0xffffffd4
     934:	ldrh	r2, [fp, #-46]	; 0xffffffd2
     938:	ldr	r3, [fp, #12]
     93c:	ldr	ip, [sp, #36]	; 0x24
     940:	str	r0, [sp, #24]
     944:	mov	r0, ip
     948:	ldr	lr, [sp, #32]
     94c:	str	r1, [sp, #20]
     950:	mov	r1, lr
     954:	ldr	r4, [sp, #28]
     958:	str	r2, [sp, #16]
     95c:	mov	r2, r4
     960:	ldr	r5, [sp, #24]
     964:	str	r3, [sp, #12]
     968:	mov	r3, r5
     96c:	ldr	r6, [sp, #20]
     970:	str	r6, [sp]
     974:	ldr	r7, [sp, #16]
     978:	uxth	r8, r7
     97c:	str	r8, [sp, #4]
     980:	ldr	r8, [sp, #12]
     984:	str	r8, [sp, #8]
     988:	bl	99c <verify_vector>
     98c:	str	r0, [fp, #-28]	; 0xffffffe4
     990:	ldr	r0, [fp, #-28]	; 0xffffffe4
     994:	sub	sp, fp, #24
     998:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0000099c <verify_vector>:
     99c:	push	{r4, sl, fp, lr}
     9a0:	add	fp, sp, #8
     9a4:	sub	sp, sp, #40	; 0x28
     9a8:	ldr	ip, [fp, #16]
     9ac:	ldr	lr, [fp, #12]
     9b0:	ldr	r4, [fp, #8]
     9b4:	str	r0, [fp, #-16]
     9b8:	str	r1, [fp, #-20]	; 0xffffffec
     9bc:	str	r2, [sp, #24]
     9c0:	str	r3, [sp, #20]
     9c4:	strh	lr, [sp, #18]
     9c8:	ldr	r0, [fp, #-20]	; 0xffffffec
     9cc:	ldr	r1, [sp, #24]
     9d0:	ldr	r2, [sp, #20]
     9d4:	ldrh	r3, [sp, #18]
     9d8:	bl	28ac <check_aligned_header>
     9dc:	str	r0, [sp, #8]
     9e0:	ldr	r0, [sp, #8]
     9e4:	cmp	r0, #0
     9e8:	bne	9f8 <verify_vector+0x5c>
     9ec:	movw	r0, #16
     9f0:	str	r0, [fp, #-12]
     9f4:	b	ab4 <verify_vector+0x118>
     9f8:	b	9fc <verify_vector+0x60>
     9fc:	ldr	r0, [sp, #20]
     a00:	ldr	r1, [sp, #24]
     a04:	add	r0, r1, r0
     a08:	str	r0, [sp, #24]
     a0c:	ldr	r0, [fp, #-16]
     a10:	ldr	r1, [sp, #24]
     a14:	bl	860 <read_uoffset>
     a18:	str	r0, [sp, #12]
     a1c:	ldr	r0, [sp, #24]
     a20:	add	r0, r0, #4
     a24:	str	r0, [sp, #24]
     a28:	ldr	r0, [sp, #12]
     a2c:	ldr	r1, [fp, #16]
     a30:	cmp	r0, r1
     a34:	movw	r0, #0
     a38:	movls	r0, #1
     a3c:	and	r0, r0, #1
     a40:	str	r0, [sp, #4]
     a44:	ldr	r0, [sp, #4]
     a48:	cmp	r0, #0
     a4c:	bne	a5c <verify_vector+0xc0>
     a50:	movw	r0, #25
     a54:	str	r0, [fp, #-12]
     a58:	b	ab4 <verify_vector+0x118>
     a5c:	b	a60 <verify_vector+0xc4>
     a60:	b	a64 <verify_vector+0xc8>
     a64:	ldr	r0, [fp, #-20]	; 0xffffffec
     a68:	ldr	r1, [sp, #24]
     a6c:	sub	r0, r0, r1
     a70:	ldr	r1, [sp, #12]
     a74:	ldr	r2, [fp, #8]
     a78:	mul	r1, r1, r2
     a7c:	cmp	r0, r1
     a80:	movw	r0, #0
     a84:	movcs	r0, #1
     a88:	and	r0, r0, #1
     a8c:	str	r0, [sp]
     a90:	ldr	r0, [sp]
     a94:	cmp	r0, #0
     a98:	bne	aa8 <verify_vector+0x10c>
     a9c:	movw	r0, #26
     aa0:	str	r0, [fp, #-12]
     aa4:	b	ab4 <verify_vector+0x118>
     aa8:	b	aac <verify_vector+0x110>
     aac:	movw	r0, #0
     ab0:	str	r0, [fp, #-12]
     ab4:	ldr	r0, [fp, #-12]
     ab8:	sub	sp, fp, #8
     abc:	pop	{r4, sl, fp, pc}

00000ac0 <flatcc_verify_string_vector_field>:
     ac0:	push	{fp, lr}
     ac4:	mov	fp, sp
     ac8:	sub	sp, sp, #40	; 0x28
     acc:	str	r0, [fp, #-8]
     ad0:	strh	r1, [fp, #-10]
     ad4:	str	r2, [fp, #-16]
     ad8:	ldr	r0, [fp, #-8]
     adc:	ldrh	r1, [fp, #-10]
     ae0:	ldr	r2, [fp, #-16]
     ae4:	uxth	r1, r1
     ae8:	add	r3, sp, #20
     aec:	bl	5f0 <get_offset_field>
     af0:	str	r0, [sp, #16]
     af4:	ldr	r0, [sp, #16]
     af8:	cmp	r0, #0
     afc:	bne	b0c <flatcc_verify_string_vector_field+0x4c>
     b00:	ldr	r0, [sp, #20]
     b04:	cmp	r0, #0
     b08:	bne	b18 <flatcc_verify_string_vector_field+0x58>
     b0c:	ldr	r0, [sp, #16]
     b10:	str	r0, [fp, #-4]
     b14:	b	b74 <flatcc_verify_string_vector_field+0xb4>
     b18:	b	b1c <flatcc_verify_string_vector_field+0x5c>
     b1c:	ldr	r0, [fp, #-8]
     b20:	ldr	r0, [r0]
     b24:	ldr	r1, [fp, #-8]
     b28:	ldr	r1, [r1, #4]
     b2c:	ldr	r2, [sp, #20]
     b30:	ldr	r3, [fp, #-8]
     b34:	ldr	r3, [r3]
     b38:	ldr	ip, [sp, #20]
     b3c:	str	r0, [sp, #12]
     b40:	mov	r0, r3
     b44:	str	r1, [sp, #8]
     b48:	mov	r1, ip
     b4c:	str	r2, [sp, #4]
     b50:	bl	860 <read_uoffset>
     b54:	ldr	r1, [sp, #12]
     b58:	str	r0, [sp]
     b5c:	mov	r0, r1
     b60:	ldr	r1, [sp, #8]
     b64:	ldr	r2, [sp, #4]
     b68:	ldr	r3, [sp]
     b6c:	bl	b80 <verify_string_vector>
     b70:	str	r0, [fp, #-4]
     b74:	ldr	r0, [fp, #-4]
     b78:	mov	sp, fp
     b7c:	pop	{fp, pc}

00000b80 <verify_string_vector>:
     b80:	push	{fp, lr}
     b84:	mov	fp, sp
     b88:	sub	sp, sp, #80	; 0x50
     b8c:	ldr	ip, [pc, #424]	; d3c <verify_string_vector+0x1bc>
     b90:	str	r0, [fp, #-8]
     b94:	str	r1, [fp, #-12]
     b98:	str	r2, [fp, #-16]
     b9c:	str	r3, [fp, #-20]	; 0xffffffec
     ba0:	ldr	r0, [fp, #-8]
     ba4:	ldr	r1, [fp, #-12]
     ba8:	ldr	r2, [fp, #-16]
     bac:	ldr	r3, [fp, #-20]	; 0xffffffec
     bb0:	movw	lr, #4
     bb4:	str	lr, [sp]
     bb8:	movw	lr, #4
     bbc:	uxth	lr, lr
     bc0:	str	lr, [sp, #4]
     bc4:	str	ip, [sp, #8]
     bc8:	bl	99c <verify_vector>
     bcc:	cmp	r0, #0
     bd0:	beq	c24 <verify_string_vector+0xa4>
     bd4:	ldr	r0, [pc, #352]	; d3c <verify_string_vector+0x1bc>
     bd8:	ldr	r1, [fp, #-8]
     bdc:	ldr	r2, [fp, #-12]
     be0:	ldr	r3, [fp, #-16]
     be4:	ldr	ip, [fp, #-20]	; 0xffffffec
     be8:	str	r0, [fp, #-32]	; 0xffffffe0
     bec:	mov	r0, r1
     bf0:	mov	r1, r2
     bf4:	mov	r2, r3
     bf8:	mov	r3, ip
     bfc:	movw	ip, #4
     c00:	str	ip, [sp]
     c04:	movw	ip, #4
     c08:	uxth	ip, ip
     c0c:	str	ip, [sp, #4]
     c10:	ldr	ip, [fp, #-32]	; 0xffffffe0
     c14:	str	ip, [sp, #8]
     c18:	bl	99c <verify_vector>
     c1c:	str	r0, [fp, #-4]
     c20:	b	d30 <verify_string_vector+0x1b0>
     c24:	ldr	r0, [fp, #-20]	; 0xffffffec
     c28:	ldr	r1, [fp, #-16]
     c2c:	add	r0, r1, r0
     c30:	str	r0, [fp, #-16]
     c34:	ldr	r0, [fp, #-8]
     c38:	ldr	r1, [fp, #-16]
     c3c:	bl	860 <read_uoffset>
     c40:	str	r0, [fp, #-28]	; 0xffffffe4
     c44:	ldr	r0, [fp, #-16]
     c48:	add	r0, r0, #4
     c4c:	str	r0, [fp, #-16]
     c50:	movw	r0, #0
     c54:	str	r0, [fp, #-24]	; 0xffffffe8
     c58:	ldr	r0, [fp, #-24]	; 0xffffffe8
     c5c:	ldr	r1, [fp, #-28]	; 0xffffffe4
     c60:	cmp	r0, r1
     c64:	bcs	d28 <verify_string_vector+0x1a8>
     c68:	ldr	r0, [fp, #-8]
     c6c:	ldr	r1, [fp, #-12]
     c70:	ldr	r2, [fp, #-16]
     c74:	ldr	r3, [fp, #-8]
     c78:	ldr	ip, [fp, #-16]
     c7c:	str	r0, [fp, #-36]	; 0xffffffdc
     c80:	mov	r0, r3
     c84:	str	r1, [sp, #40]	; 0x28
     c88:	mov	r1, ip
     c8c:	str	r2, [sp, #36]	; 0x24
     c90:	bl	860 <read_uoffset>
     c94:	ldr	r1, [fp, #-36]	; 0xffffffdc
     c98:	str	r0, [sp, #32]
     c9c:	mov	r0, r1
     ca0:	ldr	r1, [sp, #40]	; 0x28
     ca4:	ldr	r2, [sp, #36]	; 0x24
     ca8:	ldr	r3, [sp, #32]
     cac:	bl	744 <verify_string>
     cb0:	cmp	r0, #0
     cb4:	beq	d08 <verify_string_vector+0x188>
     cb8:	ldr	r0, [fp, #-8]
     cbc:	ldr	r1, [fp, #-12]
     cc0:	ldr	r2, [fp, #-16]
     cc4:	ldr	r3, [fp, #-8]
     cc8:	ldr	ip, [fp, #-16]
     ccc:	str	r0, [sp, #28]
     cd0:	mov	r0, r3
     cd4:	str	r1, [sp, #24]
     cd8:	mov	r1, ip
     cdc:	str	r2, [sp, #20]
     ce0:	bl	860 <read_uoffset>
     ce4:	ldr	r1, [sp, #28]
     ce8:	str	r0, [sp, #16]
     cec:	mov	r0, r1
     cf0:	ldr	r1, [sp, #24]
     cf4:	ldr	r2, [sp, #20]
     cf8:	ldr	r3, [sp, #16]
     cfc:	bl	744 <verify_string>
     d00:	str	r0, [fp, #-4]
     d04:	b	d30 <verify_string_vector+0x1b0>
     d08:	b	d0c <verify_string_vector+0x18c>
     d0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     d10:	add	r0, r0, #1
     d14:	str	r0, [fp, #-24]	; 0xffffffe8
     d18:	ldr	r0, [fp, #-16]
     d1c:	add	r0, r0, #4
     d20:	str	r0, [fp, #-16]
     d24:	b	c58 <verify_string_vector+0xd8>
     d28:	movw	r0, #0
     d2c:	str	r0, [fp, #-4]
     d30:	ldr	r0, [fp, #-4]
     d34:	mov	sp, fp
     d38:	pop	{fp, pc}
     d3c:	.word	0x3fffffff

00000d40 <flatcc_verify_table_field>:
     d40:	push	{r4, r5, fp, lr}
     d44:	add	fp, sp, #8
     d48:	sub	sp, sp, #64	; 0x40
     d4c:	str	r0, [fp, #-16]
     d50:	strh	r1, [fp, #-18]	; 0xffffffee
     d54:	str	r2, [fp, #-24]	; 0xffffffe8
     d58:	str	r3, [fp, #-28]	; 0xffffffe4
     d5c:	ldr	r0, [fp, #-16]
     d60:	ldrh	r1, [fp, #-18]	; 0xffffffee
     d64:	ldr	r2, [fp, #-24]	; 0xffffffe8
     d68:	uxth	r1, r1
     d6c:	sub	r3, fp, #32
     d70:	bl	5f0 <get_offset_field>
     d74:	str	r0, [sp, #36]	; 0x24
     d78:	ldr	r0, [sp, #36]	; 0x24
     d7c:	cmp	r0, #0
     d80:	bne	d90 <flatcc_verify_table_field+0x50>
     d84:	ldr	r0, [fp, #-32]	; 0xffffffe0
     d88:	cmp	r0, #0
     d8c:	bne	d9c <flatcc_verify_table_field+0x5c>
     d90:	ldr	r0, [sp, #36]	; 0x24
     d94:	str	r0, [fp, #-12]
     d98:	b	e24 <flatcc_verify_table_field+0xe4>
     d9c:	b	da0 <flatcc_verify_table_field+0x60>
     da0:	ldr	r0, [fp, #-16]
     da4:	ldr	r0, [r0]
     da8:	ldr	r1, [fp, #-16]
     dac:	ldr	r1, [r1, #4]
     db0:	ldr	r2, [fp, #-32]	; 0xffffffe0
     db4:	ldr	r3, [fp, #-16]
     db8:	ldr	r3, [r3]
     dbc:	ldr	ip, [fp, #-32]	; 0xffffffe0
     dc0:	str	r0, [sp, #32]
     dc4:	mov	r0, r3
     dc8:	str	r1, [sp, #28]
     dcc:	mov	r1, ip
     dd0:	str	r2, [sp, #24]
     dd4:	bl	860 <read_uoffset>
     dd8:	ldr	r1, [fp, #-16]
     ddc:	ldr	r1, [r1, #8]
     de0:	ldr	r2, [fp, #-28]	; 0xffffffe4
     de4:	ldr	r3, [sp, #32]
     de8:	str	r0, [sp, #20]
     dec:	mov	r0, r3
     df0:	ldr	ip, [sp, #28]
     df4:	str	r1, [sp, #16]
     df8:	mov	r1, ip
     dfc:	ldr	lr, [sp, #24]
     e00:	str	r2, [sp, #12]
     e04:	mov	r2, lr
     e08:	ldr	r3, [sp, #20]
     e0c:	ldr	r4, [sp, #16]
     e10:	str	r4, [sp]
     e14:	ldr	r5, [sp, #12]
     e18:	str	r5, [sp, #4]
     e1c:	bl	e30 <verify_table>
     e20:	str	r0, [fp, #-12]
     e24:	ldr	r0, [fp, #-12]
     e28:	sub	sp, fp, #8
     e2c:	pop	{r4, r5, fp, pc}

00000e30 <verify_table>:
     e30:	push	{fp, lr}
     e34:	mov	fp, sp
     e38:	sub	sp, sp, #104	; 0x68
     e3c:	ldr	ip, [fp, #12]
     e40:	ldr	lr, [fp, #8]
     e44:	str	r0, [fp, #-8]
     e48:	str	r1, [fp, #-12]
     e4c:	str	r2, [fp, #-16]
     e50:	str	r3, [fp, #-20]	; 0xffffffec
     e54:	ldr	r0, [fp, #8]
     e58:	sub	r0, r0, #1
     e5c:	str	r0, [sp, #60]	; 0x3c
     e60:	str	r0, [sp, #48]	; 0x30
     e64:	ldr	r0, [sp, #48]	; 0x30
     e68:	cmp	r0, #0
     e6c:	bne	e7c <verify_table+0x4c>
     e70:	movw	r0, #3
     e74:	str	r0, [fp, #-4]
     e78:	b	10f8 <verify_table+0x2c8>
     e7c:	b	e80 <verify_table+0x50>
     e80:	b	e84 <verify_table+0x54>
     e84:	ldr	r0, [fp, #-12]
     e88:	ldr	r1, [fp, #-16]
     e8c:	ldr	r2, [fp, #-20]	; 0xffffffec
     e90:	bl	27f0 <check_header>
     e94:	str	r0, [sp, #44]	; 0x2c
     e98:	ldr	r0, [sp, #44]	; 0x2c
     e9c:	cmp	r0, #0
     ea0:	bne	eb0 <verify_table+0x80>
     ea4:	movw	r0, #15
     ea8:	str	r0, [fp, #-4]
     eac:	b	10f8 <verify_table+0x2c8>
     eb0:	b	eb4 <verify_table+0x84>
     eb4:	ldr	r0, [fp, #-16]
     eb8:	ldr	r1, [fp, #-20]	; 0xffffffec
     ebc:	add	r0, r0, r1
     ec0:	str	r0, [sp, #68]	; 0x44
     ec4:	ldr	r0, [sp, #68]	; 0x44
     ec8:	ldr	r1, [fp, #-8]
     ecc:	ldr	r2, [sp, #68]	; 0x44
     ed0:	str	r0, [sp, #16]
     ed4:	mov	r0, r1
     ed8:	mov	r1, r2
     edc:	bl	860 <read_uoffset>
     ee0:	ldr	r1, [sp, #16]
     ee4:	sub	r0, r1, r0
     ee8:	str	r0, [fp, #-24]	; 0xffffffe8
     eec:	ldr	r0, [fp, #-24]	; 0xffffffe8
     ef0:	cmp	r0, #0
     ef4:	movw	r0, #0
     ef8:	str	r0, [sp, #12]
     efc:	blt	f20 <verify_table+0xf0>
     f00:	ldr	r0, [fp, #-24]	; 0xffffffe8
     f04:	and	r0, r0, #1
     f08:	cmp	r0, #0
     f0c:	movw	r0, #0
     f10:	movne	r0, #1
     f14:	mvn	r1, #0
     f18:	eor	r0, r0, r1
     f1c:	str	r0, [sp, #12]
     f20:	ldr	r0, [sp, #12]
     f24:	and	r0, r0, #1
     f28:	str	r0, [sp, #40]	; 0x28
     f2c:	ldr	r0, [sp, #40]	; 0x28
     f30:	cmp	r0, #0
     f34:	bne	f44 <verify_table+0x114>
     f38:	movw	r0, #29
     f3c:	str	r0, [fp, #-4]
     f40:	b	10f8 <verify_table+0x2c8>
     f44:	b	f48 <verify_table+0x118>
     f48:	b	f4c <verify_table+0x11c>
     f4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     f50:	add	r0, r0, #2
     f54:	ldr	r1, [fp, #-12]
     f58:	cmp	r0, r1
     f5c:	movw	r0, #0
     f60:	movls	r0, #1
     f64:	and	r0, r0, #1
     f68:	str	r0, [sp, #36]	; 0x24
     f6c:	ldr	r0, [sp, #36]	; 0x24
     f70:	cmp	r0, #0
     f74:	bne	f84 <verify_table+0x154>
     f78:	movw	r0, #27
     f7c:	str	r0, [fp, #-4]
     f80:	b	10f8 <verify_table+0x2c8>
     f84:	b	f88 <verify_table+0x158>
     f88:	ldr	r0, [fp, #-8]
     f8c:	ldr	r1, [fp, #-24]	; 0xffffffe8
     f90:	bl	296c <read_voffset>
     f94:	strh	r0, [sp, #74]	; 0x4a
     f98:	ldr	r0, [fp, #-24]	; 0xffffffe8
     f9c:	ldrh	r1, [sp, #74]	; 0x4a
     fa0:	add	r0, r0, r1
     fa4:	str	r0, [fp, #-28]	; 0xffffffe4
     fa8:	ldr	r0, [fp, #-28]	; 0xffffffe4
     fac:	ldr	r1, [fp, #-12]
     fb0:	cmp	r0, r1
     fb4:	movw	r0, #0
     fb8:	str	r0, [sp, #8]
     fbc:	bhi	fe0 <verify_table+0x1b0>
     fc0:	ldrh	r0, [sp, #74]	; 0x4a
     fc4:	and	r0, r0, #1
     fc8:	cmp	r0, #0
     fcc:	movw	r0, #0
     fd0:	movne	r0, #1
     fd4:	mvn	r1, #0
     fd8:	eor	r0, r0, r1
     fdc:	str	r0, [sp, #8]
     fe0:	ldr	r0, [sp, #8]
     fe4:	and	r0, r0, #1
     fe8:	str	r0, [sp, #32]
     fec:	ldr	r0, [sp, #32]
     ff0:	cmp	r0, #0
     ff4:	bne	1004 <verify_table+0x1d4>
     ff8:	movw	r0, #30
     ffc:	str	r0, [fp, #-4]
    1000:	b	10f8 <verify_table+0x2c8>
    1004:	b	1008 <verify_table+0x1d8>
    1008:	b	100c <verify_table+0x1dc>
    100c:	movw	r0, #1
    1010:	str	r0, [sp, #28]
    1014:	ldr	r0, [sp, #28]
    1018:	cmp	r0, #0
    101c:	bne	102c <verify_table+0x1fc>
    1020:	movw	r0, #31
    1024:	str	r0, [fp, #-4]
    1028:	b	10f8 <verify_table+0x2c8>
    102c:	b	1030 <verify_table+0x200>
    1030:	b	1034 <verify_table+0x204>
    1034:	ldrh	r0, [sp, #74]	; 0x4a
    1038:	cmp	r0, #4
    103c:	movw	r0, #0
    1040:	movcs	r0, #1
    1044:	and	r0, r0, #1
    1048:	str	r0, [sp, #24]
    104c:	ldr	r0, [sp, #24]
    1050:	cmp	r0, #0
    1054:	bne	1064 <verify_table+0x234>
    1058:	movw	r0, #28
    105c:	str	r0, [fp, #-4]
    1060:	b	10f8 <verify_table+0x2c8>
    1064:	b	1068 <verify_table+0x238>
    1068:	ldr	r0, [fp, #-8]
    106c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1070:	add	r1, r1, #2
    1074:	bl	296c <read_voffset>
    1078:	strh	r0, [sp, #72]	; 0x48
    107c:	ldr	r0, [fp, #-12]
    1080:	ldr	r1, [sp, #68]	; 0x44
    1084:	sub	r0, r0, r1
    1088:	ldrh	r1, [sp, #72]	; 0x48
    108c:	cmp	r0, r1
    1090:	movw	r0, #0
    1094:	movcs	r0, #1
    1098:	and	r0, r0, #1
    109c:	str	r0, [sp, #20]
    10a0:	ldr	r0, [sp, #20]
    10a4:	cmp	r0, #0
    10a8:	bne	10b8 <verify_table+0x288>
    10ac:	movw	r0, #20
    10b0:	str	r0, [fp, #-4]
    10b4:	b	10f8 <verify_table+0x2c8>
    10b8:	b	10bc <verify_table+0x28c>
    10bc:	ldr	r0, [fp, #-8]
    10c0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    10c4:	add	r0, r0, r1
    10c8:	str	r0, [sp, #64]	; 0x40
    10cc:	ldr	r0, [fp, #-8]
    10d0:	str	r0, [sp, #52]	; 0x34
    10d4:	ldr	r0, [fp, #-12]
    10d8:	str	r0, [sp, #56]	; 0x38
    10dc:	ldr	r0, [fp, #12]
    10e0:	add	r1, sp, #52	; 0x34
    10e4:	str	r0, [sp, #4]
    10e8:	mov	r0, r1
    10ec:	ldr	r1, [sp, #4]
    10f0:	blx	r1
    10f4:	str	r0, [fp, #-4]
    10f8:	ldr	r0, [fp, #-4]
    10fc:	mov	sp, fp
    1100:	pop	{fp, pc}

00001104 <flatcc_verify_table_vector_field>:
    1104:	push	{r4, r5, fp, lr}
    1108:	add	fp, sp, #8
    110c:	sub	sp, sp, #64	; 0x40
    1110:	str	r0, [fp, #-16]
    1114:	strh	r1, [fp, #-18]	; 0xffffffee
    1118:	str	r2, [fp, #-24]	; 0xffffffe8
    111c:	str	r3, [fp, #-28]	; 0xffffffe4
    1120:	ldr	r0, [fp, #-16]
    1124:	ldrh	r1, [fp, #-18]	; 0xffffffee
    1128:	ldr	r2, [fp, #-24]	; 0xffffffe8
    112c:	uxth	r1, r1
    1130:	sub	r3, fp, #32
    1134:	bl	5f0 <get_offset_field>
    1138:	str	r0, [sp, #36]	; 0x24
    113c:	ldr	r0, [sp, #36]	; 0x24
    1140:	cmp	r0, #0
    1144:	bne	1154 <flatcc_verify_table_vector_field+0x50>
    1148:	ldr	r0, [fp, #-32]	; 0xffffffe0
    114c:	cmp	r0, #0
    1150:	bne	1160 <flatcc_verify_table_vector_field+0x5c>
    1154:	ldr	r0, [sp, #36]	; 0x24
    1158:	str	r0, [fp, #-12]
    115c:	b	11e8 <flatcc_verify_table_vector_field+0xe4>
    1160:	b	1164 <flatcc_verify_table_vector_field+0x60>
    1164:	ldr	r0, [fp, #-16]
    1168:	ldr	r0, [r0]
    116c:	ldr	r1, [fp, #-16]
    1170:	ldr	r1, [r1, #4]
    1174:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1178:	ldr	r3, [fp, #-16]
    117c:	ldr	r3, [r3]
    1180:	ldr	ip, [fp, #-32]	; 0xffffffe0
    1184:	str	r0, [sp, #32]
    1188:	mov	r0, r3
    118c:	str	r1, [sp, #28]
    1190:	mov	r1, ip
    1194:	str	r2, [sp, #24]
    1198:	bl	860 <read_uoffset>
    119c:	ldr	r1, [fp, #-16]
    11a0:	ldr	r1, [r1, #8]
    11a4:	ldr	r2, [fp, #-28]	; 0xffffffe4
    11a8:	ldr	r3, [sp, #32]
    11ac:	str	r0, [sp, #20]
    11b0:	mov	r0, r3
    11b4:	ldr	ip, [sp, #28]
    11b8:	str	r1, [sp, #16]
    11bc:	mov	r1, ip
    11c0:	ldr	lr, [sp, #24]
    11c4:	str	r2, [sp, #12]
    11c8:	mov	r2, lr
    11cc:	ldr	r3, [sp, #20]
    11d0:	ldr	r4, [sp, #16]
    11d4:	str	r4, [sp]
    11d8:	ldr	r5, [sp, #12]
    11dc:	str	r5, [sp, #4]
    11e0:	bl	11f4 <verify_table_vector>
    11e4:	str	r0, [fp, #-12]
    11e8:	ldr	r0, [fp, #-12]
    11ec:	sub	sp, fp, #8
    11f0:	pop	{r4, r5, fp, pc}

000011f4 <verify_table_vector>:
    11f4:	push	{r4, r5, fp, lr}
    11f8:	add	fp, sp, #8
    11fc:	sub	sp, sp, #104	; 0x68
    1200:	ldr	ip, [fp, #12]
    1204:	ldr	lr, [fp, #8]
    1208:	str	r0, [fp, #-16]
    120c:	str	r1, [fp, #-20]	; 0xffffffec
    1210:	str	r2, [fp, #-24]	; 0xffffffe8
    1214:	str	r3, [fp, #-28]	; 0xffffffe4
    1218:	ldr	r0, [fp, #8]
    121c:	mvn	r1, #0
    1220:	add	r1, r0, r1
    1224:	str	r1, [fp, #8]
    1228:	cmp	r0, #0
    122c:	movw	r0, #0
    1230:	movgt	r0, #1
    1234:	and	r0, r0, #1
    1238:	str	r0, [fp, #-40]	; 0xffffffd8
    123c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1240:	cmp	r0, #0
    1244:	bne	1254 <verify_table_vector+0x60>
    1248:	movw	r0, #3
    124c:	str	r0, [fp, #-12]
    1250:	b	1454 <verify_table_vector+0x260>
    1254:	b	1258 <verify_table_vector+0x64>
    1258:	ldr	r0, [pc, #512]	; 1460 <verify_table_vector+0x26c>
    125c:	ldr	r1, [fp, #-16]
    1260:	ldr	r2, [fp, #-20]	; 0xffffffec
    1264:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1268:	ldr	ip, [fp, #-28]	; 0xffffffe4
    126c:	str	r0, [fp, #-44]	; 0xffffffd4
    1270:	mov	r0, r1
    1274:	mov	r1, r2
    1278:	mov	r2, r3
    127c:	mov	r3, ip
    1280:	movw	ip, #4
    1284:	str	ip, [sp]
    1288:	movw	ip, #4
    128c:	uxth	ip, ip
    1290:	str	ip, [sp, #4]
    1294:	ldr	ip, [fp, #-44]	; 0xffffffd4
    1298:	str	ip, [sp, #8]
    129c:	bl	99c <verify_vector>
    12a0:	cmp	r0, #0
    12a4:	beq	12f8 <verify_table_vector+0x104>
    12a8:	ldr	r0, [pc, #432]	; 1460 <verify_table_vector+0x26c>
    12ac:	ldr	r1, [fp, #-16]
    12b0:	ldr	r2, [fp, #-20]	; 0xffffffec
    12b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    12b8:	ldr	ip, [fp, #-28]	; 0xffffffe4
    12bc:	str	r0, [fp, #-48]	; 0xffffffd0
    12c0:	mov	r0, r1
    12c4:	mov	r1, r2
    12c8:	mov	r2, r3
    12cc:	mov	r3, ip
    12d0:	movw	ip, #4
    12d4:	str	ip, [sp]
    12d8:	movw	ip, #4
    12dc:	uxth	ip, ip
    12e0:	str	ip, [sp, #4]
    12e4:	ldr	ip, [fp, #-48]	; 0xffffffd0
    12e8:	str	ip, [sp, #8]
    12ec:	bl	99c <verify_vector>
    12f0:	str	r0, [fp, #-12]
    12f4:	b	1454 <verify_table_vector+0x260>
    12f8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    12fc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1300:	add	r0, r1, r0
    1304:	str	r0, [fp, #-24]	; 0xffffffe8
    1308:	ldr	r0, [fp, #-16]
    130c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1310:	bl	860 <read_uoffset>
    1314:	str	r0, [fp, #-36]	; 0xffffffdc
    1318:	ldr	r0, [fp, #-24]	; 0xffffffe8
    131c:	add	r0, r0, #4
    1320:	str	r0, [fp, #-24]	; 0xffffffe8
    1324:	movw	r0, #0
    1328:	str	r0, [fp, #-32]	; 0xffffffe0
    132c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1330:	ldr	r1, [fp, #-36]	; 0xffffffdc
    1334:	cmp	r0, r1
    1338:	bcs	144c <verify_table_vector+0x258>
    133c:	ldr	r0, [fp, #-16]
    1340:	ldr	r1, [fp, #-20]	; 0xffffffec
    1344:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1348:	ldr	r3, [fp, #-16]
    134c:	ldr	ip, [fp, #-24]	; 0xffffffe8
    1350:	str	r0, [fp, #-52]	; 0xffffffcc
    1354:	mov	r0, r3
    1358:	str	r1, [sp, #56]	; 0x38
    135c:	mov	r1, ip
    1360:	str	r2, [sp, #52]	; 0x34
    1364:	bl	860 <read_uoffset>
    1368:	ldr	r1, [fp, #8]
    136c:	ldr	r2, [fp, #12]
    1370:	ldr	r3, [fp, #-52]	; 0xffffffcc
    1374:	str	r0, [sp, #48]	; 0x30
    1378:	mov	r0, r3
    137c:	ldr	ip, [sp, #56]	; 0x38
    1380:	str	r1, [sp, #44]	; 0x2c
    1384:	mov	r1, ip
    1388:	ldr	lr, [sp, #52]	; 0x34
    138c:	str	r2, [sp, #40]	; 0x28
    1390:	mov	r2, lr
    1394:	ldr	r3, [sp, #48]	; 0x30
    1398:	ldr	r4, [sp, #44]	; 0x2c
    139c:	str	r4, [sp]
    13a0:	ldr	r5, [sp, #40]	; 0x28
    13a4:	str	r5, [sp, #4]
    13a8:	bl	e30 <verify_table>
    13ac:	cmp	r0, #0
    13b0:	beq	142c <verify_table_vector+0x238>
    13b4:	ldr	r0, [fp, #-16]
    13b8:	ldr	r1, [fp, #-20]	; 0xffffffec
    13bc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    13c0:	ldr	r3, [fp, #-16]
    13c4:	ldr	ip, [fp, #-24]	; 0xffffffe8
    13c8:	str	r0, [sp, #36]	; 0x24
    13cc:	mov	r0, r3
    13d0:	str	r1, [sp, #32]
    13d4:	mov	r1, ip
    13d8:	str	r2, [sp, #28]
    13dc:	bl	860 <read_uoffset>
    13e0:	ldr	r1, [fp, #8]
    13e4:	ldr	r2, [fp, #12]
    13e8:	ldr	r3, [sp, #36]	; 0x24
    13ec:	str	r0, [sp, #24]
    13f0:	mov	r0, r3
    13f4:	ldr	ip, [sp, #32]
    13f8:	str	r1, [sp, #20]
    13fc:	mov	r1, ip
    1400:	ldr	lr, [sp, #28]
    1404:	str	r2, [sp, #16]
    1408:	mov	r2, lr
    140c:	ldr	r3, [sp, #24]
    1410:	ldr	r4, [sp, #20]
    1414:	str	r4, [sp]
    1418:	ldr	r5, [sp, #16]
    141c:	str	r5, [sp, #4]
    1420:	bl	e30 <verify_table>
    1424:	str	r0, [fp, #-12]
    1428:	b	1454 <verify_table_vector+0x260>
    142c:	b	1430 <verify_table_vector+0x23c>
    1430:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1434:	add	r0, r0, #1
    1438:	str	r0, [fp, #-32]	; 0xffffffe0
    143c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1440:	add	r0, r0, #4
    1444:	str	r0, [fp, #-24]	; 0xffffffe8
    1448:	b	132c <verify_table_vector+0x138>
    144c:	movw	r0, #0
    1450:	str	r0, [fp, #-12]
    1454:	ldr	r0, [fp, #-12]
    1458:	sub	sp, fp, #8
    145c:	pop	{r4, r5, fp, pc}
    1460:	.word	0x3fffffff

00001464 <flatcc_verify_union_table>:
    1464:	push	{fp, lr}
    1468:	mov	fp, sp
    146c:	sub	sp, sp, #16
    1470:	str	r0, [fp, #-4]
    1474:	str	r1, [sp, #8]
    1478:	ldr	r0, [fp, #-4]
    147c:	ldr	r0, [r0]
    1480:	ldr	r1, [fp, #-4]
    1484:	ldr	r1, [r1, #4]
    1488:	ldr	r2, [fp, #-4]
    148c:	ldr	r2, [r2, #16]
    1490:	ldr	r3, [fp, #-4]
    1494:	ldr	r3, [r3, #20]
    1498:	ldr	ip, [fp, #-4]
    149c:	ldr	ip, [ip, #8]
    14a0:	ldr	lr, [sp, #8]
    14a4:	str	ip, [sp]
    14a8:	str	lr, [sp, #4]
    14ac:	bl	e30 <verify_table>
    14b0:	mov	sp, fp
    14b4:	pop	{fp, pc}

000014b8 <flatcc_verify_union_struct>:
    14b8:	push	{fp, lr}
    14bc:	mov	fp, sp
    14c0:	sub	sp, sp, #16
    14c4:	str	r0, [fp, #-4]
    14c8:	str	r1, [sp, #8]
    14cc:	strh	r2, [sp, #6]
    14d0:	ldr	r0, [fp, #-4]
    14d4:	ldr	r0, [r0, #4]
    14d8:	ldr	r1, [fp, #-4]
    14dc:	ldr	r1, [r1, #16]
    14e0:	ldr	r2, [fp, #-4]
    14e4:	ldr	r2, [r2, #20]
    14e8:	ldr	r3, [sp, #8]
    14ec:	ldrh	ip, [sp, #6]
    14f0:	str	ip, [sp]
    14f4:	bl	1500 <verify_struct>
    14f8:	mov	sp, fp
    14fc:	pop	{fp, pc}

00001500 <verify_struct>:
    1500:	sub	sp, sp, #36	; 0x24
    1504:	ldr	ip, [sp, #36]	; 0x24
    1508:	str	r0, [sp, #28]
    150c:	str	r1, [sp, #24]
    1510:	str	r2, [sp, #20]
    1514:	str	r3, [sp, #16]
    1518:	strh	ip, [sp, #14]
    151c:	ldr	r0, [sp, #20]
    1520:	cmp	r0, #0
    1524:	beq	1540 <verify_struct+0x40>
    1528:	ldr	r0, [sp, #24]
    152c:	ldr	r1, [sp, #20]
    1530:	add	r0, r0, r1
    1534:	ldr	r1, [sp, #28]
    1538:	cmp	r0, r1
    153c:	bls	154c <verify_struct+0x4c>
    1540:	movw	r0, #18
    1544:	str	r0, [sp, #32]
    1548:	b	1634 <verify_struct+0x134>
    154c:	ldr	r0, [sp, #20]
    1550:	ldr	r1, [sp, #24]
    1554:	add	r0, r1, r0
    1558:	str	r0, [sp, #24]
    155c:	ldr	r0, [sp, #24]
    1560:	ldr	r1, [sp, #16]
    1564:	add	r0, r0, r1
    1568:	ldr	r1, [sp, #24]
    156c:	cmp	r0, r1
    1570:	movw	r0, #0
    1574:	movcs	r0, #1
    1578:	and	r0, r0, #1
    157c:	str	r0, [sp, #8]
    1580:	ldr	r0, [sp, #8]
    1584:	cmp	r0, #0
    1588:	bne	1598 <verify_struct+0x98>
    158c:	movw	r0, #10
    1590:	str	r0, [sp, #32]
    1594:	b	1634 <verify_struct+0x134>
    1598:	b	159c <verify_struct+0x9c>
    159c:	b	15a0 <verify_struct+0xa0>
    15a0:	ldr	r0, [sp, #24]
    15a4:	ldr	r1, [sp, #16]
    15a8:	add	r0, r0, r1
    15ac:	ldr	r1, [sp, #28]
    15b0:	cmp	r0, r1
    15b4:	movw	r0, #0
    15b8:	movls	r0, #1
    15bc:	and	r0, r0, #1
    15c0:	str	r0, [sp, #4]
    15c4:	ldr	r0, [sp, #4]
    15c8:	cmp	r0, #0
    15cc:	bne	15dc <verify_struct+0xdc>
    15d0:	movw	r0, #9
    15d4:	str	r0, [sp, #32]
    15d8:	b	1634 <verify_struct+0x134>
    15dc:	b	15e0 <verify_struct+0xe0>
    15e0:	b	15e4 <verify_struct+0xe4>
    15e4:	ldr	r0, [sp, #24]
    15e8:	ldrh	r1, [sp, #14]
    15ec:	sub	r1, r1, #1
    15f0:	and	r0, r0, r1
    15f4:	cmp	r0, #0
    15f8:	movw	r0, #0
    15fc:	movne	r0, #1
    1600:	mvn	r1, #0
    1604:	eor	r0, r0, r1
    1608:	and	r0, r0, #1
    160c:	str	r0, [sp]
    1610:	ldr	r0, [sp]
    1614:	cmp	r0, #0
    1618:	bne	1628 <verify_struct+0x128>
    161c:	movw	r0, #11
    1620:	str	r0, [sp, #32]
    1624:	b	1634 <verify_struct+0x134>
    1628:	b	162c <verify_struct+0x12c>
    162c:	movw	r0, #0
    1630:	str	r0, [sp, #32]
    1634:	ldr	r0, [sp, #32]
    1638:	add	sp, sp, #36	; 0x24
    163c:	bx	lr

00001640 <flatcc_verify_union_string>:
    1640:	push	{fp, lr}
    1644:	mov	fp, sp
    1648:	sub	sp, sp, #8
    164c:	str	r0, [sp, #4]
    1650:	ldr	r0, [sp, #4]
    1654:	ldr	r0, [r0]
    1658:	ldr	r1, [sp, #4]
    165c:	ldr	r1, [r1, #4]
    1660:	ldr	r2, [sp, #4]
    1664:	ldr	r2, [r2, #16]
    1668:	ldr	r3, [sp, #4]
    166c:	ldr	r3, [r3, #20]
    1670:	bl	744 <verify_string>
    1674:	mov	sp, fp
    1678:	pop	{fp, pc}

0000167c <flatcc_verify_buffer_header>:
    167c:	push	{fp, lr}
    1680:	mov	fp, sp
    1684:	sub	sp, sp, #48	; 0x30
    1688:	str	r0, [fp, #-8]
    168c:	str	r1, [fp, #-12]
    1690:	str	r2, [fp, #-16]
    1694:	ldr	r0, [fp, #-8]
    1698:	and	r0, r0, #3
    169c:	cmp	r0, #0
    16a0:	movw	r0, #0
    16a4:	movne	r0, #1
    16a8:	mvn	r1, #0
    16ac:	eor	r0, r0, r1
    16b0:	and	r0, r0, #1
    16b4:	str	r0, [sp, #20]
    16b8:	ldr	r0, [sp, #20]
    16bc:	cmp	r0, #0
    16c0:	bne	16d0 <flatcc_verify_buffer_header+0x54>
    16c4:	movw	r0, #5
    16c8:	str	r0, [fp, #-4]
    16cc:	b	17d0 <flatcc_verify_buffer_header+0x154>
    16d0:	b	16d4 <flatcc_verify_buffer_header+0x58>
    16d4:	b	16d8 <flatcc_verify_buffer_header+0x5c>
    16d8:	ldr	r0, [fp, #-12]
    16dc:	cmn	r0, #9
    16e0:	movw	r0, #0
    16e4:	movls	r0, #1
    16e8:	and	r0, r0, #1
    16ec:	str	r0, [sp, #16]
    16f0:	ldr	r0, [sp, #16]
    16f4:	cmp	r0, #0
    16f8:	bne	1708 <flatcc_verify_buffer_header+0x8c>
    16fc:	movw	r0, #6
    1700:	str	r0, [fp, #-4]
    1704:	b	17d0 <flatcc_verify_buffer_header+0x154>
    1708:	b	170c <flatcc_verify_buffer_header+0x90>
    170c:	b	1710 <flatcc_verify_buffer_header+0x94>
    1710:	ldr	r0, [fp, #-12]
    1714:	cmp	r0, #8
    1718:	movw	r0, #0
    171c:	movcs	r0, #1
    1720:	and	r0, r0, #1
    1724:	str	r0, [sp, #12]
    1728:	ldr	r0, [sp, #12]
    172c:	cmp	r0, #0
    1730:	bne	1740 <flatcc_verify_buffer_header+0xc4>
    1734:	movw	r0, #1
    1738:	str	r0, [fp, #-4]
    173c:	b	17d0 <flatcc_verify_buffer_header+0x154>
    1740:	b	1744 <flatcc_verify_buffer_header+0xc8>
    1744:	ldr	r0, [fp, #-16]
    1748:	movw	r1, #0
    174c:	cmp	r0, r1
    1750:	beq	17c8 <flatcc_verify_buffer_header+0x14c>
    1754:	ldr	r0, [fp, #-16]
    1758:	bl	17dc <read_thash_identifier>
    175c:	str	r0, [sp, #24]
    1760:	ldr	r0, [fp, #-8]
    1764:	movw	r1, #4
    1768:	bl	181c <read_thash>
    176c:	str	r0, [fp, #-20]	; 0xffffffec
    1770:	ldr	r0, [sp, #24]
    1774:	cmp	r0, #0
    1778:	movw	r0, #1
    177c:	str	r0, [sp, #4]
    1780:	beq	179c <flatcc_verify_buffer_header+0x120>
    1784:	ldr	r0, [fp, #-20]	; 0xffffffec
    1788:	ldr	r1, [sp, #24]
    178c:	cmp	r0, r1
    1790:	movw	r0, #0
    1794:	moveq	r0, #1
    1798:	str	r0, [sp, #4]
    179c:	ldr	r0, [sp, #4]
    17a0:	and	r0, r0, #1
    17a4:	str	r0, [sp, #8]
    17a8:	ldr	r0, [sp, #8]
    17ac:	cmp	r0, #0
    17b0:	bne	17c0 <flatcc_verify_buffer_header+0x144>
    17b4:	movw	r0, #2
    17b8:	str	r0, [fp, #-4]
    17bc:	b	17d0 <flatcc_verify_buffer_header+0x154>
    17c0:	b	17c4 <flatcc_verify_buffer_header+0x148>
    17c4:	b	17c8 <flatcc_verify_buffer_header+0x14c>
    17c8:	movw	r0, #0
    17cc:	str	r0, [fp, #-4]
    17d0:	ldr	r0, [fp, #-4]
    17d4:	mov	sp, fp
    17d8:	pop	{fp, pc}

000017dc <read_thash_identifier>:
    17dc:	push	{fp, lr}
    17e0:	mov	fp, sp
    17e4:	sub	sp, sp, #16
    17e8:	str	r0, [fp, #-4]
    17ec:	movw	r0, #0
    17f0:	str	r0, [sp, #8]
    17f4:	add	r0, sp, #8
    17f8:	ldr	r1, [fp, #-4]
    17fc:	movw	r2, #4
    1800:	bl	0 <strncpy>
    1804:	ldr	r1, [sp, #8]
    1808:	str	r0, [sp, #4]
    180c:	mov	r0, r1
    1810:	bl	29d8 <__flatbuffers_thash_cast_from_le>
    1814:	mov	sp, fp
    1818:	pop	{fp, pc}

0000181c <read_thash>:
    181c:	push	{fp, lr}
    1820:	mov	fp, sp
    1824:	sub	sp, sp, #8
    1828:	str	r0, [sp, #4]
    182c:	str	r1, [sp]
    1830:	ldr	r0, [sp, #4]
    1834:	ldr	r1, [sp]
    1838:	add	r0, r0, r1
    183c:	bl	29ec <__flatbuffers_thash_read_from_pe>
    1840:	mov	sp, fp
    1844:	pop	{fp, pc}

00001848 <flatcc_verify_typed_buffer_header>:
    1848:	push	{fp, lr}
    184c:	mov	fp, sp
    1850:	sub	sp, sp, #48	; 0x30
    1854:	str	r0, [fp, #-8]
    1858:	str	r1, [fp, #-12]
    185c:	str	r2, [fp, #-16]
    1860:	ldr	r0, [fp, #-8]
    1864:	and	r0, r0, #3
    1868:	cmp	r0, #0
    186c:	movw	r0, #0
    1870:	movne	r0, #1
    1874:	mvn	r1, #0
    1878:	eor	r0, r0, r1
    187c:	and	r0, r0, #1
    1880:	str	r0, [sp, #20]
    1884:	ldr	r0, [sp, #20]
    1888:	cmp	r0, #0
    188c:	bne	189c <flatcc_verify_typed_buffer_header+0x54>
    1890:	movw	r0, #5
    1894:	str	r0, [fp, #-4]
    1898:	b	1994 <flatcc_verify_typed_buffer_header+0x14c>
    189c:	b	18a0 <flatcc_verify_typed_buffer_header+0x58>
    18a0:	b	18a4 <flatcc_verify_typed_buffer_header+0x5c>
    18a4:	ldr	r0, [fp, #-12]
    18a8:	cmn	r0, #9
    18ac:	movw	r0, #0
    18b0:	movls	r0, #1
    18b4:	and	r0, r0, #1
    18b8:	str	r0, [sp, #16]
    18bc:	ldr	r0, [sp, #16]
    18c0:	cmp	r0, #0
    18c4:	bne	18d4 <flatcc_verify_typed_buffer_header+0x8c>
    18c8:	movw	r0, #6
    18cc:	str	r0, [fp, #-4]
    18d0:	b	1994 <flatcc_verify_typed_buffer_header+0x14c>
    18d4:	b	18d8 <flatcc_verify_typed_buffer_header+0x90>
    18d8:	b	18dc <flatcc_verify_typed_buffer_header+0x94>
    18dc:	ldr	r0, [fp, #-12]
    18e0:	cmp	r0, #8
    18e4:	movw	r0, #0
    18e8:	movcs	r0, #1
    18ec:	and	r0, r0, #1
    18f0:	str	r0, [sp, #12]
    18f4:	ldr	r0, [sp, #12]
    18f8:	cmp	r0, #0
    18fc:	bne	190c <flatcc_verify_typed_buffer_header+0xc4>
    1900:	movw	r0, #1
    1904:	str	r0, [fp, #-4]
    1908:	b	1994 <flatcc_verify_typed_buffer_header+0x14c>
    190c:	b	1910 <flatcc_verify_typed_buffer_header+0xc8>
    1910:	ldr	r0, [fp, #-16]
    1914:	cmp	r0, #0
    1918:	beq	198c <flatcc_verify_typed_buffer_header+0x144>
    191c:	ldr	r0, [fp, #-16]
    1920:	str	r0, [sp, #24]
    1924:	ldr	r0, [fp, #-8]
    1928:	movw	r1, #4
    192c:	bl	181c <read_thash>
    1930:	str	r0, [fp, #-20]	; 0xffffffec
    1934:	ldr	r0, [sp, #24]
    1938:	cmp	r0, #0
    193c:	movw	r0, #1
    1940:	str	r0, [sp, #4]
    1944:	beq	1960 <flatcc_verify_typed_buffer_header+0x118>
    1948:	ldr	r0, [fp, #-20]	; 0xffffffec
    194c:	ldr	r1, [sp, #24]
    1950:	cmp	r0, r1
    1954:	movw	r0, #0
    1958:	moveq	r0, #1
    195c:	str	r0, [sp, #4]
    1960:	ldr	r0, [sp, #4]
    1964:	and	r0, r0, #1
    1968:	str	r0, [sp, #8]
    196c:	ldr	r0, [sp, #8]
    1970:	cmp	r0, #0
    1974:	bne	1984 <flatcc_verify_typed_buffer_header+0x13c>
    1978:	movw	r0, #2
    197c:	str	r0, [fp, #-4]
    1980:	b	1994 <flatcc_verify_typed_buffer_header+0x14c>
    1984:	b	1988 <flatcc_verify_typed_buffer_header+0x140>
    1988:	b	198c <flatcc_verify_typed_buffer_header+0x144>
    198c:	movw	r0, #0
    1990:	str	r0, [fp, #-4]
    1994:	ldr	r0, [fp, #-4]
    1998:	mov	sp, fp
    199c:	pop	{fp, pc}

000019a0 <flatcc_verify_struct_as_root>:
    19a0:	push	{fp, lr}
    19a4:	mov	fp, sp
    19a8:	sub	sp, sp, #40	; 0x28
    19ac:	ldr	ip, [fp, #8]
    19b0:	str	r0, [fp, #-8]
    19b4:	str	r1, [fp, #-12]
    19b8:	str	r2, [fp, #-16]
    19bc:	str	r3, [sp, #20]
    19c0:	strh	ip, [sp, #18]
    19c4:	ldr	r0, [fp, #-8]
    19c8:	ldr	r1, [fp, #-12]
    19cc:	ldr	r2, [fp, #-16]
    19d0:	bl	167c <flatcc_verify_buffer_header>
    19d4:	cmp	r0, #0
    19d8:	beq	19f4 <flatcc_verify_struct_as_root+0x54>
    19dc:	ldr	r0, [fp, #-8]
    19e0:	ldr	r1, [fp, #-12]
    19e4:	ldr	r2, [fp, #-16]
    19e8:	bl	167c <flatcc_verify_buffer_header>
    19ec:	str	r0, [fp, #-4]
    19f0:	b	1a34 <flatcc_verify_struct_as_root+0x94>
    19f4:	ldr	r0, [fp, #-12]
    19f8:	ldr	r1, [fp, #-8]
    19fc:	str	r0, [sp, #12]
    1a00:	mov	r0, r1
    1a04:	movw	r1, #0
    1a08:	bl	860 <read_uoffset>
    1a0c:	ldr	r3, [sp, #20]
    1a10:	ldr	r1, [sp, #12]
    1a14:	str	r0, [sp, #8]
    1a18:	mov	r0, r1
    1a1c:	movw	r1, #0
    1a20:	ldr	r2, [sp, #8]
    1a24:	ldrh	ip, [sp, #18]
    1a28:	str	ip, [sp]
    1a2c:	bl	1500 <verify_struct>
    1a30:	str	r0, [fp, #-4]
    1a34:	ldr	r0, [fp, #-4]
    1a38:	mov	sp, fp
    1a3c:	pop	{fp, pc}

00001a40 <flatcc_verify_struct_as_typed_root>:
    1a40:	push	{fp, lr}
    1a44:	mov	fp, sp
    1a48:	sub	sp, sp, #40	; 0x28
    1a4c:	ldr	ip, [fp, #8]
    1a50:	str	r0, [fp, #-8]
    1a54:	str	r1, [fp, #-12]
    1a58:	str	r2, [fp, #-16]
    1a5c:	str	r3, [sp, #20]
    1a60:	strh	ip, [sp, #18]
    1a64:	ldr	r0, [fp, #-8]
    1a68:	ldr	r1, [fp, #-12]
    1a6c:	ldr	r2, [fp, #-16]
    1a70:	bl	1848 <flatcc_verify_typed_buffer_header>
    1a74:	cmp	r0, #0
    1a78:	beq	1a94 <flatcc_verify_struct_as_typed_root+0x54>
    1a7c:	ldr	r0, [fp, #-8]
    1a80:	ldr	r1, [fp, #-12]
    1a84:	ldr	r2, [fp, #-16]
    1a88:	bl	1848 <flatcc_verify_typed_buffer_header>
    1a8c:	str	r0, [fp, #-4]
    1a90:	b	1ad4 <flatcc_verify_struct_as_typed_root+0x94>
    1a94:	ldr	r0, [fp, #-12]
    1a98:	ldr	r1, [fp, #-8]
    1a9c:	str	r0, [sp, #12]
    1aa0:	mov	r0, r1
    1aa4:	movw	r1, #0
    1aa8:	bl	860 <read_uoffset>
    1aac:	ldr	r3, [sp, #20]
    1ab0:	ldr	r1, [sp, #12]
    1ab4:	str	r0, [sp, #8]
    1ab8:	mov	r0, r1
    1abc:	movw	r1, #0
    1ac0:	ldr	r2, [sp, #8]
    1ac4:	ldrh	ip, [sp, #18]
    1ac8:	str	ip, [sp]
    1acc:	bl	1500 <verify_struct>
    1ad0:	str	r0, [fp, #-4]
    1ad4:	ldr	r0, [fp, #-4]
    1ad8:	mov	sp, fp
    1adc:	pop	{fp, pc}

00001ae0 <flatcc_verify_table_as_root>:
    1ae0:	push	{fp, lr}
    1ae4:	mov	fp, sp
    1ae8:	sub	sp, sp, #48	; 0x30
    1aec:	str	r0, [fp, #-8]
    1af0:	str	r1, [fp, #-12]
    1af4:	str	r2, [fp, #-16]
    1af8:	str	r3, [fp, #-20]	; 0xffffffec
    1afc:	ldr	r0, [fp, #-8]
    1b00:	ldr	r1, [fp, #-12]
    1b04:	ldr	r2, [fp, #-16]
    1b08:	bl	167c <flatcc_verify_buffer_header>
    1b0c:	cmp	r0, #0
    1b10:	beq	1b2c <flatcc_verify_table_as_root+0x4c>
    1b14:	ldr	r0, [fp, #-8]
    1b18:	ldr	r1, [fp, #-12]
    1b1c:	ldr	r2, [fp, #-16]
    1b20:	bl	167c <flatcc_verify_buffer_header>
    1b24:	str	r0, [fp, #-4]
    1b28:	b	1b8c <flatcc_verify_table_as_root+0xac>
    1b2c:	ldr	r0, [fp, #-8]
    1b30:	ldr	r1, [fp, #-12]
    1b34:	ldr	r2, [fp, #-8]
    1b38:	str	r0, [sp, #24]
    1b3c:	mov	r0, r2
    1b40:	movw	r2, #0
    1b44:	str	r1, [sp, #20]
    1b48:	mov	r1, r2
    1b4c:	bl	860 <read_uoffset>
    1b50:	ldr	r1, [fp, #-20]	; 0xffffffec
    1b54:	ldr	r2, [sp, #24]
    1b58:	str	r0, [sp, #16]
    1b5c:	mov	r0, r2
    1b60:	ldr	r3, [sp, #20]
    1b64:	str	r1, [sp, #12]
    1b68:	mov	r1, r3
    1b6c:	movw	r2, #0
    1b70:	ldr	r3, [sp, #16]
    1b74:	movw	ip, #100	; 0x64
    1b78:	str	ip, [sp]
    1b7c:	ldr	ip, [sp, #12]
    1b80:	str	ip, [sp, #4]
    1b84:	bl	e30 <verify_table>
    1b88:	str	r0, [fp, #-4]
    1b8c:	ldr	r0, [fp, #-4]
    1b90:	mov	sp, fp
    1b94:	pop	{fp, pc}

00001b98 <flatcc_verify_table_as_typed_root>:
    1b98:	push	{fp, lr}
    1b9c:	mov	fp, sp
    1ba0:	sub	sp, sp, #48	; 0x30
    1ba4:	str	r0, [fp, #-8]
    1ba8:	str	r1, [fp, #-12]
    1bac:	str	r2, [fp, #-16]
    1bb0:	str	r3, [fp, #-20]	; 0xffffffec
    1bb4:	ldr	r0, [fp, #-8]
    1bb8:	ldr	r1, [fp, #-12]
    1bbc:	ldr	r2, [fp, #-16]
    1bc0:	bl	1848 <flatcc_verify_typed_buffer_header>
    1bc4:	cmp	r0, #0
    1bc8:	beq	1be4 <flatcc_verify_table_as_typed_root+0x4c>
    1bcc:	ldr	r0, [fp, #-8]
    1bd0:	ldr	r1, [fp, #-12]
    1bd4:	ldr	r2, [fp, #-16]
    1bd8:	bl	1848 <flatcc_verify_typed_buffer_header>
    1bdc:	str	r0, [fp, #-4]
    1be0:	b	1c44 <flatcc_verify_table_as_typed_root+0xac>
    1be4:	ldr	r0, [fp, #-8]
    1be8:	ldr	r1, [fp, #-12]
    1bec:	ldr	r2, [fp, #-8]
    1bf0:	str	r0, [sp, #24]
    1bf4:	mov	r0, r2
    1bf8:	movw	r2, #0
    1bfc:	str	r1, [sp, #20]
    1c00:	mov	r1, r2
    1c04:	bl	860 <read_uoffset>
    1c08:	ldr	r1, [fp, #-20]	; 0xffffffec
    1c0c:	ldr	r2, [sp, #24]
    1c10:	str	r0, [sp, #16]
    1c14:	mov	r0, r2
    1c18:	ldr	r3, [sp, #20]
    1c1c:	str	r1, [sp, #12]
    1c20:	mov	r1, r3
    1c24:	movw	r2, #0
    1c28:	ldr	r3, [sp, #16]
    1c2c:	movw	ip, #100	; 0x64
    1c30:	str	ip, [sp]
    1c34:	ldr	ip, [sp, #12]
    1c38:	str	ip, [sp, #4]
    1c3c:	bl	e30 <verify_table>
    1c40:	str	r0, [fp, #-4]
    1c44:	ldr	r0, [fp, #-4]
    1c48:	mov	sp, fp
    1c4c:	pop	{fp, pc}

00001c50 <flatcc_verify_struct_as_nested_root>:
    1c50:	push	{fp, lr}
    1c54:	mov	fp, sp
    1c58:	sub	sp, sp, #48	; 0x30
    1c5c:	ldr	ip, [fp, #12]
    1c60:	ldr	lr, [fp, #8]
    1c64:	str	r0, [fp, #-8]
    1c68:	strh	r1, [fp, #-10]
    1c6c:	str	r2, [fp, #-16]
    1c70:	str	r3, [fp, #-20]	; 0xffffffec
    1c74:	strh	ip, [fp, #-22]	; 0xffffffea
    1c78:	ldr	r0, [fp, #-8]
    1c7c:	ldrh	r1, [fp, #-10]
    1c80:	ldr	r2, [fp, #-16]
    1c84:	ldrh	r3, [fp, #-22]	; 0xffffffea
    1c88:	uxth	r1, r1
    1c8c:	movw	ip, #1
    1c90:	uxth	ip, ip
    1c94:	str	ip, [sp]
    1c98:	mvn	ip, #0
    1c9c:	str	ip, [sp, #4]
    1ca0:	str	lr, [sp, #12]
    1ca4:	bl	88c <flatcc_verify_vector_field>
    1ca8:	cmp	r0, #0
    1cac:	beq	1ce4 <flatcc_verify_struct_as_nested_root+0x94>
    1cb0:	ldr	r0, [fp, #-8]
    1cb4:	ldrh	r1, [fp, #-10]
    1cb8:	ldr	r2, [fp, #-16]
    1cbc:	ldrh	r3, [fp, #-22]	; 0xffffffea
    1cc0:	uxth	r1, r1
    1cc4:	movw	ip, #1
    1cc8:	uxth	ip, ip
    1ccc:	str	ip, [sp]
    1cd0:	mvn	ip, #0
    1cd4:	str	ip, [sp, #4]
    1cd8:	bl	88c <flatcc_verify_vector_field>
    1cdc:	str	r0, [fp, #-4]
    1ce0:	b	1d6c <flatcc_verify_struct_as_nested_root+0x11c>
    1ce4:	ldr	r0, [fp, #-8]
    1ce8:	ldrh	r1, [fp, #-10]
    1cec:	bl	1d78 <get_field_ptr>
    1cf0:	str	r0, [sp, #20]
    1cf4:	movw	r1, #0
    1cf8:	cmp	r1, r0
    1cfc:	bne	1d0c <flatcc_verify_struct_as_nested_root+0xbc>
    1d00:	movw	r0, #0
    1d04:	str	r0, [fp, #-4]
    1d08:	b	1d6c <flatcc_verify_struct_as_nested_root+0x11c>
    1d0c:	ldr	r0, [sp, #20]
    1d10:	ldr	r1, [sp, #20]
    1d14:	str	r0, [sp, #8]
    1d18:	mov	r0, r1
    1d1c:	movw	r1, #0
    1d20:	bl	860 <read_uoffset>
    1d24:	ldr	r1, [sp, #8]
    1d28:	add	r0, r1, r0
    1d2c:	str	r0, [sp, #20]
    1d30:	ldr	r0, [sp, #20]
    1d34:	movw	r1, #0
    1d38:	bl	860 <read_uoffset>
    1d3c:	str	r0, [sp, #16]
    1d40:	ldr	r0, [sp, #20]
    1d44:	add	r0, r0, #4
    1d48:	str	r0, [sp, #20]
    1d4c:	ldr	r0, [sp, #20]
    1d50:	ldr	r1, [sp, #16]
    1d54:	ldr	r2, [fp, #-20]	; 0xffffffec
    1d58:	ldr	r3, [fp, #8]
    1d5c:	ldrh	ip, [fp, #-22]	; 0xffffffea
    1d60:	str	ip, [sp]
    1d64:	bl	19a0 <flatcc_verify_struct_as_root>
    1d68:	str	r0, [fp, #-4]
    1d6c:	ldr	r0, [fp, #-4]
    1d70:	mov	sp, fp
    1d74:	pop	{fp, pc}

00001d78 <get_field_ptr>:
    1d78:	push	{fp, lr}
    1d7c:	mov	fp, sp
    1d80:	sub	sp, sp, #16
    1d84:	str	r0, [fp, #-4]
    1d88:	strh	r1, [fp, #-6]
    1d8c:	ldr	r0, [fp, #-4]
    1d90:	ldrh	r1, [fp, #-6]
    1d94:	bl	221c <read_vt_entry>
    1d98:	strh	r0, [sp, #8]
    1d9c:	ldrh	r0, [sp, #8]
    1da0:	cmp	r0, #0
    1da4:	beq	1dcc <get_field_ptr+0x54>
    1da8:	ldr	r0, [fp, #-4]
    1dac:	ldr	r0, [r0]
    1db0:	ldr	r1, [fp, #-4]
    1db4:	ldr	r1, [r1, #16]
    1db8:	add	r0, r0, r1
    1dbc:	ldrh	r1, [sp, #8]
    1dc0:	add	r0, r0, r1
    1dc4:	str	r0, [sp, #4]
    1dc8:	b	1dd8 <get_field_ptr+0x60>
    1dcc:	movw	r0, #0
    1dd0:	str	r0, [sp, #4]
    1dd4:	b	1dd8 <get_field_ptr+0x60>
    1dd8:	ldr	r0, [sp, #4]
    1ddc:	mov	sp, fp
    1de0:	pop	{fp, pc}

00001de4 <flatcc_verify_table_as_nested_root>:
    1de4:	push	{r4, sl, fp, lr}
    1de8:	add	fp, sp, #8
    1dec:	sub	sp, sp, #72	; 0x48
    1df0:	ldr	ip, [fp, #12]
    1df4:	ldr	lr, [fp, #8]
    1df8:	str	r0, [fp, #-16]
    1dfc:	strh	r1, [fp, #-18]	; 0xffffffee
    1e00:	str	r2, [fp, #-24]	; 0xffffffe8
    1e04:	str	r3, [fp, #-28]	; 0xffffffe4
    1e08:	strh	lr, [fp, #-30]	; 0xffffffe2
    1e0c:	ldr	r0, [fp, #-16]
    1e10:	ldrh	r1, [fp, #-18]	; 0xffffffee
    1e14:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1e18:	ldrh	r3, [fp, #-30]	; 0xffffffe2
    1e1c:	uxth	r1, r1
    1e20:	movw	lr, #1
    1e24:	uxth	lr, lr
    1e28:	str	lr, [sp]
    1e2c:	mvn	lr, #0
    1e30:	str	lr, [sp, #4]
    1e34:	str	ip, [sp, #36]	; 0x24
    1e38:	bl	88c <flatcc_verify_vector_field>
    1e3c:	cmp	r0, #0
    1e40:	beq	1e78 <flatcc_verify_table_as_nested_root+0x94>
    1e44:	ldr	r0, [fp, #-16]
    1e48:	ldrh	r1, [fp, #-18]	; 0xffffffee
    1e4c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1e50:	ldrh	r3, [fp, #-30]	; 0xffffffe2
    1e54:	uxth	r1, r1
    1e58:	movw	ip, #1
    1e5c:	uxth	ip, ip
    1e60:	str	ip, [sp]
    1e64:	mvn	ip, #0
    1e68:	str	ip, [sp, #4]
    1e6c:	bl	88c <flatcc_verify_vector_field>
    1e70:	str	r0, [fp, #-12]
    1e74:	b	1f80 <flatcc_verify_table_as_nested_root+0x19c>
    1e78:	ldr	r0, [fp, #-16]
    1e7c:	ldrh	r1, [fp, #-18]	; 0xffffffee
    1e80:	bl	1d78 <get_field_ptr>
    1e84:	str	r0, [fp, #-36]	; 0xffffffdc
    1e88:	movw	r1, #0
    1e8c:	cmp	r1, r0
    1e90:	bne	1ea0 <flatcc_verify_table_as_nested_root+0xbc>
    1e94:	movw	r0, #0
    1e98:	str	r0, [fp, #-12]
    1e9c:	b	1f80 <flatcc_verify_table_as_nested_root+0x19c>
    1ea0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1ea4:	ldr	r1, [fp, #-36]	; 0xffffffdc
    1ea8:	str	r0, [sp, #32]
    1eac:	mov	r0, r1
    1eb0:	movw	r1, #0
    1eb4:	bl	860 <read_uoffset>
    1eb8:	ldr	r1, [sp, #32]
    1ebc:	add	r0, r1, r0
    1ec0:	str	r0, [fp, #-36]	; 0xffffffdc
    1ec4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1ec8:	movw	r1, #0
    1ecc:	bl	860 <read_uoffset>
    1ed0:	str	r0, [sp, #40]	; 0x28
    1ed4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1ed8:	add	r0, r0, #4
    1edc:	str	r0, [fp, #-36]	; 0xffffffdc
    1ee0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1ee4:	ldr	r1, [sp, #40]	; 0x28
    1ee8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1eec:	bl	167c <flatcc_verify_buffer_header>
    1ef0:	cmp	r0, #0
    1ef4:	beq	1f10 <flatcc_verify_table_as_nested_root+0x12c>
    1ef8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1efc:	ldr	r1, [sp, #40]	; 0x28
    1f00:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1f04:	bl	167c <flatcc_verify_buffer_header>
    1f08:	str	r0, [fp, #-12]
    1f0c:	b	1f80 <flatcc_verify_table_as_nested_root+0x19c>
    1f10:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1f14:	ldr	r1, [sp, #40]	; 0x28
    1f18:	ldr	r2, [fp, #-36]	; 0xffffffdc
    1f1c:	str	r0, [sp, #28]
    1f20:	mov	r0, r2
    1f24:	movw	r2, #0
    1f28:	str	r1, [sp, #24]
    1f2c:	mov	r1, r2
    1f30:	bl	860 <read_uoffset>
    1f34:	ldr	r1, [fp, #-16]
    1f38:	ldr	r1, [r1, #8]
    1f3c:	ldr	r2, [fp, #12]
    1f40:	ldr	r3, [sp, #28]
    1f44:	str	r0, [sp, #20]
    1f48:	mov	r0, r3
    1f4c:	ldr	ip, [sp, #24]
    1f50:	str	r1, [sp, #16]
    1f54:	mov	r1, ip
    1f58:	movw	lr, #0
    1f5c:	str	r2, [sp, #12]
    1f60:	mov	r2, lr
    1f64:	ldr	r3, [sp, #20]
    1f68:	ldr	lr, [sp, #16]
    1f6c:	str	lr, [sp]
    1f70:	ldr	r4, [sp, #12]
    1f74:	str	r4, [sp, #4]
    1f78:	bl	e30 <verify_table>
    1f7c:	str	r0, [fp, #-12]
    1f80:	ldr	r0, [fp, #-12]
    1f84:	sub	sp, fp, #8
    1f88:	pop	{r4, sl, fp, pc}

00001f8c <flatcc_verify_union_field>:
    1f8c:	push	{fp, lr}
    1f90:	mov	fp, sp
    1f94:	sub	sp, sp, #88	; 0x58
    1f98:	str	r0, [fp, #-8]
    1f9c:	strh	r1, [fp, #-10]
    1fa0:	str	r2, [fp, #-16]
    1fa4:	str	r3, [fp, #-20]	; 0xffffffec
    1fa8:	ldr	r0, [fp, #-8]
    1fac:	ldrh	r1, [fp, #-10]
    1fb0:	sub	r1, r1, #1
    1fb4:	uxth	r1, r1
    1fb8:	bl	221c <read_vt_entry>
    1fbc:	strh	r0, [fp, #-22]	; 0xffffffea
    1fc0:	uxth	r0, r0
    1fc4:	movw	r1, #0
    1fc8:	cmp	r1, r0
    1fcc:	bne	2060 <flatcc_verify_union_field+0xd4>
    1fd0:	ldr	r0, [fp, #-8]
    1fd4:	ldrh	r1, [fp, #-10]
    1fd8:	bl	221c <read_vt_entry>
    1fdc:	strh	r0, [fp, #-24]	; 0xffffffe8
    1fe0:	ldrh	r0, [fp, #-24]	; 0xffffffe8
    1fe4:	cmp	r0, #0
    1fe8:	movw	r0, #0
    1fec:	moveq	r0, #1
    1ff0:	and	r0, r0, #1
    1ff4:	str	r0, [sp, #28]
    1ff8:	ldr	r0, [sp, #28]
    1ffc:	cmp	r0, #0
    2000:	bne	2010 <flatcc_verify_union_field+0x84>
    2004:	movw	r0, #23
    2008:	str	r0, [fp, #-4]
    200c:	b	2210 <flatcc_verify_union_field+0x284>
    2010:	b	2014 <flatcc_verify_union_field+0x88>
    2014:	b	2018 <flatcc_verify_union_field+0x8c>
    2018:	ldr	r0, [fp, #-16]
    201c:	cmp	r0, #0
    2020:	movw	r0, #0
    2024:	movne	r0, #1
    2028:	mvn	r1, #0
    202c:	eor	r0, r0, r1
    2030:	and	r0, r0, #1
    2034:	str	r0, [sp, #24]
    2038:	ldr	r0, [sp, #24]
    203c:	cmp	r0, #0
    2040:	bne	2050 <flatcc_verify_union_field+0xc4>
    2044:	movw	r0, #21
    2048:	str	r0, [fp, #-4]
    204c:	b	2210 <flatcc_verify_union_field+0x284>
    2050:	b	2054 <flatcc_verify_union_field+0xc8>
    2054:	movw	r0, #0
    2058:	str	r0, [fp, #-4]
    205c:	b	2210 <flatcc_verify_union_field+0x284>
    2060:	ldr	r0, [fp, #-8]
    2064:	ldrh	r1, [fp, #-10]
    2068:	sub	r1, r1, #1
    206c:	uxth	r1, r1
    2070:	movw	r2, #0
    2074:	movw	r3, #1
    2078:	movw	ip, #1
    207c:	uxth	ip, ip
    2080:	str	ip, [sp]
    2084:	bl	3a4 <verify_field>
    2088:	cmp	r0, #0
    208c:	beq	20c0 <flatcc_verify_union_field+0x134>
    2090:	ldr	r0, [fp, #-8]
    2094:	ldrh	r1, [fp, #-10]
    2098:	sub	r1, r1, #1
    209c:	uxth	r1, r1
    20a0:	movw	r2, #0
    20a4:	movw	r3, #1
    20a8:	movw	ip, #1
    20ac:	uxth	ip, ip
    20b0:	str	ip, [sp]
    20b4:	bl	3a4 <verify_field>
    20b8:	str	r0, [fp, #-4]
    20bc:	b	2210 <flatcc_verify_union_field+0x284>
    20c0:	ldr	r0, [fp, #-8]
    20c4:	ldrh	r1, [fp, #-10]
    20c8:	bl	221c <read_vt_entry>
    20cc:	strh	r0, [fp, #-24]	; 0xffffffe8
    20d0:	ldr	r0, [fp, #-8]
    20d4:	ldr	r0, [r0]
    20d8:	ldr	r1, [fp, #-8]
    20dc:	ldr	r1, [r1, #16]
    20e0:	add	r0, r0, r1
    20e4:	ldrh	r1, [fp, #-22]	; 0xffffffea
    20e8:	add	r0, r0, r1
    20ec:	str	r0, [fp, #-28]	; 0xffffffe4
    20f0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    20f4:	ldrb	r0, [r0]
    20f8:	cmp	r0, #0
    20fc:	movw	r0, #1
    2100:	str	r0, [sp, #12]
    2104:	bne	211c <flatcc_verify_union_field+0x190>
    2108:	ldrh	r0, [fp, #-24]	; 0xffffffe8
    210c:	cmp	r0, #0
    2110:	movw	r0, #0
    2114:	moveq	r0, #1
    2118:	str	r0, [sp, #12]
    211c:	ldr	r0, [sp, #12]
    2120:	and	r0, r0, #1
    2124:	str	r0, [sp, #20]
    2128:	ldr	r0, [sp, #20]
    212c:	cmp	r0, #0
    2130:	bne	2140 <flatcc_verify_union_field+0x1b4>
    2134:	movw	r0, #24
    2138:	str	r0, [fp, #-4]
    213c:	b	2210 <flatcc_verify_union_field+0x284>
    2140:	b	2144 <flatcc_verify_union_field+0x1b8>
    2144:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2148:	ldrb	r0, [r0]
    214c:	cmp	r0, #0
    2150:	bne	2160 <flatcc_verify_union_field+0x1d4>
    2154:	movw	r0, #0
    2158:	str	r0, [fp, #-4]
    215c:	b	2210 <flatcc_verify_union_field+0x284>
    2160:	b	2164 <flatcc_verify_union_field+0x1d8>
    2164:	ldr	r0, [fp, #-8]
    2168:	ldrh	r1, [fp, #-10]
    216c:	ldr	r2, [fp, #-16]
    2170:	uxth	r1, r1
    2174:	sub	r3, fp, #32
    2178:	bl	5f0 <get_offset_field>
    217c:	str	r0, [sp, #16]
    2180:	ldr	r0, [sp, #16]
    2184:	cmp	r0, #0
    2188:	bne	2198 <flatcc_verify_union_field+0x20c>
    218c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2190:	cmp	r0, #0
    2194:	bne	21a4 <flatcc_verify_union_field+0x218>
    2198:	ldr	r0, [sp, #16]
    219c:	str	r0, [fp, #-4]
    21a0:	b	2210 <flatcc_verify_union_field+0x284>
    21a4:	b	21a8 <flatcc_verify_union_field+0x21c>
    21a8:	ldr	r0, [fp, #-8]
    21ac:	ldr	r0, [r0]
    21b0:	str	r0, [sp, #32]
    21b4:	ldr	r0, [fp, #-8]
    21b8:	ldr	r0, [r0, #4]
    21bc:	str	r0, [sp, #36]	; 0x24
    21c0:	ldr	r0, [fp, #-8]
    21c4:	ldr	r0, [r0, #8]
    21c8:	str	r0, [sp, #40]	; 0x28
    21cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    21d0:	str	r0, [sp, #48]	; 0x30
    21d4:	ldr	r0, [fp, #-8]
    21d8:	ldr	r0, [r0]
    21dc:	ldr	r1, [fp, #-32]	; 0xffffffe0
    21e0:	bl	860 <read_uoffset>
    21e4:	str	r0, [sp, #52]	; 0x34
    21e8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    21ec:	ldrb	r0, [r0]
    21f0:	strb	r0, [sp, #44]	; 0x2c
    21f4:	ldr	r0, [fp, #-20]	; 0xffffffec
    21f8:	add	r1, sp, #32
    21fc:	str	r0, [sp, #8]
    2200:	mov	r0, r1
    2204:	ldr	r1, [sp, #8]
    2208:	blx	r1
    220c:	str	r0, [fp, #-4]
    2210:	ldr	r0, [fp, #-4]
    2214:	mov	sp, fp
    2218:	pop	{fp, pc}

0000221c <read_vt_entry>:
    221c:	push	{fp, lr}
    2220:	mov	fp, sp
    2224:	sub	sp, sp, #16
    2228:	str	r0, [sp, #8]
    222c:	strh	r1, [sp, #6]
    2230:	ldrh	r0, [sp, #6]
    2234:	add	r0, r0, #2
    2238:	lsl	r0, r0, #1
    223c:	strh	r0, [sp, #4]
    2240:	ldrh	r0, [sp, #4]
    2244:	ldr	r1, [sp, #8]
    2248:	ldrh	r1, [r1, #22]
    224c:	cmp	r0, r1
    2250:	blt	2260 <read_vt_entry+0x44>
    2254:	movw	r0, #0
    2258:	str	r0, [fp, #-4]
    225c:	b	2278 <read_vt_entry+0x5c>
    2260:	ldr	r0, [sp, #8]
    2264:	ldr	r0, [r0, #12]
    2268:	ldrh	r1, [sp, #4]
    226c:	bl	296c <read_voffset>
    2270:	uxth	r0, r0
    2274:	str	r0, [fp, #-4]
    2278:	ldr	r0, [fp, #-4]
    227c:	mov	sp, fp
    2280:	pop	{fp, pc}

00002284 <flatcc_verify_union_vector_field>:
    2284:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    2288:	add	fp, sp, #24
    228c:	sub	sp, sp, #96	; 0x60
    2290:	str	r0, [fp, #-32]	; 0xffffffe0
    2294:	strh	r1, [fp, #-34]	; 0xffffffde
    2298:	str	r2, [fp, #-40]	; 0xffffffd8
    229c:	str	r3, [fp, #-44]	; 0xffffffd4
    22a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    22a4:	ldrh	r1, [fp, #-34]	; 0xffffffde
    22a8:	sub	r1, r1, #1
    22ac:	uxth	r1, r1
    22b0:	bl	221c <read_vt_entry>
    22b4:	strh	r0, [fp, #-46]	; 0xffffffd2
    22b8:	uxth	r0, r0
    22bc:	movw	r1, #0
    22c0:	cmp	r1, r0
    22c4:	bne	2330 <flatcc_verify_union_vector_field+0xac>
    22c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    22cc:	ldrh	r1, [fp, #-34]	; 0xffffffde
    22d0:	bl	221c <read_vt_entry>
    22d4:	strh	r0, [fp, #-48]	; 0xffffffd0
    22d8:	uxth	r0, r0
    22dc:	movw	r1, #0
    22e0:	cmp	r1, r0
    22e4:	bne	232c <flatcc_verify_union_vector_field+0xa8>
    22e8:	b	22ec <flatcc_verify_union_vector_field+0x68>
    22ec:	ldr	r0, [fp, #-40]	; 0xffffffd8
    22f0:	cmp	r0, #0
    22f4:	movw	r0, #0
    22f8:	movne	r0, #1
    22fc:	mvn	r1, #0
    2300:	eor	r0, r0, r1
    2304:	and	r0, r0, #1
    2308:	str	r0, [sp, #52]	; 0x34
    230c:	ldr	r0, [sp, #52]	; 0x34
    2310:	cmp	r0, #0
    2314:	bne	2324 <flatcc_verify_union_vector_field+0xa0>
    2318:	movw	r0, #22
    231c:	str	r0, [fp, #-28]	; 0xffffffe4
    2320:	b	24fc <flatcc_verify_union_vector_field+0x278>
    2324:	b	2328 <flatcc_verify_union_vector_field+0xa4>
    2328:	b	232c <flatcc_verify_union_vector_field+0xa8>
    232c:	b	2330 <flatcc_verify_union_vector_field+0xac>
    2330:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2334:	ldrh	r1, [fp, #-34]	; 0xffffffde
    2338:	sub	r1, r1, #1
    233c:	ldr	r2, [fp, #-40]	; 0xffffffd8
    2340:	uxth	r1, r1
    2344:	movw	r3, #1
    2348:	movw	ip, #1
    234c:	uxth	ip, ip
    2350:	str	ip, [sp]
    2354:	mvn	ip, #0
    2358:	str	ip, [sp, #4]
    235c:	bl	88c <flatcc_verify_vector_field>
    2360:	cmp	r0, #0
    2364:	beq	23a0 <flatcc_verify_union_vector_field+0x11c>
    2368:	ldr	r0, [fp, #-32]	; 0xffffffe0
    236c:	ldrh	r1, [fp, #-34]	; 0xffffffde
    2370:	sub	r1, r1, #1
    2374:	ldr	r2, [fp, #-40]	; 0xffffffd8
    2378:	uxth	r1, r1
    237c:	movw	r3, #1
    2380:	movw	ip, #1
    2384:	uxth	ip, ip
    2388:	str	ip, [sp]
    238c:	mvn	ip, #0
    2390:	str	ip, [sp, #4]
    2394:	bl	88c <flatcc_verify_vector_field>
    2398:	str	r0, [fp, #-28]	; 0xffffffe4
    239c:	b	24fc <flatcc_verify_union_vector_field+0x278>
    23a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    23a4:	ldrh	r1, [fp, #-34]	; 0xffffffde
    23a8:	sub	r1, r1, #1
    23ac:	uxth	r1, r1
    23b0:	bl	1d78 <get_field_ptr>
    23b4:	str	r0, [fp, #-52]	; 0xffffffcc
    23b8:	movw	r1, #0
    23bc:	cmp	r1, r0
    23c0:	bne	23d0 <flatcc_verify_union_vector_field+0x14c>
    23c4:	movw	r0, #0
    23c8:	str	r0, [fp, #-28]	; 0xffffffe4
    23cc:	b	24fc <flatcc_verify_union_vector_field+0x278>
    23d0:	ldr	r0, [fp, #-52]	; 0xffffffcc
    23d4:	ldr	r1, [fp, #-52]	; 0xffffffcc
    23d8:	str	r0, [sp, #44]	; 0x2c
    23dc:	mov	r0, r1
    23e0:	movw	r1, #0
    23e4:	bl	860 <read_uoffset>
    23e8:	ldr	r1, [sp, #44]	; 0x2c
    23ec:	add	r0, r1, r0
    23f0:	str	r0, [fp, #-52]	; 0xffffffcc
    23f4:	ldr	r0, [fp, #-52]	; 0xffffffcc
    23f8:	movw	r1, #0
    23fc:	bl	860 <read_uoffset>
    2400:	str	r0, [sp, #60]	; 0x3c
    2404:	ldr	r0, [fp, #-52]	; 0xffffffcc
    2408:	add	r0, r0, #4
    240c:	str	r0, [fp, #-52]	; 0xffffffcc
    2410:	ldr	r0, [fp, #-52]	; 0xffffffcc
    2414:	str	r0, [fp, #-56]	; 0xffffffc8
    2418:	ldr	r0, [fp, #-32]	; 0xffffffe0
    241c:	ldrh	r1, [fp, #-34]	; 0xffffffde
    2420:	ldr	r2, [fp, #-40]	; 0xffffffd8
    2424:	uxth	r1, r1
    2428:	add	r3, sp, #56	; 0x38
    242c:	bl	5f0 <get_offset_field>
    2430:	str	r0, [sp, #48]	; 0x30
    2434:	ldr	r0, [sp, #48]	; 0x30
    2438:	cmp	r0, #0
    243c:	bne	244c <flatcc_verify_union_vector_field+0x1c8>
    2440:	ldr	r0, [sp, #56]	; 0x38
    2444:	cmp	r0, #0
    2448:	bne	2458 <flatcc_verify_union_vector_field+0x1d4>
    244c:	ldr	r0, [sp, #48]	; 0x30
    2450:	str	r0, [fp, #-28]	; 0xffffffe4
    2454:	b	24fc <flatcc_verify_union_vector_field+0x278>
    2458:	b	245c <flatcc_verify_union_vector_field+0x1d8>
    245c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2460:	ldr	r0, [r0]
    2464:	ldr	r1, [fp, #-32]	; 0xffffffe0
    2468:	ldr	r1, [r1, #4]
    246c:	ldr	r2, [sp, #56]	; 0x38
    2470:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2474:	ldr	r3, [r3]
    2478:	ldr	ip, [sp, #56]	; 0x38
    247c:	str	r0, [sp, #40]	; 0x28
    2480:	mov	r0, r3
    2484:	str	r1, [sp, #36]	; 0x24
    2488:	mov	r1, ip
    248c:	str	r2, [sp, #32]
    2490:	bl	860 <read_uoffset>
    2494:	ldr	r1, [sp, #60]	; 0x3c
    2498:	ldr	r2, [fp, #-56]	; 0xffffffc8
    249c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    24a0:	ldr	r3, [r3, #8]
    24a4:	ldr	ip, [fp, #-44]	; 0xffffffd4
    24a8:	ldr	lr, [sp, #40]	; 0x28
    24ac:	str	r0, [sp, #28]
    24b0:	mov	r0, lr
    24b4:	ldr	r4, [sp, #36]	; 0x24
    24b8:	str	r1, [sp, #24]
    24bc:	mov	r1, r4
    24c0:	ldr	r5, [sp, #32]
    24c4:	str	r2, [sp, #20]
    24c8:	mov	r2, r5
    24cc:	ldr	r6, [sp, #28]
    24d0:	str	r3, [sp, #16]
    24d4:	mov	r3, r6
    24d8:	ldr	r7, [sp, #24]
    24dc:	str	r7, [sp]
    24e0:	ldr	r8, [sp, #20]
    24e4:	str	r8, [sp, #4]
    24e8:	ldr	r9, [sp, #16]
    24ec:	str	r9, [sp, #8]
    24f0:	str	ip, [sp, #12]
    24f4:	bl	2508 <verify_union_vector>
    24f8:	str	r0, [fp, #-28]	; 0xffffffe4
    24fc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2500:	sub	sp, fp, #24
    2504:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00002508 <verify_union_vector>:
    2508:	push	{r4, r5, fp, lr}
    250c:	add	fp, sp, #8
    2510:	sub	sp, sp, #104	; 0x68
    2514:	ldr	ip, [fp, #20]
    2518:	ldr	lr, [fp, #16]
    251c:	ldr	r4, [fp, #12]
    2520:	ldr	r5, [fp, #8]
    2524:	str	r0, [fp, #-16]
    2528:	str	r1, [fp, #-20]	; 0xffffffec
    252c:	str	r2, [fp, #-24]	; 0xffffffe8
    2530:	str	r3, [fp, #-28]	; 0xffffffe4
    2534:	ldr	r0, [fp, #16]
    2538:	mvn	r1, #0
    253c:	add	r1, r0, r1
    2540:	str	r1, [fp, #16]
    2544:	cmp	r0, #0
    2548:	movw	r0, #0
    254c:	movgt	r0, #1
    2550:	and	r0, r0, #1
    2554:	str	r0, [sp, #44]	; 0x2c
    2558:	ldr	r0, [sp, #44]	; 0x2c
    255c:	cmp	r0, #0
    2560:	bne	2570 <verify_union_vector+0x68>
    2564:	movw	r0, #3
    2568:	str	r0, [fp, #-12]
    256c:	b	27e0 <verify_union_vector+0x2d8>
    2570:	b	2574 <verify_union_vector+0x6c>
    2574:	ldr	r0, [pc, #624]	; 27ec <verify_union_vector+0x2e4>
    2578:	ldr	r1, [fp, #-16]
    257c:	ldr	r2, [fp, #-20]	; 0xffffffec
    2580:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2584:	ldr	ip, [fp, #-28]	; 0xffffffe4
    2588:	str	r0, [sp, #28]
    258c:	mov	r0, r1
    2590:	mov	r1, r2
    2594:	mov	r2, r3
    2598:	mov	r3, ip
    259c:	movw	ip, #4
    25a0:	str	ip, [sp]
    25a4:	movw	ip, #4
    25a8:	uxth	ip, ip
    25ac:	str	ip, [sp, #4]
    25b0:	ldr	ip, [sp, #28]
    25b4:	str	ip, [sp, #8]
    25b8:	bl	99c <verify_vector>
    25bc:	cmp	r0, #0
    25c0:	beq	2614 <verify_union_vector+0x10c>
    25c4:	ldr	r0, [pc, #544]	; 27ec <verify_union_vector+0x2e4>
    25c8:	ldr	r1, [fp, #-16]
    25cc:	ldr	r2, [fp, #-20]	; 0xffffffec
    25d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    25d4:	ldr	ip, [fp, #-28]	; 0xffffffe4
    25d8:	str	r0, [sp, #24]
    25dc:	mov	r0, r1
    25e0:	mov	r1, r2
    25e4:	mov	r2, r3
    25e8:	mov	r3, ip
    25ec:	movw	ip, #4
    25f0:	str	ip, [sp]
    25f4:	movw	ip, #4
    25f8:	uxth	ip, ip
    25fc:	str	ip, [sp, #4]
    2600:	ldr	ip, [sp, #24]
    2604:	str	ip, [sp, #8]
    2608:	bl	99c <verify_vector>
    260c:	str	r0, [fp, #-12]
    2610:	b	27e0 <verify_union_vector+0x2d8>
    2614:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2618:	ldr	r1, [fp, #-24]	; 0xffffffe8
    261c:	add	r0, r1, r0
    2620:	str	r0, [fp, #-24]	; 0xffffffe8
    2624:	ldr	r0, [fp, #-16]
    2628:	ldr	r1, [fp, #-24]	; 0xffffffe8
    262c:	bl	860 <read_uoffset>
    2630:	str	r0, [fp, #-36]	; 0xffffffdc
    2634:	ldr	r0, [fp, #-36]	; 0xffffffdc
    2638:	ldr	r1, [fp, #8]
    263c:	cmp	r0, r1
    2640:	movw	r0, #0
    2644:	moveq	r0, #1
    2648:	and	r0, r0, #1
    264c:	str	r0, [sp, #40]	; 0x28
    2650:	ldr	r0, [sp, #40]	; 0x28
    2654:	cmp	r0, #0
    2658:	bne	2668 <verify_union_vector+0x160>
    265c:	movw	r0, #34	; 0x22
    2660:	str	r0, [fp, #-12]
    2664:	b	27e0 <verify_union_vector+0x2d8>
    2668:	b	266c <verify_union_vector+0x164>
    266c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2670:	add	r0, r0, #4
    2674:	str	r0, [fp, #-24]	; 0xffffffe8
    2678:	ldr	r0, [fp, #-16]
    267c:	str	r0, [sp, #48]	; 0x30
    2680:	ldr	r0, [fp, #-20]	; 0xffffffec
    2684:	str	r0, [sp, #52]	; 0x34
    2688:	ldr	r0, [fp, #16]
    268c:	str	r0, [sp, #56]	; 0x38
    2690:	movw	r0, #0
    2694:	str	r0, [fp, #-32]	; 0xffffffe0
    2698:	ldr	r0, [fp, #-32]	; 0xffffffe0
    269c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    26a0:	cmp	r0, r1
    26a4:	bcs	27d8 <verify_union_vector+0x2d0>
    26a8:	ldr	r0, [fp, #-16]
    26ac:	ldr	r1, [fp, #-24]	; 0xffffffe8
    26b0:	bl	860 <read_uoffset>
    26b4:	str	r0, [fp, #-40]	; 0xffffffd8
    26b8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    26bc:	cmp	r0, #0
    26c0:	bne	270c <verify_union_vector+0x204>
    26c4:	b	26c8 <verify_union_vector+0x1c0>
    26c8:	ldr	r0, [fp, #12]
    26cc:	ldr	r1, [fp, #-32]	; 0xffffffe0
    26d0:	add	r0, r0, r1
    26d4:	ldrb	r0, [r0]
    26d8:	cmp	r0, #0
    26dc:	movw	r0, #0
    26e0:	moveq	r0, #1
    26e4:	and	r0, r0, #1
    26e8:	str	r0, [sp, #36]	; 0x24
    26ec:	ldr	r0, [sp, #36]	; 0x24
    26f0:	cmp	r0, #0
    26f4:	bne	2704 <verify_union_vector+0x1fc>
    26f8:	movw	r0, #32
    26fc:	str	r0, [fp, #-12]
    2700:	b	27e0 <verify_union_vector+0x2d8>
    2704:	b	2708 <verify_union_vector+0x200>
    2708:	b	27b8 <verify_union_vector+0x2b0>
    270c:	b	2710 <verify_union_vector+0x208>
    2710:	ldr	r0, [fp, #12]
    2714:	ldr	r1, [fp, #-32]	; 0xffffffe0
    2718:	add	r0, r0, r1
    271c:	ldrb	r0, [r0]
    2720:	cmp	r0, #0
    2724:	movw	r0, #0
    2728:	movne	r0, #1
    272c:	and	r0, r0, #1
    2730:	str	r0, [sp, #32]
    2734:	ldr	r0, [sp, #32]
    2738:	cmp	r0, #0
    273c:	bne	274c <verify_union_vector+0x244>
    2740:	movw	r0, #33	; 0x21
    2744:	str	r0, [fp, #-12]
    2748:	b	27e0 <verify_union_vector+0x2d8>
    274c:	b	2750 <verify_union_vector+0x248>
    2750:	ldr	r0, [fp, #12]
    2754:	ldr	r1, [fp, #-32]	; 0xffffffe0
    2758:	add	r0, r0, r1
    275c:	ldrb	r0, [r0]
    2760:	strb	r0, [sp, #60]	; 0x3c
    2764:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2768:	str	r0, [sp, #64]	; 0x40
    276c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2770:	str	r0, [sp, #68]	; 0x44
    2774:	ldr	r0, [fp, #20]
    2778:	add	r1, sp, #48	; 0x30
    277c:	str	r0, [sp, #20]
    2780:	mov	r0, r1
    2784:	ldr	r1, [sp, #20]
    2788:	blx	r1
    278c:	cmp	r0, #0
    2790:	beq	27b4 <verify_union_vector+0x2ac>
    2794:	ldr	r0, [fp, #20]
    2798:	add	r1, sp, #48	; 0x30
    279c:	str	r0, [sp, #16]
    27a0:	mov	r0, r1
    27a4:	ldr	r1, [sp, #16]
    27a8:	blx	r1
    27ac:	str	r0, [fp, #-12]
    27b0:	b	27e0 <verify_union_vector+0x2d8>
    27b4:	b	27b8 <verify_union_vector+0x2b0>
    27b8:	b	27bc <verify_union_vector+0x2b4>
    27bc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    27c0:	add	r0, r0, #1
    27c4:	str	r0, [fp, #-32]	; 0xffffffe0
    27c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    27cc:	add	r0, r0, #4
    27d0:	str	r0, [fp, #-24]	; 0xffffffe8
    27d4:	b	2698 <verify_union_vector+0x190>
    27d8:	movw	r0, #0
    27dc:	str	r0, [fp, #-12]
    27e0:	ldr	r0, [fp, #-12]
    27e4:	sub	sp, fp, #8
    27e8:	pop	{r4, r5, fp, pc}
    27ec:	.word	0x3fffffff

000027f0 <check_header>:
    27f0:	sub	sp, sp, #20
    27f4:	str	r0, [sp, #16]
    27f8:	str	r1, [sp, #12]
    27fc:	str	r2, [sp, #8]
    2800:	ldr	r0, [sp, #12]
    2804:	ldr	r1, [sp, #8]
    2808:	add	r0, r0, r1
    280c:	str	r0, [sp, #4]
    2810:	ldr	r0, [sp, #4]
    2814:	ldr	r1, [sp, #12]
    2818:	cmp	r0, r1
    281c:	movw	r0, #0
    2820:	str	r0, [sp]
    2824:	bls	2864 <check_header+0x74>
    2828:	ldr	r0, [sp, #4]
    282c:	add	r0, r0, #4
    2830:	ldr	r1, [sp, #16]
    2834:	cmp	r0, r1
    2838:	movw	r0, #0
    283c:	str	r0, [sp]
    2840:	bhi	2864 <check_header+0x74>
    2844:	ldr	r0, [sp, #4]
    2848:	and	r0, r0, #3
    284c:	cmp	r0, #0
    2850:	movw	r0, #0
    2854:	movne	r0, #1
    2858:	mvn	r1, #0
    285c:	eor	r0, r0, r1
    2860:	str	r0, [sp]
    2864:	ldr	r0, [sp]
    2868:	and	r0, r0, #1
    286c:	add	sp, sp, #20
    2870:	bx	lr

00002874 <__flatbuffers_uoffset_read_from_pe>:
    2874:	push	{fp, lr}
    2878:	mov	fp, sp
    287c:	sub	sp, sp, #8
    2880:	str	r0, [sp, #4]
    2884:	ldr	r0, [sp, #4]
    2888:	ldr	r0, [r0]
    288c:	bl	2898 <__flatbuffers_uoffset_cast_from_pe>
    2890:	mov	sp, fp
    2894:	pop	{fp, pc}

00002898 <__flatbuffers_uoffset_cast_from_pe>:
    2898:	sub	sp, sp, #4
    289c:	str	r0, [sp]
    28a0:	ldr	r0, [sp]
    28a4:	add	sp, sp, #4
    28a8:	bx	lr

000028ac <check_aligned_header>:
    28ac:	sub	sp, sp, #28
    28b0:	str	r0, [sp, #24]
    28b4:	str	r1, [sp, #20]
    28b8:	str	r2, [sp, #16]
    28bc:	strh	r3, [sp, #14]
    28c0:	ldr	r0, [sp, #20]
    28c4:	ldr	r1, [sp, #16]
    28c8:	add	r0, r0, r1
    28cc:	str	r0, [sp, #8]
    28d0:	ldrh	r0, [sp, #14]
    28d4:	cmp	r0, #4
    28d8:	bcs	28e8 <check_aligned_header+0x3c>
    28dc:	movw	r0, #4
    28e0:	str	r0, [sp, #4]
    28e4:	b	28f0 <check_aligned_header+0x44>
    28e8:	ldrh	r0, [sp, #14]
    28ec:	str	r0, [sp, #4]
    28f0:	ldr	r0, [sp, #4]
    28f4:	strh	r0, [sp, #14]
    28f8:	ldr	r0, [sp, #8]
    28fc:	ldr	r1, [sp, #20]
    2900:	cmp	r0, r1
    2904:	movw	r0, #0
    2908:	str	r0, [sp]
    290c:	bls	295c <check_aligned_header+0xb0>
    2910:	ldr	r0, [sp, #8]
    2914:	add	r0, r0, #4
    2918:	ldr	r1, [sp, #24]
    291c:	cmp	r0, r1
    2920:	movw	r0, #0
    2924:	str	r0, [sp]
    2928:	bhi	295c <check_aligned_header+0xb0>
    292c:	ldr	r0, [sp, #8]
    2930:	add	r0, r0, #4
    2934:	ldrh	r1, [sp, #14]
    2938:	sub	r1, r1, #1
    293c:	orr	r1, r1, #3
    2940:	and	r0, r0, r1
    2944:	cmp	r0, #0
    2948:	movw	r0, #0
    294c:	movne	r0, #1
    2950:	mvn	r1, #0
    2954:	eor	r0, r0, r1
    2958:	str	r0, [sp]
    295c:	ldr	r0, [sp]
    2960:	and	r0, r0, #1
    2964:	add	sp, sp, #28
    2968:	bx	lr

0000296c <read_voffset>:
    296c:	push	{fp, lr}
    2970:	mov	fp, sp
    2974:	sub	sp, sp, #8
    2978:	str	r0, [sp, #4]
    297c:	str	r1, [sp]
    2980:	ldr	r0, [sp, #4]
    2984:	ldr	r1, [sp]
    2988:	add	r0, r0, r1
    298c:	bl	299c <__flatbuffers_voffset_read_from_pe>
    2990:	uxth	r0, r0
    2994:	mov	sp, fp
    2998:	pop	{fp, pc}

0000299c <__flatbuffers_voffset_read_from_pe>:
    299c:	push	{fp, lr}
    29a0:	mov	fp, sp
    29a4:	sub	sp, sp, #8
    29a8:	str	r0, [sp, #4]
    29ac:	ldr	r0, [sp, #4]
    29b0:	ldrh	r0, [r0]
    29b4:	bl	29c4 <__flatbuffers_voffset_cast_from_pe>
    29b8:	uxth	r0, r0
    29bc:	mov	sp, fp
    29c0:	pop	{fp, pc}

000029c4 <__flatbuffers_voffset_cast_from_pe>:
    29c4:	sub	sp, sp, #4
    29c8:	strh	r0, [sp, #2]
    29cc:	ldrh	r0, [sp, #2]
    29d0:	add	sp, sp, #4
    29d4:	bx	lr

000029d8 <__flatbuffers_thash_cast_from_le>:
    29d8:	sub	sp, sp, #4
    29dc:	str	r0, [sp]
    29e0:	ldr	r0, [sp]
    29e4:	add	sp, sp, #4
    29e8:	bx	lr

000029ec <__flatbuffers_thash_read_from_pe>:
    29ec:	push	{fp, lr}
    29f0:	mov	fp, sp
    29f4:	sub	sp, sp, #8
    29f8:	str	r0, [sp, #4]
    29fc:	ldr	r0, [sp, #4]
    2a00:	ldr	r0, [r0]
    2a04:	bl	2a10 <__flatbuffers_thash_cast_from_pe>
    2a08:	mov	sp, fp
    2a0c:	pop	{fp, pc}

00002a10 <__flatbuffers_thash_cast_from_pe>:
    2a10:	sub	sp, sp, #4
    2a14:	str	r0, [sp]
    2a18:	ldr	r0, [sp]
    2a1c:	add	sp, sp, #4
    2a20:	bx	lr
