
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/json_test/CMakeFiles/json_test_uq.dir/__/__/src/runtime/emitter.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <flatcc_emitter_recycle_page>:
   0:	sub	sp, sp, #12
   4:	str	r0, [sp, #4]
   8:	str	r1, [sp]
   c:	ldr	r0, [sp]
  10:	ldr	r1, [sp, #4]
  14:	ldr	r1, [r1]
  18:	cmp	r0, r1
  1c:	beq	34 <flatcc_emitter_recycle_page+0x34>
  20:	ldr	r0, [sp]
  24:	ldr	r1, [sp, #4]
  28:	ldr	r1, [r1, #4]
  2c:	cmp	r0, r1
  30:	bne	40 <flatcc_emitter_recycle_page+0x40>
  34:	mvn	r0, #0
  38:	str	r0, [sp, #8]
  3c:	b	b4 <flatcc_emitter_recycle_page+0xb4>
  40:	ldr	r0, [sp]
  44:	ldr	r0, [r0, #2948]	; 0xb84
  48:	ldr	r1, [sp]
  4c:	ldr	r1, [r1, #2944]	; 0xb80
  50:	str	r0, [r1, #2948]	; 0xb84
  54:	ldr	r0, [sp]
  58:	ldr	r0, [r0, #2944]	; 0xb80
  5c:	ldr	r1, [sp]
  60:	ldr	r1, [r1, #2948]	; 0xb84
  64:	str	r0, [r1, #2944]	; 0xb80
  68:	ldr	r0, [sp, #4]
  6c:	ldr	r0, [r0]
  70:	ldr	r0, [r0, #2948]	; 0xb84
  74:	ldr	r1, [sp]
  78:	str	r0, [r1, #2948]	; 0xb84
  7c:	ldr	r0, [sp, #4]
  80:	ldr	r0, [r0]
  84:	ldr	r1, [sp]
  88:	str	r0, [r1, #2944]	; 0xb80
  8c:	ldr	r0, [sp]
  90:	ldr	r1, [sp]
  94:	ldr	r1, [r1, #2948]	; 0xb84
  98:	str	r0, [r1, #2944]	; 0xb80
  9c:	ldr	r0, [sp]
  a0:	ldr	r1, [sp]
  a4:	ldr	r1, [r1, #2944]	; 0xb80
  a8:	str	r0, [r1, #2948]	; 0xb84
  ac:	movw	r0, #0
  b0:	str	r0, [sp, #8]
  b4:	ldr	r0, [sp, #8]
  b8:	add	sp, sp, #12
  bc:	bx	lr

000000c0 <flatcc_emitter_reset>:
  c0:	push	{fp, lr}
  c4:	mov	fp, sp
  c8:	sub	sp, sp, #16
  cc:	str	r0, [fp, #-4]
  d0:	ldr	r0, [fp, #-4]
  d4:	ldr	r0, [r0]
  d8:	str	r0, [sp, #8]
  dc:	ldr	r0, [fp, #-4]
  e0:	ldr	r0, [r0]
  e4:	movw	r1, #0
  e8:	cmp	r0, r1
  ec:	bne	f4 <flatcc_emitter_reset+0x34>
  f0:	b	250 <flatcc_emitter_reset+0x190>
  f4:	ldr	r0, [fp, #-4]
  f8:	ldr	r0, [r0]
  fc:	ldr	r1, [fp, #-4]
 100:	str	r0, [r1, #4]
 104:	ldr	r0, [fp, #-4]
 108:	ldr	r0, [r0]
 10c:	add	r0, r0, #1472	; 0x5c0
 110:	ldr	r1, [fp, #-4]
 114:	str	r0, [r1, #8]
 118:	ldr	r0, [fp, #-4]
 11c:	ldr	r0, [r0, #8]
 120:	ldr	r1, [fp, #-4]
 124:	str	r0, [r1, #16]
 128:	ldr	r0, [fp, #-4]
 12c:	movw	r1, #1472	; 0x5c0
 130:	str	r1, [r0, #12]
 134:	ldr	r0, [fp, #-4]
 138:	str	r1, [r0, #20]
 13c:	ldr	r0, [fp, #-4]
 140:	ldr	r0, [r0, #12]
 144:	movw	r1, #0
 148:	sub	r0, r1, r0
 14c:	ldr	r1, [fp, #-4]
 150:	ldr	r1, [r1]
 154:	str	r0, [r1, #2952]	; 0xb88
 158:	ldr	r0, [fp, #-4]
 15c:	ldr	r0, [r0, #32]
 160:	cmp	r0, #0
 164:	bne	178 <flatcc_emitter_reset+0xb8>
 168:	ldr	r0, [fp, #-4]
 16c:	ldr	r0, [r0, #24]
 170:	ldr	r1, [fp, #-4]
 174:	str	r0, [r1, #32]
 178:	ldr	r0, [fp, #-4]
 17c:	ldr	r1, [r0, #24]
 180:	ldr	r0, [r0, #32]
 184:	add	r0, r0, r0, lsl #1
 188:	lsr	r0, r0, #2
 18c:	lsr	r1, r1, #2
 190:	add	r0, r0, r1
 194:	ldr	r1, [fp, #-4]
 198:	str	r0, [r1, #32]
 19c:	ldr	r0, [fp, #-4]
 1a0:	movw	r1, #0
 1a4:	str	r1, [r0, #24]
 1a8:	ldr	r0, [fp, #-4]
 1ac:	ldr	r0, [r0, #32]
 1b0:	lsl	r0, r0, #1
 1b4:	ldr	r1, [fp, #-4]
 1b8:	ldr	r1, [r1, #28]
 1bc:	cmp	r0, r1
 1c0:	movw	r0, #0
 1c4:	str	r0, [sp, #4]
 1c8:	bcs	1f0 <flatcc_emitter_reset+0x130>
 1cc:	ldr	r0, [fp, #-4]
 1d0:	ldr	r0, [r0, #4]
 1d4:	ldr	r0, [r0, #2944]	; 0xb80
 1d8:	ldr	r1, [fp, #-4]
 1dc:	ldr	r1, [r1]
 1e0:	cmp	r0, r1
 1e4:	movw	r0, #0
 1e8:	movne	r0, #1
 1ec:	str	r0, [sp, #4]
 1f0:	ldr	r0, [sp, #4]
 1f4:	tst	r0, #1
 1f8:	beq	250 <flatcc_emitter_reset+0x190>
 1fc:	ldr	r0, [fp, #-4]
 200:	ldr	r0, [r0, #4]
 204:	ldr	r0, [r0, #2944]	; 0xb80
 208:	str	r0, [sp, #8]
 20c:	ldr	r0, [sp, #8]
 210:	ldr	r0, [r0, #2944]	; 0xb80
 214:	ldr	r1, [fp, #-4]
 218:	ldr	r1, [r1, #4]
 21c:	str	r0, [r1, #2944]	; 0xb80
 220:	ldr	r0, [fp, #-4]
 224:	ldr	r0, [r0, #4]
 228:	ldr	r1, [sp, #8]
 22c:	ldr	r1, [r1, #2944]	; 0xb80
 230:	str	r0, [r1, #2948]	; 0xb84
 234:	ldr	r0, [sp, #8]
 238:	bl	0 <free>
 23c:	ldr	r0, [fp, #-4]
 240:	ldr	r1, [r0, #28]
 244:	sub	r1, r1, #2944	; 0xb80
 248:	str	r1, [r0, #28]
 24c:	b	1a8 <flatcc_emitter_reset+0xe8>
 250:	mov	sp, fp
 254:	pop	{fp, pc}

00000258 <flatcc_emitter_clear>:
 258:	push	{fp, lr}
 25c:	mov	fp, sp
 260:	sub	sp, sp, #8
 264:	str	r0, [sp, #4]
 268:	ldr	r0, [sp, #4]
 26c:	ldr	r0, [r0]
 270:	str	r0, [sp]
 274:	ldr	r0, [sp]
 278:	movw	r1, #0
 27c:	cmp	r0, r1
 280:	bne	288 <flatcc_emitter_clear+0x30>
 284:	b	2e4 <flatcc_emitter_clear+0x8c>
 288:	ldr	r0, [sp]
 28c:	ldr	r0, [r0, #2948]	; 0xb84
 290:	movw	r1, #0
 294:	str	r1, [r0, #2944]	; 0xb80
 298:	ldr	r0, [sp]
 29c:	ldr	r0, [r0, #2944]	; 0xb80
 2a0:	movw	r1, #0
 2a4:	cmp	r0, r1
 2a8:	beq	2c8 <flatcc_emitter_clear+0x70>
 2ac:	ldr	r0, [sp]
 2b0:	ldr	r0, [r0, #2944]	; 0xb80
 2b4:	str	r0, [sp]
 2b8:	ldr	r0, [sp]
 2bc:	ldr	r0, [r0, #2948]	; 0xb84
 2c0:	bl	0 <free>
 2c4:	b	298 <flatcc_emitter_clear+0x40>
 2c8:	ldr	r0, [sp]
 2cc:	bl	0 <free>
 2d0:	ldr	r0, [sp, #4]
 2d4:	movw	r1, #0
 2d8:	and	r1, r1, #255	; 0xff
 2dc:	movw	r2, #36	; 0x24
 2e0:	bl	0 <memset>
 2e4:	mov	sp, fp
 2e8:	pop	{fp, pc}

000002ec <flatcc_emitter>:
 2ec:	push	{fp, lr}
 2f0:	mov	fp, sp
 2f4:	sub	sp, sp, #32
 2f8:	ldr	ip, [fp, #8]
 2fc:	str	r0, [fp, #-8]
 300:	str	r1, [fp, #-12]
 304:	str	r2, [sp, #16]
 308:	str	r3, [sp, #12]
 30c:	ldr	r0, [fp, #-8]
 310:	str	r0, [sp, #8]
 314:	ldr	r0, [fp, #8]
 318:	ldr	r1, [sp, #8]
 31c:	ldr	r2, [r1, #24]
 320:	add	r0, r2, r0
 324:	str	r0, [r1, #24]
 328:	ldr	r0, [sp, #12]
 32c:	cmp	r0, #0
 330:	bge	3f4 <flatcc_emitter+0x108>
 334:	ldr	r0, [fp, #8]
 338:	ldr	r1, [sp, #8]
 33c:	ldr	r1, [r1, #12]
 340:	cmp	r0, r1
 344:	bhi	388 <flatcc_emitter+0x9c>
 348:	ldr	r0, [fp, #8]
 34c:	ldr	r1, [sp, #8]
 350:	ldr	r2, [r1, #8]
 354:	movw	r3, #0
 358:	sub	r0, r3, r0
 35c:	add	r0, r2, r0
 360:	str	r0, [r1, #8]
 364:	ldr	r0, [fp, #8]
 368:	ldr	r1, [sp, #8]
 36c:	ldr	r2, [r1, #12]
 370:	sub	r0, r2, r0
 374:	str	r0, [r1, #12]
 378:	ldr	r0, [sp, #8]
 37c:	ldr	r0, [r0, #8]
 380:	str	r0, [sp, #4]
 384:	b	4a8 <flatcc_emitter+0x1bc>
 388:	ldr	r0, [sp, #16]
 38c:	ldr	r1, [fp, #-12]
 390:	add	r0, r1, r0, lsl #3
 394:	str	r0, [fp, #-12]
 398:	ldr	r0, [sp, #16]
 39c:	mvn	r1, #0
 3a0:	add	r1, r0, r1
 3a4:	str	r1, [sp, #16]
 3a8:	cmp	r0, #0
 3ac:	beq	3f0 <flatcc_emitter+0x104>
 3b0:	ldr	r0, [fp, #-12]
 3b4:	mvn	r1, #7
 3b8:	add	r0, r0, r1
 3bc:	str	r0, [fp, #-12]
 3c0:	ldr	r0, [sp, #8]
 3c4:	ldr	r1, [fp, #-12]
 3c8:	ldr	r1, [r1]
 3cc:	ldr	r2, [fp, #-12]
 3d0:	ldr	r2, [r2, #4]
 3d4:	bl	514 <copy_front>
 3d8:	cmp	r0, #0
 3dc:	beq	3ec <flatcc_emitter+0x100>
 3e0:	mvn	r0, #0
 3e4:	str	r0, [fp, #-4]
 3e8:	b	508 <flatcc_emitter+0x21c>
 3ec:	b	398 <flatcc_emitter+0xac>
 3f0:	b	49c <flatcc_emitter+0x1b0>
 3f4:	ldr	r0, [fp, #8]
 3f8:	ldr	r1, [sp, #8]
 3fc:	ldr	r1, [r1, #20]
 400:	cmp	r0, r1
 404:	bhi	440 <flatcc_emitter+0x154>
 408:	ldr	r0, [sp, #8]
 40c:	ldr	r0, [r0, #16]
 410:	str	r0, [sp, #4]
 414:	ldr	r0, [fp, #8]
 418:	ldr	r1, [sp, #8]
 41c:	ldr	r2, [r1, #16]
 420:	add	r0, r2, r0
 424:	str	r0, [r1, #16]
 428:	ldr	r0, [fp, #8]
 42c:	ldr	r1, [sp, #8]
 430:	ldr	r2, [r1, #20]
 434:	sub	r0, r2, r0
 438:	str	r0, [r1, #20]
 43c:	b	4a8 <flatcc_emitter+0x1bc>
 440:	b	444 <flatcc_emitter+0x158>
 444:	ldr	r0, [sp, #16]
 448:	mvn	r1, #0
 44c:	add	r1, r0, r1
 450:	str	r1, [sp, #16]
 454:	cmp	r0, #0
 458:	beq	498 <flatcc_emitter+0x1ac>
 45c:	ldr	r0, [sp, #8]
 460:	ldr	r1, [fp, #-12]
 464:	ldr	r1, [r1]
 468:	ldr	r2, [fp, #-12]
 46c:	ldr	r2, [r2, #4]
 470:	bl	620 <copy_back>
 474:	cmp	r0, #0
 478:	beq	488 <flatcc_emitter+0x19c>
 47c:	mvn	r0, #0
 480:	str	r0, [fp, #-4]
 484:	b	508 <flatcc_emitter+0x21c>
 488:	ldr	r0, [fp, #-12]
 48c:	add	r0, r0, #8
 490:	str	r0, [fp, #-12]
 494:	b	444 <flatcc_emitter+0x158>
 498:	b	49c <flatcc_emitter+0x1b0>
 49c:	movw	r0, #0
 4a0:	str	r0, [fp, #-4]
 4a4:	b	508 <flatcc_emitter+0x21c>
 4a8:	b	4ac <flatcc_emitter+0x1c0>
 4ac:	ldr	r0, [sp, #16]
 4b0:	mvn	r1, #0
 4b4:	add	r1, r0, r1
 4b8:	str	r1, [sp, #16]
 4bc:	cmp	r0, #0
 4c0:	beq	500 <flatcc_emitter+0x214>
 4c4:	ldr	r0, [sp, #4]
 4c8:	ldr	r1, [fp, #-12]
 4cc:	ldr	r1, [r1]
 4d0:	ldr	r2, [fp, #-12]
 4d4:	ldr	r2, [r2, #4]
 4d8:	bl	0 <memcpy>
 4dc:	ldr	r0, [fp, #-12]
 4e0:	ldr	r0, [r0, #4]
 4e4:	ldr	r1, [sp, #4]
 4e8:	add	r0, r1, r0
 4ec:	str	r0, [sp, #4]
 4f0:	ldr	r0, [fp, #-12]
 4f4:	add	r0, r0, #8
 4f8:	str	r0, [fp, #-12]
 4fc:	b	4ac <flatcc_emitter+0x1c0>
 500:	movw	r0, #0
 504:	str	r0, [fp, #-4]
 508:	ldr	r0, [fp, #-4]
 50c:	mov	sp, fp
 510:	pop	{fp, pc}

00000514 <copy_front>:
 514:	push	{fp, lr}
 518:	mov	fp, sp
 51c:	sub	sp, sp, #24
 520:	str	r0, [fp, #-8]
 524:	str	r1, [sp, #12]
 528:	str	r2, [sp, #8]
 52c:	ldr	r0, [sp, #8]
 530:	ldr	r1, [sp, #12]
 534:	add	r0, r1, r0
 538:	str	r0, [sp, #12]
 53c:	ldr	r0, [sp, #8]
 540:	cmp	r0, #0
 544:	beq	60c <copy_front+0xf8>
 548:	ldr	r0, [sp, #8]
 54c:	str	r0, [sp, #4]
 550:	ldr	r0, [sp, #4]
 554:	ldr	r1, [fp, #-8]
 558:	ldr	r1, [r1, #12]
 55c:	cmp	r0, r1
 560:	bls	5a0 <copy_front+0x8c>
 564:	ldr	r0, [fp, #-8]
 568:	ldr	r0, [r0, #12]
 56c:	str	r0, [sp, #4]
 570:	ldr	r0, [sp, #4]
 574:	cmp	r0, #0
 578:	bne	59c <copy_front+0x88>
 57c:	ldr	r0, [fp, #-8]
 580:	bl	85c <advance_front>
 584:	cmp	r0, #0
 588:	beq	598 <copy_front+0x84>
 58c:	mvn	r0, #0
 590:	str	r0, [fp, #-4]
 594:	b	614 <copy_front+0x100>
 598:	b	53c <copy_front+0x28>
 59c:	b	5a0 <copy_front+0x8c>
 5a0:	ldr	r0, [sp, #4]
 5a4:	ldr	r1, [fp, #-8]
 5a8:	ldr	r2, [r1, #8]
 5ac:	movw	r3, #0
 5b0:	sub	r0, r3, r0
 5b4:	add	r0, r2, r0
 5b8:	str	r0, [r1, #8]
 5bc:	ldr	r0, [sp, #4]
 5c0:	ldr	r1, [fp, #-8]
 5c4:	ldr	r2, [r1, #12]
 5c8:	sub	r0, r2, r0
 5cc:	str	r0, [r1, #12]
 5d0:	ldr	r0, [sp, #4]
 5d4:	ldr	r1, [sp, #12]
 5d8:	sub	r0, r3, r0
 5dc:	add	r0, r1, r0
 5e0:	str	r0, [sp, #12]
 5e4:	ldr	r0, [sp, #4]
 5e8:	ldr	r1, [sp, #8]
 5ec:	sub	r0, r1, r0
 5f0:	str	r0, [sp, #8]
 5f4:	ldr	r0, [fp, #-8]
 5f8:	ldr	r0, [r0, #8]
 5fc:	ldr	r1, [sp, #12]
 600:	ldr	r2, [sp, #4]
 604:	bl	0 <memcpy>
 608:	b	53c <copy_front+0x28>
 60c:	movw	r0, #0
 610:	str	r0, [fp, #-4]
 614:	ldr	r0, [fp, #-4]
 618:	mov	sp, fp
 61c:	pop	{fp, pc}

00000620 <copy_back>:
 620:	push	{fp, lr}
 624:	mov	fp, sp
 628:	sub	sp, sp, #24
 62c:	str	r0, [fp, #-8]
 630:	str	r1, [sp, #12]
 634:	str	r2, [sp, #8]
 638:	ldr	r0, [sp, #8]
 63c:	cmp	r0, #0
 640:	beq	6fc <copy_back+0xdc>
 644:	ldr	r0, [sp, #8]
 648:	str	r0, [sp, #4]
 64c:	ldr	r0, [sp, #4]
 650:	ldr	r1, [fp, #-8]
 654:	ldr	r1, [r1, #20]
 658:	cmp	r0, r1
 65c:	bls	69c <copy_back+0x7c>
 660:	ldr	r0, [fp, #-8]
 664:	ldr	r0, [r0, #20]
 668:	str	r0, [sp, #4]
 66c:	ldr	r0, [sp, #4]
 670:	cmp	r0, #0
 674:	bne	698 <copy_back+0x78>
 678:	ldr	r0, [fp, #-8]
 67c:	bl	a5c <advance_back>
 680:	cmp	r0, #0
 684:	beq	694 <copy_back+0x74>
 688:	mvn	r0, #0
 68c:	str	r0, [fp, #-4]
 690:	b	704 <copy_back+0xe4>
 694:	b	638 <copy_back+0x18>
 698:	b	69c <copy_back+0x7c>
 69c:	ldr	r0, [fp, #-8]
 6a0:	ldr	r0, [r0, #16]
 6a4:	ldr	r1, [sp, #12]
 6a8:	ldr	r2, [sp, #4]
 6ac:	bl	0 <memcpy>
 6b0:	ldr	r0, [sp, #4]
 6b4:	ldr	r1, [sp, #8]
 6b8:	sub	r0, r1, r0
 6bc:	str	r0, [sp, #8]
 6c0:	ldr	r0, [sp, #4]
 6c4:	ldr	r1, [sp, #12]
 6c8:	add	r0, r1, r0
 6cc:	str	r0, [sp, #12]
 6d0:	ldr	r0, [sp, #4]
 6d4:	ldr	r1, [fp, #-8]
 6d8:	ldr	r2, [r1, #16]
 6dc:	add	r0, r2, r0
 6e0:	str	r0, [r1, #16]
 6e4:	ldr	r0, [sp, #4]
 6e8:	ldr	r1, [fp, #-8]
 6ec:	ldr	r2, [r1, #20]
 6f0:	sub	r0, r2, r0
 6f4:	str	r0, [r1, #20]
 6f8:	b	638 <copy_back+0x18>
 6fc:	movw	r0, #0
 700:	str	r0, [fp, #-4]
 704:	ldr	r0, [fp, #-4]
 708:	mov	sp, fp
 70c:	pop	{fp, pc}

00000710 <flatcc_emitter_copy_buffer>:
 710:	push	{fp, lr}
 714:	mov	fp, sp
 718:	sub	sp, sp, #24
 71c:	str	r0, [fp, #-8]
 720:	str	r1, [sp, #12]
 724:	str	r2, [sp, #8]
 728:	ldr	r0, [sp, #8]
 72c:	ldr	r1, [fp, #-8]
 730:	ldr	r1, [r1, #24]
 734:	cmp	r0, r1
 738:	bcs	748 <flatcc_emitter_copy_buffer+0x38>
 73c:	movw	r0, #0
 740:	str	r0, [fp, #-4]
 744:	b	850 <flatcc_emitter_copy_buffer+0x140>
 748:	ldr	r0, [fp, #-8]
 74c:	ldr	r0, [r0]
 750:	movw	r1, #0
 754:	cmp	r0, r1
 758:	bne	768 <flatcc_emitter_copy_buffer+0x58>
 75c:	movw	r0, #0
 760:	str	r0, [fp, #-4]
 764:	b	850 <flatcc_emitter_copy_buffer+0x140>
 768:	ldr	r0, [fp, #-8]
 76c:	ldr	r0, [r0]
 770:	ldr	r1, [fp, #-8]
 774:	ldr	r1, [r1, #4]
 778:	cmp	r0, r1
 77c:	bne	7a4 <flatcc_emitter_copy_buffer+0x94>
 780:	ldr	r0, [sp, #12]
 784:	ldr	r1, [fp, #-8]
 788:	ldr	r1, [r1, #8]
 78c:	ldr	r2, [fp, #-8]
 790:	ldr	r2, [r2, #24]
 794:	bl	0 <memcpy>
 798:	ldr	r0, [sp, #12]
 79c:	str	r0, [fp, #-4]
 7a0:	b	850 <flatcc_emitter_copy_buffer+0x140>
 7a4:	ldr	r0, [fp, #-8]
 7a8:	ldr	r0, [r0, #12]
 7ac:	movw	r1, #2944	; 0xb80
 7b0:	sub	r0, r1, r0
 7b4:	str	r0, [sp]
 7b8:	ldr	r0, [sp, #12]
 7bc:	ldr	r1, [fp, #-8]
 7c0:	ldr	r1, [r1, #8]
 7c4:	ldr	r2, [sp]
 7c8:	bl	0 <memcpy>
 7cc:	ldr	r0, [sp, #12]
 7d0:	ldr	r1, [sp]
 7d4:	add	r0, r0, r1
 7d8:	str	r0, [sp, #12]
 7dc:	ldr	r0, [fp, #-8]
 7e0:	ldr	r0, [r0]
 7e4:	ldr	r0, [r0, #2944]	; 0xb80
 7e8:	str	r0, [sp, #4]
 7ec:	ldr	r0, [sp, #4]
 7f0:	ldr	r1, [fp, #-8]
 7f4:	ldr	r1, [r1, #4]
 7f8:	cmp	r0, r1
 7fc:	beq	82c <flatcc_emitter_copy_buffer+0x11c>
 800:	ldr	r0, [sp, #12]
 804:	ldr	r1, [sp, #4]
 808:	movw	r2, #2944	; 0xb80
 80c:	bl	0 <memcpy>
 810:	ldr	r0, [sp, #12]
 814:	add	r0, r0, #2944	; 0xb80
 818:	str	r0, [sp, #12]
 81c:	ldr	r0, [sp, #4]
 820:	ldr	r0, [r0, #2944]	; 0xb80
 824:	str	r0, [sp, #4]
 828:	b	7ec <flatcc_emitter_copy_buffer+0xdc>
 82c:	ldr	r0, [sp, #12]
 830:	ldr	r1, [sp, #4]
 834:	ldr	r2, [fp, #-8]
 838:	ldr	r2, [r2, #20]
 83c:	movw	r3, #2944	; 0xb80
 840:	sub	r2, r3, r2
 844:	bl	0 <memcpy>
 848:	ldr	r0, [sp, #12]
 84c:	str	r0, [fp, #-4]
 850:	ldr	r0, [fp, #-4]
 854:	mov	sp, fp
 858:	pop	{fp, pc}

0000085c <advance_front>:
 85c:	push	{fp, lr}
 860:	mov	fp, sp
 864:	sub	sp, sp, #16
 868:	str	r0, [sp, #8]
 86c:	movw	r0, #0
 870:	str	r0, [sp, #4]
 874:	ldr	r1, [sp, #8]
 878:	ldr	r1, [r1]
 87c:	cmp	r1, r0
 880:	beq	8d8 <advance_front+0x7c>
 884:	ldr	r0, [sp, #8]
 888:	ldr	r0, [r0]
 88c:	ldr	r0, [r0, #2948]	; 0xb84
 890:	ldr	r1, [sp, #8]
 894:	ldr	r1, [r1, #4]
 898:	cmp	r0, r1
 89c:	beq	8d8 <advance_front+0x7c>
 8a0:	ldr	r0, [sp, #8]
 8a4:	ldr	r0, [r0]
 8a8:	ldr	r0, [r0, #2952]	; 0xb88
 8ac:	sub	r0, r0, #2944	; 0xb80
 8b0:	ldr	r1, [sp, #8]
 8b4:	ldr	r1, [r1]
 8b8:	ldr	r1, [r1, #2948]	; 0xb84
 8bc:	str	r0, [r1, #2952]	; 0xb88
 8c0:	ldr	r0, [sp, #8]
 8c4:	ldr	r0, [r0]
 8c8:	ldr	r0, [r0, #2948]	; 0xb84
 8cc:	ldr	r1, [sp, #8]
 8d0:	str	r0, [r1]
 8d4:	b	a08 <advance_front+0x1ac>
 8d8:	movw	r0, #2956	; 0xb8c
 8dc:	bl	0 <malloc>
 8e0:	str	r0, [sp, #4]
 8e4:	movw	r1, #0
 8e8:	cmp	r0, r1
 8ec:	bne	8fc <advance_front+0xa0>
 8f0:	mvn	r0, #0
 8f4:	str	r0, [fp, #-4]
 8f8:	b	a50 <advance_front+0x1f4>
 8fc:	ldr	r0, [sp, #8]
 900:	ldr	r1, [r0, #28]
 904:	add	r1, r1, #2944	; 0xb80
 908:	str	r1, [r0, #28]
 90c:	ldr	r0, [sp, #8]
 910:	ldr	r0, [r0]
 914:	movw	r1, #0
 918:	cmp	r0, r1
 91c:	beq	970 <advance_front+0x114>
 920:	ldr	r0, [sp, #8]
 924:	ldr	r0, [r0, #4]
 928:	ldr	r1, [sp, #4]
 92c:	str	r0, [r1, #2948]	; 0xb84
 930:	ldr	r0, [sp, #8]
 934:	ldr	r0, [r0]
 938:	ldr	r1, [sp, #4]
 93c:	str	r0, [r1, #2944]	; 0xb80
 940:	ldr	r0, [sp, #4]
 944:	ldr	r1, [sp, #8]
 948:	ldr	r1, [r1]
 94c:	str	r0, [r1, #2948]	; 0xb84
 950:	ldr	r0, [sp, #4]
 954:	ldr	r1, [sp, #8]
 958:	ldr	r1, [r1, #4]
 95c:	str	r0, [r1, #2944]	; 0xb80
 960:	ldr	r0, [sp, #4]
 964:	ldr	r1, [sp, #8]
 968:	str	r0, [r1]
 96c:	b	a08 <advance_front+0x1ac>
 970:	ldr	r0, [sp, #4]
 974:	ldr	r1, [sp, #8]
 978:	str	r0, [r1]
 97c:	ldr	r0, [sp, #4]
 980:	ldr	r1, [sp, #8]
 984:	str	r0, [r1, #4]
 988:	ldr	r0, [sp, #4]
 98c:	ldr	r1, [sp, #4]
 990:	str	r0, [r1, #2944]	; 0xb80
 994:	ldr	r0, [sp, #4]
 998:	ldr	r1, [sp, #4]
 99c:	str	r0, [r1, #2948]	; 0xb84
 9a0:	ldr	r0, [sp, #8]
 9a4:	ldr	r0, [r0]
 9a8:	add	r0, r0, #1472	; 0x5c0
 9ac:	ldr	r1, [sp, #8]
 9b0:	str	r0, [r1, #8]
 9b4:	ldr	r0, [sp, #8]
 9b8:	ldr	r0, [r0, #8]
 9bc:	ldr	r1, [sp, #8]
 9c0:	str	r0, [r1, #16]
 9c4:	ldr	r0, [sp, #8]
 9c8:	movw	r1, #1472	; 0x5c0
 9cc:	str	r1, [r0, #12]
 9d0:	ldr	r0, [sp, #8]
 9d4:	ldr	r0, [r0, #12]
 9d8:	movw	r1, #2944	; 0xb80
 9dc:	sub	r0, r1, r0
 9e0:	ldr	r1, [sp, #8]
 9e4:	str	r0, [r1, #20]
 9e8:	ldr	r0, [sp, #8]
 9ec:	ldr	r0, [r0, #12]
 9f0:	movw	r1, #0
 9f4:	sub	r0, r1, r0
 9f8:	ldr	r2, [sp, #4]
 9fc:	str	r0, [r2, #2952]	; 0xb88
 a00:	str	r1, [fp, #-4]
 a04:	b	a50 <advance_front+0x1f4>
 a08:	ldr	r0, [sp, #8]
 a0c:	ldr	r0, [r0]
 a10:	add	r0, r0, #2944	; 0xb80
 a14:	ldr	r1, [sp, #8]
 a18:	str	r0, [r1, #8]
 a1c:	ldr	r0, [sp, #8]
 a20:	movw	r1, #2944	; 0xb80
 a24:	str	r1, [r0, #12]
 a28:	ldr	r0, [sp, #8]
 a2c:	ldr	r0, [r0]
 a30:	ldr	r0, [r0, #2944]	; 0xb80
 a34:	ldr	r0, [r0, #2952]	; 0xb88
 a38:	sub	r0, r0, #2944	; 0xb80
 a3c:	ldr	r1, [sp, #8]
 a40:	ldr	r1, [r1]
 a44:	str	r0, [r1, #2952]	; 0xb88
 a48:	movw	r0, #0
 a4c:	str	r0, [fp, #-4]
 a50:	ldr	r0, [fp, #-4]
 a54:	mov	sp, fp
 a58:	pop	{fp, pc}

00000a5c <advance_back>:
 a5c:	push	{fp, lr}
 a60:	mov	fp, sp
 a64:	sub	sp, sp, #16
 a68:	str	r0, [sp, #8]
 a6c:	movw	r0, #0
 a70:	str	r0, [sp, #4]
 a74:	ldr	r1, [sp, #8]
 a78:	ldr	r1, [r1, #4]
 a7c:	cmp	r1, r0
 a80:	beq	ab8 <advance_back+0x5c>
 a84:	ldr	r0, [sp, #8]
 a88:	ldr	r0, [r0, #4]
 a8c:	ldr	r0, [r0, #2944]	; 0xb80
 a90:	ldr	r1, [sp, #8]
 a94:	ldr	r1, [r1]
 a98:	cmp	r0, r1
 a9c:	beq	ab8 <advance_back+0x5c>
 aa0:	ldr	r0, [sp, #8]
 aa4:	ldr	r0, [r0, #4]
 aa8:	ldr	r0, [r0, #2944]	; 0xb80
 aac:	ldr	r1, [sp, #8]
 ab0:	str	r0, [r1, #4]
 ab4:	b	be8 <advance_back+0x18c>
 ab8:	movw	r0, #2956	; 0xb8c
 abc:	bl	0 <malloc>
 ac0:	str	r0, [sp, #4]
 ac4:	movw	r1, #0
 ac8:	cmp	r0, r1
 acc:	bne	adc <advance_back+0x80>
 ad0:	mvn	r0, #0
 ad4:	str	r0, [fp, #-4]
 ad8:	b	c2c <advance_back+0x1d0>
 adc:	ldr	r0, [sp, #8]
 ae0:	ldr	r1, [r0, #28]
 ae4:	add	r1, r1, #2944	; 0xb80
 ae8:	str	r1, [r0, #28]
 aec:	ldr	r0, [sp, #8]
 af0:	ldr	r0, [r0, #4]
 af4:	movw	r1, #0
 af8:	cmp	r0, r1
 afc:	beq	b50 <advance_back+0xf4>
 b00:	ldr	r0, [sp, #8]
 b04:	ldr	r0, [r0, #4]
 b08:	ldr	r1, [sp, #4]
 b0c:	str	r0, [r1, #2948]	; 0xb84
 b10:	ldr	r0, [sp, #8]
 b14:	ldr	r0, [r0]
 b18:	ldr	r1, [sp, #4]
 b1c:	str	r0, [r1, #2944]	; 0xb80
 b20:	ldr	r0, [sp, #4]
 b24:	ldr	r1, [sp, #8]
 b28:	ldr	r1, [r1]
 b2c:	str	r0, [r1, #2948]	; 0xb84
 b30:	ldr	r0, [sp, #4]
 b34:	ldr	r1, [sp, #8]
 b38:	ldr	r1, [r1, #4]
 b3c:	str	r0, [r1, #2944]	; 0xb80
 b40:	ldr	r0, [sp, #4]
 b44:	ldr	r1, [sp, #8]
 b48:	str	r0, [r1, #4]
 b4c:	b	be8 <advance_back+0x18c>
 b50:	ldr	r0, [sp, #4]
 b54:	ldr	r1, [sp, #8]
 b58:	str	r0, [r1]
 b5c:	ldr	r0, [sp, #4]
 b60:	ldr	r1, [sp, #8]
 b64:	str	r0, [r1, #4]
 b68:	ldr	r0, [sp, #4]
 b6c:	ldr	r1, [sp, #4]
 b70:	str	r0, [r1, #2944]	; 0xb80
 b74:	ldr	r0, [sp, #4]
 b78:	ldr	r1, [sp, #4]
 b7c:	str	r0, [r1, #2948]	; 0xb84
 b80:	ldr	r0, [sp, #8]
 b84:	ldr	r0, [r0]
 b88:	add	r0, r0, #1472	; 0x5c0
 b8c:	ldr	r1, [sp, #8]
 b90:	str	r0, [r1, #8]
 b94:	ldr	r0, [sp, #8]
 b98:	ldr	r0, [r0, #8]
 b9c:	ldr	r1, [sp, #8]
 ba0:	str	r0, [r1, #16]
 ba4:	ldr	r0, [sp, #8]
 ba8:	movw	r1, #1472	; 0x5c0
 bac:	str	r1, [r0, #12]
 bb0:	ldr	r0, [sp, #8]
 bb4:	ldr	r0, [r0, #12]
 bb8:	movw	r1, #2944	; 0xb80
 bbc:	sub	r0, r1, r0
 bc0:	ldr	r1, [sp, #8]
 bc4:	str	r0, [r1, #20]
 bc8:	ldr	r0, [sp, #8]
 bcc:	ldr	r0, [r0, #12]
 bd0:	movw	r1, #0
 bd4:	sub	r0, r1, r0
 bd8:	ldr	r2, [sp, #4]
 bdc:	str	r0, [r2, #2952]	; 0xb88
 be0:	str	r1, [fp, #-4]
 be4:	b	c2c <advance_back+0x1d0>
 be8:	ldr	r0, [sp, #8]
 bec:	ldr	r0, [r0, #4]
 bf0:	ldr	r1, [sp, #8]
 bf4:	str	r0, [r1, #16]
 bf8:	ldr	r0, [sp, #8]
 bfc:	movw	r1, #2944	; 0xb80
 c00:	str	r1, [r0, #20]
 c04:	ldr	r0, [sp, #8]
 c08:	ldr	r0, [r0, #4]
 c0c:	ldr	r0, [r0, #2948]	; 0xb84
 c10:	ldr	r0, [r0, #2952]	; 0xb88
 c14:	add	r0, r0, #2944	; 0xb80
 c18:	ldr	r1, [sp, #8]
 c1c:	ldr	r1, [r1, #4]
 c20:	str	r0, [r1, #2952]	; 0xb88
 c24:	movw	r0, #0
 c28:	str	r0, [fp, #-4]
 c2c:	ldr	r0, [fp, #-4]
 c30:	mov	sp, fp
 c34:	pop	{fp, pc}
