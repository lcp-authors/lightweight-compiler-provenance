
../compcert-repos/prog2/0.11.1:     file format elf32-littlearm


Disassembly of section .init:

00010574 <.init>:
   10574:	push	{r3, lr}
   10578:	bl	1060c <_start@@Base+0x3c>
   1057c:	pop	{r3, pc}

Disassembly of section .plt:

00010580 <printf@plt-0x14>:
   10580:	push	{lr}		; (str lr, [sp, #-4]!)
   10584:	ldr	lr, [pc, #4]	; 10590 <printf@plt-0x4>
   10588:	add	lr, pc, lr
   1058c:	ldr	pc, [lr, #8]!
   10590:	andeq	r0, r1, r0, ror sl

00010594 <printf@plt>:
   10594:	add	ip, pc, #0, 12
   10598:	add	ip, ip, #16, 20	; 0x10000
   1059c:	ldr	pc, [ip, #2672]!	; 0xa70

000105a0 <__libc_start_main@plt>:
   105a0:	add	ip, pc, #0, 12
   105a4:	add	ip, ip, #16, 20	; 0x10000
   105a8:	ldr	pc, [ip, #2664]!	; 0xa68

000105ac <__gmon_start__@plt>:
   105ac:	add	ip, pc, #0, 12
   105b0:	add	ip, ip, #16, 20	; 0x10000
   105b4:	ldr	pc, [ip, #2656]!	; 0xa60

000105b8 <__isoc99_scanf@plt>:
   105b8:	add	ip, pc, #0, 12
   105bc:	add	ip, ip, #16, 20	; 0x10000
   105c0:	ldr	pc, [ip, #2648]!	; 0xa58

000105c4 <abort@plt>:
   105c4:	add	ip, pc, #0, 12
   105c8:	add	ip, ip, #16, 20	; 0x10000
   105cc:	ldr	pc, [ip, #2640]!	; 0xa50

Disassembly of section .text:

000105d0 <_start@@Base>:
   105d0:	mov	fp, #0
   105d4:	mov	lr, #0
   105d8:	pop	{r1}		; (ldr r1, [sp], #4)
   105dc:	mov	r2, sp
   105e0:	push	{r2}		; (str r2, [sp, #-4]!)
   105e4:	push	{r0}		; (str r0, [sp, #-4]!)
   105e8:	ldr	ip, [pc, #16]	; 10600 <_start@@Base+0x30>
   105ec:	push	{ip}		; (str ip, [sp, #-4]!)
   105f0:	ldr	r0, [pc, #12]	; 10604 <_start@@Base+0x34>
   105f4:	ldr	r3, [pc, #12]	; 10608 <_start@@Base+0x38>
   105f8:	bl	105a0 <__libc_start_main@plt>
   105fc:	bl	105c4 <abort@plt>
   10600:	muleq	r1, r4, r8
   10604:	andeq	r0, r1, r0, ror r7
   10608:	andeq	r0, r1, r4, lsr r8
   1060c:	ldr	r3, [pc, #20]	; 10628 <_start@@Base+0x58>
   10610:	ldr	r2, [pc, #20]	; 1062c <_start@@Base+0x5c>
   10614:	add	r3, pc, r3
   10618:	ldr	r2, [r3, r2]
   1061c:	cmp	r2, #0
   10620:	bxeq	lr
   10624:	b	105ac <__gmon_start__@plt>
   10628:	andeq	r0, r1, r4, ror #19
   1062c:	andeq	r0, r0, r0, lsr #32
   10630:	ldr	r0, [pc, #24]	; 10650 <_start@@Base+0x80>
   10634:	ldr	r3, [pc, #24]	; 10654 <_start@@Base+0x84>
   10638:	cmp	r3, r0
   1063c:	bxeq	lr
   10640:	ldr	r3, [pc, #16]	; 10658 <_start@@Base+0x88>
   10644:	cmp	r3, #0
   10648:	bxeq	lr
   1064c:	bx	r3
   10650:	andeq	r1, r2, ip, lsr #32
   10654:	andeq	r1, r2, ip, lsr #32
   10658:	andeq	r0, r0, r0
   1065c:	ldr	r0, [pc, #36]	; 10688 <_start@@Base+0xb8>
   10660:	ldr	r1, [pc, #36]	; 1068c <_start@@Base+0xbc>
   10664:	sub	r1, r1, r0
   10668:	asr	r1, r1, #2
   1066c:	add	r1, r1, r1, lsr #31
   10670:	asrs	r1, r1, #1
   10674:	bxeq	lr
   10678:	ldr	r3, [pc, #16]	; 10690 <_start@@Base+0xc0>
   1067c:	cmp	r3, #0
   10680:	bxeq	lr
   10684:	bx	r3
   10688:	andeq	r1, r2, ip, lsr #32
   1068c:	andeq	r1, r2, ip, lsr #32
   10690:	andeq	r0, r0, r0
   10694:	push	{r4, lr}
   10698:	ldr	r4, [pc, #24]	; 106b8 <_start@@Base+0xe8>
   1069c:	ldrb	r3, [r4]
   106a0:	cmp	r3, #0
   106a4:	popne	{r4, pc}
   106a8:	bl	10630 <_start@@Base+0x60>
   106ac:	mov	r3, #1
   106b0:	strb	r3, [r4]
   106b4:	pop	{r4, pc}
   106b8:	andeq	r1, r2, ip, lsr #32
   106bc:	b	1065c <_start@@Base+0x8c>

000106c0 <invert@@Base>:
   106c0:	push	{fp}		; (str fp, [sp, #-4]!)
   106c4:	add	fp, sp, #0
   106c8:	sub	sp, sp, #20
   106cc:	str	r0, [fp, #-16]
   106d0:	mov	r3, #0
   106d4:	str	r3, [fp, #-8]
   106d8:	b	10750 <invert@@Base+0x90>
   106dc:	ldr	r2, [fp, #-8]
   106e0:	mov	r3, r2
   106e4:	lsl	r3, r3, #2
   106e8:	add	r3, r3, r2
   106ec:	lsl	r3, r3, #1
   106f0:	str	r3, [fp, #-8]
   106f4:	ldr	r1, [fp, #-16]
   106f8:	movw	r3, #26215	; 0x6667
   106fc:	movt	r3, #26214	; 0x6666
   10700:	smull	r2, r3, r3, r1
   10704:	asr	r2, r3, #2
   10708:	asr	r3, r1, #31
   1070c:	sub	r2, r2, r3
   10710:	mov	r3, r2
   10714:	lsl	r3, r3, #2
   10718:	add	r3, r3, r2
   1071c:	lsl	r3, r3, #1
   10720:	sub	r2, r1, r3
   10724:	ldr	r3, [fp, #-8]
   10728:	add	r3, r3, r2
   1072c:	str	r3, [fp, #-8]
   10730:	ldr	r2, [fp, #-16]
   10734:	movw	r3, #26215	; 0x6667
   10738:	movt	r3, #26214	; 0x6666
   1073c:	smull	r1, r3, r3, r2
   10740:	asr	r1, r3, #2
   10744:	asr	r3, r2, #31
   10748:	sub	r3, r1, r3
   1074c:	str	r3, [fp, #-16]
   10750:	ldr	r3, [fp, #-16]
   10754:	cmp	r3, #0
   10758:	bne	106dc <invert@@Base+0x1c>
   1075c:	ldr	r3, [fp, #-8]
   10760:	mov	r0, r3
   10764:	add	sp, fp, #0
   10768:	pop	{fp}		; (ldr fp, [sp], #4)
   1076c:	bx	lr

00010770 <main@@Base>:
   10770:	str	r4, [sp, #-12]!
   10774:	str	fp, [sp, #4]
   10778:	str	lr, [sp, #8]
   1077c:	add	fp, sp, #8
   10780:	sub	sp, sp, #20
   10784:	sub	r3, fp, #20
   10788:	mov	r1, r3
   1078c:	movw	r0, #2212	; 0x8a4
   10790:	movt	r0, #1
   10794:	bl	105b8 <__isoc99_scanf@plt>
   10798:	mov	r3, #0
   1079c:	str	r3, [fp, #-16]
   107a0:	b	10808 <main@@Base+0x98>
   107a4:	sub	r2, fp, #28
   107a8:	sub	r3, fp, #24
   107ac:	mov	r1, r3
   107b0:	movw	r0, #2216	; 0x8a8
   107b4:	movt	r0, #1
   107b8:	bl	105b8 <__isoc99_scanf@plt>
   107bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   107c0:	mov	r0, r3
   107c4:	bl	106c0 <invert@@Base>
   107c8:	mov	r4, r0
   107cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   107d0:	mov	r0, r3
   107d4:	bl	106c0 <invert@@Base>
   107d8:	mov	r3, r0
   107dc:	add	r3, r4, r3
   107e0:	mov	r0, r3
   107e4:	bl	106c0 <invert@@Base>
   107e8:	mov	r3, r0
   107ec:	mov	r1, r3
   107f0:	movw	r0, #2224	; 0x8b0
   107f4:	movt	r0, #1
   107f8:	bl	10594 <printf@plt>
   107fc:	ldr	r3, [fp, #-16]
   10800:	add	r3, r3, #1
   10804:	str	r3, [fp, #-16]
   10808:	ldr	r3, [fp, #-20]	; 0xffffffec
   1080c:	ldr	r2, [fp, #-16]
   10810:	cmp	r2, r3
   10814:	blt	107a4 <main@@Base+0x34>
   10818:	mov	r3, #0
   1081c:	mov	r0, r3
   10820:	sub	sp, fp, #8
   10824:	ldr	r4, [sp]
   10828:	ldr	fp, [sp, #4]
   1082c:	add	sp, sp, #8
   10830:	pop	{pc}		; (ldr pc, [sp], #4)

00010834 <__libc_csu_init@@Base>:
   10834:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10838:	mov	r7, r0
   1083c:	ldr	r6, [pc, #72]	; 1088c <__libc_csu_init@@Base+0x58>
   10840:	ldr	r5, [pc, #72]	; 10890 <__libc_csu_init@@Base+0x5c>
   10844:	add	r6, pc, r6
   10848:	add	r5, pc, r5
   1084c:	sub	r6, r6, r5
   10850:	mov	r8, r1
   10854:	mov	r9, r2
   10858:	bl	10574 <printf@plt-0x20>
   1085c:	asrs	r6, r6, #2
   10860:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10864:	mov	r4, #0
   10868:	add	r4, r4, #1
   1086c:	ldr	r3, [r5], #4
   10870:	mov	r2, r9
   10874:	mov	r1, r8
   10878:	mov	r0, r7
   1087c:	blx	r3
   10880:	cmp	r6, r4
   10884:	bne	10868 <__libc_csu_init@@Base+0x34>
   10888:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1088c:	andeq	r0, r1, r8, asr #13
   10890:	andeq	r0, r1, r0, asr #13

00010894 <__libc_csu_fini@@Base>:
   10894:	bx	lr

Disassembly of section .fini:

00010898 <.fini>:
   10898:	push	{r3, lr}
   1089c:	pop	{r3, pc}
