
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-detection.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_detection_rule_entry_delete>:
       0:	str	fp, [sp, #-8]!
       4:	str	lr, [sp, #4]
       8:	add	fp, sp, #4
       c:	sub	sp, sp, #8
      10:	str	r0, [fp, #-8]
      14:	ldr	r3, [fp, #-8]
      18:	ldr	r3, [r3]
      1c:	cmp	r3, #0
      20:	beq	34 <coda_detection_rule_entry_delete+0x34>
      24:	ldr	r3, [fp, #-8]
      28:	ldr	r3, [r3]
      2c:	mov	r0, r3
      30:	bl	0 <free>
      34:	ldr	r3, [fp, #-8]
      38:	ldr	r3, [r3, #4]
      3c:	cmp	r3, #0
      40:	beq	54 <coda_detection_rule_entry_delete+0x54>
      44:	ldr	r3, [fp, #-8]
      48:	ldr	r3, [r3, #4]
      4c:	mov	r0, r3
      50:	bl	0 <coda_expression_delete>
      54:	ldr	r0, [fp, #-8]
      58:	bl	0 <free>
      5c:	nop	{0}
      60:	sub	sp, fp, #4
      64:	ldr	fp, [sp]
      68:	add	sp, sp, #4
      6c:	pop	{pc}		; (ldr pc, [sp], #4)

00000070 <coda_detection_rule_entry_new>:
      70:	str	fp, [sp, #-8]!
      74:	str	lr, [sp, #4]
      78:	add	fp, sp, #4
      7c:	sub	sp, sp, #32
      80:	str	r0, [fp, #-24]	; 0xffffffe8
      84:	ldr	r3, [fp, #-24]	; 0xffffffe8
      88:	cmp	r3, #0
      8c:	beq	11c <coda_detection_rule_entry_new+0xac>
      90:	sub	r3, fp, #16
      94:	mov	r1, r3
      98:	ldr	r0, [fp, #-24]	; 0xffffffe8
      9c:	bl	0 <coda_expression_from_string>
      a0:	mov	r3, r0
      a4:	cmp	r3, #0
      a8:	beq	b4 <coda_detection_rule_entry_new+0x44>
      ac:	mov	r3, #0
      b0:	b	1e0 <coda_detection_rule_entry_new+0x170>
      b4:	ldr	r3, [fp, #-16]
      b8:	sub	r2, fp, #12
      bc:	mov	r1, r2
      c0:	mov	r0, r3
      c4:	bl	0 <coda_expression_get_type>
      c8:	mov	r3, r0
      cc:	cmp	r3, #0
      d0:	beq	e8 <coda_detection_rule_entry_new+0x78>
      d4:	ldr	r3, [fp, #-16]
      d8:	mov	r0, r3
      dc:	bl	0 <coda_expression_delete>
      e0:	mov	r3, #0
      e4:	b	1e0 <coda_detection_rule_entry_new+0x170>
      e8:	ldr	r3, [fp, #-16]
      ec:	mov	r0, r3
      f0:	bl	0 <coda_expression_delete>
      f4:	ldr	r3, [fp, #-12]
      f8:	cmp	r3, #4
      fc:	beq	11c <coda_detection_rule_entry_new+0xac>
     100:	movw	r1, #0
     104:	movt	r1, #0
     108:	movw	r0, #65136	; 0xfe70
     10c:	movt	r0, #65535	; 0xffff
     110:	bl	0 <coda_set_error>
     114:	mov	r3, #0
     118:	b	1e0 <coda_detection_rule_entry_new+0x170>
     11c:	mov	r0, #8
     120:	bl	0 <malloc>
     124:	mov	r3, r0
     128:	str	r3, [fp, #-8]
     12c:	ldr	r3, [fp, #-8]
     130:	cmp	r3, #0
     134:	bne	164 <coda_detection_rule_entry_new+0xf4>
     138:	mov	r3, #82	; 0x52
     13c:	str	r3, [sp]
     140:	movw	r3, #0
     144:	movt	r3, #0
     148:	mov	r2, #8
     14c:	movw	r1, #0
     150:	movt	r1, #0
     154:	mvn	r0, #0
     158:	bl	0 <coda_set_error>
     15c:	mov	r3, #0
     160:	b	1e0 <coda_detection_rule_entry_new+0x170>
     164:	ldr	r3, [fp, #-8]
     168:	mov	r2, #0
     16c:	str	r2, [r3]
     170:	ldr	r3, [fp, #-8]
     174:	mov	r2, #0
     178:	str	r2, [r3, #4]
     17c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     180:	cmp	r3, #0
     184:	beq	1dc <coda_detection_rule_entry_new+0x16c>
     188:	ldr	r0, [fp, #-24]	; 0xffffffe8
     18c:	bl	0 <strdup>
     190:	mov	r3, r0
     194:	mov	r2, r3
     198:	ldr	r3, [fp, #-8]
     19c:	str	r2, [r3]
     1a0:	ldr	r3, [fp, #-8]
     1a4:	ldr	r3, [r3]
     1a8:	cmp	r3, #0
     1ac:	bne	1dc <coda_detection_rule_entry_new+0x16c>
     1b0:	mov	r3, #94	; 0x5e
     1b4:	movw	r2, #0
     1b8:	movt	r2, #0
     1bc:	movw	r1, #0
     1c0:	movt	r1, #0
     1c4:	mvn	r0, #0
     1c8:	bl	0 <coda_set_error>
     1cc:	ldr	r0, [fp, #-8]
     1d0:	bl	0 <free>
     1d4:	mov	r3, #0
     1d8:	b	1e0 <coda_detection_rule_entry_new+0x170>
     1dc:	ldr	r3, [fp, #-8]
     1e0:	mov	r0, r3
     1e4:	sub	sp, fp, #4
     1e8:	ldr	fp, [sp]
     1ec:	add	sp, sp, #4
     1f0:	pop	{pc}		; (ldr pc, [sp], #4)

000001f4 <coda_detection_rule_entry_set_expression>:
     1f4:	str	fp, [sp, #-8]!
     1f8:	str	lr, [sp, #4]
     1fc:	add	fp, sp, #4
     200:	sub	sp, sp, #8
     204:	str	r0, [fp, #-8]
     208:	str	r1, [fp, #-12]
     20c:	ldr	r3, [fp, #-8]
     210:	ldr	r3, [r3, #4]
     214:	cmp	r3, #0
     218:	beq	238 <coda_detection_rule_entry_set_expression+0x44>
     21c:	movw	r1, #0
     220:	movt	r1, #0
     224:	movw	r0, #65136	; 0xfe70
     228:	movt	r0, #65535	; 0xffff
     22c:	bl	0 <coda_set_error>
     230:	mvn	r3, #0
     234:	b	248 <coda_detection_rule_entry_set_expression+0x54>
     238:	ldr	r3, [fp, #-8]
     23c:	ldr	r2, [fp, #-12]
     240:	str	r2, [r3, #4]
     244:	mov	r3, #0
     248:	mov	r0, r3
     24c:	sub	sp, fp, #4
     250:	ldr	fp, [sp]
     254:	add	sp, sp, #4
     258:	pop	{pc}		; (ldr pc, [sp], #4)

0000025c <coda_detection_rule_delete>:
     25c:	str	fp, [sp, #-8]!
     260:	str	lr, [sp, #4]
     264:	add	fp, sp, #4
     268:	sub	sp, sp, #16
     26c:	str	r0, [fp, #-16]
     270:	ldr	r3, [fp, #-16]
     274:	ldr	r3, [r3, #4]
     278:	cmp	r3, #0
     27c:	beq	2fc <coda_detection_rule_delete+0xa0>
     280:	mov	r3, #0
     284:	str	r3, [fp, #-8]
     288:	b	2d8 <coda_detection_rule_delete+0x7c>
     28c:	ldr	r3, [fp, #-16]
     290:	ldr	r2, [r3, #4]
     294:	ldr	r3, [fp, #-8]
     298:	lsl	r3, r3, #2
     29c:	add	r3, r2, r3
     2a0:	ldr	r3, [r3]
     2a4:	cmp	r3, #0
     2a8:	beq	2cc <coda_detection_rule_delete+0x70>
     2ac:	ldr	r3, [fp, #-16]
     2b0:	ldr	r2, [r3, #4]
     2b4:	ldr	r3, [fp, #-8]
     2b8:	lsl	r3, r3, #2
     2bc:	add	r3, r2, r3
     2c0:	ldr	r3, [r3]
     2c4:	mov	r0, r3
     2c8:	bl	0 <coda_detection_rule_entry_delete>
     2cc:	ldr	r3, [fp, #-8]
     2d0:	add	r3, r3, #1
     2d4:	str	r3, [fp, #-8]
     2d8:	ldr	r3, [fp, #-16]
     2dc:	ldr	r3, [r3]
     2e0:	ldr	r2, [fp, #-8]
     2e4:	cmp	r2, r3
     2e8:	blt	28c <coda_detection_rule_delete+0x30>
     2ec:	ldr	r3, [fp, #-16]
     2f0:	ldr	r3, [r3, #4]
     2f4:	mov	r0, r3
     2f8:	bl	0 <free>
     2fc:	ldr	r0, [fp, #-16]
     300:	bl	0 <free>
     304:	nop	{0}
     308:	sub	sp, fp, #4
     30c:	ldr	fp, [sp]
     310:	add	sp, sp, #4
     314:	pop	{pc}		; (ldr pc, [sp], #4)

00000318 <coda_detection_rule_new>:
     318:	str	fp, [sp, #-8]!
     31c:	str	lr, [sp, #4]
     320:	add	fp, sp, #4
     324:	sub	sp, sp, #16
     328:	mov	r0, #12
     32c:	bl	0 <malloc>
     330:	mov	r3, r0
     334:	str	r3, [fp, #-8]
     338:	ldr	r3, [fp, #-8]
     33c:	cmp	r3, #0
     340:	bne	370 <coda_detection_rule_new+0x58>
     344:	mov	r3, #141	; 0x8d
     348:	str	r3, [sp]
     34c:	movw	r3, #0
     350:	movt	r3, #0
     354:	mov	r2, #12
     358:	movw	r1, #0
     35c:	movt	r1, #0
     360:	mvn	r0, #0
     364:	bl	0 <coda_set_error>
     368:	mov	r3, #0
     36c:	b	398 <coda_detection_rule_new+0x80>
     370:	ldr	r3, [fp, #-8]
     374:	mov	r2, #0
     378:	str	r2, [r3]
     37c:	ldr	r3, [fp, #-8]
     380:	mov	r2, #0
     384:	str	r2, [r3, #4]
     388:	ldr	r3, [fp, #-8]
     38c:	mov	r2, #0
     390:	str	r2, [r3, #8]
     394:	ldr	r3, [fp, #-8]
     398:	mov	r0, r3
     39c:	sub	sp, fp, #4
     3a0:	ldr	fp, [sp]
     3a4:	add	sp, sp, #4
     3a8:	pop	{pc}		; (ldr pc, [sp], #4)

000003ac <coda_detection_rule_add_entry>:
     3ac:	str	fp, [sp, #-8]!
     3b0:	str	lr, [sp, #4]
     3b4:	add	fp, sp, #4
     3b8:	sub	sp, sp, #24
     3bc:	str	r0, [fp, #-16]
     3c0:	str	r1, [fp, #-20]	; 0xffffffec
     3c4:	ldr	r3, [fp, #-20]	; 0xffffffec
     3c8:	ldr	r3, [r3]
     3cc:	cmp	r3, #0
     3d0:	bne	400 <coda_detection_rule_add_entry+0x54>
     3d4:	ldr	r3, [fp, #-20]	; 0xffffffec
     3d8:	ldr	r3, [r3, #4]
     3dc:	cmp	r3, #0
     3e0:	bne	400 <coda_detection_rule_add_entry+0x54>
     3e4:	movw	r1, #0
     3e8:	movt	r1, #0
     3ec:	movw	r0, #65136	; 0xfe70
     3f0:	movt	r0, #65535	; 0xffff
     3f4:	bl	0 <coda_set_error>
     3f8:	mvn	r3, #0
     3fc:	b	4b4 <coda_detection_rule_add_entry+0x108>
     400:	ldr	r3, [fp, #-16]
     404:	ldr	r2, [r3, #4]
     408:	ldr	r3, [fp, #-16]
     40c:	ldr	r3, [r3]
     410:	add	r3, r3, #1
     414:	lsl	r3, r3, #2
     418:	mov	r1, r3
     41c:	mov	r0, r2
     420:	bl	0 <realloc>
     424:	str	r0, [fp, #-8]
     428:	ldr	r3, [fp, #-8]
     42c:	cmp	r3, #0
     430:	bne	46c <coda_detection_rule_add_entry+0xc0>
     434:	ldr	r3, [fp, #-16]
     438:	ldr	r3, [r3]
     43c:	add	r3, r3, #1
     440:	lsl	r2, r3, #2
     444:	mov	r3, #165	; 0xa5
     448:	str	r3, [sp]
     44c:	movw	r3, #0
     450:	movt	r3, #0
     454:	movw	r1, #0
     458:	movt	r1, #0
     45c:	mvn	r0, #0
     460:	bl	0 <coda_set_error>
     464:	mvn	r3, #0
     468:	b	4b4 <coda_detection_rule_add_entry+0x108>
     46c:	ldr	r3, [fp, #-16]
     470:	ldr	r2, [fp, #-8]
     474:	str	r2, [r3, #4]
     478:	ldr	r3, [fp, #-16]
     47c:	ldr	r3, [r3]
     480:	add	r2, r3, #1
     484:	ldr	r3, [fp, #-16]
     488:	str	r2, [r3]
     48c:	ldr	r3, [fp, #-16]
     490:	ldr	r2, [r3, #4]
     494:	ldr	r3, [fp, #-16]
     498:	ldr	r3, [r3]
     49c:	sub	r3, r3, #-1073741823	; 0xc0000001
     4a0:	lsl	r3, r3, #2
     4a4:	add	r3, r2, r3
     4a8:	ldr	r2, [fp, #-20]	; 0xffffffec
     4ac:	str	r2, [r3]
     4b0:	mov	r3, #0
     4b4:	mov	r0, r3
     4b8:	sub	sp, fp, #4
     4bc:	ldr	fp, [sp]
     4c0:	add	sp, sp, #4
     4c4:	pop	{pc}		; (ldr pc, [sp], #4)

000004c8 <delete_detection_node>:
     4c8:	str	fp, [sp, #-8]!
     4cc:	str	lr, [sp, #4]
     4d0:	add	fp, sp, #4
     4d4:	sub	sp, sp, #16
     4d8:	str	r0, [fp, #-16]
     4dc:	ldr	r3, [fp, #-16]
     4e0:	ldr	r3, [r3]
     4e4:	cmp	r3, #0
     4e8:	beq	4fc <delete_detection_node+0x34>
     4ec:	ldr	r3, [fp, #-16]
     4f0:	ldr	r3, [r3]
     4f4:	mov	r0, r3
     4f8:	bl	0 <free>
     4fc:	ldr	r3, [fp, #-16]
     500:	ldr	r3, [r3, #16]
     504:	cmp	r3, #0
     508:	beq	568 <delete_detection_node+0xa0>
     50c:	mov	r3, #0
     510:	str	r3, [fp, #-8]
     514:	b	544 <delete_detection_node+0x7c>
     518:	ldr	r3, [fp, #-16]
     51c:	ldr	r2, [r3, #16]
     520:	ldr	r3, [fp, #-8]
     524:	lsl	r3, r3, #2
     528:	add	r3, r2, r3
     52c:	ldr	r3, [r3]
     530:	mov	r0, r3
     534:	bl	4c8 <delete_detection_node>
     538:	ldr	r3, [fp, #-8]
     53c:	add	r3, r3, #1
     540:	str	r3, [fp, #-8]
     544:	ldr	r3, [fp, #-16]
     548:	ldr	r3, [r3, #12]
     54c:	ldr	r2, [fp, #-8]
     550:	cmp	r2, r3
     554:	blt	518 <delete_detection_node+0x50>
     558:	ldr	r3, [fp, #-16]
     55c:	ldr	r3, [r3, #16]
     560:	mov	r0, r3
     564:	bl	0 <free>
     568:	ldr	r0, [fp, #-16]
     56c:	bl	0 <free>
     570:	nop	{0}
     574:	sub	sp, fp, #4
     578:	ldr	fp, [sp]
     57c:	add	sp, sp, #4
     580:	pop	{pc}		; (ldr pc, [sp], #4)

00000584 <detection_node_new>:
     584:	str	fp, [sp, #-8]!
     588:	str	lr, [sp, #4]
     58c:	add	fp, sp, #4
     590:	sub	sp, sp, #16
     594:	mov	r0, #20
     598:	bl	0 <malloc>
     59c:	mov	r3, r0
     5a0:	str	r3, [fp, #-8]
     5a4:	ldr	r3, [fp, #-8]
     5a8:	cmp	r3, #0
     5ac:	bne	5dc <detection_node_new+0x58>
     5b0:	mov	r3, #202	; 0xca
     5b4:	str	r3, [sp]
     5b8:	movw	r3, #0
     5bc:	movt	r3, #0
     5c0:	mov	r2, #20
     5c4:	movw	r1, #0
     5c8:	movt	r1, #0
     5cc:	mvn	r0, #0
     5d0:	bl	0 <coda_set_error>
     5d4:	mov	r3, #0
     5d8:	b	61c <detection_node_new+0x98>
     5dc:	ldr	r3, [fp, #-8]
     5e0:	mov	r2, #0
     5e4:	str	r2, [r3]
     5e8:	ldr	r3, [fp, #-8]
     5ec:	mov	r2, #0
     5f0:	str	r2, [r3, #4]
     5f4:	ldr	r3, [fp, #-8]
     5f8:	mov	r2, #0
     5fc:	str	r2, [r3, #8]
     600:	ldr	r3, [fp, #-8]
     604:	mov	r2, #0
     608:	str	r2, [r3, #12]
     60c:	ldr	r3, [fp, #-8]
     610:	mov	r2, #0
     614:	str	r2, [r3, #16]
     618:	ldr	r3, [fp, #-8]
     61c:	mov	r0, r3
     620:	sub	sp, fp, #4
     624:	ldr	fp, [sp]
     628:	add	sp, sp, #4
     62c:	pop	{pc}		; (ldr pc, [sp], #4)

00000630 <detection_node_add_node>:
     630:	str	fp, [sp, #-8]!
     634:	str	lr, [sp, #4]
     638:	add	fp, sp, #4
     63c:	sub	sp, sp, #32
     640:	str	r0, [fp, #-24]	; 0xffffffe8
     644:	str	r1, [fp, #-28]	; 0xffffffe4
     648:	ldr	r3, [fp, #-24]	; 0xffffffe8
     64c:	ldr	r3, [r3, #12]
     650:	and	r3, r3, #15
     654:	cmp	r3, #0
     658:	bne	6d4 <detection_node_add_node+0xa4>
     65c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     660:	ldr	r2, [r3, #16]
     664:	ldr	r3, [fp, #-24]	; 0xffffffe8
     668:	ldr	r3, [r3, #12]
     66c:	add	r3, r3, #16
     670:	lsl	r3, r3, #2
     674:	mov	r1, r3
     678:	mov	r0, r2
     67c:	bl	0 <realloc>
     680:	str	r0, [fp, #-12]
     684:	ldr	r3, [fp, #-12]
     688:	cmp	r3, #0
     68c:	bne	6c8 <detection_node_add_node+0x98>
     690:	ldr	r3, [fp, #-24]	; 0xffffffe8
     694:	ldr	r3, [r3, #12]
     698:	add	r3, r3, #16
     69c:	lsl	r2, r3, #2
     6a0:	mov	r3, #226	; 0xe2
     6a4:	str	r3, [sp]
     6a8:	movw	r3, #0
     6ac:	movt	r3, #0
     6b0:	movw	r1, #0
     6b4:	movt	r1, #0
     6b8:	mvn	r0, #0
     6bc:	bl	0 <coda_set_error>
     6c0:	mvn	r3, #0
     6c4:	b	7f4 <detection_node_add_node+0x1c4>
     6c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     6cc:	ldr	r2, [fp, #-12]
     6d0:	str	r2, [r3, #16]
     6d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     6d8:	ldr	r2, [r3, #16]
     6dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     6e0:	ldr	r3, [r3, #12]
     6e4:	lsl	r3, r3, #2
     6e8:	add	r3, r2, r3
     6ec:	ldr	r2, [fp, #-28]	; 0xffffffe4
     6f0:	str	r2, [r3]
     6f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     6f8:	ldr	r3, [r3, #12]
     6fc:	add	r2, r3, #1
     700:	ldr	r3, [fp, #-24]	; 0xffffffe8
     704:	str	r2, [r3, #12]
     708:	ldr	r3, [fp, #-24]	; 0xffffffe8
     70c:	ldr	r3, [r3, #12]
     710:	sub	r3, r3, #1
     714:	str	r3, [fp, #-8]
     718:	b	798 <detection_node_add_node+0x168>
     71c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     720:	ldr	r2, [r3, #16]
     724:	ldr	r3, [fp, #-8]
     728:	lsl	r3, r3, #2
     72c:	add	r3, r2, r3
     730:	ldr	r3, [r3]
     734:	str	r3, [fp, #-16]
     738:	ldr	r3, [fp, #-24]	; 0xffffffe8
     73c:	ldr	r2, [r3, #16]
     740:	ldr	r3, [fp, #-8]
     744:	sub	r3, r3, #-1073741823	; 0xc0000001
     748:	lsl	r3, r3, #2
     74c:	add	r2, r2, r3
     750:	ldr	r3, [fp, #-24]	; 0xffffffe8
     754:	ldr	r1, [r3, #16]
     758:	ldr	r3, [fp, #-8]
     75c:	lsl	r3, r3, #2
     760:	add	r3, r1, r3
     764:	ldr	r2, [r2]
     768:	str	r2, [r3]
     76c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     770:	ldr	r2, [r3, #16]
     774:	ldr	r3, [fp, #-8]
     778:	sub	r3, r3, #-1073741823	; 0xc0000001
     77c:	lsl	r3, r3, #2
     780:	add	r3, r2, r3
     784:	ldr	r2, [fp, #-16]
     788:	str	r2, [r3]
     78c:	ldr	r3, [fp, #-8]
     790:	sub	r3, r3, #1
     794:	str	r3, [fp, #-8]
     798:	ldr	r3, [fp, #-8]
     79c:	cmp	r3, #0
     7a0:	ble	7f0 <detection_node_add_node+0x1c0>
     7a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     7a8:	ldr	r2, [r3, #16]
     7ac:	ldr	r3, [fp, #-8]
     7b0:	lsl	r3, r3, #2
     7b4:	add	r3, r2, r3
     7b8:	ldr	r3, [r3]
     7bc:	ldr	r3, [r3]
     7c0:	cmp	r3, #0
     7c4:	beq	7f0 <detection_node_add_node+0x1c0>
     7c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     7cc:	ldr	r2, [r3, #16]
     7d0:	ldr	r3, [fp, #-8]
     7d4:	sub	r3, r3, #-1073741823	; 0xc0000001
     7d8:	lsl	r3, r3, #2
     7dc:	add	r3, r2, r3
     7e0:	ldr	r3, [r3]
     7e4:	ldr	r3, [r3, #4]
     7e8:	cmp	r3, #0
     7ec:	bne	71c <detection_node_add_node+0xec>
     7f0:	mov	r3, #0
     7f4:	mov	r0, r3
     7f8:	sub	sp, fp, #4
     7fc:	ldr	fp, [sp]
     800:	add	sp, sp, #4
     804:	pop	{pc}		; (ldr pc, [sp], #4)

00000808 <pathcmp>:
     808:	push	{fp}		; (str fp, [sp, #-4]!)
     80c:	add	fp, sp, #0
     810:	sub	sp, sp, #20
     814:	str	r0, [fp, #-8]
     818:	str	r1, [fp, #-12]
     81c:	str	r2, [fp, #-16]
     820:	ldr	r3, [fp, #-16]
     824:	mov	r2, #0
     828:	str	r2, [r3]
     82c:	b	844 <pathcmp+0x3c>
     830:	ldr	r3, [fp, #-16]
     834:	ldr	r3, [r3]
     838:	add	r2, r3, #1
     83c:	ldr	r3, [fp, #-16]
     840:	str	r2, [r3]
     844:	ldr	r3, [fp, #-16]
     848:	ldr	r3, [r3]
     84c:	mov	r2, r3
     850:	ldr	r3, [fp, #-8]
     854:	add	r3, r3, r2
     858:	ldrb	r3, [r3]
     85c:	cmp	r3, #0
     860:	beq	89c <pathcmp+0x94>
     864:	ldr	r3, [fp, #-16]
     868:	ldr	r3, [r3]
     86c:	mov	r2, r3
     870:	ldr	r3, [fp, #-8]
     874:	add	r3, r3, r2
     878:	ldrb	r2, [r3]
     87c:	ldr	r3, [fp, #-16]
     880:	ldr	r3, [r3]
     884:	mov	r1, r3
     888:	ldr	r3, [fp, #-12]
     88c:	add	r3, r3, r1
     890:	ldrb	r3, [r3]
     894:	cmp	r2, r3
     898:	beq	830 <pathcmp+0x28>
     89c:	ldr	r3, [fp, #-16]
     8a0:	ldr	r3, [r3]
     8a4:	mov	r2, r3
     8a8:	ldr	r3, [fp, #-8]
     8ac:	add	r3, r3, r2
     8b0:	ldrb	r2, [r3]
     8b4:	ldr	r3, [fp, #-16]
     8b8:	ldr	r3, [r3]
     8bc:	mov	r1, r3
     8c0:	ldr	r3, [fp, #-12]
     8c4:	add	r3, r3, r1
     8c8:	ldrb	r3, [r3]
     8cc:	cmp	r2, r3
     8d0:	bne	8dc <pathcmp+0xd4>
     8d4:	mov	r3, #0
     8d8:	b	8e0 <pathcmp+0xd8>
     8dc:	mov	r3, #1
     8e0:	mov	r0, r3
     8e4:	add	sp, fp, #0
     8e8:	pop	{fp}		; (ldr fp, [sp], #4)
     8ec:	bx	lr

000008f0 <get_node_for_entry>:
     8f0:	str	fp, [sp, #-8]!
     8f4:	str	lr, [sp, #4]
     8f8:	add	fp, sp, #4
     8fc:	sub	sp, sp, #48	; 0x30
     900:	str	r0, [fp, #-32]	; 0xffffffe0
     904:	str	r1, [fp, #-36]	; 0xffffffdc
     908:	str	r2, [fp, #-40]	; 0xffffffd8
     90c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     910:	cmp	r3, #0
     914:	beq	930 <get_node_for_entry+0x40>
     918:	ldr	r3, [fp, #-36]	; 0xffffffdc
     91c:	ldrb	r3, [r3]
     920:	cmp	r3, #0
     924:	bne	930 <get_node_for_entry+0x40>
     928:	mov	r3, #0
     92c:	str	r3, [fp, #-36]	; 0xffffffdc
     930:	mov	r3, #0
     934:	str	r3, [fp, #-8]
     938:	b	f48 <get_node_for_entry+0x658>
     93c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     940:	cmp	r3, #0
     944:	beq	eb8 <get_node_for_entry+0x5c8>
     948:	ldr	r3, [fp, #-32]	; 0xffffffe0
     94c:	ldr	r2, [r3, #16]
     950:	ldr	r3, [fp, #-8]
     954:	lsl	r3, r3, #2
     958:	add	r3, r2, r3
     95c:	ldr	r3, [r3]
     960:	ldr	r3, [r3]
     964:	cmp	r3, #0
     968:	beq	f30 <get_node_for_entry+0x640>
     96c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     970:	ldr	r2, [r3, #16]
     974:	ldr	r3, [fp, #-8]
     978:	lsl	r3, r3, #2
     97c:	add	r3, r2, r3
     980:	ldr	r3, [r3]
     984:	ldr	r3, [r3]
     988:	sub	r2, fp, #28
     98c:	ldr	r1, [fp, #-36]	; 0xffffffdc
     990:	mov	r0, r3
     994:	bl	808 <pathcmp>
     998:	mov	r3, r0
     99c:	cmp	r3, #0
     9a0:	bne	a00 <get_node_for_entry+0x110>
     9a4:	ldr	r3, [fp, #-40]	; 0xffffffd8
     9a8:	ldr	r3, [r3, #4]
     9ac:	cmp	r3, #0
     9b0:	beq	9e4 <get_node_for_entry+0xf4>
     9b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     9b8:	ldr	r2, [r3, #16]
     9bc:	ldr	r3, [fp, #-8]
     9c0:	lsl	r3, r3, #2
     9c4:	add	r3, r2, r3
     9c8:	ldr	r3, [r3]
     9cc:	ldr	r2, [fp, #-40]	; 0xffffffd8
     9d0:	mov	r1, #0
     9d4:	mov	r0, r3
     9d8:	bl	8f0 <get_node_for_entry>
     9dc:	mov	r3, r0
     9e0:	b	1040 <get_node_for_entry+0x750>
     9e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     9e8:	ldr	r2, [r3, #16]
     9ec:	ldr	r3, [fp, #-8]
     9f0:	lsl	r3, r3, #2
     9f4:	add	r3, r2, r3
     9f8:	ldr	r3, [r3]
     9fc:	b	1040 <get_node_for_entry+0x750>
     a00:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a04:	ldr	r2, [r3, #16]
     a08:	ldr	r3, [fp, #-8]
     a0c:	lsl	r3, r3, #2
     a10:	add	r3, r2, r3
     a14:	ldr	r3, [r3]
     a18:	ldr	r3, [r3]
     a1c:	ldr	r2, [fp, #-28]	; 0xffffffe4
     a20:	add	r3, r3, r2
     a24:	ldrb	r3, [r3]
     a28:	cmp	r3, #0
     a2c:	bne	aec <get_node_for_entry+0x1fc>
     a30:	ldr	r3, [fp, #-28]	; 0xffffffe4
     a34:	mov	r2, r3
     a38:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a3c:	add	r3, r3, r2
     a40:	ldrb	r3, [r3]
     a44:	cmp	r3, #47	; 0x2f
     a48:	beq	a84 <get_node_for_entry+0x194>
     a4c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     a50:	mov	r2, r3
     a54:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a58:	add	r3, r3, r2
     a5c:	ldrb	r3, [r3]
     a60:	cmp	r3, #64	; 0x40
     a64:	beq	a84 <get_node_for_entry+0x194>
     a68:	ldr	r3, [fp, #-28]	; 0xffffffe4
     a6c:	mov	r2, r3
     a70:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a74:	add	r3, r3, r2
     a78:	ldrb	r3, [r3]
     a7c:	cmp	r3, #91	; 0x5b
     a80:	bne	f3c <get_node_for_entry+0x64c>
     a84:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a88:	ldr	r2, [r3, #16]
     a8c:	ldr	r3, [fp, #-8]
     a90:	lsl	r3, r3, #2
     a94:	add	r3, r2, r3
     a98:	ldr	r0, [r3]
     a9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     aa0:	mov	r2, r3
     aa4:	ldr	r3, [fp, #-36]	; 0xffffffdc
     aa8:	add	r3, r3, r2
     aac:	ldrb	r3, [r3]
     ab0:	cmp	r3, #47	; 0x2f
     ab4:	moveq	r3, #1
     ab8:	movne	r3, #0
     abc:	uxtb	r3, r3
     ac0:	mov	r2, r3
     ac4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ac8:	add	r3, r2, r3
     acc:	mov	r2, r3
     ad0:	ldr	r3, [fp, #-36]	; 0xffffffdc
     ad4:	add	r3, r3, r2
     ad8:	ldr	r2, [fp, #-40]	; 0xffffffd8
     adc:	mov	r1, r3
     ae0:	bl	8f0 <get_node_for_entry>
     ae4:	mov	r3, r0
     ae8:	b	1040 <get_node_for_entry+0x750>
     aec:	ldr	r3, [fp, #-28]	; 0xffffffe4
     af0:	cmp	r3, #1
     af4:	ble	b3c <get_node_for_entry+0x24c>
     af8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     afc:	sub	r3, r3, #1
     b00:	ldr	r2, [fp, #-36]	; 0xffffffdc
     b04:	add	r3, r2, r3
     b08:	ldrb	r3, [r3]
     b0c:	cmp	r3, #47	; 0x2f
     b10:	beq	b30 <get_node_for_entry+0x240>
     b14:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b18:	sub	r3, r3, #1
     b1c:	ldr	r2, [fp, #-36]	; 0xffffffdc
     b20:	add	r3, r2, r3
     b24:	ldrb	r3, [r3]
     b28:	cmp	r3, #91	; 0x5b
     b2c:	bne	b3c <get_node_for_entry+0x24c>
     b30:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b34:	sub	r3, r3, #1
     b38:	str	r3, [fp, #-28]	; 0xffffffe4
     b3c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b40:	cmp	r3, #0
     b44:	ble	f3c <get_node_for_entry+0x64c>
     b48:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b4c:	mov	r2, r3
     b50:	ldr	r3, [fp, #-36]	; 0xffffffdc
     b54:	add	r3, r3, r2
     b58:	ldrb	r3, [r3]
     b5c:	cmp	r3, #47	; 0x2f
     b60:	beq	b9c <get_node_for_entry+0x2ac>
     b64:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b68:	mov	r2, r3
     b6c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     b70:	add	r3, r3, r2
     b74:	ldrb	r3, [r3]
     b78:	cmp	r3, #64	; 0x40
     b7c:	beq	b9c <get_node_for_entry+0x2ac>
     b80:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b84:	mov	r2, r3
     b88:	ldr	r3, [fp, #-36]	; 0xffffffdc
     b8c:	add	r3, r3, r2
     b90:	ldrb	r3, [r3]
     b94:	cmp	r3, #91	; 0x5b
     b98:	bne	f3c <get_node_for_entry+0x64c>
     b9c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     ba0:	ldr	r2, [r3, #16]
     ba4:	ldr	r3, [fp, #-8]
     ba8:	lsl	r3, r3, #2
     bac:	add	r3, r2, r3
     bb0:	ldr	r3, [r3]
     bb4:	ldr	r3, [r3]
     bb8:	ldr	r2, [fp, #-28]	; 0xffffffe4
     bbc:	add	r3, r3, r2
     bc0:	ldrb	r3, [r3]
     bc4:	cmp	r3, #47	; 0x2f
     bc8:	beq	c2c <get_node_for_entry+0x33c>
     bcc:	ldr	r3, [fp, #-32]	; 0xffffffe0
     bd0:	ldr	r2, [r3, #16]
     bd4:	ldr	r3, [fp, #-8]
     bd8:	lsl	r3, r3, #2
     bdc:	add	r3, r2, r3
     be0:	ldr	r3, [r3]
     be4:	ldr	r3, [r3]
     be8:	ldr	r2, [fp, #-28]	; 0xffffffe4
     bec:	add	r3, r3, r2
     bf0:	ldrb	r3, [r3]
     bf4:	cmp	r3, #64	; 0x40
     bf8:	beq	c2c <get_node_for_entry+0x33c>
     bfc:	ldr	r3, [fp, #-32]	; 0xffffffe0
     c00:	ldr	r2, [r3, #16]
     c04:	ldr	r3, [fp, #-8]
     c08:	lsl	r3, r3, #2
     c0c:	add	r3, r2, r3
     c10:	ldr	r3, [r3]
     c14:	ldr	r3, [r3]
     c18:	ldr	r2, [fp, #-28]	; 0xffffffe4
     c1c:	add	r3, r3, r2
     c20:	ldrb	r3, [r3]
     c24:	cmp	r3, #91	; 0x5b
     c28:	bne	f3c <get_node_for_entry+0x64c>
     c2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     c30:	ldr	r2, [r3, #16]
     c34:	ldr	r3, [fp, #-8]
     c38:	lsl	r3, r3, #2
     c3c:	add	r3, r2, r3
     c40:	ldr	r3, [r3]
     c44:	ldr	r3, [r3]
     c48:	ldr	r2, [fp, #-28]	; 0xffffffe4
     c4c:	add	r3, r3, r2
     c50:	ldrb	r3, [r3]
     c54:	cmp	r3, #47	; 0x2f
     c58:	moveq	r3, #1
     c5c:	movne	r3, #0
     c60:	uxtb	r3, r3
     c64:	mov	r2, r3
     c68:	ldr	r3, [fp, #-28]	; 0xffffffe4
     c6c:	add	r3, r2, r3
     c70:	str	r3, [fp, #-16]
     c74:	ldr	r3, [fp, #-28]	; 0xffffffe4
     c78:	mov	r2, r3
     c7c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     c80:	add	r3, r3, r2
     c84:	ldrb	r3, [r3]
     c88:	cmp	r3, #47	; 0x2f
     c8c:	moveq	r3, #1
     c90:	movne	r3, #0
     c94:	uxtb	r3, r3
     c98:	mov	r2, r3
     c9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ca0:	add	r3, r2, r3
     ca4:	str	r3, [fp, #-20]	; 0xffffffec
     ca8:	bl	584 <detection_node_new>
     cac:	str	r0, [fp, #-24]	; 0xffffffe8
     cb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     cb4:	cmp	r3, #0
     cb8:	bne	cc4 <get_node_for_entry+0x3d4>
     cbc:	mov	r3, #0
     cc0:	b	1040 <get_node_for_entry+0x750>
     cc4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     cc8:	add	r3, r3, #1
     ccc:	mov	r0, r3
     cd0:	bl	0 <malloc>
     cd4:	mov	r3, r0
     cd8:	mov	r2, r3
     cdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ce0:	str	r2, [r3]
     ce4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ce8:	ldr	r3, [r3]
     cec:	cmp	r3, #0
     cf0:	bne	d20 <get_node_for_entry+0x430>
     cf4:	ldr	r2, [fp, #-28]	; 0xffffffe4
     cf8:	movw	r3, #331	; 0x14b
     cfc:	str	r3, [sp]
     d00:	movw	r3, #0
     d04:	movt	r3, #0
     d08:	movw	r1, #0
     d0c:	movt	r1, #0
     d10:	mvn	r0, #0
     d14:	bl	0 <coda_set_error>
     d18:	mov	r3, #0
     d1c:	b	1040 <get_node_for_entry+0x750>
     d20:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d24:	ldr	r3, [r3]
     d28:	ldr	r2, [fp, #-28]	; 0xffffffe4
     d2c:	ldr	r1, [fp, #-36]	; 0xffffffdc
     d30:	mov	r0, r3
     d34:	bl	0 <memcpy>
     d38:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d3c:	ldr	r3, [r3]
     d40:	ldr	r2, [fp, #-28]	; 0xffffffe4
     d44:	add	r3, r3, r2
     d48:	mov	r2, #0
     d4c:	strb	r2, [r3]
     d50:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d54:	ldr	r2, [r3, #16]
     d58:	ldr	r3, [fp, #-8]
     d5c:	lsl	r3, r3, #2
     d60:	add	r3, r2, r3
     d64:	ldr	r3, [r3]
     d68:	mov	r1, r3
     d6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     d70:	bl	630 <detection_node_add_node>
     d74:	mov	r3, r0
     d78:	cmp	r3, #0
     d7c:	beq	d90 <get_node_for_entry+0x4a0>
     d80:	ldr	r0, [fp, #-24]	; 0xffffffe8
     d84:	bl	4c8 <delete_detection_node>
     d88:	mov	r3, #0
     d8c:	b	1040 <get_node_for_entry+0x750>
     d90:	ldr	r3, [fp, #-16]
     d94:	str	r3, [fp, #-12]
     d98:	b	e00 <get_node_for_entry+0x510>
     d9c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     da0:	ldr	r2, [r3, #16]
     da4:	ldr	r3, [fp, #-8]
     da8:	lsl	r3, r3, #2
     dac:	add	r3, r2, r3
     db0:	ldr	r3, [r3]
     db4:	ldr	r2, [r3]
     db8:	ldr	r3, [fp, #-12]
     dbc:	add	r2, r2, r3
     dc0:	ldr	r3, [fp, #-32]	; 0xffffffe0
     dc4:	ldr	r1, [r3, #16]
     dc8:	ldr	r3, [fp, #-8]
     dcc:	lsl	r3, r3, #2
     dd0:	add	r3, r1, r3
     dd4:	ldr	r3, [r3]
     dd8:	ldr	r3, [r3]
     ddc:	ldr	r0, [fp, #-12]
     de0:	ldr	r1, [fp, #-16]
     de4:	sub	r1, r0, r1
     de8:	add	r3, r3, r1
     dec:	ldrb	r2, [r2]
     df0:	strb	r2, [r3]
     df4:	ldr	r3, [fp, #-12]
     df8:	add	r3, r3, #1
     dfc:	str	r3, [fp, #-12]
     e00:	ldr	r3, [fp, #-32]	; 0xffffffe0
     e04:	ldr	r2, [r3, #16]
     e08:	ldr	r3, [fp, #-8]
     e0c:	lsl	r3, r3, #2
     e10:	add	r3, r2, r3
     e14:	ldr	r3, [r3]
     e18:	ldr	r2, [r3]
     e1c:	ldr	r3, [fp, #-12]
     e20:	add	r3, r2, r3
     e24:	ldrb	r3, [r3]
     e28:	cmp	r3, #0
     e2c:	bne	d9c <get_node_for_entry+0x4ac>
     e30:	ldr	r3, [fp, #-32]	; 0xffffffe0
     e34:	ldr	r2, [r3, #16]
     e38:	ldr	r3, [fp, #-8]
     e3c:	lsl	r3, r3, #2
     e40:	add	r3, r2, r3
     e44:	ldr	r3, [r3]
     e48:	ldr	r3, [r3]
     e4c:	ldr	r1, [fp, #-12]
     e50:	ldr	r2, [fp, #-16]
     e54:	sub	r2, r1, r2
     e58:	add	r3, r3, r2
     e5c:	mov	r2, #0
     e60:	strb	r2, [r3]
     e64:	ldr	r3, [fp, #-32]	; 0xffffffe0
     e68:	ldr	r2, [r3, #16]
     e6c:	ldr	r3, [fp, #-8]
     e70:	lsl	r3, r3, #2
     e74:	add	r3, r2, r3
     e78:	ldr	r2, [fp, #-24]	; 0xffffffe8
     e7c:	str	r2, [r3]
     e80:	ldr	r3, [fp, #-32]	; 0xffffffe0
     e84:	ldr	r2, [r3, #16]
     e88:	ldr	r3, [fp, #-8]
     e8c:	lsl	r3, r3, #2
     e90:	add	r3, r2, r3
     e94:	ldr	r0, [r3]
     e98:	ldr	r3, [fp, #-20]	; 0xffffffec
     e9c:	ldr	r2, [fp, #-36]	; 0xffffffdc
     ea0:	add	r3, r2, r3
     ea4:	ldr	r2, [fp, #-40]	; 0xffffffd8
     ea8:	mov	r1, r3
     eac:	bl	8f0 <get_node_for_entry>
     eb0:	mov	r3, r0
     eb4:	b	1040 <get_node_for_entry+0x750>
     eb8:	ldr	r3, [fp, #-32]	; 0xffffffe0
     ebc:	ldr	r2, [r3, #16]
     ec0:	ldr	r3, [fp, #-8]
     ec4:	lsl	r3, r3, #2
     ec8:	add	r3, r2, r3
     ecc:	ldr	r3, [r3]
     ed0:	ldr	r3, [r3]
     ed4:	cmp	r3, #0
     ed8:	bne	f38 <get_node_for_entry+0x648>
     edc:	ldr	r3, [fp, #-40]	; 0xffffffd8
     ee0:	ldr	r0, [r3, #4]
     ee4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     ee8:	ldr	r2, [r3, #16]
     eec:	ldr	r3, [fp, #-8]
     ef0:	lsl	r3, r3, #2
     ef4:	add	r3, r2, r3
     ef8:	ldr	r3, [r3]
     efc:	ldr	r3, [r3, #4]
     f00:	mov	r1, r3
     f04:	bl	0 <coda_expression_is_equal>
     f08:	mov	r3, r0
     f0c:	cmp	r3, #0
     f10:	beq	f3c <get_node_for_entry+0x64c>
     f14:	ldr	r3, [fp, #-32]	; 0xffffffe0
     f18:	ldr	r2, [r3, #16]
     f1c:	ldr	r3, [fp, #-8]
     f20:	lsl	r3, r3, #2
     f24:	add	r3, r2, r3
     f28:	ldr	r3, [r3]
     f2c:	b	1040 <get_node_for_entry+0x750>
     f30:	nop	{0}
     f34:	b	f3c <get_node_for_entry+0x64c>
     f38:	nop	{0}
     f3c:	ldr	r3, [fp, #-8]
     f40:	add	r3, r3, #1
     f44:	str	r3, [fp, #-8]
     f48:	ldr	r3, [fp, #-32]	; 0xffffffe0
     f4c:	ldr	r3, [r3, #12]
     f50:	ldr	r2, [fp, #-8]
     f54:	cmp	r2, r3
     f58:	blt	93c <get_node_for_entry+0x4c>
     f5c:	bl	584 <detection_node_new>
     f60:	str	r0, [fp, #-24]	; 0xffffffe8
     f64:	ldr	r3, [fp, #-24]	; 0xffffffe8
     f68:	cmp	r3, #0
     f6c:	bne	f78 <get_node_for_entry+0x688>
     f70:	mov	r3, #0
     f74:	b	1040 <get_node_for_entry+0x750>
     f78:	ldr	r3, [fp, #-36]	; 0xffffffdc
     f7c:	cmp	r3, #0
     f80:	beq	fd0 <get_node_for_entry+0x6e0>
     f84:	ldr	r0, [fp, #-36]	; 0xffffffdc
     f88:	bl	0 <strdup>
     f8c:	mov	r3, r0
     f90:	mov	r2, r3
     f94:	ldr	r3, [fp, #-24]	; 0xffffffe8
     f98:	str	r2, [r3]
     f9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     fa0:	ldr	r3, [r3]
     fa4:	cmp	r3, #0
     fa8:	bne	fe0 <get_node_for_entry+0x6f0>
     fac:	movw	r3, #383	; 0x17f
     fb0:	movw	r2, #0
     fb4:	movt	r2, #0
     fb8:	movw	r1, #0
     fbc:	movt	r1, #0
     fc0:	mvn	r0, #0
     fc4:	bl	0 <coda_set_error>
     fc8:	mov	r3, #0
     fcc:	b	1040 <get_node_for_entry+0x750>
     fd0:	ldr	r3, [fp, #-40]	; 0xffffffd8
     fd4:	ldr	r2, [r3, #4]
     fd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     fdc:	str	r2, [r3, #4]
     fe0:	ldr	r1, [fp, #-24]	; 0xffffffe8
     fe4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     fe8:	bl	630 <detection_node_add_node>
     fec:	mov	r3, r0
     ff0:	cmp	r3, #0
     ff4:	beq	1008 <get_node_for_entry+0x718>
     ff8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     ffc:	bl	4c8 <delete_detection_node>
    1000:	mov	r3, #0
    1004:	b	1040 <get_node_for_entry+0x750>
    1008:	ldr	r3, [fp, #-36]	; 0xffffffdc
    100c:	cmp	r3, #0
    1010:	beq	103c <get_node_for_entry+0x74c>
    1014:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1018:	ldr	r3, [r3, #4]
    101c:	cmp	r3, #0
    1020:	beq	103c <get_node_for_entry+0x74c>
    1024:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1028:	mov	r1, #0
    102c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1030:	bl	8f0 <get_node_for_entry>
    1034:	mov	r3, r0
    1038:	b	1040 <get_node_for_entry+0x750>
    103c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1040:	mov	r0, r3
    1044:	sub	sp, fp, #4
    1048:	ldr	fp, [sp]
    104c:	add	sp, sp, #4
    1050:	pop	{pc}		; (ldr pc, [sp], #4)

00001054 <coda_detection_tree_delete>:
    1054:	str	fp, [sp, #-8]!
    1058:	str	lr, [sp, #4]
    105c:	add	fp, sp, #4
    1060:	sub	sp, sp, #8
    1064:	str	r0, [fp, #-8]
    1068:	ldr	r0, [fp, #-8]
    106c:	bl	4c8 <delete_detection_node>
    1070:	nop	{0}
    1074:	sub	sp, fp, #4
    1078:	ldr	fp, [sp]
    107c:	add	sp, sp, #4
    1080:	pop	{pc}		; (ldr pc, [sp], #4)

00001084 <coda_detection_tree_add_rule>:
    1084:	str	fp, [sp, #-8]!
    1088:	str	lr, [sp, #4]
    108c:	add	fp, sp, #4
    1090:	sub	sp, sp, #16
    1094:	str	r0, [fp, #-16]
    1098:	str	r1, [fp, #-20]	; 0xffffffec
    109c:	ldr	r3, [fp, #-20]	; 0xffffffec
    10a0:	ldr	r3, [r3]
    10a4:	cmp	r3, #0
    10a8:	bne	10d8 <coda_detection_tree_add_rule+0x54>
    10ac:	ldr	r3, [fp, #-20]	; 0xffffffec
    10b0:	ldr	r3, [r3, #8]
    10b4:	ldr	r3, [r3, #8]
    10b8:	mov	r2, r3
    10bc:	movw	r1, #0
    10c0:	movt	r1, #0
    10c4:	movw	r0, #65136	; 0xfe70
    10c8:	movt	r0, #65535	; 0xffff
    10cc:	bl	0 <coda_set_error>
    10d0:	mvn	r3, #0
    10d4:	b	11f4 <coda_detection_tree_add_rule+0x170>
    10d8:	ldr	r3, [fp, #-16]
    10dc:	ldr	r3, [r3]
    10e0:	str	r3, [fp, #-8]
    10e4:	ldr	r3, [fp, #-8]
    10e8:	cmp	r3, #0
    10ec:	bne	1118 <coda_detection_tree_add_rule+0x94>
    10f0:	bl	584 <detection_node_new>
    10f4:	str	r0, [fp, #-8]
    10f8:	ldr	r3, [fp, #-8]
    10fc:	cmp	r3, #0
    1100:	bne	110c <coda_detection_tree_add_rule+0x88>
    1104:	mvn	r3, #0
    1108:	b	11f4 <coda_detection_tree_add_rule+0x170>
    110c:	ldr	r3, [fp, #-16]
    1110:	ldr	r2, [fp, #-8]
    1114:	str	r2, [r3]
    1118:	mov	r3, #0
    111c:	str	r3, [fp, #-12]
    1120:	b	1188 <coda_detection_tree_add_rule+0x104>
    1124:	ldr	r3, [fp, #-20]	; 0xffffffec
    1128:	ldr	r2, [r3, #4]
    112c:	ldr	r3, [fp, #-12]
    1130:	lsl	r3, r3, #2
    1134:	add	r3, r2, r3
    1138:	ldr	r3, [r3]
    113c:	ldr	r1, [r3]
    1140:	ldr	r3, [fp, #-20]	; 0xffffffec
    1144:	ldr	r2, [r3, #4]
    1148:	ldr	r3, [fp, #-12]
    114c:	lsl	r3, r3, #2
    1150:	add	r3, r2, r3
    1154:	ldr	r3, [r3]
    1158:	mov	r2, r3
    115c:	ldr	r0, [fp, #-8]
    1160:	bl	8f0 <get_node_for_entry>
    1164:	str	r0, [fp, #-8]
    1168:	ldr	r3, [fp, #-8]
    116c:	cmp	r3, #0
    1170:	bne	117c <coda_detection_tree_add_rule+0xf8>
    1174:	mvn	r3, #0
    1178:	b	11f4 <coda_detection_tree_add_rule+0x170>
    117c:	ldr	r3, [fp, #-12]
    1180:	add	r3, r3, #1
    1184:	str	r3, [fp, #-12]
    1188:	ldr	r3, [fp, #-20]	; 0xffffffec
    118c:	ldr	r3, [r3]
    1190:	ldr	r2, [fp, #-12]
    1194:	cmp	r2, r3
    1198:	blt	1124 <coda_detection_tree_add_rule+0xa0>
    119c:	ldr	r3, [fp, #-8]
    11a0:	ldr	r3, [r3, #8]
    11a4:	cmp	r3, #0
    11a8:	beq	11e4 <coda_detection_tree_add_rule+0x160>
    11ac:	ldr	r3, [fp, #-20]	; 0xffffffec
    11b0:	ldr	r3, [r3, #8]
    11b4:	ldr	r2, [r3, #8]
    11b8:	ldr	r3, [fp, #-8]
    11bc:	ldr	r3, [r3, #8]
    11c0:	ldr	r3, [r3, #8]
    11c4:	ldr	r3, [r3, #8]
    11c8:	movw	r1, #0
    11cc:	movt	r1, #0
    11d0:	movw	r0, #65136	; 0xfe70
    11d4:	movt	r0, #65535	; 0xffff
    11d8:	bl	0 <coda_set_error>
    11dc:	mvn	r3, #0
    11e0:	b	11f4 <coda_detection_tree_add_rule+0x170>
    11e4:	ldr	r3, [fp, #-8]
    11e8:	ldr	r2, [fp, #-20]	; 0xffffffec
    11ec:	str	r2, [r3, #8]
    11f0:	mov	r3, #0
    11f4:	mov	r0, r3
    11f8:	sub	sp, fp, #4
    11fc:	ldr	fp, [sp]
    1200:	add	sp, sp, #4
    1204:	pop	{pc}		; (ldr pc, [sp], #4)

00001208 <coda_evaluate_detection_node>:
    1208:	str	fp, [sp, #-8]!
    120c:	str	lr, [sp, #4]
    1210:	add	fp, sp, #4
    1214:	sub	sp, sp, #552	; 0x228
    1218:	str	r0, [fp, #-544]	; 0xfffffde0
    121c:	str	r1, [fp, #-548]	; 0xfffffddc
    1220:	str	r2, [fp, #-552]	; 0xfffffdd8
    1224:	ldr	r2, [fp, #-548]	; 0xfffffddc
    1228:	sub	r3, fp, #532	; 0x214
    122c:	mov	r1, r2
    1230:	mov	r2, #520	; 0x208
    1234:	mov	r0, r3
    1238:	bl	0 <memcpy>
    123c:	ldr	r3, [fp, #-552]	; 0xfffffdd8
    1240:	mov	r2, #0
    1244:	str	r2, [r3]
    1248:	ldr	r3, [fp, #-544]	; 0xfffffde0
    124c:	cmp	r3, #0
    1250:	bne	125c <coda_evaluate_detection_node+0x54>
    1254:	mov	r3, #0
    1258:	b	13b8 <coda_evaluate_detection_node+0x1b0>
    125c:	ldr	r3, [fp, #-544]	; 0xfffffde0
    1260:	ldr	r3, [r3]
    1264:	cmp	r3, #0
    1268:	beq	12ac <coda_evaluate_detection_node+0xa4>
    126c:	ldr	r3, [fp, #-544]	; 0xfffffde0
    1270:	ldr	r2, [r3]
    1274:	sub	r3, fp, #532	; 0x214
    1278:	mov	r1, r2
    127c:	mov	r0, r3
    1280:	bl	0 <coda_cursor_goto>
    1284:	mov	r3, r0
    1288:	cmp	r3, #0
    128c:	beq	1310 <coda_evaluate_detection_node+0x108>
    1290:	ldr	r3, [pc, #308]	; 13cc <coda_evaluate_detection_node+0x1c4>
    1294:	ldr	r3, [pc, r3]
    1298:	mrc	15, 0, r2, cr13, cr0, {3}
    129c:	mov	r1, #0
    12a0:	str	r1, [r2, r3]
    12a4:	mov	r3, #0
    12a8:	b	13b8 <coda_evaluate_detection_node+0x1b0>
    12ac:	ldr	r3, [fp, #-544]	; 0xfffffde0
    12b0:	ldr	r3, [r3, #4]
    12b4:	cmp	r3, #0
    12b8:	beq	1310 <coda_evaluate_detection_node+0x108>
    12bc:	ldr	r3, [fp, #-544]	; 0xfffffde0
    12c0:	ldr	r3, [r3, #4]
    12c4:	sub	r2, fp, #536	; 0x218
    12c8:	sub	r1, fp, #532	; 0x214
    12cc:	mov	r0, r3
    12d0:	bl	0 <coda_expression_eval_bool>
    12d4:	mov	r3, r0
    12d8:	cmp	r3, #0
    12dc:	beq	12fc <coda_evaluate_detection_node+0xf4>
    12e0:	ldr	r3, [pc, #232]	; 13d0 <coda_evaluate_detection_node+0x1c8>
    12e4:	ldr	r3, [pc, r3]
    12e8:	mrc	15, 0, r2, cr13, cr0, {3}
    12ec:	mov	r1, #0
    12f0:	str	r1, [r2, r3]
    12f4:	mov	r3, #0
    12f8:	b	13b8 <coda_evaluate_detection_node+0x1b0>
    12fc:	ldr	r3, [fp, #-536]	; 0xfffffde8
    1300:	cmp	r3, #0
    1304:	bne	1310 <coda_evaluate_detection_node+0x108>
    1308:	mov	r3, #0
    130c:	b	13b8 <coda_evaluate_detection_node+0x1b0>
    1310:	mov	r3, #0
    1314:	str	r3, [fp, #-8]
    1318:	b	137c <coda_evaluate_detection_node+0x174>
    131c:	ldr	r3, [fp, #-544]	; 0xfffffde0
    1320:	ldr	r2, [r3, #16]
    1324:	ldr	r3, [fp, #-8]
    1328:	lsl	r3, r3, #2
    132c:	add	r3, r2, r3
    1330:	ldr	r3, [r3]
    1334:	sub	r1, fp, #532	; 0x214
    1338:	ldr	r2, [fp, #-552]	; 0xfffffdd8
    133c:	mov	r0, r3
    1340:	bl	1208 <coda_evaluate_detection_node>
    1344:	mov	r3, r0
    1348:	cmp	r3, #0
    134c:	beq	1358 <coda_evaluate_detection_node+0x150>
    1350:	mvn	r3, #0
    1354:	b	13b8 <coda_evaluate_detection_node+0x1b0>
    1358:	ldr	r3, [fp, #-552]	; 0xfffffdd8
    135c:	ldr	r3, [r3]
    1360:	cmp	r3, #0
    1364:	beq	1370 <coda_evaluate_detection_node+0x168>
    1368:	mov	r3, #0
    136c:	b	13b8 <coda_evaluate_detection_node+0x1b0>
    1370:	ldr	r3, [fp, #-8]
    1374:	add	r3, r3, #1
    1378:	str	r3, [fp, #-8]
    137c:	ldr	r3, [fp, #-544]	; 0xfffffde0
    1380:	ldr	r3, [r3, #12]
    1384:	ldr	r2, [fp, #-8]
    1388:	cmp	r2, r3
    138c:	blt	131c <coda_evaluate_detection_node+0x114>
    1390:	ldr	r3, [fp, #-544]	; 0xfffffde0
    1394:	ldr	r3, [r3, #8]
    1398:	cmp	r3, #0
    139c:	beq	13b4 <coda_evaluate_detection_node+0x1ac>
    13a0:	ldr	r3, [fp, #-544]	; 0xfffffde0
    13a4:	ldr	r3, [r3, #8]
    13a8:	ldr	r2, [r3, #8]
    13ac:	ldr	r3, [fp, #-552]	; 0xfffffdd8
    13b0:	str	r2, [r3]
    13b4:	mov	r3, #0
    13b8:	mov	r0, r3
    13bc:	sub	sp, fp, #4
    13c0:	ldr	fp, [sp]
    13c4:	add	sp, sp, #4
    13c8:	pop	{pc}		; (ldr pc, [sp], #4)
    13cc:	.word	0x00000130
    13d0:	.word	0x000000e4
