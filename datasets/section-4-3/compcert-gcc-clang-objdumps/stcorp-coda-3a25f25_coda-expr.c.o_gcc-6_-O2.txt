
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-expr.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <compare_strings>:
       0:	push	{r4, r5, r6, r7, r8, r9, lr}
       4:	ldr	r8, [sp, #28]
       8:	ldr	r9, [sp, #32]
       c:	cmp	r1, r8
      10:	movlt	r7, r1
      14:	movge	r7, r8
      18:	cmp	r7, #0
      1c:	ble	a0 <compare_strings+0xa0>
      20:	ldrb	lr, [r2, r0]
      24:	ldrb	ip, [r9, r3]
      28:	add	r4, r2, r0
      2c:	cmp	lr, ip
      30:	add	lr, r9, r3
      34:	mov	ip, #0
      38:	beq	50 <compare_strings+0x50>
      3c:	b	5c <compare_strings+0x5c>
      40:	ldrb	r6, [r4, #1]!
      44:	ldrb	r5, [lr, #1]!
      48:	cmp	r6, r5
      4c:	bne	5c <compare_strings+0x5c>
      50:	add	ip, ip, #1
      54:	cmp	ip, r7
      58:	bne	40 <compare_strings+0x40>
      5c:	cmp	r1, ip
      60:	beq	8c <compare_strings+0x8c>
      64:	cmp	r8, ip
      68:	beq	98 <compare_strings+0x98>
      6c:	add	r2, r2, ip
      70:	add	ip, r9, ip
      74:	ldrb	r2, [r2, r0]
      78:	ldrb	r3, [ip, r3]
      7c:	cmp	r2, r3
      80:	movhi	r0, #1
      84:	mvnls	r0, #0
      88:	pop	{r4, r5, r6, r7, r8, r9, pc}
      8c:	subs	r0, r1, r8
      90:	mvnne	r0, #0
      94:	pop	{r4, r5, r6, r7, r8, r9, pc}
      98:	mov	r0, #1
      9c:	pop	{r4, r5, r6, r7, r8, r9, pc}
      a0:	mov	ip, #0
      a4:	b	5c <compare_strings+0x5c>

000000a8 <print_expression>:
      a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
      ac:	subs	r7, r0, #0
      b0:	sub	sp, sp, #52	; 0x34
      b4:	beq	241c <print_expression+0x2374>
      b8:	mov	r8, r3
      bc:	ldr	r3, [r7]
      c0:	mov	r4, r1
      c4:	mov	r5, r2
      c8:	cmp	r3, #86	; 0x56
      cc:	ldrls	pc, [pc, r3, lsl #2]
      d0:	b	294 <print_expression+0x1ec>
      d4:	.word	0x00001590
      d8:	.word	0x0000154c
      dc:	.word	0x00001500
      e0:	.word	0x000014a4
      e4:	.word	0x0000117c
      e8:	.word	0x00001120
      ec:	.word	0x000010c4
      f0:	.word	0x00001068
      f4:	.word	0x0000100c
      f8:	.word	0x00000fb0
      fc:	.word	0x00000f98
     100:	.word	0x00000f3c
     104:	.word	0x00000f00
     108:	.word	0x00000ec4
     10c:	.word	0x00000e88
     110:	.word	0x00000e4c
     114:	.word	0x00000d94
     118:	.word	0x00000d58
     11c:	.word	0x00000e24
     120:	.word	0x00000abc
     124:	.word	0x00000ce0
     128:	.word	0x00000ad8
     12c:	.word	0x00000ad8
     130:	.word	0x00000cfc
     134:	.word	0x00000a78
     138:	.word	0x00000a34
     13c:	.word	0x000009f8
     140:	.word	0x000009e0
     144:	.word	0x000009c8
     148:	.word	0x0000098c
     14c:	.word	0x00000950
     150:	.word	0x00000898
     154:	.word	0x0000084c
     158:	.word	0x00001c6c
     15c:	.word	0x00001c60
     160:	.word	0x00001a2c
     164:	.word	0x00001a20
     168:	.word	0x00001c2c
     16c:	.word	0x00001c20
     170:	.word	0x0000181c
     174:	.word	0x000017d0
     178:	.word	0x00001784
     17c:	.word	0x00001714
     180:	.word	0x000016d8
     184:	.word	0x000016bc
     188:	.word	0x00001680
     18c:	.word	0x00001644
     190:	.word	0x00001608
     194:	.word	0x000015cc
     198:	.word	0x00001cd8
     19c:	.word	0x00001c9c
     1a0:	.word	0x000019d4
     1a4:	.word	0x00001988
     1a8:	.word	0x0000193c
     1ac:	.word	0x000018f0
     1b0:	.word	0x000018b4
     1b4:	.word	0x00001858
     1b8:	.word	0x00001b1c
     1bc:	.word	0x00001ad8
     1c0:	.word	0x00001a94
     1c4:	.word	0x00001a6c
     1c8:	.word	0x00001ba0
     1cc:	.word	0x00001b78
     1d0:	.word	0x00001be4
     1d4:	.word	0x00000810
     1d8:	.word	0x000007cc
     1dc:	.word	0x00000788
     1e0:	.word	0x00000770
     1e4:	.word	0x00000758
     1e8:	.word	0x00000740
     1ec:	.word	0x00000728
     1f0:	.word	0x000006bc
     1f4:	.word	0x00000680
     1f8:	.word	0x00000644
     1fc:	.word	0x00000600
     200:	.word	0x000005f4
     204:	.word	0x00000230
     208:	.word	0x00000578
     20c:	.word	0x00000534
     210:	.word	0x000004d8
     214:	.word	0x0000049c
     218:	.word	0x00000440
     21c:	.word	0x00000400
     220:	.word	0x000003c0
     224:	.word	0x00000348
     228:	.word	0x00000300
     22c:	.word	0x000002a0
     230:	ldr	r0, [pc, #4000]	; 11d8 <print_expression+0x1130>
     234:	ldr	r3, [pc, #4000]	; 11dc <print_expression+0x1134>
     238:	cmp	r8, #0
     23c:	moveq	r0, r3
     240:	mov	r6, #15
     244:	blx	r4
     248:	ldr	r0, [r7, #16]
     24c:	mov	r3, r8
     250:	str	r6, [sp]
     254:	mov	r2, r5
     258:	mov	r1, r4
     25c:	bl	a8 <print_expression>
     260:	ldr	r3, [r7, #20]
     264:	cmp	r3, #0
     268:	beq	28c <print_expression+0x1e4>
     26c:	ldr	r0, [pc, #3948]	; 11e0 <print_expression+0x1138>
     270:	blx	r4
     274:	ldr	r0, [r7, #20]
     278:	mov	r3, r8
     27c:	str	r6, [sp]
     280:	mov	r2, r5
     284:	mov	r1, r4
     288:	bl	a8 <print_expression>
     28c:	ldr	r0, [pc, #3920]	; 11e4 <print_expression+0x113c>
     290:	blx	r4
     294:	mov	r0, #0
     298:	add	sp, sp, #52	; 0x34
     29c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     2a0:	ldr	r3, [pc, #3904]	; 11e8 <print_expression+0x1140>
     2a4:	cmp	r8, #0
     2a8:	ldr	r1, [r7, #12]
     2ac:	mov	r6, #15
     2b0:	ldr	r0, [pc, #3892]	; 11ec <print_expression+0x1144>
     2b4:	moveq	r0, r3
     2b8:	blx	r4
     2bc:	mov	r3, r8
     2c0:	mov	r2, r5
     2c4:	mov	r1, r4
     2c8:	ldr	r0, [r7, #16]
     2cc:	str	r6, [sp]
     2d0:	bl	a8 <print_expression>
     2d4:	ldr	r0, [pc, #3844]	; 11e0 <print_expression+0x1138>
     2d8:	blx	r4
     2dc:	ldr	r0, [r7, #20]
     2e0:	mov	r3, r8
     2e4:	str	r6, [sp]
     2e8:	mov	r2, r5
     2ec:	mov	r1, r4
     2f0:	bl	a8 <print_expression>
     2f4:	ldr	r0, [pc, #3816]	; 11e4 <print_expression+0x113c>
     2f8:	blx	r4
     2fc:	b	294 <print_expression+0x1ec>
     300:	ldr	r1, [r7, #12]
     304:	ldr	r0, [pc, #3812]	; 11f0 <print_expression+0x1148>
     308:	blx	r4
     30c:	ldr	r3, [r7, #16]
     310:	cmp	r3, #0
     314:	beq	294 <print_expression+0x1ec>
     318:	ldr	r0, [pc, #3796]	; 11f4 <print_expression+0x114c>
     31c:	blx	r4
     320:	mov	r1, #15
     324:	ldr	r0, [r7, #16]
     328:	mov	r3, r8
     32c:	str	r1, [sp]
     330:	mov	r2, r5
     334:	mov	r1, r4
     338:	bl	a8 <print_expression>
     33c:	ldr	r0, [pc, #3764]	; 11f8 <print_expression+0x1150>
     340:	blx	r4
     344:	b	294 <print_expression+0x1ec>
     348:	ldr	r3, [pc, #3744]	; 11f0 <print_expression+0x1148>
     34c:	cmp	r8, #0
     350:	ldr	r0, [pc, #3748]	; 11fc <print_expression+0x1154>
     354:	ldr	r1, [r7, #12]
     358:	moveq	r0, r3
     35c:	blx	r4
     360:	ldr	r3, [r7, #16]
     364:	cmp	r3, #0
     368:	beq	398 <print_expression+0x2f0>
     36c:	ldr	r0, [pc, #3712]	; 11f4 <print_expression+0x114c>
     370:	blx	r4
     374:	mov	r3, #15
     378:	ldr	r0, [r7, #16]
     37c:	mov	r2, r5
     380:	str	r3, [sp]
     384:	mov	r1, r4
     388:	mov	r3, r8
     38c:	bl	a8 <print_expression>
     390:	ldr	r0, [pc, #3680]	; 11f8 <print_expression+0x1150>
     394:	blx	r4
     398:	ldr	r0, [pc, #3680]	; 1200 <print_expression+0x1158>
     39c:	blx	r4
     3a0:	mov	ip, #15
     3a4:	ldr	r0, [r7, #20]
     3a8:	mov	r3, r8
     3ac:	mov	r2, r5
     3b0:	mov	r1, r4
     3b4:	str	ip, [sp]
     3b8:	bl	a8 <print_expression>
     3bc:	b	294 <print_expression+0x1ec>
     3c0:	ldr	r3, [pc, #3644]	; 1204 <print_expression+0x115c>
     3c4:	cmp	r8, #0
     3c8:	ldr	r1, [r7, #12]
     3cc:	ldr	r0, [pc, #3636]	; 1208 <print_expression+0x1160>
     3d0:	moveq	r0, r3
     3d4:	blx	r4
     3d8:	mov	r1, #15
     3dc:	ldr	r0, [r7, #16]
     3e0:	mov	r3, r8
     3e4:	str	r1, [sp]
     3e8:	mov	r2, r5
     3ec:	mov	r1, r4
     3f0:	bl	a8 <print_expression>
     3f4:	ldr	r0, [pc, #3560]	; 11e4 <print_expression+0x113c>
     3f8:	blx	r4
     3fc:	b	294 <print_expression+0x1ec>
     400:	ldr	r3, [pc, #3588]	; 120c <print_expression+0x1164>
     404:	cmp	r8, #0
     408:	ldr	r1, [r7, #12]
     40c:	ldr	r0, [pc, #3580]	; 1210 <print_expression+0x1168>
     410:	moveq	r0, r3
     414:	blx	r4
     418:	mov	r1, #15
     41c:	ldr	r0, [r7, #16]
     420:	mov	r3, r8
     424:	str	r1, [sp]
     428:	mov	r2, r5
     42c:	mov	r1, r4
     430:	bl	a8 <print_expression>
     434:	ldr	r0, [pc, #3496]	; 11e4 <print_expression+0x113c>
     438:	blx	r4
     43c:	b	294 <print_expression+0x1ec>
     440:	ldr	r3, [pc, #3532]	; 1214 <print_expression+0x116c>
     444:	cmp	r8, #0
     448:	mov	r6, #15
     44c:	ldr	r0, [pc, #3524]	; 1218 <print_expression+0x1170>
     450:	moveq	r0, r3
     454:	blx	r1
     458:	mov	r3, r8
     45c:	mov	r2, r5
     460:	mov	r1, r4
     464:	ldr	r0, [r7, #16]
     468:	str	r6, [sp]
     46c:	bl	a8 <print_expression>
     470:	ldr	r0, [pc, #3432]	; 11e0 <print_expression+0x1138>
     474:	blx	r4
     478:	ldr	r0, [r7, #20]
     47c:	mov	r3, r8
     480:	str	r6, [sp]
     484:	mov	r2, r5
     488:	mov	r1, r4
     48c:	bl	a8 <print_expression>
     490:	ldr	r0, [pc, #3404]	; 11e4 <print_expression+0x113c>
     494:	blx	r4
     498:	b	294 <print_expression+0x1ec>
     49c:	ldr	r3, [pc, #3448]	; 121c <print_expression+0x1174>
     4a0:	cmp	r8, #0
     4a4:	ldr	r0, [pc, #3444]	; 1220 <print_expression+0x1178>
     4a8:	moveq	r0, r3
     4ac:	blx	r1
     4b0:	mov	r1, #15
     4b4:	ldr	r0, [r7, #16]
     4b8:	mov	r3, r8
     4bc:	str	r1, [sp]
     4c0:	mov	r2, r5
     4c4:	mov	r1, r4
     4c8:	bl	a8 <print_expression>
     4cc:	ldr	r0, [pc, #3344]	; 11e4 <print_expression+0x113c>
     4d0:	blx	r4
     4d4:	b	294 <print_expression+0x1ec>
     4d8:	ldr	r3, [pc, #3396]	; 1224 <print_expression+0x117c>
     4dc:	cmp	r8, #0
     4e0:	mov	r6, #15
     4e4:	ldr	r0, [pc, #3388]	; 1228 <print_expression+0x1180>
     4e8:	moveq	r0, r3
     4ec:	blx	r1
     4f0:	mov	r3, r8
     4f4:	mov	r2, r5
     4f8:	mov	r1, r4
     4fc:	ldr	r0, [r7, #16]
     500:	str	r6, [sp]
     504:	bl	a8 <print_expression>
     508:	ldr	r0, [pc, #3280]	; 11e0 <print_expression+0x1138>
     50c:	blx	r4
     510:	ldr	r0, [r7, #20]
     514:	mov	r3, r8
     518:	str	r6, [sp]
     51c:	mov	r2, r5
     520:	mov	r1, r4
     524:	bl	a8 <print_expression>
     528:	ldr	r0, [pc, #3252]	; 11e4 <print_expression+0x113c>
     52c:	blx	r4
     530:	b	294 <print_expression+0x1ec>
     534:	ldr	r3, [sp, #88]	; 0x58
     538:	cmp	r3, #3
     53c:	ble	20b8 <print_expression+0x2010>
     540:	mov	r6, #4
     544:	mov	r3, r8
     548:	ldr	r0, [r7, #16]
     54c:	str	r6, [sp]
     550:	bl	a8 <print_expression>
     554:	ldr	r0, [pc, #3824]	; 144c <print_expression+0x13a4>
     558:	blx	r4
     55c:	ldr	r0, [r7, #20]
     560:	mov	r3, r8
     564:	str	r6, [sp]
     568:	mov	r2, r5
     56c:	mov	r1, r4
     570:	bl	a8 <print_expression>
     574:	b	294 <print_expression+0x1ec>
     578:	ldr	r3, [pc, #3244]	; 122c <print_expression+0x1184>
     57c:	cmp	r8, #0
     580:	mov	r6, #15
     584:	ldr	r0, [pc, #3236]	; 1230 <print_expression+0x1188>
     588:	moveq	r0, r3
     58c:	blx	r1
     590:	mov	r3, r8
     594:	mov	r2, r5
     598:	mov	r1, r4
     59c:	ldr	r0, [r7, #16]
     5a0:	str	r6, [sp]
     5a4:	bl	a8 <print_expression>
     5a8:	ldr	r0, [pc, #3120]	; 11e0 <print_expression+0x1138>
     5ac:	blx	r4
     5b0:	mov	r3, r8
     5b4:	mov	r2, r5
     5b8:	mov	r1, r4
     5bc:	ldr	r0, [r7, #20]
     5c0:	str	r6, [sp]
     5c4:	bl	a8 <print_expression>
     5c8:	ldr	r0, [pc, #3088]	; 11e0 <print_expression+0x1138>
     5cc:	blx	r4
     5d0:	ldr	r0, [r7, #24]
     5d4:	mov	r3, r8
     5d8:	str	r6, [sp]
     5dc:	mov	r2, r5
     5e0:	mov	r1, r4
     5e4:	bl	a8 <print_expression>
     5e8:	ldr	r0, [pc, #3060]	; 11e4 <print_expression+0x113c>
     5ec:	blx	r4
     5f0:	b	294 <print_expression+0x1ec>
     5f4:	ldr	r0, [pc, #3128]	; 1234 <print_expression+0x118c>
     5f8:	ldr	r3, [pc, #3128]	; 1238 <print_expression+0x1190>
     5fc:	b	238 <print_expression+0x190>
     600:	mov	r6, #15
     604:	ldr	r0, [r7, #16]
     608:	mov	r3, r8
     60c:	str	r6, [sp]
     610:	bl	a8 <print_expression>
     614:	ldr	r3, [pc, #3104]	; 123c <print_expression+0x1194>
     618:	cmp	r8, #0
     61c:	ldr	r0, [pc, #3100]	; 1240 <print_expression+0x1198>
     620:	moveq	r0, r3
     624:	blx	r4
     628:	ldr	r0, [r7, #20]
     62c:	mov	r3, r8
     630:	str	r6, [sp]
     634:	mov	r2, r5
     638:	mov	r1, r4
     63c:	bl	a8 <print_expression>
     640:	b	294 <print_expression+0x1ec>
     644:	ldr	r3, [pc, #3064]	; 1244 <print_expression+0x119c>
     648:	cmp	r8, #0
     64c:	ldr	r0, [pc, #3060]	; 1248 <print_expression+0x11a0>
     650:	moveq	r0, r3
     654:	blx	r1
     658:	mov	r1, #15
     65c:	ldr	r0, [r7, #16]
     660:	mov	r3, r8
     664:	str	r1, [sp]
     668:	mov	r2, r5
     66c:	mov	r1, r4
     670:	bl	a8 <print_expression>
     674:	ldr	r0, [pc, #2920]	; 11e4 <print_expression+0x113c>
     678:	blx	r4
     67c:	b	294 <print_expression+0x1ec>
     680:	ldr	r3, [pc, #3012]	; 124c <print_expression+0x11a4>
     684:	cmp	r8, #0
     688:	ldr	r0, [pc, #3008]	; 1250 <print_expression+0x11a8>
     68c:	moveq	r0, r3
     690:	blx	r1
     694:	mov	r1, #15
     698:	ldr	r0, [r7, #16]
     69c:	mov	r3, r8
     6a0:	str	r1, [sp]
     6a4:	mov	r2, r5
     6a8:	mov	r1, r4
     6ac:	bl	a8 <print_expression>
     6b0:	ldr	r0, [pc, #2860]	; 11e4 <print_expression+0x113c>
     6b4:	blx	r4
     6b8:	b	294 <print_expression+0x1ec>
     6bc:	ldr	r3, [pc, #2960]	; 1254 <print_expression+0x11ac>
     6c0:	cmp	r8, #0
     6c4:	ldr	r0, [pc, #2956]	; 1258 <print_expression+0x11b0>
     6c8:	mov	r6, #15
     6cc:	moveq	r0, r3
     6d0:	blx	r1
     6d4:	mov	r3, r8
     6d8:	mov	r2, r5
     6dc:	mov	r1, r4
     6e0:	ldr	r0, [r7, #16]
     6e4:	str	r6, [sp]
     6e8:	bl	a8 <print_expression>
     6ec:	ldr	r0, [pc, #2796]	; 11e0 <print_expression+0x1138>
     6f0:	blx	r4
     6f4:	ldr	r0, [r7, #20]
     6f8:	mov	r3, r8
     6fc:	str	r6, [sp]
     700:	mov	r2, r5
     704:	mov	r1, r4
     708:	bl	a8 <print_expression>
     70c:	ldr	r3, [r7, #24]
     710:	cmp	r3, #0
     714:	beq	28c <print_expression+0x1e4>
     718:	ldr	r0, [pc, #2752]	; 11e0 <print_expression+0x1138>
     71c:	blx	r4
     720:	ldr	r0, [r7, #24]
     724:	b	278 <print_expression+0x1d0>
     728:	ldr	r3, [pc, #2860]	; 125c <print_expression+0x11b4>
     72c:	cmp	r8, #0
     730:	ldr	r0, [pc, #2856]	; 1260 <print_expression+0x11b8>
     734:	moveq	r0, r3
     738:	blx	r1
     73c:	b	294 <print_expression+0x1ec>
     740:	ldr	r3, [pc, #2844]	; 1264 <print_expression+0x11bc>
     744:	cmp	r8, #0
     748:	ldr	r0, [pc, #2840]	; 1268 <print_expression+0x11c0>
     74c:	moveq	r0, r3
     750:	blx	r1
     754:	b	294 <print_expression+0x1ec>
     758:	ldr	r3, [pc, #2828]	; 126c <print_expression+0x11c4>
     75c:	cmp	r8, #0
     760:	ldr	r0, [pc, #2824]	; 1270 <print_expression+0x11c8>
     764:	moveq	r0, r3
     768:	blx	r1
     76c:	b	294 <print_expression+0x1ec>
     770:	ldr	r3, [pc, #2812]	; 1274 <print_expression+0x11cc>
     774:	cmp	r8, #0
     778:	ldr	r0, [pc, #2808]	; 1278 <print_expression+0x11d0>
     77c:	moveq	r0, r3
     780:	blx	r1
     784:	b	294 <print_expression+0x1ec>
     788:	ldr	r3, [sp, #88]	; 0x58
     78c:	cmp	r3, #1
     790:	ble	23cc <print_expression+0x2324>
     794:	mov	r6, #2
     798:	mov	r3, r8
     79c:	ldr	r0, [r7, #16]
     7a0:	str	r6, [sp]
     7a4:	bl	a8 <print_expression>
     7a8:	ldr	r0, [pc, #3292]	; 148c <print_expression+0x13e4>
     7ac:	blx	r4
     7b0:	ldr	r0, [r7, #20]
     7b4:	mov	r3, r8
     7b8:	str	r6, [sp]
     7bc:	mov	r2, r5
     7c0:	mov	r1, r4
     7c4:	bl	a8 <print_expression>
     7c8:	b	294 <print_expression+0x1ec>
     7cc:	ldr	r3, [sp, #88]	; 0x58
     7d0:	cmp	r3, #6
     7d4:	ble	1fc8 <print_expression+0x1f20>
     7d8:	mov	r6, #7
     7dc:	mov	r3, r8
     7e0:	ldr	r0, [r7, #16]
     7e4:	str	r6, [sp]
     7e8:	bl	a8 <print_expression>
     7ec:	ldr	r0, [pc, #3148]	; 1440 <print_expression+0x1398>
     7f0:	blx	r4
     7f4:	ldr	r0, [r7, #20]
     7f8:	mov	r3, r8
     7fc:	str	r6, [sp]
     800:	mov	r2, r5
     804:	mov	r1, r4
     808:	bl	a8 <print_expression>
     80c:	b	294 <print_expression+0x1ec>
     810:	ldr	r3, [pc, #2660]	; 127c <print_expression+0x11d4>
     814:	cmp	r8, #0
     818:	ldr	r0, [pc, #2656]	; 1280 <print_expression+0x11d8>
     81c:	moveq	r0, r3
     820:	blx	r1
     824:	mov	r1, #15
     828:	ldr	r0, [r7, #16]
     82c:	mov	r3, r8
     830:	str	r1, [sp]
     834:	mov	r2, r5
     838:	mov	r1, r4
     83c:	bl	a8 <print_expression>
     840:	ldr	r0, [pc, #2460]	; 11e4 <print_expression+0x113c>
     844:	blx	r4
     848:	b	294 <print_expression+0x1ec>
     84c:	ldr	r0, [r7, #16]
     850:	cmp	r0, #0
     854:	beq	868 <print_expression+0x7c0>
     858:	mov	r3, #15
     85c:	str	r3, [sp]
     860:	mov	r3, r8
     864:	bl	a8 <print_expression>
     868:	ldr	r0, [pc, #2436]	; 11f4 <print_expression+0x114c>
     86c:	blx	r4
     870:	mov	r1, #15
     874:	ldr	r0, [r7, #20]
     878:	mov	r3, r8
     87c:	str	r1, [sp]
     880:	mov	r2, r5
     884:	mov	r1, r4
     888:	bl	a8 <print_expression>
     88c:	ldr	r0, [pc, #2404]	; 11f8 <print_expression+0x1150>
     890:	blx	r4
     894:	b	294 <print_expression+0x1ec>
     898:	cmp	r8, #0
     89c:	beq	1df8 <print_expression+0x1d50>
     8a0:	ldr	r1, [r7, #12]
     8a4:	mov	r6, #15
     8a8:	ldr	r0, [pc, #2516]	; 1284 <print_expression+0x11dc>
     8ac:	blx	r4
     8b0:	mov	r3, r8
     8b4:	mov	r2, r5
     8b8:	mov	r1, r4
     8bc:	ldr	r0, [r7, #16]
     8c0:	str	r6, [sp]
     8c4:	bl	a8 <print_expression>
     8c8:	ldr	r0, [pc, #2488]	; 1288 <print_expression+0x11e0>
     8cc:	blx	r4
     8d0:	ldr	r0, [r7, #20]
     8d4:	mov	r3, r8
     8d8:	str	r6, [sp]
     8dc:	mov	r2, r5
     8e0:	mov	r1, r4
     8e4:	bl	a8 <print_expression>
     8e8:	ldr	r3, [r7, #24]
     8ec:	cmp	r3, #0
     8f0:	ldreq	r0, [pc, #2452]	; 128c <print_expression+0x11e4>
     8f4:	beq	92c <print_expression+0x884>
     8f8:	ldr	r0, [pc, #2448]	; 1290 <print_expression+0x11e8>
     8fc:	blx	r4
     900:	mov	r3, #15
     904:	ldr	r0, [r7, #24]
     908:	mov	r2, r5
     90c:	str	r3, [sp]
     910:	mov	r1, r4
     914:	mov	r3, r8
     918:	bl	a8 <print_expression>
     91c:	ldr	r3, [pc, #2820]	; 1428 <print_expression+0x1380>
     920:	cmp	r8, #0
     924:	ldr	r0, [pc, #2400]	; 128c <print_expression+0x11e4>
     928:	moveq	r0, r3
     92c:	blx	r4
     930:	mov	ip, #15
     934:	ldr	r0, [r7, #28]
     938:	mov	r3, r8
     93c:	mov	r2, r5
     940:	mov	r1, r4
     944:	str	ip, [sp]
     948:	bl	a8 <print_expression>
     94c:	b	294 <print_expression+0x1ec>
     950:	ldr	r3, [pc, #2364]	; 1294 <print_expression+0x11ec>
     954:	cmp	r8, #0
     958:	ldr	r0, [pc, #2360]	; 1298 <print_expression+0x11f0>
     95c:	moveq	r0, r3
     960:	blx	r1
     964:	mov	r1, #15
     968:	ldr	r0, [r7, #16]
     96c:	mov	r3, r8
     970:	str	r1, [sp]
     974:	mov	r2, r5
     978:	mov	r1, r4
     97c:	bl	a8 <print_expression>
     980:	ldr	r0, [pc, #2140]	; 11e4 <print_expression+0x113c>
     984:	blx	r4
     988:	b	294 <print_expression+0x1ec>
     98c:	ldr	r3, [pc, #2312]	; 129c <print_expression+0x11f4>
     990:	cmp	r8, #0
     994:	ldr	r0, [pc, #2308]	; 12a0 <print_expression+0x11f8>
     998:	moveq	r0, r3
     99c:	blx	r1
     9a0:	mov	r1, #15
     9a4:	ldr	r0, [r7, #16]
     9a8:	mov	r3, r8
     9ac:	str	r1, [sp]
     9b0:	mov	r2, r5
     9b4:	mov	r1, r4
     9b8:	bl	a8 <print_expression>
     9bc:	ldr	r0, [pc, #2080]	; 11e4 <print_expression+0x113c>
     9c0:	blx	r4
     9c4:	b	294 <print_expression+0x1ec>
     9c8:	ldr	r3, [pc, #2260]	; 12a4 <print_expression+0x11fc>
     9cc:	cmp	r8, #0
     9d0:	ldr	r0, [pc, #2256]	; 12a8 <print_expression+0x1200>
     9d4:	moveq	r0, r3
     9d8:	blx	r1
     9dc:	b	294 <print_expression+0x1ec>
     9e0:	ldr	r3, [pc, #2244]	; 12ac <print_expression+0x1204>
     9e4:	cmp	r8, #0
     9e8:	ldr	r0, [pc, #2240]	; 12b0 <print_expression+0x1208>
     9ec:	moveq	r0, r3
     9f0:	blx	r1
     9f4:	b	294 <print_expression+0x1ec>
     9f8:	ldr	r3, [pc, #2228]	; 12b4 <print_expression+0x120c>
     9fc:	cmp	r8, #0
     a00:	ldr	r0, [pc, #2224]	; 12b8 <print_expression+0x1210>
     a04:	moveq	r0, r3
     a08:	blx	r1
     a0c:	mov	r1, #15
     a10:	ldr	r0, [r7, #16]
     a14:	mov	r3, r8
     a18:	str	r1, [sp]
     a1c:	mov	r2, r5
     a20:	mov	r1, r4
     a24:	bl	a8 <print_expression>
     a28:	ldr	r0, [pc, #1972]	; 11e4 <print_expression+0x113c>
     a2c:	blx	r4
     a30:	b	294 <print_expression+0x1ec>
     a34:	ldr	r3, [sp, #88]	; 0x58
     a38:	cmp	r3, #5
     a3c:	ble	2068 <print_expression+0x1fc0>
     a40:	mov	r6, #6
     a44:	mov	r3, r8
     a48:	ldr	r0, [r7, #16]
     a4c:	str	r6, [sp]
     a50:	bl	a8 <print_expression>
     a54:	ldr	r0, [pc, #2540]	; 1448 <print_expression+0x13a0>
     a58:	blx	r4
     a5c:	ldr	r0, [r7, #20]
     a60:	mov	r3, r8
     a64:	str	r6, [sp]
     a68:	mov	r2, r5
     a6c:	mov	r1, r4
     a70:	bl	a8 <print_expression>
     a74:	b	294 <print_expression+0x1ec>
     a78:	ldr	r3, [sp, #88]	; 0x58
     a7c:	cmp	r3, #2
     a80:	ble	2238 <print_expression+0x2190>
     a84:	mov	r6, #3
     a88:	mov	r3, r8
     a8c:	ldr	r0, [r7, #16]
     a90:	str	r6, [sp]
     a94:	bl	a8 <print_expression>
     a98:	ldr	r0, [pc, #2500]	; 1464 <print_expression+0x13bc>
     a9c:	blx	r4
     aa0:	ldr	r0, [r7, #20]
     aa4:	mov	r3, r8
     aa8:	str	r6, [sp]
     aac:	mov	r2, r5
     ab0:	mov	r1, r4
     ab4:	bl	a8 <print_expression>
     ab8:	b	294 <print_expression+0x1ec>
     abc:	add	r0, sp, #24
     ac0:	vldr	d0, [r7, #16]
     ac4:	bl	0 <coda_strfl>
     ac8:	add	r1, sp, #24
     acc:	ldr	r0, [pc, #2276]	; 13b8 <print_expression+0x1310>
     ad0:	blx	r4
     ad4:	b	294 <print_expression+0x1ec>
     ad8:	ldr	r2, [pc, #2012]	; 12bc <print_expression+0x1214>
     adc:	ldr	r3, [pc, #2012]	; 12c0 <print_expression+0x1218>
     ae0:	cmp	r5, #0
     ae4:	movne	r9, r2
     ae8:	moveq	r9, r3
     aec:	mov	r0, r9
     af0:	blx	r1
     af4:	ldr	r6, [r7, #16]
     af8:	ldr	r0, [r7, #12]
     afc:	cmp	r6, #0
     b00:	cmpne	r0, #0
     b04:	beq	1d24 <print_expression+0x1c7c>
     b08:	cmp	r0, #0
     b0c:	blt	238c <print_expression+0x22e4>
     b10:	orr	r3, r8, r5
     b14:	ldr	fp, [pc, #1960]	; 12c4 <print_expression+0x121c>
     b18:	ldr	lr, [pc, #1960]	; 12c8 <print_expression+0x1220>
     b1c:	ldr	ip, [pc, #1960]	; 12cc <print_expression+0x1224>
     b20:	add	r7, r6, r0
     b24:	ldr	r0, [pc, #1956]	; 12d0 <print_expression+0x1228>
     b28:	cmp	r3, #0
     b2c:	ldr	r2, [pc, #1952]	; 12d4 <print_expression+0x122c>
     b30:	moveq	r0, ip
     b34:	ldr	sl, [pc, #1948]	; 12d8 <print_expression+0x1230>
     b38:	ldr	r8, [pc, #1948]	; 12dc <print_expression+0x1234>
     b3c:	movne	sl, fp
     b40:	movne	r8, r0
     b44:	movne	r0, lr
     b48:	cmp	r3, #0
     b4c:	ldr	r1, [pc, #1932]	; 12e0 <print_expression+0x1238>
     b50:	moveq	r1, r2
     b54:	ldr	r2, [pc, #1928]	; 12e4 <print_expression+0x123c>
     b58:	ldr	r3, [pc, #1928]	; 12e8 <print_expression+0x1240>
     b5c:	cmp	r5, #0
     b60:	moveq	r3, r2
     b64:	ldr	fp, [pc, #1920]	; 12ec <print_expression+0x1244>
     b68:	mov	r5, r3
     b6c:	str	r0, [sp, #12]
     b70:	str	r1, [sp, #16]
     b74:	ldrb	r1, [r6], #1
     b78:	sub	r3, r1, #7
     b7c:	cmp	r3, #85	; 0x55
     b80:	ldrls	pc, [pc, r3, lsl #2]
     b84:	b	1dcc <print_expression+0x1d24>
     b88:	.word	0x00001dc0
     b8c:	.word	0x00001db4
     b90:	.word	0x00001da8
     b94:	.word	0x00001d9c
     b98:	.word	0x00001d90
     b9c:	.word	0x00001d84
     ba0:	.word	0x00001d78
     ba4:	.word	0x00001dcc
     ba8:	.word	0x00001dcc
     bac:	.word	0x00001dcc
     bb0:	.word	0x00001dcc
     bb4:	.word	0x00001dcc
     bb8:	.word	0x00001dcc
     bbc:	.word	0x00001dcc
     bc0:	.word	0x00001dcc
     bc4:	.word	0x00001dcc
     bc8:	.word	0x00001dcc
     bcc:	.word	0x00001dcc
     bd0:	.word	0x00001dcc
     bd4:	.word	0x00001dcc
     bd8:	.word	0x00001d60
     bdc:	.word	0x00001dcc
     be0:	.word	0x00001dcc
     be4:	.word	0x00001dcc
     be8:	.word	0x00001dcc
     bec:	.word	0x00001d54
     bf0:	.word	0x00001dcc
     bf4:	.word	0x00001d48
     bf8:	.word	0x00001dcc
     bfc:	.word	0x00001dcc
     c00:	.word	0x00001dcc
     c04:	.word	0x00001d3c
     c08:	.word	0x00001dcc
     c0c:	.word	0x00001dcc
     c10:	.word	0x00001dcc
     c14:	.word	0x00001dcc
     c18:	.word	0x00001dcc
     c1c:	.word	0x00001dcc
     c20:	.word	0x00001dcc
     c24:	.word	0x00001dcc
     c28:	.word	0x00001dcc
     c2c:	.word	0x00001dcc
     c30:	.word	0x00001dcc
     c34:	.word	0x00001dcc
     c38:	.word	0x00001dcc
     c3c:	.word	0x00001dcc
     c40:	.word	0x00001dcc
     c44:	.word	0x00001dcc
     c48:	.word	0x00001dcc
     c4c:	.word	0x00001dcc
     c50:	.word	0x00001dcc
     c54:	.word	0x00001dcc
     c58:	.word	0x00001dcc
     c5c:	.word	0x00001d30
     c60:	.word	0x00001dcc
     c64:	.word	0x00001d14
     c68:	.word	0x00001dcc
     c6c:	.word	0x00001dcc
     c70:	.word	0x00001dcc
     c74:	.word	0x00001dcc
     c78:	.word	0x00001dcc
     c7c:	.word	0x00001dcc
     c80:	.word	0x00001dcc
     c84:	.word	0x00001dcc
     c88:	.word	0x00001dcc
     c8c:	.word	0x00001dcc
     c90:	.word	0x00001dcc
     c94:	.word	0x00001dcc
     c98:	.word	0x00001dcc
     c9c:	.word	0x00001dcc
     ca0:	.word	0x00001dcc
     ca4:	.word	0x00001dcc
     ca8:	.word	0x00001dcc
     cac:	.word	0x00001dcc
     cb0:	.word	0x00001dcc
     cb4:	.word	0x00001dcc
     cb8:	.word	0x00001dcc
     cbc:	.word	0x00001dcc
     cc0:	.word	0x00001dcc
     cc4:	.word	0x00001dcc
     cc8:	.word	0x00001dcc
     ccc:	.word	0x00001dcc
     cd0:	.word	0x00001dcc
     cd4:	.word	0x00001dcc
     cd8:	.word	0x00001dcc
     cdc:	.word	0x00001d6c
     ce0:	ldrd	r0, [r7, #16]
     ce4:	add	r2, sp, #24
     ce8:	bl	0 <coda_str64>
     cec:	add	r1, sp, #24
     cf0:	ldr	r0, [pc, #1728]	; 13b8 <print_expression+0x1310>
     cf4:	blx	r4
     cf8:	b	294 <print_expression+0x1ec>
     cfc:	ldr	r3, [pc, #1516]	; 12f0 <print_expression+0x1248>
     d00:	cmp	r8, #0
     d04:	mov	r6, #15
     d08:	ldr	r0, [pc, #1508]	; 12f4 <print_expression+0x124c>
     d0c:	moveq	r0, r3
     d10:	blx	r1
     d14:	mov	r3, r8
     d18:	mov	r2, r5
     d1c:	mov	r1, r4
     d20:	ldr	r0, [r7, #16]
     d24:	str	r6, [sp]
     d28:	bl	a8 <print_expression>
     d2c:	ldr	r0, [pc, #1476]	; 12f8 <print_expression+0x1250>
     d30:	blx	r4
     d34:	ldr	r0, [r7, #20]
     d38:	mov	r3, r8
     d3c:	str	r6, [sp]
     d40:	mov	r2, r5
     d44:	mov	r1, r4
     d48:	bl	a8 <print_expression>
     d4c:	ldr	r0, [pc, #1168]	; 11e4 <print_expression+0x113c>
     d50:	blx	r4
     d54:	b	294 <print_expression+0x1ec>
     d58:	ldr	r3, [pc, #1436]	; 12fc <print_expression+0x1254>
     d5c:	cmp	r8, #0
     d60:	ldr	r0, [pc, #1432]	; 1300 <print_expression+0x1258>
     d64:	moveq	r0, r3
     d68:	blx	r1
     d6c:	mov	r1, #15
     d70:	ldr	r0, [r7, #16]
     d74:	mov	r3, r8
     d78:	str	r1, [sp]
     d7c:	mov	r2, r5
     d80:	mov	r1, r4
     d84:	bl	a8 <print_expression>
     d88:	ldr	r0, [pc, #1108]	; 11e4 <print_expression+0x113c>
     d8c:	blx	r4
     d90:	b	294 <print_expression+0x1ec>
     d94:	ldr	r3, [pc, #1384]	; 1304 <print_expression+0x125c>
     d98:	cmp	r8, #0
     d9c:	ldr	r0, [pc, #1380]	; 1308 <print_expression+0x1260>
     da0:	mov	r6, #15
     da4:	moveq	r0, r3
     da8:	blx	r1
     dac:	ldr	r0, [r7, #16]
     db0:	mov	r3, r8
     db4:	str	r6, [sp]
     db8:	mov	r2, r5
     dbc:	mov	r1, r4
     dc0:	bl	a8 <print_expression>
     dc4:	ldr	r3, [r7, #20]
     dc8:	cmp	r3, #0
     dcc:	beq	df0 <print_expression+0xd48>
     dd0:	ldr	r0, [pc, #1312]	; 12f8 <print_expression+0x1250>
     dd4:	blx	r4
     dd8:	ldr	r0, [r7, #20]
     ddc:	mov	r3, r8
     de0:	str	r6, [sp]
     de4:	mov	r2, r5
     de8:	mov	r1, r4
     dec:	bl	a8 <print_expression>
     df0:	ldr	r3, [r7, #24]
     df4:	cmp	r3, #0
     df8:	beq	28c <print_expression+0x1e4>
     dfc:	ldr	r0, [pc, #1268]	; 12f8 <print_expression+0x1250>
     e00:	blx	r4
     e04:	mov	r1, #15
     e08:	ldr	r0, [r7, #24]
     e0c:	mov	r3, r8
     e10:	str	r1, [sp]
     e14:	mov	r2, r5
     e18:	mov	r1, r4
     e1c:	bl	a8 <print_expression>
     e20:	b	28c <print_expression+0x1e4>
     e24:	ldr	r3, [r7, #12]
     e28:	cmp	r3, #0
     e2c:	ldreq	r3, [pc, #1240]	; 130c <print_expression+0x1264>
     e30:	ldreq	r0, [pc, #1240]	; 1310 <print_expression+0x1268>
     e34:	ldrne	r0, [pc, #1240]	; 1314 <print_expression+0x126c>
     e38:	ldrne	r3, [pc, #1240]	; 1318 <print_expression+0x1270>
     e3c:	cmp	r8, #0
     e40:	moveq	r0, r3
     e44:	blx	r1
     e48:	b	294 <print_expression+0x1ec>
     e4c:	ldr	r3, [pc, #1224]	; 131c <print_expression+0x1274>
     e50:	cmp	r8, #0
     e54:	ldr	r0, [pc, #1220]	; 1320 <print_expression+0x1278>
     e58:	moveq	r0, r3
     e5c:	blx	r1
     e60:	mov	r1, #15
     e64:	ldr	r0, [r7, #16]
     e68:	mov	r3, r8
     e6c:	str	r1, [sp]
     e70:	mov	r2, r5
     e74:	mov	r1, r4
     e78:	bl	a8 <print_expression>
     e7c:	ldr	r0, [pc, #864]	; 11e4 <print_expression+0x113c>
     e80:	blx	r4
     e84:	b	294 <print_expression+0x1ec>
     e88:	ldr	r3, [pc, #1172]	; 1324 <print_expression+0x127c>
     e8c:	cmp	r8, #0
     e90:	ldr	r0, [pc, #1168]	; 1328 <print_expression+0x1280>
     e94:	moveq	r0, r3
     e98:	blx	r1
     e9c:	mov	r1, #15
     ea0:	ldr	r0, [r7, #16]
     ea4:	mov	r3, r8
     ea8:	str	r1, [sp]
     eac:	mov	r2, r5
     eb0:	mov	r1, r4
     eb4:	bl	a8 <print_expression>
     eb8:	ldr	r0, [pc, #804]	; 11e4 <print_expression+0x113c>
     ebc:	blx	r4
     ec0:	b	294 <print_expression+0x1ec>
     ec4:	ldr	r3, [pc, #1120]	; 132c <print_expression+0x1284>
     ec8:	cmp	r8, #0
     ecc:	ldr	r0, [pc, #1116]	; 1330 <print_expression+0x1288>
     ed0:	moveq	r0, r3
     ed4:	blx	r1
     ed8:	mov	r1, #15
     edc:	ldr	r0, [r7, #16]
     ee0:	mov	r3, r8
     ee4:	str	r1, [sp]
     ee8:	mov	r2, r5
     eec:	mov	r1, r4
     ef0:	bl	a8 <print_expression>
     ef4:	ldr	r0, [pc, #744]	; 11e4 <print_expression+0x113c>
     ef8:	blx	r4
     efc:	b	294 <print_expression+0x1ec>
     f00:	ldr	r3, [pc, #1068]	; 1334 <print_expression+0x128c>
     f04:	cmp	r8, #0
     f08:	ldr	r0, [pc, #1064]	; 1338 <print_expression+0x1290>
     f0c:	moveq	r0, r3
     f10:	blx	r1
     f14:	mov	r1, #15
     f18:	ldr	r0, [r7, #16]
     f1c:	mov	r3, r8
     f20:	str	r1, [sp]
     f24:	mov	r2, r5
     f28:	mov	r1, r4
     f2c:	bl	a8 <print_expression>
     f30:	ldr	r0, [pc, #684]	; 11e4 <print_expression+0x113c>
     f34:	blx	r4
     f38:	b	294 <print_expression+0x1ec>
     f3c:	ldr	r3, [pc, #1016]	; 133c <print_expression+0x1294>
     f40:	cmp	r8, #0
     f44:	mov	r6, #15
     f48:	ldr	r0, [pc, #1008]	; 1340 <print_expression+0x1298>
     f4c:	moveq	r0, r3
     f50:	blx	r1
     f54:	mov	r3, r8
     f58:	mov	r2, r5
     f5c:	mov	r1, r4
     f60:	ldr	r0, [r7, #16]
     f64:	str	r6, [sp]
     f68:	bl	a8 <print_expression>
     f6c:	ldr	r0, [pc, #620]	; 11e0 <print_expression+0x1138>
     f70:	blx	r4
     f74:	ldr	r0, [r7, #20]
     f78:	mov	r3, r8
     f7c:	str	r6, [sp]
     f80:	mov	r2, r5
     f84:	mov	r1, r4
     f88:	bl	a8 <print_expression>
     f8c:	ldr	r0, [pc, #592]	; 11e4 <print_expression+0x113c>
     f90:	blx	r4
     f94:	b	294 <print_expression+0x1ec>
     f98:	ldr	r3, [pc, #932]	; 1344 <print_expression+0x129c>
     f9c:	cmp	r8, #0
     fa0:	ldr	r0, [pc, #928]	; 1348 <print_expression+0x12a0>
     fa4:	moveq	r0, r3
     fa8:	blx	r1
     fac:	b	294 <print_expression+0x1ec>
     fb0:	ldr	r3, [pc, #1032]	; 13c0 <print_expression+0x1318>
     fb4:	cmp	r8, #0
     fb8:	mov	r6, #15
     fbc:	ldr	r0, [pc, #1024]	; 13c4 <print_expression+0x131c>
     fc0:	moveq	r0, r3
     fc4:	blx	r1
     fc8:	mov	r3, r8
     fcc:	mov	r2, r5
     fd0:	mov	r1, r4
     fd4:	ldr	r0, [r7, #16]
     fd8:	str	r6, [sp]
     fdc:	bl	a8 <print_expression>
     fe0:	ldr	r0, [pc, #504]	; 11e0 <print_expression+0x1138>
     fe4:	blx	r4
     fe8:	ldr	r0, [r7, #20]
     fec:	mov	r3, r8
     ff0:	str	r6, [sp]
     ff4:	mov	r2, r5
     ff8:	mov	r1, r4
     ffc:	bl	a8 <print_expression>
    1000:	ldr	r0, [pc, #476]	; 11e4 <print_expression+0x113c>
    1004:	blx	r4
    1008:	b	294 <print_expression+0x1ec>
    100c:	ldr	r3, [pc, #912]	; 13a4 <print_expression+0x12fc>
    1010:	cmp	r8, #0
    1014:	mov	r6, #15
    1018:	ldr	r0, [pc, #904]	; 13a8 <print_expression+0x1300>
    101c:	moveq	r0, r3
    1020:	blx	r1
    1024:	mov	r3, r8
    1028:	mov	r2, r5
    102c:	mov	r1, r4
    1030:	ldr	r0, [r7, #16]
    1034:	str	r6, [sp]
    1038:	bl	a8 <print_expression>
    103c:	ldr	r0, [pc, #412]	; 11e0 <print_expression+0x1138>
    1040:	blx	r4
    1044:	ldr	r0, [r7, #20]
    1048:	mov	r3, r8
    104c:	str	r6, [sp]
    1050:	mov	r2, r5
    1054:	mov	r1, r4
    1058:	bl	a8 <print_expression>
    105c:	ldr	r0, [pc, #384]	; 11e4 <print_expression+0x113c>
    1060:	blx	r4
    1064:	b	294 <print_expression+0x1ec>
    1068:	ldr	r3, [pc, #800]	; 1390 <print_expression+0x12e8>
    106c:	cmp	r8, #0
    1070:	mov	r6, #15
    1074:	ldr	r0, [pc, #792]	; 1394 <print_expression+0x12ec>
    1078:	moveq	r0, r3
    107c:	blx	r1
    1080:	mov	r3, r8
    1084:	mov	r2, r5
    1088:	mov	r1, r4
    108c:	ldr	r0, [r7, #16]
    1090:	str	r6, [sp]
    1094:	bl	a8 <print_expression>
    1098:	ldr	r0, [pc, #320]	; 11e0 <print_expression+0x1138>
    109c:	blx	r4
    10a0:	ldr	r0, [r7, #20]
    10a4:	mov	r3, r8
    10a8:	str	r6, [sp]
    10ac:	mov	r2, r5
    10b0:	mov	r1, r4
    10b4:	bl	a8 <print_expression>
    10b8:	ldr	r0, [pc, #292]	; 11e4 <print_expression+0x113c>
    10bc:	blx	r4
    10c0:	b	294 <print_expression+0x1ec>
    10c4:	ldr	r3, [pc, #488]	; 12b4 <print_expression+0x120c>
    10c8:	cmp	r8, #0
    10cc:	mov	r6, #15
    10d0:	ldr	r0, [pc, #480]	; 12b8 <print_expression+0x1210>
    10d4:	moveq	r0, r3
    10d8:	blx	r1
    10dc:	mov	r3, r8
    10e0:	mov	r2, r5
    10e4:	mov	r1, r4
    10e8:	ldr	r0, [r7, #16]
    10ec:	str	r6, [sp]
    10f0:	bl	a8 <print_expression>
    10f4:	ldr	r0, [pc, #228]	; 11e0 <print_expression+0x1138>
    10f8:	blx	r4
    10fc:	ldr	r0, [r7, #20]
    1100:	mov	r3, r8
    1104:	str	r6, [sp]
    1108:	mov	r2, r5
    110c:	mov	r1, r4
    1110:	bl	a8 <print_expression>
    1114:	ldr	r0, [pc, #200]	; 11e4 <print_expression+0x113c>
    1118:	blx	r4
    111c:	b	294 <print_expression+0x1ec>
    1120:	ldr	r3, [pc, #548]	; 134c <print_expression+0x12a4>
    1124:	cmp	r8, #0
    1128:	mov	r6, #15
    112c:	ldr	r0, [pc, #540]	; 1350 <print_expression+0x12a8>
    1130:	moveq	r0, r3
    1134:	blx	r1
    1138:	mov	r3, r8
    113c:	mov	r2, r5
    1140:	mov	r1, r4
    1144:	ldr	r0, [r7, #16]
    1148:	str	r6, [sp]
    114c:	bl	a8 <print_expression>
    1150:	ldr	r0, [pc, #136]	; 11e0 <print_expression+0x1138>
    1154:	blx	r4
    1158:	ldr	r0, [r7, #20]
    115c:	mov	r3, r8
    1160:	str	r6, [sp]
    1164:	mov	r2, r5
    1168:	mov	r1, r4
    116c:	bl	a8 <print_expression>
    1170:	ldr	r0, [pc, #108]	; 11e4 <print_expression+0x113c>
    1174:	blx	r4
    1178:	b	294 <print_expression+0x1ec>
    117c:	ldr	r3, [pc, #464]	; 1354 <print_expression+0x12ac>
    1180:	cmp	r8, #0
    1184:	mov	r6, #15
    1188:	ldr	r0, [pc, #456]	; 1358 <print_expression+0x12b0>
    118c:	moveq	r0, r3
    1190:	blx	r1
    1194:	mov	r3, r8
    1198:	mov	r2, r5
    119c:	mov	r1, r4
    11a0:	ldr	r0, [r7, #16]
    11a4:	str	r6, [sp]
    11a8:	bl	a8 <print_expression>
    11ac:	ldr	r0, [pc, #44]	; 11e0 <print_expression+0x1138>
    11b0:	blx	r4
    11b4:	ldr	r0, [r7, #20]
    11b8:	mov	r3, r8
    11bc:	str	r6, [sp]
    11c0:	mov	r2, r5
    11c4:	mov	r1, r4
    11c8:	bl	a8 <print_expression>
    11cc:	ldr	r0, [pc, #16]	; 11e4 <print_expression+0x113c>
    11d0:	blx	r4
    11d4:	b	294 <print_expression+0x1ec>
    11d8:	.word	0x00000490
    11dc:	.word	0x000004a0
    11e0:	.word	0x0000061c
    11e4:	.word	0x00000610
    11e8:	.word	0x000005ac
    11ec:	.word	0x00000590
    11f0:	.word	0x0000057c
    11f4:	.word	0x0000069c
    11f8:	.word	0x000006a0
    11fc:	.word	0x00000570
    1200:	.word	0x000006e4
    1204:	.word	0x00000564
    1208:	.word	0x00000548
    120c:	.word	0x00000538
    1210:	.word	0x0000051c
    1214:	.word	0x0000050c
    1218:	.word	0x000004f4
    121c:	.word	0x000004ec
    1220:	.word	0x000004dc
    1224:	.word	0x000004d4
    1228:	.word	0x000004c4
    122c:	.word	0x000004bc
    1230:	.word	0x000004ac
    1234:	.word	0x0000047c
    1238:	.word	0x00000488
    123c:	.word	0x00000478
    1240:	.word	0x00000470
    1244:	.word	0x00000468
    1248:	.word	0x00000458
    124c:	.word	0x00000450
    1250:	.word	0x00000440
    1254:	.word	0x00000438
    1258:	.word	0x00000428
    125c:	.word	0x00000414
    1260:	.word	0x000003fc
    1264:	.word	0x000003ec
    1268:	.word	0x000003d4
    126c:	.word	0x000003c4
    1270:	.word	0x000003ac
    1274:	.word	0x0000039c
    1278:	.word	0x00000384
    127c:	.word	0x00000374
    1280:	.word	0x00000360
    1284:	.word	0x000006e8
    1288:	.word	0x00000700
    128c:	.word	0x0000024c
    1290:	.word	0x00000234
    1294:	.word	0x0000022c
    1298:	.word	0x0000021c
    129c:	.word	0x00000214
    12a0:	.word	0x00000204
    12a4:	.word	0x000001f8
    12a8:	.word	0x000001e4
    12ac:	.word	0x000001d8
    12b0:	.word	0x000001c4
    12b4:	.word	0x000000a4
    12b8:	.word	0x00000094
    12bc:	.word	0x000001a4
    12c0:	.word	0x000001ac
    12c4:	.word	0x00000624
    12c8:	.word	0x0000063c
    12cc:	.word	0x00000644
    12d0:	.word	0x00000630
    12d4:	.word	0x0000065c
    12d8:	.word	0x0000062c
    12dc:	.word	0x00000638
    12e0:	.word	0x00000654
    12e4:	.word	0x00000650
    12e8:	.word	0x00000648
    12ec:	.word	0x00000680
    12f0:	.word	0x000001bc
    12f4:	.word	0x000001b0
    12f8:	.word	0x00000620
    12fc:	.word	0x00000074
    1300:	.word	0x00000064
    1304:	.word	0x00000170
    1308:	.word	0x00000160
    130c:	.word	0x0000019c
    1310:	.word	0x0000018c
    1314:	.word	0x00000178
    1318:	.word	0x00000184
    131c:	.word	0x00000154
    1320:	.word	0x00000140
    1324:	.word	0x00000134
    1328:	.word	0x00000120
    132c:	.word	0x00000114
    1330:	.word	0x00000104
    1334:	.word	0x000000f8
    1338:	.word	0x000000e4
    133c:	.word	0x0000058c
    1340:	.word	0x00000580
    1344:	.word	0x000000d8
    1348:	.word	0x000000c4
    134c:	.word	0x0000008c
    1350:	.word	0x0000007c
    1354:	.word	0x0000005c
    1358:	.word	0x00000050
    135c:	.word	0x00000020
    1360:	.word	0x00000014
    1364:	.word	0x0000000c
    1368:	.word	0x00000000
    136c:	.word	0x000002ec
    1370:	.word	0x000002dc
    1374:	.word	0x000002d0
    1378:	.word	0x000002bc
    137c:	.word	0x000002b4
    1380:	.word	0x000002a4
    1384:	.word	0x0000029c
    1388:	.word	0x00000290
    138c:	.word	0x00000280
    1390:	.word	0x000000bc
    1394:	.word	0x000000ac
    1398:	.word	0x000006b8
    139c:	.word	0x00000278
    13a0:	.word	0x00000268
    13a4:	.word	0x00000034
    13a8:	.word	0x00000028
    13ac:	.word	0x0000033c
    13b0:	.word	0x0000032c
    13b4:	.word	0x000006b0
    13b8:	.word	0x0000028c
    13bc:	.word	0x000006c8
    13c0:	.word	0x00000048
    13c4:	.word	0x0000003c
    13c8:	.word	0x0000061c
    13cc:	.word	0x000006d4
    13d0:	.word	0x00000354
    13d4:	.word	0x00000344
    13d8:	.word	0x000006ac
    13dc:	.word	0x000006b4
    13e0:	.word	0x000006a8
    13e4:	.word	0x000006a4
    13e8:	.word	0x00000324
    13ec:	.word	0x00000314
    13f0:	.word	0x00000308
    13f4:	.word	0x000002f4
    13f8:	.word	0x00000660
    13fc:	.word	0x00000674
    1400:	.word	0x0000066c
    1404:	.word	0x0000067c
    1408:	.word	0x00000670
    140c:	.word	0x00000678
    1410:	.word	0x00000668
    1414:	.word	0x00000664
    1418:	.word	0x00000684
    141c:	.word	0x0000068c
    1420:	.word	0x0000070c
    1424:	.word	0x00000718
    1428:	.word	0x00000260
    142c:	.word	0x00000244
    1430:	.word	0x0000076c
    1434:	.word	0x00000784
    1438:	.word	0x000006c4
    143c:	.word	0x000006bc
    1440:	.word	0x000006d8
    1444:	.word	0x000006cc
    1448:	.word	0x00000694
    144c:	.word	0x000006e0
    1450:	.word	0x00000774
    1454:	.word	0x00000754
    1458:	.word	0x00000764
    145c:	.word	0x00000760
    1460:	.word	0x00000758
    1464:	.word	0x00000690
    1468:	.word	0x00000618
    146c:	.word	0x00000728
    1470:	.word	0x0000074c
    1474:	.word	0x00000744
    1478:	.word	0x00000720
    147c:	.word	0x00000730
    1480:	.word	0x00000738
    1484:	.word	0x00000740
    1488:	.word	0x00000614
    148c:	.word	0x000006dc
    1490:	.word	0x00000610
    1494:	.word	0x00000000
    1498:	.word	0x00001064
    149c:	.word	0x000005b8
    14a0:	.word	0x00000600
    14a4:	ldr	r3, [pc, #-336]	; 135c <print_expression+0x12b4>
    14a8:	cmp	r8, #0
    14ac:	mov	r6, #15
    14b0:	ldr	r0, [pc, #-344]	; 1360 <print_expression+0x12b8>
    14b4:	moveq	r0, r3
    14b8:	blx	r1
    14bc:	mov	r3, r8
    14c0:	mov	r2, r5
    14c4:	mov	r1, r4
    14c8:	ldr	r0, [r7, #16]
    14cc:	str	r6, [sp]
    14d0:	bl	a8 <print_expression>
    14d4:	ldr	r0, [pc, #-276]	; 13c8 <print_expression+0x1320>
    14d8:	blx	r4
    14dc:	ldr	r0, [r7, #20]
    14e0:	mov	r3, r8
    14e4:	str	r6, [sp]
    14e8:	mov	r2, r5
    14ec:	mov	r1, r4
    14f0:	bl	a8 <print_expression>
    14f4:	ldr	r0, [pc, #-108]	; 1490 <print_expression+0x13e8>
    14f8:	blx	r4
    14fc:	b	294 <print_expression+0x1ec>
    1500:	ldr	r3, [sp, #88]	; 0x58
    1504:	cmp	r3, #6
    1508:	ble	2140 <print_expression+0x2098>
    150c:	mov	r6, #7
    1510:	ldr	r0, [r7, #16]
    1514:	mov	r3, r8
    1518:	str	r6, [sp]
    151c:	bl	a8 <print_expression>
    1520:	orrs	r9, r8, r5
    1524:	bne	2344 <print_expression+0x229c>
    1528:	ldr	r0, [pc, #-220]	; 1454 <print_expression+0x13ac>
    152c:	blx	r4
    1530:	ldr	r0, [r7, #20]
    1534:	mov	r1, r4
    1538:	str	r6, [sp]
    153c:	mov	r3, r9
    1540:	mov	r2, r9
    1544:	bl	a8 <print_expression>
    1548:	b	294 <print_expression+0x1ec>
    154c:	ldr	r3, [sp, #88]	; 0x58
    1550:	cmp	r3, #3
    1554:	ble	2288 <print_expression+0x21e0>
    1558:	mov	r6, #4
    155c:	mov	r3, r8
    1560:	ldr	r0, [r7, #16]
    1564:	str	r6, [sp]
    1568:	bl	a8 <print_expression>
    156c:	ldr	r0, [pc, #-268]	; 1468 <print_expression+0x13c0>
    1570:	blx	r4
    1574:	ldr	r0, [r7, #20]
    1578:	mov	r3, r8
    157c:	str	r6, [sp]
    1580:	mov	r2, r5
    1584:	mov	r1, r4
    1588:	bl	a8 <print_expression>
    158c:	b	294 <print_expression+0x1ec>
    1590:	ldr	r3, [pc, #-564]	; 1364 <print_expression+0x12bc>
    1594:	cmp	r8, #0
    1598:	ldr	r0, [pc, #-568]	; 1368 <print_expression+0x12c0>
    159c:	moveq	r0, r3
    15a0:	blx	r1
    15a4:	mov	r1, #15
    15a8:	ldr	r0, [r7, #16]
    15ac:	mov	r3, r8
    15b0:	str	r1, [sp]
    15b4:	mov	r2, r5
    15b8:	mov	r1, r4
    15bc:	bl	a8 <print_expression>
    15c0:	ldr	r0, [pc, #-312]	; 1490 <print_expression+0x13e8>
    15c4:	blx	r4
    15c8:	b	294 <print_expression+0x1ec>
    15cc:	ldr	r3, [pc, #-616]	; 136c <print_expression+0x12c4>
    15d0:	cmp	r8, #0
    15d4:	ldr	r0, [pc, #-620]	; 1370 <print_expression+0x12c8>
    15d8:	moveq	r0, r3
    15dc:	blx	r1
    15e0:	mov	r1, #15
    15e4:	ldr	r0, [r7, #16]
    15e8:	mov	r3, r8
    15ec:	str	r1, [sp]
    15f0:	mov	r2, r5
    15f4:	mov	r1, r4
    15f8:	bl	a8 <print_expression>
    15fc:	ldr	r0, [pc, #-372]	; 1490 <print_expression+0x13e8>
    1600:	blx	r4
    1604:	b	294 <print_expression+0x1ec>
    1608:	ldr	r3, [pc, #-668]	; 1374 <print_expression+0x12cc>
    160c:	cmp	r8, #0
    1610:	ldr	r0, [pc, #-672]	; 1378 <print_expression+0x12d0>
    1614:	moveq	r0, r3
    1618:	blx	r1
    161c:	mov	r1, #15
    1620:	ldr	r0, [r7, #16]
    1624:	mov	r3, r8
    1628:	str	r1, [sp]
    162c:	mov	r2, r5
    1630:	mov	r1, r4
    1634:	bl	a8 <print_expression>
    1638:	ldr	r0, [pc, #-432]	; 1490 <print_expression+0x13e8>
    163c:	blx	r4
    1640:	b	294 <print_expression+0x1ec>
    1644:	ldr	r3, [pc, #-720]	; 137c <print_expression+0x12d4>
    1648:	cmp	r8, #0
    164c:	ldr	r0, [pc, #-724]	; 1380 <print_expression+0x12d8>
    1650:	moveq	r0, r3
    1654:	blx	r1
    1658:	mov	r1, #15
    165c:	ldr	r0, [r7, #16]
    1660:	mov	r3, r8
    1664:	str	r1, [sp]
    1668:	mov	r2, r5
    166c:	mov	r1, r4
    1670:	bl	a8 <print_expression>
    1674:	ldr	r0, [pc, #-492]	; 1490 <print_expression+0x13e8>
    1678:	blx	r4
    167c:	b	294 <print_expression+0x1ec>
    1680:	ldr	r3, [pc, #-772]	; 1384 <print_expression+0x12dc>
    1684:	cmp	r8, #0
    1688:	ldr	r0, [pc, #-776]	; 1388 <print_expression+0x12e0>
    168c:	moveq	r0, r3
    1690:	blx	r1
    1694:	mov	r1, #15
    1698:	ldr	r0, [r7, #16]
    169c:	mov	r3, r8
    16a0:	str	r1, [sp]
    16a4:	mov	r2, r5
    16a8:	mov	r1, r4
    16ac:	bl	a8 <print_expression>
    16b0:	ldr	r0, [pc, #-552]	; 1490 <print_expression+0x13e8>
    16b4:	blx	r4
    16b8:	b	294 <print_expression+0x1ec>
    16bc:	ldr	r3, [pc, #-780]	; 13b8 <print_expression+0x1310>
    16c0:	cmp	r8, #0
    16c4:	ldr	r0, [pc, #-832]	; 138c <print_expression+0x12e4>
    16c8:	ldr	r1, [r7, #12]
    16cc:	moveq	r0, r3
    16d0:	blx	r4
    16d4:	b	294 <print_expression+0x1ec>
    16d8:	ldr	r3, [pc, #-848]	; 1390 <print_expression+0x12e8>
    16dc:	cmp	r8, #0
    16e0:	ldr	r0, [pc, #-852]	; 1394 <print_expression+0x12ec>
    16e4:	moveq	r0, r3
    16e8:	blx	r1
    16ec:	mov	r1, #15
    16f0:	ldr	r0, [r7, #16]
    16f4:	mov	r3, r8
    16f8:	str	r1, [sp]
    16fc:	mov	r2, r5
    1700:	mov	r1, r4
    1704:	bl	a8 <print_expression>
    1708:	ldr	r0, [pc, #-640]	; 1490 <print_expression+0x13e8>
    170c:	blx	r4
    1710:	b	294 <print_expression+0x1ec>
    1714:	mov	r6, #15
    1718:	ldr	r0, [pc, #-904]	; 1398 <print_expression+0x12f0>
    171c:	blx	r1
    1720:	mov	r3, r8
    1724:	mov	r2, r5
    1728:	mov	r1, r4
    172c:	ldr	r0, [r7, #16]
    1730:	str	r6, [sp]
    1734:	bl	a8 <print_expression>
    1738:	ldr	r0, [pc, #-888]	; 13c8 <print_expression+0x1320>
    173c:	blx	r4
    1740:	mov	r3, r8
    1744:	mov	r2, r5
    1748:	mov	r1, r4
    174c:	ldr	r0, [r7, #20]
    1750:	str	r6, [sp]
    1754:	bl	a8 <print_expression>
    1758:	ldr	r0, [pc, #-920]	; 13c8 <print_expression+0x1320>
    175c:	blx	r4
    1760:	ldr	r0, [r7, #24]
    1764:	mov	r3, r8
    1768:	str	r6, [sp]
    176c:	mov	r2, r5
    1770:	mov	r1, r4
    1774:	bl	a8 <print_expression>
    1778:	ldr	r0, [pc, #-752]	; 1490 <print_expression+0x13e8>
    177c:	blx	r4
    1780:	b	294 <print_expression+0x1ec>
    1784:	ldr	r3, [sp, #88]	; 0x58
    1788:	cmp	r3, #4
    178c:	ble	21c8 <print_expression+0x2120>
    1790:	mov	r6, #5
    1794:	ldr	r0, [r7, #16]
    1798:	mov	r3, r8
    179c:	str	r6, [sp]
    17a0:	bl	a8 <print_expression>
    17a4:	orrs	r9, r8, r5
    17a8:	bne	2368 <print_expression+0x22c0>
    17ac:	ldr	r0, [pc, #-856]	; 145c <print_expression+0x13b4>
    17b0:	blx	r4
    17b4:	ldr	r0, [r7, #20]
    17b8:	mov	r1, r4
    17bc:	str	r6, [sp]
    17c0:	mov	r3, r9
    17c4:	mov	r2, r9
    17c8:	bl	a8 <print_expression>
    17cc:	b	294 <print_expression+0x1ec>
    17d0:	ldr	r3, [sp, #88]	; 0x58
    17d4:	cmp	r3, #4
    17d8:	ble	2200 <print_expression+0x2158>
    17dc:	mov	r6, #5
    17e0:	ldr	r0, [r7, #16]
    17e4:	mov	r3, r8
    17e8:	str	r6, [sp]
    17ec:	bl	a8 <print_expression>
    17f0:	orrs	r9, r8, r5
    17f4:	bne	22d8 <print_expression+0x2230>
    17f8:	ldr	r0, [pc, #-928]	; 1460 <print_expression+0x13b8>
    17fc:	blx	r4
    1800:	ldr	r0, [r7, #20]
    1804:	mov	r1, r4
    1808:	str	r6, [sp]
    180c:	mov	r3, r9
    1810:	mov	r2, r9
    1814:	bl	a8 <print_expression>
    1818:	b	294 <print_expression+0x1ec>
    181c:	ldr	r3, [pc, #-1160]	; 139c <print_expression+0x12f4>
    1820:	cmp	r8, #0
    1824:	ldr	r0, [pc, #-1164]	; 13a0 <print_expression+0x12f8>
    1828:	moveq	r0, r3
    182c:	blx	r1
    1830:	mov	r1, #15
    1834:	ldr	r0, [r7, #16]
    1838:	mov	r3, r8
    183c:	str	r1, [sp]
    1840:	mov	r2, r5
    1844:	mov	r1, r4
    1848:	bl	a8 <print_expression>
    184c:	ldr	r0, [pc, #-964]	; 1490 <print_expression+0x13e8>
    1850:	blx	r4
    1854:	b	294 <print_expression+0x1ec>
    1858:	ldr	r3, [pc, #-1212]	; 13a4 <print_expression+0x12fc>
    185c:	cmp	r8, #0
    1860:	mov	r6, #15
    1864:	ldr	r0, [pc, #-1220]	; 13a8 <print_expression+0x1300>
    1868:	moveq	r0, r3
    186c:	blx	r1
    1870:	mov	r3, r8
    1874:	mov	r2, r5
    1878:	mov	r1, r4
    187c:	ldr	r0, [r7, #16]
    1880:	str	r6, [sp]
    1884:	bl	a8 <print_expression>
    1888:	ldr	r0, [pc, #-1224]	; 13c8 <print_expression+0x1320>
    188c:	blx	r4
    1890:	ldr	r0, [r7, #20]
    1894:	mov	r3, r8
    1898:	str	r6, [sp]
    189c:	mov	r2, r5
    18a0:	mov	r1, r4
    18a4:	bl	a8 <print_expression>
    18a8:	ldr	r0, [pc, #-1056]	; 1490 <print_expression+0x13e8>
    18ac:	blx	r4
    18b0:	b	294 <print_expression+0x1ec>
    18b4:	ldr	r3, [pc, #-1296]	; 13ac <print_expression+0x1304>
    18b8:	cmp	r8, #0
    18bc:	ldr	r0, [pc, #-1300]	; 13b0 <print_expression+0x1308>
    18c0:	moveq	r0, r3
    18c4:	blx	r1
    18c8:	mov	r1, #15
    18cc:	ldr	r0, [r7, #16]
    18d0:	mov	r3, r8
    18d4:	str	r1, [sp]
    18d8:	mov	r2, r5
    18dc:	mov	r1, r4
    18e0:	bl	a8 <print_expression>
    18e4:	ldr	r0, [pc, #-1116]	; 1490 <print_expression+0x13e8>
    18e8:	blx	r4
    18ec:	b	294 <print_expression+0x1ec>
    18f0:	ldr	r3, [sp, #88]	; 0x58
    18f4:	cmp	r3, #9
    18f8:	ble	1ed4 <print_expression+0x1e2c>
    18fc:	mov	r6, #10
    1900:	ldr	r0, [r7, #16]
    1904:	mov	r3, r8
    1908:	str	r6, [sp]
    190c:	bl	a8 <print_expression>
    1910:	cmp	r8, #0
    1914:	beq	22fc <print_expression+0x2254>
    1918:	ldr	r0, [pc, #-1260]	; 1434 <print_expression+0x138c>
    191c:	blx	r4
    1920:	ldr	r0, [r7, #20]
    1924:	mov	r3, r8
    1928:	str	r6, [sp]
    192c:	mov	r2, r5
    1930:	mov	r1, r4
    1934:	bl	a8 <print_expression>
    1938:	b	294 <print_expression+0x1ec>
    193c:	ldr	r3, [sp, #88]	; 0x58
    1940:	cmp	r3, #8
    1944:	ble	2108 <print_expression+0x2060>
    1948:	mov	r6, #9
    194c:	ldr	r0, [r7, #16]
    1950:	mov	r3, r8
    1954:	str	r6, [sp]
    1958:	bl	a8 <print_expression>
    195c:	cmp	r8, #0
    1960:	beq	2320 <print_expression+0x2278>
    1964:	ldr	r0, [pc, #-1308]	; 1450 <print_expression+0x13a8>
    1968:	blx	r4
    196c:	ldr	r0, [r7, #20]
    1970:	mov	r3, r8
    1974:	str	r6, [sp]
    1978:	mov	r2, r5
    197c:	mov	r1, r4
    1980:	bl	a8 <print_expression>
    1984:	b	294 <print_expression+0x1ec>
    1988:	ldr	r3, [sp, #88]	; 0x58
    198c:	cmp	r3, #4
    1990:	ble	1ea0 <print_expression+0x1df8>
    1994:	mov	r6, #5
    1998:	ldr	r0, [r7, #16]
    199c:	mov	r3, r8
    19a0:	str	r6, [sp]
    19a4:	bl	a8 <print_expression>
    19a8:	orrs	r9, r8, r5
    19ac:	beq	1e7c <print_expression+0x1dd4>
    19b0:	ldr	r0, [pc, #-1416]	; 1430 <print_expression+0x1388>
    19b4:	blx	r4
    19b8:	ldr	r0, [r7, #20]
    19bc:	mov	r3, r8
    19c0:	str	r6, [sp]
    19c4:	mov	r2, r5
    19c8:	mov	r1, r4
    19cc:	bl	a8 <print_expression>
    19d0:	b	294 <print_expression+0x1ec>
    19d4:	ldr	r3, [sp, #88]	; 0x58
    19d8:	cmp	r3, #4
    19dc:	ble	2194 <print_expression+0x20ec>
    19e0:	mov	r6, #5
    19e4:	ldr	r0, [r7, #16]
    19e8:	mov	r3, r8
    19ec:	str	r6, [sp]
    19f0:	bl	a8 <print_expression>
    19f4:	orrs	r9, r8, r5
    19f8:	beq	1e58 <print_expression+0x1db0>
    19fc:	ldr	r0, [pc, #-1452]	; 1458 <print_expression+0x13b0>
    1a00:	blx	r4
    1a04:	ldr	r0, [r7, #20]
    1a08:	mov	r3, r8
    1a0c:	str	r6, [sp]
    1a10:	mov	r2, r5
    1a14:	mov	r1, r4
    1a18:	bl	a8 <print_expression>
    1a1c:	b	294 <print_expression+0x1ec>
    1a20:	ldr	r0, [pc, #-1652]	; 13b4 <print_expression+0x130c>
    1a24:	blx	r1
    1a28:	b	294 <print_expression+0x1ec>
    1a2c:	mov	r1, #15
    1a30:	ldr	r0, [r7, #16]
    1a34:	mov	r3, r8
    1a38:	str	r1, [sp]
    1a3c:	mov	r1, r4
    1a40:	bl	a8 <print_expression>
    1a44:	ldr	r3, [r7, #16]
    1a48:	ldr	r3, [r3]
    1a4c:	cmp	r3, #38	; 0x26
    1a50:	beq	1a5c <print_expression+0x19b4>
    1a54:	ldr	r0, [pc, #-1668]	; 13d8 <print_expression+0x1330>
    1a58:	blx	r4
    1a5c:	ldr	r1, [r7, #12]
    1a60:	ldr	r0, [pc, #-1712]	; 13b8 <print_expression+0x1310>
    1a64:	blx	r4
    1a68:	b	294 <print_expression+0x1ec>
    1a6c:	ldr	r0, [pc, #-1720]	; 13bc <print_expression+0x1314>
    1a70:	blx	r1
    1a74:	mov	ip, #1
    1a78:	ldr	r0, [r7, #16]
    1a7c:	mov	r3, r8
    1a80:	mov	r2, r5
    1a84:	mov	r1, r4
    1a88:	str	ip, [sp]
    1a8c:	bl	a8 <print_expression>
    1a90:	b	294 <print_expression+0x1ec>
    1a94:	ldr	r3, [sp, #88]	; 0x58
    1a98:	cmp	r3, #2
    1a9c:	ble	1f28 <print_expression+0x1e80>
    1aa0:	mov	r6, #3
    1aa4:	mov	r3, r8
    1aa8:	ldr	r0, [r7, #16]
    1aac:	str	r6, [sp]
    1ab0:	bl	a8 <print_expression>
    1ab4:	ldr	r0, [pc, #-1668]	; 1438 <print_expression+0x1390>
    1ab8:	blx	r4
    1abc:	ldr	r0, [r7, #20]
    1ac0:	mov	r3, r8
    1ac4:	str	r6, [sp]
    1ac8:	mov	r2, r5
    1acc:	mov	r1, r4
    1ad0:	bl	a8 <print_expression>
    1ad4:	b	294 <print_expression+0x1ec>
    1ad8:	ldr	r3, [sp, #88]	; 0x58
    1adc:	cmp	r3, #2
    1ae0:	ble	1f78 <print_expression+0x1ed0>
    1ae4:	mov	r6, #3
    1ae8:	mov	r3, r8
    1aec:	ldr	r0, [r7, #16]
    1af0:	str	r6, [sp]
    1af4:	bl	a8 <print_expression>
    1af8:	ldr	r0, [pc, #-1732]	; 143c <print_expression+0x1394>
    1afc:	blx	r4
    1b00:	ldr	r0, [r7, #20]
    1b04:	mov	r3, r8
    1b08:	str	r6, [sp]
    1b0c:	mov	r2, r5
    1b10:	mov	r1, r4
    1b14:	bl	a8 <print_expression>
    1b18:	b	294 <print_expression+0x1ec>
    1b1c:	ldr	r3, [pc, #-1892]	; 13c0 <print_expression+0x1318>
    1b20:	cmp	r8, #0
    1b24:	mov	r6, #15
    1b28:	ldr	r0, [pc, #-1900]	; 13c4 <print_expression+0x131c>
    1b2c:	moveq	r0, r3
    1b30:	blx	r1
    1b34:	mov	r3, r8
    1b38:	mov	r2, r5
    1b3c:	mov	r1, r4
    1b40:	ldr	r0, [r7, #16]
    1b44:	str	r6, [sp]
    1b48:	bl	a8 <print_expression>
    1b4c:	ldr	r0, [pc, #-1932]	; 13c8 <print_expression+0x1320>
    1b50:	blx	r4
    1b54:	ldr	r0, [r7, #20]
    1b58:	mov	r3, r8
    1b5c:	str	r6, [sp]
    1b60:	mov	r2, r5
    1b64:	mov	r1, r4
    1b68:	bl	a8 <print_expression>
    1b6c:	ldr	r0, [pc, #-1764]	; 1490 <print_expression+0x13e8>
    1b70:	blx	r4
    1b74:	b	294 <print_expression+0x1ec>
    1b78:	ldr	r0, [pc, #-1972]	; 13cc <print_expression+0x1324>
    1b7c:	blx	r1
    1b80:	mov	ip, #1
    1b84:	ldr	r0, [r7, #16]
    1b88:	mov	r3, r8
    1b8c:	mov	r2, r5
    1b90:	mov	r1, r4
    1b94:	str	ip, [sp]
    1b98:	bl	a8 <print_expression>
    1b9c:	b	294 <print_expression+0x1ec>
    1ba0:	ldr	r3, [sp, #88]	; 0x58
    1ba4:	cmp	r3, #5
    1ba8:	ble	2018 <print_expression+0x1f70>
    1bac:	mov	r6, #6
    1bb0:	mov	r3, r8
    1bb4:	ldr	r0, [r7, #16]
    1bb8:	str	r6, [sp]
    1bbc:	bl	a8 <print_expression>
    1bc0:	ldr	r0, [pc, #-1924]	; 1444 <print_expression+0x139c>
    1bc4:	blx	r4
    1bc8:	ldr	r0, [r7, #20]
    1bcc:	mov	r3, r8
    1bd0:	str	r6, [sp]
    1bd4:	mov	r2, r5
    1bd8:	mov	r1, r4
    1bdc:	bl	a8 <print_expression>
    1be0:	b	294 <print_expression+0x1ec>
    1be4:	ldr	r3, [pc, #-2076]	; 13d0 <print_expression+0x1328>
    1be8:	cmp	r8, #0
    1bec:	ldr	r0, [pc, #-2080]	; 13d4 <print_expression+0x132c>
    1bf0:	moveq	r0, r3
    1bf4:	blx	r1
    1bf8:	mov	r1, #15
    1bfc:	ldr	r0, [r7, #16]
    1c00:	mov	r3, r8
    1c04:	str	r1, [sp]
    1c08:	mov	r2, r5
    1c0c:	mov	r1, r4
    1c10:	bl	a8 <print_expression>
    1c14:	ldr	r0, [pc, #-1932]	; 1490 <print_expression+0x13e8>
    1c18:	blx	r4
    1c1c:	b	294 <print_expression+0x1ec>
    1c20:	ldr	r0, [pc, #-2128]	; 13d8 <print_expression+0x1330>
    1c24:	blx	r1
    1c28:	b	294 <print_expression+0x1ec>
    1c2c:	ldr	r0, [r7, #16]
    1c30:	cmp	r0, #0
    1c34:	beq	1c54 <print_expression+0x1bac>
    1c38:	mov	r1, #15
    1c3c:	str	r1, [sp]
    1c40:	mov	r3, r8
    1c44:	mov	r1, r4
    1c48:	bl	a8 <print_expression>
    1c4c:	ldr	r0, [pc, #-2172]	; 13d8 <print_expression+0x1330>
    1c50:	blx	r4
    1c54:	ldr	r0, [pc, #-2176]	; 13dc <print_expression+0x1334>
    1c58:	blx	r4
    1c5c:	b	294 <print_expression+0x1ec>
    1c60:	ldr	r0, [pc, #-2184]	; 13e0 <print_expression+0x1338>
    1c64:	blx	r1
    1c68:	b	294 <print_expression+0x1ec>
    1c6c:	ldr	r0, [r7, #16]
    1c70:	cmp	r0, #0
    1c74:	beq	1c8c <print_expression+0x1be4>
    1c78:	mov	r1, #15
    1c7c:	str	r1, [sp]
    1c80:	mov	r3, r8
    1c84:	mov	r1, r4
    1c88:	bl	a8 <print_expression>
    1c8c:	ldr	r1, [r7, #12]
    1c90:	ldr	r0, [pc, #-2228]	; 13e4 <print_expression+0x133c>
    1c94:	blx	r4
    1c98:	b	294 <print_expression+0x1ec>
    1c9c:	ldr	r3, [pc, #-2236]	; 13e8 <print_expression+0x1340>
    1ca0:	cmp	r8, #0
    1ca4:	ldr	r0, [pc, #-2240]	; 13ec <print_expression+0x1344>
    1ca8:	moveq	r0, r3
    1cac:	blx	r1
    1cb0:	mov	r1, #15
    1cb4:	ldr	r0, [r7, #16]
    1cb8:	mov	r3, r8
    1cbc:	str	r1, [sp]
    1cc0:	mov	r2, r5
    1cc4:	mov	r1, r4
    1cc8:	bl	a8 <print_expression>
    1ccc:	ldr	r0, [pc, #-2116]	; 1490 <print_expression+0x13e8>
    1cd0:	blx	r4
    1cd4:	b	294 <print_expression+0x1ec>
    1cd8:	ldr	r3, [pc, #-2288]	; 13f0 <print_expression+0x1348>
    1cdc:	cmp	r8, #0
    1ce0:	ldr	r0, [pc, #-2292]	; 13f4 <print_expression+0x134c>
    1ce4:	moveq	r0, r3
    1ce8:	blx	r1
    1cec:	mov	r1, #15
    1cf0:	ldr	r0, [r7, #16]
    1cf4:	mov	r3, r8
    1cf8:	str	r1, [sp]
    1cfc:	mov	r2, r5
    1d00:	mov	r1, r4
    1d04:	bl	a8 <print_expression>
    1d08:	ldr	r0, [pc, #-2176]	; 1490 <print_expression+0x13e8>
    1d0c:	blx	r4
    1d10:	b	294 <print_expression+0x1ec>
    1d14:	mov	r0, sl
    1d18:	blx	r4
    1d1c:	cmp	r7, r6
    1d20:	bne	b74 <print_expression+0xacc>
    1d24:	mov	r0, r9
    1d28:	blx	r4
    1d2c:	b	294 <print_expression+0x1ec>
    1d30:	mov	r0, r8
    1d34:	blx	r4
    1d38:	b	1d1c <print_expression+0x1c74>
    1d3c:	ldr	r0, [sp, #12]
    1d40:	blx	r4
    1d44:	b	1d1c <print_expression+0x1c74>
    1d48:	mov	r0, r5
    1d4c:	blx	r4
    1d50:	b	1d1c <print_expression+0x1c74>
    1d54:	ldr	r0, [sp, #16]
    1d58:	blx	r4
    1d5c:	b	1d1c <print_expression+0x1c74>
    1d60:	ldr	r0, [pc, #-2416]	; 13f8 <print_expression+0x1350>
    1d64:	blx	r4
    1d68:	b	1d1c <print_expression+0x1c74>
    1d6c:	mov	r0, fp
    1d70:	blx	r4
    1d74:	b	1d1c <print_expression+0x1c74>
    1d78:	ldr	r0, [pc, #-2436]	; 13fc <print_expression+0x1354>
    1d7c:	blx	r4
    1d80:	b	1d1c <print_expression+0x1c74>
    1d84:	ldr	r0, [pc, #-2444]	; 1400 <print_expression+0x1358>
    1d88:	blx	r4
    1d8c:	b	1d1c <print_expression+0x1c74>
    1d90:	ldr	r0, [pc, #-2452]	; 1404 <print_expression+0x135c>
    1d94:	blx	r4
    1d98:	b	1d1c <print_expression+0x1c74>
    1d9c:	ldr	r0, [pc, #-2460]	; 1408 <print_expression+0x1360>
    1da0:	blx	r4
    1da4:	b	1d1c <print_expression+0x1c74>
    1da8:	ldr	r0, [pc, #-2468]	; 140c <print_expression+0x1364>
    1dac:	blx	r4
    1db0:	b	1d1c <print_expression+0x1c74>
    1db4:	ldr	r0, [pc, #-2476]	; 1410 <print_expression+0x1368>
    1db8:	blx	r4
    1dbc:	b	1d1c <print_expression+0x1c74>
    1dc0:	ldr	r0, [pc, #-2484]	; 1414 <print_expression+0x136c>
    1dc4:	blx	r4
    1dc8:	b	1d1c <print_expression+0x1c74>
    1dcc:	str	r1, [sp, #20]
    1dd0:	bl	0 <__ctype_b_loc>
    1dd4:	ldr	r1, [sp, #20]
    1dd8:	lsl	r3, r1, #1
    1ddc:	ldr	r2, [r0]
    1de0:	ldrh	r3, [r2, r3]
    1de4:	tst	r3, #16384	; 0x4000
    1de8:	ldreq	r0, [pc, #-2520]	; 1418 <print_expression+0x1370>
    1dec:	ldrne	r0, [pc, #-2520]	; 141c <print_expression+0x1374>
    1df0:	blx	r4
    1df4:	b	1d1c <print_expression+0x1c74>
    1df8:	ldr	r1, [r7, #12]
    1dfc:	mov	r6, #15
    1e00:	ldr	r0, [pc, #-2536]	; 1420 <print_expression+0x1378>
    1e04:	blx	r4
    1e08:	mov	r3, r8
    1e0c:	mov	r2, r5
    1e10:	mov	r1, r4
    1e14:	ldr	r0, [r7, #16]
    1e18:	str	r6, [sp]
    1e1c:	bl	a8 <print_expression>
    1e20:	ldr	r0, [pc, #-2564]	; 1424 <print_expression+0x137c>
    1e24:	blx	r4
    1e28:	ldr	r0, [r7, #20]
    1e2c:	mov	r3, r8
    1e30:	str	r6, [sp]
    1e34:	mov	r2, r5
    1e38:	mov	r1, r4
    1e3c:	bl	a8 <print_expression>
    1e40:	ldr	r3, [r7, #24]
    1e44:	cmp	r3, #0
    1e48:	ldreq	r0, [pc, #-2600]	; 1428 <print_expression+0x1380>
    1e4c:	beq	92c <print_expression+0x884>
    1e50:	ldr	r0, [pc, #-2604]	; 142c <print_expression+0x1384>
    1e54:	b	8fc <print_expression+0x854>
    1e58:	ldr	r0, [pc, #-2528]	; 1480 <print_expression+0x13d8>
    1e5c:	blx	r4
    1e60:	ldr	r0, [r7, #20]
    1e64:	mov	r1, r4
    1e68:	str	r6, [sp]
    1e6c:	mov	r3, r9
    1e70:	mov	r2, r9
    1e74:	bl	a8 <print_expression>
    1e78:	b	294 <print_expression+0x1ec>
    1e7c:	ldr	r0, [pc, #-2560]	; 1484 <print_expression+0x13dc>
    1e80:	blx	r4
    1e84:	ldr	r0, [r7, #20]
    1e88:	mov	r1, r4
    1e8c:	str	r6, [sp]
    1e90:	mov	r3, r9
    1e94:	mov	r2, r9
    1e98:	bl	a8 <print_expression>
    1e9c:	b	294 <print_expression+0x1ec>
    1ea0:	ldr	r0, [pc, #-2592]	; 1488 <print_expression+0x13e0>
    1ea4:	mov	r6, #5
    1ea8:	blx	r1
    1eac:	ldr	r0, [r7, #16]
    1eb0:	mov	r3, r8
    1eb4:	str	r6, [sp]
    1eb8:	mov	r2, r5
    1ebc:	mov	r1, r4
    1ec0:	bl	a8 <print_expression>
    1ec4:	orrs	r9, r8, r5
    1ec8:	beq	23c4 <print_expression+0x231c>
    1ecc:	ldr	r0, [pc, #-2724]	; 1430 <print_expression+0x1388>
    1ed0:	b	270 <print_expression+0x1c8>
    1ed4:	ldr	r0, [pc, #-2644]	; 1488 <print_expression+0x13e0>
    1ed8:	mov	r6, #10
    1edc:	blx	r1
    1ee0:	ldr	r0, [r7, #16]
    1ee4:	mov	r3, r8
    1ee8:	str	r6, [sp]
    1eec:	mov	r2, r5
    1ef0:	mov	r1, r4
    1ef4:	bl	a8 <print_expression>
    1ef8:	cmp	r8, #0
    1efc:	ldreq	r0, [pc, #-2708]	; 1470 <print_expression+0x13c8>
    1f00:	beq	270 <print_expression+0x1c8>
    1f04:	ldr	r0, [pc, #-2776]	; 1434 <print_expression+0x138c>
    1f08:	blx	r4
    1f0c:	str	r6, [sp]
    1f10:	mov	r3, r8
    1f14:	ldr	r0, [r7, #20]
    1f18:	mov	r2, r5
    1f1c:	mov	r1, r4
    1f20:	bl	a8 <print_expression>
    1f24:	b	28c <print_expression+0x1e4>
    1f28:	mov	r6, #3
    1f2c:	ldr	r0, [pc, #-2732]	; 1488 <print_expression+0x13e0>
    1f30:	blx	r1
    1f34:	mov	r3, r8
    1f38:	mov	r2, r5
    1f3c:	mov	r1, r4
    1f40:	ldr	r0, [r7, #16]
    1f44:	str	r6, [sp]
    1f48:	bl	a8 <print_expression>
    1f4c:	ldr	r0, [pc, #-2844]	; 1438 <print_expression+0x1390>
    1f50:	blx	r4
    1f54:	ldr	r0, [r7, #20]
    1f58:	mov	r3, r8
    1f5c:	str	r6, [sp]
    1f60:	mov	r2, r5
    1f64:	mov	r1, r4
    1f68:	bl	a8 <print_expression>
    1f6c:	ldr	r0, [pc, #-2788]	; 1490 <print_expression+0x13e8>
    1f70:	blx	r4
    1f74:	b	294 <print_expression+0x1ec>
    1f78:	mov	r6, #3
    1f7c:	ldr	r0, [pc, #-2812]	; 1488 <print_expression+0x13e0>
    1f80:	blx	r1
    1f84:	mov	r3, r8
    1f88:	mov	r2, r5
    1f8c:	mov	r1, r4
    1f90:	ldr	r0, [r7, #16]
    1f94:	str	r6, [sp]
    1f98:	bl	a8 <print_expression>
    1f9c:	ldr	r0, [pc, #-2920]	; 143c <print_expression+0x1394>
    1fa0:	blx	r4
    1fa4:	ldr	r0, [r7, #20]
    1fa8:	mov	r3, r8
    1fac:	str	r6, [sp]
    1fb0:	mov	r2, r5
    1fb4:	mov	r1, r4
    1fb8:	bl	a8 <print_expression>
    1fbc:	ldr	r0, [pc, #-2868]	; 1490 <print_expression+0x13e8>
    1fc0:	blx	r4
    1fc4:	b	294 <print_expression+0x1ec>
    1fc8:	mov	r6, #7
    1fcc:	ldr	r0, [pc, #-2892]	; 1488 <print_expression+0x13e0>
    1fd0:	blx	r1
    1fd4:	mov	r3, r8
    1fd8:	mov	r2, r5
    1fdc:	mov	r1, r4
    1fe0:	ldr	r0, [r7, #16]
    1fe4:	str	r6, [sp]
    1fe8:	bl	a8 <print_expression>
    1fec:	ldr	r0, [pc, #-2996]	; 1440 <print_expression+0x1398>
    1ff0:	blx	r4
    1ff4:	ldr	r0, [r7, #20]
    1ff8:	mov	r3, r8
    1ffc:	str	r6, [sp]
    2000:	mov	r2, r5
    2004:	mov	r1, r4
    2008:	bl	a8 <print_expression>
    200c:	ldr	r0, [pc, #-2948]	; 1490 <print_expression+0x13e8>
    2010:	blx	r4
    2014:	b	294 <print_expression+0x1ec>
    2018:	mov	r6, #6
    201c:	ldr	r0, [pc, #-2972]	; 1488 <print_expression+0x13e0>
    2020:	blx	r1
    2024:	mov	r3, r8
    2028:	mov	r2, r5
    202c:	mov	r1, r4
    2030:	ldr	r0, [r7, #16]
    2034:	str	r6, [sp]
    2038:	bl	a8 <print_expression>
    203c:	ldr	r0, [pc, #-3072]	; 1444 <print_expression+0x139c>
    2040:	blx	r4
    2044:	ldr	r0, [r7, #20]
    2048:	mov	r3, r8
    204c:	str	r6, [sp]
    2050:	mov	r2, r5
    2054:	mov	r1, r4
    2058:	bl	a8 <print_expression>
    205c:	ldr	r0, [pc, #-3028]	; 1490 <print_expression+0x13e8>
    2060:	blx	r4
    2064:	b	294 <print_expression+0x1ec>
    2068:	mov	r6, #6
    206c:	ldr	r0, [pc, #-3052]	; 1488 <print_expression+0x13e0>
    2070:	blx	r1
    2074:	mov	r3, r8
    2078:	mov	r2, r5
    207c:	mov	r1, r4
    2080:	ldr	r0, [r7, #16]
    2084:	str	r6, [sp]
    2088:	bl	a8 <print_expression>
    208c:	ldr	r0, [pc, #-3148]	; 1448 <print_expression+0x13a0>
    2090:	blx	r4
    2094:	ldr	r0, [r7, #20]
    2098:	mov	r3, r8
    209c:	str	r6, [sp]
    20a0:	mov	r2, r5
    20a4:	mov	r1, r4
    20a8:	bl	a8 <print_expression>
    20ac:	ldr	r0, [pc, #-3108]	; 1490 <print_expression+0x13e8>
    20b0:	blx	r4
    20b4:	b	294 <print_expression+0x1ec>
    20b8:	mov	r6, #4
    20bc:	ldr	r0, [pc, #-3132]	; 1488 <print_expression+0x13e0>
    20c0:	blx	r1
    20c4:	mov	r3, r8
    20c8:	mov	r2, r5
    20cc:	mov	r1, r4
    20d0:	ldr	r0, [r7, #16]
    20d4:	str	r6, [sp]
    20d8:	bl	a8 <print_expression>
    20dc:	ldr	r0, [pc, #-3224]	; 144c <print_expression+0x13a4>
    20e0:	blx	r4
    20e4:	ldr	r0, [r7, #20]
    20e8:	mov	r3, r8
    20ec:	str	r6, [sp]
    20f0:	mov	r2, r5
    20f4:	mov	r1, r4
    20f8:	bl	a8 <print_expression>
    20fc:	ldr	r0, [pc, #-3188]	; 1490 <print_expression+0x13e8>
    2100:	blx	r4
    2104:	b	294 <print_expression+0x1ec>
    2108:	ldr	r0, [pc, #-3208]	; 1488 <print_expression+0x13e0>
    210c:	mov	r6, #9
    2110:	blx	r1
    2114:	ldr	r0, [r7, #16]
    2118:	mov	r3, r8
    211c:	str	r6, [sp]
    2120:	mov	r2, r5
    2124:	mov	r1, r4
    2128:	bl	a8 <print_expression>
    212c:	cmp	r8, #0
    2130:	ldreq	r0, [pc, #-3268]	; 1474 <print_expression+0x13cc>
    2134:	beq	270 <print_expression+0x1c8>
    2138:	ldr	r0, [pc, #-3312]	; 1450 <print_expression+0x13a8>
    213c:	b	1f08 <print_expression+0x1e60>
    2140:	ldr	r0, [pc, #-3264]	; 1488 <print_expression+0x13e0>
    2144:	mov	r6, #7
    2148:	blx	r1
    214c:	ldr	r0, [r7, #16]
    2150:	mov	r3, r8
    2154:	str	r6, [sp]
    2158:	mov	r2, r5
    215c:	mov	r1, r4
    2160:	bl	a8 <print_expression>
    2164:	orrs	r9, r8, r5
    2168:	ldrne	r0, [pc, #-3320]	; 1478 <print_expression+0x13d0>
    216c:	bne	270 <print_expression+0x1c8>
    2170:	ldr	r0, [pc, #-3364]	; 1454 <print_expression+0x13ac>
    2174:	blx	r4
    2178:	str	r6, [sp]
    217c:	mov	r3, r9
    2180:	ldr	r0, [r7, #20]
    2184:	mov	r2, r9
    2188:	mov	r1, r4
    218c:	bl	a8 <print_expression>
    2190:	b	28c <print_expression+0x1e4>
    2194:	ldr	r0, [pc, #-3348]	; 1488 <print_expression+0x13e0>
    2198:	mov	r6, #5
    219c:	blx	r1
    21a0:	ldr	r0, [r7, #16]
    21a4:	mov	r3, r8
    21a8:	str	r6, [sp]
    21ac:	mov	r2, r5
    21b0:	mov	r1, r4
    21b4:	bl	a8 <print_expression>
    21b8:	orrs	r9, r8, r5
    21bc:	beq	23a0 <print_expression+0x22f8>
    21c0:	ldr	r0, [pc, #-3440]	; 1458 <print_expression+0x13b0>
    21c4:	b	270 <print_expression+0x1c8>
    21c8:	ldr	r0, [pc, #-3400]	; 1488 <print_expression+0x13e0>
    21cc:	mov	r6, #5
    21d0:	blx	r1
    21d4:	ldr	r0, [r7, #16]
    21d8:	mov	r3, r8
    21dc:	str	r6, [sp]
    21e0:	mov	r2, r5
    21e4:	mov	r1, r4
    21e8:	bl	a8 <print_expression>
    21ec:	orrs	r9, r8, r5
    21f0:	ldrne	r0, [pc, #-3452]	; 147c <print_expression+0x13d4>
    21f4:	bne	270 <print_expression+0x1c8>
    21f8:	ldr	r0, [pc, #-3492]	; 145c <print_expression+0x13b4>
    21fc:	b	2174 <print_expression+0x20cc>
    2200:	ldr	r0, [pc, #-3456]	; 1488 <print_expression+0x13e0>
    2204:	mov	r6, #5
    2208:	blx	r1
    220c:	ldr	r0, [r7, #16]
    2210:	mov	r3, r8
    2214:	str	r6, [sp]
    2218:	mov	r2, r5
    221c:	mov	r1, r4
    2220:	bl	a8 <print_expression>
    2224:	orrs	r9, r8, r5
    2228:	ldrne	r0, [pc, #-3524]	; 146c <print_expression+0x13c4>
    222c:	bne	270 <print_expression+0x1c8>
    2230:	ldr	r0, [pc, #-3544]	; 1460 <print_expression+0x13b8>
    2234:	b	2174 <print_expression+0x20cc>
    2238:	mov	r6, #3
    223c:	ldr	r0, [pc, #-3516]	; 1488 <print_expression+0x13e0>
    2240:	blx	r1
    2244:	mov	r3, r8
    2248:	mov	r2, r5
    224c:	mov	r1, r4
    2250:	ldr	r0, [r7, #16]
    2254:	str	r6, [sp]
    2258:	bl	a8 <print_expression>
    225c:	ldr	r0, [pc, #-3584]	; 1464 <print_expression+0x13bc>
    2260:	blx	r4
    2264:	ldr	r0, [r7, #20]
    2268:	mov	r3, r8
    226c:	str	r6, [sp]
    2270:	mov	r2, r5
    2274:	mov	r1, r4
    2278:	bl	a8 <print_expression>
    227c:	ldr	r0, [pc, #-3572]	; 1490 <print_expression+0x13e8>
    2280:	blx	r4
    2284:	b	294 <print_expression+0x1ec>
    2288:	mov	r6, #4
    228c:	ldr	r0, [pc, #-3596]	; 1488 <print_expression+0x13e0>
    2290:	blx	r1
    2294:	mov	r3, r8
    2298:	mov	r2, r5
    229c:	mov	r1, r4
    22a0:	ldr	r0, [r7, #16]
    22a4:	str	r6, [sp]
    22a8:	bl	a8 <print_expression>
    22ac:	ldr	r0, [pc, #-3660]	; 1468 <print_expression+0x13c0>
    22b0:	blx	r4
    22b4:	ldr	r0, [r7, #20]
    22b8:	mov	r3, r8
    22bc:	str	r6, [sp]
    22c0:	mov	r2, r5
    22c4:	mov	r1, r4
    22c8:	bl	a8 <print_expression>
    22cc:	ldr	r0, [pc, #-3652]	; 1490 <print_expression+0x13e8>
    22d0:	blx	r4
    22d4:	b	294 <print_expression+0x1ec>
    22d8:	ldr	r0, [pc, #-3700]	; 146c <print_expression+0x13c4>
    22dc:	blx	r4
    22e0:	ldr	r0, [r7, #20]
    22e4:	mov	r3, r8
    22e8:	str	r6, [sp]
    22ec:	mov	r2, r5
    22f0:	mov	r1, r4
    22f4:	bl	a8 <print_expression>
    22f8:	b	294 <print_expression+0x1ec>
    22fc:	ldr	r0, [pc, #-3732]	; 1470 <print_expression+0x13c8>
    2300:	blx	r4
    2304:	ldr	r0, [r7, #20]
    2308:	mov	r3, r8
    230c:	str	r6, [sp]
    2310:	mov	r2, r5
    2314:	mov	r1, r4
    2318:	bl	a8 <print_expression>
    231c:	b	294 <print_expression+0x1ec>
    2320:	ldr	r0, [pc, #-3764]	; 1474 <print_expression+0x13cc>
    2324:	blx	r4
    2328:	ldr	r0, [r7, #20]
    232c:	mov	r3, r8
    2330:	str	r6, [sp]
    2334:	mov	r2, r5
    2338:	mov	r1, r4
    233c:	bl	a8 <print_expression>
    2340:	b	294 <print_expression+0x1ec>
    2344:	ldr	r0, [pc, #-3796]	; 1478 <print_expression+0x13d0>
    2348:	blx	r4
    234c:	ldr	r0, [r7, #20]
    2350:	mov	r3, r8
    2354:	str	r6, [sp]
    2358:	mov	r2, r5
    235c:	mov	r1, r4
    2360:	bl	a8 <print_expression>
    2364:	b	294 <print_expression+0x1ec>
    2368:	ldr	r0, [pc, #-3828]	; 147c <print_expression+0x13d4>
    236c:	blx	r4
    2370:	ldr	r0, [r7, #20]
    2374:	mov	r3, r8
    2378:	str	r6, [sp]
    237c:	mov	r2, r5
    2380:	mov	r1, r4
    2384:	bl	a8 <print_expression>
    2388:	b	294 <print_expression+0x1ec>
    238c:	mov	r0, r6
    2390:	bl	0 <strlen>
    2394:	cmp	r0, #0
    2398:	bgt	b10 <print_expression+0xa68>
    239c:	b	1d24 <print_expression+0x1c7c>
    23a0:	ldr	r0, [pc, #-3880]	; 1480 <print_expression+0x13d8>
    23a4:	blx	r4
    23a8:	ldr	r0, [r7, #20]
    23ac:	mov	r3, r9
    23b0:	str	r6, [sp]
    23b4:	mov	r2, r9
    23b8:	mov	r1, r4
    23bc:	bl	a8 <print_expression>
    23c0:	b	28c <print_expression+0x1e4>
    23c4:	ldr	r0, [pc, #-3912]	; 1484 <print_expression+0x13dc>
    23c8:	b	23a4 <print_expression+0x22fc>
    23cc:	mov	r6, #2
    23d0:	ldr	r0, [pc, #-3920]	; 1488 <print_expression+0x13e0>
    23d4:	blx	r1
    23d8:	mov	r3, r8
    23dc:	mov	r2, r5
    23e0:	mov	r1, r4
    23e4:	ldr	r0, [r7, #16]
    23e8:	str	r6, [sp]
    23ec:	bl	a8 <print_expression>
    23f0:	ldr	r0, [pc, #-3948]	; 148c <print_expression+0x13e4>
    23f4:	blx	r4
    23f8:	ldr	r0, [r7, #20]
    23fc:	mov	r3, r8
    2400:	str	r6, [sp]
    2404:	mov	r2, r5
    2408:	mov	r1, r4
    240c:	bl	a8 <print_expression>
    2410:	ldr	r0, [pc, #-3976]	; 1490 <print_expression+0x13e8>
    2414:	blx	r4
    2418:	b	294 <print_expression+0x1ec>
    241c:	ldr	r3, [pc, #-3984]	; 1494 <print_expression+0x13ec>
    2420:	ldr	r2, [pc, #-3984]	; 1498 <print_expression+0x13f0>
    2424:	ldr	r1, [pc, #-3984]	; 149c <print_expression+0x13f4>
    2428:	ldr	r0, [pc, #-3984]	; 14a0 <print_expression+0x13f8>
    242c:	bl	0 <__assert_fail>

00002430 <eval_string>:
    2430:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2434:	mov	r6, r1
    2438:	ldr	r1, [r1]
    243c:	mov	r5, r2
    2440:	sub	r2, r1, #21
    2444:	cmp	r2, #1
    2448:	sub	sp, sp, #636	; 0x27c
    244c:	mov	r4, r3
    2450:	bls	25c0 <eval_string+0x190>
    2454:	sub	r1, r1, #1
    2458:	mov	r9, r0
    245c:	cmp	r1, #85	; 0x55
    2460:	ldrls	pc, [pc, r1, lsl #2]
    2464:	b	3690 <eval_string+0x1260>
    2468:	.word	0x0000266c
    246c:	.word	0x00003690
    2470:	.word	0x000033fc
    2474:	.word	0x00003690
    2478:	.word	0x00003690
    247c:	.word	0x00003690
    2480:	.word	0x00003690
    2484:	.word	0x00003280
    2488:	.word	0x00002f44
    248c:	.word	0x00003690
    2490:	.word	0x00002ed8
    2494:	.word	0x00003690
    2498:	.word	0x00003690
    249c:	.word	0x00003690
    24a0:	.word	0x00003690
    24a4:	.word	0x00003104
    24a8:	.word	0x00003690
    24ac:	.word	0x00003690
    24b0:	.word	0x00003690
    24b4:	.word	0x00003690
    24b8:	.word	0x00003690
    24bc:	.word	0x00003690
    24c0:	.word	0x00003690
    24c4:	.word	0x00003690
    24c8:	.word	0x00003690
    24cc:	.word	0x00003690
    24d0:	.word	0x00003690
    24d4:	.word	0x000035f0
    24d8:	.word	0x00003690
    24dc:	.word	0x00003690
    24e0:	.word	0x00003690
    24e4:	.word	0x00003690
    24e8:	.word	0x00003690
    24ec:	.word	0x00003690
    24f0:	.word	0x00003690
    24f4:	.word	0x00003690
    24f8:	.word	0x00003690
    24fc:	.word	0x00003690
    2500:	.word	0x00003690
    2504:	.word	0x00003690
    2508:	.word	0x00003690
    250c:	.word	0x00002e84
    2510:	.word	0x00003690
    2514:	.word	0x00003690
    2518:	.word	0x00003690
    251c:	.word	0x00003690
    2520:	.word	0x00003690
    2524:	.word	0x00003690
    2528:	.word	0x00003690
    252c:	.word	0x00003690
    2530:	.word	0x00003690
    2534:	.word	0x00003690
    2538:	.word	0x00003690
    253c:	.word	0x00003690
    2540:	.word	0x00003568
    2544:	.word	0x00002960
    2548:	.word	0x000028bc
    254c:	.word	0x00003690
    2550:	.word	0x00003690
    2554:	.word	0x00003690
    2558:	.word	0x00003690
    255c:	.word	0x00003690
    2560:	.word	0x00003690
    2564:	.word	0x00003690
    2568:	.word	0x00003690
    256c:	.word	0x00003690
    2570:	.word	0x00002848
    2574:	.word	0x000027d4
    2578:	.word	0x00002760
    257c:	.word	0x00003690
    2580:	.word	0x00002cf0
    2584:	.word	0x00003690
    2588:	.word	0x00002c70
    258c:	.word	0x00003690
    2590:	.word	0x00002b6c
    2594:	.word	0x00002aa4
    2598:	.word	0x00002608
    259c:	.word	0x00003690
    25a0:	.word	0x00003690
    25a4:	.word	0x000029f8
    25a8:	.word	0x00003690
    25ac:	.word	0x00003690
    25b0:	.word	0x00003690
    25b4:	.word	0x00003690
    25b8:	.word	0x00003690
    25bc:	.word	0x000030a4
    25c0:	mov	sl, #0
    25c4:	str	sl, [r5]
    25c8:	ldr	r0, [r6, #12]
    25cc:	cmp	r0, sl
    25d0:	str	r0, [r3]
    25d4:	ble	2658 <eval_string+0x228>
    25d8:	add	r0, r0, #1
    25dc:	bl	0 <malloc>
    25e0:	ldr	r2, [sp, #672]	; 0x2a0
    25e4:	cmp	r0, sl
    25e8:	str	r0, [r2]
    25ec:	beq	3a54 <eval_string+0x1624>
    25f0:	ldr	r2, [r4]
    25f4:	ldr	r1, [r6, #16]
    25f8:	bl	0 <memcpy>
    25fc:	mov	r0, sl
    2600:	add	sp, sp, #636	; 0x27c
    2604:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2608:	add	r2, sp, #104	; 0x68
    260c:	ldr	r1, [r6, #16]
    2610:	bl	3c6c <eval_integer>
    2614:	cmp	r0, #0
    2618:	bne	2ec8 <eval_string+0xa98>
    261c:	ldrd	r2, [sp, #104]	; 0x68
    2620:	cmp	r2, #0
    2624:	sbcs	r3, r3, #0
    2628:	blt	3968 <eval_string+0x1538>
    262c:	add	r2, sp, #112	; 0x70
    2630:	ldr	r1, [r6, #20]
    2634:	mov	r0, r9
    2638:	bl	3c6c <eval_integer>
    263c:	subs	sl, r0, #0
    2640:	bne	2ec8 <eval_string+0xa98>
    2644:	ldrd	r2, [sp, #112]	; 0x70
    2648:	orrs	r1, r2, r3
    264c:	bne	3978 <eval_string+0x1548>
    2650:	str	sl, [r5]
    2654:	str	sl, [r4]
    2658:	ldr	r3, [sp, #672]	; 0x2a0
    265c:	mov	r0, sl
    2660:	str	sl, [r3]
    2664:	add	sp, sp, #636	; 0x27c
    2668:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    266c:	add	r3, sp, #104	; 0x68
    2670:	ldr	r1, [r6, #16]
    2674:	add	r2, sp, #80	; 0x50
    2678:	str	r3, [sp]
    267c:	add	r3, sp, #88	; 0x58
    2680:	bl	2430 <eval_string>
    2684:	cmp	r0, #0
    2688:	bne	2ec8 <eval_string+0xa98>
    268c:	add	r3, sp, #112	; 0x70
    2690:	ldr	r1, [r6, #20]
    2694:	mov	r0, r9
    2698:	str	r3, [sp]
    269c:	add	r2, sp, #84	; 0x54
    26a0:	add	r3, sp, #96	; 0x60
    26a4:	bl	2430 <eval_string>
    26a8:	subs	sl, r0, #0
    26ac:	bne	395c <eval_string+0x152c>
    26b0:	ldr	r3, [sp, #88]	; 0x58
    26b4:	ldr	r0, [sp, #96]	; 0x60
    26b8:	str	sl, [r5]
    26bc:	add	r0, r3, r0
    26c0:	cmp	r0, #0
    26c4:	str	r0, [r4]
    26c8:	ble	3808 <eval_string+0x13d8>
    26cc:	add	r0, r0, #1
    26d0:	bl	0 <malloc>
    26d4:	ldr	r3, [sp, #672]	; 0x2a0
    26d8:	cmp	r0, #0
    26dc:	str	r0, [r3]
    26e0:	ldreq	r2, [r4]
    26e4:	mov	r5, r0
    26e8:	ldreq	r3, [pc, #4020]	; 36a4 <eval_string+0x1274>
    26ec:	addeq	r2, r2, #1
    26f0:	beq	3678 <eval_string+0x1248>
    26f4:	ldr	r4, [sp, #88]	; 0x58
    26f8:	cmp	r4, #0
    26fc:	ble	3904 <eval_string+0x14d4>
    2700:	ldr	r1, [sp, #104]	; 0x68
    2704:	ldr	r3, [sp, #80]	; 0x50
    2708:	mov	r2, r4
    270c:	add	r1, r1, r3
    2710:	bl	0 <memcpy>
    2714:	ldr	r2, [sp, #96]	; 0x60
    2718:	cmp	r2, #0
    271c:	ble	2740 <eval_string+0x310>
    2720:	ldr	r3, [sp, #84]	; 0x54
    2724:	ldr	r1, [sp, #112]	; 0x70
    2728:	add	r0, r5, r4
    272c:	add	r1, r1, r3
    2730:	bl	0 <memcpy>
    2734:	ldr	r3, [sp, #88]	; 0x58
    2738:	cmp	r3, #0
    273c:	ble	2748 <eval_string+0x318>
    2740:	ldr	r0, [sp, #104]	; 0x68
    2744:	bl	0 <free>
    2748:	ldr	r3, [sp, #96]	; 0x60
    274c:	cmp	r3, #0
    2750:	ble	25fc <eval_string+0x1cc>
    2754:	ldr	r0, [sp, #112]	; 0x70
    2758:	bl	0 <free>
    275c:	b	25fc <eval_string+0x1cc>
    2760:	ldr	r3, [r0]
    2764:	cmp	r3, #0
    2768:	beq	3bb4 <eval_string+0x1784>
    276c:	ldr	r0, [r3]
    2770:	add	r1, sp, #112	; 0x70
    2774:	bl	0 <coda_get_product_type>
    2778:	subs	sl, r0, #0
    277c:	bne	2ec8 <eval_string+0xa98>
    2780:	ldr	r6, [sp, #112]	; 0x70
    2784:	str	sl, [r5]
    2788:	cmp	r6, #0
    278c:	str	sl, [r4]
    2790:	beq	25fc <eval_string+0x1cc>
    2794:	mov	r0, r6
    2798:	bl	0 <strlen>
    279c:	str	r0, [r4]
    27a0:	add	r0, r0, #1
    27a4:	bl	0 <malloc>
    27a8:	ldr	r2, [sp, #672]	; 0x2a0
    27ac:	cmp	r0, #0
    27b0:	str	r0, [r2]
    27b4:	ldr	r2, [r4]
    27b8:	mov	r3, r0
    27bc:	addeq	r2, r2, #1
    27c0:	ldreq	r3, [pc, #3808]	; 36a8 <eval_string+0x1278>
    27c4:	beq	3678 <eval_string+0x1248>
    27c8:	mov	r1, r6
    27cc:	bl	0 <memcpy>
    27d0:	b	25fc <eval_string+0x1cc>
    27d4:	ldr	r3, [r0]
    27d8:	cmp	r3, #0
    27dc:	beq	3c1c <eval_string+0x17ec>
    27e0:	ldr	r0, [r3]
    27e4:	add	r1, sp, #112	; 0x70
    27e8:	bl	0 <coda_get_product_format>
    27ec:	subs	sl, r0, #0
    27f0:	bne	2ec8 <eval_string+0xa98>
    27f4:	ldr	r0, [sp, #112]	; 0x70
    27f8:	bl	0 <coda_type_get_format_name>
    27fc:	str	sl, [r5]
    2800:	str	sl, [r4]
    2804:	subs	r5, r0, #0
    2808:	beq	25fc <eval_string+0x1cc>
    280c:	bl	0 <strlen>
    2810:	str	r0, [r4]
    2814:	add	r0, r0, #1
    2818:	bl	0 <malloc>
    281c:	ldr	r2, [sp, #672]	; 0x2a0
    2820:	cmp	r0, #0
    2824:	mov	r3, r0
    2828:	str	r0, [r2]
    282c:	ldreq	r3, [pc, #3704]	; 36ac <eval_string+0x127c>
    2830:	ldreq	r2, [r4]
    2834:	beq	3678 <eval_string+0x1248>
    2838:	ldr	r2, [r4]
    283c:	mov	r1, r5
    2840:	bl	0 <memcpy>
    2844:	b	25fc <eval_string+0x1cc>
    2848:	ldr	r3, [r0]
    284c:	cmp	r3, #0
    2850:	beq	3c30 <eval_string+0x1800>
    2854:	ldr	r0, [r3]
    2858:	add	r1, sp, #112	; 0x70
    285c:	bl	0 <coda_get_product_class>
    2860:	subs	sl, r0, #0
    2864:	bne	2ec8 <eval_string+0xa98>
    2868:	ldr	r6, [sp, #112]	; 0x70
    286c:	str	sl, [r5]
    2870:	cmp	r6, #0
    2874:	str	sl, [r4]
    2878:	beq	25fc <eval_string+0x1cc>
    287c:	mov	r0, r6
    2880:	bl	0 <strlen>
    2884:	str	r0, [r4]
    2888:	add	r0, r0, #1
    288c:	bl	0 <malloc>
    2890:	ldr	r2, [sp, #672]	; 0x2a0
    2894:	cmp	r0, #0
    2898:	mov	r3, r0
    289c:	str	r0, [r2]
    28a0:	ldreq	r3, [pc, #3592]	; 36b0 <eval_string+0x1280>
    28a4:	ldreq	r2, [r4]
    28a8:	beq	3678 <eval_string+0x1248>
    28ac:	ldr	r2, [r4]
    28b0:	mov	r1, r6
    28b4:	bl	0 <memcpy>
    28b8:	b	25fc <eval_string+0x1cc>
    28bc:	add	r3, sp, #104	; 0x68
    28c0:	ldr	r1, [r6, #16]
    28c4:	add	r2, sp, #80	; 0x50
    28c8:	str	r3, [sp]
    28cc:	add	r3, sp, #88	; 0x58
    28d0:	bl	2430 <eval_string>
    28d4:	cmp	r0, #0
    28d8:	bne	2ec8 <eval_string+0xa98>
    28dc:	add	r3, sp, #112	; 0x70
    28e0:	ldr	r1, [r6, #20]
    28e4:	mov	r0, r9
    28e8:	str	r3, [sp]
    28ec:	add	r2, sp, #84	; 0x54
    28f0:	add	r3, sp, #96	; 0x60
    28f4:	bl	2430 <eval_string>
    28f8:	subs	sl, r0, #0
    28fc:	bne	395c <eval_string+0x152c>
    2900:	ldr	r6, [sp, #96]	; 0x60
    2904:	ldr	r8, [sp, #112]	; 0x70
    2908:	ldr	r3, [sp, #80]	; 0x50
    290c:	ldr	r7, [sp, #88]	; 0x58
    2910:	ldr	r9, [sp, #104]	; 0x68
    2914:	ldr	fp, [sp, #84]	; 0x54
    2918:	str	r3, [sp, #16]
    291c:	mov	r0, r3
    2920:	mov	r1, r7
    2924:	mov	r2, r9
    2928:	mov	r3, fp
    292c:	stm	sp, {r6, r8}
    2930:	bl	0 <compare_strings>
    2934:	cmp	r0, #0
    2938:	ble	3880 <eval_string+0x1450>
    293c:	ldr	r3, [sp, #672]	; 0x2a0
    2940:	cmp	r7, #0
    2944:	str	fp, [r5]
    2948:	str	r6, [r4]
    294c:	str	r8, [r3]
    2950:	ble	25fc <eval_string+0x1cc>
    2954:	mov	r0, r9
    2958:	bl	0 <free>
    295c:	b	25fc <eval_string+0x1cc>
    2960:	add	r3, sp, #104	; 0x68
    2964:	ldr	r1, [r6, #16]
    2968:	add	r2, sp, #80	; 0x50
    296c:	str	r3, [sp]
    2970:	add	r3, sp, #88	; 0x58
    2974:	bl	2430 <eval_string>
    2978:	cmp	r0, #0
    297c:	bne	2ec8 <eval_string+0xa98>
    2980:	add	r3, sp, #112	; 0x70
    2984:	ldr	r1, [r6, #20]
    2988:	mov	r0, r9
    298c:	str	r3, [sp]
    2990:	add	r2, sp, #84	; 0x54
    2994:	add	r3, sp, #96	; 0x60
    2998:	bl	2430 <eval_string>
    299c:	subs	sl, r0, #0
    29a0:	bne	395c <eval_string+0x152c>
    29a4:	ldr	r6, [sp, #96]	; 0x60
    29a8:	ldr	r9, [sp, #112]	; 0x70
    29ac:	ldr	fp, [sp, #80]	; 0x50
    29b0:	ldr	r7, [sp, #88]	; 0x58
    29b4:	ldr	r8, [sp, #104]	; 0x68
    29b8:	ldr	r3, [sp, #84]	; 0x54
    29bc:	mov	r0, fp
    29c0:	mov	r1, r7
    29c4:	mov	r2, r8
    29c8:	stm	sp, {r6, r9}
    29cc:	str	r3, [sp, #16]
    29d0:	bl	0 <compare_strings>
    29d4:	cmp	r0, #0
    29d8:	blt	38a8 <eval_string+0x1478>
    29dc:	ldr	r3, [sp, #672]	; 0x2a0
    29e0:	cmp	r6, #0
    29e4:	str	fp, [r5]
    29e8:	str	r7, [r4]
    29ec:	str	r8, [r3]
    29f0:	bgt	2954 <eval_string+0x524>
    29f4:	b	25fc <eval_string+0x1cc>
    29f8:	ldr	r3, [sp, #672]	; 0x2a0
    29fc:	ldr	r1, [r6, #16]
    2a00:	mov	r2, r5
    2a04:	str	r3, [sp]
    2a08:	mov	r3, r4
    2a0c:	bl	2430 <eval_string>
    2a10:	cmp	r0, #0
    2a14:	bne	2ec8 <eval_string+0xa98>
    2a18:	ldr	r3, [r4]
    2a1c:	cmp	r3, #0
    2a20:	ble	2a94 <eval_string+0x664>
    2a24:	ldr	r2, [sp, #672]	; 0x2a0
    2a28:	ldr	ip, [pc, #3204]	; 36b4 <eval_string+0x1284>
    2a2c:	ldr	r1, [r2]
    2a30:	ldr	r2, [r5]
    2a34:	ldrb	r0, [r1, r2]
    2a38:	sub	r0, r0, #9
    2a3c:	uxtb	r0, r0
    2a40:	cmp	r0, #23
    2a44:	bls	3750 <eval_string+0x1320>
    2a48:	cmp	r3, #0
    2a4c:	ble	2a94 <eval_string+0x664>
    2a50:	ldr	r0, [pc, #3164]	; 36b4 <eval_string+0x1284>
    2a54:	b	2a78 <eval_string+0x648>
    2a58:	mvn	r2, r0, lsr r2
    2a5c:	tst	r2, #1
    2a60:	bne	2a94 <eval_string+0x664>
    2a64:	sub	r3, r3, #1
    2a68:	cmp	r3, #0
    2a6c:	str	r3, [r4]
    2a70:	beq	2a94 <eval_string+0x664>
    2a74:	ldr	r2, [r5]
    2a78:	add	r2, r1, r2
    2a7c:	add	r2, r2, r3
    2a80:	ldrb	r2, [r2, #-1]
    2a84:	sub	r2, r2, #9
    2a88:	uxtb	r2, r2
    2a8c:	cmp	r2, #23
    2a90:	bls	2a58 <eval_string+0x628>
    2a94:	mov	sl, #0
    2a98:	mov	r0, sl
    2a9c:	add	sp, sp, #636	; 0x27c
    2aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2aa4:	add	r2, sp, #112	; 0x70
    2aa8:	ldr	r1, [r6, #16]
    2aac:	bl	5640 <eval_float>
    2ab0:	cmp	r0, #0
    2ab4:	bne	2ec8 <eval_string+0xa98>
    2ab8:	ldr	r1, [r6, #20]
    2abc:	cmp	r1, #0
    2ac0:	beq	384c <eval_string+0x141c>
    2ac4:	add	r3, sp, #104	; 0x68
    2ac8:	str	r3, [sp]
    2acc:	mov	r0, r9
    2ad0:	add	r3, sp, #96	; 0x60
    2ad4:	add	r2, sp, #88	; 0x58
    2ad8:	bl	2430 <eval_string>
    2adc:	cmp	r0, #0
    2ae0:	bne	2ec8 <eval_string+0xa98>
    2ae4:	ldr	r2, [sp, #96]	; 0x60
    2ae8:	cmp	r2, #0
    2aec:	blt	3b30 <eval_string+0x1700>
    2af0:	beq	3adc <eval_string+0x16ac>
    2af4:	ldr	r3, [sp, #104]	; 0x68
    2af8:	ldr	r1, [sp, #88]	; 0x58
    2afc:	add	r3, r3, r2
    2b00:	strb	r0, [r3, r1]
    2b04:	ldr	r0, [sp, #96]	; 0x60
    2b08:	add	r0, r0, #1
    2b0c:	bl	0 <malloc>
    2b10:	ldr	r3, [sp, #672]	; 0x2a0
    2b14:	cmp	r0, #0
    2b18:	mov	r1, r0
    2b1c:	str	r0, [r3]
    2b20:	beq	3a98 <eval_string+0x1668>
    2b24:	ldr	r0, [sp, #104]	; 0x68
    2b28:	ldr	r3, [sp, #88]	; 0x58
    2b2c:	vldr	d0, [sp, #112]	; 0x70
    2b30:	add	r0, r0, r3
    2b34:	bl	0 <coda_time_double_to_string>
    2b38:	subs	sl, r0, #0
    2b3c:	bne	3a44 <eval_string+0x1614>
    2b40:	ldr	r3, [sp, #672]	; 0x2a0
    2b44:	str	sl, [r5]
    2b48:	ldr	r0, [r3]
    2b4c:	bl	0 <strlen>
    2b50:	ldr	r3, [r6, #20]
    2b54:	cmp	r3, #0
    2b58:	str	r0, [r4]
    2b5c:	beq	25fc <eval_string+0x1cc>
    2b60:	ldr	r0, [sp, #104]	; 0x68
    2b64:	bl	0 <free>
    2b68:	b	25fc <eval_string+0x1cc>
    2b6c:	ldr	r7, [r6, #16]
    2b70:	ldr	r3, [r7, #4]
    2b74:	cmp	r3, #4
    2b78:	bne	37b4 <eval_string+0x1384>
    2b7c:	ldr	r3, [r0]
    2b80:	cmp	r3, #0
    2b84:	beq	3ba0 <eval_string+0x1770>
    2b88:	add	r3, sp, #112	; 0x70
    2b8c:	mov	r0, r3
    2b90:	str	r3, [sp, #40]	; 0x28
    2b94:	add	r3, r9, #8
    2b98:	mov	r1, r3
    2b9c:	mov	r2, #520	; 0x208
    2ba0:	mov	r8, r3
    2ba4:	str	r3, [sp, #36]	; 0x24
    2ba8:	bl	0 <memcpy>
    2bac:	mov	r1, r7
    2bb0:	mov	r0, r9
    2bb4:	bl	5294 <eval_cursor>
    2bb8:	cmp	r0, #0
    2bbc:	bne	2ec8 <eval_string+0xa98>
    2bc0:	str	r0, [r5]
    2bc4:	mov	r1, r4
    2bc8:	mov	r0, r8
    2bcc:	bl	0 <coda_cursor_get_string_length>
    2bd0:	subs	sl, r0, #0
    2bd4:	bne	2ec8 <eval_string+0xa98>
    2bd8:	ldr	r1, [r6, #20]
    2bdc:	cmp	r1, #0
    2be0:	ldreq	r0, [r4]
    2be4:	beq	2c18 <eval_string+0x7e8>
    2be8:	mov	r0, r9
    2bec:	add	r2, sp, #104	; 0x68
    2bf0:	bl	3c6c <eval_integer>
    2bf4:	cmp	r0, #0
    2bf8:	bne	2ec8 <eval_string+0xa98>
    2bfc:	ldr	r0, [r4]
    2c00:	ldrd	r2, [sp, #104]	; 0x68
    2c04:	asr	r7, r0, #31
    2c08:	cmp	r2, r0
    2c0c:	sbcs	r1, r3, r7
    2c10:	movlt	r0, r2
    2c14:	strlt	r2, [r4]
    2c18:	cmp	r0, #0
    2c1c:	ble	3920 <eval_string+0x14f0>
    2c20:	add	r0, r0, #1
    2c24:	bl	0 <malloc>
    2c28:	ldr	r3, [sp, #672]	; 0x2a0
    2c2c:	cmp	r0, #0
    2c30:	str	r0, [r3]
    2c34:	mov	r1, r0
    2c38:	ldreq	r3, [pc, #2680]	; 36b8 <eval_string+0x1288>
    2c3c:	ldreq	r2, [r4]
    2c40:	beq	3678 <eval_string+0x1248>
    2c44:	ldr	r2, [r4]
    2c48:	ldr	r0, [sp, #36]	; 0x24
    2c4c:	add	r2, r2, #1
    2c50:	bl	0 <coda_cursor_read_string>
    2c54:	cmp	r0, #0
    2c58:	bne	3270 <eval_string+0xe40>
    2c5c:	ldr	r1, [sp, #40]	; 0x28
    2c60:	ldr	r0, [sp, #36]	; 0x24
    2c64:	mov	r2, #520	; 0x208
    2c68:	bl	0 <memcpy>
    2c6c:	b	25fc <eval_string+0x1cc>
    2c70:	ldr	r3, [sp, #672]	; 0x2a0
    2c74:	ldr	r1, [r6, #16]
    2c78:	mov	r2, r5
    2c7c:	str	r3, [sp]
    2c80:	mov	r3, r4
    2c84:	bl	2430 <eval_string>
    2c88:	cmp	r0, #0
    2c8c:	bne	2ec8 <eval_string+0xa98>
    2c90:	ldr	r1, [r4]
    2c94:	cmp	r1, #0
    2c98:	ble	2a94 <eval_string+0x664>
    2c9c:	ldr	r3, [sp, #672]	; 0x2a0
    2ca0:	ldr	r0, [pc, #2572]	; 36b4 <eval_string+0x1284>
    2ca4:	ldr	ip, [r3]
    2ca8:	b	2cc8 <eval_string+0x898>
    2cac:	mvn	r3, r0, lsr r3
    2cb0:	tst	r3, #1
    2cb4:	bne	2a94 <eval_string+0x664>
    2cb8:	sub	r1, r1, #1
    2cbc:	cmp	r1, #0
    2cc0:	str	r1, [r4]
    2cc4:	beq	2a94 <eval_string+0x664>
    2cc8:	ldr	r2, [r5]
    2ccc:	add	r3, ip, r1
    2cd0:	add	r3, r3, r2
    2cd4:	ldrb	r3, [r3, #-1]
    2cd8:	sub	r3, r3, #9
    2cdc:	uxtb	r3, r3
    2ce0:	cmp	r3, #23
    2ce4:	bls	2cac <eval_string+0x87c>
    2ce8:	mov	sl, #0
    2cec:	b	2a98 <eval_string+0x668>
    2cf0:	add	r3, sp, #88	; 0x58
    2cf4:	ldr	r1, [r6, #16]
    2cf8:	mov	ip, #0
    2cfc:	str	r3, [sp]
    2d00:	add	r2, sp, #80	; 0x50
    2d04:	add	r3, sp, #84	; 0x54
    2d08:	str	ip, [sp, #88]	; 0x58
    2d0c:	bl	2430 <eval_string>
    2d10:	cmp	r0, #0
    2d14:	bne	2ec8 <eval_string+0xa98>
    2d18:	add	r3, sp, #76	; 0x4c
    2d1c:	ldr	r1, [r6, #20]
    2d20:	add	r2, sp, #68	; 0x44
    2d24:	str	r3, [sp]
    2d28:	mov	r0, r9
    2d2c:	add	r3, sp, #72	; 0x48
    2d30:	bl	2430 <eval_string>
    2d34:	subs	sl, r0, #0
    2d38:	bne	3a34 <eval_string+0x1604>
    2d3c:	ldr	r3, [sp, #84]	; 0x54
    2d40:	cmp	r3, #0
    2d44:	ble	38e4 <eval_string+0x14b4>
    2d48:	ldr	r2, [sp, #88]	; 0x58
    2d4c:	ldr	r1, [sp, #80]	; 0x50
    2d50:	add	r2, r2, r3
    2d54:	add	r3, sp, #64	; 0x40
    2d58:	strb	sl, [r2, r1]
    2d5c:	ldr	r2, [sp, #80]	; 0x50
    2d60:	ldr	r0, [sp, #88]	; 0x58
    2d64:	str	sl, [sp]
    2d68:	add	r0, r0, r2
    2d6c:	mov	r1, #36	; 0x24
    2d70:	add	r2, sp, #60	; 0x3c
    2d74:	bl	0 <coda_pcre_compile>
    2d78:	mov	r7, r0
    2d7c:	ldr	r0, [sp, #88]	; 0x58
    2d80:	cmp	r0, #0
    2d84:	beq	2d8c <eval_string+0x95c>
    2d88:	bl	0 <free>
    2d8c:	cmp	r7, #0
    2d90:	beq	3b4c <eval_string+0x171c>
    2d94:	ldr	r1, [r6, #24]
    2d98:	mov	r0, r9
    2d9c:	ldr	r3, [r1, #4]
    2da0:	cmp	r3, #1
    2da4:	add	r3, sp, #112	; 0x70
    2da8:	str	r3, [sp, #40]	; 0x28
    2dac:	beq	3868 <eval_string+0x1438>
    2db0:	str	r3, [sp]
    2db4:	add	r2, sp, #96	; 0x60
    2db8:	add	r3, sp, #104	; 0x68
    2dbc:	bl	2430 <eval_string>
    2dc0:	cmp	r0, #0
    2dc4:	bne	3a20 <eval_string+0x15f0>
    2dc8:	cmp	r4, #0
    2dcc:	beq	3b70 <eval_string+0x1740>
    2dd0:	ldr	r1, [sp, #112]	; 0x70
    2dd4:	mov	r0, r7
    2dd8:	bl	0 <coda_pcre_get_stringnumber>
    2ddc:	subs	r6, r0, #0
    2de0:	blt	3aec <eval_string+0x16bc>
    2de4:	ldr	r0, [sp, #112]	; 0x70
    2de8:	bl	0 <free>
    2dec:	ldr	r0, [sp, #76]	; 0x4c
    2df0:	cmp	r0, #0
    2df4:	beq	39f8 <eval_string+0x15c8>
    2df8:	ldr	ip, [sp, #40]	; 0x28
    2dfc:	ldr	r2, [sp, #68]	; 0x44
    2e00:	mov	r8, #0
    2e04:	mov	r1, #48	; 0x30
    2e08:	add	r2, r0, r2
    2e0c:	ldr	r3, [sp, #72]	; 0x48
    2e10:	str	ip, [sp, #8]
    2e14:	str	r1, [sp, #12]
    2e18:	str	r8, [sp, #4]
    2e1c:	mov	r1, r8
    2e20:	str	r8, [sp]
    2e24:	mov	r0, r7
    2e28:	bl	0 <coda_pcre_exec>
    2e2c:	ldr	r3, [pc, #2220]	; 36e0 <eval_string+0x12b0>
    2e30:	ldr	r3, [r3]
    2e34:	mov	r9, r0
    2e38:	mov	r0, r7
    2e3c:	blx	r3
    2e40:	cmn	r9, #1
    2e44:	blt	3b04 <eval_string+0x16d4>
    2e48:	cmp	r9, #0
    2e4c:	beq	3a84 <eval_string+0x1654>
    2e50:	cmp	r6, r9
    2e54:	bge	38c8 <eval_string+0x1498>
    2e58:	add	r3, sp, #632	; 0x278
    2e5c:	add	r3, r3, r6, lsl #3
    2e60:	ldr	r1, [sp, #76]	; 0x4c
    2e64:	ldr	r2, [r3, #-520]	; 0xfffffdf8
    2e68:	ldr	r3, [r3, #-516]	; 0xfffffdfc
    2e6c:	str	r2, [r5]
    2e70:	sub	r3, r3, r2
    2e74:	str	r3, [r4]
    2e78:	ldr	r3, [sp, #672]	; 0x2a0
    2e7c:	str	r1, [r3]
    2e80:	b	25fc <eval_string+0x1cc>
    2e84:	add	r2, sp, #112	; 0x70
    2e88:	ldr	r1, [r6, #16]
    2e8c:	bl	629c <eval_boolean>
    2e90:	subs	sl, r0, #0
    2e94:	bne	2ec8 <eval_string+0xa98>
    2e98:	ldr	r3, [sp, #112]	; 0x70
    2e9c:	mov	r2, r5
    2ea0:	cmp	r3, #0
    2ea4:	ldr	r3, [sp, #672]	; 0x2a0
    2ea8:	ldrne	r1, [r6, #20]
    2eac:	ldreq	r1, [r6, #24]
    2eb0:	mov	r0, r9
    2eb4:	str	r3, [sp]
    2eb8:	mov	r3, r4
    2ebc:	bl	2430 <eval_string>
    2ec0:	cmp	r0, #0
    2ec4:	beq	25fc <eval_string+0x1cc>
    2ec8:	mvn	sl, #0
    2ecc:	mov	r0, sl
    2ed0:	add	sp, sp, #636	; 0x27c
    2ed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ed8:	ldr	r3, [r0]
    2edc:	cmp	r3, #0
    2ee0:	beq	3c58 <eval_string+0x1828>
    2ee4:	add	r7, r0, #8
    2ee8:	mov	r1, r7
    2eec:	mov	r2, #520	; 0x208
    2ef0:	add	r0, sp, #112	; 0x70
    2ef4:	bl	0 <memcpy>
    2ef8:	ldr	r1, [r6, #16]
    2efc:	mov	r0, r9
    2f00:	bl	5294 <eval_cursor>
    2f04:	cmp	r0, #0
    2f08:	bne	2ec8 <eval_string+0xa98>
    2f0c:	ldr	r3, [sp, #672]	; 0x2a0
    2f10:	ldr	r1, [r6, #20]
    2f14:	mov	r2, r5
    2f18:	str	r3, [sp]
    2f1c:	mov	r0, r9
    2f20:	mov	r3, r4
    2f24:	bl	2430 <eval_string>
    2f28:	subs	sl, r0, #0
    2f2c:	bne	2ec8 <eval_string+0xa98>
    2f30:	add	r1, sp, #112	; 0x70
    2f34:	mov	r0, r7
    2f38:	mov	r2, #520	; 0x208
    2f3c:	bl	0 <memcpy>
    2f40:	b	25fc <eval_string+0x1cc>
    2f44:	ldr	r3, [r0]
    2f48:	cmp	r3, #0
    2f4c:	beq	3bdc <eval_string+0x17ac>
    2f50:	add	r3, sp, #112	; 0x70
    2f54:	mov	r0, r3
    2f58:	str	r3, [sp, #40]	; 0x28
    2f5c:	add	r3, r9, #8
    2f60:	mov	r1, r3
    2f64:	mov	r2, #520	; 0x208
    2f68:	mov	r7, r3
    2f6c:	str	r3, [sp, #36]	; 0x24
    2f70:	bl	0 <memcpy>
    2f74:	ldr	r1, [r6, #16]
    2f78:	mov	r0, r9
    2f7c:	bl	5294 <eval_cursor>
    2f80:	cmp	r0, #0
    2f84:	bne	2ec8 <eval_string+0xa98>
    2f88:	add	r1, sp, #84	; 0x54
    2f8c:	mov	r0, r7
    2f90:	bl	0 <coda_cursor_get_num_elements>
    2f94:	subs	sl, r0, #0
    2f98:	bne	2ec8 <eval_string+0xa98>
    2f9c:	ldr	r3, [sp, #84]	; 0x54
    2fa0:	str	sl, [r5]
    2fa4:	cmp	r3, #0
    2fa8:	ldr	r3, [sp, #672]	; 0x2a0
    2fac:	str	sl, [r4]
    2fb0:	str	sl, [r3]
    2fb4:	ble	2c5c <eval_string+0x82c>
    2fb8:	mov	r0, r7
    2fbc:	bl	0 <coda_cursor_goto_first_array_element>
    2fc0:	cmp	r0, #0
    2fc4:	bne	2ec8 <eval_string+0xa98>
    2fc8:	ldr	r3, [sp, #84]	; 0x54
    2fcc:	cmp	r3, #0
    2fd0:	ble	2c5c <eval_string+0x82c>
    2fd4:	add	r3, sp, #104	; 0x68
    2fd8:	str	r3, [sp, #28]
    2fdc:	add	r3, sp, #88	; 0x58
    2fe0:	str	r3, [sp, #16]
    2fe4:	add	r3, sp, #96	; 0x60
    2fe8:	mov	fp, sl
    2fec:	str	sl, [sp, #52]	; 0x34
    2ff0:	str	r3, [sp, #32]
    2ff4:	str	r9, [sp, #44]	; 0x2c
    2ff8:	str	r6, [sp, #48]	; 0x30
    2ffc:	ldr	sl, [sp, #672]	; 0x2a0
    3000:	b	3010 <eval_string+0xbe0>
    3004:	add	fp, fp, #1
    3008:	cmp	fp, r3
    300c:	bge	3800 <eval_string+0x13d0>
    3010:	ldr	r3, [sp, #48]	; 0x30
    3014:	ldr	r2, [sp, #16]
    3018:	ldr	r0, [sp, #44]	; 0x2c
    301c:	ldr	r1, [r3, #20]
    3020:	ldr	r3, [sp, #28]
    3024:	str	r3, [sp]
    3028:	ldr	r3, [sp, #32]
    302c:	bl	2430 <eval_string>
    3030:	cmp	r0, #0
    3034:	bne	2ec8 <eval_string+0xa98>
    3038:	ldr	ip, [sl]
    303c:	ldr	r9, [r4]
    3040:	ldr	r8, [sp, #88]	; 0x58
    3044:	ldr	r6, [sp, #96]	; 0x60
    3048:	ldr	r7, [sp, #104]	; 0x68
    304c:	ldr	r3, [r5]
    3050:	mov	r0, r8
    3054:	mov	r1, r6
    3058:	mov	r2, r7
    305c:	stm	sp, {r9, ip}
    3060:	bl	0 <compare_strings>
    3064:	cmp	r0, #0
    3068:	blt	3794 <eval_string+0x1364>
    306c:	cmp	r6, #0
    3070:	ble	307c <eval_string+0xc4c>
    3074:	mov	r0, r7
    3078:	bl	0 <free>
    307c:	ldr	r3, [sp, #84]	; 0x54
    3080:	sub	r2, r3, #1
    3084:	cmp	r2, fp
    3088:	ble	3004 <eval_string+0xbd4>
    308c:	ldr	r0, [sp, #36]	; 0x24
    3090:	bl	0 <coda_cursor_goto_next_array_element>
    3094:	cmp	r0, #0
    3098:	bne	2ec8 <eval_string+0xa98>
    309c:	ldr	r3, [sp, #84]	; 0x54
    30a0:	b	3004 <eval_string+0xbd4>
    30a4:	ldr	r3, [r6, #12]
    30a8:	ldr	r1, [r6, #16]
    30ac:	ldrb	r7, [r3]
    30b0:	sub	r2, r7, #39	; 0x27
    30b4:	add	r7, r0, r7, lsl #3
    30b8:	sub	r7, r7, #304	; 0x130
    30bc:	add	r2, r0, r2, lsl #3
    30c0:	ldrd	sl, [r7, #-8]
    30c4:	strd	sl, [sp, #16]
    30c8:	bl	3c6c <eval_integer>
    30cc:	cmp	r0, #0
    30d0:	bne	2ec8 <eval_string+0xa98>
    30d4:	ldr	r3, [sp, #672]	; 0x2a0
    30d8:	ldr	r1, [r6, #20]
    30dc:	mov	r2, r5
    30e0:	str	r3, [sp]
    30e4:	mov	r0, r9
    30e8:	mov	r3, r4
    30ec:	bl	2430 <eval_string>
    30f0:	subs	sl, r0, #0
    30f4:	bne	2ec8 <eval_string+0xa98>
    30f8:	ldrd	r2, [sp, #16]
    30fc:	strd	r2, [r7, #-8]
    3100:	b	25fc <eval_string+0x1cc>
    3104:	ldr	r3, [r0]
    3108:	add	r2, sp, #88	; 0x58
    310c:	mov	ip, r2
    3110:	str	r2, [sp, #16]
    3114:	add	r2, sp, #104	; 0x68
    3118:	mov	lr, r2
    311c:	mov	r0, #0
    3120:	mov	r1, #0
    3124:	str	r2, [sp, #28]
    3128:	cmp	r3, #0
    312c:	mvn	r2, #0
    3130:	mvn	r3, #0
    3134:	strd	r0, [ip]
    3138:	strd	r2, [lr]
    313c:	beq	3bf0 <eval_string+0x17c0>
    3140:	add	r3, sp, #112	; 0x70
    3144:	add	r2, r9, #8
    3148:	mov	r1, r2
    314c:	str	r2, [sp, #36]	; 0x24
    3150:	mov	r0, r3
    3154:	mov	r2, #520	; 0x208
    3158:	str	r3, [sp, #40]	; 0x28
    315c:	bl	0 <memcpy>
    3160:	ldr	r1, [r6, #16]
    3164:	mov	r0, r9
    3168:	bl	5294 <eval_cursor>
    316c:	subs	sl, r0, #0
    3170:	bne	2ec8 <eval_string+0xa98>
    3174:	ldr	r3, [r6, #24]
    3178:	cmp	r3, #0
    317c:	beq	3820 <eval_string+0x13f0>
    3180:	ldr	r2, [sp, #16]
    3184:	ldr	r1, [r6, #20]
    3188:	mov	r0, r9
    318c:	bl	3c6c <eval_integer>
    3190:	cmp	r0, #0
    3194:	bne	2ec8 <eval_string+0xa98>
    3198:	ldr	r1, [r6, #24]
    319c:	mov	r0, r9
    31a0:	add	r2, sp, #96	; 0x60
    31a4:	bl	3c6c <eval_integer>
    31a8:	cmp	r0, #0
    31ac:	bne	2ec8 <eval_string+0xa98>
    31b0:	ldr	r3, [sp, #28]
    31b4:	ldrd	r2, [r3, #-8]
    31b8:	cmp	r2, #1
    31bc:	sbcs	r1, r3, #0
    31c0:	blt	3914 <eval_string+0x14e4>
    31c4:	lsl	r7, r3, #3
    31c8:	ldr	r3, [sp, #28]
    31cc:	orr	r7, r7, r2, lsr #29
    31d0:	lsl	r6, r2, #3
    31d4:	strd	r6, [r3]
    31d8:	cmp	r6, #0
    31dc:	sbcs	r3, r7, #0
    31e0:	blt	3b20 <eval_string+0x16f0>
    31e4:	mov	r1, #0
    31e8:	and	r0, r6, #7
    31ec:	orrs	r3, r0, r1
    31f0:	lsr	r8, r6, #3
    31f4:	orr	r8, r8, r7, lsl #29
    31f8:	movne	r1, #1
    31fc:	moveq	r1, #0
    3200:	adds	r8, r8, r1
    3204:	asr	r9, r7, #3
    3208:	ldr	r2, [sp, #28]
    320c:	adc	r9, r9, #0
    3210:	orrs	r3, r8, r9
    3214:	mov	r3, #0
    3218:	str	r3, [r5]
    321c:	strd	r8, [r2, #-8]
    3220:	str	r8, [r4]
    3224:	beq	3814 <eval_string+0x13e4>
    3228:	add	r0, r8, #1
    322c:	bl	0 <malloc>
    3230:	ldr	r3, [sp, #672]	; 0x2a0
    3234:	cmp	r0, #0
    3238:	mov	r1, r0
    323c:	str	r0, [r3]
    3240:	beq	3b40 <eval_string+0x1710>
    3244:	ldr	r3, [sp, #16]
    3248:	ldr	r2, [sp, #88]	; 0x58
    324c:	ldr	r0, [sp, #36]	; 0x24
    3250:	ldr	r3, [r3, #4]
    3254:	strd	r6, [sp]
    3258:	lsl	r3, r3, #3
    325c:	orr	r3, r3, r2, lsr #29
    3260:	lsl	r2, r2, #3
    3264:	bl	0 <coda_cursor_read_bits>
    3268:	cmp	r0, #0
    326c:	beq	2c5c <eval_string+0x82c>
    3270:	ldr	r3, [sp, #672]	; 0x2a0
    3274:	ldr	r0, [r3]
    3278:	bl	0 <free>
    327c:	b	2ec8 <eval_string+0xa98>
    3280:	ldr	r3, [r0]
    3284:	cmp	r3, #0
    3288:	beq	3bc8 <eval_string+0x1798>
    328c:	add	r3, sp, #112	; 0x70
    3290:	mov	r0, r3
    3294:	str	r3, [sp, #40]	; 0x28
    3298:	add	r3, r9, #8
    329c:	mov	r1, r3
    32a0:	mov	r2, #520	; 0x208
    32a4:	mov	r7, r3
    32a8:	str	r3, [sp, #36]	; 0x24
    32ac:	bl	0 <memcpy>
    32b0:	ldr	r1, [r6, #16]
    32b4:	mov	r0, r9
    32b8:	bl	5294 <eval_cursor>
    32bc:	cmp	r0, #0
    32c0:	bne	2ec8 <eval_string+0xa98>
    32c4:	add	r1, sp, #84	; 0x54
    32c8:	mov	r0, r7
    32cc:	bl	0 <coda_cursor_get_num_elements>
    32d0:	subs	sl, r0, #0
    32d4:	bne	2ec8 <eval_string+0xa98>
    32d8:	ldr	r3, [sp, #84]	; 0x54
    32dc:	str	sl, [r5]
    32e0:	cmp	r3, #0
    32e4:	ldr	r3, [sp, #672]	; 0x2a0
    32e8:	str	sl, [r4]
    32ec:	str	sl, [r3]
    32f0:	ble	2c5c <eval_string+0x82c>
    32f4:	mov	r0, r7
    32f8:	bl	0 <coda_cursor_goto_first_array_element>
    32fc:	cmp	r0, #0
    3300:	bne	2ec8 <eval_string+0xa98>
    3304:	ldr	r3, [sp, #84]	; 0x54
    3308:	cmp	r3, #0
    330c:	ble	2c5c <eval_string+0x82c>
    3310:	add	r3, sp, #104	; 0x68
    3314:	str	r3, [sp, #28]
    3318:	add	r3, sp, #88	; 0x58
    331c:	str	r3, [sp, #16]
    3320:	add	r3, sp, #96	; 0x60
    3324:	mov	fp, sl
    3328:	str	r3, [sp, #32]
    332c:	str	sl, [sp, #52]	; 0x34
    3330:	str	r9, [sp, #44]	; 0x2c
    3334:	str	r6, [sp, #48]	; 0x30
    3338:	b	3348 <eval_string+0xf18>
    333c:	add	fp, fp, #1
    3340:	cmp	fp, r3
    3344:	bge	3800 <eval_string+0x13d0>
    3348:	ldr	r3, [sp, #48]	; 0x30
    334c:	ldr	r2, [sp, #16]
    3350:	ldr	r0, [sp, #44]	; 0x2c
    3354:	ldr	r1, [r3, #20]
    3358:	ldr	r3, [sp, #28]
    335c:	str	r3, [sp]
    3360:	ldr	r3, [sp, #32]
    3364:	bl	2430 <eval_string>
    3368:	cmp	r0, #0
    336c:	bne	2ec8 <eval_string+0xa98>
    3370:	ldr	r3, [sp, #672]	; 0x2a0
    3374:	ldr	r9, [r4]
    3378:	ldr	r8, [sp, #88]	; 0x58
    337c:	ldr	sl, [r3]
    3380:	ldr	r6, [sp, #96]	; 0x60
    3384:	ldr	r7, [sp, #104]	; 0x68
    3388:	ldr	r3, [r5]
    338c:	mov	r0, r8
    3390:	mov	r1, r6
    3394:	mov	r2, r7
    3398:	stm	sp, {r9, sl}
    339c:	bl	0 <compare_strings>
    33a0:	cmp	r0, #0
    33a4:	ble	3780 <eval_string+0x1350>
    33a8:	cmp	r9, #0
    33ac:	ble	33c4 <eval_string+0xf94>
    33b0:	mov	r0, sl
    33b4:	bl	0 <free>
    33b8:	ldr	r8, [sp, #88]	; 0x58
    33bc:	ldr	r6, [sp, #96]	; 0x60
    33c0:	ldr	r7, [sp, #104]	; 0x68
    33c4:	ldr	r3, [sp, #672]	; 0x2a0
    33c8:	str	r8, [r5]
    33cc:	str	r6, [r4]
    33d0:	str	r7, [r3]
    33d4:	ldr	r3, [sp, #84]	; 0x54
    33d8:	sub	r2, r3, #1
    33dc:	cmp	r2, fp
    33e0:	ble	333c <eval_string+0xf0c>
    33e4:	ldr	r0, [sp, #36]	; 0x24
    33e8:	bl	0 <coda_cursor_goto_next_array_element>
    33ec:	cmp	r0, #0
    33f0:	bne	2ec8 <eval_string+0xa98>
    33f4:	ldr	r3, [sp, #84]	; 0x54
    33f8:	b	333c <eval_string+0xf0c>
    33fc:	ldr	r3, [r0]
    3400:	cmp	r3, #0
    3404:	beq	3b8c <eval_string+0x175c>
    3408:	add	r3, sp, #112	; 0x70
    340c:	mov	r0, r3
    3410:	str	r3, [sp, #40]	; 0x28
    3414:	add	r3, r9, #8
    3418:	mov	r1, r3
    341c:	mov	r2, #520	; 0x208
    3420:	mov	r7, r3
    3424:	str	r3, [sp, #36]	; 0x24
    3428:	bl	0 <memcpy>
    342c:	ldr	r1, [r6, #16]
    3430:	mov	r0, r9
    3434:	bl	5294 <eval_cursor>
    3438:	cmp	r0, #0
    343c:	bne	2ec8 <eval_string+0xa98>
    3440:	add	r1, sp, #84	; 0x54
    3444:	mov	r0, r7
    3448:	bl	0 <coda_cursor_get_num_elements>
    344c:	subs	sl, r0, #0
    3450:	bne	2ec8 <eval_string+0xa98>
    3454:	ldr	r3, [sp, #84]	; 0x54
    3458:	str	sl, [r5]
    345c:	cmp	r3, #0
    3460:	ldr	r3, [sp, #672]	; 0x2a0
    3464:	str	sl, [r4]
    3468:	str	sl, [r3]
    346c:	ble	2c5c <eval_string+0x82c>
    3470:	mov	r0, r7
    3474:	bl	0 <coda_cursor_goto_first_array_element>
    3478:	cmp	r0, #0
    347c:	bne	2ec8 <eval_string+0xa98>
    3480:	ldr	r3, [sp, #84]	; 0x54
    3484:	cmp	r3, #0
    3488:	ble	2c5c <eval_string+0x82c>
    348c:	add	r2, sp, #88	; 0x58
    3490:	add	r3, sp, #104	; 0x68
    3494:	str	r2, [sp, #16]
    3498:	add	r2, sp, #96	; 0x60
    349c:	mov	r5, sl
    34a0:	str	sl, [sp, #28]
    34a4:	ldr	r7, [sp, #672]	; 0x2a0
    34a8:	mov	sl, r2
    34ac:	mov	fp, r3
    34b0:	b	34c0 <eval_string+0x1090>
    34b4:	add	r5, r5, #1
    34b8:	cmp	r5, r3
    34bc:	bge	3930 <eval_string+0x1500>
    34c0:	ldr	r1, [r6, #20]
    34c4:	mov	r3, sl
    34c8:	str	fp, [sp]
    34cc:	ldr	r2, [sp, #16]
    34d0:	mov	r0, r9
    34d4:	bl	2430 <eval_string>
    34d8:	cmp	r0, #0
    34dc:	bne	2ec8 <eval_string+0xa98>
    34e0:	ldr	r1, [sp, #96]	; 0x60
    34e4:	cmp	r1, #0
    34e8:	ble	3540 <eval_string+0x1110>
    34ec:	ldr	r3, [r4]
    34f0:	ldr	r0, [r7]
    34f4:	add	r1, r1, r3
    34f8:	add	r1, r1, #1
    34fc:	bl	0 <realloc>
    3500:	subs	r8, r0, #0
    3504:	beq	3938 <eval_string+0x1508>
    3508:	ldr	r2, [sp, #88]	; 0x58
    350c:	ldr	r0, [r4]
    3510:	ldr	r1, [sp, #104]	; 0x68
    3514:	add	r0, r8, r0
    3518:	add	r1, r1, r2
    351c:	ldr	r2, [sp, #96]	; 0x60
    3520:	bl	0 <memcpy>
    3524:	ldr	r0, [sp, #104]	; 0x68
    3528:	bl	0 <free>
    352c:	ldr	r2, [r4]
    3530:	ldr	r1, [sp, #96]	; 0x60
    3534:	add	r2, r2, r1
    3538:	str	r2, [r4]
    353c:	str	r8, [r7]
    3540:	ldr	r3, [sp, #84]	; 0x54
    3544:	sub	r2, r3, #1
    3548:	cmp	r2, r5
    354c:	ble	34b4 <eval_string+0x1084>
    3550:	ldr	r0, [sp, #36]	; 0x24
    3554:	bl	0 <coda_cursor_goto_next_array_element>
    3558:	cmp	r0, #0
    355c:	bne	2ec8 <eval_string+0xa98>
    3560:	ldr	r3, [sp, #84]	; 0x54
    3564:	b	34b4 <eval_string+0x1084>
    3568:	ldr	r3, [sp, #672]	; 0x2a0
    356c:	ldr	r1, [r6, #16]
    3570:	mov	r2, r5
    3574:	str	r3, [sp]
    3578:	mov	r3, r4
    357c:	bl	2430 <eval_string>
    3580:	cmp	r0, #0
    3584:	bne	2ec8 <eval_string+0xa98>
    3588:	ldr	r2, [r4]
    358c:	cmp	r2, #0
    3590:	ble	2a94 <eval_string+0x664>
    3594:	ldr	r3, [sp, #672]	; 0x2a0
    3598:	ldr	r1, [pc, #276]	; 36b4 <eval_string+0x1284>
    359c:	ldr	r0, [r3]
    35a0:	ldr	r3, [r5]
    35a4:	b	35d4 <eval_string+0x11a4>
    35a8:	mvn	r3, r1, lsr r3
    35ac:	tst	r3, #1
    35b0:	bne	2a94 <eval_string+0x664>
    35b4:	sub	r2, r2, #1
    35b8:	str	r2, [r4]
    35bc:	ldr	r3, [r5]
    35c0:	add	r3, r3, #1
    35c4:	str	r3, [r5]
    35c8:	ldr	r2, [r4]
    35cc:	cmp	r2, #0
    35d0:	ble	2a94 <eval_string+0x664>
    35d4:	ldrb	r3, [r0, r3]
    35d8:	sub	r3, r3, #9
    35dc:	uxtb	r3, r3
    35e0:	cmp	r3, #23
    35e4:	bls	35a8 <eval_string+0x1178>
    35e8:	mov	sl, #0
    35ec:	b	2a98 <eval_string+0x668>
    35f0:	ldr	r3, [r0]
    35f4:	cmp	r3, #0
    35f8:	beq	3c44 <eval_string+0x1814>
    35fc:	ldr	r0, [r3]
    3600:	add	r1, sp, #112	; 0x70
    3604:	bl	0 <coda_get_product_filename>
    3608:	subs	sl, r0, #0
    360c:	bne	2ec8 <eval_string+0xa98>
    3610:	ldr	r6, [sp, #112]	; 0x70
    3614:	ldrb	r3, [r6]
    3618:	cmp	r3, #0
    361c:	beq	3640 <eval_string+0x1210>
    3620:	add	r2, r6, #1
    3624:	cmp	r3, #92	; 0x5c
    3628:	cmpne	r3, #47	; 0x2f
    362c:	moveq	r6, r2
    3630:	str	r2, [sp, #112]	; 0x70
    3634:	ldrb	r3, [r2], #1
    3638:	cmp	r3, #0
    363c:	bne	3624 <eval_string+0x11f4>
    3640:	mov	r3, #0
    3644:	str	r3, [r5]
    3648:	mov	r0, r6
    364c:	bl	0 <strlen>
    3650:	str	r0, [r4]
    3654:	add	r0, r0, #1
    3658:	bl	0 <malloc>
    365c:	ldr	r2, [sp, #672]	; 0x2a0
    3660:	cmp	r0, #0
    3664:	mov	r3, r0
    3668:	str	r0, [r2]
    366c:	ldreq	r3, [pc, #72]	; 36bc <eval_string+0x128c>
    3670:	ldreq	r2, [r4]
    3674:	bne	28ac <eval_string+0x47c>
    3678:	str	r3, [sp]
    367c:	ldr	r1, [pc, #76]	; 36d0 <eval_string+0x12a0>
    3680:	ldr	r3, [pc, #192]	; 3748 <eval_string+0x1318>
    3684:	mvn	r0, #0
    3688:	bl	0 <coda_set_error>
    368c:	b	2ec8 <eval_string+0xa98>
    3690:	ldr	r3, [pc, #180]	; 374c <eval_string+0x131c>
    3694:	ldr	r2, [pc, #36]	; 36c0 <eval_string+0x1290>
    3698:	ldr	r1, [pc, #168]	; 3748 <eval_string+0x1318>
    369c:	ldr	r0, [pc, #32]	; 36c4 <eval_string+0x1294>
    36a0:	bl	0 <__assert_fail>
    36a4:	.word	0x00000bd7
    36a8:	.word	0x00000e6a
    36ac:	.word	0x00000e51
    36b0:	.word	0x00000e36
    36b4:	.word	0x00800013
    36b8:	.word	0x00000b4f
    36bc:	.word	0x00000d8d
    36c0:	.word	0x00000ed2
    36c4:	.word	0x00000a0c
    36c8:	.word	0x000009ec
    36cc:	.word	0x00000ccb
    36d0:	.word	0x000007e0
    36d4:	.word	0x00000840
    36d8:	.word	0x00000890
    36dc:	.word	0x00000dff
    36e0:	.word	0x00000000
    36e4:	.word	0x00000b1d
    36e8:	.word	0x00000868
    36ec:	.word	0x00000988
    36f0:	.word	0x00000e9c
    36f4:	.word	0x000009d8
    36f8:	.word	0x00000908
    36fc:	.word	0x00000954
    3700:	.word	0x00000818
    3704:	.word	0x000009b8
    3708:	.word	0x00000baf
    370c:	.word	0x00000894
    3710:	.word	0x000008cc
    3714:	.word	0x00000ca2
    3718:	.word	0x00000b31
    371c:	.word	0x00000e5c
    3720:	.word	0x00000d23
    3724:	.word	0x00000ce5
    3728:	.word	0x00000b7a
    372c:	.word	0x00000b6c
    3730:	.word	0x00000790
    3734:	.word	0x00000e42
    3738:	.word	0x00000e28
    373c:	.word	0x00000d79
    3740:	.word	0x00000eb3
    3744:	.word	0x000007c4
    3748:	.word	0x000005b8
    374c:	.word	0x00000014
    3750:	mvn	r0, ip, lsr r0
    3754:	tst	r0, #1
    3758:	bne	2a48 <eval_string+0x618>
    375c:	sub	r3, r3, #1
    3760:	str	r3, [r4]
    3764:	ldr	r2, [r5]
    3768:	add	r2, r2, #1
    376c:	str	r2, [r5]
    3770:	ldr	r3, [r4]
    3774:	cmp	r3, #0
    3778:	bgt	2a34 <eval_string+0x604>
    377c:	b	2a94 <eval_string+0x664>
    3780:	cmp	r6, #0
    3784:	ble	33d4 <eval_string+0xfa4>
    3788:	mov	r0, r7
    378c:	bl	0 <free>
    3790:	b	33d4 <eval_string+0xfa4>
    3794:	cmp	r9, #0
    3798:	ble	37a4 <eval_string+0x1374>
    379c:	mov	r0, sl
    37a0:	bl	0 <free>
    37a4:	str	r8, [r5]
    37a8:	str	r6, [r4]
    37ac:	str	r7, [sl]
    37b0:	b	307c <eval_string+0xc4c>
    37b4:	mov	r1, r7
    37b8:	add	r2, sp, #104	; 0x68
    37bc:	bl	3c6c <eval_integer>
    37c0:	subs	sl, r0, #0
    37c4:	bne	2ec8 <eval_string+0xa98>
    37c8:	ldrd	r0, [sp, #104]	; 0x68
    37cc:	add	r2, sp, #112	; 0x70
    37d0:	bl	0 <coda_str64>
    37d4:	add	r0, sp, #112	; 0x70
    37d8:	bl	0 <strdup>
    37dc:	ldr	r3, [sp, #672]	; 0x2a0
    37e0:	cmp	r0, #0
    37e4:	str	r0, [r3]
    37e8:	beq	3c04 <eval_string+0x17d4>
    37ec:	str	sl, [r5]
    37f0:	add	r0, sp, #112	; 0x70
    37f4:	bl	0 <strlen>
    37f8:	str	r0, [r4]
    37fc:	b	25fc <eval_string+0x1cc>
    3800:	ldr	sl, [sp, #52]	; 0x34
    3804:	b	2c5c <eval_string+0x82c>
    3808:	ldr	r2, [sp, #672]	; 0x2a0
    380c:	str	sl, [r2]
    3810:	b	2738 <eval_string+0x308>
    3814:	ldr	r2, [sp, #672]	; 0x2a0
    3818:	str	r3, [r2]
    381c:	b	2c5c <eval_string+0x82c>
    3820:	ldr	r1, [r6, #20]
    3824:	cmp	r1, #0
    3828:	bne	319c <eval_string+0xd6c>
    382c:	ldr	r6, [sp, #28]
    3830:	ldr	r0, [sp, #36]	; 0x24
    3834:	mov	r1, r6
    3838:	bl	0 <coda_cursor_get_bit_size>
    383c:	cmp	r0, #0
    3840:	bne	2ec8 <eval_string+0xa98>
    3844:	ldrd	r6, [r6]
    3848:	b	31d8 <eval_string+0xda8>
    384c:	ldr	r2, [pc, #-396]	; 36c8 <eval_string+0x1298>
    3850:	mov	r3, #28
    3854:	mov	r0, #29
    3858:	str	r1, [sp, #88]	; 0x58
    385c:	str	r2, [sp, #104]	; 0x68
    3860:	str	r3, [sp, #96]	; 0x60
    3864:	b	2b0c <eval_string+0x6dc>
    3868:	mov	r2, r3
    386c:	bl	3c6c <eval_integer>
    3870:	cmp	r0, #0
    3874:	bne	3a20 <eval_string+0x15f0>
    3878:	ldr	r6, [sp, #112]	; 0x70
    387c:	b	2dec <eval_string+0x9bc>
    3880:	ldr	r3, [sp, #16]
    3884:	cmp	r6, #0
    3888:	str	r3, [r5]
    388c:	ldr	r3, [sp, #672]	; 0x2a0
    3890:	str	r7, [r4]
    3894:	str	r9, [r3]
    3898:	ble	25fc <eval_string+0x1cc>
    389c:	mov	r0, r8
    38a0:	bl	0 <free>
    38a4:	b	25fc <eval_string+0x1cc>
    38a8:	ldr	r3, [sp, #16]
    38ac:	cmp	r7, #0
    38b0:	str	r3, [r5]
    38b4:	ldr	r3, [sp, #672]	; 0x2a0
    38b8:	str	r6, [r4]
    38bc:	str	r9, [r3]
    38c0:	bgt	389c <eval_string+0x146c>
    38c4:	b	25fc <eval_string+0x1cc>
    38c8:	ldr	r3, [sp, #672]	; 0x2a0
    38cc:	str	r8, [r5]
    38d0:	ldr	r0, [sp, #76]	; 0x4c
    38d4:	str	r8, [r4]
    38d8:	str	r8, [r3]
    38dc:	bl	0 <free>
    38e0:	b	25fc <eval_string+0x1cc>
    38e4:	str	sl, [sp]
    38e8:	add	r3, sp, #64	; 0x40
    38ec:	add	r2, sp, #60	; 0x3c
    38f0:	mov	r1, #36	; 0x24
    38f4:	ldr	r0, [pc, #-548]	; 36d8 <eval_string+0x12a8>
    38f8:	bl	0 <coda_pcre_compile>
    38fc:	mov	r7, r0
    3900:	b	2d7c <eval_string+0x94c>
    3904:	ldr	r2, [sp, #96]	; 0x60
    3908:	cmp	r2, #0
    390c:	bgt	2720 <eval_string+0x2f0>
    3910:	b	25fc <eval_string+0x1cc>
    3914:	ldr	r3, [sp, #28]
    3918:	ldrd	r6, [r3]
    391c:	b	31d8 <eval_string+0xda8>
    3920:	ldr	r2, [sp, #672]	; 0x2a0
    3924:	mov	r3, #0
    3928:	str	r3, [r2]
    392c:	b	2c5c <eval_string+0x82c>
    3930:	ldr	sl, [sp, #28]
    3934:	b	2c5c <eval_string+0x82c>
    3938:	ldr	r1, [r4]
    393c:	ldr	r3, [pc, #-632]	; 36cc <eval_string+0x129c>
    3940:	ldr	r2, [sp, #96]	; 0x60
    3944:	str	r3, [sp]
    3948:	add	r2, r1, r2
    394c:	ldr	r3, [pc, #-524]	; 3748 <eval_string+0x1318>
    3950:	ldr	r1, [pc, #-648]	; 36d0 <eval_string+0x12a0>
    3954:	mvn	r0, #0
    3958:	bl	0 <coda_set_error>
    395c:	ldr	r0, [sp, #104]	; 0x68
    3960:	bl	0 <free>
    3964:	b	2ec8 <eval_string+0xa98>
    3968:	ldr	r1, [pc, #-668]	; 36d4 <eval_string+0x12a4>
    396c:	mvn	r0, #400	; 0x190
    3970:	bl	0 <coda_set_error>
    3974:	b	2ec8 <eval_string+0xa98>
    3978:	cmp	r2, #0
    397c:	sbcs	r3, r3, #0
    3980:	blt	3a70 <eval_string+0x1640>
    3984:	ldr	r3, [sp, #672]	; 0x2a0
    3988:	ldr	r1, [r6, #24]
    398c:	mov	r0, r9
    3990:	str	r3, [sp]
    3994:	mov	r2, r5
    3998:	mov	r3, r4
    399c:	bl	2430 <eval_string>
    39a0:	subs	sl, r0, #0
    39a4:	bne	2ec8 <eval_string+0xa98>
    39a8:	ldr	r2, [r4]
    39ac:	cmp	r2, #0
    39b0:	beq	25fc <eval_string+0x1cc>
    39b4:	ldrd	r0, [sp, #104]	; 0x68
    39b8:	asr	r3, r2, #31
    39bc:	cmp	r0, r2
    39c0:	sbcs	r3, r1, r3
    39c4:	bge	3abc <eval_string+0x168c>
    39c8:	ldr	r1, [r5]
    39cc:	ldrd	r2, [sp, #112]	; 0x70
    39d0:	add	r1, r1, r0
    39d4:	str	r1, [r5]
    39d8:	ldr	r1, [r4]
    39dc:	sub	r0, r1, r0
    39e0:	cmp	r2, r0
    39e4:	asr	r7, r0, #31
    39e8:	sbcs	r1, r3, r7
    39ec:	str	r0, [r4]
    39f0:	strlt	r2, [r4]
    39f4:	b	25fc <eval_string+0x1cc>
    39f8:	ldr	r0, [pc, #-808]	; 36d8 <eval_string+0x12a8>
    39fc:	bl	0 <strdup>
    3a00:	cmp	r0, #0
    3a04:	str	r0, [sp, #76]	; 0x4c
    3a08:	bne	2df8 <eval_string+0x9c8>
    3a0c:	ldr	r3, [pc, #-824]	; 36dc <eval_string+0x12ac>
    3a10:	ldr	r2, [pc, #-720]	; 3748 <eval_string+0x1318>
    3a14:	ldr	r1, [pc, #-748]	; 3730 <eval_string+0x1300>
    3a18:	mvn	r0, #0
    3a1c:	bl	0 <coda_set_error>
    3a20:	ldr	r3, [pc, #-840]	; 36e0 <eval_string+0x12b0>
    3a24:	mov	r0, r7
    3a28:	ldr	r3, [r3]
    3a2c:	blx	r3
    3a30:	b	2ec8 <eval_string+0xa98>
    3a34:	ldr	r0, [sp, #88]	; 0x58
    3a38:	cmp	r0, #0
    3a3c:	bne	3960 <eval_string+0x1530>
    3a40:	b	2ec8 <eval_string+0xa98>
    3a44:	ldr	r3, [r6, #20]
    3a48:	cmp	r3, #0
    3a4c:	bne	395c <eval_string+0x152c>
    3a50:	b	2ec8 <eval_string+0xa98>
    3a54:	ldr	r3, [pc, #-888]	; 36e4 <eval_string+0x12b4>
    3a58:	ldr	r2, [pc, #-792]	; 3748 <eval_string+0x1318>
    3a5c:	ldr	r1, [pc, #-820]	; 3730 <eval_string+0x1300>
    3a60:	mvn	r0, #0
    3a64:	bl	0 <coda_set_error>
    3a68:	mvn	sl, #0
    3a6c:	b	25fc <eval_string+0x1cc>
    3a70:	ldr	r1, [pc, #-912]	; 36e8 <eval_string+0x12b8>
    3a74:	mvn	r0, #400	; 0x190
    3a78:	bl	0 <coda_set_error>
    3a7c:	mvn	sl, #0
    3a80:	b	25fc <eval_string+0x1cc>
    3a84:	mvn	r0, #400	; 0x190
    3a88:	ldr	r1, [pc, #-932]	; 36ec <eval_string+0x12bc>
    3a8c:	bl	0 <coda_set_error>
    3a90:	ldr	r0, [sp, #76]	; 0x4c
    3a94:	b	3960 <eval_string+0x1530>
    3a98:	ldr	r3, [r6, #20]
    3a9c:	cmp	r3, #0
    3aa0:	beq	3aac <eval_string+0x167c>
    3aa4:	ldr	r0, [sp, #104]	; 0x68
    3aa8:	bl	0 <free>
    3aac:	ldr	r2, [r4]
    3ab0:	ldr	r3, [pc, #-968]	; 36f0 <eval_string+0x12c0>
    3ab4:	add	r2, r2, #1
    3ab8:	b	3678 <eval_string+0x1248>
    3abc:	ldr	r3, [sp, #672]	; 0x2a0
    3ac0:	str	sl, [r5]
    3ac4:	ldr	r0, [r3]
    3ac8:	str	sl, [r4]
    3acc:	bl	0 <free>
    3ad0:	ldr	r3, [sp, #672]	; 0x2a0
    3ad4:	str	sl, [r3]
    3ad8:	b	25fc <eval_string+0x1cc>
    3adc:	ldr	r1, [pc, #-1008]	; 36f4 <eval_string+0x12c4>
    3ae0:	mvn	r0, #400	; 0x190
    3ae4:	bl	0 <coda_set_error>
    3ae8:	b	2ec8 <eval_string+0xa98>
    3aec:	mvn	r0, #400	; 0x190
    3af0:	ldr	r1, [pc, #-1024]	; 36f8 <eval_string+0x12c8>
    3af4:	bl	0 <coda_set_error>
    3af8:	ldr	r0, [sp, #112]	; 0x70
    3afc:	bl	0 <free>
    3b00:	b	3a20 <eval_string+0x15f0>
    3b04:	mov	r2, r9
    3b08:	ldr	r1, [pc, #-1044]	; 36fc <eval_string+0x12cc>
    3b0c:	mvn	r0, #400	; 0x190
    3b10:	bl	0 <coda_set_error>
    3b14:	ldr	r0, [sp, #76]	; 0x4c
    3b18:	bl	0 <free>
    3b1c:	b	2ec8 <eval_string+0xa98>
    3b20:	ldr	r1, [pc, #-1064]	; 3700 <eval_string+0x12d0>
    3b24:	mvn	r0, #400	; 0x190
    3b28:	bl	0 <coda_set_error>
    3b2c:	b	2ec8 <eval_string+0xa98>
    3b30:	ldr	r1, [pc, #-1076]	; 3704 <eval_string+0x12d4>
    3b34:	mvn	r0, #400	; 0x190
    3b38:	bl	0 <coda_set_error>
    3b3c:	b	2ec8 <eval_string+0xa98>
    3b40:	ldr	r3, [pc, #-1088]	; 3708 <eval_string+0x12d8>
    3b44:	mov	r2, r8
    3b48:	b	3678 <eval_string+0x1248>
    3b4c:	mvn	r0, #400	; 0x190
    3b50:	ldr	r3, [sp, #64]	; 0x40
    3b54:	ldr	r2, [sp, #60]	; 0x3c
    3b58:	ldr	r1, [pc, #-1108]	; 370c <eval_string+0x12dc>
    3b5c:	bl	0 <coda_set_error>
    3b60:	ldr	r0, [sp, #76]	; 0x4c
    3b64:	cmp	r0, #0
    3b68:	bne	3960 <eval_string+0x1530>
    3b6c:	b	2ec8 <eval_string+0xa98>
    3b70:	mvn	r0, #400	; 0x190
    3b74:	ldr	r1, [pc, #-1132]	; 3710 <eval_string+0x12e0>
    3b78:	bl	0 <coda_set_error>
    3b7c:	ldr	r0, [sp, #112]	; 0x70
    3b80:	cmp	r0, #0
    3b84:	bne	3afc <eval_string+0x16cc>
    3b88:	b	3a20 <eval_string+0x15f0>
    3b8c:	ldr	r3, [pc, #-1096]	; 374c <eval_string+0x131c>
    3b90:	ldr	r2, [pc, #-1156]	; 3714 <eval_string+0x12e4>
    3b94:	ldr	r1, [pc, #-1108]	; 3748 <eval_string+0x1318>
    3b98:	ldr	r0, [pc, #-1116]	; 3744 <eval_string+0x1314>
    3b9c:	bl	0 <__assert_fail>
    3ba0:	ldr	r3, [pc, #-1116]	; 374c <eval_string+0x131c>
    3ba4:	ldr	r2, [pc, #-1172]	; 3718 <eval_string+0x12e8>
    3ba8:	ldr	r1, [pc, #-1128]	; 3748 <eval_string+0x1318>
    3bac:	ldr	r0, [pc, #-1136]	; 3744 <eval_string+0x1314>
    3bb0:	bl	0 <__assert_fail>
    3bb4:	ldr	r3, [pc, #-1136]	; 374c <eval_string+0x131c>
    3bb8:	ldr	r2, [pc, #-1188]	; 371c <eval_string+0x12ec>
    3bbc:	ldr	r1, [pc, #-1148]	; 3748 <eval_string+0x1318>
    3bc0:	ldr	r0, [pc, #-1156]	; 3744 <eval_string+0x1314>
    3bc4:	bl	0 <__assert_fail>
    3bc8:	ldr	r3, [pc, #-1156]	; 374c <eval_string+0x131c>
    3bcc:	ldr	r2, [pc, #-1204]	; 3720 <eval_string+0x12f0>
    3bd0:	ldr	r1, [pc, #-1168]	; 3748 <eval_string+0x1318>
    3bd4:	ldr	r0, [pc, #-1176]	; 3744 <eval_string+0x1314>
    3bd8:	bl	0 <__assert_fail>
    3bdc:	ldr	r3, [pc, #-1176]	; 374c <eval_string+0x131c>
    3be0:	ldr	r2, [pc, #-1220]	; 3724 <eval_string+0x12f4>
    3be4:	ldr	r1, [pc, #-1188]	; 3748 <eval_string+0x1318>
    3be8:	ldr	r0, [pc, #-1196]	; 3744 <eval_string+0x1314>
    3bec:	bl	0 <__assert_fail>
    3bf0:	ldr	r3, [pc, #-1196]	; 374c <eval_string+0x131c>
    3bf4:	ldr	r2, [pc, #-1236]	; 3728 <eval_string+0x12f8>
    3bf8:	ldr	r1, [pc, #-1208]	; 3748 <eval_string+0x1318>
    3bfc:	ldr	r0, [pc, #-1216]	; 3744 <eval_string+0x1314>
    3c00:	bl	0 <__assert_fail>
    3c04:	ldr	r3, [pc, #-1248]	; 372c <eval_string+0x12fc>
    3c08:	ldr	r2, [pc, #-1224]	; 3748 <eval_string+0x1318>
    3c0c:	ldr	r1, [pc, #-1252]	; 3730 <eval_string+0x1300>
    3c10:	mvn	r0, #0
    3c14:	bl	0 <coda_set_error>
    3c18:	b	2ec8 <eval_string+0xa98>
    3c1c:	ldr	r3, [pc, #-1240]	; 374c <eval_string+0x131c>
    3c20:	ldr	r2, [pc, #-1268]	; 3734 <eval_string+0x1304>
    3c24:	ldr	r1, [pc, #-1252]	; 3748 <eval_string+0x1318>
    3c28:	ldr	r0, [pc, #-1260]	; 3744 <eval_string+0x1314>
    3c2c:	bl	0 <__assert_fail>
    3c30:	ldr	r3, [pc, #-1260]	; 374c <eval_string+0x131c>
    3c34:	ldr	r2, [pc, #-1284]	; 3738 <eval_string+0x1308>
    3c38:	ldr	r1, [pc, #-1272]	; 3748 <eval_string+0x1318>
    3c3c:	ldr	r0, [pc, #-1280]	; 3744 <eval_string+0x1314>
    3c40:	bl	0 <__assert_fail>
    3c44:	ldr	r3, [pc, #-1280]	; 374c <eval_string+0x131c>
    3c48:	ldr	r2, [pc, #-1300]	; 373c <eval_string+0x130c>
    3c4c:	ldr	r1, [pc, #-1292]	; 3748 <eval_string+0x1318>
    3c50:	ldr	r0, [pc, #-1300]	; 3744 <eval_string+0x1314>
    3c54:	bl	0 <__assert_fail>
    3c58:	ldr	r3, [pc, #-1300]	; 374c <eval_string+0x131c>
    3c5c:	ldr	r2, [pc, #-1316]	; 3740 <eval_string+0x1310>
    3c60:	ldr	r1, [pc, #-1312]	; 3748 <eval_string+0x1318>
    3c64:	ldr	r0, [pc, #-1320]	; 3744 <eval_string+0x1314>
    3c68:	bl	0 <__assert_fail>

00003c6c <eval_integer>:
    3c6c:	ldr	r3, [r1]
    3c70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c74:	cmp	r3, #20
    3c78:	sub	sp, sp, #580	; 0x244
    3c7c:	beq	3df4 <eval_integer+0x188>
    3c80:	mov	sl, r2
    3c84:	mov	r5, r0
    3c88:	mov	r4, r1
    3c8c:	cmp	r3, #86	; 0x56
    3c90:	ldrls	pc, [pc, r3, lsl #2]
    3c94:	b	4c9c <eval_integer+0x1030>
    3c98:	.word	0x00004b2c
    3c9c:	.word	0x00004ae8
    3ca0:	.word	0x00004b60
    3ca4:	.word	0x00004648
    3ca8:	.word	0x00004c9c
    3cac:	.word	0x000049f4
    3cb0:	.word	0x00004c9c
    3cb4:	.word	0x00004910
    3cb8:	.word	0x00004ba4
    3cbc:	.word	0x00004114
    3cc0:	.word	0x00004c9c
    3cc4:	.word	0x000045f8
    3cc8:	.word	0x000045ac
    3ccc:	.word	0x00004424
    3cd0:	.word	0x000043c8
    3cd4:	.word	0x00004548
    3cd8:	.word	0x00004c9c
    3cdc:	.word	0x00004c9c
    3ce0:	.word	0x00004c9c
    3ce4:	.word	0x00004c9c
    3ce8:	.word	0x00004c9c
    3cec:	.word	0x00004c9c
    3cf0:	.word	0x00004c9c
    3cf4:	.word	0x00004498
    3cf8:	.word	0x00004084
    3cfc:	.word	0x00004c9c
    3d00:	.word	0x00004c9c
    3d04:	.word	0x00004060
    3d08:	.word	0x00004c9c
    3d0c:	.word	0x00004c9c
    3d10:	.word	0x00004c9c
    3d14:	.word	0x00004c9c
    3d18:	.word	0x00004c9c
    3d1c:	.word	0x00004c9c
    3d20:	.word	0x00004c9c
    3d24:	.word	0x00004c9c
    3d28:	.word	0x00004c9c
    3d2c:	.word	0x00004c9c
    3d30:	.word	0x00004c9c
    3d34:	.word	0x00004c9c
    3d38:	.word	0x00004c9c
    3d3c:	.word	0x00004c9c
    3d40:	.word	0x000047cc
    3d44:	.word	0x00004780
    3d48:	.word	0x00004764
    3d4c:	.word	0x00004734
    3d50:	.word	0x00004c9c
    3d54:	.word	0x00004c9c
    3d58:	.word	0x00004c9c
    3d5c:	.word	0x00004c9c
    3d60:	.word	0x00004898
    3d64:	.word	0x00004c9c
    3d68:	.word	0x00004c9c
    3d6c:	.word	0x00004c9c
    3d70:	.word	0x00004c9c
    3d74:	.word	0x00004c9c
    3d78:	.word	0x00004808
    3d7c:	.word	0x00004854
    3d80:	.word	0x000040cc
    3d84:	.word	0x00004304
    3d88:	.word	0x000042e0
    3d8c:	.word	0x00004c9c
    3d90:	.word	0x00004c9c
    3d94:	.word	0x00004274
    3d98:	.word	0x0000420c
    3d9c:	.word	0x00004384
    3da0:	.word	0x00004c9c
    3da4:	.word	0x00004c9c
    3da8:	.word	0x00004c9c
    3dac:	.word	0x00004c9c
    3db0:	.word	0x00004358
    3db4:	.word	0x00004c9c
    3db8:	.word	0x00004c9c
    3dbc:	.word	0x00004c9c
    3dc0:	.word	0x00004c9c
    3dc4:	.word	0x00004c9c
    3dc8:	.word	0x00004c9c
    3dcc:	.word	0x00004c9c
    3dd0:	.word	0x0000401c
    3dd4:	.word	0x00004c9c
    3dd8:	.word	0x00004c9c
    3ddc:	.word	0x00003f1c
    3de0:	.word	0x00004c9c
    3de4:	.word	0x00003ef0
    3de8:	.word	0x00004c9c
    3dec:	.word	0x00003e58
    3df0:	.word	0x00003e0c
    3df4:	ldrd	r0, [r1, #16]
    3df8:	mov	fp, #0
    3dfc:	strd	r0, [r2]
    3e00:	mov	r0, fp
    3e04:	add	sp, sp, #580	; 0x244
    3e08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e0c:	ldr	r3, [r1, #12]
    3e10:	ldr	r1, [r1, #16]
    3e14:	ldrb	r3, [r3]
    3e18:	sub	r2, r3, #39	; 0x27
    3e1c:	add	r3, r0, r3, lsl #3
    3e20:	sub	r8, r3, #304	; 0x130
    3e24:	add	r2, r0, r2, lsl #3
    3e28:	ldrd	r6, [r8, #-8]
    3e2c:	bl	3c6c <eval_integer>
    3e30:	cmp	r0, #0
    3e34:	bne	42d0 <eval_integer+0x664>
    3e38:	mov	r2, sl
    3e3c:	ldr	r1, [r4, #20]
    3e40:	mov	r0, r5
    3e44:	bl	3c6c <eval_integer>
    3e48:	subs	fp, r0, #0
    3e4c:	bne	42d0 <eval_integer+0x664>
    3e50:	strd	r6, [r8, #-8]
    3e54:	b	3e00 <eval_integer+0x194>
    3e58:	ldr	r7, [r0]
    3e5c:	mov	r2, #0
    3e60:	mov	r3, #0
    3e64:	cmp	r7, #0
    3e68:	strd	r2, [sp, #56]	; 0x38
    3e6c:	beq	5104 <eval_integer+0x1498>
    3e70:	ldr	r6, [r1, #16]
    3e74:	cmp	r6, #0
    3e78:	beq	4f94 <eval_integer+0x1328>
    3e7c:	ldr	r1, [r0, #560]	; 0x230
    3e80:	cmp	r1, #0
    3e84:	beq	3e9c <eval_integer+0x230>
    3e88:	ldr	r7, [r4, #12]
    3e8c:	mov	r0, r7
    3e90:	bl	0 <strcmp>
    3e94:	cmp	r0, #0
    3e98:	beq	5094 <eval_integer+0x1428>
    3e9c:	mov	r1, r6
    3ea0:	add	r2, sp, #56	; 0x38
    3ea4:	mov	r0, r5
    3ea8:	bl	3c6c <eval_integer>
    3eac:	cmp	r0, #0
    3eb0:	bne	42d0 <eval_integer+0x664>
    3eb4:	ldr	r7, [r5]
    3eb8:	ldr	r4, [r4, #12]
    3ebc:	ldr	r2, [sp, #56]	; 0x38
    3ec0:	mov	r1, r4
    3ec4:	ldr	r0, [r7]
    3ec8:	add	r3, sp, #24
    3ecc:	bl	0 <coda_product_variable_get_pointer>
    3ed0:	subs	fp, r0, #0
    3ed4:	bne	42d0 <eval_integer+0x664>
    3ed8:	ldr	r3, [sp, #24]
    3edc:	ldrd	r2, [r3]
    3ee0:	mov	r0, fp
    3ee4:	strd	r2, [sl]
    3ee8:	add	sp, sp, #580	; 0x244
    3eec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ef0:	ldr	r3, [r0]
    3ef4:	cmp	r3, #0
    3ef8:	beq	5168 <eval_integer+0x14fc>
    3efc:	ldr	r2, [r0, #560]	; 0x230
    3f00:	cmp	r2, #0
    3f04:	beq	4f00 <eval_integer+0x1294>
    3f08:	ldr	r1, [pc, #3776]	; 4dd0 <eval_integer+0x1164>
    3f0c:	mvn	r0, #400	; 0x190
    3f10:	bl	0 <coda_set_error>
    3f14:	mvn	fp, #0
    3f18:	b	3e00 <eval_integer+0x194>
    3f1c:	ldr	r2, [r0]
    3f20:	mov	r3, #0
    3f24:	cmp	r2, r3
    3f28:	str	r3, [sp, #24]
    3f2c:	beq	521c <eval_integer+0x15b0>
    3f30:	add	r8, r0, #8
    3f34:	add	r9, sp, #56	; 0x38
    3f38:	mov	r1, r8
    3f3c:	mov	r2, #520	; 0x208
    3f40:	mov	r0, r9
    3f44:	bl	0 <memcpy>
    3f48:	ldr	r1, [r4, #16]
    3f4c:	mov	r0, r5
    3f50:	bl	5294 <eval_cursor>
    3f54:	subs	r1, r0, #0
    3f58:	bne	42d0 <eval_integer+0x664>
    3f5c:	ldr	r2, [pc, #3696]	; 4dd4 <eval_integer+0x1168>
    3f60:	ldr	r3, [pc, #3696]	; 4dd8 <eval_integer+0x116c>
    3f64:	bl	0 <__aeabi_read_tp>
    3f68:	ldr	r2, [pc, r2]
    3f6c:	ldr	r3, [pc, r3]
    3f70:	mov	r6, r0
    3f74:	mov	r0, r8
    3f78:	ldr	r7, [r6, r2]
    3f7c:	str	r1, [r6, r3]
    3f80:	bl	0 <coda_cursor_goto_first_array_element>
    3f84:	subs	fp, r0, #0
    3f88:	ldrne	r3, [pc, #3660]	; 4ddc <eval_integer+0x1170>
    3f8c:	ldrne	r3, [pc, r3]
    3f90:	strne	r7, [r6, r3]
    3f94:	bne	42d0 <eval_integer+0x664>
    3f98:	mov	r3, #0
    3f9c:	mov	r2, #0
    3fa0:	add	r6, sp, #576	; 0x240
    3fa4:	strd	r2, [sl]
    3fa8:	ldr	r3, [r6, #-552]!	; 0xfffffdd8
    3fac:	cmp	r3, #0
    3fb0:	bne	3ff8 <eval_integer+0x38c>
    3fb4:	ldr	r3, [r4, #24]
    3fb8:	cmp	r3, #0
    3fbc:	beq	4cb0 <eval_integer+0x1044>
    3fc0:	mov	r2, r6
    3fc4:	ldr	r1, [r4, #20]
    3fc8:	mov	r0, r5
    3fcc:	bl	629c <eval_boolean>
    3fd0:	cmp	r0, #0
    3fd4:	bne	4dbc <eval_integer+0x1150>
    3fd8:	ldr	r3, [sp, #24]
    3fdc:	cmp	r3, #0
    3fe0:	beq	4cb0 <eval_integer+0x1044>
    3fe4:	mvn	r0, #0
    3fe8:	mvn	r1, #0
    3fec:	cmp	r3, #0
    3ff0:	strd	r0, [sl]
    3ff4:	beq	3fb4 <eval_integer+0x348>
    3ff8:	ldr	r3, [pc, #3552]	; 4de0 <eval_integer+0x1174>
    3ffc:	bl	0 <__aeabi_read_tp>
    4000:	mov	r1, r9
    4004:	ldr	r3, [pc, r3]
    4008:	mov	r2, #520	; 0x208
    400c:	str	r7, [r0, r3]
    4010:	mov	r0, r8
    4014:	bl	0 <memcpy>
    4018:	b	3e00 <eval_integer+0x194>
    401c:	add	r2, sp, #24
    4020:	ldr	r1, [r1, #16]
    4024:	bl	3c6c <eval_integer>
    4028:	cmp	r0, #0
    402c:	bne	42d0 <eval_integer+0x664>
    4030:	ldr	r1, [r4, #20]
    4034:	mov	r0, r5
    4038:	add	r2, sp, #56	; 0x38
    403c:	bl	3c6c <eval_integer>
    4040:	subs	fp, r0, #0
    4044:	bne	42d0 <eval_integer+0x664>
    4048:	ldrd	r2, [sp, #24]
    404c:	ldrd	r0, [sp, #56]	; 0x38
    4050:	subs	r2, r2, r0
    4054:	sbc	r3, r3, r1
    4058:	strd	r2, [sl]
    405c:	b	3e00 <eval_integer+0x194>
    4060:	ldr	r3, [r0]
    4064:	cmp	r3, #0
    4068:	beq	51e0 <eval_integer+0x1574>
    406c:	mov	r1, r2
    4070:	ldr	r0, [r3]
    4074:	bl	0 <coda_get_product_file_size>
    4078:	adds	fp, r0, #0
    407c:	mvnne	fp, #0
    4080:	b	3e00 <eval_integer+0x194>
    4084:	add	r2, sp, #24
    4088:	ldr	r1, [r1, #16]
    408c:	bl	3c6c <eval_integer>
    4090:	cmp	r0, #0
    4094:	bne	42d0 <eval_integer+0x664>
    4098:	ldr	r1, [r4, #20]
    409c:	mov	r0, r5
    40a0:	add	r2, sp, #56	; 0x38
    40a4:	bl	3c6c <eval_integer>
    40a8:	subs	fp, r0, #0
    40ac:	bne	42d0 <eval_integer+0x664>
    40b0:	ldrd	r2, [sp, #56]	; 0x38
    40b4:	orrs	r1, r2, r3
    40b8:	beq	50b8 <eval_integer+0x144c>
    40bc:	ldrd	r0, [sp, #24]
    40c0:	bl	0 <__aeabi_ldivmod>
    40c4:	strd	r0, [sl]
    40c8:	b	3e00 <eval_integer+0x194>
    40cc:	add	r2, sp, #24
    40d0:	ldr	r1, [r1, #16]
    40d4:	bl	3c6c <eval_integer>
    40d8:	cmp	r0, #0
    40dc:	bne	42d0 <eval_integer+0x664>
    40e0:	ldr	r1, [r4, #20]
    40e4:	mov	r0, r5
    40e8:	add	r2, sp, #56	; 0x38
    40ec:	bl	3c6c <eval_integer>
    40f0:	subs	fp, r0, #0
    40f4:	bne	42d0 <eval_integer+0x664>
    40f8:	ldrd	r2, [sp, #56]	; 0x38
    40fc:	orrs	r1, r2, r3
    4100:	beq	50a8 <eval_integer+0x143c>
    4104:	ldrd	r0, [sp, #24]
    4108:	bl	0 <__aeabi_ldivmod>
    410c:	strd	r2, [sl]
    4110:	b	3e00 <eval_integer+0x194>
    4114:	ldr	r3, [r0]
    4118:	cmp	r3, #0
    411c:	beq	5118 <eval_integer+0x14ac>
    4120:	add	r8, r0, #8
    4124:	add	r9, sp, #56	; 0x38
    4128:	mov	r1, r8
    412c:	mov	r2, #520	; 0x208
    4130:	mov	r0, r9
    4134:	bl	0 <memcpy>
    4138:	ldr	r1, [r4, #16]
    413c:	mov	r0, r5
    4140:	bl	5294 <eval_cursor>
    4144:	cmp	r0, #0
    4148:	bne	42d0 <eval_integer+0x664>
    414c:	add	r1, sp, #16
    4150:	mov	r0, r8
    4154:	bl	0 <coda_cursor_get_num_elements>
    4158:	subs	fp, r0, #0
    415c:	bne	42d0 <eval_integer+0x664>
    4160:	ldr	r1, [sp, #16]
    4164:	mov	r2, #0
    4168:	mov	r3, #0
    416c:	cmp	r1, #0
    4170:	strd	r2, [sl]
    4174:	ble	4cfc <eval_integer+0x1090>
    4178:	mov	r0, r8
    417c:	bl	0 <coda_cursor_goto_first_array_element>
    4180:	cmp	r0, #0
    4184:	bne	42d0 <eval_integer+0x664>
    4188:	ldr	r3, [sp, #16]
    418c:	cmp	r3, #0
    4190:	ble	4cfc <eval_integer+0x1090>
    4194:	mov	r6, fp
    4198:	add	r7, sp, #24
    419c:	b	41ac <eval_integer+0x540>
    41a0:	add	r6, r6, #1
    41a4:	cmp	r3, r6
    41a8:	ble	4cfc <eval_integer+0x1090>
    41ac:	mov	r2, r7
    41b0:	ldr	r1, [r4, #20]
    41b4:	mov	r0, r5
    41b8:	bl	3c6c <eval_integer>
    41bc:	cmp	r0, #0
    41c0:	bne	42d0 <eval_integer+0x664>
    41c4:	cmp	r6, #0
    41c8:	ldrd	r2, [sp, #24]
    41cc:	beq	41e0 <eval_integer+0x574>
    41d0:	ldrd	r0, [sl]
    41d4:	cmp	r2, r0
    41d8:	sbcs	r1, r3, r1
    41dc:	bge	41e4 <eval_integer+0x578>
    41e0:	strd	r2, [sl]
    41e4:	ldr	r3, [sp, #16]
    41e8:	sub	r2, r3, #1
    41ec:	cmp	r2, r6
    41f0:	ble	41a0 <eval_integer+0x534>
    41f4:	mov	r0, r8
    41f8:	bl	0 <coda_cursor_goto_next_array_element>
    41fc:	cmp	r0, #0
    4200:	bne	42d0 <eval_integer+0x664>
    4204:	ldr	r3, [sp, #16]
    4208:	b	41a0 <eval_integer+0x534>
    420c:	ldr	r3, [r0]
    4210:	cmp	r3, #0
    4214:	beq	51cc <eval_integer+0x1560>
    4218:	add	r6, r0, #8
    421c:	mov	r1, r6
    4220:	mov	r2, #520	; 0x208
    4224:	add	r0, sp, #56	; 0x38
    4228:	bl	0 <memcpy>
    422c:	ldr	r1, [r4, #16]
    4230:	mov	r0, r5
    4234:	bl	5294 <eval_cursor>
    4238:	cmp	r0, #0
    423c:	bne	42d0 <eval_integer+0x664>
    4240:	add	r1, sp, #24
    4244:	mov	r0, r6
    4248:	bl	0 <coda_cursor_get_num_elements>
    424c:	subs	fp, r0, #0
    4250:	bne	42d0 <eval_integer+0x664>
    4254:	mov	r2, #520	; 0x208
    4258:	add	r1, sp, #56	; 0x38
    425c:	mov	r0, r6
    4260:	bl	0 <memcpy>
    4264:	ldr	r2, [sp, #24]
    4268:	asr	r3, r2, #31
    426c:	strd	r2, [sl]
    4270:	b	3e00 <eval_integer+0x194>
    4274:	ldr	r3, [r0]
    4278:	cmp	r3, #0
    427c:	beq	512c <eval_integer+0x14c0>
    4280:	add	r6, r0, #8
    4284:	mov	r1, r6
    4288:	mov	r2, #520	; 0x208
    428c:	add	r0, sp, #56	; 0x38
    4290:	bl	0 <memcpy>
    4294:	ldr	r1, [r4, #16]
    4298:	mov	r0, r5
    429c:	bl	5294 <eval_cursor>
    42a0:	cmp	r0, #0
    42a4:	bne	42d0 <eval_integer+0x664>
    42a8:	add	r1, sp, #16
    42ac:	mov	r0, r6
    42b0:	bl	0 <coda_cursor_get_type>
    42b4:	cmp	r0, #0
    42b8:	bne	42d0 <eval_integer+0x664>
    42bc:	add	r1, sp, #24
    42c0:	ldr	r0, [sp, #16]
    42c4:	bl	0 <coda_type_get_array_num_dims>
    42c8:	subs	fp, r0, #0
    42cc:	beq	4254 <eval_integer+0x5e8>
    42d0:	mvn	fp, #0
    42d4:	mov	r0, fp
    42d8:	add	sp, sp, #580	; 0x244
    42dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    42e0:	ldr	r1, [r1, #16]
    42e4:	bl	3c6c <eval_integer>
    42e8:	subs	fp, r0, #0
    42ec:	bne	42d0 <eval_integer+0x664>
    42f0:	ldrd	r2, [sl]
    42f4:	rsbs	r2, r2, #0
    42f8:	rsc	r3, r3, #0
    42fc:	strd	r2, [sl]
    4300:	b	3e00 <eval_integer+0x194>
    4304:	add	r2, sp, #24
    4308:	ldr	r1, [r1, #16]
    430c:	bl	3c6c <eval_integer>
    4310:	cmp	r0, #0
    4314:	bne	42d0 <eval_integer+0x664>
    4318:	ldr	r1, [r4, #20]
    431c:	mov	r0, r5
    4320:	add	r2, sp, #56	; 0x38
    4324:	bl	3c6c <eval_integer>
    4328:	subs	fp, r0, #0
    432c:	bne	42d0 <eval_integer+0x664>
    4330:	ldr	r2, [sp, #24]
    4334:	ldr	r0, [sp, #60]	; 0x3c
    4338:	ldr	ip, [sp, #56]	; 0x38
    433c:	ldr	r1, [sp, #28]
    4340:	mul	r0, r2, r0
    4344:	umull	r2, r3, r2, ip
    4348:	mla	r1, ip, r1, r0
    434c:	add	r3, r1, r3
    4350:	strd	r2, [sl]
    4354:	b	3e00 <eval_integer+0x194>
    4358:	ldr	r3, [r0]
    435c:	cmp	r3, #0
    4360:	beq	5140 <eval_integer+0x14d4>
    4364:	ldr	r0, [r3]
    4368:	add	r1, sp, #56	; 0x38
    436c:	bl	0 <coda_get_product_version>
    4370:	subs	fp, r0, #0
    4374:	bne	42d0 <eval_integer+0x664>
    4378:	ldr	r2, [sp, #56]	; 0x38
    437c:	asr	r3, r2, #31
    4380:	b	3ee0 <eval_integer+0x274>
    4384:	add	r2, sp, #24
    4388:	ldr	r1, [r1, #16]
    438c:	bl	3c6c <eval_integer>
    4390:	cmp	r0, #0
    4394:	bne	42d0 <eval_integer+0x664>
    4398:	ldr	r1, [r4, #20]
    439c:	mov	r0, r5
    43a0:	add	r2, sp, #56	; 0x38
    43a4:	bl	3c6c <eval_integer>
    43a8:	subs	fp, r0, #0
    43ac:	bne	42d0 <eval_integer+0x664>
    43b0:	ldrd	r2, [sp, #24]
    43b4:	ldrd	r0, [sp, #56]	; 0x38
    43b8:	orr	r2, r2, r0
    43bc:	orr	r3, r3, r1
    43c0:	strd	r2, [sl]
    43c4:	b	3e00 <eval_integer+0x194>
    43c8:	ldr	r3, [r0]
    43cc:	cmp	r3, #0
    43d0:	beq	5230 <eval_integer+0x15c4>
    43d4:	add	r6, r0, #8
    43d8:	mov	r1, r6
    43dc:	mov	r2, #520	; 0x208
    43e0:	add	r0, sp, #56	; 0x38
    43e4:	bl	0 <memcpy>
    43e8:	ldr	r1, [r4, #16]
    43ec:	mov	r0, r5
    43f0:	bl	5294 <eval_cursor>
    43f4:	cmp	r0, #0
    43f8:	bne	42d0 <eval_integer+0x664>
    43fc:	mov	r1, sl
    4400:	mov	r0, r6
    4404:	bl	0 <coda_cursor_get_file_byte_offset>
    4408:	subs	fp, r0, #0
    440c:	bne	42d0 <eval_integer+0x664>
    4410:	add	r1, sp, #56	; 0x38
    4414:	mov	r0, r6
    4418:	mov	r2, #520	; 0x208
    441c:	bl	0 <memcpy>
    4420:	b	3e00 <eval_integer+0x194>
    4424:	ldr	r3, [r0]
    4428:	cmp	r3, #0
    442c:	beq	5280 <eval_integer+0x1614>
    4430:	add	r6, r0, #8
    4434:	mov	r1, r6
    4438:	mov	r2, #520	; 0x208
    443c:	add	r0, sp, #56	; 0x38
    4440:	bl	0 <memcpy>
    4444:	ldr	r1, [r4, #16]
    4448:	mov	r0, r5
    444c:	bl	5294 <eval_cursor>
    4450:	subs	r4, r0, #0
    4454:	bne	42d0 <eval_integer+0x664>
    4458:	bl	0 <coda_get_option_use_fast_size_expressions>
    445c:	mov	r5, r0
    4460:	mov	r0, r4
    4464:	bl	0 <coda_set_option_use_fast_size_expressions>
    4468:	mov	r1, sl
    446c:	mov	r0, r6
    4470:	bl	0 <coda_cursor_get_bit_size>
    4474:	subs	fp, r0, #0
    4478:	mov	r0, r5
    447c:	bne	45a4 <eval_integer+0x938>
    4480:	bl	0 <coda_set_option_use_fast_size_expressions>
    4484:	add	r1, sp, #56	; 0x38
    4488:	mov	r0, r6
    448c:	mov	r2, #520	; 0x208
    4490:	bl	0 <memcpy>
    4494:	b	3e00 <eval_integer+0x194>
    4498:	ldr	r3, [r0]
    449c:	cmp	r3, #0
    44a0:	beq	5208 <eval_integer+0x159c>
    44a4:	add	r6, r0, #8
    44a8:	mov	r1, r6
    44ac:	mov	r2, #520	; 0x208
    44b0:	add	r0, sp, #56	; 0x38
    44b4:	bl	0 <memcpy>
    44b8:	ldr	r1, [r4, #16]
    44bc:	mov	r0, r5
    44c0:	bl	5294 <eval_cursor>
    44c4:	cmp	r0, #0
    44c8:	bne	42d0 <eval_integer+0x664>
    44cc:	ldr	r1, [r4, #20]
    44d0:	mov	r0, r5
    44d4:	add	r2, sp, #16
    44d8:	bl	3c6c <eval_integer>
    44dc:	cmp	r0, #0
    44e0:	bne	42d0 <eval_integer+0x664>
    44e4:	add	r2, sp, #24
    44e8:	add	r1, sp, #12
    44ec:	mov	r0, r6
    44f0:	bl	0 <coda_cursor_get_array_dim>
    44f4:	subs	fp, r0, #0
    44f8:	bne	42d0 <eval_integer+0x664>
    44fc:	ldrd	r4, [sp, #16]
    4500:	cmp	r4, #0
    4504:	sbcs	r3, r5, #0
    4508:	blt	50d4 <eval_integer+0x1468>
    450c:	ldr	r3, [sp, #12]
    4510:	cmp	r4, r3
    4514:	asr	r1, r3, #31
    4518:	sbcs	r2, r5, r1
    451c:	bge	5070 <eval_integer+0x1404>
    4520:	mov	r2, #520	; 0x208
    4524:	add	r1, sp, #56	; 0x38
    4528:	mov	r0, r6
    452c:	bl	0 <memcpy>
    4530:	add	r3, sp, #576	; 0x240
    4534:	add	r4, r3, r4, lsl #2
    4538:	ldr	r2, [r4, #-552]	; 0xfffffdd8
    453c:	asr	r3, r2, #31
    4540:	strd	r2, [sl]
    4544:	b	3e00 <eval_integer+0x194>
    4548:	ldr	r3, [r0]
    454c:	cmp	r3, #0
    4550:	beq	526c <eval_integer+0x1600>
    4554:	add	r6, r0, #8
    4558:	mov	r1, r6
    455c:	mov	r2, #520	; 0x208
    4560:	add	r0, sp, #56	; 0x38
    4564:	bl	0 <memcpy>
    4568:	ldr	r1, [r4, #16]
    456c:	mov	r0, r5
    4570:	bl	5294 <eval_cursor>
    4574:	subs	r4, r0, #0
    4578:	bne	42d0 <eval_integer+0x664>
    457c:	bl	0 <coda_get_option_use_fast_size_expressions>
    4580:	mov	r5, r0
    4584:	mov	r0, r4
    4588:	bl	0 <coda_set_option_use_fast_size_expressions>
    458c:	mov	r1, sl
    4590:	mov	r0, r6
    4594:	bl	0 <coda_cursor_get_byte_size>
    4598:	subs	fp, r0, #0
    459c:	mov	r0, r5
    45a0:	beq	4480 <eval_integer+0x814>
    45a4:	bl	0 <coda_set_option_use_fast_size_expressions>
    45a8:	b	42d0 <eval_integer+0x664>
    45ac:	ldr	r3, [r0]
    45b0:	cmp	r3, #0
    45b4:	beq	5258 <eval_integer+0x15ec>
    45b8:	add	r6, r0, #8
    45bc:	mov	r1, r6
    45c0:	mov	r2, #520	; 0x208
    45c4:	add	r0, sp, #56	; 0x38
    45c8:	bl	0 <memcpy>
    45cc:	ldr	r1, [r4, #16]
    45d0:	mov	r0, r5
    45d4:	bl	5294 <eval_cursor>
    45d8:	cmp	r0, #0
    45dc:	bne	42d0 <eval_integer+0x664>
    45e0:	mov	r1, sl
    45e4:	mov	r0, r6
    45e8:	bl	0 <coda_cursor_get_file_bit_offset>
    45ec:	subs	fp, r0, #0
    45f0:	beq	4410 <eval_integer+0x7a4>
    45f4:	b	42d0 <eval_integer+0x664>
    45f8:	ldr	r3, [r0]
    45fc:	cmp	r3, #0
    4600:	beq	51a4 <eval_integer+0x1538>
    4604:	add	r6, r0, #8
    4608:	mov	r1, r6
    460c:	mov	r2, #520	; 0x208
    4610:	add	r0, sp, #56	; 0x38
    4614:	bl	0 <memcpy>
    4618:	ldr	r1, [r4, #16]
    461c:	mov	r0, r5
    4620:	bl	5294 <eval_cursor>
    4624:	cmp	r0, #0
    4628:	bne	42d0 <eval_integer+0x664>
    462c:	mov	r2, sl
    4630:	ldr	r1, [r4, #20]
    4634:	mov	r0, r5
    4638:	bl	3c6c <eval_integer>
    463c:	subs	fp, r0, #0
    4640:	beq	4410 <eval_integer+0x7a4>
    4644:	b	42d0 <eval_integer+0x664>
    4648:	ldr	r3, [r0]
    464c:	cmp	r3, #0
    4650:	beq	5244 <eval_integer+0x15d8>
    4654:	add	r8, r0, #8
    4658:	add	r9, sp, #56	; 0x38
    465c:	mov	r1, r8
    4660:	mov	r2, #520	; 0x208
    4664:	mov	r0, r9
    4668:	bl	0 <memcpy>
    466c:	ldr	r1, [r4, #16]
    4670:	mov	r0, r5
    4674:	bl	5294 <eval_cursor>
    4678:	cmp	r0, #0
    467c:	bne	42d0 <eval_integer+0x664>
    4680:	add	r1, sp, #16
    4684:	mov	r0, r8
    4688:	bl	0 <coda_cursor_get_num_elements>
    468c:	subs	fp, r0, #0
    4690:	bne	42d0 <eval_integer+0x664>
    4694:	ldr	r1, [sp, #16]
    4698:	mov	r2, #0
    469c:	mov	r3, #0
    46a0:	cmp	r1, #0
    46a4:	strd	r2, [sl]
    46a8:	ble	4cfc <eval_integer+0x1090>
    46ac:	mov	r0, r8
    46b0:	bl	0 <coda_cursor_goto_first_array_element>
    46b4:	cmp	r0, #0
    46b8:	bne	42d0 <eval_integer+0x664>
    46bc:	ldr	r3, [sp, #16]
    46c0:	cmp	r3, #0
    46c4:	ble	4cfc <eval_integer+0x1090>
    46c8:	mov	r6, fp
    46cc:	add	r7, sp, #24
    46d0:	b	46e0 <eval_integer+0xa74>
    46d4:	add	r6, r6, #1
    46d8:	cmp	ip, r6
    46dc:	ble	4cfc <eval_integer+0x1090>
    46e0:	mov	r2, r7
    46e4:	ldr	r1, [r4, #20]
    46e8:	mov	r0, r5
    46ec:	bl	3c6c <eval_integer>
    46f0:	cmp	r0, #0
    46f4:	bne	42d0 <eval_integer+0x664>
    46f8:	ldrd	r0, [sl]
    46fc:	ldrd	r2, [sp, #24]
    4700:	ldr	ip, [sp, #16]
    4704:	adds	r2, r2, r0
    4708:	adc	r3, r3, r1
    470c:	sub	r1, ip, #1
    4710:	cmp	r1, r6
    4714:	strd	r2, [sl]
    4718:	ble	46d4 <eval_integer+0xa68>
    471c:	mov	r0, r8
    4720:	bl	0 <coda_cursor_goto_next_array_element>
    4724:	cmp	r0, #0
    4728:	bne	42d0 <eval_integer+0x664>
    472c:	ldr	ip, [sp, #16]
    4730:	b	46d4 <eval_integer+0xa68>
    4734:	ldr	r4, [r1, #16]
    4738:	ldr	r3, [r4, #4]
    473c:	cmp	r3, #4
    4740:	beq	4e68 <eval_integer+0x11fc>
    4744:	cmp	r3, #0
    4748:	bne	4d64 <eval_integer+0x10f8>
    474c:	mov	r1, r4
    4750:	add	r2, sp, #56	; 0x38
    4754:	bl	629c <eval_boolean>
    4758:	subs	fp, r0, #0
    475c:	beq	4378 <eval_integer+0x70c>
    4760:	b	42d0 <eval_integer+0x664>
    4764:	ldr	r3, [r1, #12]
    4768:	mov	fp, #0
    476c:	ldrb	r3, [r3]
    4770:	sub	r3, r3, #39	; 0x27
    4774:	lsl	r3, r3, #3
    4778:	ldrd	r2, [r3, r0]
    477c:	b	3ee0 <eval_integer+0x274>
    4780:	ldr	r3, [r0]
    4784:	cmp	r3, #0
    4788:	beq	51b8 <eval_integer+0x154c>
    478c:	add	r6, r0, #8
    4790:	mov	r1, r6
    4794:	mov	r2, #520	; 0x208
    4798:	add	r0, sp, #56	; 0x38
    479c:	bl	0 <memcpy>
    47a0:	ldr	r1, [r4, #16]
    47a4:	mov	r0, r5
    47a8:	bl	5294 <eval_cursor>
    47ac:	cmp	r0, #0
    47b0:	bne	42d0 <eval_integer+0x664>
    47b4:	add	r1, sp, #24
    47b8:	mov	r0, r6
    47bc:	bl	0 <coda_cursor_get_index>
    47c0:	subs	fp, r0, #0
    47c4:	beq	4254 <eval_integer+0x5e8>
    47c8:	b	42d0 <eval_integer+0x664>
    47cc:	add	r2, sp, #56	; 0x38
    47d0:	ldr	r1, [r1, #16]
    47d4:	bl	629c <eval_boolean>
    47d8:	subs	fp, r0, #0
    47dc:	bne	42d0 <eval_integer+0x664>
    47e0:	ldr	r3, [sp, #56]	; 0x38
    47e4:	mov	r2, sl
    47e8:	cmp	r3, #0
    47ec:	beq	4d4c <eval_integer+0x10e0>
    47f0:	ldr	r1, [r4, #20]
    47f4:	mov	r0, r5
    47f8:	bl	3c6c <eval_integer>
    47fc:	cmp	r0, #0
    4800:	beq	3e00 <eval_integer+0x194>
    4804:	b	42d0 <eval_integer+0x664>
    4808:	add	r2, sp, #24
    480c:	ldr	r1, [r1, #16]
    4810:	bl	3c6c <eval_integer>
    4814:	cmp	r0, #0
    4818:	bne	42d0 <eval_integer+0x664>
    481c:	ldr	r1, [r4, #20]
    4820:	mov	r0, r5
    4824:	add	r2, sp, #56	; 0x38
    4828:	bl	3c6c <eval_integer>
    482c:	subs	fp, r0, #0
    4830:	bne	42d0 <eval_integer+0x664>
    4834:	ldrd	r2, [sp, #56]	; 0x38
    4838:	ldrd	r0, [sp, #24]
    483c:	cmp	r2, r0
    4840:	sbcs	ip, r3, r1
    4844:	bge	3ee0 <eval_integer+0x274>
    4848:	mov	r2, r0
    484c:	mov	r3, r1
    4850:	b	3ee0 <eval_integer+0x274>
    4854:	add	r2, sp, #24
    4858:	ldr	r1, [r1, #16]
    485c:	bl	3c6c <eval_integer>
    4860:	cmp	r0, #0
    4864:	bne	42d0 <eval_integer+0x664>
    4868:	ldr	r1, [r4, #20]
    486c:	mov	r0, r5
    4870:	add	r2, sp, #56	; 0x38
    4874:	bl	3c6c <eval_integer>
    4878:	subs	fp, r0, #0
    487c:	bne	42d0 <eval_integer+0x664>
    4880:	ldrd	r2, [sp, #56]	; 0x38
    4884:	ldrd	r0, [sp, #24]
    4888:	cmp	r0, r2
    488c:	sbcs	ip, r1, r3
    4890:	bge	3ee0 <eval_integer+0x274>
    4894:	b	4848 <eval_integer+0xbdc>
    4898:	ldr	r4, [r1, #16]
    489c:	ldr	r3, [r4, #4]
    48a0:	cmp	r3, #4
    48a4:	bne	4d10 <eval_integer+0x10a4>
    48a8:	ldr	r3, [r0]
    48ac:	cmp	r3, #0
    48b0:	beq	517c <eval_integer+0x1510>
    48b4:	add	r6, r0, #8
    48b8:	mov	r1, r6
    48bc:	mov	r2, #520	; 0x208
    48c0:	add	r0, sp, #56	; 0x38
    48c4:	bl	0 <memcpy>
    48c8:	mov	r1, r4
    48cc:	mov	r0, r5
    48d0:	bl	5294 <eval_cursor>
    48d4:	cmp	r0, #0
    48d8:	bne	42d0 <eval_integer+0x664>
    48dc:	add	r1, sp, #24
    48e0:	mov	r0, r6
    48e4:	bl	0 <coda_cursor_get_string_length>
    48e8:	subs	fp, r0, #0
    48ec:	bne	42d0 <eval_integer+0x664>
    48f0:	ldr	r2, [sp, #24]
    48f4:	add	r1, sp, #56	; 0x38
    48f8:	mov	r0, r6
    48fc:	asr	r3, r2, #31
    4900:	strd	r2, [sl]
    4904:	mov	r2, #520	; 0x208
    4908:	bl	0 <memcpy>
    490c:	b	3e00 <eval_integer+0x194>
    4910:	ldr	r3, [r0]
    4914:	cmp	r3, #0
    4918:	beq	5154 <eval_integer+0x14e8>
    491c:	add	r8, r0, #8
    4920:	add	r9, sp, #56	; 0x38
    4924:	mov	r1, r8
    4928:	mov	r2, #520	; 0x208
    492c:	mov	r0, r9
    4930:	bl	0 <memcpy>
    4934:	ldr	r1, [r4, #16]
    4938:	mov	r0, r5
    493c:	bl	5294 <eval_cursor>
    4940:	cmp	r0, #0
    4944:	bne	42d0 <eval_integer+0x664>
    4948:	add	r1, sp, #16
    494c:	mov	r0, r8
    4950:	bl	0 <coda_cursor_get_num_elements>
    4954:	subs	fp, r0, #0
    4958:	bne	42d0 <eval_integer+0x664>
    495c:	ldr	r1, [sp, #16]
    4960:	mov	r2, #0
    4964:	mov	r3, #0
    4968:	cmp	r1, #0
    496c:	strd	r2, [sl]
    4970:	ble	4fe0 <eval_integer+0x1374>
    4974:	mov	r0, r8
    4978:	bl	0 <coda_cursor_goto_first_array_element>
    497c:	cmp	r0, #0
    4980:	bne	42d0 <eval_integer+0x664>
    4984:	ldr	r3, [sp, #16]
    4988:	cmp	r3, #0
    498c:	ble	4fe0 <eval_integer+0x1374>
    4990:	mov	r6, fp
    4994:	add	r7, sp, #24
    4998:	b	49a8 <eval_integer+0xd3c>
    499c:	add	r6, r6, #1
    49a0:	cmp	r6, r3
    49a4:	bge	4fe0 <eval_integer+0x1374>
    49a8:	mov	r2, r7
    49ac:	ldr	r1, [r4, #20]
    49b0:	mov	r0, r5
    49b4:	bl	629c <eval_boolean>
    49b8:	cmp	r0, #0
    49bc:	bne	42d0 <eval_integer+0x664>
    49c0:	ldr	r3, [sp, #24]
    49c4:	cmp	r3, #0
    49c8:	bne	504c <eval_integer+0x13e0>
    49cc:	ldr	r3, [sp, #16]
    49d0:	sub	r2, r3, #1
    49d4:	cmp	r2, r6
    49d8:	ble	499c <eval_integer+0xd30>
    49dc:	mov	r0, r8
    49e0:	bl	0 <coda_cursor_goto_next_array_element>
    49e4:	cmp	r0, #0
    49e8:	bne	42d0 <eval_integer+0x664>
    49ec:	ldr	r3, [sp, #16]
    49f0:	b	499c <eval_integer+0xd30>
    49f4:	ldr	r3, [r0]
    49f8:	cmp	r3, #0
    49fc:	beq	5190 <eval_integer+0x1524>
    4a00:	add	r8, r0, #8
    4a04:	add	r9, sp, #56	; 0x38
    4a08:	mov	r1, r8
    4a0c:	mov	r2, #520	; 0x208
    4a10:	mov	r0, r9
    4a14:	bl	0 <memcpy>
    4a18:	ldr	r1, [r4, #16]
    4a1c:	mov	r0, r5
    4a20:	bl	5294 <eval_cursor>
    4a24:	cmp	r0, #0
    4a28:	bne	42d0 <eval_integer+0x664>
    4a2c:	add	r1, sp, #16
    4a30:	mov	r0, r8
    4a34:	bl	0 <coda_cursor_get_num_elements>
    4a38:	subs	fp, r0, #0
    4a3c:	bne	42d0 <eval_integer+0x664>
    4a40:	ldr	r1, [sp, #16]
    4a44:	mov	r2, #0
    4a48:	mov	r3, #0
    4a4c:	cmp	r1, #0
    4a50:	strd	r2, [sl]
    4a54:	ble	4cfc <eval_integer+0x1090>
    4a58:	mov	r0, r8
    4a5c:	bl	0 <coda_cursor_goto_first_array_element>
    4a60:	cmp	r0, #0
    4a64:	bne	42d0 <eval_integer+0x664>
    4a68:	ldr	r3, [sp, #16]
    4a6c:	cmp	r3, #0
    4a70:	ble	4cfc <eval_integer+0x1090>
    4a74:	mov	r6, fp
    4a78:	add	r7, sp, #24
    4a7c:	b	4a8c <eval_integer+0xe20>
    4a80:	add	r6, r6, #1
    4a84:	cmp	r6, r3
    4a88:	bge	4cfc <eval_integer+0x1090>
    4a8c:	mov	r2, r7
    4a90:	ldr	r1, [r4, #20]
    4a94:	mov	r0, r5
    4a98:	bl	629c <eval_boolean>
    4a9c:	cmp	r0, #0
    4aa0:	bne	42d0 <eval_integer+0x664>
    4aa4:	ldr	r3, [sp, #24]
    4aa8:	cmp	r3, #0
    4aac:	beq	4ac0 <eval_integer+0xe54>
    4ab0:	ldrd	r2, [sl]
    4ab4:	adds	r2, r2, #1
    4ab8:	adc	r3, r3, #0
    4abc:	strd	r2, [sl]
    4ac0:	ldr	r3, [sp, #16]
    4ac4:	sub	r2, r3, #1
    4ac8:	cmp	r2, r6
    4acc:	ble	4a80 <eval_integer+0xe14>
    4ad0:	mov	r0, r8
    4ad4:	bl	0 <coda_cursor_goto_next_array_element>
    4ad8:	cmp	r0, #0
    4adc:	bne	42d0 <eval_integer+0x664>
    4ae0:	ldr	r3, [sp, #16]
    4ae4:	b	4a80 <eval_integer+0xe14>
    4ae8:	add	r2, sp, #24
    4aec:	ldr	r1, [r1, #16]
    4af0:	bl	3c6c <eval_integer>
    4af4:	cmp	r0, #0
    4af8:	bne	42d0 <eval_integer+0x664>
    4afc:	ldr	r1, [r4, #20]
    4b00:	mov	r0, r5
    4b04:	add	r2, sp, #56	; 0x38
    4b08:	bl	3c6c <eval_integer>
    4b0c:	subs	fp, r0, #0
    4b10:	bne	42d0 <eval_integer+0x664>
    4b14:	ldrd	r2, [sp, #24]
    4b18:	ldrd	r0, [sp, #56]	; 0x38
    4b1c:	adds	r2, r2, r0
    4b20:	adc	r3, r3, r1
    4b24:	strd	r2, [sl]
    4b28:	b	3e00 <eval_integer+0x194>
    4b2c:	ldr	r1, [r1, #16]
    4b30:	bl	3c6c <eval_integer>
    4b34:	subs	fp, r0, #0
    4b38:	bne	42d0 <eval_integer+0x664>
    4b3c:	ldr	ip, [sl, #4]
    4b40:	ldrd	r2, [sl]
    4b44:	asr	r0, ip, #31
    4b48:	eor	r2, r2, r0
    4b4c:	subs	r2, r2, r0
    4b50:	eor	r3, r3, r0
    4b54:	sbc	r3, r3, r0
    4b58:	strd	r2, [sl]
    4b5c:	b	3e00 <eval_integer+0x194>
    4b60:	add	r2, sp, #24
    4b64:	ldr	r1, [r1, #16]
    4b68:	bl	3c6c <eval_integer>
    4b6c:	cmp	r0, #0
    4b70:	bne	42d0 <eval_integer+0x664>
    4b74:	ldr	r1, [r4, #20]
    4b78:	mov	r0, r5
    4b7c:	add	r2, sp, #56	; 0x38
    4b80:	bl	3c6c <eval_integer>
    4b84:	subs	fp, r0, #0
    4b88:	bne	42d0 <eval_integer+0x664>
    4b8c:	ldrd	r2, [sp, #24]
    4b90:	ldrd	r0, [sp, #56]	; 0x38
    4b94:	and	r2, r2, r0
    4b98:	and	r3, r3, r1
    4b9c:	strd	r2, [sl]
    4ba0:	b	3e00 <eval_integer+0x194>
    4ba4:	ldr	r3, [r0]
    4ba8:	cmp	r3, #0
    4bac:	beq	50f0 <eval_integer+0x1484>
    4bb0:	add	r8, r0, #8
    4bb4:	add	r9, sp, #56	; 0x38
    4bb8:	mov	r1, r8
    4bbc:	mov	r2, #520	; 0x208
    4bc0:	mov	r0, r9
    4bc4:	bl	0 <memcpy>
    4bc8:	ldr	r1, [r4, #16]
    4bcc:	mov	r0, r5
    4bd0:	bl	5294 <eval_cursor>
    4bd4:	cmp	r0, #0
    4bd8:	bne	42d0 <eval_integer+0x664>
    4bdc:	add	r1, sp, #16
    4be0:	mov	r0, r8
    4be4:	bl	0 <coda_cursor_get_num_elements>
    4be8:	subs	fp, r0, #0
    4bec:	bne	42d0 <eval_integer+0x664>
    4bf0:	ldr	r1, [sp, #16]
    4bf4:	mov	r2, #0
    4bf8:	mov	r3, #0
    4bfc:	cmp	r1, #0
    4c00:	strd	r2, [sl]
    4c04:	ble	4cfc <eval_integer+0x1090>
    4c08:	mov	r0, r8
    4c0c:	bl	0 <coda_cursor_goto_first_array_element>
    4c10:	cmp	r0, #0
    4c14:	bne	42d0 <eval_integer+0x664>
    4c18:	ldr	r3, [sp, #16]
    4c1c:	cmp	r3, #0
    4c20:	ble	4cfc <eval_integer+0x1090>
    4c24:	mov	r6, fp
    4c28:	add	r7, sp, #24
    4c2c:	b	4c3c <eval_integer+0xfd0>
    4c30:	add	r6, r6, #1
    4c34:	cmp	r3, r6
    4c38:	ble	4cfc <eval_integer+0x1090>
    4c3c:	mov	r2, r7
    4c40:	ldr	r1, [r4, #20]
    4c44:	mov	r0, r5
    4c48:	bl	3c6c <eval_integer>
    4c4c:	cmp	r0, #0
    4c50:	bne	42d0 <eval_integer+0x664>
    4c54:	cmp	r6, #0
    4c58:	ldrd	r2, [sp, #24]
    4c5c:	beq	4c70 <eval_integer+0x1004>
    4c60:	ldrd	r0, [sl]
    4c64:	cmp	r0, r2
    4c68:	sbcs	r1, r1, r3
    4c6c:	bge	4c74 <eval_integer+0x1008>
    4c70:	strd	r2, [sl]
    4c74:	ldr	r3, [sp, #16]
    4c78:	sub	r2, r3, #1
    4c7c:	cmp	r2, r6
    4c80:	ble	4c30 <eval_integer+0xfc4>
    4c84:	mov	r0, r8
    4c88:	bl	0 <coda_cursor_goto_next_array_element>
    4c8c:	cmp	r0, #0
    4c90:	bne	42d0 <eval_integer+0x664>
    4c94:	ldr	r3, [sp, #16]
    4c98:	b	4c30 <eval_integer+0xfc4>
    4c9c:	ldr	r3, [pc, #436]	; 4e58 <eval_integer+0x11ec>
    4ca0:	ldr	r2, [pc, #316]	; 4de4 <eval_integer+0x1178>
    4ca4:	ldr	r1, [pc, #436]	; 4e60 <eval_integer+0x11f4>
    4ca8:	ldr	r0, [pc, #312]	; 4de8 <eval_integer+0x117c>
    4cac:	bl	0 <__assert_fail>
    4cb0:	mov	r2, r6
    4cb4:	ldr	r1, [r4, #20]
    4cb8:	mov	r0, r5
    4cbc:	bl	629c <eval_boolean>
    4cc0:	cmp	r0, #0
    4cc4:	bne	4fcc <eval_integer+0x1360>
    4cc8:	ldr	r3, [sp, #24]
    4ccc:	cmp	r3, #0
    4cd0:	bne	3fac <eval_integer+0x340>
    4cd4:	ldrd	r2, [sl]
    4cd8:	mov	r0, r8
    4cdc:	adds	r2, r2, #1
    4ce0:	adc	r3, r3, #0
    4ce4:	strd	r2, [sl]
    4ce8:	bl	0 <coda_cursor_goto_next_array_element>
    4cec:	cmp	r0, #0
    4cf0:	bne	5020 <eval_integer+0x13b4>
    4cf4:	ldr	r3, [sp, #24]
    4cf8:	b	3fac <eval_integer+0x340>
    4cfc:	mov	r1, r9
    4d00:	mov	r0, r8
    4d04:	mov	r2, #520	; 0x208
    4d08:	bl	0 <memcpy>
    4d0c:	b	3e00 <eval_integer+0x194>
    4d10:	add	r3, sp, #56	; 0x38
    4d14:	str	r3, [sp]
    4d18:	mov	r1, r4
    4d1c:	add	r3, sp, #24
    4d20:	add	r2, sp, #16
    4d24:	bl	2430 <eval_string>
    4d28:	subs	fp, r0, #0
    4d2c:	bne	42d0 <eval_integer+0x664>
    4d30:	ldr	r2, [sp, #24]
    4d34:	cmp	r2, #0
    4d38:	ble	437c <eval_integer+0x710>
    4d3c:	ldr	r0, [sp, #56]	; 0x38
    4d40:	bl	0 <free>
    4d44:	ldr	r2, [sp, #24]
    4d48:	b	437c <eval_integer+0x710>
    4d4c:	ldr	r1, [r4, #24]
    4d50:	mov	r0, r5
    4d54:	bl	3c6c <eval_integer>
    4d58:	cmp	r0, #0
    4d5c:	beq	3e00 <eval_integer+0x194>
    4d60:	b	42d0 <eval_integer+0x664>
    4d64:	add	r3, sp, #56	; 0x38
    4d68:	str	r3, [sp]
    4d6c:	mov	r1, r4
    4d70:	add	r3, sp, #24
    4d74:	add	r2, sp, #16
    4d78:	bl	2430 <eval_string>
    4d7c:	subs	fp, r0, #0
    4d80:	bne	42d0 <eval_integer+0x664>
    4d84:	ldr	r1, [sp, #24]
    4d88:	cmp	r1, #0
    4d8c:	beq	5084 <eval_integer+0x1418>
    4d90:	ldr	r3, [sp, #16]
    4d94:	ldr	r0, [sp, #56]	; 0x38
    4d98:	mov	r2, sl
    4d9c:	add	r0, r0, r3
    4da0:	mov	r3, fp
    4da4:	bl	0 <coda_ascii_parse_int64>
    4da8:	cmp	r0, #0
    4dac:	ldr	r0, [sp, #56]	; 0x38
    4db0:	blt	50e8 <eval_integer+0x147c>
    4db4:	bl	0 <free>
    4db8:	b	3e00 <eval_integer+0x194>
    4dbc:	ldr	r3, [pc, #40]	; 4dec <eval_integer+0x1180>
    4dc0:	bl	0 <__aeabi_read_tp>
    4dc4:	ldr	r3, [pc, r3]
    4dc8:	str	r7, [r0, r3]
    4dcc:	b	42d0 <eval_integer+0x664>
    4dd0:	.word	0x00000ae0
    4dd4:	.word	0x00000e64
    4dd8:	.word	0x00000e64
    4ddc:	.word	0x00000e48
    4de0:	.word	0x00000dd4
    4de4:	.word	0x00000b07
    4de8:	.word	0x00000a0c
    4dec:	.word	0x00000020
    4df0:	.word	0xfffffe14
    4df4:	.word	0xfffffdc4
    4df8:	.word	0x00000aa8
    4dfc:	.word	0x00000a10
    4e00:	.word	0x00000b1c
    4e04:	.word	0x00000a68
    4e08:	.word	0x00000a4c
    4e0c:	.word	0x00000a84
    4e10:	.word	0x000008ef
    4e14:	.word	0x00000ac9
    4e18:	.word	0x0000091f
    4e1c:	.word	0x00000a03
    4e20:	.word	0x00000a81
    4e24:	.word	0x0000094f
    4e28:	.word	0x00000aa4
    4e2c:	.word	0x000009bb
    4e30:	.word	0x00000892
    4e34:	.word	0x00000ae8
    4e38:	.word	0x00000a8e
    4e3c:	.word	0x00000a1a
    4e40:	.word	0x00000a77
    4e44:	.word	0x00000983
    4e48:	.word	0x00000a69
    4e4c:	.word	0x000008c2
    4e50:	.word	0x00000a58
    4e54:	.word	0x00000a43
    4e58:	.word	0x00000020
    4e5c:	.word	0x00000a2d
    4e60:	.word	0x000005b8
    4e64:	.word	0x000007c4
    4e68:	ldr	r3, [r0]
    4e6c:	cmp	r3, #0
    4e70:	beq	51f4 <eval_integer+0x1588>
    4e74:	add	r8, r0, #8
    4e78:	add	r9, sp, #56	; 0x38
    4e7c:	mov	r1, r8
    4e80:	mov	r2, #520	; 0x208
    4e84:	mov	r0, r9
    4e88:	bl	0 <memcpy>
    4e8c:	mov	r0, r5
    4e90:	mov	r1, r4
    4e94:	bl	5294 <eval_cursor>
    4e98:	subs	r5, r0, #0
    4e9c:	bne	42d0 <eval_integer+0x664>
    4ea0:	bl	0 <coda_get_option_perform_conversions>
    4ea4:	mov	r4, r0
    4ea8:	mov	r0, r5
    4eac:	bl	0 <coda_set_option_perform_conversions>
    4eb0:	add	r1, sp, #16
    4eb4:	mov	r0, r8
    4eb8:	bl	0 <coda_cursor_get_read_type>
    4ebc:	subs	fp, r0, #0
    4ec0:	bne	50c8 <eval_integer+0x145c>
    4ec4:	ldr	r3, [sp, #16]
    4ec8:	cmp	r3, #7
    4ecc:	beq	5000 <eval_integer+0x1394>
    4ed0:	mov	r1, sl
    4ed4:	mov	r0, r8
    4ed8:	bl	0 <coda_cursor_read_int64>
    4edc:	cmp	r0, #0
    4ee0:	bne	50c8 <eval_integer+0x145c>
    4ee4:	mov	r0, r4
    4ee8:	bl	0 <coda_set_option_perform_conversions>
    4eec:	mov	r1, r9
    4ef0:	mov	r0, r8
    4ef4:	mov	r2, #520	; 0x208
    4ef8:	bl	0 <memcpy>
    4efc:	b	3e00 <eval_integer+0x194>
    4f00:	ldr	r0, [r3]
    4f04:	add	r2, sp, #24
    4f08:	ldr	r1, [r1, #12]
    4f0c:	bl	0 <coda_product_variable_get_size>
    4f10:	subs	r3, r0, #0
    4f14:	mov	fp, r3
    4f18:	bne	42d0 <eval_integer+0x664>
    4f1c:	ldr	r2, [sp, #24]
    4f20:	ldr	r3, [r4, #12]
    4f24:	cmp	r2, #0
    4f28:	str	r3, [r5, #560]	; 0x230
    4f2c:	ble	5034 <eval_integer+0x13c8>
    4f30:	mov	r6, #0
    4f34:	mov	r7, #0
    4f38:	add	r9, sp, #56	; 0x38
    4f3c:	add	r8, r5, #560	; 0x230
    4f40:	b	4f5c <eval_integer+0x12f0>
    4f44:	ldr	r2, [sp, #24]
    4f48:	add	r3, r6, #1
    4f4c:	adds	r6, r6, #1
    4f50:	adc	r7, r7, #0
    4f54:	cmp	r2, r3
    4f58:	ble	5034 <eval_integer+0x13c8>
    4f5c:	strd	r6, [r8, #-8]
    4f60:	mov	r2, r9
    4f64:	ldr	r1, [r4, #16]
    4f68:	mov	r0, r5
    4f6c:	bl	629c <eval_boolean>
    4f70:	cmp	r0, #0
    4f74:	bne	42d0 <eval_integer+0x664>
    4f78:	ldr	r3, [sp, #56]	; 0x38
    4f7c:	cmp	r3, #0
    4f80:	beq	4f44 <eval_integer+0x12d8>
    4f84:	strd	r6, [sl]
    4f88:	mov	fp, r0
    4f8c:	str	r0, [r5, #560]	; 0x230
    4f90:	b	3e00 <eval_integer+0x194>
    4f94:	ldr	r0, [r0, #560]	; 0x230
    4f98:	ldr	r4, [r1, #12]
    4f9c:	cmp	r0, #0
    4fa0:	moveq	r2, r0
    4fa4:	beq	3ec0 <eval_integer+0x254>
    4fa8:	mov	r1, r4
    4fac:	bl	0 <strcmp>
    4fb0:	cmp	r0, #0
    4fb4:	movne	r2, r6
    4fb8:	ldreq	r2, [r5, #552]	; 0x228
    4fbc:	ldreq	r3, [r5, #556]	; 0x22c
    4fc0:	streq	r2, [sp, #56]	; 0x38
    4fc4:	streq	r3, [sp, #60]	; 0x3c
    4fc8:	b	3ec0 <eval_integer+0x254>
    4fcc:	ldr	r3, [pc, #-484]	; 4df0 <eval_integer+0x1184>
    4fd0:	bl	0 <__aeabi_read_tp>
    4fd4:	ldr	r3, [pc, r3]
    4fd8:	str	r7, [r0, r3]
    4fdc:	b	42d0 <eval_integer+0x664>
    4fe0:	mvn	r2, #0
    4fe4:	mvn	r3, #0
    4fe8:	mov	r1, r9
    4fec:	strd	r2, [sl]
    4ff0:	mov	r0, r8
    4ff4:	mov	r2, #520	; 0x208
    4ff8:	bl	0 <memcpy>
    4ffc:	b	3e00 <eval_integer+0x194>
    5000:	add	r1, sp, #24
    5004:	mov	r0, r8
    5008:	bl	0 <coda_cursor_read_uint64>
    500c:	cmp	r0, #0
    5010:	bne	50c8 <eval_integer+0x145c>
    5014:	ldrd	r2, [sp, #24]
    5018:	strd	r2, [sl]
    501c:	b	4ee4 <eval_integer+0x1278>
    5020:	ldr	r3, [pc, #-564]	; 4df4 <eval_integer+0x1188>
    5024:	bl	0 <__aeabi_read_tp>
    5028:	ldr	r3, [pc, r3]
    502c:	str	r7, [r0, r3]
    5030:	b	42d0 <eval_integer+0x664>
    5034:	mvn	r0, #0
    5038:	mvn	r1, #0
    503c:	mov	r3, #0
    5040:	strd	r0, [sl]
    5044:	str	r3, [r5, #560]	; 0x230
    5048:	b	3e00 <eval_integer+0x194>
    504c:	asr	r7, r6, #31
    5050:	mov	ip, r0
    5054:	mov	r1, r9
    5058:	mov	r0, r8
    505c:	strd	r6, [sl]
    5060:	mov	r2, #520	; 0x208
    5064:	mov	fp, ip
    5068:	bl	0 <memcpy>
    506c:	b	3e00 <eval_integer+0x194>
    5070:	mov	r2, r4
    5074:	ldr	r1, [pc, #-644]	; 4df8 <eval_integer+0x118c>
    5078:	mvn	r0, #400	; 0x190
    507c:	bl	0 <coda_set_error>
    5080:	b	42d0 <eval_integer+0x664>
    5084:	ldr	r1, [pc, #-656]	; 4dfc <eval_integer+0x1190>
    5088:	mvn	r0, #102	; 0x66
    508c:	bl	0 <coda_set_error>
    5090:	b	42d0 <eval_integer+0x664>
    5094:	mov	r2, r7
    5098:	ldr	r1, [pc, #-672]	; 4e00 <eval_integer+0x1194>
    509c:	mvn	r0, #400	; 0x190
    50a0:	bl	0 <coda_set_error>
    50a4:	b	42d0 <eval_integer+0x664>
    50a8:	ldr	r1, [pc, #-684]	; 4e04 <eval_integer+0x1198>
    50ac:	mvn	r0, #400	; 0x190
    50b0:	bl	0 <coda_set_error>
    50b4:	b	42d0 <eval_integer+0x664>
    50b8:	ldr	r1, [pc, #-696]	; 4e08 <eval_integer+0x119c>
    50bc:	mvn	r0, #400	; 0x190
    50c0:	bl	0 <coda_set_error>
    50c4:	b	42d0 <eval_integer+0x664>
    50c8:	mov	r0, r4
    50cc:	bl	0 <coda_set_option_perform_conversions>
    50d0:	b	42d0 <eval_integer+0x664>
    50d4:	mov	r2, r4
    50d8:	ldr	r1, [pc, #-724]	; 4e0c <eval_integer+0x11a0>
    50dc:	mvn	r0, #400	; 0x190
    50e0:	bl	0 <coda_set_error>
    50e4:	b	42d0 <eval_integer+0x664>
    50e8:	bl	0 <free>
    50ec:	b	42d0 <eval_integer+0x664>
    50f0:	ldr	r3, [pc, #-672]	; 4e58 <eval_integer+0x11ec>
    50f4:	ldr	r2, [pc, #-748]	; 4e10 <eval_integer+0x11a4>
    50f8:	ldr	r1, [pc, #-672]	; 4e60 <eval_integer+0x11f4>
    50fc:	ldr	r0, [pc, #-672]	; 4e64 <eval_integer+0x11f8>
    5100:	bl	0 <__assert_fail>
    5104:	ldr	r3, [pc, #-692]	; 4e58 <eval_integer+0x11ec>
    5108:	ldr	r2, [pc, #-764]	; 4e14 <eval_integer+0x11a8>
    510c:	ldr	r1, [pc, #-692]	; 4e60 <eval_integer+0x11f4>
    5110:	ldr	r0, [pc, #-692]	; 4e64 <eval_integer+0x11f8>
    5114:	bl	0 <__assert_fail>
    5118:	ldr	r3, [pc, #-712]	; 4e58 <eval_integer+0x11ec>
    511c:	ldr	r2, [pc, #-780]	; 4e18 <eval_integer+0x11ac>
    5120:	ldr	r1, [pc, #-712]	; 4e60 <eval_integer+0x11f4>
    5124:	ldr	r0, [pc, #-712]	; 4e64 <eval_integer+0x11f8>
    5128:	bl	0 <__assert_fail>
    512c:	ldr	r3, [pc, #-732]	; 4e58 <eval_integer+0x11ec>
    5130:	ldr	r2, [pc, #-796]	; 4e1c <eval_integer+0x11b0>
    5134:	ldr	r1, [pc, #-732]	; 4e60 <eval_integer+0x11f4>
    5138:	ldr	r0, [pc, #-732]	; 4e64 <eval_integer+0x11f8>
    513c:	bl	0 <__assert_fail>
    5140:	ldr	r3, [pc, #-752]	; 4e58 <eval_integer+0x11ec>
    5144:	ldr	r2, [pc, #-812]	; 4e20 <eval_integer+0x11b4>
    5148:	ldr	r1, [pc, #-752]	; 4e60 <eval_integer+0x11f4>
    514c:	ldr	r0, [pc, #-752]	; 4e64 <eval_integer+0x11f8>
    5150:	bl	0 <__assert_fail>
    5154:	ldr	r3, [pc, #-772]	; 4e58 <eval_integer+0x11ec>
    5158:	ldr	r2, [pc, #-828]	; 4e24 <eval_integer+0x11b8>
    515c:	ldr	r1, [pc, #-772]	; 4e60 <eval_integer+0x11f4>
    5160:	ldr	r0, [pc, #-772]	; 4e64 <eval_integer+0x11f8>
    5164:	bl	0 <__assert_fail>
    5168:	ldr	r3, [pc, #-792]	; 4e58 <eval_integer+0x11ec>
    516c:	ldr	r2, [pc, #-844]	; 4e28 <eval_integer+0x11bc>
    5170:	ldr	r1, [pc, #-792]	; 4e60 <eval_integer+0x11f4>
    5174:	ldr	r0, [pc, #-792]	; 4e64 <eval_integer+0x11f8>
    5178:	bl	0 <__assert_fail>
    517c:	ldr	r3, [pc, #-812]	; 4e58 <eval_integer+0x11ec>
    5180:	ldr	r2, [pc, #-860]	; 4e2c <eval_integer+0x11c0>
    5184:	ldr	r1, [pc, #-812]	; 4e60 <eval_integer+0x11f4>
    5188:	ldr	r0, [pc, #-812]	; 4e64 <eval_integer+0x11f8>
    518c:	bl	0 <__assert_fail>
    5190:	ldr	r3, [pc, #-832]	; 4e58 <eval_integer+0x11ec>
    5194:	ldr	r2, [pc, #-876]	; 4e30 <eval_integer+0x11c4>
    5198:	ldr	r1, [pc, #-832]	; 4e60 <eval_integer+0x11f4>
    519c:	ldr	r0, [pc, #-832]	; 4e64 <eval_integer+0x11f8>
    51a0:	bl	0 <__assert_fail>
    51a4:	ldr	r3, [pc, #-852]	; 4e58 <eval_integer+0x11ec>
    51a8:	ldr	r2, [pc, #-892]	; 4e34 <eval_integer+0x11c8>
    51ac:	ldr	r1, [pc, #-852]	; 4e60 <eval_integer+0x11f4>
    51b0:	ldr	r0, [pc, #-852]	; 4e64 <eval_integer+0x11f8>
    51b4:	bl	0 <__assert_fail>
    51b8:	ldr	r3, [pc, #-872]	; 4e58 <eval_integer+0x11ec>
    51bc:	ldr	r2, [pc, #-908]	; 4e38 <eval_integer+0x11cc>
    51c0:	ldr	r1, [pc, #-872]	; 4e60 <eval_integer+0x11f4>
    51c4:	ldr	r0, [pc, #-872]	; 4e64 <eval_integer+0x11f8>
    51c8:	bl	0 <__assert_fail>
    51cc:	ldr	r3, [pc, #-892]	; 4e58 <eval_integer+0x11ec>
    51d0:	ldr	r2, [pc, #-924]	; 4e3c <eval_integer+0x11d0>
    51d4:	ldr	r1, [pc, #-892]	; 4e60 <eval_integer+0x11f4>
    51d8:	ldr	r0, [pc, #-892]	; 4e64 <eval_integer+0x11f8>
    51dc:	bl	0 <__assert_fail>
    51e0:	ldr	r3, [pc, #-912]	; 4e58 <eval_integer+0x11ec>
    51e4:	ldr	r2, [pc, #-940]	; 4e40 <eval_integer+0x11d4>
    51e8:	ldr	r1, [pc, #-912]	; 4e60 <eval_integer+0x11f4>
    51ec:	ldr	r0, [pc, #-912]	; 4e64 <eval_integer+0x11f8>
    51f0:	bl	0 <__assert_fail>
    51f4:	ldr	r3, [pc, #-932]	; 4e58 <eval_integer+0x11ec>
    51f8:	mov	r2, #1936	; 0x790
    51fc:	ldr	r1, [pc, #-932]	; 4e60 <eval_integer+0x11f4>
    5200:	ldr	r0, [pc, #-932]	; 4e64 <eval_integer+0x11f8>
    5204:	bl	0 <__assert_fail>
    5208:	ldr	r3, [pc, #-952]	; 4e58 <eval_integer+0x11ec>
    520c:	mov	r2, #2528	; 0x9e0
    5210:	ldr	r1, [pc, #-952]	; 4e60 <eval_integer+0x11f4>
    5214:	ldr	r0, [pc, #-952]	; 4e64 <eval_integer+0x11f8>
    5218:	bl	0 <__assert_fail>
    521c:	ldr	r3, [pc, #-972]	; 4e58 <eval_integer+0x11ec>
    5220:	ldr	r2, [pc, #-996]	; 4e44 <eval_integer+0x11d8>
    5224:	ldr	r1, [pc, #-972]	; 4e60 <eval_integer+0x11f4>
    5228:	ldr	r0, [pc, #-972]	; 4e64 <eval_integer+0x11f8>
    522c:	bl	0 <__assert_fail>
    5230:	ldr	r3, [pc, #-992]	; 4e58 <eval_integer+0x11ec>
    5234:	ldr	r2, [pc, #-1012]	; 4e48 <eval_integer+0x11dc>
    5238:	ldr	r1, [pc, #-992]	; 4e60 <eval_integer+0x11f4>
    523c:	ldr	r0, [pc, #-992]	; 4e64 <eval_integer+0x11f8>
    5240:	bl	0 <__assert_fail>
    5244:	ldr	r3, [pc, #-1012]	; 4e58 <eval_integer+0x11ec>
    5248:	ldr	r2, [pc, #-1028]	; 4e4c <eval_integer+0x11e0>
    524c:	ldr	r1, [pc, #-1012]	; 4e60 <eval_integer+0x11f4>
    5250:	ldr	r0, [pc, #-1012]	; 4e64 <eval_integer+0x11f8>
    5254:	bl	0 <__assert_fail>
    5258:	ldr	r3, [pc, #-1032]	; 4e58 <eval_integer+0x11ec>
    525c:	ldr	r2, [pc, #-1044]	; 4e50 <eval_integer+0x11e4>
    5260:	ldr	r1, [pc, #-1032]	; 4e60 <eval_integer+0x11f4>
    5264:	ldr	r0, [pc, #-1032]	; 4e64 <eval_integer+0x11f8>
    5268:	bl	0 <__assert_fail>
    526c:	ldr	r3, [pc, #-1052]	; 4e58 <eval_integer+0x11ec>
    5270:	ldr	r2, [pc, #-1060]	; 4e54 <eval_integer+0x11e8>
    5274:	ldr	r1, [pc, #-1052]	; 4e60 <eval_integer+0x11f4>
    5278:	ldr	r0, [pc, #-1052]	; 4e64 <eval_integer+0x11f8>
    527c:	bl	0 <__assert_fail>
    5280:	ldr	r3, [pc, #-1072]	; 4e58 <eval_integer+0x11ec>
    5284:	ldr	r2, [pc, #-1072]	; 4e5c <eval_integer+0x11f0>
    5288:	ldr	r1, [pc, #-1072]	; 4e60 <eval_integer+0x11f4>
    528c:	ldr	r0, [pc, #-1072]	; 4e64 <eval_integer+0x11f8>
    5290:	bl	0 <__assert_fail>

00005294 <eval_cursor>:
    5294:	push	{r4, r5, r6, r7, lr}
    5298:	mov	r5, r1
    529c:	ldr	r1, [r0]
    52a0:	sub	sp, sp, #20
    52a4:	cmp	r1, #0
    52a8:	beq	5604 <eval_cursor+0x370>
    52ac:	ldr	r3, [r5]
    52b0:	mov	r4, r0
    52b4:	sub	r3, r3, #10
    52b8:	cmp	r3, #28
    52bc:	ldrls	pc, [pc, r3, lsl #2]
    52c0:	b	5544 <eval_cursor+0x2b0>
    52c4:	.word	0x0000539c
    52c8:	.word	0x00005544
    52cc:	.word	0x00005544
    52d0:	.word	0x00005544
    52d4:	.word	0x00005544
    52d8:	.word	0x00005544
    52dc:	.word	0x00005544
    52e0:	.word	0x00005544
    52e4:	.word	0x00005544
    52e8:	.word	0x00005544
    52ec:	.word	0x00005544
    52f0:	.word	0x00005544
    52f4:	.word	0x00005544
    52f8:	.word	0x00005544
    52fc:	.word	0x00005544
    5300:	.word	0x00005544
    5304:	.word	0x00005544
    5308:	.word	0x00005544
    530c:	.word	0x00005544
    5310:	.word	0x00005544
    5314:	.word	0x00005544
    5318:	.word	0x00005544
    531c:	.word	0x000053c8
    5320:	.word	0x00005488
    5324:	.word	0x000054cc
    5328:	.word	0x000054e8
    532c:	.word	0x00005338
    5330:	.word	0x00005348
    5334:	.word	0x0000537c
    5338:	mov	r6, #0
    533c:	mov	r0, r6
    5340:	add	sp, sp, #20
    5344:	pop	{r4, r5, r6, r7, pc}
    5348:	ldr	r1, [r5, #16]
    534c:	cmp	r1, #0
    5350:	beq	5360 <eval_cursor+0xcc>
    5354:	bl	5294 <eval_cursor>
    5358:	cmp	r0, #0
    535c:	bne	5480 <eval_cursor+0x1ec>
    5360:	add	r0, r4, #8
    5364:	bl	0 <coda_cursor_goto_parent>
    5368:	adds	r6, r0, #0
    536c:	mvnne	r6, #0
    5370:	mov	r0, r6
    5374:	add	sp, sp, #20
    5378:	pop	{r4, r5, r6, r7, pc}
    537c:	ldr	r1, [r1]
    5380:	add	r0, r0, #8
    5384:	bl	0 <coda_cursor_set_product>
    5388:	adds	r6, r0, #0
    538c:	mvnne	r6, #0
    5390:	mov	r0, r6
    5394:	add	sp, sp, #20
    5398:	pop	{r4, r5, r6, r7, pc}
    539c:	ldr	r1, [r1]
    53a0:	ldr	r0, [r1, #16]
    53a4:	cmp	r0, #0
    53a8:	bne	55ec <eval_cursor+0x358>
    53ac:	add	r0, r4, #8
    53b0:	bl	0 <coda_ascii_cursor_set_asciilines>
    53b4:	adds	r6, r0, #0
    53b8:	mvnne	r6, #0
    53bc:	mov	r0, r6
    53c0:	add	sp, sp, #20
    53c4:	pop	{r4, r5, r6, r7, pc}
    53c8:	ldr	r3, [r5, #16]
    53cc:	cmp	r3, #0
    53d0:	beq	5578 <eval_cursor+0x2e4>
    53d4:	mov	r1, r3
    53d8:	bl	5294 <eval_cursor>
    53dc:	cmp	r0, #0
    53e0:	bne	5480 <eval_cursor+0x1ec>
    53e4:	ldr	r1, [r5, #20]
    53e8:	add	r2, sp, #8
    53ec:	mov	r0, r4
    53f0:	bl	3c6c <eval_integer>
    53f4:	cmp	r0, #0
    53f8:	bne	5480 <eval_cursor+0x1ec>
    53fc:	ldr	r3, [pc, #532]	; 5618 <eval_cursor+0x384>
    5400:	bl	0 <__aeabi_read_tp>
    5404:	ldr	r3, [pc, r3]
    5408:	ldr	r3, [r0, r3]
    540c:	cmp	r3, #0
    5410:	bne	5558 <eval_cursor+0x2c4>
    5414:	add	r4, r4, #8
    5418:	mov	r0, r4
    541c:	add	r1, sp, #4
    5420:	bl	0 <coda_cursor_get_type_class>
    5424:	cmp	r0, #0
    5428:	bne	5480 <eval_cursor+0x1ec>
    542c:	ldr	r0, [sp, #4]
    5430:	cmp	r0, #1
    5434:	bne	55d4 <eval_cursor+0x340>
    5438:	mov	r1, sp
    543c:	mov	r0, r4
    5440:	bl	0 <coda_cursor_get_num_elements>
    5444:	cmp	r0, #0
    5448:	bne	5480 <eval_cursor+0x1ec>
    544c:	ldrd	r2, [sp, #8]
    5450:	cmp	r2, #0
    5454:	sbcs	r1, r3, #0
    5458:	ldr	r1, [sp]
    545c:	blt	5470 <eval_cursor+0x1dc>
    5460:	asr	r7, r1, #31
    5464:	cmp	r2, r1
    5468:	sbcs	r0, r3, r7
    546c:	blt	5560 <eval_cursor+0x2cc>
    5470:	mov	r3, r1
    5474:	mvn	r0, #106	; 0x6a
    5478:	ldr	r1, [pc, #412]	; 561c <eval_cursor+0x388>
    547c:	bl	0 <coda_set_error>
    5480:	mvn	r6, #0
    5484:	b	533c <eval_cursor+0xa8>
    5488:	ldr	r1, [r5, #16]
    548c:	cmp	r1, #0
    5490:	beq	54a0 <eval_cursor+0x20c>
    5494:	bl	5294 <eval_cursor>
    5498:	cmp	r0, #0
    549c:	bne	5480 <eval_cursor+0x1ec>
    54a0:	add	r4, r4, #8
    54a4:	mov	r0, r4
    54a8:	bl	0 <coda_cursor_goto_attributes>
    54ac:	cmp	r0, #0
    54b0:	bne	5480 <eval_cursor+0x1ec>
    54b4:	ldr	r1, [r5, #12]
    54b8:	mov	r0, r4
    54bc:	bl	0 <coda_cursor_goto_record_field_by_name>
    54c0:	adds	r6, r0, #0
    54c4:	mvnne	r6, #0
    54c8:	b	533c <eval_cursor+0xa8>
    54cc:	mov	r2, #520	; 0x208
    54d0:	add	r0, r0, #8
    54d4:	bl	0 <memcpy>
    54d8:	mov	r6, #0
    54dc:	mov	r0, r6
    54e0:	add	sp, sp, #20
    54e4:	pop	{r4, r5, r6, r7, pc}
    54e8:	ldr	r1, [r5, #16]
    54ec:	cmp	r1, #0
    54f0:	beq	5500 <eval_cursor+0x26c>
    54f4:	bl	5294 <eval_cursor>
    54f8:	cmp	r0, #0
    54fc:	bne	5480 <eval_cursor+0x1ec>
    5500:	add	r7, r4, #8
    5504:	mov	r0, r7
    5508:	add	r1, sp, #4
    550c:	bl	0 <coda_cursor_get_type_class>
    5510:	subs	r6, r0, #0
    5514:	bne	5480 <eval_cursor+0x1ec>
    5518:	ldr	r3, [sp, #4]
    551c:	cmp	r3, #6
    5520:	beq	55c0 <eval_cursor+0x32c>
    5524:	ldr	r1, [r5, #12]
    5528:	cmp	r1, #0
    552c:	beq	5590 <eval_cursor+0x2fc>
    5530:	mov	r0, r7
    5534:	bl	0 <coda_cursor_goto_record_field_by_name>
    5538:	cmp	r0, #0
    553c:	beq	533c <eval_cursor+0xa8>
    5540:	b	5480 <eval_cursor+0x1ec>
    5544:	ldr	r3, [pc, #212]	; 5620 <eval_cursor+0x38c>
    5548:	ldr	r2, [pc, #212]	; 5624 <eval_cursor+0x390>
    554c:	ldr	r1, [pc, #212]	; 5628 <eval_cursor+0x394>
    5550:	ldr	r0, [pc, #212]	; 562c <eval_cursor+0x398>
    5554:	bl	0 <__assert_fail>
    5558:	ldrd	r2, [sp, #8]
    555c:	add	r4, r4, #8
    5560:	mov	r1, r2
    5564:	mov	r0, r4
    5568:	bl	0 <coda_cursor_goto_array_element_by_index>
    556c:	subs	r6, r0, #0
    5570:	beq	533c <eval_cursor+0xa8>
    5574:	b	5480 <eval_cursor+0x1ec>
    5578:	ldr	r1, [r1]
    557c:	add	r0, r0, #8
    5580:	bl	0 <coda_cursor_set_product>
    5584:	cmp	r0, #0
    5588:	beq	53e4 <eval_cursor+0x150>
    558c:	b	5480 <eval_cursor+0x1ec>
    5590:	ldr	r1, [r5, #20]
    5594:	mov	r0, r4
    5598:	add	r2, sp, #8
    559c:	bl	3c6c <eval_integer>
    55a0:	cmp	r0, #0
    55a4:	bne	5480 <eval_cursor+0x1ec>
    55a8:	mov	r0, r7
    55ac:	ldr	r1, [sp, #8]
    55b0:	bl	0 <coda_cursor_goto_record_field_by_index>
    55b4:	cmp	r0, #0
    55b8:	beq	533c <eval_cursor+0xa8>
    55bc:	b	5480 <eval_cursor+0x1ec>
    55c0:	mov	r0, r7
    55c4:	bl	0 <coda_cursor_use_base_type_of_special_type>
    55c8:	cmp	r0, #0
    55cc:	beq	5524 <eval_cursor+0x290>
    55d0:	b	5480 <eval_cursor+0x1ec>
    55d4:	bl	0 <coda_type_get_class_name>
    55d8:	ldr	r1, [pc, #80]	; 5630 <eval_cursor+0x39c>
    55dc:	mov	r2, r0
    55e0:	mvn	r0, #104	; 0x68
    55e4:	bl	0 <coda_set_error>
    55e8:	b	5480 <eval_cursor+0x1ec>
    55ec:	bl	0 <coda_type_get_format_name>
    55f0:	ldr	r1, [pc, #60]	; 5634 <eval_cursor+0x3a0>
    55f4:	mov	r2, r0
    55f8:	mvn	r0, #400	; 0x190
    55fc:	bl	0 <coda_set_error>
    5600:	b	5480 <eval_cursor+0x1ec>
    5604:	ldr	r3, [pc, #20]	; 5620 <eval_cursor+0x38c>
    5608:	ldr	r2, [pc, #40]	; 5638 <eval_cursor+0x3a4>
    560c:	ldr	r1, [pc, #20]	; 5628 <eval_cursor+0x394>
    5610:	ldr	r0, [pc, #36]	; 563c <eval_cursor+0x3a8>
    5614:	bl	0 <__assert_fail>
    5618:	.word	0x0000020c
    561c:	.word	0x00000b98
    5620:	.word	0x00000030
    5624:	.word	0x00000fef
    5628:	.word	0x000005b8
    562c:	.word	0x00000a0c
    5630:	.word	0x00000b60
    5634:	.word	0x00000bc8
    5638:	.word	0x00000f49
    563c:	.word	0x000007c4

00005640 <eval_float>:
    5640:	ldr	r3, [r1, #4]
    5644:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5648:	cmp	r3, #1
    564c:	sub	sp, sp, #556	; 0x22c
    5650:	mov	r5, r2
    5654:	beq	57ec <eval_float+0x1ac>
    5658:	ldr	r3, [r1]
    565c:	mov	r4, r1
    5660:	cmp	r3, #19
    5664:	beq	57d4 <eval_float+0x194>
    5668:	mov	r6, r0
    566c:	cmp	r3, #86	; 0x56
    5670:	ldrls	pc, [pc, r3, lsl #2]
    5674:	b	5ff0 <eval_float+0x9b0>
    5678:	.word	0x00005e54
    567c:	.word	0x00005e14
    5680:	.word	0x00005ff0
    5684:	.word	0x00005d10
    5688:	.word	0x00005ff0
    568c:	.word	0x00005ff0
    5690:	.word	0x00005ff0
    5694:	.word	0x00005ff0
    5698:	.word	0x00005c2c
    569c:	.word	0x00005b48
    56a0:	.word	0x00005ff0
    56a4:	.word	0x00005ae8
    56a8:	.word	0x00005ff0
    56ac:	.word	0x00005ff0
    56b0:	.word	0x00005ff0
    56b4:	.word	0x00005ff0
    56b8:	.word	0x00005ff0
    56bc:	.word	0x00005ac8
    56c0:	.word	0x00005ff0
    56c4:	.word	0x00005ff0
    56c8:	.word	0x00005ff0
    56cc:	.word	0x00005ff0
    56d0:	.word	0x00005ff0
    56d4:	.word	0x00005ff0
    56d8:	.word	0x00005a7c
    56dc:	.word	0x00005ff0
    56e0:	.word	0x00005ff0
    56e4:	.word	0x00005ff0
    56e8:	.word	0x00005ff0
    56ec:	.word	0x0000580c
    56f0:	.word	0x00005f00
    56f4:	.word	0x00005ff0
    56f8:	.word	0x00005ff0
    56fc:	.word	0x00005ff0
    5700:	.word	0x00005ff0
    5704:	.word	0x00005ff0
    5708:	.word	0x00005ff0
    570c:	.word	0x00005ff0
    5710:	.word	0x00005ff0
    5714:	.word	0x00005ff0
    5718:	.word	0x00005ff0
    571c:	.word	0x00005ff0
    5720:	.word	0x00005ec4
    5724:	.word	0x00005ff0
    5728:	.word	0x00005ff0
    572c:	.word	0x00005ff0
    5730:	.word	0x00005ff0
    5734:	.word	0x00005ff0
    5738:	.word	0x00005ff0
    573c:	.word	0x00005ff0
    5740:	.word	0x00005ff0
    5744:	.word	0x00005ff0
    5748:	.word	0x00005ff0
    574c:	.word	0x00005ff0
    5750:	.word	0x00005ff0
    5754:	.word	0x00005ff0
    5758:	.word	0x00005e7c
    575c:	.word	0x00005f6c
    5760:	.word	0x00005f20
    5764:	.word	0x00005fb0
    5768:	.word	0x00005a5c
    576c:	.word	0x00005ff0
    5770:	.word	0x00005ff0
    5774:	.word	0x00005ff0
    5778:	.word	0x00005ff0
    577c:	.word	0x00005ff0
    5780:	.word	0x00005a10
    5784:	.word	0x00005ff0
    5788:	.word	0x00005ff0
    578c:	.word	0x00005ff0
    5790:	.word	0x00005ff0
    5794:	.word	0x00005ff0
    5798:	.word	0x000059dc
    579c:	.word	0x00005ff0
    57a0:	.word	0x00005ff0
    57a4:	.word	0x00005ff0
    57a8:	.word	0x00005ff0
    57ac:	.word	0x00005ff0
    57b0:	.word	0x0000599c
    57b4:	.word	0x000058dc
    57b8:	.word	0x00005ff0
    57bc:	.word	0x00005ff0
    57c0:	.word	0x00005ff0
    57c4:	.word	0x00005ff0
    57c8:	.word	0x00005ff0
    57cc:	.word	0x00005ff0
    57d0:	.word	0x00005890
    57d4:	ldrd	r2, [r1, #16]
    57d8:	mov	r7, #0
    57dc:	strd	r2, [r5]
    57e0:	mov	r0, r7
    57e4:	add	sp, sp, #556	; 0x22c
    57e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    57ec:	add	r2, sp, #32
    57f0:	bl	3c6c <eval_integer>
    57f4:	subs	r7, r0, #0
    57f8:	bne	5880 <eval_float+0x240>
    57fc:	ldrd	r0, [sp, #32]
    5800:	bl	0 <__aeabi_l2d>
    5804:	strd	r0, [r5]
    5808:	b	57e0 <eval_float+0x1a0>
    580c:	ldr	r4, [r1, #16]
    5810:	ldr	r3, [r4, #4]
    5814:	cmp	r3, #4
    5818:	beq	6060 <eval_float+0xa20>
    581c:	cmp	r3, #3
    5820:	movne	r1, r4
    5824:	bne	57ec <eval_float+0x1ac>
    5828:	add	r3, sp, #32
    582c:	str	r3, [sp]
    5830:	mov	r1, r4
    5834:	mov	r0, r6
    5838:	add	r3, sp, #24
    583c:	add	r2, sp, #20
    5840:	bl	2430 <eval_string>
    5844:	subs	r7, r0, #0
    5848:	bne	5880 <eval_float+0x240>
    584c:	ldr	r1, [sp, #24]
    5850:	cmp	r1, #0
    5854:	beq	61d4 <eval_float+0xb94>
    5858:	ldr	r3, [sp, #20]
    585c:	ldr	r0, [sp, #32]
    5860:	mov	r2, r5
    5864:	add	r0, r0, r3
    5868:	mov	r3, r7
    586c:	bl	0 <coda_ascii_parse_double>
    5870:	cmp	r0, #0
    5874:	ldr	r0, [sp, #32]
    5878:	bge	5994 <eval_float+0x354>
    587c:	bl	0 <free>
    5880:	mvn	r7, #0
    5884:	mov	r0, r7
    5888:	add	sp, sp, #556	; 0x22c
    588c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5890:	ldr	r3, [r1, #12]
    5894:	ldr	r1, [r1, #16]
    5898:	ldrb	r3, [r3]
    589c:	sub	r2, r3, #39	; 0x27
    58a0:	add	r3, r0, r3, lsl #3
    58a4:	sub	sl, r3, #304	; 0x130
    58a8:	add	r2, r0, r2, lsl #3
    58ac:	ldrd	r8, [sl, #-8]
    58b0:	bl	3c6c <eval_integer>
    58b4:	cmp	r0, #0
    58b8:	bne	5880 <eval_float+0x240>
    58bc:	mov	r2, r5
    58c0:	ldr	r1, [r4, #20]
    58c4:	mov	r0, r6
    58c8:	bl	5640 <eval_float>
    58cc:	subs	r7, r0, #0
    58d0:	bne	5880 <eval_float+0x240>
    58d4:	strd	r8, [sl, #-8]
    58d8:	b	57e0 <eval_float+0x1a0>
    58dc:	add	r3, sp, #24
    58e0:	ldr	r1, [r1, #16]
    58e4:	add	r2, sp, #8
    58e8:	str	r3, [sp]
    58ec:	add	r3, sp, #16
    58f0:	bl	2430 <eval_string>
    58f4:	cmp	r0, #0
    58f8:	bne	5880 <eval_float+0x240>
    58fc:	ldr	r2, [sp, #16]
    5900:	cmp	r2, #0
    5904:	blt	61c4 <eval_float+0xb84>
    5908:	beq	617c <eval_float+0xb3c>
    590c:	ldr	r3, [sp, #24]
    5910:	ldr	r1, [sp, #8]
    5914:	add	r3, r3, r2
    5918:	add	r2, sp, #32
    591c:	strb	r0, [r3, r1]
    5920:	mov	r0, r6
    5924:	ldr	r1, [r4, #20]
    5928:	add	r3, sp, #20
    592c:	str	r2, [sp]
    5930:	add	r2, sp, #12
    5934:	bl	2430 <eval_string>
    5938:	cmp	r0, #0
    593c:	bne	6174 <eval_float+0xb34>
    5940:	ldr	r2, [sp, #20]
    5944:	cmp	r2, #0
    5948:	blt	61e4 <eval_float+0xba4>
    594c:	beq	619c <eval_float+0xb5c>
    5950:	ldr	r3, [sp, #32]
    5954:	ldr	r1, [sp, #12]
    5958:	add	r3, r3, r2
    595c:	mov	r2, r5
    5960:	strb	r0, [r3, r1]
    5964:	ldr	ip, [sp, #24]
    5968:	ldr	r1, [sp, #8]
    596c:	ldr	r0, [sp, #32]
    5970:	ldr	r3, [sp, #12]
    5974:	add	r1, ip, r1
    5978:	add	r0, r0, r3
    597c:	bl	0 <coda_time_string_to_double>
    5980:	subs	r7, r0, #0
    5984:	ldr	r0, [sp, #32]
    5988:	bne	6170 <eval_float+0xb30>
    598c:	bl	0 <free>
    5990:	ldr	r0, [sp, #24]
    5994:	bl	0 <free>
    5998:	b	57e0 <eval_float+0x1a0>
    599c:	add	r2, sp, #24
    59a0:	ldr	r1, [r1, #16]
    59a4:	bl	5640 <eval_float>
    59a8:	cmp	r0, #0
    59ac:	bne	5880 <eval_float+0x240>
    59b0:	ldr	r1, [r4, #20]
    59b4:	mov	r0, r6
    59b8:	add	r2, sp, #32
    59bc:	bl	5640 <eval_float>
    59c0:	subs	r7, r0, #0
    59c4:	bne	5880 <eval_float+0x240>
    59c8:	vldr	d7, [sp, #24]
    59cc:	vldr	d6, [sp, #32]
    59d0:	vsub.f64	d7, d7, d6
    59d4:	vstr	d7, [r5]
    59d8:	b	57e0 <eval_float+0x1a0>
    59dc:	ldr	r1, [r1, #16]
    59e0:	bl	5640 <eval_float>
    59e4:	subs	r7, r0, #0
    59e8:	bne	5880 <eval_float+0x240>
    59ec:	vldr	d7, [r5]
    59f0:	vldr	d0, [pc, #936]	; 5da0 <eval_float+0x760>
    59f4:	vcmpe.f64	d7, #0.0
    59f8:	vmrs	APSR_nzcv, fpscr
    59fc:	bmi	6124 <eval_float+0xae4>
    5a00:	vadd.f64	d0, d7, d0
    5a04:	bl	0 <floor>
    5a08:	vstr	d0, [r5]
    5a0c:	b	57e0 <eval_float+0x1a0>
    5a10:	add	r2, sp, #24
    5a14:	ldr	r1, [r1, #16]
    5a18:	bl	5640 <eval_float>
    5a1c:	subs	r7, r0, #0
    5a20:	bne	5880 <eval_float+0x240>
    5a24:	ldr	r1, [r4, #20]
    5a28:	mov	r0, r6
    5a2c:	add	r2, sp, #32
    5a30:	ldr	r3, [r1, #4]
    5a34:	cmp	r3, #1
    5a38:	beq	60d4 <eval_float+0xa94>
    5a3c:	bl	5640 <eval_float>
    5a40:	cmp	r0, #0
    5a44:	bne	5880 <eval_float+0x240>
    5a48:	vldr	d1, [sp, #32]
    5a4c:	vldr	d0, [sp, #24]
    5a50:	bl	0 <pow>
    5a54:	vstr	d0, [r5]
    5a58:	b	57e0 <eval_float+0x1a0>
    5a5c:	ldr	r1, [r1, #16]
    5a60:	bl	5640 <eval_float>
    5a64:	subs	r7, r0, #0
    5a68:	bne	5880 <eval_float+0x240>
    5a6c:	vldr	d7, [r5]
    5a70:	vneg.f64	d7, d7
    5a74:	vstr	d7, [r5]
    5a78:	b	57e0 <eval_float+0x1a0>
    5a7c:	add	r2, sp, #24
    5a80:	ldr	r1, [r1, #16]
    5a84:	bl	5640 <eval_float>
    5a88:	cmp	r0, #0
    5a8c:	bne	5880 <eval_float+0x240>
    5a90:	ldr	r1, [r4, #20]
    5a94:	mov	r0, r6
    5a98:	add	r2, sp, #32
    5a9c:	bl	5640 <eval_float>
    5aa0:	subs	r7, r0, #0
    5aa4:	bne	5880 <eval_float+0x240>
    5aa8:	vldr	d7, [sp, #32]
    5aac:	vcmp.f64	d7, #0.0
    5ab0:	vmrs	APSR_nzcv, fpscr
    5ab4:	beq	61ac <eval_float+0xb6c>
    5ab8:	vldr	d5, [sp, #24]
    5abc:	vdiv.f64	d6, d5, d7
    5ac0:	vstr	d6, [r5]
    5ac4:	b	57e0 <eval_float+0x1a0>
    5ac8:	ldr	r1, [r1, #16]
    5acc:	bl	5640 <eval_float>
    5ad0:	subs	r7, r0, #0
    5ad4:	bne	5880 <eval_float+0x240>
    5ad8:	vldr	d0, [r5]
    5adc:	bl	0 <ceil>
    5ae0:	vstr	d0, [r5]
    5ae4:	b	57e0 <eval_float+0x1a0>
    5ae8:	ldr	r3, [r0]
    5aec:	cmp	r3, #0
    5af0:	beq	6208 <eval_float+0xbc8>
    5af4:	add	r8, r0, #8
    5af8:	mov	r1, r8
    5afc:	mov	r2, #520	; 0x208
    5b00:	add	r0, sp, #32
    5b04:	bl	0 <memcpy>
    5b08:	ldr	r1, [r4, #16]
    5b0c:	mov	r0, r6
    5b10:	bl	5294 <eval_cursor>
    5b14:	cmp	r0, #0
    5b18:	bne	5880 <eval_float+0x240>
    5b1c:	mov	r2, r5
    5b20:	ldr	r1, [r4, #20]
    5b24:	mov	r0, r6
    5b28:	bl	5640 <eval_float>
    5b2c:	subs	r7, r0, #0
    5b30:	bne	5880 <eval_float+0x240>
    5b34:	add	r1, sp, #32
    5b38:	mov	r0, r8
    5b3c:	mov	r2, #520	; 0x208
    5b40:	bl	0 <memcpy>
    5b44:	b	57e0 <eval_float+0x1a0>
    5b48:	ldr	r3, [r0]
    5b4c:	cmp	r3, #0
    5b50:	beq	6244 <eval_float+0xc04>
    5b54:	add	sl, r0, #8
    5b58:	add	fp, sp, #32
    5b5c:	mov	r1, sl
    5b60:	mov	r2, #520	; 0x208
    5b64:	mov	r0, fp
    5b68:	bl	0 <memcpy>
    5b6c:	ldr	r1, [r4, #16]
    5b70:	mov	r0, r6
    5b74:	bl	5294 <eval_cursor>
    5b78:	cmp	r0, #0
    5b7c:	bne	5880 <eval_float+0x240>
    5b80:	add	r1, sp, #20
    5b84:	mov	r0, sl
    5b88:	bl	0 <coda_cursor_get_num_elements>
    5b8c:	subs	r7, r0, #0
    5b90:	bne	5880 <eval_float+0x240>
    5b94:	bl	0 <coda_NaN>
    5b98:	ldr	r3, [sp, #20]
    5b9c:	cmp	r3, #0
    5ba0:	vstr	d0, [r5]
    5ba4:	ble	6034 <eval_float+0x9f4>
    5ba8:	mov	r0, sl
    5bac:	bl	0 <coda_cursor_goto_first_array_element>
    5bb0:	cmp	r0, #0
    5bb4:	bne	5880 <eval_float+0x240>
    5bb8:	ldr	r3, [sp, #20]
    5bbc:	cmp	r3, #0
    5bc0:	ble	6034 <eval_float+0x9f4>
    5bc4:	mov	r8, r7
    5bc8:	add	r9, sp, #24
    5bcc:	b	5bf4 <eval_float+0x5b4>
    5bd0:	vldr	d7, [sp, #24]
    5bd4:	vstr	d7, [r5]
    5bd8:	ldr	r3, [sp, #20]
    5bdc:	sub	r2, r3, #1
    5be0:	cmp	r2, r8
    5be4:	bgt	601c <eval_float+0x9dc>
    5be8:	add	r8, r8, #1
    5bec:	cmp	r3, r8
    5bf0:	ble	6034 <eval_float+0x9f4>
    5bf4:	mov	r2, r9
    5bf8:	ldr	r1, [r4, #20]
    5bfc:	mov	r0, r6
    5c00:	bl	5640 <eval_float>
    5c04:	cmp	r0, #0
    5c08:	bne	5880 <eval_float+0x240>
    5c0c:	cmp	r8, #0
    5c10:	beq	5bd0 <eval_float+0x590>
    5c14:	vldr	d6, [r5]
    5c18:	vldr	d7, [sp, #24]
    5c1c:	vcmpe.f64	d6, d7
    5c20:	vmrs	APSR_nzcv, fpscr
    5c24:	ble	5bd8 <eval_float+0x598>
    5c28:	b	5bd4 <eval_float+0x594>
    5c2c:	ldr	r3, [r0]
    5c30:	cmp	r3, #0
    5c34:	beq	6230 <eval_float+0xbf0>
    5c38:	add	sl, r0, #8
    5c3c:	add	fp, sp, #32
    5c40:	mov	r1, sl
    5c44:	mov	r2, #520	; 0x208
    5c48:	mov	r0, fp
    5c4c:	bl	0 <memcpy>
    5c50:	ldr	r1, [r4, #16]
    5c54:	mov	r0, r6
    5c58:	bl	5294 <eval_cursor>
    5c5c:	cmp	r0, #0
    5c60:	bne	5880 <eval_float+0x240>
    5c64:	add	r1, sp, #20
    5c68:	mov	r0, sl
    5c6c:	bl	0 <coda_cursor_get_num_elements>
    5c70:	subs	r7, r0, #0
    5c74:	bne	5880 <eval_float+0x240>
    5c78:	bl	0 <coda_NaN>
    5c7c:	ldr	r3, [sp, #20]
    5c80:	cmp	r3, #0
    5c84:	vstr	d0, [r5]
    5c88:	ble	6034 <eval_float+0x9f4>
    5c8c:	mov	r0, sl
    5c90:	bl	0 <coda_cursor_goto_first_array_element>
    5c94:	cmp	r0, #0
    5c98:	bne	5880 <eval_float+0x240>
    5c9c:	ldr	r3, [sp, #20]
    5ca0:	cmp	r3, #0
    5ca4:	ble	6034 <eval_float+0x9f4>
    5ca8:	mov	r8, r7
    5cac:	add	r9, sp, #24
    5cb0:	b	5cd8 <eval_float+0x698>
    5cb4:	vldr	d7, [sp, #24]
    5cb8:	vstr	d7, [r5]
    5cbc:	ldr	r3, [sp, #20]
    5cc0:	sub	r2, r3, #1
    5cc4:	cmp	r2, r8
    5cc8:	bgt	6004 <eval_float+0x9c4>
    5ccc:	add	r8, r8, #1
    5cd0:	cmp	r8, r3
    5cd4:	bge	6034 <eval_float+0x9f4>
    5cd8:	mov	r2, r9
    5cdc:	ldr	r1, [r4, #20]
    5ce0:	mov	r0, r6
    5ce4:	bl	5640 <eval_float>
    5ce8:	cmp	r0, #0
    5cec:	bne	5880 <eval_float+0x240>
    5cf0:	cmp	r8, #0
    5cf4:	beq	5cb4 <eval_float+0x674>
    5cf8:	vldr	d6, [r5]
    5cfc:	vldr	d7, [sp, #24]
    5d00:	vcmpe.f64	d6, d7
    5d04:	vmrs	APSR_nzcv, fpscr
    5d08:	bpl	5cbc <eval_float+0x67c>
    5d0c:	b	5cb8 <eval_float+0x678>
    5d10:	ldr	r3, [r0]
    5d14:	cmp	r3, #0
    5d18:	beq	61f4 <eval_float+0xbb4>
    5d1c:	add	sl, r0, #8
    5d20:	add	fp, sp, #32
    5d24:	mov	r1, sl
    5d28:	mov	r2, #520	; 0x208
    5d2c:	mov	r0, fp
    5d30:	bl	0 <memcpy>
    5d34:	ldr	r1, [r4, #16]
    5d38:	mov	r0, r6
    5d3c:	bl	5294 <eval_cursor>
    5d40:	cmp	r0, #0
    5d44:	bne	5880 <eval_float+0x240>
    5d48:	add	r1, sp, #20
    5d4c:	mov	r0, sl
    5d50:	bl	0 <coda_cursor_get_num_elements>
    5d54:	subs	r7, r0, #0
    5d58:	bne	5880 <eval_float+0x240>
    5d5c:	ldr	r1, [sp, #20]
    5d60:	mov	r2, #0
    5d64:	mov	r3, #0
    5d68:	cmp	r1, #0
    5d6c:	strd	r2, [r5]
    5d70:	ble	6034 <eval_float+0x9f4>
    5d74:	mov	r0, sl
    5d78:	bl	0 <coda_cursor_goto_first_array_element>
    5d7c:	cmp	r0, #0
    5d80:	bne	5880 <eval_float+0x240>
    5d84:	ldr	r3, [sp, #20]
    5d88:	cmp	r3, #0
    5d8c:	ble	6034 <eval_float+0x9f4>
    5d90:	mov	r8, r7
    5d94:	add	r9, sp, #24
    5d98:	b	5dc4 <eval_float+0x784>
    5d9c:	nop			; (mov r0, r0)
    5da0:	.word	0x00000000
    5da4:	.word	0x3fe00000
    5da8:	.word	0x0000003c
    5dac:	.word	0x00000775
    5db0:	.word	0x000005b8
    5db4:	.word	0x00000a0c
    5db8:	add	r8, r8, #1
    5dbc:	cmp	r3, r8
    5dc0:	ble	6034 <eval_float+0x9f4>
    5dc4:	mov	r2, r9
    5dc8:	ldr	r1, [r4, #20]
    5dcc:	mov	r0, r6
    5dd0:	bl	5640 <eval_float>
    5dd4:	cmp	r0, #0
    5dd8:	bne	5880 <eval_float+0x240>
    5ddc:	vldr	d7, [r5]
    5de0:	vldr	d6, [sp, #24]
    5de4:	ldr	r3, [sp, #20]
    5de8:	sub	r2, r3, #1
    5dec:	vadd.f64	d7, d7, d6
    5df0:	cmp	r2, r8
    5df4:	vstr	d7, [r5]
    5df8:	ble	5db8 <eval_float+0x778>
    5dfc:	mov	r0, sl
    5e00:	bl	0 <coda_cursor_goto_next_array_element>
    5e04:	cmp	r0, #0
    5e08:	bne	5880 <eval_float+0x240>
    5e0c:	ldr	r3, [sp, #20]
    5e10:	b	5db8 <eval_float+0x778>
    5e14:	add	r2, sp, #24
    5e18:	ldr	r1, [r1, #16]
    5e1c:	bl	5640 <eval_float>
    5e20:	cmp	r0, #0
    5e24:	bne	5880 <eval_float+0x240>
    5e28:	ldr	r1, [r4, #20]
    5e2c:	mov	r0, r6
    5e30:	add	r2, sp, #32
    5e34:	bl	5640 <eval_float>
    5e38:	subs	r7, r0, #0
    5e3c:	bne	5880 <eval_float+0x240>
    5e40:	vldr	d7, [sp, #24]
    5e44:	vldr	d6, [sp, #32]
    5e48:	vadd.f64	d7, d7, d6
    5e4c:	vstr	d7, [r5]
    5e50:	b	57e0 <eval_float+0x1a0>
    5e54:	ldr	r1, [r1, #16]
    5e58:	bl	5640 <eval_float>
    5e5c:	subs	r7, r0, #0
    5e60:	bne	5880 <eval_float+0x240>
    5e64:	vldr	d7, [r5]
    5e68:	vcmpe.f64	d7, #0.0
    5e6c:	vmrs	APSR_nzcv, fpscr
    5e70:	vneglt.f64	d7, d7
    5e74:	vstr	d7, [r5]
    5e78:	b	57e0 <eval_float+0x1a0>
    5e7c:	add	r2, sp, #24
    5e80:	ldr	r1, [r1, #16]
    5e84:	bl	5640 <eval_float>
    5e88:	cmp	r0, #0
    5e8c:	bne	5880 <eval_float+0x240>
    5e90:	ldr	r1, [r4, #20]
    5e94:	mov	r0, r6
    5e98:	add	r2, sp, #32
    5e9c:	bl	5640 <eval_float>
    5ea0:	subs	r7, r0, #0
    5ea4:	bne	5880 <eval_float+0x240>
    5ea8:	vldr	d6, [sp, #24]
    5eac:	vldr	d7, [sp, #32]
    5eb0:	vcmp.f64	d6, d7
    5eb4:	vmrs	APSR_nzcv, fpscr
    5eb8:	vmovgt.f64	d7, d6
    5ebc:	vstr	d7, [r5]
    5ec0:	b	57e0 <eval_float+0x1a0>
    5ec4:	add	r2, sp, #32
    5ec8:	ldr	r1, [r1, #16]
    5ecc:	bl	629c <eval_boolean>
    5ed0:	subs	r7, r0, #0
    5ed4:	bne	5880 <eval_float+0x240>
    5ed8:	ldr	r3, [sp, #32]
    5edc:	mov	r2, r5
    5ee0:	cmp	r3, #0
    5ee4:	beq	6048 <eval_float+0xa08>
    5ee8:	ldr	r1, [r4, #20]
    5eec:	mov	r0, r6
    5ef0:	bl	5640 <eval_float>
    5ef4:	cmp	r0, #0
    5ef8:	beq	57e0 <eval_float+0x1a0>
    5efc:	b	5880 <eval_float+0x240>
    5f00:	ldr	r1, [r1, #16]
    5f04:	bl	5640 <eval_float>
    5f08:	subs	r7, r0, #0
    5f0c:	bne	5880 <eval_float+0x240>
    5f10:	vldr	d0, [r5]
    5f14:	bl	0 <floor>
    5f18:	vstr	d0, [r5]
    5f1c:	b	57e0 <eval_float+0x1a0>
    5f20:	add	r2, sp, #24
    5f24:	ldr	r1, [r1, #16]
    5f28:	bl	5640 <eval_float>
    5f2c:	cmp	r0, #0
    5f30:	bne	5880 <eval_float+0x240>
    5f34:	ldr	r1, [r4, #20]
    5f38:	mov	r0, r6
    5f3c:	add	r2, sp, #32
    5f40:	bl	5640 <eval_float>
    5f44:	subs	r7, r0, #0
    5f48:	bne	5880 <eval_float+0x240>
    5f4c:	vldr	d1, [sp, #32]
    5f50:	vcmp.f64	d1, #0.0
    5f54:	vmrs	APSR_nzcv, fpscr
    5f58:	beq	618c <eval_float+0xb4c>
    5f5c:	vldr	d0, [sp, #24]
    5f60:	bl	0 <fmod>
    5f64:	vstr	d0, [r5]
    5f68:	b	57e0 <eval_float+0x1a0>
    5f6c:	add	r2, sp, #24
    5f70:	ldr	r1, [r1, #16]
    5f74:	bl	5640 <eval_float>
    5f78:	cmp	r0, #0
    5f7c:	bne	5880 <eval_float+0x240>
    5f80:	ldr	r1, [r4, #20]
    5f84:	mov	r0, r6
    5f88:	add	r2, sp, #32
    5f8c:	bl	5640 <eval_float>
    5f90:	subs	r7, r0, #0
    5f94:	bne	5880 <eval_float+0x240>
    5f98:	vldr	d6, [sp, #24]
    5f9c:	vldr	d7, [sp, #32]
    5fa0:	vcmp.f64	d6, d7
    5fa4:	vmrs	APSR_nzcv, fpscr
    5fa8:	vmovmi.f64	d7, d6
    5fac:	b	5e74 <eval_float+0x834>
    5fb0:	add	r2, sp, #24
    5fb4:	ldr	r1, [r1, #16]
    5fb8:	bl	5640 <eval_float>
    5fbc:	cmp	r0, #0
    5fc0:	bne	5880 <eval_float+0x240>
    5fc4:	ldr	r1, [r4, #20]
    5fc8:	mov	r0, r6
    5fcc:	add	r2, sp, #32
    5fd0:	bl	5640 <eval_float>
    5fd4:	subs	r7, r0, #0
    5fd8:	bne	5880 <eval_float+0x240>
    5fdc:	vldr	d7, [sp, #24]
    5fe0:	vldr	d6, [sp, #32]
    5fe4:	vmul.f64	d7, d7, d6
    5fe8:	vstr	d7, [r5]
    5fec:	b	57e0 <eval_float+0x1a0>
    5ff0:	ldr	r3, [pc, #-592]	; 5da8 <eval_float+0x768>
    5ff4:	ldr	r2, [pc, #-592]	; 5dac <eval_float+0x76c>
    5ff8:	ldr	r1, [pc, #-592]	; 5db0 <eval_float+0x770>
    5ffc:	ldr	r0, [pc, #-592]	; 5db4 <eval_float+0x774>
    6000:	bl	0 <__assert_fail>
    6004:	mov	r0, sl
    6008:	bl	0 <coda_cursor_goto_next_array_element>
    600c:	cmp	r0, #0
    6010:	bne	5880 <eval_float+0x240>
    6014:	ldr	r3, [sp, #20]
    6018:	b	5ccc <eval_float+0x68c>
    601c:	mov	r0, sl
    6020:	bl	0 <coda_cursor_goto_next_array_element>
    6024:	cmp	r0, #0
    6028:	bne	5880 <eval_float+0x240>
    602c:	ldr	r3, [sp, #20]
    6030:	b	5be8 <eval_float+0x5a8>
    6034:	mov	r1, fp
    6038:	mov	r0, sl
    603c:	mov	r2, #520	; 0x208
    6040:	bl	0 <memcpy>
    6044:	b	57e0 <eval_float+0x1a0>
    6048:	ldr	r1, [r4, #24]
    604c:	mov	r0, r6
    6050:	bl	5640 <eval_float>
    6054:	cmp	r0, #0
    6058:	beq	57e0 <eval_float+0x1a0>
    605c:	b	5880 <eval_float+0x240>
    6060:	ldr	r3, [r0]
    6064:	cmp	r3, #0
    6068:	beq	621c <eval_float+0xbdc>
    606c:	add	r8, r0, #8
    6070:	mov	r1, r8
    6074:	mov	r2, #520	; 0x208
    6078:	add	r0, sp, #32
    607c:	bl	0 <memcpy>
    6080:	mov	r0, r6
    6084:	mov	r1, r4
    6088:	bl	5294 <eval_cursor>
    608c:	subs	r6, r0, #0
    6090:	bne	5880 <eval_float+0x240>
    6094:	bl	0 <coda_get_option_perform_conversions>
    6098:	mov	r4, r0
    609c:	mov	r0, r6
    60a0:	bl	0 <coda_set_option_perform_conversions>
    60a4:	mov	r1, r5
    60a8:	mov	r0, r8
    60ac:	bl	0 <coda_cursor_read_double>
    60b0:	subs	r7, r0, #0
    60b4:	mov	r0, r4
    60b8:	bne	61bc <eval_float+0xb7c>
    60bc:	bl	0 <coda_set_option_perform_conversions>
    60c0:	add	r1, sp, #32
    60c4:	mov	r0, r8
    60c8:	mov	r2, #520	; 0x208
    60cc:	bl	0 <memcpy>
    60d0:	b	57e0 <eval_float+0x1a0>
    60d4:	bl	3c6c <eval_integer>
    60d8:	cmp	r0, #0
    60dc:	bne	5880 <eval_float+0x240>
    60e0:	ldrd	r0, [sp, #32]
    60e4:	adds	r2, r0, #64	; 0x40
    60e8:	adc	r3, r1, #0
    60ec:	cmp	r3, #0
    60f0:	cmpeq	r2, #128	; 0x80
    60f4:	bhi	6134 <eval_float+0xaf4>
    60f8:	cmp	r0, #0
    60fc:	vldr	d6, [sp, #24]
    6100:	blt	614c <eval_float+0xb0c>
    6104:	sub	r0, r0, #1
    6108:	vldr	d7, [pc, #328]	; 6258 <eval_float+0xc18>
    610c:	beq	5e74 <eval_float+0x834>
    6110:	sub	r0, r0, #1
    6114:	cmn	r0, #1
    6118:	vmul.f64	d7, d7, d6
    611c:	bne	6110 <eval_float+0xad0>
    6120:	b	5e74 <eval_float+0x834>
    6124:	vsub.f64	d0, d7, d0
    6128:	bl	0 <ceil>
    612c:	vstr	d0, [r5]
    6130:	b	57e0 <eval_float+0x1a0>
    6134:	bl	0 <__aeabi_l2d>
    6138:	vldr	d0, [sp, #24]
    613c:	vmov	d1, r0, r1
    6140:	bl	0 <pow>
    6144:	vstr	d0, [r5]
    6148:	b	57e0 <eval_float+0x1a0>
    614c:	vldr	d5, [pc, #260]	; 6258 <eval_float+0xc18>
    6150:	add	r0, r0, #1
    6154:	add	r0, r0, #1
    6158:	cmp	r0, #1
    615c:	vmul.f64	d5, d5, d6
    6160:	bne	6154 <eval_float+0xb14>
    6164:	vldr	d6, [pc, #236]	; 6258 <eval_float+0xc18>
    6168:	vdiv.f64	d7, d6, d5
    616c:	b	5e74 <eval_float+0x834>
    6170:	bl	0 <free>
    6174:	ldr	r0, [sp, #24]
    6178:	b	587c <eval_float+0x23c>
    617c:	ldr	r1, [pc, #220]	; 6260 <eval_float+0xc20>
    6180:	mvn	r0, #400	; 0x190
    6184:	bl	0 <coda_set_error>
    6188:	b	5880 <eval_float+0x240>
    618c:	ldr	r1, [pc, #208]	; 6264 <eval_float+0xc24>
    6190:	mvn	r0, #400	; 0x190
    6194:	bl	0 <coda_set_error>
    6198:	b	5880 <eval_float+0x240>
    619c:	ldr	r1, [pc, #196]	; 6268 <eval_float+0xc28>
    61a0:	mvn	r0, #400	; 0x190
    61a4:	bl	0 <coda_set_error>
    61a8:	b	5880 <eval_float+0x240>
    61ac:	ldr	r1, [pc, #184]	; 626c <eval_float+0xc2c>
    61b0:	mvn	r0, #400	; 0x190
    61b4:	bl	0 <coda_set_error>
    61b8:	b	5880 <eval_float+0x240>
    61bc:	bl	0 <coda_set_option_perform_conversions>
    61c0:	b	5880 <eval_float+0x240>
    61c4:	ldr	r1, [pc, #164]	; 6270 <eval_float+0xc30>
    61c8:	mvn	r0, #400	; 0x190
    61cc:	bl	0 <coda_set_error>
    61d0:	b	5880 <eval_float+0x240>
    61d4:	ldr	r1, [pc, #152]	; 6274 <eval_float+0xc34>
    61d8:	mvn	r0, #102	; 0x66
    61dc:	bl	0 <coda_set_error>
    61e0:	b	5880 <eval_float+0x240>
    61e4:	ldr	r1, [pc, #140]	; 6278 <eval_float+0xc38>
    61e8:	mvn	r0, #400	; 0x190
    61ec:	bl	0 <coda_set_error>
    61f0:	b	5880 <eval_float+0x240>
    61f4:	ldr	r3, [pc, #128]	; 627c <eval_float+0xc3c>
    61f8:	ldr	r2, [pc, #128]	; 6280 <eval_float+0xc40>
    61fc:	ldr	r1, [pc, #128]	; 6284 <eval_float+0xc44>
    6200:	ldr	r0, [pc, #128]	; 6288 <eval_float+0xc48>
    6204:	bl	0 <__assert_fail>
    6208:	ldr	r3, [pc, #108]	; 627c <eval_float+0xc3c>
    620c:	ldr	r2, [pc, #120]	; 628c <eval_float+0xc4c>
    6210:	ldr	r1, [pc, #108]	; 6284 <eval_float+0xc44>
    6214:	ldr	r0, [pc, #108]	; 6288 <eval_float+0xc48>
    6218:	bl	0 <__assert_fail>
    621c:	ldr	r3, [pc, #88]	; 627c <eval_float+0xc3c>
    6220:	ldr	r2, [pc, #104]	; 6290 <eval_float+0xc50>
    6224:	ldr	r1, [pc, #88]	; 6284 <eval_float+0xc44>
    6228:	ldr	r0, [pc, #88]	; 6288 <eval_float+0xc48>
    622c:	bl	0 <__assert_fail>
    6230:	ldr	r3, [pc, #68]	; 627c <eval_float+0xc3c>
    6234:	ldr	r2, [pc, #88]	; 6294 <eval_float+0xc54>
    6238:	ldr	r1, [pc, #68]	; 6284 <eval_float+0xc44>
    623c:	ldr	r0, [pc, #68]	; 6288 <eval_float+0xc48>
    6240:	bl	0 <__assert_fail>
    6244:	ldr	r3, [pc, #48]	; 627c <eval_float+0xc3c>
    6248:	ldr	r2, [pc, #72]	; 6298 <eval_float+0xc58>
    624c:	ldr	r1, [pc, #48]	; 6284 <eval_float+0xc44>
    6250:	ldr	r0, [pc, #48]	; 6288 <eval_float+0xc48>
    6254:	bl	0 <__assert_fail>
    6258:	.word	0x00000000
    625c:	.word	0x3ff00000
    6260:	.word	0x00000c10
    6264:	.word	0x00000a68
    6268:	.word	0x00000c28
    626c:	.word	0x00000a4c
    6270:	.word	0x00000bf0
    6274:	.word	0x00000a10
    6278:	.word	0x000009b8
    627c:	.word	0x0000003c
    6280:	.word	0x000006ca
    6284:	.word	0x000005b8
    6288:	.word	0x000007c4
    628c:	.word	0x00000756
    6290:	.word	0x0000058a
    6294:	.word	0x000006f7
    6298:	.word	0x00000727

0000629c <eval_boolean>:
    629c:	ldr	r3, [r1]
    62a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    62a4:	cmp	r3, #18
    62a8:	sub	sp, sp, #588	; 0x24c
    62ac:	beq	6418 <eval_boolean+0x17c>
    62b0:	sub	r3, r3, #4
    62b4:	mov	r6, r2
    62b8:	mov	r5, r0
    62bc:	mov	r4, r1
    62c0:	cmp	r3, #82	; 0x52
    62c4:	ldrls	pc, [pc, r3, lsl #2]
    62c8:	b	6ddc <eval_boolean+0xb40>
    62cc:	.word	0x00006d04
    62d0:	.word	0x00006ddc
    62d4:	.word	0x00006b30
    62d8:	.word	0x00006ddc
    62dc:	.word	0x00006ddc
    62e0:	.word	0x00006ddc
    62e4:	.word	0x00006ddc
    62e8:	.word	0x00006ad0
    62ec:	.word	0x00006ddc
    62f0:	.word	0x00006ddc
    62f4:	.word	0x00006ddc
    62f8:	.word	0x00006ddc
    62fc:	.word	0x00006ddc
    6300:	.word	0x00006ddc
    6304:	.word	0x00006ddc
    6308:	.word	0x00006ddc
    630c:	.word	0x00006ddc
    6310:	.word	0x00006ddc
    6314:	.word	0x00006ddc
    6318:	.word	0x00006ddc
    631c:	.word	0x00006ddc
    6320:	.word	0x00006a20
    6324:	.word	0x00006958
    6328:	.word	0x00006ddc
    632c:	.word	0x00006ddc
    6330:	.word	0x00006ddc
    6334:	.word	0x00006ddc
    6338:	.word	0x00006ddc
    633c:	.word	0x00006ddc
    6340:	.word	0x00006ddc
    6344:	.word	0x00006ddc
    6348:	.word	0x00006ddc
    634c:	.word	0x00006ddc
    6350:	.word	0x00006ddc
    6354:	.word	0x00006ddc
    6358:	.word	0x00006ddc
    635c:	.word	0x000068a8
    6360:	.word	0x00006c50
    6364:	.word	0x00006860
    6368:	.word	0x00006ddc
    636c:	.word	0x00006ddc
    6370:	.word	0x00006ddc
    6374:	.word	0x00006c2c
    6378:	.word	0x00006c08
    637c:	.word	0x000069fc
    6380:	.word	0x000069d8
    6384:	.word	0x00006ddc
    6388:	.word	0x000067ac
    638c:	.word	0x00006700
    6390:	.word	0x000066c8
    6394:	.word	0x000066a4
    6398:	.word	0x00006ddc
    639c:	.word	0x00006ddc
    63a0:	.word	0x00006ddc
    63a4:	.word	0x00006ddc
    63a8:	.word	0x00006ddc
    63ac:	.word	0x00006ddc
    63b0:	.word	0x000064cc
    63b4:	.word	0x000064a8
    63b8:	.word	0x00006ddc
    63bc:	.word	0x00006ddc
    63c0:	.word	0x00006ddc
    63c4:	.word	0x00006ddc
    63c8:	.word	0x00006ddc
    63cc:	.word	0x00006ddc
    63d0:	.word	0x00006ddc
    63d4:	.word	0x00006ddc
    63d8:	.word	0x00006598
    63dc:	.word	0x00006ddc
    63e0:	.word	0x00006ddc
    63e4:	.word	0x00006ddc
    63e8:	.word	0x00006ddc
    63ec:	.word	0x00006ddc
    63f0:	.word	0x00006ddc
    63f4:	.word	0x00006ddc
    63f8:	.word	0x00006ddc
    63fc:	.word	0x00006ddc
    6400:	.word	0x00006ddc
    6404:	.word	0x0000647c
    6408:	.word	0x00006ddc
    640c:	.word	0x00006ddc
    6410:	.word	0x00006ddc
    6414:	.word	0x00006430
    6418:	ldr	r3, [r1, #12]
    641c:	mov	r7, #0
    6420:	str	r3, [r2]
    6424:	mov	r0, r7
    6428:	add	sp, sp, #588	; 0x24c
    642c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6430:	ldr	r3, [r1, #12]
    6434:	ldr	r1, [r1, #16]
    6438:	ldrb	r3, [r3]
    643c:	sub	r2, r3, #39	; 0x27
    6440:	add	r3, r0, r3, lsl #3
    6444:	sub	sl, r3, #304	; 0x130
    6448:	add	r2, r0, r2, lsl #3
    644c:	ldrd	r8, [sl, #-8]
    6450:	bl	3c6c <eval_integer>
    6454:	cmp	r0, #0
    6458:	bne	6898 <eval_boolean+0x5fc>
    645c:	mov	r2, r6
    6460:	ldr	r1, [r4, #20]
    6464:	mov	r0, r5
    6468:	bl	629c <eval_boolean>
    646c:	subs	r7, r0, #0
    6470:	bne	6898 <eval_boolean+0x5fc>
    6474:	strd	r8, [sl, #-8]
    6478:	b	6424 <eval_boolean+0x188>
    647c:	ldr	r3, [r0]
    6480:	cmp	r3, #0
    6484:	beq	7384 <eval_boolean+0x10e8>
    6488:	ldr	r2, [r0, #560]	; 0x230
    648c:	cmp	r2, #0
    6490:	beq	702c <eval_boolean+0xd90>
    6494:	ldr	r1, [pc, #3996]	; 7438 <eval_boolean+0x119c>
    6498:	mvn	r0, #400	; 0x190
    649c:	bl	0 <coda_set_error>
    64a0:	mvn	r7, #0
    64a4:	b	6424 <eval_boolean+0x188>
    64a8:	ldr	r1, [r1, #16]
    64ac:	bl	629c <eval_boolean>
    64b0:	subs	r7, r0, #0
    64b4:	bne	6898 <eval_boolean+0x5fc>
    64b8:	ldr	r3, [r6]
    64bc:	clz	r3, r3
    64c0:	lsr	r3, r3, #5
    64c4:	str	r3, [r6]
    64c8:	b	6424 <eval_boolean+0x188>
    64cc:	ldr	r1, [r1, #16]
    64d0:	ldr	r3, [r1, #4]
    64d4:	cmp	r3, #2
    64d8:	beq	6eec <eval_boolean+0xc50>
    64dc:	ldr	r2, [r4, #20]
    64e0:	ldr	r2, [r2, #4]
    64e4:	cmp	r2, #2
    64e8:	beq	6eec <eval_boolean+0xc50>
    64ec:	cmp	r3, #1
    64f0:	beq	7244 <eval_boolean+0xfa8>
    64f4:	cmp	r3, #3
    64f8:	bne	7398 <eval_boolean+0x10fc>
    64fc:	add	r3, sp, #56	; 0x38
    6500:	str	r3, [sp]
    6504:	add	r2, sp, #40	; 0x28
    6508:	add	r3, sp, #48	; 0x30
    650c:	bl	2430 <eval_string>
    6510:	cmp	r0, #0
    6514:	bne	6898 <eval_boolean+0x5fc>
    6518:	add	r3, sp, #64	; 0x40
    651c:	ldr	r1, [r4, #20]
    6520:	mov	r0, r5
    6524:	str	r3, [sp]
    6528:	add	r2, sp, #44	; 0x2c
    652c:	add	r3, sp, #52	; 0x34
    6530:	bl	2430 <eval_string>
    6534:	subs	r7, r0, #0
    6538:	bne	728c <eval_boolean+0xff0>
    653c:	ldr	ip, [sp, #64]	; 0x40
    6540:	ldr	r4, [sp, #52]	; 0x34
    6544:	ldr	r5, [sp, #48]	; 0x30
    6548:	ldr	r8, [sp, #56]	; 0x38
    654c:	ldr	r3, [sp, #44]	; 0x2c
    6550:	ldr	r0, [sp, #40]	; 0x28
    6554:	mov	r1, r5
    6558:	mov	r2, r8
    655c:	stm	sp, {r4, ip}
    6560:	bl	0 <compare_strings>
    6564:	adds	r0, r0, #0
    6568:	movne	r0, #1
    656c:	cmp	r5, #0
    6570:	str	r0, [r6]
    6574:	ble	6584 <eval_boolean+0x2e8>
    6578:	mov	r0, r8
    657c:	bl	0 <free>
    6580:	ldr	r4, [sp, #52]	; 0x34
    6584:	cmp	r4, #0
    6588:	ble	6424 <eval_boolean+0x188>
    658c:	ldr	r0, [sp, #64]	; 0x40
    6590:	bl	0 <free>
    6594:	b	6424 <eval_boolean+0x188>
    6598:	add	r3, sp, #56	; 0x38
    659c:	ldr	r1, [r1, #16]
    65a0:	add	r2, sp, #48	; 0x30
    65a4:	str	r3, [sp]
    65a8:	add	r3, sp, #52	; 0x34
    65ac:	bl	2430 <eval_string>
    65b0:	cmp	r0, #0
    65b4:	bne	6898 <eval_boolean+0x5fc>
    65b8:	add	r3, sp, #44	; 0x2c
    65bc:	ldr	r1, [r4, #20]
    65c0:	mov	r0, r5
    65c4:	str	r3, [sp]
    65c8:	add	r2, sp, #36	; 0x24
    65cc:	add	r3, sp, #40	; 0x28
    65d0:	bl	2430 <eval_string>
    65d4:	subs	r7, r0, #0
    65d8:	bne	7298 <eval_boolean+0xffc>
    65dc:	ldr	r3, [sp, #52]	; 0x34
    65e0:	cmp	r3, #0
    65e4:	ble	700c <eval_boolean+0xd70>
    65e8:	ldr	r2, [sp, #56]	; 0x38
    65ec:	ldr	r1, [sp, #48]	; 0x30
    65f0:	add	r2, r2, r3
    65f4:	add	r3, sp, #32
    65f8:	strb	r7, [r2, r1]
    65fc:	ldr	r2, [sp, #48]	; 0x30
    6600:	ldr	r0, [sp, #56]	; 0x38
    6604:	str	r7, [sp]
    6608:	add	r0, r0, r2
    660c:	mov	r1, #36	; 0x24
    6610:	add	r2, sp, #28
    6614:	bl	0 <coda_pcre_compile>
    6618:	mov	r4, r0
    661c:	ldr	r0, [sp, #56]	; 0x38
    6620:	cmp	r0, #0
    6624:	beq	662c <eval_boolean+0x390>
    6628:	bl	0 <free>
    662c:	cmp	r4, #0
    6630:	beq	7338 <eval_boolean+0x109c>
    6634:	ldr	r0, [sp, #44]	; 0x2c
    6638:	cmp	r0, #0
    663c:	beq	70c0 <eval_boolean+0xe24>
    6640:	mov	r1, #0
    6644:	mov	lr, #48	; 0x30
    6648:	add	ip, sp, #64	; 0x40
    664c:	ldr	r2, [sp, #36]	; 0x24
    6650:	ldr	r3, [sp, #40]	; 0x28
    6654:	add	r2, r0, r2
    6658:	stmib	sp, {r1, ip, lr}
    665c:	mov	r0, r4
    6660:	str	r1, [sp]
    6664:	bl	0 <coda_pcre_exec>
    6668:	mov	r5, r0
    666c:	ldr	r0, [sp, #44]	; 0x2c
    6670:	bl	0 <free>
    6674:	ldr	r3, [pc, #3520]	; 743c <eval_boolean+0x11a0>
    6678:	mov	r0, r4
    667c:	ldr	r3, [r3]
    6680:	blx	r3
    6684:	cmn	r5, #1
    6688:	blt	7324 <eval_boolean+0x1088>
    668c:	cmp	r5, #0
    6690:	beq	7314 <eval_boolean+0x1078>
    6694:	movgt	r3, #1
    6698:	movle	r3, #0
    669c:	str	r3, [r6]
    66a0:	b	6424 <eval_boolean+0x188>
    66a4:	ldr	r1, [r1, #16]
    66a8:	bl	629c <eval_boolean>
    66ac:	cmp	r0, #0
    66b0:	bne	6898 <eval_boolean+0x5fc>
    66b4:	ldr	r3, [r6]
    66b8:	cmp	r3, #0
    66bc:	beq	66e4 <eval_boolean+0x448>
    66c0:	mov	r7, #0
    66c4:	b	6424 <eval_boolean+0x188>
    66c8:	ldr	r1, [r1, #16]
    66cc:	bl	629c <eval_boolean>
    66d0:	cmp	r0, #0
    66d4:	bne	6898 <eval_boolean+0x5fc>
    66d8:	ldr	r3, [r6]
    66dc:	cmp	r3, #0
    66e0:	beq	66c0 <eval_boolean+0x424>
    66e4:	mov	r2, r6
    66e8:	ldr	r1, [r4, #20]
    66ec:	mov	r0, r5
    66f0:	bl	629c <eval_boolean>
    66f4:	adds	r7, r0, #0
    66f8:	mvnne	r7, #0
    66fc:	b	6424 <eval_boolean+0x188>
    6700:	ldr	r1, [r1, #16]
    6704:	ldr	r3, [r1, #4]
    6708:	cmp	r3, #2
    670c:	beq	6ea0 <eval_boolean+0xc04>
    6710:	ldr	r2, [r4, #20]
    6714:	ldr	r2, [r2, #4]
    6718:	cmp	r2, #2
    671c:	beq	6ea0 <eval_boolean+0xc04>
    6720:	cmp	r3, #1
    6724:	beq	7104 <eval_boolean+0xe68>
    6728:	cmp	r3, #3
    672c:	bne	73e8 <eval_boolean+0x114c>
    6730:	add	r3, sp, #56	; 0x38
    6734:	str	r3, [sp]
    6738:	add	r2, sp, #40	; 0x28
    673c:	add	r3, sp, #48	; 0x30
    6740:	bl	2430 <eval_string>
    6744:	cmp	r0, #0
    6748:	bne	6898 <eval_boolean+0x5fc>
    674c:	add	r3, sp, #64	; 0x40
    6750:	ldr	r1, [r4, #20]
    6754:	mov	r0, r5
    6758:	str	r3, [sp]
    675c:	add	r2, sp, #44	; 0x2c
    6760:	add	r3, sp, #52	; 0x34
    6764:	bl	2430 <eval_string>
    6768:	subs	r7, r0, #0
    676c:	bne	728c <eval_boolean+0xff0>
    6770:	ldr	ip, [sp, #64]	; 0x40
    6774:	ldr	r4, [sp, #52]	; 0x34
    6778:	ldr	r5, [sp, #48]	; 0x30
    677c:	ldr	r8, [sp, #56]	; 0x38
    6780:	ldr	r3, [sp, #44]	; 0x2c
    6784:	ldr	r0, [sp, #40]	; 0x28
    6788:	mov	r1, r5
    678c:	mov	r2, r8
    6790:	stm	sp, {r4, ip}
    6794:	bl	0 <compare_strings>
    6798:	cmp	r5, #0
    679c:	lsr	r0, r0, #31
    67a0:	str	r0, [r6]
    67a4:	bgt	6578 <eval_boolean+0x2dc>
    67a8:	b	6584 <eval_boolean+0x2e8>
    67ac:	ldr	r1, [r1, #16]
    67b0:	ldr	r3, [r1, #4]
    67b4:	cmp	r3, #2
    67b8:	beq	6f38 <eval_boolean+0xc9c>
    67bc:	ldr	r2, [r4, #20]
    67c0:	ldr	r2, [r2, #4]
    67c4:	cmp	r2, #2
    67c8:	beq	6f38 <eval_boolean+0xc9c>
    67cc:	cmp	r3, #1
    67d0:	beq	714c <eval_boolean+0xeb0>
    67d4:	cmp	r3, #3
    67d8:	bne	7424 <eval_boolean+0x1188>
    67dc:	add	r3, sp, #56	; 0x38
    67e0:	str	r3, [sp]
    67e4:	add	r2, sp, #40	; 0x28
    67e8:	add	r3, sp, #48	; 0x30
    67ec:	bl	2430 <eval_string>
    67f0:	cmp	r0, #0
    67f4:	bne	6898 <eval_boolean+0x5fc>
    67f8:	add	r3, sp, #64	; 0x40
    67fc:	ldr	r1, [r4, #20]
    6800:	mov	r0, r5
    6804:	str	r3, [sp]
    6808:	add	r2, sp, #44	; 0x2c
    680c:	add	r3, sp, #52	; 0x34
    6810:	bl	2430 <eval_string>
    6814:	subs	r7, r0, #0
    6818:	bne	728c <eval_boolean+0xff0>
    681c:	ldr	ip, [sp, #64]	; 0x40
    6820:	ldr	r4, [sp, #52]	; 0x34
    6824:	ldr	r5, [sp, #48]	; 0x30
    6828:	ldr	r8, [sp, #56]	; 0x38
    682c:	ldr	r3, [sp, #44]	; 0x2c
    6830:	ldr	r0, [sp, #40]	; 0x28
    6834:	mov	r1, r5
    6838:	mov	r2, r8
    683c:	stm	sp, {r4, ip}
    6840:	bl	0 <compare_strings>
    6844:	cmp	r0, #0
    6848:	movgt	r0, #0
    684c:	movle	r0, #1
    6850:	cmp	r5, #0
    6854:	str	r0, [r6]
    6858:	bgt	6578 <eval_boolean+0x2dc>
    685c:	b	6584 <eval_boolean+0x2e8>
    6860:	add	r2, sp, #64	; 0x40
    6864:	ldr	r1, [r1, #16]
    6868:	bl	629c <eval_boolean>
    686c:	subs	r7, r0, #0
    6870:	bne	6898 <eval_boolean+0x5fc>
    6874:	ldr	r3, [sp, #64]	; 0x40
    6878:	mov	r2, r6
    687c:	cmp	r3, #0
    6880:	beq	6df0 <eval_boolean+0xb54>
    6884:	ldr	r1, [r4, #20]
    6888:	mov	r0, r5
    688c:	bl	629c <eval_boolean>
    6890:	cmp	r0, #0
    6894:	beq	6424 <eval_boolean+0x188>
    6898:	mvn	r7, #0
    689c:	mov	r0, r7
    68a0:	add	sp, sp, #588	; 0x24c
    68a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    68a8:	ldr	r1, [r1, #16]
    68ac:	ldr	r3, [r1, #4]
    68b0:	cmp	r3, #2
    68b4:	beq	6e54 <eval_boolean+0xbb8>
    68b8:	ldr	r2, [r4, #20]
    68bc:	ldr	r2, [r2, #4]
    68c0:	cmp	r2, #2
    68c4:	beq	6e54 <eval_boolean+0xbb8>
    68c8:	cmp	r3, #1
    68cc:	beq	7210 <eval_boolean+0xf74>
    68d0:	cmp	r3, #3
    68d4:	bne	73ac <eval_boolean+0x1110>
    68d8:	add	r3, sp, #56	; 0x38
    68dc:	str	r3, [sp]
    68e0:	add	r2, sp, #40	; 0x28
    68e4:	add	r3, sp, #48	; 0x30
    68e8:	bl	2430 <eval_string>
    68ec:	cmp	r0, #0
    68f0:	bne	6898 <eval_boolean+0x5fc>
    68f4:	add	r3, sp, #64	; 0x40
    68f8:	ldr	r1, [r4, #20]
    68fc:	mov	r0, r5
    6900:	str	r3, [sp]
    6904:	add	r2, sp, #44	; 0x2c
    6908:	add	r3, sp, #52	; 0x34
    690c:	bl	2430 <eval_string>
    6910:	subs	r7, r0, #0
    6914:	bne	728c <eval_boolean+0xff0>
    6918:	ldr	ip, [sp, #64]	; 0x40
    691c:	ldr	r4, [sp, #52]	; 0x34
    6920:	ldr	r5, [sp, #48]	; 0x30
    6924:	ldr	r8, [sp, #56]	; 0x38
    6928:	ldr	r3, [sp, #44]	; 0x2c
    692c:	ldr	r0, [sp, #40]	; 0x28
    6930:	mov	r1, r5
    6934:	mov	r2, r8
    6938:	stm	sp, {r4, ip}
    693c:	bl	0 <compare_strings>
    6940:	cmp	r5, #0
    6944:	mvn	r0, r0
    6948:	lsr	r0, r0, #31
    694c:	str	r0, [r6]
    6950:	bgt	6578 <eval_boolean+0x2dc>
    6954:	b	6584 <eval_boolean+0x2e8>
    6958:	ldr	r3, [r0]
    695c:	cmp	r3, #0
    6960:	beq	73fc <eval_boolean+0x1160>
    6964:	add	r8, r0, #8
    6968:	add	sl, sp, #64	; 0x40
    696c:	mov	r1, r8
    6970:	mov	r2, #520	; 0x208
    6974:	mov	r0, sl
    6978:	bl	0 <memcpy>
    697c:	ldr	r1, [r4, #16]
    6980:	mov	r0, r5
    6984:	bl	5294 <eval_cursor>
    6988:	cmp	r0, #0
    698c:	beq	6fd0 <eval_boolean+0xd34>
    6990:	ldr	r3, [pc, #2728]	; 7440 <eval_boolean+0x11a4>
    6994:	bl	0 <__aeabi_read_tp>
    6998:	mvn	r2, #400	; 0x190
    699c:	ldr	r3, [pc, r3]
    69a0:	mov	ip, r0
    69a4:	ldr	r3, [r0, r3]
    69a8:	cmp	r3, r2
    69ac:	beq	6898 <eval_boolean+0x5fc>
    69b0:	ldr	r3, [pc, #2700]	; 7444 <eval_boolean+0x11a8>
    69b4:	mov	r7, #0
    69b8:	mov	r1, sl
    69bc:	ldr	r3, [pc, r3]
    69c0:	mov	r0, r8
    69c4:	mov	r2, #520	; 0x208
    69c8:	str	r7, [ip, r3]
    69cc:	str	r7, [r6]
    69d0:	bl	0 <memcpy>
    69d4:	b	6424 <eval_boolean+0x188>
    69d8:	ldr	r1, [r1, #16]
    69dc:	add	r2, sp, #64	; 0x40
    69e0:	bl	5640 <eval_float>
    69e4:	subs	r7, r0, #0
    69e8:	bne	6898 <eval_boolean+0x5fc>
    69ec:	vldr	d0, [sp, #64]	; 0x40
    69f0:	bl	0 <coda_isPlusInf>
    69f4:	str	r0, [r6]
    69f8:	b	6424 <eval_boolean+0x188>
    69fc:	ldr	r1, [r1, #16]
    6a00:	add	r2, sp, #64	; 0x40
    6a04:	bl	5640 <eval_float>
    6a08:	subs	r7, r0, #0
    6a0c:	bne	6898 <eval_boolean+0x5fc>
    6a10:	vldr	d0, [sp, #64]	; 0x40
    6a14:	bl	0 <coda_isNaN>
    6a18:	str	r0, [r6]
    6a1c:	b	6424 <eval_boolean+0x188>
    6a20:	ldr	r1, [r1, #16]
    6a24:	ldr	r3, [r1, #4]
    6a28:	cmp	r3, #2
    6a2c:	beq	6e08 <eval_boolean+0xb6c>
    6a30:	ldr	r2, [r4, #20]
    6a34:	ldr	r2, [r2, #4]
    6a38:	cmp	r2, #2
    6a3c:	beq	6e08 <eval_boolean+0xb6c>
    6a40:	cmp	r3, #1
    6a44:	beq	71c8 <eval_boolean+0xf2c>
    6a48:	cmp	r3, #3
    6a4c:	bne	7410 <eval_boolean+0x1174>
    6a50:	add	r3, sp, #56	; 0x38
    6a54:	str	r3, [sp]
    6a58:	add	r2, sp, #40	; 0x28
    6a5c:	add	r3, sp, #48	; 0x30
    6a60:	bl	2430 <eval_string>
    6a64:	cmp	r0, #0
    6a68:	bne	6898 <eval_boolean+0x5fc>
    6a6c:	add	r3, sp, #64	; 0x40
    6a70:	ldr	r1, [r4, #20]
    6a74:	mov	r0, r5
    6a78:	str	r3, [sp]
    6a7c:	add	r2, sp, #44	; 0x2c
    6a80:	add	r3, sp, #52	; 0x34
    6a84:	bl	2430 <eval_string>
    6a88:	subs	r7, r0, #0
    6a8c:	bne	728c <eval_boolean+0xff0>
    6a90:	ldr	ip, [sp, #64]	; 0x40
    6a94:	ldr	r4, [sp, #52]	; 0x34
    6a98:	ldr	r5, [sp, #48]	; 0x30
    6a9c:	ldr	r8, [sp, #56]	; 0x38
    6aa0:	ldr	r3, [sp, #44]	; 0x2c
    6aa4:	ldr	r0, [sp, #40]	; 0x28
    6aa8:	mov	r1, r5
    6aac:	mov	r2, r8
    6ab0:	stm	sp, {r4, ip}
    6ab4:	bl	0 <compare_strings>
    6ab8:	cmp	r5, #0
    6abc:	clz	r0, r0
    6ac0:	lsr	r0, r0, #5
    6ac4:	str	r0, [r6]
    6ac8:	bgt	6578 <eval_boolean+0x2dc>
    6acc:	b	6584 <eval_boolean+0x2e8>
    6ad0:	ldr	r3, [r0]
    6ad4:	cmp	r3, #0
    6ad8:	beq	73c0 <eval_boolean+0x1124>
    6adc:	add	r8, r0, #8
    6ae0:	mov	r1, r8
    6ae4:	mov	r2, #520	; 0x208
    6ae8:	add	r0, sp, #64	; 0x40
    6aec:	bl	0 <memcpy>
    6af0:	ldr	r1, [r4, #16]
    6af4:	mov	r0, r5
    6af8:	bl	5294 <eval_cursor>
    6afc:	cmp	r0, #0
    6b00:	bne	6898 <eval_boolean+0x5fc>
    6b04:	mov	r2, r6
    6b08:	ldr	r1, [r4, #20]
    6b0c:	mov	r0, r5
    6b10:	bl	629c <eval_boolean>
    6b14:	subs	r7, r0, #0
    6b18:	bne	6898 <eval_boolean+0x5fc>
    6b1c:	add	r1, sp, #64	; 0x40
    6b20:	mov	r0, r8
    6b24:	mov	r2, #520	; 0x208
    6b28:	bl	0 <memcpy>
    6b2c:	b	6424 <eval_boolean+0x188>
    6b30:	ldr	r3, [r0]
    6b34:	cmp	r3, #0
    6b38:	beq	735c <eval_boolean+0x10c0>
    6b3c:	add	r8, r0, #8
    6b40:	add	sl, sp, #64	; 0x40
    6b44:	mov	r1, r8
    6b48:	mov	r2, #520	; 0x208
    6b4c:	mov	r0, sl
    6b50:	bl	0 <memcpy>
    6b54:	ldr	r1, [r4, #16]
    6b58:	mov	r0, r5
    6b5c:	bl	5294 <eval_cursor>
    6b60:	cmp	r0, #0
    6b64:	bne	6898 <eval_boolean+0x5fc>
    6b68:	add	r1, sp, #52	; 0x34
    6b6c:	mov	r0, r8
    6b70:	bl	0 <coda_cursor_get_num_elements>
    6b74:	subs	r7, r0, #0
    6b78:	bne	6898 <eval_boolean+0x5fc>
    6b7c:	ldr	r3, [sp, #52]	; 0x34
    6b80:	cmp	r3, #0
    6b84:	ble	70fc <eval_boolean+0xe60>
    6b88:	mov	r0, r8
    6b8c:	bl	0 <coda_cursor_goto_first_array_element>
    6b90:	cmp	r0, #0
    6b94:	bne	6898 <eval_boolean+0x5fc>
    6b98:	ldr	r3, [sp, #52]	; 0x34
    6b9c:	cmp	r3, #0
    6ba0:	ble	70fc <eval_boolean+0xe60>
    6ba4:	mov	r9, r7
    6ba8:	add	fp, sp, #56	; 0x38
    6bac:	b	6bbc <eval_boolean+0x920>
    6bb0:	add	r9, r9, #1
    6bb4:	cmp	r3, r9
    6bb8:	ble	70fc <eval_boolean+0xe60>
    6bbc:	mov	r2, fp
    6bc0:	ldr	r1, [r4, #20]
    6bc4:	mov	r0, r5
    6bc8:	bl	629c <eval_boolean>
    6bcc:	cmp	r0, #0
    6bd0:	bne	6898 <eval_boolean+0x5fc>
    6bd4:	ldr	r3, [sp, #56]	; 0x38
    6bd8:	cmp	r3, #0
    6bdc:	bne	72f8 <eval_boolean+0x105c>
    6be0:	ldr	r3, [sp, #52]	; 0x34
    6be4:	sub	r2, r3, #1
    6be8:	cmp	r2, r9
    6bec:	ble	6bb0 <eval_boolean+0x914>
    6bf0:	mov	r0, r8
    6bf4:	bl	0 <coda_cursor_goto_next_array_element>
    6bf8:	cmp	r0, #0
    6bfc:	bne	6898 <eval_boolean+0x5fc>
    6c00:	ldr	r3, [sp, #52]	; 0x34
    6c04:	b	6bb0 <eval_boolean+0x914>
    6c08:	ldr	r1, [r1, #16]
    6c0c:	add	r2, sp, #64	; 0x40
    6c10:	bl	5640 <eval_float>
    6c14:	subs	r7, r0, #0
    6c18:	bne	6898 <eval_boolean+0x5fc>
    6c1c:	vldr	d0, [sp, #64]	; 0x40
    6c20:	bl	0 <coda_isMinInf>
    6c24:	str	r0, [r6]
    6c28:	b	6424 <eval_boolean+0x188>
    6c2c:	ldr	r1, [r1, #16]
    6c30:	add	r2, sp, #64	; 0x40
    6c34:	bl	5640 <eval_float>
    6c38:	subs	r7, r0, #0
    6c3c:	bne	6898 <eval_boolean+0x5fc>
    6c40:	vldr	d0, [sp, #64]	; 0x40
    6c44:	bl	0 <coda_isInf>
    6c48:	str	r0, [r6]
    6c4c:	b	6424 <eval_boolean+0x188>
    6c50:	ldr	r1, [r1, #16]
    6c54:	ldr	r3, [r1, #4]
    6c58:	cmp	r3, #2
    6c5c:	beq	6f84 <eval_boolean+0xce8>
    6c60:	ldr	r2, [r4, #20]
    6c64:	ldr	r2, [r2, #4]
    6c68:	cmp	r2, #2
    6c6c:	beq	6f84 <eval_boolean+0xce8>
    6c70:	cmp	r3, #1
    6c74:	beq	7194 <eval_boolean+0xef8>
    6c78:	cmp	r3, #3
    6c7c:	bne	73d4 <eval_boolean+0x1138>
    6c80:	add	r3, sp, #56	; 0x38
    6c84:	str	r3, [sp]
    6c88:	add	r2, sp, #40	; 0x28
    6c8c:	add	r3, sp, #48	; 0x30
    6c90:	bl	2430 <eval_string>
    6c94:	cmp	r0, #0
    6c98:	bne	6898 <eval_boolean+0x5fc>
    6c9c:	add	r3, sp, #64	; 0x40
    6ca0:	ldr	r1, [r4, #20]
    6ca4:	mov	r0, r5
    6ca8:	str	r3, [sp]
    6cac:	add	r2, sp, #44	; 0x2c
    6cb0:	add	r3, sp, #52	; 0x34
    6cb4:	bl	2430 <eval_string>
    6cb8:	subs	r7, r0, #0
    6cbc:	bne	728c <eval_boolean+0xff0>
    6cc0:	ldr	ip, [sp, #64]	; 0x40
    6cc4:	ldr	r4, [sp, #52]	; 0x34
    6cc8:	ldr	r5, [sp, #48]	; 0x30
    6ccc:	ldr	r8, [sp, #56]	; 0x38
    6cd0:	ldr	r3, [sp, #44]	; 0x2c
    6cd4:	ldr	r0, [sp, #40]	; 0x28
    6cd8:	mov	r1, r5
    6cdc:	mov	r2, r8
    6ce0:	stm	sp, {r4, ip}
    6ce4:	bl	0 <compare_strings>
    6ce8:	cmp	r0, #0
    6cec:	movle	r0, #0
    6cf0:	movgt	r0, #1
    6cf4:	cmp	r5, #0
    6cf8:	str	r0, [r6]
    6cfc:	bgt	6578 <eval_boolean+0x2dc>
    6d00:	b	6584 <eval_boolean+0x2e8>
    6d04:	ldr	r3, [r0]
    6d08:	cmp	r3, #0
    6d0c:	beq	7370 <eval_boolean+0x10d4>
    6d10:	add	r8, r0, #8
    6d14:	add	sl, sp, #64	; 0x40
    6d18:	mov	r1, r8
    6d1c:	mov	r2, #520	; 0x208
    6d20:	mov	r0, sl
    6d24:	bl	0 <memcpy>
    6d28:	ldr	r1, [r4, #16]
    6d2c:	mov	r0, r5
    6d30:	bl	5294 <eval_cursor>
    6d34:	cmp	r0, #0
    6d38:	bne	6898 <eval_boolean+0x5fc>
    6d3c:	add	r1, sp, #52	; 0x34
    6d40:	mov	r0, r8
    6d44:	bl	0 <coda_cursor_get_num_elements>
    6d48:	subs	r7, r0, #0
    6d4c:	bne	6898 <eval_boolean+0x5fc>
    6d50:	ldr	r3, [sp, #52]	; 0x34
    6d54:	cmp	r3, #0
    6d58:	ble	6ff0 <eval_boolean+0xd54>
    6d5c:	mov	r0, r8
    6d60:	bl	0 <coda_cursor_goto_first_array_element>
    6d64:	cmp	r0, #0
    6d68:	bne	6898 <eval_boolean+0x5fc>
    6d6c:	ldr	r3, [sp, #52]	; 0x34
    6d70:	cmp	r3, #0
    6d74:	ble	6ff0 <eval_boolean+0xd54>
    6d78:	mov	r9, r7
    6d7c:	add	fp, sp, #56	; 0x38
    6d80:	b	6d90 <eval_boolean+0xaf4>
    6d84:	add	r9, r9, #1
    6d88:	cmp	r9, r3
    6d8c:	bge	6ff0 <eval_boolean+0xd54>
    6d90:	mov	r2, fp
    6d94:	ldr	r1, [r4, #20]
    6d98:	mov	r0, r5
    6d9c:	bl	629c <eval_boolean>
    6da0:	cmp	r0, #0
    6da4:	bne	6898 <eval_boolean+0x5fc>
    6da8:	ldr	r3, [sp, #56]	; 0x38
    6dac:	cmp	r3, #0
    6db0:	beq	7308 <eval_boolean+0x106c>
    6db4:	ldr	r3, [sp, #52]	; 0x34
    6db8:	sub	r2, r3, #1
    6dbc:	cmp	r2, r9
    6dc0:	ble	6d84 <eval_boolean+0xae8>
    6dc4:	mov	r0, r8
    6dc8:	bl	0 <coda_cursor_goto_next_array_element>
    6dcc:	cmp	r0, #0
    6dd0:	bne	6898 <eval_boolean+0x5fc>
    6dd4:	ldr	r3, [sp, #52]	; 0x34
    6dd8:	b	6d84 <eval_boolean+0xae8>
    6ddc:	ldr	r3, [pc, #1636]	; 7448 <eval_boolean+0x11ac>
    6de0:	ldr	r2, [pc, #1636]	; 744c <eval_boolean+0x11b0>
    6de4:	ldr	r1, [pc, #1636]	; 7450 <eval_boolean+0x11b4>
    6de8:	ldr	r0, [pc, #1636]	; 7454 <eval_boolean+0x11b8>
    6dec:	bl	0 <__assert_fail>
    6df0:	ldr	r1, [r4, #24]
    6df4:	mov	r0, r5
    6df8:	bl	629c <eval_boolean>
    6dfc:	cmp	r0, #0
    6e00:	beq	6424 <eval_boolean+0x188>
    6e04:	b	6898 <eval_boolean+0x5fc>
    6e08:	add	r2, sp, #56	; 0x38
    6e0c:	mov	r0, r5
    6e10:	bl	5640 <eval_float>
    6e14:	cmp	r0, #0
    6e18:	bne	6898 <eval_boolean+0x5fc>
    6e1c:	ldr	r1, [r4, #20]
    6e20:	mov	r0, r5
    6e24:	add	r2, sp, #64	; 0x40
    6e28:	bl	5640 <eval_float>
    6e2c:	subs	r7, r0, #0
    6e30:	bne	6898 <eval_boolean+0x5fc>
    6e34:	vldr	d6, [sp, #56]	; 0x38
    6e38:	vldr	d7, [sp, #64]	; 0x40
    6e3c:	vcmp.f64	d6, d7
    6e40:	vmrs	APSR_nzcv, fpscr
    6e44:	moveq	r3, #1
    6e48:	movne	r3, #0
    6e4c:	str	r3, [r6]
    6e50:	b	6424 <eval_boolean+0x188>
    6e54:	add	r2, sp, #56	; 0x38
    6e58:	mov	r0, r5
    6e5c:	bl	5640 <eval_float>
    6e60:	cmp	r0, #0
    6e64:	bne	6898 <eval_boolean+0x5fc>
    6e68:	ldr	r1, [r4, #20]
    6e6c:	mov	r0, r5
    6e70:	add	r2, sp, #64	; 0x40
    6e74:	bl	5640 <eval_float>
    6e78:	subs	r7, r0, #0
    6e7c:	bne	6898 <eval_boolean+0x5fc>
    6e80:	vldr	d6, [sp, #56]	; 0x38
    6e84:	vldr	d7, [sp, #64]	; 0x40
    6e88:	vcmpe.f64	d6, d7
    6e8c:	vmrs	APSR_nzcv, fpscr
    6e90:	movge	r3, #1
    6e94:	movlt	r3, #0
    6e98:	str	r3, [r6]
    6e9c:	b	6424 <eval_boolean+0x188>
    6ea0:	add	r2, sp, #56	; 0x38
    6ea4:	mov	r0, r5
    6ea8:	bl	5640 <eval_float>
    6eac:	cmp	r0, #0
    6eb0:	bne	6898 <eval_boolean+0x5fc>
    6eb4:	ldr	r1, [r4, #20]
    6eb8:	mov	r0, r5
    6ebc:	add	r2, sp, #64	; 0x40
    6ec0:	bl	5640 <eval_float>
    6ec4:	subs	r7, r0, #0
    6ec8:	bne	6898 <eval_boolean+0x5fc>
    6ecc:	vldr	d6, [sp, #56]	; 0x38
    6ed0:	vldr	d7, [sp, #64]	; 0x40
    6ed4:	vcmpe.f64	d6, d7
    6ed8:	vmrs	APSR_nzcv, fpscr
    6edc:	movmi	r3, #1
    6ee0:	movpl	r3, #0
    6ee4:	str	r3, [r6]
    6ee8:	b	6424 <eval_boolean+0x188>
    6eec:	add	r2, sp, #56	; 0x38
    6ef0:	mov	r0, r5
    6ef4:	bl	5640 <eval_float>
    6ef8:	cmp	r0, #0
    6efc:	bne	6898 <eval_boolean+0x5fc>
    6f00:	ldr	r1, [r4, #20]
    6f04:	mov	r0, r5
    6f08:	add	r2, sp, #64	; 0x40
    6f0c:	bl	5640 <eval_float>
    6f10:	subs	r7, r0, #0
    6f14:	bne	6898 <eval_boolean+0x5fc>
    6f18:	vldr	d6, [sp, #56]	; 0x38
    6f1c:	vldr	d7, [sp, #64]	; 0x40
    6f20:	vcmp.f64	d6, d7
    6f24:	vmrs	APSR_nzcv, fpscr
    6f28:	movne	r3, #1
    6f2c:	moveq	r3, #0
    6f30:	str	r3, [r6]
    6f34:	b	6424 <eval_boolean+0x188>
    6f38:	add	r2, sp, #56	; 0x38
    6f3c:	mov	r0, r5
    6f40:	bl	5640 <eval_float>
    6f44:	cmp	r0, #0
    6f48:	bne	6898 <eval_boolean+0x5fc>
    6f4c:	ldr	r1, [r4, #20]
    6f50:	mov	r0, r5
    6f54:	add	r2, sp, #64	; 0x40
    6f58:	bl	5640 <eval_float>
    6f5c:	subs	r7, r0, #0
    6f60:	bne	6898 <eval_boolean+0x5fc>
    6f64:	vldr	d6, [sp, #56]	; 0x38
    6f68:	vldr	d7, [sp, #64]	; 0x40
    6f6c:	vcmpe.f64	d6, d7
    6f70:	vmrs	APSR_nzcv, fpscr
    6f74:	movls	r3, #1
    6f78:	movhi	r3, #0
    6f7c:	str	r3, [r6]
    6f80:	b	6424 <eval_boolean+0x188>
    6f84:	add	r2, sp, #56	; 0x38
    6f88:	mov	r0, r5
    6f8c:	bl	5640 <eval_float>
    6f90:	cmp	r0, #0
    6f94:	bne	6898 <eval_boolean+0x5fc>
    6f98:	ldr	r1, [r4, #20]
    6f9c:	mov	r0, r5
    6fa0:	add	r2, sp, #64	; 0x40
    6fa4:	bl	5640 <eval_float>
    6fa8:	subs	r7, r0, #0
    6fac:	bne	6898 <eval_boolean+0x5fc>
    6fb0:	vldr	d6, [sp, #56]	; 0x38
    6fb4:	vldr	d7, [sp, #64]	; 0x40
    6fb8:	vcmpe.f64	d6, d7
    6fbc:	vmrs	APSR_nzcv, fpscr
    6fc0:	movgt	r3, #1
    6fc4:	movle	r3, #0
    6fc8:	str	r3, [r6]
    6fcc:	b	6424 <eval_boolean+0x188>
    6fd0:	add	r1, sp, #52	; 0x34
    6fd4:	mov	r0, r8
    6fd8:	bl	0 <coda_cursor_get_type_class>
    6fdc:	subs	r7, r0, #0
    6fe0:	bne	6898 <eval_boolean+0x5fc>
    6fe4:	ldr	r3, [sp, #52]	; 0x34
    6fe8:	cmp	r3, #6
    6fec:	beq	72ac <eval_boolean+0x1010>
    6ff0:	mov	r3, #1
    6ff4:	mov	r1, sl
    6ff8:	mov	r0, r8
    6ffc:	str	r3, [r6]
    7000:	mov	r2, #520	; 0x208
    7004:	bl	0 <memcpy>
    7008:	b	6424 <eval_boolean+0x188>
    700c:	str	r7, [sp]
    7010:	add	r3, sp, #32
    7014:	add	r2, sp, #28
    7018:	mov	r1, #36	; 0x24
    701c:	ldr	r0, [pc, #1076]	; 7458 <eval_boolean+0x11bc>
    7020:	bl	0 <coda_pcre_compile>
    7024:	mov	r4, r0
    7028:	b	661c <eval_boolean+0x380>
    702c:	ldr	r0, [r3]
    7030:	add	r2, sp, #56	; 0x38
    7034:	ldr	r1, [r1, #12]
    7038:	bl	0 <coda_product_variable_get_size>
    703c:	subs	r3, r0, #0
    7040:	str	r3, [sp, #20]
    7044:	bne	6898 <eval_boolean+0x5fc>
    7048:	ldr	r2, [sp, #56]	; 0x38
    704c:	ldr	r3, [r4, #12]
    7050:	cmp	r2, #0
    7054:	str	r3, [r5, #560]	; 0x230
    7058:	ble	72e4 <eval_boolean+0x1048>
    705c:	mov	r8, #0
    7060:	mov	r9, #0
    7064:	add	sl, sp, #64	; 0x40
    7068:	add	fp, r5, #560	; 0x230
    706c:	b	7088 <eval_boolean+0xdec>
    7070:	ldr	r3, [sp, #56]	; 0x38
    7074:	add	r2, r8, #1
    7078:	adds	r8, r8, #1
    707c:	adc	r9, r9, #0
    7080:	cmp	r2, r3
    7084:	bge	72e4 <eval_boolean+0x1048>
    7088:	strd	r8, [fp, #-8]
    708c:	mov	r2, sl
    7090:	ldr	r1, [r4, #16]
    7094:	mov	r0, r5
    7098:	bl	629c <eval_boolean>
    709c:	subs	r7, r0, #0
    70a0:	bne	6898 <eval_boolean+0x5fc>
    70a4:	ldr	r3, [sp, #64]	; 0x40
    70a8:	cmp	r3, #0
    70ac:	beq	7070 <eval_boolean+0xdd4>
    70b0:	mov	r3, #1
    70b4:	str	r3, [r6]
    70b8:	str	r7, [r5, #560]	; 0x230
    70bc:	b	6424 <eval_boolean+0x188>
    70c0:	ldr	r0, [pc, #912]	; 7458 <eval_boolean+0x11bc>
    70c4:	bl	0 <strdup>
    70c8:	cmp	r0, #0
    70cc:	str	r0, [sp, #44]	; 0x2c
    70d0:	bne	6640 <eval_boolean+0x3a4>
    70d4:	mov	r3, #1120	; 0x460
    70d8:	ldr	r2, [pc, #880]	; 7450 <eval_boolean+0x11b4>
    70dc:	ldr	r1, [pc, #888]	; 745c <eval_boolean+0x11c0>
    70e0:	mvn	r0, #0
    70e4:	bl	0 <coda_set_error>
    70e8:	ldr	r3, [pc, #844]	; 743c <eval_boolean+0x11a0>
    70ec:	mov	r0, r4
    70f0:	ldr	r3, [r3]
    70f4:	blx	r3
    70f8:	b	6898 <eval_boolean+0x5fc>
    70fc:	mov	r3, #0
    7100:	b	6ff4 <eval_boolean+0xd58>
    7104:	add	r2, sp, #56	; 0x38
    7108:	bl	3c6c <eval_integer>
    710c:	cmp	r0, #0
    7110:	bne	6898 <eval_boolean+0x5fc>
    7114:	ldr	r1, [r4, #20]
    7118:	mov	r0, r5
    711c:	add	r2, sp, #64	; 0x40
    7120:	bl	3c6c <eval_integer>
    7124:	subs	r7, r0, #0
    7128:	bne	6898 <eval_boolean+0x5fc>
    712c:	ldrd	r0, [sp, #56]	; 0x38
    7130:	ldrd	r2, [sp, #64]	; 0x40
    7134:	cmp	r0, r2
    7138:	sbcs	r3, r1, r3
    713c:	movlt	r3, #1
    7140:	movge	r3, #0
    7144:	str	r3, [r6]
    7148:	b	6424 <eval_boolean+0x188>
    714c:	add	r2, sp, #56	; 0x38
    7150:	bl	3c6c <eval_integer>
    7154:	cmp	r0, #0
    7158:	bne	6898 <eval_boolean+0x5fc>
    715c:	ldr	r1, [r4, #20]
    7160:	mov	r0, r5
    7164:	add	r2, sp, #64	; 0x40
    7168:	bl	3c6c <eval_integer>
    716c:	subs	r7, r0, #0
    7170:	bne	6898 <eval_boolean+0x5fc>
    7174:	ldrd	r2, [sp, #56]	; 0x38
    7178:	ldrd	r0, [sp, #64]	; 0x40
    717c:	cmp	r0, r2
    7180:	sbcs	r3, r1, r3
    7184:	movge	r3, #1
    7188:	movlt	r3, #0
    718c:	str	r3, [r6]
    7190:	b	6424 <eval_boolean+0x188>
    7194:	add	r2, sp, #56	; 0x38
    7198:	bl	3c6c <eval_integer>
    719c:	cmp	r0, #0
    71a0:	bne	6898 <eval_boolean+0x5fc>
    71a4:	ldr	r1, [r4, #20]
    71a8:	mov	r0, r5
    71ac:	add	r2, sp, #64	; 0x40
    71b0:	bl	3c6c <eval_integer>
    71b4:	subs	r7, r0, #0
    71b8:	bne	6898 <eval_boolean+0x5fc>
    71bc:	ldrd	r2, [sp, #56]	; 0x38
    71c0:	ldrd	r0, [sp, #64]	; 0x40
    71c4:	b	7134 <eval_boolean+0xe98>
    71c8:	add	r2, sp, #56	; 0x38
    71cc:	bl	3c6c <eval_integer>
    71d0:	cmp	r0, #0
    71d4:	bne	6898 <eval_boolean+0x5fc>
    71d8:	ldr	r1, [r4, #20]
    71dc:	mov	r0, r5
    71e0:	add	r2, sp, #64	; 0x40
    71e4:	bl	3c6c <eval_integer>
    71e8:	subs	r7, r0, #0
    71ec:	bne	6898 <eval_boolean+0x5fc>
    71f0:	ldrd	r2, [sp, #64]	; 0x40
    71f4:	ldrd	r0, [sp, #56]	; 0x38
    71f8:	cmp	r1, r3
    71fc:	cmpeq	r0, r2
    7200:	moveq	r3, #1
    7204:	movne	r3, #0
    7208:	str	r3, [r6]
    720c:	b	6424 <eval_boolean+0x188>
    7210:	add	r2, sp, #56	; 0x38
    7214:	bl	3c6c <eval_integer>
    7218:	cmp	r0, #0
    721c:	bne	6898 <eval_boolean+0x5fc>
    7220:	ldr	r1, [r4, #20]
    7224:	mov	r0, r5
    7228:	add	r2, sp, #64	; 0x40
    722c:	bl	3c6c <eval_integer>
    7230:	subs	r7, r0, #0
    7234:	bne	6898 <eval_boolean+0x5fc>
    7238:	ldrd	r0, [sp, #56]	; 0x38
    723c:	ldrd	r2, [sp, #64]	; 0x40
    7240:	b	717c <eval_boolean+0xee0>
    7244:	add	r2, sp, #56	; 0x38
    7248:	bl	3c6c <eval_integer>
    724c:	cmp	r0, #0
    7250:	bne	6898 <eval_boolean+0x5fc>
    7254:	ldr	r1, [r4, #20]
    7258:	mov	r0, r5
    725c:	add	r2, sp, #64	; 0x40
    7260:	bl	3c6c <eval_integer>
    7264:	subs	r7, r0, #0
    7268:	bne	6898 <eval_boolean+0x5fc>
    726c:	ldrd	r2, [sp, #64]	; 0x40
    7270:	ldrd	r0, [sp, #56]	; 0x38
    7274:	cmp	r1, r3
    7278:	cmpeq	r0, r2
    727c:	movne	r3, #1
    7280:	moveq	r3, #0
    7284:	str	r3, [r6]
    7288:	b	6424 <eval_boolean+0x188>
    728c:	ldr	r0, [sp, #56]	; 0x38
    7290:	bl	0 <free>
    7294:	b	6898 <eval_boolean+0x5fc>
    7298:	ldr	r0, [sp, #56]	; 0x38
    729c:	cmp	r0, #0
    72a0:	beq	6898 <eval_boolean+0x5fc>
    72a4:	bl	0 <free>
    72a8:	b	6898 <eval_boolean+0x5fc>
    72ac:	add	r1, sp, #56	; 0x38
    72b0:	mov	r0, r8
    72b4:	bl	0 <coda_cursor_get_special_type>
    72b8:	cmp	r0, #0
    72bc:	bne	6898 <eval_boolean+0x5fc>
    72c0:	ldr	r3, [sp, #56]	; 0x38
    72c4:	cmp	r3, #0
    72c8:	bne	6ff0 <eval_boolean+0xd54>
    72cc:	str	r7, [r6]
    72d0:	mov	r1, sl
    72d4:	mov	r0, r8
    72d8:	mov	r2, #520	; 0x208
    72dc:	bl	0 <memcpy>
    72e0:	b	6424 <eval_boolean+0x188>
    72e4:	mov	r3, #0
    72e8:	str	r3, [r6]
    72ec:	ldr	r7, [sp, #20]
    72f0:	str	r3, [r5, #560]	; 0x230
    72f4:	b	6424 <eval_boolean+0x188>
    72f8:	mov	r3, #1
    72fc:	mov	r7, r0
    7300:	str	r3, [r6]
    7304:	b	6424 <eval_boolean+0x188>
    7308:	str	r3, [r6]
    730c:	mov	r7, r3
    7310:	b	6424 <eval_boolean+0x188>
    7314:	ldr	r1, [pc, #324]	; 7460 <eval_boolean+0x11c4>
    7318:	mvn	r0, #400	; 0x190
    731c:	bl	0 <coda_set_error>
    7320:	b	6898 <eval_boolean+0x5fc>
    7324:	mov	r2, r5
    7328:	ldr	r1, [pc, #308]	; 7464 <eval_boolean+0x11c8>
    732c:	mvn	r0, #400	; 0x190
    7330:	bl	0 <coda_set_error>
    7334:	b	6898 <eval_boolean+0x5fc>
    7338:	mvn	r0, #400	; 0x190
    733c:	ldr	r3, [sp, #32]
    7340:	ldr	r2, [sp, #28]
    7344:	ldr	r1, [pc, #284]	; 7468 <eval_boolean+0x11cc>
    7348:	bl	0 <coda_set_error>
    734c:	ldr	r0, [sp, #44]	; 0x2c
    7350:	cmp	r0, #0
    7354:	bne	72a4 <eval_boolean+0x1008>
    7358:	b	6898 <eval_boolean+0x5fc>
    735c:	ldr	r3, [pc, #228]	; 7448 <eval_boolean+0x11ac>
    7360:	ldr	r2, [pc, #260]	; 746c <eval_boolean+0x11d0>
    7364:	ldr	r1, [pc, #228]	; 7450 <eval_boolean+0x11b4>
    7368:	ldr	r0, [pc, #256]	; 7470 <eval_boolean+0x11d4>
    736c:	bl	0 <__assert_fail>
    7370:	ldr	r3, [pc, #208]	; 7448 <eval_boolean+0x11ac>
    7374:	ldr	r2, [pc, #248]	; 7474 <eval_boolean+0x11d8>
    7378:	ldr	r1, [pc, #208]	; 7450 <eval_boolean+0x11b4>
    737c:	ldr	r0, [pc, #236]	; 7470 <eval_boolean+0x11d4>
    7380:	bl	0 <__assert_fail>
    7384:	ldr	r3, [pc, #188]	; 7448 <eval_boolean+0x11ac>
    7388:	ldr	r2, [pc, #232]	; 7478 <eval_boolean+0x11dc>
    738c:	ldr	r1, [pc, #188]	; 7450 <eval_boolean+0x11b4>
    7390:	ldr	r0, [pc, #216]	; 7470 <eval_boolean+0x11d4>
    7394:	bl	0 <__assert_fail>
    7398:	ldr	r3, [pc, #168]	; 7448 <eval_boolean+0x11ac>
    739c:	ldr	r2, [pc, #216]	; 747c <eval_boolean+0x11e0>
    73a0:	ldr	r1, [pc, #168]	; 7450 <eval_boolean+0x11b4>
    73a4:	ldr	r0, [pc, #168]	; 7454 <eval_boolean+0x11b8>
    73a8:	bl	0 <__assert_fail>
    73ac:	ldr	r3, [pc, #148]	; 7448 <eval_boolean+0x11ac>
    73b0:	ldr	r2, [pc, #200]	; 7480 <eval_boolean+0x11e4>
    73b4:	ldr	r1, [pc, #148]	; 7450 <eval_boolean+0x11b4>
    73b8:	ldr	r0, [pc, #148]	; 7454 <eval_boolean+0x11b8>
    73bc:	bl	0 <__assert_fail>
    73c0:	ldr	r3, [pc, #128]	; 7448 <eval_boolean+0x11ac>
    73c4:	ldr	r2, [pc, #184]	; 7484 <eval_boolean+0x11e8>
    73c8:	ldr	r1, [pc, #128]	; 7450 <eval_boolean+0x11b4>
    73cc:	ldr	r0, [pc, #156]	; 7470 <eval_boolean+0x11d4>
    73d0:	bl	0 <__assert_fail>
    73d4:	ldr	r3, [pc, #108]	; 7448 <eval_boolean+0x11ac>
    73d8:	mov	r2, #792	; 0x318
    73dc:	ldr	r1, [pc, #108]	; 7450 <eval_boolean+0x11b4>
    73e0:	ldr	r0, [pc, #108]	; 7454 <eval_boolean+0x11b8>
    73e4:	bl	0 <__assert_fail>
    73e8:	ldr	r3, [pc, #88]	; 7448 <eval_boolean+0x11ac>
    73ec:	mov	r2, #916	; 0x394
    73f0:	ldr	r1, [pc, #88]	; 7450 <eval_boolean+0x11b4>
    73f4:	ldr	r0, [pc, #88]	; 7454 <eval_boolean+0x11b8>
    73f8:	bl	0 <__assert_fail>
    73fc:	ldr	r3, [pc, #68]	; 7448 <eval_boolean+0x11ac>
    7400:	ldr	r2, [pc, #128]	; 7488 <eval_boolean+0x11ec>
    7404:	ldr	r1, [pc, #68]	; 7450 <eval_boolean+0x11b4>
    7408:	ldr	r0, [pc, #96]	; 7470 <eval_boolean+0x11d4>
    740c:	bl	0 <__assert_fail>
    7410:	ldr	r3, [pc, #48]	; 7448 <eval_boolean+0x11ac>
    7414:	mov	r2, #668	; 0x29c
    7418:	ldr	r1, [pc, #48]	; 7450 <eval_boolean+0x11b4>
    741c:	ldr	r0, [pc, #48]	; 7454 <eval_boolean+0x11b8>
    7420:	bl	0 <__assert_fail>
    7424:	ldr	r3, [pc, #28]	; 7448 <eval_boolean+0x11ac>
    7428:	ldr	r2, [pc, #92]	; 748c <eval_boolean+0x11f0>
    742c:	ldr	r1, [pc, #28]	; 7450 <eval_boolean+0x11b4>
    7430:	ldr	r0, [pc, #28]	; 7454 <eval_boolean+0x11b8>
    7434:	bl	0 <__assert_fail>
    7438:	.word	0x00000ae0
    743c:	.word	0x00000000
    7440:	.word	0x00000a9c
    7444:	.word	0x00000a80
    7448:	.word	0x00000048
    744c:	.word	0x00000563
    7450:	.word	0x000005b8
    7454:	.word	0x00000a0c
    7458:	.word	0x00000890
    745c:	.word	0x00000790
    7460:	.word	0x00000988
    7464:	.word	0x00000954
    7468:	.word	0x00000894
    746c:	.word	0x000004d7
    7470:	.word	0x000007c4
    7474:	.word	0x000004a6
    7478:	.word	0x00000508
    747c:	.word	0x000002da
    7480:	.word	0x00000356
    7484:	.word	0x00000544
    7488:	.word	0x0000047c
    748c:	.word	0x000003d2

00007490 <eval_void>:
    7490:	ldr	r3, [r1]
    7494:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7498:	cmp	r3, #39	; 0x27
    749c:	sub	sp, sp, #28
    74a0:	mov	r4, r1
    74a4:	beq	7678 <eval_void+0x1e8>
    74a8:	mov	r6, r0
    74ac:	bls	7574 <eval_void+0xe4>
    74b0:	cmp	r3, #74	; 0x4a
    74b4:	beq	7544 <eval_void+0xb4>
    74b8:	cmp	r3, #84	; 0x54
    74bc:	bne	7664 <eval_void+0x1d4>
    74c0:	ldr	r1, [r0]
    74c4:	mov	r2, #0
    74c8:	mov	r3, #0
    74cc:	cmp	r1, #0
    74d0:	strd	r2, [sp, #8]
    74d4:	beq	7700 <eval_void+0x270>
    74d8:	ldr	r1, [r4, #16]
    74dc:	cmp	r1, #0
    74e0:	beq	74f4 <eval_void+0x64>
    74e4:	add	r2, sp, #8
    74e8:	bl	3c6c <eval_integer>
    74ec:	cmp	r0, #0
    74f0:	bne	7654 <eval_void+0x1c4>
    74f4:	add	r2, sp, #16
    74f8:	ldr	r1, [r4, #20]
    74fc:	mov	r0, r6
    7500:	bl	3c6c <eval_integer>
    7504:	cmp	r0, #0
    7508:	bne	7654 <eval_void+0x1c4>
    750c:	ldr	r2, [r6]
    7510:	ldr	r1, [r4, #12]
    7514:	mov	r3, sp
    7518:	ldr	r0, [r2]
    751c:	ldr	r2, [sp, #8]
    7520:	bl	0 <coda_product_variable_get_pointer>
    7524:	subs	r7, r0, #0
    7528:	bne	7654 <eval_void+0x1c4>
    752c:	ldrd	r0, [sp, #16]
    7530:	ldr	r3, [sp]
    7534:	strd	r0, [r3]
    7538:	mov	r0, r7
    753c:	add	sp, sp, #28
    7540:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7544:	ldr	r1, [r1, #16]
    7548:	bl	7490 <eval_void>
    754c:	cmp	r0, #0
    7550:	bne	7654 <eval_void+0x1c4>
    7554:	ldr	r1, [r4, #20]
    7558:	mov	r0, r6
    755c:	bl	7490 <eval_void>
    7560:	adds	r7, r0, #0
    7564:	mvnne	r7, #0
    7568:	mov	r0, r7
    756c:	add	sp, sp, #28
    7570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7574:	cmp	r3, #31
    7578:	bne	7664 <eval_void+0x1d4>
    757c:	ldr	r3, [r1, #12]
    7580:	mov	r8, #1
    7584:	mov	r9, #0
    7588:	mov	r2, sp
    758c:	strd	r8, [sp, #16]
    7590:	ldrb	r5, [r3]
    7594:	ldr	r1, [r1, #16]
    7598:	add	r5, r0, r5, lsl #3
    759c:	sub	r5, r5, #304	; 0x130
    75a0:	ldrd	r8, [r5, #-8]
    75a4:	bl	3c6c <eval_integer>
    75a8:	cmp	r0, #0
    75ac:	bne	7654 <eval_void+0x1c4>
    75b0:	add	r2, sp, #8
    75b4:	ldr	r1, [r4, #20]
    75b8:	mov	r0, r6
    75bc:	bl	3c6c <eval_integer>
    75c0:	subs	r7, r0, #0
    75c4:	bne	7654 <eval_void+0x1c4>
    75c8:	ldr	r1, [r4, #24]
    75cc:	cmp	r1, #0
    75d0:	beq	769c <eval_void+0x20c>
    75d4:	add	r2, sp, #16
    75d8:	mov	r0, r6
    75dc:	bl	3c6c <eval_integer>
    75e0:	cmp	r0, #0
    75e4:	bne	7654 <eval_void+0x1c4>
    75e8:	ldrd	r2, [sp, #16]
    75ec:	orrs	r1, r2, r3
    75f0:	beq	76f0 <eval_void+0x260>
    75f4:	ldrd	r0, [sp]
    75f8:	cmp	r2, #1
    75fc:	sbcs	r3, r3, #0
    7600:	strd	r0, [r5, #-8]
    7604:	ldrd	r2, [sp, #8]
    7608:	blt	76a4 <eval_void+0x214>
    760c:	cmp	r2, r0
    7610:	sbcs	r3, r3, r1
    7614:	bge	7640 <eval_void+0x1b0>
    7618:	b	7694 <eval_void+0x204>
    761c:	ldrd	r2, [r5, #-8]
    7620:	ldrd	r0, [sp, #16]
    7624:	ldrd	sl, [sp, #8]
    7628:	adds	r2, r2, r0
    762c:	adc	r3, r3, r1
    7630:	cmp	sl, r2
    7634:	sbcs	r1, fp, r3
    7638:	strd	r2, [r5, #-8]
    763c:	blt	7694 <eval_void+0x204>
    7640:	ldr	r1, [r4, #28]
    7644:	mov	r0, r6
    7648:	bl	7490 <eval_void>
    764c:	cmp	r0, #0
    7650:	beq	761c <eval_void+0x18c>
    7654:	mvn	r7, #0
    7658:	mov	r0, r7
    765c:	add	sp, sp, #28
    7660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7664:	ldr	r3, [pc, #168]	; 7714 <eval_void+0x284>
    7668:	ldr	r2, [pc, #168]	; 7718 <eval_void+0x288>
    766c:	ldr	r1, [pc, #168]	; 771c <eval_void+0x28c>
    7670:	ldr	r0, [pc, #168]	; 7720 <eval_void+0x290>
    7674:	bl	0 <__assert_fail>
    7678:	ldr	r1, [r1, #16]
    767c:	bl	5294 <eval_cursor>
    7680:	adds	r7, r0, #0
    7684:	mvnne	r7, #0
    7688:	mov	r0, r7
    768c:	add	sp, sp, #28
    7690:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7694:	strd	r8, [r5, #-8]
    7698:	b	7688 <eval_void+0x1f8>
    769c:	ldrd	r2, [sp, #16]
    76a0:	b	75f4 <eval_void+0x164>
    76a4:	cmp	r0, r2
    76a8:	sbcs	r3, r1, r3
    76ac:	bge	76d8 <eval_void+0x248>
    76b0:	b	7694 <eval_void+0x204>
    76b4:	ldrd	r2, [r5, #-8]
    76b8:	ldrd	r0, [sp, #16]
    76bc:	ldrd	sl, [sp, #8]
    76c0:	adds	r2, r2, r0
    76c4:	adc	r3, r3, r1
    76c8:	cmp	r2, sl
    76cc:	sbcs	r1, r3, fp
    76d0:	strd	r2, [r5, #-8]
    76d4:	blt	7694 <eval_void+0x204>
    76d8:	ldr	r1, [r4, #28]
    76dc:	mov	r0, r6
    76e0:	bl	7490 <eval_void>
    76e4:	cmp	r0, #0
    76e8:	beq	76b4 <eval_void+0x224>
    76ec:	b	7654 <eval_void+0x1c4>
    76f0:	ldr	r1, [pc, #44]	; 7724 <eval_void+0x294>
    76f4:	mvn	r0, #400	; 0x190
    76f8:	bl	0 <coda_set_error>
    76fc:	b	7654 <eval_void+0x1c4>
    7700:	ldr	r3, [pc, #12]	; 7714 <eval_void+0x284>
    7704:	ldr	r2, [pc, #28]	; 7728 <eval_void+0x298>
    7708:	ldr	r1, [pc, #12]	; 771c <eval_void+0x28c>
    770c:	ldr	r0, [pc, #24]	; 772c <eval_void+0x29c>
    7710:	bl	0 <__assert_fail>
    7714:	.word	0x00000058
    7718:	.word	0x00000f3e
    771c:	.word	0x000005b8
    7720:	.word	0x00000a0c
    7724:	.word	0x00000c40
    7728:	.word	0x00000f29
    772c:	.word	0x000007c4

00007730 <coda_expression_eval_void>:
    7730:	ldr	r2, [r0, #4]
    7734:	push	{r4, r5, lr}
    7738:	cmp	r2, #5
    773c:	sub	sp, sp, #572	; 0x23c
    7740:	bne	77c0 <coda_expression_eval_void+0x90>
    7744:	cmp	r1, #0
    7748:	mov	r4, r0
    774c:	beq	779c <coda_expression_eval_void+0x6c>
    7750:	mov	r2, #520	; 0x208
    7754:	add	r0, sp, #8
    7758:	str	r1, [sp]
    775c:	bl	0 <memcpy>
    7760:	mov	r2, #0
    7764:	mov	r3, #0
    7768:	add	r5, sp, #536	; 0x218
    776c:	add	lr, sp, #552	; 0x228
    7770:	mov	ip, #0
    7774:	mov	r1, r4
    7778:	mov	r0, sp
    777c:	strd	r2, [r5, #-8]
    7780:	strd	r2, [r5]
    7784:	strd	r2, [lr]
    7788:	strd	r2, [lr, #-8]
    778c:	str	ip, [sp, #560]	; 0x230
    7790:	bl	7490 <eval_void>
    7794:	add	sp, sp, #572	; 0x23c
    7798:	pop	{r4, r5, pc}
    779c:	ldr	r2, [r0, #8]
    77a0:	cmp	r2, #0
    77a4:	strne	r1, [sp]
    77a8:	bne	7760 <coda_expression_eval_void+0x30>
    77ac:	mvn	r0, #99	; 0x63
    77b0:	ldr	r1, [pc, #28]	; 77d4 <coda_expression_eval_void+0xa4>
    77b4:	bl	0 <coda_set_error>
    77b8:	mvn	r0, #0
    77bc:	b	7794 <coda_expression_eval_void+0x64>
    77c0:	mvn	r0, #99	; 0x63
    77c4:	ldr	r1, [pc, #12]	; 77d8 <coda_expression_eval_void+0xa8>
    77c8:	bl	0 <coda_set_error>
    77cc:	mvn	r0, #0
    77d0:	b	7794 <coda_expression_eval_void+0x64>
    77d4:	.word	0x00000c8c
    77d8:	.word	0x00000c64

000077dc <coda_expression_print_html>:
    77dc:	push	{lr}		; (str lr, [sp, #-4]!)
    77e0:	sub	sp, sp, #12
    77e4:	mov	r3, #1
    77e8:	mov	r2, #15
    77ec:	str	r2, [sp]
    77f0:	mov	r2, r3
    77f4:	bl	a8 <print_expression>
    77f8:	add	sp, sp, #12
    77fc:	pop	{pc}		; (ldr pc, [sp], #4)

00007800 <coda_expression_print_xml>:
    7800:	push	{lr}		; (str lr, [sp, #-4]!)
    7804:	sub	sp, sp, #12
    7808:	mov	r3, #15
    780c:	str	r3, [sp]
    7810:	mov	r2, #1
    7814:	mov	r3, #0
    7818:	bl	a8 <print_expression>
    781c:	add	sp, sp, #12
    7820:	pop	{pc}		; (ldr pc, [sp], #4)

00007824 <coda_expression_print>:
    7824:	push	{lr}		; (str lr, [sp, #-4]!)
    7828:	sub	sp, sp, #12
    782c:	mov	r3, #0
    7830:	mov	r2, #15
    7834:	str	r2, [sp]
    7838:	mov	r2, r3
    783c:	bl	a8 <print_expression>
    7840:	add	sp, sp, #12
    7844:	pop	{pc}		; (ldr pc, [sp], #4)

00007848 <coda_expression_get_type_name>:
    7848:	cmp	r0, #5
    784c:	ldrls	r3, [pc, #12]	; 7860 <coda_expression_get_type_name+0x18>
    7850:	addls	r0, r3, r0, lsl #2
    7854:	ldrls	r0, [r0, #100]	; 0x64
    7858:	ldrhi	r0, [pc, #4]	; 7864 <coda_expression_get_type_name+0x1c>
    785c:	bx	lr
    7860:	.word	0x00000000
    7864:	.word	0x00000ccc

00007868 <coda_expression_delete>:
    7868:	ldr	r3, [r0]
    786c:	push	{r4, r5, r6, lr}
    7870:	sub	r3, r3, #18
    7874:	mov	r4, r0
    7878:	cmp	r3, #4
    787c:	ldrls	pc, [pc, r3, lsl #2]
    7880:	b	78b4 <coda_expression_delete+0x4c>
    7884:	.word	0x000078a8
    7888:	.word	0x000078a8
    788c:	.word	0x000078a8
    7890:	.word	0x00007898
    7894:	.word	0x00007898
    7898:	ldr	r0, [r0, #16]
    789c:	cmp	r0, #0
    78a0:	beq	78a8 <coda_expression_delete+0x40>
    78a4:	bl	0 <free>
    78a8:	mov	r0, r4
    78ac:	pop	{r4, r5, r6, lr}
    78b0:	b	0 <free>
    78b4:	ldr	r0, [r0, #12]
    78b8:	cmp	r0, #0
    78bc:	beq	78c4 <coda_expression_delete+0x5c>
    78c0:	bl	0 <free>
    78c4:	add	r5, r4, #16
    78c8:	add	r6, r4, #32
    78cc:	ldr	r3, [r5], #4
    78d0:	subs	r0, r3, #0
    78d4:	beq	78dc <coda_expression_delete+0x74>
    78d8:	bl	7868 <coda_expression_delete>
    78dc:	cmp	r5, r6
    78e0:	bne	78cc <coda_expression_delete+0x64>
    78e4:	mov	r0, r4
    78e8:	pop	{r4, r5, r6, lr}
    78ec:	b	0 <free>

000078f0 <coda_expression_new>:
    78f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    78f4:	mov	r4, r0
    78f8:	sub	r0, r0, #18
    78fc:	sub	sp, sp, #28
    7900:	mov	r5, r1
    7904:	cmp	r0, #4
    7908:	ldrls	pc, [pc, r0, lsl #2]
    790c:	b	7dcc <coda_expression_new+0x4dc>
    7910:	.word	0x00007af0
    7914:	.word	0x00007b44
    7918:	.word	0x00007ba8
    791c:	.word	0x00007c0c
    7920:	.word	0x00007924
    7924:	cmp	r1, #0
    7928:	beq	8368 <coda_expression_new+0xa78>
    792c:	ldrb	r2, [r1]
    7930:	cmp	r2, #0
    7934:	beq	839c <coda_expression_new+0xaac>
    7938:	mov	r4, #0
    793c:	mov	r3, r4
    7940:	mov	r9, #39	; 0x27
    7944:	mov	r8, #34	; 0x22
    7948:	mov	r7, #92	; 0x5c
    794c:	mov	r6, #11
    7950:	mov	lr, #9
    7954:	mov	ip, #13
    7958:	mov	r0, #10
    795c:	mov	fp, #27
    7960:	b	7974 <coda_expression_new+0x84>
    7964:	add	r3, r3, #1
    7968:	ldrb	r2, [r5, r3]
    796c:	cmp	r2, #0
    7970:	beq	7c68 <coda_expression_new+0x378>
    7974:	cmp	r2, #92	; 0x5c
    7978:	strbne	r2, [r5, r4]
    797c:	addne	r4, r4, #1
    7980:	bne	7964 <coda_expression_new+0x74>
    7984:	add	r1, r3, #1
    7988:	ldrb	sl, [r5, r1]
    798c:	sub	r2, sl, #34	; 0x22
    7990:	cmp	r2, #84	; 0x54
    7994:	ldrls	pc, [pc, r2, lsl #2]
    7998:	b	7d58 <coda_expression_new+0x468>
    799c:	.word	0x00007d48
    79a0:	.word	0x00007d58
    79a4:	.word	0x00007d58
    79a8:	.word	0x00007d58
    79ac:	.word	0x00007d58
    79b0:	.word	0x00007d38
    79b4:	.word	0x00007d58
    79b8:	.word	0x00007d58
    79bc:	.word	0x00007d58
    79c0:	.word	0x00007d58
    79c4:	.word	0x00007d58
    79c8:	.word	0x00007d58
    79cc:	.word	0x00007d58
    79d0:	.word	0x00007d58
    79d4:	.word	0x00007d58
    79d8:	.word	0x00007d58
    79dc:	.word	0x00007d58
    79e0:	.word	0x00007d58
    79e4:	.word	0x00007d58
    79e8:	.word	0x00007d58
    79ec:	.word	0x00007d58
    79f0:	.word	0x00007d58
    79f4:	.word	0x00007d58
    79f8:	.word	0x00007d58
    79fc:	.word	0x00007d58
    7a00:	.word	0x00007d58
    7a04:	.word	0x00007d58
    7a08:	.word	0x00007d58
    7a0c:	.word	0x00007d58
    7a10:	.word	0x00007d58
    7a14:	.word	0x00007d58
    7a18:	.word	0x00007d58
    7a1c:	.word	0x00007d58
    7a20:	.word	0x00007d58
    7a24:	.word	0x00007d58
    7a28:	.word	0x00007d58
    7a2c:	.word	0x00007d58
    7a30:	.word	0x00007d58
    7a34:	.word	0x00007d58
    7a38:	.word	0x00007d58
    7a3c:	.word	0x00007d58
    7a40:	.word	0x00007d58
    7a44:	.word	0x00007d58
    7a48:	.word	0x00007d58
    7a4c:	.word	0x00007d58
    7a50:	.word	0x00007d58
    7a54:	.word	0x00007d58
    7a58:	.word	0x00007d58
    7a5c:	.word	0x00007d58
    7a60:	.word	0x00007d58
    7a64:	.word	0x00007d58
    7a68:	.word	0x00007d58
    7a6c:	.word	0x00007d58
    7a70:	.word	0x00007d58
    7a74:	.word	0x00007d58
    7a78:	.word	0x00007d58
    7a7c:	.word	0x00007d58
    7a80:	.word	0x00007d58
    7a84:	.word	0x00007d28
    7a88:	.word	0x00007d58
    7a8c:	.word	0x00007d58
    7a90:	.word	0x00007d58
    7a94:	.word	0x00007d58
    7a98:	.word	0x00007d14
    7a9c:	.word	0x00007d00
    7aa0:	.word	0x00007d58
    7aa4:	.word	0x00007d58
    7aa8:	.word	0x00007cf0
    7aac:	.word	0x00007cdc
    7ab0:	.word	0x00007d58
    7ab4:	.word	0x00007d58
    7ab8:	.word	0x00007d58
    7abc:	.word	0x00007d58
    7ac0:	.word	0x00007d58
    7ac4:	.word	0x00007d58
    7ac8:	.word	0x00007d58
    7acc:	.word	0x00007ccc
    7ad0:	.word	0x00007d58
    7ad4:	.word	0x00007d58
    7ad8:	.word	0x00007d58
    7adc:	.word	0x00007cbc
    7ae0:	.word	0x00007d58
    7ae4:	.word	0x00007cac
    7ae8:	.word	0x00007d58
    7aec:	.word	0x00007c4c
    7af0:	mov	r0, #16
    7af4:	bl	0 <malloc>
    7af8:	subs	r4, r0, #0
    7afc:	beq	83a4 <coda_expression_new+0xab4>
    7b00:	ldrb	r3, [r5]
    7b04:	mov	r1, #0
    7b08:	mov	r2, #1
    7b0c:	and	r3, r3, #223	; 0xdf
    7b10:	mov	ip, #18
    7b14:	sub	r3, r3, #84	; 0x54
    7b18:	clz	r3, r3
    7b1c:	lsr	r3, r3, #5
    7b20:	str	r3, [r4, #12]
    7b24:	mov	r0, r5
    7b28:	str	ip, [r4]
    7b2c:	stmib	r4, {r1, r2}
    7b30:	bl	0 <free>
    7b34:	mov	r3, r4
    7b38:	mov	r0, r3
    7b3c:	add	sp, sp, #28
    7b40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7b44:	mov	r0, r1
    7b48:	bl	0 <strlen>
    7b4c:	mov	r3, #0
    7b50:	add	r2, sp, #16
    7b54:	mov	r1, r0
    7b58:	mov	r0, r5
    7b5c:	bl	0 <coda_ascii_parse_double>
    7b60:	cmp	r0, #0
    7b64:	mov	r0, r5
    7b68:	blt	8360 <coda_expression_new+0xa70>
    7b6c:	bl	0 <free>
    7b70:	mov	r0, #24
    7b74:	bl	0 <malloc>
    7b78:	subs	r4, r0, #0
    7b7c:	beq	843c <coda_expression_new+0xb4c>
    7b80:	ldrd	r6, [sp, #16]
    7b84:	mov	r1, #19
    7b88:	mov	r2, #2
    7b8c:	mov	r3, #1
    7b90:	strd	r6, [r4, #16]
    7b94:	stm	r4, {r1, r2, r3}
    7b98:	mov	r3, r4
    7b9c:	mov	r0, r3
    7ba0:	add	sp, sp, #28
    7ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ba8:	mov	r0, r1
    7bac:	bl	0 <strlen>
    7bb0:	mov	r3, #0
    7bb4:	add	r2, sp, #16
    7bb8:	mov	r1, r0
    7bbc:	mov	r0, r5
    7bc0:	bl	0 <coda_ascii_parse_int64>
    7bc4:	cmp	r0, #0
    7bc8:	mov	r0, r5
    7bcc:	blt	8360 <coda_expression_new+0xa70>
    7bd0:	bl	0 <free>
    7bd4:	mov	r0, #24
    7bd8:	bl	0 <malloc>
    7bdc:	subs	r4, r0, #0
    7be0:	beq	8418 <coda_expression_new+0xb28>
    7be4:	ldrd	r0, [sp, #16]
    7be8:	mov	r3, #1
    7bec:	mov	r2, #20
    7bf0:	str	r3, [r4, #8]
    7bf4:	stm	r4, {r2, r3}
    7bf8:	mov	r3, r4
    7bfc:	strd	r0, [r4, #16]
    7c00:	mov	r0, r3
    7c04:	add	sp, sp, #28
    7c08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7c0c:	mov	r0, #20
    7c10:	bl	0 <malloc>
    7c14:	subs	r4, r0, #0
    7c18:	beq	83d0 <coda_expression_new+0xae0>
    7c1c:	mov	r1, #21
    7c20:	mov	r2, #3
    7c24:	mov	r3, #1
    7c28:	mov	r0, r5
    7c2c:	stm	r4, {r1, r2, r3}
    7c30:	bl	0 <strlen>
    7c34:	mov	r3, r4
    7c38:	str	r5, [r4, #16]
    7c3c:	str	r0, [r4, #12]
    7c40:	mov	r0, r3
    7c44:	add	sp, sp, #28
    7c48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7c4c:	mov	r3, r1
    7c50:	add	r3, r3, #1
    7c54:	strb	r6, [r5, r4]
    7c58:	ldrb	r2, [r5, r3]
    7c5c:	add	r4, r4, #1
    7c60:	cmp	r2, #0
    7c64:	bne	7974 <coda_expression_new+0x84>
    7c68:	mov	r2, r4
    7c6c:	mov	r3, #0
    7c70:	strb	r3, [r5, r2]
    7c74:	mov	r0, #20
    7c78:	bl	0 <malloc>
    7c7c:	subs	r6, r0, #0
    7c80:	beq	83f4 <coda_expression_new+0xb04>
    7c84:	mov	r1, #22
    7c88:	mov	r2, #3
    7c8c:	mov	r3, #1
    7c90:	str	r4, [r6, #12]
    7c94:	stm	r6, {r1, r2, r3}
    7c98:	mov	r3, r6
    7c9c:	mov	r0, r3
    7ca0:	str	r5, [r6, #16]
    7ca4:	add	sp, sp, #28
    7ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7cac:	strb	lr, [r5, r4]
    7cb0:	mov	r3, r1
    7cb4:	add	r4, r4, #1
    7cb8:	b	7964 <coda_expression_new+0x74>
    7cbc:	strb	ip, [r5, r4]
    7cc0:	mov	r3, r1
    7cc4:	add	r4, r4, #1
    7cc8:	b	7964 <coda_expression_new+0x74>
    7ccc:	strb	r0, [r5, r4]
    7cd0:	mov	r3, r1
    7cd4:	add	r4, r4, #1
    7cd8:	b	7964 <coda_expression_new+0x74>
    7cdc:	mov	r3, #12
    7ce0:	strb	r3, [r5, r4]
    7ce4:	mov	r3, r1
    7ce8:	add	r4, r4, #1
    7cec:	b	7964 <coda_expression_new+0x74>
    7cf0:	strb	fp, [r5, r4]
    7cf4:	mov	r3, r1
    7cf8:	add	r4, r4, #1
    7cfc:	b	7964 <coda_expression_new+0x74>
    7d00:	mov	r3, #8
    7d04:	strb	r3, [r5, r4]
    7d08:	mov	r3, r1
    7d0c:	add	r4, r4, #1
    7d10:	b	7964 <coda_expression_new+0x74>
    7d14:	mov	r3, #7
    7d18:	strb	r3, [r5, r4]
    7d1c:	mov	r3, r1
    7d20:	add	r4, r4, #1
    7d24:	b	7964 <coda_expression_new+0x74>
    7d28:	strb	r7, [r5, r4]
    7d2c:	mov	r3, r1
    7d30:	add	r4, r4, #1
    7d34:	b	7964 <coda_expression_new+0x74>
    7d38:	strb	r9, [r5, r4]
    7d3c:	mov	r3, r1
    7d40:	add	r4, r4, #1
    7d44:	b	7964 <coda_expression_new+0x74>
    7d48:	strb	r8, [r5, r4]
    7d4c:	mov	r3, r1
    7d50:	add	r4, r4, #1
    7d54:	b	7964 <coda_expression_new+0x74>
    7d58:	sub	sl, sl, #48	; 0x30
    7d5c:	uxtb	r2, sl
    7d60:	cmp	r2, #9
    7d64:	bhi	8350 <coda_expression_new+0xa60>
    7d68:	lsl	sl, sl, #6
    7d6c:	add	r1, r5, r3
    7d70:	uxtb	r2, sl
    7d74:	strb	r2, [r5, r4]
    7d78:	ldrb	r1, [r1, #2]
    7d7c:	add	sl, r5, r4
    7d80:	str	sl, [sp, #12]
    7d84:	sub	r1, r1, #48	; 0x30
    7d88:	uxtb	sl, r1
    7d8c:	cmp	sl, #9
    7d90:	bhi	8350 <coda_expression_new+0xa60>
    7d94:	add	r2, r2, r1, lsl #3
    7d98:	add	r3, r3, #3
    7d9c:	uxtb	r2, r2
    7da0:	strb	r2, [r5, r4]
    7da4:	ldrb	r1, [r5, r3]
    7da8:	sub	r1, r1, #48	; 0x30
    7dac:	uxtb	r1, r1
    7db0:	cmp	r1, #9
    7db4:	bhi	8350 <coda_expression_new+0xa60>
    7db8:	add	sl, r5, r4
    7dbc:	add	r2, r2, r1
    7dc0:	strb	r2, [sl]
    7dc4:	add	r4, r4, #1
    7dc8:	b	7964 <coda_expression_new+0x74>
    7dcc:	cmp	r4, #60	; 0x3c
    7dd0:	mov	r6, r2
    7dd4:	mov	r7, r3
    7dd8:	bne	7e7c <coda_expression_new+0x58c>
    7ddc:	ldr	r3, [r2]
    7de0:	cmp	r3, #19
    7de4:	beq	8370 <coda_expression_new+0xa80>
    7de8:	cmp	r3, #20
    7dec:	beq	8384 <coda_expression_new+0xa94>
    7df0:	mov	r0, #32
    7df4:	bl	0 <malloc>
    7df8:	subs	r3, r0, #0
    7dfc:	bne	8324 <coda_expression_new+0xa34>
    7e00:	ldr	r2, [pc, #1604]	; 844c <coda_expression_new+0xb5c>
    7e04:	ldr	r3, [pc, #1604]	; 8450 <coda_expression_new+0xb60>
    7e08:	str	r2, [sp]
    7e0c:	ldr	r1, [pc, #1600]	; 8454 <coda_expression_new+0xb64>
    7e10:	mov	r2, #32
    7e14:	mvn	r0, #0
    7e18:	bl	0 <coda_set_error>
    7e1c:	cmp	r5, #0
    7e20:	beq	7e2c <coda_expression_new+0x53c>
    7e24:	mov	r0, r5
    7e28:	bl	0 <free>
    7e2c:	cmp	r6, #0
    7e30:	beq	7e3c <coda_expression_new+0x54c>
    7e34:	mov	r0, r6
    7e38:	bl	7868 <coda_expression_delete>
    7e3c:	cmp	r7, #0
    7e40:	beq	7e4c <coda_expression_new+0x55c>
    7e44:	mov	r0, r7
    7e48:	bl	7868 <coda_expression_delete>
    7e4c:	ldr	r3, [sp, #64]	; 0x40
    7e50:	cmp	r3, #0
    7e54:	beq	7e60 <coda_expression_new+0x570>
    7e58:	mov	r0, r3
    7e5c:	bl	7868 <coda_expression_delete>
    7e60:	ldr	r3, [sp, #68]	; 0x44
    7e64:	cmp	r3, #0
    7e68:	beq	7e74 <coda_expression_new+0x584>
    7e6c:	mov	r0, r3
    7e70:	bl	7868 <coda_expression_delete>
    7e74:	mov	r3, #0
    7e78:	b	7b38 <coda_expression_new+0x248>
    7e7c:	mov	r0, #32
    7e80:	bl	0 <malloc>
    7e84:	subs	r3, r0, #0
    7e88:	beq	7e00 <coda_expression_new+0x510>
    7e8c:	ldr	r2, [sp, #64]	; 0x40
    7e90:	str	r4, [r3]
    7e94:	str	r2, [r3, #24]
    7e98:	ldr	r2, [sp, #68]	; 0x44
    7e9c:	str	r5, [r3, #12]
    7ea0:	str	r6, [r3, #16]
    7ea4:	str	r7, [r3, #20]
    7ea8:	str	r2, [r3, #28]
    7eac:	cmp	r4, #86	; 0x56
    7eb0:	ldrls	pc, [pc, r4, lsl #2]
    7eb4:	b	820c <coda_expression_new+0x91c>
    7eb8:	.word	0x00008344
    7ebc:	.word	0x00008014
    7ec0:	.word	0x00008318
    7ec4:	.word	0x00008204
    7ec8:	.word	0x000081f8
    7ecc:	.word	0x00008318
    7ed0:	.word	0x000081f8
    7ed4:	.word	0x00008318
    7ed8:	.word	0x00008204
    7edc:	.word	0x00008204
    7ee0:	.word	0x000081d0
    7ee4:	.word	0x00008204
    7ee8:	.word	0x00008318
    7eec:	.word	0x00008318
    7ef0:	.word	0x00008318
    7ef4:	.word	0x00008318
    7ef8:	.word	0x000081c4
    7efc:	.word	0x0000802c
    7f00:	.word	0x000081b0
    7f04:	.word	0x000081b0
    7f08:	.word	0x000081b0
    7f0c:	.word	0x000081b0
    7f10:	.word	0x000081b0
    7f14:	.word	0x00008318
    7f18:	.word	0x00008014
    7f1c:	.word	0x000081f8
    7f20:	.word	0x000081f8
    7f24:	.word	0x00008318
    7f28:	.word	0x000081c4
    7f2c:	.word	0x0000802c
    7f30:	.word	0x0000802c
    7f34:	.word	0x000081ec
    7f38:	.word	0x000081d0
    7f3c:	.word	0x000081d0
    7f40:	.word	0x000081d0
    7f44:	.word	0x000081d0
    7f48:	.word	0x000081d0
    7f4c:	.word	0x000081d0
    7f50:	.word	0x000081d0
    7f54:	.word	0x000081ec
    7f58:	.word	0x000081f8
    7f5c:	.word	0x000081f8
    7f60:	.word	0x00008204
    7f64:	.word	0x00008318
    7f68:	.word	0x00008318
    7f6c:	.word	0x00008318
    7f70:	.word	0x000081f8
    7f74:	.word	0x000081f8
    7f78:	.word	0x000081f8
    7f7c:	.word	0x000081f8
    7f80:	.word	0x00008318
    7f84:	.word	0x000081f8
    7f88:	.word	0x000081f8
    7f8c:	.word	0x000081f8
    7f90:	.word	0x000081f8
    7f94:	.word	0x000081c4
    7f98:	.word	0x00008014
    7f9c:	.word	0x00008014
    7fa0:	.word	0x00008014
    7fa4:	.word	0x00008014
    7fa8:	.word	0x0000820c
    7fac:	.word	0x000081f8
    7fb0:	.word	0x000081f8
    7fb4:	.word	0x00008318
    7fb8:	.word	0x00008318
    7fbc:	.word	0x00008318
    7fc0:	.word	0x0000802c
    7fc4:	.word	0x000081c4
    7fc8:	.word	0x000081c4
    7fcc:	.word	0x000081c4
    7fd0:	.word	0x00008318
    7fd4:	.word	0x00008130
    7fd8:	.word	0x0000802c
    7fdc:	.word	0x000081c4
    7fe0:	.word	0x000081ec
    7fe4:	.word	0x000081c4
    7fe8:	.word	0x000081c4
    7fec:	.word	0x000081c4
    7ff0:	.word	0x00008014
    7ff4:	.word	0x0000802c
    7ff8:	.word	0x000081c4
    7ffc:	.word	0x00008318
    8000:	.word	0x000081f8
    8004:	.word	0x00008318
    8008:	.word	0x000081ec
    800c:	.word	0x00008318
    8010:	.word	0x00008204
    8014:	ldr	r2, [r6, #4]
    8018:	cmp	r2, #2
    801c:	beq	802c <coda_expression_new+0x73c>
    8020:	ldr	r1, [r7, #4]
    8024:	cmp	r1, #2
    8028:	bne	8208 <coda_expression_new+0x918>
    802c:	mov	r2, #2
    8030:	str	r2, [r3, #4]
    8034:	sub	r4, r4, #27
    8038:	cmp	r4, #58	; 0x3a
    803c:	ldrls	pc, [pc, r4, lsl #2]
    8040:	b	8140 <coda_expression_new+0x850>
    8044:	.word	0x000081a4
    8048:	.word	0x000081a4
    804c:	.word	0x00008140
    8050:	.word	0x00008140
    8054:	.word	0x00008140
    8058:	.word	0x00008140
    805c:	.word	0x00008140
    8060:	.word	0x00008140
    8064:	.word	0x00008140
    8068:	.word	0x00008140
    806c:	.word	0x00008140
    8070:	.word	0x00008140
    8074:	.word	0x00008140
    8078:	.word	0x00008140
    807c:	.word	0x00008140
    8080:	.word	0x00008140
    8084:	.word	0x00008140
    8088:	.word	0x00008140
    808c:	.word	0x00008140
    8090:	.word	0x00008140
    8094:	.word	0x00008140
    8098:	.word	0x00008140
    809c:	.word	0x00008140
    80a0:	.word	0x00008140
    80a4:	.word	0x00008140
    80a8:	.word	0x00008140
    80ac:	.word	0x00008140
    80b0:	.word	0x00008140
    80b4:	.word	0x00008140
    80b8:	.word	0x00008140
    80bc:	.word	0x00008140
    80c0:	.word	0x00008140
    80c4:	.word	0x00008140
    80c8:	.word	0x00008140
    80cc:	.word	0x00008140
    80d0:	.word	0x00008140
    80d4:	.word	0x00008140
    80d8:	.word	0x00008140
    80dc:	.word	0x00008140
    80e0:	.word	0x00008140
    80e4:	.word	0x000081a4
    80e8:	.word	0x000081a4
    80ec:	.word	0x000081a4
    80f0:	.word	0x000081a4
    80f4:	.word	0x00008140
    80f8:	.word	0x00008140
    80fc:	.word	0x00008140
    8100:	.word	0x00008140
    8104:	.word	0x00008140
    8108:	.word	0x00008140
    810c:	.word	0x00008140
    8110:	.word	0x00008140
    8114:	.word	0x00008140
    8118:	.word	0x00008140
    811c:	.word	0x00008140
    8120:	.word	0x00008140
    8124:	.word	0x000081a4
    8128:	.word	0x000081a4
    812c:	.word	0x000081a4
    8130:	ldr	r2, [sp, #64]	; 0x40
    8134:	cmp	r2, #0
    8138:	movne	r2, #3
    813c:	str	r2, [r3, #4]
    8140:	cmp	r6, #0
    8144:	beq	8154 <coda_expression_new+0x864>
    8148:	ldr	r2, [r6, #8]
    814c:	cmp	r2, #0
    8150:	beq	81e4 <coda_expression_new+0x8f4>
    8154:	cmp	r7, #0
    8158:	beq	8168 <coda_expression_new+0x878>
    815c:	ldr	r2, [r7, #8]
    8160:	cmp	r2, #0
    8164:	beq	81e4 <coda_expression_new+0x8f4>
    8168:	ldr	r2, [sp, #64]	; 0x40
    816c:	cmp	r2, #0
    8170:	beq	8180 <coda_expression_new+0x890>
    8174:	ldr	r2, [r2, #8]
    8178:	cmp	r2, #0
    817c:	beq	81e4 <coda_expression_new+0x8f4>
    8180:	ldr	r2, [sp, #68]	; 0x44
    8184:	cmp	r2, #0
    8188:	beq	8198 <coda_expression_new+0x8a8>
    818c:	ldr	r2, [r2, #8]
    8190:	cmp	r2, #0
    8194:	beq	81e4 <coda_expression_new+0x8f4>
    8198:	mov	r2, #1
    819c:	str	r2, [r3, #8]
    81a0:	b	7b38 <coda_expression_new+0x248>
    81a4:	mov	r2, #0
    81a8:	str	r2, [r3, #8]
    81ac:	b	7b38 <coda_expression_new+0x248>
    81b0:	ldr	r3, [pc, #672]	; 8458 <coda_expression_new+0xb68>
    81b4:	ldr	r2, [pc, #672]	; 845c <coda_expression_new+0xb6c>
    81b8:	ldr	r1, [pc, #656]	; 8450 <coda_expression_new+0xb60>
    81bc:	ldr	r0, [pc, #668]	; 8460 <coda_expression_new+0xb70>
    81c0:	bl	0 <__assert_fail>
    81c4:	mov	r2, #3
    81c8:	str	r2, [r3, #4]
    81cc:	b	8034 <coda_expression_new+0x744>
    81d0:	sub	r4, r4, #27
    81d4:	mov	r2, #4
    81d8:	cmp	r4, #1
    81dc:	str	r2, [r3, #4]
    81e0:	bls	81a4 <coda_expression_new+0x8b4>
    81e4:	mov	r2, #0
    81e8:	b	819c <coda_expression_new+0x8ac>
    81ec:	mov	r2, #5
    81f0:	str	r2, [r3, #4]
    81f4:	b	8034 <coda_expression_new+0x744>
    81f8:	mov	r2, #0
    81fc:	str	r2, [r3, #4]
    8200:	b	8034 <coda_expression_new+0x744>
    8204:	ldr	r2, [r7, #4]
    8208:	str	r2, [r3, #4]
    820c:	sub	r4, r4, #27
    8210:	cmp	r4, #58	; 0x3a
    8214:	ldrls	pc, [pc, r4, lsl #2]
    8218:	b	8308 <coda_expression_new+0xa18>
    821c:	.word	0x000081a4
    8220:	.word	0x000081a4
    8224:	.word	0x00008308
    8228:	.word	0x00008308
    822c:	.word	0x00008308
    8230:	.word	0x00008308
    8234:	.word	0x00008308
    8238:	.word	0x00008308
    823c:	.word	0x00008308
    8240:	.word	0x00008308
    8244:	.word	0x00008308
    8248:	.word	0x00008308
    824c:	.word	0x00008308
    8250:	.word	0x00008308
    8254:	.word	0x00008308
    8258:	.word	0x00008308
    825c:	.word	0x00008308
    8260:	.word	0x00008308
    8264:	.word	0x00008308
    8268:	.word	0x00008308
    826c:	.word	0x00008308
    8270:	.word	0x00008308
    8274:	.word	0x00008308
    8278:	.word	0x00008308
    827c:	.word	0x00008308
    8280:	.word	0x00008308
    8284:	.word	0x00008308
    8288:	.word	0x00008308
    828c:	.word	0x00008308
    8290:	.word	0x00008308
    8294:	.word	0x00008308
    8298:	.word	0x00008308
    829c:	.word	0x00008308
    82a0:	.word	0x00008308
    82a4:	.word	0x00008308
    82a8:	.word	0x00008308
    82ac:	.word	0x00008308
    82b0:	.word	0x00008308
    82b4:	.word	0x00008308
    82b8:	.word	0x00008308
    82bc:	.word	0x000081a4
    82c0:	.word	0x000081a4
    82c4:	.word	0x000081a4
    82c8:	.word	0x000081a4
    82cc:	.word	0x00008308
    82d0:	.word	0x00008308
    82d4:	.word	0x00008308
    82d8:	.word	0x00008308
    82dc:	.word	0x00008308
    82e0:	.word	0x00008308
    82e4:	.word	0x00008308
    82e8:	.word	0x00008308
    82ec:	.word	0x00008308
    82f0:	.word	0x00008308
    82f4:	.word	0x00008308
    82f8:	.word	0x00008308
    82fc:	.word	0x000081a4
    8300:	.word	0x000081a4
    8304:	.word	0x000081a4
    8308:	ldr	r2, [r3, #4]
    830c:	cmp	r2, #4
    8310:	bne	8140 <coda_expression_new+0x850>
    8314:	b	81e4 <coda_expression_new+0x8f4>
    8318:	mov	r2, #1
    831c:	str	r2, [r3, #4]
    8320:	b	8034 <coda_expression_new+0x744>
    8324:	ldr	r2, [sp, #64]	; 0x40
    8328:	str	r4, [r3]
    832c:	str	r2, [r3, #24]
    8330:	ldr	r2, [sp, #68]	; 0x44
    8334:	str	r5, [r3, #12]
    8338:	str	r6, [r3, #16]
    833c:	str	r7, [r3, #20]
    8340:	str	r2, [r3, #28]
    8344:	ldr	r2, [r6, #4]
    8348:	str	r2, [r3, #4]
    834c:	b	820c <coda_expression_new+0x91c>
    8350:	mvn	r0, #102	; 0x66
    8354:	ldr	r1, [pc, #264]	; 8464 <coda_expression_new+0xb74>
    8358:	bl	0 <coda_set_error>
    835c:	mov	r0, r5
    8360:	bl	0 <free>
    8364:	b	7e74 <coda_expression_new+0x584>
    8368:	mov	r4, r1
    836c:	b	7c74 <coda_expression_new+0x384>
    8370:	vldr	d7, [r2, #16]
    8374:	mov	r3, r2
    8378:	vneg.f64	d7, d7
    837c:	vstr	d7, [r2, #16]
    8380:	b	7b38 <coda_expression_new+0x248>
    8384:	ldrd	r0, [r2, #16]
    8388:	mov	r3, r2
    838c:	rsbs	r0, r0, #0
    8390:	rsc	r1, r1, #0
    8394:	strd	r0, [r2, #16]
    8398:	b	7b38 <coda_expression_new+0x248>
    839c:	mov	r4, r2
    83a0:	b	7c6c <coda_expression_new+0x37c>
    83a4:	mov	r3, #232	; 0xe8
    83a8:	str	r3, [sp]
    83ac:	mov	r2, #16
    83b0:	ldr	r3, [pc, #152]	; 8450 <coda_expression_new+0xb60>
    83b4:	ldr	r1, [pc, #152]	; 8454 <coda_expression_new+0xb64>
    83b8:	mvn	r0, #0
    83bc:	bl	0 <coda_set_error>
    83c0:	mov	r0, r5
    83c4:	bl	0 <free>
    83c8:	mov	r3, r4
    83cc:	b	7b38 <coda_expression_new+0x248>
    83d0:	ldr	r2, [pc, #144]	; 8468 <coda_expression_new+0xb78>
    83d4:	ldr	r3, [pc, #116]	; 8450 <coda_expression_new+0xb60>
    83d8:	str	r2, [sp]
    83dc:	ldr	r1, [pc, #112]	; 8454 <coda_expression_new+0xb64>
    83e0:	mov	r2, #20
    83e4:	mvn	r0, #0
    83e8:	bl	0 <coda_set_error>
    83ec:	mov	r3, r4
    83f0:	b	7b38 <coda_expression_new+0x248>
    83f4:	ldr	r2, [pc, #112]	; 846c <coda_expression_new+0xb7c>
    83f8:	ldr	r3, [pc, #80]	; 8450 <coda_expression_new+0xb60>
    83fc:	str	r2, [sp]
    8400:	ldr	r1, [pc, #76]	; 8454 <coda_expression_new+0xb64>
    8404:	mov	r2, #20
    8408:	mvn	r0, #0
    840c:	bl	0 <coda_set_error>
    8410:	mov	r3, r6
    8414:	b	7b38 <coda_expression_new+0x248>
    8418:	mov	r3, #288	; 0x120
    841c:	str	r3, [sp]
    8420:	ldr	r3, [pc, #40]	; 8450 <coda_expression_new+0xb60>
    8424:	mov	r2, #24
    8428:	ldr	r1, [pc, #36]	; 8454 <coda_expression_new+0xb64>
    842c:	mvn	r0, #0
    8430:	bl	0 <coda_set_error>
    8434:	mov	r3, r4
    8438:	b	7b38 <coda_expression_new+0x248>
    843c:	ldr	r2, [pc, #44]	; 8470 <coda_expression_new+0xb80>
    8440:	ldr	r3, [pc, #8]	; 8450 <coda_expression_new+0xb60>
    8444:	str	r2, [sp]
    8448:	b	8424 <coda_expression_new+0xb34>
    844c:	.word	0x00000183
    8450:	.word	0x000005b8
    8454:	.word	0x00000cd4
    8458:	.word	0x0000007c
    845c:	.word	0x0000021d
    8460:	.word	0x00000a0c
    8464:	.word	0x00000d0c
    8468:	.word	0x00000133
    846c:	.word	0x0000014f
    8470:	.word	0x00000105

00008474 <coda_expression_is_constant>:
    8474:	cmp	r0, #0
    8478:	beq	8484 <coda_expression_is_constant+0x10>
    847c:	ldr	r0, [r0, #8]
    8480:	bx	lr
    8484:	push	{r4, lr}
    8488:	mvn	r0, #99	; 0x63
    848c:	ldr	r3, [pc, #16]	; 84a4 <coda_expression_is_constant+0x30>
    8490:	ldr	r2, [pc, #16]	; 84a8 <coda_expression_is_constant+0x34>
    8494:	ldr	r1, [pc, #16]	; 84ac <coda_expression_is_constant+0x38>
    8498:	bl	0 <coda_set_error>
    849c:	mvn	r0, #0
    84a0:	pop	{r4, pc}
    84a4:	.word	0x00001369
    84a8:	.word	0x000005b8
    84ac:	.word	0x00000d30

000084b0 <coda_expression_is_equal>:
    84b0:	push	{r4, r5, r6, lr}
    84b4:	subs	r5, r0, #0
    84b8:	beq	857c <coda_expression_is_equal+0xcc>
    84bc:	cmp	r1, #0
    84c0:	beq	84d4 <coda_expression_is_equal+0x24>
    84c4:	ldr	r3, [r5]
    84c8:	ldr	r2, [r1]
    84cc:	cmp	r3, r2
    84d0:	beq	84dc <coda_expression_is_equal+0x2c>
    84d4:	mov	r0, #0
    84d8:	pop	{r4, r5, r6, pc}
    84dc:	sub	r3, r3, #18
    84e0:	mov	r4, r1
    84e4:	cmp	r3, #4
    84e8:	ldrls	pc, [pc, r3, lsl #2]
    84ec:	b	8588 <coda_expression_is_equal+0xd8>
    84f0:	.word	0x00008564
    84f4:	.word	0x00008548
    84f8:	.word	0x0000852c
    84fc:	.word	0x00008504
    8500:	.word	0x00008504
    8504:	ldr	r2, [r5, #12]
    8508:	ldr	r3, [r1, #12]
    850c:	cmp	r2, r3
    8510:	bne	84d4 <coda_expression_is_equal+0x24>
    8514:	ldr	r1, [r1, #16]
    8518:	ldr	r0, [r5, #16]
    851c:	bl	0 <memcmp>
    8520:	clz	r0, r0
    8524:	lsr	r0, r0, #5
    8528:	pop	{r4, r5, r6, pc}
    852c:	ldrd	r0, [r5, #16]
    8530:	ldrd	r2, [r4, #16]
    8534:	cmp	r1, r3
    8538:	cmpeq	r0, r2
    853c:	moveq	r0, #1
    8540:	movne	r0, #0
    8544:	pop	{r4, r5, r6, pc}
    8548:	vldr	d6, [r5, #16]
    854c:	vldr	d7, [r1, #16]
    8550:	vcmp.f64	d6, d7
    8554:	vmrs	APSR_nzcv, fpscr
    8558:	moveq	r0, #1
    855c:	movne	r0, #0
    8560:	pop	{r4, r5, r6, pc}
    8564:	ldr	r0, [r5, #12]
    8568:	ldr	r1, [r1, #12]
    856c:	sub	r0, r0, r1
    8570:	clz	r0, r0
    8574:	lsr	r0, r0, #5
    8578:	pop	{r4, r5, r6, pc}
    857c:	clz	r0, r1
    8580:	lsr	r0, r0, #5
    8584:	pop	{r4, r5, r6, pc}
    8588:	ldr	r0, [r5, #12]
    858c:	cmp	r0, #0
    8590:	beq	85dc <coda_expression_is_equal+0x12c>
    8594:	ldr	r1, [r1, #12]
    8598:	cmp	r1, #0
    859c:	beq	84d4 <coda_expression_is_equal+0x24>
    85a0:	bl	0 <strcmp>
    85a4:	cmp	r0, #0
    85a8:	bne	84d4 <coda_expression_is_equal+0x24>
    85ac:	add	r6, r5, #16
    85b0:	add	r4, r4, #16
    85b4:	add	r5, r5, #32
    85b8:	ldr	r1, [r4], #4
    85bc:	ldr	r0, [r6], #4
    85c0:	bl	84b0 <coda_expression_is_equal>
    85c4:	cmp	r0, #0
    85c8:	popeq	{r4, r5, r6, pc}
    85cc:	cmp	r6, r5
    85d0:	bne	85b8 <coda_expression_is_equal+0x108>
    85d4:	mov	r0, #1
    85d8:	pop	{r4, r5, r6, pc}
    85dc:	ldr	r3, [r1, #12]
    85e0:	cmp	r3, #0
    85e4:	popne	{r4, r5, r6, pc}
    85e8:	b	85ac <coda_expression_is_equal+0xfc>

000085ec <coda_expression_get_type>:
    85ec:	cmp	r0, #0
    85f0:	beq	8604 <coda_expression_get_type+0x18>
    85f4:	ldr	r3, [r0, #4]
    85f8:	mov	r0, #0
    85fc:	str	r3, [r1]
    8600:	bx	lr
    8604:	push	{r4, lr}
    8608:	mvn	r0, #99	; 0x63
    860c:	ldr	r3, [pc, #16]	; 8624 <coda_expression_get_type+0x38>
    8610:	ldr	r2, [pc, #16]	; 8628 <coda_expression_get_type+0x3c>
    8614:	ldr	r1, [pc, #16]	; 862c <coda_expression_get_type+0x40>
    8618:	bl	0 <coda_set_error>
    861c:	mvn	r0, #0
    8620:	pop	{r4, pc}
    8624:	.word	0x000013cf
    8628:	.word	0x000005b8
    862c:	.word	0x00000d30

00008630 <coda_expression_eval_bool>:
    8630:	push	{r4, r5, r6, r7, r8, r9, lr}
    8634:	sub	sp, sp, #572	; 0x23c
    8638:	ldr	r8, [r0, #4]
    863c:	cmp	r8, #0
    8640:	bne	8724 <coda_expression_eval_bool+0xf4>
    8644:	cmp	r1, #0
    8648:	mov	r7, r0
    864c:	mov	r6, r1
    8650:	beq	86c4 <coda_expression_eval_bool+0x94>
    8654:	mov	r9, r2
    8658:	add	r0, sp, #8
    865c:	mov	r2, #520	; 0x208
    8660:	mov	r4, #0
    8664:	mov	r5, #0
    8668:	str	r1, [sp]
    866c:	bl	0 <memcpy>
    8670:	add	ip, sp, #536	; 0x218
    8674:	add	r3, sp, #552	; 0x228
    8678:	mov	r2, r9
    867c:	mov	r1, r7
    8680:	mov	r0, sp
    8684:	str	r8, [sp, #560]	; 0x230
    8688:	strd	r4, [ip, #-8]
    868c:	strd	r4, [ip]
    8690:	strd	r4, [r3]
    8694:	strd	r4, [r3, #-8]
    8698:	bl	629c <eval_boolean>
    869c:	cmp	r0, #0
    86a0:	beq	870c <coda_expression_eval_bool+0xdc>
    86a4:	mov	r0, r6
    86a8:	add	r1, sp, #8
    86ac:	bl	0 <coda_cursor_compare>
    86b0:	cmp	r0, #0
    86b4:	bne	8718 <coda_expression_eval_bool+0xe8>
    86b8:	mvn	r0, #0
    86bc:	add	sp, sp, #572	; 0x23c
    86c0:	pop	{r4, r5, r6, r7, r8, r9, pc}
    86c4:	ldr	r3, [r0, #8]
    86c8:	cmp	r3, #0
    86cc:	beq	8738 <coda_expression_eval_bool+0x108>
    86d0:	mov	r4, #0
    86d4:	mov	r5, #0
    86d8:	add	ip, sp, #536	; 0x218
    86dc:	add	r3, sp, #552	; 0x228
    86e0:	mov	r1, r0
    86e4:	mov	r0, sp
    86e8:	str	r6, [sp]
    86ec:	str	r6, [sp, #560]	; 0x230
    86f0:	strd	r4, [ip, #-8]
    86f4:	strd	r4, [ip]
    86f8:	strd	r4, [r3]
    86fc:	strd	r4, [r3, #-8]
    8700:	bl	629c <eval_boolean>
    8704:	cmp	r0, #0
    8708:	bne	86b8 <coda_expression_eval_bool+0x88>
    870c:	mov	r0, #0
    8710:	add	sp, sp, #572	; 0x23c
    8714:	pop	{r4, r5, r6, r7, r8, r9, pc}
    8718:	add	r0, sp, #8
    871c:	bl	0 <coda_cursor_add_to_error_message>
    8720:	b	86b8 <coda_expression_eval_bool+0x88>
    8724:	mvn	r0, #99	; 0x63
    8728:	ldr	r1, [pc, #28]	; 874c <coda_expression_eval_bool+0x11c>
    872c:	bl	0 <coda_set_error>
    8730:	mvn	r0, #0
    8734:	b	86bc <coda_expression_eval_bool+0x8c>
    8738:	mvn	r0, #99	; 0x63
    873c:	ldr	r1, [pc, #12]	; 8750 <coda_expression_eval_bool+0x120>
    8740:	bl	0 <coda_set_error>
    8744:	mvn	r0, #0
    8748:	b	86bc <coda_expression_eval_bool+0x8c>
    874c:	.word	0x00000d54
    8750:	.word	0x00000c8c

00008754 <coda_expression_eval_integer>:
    8754:	ldr	r3, [r0, #4]
    8758:	push	{r4, r5, r6, r7, r8, lr}
    875c:	cmp	r3, #1
    8760:	sub	sp, sp, #568	; 0x238
    8764:	bne	8850 <coda_expression_eval_integer+0xfc>
    8768:	cmp	r1, #0
    876c:	mov	r7, r0
    8770:	mov	r6, r1
    8774:	beq	87f0 <coda_expression_eval_integer+0x9c>
    8778:	mov	r8, r2
    877c:	add	r0, sp, #8
    8780:	mov	r2, #520	; 0x208
    8784:	mov	r4, #0
    8788:	mov	r5, #0
    878c:	str	r1, [sp]
    8790:	bl	0 <memcpy>
    8794:	add	r0, sp, #552	; 0x228
    8798:	add	r3, sp, #536	; 0x218
    879c:	add	ip, sp, #536	; 0x218
    87a0:	strd	r4, [r3, #-8]
    87a4:	strd	r4, [r0]
    87a8:	mov	r3, #0
    87ac:	strd	r4, [r0, #-8]
    87b0:	mov	r2, r8
    87b4:	mov	r1, r7
    87b8:	mov	r0, sp
    87bc:	strd	r4, [ip]
    87c0:	str	r3, [sp, #560]	; 0x230
    87c4:	bl	3c6c <eval_integer>
    87c8:	cmp	r0, #0
    87cc:	beq	8838 <coda_expression_eval_integer+0xe4>
    87d0:	mov	r0, r6
    87d4:	add	r1, sp, #8
    87d8:	bl	0 <coda_cursor_compare>
    87dc:	cmp	r0, #0
    87e0:	bne	8844 <coda_expression_eval_integer+0xf0>
    87e4:	mvn	r0, #0
    87e8:	add	sp, sp, #568	; 0x238
    87ec:	pop	{r4, r5, r6, r7, r8, pc}
    87f0:	ldr	r3, [r0, #8]
    87f4:	cmp	r3, #0
    87f8:	beq	8864 <coda_expression_eval_integer+0x110>
    87fc:	mov	r4, #0
    8800:	mov	r5, #0
    8804:	add	ip, sp, #536	; 0x218
    8808:	add	r3, sp, #552	; 0x228
    880c:	mov	r1, r0
    8810:	mov	r0, sp
    8814:	str	r6, [sp]
    8818:	str	r6, [sp, #560]	; 0x230
    881c:	strd	r4, [ip, #-8]
    8820:	strd	r4, [ip]
    8824:	strd	r4, [r3]
    8828:	strd	r4, [r3, #-8]
    882c:	bl	3c6c <eval_integer>
    8830:	cmp	r0, #0
    8834:	bne	87e4 <coda_expression_eval_integer+0x90>
    8838:	mov	r0, #0
    883c:	add	sp, sp, #568	; 0x238
    8840:	pop	{r4, r5, r6, r7, r8, pc}
    8844:	add	r0, sp, #8
    8848:	bl	0 <coda_cursor_add_to_error_message>
    884c:	b	87e4 <coda_expression_eval_integer+0x90>
    8850:	mvn	r0, #99	; 0x63
    8854:	ldr	r1, [pc, #28]	; 8878 <coda_expression_eval_integer+0x124>
    8858:	bl	0 <coda_set_error>
    885c:	mvn	r0, #0
    8860:	b	87e8 <coda_expression_eval_integer+0x94>
    8864:	mvn	r0, #99	; 0x63
    8868:	ldr	r1, [pc, #12]	; 887c <coda_expression_eval_integer+0x128>
    886c:	bl	0 <coda_set_error>
    8870:	mvn	r0, #0
    8874:	b	87e8 <coda_expression_eval_integer+0x94>
    8878:	.word	0x00000d80
    887c:	.word	0x00000c8c

00008880 <coda_expression_eval_float>:
    8880:	ldr	r3, [r0, #4]
    8884:	push	{r4, r5, r6, r7, r8, lr}
    8888:	cmp	r3, #2
    888c:	sub	sp, sp, #568	; 0x238
    8890:	bne	897c <coda_expression_eval_float+0xfc>
    8894:	cmp	r1, #0
    8898:	mov	r7, r0
    889c:	mov	r6, r1
    88a0:	beq	891c <coda_expression_eval_float+0x9c>
    88a4:	mov	r8, r2
    88a8:	add	r0, sp, #8
    88ac:	mov	r2, #520	; 0x208
    88b0:	mov	r4, #0
    88b4:	mov	r5, #0
    88b8:	str	r1, [sp]
    88bc:	bl	0 <memcpy>
    88c0:	add	r0, sp, #552	; 0x228
    88c4:	add	r3, sp, #536	; 0x218
    88c8:	add	ip, sp, #536	; 0x218
    88cc:	strd	r4, [r3, #-8]
    88d0:	strd	r4, [r0]
    88d4:	mov	r3, #0
    88d8:	strd	r4, [r0, #-8]
    88dc:	mov	r2, r8
    88e0:	mov	r1, r7
    88e4:	mov	r0, sp
    88e8:	strd	r4, [ip]
    88ec:	str	r3, [sp, #560]	; 0x230
    88f0:	bl	5640 <eval_float>
    88f4:	cmp	r0, #0
    88f8:	beq	8964 <coda_expression_eval_float+0xe4>
    88fc:	mov	r0, r6
    8900:	add	r1, sp, #8
    8904:	bl	0 <coda_cursor_compare>
    8908:	cmp	r0, #0
    890c:	bne	8970 <coda_expression_eval_float+0xf0>
    8910:	mvn	r0, #0
    8914:	add	sp, sp, #568	; 0x238
    8918:	pop	{r4, r5, r6, r7, r8, pc}
    891c:	ldr	r3, [r0, #8]
    8920:	cmp	r3, #0
    8924:	beq	8990 <coda_expression_eval_float+0x110>
    8928:	mov	r4, #0
    892c:	mov	r5, #0
    8930:	add	ip, sp, #536	; 0x218
    8934:	add	r3, sp, #552	; 0x228
    8938:	mov	r1, r0
    893c:	mov	r0, sp
    8940:	str	r6, [sp]
    8944:	str	r6, [sp, #560]	; 0x230
    8948:	strd	r4, [ip, #-8]
    894c:	strd	r4, [ip]
    8950:	strd	r4, [r3]
    8954:	strd	r4, [r3, #-8]
    8958:	bl	5640 <eval_float>
    895c:	cmp	r0, #0
    8960:	bne	8910 <coda_expression_eval_float+0x90>
    8964:	mov	r0, #0
    8968:	add	sp, sp, #568	; 0x238
    896c:	pop	{r4, r5, r6, r7, r8, pc}
    8970:	add	r0, sp, #8
    8974:	bl	0 <coda_cursor_add_to_error_message>
    8978:	b	8910 <coda_expression_eval_float+0x90>
    897c:	mvn	r0, #99	; 0x63
    8980:	ldr	r1, [pc, #28]	; 89a4 <coda_expression_eval_float+0x124>
    8984:	bl	0 <coda_set_error>
    8988:	mvn	r0, #0
    898c:	b	8914 <coda_expression_eval_float+0x94>
    8990:	mvn	r0, #99	; 0x63
    8994:	ldr	r1, [pc, #12]	; 89a8 <coda_expression_eval_float+0x128>
    8998:	bl	0 <coda_set_error>
    899c:	mvn	r0, #0
    89a0:	b	8914 <coda_expression_eval_float+0x94>
    89a4:	.word	0x00000dac
    89a8:	.word	0x00000c8c

000089ac <coda_expression_eval_string>:
    89ac:	push	{r4, r5, r6, r7, r8, r9, lr}
    89b0:	mov	r6, r2
    89b4:	ldr	r2, [r0, #4]
    89b8:	sub	sp, sp, #588	; 0x24c
    89bc:	cmp	r2, #3
    89c0:	bne	8b40 <coda_expression_eval_string+0x194>
    89c4:	cmp	r1, #0
    89c8:	mov	r5, r0
    89cc:	mov	r4, r1
    89d0:	mov	r7, r3
    89d4:	beq	8a54 <coda_expression_eval_string+0xa8>
    89d8:	mov	r2, #520	; 0x208
    89dc:	add	r0, sp, #24
    89e0:	str	r1, [sp, #16]
    89e4:	bl	0 <memcpy>
    89e8:	mov	r2, #0
    89ec:	mov	r3, #0
    89f0:	add	r0, sp, #568	; 0x238
    89f4:	add	ip, sp, #552	; 0x228
    89f8:	add	lr, sp, #552	; 0x228
    89fc:	str	r6, [sp]
    8a00:	mov	r1, r5
    8a04:	strd	r2, [ip, #-8]
    8a08:	strd	r2, [r0]
    8a0c:	strd	r2, [r0, #-8]
    8a10:	strd	r2, [lr]
    8a14:	mov	ip, #0
    8a18:	mov	r3, r7
    8a1c:	add	r2, sp, #12
    8a20:	add	r0, sp, #16
    8a24:	str	ip, [sp, #576]	; 0x240
    8a28:	bl	2430 <eval_string>
    8a2c:	cmp	r0, #0
    8a30:	beq	8aa8 <coda_expression_eval_string+0xfc>
    8a34:	mov	r0, r4
    8a38:	add	r1, sp, #24
    8a3c:	bl	0 <coda_cursor_compare>
    8a40:	cmp	r0, #0
    8a44:	bne	8b0c <coda_expression_eval_string+0x160>
    8a48:	mvn	r0, #0
    8a4c:	add	sp, sp, #588	; 0x24c
    8a50:	pop	{r4, r5, r6, r7, r8, r9, pc}
    8a54:	ldr	r2, [r0, #8]
    8a58:	cmp	r2, #0
    8a5c:	beq	8b54 <coda_expression_eval_string+0x1a8>
    8a60:	mov	r8, #0
    8a64:	mov	r9, #0
    8a68:	add	r2, sp, #552	; 0x228
    8a6c:	mov	r1, r0
    8a70:	add	ip, sp, #552	; 0x228
    8a74:	add	r0, sp, #568	; 0x238
    8a78:	str	r6, [sp]
    8a7c:	strd	r8, [r2, #-8]
    8a80:	strd	r8, [r0]
    8a84:	strd	r8, [r0, #-8]
    8a88:	add	r2, sp, #12
    8a8c:	strd	r8, [ip]
    8a90:	add	r0, sp, #16
    8a94:	str	r4, [sp, #16]
    8a98:	str	r4, [sp, #576]	; 0x240
    8a9c:	bl	2430 <eval_string>
    8aa0:	cmp	r0, #0
    8aa4:	bne	8a48 <coda_expression_eval_string+0x9c>
    8aa8:	ldr	r3, [r7]
    8aac:	cmp	r3, #0
    8ab0:	ble	8b20 <coda_expression_eval_string+0x174>
    8ab4:	ldr	r2, [sp, #12]
    8ab8:	cmp	r2, #0
    8abc:	bne	8ad4 <coda_expression_eval_string+0x128>
    8ac0:	ldr	r4, [r6]
    8ac4:	mov	r0, #0
    8ac8:	strb	r0, [r4, r3]
    8acc:	add	sp, sp, #588	; 0x24c
    8ad0:	pop	{r4, r5, r6, r7, r8, r9, pc}
    8ad4:	add	r0, r3, #1
    8ad8:	bl	0 <malloc>
    8adc:	subs	r4, r0, #0
    8ae0:	beq	8b68 <coda_expression_eval_string+0x1bc>
    8ae4:	ldr	r5, [r6]
    8ae8:	ldr	r1, [sp, #12]
    8aec:	ldr	r2, [r7]
    8af0:	add	r1, r5, r1
    8af4:	bl	0 <memcpy>
    8af8:	mov	r0, r5
    8afc:	bl	0 <free>
    8b00:	ldr	r3, [r7]
    8b04:	str	r4, [r6]
    8b08:	b	8ac4 <coda_expression_eval_string+0x118>
    8b0c:	add	r0, sp, #24
    8b10:	bl	0 <coda_cursor_add_to_error_message>
    8b14:	mvn	r0, #0
    8b18:	add	sp, sp, #588	; 0x24c
    8b1c:	pop	{r4, r5, r6, r7, r8, r9, pc}
    8b20:	ldr	r0, [r6]
    8b24:	cmp	r0, #0
    8b28:	beq	8b30 <coda_expression_eval_string+0x184>
    8b2c:	bl	0 <free>
    8b30:	mov	r0, #0
    8b34:	str	r0, [r6]
    8b38:	add	sp, sp, #588	; 0x24c
    8b3c:	pop	{r4, r5, r6, r7, r8, r9, pc}
    8b40:	mvn	r0, #99	; 0x63
    8b44:	ldr	r1, [pc, #60]	; 8b88 <coda_expression_eval_string+0x1dc>
    8b48:	bl	0 <coda_set_error>
    8b4c:	mvn	r0, #0
    8b50:	b	8a4c <coda_expression_eval_string+0xa0>
    8b54:	mvn	r0, #99	; 0x63
    8b58:	ldr	r1, [pc, #44]	; 8b8c <coda_expression_eval_string+0x1e0>
    8b5c:	bl	0 <coda_set_error>
    8b60:	mvn	r0, #0
    8b64:	b	8a4c <coda_expression_eval_string+0xa0>
    8b68:	ldr	r3, [pc, #32]	; 8b90 <coda_expression_eval_string+0x1e4>
    8b6c:	ldr	r2, [r7]
    8b70:	ldr	r1, [pc, #28]	; 8b94 <coda_expression_eval_string+0x1e8>
    8b74:	str	r3, [sp]
    8b78:	mvn	r0, #0
    8b7c:	ldr	r3, [pc, #20]	; 8b98 <coda_expression_eval_string+0x1ec>
    8b80:	bl	0 <coda_set_error>
    8b84:	b	8a48 <coda_expression_eval_string+0x9c>
    8b88:	.word	0x00000dd4
    8b8c:	.word	0x00000c8c
    8b90:	.word	0x00001483
    8b94:	.word	0x000007e0
    8b98:	.word	0x000005b8

00008b9c <coda_expression_eval_node>:
    8b9c:	ldr	r3, [r0, #4]
    8ba0:	push	{r4, r5, lr}
    8ba4:	cmp	r3, #4
    8ba8:	sub	sp, sp, #572	; 0x23c
    8bac:	bne	8c54 <coda_expression_eval_node+0xb8>
    8bb0:	cmp	r1, #0
    8bb4:	mov	r4, r1
    8bb8:	beq	8c68 <coda_expression_eval_node+0xcc>
    8bbc:	mov	r5, r0
    8bc0:	mov	r2, #520	; 0x208
    8bc4:	add	r0, sp, #8
    8bc8:	str	r1, [sp]
    8bcc:	bl	0 <memcpy>
    8bd0:	mov	r2, #0
    8bd4:	mov	r3, #0
    8bd8:	add	r0, sp, #536	; 0x218
    8bdc:	add	lr, sp, #552	; 0x228
    8be0:	mov	r1, r5
    8be4:	add	r5, sp, #536	; 0x218
    8be8:	mov	ip, #0
    8bec:	strd	r2, [r0, #-8]
    8bf0:	mov	r0, sp
    8bf4:	strd	r2, [r5]
    8bf8:	strd	r2, [lr]
    8bfc:	strd	r2, [lr, #-8]
    8c00:	str	ip, [sp, #560]	; 0x230
    8c04:	bl	5294 <eval_cursor>
    8c08:	subs	r5, r0, #0
    8c0c:	bne	8c2c <coda_expression_eval_node+0x90>
    8c10:	add	r1, sp, #8
    8c14:	mov	r0, r4
    8c18:	mov	r2, #520	; 0x208
    8c1c:	bl	0 <memcpy>
    8c20:	mov	r0, r5
    8c24:	add	sp, sp, #572	; 0x23c
    8c28:	pop	{r4, r5, pc}
    8c2c:	mov	r0, r4
    8c30:	add	r1, sp, #8
    8c34:	bl	0 <coda_cursor_compare>
    8c38:	cmp	r0, #0
    8c3c:	mvneq	r5, #0
    8c40:	beq	8c20 <coda_expression_eval_node+0x84>
    8c44:	add	r0, sp, #8
    8c48:	bl	0 <coda_cursor_add_to_error_message>
    8c4c:	mvn	r5, #0
    8c50:	b	8c20 <coda_expression_eval_node+0x84>
    8c54:	ldr	r1, [pc, #32]	; 8c7c <coda_expression_eval_node+0xe0>
    8c58:	mvn	r0, #99	; 0x63
    8c5c:	bl	0 <coda_set_error>
    8c60:	mvn	r5, #0
    8c64:	b	8c20 <coda_expression_eval_node+0x84>
    8c68:	ldr	r1, [pc, #16]	; 8c80 <coda_expression_eval_node+0xe4>
    8c6c:	mvn	r0, #99	; 0x63
    8c70:	bl	0 <coda_set_error>
    8c74:	mvn	r5, #0
    8c78:	b	8c20 <coda_expression_eval_node+0x84>
    8c7c:	.word	0x00000dfc
    8c80:	.word	0x00000e24
