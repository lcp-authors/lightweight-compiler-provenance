
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-grib-type.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_grib_type_delete>:
   0:	push	{r4, lr}
   4:	subs	r4, r0, #0
   8:	beq	80 <coda_grib_type_delete+0x80>
   c:	ldr	r3, [r4]
  10:	cmp	r3, #105	; 0x69
  14:	bne	94 <coda_grib_type_delete+0x94>
  18:	ldr	r0, [r4, #4]
  1c:	ldr	r3, [r0, #8]
  20:	cmp	r3, #1
  24:	beq	38 <coda_grib_type_delete+0x38>
  28:	bl	0 <coda_type_release>
  2c:	mov	r0, r4
  30:	pop	{r4, lr}
  34:	b	0 <free>
  38:	ldr	r0, [r4, #12]
  3c:	cmp	r0, #0
  40:	beq	48 <coda_grib_type_delete+0x48>
  44:	bl	0 <coda_dynamic_type_delete>
  48:	ldr	r0, [r4, #56]	; 0x38
  4c:	cmp	r0, #0
  50:	beq	58 <coda_grib_type_delete+0x58>
  54:	bl	0 <free>
  58:	ldr	r0, [r4, #60]	; 0x3c
  5c:	cmp	r0, #0
  60:	beq	68 <coda_grib_type_delete+0x68>
  64:	bl	0 <free>
  68:	ldr	r0, [r4, #4]
  6c:	cmp	r0, #0
  70:	bne	28 <coda_grib_type_delete+0x28>
  74:	mov	r0, r4
  78:	pop	{r4, lr}
  7c:	b	0 <free>
  80:	ldr	r3, [pc, #32]	; a8 <coda_grib_type_delete+0xa8>
  84:	mov	r2, #61	; 0x3d
  88:	ldr	r1, [pc, #28]	; ac <coda_grib_type_delete+0xac>
  8c:	ldr	r0, [pc, #28]	; b0 <coda_grib_type_delete+0xb0>
  90:	bl	0 <__assert_fail>
  94:	ldr	r3, [pc, #12]	; a8 <coda_grib_type_delete+0xa8>
  98:	mov	r2, #62	; 0x3e
  9c:	ldr	r1, [pc, #8]	; ac <coda_grib_type_delete+0xac>
  a0:	ldr	r0, [pc, #12]	; b4 <coda_grib_type_delete+0xb4>
  a4:	bl	0 <__assert_fail>
	...
  b0:	.word	0x00000050
  b4:	.word	0x00000060

000000b8 <coda_grib_value_array_new>:
  b8:	push	{r4, r5, r6, r7, r8, r9, lr}
  bc:	subs	r6, r0, #0
  c0:	sub	sp, sp, #12
  c4:	beq	1d4 <coda_grib_value_array_new+0x11c>
  c8:	ldr	r7, [r6, #40]	; 0x28
  cc:	ldr	r0, [r7, #8]
  d0:	cmp	r0, #3
  d4:	bne	190 <coda_grib_value_array_new+0xd8>
  d8:	mov	r0, #64	; 0x40
  dc:	mov	r9, r1
  e0:	mov	r8, r2
  e4:	mov	r5, r3
  e8:	bl	0 <malloc>
  ec:	subs	r4, r0, #0
  f0:	beq	1b4 <coda_grib_value_array_new+0xfc>
  f4:	lsl	r3, r5, #3
  f8:	orr	r3, r3, r8, lsr #29
  fc:	str	r3, [r4, #20]
 100:	ldr	r3, [r6, #4]
 104:	mov	r0, #0
 108:	mov	r1, #0
 10c:	lsl	r8, r8, #3
 110:	add	r3, r3, #1
 114:	mov	ip, #0
 118:	str	r8, [r4, #16]
 11c:	str	r3, [r6, #4]
 120:	mov	r2, #32
 124:	mov	r3, #0
 128:	mov	r8, #105	; 0x69
 12c:	strd	r0, [r4, #40]	; 0x28
 130:	strd	r0, [r4, #48]	; 0x30
 134:	stmib	r4, {r6, r9}
 138:	str	ip, [r4, #36]	; 0x24
 13c:	str	r8, [r4]
 140:	str	r3, [r4, #24]
 144:	strh	r3, [r4, #32]
 148:	strh	r3, [r4, #34]	; 0x22
 14c:	str	r3, [r4, #56]	; 0x38
 150:	str	r3, [r4, #60]	; 0x3c
 154:	str	r2, [r4, #28]
 158:	mov	r0, #8
 15c:	bl	0 <malloc>
 160:	cmp	r0, #0
 164:	mov	r5, r0
 168:	str	r0, [r4, #12]
 16c:	beq	1f0 <coda_grib_value_array_new+0x138>
 170:	ldr	r3, [r7, #4]
 174:	str	r8, [r0]
 178:	add	r3, r3, #1
 17c:	str	r7, [r0, #4]
 180:	str	r3, [r7, #4]
 184:	mov	r0, r4
 188:	add	sp, sp, #12
 18c:	pop	{r4, r5, r6, r7, r8, r9, pc}
 190:	bl	0 <coda_type_get_class_name>
 194:	ldr	r1, [pc, #128]	; 21c <coda_grib_value_array_new+0x164>
 198:	mov	r4, #0
 19c:	mov	r2, r0
 1a0:	ldr	r0, [pc, #120]	; 220 <coda_grib_value_array_new+0x168>
 1a4:	bl	0 <coda_set_error>
 1a8:	mov	r0, r4
 1ac:	add	sp, sp, #12
 1b0:	pop	{r4, r5, r6, r7, r8, r9, pc}
 1b4:	mov	r3, #106	; 0x6a
 1b8:	str	r3, [sp]
 1bc:	mov	r2, #64	; 0x40
 1c0:	ldr	r3, [pc, #92]	; 224 <coda_grib_value_array_new+0x16c>
 1c4:	ldr	r1, [pc, #92]	; 228 <coda_grib_value_array_new+0x170>
 1c8:	mvn	r0, #0
 1cc:	bl	0 <coda_set_error>
 1d0:	b	184 <coda_grib_value_array_new+0xcc>
 1d4:	mov	r3, #92	; 0x5c
 1d8:	ldr	r2, [pc, #68]	; 224 <coda_grib_value_array_new+0x16c>
 1dc:	ldr	r1, [pc, #72]	; 22c <coda_grib_value_array_new+0x174>
 1e0:	mvn	r0, #99	; 0x63
 1e4:	mov	r4, r6
 1e8:	bl	0 <coda_set_error>
 1ec:	b	184 <coda_grib_value_array_new+0xcc>
 1f0:	mov	r0, r4
 1f4:	bl	0 <coda_grib_type_delete>
 1f8:	mov	r3, #130	; 0x82
 1fc:	str	r3, [sp]
 200:	mov	r2, #8
 204:	ldr	r3, [pc, #24]	; 224 <coda_grib_value_array_new+0x16c>
 208:	ldr	r1, [pc, #24]	; 228 <coda_grib_value_array_new+0x170>
 20c:	mvn	r0, #0
 210:	mov	r4, r5
 214:	bl	0 <coda_set_error>
 218:	b	184 <coda_grib_value_array_new+0xcc>
 21c:	.word	0x000000a8
 220:	.word	0xfffffe70
 224:	.word	0x00000000
 228:	.word	0x000000e8
 22c:	.word	0x00000084

00000230 <coda_grib_value_array_simple_packing_new>:
 230:	push	{r4, r5, r6, r7, r8, lr}
 234:	vpush	{d8}
 238:	mov	r5, r1
 23c:	vmov.f32	s16, s0
 240:	sub	sp, sp, #8
 244:	ldrsh	r6, [sp, #44]	; 0x2c
 248:	ldrsh	r8, [sp, #48]	; 0x30
 24c:	ldr	r7, [sp, #52]	; 0x34
 250:	bl	b8 <coda_grib_value_array_new>
 254:	subs	r4, r0, #0
 258:	beq	3dc <coda_grib_value_array_simple_packing_new+0x1ac>
 25c:	ldr	r2, [sp, #40]	; 0x28
 260:	mov	r3, #1
 264:	cmp	r8, #0
 268:	str	r2, [r4, #28]
 26c:	strh	r6, [r4, #32]
 270:	strh	r8, [r4, #34]	; 0x22
 274:	vstr	s16, [r4, #36]	; 0x24
 278:	str	r3, [r4, #24]
 27c:	blt	3ec <coda_grib_value_array_simple_packing_new+0x1bc>
 280:	sub	r3, r8, #1
 284:	vldr	d7, [pc, #548]	; 4b0 <coda_grib_value_array_simple_packing_new+0x280>
 288:	beq	29c <coda_grib_value_array_simple_packing_new+0x6c>
 28c:	sub	r3, r3, #1
 290:	cmn	r3, #1
 294:	vadd.f64	d7, d7, d7
 298:	bne	28c <coda_grib_value_array_simple_packing_new+0x5c>
 29c:	cmp	r6, #0
 2a0:	ble	414 <coda_grib_value_array_simple_packing_new+0x1e4>
 2a4:	vldr	d5, [pc, #516]	; 4b0 <coda_grib_value_array_simple_packing_new+0x280>
 2a8:	vldr	d6, [pc, #520]	; 4b8 <coda_grib_value_array_simple_packing_new+0x288>
 2ac:	sub	r3, r6, #1
 2b0:	mov	r2, r3
 2b4:	sub	r2, r2, #1
 2b8:	cmn	r2, #1
 2bc:	vmul.f64	d5, d5, d6
 2c0:	bne	2b4 <coda_grib_value_array_simple_packing_new+0x84>
 2c4:	vldr	d6, [pc, #484]	; 4b0 <coda_grib_value_array_simple_packing_new+0x280>
 2c8:	vcvt.f64.f32	d8, s16
 2cc:	vldr	d4, [pc, #484]	; 4b8 <coda_grib_value_array_simple_packing_new+0x288>
 2d0:	vdiv.f64	d3, d6, d5
 2d4:	vmul.f64	d7, d3, d7
 2d8:	vstr	d7, [r4, #40]	; 0x28
 2dc:	sub	r3, r3, #1
 2e0:	cmn	r3, #1
 2e4:	vmul.f64	d6, d6, d4
 2e8:	bne	2dc <coda_grib_value_array_simple_packing_new+0xac>
 2ec:	vldr	d7, [pc, #444]	; 4b0 <coda_grib_value_array_simple_packing_new+0x280>
 2f0:	vdiv.f64	d5, d7, d6
 2f4:	vmul.f64	d5, d5, d8
 2f8:	mov	r8, #0
 2fc:	cmp	r7, #0
 300:	str	r8, [r4, #56]	; 0x38
 304:	str	r8, [r4, #60]	; 0x3c
 308:	vstr	d5, [r4, #48]	; 0x30
 30c:	beq	3dc <coda_grib_value_array_simple_packing_new+0x1ac>
 310:	ands	r3, r5, #7
 314:	movne	r3, #1
 318:	add	r5, r3, r5, asr #3
 31c:	mov	r0, r5
 320:	bl	0 <malloc>
 324:	cmp	r0, r8
 328:	mov	r6, r0
 32c:	str	r0, [r4, #56]	; 0x38
 330:	beq	470 <coda_grib_value_array_simple_packing_new+0x240>
 334:	mov	r1, r7
 338:	mov	r2, r5
 33c:	bl	0 <memcpy>
 340:	mov	r0, r5
 344:	bl	0 <malloc>
 348:	cmp	r0, #0
 34c:	mov	r6, r0
 350:	str	r0, [r4, #60]	; 0x3c
 354:	beq	49c <coda_grib_value_array_simple_packing_new+0x26c>
 358:	cmp	r5, #0
 35c:	ble	3dc <coda_grib_value_array_simple_packing_new+0x1ac>
 360:	mov	r1, r8
 364:	b	36c <coda_grib_value_array_simple_packing_new+0x13c>
 368:	ldr	r0, [r4, #60]	; 0x3c
 36c:	ldr	r3, [r4, #56]	; 0x38
 370:	tst	r1, #15
 374:	ldrb	r2, [r3, r1]
 378:	and	r3, r2, #1
 37c:	lsl	ip, r2, #25
 380:	lsl	lr, r2, #26
 384:	add	r3, r3, r2, lsr #7
 388:	add	r3, r3, ip, lsr #31
 38c:	lsl	ip, r2, #27
 390:	add	r3, r3, lr, lsr #31
 394:	lsl	lr, r2, #28
 398:	add	r3, r3, ip, lsr #31
 39c:	lsl	ip, r2, #29
 3a0:	add	r3, r3, lr, lsr #31
 3a4:	lsl	r2, r2, #30
 3a8:	add	r3, r3, ip, lsr #31
 3ac:	add	r3, r3, r2, lsr #31
 3b0:	strb	r3, [r0, r1]
 3b4:	beq	3d0 <coda_grib_value_array_simple_packing_new+0x1a0>
 3b8:	ldr	r3, [r4, #60]	; 0x3c
 3bc:	add	r2, r3, r1
 3c0:	ldrb	r0, [r3, r1]
 3c4:	ldrb	r2, [r2, #-1]
 3c8:	add	r2, r2, r0
 3cc:	strb	r2, [r3, r1]
 3d0:	add	r1, r1, #1
 3d4:	cmp	r5, r1
 3d8:	bne	368 <coda_grib_value_array_simple_packing_new+0x138>
 3dc:	mov	r0, r4
 3e0:	add	sp, sp, #8
 3e4:	vpop	{d8}
 3e8:	pop	{r4, r5, r6, r7, r8, pc}
 3ec:	vldr	d6, [pc, #188]	; 4b0 <coda_grib_value_array_simple_packing_new+0x280>
 3f0:	mvn	r3, r8
 3f4:	sub	r3, r3, #1
 3f8:	cmn	r3, #1
 3fc:	vadd.f64	d6, d6, d6
 400:	bne	3f4 <coda_grib_value_array_simple_packing_new+0x1c4>
 404:	vldr	d5, [pc, #164]	; 4b0 <coda_grib_value_array_simple_packing_new+0x280>
 408:	cmp	r6, #0
 40c:	vdiv.f64	d7, d5, d6
 410:	bgt	2a4 <coda_grib_value_array_simple_packing_new+0x74>
 414:	mvn	r3, r6
 418:	beq	460 <coda_grib_value_array_simple_packing_new+0x230>
 41c:	vldr	d6, [pc, #140]	; 4b0 <coda_grib_value_array_simple_packing_new+0x280>
 420:	vldr	d4, [pc, #144]	; 4b8 <coda_grib_value_array_simple_packing_new+0x288>
 424:	mov	r2, r3
 428:	sub	r2, r2, #1
 42c:	cmn	r2, #1
 430:	vmul.f64	d6, d6, d4
 434:	bne	428 <coda_grib_value_array_simple_packing_new+0x1f8>
 438:	vmul.f64	d7, d6, d7
 43c:	vldr	d5, [pc, #108]	; 4b0 <coda_grib_value_array_simple_packing_new+0x280>
 440:	vcvt.f64.f32	d8, s16
 444:	vldr	d6, [pc, #108]	; 4b8 <coda_grib_value_array_simple_packing_new+0x288>
 448:	vstr	d7, [r4, #40]	; 0x28
 44c:	sub	r3, r3, #1
 450:	cmn	r3, #1
 454:	vmul.f64	d5, d5, d6
 458:	bne	44c <coda_grib_value_array_simple_packing_new+0x21c>
 45c:	b	2f4 <coda_grib_value_array_simple_packing_new+0xc4>
 460:	vstr	d7, [r4, #40]	; 0x28
 464:	vcvt.f64.f32	d8, s16
 468:	vldr	d5, [pc, #64]	; 4b0 <coda_grib_value_array_simple_packing_new+0x280>
 46c:	b	2f4 <coda_grib_value_array_simple_packing_new+0xc4>
 470:	mov	r0, r4
 474:	bl	0 <coda_grib_type_delete>
 478:	mov	r3, #173	; 0xad
 47c:	str	r3, [sp]
 480:	mov	r2, r5
 484:	ldr	r3, [pc, #52]	; 4c0 <coda_grib_value_array_simple_packing_new+0x290>
 488:	ldr	r1, [pc, #52]	; 4c4 <coda_grib_value_array_simple_packing_new+0x294>
 48c:	mvn	r0, #0
 490:	mov	r4, r6
 494:	bl	0 <coda_set_error>
 498:	b	3dc <coda_grib_value_array_simple_packing_new+0x1ac>
 49c:	mov	r0, r4
 4a0:	bl	0 <coda_grib_type_delete>
 4a4:	mov	r3, #183	; 0xb7
 4a8:	b	47c <coda_grib_value_array_simple_packing_new+0x24c>
 4ac:	nop			; (mov r0, r0)
 4b0:	.word	0x00000000
 4b4:	.word	0x3ff00000
 4b8:	.word	0x00000000
 4bc:	.word	0x40240000
 4c0:	.word	0x00000000
 4c4:	.word	0x000000e8
