
../compcert-repos/prog2/0.3:     file format elf32-littlearm


Disassembly of section .init:

000105f0 <.init>:
   105f0:	push	{r3, lr}
   105f4:	bl	10694 <_start@@Base+0x3c>
   105f8:	pop	{r3, pc}

Disassembly of section .plt:

000105fc <printf@plt-0x14>:
   105fc:	push	{lr}		; (str lr, [sp, #-4]!)
   10600:	ldr	lr, [pc, #4]	; 1060c <printf@plt-0x4>
   10604:	add	lr, pc, lr
   10608:	ldr	pc, [lr, #8]!
   1060c:	strdeq	r0, [r1], -r4

00010610 <printf@plt>:
   10610:	add	ip, pc, #0, 12
   10614:	add	ip, ip, #16, 20	; 0x10000
   10618:	ldr	pc, [ip, #2548]!	; 0x9f4

0001061c <__libc_start_main@plt>:
   1061c:	add	ip, pc, #0, 12
   10620:	add	ip, ip, #16, 20	; 0x10000
   10624:	ldr	pc, [ip, #2540]!	; 0x9ec

00010628 <__gmon_start__@plt>:
   10628:	add	ip, pc, #0, 12
   1062c:	add	ip, ip, #16, 20	; 0x10000
   10630:	ldr	pc, [ip, #2532]!	; 0x9e4

00010634 <putchar@plt>:
   10634:	add	ip, pc, #0, 12
   10638:	add	ip, ip, #16, 20	; 0x10000
   1063c:	ldr	pc, [ip, #2524]!	; 0x9dc

00010640 <__isoc99_scanf@plt>:
   10640:	add	ip, pc, #0, 12
   10644:	add	ip, ip, #16, 20	; 0x10000
   10648:	ldr	pc, [ip, #2516]!	; 0x9d4

0001064c <abort@plt>:
   1064c:	add	ip, pc, #0, 12
   10650:	add	ip, ip, #16, 20	; 0x10000
   10654:	ldr	pc, [ip, #2508]!	; 0x9cc

Disassembly of section .text:

00010658 <_start@@Base>:
   10658:	mov	fp, #0
   1065c:	mov	lr, #0
   10660:	pop	{r1}		; (ldr r1, [sp], #4)
   10664:	mov	r2, sp
   10668:	push	{r2}		; (str r2, [sp, #-4]!)
   1066c:	push	{r0}		; (str r0, [sp, #-4]!)
   10670:	ldr	ip, [pc, #16]	; 10688 <_start@@Base+0x30>
   10674:	push	{ip}		; (str ip, [sp, #-4]!)
   10678:	ldr	r0, [pc, #12]	; 1068c <_start@@Base+0x34>
   1067c:	ldr	r3, [pc, #12]	; 10690 <_start@@Base+0x38>
   10680:	bl	1061c <__libc_start_main@plt>
   10684:	bl	1064c <abort@plt>
   10688:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   1068c:	andeq	r0, r1, r8, lsr #18
   10690:	andeq	r0, r1, r0, ror sl
   10694:	ldr	r3, [pc, #20]	; 106b0 <_start@@Base+0x58>
   10698:	ldr	r2, [pc, #20]	; 106b4 <_start@@Base+0x5c>
   1069c:	add	r3, pc, r3
   106a0:	ldr	r2, [r3, r2]
   106a4:	cmp	r2, #0
   106a8:	bxeq	lr
   106ac:	b	10628 <__gmon_start__@plt>
   106b0:	andeq	r0, r1, ip, asr r9
   106b4:	andeq	r0, r0, r4, lsr #32
   106b8:	ldr	r3, [pc, #28]	; 106dc <_start@@Base+0x84>
   106bc:	ldr	r0, [pc, #28]	; 106e0 <_start@@Base+0x88>
   106c0:	sub	r3, r3, r0
   106c4:	cmp	r3, #6
   106c8:	bxls	lr
   106cc:	ldr	r3, [pc, #16]	; 106e4 <_start@@Base+0x8c>
   106d0:	cmp	r3, #0
   106d4:	bxeq	lr
   106d8:	bx	r3
   106dc:	andeq	r1, r2, r3, lsr r0
   106e0:	andeq	r1, r2, r0, lsr r0
   106e4:	andeq	r0, r0, r0
   106e8:	ldr	r1, [pc, #36]	; 10714 <_start@@Base+0xbc>
   106ec:	ldr	r0, [pc, #36]	; 10718 <_start@@Base+0xc0>
   106f0:	sub	r1, r1, r0
   106f4:	asr	r1, r1, #2
   106f8:	add	r1, r1, r1, lsr #31
   106fc:	asrs	r1, r1, #1
   10700:	bxeq	lr
   10704:	ldr	r3, [pc, #16]	; 1071c <_start@@Base+0xc4>
   10708:	cmp	r3, #0
   1070c:	bxeq	lr
   10710:	bx	r3
   10714:	andeq	r1, r2, r0, lsr r0
   10718:	andeq	r1, r2, r0, lsr r0
   1071c:	andeq	r0, r0, r0
   10720:	push	{r4, lr}
   10724:	ldr	r4, [pc, #24]	; 10744 <_start@@Base+0xec>
   10728:	ldrb	r3, [r4]
   1072c:	cmp	r3, #0
   10730:	popne	{r4, pc}
   10734:	bl	106b8 <_start@@Base+0x60>
   10738:	mov	r3, #1
   1073c:	strb	r3, [r4]
   10740:	pop	{r4, pc}
   10744:	andeq	r1, r2, r0, lsr r0
   10748:	ldr	r0, [pc, #40]	; 10778 <_start@@Base+0x120>
   1074c:	ldr	r3, [r0]
   10750:	cmp	r3, #0
   10754:	bne	1075c <_start@@Base+0x104>
   10758:	b	106e8 <_start@@Base+0x90>
   1075c:	ldr	r3, [pc, #24]	; 1077c <_start@@Base+0x124>
   10760:	cmp	r3, #0
   10764:	beq	10758 <_start@@Base+0x100>
   10768:	push	{r4, lr}
   1076c:	blx	r3
   10770:	pop	{r4, lr}
   10774:	b	106e8 <_start@@Base+0x90>
   10778:	andeq	r0, r2, r4, lsl pc
   1077c:	andeq	r0, r0, r0

00010780 <avg@@Base>:
   10780:	push	{fp}		; (str fp, [sp, #-4]!)
   10784:	add	fp, sp, #0
   10788:	sub	sp, sp, #20
   1078c:	str	r0, [fp, #-16]
   10790:	mov	r3, #0
   10794:	str	r3, [fp, #-12]
   10798:	mov	r3, #0
   1079c:	str	r3, [fp, #-8]
   107a0:	b	107d0 <avg@@Base+0x50>
   107a4:	ldr	r3, [fp, #-8]
   107a8:	lsl	r3, r3, #2
   107ac:	ldr	r2, [fp, #-16]
   107b0:	add	r3, r2, r3
   107b4:	vldr	s15, [r3]
   107b8:	vldr	s14, [fp, #-12]
   107bc:	vadd.f32	s15, s14, s15
   107c0:	vstr	s15, [fp, #-12]
   107c4:	ldr	r3, [fp, #-8]
   107c8:	add	r3, r3, #1
   107cc:	str	r3, [fp, #-8]
   107d0:	ldr	r3, [fp, #-8]
   107d4:	cmp	r3, #9
   107d8:	ble	107a4 <avg@@Base+0x24>
   107dc:	vldr	s15, [fp, #-12]
   107e0:	vldr	s14, [pc, #20]	; 107fc <avg@@Base+0x7c>
   107e4:	vdiv.f32	s13, s15, s14
   107e8:	vmov.f32	s15, s13
   107ec:	vmov.f32	s0, s15
   107f0:	add	sp, fp, #0
   107f4:	pop	{fp}		; (ldr fp, [sp], #4)
   107f8:	bx	lr
   107fc:			; <UNDEFINED> instruction: 0x41200000

00010800 <max@@Base>:
   10800:	push	{fp}		; (str fp, [sp, #-4]!)
   10804:	add	fp, sp, #0
   10808:	sub	sp, sp, #20
   1080c:	str	r0, [fp, #-16]
   10810:	ldr	r3, [fp, #-16]
   10814:	ldr	r3, [r3]
   10818:	str	r3, [fp, #-12]
   1081c:	mov	r3, #1
   10820:	str	r3, [fp, #-8]
   10824:	b	10870 <max@@Base+0x70>
   10828:	ldr	r3, [fp, #-8]
   1082c:	lsl	r3, r3, #2
   10830:	ldr	r2, [fp, #-16]
   10834:	add	r3, r2, r3
   10838:	vldr	s14, [r3]
   1083c:	vldr	s15, [fp, #-12]
   10840:	vcmpe.f32	s14, s15
   10844:	vmrs	APSR_nzcv, fpscr
   10848:	ble	10864 <max@@Base+0x64>
   1084c:	ldr	r3, [fp, #-8]
   10850:	lsl	r3, r3, #2
   10854:	ldr	r2, [fp, #-16]
   10858:	add	r3, r2, r3
   1085c:	ldr	r3, [r3]
   10860:	str	r3, [fp, #-12]
   10864:	ldr	r3, [fp, #-8]
   10868:	add	r3, r3, #1
   1086c:	str	r3, [fp, #-8]
   10870:	ldr	r3, [fp, #-8]
   10874:	cmp	r3, #9
   10878:	ble	10828 <max@@Base+0x28>
   1087c:	ldr	r3, [fp, #-12]
   10880:	vmov	s15, r3
   10884:	vmov.f32	s0, s15
   10888:	add	sp, fp, #0
   1088c:	pop	{fp}		; (ldr fp, [sp], #4)
   10890:	bx	lr

00010894 <min@@Base>:
   10894:	push	{fp}		; (str fp, [sp, #-4]!)
   10898:	add	fp, sp, #0
   1089c:	sub	sp, sp, #20
   108a0:	str	r0, [fp, #-16]
   108a4:	ldr	r3, [fp, #-16]
   108a8:	ldr	r3, [r3]
   108ac:	str	r3, [fp, #-12]
   108b0:	mov	r3, #1
   108b4:	str	r3, [fp, #-8]
   108b8:	b	10904 <min@@Base+0x70>
   108bc:	ldr	r3, [fp, #-8]
   108c0:	lsl	r3, r3, #2
   108c4:	ldr	r2, [fp, #-16]
   108c8:	add	r3, r2, r3
   108cc:	vldr	s14, [r3]
   108d0:	vldr	s15, [fp, #-12]
   108d4:	vcmpe.f32	s14, s15
   108d8:	vmrs	APSR_nzcv, fpscr
   108dc:	bpl	108f8 <min@@Base+0x64>
   108e0:	ldr	r3, [fp, #-8]
   108e4:	lsl	r3, r3, #2
   108e8:	ldr	r2, [fp, #-16]
   108ec:	add	r3, r2, r3
   108f0:	ldr	r3, [r3]
   108f4:	str	r3, [fp, #-12]
   108f8:	ldr	r3, [fp, #-8]
   108fc:	add	r3, r3, #1
   10900:	str	r3, [fp, #-8]
   10904:	ldr	r3, [fp, #-8]
   10908:	cmp	r3, #9
   1090c:	ble	108bc <min@@Base+0x28>
   10910:	ldr	r3, [fp, #-12]
   10914:	vmov	s15, r3
   10918:	vmov.f32	s0, s15
   1091c:	add	sp, fp, #0
   10920:	pop	{fp}		; (ldr fp, [sp], #4)
   10924:	bx	lr

00010928 <main@@Base>:
   10928:	push	{fp, lr}
   1092c:	add	fp, sp, #4
   10930:	sub	sp, sp, #48	; 0x30
   10934:	mov	r3, #0
   10938:	str	r3, [fp, #-8]
   1093c:	b	1097c <main@@Base+0x54>
   10940:	ldr	r3, [fp, #-8]
   10944:	add	r3, r3, #1
   10948:	mov	r1, r3
   1094c:	ldr	r0, [pc, #256]	; 10a54 <main@@Base+0x12c>
   10950:	bl	10610 <printf@plt>
   10954:	sub	r2, fp, #48	; 0x30
   10958:	ldr	r3, [fp, #-8]
   1095c:	lsl	r3, r3, #2
   10960:	add	r3, r2, r3
   10964:	mov	r1, r3
   10968:	ldr	r0, [pc, #232]	; 10a58 <main@@Base+0x130>
   1096c:	bl	10640 <__isoc99_scanf@plt>
   10970:	ldr	r3, [fp, #-8]
   10974:	add	r3, r3, #1
   10978:	str	r3, [fp, #-8]
   1097c:	ldr	r3, [fp, #-8]
   10980:	cmp	r3, #9
   10984:	ble	10940 <main@@Base+0x18>
   10988:	sub	r3, fp, #48	; 0x30
   1098c:	mov	r0, r3
   10990:	bl	10780 <avg@@Base>
   10994:	vmov.f32	s15, s0
   10998:	vcvt.f64.f32	d7, s15
   1099c:	vmov	r2, r3, d7
   109a0:	ldr	r0, [pc, #180]	; 10a5c <main@@Base+0x134>
   109a4:	bl	10610 <printf@plt>
   109a8:	sub	r3, fp, #48	; 0x30
   109ac:	mov	r0, r3
   109b0:	bl	10800 <max@@Base>
   109b4:	vmov.f32	s15, s0
   109b8:	vcvt.f64.f32	d7, s15
   109bc:	vmov	r2, r3, d7
   109c0:	ldr	r0, [pc, #152]	; 10a60 <main@@Base+0x138>
   109c4:	bl	10610 <printf@plt>
   109c8:	sub	r3, fp, #48	; 0x30
   109cc:	mov	r0, r3
   109d0:	bl	10894 <min@@Base>
   109d4:	vmov.f32	s15, s0
   109d8:	vcvt.f64.f32	d7, s15
   109dc:	vmov	r2, r3, d7
   109e0:	ldr	r0, [pc, #124]	; 10a64 <main@@Base+0x13c>
   109e4:	bl	10610 <printf@plt>
   109e8:	ldr	r0, [pc, #120]	; 10a68 <main@@Base+0x140>
   109ec:	bl	10610 <printf@plt>
   109f0:	mov	r3, #0
   109f4:	str	r3, [fp, #-8]
   109f8:	b	10a30 <main@@Base+0x108>
   109fc:	ldr	r3, [fp, #-8]
   10a00:	lsl	r3, r3, #2
   10a04:	sub	r2, fp, #4
   10a08:	add	r3, r2, r3
   10a0c:	sub	r3, r3, #44	; 0x2c
   10a10:	vldr	s15, [r3]
   10a14:	vcvt.f64.f32	d7, s15
   10a18:	vmov	r2, r3, d7
   10a1c:	ldr	r0, [pc, #72]	; 10a6c <main@@Base+0x144>
   10a20:	bl	10610 <printf@plt>
   10a24:	ldr	r3, [fp, #-8]
   10a28:	add	r3, r3, #1
   10a2c:	str	r3, [fp, #-8]
   10a30:	ldr	r3, [fp, #-8]
   10a34:	cmp	r3, #9
   10a38:	ble	109fc <main@@Base+0xd4>
   10a3c:	mov	r0, #10
   10a40:	bl	10634 <putchar@plt>
   10a44:	mov	r3, #0
   10a48:	mov	r0, r3
   10a4c:	sub	sp, fp, #4
   10a50:	pop	{fp, pc}
   10a54:	andeq	r0, r1, r0, ror #21
   10a58:	strdeq	r0, [r1], -r8
   10a5c:	strdeq	r0, [r1], -ip
   10a60:	andeq	r0, r1, ip, lsl #22
   10a64:	andeq	r0, r1, ip, lsl fp
   10a68:	andeq	r0, r1, ip, lsr #22
   10a6c:	andeq	r0, r1, r4, lsr fp

00010a70 <__libc_csu_init@@Base>:
   10a70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a74:	mov	r7, r0
   10a78:	ldr	r6, [pc, #72]	; 10ac8 <__libc_csu_init@@Base+0x58>
   10a7c:	ldr	r5, [pc, #72]	; 10acc <__libc_csu_init@@Base+0x5c>
   10a80:	add	r6, pc, r6
   10a84:	add	r5, pc, r5
   10a88:	sub	r6, r6, r5
   10a8c:	mov	r8, r1
   10a90:	mov	r9, r2
   10a94:	bl	105f0 <printf@plt-0x20>
   10a98:	asrs	r6, r6, #2
   10a9c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10aa0:	mov	r4, #0
   10aa4:	add	r4, r4, #1
   10aa8:	ldr	r3, [r5], #4
   10aac:	mov	r2, r9
   10ab0:	mov	r1, r8
   10ab4:	mov	r0, r7
   10ab8:	blx	r3
   10abc:	cmp	r6, r4
   10ac0:	bne	10aa4 <__libc_csu_init@@Base+0x34>
   10ac4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ac8:	andeq	r0, r1, r8, lsl #9
   10acc:	andeq	r0, r1, r0, lsl #9

00010ad0 <__libc_csu_fini@@Base>:
   10ad0:	bx	lr

Disassembly of section .fini:

00010ad4 <.fini>:
   10ad4:	push	{r3, lr}
   10ad8:	pop	{r3, pc}
