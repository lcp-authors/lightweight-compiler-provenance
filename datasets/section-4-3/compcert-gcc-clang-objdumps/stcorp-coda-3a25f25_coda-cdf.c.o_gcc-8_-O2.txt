
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-cdf.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
       0:	strd	r4, [sp, #-36]!	; 0xffffffdc
       4:	mov	r4, r2
       8:	ldr	r5, [r0, #48]	; 0x30
       c:	strd	r6, [sp, #8]
      10:	mov	r6, r0
      14:	mov	r7, r3
      18:	strd	r8, [sp, #16]
      1c:	strd	sl, [sp, #24]
      20:	str	lr, [sp, #32]
      24:	sub	sp, sp, #84	; 0x54
      28:	cmp	r5, #0
      2c:	ldr	r2, [sp, #120]	; 0x78
      30:	ldr	r1, [sp, #124]	; 0x7c
      34:	beq	d8 <read_bytes+0xd8>
      38:	adds	r8, r4, r2
      3c:	ldrd	sl, [r0, #40]	; 0x28
      40:	adc	r9, r3, r1
      44:	cmp	r9, fp
      48:	cmpeq	r8, sl
      4c:	bls	c4 <read_bytes+0xc4>
      50:	ldr	r3, [r0, #16]
      54:	cmp	r3, #1
      58:	bls	140 <read_bytes+0x140>
      5c:	mov	r0, r2
      60:	add	r2, sp, #8
      64:	bl	0 <coda_str64>
      68:	add	r5, sp, #56	; 0x38
      6c:	mov	r0, r4
      70:	mov	r1, r7
      74:	add	r2, sp, #32
      78:	bl	0 <coda_str64>
      7c:	mov	r2, r5
      80:	ldrd	r0, [r6, #40]	; 0x28
      84:	bl	0 <coda_str64>
      88:	mvn	r0, #300	; 0x12c
      8c:	add	r3, sp, #32
      90:	str	r5, [sp]
      94:	add	r2, sp, #8
      98:	movw	r1, #0
      9c:	movt	r1, #0
      a0:	bl	0 <coda_set_error>
      a4:	mvn	r0, #0
      a8:	add	sp, sp, #84	; 0x54
      ac:	ldrd	r4, [sp]
      b0:	ldrd	r6, [sp, #8]
      b4:	ldrd	r8, [sp, #16]
      b8:	ldrd	sl, [sp, #24]
      bc:	add	sp, sp, #32
      c0:	pop	{pc}		; (ldr pc, [sp], #4)
      c4:	add	r1, r5, r4
      c8:	ldr	r0, [sp, #128]	; 0x80
      cc:	bl	0 <memcpy>
      d0:	mov	r0, #0
      d4:	b	a8 <read_bytes+0xa8>
      d8:	ldr	r3, [r0, #16]
      dc:	cmp	r3, #1
      e0:	bhi	158 <read_bytes+0x158>
      e4:	ldrd	r8, [r0, #8]
      e8:	adds	sl, r4, r2
      ec:	adc	fp, r7, r1
      f0:	cmp	fp, r9
      f4:	cmpeq	sl, r8
      f8:	bhi	140 <read_bytes+0x140>
      fc:	mov	r3, r4
     100:	ldr	r0, [r0, #56]	; 0x38
     104:	ldr	r1, [sp, #128]	; 0x80
     108:	bl	0 <pread>
     10c:	cmp	r0, #0
     110:	movge	r0, r5
     114:	bge	a8 <read_bytes+0xa8>
     118:	bl	0 <__errno_location>
     11c:	ldr	r0, [r0]
     120:	bl	0 <strerror>
     124:	mov	r2, r0
     128:	movw	r1, #0
     12c:	movt	r1, #0
     130:	mvn	r0, #21
     134:	bl	0 <coda_set_error>
     138:	mvn	r0, #0
     13c:	b	a8 <read_bytes+0xa8>
     140:	mvn	r0, #300	; 0x12c
     144:	movw	r1, #0
     148:	movt	r1, #0
     14c:	bl	0 <coda_set_error>
     150:	mvn	r0, #0
     154:	b	a8 <read_bytes+0xa8>
     158:	movw	r3, #0
     15c:	movt	r3, #0
     160:	movw	r1, #0
     164:	movt	r1, #0
     168:	movw	r0, #0
     16c:	movt	r0, #0
     170:	mov	r2, #83	; 0x53
     174:	bl	0 <__assert_fail>

00000178 <read_attribute_sub>:
     178:	strd	r4, [sp, #-36]!	; 0xffffffdc
     17c:	mov	r5, r0
     180:	strd	r6, [sp, #8]
     184:	strd	r8, [sp, #16]
     188:	strd	sl, [sp, #24]
     18c:	str	lr, [sp, #32]
     190:	sub	sp, sp, #28
     194:	ldr	fp, [sp, #64]	; 0x40
     198:	ldr	r4, [sp, #68]	; 0x44
     19c:	ldr	r1, [r4, #8]
     1a0:	cmp	r1, #4
     1a4:	beq	264 <read_attribute_sub+0xec>
     1a8:	asr	r7, fp, #31
     1ac:	add	r1, sp, #16
     1b0:	mov	r6, fp
     1b4:	ldr	r0, [r0, #52]	; 0x34
     1b8:	strd	r6, [sp]
     1bc:	str	r1, [sp, #8]
     1c0:	bl	0 <read_bytes>
     1c4:	cmp	r0, #0
     1c8:	mvnne	r0, #0
     1cc:	bne	2dc <read_attribute_sub+0x164>
     1d0:	ldr	r3, [r5, #68]	; 0x44
     1d4:	cmp	r3, #0
     1d8:	bne	22c <read_attribute_sub+0xb4>
     1dc:	sub	fp, fp, #1
     1e0:	cmp	fp, #7
     1e4:	ldrls	pc, [pc, fp, lsl #2]
     1e8:	b	4b0 <read_attribute_sub+0x338>
     1ec:	.word	0x0000022c
     1f0:	.word	0x0000033c
     1f4:	.word	0x000004b0
     1f8:	.word	0x0000020c
     1fc:	.word	0x000004b0
     200:	.word	0x000004b0
     204:	.word	0x000004b0
     208:	.word	0x000002f8
     20c:	ldrb	r3, [sp, #19]
     210:	ldrb	r1, [sp, #16]
     214:	ldrb	r2, [sp, #18]
     218:	strb	r3, [sp, #16]
     21c:	ldrb	r3, [sp, #17]
     220:	strb	r2, [sp, #17]
     224:	strb	r1, [sp, #19]
     228:	strb	r3, [sp, #18]
     22c:	ldr	r3, [r4, #12]
     230:	cmp	r3, #9
     234:	ldrls	pc, [pc, r3, lsl #2]
     238:	b	494 <read_attribute_sub+0x31c>
     23c:	.word	0x0000034c
     240:	.word	0x00000370
     244:	.word	0x00000394
     248:	.word	0x000003b8
     24c:	.word	0x000003dc
     250:	.word	0x00000400
     254:	.word	0x00000424
     258:	.word	0x00000494
     25c:	.word	0x0000044c
     260:	.word	0x00000470
     264:	add	r8, fp, #1
     268:	mov	r6, r2
     26c:	mov	r0, r8
     270:	mov	r7, r3
     274:	bl	0 <malloc>
     278:	subs	sl, r0, #0
     27c:	beq	4dc <read_attribute_sub+0x364>
     280:	asr	r9, fp, #31
     284:	mov	r8, fp
     288:	mov	r2, r6
     28c:	mov	r3, r7
     290:	str	sl, [sp, #8]
     294:	ldr	r0, [r5, #52]	; 0x34
     298:	strd	r8, [sp]
     29c:	bl	0 <read_bytes>
     2a0:	subs	r1, r0, #0
     2a4:	bne	4cc <read_attribute_sub+0x354>
     2a8:	mov	r0, r4
     2ac:	mov	r3, sl
     2b0:	strb	r1, [sl, fp]
     2b4:	mov	r2, r5
     2b8:	bl	0 <coda_mem_string_new>
     2bc:	ldr	r3, [sp, #72]	; 0x48
     2c0:	mov	r4, r0
     2c4:	mov	r0, sl
     2c8:	str	r4, [r3]
     2cc:	bl	0 <free>
     2d0:	clz	r0, r4
     2d4:	lsr	r0, r0, #5
     2d8:	rsb	r0, r0, #0
     2dc:	add	sp, sp, #28
     2e0:	ldrd	r4, [sp]
     2e4:	ldrd	r6, [sp, #8]
     2e8:	ldrd	r8, [sp, #16]
     2ec:	ldrd	sl, [sp, #24]
     2f0:	add	sp, sp, #32
     2f4:	pop	{pc}		; (ldr pc, [sp], #4)
     2f8:	ldrb	r2, [sp, #23]
     2fc:	ldrb	r3, [sp, #16]
     300:	ldrb	r1, [sp, #22]
     304:	strb	r2, [sp, #16]
     308:	ldrb	r2, [sp, #17]
     30c:	strb	r3, [sp, #23]
     310:	ldrb	r3, [sp, #21]
     314:	strb	r1, [sp, #17]
     318:	ldrb	r1, [sp, #18]
     31c:	strb	r3, [sp, #18]
     320:	ldrb	r3, [sp, #19]
     324:	strb	r2, [sp, #22]
     328:	ldrb	r2, [sp, #20]
     32c:	strb	r1, [sp, #21]
     330:	strb	r2, [sp, #19]
     334:	strb	r3, [sp, #20]
     338:	b	22c <read_attribute_sub+0xb4>
     33c:	ldrh	r3, [sp, #16]
     340:	rev16	r3, r3
     344:	strh	r3, [sp, #16]
     348:	b	22c <read_attribute_sub+0xb4>
     34c:	mov	r0, r4
     350:	ldrsb	r3, [sp, #16]
     354:	mov	r2, r5
     358:	mov	r1, #0
     35c:	bl	0 <coda_mem_int8_new>
     360:	ldr	r3, [sp, #72]	; 0x48
     364:	mov	r4, r0
     368:	str	r0, [r3]
     36c:	b	2d0 <read_attribute_sub+0x158>
     370:	mov	r0, r4
     374:	ldrb	r3, [sp, #16]
     378:	mov	r2, r5
     37c:	mov	r1, #0
     380:	bl	0 <coda_mem_uint8_new>
     384:	ldr	r3, [sp, #72]	; 0x48
     388:	mov	r4, r0
     38c:	str	r0, [r3]
     390:	b	2d0 <read_attribute_sub+0x158>
     394:	mov	r0, r4
     398:	ldrsh	r3, [sp, #16]
     39c:	mov	r2, r5
     3a0:	mov	r1, #0
     3a4:	bl	0 <coda_mem_int16_new>
     3a8:	ldr	r3, [sp, #72]	; 0x48
     3ac:	mov	r4, r0
     3b0:	str	r0, [r3]
     3b4:	b	2d0 <read_attribute_sub+0x158>
     3b8:	mov	r0, r4
     3bc:	ldrh	r3, [sp, #16]
     3c0:	mov	r2, r5
     3c4:	mov	r1, #0
     3c8:	bl	0 <coda_mem_uint16_new>
     3cc:	ldr	r3, [sp, #72]	; 0x48
     3d0:	mov	r4, r0
     3d4:	str	r0, [r3]
     3d8:	b	2d0 <read_attribute_sub+0x158>
     3dc:	mov	r0, r4
     3e0:	mov	r2, r5
     3e4:	ldr	r3, [sp, #16]
     3e8:	mov	r1, #0
     3ec:	bl	0 <coda_mem_int32_new>
     3f0:	ldr	r3, [sp, #72]	; 0x48
     3f4:	mov	r4, r0
     3f8:	str	r0, [r3]
     3fc:	b	2d0 <read_attribute_sub+0x158>
     400:	mov	r0, r4
     404:	mov	r2, r5
     408:	ldr	r3, [sp, #16]
     40c:	mov	r1, #0
     410:	bl	0 <coda_mem_uint32_new>
     414:	ldr	r3, [sp, #72]	; 0x48
     418:	mov	r4, r0
     41c:	str	r0, [r3]
     420:	b	2d0 <read_attribute_sub+0x158>
     424:	ldrd	r6, [sp, #16]
     428:	mov	r0, r4
     42c:	mov	r2, r5
     430:	mov	r1, #0
     434:	strd	r6, [sp]
     438:	bl	0 <coda_mem_int64_new>
     43c:	ldr	r3, [sp, #72]	; 0x48
     440:	mov	r4, r0
     444:	str	r0, [r3]
     448:	b	2d0 <read_attribute_sub+0x158>
     44c:	mov	r0, r4
     450:	mov	r2, r5
     454:	vldr	s0, [sp, #16]
     458:	mov	r1, #0
     45c:	bl	0 <coda_mem_float_new>
     460:	ldr	r3, [sp, #72]	; 0x48
     464:	mov	r4, r0
     468:	str	r0, [r3]
     46c:	b	2d0 <read_attribute_sub+0x158>
     470:	mov	r0, r4
     474:	mov	r2, r5
     478:	vldr	d0, [sp, #16]
     47c:	mov	r1, #0
     480:	bl	0 <coda_mem_double_new>
     484:	ldr	r3, [sp, #72]	; 0x48
     488:	mov	r4, r0
     48c:	str	r0, [r3]
     490:	b	2d0 <read_attribute_sub+0x158>
     494:	movw	r1, #0
     498:	movt	r1, #0
     49c:	ldr	r3, [pc, #100]	; 508 <read_attribute_sub+0x390>
     4a0:	movw	r0, #0
     4a4:	movt	r0, #0
     4a8:	mov	r2, #175	; 0xaf
     4ac:	bl	0 <__assert_fail>
     4b0:	movw	r1, #0
     4b4:	movt	r1, #0
     4b8:	ldr	r3, [pc, #72]	; 508 <read_attribute_sub+0x390>
     4bc:	movw	r0, #0
     4c0:	movt	r0, #0
     4c4:	mov	r2, #129	; 0x81
     4c8:	bl	0 <__assert_fail>
     4cc:	mov	r0, sl
     4d0:	bl	0 <free>
     4d4:	mvn	r0, #0
     4d8:	b	2dc <read_attribute_sub+0x164>
     4dc:	mov	r0, #76	; 0x4c
     4e0:	mov	r2, r8
     4e4:	movw	r3, #0
     4e8:	movt	r3, #0
     4ec:	movw	r1, #0
     4f0:	movt	r1, #0
     4f4:	str	r0, [sp]
     4f8:	mvn	r0, #0
     4fc:	bl	0 <coda_set_error>
     500:	mvn	r0, #0
     504:	b	2dc <read_attribute_sub+0x164>
     508:	.word	0x0000000c

0000050c <read_AEDR>:
     50c:	orrs	r1, r2, r3
     510:	bne	51c <read_AEDR+0x10>
     514:	mov	r0, #0
     518:	bx	lr
     51c:	strd	r4, [sp, #-36]!	; 0xffffffdc
     520:	mov	r4, r2
     524:	adds	r2, r2, #8
     528:	strd	r6, [sp, #8]
     52c:	mov	r6, #4
     530:	mov	r7, #0
     534:	strd	r8, [sp, #16]
     538:	mov	r5, r3
     53c:	adc	r3, r3, #0
     540:	strd	sl, [sp, #24]
     544:	mov	sl, r0
     548:	str	lr, [sp, #32]
     54c:	sub	sp, sp, #68	; 0x44
     550:	add	r1, sp, #36	; 0x24
     554:	ldr	r0, [r0, #52]	; 0x34
     558:	strd	r6, [sp]
     55c:	str	r1, [sp, #8]
     560:	bl	0 <read_bytes>
     564:	cmp	r0, #0
     568:	blt	984 <read_AEDR+0x478>
     56c:	ldrb	r3, [sp, #39]	; 0x27
     570:	ldrb	r2, [sp, #38]	; 0x26
     574:	ldrb	r1, [sp, #36]	; 0x24
     578:	strb	r3, [sp, #36]	; 0x24
     57c:	ldrb	r3, [sp, #37]	; 0x25
     580:	strb	r2, [sp, #37]	; 0x25
     584:	strb	r3, [sp, #38]	; 0x26
     588:	strb	r1, [sp, #39]	; 0x27
     58c:	ldr	r2, [sp, #36]	; 0x24
     590:	sub	r3, r2, #5
     594:	bics	r3, r3, #4
     598:	bne	b44 <read_AEDR+0x638>
     59c:	add	r1, sp, #56	; 0x38
     5a0:	mov	r8, #8
     5a4:	ldr	r0, [sl, #52]	; 0x34
     5a8:	mov	r9, #0
     5ac:	adds	r2, r4, #12
     5b0:	adc	r3, r5, #0
     5b4:	strd	r8, [sp]
     5b8:	str	r1, [sp, #8]
     5bc:	bl	0 <read_bytes>
     5c0:	cmp	r0, #0
     5c4:	blt	984 <read_AEDR+0x478>
     5c8:	add	r1, sp, #40	; 0x28
     5cc:	adds	r2, r4, #20
     5d0:	strd	r6, [sp]
     5d4:	adc	r3, r5, #0
     5d8:	ldr	r0, [sl, #52]	; 0x34
     5dc:	str	r1, [sp, #8]
     5e0:	bl	0 <read_bytes>
     5e4:	cmp	r0, #0
     5e8:	blt	984 <read_AEDR+0x478>
     5ec:	add	r1, sp, #44	; 0x2c
     5f0:	adds	r2, r4, #24
     5f4:	strd	r6, [sp]
     5f8:	adc	r3, r5, #0
     5fc:	ldr	r0, [sl, #52]	; 0x34
     600:	str	r1, [sp, #8]
     604:	bl	0 <read_bytes>
     608:	cmp	r0, #0
     60c:	blt	984 <read_AEDR+0x478>
     610:	add	r1, sp, #48	; 0x30
     614:	adds	r2, r4, #28
     618:	strd	r6, [sp]
     61c:	adc	r3, r5, #0
     620:	ldr	r0, [sl, #52]	; 0x34
     624:	str	r1, [sp, #8]
     628:	bl	0 <read_bytes>
     62c:	cmp	r0, #0
     630:	blt	984 <read_AEDR+0x478>
     634:	add	r1, sp, #52	; 0x34
     638:	adds	r2, r4, #32
     63c:	strd	r6, [sp]
     640:	adc	r3, r5, #0
     644:	ldr	r0, [sl, #52]	; 0x34
     648:	str	r1, [sp, #8]
     64c:	bl	0 <read_bytes>
     650:	cmp	r0, #0
     654:	blt	984 <read_AEDR+0x478>
     658:	ldrb	r3, [sp, #63]	; 0x3f
     65c:	adds	r2, r4, #56	; 0x38
     660:	str	r2, [sp, #16]
     664:	adc	r2, r5, #0
     668:	ldrb	r1, [sp, #56]	; 0x38
     66c:	str	r2, [sp, #20]
     670:	ldrb	r2, [sp, #62]	; 0x3e
     674:	strb	r3, [sp, #56]	; 0x38
     678:	ldrb	r3, [sp, #57]	; 0x39
     67c:	strb	r2, [sp, #57]	; 0x39
     680:	ldrb	r2, [sp, #58]	; 0x3a
     684:	strb	r3, [sp, #62]	; 0x3e
     688:	ldrb	r3, [sp, #60]	; 0x3c
     68c:	strb	r1, [sp, #63]	; 0x3f
     690:	ldrb	r1, [sp, #61]	; 0x3d
     694:	strb	r1, [sp, #58]	; 0x3a
     698:	ldrb	r1, [sp, #59]	; 0x3b
     69c:	strb	r3, [sp, #59]	; 0x3b
     6a0:	ldrb	r3, [sp, #40]	; 0x28
     6a4:	strb	r2, [sp, #61]	; 0x3d
     6a8:	ldrb	r2, [sp, #43]	; 0x2b
     6ac:	strb	r2, [sp, #40]	; 0x28
     6b0:	ldrb	r2, [sp, #41]	; 0x29
     6b4:	strb	r3, [sp, #43]	; 0x2b
     6b8:	ldrb	r3, [sp, #47]	; 0x2f
     6bc:	strb	r1, [sp, #60]	; 0x3c
     6c0:	ldrb	r1, [sp, #42]	; 0x2a
     6c4:	strb	r1, [sp, #41]	; 0x29
     6c8:	ldrb	r1, [sp, #44]	; 0x2c
     6cc:	strb	r2, [sp, #42]	; 0x2a
     6d0:	ldrb	r2, [sp, #46]	; 0x2e
     6d4:	strb	r3, [sp, #44]	; 0x2c
     6d8:	ldrb	r3, [sp, #45]	; 0x2d
     6dc:	strb	r1, [sp, #47]	; 0x2f
     6e0:	strb	r2, [sp, #45]	; 0x2d
     6e4:	ldrb	r2, [sp, #51]	; 0x33
     6e8:	strb	r3, [sp, #46]	; 0x2e
     6ec:	ldrb	r3, [sp, #48]	; 0x30
     6f0:	ldrb	r1, [sp, #50]	; 0x32
     6f4:	strb	r2, [sp, #48]	; 0x30
     6f8:	ldrb	r2, [sp, #49]	; 0x31
     6fc:	ldr	r4, [sp, #44]	; 0x2c
     700:	strb	r3, [sp, #51]	; 0x33
     704:	ldrb	r3, [sp, #55]	; 0x37
     708:	strb	r1, [sp, #49]	; 0x31
     70c:	ldrb	r1, [sp, #52]	; 0x34
     710:	strb	r2, [sp, #50]	; 0x32
     714:	cmp	r4, #32
     718:	ldrb	r2, [sp, #54]	; 0x36
     71c:	strb	r3, [sp, #52]	; 0x34
     720:	ldrb	r3, [sp, #53]	; 0x35
     724:	strb	r2, [sp, #53]	; 0x35
     728:	strb	r1, [sp, #55]	; 0x37
     72c:	strb	r3, [sp, #54]	; 0x36
     730:	beq	b60 <read_AEDR+0x654>
     734:	sub	r3, r4, #1
     738:	ldr	r9, [sp, #52]	; 0x34
     73c:	cmp	r3, #51	; 0x33
     740:	ldrls	pc, [pc, r3, lsl #2]
     744:	b	af0 <read_AEDR+0x5e4>
     748:	.word	0x00000a90
     74c:	.word	0x00000928
     750:	.word	0x00000af0
     754:	.word	0x00000928
     758:	.word	0x00000af0
     75c:	.word	0x00000af0
     760:	.word	0x00000af0
     764:	.word	0x00000ae0
     768:	.word	0x00000af0
     76c:	.word	0x00000af0
     770:	.word	0x00000aa0
     774:	.word	0x00000ab0
     778:	.word	0x00000af0
     77c:	.word	0x00000ac0
     780:	.word	0x00000af0
     784:	.word	0x00000af0
     788:	.word	0x00000af0
     78c:	.word	0x00000af0
     790:	.word	0x00000af0
     794:	.word	0x00000af0
     798:	.word	0x00000ad0
     79c:	.word	0x00000a80
     7a0:	.word	0x00000af0
     7a4:	.word	0x00000af0
     7a8:	.word	0x00000af0
     7ac:	.word	0x00000af0
     7b0:	.word	0x00000af0
     7b4:	.word	0x00000af0
     7b8:	.word	0x00000af0
     7bc:	.word	0x00000af0
     7c0:	.word	0x00000a80
     7c4:	.word	0x00000af0
     7c8:	.word	0x00000ae0
     7cc:	.word	0x00000af0
     7d0:	.word	0x00000af0
     7d4:	.word	0x00000af0
     7d8:	.word	0x00000af0
     7dc:	.word	0x00000af0
     7e0:	.word	0x00000af0
     7e4:	.word	0x00000af0
     7e8:	.word	0x00000a90
     7ec:	.word	0x00000af0
     7f0:	.word	0x00000af0
     7f4:	.word	0x00000ad0
     7f8:	.word	0x00000a80
     7fc:	.word	0x00000af0
     800:	.word	0x00000af0
     804:	.word	0x00000af0
     808:	.word	0x00000af0
     80c:	.word	0x00000af0
     810:	.word	0x00000818
     814:	.word	0x00000818
     818:	mov	r0, #5
     81c:	mov	r8, r9
     820:	bl	0 <coda_type_text_new>
     824:	mov	r5, r0
     828:	mov	r3, #11
     82c:	mov	fp, #4
     830:	cmp	r5, #0
     834:	beq	984 <read_AEDR+0x478>
     838:	mov	r1, r3
     83c:	mov	r0, r5
     840:	bl	0 <coda_type_set_read_type>
     844:	cmp	r0, #0
     848:	bne	97c <read_AEDR+0x470>
     84c:	cmp	fp, #4
     850:	bne	950 <read_AEDR+0x444>
     854:	sub	r4, r4, #51	; 0x33
     858:	cmp	r9, #1
     85c:	cmpne	r4, #1
     860:	bhi	9bc <read_AEDR+0x4b0>
     864:	add	r1, sp, #32
     868:	mov	r0, sl
     86c:	str	r8, [sp]
     870:	str	r5, [sp, #4]
     874:	str	r1, [sp, #8]
     878:	ldrd	r2, [sp, #16]
     87c:	bl	178 <read_attribute_sub>
     880:	cmp	r0, #0
     884:	mov	r0, r5
     888:	bne	980 <read_AEDR+0x474>
     88c:	bl	0 <coda_type_release>
     890:	ldr	r3, [sp, #36]	; 0x24
     894:	ldr	r0, [sl, #20]
     898:	cmp	r3, #5
     89c:	beq	98c <read_AEDR+0x480>
     8a0:	ldr	r2, [sp, #48]	; 0x30
     8a4:	ldr	r3, [r0, #16]
     8a8:	cmp	r2, #0
     8ac:	blt	b24 <read_AEDR+0x618>
     8b0:	cmp	r2, r3
     8b4:	bge	b24 <read_AEDR+0x618>
     8b8:	ldr	r3, [r0, #20]
     8bc:	ldr	r0, [r3, r2, lsl #2]
     8c0:	ldr	r3, [r0]
     8c4:	cmp	r3, #103	; 0x67
     8c8:	bne	b94 <read_AEDR+0x688>
     8cc:	mov	r3, #1
     8d0:	ldr	r2, [sp, #32]
     8d4:	ldr	r1, [sp, #104]	; 0x68
     8d8:	bl	0 <coda_cdf_variable_add_attribute>
     8dc:	cmp	r0, #0
     8e0:	bne	9b0 <read_AEDR+0x4a4>
     8e4:	ldr	r3, [sp, #104]	; 0x68
     8e8:	mov	r0, sl
     8ec:	str	r3, [sp]
     8f0:	ldr	r3, [sp, #108]	; 0x6c
     8f4:	str	r3, [sp, #4]
     8f8:	ldrd	r2, [sp, #56]	; 0x38
     8fc:	bl	50c <read_AEDR>
     900:	adds	r0, r0, #0
     904:	movne	r0, #1
     908:	rsb	r0, r0, #0
     90c:	add	sp, sp, #68	; 0x44
     910:	ldrd	r4, [sp]
     914:	ldrd	r6, [sp, #8]
     918:	ldrd	r8, [sp, #16]
     91c:	ldrd	sl, [sp, #24]
     920:	add	sp, sp, #32
     924:	pop	{pc}		; (ldr pc, [sp], #4)
     928:	mov	r8, r4
     92c:	mov	r3, r4
     930:	mov	fp, #2
     934:	mov	r1, fp
     938:	mov	r0, #5
     93c:	str	r3, [sp, #28]
     940:	bl	0 <coda_type_number_new>
     944:	mov	r5, r0
     948:	ldr	r3, [sp, #28]
     94c:	b	830 <read_AEDR+0x324>
     950:	mov	r2, r8
     954:	asr	r3, r8, #31
     958:	mov	r0, r5
     95c:	bl	0 <coda_type_set_byte_size>
     960:	cmp	r0, #0
     964:	bne	97c <read_AEDR+0x470>
     968:	mov	r1, #1
     96c:	mov	r0, r5
     970:	bl	0 <coda_type_number_set_endianness>
     974:	cmp	r0, #0
     978:	beq	854 <read_AEDR+0x348>
     97c:	mov	r0, r5
     980:	bl	0 <coda_type_release>
     984:	mvn	r0, #0
     988:	b	90c <read_AEDR+0x400>
     98c:	ldr	r3, [sp, #108]	; 0x6c
     990:	tst	r3, #1
     994:	beq	8a0 <read_AEDR+0x394>
     998:	mov	r3, #1
     99c:	ldr	r2, [sp, #32]
     9a0:	ldr	r1, [sp, #104]	; 0x68
     9a4:	bl	0 <coda_mem_type_add_attribute>
     9a8:	cmp	r0, #0
     9ac:	beq	8e4 <read_AEDR+0x3d8>
     9b0:	ldr	r0, [sp, #32]
     9b4:	bl	0 <coda_dynamic_type_delete>
     9b8:	b	984 <read_AEDR+0x478>
     9bc:	mov	r0, #5
     9c0:	bl	0 <coda_type_array_new>
     9c4:	subs	r3, r0, #0
     9c8:	mov	r6, r3
     9cc:	beq	97c <read_AEDR+0x470>
     9d0:	mov	r1, r5
     9d4:	bl	0 <coda_type_array_set_base_type>
     9d8:	subs	r4, r0, #0
     9dc:	bne	b88 <read_AEDR+0x67c>
     9e0:	mov	r0, r5
     9e4:	bl	0 <coda_type_release>
     9e8:	mov	r1, r4
     9ec:	mov	r0, r6
     9f0:	bl	0 <coda_type_array_add_variable_dimension>
     9f4:	subs	r4, r0, #0
     9f8:	bne	b78 <read_AEDR+0x66c>
     9fc:	mov	r1, r4
     a00:	mov	r0, r6
     a04:	bl	0 <coda_mem_array_new>
     a08:	subs	fp, r0, #0
     a0c:	mov	r0, r6
     a10:	beq	980 <read_AEDR+0x474>
     a14:	bl	0 <coda_type_release>
     a18:	cmp	r9, #0
     a1c:	bgt	a40 <read_AEDR+0x534>
     a20:	b	890 <read_AEDR+0x384>
     a24:	ldr	r1, [sp, #32]
     a28:	bl	0 <coda_mem_array_add_element>
     a2c:	cmp	r0, #0
     a30:	bne	b0c <read_AEDR+0x600>
     a34:	add	r4, r4, #1
     a38:	cmp	r9, r4
     a3c:	ble	890 <read_AEDR+0x384>
     a40:	ldrd	r6, [sp, #16]
     a44:	mul	r2, r4, r8
     a48:	add	r3, sp, #32
     a4c:	mov	r0, sl
     a50:	str	r8, [sp]
     a54:	str	r5, [sp, #4]
     a58:	str	r3, [sp, #8]
     a5c:	adds	r6, r6, r2
     a60:	adc	r7, r7, r2, asr #31
     a64:	mov	r2, r6
     a68:	mov	r3, r7
     a6c:	bl	178 <read_attribute_sub>
     a70:	cmp	r0, #0
     a74:	mov	r0, fp
     a78:	beq	a24 <read_AEDR+0x518>
     a7c:	b	9b4 <read_AEDR+0x4a8>
     a80:	mov	r8, #8
     a84:	mov	r3, #9
     a88:	mov	fp, #3
     a8c:	b	934 <read_AEDR+0x428>
     a90:	mov	r8, #1
     a94:	mov	r3, #0
     a98:	mov	fp, #2
     a9c:	b	934 <read_AEDR+0x428>
     aa0:	mov	r8, #1
     aa4:	mov	fp, #2
     aa8:	mov	r3, r8
     aac:	b	934 <read_AEDR+0x428>
     ab0:	mov	r8, #2
     ab4:	mov	r3, #3
     ab8:	mov	fp, r8
     abc:	b	934 <read_AEDR+0x428>
     ac0:	mov	r8, #4
     ac4:	mov	r3, #5
     ac8:	mov	fp, #2
     acc:	b	934 <read_AEDR+0x428>
     ad0:	mov	r8, #4
     ad4:	mov	r3, #8
     ad8:	mov	fp, #3
     adc:	b	934 <read_AEDR+0x428>
     ae0:	mov	r8, #8
     ae4:	mov	r3, #6
     ae8:	mov	fp, #2
     aec:	b	934 <read_AEDR+0x428>
     af0:	mvn	r0, #99	; 0x63
     af4:	mov	r2, r4
     af8:	movw	r1, #0
     afc:	movt	r1, #0
     b00:	bl	0 <coda_set_error>
     b04:	mvn	r0, #0
     b08:	b	90c <read_AEDR+0x400>
     b0c:	mov	r0, fp
     b10:	bl	0 <coda_dynamic_type_delete>
     b14:	ldr	r0, [sp, #32]
     b18:	bl	0 <coda_dynamic_type_delete>
     b1c:	mvn	r0, #0
     b20:	b	90c <read_AEDR+0x400>
     b24:	sub	r3, r3, #1
     b28:	movw	r1, #0
     b2c:	movt	r1, #0
     b30:	movw	r0, #65236	; 0xfed4
     b34:	movt	r0, #65535	; 0xffff
     b38:	bl	0 <coda_set_error>
     b3c:	mvn	r0, #0
     b40:	b	90c <read_AEDR+0x400>
     b44:	movw	r1, #0
     b48:	movt	r1, #0
     b4c:	movw	r0, #65236	; 0xfed4
     b50:	movt	r0, #65535	; 0xffff
     b54:	bl	0 <coda_set_error>
     b58:	mvn	r0, #0
     b5c:	b	90c <read_AEDR+0x400>
     b60:	mvn	r0, #199	; 0xc7
     b64:	movw	r1, #0
     b68:	movt	r1, #0
     b6c:	bl	0 <coda_set_error>
     b70:	mvn	r0, #0
     b74:	b	90c <read_AEDR+0x400>
     b78:	mov	r0, r6
     b7c:	bl	0 <coda_type_release>
     b80:	mvn	r0, #0
     b84:	b	90c <read_AEDR+0x400>
     b88:	mov	r0, r6
     b8c:	bl	0 <coda_type_release>
     b90:	b	97c <read_AEDR+0x470>
     b94:	movw	r1, #0
     b98:	movt	r1, #0
     b9c:	ldr	r3, [pc, #12]	; bb0 <read_AEDR+0x6a4>
     ba0:	movw	r0, #0
     ba4:	movt	r0, #0
     ba8:	movw	r2, #439	; 0x1b7
     bac:	bl	0 <__assert_fail>
     bb0:	.word	0x00000020

00000bb4 <read_VXR>:
     bb4:	orrs	ip, r2, r3
     bb8:	bne	bc4 <read_VXR+0x10>
     bbc:	mov	r0, #0
     bc0:	bx	lr
     bc4:	strd	r4, [sp, #-36]!	; 0xffffffdc
     bc8:	mov	r4, r2
     bcc:	adds	r2, r2, #8
     bd0:	strd	r6, [sp, #8]
     bd4:	mov	r5, r3
     bd8:	mov	r7, r0
     bdc:	strd	r8, [sp, #16]
     be0:	strd	sl, [sp, #24]
     be4:	mov	fp, #0
     be8:	mov	sl, #4
     bec:	str	lr, [sp, #32]
     bf0:	sub	sp, sp, #180	; 0xb4
     bf4:	adc	r3, r3, fp
     bf8:	ldr	r0, [r0, #52]	; 0x34
     bfc:	strd	sl, [sp]
     c00:	str	r1, [sp, #52]	; 0x34
     c04:	add	r1, sp, #72	; 0x48
     c08:	str	r1, [sp, #8]
     c0c:	bl	0 <read_bytes>
     c10:	cmp	r0, fp
     c14:	blt	1234 <read_VXR+0x680>
     c18:	ldrb	r3, [sp, #75]	; 0x4b
     c1c:	ldrb	r2, [sp, #74]	; 0x4a
     c20:	ldrb	r1, [sp, #72]	; 0x48
     c24:	strb	r3, [sp, #72]	; 0x48
     c28:	ldrb	r3, [sp, #73]	; 0x49
     c2c:	strb	r2, [sp, #73]	; 0x49
     c30:	strb	r3, [sp, #74]	; 0x4a
     c34:	strb	r1, [sp, #75]	; 0x4b
     c38:	ldr	r2, [sp, #72]	; 0x48
     c3c:	cmp	r2, #6
     c40:	bne	139c <read_VXR+0x7e8>
     c44:	mov	r6, #0
     c48:	add	r1, sp, #96	; 0x60
     c4c:	ldr	r0, [r7, #52]	; 0x34
     c50:	mov	r8, #8
     c54:	adds	r2, r4, #12
     c58:	adc	r3, r5, r6
     c5c:	str	r8, [sp]
     c60:	str	r6, [sp, #4]
     c64:	str	r1, [sp, #8]
     c68:	bl	0 <read_bytes>
     c6c:	cmp	r0, r6
     c70:	blt	1234 <read_VXR+0x680>
     c74:	add	r1, sp, #76	; 0x4c
     c78:	adds	r2, r4, #20
     c7c:	strd	sl, [sp]
     c80:	adc	r3, r5, #0
     c84:	str	r1, [sp, #8]
     c88:	ldr	r0, [r7, #52]	; 0x34
     c8c:	bl	0 <read_bytes>
     c90:	cmp	r0, #0
     c94:	blt	1234 <read_VXR+0x680>
     c98:	add	r1, sp, #80	; 0x50
     c9c:	adds	r2, r4, #24
     ca0:	strd	sl, [sp]
     ca4:	adc	r3, r5, #0
     ca8:	str	r1, [sp, #8]
     cac:	ldr	r0, [r7, #52]	; 0x34
     cb0:	bl	0 <read_bytes>
     cb4:	cmp	r0, #0
     cb8:	blt	1234 <read_VXR+0x680>
     cbc:	ldrb	r3, [sp, #83]	; 0x53
     cc0:	adds	r2, r4, #28
     cc4:	str	r2, [sp, #32]
     cc8:	adc	r2, r5, #0
     ccc:	ldrb	r1, [sp, #80]	; 0x50
     cd0:	str	r2, [sp, #36]	; 0x24
     cd4:	ldrb	r2, [sp, #82]	; 0x52
     cd8:	strb	r3, [sp, #80]	; 0x50
     cdc:	ldrb	r3, [sp, #81]	; 0x51
     ce0:	strb	r2, [sp, #81]	; 0x51
     ce4:	ldrb	r2, [sp, #96]	; 0x60
     ce8:	strb	r3, [sp, #82]	; 0x52
     cec:	ldrb	r3, [sp, #102]	; 0x66
     cf0:	strb	r1, [sp, #83]	; 0x53
     cf4:	ldrb	r1, [sp, #103]	; 0x67
     cf8:	strb	r1, [sp, #96]	; 0x60
     cfc:	ldrb	r1, [sp, #97]	; 0x61
     d00:	strb	r3, [sp, #97]	; 0x61
     d04:	ldrb	r3, [sp, #98]	; 0x62
     d08:	strb	r2, [sp, #103]	; 0x67
     d0c:	ldrb	r2, [sp, #101]	; 0x65
     d10:	strb	r2, [sp, #98]	; 0x62
     d14:	ldrb	r2, [sp, #99]	; 0x63
     d18:	strb	r3, [sp, #101]	; 0x65
     d1c:	ldrb	r3, [sp, #79]	; 0x4f
     d20:	strb	r1, [sp, #102]	; 0x66
     d24:	ldrb	r1, [sp, #100]	; 0x64
     d28:	strb	r1, [sp, #99]	; 0x63
     d2c:	ldrb	r1, [sp, #76]	; 0x4c
     d30:	strb	r3, [sp, #76]	; 0x4c
     d34:	ldrb	r3, [sp, #77]	; 0x4d
     d38:	strb	r2, [sp, #100]	; 0x64
     d3c:	ldrb	r2, [sp, #78]	; 0x4e
     d40:	strb	r1, [sp, #79]	; 0x4f
     d44:	strb	r2, [sp, #77]	; 0x4d
     d48:	strb	r3, [sp, #78]	; 0x4e
     d4c:	ldr	r3, [sp, #80]	; 0x50
     d50:	cmp	r3, #0
     d54:	ble	1160 <read_VXR+0x5ac>
     d58:	movw	r3, #0
     d5c:	movt	r3, #0
     d60:	str	r8, [sp, #44]	; 0x2c
     d64:	mov	r1, sl
     d68:	mov	sl, fp
     d6c:	str	r6, [sp, #48]	; 0x30
     d70:	str	r3, [sp, #68]	; 0x44
     d74:	mov	fp, r1
     d78:	mov	r6, #0
     d7c:	ldrd	r2, [sp, #32]
     d80:	str	r2, [sp, #20]
     d84:	str	r3, [sp, #40]	; 0x28
     d88:	add	r1, sp, #84	; 0x54
     d8c:	str	fp, [sp]
     d90:	str	sl, [sp, #4]
     d94:	str	r1, [sp, #8]
     d98:	ldr	r2, [sp, #20]
     d9c:	ldr	r3, [sp, #40]	; 0x28
     da0:	ldr	r0, [r7, #52]	; 0x34
     da4:	bl	0 <read_bytes>
     da8:	cmp	r0, #0
     dac:	blt	1234 <read_VXR+0x680>
     db0:	ldrd	r4, [sp, #32]
     db4:	add	r3, sp, #88	; 0x58
     db8:	str	fp, [sp]
     dbc:	ldr	r2, [sp, #76]	; 0x4c
     dc0:	str	sl, [sp, #4]
     dc4:	str	r3, [sp, #8]
     dc8:	ldr	r0, [r7, #52]	; 0x34
     dcc:	add	r2, r6, r2
     dd0:	lsl	r2, r2, #2
     dd4:	adds	r8, r4, r2
     dd8:	adc	r9, r5, r2, asr #31
     ddc:	mov	r2, r8
     de0:	mov	r3, r9
     de4:	bl	0 <read_bytes>
     de8:	cmp	r0, #0
     dec:	blt	1234 <read_VXR+0x680>
     df0:	ldr	r1, [sp, #44]	; 0x2c
     df4:	add	r3, sp, #104	; 0x68
     df8:	ldr	r2, [sp, #76]	; 0x4c
     dfc:	str	r1, [sp]
     e00:	ldr	r1, [sp, #48]	; 0x30
     e04:	add	r2, r6, r2
     e08:	lsl	r2, r2, #3
     e0c:	adds	r4, r4, r2
     e10:	adc	r5, r5, r2, asr #31
     e14:	mov	r2, r4
     e18:	str	r1, [sp, #4]
     e1c:	str	r3, [sp, #8]
     e20:	mov	r3, r5
     e24:	ldr	r0, [r7, #52]	; 0x34
     e28:	bl	0 <read_bytes>
     e2c:	cmp	r0, #0
     e30:	blt	1234 <read_VXR+0x680>
     e34:	ldrb	r3, [sp, #111]	; 0x6f
     e38:	ldrb	r1, [sp, #104]	; 0x68
     e3c:	ldrb	r2, [sp, #110]	; 0x6e
     e40:	strb	r3, [sp, #104]	; 0x68
     e44:	ldrb	r3, [sp, #105]	; 0x69
     e48:	strb	r2, [sp, #105]	; 0x69
     e4c:	ldrb	r2, [sp, #106]	; 0x6a
     e50:	strb	r3, [sp, #110]	; 0x6e
     e54:	ldrb	r3, [sp, #108]	; 0x6c
     e58:	strb	r1, [sp, #111]	; 0x6f
     e5c:	ldrb	r1, [sp, #109]	; 0x6d
     e60:	strb	r1, [sp, #106]	; 0x6a
     e64:	ldrb	r1, [sp, #107]	; 0x6b
     e68:	strb	r3, [sp, #107]	; 0x6b
     e6c:	ldrb	r3, [sp, #84]	; 0x54
     e70:	strb	r2, [sp, #109]	; 0x6d
     e74:	ldrb	r2, [sp, #87]	; 0x57
     e78:	strb	r2, [sp, #84]	; 0x54
     e7c:	ldrb	r2, [sp, #85]	; 0x55
     e80:	strb	r3, [sp, #87]	; 0x57
     e84:	ldrb	r3, [sp, #91]	; 0x5b
     e88:	strb	r1, [sp, #108]	; 0x6c
     e8c:	ldrb	r1, [sp, #86]	; 0x56
     e90:	strb	r1, [sp, #85]	; 0x55
     e94:	ldrb	r1, [sp, #88]	; 0x58
     e98:	strb	r2, [sp, #86]	; 0x56
     e9c:	ldrb	r2, [sp, #90]	; 0x5a
     ea0:	strb	r3, [sp, #88]	; 0x58
     ea4:	ldrb	r3, [sp, #89]	; 0x59
     ea8:	strb	r2, [sp, #89]	; 0x59
     eac:	strb	r1, [sp, #91]	; 0x5b
     eb0:	strb	r3, [sp, #90]	; 0x5a
     eb4:	ldrd	r2, [sp, #104]	; 0x68
     eb8:	orrs	r1, r2, r3
     ebc:	mov	r5, r3
     ec0:	strd	r2, [sp, #24]
     ec4:	beq	1138 <read_VXR+0x584>
     ec8:	add	r1, sp, #92	; 0x5c
     ecc:	adds	r2, r2, #8
     ed0:	str	fp, [sp]
     ed4:	adc	r3, r5, #0
     ed8:	str	sl, [sp, #4]
     edc:	str	r1, [sp, #8]
     ee0:	ldr	r0, [r7, #52]	; 0x34
     ee4:	ldrd	r4, [sp, #84]	; 0x54
     ee8:	bl	0 <read_bytes>
     eec:	cmp	r0, #0
     ef0:	blt	1234 <read_VXR+0x680>
     ef4:	ldrb	r3, [sp, #95]	; 0x5f
     ef8:	ldrb	r2, [sp, #94]	; 0x5e
     efc:	ldrb	r1, [sp, #92]	; 0x5c
     f00:	strb	r3, [sp, #92]	; 0x5c
     f04:	ldrb	r3, [sp, #93]	; 0x5d
     f08:	strb	r2, [sp, #93]	; 0x5d
     f0c:	strb	r3, [sp, #94]	; 0x5e
     f10:	strb	r1, [sp, #95]	; 0x5f
     f14:	ldr	r2, [sp, #92]	; 0x5c
     f18:	cmp	r2, #6
     f1c:	beq	1254 <read_VXR+0x6a0>
     f20:	cmp	r2, #7
     f24:	beq	1190 <read_VXR+0x5dc>
     f28:	cmp	r2, #13
     f2c:	bne	1374 <read_VXR+0x7c0>
     f30:	ldr	r2, [sp, #52]	; 0x34
     f34:	ldr	r3, [r2, #20]
     f38:	cmp	r4, r3
     f3c:	bge	1138 <read_VXR+0x584>
     f40:	ldr	r2, [r2, #40]	; 0x28
     f44:	cmp	r2, #0
     f48:	beq	1274 <read_VXR+0x6c0>
     f4c:	ldrd	r8, [sp, #24]
     f50:	add	r1, sp, #112	; 0x70
     f54:	ldr	r3, [sp, #44]	; 0x2c
     f58:	ldr	r0, [sp, #48]	; 0x30
     f5c:	adds	r2, r8, #16
     f60:	str	r3, [sp]
     f64:	adc	r3, r9, #0
     f68:	strd	r0, [sp, #4]
     f6c:	ldr	r0, [r7, #52]	; 0x34
     f70:	bl	0 <read_bytes>
     f74:	cmp	r0, #0
     f78:	blt	1234 <read_VXR+0x680>
     f7c:	ldrb	r2, [sp, #119]	; 0x77
     f80:	ldrb	r3, [sp, #112]	; 0x70
     f84:	ldrb	r1, [sp, #118]	; 0x76
     f88:	strb	r2, [sp, #112]	; 0x70
     f8c:	ldrb	r2, [sp, #113]	; 0x71
     f90:	strb	r3, [sp, #119]	; 0x77
     f94:	ldrb	r3, [sp, #117]	; 0x75
     f98:	strb	r1, [sp, #113]	; 0x71
     f9c:	ldrb	r1, [sp, #114]	; 0x72
     fa0:	strb	r3, [sp, #114]	; 0x72
     fa4:	ldrb	r3, [sp, #115]	; 0x73
     fa8:	strb	r2, [sp, #118]	; 0x76
     fac:	ldrb	r2, [sp, #116]	; 0x74
     fb0:	strb	r1, [sp, #117]	; 0x75
     fb4:	strb	r2, [sp, #115]	; 0x73
     fb8:	strb	r3, [sp, #116]	; 0x74
     fbc:	ldrd	r2, [sp, #112]	; 0x70
     fc0:	cmp	r2, #20
     fc4:	mov	r9, r3
     fc8:	sbcs	r3, r3, #0
     fcc:	mov	r8, r2
     fd0:	blt	12b0 <read_VXR+0x6fc>
     fd4:	mov	r0, r8
     fd8:	bl	0 <malloc>
     fdc:	subs	r3, r0, #0
     fe0:	str	r3, [sp, #64]	; 0x40
     fe4:	beq	1210 <read_VXR+0x65c>
     fe8:	ldrd	r0, [sp, #24]
     fec:	strd	r8, [sp]
     ff0:	adds	r2, r0, #24
     ff4:	adc	r3, r1, #0
     ff8:	ldr	r1, [sp, #64]	; 0x40
     ffc:	str	r1, [sp, #8]
    1000:	ldr	r0, [r7, #52]	; 0x34
    1004:	bl	0 <read_bytes>
    1008:	cmp	r0, #0
    100c:	blt	1310 <read_VXR+0x75c>
    1010:	mov	ip, #0
    1014:	mov	r3, #56	; 0x38
    1018:	ldr	r2, [sp, #68]	; 0x44
    101c:	add	r0, sp, #120	; 0x78
    1020:	mov	r1, #31
    1024:	str	ip, [sp, #120]	; 0x78
    1028:	str	ip, [sp, #124]	; 0x7c
    102c:	str	ip, [sp, #144]	; 0x90
    1030:	str	ip, [sp, #152]	; 0x98
    1034:	str	ip, [sp, #156]	; 0x9c
    1038:	str	ip, [sp, #160]	; 0xa0
    103c:	bl	0 <coda_inflateInit2_>
    1040:	subs	r3, r0, #0
    1044:	mov	r8, r3
    1048:	bne	131c <read_VXR+0x768>
    104c:	ldr	r3, [sp, #52]	; 0x34
    1050:	ldr	r2, [sp, #64]	; 0x40
    1054:	ldr	r3, [r3, #20]
    1058:	str	r2, [sp, #120]	; 0x78
    105c:	ldr	r2, [sp, #112]	; 0x70
    1060:	cmp	r5, r3
    1064:	str	r2, [sp, #124]	; 0x7c
    1068:	blt	1078 <read_VXR+0x4c4>
    106c:	sub	r5, r3, #1
    1070:	mov	r3, #1
    1074:	mov	r8, r3
    1078:	ldr	r0, [sp, #52]	; 0x34
    107c:	sub	r3, r5, r4
    1080:	ldr	r1, [r0, #24]
    1084:	ldr	r2, [r0, #28]
    1088:	ldr	lr, [r0, #40]	; 0x28
    108c:	add	r0, sp, #120	; 0x78
    1090:	mul	ip, r1, r4
    1094:	mla	r3, r3, r1, r1
    1098:	mov	r1, #4
    109c:	mla	ip, r2, ip, lr
    10a0:	mul	r3, r2, r3
    10a4:	str	ip, [sp, #132]	; 0x84
    10a8:	str	r3, [sp, #136]	; 0x88
    10ac:	bl	0 <coda_inflate>
    10b0:	cmn	r0, #2
    10b4:	beq	13b8 <read_VXR+0x804>
    10b8:	cmp	r0, #0
    10bc:	bge	10d8 <read_VXR+0x524>
    10c0:	adds	r3, r0, #5
    10c4:	eor	r2, r8, #1
    10c8:	movne	r3, #1
    10cc:	and	r2, r2, #1
    10d0:	orrs	r3, r3, r2
    10d4:	bne	12c8 <read_VXR+0x714>
    10d8:	ldr	r0, [sp, #64]	; 0x40
    10dc:	bl	0 <free>
    10e0:	add	r0, sp, #120	; 0x78
    10e4:	bl	0 <coda_inflateEnd>
    10e8:	cmp	r0, #0
    10ec:	bne	1348 <read_VXR+0x794>
    10f0:	cmp	r4, r5
    10f4:	bgt	1138 <read_VXR+0x584>
    10f8:	ldr	r8, [sp, #20]
    10fc:	ldr	r3, [sp, #52]	; 0x34
    1100:	ldr	r9, [sp, #40]	; 0x28
    1104:	ldr	lr, [r3, #24]
    1108:	ldr	ip, [r3, #28]
    110c:	ldr	r0, [r3, #36]	; 0x24
    1110:	mul	r2, lr, r4
    1114:	lsl	r1, r4, #3
    1118:	add	r4, r4, #1
    111c:	cmp	r5, r4
    1120:	mul	r2, ip, r2
    1124:	asr	r3, r2, #31
    1128:	strd	r2, [r0, r1]
    112c:	bge	1110 <read_VXR+0x55c>
    1130:	str	r8, [sp, #20]
    1134:	str	r9, [sp, #40]	; 0x28
    1138:	ldr	r2, [sp, #20]
    113c:	add	r6, r6, #1
    1140:	ldr	r3, [sp, #80]	; 0x50
    1144:	adds	r2, r2, #4
    1148:	str	r2, [sp, #20]
    114c:	ldr	r2, [sp, #40]	; 0x28
    1150:	adc	r2, r2, #0
    1154:	cmp	r6, r3
    1158:	str	r2, [sp, #40]	; 0x28
    115c:	blt	d88 <read_VXR+0x1d4>
    1160:	mov	r0, r7
    1164:	ldr	r1, [sp, #52]	; 0x34
    1168:	ldr	r3, [sp, #216]	; 0xd8
    116c:	str	r3, [sp]
    1170:	ldr	r3, [sp, #220]	; 0xdc
    1174:	str	r3, [sp, #4]
    1178:	ldrd	r2, [sp, #96]	; 0x60
    117c:	bl	bb4 <read_VXR>
    1180:	adds	r0, r0, #0
    1184:	movne	r0, #1
    1188:	rsb	r0, r0, #0
    118c:	b	1238 <read_VXR+0x684>
    1190:	ldr	r3, [sp, #52]	; 0x34
    1194:	ldr	r3, [r3, #20]
    1198:	cmp	r5, r3
    119c:	subge	r5, r3, #1
    11a0:	cmp	r4, r5
    11a4:	bgt	1138 <read_VXR+0x584>
    11a8:	ldrd	r8, [sp, #24]
    11ac:	str	r6, [sp, #24]
    11b0:	ldr	r3, [sp, #52]	; 0x34
    11b4:	str	r7, [sp, #64]	; 0x40
    11b8:	adds	r2, r8, #12
    11bc:	adc	r1, r9, #0
    11c0:	str	r2, [sp, #56]	; 0x38
    11c4:	mov	r2, r4
    11c8:	str	r1, [sp, #60]	; 0x3c
    11cc:	ldr	r0, [r3, #24]
    11d0:	ldr	ip, [r3, #28]
    11d4:	ldr	lr, [r3, #36]	; 0x24
    11d8:	ldrd	r8, [sp, #56]	; 0x38
    11dc:	sub	r3, r2, r4
    11e0:	lsl	r1, r2, #3
    11e4:	add	r2, r2, #1
    11e8:	mul	r3, r0, r3
    11ec:	mul	r3, ip, r3
    11f0:	adds	r6, r8, r3
    11f4:	adc	r7, r9, r3, asr #31
    11f8:	cmp	r2, r5
    11fc:	strd	r6, [lr, r1]
    1200:	ble	11dc <read_VXR+0x628>
    1204:	ldr	r6, [sp, #24]
    1208:	ldr	r7, [sp, #64]	; 0x40
    120c:	b	1138 <read_VXR+0x584>
    1210:	mov	r0, #652	; 0x28c
    1214:	mov	r2, r8
    1218:	movw	r3, #0
    121c:	movt	r3, #0
    1220:	str	r0, [sp]
    1224:	movw	r1, #0
    1228:	movt	r1, #0
    122c:	mvn	r0, #0
    1230:	bl	0 <coda_set_error>
    1234:	mvn	r0, #0
    1238:	add	sp, sp, #180	; 0xb4
    123c:	ldrd	r4, [sp]
    1240:	ldrd	r6, [sp, #8]
    1244:	ldrd	r8, [sp, #16]
    1248:	ldrd	sl, [sp, #24]
    124c:	add	sp, sp, #32
    1250:	pop	{pc}		; (ldr pc, [sp], #4)
    1254:	mov	r0, r7
    1258:	strd	r4, [sp]
    125c:	ldrd	r2, [sp, #24]
    1260:	ldr	r1, [sp, #52]	; 0x34
    1264:	bl	bb4 <read_VXR>
    1268:	cmp	r0, #0
    126c:	beq	1138 <read_VXR+0x584>
    1270:	b	1234 <read_VXR+0x680>
    1274:	ldr	r8, [sp, #52]	; 0x34
    1278:	ldr	r2, [r8, #24]
    127c:	ldr	r1, [r8, #28]
    1280:	mul	r3, r2, r3
    1284:	mul	r3, r1, r3
    1288:	mov	r0, r3
    128c:	str	r3, [sp, #64]	; 0x40
    1290:	bl	0 <malloc>
    1294:	cmp	r0, #0
    1298:	str	r0, [r8, #40]	; 0x28
    129c:	ldr	r3, [sp, #64]	; 0x40
    12a0:	bne	f4c <read_VXR+0x398>
    12a4:	mov	r2, r3
    12a8:	movw	r0, #629	; 0x275
    12ac:	b	1218 <read_VXR+0x664>
    12b0:	movw	r1, #0
    12b4:	movt	r1, #0
    12b8:	movw	r0, #65236	; 0xfed4
    12bc:	movt	r0, #65535	; 0xffff
    12c0:	bl	0 <coda_set_error>
    12c4:	b	1234 <read_VXR+0x680>
    12c8:	cmn	r0, #4
    12cc:	beq	138c <read_VXR+0x7d8>
    12d0:	cmn	r0, #3
    12d4:	movweq	r1, #0
    12d8:	movteq	r1, #0
    12dc:	beq	12e8 <read_VXR+0x734>
    12e0:	movw	r1, #0
    12e4:	movt	r1, #0
    12e8:	mvn	r0, #21
    12ec:	bl	0 <coda_set_error>
    12f0:	ldr	r1, [sp, #144]	; 0x90
    12f4:	cmp	r1, #0
    12f8:	beq	1308 <read_VXR+0x754>
    12fc:	movw	r0, #0
    1300:	movt	r0, #0
    1304:	bl	0 <coda_add_error_message>
    1308:	add	r0, sp, #120	; 0x78
    130c:	bl	0 <coda_inflateEnd>
    1310:	ldr	r0, [sp, #64]	; 0x40
    1314:	bl	0 <free>
    1318:	b	1234 <read_VXR+0x680>
    131c:	movw	r1, #0
    1320:	movt	r1, #0
    1324:	mvn	r0, #21
    1328:	bl	0 <coda_set_error>
    132c:	ldr	r1, [sp, #144]	; 0x90
    1330:	cmp	r1, #0
    1334:	beq	1310 <read_VXR+0x75c>
    1338:	movw	r0, #0
    133c:	movt	r0, #0
    1340:	bl	0 <coda_add_error_message>
    1344:	b	1310 <read_VXR+0x75c>
    1348:	movw	r1, #0
    134c:	movt	r1, #0
    1350:	mvn	r0, #21
    1354:	bl	0 <coda_set_error>
    1358:	ldr	r1, [sp, #144]	; 0x90
    135c:	cmp	r1, #0
    1360:	beq	1234 <read_VXR+0x680>
    1364:	movw	r0, #0
    1368:	movt	r0, #0
    136c:	bl	0 <coda_add_error_message>
    1370:	b	1234 <read_VXR+0x680>
    1374:	movw	r1, #0
    1378:	movt	r1, #0
    137c:	movw	r0, #65236	; 0xfed4
    1380:	movt	r0, #65535	; 0xffff
    1384:	bl	0 <coda_set_error>
    1388:	b	1234 <read_VXR+0x680>
    138c:	mov	r1, #0
    1390:	mvn	r0, #0
    1394:	bl	0 <coda_set_error>
    1398:	b	1308 <read_VXR+0x754>
    139c:	movw	r1, #0
    13a0:	movt	r1, #0
    13a4:	movw	r0, #65236	; 0xfed4
    13a8:	movt	r0, #65535	; 0xffff
    13ac:	bl	0 <coda_set_error>
    13b0:	mvn	r0, #0
    13b4:	b	1238 <read_VXR+0x684>
    13b8:	movw	r1, #0
    13bc:	movt	r1, #0
    13c0:	ldr	r3, [pc, #12]	; 13d4 <read_VXR+0x820>
    13c4:	movw	r0, #0
    13c8:	movt	r0, #0
    13cc:	movw	r2, #687	; 0x2af
    13d0:	bl	0 <__assert_fail>
    13d4:	.word	0x0000002c

000013d8 <rtrim.constprop.3>:
    13d8:	str	r4, [sp, #-8]!
    13dc:	mov	r4, r0
    13e0:	str	lr, [sp, #4]
    13e4:	bl	0 <strlen>
    13e8:	cmp	r0, #0
    13ec:	beq	142c <rtrim.constprop.3+0x54>
    13f0:	add	r2, r4, r0
    13f4:	ldrb	r3, [r2, #-1]
    13f8:	cmp	r3, #32
    13fc:	bne	142c <rtrim.constprop.3+0x54>
    1400:	sub	r0, r0, #2
    1404:	mov	ip, #0
    1408:	add	r3, r4, r0
    140c:	sub	r0, r4, #1
    1410:	b	1420 <rtrim.constprop.3+0x48>
    1414:	ldrb	r1, [r3], #-1
    1418:	cmp	r1, #32
    141c:	bne	142c <rtrim.constprop.3+0x54>
    1420:	cmp	r3, r0
    1424:	strb	ip, [r2, #-1]!
    1428:	bne	1414 <rtrim.constprop.3+0x3c>
    142c:	ldr	r4, [sp]
    1430:	add	sp, sp, #4
    1434:	pop	{pc}		; (ldr pc, [sp], #4)

00001438 <read_ADR>:
    1438:	orrs	r1, r2, r3
    143c:	bne	1448 <read_ADR+0x10>
    1440:	mov	r0, #0
    1444:	bx	lr
    1448:	strd	r4, [sp, #-36]!	; 0xffffffdc
    144c:	mov	r4, r2
    1450:	adds	r2, r2, #8
    1454:	strd	r6, [sp, #8]
    1458:	mov	r6, #4
    145c:	mov	r7, #0
    1460:	strd	r8, [sp, #16]
    1464:	mov	r5, r3
    1468:	adc	r3, r3, #0
    146c:	strd	sl, [sp, #24]
    1470:	mov	sl, r0
    1474:	str	lr, [sp, #32]
    1478:	sub	sp, sp, #340	; 0x154
    147c:	add	r1, sp, #20
    1480:	ldr	r0, [r0, #52]	; 0x34
    1484:	strd	r6, [sp]
    1488:	str	r1, [sp, #8]
    148c:	bl	0 <read_bytes>
    1490:	cmp	r0, #0
    1494:	blt	1864 <read_ADR+0x42c>
    1498:	ldrb	r3, [sp, #23]
    149c:	ldrb	r2, [sp, #22]
    14a0:	ldrb	r1, [sp, #20]
    14a4:	strb	r3, [sp, #20]
    14a8:	ldrb	r3, [sp, #21]
    14ac:	strb	r2, [sp, #21]
    14b0:	strb	r3, [sp, #22]
    14b4:	strb	r1, [sp, #23]
    14b8:	ldr	r2, [sp, #20]
    14bc:	cmp	r2, #4
    14c0:	bne	186c <read_ADR+0x434>
    14c4:	add	fp, sp, #48	; 0x30
    14c8:	mov	r8, #8
    14cc:	ldr	r0, [sl, #52]	; 0x34
    14d0:	mov	r9, #0
    14d4:	adds	r2, r4, #12
    14d8:	adc	r3, r5, #0
    14dc:	strd	r8, [sp]
    14e0:	str	fp, [sp, #8]
    14e4:	bl	0 <read_bytes>
    14e8:	cmp	r0, #0
    14ec:	blt	1864 <read_ADR+0x42c>
    14f0:	add	r1, sp, #56	; 0x38
    14f4:	adds	r2, r4, #20
    14f8:	strd	r8, [sp]
    14fc:	adc	r3, r5, #0
    1500:	ldr	r0, [sl, #52]	; 0x34
    1504:	str	r1, [sp, #8]
    1508:	bl	0 <read_bytes>
    150c:	cmp	r0, #0
    1510:	blt	1864 <read_ADR+0x42c>
    1514:	add	r1, sp, #24
    1518:	adds	r2, r4, #28
    151c:	strd	r6, [sp]
    1520:	adc	r3, r5, #0
    1524:	ldr	r0, [sl, #52]	; 0x34
    1528:	str	r1, [sp, #8]
    152c:	bl	0 <read_bytes>
    1530:	cmp	r0, #0
    1534:	blt	1864 <read_ADR+0x42c>
    1538:	add	r1, sp, #28
    153c:	adds	r2, r4, #32
    1540:	strd	r6, [sp]
    1544:	adc	r3, r5, #0
    1548:	ldr	r0, [sl, #52]	; 0x34
    154c:	str	r1, [sp, #8]
    1550:	bl	0 <read_bytes>
    1554:	cmp	r0, #0
    1558:	blt	1864 <read_ADR+0x42c>
    155c:	add	r1, sp, #32
    1560:	adds	r2, r4, #36	; 0x24
    1564:	strd	r6, [sp]
    1568:	adc	r3, r5, #0
    156c:	ldr	r0, [sl, #52]	; 0x34
    1570:	str	r1, [sp, #8]
    1574:	bl	0 <read_bytes>
    1578:	cmp	r0, #0
    157c:	blt	1864 <read_ADR+0x42c>
    1580:	add	r1, sp, #36	; 0x24
    1584:	adds	r2, r4, #40	; 0x28
    1588:	strd	r6, [sp]
    158c:	adc	r3, r5, #0
    1590:	ldr	r0, [sl, #52]	; 0x34
    1594:	str	r1, [sp, #8]
    1598:	bl	0 <read_bytes>
    159c:	cmp	r0, #0
    15a0:	blt	1864 <read_ADR+0x42c>
    15a4:	add	r6, sp, #64	; 0x40
    15a8:	adds	r2, r4, #48	; 0x30
    15ac:	strd	r8, [sp]
    15b0:	adc	r3, r5, #0
    15b4:	ldr	r0, [sl, #52]	; 0x34
    15b8:	str	r6, [sp, #8]
    15bc:	bl	0 <read_bytes>
    15c0:	cmp	r0, #0
    15c4:	blt	1864 <read_ADR+0x42c>
    15c8:	add	r1, sp, #40	; 0x28
    15cc:	mov	r8, #4
    15d0:	ldr	r0, [sl, #52]	; 0x34
    15d4:	mov	r9, #0
    15d8:	adds	r2, r4, #56	; 0x38
    15dc:	adc	r3, r5, #0
    15e0:	strd	r8, [sp]
    15e4:	str	r1, [sp, #8]
    15e8:	bl	0 <read_bytes>
    15ec:	cmp	r0, #0
    15f0:	blt	1864 <read_ADR+0x42c>
    15f4:	add	r1, sp, #44	; 0x2c
    15f8:	adds	r2, r4, #60	; 0x3c
    15fc:	strd	r8, [sp]
    1600:	adc	r3, r5, #0
    1604:	ldr	r0, [sl, #52]	; 0x34
    1608:	str	r1, [sp, #8]
    160c:	bl	0 <read_bytes>
    1610:	cmp	r0, #0
    1614:	blt	1864 <read_ADR+0x42c>
    1618:	add	r7, sp, #76	; 0x4c
    161c:	mov	r8, #256	; 0x100
    1620:	ldr	r0, [sl, #52]	; 0x34
    1624:	mov	r9, #0
    1628:	adds	r2, r4, #68	; 0x44
    162c:	adc	r3, r5, #0
    1630:	strd	r8, [sp]
    1634:	str	r7, [sp, #8]
    1638:	bl	0 <read_bytes>
    163c:	cmp	r0, #0
    1640:	blt	1864 <read_ADR+0x42c>
    1644:	mov	r3, #0
    1648:	mov	r0, r7
    164c:	strb	r3, [sp, #332]	; 0x14c
    1650:	bl	13d8 <rtrim.constprop.3>
    1654:	ldrb	r3, [sp, #55]	; 0x37
    1658:	ldrb	r1, [sp, #48]	; 0x30
    165c:	ldrb	r2, [sp, #54]	; 0x36
    1660:	strb	r3, [sp, #48]	; 0x30
    1664:	ldrb	r3, [sp, #49]	; 0x31
    1668:	strb	r2, [sp, #49]	; 0x31
    166c:	ldrb	r2, [sp, #50]	; 0x32
    1670:	strb	r3, [sp, #54]	; 0x36
    1674:	ldrb	r3, [sp, #52]	; 0x34
    1678:	strb	r1, [sp, #55]	; 0x37
    167c:	ldrb	r1, [sp, #53]	; 0x35
    1680:	strb	r1, [sp, #50]	; 0x32
    1684:	ldrb	r1, [sp, #51]	; 0x33
    1688:	strb	r3, [sp, #51]	; 0x33
    168c:	ldrb	r3, [sp, #56]	; 0x38
    1690:	strb	r2, [sp, #53]	; 0x35
    1694:	ldrb	r2, [sp, #63]	; 0x3f
    1698:	strb	r1, [sp, #52]	; 0x34
    169c:	ldrb	r1, [sp, #62]	; 0x3e
    16a0:	strb	r2, [sp, #56]	; 0x38
    16a4:	ldrb	r2, [sp, #57]	; 0x39
    16a8:	strb	r1, [sp, #57]	; 0x39
    16ac:	strb	r3, [sp, #63]	; 0x3f
    16b0:	ldrb	r3, [sp, #61]	; 0x3d
    16b4:	ldrb	r1, [sp, #58]	; 0x3a
    16b8:	strb	r3, [sp, #58]	; 0x3a
    16bc:	ldrb	r3, [sp, #59]	; 0x3b
    16c0:	strb	r2, [sp, #62]	; 0x3e
    16c4:	ldrb	r2, [sp, #60]	; 0x3c
    16c8:	strb	r1, [sp, #61]	; 0x3d
    16cc:	strb	r2, [sp, #59]	; 0x3b
    16d0:	strb	r3, [sp, #60]	; 0x3c
    16d4:	ldrb	r3, [sp, #27]
    16d8:	ldrb	r1, [sp, #24]
    16dc:	ldrb	r2, [sp, #26]
    16e0:	strb	r3, [sp, #24]
    16e4:	ldrb	r3, [sp, #25]
    16e8:	strb	r2, [sp, #25]
    16ec:	ldrb	r2, [sp, #28]
    16f0:	strb	r3, [sp, #26]
    16f4:	ldrb	r3, [sp, #30]
    16f8:	strb	r1, [sp, #27]
    16fc:	ldrb	r1, [sp, #31]
    1700:	strb	r1, [sp, #28]
    1704:	ldrb	r1, [sp, #29]
    1708:	strb	r3, [sp, #29]
    170c:	ldrb	r3, [sp, #32]
    1710:	strb	r2, [sp, #31]
    1714:	ldrb	r2, [sp, #35]	; 0x23
    1718:	strb	r1, [sp, #30]
    171c:	ldrb	r1, [sp, #34]	; 0x22
    1720:	strb	r2, [sp, #32]
    1724:	ldrb	r2, [sp, #33]	; 0x21
    1728:	strb	r1, [sp, #33]	; 0x21
    172c:	strb	r3, [sp, #35]	; 0x23
    1730:	ldrb	r3, [sp, #39]	; 0x27
    1734:	ldrb	r1, [sp, #36]	; 0x24
    1738:	strb	r2, [sp, #34]	; 0x22
    173c:	ldrb	r2, [sp, #38]	; 0x26
    1740:	strb	r3, [sp, #36]	; 0x24
    1744:	ldrb	r3, [sp, #37]	; 0x25
    1748:	strb	r2, [sp, #37]	; 0x25
    174c:	strb	r1, [sp, #39]	; 0x27
    1750:	strb	r3, [sp, #38]	; 0x26
    1754:	ldrb	r3, [sp, #71]	; 0x47
    1758:	ldrb	r1, [sp, #64]	; 0x40
    175c:	ldrb	r2, [sp, #70]	; 0x46
    1760:	strb	r3, [sp, #64]	; 0x40
    1764:	ldrb	r3, [sp, #65]	; 0x41
    1768:	strb	r2, [sp, #65]	; 0x41
    176c:	ldrb	r2, [sp, #66]	; 0x42
    1770:	strb	r3, [sp, #70]	; 0x46
    1774:	ldrb	r3, [sp, #68]	; 0x44
    1778:	strb	r1, [sp, #71]	; 0x47
    177c:	ldrb	r1, [sp, #69]	; 0x45
    1780:	strb	r1, [sp, #66]	; 0x42
    1784:	ldrb	r1, [sp, #67]	; 0x43
    1788:	strb	r3, [sp, #67]	; 0x43
    178c:	ldrb	r3, [sp, #40]	; 0x28
    1790:	strb	r2, [sp, #69]	; 0x45
    1794:	ldrb	r2, [sp, #43]	; 0x2b
    1798:	strb	r2, [sp, #40]	; 0x28
    179c:	ldrb	r2, [sp, #41]	; 0x29
    17a0:	strb	r3, [sp, #43]	; 0x2b
    17a4:	ldrb	r3, [sp, #47]	; 0x2f
    17a8:	strb	r1, [sp, #68]	; 0x44
    17ac:	ldrb	r1, [sp, #42]	; 0x2a
    17b0:	strb	r1, [sp, #41]	; 0x29
    17b4:	ldrb	r1, [sp, #44]	; 0x2c
    17b8:	strb	r2, [sp, #42]	; 0x2a
    17bc:	ldrb	r2, [sp, #46]	; 0x2e
    17c0:	strb	r3, [sp, #44]	; 0x2c
    17c4:	ldrb	r3, [sp, #45]	; 0x2d
    17c8:	strb	r2, [sp, #45]	; 0x2d
    17cc:	strb	r1, [sp, #47]	; 0x2f
    17d0:	strb	r3, [sp, #46]	; 0x2e
    17d4:	ldrd	r2, [r6, #-8]
    17d8:	ldr	r1, [sp, #24]
    17dc:	tst	r1, #1
    17e0:	beq	183c <read_ADR+0x404>
    17e4:	ldr	r0, [sp, #40]	; 0x28
    17e8:	cmp	r0, #0
    17ec:	bne	184c <read_ADR+0x414>
    17f0:	mov	r0, sl
    17f4:	str	r7, [sp]
    17f8:	str	r1, [sp, #4]
    17fc:	bl	50c <read_AEDR>
    1800:	cmp	r0, #0
    1804:	bne	1864 <read_ADR+0x42c>
    1808:	mov	r0, sl
    180c:	ldrd	r2, [fp]
    1810:	bl	1438 <read_ADR>
    1814:	adds	r0, r0, #0
    1818:	movne	r0, #1
    181c:	rsb	r0, r0, #0
    1820:	add	sp, sp, #340	; 0x154
    1824:	ldrd	r4, [sp]
    1828:	ldrd	r6, [sp, #8]
    182c:	ldrd	r8, [sp, #16]
    1830:	ldrd	sl, [sp, #24]
    1834:	add	sp, sp, #32
    1838:	pop	{pc}		; (ldr pc, [sp], #4)
    183c:	ldr	r0, [sp, #32]
    1840:	cmp	r0, #0
    1844:	ldrdeq	r2, [r6]
    1848:	b	17f0 <read_ADR+0x3b8>
    184c:	mov	r2, r0
    1850:	movw	r1, #0
    1854:	movt	r1, #0
    1858:	movw	r0, #65236	; 0xfed4
    185c:	movt	r0, #65535	; 0xffff
    1860:	bl	0 <coda_set_error>
    1864:	mvn	r0, #0
    1868:	b	1820 <read_ADR+0x3e8>
    186c:	movw	r1, #0
    1870:	movt	r1, #0
    1874:	movw	r0, #65236	; 0xfed4
    1878:	movt	r0, #65535	; 0xffff
    187c:	bl	0 <coda_set_error>
    1880:	mvn	r0, #0
    1884:	b	1820 <read_ADR+0x3e8>

00001888 <read_VDR.part.2>:
    1888:	strd	r4, [sp, #-36]!	; 0xffffffdc
    188c:	mov	r5, r3
    1890:	mov	r4, r2
    1894:	strd	r6, [sp, #8]
    1898:	mov	r6, #4
    189c:	mov	r7, #0
    18a0:	strd	r8, [sp, #16]
    18a4:	adds	r2, r2, #8
    18a8:	strd	sl, [sp, #24]
    18ac:	mov	sl, r0
    18b0:	str	lr, [sp, #32]
    18b4:	sub	sp, sp, #444	; 0x1bc
    18b8:	add	r3, sp, #36	; 0x24
    18bc:	strd	r6, [sp]
    18c0:	str	r3, [sp, #8]
    18c4:	adc	r3, r5, #0
    18c8:	ldr	r0, [r0, #52]	; 0x34
    18cc:	bl	0 <read_bytes>
    18d0:	cmp	r0, #0
    18d4:	blt	1d70 <read_VDR.part.2+0x4e8>
    18d8:	ldrb	r3, [sp, #39]	; 0x27
    18dc:	ldr	r2, [sp, #480]	; 0x1e0
    18e0:	ldrb	r1, [sp, #36]	; 0x24
    18e4:	strb	r3, [sp, #36]	; 0x24
    18e8:	ldrb	r3, [sp, #37]	; 0x25
    18ec:	cmp	r2, #0
    18f0:	ldrb	r2, [sp, #38]	; 0x26
    18f4:	strb	r1, [sp, #39]	; 0x27
    18f8:	strb	r2, [sp, #37]	; 0x25
    18fc:	strb	r3, [sp, #38]	; 0x26
    1900:	ldr	r2, [sp, #36]	; 0x24
    1904:	bne	1d90 <read_VDR.part.2+0x508>
    1908:	cmp	r2, #3
    190c:	bne	20bc <read_VDR.part.2+0x834>
    1910:	add	r1, sp, #80	; 0x50
    1914:	mov	r8, #8
    1918:	ldr	r0, [sl, #52]	; 0x34
    191c:	mov	r9, #0
    1920:	adds	r2, r4, #12
    1924:	adc	r3, r5, #0
    1928:	strd	r8, [sp]
    192c:	str	r1, [sp, #8]
    1930:	bl	0 <read_bytes>
    1934:	cmp	r0, #0
    1938:	blt	1d70 <read_VDR.part.2+0x4e8>
    193c:	add	r1, sp, #40	; 0x28
    1940:	mov	r6, #4
    1944:	ldr	r0, [sl, #52]	; 0x34
    1948:	mov	r7, #0
    194c:	adds	r2, r4, #20
    1950:	adc	r3, r5, #0
    1954:	strd	r6, [sp]
    1958:	str	r1, [sp, #8]
    195c:	bl	0 <read_bytes>
    1960:	cmp	r0, #0
    1964:	blt	1d70 <read_VDR.part.2+0x4e8>
    1968:	add	r1, sp, #44	; 0x2c
    196c:	adds	r2, r4, #24
    1970:	strd	r6, [sp]
    1974:	adc	r3, r5, #0
    1978:	ldr	r0, [sl, #52]	; 0x34
    197c:	str	r1, [sp, #8]
    1980:	bl	0 <read_bytes>
    1984:	cmp	r0, #0
    1988:	blt	1d70 <read_VDR.part.2+0x4e8>
    198c:	add	r1, sp, #88	; 0x58
    1990:	adds	r2, r4, #28
    1994:	strd	r8, [sp]
    1998:	adc	r3, r5, #0
    199c:	ldr	r0, [sl, #52]	; 0x34
    19a0:	str	r1, [sp, #8]
    19a4:	bl	0 <read_bytes>
    19a8:	cmp	r0, #0
    19ac:	blt	1d70 <read_VDR.part.2+0x4e8>
    19b0:	add	r1, sp, #96	; 0x60
    19b4:	adds	r2, r4, #36	; 0x24
    19b8:	strd	r8, [sp]
    19bc:	adc	r3, r5, #0
    19c0:	ldr	r0, [sl, #52]	; 0x34
    19c4:	str	r1, [sp, #8]
    19c8:	bl	0 <read_bytes>
    19cc:	cmp	r0, #0
    19d0:	blt	1d70 <read_VDR.part.2+0x4e8>
    19d4:	add	r1, sp, #48	; 0x30
    19d8:	adds	r2, r4, #44	; 0x2c
    19dc:	strd	r6, [sp]
    19e0:	adc	r3, r5, #0
    19e4:	ldr	r0, [sl, #52]	; 0x34
    19e8:	str	r1, [sp, #8]
    19ec:	bl	0 <read_bytes>
    19f0:	cmp	r0, #0
    19f4:	blt	1d70 <read_VDR.part.2+0x4e8>
    19f8:	add	r1, sp, #52	; 0x34
    19fc:	adds	r2, r4, #48	; 0x30
    1a00:	strd	r6, [sp]
    1a04:	adc	r3, r5, #0
    1a08:	ldr	r0, [sl, #52]	; 0x34
    1a0c:	str	r1, [sp, #8]
    1a10:	bl	0 <read_bytes>
    1a14:	cmp	r0, #0
    1a18:	blt	1d70 <read_VDR.part.2+0x4e8>
    1a1c:	add	r1, sp, #56	; 0x38
    1a20:	adds	r2, r4, #64	; 0x40
    1a24:	strd	r6, [sp]
    1a28:	adc	r3, r5, #0
    1a2c:	ldr	r0, [sl, #52]	; 0x34
    1a30:	str	r1, [sp, #8]
    1a34:	bl	0 <read_bytes>
    1a38:	cmp	r0, #0
    1a3c:	blt	1d70 <read_VDR.part.2+0x4e8>
    1a40:	add	r1, sp, #60	; 0x3c
    1a44:	adds	r2, r4, #68	; 0x44
    1a48:	strd	r6, [sp]
    1a4c:	adc	r3, r5, #0
    1a50:	ldr	r0, [sl, #52]	; 0x34
    1a54:	str	r1, [sp, #8]
    1a58:	bl	0 <read_bytes>
    1a5c:	cmp	r0, #0
    1a60:	blt	1d70 <read_VDR.part.2+0x4e8>
    1a64:	add	r1, sp, #104	; 0x68
    1a68:	adds	r2, r4, #72	; 0x48
    1a6c:	strd	r8, [sp]
    1a70:	adc	r3, r5, #0
    1a74:	ldr	r0, [sl, #52]	; 0x34
    1a78:	str	r1, [sp, #8]
    1a7c:	bl	0 <read_bytes>
    1a80:	cmp	r0, #0
    1a84:	blt	1d70 <read_VDR.part.2+0x4e8>
    1a88:	add	r1, sp, #64	; 0x40
    1a8c:	mov	ip, #0
    1a90:	ldr	r0, [sl, #52]	; 0x34
    1a94:	mov	fp, #4
    1a98:	adds	r2, r4, #80	; 0x50
    1a9c:	adc	r3, r5, #0
    1aa0:	stm	sp, {fp, ip}
    1aa4:	str	r1, [sp, #8]
    1aa8:	bl	0 <read_bytes>
    1aac:	cmp	r0, #0
    1ab0:	blt	1d70 <read_VDR.part.2+0x4e8>
    1ab4:	add	r6, sp, #180	; 0xb4
    1ab8:	mov	r8, #256	; 0x100
    1abc:	ldr	r0, [sl, #52]	; 0x34
    1ac0:	mov	r9, #0
    1ac4:	adds	r2, r4, #84	; 0x54
    1ac8:	adc	r3, r5, #0
    1acc:	strd	r8, [sp]
    1ad0:	str	r6, [sp, #8]
    1ad4:	bl	0 <read_bytes>
    1ad8:	cmp	r0, #0
    1adc:	blt	1d70 <read_VDR.part.2+0x4e8>
    1ae0:	mov	r7, #0
    1ae4:	mov	r0, r6
    1ae8:	strb	r7, [sp, #436]	; 0x1b4
    1aec:	bl	13d8 <rtrim.constprop.3>
    1af0:	ldrb	r3, [sp, #87]	; 0x57
    1af4:	ldrb	r1, [sp, #80]	; 0x50
    1af8:	ldrb	r2, [sp, #86]	; 0x56
    1afc:	strb	r3, [sp, #80]	; 0x50
    1b00:	ldrb	r3, [sp, #81]	; 0x51
    1b04:	strb	r2, [sp, #81]	; 0x51
    1b08:	ldrb	r2, [sp, #82]	; 0x52
    1b0c:	strb	r3, [sp, #86]	; 0x56
    1b10:	ldrb	r3, [sp, #84]	; 0x54
    1b14:	strb	r1, [sp, #87]	; 0x57
    1b18:	ldrb	r1, [sp, #85]	; 0x55
    1b1c:	strb	r1, [sp, #82]	; 0x52
    1b20:	ldrb	r1, [sp, #83]	; 0x53
    1b24:	strb	r3, [sp, #83]	; 0x53
    1b28:	ldrb	r3, [sp, #40]	; 0x28
    1b2c:	strb	r2, [sp, #85]	; 0x55
    1b30:	ldrb	r2, [sp, #43]	; 0x2b
    1b34:	strb	r2, [sp, #40]	; 0x28
    1b38:	ldrb	r2, [sp, #41]	; 0x29
    1b3c:	strb	r3, [sp, #43]	; 0x2b
    1b40:	ldrb	r3, [sp, #47]	; 0x2f
    1b44:	strb	r1, [sp, #84]	; 0x54
    1b48:	ldrb	r1, [sp, #42]	; 0x2a
    1b4c:	strb	r1, [sp, #41]	; 0x29
    1b50:	ldrb	r1, [sp, #44]	; 0x2c
    1b54:	strb	r2, [sp, #42]	; 0x2a
    1b58:	ldrb	r2, [sp, #46]	; 0x2e
    1b5c:	strb	r3, [sp, #44]	; 0x2c
    1b60:	ldrb	r3, [sp, #45]	; 0x2d
    1b64:	strb	r2, [sp, #45]	; 0x2d
    1b68:	strb	r1, [sp, #47]	; 0x2f
    1b6c:	strb	r3, [sp, #46]	; 0x2e
    1b70:	ldrb	r3, [sp, #95]	; 0x5f
    1b74:	ldrb	r1, [sp, #88]	; 0x58
    1b78:	ldrb	r2, [sp, #94]	; 0x5e
    1b7c:	strb	r3, [sp, #88]	; 0x58
    1b80:	ldrb	r3, [sp, #89]	; 0x59
    1b84:	strb	r2, [sp, #89]	; 0x59
    1b88:	ldrb	r2, [sp, #90]	; 0x5a
    1b8c:	strb	r3, [sp, #94]	; 0x5e
    1b90:	ldrb	r3, [sp, #92]	; 0x5c
    1b94:	strb	r1, [sp, #95]	; 0x5f
    1b98:	ldrb	r1, [sp, #93]	; 0x5d
    1b9c:	strb	r1, [sp, #90]	; 0x5a
    1ba0:	ldrb	r1, [sp, #91]	; 0x5b
    1ba4:	strb	r3, [sp, #91]	; 0x5b
    1ba8:	ldrb	r3, [sp, #96]	; 0x60
    1bac:	strb	r2, [sp, #93]	; 0x5d
    1bb0:	ldrb	r2, [sp, #103]	; 0x67
    1bb4:	strb	r1, [sp, #92]	; 0x5c
    1bb8:	ldrb	r1, [sp, #102]	; 0x66
    1bbc:	strb	r2, [sp, #96]	; 0x60
    1bc0:	ldrb	r2, [sp, #97]	; 0x61
    1bc4:	strb	r1, [sp, #97]	; 0x61
    1bc8:	strb	r3, [sp, #103]	; 0x67
    1bcc:	ldrb	r3, [sp, #101]	; 0x65
    1bd0:	ldrb	r1, [sp, #98]	; 0x62
    1bd4:	strb	r3, [sp, #98]	; 0x62
    1bd8:	ldrb	r3, [sp, #99]	; 0x63
    1bdc:	strb	r2, [sp, #102]	; 0x66
    1be0:	ldrb	r2, [sp, #100]	; 0x64
    1be4:	strb	r1, [sp, #101]	; 0x65
    1be8:	strb	r2, [sp, #99]	; 0x63
    1bec:	strb	r3, [sp, #100]	; 0x64
    1bf0:	ldrb	r3, [sp, #51]	; 0x33
    1bf4:	ldrb	r1, [sp, #48]	; 0x30
    1bf8:	ldrb	r2, [sp, #50]	; 0x32
    1bfc:	strb	r3, [sp, #48]	; 0x30
    1c00:	ldrb	r3, [sp, #49]	; 0x31
    1c04:	strb	r2, [sp, #49]	; 0x31
    1c08:	ldrb	r2, [sp, #52]	; 0x34
    1c0c:	strb	r3, [sp, #50]	; 0x32
    1c10:	ldrb	r3, [sp, #54]	; 0x36
    1c14:	strb	r1, [sp, #51]	; 0x33
    1c18:	ldrb	r1, [sp, #55]	; 0x37
    1c1c:	strb	r1, [sp, #52]	; 0x34
    1c20:	ldrb	r1, [sp, #53]	; 0x35
    1c24:	strb	r3, [sp, #53]	; 0x35
    1c28:	ldrb	r3, [sp, #56]	; 0x38
    1c2c:	strb	r2, [sp, #55]	; 0x37
    1c30:	ldrb	r2, [sp, #59]	; 0x3b
    1c34:	strb	r1, [sp, #54]	; 0x36
    1c38:	ldrb	r1, [sp, #58]	; 0x3a
    1c3c:	strb	r2, [sp, #56]	; 0x38
    1c40:	ldrb	r2, [sp, #57]	; 0x39
    1c44:	strb	r1, [sp, #57]	; 0x39
    1c48:	strb	r3, [sp, #59]	; 0x3b
    1c4c:	ldrb	r3, [sp, #63]	; 0x3f
    1c50:	ldrb	r1, [sp, #60]	; 0x3c
    1c54:	strb	r2, [sp, #58]	; 0x3a
    1c58:	ldrb	r2, [sp, #62]	; 0x3e
    1c5c:	strb	r3, [sp, #60]	; 0x3c
    1c60:	ldrb	r3, [sp, #61]	; 0x3d
    1c64:	strb	r2, [sp, #61]	; 0x3d
    1c68:	strb	r1, [sp, #63]	; 0x3f
    1c6c:	strb	r3, [sp, #62]	; 0x3e
    1c70:	ldrb	r3, [sp, #111]	; 0x6f
    1c74:	ldrb	r2, [sp, #104]	; 0x68
    1c78:	ldr	r1, [sp, #40]	; 0x28
    1c7c:	strb	r3, [sp, #104]	; 0x68
    1c80:	ldrb	r3, [sp, #110]	; 0x6e
    1c84:	strb	r2, [sp, #111]	; 0x6f
    1c88:	ldrb	r2, [sp, #109]	; 0x6d
    1c8c:	cmp	r1, #32
    1c90:	ldrb	r1, [sp, #105]	; 0x69
    1c94:	strb	r3, [sp, #105]	; 0x69
    1c98:	ldrb	r3, [sp, #106]	; 0x6a
    1c9c:	strb	r2, [sp, #106]	; 0x6a
    1ca0:	ldrb	r2, [sp, #107]	; 0x6b
    1ca4:	strb	r3, [sp, #109]	; 0x6d
    1ca8:	ldrb	r3, [sp, #67]	; 0x43
    1cac:	strb	r1, [sp, #110]	; 0x6e
    1cb0:	ldrb	r1, [sp, #108]	; 0x6c
    1cb4:	strb	r1, [sp, #107]	; 0x6b
    1cb8:	ldrb	r1, [sp, #64]	; 0x40
    1cbc:	strb	r3, [sp, #64]	; 0x40
    1cc0:	ldrb	r3, [sp, #65]	; 0x41
    1cc4:	strb	r2, [sp, #108]	; 0x6c
    1cc8:	ldrb	r2, [sp, #66]	; 0x42
    1ccc:	strb	r2, [sp, #65]	; 0x41
    1cd0:	strb	r3, [sp, #66]	; 0x42
    1cd4:	strb	r1, [sp, #67]	; 0x43
    1cd8:	beq	20d8 <read_VDR.part.2+0x850>
    1cdc:	ldr	r3, [sp, #480]	; 0x1e0
    1ce0:	cmp	r3, #0
    1ce4:	bne	1db0 <read_VDR.part.2+0x528>
    1ce8:	ldr	r3, [sl, #80]	; 0x50
    1cec:	str	r3, [sp, #68]	; 0x44
    1cf0:	cmp	r3, #0
    1cf4:	ble	1e14 <read_VDR.part.2+0x58c>
    1cf8:	mov	r8, r4
    1cfc:	mov	fp, r5
    1d00:	add	r7, sp, #148	; 0x94
    1d04:	mov	r9, #0
    1d08:	mov	r4, #4
    1d0c:	mov	r5, #0
    1d10:	b	1d4c <read_VDR.part.2+0x4c4>
    1d14:	ldrb	r3, [r7, #3]
    1d18:	adds	r8, r8, #4
    1d1c:	add	r7, r7, #4
    1d20:	adc	fp, fp, #0
    1d24:	ldr	r2, [sp, #68]	; 0x44
    1d28:	ldrb	r1, [r7, #-4]
    1d2c:	strb	r3, [r7, #-4]
    1d30:	ldrb	r3, [r7, #-3]
    1d34:	cmp	r9, r2
    1d38:	ldrb	r2, [r7, #-2]
    1d3c:	strb	r1, [r7, #-1]
    1d40:	strb	r2, [r7, #-3]
    1d44:	strb	r3, [r7, #-2]
    1d48:	bge	1e14 <read_VDR.part.2+0x58c>
    1d4c:	mov	r2, r8
    1d50:	mov	r3, fp
    1d54:	strd	r4, [sp]
    1d58:	str	r7, [sp, #8]
    1d5c:	add	r9, r9, #1
    1d60:	ldr	r0, [sl, #52]	; 0x34
    1d64:	bl	0 <read_bytes>
    1d68:	cmp	r0, #0
    1d6c:	bge	1d14 <read_VDR.part.2+0x48c>
    1d70:	mvn	r0, #0
    1d74:	add	sp, sp, #444	; 0x1bc
    1d78:	ldrd	r4, [sp]
    1d7c:	ldrd	r6, [sp, #8]
    1d80:	ldrd	r8, [sp, #16]
    1d84:	ldrd	sl, [sp, #24]
    1d88:	add	sp, sp, #32
    1d8c:	pop	{pc}		; (ldr pc, [sp], #4)
    1d90:	cmp	r2, #8
    1d94:	beq	1910 <read_VDR.part.2+0x88>
    1d98:	movw	r1, #0
    1d9c:	movt	r1, #0
    1da0:	movw	r0, #65236	; 0xfed4
    1da4:	movt	r0, #65535	; 0xffff
    1da8:	bl	0 <coda_set_error>
    1dac:	b	1d70 <read_VDR.part.2+0x4e8>
    1db0:	add	r1, sp, #68	; 0x44
    1db4:	mov	r0, #0
    1db8:	str	fp, [sp]
    1dbc:	adds	r2, r4, #340	; 0x154
    1dc0:	adc	r3, r5, #0
    1dc4:	strd	r0, [sp, #4]
    1dc8:	ldr	r0, [sl, #52]	; 0x34
    1dcc:	bl	0 <read_bytes>
    1dd0:	cmp	r0, #0
    1dd4:	blt	1d70 <read_VDR.part.2+0x4e8>
    1dd8:	ldrb	r3, [sp, #71]	; 0x47
    1ddc:	ldrb	r1, [sp, #68]	; 0x44
    1de0:	ldrb	r2, [sp, #70]	; 0x46
    1de4:	strb	r3, [sp, #68]	; 0x44
    1de8:	ldrb	r3, [sp, #69]	; 0x45
    1dec:	strb	r2, [sp, #69]	; 0x45
    1df0:	strb	r1, [sp, #71]	; 0x47
    1df4:	strb	r3, [sp, #70]	; 0x46
    1df8:	ldr	r3, [sp, #68]	; 0x44
    1dfc:	cmp	r3, #0
    1e00:	blt	2150 <read_VDR.part.2+0x8c8>
    1e04:	cmp	r3, #8
    1e08:	bgt	2130 <read_VDR.part.2+0x8a8>
    1e0c:	cmp	r3, #0
    1e10:	bne	1f28 <read_VDR.part.2+0x6a0>
    1e14:	ldr	r3, [sp, #48]	; 0x30
    1e18:	ands	r7, r3, #1
    1e1c:	and	r3, r3, #4
    1e20:	bne	1e30 <read_VDR.part.2+0x5a8>
    1e24:	ldr	r2, [sp, #44]	; 0x2c
    1e28:	cmp	r2, #0
    1e2c:	bne	210c <read_VDR.part.2+0x884>
    1e30:	cmp	r3, #0
    1e34:	beq	1e50 <read_VDR.part.2+0x5c8>
    1e38:	ldrd	r4, [sp, #104]	; 0x68
    1e3c:	mvn	r3, #0
    1e40:	mvn	r2, #0
    1e44:	cmp	r5, r3
    1e48:	cmpeq	r4, r2
    1e4c:	bne	1fb8 <read_VDR.part.2+0x730>
    1e50:	ldr	r3, [sl, #20]
    1e54:	ldr	r2, [sp, #60]	; 0x3c
    1e58:	ldr	r3, [r3, #16]
    1e5c:	cmp	r3, r2
    1e60:	bne	20a0 <read_VDR.part.2+0x818>
    1e64:	ldr	r2, [sl, #72]	; 0x48
    1e68:	add	r4, sp, #76	; 0x4c
    1e6c:	add	r5, sp, #148	; 0x94
    1e70:	ldr	r3, [sp, #480]	; 0x1e0
    1e74:	str	r5, [sp, #4]
    1e78:	ldr	lr, [sp, #56]	; 0x38
    1e7c:	str	r2, [sp, #8]
    1e80:	mov	r2, r7
    1e84:	ldr	ip, [sp, #52]	; 0x34
    1e88:	cmp	r3, #0
    1e8c:	ldrd	r0, [sp, #40]	; 0x28
    1e90:	str	lr, [sp, #12]
    1e94:	addne	lr, sp, #116	; 0x74
    1e98:	addeq	lr, sl, #84	; 0x54
    1e9c:	ldr	r3, [sp, #68]	; 0x44
    1ea0:	str	lr, [sp]
    1ea4:	str	ip, [sp, #16]
    1ea8:	str	r4, [sp, #20]
    1eac:	bl	0 <coda_cdf_variable_new>
    1eb0:	cmp	r0, #0
    1eb4:	mov	r4, r0
    1eb8:	beq	1d70 <read_VDR.part.2+0x4e8>
    1ebc:	mov	r3, #1
    1ec0:	mov	r2, r0
    1ec4:	ldr	r0, [sl, #20]
    1ec8:	mov	r1, r6
    1ecc:	bl	0 <coda_mem_record_add_field>
    1ed0:	subs	r3, r0, #0
    1ed4:	bne	2094 <read_VDR.part.2+0x80c>
    1ed8:	mvn	r2, #0
    1edc:	mov	r0, sl
    1ee0:	str	r3, [sp]
    1ee4:	ldr	r1, [sp, #76]	; 0x4c
    1ee8:	str	r2, [sp, #4]
    1eec:	ldrd	r2, [sp, #88]	; 0x58
    1ef0:	bl	bb4 <read_VXR>
    1ef4:	cmp	r0, #0
    1ef8:	bne	1d70 <read_VDR.part.2+0x4e8>
    1efc:	ldrd	r2, [sp, #80]	; 0x50
    1f00:	orrs	r1, r2, r3
    1f04:	beq	1d74 <read_VDR.part.2+0x4ec>
    1f08:	ldr	r1, [sp, #480]	; 0x1e0
    1f0c:	mov	r0, sl
    1f10:	str	r1, [sp]
    1f14:	bl	1888 <read_VDR.part.2>
    1f18:	adds	r0, r0, #0
    1f1c:	movne	r0, #1
    1f20:	rsb	r0, r0, #0
    1f24:	b	1d74 <read_VDR.part.2+0x4ec>
    1f28:	adds	r3, r4, #344	; 0x158
    1f2c:	mov	r9, fp
    1f30:	mov	r8, #0
    1f34:	add	r4, sp, #116	; 0x74
    1f38:	str	r3, [sp, #24]
    1f3c:	adc	r3, r5, #0
    1f40:	str	r3, [sp, #28]
    1f44:	ldrd	r2, [sp, #24]
    1f48:	mov	r5, r2
    1f4c:	mov	fp, r3
    1f50:	b	1f8c <read_VDR.part.2+0x704>
    1f54:	ldrb	r2, [r4, #3]
    1f58:	adds	r5, r5, #4
    1f5c:	add	r4, r4, #4
    1f60:	adc	fp, fp, #0
    1f64:	ldr	r3, [sp, #68]	; 0x44
    1f68:	ldrb	r0, [r4, #-4]
    1f6c:	strb	r2, [r4, #-4]
    1f70:	ldrb	r1, [r4, #-2]
    1f74:	cmp	r7, r3
    1f78:	ldrb	r2, [r4, #-3]
    1f7c:	strb	r1, [r4, #-3]
    1f80:	strb	r0, [r4, #-1]
    1f84:	strb	r2, [r4, #-2]
    1f88:	bge	2080 <read_VDR.part.2+0x7f8>
    1f8c:	mov	r2, r5
    1f90:	mov	r3, fp
    1f94:	str	r9, [sp]
    1f98:	str	r8, [sp, #4]
    1f9c:	add	r7, r7, #1
    1fa0:	str	r4, [sp, #8]
    1fa4:	ldr	r0, [sl, #52]	; 0x34
    1fa8:	bl	0 <read_bytes>
    1fac:	cmp	r0, #0
    1fb0:	bge	1f54 <read_VDR.part.2+0x6cc>
    1fb4:	b	1d70 <read_VDR.part.2+0x4e8>
    1fb8:	orrs	r3, r4, r5
    1fbc:	beq	1e50 <read_VDR.part.2+0x5c8>
    1fc0:	add	r1, sp, #72	; 0x48
    1fc4:	mov	r8, #4
    1fc8:	ldr	r0, [sl, #52]	; 0x34
    1fcc:	mov	r9, #0
    1fd0:	adds	r2, r4, #8
    1fd4:	adc	r3, r5, #0
    1fd8:	strd	r8, [sp]
    1fdc:	str	r1, [sp, #8]
    1fe0:	bl	0 <read_bytes>
    1fe4:	cmp	r0, #0
    1fe8:	blt	1d70 <read_VDR.part.2+0x4e8>
    1fec:	ldrb	r3, [sp, #75]	; 0x4b
    1ff0:	ldrb	r2, [sp, #74]	; 0x4a
    1ff4:	ldrb	r1, [sp, #72]	; 0x48
    1ff8:	strb	r3, [sp, #72]	; 0x48
    1ffc:	ldrb	r3, [sp, #73]	; 0x49
    2000:	strb	r2, [sp, #73]	; 0x49
    2004:	strb	r3, [sp, #74]	; 0x4a
    2008:	strb	r1, [sp, #75]	; 0x4b
    200c:	ldr	r2, [sp, #72]	; 0x48
    2010:	cmp	r2, #11
    2014:	bne	20f0 <read_VDR.part.2+0x868>
    2018:	add	r1, sp, #76	; 0x4c
    201c:	adds	r2, r4, #12
    2020:	strd	r8, [sp]
    2024:	adc	r3, r5, #0
    2028:	ldr	r0, [sl, #52]	; 0x34
    202c:	str	r1, [sp, #8]
    2030:	bl	0 <read_bytes>
    2034:	cmp	r0, #0
    2038:	blt	1d70 <read_VDR.part.2+0x4e8>
    203c:	ldrb	r3, [sp, #79]	; 0x4f
    2040:	ldrb	r2, [sp, #78]	; 0x4e
    2044:	ldrb	r1, [sp, #76]	; 0x4c
    2048:	strb	r3, [sp, #76]	; 0x4c
    204c:	ldrb	r3, [sp, #77]	; 0x4d
    2050:	strb	r2, [sp, #77]	; 0x4d
    2054:	strb	r3, [sp, #78]	; 0x4e
    2058:	strb	r1, [sp, #79]	; 0x4f
    205c:	ldr	r2, [sp, #76]	; 0x4c
    2060:	cmp	r2, #5
    2064:	beq	1e50 <read_VDR.part.2+0x5c8>
    2068:	mvn	r0, #199	; 0xc7
    206c:	movw	r1, #0
    2070:	movt	r1, #0
    2074:	bl	0 <coda_set_error>
    2078:	mvn	r0, #0
    207c:	b	1d74 <read_VDR.part.2+0x4ec>
    2080:	ldrd	r4, [sp, #24]
    2084:	lsl	r2, r3, #2
    2088:	adds	r4, r4, r2
    208c:	adc	r5, r5, r2, asr #31
    2090:	b	1cf0 <read_VDR.part.2+0x468>
    2094:	mov	r0, r4
    2098:	bl	0 <coda_cdf_type_delete>
    209c:	b	1d70 <read_VDR.part.2+0x4e8>
    20a0:	movw	r1, #0
    20a4:	movt	r1, #0
    20a8:	movw	r0, #65236	; 0xfed4
    20ac:	movt	r0, #65535	; 0xffff
    20b0:	bl	0 <coda_set_error>
    20b4:	mvn	r0, #0
    20b8:	b	1d74 <read_VDR.part.2+0x4ec>
    20bc:	movw	r1, #0
    20c0:	movt	r1, #0
    20c4:	movw	r0, #65236	; 0xfed4
    20c8:	movt	r0, #65535	; 0xffff
    20cc:	bl	0 <coda_set_error>
    20d0:	mvn	r0, #0
    20d4:	b	1d74 <read_VDR.part.2+0x4ec>
    20d8:	mvn	r0, #199	; 0xc7
    20dc:	movw	r1, #0
    20e0:	movt	r1, #0
    20e4:	bl	0 <coda_set_error>
    20e8:	mvn	r0, #0
    20ec:	b	1d74 <read_VDR.part.2+0x4ec>
    20f0:	movw	r1, #0
    20f4:	movt	r1, #0
    20f8:	movw	r0, #65236	; 0xfed4
    20fc:	movt	r0, #65535	; 0xffff
    2100:	bl	0 <coda_set_error>
    2104:	mvn	r0, #0
    2108:	b	1d74 <read_VDR.part.2+0x4ec>
    210c:	add	r3, r2, #1
    2110:	movw	r1, #0
    2114:	movt	r1, #0
    2118:	mov	r2, r6
    211c:	movw	r0, #65236	; 0xfed4
    2120:	movt	r0, #65535	; 0xffff
    2124:	bl	0 <coda_set_error>
    2128:	mvn	r0, #0
    212c:	b	1d74 <read_VDR.part.2+0x4ec>
    2130:	mov	r2, r6
    2134:	movw	r1, #0
    2138:	movt	r1, #0
    213c:	movw	r0, #65236	; 0xfed4
    2140:	movt	r0, #65535	; 0xffff
    2144:	bl	0 <coda_set_error>
    2148:	mvn	r0, #0
    214c:	b	1d74 <read_VDR.part.2+0x4ec>
    2150:	mov	r2, r6
    2154:	movw	r1, #0
    2158:	movt	r1, #0
    215c:	movw	r0, #65236	; 0xfed4
    2160:	movt	r0, #65535	; 0xffff
    2164:	bl	0 <coda_set_error>
    2168:	mvn	r0, #0
    216c:	b	1d74 <read_VDR.part.2+0x4ec>

00002170 <coda_cdf_close>:
    2170:	str	r4, [sp, #-8]!
    2174:	mov	r4, r0
    2178:	ldr	r0, [r0]
    217c:	str	lr, [sp, #4]
    2180:	cmp	r0, #0
    2184:	beq	218c <coda_cdf_close+0x1c>
    2188:	bl	0 <free>
    218c:	ldr	r0, [r4, #20]
    2190:	cmp	r0, #0
    2194:	beq	219c <coda_cdf_close+0x2c>
    2198:	bl	0 <coda_dynamic_type_delete>
    219c:	ldr	r0, [r4, #48]	; 0x30
    21a0:	cmp	r0, #0
    21a4:	beq	21ac <coda_cdf_close+0x3c>
    21a8:	bl	0 <free>
    21ac:	ldr	r0, [r4, #52]	; 0x34
    21b0:	cmp	r0, #0
    21b4:	beq	21bc <coda_cdf_close+0x4c>
    21b8:	bl	0 <coda_bin_close>
    21bc:	mov	r0, r4
    21c0:	bl	0 <free>
    21c4:	ldr	r4, [sp]
    21c8:	add	sp, sp, #4
    21cc:	mov	r0, #0
    21d0:	pop	{pc}		; (ldr pc, [sp], #4)

000021d4 <coda_cdf_reopen>:
    21d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
    21d8:	strd	r6, [sp, #8]
    21dc:	strd	r8, [sp, #16]
    21e0:	strd	sl, [sp, #24]
    21e4:	mov	fp, r0
    21e8:	mov	r0, #120	; 0x78
    21ec:	str	lr, [sp, #32]
    21f0:	sub	sp, sp, #148	; 0x94
    21f4:	bl	0 <malloc>
    21f8:	subs	r4, r0, #0
    21fc:	beq	2a4c <coda_cdf_reopen+0x878>
    2200:	ldr	r5, [fp]
    2204:	mov	r1, #0
    2208:	mov	sl, #5
    220c:	mov	r6, #0
    2210:	mov	r7, #0
    2214:	ldr	r0, [r5]
    2218:	ldrd	r2, [r5, #8]
    221c:	str	r1, [r4]
    2220:	strd	r2, [r4, #8]
    2224:	str	sl, [r4, #16]
    2228:	str	r1, [r4, #20]
    222c:	str	r1, [r4, #24]
    2230:	str	r1, [r4, #28]
    2234:	str	r1, [r4, #32]
    2238:	strd	r6, [r4, #40]	; 0x28
    223c:	str	r1, [r4, #48]	; 0x30
    2240:	str	r5, [r4, #52]	; 0x34
    2244:	bl	0 <strdup>
    2248:	cmp	r0, #0
    224c:	str	r0, [r4]
    2250:	beq	2a20 <coda_cdf_reopen+0x84c>
    2254:	add	r1, sp, #88	; 0x58
    2258:	mov	r8, #8
    225c:	mov	r9, #0
    2260:	mov	r2, r6
    2264:	mov	r3, r7
    2268:	mov	r0, r5
    226c:	strd	r8, [sp]
    2270:	str	r1, [sp, #8]
    2274:	bl	0 <read_bytes>
    2278:	cmp	r0, #0
    227c:	blt	2968 <coda_cdf_reopen+0x794>
    2280:	ldrb	r3, [sp, #91]	; 0x5b
    2284:	movw	r1, #24578	; 0x6002
    2288:	movt	r1, #52722	; 0xcdf2
    228c:	movw	r2, #65535	; 0xffff
    2290:	ldrb	ip, [sp, #88]	; 0x58
    2294:	ldrb	r0, [sp, #90]	; 0x5a
    2298:	strb	r3, [sp, #88]	; 0x58
    229c:	ldrb	r3, [sp, #89]	; 0x59
    22a0:	strb	r0, [sp, #89]	; 0x59
    22a4:	ldrb	r0, [sp, #92]	; 0x5c
    22a8:	strb	ip, [sp, #91]	; 0x5b
    22ac:	ldrb	ip, [sp, #95]	; 0x5f
    22b0:	strb	r3, [sp, #90]	; 0x5a
    22b4:	ldr	r3, [sp, #88]	; 0x58
    22b8:	strb	ip, [sp, #92]	; 0x5c
    22bc:	ldrb	ip, [sp, #94]	; 0x5e
    22c0:	strb	r0, [sp, #95]	; 0x5f
    22c4:	cmp	r3, r1
    22c8:	cmpne	r3, r2
    22cc:	ldrb	r0, [sp, #93]	; 0x5d
    22d0:	movweq	r1, #0
    22d4:	moveq	r5, #1
    22d8:	movne	r5, #0
    22dc:	movteq	r1, #0
    22e0:	strb	ip, [sp, #93]	; 0x5d
    22e4:	strb	r0, [sp, #94]	; 0x5e
    22e8:	beq	2a08 <coda_cdf_reopen+0x834>
    22ec:	ldr	r0, [sp, #92]	; 0x5c
    22f0:	mov	r1, #1
    22f4:	movt	r1, #52428	; 0xcccc
    22f8:	cmp	r0, r1
    22fc:	beq	2a00 <coda_cdf_reopen+0x82c>
    2300:	mov	r1, #1
    2304:	movt	r1, #52723	; 0xcdf3
    2308:	cmp	r3, r1
    230c:	cmpeq	r0, r2
    2310:	bne	2ae0 <coda_cdf_reopen+0x90c>
    2314:	mov	r0, sl
    2318:	bl	0 <coda_type_record_new>
    231c:	subs	r6, r0, #0
    2320:	beq	2968 <coda_cdf_reopen+0x794>
    2324:	mov	r1, r5
    2328:	bl	0 <coda_mem_record_new>
    232c:	cmp	r0, #0
    2330:	str	r0, [r4, #20]
    2334:	beq	2a94 <coda_cdf_reopen+0x8c0>
    2338:	mov	r0, r6
    233c:	mov	r7, #0
    2340:	bl	0 <coda_type_release>
    2344:	mov	r6, #4
    2348:	add	r1, sp, #20
    234c:	mov	r2, #16
    2350:	mov	r3, #0
    2354:	strd	r6, [sp]
    2358:	str	r1, [sp, #8]
    235c:	ldr	r0, [r4, #52]	; 0x34
    2360:	bl	0 <read_bytes>
    2364:	cmp	r0, #0
    2368:	blt	2968 <coda_cdf_reopen+0x794>
    236c:	ldrb	r3, [sp, #23]
    2370:	ldrb	r2, [sp, #22]
    2374:	ldrb	r1, [sp, #20]
    2378:	strb	r3, [sp, #20]
    237c:	ldrb	r3, [sp, #21]
    2380:	strb	r2, [sp, #21]
    2384:	strb	r3, [sp, #22]
    2388:	strb	r1, [sp, #23]
    238c:	ldr	r2, [sp, #20]
    2390:	cmp	r2, #1
    2394:	bne	29d0 <coda_cdf_reopen+0x7fc>
    2398:	add	r1, sp, #48	; 0x30
    239c:	mov	r6, #8
    23a0:	mov	r7, #0
    23a4:	mov	r2, #20
    23a8:	mov	r3, #0
    23ac:	strd	r6, [sp]
    23b0:	str	r1, [sp, #8]
    23b4:	ldr	r0, [r4, #52]	; 0x34
    23b8:	bl	0 <read_bytes>
    23bc:	cmp	r0, #0
    23c0:	blt	2968 <coda_cdf_reopen+0x794>
    23c4:	add	r1, r4, #56	; 0x38
    23c8:	mov	r6, #4
    23cc:	mov	r7, #0
    23d0:	mov	r2, #28
    23d4:	mov	r3, #0
    23d8:	strd	r6, [sp]
    23dc:	str	r1, [sp, #8]
    23e0:	ldr	r0, [r4, #52]	; 0x34
    23e4:	bl	0 <read_bytes>
    23e8:	cmp	r0, #0
    23ec:	blt	2968 <coda_cdf_reopen+0x794>
    23f0:	add	r1, r4, #60	; 0x3c
    23f4:	mov	r2, #32
    23f8:	strd	r6, [sp]
    23fc:	mov	r3, #0
    2400:	str	r1, [sp, #8]
    2404:	ldr	r0, [r4, #52]	; 0x34
    2408:	bl	0 <read_bytes>
    240c:	cmp	r0, #0
    2410:	blt	2968 <coda_cdf_reopen+0x794>
    2414:	add	r1, sp, #24
    2418:	mov	r2, #36	; 0x24
    241c:	strd	r6, [sp]
    2420:	mov	r3, #0
    2424:	str	r1, [sp, #8]
    2428:	ldr	r0, [r4, #52]	; 0x34
    242c:	bl	0 <read_bytes>
    2430:	cmp	r0, #0
    2434:	blt	2968 <coda_cdf_reopen+0x794>
    2438:	add	r1, sp, #28
    243c:	mov	r2, #40	; 0x28
    2440:	strd	r6, [sp]
    2444:	mov	r3, #0
    2448:	str	r1, [sp, #8]
    244c:	ldr	r0, [r4, #52]	; 0x34
    2450:	bl	0 <read_bytes>
    2454:	cmp	r0, #0
    2458:	blt	2968 <coda_cdf_reopen+0x794>
    245c:	add	r1, r4, #64	; 0x40
    2460:	mov	r2, #52	; 0x34
    2464:	strd	r6, [sp]
    2468:	mov	r3, #0
    246c:	str	r1, [sp, #8]
    2470:	ldr	r0, [r4, #52]	; 0x34
    2474:	bl	0 <read_bytes>
    2478:	cmp	r0, #0
    247c:	blt	2968 <coda_cdf_reopen+0x794>
    2480:	ldrb	r3, [sp, #55]	; 0x37
    2484:	ldrb	r1, [sp, #48]	; 0x30
    2488:	ldrb	r2, [sp, #54]	; 0x36
    248c:	strb	r3, [sp, #48]	; 0x30
    2490:	ldrb	r3, [sp, #49]	; 0x31
    2494:	strb	r2, [sp, #49]	; 0x31
    2498:	ldrb	r2, [sp, #50]	; 0x32
    249c:	strb	r3, [sp, #54]	; 0x36
    24a0:	ldrb	r3, [sp, #52]	; 0x34
    24a4:	strb	r1, [sp, #55]	; 0x37
    24a8:	ldrb	r1, [sp, #53]	; 0x35
    24ac:	strb	r1, [sp, #50]	; 0x32
    24b0:	ldrb	r1, [sp, #51]	; 0x33
    24b4:	strb	r3, [sp, #51]	; 0x33
    24b8:	ldrb	r3, [r4, #56]	; 0x38
    24bc:	strb	r2, [sp, #53]	; 0x35
    24c0:	ldrb	r2, [r4, #59]	; 0x3b
    24c4:	strb	r1, [sp, #52]	; 0x34
    24c8:	ldrb	r1, [r4, #58]	; 0x3a
    24cc:	strb	r2, [r4, #56]	; 0x38
    24d0:	ldrb	r2, [r4, #57]	; 0x39
    24d4:	strb	r1, [r4, #57]	; 0x39
    24d8:	strb	r3, [r4, #59]	; 0x3b
    24dc:	ldrb	r3, [r4, #63]	; 0x3f
    24e0:	ldrb	r1, [r4, #60]	; 0x3c
    24e4:	strb	r2, [r4, #58]	; 0x3a
    24e8:	ldrb	r2, [r4, #62]	; 0x3e
    24ec:	strb	r3, [r4, #60]	; 0x3c
    24f0:	ldrb	r3, [r4, #61]	; 0x3d
    24f4:	strb	r2, [r4, #61]	; 0x3d
    24f8:	strb	r1, [r4, #63]	; 0x3f
    24fc:	strb	r3, [r4, #62]	; 0x3e
    2500:	ldrb	r2, [sp, #27]
    2504:	ldrb	r1, [sp, #24]
    2508:	ldrb	r3, [sp, #26]
    250c:	strb	r2, [sp, #24]
    2510:	ldrb	r2, [sp, #25]
    2514:	ldrb	ip, [sp, #30]
    2518:	strb	r1, [sp, #27]
    251c:	ldrb	r1, [sp, #31]
    2520:	strb	r3, [sp, #25]
    2524:	ldrb	r0, [sp, #29]
    2528:	strb	r2, [sp, #26]
    252c:	ldrb	r3, [sp, #28]
    2530:	strb	r1, [sp, #28]
    2534:	ldrb	r1, [r4, #67]	; 0x43
    2538:	strb	ip, [sp, #29]
    253c:	ldr	r2, [sp, #24]
    2540:	strb	r0, [sp, #30]
    2544:	ldrb	ip, [r4, #64]	; 0x40
    2548:	strb	r1, [r4, #64]	; 0x40
    254c:	ldrb	r0, [r4, #66]	; 0x42
    2550:	strb	r3, [sp, #31]
    2554:	sub	r3, r2, #1
    2558:	ldrb	r1, [r4, #65]	; 0x41
    255c:	strb	r0, [r4, #65]	; 0x41
    2560:	strb	ip, [r4, #67]	; 0x43
    2564:	strb	r1, [r4, #66]	; 0x42
    2568:	cmp	r3, #15
    256c:	ldrls	pc, [pc, r3, lsl #2]
    2570:	b	2984 <coda_cdf_reopen+0x7b0>
    2574:	.word	0x00002978
    2578:	.word	0x00002978
    257c:	.word	0x00002958
    2580:	.word	0x000025b4
    2584:	.word	0x00002978
    2588:	.word	0x000025b4
    258c:	.word	0x00002978
    2590:	.word	0x00002984
    2594:	.word	0x00002978
    2598:	.word	0x00002984
    259c:	.word	0x00002978
    25a0:	.word	0x00002978
    25a4:	.word	0x000025b4
    25a8:	.word	0x00002958
    25ac:	.word	0x00002958
    25b0:	.word	0x000025b4
    25b4:	mov	r3, #1
    25b8:	str	r3, [r4, #68]	; 0x44
    25bc:	ldr	r3, [sp, #28]
    25c0:	mvn	r2, r3
    25c4:	tst	r3, #2
    25c8:	and	r2, r2, #1
    25cc:	str	r2, [r4, #72]	; 0x48
    25d0:	beq	2a80 <coda_cdf_reopen+0x8ac>
    25d4:	and	r3, r3, #12
    25d8:	ldr	r5, [sp, #48]	; 0x30
    25dc:	add	r1, sp, #32
    25e0:	sub	r3, r3, #12
    25e4:	mov	r8, #4
    25e8:	ldr	sl, [sp, #52]	; 0x34
    25ec:	clz	r3, r3
    25f0:	mov	r9, #0
    25f4:	lsr	r3, r3, #5
    25f8:	adds	r2, r5, #8
    25fc:	str	r3, [r4, #76]	; 0x4c
    2600:	adc	r3, sl, #0
    2604:	strd	r8, [sp]
    2608:	str	r1, [sp, #8]
    260c:	ldr	r0, [r4, #52]	; 0x34
    2610:	bl	0 <read_bytes>
    2614:	cmp	r0, #0
    2618:	blt	2968 <coda_cdf_reopen+0x794>
    261c:	ldrb	r3, [sp, #35]	; 0x23
    2620:	ldrb	r2, [sp, #34]	; 0x22
    2624:	ldrb	r1, [sp, #32]
    2628:	strb	r3, [sp, #32]
    262c:	ldrb	r3, [sp, #33]	; 0x21
    2630:	strb	r2, [sp, #33]	; 0x21
    2634:	strb	r3, [sp, #34]	; 0x22
    2638:	strb	r1, [sp, #35]	; 0x23
    263c:	ldr	r2, [sp, #32]
    2640:	cmp	r2, #2
    2644:	bne	29e8 <coda_cdf_reopen+0x814>
    2648:	add	r1, sp, #56	; 0x38
    264c:	mov	r6, #8
    2650:	mov	r7, #0
    2654:	adds	r2, r5, #12
    2658:	adc	r3, sl, #0
    265c:	strd	r6, [sp]
    2660:	str	r1, [sp, #8]
    2664:	ldr	r0, [r4, #52]	; 0x34
    2668:	bl	0 <read_bytes>
    266c:	cmp	r0, #0
    2670:	blt	2968 <coda_cdf_reopen+0x794>
    2674:	add	r1, sp, #64	; 0x40
    2678:	adds	r2, r5, #20
    267c:	strd	r6, [sp]
    2680:	adc	r3, sl, #0
    2684:	str	r1, [sp, #8]
    2688:	ldr	r0, [r4, #52]	; 0x34
    268c:	bl	0 <read_bytes>
    2690:	cmp	r0, #0
    2694:	blt	2968 <coda_cdf_reopen+0x794>
    2698:	add	r1, sp, #72	; 0x48
    269c:	adds	r2, r5, #28
    26a0:	strd	r6, [sp]
    26a4:	adc	r3, sl, #0
    26a8:	str	r1, [sp, #8]
    26ac:	ldr	r0, [r4, #52]	; 0x34
    26b0:	bl	0 <read_bytes>
    26b4:	cmp	r0, #0
    26b8:	blt	2968 <coda_cdf_reopen+0x794>
    26bc:	add	r1, sp, #80	; 0x50
    26c0:	adds	r2, r5, #36	; 0x24
    26c4:	strd	r6, [sp]
    26c8:	adc	r3, sl, #0
    26cc:	str	r1, [sp, #8]
    26d0:	ldr	r0, [r4, #52]	; 0x34
    26d4:	bl	0 <read_bytes>
    26d8:	cmp	r0, #0
    26dc:	blt	2968 <coda_cdf_reopen+0x794>
    26e0:	add	r1, sp, #36	; 0x24
    26e4:	adds	r2, r5, #44	; 0x2c
    26e8:	strd	r8, [sp]
    26ec:	adc	r3, sl, #0
    26f0:	str	r1, [sp, #8]
    26f4:	ldr	r0, [r4, #52]	; 0x34
    26f8:	bl	0 <read_bytes>
    26fc:	cmp	r0, #0
    2700:	blt	2968 <coda_cdf_reopen+0x794>
    2704:	add	r1, sp, #40	; 0x28
    2708:	adds	r2, r5, #48	; 0x30
    270c:	strd	r8, [sp]
    2710:	adc	r3, sl, #0
    2714:	str	r1, [sp, #8]
    2718:	ldr	r0, [r4, #52]	; 0x34
    271c:	bl	0 <read_bytes>
    2720:	cmp	r0, #0
    2724:	blt	2968 <coda_cdf_reopen+0x794>
    2728:	add	r1, r4, #80	; 0x50
    272c:	adds	r2, r5, #56	; 0x38
    2730:	strd	r8, [sp]
    2734:	adc	r3, sl, #0
    2738:	str	r1, [sp, #8]
    273c:	ldr	r0, [r4, #52]	; 0x34
    2740:	bl	0 <read_bytes>
    2744:	cmp	r0, #0
    2748:	blt	2968 <coda_cdf_reopen+0x794>
    274c:	add	ip, sp, #44	; 0x2c
    2750:	mov	r0, #4
    2754:	mov	r1, #0
    2758:	adds	r2, r5, #60	; 0x3c
    275c:	adc	r3, sl, #0
    2760:	strd	r0, [sp]
    2764:	str	ip, [sp, #8]
    2768:	ldr	r0, [r4, #52]	; 0x34
    276c:	bl	0 <read_bytes>
    2770:	cmp	r0, #0
    2774:	blt	2968 <coda_cdf_reopen+0x794>
    2778:	ldrb	r3, [sp, #63]	; 0x3f
    277c:	ldrb	r1, [sp, #56]	; 0x38
    2780:	ldrb	r2, [sp, #62]	; 0x3e
    2784:	strb	r3, [sp, #56]	; 0x38
    2788:	ldrb	r3, [sp, #57]	; 0x39
    278c:	strb	r2, [sp, #57]	; 0x39
    2790:	ldrb	r2, [sp, #58]	; 0x3a
    2794:	strb	r3, [sp, #62]	; 0x3e
    2798:	ldrb	r3, [sp, #60]	; 0x3c
    279c:	strb	r1, [sp, #63]	; 0x3f
    27a0:	ldrb	r1, [sp, #61]	; 0x3d
    27a4:	strb	r1, [sp, #58]	; 0x3a
    27a8:	ldrb	r1, [sp, #59]	; 0x3b
    27ac:	strb	r3, [sp, #59]	; 0x3b
    27b0:	ldrb	r3, [sp, #64]	; 0x40
    27b4:	strb	r2, [sp, #61]	; 0x3d
    27b8:	ldrb	r2, [sp, #71]	; 0x47
    27bc:	strb	r1, [sp, #60]	; 0x3c
    27c0:	ldrb	r1, [sp, #70]	; 0x46
    27c4:	strb	r2, [sp, #64]	; 0x40
    27c8:	ldrb	r2, [sp, #65]	; 0x41
    27cc:	strb	r1, [sp, #65]	; 0x41
    27d0:	strb	r3, [sp, #71]	; 0x47
    27d4:	ldrb	r3, [sp, #69]	; 0x45
    27d8:	ldrb	r1, [sp, #66]	; 0x42
    27dc:	strb	r3, [sp, #66]	; 0x42
    27e0:	ldrb	r3, [sp, #67]	; 0x43
    27e4:	strb	r2, [sp, #70]	; 0x46
    27e8:	ldrb	r2, [sp, #68]	; 0x44
    27ec:	strb	r1, [sp, #69]	; 0x45
    27f0:	strb	r2, [sp, #67]	; 0x43
    27f4:	strb	r3, [sp, #68]	; 0x44
    27f8:	ldrb	r3, [sp, #79]	; 0x4f
    27fc:	ldrb	r1, [sp, #72]	; 0x48
    2800:	ldrb	r2, [sp, #78]	; 0x4e
    2804:	strb	r3, [sp, #72]	; 0x48
    2808:	ldrb	r3, [sp, #73]	; 0x49
    280c:	strb	r2, [sp, #73]	; 0x49
    2810:	ldrb	r2, [sp, #74]	; 0x4a
    2814:	strb	r3, [sp, #78]	; 0x4e
    2818:	ldrb	r3, [sp, #76]	; 0x4c
    281c:	strb	r1, [sp, #79]	; 0x4f
    2820:	ldrb	r1, [sp, #77]	; 0x4d
    2824:	strb	r1, [sp, #74]	; 0x4a
    2828:	ldrb	r1, [sp, #75]	; 0x4b
    282c:	strb	r3, [sp, #75]	; 0x4b
    2830:	ldrb	r3, [sp, #80]	; 0x50
    2834:	strb	r2, [sp, #77]	; 0x4d
    2838:	ldrb	r2, [sp, #87]	; 0x57
    283c:	strb	r1, [sp, #76]	; 0x4c
    2840:	ldrb	r1, [sp, #86]	; 0x56
    2844:	strb	r2, [sp, #80]	; 0x50
    2848:	ldrb	r2, [sp, #81]	; 0x51
    284c:	strb	r1, [sp, #81]	; 0x51
    2850:	strb	r3, [sp, #87]	; 0x57
    2854:	ldrb	r3, [sp, #85]	; 0x55
    2858:	ldrb	r1, [sp, #82]	; 0x52
    285c:	strb	r3, [sp, #82]	; 0x52
    2860:	ldrb	r3, [sp, #83]	; 0x53
    2864:	strb	r2, [sp, #86]	; 0x56
    2868:	ldrb	r2, [sp, #84]	; 0x54
    286c:	strb	r1, [sp, #85]	; 0x55
    2870:	strb	r2, [sp, #83]	; 0x53
    2874:	strb	r3, [sp, #84]	; 0x54
    2878:	ldrb	r3, [sp, #39]	; 0x27
    287c:	ldrb	r1, [sp, #36]	; 0x24
    2880:	ldrb	r2, [sp, #38]	; 0x26
    2884:	strb	r3, [sp, #36]	; 0x24
    2888:	ldrb	r3, [sp, #37]	; 0x25
    288c:	strb	r2, [sp, #37]	; 0x25
    2890:	ldrb	r2, [sp, #40]	; 0x28
    2894:	strb	r3, [sp, #38]	; 0x26
    2898:	ldrb	r3, [sp, #42]	; 0x2a
    289c:	strb	r1, [sp, #39]	; 0x27
    28a0:	ldrb	r1, [sp, #43]	; 0x2b
    28a4:	strb	r1, [sp, #40]	; 0x28
    28a8:	ldrb	r1, [sp, #41]	; 0x29
    28ac:	strb	r3, [sp, #41]	; 0x29
    28b0:	ldrb	r3, [r4, #80]	; 0x50
    28b4:	strb	r2, [sp, #43]	; 0x2b
    28b8:	ldrb	r2, [r4, #83]	; 0x53
    28bc:	strb	r1, [sp, #42]	; 0x2a
    28c0:	ldrb	r1, [r4, #82]	; 0x52
    28c4:	strb	r2, [r4, #80]	; 0x50
    28c8:	ldrb	r2, [r4, #81]	; 0x51
    28cc:	strb	r1, [r4, #81]	; 0x51
    28d0:	strb	r3, [r4, #83]	; 0x53
    28d4:	ldrb	r3, [sp, #47]	; 0x2f
    28d8:	ldrb	r1, [sp, #44]	; 0x2c
    28dc:	strb	r2, [r4, #82]	; 0x52
    28e0:	ldrb	r2, [sp, #46]	; 0x2e
    28e4:	strb	r3, [sp, #44]	; 0x2c
    28e8:	ldrb	r3, [sp, #45]	; 0x2d
    28ec:	strb	r2, [sp, #45]	; 0x2d
    28f0:	strb	r1, [sp, #47]	; 0x2f
    28f4:	strb	r3, [sp, #46]	; 0x2e
    28f8:	ldrd	r0, [sp, #80]	; 0x50
    28fc:	ldrd	r2, [r4, #8]
    2900:	cmp	r3, r1
    2904:	cmpeq	r2, r0
    2908:	bne	2aac <coda_cdf_reopen+0x8d8>
    290c:	ldrd	r2, [sp, #56]	; 0x38
    2910:	orrs	r1, r2, r3
    2914:	bne	29b4 <coda_cdf_reopen+0x7e0>
    2918:	ldrd	r2, [sp, #64]	; 0x40
    291c:	orrs	r1, r2, r3
    2920:	bne	2998 <coda_cdf_reopen+0x7c4>
    2924:	mov	r0, r4
    2928:	ldrd	r2, [sp, #72]	; 0x48
    292c:	bl	1438 <read_ADR>
    2930:	cmp	r0, #0
    2934:	streq	r4, [fp]
    2938:	bne	2968 <coda_cdf_reopen+0x794>
    293c:	add	sp, sp, #148	; 0x94
    2940:	ldrd	r4, [sp]
    2944:	ldrd	r6, [sp, #8]
    2948:	ldrd	r8, [sp, #16]
    294c:	ldrd	sl, [sp, #24]
    2950:	add	sp, sp, #32
    2954:	pop	{pc}		; (ldr pc, [sp], #4)
    2958:	movw	r1, #0
    295c:	movt	r1, #0
    2960:	mvn	r0, #199	; 0xc7
    2964:	bl	0 <coda_set_error>
    2968:	mov	r0, r4
    296c:	bl	2170 <coda_cdf_close>
    2970:	mvn	r0, #0
    2974:	b	293c <coda_cdf_reopen+0x768>
    2978:	mov	r3, #0
    297c:	str	r3, [r4, #68]	; 0x44
    2980:	b	25bc <coda_cdf_reopen+0x3e8>
    2984:	movw	r1, #0
    2988:	movt	r1, #0
    298c:	mvn	r0, #199	; 0xc7
    2990:	bl	0 <coda_set_error>
    2994:	b	2968 <coda_cdf_reopen+0x794>
    2998:	mov	r1, #1
    299c:	mov	r0, r4
    29a0:	str	r1, [sp]
    29a4:	bl	1888 <read_VDR.part.2>
    29a8:	cmp	r0, #0
    29ac:	beq	2924 <coda_cdf_reopen+0x750>
    29b0:	b	2968 <coda_cdf_reopen+0x794>
    29b4:	mov	r1, #0
    29b8:	mov	r0, r4
    29bc:	str	r1, [sp]
    29c0:	bl	1888 <read_VDR.part.2>
    29c4:	cmp	r0, #0
    29c8:	beq	2918 <coda_cdf_reopen+0x744>
    29cc:	b	2968 <coda_cdf_reopen+0x794>
    29d0:	movw	r1, #0
    29d4:	movt	r1, #0
    29d8:	movw	r0, #65236	; 0xfed4
    29dc:	movt	r0, #65535	; 0xffff
    29e0:	bl	0 <coda_set_error>
    29e4:	b	2968 <coda_cdf_reopen+0x794>
    29e8:	movw	r1, #0
    29ec:	movt	r1, #0
    29f0:	movw	r0, #65236	; 0xfed4
    29f4:	movt	r0, #65535	; 0xffff
    29f8:	bl	0 <coda_set_error>
    29fc:	b	2968 <coda_cdf_reopen+0x794>
    2a00:	movw	r1, #0
    2a04:	movt	r1, #0
    2a08:	mvn	r0, #199	; 0xc7
    2a0c:	bl	0 <coda_set_error>
    2a10:	mov	r0, r4
    2a14:	bl	2170 <coda_cdf_close>
    2a18:	mvn	r0, #0
    2a1c:	b	293c <coda_cdf_reopen+0x768>
    2a20:	movw	r3, #1335	; 0x537
    2a24:	mvn	r0, #0
    2a28:	movw	r2, #0
    2a2c:	movt	r2, #0
    2a30:	movw	r1, #0
    2a34:	movt	r1, #0
    2a38:	bl	0 <coda_set_error>
    2a3c:	mov	r0, r4
    2a40:	bl	2170 <coda_cdf_close>
    2a44:	mvn	r0, #0
    2a48:	b	293c <coda_cdf_reopen+0x768>
    2a4c:	movw	r0, #1315	; 0x523
    2a50:	mov	r2, #120	; 0x78
    2a54:	movw	r3, #0
    2a58:	movt	r3, #0
    2a5c:	movw	r1, #0
    2a60:	movt	r1, #0
    2a64:	str	r0, [sp]
    2a68:	mvn	r0, #0
    2a6c:	bl	0 <coda_set_error>
    2a70:	ldr	r0, [fp]
    2a74:	bl	0 <coda_close>
    2a78:	mvn	r0, #0
    2a7c:	b	293c <coda_cdf_reopen+0x768>
    2a80:	movw	r1, #0
    2a84:	movt	r1, #0
    2a88:	mvn	r0, #199	; 0xc7
    2a8c:	bl	0 <coda_set_error>
    2a90:	b	2968 <coda_cdf_reopen+0x794>
    2a94:	mov	r0, r4
    2a98:	bl	2170 <coda_cdf_close>
    2a9c:	mov	r0, r6
    2aa0:	bl	0 <coda_type_release>
    2aa4:	mvn	r0, #0
    2aa8:	b	293c <coda_cdf_reopen+0x768>
    2aac:	add	r2, sp, #96	; 0x60
    2ab0:	bl	0 <coda_str64>
    2ab4:	add	r2, sp, #120	; 0x78
    2ab8:	ldrd	r0, [r4, #8]
    2abc:	bl	0 <coda_str64>
    2ac0:	add	r3, sp, #120	; 0x78
    2ac4:	add	r2, sp, #96	; 0x60
    2ac8:	movw	r1, #0
    2acc:	movt	r1, #0
    2ad0:	movw	r0, #65236	; 0xfed4
    2ad4:	movt	r0, #65535	; 0xffff
    2ad8:	bl	0 <coda_set_error>
    2adc:	b	2968 <coda_cdf_reopen+0x794>
    2ae0:	movw	r1, #0
    2ae4:	movt	r1, #0
    2ae8:	ldr	r3, [pc, #12]	; 2afc <coda_cdf_reopen+0x928>
    2aec:	movw	r0, #0
    2af0:	movt	r0, #0
    2af4:	movw	r2, #1362	; 0x552
    2af8:	bl	0 <__assert_fail>
    2afc:	.word	0x00000034
