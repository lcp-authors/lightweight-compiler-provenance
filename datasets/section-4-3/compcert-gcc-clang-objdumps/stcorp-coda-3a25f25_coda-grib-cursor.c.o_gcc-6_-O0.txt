
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-grib-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
       0:	push	{fp, lr}
       4:	add	fp, sp, #4
       8:	sub	sp, sp, #96	; 0x60
       c:	str	r0, [fp, #-80]	; 0xffffffb0
      10:	strd	r2, [fp, #-92]	; 0xffffffa4
      14:	ldr	r3, [fp, #-80]	; 0xffffffb0
      18:	ldr	r3, [r3, #48]	; 0x30
      1c:	cmp	r3, #0
      20:	beq	fc <read_bytes+0xfc>
      24:	ldrd	r0, [fp, #-92]	; 0xffffffa4
      28:	ldrd	r2, [fp, #4]
      2c:	adds	r2, r2, r0
      30:	adc	r3, r3, r1
      34:	ldr	r1, [fp, #-80]	; 0xffffffb0
      38:	ldrd	r0, [r1, #40]	; 0x28
      3c:	cmp	r3, r1
      40:	cmpeq	r2, r0
      44:	bls	d8 <read_bytes+0xd8>
      48:	ldr	r3, [fp, #-80]	; 0xffffffb0
      4c:	ldr	r3, [r3, #16]
      50:	cmp	r3, #0
      54:	beq	68 <read_bytes+0x68>
      58:	ldr	r3, [fp, #-80]	; 0xffffffb0
      5c:	ldr	r3, [r3, #16]
      60:	cmp	r3, #1
      64:	bne	7c <read_bytes+0x7c>
      68:	ldr	r1, [pc, #348]	; 1cc <read_bytes+0x1cc>
      6c:	mvn	r0, #300	; 0x12c
      70:	bl	0 <coda_set_error>
      74:	mvn	r3, #0
      78:	b	1c0 <read_bytes+0x1c0>
      7c:	sub	r3, fp, #28
      80:	mov	r2, r3
      84:	ldrd	r0, [fp, #4]
      88:	bl	0 <coda_str64>
      8c:	sub	r3, fp, #52	; 0x34
      90:	mov	r2, r3
      94:	ldrd	r0, [fp, #-92]	; 0xffffffa4
      98:	bl	0 <coda_str64>
      9c:	ldr	r3, [fp, #-80]	; 0xffffffb0
      a0:	ldrd	r0, [r3, #40]	; 0x28
      a4:	sub	r3, fp, #76	; 0x4c
      a8:	mov	r2, r3
      ac:	bl	0 <coda_str64>
      b0:	sub	r1, fp, #52	; 0x34
      b4:	sub	r2, fp, #28
      b8:	sub	r3, fp, #76	; 0x4c
      bc:	str	r3, [sp]
      c0:	mov	r3, r1
      c4:	ldr	r1, [pc, #260]	; 1d0 <read_bytes+0x1d0>
      c8:	mvn	r0, #300	; 0x12c
      cc:	bl	0 <coda_set_error>
      d0:	mvn	r3, #0
      d4:	b	1c0 <read_bytes+0x1c0>
      d8:	ldr	r3, [fp, #-80]	; 0xffffffb0
      dc:	ldr	r2, [r3, #48]	; 0x30
      e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
      e4:	add	r3, r2, r3
      e8:	ldr	r2, [fp, #4]
      ec:	mov	r1, r3
      f0:	ldr	r0, [fp, #12]
      f4:	bl	0 <memcpy>
      f8:	b	1bc <read_bytes+0x1bc>
      fc:	ldr	r3, [fp, #-80]	; 0xffffffb0
     100:	ldr	r3, [r3, #16]
     104:	cmp	r3, #0
     108:	beq	130 <read_bytes+0x130>
     10c:	ldr	r3, [fp, #-80]	; 0xffffffb0
     110:	ldr	r3, [r3, #16]
     114:	cmp	r3, #1
     118:	beq	130 <read_bytes+0x130>
     11c:	ldr	r3, [pc, #176]	; 1d4 <read_bytes+0x1d4>
     120:	mov	r2, #83	; 0x53
     124:	ldr	r1, [pc, #172]	; 1d8 <read_bytes+0x1d8>
     128:	ldr	r0, [pc, #172]	; 1dc <read_bytes+0x1dc>
     12c:	bl	0 <__assert_fail>
     130:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     134:	ldrd	r2, [fp, #4]
     138:	adds	r2, r2, r0
     13c:	adc	r3, r3, r1
     140:	ldr	r1, [fp, #-80]	; 0xffffffb0
     144:	ldrd	r0, [r1, #8]
     148:	cmp	r3, r1
     14c:	cmpeq	r2, r0
     150:	bls	168 <read_bytes+0x168>
     154:	ldr	r1, [pc, #112]	; 1cc <read_bytes+0x1cc>
     158:	mvn	r0, #300	; 0x12c
     15c:	bl	0 <coda_set_error>
     160:	mvn	r3, #0
     164:	b	1c0 <read_bytes+0x1c0>
     168:	ldr	r3, [fp, #-80]	; 0xffffffb0
     16c:	ldr	r0, [r3, #56]	; 0x38
     170:	ldr	r2, [fp, #4]
     174:	ldr	r3, [fp, #-92]	; 0xffffffa4
     178:	ldr	r1, [fp, #12]
     17c:	bl	0 <pread>
     180:	mov	r3, r0
     184:	cmp	r3, #0
     188:	bge	1bc <read_bytes+0x1bc>
     18c:	bl	0 <__errno_location>
     190:	mov	r3, r0
     194:	ldr	r3, [r3]
     198:	mov	r0, r3
     19c:	bl	0 <strerror>
     1a0:	mov	r3, r0
     1a4:	mov	r2, r3
     1a8:	ldr	r1, [pc, #48]	; 1e0 <read_bytes+0x1e0>
     1ac:	mvn	r0, #21
     1b0:	bl	0 <coda_set_error>
     1b4:	mvn	r3, #0
     1b8:	b	1c0 <read_bytes+0x1c0>
     1bc:	mov	r3, #0
     1c0:	mov	r0, r3
     1c4:	sub	sp, fp, #4
     1c8:	pop	{fp, pc}
     1cc:	.word	0x00000000
     1d0:	.word	0x0000002c
     1d4:	.word	0x00000240
     1d8:	.word	0x00000068
     1dc:	.word	0x000000b8
     1e0:	.word	0x00000108

000001e4 <read_bits>:
     1e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     1e8:	add	fp, sp, #28
     1ec:	sub	sp, sp, #104	; 0x68
     1f0:	str	r0, [fp, #-80]	; 0xffffffb0
     1f4:	strd	r2, [fp, #-92]	; 0xffffffa4
     1f8:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     1fc:	mov	r2, #7
     200:	mov	r3, #0
     204:	and	r0, r0, r2
     208:	and	r1, r1, r3
     20c:	ldrd	r2, [fp, #4]
     210:	adds	r2, r2, r0
     214:	adc	r3, r3, r1
     218:	strd	r2, [fp, #-44]	; 0xffffffd4
     21c:	ldr	r3, [fp, #-44]	; 0xffffffd4
     220:	rsb	r3, r3, #0
     224:	and	r3, r3, #7
     228:	str	r3, [fp, #-48]	; 0xffffffd0
     22c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
     230:	cmp	r2, #9
     234:	sbcs	r3, r3, #0
     238:	bge	318 <read_bits+0x134>
     23c:	ldrd	r2, [fp, #-92]	; 0xffffffa4
     240:	lsr	r1, r2, #3
     244:	str	r1, [fp, #-100]	; 0xffffff9c
     248:	ldr	r1, [fp, #-100]	; 0xffffff9c
     24c:	orr	r1, r1, r3, lsl #29
     250:	str	r1, [fp, #-100]	; 0xffffff9c
     254:	asr	r3, r3, #3
     258:	str	r3, [fp, #-96]	; 0xffffffa0
     25c:	ldr	r3, [fp, #12]
     260:	str	r3, [sp, #8]
     264:	mov	r2, #1
     268:	mov	r3, #0
     26c:	strd	r2, [sp]
     270:	ldrd	r2, [fp, #-100]	; 0xffffff9c
     274:	ldr	r0, [fp, #-80]	; 0xffffffb0
     278:	bl	0 <read_bytes>
     27c:	mov	r3, r0
     280:	cmp	r3, #0
     284:	beq	290 <read_bits+0xac>
     288:	mvn	r3, #0
     28c:	b	798 <read_bits+0x5b4>
     290:	ldr	r3, [fp, #-48]	; 0xffffffd0
     294:	cmp	r3, #0
     298:	beq	2bc <read_bits+0xd8>
     29c:	ldr	r3, [fp, #12]
     2a0:	ldrb	r3, [r3]
     2a4:	mov	r2, r3
     2a8:	ldr	r3, [fp, #-48]	; 0xffffffd0
     2ac:	asr	r3, r2, r3
     2b0:	uxtb	r2, r3
     2b4:	ldr	r3, [fp, #12]
     2b8:	strb	r2, [r3]
     2bc:	ldrd	r2, [fp, #4]
     2c0:	mov	r0, #7
     2c4:	mov	r1, #0
     2c8:	and	r2, r2, r0
     2cc:	and	r3, r3, r1
     2d0:	orrs	r3, r2, r3
     2d4:	beq	794 <read_bits+0x5b0>
     2d8:	ldr	r3, [fp, #12]
     2dc:	ldrb	r3, [r3]
     2e0:	sxtb	r2, r3
     2e4:	ldr	r3, [fp, #4]
     2e8:	mov	r1, #1
     2ec:	lsl	r3, r1, r3
     2f0:	uxtb	r3, r3
     2f4:	sub	r3, r3, #1
     2f8:	uxtb	r3, r3
     2fc:	sxtb	r3, r3
     300:	and	r3, r3, r2
     304:	sxtb	r3, r3
     308:	uxtb	r2, r3
     30c:	ldr	r3, [fp, #12]
     310:	strb	r2, [r3]
     314:	b	794 <read_bits+0x5b0>
     318:	ldr	r3, [fp, #-48]	; 0xffffffd0
     31c:	cmp	r3, #0
     320:	bne	488 <read_bits+0x2a4>
     324:	ldrd	r2, [fp, #4]
     328:	mov	r0, #7
     32c:	mov	r1, #0
     330:	and	r2, r2, r0
     334:	and	r3, r3, r1
     338:	orrs	r3, r2, r3
     33c:	beq	41c <read_bits+0x238>
     340:	ldrd	r2, [fp, #-92]	; 0xffffffa4
     344:	lsr	r1, r2, #3
     348:	str	r1, [fp, #-108]	; 0xffffff94
     34c:	ldr	r1, [fp, #-108]	; 0xffffff94
     350:	orr	r1, r1, r3, lsl #29
     354:	str	r1, [fp, #-108]	; 0xffffff94
     358:	asr	r3, r3, #3
     35c:	str	r3, [fp, #-104]	; 0xffffff98
     360:	sub	r3, fp, #65	; 0x41
     364:	str	r3, [sp, #8]
     368:	mov	r2, #1
     36c:	mov	r3, #0
     370:	strd	r2, [sp]
     374:	ldrd	r2, [fp, #-108]	; 0xffffff94
     378:	ldr	r0, [fp, #-80]	; 0xffffffb0
     37c:	bl	0 <read_bytes>
     380:	mov	r3, r0
     384:	cmp	r3, #0
     388:	beq	394 <read_bits+0x1b0>
     38c:	mvn	r3, #0
     390:	b	798 <read_bits+0x5b4>
     394:	ldr	r3, [fp, #4]
     398:	and	r3, r3, #7
     39c:	str	r3, [fp, #-52]	; 0xffffffcc
     3a0:	mov	r2, #1
     3a4:	ldr	r3, [fp, #-52]	; 0xffffffcc
     3a8:	lsl	r3, r2, r3
     3ac:	uxtb	r3, r3
     3b0:	sub	r3, r3, #1
     3b4:	uxtb	r3, r3
     3b8:	sxtb	r2, r3
     3bc:	ldrb	r3, [fp, #-65]	; 0xffffffbf
     3c0:	sxtb	r3, r3
     3c4:	and	r3, r3, r2
     3c8:	sxtb	r3, r3
     3cc:	uxtb	r2, r3
     3d0:	ldr	r3, [fp, #12]
     3d4:	strb	r2, [r3]
     3d8:	ldr	r3, [fp, #12]
     3dc:	add	r3, r3, #1
     3e0:	str	r3, [fp, #12]
     3e4:	ldr	r3, [fp, #-52]	; 0xffffffcc
     3e8:	mov	r2, r3
     3ec:	mov	r3, #0
     3f0:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     3f4:	adds	r2, r2, r0
     3f8:	adc	r3, r3, r1
     3fc:	strd	r2, [fp, #-92]	; 0xffffffa4
     400:	ldr	r3, [fp, #-52]	; 0xffffffcc
     404:	mov	r2, r3
     408:	mov	r3, #0
     40c:	ldrd	r0, [fp, #4]
     410:	subs	r2, r0, r2
     414:	sbc	r3, r1, r3
     418:	strd	r2, [fp, #4]
     41c:	ldrd	r2, [fp, #4]
     420:	cmp	r2, #1
     424:	sbcs	r3, r3, #0
     428:	blt	794 <read_bits+0x5b0>
     42c:	ldrd	r2, [fp, #-92]	; 0xffffffa4
     430:	lsr	r1, r2, #3
     434:	str	r1, [fp, #-116]	; 0xffffff8c
     438:	ldr	r1, [fp, #-116]	; 0xffffff8c
     43c:	orr	r1, r1, r3, lsl #29
     440:	str	r1, [fp, #-116]	; 0xffffff8c
     444:	asr	r3, r3, #3
     448:	str	r3, [fp, #-112]	; 0xffffff90
     44c:	ldrd	r2, [fp, #4]
     450:	lsr	r4, r2, #3
     454:	orr	r4, r4, r3, lsl #29
     458:	asr	r5, r3, #3
     45c:	ldr	r3, [fp, #12]
     460:	str	r3, [sp, #8]
     464:	strd	r4, [sp]
     468:	ldrd	r2, [fp, #-116]	; 0xffffff8c
     46c:	ldr	r0, [fp, #-80]	; 0xffffffb0
     470:	bl	0 <read_bytes>
     474:	mov	r3, r0
     478:	cmp	r3, #0
     47c:	beq	794 <read_bits+0x5b0>
     480:	mvn	r3, #0
     484:	b	798 <read_bits+0x5b4>
     488:	ldrd	r0, [fp, #4]
     48c:	mov	r2, #24
     490:	mov	r3, #0
     494:	bl	0 <__aeabi_ldivmod>
     498:	orrs	r3, r2, r3
     49c:	beq	784 <read_bits+0x5a0>
     4a0:	ldrd	r0, [fp, #4]
     4a4:	mov	r2, #24
     4a8:	mov	r3, #0
     4ac:	bl	0 <__aeabi_ldivmod>
     4b0:	mov	r3, r2
     4b4:	str	r3, [fp, #-56]	; 0xffffffc8
     4b8:	ldr	r3, [fp, #-92]	; 0xffffffa4
     4bc:	and	r2, r3, #7
     4c0:	ldr	r3, [fp, #-56]	; 0xffffffc8
     4c4:	add	r3, r2, r3
     4c8:	lsr	r3, r3, #3
     4cc:	ldrb	r2, [fp, #-92]	; 0xffffffa4
     4d0:	and	r2, r2, #7
     4d4:	uxtb	r1, r2
     4d8:	ldr	r2, [fp, #-56]	; 0xffffffc8
     4dc:	uxtb	r2, r2
     4e0:	add	r2, r1, r2
     4e4:	uxtb	r2, r2
     4e8:	and	r2, r2, #7
     4ec:	cmp	r2, #0
     4f0:	movne	r2, #1
     4f4:	moveq	r2, #0
     4f8:	uxtb	r2, r2
     4fc:	add	r3, r3, r2
     500:	str	r3, [fp, #-60]	; 0xffffffc4
     504:	ldr	r3, [fp, #-56]	; 0xffffffc8
     508:	lsr	r3, r3, #3
     50c:	ldr	r2, [fp, #-56]	; 0xffffffc8
     510:	uxtb	r2, r2
     514:	and	r2, r2, #7
     518:	cmp	r2, #0
     51c:	movne	r2, #1
     520:	moveq	r2, #0
     524:	uxtb	r2, r2
     528:	add	r3, r3, r2
     52c:	str	r3, [fp, #-64]	; 0xffffffc0
     530:	ldrd	r2, [fp, #-92]	; 0xffffffa4
     534:	lsr	r8, r2, #3
     538:	orr	r8, r8, r3, lsl #29
     53c:	asr	r9, r3, #3
     540:	ldr	r3, [fp, #-60]	; 0xffffffc4
     544:	mov	r2, r3
     548:	mov	r3, #0
     54c:	sub	r1, fp, #72	; 0x48
     550:	str	r1, [sp, #8]
     554:	strd	r2, [sp]
     558:	mov	r2, r8
     55c:	mov	r3, r9
     560:	ldr	r0, [fp, #-80]	; 0xffffffb0
     564:	bl	0 <read_bytes>
     568:	mov	r3, r0
     56c:	cmp	r3, #0
     570:	beq	57c <read_bits+0x398>
     574:	mvn	r3, #0
     578:	b	798 <read_bits+0x5b4>
     57c:	mov	r3, #0
     580:	str	r3, [fp, #-76]	; 0xffffffb4
     584:	mov	r3, #0
     588:	str	r3, [fp, #-32]	; 0xffffffe0
     58c:	b	5c0 <read_bits+0x3dc>
     590:	ldr	r3, [fp, #-32]	; 0xffffffe0
     594:	rsb	r3, r3, #3
     598:	sub	r1, fp, #72	; 0x48
     59c:	ldr	r2, [fp, #-32]	; 0xffffffe0
     5a0:	add	r2, r1, r2
     5a4:	ldrb	r2, [r2]
     5a8:	sub	r1, fp, #28
     5ac:	add	r3, r1, r3
     5b0:	strb	r2, [r3, #-48]	; 0xffffffd0
     5b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     5b8:	add	r3, r3, #1
     5bc:	str	r3, [fp, #-32]	; 0xffffffe0
     5c0:	ldr	r2, [fp, #-32]	; 0xffffffe0
     5c4:	ldr	r3, [fp, #-60]	; 0xffffffc4
     5c8:	cmp	r2, r3
     5cc:	bcc	590 <read_bits+0x3ac>
     5d0:	ldr	r1, [fp, #-76]	; 0xffffffb4
     5d4:	ldr	r2, [fp, #-60]	; 0xffffffc4
     5d8:	mov	r3, r2
     5dc:	lsl	r3, r3, #29
     5e0:	sub	r3, r3, r2
     5e4:	lsl	r3, r3, #3
     5e8:	mov	r2, r3
     5ec:	ldr	r3, [fp, #-48]	; 0xffffffd0
     5f0:	add	r3, r2, r3
     5f4:	add	r3, r3, #32
     5f8:	lsr	r3, r1, r3
     5fc:	mov	r1, #1
     600:	ldr	r2, [fp, #-56]	; 0xffffffc8
     604:	lsl	r2, r1, r2
     608:	sub	r2, r2, #1
     60c:	and	r3, r3, r2
     610:	str	r3, [fp, #-76]	; 0xffffffb4
     614:	mov	r3, #0
     618:	str	r3, [fp, #-32]	; 0xffffffe0
     61c:	b	658 <read_bits+0x474>
     620:	ldr	r2, [fp, #12]
     624:	ldr	r3, [fp, #-32]	; 0xffffffe0
     628:	add	r3, r2, r3
     62c:	ldr	r1, [fp, #-64]	; 0xffffffc0
     630:	ldr	r2, [fp, #-32]	; 0xffffffe0
     634:	sub	r2, r1, r2
     638:	sub	r2, r2, #1
     63c:	sub	r1, fp, #28
     640:	add	r2, r1, r2
     644:	ldrb	r2, [r2, #-48]	; 0xffffffd0
     648:	strb	r2, [r3]
     64c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     650:	add	r3, r3, #1
     654:	str	r3, [fp, #-32]	; 0xffffffe0
     658:	ldr	r2, [fp, #-32]	; 0xffffffe0
     65c:	ldr	r3, [fp, #-64]	; 0xffffffc0
     660:	cmp	r2, r3
     664:	bcc	620 <read_bits+0x43c>
     668:	ldr	r2, [fp, #12]
     66c:	ldr	r3, [fp, #-64]	; 0xffffffc0
     670:	add	r3, r2, r3
     674:	str	r3, [fp, #12]
     678:	ldr	r3, [fp, #-56]	; 0xffffffc8
     67c:	mov	r2, r3
     680:	mov	r3, #0
     684:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     688:	adds	r2, r2, r0
     68c:	adc	r3, r3, r1
     690:	strd	r2, [fp, #-92]	; 0xffffffa4
     694:	ldr	r3, [fp, #-56]	; 0xffffffc8
     698:	mov	r2, r3
     69c:	mov	r3, #0
     6a0:	ldrd	r0, [fp, #4]
     6a4:	subs	r2, r0, r2
     6a8:	sbc	r3, r1, r3
     6ac:	strd	r2, [fp, #4]
     6b0:	b	784 <read_bits+0x5a0>
     6b4:	ldrd	r2, [fp, #-92]	; 0xffffffa4
     6b8:	lsr	r6, r2, #3
     6bc:	orr	r6, r6, r3, lsl #29
     6c0:	asr	r7, r3, #3
     6c4:	sub	r3, fp, #72	; 0x48
     6c8:	str	r3, [sp, #8]
     6cc:	mov	r2, #4
     6d0:	mov	r3, #0
     6d4:	strd	r2, [sp]
     6d8:	mov	r2, r6
     6dc:	mov	r3, r7
     6e0:	ldr	r0, [fp, #-80]	; 0xffffffb0
     6e4:	bl	0 <read_bytes>
     6e8:	mov	r3, r0
     6ec:	cmp	r3, #0
     6f0:	beq	6fc <read_bits+0x518>
     6f4:	mvn	r3, #0
     6f8:	b	798 <read_bits+0x5b4>
     6fc:	ldrb	r3, [fp, #-69]	; 0xffffffbb
     700:	strb	r3, [fp, #-76]	; 0xffffffb4
     704:	ldrb	r3, [fp, #-70]	; 0xffffffba
     708:	strb	r3, [fp, #-75]	; 0xffffffb5
     70c:	ldrb	r3, [fp, #-71]	; 0xffffffb9
     710:	strb	r3, [fp, #-74]	; 0xffffffb6
     714:	ldrb	r3, [fp, #-72]	; 0xffffffb8
     718:	strb	r3, [fp, #-73]	; 0xffffffb7
     71c:	ldr	r2, [fp, #-76]	; 0xffffffb4
     720:	ldr	r3, [fp, #-48]	; 0xffffffd0
     724:	lsr	r3, r2, r3
     728:	str	r3, [fp, #-76]	; 0xffffffb4
     72c:	ldrb	r2, [fp, #-74]	; 0xffffffb6
     730:	ldr	r3, [fp, #12]
     734:	strb	r2, [r3]
     738:	ldr	r3, [fp, #12]
     73c:	add	r3, r3, #1
     740:	ldrb	r2, [fp, #-75]	; 0xffffffb5
     744:	strb	r2, [r3]
     748:	ldr	r3, [fp, #12]
     74c:	add	r3, r3, #2
     750:	ldrb	r2, [fp, #-76]	; 0xffffffb4
     754:	strb	r2, [r3]
     758:	ldr	r3, [fp, #12]
     75c:	add	r3, r3, #3
     760:	str	r3, [fp, #12]
     764:	ldrd	r2, [fp, #-92]	; 0xffffffa4
     768:	adds	r2, r2, #24
     76c:	adc	r3, r3, #0
     770:	strd	r2, [fp, #-92]	; 0xffffffa4
     774:	ldrd	r2, [fp, #4]
     778:	subs	r2, r2, #24
     77c:	sbc	r3, r3, #0
     780:	strd	r2, [fp, #4]
     784:	ldrd	r2, [fp, #4]
     788:	cmp	r2, #1
     78c:	sbcs	r3, r3, #0
     790:	bge	6b4 <read_bits+0x4d0>
     794:	mov	r3, #0
     798:	mov	r0, r3
     79c:	sub	sp, fp, #28
     7a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000007a4 <swap4>:
     7a4:	push	{fp}		; (str fp, [sp, #-4]!)
     7a8:	add	fp, sp, #0
     7ac:	sub	sp, sp, #20
     7b0:	str	r0, [fp, #-16]
     7b4:	ldr	r3, [fp, #-16]
     7b8:	str	r3, [fp, #-8]
     7bc:	ldr	r3, [fp, #-8]
     7c0:	ldrb	r2, [r3]
     7c4:	ldr	r3, [fp, #-8]
     7c8:	add	r3, r3, #3
     7cc:	ldrb	r3, [r3]
     7d0:	eor	r3, r3, r2
     7d4:	uxtb	r2, r3
     7d8:	ldr	r3, [fp, #-8]
     7dc:	strb	r2, [r3]
     7e0:	ldr	r3, [fp, #-8]
     7e4:	add	r3, r3, #3
     7e8:	ldr	r2, [fp, #-8]
     7ec:	ldrb	r1, [r2]
     7f0:	ldr	r2, [fp, #-8]
     7f4:	add	r2, r2, #3
     7f8:	ldrb	r2, [r2]
     7fc:	eor	r2, r2, r1
     800:	uxtb	r2, r2
     804:	strb	r2, [r3]
     808:	ldr	r3, [fp, #-8]
     80c:	ldrb	r2, [r3]
     810:	ldr	r3, [fp, #-8]
     814:	add	r3, r3, #3
     818:	ldrb	r3, [r3]
     81c:	eor	r3, r3, r2
     820:	uxtb	r2, r3
     824:	ldr	r3, [fp, #-8]
     828:	strb	r2, [r3]
     82c:	ldr	r3, [fp, #-8]
     830:	add	r3, r3, #1
     834:	ldr	r2, [fp, #-8]
     838:	add	r2, r2, #1
     83c:	ldrb	r1, [r2]
     840:	ldr	r2, [fp, #-8]
     844:	add	r2, r2, #2
     848:	ldrb	r2, [r2]
     84c:	eor	r2, r2, r1
     850:	uxtb	r2, r2
     854:	strb	r2, [r3]
     858:	ldr	r3, [fp, #-8]
     85c:	add	r3, r3, #2
     860:	ldr	r2, [fp, #-8]
     864:	add	r2, r2, #1
     868:	ldrb	r1, [r2]
     86c:	ldr	r2, [fp, #-8]
     870:	add	r2, r2, #2
     874:	ldrb	r2, [r2]
     878:	eor	r2, r2, r1
     87c:	uxtb	r2, r2
     880:	strb	r2, [r3]
     884:	ldr	r3, [fp, #-8]
     888:	add	r3, r3, #1
     88c:	ldr	r2, [fp, #-8]
     890:	add	r2, r2, #1
     894:	ldrb	r1, [r2]
     898:	ldr	r2, [fp, #-8]
     89c:	add	r2, r2, #2
     8a0:	ldrb	r2, [r2]
     8a4:	eor	r2, r2, r1
     8a8:	uxtb	r2, r2
     8ac:	strb	r2, [r3]
     8b0:	nop			; (mov r0, r0)
     8b4:	add	sp, fp, #0
     8b8:	pop	{fp}		; (ldr fp, [sp], #4)
     8bc:	bx	lr

000008c0 <swap8>:
     8c0:	push	{fp}		; (str fp, [sp, #-4]!)
     8c4:	add	fp, sp, #0
     8c8:	sub	sp, sp, #20
     8cc:	str	r0, [fp, #-16]
     8d0:	ldr	r3, [fp, #-16]
     8d4:	str	r3, [fp, #-8]
     8d8:	ldr	r3, [fp, #-8]
     8dc:	ldrb	r2, [r3]
     8e0:	ldr	r3, [fp, #-8]
     8e4:	add	r3, r3, #7
     8e8:	ldrb	r3, [r3]
     8ec:	eor	r3, r3, r2
     8f0:	uxtb	r2, r3
     8f4:	ldr	r3, [fp, #-8]
     8f8:	strb	r2, [r3]
     8fc:	ldr	r3, [fp, #-8]
     900:	add	r3, r3, #7
     904:	ldr	r2, [fp, #-8]
     908:	ldrb	r1, [r2]
     90c:	ldr	r2, [fp, #-8]
     910:	add	r2, r2, #7
     914:	ldrb	r2, [r2]
     918:	eor	r2, r2, r1
     91c:	uxtb	r2, r2
     920:	strb	r2, [r3]
     924:	ldr	r3, [fp, #-8]
     928:	ldrb	r2, [r3]
     92c:	ldr	r3, [fp, #-8]
     930:	add	r3, r3, #7
     934:	ldrb	r3, [r3]
     938:	eor	r3, r3, r2
     93c:	uxtb	r2, r3
     940:	ldr	r3, [fp, #-8]
     944:	strb	r2, [r3]
     948:	ldr	r3, [fp, #-8]
     94c:	add	r3, r3, #1
     950:	ldr	r2, [fp, #-8]
     954:	add	r2, r2, #1
     958:	ldrb	r1, [r2]
     95c:	ldr	r2, [fp, #-8]
     960:	add	r2, r2, #6
     964:	ldrb	r2, [r2]
     968:	eor	r2, r2, r1
     96c:	uxtb	r2, r2
     970:	strb	r2, [r3]
     974:	ldr	r3, [fp, #-8]
     978:	add	r3, r3, #6
     97c:	ldr	r2, [fp, #-8]
     980:	add	r2, r2, #1
     984:	ldrb	r1, [r2]
     988:	ldr	r2, [fp, #-8]
     98c:	add	r2, r2, #6
     990:	ldrb	r2, [r2]
     994:	eor	r2, r2, r1
     998:	uxtb	r2, r2
     99c:	strb	r2, [r3]
     9a0:	ldr	r3, [fp, #-8]
     9a4:	add	r3, r3, #1
     9a8:	ldr	r2, [fp, #-8]
     9ac:	add	r2, r2, #1
     9b0:	ldrb	r1, [r2]
     9b4:	ldr	r2, [fp, #-8]
     9b8:	add	r2, r2, #6
     9bc:	ldrb	r2, [r2]
     9c0:	eor	r2, r2, r1
     9c4:	uxtb	r2, r2
     9c8:	strb	r2, [r3]
     9cc:	ldr	r3, [fp, #-8]
     9d0:	add	r3, r3, #2
     9d4:	ldr	r2, [fp, #-8]
     9d8:	add	r2, r2, #2
     9dc:	ldrb	r1, [r2]
     9e0:	ldr	r2, [fp, #-8]
     9e4:	add	r2, r2, #5
     9e8:	ldrb	r2, [r2]
     9ec:	eor	r2, r2, r1
     9f0:	uxtb	r2, r2
     9f4:	strb	r2, [r3]
     9f8:	ldr	r3, [fp, #-8]
     9fc:	add	r3, r3, #5
     a00:	ldr	r2, [fp, #-8]
     a04:	add	r2, r2, #2
     a08:	ldrb	r1, [r2]
     a0c:	ldr	r2, [fp, #-8]
     a10:	add	r2, r2, #5
     a14:	ldrb	r2, [r2]
     a18:	eor	r2, r2, r1
     a1c:	uxtb	r2, r2
     a20:	strb	r2, [r3]
     a24:	ldr	r3, [fp, #-8]
     a28:	add	r3, r3, #2
     a2c:	ldr	r2, [fp, #-8]
     a30:	add	r2, r2, #2
     a34:	ldrb	r1, [r2]
     a38:	ldr	r2, [fp, #-8]
     a3c:	add	r2, r2, #5
     a40:	ldrb	r2, [r2]
     a44:	eor	r2, r2, r1
     a48:	uxtb	r2, r2
     a4c:	strb	r2, [r3]
     a50:	ldr	r3, [fp, #-8]
     a54:	add	r3, r3, #3
     a58:	ldr	r2, [fp, #-8]
     a5c:	add	r2, r2, #3
     a60:	ldrb	r1, [r2]
     a64:	ldr	r2, [fp, #-8]
     a68:	add	r2, r2, #4
     a6c:	ldrb	r2, [r2]
     a70:	eor	r2, r2, r1
     a74:	uxtb	r2, r2
     a78:	strb	r2, [r3]
     a7c:	ldr	r3, [fp, #-8]
     a80:	add	r3, r3, #4
     a84:	ldr	r2, [fp, #-8]
     a88:	add	r2, r2, #3
     a8c:	ldrb	r1, [r2]
     a90:	ldr	r2, [fp, #-8]
     a94:	add	r2, r2, #4
     a98:	ldrb	r2, [r2]
     a9c:	eor	r2, r2, r1
     aa0:	uxtb	r2, r2
     aa4:	strb	r2, [r3]
     aa8:	ldr	r3, [fp, #-8]
     aac:	add	r3, r3, #3
     ab0:	ldr	r2, [fp, #-8]
     ab4:	add	r2, r2, #3
     ab8:	ldrb	r1, [r2]
     abc:	ldr	r2, [fp, #-8]
     ac0:	add	r2, r2, #4
     ac4:	ldrb	r2, [r2]
     ac8:	eor	r2, r2, r1
     acc:	uxtb	r2, r2
     ad0:	strb	r2, [r3]
     ad4:	nop			; (mov r0, r0)
     ad8:	add	sp, fp, #0
     adc:	pop	{fp}		; (ldr fp, [sp], #4)
     ae0:	bx	lr

00000ae4 <coda_grib_cursor_set_product>:
     ae4:	push	{fp}		; (str fp, [sp, #-4]!)
     ae8:	add	fp, sp, #0
     aec:	sub	sp, sp, #12
     af0:	str	r0, [fp, #-8]
     af4:	str	r1, [fp, #-12]
     af8:	ldr	r3, [fp, #-8]
     afc:	ldr	r2, [fp, #-12]
     b00:	str	r2, [r3]
     b04:	ldr	r3, [fp, #-8]
     b08:	mov	r2, #1
     b0c:	str	r2, [r3, #4]
     b10:	ldr	r3, [fp, #-12]
     b14:	ldr	r2, [r3, #20]
     b18:	ldr	r3, [fp, #-8]
     b1c:	str	r2, [r3, #8]
     b20:	ldr	r3, [fp, #-8]
     b24:	mvn	r2, #0
     b28:	str	r2, [r3, #12]
     b2c:	ldr	r1, [fp, #-8]
     b30:	mvn	r2, #0
     b34:	mvn	r3, #0
     b38:	strd	r2, [r1, #16]
     b3c:	mov	r3, #0
     b40:	mov	r0, r3
     b44:	add	sp, fp, #0
     b48:	pop	{fp}		; (ldr fp, [sp], #4)
     b4c:	bx	lr

00000b50 <coda_grib_cursor_goto_array_element>:
     b50:	push	{fp, lr}
     b54:	add	fp, sp, #4
     b58:	sub	sp, sp, #24
     b5c:	str	r0, [fp, #-8]
     b60:	str	r1, [fp, #-12]
     b64:	str	r2, [fp, #-16]
     b68:	ldr	r3, [fp, #-12]
     b6c:	cmp	r3, #1
     b70:	beq	b98 <coda_grib_cursor_goto_array_element+0x48>
     b74:	mov	r3, #68	; 0x44
     b78:	str	r3, [sp]
     b7c:	ldr	r3, [pc, #56]	; bbc <coda_grib_cursor_goto_array_element+0x6c>
     b80:	ldr	r2, [fp, #-12]
     b84:	ldr	r1, [pc, #52]	; bc0 <coda_grib_cursor_goto_array_element+0x70>
     b88:	mvn	r0, #105	; 0x69
     b8c:	bl	0 <coda_set_error>
     b90:	mvn	r3, #0
     b94:	b	bb0 <coda_grib_cursor_goto_array_element+0x60>
     b98:	ldr	r3, [fp, #-16]
     b9c:	ldr	r3, [r3]
     ba0:	mov	r1, r3
     ba4:	ldr	r0, [fp, #-8]
     ba8:	bl	bc4 <coda_grib_cursor_goto_array_element_by_index>
     bac:	mov	r3, r0
     bb0:	mov	r0, r3
     bb4:	sub	sp, fp, #4
     bb8:	pop	{fp, pc}
     bbc:	.word	0x00000128
     bc0:	.word	0x00000178

00000bc4 <coda_grib_cursor_goto_array_element_by_index>:
     bc4:	push	{fp, lr}
     bc8:	add	fp, sp, #4
     bcc:	sub	sp, sp, #24
     bd0:	str	r0, [fp, #-16]
     bd4:	str	r1, [fp, #-20]	; 0xffffffec
     bd8:	ldr	r3, [fp, #-16]
     bdc:	ldr	r3, [r3, #4]
     be0:	sub	r3, r3, #1
     be4:	ldr	r2, [fp, #-16]
     be8:	lsl	r3, r3, #4
     bec:	add	r3, r2, r3
     bf0:	ldr	r3, [r3, #8]
     bf4:	str	r3, [fp, #-8]
     bf8:	ldr	r3, [pc, #248]	; cf8 <coda_grib_cursor_goto_array_element_by_index+0x134>
     bfc:	ldr	r3, [pc, r3]
     c00:	bl	0 <__aeabi_read_tp>
     c04:	mov	r2, r0
     c08:	ldr	r3, [r2, r3]
     c0c:	cmp	r3, #0
     c10:	beq	c68 <coda_grib_cursor_goto_array_element_by_index+0xa4>
     c14:	ldr	r3, [fp, #-20]	; 0xffffffec
     c18:	cmp	r3, #0
     c1c:	blt	c34 <coda_grib_cursor_goto_array_element_by_index+0x70>
     c20:	ldr	r3, [fp, #-8]
     c24:	ldr	r2, [r3, #8]
     c28:	ldr	r3, [fp, #-20]	; 0xffffffec
     c2c:	cmp	r2, r3
     c30:	bgt	c68 <coda_grib_cursor_goto_array_element_by_index+0xa4>
     c34:	ldr	r3, [fp, #-8]
     c38:	ldr	r2, [r3, #8]
     c3c:	mov	r3, #84	; 0x54
     c40:	str	r3, [sp, #4]
     c44:	ldr	r3, [pc, #176]	; cfc <coda_grib_cursor_goto_array_element_by_index+0x138>
     c48:	str	r3, [sp]
     c4c:	mov	r3, r2
     c50:	ldr	r2, [fp, #-20]	; 0xffffffec
     c54:	ldr	r1, [pc, #164]	; d00 <coda_grib_cursor_goto_array_element_by_index+0x13c>
     c58:	mvn	r0, #106	; 0x6a
     c5c:	bl	0 <coda_set_error>
     c60:	mvn	r3, #0
     c64:	b	cec <coda_grib_cursor_goto_array_element_by_index+0x128>
     c68:	ldr	r3, [fp, #-16]
     c6c:	ldr	r3, [r3, #4]
     c70:	add	r2, r3, #1
     c74:	ldr	r3, [fp, #-16]
     c78:	str	r2, [r3, #4]
     c7c:	ldr	r3, [fp, #-16]
     c80:	ldr	r3, [r3, #4]
     c84:	sub	r3, r3, #1
     c88:	ldr	r2, [fp, #-8]
     c8c:	ldr	r2, [r2, #12]
     c90:	ldr	r1, [fp, #-16]
     c94:	lsl	r3, r3, #4
     c98:	add	r3, r1, r3
     c9c:	str	r2, [r3, #8]
     ca0:	ldr	r3, [fp, #-16]
     ca4:	ldr	r3, [r3, #4]
     ca8:	sub	r3, r3, #1
     cac:	ldr	r2, [fp, #-16]
     cb0:	lsl	r3, r3, #4
     cb4:	add	r3, r2, r3
     cb8:	ldr	r2, [fp, #-20]	; 0xffffffec
     cbc:	str	r2, [r3, #12]
     cc0:	ldr	r3, [fp, #-16]
     cc4:	ldr	r3, [r3, #4]
     cc8:	sub	r3, r3, #1
     ccc:	ldr	r2, [fp, #-16]
     cd0:	add	r3, r3, #1
     cd4:	lsl	r3, r3, #4
     cd8:	add	r1, r2, r3
     cdc:	mvn	r2, #0
     ce0:	mvn	r3, #0
     ce4:	strd	r2, [r1]
     ce8:	mov	r3, #0
     cec:	mov	r0, r3
     cf0:	sub	sp, fp, #4
     cf4:	pop	{fp, pc}
     cf8:	.word	0x000000f4
     cfc:	.word	0x00000128
     d00:	.word	0x000001c4

00000d04 <coda_grib_cursor_goto_next_array_element>:
     d04:	push	{fp, lr}
     d08:	add	fp, sp, #4
     d0c:	sub	sp, sp, #8
     d10:	str	r0, [fp, #-8]
     d14:	ldr	r3, [fp, #-8]
     d18:	ldr	r3, [r3, #4]
     d1c:	sub	r2, r3, #1
     d20:	ldr	r3, [fp, #-8]
     d24:	str	r2, [r3, #4]
     d28:	ldr	r3, [fp, #-8]
     d2c:	ldr	r3, [r3, #4]
     d30:	ldr	r2, [fp, #-8]
     d34:	lsl	r3, r3, #4
     d38:	add	r3, r2, r3
     d3c:	ldr	r3, [r3, #12]
     d40:	add	r3, r3, #1
     d44:	mov	r1, r3
     d48:	ldr	r0, [fp, #-8]
     d4c:	bl	bc4 <coda_grib_cursor_goto_array_element_by_index>
     d50:	mov	r3, r0
     d54:	cmp	r3, #0
     d58:	beq	d78 <coda_grib_cursor_goto_next_array_element+0x74>
     d5c:	ldr	r3, [fp, #-8]
     d60:	ldr	r3, [r3, #4]
     d64:	add	r2, r3, #1
     d68:	ldr	r3, [fp, #-8]
     d6c:	str	r2, [r3, #4]
     d70:	mvn	r3, #0
     d74:	b	d7c <coda_grib_cursor_goto_next_array_element+0x78>
     d78:	mov	r3, #0
     d7c:	mov	r0, r3
     d80:	sub	sp, fp, #4
     d84:	pop	{fp, pc}

00000d88 <coda_grib_cursor_goto_attributes>:
     d88:	push	{r4, fp, lr}
     d8c:	add	fp, sp, #8
     d90:	sub	sp, sp, #20
     d94:	str	r0, [fp, #-24]	; 0xffffffe8
     d98:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d9c:	ldr	r3, [r3, #4]
     da0:	sub	r3, r3, #1
     da4:	ldr	r2, [fp, #-24]	; 0xffffffe8
     da8:	lsl	r3, r3, #4
     dac:	add	r3, r2, r3
     db0:	ldr	r3, [r3, #8]
     db4:	ldr	r3, [r3, #4]
     db8:	ldr	r3, [r3]
     dbc:	str	r3, [fp, #-16]
     dc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     dc4:	ldr	r3, [r3, #4]
     dc8:	add	r2, r3, #1
     dcc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     dd0:	str	r2, [r3, #4]
     dd4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     dd8:	ldr	r3, [r3, #4]
     ddc:	sub	r4, r3, #1
     de0:	ldr	r0, [fp, #-16]
     de4:	bl	0 <coda_mem_empty_record>
     de8:	mov	r1, r0
     dec:	ldr	r2, [fp, #-24]	; 0xffffffe8
     df0:	lsl	r3, r4, #4
     df4:	add	r3, r2, r3
     df8:	str	r1, [r3, #8]
     dfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e00:	ldr	r3, [r3, #4]
     e04:	sub	r3, r3, #1
     e08:	ldr	r2, [fp, #-24]	; 0xffffffe8
     e0c:	lsl	r3, r3, #4
     e10:	add	r3, r2, r3
     e14:	mvn	r2, #0
     e18:	str	r2, [r3, #12]
     e1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e20:	ldr	r3, [r3, #4]
     e24:	sub	r3, r3, #1
     e28:	ldr	r2, [fp, #-24]	; 0xffffffe8
     e2c:	add	r3, r3, #1
     e30:	lsl	r3, r3, #4
     e34:	add	r1, r2, r3
     e38:	mvn	r2, #0
     e3c:	mvn	r3, #0
     e40:	strd	r2, [r1]
     e44:	mov	r3, #0
     e48:	mov	r0, r3
     e4c:	sub	sp, fp, #8
     e50:	pop	{r4, fp, pc}

00000e54 <coda_grib_cursor_get_num_elements>:
     e54:	push	{fp}		; (str fp, [sp, #-4]!)
     e58:	add	fp, sp, #0
     e5c:	sub	sp, sp, #12
     e60:	str	r0, [fp, #-8]
     e64:	str	r1, [fp, #-12]
     e68:	ldr	r3, [fp, #-8]
     e6c:	ldr	r3, [r3, #4]
     e70:	sub	r3, r3, #1
     e74:	ldr	r2, [fp, #-8]
     e78:	lsl	r3, r3, #4
     e7c:	add	r3, r2, r3
     e80:	ldr	r3, [r3, #8]
     e84:	ldr	r3, [r3, #4]
     e88:	ldr	r3, [r3, #8]
     e8c:	cmp	r3, #1
     e90:	bne	ec0 <coda_grib_cursor_get_num_elements+0x6c>
     e94:	ldr	r3, [fp, #-8]
     e98:	ldr	r3, [r3, #4]
     e9c:	sub	r3, r3, #1
     ea0:	ldr	r2, [fp, #-8]
     ea4:	lsl	r3, r3, #4
     ea8:	add	r3, r2, r3
     eac:	ldr	r3, [r3, #8]
     eb0:	ldr	r2, [r3, #8]
     eb4:	ldr	r3, [fp, #-12]
     eb8:	str	r2, [r3]
     ebc:	b	ecc <coda_grib_cursor_get_num_elements+0x78>
     ec0:	ldr	r3, [fp, #-12]
     ec4:	mov	r2, #1
     ec8:	str	r2, [r3]
     ecc:	mov	r3, #0
     ed0:	mov	r0, r3
     ed4:	add	sp, fp, #0
     ed8:	pop	{fp}		; (ldr fp, [sp], #4)
     edc:	bx	lr

00000ee0 <coda_grib_cursor_get_array_dim>:
     ee0:	push	{fp, lr}
     ee4:	add	fp, sp, #4
     ee8:	sub	sp, sp, #16
     eec:	str	r0, [fp, #-8]
     ef0:	str	r1, [fp, #-12]
     ef4:	str	r2, [fp, #-16]
     ef8:	ldr	r3, [fp, #-12]
     efc:	mov	r2, #1
     f00:	str	r2, [r3]
     f04:	ldr	r1, [fp, #-16]
     f08:	ldr	r0, [fp, #-8]
     f0c:	bl	e54 <coda_grib_cursor_get_num_elements>
     f10:	mov	r3, r0
     f14:	mov	r0, r3
     f18:	sub	sp, fp, #4
     f1c:	pop	{fp, pc}

00000f20 <coda_grib_cursor_read_float>:
     f20:	push	{fp, lr}
     f24:	add	fp, sp, #4
     f28:	sub	sp, sp, #64	; 0x40
     f2c:	str	r0, [fp, #-48]	; 0xffffffd0
     f30:	str	r1, [fp, #-52]	; 0xffffffcc
     f34:	ldr	r1, [fp, #-48]	; 0xffffffd0
     f38:	ldr	r1, [r1, #4]
     f3c:	cmp	r1, #1
     f40:	bgt	f58 <coda_grib_cursor_read_float+0x38>
     f44:	ldr	r3, [pc, #948]	; 1300 <coda_grib_cursor_read_float+0x3e0>
     f48:	mov	r2, #144	; 0x90
     f4c:	ldr	r1, [pc, #944]	; 1304 <coda_grib_cursor_read_float+0x3e4>
     f50:	ldr	r0, [pc, #944]	; 1308 <coda_grib_cursor_read_float+0x3e8>
     f54:	bl	0 <__assert_fail>
     f58:	ldr	r1, [fp, #-48]	; 0xffffffd0
     f5c:	ldr	r1, [r1, #4]
     f60:	sub	r1, r1, #2
     f64:	ldr	r0, [fp, #-48]	; 0xffffffd0
     f68:	lsl	r1, r1, #4
     f6c:	add	r1, r0, r1
     f70:	ldr	r1, [r1, #8]
     f74:	str	r1, [fp, #-20]	; 0xffffffec
     f78:	ldr	r1, [fp, #-20]	; 0xffffffec
     f7c:	ldr	r1, [r1, #4]
     f80:	ldr	r1, [r1, #8]
     f84:	cmp	r1, #1
     f88:	beq	fa0 <coda_grib_cursor_read_float+0x80>
     f8c:	ldr	r3, [pc, #876]	; 1300 <coda_grib_cursor_read_float+0x3e0>
     f90:	mov	r2, #146	; 0x92
     f94:	ldr	r1, [pc, #872]	; 1304 <coda_grib_cursor_read_float+0x3e4>
     f98:	ldr	r0, [pc, #876]	; 130c <coda_grib_cursor_read_float+0x3ec>
     f9c:	bl	0 <__assert_fail>
     fa0:	ldr	r1, [fp, #-48]	; 0xffffffd0
     fa4:	ldr	r1, [r1, #4]
     fa8:	sub	r1, r1, #1
     fac:	ldr	r0, [fp, #-48]	; 0xffffffd0
     fb0:	lsl	r1, r1, #4
     fb4:	add	r1, r0, r1
     fb8:	ldr	r1, [r1, #12]
     fbc:	str	r1, [fp, #-8]
     fc0:	ldr	r1, [fp, #-20]	; 0xffffffec
     fc4:	ldr	r1, [r1, #24]
     fc8:	cmp	r1, #0
     fcc:	beq	1278 <coda_grib_cursor_read_float+0x358>
     fd0:	mov	r2, #0
     fd4:	mov	r3, #0
     fd8:	strd	r2, [fp, #-44]	; 0xffffffd4
     fdc:	ldr	r3, [fp, #-20]	; 0xffffffec
     fe0:	ldr	r3, [r3, #28]
     fe4:	cmp	r3, #0
     fe8:	bne	1004 <coda_grib_cursor_read_float+0xe4>
     fec:	ldr	r3, [fp, #-20]	; 0xffffffec
     ff0:	ldr	r2, [r3, #36]	; 0x24
     ff4:	ldr	r3, [fp, #-52]	; 0xffffffcc
     ff8:	str	r2, [r3]
     ffc:	mov	r3, #0
    1000:	b	12f4 <coda_grib_cursor_read_float+0x3d4>
    1004:	ldr	r3, [fp, #-20]	; 0xffffffec
    1008:	ldr	r3, [r3, #56]	; 0x38
    100c:	cmp	r3, #0
    1010:	beq	1178 <coda_grib_cursor_read_float+0x258>
    1014:	mov	r3, #0
    1018:	str	r3, [fp, #-12]
    101c:	ldr	r3, [fp, #-8]
    1020:	asr	r3, r3, #3
    1024:	str	r3, [fp, #-24]	; 0xffffffe8
    1028:	ldr	r3, [fp, #-20]	; 0xffffffec
    102c:	ldr	r2, [r3, #56]	; 0x38
    1030:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1034:	add	r3, r2, r3
    1038:	ldrb	r3, [r3]
    103c:	strb	r3, [fp, #-25]	; 0xffffffe7
    1040:	ldrb	r2, [fp, #-25]	; 0xffffffe7
    1044:	ldr	r3, [fp, #-8]
    1048:	mvn	r3, r3
    104c:	and	r3, r3, #7
    1050:	asr	r3, r2, r3
    1054:	and	r3, r3, #1
    1058:	cmp	r3, #0
    105c:	bne	107c <coda_grib_cursor_read_float+0x15c>
    1060:	bl	0 <coda_NaN>
    1064:	vmov.f64	d7, d0
    1068:	vcvt.f32.f64	s15, d7
    106c:	ldr	r3, [fp, #-52]	; 0xffffffcc
    1070:	vstr	s15, [r3]
    1074:	mov	r3, #0
    1078:	b	12f4 <coda_grib_cursor_read_float+0x3d4>
    107c:	mov	r3, #0
    1080:	str	r3, [fp, #-16]
    1084:	b	10c0 <coda_grib_cursor_read_float+0x1a0>
    1088:	ldr	r3, [fp, #-20]	; 0xffffffec
    108c:	ldr	r2, [r3, #60]	; 0x3c
    1090:	ldr	r3, [fp, #-16]
    1094:	lsl	r3, r3, #4
    1098:	add	r3, r3, #15
    109c:	add	r3, r2, r3
    10a0:	ldrb	r3, [r3]
    10a4:	mov	r2, r3
    10a8:	ldr	r3, [fp, #-12]
    10ac:	add	r3, r3, r2
    10b0:	str	r3, [fp, #-12]
    10b4:	ldr	r3, [fp, #-16]
    10b8:	add	r3, r3, #1
    10bc:	str	r3, [fp, #-16]
    10c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    10c4:	asr	r2, r3, #4
    10c8:	ldr	r3, [fp, #-16]
    10cc:	cmp	r2, r3
    10d0:	bgt	1088 <coda_grib_cursor_read_float+0x168>
    10d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    10d8:	and	r3, r3, #15
    10dc:	cmp	r3, #0
    10e0:	beq	110c <coda_grib_cursor_read_float+0x1ec>
    10e4:	ldr	r3, [fp, #-20]	; 0xffffffec
    10e8:	ldr	r2, [r3, #60]	; 0x3c
    10ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
    10f0:	sub	r3, r3, #1
    10f4:	add	r3, r2, r3
    10f8:	ldrb	r3, [r3]
    10fc:	mov	r2, r3
    1100:	ldr	r3, [fp, #-12]
    1104:	add	r3, r3, r2
    1108:	str	r3, [fp, #-12]
    110c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1110:	ldr	r2, [r3, #56]	; 0x38
    1114:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1118:	add	r3, r2, r3
    111c:	ldrb	r3, [r3]
    1120:	strb	r3, [fp, #-25]	; 0xffffffe7
    1124:	mov	r3, #0
    1128:	str	r3, [fp, #-16]
    112c:	b	115c <coda_grib_cursor_read_float+0x23c>
    1130:	ldrb	r2, [fp, #-25]	; 0xffffffe7
    1134:	ldr	r3, [fp, #-16]
    1138:	rsb	r3, r3, #7
    113c:	asr	r3, r2, r3
    1140:	and	r3, r3, #1
    1144:	ldr	r2, [fp, #-12]
    1148:	add	r3, r2, r3
    114c:	str	r3, [fp, #-12]
    1150:	ldr	r3, [fp, #-16]
    1154:	add	r3, r3, #1
    1158:	str	r3, [fp, #-16]
    115c:	ldr	r3, [fp, #-8]
    1160:	and	r2, r3, #7
    1164:	ldr	r3, [fp, #-16]
    1168:	cmp	r2, r3
    116c:	bgt	1130 <coda_grib_cursor_read_float+0x210>
    1170:	ldr	r3, [fp, #-12]
    1174:	str	r3, [fp, #-8]
    1178:	ldr	r3, [fp, #-20]	; 0xffffffec
    117c:	ldr	r3, [r3, #28]
    1180:	asr	r3, r3, #3
    1184:	ldr	r2, [fp, #-20]	; 0xffffffec
    1188:	ldr	r2, [r2, #28]
    118c:	uxtb	r2, r2
    1190:	and	r2, r2, #7
    1194:	cmp	r2, #0
    1198:	movne	r2, #1
    119c:	moveq	r2, #0
    11a0:	uxtb	r2, r2
    11a4:	add	r3, r3, r2
    11a8:	rsb	r3, r3, #8
    11ac:	mov	r2, r3
    11b0:	sub	r3, fp, #44	; 0x2c
    11b4:	add	r3, r3, r2
    11b8:	str	r3, [fp, #-32]	; 0xffffffe0
    11bc:	ldr	r3, [fp, #-48]	; 0xffffffd0
    11c0:	ldr	r3, [r3]
    11c4:	ldr	lr, [r3, #52]	; 0x34
    11c8:	ldr	r3, [fp, #-20]	; 0xffffffec
    11cc:	ldrd	r0, [r3, #16]
    11d0:	ldr	r3, [fp, #-20]	; 0xffffffec
    11d4:	ldr	r3, [r3, #28]
    11d8:	ldr	r2, [fp, #-8]
    11dc:	mul	r3, r2, r3
    11e0:	mov	r2, r3
    11e4:	asr	r3, r2, #31
    11e8:	adds	r0, r0, r2
    11ec:	adc	r1, r1, r3
    11f0:	ldr	r3, [fp, #-20]	; 0xffffffec
    11f4:	ldr	r3, [r3, #28]
    11f8:	mov	r2, r3
    11fc:	asr	r3, r2, #31
    1200:	ldr	ip, [fp, #-32]	; 0xffffffe0
    1204:	str	ip, [sp, #8]
    1208:	strd	r2, [sp]
    120c:	mov	r2, r0
    1210:	mov	r3, r1
    1214:	mov	r0, lr
    1218:	bl	1e4 <read_bits>
    121c:	mov	r3, r0
    1220:	cmp	r3, #0
    1224:	beq	1230 <coda_grib_cursor_read_float+0x310>
    1228:	mvn	r3, #0
    122c:	b	12f4 <coda_grib_cursor_read_float+0x3d4>
    1230:	sub	r3, fp, #44	; 0x2c
    1234:	mov	r0, r3
    1238:	bl	8c0 <swap8>
    123c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    1240:	mov	r0, r2
    1244:	mov	r1, r3
    1248:	bl	0 <__aeabi_l2d>
    124c:	vmov	d6, r0, r1
    1250:	ldr	r3, [fp, #-20]	; 0xffffffec
    1254:	vldr	d7, [r3, #40]	; 0x28
    1258:	vmul.f64	d6, d6, d7
    125c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1260:	vldr	d7, [r3, #48]	; 0x30
    1264:	vadd.f64	d7, d6, d7
    1268:	vcvt.f32.f64	s15, d7
    126c:	ldr	r3, [fp, #-52]	; 0xffffffcc
    1270:	vstr	s15, [r3]
    1274:	b	12f0 <coda_grib_cursor_read_float+0x3d0>
    1278:	ldr	r1, [fp, #-48]	; 0xffffffd0
    127c:	ldr	r1, [r1]
    1280:	ldr	ip, [r1, #52]	; 0x34
    1284:	ldr	r1, [fp, #-20]	; 0xffffffec
    1288:	ldrd	r0, [r1, #16]
    128c:	lsr	r2, r0, #3
    1290:	orr	r2, r2, r1, lsl #29
    1294:	asr	r3, r1, #3
    1298:	ldr	r1, [fp, #-8]
    129c:	lsl	r1, r1, #2
    12a0:	mov	r0, r1
    12a4:	asr	r1, r0, #31
    12a8:	adds	r0, r0, r2
    12ac:	adc	r1, r1, r3
    12b0:	ldr	r3, [fp, #-52]	; 0xffffffcc
    12b4:	str	r3, [sp, #8]
    12b8:	mov	r2, #4
    12bc:	mov	r3, #0
    12c0:	strd	r2, [sp]
    12c4:	mov	r2, r0
    12c8:	mov	r3, r1
    12cc:	mov	r0, ip
    12d0:	bl	0 <read_bytes>
    12d4:	mov	r3, r0
    12d8:	cmp	r3, #0
    12dc:	beq	12e8 <coda_grib_cursor_read_float+0x3c8>
    12e0:	mvn	r3, #0
    12e4:	b	12f4 <coda_grib_cursor_read_float+0x3d4>
    12e8:	ldr	r0, [fp, #-52]	; 0xffffffcc
    12ec:	bl	7a4 <swap4>
    12f0:	mov	r3, #0
    12f4:	mov	r0, r3
    12f8:	sub	sp, fp, #4
    12fc:	pop	{fp, pc}
    1300:	.word	0x0000024c
    1304:	.word	0x00000128
    1308:	.word	0x000001fc
    130c:	.word	0x0000020c

00001310 <coda_grib_cursor_read_float_array>:
    1310:	push	{fp, lr}
    1314:	add	fp, sp, #4
    1318:	sub	sp, sp, #536	; 0x218
    131c:	str	r0, [fp, #-536]	; 0xfffffde8
    1320:	str	r1, [fp, #-540]	; 0xfffffde4
    1324:	ldr	r3, [fp, #-536]	; 0xfffffde8
    1328:	ldr	r3, [r3, #4]
    132c:	sub	r3, r3, #1
    1330:	ldr	r2, [fp, #-536]	; 0xfffffde8
    1334:	lsl	r3, r3, #4
    1338:	add	r3, r2, r3
    133c:	ldr	r3, [r3, #8]
    1340:	str	r3, [fp, #-12]
    1344:	ldr	r3, [fp, #-12]
    1348:	ldr	r3, [r3, #8]
    134c:	cmp	r3, #0
    1350:	ble	1438 <coda_grib_cursor_read_float_array+0x128>
    1354:	ldr	r2, [fp, #-536]	; 0xfffffde8
    1358:	sub	r3, fp, #532	; 0x214
    135c:	mov	r1, r2
    1360:	mov	r2, #520	; 0x208
    1364:	mov	r0, r3
    1368:	bl	0 <memcpy>
    136c:	ldr	r3, [fp, #-528]	; 0xfffffdf0
    1370:	add	r3, r3, #1
    1374:	str	r3, [fp, #-528]	; 0xfffffdf0
    1378:	ldr	r3, [fp, #-528]	; 0xfffffdf0
    137c:	sub	r3, r3, #1
    1380:	ldr	r2, [fp, #-12]
    1384:	ldr	r2, [r2, #12]
    1388:	lsl	r3, r3, #4
    138c:	sub	r1, fp, #4
    1390:	add	r3, r1, r3
    1394:	str	r2, [r3, #-520]	; 0xfffffdf8
    1398:	ldr	r3, [fp, #-528]	; 0xfffffdf0
    139c:	sub	r3, r3, #1
    13a0:	sub	r2, fp, #532	; 0x214
    13a4:	add	r3, r3, #1
    13a8:	lsl	r3, r3, #4
    13ac:	add	r1, r2, r3
    13b0:	mvn	r2, #0
    13b4:	mvn	r3, #0
    13b8:	strd	r2, [r1]
    13bc:	mov	r3, #0
    13c0:	str	r3, [fp, #-8]
    13c4:	b	1424 <coda_grib_cursor_read_float_array+0x114>
    13c8:	ldr	r3, [fp, #-528]	; 0xfffffdf0
    13cc:	sub	r3, r3, #1
    13d0:	lsl	r3, r3, #4
    13d4:	sub	r2, fp, #4
    13d8:	add	r3, r2, r3
    13dc:	ldr	r2, [fp, #-8]
    13e0:	str	r2, [r3, #-516]	; 0xfffffdfc
    13e4:	ldr	r3, [fp, #-8]
    13e8:	lsl	r3, r3, #2
    13ec:	ldr	r2, [fp, #-540]	; 0xfffffde4
    13f0:	add	r2, r2, r3
    13f4:	sub	r3, fp, #532	; 0x214
    13f8:	mov	r1, r2
    13fc:	mov	r0, r3
    1400:	bl	f20 <coda_grib_cursor_read_float>
    1404:	mov	r3, r0
    1408:	cmp	r3, #0
    140c:	beq	1418 <coda_grib_cursor_read_float_array+0x108>
    1410:	mvn	r3, #0
    1414:	b	143c <coda_grib_cursor_read_float_array+0x12c>
    1418:	ldr	r3, [fp, #-8]
    141c:	add	r3, r3, #1
    1420:	str	r3, [fp, #-8]
    1424:	ldr	r3, [fp, #-12]
    1428:	ldr	r2, [r3, #8]
    142c:	ldr	r3, [fp, #-8]
    1430:	cmp	r2, r3
    1434:	bgt	13c8 <coda_grib_cursor_read_float_array+0xb8>
    1438:	mov	r3, #0
    143c:	mov	r0, r3
    1440:	sub	sp, fp, #4
    1444:	pop	{fp, pc}

00001448 <coda_grib_cursor_read_float_partial_array>:
    1448:	push	{fp, lr}
    144c:	add	fp, sp, #4
    1450:	sub	sp, sp, #544	; 0x220
    1454:	str	r0, [fp, #-536]	; 0xfffffde8
    1458:	str	r1, [fp, #-540]	; 0xfffffde4
    145c:	str	r2, [fp, #-544]	; 0xfffffde0
    1460:	str	r3, [fp, #-548]	; 0xfffffddc
    1464:	ldr	r3, [fp, #-536]	; 0xfffffde8
    1468:	ldr	r3, [r3, #4]
    146c:	sub	r3, r3, #1
    1470:	ldr	r2, [fp, #-536]	; 0xfffffde8
    1474:	lsl	r3, r3, #4
    1478:	add	r3, r2, r3
    147c:	ldr	r3, [r3, #8]
    1480:	str	r3, [fp, #-12]
    1484:	ldr	r3, [fp, #-12]
    1488:	ldr	r3, [r3, #8]
    148c:	cmp	r3, #0
    1490:	ble	157c <coda_grib_cursor_read_float_partial_array+0x134>
    1494:	ldr	r2, [fp, #-536]	; 0xfffffde8
    1498:	sub	r3, fp, #532	; 0x214
    149c:	mov	r1, r2
    14a0:	mov	r2, #520	; 0x208
    14a4:	mov	r0, r3
    14a8:	bl	0 <memcpy>
    14ac:	ldr	r3, [fp, #-528]	; 0xfffffdf0
    14b0:	add	r3, r3, #1
    14b4:	str	r3, [fp, #-528]	; 0xfffffdf0
    14b8:	ldr	r3, [fp, #-528]	; 0xfffffdf0
    14bc:	sub	r3, r3, #1
    14c0:	ldr	r2, [fp, #-12]
    14c4:	ldr	r2, [r2, #12]
    14c8:	lsl	r3, r3, #4
    14cc:	sub	r1, fp, #4
    14d0:	add	r3, r1, r3
    14d4:	str	r2, [r3, #-520]	; 0xfffffdf8
    14d8:	ldr	r3, [fp, #-528]	; 0xfffffdf0
    14dc:	sub	r3, r3, #1
    14e0:	sub	r2, fp, #532	; 0x214
    14e4:	add	r3, r3, #1
    14e8:	lsl	r3, r3, #4
    14ec:	add	r1, r2, r3
    14f0:	mvn	r2, #0
    14f4:	mvn	r3, #0
    14f8:	strd	r2, [r1]
    14fc:	mov	r3, #0
    1500:	str	r3, [fp, #-8]
    1504:	b	156c <coda_grib_cursor_read_float_partial_array+0x124>
    1508:	ldr	r3, [fp, #-528]	; 0xfffffdf0
    150c:	sub	r3, r3, #1
    1510:	ldr	r1, [fp, #-540]	; 0xfffffde4
    1514:	ldr	r2, [fp, #-8]
    1518:	add	r2, r1, r2
    151c:	lsl	r3, r3, #4
    1520:	sub	r1, fp, #4
    1524:	add	r3, r1, r3
    1528:	str	r2, [r3, #-516]	; 0xfffffdfc
    152c:	ldr	r3, [fp, #-8]
    1530:	lsl	r3, r3, #2
    1534:	ldr	r2, [fp, #-548]	; 0xfffffddc
    1538:	add	r2, r2, r3
    153c:	sub	r3, fp, #532	; 0x214
    1540:	mov	r1, r2
    1544:	mov	r0, r3
    1548:	bl	f20 <coda_grib_cursor_read_float>
    154c:	mov	r3, r0
    1550:	cmp	r3, #0
    1554:	beq	1560 <coda_grib_cursor_read_float_partial_array+0x118>
    1558:	mvn	r3, #0
    155c:	b	1580 <coda_grib_cursor_read_float_partial_array+0x138>
    1560:	ldr	r3, [fp, #-8]
    1564:	add	r3, r3, #1
    1568:	str	r3, [fp, #-8]
    156c:	ldr	r2, [fp, #-8]
    1570:	ldr	r3, [fp, #-544]	; 0xfffffde0
    1574:	cmp	r2, r3
    1578:	blt	1508 <coda_grib_cursor_read_float_partial_array+0xc0>
    157c:	mov	r3, #0
    1580:	mov	r0, r3
    1584:	sub	sp, fp, #4
    1588:	pop	{fp, pc}
