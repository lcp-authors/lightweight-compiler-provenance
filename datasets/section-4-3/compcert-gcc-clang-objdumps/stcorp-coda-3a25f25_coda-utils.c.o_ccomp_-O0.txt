
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-utils.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_format_from_string>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #16
       8:	str	ip, [sp]
       c:	str	lr, [sp, #4]
      10:	str	r4, [sp, #8]
      14:	str	r5, [sp, #12]
      18:	mov	r5, r1
      1c:	mov	r4, r0
      20:	ldr	r1, [pc, #376]	; 1a0 <coda_format_from_string+0x1a0>
      24:	mov	r0, r4
      28:	bl	0 <strcmp>
      2c:	cmp	r0, #0
      30:	beq	170 <coda_format_from_string+0x170>
      34:	ldr	r1, [pc, #340]	; 190 <coda_format_from_string+0x190>
      38:	mov	r0, r4
      3c:	bl	0 <strcmp>
      40:	cmp	r0, #0
      44:	beq	164 <coda_format_from_string+0x164>
      48:	ldr	r1, [pc, #348]	; 1ac <coda_format_from_string+0x1ac>
      4c:	mov	r0, r4
      50:	bl	0 <strcmp>
      54:	cmp	r0, #0
      58:	beq	158 <coda_format_from_string+0x158>
      5c:	ldr	r1, [pc, #312]	; 19c <coda_format_from_string+0x19c>
      60:	mov	r0, r4
      64:	bl	0 <strcmp>
      68:	cmp	r0, #0
      6c:	beq	14c <coda_format_from_string+0x14c>
      70:	ldr	r1, [pc, #304]	; 1a8 <coda_format_from_string+0x1a8>
      74:	mov	r0, r4
      78:	bl	0 <strcmp>
      7c:	cmp	r0, #0
      80:	beq	140 <coda_format_from_string+0x140>
      84:	ldr	r1, [pc, #268]	; 198 <coda_format_from_string+0x198>
      88:	mov	r0, r4
      8c:	bl	0 <strcmp>
      90:	cmp	r0, #0
      94:	beq	134 <coda_format_from_string+0x134>
      98:	ldr	r1, [pc, #280]	; 1b8 <coda_format_from_string+0x1b8>
      9c:	mov	r0, r4
      a0:	bl	0 <strcmp>
      a4:	cmp	r0, #0
      a8:	beq	128 <coda_format_from_string+0x128>
      ac:	ldr	r1, [pc, #252]	; 1b0 <coda_format_from_string+0x1b0>
      b0:	mov	r0, r4
      b4:	bl	0 <strcmp>
      b8:	cmp	r0, #0
      bc:	beq	11c <coda_format_from_string+0x11c>
      c0:	ldr	r1, [pc, #204]	; 194 <coda_format_from_string+0x194>
      c4:	mov	r0, r4
      c8:	bl	0 <strcmp>
      cc:	cmp	r0, #0
      d0:	beq	110 <coda_format_from_string+0x110>
      d4:	ldr	r1, [pc, #216]	; 1b4 <coda_format_from_string+0x1b4>
      d8:	mov	r0, r4
      dc:	bl	0 <strcmp>
      e0:	cmp	r0, #0
      e4:	beq	104 <coda_format_from_string+0x104>
      e8:	movw	r0, #65136	; 0xfe70
      ec:	movt	r0, #65535	; 0xffff
      f0:	ldr	r1, [pc, #172]	; 1a4 <coda_format_from_string+0x1a4>
      f4:	mov	r2, r4
      f8:	bl	0 <coda_set_error>
      fc:	mvn	r0, #0
     100:	b	17c <coda_format_from_string+0x17c>
     104:	mov	r0, #9
     108:	str	r0, [r5]
     10c:	b	178 <coda_format_from_string+0x178>
     110:	mov	r3, #8
     114:	str	r3, [r5]
     118:	b	178 <coda_format_from_string+0x178>
     11c:	mov	r1, #7
     120:	str	r1, [r5]
     124:	b	178 <coda_format_from_string+0x178>
     128:	mov	r0, #6
     12c:	str	r0, [r5]
     130:	b	178 <coda_format_from_string+0x178>
     134:	mov	ip, #5
     138:	str	ip, [r5]
     13c:	b	178 <coda_format_from_string+0x178>
     140:	mov	r0, #4
     144:	str	r0, [r5]
     148:	b	178 <coda_format_from_string+0x178>
     14c:	mov	r1, #3
     150:	str	r1, [r5]
     154:	b	178 <coda_format_from_string+0x178>
     158:	mov	r3, #2
     15c:	str	r3, [r5]
     160:	b	178 <coda_format_from_string+0x178>
     164:	mov	r0, #1
     168:	str	r0, [r5]
     16c:	b	178 <coda_format_from_string+0x178>
     170:	mov	r2, #0
     174:	str	r2, [r5]
     178:	mov	r0, #0
     17c:	ldr	r4, [sp, #8]
     180:	ldr	r5, [sp, #12]
     184:	ldr	lr, [sp, #4]
     188:	add	sp, sp, #16
     18c:	bx	lr
     190:	.word	0x000000ad
     194:	.word	0x0000007e
     198:	.word	0x00000198
     19c:	.word	0x0000008a
     1a0:	.word	0x0000008f
     1a4:	.word	0x00000101
     1a8:	.word	0x00000000
     1ac:	.word	0x000000fd
     1b0:	.word	0x0000000e
     1b4:	.word	0x0000000a
     1b8:	.word	0x000000c8

000001bc <coda_element_name_from_xml_name>:
     1bc:	mov	ip, sp
     1c0:	sub	sp, sp, #8
     1c4:	str	ip, [sp]
     1c8:	str	lr, [sp, #4]
     1cc:	mov	r1, r0
     1d0:	ldrb	r2, [r1]
     1d4:	cmp	r2, #32
     1d8:	beq	1f0 <coda_element_name_from_xml_name+0x34>
     1dc:	ldrb	r2, [r1]
     1e0:	cmp	r2, #0
     1e4:	movne	r3, #1
     1e8:	moveq	r3, #0
     1ec:	b	1f4 <coda_element_name_from_xml_name+0x38>
     1f0:	mov	r3, #0
     1f4:	cmp	r3, #0
     1f8:	beq	204 <coda_element_name_from_xml_name+0x48>
     1fc:	add	r1, r1, #1
     200:	b	1d0 <coda_element_name_from_xml_name+0x14>
     204:	ldrb	ip, [r1]
     208:	cmp	ip, #0
     20c:	beq	214 <coda_element_name_from_xml_name+0x58>
     210:	add	r0, r1, #1
     214:	ldr	lr, [sp, #4]
     218:	add	sp, sp, #8
     21c:	bx	lr

00000220 <coda_is_identifier>:
     220:	mov	ip, sp
     224:	sub	sp, sp, #16
     228:	str	ip, [sp]
     22c:	str	lr, [sp, #4]
     230:	str	r4, [sp, #8]
     234:	str	r5, [sp, #12]
     238:	mov	r4, r0
     23c:	cmp	r4, #0
     240:	bne	24c <coda_is_identifier+0x2c>
     244:	mov	r0, #0
     248:	b	2d8 <coda_is_identifier+0xb8>
     24c:	bl	0 <__ctype_b_loc>
     250:	ldr	r2, [r0]
     254:	ldrb	r1, [r4]
     258:	add	r3, r2, r1, lsl #1
     25c:	ldrh	ip, [r3]
     260:	and	r2, ip, #1024	; 0x400
     264:	cmp	r2, #0
     268:	bne	274 <coda_is_identifier+0x54>
     26c:	mov	r0, #0
     270:	b	2d8 <coda_is_identifier+0xb8>
     274:	mov	r5, #1
     278:	ldrb	r3, [r4, r5]
     27c:	cmp	r3, #0
     280:	beq	2d4 <coda_is_identifier+0xb4>
     284:	bl	0 <__ctype_b_loc>
     288:	ldr	r0, [r0]
     28c:	ldrb	r1, [r4, r5]
     290:	add	r1, r0, r1, lsl #1
     294:	ldrh	r0, [r1]
     298:	and	ip, r0, #8
     29c:	cmp	ip, #0
     2a0:	bne	2b8 <coda_is_identifier+0x98>
     2a4:	ldrb	r2, [r4, r5]
     2a8:	cmp	r2, #95	; 0x5f
     2ac:	moveq	r0, #1
     2b0:	movne	r0, #0
     2b4:	b	2bc <coda_is_identifier+0x9c>
     2b8:	mov	r0, #1
     2bc:	cmp	r0, #0
     2c0:	bne	2cc <coda_is_identifier+0xac>
     2c4:	mov	r0, #0
     2c8:	b	2d8 <coda_is_identifier+0xb8>
     2cc:	add	r5, r5, #1
     2d0:	b	278 <coda_is_identifier+0x58>
     2d4:	mov	r0, #1
     2d8:	ldr	r4, [sp, #8]
     2dc:	ldr	r5, [sp, #12]
     2e0:	ldr	lr, [sp, #4]
     2e4:	add	sp, sp, #16
     2e8:	bx	lr

000002ec <coda_identifier_from_name>:
     2ec:	mov	ip, sp
     2f0:	sub	sp, sp, #40	; 0x28
     2f4:	str	ip, [sp, #4]
     2f8:	str	lr, [sp, #8]
     2fc:	str	r4, [sp, #16]
     300:	str	r5, [sp, #20]
     304:	str	r6, [sp, #24]
     308:	str	r7, [sp, #28]
     30c:	str	r8, [sp, #32]
     310:	mov	r7, r1
     314:	mov	r4, r0
     318:	mov	r8, #4
     31c:	cmp	r4, #0
     320:	beq	380 <coda_identifier_from_name+0x94>
     324:	ldrb	r2, [r4]
     328:	cmp	r2, #0
     32c:	beq	358 <coda_identifier_from_name+0x6c>
     330:	bl	0 <__ctype_b_loc>
     334:	ldr	r0, [r0]
     338:	ldrb	ip, [r4]
     33c:	add	ip, r0, ip, lsl #1
     340:	ldrh	r0, [ip]
     344:	and	ip, r0, #1024	; 0x400
     348:	cmp	ip, #0
     34c:	moveq	r3, #1
     350:	movne	r3, #0
     354:	b	35c <coda_identifier_from_name+0x70>
     358:	mov	r3, #0
     35c:	cmp	r3, #0
     360:	beq	36c <coda_identifier_from_name+0x80>
     364:	add	r4, r4, #1
     368:	b	324 <coda_identifier_from_name+0x38>
     36c:	ldrb	r3, [r4]
     370:	cmp	r3, #0
     374:	bne	384 <coda_identifier_from_name+0x98>
     378:	ldr	r4, [pc, #308]	; 4b4 <coda_identifier_from_name+0x1c8>
     37c:	b	384 <coda_identifier_from_name+0x98>
     380:	ldr	r4, [pc, #300]	; 4b4 <coda_identifier_from_name+0x1c8>
     384:	mov	r0, r4
     388:	bl	0 <strlen>
     38c:	mov	r6, r0
     390:	add	r2, r6, r8
     394:	add	r0, r2, #1
     398:	bl	0 <malloc>
     39c:	mov	r5, r0
     3a0:	cmp	r5, #0
     3a4:	bne	3cc <coda_identifier_from_name+0xe0>
     3a8:	mvn	r0, #0
     3ac:	ldr	r1, [pc, #252]	; 4b0 <coda_identifier_from_name+0x1c4>
     3b0:	add	r2, r6, r8
     3b4:	ldr	r3, [pc, #240]	; 4ac <coda_identifier_from_name+0x1c0>
     3b8:	mov	ip, #172	; 0xac
     3bc:	str	ip, [sp]
     3c0:	bl	0 <coda_set_error>
     3c4:	mov	r0, #0
     3c8:	b	484 <coda_identifier_from_name+0x198>
     3cc:	ldrb	r1, [r4]
     3d0:	and	r0, r1, #255	; 0xff
     3d4:	strb	r0, [r5]
     3d8:	mov	r8, #1
     3dc:	cmp	r8, r6
     3e0:	bge	424 <coda_identifier_from_name+0x138>
     3e4:	bl	0 <__ctype_b_loc>
     3e8:	ldr	r2, [r0]
     3ec:	ldrb	r3, [r4, r8]
     3f0:	add	ip, r2, r3, lsl #1
     3f4:	ldrh	r1, [ip]
     3f8:	and	r3, r1, #8
     3fc:	cmp	r3, #0
     400:	beq	414 <coda_identifier_from_name+0x128>
     404:	ldrb	r1, [r4, r8]
     408:	and	r0, r1, #255	; 0xff
     40c:	strb	r0, [r5, r8]
     410:	b	41c <coda_identifier_from_name+0x130>
     414:	mov	r1, #95	; 0x5f
     418:	strb	r1, [r5, r8]
     41c:	add	r8, r8, #1
     420:	b	3dc <coda_identifier_from_name+0xf0>
     424:	mov	r0, #0
     428:	strb	r0, [r5, r6]
     42c:	cmp	r7, #0
     430:	beq	480 <coda_identifier_from_name+0x194>
     434:	mov	r4, #0
     438:	mov	r1, r5
     43c:	mov	r0, r7
     440:	bl	0 <coda_hashtable_get_index_from_name>
     444:	cmp	r0, #0
     448:	blt	480 <coda_identifier_from_name+0x194>
     44c:	add	r4, r4, #1
     450:	cmp	r4, #1000	; 0x3e8
     454:	blt	46c <coda_identifier_from_name+0x180>
     458:	ldr	r0, [pc, #88]	; 4b8 <coda_identifier_from_name+0x1cc>
     45c:	ldr	r1, [pc, #72]	; 4ac <coda_identifier_from_name+0x1c0>
     460:	mov	r2, #203	; 0xcb
     464:	ldr	r3, [pc, #60]	; 4a8 <coda_identifier_from_name+0x1bc>
     468:	bl	0 <__assert_fail>
     46c:	add	r0, r5, r6
     470:	ldr	r1, [pc, #44]	; 4a4 <coda_identifier_from_name+0x1b8>
     474:	mov	r2, r4
     478:	bl	0 <sprintf>
     47c:	b	438 <coda_identifier_from_name+0x14c>
     480:	mov	r0, r5
     484:	ldr	r4, [sp, #16]
     488:	ldr	r5, [sp, #20]
     48c:	ldr	r6, [sp, #24]
     490:	ldr	r7, [sp, #28]
     494:	ldr	r8, [sp, #32]
     498:	ldr	lr, [sp, #8]
     49c:	add	sp, sp, #40	; 0x28
     4a0:	bx	lr
     4a4:	.word	0x00000095
     4a8:	.word	0x0000019c
     4ac:	.word	0x00000024
     4b0:	.word	0x0000015e
     4b4:	.word	0x0000001c
     4b8:	.word	0x0000009e

000004bc <coda_c_index_to_fortran_index>:
     4bc:	mov	ip, sp
     4c0:	sub	sp, sp, #64	; 0x40
     4c4:	str	ip, [sp]
     4c8:	str	lr, [sp, #4]
     4cc:	str	r4, [sp, #8]
     4d0:	str	r5, [sp, #12]
     4d4:	str	r6, [sp, #16]
     4d8:	str	r7, [sp, #20]
     4dc:	str	r8, [sp, #24]
     4e0:	str	r9, [sp, #28]
     4e4:	mov	r4, r2
     4e8:	mov	r7, r1
     4ec:	mov	r6, r0
     4f0:	cmp	r6, #8
     4f4:	ble	514 <coda_c_index_to_fortran_index+0x58>
     4f8:	mvn	r0, #99	; 0x63
     4fc:	ldr	r1, [pc, #168]	; 5ac <coda_c_index_to_fortran_index+0xf0>
     500:	mov	r3, #8
     504:	mov	r2, r6
     508:	bl	0 <coda_set_error>
     50c:	mvn	r0, #0
     510:	b	588 <coda_c_index_to_fortran_index+0xcc>
     514:	sub	r8, r6, #1
     518:	cmp	r8, #0
     51c:	blt	558 <coda_c_index_to_fortran_index+0x9c>
     520:	add	r9, sp, #32
     524:	ldr	r5, [r7, r8, lsl #2]
     528:	mov	r0, r4
     52c:	mov	r1, r5
     530:	bl	0 <__aeabi_idiv>
     534:	mul	r1, r0, r5
     538:	sub	r3, r4, r1
     53c:	str	r3, [r9, r8, lsl #2]
     540:	ldr	r1, [r7, r8, lsl #2]
     544:	mov	r0, r4
     548:	bl	0 <__aeabi_idiv>
     54c:	mov	r4, r0
     550:	sub	r8, r8, #1
     554:	b	518 <coda_c_index_to_fortran_index+0x5c>
     558:	mov	r0, #0
     55c:	mov	r3, #1
     560:	mov	ip, #0
     564:	cmp	ip, r6
     568:	bge	588 <coda_c_index_to_fortran_index+0xcc>
     56c:	add	r1, sp, #32
     570:	ldr	r1, [r1, ip, lsl #2]
     574:	mla	r0, r3, r1, r0
     578:	ldr	r2, [r7, ip, lsl #2]
     57c:	mul	r3, r3, r2
     580:	add	ip, ip, #1
     584:	b	564 <coda_c_index_to_fortran_index+0xa8>
     588:	ldr	r4, [sp, #8]
     58c:	ldr	r5, [sp, #12]
     590:	ldr	r6, [sp, #16]
     594:	ldr	r7, [sp, #20]
     598:	ldr	r8, [sp, #24]
     59c:	ldr	r9, [sp, #28]
     5a0:	ldr	lr, [sp, #4]
     5a4:	add	sp, sp, #64	; 0x40
     5a8:	bx	lr
     5ac:	.word	0x000000d3

000005b0 <clean_path>:
     5b0:	mov	ip, sp
     5b4:	sub	sp, sp, #16
     5b8:	str	ip, [sp]
     5bc:	str	lr, [sp, #4]
     5c0:	str	r4, [sp, #8]
     5c4:	cmp	r0, #0
     5c8:	beq	5e0 <clean_path+0x30>
     5cc:	ldrb	ip, [r0]
     5d0:	cmp	ip, #0
     5d4:	moveq	r2, #1
     5d8:	movne	r2, #0
     5dc:	b	5e4 <clean_path+0x34>
     5e0:	mov	r2, #1
     5e4:	cmp	r2, #0
     5e8:	bne	8ec <clean_path+0x33c>
     5ec:	mov	r4, #0
     5f0:	mov	r2, #0
     5f4:	ldrb	ip, [r0, r4]
     5f8:	cmp	ip, #46	; 0x2e
     5fc:	bne	618 <clean_path+0x68>
     600:	add	r1, r0, r4
     604:	ldrb	r1, [r1, #1]
     608:	cmp	r1, #47	; 0x2f
     60c:	moveq	ip, #1
     610:	movne	ip, #0
     614:	b	61c <clean_path+0x6c>
     618:	mov	ip, #0
     61c:	cmp	ip, #0
     620:	beq	62c <clean_path+0x7c>
     624:	add	r4, r4, #2
     628:	b	5f4 <clean_path+0x44>
     62c:	ldrb	r3, [r0, r4]
     630:	cmp	r3, #0
     634:	beq	8d0 <clean_path+0x320>
     638:	ldrb	r1, [r0, r4]
     63c:	cmp	r1, #47	; 0x2f
     640:	beq	658 <clean_path+0xa8>
     644:	ldrb	r3, [r0, r4]
     648:	cmp	r3, #92	; 0x5c
     64c:	moveq	r3, #1
     650:	movne	r3, #0
     654:	b	65c <clean_path+0xac>
     658:	mov	r3, #1
     65c:	cmp	r3, #0
     660:	beq	8b8 <clean_path+0x308>
     664:	add	r1, r0, r4
     668:	ldrb	ip, [r1, #1]
     66c:	cmp	ip, #47	; 0x2f
     670:	beq	68c <clean_path+0xdc>
     674:	add	r1, r0, r4
     678:	ldrb	ip, [r1, #1]
     67c:	cmp	ip, #92	; 0x5c
     680:	moveq	r1, #1
     684:	movne	r1, #0
     688:	b	690 <clean_path+0xe0>
     68c:	mov	r1, #1
     690:	cmp	r1, #0
     694:	beq	6a0 <clean_path+0xf0>
     698:	add	r4, r4, #1
     69c:	b	62c <clean_path+0x7c>
     6a0:	add	r1, r0, r4
     6a4:	ldrb	ip, [r1, #1]
     6a8:	cmp	ip, #46	; 0x2e
     6ac:	bne	8b8 <clean_path+0x308>
     6b0:	add	r1, r0, r4
     6b4:	ldrb	r3, [r1, #2]
     6b8:	cmp	r3, #0
     6bc:	beq	6d8 <clean_path+0x128>
     6c0:	add	ip, r0, r4
     6c4:	ldrb	r1, [ip, #2]
     6c8:	cmp	r1, #47	; 0x2f
     6cc:	moveq	r3, #1
     6d0:	movne	r3, #0
     6d4:	b	6dc <clean_path+0x12c>
     6d8:	mov	r3, #1
     6dc:	cmp	r3, #0
     6e0:	bne	6fc <clean_path+0x14c>
     6e4:	add	r3, r0, r4
     6e8:	ldrb	r1, [r3, #2]
     6ec:	cmp	r1, #92	; 0x5c
     6f0:	moveq	r3, #1
     6f4:	movne	r3, #0
     6f8:	b	700 <clean_path+0x150>
     6fc:	mov	r3, #1
     700:	cmp	r3, #0
     704:	beq	710 <clean_path+0x160>
     708:	add	r4, r4, #2
     70c:	b	62c <clean_path+0x7c>
     710:	add	ip, r0, r4
     714:	ldrb	r1, [ip, #2]
     718:	cmp	r1, #46	; 0x2e
     71c:	bne	780 <clean_path+0x1d0>
     720:	add	r1, r0, r4
     724:	ldrb	r3, [r1, #3]
     728:	cmp	r3, #0
     72c:	beq	748 <clean_path+0x198>
     730:	add	ip, r0, r4
     734:	ldrb	r1, [ip, #3]
     738:	cmp	r1, #47	; 0x2f
     73c:	moveq	r1, #1
     740:	movne	r1, #0
     744:	b	74c <clean_path+0x19c>
     748:	mov	r1, #1
     74c:	cmp	r1, #0
     750:	bne	778 <clean_path+0x1c8>
     754:	add	r3, r0, r4
     758:	ldrb	r3, [r3, #3]
     75c:	cmp	r3, #92	; 0x5c
     760:	moveq	r1, #1
     764:	movne	r1, #0
     768:	cmp	r1, #0
     76c:	movne	r1, #1
     770:	moveq	r1, #0
     774:	b	784 <clean_path+0x1d4>
     778:	mov	r1, #1
     77c:	b	784 <clean_path+0x1d4>
     780:	mov	r1, #0
     784:	cmp	r1, #0
     788:	beq	8b8 <clean_path+0x308>
     78c:	cmp	r2, #2
     790:	blt	7b0 <clean_path+0x200>
     794:	add	r3, r0, r2
     798:	sub	lr, r3, #4096	; 0x1000
     79c:	ldrb	r3, [lr, #4095]	; 0xfff
     7a0:	cmp	r3, #46	; 0x2e
     7a4:	moveq	r3, #1
     7a8:	movne	r3, #0
     7ac:	b	7b4 <clean_path+0x204>
     7b0:	mov	r3, #0
     7b4:	cmp	r3, #0
     7b8:	beq	7d8 <clean_path+0x228>
     7bc:	add	r3, r0, r2
     7c0:	sub	lr, r3, #4096	; 0x1000
     7c4:	ldrb	r3, [lr, #4094]	; 0xffe
     7c8:	cmp	r3, #46	; 0x2e
     7cc:	moveq	r3, #1
     7d0:	movne	r3, #0
     7d4:	b	7dc <clean_path+0x22c>
     7d8:	mov	r3, #0
     7dc:	cmp	r3, #0
     7e0:	beq	844 <clean_path+0x294>
     7e4:	cmp	r2, #2
     7e8:	beq	808 <clean_path+0x258>
     7ec:	add	r1, r0, r2
     7f0:	sub	lr, r1, #4096	; 0x1000
     7f4:	ldrb	r1, [lr, #4093]	; 0xffd
     7f8:	cmp	r1, #47	; 0x2f
     7fc:	moveq	r3, #1
     800:	movne	r3, #0
     804:	b	80c <clean_path+0x25c>
     808:	mov	r3, #1
     80c:	cmp	r3, #0
     810:	bne	83c <clean_path+0x28c>
     814:	add	r3, r0, r2
     818:	sub	lr, r3, #4096	; 0x1000
     81c:	ldrb	r3, [lr, #4093]	; 0xffd
     820:	cmp	r3, #92	; 0x5c
     824:	moveq	r3, #1
     828:	movne	r3, #0
     82c:	cmp	r3, #0
     830:	movne	r1, #1
     834:	moveq	r1, #0
     838:	b	848 <clean_path+0x298>
     83c:	mov	r1, #1
     840:	b	848 <clean_path+0x298>
     844:	mov	r1, #0
     848:	cmp	r1, #0
     84c:	bne	8b8 <clean_path+0x308>
     850:	sub	r1, r2, #1
     854:	cmp	r1, #0
     858:	blt	870 <clean_path+0x2c0>
     85c:	ldrb	r3, [r0, r1]
     860:	cmp	r3, #47	; 0x2f
     864:	movne	r3, #1
     868:	moveq	r3, #0
     86c:	b	874 <clean_path+0x2c4>
     870:	mov	r3, #0
     874:	cmp	r3, #0
     878:	beq	890 <clean_path+0x2e0>
     87c:	ldrb	r3, [r0, r1]
     880:	cmp	r3, #92	; 0x5c
     884:	movne	r3, #1
     888:	moveq	r3, #0
     88c:	b	894 <clean_path+0x2e4>
     890:	mov	r3, #0
     894:	cmp	r3, #0
     898:	beq	8a4 <clean_path+0x2f4>
     89c:	sub	r1, r1, #1
     8a0:	b	854 <clean_path+0x2a4>
     8a4:	cmp	r1, #0
     8a8:	blt	8b8 <clean_path+0x308>
     8ac:	mov	r2, r1
     8b0:	add	r4, r4, #3
     8b4:	b	62c <clean_path+0x7c>
     8b8:	ldrb	r3, [r0, r4]
     8bc:	and	r1, r3, #255	; 0xff
     8c0:	strb	r1, [r0, r2]
     8c4:	add	r4, r4, #1
     8c8:	add	r2, r2, #1
     8cc:	b	62c <clean_path+0x7c>
     8d0:	cmp	r2, #0
     8d4:	bne	8e4 <clean_path+0x334>
     8d8:	mov	ip, #46	; 0x2e
     8dc:	strb	ip, [r0, r2]
     8e0:	add	r2, r2, #1
     8e4:	mov	ip, #0
     8e8:	strb	ip, [r0, r2]
     8ec:	ldr	r4, [sp, #8]
     8f0:	ldr	lr, [sp, #4]
     8f4:	add	sp, sp, #16
     8f8:	bx	lr

000008fc <coda_path_find_file>:
     8fc:	mov	ip, sp
     900:	sub	sp, sp, #136	; 0x88
     904:	str	ip, [sp]
     908:	str	lr, [sp, #4]
     90c:	str	r4, [sp, #16]
     910:	str	r5, [sp, #20]
     914:	str	r6, [sp, #24]
     918:	str	r7, [sp, #28]
     91c:	str	r8, [sp, #32]
     920:	str	r9, [sp, #36]	; 0x24
     924:	str	sl, [sp, #40]	; 0x28
     928:	str	fp, [sp, #44]	; 0x2c
     92c:	mov	r5, r2
     930:	str	r1, [sp, #12]
     934:	mov	r4, r0
     938:	mov	r8, #58	; 0x3a
     93c:	mov	r7, #0
     940:	mov	r9, #0
     944:	ldr	r0, [sp, #12]
     948:	bl	0 <strlen>
     94c:	mov	r6, r0
     950:	cmp	r4, #0
     954:	beq	96c <coda_path_find_file+0x70>
     958:	ldrb	r2, [r4]
     95c:	cmp	r2, #0
     960:	moveq	ip, #1
     964:	movne	ip, #0
     968:	b	970 <coda_path_find_file+0x74>
     96c:	mov	ip, #1
     970:	cmp	ip, #0
     974:	beq	988 <coda_path_find_file+0x8c>
     978:	mov	r3, #0
     97c:	str	r3, [r5]
     980:	mov	r0, #0
     984:	b	b00 <coda_path_find_file+0x204>
     988:	mov	r0, r4
     98c:	bl	0 <strdup>
     990:	str	r0, [sp, #8]
     994:	ldr	r1, [sp, #8]
     998:	cmp	r1, #0
     99c:	bne	9bc <coda_path_find_file+0xc0>
     9a0:	mvn	r0, #0
     9a4:	ldr	r1, [pc, #392]	; b34 <coda_path_find_file+0x238>
     9a8:	ldr	r2, [pc, #384]	; b30 <coda_path_find_file+0x234>
     9ac:	movw	r3, #391	; 0x187
     9b0:	bl	0 <coda_set_error>
     9b4:	mvn	r0, #0
     9b8:	b	b00 <coda_path_find_file+0x204>
     9bc:	ldr	r4, [sp, #8]
     9c0:	ldrb	r1, [r4]
     9c4:	cmp	r1, #0
     9c8:	beq	adc <coda_path_find_file+0x1e0>
     9cc:	mov	fp, r4
     9d0:	ldrb	r3, [fp]
     9d4:	cmp	r3, #0
     9d8:	beq	9f0 <coda_path_find_file+0xf4>
     9dc:	ldrb	r0, [fp]
     9e0:	cmp	r0, r8
     9e4:	movne	r0, #1
     9e8:	moveq	r0, #0
     9ec:	b	9f4 <coda_path_find_file+0xf8>
     9f0:	mov	r0, #0
     9f4:	cmp	r0, #0
     9f8:	beq	a04 <coda_path_find_file+0x108>
     9fc:	add	fp, fp, #1
     a00:	b	9d0 <coda_path_find_file+0xd4>
     a04:	ldrb	r0, [fp]
     a08:	cmp	r0, #0
     a0c:	beq	a1c <coda_path_find_file+0x120>
     a10:	mov	r1, #0
     a14:	strb	r1, [fp]
     a18:	add	fp, fp, #1
     a1c:	mov	r0, r4
     a20:	bl	0 <strlen>
     a24:	mov	sl, r0
     a28:	add	r3, sl, r6
     a2c:	add	r1, r3, #1
     a30:	cmp	r9, r1
     a34:	bge	a88 <coda_path_find_file+0x18c>
     a38:	add	r1, sl, r6
     a3c:	add	r1, r1, #2
     a40:	mov	r0, r7
     a44:	bl	0 <realloc>
     a48:	cmp	r0, #0
     a4c:	bne	a7c <coda_path_find_file+0x180>
     a50:	mvn	r0, #0
     a54:	ldr	r1, [pc, #216]	; b34 <coda_path_find_file+0x238>
     a58:	ldr	r2, [pc, #208]	; b30 <coda_path_find_file+0x234>
     a5c:	movw	r3, #421	; 0x1a5
     a60:	bl	0 <coda_set_error>
     a64:	cmp	r7, #0
     a68:	beq	a74 <coda_path_find_file+0x178>
     a6c:	mov	r0, r7
     a70:	bl	0 <free>
     a74:	mvn	r0, #0
     a78:	b	b00 <coda_path_find_file+0x204>
     a7c:	mov	r7, r0
     a80:	add	ip, sl, r6
     a84:	add	r9, ip, #1
     a88:	ldr	r1, [pc, #156]	; b2c <coda_path_find_file+0x230>
     a8c:	ldr	r3, [sp, #12]
     a90:	mov	r2, r4
     a94:	mov	r0, r7
     a98:	bl	0 <sprintf>
     a9c:	add	r1, sp, #48	; 0x30
     aa0:	mov	r0, r7
     aa4:	bl	0 <stat>
     aa8:	cmp	r0, #0
     aac:	bne	ad4 <coda_path_find_file+0x1d8>
     ab0:	ldr	ip, [sp, #64]	; 0x40
     ab4:	and	r2, ip, #32768	; 0x8000
     ab8:	cmp	r2, #0
     abc:	beq	ad4 <coda_path_find_file+0x1d8>
     ac0:	str	r7, [r5]
     ac4:	ldr	r0, [sp, #8]
     ac8:	bl	0 <free>
     acc:	mov	r0, #0
     ad0:	b	b00 <coda_path_find_file+0x204>
     ad4:	mov	r4, fp
     ad8:	b	9c0 <coda_path_find_file+0xc4>
     adc:	cmp	r7, #0
     ae0:	beq	aec <coda_path_find_file+0x1f0>
     ae4:	mov	r0, r7
     ae8:	bl	0 <free>
     aec:	ldr	r0, [sp, #8]
     af0:	bl	0 <free>
     af4:	mov	r2, #0
     af8:	str	r2, [r5]
     afc:	mov	r0, #0
     b00:	ldr	r4, [sp, #16]
     b04:	ldr	r5, [sp, #20]
     b08:	ldr	r6, [sp, #24]
     b0c:	ldr	r7, [sp, #28]
     b10:	ldr	r8, [sp, #32]
     b14:	ldr	r9, [sp, #36]	; 0x24
     b18:	ldr	sl, [sp, #40]	; 0x28
     b1c:	ldr	fp, [sp, #44]	; 0x2c
     b20:	ldr	lr, [sp, #4]
     b24:	add	sp, sp, #136	; 0x88
     b28:	bx	lr
     b2c:	.word	0x00000084
     b30:	.word	0x00000024
     b34:	.word	0x00000127

00000b38 <coda_path_from_path>:
     b38:	mov	ip, sp
     b3c:	sub	sp, sp, #32
     b40:	str	ip, [sp]
     b44:	str	lr, [sp, #4]
     b48:	str	r4, [sp, #8]
     b4c:	str	r5, [sp, #12]
     b50:	str	r6, [sp, #16]
     b54:	str	r7, [sp, #20]
     b58:	str	r8, [sp, #24]
     b5c:	str	r9, [sp, #28]
     b60:	mov	r9, r3
     b64:	mov	r5, r2
     b68:	mov	r6, r1
     b6c:	mov	r8, r0
     b70:	mov	r0, r8
     b74:	bl	0 <strlen>
     b78:	mov	r7, r0
     b7c:	cmp	r5, #0
     b80:	beq	b90 <coda_path_from_path+0x58>
     b84:	mov	r0, r5
     b88:	bl	0 <strlen>
     b8c:	b	b94 <coda_path_from_path+0x5c>
     b90:	mov	r0, #0
     b94:	mov	r4, r0
     b98:	cmp	r6, #0
     b9c:	bne	ba8 <coda_path_from_path+0x70>
     ba0:	mov	r1, #0
     ba4:	b	bb4 <coda_path_from_path+0x7c>
     ba8:	cmp	r7, #0
     bac:	movgt	r1, #1
     bb0:	movle	r1, #0
     bb4:	cmp	r1, #0
     bb8:	beq	c1c <coda_path_from_path+0xe4>
     bbc:	cmp	r7, #0
     bc0:	ble	be0 <coda_path_from_path+0xa8>
     bc4:	add	r2, r8, r7
     bc8:	sub	lr, r2, #4096	; 0x1000
     bcc:	ldrb	r2, [lr, #4095]	; 0xfff
     bd0:	cmp	r2, #47	; 0x2f
     bd4:	movne	r1, #1
     bd8:	moveq	r1, #0
     bdc:	b	be4 <coda_path_from_path+0xac>
     be0:	mov	r1, #0
     be4:	cmp	r1, #0
     be8:	beq	c08 <coda_path_from_path+0xd0>
     bec:	add	r0, r8, r7
     bf0:	sub	lr, r0, #4096	; 0x1000
     bf4:	ldrb	r1, [lr, #4095]	; 0xfff
     bf8:	cmp	r1, #92	; 0x5c
     bfc:	movne	r3, #1
     c00:	moveq	r3, #0
     c04:	b	c0c <coda_path_from_path+0xd4>
     c08:	mov	r3, #0
     c0c:	cmp	r3, #0
     c10:	beq	c1c <coda_path_from_path+0xe4>
     c14:	sub	r7, r7, #1
     c18:	b	bbc <coda_path_from_path+0x84>
     c1c:	add	r2, r7, r4
     c20:	add	r0, r2, #2
     c24:	bl	0 <malloc>
     c28:	str	r0, [r9]
     c2c:	ldr	r3, [r9]
     c30:	cmp	r3, #0
     c34:	bne	c54 <coda_path_from_path+0x11c>
     c38:	mvn	r0, #0
     c3c:	ldr	r1, [pc, #156]	; ce0 <coda_path_from_path+0x1a8>
     c40:	ldr	r2, [pc, #148]	; cdc <coda_path_from_path+0x1a4>
     c44:	movw	r3, #481	; 0x1e1
     c48:	bl	0 <coda_set_error>
     c4c:	mvn	r0, #0
     c50:	b	cb8 <coda_path_from_path+0x180>
     c54:	ldr	r6, [r9]
     c58:	cmp	r7, #0
     c5c:	ble	c88 <coda_path_from_path+0x150>
     c60:	mov	r2, r7
     c64:	mov	r1, r8
     c68:	mov	r0, r6
     c6c:	bl	0 <memcpy>
     c70:	add	r6, r6, r7
     c74:	cmp	r4, #0
     c78:	ble	c88 <coda_path_from_path+0x150>
     c7c:	mov	r0, #47	; 0x2f
     c80:	strb	r0, [r6]
     c84:	add	r6, r6, #1
     c88:	cmp	r4, #0
     c8c:	ble	ca4 <coda_path_from_path+0x16c>
     c90:	mov	r2, r4
     c94:	mov	r1, r5
     c98:	mov	r0, r6
     c9c:	bl	0 <memcpy>
     ca0:	add	r6, r6, r4
     ca4:	mov	r3, #0
     ca8:	strb	r3, [r6]
     cac:	ldr	r0, [r9]
     cb0:	bl	5b0 <clean_path>
     cb4:	mov	r0, #0
     cb8:	ldr	r4, [sp, #8]
     cbc:	ldr	r5, [sp, #12]
     cc0:	ldr	r6, [sp, #16]
     cc4:	ldr	r7, [sp, #20]
     cc8:	ldr	r8, [sp, #24]
     ccc:	ldr	r9, [sp, #28]
     cd0:	ldr	lr, [sp, #4]
     cd4:	add	sp, sp, #32
     cd8:	bx	lr
     cdc:	.word	0x00000024
     ce0:	.word	0x00000127

00000ce4 <coda_path_for_program>:
     ce4:	mov	ip, sp
     ce8:	sub	sp, sp, #24
     cec:	sub	sp, sp, #1024	; 0x400
     cf0:	str	ip, [sp]
     cf4:	str	lr, [sp, #4]
     cf8:	str	r4, [sp, #8]
     cfc:	str	r5, [sp, #12]
     d00:	mov	r5, r1
     d04:	mov	r4, r0
     d08:	mov	r1, #0
     d0c:	mov	r0, #0
     d10:	str	r0, [r5]
     d14:	cmp	r4, #0
     d18:	bne	d24 <coda_path_for_program+0x40>
     d1c:	mov	r0, #0
     d20:	b	ef8 <coda_path_for_program+0x214>
     d24:	mov	r0, r4
     d28:	ldrb	r2, [r0]
     d2c:	cmp	r2, #0
     d30:	beq	d70 <coda_path_for_program+0x8c>
     d34:	ldrb	r3, [r0]
     d38:	cmp	r3, #47	; 0x2f
     d3c:	beq	d54 <coda_path_for_program+0x70>
     d40:	ldrb	r2, [r0]
     d44:	cmp	r2, #92	; 0x5c
     d48:	moveq	r2, #1
     d4c:	movne	r2, #0
     d50:	b	d58 <coda_path_for_program+0x74>
     d54:	mov	r2, #1
     d58:	cmp	r2, #0
     d5c:	beq	d68 <coda_path_for_program+0x84>
     d60:	mov	r1, #1
     d64:	b	d70 <coda_path_for_program+0x8c>
     d68:	add	r0, r0, #1
     d6c:	b	d28 <coda_path_for_program+0x44>
     d70:	cmp	r1, #0
     d74:	beq	dac <coda_path_for_program+0xc8>
     d78:	mov	r0, r4
     d7c:	bl	0 <strdup>
     d80:	str	r0, [r5]
     d84:	ldr	ip, [r5]
     d88:	cmp	ip, #0
     d8c:	bne	de8 <coda_path_for_program+0x104>
     d90:	mvn	r0, #0
     d94:	ldr	r1, [pc, #372]	; f10 <coda_path_for_program+0x22c>
     d98:	ldr	r2, [pc, #364]	; f0c <coda_path_for_program+0x228>
     d9c:	movw	r3, #537	; 0x219
     da0:	bl	0 <coda_set_error>
     da4:	mvn	r0, #0
     da8:	b	ef8 <coda_path_for_program+0x214>
     dac:	ldr	r0, [pc, #352]	; f14 <coda_path_for_program+0x230>
     db0:	bl	0 <getenv>
     db4:	cmp	r0, #0
     db8:	beq	de0 <coda_path_for_program+0xfc>
     dbc:	ldr	r0, [pc, #336]	; f14 <coda_path_for_program+0x230>
     dc0:	bl	0 <getenv>
     dc4:	mov	r2, r5
     dc8:	mov	r1, r4
     dcc:	bl	8fc <coda_path_find_file>
     dd0:	cmp	r0, #0
     dd4:	beq	de8 <coda_path_for_program+0x104>
     dd8:	mvn	r0, #0
     ddc:	b	ef8 <coda_path_for_program+0x214>
     de0:	mov	r0, #0
     de4:	str	r0, [r5]
     de8:	ldr	ip, [r5]
     dec:	cmp	ip, #0
     df0:	beq	e0c <coda_path_for_program+0x128>
     df4:	ldr	r3, [r5]
     df8:	ldrb	r2, [r3]
     dfc:	cmp	r2, #47	; 0x2f
     e00:	movne	ip, #1
     e04:	moveq	ip, #0
     e08:	b	e10 <coda_path_for_program+0x12c>
     e0c:	mov	ip, #0
     e10:	cmp	ip, #0
     e14:	beq	e30 <coda_path_for_program+0x14c>
     e18:	ldr	r0, [r5]
     e1c:	ldrb	r2, [r0]
     e20:	cmp	r2, #92	; 0x5c
     e24:	movne	r1, #1
     e28:	moveq	r1, #0
     e2c:	b	e34 <coda_path_for_program+0x150>
     e30:	mov	r1, #0
     e34:	cmp	r1, #0
     e38:	beq	e8c <coda_path_for_program+0x1a8>
     e3c:	bl	0 <__ctype_b_loc>
     e40:	ldr	r2, [r0]
     e44:	ldr	r1, [r5]
     e48:	ldrb	r3, [r1]
     e4c:	add	ip, r2, r3, lsl #1
     e50:	ldrh	r3, [ip]
     e54:	and	r1, r3, #1024	; 0x400
     e58:	cmp	r1, #0
     e5c:	beq	e78 <coda_path_for_program+0x194>
     e60:	ldr	r3, [r5]
     e64:	ldrb	r3, [r3, #1]
     e68:	cmp	r3, #58	; 0x3a
     e6c:	moveq	r1, #1
     e70:	movne	r1, #0
     e74:	b	e7c <coda_path_for_program+0x198>
     e78:	mov	r1, #0
     e7c:	cmp	r1, #0
     e80:	moveq	r3, #1
     e84:	movne	r3, #0
     e88:	b	e90 <coda_path_for_program+0x1ac>
     e8c:	mov	r3, #0
     e90:	cmp	r3, #0
     e94:	beq	ef4 <coda_path_for_program+0x210>
     e98:	add	r0, sp, #16
     e9c:	mov	r1, #1024	; 0x400
     ea0:	bl	0 <getcwd>
     ea4:	cmp	r0, #0
     ea8:	bne	eb4 <coda_path_for_program+0x1d0>
     eac:	mov	r0, #0
     eb0:	b	ef8 <coda_path_for_program+0x214>
     eb4:	mov	ip, #0
     eb8:	strb	ip, [sp, #1040]	; 0x410
     ebc:	ldr	r4, [r5]
     ec0:	add	r0, sp, #16
     ec4:	mov	r1, #0
     ec8:	mov	r3, r5
     ecc:	mov	r2, r4
     ed0:	bl	b38 <coda_path_from_path>
     ed4:	cmp	r0, #0
     ed8:	beq	eec <coda_path_for_program+0x208>
     edc:	mov	r0, r4
     ee0:	bl	0 <free>
     ee4:	mvn	r0, #0
     ee8:	b	ef8 <coda_path_for_program+0x214>
     eec:	mov	r0, r4
     ef0:	bl	0 <free>
     ef4:	mov	r0, #0
     ef8:	ldr	r4, [sp, #8]
     efc:	ldr	r5, [sp, #12]
     f00:	ldr	lr, [sp, #4]
     f04:	ldr	sp, [sp]
     f08:	bx	lr
     f0c:	.word	0x00000024
     f10:	.word	0x00000127
     f14:	.word	0x00000005

00000f18 <coda_isNaN>:
     f18:	mov	ip, sp
     f1c:	sub	sp, sp, #24
     f20:	str	ip, [sp]
     f24:	str	lr, [sp, #4]
     f28:	str	r4, [sp, #8]
     f2c:	vstr	d0, [sp, #16]
     f30:	movw	r0, #32752	; 0x7ff0
     f34:	lsl	r1, r0, #16
     f38:	mov	r2, #0
     f3c:	ldr	r4, [sp, #16]
     f40:	ldr	r3, [sp, #20]
     f44:	mov	ip, r1
     f48:	and	r0, r3, ip
     f4c:	mov	ip, r2
     f50:	and	r3, r4, ip
     f54:	eor	r1, r0, r1
     f58:	eor	r0, r3, r2
     f5c:	orr	r0, r1, r0
     f60:	cmp	r0, #0
     f64:	beq	f70 <coda_isNaN+0x58>
     f68:	mov	r0, #0
     f6c:	b	fb0 <coda_isNaN+0x98>
     f70:	mov	r2, #1
     f74:	lsl	ip, r2, #20
     f78:	mov	r3, #0
     f7c:	mov	r1, #0
     f80:	mov	r0, #1
     f84:	subs	lr, r3, r0
     f88:	sbc	r2, ip, r1
     f8c:	mov	r1, lr
     f90:	ldr	r3, [sp, #16]
     f94:	ldr	r0, [sp, #20]
     f98:	and	ip, r0, r2
     f9c:	and	r1, r3, r1
     fa0:	orr	r0, ip, r1
     fa4:	cmp	r0, #0
     fa8:	movne	r0, #1
     fac:	moveq	r0, #0
     fb0:	ldr	r4, [sp, #8]
     fb4:	ldr	lr, [sp, #4]
     fb8:	add	sp, sp, #24
     fbc:	bx	lr

00000fc0 <coda_NaN>:
     fc0:	mov	ip, sp
     fc4:	sub	sp, sp, #16
     fc8:	str	ip, [sp]
     fcc:	str	lr, [sp, #4]
     fd0:	mov	r3, #0
     fd4:	movw	r2, #32760	; 0x7ff8
     fd8:	str	r2, [sp, #8]
     fdc:	str	r3, [sp, #12]
     fe0:	ldr	ip, [sp, #8]
     fe4:	lsl	r1, ip, #16
     fe8:	mov	r0, #0
     fec:	str	r0, [sp, #8]
     ff0:	str	r1, [sp, #12]
     ff4:	vldr	d0, [sp, #8]
     ff8:	ldr	lr, [sp, #4]
     ffc:	add	sp, sp, #16
    1000:	bx	lr

00001004 <coda_isInf>:
    1004:	mov	ip, sp
    1008:	sub	sp, sp, #16
    100c:	str	ip, [sp]
    1010:	str	lr, [sp, #4]
    1014:	vstr	d8, [sp, #8]
    1018:	vmov.f64	d8, d0
    101c:	vmov.f64	d0, d8
    1020:	bl	1058 <coda_isPlusInf>
    1024:	cmp	r0, #0
    1028:	bne	1044 <coda_isInf+0x40>
    102c:	vmov.f64	d0, d8
    1030:	bl	10a4 <coda_isMinInf>
    1034:	cmp	r0, #0
    1038:	movne	r0, #1
    103c:	moveq	r0, #0
    1040:	b	1048 <coda_isInf+0x44>
    1044:	mov	r0, #1
    1048:	vldr	d8, [sp, #8]
    104c:	ldr	lr, [sp, #4]
    1050:	add	sp, sp, #16
    1054:	bx	lr

00001058 <coda_isPlusInf>:
    1058:	mov	ip, sp
    105c:	sub	sp, sp, #16
    1060:	str	ip, [sp]
    1064:	str	lr, [sp, #4]
    1068:	vstr	d0, [sp, #8]
    106c:	movw	r3, #32752	; 0x7ff0
    1070:	lsl	r3, r3, #16
    1074:	mov	r0, #0
    1078:	ldr	r1, [sp, #8]
    107c:	ldr	r2, [sp, #12]
    1080:	eor	ip, r2, r3
    1084:	eor	r1, r1, r0
    1088:	orr	r0, ip, r1
    108c:	cmp	r0, #0
    1090:	moveq	r0, #1
    1094:	movne	r0, #0
    1098:	ldr	lr, [sp, #4]
    109c:	add	sp, sp, #16
    10a0:	bx	lr

000010a4 <coda_isMinInf>:
    10a4:	mov	ip, sp
    10a8:	sub	sp, sp, #16
    10ac:	str	ip, [sp]
    10b0:	str	lr, [sp, #4]
    10b4:	vstr	d0, [sp, #8]
    10b8:	movw	r3, #65520	; 0xfff0
    10bc:	lsl	r3, r3, #16
    10c0:	mov	r0, #0
    10c4:	ldr	r1, [sp, #8]
    10c8:	ldr	r2, [sp, #12]
    10cc:	eor	ip, r2, r3
    10d0:	eor	r1, r1, r0
    10d4:	orr	r0, ip, r1
    10d8:	cmp	r0, #0
    10dc:	moveq	r0, #1
    10e0:	movne	r0, #0
    10e4:	ldr	lr, [sp, #4]
    10e8:	add	sp, sp, #16
    10ec:	bx	lr

000010f0 <coda_PlusInf>:
    10f0:	mov	ip, sp
    10f4:	sub	sp, sp, #16
    10f8:	str	ip, [sp]
    10fc:	str	lr, [sp, #4]
    1100:	mov	r3, #0
    1104:	movw	r2, #32752	; 0x7ff0
    1108:	str	r2, [sp, #8]
    110c:	str	r3, [sp, #12]
    1110:	ldr	ip, [sp, #8]
    1114:	lsl	r1, ip, #16
    1118:	mov	r0, #0
    111c:	str	r0, [sp, #8]
    1120:	str	r1, [sp, #12]
    1124:	vldr	d0, [sp, #8]
    1128:	ldr	lr, [sp, #4]
    112c:	add	sp, sp, #16
    1130:	bx	lr

00001134 <coda_MinInf>:
    1134:	mov	ip, sp
    1138:	sub	sp, sp, #16
    113c:	str	ip, [sp]
    1140:	str	lr, [sp, #4]
    1144:	mov	r3, #0
    1148:	movw	r2, #65520	; 0xfff0
    114c:	str	r2, [sp, #8]
    1150:	str	r3, [sp, #12]
    1154:	ldr	ip, [sp, #8]
    1158:	lsl	r1, ip, #16
    115c:	mov	r0, #0
    1160:	str	r0, [sp, #8]
    1164:	str	r1, [sp, #12]
    1168:	vldr	d0, [sp, #8]
    116c:	ldr	lr, [sp, #4]
    1170:	add	sp, sp, #16
    1174:	bx	lr

00001178 <coda_str64>:
    1178:	mov	ip, sp
    117c:	sub	sp, sp, #8
    1180:	str	ip, [sp]
    1184:	str	lr, [sp, #4]
    1188:	cmp	r1, #0
    118c:	bge	11ac <coda_str64+0x34>
    1190:	mov	r3, #45	; 0x2d
    1194:	strb	r3, [r2]
    1198:	rsbs	r0, r0, #0
    119c:	rsc	r1, r1, #0
    11a0:	add	r2, r2, #1
    11a4:	bl	11bc <coda_str64u>
    11a8:	b	11b0 <coda_str64+0x38>
    11ac:	bl	11bc <coda_str64u>
    11b0:	ldr	lr, [sp, #4]
    11b4:	add	sp, sp, #8
    11b8:	bx	lr

000011bc <coda_str64u>:
    11bc:	mov	ip, sp
    11c0:	sub	sp, sp, #40	; 0x28
    11c4:	str	ip, [sp, #4]
    11c8:	str	lr, [sp, #8]
    11cc:	str	r4, [sp, #16]
    11d0:	str	r5, [sp, #20]
    11d4:	str	r6, [sp, #24]
    11d8:	str	r7, [sp, #28]
    11dc:	str	r8, [sp, #32]
    11e0:	mov	r6, r2
    11e4:	mov	r5, r1
    11e8:	mov	r4, r0
    11ec:	mov	r3, r4
    11f0:	mov	r2, r5
    11f4:	mov	ip, #0
    11f8:	cmp	r2, ip
    11fc:	bne	1210 <coda_str64u+0x54>
    1200:	mvn	ip, #0
    1204:	cmp	r3, ip
    1208:	bls	1340 <coda_str64u+0x184>
    120c:	b	1220 <coda_str64u+0x64>
    1210:	mov	r0, r5
    1214:	mov	r1, #0
    1218:	cmp	r0, r1
    121c:	bcc	1340 <coda_str64u+0x184>
    1220:	movw	r3, #30481	; 0x7711
    1224:	movt	r3, #43980	; 0xabcc
    1228:	movw	r2, #52989	; 0xcefd
    122c:	movt	r2, #33889	; 0x8461
    1230:	mov	r1, r5
    1234:	mov	r0, r4
    1238:	bl	0 <__compcert_i64_umulh>
    123c:	lsr	ip, r1, #26
    1240:	lsr	r0, r0, #26
    1244:	orr	r3, r0, r1, lsl #6
    1248:	movw	r0, #57600	; 0xe100
    124c:	movt	r0, #1525	; 0x5f5
    1250:	umull	r0, r1, r3, r0
    1254:	movw	r2, #57600	; 0xe100
    1258:	movt	r2, #1525	; 0x5f5
    125c:	mla	r3, r2, ip, r1
    1260:	subs	r7, r4, r0
    1264:	sbc	r3, r5, r3
    1268:	mov	r1, r5
    126c:	mov	r0, r4
    1270:	movw	r3, #30481	; 0x7711
    1274:	movt	r3, #43980	; 0xabcc
    1278:	movw	r2, #52989	; 0xcefd
    127c:	movt	r2, #33889	; 0x8461
    1280:	bl	0 <__compcert_i64_umulh>
    1284:	lsr	r5, r1, #26
    1288:	lsr	r2, r0, #26
    128c:	orr	r4, r2, r1, lsl #6
    1290:	movw	r3, #30481	; 0x7711
    1294:	movt	r3, #43980	; 0xabcc
    1298:	movw	r2, #52989	; 0xcefd
    129c:	movt	r2, #33889	; 0x8461
    12a0:	mov	r1, r5
    12a4:	mov	r0, r4
    12a8:	bl	0 <__compcert_i64_umulh>
    12ac:	lsr	r2, r1, #26
    12b0:	lsr	r3, r0, #26
    12b4:	orr	ip, r3, r1, lsl #6
    12b8:	movw	r0, #57600	; 0xe100
    12bc:	movt	r0, #1525	; 0x5f5
    12c0:	umull	r0, ip, ip, r0
    12c4:	movw	r3, #57600	; 0xe100
    12c8:	movt	r3, #1525	; 0x5f5
    12cc:	mla	r1, r3, r2, ip
    12d0:	subs	r8, r4, r0
    12d4:	sbc	r0, r5, r1
    12d8:	movw	r3, #30481	; 0x7711
    12dc:	movt	r3, #43980	; 0xabcc
    12e0:	movw	r2, #52989	; 0xcefd
    12e4:	movt	r2, #33889	; 0x8461
    12e8:	mov	r1, r5
    12ec:	mov	r0, r4
    12f0:	bl	0 <__compcert_i64_umulh>
    12f4:	lsr	r3, r1, #26
    12f8:	lsr	r0, r0, #26
    12fc:	orr	r2, r0, r1, lsl #6
    1300:	mov	ip, r2
    1304:	orr	r3, r3, ip
    1308:	cmp	r3, #0
    130c:	beq	1328 <coda_str64u+0x16c>
    1310:	ldr	r1, [pc, #88]	; 1370 <coda_str64u+0x1b4>
    1314:	str	r7, [sp]
    1318:	mov	r3, r8
    131c:	mov	r0, r6
    1320:	bl	0 <sprintf>
    1324:	b	1350 <coda_str64u+0x194>
    1328:	ldr	r1, [pc, #72]	; 1378 <coda_str64u+0x1bc>
    132c:	mov	r3, r7
    1330:	mov	r2, r8
    1334:	mov	r0, r6
    1338:	bl	0 <sprintf>
    133c:	b	1350 <coda_str64u+0x194>
    1340:	ldr	r1, [pc, #44]	; 1374 <coda_str64u+0x1b8>
    1344:	mov	r2, r4
    1348:	mov	r0, r6
    134c:	bl	0 <sprintf>
    1350:	ldr	r4, [sp, #16]
    1354:	ldr	r5, [sp, #20]
    1358:	ldr	r6, [sp, #24]
    135c:	ldr	r7, [sp, #28]
    1360:	ldr	r8, [sp, #32]
    1364:	ldr	lr, [sp, #8]
    1368:	add	sp, sp, #40	; 0x28
    136c:	bx	lr
    1370:	.word	0x000000b4
    1374:	.word	0x0000015a
    1378:	.word	0x00000013

0000137c <coda_strfl>:
    137c:	mov	ip, sp
    1380:	sub	sp, sp, #24
    1384:	str	ip, [sp]
    1388:	str	lr, [sp, #4]
    138c:	str	r4, [sp, #8]
    1390:	vstr	d8, [sp, #16]
    1394:	mov	r4, r0
    1398:	vmov.f64	d8, d0
    139c:	vmov.f64	d0, d8
    13a0:	bl	f18 <coda_isNaN>
    13a4:	cmp	r0, #0
    13a8:	bne	1404 <coda_strfl+0x88>
    13ac:	vmov.f64	d0, d8
    13b0:	bl	1058 <coda_isPlusInf>
    13b4:	cmp	r0, #0
    13b8:	bne	13f4 <coda_strfl+0x78>
    13bc:	vmov.f64	d0, d8
    13c0:	bl	10a4 <coda_isMinInf>
    13c4:	cmp	r0, #0
    13c8:	bne	13e4 <coda_strfl+0x68>
    13cc:	ldr	r1, [pc, #88]	; 142c <coda_strfl+0xb0>
    13d0:	vmov.f64	d2, d8
    13d4:	mov	r0, r4
    13d8:	vmov	r2, r3, d2
    13dc:	bl	0 <sprintf>
    13e0:	b	1410 <coda_strfl+0x94>
    13e4:	ldr	r1, [pc, #56]	; 1424 <coda_strfl+0xa8>
    13e8:	mov	r0, r4
    13ec:	bl	0 <strcpy>
    13f0:	b	1410 <coda_strfl+0x94>
    13f4:	ldr	r1, [pc, #44]	; 1428 <coda_strfl+0xac>
    13f8:	mov	r0, r4
    13fc:	bl	0 <strcpy>
    1400:	b	1410 <coda_strfl+0x94>
    1404:	ldr	r1, [pc, #36]	; 1430 <coda_strfl+0xb4>
    1408:	mov	r0, r4
    140c:	bl	0 <strcpy>
    1410:	ldr	r4, [sp, #8]
    1414:	vldr	d8, [sp, #16]
    1418:	ldr	lr, [sp, #4]
    141c:	add	sp, sp, #24
    1420:	bx	lr
    1424:	.word	0x00000193
    1428:	.word	0x00000099
    142c:	.word	0x000000c2
    1430:	.word	0x000000cf
