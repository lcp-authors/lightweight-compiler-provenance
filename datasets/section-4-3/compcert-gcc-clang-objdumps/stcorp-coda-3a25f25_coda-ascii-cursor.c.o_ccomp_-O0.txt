
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-ascii-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #112	; 0x70
       8:	str	ip, [sp, #4]
       c:	str	lr, [sp, #8]
      10:	str	r4, [sp, #16]
      14:	str	r5, [sp, #20]
      18:	str	r6, [sp, #24]
      1c:	str	r7, [sp, #28]
      20:	str	r8, [sp, #32]
      24:	str	r9, [sp, #36]	; 0x24
      28:	ldr	r7, [ip, #8]
      2c:	ldr	r9, [ip, #4]
      30:	ldr	r6, [ip]
      34:	mov	r8, r3
      38:	mov	r5, r2
      3c:	mov	r4, r0
      40:	ldr	r1, [r4, #48]	; 0x30
      44:	cmp	r1, #0
      48:	bne	110 <read_bytes+0x110>
      4c:	ldr	r0, [r4, #16]
      50:	cmp	r0, #0
      54:	beq	6c <read_bytes+0x6c>
      58:	ldr	r2, [r4, #16]
      5c:	cmp	r2, #1
      60:	moveq	r0, #1
      64:	movne	r0, #0
      68:	b	70 <read_bytes+0x70>
      6c:	mov	r0, #1
      70:	cmp	r0, #0
      74:	bne	8c <read_bytes+0x8c>
      78:	ldr	r0, [pc, #408]	; 218 <read_bytes+0x218>
      7c:	ldr	r1, [pc, #408]	; 21c <read_bytes+0x21c>
      80:	mov	r2, #83	; 0x53
      84:	ldr	r3, [pc, #404]	; 220 <read_bytes+0x220>
      88:	bl	0 <__assert_fail>
      8c:	adds	r0, r5, r6
      90:	adc	r3, r8, r9
      94:	ldr	r1, [r4, #8]
      98:	ldr	ip, [r4, #12]
      9c:	cmp	r3, ip
      a0:	bne	b0 <read_bytes+0xb0>
      a4:	cmp	r0, r1
      a8:	bhi	b8 <read_bytes+0xb8>
      ac:	b	cc <read_bytes+0xcc>
      b0:	cmp	r3, ip
      b4:	bls	cc <read_bytes+0xcc>
      b8:	mvn	r0, #300	; 0x12c
      bc:	ldr	r1, [pc, #328]	; 20c <read_bytes+0x20c>
      c0:	bl	0 <coda_set_error>
      c4:	mvn	r0, #0
      c8:	b	1e8 <read_bytes+0x1e8>
      cc:	ldr	r0, [r4, #56]	; 0x38
      d0:	mov	r2, r6
      d4:	mov	r3, r5
      d8:	mov	r1, r7
      dc:	bl	0 <pread>
      e0:	cmp	r0, #0
      e4:	bge	1e4 <read_bytes+0x1e4>
      e8:	bl	0 <__errno_location>
      ec:	ldr	r0, [r0]
      f0:	bl	0 <strerror>
      f4:	mvn	r3, #21
      f8:	ldr	r1, [pc, #276]	; 214 <read_bytes+0x214>
      fc:	mov	r2, r0
     100:	mov	r0, r3
     104:	bl	0 <coda_set_error>
     108:	mvn	r0, #0
     10c:	b	1e8 <read_bytes+0x1e8>
     110:	adds	ip, r5, r6
     114:	adc	r1, r8, r9
     118:	ldr	r2, [r4, #40]	; 0x28
     11c:	ldr	r3, [r4, #44]	; 0x2c
     120:	cmp	r1, r3
     124:	bne	134 <read_bytes+0x134>
     128:	cmp	ip, r2
     12c:	bhi	13c <read_bytes+0x13c>
     130:	b	1d0 <read_bytes+0x1d0>
     134:	cmp	r1, r3
     138:	bls	1d0 <read_bytes+0x1d0>
     13c:	ldr	r1, [r4, #16]
     140:	cmp	r1, #0
     144:	beq	15c <read_bytes+0x15c>
     148:	ldr	r2, [r4, #16]
     14c:	cmp	r2, #1
     150:	moveq	ip, #1
     154:	movne	ip, #0
     158:	b	160 <read_bytes+0x160>
     15c:	mov	ip, #1
     160:	cmp	ip, #0
     164:	bne	1bc <read_bytes+0x1bc>
     168:	add	r2, sp, #64	; 0x40
     16c:	mov	r1, r9
     170:	mov	r0, r6
     174:	bl	0 <coda_str64>
     178:	add	r2, sp, #88	; 0x58
     17c:	mov	r1, r8
     180:	mov	r0, r5
     184:	bl	0 <coda_str64>
     188:	ldr	r0, [r4, #40]	; 0x28
     18c:	ldr	r1, [r4, #44]	; 0x2c
     190:	add	r2, sp, #40	; 0x28
     194:	bl	0 <coda_str64>
     198:	mvn	r0, #300	; 0x12c
     19c:	ldr	r1, [pc, #108]	; 210 <read_bytes+0x210>
     1a0:	add	r2, sp, #64	; 0x40
     1a4:	add	r3, sp, #88	; 0x58
     1a8:	add	r4, sp, #40	; 0x28
     1ac:	str	r4, [sp]
     1b0:	bl	0 <coda_set_error>
     1b4:	mvn	r0, #0
     1b8:	b	1e8 <read_bytes+0x1e8>
     1bc:	mvn	r0, #300	; 0x12c
     1c0:	ldr	r1, [pc, #68]	; 20c <read_bytes+0x20c>
     1c4:	bl	0 <coda_set_error>
     1c8:	mvn	r0, #0
     1cc:	b	1e8 <read_bytes+0x1e8>
     1d0:	ldr	r2, [r4, #48]	; 0x30
     1d4:	add	r1, r2, r5
     1d8:	mov	r2, r6
     1dc:	mov	r0, r7
     1e0:	bl	0 <memcpy>
     1e4:	mov	r0, #0
     1e8:	ldr	r4, [sp, #16]
     1ec:	ldr	r5, [sp, #20]
     1f0:	ldr	r6, [sp, #24]
     1f4:	ldr	r7, [sp, #28]
     1f8:	ldr	r8, [sp, #32]
     1fc:	ldr	r9, [sp, #36]	; 0x24
     200:	ldr	lr, [sp, #8]
     204:	add	sp, sp, #112	; 0x70
     208:	bx	lr
     20c:	.word	0x00000884
     210:	.word	0x000003c6
     214:	.word	0x00000260
     218:	.word	0x000008d0
     21c:	.word	0x000002ab
     220:	.word	0x000009e1

00000224 <read_bytes_in_bounds>:
     224:	mov	ip, sp
     228:	sub	sp, sp, #24
     22c:	str	ip, [sp]
     230:	str	lr, [sp, #4]
     234:	str	r4, [sp, #8]
     238:	str	r5, [sp, #12]
     23c:	str	r6, [sp, #16]
     240:	str	r7, [sp, #20]
     244:	ldr	r6, [ip, #8]
     248:	ldr	r5, [ip]
     24c:	mov	r4, r2
     250:	mov	r7, r0
     254:	ldr	r1, [r7, #48]	; 0x30
     258:	cmp	r1, #0
     25c:	bne	2e0 <read_bytes_in_bounds+0xbc>
     260:	ldr	r0, [r7, #16]
     264:	cmp	r0, #0
     268:	beq	280 <read_bytes_in_bounds+0x5c>
     26c:	ldr	r1, [r7, #16]
     270:	cmp	r1, #1
     274:	moveq	ip, #1
     278:	movne	ip, #0
     27c:	b	284 <read_bytes_in_bounds+0x60>
     280:	mov	ip, #1
     284:	cmp	ip, #0
     288:	bne	2a0 <read_bytes_in_bounds+0x7c>
     28c:	ldr	r0, [pc, #132]	; 318 <read_bytes_in_bounds+0xf4>
     290:	ldr	r1, [pc, #132]	; 31c <read_bytes_in_bounds+0xf8>
     294:	mov	r2, #62	; 0x3e
     298:	ldr	r3, [pc, #128]	; 320 <read_bytes_in_bounds+0xfc>
     29c:	bl	0 <__assert_fail>
     2a0:	ldr	r0, [r7, #56]	; 0x38
     2a4:	mov	r3, r4
     2a8:	mov	r2, r5
     2ac:	mov	r1, r6
     2b0:	bl	0 <pread>
     2b4:	cmp	r0, #0
     2b8:	bge	2f4 <read_bytes_in_bounds+0xd0>
     2bc:	bl	0 <__errno_location>
     2c0:	ldr	r0, [r0]
     2c4:	bl	0 <strerror>
     2c8:	mov	r2, r0
     2cc:	mvn	r0, #21
     2d0:	ldr	r1, [pc, #60]	; 314 <read_bytes_in_bounds+0xf0>
     2d4:	bl	0 <coda_set_error>
     2d8:	mvn	r0, #0
     2dc:	b	2f8 <read_bytes_in_bounds+0xd4>
     2e0:	ldr	r0, [r7, #48]	; 0x30
     2e4:	add	r1, r0, r4
     2e8:	mov	r2, r5
     2ec:	mov	r0, r6
     2f0:	bl	0 <memcpy>
     2f4:	mov	r0, #0
     2f8:	ldr	r4, [sp, #8]
     2fc:	ldr	r5, [sp, #12]
     300:	ldr	r6, [sp, #16]
     304:	ldr	r7, [sp, #20]
     308:	ldr	lr, [sp, #4]
     30c:	add	sp, sp, #24
     310:	bx	lr
     314:	.word	0x00000260
     318:	.word	0x000008d0
     31c:	.word	0x000004d5
     320:	.word	0x000009ec

00000324 <read_array>:
     324:	mov	ip, sp
     328:	sub	sp, sp, #640	; 0x280
     32c:	str	ip, [sp]
     330:	str	lr, [sp, #4]
     334:	str	r4, [sp, #8]
     338:	str	r5, [sp, #12]
     33c:	str	r6, [sp, #16]
     340:	str	r7, [sp, #20]
     344:	str	r8, [sp, #24]
     348:	str	r9, [sp, #28]
     34c:	str	sl, [sp, #32]
     350:	ldr	r8, [ip]
     354:	mov	r4, r3
     358:	mov	r5, r2
     35c:	mov	r6, r1
     360:	mov	r7, r0
     364:	add	r1, sp, #40	; 0x28
     368:	add	r2, sp, #48	; 0x30
     36c:	mov	r0, r7
     370:	bl	0 <coda_cursor_get_array_dim>
     374:	cmp	r0, #0
     378:	beq	384 <read_array+0x60>
     37c:	mvn	r0, #0
     380:	b	5e4 <read_array+0x2c0>
     384:	mov	r2, r7
     388:	add	r3, sp, #120	; 0x78
     38c:	mov	lr, #130	; 0x82
     390:	ldr	ip, [r2], #4
     394:	subs	lr, lr, #1
     398:	str	ip, [r3], #4
     39c:	bne	390 <read_array+0x6c>
     3a0:	ldr	r0, [sp, #40]	; 0x28
     3a4:	cmp	r0, #1
     3a8:	ble	3bc <read_array+0x98>
     3ac:	cmp	r8, #1
     3b0:	movne	r0, #1
     3b4:	moveq	r0, #0
     3b8:	b	3c0 <read_array+0x9c>
     3bc:	mov	r0, #1
     3c0:	cmp	r0, #0
     3c4:	bne	540 <read_array+0x21c>
     3c8:	mov	ip, #1
     3cc:	str	ip, [sp, #80]	; 0x50
     3d0:	mov	r2, #0
     3d4:	ldr	r1, [sp, #40]	; 0x28
     3d8:	cmp	r2, r1
     3dc:	bge	40c <read_array+0xe8>
     3e0:	add	r3, sp, #80	; 0x50
     3e4:	lsl	r1, r2, #2
     3e8:	add	r0, r3, r1
     3ec:	add	r1, sp, #80	; 0x50
     3f0:	ldr	r3, [r1, r2, lsl #2]
     3f4:	add	r1, sp, #48	; 0x30
     3f8:	ldr	r1, [r1, r2, lsl #2]
     3fc:	mul	ip, r3, r1
     400:	str	ip, [r0, #4]
     404:	add	r2, r2, #1
     408:	b	3d4 <read_array+0xb0>
     40c:	add	r0, sp, #80	; 0x50
     410:	ldr	r3, [sp, #40]	; 0x28
     414:	lsl	r1, r3, #2
     418:	add	ip, r0, r1
     41c:	sub	lr, ip, #4096	; 0x1000
     420:	ldr	r8, [lr, #4092]	; 0xffc
     424:	add	r3, sp, #80	; 0x50
     428:	ldr	r2, [sp, #40]	; 0x28
     42c:	ldr	r7, [r3, r2, lsl #2]
     430:	cmp	r7, #0
     434:	ble	5e0 <read_array+0x2bc>
     438:	mov	r9, #0
     43c:	mov	sl, #0
     440:	add	r0, sp, #120	; 0x78
     444:	mov	r1, #0
     448:	bl	0 <coda_cursor_goto_array_element_by_index>
     44c:	cmp	r0, #0
     450:	beq	45c <read_array+0x138>
     454:	mvn	r0, #0
     458:	b	5e4 <read_array+0x2c0>
     45c:	add	r0, sp, #120	; 0x78
     460:	mla	r1, sl, r4, r5
     464:	blx	r6
     468:	cmp	r0, #0
     46c:	beq	478 <read_array+0x154>
     470:	mvn	r0, #0
     474:	b	5e4 <read_array+0x2c0>
     478:	add	r9, r9, #1
     47c:	cmp	r9, r7
     480:	bge	49c <read_array+0x178>
     484:	add	r0, sp, #120	; 0x78
     488:	bl	0 <coda_cursor_goto_next_array_element>
     48c:	cmp	r0, #0
     490:	beq	49c <read_array+0x178>
     494:	mvn	r0, #0
     498:	b	5e4 <read_array+0x2c0>
     49c:	add	sl, sl, r8
     4a0:	cmp	sl, r7
     4a4:	blt	45c <read_array+0x138>
     4a8:	cmp	r9, r7
     4ac:	beq	5e0 <read_array+0x2bc>
     4b0:	add	r1, sp, #80	; 0x50
     4b4:	ldr	r3, [sp, #40]	; 0x28
     4b8:	lsl	r3, r3, #2
     4bc:	add	r3, r1, r3
     4c0:	sub	lr, r3, #4096	; 0x1000
     4c4:	ldr	r3, [lr, #4088]	; 0xff8
     4c8:	add	r1, sp, #80	; 0x50
     4cc:	ldr	ip, [sp, #40]	; 0x28
     4d0:	ldr	r0, [r1, ip, lsl #2]
     4d4:	sub	r3, r3, r0
     4d8:	add	sl, sl, r3
     4dc:	ldr	r0, [sp, #40]	; 0x28
     4e0:	sub	r3, r0, #3
     4e4:	cmp	r3, #0
     4e8:	blt	50c <read_array+0x1e8>
     4ec:	add	r1, sp, #80	; 0x50
     4f0:	lsl	r2, r3, #2
     4f4:	add	ip, r1, r2
     4f8:	ldr	r2, [ip, #8]
     4fc:	cmp	sl, r2
     500:	movge	ip, #1
     504:	movlt	ip, #0
     508:	b	510 <read_array+0x1ec>
     50c:	mov	ip, #0
     510:	cmp	ip, #0
     514:	beq	45c <read_array+0x138>
     518:	add	ip, sp, #80	; 0x50
     51c:	ldr	r2, [ip, r3, lsl #2]
     520:	add	r0, sp, #80	; 0x50
     524:	lsl	ip, r3, #2
     528:	add	ip, r0, ip
     52c:	ldr	ip, [ip, #8]
     530:	sub	r0, r2, ip
     534:	add	sl, sl, r0
     538:	sub	r3, r3, #1
     53c:	b	4e4 <read_array+0x1c0>
     540:	mov	r7, #1
     544:	mov	r2, #0
     548:	ldr	r1, [sp, #40]	; 0x28
     54c:	cmp	r2, r1
     550:	bge	568 <read_array+0x244>
     554:	add	r3, sp, #48	; 0x30
     558:	ldr	ip, [r3, r2, lsl #2]
     55c:	mul	r7, r7, ip
     560:	add	r2, r2, #1
     564:	b	548 <read_array+0x224>
     568:	cmp	r7, #0
     56c:	ble	5e0 <read_array+0x2bc>
     570:	add	r0, sp, #120	; 0x78
     574:	mov	r1, #0
     578:	bl	0 <coda_cursor_goto_array_element_by_index>
     57c:	cmp	r0, #0
     580:	beq	58c <read_array+0x268>
     584:	mvn	r0, #0
     588:	b	5e4 <read_array+0x2c0>
     58c:	mov	r8, #0
     590:	cmp	r8, r7
     594:	bge	5e0 <read_array+0x2bc>
     598:	add	r0, sp, #120	; 0x78
     59c:	mla	r1, r8, r4, r5
     5a0:	blx	r6
     5a4:	cmp	r0, #0
     5a8:	beq	5b4 <read_array+0x290>
     5ac:	mvn	r0, #0
     5b0:	b	5e4 <read_array+0x2c0>
     5b4:	sub	r2, r7, #1
     5b8:	cmp	r8, r2
     5bc:	bge	5d8 <read_array+0x2b4>
     5c0:	add	r0, sp, #120	; 0x78
     5c4:	bl	0 <coda_cursor_goto_next_array_element>
     5c8:	cmp	r0, #0
     5cc:	beq	5d8 <read_array+0x2b4>
     5d0:	mvn	r0, #0
     5d4:	b	5e4 <read_array+0x2c0>
     5d8:	add	r8, r8, #1
     5dc:	b	590 <read_array+0x26c>
     5e0:	mov	r0, #0
     5e4:	ldr	r4, [sp, #8]
     5e8:	ldr	r5, [sp, #12]
     5ec:	ldr	r6, [sp, #16]
     5f0:	ldr	r7, [sp, #20]
     5f4:	ldr	r8, [sp, #24]
     5f8:	ldr	r9, [sp, #28]
     5fc:	ldr	sl, [sp, #32]
     600:	ldr	lr, [sp, #4]
     604:	add	sp, sp, #640	; 0x280
     608:	bx	lr

0000060c <read_partial_array>:
     60c:	mov	ip, sp
     610:	sub	sp, sp, #552	; 0x228
     614:	str	ip, [sp]
     618:	str	lr, [sp, #4]
     61c:	str	r4, [sp, #8]
     620:	str	r5, [sp, #12]
     624:	str	r6, [sp, #16]
     628:	str	r7, [sp, #20]
     62c:	str	r8, [sp, #24]
     630:	ldr	r6, [ip, #4]
     634:	ldr	r7, [ip]
     638:	mov	r4, r3
     63c:	mov	r5, r1
     640:	mov	r1, r2
     644:	mov	r2, r0
     648:	add	r3, sp, #32
     64c:	mov	lr, #130	; 0x82
     650:	ldr	ip, [r2], #4
     654:	subs	lr, lr, #1
     658:	str	ip, [r3], #4
     65c:	bne	650 <read_partial_array+0x44>
     660:	cmp	r4, #0
     664:	ble	6d4 <read_partial_array+0xc8>
     668:	add	r0, sp, #32
     66c:	bl	0 <coda_cursor_goto_array_element_by_index>
     670:	cmp	r0, #0
     674:	beq	680 <read_partial_array+0x74>
     678:	mvn	r0, #0
     67c:	b	6d8 <read_partial_array+0xcc>
     680:	mov	r8, #0
     684:	cmp	r8, r4
     688:	bge	6d4 <read_partial_array+0xc8>
     68c:	add	r0, sp, #32
     690:	mla	r1, r8, r6, r7
     694:	blx	r5
     698:	cmp	r0, #0
     69c:	beq	6a8 <read_partial_array+0x9c>
     6a0:	mvn	r0, #0
     6a4:	b	6d8 <read_partial_array+0xcc>
     6a8:	sub	r1, r4, #1
     6ac:	cmp	r8, r1
     6b0:	bge	6cc <read_partial_array+0xc0>
     6b4:	add	r0, sp, #32
     6b8:	bl	0 <coda_cursor_goto_next_array_element>
     6bc:	cmp	r0, #0
     6c0:	beq	6cc <read_partial_array+0xc0>
     6c4:	mvn	r0, #0
     6c8:	b	6d8 <read_partial_array+0xcc>
     6cc:	add	r8, r8, #1
     6d0:	b	684 <read_partial_array+0x78>
     6d4:	mov	r0, #0
     6d8:	ldr	r4, [sp, #8]
     6dc:	ldr	r5, [sp, #12]
     6e0:	ldr	r6, [sp, #16]
     6e4:	ldr	r7, [sp, #20]
     6e8:	ldr	r8, [sp, #24]
     6ec:	ldr	lr, [sp, #4]
     6f0:	add	sp, sp, #552	; 0x228
     6f4:	bx	lr

000006f8 <transpose_array>:
     6f8:	mov	ip, sp
     6fc:	sub	sp, sp, #200	; 0xc8
     700:	str	ip, [sp, #4]
     704:	str	lr, [sp, #8]
     708:	str	r4, [sp, #16]
     70c:	str	r5, [sp, #20]
     710:	str	r6, [sp, #24]
     714:	str	r7, [sp, #28]
     718:	str	r8, [sp, #32]
     71c:	str	r9, [sp, #36]	; 0x24
     720:	mov	r6, r2
     724:	mov	r5, r1
     728:	mov	r8, #0
     72c:	add	r1, sp, #40	; 0x28
     730:	add	r2, sp, #48	; 0x30
     734:	bl	0 <coda_cursor_get_array_dim>
     738:	cmp	r0, #0
     73c:	beq	748 <transpose_array+0x50>
     740:	mvn	r0, #0
     744:	b	b90 <transpose_array+0x498>
     748:	ldr	r1, [sp, #40]	; 0x28
     74c:	cmp	r1, #1
     750:	bgt	75c <transpose_array+0x64>
     754:	mov	r0, #0
     758:	b	b90 <transpose_array+0x498>
     75c:	mov	r7, #1
     760:	mov	r2, #0
     764:	ldr	ip, [sp, #40]	; 0x28
     768:	cmp	r2, ip
     76c:	bge	7b4 <transpose_array+0xbc>
     770:	add	r1, sp, #48	; 0x30
     774:	ldr	r0, [r1, r2, lsl #2]
     778:	mul	r7, r7, r0
     77c:	add	r3, sp, #160	; 0xa0
     780:	mov	ip, #0
     784:	str	ip, [r3, r2, lsl #2]
     788:	add	r1, sp, #80	; 0x50
     78c:	add	r4, sp, #48	; 0x30
     790:	ldr	ip, [sp, #40]	; 0x28
     794:	sub	r0, ip, r2
     798:	lsl	r3, r0, #2
     79c:	add	r3, r4, r3
     7a0:	sub	lr, r3, #4096	; 0x1000
     7a4:	ldr	r3, [lr, #4092]	; 0xffc
     7a8:	str	r3, [r1, r2, lsl #2]
     7ac:	add	r2, r2, #1
     7b0:	b	764 <transpose_array+0x6c>
     7b4:	cmp	r7, #1
     7b8:	bgt	7c4 <transpose_array+0xcc>
     7bc:	mov	r0, #0
     7c0:	b	b90 <transpose_array+0x498>
     7c4:	add	ip, sp, #120	; 0x78
     7c8:	ldr	r2, [sp, #40]	; 0x28
     7cc:	mov	r1, #1
     7d0:	str	r1, [ip, r2, lsl #2]
     7d4:	add	ip, sp, #80	; 0x50
     7d8:	ldr	r3, [sp, #40]	; 0x28
     7dc:	mov	r2, #1
     7e0:	str	r2, [ip, r3, lsl #2]
     7e4:	ldr	r4, [sp, #40]	; 0x28
     7e8:	cmp	r4, #0
     7ec:	ble	820 <transpose_array+0x128>
     7f0:	add	r0, sp, #120	; 0x78
     7f4:	lsl	r3, r4, #2
     7f8:	add	r1, r0, r3
     7fc:	add	r2, sp, #120	; 0x78
     800:	ldr	r2, [r2, r4, lsl #2]
     804:	add	ip, sp, #80	; 0x50
     808:	ldr	r0, [ip, r4, lsl #2]
     80c:	mul	ip, r2, r0
     810:	sub	lr, r1, #4096	; 0x1000
     814:	str	ip, [lr, #4092]	; 0xffc
     818:	sub	r4, r4, #1
     81c:	b	7e8 <transpose_array+0xf0>
     820:	add	r0, sp, #80	; 0x50
     824:	ldr	r2, [sp, #40]	; 0x28
     828:	mov	r3, #0
     82c:	str	r3, [r0, r2, lsl #2]
     830:	add	r1, sp, #160	; 0xa0
     834:	ldr	r2, [sp, #40]	; 0x28
     838:	mov	r3, #0
     83c:	str	r3, [r1, r2, lsl #2]
     840:	mul	r0, r7, r6
     844:	bl	0 <malloc>
     848:	mov	r4, r0
     84c:	cmp	r4, #0
     850:	bne	878 <transpose_array+0x180>
     854:	mvn	r0, #0
     858:	ldr	r1, [pc, #856]	; bb8 <transpose_array+0x4c0>
     85c:	mul	r2, r7, r6
     860:	ldr	r3, [pc, #852]	; bbc <transpose_array+0x4c4>
     864:	mov	r4, #93	; 0x5d
     868:	str	r4, [sp]
     86c:	bl	0 <coda_set_error>
     870:	mvn	r0, #0
     874:	b	b90 <transpose_array+0x498>
     878:	cmp	r6, #4
     87c:	bcs	9ec <transpose_array+0x2f4>
     880:	cmp	r6, #1
     884:	beq	944 <transpose_array+0x24c>
     888:	cmp	r6, #2
     88c:	bne	ab0 <transpose_array+0x3b8>
     890:	mov	r9, #0
     894:	cmp	r9, r7
     898:	bge	b74 <transpose_array+0x47c>
     89c:	mov	r1, #0
     8a0:	add	r0, r4, r8, lsl #1
     8a4:	add	ip, r5, r9, lsl #1
     8a8:	ldrh	r2, [ip]
     8ac:	bic	ip, r2, #16711680	; 0xff0000
     8b0:	bic	ip, ip, #-16777216	; 0xff000000
     8b4:	strh	ip, [r0]
     8b8:	add	r2, sp, #120	; 0x78
     8bc:	ldr	r2, [r2, r1, lsl #2]
     8c0:	add	r8, r8, r2
     8c4:	add	r2, sp, #160	; 0xa0
     8c8:	add	ip, sp, #160	; 0xa0
     8cc:	ldr	r0, [ip, r1, lsl #2]
     8d0:	add	ip, r0, #1
     8d4:	str	ip, [r2, r1, lsl #2]
     8d8:	add	r3, sp, #160	; 0xa0
     8dc:	ldr	r0, [r3, r1, lsl #2]
     8e0:	add	r2, sp, #80	; 0x50
     8e4:	ldr	r3, [r2, r1, lsl #2]
     8e8:	cmp	r0, r3
     8ec:	bne	93c <transpose_array+0x244>
     8f0:	add	r0, sp, #160	; 0xa0
     8f4:	mov	r2, #0
     8f8:	str	r2, [r0, r1, lsl #2]
     8fc:	add	r0, sp, #120	; 0x78
     900:	ldr	r0, [r0, r1, lsl #2]
     904:	add	r2, sp, #80	; 0x50
     908:	ldr	r3, [r2, r1, lsl #2]
     90c:	mul	r3, r0, r3
     910:	sub	r0, r8, r3
     914:	add	r1, r1, #1
     918:	add	r3, sp, #120	; 0x78
     91c:	ldr	ip, [r3, r1, lsl #2]
     920:	add	r8, r0, ip
     924:	add	r2, sp, #160	; 0xa0
     928:	add	r3, sp, #160	; 0xa0
     92c:	ldr	r3, [r3, r1, lsl #2]
     930:	add	r3, r3, #1
     934:	str	r3, [r2, r1, lsl #2]
     938:	b	8d8 <transpose_array+0x1e0>
     93c:	add	r9, r9, #1
     940:	b	894 <transpose_array+0x19c>
     944:	mov	ip, #0
     948:	cmp	ip, r7
     94c:	bge	b74 <transpose_array+0x47c>
     950:	mov	r9, #0
     954:	ldrb	r3, [r5, ip]
     958:	and	r0, r3, #255	; 0xff
     95c:	strb	r0, [r4, r8]
     960:	add	r0, sp, #120	; 0x78
     964:	ldr	r0, [r0, r9, lsl #2]
     968:	add	r8, r8, r0
     96c:	add	r1, sp, #160	; 0xa0
     970:	add	r3, sp, #160	; 0xa0
     974:	ldr	r3, [r3, r9, lsl #2]
     978:	add	r0, r3, #1
     97c:	str	r0, [r1, r9, lsl #2]
     980:	add	r1, sp, #160	; 0xa0
     984:	ldr	r3, [r1, r9, lsl #2]
     988:	add	r2, sp, #80	; 0x50
     98c:	ldr	r2, [r2, r9, lsl #2]
     990:	cmp	r3, r2
     994:	bne	9e4 <transpose_array+0x2ec>
     998:	add	r1, sp, #160	; 0xa0
     99c:	mov	r0, #0
     9a0:	str	r0, [r1, r9, lsl #2]
     9a4:	add	r2, sp, #120	; 0x78
     9a8:	ldr	r0, [r2, r9, lsl #2]
     9ac:	add	r3, sp, #80	; 0x50
     9b0:	ldr	r2, [r3, r9, lsl #2]
     9b4:	mul	r0, r0, r2
     9b8:	sub	r1, r8, r0
     9bc:	add	r9, r9, #1
     9c0:	add	r3, sp, #120	; 0x78
     9c4:	ldr	r0, [r3, r9, lsl #2]
     9c8:	add	r8, r1, r0
     9cc:	add	r3, sp, #160	; 0xa0
     9d0:	add	r2, sp, #160	; 0xa0
     9d4:	ldr	r0, [r2, r9, lsl #2]
     9d8:	add	r0, r0, #1
     9dc:	str	r0, [r3, r9, lsl #2]
     9e0:	b	980 <transpose_array+0x288>
     9e4:	add	ip, ip, #1
     9e8:	b	948 <transpose_array+0x250>
     9ec:	cmp	r6, #4
     9f0:	beq	ad0 <transpose_array+0x3d8>
     9f4:	cmp	r6, #8
     9f8:	bne	ab0 <transpose_array+0x3b8>
     9fc:	mov	r1, #0
     a00:	cmp	r1, r7
     a04:	bge	b74 <transpose_array+0x47c>
     a08:	mov	r9, #0
     a0c:	add	ip, r4, r8, lsl #3
     a10:	add	r2, r5, r1, lsl #3
     a14:	ldr	r3, [r2]
     a18:	ldr	r2, [r2, #4]
     a1c:	str	r3, [ip]
     a20:	str	r2, [ip, #4]
     a24:	add	r3, sp, #120	; 0x78
     a28:	ldr	r0, [r3, r9, lsl #2]
     a2c:	add	r8, r8, r0
     a30:	add	r2, sp, #160	; 0xa0
     a34:	add	ip, sp, #160	; 0xa0
     a38:	ldr	r3, [ip, r9, lsl #2]
     a3c:	add	r3, r3, #1
     a40:	str	r3, [r2, r9, lsl #2]
     a44:	add	r0, sp, #160	; 0xa0
     a48:	ldr	r2, [r0, r9, lsl #2]
     a4c:	add	r0, sp, #80	; 0x50
     a50:	ldr	r3, [r0, r9, lsl #2]
     a54:	cmp	r2, r3
     a58:	bne	aa8 <transpose_array+0x3b0>
     a5c:	add	r0, sp, #160	; 0xa0
     a60:	mov	ip, #0
     a64:	str	ip, [r0, r9, lsl #2]
     a68:	add	ip, sp, #120	; 0x78
     a6c:	ldr	ip, [ip, r9, lsl #2]
     a70:	add	r2, sp, #80	; 0x50
     a74:	ldr	r0, [r2, r9, lsl #2]
     a78:	mul	r0, ip, r0
     a7c:	sub	r2, r8, r0
     a80:	add	r9, r9, #1
     a84:	add	r0, sp, #120	; 0x78
     a88:	ldr	r3, [r0, r9, lsl #2]
     a8c:	add	r8, r2, r3
     a90:	add	r0, sp, #160	; 0xa0
     a94:	add	r2, sp, #160	; 0xa0
     a98:	ldr	r2, [r2, r9, lsl #2]
     a9c:	add	r2, r2, #1
     aa0:	str	r2, [r0, r9, lsl #2]
     aa4:	b	a44 <transpose_array+0x34c>
     aa8:	add	r1, r1, #1
     aac:	b	a00 <transpose_array+0x308>
     ab0:	ldr	r0, [pc, #264]	; bc0 <transpose_array+0x4c8>
     ab4:	ldr	r1, [pc, #256]	; bbc <transpose_array+0x4c4>
     ab8:	mov	r2, #172	; 0xac
     abc:	ldr	r3, [pc, #240]	; bb4 <transpose_array+0x4bc>
     ac0:	bl	0 <__assert_fail>
     ac4:	mov	r0, #1
     ac8:	bl	0 <exit>
     acc:	b	b74 <transpose_array+0x47c>
     ad0:	mov	r9, #0
     ad4:	cmp	r9, r7
     ad8:	bge	b74 <transpose_array+0x47c>
     adc:	mov	ip, #0
     ae0:	ldr	r3, [r5, r9, lsl #2]
     ae4:	str	r3, [r4, r8, lsl #2]
     ae8:	add	r1, sp, #120	; 0x78
     aec:	ldr	r3, [r1, ip, lsl #2]
     af0:	add	r8, r8, r3
     af4:	add	r2, sp, #160	; 0xa0
     af8:	add	r0, sp, #160	; 0xa0
     afc:	ldr	r0, [r0, ip, lsl #2]
     b00:	add	r0, r0, #1
     b04:	str	r0, [r2, ip, lsl #2]
     b08:	add	r0, sp, #160	; 0xa0
     b0c:	ldr	r3, [r0, ip, lsl #2]
     b10:	add	r1, sp, #80	; 0x50
     b14:	ldr	r2, [r1, ip, lsl #2]
     b18:	cmp	r3, r2
     b1c:	bne	b6c <transpose_array+0x474>
     b20:	add	r0, sp, #160	; 0xa0
     b24:	mov	r1, #0
     b28:	str	r1, [r0, ip, lsl #2]
     b2c:	add	r1, sp, #120	; 0x78
     b30:	ldr	r3, [r1, ip, lsl #2]
     b34:	add	r1, sp, #80	; 0x50
     b38:	ldr	r2, [r1, ip, lsl #2]
     b3c:	mul	r0, r3, r2
     b40:	sub	r1, r8, r0
     b44:	add	ip, ip, #1
     b48:	add	r2, sp, #120	; 0x78
     b4c:	ldr	r3, [r2, ip, lsl #2]
     b50:	add	r8, r1, r3
     b54:	add	r0, sp, #160	; 0xa0
     b58:	add	r1, sp, #160	; 0xa0
     b5c:	ldr	r3, [r1, ip, lsl #2]
     b60:	add	r2, r3, #1
     b64:	str	r2, [r0, ip, lsl #2]
     b68:	b	b08 <transpose_array+0x410>
     b6c:	add	r9, r9, #1
     b70:	b	ad4 <transpose_array+0x3dc>
     b74:	mul	r2, r7, r6
     b78:	mov	r1, r4
     b7c:	mov	r0, r5
     b80:	bl	0 <memcpy>
     b84:	mov	r0, r4
     b88:	bl	0 <free>
     b8c:	mov	r0, #0
     b90:	ldr	r4, [sp, #16]
     b94:	ldr	r5, [sp, #20]
     b98:	ldr	r6, [sp, #24]
     b9c:	ldr	r7, [sp, #28]
     ba0:	ldr	r8, [sp, #32]
     ba4:	ldr	r9, [sp, #36]	; 0x24
     ba8:	ldr	lr, [sp, #8]
     bac:	add	sp, sp, #200	; 0xc8
     bb0:	bx	lr
     bb4:	.word	0x00000a01
     bb8:	.word	0x00000801
     bbc:	.word	0x000005fa
     bc0:	.word	0x00000748

00000bc4 <ipow>:
     bc4:	mov	ip, sp
     bc8:	sub	sp, sp, #8
     bcc:	str	ip, [sp]
     bd0:	str	lr, [sp, #4]
     bd4:	vmov.f64	d1, #112	; 0x3f800000  1.0
     bd8:	cmp	r0, #0
     bdc:	bge	c04 <ipow+0x40>
     be0:	mov	r1, r0
     be4:	add	r0, r1, #1
     be8:	cmp	r1, #0
     bec:	beq	bf8 <ipow+0x34>
     bf0:	vmul.f64	d1, d1, d0
     bf4:	b	be0 <ipow+0x1c>
     bf8:	vmov.f64	d2, #112	; 0x3f800000  1.0
     bfc:	vdiv.f64	d1, d2, d1
     c00:	b	c1c <ipow+0x58>
     c04:	mov	r1, r0
     c08:	sub	r0, r1, #1
     c0c:	cmp	r1, #0
     c10:	beq	c1c <ipow+0x58>
     c14:	vmul.f64	d1, d1, d0
     c18:	b	c04 <ipow+0x40>
     c1c:	vmov.f64	d0, d1
     c20:	ldr	lr, [sp, #4]
     c24:	add	sp, sp, #8
     c28:	bx	lr

00000c2c <get_bit_size_boundary>:
     c2c:	mov	ip, sp
     c30:	sub	sp, sp, #200	; 0xc8
     c34:	str	ip, [sp, #4]
     c38:	str	lr, [sp, #8]
     c3c:	str	r4, [sp, #16]
     c40:	str	r5, [sp, #20]
     c44:	str	r6, [sp, #24]
     c48:	str	r7, [sp, #28]
     c4c:	str	r8, [sp, #32]
     c50:	str	r9, [sp, #36]	; 0x24
     c54:	str	sl, [sp, #40]	; 0x28
     c58:	mov	r7, r3
     c5c:	mov	sl, r2
     c60:	mov	r9, r1
     c64:	mov	r4, r0
     c68:	ldr	r3, [r4, #4]
     c6c:	lsl	r1, r3, #4
     c70:	add	r3, r4, r1
     c74:	ldr	r6, [r3]
     c78:	ldr	r8, [r3, #4]
     c7c:	cmp	r7, #0
     c80:	bge	c8c <get_bit_size_boundary+0x60>
     c84:	mov	r7, #0
     c88:	mov	sl, #0
     c8c:	ldr	r1, [r4]
     c90:	ldr	ip, [r1, #16]
     c94:	cmp	ip, #0
     c98:	beq	cb4 <get_bit_size_boundary+0x88>
     c9c:	ldr	ip, [r4]
     ca0:	ldr	r1, [ip, #16]
     ca4:	cmp	r1, #1
     ca8:	moveq	r2, #1
     cac:	movne	r2, #0
     cb0:	b	cb8 <get_bit_size_boundary+0x8c>
     cb4:	mov	r2, #1
     cb8:	cmp	r2, #0
     cbc:	bne	fec <get_bit_size_boundary+0x3c0>
     cc0:	ldr	r2, [r4, #4]
     cc4:	sub	r5, r2, #1
     cc8:	cmp	r5, #0
     ccc:	ble	d1c <get_bit_size_boundary+0xf0>
     cd0:	lsl	r1, r5, #4
     cd4:	add	r1, r4, r1
     cd8:	ldr	r0, [r1, #8]
     cdc:	ldr	r0, [r0]
     ce0:	cmp	r0, #0
     ce4:	beq	d14 <get_bit_size_boundary+0xe8>
     ce8:	lsl	ip, r5, #4
     cec:	add	ip, r4, ip
     cf0:	ldr	r2, [ip, #8]
     cf4:	ldr	r1, [r2]
     cf8:	cmp	r1, #1
     cfc:	moveq	r1, #1
     d00:	movne	r1, #0
     d04:	cmp	r1, #0
     d08:	movne	r2, #1
     d0c:	moveq	r2, #0
     d10:	b	d20 <get_bit_size_boundary+0xf4>
     d14:	mov	r2, #1
     d18:	b	d20 <get_bit_size_boundary+0xf4>
     d1c:	mov	r2, #0
     d20:	cmp	r2, #0
     d24:	beq	d30 <get_bit_size_boundary+0x104>
     d28:	sub	r5, r5, #1
     d2c:	b	cc8 <get_bit_size_boundary+0x9c>
     d30:	cmp	r5, #0
     d34:	blt	d58 <get_bit_size_boundary+0x12c>
     d38:	lsl	r2, r5, #4
     d3c:	add	r0, r4, r2
     d40:	ldr	r2, [r0, #8]
     d44:	ldr	r3, [r2]
     d48:	cmp	r3, #100	; 0x64
     d4c:	moveq	r3, #1
     d50:	movne	r3, #0
     d54:	b	d5c <get_bit_size_boundary+0x130>
     d58:	mov	r3, #0
     d5c:	cmp	r3, #0
     d60:	beq	d84 <get_bit_size_boundary+0x158>
     d64:	lsl	ip, r5, #4
     d68:	add	r2, r4, ip
     d6c:	ldr	ip, [r2, #8]
     d70:	ldr	r1, [ip, #8]
     d74:	cmp	r1, #2
     d78:	moveq	r3, #1
     d7c:	movne	r3, #0
     d80:	b	d88 <get_bit_size_boundary+0x15c>
     d84:	mov	r3, #0
     d88:	cmp	r3, #0
     d8c:	bne	da4 <get_bit_size_boundary+0x178>
     d90:	ldr	r0, [pc, #804]	; 10bc <get_bit_size_boundary+0x490>
     d94:	ldr	r1, [pc, #808]	; 10c4 <get_bit_size_boundary+0x498>
     d98:	mov	r2, #121	; 0x79
     d9c:	ldr	r3, [pc, #784]	; 10b4 <get_bit_size_boundary+0x488>
     da0:	bl	0 <__assert_fail>
     da4:	lsl	ip, r5, #4
     da8:	add	r0, r4, ip
     dac:	ldr	r1, [r0, #8]
     db0:	ldr	ip, [r1, #24]
     db4:	ldr	r1, [r1, #28]
     db8:	lsl	r3, r1, #3
     dbc:	orr	r0, r3, ip, lsr #29
     dc0:	lsl	ip, ip, #3
     dc4:	subs	r6, r6, ip
     dc8:	sbc	r8, r8, r0
     dcc:	lsl	ip, r5, #4
     dd0:	add	r3, r4, ip
     dd4:	ldr	r3, [r3, #8]
     dd8:	ldr	r0, [r3, #16]
     ddc:	lsl	r4, r0, #3
     de0:	asr	r5, r4, #31
     de4:	cmp	r8, #0
     de8:	blt	e2c <get_bit_size_boundary+0x200>
     dec:	mov	r2, r4
     df0:	mov	r1, r8
     df4:	mov	r0, r5
     df8:	cmp	r1, r0
     dfc:	bne	e14 <get_bit_size_boundary+0x1e8>
     e00:	mov	r3, r6
     e04:	cmp	r3, r2
     e08:	movhi	r0, #1
     e0c:	movls	r0, #0
     e10:	b	e30 <get_bit_size_boundary+0x204>
     e14:	mov	r0, r8
     e18:	mov	ip, r5
     e1c:	cmp	r0, ip
     e20:	movgt	r0, #1
     e24:	movle	r0, #0
     e28:	b	e30 <get_bit_size_boundary+0x204>
     e2c:	mov	r0, #1
     e30:	cmp	r0, #0
     e34:	beq	eb4 <get_bit_size_boundary+0x288>
     e38:	mov	r3, r6
     e3c:	asr	r1, r8, #3
     e40:	lsr	r0, r3, #3
     e44:	orr	r0, r0, r8, lsl #29
     e48:	add	r2, sp, #104	; 0x68
     e4c:	bl	0 <coda_str64>
     e50:	mov	r3, r6
     e54:	mov	r2, #0
     e58:	and	r3, r3, #7
     e5c:	orr	r0, r2, r3
     e60:	cmp	r0, #0
     e64:	beq	e84 <get_bit_size_boundary+0x258>
     e68:	add	r0, sp, #104	; 0x68
     e6c:	bl	0 <strlen>
     e70:	add	r1, sp, #104	; 0x68
     e74:	add	r0, r1, r0
     e78:	ldr	r1, [pc, #568]	; 10b8 <get_bit_size_boundary+0x48c>
     e7c:	and	r2, r6, #7
     e80:	bl	0 <sprintf>
     e84:	asr	r1, r5, #3
     e88:	lsr	r2, r4, #3
     e8c:	orr	r0, r2, r5, lsl #29
     e90:	add	r2, sp, #48	; 0x30
     e94:	bl	0 <coda_str64>
     e98:	mvn	r0, #300	; 0x12c
     e9c:	ldr	r1, [pc, #540]	; 10c0 <get_bit_size_boundary+0x494>
     ea0:	add	r2, sp, #104	; 0x68
     ea4:	add	r3, sp, #48	; 0x30
     ea8:	bl	0 <coda_set_error>
     eac:	mvn	r0, #0
     eb0:	b	1084 <get_bit_size_boundary+0x458>
     eb4:	adds	r3, r6, sl
     eb8:	adc	ip, r8, r7
     ebc:	mov	r0, r5
     ec0:	cmp	ip, r0
     ec4:	bne	ed8 <get_bit_size_boundary+0x2ac>
     ec8:	mov	r2, r4
     ecc:	cmp	r3, r2
     ed0:	bhi	ee4 <get_bit_size_boundary+0x2b8>
     ed4:	b	1070 <get_bit_size_boundary+0x444>
     ed8:	mov	r3, r5
     edc:	cmp	ip, r3
     ee0:	ble	1070 <get_bit_size_boundary+0x444>
     ee4:	asr	r1, r7, #3
     ee8:	mov	r2, sl
     eec:	lsr	r0, r2, #3
     ef0:	orr	r0, r0, r7, lsl #29
     ef4:	add	r2, sp, #136	; 0x88
     ef8:	bl	0 <coda_str64>
     efc:	mov	r1, #0
     f00:	mov	r0, sl
     f04:	and	r0, r0, #7
     f08:	orr	r3, r1, r0
     f0c:	cmp	r3, #0
     f10:	beq	f30 <get_bit_size_boundary+0x304>
     f14:	add	r0, sp, #136	; 0x88
     f18:	bl	0 <strlen>
     f1c:	add	r1, sp, #136	; 0x88
     f20:	add	r0, r1, r0
     f24:	ldr	r1, [pc, #396]	; 10b8 <get_bit_size_boundary+0x48c>
     f28:	and	r2, sl, #7
     f2c:	bl	0 <sprintf>
     f30:	asr	r1, r8, #3
     f34:	mov	r0, r6
     f38:	lsr	r2, r0, #3
     f3c:	orr	r0, r2, r8, lsl #29
     f40:	add	r2, sp, #168	; 0xa8
     f44:	bl	0 <coda_str64>
     f48:	mov	r1, r6
     f4c:	mov	ip, #0
     f50:	and	r3, r1, #7
     f54:	orr	ip, ip, r3
     f58:	cmp	ip, #0
     f5c:	beq	f7c <get_bit_size_boundary+0x350>
     f60:	add	r0, sp, #168	; 0xa8
     f64:	bl	0 <strlen>
     f68:	add	r3, sp, #168	; 0xa8
     f6c:	add	r0, r3, r0
     f70:	ldr	r1, [pc, #320]	; 10b8 <get_bit_size_boundary+0x48c>
     f74:	and	r2, r6, #7
     f78:	bl	0 <sprintf>
     f7c:	asr	r1, r5, #3
     f80:	mov	r2, r4
     f84:	lsr	r2, r2, #3
     f88:	orr	r0, r2, r5, lsl #29
     f8c:	add	r2, sp, #72	; 0x48
     f90:	bl	0 <coda_str64>
     f94:	mov	r1, #0
     f98:	mov	r2, r4
     f9c:	and	r0, r2, #7
     fa0:	orr	r1, r1, r0
     fa4:	cmp	r1, #0
     fa8:	beq	fc8 <get_bit_size_boundary+0x39c>
     fac:	add	r0, sp, #72	; 0x48
     fb0:	bl	0 <strlen>
     fb4:	add	r1, sp, #72	; 0x48
     fb8:	add	r0, r1, r0
     fbc:	ldr	r1, [pc, #244]	; 10b8 <get_bit_size_boundary+0x48c>
     fc0:	and	r2, r4, #7
     fc4:	bl	0 <sprintf>
     fc8:	mvn	r0, #300	; 0x12c
     fcc:	ldr	r1, [pc, #220]	; 10b0 <get_bit_size_boundary+0x484>
     fd0:	add	r2, sp, #136	; 0x88
     fd4:	add	r3, sp, #168	; 0xa8
     fd8:	add	r4, sp, #72	; 0x48
     fdc:	str	r4, [sp]
     fe0:	bl	0 <coda_set_error>
     fe4:	mvn	r0, #0
     fe8:	b	1084 <get_bit_size_boundary+0x458>
     fec:	ldr	r2, [r4]
     ff0:	ldr	r0, [r2, #48]	; 0x30
     ff4:	cmp	r0, #0
     ff8:	bne	1018 <get_bit_size_boundary+0x3ec>
     ffc:	ldr	ip, [r4]
    1000:	ldr	r3, [ip, #8]
    1004:	ldr	r1, [ip, #12]
    1008:	lsl	ip, r1, #3
    100c:	orr	r5, ip, r3, lsr #29
    1010:	lsl	r4, r3, #3
    1014:	b	1030 <get_bit_size_boundary+0x404>
    1018:	ldr	r0, [r4]
    101c:	ldr	r3, [r0, #40]	; 0x28
    1020:	ldr	r1, [r0, #44]	; 0x2c
    1024:	lsl	r2, r1, #3
    1028:	orr	r5, r2, r3, lsr #29
    102c:	lsl	r4, r3, #3
    1030:	adds	r0, r6, sl
    1034:	adc	r2, r8, r7
    1038:	mov	ip, r5
    103c:	mov	r1, r4
    1040:	cmp	r2, ip
    1044:	bne	1054 <get_bit_size_boundary+0x428>
    1048:	cmp	r0, r1
    104c:	bcs	105c <get_bit_size_boundary+0x430>
    1050:	b	1070 <get_bit_size_boundary+0x444>
    1054:	cmp	r2, ip
    1058:	ble	1070 <get_bit_size_boundary+0x444>
    105c:	mvn	r0, #300	; 0x12c
    1060:	ldr	r1, [pc, #68]	; 10ac <get_bit_size_boundary+0x480>
    1064:	bl	0 <coda_set_error>
    1068:	mvn	r0, #0
    106c:	b	1084 <get_bit_size_boundary+0x458>
    1070:	subs	ip, r4, r6
    1074:	sbc	r2, r5, r8
    1078:	str	ip, [r9]
    107c:	str	r2, [r9, #4]
    1080:	mov	r0, #0
    1084:	ldr	r4, [sp, #16]
    1088:	ldr	r5, [sp, #20]
    108c:	ldr	r6, [sp, #24]
    1090:	ldr	r7, [sp, #28]
    1094:	ldr	r8, [sp, #32]
    1098:	ldr	r9, [sp, #36]	; 0x24
    109c:	ldr	sl, [sp, #40]	; 0x28
    10a0:	ldr	lr, [sp, #8]
    10a4:	add	sp, sp, #200	; 0xc8
    10a8:	bx	lr
    10ac:	.word	0x00000884
    10b0:	.word	0x000003c6
    10b4:	.word	0x00000a11
    10b8:	.word	0x00000000
    10bc:	.word	0x0000074a
    10c0:	.word	0x00000355
    10c4:	.word	0x000006a4

000010c8 <parse_mapping_size>:
    10c8:	mov	ip, sp
    10cc:	sub	sp, sp, #32
    10d0:	str	ip, [sp]
    10d4:	str	lr, [sp, #4]
    10d8:	str	r4, [sp, #8]
    10dc:	str	r5, [sp, #12]
    10e0:	str	r6, [sp, #16]
    10e4:	str	r7, [sp, #20]
    10e8:	str	r8, [sp, #24]
    10ec:	mov	r5, r3
    10f0:	mov	r6, r2
    10f4:	mov	r7, r1
    10f8:	mov	r4, r0
    10fc:	mov	r8, #0
    1100:	ldr	ip, [r6, #8]
    1104:	cmp	r8, ip
    1108:	bge	11bc <parse_mapping_size+0xf4>
    110c:	ldr	r0, [r6, #12]
    1110:	ldr	r2, [r0, r8, lsl #2]
    1114:	ldr	r3, [r2]
    1118:	cmp	r3, #0
    111c:	beq	1194 <parse_mapping_size+0xcc>
    1120:	ldr	r0, [r6, #12]
    1124:	ldr	r2, [r0, r8, lsl #2]
    1128:	ldr	r3, [r2]
    112c:	cmp	r3, r7
    1130:	bgt	1164 <parse_mapping_size+0x9c>
    1134:	ldr	r3, [r6, #12]
    1138:	ldr	ip, [r3, r8, lsl #2]
    113c:	ldr	r0, [ip, #4]
    1140:	ldr	r1, [r6, #12]
    1144:	ldr	r1, [r1, r8, lsl #2]
    1148:	ldr	r2, [r1]
    114c:	mov	r1, r4
    1150:	bl	0 <memcmp>
    1154:	cmp	r0, #0
    1158:	moveq	r2, #1
    115c:	movne	r2, #0
    1160:	b	1168 <parse_mapping_size+0xa0>
    1164:	mov	r2, #0
    1168:	cmp	r2, #0
    116c:	beq	11b4 <parse_mapping_size+0xec>
    1170:	ldr	r0, [r6, #12]
    1174:	ldr	r0, [r0, r8, lsl #2]
    1178:	ldr	r1, [r0]
    117c:	lsl	r2, r1, #3
    1180:	asr	r3, r2, #31
    1184:	str	r2, [r5]
    1188:	str	r3, [r5, #4]
    118c:	mov	r0, #1
    1190:	b	11e4 <parse_mapping_size+0x11c>
    1194:	cmp	r7, #0
    1198:	bne	11b4 <parse_mapping_size+0xec>
    119c:	mov	r1, #0
    11a0:	mov	r0, #0
    11a4:	str	r0, [r5]
    11a8:	str	r1, [r5, #4]
    11ac:	mov	r0, #1
    11b0:	b	11e4 <parse_mapping_size+0x11c>
    11b4:	add	r8, r8, #1
    11b8:	b	1100 <parse_mapping_size+0x38>
    11bc:	ldr	ip, [r6, #4]
    11c0:	cmp	ip, #0
    11c4:	blt	11e0 <parse_mapping_size+0x118>
    11c8:	ldr	r2, [r6]
    11cc:	ldr	ip, [r6, #4]
    11d0:	str	r2, [r5]
    11d4:	str	ip, [r5, #4]
    11d8:	mov	r0, #1
    11dc:	b	11e4 <parse_mapping_size+0x11c>
    11e0:	mov	r0, #0
    11e4:	ldr	r4, [sp, #8]
    11e8:	ldr	r5, [sp, #12]
    11ec:	ldr	r6, [sp, #16]
    11f0:	ldr	r7, [sp, #20]
    11f4:	ldr	r8, [sp, #24]
    11f8:	ldr	lr, [sp, #4]
    11fc:	add	sp, sp, #32
    1200:	bx	lr

00001204 <parse_integer_mapping>:
    1204:	mov	ip, sp
    1208:	sub	sp, sp, #32
    120c:	str	ip, [sp]
    1210:	str	lr, [sp, #4]
    1214:	str	r4, [sp, #8]
    1218:	str	r5, [sp, #12]
    121c:	str	r6, [sp, #16]
    1220:	str	r7, [sp, #20]
    1224:	str	r8, [sp, #24]
    1228:	str	r9, [sp, #28]
    122c:	ldr	r6, [ip]
    1230:	mov	r9, r3
    1234:	mov	r5, r2
    1238:	mov	r7, r1
    123c:	mov	r4, r0
    1240:	mov	r8, #0
    1244:	ldr	r1, [r5, #8]
    1248:	cmp	r8, r1
    124c:	bge	1348 <parse_integer_mapping+0x144>
    1250:	ldr	r0, [r5, #12]
    1254:	ldr	ip, [r0, r8, lsl #2]
    1258:	ldr	r1, [ip]
    125c:	cmp	r1, #0
    1260:	beq	1318 <parse_integer_mapping+0x114>
    1264:	ldr	r1, [r5, #12]
    1268:	ldr	r3, [r1, r8, lsl #2]
    126c:	ldr	r0, [r3]
    1270:	cmp	r0, r7
    1274:	bgt	12a8 <parse_integer_mapping+0xa4>
    1278:	ldr	r3, [r5, #12]
    127c:	ldr	r2, [r3, r8, lsl #2]
    1280:	ldr	r0, [r2, #4]
    1284:	ldr	r1, [r5, #12]
    1288:	ldr	r1, [r1, r8, lsl #2]
    128c:	ldr	r2, [r1]
    1290:	mov	r1, r4
    1294:	bl	0 <memcmp>
    1298:	cmp	r0, #0
    129c:	moveq	r2, #1
    12a0:	movne	r2, #0
    12a4:	b	12ac <parse_integer_mapping+0xa8>
    12a8:	mov	r2, #0
    12ac:	cmp	r2, #0
    12b0:	beq	1340 <parse_integer_mapping+0x13c>
    12b4:	cmp	r9, #0
    12b8:	bne	12d8 <parse_integer_mapping+0xd4>
    12bc:	ldr	r3, [r5, #12]
    12c0:	ldr	ip, [r3, r8, lsl #2]
    12c4:	ldr	ip, [ip]
    12c8:	cmp	ip, r7
    12cc:	movne	r0, #1
    12d0:	moveq	r0, #0
    12d4:	b	12dc <parse_integer_mapping+0xd8>
    12d8:	mov	r0, #0
    12dc:	cmp	r0, #0
    12e0:	beq	12f8 <parse_integer_mapping+0xf4>
    12e4:	mvn	r0, #102	; 0x66
    12e8:	ldr	r1, [pc, #128]	; 1370 <parse_integer_mapping+0x16c>
    12ec:	bl	0 <coda_set_error>
    12f0:	mvn	r0, #0
    12f4:	b	134c <parse_integer_mapping+0x148>
    12f8:	ldr	r1, [r5, #12]
    12fc:	ldr	r2, [r1, r8, lsl #2]
    1300:	ldr	r1, [r2, #8]
    1304:	ldr	r0, [r2, #12]
    1308:	str	r1, [r6]
    130c:	str	r0, [r6, #4]
    1310:	mov	r0, #1
    1314:	b	134c <parse_integer_mapping+0x148>
    1318:	cmp	r7, #0
    131c:	bne	1340 <parse_integer_mapping+0x13c>
    1320:	ldr	r3, [r5, #12]
    1324:	ldr	ip, [r3, r8, lsl #2]
    1328:	ldr	r2, [ip, #8]
    132c:	ldr	ip, [ip, #12]
    1330:	str	r2, [r6]
    1334:	str	ip, [r6, #4]
    1338:	mov	r0, #1
    133c:	b	134c <parse_integer_mapping+0x148>
    1340:	add	r8, r8, #1
    1344:	b	1244 <parse_integer_mapping+0x40>
    1348:	mov	r0, #0
    134c:	ldr	r4, [sp, #8]
    1350:	ldr	r5, [sp, #12]
    1354:	ldr	r6, [sp, #16]
    1358:	ldr	r7, [sp, #20]
    135c:	ldr	r8, [sp, #24]
    1360:	ldr	r9, [sp, #28]
    1364:	ldr	lr, [sp, #4]
    1368:	add	sp, sp, #32
    136c:	bx	lr
    1370:	.word	0x0000019a

00001374 <parse_float_mapping>:
    1374:	mov	ip, sp
    1378:	sub	sp, sp, #32
    137c:	str	ip, [sp]
    1380:	str	lr, [sp, #4]
    1384:	str	r4, [sp, #8]
    1388:	str	r5, [sp, #12]
    138c:	str	r6, [sp, #16]
    1390:	str	r7, [sp, #20]
    1394:	str	r8, [sp, #24]
    1398:	str	r9, [sp, #28]
    139c:	ldr	r6, [ip]
    13a0:	mov	r9, r3
    13a4:	mov	r5, r2
    13a8:	mov	r7, r1
    13ac:	mov	r4, r0
    13b0:	mov	r8, #0
    13b4:	ldr	r1, [r5, #8]
    13b8:	cmp	r8, r1
    13bc:	bge	14a8 <parse_float_mapping+0x134>
    13c0:	ldr	r0, [r5, #12]
    13c4:	ldr	r3, [r0, r8, lsl #2]
    13c8:	ldr	r2, [r3]
    13cc:	cmp	r2, #0
    13d0:	beq	1480 <parse_float_mapping+0x10c>
    13d4:	ldr	ip, [r5, #12]
    13d8:	ldr	r2, [ip, r8, lsl #2]
    13dc:	ldr	r2, [r2]
    13e0:	cmp	r2, r7
    13e4:	bgt	1418 <parse_float_mapping+0xa4>
    13e8:	ldr	r0, [r5, #12]
    13ec:	ldr	ip, [r0, r8, lsl #2]
    13f0:	ldr	r0, [ip, #4]
    13f4:	ldr	r1, [r5, #12]
    13f8:	ldr	r3, [r1, r8, lsl #2]
    13fc:	ldr	r2, [r3]
    1400:	mov	r1, r4
    1404:	bl	0 <memcmp>
    1408:	cmp	r0, #0
    140c:	moveq	r3, #1
    1410:	movne	r3, #0
    1414:	b	141c <parse_float_mapping+0xa8>
    1418:	mov	r3, #0
    141c:	cmp	r3, #0
    1420:	beq	14a0 <parse_float_mapping+0x12c>
    1424:	cmp	r9, #0
    1428:	bne	1448 <parse_float_mapping+0xd4>
    142c:	ldr	r1, [r5, #12]
    1430:	ldr	r0, [r1, r8, lsl #2]
    1434:	ldr	r2, [r0]
    1438:	cmp	r2, r7
    143c:	movne	r1, #1
    1440:	moveq	r1, #0
    1444:	b	144c <parse_float_mapping+0xd8>
    1448:	mov	r1, #0
    144c:	cmp	r1, #0
    1450:	beq	1468 <parse_float_mapping+0xf4>
    1454:	mvn	r0, #102	; 0x66
    1458:	ldr	r1, [pc, #112]	; 14d0 <parse_float_mapping+0x15c>
    145c:	bl	0 <coda_set_error>
    1460:	mvn	r0, #0
    1464:	b	14ac <parse_float_mapping+0x138>
    1468:	ldr	r3, [r5, #12]
    146c:	ldr	r0, [r3, r8, lsl #2]
    1470:	vldr	d4, [r0, #8]
    1474:	vstr	d4, [r6]
    1478:	mov	r0, #1
    147c:	b	14ac <parse_float_mapping+0x138>
    1480:	cmp	r7, #0
    1484:	bne	14a0 <parse_float_mapping+0x12c>
    1488:	ldr	ip, [r5, #12]
    148c:	ldr	r1, [ip, r8, lsl #2]
    1490:	vldr	d0, [r1, #8]
    1494:	vstr	d0, [r6]
    1498:	mov	r0, #1
    149c:	b	14ac <parse_float_mapping+0x138>
    14a0:	add	r8, r8, #1
    14a4:	b	13b4 <parse_float_mapping+0x40>
    14a8:	mov	r0, #0
    14ac:	ldr	r4, [sp, #8]
    14b0:	ldr	r5, [sp, #12]
    14b4:	ldr	r6, [sp, #16]
    14b8:	ldr	r7, [sp, #20]
    14bc:	ldr	r8, [sp, #24]
    14c0:	ldr	r9, [sp, #28]
    14c4:	ldr	lr, [sp, #4]
    14c8:	add	sp, sp, #32
    14cc:	bx	lr
    14d0:	.word	0x000009c2

000014d4 <coda_ascii_parse_int64>:
    14d4:	mov	ip, sp
    14d8:	sub	sp, sp, #56	; 0x38
    14dc:	str	ip, [sp]
    14e0:	str	lr, [sp, #4]
    14e4:	str	r4, [sp, #24]
    14e8:	str	r5, [sp, #28]
    14ec:	str	r6, [sp, #32]
    14f0:	str	r7, [sp, #36]	; 0x24
    14f4:	str	r8, [sp, #40]	; 0x28
    14f8:	str	r9, [sp, #44]	; 0x2c
    14fc:	str	sl, [sp, #48]	; 0x30
    1500:	str	fp, [sp, #52]	; 0x34
    1504:	str	r3, [sp, #16]
    1508:	str	r2, [sp, #20]
    150c:	str	r1, [sp, #8]
    1510:	mov	sl, r0
    1514:	mov	fp, #0
    1518:	ldr	r9, [sp, #8]
    151c:	cmp	r9, #0
    1520:	ble	1558 <coda_ascii_parse_int64+0x84>
    1524:	ldrb	ip, [sl]
    1528:	cmp	ip, #32
    152c:	beq	1550 <coda_ascii_parse_int64+0x7c>
    1530:	ldrb	r0, [sl]
    1534:	cmp	r0, #9
    1538:	moveq	r0, #1
    153c:	movne	r0, #0
    1540:	cmp	r0, #0
    1544:	movne	r2, #1
    1548:	moveq	r2, #0
    154c:	b	155c <coda_ascii_parse_int64+0x88>
    1550:	mov	r2, #1
    1554:	b	155c <coda_ascii_parse_int64+0x88>
    1558:	mov	r2, #0
    155c:	cmp	r2, #0
    1560:	beq	1570 <coda_ascii_parse_int64+0x9c>
    1564:	add	sl, sl, #1
    1568:	sub	r9, r9, #1
    156c:	b	151c <coda_ascii_parse_int64+0x48>
    1570:	ldrb	r1, [sl]
    1574:	cmp	r1, #43	; 0x2b
    1578:	beq	1590 <coda_ascii_parse_int64+0xbc>
    157c:	ldrb	r0, [sl]
    1580:	cmp	r0, #45	; 0x2d
    1584:	moveq	r1, #1
    1588:	movne	r1, #0
    158c:	b	1594 <coda_ascii_parse_int64+0xc0>
    1590:	mov	r1, #1
    1594:	cmp	r1, #0
    1598:	beq	15b4 <coda_ascii_parse_int64+0xe0>
    159c:	ldrb	r3, [sl]
    15a0:	cmp	r3, #45	; 0x2d
    15a4:	moveq	fp, #1
    15a8:	movne	fp, #0
    15ac:	add	sl, sl, #1
    15b0:	sub	r9, r9, #1
    15b4:	mov	r5, #0
    15b8:	mov	r4, #0
    15bc:	mov	r8, #0
    15c0:	cmp	r9, #0
    15c4:	ble	16bc <coda_ascii_parse_int64+0x1e8>
    15c8:	ldrb	ip, [sl]
    15cc:	cmp	ip, #48	; 0x30
    15d0:	blt	15e8 <coda_ascii_parse_int64+0x114>
    15d4:	ldrb	ip, [sl]
    15d8:	cmp	ip, #57	; 0x39
    15dc:	movgt	r2, #1
    15e0:	movle	r2, #0
    15e4:	b	15ec <coda_ascii_parse_int64+0x118>
    15e8:	mov	r2, #1
    15ec:	cmp	r2, #0
    15f0:	bne	16bc <coda_ascii_parse_int64+0x1e8>
    15f4:	ldrb	ip, [sl]
    15f8:	sub	r6, ip, #48	; 0x30
    15fc:	asr	r7, r6, #31
    1600:	mvn	ip, #-2147483648	; 0x80000000
    1604:	mvn	r0, #0
    1608:	subs	r0, r0, r6
    160c:	sbc	r1, ip, r7
    1610:	str	r1, [sp, #12]
    1614:	movw	r3, #26214	; 0x6666
    1618:	movt	r3, #26214	; 0x6666
    161c:	movw	r2, #26215	; 0x6667
    1620:	movt	r2, #26214	; 0x6666
    1624:	ldr	r1, [sp, #12]
    1628:	bl	0 <__compcert_i64_smulh>
    162c:	asr	r2, r1, #2
    1630:	lsr	ip, r0, #2
    1634:	orr	ip, ip, r1, lsl #30
    1638:	mov	r3, r2
    163c:	mov	r1, ip
    1640:	mov	r2, #0
    1644:	ldr	ip, [sp, #12]
    1648:	lsr	ip, ip, #31
    164c:	adds	r1, r1, ip
    1650:	adc	r2, r3, r2
    1654:	mov	r0, r5
    1658:	cmp	r0, r2
    165c:	bne	1670 <coda_ascii_parse_int64+0x19c>
    1660:	mov	r3, r4
    1664:	cmp	r3, r1
    1668:	bhi	167c <coda_ascii_parse_int64+0x1a8>
    166c:	b	1690 <coda_ascii_parse_int64+0x1bc>
    1670:	mov	r1, r5
    1674:	cmp	r1, r2
    1678:	ble	1690 <coda_ascii_parse_int64+0x1bc>
    167c:	mvn	r0, #102	; 0x66
    1680:	ldr	r1, [pc, #312]	; 17c0 <coda_ascii_parse_int64+0x2ec>
    1684:	bl	0 <coda_set_error>
    1688:	mvn	r0, #0
    168c:	b	1794 <coda_ascii_parse_int64+0x2c0>
    1690:	mov	r3, #10
    1694:	umull	r3, r2, r4, r3
    1698:	lsl	ip, r5, #3
    169c:	add	r0, ip, r5, lsl #1
    16a0:	add	ip, r2, r0
    16a4:	adds	r4, r3, r6
    16a8:	adc	r5, ip, r7
    16ac:	add	r8, r8, #1
    16b0:	add	sl, sl, #1
    16b4:	sub	r9, r9, #1
    16b8:	b	15c0 <coda_ascii_parse_int64+0xec>
    16bc:	cmp	r8, #0
    16c0:	bne	16d8 <coda_ascii_parse_int64+0x204>
    16c4:	mvn	r0, #102	; 0x66
    16c8:	ldr	r1, [pc, #248]	; 17c8 <coda_ascii_parse_int64+0x2f4>
    16cc:	bl	0 <coda_set_error>
    16d0:	mvn	r0, #0
    16d4:	b	1794 <coda_ascii_parse_int64+0x2c0>
    16d8:	ldr	ip, [sp, #16]
    16dc:	cmp	ip, #0
    16e0:	beq	16ec <coda_ascii_parse_int64+0x218>
    16e4:	mov	r3, #0
    16e8:	b	16f8 <coda_ascii_parse_int64+0x224>
    16ec:	cmp	r9, #0
    16f0:	movne	r3, #1
    16f4:	moveq	r3, #0
    16f8:	cmp	r3, #0
    16fc:	beq	1770 <coda_ascii_parse_int64+0x29c>
    1700:	cmp	r9, #0
    1704:	ble	173c <coda_ascii_parse_int64+0x268>
    1708:	ldrb	r2, [sl]
    170c:	cmp	r2, #32
    1710:	beq	1734 <coda_ascii_parse_int64+0x260>
    1714:	ldrb	r1, [sl]
    1718:	cmp	r1, #9
    171c:	moveq	r1, #1
    1720:	movne	r1, #0
    1724:	cmp	r1, #0
    1728:	movne	r2, #1
    172c:	moveq	r2, #0
    1730:	b	1740 <coda_ascii_parse_int64+0x26c>
    1734:	mov	r2, #1
    1738:	b	1740 <coda_ascii_parse_int64+0x26c>
    173c:	mov	r2, #0
    1740:	cmp	r2, #0
    1744:	beq	1754 <coda_ascii_parse_int64+0x280>
    1748:	add	sl, sl, #1
    174c:	sub	r9, r9, #1
    1750:	b	1700 <coda_ascii_parse_int64+0x22c>
    1754:	cmp	r9, #0
    1758:	beq	1770 <coda_ascii_parse_int64+0x29c>
    175c:	mvn	r0, #102	; 0x66
    1760:	ldr	r1, [pc, #92]	; 17c4 <coda_ascii_parse_int64+0x2f0>
    1764:	bl	0 <coda_set_error>
    1768:	mvn	r0, #0
    176c:	b	1794 <coda_ascii_parse_int64+0x2c0>
    1770:	cmp	fp, #0
    1774:	beq	1780 <coda_ascii_parse_int64+0x2ac>
    1778:	rsbs	r4, r4, #0
    177c:	rsc	r5, r5, #0
    1780:	ldr	r3, [sp, #20]
    1784:	str	r4, [r3]
    1788:	str	r5, [r3, #4]
    178c:	ldr	r0, [sp, #8]
    1790:	sub	r0, r0, r9
    1794:	ldr	r4, [sp, #24]
    1798:	ldr	r5, [sp, #28]
    179c:	ldr	r6, [sp, #32]
    17a0:	ldr	r7, [sp, #36]	; 0x24
    17a4:	ldr	r8, [sp, #40]	; 0x28
    17a8:	ldr	r9, [sp, #44]	; 0x2c
    17ac:	ldr	sl, [sp, #48]	; 0x30
    17b0:	ldr	fp, [sp, #52]	; 0x34
    17b4:	ldr	lr, [sp, #4]
    17b8:	add	sp, sp, #56	; 0x38
    17bc:	bx	lr
    17c0:	.word	0x0000030a
    17c4:	.word	0x0000019a
    17c8:	.word	0x000000d3

000017cc <coda_ascii_parse_uint64>:
    17cc:	mov	ip, sp
    17d0:	sub	sp, sp, #48	; 0x30
    17d4:	str	ip, [sp]
    17d8:	str	lr, [sp, #4]
    17dc:	str	r4, [sp, #16]
    17e0:	str	r5, [sp, #20]
    17e4:	str	r6, [sp, #24]
    17e8:	str	r7, [sp, #28]
    17ec:	str	r8, [sp, #32]
    17f0:	str	r9, [sp, #36]	; 0x24
    17f4:	str	sl, [sp, #40]	; 0x28
    17f8:	str	fp, [sp, #44]	; 0x2c
    17fc:	str	r3, [sp, #12]
    1800:	mov	r8, r2
    1804:	str	r1, [sp, #8]
    1808:	mov	sl, r0
    180c:	ldr	r9, [sp, #8]
    1810:	cmp	r9, #0
    1814:	ble	184c <coda_ascii_parse_uint64+0x80>
    1818:	ldrb	r0, [sl]
    181c:	cmp	r0, #32
    1820:	beq	1844 <coda_ascii_parse_uint64+0x78>
    1824:	ldrb	r1, [sl]
    1828:	cmp	r1, #9
    182c:	moveq	r1, #1
    1830:	movne	r1, #0
    1834:	cmp	r1, #0
    1838:	movne	ip, #1
    183c:	moveq	ip, #0
    1840:	b	1850 <coda_ascii_parse_uint64+0x84>
    1844:	mov	ip, #1
    1848:	b	1850 <coda_ascii_parse_uint64+0x84>
    184c:	mov	ip, #0
    1850:	cmp	ip, #0
    1854:	beq	1864 <coda_ascii_parse_uint64+0x98>
    1858:	add	sl, sl, #1
    185c:	sub	r9, r9, #1
    1860:	b	1810 <coda_ascii_parse_uint64+0x44>
    1864:	ldrb	r3, [sl]
    1868:	cmp	r3, #43	; 0x2b
    186c:	bne	1878 <coda_ascii_parse_uint64+0xac>
    1870:	add	sl, sl, #1
    1874:	sub	r9, r9, #1
    1878:	mov	r7, #0
    187c:	mov	r6, #0
    1880:	mov	fp, #0
    1884:	cmp	r9, #0
    1888:	ble	195c <coda_ascii_parse_uint64+0x190>
    188c:	ldrb	r0, [sl]
    1890:	cmp	r0, #48	; 0x30
    1894:	blt	18ac <coda_ascii_parse_uint64+0xe0>
    1898:	ldrb	ip, [sl]
    189c:	cmp	ip, #57	; 0x39
    18a0:	movgt	r1, #1
    18a4:	movle	r1, #0
    18a8:	b	18b0 <coda_ascii_parse_uint64+0xe4>
    18ac:	mov	r1, #1
    18b0:	cmp	r1, #0
    18b4:	bne	195c <coda_ascii_parse_uint64+0x190>
    18b8:	ldrb	r2, [sl]
    18bc:	sub	r4, r2, #48	; 0x30
    18c0:	asr	r5, r4, #31
    18c4:	mvn	r1, #0
    18c8:	mvn	r0, #0
    18cc:	subs	r0, r0, r4
    18d0:	sbc	r1, r1, r5
    18d4:	movw	r3, #52428	; 0xcccc
    18d8:	movt	r3, #52428	; 0xcccc
    18dc:	movw	r2, #52429	; 0xcccd
    18e0:	movt	r2, #52428	; 0xcccc
    18e4:	bl	0 <__compcert_i64_umulh>
    18e8:	lsr	ip, r1, #3
    18ec:	lsr	r3, r0, #3
    18f0:	orr	r0, r3, r1, lsl #29
    18f4:	mov	r2, r7
    18f8:	cmp	r2, ip
    18fc:	bne	1910 <coda_ascii_parse_uint64+0x144>
    1900:	mov	r2, r6
    1904:	cmp	r2, r0
    1908:	bhi	191c <coda_ascii_parse_uint64+0x150>
    190c:	b	1930 <coda_ascii_parse_uint64+0x164>
    1910:	mov	r0, r7
    1914:	cmp	r0, ip
    1918:	bls	1930 <coda_ascii_parse_uint64+0x164>
    191c:	mvn	r0, #102	; 0x66
    1920:	ldr	r1, [pc, #292]	; 1a4c <coda_ascii_parse_uint64+0x280>
    1924:	bl	0 <coda_set_error>
    1928:	mvn	r0, #0
    192c:	b	1a20 <coda_ascii_parse_uint64+0x254>
    1930:	mov	ip, #10
    1934:	umull	r3, r1, r6, ip
    1938:	lsl	ip, r7, #3
    193c:	add	r2, ip, r7, lsl #1
    1940:	add	ip, r1, r2
    1944:	adds	r6, r3, r4
    1948:	adc	r7, ip, r5
    194c:	add	fp, fp, #1
    1950:	add	sl, sl, #1
    1954:	sub	r9, r9, #1
    1958:	b	1884 <coda_ascii_parse_uint64+0xb8>
    195c:	cmp	fp, #0
    1960:	bne	1978 <coda_ascii_parse_uint64+0x1ac>
    1964:	mvn	r0, #102	; 0x66
    1968:	ldr	r1, [pc, #228]	; 1a54 <coda_ascii_parse_uint64+0x288>
    196c:	bl	0 <coda_set_error>
    1970:	mvn	r0, #0
    1974:	b	1a20 <coda_ascii_parse_uint64+0x254>
    1978:	ldr	r2, [sp, #12]
    197c:	cmp	r2, #0
    1980:	beq	198c <coda_ascii_parse_uint64+0x1c0>
    1984:	mov	r1, #0
    1988:	b	1998 <coda_ascii_parse_uint64+0x1cc>
    198c:	cmp	r9, #0
    1990:	movne	r1, #1
    1994:	moveq	r1, #0
    1998:	cmp	r1, #0
    199c:	beq	1a10 <coda_ascii_parse_uint64+0x244>
    19a0:	cmp	r9, #0
    19a4:	ble	19dc <coda_ascii_parse_uint64+0x210>
    19a8:	ldrb	r0, [sl]
    19ac:	cmp	r0, #32
    19b0:	beq	19d4 <coda_ascii_parse_uint64+0x208>
    19b4:	ldrb	r3, [sl]
    19b8:	cmp	r3, #9
    19bc:	moveq	r2, #1
    19c0:	movne	r2, #0
    19c4:	cmp	r2, #0
    19c8:	movne	r0, #1
    19cc:	moveq	r0, #0
    19d0:	b	19e0 <coda_ascii_parse_uint64+0x214>
    19d4:	mov	r0, #1
    19d8:	b	19e0 <coda_ascii_parse_uint64+0x214>
    19dc:	mov	r0, #0
    19e0:	cmp	r0, #0
    19e4:	beq	19f4 <coda_ascii_parse_uint64+0x228>
    19e8:	add	sl, sl, #1
    19ec:	sub	r9, r9, #1
    19f0:	b	19a0 <coda_ascii_parse_uint64+0x1d4>
    19f4:	cmp	r9, #0
    19f8:	beq	1a10 <coda_ascii_parse_uint64+0x244>
    19fc:	mvn	r0, #102	; 0x66
    1a00:	ldr	r1, [pc, #72]	; 1a50 <coda_ascii_parse_uint64+0x284>
    1a04:	bl	0 <coda_set_error>
    1a08:	mvn	r0, #0
    1a0c:	b	1a20 <coda_ascii_parse_uint64+0x254>
    1a10:	str	r6, [r8]
    1a14:	str	r7, [r8, #4]
    1a18:	ldr	r1, [sp, #8]
    1a1c:	sub	r0, r1, r9
    1a20:	ldr	r4, [sp, #16]
    1a24:	ldr	r5, [sp, #20]
    1a28:	ldr	r6, [sp, #24]
    1a2c:	ldr	r7, [sp, #28]
    1a30:	ldr	r8, [sp, #32]
    1a34:	ldr	r9, [sp, #36]	; 0x24
    1a38:	ldr	sl, [sp, #40]	; 0x28
    1a3c:	ldr	fp, [sp, #44]	; 0x2c
    1a40:	ldr	lr, [sp, #4]
    1a44:	add	sp, sp, #48	; 0x30
    1a48:	bx	lr
    1a4c:	.word	0x0000030a
    1a50:	.word	0x0000019a
    1a54:	.word	0x000000d3

00001a58 <coda_ascii_parse_double>:
    1a58:	mov	ip, sp
    1a5c:	sub	sp, sp, #40	; 0x28
    1a60:	str	ip, [sp]
    1a64:	str	lr, [sp, #4]
    1a68:	str	r4, [sp, #8]
    1a6c:	str	r5, [sp, #12]
    1a70:	str	r6, [sp, #16]
    1a74:	str	r7, [sp, #20]
    1a78:	str	r8, [sp, #24]
    1a7c:	vstr	d8, [sp, #32]
    1a80:	mov	r4, r2
    1a84:	mov	r5, r1
    1a88:	mov	r7, #0
    1a8c:	mov	r6, r5
    1a90:	cmp	r6, #0
    1a94:	ble	1acc <coda_ascii_parse_double+0x74>
    1a98:	ldrb	ip, [r0]
    1a9c:	cmp	ip, #32
    1aa0:	beq	1ac4 <coda_ascii_parse_double+0x6c>
    1aa4:	ldrb	ip, [r0]
    1aa8:	cmp	ip, #9
    1aac:	moveq	r1, #1
    1ab0:	movne	r1, #0
    1ab4:	cmp	r1, #0
    1ab8:	movne	ip, #1
    1abc:	moveq	ip, #0
    1ac0:	b	1ad0 <coda_ascii_parse_double+0x78>
    1ac4:	mov	ip, #1
    1ac8:	b	1ad0 <coda_ascii_parse_double+0x78>
    1acc:	mov	ip, #0
    1ad0:	cmp	ip, #0
    1ad4:	beq	1ae4 <coda_ascii_parse_double+0x8c>
    1ad8:	add	r0, r0, #1
    1adc:	sub	r6, r6, #1
    1ae0:	b	1a90 <coda_ascii_parse_double+0x38>
    1ae4:	mov	r8, #0
    1ae8:	cmp	r6, #0
    1aec:	ble	1b38 <coda_ascii_parse_double+0xe0>
    1af0:	ldrb	ip, [r0]
    1af4:	cmp	ip, #43	; 0x2b
    1af8:	beq	1b10 <coda_ascii_parse_double+0xb8>
    1afc:	ldrb	ip, [r0]
    1b00:	cmp	ip, #45	; 0x2d
    1b04:	moveq	r2, #1
    1b08:	movne	r2, #0
    1b0c:	b	1b14 <coda_ascii_parse_double+0xbc>
    1b10:	mov	r2, #1
    1b14:	cmp	r2, #0
    1b18:	beq	1b38 <coda_ascii_parse_double+0xe0>
    1b1c:	ldrb	ip, [r0]
    1b20:	cmp	ip, #45	; 0x2d
    1b24:	moveq	r7, #1
    1b28:	movne	r7, #0
    1b2c:	mov	r8, #1
    1b30:	add	r0, r0, #1
    1b34:	sub	r6, r6, #1
    1b38:	cmp	r6, #3
    1b3c:	blt	1d5c <coda_ascii_parse_double+0x304>
    1b40:	ldrb	r1, [r0]
    1b44:	cmp	r1, #78	; 0x4e
    1b48:	beq	1b60 <coda_ascii_parse_double+0x108>
    1b4c:	ldrb	r1, [r0]
    1b50:	cmp	r1, #110	; 0x6e
    1b54:	moveq	ip, #1
    1b58:	movne	ip, #0
    1b5c:	b	1b64 <coda_ascii_parse_double+0x10c>
    1b60:	mov	ip, #1
    1b64:	cmp	ip, #0
    1b68:	beq	1ba0 <coda_ascii_parse_double+0x148>
    1b6c:	ldrb	ip, [r0, #1]
    1b70:	cmp	ip, #65	; 0x41
    1b74:	beq	1b98 <coda_ascii_parse_double+0x140>
    1b78:	ldrb	r1, [r0, #1]
    1b7c:	cmp	r1, #97	; 0x61
    1b80:	moveq	ip, #1
    1b84:	movne	ip, #0
    1b88:	cmp	ip, #0
    1b8c:	movne	r1, #1
    1b90:	moveq	r1, #0
    1b94:	b	1ba4 <coda_ascii_parse_double+0x14c>
    1b98:	mov	r1, #1
    1b9c:	b	1ba4 <coda_ascii_parse_double+0x14c>
    1ba0:	mov	r1, #0
    1ba4:	cmp	r1, #0
    1ba8:	beq	1be0 <coda_ascii_parse_double+0x188>
    1bac:	ldrb	r1, [r0, #2]
    1bb0:	cmp	r1, #78	; 0x4e
    1bb4:	beq	1bd8 <coda_ascii_parse_double+0x180>
    1bb8:	ldrb	r2, [r0, #2]
    1bbc:	cmp	r2, #110	; 0x6e
    1bc0:	moveq	ip, #1
    1bc4:	movne	ip, #0
    1bc8:	cmp	ip, #0
    1bcc:	movne	ip, #1
    1bd0:	moveq	ip, #0
    1bd4:	b	1be4 <coda_ascii_parse_double+0x18c>
    1bd8:	mov	ip, #1
    1bdc:	b	1be4 <coda_ascii_parse_double+0x18c>
    1be0:	mov	ip, #0
    1be4:	cmp	ip, #0
    1be8:	bne	1bf4 <coda_ascii_parse_double+0x19c>
    1bec:	mov	r2, #0
    1bf0:	b	1c00 <coda_ascii_parse_double+0x1a8>
    1bf4:	cmp	r8, #0
    1bf8:	moveq	r2, #1
    1bfc:	movne	r2, #0
    1c00:	cmp	r2, #0
    1c04:	bne	1d10 <coda_ascii_parse_double+0x2b8>
    1c08:	ldrb	r2, [r0]
    1c0c:	cmp	r2, #73	; 0x49
    1c10:	beq	1c28 <coda_ascii_parse_double+0x1d0>
    1c14:	ldrb	r2, [r0]
    1c18:	cmp	r2, #105	; 0x69
    1c1c:	moveq	ip, #1
    1c20:	movne	ip, #0
    1c24:	b	1c2c <coda_ascii_parse_double+0x1d4>
    1c28:	mov	ip, #1
    1c2c:	cmp	ip, #0
    1c30:	beq	1c68 <coda_ascii_parse_double+0x210>
    1c34:	ldrb	r1, [r0, #1]
    1c38:	cmp	r1, #78	; 0x4e
    1c3c:	beq	1c60 <coda_ascii_parse_double+0x208>
    1c40:	ldrb	ip, [r0, #1]
    1c44:	cmp	ip, #110	; 0x6e
    1c48:	moveq	r1, #1
    1c4c:	movne	r1, #0
    1c50:	cmp	r1, #0
    1c54:	movne	r1, #1
    1c58:	moveq	r1, #0
    1c5c:	b	1c6c <coda_ascii_parse_double+0x214>
    1c60:	mov	r1, #1
    1c64:	b	1c6c <coda_ascii_parse_double+0x214>
    1c68:	mov	r1, #0
    1c6c:	cmp	r1, #0
    1c70:	beq	1ca8 <coda_ascii_parse_double+0x250>
    1c74:	ldrb	r2, [r0, #2]
    1c78:	cmp	r2, #70	; 0x46
    1c7c:	beq	1ca0 <coda_ascii_parse_double+0x248>
    1c80:	ldrb	ip, [r0, #2]
    1c84:	cmp	ip, #102	; 0x66
    1c88:	moveq	r1, #1
    1c8c:	movne	r1, #0
    1c90:	cmp	r1, #0
    1c94:	movne	ip, #1
    1c98:	moveq	ip, #0
    1c9c:	b	1cac <coda_ascii_parse_double+0x254>
    1ca0:	mov	ip, #1
    1ca4:	b	1cac <coda_ascii_parse_double+0x254>
    1ca8:	mov	ip, #0
    1cac:	cmp	ip, #0
    1cb0:	beq	1d5c <coda_ascii_parse_double+0x304>
    1cb4:	sub	r6, r6, #3
    1cb8:	cmp	r3, #0
    1cbc:	beq	1cc8 <coda_ascii_parse_double+0x270>
    1cc0:	mov	r0, #0
    1cc4:	b	1cd4 <coda_ascii_parse_double+0x27c>
    1cc8:	cmp	r6, #0
    1ccc:	movne	r0, #1
    1cd0:	moveq	r0, #0
    1cd4:	cmp	r0, #0
    1cd8:	beq	1cf0 <coda_ascii_parse_double+0x298>
    1cdc:	mvn	r0, #102	; 0x66
    1ce0:	ldr	r1, [pc, #876]	; 2054 <coda_ascii_parse_double+0x5fc>
    1ce4:	bl	0 <coda_set_error>
    1ce8:	mvn	r0, #0
    1cec:	b	20a4 <coda_ascii_parse_double+0x64c>
    1cf0:	cmp	r7, #0
    1cf4:	bne	1d00 <coda_ascii_parse_double+0x2a8>
    1cf8:	bl	0 <coda_PlusInf>
    1cfc:	b	1d04 <coda_ascii_parse_double+0x2ac>
    1d00:	bl	0 <coda_MinInf>
    1d04:	vstr	d0, [r4]
    1d08:	sub	r0, r5, r6
    1d0c:	b	20a4 <coda_ascii_parse_double+0x64c>
    1d10:	sub	r6, r6, #3
    1d14:	cmp	r3, #0
    1d18:	beq	1d24 <coda_ascii_parse_double+0x2cc>
    1d1c:	mov	r3, #0
    1d20:	b	1d30 <coda_ascii_parse_double+0x2d8>
    1d24:	cmp	r6, #0
    1d28:	movne	r3, #1
    1d2c:	moveq	r3, #0
    1d30:	cmp	r3, #0
    1d34:	beq	1d4c <coda_ascii_parse_double+0x2f4>
    1d38:	mvn	r0, #102	; 0x66
    1d3c:	ldr	r1, [pc, #784]	; 2054 <coda_ascii_parse_double+0x5fc>
    1d40:	bl	0 <coda_set_error>
    1d44:	mvn	r0, #0
    1d48:	b	20a4 <coda_ascii_parse_double+0x64c>
    1d4c:	bl	0 <coda_NaN>
    1d50:	vstr	d0, [r4]
    1d54:	sub	r0, r5, r6
    1d58:	b	20a4 <coda_ascii_parse_double+0x64c>
    1d5c:	vldr	d8, [pc, #764]	; 2060 <coda_ascii_parse_double+0x608>
    1d60:	mov	r1, #0
    1d64:	mov	r8, #0
    1d68:	cmp	r6, #0
    1d6c:	ble	1dc8 <coda_ascii_parse_double+0x370>
    1d70:	ldrb	ip, [r0]
    1d74:	cmp	ip, #48	; 0x30
    1d78:	blt	1d90 <coda_ascii_parse_double+0x338>
    1d7c:	ldrb	r2, [r0]
    1d80:	cmp	r2, #57	; 0x39
    1d84:	movgt	ip, #1
    1d88:	movle	ip, #0
    1d8c:	b	1d94 <coda_ascii_parse_double+0x33c>
    1d90:	mov	ip, #1
    1d94:	cmp	ip, #0
    1d98:	bne	1dc8 <coda_ascii_parse_double+0x370>
    1d9c:	vmov.f64	d2, #36	; 0x41200000  10.0
    1da0:	vmul.f64	d2, d2, d8
    1da4:	ldrb	r2, [r0]
    1da8:	sub	ip, r2, #48	; 0x30
    1dac:	vmov	s2, ip
    1db0:	vcvt.f64.s32	d1, s2
    1db4:	vadd.f64	d8, d2, d1
    1db8:	add	r8, r8, #1
    1dbc:	add	r0, r0, #1
    1dc0:	sub	r6, r6, #1
    1dc4:	b	1d68 <coda_ascii_parse_double+0x310>
    1dc8:	cmp	r6, #0
    1dcc:	ble	1e48 <coda_ascii_parse_double+0x3f0>
    1dd0:	ldrb	r2, [r0]
    1dd4:	cmp	r2, #46	; 0x2e
    1dd8:	bne	1e48 <coda_ascii_parse_double+0x3f0>
    1ddc:	add	r0, r0, #1
    1de0:	sub	r6, r6, #1
    1de4:	cmp	r6, #0
    1de8:	ble	1e48 <coda_ascii_parse_double+0x3f0>
    1dec:	ldrb	r2, [r0]
    1df0:	cmp	r2, #48	; 0x30
    1df4:	blt	1e0c <coda_ascii_parse_double+0x3b4>
    1df8:	ldrb	r2, [r0]
    1dfc:	cmp	r2, #57	; 0x39
    1e00:	movgt	r2, #1
    1e04:	movle	r2, #0
    1e08:	b	1e10 <coda_ascii_parse_double+0x3b8>
    1e0c:	mov	r2, #1
    1e10:	cmp	r2, #0
    1e14:	bne	1e48 <coda_ascii_parse_double+0x3f0>
    1e18:	vmov.f64	d7, #36	; 0x41200000  10.0
    1e1c:	vmul.f64	d0, d7, d8
    1e20:	ldrb	ip, [r0]
    1e24:	sub	ip, ip, #48	; 0x30
    1e28:	vmov	s6, ip
    1e2c:	vcvt.f64.s32	d3, s6
    1e30:	vadd.f64	d8, d0, d3
    1e34:	sub	r1, r1, #1
    1e38:	add	r8, r8, #1
    1e3c:	add	r0, r0, #1
    1e40:	sub	r6, r6, #1
    1e44:	b	1de4 <coda_ascii_parse_double+0x38c>
    1e48:	cmp	r8, #0
    1e4c:	bne	1e64 <coda_ascii_parse_double+0x40c>
    1e50:	mvn	r0, #102	; 0x66
    1e54:	ldr	r1, [pc, #512]	; 205c <coda_ascii_parse_double+0x604>
    1e58:	bl	0 <coda_set_error>
    1e5c:	mvn	r0, #0
    1e60:	b	20a4 <coda_ascii_parse_double+0x64c>
    1e64:	cmp	r7, #0
    1e68:	beq	1e70 <coda_ascii_parse_double+0x418>
    1e6c:	vneg.f64	d8, d8
    1e70:	cmp	r6, #0
    1e74:	ble	1eec <coda_ascii_parse_double+0x494>
    1e78:	ldrb	ip, [r0]
    1e7c:	cmp	ip, #100	; 0x64
    1e80:	beq	1e98 <coda_ascii_parse_double+0x440>
    1e84:	ldrb	ip, [r0]
    1e88:	cmp	ip, #68	; 0x44
    1e8c:	moveq	ip, #1
    1e90:	movne	ip, #0
    1e94:	b	1e9c <coda_ascii_parse_double+0x444>
    1e98:	mov	ip, #1
    1e9c:	cmp	ip, #0
    1ea0:	bne	1eb8 <coda_ascii_parse_double+0x460>
    1ea4:	ldrb	r2, [r0]
    1ea8:	cmp	r2, #101	; 0x65
    1eac:	moveq	r2, #1
    1eb0:	movne	r2, #0
    1eb4:	b	1ebc <coda_ascii_parse_double+0x464>
    1eb8:	mov	r2, #1
    1ebc:	cmp	r2, #0
    1ec0:	bne	1ee4 <coda_ascii_parse_double+0x48c>
    1ec4:	ldrb	ip, [r0]
    1ec8:	cmp	ip, #69	; 0x45
    1ecc:	moveq	ip, #1
    1ed0:	movne	ip, #0
    1ed4:	cmp	ip, #0
    1ed8:	movne	ip, #1
    1edc:	moveq	ip, #0
    1ee0:	b	1ef0 <coda_ascii_parse_double+0x498>
    1ee4:	mov	ip, #1
    1ee8:	b	1ef0 <coda_ascii_parse_double+0x498>
    1eec:	mov	ip, #0
    1ef0:	cmp	ip, #0
    1ef4:	beq	1fdc <coda_ascii_parse_double+0x584>
    1ef8:	add	r0, r0, #1
    1efc:	sub	r6, r6, #1
    1f00:	mov	r8, #0
    1f04:	cmp	r6, #0
    1f08:	ble	1f50 <coda_ascii_parse_double+0x4f8>
    1f0c:	ldrb	r2, [r0]
    1f10:	cmp	r2, #43	; 0x2b
    1f14:	beq	1f2c <coda_ascii_parse_double+0x4d4>
    1f18:	ldrb	r2, [r0]
    1f1c:	cmp	r2, #45	; 0x2d
    1f20:	moveq	r2, #1
    1f24:	movne	r2, #0
    1f28:	b	1f30 <coda_ascii_parse_double+0x4d8>
    1f2c:	mov	r2, #1
    1f30:	cmp	r2, #0
    1f34:	beq	1f50 <coda_ascii_parse_double+0x4f8>
    1f38:	ldrb	r2, [r0]
    1f3c:	cmp	r2, #45	; 0x2d
    1f40:	moveq	r8, #1
    1f44:	movne	r8, #0
    1f48:	add	r0, r0, #1
    1f4c:	sub	r6, r6, #1
    1f50:	mov	r2, #0
    1f54:	mov	r7, #0
    1f58:	cmp	r6, #0
    1f5c:	ble	1fb0 <coda_ascii_parse_double+0x558>
    1f60:	ldrb	ip, [r0]
    1f64:	cmp	ip, #48	; 0x30
    1f68:	blt	1f80 <coda_ascii_parse_double+0x528>
    1f6c:	ldrb	ip, [r0]
    1f70:	cmp	ip, #57	; 0x39
    1f74:	movgt	ip, #1
    1f78:	movle	ip, #0
    1f7c:	b	1f84 <coda_ascii_parse_double+0x52c>
    1f80:	mov	ip, #1
    1f84:	cmp	ip, #0
    1f88:	bne	1fb0 <coda_ascii_parse_double+0x558>
    1f8c:	lsl	ip, r2, #3
    1f90:	add	ip, ip, r2, lsl #1
    1f94:	ldrb	r2, [r0]
    1f98:	add	r2, ip, r2
    1f9c:	sub	r2, r2, #48	; 0x30
    1fa0:	add	r7, r7, #1
    1fa4:	add	r0, r0, #1
    1fa8:	sub	r6, r6, #1
    1fac:	b	1f58 <coda_ascii_parse_double+0x500>
    1fb0:	cmp	r7, #0
    1fb4:	bne	1fcc <coda_ascii_parse_double+0x574>
    1fb8:	mvn	r0, #102	; 0x66
    1fbc:	ldr	r1, [pc, #148]	; 2058 <coda_ascii_parse_double+0x600>
    1fc0:	bl	0 <coda_set_error>
    1fc4:	mvn	r0, #0
    1fc8:	b	20a4 <coda_ascii_parse_double+0x64c>
    1fcc:	cmp	r8, #0
    1fd0:	beq	1fd8 <coda_ascii_parse_double+0x580>
    1fd4:	rsb	r2, r2, #0
    1fd8:	add	r1, r1, r2
    1fdc:	cmp	r3, #0
    1fe0:	beq	1fec <coda_ascii_parse_double+0x594>
    1fe4:	mov	r2, #0
    1fe8:	b	1ff8 <coda_ascii_parse_double+0x5a0>
    1fec:	cmp	r6, #0
    1ff0:	movne	r2, #1
    1ff4:	moveq	r2, #0
    1ff8:	cmp	r2, #0
    1ffc:	beq	2084 <coda_ascii_parse_double+0x62c>
    2000:	cmp	r6, #0
    2004:	ble	203c <coda_ascii_parse_double+0x5e4>
    2008:	ldrb	r2, [r0]
    200c:	cmp	r2, #32
    2010:	beq	2034 <coda_ascii_parse_double+0x5dc>
    2014:	ldrb	r2, [r0]
    2018:	cmp	r2, #9
    201c:	moveq	r2, #1
    2020:	movne	r2, #0
    2024:	cmp	r2, #0
    2028:	movne	r2, #1
    202c:	moveq	r2, #0
    2030:	b	2040 <coda_ascii_parse_double+0x5e8>
    2034:	mov	r2, #1
    2038:	b	2040 <coda_ascii_parse_double+0x5e8>
    203c:	mov	r2, #0
    2040:	cmp	r2, #0
    2044:	beq	2068 <coda_ascii_parse_double+0x610>
    2048:	add	r0, r0, #1
    204c:	sub	r6, r6, #1
    2050:	b	2000 <coda_ascii_parse_double+0x5a8>
    2054:	.word	0x0000016c
    2058:	.word	0x00000490
    205c:	.word	0x000001bb
	...
    2068:	cmp	r6, #0
    206c:	beq	2084 <coda_ascii_parse_double+0x62c>
    2070:	mvn	r0, #102	; 0x66
    2074:	ldr	r1, [pc, #76]	; 20c8 <coda_ascii_parse_double+0x670>
    2078:	bl	0 <coda_set_error>
    207c:	mvn	r0, #0
    2080:	b	20a4 <coda_ascii_parse_double+0x64c>
    2084:	cmp	r1, #0
    2088:	beq	209c <coda_ascii_parse_double+0x644>
    208c:	vmov.f64	d0, #36	; 0x41200000  10.0
    2090:	mov	r0, r1
    2094:	bl	bc4 <ipow>
    2098:	vmul.f64	d8, d8, d0
    209c:	vstr	d8, [r4]
    20a0:	sub	r0, r5, r6
    20a4:	ldr	r4, [sp, #8]
    20a8:	ldr	r5, [sp, #12]
    20ac:	ldr	r6, [sp, #16]
    20b0:	ldr	r7, [sp, #20]
    20b4:	ldr	r8, [sp, #24]
    20b8:	vldr	d8, [sp, #32]
    20bc:	ldr	lr, [sp, #4]
    20c0:	add	sp, sp, #40	; 0x28
    20c4:	bx	lr
    20c8:	.word	0x0000016c

000020cc <coda_ascii_cursor_set_asciilines>:
    20cc:	mov	ip, sp
    20d0:	sub	sp, sp, #24
    20d4:	str	ip, [sp]
    20d8:	str	lr, [sp, #4]
    20dc:	str	r4, [sp, #8]
    20e0:	str	r5, [sp, #12]
    20e4:	str	r6, [sp, #16]
    20e8:	str	r7, [sp, #20]
    20ec:	mov	r7, r1
    20f0:	mov	r6, r0
    20f4:	ldr	ip, [r7, #68]	; 0x44
    20f8:	cmp	ip, #0
    20fc:	bne	2118 <coda_ascii_cursor_set_asciilines+0x4c>
    2100:	mov	r0, r7
    2104:	bl	0 <coda_ascii_init_asciilines>
    2108:	cmp	r0, #0
    210c:	beq	2118 <coda_ascii_cursor_set_asciilines+0x4c>
    2110:	mvn	r0, #0
    2114:	b	21f4 <coda_ascii_cursor_set_asciilines+0x128>
    2118:	ldr	r3, [r7, #76]	; 0x4c
    211c:	cmp	r3, #0
    2120:	bne	21c4 <coda_ascii_cursor_set_asciilines+0xf8>
    2124:	mov	r0, #0
    2128:	bl	0 <coda_type_array_new>
    212c:	mov	r5, r0
    2130:	cmp	r5, #0
    2134:	bne	2140 <coda_ascii_cursor_set_asciilines+0x74>
    2138:	mvn	r0, #0
    213c:	b	21f4 <coda_ascii_cursor_set_asciilines+0x128>
    2140:	ldr	r1, [r7, #64]	; 0x40
    2144:	mov	r0, r5
    2148:	bl	0 <coda_type_array_add_fixed_dimension>
    214c:	cmp	r0, #0
    2150:	beq	2164 <coda_ascii_cursor_set_asciilines+0x98>
    2154:	mov	r0, r5
    2158:	bl	0 <coda_type_release>
    215c:	mvn	r0, #0
    2160:	b	21f4 <coda_ascii_cursor_set_asciilines+0x128>
    2164:	mov	r0, #0
    2168:	bl	0 <coda_type_text_new>
    216c:	mov	r4, r0
    2170:	cmp	r4, #0
    2174:	bne	2188 <coda_ascii_cursor_set_asciilines+0xbc>
    2178:	mov	r0, r5
    217c:	bl	0 <coda_type_release>
    2180:	mvn	r0, #0
    2184:	b	21f4 <coda_ascii_cursor_set_asciilines+0x128>
    2188:	mov	r1, #2
    218c:	mov	r0, r4
    2190:	bl	0 <coda_type_text_set_special_text_type>
    2194:	mov	r1, r4
    2198:	mov	r0, r5
    219c:	bl	0 <coda_type_array_set_base_type>
    21a0:	cmp	r0, #0
    21a4:	beq	21c0 <coda_ascii_cursor_set_asciilines+0xf4>
    21a8:	mov	r0, r5
    21ac:	bl	0 <coda_type_release>
    21b0:	mov	r0, r4
    21b4:	bl	0 <coda_type_release>
    21b8:	mvn	r0, #0
    21bc:	b	21f4 <coda_ascii_cursor_set_asciilines+0x128>
    21c0:	str	r5, [r7, #76]	; 0x4c
    21c4:	str	r7, [r6]
    21c8:	mov	r2, #1
    21cc:	str	r2, [r6, #4]
    21d0:	ldr	r0, [r7, #76]	; 0x4c
    21d4:	str	r0, [r6, #8]
    21d8:	mvn	r2, #0
    21dc:	str	r2, [r6, #12]
    21e0:	mov	r1, #0
    21e4:	mov	r0, #0
    21e8:	str	r0, [r6, #16]
    21ec:	str	r1, [r6, #20]
    21f0:	mov	r0, #0
    21f4:	ldr	r4, [sp, #8]
    21f8:	ldr	r5, [sp, #12]
    21fc:	ldr	r6, [sp, #16]
    2200:	ldr	r7, [sp, #20]
    2204:	ldr	lr, [sp, #4]
    2208:	add	sp, sp, #24
    220c:	bx	lr

00002210 <coda_ascii_cursor_get_string_length>:
    2210:	mov	ip, sp
    2214:	sub	sp, sp, #24
    2218:	str	ip, [sp]
    221c:	str	lr, [sp, #4]
    2220:	str	r4, [sp, #8]
    2224:	mov	r4, r1
    2228:	add	r1, sp, #16
    222c:	bl	2280 <coda_ascii_cursor_get_bit_size>
    2230:	cmp	r0, #0
    2234:	beq	2240 <coda_ascii_cursor_get_string_length+0x30>
    2238:	mvn	r0, #0
    223c:	b	2270 <coda_ascii_cursor_get_string_length+0x60>
    2240:	ldr	r0, [sp, #20]
    2244:	cmp	r0, #0
    2248:	blt	2264 <coda_ascii_cursor_get_string_length+0x54>
    224c:	ldr	r3, [sp, #16]
    2250:	ldr	r2, [sp, #20]
    2254:	lsr	r3, r3, #3
    2258:	orr	r1, r3, r2, lsl #29
    225c:	str	r1, [r4]
    2260:	b	226c <coda_ascii_cursor_get_string_length+0x5c>
    2264:	mvn	ip, #0
    2268:	str	ip, [r4]
    226c:	mov	r0, #0
    2270:	ldr	r4, [sp, #8]
    2274:	ldr	lr, [sp, #4]
    2278:	add	sp, sp, #24
    227c:	bx	lr

00002280 <coda_ascii_cursor_get_bit_size>:
    2280:	mov	ip, sp
    2284:	sub	sp, sp, #720	; 0x2d0
    2288:	str	ip, [sp, #12]
    228c:	str	lr, [sp, #16]
    2290:	str	r4, [sp, #36]	; 0x24
    2294:	str	r5, [sp, #40]	; 0x28
    2298:	str	r6, [sp, #44]	; 0x2c
    229c:	str	r7, [sp, #48]	; 0x30
    22a0:	str	r8, [sp, #52]	; 0x34
    22a4:	str	r9, [sp, #56]	; 0x38
    22a8:	str	sl, [sp, #60]	; 0x3c
    22ac:	str	fp, [sp, #64]	; 0x40
    22b0:	mov	sl, r1
    22b4:	mov	r9, r0
    22b8:	ldr	r2, [r9, #4]
    22bc:	lsl	r0, r2, #4
    22c0:	add	r0, r9, r0
    22c4:	sub	lr, r0, #4096	; 0x1000
    22c8:	ldr	r1, [lr, #4088]	; 0xff8
    22cc:	ldr	r0, [r1]
    22d0:	cmp	r0, #100	; 0x64
    22d4:	blt	22f4 <coda_ascii_cursor_get_bit_size+0x74>
    22d8:	ldr	r3, [r9, #4]
    22dc:	lsl	ip, r3, #4
    22e0:	add	r1, r9, ip
    22e4:	sub	lr, r1, #4096	; 0x1000
    22e8:	ldr	r0, [lr, #4088]	; 0xff8
    22ec:	ldr	r5, [r0, #4]
    22f0:	b	2308 <coda_ascii_cursor_get_bit_size+0x88>
    22f4:	ldr	r1, [r9, #4]
    22f8:	lsl	r2, r1, #4
    22fc:	add	ip, r9, r2
    2300:	sub	lr, ip, #4096	; 0x1000
    2304:	ldr	r5, [lr, #4088]	; 0xff8
    2308:	mov	r7, #0
    230c:	ldr	r0, [r9, #4]
    2310:	lsl	r0, r0, #4
    2314:	add	ip, r9, r0
    2318:	ldr	r3, [ip]
    231c:	str	r3, [sp, #28]
    2320:	ldr	fp, [ip, #4]
    2324:	mvn	r6, #0
    2328:	mov	r4, #0
    232c:	ldr	r3, [r5, #28]
    2330:	cmp	r3, #0
    2334:	blt	2350 <coda_ascii_cursor_get_bit_size+0xd0>
    2338:	ldr	r1, [r5, #24]
    233c:	ldr	r2, [r5, #28]
    2340:	str	r1, [sl]
    2344:	str	r2, [sl, #4]
    2348:	mov	r0, #0
    234c:	b	2f90 <coda_ascii_cursor_get_bit_size+0xd10>
    2350:	ldr	r2, [r5, #8]
    2354:	cmp	r2, #0
    2358:	beq	2370 <coda_ascii_cursor_get_bit_size+0xf0>
    235c:	ldr	r1, [r5, #8]
    2360:	cmp	r1, #1
    2364:	moveq	ip, #1
    2368:	movne	ip, #0
    236c:	b	2374 <coda_ascii_cursor_get_bit_size+0xf4>
    2370:	mov	ip, #1
    2374:	cmp	ip, #0
    2378:	beq	238c <coda_ascii_cursor_get_bit_size+0x10c>
    237c:	mov	r1, sl
    2380:	mov	r0, r9
    2384:	bl	0 <coda_ascbin_cursor_get_bit_size>
    2388:	b	2f90 <coda_ascii_cursor_get_bit_size+0xd10>
    238c:	add	r1, sp, #80	; 0x50
    2390:	mvn	r3, #0
    2394:	mvn	r2, #0
    2398:	mov	r0, r9
    239c:	bl	c2c <get_bit_size_boundary>
    23a0:	cmp	r0, #0
    23a4:	beq	23b0 <coda_ascii_cursor_get_bit_size+0x130>
    23a8:	mvn	r0, #0
    23ac:	b	2f90 <coda_ascii_cursor_get_bit_size+0xd10>
    23b0:	ldr	r2, [r5, #8]
    23b4:	cmp	r2, #2
    23b8:	beq	23d0 <coda_ascii_cursor_get_bit_size+0x150>
    23bc:	ldr	r0, [r5, #8]
    23c0:	cmp	r0, #3
    23c4:	moveq	r3, #1
    23c8:	movne	r3, #0
    23cc:	b	23d4 <coda_ascii_cursor_get_bit_size+0x154>
    23d0:	mov	r3, #1
    23d4:	cmp	r3, #0
    23d8:	bne	24b4 <coda_ascii_cursor_get_bit_size+0x234>
    23dc:	ldr	r3, [r5, #8]
    23e0:	cmp	r3, #4
    23e4:	beq	245c <coda_ascii_cursor_get_bit_size+0x1dc>
    23e8:	ldr	ip, [r5, #8]
    23ec:	cmp	ip, #6
    23f0:	bne	2408 <coda_ascii_cursor_get_bit_size+0x188>
    23f4:	ldr	ip, [r5, #40]	; 0x28
    23f8:	cmp	ip, #2
    23fc:	moveq	r0, #1
    2400:	movne	r0, #0
    2404:	b	240c <coda_ascii_cursor_get_bit_size+0x18c>
    2408:	mov	r0, #0
    240c:	cmp	r0, #0
    2410:	beq	24d8 <coda_ascii_cursor_get_bit_size+0x258>
    2414:	ldr	r8, [r5, #44]	; 0x2c
    2418:	ldr	r1, [r8, #8]
    241c:	cmp	r1, #4
    2420:	beq	2438 <coda_ascii_cursor_get_bit_size+0x1b8>
    2424:	ldr	r0, [pc, #3000]	; 2fe4 <coda_ascii_cursor_get_bit_size+0xd64>
    2428:	ldr	r1, [pc, #3000]	; 2fe8 <coda_ascii_cursor_get_bit_size+0xd68>
    242c:	movw	r2, #693	; 0x2b5
    2430:	ldr	r3, [pc, #2948]	; 2fbc <coda_ascii_cursor_get_bit_size+0xd3c>
    2434:	bl	0 <__assert_fail>
    2438:	ldr	r0, [r8, #44]	; 0x2c
    243c:	cmp	r0, #0
    2440:	bne	24d8 <coda_ascii_cursor_get_bit_size+0x258>
    2444:	ldr	r0, [sp, #80]	; 0x50
    2448:	ldr	ip, [sp, #84]	; 0x54
    244c:	str	r0, [sl]
    2450:	str	ip, [sl, #4]
    2454:	mov	r0, #0
    2458:	b	2f90 <coda_ascii_cursor_get_bit_size+0xd10>
    245c:	ldr	r1, [r5, #32]
    2460:	cmp	r1, #0
    2464:	bne	247c <coda_ascii_cursor_get_bit_size+0x1fc>
    2468:	ldr	r2, [r5, #44]	; 0x2c
    246c:	cmp	r2, #0
    2470:	moveq	r1, #1
    2474:	movne	r1, #0
    2478:	b	2480 <coda_ascii_cursor_get_bit_size+0x200>
    247c:	mov	r1, #0
    2480:	cmp	r1, #0
    2484:	beq	24a0 <coda_ascii_cursor_get_bit_size+0x220>
    2488:	ldr	ip, [sp, #80]	; 0x50
    248c:	ldr	r1, [sp, #84]	; 0x54
    2490:	str	ip, [sl]
    2494:	str	r1, [sl, #4]
    2498:	mov	r0, #0
    249c:	b	2f90 <coda_ascii_cursor_get_bit_size+0xd10>
    24a0:	ldr	r0, [r5, #32]
    24a4:	cmp	r0, #0
    24a8:	moveq	r4, #1
    24ac:	movne	r4, #0
    24b0:	b	24d8 <coda_ascii_cursor_get_bit_size+0x258>
    24b4:	ldr	r7, [r5, #52]	; 0x34
    24b8:	cmp	r7, #0
    24bc:	bne	24d4 <coda_ascii_cursor_get_bit_size+0x254>
    24c0:	ldr	ip, [r5, #32]
    24c4:	cmp	ip, #0
    24c8:	moveq	r4, #1
    24cc:	movne	r4, #0
    24d0:	b	24d8 <coda_ascii_cursor_get_bit_size+0x258>
    24d4:	mov	r4, #1
    24d8:	cmp	r4, #0
    24dc:	beq	2574 <coda_ascii_cursor_get_bit_size+0x2f4>
    24e0:	ldr	r0, [sp, #80]	; 0x50
    24e4:	ldr	ip, [sp, #84]	; 0x54
    24e8:	asr	r3, ip, #3
    24ec:	lsr	r2, r0, #3
    24f0:	orr	ip, r2, ip, lsl #29
    24f4:	mov	r1, #0
    24f8:	cmp	r3, r1
    24fc:	bne	2510 <coda_ascii_cursor_get_bit_size+0x290>
    2500:	mov	r1, #64	; 0x40
    2504:	cmp	ip, r1
    2508:	bcc	251c <coda_ascii_cursor_get_bit_size+0x29c>
    250c:	b	2530 <coda_ascii_cursor_get_bit_size+0x2b0>
    2510:	mov	r0, #0
    2514:	cmp	r3, r0
    2518:	bge	2530 <coda_ascii_cursor_get_bit_size+0x2b0>
    251c:	ldr	r1, [sp, #80]	; 0x50
    2520:	ldr	ip, [sp, #84]	; 0x54
    2524:	lsr	r2, r1, #3
    2528:	orr	r6, r2, ip, lsl #29
    252c:	b	2534 <coda_ascii_cursor_get_bit_size+0x2b4>
    2530:	mov	r6, #64	; 0x40
    2534:	ldr	r0, [r9]
    2538:	ldr	ip, [sp, #28]
    253c:	asr	r3, fp, #3
    2540:	lsr	r1, ip, #3
    2544:	orr	r2, r1, fp, lsl #29
    2548:	asr	r4, r6, #31
    254c:	mov	r1, r6
    2550:	add	r8, sp, #136	; 0x88
    2554:	str	r8, [sp, #8]
    2558:	str	r4, [sp, #4]
    255c:	str	r1, [sp]
    2560:	bl	224 <read_bytes_in_bounds>
    2564:	cmp	r0, #0
    2568:	beq	2574 <coda_ascii_cursor_get_bit_size+0x2f4>
    256c:	mvn	r0, #0
    2570:	b	2f90 <coda_ascii_cursor_get_bit_size+0xd10>
    2574:	cmp	r7, #0
    2578:	beq	25a0 <coda_ascii_cursor_get_bit_size+0x320>
    257c:	add	r0, sp, #136	; 0x88
    2580:	mov	r3, sl
    2584:	mov	r2, r7
    2588:	mov	r1, r6
    258c:	bl	10c8 <parse_mapping_size>
    2590:	cmp	r0, #0
    2594:	beq	25a0 <coda_ascii_cursor_get_bit_size+0x320>
    2598:	mov	r0, #0
    259c:	b	2f90 <coda_ascii_cursor_get_bit_size+0xd10>
    25a0:	ldr	r0, [r5, #8]
    25a4:	cmp	r0, #6
    25a8:	bne	25f0 <coda_ascii_cursor_get_bit_size+0x370>
    25ac:	mov	r2, r9
    25b0:	add	r3, sp, #200	; 0xc8
    25b4:	mov	lr, #130	; 0x82
    25b8:	ldr	ip, [r2], #4
    25bc:	subs	lr, lr, #1
    25c0:	str	ip, [r3], #4
    25c4:	bne	25b8 <coda_ascii_cursor_get_bit_size+0x338>
    25c8:	add	r0, sp, #200	; 0xc8
    25cc:	bl	0 <coda_cursor_use_base_type_of_special_type>
    25d0:	cmp	r0, #0
    25d4:	beq	25e0 <coda_ascii_cursor_get_bit_size+0x360>
    25d8:	mvn	r0, #0
    25dc:	b	2f90 <coda_ascii_cursor_get_bit_size+0xd10>
    25e0:	add	r0, sp, #200	; 0xc8
    25e4:	mov	r1, sl
    25e8:	bl	0 <coda_cursor_get_bit_size>
    25ec:	b	2f90 <coda_ascii_cursor_get_bit_size+0xd10>
    25f0:	ldr	r3, [r5, #32]
    25f4:	cmp	r3, #0
    25f8:	beq	26a8 <coda_ascii_cursor_get_bit_size+0x428>
    25fc:	ldr	r0, [r5, #32]
    2600:	mov	r2, sl
    2604:	mov	r1, r9
    2608:	bl	0 <coda_expression_eval_integer>
    260c:	cmp	r0, #0
    2610:	beq	262c <coda_ascii_cursor_get_bit_size+0x3ac>
    2614:	ldr	r0, [pc, #2492]	; 2fd8 <coda_ascii_cursor_get_bit_size+0xd58>
    2618:	bl	0 <coda_add_error_message>
    261c:	mov	r0, r9
    2620:	bl	0 <coda_cursor_add_to_error_message>
    2624:	mvn	r0, #0
    2628:	b	2f90 <coda_ascii_cursor_get_bit_size+0xd10>
    262c:	ldr	r2, [r5, #24]
    2630:	ldr	r3, [r5, #28]
    2634:	mvn	r3, r3
    2638:	eor	r2, r2, #1016	; 0x3f8
    263c:	eor	r2, r2, #261120	; 0x3fc00
    2640:	eor	r2, r2, #66846720	; 0x3fc0000
    2644:	eor	r2, r2, #-67108864	; 0xfc000000
    2648:	orr	r2, r3, r2
    264c:	cmp	r2, #0
    2650:	bne	2670 <coda_ascii_cursor_get_bit_size+0x3f0>
    2654:	ldr	r2, [sl]
    2658:	ldr	r3, [sl, #4]
    265c:	lsl	r3, r3, #3
    2660:	orr	ip, r3, r2, lsr #29
    2664:	lsl	r3, r2, #3
    2668:	str	r3, [sl]
    266c:	str	ip, [sl, #4]
    2670:	ldr	r2, [sl, #4]
    2674:	cmp	r2, #0
    2678:	bge	26a0 <coda_ascii_cursor_get_bit_size+0x420>
    267c:	movw	r0, #65236	; 0xfed4
    2680:	movt	r0, #65535	; 0xffff
    2684:	ldr	r1, [pc, #2364]	; 2fc8 <coda_ascii_cursor_get_bit_size+0xd48>
    2688:	ldr	r2, [sl]
    268c:	bl	0 <coda_set_error>
    2690:	mov	r0, r9
    2694:	bl	0 <coda_cursor_add_to_error_message>
    2698:	mvn	r0, #0
    269c:	b	2f90 <coda_ascii_cursor_get_bit_size+0xd10>
    26a0:	mov	r0, #0
    26a4:	b	2f90 <coda_ascii_cursor_get_bit_size+0xd10>
    26a8:	ldr	r0, [r5, #8]
    26ac:	cmp	r0, #2
    26b0:	beq	26c8 <coda_ascii_cursor_get_bit_size+0x448>
    26b4:	ldr	r1, [r5, #8]
    26b8:	cmp	r1, #3
    26bc:	moveq	r1, #1
    26c0:	movne	r1, #0
    26c4:	b	26cc <coda_ascii_cursor_get_bit_size+0x44c>
    26c8:	mov	r1, #1
    26cc:	cmp	r1, #0
    26d0:	beq	27ac <coda_ascii_cursor_get_bit_size+0x52c>
    26d4:	ldr	r2, [r5, #12]
    26d8:	cmp	r2, #10
    26dc:	bcs	2764 <coda_ascii_cursor_get_bit_size+0x4e4>
    26e0:	add	pc, pc, r2, lsl #2
    26e4:	nop	{0}
    26e8:	b	2710 <coda_ascii_cursor_get_bit_size+0x490>
    26ec:	b	272c <coda_ascii_cursor_get_bit_size+0x4ac>
    26f0:	b	2710 <coda_ascii_cursor_get_bit_size+0x490>
    26f4:	b	272c <coda_ascii_cursor_get_bit_size+0x4ac>
    26f8:	b	2710 <coda_ascii_cursor_get_bit_size+0x490>
    26fc:	b	272c <coda_ascii_cursor_get_bit_size+0x4ac>
    2700:	b	2710 <coda_ascii_cursor_get_bit_size+0x490>
    2704:	b	272c <coda_ascii_cursor_get_bit_size+0x4ac>
    2708:	b	2748 <coda_ascii_cursor_get_bit_size+0x4c8>
    270c:	b	2748 <coda_ascii_cursor_get_bit_size+0x4c8>
    2710:	add	r0, sp, #136	; 0x88
    2714:	add	r2, sp, #88	; 0x58
    2718:	mov	r3, #1
    271c:	mov	r1, r6
    2720:	bl	14d4 <coda_ascii_parse_int64>
    2724:	str	r0, [sp, #24]
    2728:	b	2780 <coda_ascii_cursor_get_bit_size+0x500>
    272c:	add	r0, sp, #136	; 0x88
    2730:	add	r2, sp, #96	; 0x60
    2734:	mov	r3, #1
    2738:	mov	r1, r6
    273c:	bl	17cc <coda_ascii_parse_uint64>
    2740:	str	r0, [sp, #24]
    2744:	b	2780 <coda_ascii_cursor_get_bit_size+0x500>
    2748:	add	r0, sp, #136	; 0x88
    274c:	add	r2, sp, #104	; 0x68
    2750:	mov	r3, #1
    2754:	mov	r1, r6
    2758:	bl	1a58 <coda_ascii_parse_double>
    275c:	str	r0, [sp, #24]
    2760:	b	2780 <coda_ascii_cursor_get_bit_size+0x500>
    2764:	ldr	r0, [pc, #2164]	; 2fe0 <coda_ascii_cursor_get_bit_size+0xd60>
    2768:	ldr	r1, [pc, #2168]	; 2fe8 <coda_ascii_cursor_get_bit_size+0xd68>
    276c:	mov	r2, #800	; 0x320
    2770:	ldr	r3, [pc, #2116]	; 2fbc <coda_ascii_cursor_get_bit_size+0xd3c>
    2774:	bl	0 <__assert_fail>
    2778:	mov	r0, #1
    277c:	bl	0 <exit>
    2780:	ldr	ip, [sp, #24]
    2784:	cmp	ip, #0
    2788:	bge	2794 <coda_ascii_cursor_get_bit_size+0x514>
    278c:	mvn	r0, #0
    2790:	b	2f90 <coda_ascii_cursor_get_bit_size+0xd10>
    2794:	lsl	r0, ip, #3
    2798:	asr	r1, r0, #31
    279c:	str	r0, [sl]
    27a0:	str	r1, [sl, #4]
    27a4:	mov	r0, #0
    27a8:	b	2f90 <coda_ascii_cursor_get_bit_size+0xd10>
    27ac:	ldr	ip, [r5, #8]
    27b0:	cmp	ip, #4
    27b4:	beq	27cc <coda_ascii_cursor_get_bit_size+0x54c>
    27b8:	ldr	r0, [pc, #2064]	; 2fd0 <coda_ascii_cursor_get_bit_size+0xd50>
    27bc:	ldr	r1, [pc, #2084]	; 2fe8 <coda_ascii_cursor_get_bit_size+0xd68>
    27c0:	mov	r2, #812	; 0x32c
    27c4:	ldr	r3, [pc, #2032]	; 2fbc <coda_ascii_cursor_get_bit_size+0xd3c>
    27c8:	bl	0 <__assert_fail>
    27cc:	ldr	r3, [r5, #44]	; 0x2c
    27d0:	cmp	r3, #2
    27d4:	bcs	2a38 <coda_ascii_cursor_get_bit_size+0x7b8>
    27d8:	cmp	r3, #0
    27dc:	beq	2a18 <coda_ascii_cursor_get_bit_size+0x798>
    27e0:	ldr	r3, [r9]
    27e4:	ldr	r1, [r3, #16]
    27e8:	cmp	r1, #0
    27ec:	beq	2804 <coda_ascii_cursor_get_bit_size+0x584>
    27f0:	ldr	r0, [pc, #2004]	; 2fcc <coda_ascii_cursor_get_bit_size+0xd4c>
    27f4:	ldr	r1, [pc, #2028]	; 2fe8 <coda_ascii_cursor_get_bit_size+0xd68>
    27f8:	mov	r2, #816	; 0x330
    27fc:	ldr	r3, [pc, #1976]	; 2fbc <coda_ascii_cursor_get_bit_size+0xd3c>
    2800:	bl	0 <__assert_fail>
    2804:	ldr	r3, [r9]
    2808:	ldr	r1, [r3, #60]	; 0x3c
    280c:	cmp	r1, #2
    2810:	bcs	29e0 <coda_ascii_cursor_get_bit_size+0x760>
    2814:	cmp	r1, #0
    2818:	bne	2a04 <coda_ascii_cursor_get_bit_size+0x784>
    281c:	ldr	r2, [r9, #4]
    2820:	lsl	ip, r2, #4
    2824:	add	r0, r9, ip
    2828:	ldr	r3, [r0]
    282c:	mov	ip, #0
    2830:	and	r0, r3, #7
    2834:	orr	r3, ip, r0
    2838:	cmp	r3, #0
    283c:	beq	2858 <coda_ascii_cursor_get_bit_size+0x5d8>
    2840:	movw	r0, #65236	; 0xfed4
    2844:	movt	r0, #65535	; 0xffff
    2848:	ldr	r1, [pc, #1948]	; 2fec <coda_ascii_cursor_get_bit_size+0xd6c>
    284c:	bl	0 <coda_set_error>
    2850:	mvn	r0, #0
    2854:	b	2f90 <coda_ascii_cursor_get_bit_size+0xd10>
    2858:	add	r1, sp, #74	; 0x4a
    285c:	mov	r3, #0
    2860:	mov	r2, #0
    2864:	mov	r0, #0
    2868:	mov	ip, #1
    286c:	str	r0, [sp, #4]
    2870:	str	ip, [sp]
    2874:	mov	r0, r9
    2878:	bl	40a0 <coda_ascii_cursor_read_bytes>
    287c:	cmp	r0, #0
    2880:	beq	288c <coda_ascii_cursor_get_bit_size+0x60c>
    2884:	mvn	r0, #0
    2888:	b	2f90 <coda_ascii_cursor_get_bit_size+0xd10>
    288c:	ldrb	r2, [sp, #74]	; 0x4a
    2890:	cmp	r2, #10
    2894:	beq	29c0 <coda_ascii_cursor_get_bit_size+0x740>
    2898:	cmp	r2, #13
    289c:	bne	297c <coda_ascii_cursor_get_bit_size+0x6fc>
    28a0:	ldr	r1, [r9]
    28a4:	ldr	r2, [r1, #8]
    28a8:	ldr	r4, [r1, #12]
    28ac:	ldr	ip, [r9, #4]
    28b0:	lsl	r0, ip, #4
    28b4:	add	r1, r9, r0
    28b8:	ldr	r0, [r1]
    28bc:	ldr	r1, [r1, #4]
    28c0:	asr	ip, r1, #3
    28c4:	lsr	r3, r0, #3
    28c8:	orr	r3, r3, r1, lsl #29
    28cc:	subs	r1, r2, r3
    28d0:	sbc	r3, r4, ip
    28d4:	mov	r2, #0
    28d8:	cmp	r3, r2
    28dc:	bne	28f0 <coda_ascii_cursor_get_bit_size+0x670>
    28e0:	mov	r2, #2
    28e4:	cmp	r1, r2
    28e8:	bcs	28fc <coda_ascii_cursor_get_bit_size+0x67c>
    28ec:	b	295c <coda_ascii_cursor_get_bit_size+0x6dc>
    28f0:	mov	ip, #0
    28f4:	cmp	r3, ip
    28f8:	ble	295c <coda_ascii_cursor_get_bit_size+0x6dc>
    28fc:	add	r1, sp, #74	; 0x4a
    2900:	mov	r3, #0
    2904:	mov	r2, #1
    2908:	mov	r0, #0
    290c:	mov	ip, #1
    2910:	str	r0, [sp, #4]
    2914:	str	ip, [sp]
    2918:	mov	r0, r9
    291c:	bl	40a0 <coda_ascii_cursor_read_bytes>
    2920:	cmp	r0, #0
    2924:	beq	2930 <coda_ascii_cursor_get_bit_size+0x6b0>
    2928:	mvn	r0, #0
    292c:	b	2f90 <coda_ascii_cursor_get_bit_size+0xd10>
    2930:	ldrb	r3, [sp, #74]	; 0x4a
    2934:	cmp	r3, #10
    2938:	bne	295c <coda_ascii_cursor_get_bit_size+0x6dc>
    293c:	mov	r0, #0
    2940:	mov	ip, #16
    2944:	str	ip, [sl]
    2948:	str	r0, [sl, #4]
    294c:	ldr	ip, [r9]
    2950:	mov	r2, #3
    2954:	str	r2, [ip, #60]	; 0x3c
    2958:	b	2f8c <coda_ascii_cursor_get_bit_size+0xd0c>
    295c:	mov	r2, #0
    2960:	mov	r1, #8
    2964:	str	r1, [sl]
    2968:	str	r2, [sl, #4]
    296c:	ldr	r0, [r9]
    2970:	mov	r3, #2
    2974:	str	r3, [r0, #60]	; 0x3c
    2978:	b	2f8c <coda_ascii_cursor_get_bit_size+0xd0c>
    297c:	ldr	ip, [r9, #4]
    2980:	lsl	r2, ip, #4
    2984:	add	r2, r9, r2
    2988:	ldr	r3, [r2]
    298c:	ldr	r2, [r2, #4]
    2990:	asr	r1, r2, #3
    2994:	lsr	ip, r3, #3
    2998:	orr	r0, ip, r2, lsl #29
    299c:	add	r2, sp, #112	; 0x70
    29a0:	bl	0 <coda_str64>
    29a4:	movw	r0, #65236	; 0xfed4
    29a8:	movt	r0, #65535	; 0xffff
    29ac:	ldr	r1, [pc, #1552]	; 2fc4 <coda_ascii_cursor_get_bit_size+0xd44>
    29b0:	add	r2, sp, #112	; 0x70
    29b4:	bl	0 <coda_set_error>
    29b8:	mvn	r0, #0
    29bc:	b	2f90 <coda_ascii_cursor_get_bit_size+0xd10>
    29c0:	mov	r2, #0
    29c4:	mov	r1, #8
    29c8:	str	r1, [sl]
    29cc:	str	r2, [sl, #4]
    29d0:	ldr	ip, [r9]
    29d4:	mov	r1, #1
    29d8:	str	r1, [ip, #60]	; 0x3c
    29dc:	b	2f8c <coda_ascii_cursor_get_bit_size+0xd0c>
    29e0:	cmp	r1, #2
    29e4:	beq	2a04 <coda_ascii_cursor_get_bit_size+0x784>
    29e8:	cmp	r1, #3
    29ec:	bne	2f8c <coda_ascii_cursor_get_bit_size+0xd0c>
    29f0:	mov	r3, #0
    29f4:	mov	r2, #16
    29f8:	str	r2, [sl]
    29fc:	str	r3, [sl, #4]
    2a00:	b	2f8c <coda_ascii_cursor_get_bit_size+0xd0c>
    2a04:	mov	r2, #0
    2a08:	mov	r1, #8
    2a0c:	str	r1, [sl]
    2a10:	str	r2, [sl, #4]
    2a14:	b	2f8c <coda_ascii_cursor_get_bit_size+0xd0c>
    2a18:	ldr	r0, [pc, #1472]	; 2fe0 <coda_ascii_cursor_get_bit_size+0xd60>
    2a1c:	ldr	r1, [pc, #1476]	; 2fe8 <coda_ascii_cursor_get_bit_size+0xd68>
    2a20:	movw	r2, #1030	; 0x406
    2a24:	ldr	r3, [pc, #1424]	; 2fbc <coda_ascii_cursor_get_bit_size+0xd3c>
    2a28:	bl	0 <__assert_fail>
    2a2c:	mov	r0, #1
    2a30:	bl	0 <exit>
    2a34:	b	2f8c <coda_ascii_cursor_get_bit_size+0xd0c>
    2a38:	cmp	r3, #2
    2a3c:	beq	2b8c <coda_ascii_cursor_get_bit_size+0x90c>
    2a40:	cmp	r3, #3
    2a44:	beq	2b8c <coda_ascii_cursor_get_bit_size+0x90c>
    2a48:	cmp	r3, #4
    2a4c:	bne	2f8c <coda_ascii_cursor_get_bit_size+0xd0c>
    2a50:	ldr	r2, [r9, #4]
    2a54:	lsl	ip, r2, #4
    2a58:	add	r3, r9, ip
    2a5c:	ldr	ip, [r3]
    2a60:	mov	r3, #0
    2a64:	and	r2, ip, #7
    2a68:	orr	ip, r3, r2
    2a6c:	cmp	ip, #0
    2a70:	beq	2a8c <coda_ascii_cursor_get_bit_size+0x80c>
    2a74:	movw	r0, #65236	; 0xfed4
    2a78:	movt	r0, #65535	; 0xffff
    2a7c:	ldr	r1, [pc, #1368]	; 2fdc <coda_ascii_cursor_get_bit_size+0xd5c>
    2a80:	bl	0 <coda_set_error>
    2a84:	mvn	r0, #0
    2a88:	b	2f90 <coda_ascii_cursor_get_bit_size+0xd10>
    2a8c:	ldr	r1, [r9, #4]
    2a90:	lsl	r1, r1, #4
    2a94:	add	r0, r9, r1
    2a98:	ldr	r2, [r0]
    2a9c:	ldr	r3, [r0, #4]
    2aa0:	asr	r5, r3, #3
    2aa4:	lsr	r2, r2, #3
    2aa8:	orr	r4, r2, r3, lsl #29
    2aac:	ldr	r3, [r9]
    2ab0:	ldr	ip, [r3, #8]
    2ab4:	ldr	r3, [r3, #12]
    2ab8:	subs	r0, ip, r4
    2abc:	sbc	r1, r3, r5
    2ac0:	str	r1, [sp, #24]
    2ac4:	str	r0, [sp, #28]
    2ac8:	mov	r7, #0
    2acc:	mov	r6, #0
    2ad0:	mov	ip, r7
    2ad4:	ldr	r3, [sp, #24]
    2ad8:	ldr	r2, [sp, #28]
    2adc:	cmp	ip, r3
    2ae0:	bne	2af4 <coda_ascii_cursor_get_bit_size+0x874>
    2ae4:	mov	r3, r6
    2ae8:	cmp	r3, r2
    2aec:	bcc	2afc <coda_ascii_cursor_get_bit_size+0x87c>
    2af0:	b	2b74 <coda_ascii_cursor_get_bit_size+0x8f4>
    2af4:	cmp	ip, r3
    2af8:	bge	2b74 <coda_ascii_cursor_get_bit_size+0x8f4>
    2afc:	ldr	r0, [r9]
    2b00:	adds	r2, r4, r6
    2b04:	adc	r3, r5, r7
    2b08:	mov	fp, #0
    2b0c:	mov	ip, #1
    2b10:	add	r8, sp, #73	; 0x49
    2b14:	str	r8, [sp, #8]
    2b18:	str	fp, [sp, #4]
    2b1c:	str	ip, [sp]
    2b20:	bl	224 <read_bytes_in_bounds>
    2b24:	cmp	r0, #0
    2b28:	beq	2b34 <coda_ascii_cursor_get_bit_size+0x8b4>
    2b2c:	mvn	r0, #0
    2b30:	b	2f90 <coda_ascii_cursor_get_bit_size+0xd10>
    2b34:	ldrb	ip, [sp, #73]	; 0x49
    2b38:	cmp	ip, #32
    2b3c:	beq	2b54 <coda_ascii_cursor_get_bit_size+0x8d4>
    2b40:	ldrb	r0, [sp, #73]	; 0x49
    2b44:	cmp	r0, #9
    2b48:	movne	r1, #1
    2b4c:	moveq	r1, #0
    2b50:	b	2b58 <coda_ascii_cursor_get_bit_size+0x8d8>
    2b54:	mov	r1, #0
    2b58:	cmp	r1, #0
    2b5c:	bne	2b74 <coda_ascii_cursor_get_bit_size+0x8f4>
    2b60:	mov	r3, #0
    2b64:	mov	r2, #1
    2b68:	adds	r6, r6, r2
    2b6c:	adc	r7, r7, r3
    2b70:	b	2ad0 <coda_ascii_cursor_get_bit_size+0x850>
    2b74:	lsl	r3, r7, #3
    2b78:	orr	r2, r3, r6, lsr #29
    2b7c:	lsl	r1, r6, #3
    2b80:	str	r1, [sl]
    2b84:	str	r2, [sl, #4]
    2b88:	b	2f8c <coda_ascii_cursor_get_bit_size+0xd0c>
    2b8c:	ldr	ip, [r9]
    2b90:	ldr	r2, [ip, #16]
    2b94:	cmp	r2, #0
    2b98:	beq	2db8 <coda_ascii_cursor_get_bit_size+0xb38>
    2b9c:	ldr	r1, [r9, #4]
    2ba0:	lsl	r1, r1, #4
    2ba4:	add	r3, r9, r1
    2ba8:	ldr	r1, [r3]
    2bac:	mov	r3, #0
    2bb0:	and	r2, r1, #7
    2bb4:	orr	r3, r3, r2
    2bb8:	cmp	r3, #0
    2bbc:	beq	2bd8 <coda_ascii_cursor_get_bit_size+0x958>
    2bc0:	movw	r0, #65236	; 0xfed4
    2bc4:	movt	r0, #65535	; 0xffff
    2bc8:	ldr	r1, [pc, #1028]	; 2fd4 <coda_ascii_cursor_get_bit_size+0xd54>
    2bcc:	bl	0 <coda_set_error>
    2bd0:	mvn	r0, #0
    2bd4:	b	2f90 <coda_ascii_cursor_get_bit_size+0xd10>
    2bd8:	ldr	r2, [r9, #4]
    2bdc:	lsl	r0, r2, #4
    2be0:	add	r0, r9, r0
    2be4:	ldr	ip, [r0]
    2be8:	ldr	r0, [r0, #4]
    2bec:	asr	r6, r0, #3
    2bf0:	lsr	r1, ip, #3
    2bf4:	orr	r4, r1, r0, lsl #29
    2bf8:	ldr	r0, [r9]
    2bfc:	ldr	r1, [r0, #8]
    2c00:	ldr	r0, [r0, #12]
    2c04:	subs	r3, r1, r4
    2c08:	sbc	fp, r0, r6
    2c0c:	str	r3, [sp, #24]
    2c10:	mov	r8, #0
    2c14:	mov	r7, #0
    2c18:	mov	r2, r8
    2c1c:	mov	r0, fp
    2c20:	ldr	ip, [sp, #24]
    2c24:	cmp	r2, r0
    2c28:	bne	2c3c <coda_ascii_cursor_get_bit_size+0x9bc>
    2c2c:	mov	r0, r7
    2c30:	cmp	r0, ip
    2c34:	bcc	2c44 <coda_ascii_cursor_get_bit_size+0x9c4>
    2c38:	b	2ccc <coda_ascii_cursor_get_bit_size+0xa4c>
    2c3c:	cmp	r2, r0
    2c40:	bge	2ccc <coda_ascii_cursor_get_bit_size+0xa4c>
    2c44:	ldr	r0, [r9]
    2c48:	str	r0, [sp, #28]
    2c4c:	adds	r2, r4, r7
    2c50:	adc	r3, r6, r8
    2c54:	str	r2, [sp, #32]
    2c58:	mov	r0, #0
    2c5c:	mov	r2, #1
    2c60:	add	ip, sp, #72	; 0x48
    2c64:	str	ip, [sp, #8]
    2c68:	str	r0, [sp, #4]
    2c6c:	str	r2, [sp]
    2c70:	ldr	r2, [sp, #32]
    2c74:	ldr	r0, [sp, #28]
    2c78:	bl	224 <read_bytes_in_bounds>
    2c7c:	cmp	r0, #0
    2c80:	beq	2c8c <coda_ascii_cursor_get_bit_size+0xa0c>
    2c84:	mvn	r0, #0
    2c88:	b	2f90 <coda_ascii_cursor_get_bit_size+0xd10>
    2c8c:	ldrb	ip, [sp, #72]	; 0x48
    2c90:	cmp	ip, #13
    2c94:	beq	2cac <coda_ascii_cursor_get_bit_size+0xa2c>
    2c98:	ldrb	r0, [sp, #72]	; 0x48
    2c9c:	cmp	r0, #10
    2ca0:	moveq	ip, #1
    2ca4:	movne	ip, #0
    2ca8:	b	2cb0 <coda_ascii_cursor_get_bit_size+0xa30>
    2cac:	mov	ip, #1
    2cb0:	cmp	ip, #0
    2cb4:	bne	2ccc <coda_ascii_cursor_get_bit_size+0xa4c>
    2cb8:	mov	r1, #0
    2cbc:	mov	r0, #1
    2cc0:	adds	r7, r7, r0
    2cc4:	adc	r8, r8, r1
    2cc8:	b	2c18 <coda_ascii_cursor_get_bit_size+0x998>
    2ccc:	ldr	r2, [r5, #44]	; 0x2c
    2cd0:	cmp	r2, #2
    2cd4:	bne	2da0 <coda_ascii_cursor_get_bit_size+0xb20>
    2cd8:	ldrb	r1, [sp, #72]	; 0x48
    2cdc:	cmp	r1, #13
    2ce0:	bne	2d20 <coda_ascii_cursor_get_bit_size+0xaa0>
    2ce4:	mov	r1, #0
    2ce8:	mov	r0, #1
    2cec:	adds	ip, r7, r0
    2cf0:	adc	r3, r8, r1
    2cf4:	cmp	r3, fp
    2cf8:	bne	2d10 <coda_ascii_cursor_get_bit_size+0xa90>
    2cfc:	ldr	r1, [sp, #24]
    2d00:	cmp	ip, r1
    2d04:	movcc	r2, #1
    2d08:	movcs	r2, #0
    2d0c:	b	2d24 <coda_ascii_cursor_get_bit_size+0xaa4>
    2d10:	cmp	r3, fp
    2d14:	movlt	r2, #1
    2d18:	movge	r2, #0
    2d1c:	b	2d24 <coda_ascii_cursor_get_bit_size+0xaa4>
    2d20:	mov	r2, #0
    2d24:	cmp	r2, #0
    2d28:	beq	2d90 <coda_ascii_cursor_get_bit_size+0xb10>
    2d2c:	ldr	r0, [r9]
    2d30:	adds	r2, r4, r7
    2d34:	adc	r3, r6, r8
    2d38:	mov	r1, #0
    2d3c:	mov	ip, #1
    2d40:	adds	r2, r2, ip
    2d44:	adc	r3, r3, r1
    2d48:	mov	ip, #0
    2d4c:	mov	r1, #1
    2d50:	add	r4, sp, #72	; 0x48
    2d54:	str	r4, [sp, #8]
    2d58:	str	ip, [sp, #4]
    2d5c:	str	r1, [sp]
    2d60:	bl	224 <read_bytes_in_bounds>
    2d64:	cmp	r0, #0
    2d68:	beq	2d74 <coda_ascii_cursor_get_bit_size+0xaf4>
    2d6c:	mvn	r0, #0
    2d70:	b	2f90 <coda_ascii_cursor_get_bit_size+0xd10>
    2d74:	ldrb	r3, [sp, #72]	; 0x48
    2d78:	cmp	r3, #10
    2d7c:	bne	2d90 <coda_ascii_cursor_get_bit_size+0xb10>
    2d80:	mov	r0, #0
    2d84:	mov	ip, #1
    2d88:	adds	r7, r7, ip
    2d8c:	adc	r8, r8, r0
    2d90:	mov	r2, #0
    2d94:	mov	r1, #1
    2d98:	adds	r7, r7, r1
    2d9c:	adc	r8, r8, r2
    2da0:	lsl	r3, r8, #3
    2da4:	orr	r1, r3, r7, lsr #29
    2da8:	lsl	r0, r7, #3
    2dac:	str	r0, [sl]
    2db0:	str	r1, [sl, #4]
    2db4:	b	2f8c <coda_ascii_cursor_get_bit_size+0xd0c>
    2db8:	ldr	r0, [r9, #4]
    2dbc:	lsl	r3, r0, #4
    2dc0:	add	ip, r9, r3
    2dc4:	ldr	r0, [ip]
    2dc8:	mov	r1, #0
    2dcc:	and	r0, r0, #7
    2dd0:	orr	r3, r1, r0
    2dd4:	cmp	r3, #0
    2dd8:	beq	2df4 <coda_ascii_cursor_get_bit_size+0xb74>
    2ddc:	movw	r0, #65236	; 0xfed4
    2de0:	movt	r0, #65535	; 0xffff
    2de4:	ldr	r1, [pc, #488]	; 2fd4 <coda_ascii_cursor_get_bit_size+0xd54>
    2de8:	bl	0 <coda_set_error>
    2dec:	mvn	r0, #0
    2df0:	b	2f90 <coda_ascii_cursor_get_bit_size+0xd10>
    2df4:	ldr	r2, [r9]
    2df8:	ldr	r3, [r2, #68]	; 0x44
    2dfc:	cmp	r3, #0
    2e00:	bne	2e1c <coda_ascii_cursor_get_bit_size+0xb9c>
    2e04:	ldr	r0, [r9]
    2e08:	bl	0 <coda_ascii_init_asciilines>
    2e0c:	cmp	r0, #0
    2e10:	beq	2e1c <coda_ascii_cursor_get_bit_size+0xb9c>
    2e14:	mvn	r0, #0
    2e18:	b	2f90 <coda_ascii_cursor_get_bit_size+0xd10>
    2e1c:	ldr	r1, [r9]
    2e20:	ldr	r0, [r1, #64]	; 0x40
    2e24:	cmp	r0, #0
    2e28:	bne	2e40 <coda_ascii_cursor_get_bit_size+0xbc0>
    2e2c:	mvn	r0, #300	; 0x12c
    2e30:	ldr	r1, [pc, #392]	; 2fc0 <coda_ascii_cursor_get_bit_size+0xd40>
    2e34:	bl	0 <coda_set_error>
    2e38:	mvn	r0, #0
    2e3c:	b	2f90 <coda_ascii_cursor_get_bit_size+0xd10>
    2e40:	mov	r6, #0
    2e44:	ldr	ip, [r9]
    2e48:	ldr	r2, [ip, #64]	; 0x40
    2e4c:	sub	r4, r2, #1
    2e50:	ldr	r3, [r9]
    2e54:	ldr	r7, [r3, #68]	; 0x44
    2e58:	ldr	r3, [r9, #4]
    2e5c:	lsl	r1, r3, #4
    2e60:	add	ip, r9, r1
    2e64:	ldr	r0, [ip]
    2e68:	ldr	r2, [ip, #4]
    2e6c:	asr	r1, r2, #3
    2e70:	lsr	r3, r0, #3
    2e74:	orr	r3, r3, r2, lsl #29
    2e78:	cmp	r4, r6
    2e7c:	beq	2ecc <coda_ascii_cursor_get_bit_size+0xc4c>
    2e80:	add	r0, r6, r4
    2e84:	asr	lr, r0, #31
    2e88:	add	lr, r0, lr, lsr #31
    2e8c:	asr	r8, lr, #1
    2e90:	mov	r2, r1
    2e94:	mov	r0, r3
    2e98:	ldr	ip, [r7, r8, lsl #2]
    2e9c:	asr	fp, ip, #31
    2ea0:	cmp	r2, fp
    2ea4:	bne	2eb4 <coda_ascii_cursor_get_bit_size+0xc34>
    2ea8:	cmp	r0, ip
    2eac:	bcc	2ec4 <coda_ascii_cursor_get_bit_size+0xc44>
    2eb0:	b	2ebc <coda_ascii_cursor_get_bit_size+0xc3c>
    2eb4:	cmp	r2, fp
    2eb8:	blt	2ec4 <coda_ascii_cursor_get_bit_size+0xc44>
    2ebc:	add	r6, r8, #1
    2ec0:	b	2e78 <coda_ascii_cursor_get_bit_size+0xbf8>
    2ec4:	mov	r4, r8
    2ec8:	b	2e78 <coda_ascii_cursor_get_bit_size+0xbf8>
    2ecc:	ldr	ip, [r7, r4, lsl #2]
    2ed0:	asr	r0, ip, #31
    2ed4:	subs	lr, ip, r3
    2ed8:	sbc	ip, r0, r1
    2edc:	mov	r1, lr
    2ee0:	lsl	r2, ip, #3
    2ee4:	orr	r0, r2, r1, lsr #29
    2ee8:	lsl	ip, r1, #3
    2eec:	str	ip, [sl]
    2ef0:	str	r0, [sl, #4]
    2ef4:	ldr	r0, [r5, #44]	; 0x2c
    2ef8:	cmp	r0, #3
    2efc:	bne	2f8c <coda_ascii_cursor_get_bit_size+0xd0c>
    2f00:	ldr	ip, [r9]
    2f04:	ldr	r1, [ip, #64]	; 0x40
    2f08:	sub	r3, r1, #1
    2f0c:	cmp	r4, r3
    2f10:	bne	2f2c <coda_ascii_cursor_get_bit_size+0xcac>
    2f14:	ldr	r2, [r9]
    2f18:	ldr	r2, [r2, #72]	; 0x48
    2f1c:	cmp	r2, #0
    2f20:	moveq	r3, #1
    2f24:	movne	r3, #0
    2f28:	b	2f30 <coda_ascii_cursor_get_bit_size+0xcb0>
    2f2c:	mov	r3, #0
    2f30:	cmp	r3, #0
    2f34:	bne	2f8c <coda_ascii_cursor_get_bit_size+0xd0c>
    2f38:	ldr	r0, [sl]
    2f3c:	ldr	r3, [sl, #4]
    2f40:	mov	r2, #0
    2f44:	mov	r1, #8
    2f48:	subs	lr, r0, r1
    2f4c:	sbc	r2, r3, r2
    2f50:	mov	r3, lr
    2f54:	str	r3, [sl]
    2f58:	str	r2, [sl, #4]
    2f5c:	ldr	r2, [r9]
    2f60:	ldr	ip, [r2, #60]	; 0x3c
    2f64:	cmp	ip, #3
    2f68:	bne	2f8c <coda_ascii_cursor_get_bit_size+0xd0c>
    2f6c:	ldr	r0, [sl]
    2f70:	ldr	r1, [sl, #4]
    2f74:	mov	ip, #0
    2f78:	mov	r3, #8
    2f7c:	subs	r3, r0, r3
    2f80:	sbc	r2, r1, ip
    2f84:	str	r3, [sl]
    2f88:	str	r2, [sl, #4]
    2f8c:	mov	r0, #0
    2f90:	ldr	r4, [sp, #36]	; 0x24
    2f94:	ldr	r5, [sp, #40]	; 0x28
    2f98:	ldr	r6, [sp, #44]	; 0x2c
    2f9c:	ldr	r7, [sp, #48]	; 0x30
    2fa0:	ldr	r8, [sp, #52]	; 0x34
    2fa4:	ldr	r9, [sp, #56]	; 0x38
    2fa8:	ldr	sl, [sp, #60]	; 0x3c
    2fac:	ldr	fp, [sp, #64]	; 0x40
    2fb0:	ldr	lr, [sp, #16]
    2fb4:	add	sp, sp, #720	; 0x2d0
    2fb8:	bx	lr
    2fbc:	.word	0x00000a27
    2fc0:	.word	0x000008ae
    2fc4:	.word	0x0000091e
    2fc8:	.word	0x00000100
    2fcc:	.word	0x00000995
    2fd0:	.word	0x0000053e
    2fd4:	.word	0x000001f5
    2fd8:	.word	0x000005e5
    2fdc:	.word	0x00000401
    2fe0:	.word	0x00000748
    2fe4:	.word	0x0000032c
    2fe8:	.word	0x000006a4
    2fec:	.word	0x00000836

00002ff0 <coda_ascii_cursor_get_num_elements>:
    2ff0:	mov	ip, sp
    2ff4:	sub	sp, sp, #8
    2ff8:	str	ip, [sp]
    2ffc:	str	lr, [sp, #4]
    3000:	ldr	r2, [r0, #4]
    3004:	lsl	r3, r2, #4
    3008:	add	r2, r0, r3
    300c:	sub	lr, r2, #4096	; 0x1000
    3010:	ldr	ip, [lr, #4088]	; 0xff8
    3014:	ldr	r2, [ip]
    3018:	cmp	r2, #100	; 0x64
    301c:	blt	303c <coda_ascii_cursor_get_num_elements+0x4c>
    3020:	ldr	r2, [r0, #4]
    3024:	lsl	ip, r2, #4
    3028:	add	r2, r0, ip
    302c:	sub	lr, r2, #4096	; 0x1000
    3030:	ldr	r3, [lr, #4088]	; 0xff8
    3034:	ldr	r2, [r3, #4]
    3038:	b	3050 <coda_ascii_cursor_get_num_elements+0x60>
    303c:	ldr	ip, [r0, #4]
    3040:	lsl	r2, ip, #4
    3044:	add	r2, r0, r2
    3048:	sub	lr, r2, #4096	; 0x1000
    304c:	ldr	r2, [lr, #4088]	; 0xff8
    3050:	ldr	r2, [r2, #8]
    3054:	cmp	r2, #0
    3058:	beq	3074 <coda_ascii_cursor_get_num_elements+0x84>
    305c:	cmp	r2, #1
    3060:	beq	3074 <coda_ascii_cursor_get_num_elements+0x84>
    3064:	mov	r2, #1
    3068:	str	r2, [r1]
    306c:	mov	r0, #0
    3070:	b	3078 <coda_ascii_cursor_get_num_elements+0x88>
    3074:	bl	0 <coda_ascbin_cursor_get_num_elements>
    3078:	ldr	lr, [sp, #4]
    307c:	add	sp, sp, #8
    3080:	bx	lr

00003084 <coda_ascii_cursor_read_int64>:
    3084:	mov	ip, sp
    3088:	sub	sp, sp, #128	; 0x80
    308c:	str	ip, [sp, #12]
    3090:	str	lr, [sp, #16]
    3094:	str	r4, [sp, #24]
    3098:	str	r5, [sp, #28]
    309c:	str	r6, [sp, #32]
    30a0:	str	r7, [sp, #36]	; 0x24
    30a4:	str	r8, [sp, #40]	; 0x28
    30a8:	str	r9, [sp, #44]	; 0x2c
    30ac:	str	sl, [sp, #48]	; 0x30
    30b0:	mov	r5, r1
    30b4:	mov	r9, r0
    30b8:	ldr	ip, [r9, #4]
    30bc:	lsl	r1, ip, #4
    30c0:	add	r0, r9, r1
    30c4:	sub	lr, r0, #4096	; 0x1000
    30c8:	ldr	r2, [lr, #4088]	; 0xff8
    30cc:	ldr	r0, [r2]
    30d0:	cmp	r0, #100	; 0x64
    30d4:	blt	30f4 <coda_ascii_cursor_read_int64+0x70>
    30d8:	ldr	r2, [r9, #4]
    30dc:	lsl	r3, r2, #4
    30e0:	add	r0, r9, r3
    30e4:	sub	lr, r0, #4096	; 0x1000
    30e8:	ldr	r2, [lr, #4088]	; 0xff8
    30ec:	ldr	r4, [r2, #4]
    30f0:	b	3108 <coda_ascii_cursor_read_int64+0x84>
    30f4:	ldr	r3, [r9, #4]
    30f8:	lsl	ip, r3, #4
    30fc:	add	r3, r9, ip
    3100:	sub	lr, r3, #4096	; 0x1000
    3104:	ldr	r4, [lr, #4088]	; 0xff8
    3108:	ldr	r0, [r9, #4]
    310c:	lsl	r1, r0, #4
    3110:	add	r2, r9, r1
    3114:	ldr	r6, [r2]
    3118:	ldr	r7, [r2, #4]
    311c:	mov	r8, #1
    3120:	add	r1, sp, #56	; 0x38
    3124:	ldr	r2, [r4, #24]
    3128:	ldr	r3, [r4, #28]
    312c:	mov	r0, r9
    3130:	bl	c2c <get_bit_size_boundary>
    3134:	cmp	r0, #0
    3138:	beq	3144 <coda_ascii_cursor_read_int64+0xc0>
    313c:	mvn	r0, #0
    3140:	b	32ac <coda_ascii_cursor_read_int64+0x228>
    3144:	mov	r3, #0
    3148:	mov	r0, r6
    314c:	and	r2, r0, #7
    3150:	orr	ip, r3, r2
    3154:	cmp	ip, #0
    3158:	beq	3170 <coda_ascii_cursor_read_int64+0xec>
    315c:	mvn	r0, #21
    3160:	ldr	r1, [pc, #364]	; 32d4 <coda_ascii_cursor_read_int64+0x250>
    3164:	bl	0 <coda_set_error>
    3168:	mvn	r0, #0
    316c:	b	32ac <coda_ascii_cursor_read_int64+0x228>
    3170:	ldr	ip, [r4, #28]
    3174:	cmp	ip, #0
    3178:	bge	31d4 <coda_ascii_cursor_read_int64+0x150>
    317c:	ldr	r1, [sp, #56]	; 0x38
    3180:	ldr	r2, [sp, #60]	; 0x3c
    3184:	asr	r3, r2, #3
    3188:	lsr	r1, r1, #3
    318c:	orr	r0, r1, r2, lsl #29
    3190:	mov	r1, #0
    3194:	cmp	r3, r1
    3198:	bne	31ac <coda_ascii_cursor_read_int64+0x128>
    319c:	mov	r1, #64	; 0x40
    31a0:	cmp	r0, r1
    31a4:	bcc	31b8 <coda_ascii_cursor_read_int64+0x134>
    31a8:	b	31cc <coda_ascii_cursor_read_int64+0x148>
    31ac:	mov	r1, #0
    31b0:	cmp	r3, r1
    31b4:	bge	31cc <coda_ascii_cursor_read_int64+0x148>
    31b8:	ldr	r0, [sp, #56]	; 0x38
    31bc:	ldr	r3, [sp, #60]	; 0x3c
    31c0:	lsr	r1, r0, #3
    31c4:	orr	sl, r1, r3, lsl #29
    31c8:	b	3204 <coda_ascii_cursor_read_int64+0x180>
    31cc:	mov	sl, #64	; 0x40
    31d0:	b	3204 <coda_ascii_cursor_read_int64+0x180>
    31d4:	mov	r8, #0
    31d8:	ldr	ip, [r4, #24]
    31dc:	ldr	r2, [r4, #28]
    31e0:	lsr	r3, ip, #3
    31e4:	orr	sl, r3, r2, lsl #29
    31e8:	cmp	sl, #64	; 0x40
    31ec:	ble	3204 <coda_ascii_cursor_read_int64+0x180>
    31f0:	ldr	r0, [pc, #228]	; 32dc <coda_ascii_cursor_read_int64+0x258>
    31f4:	ldr	r1, [pc, #228]	; 32e0 <coda_ascii_cursor_read_int64+0x25c>
    31f8:	movw	r2, #1076	; 0x434
    31fc:	ldr	r3, [pc, #212]	; 32d8 <coda_ascii_cursor_read_int64+0x254>
    3200:	bl	0 <__assert_fail>
    3204:	ldr	r0, [r9]
    3208:	asr	r3, r7, #3
    320c:	lsr	ip, r6, #3
    3210:	orr	r2, ip, r7, lsl #29
    3214:	asr	ip, sl, #31
    3218:	mov	r1, sl
    321c:	add	r7, sp, #64	; 0x40
    3220:	str	r7, [sp, #8]
    3224:	str	ip, [sp, #4]
    3228:	str	r1, [sp]
    322c:	bl	224 <read_bytes_in_bounds>
    3230:	cmp	r0, #0
    3234:	beq	3240 <coda_ascii_cursor_read_int64+0x1bc>
    3238:	mvn	r0, #0
    323c:	b	32ac <coda_ascii_cursor_read_int64+0x228>
    3240:	ldr	r2, [r4, #52]	; 0x34
    3244:	cmp	r2, #0
    3248:	beq	3284 <coda_ascii_cursor_read_int64+0x200>
    324c:	add	r0, sp, #64	; 0x40
    3250:	ldr	r2, [r4, #52]	; 0x34
    3254:	str	r5, [sp]
    3258:	mov	r3, r8
    325c:	mov	r1, sl
    3260:	bl	1204 <parse_integer_mapping>
    3264:	cmp	r0, #0
    3268:	beq	3284 <coda_ascii_cursor_read_int64+0x200>
    326c:	cmp	r0, #1
    3270:	bne	327c <coda_ascii_cursor_read_int64+0x1f8>
    3274:	mov	r0, #0
    3278:	b	32ac <coda_ascii_cursor_read_int64+0x228>
    327c:	mvn	r0, #0
    3280:	b	32ac <coda_ascii_cursor_read_int64+0x228>
    3284:	add	r0, sp, #64	; 0x40
    3288:	mov	r3, r8
    328c:	mov	r2, r5
    3290:	mov	r1, sl
    3294:	bl	14d4 <coda_ascii_parse_int64>
    3298:	cmp	r0, #0
    329c:	bge	32a8 <coda_ascii_cursor_read_int64+0x224>
    32a0:	mvn	r0, #0
    32a4:	b	32ac <coda_ascii_cursor_read_int64+0x228>
    32a8:	mov	r0, #0
    32ac:	ldr	r4, [sp, #24]
    32b0:	ldr	r5, [sp, #28]
    32b4:	ldr	r6, [sp, #32]
    32b8:	ldr	r7, [sp, #36]	; 0x24
    32bc:	ldr	r8, [sp, #40]	; 0x28
    32c0:	ldr	r9, [sp, #44]	; 0x2c
    32c4:	ldr	sl, [sp, #48]	; 0x30
    32c8:	ldr	lr, [sp, #16]
    32cc:	add	sp, sp, #128	; 0x80
    32d0:	bx	lr
    32d4:	.word	0x000007cb
    32d8:	.word	0x00000a46
    32dc:	.word	0x00000239
    32e0:	.word	0x000006a4

000032e4 <coda_ascii_cursor_read_uint64>:
    32e4:	mov	ip, sp
    32e8:	sub	sp, sp, #128	; 0x80
    32ec:	str	ip, [sp, #12]
    32f0:	str	lr, [sp, #16]
    32f4:	str	r4, [sp, #24]
    32f8:	str	r5, [sp, #28]
    32fc:	str	r6, [sp, #32]
    3300:	str	r7, [sp, #36]	; 0x24
    3304:	str	r8, [sp, #40]	; 0x28
    3308:	str	r9, [sp, #44]	; 0x2c
    330c:	str	sl, [sp, #48]	; 0x30
    3310:	mov	r5, r1
    3314:	mov	r9, r0
    3318:	ldr	ip, [r9, #4]
    331c:	lsl	r1, ip, #4
    3320:	add	r0, r9, r1
    3324:	sub	lr, r0, #4096	; 0x1000
    3328:	ldr	r2, [lr, #4088]	; 0xff8
    332c:	ldr	r0, [r2]
    3330:	cmp	r0, #100	; 0x64
    3334:	blt	3354 <coda_ascii_cursor_read_uint64+0x70>
    3338:	ldr	r2, [r9, #4]
    333c:	lsl	r3, r2, #4
    3340:	add	r0, r9, r3
    3344:	sub	lr, r0, #4096	; 0x1000
    3348:	ldr	r2, [lr, #4088]	; 0xff8
    334c:	ldr	r4, [r2, #4]
    3350:	b	3368 <coda_ascii_cursor_read_uint64+0x84>
    3354:	ldr	r3, [r9, #4]
    3358:	lsl	ip, r3, #4
    335c:	add	r3, r9, ip
    3360:	sub	lr, r3, #4096	; 0x1000
    3364:	ldr	r4, [lr, #4088]	; 0xff8
    3368:	ldr	r0, [r9, #4]
    336c:	lsl	r1, r0, #4
    3370:	add	r2, r9, r1
    3374:	ldr	r6, [r2]
    3378:	ldr	r7, [r2, #4]
    337c:	mov	r8, #1
    3380:	add	r1, sp, #56	; 0x38
    3384:	ldr	r2, [r4, #24]
    3388:	ldr	r3, [r4, #28]
    338c:	mov	r0, r9
    3390:	bl	c2c <get_bit_size_boundary>
    3394:	cmp	r0, #0
    3398:	beq	33a4 <coda_ascii_cursor_read_uint64+0xc0>
    339c:	mvn	r0, #0
    33a0:	b	350c <coda_ascii_cursor_read_uint64+0x228>
    33a4:	mov	r3, #0
    33a8:	mov	r0, r6
    33ac:	and	r2, r0, #7
    33b0:	orr	ip, r3, r2
    33b4:	cmp	ip, #0
    33b8:	beq	33d0 <coda_ascii_cursor_read_uint64+0xec>
    33bc:	mvn	r0, #21
    33c0:	ldr	r1, [pc, #364]	; 3534 <coda_ascii_cursor_read_uint64+0x250>
    33c4:	bl	0 <coda_set_error>
    33c8:	mvn	r0, #0
    33cc:	b	350c <coda_ascii_cursor_read_uint64+0x228>
    33d0:	ldr	ip, [r4, #28]
    33d4:	cmp	ip, #0
    33d8:	bge	3434 <coda_ascii_cursor_read_uint64+0x150>
    33dc:	ldr	r1, [sp, #56]	; 0x38
    33e0:	ldr	r2, [sp, #60]	; 0x3c
    33e4:	asr	r3, r2, #3
    33e8:	lsr	r1, r1, #3
    33ec:	orr	r0, r1, r2, lsl #29
    33f0:	mov	r1, #0
    33f4:	cmp	r3, r1
    33f8:	bne	340c <coda_ascii_cursor_read_uint64+0x128>
    33fc:	mov	r1, #64	; 0x40
    3400:	cmp	r0, r1
    3404:	bcc	3418 <coda_ascii_cursor_read_uint64+0x134>
    3408:	b	342c <coda_ascii_cursor_read_uint64+0x148>
    340c:	mov	r1, #0
    3410:	cmp	r3, r1
    3414:	bge	342c <coda_ascii_cursor_read_uint64+0x148>
    3418:	ldr	r0, [sp, #56]	; 0x38
    341c:	ldr	r3, [sp, #60]	; 0x3c
    3420:	lsr	r1, r0, #3
    3424:	orr	sl, r1, r3, lsl #29
    3428:	b	3464 <coda_ascii_cursor_read_uint64+0x180>
    342c:	mov	sl, #64	; 0x40
    3430:	b	3464 <coda_ascii_cursor_read_uint64+0x180>
    3434:	mov	r8, #0
    3438:	ldr	ip, [r4, #24]
    343c:	ldr	r2, [r4, #28]
    3440:	lsr	r3, ip, #3
    3444:	orr	sl, r3, r2, lsl #29
    3448:	cmp	sl, #64	; 0x40
    344c:	ble	3464 <coda_ascii_cursor_read_uint64+0x180>
    3450:	ldr	r0, [pc, #224]	; 3538 <coda_ascii_cursor_read_uint64+0x254>
    3454:	ldr	r1, [pc, #224]	; 353c <coda_ascii_cursor_read_uint64+0x258>
    3458:	movw	r2, #1137	; 0x471
    345c:	ldr	r3, [pc, #220]	; 3540 <coda_ascii_cursor_read_uint64+0x25c>
    3460:	bl	0 <__assert_fail>
    3464:	ldr	r0, [r9]
    3468:	asr	r3, r7, #3
    346c:	lsr	ip, r6, #3
    3470:	orr	r2, ip, r7, lsl #29
    3474:	asr	ip, sl, #31
    3478:	mov	r1, sl
    347c:	add	r7, sp, #64	; 0x40
    3480:	str	r7, [sp, #8]
    3484:	str	ip, [sp, #4]
    3488:	str	r1, [sp]
    348c:	bl	224 <read_bytes_in_bounds>
    3490:	cmp	r0, #0
    3494:	beq	34a0 <coda_ascii_cursor_read_uint64+0x1bc>
    3498:	mvn	r0, #0
    349c:	b	350c <coda_ascii_cursor_read_uint64+0x228>
    34a0:	ldr	r2, [r4, #52]	; 0x34
    34a4:	cmp	r2, #0
    34a8:	beq	34e4 <coda_ascii_cursor_read_uint64+0x200>
    34ac:	add	r0, sp, #64	; 0x40
    34b0:	ldr	r2, [r4, #52]	; 0x34
    34b4:	str	r5, [sp]
    34b8:	mov	r3, r8
    34bc:	mov	r1, sl
    34c0:	bl	1204 <parse_integer_mapping>
    34c4:	cmp	r0, #0
    34c8:	beq	34e4 <coda_ascii_cursor_read_uint64+0x200>
    34cc:	cmp	r0, #1
    34d0:	bne	34dc <coda_ascii_cursor_read_uint64+0x1f8>
    34d4:	mov	r0, #0
    34d8:	b	350c <coda_ascii_cursor_read_uint64+0x228>
    34dc:	mvn	r0, #0
    34e0:	b	350c <coda_ascii_cursor_read_uint64+0x228>
    34e4:	add	r0, sp, #64	; 0x40
    34e8:	mov	r3, r8
    34ec:	mov	r2, r5
    34f0:	mov	r1, sl
    34f4:	bl	17cc <coda_ascii_parse_uint64>
    34f8:	cmp	r0, #0
    34fc:	bge	3508 <coda_ascii_cursor_read_uint64+0x224>
    3500:	mvn	r0, #0
    3504:	b	350c <coda_ascii_cursor_read_uint64+0x228>
    3508:	mov	r0, #0
    350c:	ldr	r4, [sp, #24]
    3510:	ldr	r5, [sp, #28]
    3514:	ldr	r6, [sp, #32]
    3518:	ldr	r7, [sp, #36]	; 0x24
    351c:	ldr	r8, [sp, #40]	; 0x28
    3520:	ldr	r9, [sp, #44]	; 0x2c
    3524:	ldr	sl, [sp, #48]	; 0x30
    3528:	ldr	lr, [sp, #16]
    352c:	add	sp, sp, #128	; 0x80
    3530:	bx	lr
    3534:	.word	0x000007cb
    3538:	.word	0x00000239
    353c:	.word	0x000006a4
    3540:	.word	0x00000a63

00003544 <coda_ascii_cursor_read_int8>:
    3544:	mov	ip, sp
    3548:	sub	sp, sp, #24
    354c:	str	ip, [sp]
    3550:	str	lr, [sp, #4]
    3554:	str	r4, [sp, #8]
    3558:	mov	r4, r1
    355c:	add	r1, sp, #16
    3560:	bl	3084 <coda_ascii_cursor_read_int64>
    3564:	cmp	r0, #0
    3568:	beq	3574 <coda_ascii_cursor_read_int8+0x30>
    356c:	mvn	r0, #0
    3570:	b	3618 <coda_ascii_cursor_read_int8+0xd4>
    3574:	ldr	r3, [sp, #16]
    3578:	ldr	r0, [sp, #20]
    357c:	mov	ip, #0
    3580:	cmp	r0, ip
    3584:	bne	3598 <coda_ascii_cursor_read_int8+0x54>
    3588:	mov	r1, #127	; 0x7f
    358c:	cmp	r3, r1
    3590:	bhi	35e0 <coda_ascii_cursor_read_int8+0x9c>
    3594:	b	35a4 <coda_ascii_cursor_read_int8+0x60>
    3598:	mov	r3, #0
    359c:	cmp	r0, r3
    35a0:	bgt	35e0 <coda_ascii_cursor_read_int8+0x9c>
    35a4:	ldr	ip, [sp, #16]
    35a8:	ldr	r1, [sp, #20]
    35ac:	mvn	r0, #0
    35b0:	cmp	r1, r0
    35b4:	bne	35cc <coda_ascii_cursor_read_int8+0x88>
    35b8:	mvn	r3, #127	; 0x7f
    35bc:	cmp	ip, r3
    35c0:	movcc	r2, #1
    35c4:	movcs	r2, #0
    35c8:	b	35e4 <coda_ascii_cursor_read_int8+0xa0>
    35cc:	mvn	ip, #0
    35d0:	cmp	r1, ip
    35d4:	movlt	r2, #1
    35d8:	movge	r2, #0
    35dc:	b	35e4 <coda_ascii_cursor_read_int8+0xa0>
    35e0:	mov	r2, #1
    35e4:	cmp	r2, #0
    35e8:	beq	3604 <coda_ascii_cursor_read_int8+0xc0>
    35ec:	movw	r0, #65236	; 0xfed4
    35f0:	movt	r0, #65535	; 0xffff
    35f4:	ldr	r1, [pc, #44]	; 3628 <coda_ascii_cursor_read_int8+0xe4>
    35f8:	bl	0 <coda_set_error>
    35fc:	mvn	r0, #0
    3600:	b	3618 <coda_ascii_cursor_read_int8+0xd4>
    3604:	ldr	r2, [sp, #16]
    3608:	sbfx	r1, r2, #0, #8
    360c:	sbfx	r0, r1, #0, #8
    3610:	strb	r0, [r4]
    3614:	mov	r0, #0
    3618:	ldr	r4, [sp, #8]
    361c:	ldr	lr, [sp, #4]
    3620:	add	sp, sp, #24
    3624:	bx	lr
    3628:	.word	0x00000004

0000362c <coda_ascii_cursor_read_uint8>:
    362c:	mov	ip, sp
    3630:	sub	sp, sp, #24
    3634:	str	ip, [sp]
    3638:	str	lr, [sp, #4]
    363c:	str	r4, [sp, #8]
    3640:	mov	r4, r1
    3644:	add	r1, sp, #16
    3648:	bl	32e4 <coda_ascii_cursor_read_uint64>
    364c:	cmp	r0, #0
    3650:	beq	365c <coda_ascii_cursor_read_uint8+0x30>
    3654:	mvn	r0, #0
    3658:	b	36b4 <coda_ascii_cursor_read_uint8+0x88>
    365c:	ldr	r0, [sp, #16]
    3660:	ldr	r2, [sp, #20]
    3664:	mov	r3, #0
    3668:	cmp	r2, r3
    366c:	bne	3680 <coda_ascii_cursor_read_uint8+0x54>
    3670:	mov	r3, #255	; 0xff
    3674:	cmp	r0, r3
    3678:	bhi	368c <coda_ascii_cursor_read_uint8+0x60>
    367c:	b	36a4 <coda_ascii_cursor_read_uint8+0x78>
    3680:	mov	r0, #0
    3684:	cmp	r2, r0
    3688:	bls	36a4 <coda_ascii_cursor_read_uint8+0x78>
    368c:	movw	r0, #65236	; 0xfed4
    3690:	movt	r0, #65535	; 0xffff
    3694:	ldr	r1, [pc, #40]	; 36c4 <coda_ascii_cursor_read_uint8+0x98>
    3698:	bl	0 <coda_set_error>
    369c:	mvn	r0, #0
    36a0:	b	36b4 <coda_ascii_cursor_read_uint8+0x88>
    36a4:	ldr	r1, [sp, #16]
    36a8:	and	ip, r1, #255	; 0xff
    36ac:	strb	ip, [r4]
    36b0:	mov	r0, #0
    36b4:	ldr	r4, [sp, #8]
    36b8:	ldr	lr, [sp, #4]
    36bc:	add	sp, sp, #24
    36c0:	bx	lr
    36c4:	.word	0x00000127

000036c8 <coda_ascii_cursor_read_int16>:
    36c8:	mov	ip, sp
    36cc:	sub	sp, sp, #24
    36d0:	str	ip, [sp]
    36d4:	str	lr, [sp, #4]
    36d8:	str	r4, [sp, #8]
    36dc:	mov	r4, r1
    36e0:	add	r1, sp, #16
    36e4:	bl	3084 <coda_ascii_cursor_read_int64>
    36e8:	cmp	r0, #0
    36ec:	beq	36f8 <coda_ascii_cursor_read_int16+0x30>
    36f0:	mvn	r0, #0
    36f4:	b	37a0 <coda_ascii_cursor_read_int16+0xd8>
    36f8:	ldr	r3, [sp, #16]
    36fc:	ldr	r0, [sp, #20]
    3700:	mov	ip, #0
    3704:	cmp	r0, ip
    3708:	bne	371c <coda_ascii_cursor_read_int16+0x54>
    370c:	movw	r1, #32767	; 0x7fff
    3710:	cmp	r3, r1
    3714:	bhi	3768 <coda_ascii_cursor_read_int16+0xa0>
    3718:	b	3728 <coda_ascii_cursor_read_int16+0x60>
    371c:	mov	r3, #0
    3720:	cmp	r0, r3
    3724:	bgt	3768 <coda_ascii_cursor_read_int16+0xa0>
    3728:	ldr	ip, [sp, #16]
    372c:	ldr	r1, [sp, #20]
    3730:	mvn	r0, #0
    3734:	cmp	r1, r0
    3738:	bne	3754 <coda_ascii_cursor_read_int16+0x8c>
    373c:	movw	r3, #32768	; 0x8000
    3740:	movt	r3, #65535	; 0xffff
    3744:	cmp	ip, r3
    3748:	movcc	r2, #1
    374c:	movcs	r2, #0
    3750:	b	376c <coda_ascii_cursor_read_int16+0xa4>
    3754:	mvn	ip, #0
    3758:	cmp	r1, ip
    375c:	movlt	r2, #1
    3760:	movge	r2, #0
    3764:	b	376c <coda_ascii_cursor_read_int16+0xa4>
    3768:	mov	r2, #1
    376c:	cmp	r2, #0
    3770:	beq	378c <coda_ascii_cursor_read_int16+0xc4>
    3774:	movw	r0, #65236	; 0xfed4
    3778:	movt	r0, #65535	; 0xffff
    377c:	ldr	r1, [pc, #44]	; 37b0 <coda_ascii_cursor_read_int16+0xe8>
    3780:	bl	0 <coda_set_error>
    3784:	mvn	r0, #0
    3788:	b	37a0 <coda_ascii_cursor_read_int16+0xd8>
    378c:	ldr	r2, [sp, #16]
    3790:	sbfx	r1, r2, #0, #16
    3794:	sbfx	r0, r1, #0, #16
    3798:	strh	r0, [r4]
    379c:	mov	r0, #0
    37a0:	ldr	r4, [sp, #8]
    37a4:	ldr	lr, [sp, #4]
    37a8:	add	sp, sp, #24
    37ac:	bx	lr
    37b0:	.word	0x00000048

000037b4 <coda_ascii_cursor_read_uint16>:
    37b4:	mov	ip, sp
    37b8:	sub	sp, sp, #24
    37bc:	str	ip, [sp]
    37c0:	str	lr, [sp, #4]
    37c4:	str	r4, [sp, #8]
    37c8:	mov	r4, r1
    37cc:	add	r1, sp, #16
    37d0:	bl	32e4 <coda_ascii_cursor_read_uint64>
    37d4:	cmp	r0, #0
    37d8:	beq	37e4 <coda_ascii_cursor_read_uint16+0x30>
    37dc:	mvn	r0, #0
    37e0:	b	3840 <coda_ascii_cursor_read_uint16+0x8c>
    37e4:	ldr	r0, [sp, #16]
    37e8:	ldr	r2, [sp, #20]
    37ec:	mov	r3, #0
    37f0:	cmp	r2, r3
    37f4:	bne	3808 <coda_ascii_cursor_read_uint16+0x54>
    37f8:	movw	r3, #65535	; 0xffff
    37fc:	cmp	r0, r3
    3800:	bhi	3814 <coda_ascii_cursor_read_uint16+0x60>
    3804:	b	382c <coda_ascii_cursor_read_uint16+0x78>
    3808:	mov	r0, #0
    380c:	cmp	r2, r0
    3810:	bls	382c <coda_ascii_cursor_read_uint16+0x78>
    3814:	movw	r0, #65236	; 0xfed4
    3818:	movt	r0, #65535	; 0xffff
    381c:	ldr	r1, [pc, #44]	; 3850 <coda_ascii_cursor_read_uint16+0x9c>
    3820:	bl	0 <coda_set_error>
    3824:	mvn	r0, #0
    3828:	b	3840 <coda_ascii_cursor_read_uint16+0x8c>
    382c:	ldr	r1, [sp, #16]
    3830:	bic	ip, r1, #16711680	; 0xff0000
    3834:	bic	ip, ip, #-16777216	; 0xff000000
    3838:	strh	ip, [r4]
    383c:	mov	r0, #0
    3840:	ldr	r4, [sp, #8]
    3844:	ldr	lr, [sp, #4]
    3848:	add	sp, sp, #24
    384c:	bx	lr
    3850:	.word	0x0000008d

00003854 <coda_ascii_cursor_read_int32>:
    3854:	mov	ip, sp
    3858:	sub	sp, sp, #24
    385c:	str	ip, [sp]
    3860:	str	lr, [sp, #4]
    3864:	str	r4, [sp, #8]
    3868:	mov	r4, r1
    386c:	add	r1, sp, #16
    3870:	bl	3084 <coda_ascii_cursor_read_int64>
    3874:	cmp	r0, #0
    3878:	beq	3884 <coda_ascii_cursor_read_int32+0x30>
    387c:	mvn	r0, #0
    3880:	b	3920 <coda_ascii_cursor_read_int32+0xcc>
    3884:	ldr	ip, [sp, #16]
    3888:	ldr	r0, [sp, #20]
    388c:	mov	r1, #0
    3890:	cmp	r0, r1
    3894:	bne	38a8 <coda_ascii_cursor_read_int32+0x54>
    3898:	mvn	r1, #-2147483648	; 0x80000000
    389c:	cmp	ip, r1
    38a0:	bhi	38f0 <coda_ascii_cursor_read_int32+0x9c>
    38a4:	b	38b4 <coda_ascii_cursor_read_int32+0x60>
    38a8:	mov	r2, #0
    38ac:	cmp	r0, r2
    38b0:	bgt	38f0 <coda_ascii_cursor_read_int32+0x9c>
    38b4:	ldr	r3, [sp, #16]
    38b8:	ldr	r2, [sp, #20]
    38bc:	mvn	ip, #0
    38c0:	cmp	r2, ip
    38c4:	bne	38dc <coda_ascii_cursor_read_int32+0x88>
    38c8:	mov	r2, #-2147483648	; 0x80000000
    38cc:	cmp	r3, r2
    38d0:	movcc	r3, #1
    38d4:	movcs	r3, #0
    38d8:	b	38f4 <coda_ascii_cursor_read_int32+0xa0>
    38dc:	mvn	r1, #0
    38e0:	cmp	r2, r1
    38e4:	movlt	r3, #1
    38e8:	movge	r3, #0
    38ec:	b	38f4 <coda_ascii_cursor_read_int32+0xa0>
    38f0:	mov	r3, #1
    38f4:	cmp	r3, #0
    38f8:	beq	3914 <coda_ascii_cursor_read_int32+0xc0>
    38fc:	movw	r0, #65236	; 0xfed4
    3900:	movt	r0, #65535	; 0xffff
    3904:	ldr	r1, [pc, #36]	; 3930 <coda_ascii_cursor_read_int32+0xdc>
    3908:	bl	0 <coda_set_error>
    390c:	mvn	r0, #0
    3910:	b	3920 <coda_ascii_cursor_read_int32+0xcc>
    3914:	ldr	r1, [sp, #16]
    3918:	str	r1, [r4]
    391c:	mov	r0, #0
    3920:	ldr	r4, [sp, #8]
    3924:	ldr	lr, [sp, #4]
    3928:	add	sp, sp, #24
    392c:	bx	lr
    3930:	.word	0x000005a0

00003934 <coda_ascii_cursor_read_uint32>:
    3934:	mov	ip, sp
    3938:	sub	sp, sp, #24
    393c:	str	ip, [sp]
    3940:	str	lr, [sp, #4]
    3944:	str	r4, [sp, #8]
    3948:	mov	r4, r1
    394c:	add	r1, sp, #16
    3950:	bl	32e4 <coda_ascii_cursor_read_uint64>
    3954:	cmp	r0, #0
    3958:	beq	3964 <coda_ascii_cursor_read_uint32+0x30>
    395c:	mvn	r0, #0
    3960:	b	39b8 <coda_ascii_cursor_read_uint32+0x84>
    3964:	ldr	r2, [sp, #16]
    3968:	ldr	r1, [sp, #20]
    396c:	mov	r3, #0
    3970:	cmp	r1, r3
    3974:	bne	3988 <coda_ascii_cursor_read_uint32+0x54>
    3978:	mvn	r3, #0
    397c:	cmp	r2, r3
    3980:	bhi	3994 <coda_ascii_cursor_read_uint32+0x60>
    3984:	b	39ac <coda_ascii_cursor_read_uint32+0x78>
    3988:	mov	r0, #0
    398c:	cmp	r1, r0
    3990:	bls	39ac <coda_ascii_cursor_read_uint32+0x78>
    3994:	movw	r0, #65236	; 0xfed4
    3998:	movt	r0, #65535	; 0xffff
    399c:	ldr	r1, [pc, #36]	; 39c8 <coda_ascii_cursor_read_uint32+0x94>
    39a0:	bl	0 <coda_set_error>
    39a4:	mvn	r0, #0
    39a8:	b	39b8 <coda_ascii_cursor_read_uint32+0x84>
    39ac:	ldr	r0, [sp, #16]
    39b0:	str	r0, [r4]
    39b4:	mov	r0, #0
    39b8:	ldr	r4, [sp, #8]
    39bc:	ldr	lr, [sp, #4]
    39c0:	add	sp, sp, #24
    39c4:	bx	lr
    39c8:	.word	0x0000065e

000039cc <coda_ascii_cursor_read_double>:
    39cc:	mov	ip, sp
    39d0:	sub	sp, sp, #128	; 0x80
    39d4:	str	ip, [sp, #12]
    39d8:	str	lr, [sp, #16]
    39dc:	str	r4, [sp, #24]
    39e0:	str	r5, [sp, #28]
    39e4:	str	r6, [sp, #32]
    39e8:	str	r7, [sp, #36]	; 0x24
    39ec:	str	r8, [sp, #40]	; 0x28
    39f0:	str	r9, [sp, #44]	; 0x2c
    39f4:	str	sl, [sp, #48]	; 0x30
    39f8:	mov	r5, r1
    39fc:	mov	r9, r0
    3a00:	ldr	ip, [r9, #4]
    3a04:	lsl	r1, ip, #4
    3a08:	add	r0, r9, r1
    3a0c:	sub	lr, r0, #4096	; 0x1000
    3a10:	ldr	r2, [lr, #4088]	; 0xff8
    3a14:	ldr	r0, [r2]
    3a18:	cmp	r0, #100	; 0x64
    3a1c:	blt	3a3c <coda_ascii_cursor_read_double+0x70>
    3a20:	ldr	r2, [r9, #4]
    3a24:	lsl	r3, r2, #4
    3a28:	add	r0, r9, r3
    3a2c:	sub	lr, r0, #4096	; 0x1000
    3a30:	ldr	r2, [lr, #4088]	; 0xff8
    3a34:	ldr	r4, [r2, #4]
    3a38:	b	3a50 <coda_ascii_cursor_read_double+0x84>
    3a3c:	ldr	r3, [r9, #4]
    3a40:	lsl	ip, r3, #4
    3a44:	add	r3, r9, ip
    3a48:	sub	lr, r3, #4096	; 0x1000
    3a4c:	ldr	r4, [lr, #4088]	; 0xff8
    3a50:	ldr	r0, [r9, #4]
    3a54:	lsl	r1, r0, #4
    3a58:	add	r2, r9, r1
    3a5c:	ldr	r6, [r2]
    3a60:	ldr	r7, [r2, #4]
    3a64:	mov	r8, #1
    3a68:	add	r1, sp, #56	; 0x38
    3a6c:	ldr	r2, [r4, #24]
    3a70:	ldr	r3, [r4, #28]
    3a74:	mov	r0, r9
    3a78:	bl	c2c <get_bit_size_boundary>
    3a7c:	cmp	r0, #0
    3a80:	beq	3a8c <coda_ascii_cursor_read_double+0xc0>
    3a84:	mvn	r0, #0
    3a88:	b	3bf4 <coda_ascii_cursor_read_double+0x228>
    3a8c:	mov	r3, #0
    3a90:	mov	r0, r6
    3a94:	and	r2, r0, #7
    3a98:	orr	ip, r3, r2
    3a9c:	cmp	ip, #0
    3aa0:	beq	3ab8 <coda_ascii_cursor_read_double+0xec>
    3aa4:	mvn	r0, #21
    3aa8:	ldr	r1, [pc, #364]	; 3c1c <coda_ascii_cursor_read_double+0x250>
    3aac:	bl	0 <coda_set_error>
    3ab0:	mvn	r0, #0
    3ab4:	b	3bf4 <coda_ascii_cursor_read_double+0x228>
    3ab8:	ldr	ip, [r4, #28]
    3abc:	cmp	ip, #0
    3ac0:	bge	3b1c <coda_ascii_cursor_read_double+0x150>
    3ac4:	ldr	r1, [sp, #56]	; 0x38
    3ac8:	ldr	r2, [sp, #60]	; 0x3c
    3acc:	asr	r3, r2, #3
    3ad0:	lsr	r1, r1, #3
    3ad4:	orr	r0, r1, r2, lsl #29
    3ad8:	mov	r1, #0
    3adc:	cmp	r3, r1
    3ae0:	bne	3af4 <coda_ascii_cursor_read_double+0x128>
    3ae4:	mov	r1, #64	; 0x40
    3ae8:	cmp	r0, r1
    3aec:	bcc	3b00 <coda_ascii_cursor_read_double+0x134>
    3af0:	b	3b14 <coda_ascii_cursor_read_double+0x148>
    3af4:	mov	r1, #0
    3af8:	cmp	r3, r1
    3afc:	bge	3b14 <coda_ascii_cursor_read_double+0x148>
    3b00:	ldr	r0, [sp, #56]	; 0x38
    3b04:	ldr	r3, [sp, #60]	; 0x3c
    3b08:	lsr	r1, r0, #3
    3b0c:	orr	sl, r1, r3, lsl #29
    3b10:	b	3b4c <coda_ascii_cursor_read_double+0x180>
    3b14:	mov	sl, #64	; 0x40
    3b18:	b	3b4c <coda_ascii_cursor_read_double+0x180>
    3b1c:	mov	r8, #0
    3b20:	ldr	ip, [r4, #24]
    3b24:	ldr	r2, [r4, #28]
    3b28:	lsr	r3, ip, #3
    3b2c:	orr	sl, r3, r2, lsl #29
    3b30:	cmp	sl, #64	; 0x40
    3b34:	ble	3b4c <coda_ascii_cursor_read_double+0x180>
    3b38:	ldr	r0, [pc, #228]	; 3c24 <coda_ascii_cursor_read_double+0x258>
    3b3c:	ldr	r1, [pc, #228]	; 3c28 <coda_ascii_cursor_read_double+0x25c>
    3b40:	movw	r2, #1306	; 0x51a
    3b44:	ldr	r3, [pc, #212]	; 3c20 <coda_ascii_cursor_read_double+0x254>
    3b48:	bl	0 <__assert_fail>
    3b4c:	ldr	r0, [r9]
    3b50:	asr	r3, r7, #3
    3b54:	lsr	ip, r6, #3
    3b58:	orr	r2, ip, r7, lsl #29
    3b5c:	asr	ip, sl, #31
    3b60:	mov	r1, sl
    3b64:	add	r7, sp, #64	; 0x40
    3b68:	str	r7, [sp, #8]
    3b6c:	str	ip, [sp, #4]
    3b70:	str	r1, [sp]
    3b74:	bl	224 <read_bytes_in_bounds>
    3b78:	cmp	r0, #0
    3b7c:	beq	3b88 <coda_ascii_cursor_read_double+0x1bc>
    3b80:	mvn	r0, #0
    3b84:	b	3bf4 <coda_ascii_cursor_read_double+0x228>
    3b88:	ldr	r2, [r4, #52]	; 0x34
    3b8c:	cmp	r2, #0
    3b90:	beq	3bcc <coda_ascii_cursor_read_double+0x200>
    3b94:	add	r0, sp, #64	; 0x40
    3b98:	ldr	r2, [r4, #52]	; 0x34
    3b9c:	str	r5, [sp]
    3ba0:	mov	r3, r8
    3ba4:	mov	r1, sl
    3ba8:	bl	1374 <parse_float_mapping>
    3bac:	cmp	r0, #0
    3bb0:	beq	3bcc <coda_ascii_cursor_read_double+0x200>
    3bb4:	cmp	r0, #1
    3bb8:	bne	3bc4 <coda_ascii_cursor_read_double+0x1f8>
    3bbc:	mov	r0, #0
    3bc0:	b	3bf4 <coda_ascii_cursor_read_double+0x228>
    3bc4:	mvn	r0, #0
    3bc8:	b	3bf4 <coda_ascii_cursor_read_double+0x228>
    3bcc:	add	r0, sp, #64	; 0x40
    3bd0:	mov	r3, r8
    3bd4:	mov	r2, r5
    3bd8:	mov	r1, sl
    3bdc:	bl	1a58 <coda_ascii_parse_double>
    3be0:	cmp	r0, #0
    3be4:	bge	3bf0 <coda_ascii_cursor_read_double+0x224>
    3be8:	mvn	r0, #0
    3bec:	b	3bf4 <coda_ascii_cursor_read_double+0x228>
    3bf0:	mov	r0, #0
    3bf4:	ldr	r4, [sp, #24]
    3bf8:	ldr	r5, [sp, #28]
    3bfc:	ldr	r6, [sp, #32]
    3c00:	ldr	r7, [sp, #36]	; 0x24
    3c04:	ldr	r8, [sp, #40]	; 0x28
    3c08:	ldr	r9, [sp, #44]	; 0x2c
    3c0c:	ldr	sl, [sp, #48]	; 0x30
    3c10:	ldr	lr, [sp, #16]
    3c14:	add	sp, sp, #128	; 0x80
    3c18:	bx	lr
    3c1c:	.word	0x000007cb
    3c20:	.word	0x00000a81
    3c24:	.word	0x00000239
    3c28:	.word	0x000006a4

00003c2c <coda_ascii_cursor_read_float>:
    3c2c:	mov	ip, sp
    3c30:	sub	sp, sp, #24
    3c34:	str	ip, [sp]
    3c38:	str	lr, [sp, #4]
    3c3c:	str	r4, [sp, #8]
    3c40:	mov	r4, r1
    3c44:	add	r1, sp, #16
    3c48:	bl	39cc <coda_ascii_cursor_read_double>
    3c4c:	cmp	r0, #0
    3c50:	beq	3c5c <coda_ascii_cursor_read_float+0x30>
    3c54:	mvn	r0, #0
    3c58:	b	3c6c <coda_ascii_cursor_read_float+0x40>
    3c5c:	vldr	d3, [sp, #16]
    3c60:	vcvt.f32.f64	s4, d3
    3c64:	vstr	s4, [r4]
    3c68:	mov	r0, #0
    3c6c:	ldr	r4, [sp, #8]
    3c70:	ldr	lr, [sp, #4]
    3c74:	add	sp, sp, #24
    3c78:	bx	lr

00003c7c <coda_ascii_cursor_read_char>:
    3c7c:	mov	ip, sp
    3c80:	sub	sp, sp, #40	; 0x28
    3c84:	str	ip, [sp, #12]
    3c88:	str	lr, [sp, #16]
    3c8c:	str	r4, [sp, #24]
    3c90:	str	r5, [sp, #28]
    3c94:	mov	r4, r1
    3c98:	mov	r5, r0
    3c9c:	add	r1, sp, #32
    3ca0:	mov	r3, #0
    3ca4:	mov	r2, #8
    3ca8:	mov	r0, r5
    3cac:	bl	c2c <get_bit_size_boundary>
    3cb0:	cmp	r0, #0
    3cb4:	beq	3cc0 <coda_ascii_cursor_read_char+0x44>
    3cb8:	mvn	r0, #0
    3cbc:	b	3d2c <coda_ascii_cursor_read_char+0xb0>
    3cc0:	ldr	ip, [r5, #4]
    3cc4:	lsl	r0, ip, #4
    3cc8:	add	r0, r5, r0
    3ccc:	ldr	ip, [r0]
    3cd0:	ldr	r2, [r0, #4]
    3cd4:	mov	r1, #0
    3cd8:	mov	r3, ip
    3cdc:	and	r0, r3, #7
    3ce0:	orr	r3, r1, r0
    3ce4:	cmp	r3, #0
    3ce8:	beq	3d04 <coda_ascii_cursor_read_char+0x88>
    3cec:	movw	r0, #65236	; 0xfed4
    3cf0:	movt	r0, #65535	; 0xffff
    3cf4:	ldr	r1, [pc, #68]	; 3d40 <coda_ascii_cursor_read_char+0xc4>
    3cf8:	bl	0 <coda_set_error>
    3cfc:	mvn	r0, #0
    3d00:	b	3d2c <coda_ascii_cursor_read_char+0xb0>
    3d04:	ldr	r0, [r5]
    3d08:	asr	r3, r2, #3
    3d0c:	lsr	r1, ip, #3
    3d10:	orr	r2, r1, r2, lsl #29
    3d14:	mov	r1, #0
    3d18:	mov	ip, #1
    3d1c:	str	r4, [sp, #8]
    3d20:	str	r1, [sp, #4]
    3d24:	str	ip, [sp]
    3d28:	bl	224 <read_bytes_in_bounds>
    3d2c:	ldr	r4, [sp, #24]
    3d30:	ldr	r5, [sp, #28]
    3d34:	ldr	lr, [sp, #16]
    3d38:	add	sp, sp, #40	; 0x28
    3d3c:	bx	lr
    3d40:	.word	0x0000044c

00003d44 <coda_ascii_cursor_read_string>:
    3d44:	mov	ip, sp
    3d48:	sub	sp, sp, #64	; 0x40
    3d4c:	str	ip, [sp, #12]
    3d50:	str	lr, [sp, #16]
    3d54:	str	r4, [sp, #24]
    3d58:	str	r5, [sp, #28]
    3d5c:	str	r6, [sp, #32]
    3d60:	str	r7, [sp, #36]	; 0x24
    3d64:	str	r8, [sp, #40]	; 0x28
    3d68:	str	r9, [sp, #44]	; 0x2c
    3d6c:	mov	r6, r2
    3d70:	mov	r7, r1
    3d74:	mov	r4, r0
    3d78:	ldr	r2, [r4, #4]
    3d7c:	lsl	ip, r2, #4
    3d80:	add	r3, r4, ip
    3d84:	sub	lr, r3, #4096	; 0x1000
    3d88:	ldr	r3, [lr, #4088]	; 0xff8
    3d8c:	ldr	ip, [r3]
    3d90:	cmp	ip, #100	; 0x64
    3d94:	blt	3db4 <coda_ascii_cursor_read_string+0x70>
    3d98:	ldr	r2, [r4, #4]
    3d9c:	lsl	r1, r2, #4
    3da0:	add	r0, r4, r1
    3da4:	sub	lr, r0, #4096	; 0x1000
    3da8:	ldr	r0, [lr, #4088]	; 0xff8
    3dac:	ldr	r9, [r0, #4]
    3db0:	b	3dc8 <coda_ascii_cursor_read_string+0x84>
    3db4:	ldr	r1, [r4, #4]
    3db8:	lsl	r3, r1, #4
    3dbc:	add	r1, r4, r3
    3dc0:	sub	lr, r1, #4096	; 0x1000
    3dc4:	ldr	r9, [lr, #4088]	; 0xff8
    3dc8:	ldr	r0, [r4, #4]
    3dcc:	lsl	r3, r0, #4
    3dd0:	add	r2, r4, r3
    3dd4:	ldr	r5, [r2]
    3dd8:	ldr	r8, [r2, #4]
    3ddc:	mov	r3, r5
    3de0:	mov	r0, #0
    3de4:	and	ip, r3, #7
    3de8:	orr	ip, r0, ip
    3dec:	cmp	ip, #0
    3df0:	beq	3e0c <coda_ascii_cursor_read_string+0xc8>
    3df4:	movw	r0, #65236	; 0xfed4
    3df8:	movt	r0, #65535	; 0xffff
    3dfc:	ldr	r1, [pc, #400]	; 3f94 <coda_ascii_cursor_read_string+0x250>
    3e00:	bl	0 <coda_set_error>
    3e04:	mvn	r0, #0
    3e08:	b	3f6c <coda_ascii_cursor_read_string+0x228>
    3e0c:	ldr	r0, [r9, #28]
    3e10:	cmp	r0, #0
    3e14:	bge	3e7c <coda_ascii_cursor_read_string+0x138>
    3e18:	add	r1, sp, #48	; 0x30
    3e1c:	mov	r0, r4
    3e20:	bl	2280 <coda_ascii_cursor_get_bit_size>
    3e24:	cmp	r0, #0
    3e28:	beq	3e34 <coda_ascii_cursor_read_string+0xf0>
    3e2c:	mvn	r0, #0
    3e30:	b	3f6c <coda_ascii_cursor_read_string+0x228>
    3e34:	ldr	r3, [sp, #48]	; 0x30
    3e38:	mov	r1, #0
    3e3c:	and	r2, r3, #7
    3e40:	orr	ip, r1, r2
    3e44:	cmp	ip, #0
    3e48:	beq	3e64 <coda_ascii_cursor_read_string+0x120>
    3e4c:	movw	r0, #65236	; 0xfed4
    3e50:	movt	r0, #65535	; 0xffff
    3e54:	ldr	r1, [pc, #308]	; 3f90 <coda_ascii_cursor_read_string+0x24c>
    3e58:	bl	0 <coda_set_error>
    3e5c:	mvn	r0, #0
    3e60:	b	3f6c <coda_ascii_cursor_read_string+0x228>
    3e64:	ldr	r1, [sp, #48]	; 0x30
    3e68:	ldr	r0, [sp, #52]	; 0x34
    3e6c:	asr	ip, r0, #3
    3e70:	lsr	r3, r1, #3
    3e74:	orr	r9, r3, r0, lsl #29
    3e78:	b	3eb4 <coda_ascii_cursor_read_string+0x170>
    3e7c:	add	r1, sp, #56	; 0x38
    3e80:	ldr	r2, [r9, #24]
    3e84:	ldr	r3, [r9, #28]
    3e88:	mov	r0, r4
    3e8c:	bl	c2c <get_bit_size_boundary>
    3e90:	cmp	r0, #0
    3e94:	beq	3ea0 <coda_ascii_cursor_read_string+0x15c>
    3e98:	mvn	r0, #0
    3e9c:	b	3f6c <coda_ascii_cursor_read_string+0x228>
    3ea0:	ldr	r2, [r9, #24]
    3ea4:	ldr	r0, [r9, #28]
    3ea8:	asr	ip, r0, #3
    3eac:	lsr	r1, r2, #3
    3eb0:	orr	r9, r1, r0, lsl #29
    3eb4:	mov	r1, #0
    3eb8:	mov	r0, #1
    3ebc:	adds	r0, r9, r0
    3ec0:	adc	r1, ip, r1
    3ec4:	mov	r2, r6
    3ec8:	asr	r3, r2, #31
    3ecc:	cmp	r1, r3
    3ed0:	bne	3ee0 <coda_ascii_cursor_read_string+0x19c>
    3ed4:	cmp	r0, r2
    3ed8:	bhi	3ee8 <coda_ascii_cursor_read_string+0x1a4>
    3edc:	b	3ef0 <coda_ascii_cursor_read_string+0x1ac>
    3ee0:	cmp	r1, r3
    3ee4:	ble	3ef0 <coda_ascii_cursor_read_string+0x1ac>
    3ee8:	sub	r9, r6, #1
    3eec:	asr	ip, r9, #31
    3ef0:	mov	r0, ip
    3ef4:	mov	r1, #0
    3ef8:	cmp	r0, r1
    3efc:	bne	3f14 <coda_ascii_cursor_read_string+0x1d0>
    3f00:	mov	r1, r9
    3f04:	mov	r2, #0
    3f08:	cmp	r1, r2
    3f0c:	bhi	3f24 <coda_ascii_cursor_read_string+0x1e0>
    3f10:	b	3f60 <coda_ascii_cursor_read_string+0x21c>
    3f14:	mov	r3, ip
    3f18:	mov	r1, #0
    3f1c:	cmp	r3, r1
    3f20:	ble	3f60 <coda_ascii_cursor_read_string+0x21c>
    3f24:	ldr	r0, [r4]
    3f28:	asr	r3, r8, #3
    3f2c:	lsr	r1, r5, #3
    3f30:	orr	r2, r1, r8, lsl #29
    3f34:	str	r7, [sp, #8]
    3f38:	str	ip, [sp, #4]
    3f3c:	str	r9, [sp]
    3f40:	bl	0 <read_bytes>
    3f44:	cmp	r0, #0
    3f48:	beq	3f54 <coda_ascii_cursor_read_string+0x210>
    3f4c:	mvn	r0, #0
    3f50:	b	3f6c <coda_ascii_cursor_read_string+0x228>
    3f54:	mov	r0, #0
    3f58:	strb	r0, [r7, r9]
    3f5c:	b	3f68 <coda_ascii_cursor_read_string+0x224>
    3f60:	mov	r0, #0
    3f64:	strb	r0, [r7]
    3f68:	mov	r0, #0
    3f6c:	ldr	r4, [sp, #24]
    3f70:	ldr	r5, [sp, #28]
    3f74:	ldr	r6, [sp, #32]
    3f78:	ldr	r7, [sp, #36]	; 0x24
    3f7c:	ldr	r8, [sp, #40]	; 0x28
    3f80:	ldr	r9, [sp, #44]	; 0x2c
    3f84:	ldr	lr, [sp, #16]
    3f88:	add	sp, sp, #64	; 0x40
    3f8c:	bx	lr
    3f90:	.word	0x00000386
    3f94:	.word	0x00000562

00003f98 <coda_ascii_cursor_read_bits>:
    3f98:	mov	ip, sp
    3f9c:	sub	sp, sp, #40	; 0x28
    3fa0:	str	ip, [sp, #12]
    3fa4:	str	lr, [sp, #16]
    3fa8:	str	r4, [sp, #24]
    3fac:	str	r5, [sp, #28]
    3fb0:	str	r6, [sp, #32]
    3fb4:	ldr	r5, [ip, #4]
    3fb8:	ldr	r6, [ip]
    3fbc:	mov	r4, r0
    3fc0:	mov	ip, r6
    3fc4:	mov	r0, #0
    3fc8:	and	ip, ip, #7
    3fcc:	orr	r0, r0, ip
    3fd0:	cmp	r0, #0
    3fd4:	beq	3fec <coda_ascii_cursor_read_bits+0x54>
    3fd8:	mvn	r0, #99	; 0x63
    3fdc:	ldr	r1, [pc, #184]	; 409c <coda_ascii_cursor_read_bits+0x104>
    3fe0:	bl	0 <coda_set_error>
    3fe4:	mvn	r0, #0
    3fe8:	b	4080 <coda_ascii_cursor_read_bits+0xe8>
    3fec:	ldr	ip, [r4, #4]
    3ff0:	lsl	ip, ip, #4
    3ff4:	add	ip, r4, ip
    3ff8:	ldr	r0, [ip]
    3ffc:	ldr	ip, [ip, #4]
    4000:	adds	lr, r0, r2
    4004:	adc	r0, ip, r3
    4008:	mov	ip, lr
    400c:	mov	r0, #0
    4010:	and	ip, ip, #7
    4014:	orr	ip, r0, ip
    4018:	cmp	ip, #0
    401c:	beq	4038 <coda_ascii_cursor_read_bits+0xa0>
    4020:	movw	r0, #65236	; 0xfed4
    4024:	movt	r0, #65535	; 0xffff
    4028:	ldr	r1, [pc, #104]	; 4098 <coda_ascii_cursor_read_bits+0x100>
    402c:	bl	0 <coda_set_error>
    4030:	mvn	r0, #0
    4034:	b	4080 <coda_ascii_cursor_read_bits+0xe8>
    4038:	ldr	r0, [r4]
    403c:	ldr	ip, [r4, #4]
    4040:	lsl	ip, ip, #4
    4044:	add	ip, r4, ip
    4048:	ldr	r4, [ip]
    404c:	ldr	ip, [ip, #4]
    4050:	adds	r2, r4, r2
    4054:	adc	ip, ip, r3
    4058:	asr	r3, ip, #3
    405c:	lsr	r2, r2, #3
    4060:	orr	r2, r2, ip, lsl #29
    4064:	asr	r4, r5, #3
    4068:	lsr	ip, r6, #3
    406c:	orr	ip, ip, r5, lsl #29
    4070:	str	r1, [sp, #8]
    4074:	str	r4, [sp, #4]
    4078:	str	ip, [sp]
    407c:	bl	0 <read_bytes>
    4080:	ldr	r4, [sp, #24]
    4084:	ldr	r5, [sp, #28]
    4088:	ldr	r6, [sp, #32]
    408c:	ldr	lr, [sp, #16]
    4090:	add	sp, sp, #40	; 0x28
    4094:	bx	lr
    4098:	.word	0x0000044c
    409c:	.word	0x00000705

000040a0 <coda_ascii_cursor_read_bytes>:
    40a0:	mov	ip, sp
    40a4:	sub	sp, sp, #40	; 0x28
    40a8:	str	ip, [sp, #12]
    40ac:	str	lr, [sp, #16]
    40b0:	str	r4, [sp, #24]
    40b4:	str	r5, [sp, #28]
    40b8:	str	r6, [sp, #32]
    40bc:	str	r7, [sp, #36]	; 0x24
    40c0:	ldr	r5, [ip, #4]
    40c4:	ldr	r6, [ip]
    40c8:	mov	r4, r0
    40cc:	ldr	ip, [r4, #4]
    40d0:	lsl	ip, ip, #4
    40d4:	add	r0, r4, ip
    40d8:	ldr	ip, [r0]
    40dc:	mov	r0, #0
    40e0:	and	ip, ip, #7
    40e4:	orr	ip, r0, ip
    40e8:	cmp	ip, #0
    40ec:	beq	4108 <coda_ascii_cursor_read_bytes+0x68>
    40f0:	movw	r0, #65236	; 0xfed4
    40f4:	movt	r0, #65535	; 0xffff
    40f8:	ldr	r1, [pc, #96]	; 4160 <coda_ascii_cursor_read_bytes+0xc0>
    40fc:	bl	0 <coda_set_error>
    4100:	mvn	r0, #0
    4104:	b	4144 <coda_ascii_cursor_read_bytes+0xa4>
    4108:	ldr	r0, [r4]
    410c:	ldr	ip, [r4, #4]
    4110:	lsl	ip, ip, #4
    4114:	add	r4, r4, ip
    4118:	ldr	ip, [r4]
    411c:	ldr	r7, [r4, #4]
    4120:	asr	r4, r7, #3
    4124:	lsr	ip, ip, #3
    4128:	orr	ip, ip, r7, lsl #29
    412c:	adds	r2, ip, r2
    4130:	adc	r3, r4, r3
    4134:	str	r1, [sp, #8]
    4138:	str	r5, [sp, #4]
    413c:	str	r6, [sp]
    4140:	bl	0 <read_bytes>
    4144:	ldr	r4, [sp, #24]
    4148:	ldr	r5, [sp, #28]
    414c:	ldr	r6, [sp, #32]
    4150:	ldr	r7, [sp, #36]	; 0x24
    4154:	ldr	lr, [sp, #16]
    4158:	add	sp, sp, #40	; 0x28
    415c:	bx	lr
    4160:	.word	0x0000044c

00004164 <coda_ascii_cursor_read_int8_array>:
    4164:	mov	ip, sp
    4168:	sub	sp, sp, #32
    416c:	str	ip, [sp, #4]
    4170:	str	lr, [sp, #8]
    4174:	str	r4, [sp, #16]
    4178:	str	r5, [sp, #20]
    417c:	str	r6, [sp, #24]
    4180:	mov	r6, r2
    4184:	mov	r4, r1
    4188:	mov	r5, r0
    418c:	ldr	ip, [r5, #4]
    4190:	lsl	r2, ip, #4
    4194:	add	r1, r5, r2
    4198:	sub	lr, r1, #4096	; 0x1000
    419c:	ldr	r3, [lr, #4088]	; 0xff8
    41a0:	ldr	r3, [r3]
    41a4:	cmp	r3, #100	; 0x64
    41a8:	blt	41c8 <coda_ascii_cursor_read_int8_array+0x64>
    41ac:	ldr	r0, [r5, #4]
    41b0:	lsl	r2, r0, #4
    41b4:	add	r0, r5, r2
    41b8:	sub	lr, r0, #4096	; 0x1000
    41bc:	ldr	r3, [lr, #4088]	; 0xff8
    41c0:	ldr	r0, [r3, #4]
    41c4:	b	41dc <coda_ascii_cursor_read_int8_array+0x78>
    41c8:	ldr	r2, [r5, #4]
    41cc:	lsl	r2, r2, #4
    41d0:	add	ip, r5, r2
    41d4:	sub	lr, ip, #4096	; 0x1000
    41d8:	ldr	r0, [lr, #4088]	; 0xff8
    41dc:	ldr	r3, [r0, #40]	; 0x28
    41e0:	ldr	r1, [r3]
    41e4:	cmp	r1, #0
    41e8:	beq	4200 <coda_ascii_cursor_read_int8_array+0x9c>
    41ec:	ldr	r0, [pc, #132]	; 4278 <coda_ascii_cursor_read_int8_array+0x114>
    41f0:	ldr	r1, [pc, #132]	; 427c <coda_ascii_cursor_read_int8_array+0x118>
    41f4:	movw	r2, #1464	; 0x5b8
    41f8:	ldr	r3, [pc, #112]	; 4270 <coda_ascii_cursor_read_int8_array+0x10c>
    41fc:	bl	0 <__assert_fail>
    4200:	ldr	r1, [pc, #108]	; 4274 <coda_ascii_cursor_read_int8_array+0x110>
    4204:	mov	r3, #1
    4208:	mov	r2, #0
    420c:	str	r2, [sp]
    4210:	mov	r2, r4
    4214:	mov	r0, r5
    4218:	bl	324 <read_array>
    421c:	cmp	r0, #0
    4220:	beq	422c <coda_ascii_cursor_read_int8_array+0xc8>
    4224:	mvn	r0, #0
    4228:	b	4258 <coda_ascii_cursor_read_int8_array+0xf4>
    422c:	cmp	r6, #0
    4230:	beq	4254 <coda_ascii_cursor_read_int8_array+0xf0>
    4234:	mov	r2, #1
    4238:	mov	r1, r4
    423c:	mov	r0, r5
    4240:	bl	6f8 <transpose_array>
    4244:	cmp	r0, #0
    4248:	beq	4254 <coda_ascii_cursor_read_int8_array+0xf0>
    424c:	mvn	r0, #0
    4250:	b	4258 <coda_ascii_cursor_read_int8_array+0xf4>
    4254:	mov	r0, #0
    4258:	ldr	r4, [sp, #16]
    425c:	ldr	r5, [sp, #20]
    4260:	ldr	r6, [sp, #24]
    4264:	ldr	lr, [sp, #8]
    4268:	add	sp, sp, #32
    426c:	bx	lr
    4270:	.word	0x00000a9f
    4274:	.word	0x00000000
    4278:	.word	0x0000027e
    427c:	.word	0x000006a4

00004280 <coda_ascii_cursor_read_uint8_array>:
    4280:	mov	ip, sp
    4284:	sub	sp, sp, #32
    4288:	str	ip, [sp, #4]
    428c:	str	lr, [sp, #8]
    4290:	str	r4, [sp, #16]
    4294:	str	r5, [sp, #20]
    4298:	str	r6, [sp, #24]
    429c:	mov	r6, r2
    42a0:	mov	r4, r1
    42a4:	mov	r5, r0
    42a8:	ldr	ip, [r5, #4]
    42ac:	lsl	r2, ip, #4
    42b0:	add	r1, r5, r2
    42b4:	sub	lr, r1, #4096	; 0x1000
    42b8:	ldr	r3, [lr, #4088]	; 0xff8
    42bc:	ldr	r3, [r3]
    42c0:	cmp	r3, #100	; 0x64
    42c4:	blt	42e4 <coda_ascii_cursor_read_uint8_array+0x64>
    42c8:	ldr	r0, [r5, #4]
    42cc:	lsl	r2, r0, #4
    42d0:	add	r0, r5, r2
    42d4:	sub	lr, r0, #4096	; 0x1000
    42d8:	ldr	r3, [lr, #4088]	; 0xff8
    42dc:	ldr	r0, [r3, #4]
    42e0:	b	42f8 <coda_ascii_cursor_read_uint8_array+0x78>
    42e4:	ldr	r2, [r5, #4]
    42e8:	lsl	r2, r2, #4
    42ec:	add	ip, r5, r2
    42f0:	sub	lr, ip, #4096	; 0x1000
    42f4:	ldr	r0, [lr, #4088]	; 0xff8
    42f8:	ldr	r3, [r0, #40]	; 0x28
    42fc:	ldr	r1, [r3]
    4300:	cmp	r1, #0
    4304:	beq	431c <coda_ascii_cursor_read_uint8_array+0x9c>
    4308:	ldr	r0, [pc, #128]	; 4390 <coda_ascii_cursor_read_uint8_array+0x110>
    430c:	ldr	r1, [pc, #128]	; 4394 <coda_ascii_cursor_read_uint8_array+0x114>
    4310:	movw	r2, #1484	; 0x5cc
    4314:	ldr	r3, [pc, #124]	; 4398 <coda_ascii_cursor_read_uint8_array+0x118>
    4318:	bl	0 <__assert_fail>
    431c:	ldr	r1, [pc, #104]	; 438c <coda_ascii_cursor_read_uint8_array+0x10c>
    4320:	mov	r3, #1
    4324:	mov	r2, #0
    4328:	str	r2, [sp]
    432c:	mov	r2, r4
    4330:	mov	r0, r5
    4334:	bl	324 <read_array>
    4338:	cmp	r0, #0
    433c:	beq	4348 <coda_ascii_cursor_read_uint8_array+0xc8>
    4340:	mvn	r0, #0
    4344:	b	4374 <coda_ascii_cursor_read_uint8_array+0xf4>
    4348:	cmp	r6, #0
    434c:	beq	4370 <coda_ascii_cursor_read_uint8_array+0xf0>
    4350:	mov	r2, #1
    4354:	mov	r1, r4
    4358:	mov	r0, r5
    435c:	bl	6f8 <transpose_array>
    4360:	cmp	r0, #0
    4364:	beq	4370 <coda_ascii_cursor_read_uint8_array+0xf0>
    4368:	mvn	r0, #0
    436c:	b	4374 <coda_ascii_cursor_read_uint8_array+0xf4>
    4370:	mov	r0, #0
    4374:	ldr	r4, [sp, #16]
    4378:	ldr	r5, [sp, #20]
    437c:	ldr	r6, [sp, #24]
    4380:	ldr	lr, [sp, #8]
    4384:	add	sp, sp, #32
    4388:	bx	lr
    438c:	.word	0x00000000
    4390:	.word	0x0000027e
    4394:	.word	0x000006a4
    4398:	.word	0x00000ac1

0000439c <coda_ascii_cursor_read_int16_array>:
    439c:	mov	ip, sp
    43a0:	sub	sp, sp, #32
    43a4:	str	ip, [sp, #4]
    43a8:	str	lr, [sp, #8]
    43ac:	str	r4, [sp, #16]
    43b0:	str	r5, [sp, #20]
    43b4:	str	r6, [sp, #24]
    43b8:	mov	r6, r2
    43bc:	mov	r4, r1
    43c0:	mov	r5, r0
    43c4:	ldr	ip, [r5, #4]
    43c8:	lsl	r2, ip, #4
    43cc:	add	r1, r5, r2
    43d0:	sub	lr, r1, #4096	; 0x1000
    43d4:	ldr	r3, [lr, #4088]	; 0xff8
    43d8:	ldr	r3, [r3]
    43dc:	cmp	r3, #100	; 0x64
    43e0:	blt	4400 <coda_ascii_cursor_read_int16_array+0x64>
    43e4:	ldr	r0, [r5, #4]
    43e8:	lsl	r2, r0, #4
    43ec:	add	r0, r5, r2
    43f0:	sub	lr, r0, #4096	; 0x1000
    43f4:	ldr	r3, [lr, #4088]	; 0xff8
    43f8:	ldr	r0, [r3, #4]
    43fc:	b	4414 <coda_ascii_cursor_read_int16_array+0x78>
    4400:	ldr	r2, [r5, #4]
    4404:	lsl	r2, r2, #4
    4408:	add	ip, r5, r2
    440c:	sub	lr, ip, #4096	; 0x1000
    4410:	ldr	r0, [lr, #4088]	; 0xff8
    4414:	ldr	r3, [r0, #40]	; 0x28
    4418:	ldr	r1, [r3]
    441c:	cmp	r1, #0
    4420:	beq	4438 <coda_ascii_cursor_read_int16_array+0x9c>
    4424:	ldr	r0, [pc, #128]	; 44ac <coda_ascii_cursor_read_int16_array+0x110>
    4428:	ldr	r1, [pc, #132]	; 44b4 <coda_ascii_cursor_read_int16_array+0x118>
    442c:	mov	r2, #1504	; 0x5e0
    4430:	ldr	r3, [pc, #120]	; 44b0 <coda_ascii_cursor_read_int16_array+0x114>
    4434:	bl	0 <__assert_fail>
    4438:	ldr	r1, [pc, #104]	; 44a8 <coda_ascii_cursor_read_int16_array+0x10c>
    443c:	mov	r3, #2
    4440:	mov	r2, #0
    4444:	str	r2, [sp]
    4448:	mov	r2, r4
    444c:	mov	r0, r5
    4450:	bl	324 <read_array>
    4454:	cmp	r0, #0
    4458:	beq	4464 <coda_ascii_cursor_read_int16_array+0xc8>
    445c:	mvn	r0, #0
    4460:	b	4490 <coda_ascii_cursor_read_int16_array+0xf4>
    4464:	cmp	r6, #0
    4468:	beq	448c <coda_ascii_cursor_read_int16_array+0xf0>
    446c:	mov	r2, #2
    4470:	mov	r1, r4
    4474:	mov	r0, r5
    4478:	bl	6f8 <transpose_array>
    447c:	cmp	r0, #0
    4480:	beq	448c <coda_ascii_cursor_read_int16_array+0xf0>
    4484:	mvn	r0, #0
    4488:	b	4490 <coda_ascii_cursor_read_int16_array+0xf4>
    448c:	mov	r0, #0
    4490:	ldr	r4, [sp, #16]
    4494:	ldr	r5, [sp, #20]
    4498:	ldr	r6, [sp, #24]
    449c:	ldr	lr, [sp, #8]
    44a0:	add	sp, sp, #32
    44a4:	bx	lr
    44a8:	.word	0x00000000
    44ac:	.word	0x0000027e
    44b0:	.word	0x00000ae4
    44b4:	.word	0x000006a4

000044b8 <coda_ascii_cursor_read_uint16_array>:
    44b8:	mov	ip, sp
    44bc:	sub	sp, sp, #32
    44c0:	str	ip, [sp, #4]
    44c4:	str	lr, [sp, #8]
    44c8:	str	r4, [sp, #16]
    44cc:	str	r5, [sp, #20]
    44d0:	str	r6, [sp, #24]
    44d4:	mov	r6, r2
    44d8:	mov	r4, r1
    44dc:	mov	r5, r0
    44e0:	ldr	ip, [r5, #4]
    44e4:	lsl	r2, ip, #4
    44e8:	add	r1, r5, r2
    44ec:	sub	lr, r1, #4096	; 0x1000
    44f0:	ldr	r3, [lr, #4088]	; 0xff8
    44f4:	ldr	r3, [r3]
    44f8:	cmp	r3, #100	; 0x64
    44fc:	blt	451c <coda_ascii_cursor_read_uint16_array+0x64>
    4500:	ldr	r0, [r5, #4]
    4504:	lsl	r2, r0, #4
    4508:	add	r0, r5, r2
    450c:	sub	lr, r0, #4096	; 0x1000
    4510:	ldr	r3, [lr, #4088]	; 0xff8
    4514:	ldr	r0, [r3, #4]
    4518:	b	4530 <coda_ascii_cursor_read_uint16_array+0x78>
    451c:	ldr	r2, [r5, #4]
    4520:	lsl	r2, r2, #4
    4524:	add	ip, r5, r2
    4528:	sub	lr, ip, #4096	; 0x1000
    452c:	ldr	r0, [lr, #4088]	; 0xff8
    4530:	ldr	r3, [r0, #40]	; 0x28
    4534:	ldr	r1, [r3]
    4538:	cmp	r1, #0
    453c:	beq	4554 <coda_ascii_cursor_read_uint16_array+0x9c>
    4540:	ldr	r0, [pc, #132]	; 45cc <coda_ascii_cursor_read_uint16_array+0x114>
    4544:	ldr	r1, [pc, #132]	; 45d0 <coda_ascii_cursor_read_uint16_array+0x118>
    4548:	movw	r2, #1524	; 0x5f4
    454c:	ldr	r3, [pc, #112]	; 45c4 <coda_ascii_cursor_read_uint16_array+0x10c>
    4550:	bl	0 <__assert_fail>
    4554:	ldr	r1, [pc, #108]	; 45c8 <coda_ascii_cursor_read_uint16_array+0x110>
    4558:	mov	r3, #2
    455c:	mov	r2, #0
    4560:	str	r2, [sp]
    4564:	mov	r2, r4
    4568:	mov	r0, r5
    456c:	bl	324 <read_array>
    4570:	cmp	r0, #0
    4574:	beq	4580 <coda_ascii_cursor_read_uint16_array+0xc8>
    4578:	mvn	r0, #0
    457c:	b	45ac <coda_ascii_cursor_read_uint16_array+0xf4>
    4580:	cmp	r6, #0
    4584:	beq	45a8 <coda_ascii_cursor_read_uint16_array+0xf0>
    4588:	mov	r2, #2
    458c:	mov	r1, r4
    4590:	mov	r0, r5
    4594:	bl	6f8 <transpose_array>
    4598:	cmp	r0, #0
    459c:	beq	45a8 <coda_ascii_cursor_read_uint16_array+0xf0>
    45a0:	mvn	r0, #0
    45a4:	b	45ac <coda_ascii_cursor_read_uint16_array+0xf4>
    45a8:	mov	r0, #0
    45ac:	ldr	r4, [sp, #16]
    45b0:	ldr	r5, [sp, #20]
    45b4:	ldr	r6, [sp, #24]
    45b8:	ldr	lr, [sp, #8]
    45bc:	add	sp, sp, #32
    45c0:	bx	lr
    45c4:	.word	0x00000b07
    45c8:	.word	0x00000000
    45cc:	.word	0x0000027e
    45d0:	.word	0x000006a4

000045d4 <coda_ascii_cursor_read_int32_array>:
    45d4:	mov	ip, sp
    45d8:	sub	sp, sp, #32
    45dc:	str	ip, [sp, #4]
    45e0:	str	lr, [sp, #8]
    45e4:	str	r4, [sp, #16]
    45e8:	str	r5, [sp, #20]
    45ec:	str	r6, [sp, #24]
    45f0:	mov	r6, r2
    45f4:	mov	r4, r1
    45f8:	mov	r5, r0
    45fc:	ldr	ip, [r5, #4]
    4600:	lsl	r2, ip, #4
    4604:	add	r1, r5, r2
    4608:	sub	lr, r1, #4096	; 0x1000
    460c:	ldr	r3, [lr, #4088]	; 0xff8
    4610:	ldr	r3, [r3]
    4614:	cmp	r3, #100	; 0x64
    4618:	blt	4638 <coda_ascii_cursor_read_int32_array+0x64>
    461c:	ldr	r0, [r5, #4]
    4620:	lsl	r2, r0, #4
    4624:	add	r0, r5, r2
    4628:	sub	lr, r0, #4096	; 0x1000
    462c:	ldr	r3, [lr, #4088]	; 0xff8
    4630:	ldr	r0, [r3, #4]
    4634:	b	464c <coda_ascii_cursor_read_int32_array+0x78>
    4638:	ldr	r2, [r5, #4]
    463c:	lsl	r2, r2, #4
    4640:	add	ip, r5, r2
    4644:	sub	lr, ip, #4096	; 0x1000
    4648:	ldr	r0, [lr, #4088]	; 0xff8
    464c:	ldr	r3, [r0, #40]	; 0x28
    4650:	ldr	r1, [r3]
    4654:	cmp	r1, #0
    4658:	beq	4670 <coda_ascii_cursor_read_int32_array+0x9c>
    465c:	ldr	r0, [pc, #132]	; 46e8 <coda_ascii_cursor_read_int32_array+0x114>
    4660:	ldr	r1, [pc, #132]	; 46ec <coda_ascii_cursor_read_int32_array+0x118>
    4664:	movw	r2, #1544	; 0x608
    4668:	ldr	r3, [pc, #116]	; 46e4 <coda_ascii_cursor_read_int32_array+0x110>
    466c:	bl	0 <__assert_fail>
    4670:	ldr	r1, [pc, #104]	; 46e0 <coda_ascii_cursor_read_int32_array+0x10c>
    4674:	mov	r3, #4
    4678:	mov	r2, #0
    467c:	str	r2, [sp]
    4680:	mov	r2, r4
    4684:	mov	r0, r5
    4688:	bl	324 <read_array>
    468c:	cmp	r0, #0
    4690:	beq	469c <coda_ascii_cursor_read_int32_array+0xc8>
    4694:	mvn	r0, #0
    4698:	b	46c8 <coda_ascii_cursor_read_int32_array+0xf4>
    469c:	cmp	r6, #0
    46a0:	beq	46c4 <coda_ascii_cursor_read_int32_array+0xf0>
    46a4:	mov	r2, #4
    46a8:	mov	r1, r4
    46ac:	mov	r0, r5
    46b0:	bl	6f8 <transpose_array>
    46b4:	cmp	r0, #0
    46b8:	beq	46c4 <coda_ascii_cursor_read_int32_array+0xf0>
    46bc:	mvn	r0, #0
    46c0:	b	46c8 <coda_ascii_cursor_read_int32_array+0xf4>
    46c4:	mov	r0, #0
    46c8:	ldr	r4, [sp, #16]
    46cc:	ldr	r5, [sp, #20]
    46d0:	ldr	r6, [sp, #24]
    46d4:	ldr	lr, [sp, #8]
    46d8:	add	sp, sp, #32
    46dc:	bx	lr
    46e0:	.word	0x00000000
    46e4:	.word	0x00000b2b
    46e8:	.word	0x0000027e
    46ec:	.word	0x000006a4

000046f0 <coda_ascii_cursor_read_uint32_array>:
    46f0:	mov	ip, sp
    46f4:	sub	sp, sp, #32
    46f8:	str	ip, [sp, #4]
    46fc:	str	lr, [sp, #8]
    4700:	str	r4, [sp, #16]
    4704:	str	r5, [sp, #20]
    4708:	str	r6, [sp, #24]
    470c:	mov	r6, r2
    4710:	mov	r4, r1
    4714:	mov	r5, r0
    4718:	ldr	ip, [r5, #4]
    471c:	lsl	r2, ip, #4
    4720:	add	r1, r5, r2
    4724:	sub	lr, r1, #4096	; 0x1000
    4728:	ldr	r3, [lr, #4088]	; 0xff8
    472c:	ldr	r3, [r3]
    4730:	cmp	r3, #100	; 0x64
    4734:	blt	4754 <coda_ascii_cursor_read_uint32_array+0x64>
    4738:	ldr	r0, [r5, #4]
    473c:	lsl	r2, r0, #4
    4740:	add	r0, r5, r2
    4744:	sub	lr, r0, #4096	; 0x1000
    4748:	ldr	r3, [lr, #4088]	; 0xff8
    474c:	ldr	r0, [r3, #4]
    4750:	b	4768 <coda_ascii_cursor_read_uint32_array+0x78>
    4754:	ldr	r2, [r5, #4]
    4758:	lsl	r2, r2, #4
    475c:	add	ip, r5, r2
    4760:	sub	lr, ip, #4096	; 0x1000
    4764:	ldr	r0, [lr, #4088]	; 0xff8
    4768:	ldr	r3, [r0, #40]	; 0x28
    476c:	ldr	r1, [r3]
    4770:	cmp	r1, #0
    4774:	beq	478c <coda_ascii_cursor_read_uint32_array+0x9c>
    4778:	ldr	r0, [pc, #132]	; 4804 <coda_ascii_cursor_read_uint32_array+0x114>
    477c:	ldr	r1, [pc, #132]	; 4808 <coda_ascii_cursor_read_uint32_array+0x118>
    4780:	movw	r2, #1564	; 0x61c
    4784:	ldr	r3, [pc, #112]	; 47fc <coda_ascii_cursor_read_uint32_array+0x10c>
    4788:	bl	0 <__assert_fail>
    478c:	ldr	r1, [pc, #108]	; 4800 <coda_ascii_cursor_read_uint32_array+0x110>
    4790:	mov	r3, #4
    4794:	mov	r2, #0
    4798:	str	r2, [sp]
    479c:	mov	r2, r4
    47a0:	mov	r0, r5
    47a4:	bl	324 <read_array>
    47a8:	cmp	r0, #0
    47ac:	beq	47b8 <coda_ascii_cursor_read_uint32_array+0xc8>
    47b0:	mvn	r0, #0
    47b4:	b	47e4 <coda_ascii_cursor_read_uint32_array+0xf4>
    47b8:	cmp	r6, #0
    47bc:	beq	47e0 <coda_ascii_cursor_read_uint32_array+0xf0>
    47c0:	mov	r2, #4
    47c4:	mov	r1, r4
    47c8:	mov	r0, r5
    47cc:	bl	6f8 <transpose_array>
    47d0:	cmp	r0, #0
    47d4:	beq	47e0 <coda_ascii_cursor_read_uint32_array+0xf0>
    47d8:	mvn	r0, #0
    47dc:	b	47e4 <coda_ascii_cursor_read_uint32_array+0xf4>
    47e0:	mov	r0, #0
    47e4:	ldr	r4, [sp, #16]
    47e8:	ldr	r5, [sp, #20]
    47ec:	ldr	r6, [sp, #24]
    47f0:	ldr	lr, [sp, #8]
    47f4:	add	sp, sp, #32
    47f8:	bx	lr
    47fc:	.word	0x00000b4e
    4800:	.word	0x00000000
    4804:	.word	0x0000027e
    4808:	.word	0x000006a4

0000480c <coda_ascii_cursor_read_int64_array>:
    480c:	mov	ip, sp
    4810:	sub	sp, sp, #32
    4814:	str	ip, [sp, #4]
    4818:	str	lr, [sp, #8]
    481c:	str	r4, [sp, #16]
    4820:	str	r5, [sp, #20]
    4824:	str	r6, [sp, #24]
    4828:	mov	r6, r2
    482c:	mov	r4, r1
    4830:	mov	r5, r0
    4834:	ldr	ip, [r5, #4]
    4838:	lsl	r2, ip, #4
    483c:	add	r1, r5, r2
    4840:	sub	lr, r1, #4096	; 0x1000
    4844:	ldr	r3, [lr, #4088]	; 0xff8
    4848:	ldr	r3, [r3]
    484c:	cmp	r3, #100	; 0x64
    4850:	blt	4870 <coda_ascii_cursor_read_int64_array+0x64>
    4854:	ldr	r0, [r5, #4]
    4858:	lsl	r2, r0, #4
    485c:	add	r0, r5, r2
    4860:	sub	lr, r0, #4096	; 0x1000
    4864:	ldr	r3, [lr, #4088]	; 0xff8
    4868:	ldr	r0, [r3, #4]
    486c:	b	4884 <coda_ascii_cursor_read_int64_array+0x78>
    4870:	ldr	r2, [r5, #4]
    4874:	lsl	r2, r2, #4
    4878:	add	ip, r5, r2
    487c:	sub	lr, ip, #4096	; 0x1000
    4880:	ldr	r0, [lr, #4088]	; 0xff8
    4884:	ldr	r3, [r0, #40]	; 0x28
    4888:	ldr	r1, [r3]
    488c:	cmp	r1, #0
    4890:	beq	48a8 <coda_ascii_cursor_read_int64_array+0x9c>
    4894:	ldr	r0, [pc, #128]	; 491c <coda_ascii_cursor_read_int64_array+0x110>
    4898:	ldr	r1, [pc, #128]	; 4920 <coda_ascii_cursor_read_int64_array+0x114>
    489c:	mov	r2, #1584	; 0x630
    48a0:	ldr	r3, [pc, #124]	; 4924 <coda_ascii_cursor_read_int64_array+0x118>
    48a4:	bl	0 <__assert_fail>
    48a8:	ldr	r1, [pc, #104]	; 4918 <coda_ascii_cursor_read_int64_array+0x10c>
    48ac:	mov	r3, #8
    48b0:	mov	r2, #0
    48b4:	str	r2, [sp]
    48b8:	mov	r2, r4
    48bc:	mov	r0, r5
    48c0:	bl	324 <read_array>
    48c4:	cmp	r0, #0
    48c8:	beq	48d4 <coda_ascii_cursor_read_int64_array+0xc8>
    48cc:	mvn	r0, #0
    48d0:	b	4900 <coda_ascii_cursor_read_int64_array+0xf4>
    48d4:	cmp	r6, #0
    48d8:	beq	48fc <coda_ascii_cursor_read_int64_array+0xf0>
    48dc:	mov	r2, #4
    48e0:	mov	r1, r4
    48e4:	mov	r0, r5
    48e8:	bl	6f8 <transpose_array>
    48ec:	cmp	r0, #0
    48f0:	beq	48fc <coda_ascii_cursor_read_int64_array+0xf0>
    48f4:	mvn	r0, #0
    48f8:	b	4900 <coda_ascii_cursor_read_int64_array+0xf4>
    48fc:	mov	r0, #0
    4900:	ldr	r4, [sp, #16]
    4904:	ldr	r5, [sp, #20]
    4908:	ldr	r6, [sp, #24]
    490c:	ldr	lr, [sp, #8]
    4910:	add	sp, sp, #32
    4914:	bx	lr
    4918:	.word	0x00000000
    491c:	.word	0x0000027e
    4920:	.word	0x000006a4
    4924:	.word	0x00000b72

00004928 <coda_ascii_cursor_read_uint64_array>:
    4928:	mov	ip, sp
    492c:	sub	sp, sp, #32
    4930:	str	ip, [sp, #4]
    4934:	str	lr, [sp, #8]
    4938:	str	r4, [sp, #16]
    493c:	str	r5, [sp, #20]
    4940:	str	r6, [sp, #24]
    4944:	mov	r6, r2
    4948:	mov	r4, r1
    494c:	mov	r5, r0
    4950:	ldr	ip, [r5, #4]
    4954:	lsl	r2, ip, #4
    4958:	add	r1, r5, r2
    495c:	sub	lr, r1, #4096	; 0x1000
    4960:	ldr	r3, [lr, #4088]	; 0xff8
    4964:	ldr	r3, [r3]
    4968:	cmp	r3, #100	; 0x64
    496c:	blt	498c <coda_ascii_cursor_read_uint64_array+0x64>
    4970:	ldr	r0, [r5, #4]
    4974:	lsl	r2, r0, #4
    4978:	add	r0, r5, r2
    497c:	sub	lr, r0, #4096	; 0x1000
    4980:	ldr	r3, [lr, #4088]	; 0xff8
    4984:	ldr	r0, [r3, #4]
    4988:	b	49a0 <coda_ascii_cursor_read_uint64_array+0x78>
    498c:	ldr	r2, [r5, #4]
    4990:	lsl	r2, r2, #4
    4994:	add	ip, r5, r2
    4998:	sub	lr, ip, #4096	; 0x1000
    499c:	ldr	r0, [lr, #4088]	; 0xff8
    49a0:	ldr	r3, [r0, #40]	; 0x28
    49a4:	ldr	r1, [r3]
    49a8:	cmp	r1, #0
    49ac:	beq	49c4 <coda_ascii_cursor_read_uint64_array+0x9c>
    49b0:	ldr	r0, [pc, #132]	; 4a3c <coda_ascii_cursor_read_uint64_array+0x114>
    49b4:	ldr	r1, [pc, #132]	; 4a40 <coda_ascii_cursor_read_uint64_array+0x118>
    49b8:	movw	r2, #1604	; 0x644
    49bc:	ldr	r3, [pc, #112]	; 4a34 <coda_ascii_cursor_read_uint64_array+0x10c>
    49c0:	bl	0 <__assert_fail>
    49c4:	ldr	r1, [pc, #108]	; 4a38 <coda_ascii_cursor_read_uint64_array+0x110>
    49c8:	mov	r3, #8
    49cc:	mov	r2, #0
    49d0:	str	r2, [sp]
    49d4:	mov	r2, r4
    49d8:	mov	r0, r5
    49dc:	bl	324 <read_array>
    49e0:	cmp	r0, #0
    49e4:	beq	49f0 <coda_ascii_cursor_read_uint64_array+0xc8>
    49e8:	mvn	r0, #0
    49ec:	b	4a1c <coda_ascii_cursor_read_uint64_array+0xf4>
    49f0:	cmp	r6, #0
    49f4:	beq	4a18 <coda_ascii_cursor_read_uint64_array+0xf0>
    49f8:	mov	r2, #8
    49fc:	mov	r1, r4
    4a00:	mov	r0, r5
    4a04:	bl	6f8 <transpose_array>
    4a08:	cmp	r0, #0
    4a0c:	beq	4a18 <coda_ascii_cursor_read_uint64_array+0xf0>
    4a10:	mvn	r0, #0
    4a14:	b	4a1c <coda_ascii_cursor_read_uint64_array+0xf4>
    4a18:	mov	r0, #0
    4a1c:	ldr	r4, [sp, #16]
    4a20:	ldr	r5, [sp, #20]
    4a24:	ldr	r6, [sp, #24]
    4a28:	ldr	lr, [sp, #8]
    4a2c:	add	sp, sp, #32
    4a30:	bx	lr
    4a34:	.word	0x00000b95
    4a38:	.word	0x00000000
    4a3c:	.word	0x0000027e
    4a40:	.word	0x000006a4

00004a44 <coda_ascii_cursor_read_float_array>:
    4a44:	mov	ip, sp
    4a48:	sub	sp, sp, #32
    4a4c:	str	ip, [sp, #4]
    4a50:	str	lr, [sp, #8]
    4a54:	str	r4, [sp, #16]
    4a58:	str	r5, [sp, #20]
    4a5c:	str	r6, [sp, #24]
    4a60:	mov	r6, r2
    4a64:	mov	r4, r1
    4a68:	mov	r5, r0
    4a6c:	ldr	ip, [r5, #4]
    4a70:	lsl	r2, ip, #4
    4a74:	add	r1, r5, r2
    4a78:	sub	lr, r1, #4096	; 0x1000
    4a7c:	ldr	r3, [lr, #4088]	; 0xff8
    4a80:	ldr	r3, [r3]
    4a84:	cmp	r3, #100	; 0x64
    4a88:	blt	4aa8 <coda_ascii_cursor_read_float_array+0x64>
    4a8c:	ldr	r0, [r5, #4]
    4a90:	lsl	r2, r0, #4
    4a94:	add	r0, r5, r2
    4a98:	sub	lr, r0, #4096	; 0x1000
    4a9c:	ldr	r3, [lr, #4088]	; 0xff8
    4aa0:	ldr	r0, [r3, #4]
    4aa4:	b	4abc <coda_ascii_cursor_read_float_array+0x78>
    4aa8:	ldr	r2, [r5, #4]
    4aac:	lsl	r2, r2, #4
    4ab0:	add	ip, r5, r2
    4ab4:	sub	lr, ip, #4096	; 0x1000
    4ab8:	ldr	r0, [lr, #4088]	; 0xff8
    4abc:	ldr	r3, [r0, #40]	; 0x28
    4ac0:	ldr	r1, [r3]
    4ac4:	cmp	r1, #0
    4ac8:	beq	4ae0 <coda_ascii_cursor_read_float_array+0x9c>
    4acc:	ldr	r0, [pc, #128]	; 4b54 <coda_ascii_cursor_read_float_array+0x110>
    4ad0:	ldr	r1, [pc, #132]	; 4b5c <coda_ascii_cursor_read_float_array+0x118>
    4ad4:	movw	r2, #1624	; 0x658
    4ad8:	ldr	r3, [pc, #112]	; 4b50 <coda_ascii_cursor_read_float_array+0x10c>
    4adc:	bl	0 <__assert_fail>
    4ae0:	ldr	r1, [pc, #112]	; 4b58 <coda_ascii_cursor_read_float_array+0x114>
    4ae4:	mov	r3, #4
    4ae8:	mov	r2, #0
    4aec:	str	r2, [sp]
    4af0:	mov	r2, r4
    4af4:	mov	r0, r5
    4af8:	bl	324 <read_array>
    4afc:	cmp	r0, #0
    4b00:	beq	4b0c <coda_ascii_cursor_read_float_array+0xc8>
    4b04:	mvn	r0, #0
    4b08:	b	4b38 <coda_ascii_cursor_read_float_array+0xf4>
    4b0c:	cmp	r6, #0
    4b10:	beq	4b34 <coda_ascii_cursor_read_float_array+0xf0>
    4b14:	mov	r2, #4
    4b18:	mov	r1, r4
    4b1c:	mov	r0, r5
    4b20:	bl	6f8 <transpose_array>
    4b24:	cmp	r0, #0
    4b28:	beq	4b34 <coda_ascii_cursor_read_float_array+0xf0>
    4b2c:	mvn	r0, #0
    4b30:	b	4b38 <coda_ascii_cursor_read_float_array+0xf4>
    4b34:	mov	r0, #0
    4b38:	ldr	r4, [sp, #16]
    4b3c:	ldr	r5, [sp, #20]
    4b40:	ldr	r6, [sp, #24]
    4b44:	ldr	lr, [sp, #8]
    4b48:	add	sp, sp, #32
    4b4c:	bx	lr
    4b50:	.word	0x00000bb9
    4b54:	.word	0x0000027e
    4b58:	.word	0x00000000
    4b5c:	.word	0x000006a4

00004b60 <coda_ascii_cursor_read_double_array>:
    4b60:	mov	ip, sp
    4b64:	sub	sp, sp, #32
    4b68:	str	ip, [sp, #4]
    4b6c:	str	lr, [sp, #8]
    4b70:	str	r4, [sp, #16]
    4b74:	str	r5, [sp, #20]
    4b78:	str	r6, [sp, #24]
    4b7c:	mov	r6, r2
    4b80:	mov	r4, r1
    4b84:	mov	r5, r0
    4b88:	ldr	ip, [r5, #4]
    4b8c:	lsl	r2, ip, #4
    4b90:	add	r1, r5, r2
    4b94:	sub	lr, r1, #4096	; 0x1000
    4b98:	ldr	r3, [lr, #4088]	; 0xff8
    4b9c:	ldr	r3, [r3]
    4ba0:	cmp	r3, #100	; 0x64
    4ba4:	blt	4bc4 <coda_ascii_cursor_read_double_array+0x64>
    4ba8:	ldr	r0, [r5, #4]
    4bac:	lsl	r2, r0, #4
    4bb0:	add	r0, r5, r2
    4bb4:	sub	lr, r0, #4096	; 0x1000
    4bb8:	ldr	r3, [lr, #4088]	; 0xff8
    4bbc:	ldr	r0, [r3, #4]
    4bc0:	b	4bd8 <coda_ascii_cursor_read_double_array+0x78>
    4bc4:	ldr	r2, [r5, #4]
    4bc8:	lsl	r2, r2, #4
    4bcc:	add	ip, r5, r2
    4bd0:	sub	lr, ip, #4096	; 0x1000
    4bd4:	ldr	r0, [lr, #4088]	; 0xff8
    4bd8:	ldr	r3, [r0, #40]	; 0x28
    4bdc:	ldr	r1, [r3]
    4be0:	cmp	r1, #0
    4be4:	beq	4bfc <coda_ascii_cursor_read_double_array+0x9c>
    4be8:	ldr	r0, [pc, #124]	; 4c6c <coda_ascii_cursor_read_double_array+0x10c>
    4bec:	ldr	r1, [pc, #124]	; 4c70 <coda_ascii_cursor_read_double_array+0x110>
    4bf0:	movw	r2, #1644	; 0x66c
    4bf4:	ldr	r3, [pc, #120]	; 4c74 <coda_ascii_cursor_read_double_array+0x114>
    4bf8:	bl	0 <__assert_fail>
    4bfc:	ldr	r1, [pc, #116]	; 4c78 <coda_ascii_cursor_read_double_array+0x118>
    4c00:	mov	r3, #8
    4c04:	mov	r2, #0
    4c08:	str	r2, [sp]
    4c0c:	mov	r2, r4
    4c10:	mov	r0, r5
    4c14:	bl	324 <read_array>
    4c18:	cmp	r0, #0
    4c1c:	beq	4c28 <coda_ascii_cursor_read_double_array+0xc8>
    4c20:	mvn	r0, #0
    4c24:	b	4c54 <coda_ascii_cursor_read_double_array+0xf4>
    4c28:	cmp	r6, #0
    4c2c:	beq	4c50 <coda_ascii_cursor_read_double_array+0xf0>
    4c30:	mov	r2, #8
    4c34:	mov	r1, r4
    4c38:	mov	r0, r5
    4c3c:	bl	6f8 <transpose_array>
    4c40:	cmp	r0, #0
    4c44:	beq	4c50 <coda_ascii_cursor_read_double_array+0xf0>
    4c48:	mvn	r0, #0
    4c4c:	b	4c54 <coda_ascii_cursor_read_double_array+0xf4>
    4c50:	mov	r0, #0
    4c54:	ldr	r4, [sp, #16]
    4c58:	ldr	r5, [sp, #20]
    4c5c:	ldr	r6, [sp, #24]
    4c60:	ldr	lr, [sp, #8]
    4c64:	add	sp, sp, #32
    4c68:	bx	lr
    4c6c:	.word	0x0000027e
    4c70:	.word	0x000006a4
    4c74:	.word	0x00000bdc
    4c78:	.word	0x00000000

00004c7c <coda_ascii_cursor_read_char_array>:
    4c7c:	mov	ip, sp
    4c80:	sub	sp, sp, #32
    4c84:	str	ip, [sp, #4]
    4c88:	str	lr, [sp, #8]
    4c8c:	str	r4, [sp, #16]
    4c90:	str	r5, [sp, #20]
    4c94:	str	r6, [sp, #24]
    4c98:	mov	r6, r2
    4c9c:	mov	r4, r1
    4ca0:	mov	r5, r0
    4ca4:	ldr	ip, [r5, #4]
    4ca8:	lsl	r2, ip, #4
    4cac:	add	r1, r5, r2
    4cb0:	sub	lr, r1, #4096	; 0x1000
    4cb4:	ldr	r3, [lr, #4088]	; 0xff8
    4cb8:	ldr	r3, [r3]
    4cbc:	cmp	r3, #100	; 0x64
    4cc0:	blt	4ce0 <coda_ascii_cursor_read_char_array+0x64>
    4cc4:	ldr	r0, [r5, #4]
    4cc8:	lsl	r2, r0, #4
    4ccc:	add	r0, r5, r2
    4cd0:	sub	lr, r0, #4096	; 0x1000
    4cd4:	ldr	r3, [lr, #4088]	; 0xff8
    4cd8:	ldr	r0, [r3, #4]
    4cdc:	b	4cf4 <coda_ascii_cursor_read_char_array+0x78>
    4ce0:	ldr	r2, [r5, #4]
    4ce4:	lsl	r2, r2, #4
    4ce8:	add	ip, r5, r2
    4cec:	sub	lr, ip, #4096	; 0x1000
    4cf0:	ldr	r0, [lr, #4088]	; 0xff8
    4cf4:	ldr	r3, [r0, #40]	; 0x28
    4cf8:	ldr	r1, [r3]
    4cfc:	cmp	r1, #0
    4d00:	beq	4d18 <coda_ascii_cursor_read_char_array+0x9c>
    4d04:	ldr	r0, [pc, #132]	; 4d90 <coda_ascii_cursor_read_char_array+0x114>
    4d08:	ldr	r1, [pc, #132]	; 4d94 <coda_ascii_cursor_read_char_array+0x118>
    4d0c:	mov	r2, #1664	; 0x680
    4d10:	ldr	r3, [pc, #116]	; 4d8c <coda_ascii_cursor_read_char_array+0x110>
    4d14:	bl	0 <__assert_fail>
    4d18:	ldr	r1, [pc, #104]	; 4d88 <coda_ascii_cursor_read_char_array+0x10c>
    4d1c:	mov	r3, #1
    4d20:	mov	r2, #0
    4d24:	str	r2, [sp]
    4d28:	mov	r2, r4
    4d2c:	mov	r0, r5
    4d30:	bl	324 <read_array>
    4d34:	cmp	r0, #0
    4d38:	beq	4d44 <coda_ascii_cursor_read_char_array+0xc8>
    4d3c:	mvn	r0, #0
    4d40:	b	4d70 <coda_ascii_cursor_read_char_array+0xf4>
    4d44:	cmp	r6, #0
    4d48:	beq	4d6c <coda_ascii_cursor_read_char_array+0xf0>
    4d4c:	mov	r2, #1
    4d50:	mov	r1, r4
    4d54:	mov	r0, r5
    4d58:	bl	6f8 <transpose_array>
    4d5c:	cmp	r0, #0
    4d60:	beq	4d6c <coda_ascii_cursor_read_char_array+0xf0>
    4d64:	mvn	r0, #0
    4d68:	b	4d70 <coda_ascii_cursor_read_char_array+0xf4>
    4d6c:	mov	r0, #0
    4d70:	ldr	r4, [sp, #16]
    4d74:	ldr	r5, [sp, #20]
    4d78:	ldr	r6, [sp, #24]
    4d7c:	ldr	lr, [sp, #8]
    4d80:	add	sp, sp, #32
    4d84:	bx	lr
    4d88:	.word	0x00000000
    4d8c:	.word	0x00000c00
    4d90:	.word	0x0000027e
    4d94:	.word	0x000006a4

00004d98 <coda_ascii_cursor_read_int8_partial_array>:
    4d98:	mov	ip, sp
    4d9c:	sub	sp, sp, #32
    4da0:	str	ip, [sp, #8]
    4da4:	str	lr, [sp, #12]
    4da8:	str	r4, [sp, #16]
    4dac:	str	r5, [sp, #20]
    4db0:	str	r6, [sp, #24]
    4db4:	str	r7, [sp, #28]
    4db8:	mov	r6, r3
    4dbc:	mov	r7, r2
    4dc0:	mov	r4, r1
    4dc4:	mov	r5, r0
    4dc8:	ldr	ip, [r5, #4]
    4dcc:	lsl	r0, ip, #4
    4dd0:	add	r1, r5, r0
    4dd4:	sub	lr, r1, #4096	; 0x1000
    4dd8:	ldr	ip, [lr, #4088]	; 0xff8
    4ddc:	ldr	r2, [ip]
    4de0:	cmp	r2, #100	; 0x64
    4de4:	blt	4e04 <coda_ascii_cursor_read_int8_partial_array+0x6c>
    4de8:	ldr	r2, [r5, #4]
    4dec:	lsl	ip, r2, #4
    4df0:	add	r2, r5, ip
    4df4:	sub	lr, r2, #4096	; 0x1000
    4df8:	ldr	r2, [lr, #4088]	; 0xff8
    4dfc:	ldr	r0, [r2, #4]
    4e00:	b	4e18 <coda_ascii_cursor_read_int8_partial_array+0x80>
    4e04:	ldr	r1, [r5, #4]
    4e08:	lsl	r1, r1, #4
    4e0c:	add	r0, r5, r1
    4e10:	sub	lr, r0, #4096	; 0x1000
    4e14:	ldr	r0, [lr, #4088]	; 0xff8
    4e18:	ldr	r3, [r0, #40]	; 0x28
    4e1c:	ldr	r3, [r3]
    4e20:	cmp	r3, #0
    4e24:	beq	4e3c <coda_ascii_cursor_read_int8_partial_array+0xa4>
    4e28:	ldr	r0, [pc, #76]	; 4e7c <coda_ascii_cursor_read_int8_partial_array+0xe4>
    4e2c:	ldr	r1, [pc, #76]	; 4e80 <coda_ascii_cursor_read_int8_partial_array+0xe8>
    4e30:	movw	r2, #1684	; 0x694
    4e34:	ldr	r3, [pc, #72]	; 4e84 <coda_ascii_cursor_read_int8_partial_array+0xec>
    4e38:	bl	0 <__assert_fail>
    4e3c:	ldr	r1, [pc, #52]	; 4e78 <coda_ascii_cursor_read_int8_partial_array+0xe0>
    4e40:	mov	r3, #1
    4e44:	str	r3, [sp, #4]
    4e48:	str	r6, [sp]
    4e4c:	mov	r3, r7
    4e50:	mov	r2, r4
    4e54:	mov	r0, r5
    4e58:	bl	60c <read_partial_array>
    4e5c:	ldr	r4, [sp, #16]
    4e60:	ldr	r5, [sp, #20]
    4e64:	ldr	r6, [sp, #24]
    4e68:	ldr	r7, [sp, #28]
    4e6c:	ldr	lr, [sp, #12]
    4e70:	add	sp, sp, #32
    4e74:	bx	lr
    4e78:	.word	0x00000000
    4e7c:	.word	0x0000027e
    4e80:	.word	0x000006a4
    4e84:	.word	0x00000c22

00004e88 <coda_ascii_cursor_read_uint8_partial_array>:
    4e88:	mov	ip, sp
    4e8c:	sub	sp, sp, #32
    4e90:	str	ip, [sp, #8]
    4e94:	str	lr, [sp, #12]
    4e98:	str	r4, [sp, #16]
    4e9c:	str	r5, [sp, #20]
    4ea0:	str	r6, [sp, #24]
    4ea4:	str	r7, [sp, #28]
    4ea8:	mov	r6, r3
    4eac:	mov	r7, r2
    4eb0:	mov	r4, r1
    4eb4:	mov	r5, r0
    4eb8:	ldr	ip, [r5, #4]
    4ebc:	lsl	r0, ip, #4
    4ec0:	add	r1, r5, r0
    4ec4:	sub	lr, r1, #4096	; 0x1000
    4ec8:	ldr	ip, [lr, #4088]	; 0xff8
    4ecc:	ldr	r2, [ip]
    4ed0:	cmp	r2, #100	; 0x64
    4ed4:	blt	4ef4 <coda_ascii_cursor_read_uint8_partial_array+0x6c>
    4ed8:	ldr	r2, [r5, #4]
    4edc:	lsl	ip, r2, #4
    4ee0:	add	r2, r5, ip
    4ee4:	sub	lr, r2, #4096	; 0x1000
    4ee8:	ldr	r2, [lr, #4088]	; 0xff8
    4eec:	ldr	r0, [r2, #4]
    4ef0:	b	4f08 <coda_ascii_cursor_read_uint8_partial_array+0x80>
    4ef4:	ldr	r1, [r5, #4]
    4ef8:	lsl	r1, r1, #4
    4efc:	add	r0, r5, r1
    4f00:	sub	lr, r0, #4096	; 0x1000
    4f04:	ldr	r0, [lr, #4088]	; 0xff8
    4f08:	ldr	r3, [r0, #40]	; 0x28
    4f0c:	ldr	r3, [r3]
    4f10:	cmp	r3, #0
    4f14:	beq	4f2c <coda_ascii_cursor_read_uint8_partial_array+0xa4>
    4f18:	ldr	r0, [pc, #80]	; 4f70 <coda_ascii_cursor_read_uint8_partial_array+0xe8>
    4f1c:	ldr	r1, [pc, #80]	; 4f74 <coda_ascii_cursor_read_uint8_partial_array+0xec>
    4f20:	movw	r2, #1693	; 0x69d
    4f24:	ldr	r3, [pc, #64]	; 4f6c <coda_ascii_cursor_read_uint8_partial_array+0xe4>
    4f28:	bl	0 <__assert_fail>
    4f2c:	ldr	r1, [pc, #52]	; 4f68 <coda_ascii_cursor_read_uint8_partial_array+0xe0>
    4f30:	mov	r3, #1
    4f34:	str	r3, [sp, #4]
    4f38:	str	r6, [sp]
    4f3c:	mov	r3, r7
    4f40:	mov	r2, r4
    4f44:	mov	r0, r5
    4f48:	bl	60c <read_partial_array>
    4f4c:	ldr	r4, [sp, #16]
    4f50:	ldr	r5, [sp, #20]
    4f54:	ldr	r6, [sp, #24]
    4f58:	ldr	r7, [sp, #28]
    4f5c:	ldr	lr, [sp, #12]
    4f60:	add	sp, sp, #32
    4f64:	bx	lr
    4f68:	.word	0x00000000
    4f6c:	.word	0x00000c4c
    4f70:	.word	0x0000027e
    4f74:	.word	0x000006a4

00004f78 <coda_ascii_cursor_read_int16_partial_array>:
    4f78:	mov	ip, sp
    4f7c:	sub	sp, sp, #32
    4f80:	str	ip, [sp, #8]
    4f84:	str	lr, [sp, #12]
    4f88:	str	r4, [sp, #16]
    4f8c:	str	r5, [sp, #20]
    4f90:	str	r6, [sp, #24]
    4f94:	str	r7, [sp, #28]
    4f98:	mov	r6, r3
    4f9c:	mov	r7, r2
    4fa0:	mov	r4, r1
    4fa4:	mov	r5, r0
    4fa8:	ldr	ip, [r5, #4]
    4fac:	lsl	r0, ip, #4
    4fb0:	add	r1, r5, r0
    4fb4:	sub	lr, r1, #4096	; 0x1000
    4fb8:	ldr	ip, [lr, #4088]	; 0xff8
    4fbc:	ldr	r2, [ip]
    4fc0:	cmp	r2, #100	; 0x64
    4fc4:	blt	4fe4 <coda_ascii_cursor_read_int16_partial_array+0x6c>
    4fc8:	ldr	r2, [r5, #4]
    4fcc:	lsl	ip, r2, #4
    4fd0:	add	r2, r5, ip
    4fd4:	sub	lr, r2, #4096	; 0x1000
    4fd8:	ldr	r2, [lr, #4088]	; 0xff8
    4fdc:	ldr	r0, [r2, #4]
    4fe0:	b	4ff8 <coda_ascii_cursor_read_int16_partial_array+0x80>
    4fe4:	ldr	r1, [r5, #4]
    4fe8:	lsl	r1, r1, #4
    4fec:	add	r0, r5, r1
    4ff0:	sub	lr, r0, #4096	; 0x1000
    4ff4:	ldr	r0, [lr, #4088]	; 0xff8
    4ff8:	ldr	r3, [r0, #40]	; 0x28
    4ffc:	ldr	r3, [r3]
    5000:	cmp	r3, #0
    5004:	beq	501c <coda_ascii_cursor_read_int16_partial_array+0xa4>
    5008:	ldr	r0, [pc, #80]	; 5060 <coda_ascii_cursor_read_int16_partial_array+0xe8>
    500c:	ldr	r1, [pc, #80]	; 5064 <coda_ascii_cursor_read_int16_partial_array+0xec>
    5010:	movw	r2, #1702	; 0x6a6
    5014:	ldr	r3, [pc, #60]	; 5058 <coda_ascii_cursor_read_int16_partial_array+0xe0>
    5018:	bl	0 <__assert_fail>
    501c:	ldr	r1, [pc, #56]	; 505c <coda_ascii_cursor_read_int16_partial_array+0xe4>
    5020:	mov	r3, #2
    5024:	str	r3, [sp, #4]
    5028:	str	r6, [sp]
    502c:	mov	r3, r7
    5030:	mov	r2, r4
    5034:	mov	r0, r5
    5038:	bl	60c <read_partial_array>
    503c:	ldr	r4, [sp, #16]
    5040:	ldr	r5, [sp, #20]
    5044:	ldr	r6, [sp, #24]
    5048:	ldr	r7, [sp, #28]
    504c:	ldr	lr, [sp, #12]
    5050:	add	sp, sp, #32
    5054:	bx	lr
    5058:	.word	0x00000c77
    505c:	.word	0x00000000
    5060:	.word	0x0000027e
    5064:	.word	0x000006a4

00005068 <coda_ascii_cursor_read_uint16_partial_array>:
    5068:	mov	ip, sp
    506c:	sub	sp, sp, #32
    5070:	str	ip, [sp, #8]
    5074:	str	lr, [sp, #12]
    5078:	str	r4, [sp, #16]
    507c:	str	r5, [sp, #20]
    5080:	str	r6, [sp, #24]
    5084:	str	r7, [sp, #28]
    5088:	mov	r6, r3
    508c:	mov	r7, r2
    5090:	mov	r4, r1
    5094:	mov	r5, r0
    5098:	ldr	ip, [r5, #4]
    509c:	lsl	r0, ip, #4
    50a0:	add	r1, r5, r0
    50a4:	sub	lr, r1, #4096	; 0x1000
    50a8:	ldr	ip, [lr, #4088]	; 0xff8
    50ac:	ldr	r2, [ip]
    50b0:	cmp	r2, #100	; 0x64
    50b4:	blt	50d4 <coda_ascii_cursor_read_uint16_partial_array+0x6c>
    50b8:	ldr	r2, [r5, #4]
    50bc:	lsl	ip, r2, #4
    50c0:	add	r2, r5, ip
    50c4:	sub	lr, r2, #4096	; 0x1000
    50c8:	ldr	r2, [lr, #4088]	; 0xff8
    50cc:	ldr	r0, [r2, #4]
    50d0:	b	50e8 <coda_ascii_cursor_read_uint16_partial_array+0x80>
    50d4:	ldr	r1, [r5, #4]
    50d8:	lsl	r1, r1, #4
    50dc:	add	r0, r5, r1
    50e0:	sub	lr, r0, #4096	; 0x1000
    50e4:	ldr	r0, [lr, #4088]	; 0xff8
    50e8:	ldr	r3, [r0, #40]	; 0x28
    50ec:	ldr	r3, [r3]
    50f0:	cmp	r3, #0
    50f4:	beq	510c <coda_ascii_cursor_read_uint16_partial_array+0xa4>
    50f8:	ldr	r0, [pc, #80]	; 5150 <coda_ascii_cursor_read_uint16_partial_array+0xe8>
    50fc:	ldr	r1, [pc, #80]	; 5154 <coda_ascii_cursor_read_uint16_partial_array+0xec>
    5100:	movw	r2, #1711	; 0x6af
    5104:	ldr	r3, [pc, #60]	; 5148 <coda_ascii_cursor_read_uint16_partial_array+0xe0>
    5108:	bl	0 <__assert_fail>
    510c:	ldr	r1, [pc, #56]	; 514c <coda_ascii_cursor_read_uint16_partial_array+0xe4>
    5110:	mov	r3, #2
    5114:	str	r3, [sp, #4]
    5118:	str	r6, [sp]
    511c:	mov	r3, r7
    5120:	mov	r2, r4
    5124:	mov	r0, r5
    5128:	bl	60c <read_partial_array>
    512c:	ldr	r4, [sp, #16]
    5130:	ldr	r5, [sp, #20]
    5134:	ldr	r6, [sp, #24]
    5138:	ldr	r7, [sp, #28]
    513c:	ldr	lr, [sp, #12]
    5140:	add	sp, sp, #32
    5144:	bx	lr
    5148:	.word	0x00000ca2
    514c:	.word	0x00000000
    5150:	.word	0x0000027e
    5154:	.word	0x000006a4

00005158 <coda_ascii_cursor_read_int32_partial_array>:
    5158:	mov	ip, sp
    515c:	sub	sp, sp, #32
    5160:	str	ip, [sp, #8]
    5164:	str	lr, [sp, #12]
    5168:	str	r4, [sp, #16]
    516c:	str	r5, [sp, #20]
    5170:	str	r6, [sp, #24]
    5174:	str	r7, [sp, #28]
    5178:	mov	r6, r3
    517c:	mov	r7, r2
    5180:	mov	r4, r1
    5184:	mov	r5, r0
    5188:	ldr	ip, [r5, #4]
    518c:	lsl	r0, ip, #4
    5190:	add	r1, r5, r0
    5194:	sub	lr, r1, #4096	; 0x1000
    5198:	ldr	ip, [lr, #4088]	; 0xff8
    519c:	ldr	r2, [ip]
    51a0:	cmp	r2, #100	; 0x64
    51a4:	blt	51c4 <coda_ascii_cursor_read_int32_partial_array+0x6c>
    51a8:	ldr	r2, [r5, #4]
    51ac:	lsl	ip, r2, #4
    51b0:	add	r2, r5, ip
    51b4:	sub	lr, r2, #4096	; 0x1000
    51b8:	ldr	r2, [lr, #4088]	; 0xff8
    51bc:	ldr	r0, [r2, #4]
    51c0:	b	51d8 <coda_ascii_cursor_read_int32_partial_array+0x80>
    51c4:	ldr	r1, [r5, #4]
    51c8:	lsl	r1, r1, #4
    51cc:	add	r0, r5, r1
    51d0:	sub	lr, r0, #4096	; 0x1000
    51d4:	ldr	r0, [lr, #4088]	; 0xff8
    51d8:	ldr	r3, [r0, #40]	; 0x28
    51dc:	ldr	r3, [r3]
    51e0:	cmp	r3, #0
    51e4:	beq	51fc <coda_ascii_cursor_read_int32_partial_array+0xa4>
    51e8:	ldr	r0, [pc, #80]	; 5240 <coda_ascii_cursor_read_int32_partial_array+0xe8>
    51ec:	ldr	r1, [pc, #80]	; 5244 <coda_ascii_cursor_read_int32_partial_array+0xec>
    51f0:	movw	r2, #1720	; 0x6b8
    51f4:	ldr	r3, [pc, #64]	; 523c <coda_ascii_cursor_read_int32_partial_array+0xe4>
    51f8:	bl	0 <__assert_fail>
    51fc:	ldr	r1, [pc, #52]	; 5238 <coda_ascii_cursor_read_int32_partial_array+0xe0>
    5200:	mov	r3, #4
    5204:	str	r3, [sp, #4]
    5208:	str	r6, [sp]
    520c:	mov	r3, r7
    5210:	mov	r2, r4
    5214:	mov	r0, r5
    5218:	bl	60c <read_partial_array>
    521c:	ldr	r4, [sp, #16]
    5220:	ldr	r5, [sp, #20]
    5224:	ldr	r6, [sp, #24]
    5228:	ldr	r7, [sp, #28]
    522c:	ldr	lr, [sp, #12]
    5230:	add	sp, sp, #32
    5234:	bx	lr
    5238:	.word	0x00000000
    523c:	.word	0x00000cce
    5240:	.word	0x0000027e
    5244:	.word	0x000006a4

00005248 <coda_ascii_cursor_read_uint32_partial_array>:
    5248:	mov	ip, sp
    524c:	sub	sp, sp, #32
    5250:	str	ip, [sp, #8]
    5254:	str	lr, [sp, #12]
    5258:	str	r4, [sp, #16]
    525c:	str	r5, [sp, #20]
    5260:	str	r6, [sp, #24]
    5264:	str	r7, [sp, #28]
    5268:	mov	r6, r3
    526c:	mov	r7, r2
    5270:	mov	r4, r1
    5274:	mov	r5, r0
    5278:	ldr	ip, [r5, #4]
    527c:	lsl	r0, ip, #4
    5280:	add	r1, r5, r0
    5284:	sub	lr, r1, #4096	; 0x1000
    5288:	ldr	ip, [lr, #4088]	; 0xff8
    528c:	ldr	r2, [ip]
    5290:	cmp	r2, #100	; 0x64
    5294:	blt	52b4 <coda_ascii_cursor_read_uint32_partial_array+0x6c>
    5298:	ldr	r2, [r5, #4]
    529c:	lsl	ip, r2, #4
    52a0:	add	r2, r5, ip
    52a4:	sub	lr, r2, #4096	; 0x1000
    52a8:	ldr	r2, [lr, #4088]	; 0xff8
    52ac:	ldr	r0, [r2, #4]
    52b0:	b	52c8 <coda_ascii_cursor_read_uint32_partial_array+0x80>
    52b4:	ldr	r1, [r5, #4]
    52b8:	lsl	r1, r1, #4
    52bc:	add	r0, r5, r1
    52c0:	sub	lr, r0, #4096	; 0x1000
    52c4:	ldr	r0, [lr, #4088]	; 0xff8
    52c8:	ldr	r3, [r0, #40]	; 0x28
    52cc:	ldr	r3, [r3]
    52d0:	cmp	r3, #0
    52d4:	beq	52ec <coda_ascii_cursor_read_uint32_partial_array+0xa4>
    52d8:	ldr	r0, [pc, #80]	; 5330 <coda_ascii_cursor_read_uint32_partial_array+0xe8>
    52dc:	ldr	r1, [pc, #80]	; 5334 <coda_ascii_cursor_read_uint32_partial_array+0xec>
    52e0:	movw	r2, #1729	; 0x6c1
    52e4:	ldr	r3, [pc, #64]	; 532c <coda_ascii_cursor_read_uint32_partial_array+0xe4>
    52e8:	bl	0 <__assert_fail>
    52ec:	ldr	r1, [pc, #52]	; 5328 <coda_ascii_cursor_read_uint32_partial_array+0xe0>
    52f0:	mov	r3, #4
    52f4:	str	r3, [sp, #4]
    52f8:	str	r6, [sp]
    52fc:	mov	r3, r7
    5300:	mov	r2, r4
    5304:	mov	r0, r5
    5308:	bl	60c <read_partial_array>
    530c:	ldr	r4, [sp, #16]
    5310:	ldr	r5, [sp, #20]
    5314:	ldr	r6, [sp, #24]
    5318:	ldr	r7, [sp, #28]
    531c:	ldr	lr, [sp, #12]
    5320:	add	sp, sp, #32
    5324:	bx	lr
    5328:	.word	0x00000000
    532c:	.word	0x00000cf9
    5330:	.word	0x0000027e
    5334:	.word	0x000006a4

00005338 <coda_ascii_cursor_read_int64_partial_array>:
    5338:	mov	ip, sp
    533c:	sub	sp, sp, #32
    5340:	str	ip, [sp, #8]
    5344:	str	lr, [sp, #12]
    5348:	str	r4, [sp, #16]
    534c:	str	r5, [sp, #20]
    5350:	str	r6, [sp, #24]
    5354:	str	r7, [sp, #28]
    5358:	mov	r6, r3
    535c:	mov	r7, r2
    5360:	mov	r4, r1
    5364:	mov	r5, r0
    5368:	ldr	ip, [r5, #4]
    536c:	lsl	r0, ip, #4
    5370:	add	r1, r5, r0
    5374:	sub	lr, r1, #4096	; 0x1000
    5378:	ldr	ip, [lr, #4088]	; 0xff8
    537c:	ldr	r2, [ip]
    5380:	cmp	r2, #100	; 0x64
    5384:	blt	53a4 <coda_ascii_cursor_read_int64_partial_array+0x6c>
    5388:	ldr	r2, [r5, #4]
    538c:	lsl	ip, r2, #4
    5390:	add	r2, r5, ip
    5394:	sub	lr, r2, #4096	; 0x1000
    5398:	ldr	r2, [lr, #4088]	; 0xff8
    539c:	ldr	r0, [r2, #4]
    53a0:	b	53b8 <coda_ascii_cursor_read_int64_partial_array+0x80>
    53a4:	ldr	r1, [r5, #4]
    53a8:	lsl	r1, r1, #4
    53ac:	add	r0, r5, r1
    53b0:	sub	lr, r0, #4096	; 0x1000
    53b4:	ldr	r0, [lr, #4088]	; 0xff8
    53b8:	ldr	r3, [r0, #40]	; 0x28
    53bc:	ldr	r3, [r3]
    53c0:	cmp	r3, #0
    53c4:	beq	53dc <coda_ascii_cursor_read_int64_partial_array+0xa4>
    53c8:	ldr	r0, [pc, #80]	; 5420 <coda_ascii_cursor_read_int64_partial_array+0xe8>
    53cc:	ldr	r1, [pc, #80]	; 5424 <coda_ascii_cursor_read_int64_partial_array+0xec>
    53d0:	movw	r2, #1738	; 0x6ca
    53d4:	ldr	r3, [pc, #64]	; 541c <coda_ascii_cursor_read_int64_partial_array+0xe4>
    53d8:	bl	0 <__assert_fail>
    53dc:	ldr	r1, [pc, #52]	; 5418 <coda_ascii_cursor_read_int64_partial_array+0xe0>
    53e0:	mov	r3, #8
    53e4:	str	r3, [sp, #4]
    53e8:	str	r6, [sp]
    53ec:	mov	r3, r7
    53f0:	mov	r2, r4
    53f4:	mov	r0, r5
    53f8:	bl	60c <read_partial_array>
    53fc:	ldr	r4, [sp, #16]
    5400:	ldr	r5, [sp, #20]
    5404:	ldr	r6, [sp, #24]
    5408:	ldr	r7, [sp, #28]
    540c:	ldr	lr, [sp, #12]
    5410:	add	sp, sp, #32
    5414:	bx	lr
    5418:	.word	0x00000000
    541c:	.word	0x00000d25
    5420:	.word	0x0000027e
    5424:	.word	0x000006a4

00005428 <coda_ascii_cursor_read_uint64_partial_array>:
    5428:	mov	ip, sp
    542c:	sub	sp, sp, #32
    5430:	str	ip, [sp, #8]
    5434:	str	lr, [sp, #12]
    5438:	str	r4, [sp, #16]
    543c:	str	r5, [sp, #20]
    5440:	str	r6, [sp, #24]
    5444:	str	r7, [sp, #28]
    5448:	mov	r6, r3
    544c:	mov	r7, r2
    5450:	mov	r4, r1
    5454:	mov	r5, r0
    5458:	ldr	ip, [r5, #4]
    545c:	lsl	r0, ip, #4
    5460:	add	r1, r5, r0
    5464:	sub	lr, r1, #4096	; 0x1000
    5468:	ldr	ip, [lr, #4088]	; 0xff8
    546c:	ldr	r2, [ip]
    5470:	cmp	r2, #100	; 0x64
    5474:	blt	5494 <coda_ascii_cursor_read_uint64_partial_array+0x6c>
    5478:	ldr	r2, [r5, #4]
    547c:	lsl	ip, r2, #4
    5480:	add	r2, r5, ip
    5484:	sub	lr, r2, #4096	; 0x1000
    5488:	ldr	r2, [lr, #4088]	; 0xff8
    548c:	ldr	r0, [r2, #4]
    5490:	b	54a8 <coda_ascii_cursor_read_uint64_partial_array+0x80>
    5494:	ldr	r1, [r5, #4]
    5498:	lsl	r1, r1, #4
    549c:	add	r0, r5, r1
    54a0:	sub	lr, r0, #4096	; 0x1000
    54a4:	ldr	r0, [lr, #4088]	; 0xff8
    54a8:	ldr	r3, [r0, #40]	; 0x28
    54ac:	ldr	r3, [r3]
    54b0:	cmp	r3, #0
    54b4:	beq	54cc <coda_ascii_cursor_read_uint64_partial_array+0xa4>
    54b8:	ldr	r0, [pc, #80]	; 5510 <coda_ascii_cursor_read_uint64_partial_array+0xe8>
    54bc:	ldr	r1, [pc, #80]	; 5514 <coda_ascii_cursor_read_uint64_partial_array+0xec>
    54c0:	movw	r2, #1747	; 0x6d3
    54c4:	ldr	r3, [pc, #60]	; 5508 <coda_ascii_cursor_read_uint64_partial_array+0xe0>
    54c8:	bl	0 <__assert_fail>
    54cc:	ldr	r1, [pc, #56]	; 550c <coda_ascii_cursor_read_uint64_partial_array+0xe4>
    54d0:	mov	r3, #8
    54d4:	str	r3, [sp, #4]
    54d8:	str	r6, [sp]
    54dc:	mov	r3, r7
    54e0:	mov	r2, r4
    54e4:	mov	r0, r5
    54e8:	bl	60c <read_partial_array>
    54ec:	ldr	r4, [sp, #16]
    54f0:	ldr	r5, [sp, #20]
    54f4:	ldr	r6, [sp, #24]
    54f8:	ldr	r7, [sp, #28]
    54fc:	ldr	lr, [sp, #12]
    5500:	add	sp, sp, #32
    5504:	bx	lr
    5508:	.word	0x00000d50
    550c:	.word	0x00000000
    5510:	.word	0x0000027e
    5514:	.word	0x000006a4

00005518 <coda_ascii_cursor_read_float_partial_array>:
    5518:	mov	ip, sp
    551c:	sub	sp, sp, #32
    5520:	str	ip, [sp, #8]
    5524:	str	lr, [sp, #12]
    5528:	str	r4, [sp, #16]
    552c:	str	r5, [sp, #20]
    5530:	str	r6, [sp, #24]
    5534:	str	r7, [sp, #28]
    5538:	mov	r6, r3
    553c:	mov	r7, r2
    5540:	mov	r4, r1
    5544:	mov	r5, r0
    5548:	ldr	ip, [r5, #4]
    554c:	lsl	r0, ip, #4
    5550:	add	r1, r5, r0
    5554:	sub	lr, r1, #4096	; 0x1000
    5558:	ldr	ip, [lr, #4088]	; 0xff8
    555c:	ldr	r2, [ip]
    5560:	cmp	r2, #100	; 0x64
    5564:	blt	5584 <coda_ascii_cursor_read_float_partial_array+0x6c>
    5568:	ldr	r2, [r5, #4]
    556c:	lsl	ip, r2, #4
    5570:	add	r2, r5, ip
    5574:	sub	lr, r2, #4096	; 0x1000
    5578:	ldr	r2, [lr, #4088]	; 0xff8
    557c:	ldr	r0, [r2, #4]
    5580:	b	5598 <coda_ascii_cursor_read_float_partial_array+0x80>
    5584:	ldr	r1, [r5, #4]
    5588:	lsl	r1, r1, #4
    558c:	add	r0, r5, r1
    5590:	sub	lr, r0, #4096	; 0x1000
    5594:	ldr	r0, [lr, #4088]	; 0xff8
    5598:	ldr	r3, [r0, #40]	; 0x28
    559c:	ldr	r3, [r3]
    55a0:	cmp	r3, #0
    55a4:	beq	55bc <coda_ascii_cursor_read_float_partial_array+0xa4>
    55a8:	ldr	r0, [pc, #76]	; 55fc <coda_ascii_cursor_read_float_partial_array+0xe4>
    55ac:	ldr	r1, [pc, #80]	; 5604 <coda_ascii_cursor_read_float_partial_array+0xec>
    55b0:	movw	r2, #1756	; 0x6dc
    55b4:	ldr	r3, [pc, #60]	; 55f8 <coda_ascii_cursor_read_float_partial_array+0xe0>
    55b8:	bl	0 <__assert_fail>
    55bc:	ldr	r1, [pc, #60]	; 5600 <coda_ascii_cursor_read_float_partial_array+0xe8>
    55c0:	mov	r3, #4
    55c4:	str	r3, [sp, #4]
    55c8:	str	r6, [sp]
    55cc:	mov	r3, r7
    55d0:	mov	r2, r4
    55d4:	mov	r0, r5
    55d8:	bl	60c <read_partial_array>
    55dc:	ldr	r4, [sp, #16]
    55e0:	ldr	r5, [sp, #20]
    55e4:	ldr	r6, [sp, #24]
    55e8:	ldr	r7, [sp, #28]
    55ec:	ldr	lr, [sp, #12]
    55f0:	add	sp, sp, #32
    55f4:	bx	lr
    55f8:	.word	0x00000d7c
    55fc:	.word	0x0000027e
    5600:	.word	0x00000000
    5604:	.word	0x000006a4

00005608 <coda_ascii_cursor_read_double_partial_array>:
    5608:	mov	ip, sp
    560c:	sub	sp, sp, #32
    5610:	str	ip, [sp, #8]
    5614:	str	lr, [sp, #12]
    5618:	str	r4, [sp, #16]
    561c:	str	r5, [sp, #20]
    5620:	str	r6, [sp, #24]
    5624:	str	r7, [sp, #28]
    5628:	mov	r6, r3
    562c:	mov	r7, r2
    5630:	mov	r4, r1
    5634:	mov	r5, r0
    5638:	ldr	ip, [r5, #4]
    563c:	lsl	r0, ip, #4
    5640:	add	r1, r5, r0
    5644:	sub	lr, r1, #4096	; 0x1000
    5648:	ldr	ip, [lr, #4088]	; 0xff8
    564c:	ldr	r2, [ip]
    5650:	cmp	r2, #100	; 0x64
    5654:	blt	5674 <coda_ascii_cursor_read_double_partial_array+0x6c>
    5658:	ldr	r2, [r5, #4]
    565c:	lsl	ip, r2, #4
    5660:	add	r2, r5, ip
    5664:	sub	lr, r2, #4096	; 0x1000
    5668:	ldr	r2, [lr, #4088]	; 0xff8
    566c:	ldr	r0, [r2, #4]
    5670:	b	5688 <coda_ascii_cursor_read_double_partial_array+0x80>
    5674:	ldr	r1, [r5, #4]
    5678:	lsl	r1, r1, #4
    567c:	add	r0, r5, r1
    5680:	sub	lr, r0, #4096	; 0x1000
    5684:	ldr	r0, [lr, #4088]	; 0xff8
    5688:	ldr	r3, [r0, #40]	; 0x28
    568c:	ldr	r3, [r3]
    5690:	cmp	r3, #0
    5694:	beq	56ac <coda_ascii_cursor_read_double_partial_array+0xa4>
    5698:	ldr	r0, [pc, #76]	; 56ec <coda_ascii_cursor_read_double_partial_array+0xe4>
    569c:	ldr	r1, [pc, #76]	; 56f0 <coda_ascii_cursor_read_double_partial_array+0xe8>
    56a0:	movw	r2, #1765	; 0x6e5
    56a4:	ldr	r3, [pc, #60]	; 56e8 <coda_ascii_cursor_read_double_partial_array+0xe0>
    56a8:	bl	0 <__assert_fail>
    56ac:	ldr	r1, [pc, #64]	; 56f4 <coda_ascii_cursor_read_double_partial_array+0xec>
    56b0:	mov	r3, #8
    56b4:	str	r3, [sp, #4]
    56b8:	str	r6, [sp]
    56bc:	mov	r3, r7
    56c0:	mov	r2, r4
    56c4:	mov	r0, r5
    56c8:	bl	60c <read_partial_array>
    56cc:	ldr	r4, [sp, #16]
    56d0:	ldr	r5, [sp, #20]
    56d4:	ldr	r6, [sp, #24]
    56d8:	ldr	r7, [sp, #28]
    56dc:	ldr	lr, [sp, #12]
    56e0:	add	sp, sp, #32
    56e4:	bx	lr
    56e8:	.word	0x00000da7
    56ec:	.word	0x0000027e
    56f0:	.word	0x000006a4
    56f4:	.word	0x00000000

000056f8 <coda_ascii_cursor_read_char_partial_array>:
    56f8:	mov	ip, sp
    56fc:	sub	sp, sp, #32
    5700:	str	ip, [sp, #8]
    5704:	str	lr, [sp, #12]
    5708:	str	r4, [sp, #16]
    570c:	str	r5, [sp, #20]
    5710:	str	r6, [sp, #24]
    5714:	str	r7, [sp, #28]
    5718:	mov	r6, r3
    571c:	mov	r7, r2
    5720:	mov	r4, r1
    5724:	mov	r5, r0
    5728:	ldr	ip, [r5, #4]
    572c:	lsl	r0, ip, #4
    5730:	add	r1, r5, r0
    5734:	sub	lr, r1, #4096	; 0x1000
    5738:	ldr	ip, [lr, #4088]	; 0xff8
    573c:	ldr	r2, [ip]
    5740:	cmp	r2, #100	; 0x64
    5744:	blt	5764 <coda_ascii_cursor_read_char_partial_array+0x6c>
    5748:	ldr	r2, [r5, #4]
    574c:	lsl	ip, r2, #4
    5750:	add	r2, r5, ip
    5754:	sub	lr, r2, #4096	; 0x1000
    5758:	ldr	r2, [lr, #4088]	; 0xff8
    575c:	ldr	r0, [r2, #4]
    5760:	b	5778 <coda_ascii_cursor_read_char_partial_array+0x80>
    5764:	ldr	r1, [r5, #4]
    5768:	lsl	r1, r1, #4
    576c:	add	r0, r5, r1
    5770:	sub	lr, r0, #4096	; 0x1000
    5774:	ldr	r0, [lr, #4088]	; 0xff8
    5778:	ldr	r3, [r0, #40]	; 0x28
    577c:	ldr	r3, [r3]
    5780:	cmp	r3, #0
    5784:	beq	579c <coda_ascii_cursor_read_char_partial_array+0xa4>
    5788:	ldr	r0, [pc, #80]	; 57e0 <coda_ascii_cursor_read_char_partial_array+0xe8>
    578c:	ldr	r1, [pc, #80]	; 57e4 <coda_ascii_cursor_read_char_partial_array+0xec>
    5790:	movw	r2, #1774	; 0x6ee
    5794:	ldr	r3, [pc, #64]	; 57dc <coda_ascii_cursor_read_char_partial_array+0xe4>
    5798:	bl	0 <__assert_fail>
    579c:	ldr	r1, [pc, #52]	; 57d8 <coda_ascii_cursor_read_char_partial_array+0xe0>
    57a0:	mov	r3, #1
    57a4:	str	r3, [sp, #4]
    57a8:	str	r6, [sp]
    57ac:	mov	r3, r7
    57b0:	mov	r2, r4
    57b4:	mov	r0, r5
    57b8:	bl	60c <read_partial_array>
    57bc:	ldr	r4, [sp, #16]
    57c0:	ldr	r5, [sp, #20]
    57c4:	ldr	r6, [sp, #24]
    57c8:	ldr	r7, [sp, #28]
    57cc:	ldr	lr, [sp, #12]
    57d0:	add	sp, sp, #32
    57d4:	bx	lr
    57d8:	.word	0x00000000
    57dc:	.word	0x00000dd3
    57e0:	.word	0x0000027e
    57e4:	.word	0x000006a4
