
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-yaml.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_yaml_data>:
   0:	push	{r4, sl, fp, lr}
   4:	add	fp, sp, #8
   8:	sub	sp, sp, #528	; 0x210
   c:	movw	r1, #0
  10:	movw	r4, #0
  14:	movt	r1, #0
  18:	movt	r4, #0
  1c:	str	r0, [r1]
  20:	ldr	r0, [r4]
  24:	sub	r1, fp, #12
  28:	bl	0 <coda_open>
  2c:	cmp	r0, #0
  30:	beq	70 <print_yaml_data+0x70>
  34:	bl	0 <coda_get_errno>
  38:	ldr	r0, [r0]
  3c:	cmn	r0, #21
  40:	bne	6c <print_yaml_data+0x6c>
  44:	mov	r0, #0
  48:	bl	0 <coda_set_option_use_mmap>
  4c:	ldr	r0, [r4]
  50:	sub	r1, fp, #12
  54:	bl	0 <coda_open>
  58:	mov	r4, r0
  5c:	mov	r0, #1
  60:	bl	0 <coda_set_option_use_mmap>
  64:	cmp	r4, #0
  68:	beq	70 <print_yaml_data+0x70>
  6c:	bl	0 <handle_coda_error>
  70:	ldr	r1, [fp, #-12]
  74:	mov	r0, sp
  78:	bl	0 <coda_cursor_set_product>
  7c:	cmp	r0, #0
  80:	beq	88 <print_yaml_data+0x88>
  84:	bl	0 <handle_coda_error>
  88:	movw	r0, #0
  8c:	movt	r0, #0
  90:	ldr	r1, [r0]
  94:	cmp	r1, #0
  98:	beq	b0 <print_yaml_data+0xb0>
  9c:	mov	r0, sp
  a0:	bl	0 <coda_cursor_goto>
  a4:	cmp	r0, #0
  a8:	beq	b0 <print_yaml_data+0xb0>
  ac:	bl	0 <handle_coda_error>
  b0:	mov	r0, #0
  b4:	bl	0 <coda_set_option_perform_boundary_checks>
  b8:	mov	r0, sp
  bc:	mov	r1, #0
  c0:	bl	d4 <print_data>
  c4:	ldr	r0, [fp, #-12]
  c8:	bl	0 <coda_close>
  cc:	sub	sp, fp, #8
  d0:	pop	{r4, sl, fp, pc}

000000d4 <print_data>:
  d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  d8:	add	fp, sp, #28
  dc:	sub	sp, sp, #76	; 0x4c
  e0:	mov	r9, r0
  e4:	mov	r0, #0
  e8:	movw	sl, #0
  ec:	mov	r5, r1
  f0:	str	r0, [fp, #-36]	; 0xffffffdc
  f4:	movw	r0, #0
  f8:	movt	sl, #0
  fc:	movt	r0, #0
 100:	ldr	r0, [r0]
 104:	cmp	r0, #0
 108:	beq	1e8 <print_data+0x114>
 10c:	sub	r1, fp, #36	; 0x24
 110:	mov	r0, r9
 114:	bl	0 <coda_cursor_has_attributes>
 118:	cmp	r0, #0
 11c:	beq	124 <print_data+0x50>
 120:	bl	0 <handle_coda_error>
 124:	ldr	r0, [fp, #-36]	; 0xffffffdc
 128:	cmp	r0, #0
 12c:	beq	1e8 <print_data+0x114>
 130:	cmp	r5, #0
 134:	beq	184 <print_data+0xb0>
 138:	movw	r0, #0
 13c:	movt	r0, #0
 140:	bl	b04 <ff_printf>
 144:	ldr	r4, [sl]
 148:	cmp	r4, #0
 14c:	bmi	ae4 <print_data+0xa10>
 150:	beq	184 <print_data+0xb0>
 154:	movw	r7, #0
 158:	movw	r6, #0
 15c:	movt	r7, #0
 160:	movt	r6, #0
 164:	ldr	r3, [r7]
 168:	mov	r0, r6
 16c:	mov	r1, #2
 170:	mov	r2, #1
 174:	bl	0 <fwrite>
 178:	sub	r4, r4, #1
 17c:	cmp	r4, #0
 180:	bgt	164 <print_data+0x90>
 184:	movw	r0, #0
 188:	movt	r0, #0
 18c:	bl	b04 <ff_printf>
 190:	mov	r0, r9
 194:	bl	0 <coda_cursor_goto_attributes>
 198:	cmp	r0, #0
 19c:	beq	1a4 <print_data+0xd0>
 1a0:	bl	0 <handle_coda_error>
 1a4:	ldr	r0, [sl]
 1a8:	mov	r1, #1
 1ac:	add	r0, r0, #1
 1b0:	str	r0, [sl]
 1b4:	mov	r0, r9
 1b8:	bl	d4 <print_data>
 1bc:	ldr	r0, [sl]
 1c0:	sub	r0, r0, #1
 1c4:	str	r0, [sl]
 1c8:	mov	r0, r9
 1cc:	bl	0 <coda_cursor_goto_parent>
 1d0:	movw	r0, #0
 1d4:	movt	r0, #0
 1d8:	bl	b4c <fi_printf>
 1dc:	ldr	r0, [sl]
 1e0:	add	r0, r0, #1
 1e4:	str	r0, [sl]
 1e8:	sub	r1, fp, #32
 1ec:	mov	r0, r9
 1f0:	bl	0 <coda_cursor_get_type_class>
 1f4:	cmp	r0, #0
 1f8:	beq	200 <print_data+0x12c>
 1fc:	bl	0 <handle_coda_error>
 200:	ldr	r0, [fp, #-32]	; 0xffffffe0
 204:	cmp	r0, #6
 208:	bhi	a94 <print_data+0x9c0>
 20c:	add	r1, pc, #0
 210:	ldr	pc, [r1, r0, lsl #2]
 214:	.word	0x000002c4
 218:	.word	0x00000400
 21c:	.word	0x00000230
 220:	.word	0x00000230
 224:	.word	0x00000230
 228:	.word	0x00000230
 22c:	.word	0x00000444
 230:	sub	r1, fp, #40	; 0x28
 234:	mov	r0, r9
 238:	bl	0 <coda_cursor_get_read_type>
 23c:	cmp	r0, #0
 240:	beq	248 <print_data+0x174>
 244:	bl	0 <handle_coda_error>
 248:	ldr	r0, [fp, #-40]	; 0xffffffd8
 24c:	add	r0, r0, #1
 250:	cmp	r0, #13
 254:	bhi	a94 <print_data+0x9c0>
 258:	add	r1, pc, #0
 25c:	ldr	pc, [r1, r0, lsl #2]
 260:	.word	0x00000480
 264:	.word	0x00000298
 268:	.word	0x0000048c
 26c:	.word	0x00000298
 270:	.word	0x0000048c
 274:	.word	0x00000298
 278:	.word	0x0000048c
 27c:	.word	0x000005ec
 280:	.word	0x0000061c
 284:	.word	0x000004b8
 288:	.word	0x000004b8
 28c:	.word	0x00000504
 290:	.word	0x00000540
 294:	.word	0x0000065c
 298:	add	r1, sp, #16
 29c:	mov	r0, r9
 2a0:	bl	0 <coda_cursor_read_int32>
 2a4:	cmp	r0, #0
 2a8:	beq	2b0 <print_data+0x1dc>
 2ac:	bl	0 <handle_coda_error>
 2b0:	ldr	r1, [sp, #16]
 2b4:	movw	r0, #0
 2b8:	movt	r0, #0
 2bc:	bl	b04 <ff_printf>
 2c0:	b	a94 <print_data+0x9c0>
 2c4:	add	r1, sp, #16
 2c8:	mov	r0, r9
 2cc:	bl	0 <coda_cursor_get_num_elements>
 2d0:	cmp	r0, #0
 2d4:	beq	2dc <print_data+0x208>
 2d8:	bl	0 <handle_coda_error>
 2dc:	ldr	r0, [sp, #16]
 2e0:	cmp	r0, #1
 2e4:	blt	4f8 <print_data+0x424>
 2e8:	cmp	r5, #0
 2ec:	movwne	r0, #0
 2f0:	movtne	r0, #0
 2f4:	blne	b04 <ff_printf>
 2f8:	add	r1, sp, #8
 2fc:	mov	r0, r9
 300:	bl	0 <coda_cursor_get_type>
 304:	cmp	r0, #0
 308:	beq	310 <print_data+0x23c>
 30c:	bl	0 <handle_coda_error>
 310:	ldr	r0, [sp, #8]
 314:	sub	r1, fp, #40	; 0x28
 318:	bl	0 <coda_type_get_record_union_status>
 31c:	cmp	r0, #0
 320:	beq	328 <print_data+0x254>
 324:	bl	0 <handle_coda_error>
 328:	ldr	r0, [fp, #-40]	; 0xffffffd8
 32c:	cmp	r0, #0
 330:	beq	724 <print_data+0x650>
 334:	sub	r1, fp, #44	; 0x2c
 338:	mov	r0, r9
 33c:	bl	0 <coda_cursor_get_available_union_field_index>
 340:	cmp	r0, #0
 344:	beq	34c <print_data+0x278>
 348:	bl	0 <handle_coda_error>
 34c:	ldr	r1, [fp, #-44]	; 0xffffffd4
 350:	ldr	r0, [sp, #8]
 354:	sub	r2, fp, #48	; 0x30
 358:	bl	0 <coda_type_get_record_field_name>
 35c:	cmp	r0, #0
 360:	beq	368 <print_data+0x294>
 364:	bl	0 <handle_coda_error>
 368:	ldr	r1, [fp, #-44]	; 0xffffffd4
 36c:	mov	r0, r9
 370:	bl	0 <coda_cursor_goto_record_field_by_index>
 374:	cmp	r0, #0
 378:	beq	380 <print_data+0x2ac>
 37c:	bl	0 <handle_coda_error>
 380:	cmp	r5, #0
 384:	beq	3c8 <print_data+0x2f4>
 388:	ldr	r4, [sl]
 38c:	cmp	r4, #0
 390:	bmi	ae4 <print_data+0xa10>
 394:	beq	3c8 <print_data+0x2f4>
 398:	movw	r6, #0
 39c:	movw	r5, #0
 3a0:	movt	r6, #0
 3a4:	movt	r5, #0
 3a8:	ldr	r3, [r6]
 3ac:	mov	r0, r5
 3b0:	mov	r1, #2
 3b4:	mov	r2, #1
 3b8:	bl	0 <fwrite>
 3bc:	sub	r4, r4, #1
 3c0:	cmp	r4, #0
 3c4:	bgt	3a8 <print_data+0x2d4>
 3c8:	ldr	r1, [fp, #-48]	; 0xffffffd0
 3cc:	movw	r0, #0
 3d0:	movt	r0, #0
 3d4:	bl	b04 <ff_printf>
 3d8:	ldr	r0, [sl]
 3dc:	mov	r1, #1
 3e0:	add	r0, r0, #1
 3e4:	str	r0, [sl]
 3e8:	mov	r0, r9
 3ec:	bl	d4 <print_data>
 3f0:	ldr	r0, [sl]
 3f4:	sub	r0, r0, #1
 3f8:	str	r0, [sl]
 3fc:	b	a7c <print_data+0x9a8>
 400:	add	r4, sp, #16
 404:	add	r1, sp, #8
 408:	mov	r0, r9
 40c:	mov	r2, r4
 410:	bl	0 <coda_cursor_get_array_dim>
 414:	cmp	r0, #0
 418:	beq	420 <print_data+0x34c>
 41c:	bl	0 <handle_coda_error>
 420:	ldr	r0, [sp, #8]
 424:	cmp	r0, #0
 428:	bmi	a88 <print_data+0x9b4>
 42c:	beq	864 <print_data+0x790>
 430:	cmp	r0, #4
 434:	bcs	914 <print_data+0x840>
 438:	mov	lr, #0
 43c:	mov	r6, #1
 440:	b	9cc <print_data+0x8f8>
 444:	sub	r1, fp, #40	; 0x28
 448:	mov	r0, r9
 44c:	bl	0 <coda_cursor_get_special_type>
 450:	cmp	r0, #0
 454:	beq	45c <print_data+0x388>
 458:	bl	0 <handle_coda_error>
 45c:	ldr	r0, [fp, #-40]	; 0xffffffd8
 460:	cmp	r0, #3
 464:	bhi	a94 <print_data+0x9c0>
 468:	add	r1, pc, #0
 46c:	ldr	pc, [r1, r0, lsl #2]
 470:	.word	0x00000480
 474:	.word	0x000008e4
 478:	.word	0x0000086c
 47c:	.word	0x000008ac
 480:	movw	r0, #0
 484:	movt	r0, #0
 488:	b	a90 <print_data+0x9bc>
 48c:	add	r1, sp, #16
 490:	mov	r0, r9
 494:	bl	0 <coda_cursor_read_uint32>
 498:	cmp	r0, #0
 49c:	beq	4a4 <print_data+0x3d0>
 4a0:	bl	0 <handle_coda_error>
 4a4:	ldr	r1, [sp, #16]
 4a8:	movw	r0, #0
 4ac:	movt	r0, #0
 4b0:	bl	b04 <ff_printf>
 4b4:	b	a94 <print_data+0x9c0>
 4b8:	add	r1, sp, #16
 4bc:	mov	r0, r9
 4c0:	bl	0 <coda_cursor_read_double>
 4c4:	cmp	r0, #0
 4c8:	beq	4d0 <print_data+0x3fc>
 4cc:	bl	0 <handle_coda_error>
 4d0:	ldr	r1, [fp, #-40]	; 0xffffffd8
 4d4:	vldr	d16, [sp, #16]
 4d8:	movw	r2, #0
 4dc:	movw	r0, #0
 4e0:	movt	r2, #0
 4e4:	movt	r0, #0
 4e8:	cmp	r1, #8
 4ec:	moveq	r0, r2
 4f0:	vmov	r2, r3, d16
 4f4:	b	90c <print_data+0x838>
 4f8:	movw	r0, #0
 4fc:	movt	r0, #0
 500:	b	a90 <print_data+0x9bc>
 504:	add	r1, sp, #16
 508:	mov	r0, r9
 50c:	bl	0 <coda_cursor_read_char>
 510:	cmp	r0, #0
 514:	beq	51c <print_data+0x448>
 518:	bl	0 <handle_coda_error>
 51c:	movw	r0, #0
 520:	movt	r0, #0
 524:	bl	b04 <ff_printf>
 528:	add	r0, sp, #16
 52c:	mov	r1, #1
 530:	bl	bfc <print_escaped>
 534:	movw	r0, #0
 538:	movt	r0, #0
 53c:	b	a90 <print_data+0x9bc>
 540:	add	r1, sp, #16
 544:	mov	r0, r9
 548:	bl	0 <coda_cursor_get_string_length>
 54c:	cmp	r0, #0
 550:	beq	558 <print_data+0x484>
 554:	bl	0 <handle_coda_error>
 558:	ldr	r0, [sp, #16]
 55c:	add	r6, r0, #1
 560:	mov	r0, r6
 564:	bl	0 <malloc>
 568:	mov	r5, r0
 56c:	cmp	r0, #0
 570:	bne	5a4 <print_data+0x4d0>
 574:	movw	r1, #0
 578:	movw	r3, #0
 57c:	movw	r0, #361	; 0x169
 580:	mov	r2, r6
 584:	movt	r1, #0
 588:	movt	r3, #0
 58c:	str	r0, [sp]
 590:	mvn	r0, #0
 594:	bl	0 <coda_set_error>
 598:	bl	0 <handle_coda_error>
 59c:	ldr	r0, [sp, #16]
 5a0:	add	r6, r0, #1
 5a4:	mov	r0, r9
 5a8:	mov	r1, r5
 5ac:	mov	r2, r6
 5b0:	bl	0 <coda_cursor_read_string>
 5b4:	cmp	r0, #0
 5b8:	beq	5c0 <print_data+0x4ec>
 5bc:	bl	0 <handle_coda_error>
 5c0:	movw	r0, #0
 5c4:	movt	r0, #0
 5c8:	bl	b04 <ff_printf>
 5cc:	ldr	r1, [sp, #16]
 5d0:	mov	r0, r5
 5d4:	bl	bfc <print_escaped>
 5d8:	ldr	r1, [sp, #16]
 5dc:	movw	r0, #0
 5e0:	movt	r0, #0
 5e4:	bl	b04 <ff_printf>
 5e8:	b	718 <print_data+0x644>
 5ec:	add	r1, sp, #8
 5f0:	mov	r0, r9
 5f4:	bl	0 <coda_cursor_read_int64>
 5f8:	cmp	r0, #0
 5fc:	beq	604 <print_data+0x530>
 600:	bl	0 <handle_coda_error>
 604:	ldr	r0, [sp, #8]
 608:	ldr	r1, [sp, #12]
 60c:	add	r4, sp, #16
 610:	mov	r2, r4
 614:	bl	0 <coda_str64>
 618:	b	648 <print_data+0x574>
 61c:	add	r1, sp, #8
 620:	mov	r0, r9
 624:	bl	0 <coda_cursor_read_uint64>
 628:	cmp	r0, #0
 62c:	beq	634 <print_data+0x560>
 630:	bl	0 <handle_coda_error>
 634:	ldr	r0, [sp, #8]
 638:	ldr	r1, [sp, #12]
 63c:	add	r4, sp, #16
 640:	mov	r2, r4
 644:	bl	0 <coda_str64u>
 648:	movw	r0, #0
 64c:	mov	r1, r4
 650:	movt	r0, #0
 654:	bl	b04 <ff_printf>
 658:	b	a94 <print_data+0x9c0>
 65c:	add	r1, sp, #16
 660:	mov	r0, r9
 664:	bl	0 <coda_cursor_get_bit_size>
 668:	cmp	r0, #0
 66c:	beq	674 <print_data+0x5a0>
 670:	bl	0 <handle_coda_error>
 674:	ldr	r4, [sp, #16]
 678:	ldr	r7, [sp, #20]
 67c:	lsr	r0, r4, #3
 680:	tst	r4, #7
 684:	orr	r6, r0, r7, lsl #29
 688:	addne	r6, r6, #1
 68c:	mov	r0, r6
 690:	bl	0 <malloc>
 694:	mov	r5, r0
 698:	cmp	r0, #0
 69c:	bne	6d0 <print_data+0x5fc>
 6a0:	movw	r1, #0
 6a4:	movw	r3, #0
 6a8:	mov	r0, #392	; 0x188
 6ac:	mov	r2, r6
 6b0:	movt	r1, #0
 6b4:	movt	r3, #0
 6b8:	str	r0, [sp]
 6bc:	mvn	r0, #0
 6c0:	bl	0 <coda_set_error>
 6c4:	bl	0 <handle_coda_error>
 6c8:	ldr	r4, [sp, #16]
 6cc:	ldr	r7, [sp, #20]
 6d0:	mov	r0, r9
 6d4:	mov	r1, r5
 6d8:	mov	r2, #0
 6dc:	mov	r3, #0
 6e0:	stm	sp, {r4, r7}
 6e4:	bl	0 <coda_cursor_read_bits>
 6e8:	cmp	r0, #0
 6ec:	beq	6f4 <print_data+0x620>
 6f0:	bl	0 <handle_coda_error>
 6f4:	movw	r0, #0
 6f8:	movt	r0, #0
 6fc:	bl	b04 <ff_printf>
 700:	mov	r0, r5
 704:	mov	r1, r6
 708:	bl	bfc <print_escaped>
 70c:	movw	r0, #0
 710:	movt	r0, #0
 714:	bl	b04 <ff_printf>
 718:	mov	r0, r5
 71c:	bl	0 <free>
 720:	b	a94 <print_data+0x9c0>
 724:	mov	r0, r9
 728:	bl	0 <coda_cursor_goto_first_record_field>
 72c:	cmp	r0, #0
 730:	beq	738 <print_data+0x664>
 734:	bl	0 <handle_coda_error>
 738:	ldr	r0, [sp, #16]
 73c:	mov	r1, #0
 740:	str	r1, [fp, #-44]	; 0xffffffd4
 744:	cmp	r0, #1
 748:	blt	a7c <print_data+0x9a8>
 74c:	movw	r8, #0
 750:	movw	r7, #0
 754:	mov	r4, #1
 758:	add	r6, sp, #52	; 0x34
 75c:	movt	r8, #0
 760:	movt	r7, #0
 764:	b	780 <print_data+0x6ac>
 768:	ldr	r0, [fp, #-44]	; 0xffffffd4
 76c:	add	r1, r0, #1
 770:	ldr	r0, [sp, #16]
 774:	str	r1, [fp, #-44]	; 0xffffffd4
 778:	cmp	r1, r0
 77c:	bge	a7c <print_data+0x9a8>
 780:	ldr	r0, [sp, #8]
 784:	mov	r2, r6
 788:	bl	0 <coda_type_get_record_field_hidden_status>
 78c:	cmp	r0, #0
 790:	beq	798 <print_data+0x6c4>
 794:	bl	0 <handle_coda_error>
 798:	ldr	r0, [sp, #52]	; 0x34
 79c:	cmp	r0, #0
 7a0:	bne	838 <print_data+0x764>
 7a4:	ldr	r1, [fp, #-44]	; 0xffffffd4
 7a8:	ldr	r0, [sp, #8]
 7ac:	sub	r2, fp, #48	; 0x30
 7b0:	bl	0 <coda_type_get_record_field_name>
 7b4:	cmp	r0, #0
 7b8:	beq	7c0 <print_data+0x6ec>
 7bc:	bl	0 <handle_coda_error>
 7c0:	cmp	r5, #0
 7c4:	bne	7d0 <print_data+0x6fc>
 7c8:	cmp	r4, #0
 7cc:	bne	800 <print_data+0x72c>
 7d0:	ldr	r4, [sl]
 7d4:	cmp	r4, #0
 7d8:	bmi	ae4 <print_data+0xa10>
 7dc:	beq	800 <print_data+0x72c>
 7e0:	ldr	r3, [r8]
 7e4:	mov	r0, r7
 7e8:	mov	r1, #2
 7ec:	mov	r2, #1
 7f0:	bl	0 <fwrite>
 7f4:	sub	r4, r4, #1
 7f8:	cmp	r4, #0
 7fc:	bgt	7e0 <print_data+0x70c>
 800:	ldr	r1, [fp, #-48]	; 0xffffffd0
 804:	movw	r0, #0
 808:	movt	r0, #0
 80c:	bl	b04 <ff_printf>
 810:	ldr	r0, [sl]
 814:	mov	r1, #1
 818:	add	r0, r0, #1
 81c:	str	r0, [sl]
 820:	mov	r0, r9
 824:	bl	d4 <print_data>
 828:	ldr	r0, [sl]
 82c:	mov	r4, #0
 830:	sub	r0, r0, #1
 834:	str	r0, [sl]
 838:	ldr	r0, [sp, #16]
 83c:	ldr	r1, [fp, #-44]	; 0xffffffd4
 840:	sub	r0, r0, #1
 844:	cmp	r1, r0
 848:	bge	768 <print_data+0x694>
 84c:	mov	r0, r9
 850:	bl	0 <coda_cursor_goto_next_record_field>
 854:	cmp	r0, #0
 858:	beq	768 <print_data+0x694>
 85c:	bl	0 <handle_coda_error>
 860:	b	768 <print_data+0x694>
 864:	mov	r6, #1
 868:	b	9f0 <print_data+0x91c>
 86c:	add	r1, sp, #8
 870:	mov	r0, r9
 874:	bl	0 <coda_cursor_read_double>
 878:	cmp	r0, #0
 87c:	beq	884 <print_data+0x7b0>
 880:	bl	0 <handle_coda_error>
 884:	vldr	d0, [sp, #8]
 888:	bl	0 <coda_isNaN>
 88c:	cmp	r0, #0
 890:	bne	8a4 <print_data+0x7d0>
 894:	vldr	d0, [sp, #8]
 898:	bl	0 <coda_isInf>
 89c:	cmp	r0, #0
 8a0:	beq	ab0 <print_data+0x9dc>
 8a4:	vldr	d16, [sp, #8]
 8a8:	b	900 <print_data+0x82c>
 8ac:	add	r1, sp, #16
 8b0:	add	r2, sp, #8
 8b4:	mov	r0, r9
 8b8:	bl	0 <coda_cursor_read_complex_double_split>
 8bc:	cmp	r0, #0
 8c0:	beq	8c8 <print_data+0x7f4>
 8c4:	bl	0 <handle_coda_error>
 8c8:	vldr	d16, [sp, #16]
 8cc:	vldr	d17, [sp, #8]
 8d0:	movw	r0, #0
 8d4:	movt	r0, #0
 8d8:	vmov	r2, r3, d16
 8dc:	vstr	d17, [sp]
 8e0:	b	90c <print_data+0x838>
 8e4:	add	r1, sp, #16
 8e8:	mov	r0, r9
 8ec:	bl	0 <coda_cursor_read_double>
 8f0:	cmp	r0, #0
 8f4:	beq	8fc <print_data+0x828>
 8f8:	bl	0 <handle_coda_error>
 8fc:	vldr	d16, [sp, #16]
 900:	movw	r0, #0
 904:	vmov	r2, r3, d16
 908:	movt	r0, #0
 90c:	bl	b04 <ff_printf>
 910:	b	a94 <print_data+0x9c0>
 914:	bic	lr, r0, #3
 918:	mov	r2, #1
 91c:	vmov.i32	q8, #1	; 0x00000001
 920:	sub	r7, lr, #4
 924:	add	r3, r2, r7, lsr #2
 928:	cmp	r7, #12
 92c:	and	ip, r3, #3
 930:	bcs	944 <print_data+0x870>
 934:	mov	r3, #0
 938:	cmp	ip, #0
 93c:	bne	998 <print_data+0x8c4>
 940:	b	9b4 <print_data+0x8e0>
 944:	sub	r7, r3, ip
 948:	mov	r3, #0
 94c:	mov	r6, #64	; 0x40
 950:	mov	r5, r4
 954:	vld1.32	{d18-d19}, [r5], r6
 958:	add	r1, r4, #16
 95c:	add	r2, r4, #32
 960:	subs	r7, r7, #4
 964:	add	r3, r3, #16
 968:	vld1.32	{d20-d21}, [r1]
 96c:	add	r1, r4, #48	; 0x30
 970:	mov	r4, r5
 974:	vmul.i32	q8, q9, q8
 978:	vld1.32	{d18-d19}, [r2]
 97c:	vmul.i32	q8, q10, q8
 980:	vld1.32	{d20-d21}, [r1]
 984:	vmul.i32	q8, q9, q8
 988:	vmul.i32	q8, q10, q8
 98c:	bne	954 <print_data+0x880>
 990:	cmp	ip, #0
 994:	beq	9b4 <print_data+0x8e0>
 998:	add	r1, sp, #16
 99c:	rsb	r2, ip, #0
 9a0:	add	r3, r1, r3, lsl #2
 9a4:	vld1.32	{d18-d19}, [r3]!
 9a8:	adds	r2, r2, #1
 9ac:	vmul.i32	q8, q9, q8
 9b0:	bcc	9a4 <print_data+0x8d0>
 9b4:	vext.8	q9, q8, q8, #8
 9b8:	cmp	r0, lr
 9bc:	vmul.i32	q0, q8, q9
 9c0:	vmul.i32	q8, q0, d0[1]
 9c4:	vmov.32	r6, d16[0]
 9c8:	beq	9e8 <print_data+0x914>
 9cc:	add	r1, sp, #16
 9d0:	sub	r0, r0, lr
 9d4:	add	r2, r1, lr, lsl #2
 9d8:	ldr	r1, [r2], #4
 9dc:	subs	r0, r0, #1
 9e0:	mul	r6, r1, r6
 9e4:	bne	9d8 <print_data+0x904>
 9e8:	cmp	r6, #1
 9ec:	blt	a88 <print_data+0x9b4>
 9f0:	movw	r0, #0
 9f4:	movt	r0, #0
 9f8:	bl	b04 <ff_printf>
 9fc:	mov	r0, r9
 a00:	bl	0 <coda_cursor_goto_first_array_element>
 a04:	cmp	r0, #0
 a08:	beq	a10 <print_data+0x93c>
 a0c:	bl	0 <handle_coda_error>
 a10:	movw	r5, #0
 a14:	sub	r7, r6, #1
 a18:	mov	r4, #0
 a1c:	movt	r5, #0
 a20:	b	a30 <print_data+0x95c>
 a24:	add	r4, r4, #1
 a28:	cmp	r6, r4
 a2c:	beq	a7c <print_data+0x9a8>
 a30:	mov	r0, r5
 a34:	bl	b4c <fi_printf>
 a38:	ldr	r0, [sl]
 a3c:	mov	r1, #0
 a40:	add	r0, r0, #1
 a44:	str	r0, [sl]
 a48:	mov	r0, r9
 a4c:	bl	d4 <print_data>
 a50:	ldr	r0, [sl]
 a54:	cmp	r4, r7
 a58:	sub	r0, r0, #1
 a5c:	str	r0, [sl]
 a60:	bge	a24 <print_data+0x950>
 a64:	mov	r0, r9
 a68:	bl	0 <coda_cursor_goto_next_array_element>
 a6c:	cmp	r0, #0
 a70:	beq	a24 <print_data+0x950>
 a74:	bl	0 <handle_coda_error>
 a78:	b	a24 <print_data+0x950>
 a7c:	mov	r0, r9
 a80:	bl	0 <coda_cursor_goto_parent>
 a84:	b	a94 <print_data+0x9c0>
 a88:	movw	r0, #0
 a8c:	movt	r0, #0
 a90:	bl	b04 <ff_printf>
 a94:	ldr	r0, [fp, #-36]	; 0xffffffdc
 a98:	cmp	r0, #0
 a9c:	ldrne	r0, [sl]
 aa0:	subne	r0, r0, #1
 aa4:	strne	r0, [sl]
 aa8:	sub	sp, fp, #28
 aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 ab0:	vldr	d0, [sp, #8]
 ab4:	movw	r0, #0
 ab8:	add	r1, sp, #16
 abc:	movt	r0, #0
 ac0:	bl	0 <coda_time_double_to_string>
 ac4:	cmp	r0, #0
 ac8:	beq	ad8 <print_data+0xa04>
 acc:	movw	r0, #0
 ad0:	movt	r0, #0
 ad4:	b	a90 <print_data+0x9bc>
 ad8:	movw	r0, #0
 adc:	add	r1, sp, #16
 ae0:	b	650 <print_data+0x57c>
 ae4:	movw	r0, #0
 ae8:	movw	r1, #0
 aec:	movw	r3, #0
 af0:	mov	r2, #44	; 0x2c
 af4:	movt	r0, #0
 af8:	movt	r1, #0
 afc:	movt	r3, #0
 b00:	bl	0 <__assert_fail>

00000b04 <ff_printf>:
 b04:	sub	sp, sp, #12
 b08:	push	{fp, lr}
 b0c:	mov	fp, sp
 b10:	sub	sp, sp, #4
 b14:	mov	ip, r0
 b18:	add	r0, fp, #8
 b1c:	stm	r0, {r1, r2, r3}
 b20:	movw	r0, #0
 b24:	add	r2, fp, #8
 b28:	mov	r1, ip
 b2c:	movt	r0, #0
 b30:	str	r2, [sp]
 b34:	ldr	r0, [r0]
 b38:	bl	0 <vfprintf>
 b3c:	mov	sp, fp
 b40:	pop	{fp, lr}
 b44:	add	sp, sp, #12
 b48:	bx	lr

00000b4c <fi_printf>:
 b4c:	sub	sp, sp, #12
 b50:	push	{r4, r5, r6, r7, fp, lr}
 b54:	add	fp, sp, #16
 b58:	sub	sp, sp, #4
 b5c:	mov	r4, r0
 b60:	add	r0, fp, #8
 b64:	stm	r0, {r1, r2, r3}
 b68:	movw	r0, #0
 b6c:	movt	r0, #0
 b70:	ldr	r6, [r0]
 b74:	cmp	r6, #0
 b78:	bmi	bdc <fi_printf+0x90>
 b7c:	beq	bb0 <fi_printf+0x64>
 b80:	movw	r7, #0
 b84:	movw	r5, #0
 b88:	movt	r7, #0
 b8c:	movt	r5, #0
 b90:	ldr	r3, [r7]
 b94:	mov	r0, r5
 b98:	mov	r1, #2
 b9c:	mov	r2, #1
 ba0:	bl	0 <fwrite>
 ba4:	sub	r6, r6, #1
 ba8:	cmp	r6, #0
 bac:	bgt	b90 <fi_printf+0x44>
 bb0:	movw	r0, #0
 bb4:	add	r2, fp, #8
 bb8:	mov	r1, r4
 bbc:	movt	r0, #0
 bc0:	str	r2, [sp]
 bc4:	ldr	r0, [r0]
 bc8:	bl	0 <vfprintf>
 bcc:	sub	sp, fp, #16
 bd0:	pop	{r4, r5, r6, r7, fp, lr}
 bd4:	add	sp, sp, #12
 bd8:	bx	lr
 bdc:	movw	r0, #0
 be0:	movw	r1, #0
 be4:	movw	r3, #0
 be8:	mov	r2, #44	; 0x2c
 bec:	movt	r0, #0
 bf0:	movt	r1, #0
 bf4:	movt	r3, #0
 bf8:	bl	0 <__assert_fail>

00000bfc <print_escaped>:
 bfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c00:	add	fp, sp, #28
 c04:	sub	sp, sp, #4
 c08:	cmp	r1, #1
 c0c:	blt	d48 <print_escaped+0x14c>
 c10:	movw	r6, #0
 c14:	movw	r8, #0
 c18:	movw	r9, #0
 c1c:	movw	sl, #0
 c20:	movw	r7, #0
 c24:	mov	r4, r1
 c28:	mov	r5, r0
 c2c:	movt	r6, #0
 c30:	movt	r8, #0
 c34:	movt	r9, #0
 c38:	movt	sl, #0
 c3c:	movt	r7, #0
 c40:	b	c58 <print_escaped+0x5c>
 c44:	mov	r0, r7
 c48:	bl	b04 <ff_printf>
 c4c:	add	r5, r5, #1
 c50:	subs	r4, r4, #1
 c54:	beq	d48 <print_escaped+0x14c>
 c58:	ldrb	r1, [r5]
 c5c:	sub	r0, r1, #8
 c60:	cmp	r0, #26
 c64:	bhi	ce8 <print_escaped+0xec>
 c68:	add	r2, pc, #0
 c6c:	ldr	pc, [r2, r0, lsl #2]
 c70:	.word	0x00000cdc
 c74:	.word	0x00000d18
 c78:	.word	0x00000d20
 c7c:	.word	0x00000cfc
 c80:	.word	0x00000d28
 c84:	.word	0x00000d30
 c88:	.word	0x00000cfc
 c8c:	.word	0x00000cfc
 c90:	.word	0x00000cfc
 c94:	.word	0x00000cfc
 c98:	.word	0x00000cfc
 c9c:	.word	0x00000cfc
 ca0:	.word	0x00000cfc
 ca4:	.word	0x00000cfc
 ca8:	.word	0x00000cfc
 cac:	.word	0x00000cfc
 cb0:	.word	0x00000cfc
 cb4:	.word	0x00000cfc
 cb8:	.word	0x00000cfc
 cbc:	.word	0x00000cfc
 cc0:	.word	0x00000cfc
 cc4:	.word	0x00000cfc
 cc8:	.word	0x00000cfc
 ccc:	.word	0x00000cfc
 cd0:	.word	0x00000cfc
 cd4:	.word	0x00000cfc
 cd8:	.word	0x00000c44
 cdc:	movw	r0, #0
 ce0:	movt	r0, #0
 ce4:	b	c48 <print_escaped+0x4c>
 ce8:	cmp	r1, #92	; 0x5c
 cec:	bne	cfc <print_escaped+0x100>
 cf0:	movw	r0, #0
 cf4:	movt	r0, #0
 cf8:	b	c48 <print_escaped+0x4c>
 cfc:	sub	r0, r1, #32
 d00:	uxtb	r0, r0
 d04:	cmp	r0, #94	; 0x5e
 d08:	bhi	d38 <print_escaped+0x13c>
 d0c:	movw	r0, #0
 d10:	movt	r0, #0
 d14:	b	d40 <print_escaped+0x144>
 d18:	mov	r0, r6
 d1c:	b	c48 <print_escaped+0x4c>
 d20:	mov	r0, r8
 d24:	b	c48 <print_escaped+0x4c>
 d28:	mov	r0, r9
 d2c:	b	c48 <print_escaped+0x4c>
 d30:	mov	r0, sl
 d34:	b	c48 <print_escaped+0x4c>
 d38:	movw	r0, #0
 d3c:	movt	r0, #0
 d40:	bl	b04 <ff_printf>
 d44:	b	c4c <print_escaped+0x50>
 d48:	sub	sp, fp, #28
 d4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
